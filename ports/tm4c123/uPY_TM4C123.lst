
uPY_TM4C123.axf:     file format elf32-littlearm


Disassembly of section .text:

00000000 <_text>:
       0:	20000a08 	.word	0x20000a08
       4:	0001b1e5 	.word	0x0001b1e5
       8:	0001b249 	.word	0x0001b249
       c:	0001b24f 	.word	0x0001b24f
      10:	0001b255 	.word	0x0001b255
      14:	0001b255 	.word	0x0001b255
      18:	0001b255 	.word	0x0001b255
	...
      2c:	0001b255 	.word	0x0001b255
      30:	0001b255 	.word	0x0001b255
      34:	00000000 	.word	0x00000000
      38:	0001b255 	.word	0x0001b255
      3c:	0001b255 	.word	0x0001b255
      40:	0001b255 	.word	0x0001b255
      44:	0001b255 	.word	0x0001b255
      48:	0001b255 	.word	0x0001b255
      4c:	0001b255 	.word	0x0001b255
      50:	0001b255 	.word	0x0001b255
      54:	0001b255 	.word	0x0001b255
      58:	0001b255 	.word	0x0001b255
      5c:	0001b255 	.word	0x0001b255
      60:	0001b255 	.word	0x0001b255
      64:	0001b255 	.word	0x0001b255
      68:	0001b255 	.word	0x0001b255
      6c:	0001b255 	.word	0x0001b255
      70:	0001b255 	.word	0x0001b255
      74:	0001b255 	.word	0x0001b255
      78:	0001b255 	.word	0x0001b255
      7c:	0001b255 	.word	0x0001b255
      80:	0001b255 	.word	0x0001b255
      84:	0001b255 	.word	0x0001b255
      88:	0001b255 	.word	0x0001b255
      8c:	0001b255 	.word	0x0001b255
      90:	0001b255 	.word	0x0001b255
      94:	0001b255 	.word	0x0001b255
      98:	0001b255 	.word	0x0001b255
      9c:	0001b255 	.word	0x0001b255
      a0:	0001b255 	.word	0x0001b255
      a4:	0001b255 	.word	0x0001b255
      a8:	0001b255 	.word	0x0001b255
      ac:	0001b255 	.word	0x0001b255
      b0:	0001b255 	.word	0x0001b255
      b4:	0001b255 	.word	0x0001b255
      b8:	0001b255 	.word	0x0001b255
      bc:	0001b255 	.word	0x0001b255
      c0:	0001b255 	.word	0x0001b255
      c4:	0001b255 	.word	0x0001b255
      c8:	0001b255 	.word	0x0001b255
      cc:	0001b255 	.word	0x0001b255
      d0:	0001b255 	.word	0x0001b255
      d4:	0001b255 	.word	0x0001b255
      d8:	0001b255 	.word	0x0001b255
      dc:	0001b255 	.word	0x0001b255
      e0:	0001b255 	.word	0x0001b255
	...
      ec:	0001b255 	.word	0x0001b255
      f0:	0001b255 	.word	0x0001b255
      f4:	0001b255 	.word	0x0001b255
      f8:	0001b255 	.word	0x0001b255
      fc:	0001b255 	.word	0x0001b255
     100:	0001b255 	.word	0x0001b255
     104:	0001b255 	.word	0x0001b255
     108:	0001b255 	.word	0x0001b255
     10c:	0001b255 	.word	0x0001b255
	...
     118:	0001b255 	.word	0x0001b255
     11c:	0001b255 	.word	0x0001b255
     120:	0001b255 	.word	0x0001b255
     124:	0001b255 	.word	0x0001b255
     128:	0001b255 	.word	0x0001b255
     12c:	0001b255 	.word	0x0001b255
     130:	0001b255 	.word	0x0001b255
     134:	0001b255 	.word	0x0001b255
     138:	0001b255 	.word	0x0001b255
     13c:	0001b255 	.word	0x0001b255
	...
     150:	0001b255 	.word	0x0001b255
     154:	0001b255 	.word	0x0001b255
     158:	0001b255 	.word	0x0001b255
     15c:	0001b255 	.word	0x0001b255
	...
     1b0:	0001b255 	.word	0x0001b255
     1b4:	0001b255 	.word	0x0001b255
     1b8:	0001b255 	.word	0x0001b255
     1bc:	0001b255 	.word	0x0001b255
     1c0:	0001b255 	.word	0x0001b255
     1c4:	0001b255 	.word	0x0001b255
     1c8:	0001b255 	.word	0x0001b255
     1cc:	0001b255 	.word	0x0001b255
     1d0:	0001b255 	.word	0x0001b255
     1d4:	0001b255 	.word	0x0001b255
     1d8:	0001b255 	.word	0x0001b255
     1dc:	0001b255 	.word	0x0001b255
     1e0:	0001b255 	.word	0x0001b255
     1e4:	0001b255 	.word	0x0001b255
     1e8:	0001b255 	.word	0x0001b255
	...
     1f4:	0001b255 	.word	0x0001b255
     1f8:	0001b255 	.word	0x0001b255
     1fc:	0001b255 	.word	0x0001b255
     200:	0001b255 	.word	0x0001b255
     204:	0001b255 	.word	0x0001b255
	...
     210:	0001b255 	.word	0x0001b255
     214:	0001b255 	.word	0x0001b255
     218:	0001b255 	.word	0x0001b255
     21c:	0001b255 	.word	0x0001b255
     220:	0001b255 	.word	0x0001b255
     224:	0001b255 	.word	0x0001b255
     228:	0001b255 	.word	0x0001b255
     22c:	0001b255 	.word	0x0001b255
     230:	0001b255 	.word	0x0001b255
     234:	0001b255 	.word	0x0001b255
     238:	0001b255 	.word	0x0001b255
     23c:	0001b255 	.word	0x0001b255
     240:	0001b255 	.word	0x0001b255
     244:	0001b255 	.word	0x0001b255
     248:	0001b255 	.word	0x0001b255
     24c:	0001b255 	.word	0x0001b255
     250:	0001b255 	.word	0x0001b255
     254:	0001b255 	.word	0x0001b255
     258:	0001b255 	.word	0x0001b255
     25c:	0001b255 	.word	0x0001b255
     260:	0001b255 	.word	0x0001b255
     264:	0001b255 	.word	0x0001b255
     268:	0001b255 	.word	0x0001b255

0000026c <nlr_push_tail>:
// LTO can't see inside inline asm functions so explicitly mark nlr_push_tail as used
__attribute__((used)) unsigned int nlr_push_tail(nlr_buf_t *nlr);
#endif
#endif

unsigned int nlr_push_tail(nlr_buf_t *nlr) {
     26c:	b480      	push	{r7}
     26e:	b085      	sub	sp, #20
     270:	af00      	add	r7, sp, #0
     272:	6078      	str	r0, [r7, #4]
    nlr_buf_t **top = &MP_STATE_THREAD(nlr_top);
     274:	4b07      	ldr	r3, [pc, #28]	; (294 <nlr_push_tail+0x28>)
     276:	60fb      	str	r3, [r7, #12]
    nlr->prev = *top;
     278:	68fb      	ldr	r3, [r7, #12]
     27a:	681a      	ldr	r2, [r3, #0]
     27c:	687b      	ldr	r3, [r7, #4]
     27e:	601a      	str	r2, [r3, #0]
    MP_NLR_SAVE_PYSTACK(nlr);
    *top = nlr;
     280:	68fb      	ldr	r3, [r7, #12]
     282:	687a      	ldr	r2, [r7, #4]
     284:	601a      	str	r2, [r3, #0]
    return 0; // normal return
     286:	2300      	movs	r3, #0
}
     288:	4618      	mov	r0, r3
     28a:	3714      	adds	r7, #20
     28c:	46bd      	mov	sp, r7
     28e:	f85d 7b04 	ldr.w	r7, [sp], #4
     292:	4770      	bx	lr
     294:	20000a38 	.word	0x20000a38

00000298 <nlr_pop>:

void nlr_pop(void) {
     298:	b480      	push	{r7}
     29a:	b083      	sub	sp, #12
     29c:	af00      	add	r7, sp, #0
    nlr_buf_t **top = &MP_STATE_THREAD(nlr_top);
     29e:	4b06      	ldr	r3, [pc, #24]	; (2b8 <nlr_pop+0x20>)
     2a0:	607b      	str	r3, [r7, #4]
    *top = (*top)->prev;
     2a2:	687b      	ldr	r3, [r7, #4]
     2a4:	681b      	ldr	r3, [r3, #0]
     2a6:	681a      	ldr	r2, [r3, #0]
     2a8:	687b      	ldr	r3, [r7, #4]
     2aa:	601a      	str	r2, [r3, #0]
}
     2ac:	bf00      	nop
     2ae:	370c      	adds	r7, #12
     2b0:	46bd      	mov	sp, r7
     2b2:	f85d 7b04 	ldr.w	r7, [sp], #4
     2b6:	4770      	bx	lr
     2b8:	20000a38 	.word	0x20000a38

000002bc <nlr_push>:
// For reference, arm/thumb callee save regs are:
//      r4-r11, r13=sp

__attribute__((naked)) unsigned int nlr_push(nlr_buf_t *nlr) {

    __asm volatile (
     2bc:	60c4      	str	r4, [r0, #12]
     2be:	6105      	str	r5, [r0, #16]
     2c0:	6146      	str	r6, [r0, #20]
     2c2:	6187      	str	r7, [r0, #24]
     2c4:	f8c0 801c 	str.w	r8, [r0, #28]
     2c8:	f8c0 9020 	str.w	r9, [r0, #32]
     2cc:	f8c0 a024 	str.w	sl, [r0, #36]	; 0x24
     2d0:	f8c0 b028 	str.w	fp, [r0, #40]	; 0x28
     2d4:	f8c0 d02c 	str.w	sp, [r0, #44]	; 0x2c
     2d8:	f8c0 e008 	str.w	lr, [r0, #8]
     2dc:	f7ff bfc6 	b.w	26c <nlr_push_tail>

000002e0 <nlr_jump>:
    return 0;
    #endif
}

NORETURN void nlr_jump(void *val) {
    MP_NLR_JUMP_HEAD(val, top)
     2e0:	4a0d      	ldr	r2, [pc, #52]	; (318 <nlr_jump+0x38>)
NORETURN void nlr_jump(void *val) {
     2e2:	b508      	push	{r3, lr}
    MP_NLR_JUMP_HEAD(val, top)
     2e4:	68d3      	ldr	r3, [r2, #12]
     2e6:	b90b      	cbnz	r3, 2ec <nlr_jump+0xc>
     2e8:	f01a ff5e 	bl	1b1a8 <nlr_jump_fail>
     2ec:	6819      	ldr	r1, [r3, #0]
     2ee:	6058      	str	r0, [r3, #4]
     2f0:	60d1      	str	r1, [r2, #12]

    __asm volatile (
     2f2:	4618      	mov	r0, r3
     2f4:	68c4      	ldr	r4, [r0, #12]
     2f6:	6905      	ldr	r5, [r0, #16]
     2f8:	6946      	ldr	r6, [r0, #20]
     2fa:	6987      	ldr	r7, [r0, #24]
     2fc:	f8d0 801c 	ldr.w	r8, [r0, #28]
     300:	f8d0 9020 	ldr.w	r9, [r0, #32]
     304:	f8d0 a024 	ldr.w	sl, [r0, #36]	; 0x24
     308:	f8d0 b028 	ldr.w	fp, [r0, #40]	; 0x28
     30c:	f8d0 d02c 	ldr.w	sp, [r0, #44]	; 0x2c
     310:	f8d0 e008 	ldr.w	lr, [r0, #8]
     314:	2001      	movs	r0, #1
     316:	4770      	bx	lr
     318:	20000a2c 	.word	0x20000a2c

0000031c <m_malloc>:
        return NULL;
    }
}
#endif // MICROPY_ENABLE_GC

void *m_malloc(size_t num_bytes) {
     31c:	b580      	push	{r7, lr}
     31e:	b084      	sub	sp, #16
     320:	af00      	add	r7, sp, #0
     322:	6078      	str	r0, [r7, #4]
    void *ptr = malloc(num_bytes);
     324:	2100      	movs	r1, #0
     326:	6878      	ldr	r0, [r7, #4]
     328:	f000 fab2 	bl	890 <gc_alloc>
     32c:	60f8      	str	r0, [r7, #12]
    if (ptr == NULL && num_bytes != 0) {
     32e:	68fb      	ldr	r3, [r7, #12]
     330:	2b00      	cmp	r3, #0
     332:	d105      	bne.n	340 <m_malloc+0x24>
     334:	687b      	ldr	r3, [r7, #4]
     336:	2b00      	cmp	r3, #0
     338:	d002      	beq.n	340 <m_malloc+0x24>
        m_malloc_fail(num_bytes);
     33a:	6878      	ldr	r0, [r7, #4]
     33c:	f00c fdb4 	bl	cea8 <m_malloc_fail>
    MP_STATE_MEM(total_bytes_allocated) += num_bytes;
    MP_STATE_MEM(current_bytes_allocated) += num_bytes;
    UPDATE_PEAK();
#endif
    DEBUG_printf("malloc %d : %p\n", num_bytes, ptr);
    return ptr;
     340:	68fb      	ldr	r3, [r7, #12]
}
     342:	4618      	mov	r0, r3
     344:	3710      	adds	r7, #16
     346:	46bd      	mov	sp, r7
     348:	bd80      	pop	{r7, pc}

0000034a <m_malloc_maybe>:

void *m_malloc_maybe(size_t num_bytes) {
     34a:	b580      	push	{r7, lr}
     34c:	b084      	sub	sp, #16
     34e:	af00      	add	r7, sp, #0
     350:	6078      	str	r0, [r7, #4]
    void *ptr = malloc(num_bytes);
     352:	2100      	movs	r1, #0
     354:	6878      	ldr	r0, [r7, #4]
     356:	f000 fa9b 	bl	890 <gc_alloc>
     35a:	60f8      	str	r0, [r7, #12]
    MP_STATE_MEM(total_bytes_allocated) += num_bytes;
    MP_STATE_MEM(current_bytes_allocated) += num_bytes;
    UPDATE_PEAK();
#endif
    DEBUG_printf("malloc %d : %p\n", num_bytes, ptr);
    return ptr;
     35c:	68fb      	ldr	r3, [r7, #12]
}
     35e:	4618      	mov	r0, r3
     360:	3710      	adds	r7, #16
     362:	46bd      	mov	sp, r7
     364:	bd80      	pop	{r7, pc}

00000366 <m_malloc0>:
    DEBUG_printf("malloc %d : %p\n", num_bytes, ptr);
    return ptr;
}
#endif

void *m_malloc0(size_t num_bytes) {
     366:	b580      	push	{r7, lr}
     368:	b084      	sub	sp, #16
     36a:	af00      	add	r7, sp, #0
     36c:	6078      	str	r0, [r7, #4]
    void *ptr = m_malloc(num_bytes);
     36e:	6878      	ldr	r0, [r7, #4]
     370:	f7ff ffd4 	bl	31c <m_malloc>
     374:	60f8      	str	r0, [r7, #12]
    // If this config is set then the GC clears all memory, so we don't need to.
    #if !MICROPY_GC_CONSERVATIVE_CLEAR
    memset(ptr, 0, num_bytes);
    #endif
    return ptr;
     376:	68fb      	ldr	r3, [r7, #12]
}
     378:	4618      	mov	r0, r3
     37a:	3710      	adds	r7, #16
     37c:	46bd      	mov	sp, r7
     37e:	bd80      	pop	{r7, pc}

00000380 <m_realloc>:

#if MICROPY_MALLOC_USES_ALLOCATED_SIZE
void *m_realloc(void *ptr, size_t old_num_bytes, size_t new_num_bytes) {
#else
void *m_realloc(void *ptr, size_t new_num_bytes) {
     380:	b580      	push	{r7, lr}
     382:	b084      	sub	sp, #16
     384:	af00      	add	r7, sp, #0
     386:	6078      	str	r0, [r7, #4]
     388:	6039      	str	r1, [r7, #0]
#endif
    void *new_ptr = realloc(ptr, new_num_bytes);
     38a:	2201      	movs	r2, #1
     38c:	6839      	ldr	r1, [r7, #0]
     38e:	6878      	ldr	r0, [r7, #4]
     390:	f000 fb5e 	bl	a50 <gc_realloc>
     394:	60f8      	str	r0, [r7, #12]
    if (new_ptr == NULL && new_num_bytes != 0) {
     396:	68fb      	ldr	r3, [r7, #12]
     398:	2b00      	cmp	r3, #0
     39a:	d105      	bne.n	3a8 <m_realloc+0x28>
     39c:	683b      	ldr	r3, [r7, #0]
     39e:	2b00      	cmp	r3, #0
     3a0:	d002      	beq.n	3a8 <m_realloc+0x28>
        m_malloc_fail(new_num_bytes);
     3a2:	6838      	ldr	r0, [r7, #0]
     3a4:	f00c fd80 	bl	cea8 <m_malloc_fail>
    #if MICROPY_MALLOC_USES_ALLOCATED_SIZE
    DEBUG_printf("realloc %p, %d, %d : %p\n", ptr, old_num_bytes, new_num_bytes, new_ptr);
    #else
    DEBUG_printf("realloc %p, %d : %p\n", ptr, new_num_bytes, new_ptr);
    #endif
    return new_ptr;
     3a8:	68fb      	ldr	r3, [r7, #12]
}
     3aa:	4618      	mov	r0, r3
     3ac:	3710      	adds	r7, #16
     3ae:	46bd      	mov	sp, r7
     3b0:	bd80      	pop	{r7, pc}

000003b2 <m_realloc_maybe>:

#if MICROPY_MALLOC_USES_ALLOCATED_SIZE
void *m_realloc_maybe(void *ptr, size_t old_num_bytes, size_t new_num_bytes, bool allow_move) {
#else
void *m_realloc_maybe(void *ptr, size_t new_num_bytes, bool allow_move) {
     3b2:	b580      	push	{r7, lr}
     3b4:	b086      	sub	sp, #24
     3b6:	af00      	add	r7, sp, #0
     3b8:	60f8      	str	r0, [r7, #12]
     3ba:	60b9      	str	r1, [r7, #8]
     3bc:	4613      	mov	r3, r2
     3be:	71fb      	strb	r3, [r7, #7]
#endif
    void *new_ptr = realloc_ext(ptr, new_num_bytes, allow_move);
     3c0:	79fb      	ldrb	r3, [r7, #7]
     3c2:	461a      	mov	r2, r3
     3c4:	68b9      	ldr	r1, [r7, #8]
     3c6:	68f8      	ldr	r0, [r7, #12]
     3c8:	f000 fb42 	bl	a50 <gc_realloc>
     3cc:	6178      	str	r0, [r7, #20]
    #if MICROPY_MALLOC_USES_ALLOCATED_SIZE
    DEBUG_printf("realloc %p, %d, %d : %p\n", ptr, old_num_bytes, new_num_bytes, new_ptr);
    #else
    DEBUG_printf("realloc %p, %d, %d : %p\n", ptr, new_num_bytes, new_ptr);
    #endif
    return new_ptr;
     3ce:	697b      	ldr	r3, [r7, #20]
}
     3d0:	4618      	mov	r0, r3
     3d2:	3718      	adds	r7, #24
     3d4:	46bd      	mov	sp, r7
     3d6:	bd80      	pop	{r7, pc}

000003d8 <m_free>:

#if MICROPY_MALLOC_USES_ALLOCATED_SIZE
void m_free(void *ptr, size_t num_bytes) {
#else
void m_free(void *ptr) {
     3d8:	b580      	push	{r7, lr}
     3da:	b082      	sub	sp, #8
     3dc:	af00      	add	r7, sp, #0
     3de:	6078      	str	r0, [r7, #4]
#endif
    free(ptr);
     3e0:	6878      	ldr	r0, [r7, #4]
     3e2:	f000 faf5 	bl	9d0 <gc_free>
    #if MICROPY_MALLOC_USES_ALLOCATED_SIZE
    DEBUG_printf("free %p, %d\n", ptr, num_bytes);
    #else
    DEBUG_printf("free %p\n", ptr);
    #endif
}
     3e6:	bf00      	nop
     3e8:	3708      	adds	r7, #8
     3ea:	46bd      	mov	sp, r7
     3ec:	bd80      	pop	{r7, pc}
	...

000003f0 <gc_mark_subtree>:

// Take the given block as the topmost block on the stack. Check all it's
// children: mark the unmarked child blocks and put those newly marked
// blocks on the stack. When all children have been checked, pop off the
// topmost block on the stack and repeat with that one.
STATIC void gc_mark_subtree(size_t block) {
     3f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
     3f4:	4c2a      	ldr	r4, [pc, #168]	; (4a0 <gc_mark_subtree+0xb0>)
    // Start with the block passed in the argument.
    size_t sp = 0;
     3f6:	2500      	movs	r5, #0
                // Mark and push this pointer
                size_t childblock = BLOCK_FROM_PTR(ptr);
                if (ATB_GET_KIND(childblock) == AT_HEAD) {
                    // an unmarked head, mark it, and push it on gc stack
                    TRACE_MARK(childblock, ptr);
                    ATB_HEAD_TO_MARK(childblock);
     3f8:	f04f 0903 	mov.w	r9, #3
     3fc:	f8d4 7098 	ldr.w	r7, [r4, #152]	; 0x98
        size_t n_blocks = 0;
     400:	2100      	movs	r1, #0
            n_blocks += 1;
     402:	3101      	adds	r1, #1
     404:	1843      	adds	r3, r0, r1
        } while (ATB_GET_KIND(block + n_blocks) == AT_TAIL);
     406:	089a      	lsrs	r2, r3, #2
     408:	f003 0303 	and.w	r3, r3, #3
     40c:	5cba      	ldrb	r2, [r7, r2]
     40e:	005b      	lsls	r3, r3, #1
     410:	fa42 f303 	asr.w	r3, r2, r3
     414:	f003 0303 	and.w	r3, r3, #3
     418:	2b02      	cmp	r3, #2
     41a:	d0f2      	beq.n	402 <gc_mark_subtree+0x12>
        void **ptrs = (void**)PTR_FROM_BLOCK(block);
     41c:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
        for (size_t i = n_blocks * BYTES_PER_BLOCK / sizeof(void*); i > 0; i--, ptrs++) {
     420:	0109      	lsls	r1, r1, #4
     422:	088a      	lsrs	r2, r1, #2
        void **ptrs = (void**)PTR_FROM_BLOCK(block);
     424:	eb03 1000 	add.w	r0, r3, r0, lsl #4
        for (size_t i = n_blocks * BYTES_PER_BLOCK / sizeof(void*); i > 0; i--, ptrs++) {
     428:	b309      	cbz	r1, 46e <gc_mark_subtree+0x7e>
     42a:	eb00 0182 	add.w	r1, r0, r2, lsl #2
            void *ptr = *ptrs;
     42e:	f850 3b04 	ldr.w	r3, [r0], #4
            if (VERIFY_PTR(ptr)) {
     432:	071a      	lsls	r2, r3, #28
     434:	d119      	bne.n	46a <gc_mark_subtree+0x7a>
     436:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
     43a:	4293      	cmp	r3, r2
     43c:	d315      	bcc.n	46a <gc_mark_subtree+0x7a>
                size_t childblock = BLOCK_FROM_PTR(ptr);
     43e:	1a9a      	subs	r2, r3, r2
            if (VERIFY_PTR(ptr)) {
     440:	f8d4 60a4 	ldr.w	r6, [r4, #164]	; 0xa4
                if (ATB_GET_KIND(childblock) == AT_HEAD) {
     444:	ea4f 1e92 	mov.w	lr, r2, lsr #6
                size_t childblock = BLOCK_FROM_PTR(ptr);
     448:	0912      	lsrs	r2, r2, #4
                if (ATB_GET_KIND(childblock) == AT_HEAD) {
     44a:	f002 0703 	and.w	r7, r2, #3
            if (VERIFY_PTR(ptr)) {
     44e:	42b3      	cmp	r3, r6
                if (ATB_GET_KIND(childblock) == AT_HEAD) {
     450:	ea4f 0747 	mov.w	r7, r7, lsl #1
            if (VERIFY_PTR(ptr)) {
     454:	d209      	bcs.n	46a <gc_mark_subtree+0x7a>
                if (ATB_GET_KIND(childblock) == AT_HEAD) {
     456:	f8d4 c098 	ldr.w	ip, [r4, #152]	; 0x98
     45a:	f81c 800e 	ldrb.w	r8, [ip, lr]
     45e:	fa48 f307 	asr.w	r3, r8, r7
     462:	f003 0303 	and.w	r3, r3, #3
     466:	2b01      	cmp	r3, #1
     468:	d008      	beq.n	47c <gc_mark_subtree+0x8c>
        for (size_t i = n_blocks * BYTES_PER_BLOCK / sizeof(void*); i > 0; i--, ptrs++) {
     46a:	4281      	cmp	r1, r0
     46c:	d1df      	bne.n	42e <gc_mark_subtree+0x3e>
                }
            }
        }

        // Are there any blocks on the stack?
        if (sp == 0) {
     46e:	b1ad      	cbz	r5, 49c <gc_mark_subtree+0xac>
            break; // No, stack is empty, we're done.
        }

        // pop the next block off the stack
        block = MP_STATE_MEM(gc_stack)[--sp];
     470:	3d01      	subs	r5, #1
     472:	eb04 0385 	add.w	r3, r4, r5, lsl #2
     476:	f8d3 00ac 	ldr.w	r0, [r3, #172]	; 0xac
    for (;;) {
     47a:	e7bf      	b.n	3fc <gc_mark_subtree+0xc>
                    ATB_HEAD_TO_MARK(childblock);
     47c:	fa09 f707 	lsl.w	r7, r9, r7
     480:	ea47 0708 	orr.w	r7, r7, r8
                        MP_STATE_MEM(gc_stack)[sp++] = childblock;
     484:	eb04 0885 	add.w	r8, r4, r5, lsl #2
                    if (sp < MICROPY_ALLOC_GC_STACK_SIZE) {
     488:	2d3f      	cmp	r5, #63	; 0x3f
                    ATB_HEAD_TO_MARK(childblock);
     48a:	f80c 700e 	strb.w	r7, [ip, lr]
                        MP_STATE_MEM(gc_stack)[sp++] = childblock;
     48e:	bf9a      	itte	ls
     490:	3501      	addls	r5, #1
     492:	f8c8 20ac 	strls.w	r2, [r8, #172]	; 0xac
                        MP_STATE_MEM(gc_stack_overflow) = 1;
     496:	f8c4 30a8 	strhi.w	r3, [r4, #168]	; 0xa8
     49a:	e7e6      	b.n	46a <gc_mark_subtree+0x7a>
     49c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
     4a0:	20000a2c 	.word	0x20000a2c

000004a4 <gc_free.part.0>:
}
*/

// force the freeing of a piece of memory
// TODO: freeing here does not call finaliser
void gc_free(void *ptr) {
     4a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

    if (ptr == NULL) {
        GC_EXIT();
    } else {
        // get the GC block number corresponding to this pointer
        assert(VERIFY_PTR(ptr));
     4a6:	0703      	lsls	r3, r0, #28
     4a8:	d134      	bne.n	514 <gc_free.part.0+0x70>
     4aa:	4e21      	ldr	r6, [pc, #132]	; (530 <gc_free.part.0+0x8c>)
     4ac:	f8d6 30a0 	ldr.w	r3, [r6, #160]	; 0xa0
     4b0:	4298      	cmp	r0, r3
     4b2:	d32f      	bcc.n	514 <gc_free.part.0+0x70>
     4b4:	f8d6 20a4 	ldr.w	r2, [r6, #164]	; 0xa4
     4b8:	4290      	cmp	r0, r2
     4ba:	d22b      	bcs.n	514 <gc_free.part.0+0x70>
        size_t block = BLOCK_FROM_PTR(ptr);
     4bc:	1ac0      	subs	r0, r0, r3
        assert(ATB_GET_KIND(block) == AT_HEAD);
     4be:	0981      	lsrs	r1, r0, #6
     4c0:	f8d6 7098 	ldr.w	r7, [r6, #152]	; 0x98
        size_t block = BLOCK_FROM_PTR(ptr);
     4c4:	0900      	lsrs	r0, r0, #4
        assert(ATB_GET_KIND(block) == AT_HEAD);
     4c6:	f000 0303 	and.w	r3, r0, #3
     4ca:	5c7a      	ldrb	r2, [r7, r1]
     4cc:	005c      	lsls	r4, r3, #1
     4ce:	4122      	asrs	r2, r4
     4d0:	f002 0203 	and.w	r2, r2, #3
     4d4:	2a01      	cmp	r2, #1
     4d6:	d124      	bne.n	522 <gc_free.part.0+0x7e>
        #if MICROPY_ENABLE_FINALISER
        FTB_CLEAR(block);
        #endif

        // set the last_free pointer to this block if it's earlier in the heap
        if (block / BLOCKS_PER_ATB < MP_STATE_MEM(gc_last_free_atb_index)) {
     4d8:	f8d6 21b0 	ldr.w	r2, [r6, #432]	; 0x1b0
     4dc:	4291      	cmp	r1, r2
            MP_STATE_MEM(gc_last_free_atb_index) = block / BLOCKS_PER_ATB;
     4de:	bf38      	it	cc
     4e0:	f8c6 11b0 	strcc.w	r1, [r6, #432]	; 0x1b0
     4e4:	5c79      	ldrb	r1, [r7, r1]
     4e6:	0884      	lsrs	r4, r0, #2
        }

        // free head and all of its tail blocks
        do {
            ATB_ANY_TO_FREE(block);
     4e8:	2503      	movs	r5, #3
     4ea:	005b      	lsls	r3, r3, #1
     4ec:	fa05 f303 	lsl.w	r3, r5, r3
     4f0:	ea21 0103 	bic.w	r1, r1, r3
     4f4:	5539      	strb	r1, [r7, r4]
            block += 1;
     4f6:	3001      	adds	r0, #1
        } while (ATB_GET_KIND(block) == AT_TAIL);
     4f8:	f8d6 7098 	ldr.w	r7, [r6, #152]	; 0x98
     4fc:	0884      	lsrs	r4, r0, #2
     4fe:	f000 0303 	and.w	r3, r0, #3
     502:	5d39      	ldrb	r1, [r7, r4]
     504:	005a      	lsls	r2, r3, #1
     506:	fa41 f202 	asr.w	r2, r1, r2
     50a:	f002 0203 	and.w	r2, r2, #3
     50e:	2a02      	cmp	r2, #2
     510:	d0eb      	beq.n	4ea <gc_free.part.0+0x46>

        #if EXTENSIVE_HEAP_PROFILING
        gc_dump_alloc_table();
        #endif
    }
}
     512:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        assert(VERIFY_PTR(ptr));
     514:	4b07      	ldr	r3, [pc, #28]	; (534 <gc_free.part.0+0x90>)
     516:	4a08      	ldr	r2, [pc, #32]	; (538 <gc_free.part.0+0x94>)
     518:	4808      	ldr	r0, [pc, #32]	; (53c <gc_free.part.0+0x98>)
     51a:	f44f 7110 	mov.w	r1, #576	; 0x240
     51e:	f01a fe4d 	bl	1b1bc <__assert_func>
        assert(ATB_GET_KIND(block) == AT_HEAD);
     522:	4b07      	ldr	r3, [pc, #28]	; (540 <gc_free.part.0+0x9c>)
     524:	4a04      	ldr	r2, [pc, #16]	; (538 <gc_free.part.0+0x94>)
     526:	4805      	ldr	r0, [pc, #20]	; (53c <gc_free.part.0+0x98>)
     528:	f240 2142 	movw	r1, #578	; 0x242
     52c:	f01a fe46 	bl	1b1bc <__assert_func>
     530:	20000a2c 	.word	0x20000a2c
     534:	0001c808 	.word	0x0001c808
     538:	0001c7f4 	.word	0x0001c7f4
     53c:	0001c818 	.word	0x0001c818
     540:	0001c828 	.word	0x0001c828

00000544 <gc_init>:
void gc_init(void *start, void *end) {
     544:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    MP_STATE_MEM(gc_alloc_table_byte_len) = total_byte_len / (1 + BITS_PER_BYTE / 2 * BYTES_PER_BLOCK);
     546:	4a0f      	ldr	r2, [pc, #60]	; (584 <gc_init+0x40>)
     548:	4c0f      	ldr	r4, [pc, #60]	; (588 <gc_init+0x44>)
    end = (void*)((uintptr_t)end & (~(BYTES_PER_BLOCK - 1)));
     54a:	f021 050f 	bic.w	r5, r1, #15
    size_t total_byte_len = (byte*)end - (byte*)start;
     54e:	1a2b      	subs	r3, r5, r0
    MP_STATE_MEM(gc_alloc_table_byte_len) = total_byte_len / (1 + BITS_PER_BYTE / 2 * BYTES_PER_BLOCK);
     550:	fba2 2303 	umull	r2, r3, r2, r3
     554:	099b      	lsrs	r3, r3, #6
    MP_STATE_MEM(gc_pool_start) = (byte*)end - gc_pool_block_len * BYTES_PER_BLOCK;
     556:	eba5 1783 	sub.w	r7, r5, r3, lsl #6
    memset(MP_STATE_MEM(gc_alloc_table_start), 0, MP_STATE_MEM(gc_alloc_table_byte_len));
     55a:	461a      	mov	r2, r3
     55c:	2100      	movs	r1, #0
    MP_STATE_MEM(gc_alloc_table_byte_len) = total_byte_len / (1 + BITS_PER_BYTE / 2 * BYTES_PER_BLOCK);
     55e:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
    MP_STATE_MEM(gc_alloc_table_start) = (byte*)start;
     562:	f8c4 0098 	str.w	r0, [r4, #152]	; 0x98
    MP_STATE_MEM(gc_pool_end) = end;
     566:	f8c4 50a4 	str.w	r5, [r4, #164]	; 0xa4
    MP_STATE_MEM(gc_pool_start) = (byte*)end - gc_pool_block_len * BYTES_PER_BLOCK;
     56a:	f8c4 70a0 	str.w	r7, [r4, #160]	; 0xa0
    memset(MP_STATE_MEM(gc_alloc_table_start), 0, MP_STATE_MEM(gc_alloc_table_byte_len));
     56e:	f01b fac3 	bl	1baf8 <memset>
    MP_STATE_MEM(gc_last_free_atb_index) = 0;
     572:	2200      	movs	r2, #0
    MP_STATE_MEM(gc_lock_depth) = 0;
     574:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    MP_STATE_MEM(gc_last_free_atb_index) = 0;
     578:	f8c4 21b0 	str.w	r2, [r4, #432]	; 0x1b0
    MP_STATE_MEM(gc_lock_depth) = 0;
     57c:	f8c4 31ac 	str.w	r3, [r4, #428]	; 0x1ac
     580:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     582:	bf00      	nop
     584:	fc0fc0fd 	.word	0xfc0fc0fd
     588:	20000a2c 	.word	0x20000a2c

0000058c <gc_lock>:
    MP_STATE_MEM(gc_lock_depth)++;
     58c:	4a03      	ldr	r2, [pc, #12]	; (59c <gc_lock+0x10>)
     58e:	f8b2 31ac 	ldrh.w	r3, [r2, #428]	; 0x1ac
     592:	3301      	adds	r3, #1
     594:	f8a2 31ac 	strh.w	r3, [r2, #428]	; 0x1ac
     598:	4770      	bx	lr
     59a:	bf00      	nop
     59c:	20000a2c 	.word	0x20000a2c

000005a0 <gc_unlock>:
    MP_STATE_MEM(gc_lock_depth)--;
     5a0:	4a03      	ldr	r2, [pc, #12]	; (5b0 <gc_unlock+0x10>)
     5a2:	f8b2 31ac 	ldrh.w	r3, [r2, #428]	; 0x1ac
     5a6:	3b01      	subs	r3, #1
     5a8:	f8a2 31ac 	strh.w	r3, [r2, #428]	; 0x1ac
     5ac:	4770      	bx	lr
     5ae:	bf00      	nop
     5b0:	20000a2c 	.word	0x20000a2c

000005b4 <gc_is_locked>:
    return MP_STATE_MEM(gc_lock_depth) != 0;
     5b4:	4b03      	ldr	r3, [pc, #12]	; (5c4 <gc_is_locked+0x10>)
     5b6:	f8b3 01ac 	ldrh.w	r0, [r3, #428]	; 0x1ac
}
     5ba:	3000      	adds	r0, #0
     5bc:	bf18      	it	ne
     5be:	2001      	movne	r0, #1
     5c0:	4770      	bx	lr
     5c2:	bf00      	nop
     5c4:	20000a2c 	.word	0x20000a2c

000005c8 <gc_collect_start>:
void gc_collect_start(void) {
     5c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    MP_STATE_MEM(gc_lock_depth)++;
     5ca:	4b1c      	ldr	r3, [pc, #112]	; (63c <gc_collect_start+0x74>)
     5cc:	f8b3 21ac 	ldrh.w	r2, [r3, #428]	; 0x1ac
    MP_STATE_MEM(gc_stack_overflow) = 0;
     5d0:	2100      	movs	r1, #0
    MP_STATE_MEM(gc_lock_depth)++;
     5d2:	3201      	adds	r2, #1
     5d4:	461d      	mov	r5, r3
     5d6:	f8a3 21ac 	strh.w	r2, [r3, #428]	; 0x1ac
    MP_STATE_MEM(gc_stack_overflow) = 0;
     5da:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
     5de:	461c      	mov	r4, r3
     5e0:	f103 0684 	add.w	r6, r3, #132	; 0x84
                ATB_HEAD_TO_MARK(block);
     5e4:	2703      	movs	r7, #3
        void *ptr = ptrs[i];
     5e6:	f854 3f04 	ldr.w	r3, [r4, #4]!
        if (VERIFY_PTR(ptr)) {
     5ea:	071a      	lsls	r2, r3, #28
     5ec:	d119      	bne.n	622 <gc_collect_start+0x5a>
     5ee:	f8d5 00a0 	ldr.w	r0, [r5, #160]	; 0xa0
     5f2:	4283      	cmp	r3, r0
     5f4:	d315      	bcc.n	622 <gc_collect_start+0x5a>
            size_t block = BLOCK_FROM_PTR(ptr);
     5f6:	1a18      	subs	r0, r3, r0
        if (VERIFY_PTR(ptr)) {
     5f8:	f8d5 10a4 	ldr.w	r1, [r5, #164]	; 0xa4
            if (ATB_GET_KIND(block) == AT_HEAD) {
     5fc:	ea4f 1e90 	mov.w	lr, r0, lsr #6
            size_t block = BLOCK_FROM_PTR(ptr);
     600:	0900      	lsrs	r0, r0, #4
            if (ATB_GET_KIND(block) == AT_HEAD) {
     602:	f000 0203 	and.w	r2, r0, #3
        if (VERIFY_PTR(ptr)) {
     606:	428b      	cmp	r3, r1
            if (ATB_GET_KIND(block) == AT_HEAD) {
     608:	ea4f 0242 	mov.w	r2, r2, lsl #1
        if (VERIFY_PTR(ptr)) {
     60c:	d209      	bcs.n	622 <gc_collect_start+0x5a>
            if (ATB_GET_KIND(block) == AT_HEAD) {
     60e:	f8d5 1098 	ldr.w	r1, [r5, #152]	; 0x98
     612:	f811 c00e 	ldrb.w	ip, [r1, lr]
     616:	fa4c f302 	asr.w	r3, ip, r2
     61a:	f003 0303 	and.w	r3, r3, #3
     61e:	2b01      	cmp	r3, #1
     620:	d002      	beq.n	628 <gc_collect_start+0x60>
    for (size_t i = 0; i < len; i++) {
     622:	42a6      	cmp	r6, r4
     624:	d1df      	bne.n	5e6 <gc_collect_start+0x1e>
}
     626:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                ATB_HEAD_TO_MARK(block);
     628:	fa07 f202 	lsl.w	r2, r7, r2
     62c:	ea42 030c 	orr.w	r3, r2, ip
     630:	f801 300e 	strb.w	r3, [r1, lr]
                gc_mark_subtree(block);
     634:	f7ff fedc 	bl	3f0 <gc_mark_subtree>
     638:	e7f3      	b.n	622 <gc_collect_start+0x5a>
     63a:	bf00      	nop
     63c:	20000a2c 	.word	0x20000a2c

00000640 <gc_collect_root>:
    for (size_t i = 0; i < len; i++) {
     640:	b3a1      	cbz	r1, 6ac <gc_collect_root+0x6c>
void gc_collect_root(void **ptrs, size_t len) {
     642:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        if (VERIFY_PTR(ptr)) {
     646:	4f1a      	ldr	r7, [pc, #104]	; (6b0 <gc_collect_root+0x70>)
     648:	460e      	mov	r6, r1
     64a:	1f05      	subs	r5, r0, #4
    for (size_t i = 0; i < len; i++) {
     64c:	2400      	movs	r4, #0
                ATB_HEAD_TO_MARK(block);
     64e:	f04f 0803 	mov.w	r8, #3
        void *ptr = ptrs[i];
     652:	f855 3f04 	ldr.w	r3, [r5, #4]!
        if (VERIFY_PTR(ptr)) {
     656:	071a      	lsls	r2, r3, #28
    for (size_t i = 0; i < len; i++) {
     658:	f104 0401 	add.w	r4, r4, #1
        if (VERIFY_PTR(ptr)) {
     65c:	d119      	bne.n	692 <gc_collect_root+0x52>
     65e:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
     662:	4283      	cmp	r3, r0
     664:	d315      	bcc.n	692 <gc_collect_root+0x52>
            size_t block = BLOCK_FROM_PTR(ptr);
     666:	1a18      	subs	r0, r3, r0
        if (VERIFY_PTR(ptr)) {
     668:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
            if (ATB_GET_KIND(block) == AT_HEAD) {
     66c:	ea4f 1e90 	mov.w	lr, r0, lsr #6
            size_t block = BLOCK_FROM_PTR(ptr);
     670:	0900      	lsrs	r0, r0, #4
            if (ATB_GET_KIND(block) == AT_HEAD) {
     672:	f000 0203 	and.w	r2, r0, #3
        if (VERIFY_PTR(ptr)) {
     676:	428b      	cmp	r3, r1
            if (ATB_GET_KIND(block) == AT_HEAD) {
     678:	ea4f 0242 	mov.w	r2, r2, lsl #1
        if (VERIFY_PTR(ptr)) {
     67c:	d209      	bcs.n	692 <gc_collect_root+0x52>
            if (ATB_GET_KIND(block) == AT_HEAD) {
     67e:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
     682:	f811 c00e 	ldrb.w	ip, [r1, lr]
     686:	fa4c f302 	asr.w	r3, ip, r2
     68a:	f003 0303 	and.w	r3, r3, #3
     68e:	2b01      	cmp	r3, #1
     690:	d003      	beq.n	69a <gc_collect_root+0x5a>
    for (size_t i = 0; i < len; i++) {
     692:	42a6      	cmp	r6, r4
     694:	d1dd      	bne.n	652 <gc_collect_root+0x12>
     696:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                ATB_HEAD_TO_MARK(block);
     69a:	fa08 f202 	lsl.w	r2, r8, r2
     69e:	ea42 030c 	orr.w	r3, r2, ip
     6a2:	f801 300e 	strb.w	r3, [r1, lr]
                gc_mark_subtree(block);
     6a6:	f7ff fea3 	bl	3f0 <gc_mark_subtree>
     6aa:	e7f2      	b.n	692 <gc_collect_root+0x52>
     6ac:	4770      	bx	lr
     6ae:	bf00      	nop
     6b0:	20000a2c 	.word	0x20000a2c

000006b4 <gc_collect_end>:
void gc_collect_end(void) {
     6b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     6b8:	4e35      	ldr	r6, [pc, #212]	; (790 <gc_collect_end+0xdc>)
     6ba:	f8d6 009c 	ldr.w	r0, [r6, #156]	; 0x9c
     6be:	f8d6 30a8 	ldr.w	r3, [r6, #168]	; 0xa8
     6c2:	0080      	lsls	r0, r0, #2
        MP_STATE_MEM(gc_stack_overflow) = 0;
     6c4:	2500      	movs	r5, #0
    while (MP_STATE_MEM(gc_stack_overflow)) {
     6c6:	b313      	cbz	r3, 70e <gc_collect_end+0x5a>
        MP_STATE_MEM(gc_stack_overflow) = 0;
     6c8:	f8c6 50a8 	str.w	r5, [r6, #168]	; 0xa8
        for (size_t block = 0; block < MP_STATE_MEM(gc_alloc_table_byte_len) * BLOCKS_PER_ATB; block++) {
     6cc:	2800      	cmp	r0, #0
     6ce:	d04a      	beq.n	766 <gc_collect_end+0xb2>
     6d0:	2400      	movs	r4, #0
     6d2:	e002      	b.n	6da <gc_collect_end+0x26>
     6d4:	3401      	adds	r4, #1
     6d6:	4284      	cmp	r4, r0
     6d8:	d215      	bcs.n	706 <gc_collect_end+0x52>
            if (ATB_GET_KIND(block) == AT_MARK) {
     6da:	08a2      	lsrs	r2, r4, #2
     6dc:	f8d6 1098 	ldr.w	r1, [r6, #152]	; 0x98
     6e0:	f004 0303 	and.w	r3, r4, #3
     6e4:	5c8a      	ldrb	r2, [r1, r2]
     6e6:	005b      	lsls	r3, r3, #1
     6e8:	fa42 f303 	asr.w	r3, r2, r3
     6ec:	f003 0303 	and.w	r3, r3, #3
     6f0:	2b03      	cmp	r3, #3
     6f2:	d1ef      	bne.n	6d4 <gc_collect_end+0x20>
                gc_mark_subtree(block);
     6f4:	4620      	mov	r0, r4
     6f6:	f7ff fe7b 	bl	3f0 <gc_mark_subtree>
     6fa:	f8d6 009c 	ldr.w	r0, [r6, #156]	; 0x9c
        for (size_t block = 0; block < MP_STATE_MEM(gc_alloc_table_byte_len) * BLOCKS_PER_ATB; block++) {
     6fe:	3401      	adds	r4, #1
     700:	0080      	lsls	r0, r0, #2
     702:	4284      	cmp	r4, r0
     704:	d3e9      	bcc.n	6da <gc_collect_end+0x26>
     706:	f8d6 30a8 	ldr.w	r3, [r6, #168]	; 0xa8
    while (MP_STATE_MEM(gc_stack_overflow)) {
     70a:	2b00      	cmp	r3, #0
     70c:	d1dc      	bne.n	6c8 <gc_collect_end+0x14>
    for (size_t block = 0; block < MP_STATE_MEM(gc_alloc_table_byte_len) * BLOCKS_PER_ATB; block++) {
     70e:	b350      	cbz	r0, 766 <gc_collect_end+0xb2>
     710:	4698      	mov	r8, r3
     712:	4619      	mov	r1, r3
                    ATB_ANY_TO_FREE(block);
     714:	f04f 0e03 	mov.w	lr, #3
                ATB_MARK_TO_HEAD(block);
     718:	2702      	movs	r7, #2
     71a:	e006      	b.n	72a <gc_collect_end+0x76>
        switch (ATB_GET_KIND(block)) {
     71c:	2a03      	cmp	r2, #3
     71e:	d02c      	beq.n	77a <gc_collect_end+0xc6>
     720:	2a01      	cmp	r2, #1
     722:	d013      	beq.n	74c <gc_collect_end+0x98>
    for (size_t block = 0; block < MP_STATE_MEM(gc_alloc_table_byte_len) * BLOCKS_PER_ATB; block++) {
     724:	3101      	adds	r1, #1
     726:	4281      	cmp	r1, r0
     728:	d21d      	bcs.n	766 <gc_collect_end+0xb2>
        switch (ATB_GET_KIND(block)) {
     72a:	088c      	lsrs	r4, r1, #2
     72c:	f8d6 5098 	ldr.w	r5, [r6, #152]	; 0x98
     730:	f001 0303 	and.w	r3, r1, #3
     734:	f815 c004 	ldrb.w	ip, [r5, r4]
     738:	005b      	lsls	r3, r3, #1
     73a:	fa4c f203 	asr.w	r2, ip, r3
     73e:	f002 0203 	and.w	r2, r2, #3
     742:	2a02      	cmp	r2, #2
     744:	d1ea      	bne.n	71c <gc_collect_end+0x68>
                if (free_tail) {
     746:	f1b8 0f00 	cmp.w	r8, #0
     74a:	d0eb      	beq.n	724 <gc_collect_end+0x70>
                    ATB_ANY_TO_FREE(block);
     74c:	fa0e f303 	lsl.w	r3, lr, r3
     750:	ea2c 0303 	bic.w	r3, ip, r3
     754:	552b      	strb	r3, [r5, r4]
     756:	f8d6 009c 	ldr.w	r0, [r6, #156]	; 0x9c
    for (size_t block = 0; block < MP_STATE_MEM(gc_alloc_table_byte_len) * BLOCKS_PER_ATB; block++) {
     75a:	3101      	adds	r1, #1
     75c:	0080      	lsls	r0, r0, #2
     75e:	4281      	cmp	r1, r0
                    ATB_ANY_TO_FREE(block);
     760:	f04f 0801 	mov.w	r8, #1
    for (size_t block = 0; block < MP_STATE_MEM(gc_alloc_table_byte_len) * BLOCKS_PER_ATB; block++) {
     764:	d3e1      	bcc.n	72a <gc_collect_end+0x76>
    MP_STATE_MEM(gc_lock_depth)--;
     766:	f8b6 31ac 	ldrh.w	r3, [r6, #428]	; 0x1ac
    MP_STATE_MEM(gc_last_free_atb_index) = 0;
     76a:	2200      	movs	r2, #0
    MP_STATE_MEM(gc_lock_depth)--;
     76c:	3b01      	subs	r3, #1
     76e:	f8a6 31ac 	strh.w	r3, [r6, #428]	; 0x1ac
    MP_STATE_MEM(gc_last_free_atb_index) = 0;
     772:	f8c6 21b0 	str.w	r2, [r6, #432]	; 0x1b0
}
     776:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                ATB_MARK_TO_HEAD(block);
     77a:	fa07 f303 	lsl.w	r3, r7, r3
     77e:	ea2c 0303 	bic.w	r3, ip, r3
     782:	552b      	strb	r3, [r5, r4]
     784:	f8d6 009c 	ldr.w	r0, [r6, #156]	; 0x9c
                free_tail = 0;
     788:	f04f 0800 	mov.w	r8, #0
     78c:	0080      	lsls	r0, r0, #2
     78e:	e7c9      	b.n	724 <gc_collect_end+0x70>
     790:	20000a2c 	.word	0x20000a2c

00000794 <gc_info>:
    info->total = MP_STATE_MEM(gc_pool_end) - MP_STATE_MEM(gc_pool_start);
     794:	4b3d      	ldr	r3, [pc, #244]	; (88c <gc_info+0xf8>)
     796:	f8d3 10a0 	ldr.w	r1, [r3, #160]	; 0xa0
     79a:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
void gc_info(gc_info_t *info) {
     79e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        finish = (block == MP_STATE_MEM(gc_alloc_table_byte_len) * BLOCKS_PER_ATB);
     7a2:	f8d3 609c 	ldr.w	r6, [r3, #156]	; 0x9c
     7a6:	f8d3 7098 	ldr.w	r7, [r3, #152]	; 0x98
    info->total = MP_STATE_MEM(gc_pool_end) - MP_STATE_MEM(gc_pool_start);
     7aa:	1a52      	subs	r2, r2, r1
    info->used = 0;
     7ac:	2300      	movs	r3, #0
    info->total = MP_STATE_MEM(gc_pool_end) - MP_STATE_MEM(gc_pool_start);
     7ae:	6002      	str	r2, [r0, #0]
        finish = (block == MP_STATE_MEM(gc_alloc_table_byte_len) * BLOCKS_PER_ATB);
     7b0:	461d      	mov	r5, r3
     7b2:	00b6      	lsls	r6, r6, #2
    info->used = 0;
     7b4:	6043      	str	r3, [r0, #4]
    info->free = 0;
     7b6:	6083      	str	r3, [r0, #8]
    info->max_free = 0;
     7b8:	60c3      	str	r3, [r0, #12]
    info->num_1block = 0;
     7ba:	6103      	str	r3, [r0, #16]
    info->num_2block = 0;
     7bc:	6143      	str	r3, [r0, #20]
    info->max_block = 0;
     7be:	6183      	str	r3, [r0, #24]
        finish = (block == MP_STATE_MEM(gc_alloc_table_byte_len) * BLOCKS_PER_ATB);
     7c0:	469c      	mov	ip, r3
    for (size_t block = 0, len = 0, len_free = 0; !finish;) {
     7c2:	469e      	mov	lr, r3
     7c4:	461c      	mov	r4, r3
     7c6:	461a      	mov	r2, r3
     7c8:	4699      	mov	r9, r3
     7ca:	4619      	mov	r1, r3
     7cc:	4698      	mov	r8, r3
        size_t kind = ATB_GET_KIND(block);
     7ce:	f817 3009 	ldrb.w	r3, [r7, r9]
     7d2:	0049      	lsls	r1, r1, #1
     7d4:	410b      	asrs	r3, r1
     7d6:	f003 0303 	and.w	r3, r3, #3
        switch (kind) {
     7da:	2b01      	cmp	r3, #1
     7dc:	d030      	beq.n	840 <gc_info+0xac>
     7de:	d327      	bcc.n	830 <gc_info+0x9c>
     7e0:	2b02      	cmp	r3, #2
     7e2:	d102      	bne.n	7ea <gc_info+0x56>
                info->used += 1;
     7e4:	3501      	adds	r5, #1
     7e6:	6045      	str	r5, [r0, #4]
                len += 1;
     7e8:	3401      	adds	r4, #1
        block++;
     7ea:	3201      	adds	r2, #1
        if (!finish) {
     7ec:	42b2      	cmp	r2, r6
     7ee:	d00e      	beq.n	80e <gc_info+0x7a>
            kind = ATB_GET_KIND(block);
     7f0:	ea4f 0992 	mov.w	r9, r2, lsr #2
     7f4:	f002 0103 	and.w	r1, r2, #3
     7f8:	f817 3009 	ldrb.w	r3, [r7, r9]
     7fc:	ea4f 0a41 	mov.w	sl, r1, lsl #1
     800:	fa43 f30a 	asr.w	r3, r3, sl
        if (finish || kind == AT_FREE || kind == AT_HEAD) {
     804:	f013 0303 	ands.w	r3, r3, #3
     808:	d001      	beq.n	80e <gc_info+0x7a>
     80a:	2b01      	cmp	r3, #1
     80c:	d1df      	bne.n	7ce <gc_info+0x3a>
            if (len == 1) {
     80e:	2c01      	cmp	r4, #1
     810:	d01a      	beq.n	848 <gc_info+0xb4>
            } else if (len == 2) {
     812:	2c02      	cmp	r4, #2
     814:	d02b      	beq.n	86e <gc_info+0xda>
            if (len > info->max_block) {
     816:	6981      	ldr	r1, [r0, #24]
     818:	428c      	cmp	r4, r1
                info->max_block = len;
     81a:	bf88      	it	hi
     81c:	6184      	strhi	r4, [r0, #24]
            if (finish || kind == AT_HEAD) {
     81e:	42b2      	cmp	r2, r6
     820:	d01b      	beq.n	85a <gc_info+0xc6>
     822:	2b01      	cmp	r3, #1
     824:	d027      	beq.n	876 <gc_info+0xe2>
     826:	ea4f 0992 	mov.w	r9, r2, lsr #2
     82a:	f002 0103 	and.w	r1, r2, #3
     82e:	e7ce      	b.n	7ce <gc_info+0x3a>
                info->free += 1;
     830:	f10c 0c01 	add.w	ip, ip, #1
     834:	f8c0 c008 	str.w	ip, [r0, #8]
                len_free += 1;
     838:	f10e 0e01 	add.w	lr, lr, #1
                len = 0;
     83c:	461c      	mov	r4, r3
                break;
     83e:	e7d4      	b.n	7ea <gc_info+0x56>
                info->used += 1;
     840:	3501      	adds	r5, #1
     842:	6045      	str	r5, [r0, #4]
                len = 1;
     844:	461c      	mov	r4, r3
                break;
     846:	e7d0      	b.n	7ea <gc_info+0x56>
                info->num_1block += 1;
     848:	6901      	ldr	r1, [r0, #16]
     84a:	3101      	adds	r1, #1
     84c:	6101      	str	r1, [r0, #16]
            if (len > info->max_block) {
     84e:	6981      	ldr	r1, [r0, #24]
     850:	428c      	cmp	r4, r1
                info->max_block = len;
     852:	bf88      	it	hi
     854:	6184      	strhi	r4, [r0, #24]
            if (finish || kind == AT_HEAD) {
     856:	42b2      	cmp	r2, r6
     858:	d1e3      	bne.n	822 <gc_info+0x8e>
                if (len_free > info->max_free) {
     85a:	45c6      	cmp	lr, r8
     85c:	d90e      	bls.n	87c <gc_info+0xe8>
    for (size_t block = 0, len = 0, len_free = 0; !finish;) {
     85e:	42b2      	cmp	r2, r6
                    info->max_free = len_free;
     860:	f8c0 e00c 	str.w	lr, [r0, #12]
    for (size_t block = 0, len = 0, len_free = 0; !finish;) {
     864:	d00a      	beq.n	87c <gc_info+0xe8>
     866:	46f0      	mov	r8, lr
                len_free = 0;
     868:	f04f 0e00 	mov.w	lr, #0
     86c:	e7db      	b.n	826 <gc_info+0x92>
                info->num_2block += 1;
     86e:	6941      	ldr	r1, [r0, #20]
     870:	3101      	adds	r1, #1
     872:	6141      	str	r1, [r0, #20]
     874:	e7cf      	b.n	816 <gc_info+0x82>
                if (len_free > info->max_free) {
     876:	45f0      	cmp	r8, lr
     878:	d2f6      	bcs.n	868 <gc_info+0xd4>
     87a:	e7f0      	b.n	85e <gc_info+0xca>
    info->used *= BYTES_PER_BLOCK;
     87c:	012d      	lsls	r5, r5, #4
    info->free *= BYTES_PER_BLOCK;
     87e:	ea4f 130c 	mov.w	r3, ip, lsl #4
    info->used *= BYTES_PER_BLOCK;
     882:	6045      	str	r5, [r0, #4]
    info->free *= BYTES_PER_BLOCK;
     884:	6083      	str	r3, [r0, #8]
}
     886:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     88a:	bf00      	nop
     88c:	20000a2c 	.word	0x20000a2c

00000890 <gc_alloc>:
    size_t n_blocks = ((n_bytes + BYTES_PER_BLOCK - 1) & (~(BYTES_PER_BLOCK - 1))) / BYTES_PER_BLOCK;
     890:	300f      	adds	r0, #15
void *gc_alloc(size_t n_bytes, bool has_finaliser) {
     892:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (n_blocks == 0) {
     894:	0906      	lsrs	r6, r0, #4
     896:	d052      	beq.n	93e <gc_alloc+0xae>
    if (MP_STATE_MEM(gc_lock_depth) > 0) {
     898:	4d4c      	ldr	r5, [pc, #304]	; (9cc <gc_alloc+0x13c>)
     89a:	f8b5 41ac 	ldrh.w	r4, [r5, #428]	; 0x1ac
     89e:	2c00      	cmp	r4, #0
     8a0:	d14d      	bne.n	93e <gc_alloc+0xae>
    int collected = !MP_STATE_MEM(gc_auto_collect_enabled);
     8a2:	f8b5 e1ae 	ldrh.w	lr, [r5, #430]	; 0x1ae
        for (i = MP_STATE_MEM(gc_last_free_atb_index); i < MP_STATE_MEM(gc_alloc_table_byte_len); i++) {
     8a6:	f8d5 21b0 	ldr.w	r2, [r5, #432]	; 0x1b0
     8aa:	f8d5 009c 	ldr.w	r0, [r5, #156]	; 0x9c
    int collected = !MP_STATE_MEM(gc_auto_collect_enabled);
     8ae:	fabe fe8e 	clz	lr, lr
        for (i = MP_STATE_MEM(gc_last_free_atb_index); i < MP_STATE_MEM(gc_alloc_table_byte_len); i++) {
     8b2:	4282      	cmp	r2, r0
    int collected = !MP_STATE_MEM(gc_auto_collect_enabled);
     8b4:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
        for (i = MP_STATE_MEM(gc_last_free_atb_index); i < MP_STATE_MEM(gc_alloc_table_byte_len); i++) {
     8b8:	d234      	bcs.n	924 <gc_alloc+0x94>
     8ba:	f8d5 7098 	ldr.w	r7, [r5, #152]	; 0x98
     8be:	18b9      	adds	r1, r7, r2
     8c0:	e017      	b.n	8f2 <gc_alloc+0x62>
            if (ATB_0_IS_FREE(a)) { if (++n_free >= n_blocks) { i = i * BLOCKS_PER_ATB + 0; goto found; } } else { n_free = 0; }
     8c2:	3401      	adds	r4, #1
     8c4:	42a6      	cmp	r6, r4
     8c6:	d93d      	bls.n	944 <gc_alloc+0xb4>
            if (ATB_1_IS_FREE(a)) { if (++n_free >= n_blocks) { i = i * BLOCKS_PER_ATB + 1; goto found; } } else { n_free = 0; }
     8c8:	f013 0f0c 	tst.w	r3, #12
     8cc:	d11b      	bne.n	906 <gc_alloc+0x76>
     8ce:	3401      	adds	r4, #1
     8d0:	42a6      	cmp	r6, r4
     8d2:	d971      	bls.n	9b8 <gc_alloc+0x128>
            if (ATB_2_IS_FREE(a)) { if (++n_free >= n_blocks) { i = i * BLOCKS_PER_ATB + 2; goto found; } } else { n_free = 0; }
     8d4:	f013 0f30 	tst.w	r3, #48	; 0x30
     8d8:	d11a      	bne.n	910 <gc_alloc+0x80>
     8da:	3401      	adds	r4, #1
     8dc:	42a6      	cmp	r6, r4
     8de:	d96e      	bls.n	9be <gc_alloc+0x12e>
            if (ATB_3_IS_FREE(a)) { if (++n_free >= n_blocks) { i = i * BLOCKS_PER_ATB + 3; goto found; } } else { n_free = 0; }
     8e0:	f013 0fc0 	tst.w	r3, #192	; 0xc0
     8e4:	d119      	bne.n	91a <gc_alloc+0x8a>
     8e6:	3401      	adds	r4, #1
     8e8:	42a6      	cmp	r6, r4
     8ea:	d96b      	bls.n	9c4 <gc_alloc+0x134>
        for (i = MP_STATE_MEM(gc_last_free_atb_index); i < MP_STATE_MEM(gc_alloc_table_byte_len); i++) {
     8ec:	3201      	adds	r2, #1
     8ee:	4282      	cmp	r2, r0
     8f0:	d218      	bcs.n	924 <gc_alloc+0x94>
            byte a = MP_STATE_MEM(gc_alloc_table_start)[i];
     8f2:	f811 3b01 	ldrb.w	r3, [r1], #1
            if (ATB_0_IS_FREE(a)) { if (++n_free >= n_blocks) { i = i * BLOCKS_PER_ATB + 0; goto found; } } else { n_free = 0; }
     8f6:	f013 0f03 	tst.w	r3, #3
     8fa:	d0e2      	beq.n	8c2 <gc_alloc+0x32>
            if (ATB_1_IS_FREE(a)) { if (++n_free >= n_blocks) { i = i * BLOCKS_PER_ATB + 1; goto found; } } else { n_free = 0; }
     8fc:	f013 0f0c 	tst.w	r3, #12
            if (ATB_0_IS_FREE(a)) { if (++n_free >= n_blocks) { i = i * BLOCKS_PER_ATB + 0; goto found; } } else { n_free = 0; }
     900:	f04f 0400 	mov.w	r4, #0
            if (ATB_1_IS_FREE(a)) { if (++n_free >= n_blocks) { i = i * BLOCKS_PER_ATB + 1; goto found; } } else { n_free = 0; }
     904:	d0e3      	beq.n	8ce <gc_alloc+0x3e>
            if (ATB_2_IS_FREE(a)) { if (++n_free >= n_blocks) { i = i * BLOCKS_PER_ATB + 2; goto found; } } else { n_free = 0; }
     906:	f013 0f30 	tst.w	r3, #48	; 0x30
            if (ATB_1_IS_FREE(a)) { if (++n_free >= n_blocks) { i = i * BLOCKS_PER_ATB + 1; goto found; } } else { n_free = 0; }
     90a:	f04f 0400 	mov.w	r4, #0
            if (ATB_2_IS_FREE(a)) { if (++n_free >= n_blocks) { i = i * BLOCKS_PER_ATB + 2; goto found; } } else { n_free = 0; }
     90e:	d0e4      	beq.n	8da <gc_alloc+0x4a>
            if (ATB_3_IS_FREE(a)) { if (++n_free >= n_blocks) { i = i * BLOCKS_PER_ATB + 3; goto found; } } else { n_free = 0; }
     910:	f013 0fc0 	tst.w	r3, #192	; 0xc0
            if (ATB_2_IS_FREE(a)) { if (++n_free >= n_blocks) { i = i * BLOCKS_PER_ATB + 2; goto found; } } else { n_free = 0; }
     914:	f04f 0400 	mov.w	r4, #0
            if (ATB_3_IS_FREE(a)) { if (++n_free >= n_blocks) { i = i * BLOCKS_PER_ATB + 3; goto found; } } else { n_free = 0; }
     918:	d0e5      	beq.n	8e6 <gc_alloc+0x56>
        for (i = MP_STATE_MEM(gc_last_free_atb_index); i < MP_STATE_MEM(gc_alloc_table_byte_len); i++) {
     91a:	3201      	adds	r2, #1
     91c:	4282      	cmp	r2, r0
            if (ATB_3_IS_FREE(a)) { if (++n_free >= n_blocks) { i = i * BLOCKS_PER_ATB + 3; goto found; } } else { n_free = 0; }
     91e:	f04f 0400 	mov.w	r4, #0
        for (i = MP_STATE_MEM(gc_last_free_atb_index); i < MP_STATE_MEM(gc_alloc_table_byte_len); i++) {
     922:	d3e6      	bcc.n	8f2 <gc_alloc+0x62>
        if (collected) {
     924:	f1be 0f00 	cmp.w	lr, #0
     928:	d109      	bne.n	93e <gc_alloc+0xae>
        gc_collect();
     92a:	f01a fc01 	bl	1b130 <gc_collect>
        for (i = MP_STATE_MEM(gc_last_free_atb_index); i < MP_STATE_MEM(gc_alloc_table_byte_len); i++) {
     92e:	f8d5 21b0 	ldr.w	r2, [r5, #432]	; 0x1b0
     932:	f8d5 009c 	ldr.w	r0, [r5, #156]	; 0x9c
     936:	4282      	cmp	r2, r0
        collected = 1;
     938:	f04f 0e01 	mov.w	lr, #1
        for (i = MP_STATE_MEM(gc_last_free_atb_index); i < MP_STATE_MEM(gc_alloc_table_byte_len); i++) {
     93c:	d3bd      	bcc.n	8ba <gc_alloc+0x2a>
        return NULL;
     93e:	2400      	movs	r4, #0
}
     940:	4620      	mov	r0, r4
     942:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            if (ATB_0_IS_FREE(a)) { if (++n_free >= n_blocks) { i = i * BLOCKS_PER_ATB + 0; goto found; } } else { n_free = 0; }
     944:	0092      	lsls	r2, r2, #2
    start_block = i - n_free + 1;
     946:	1b11      	subs	r1, r2, r4
    if (n_free == 1) {
     948:	2c01      	cmp	r4, #1
    start_block = i - n_free + 1;
     94a:	f101 0001 	add.w	r0, r1, #1
        MP_STATE_MEM(gc_last_free_atb_index) = (i + 1) / BLOCKS_PER_ATB;
     94e:	f102 0c01 	add.w	ip, r2, #1
     952:	bf08      	it	eq
     954:	ea4f 039c 	moveq.w	r3, ip, lsr #2
    ATB_FREE_TO_HEAD(start_block);
     958:	ea4f 0490 	mov.w	r4, r0, lsr #2
        MP_STATE_MEM(gc_last_free_atb_index) = (i + 1) / BLOCKS_PER_ATB;
     95c:	bf08      	it	eq
     95e:	f8c5 31b0 	streq.w	r3, [r5, #432]	; 0x1b0
    ATB_FREE_TO_HEAD(start_block);
     962:	f000 0303 	and.w	r3, r0, #3
     966:	f817 e004 	ldrb.w	lr, [r7, r4]
     96a:	005e      	lsls	r6, r3, #1
     96c:	2301      	movs	r3, #1
     96e:	40b3      	lsls	r3, r6
    for (size_t bl = start_block + 1; bl <= end_block; bl++) {
     970:	3102      	adds	r1, #2
    ATB_FREE_TO_HEAD(start_block);
     972:	ea43 030e 	orr.w	r3, r3, lr
    for (size_t bl = start_block + 1; bl <= end_block; bl++) {
     976:	428a      	cmp	r2, r1
    ATB_FREE_TO_HEAD(start_block);
     978:	553b      	strb	r3, [r7, r4]
        ATB_FREE_TO_TAIL(bl);
     97a:	bf28      	it	cs
     97c:	f04f 0e02 	movcs.w	lr, #2
    for (size_t bl = start_block + 1; bl <= end_block; bl++) {
     980:	d30d      	bcc.n	99e <gc_alloc+0x10e>
        ATB_FREE_TO_TAIL(bl);
     982:	088c      	lsrs	r4, r1, #2
     984:	f8d5 6098 	ldr.w	r6, [r5, #152]	; 0x98
     988:	f001 0303 	and.w	r3, r1, #3
     98c:	5d37      	ldrb	r7, [r6, r4]
     98e:	005b      	lsls	r3, r3, #1
     990:	fa0e f303 	lsl.w	r3, lr, r3
    for (size_t bl = start_block + 1; bl <= end_block; bl++) {
     994:	3101      	adds	r1, #1
        ATB_FREE_TO_TAIL(bl);
     996:	433b      	orrs	r3, r7
    for (size_t bl = start_block + 1; bl <= end_block; bl++) {
     998:	428a      	cmp	r2, r1
        ATB_FREE_TO_TAIL(bl);
     99a:	5533      	strb	r3, [r6, r4]
    for (size_t bl = start_block + 1; bl <= end_block; bl++) {
     99c:	d2f1      	bcs.n	982 <gc_alloc+0xf2>
    void *ret_ptr = (void*)(MP_STATE_MEM(gc_pool_start) + start_block * BYTES_PER_BLOCK);
     99e:	f8d5 40a0 	ldr.w	r4, [r5, #160]	; 0xa0
    memset((byte*)ret_ptr, 0, (end_block - start_block + 1) * BYTES_PER_BLOCK);
     9a2:	ebac 0200 	sub.w	r2, ip, r0
    void *ret_ptr = (void*)(MP_STATE_MEM(gc_pool_start) + start_block * BYTES_PER_BLOCK);
     9a6:	eb04 1400 	add.w	r4, r4, r0, lsl #4
    memset((byte*)ret_ptr, 0, (end_block - start_block + 1) * BYTES_PER_BLOCK);
     9aa:	0112      	lsls	r2, r2, #4
     9ac:	4620      	mov	r0, r4
     9ae:	2100      	movs	r1, #0
     9b0:	f01b f8a2 	bl	1baf8 <memset>
}
     9b4:	4620      	mov	r0, r4
     9b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            if (ATB_1_IS_FREE(a)) { if (++n_free >= n_blocks) { i = i * BLOCKS_PER_ATB + 1; goto found; } } else { n_free = 0; }
     9b8:	0092      	lsls	r2, r2, #2
     9ba:	3201      	adds	r2, #1
     9bc:	e7c3      	b.n	946 <gc_alloc+0xb6>
            if (ATB_2_IS_FREE(a)) { if (++n_free >= n_blocks) { i = i * BLOCKS_PER_ATB + 2; goto found; } } else { n_free = 0; }
     9be:	0092      	lsls	r2, r2, #2
     9c0:	3202      	adds	r2, #2
     9c2:	e7c0      	b.n	946 <gc_alloc+0xb6>
            if (ATB_3_IS_FREE(a)) { if (++n_free >= n_blocks) { i = i * BLOCKS_PER_ATB + 3; goto found; } } else { n_free = 0; }
     9c4:	0092      	lsls	r2, r2, #2
     9c6:	3203      	adds	r2, #3
     9c8:	e7bd      	b.n	946 <gc_alloc+0xb6>
     9ca:	bf00      	nop
     9cc:	20000a2c 	.word	0x20000a2c

000009d0 <gc_free>:
    if (MP_STATE_MEM(gc_lock_depth) > 0) {
     9d0:	4b03      	ldr	r3, [pc, #12]	; (9e0 <gc_free+0x10>)
     9d2:	f8b3 31ac 	ldrh.w	r3, [r3, #428]	; 0x1ac
     9d6:	b90b      	cbnz	r3, 9dc <gc_free+0xc>
    if (ptr == NULL) {
     9d8:	b100      	cbz	r0, 9dc <gc_free+0xc>
     9da:	e563      	b.n	4a4 <gc_free.part.0>
     9dc:	4770      	bx	lr
     9de:	bf00      	nop
     9e0:	20000a2c 	.word	0x20000a2c

000009e4 <gc_nbytes>:

size_t gc_nbytes(const void *ptr) {
    GC_ENTER();
    if (VERIFY_PTR(ptr)) {
     9e4:	f010 030f 	ands.w	r3, r0, #15
     9e8:	d11b      	bne.n	a22 <gc_nbytes+0x3e>
     9ea:	4a18      	ldr	r2, [pc, #96]	; (a4c <gc_nbytes+0x68>)
     9ec:	f8d2 10a0 	ldr.w	r1, [r2, #160]	; 0xa0
     9f0:	4288      	cmp	r0, r1
     9f2:	d316      	bcc.n	a22 <gc_nbytes+0x3e>
size_t gc_nbytes(const void *ptr) {
     9f4:	b410      	push	{r4}
    if (VERIFY_PTR(ptr)) {
     9f6:	f8d2 40a4 	ldr.w	r4, [r2, #164]	; 0xa4
     9fa:	42a0      	cmp	r0, r4
     9fc:	d222      	bcs.n	a44 <gc_nbytes+0x60>
        size_t block = BLOCK_FROM_PTR(ptr);
     9fe:	1a40      	subs	r0, r0, r1
        if (ATB_GET_KIND(block) == AT_HEAD) {
     a00:	f8d2 4098 	ldr.w	r4, [r2, #152]	; 0x98
     a04:	0982      	lsrs	r2, r0, #6
        size_t block = BLOCK_FROM_PTR(ptr);
     a06:	0901      	lsrs	r1, r0, #4
        if (ATB_GET_KIND(block) == AT_HEAD) {
     a08:	5ca2      	ldrb	r2, [r4, r2]
     a0a:	f001 0003 	and.w	r0, r1, #3
     a0e:	0040      	lsls	r0, r0, #1
     a10:	4102      	asrs	r2, r0
     a12:	f002 0203 	and.w	r2, r2, #3
     a16:	2a01      	cmp	r2, #1
     a18:	4618      	mov	r0, r3
     a1a:	d004      	beq.n	a26 <gc_nbytes+0x42>
    }

    // invalid pointer
    GC_EXIT();
    return 0;
}
     a1c:	f85d 4b04 	ldr.w	r4, [sp], #4
     a20:	4770      	bx	lr
    return 0;
     a22:	2000      	movs	r0, #0
     a24:	4770      	bx	lr
                n_blocks += 1;
     a26:	3001      	adds	r0, #1
     a28:	180b      	adds	r3, r1, r0
            } while (ATB_GET_KIND(block + n_blocks) == AT_TAIL);
     a2a:	089a      	lsrs	r2, r3, #2
     a2c:	f003 0303 	and.w	r3, r3, #3
     a30:	5ca2      	ldrb	r2, [r4, r2]
     a32:	005b      	lsls	r3, r3, #1
     a34:	fa42 f303 	asr.w	r3, r2, r3
     a38:	f003 0303 	and.w	r3, r3, #3
     a3c:	2b02      	cmp	r3, #2
     a3e:	d0f2      	beq.n	a26 <gc_nbytes+0x42>
            return n_blocks * BYTES_PER_BLOCK;
     a40:	0100      	lsls	r0, r0, #4
     a42:	e7eb      	b.n	a1c <gc_nbytes+0x38>
    return 0;
     a44:	4618      	mov	r0, r3
}
     a46:	f85d 4b04 	ldr.w	r4, [sp], #4
     a4a:	4770      	bx	lr
     a4c:	20000a2c 	.word	0x20000a2c

00000a50 <gc_realloc>:
    }
}

#else // Alternative gc_realloc impl

void *gc_realloc(void *ptr_in, size_t n_bytes, bool allow_move) {
     a50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     a54:	460b      	mov	r3, r1
    // check for pure allocation
    if (ptr_in == NULL) {
     a56:	4606      	mov	r6, r0
     a58:	2800      	cmp	r0, #0
     a5a:	f000 80c7 	beq.w	bec <gc_realloc+0x19c>
        return gc_alloc(n_bytes, false);
    }

    // check for pure free
    if (n_bytes == 0) {
     a5e:	2900      	cmp	r1, #0
     a60:	d07a      	beq.n	b58 <gc_realloc+0x108>

    void *ptr = ptr_in;

    GC_ENTER();

    if (MP_STATE_MEM(gc_lock_depth) > 0) {
     a62:	4d70      	ldr	r5, [pc, #448]	; (c24 <gc_realloc+0x1d4>)
     a64:	f8b5 31ac 	ldrh.w	r3, [r5, #428]	; 0x1ac
     a68:	2b00      	cmp	r3, #0
     a6a:	d17a      	bne.n	b62 <gc_realloc+0x112>
        GC_EXIT();
        return NULL;
    }

    // get the GC block number corresponding to this pointer
    assert(VERIFY_PTR(ptr));
     a6c:	f010 090f 	ands.w	r9, r0, #15
     a70:	f040 80c9 	bne.w	c06 <gc_realloc+0x1b6>
     a74:	f8d5 00a0 	ldr.w	r0, [r5, #160]	; 0xa0
     a78:	4286      	cmp	r6, r0
     a7a:	f0c0 80c4 	bcc.w	c06 <gc_realloc+0x1b6>
     a7e:	f8d5 30a4 	ldr.w	r3, [r5, #164]	; 0xa4
     a82:	429e      	cmp	r6, r3
     a84:	f080 80bf 	bcs.w	c06 <gc_realloc+0x1b6>
    size_t block = BLOCK_FROM_PTR(ptr);
     a88:	1a30      	subs	r0, r6, r0
    assert(ATB_GET_KIND(block) == AT_HEAD);
     a8a:	0984      	lsrs	r4, r0, #6
     a8c:	f8d5 7098 	ldr.w	r7, [r5, #152]	; 0x98
    size_t block = BLOCK_FROM_PTR(ptr);
     a90:	0900      	lsrs	r0, r0, #4
    assert(ATB_GET_KIND(block) == AT_HEAD);
     a92:	f000 0303 	and.w	r3, r0, #3
     a96:	5d3c      	ldrb	r4, [r7, r4]
     a98:	005b      	lsls	r3, r3, #1
     a9a:	411c      	asrs	r4, r3
     a9c:	f004 0403 	and.w	r4, r4, #3
     aa0:	2c01      	cmp	r4, #1
     aa2:	f040 80b7 	bne.w	c14 <gc_realloc+0x1c4>
    // free blocks to satisfy the realloc.  Note that we need to compute the
    // total size of the existing memory chunk so we can correctly and
    // efficiently shrink it (see below for shrinking code).
    size_t n_free   = 0;
    size_t n_blocks = 1; // counting HEAD block
    size_t max_block = MP_STATE_MEM(gc_alloc_table_byte_len) * BLOCKS_PER_ATB;
     aa6:	f8d5 309c 	ldr.w	r3, [r5, #156]	; 0x9c
    for (size_t bl = block + n_blocks; bl < max_block; bl++) {
     aaa:	f100 0801 	add.w	r8, r0, #1
    size_t max_block = MP_STATE_MEM(gc_alloc_table_byte_len) * BLOCKS_PER_ATB;
     aae:	ea4f 0a83 	mov.w	sl, r3, lsl #2
    size_t new_blocks = (n_bytes + BYTES_PER_BLOCK - 1) / BYTES_PER_BLOCK;
     ab2:	f101 0e0f 	add.w	lr, r1, #15
    for (size_t bl = block + n_blocks; bl < max_block; bl++) {
     ab6:	45c2      	cmp	sl, r8
    size_t new_blocks = (n_bytes + BYTES_PER_BLOCK - 1) / BYTES_PER_BLOCK;
     ab8:	ea4f 1e1e 	mov.w	lr, lr, lsr #4
    for (size_t bl = block + n_blocks; bl < max_block; bl++) {
     abc:	d913      	bls.n	ae6 <gc_realloc+0x96>
        byte block_type = ATB_GET_KIND(bl);
     abe:	ea4f 0c98 	mov.w	ip, r8, lsr #2
     ac2:	f008 0303 	and.w	r3, r8, #3
     ac6:	f817 c00c 	ldrb.w	ip, [r7, ip]
     aca:	005b      	lsls	r3, r3, #1
     acc:	fa4c f303 	asr.w	r3, ip, r3
     ad0:	f003 0303 	and.w	r3, r3, #3
        if (block_type == AT_TAIL) {
     ad4:	2b02      	cmp	r3, #2
     ad6:	d048      	beq.n	b6a <gc_realloc+0x11a>
            n_blocks++;
            continue;
        }
        if (block_type == AT_FREE) {
     ad8:	b92b      	cbnz	r3, ae6 <gc_realloc+0x96>
            n_free++;
     ada:	f109 0901 	add.w	r9, r9, #1
            if (n_blocks + n_free >= new_blocks) {
     ade:	eb09 0304 	add.w	r3, r9, r4
     ae2:	459e      	cmp	lr, r3
     ae4:	d842      	bhi.n	b6c <gc_realloc+0x11c>
        }
        break;
    }

    // return original ptr if it already has the requested number of blocks
    if (new_blocks == n_blocks) {
     ae6:	45a6      	cmp	lr, r4
     ae8:	d065      	beq.n	bb6 <gc_realloc+0x166>
        GC_EXIT();
        return ptr_in;
    }

    // check if we can shrink the allocated area
    if (new_blocks < n_blocks) {
     aea:	d344      	bcc.n	b76 <gc_realloc+0x126>

        return ptr_in;
    }

    // check if we can expand in place
    if (new_blocks <= n_blocks + n_free) {
     aec:	44a1      	add	r9, r4
     aee:	45ce      	cmp	lr, r9
     af0:	d865      	bhi.n	bbe <gc_realloc+0x16e>
        // mark few more blocks as used tail
        for (size_t bl = block + n_blocks; bl < block + new_blocks; bl++) {
     af2:	1901      	adds	r1, r0, r4
     af4:	4470      	add	r0, lr
     af6:	4288      	cmp	r0, r1
     af8:	d924      	bls.n	b44 <gc_realloc+0xf4>
            assert(ATB_GET_KIND(bl) == AT_FREE);
     afa:	088a      	lsrs	r2, r1, #2
     afc:	f001 0303 	and.w	r3, r1, #3
     b00:	f817 c002 	ldrb.w	ip, [r7, r2]
     b04:	005b      	lsls	r3, r3, #1
     b06:	fa4c f803 	asr.w	r8, ip, r3
     b0a:	f018 0f03 	tst.w	r8, #3
     b0e:	443a      	add	r2, r7
            ATB_FREE_TO_TAIL(bl);
     b10:	bf08      	it	eq
     b12:	2702      	moveq	r7, #2
            assert(ATB_GET_KIND(bl) == AT_FREE);
     b14:	d00e      	beq.n	b34 <gc_realloc+0xe4>
     b16:	e06f      	b.n	bf8 <gc_realloc+0x1a8>
     b18:	088a      	lsrs	r2, r1, #2
     b1a:	f8d5 8098 	ldr.w	r8, [r5, #152]	; 0x98
     b1e:	f001 0303 	and.w	r3, r1, #3
     b22:	f818 c002 	ldrb.w	ip, [r8, r2]
     b26:	005b      	lsls	r3, r3, #1
     b28:	fa4c f903 	asr.w	r9, ip, r3
     b2c:	f019 0f03 	tst.w	r9, #3
     b30:	4442      	add	r2, r8
     b32:	d161      	bne.n	bf8 <gc_realloc+0x1a8>
            ATB_FREE_TO_TAIL(bl);
     b34:	fa07 f303 	lsl.w	r3, r7, r3
        for (size_t bl = block + n_blocks; bl < block + new_blocks; bl++) {
     b38:	3101      	adds	r1, #1
            ATB_FREE_TO_TAIL(bl);
     b3a:	ea43 030c 	orr.w	r3, r3, ip
        for (size_t bl = block + n_blocks; bl < block + new_blocks; bl++) {
     b3e:	4288      	cmp	r0, r1
            ATB_FREE_TO_TAIL(bl);
     b40:	7013      	strb	r3, [r2, #0]
        for (size_t bl = block + n_blocks; bl < block + new_blocks; bl++) {
     b42:	d1e9      	bne.n	b18 <gc_realloc+0xc8>

        GC_EXIT();

        #if MICROPY_GC_CONSERVATIVE_CLEAR
        // be conservative and zero out all the newly allocated blocks
        memset((byte*)ptr_in + n_blocks * BYTES_PER_BLOCK, 0, (new_blocks - n_blocks) * BYTES_PER_BLOCK);
     b44:	ebae 0204 	sub.w	r2, lr, r4
     b48:	0112      	lsls	r2, r2, #4
     b4a:	eb06 1004 	add.w	r0, r6, r4, lsl #4
     b4e:	2100      	movs	r1, #0

        #if EXTENSIVE_HEAP_PROFILING
        gc_dump_alloc_table();
        #endif

        return ptr_in;
     b50:	4637      	mov	r7, r6
        memset((byte*)ptr_in + n_blocks * BYTES_PER_BLOCK, 0, (new_blocks - n_blocks) * BYTES_PER_BLOCK);
     b52:	f01a ffd1 	bl	1baf8 <memset>
        return ptr_in;
     b56:	e005      	b.n	b64 <gc_realloc+0x114>
    if (MP_STATE_MEM(gc_lock_depth) > 0) {
     b58:	4b32      	ldr	r3, [pc, #200]	; (c24 <gc_realloc+0x1d4>)
     b5a:	f8b3 71ac 	ldrh.w	r7, [r3, #428]	; 0x1ac
     b5e:	2f00      	cmp	r7, #0
     b60:	d03f      	beq.n	be2 <gc_realloc+0x192>
        return NULL;
     b62:	2700      	movs	r7, #0

    DEBUG_printf("gc_realloc(%p -> %p)\n", ptr_in, ptr_out);
    memcpy(ptr_out, ptr_in, n_blocks * BYTES_PER_BLOCK);
    gc_free(ptr_in);
    return ptr_out;
}
     b64:	4638      	mov	r0, r7
     b66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            n_blocks++;
     b6a:	3401      	adds	r4, #1
    for (size_t bl = block + n_blocks; bl < max_block; bl++) {
     b6c:	f108 0801 	add.w	r8, r8, #1
     b70:	45c2      	cmp	sl, r8
     b72:	d1a4      	bne.n	abe <gc_realloc+0x6e>
     b74:	e7b7      	b.n	ae6 <gc_realloc+0x96>
        for (size_t bl = block + new_blocks, count = n_blocks - new_blocks; count > 0; bl++, count--) {
     b76:	4486      	add	lr, r0
            ATB_ANY_TO_FREE(bl);
     b78:	f04f 0803 	mov.w	r8, #3
     b7c:	4420      	add	r0, r4
        for (size_t bl = block + new_blocks, count = n_blocks - new_blocks; count > 0; bl++, count--) {
     b7e:	4674      	mov	r4, lr
     b80:	e001      	b.n	b86 <gc_realloc+0x136>
     b82:	f8d5 7098 	ldr.w	r7, [r5, #152]	; 0x98
            ATB_ANY_TO_FREE(bl);
     b86:	ea4f 0c94 	mov.w	ip, r4, lsr #2
     b8a:	f004 0303 	and.w	r3, r4, #3
     b8e:	f817 100c 	ldrb.w	r1, [r7, ip]
     b92:	005b      	lsls	r3, r3, #1
     b94:	fa08 f303 	lsl.w	r3, r8, r3
        for (size_t bl = block + new_blocks, count = n_blocks - new_blocks; count > 0; bl++, count--) {
     b98:	3401      	adds	r4, #1
            ATB_ANY_TO_FREE(bl);
     b9a:	ea21 0303 	bic.w	r3, r1, r3
        for (size_t bl = block + new_blocks, count = n_blocks - new_blocks; count > 0; bl++, count--) {
     b9e:	4284      	cmp	r4, r0
            ATB_ANY_TO_FREE(bl);
     ba0:	f807 300c 	strb.w	r3, [r7, ip]
        for (size_t bl = block + new_blocks, count = n_blocks - new_blocks; count > 0; bl++, count--) {
     ba4:	d1ed      	bne.n	b82 <gc_realloc+0x132>
        if ((block + new_blocks) / BLOCKS_PER_ATB < MP_STATE_MEM(gc_last_free_atb_index)) {
     ba6:	f8d5 31b0 	ldr.w	r3, [r5, #432]	; 0x1b0
     baa:	ea4f 029e 	mov.w	r2, lr, lsr #2
     bae:	429a      	cmp	r2, r3
            MP_STATE_MEM(gc_last_free_atb_index) = (block + new_blocks) / BLOCKS_PER_ATB;
     bb0:	bf38      	it	cc
     bb2:	f8c5 21b0 	strcc.w	r2, [r5, #432]	; 0x1b0
     bb6:	4637      	mov	r7, r6
}
     bb8:	4638      	mov	r0, r7
     bba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (!allow_move) {
     bbe:	2a00      	cmp	r2, #0
     bc0:	d0cf      	beq.n	b62 <gc_realloc+0x112>
    void *ptr_out = gc_alloc(n_bytes, ftb_state);
     bc2:	4608      	mov	r0, r1
     bc4:	2100      	movs	r1, #0
     bc6:	f7ff fe63 	bl	890 <gc_alloc>
    if (ptr_out == NULL) {
     bca:	4607      	mov	r7, r0
     bcc:	2800      	cmp	r0, #0
     bce:	d0c8      	beq.n	b62 <gc_realloc+0x112>
    memcpy(ptr_out, ptr_in, n_blocks * BYTES_PER_BLOCK);
     bd0:	0122      	lsls	r2, r4, #4
     bd2:	4631      	mov	r1, r6
     bd4:	f01a fef6 	bl	1b9c4 <memcpy>
    if (MP_STATE_MEM(gc_lock_depth) > 0) {
     bd8:	f8b5 31ac 	ldrh.w	r3, [r5, #428]	; 0x1ac
     bdc:	2b00      	cmp	r3, #0
     bde:	d1c1      	bne.n	b64 <gc_realloc+0x114>
     be0:	4630      	mov	r0, r6
     be2:	f7ff fc5f 	bl	4a4 <gc_free.part.0>
}
     be6:	4638      	mov	r0, r7
     be8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        return gc_alloc(n_bytes, false);
     bec:	4601      	mov	r1, r0
}
     bee:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        return gc_alloc(n_bytes, false);
     bf2:	4618      	mov	r0, r3
     bf4:	f7ff be4c 	b.w	890 <gc_alloc>
            assert(ATB_GET_KIND(bl) == AT_FREE);
     bf8:	4b0b      	ldr	r3, [pc, #44]	; (c28 <gc_realloc+0x1d8>)
     bfa:	4a0c      	ldr	r2, [pc, #48]	; (c2c <gc_realloc+0x1dc>)
     bfc:	480c      	ldr	r0, [pc, #48]	; (c30 <gc_realloc+0x1e0>)
     bfe:	f240 21e2 	movw	r1, #738	; 0x2e2
     c02:	f01a fadb 	bl	1b1bc <__assert_func>
    assert(VERIFY_PTR(ptr));
     c06:	4b0b      	ldr	r3, [pc, #44]	; (c34 <gc_realloc+0x1e4>)
     c08:	4a08      	ldr	r2, [pc, #32]	; (c2c <gc_realloc+0x1dc>)
     c0a:	4809      	ldr	r0, [pc, #36]	; (c30 <gc_realloc+0x1e0>)
     c0c:	f240 21a2 	movw	r1, #674	; 0x2a2
     c10:	f01a fad4 	bl	1b1bc <__assert_func>
    assert(ATB_GET_KIND(block) == AT_HEAD);
     c14:	4b08      	ldr	r3, [pc, #32]	; (c38 <gc_realloc+0x1e8>)
     c16:	4a05      	ldr	r2, [pc, #20]	; (c2c <gc_realloc+0x1dc>)
     c18:	4805      	ldr	r0, [pc, #20]	; (c30 <gc_realloc+0x1e0>)
     c1a:	f44f 7129 	mov.w	r1, #676	; 0x2a4
     c1e:	f01a facd 	bl	1b1bc <__assert_func>
     c22:	bf00      	nop
     c24:	20000a2c 	.word	0x20000a2c
     c28:	0001c848 	.word	0x0001c848
     c2c:	0001c7fc 	.word	0x0001c7fc
     c30:	0001c818 	.word	0x0001c818
     c34:	0001c808 	.word	0x0001c808
     c38:	0001c828 	.word	0x0001c828

00000c3c <gc_dump_info>:
#endif // Alternative gc_realloc impl

void gc_dump_info(void) {
     c3c:	b510      	push	{r4, lr}
     c3e:	b08a      	sub	sp, #40	; 0x28
    gc_info_t info;
    gc_info(&info);
     c40:	a803      	add	r0, sp, #12
    mp_printf(&mp_plat_print, "GC: total: %u, used: %u, free: %u\n",
     c42:	4c0b      	ldr	r4, [pc, #44]	; (c70 <gc_dump_info+0x34>)
    gc_info(&info);
     c44:	f7ff fda6 	bl	794 <gc_info>
    mp_printf(&mp_plat_print, "GC: total: %u, used: %u, free: %u\n",
     c48:	9905      	ldr	r1, [sp, #20]
     c4a:	9b04      	ldr	r3, [sp, #16]
     c4c:	9a03      	ldr	r2, [sp, #12]
     c4e:	9100      	str	r1, [sp, #0]
     c50:	4620      	mov	r0, r4
     c52:	4908      	ldr	r1, [pc, #32]	; (c74 <gc_dump_info+0x38>)
     c54:	f001 f90e 	bl	1e74 <mp_printf>
        (uint)info.total, (uint)info.used, (uint)info.free);
    mp_printf(&mp_plat_print, " No. of 1-blocks: %u, 2-blocks: %u, max blk sz: %u, max free sz: %u\n",
     c58:	a806      	add	r0, sp, #24
     c5a:	c80d      	ldmia	r0, {r0, r2, r3}
     c5c:	9909      	ldr	r1, [sp, #36]	; 0x24
     c5e:	9001      	str	r0, [sp, #4]
     c60:	9100      	str	r1, [sp, #0]
     c62:	4620      	mov	r0, r4
     c64:	4904      	ldr	r1, [pc, #16]	; (c78 <gc_dump_info+0x3c>)
     c66:	f001 f905 	bl	1e74 <mp_printf>
           (uint)info.num_1block, (uint)info.num_2block, (uint)info.max_block, (uint)info.max_free);
}
     c6a:	b00a      	add	sp, #40	; 0x28
     c6c:	bd10      	pop	{r4, pc}
     c6e:	bf00      	nop
     c70:	0001d5ac 	.word	0x0001d5ac
     c74:	0001c864 	.word	0x0001c864
     c78:	0001c888 	.word	0x0001c888

00000c7c <gc_dump_alloc_table>:

void gc_dump_alloc_table(void) {
     c7c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    GC_ENTER();
    static const size_t DUMP_BYTES_PER_LINE = 64;
    #if !EXTENSIVE_HEAP_PROFILING
    // When comparing heap output we don't want to print the starting
    // pointer of the heap because it changes from run to run.
    mp_printf(&mp_plat_print, "GC memory layout; from %p:", MP_STATE_MEM(gc_pool_start));
     c80:	4f4f      	ldr	r7, [pc, #316]	; (dc0 <gc_dump_alloc_table+0x144>)
     c82:	4950      	ldr	r1, [pc, #320]	; (dc4 <gc_dump_alloc_table+0x148>)
     c84:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
     c88:	484f      	ldr	r0, [pc, #316]	; (dc8 <gc_dump_alloc_table+0x14c>)
     c8a:	f001 f8f3 	bl	1e74 <mp_printf>
    #endif
    for (size_t bl = 0; bl < MP_STATE_MEM(gc_alloc_table_byte_len) * BLOCKS_PER_ATB; bl++) {
     c8e:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
     c92:	0089      	lsls	r1, r1, #2
     c94:	d07e      	beq.n	d94 <gc_dump_alloc_table+0x118>
                }
            }
            // print header for new line of blocks
            // (the cast to uint32_t is for 16-bit ports)
            //mp_printf(&mp_plat_print, "\n%05x: ", (uint)(PTR_FROM_BLOCK(bl) & (uint32_t)0xfffff));
            mp_printf(&mp_plat_print, "\n%05x: ", (uint)((bl * BYTES_PER_BLOCK) & (uint32_t)0xfffff));
     c96:	f8df a15c 	ldr.w	sl, [pc, #348]	; df4 <gc_dump_alloc_table+0x178>
     c9a:	f8df 915c 	ldr.w	r9, [pc, #348]	; df8 <gc_dump_alloc_table+0x17c>
     c9e:	f8df 8128 	ldr.w	r8, [pc, #296]	; dc8 <gc_dump_alloc_table+0x14c>
    for (size_t bl = 0; bl < MP_STATE_MEM(gc_alloc_table_byte_len) * BLOCKS_PER_ATB; bl++) {
     ca2:	2500      	movs	r5, #0
     ca4:	e01d      	b.n	ce2 <gc_dump_alloc_table+0x66>
     ca6:	f005 0603 	and.w	r6, r5, #3
     caa:	0076      	lsls	r6, r6, #1
     cac:	ea4f 0b95 	mov.w	fp, r5, lsr #2
        }
        int c = ' ';
        switch (ATB_GET_KIND(bl)) {
     cb0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
     cb4:	f813 300b 	ldrb.w	r3, [r3, fp]
     cb8:	fa43 f606 	asr.w	r6, r3, r6
     cbc:	f006 0603 	and.w	r6, r6, #3
     cc0:	2e02      	cmp	r6, #2
     cc2:	d065      	beq.n	d90 <gc_dump_alloc_table+0x114>
     cc4:	2e03      	cmp	r6, #3
     cc6:	d061      	beq.n	d8c <gc_dump_alloc_table+0x110>
     cc8:	2e01      	cmp	r6, #1
     cca:	d043      	beq.n	d54 <gc_dump_alloc_table+0xd8>
            case AT_FREE: c = '.'; break;
     ccc:	222e      	movs	r2, #46	; 0x2e
                break;
            }
            case AT_TAIL: c = '='; break;
            case AT_MARK: c = 'm'; break;
        }
        mp_printf(&mp_plat_print, "%c", c);
     cce:	493f      	ldr	r1, [pc, #252]	; (dcc <gc_dump_alloc_table+0x150>)
     cd0:	4640      	mov	r0, r8
     cd2:	f001 f8cf 	bl	1e74 <mp_printf>
    for (size_t bl = 0; bl < MP_STATE_MEM(gc_alloc_table_byte_len) * BLOCKS_PER_ATB; bl++) {
     cd6:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
     cda:	3501      	adds	r5, #1
     cdc:	0089      	lsls	r1, r1, #2
     cde:	42a9      	cmp	r1, r5
     ce0:	d958      	bls.n	d94 <gc_dump_alloc_table+0x118>
        if (bl % DUMP_BYTES_PER_LINE == 0) {
     ce2:	06a8      	lsls	r0, r5, #26
     ce4:	d1df      	bne.n	ca6 <gc_dump_alloc_table+0x2a>
                while (bl2 < MP_STATE_MEM(gc_alloc_table_byte_len) * BLOCKS_PER_ATB && ATB_GET_KIND(bl2) == AT_FREE) {
     ce6:	428d      	cmp	r5, r1
     ce8:	d260      	bcs.n	dac <gc_dump_alloc_table+0x130>
     cea:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
     cee:	ea4f 0b95 	mov.w	fp, r5, lsr #2
     cf2:	f005 0603 	and.w	r6, r5, #3
     cf6:	f810 300b 	ldrb.w	r3, [r0, fp]
     cfa:	0076      	lsls	r6, r6, #1
     cfc:	4133      	asrs	r3, r6
     cfe:	079a      	lsls	r2, r3, #30
     d00:	d121      	bne.n	d46 <gc_dump_alloc_table+0xca>
     d02:	462c      	mov	r4, r5
     d04:	e004      	b.n	d10 <gc_dump_alloc_table+0x94>
     d06:	5c82      	ldrb	r2, [r0, r2]
     d08:	fa42 f303 	asr.w	r3, r2, r3
     d0c:	079b      	lsls	r3, r3, #30
     d0e:	d108      	bne.n	d22 <gc_dump_alloc_table+0xa6>
                    bl2++;
     d10:	3401      	adds	r4, #1
                while (bl2 < MP_STATE_MEM(gc_alloc_table_byte_len) * BLOCKS_PER_ATB && ATB_GET_KIND(bl2) == AT_FREE) {
     d12:	f004 0303 	and.w	r3, r4, #3
     d16:	428c      	cmp	r4, r1
     d18:	ea4f 0294 	mov.w	r2, r4, lsr #2
     d1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
     d20:	d1f1      	bne.n	d06 <gc_dump_alloc_table+0x8a>
                if (bl2 - bl >= 2 * DUMP_BYTES_PER_LINE) {
     d22:	1b62      	subs	r2, r4, r5
     d24:	2a7f      	cmp	r2, #127	; 0x7f
     d26:	d90e      	bls.n	d46 <gc_dump_alloc_table+0xca>
                    mp_printf(&mp_plat_print, "\n       (%u lines all free)", (uint)(bl2 - bl) / DUMP_BYTES_PER_LINE);
     d28:	0992      	lsrs	r2, r2, #6
     d2a:	4929      	ldr	r1, [pc, #164]	; (dd0 <gc_dump_alloc_table+0x154>)
     d2c:	4640      	mov	r0, r8
     d2e:	f001 f8a1 	bl	1e74 <mp_printf>
                    if (bl >= MP_STATE_MEM(gc_alloc_table_byte_len) * BLOCKS_PER_ATB) {
     d32:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
                    bl = bl2 & (~(DUMP_BYTES_PER_LINE - 1));
     d36:	f024 053f 	bic.w	r5, r4, #63	; 0x3f
                    if (bl >= MP_STATE_MEM(gc_alloc_table_byte_len) * BLOCKS_PER_ATB) {
     d3a:	ebb5 0f83 	cmp.w	r5, r3, lsl #2
     d3e:	d229      	bcs.n	d94 <gc_dump_alloc_table+0x118>
     d40:	ea4f 0b95 	mov.w	fp, r5, lsr #2
     d44:	2600      	movs	r6, #0
            mp_printf(&mp_plat_print, "\n%05x: ", (uint)((bl * BYTES_PER_BLOCK) & (uint32_t)0xfffff));
     d46:	ea0a 1205 	and.w	r2, sl, r5, lsl #4
     d4a:	4649      	mov	r1, r9
     d4c:	4640      	mov	r0, r8
     d4e:	f001 f891 	bl	1e74 <mp_printf>
     d52:	e7ad      	b.n	cb0 <gc_dump_alloc_table+0x34>
                if (*ptr == &mp_type_tuple) { c = 'T'; }
     d54:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
     d58:	4b1e      	ldr	r3, [pc, #120]	; (dd4 <gc_dump_alloc_table+0x158>)
     d5a:	012a      	lsls	r2, r5, #4
     d5c:	588a      	ldr	r2, [r1, r2]
     d5e:	429a      	cmp	r2, r3
     d60:	d020      	beq.n	da4 <gc_dump_alloc_table+0x128>
                else if (*ptr == &mp_type_list) { c = 'L'; }
     d62:	4b1d      	ldr	r3, [pc, #116]	; (dd8 <gc_dump_alloc_table+0x15c>)
     d64:	429a      	cmp	r2, r3
     d66:	d01f      	beq.n	da8 <gc_dump_alloc_table+0x12c>
                else if (*ptr == &mp_type_dict) { c = 'D'; }
     d68:	4b1c      	ldr	r3, [pc, #112]	; (ddc <gc_dump_alloc_table+0x160>)
     d6a:	429a      	cmp	r2, r3
     d6c:	d024      	beq.n	db8 <gc_dump_alloc_table+0x13c>
                else if (*ptr == &mp_type_str || *ptr == &mp_type_bytes) { c = 'S'; }
     d6e:	4b1c      	ldr	r3, [pc, #112]	; (de0 <gc_dump_alloc_table+0x164>)
     d70:	429a      	cmp	r2, r3
     d72:	d015      	beq.n	da0 <gc_dump_alloc_table+0x124>
     d74:	4b1b      	ldr	r3, [pc, #108]	; (de4 <gc_dump_alloc_table+0x168>)
     d76:	429a      	cmp	r2, r3
     d78:	d012      	beq.n	da0 <gc_dump_alloc_table+0x124>
                else if (*ptr == &mp_type_fun_bc) { c = 'B'; }
     d7a:	4b1b      	ldr	r3, [pc, #108]	; (de8 <gc_dump_alloc_table+0x16c>)
     d7c:	429a      	cmp	r2, r3
     d7e:	d01d      	beq.n	dbc <gc_dump_alloc_table+0x140>
                else if (*ptr == &mp_type_module) { c = 'M'; }
     d80:	4b1a      	ldr	r3, [pc, #104]	; (dec <gc_dump_alloc_table+0x170>)
     d82:	429a      	cmp	r2, r3
     d84:	bf14      	ite	ne
     d86:	2268      	movne	r2, #104	; 0x68
     d88:	224d      	moveq	r2, #77	; 0x4d
     d8a:	e7a0      	b.n	cce <gc_dump_alloc_table+0x52>
            case AT_MARK: c = 'm'; break;
     d8c:	226d      	movs	r2, #109	; 0x6d
     d8e:	e79e      	b.n	cce <gc_dump_alloc_table+0x52>
            case AT_TAIL: c = '='; break;
     d90:	223d      	movs	r2, #61	; 0x3d
     d92:	e79c      	b.n	cce <gc_dump_alloc_table+0x52>
    }
    mp_print_str(&mp_plat_print, "\n");
     d94:	4916      	ldr	r1, [pc, #88]	; (df0 <gc_dump_alloc_table+0x174>)
     d96:	480c      	ldr	r0, [pc, #48]	; (dc8 <gc_dump_alloc_table+0x14c>)
    GC_EXIT();
}
     d98:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    mp_print_str(&mp_plat_print, "\n");
     d9c:	f000 bd58 	b.w	1850 <mp_print_str>
                else if (*ptr == &mp_type_str || *ptr == &mp_type_bytes) { c = 'S'; }
     da0:	2253      	movs	r2, #83	; 0x53
     da2:	e794      	b.n	cce <gc_dump_alloc_table+0x52>
                if (*ptr == &mp_type_tuple) { c = 'T'; }
     da4:	2254      	movs	r2, #84	; 0x54
     da6:	e792      	b.n	cce <gc_dump_alloc_table+0x52>
                else if (*ptr == &mp_type_list) { c = 'L'; }
     da8:	224c      	movs	r2, #76	; 0x4c
     daa:	e790      	b.n	cce <gc_dump_alloc_table+0x52>
     dac:	f005 0603 	and.w	r6, r5, #3
     db0:	0076      	lsls	r6, r6, #1
     db2:	ea4f 0b95 	mov.w	fp, r5, lsr #2
     db6:	e7c6      	b.n	d46 <gc_dump_alloc_table+0xca>
                else if (*ptr == &mp_type_dict) { c = 'D'; }
     db8:	2244      	movs	r2, #68	; 0x44
     dba:	e788      	b.n	cce <gc_dump_alloc_table+0x52>
                else if (*ptr == &mp_type_fun_bc) { c = 'B'; }
     dbc:	2242      	movs	r2, #66	; 0x42
     dbe:	e786      	b.n	cce <gc_dump_alloc_table+0x52>
     dc0:	20000a2c 	.word	0x20000a2c
     dc4:	0001c8d0 	.word	0x0001c8d0
     dc8:	0001d5ac 	.word	0x0001d5ac
     dcc:	0001c914 	.word	0x0001c914
     dd0:	0001c8f0 	.word	0x0001c8f0
     dd4:	00021be8 	.word	0x00021be8
     dd8:	00020f7c 	.word	0x00020f7c
     ddc:	0001fe68 	.word	0x0001fe68
     de0:	00021964 	.word	0x00021964
     de4:	000219a0 	.word	0x000219a0
     de8:	000208d8 	.word	0x000208d8
     dec:	00021138 	.word	0x00021138
     df0:	0001c8ec 	.word	0x0001c8ec
     df4:	000ffff0 	.word	0x000ffff0
     df8:	0001c90c 	.word	0x0001c90c

00000dfc <qstr_compute_hash>:
#define QSTR_ENTER()
#define QSTR_EXIT()
#endif

// this must match the equivalent function in makeqstrdata.py
mp_uint_t qstr_compute_hash(const byte *data, size_t len) {
     dfc:	b480      	push	{r7}
     dfe:	b085      	sub	sp, #20
     e00:	af00      	add	r7, sp, #0
     e02:	6078      	str	r0, [r7, #4]
     e04:	6039      	str	r1, [r7, #0]
    // djb2 algorithm; see http://www.cse.yorku.ca/~oz/hash.html
    mp_uint_t hash = 5381;
     e06:	f241 5305 	movw	r3, #5381	; 0x1505
     e0a:	60fb      	str	r3, [r7, #12]
    for (const byte *top = data + len; data < top; data++) {
     e0c:	687a      	ldr	r2, [r7, #4]
     e0e:	683b      	ldr	r3, [r7, #0]
     e10:	4413      	add	r3, r2
     e12:	60bb      	str	r3, [r7, #8]
     e14:	e00a      	b.n	e2c <qstr_compute_hash+0x30>
        hash = ((hash << 5) + hash) ^ (*data); // hash * 33 ^ data
     e16:	68fb      	ldr	r3, [r7, #12]
     e18:	015a      	lsls	r2, r3, #5
     e1a:	68fb      	ldr	r3, [r7, #12]
     e1c:	4413      	add	r3, r2
     e1e:	687a      	ldr	r2, [r7, #4]
     e20:	7812      	ldrb	r2, [r2, #0]
     e22:	4053      	eors	r3, r2
     e24:	60fb      	str	r3, [r7, #12]
    for (const byte *top = data + len; data < top; data++) {
     e26:	687b      	ldr	r3, [r7, #4]
     e28:	3301      	adds	r3, #1
     e2a:	607b      	str	r3, [r7, #4]
     e2c:	687a      	ldr	r2, [r7, #4]
     e2e:	68bb      	ldr	r3, [r7, #8]
     e30:	429a      	cmp	r2, r3
     e32:	d3f0      	bcc.n	e16 <qstr_compute_hash+0x1a>
    }
    hash &= Q_HASH_MASK;
     e34:	68fb      	ldr	r3, [r7, #12]
     e36:	b2db      	uxtb	r3, r3
     e38:	60fb      	str	r3, [r7, #12]
    // Make sure that valid hash is never zero, zero means "hash not computed"
    if (hash == 0) {
     e3a:	68fb      	ldr	r3, [r7, #12]
     e3c:	2b00      	cmp	r3, #0
     e3e:	d102      	bne.n	e46 <qstr_compute_hash+0x4a>
        hash++;
     e40:	68fb      	ldr	r3, [r7, #12]
     e42:	3301      	adds	r3, #1
     e44:	60fb      	str	r3, [r7, #12]
    }
    return hash;
     e46:	68fb      	ldr	r3, [r7, #12]
}
     e48:	4618      	mov	r0, r3
     e4a:	3714      	adds	r7, #20
     e4c:	46bd      	mov	sp, r7
     e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
     e52:	4770      	bx	lr

00000e54 <qstr_init>:
#define CONST_POOL MICROPY_QSTR_EXTRA_POOL
#else
#define CONST_POOL mp_qstr_const_pool
#endif

void qstr_init(void) {
     e54:	b480      	push	{r7}
     e56:	af00      	add	r7, sp, #0
    MP_STATE_VM(last_pool) = (qstr_pool_t*)&CONST_POOL; // we won't modify the const_pool since it has no allocated room left
     e58:	4b05      	ldr	r3, [pc, #20]	; (e70 <qstr_init+0x1c>)
     e5a:	4a06      	ldr	r2, [pc, #24]	; (e74 <qstr_init+0x20>)
     e5c:	611a      	str	r2, [r3, #16]
    MP_STATE_VM(qstr_last_chunk) = NULL;
     e5e:	4b04      	ldr	r3, [pc, #16]	; (e70 <qstr_init+0x1c>)
     e60:	2200      	movs	r2, #0
     e62:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    #if MICROPY_PY_THREAD
    mp_thread_mutex_init(&MP_STATE_VM(qstr_mutex));
    #endif
}
     e66:	bf00      	nop
     e68:	46bd      	mov	sp, r7
     e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
     e6e:	4770      	bx	lr
     e70:	20000a2c 	.word	0x20000a2c
     e74:	00022c80 	.word	0x00022c80

00000e78 <find_qstr>:

STATIC const byte *find_qstr(qstr q) {
     e78:	b480      	push	{r7}
     e7a:	b085      	sub	sp, #20
     e7c:	af00      	add	r7, sp, #0
     e7e:	6078      	str	r0, [r7, #4]
    // search pool for this qstr
    // total_prev_len==0 in the final pool, so the loop will always terminate
    qstr_pool_t *pool = MP_STATE_VM(last_pool);
     e80:	4b0c      	ldr	r3, [pc, #48]	; (eb4 <find_qstr+0x3c>)
     e82:	691b      	ldr	r3, [r3, #16]
     e84:	60fb      	str	r3, [r7, #12]
    while (q < pool->total_prev_len) {
     e86:	e002      	b.n	e8e <find_qstr+0x16>
        pool = pool->prev;
     e88:	68fb      	ldr	r3, [r7, #12]
     e8a:	681b      	ldr	r3, [r3, #0]
     e8c:	60fb      	str	r3, [r7, #12]
    while (q < pool->total_prev_len) {
     e8e:	68fb      	ldr	r3, [r7, #12]
     e90:	685a      	ldr	r2, [r3, #4]
     e92:	687b      	ldr	r3, [r7, #4]
     e94:	429a      	cmp	r2, r3
     e96:	d8f7      	bhi.n	e88 <find_qstr+0x10>
    }
    return pool->qstrs[q - pool->total_prev_len];
     e98:	68fb      	ldr	r3, [r7, #12]
     e9a:	685b      	ldr	r3, [r3, #4]
     e9c:	687a      	ldr	r2, [r7, #4]
     e9e:	1ad2      	subs	r2, r2, r3
     ea0:	68fb      	ldr	r3, [r7, #12]
     ea2:	3204      	adds	r2, #4
     ea4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
}
     ea8:	4618      	mov	r0, r3
     eaa:	3714      	adds	r7, #20
     eac:	46bd      	mov	sp, r7
     eae:	f85d 7b04 	ldr.w	r7, [sp], #4
     eb2:	4770      	bx	lr
     eb4:	20000a2c 	.word	0x20000a2c

00000eb8 <qstr_add>:

// qstr_mutex must be taken while in this function
STATIC qstr qstr_add(const byte *q_ptr) {
     eb8:	b580      	push	{r7, lr}
     eba:	b084      	sub	sp, #16
     ebc:	af00      	add	r7, sp, #0
     ebe:	6078      	str	r0, [r7, #4]
    DEBUG_printf("QSTR: add hash=%d len=%d data=%.*s\n", Q_GET_HASH(q_ptr), Q_GET_LENGTH(q_ptr), Q_GET_LENGTH(q_ptr), Q_GET_DATA(q_ptr));

    // make sure we have room in the pool for a new qstr
    if (MP_STATE_VM(last_pool)->len >= MP_STATE_VM(last_pool)->alloc) {
     ec0:	4b25      	ldr	r3, [pc, #148]	; (f58 <qstr_add+0xa0>)
     ec2:	691b      	ldr	r3, [r3, #16]
     ec4:	68da      	ldr	r2, [r3, #12]
     ec6:	4b24      	ldr	r3, [pc, #144]	; (f58 <qstr_add+0xa0>)
     ec8:	691b      	ldr	r3, [r3, #16]
     eca:	689b      	ldr	r3, [r3, #8]
     ecc:	429a      	cmp	r2, r3
     ece:	d32b      	bcc.n	f28 <qstr_add+0x70>
        qstr_pool_t *pool = m_new_obj_var_maybe(qstr_pool_t, const char*, MP_STATE_VM(last_pool)->alloc * 2);
     ed0:	4b21      	ldr	r3, [pc, #132]	; (f58 <qstr_add+0xa0>)
     ed2:	691b      	ldr	r3, [r3, #16]
     ed4:	689b      	ldr	r3, [r3, #8]
     ed6:	3302      	adds	r3, #2
     ed8:	00db      	lsls	r3, r3, #3
     eda:	4618      	mov	r0, r3
     edc:	f7ff fa35 	bl	34a <m_malloc_maybe>
     ee0:	60f8      	str	r0, [r7, #12]
        if (pool == NULL) {
     ee2:	68fb      	ldr	r3, [r7, #12]
     ee4:	2b00      	cmp	r3, #0
     ee6:	d106      	bne.n	ef6 <qstr_add+0x3e>
            QSTR_EXIT();
            m_malloc_fail(MP_STATE_VM(last_pool)->alloc * 2);
     ee8:	4b1b      	ldr	r3, [pc, #108]	; (f58 <qstr_add+0xa0>)
     eea:	691b      	ldr	r3, [r3, #16]
     eec:	689b      	ldr	r3, [r3, #8]
     eee:	005b      	lsls	r3, r3, #1
     ef0:	4618      	mov	r0, r3
     ef2:	f00b ffd9 	bl	cea8 <m_malloc_fail>
        }
        pool->prev = MP_STATE_VM(last_pool);
     ef6:	4b18      	ldr	r3, [pc, #96]	; (f58 <qstr_add+0xa0>)
     ef8:	691a      	ldr	r2, [r3, #16]
     efa:	68fb      	ldr	r3, [r7, #12]
     efc:	601a      	str	r2, [r3, #0]
        pool->total_prev_len = MP_STATE_VM(last_pool)->total_prev_len + MP_STATE_VM(last_pool)->len;
     efe:	4b16      	ldr	r3, [pc, #88]	; (f58 <qstr_add+0xa0>)
     f00:	691b      	ldr	r3, [r3, #16]
     f02:	685a      	ldr	r2, [r3, #4]
     f04:	4b14      	ldr	r3, [pc, #80]	; (f58 <qstr_add+0xa0>)
     f06:	691b      	ldr	r3, [r3, #16]
     f08:	68db      	ldr	r3, [r3, #12]
     f0a:	441a      	add	r2, r3
     f0c:	68fb      	ldr	r3, [r7, #12]
     f0e:	605a      	str	r2, [r3, #4]
        pool->alloc = MP_STATE_VM(last_pool)->alloc * 2;
     f10:	4b11      	ldr	r3, [pc, #68]	; (f58 <qstr_add+0xa0>)
     f12:	691b      	ldr	r3, [r3, #16]
     f14:	689b      	ldr	r3, [r3, #8]
     f16:	005a      	lsls	r2, r3, #1
     f18:	68fb      	ldr	r3, [r7, #12]
     f1a:	609a      	str	r2, [r3, #8]
        pool->len = 0;
     f1c:	68fb      	ldr	r3, [r7, #12]
     f1e:	2200      	movs	r2, #0
     f20:	60da      	str	r2, [r3, #12]
        MP_STATE_VM(last_pool) = pool;
     f22:	4a0d      	ldr	r2, [pc, #52]	; (f58 <qstr_add+0xa0>)
     f24:	68fb      	ldr	r3, [r7, #12]
     f26:	6113      	str	r3, [r2, #16]
        DEBUG_printf("QSTR: allocate new pool of size %d\n", MP_STATE_VM(last_pool)->alloc);
    }

    // add the new qstr
    MP_STATE_VM(last_pool)->qstrs[MP_STATE_VM(last_pool)->len++] = q_ptr;
     f28:	4b0b      	ldr	r3, [pc, #44]	; (f58 <qstr_add+0xa0>)
     f2a:	6919      	ldr	r1, [r3, #16]
     f2c:	4b0a      	ldr	r3, [pc, #40]	; (f58 <qstr_add+0xa0>)
     f2e:	691a      	ldr	r2, [r3, #16]
     f30:	68d3      	ldr	r3, [r2, #12]
     f32:	1c58      	adds	r0, r3, #1
     f34:	60d0      	str	r0, [r2, #12]
     f36:	3304      	adds	r3, #4
     f38:	687a      	ldr	r2, [r7, #4]
     f3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    // return id for the newly-added qstr
    return MP_STATE_VM(last_pool)->total_prev_len + MP_STATE_VM(last_pool)->len - 1;
     f3e:	4b06      	ldr	r3, [pc, #24]	; (f58 <qstr_add+0xa0>)
     f40:	691b      	ldr	r3, [r3, #16]
     f42:	685a      	ldr	r2, [r3, #4]
     f44:	4b04      	ldr	r3, [pc, #16]	; (f58 <qstr_add+0xa0>)
     f46:	691b      	ldr	r3, [r3, #16]
     f48:	68db      	ldr	r3, [r3, #12]
     f4a:	4413      	add	r3, r2
     f4c:	3b01      	subs	r3, #1
}
     f4e:	4618      	mov	r0, r3
     f50:	3710      	adds	r7, #16
     f52:	46bd      	mov	sp, r7
     f54:	bd80      	pop	{r7, pc}
     f56:	bf00      	nop
     f58:	20000a2c 	.word	0x20000a2c

00000f5c <qstr_find_strn>:

qstr qstr_find_strn(const char *str, size_t str_len) {
     f5c:	b580      	push	{r7, lr}
     f5e:	b086      	sub	sp, #24
     f60:	af00      	add	r7, sp, #0
     f62:	6078      	str	r0, [r7, #4]
     f64:	6039      	str	r1, [r7, #0]
    // work out hash of str
    mp_uint_t str_hash = qstr_compute_hash((const byte*)str, str_len);
     f66:	6839      	ldr	r1, [r7, #0]
     f68:	6878      	ldr	r0, [r7, #4]
     f6a:	f7ff ff47 	bl	dfc <qstr_compute_hash>
     f6e:	60f8      	str	r0, [r7, #12]

    // search pools for the data
    for (qstr_pool_t *pool = MP_STATE_VM(last_pool); pool != NULL; pool = pool->prev) {
     f70:	4b22      	ldr	r3, [pc, #136]	; (ffc <qstr_find_strn+0xa0>)
     f72:	691b      	ldr	r3, [r3, #16]
     f74:	617b      	str	r3, [r7, #20]
     f76:	e038      	b.n	fea <qstr_find_strn+0x8e>
        for (const byte **q = pool->qstrs, **q_top = pool->qstrs + pool->len; q < q_top; q++) {
     f78:	697b      	ldr	r3, [r7, #20]
     f7a:	3310      	adds	r3, #16
     f7c:	613b      	str	r3, [r7, #16]
     f7e:	697b      	ldr	r3, [r7, #20]
     f80:	f103 0210 	add.w	r2, r3, #16
     f84:	697b      	ldr	r3, [r7, #20]
     f86:	68db      	ldr	r3, [r3, #12]
     f88:	009b      	lsls	r3, r3, #2
     f8a:	4413      	add	r3, r2
     f8c:	60bb      	str	r3, [r7, #8]
     f8e:	e025      	b.n	fdc <qstr_find_strn+0x80>
            if (Q_GET_HASH(*q) == str_hash && Q_GET_LENGTH(*q) == str_len && memcmp(Q_GET_DATA(*q), str, str_len) == 0) {
     f90:	693b      	ldr	r3, [r7, #16]
     f92:	681b      	ldr	r3, [r3, #0]
     f94:	781b      	ldrb	r3, [r3, #0]
     f96:	461a      	mov	r2, r3
     f98:	68fb      	ldr	r3, [r7, #12]
     f9a:	429a      	cmp	r2, r3
     f9c:	d11b      	bne.n	fd6 <qstr_find_strn+0x7a>
     f9e:	693b      	ldr	r3, [r7, #16]
     fa0:	681b      	ldr	r3, [r3, #0]
     fa2:	3301      	adds	r3, #1
     fa4:	781b      	ldrb	r3, [r3, #0]
     fa6:	461a      	mov	r2, r3
     fa8:	683b      	ldr	r3, [r7, #0]
     faa:	429a      	cmp	r2, r3
     fac:	d113      	bne.n	fd6 <qstr_find_strn+0x7a>
     fae:	693b      	ldr	r3, [r7, #16]
     fb0:	681b      	ldr	r3, [r3, #0]
     fb2:	3302      	adds	r3, #2
     fb4:	683a      	ldr	r2, [r7, #0]
     fb6:	6879      	ldr	r1, [r7, #4]
     fb8:	4618      	mov	r0, r3
     fba:	f01a fde8 	bl	1bb8e <memcmp>
     fbe:	4603      	mov	r3, r0
     fc0:	2b00      	cmp	r3, #0
     fc2:	d108      	bne.n	fd6 <qstr_find_strn+0x7a>
                return pool->total_prev_len + (q - pool->qstrs);
     fc4:	697b      	ldr	r3, [r7, #20]
     fc6:	685b      	ldr	r3, [r3, #4]
     fc8:	693a      	ldr	r2, [r7, #16]
     fca:	6979      	ldr	r1, [r7, #20]
     fcc:	3110      	adds	r1, #16
     fce:	1a52      	subs	r2, r2, r1
     fd0:	1092      	asrs	r2, r2, #2
     fd2:	4413      	add	r3, r2
     fd4:	e00d      	b.n	ff2 <qstr_find_strn+0x96>
        for (const byte **q = pool->qstrs, **q_top = pool->qstrs + pool->len; q < q_top; q++) {
     fd6:	693b      	ldr	r3, [r7, #16]
     fd8:	3304      	adds	r3, #4
     fda:	613b      	str	r3, [r7, #16]
     fdc:	693a      	ldr	r2, [r7, #16]
     fde:	68bb      	ldr	r3, [r7, #8]
     fe0:	429a      	cmp	r2, r3
     fe2:	d3d5      	bcc.n	f90 <qstr_find_strn+0x34>
    for (qstr_pool_t *pool = MP_STATE_VM(last_pool); pool != NULL; pool = pool->prev) {
     fe4:	697b      	ldr	r3, [r7, #20]
     fe6:	681b      	ldr	r3, [r3, #0]
     fe8:	617b      	str	r3, [r7, #20]
     fea:	697b      	ldr	r3, [r7, #20]
     fec:	2b00      	cmp	r3, #0
     fee:	d1c3      	bne.n	f78 <qstr_find_strn+0x1c>
            }
        }
    }

    // not found; return null qstr
    return 0;
     ff0:	2300      	movs	r3, #0
}
     ff2:	4618      	mov	r0, r3
     ff4:	3718      	adds	r7, #24
     ff6:	46bd      	mov	sp, r7
     ff8:	bd80      	pop	{r7, pc}
     ffa:	bf00      	nop
     ffc:	20000a2c 	.word	0x20000a2c

00001000 <qstr_from_str>:

qstr qstr_from_str(const char *str) {
    1000:	b580      	push	{r7, lr}
    1002:	b082      	sub	sp, #8
    1004:	af00      	add	r7, sp, #0
    1006:	6078      	str	r0, [r7, #4]
    return qstr_from_strn(str, strlen(str));
    1008:	6878      	ldr	r0, [r7, #4]
    100a:	f01a fe11 	bl	1bc30 <strlen>
    100e:	4603      	mov	r3, r0
    1010:	4619      	mov	r1, r3
    1012:	6878      	ldr	r0, [r7, #4]
    1014:	f000 f805 	bl	1022 <qstr_from_strn>
    1018:	4603      	mov	r3, r0
}
    101a:	4618      	mov	r0, r3
    101c:	3708      	adds	r7, #8
    101e:	46bd      	mov	sp, r7
    1020:	bd80      	pop	{r7, pc}

00001022 <qstr_from_strn>:

qstr qstr_from_strn(const char *str, size_t len) {
    1022:	b580      	push	{r7, lr}
    1024:	b088      	sub	sp, #32
    1026:	af00      	add	r7, sp, #0
    1028:	6078      	str	r0, [r7, #4]
    102a:	6039      	str	r1, [r7, #0]
    assert(len < (1 << (8 * MICROPY_QSTR_BYTES_IN_LEN)));
    102c:	683b      	ldr	r3, [r7, #0]
    102e:	2bff      	cmp	r3, #255	; 0xff
    1030:	d905      	bls.n	103e <qstr_from_strn+0x1c>
    1032:	4b56      	ldr	r3, [pc, #344]	; (118c <qstr_from_strn+0x16a>)
    1034:	4a56      	ldr	r2, [pc, #344]	; (1190 <qstr_from_strn+0x16e>)
    1036:	21ba      	movs	r1, #186	; 0xba
    1038:	4856      	ldr	r0, [pc, #344]	; (1194 <qstr_from_strn+0x172>)
    103a:	f01a f8bf 	bl	1b1bc <__assert_func>
    QSTR_ENTER();
    qstr q = qstr_find_strn(str, len);
    103e:	6839      	ldr	r1, [r7, #0]
    1040:	6878      	ldr	r0, [r7, #4]
    1042:	f7ff ff8b 	bl	f5c <qstr_find_strn>
    1046:	61f8      	str	r0, [r7, #28]
    if (q == 0) {
    1048:	69fb      	ldr	r3, [r7, #28]
    104a:	2b00      	cmp	r3, #0
    104c:	f040 8099 	bne.w	1182 <qstr_from_strn+0x160>
        // qstr does not exist in interned pool so need to add it

        // compute number of bytes needed to intern this string
        size_t n_bytes = MICROPY_QSTR_BYTES_IN_HASH + MICROPY_QSTR_BYTES_IN_LEN + len + 1;
    1050:	683b      	ldr	r3, [r7, #0]
    1052:	3303      	adds	r3, #3
    1054:	617b      	str	r3, [r7, #20]

        if (MP_STATE_VM(qstr_last_chunk) != NULL && MP_STATE_VM(qstr_last_used) + n_bytes > MP_STATE_VM(qstr_last_alloc)) {
    1056:	4b50      	ldr	r3, [pc, #320]	; (1198 <qstr_from_strn+0x176>)
    1058:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
    105c:	2b00      	cmp	r3, #0
    105e:	d030      	beq.n	10c2 <qstr_from_strn+0xa0>
    1060:	4b4d      	ldr	r3, [pc, #308]	; (1198 <qstr_from_strn+0x176>)
    1062:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
    1066:	697b      	ldr	r3, [r7, #20]
    1068:	441a      	add	r2, r3
    106a:	4b4b      	ldr	r3, [pc, #300]	; (1198 <qstr_from_strn+0x176>)
    106c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
    1070:	429a      	cmp	r2, r3
    1072:	d926      	bls.n	10c2 <qstr_from_strn+0xa0>
            // not enough room at end of previously interned string so try to grow
            byte *new_p = m_renew_maybe(byte, MP_STATE_VM(qstr_last_chunk), MP_STATE_VM(qstr_last_alloc), MP_STATE_VM(qstr_last_alloc) + n_bytes, false);
    1074:	4b48      	ldr	r3, [pc, #288]	; (1198 <qstr_from_strn+0x176>)
    1076:	f8d3 0088 	ldr.w	r0, [r3, #136]	; 0x88
    107a:	4b47      	ldr	r3, [pc, #284]	; (1198 <qstr_from_strn+0x176>)
    107c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
    1080:	697b      	ldr	r3, [r7, #20]
    1082:	4413      	add	r3, r2
    1084:	2200      	movs	r2, #0
    1086:	4619      	mov	r1, r3
    1088:	f7ff f993 	bl	3b2 <m_realloc_maybe>
    108c:	6138      	str	r0, [r7, #16]
            if (new_p == NULL) {
    108e:	693b      	ldr	r3, [r7, #16]
    1090:	2b00      	cmp	r3, #0
    1092:	d10e      	bne.n	10b2 <qstr_from_strn+0x90>
                // could not grow existing memory; shrink it to fit previous
                (void)m_renew_maybe(byte, MP_STATE_VM(qstr_last_chunk), MP_STATE_VM(qstr_last_alloc), MP_STATE_VM(qstr_last_used), false);
    1094:	4b40      	ldr	r3, [pc, #256]	; (1198 <qstr_from_strn+0x176>)
    1096:	f8d3 0088 	ldr.w	r0, [r3, #136]	; 0x88
    109a:	4b3f      	ldr	r3, [pc, #252]	; (1198 <qstr_from_strn+0x176>)
    109c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    10a0:	2200      	movs	r2, #0
    10a2:	4619      	mov	r1, r3
    10a4:	f7ff f985 	bl	3b2 <m_realloc_maybe>
                MP_STATE_VM(qstr_last_chunk) = NULL;
    10a8:	4b3b      	ldr	r3, [pc, #236]	; (1198 <qstr_from_strn+0x176>)
    10aa:	2200      	movs	r2, #0
    10ac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    10b0:	e007      	b.n	10c2 <qstr_from_strn+0xa0>
            } else {
                // could grow existing memory
                MP_STATE_VM(qstr_last_alloc) += n_bytes;
    10b2:	4b39      	ldr	r3, [pc, #228]	; (1198 <qstr_from_strn+0x176>)
    10b4:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
    10b8:	697b      	ldr	r3, [r7, #20]
    10ba:	4413      	add	r3, r2
    10bc:	4a36      	ldr	r2, [pc, #216]	; (1198 <qstr_from_strn+0x176>)
    10be:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
            }
        }

        if (MP_STATE_VM(qstr_last_chunk) == NULL) {
    10c2:	4b35      	ldr	r3, [pc, #212]	; (1198 <qstr_from_strn+0x176>)
    10c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
    10c8:	2b00      	cmp	r3, #0
    10ca:	d12b      	bne.n	1124 <qstr_from_strn+0x102>
            // no existing memory for the interned string so allocate a new chunk
            size_t al = n_bytes;
    10cc:	697b      	ldr	r3, [r7, #20]
    10ce:	61bb      	str	r3, [r7, #24]
            if (al < MICROPY_ALLOC_QSTR_CHUNK_INIT) {
    10d0:	69bb      	ldr	r3, [r7, #24]
    10d2:	2b7f      	cmp	r3, #127	; 0x7f
    10d4:	d801      	bhi.n	10da <qstr_from_strn+0xb8>
                al = MICROPY_ALLOC_QSTR_CHUNK_INIT;
    10d6:	2380      	movs	r3, #128	; 0x80
    10d8:	61bb      	str	r3, [r7, #24]
            }
            MP_STATE_VM(qstr_last_chunk) = m_new_maybe(byte, al);
    10da:	69b8      	ldr	r0, [r7, #24]
    10dc:	f7ff f935 	bl	34a <m_malloc_maybe>
    10e0:	4602      	mov	r2, r0
    10e2:	4b2d      	ldr	r3, [pc, #180]	; (1198 <qstr_from_strn+0x176>)
    10e4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
            if (MP_STATE_VM(qstr_last_chunk) == NULL) {
    10e8:	4b2b      	ldr	r3, [pc, #172]	; (1198 <qstr_from_strn+0x176>)
    10ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
    10ee:	2b00      	cmp	r3, #0
    10f0:	d110      	bne.n	1114 <qstr_from_strn+0xf2>
                // failed to allocate a large chunk so try with exact size
                MP_STATE_VM(qstr_last_chunk) = m_new_maybe(byte, n_bytes);
    10f2:	6978      	ldr	r0, [r7, #20]
    10f4:	f7ff f929 	bl	34a <m_malloc_maybe>
    10f8:	4602      	mov	r2, r0
    10fa:	4b27      	ldr	r3, [pc, #156]	; (1198 <qstr_from_strn+0x176>)
    10fc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
                if (MP_STATE_VM(qstr_last_chunk) == NULL) {
    1100:	4b25      	ldr	r3, [pc, #148]	; (1198 <qstr_from_strn+0x176>)
    1102:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
    1106:	2b00      	cmp	r3, #0
    1108:	d102      	bne.n	1110 <qstr_from_strn+0xee>
                    QSTR_EXIT();
                    m_malloc_fail(n_bytes);
    110a:	6978      	ldr	r0, [r7, #20]
    110c:	f00b fecc 	bl	cea8 <m_malloc_fail>
                }
                al = n_bytes;
    1110:	697b      	ldr	r3, [r7, #20]
    1112:	61bb      	str	r3, [r7, #24]
            }
            MP_STATE_VM(qstr_last_alloc) = al;
    1114:	4a20      	ldr	r2, [pc, #128]	; (1198 <qstr_from_strn+0x176>)
    1116:	69bb      	ldr	r3, [r7, #24]
    1118:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
            MP_STATE_VM(qstr_last_used) = 0;
    111c:	4b1e      	ldr	r3, [pc, #120]	; (1198 <qstr_from_strn+0x176>)
    111e:	2200      	movs	r2, #0
    1120:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        // allocate memory from the chunk for this new interned string's data
        byte *q_ptr = MP_STATE_VM(qstr_last_chunk) + MP_STATE_VM(qstr_last_used);
    1124:	4b1c      	ldr	r3, [pc, #112]	; (1198 <qstr_from_strn+0x176>)
    1126:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    112a:	4b1b      	ldr	r3, [pc, #108]	; (1198 <qstr_from_strn+0x176>)
    112c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    1130:	4413      	add	r3, r2
    1132:	60fb      	str	r3, [r7, #12]
        MP_STATE_VM(qstr_last_used) += n_bytes;
    1134:	4b18      	ldr	r3, [pc, #96]	; (1198 <qstr_from_strn+0x176>)
    1136:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
    113a:	697b      	ldr	r3, [r7, #20]
    113c:	4413      	add	r3, r2
    113e:	4a16      	ldr	r2, [pc, #88]	; (1198 <qstr_from_strn+0x176>)
    1140:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        // store the interned strings' data
        mp_uint_t hash = qstr_compute_hash((const byte*)str, len);
    1144:	6839      	ldr	r1, [r7, #0]
    1146:	6878      	ldr	r0, [r7, #4]
    1148:	f7ff fe58 	bl	dfc <qstr_compute_hash>
    114c:	60b8      	str	r0, [r7, #8]
        Q_SET_HASH(q_ptr, hash);
    114e:	68bb      	ldr	r3, [r7, #8]
    1150:	b2da      	uxtb	r2, r3
    1152:	68fb      	ldr	r3, [r7, #12]
    1154:	701a      	strb	r2, [r3, #0]
        Q_SET_LENGTH(q_ptr, len);
    1156:	68fb      	ldr	r3, [r7, #12]
    1158:	3301      	adds	r3, #1
    115a:	683a      	ldr	r2, [r7, #0]
    115c:	b2d2      	uxtb	r2, r2
    115e:	701a      	strb	r2, [r3, #0]
        memcpy(q_ptr + MICROPY_QSTR_BYTES_IN_HASH + MICROPY_QSTR_BYTES_IN_LEN, str, len);
    1160:	68fb      	ldr	r3, [r7, #12]
    1162:	3302      	adds	r3, #2
    1164:	683a      	ldr	r2, [r7, #0]
    1166:	6879      	ldr	r1, [r7, #4]
    1168:	4618      	mov	r0, r3
    116a:	f01a fc2b 	bl	1b9c4 <memcpy>
        q_ptr[MICROPY_QSTR_BYTES_IN_HASH + MICROPY_QSTR_BYTES_IN_LEN + len] = '\0';
    116e:	683b      	ldr	r3, [r7, #0]
    1170:	3302      	adds	r3, #2
    1172:	68fa      	ldr	r2, [r7, #12]
    1174:	4413      	add	r3, r2
    1176:	2200      	movs	r2, #0
    1178:	701a      	strb	r2, [r3, #0]
        q = qstr_add(q_ptr);
    117a:	68f8      	ldr	r0, [r7, #12]
    117c:	f7ff fe9c 	bl	eb8 <qstr_add>
    1180:	61f8      	str	r0, [r7, #28]
    }
    QSTR_EXIT();
    return q;
    1182:	69fb      	ldr	r3, [r7, #28]
}
    1184:	4618      	mov	r0, r3
    1186:	3720      	adds	r7, #32
    1188:	46bd      	mov	sp, r7
    118a:	bd80      	pop	{r7, pc}
    118c:	0001d534 	.word	0x0001d534
    1190:	0001d574 	.word	0x0001d574
    1194:	0001d564 	.word	0x0001d564
    1198:	20000a2c 	.word	0x20000a2c

0000119c <qstr_hash>:

mp_uint_t qstr_hash(qstr q) {
    119c:	b580      	push	{r7, lr}
    119e:	b082      	sub	sp, #8
    11a0:	af00      	add	r7, sp, #0
    11a2:	6078      	str	r0, [r7, #4]
    return Q_GET_HASH(find_qstr(q));
    11a4:	6878      	ldr	r0, [r7, #4]
    11a6:	f7ff fe67 	bl	e78 <find_qstr>
    11aa:	4603      	mov	r3, r0
    11ac:	781b      	ldrb	r3, [r3, #0]
}
    11ae:	4618      	mov	r0, r3
    11b0:	3708      	adds	r7, #8
    11b2:	46bd      	mov	sp, r7
    11b4:	bd80      	pop	{r7, pc}

000011b6 <qstr_len>:

size_t qstr_len(qstr q) {
    11b6:	b580      	push	{r7, lr}
    11b8:	b084      	sub	sp, #16
    11ba:	af00      	add	r7, sp, #0
    11bc:	6078      	str	r0, [r7, #4]
    const byte *qd = find_qstr(q);
    11be:	6878      	ldr	r0, [r7, #4]
    11c0:	f7ff fe5a 	bl	e78 <find_qstr>
    11c4:	60f8      	str	r0, [r7, #12]
    return Q_GET_LENGTH(qd);
    11c6:	68fb      	ldr	r3, [r7, #12]
    11c8:	3301      	adds	r3, #1
    11ca:	781b      	ldrb	r3, [r3, #0]
}
    11cc:	4618      	mov	r0, r3
    11ce:	3710      	adds	r7, #16
    11d0:	46bd      	mov	sp, r7
    11d2:	bd80      	pop	{r7, pc}

000011d4 <qstr_str>:

const char *qstr_str(qstr q) {
    11d4:	b580      	push	{r7, lr}
    11d6:	b084      	sub	sp, #16
    11d8:	af00      	add	r7, sp, #0
    11da:	6078      	str	r0, [r7, #4]
    const byte *qd = find_qstr(q);
    11dc:	6878      	ldr	r0, [r7, #4]
    11de:	f7ff fe4b 	bl	e78 <find_qstr>
    11e2:	60f8      	str	r0, [r7, #12]
    return (const char*)Q_GET_DATA(qd);
    11e4:	68fb      	ldr	r3, [r7, #12]
    11e6:	3302      	adds	r3, #2
}
    11e8:	4618      	mov	r0, r3
    11ea:	3710      	adds	r7, #16
    11ec:	46bd      	mov	sp, r7
    11ee:	bd80      	pop	{r7, pc}

000011f0 <qstr_data>:

const byte *qstr_data(qstr q, size_t *len) {
    11f0:	b580      	push	{r7, lr}
    11f2:	b084      	sub	sp, #16
    11f4:	af00      	add	r7, sp, #0
    11f6:	6078      	str	r0, [r7, #4]
    11f8:	6039      	str	r1, [r7, #0]
    const byte *qd = find_qstr(q);
    11fa:	6878      	ldr	r0, [r7, #4]
    11fc:	f7ff fe3c 	bl	e78 <find_qstr>
    1200:	60f8      	str	r0, [r7, #12]
    *len = Q_GET_LENGTH(qd);
    1202:	68fb      	ldr	r3, [r7, #12]
    1204:	3301      	adds	r3, #1
    1206:	781b      	ldrb	r3, [r3, #0]
    1208:	461a      	mov	r2, r3
    120a:	683b      	ldr	r3, [r7, #0]
    120c:	601a      	str	r2, [r3, #0]
    return Q_GET_DATA(qd);
    120e:	68fb      	ldr	r3, [r7, #12]
    1210:	3302      	adds	r3, #2
}
    1212:	4618      	mov	r0, r3
    1214:	3710      	adds	r7, #16
    1216:	46bd      	mov	sp, r7
    1218:	bd80      	pop	{r7, pc}

0000121a <qstr_pool_info>:

void qstr_pool_info(size_t *n_pool, size_t *n_qstr, size_t *n_str_data_bytes, size_t *n_total_bytes) {
    121a:	b580      	push	{r7, lr}
    121c:	b088      	sub	sp, #32
    121e:	af00      	add	r7, sp, #0
    1220:	60f8      	str	r0, [r7, #12]
    1222:	60b9      	str	r1, [r7, #8]
    1224:	607a      	str	r2, [r7, #4]
    1226:	603b      	str	r3, [r7, #0]
    QSTR_ENTER();
    *n_pool = 0;
    1228:	68fb      	ldr	r3, [r7, #12]
    122a:	2200      	movs	r2, #0
    122c:	601a      	str	r2, [r3, #0]
    *n_qstr = 0;
    122e:	68bb      	ldr	r3, [r7, #8]
    1230:	2200      	movs	r2, #0
    1232:	601a      	str	r2, [r3, #0]
    *n_str_data_bytes = 0;
    1234:	687b      	ldr	r3, [r7, #4]
    1236:	2200      	movs	r2, #0
    1238:	601a      	str	r2, [r3, #0]
    *n_total_bytes = 0;
    123a:	683b      	ldr	r3, [r7, #0]
    123c:	2200      	movs	r2, #0
    123e:	601a      	str	r2, [r3, #0]
    for (qstr_pool_t *pool = MP_STATE_VM(last_pool); pool != NULL && pool != &CONST_POOL; pool = pool->prev) {
    1240:	4b25      	ldr	r3, [pc, #148]	; (12d8 <qstr_pool_info+0xbe>)
    1242:	691b      	ldr	r3, [r3, #16]
    1244:	61fb      	str	r3, [r7, #28]
    1246:	e034      	b.n	12b2 <qstr_pool_info+0x98>
        *n_pool += 1;
    1248:	68fb      	ldr	r3, [r7, #12]
    124a:	681b      	ldr	r3, [r3, #0]
    124c:	1c5a      	adds	r2, r3, #1
    124e:	68fb      	ldr	r3, [r7, #12]
    1250:	601a      	str	r2, [r3, #0]
        *n_qstr += pool->len;
    1252:	68bb      	ldr	r3, [r7, #8]
    1254:	681a      	ldr	r2, [r3, #0]
    1256:	69fb      	ldr	r3, [r7, #28]
    1258:	68db      	ldr	r3, [r3, #12]
    125a:	441a      	add	r2, r3
    125c:	68bb      	ldr	r3, [r7, #8]
    125e:	601a      	str	r2, [r3, #0]
        for (const byte **q = pool->qstrs, **q_top = pool->qstrs + pool->len; q < q_top; q++) {
    1260:	69fb      	ldr	r3, [r7, #28]
    1262:	3310      	adds	r3, #16
    1264:	61bb      	str	r3, [r7, #24]
    1266:	69fb      	ldr	r3, [r7, #28]
    1268:	f103 0210 	add.w	r2, r3, #16
    126c:	69fb      	ldr	r3, [r7, #28]
    126e:	68db      	ldr	r3, [r3, #12]
    1270:	009b      	lsls	r3, r3, #2
    1272:	4413      	add	r3, r2
    1274:	617b      	str	r3, [r7, #20]
    1276:	e00c      	b.n	1292 <qstr_pool_info+0x78>
            *n_str_data_bytes += Q_GET_ALLOC(*q);
    1278:	687b      	ldr	r3, [r7, #4]
    127a:	681b      	ldr	r3, [r3, #0]
    127c:	69ba      	ldr	r2, [r7, #24]
    127e:	6812      	ldr	r2, [r2, #0]
    1280:	3201      	adds	r2, #1
    1282:	7812      	ldrb	r2, [r2, #0]
    1284:	4413      	add	r3, r2
    1286:	1cda      	adds	r2, r3, #3
    1288:	687b      	ldr	r3, [r7, #4]
    128a:	601a      	str	r2, [r3, #0]
        for (const byte **q = pool->qstrs, **q_top = pool->qstrs + pool->len; q < q_top; q++) {
    128c:	69bb      	ldr	r3, [r7, #24]
    128e:	3304      	adds	r3, #4
    1290:	61bb      	str	r3, [r7, #24]
    1292:	69ba      	ldr	r2, [r7, #24]
    1294:	697b      	ldr	r3, [r7, #20]
    1296:	429a      	cmp	r2, r3
    1298:	d3ee      	bcc.n	1278 <qstr_pool_info+0x5e>
        }
        #if MICROPY_ENABLE_GC
        *n_total_bytes += gc_nbytes(pool); // this counts actual bytes used in heap
    129a:	69f8      	ldr	r0, [r7, #28]
    129c:	f7ff fba2 	bl	9e4 <gc_nbytes>
    12a0:	4602      	mov	r2, r0
    12a2:	683b      	ldr	r3, [r7, #0]
    12a4:	681b      	ldr	r3, [r3, #0]
    12a6:	441a      	add	r2, r3
    12a8:	683b      	ldr	r3, [r7, #0]
    12aa:	601a      	str	r2, [r3, #0]
    for (qstr_pool_t *pool = MP_STATE_VM(last_pool); pool != NULL && pool != &CONST_POOL; pool = pool->prev) {
    12ac:	69fb      	ldr	r3, [r7, #28]
    12ae:	681b      	ldr	r3, [r3, #0]
    12b0:	61fb      	str	r3, [r7, #28]
    12b2:	69fb      	ldr	r3, [r7, #28]
    12b4:	2b00      	cmp	r3, #0
    12b6:	d003      	beq.n	12c0 <qstr_pool_info+0xa6>
    12b8:	69fb      	ldr	r3, [r7, #28]
    12ba:	4a08      	ldr	r2, [pc, #32]	; (12dc <qstr_pool_info+0xc2>)
    12bc:	4293      	cmp	r3, r2
    12be:	d1c3      	bne.n	1248 <qstr_pool_info+0x2e>
        #else
        *n_total_bytes += sizeof(qstr_pool_t) + sizeof(qstr) * pool->alloc;
        #endif
    }
    *n_total_bytes += *n_str_data_bytes;
    12c0:	683b      	ldr	r3, [r7, #0]
    12c2:	681a      	ldr	r2, [r3, #0]
    12c4:	687b      	ldr	r3, [r7, #4]
    12c6:	681b      	ldr	r3, [r3, #0]
    12c8:	441a      	add	r2, r3
    12ca:	683b      	ldr	r3, [r7, #0]
    12cc:	601a      	str	r2, [r3, #0]
    QSTR_EXIT();
}
    12ce:	bf00      	nop
    12d0:	3720      	adds	r7, #32
    12d2:	46bd      	mov	sp, r7
    12d4:	bd80      	pop	{r7, pc}
    12d6:	bf00      	nop
    12d8:	20000a2c 	.word	0x20000a2c
    12dc:	00022c80 	.word	0x00022c80

000012e0 <vstr_init>:

// returned value is always at least 1 greater than argument
#define ROUND_ALLOC(a) (((a) & ((~0U) - 7)) + 8)

// Init the vstr so it allocs exactly given number of bytes.  Set length to zero.
void vstr_init(vstr_t *vstr, size_t alloc) {
    12e0:	b580      	push	{r7, lr}
    12e2:	b082      	sub	sp, #8
    12e4:	af00      	add	r7, sp, #0
    12e6:	6078      	str	r0, [r7, #4]
    12e8:	6039      	str	r1, [r7, #0]
    if (alloc < 1) {
    12ea:	683b      	ldr	r3, [r7, #0]
    12ec:	2b00      	cmp	r3, #0
    12ee:	d101      	bne.n	12f4 <vstr_init+0x14>
        alloc = 1;
    12f0:	2301      	movs	r3, #1
    12f2:	603b      	str	r3, [r7, #0]
    }
    vstr->alloc = alloc;
    12f4:	687b      	ldr	r3, [r7, #4]
    12f6:	683a      	ldr	r2, [r7, #0]
    12f8:	601a      	str	r2, [r3, #0]
    vstr->len = 0;
    12fa:	687b      	ldr	r3, [r7, #4]
    12fc:	2200      	movs	r2, #0
    12fe:	605a      	str	r2, [r3, #4]
    vstr->buf = m_new(char, vstr->alloc);
    1300:	687b      	ldr	r3, [r7, #4]
    1302:	681b      	ldr	r3, [r3, #0]
    1304:	4618      	mov	r0, r3
    1306:	f7ff f809 	bl	31c <m_malloc>
    130a:	4602      	mov	r2, r0
    130c:	687b      	ldr	r3, [r7, #4]
    130e:	609a      	str	r2, [r3, #8]
    vstr->fixed_buf = false;
    1310:	687a      	ldr	r2, [r7, #4]
    1312:	7b13      	ldrb	r3, [r2, #12]
    1314:	f36f 0300 	bfc	r3, #0, #1
    1318:	7313      	strb	r3, [r2, #12]
}
    131a:	bf00      	nop
    131c:	3708      	adds	r7, #8
    131e:	46bd      	mov	sp, r7
    1320:	bd80      	pop	{r7, pc}

00001322 <vstr_init_len>:

// Init the vstr so it allocs exactly enough ram to hold a null-terminated
// string of the given length, and set the length.
void vstr_init_len(vstr_t *vstr, size_t len) {
    1322:	b580      	push	{r7, lr}
    1324:	b082      	sub	sp, #8
    1326:	af00      	add	r7, sp, #0
    1328:	6078      	str	r0, [r7, #4]
    132a:	6039      	str	r1, [r7, #0]
    vstr_init(vstr, len + 1);
    132c:	683b      	ldr	r3, [r7, #0]
    132e:	3301      	adds	r3, #1
    1330:	4619      	mov	r1, r3
    1332:	6878      	ldr	r0, [r7, #4]
    1334:	f7ff ffd4 	bl	12e0 <vstr_init>
    vstr->len = len;
    1338:	687b      	ldr	r3, [r7, #4]
    133a:	683a      	ldr	r2, [r7, #0]
    133c:	605a      	str	r2, [r3, #4]
}
    133e:	bf00      	nop
    1340:	3708      	adds	r7, #8
    1342:	46bd      	mov	sp, r7
    1344:	bd80      	pop	{r7, pc}

00001346 <vstr_init_fixed_buf>:

void vstr_init_fixed_buf(vstr_t *vstr, size_t alloc, char *buf) {
    1346:	b480      	push	{r7}
    1348:	b085      	sub	sp, #20
    134a:	af00      	add	r7, sp, #0
    134c:	60f8      	str	r0, [r7, #12]
    134e:	60b9      	str	r1, [r7, #8]
    1350:	607a      	str	r2, [r7, #4]
    vstr->alloc = alloc;
    1352:	68fb      	ldr	r3, [r7, #12]
    1354:	68ba      	ldr	r2, [r7, #8]
    1356:	601a      	str	r2, [r3, #0]
    vstr->len = 0;
    1358:	68fb      	ldr	r3, [r7, #12]
    135a:	2200      	movs	r2, #0
    135c:	605a      	str	r2, [r3, #4]
    vstr->buf = buf;
    135e:	68fb      	ldr	r3, [r7, #12]
    1360:	687a      	ldr	r2, [r7, #4]
    1362:	609a      	str	r2, [r3, #8]
    vstr->fixed_buf = true;
    1364:	68fa      	ldr	r2, [r7, #12]
    1366:	7b13      	ldrb	r3, [r2, #12]
    1368:	f043 0301 	orr.w	r3, r3, #1
    136c:	7313      	strb	r3, [r2, #12]
}
    136e:	bf00      	nop
    1370:	3714      	adds	r7, #20
    1372:	46bd      	mov	sp, r7
    1374:	f85d 7b04 	ldr.w	r7, [sp], #4
    1378:	4770      	bx	lr

0000137a <vstr_init_print>:

void vstr_init_print(vstr_t *vstr, size_t alloc, mp_print_t *print) {
    137a:	b580      	push	{r7, lr}
    137c:	b084      	sub	sp, #16
    137e:	af00      	add	r7, sp, #0
    1380:	60f8      	str	r0, [r7, #12]
    1382:	60b9      	str	r1, [r7, #8]
    1384:	607a      	str	r2, [r7, #4]
    vstr_init(vstr, alloc);
    1386:	68b9      	ldr	r1, [r7, #8]
    1388:	68f8      	ldr	r0, [r7, #12]
    138a:	f7ff ffa9 	bl	12e0 <vstr_init>
    print->data = vstr;
    138e:	687b      	ldr	r3, [r7, #4]
    1390:	68fa      	ldr	r2, [r7, #12]
    1392:	601a      	str	r2, [r3, #0]
    print->print_strn = (mp_print_strn_t)vstr_add_strn;
    1394:	687b      	ldr	r3, [r7, #4]
    1396:	4a03      	ldr	r2, [pc, #12]	; (13a4 <vstr_init_print+0x2a>)
    1398:	605a      	str	r2, [r3, #4]
}
    139a:	bf00      	nop
    139c:	3710      	adds	r7, #16
    139e:	46bd      	mov	sp, r7
    13a0:	bd80      	pop	{r7, pc}
    13a2:	bf00      	nop
    13a4:	000015eb 	.word	0x000015eb

000013a8 <vstr_clear>:

void vstr_clear(vstr_t *vstr) {
    13a8:	b580      	push	{r7, lr}
    13aa:	b082      	sub	sp, #8
    13ac:	af00      	add	r7, sp, #0
    13ae:	6078      	str	r0, [r7, #4]
    if (!vstr->fixed_buf) {
    13b0:	687b      	ldr	r3, [r7, #4]
    13b2:	7b1b      	ldrb	r3, [r3, #12]
    13b4:	f3c3 0300 	ubfx	r3, r3, #0, #1
    13b8:	b2db      	uxtb	r3, r3
    13ba:	f083 0301 	eor.w	r3, r3, #1
    13be:	b2db      	uxtb	r3, r3
    13c0:	2b00      	cmp	r3, #0
    13c2:	d004      	beq.n	13ce <vstr_clear+0x26>
        m_del(char, vstr->buf, vstr->alloc);
    13c4:	687b      	ldr	r3, [r7, #4]
    13c6:	689b      	ldr	r3, [r3, #8]
    13c8:	4618      	mov	r0, r3
    13ca:	f7ff f805 	bl	3d8 <m_free>
    }
    vstr->buf = NULL;
    13ce:	687b      	ldr	r3, [r7, #4]
    13d0:	2200      	movs	r2, #0
    13d2:	609a      	str	r2, [r3, #8]
}
    13d4:	bf00      	nop
    13d6:	3708      	adds	r7, #8
    13d8:	46bd      	mov	sp, r7
    13da:	bd80      	pop	{r7, pc}

000013dc <vstr_new>:

vstr_t *vstr_new(size_t alloc) {
    13dc:	b580      	push	{r7, lr}
    13de:	b084      	sub	sp, #16
    13e0:	af00      	add	r7, sp, #0
    13e2:	6078      	str	r0, [r7, #4]
    vstr_t *vstr = m_new_obj(vstr_t);
    13e4:	2010      	movs	r0, #16
    13e6:	f7fe ff99 	bl	31c <m_malloc>
    13ea:	60f8      	str	r0, [r7, #12]
    vstr_init(vstr, alloc);
    13ec:	6879      	ldr	r1, [r7, #4]
    13ee:	68f8      	ldr	r0, [r7, #12]
    13f0:	f7ff ff76 	bl	12e0 <vstr_init>
    return vstr;
    13f4:	68fb      	ldr	r3, [r7, #12]
}
    13f6:	4618      	mov	r0, r3
    13f8:	3710      	adds	r7, #16
    13fa:	46bd      	mov	sp, r7
    13fc:	bd80      	pop	{r7, pc}

000013fe <vstr_free>:

void vstr_free(vstr_t *vstr) {
    13fe:	b580      	push	{r7, lr}
    1400:	b082      	sub	sp, #8
    1402:	af00      	add	r7, sp, #0
    1404:	6078      	str	r0, [r7, #4]
    if (vstr != NULL) {
    1406:	687b      	ldr	r3, [r7, #4]
    1408:	2b00      	cmp	r3, #0
    140a:	d011      	beq.n	1430 <vstr_free+0x32>
        if (!vstr->fixed_buf) {
    140c:	687b      	ldr	r3, [r7, #4]
    140e:	7b1b      	ldrb	r3, [r3, #12]
    1410:	f3c3 0300 	ubfx	r3, r3, #0, #1
    1414:	b2db      	uxtb	r3, r3
    1416:	f083 0301 	eor.w	r3, r3, #1
    141a:	b2db      	uxtb	r3, r3
    141c:	2b00      	cmp	r3, #0
    141e:	d004      	beq.n	142a <vstr_free+0x2c>
            m_del(char, vstr->buf, vstr->alloc);
    1420:	687b      	ldr	r3, [r7, #4]
    1422:	689b      	ldr	r3, [r3, #8]
    1424:	4618      	mov	r0, r3
    1426:	f7fe ffd7 	bl	3d8 <m_free>
        }
        m_del_obj(vstr_t, vstr);
    142a:	6878      	ldr	r0, [r7, #4]
    142c:	f7fe ffd4 	bl	3d8 <m_free>
    }
}
    1430:	bf00      	nop
    1432:	3708      	adds	r7, #8
    1434:	46bd      	mov	sp, r7
    1436:	bd80      	pop	{r7, pc}

00001438 <vstr_extend>:

// Extend vstr strictly by requested size, return pointer to newly added chunk.
char *vstr_extend(vstr_t *vstr, size_t size) {
    1438:	b580      	push	{r7, lr}
    143a:	b084      	sub	sp, #16
    143c:	af00      	add	r7, sp, #0
    143e:	6078      	str	r0, [r7, #4]
    1440:	6039      	str	r1, [r7, #0]
    if (vstr->fixed_buf) {
    1442:	687b      	ldr	r3, [r7, #4]
    1444:	7b1b      	ldrb	r3, [r3, #12]
    1446:	f003 0301 	and.w	r3, r3, #1
    144a:	b2db      	uxtb	r3, r3
    144c:	2b00      	cmp	r3, #0
    144e:	d003      	beq.n	1458 <vstr_extend+0x20>
        // We can't reallocate, and the caller is expecting the space to
        // be there, so the only safe option is to raise an exception.
        mp_raise_msg(&mp_type_RuntimeError, NULL);
    1450:	2100      	movs	r1, #0
    1452:	4810      	ldr	r0, [pc, #64]	; (1494 <vstr_extend+0x5c>)
    1454:	f00b fd44 	bl	cee0 <mp_raise_msg>
    }
    char *new_buf = m_renew(char, vstr->buf, vstr->alloc, vstr->alloc + size);
    1458:	687b      	ldr	r3, [r7, #4]
    145a:	6898      	ldr	r0, [r3, #8]
    145c:	687b      	ldr	r3, [r7, #4]
    145e:	681a      	ldr	r2, [r3, #0]
    1460:	683b      	ldr	r3, [r7, #0]
    1462:	4413      	add	r3, r2
    1464:	4619      	mov	r1, r3
    1466:	f7fe ff8b 	bl	380 <m_realloc>
    146a:	60f8      	str	r0, [r7, #12]
    char *p = new_buf + vstr->alloc;
    146c:	687b      	ldr	r3, [r7, #4]
    146e:	681b      	ldr	r3, [r3, #0]
    1470:	68fa      	ldr	r2, [r7, #12]
    1472:	4413      	add	r3, r2
    1474:	60bb      	str	r3, [r7, #8]
    vstr->alloc += size;
    1476:	687b      	ldr	r3, [r7, #4]
    1478:	681a      	ldr	r2, [r3, #0]
    147a:	683b      	ldr	r3, [r7, #0]
    147c:	441a      	add	r2, r3
    147e:	687b      	ldr	r3, [r7, #4]
    1480:	601a      	str	r2, [r3, #0]
    vstr->buf = new_buf;
    1482:	687b      	ldr	r3, [r7, #4]
    1484:	68fa      	ldr	r2, [r7, #12]
    1486:	609a      	str	r2, [r3, #8]
    return p;
    1488:	68bb      	ldr	r3, [r7, #8]
}
    148a:	4618      	mov	r0, r3
    148c:	3710      	adds	r7, #16
    148e:	46bd      	mov	sp, r7
    1490:	bd80      	pop	{r7, pc}
    1492:	bf00      	nop
    1494:	000203f4 	.word	0x000203f4

00001498 <vstr_ensure_extra>:

STATIC void vstr_ensure_extra(vstr_t *vstr, size_t size) {
    1498:	b580      	push	{r7, lr}
    149a:	b084      	sub	sp, #16
    149c:	af00      	add	r7, sp, #0
    149e:	6078      	str	r0, [r7, #4]
    14a0:	6039      	str	r1, [r7, #0]
    if (vstr->len + size > vstr->alloc) {
    14a2:	687b      	ldr	r3, [r7, #4]
    14a4:	685a      	ldr	r2, [r3, #4]
    14a6:	683b      	ldr	r3, [r7, #0]
    14a8:	441a      	add	r2, r3
    14aa:	687b      	ldr	r3, [r7, #4]
    14ac:	681b      	ldr	r3, [r3, #0]
    14ae:	429a      	cmp	r2, r3
    14b0:	d920      	bls.n	14f4 <vstr_ensure_extra+0x5c>
        if (vstr->fixed_buf) {
    14b2:	687b      	ldr	r3, [r7, #4]
    14b4:	7b1b      	ldrb	r3, [r3, #12]
    14b6:	f003 0301 	and.w	r3, r3, #1
    14ba:	b2db      	uxtb	r3, r3
    14bc:	2b00      	cmp	r3, #0
    14be:	d003      	beq.n	14c8 <vstr_ensure_extra+0x30>
            // We can't reallocate, and the caller is expecting the space to
            // be there, so the only safe option is to raise an exception.
            mp_raise_msg(&mp_type_RuntimeError, NULL);
    14c0:	2100      	movs	r1, #0
    14c2:	480e      	ldr	r0, [pc, #56]	; (14fc <vstr_ensure_extra+0x64>)
    14c4:	f00b fd0c 	bl	cee0 <mp_raise_msg>
        }
        size_t new_alloc = ROUND_ALLOC((vstr->len + size) + 16);
    14c8:	687b      	ldr	r3, [r7, #4]
    14ca:	685a      	ldr	r2, [r3, #4]
    14cc:	683b      	ldr	r3, [r7, #0]
    14ce:	4413      	add	r3, r2
    14d0:	3310      	adds	r3, #16
    14d2:	f023 0307 	bic.w	r3, r3, #7
    14d6:	3308      	adds	r3, #8
    14d8:	60fb      	str	r3, [r7, #12]
        char *new_buf = m_renew(char, vstr->buf, vstr->alloc, new_alloc);
    14da:	687b      	ldr	r3, [r7, #4]
    14dc:	689b      	ldr	r3, [r3, #8]
    14de:	68f9      	ldr	r1, [r7, #12]
    14e0:	4618      	mov	r0, r3
    14e2:	f7fe ff4d 	bl	380 <m_realloc>
    14e6:	60b8      	str	r0, [r7, #8]
        vstr->alloc = new_alloc;
    14e8:	687b      	ldr	r3, [r7, #4]
    14ea:	68fa      	ldr	r2, [r7, #12]
    14ec:	601a      	str	r2, [r3, #0]
        vstr->buf = new_buf;
    14ee:	687b      	ldr	r3, [r7, #4]
    14f0:	68ba      	ldr	r2, [r7, #8]
    14f2:	609a      	str	r2, [r3, #8]
    }
}
    14f4:	bf00      	nop
    14f6:	3710      	adds	r7, #16
    14f8:	46bd      	mov	sp, r7
    14fa:	bd80      	pop	{r7, pc}
    14fc:	000203f4 	.word	0x000203f4

00001500 <vstr_hint_size>:

void vstr_hint_size(vstr_t *vstr, size_t size) {
    1500:	b580      	push	{r7, lr}
    1502:	b082      	sub	sp, #8
    1504:	af00      	add	r7, sp, #0
    1506:	6078      	str	r0, [r7, #4]
    1508:	6039      	str	r1, [r7, #0]
    vstr_ensure_extra(vstr, size);
    150a:	6839      	ldr	r1, [r7, #0]
    150c:	6878      	ldr	r0, [r7, #4]
    150e:	f7ff ffc3 	bl	1498 <vstr_ensure_extra>
}
    1512:	bf00      	nop
    1514:	3708      	adds	r7, #8
    1516:	46bd      	mov	sp, r7
    1518:	bd80      	pop	{r7, pc}

0000151a <vstr_add_len>:

char *vstr_add_len(vstr_t *vstr, size_t len) {
    151a:	b580      	push	{r7, lr}
    151c:	b084      	sub	sp, #16
    151e:	af00      	add	r7, sp, #0
    1520:	6078      	str	r0, [r7, #4]
    1522:	6039      	str	r1, [r7, #0]
    vstr_ensure_extra(vstr, len);
    1524:	6839      	ldr	r1, [r7, #0]
    1526:	6878      	ldr	r0, [r7, #4]
    1528:	f7ff ffb6 	bl	1498 <vstr_ensure_extra>
    char *buf = vstr->buf + vstr->len;
    152c:	687b      	ldr	r3, [r7, #4]
    152e:	689a      	ldr	r2, [r3, #8]
    1530:	687b      	ldr	r3, [r7, #4]
    1532:	685b      	ldr	r3, [r3, #4]
    1534:	4413      	add	r3, r2
    1536:	60fb      	str	r3, [r7, #12]
    vstr->len += len;
    1538:	687b      	ldr	r3, [r7, #4]
    153a:	685a      	ldr	r2, [r3, #4]
    153c:	683b      	ldr	r3, [r7, #0]
    153e:	441a      	add	r2, r3
    1540:	687b      	ldr	r3, [r7, #4]
    1542:	605a      	str	r2, [r3, #4]
    return buf;
    1544:	68fb      	ldr	r3, [r7, #12]
}
    1546:	4618      	mov	r0, r3
    1548:	3710      	adds	r7, #16
    154a:	46bd      	mov	sp, r7
    154c:	bd80      	pop	{r7, pc}

0000154e <vstr_null_terminated_str>:

// Doesn't increase len, just makes sure there is a null byte at the end
char *vstr_null_terminated_str(vstr_t *vstr) {
    154e:	b580      	push	{r7, lr}
    1550:	b082      	sub	sp, #8
    1552:	af00      	add	r7, sp, #0
    1554:	6078      	str	r0, [r7, #4]
    // If there's no more room, add single byte
    if (vstr->alloc == vstr->len) {
    1556:	687b      	ldr	r3, [r7, #4]
    1558:	681a      	ldr	r2, [r3, #0]
    155a:	687b      	ldr	r3, [r7, #4]
    155c:	685b      	ldr	r3, [r3, #4]
    155e:	429a      	cmp	r2, r3
    1560:	d103      	bne.n	156a <vstr_null_terminated_str+0x1c>
        vstr_extend(vstr, 1);
    1562:	2101      	movs	r1, #1
    1564:	6878      	ldr	r0, [r7, #4]
    1566:	f7ff ff67 	bl	1438 <vstr_extend>
    }
    vstr->buf[vstr->len] = '\0';
    156a:	687b      	ldr	r3, [r7, #4]
    156c:	689a      	ldr	r2, [r3, #8]
    156e:	687b      	ldr	r3, [r7, #4]
    1570:	685b      	ldr	r3, [r3, #4]
    1572:	4413      	add	r3, r2
    1574:	2200      	movs	r2, #0
    1576:	701a      	strb	r2, [r3, #0]
    return vstr->buf;
    1578:	687b      	ldr	r3, [r7, #4]
    157a:	689b      	ldr	r3, [r3, #8]
}
    157c:	4618      	mov	r0, r3
    157e:	3708      	adds	r7, #8
    1580:	46bd      	mov	sp, r7
    1582:	bd80      	pop	{r7, pc}

00001584 <vstr_add_byte>:

void vstr_add_byte(vstr_t *vstr, byte b) {
    1584:	b580      	push	{r7, lr}
    1586:	b084      	sub	sp, #16
    1588:	af00      	add	r7, sp, #0
    158a:	6078      	str	r0, [r7, #4]
    158c:	460b      	mov	r3, r1
    158e:	70fb      	strb	r3, [r7, #3]
    byte *buf = (byte*)vstr_add_len(vstr, 1);
    1590:	2101      	movs	r1, #1
    1592:	6878      	ldr	r0, [r7, #4]
    1594:	f7ff ffc1 	bl	151a <vstr_add_len>
    1598:	60f8      	str	r0, [r7, #12]
    buf[0] = b;
    159a:	68fb      	ldr	r3, [r7, #12]
    159c:	78fa      	ldrb	r2, [r7, #3]
    159e:	701a      	strb	r2, [r3, #0]
}
    15a0:	bf00      	nop
    15a2:	3710      	adds	r7, #16
    15a4:	46bd      	mov	sp, r7
    15a6:	bd80      	pop	{r7, pc}

000015a8 <vstr_add_char>:

void vstr_add_char(vstr_t *vstr, unichar c) {
    15a8:	b580      	push	{r7, lr}
    15aa:	b082      	sub	sp, #8
    15ac:	af00      	add	r7, sp, #0
    15ae:	6078      	str	r0, [r7, #4]
    15b0:	6039      	str	r1, [r7, #0]
        buf[1] = ((c >> 12) & 0x3F) | 0x80;
        buf[2] = ((c >> 6) & 0x3F) | 0x80;
        buf[3] = (c & 0x3F) | 0x80;
    }
#else
    vstr_add_byte(vstr, c);
    15b2:	683b      	ldr	r3, [r7, #0]
    15b4:	b2db      	uxtb	r3, r3
    15b6:	4619      	mov	r1, r3
    15b8:	6878      	ldr	r0, [r7, #4]
    15ba:	f7ff ffe3 	bl	1584 <vstr_add_byte>
#endif
}
    15be:	bf00      	nop
    15c0:	3708      	adds	r7, #8
    15c2:	46bd      	mov	sp, r7
    15c4:	bd80      	pop	{r7, pc}

000015c6 <vstr_add_str>:

void vstr_add_str(vstr_t *vstr, const char *str) {
    15c6:	b580      	push	{r7, lr}
    15c8:	b082      	sub	sp, #8
    15ca:	af00      	add	r7, sp, #0
    15cc:	6078      	str	r0, [r7, #4]
    15ce:	6039      	str	r1, [r7, #0]
    vstr_add_strn(vstr, str, strlen(str));
    15d0:	6838      	ldr	r0, [r7, #0]
    15d2:	f01a fb2d 	bl	1bc30 <strlen>
    15d6:	4603      	mov	r3, r0
    15d8:	461a      	mov	r2, r3
    15da:	6839      	ldr	r1, [r7, #0]
    15dc:	6878      	ldr	r0, [r7, #4]
    15de:	f000 f804 	bl	15ea <vstr_add_strn>
}
    15e2:	bf00      	nop
    15e4:	3708      	adds	r7, #8
    15e6:	46bd      	mov	sp, r7
    15e8:	bd80      	pop	{r7, pc}

000015ea <vstr_add_strn>:

void vstr_add_strn(vstr_t *vstr, const char *str, size_t len) {
    15ea:	b580      	push	{r7, lr}
    15ec:	b084      	sub	sp, #16
    15ee:	af00      	add	r7, sp, #0
    15f0:	60f8      	str	r0, [r7, #12]
    15f2:	60b9      	str	r1, [r7, #8]
    15f4:	607a      	str	r2, [r7, #4]
    vstr_ensure_extra(vstr, len);
    15f6:	6879      	ldr	r1, [r7, #4]
    15f8:	68f8      	ldr	r0, [r7, #12]
    15fa:	f7ff ff4d 	bl	1498 <vstr_ensure_extra>
    memmove(vstr->buf + vstr->len, str, len);
    15fe:	68fb      	ldr	r3, [r7, #12]
    1600:	689a      	ldr	r2, [r3, #8]
    1602:	68fb      	ldr	r3, [r7, #12]
    1604:	685b      	ldr	r3, [r3, #4]
    1606:	4413      	add	r3, r2
    1608:	687a      	ldr	r2, [r7, #4]
    160a:	68b9      	ldr	r1, [r7, #8]
    160c:	4618      	mov	r0, r3
    160e:	f01a fa3e 	bl	1ba8e <memmove>
    vstr->len += len;
    1612:	68fb      	ldr	r3, [r7, #12]
    1614:	685a      	ldr	r2, [r3, #4]
    1616:	687b      	ldr	r3, [r7, #4]
    1618:	441a      	add	r2, r3
    161a:	68fb      	ldr	r3, [r7, #12]
    161c:	605a      	str	r2, [r3, #4]
}
    161e:	bf00      	nop
    1620:	3710      	adds	r7, #16
    1622:	46bd      	mov	sp, r7
    1624:	bd80      	pop	{r7, pc}

00001626 <vstr_ins_blank_bytes>:

STATIC char *vstr_ins_blank_bytes(vstr_t *vstr, size_t byte_pos, size_t byte_len) {
    1626:	b580      	push	{r7, lr}
    1628:	b086      	sub	sp, #24
    162a:	af00      	add	r7, sp, #0
    162c:	60f8      	str	r0, [r7, #12]
    162e:	60b9      	str	r1, [r7, #8]
    1630:	607a      	str	r2, [r7, #4]
    size_t l = vstr->len;
    1632:	68fb      	ldr	r3, [r7, #12]
    1634:	685b      	ldr	r3, [r3, #4]
    1636:	617b      	str	r3, [r7, #20]
    if (byte_pos > l) {
    1638:	68ba      	ldr	r2, [r7, #8]
    163a:	697b      	ldr	r3, [r7, #20]
    163c:	429a      	cmp	r2, r3
    163e:	d901      	bls.n	1644 <vstr_ins_blank_bytes+0x1e>
        byte_pos = l;
    1640:	697b      	ldr	r3, [r7, #20]
    1642:	60bb      	str	r3, [r7, #8]
    }
    if (byte_len > 0) {
    1644:	687b      	ldr	r3, [r7, #4]
    1646:	2b00      	cmp	r3, #0
    1648:	d019      	beq.n	167e <vstr_ins_blank_bytes+0x58>
        // ensure room for the new bytes
        vstr_ensure_extra(vstr, byte_len);
    164a:	6879      	ldr	r1, [r7, #4]
    164c:	68f8      	ldr	r0, [r7, #12]
    164e:	f7ff ff23 	bl	1498 <vstr_ensure_extra>
        // copy up the string to make room for the new bytes
        memmove(vstr->buf + byte_pos + byte_len, vstr->buf + byte_pos, l - byte_pos);
    1652:	68fb      	ldr	r3, [r7, #12]
    1654:	689a      	ldr	r2, [r3, #8]
    1656:	68b9      	ldr	r1, [r7, #8]
    1658:	687b      	ldr	r3, [r7, #4]
    165a:	440b      	add	r3, r1
    165c:	18d0      	adds	r0, r2, r3
    165e:	68fb      	ldr	r3, [r7, #12]
    1660:	689a      	ldr	r2, [r3, #8]
    1662:	68bb      	ldr	r3, [r7, #8]
    1664:	18d1      	adds	r1, r2, r3
    1666:	697a      	ldr	r2, [r7, #20]
    1668:	68bb      	ldr	r3, [r7, #8]
    166a:	1ad3      	subs	r3, r2, r3
    166c:	461a      	mov	r2, r3
    166e:	f01a fa0e 	bl	1ba8e <memmove>
        // increase the length
        vstr->len += byte_len;
    1672:	68fb      	ldr	r3, [r7, #12]
    1674:	685a      	ldr	r2, [r3, #4]
    1676:	687b      	ldr	r3, [r7, #4]
    1678:	441a      	add	r2, r3
    167a:	68fb      	ldr	r3, [r7, #12]
    167c:	605a      	str	r2, [r3, #4]
    }
    return vstr->buf + byte_pos;
    167e:	68fb      	ldr	r3, [r7, #12]
    1680:	689a      	ldr	r2, [r3, #8]
    1682:	68bb      	ldr	r3, [r7, #8]
    1684:	4413      	add	r3, r2
}
    1686:	4618      	mov	r0, r3
    1688:	3718      	adds	r7, #24
    168a:	46bd      	mov	sp, r7
    168c:	bd80      	pop	{r7, pc}

0000168e <vstr_ins_byte>:

void vstr_ins_byte(vstr_t *vstr, size_t byte_pos, byte b) {
    168e:	b580      	push	{r7, lr}
    1690:	b086      	sub	sp, #24
    1692:	af00      	add	r7, sp, #0
    1694:	60f8      	str	r0, [r7, #12]
    1696:	60b9      	str	r1, [r7, #8]
    1698:	4613      	mov	r3, r2
    169a:	71fb      	strb	r3, [r7, #7]
    char *s = vstr_ins_blank_bytes(vstr, byte_pos, 1);
    169c:	2201      	movs	r2, #1
    169e:	68b9      	ldr	r1, [r7, #8]
    16a0:	68f8      	ldr	r0, [r7, #12]
    16a2:	f7ff ffc0 	bl	1626 <vstr_ins_blank_bytes>
    16a6:	6178      	str	r0, [r7, #20]
    *s = b;
    16a8:	697b      	ldr	r3, [r7, #20]
    16aa:	79fa      	ldrb	r2, [r7, #7]
    16ac:	701a      	strb	r2, [r3, #0]
}
    16ae:	bf00      	nop
    16b0:	3718      	adds	r7, #24
    16b2:	46bd      	mov	sp, r7
    16b4:	bd80      	pop	{r7, pc}

000016b6 <vstr_ins_char>:

void vstr_ins_char(vstr_t *vstr, size_t char_pos, unichar chr) {
    16b6:	b580      	push	{r7, lr}
    16b8:	b086      	sub	sp, #24
    16ba:	af00      	add	r7, sp, #0
    16bc:	60f8      	str	r0, [r7, #12]
    16be:	60b9      	str	r1, [r7, #8]
    16c0:	607a      	str	r2, [r7, #4]
    // TODO UNICODE
    char *s = vstr_ins_blank_bytes(vstr, char_pos, 1);
    16c2:	2201      	movs	r2, #1
    16c4:	68b9      	ldr	r1, [r7, #8]
    16c6:	68f8      	ldr	r0, [r7, #12]
    16c8:	f7ff ffad 	bl	1626 <vstr_ins_blank_bytes>
    16cc:	6178      	str	r0, [r7, #20]
    *s = chr;
    16ce:	687b      	ldr	r3, [r7, #4]
    16d0:	b2da      	uxtb	r2, r3
    16d2:	697b      	ldr	r3, [r7, #20]
    16d4:	701a      	strb	r2, [r3, #0]
}
    16d6:	bf00      	nop
    16d8:	3718      	adds	r7, #24
    16da:	46bd      	mov	sp, r7
    16dc:	bd80      	pop	{r7, pc}

000016de <vstr_cut_head_bytes>:

void vstr_cut_head_bytes(vstr_t *vstr, size_t bytes_to_cut) {
    16de:	b580      	push	{r7, lr}
    16e0:	b082      	sub	sp, #8
    16e2:	af00      	add	r7, sp, #0
    16e4:	6078      	str	r0, [r7, #4]
    16e6:	6039      	str	r1, [r7, #0]
    vstr_cut_out_bytes(vstr, 0, bytes_to_cut);
    16e8:	683a      	ldr	r2, [r7, #0]
    16ea:	2100      	movs	r1, #0
    16ec:	6878      	ldr	r0, [r7, #4]
    16ee:	f000 f81e 	bl	172e <vstr_cut_out_bytes>
}
    16f2:	bf00      	nop
    16f4:	3708      	adds	r7, #8
    16f6:	46bd      	mov	sp, r7
    16f8:	bd80      	pop	{r7, pc}

000016fa <vstr_cut_tail_bytes>:

void vstr_cut_tail_bytes(vstr_t *vstr, size_t len) {
    16fa:	b480      	push	{r7}
    16fc:	b083      	sub	sp, #12
    16fe:	af00      	add	r7, sp, #0
    1700:	6078      	str	r0, [r7, #4]
    1702:	6039      	str	r1, [r7, #0]
    if (len > vstr->len) {
    1704:	687b      	ldr	r3, [r7, #4]
    1706:	685a      	ldr	r2, [r3, #4]
    1708:	683b      	ldr	r3, [r7, #0]
    170a:	429a      	cmp	r2, r3
    170c:	d203      	bcs.n	1716 <vstr_cut_tail_bytes+0x1c>
        vstr->len = 0;
    170e:	687b      	ldr	r3, [r7, #4]
    1710:	2200      	movs	r2, #0
    1712:	605a      	str	r2, [r3, #4]
    } else {
        vstr->len -= len;
    }
}
    1714:	e005      	b.n	1722 <vstr_cut_tail_bytes+0x28>
        vstr->len -= len;
    1716:	687b      	ldr	r3, [r7, #4]
    1718:	685a      	ldr	r2, [r3, #4]
    171a:	683b      	ldr	r3, [r7, #0]
    171c:	1ad2      	subs	r2, r2, r3
    171e:	687b      	ldr	r3, [r7, #4]
    1720:	605a      	str	r2, [r3, #4]
}
    1722:	bf00      	nop
    1724:	370c      	adds	r7, #12
    1726:	46bd      	mov	sp, r7
    1728:	f85d 7b04 	ldr.w	r7, [sp], #4
    172c:	4770      	bx	lr

0000172e <vstr_cut_out_bytes>:

void vstr_cut_out_bytes(vstr_t *vstr, size_t byte_pos, size_t bytes_to_cut) {
    172e:	b580      	push	{r7, lr}
    1730:	b084      	sub	sp, #16
    1732:	af00      	add	r7, sp, #0
    1734:	60f8      	str	r0, [r7, #12]
    1736:	60b9      	str	r1, [r7, #8]
    1738:	607a      	str	r2, [r7, #4]
    if (byte_pos >= vstr->len) {
    173a:	68fb      	ldr	r3, [r7, #12]
    173c:	685a      	ldr	r2, [r3, #4]
    173e:	68bb      	ldr	r3, [r7, #8]
    1740:	429a      	cmp	r2, r3
    1742:	d924      	bls.n	178e <vstr_cut_out_bytes+0x60>
        return;
    } else if (byte_pos + bytes_to_cut >= vstr->len) {
    1744:	68ba      	ldr	r2, [r7, #8]
    1746:	687b      	ldr	r3, [r7, #4]
    1748:	441a      	add	r2, r3
    174a:	68fb      	ldr	r3, [r7, #12]
    174c:	685b      	ldr	r3, [r3, #4]
    174e:	429a      	cmp	r2, r3
    1750:	d303      	bcc.n	175a <vstr_cut_out_bytes+0x2c>
        vstr->len = byte_pos;
    1752:	68fb      	ldr	r3, [r7, #12]
    1754:	68ba      	ldr	r2, [r7, #8]
    1756:	605a      	str	r2, [r3, #4]
    1758:	e01a      	b.n	1790 <vstr_cut_out_bytes+0x62>
    } else {
        memmove(vstr->buf + byte_pos, vstr->buf + byte_pos + bytes_to_cut, vstr->len - byte_pos - bytes_to_cut);
    175a:	68fb      	ldr	r3, [r7, #12]
    175c:	689a      	ldr	r2, [r3, #8]
    175e:	68bb      	ldr	r3, [r7, #8]
    1760:	18d0      	adds	r0, r2, r3
    1762:	68fb      	ldr	r3, [r7, #12]
    1764:	689a      	ldr	r2, [r3, #8]
    1766:	68b9      	ldr	r1, [r7, #8]
    1768:	687b      	ldr	r3, [r7, #4]
    176a:	440b      	add	r3, r1
    176c:	18d1      	adds	r1, r2, r3
    176e:	68fb      	ldr	r3, [r7, #12]
    1770:	685a      	ldr	r2, [r3, #4]
    1772:	68bb      	ldr	r3, [r7, #8]
    1774:	1ad2      	subs	r2, r2, r3
    1776:	687b      	ldr	r3, [r7, #4]
    1778:	1ad3      	subs	r3, r2, r3
    177a:	461a      	mov	r2, r3
    177c:	f01a f987 	bl	1ba8e <memmove>
        vstr->len -= bytes_to_cut;
    1780:	68fb      	ldr	r3, [r7, #12]
    1782:	685a      	ldr	r2, [r3, #4]
    1784:	687b      	ldr	r3, [r7, #4]
    1786:	1ad2      	subs	r2, r2, r3
    1788:	68fb      	ldr	r3, [r7, #12]
    178a:	605a      	str	r2, [r3, #4]
    178c:	e000      	b.n	1790 <vstr_cut_out_bytes+0x62>
        return;
    178e:	bf00      	nop
    }
}
    1790:	3710      	adds	r7, #16
    1792:	46bd      	mov	sp, r7
    1794:	bd80      	pop	{r7, pc}

00001796 <vstr_printf>:

void vstr_printf(vstr_t *vstr, const char *fmt, ...) {
    1796:	b40e      	push	{r1, r2, r3}
    1798:	b580      	push	{r7, lr}
    179a:	b085      	sub	sp, #20
    179c:	af00      	add	r7, sp, #0
    179e:	6078      	str	r0, [r7, #4]
    va_list ap;
    va_start(ap, fmt);
    17a0:	f107 0320 	add.w	r3, r7, #32
    17a4:	60fb      	str	r3, [r7, #12]
    vstr_vprintf(vstr, fmt, ap);
    17a6:	68fa      	ldr	r2, [r7, #12]
    17a8:	69f9      	ldr	r1, [r7, #28]
    17aa:	6878      	ldr	r0, [r7, #4]
    17ac:	f000 f807 	bl	17be <vstr_vprintf>
    va_end(ap);
}
    17b0:	bf00      	nop
    17b2:	3714      	adds	r7, #20
    17b4:	46bd      	mov	sp, r7
    17b6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
    17ba:	b003      	add	sp, #12
    17bc:	4770      	bx	lr

000017be <vstr_vprintf>:

void vstr_vprintf(vstr_t *vstr, const char *fmt, va_list ap) {
    17be:	b580      	push	{r7, lr}
    17c0:	b086      	sub	sp, #24
    17c2:	af00      	add	r7, sp, #0
    17c4:	60f8      	str	r0, [r7, #12]
    17c6:	60b9      	str	r1, [r7, #8]
    17c8:	607a      	str	r2, [r7, #4]
    mp_print_t print = {vstr, (mp_print_strn_t)vstr_add_strn};
    17ca:	68fb      	ldr	r3, [r7, #12]
    17cc:	613b      	str	r3, [r7, #16]
    17ce:	4b06      	ldr	r3, [pc, #24]	; (17e8 <vstr_vprintf+0x2a>)
    17d0:	617b      	str	r3, [r7, #20]
    mp_vprintf(&print, fmt, ap);
    17d2:	f107 0310 	add.w	r3, r7, #16
    17d6:	687a      	ldr	r2, [r7, #4]
    17d8:	68b9      	ldr	r1, [r7, #8]
    17da:	4618      	mov	r0, r3
    17dc:	f000 fb60 	bl	1ea0 <mp_vprintf>
}
    17e0:	bf00      	nop
    17e2:	3718      	adds	r7, #24
    17e4:	46bd      	mov	sp, r7
    17e6:	bd80      	pop	{r7, pc}
    17e8:	000015eb 	.word	0x000015eb

000017ec <MP_OBJ_IS_SMALL_INT>:
// unpack small ints, qstrs and full object pointers.

#if MICROPY_OBJ_REPR == MICROPY_OBJ_REPR_A

static inline bool MP_OBJ_IS_SMALL_INT(mp_const_obj_t o)
    { return ((((mp_int_t)(o)) & 1) != 0); }
    17ec:	b480      	push	{r7}
    17ee:	b083      	sub	sp, #12
    17f0:	af00      	add	r7, sp, #0
    17f2:	6078      	str	r0, [r7, #4]
    17f4:	687b      	ldr	r3, [r7, #4]
    17f6:	f003 0301 	and.w	r3, r3, #1
    17fa:	2b00      	cmp	r3, #0
    17fc:	bf14      	ite	ne
    17fe:	2301      	movne	r3, #1
    1800:	2300      	moveq	r3, #0
    1802:	b2db      	uxtb	r3, r3
    1804:	4618      	mov	r0, r3
    1806:	370c      	adds	r7, #12
    1808:	46bd      	mov	sp, r7
    180a:	f85d 7b04 	ldr.w	r7, [sp], #4
    180e:	4770      	bx	lr

00001810 <MP_OBJ_IS_OBJ>:
mp_float_t mp_obj_float_get(mp_obj_t self_in);
mp_obj_t mp_obj_new_float(mp_float_t value);
#endif

static inline bool MP_OBJ_IS_OBJ(mp_const_obj_t o)
    { return ((((mp_int_t)(o)) & 3) == 0); }
    1810:	b480      	push	{r7}
    1812:	b083      	sub	sp, #12
    1814:	af00      	add	r7, sp, #0
    1816:	6078      	str	r0, [r7, #4]
    1818:	687b      	ldr	r3, [r7, #4]
    181a:	f003 0303 	and.w	r3, r3, #3
    181e:	2b00      	cmp	r3, #0
    1820:	bf0c      	ite	eq
    1822:	2301      	moveq	r3, #1
    1824:	2300      	movne	r3, #0
    1826:	b2db      	uxtb	r3, r3
    1828:	4618      	mov	r0, r3
    182a:	370c      	adds	r7, #12
    182c:	46bd      	mov	sp, r7
    182e:	f85d 7b04 	ldr.w	r7, [sp], #4
    1832:	4770      	bx	lr

00001834 <plat_print_strn>:
#endif

static const char pad_spaces[] = "                ";
static const char pad_zeroes[] = "0000000000000000";

STATIC void plat_print_strn(void *env, const char *str, size_t len) {
    1834:	b580      	push	{r7, lr}
    1836:	b084      	sub	sp, #16
    1838:	af00      	add	r7, sp, #0
    183a:	60f8      	str	r0, [r7, #12]
    183c:	60b9      	str	r1, [r7, #8]
    183e:	607a      	str	r2, [r7, #4]
    (void)env;
    MP_PLAT_PRINT_STRN(str, len);
    1840:	6879      	ldr	r1, [r7, #4]
    1842:	68b8      	ldr	r0, [r7, #8]
    1844:	f019 fe08 	bl	1b458 <mp_hal_stdout_tx_strn_cooked>
}
    1848:	bf00      	nop
    184a:	3710      	adds	r7, #16
    184c:	46bd      	mov	sp, r7
    184e:	bd80      	pop	{r7, pc}

00001850 <mp_print_str>:

const mp_print_t mp_plat_print = {NULL, plat_print_strn};

int mp_print_str(const mp_print_t *print, const char *str) {
    1850:	b580      	push	{r7, lr}
    1852:	b084      	sub	sp, #16
    1854:	af00      	add	r7, sp, #0
    1856:	6078      	str	r0, [r7, #4]
    1858:	6039      	str	r1, [r7, #0]
    size_t len = strlen(str);
    185a:	6838      	ldr	r0, [r7, #0]
    185c:	f01a f9e8 	bl	1bc30 <strlen>
    1860:	60f8      	str	r0, [r7, #12]
    if (len) {
    1862:	68fb      	ldr	r3, [r7, #12]
    1864:	2b00      	cmp	r3, #0
    1866:	d006      	beq.n	1876 <mp_print_str+0x26>
        print->print_strn(print->data, str, len);
    1868:	687b      	ldr	r3, [r7, #4]
    186a:	685b      	ldr	r3, [r3, #4]
    186c:	687a      	ldr	r2, [r7, #4]
    186e:	6810      	ldr	r0, [r2, #0]
    1870:	68fa      	ldr	r2, [r7, #12]
    1872:	6839      	ldr	r1, [r7, #0]
    1874:	4798      	blx	r3
    }
    return len;
    1876:	68fb      	ldr	r3, [r7, #12]
}
    1878:	4618      	mov	r0, r3
    187a:	3710      	adds	r7, #16
    187c:	46bd      	mov	sp, r7
    187e:	bd80      	pop	{r7, pc}

00001880 <mp_print_strn>:

int mp_print_strn(const mp_print_t *print, const char *str, size_t len, int flags, char fill, int width) {
    1880:	b580      	push	{r7, lr}
    1882:	b08c      	sub	sp, #48	; 0x30
    1884:	af00      	add	r7, sp, #0
    1886:	60f8      	str	r0, [r7, #12]
    1888:	60b9      	str	r1, [r7, #8]
    188a:	607a      	str	r2, [r7, #4]
    188c:	603b      	str	r3, [r7, #0]
    int left_pad = 0;
    188e:	2300      	movs	r3, #0
    1890:	62fb      	str	r3, [r7, #44]	; 0x2c
    int right_pad = 0;
    1892:	2300      	movs	r3, #0
    1894:	62bb      	str	r3, [r7, #40]	; 0x28
    int pad = width - len;
    1896:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    1898:	687b      	ldr	r3, [r7, #4]
    189a:	1ad3      	subs	r3, r2, r3
    189c:	613b      	str	r3, [r7, #16]
    int pad_size;
    int total_chars_printed = 0;
    189e:	2300      	movs	r3, #0
    18a0:	623b      	str	r3, [r7, #32]
    const char *pad_chars;

    if (!fill || fill == ' ') {
    18a2:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
    18a6:	2b00      	cmp	r3, #0
    18a8:	d003      	beq.n	18b2 <mp_print_strn+0x32>
    18aa:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
    18ae:	2b20      	cmp	r3, #32
    18b0:	d104      	bne.n	18bc <mp_print_strn+0x3c>
        pad_chars = pad_spaces;
    18b2:	4b3d      	ldr	r3, [pc, #244]	; (19a8 <mp_print_strn+0x128>)
    18b4:	61fb      	str	r3, [r7, #28]
        pad_size = sizeof(pad_spaces) - 1;
    18b6:	2310      	movs	r3, #16
    18b8:	627b      	str	r3, [r7, #36]	; 0x24
    18ba:	e00d      	b.n	18d8 <mp_print_strn+0x58>
    } else if (fill == '0') {
    18bc:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
    18c0:	2b30      	cmp	r3, #48	; 0x30
    18c2:	d104      	bne.n	18ce <mp_print_strn+0x4e>
        pad_chars = pad_zeroes;
    18c4:	4b39      	ldr	r3, [pc, #228]	; (19ac <mp_print_strn+0x12c>)
    18c6:	61fb      	str	r3, [r7, #28]
        pad_size = sizeof(pad_zeroes) - 1;
    18c8:	2310      	movs	r3, #16
    18ca:	627b      	str	r3, [r7, #36]	; 0x24
    18cc:	e004      	b.n	18d8 <mp_print_strn+0x58>
    } else {
        // Other pad characters are fairly unusual, so we'll take the hit
        // and output them 1 at a time.
        pad_chars = &fill;
    18ce:	f107 0338 	add.w	r3, r7, #56	; 0x38
    18d2:	61fb      	str	r3, [r7, #28]
        pad_size = 1;
    18d4:	2301      	movs	r3, #1
    18d6:	627b      	str	r3, [r7, #36]	; 0x24
    }

    if (flags & PF_FLAG_CENTER_ADJUST) {
    18d8:	683b      	ldr	r3, [r7, #0]
    18da:	f003 0380 	and.w	r3, r3, #128	; 0x80
    18de:	2b00      	cmp	r3, #0
    18e0:	d009      	beq.n	18f6 <mp_print_strn+0x76>
        left_pad = pad / 2;
    18e2:	693b      	ldr	r3, [r7, #16]
    18e4:	0fda      	lsrs	r2, r3, #31
    18e6:	4413      	add	r3, r2
    18e8:	105b      	asrs	r3, r3, #1
    18ea:	62fb      	str	r3, [r7, #44]	; 0x2c
        right_pad = pad - left_pad;
    18ec:	693a      	ldr	r2, [r7, #16]
    18ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    18f0:	1ad3      	subs	r3, r2, r3
    18f2:	62bb      	str	r3, [r7, #40]	; 0x28
    18f4:	e009      	b.n	190a <mp_print_strn+0x8a>
    } else if (flags & PF_FLAG_LEFT_ADJUST) {
    18f6:	683b      	ldr	r3, [r7, #0]
    18f8:	f003 0301 	and.w	r3, r3, #1
    18fc:	2b00      	cmp	r3, #0
    18fe:	d002      	beq.n	1906 <mp_print_strn+0x86>
        right_pad = pad;
    1900:	693b      	ldr	r3, [r7, #16]
    1902:	62bb      	str	r3, [r7, #40]	; 0x28
    1904:	e001      	b.n	190a <mp_print_strn+0x8a>
    } else {
        left_pad = pad;
    1906:	693b      	ldr	r3, [r7, #16]
    1908:	62fb      	str	r3, [r7, #44]	; 0x2c
    }

    if (left_pad > 0) {
    190a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    190c:	2b00      	cmp	r3, #0
    190e:	dd1a      	ble.n	1946 <mp_print_strn+0xc6>
        total_chars_printed += left_pad;
    1910:	6a3a      	ldr	r2, [r7, #32]
    1912:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1914:	4413      	add	r3, r2
    1916:	623b      	str	r3, [r7, #32]
        while (left_pad > 0) {
    1918:	e012      	b.n	1940 <mp_print_strn+0xc0>
            int p = left_pad;
    191a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    191c:	61bb      	str	r3, [r7, #24]
            if (p > pad_size) {
    191e:	69ba      	ldr	r2, [r7, #24]
    1920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1922:	429a      	cmp	r2, r3
    1924:	dd01      	ble.n	192a <mp_print_strn+0xaa>
                p = pad_size;
    1926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1928:	61bb      	str	r3, [r7, #24]
            }
            print->print_strn(print->data, pad_chars, p);
    192a:	68fb      	ldr	r3, [r7, #12]
    192c:	685b      	ldr	r3, [r3, #4]
    192e:	68fa      	ldr	r2, [r7, #12]
    1930:	6810      	ldr	r0, [r2, #0]
    1932:	69ba      	ldr	r2, [r7, #24]
    1934:	69f9      	ldr	r1, [r7, #28]
    1936:	4798      	blx	r3
            left_pad -= p;
    1938:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    193a:	69bb      	ldr	r3, [r7, #24]
    193c:	1ad3      	subs	r3, r2, r3
    193e:	62fb      	str	r3, [r7, #44]	; 0x2c
        while (left_pad > 0) {
    1940:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1942:	2b00      	cmp	r3, #0
    1944:	dce9      	bgt.n	191a <mp_print_strn+0x9a>
        }
    }
    if (len) {
    1946:	687b      	ldr	r3, [r7, #4]
    1948:	2b00      	cmp	r3, #0
    194a:	d00a      	beq.n	1962 <mp_print_strn+0xe2>
        print->print_strn(print->data, str, len);
    194c:	68fb      	ldr	r3, [r7, #12]
    194e:	685b      	ldr	r3, [r3, #4]
    1950:	68fa      	ldr	r2, [r7, #12]
    1952:	6810      	ldr	r0, [r2, #0]
    1954:	687a      	ldr	r2, [r7, #4]
    1956:	68b9      	ldr	r1, [r7, #8]
    1958:	4798      	blx	r3
        total_chars_printed += len;
    195a:	6a3a      	ldr	r2, [r7, #32]
    195c:	687b      	ldr	r3, [r7, #4]
    195e:	4413      	add	r3, r2
    1960:	623b      	str	r3, [r7, #32]
    }
    if (right_pad > 0) {
    1962:	6abb      	ldr	r3, [r7, #40]	; 0x28
    1964:	2b00      	cmp	r3, #0
    1966:	dd1a      	ble.n	199e <mp_print_strn+0x11e>
        total_chars_printed += right_pad;
    1968:	6a3a      	ldr	r2, [r7, #32]
    196a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    196c:	4413      	add	r3, r2
    196e:	623b      	str	r3, [r7, #32]
        while (right_pad > 0) {
    1970:	e012      	b.n	1998 <mp_print_strn+0x118>
            int p = right_pad;
    1972:	6abb      	ldr	r3, [r7, #40]	; 0x28
    1974:	617b      	str	r3, [r7, #20]
            if (p > pad_size) {
    1976:	697a      	ldr	r2, [r7, #20]
    1978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    197a:	429a      	cmp	r2, r3
    197c:	dd01      	ble.n	1982 <mp_print_strn+0x102>
                p = pad_size;
    197e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1980:	617b      	str	r3, [r7, #20]
            }
            print->print_strn(print->data, pad_chars, p);
    1982:	68fb      	ldr	r3, [r7, #12]
    1984:	685b      	ldr	r3, [r3, #4]
    1986:	68fa      	ldr	r2, [r7, #12]
    1988:	6810      	ldr	r0, [r2, #0]
    198a:	697a      	ldr	r2, [r7, #20]
    198c:	69f9      	ldr	r1, [r7, #28]
    198e:	4798      	blx	r3
            right_pad -= p;
    1990:	6aba      	ldr	r2, [r7, #40]	; 0x28
    1992:	697b      	ldr	r3, [r7, #20]
    1994:	1ad3      	subs	r3, r2, r3
    1996:	62bb      	str	r3, [r7, #40]	; 0x28
        while (right_pad > 0) {
    1998:	6abb      	ldr	r3, [r7, #40]	; 0x28
    199a:	2b00      	cmp	r3, #0
    199c:	dce9      	bgt.n	1972 <mp_print_strn+0xf2>
        }
    }
    return total_chars_printed;
    199e:	6a3b      	ldr	r3, [r7, #32]
}
    19a0:	4618      	mov	r0, r3
    19a2:	3730      	adds	r7, #48	; 0x30
    19a4:	46bd      	mov	sp, r7
    19a6:	bd80      	pop	{r7, pc}
    19a8:	0001d584 	.word	0x0001d584
    19ac:	0001d598 	.word	0x0001d598

000019b0 <mp_print_int>:
// print the prefix of a non-base-10 number, so we don't need code for this.
#define SUPPORT_INT_BASE_PREFIX (0)

// This function is used exclusively by mp_vprintf to format ints.
// It needs to be a separate function to mp_print_mp_int, since converting to a mp_int looses the MSB.
STATIC int mp_print_int(const mp_print_t *print, mp_uint_t x, int sgn, int base, int base_char, int flags, char fill, int width) {
    19b0:	b580      	push	{r7, lr}
    19b2:	b08e      	sub	sp, #56	; 0x38
    19b4:	af02      	add	r7, sp, #8
    19b6:	60f8      	str	r0, [r7, #12]
    19b8:	60b9      	str	r1, [r7, #8]
    19ba:	607a      	str	r2, [r7, #4]
    19bc:	603b      	str	r3, [r7, #0]
    char sign = 0;
    19be:	2300      	movs	r3, #0
    19c0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    if (sgn) {
    19c4:	687b      	ldr	r3, [r7, #4]
    19c6:	2b00      	cmp	r3, #0
    19c8:	d01a      	beq.n	1a00 <mp_print_int+0x50>
        if ((mp_int_t)x < 0) {
    19ca:	68bb      	ldr	r3, [r7, #8]
    19cc:	2b00      	cmp	r3, #0
    19ce:	da06      	bge.n	19de <mp_print_int+0x2e>
            sign = '-';
    19d0:	232d      	movs	r3, #45	; 0x2d
    19d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            x = -x;
    19d6:	68bb      	ldr	r3, [r7, #8]
    19d8:	425b      	negs	r3, r3
    19da:	60bb      	str	r3, [r7, #8]
    19dc:	e010      	b.n	1a00 <mp_print_int+0x50>
        } else if (flags & PF_FLAG_SHOW_SIGN) {
    19de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    19e0:	f003 0302 	and.w	r3, r3, #2
    19e4:	2b00      	cmp	r3, #0
    19e6:	d003      	beq.n	19f0 <mp_print_int+0x40>
            sign = '+';
    19e8:	232b      	movs	r3, #43	; 0x2b
    19ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    19ee:	e007      	b.n	1a00 <mp_print_int+0x50>
        } else if (flags & PF_FLAG_SPACE_SIGN) {
    19f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    19f2:	f003 0304 	and.w	r3, r3, #4
    19f6:	2b00      	cmp	r3, #0
    19f8:	d002      	beq.n	1a00 <mp_print_int+0x50>
            sign = ' ';
    19fa:	2320      	movs	r3, #32
    19fc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        }
    }

    char buf[INT_BUF_SIZE];
    char *b = buf + INT_BUF_SIZE;
    1a00:	f107 0310 	add.w	r3, r7, #16
    1a04:	3310      	adds	r3, #16
    1a06:	62fb      	str	r3, [r7, #44]	; 0x2c

    if (x == 0) {
    1a08:	68bb      	ldr	r3, [r7, #8]
    1a0a:	2b00      	cmp	r3, #0
    1a0c:	d106      	bne.n	1a1c <mp_print_int+0x6c>
        *(--b) = '0';
    1a0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1a10:	3b01      	subs	r3, #1
    1a12:	62fb      	str	r3, [r7, #44]	; 0x2c
    1a14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1a16:	2230      	movs	r2, #48	; 0x30
    1a18:	701a      	strb	r2, [r3, #0]
    1a1a:	e027      	b.n	1a6c <mp_print_int+0xbc>
    } else {
        do {
            int c = x % base;
    1a1c:	683a      	ldr	r2, [r7, #0]
    1a1e:	68bb      	ldr	r3, [r7, #8]
    1a20:	fbb3 f1f2 	udiv	r1, r3, r2
    1a24:	fb02 f201 	mul.w	r2, r2, r1
    1a28:	1a9b      	subs	r3, r3, r2
    1a2a:	62bb      	str	r3, [r7, #40]	; 0x28
            x /= base;
    1a2c:	683b      	ldr	r3, [r7, #0]
    1a2e:	68ba      	ldr	r2, [r7, #8]
    1a30:	fbb2 f3f3 	udiv	r3, r2, r3
    1a34:	60bb      	str	r3, [r7, #8]
            if (c >= 10) {
    1a36:	6abb      	ldr	r3, [r7, #40]	; 0x28
    1a38:	2b09      	cmp	r3, #9
    1a3a:	dd05      	ble.n	1a48 <mp_print_int+0x98>
                c += base_char - 10;
    1a3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1a3e:	3b0a      	subs	r3, #10
    1a40:	6aba      	ldr	r2, [r7, #40]	; 0x28
    1a42:	4413      	add	r3, r2
    1a44:	62bb      	str	r3, [r7, #40]	; 0x28
    1a46:	e002      	b.n	1a4e <mp_print_int+0x9e>
            } else {
                c += '0';
    1a48:	6abb      	ldr	r3, [r7, #40]	; 0x28
    1a4a:	3330      	adds	r3, #48	; 0x30
    1a4c:	62bb      	str	r3, [r7, #40]	; 0x28
            }
            *(--b) = c;
    1a4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1a50:	3b01      	subs	r3, #1
    1a52:	62fb      	str	r3, [r7, #44]	; 0x2c
    1a54:	6abb      	ldr	r3, [r7, #40]	; 0x28
    1a56:	b2da      	uxtb	r2, r3
    1a58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1a5a:	701a      	strb	r2, [r3, #0]
        } while (b > buf && x != 0);
    1a5c:	f107 0310 	add.w	r3, r7, #16
    1a60:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    1a62:	429a      	cmp	r2, r3
    1a64:	d902      	bls.n	1a6c <mp_print_int+0xbc>
    1a66:	68bb      	ldr	r3, [r7, #8]
    1a68:	2b00      	cmp	r3, #0
    1a6a:	d1d7      	bne.n	1a1c <mp_print_int+0x6c>
            prefix_char = base_char + 'x' - 'a';
        }
    }
    #endif

    int len = 0;
    1a6c:	2300      	movs	r3, #0
    1a6e:	627b      	str	r3, [r7, #36]	; 0x24
    if (flags & PF_FLAG_PAD_AFTER_SIGN) {
    1a70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1a72:	f003 0340 	and.w	r3, r3, #64	; 0x40
    1a76:	2b00      	cmp	r3, #0
    1a78:	d017      	beq.n	1aaa <mp_print_int+0xfa>
        if (sign) {
    1a7a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
    1a7e:	2b00      	cmp	r3, #0
    1a80:	d023      	beq.n	1aca <mp_print_int+0x11a>
            len += mp_print_strn(print, &sign, 1, flags, fill, 1);
    1a82:	f107 0123 	add.w	r1, r7, #35	; 0x23
    1a86:	2301      	movs	r3, #1
    1a88:	9301      	str	r3, [sp, #4]
    1a8a:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
    1a8e:	9300      	str	r3, [sp, #0]
    1a90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1a92:	2201      	movs	r2, #1
    1a94:	68f8      	ldr	r0, [r7, #12]
    1a96:	f7ff fef3 	bl	1880 <mp_print_strn>
    1a9a:	4602      	mov	r2, r0
    1a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1a9e:	4413      	add	r3, r2
    1aa0:	627b      	str	r3, [r7, #36]	; 0x24
            width--;
    1aa2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    1aa4:	3b01      	subs	r3, #1
    1aa6:	647b      	str	r3, [r7, #68]	; 0x44
    1aa8:	e00f      	b.n	1aca <mp_print_int+0x11a>
        if (prefix_char && b > &buf[1]) {
            *(--b) = prefix_char;
            *(--b) = '0';
        }
        #endif
        if (sign && b > buf) {
    1aaa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
    1aae:	2b00      	cmp	r3, #0
    1ab0:	d00b      	beq.n	1aca <mp_print_int+0x11a>
    1ab2:	f107 0310 	add.w	r3, r7, #16
    1ab6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    1ab8:	429a      	cmp	r2, r3
    1aba:	d906      	bls.n	1aca <mp_print_int+0x11a>
            *(--b) = sign;
    1abc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1abe:	3b01      	subs	r3, #1
    1ac0:	62fb      	str	r3, [r7, #44]	; 0x2c
    1ac2:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
    1ac6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1ac8:	701a      	strb	r2, [r3, #0]
        }
    }

    len += mp_print_strn(print, b, buf + INT_BUF_SIZE - b, flags, fill, width);
    1aca:	f107 0310 	add.w	r3, r7, #16
    1ace:	3310      	adds	r3, #16
    1ad0:	461a      	mov	r2, r3
    1ad2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1ad4:	1ad3      	subs	r3, r2, r3
    1ad6:	461a      	mov	r2, r3
    1ad8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    1ada:	9301      	str	r3, [sp, #4]
    1adc:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
    1ae0:	9300      	str	r3, [sp, #0]
    1ae2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1ae4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
    1ae6:	68f8      	ldr	r0, [r7, #12]
    1ae8:	f7ff feca 	bl	1880 <mp_print_strn>
    1aec:	4602      	mov	r2, r0
    1aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1af0:	4413      	add	r3, r2
    1af2:	627b      	str	r3, [r7, #36]	; 0x24
    return len;
    1af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
    1af6:	4618      	mov	r0, r3
    1af8:	3730      	adds	r7, #48	; 0x30
    1afa:	46bd      	mov	sp, r7
    1afc:	bd80      	pop	{r7, pc}

00001afe <mp_print_mp_int>:

int mp_print_mp_int(const mp_print_t *print, mp_obj_t x, int base, int base_char, int flags, char fill, int width, int prec) {
    1afe:	b590      	push	{r4, r7, lr}
    1b00:	b09b      	sub	sp, #108	; 0x6c
    1b02:	af04      	add	r7, sp, #16
    1b04:	60f8      	str	r0, [r7, #12]
    1b06:	60b9      	str	r1, [r7, #8]
    1b08:	607a      	str	r2, [r7, #4]
    1b0a:	603b      	str	r3, [r7, #0]
    // These are the only values for "base" that are required to be supported by this
    // function, since Python only allows the user to format integers in these bases.
    // If needed this function could be generalised to handle other values.
    assert(base == 2 || base == 8 || base == 10 || base == 16);
    1b0c:	687b      	ldr	r3, [r7, #4]
    1b0e:	2b02      	cmp	r3, #2
    1b10:	d00e      	beq.n	1b30 <mp_print_mp_int+0x32>
    1b12:	687b      	ldr	r3, [r7, #4]
    1b14:	2b08      	cmp	r3, #8
    1b16:	d00b      	beq.n	1b30 <mp_print_mp_int+0x32>
    1b18:	687b      	ldr	r3, [r7, #4]
    1b1a:	2b0a      	cmp	r3, #10
    1b1c:	d008      	beq.n	1b30 <mp_print_mp_int+0x32>
    1b1e:	687b      	ldr	r3, [r7, #4]
    1b20:	2b10      	cmp	r3, #16
    1b22:	d005      	beq.n	1b30 <mp_print_mp_int+0x32>
    1b24:	4b8e      	ldr	r3, [pc, #568]	; (1d60 <mp_print_mp_int+0x262>)
    1b26:	4a8f      	ldr	r2, [pc, #572]	; (1d64 <mp_print_mp_int+0x266>)
    1b28:	21d0      	movs	r1, #208	; 0xd0
    1b2a:	488f      	ldr	r0, [pc, #572]	; (1d68 <mp_print_mp_int+0x26a>)
    1b2c:	f019 fb46 	bl	1b1bc <__assert_func>

    if (!MP_OBJ_IS_INT(x)) {
    1b30:	68b8      	ldr	r0, [r7, #8]
    1b32:	f7ff fe5b 	bl	17ec <MP_OBJ_IS_SMALL_INT>
    1b36:	4603      	mov	r3, r0
    1b38:	f083 0301 	eor.w	r3, r3, #1
    1b3c:	b2db      	uxtb	r3, r3
    1b3e:	2b00      	cmp	r3, #0
    1b40:	d015      	beq.n	1b6e <mp_print_mp_int+0x70>
    1b42:	68b8      	ldr	r0, [r7, #8]
    1b44:	f7ff fe64 	bl	1810 <MP_OBJ_IS_OBJ>
    1b48:	4603      	mov	r3, r0
    1b4a:	f083 0301 	eor.w	r3, r3, #1
    1b4e:	b2db      	uxtb	r3, r3
    1b50:	2b00      	cmp	r3, #0
    1b52:	d104      	bne.n	1b5e <mp_print_mp_int+0x60>
    1b54:	68bb      	ldr	r3, [r7, #8]
    1b56:	681b      	ldr	r3, [r3, #0]
    1b58:	4a84      	ldr	r2, [pc, #528]	; (1d6c <mp_print_mp_int+0x26e>)
    1b5a:	4293      	cmp	r3, r2
    1b5c:	d007      	beq.n	1b6e <mp_print_mp_int+0x70>
        // This will convert booleans to int, or raise an error for
        // non-integer types.
        x = MP_OBJ_NEW_SMALL_INT(mp_obj_get_int(x));
    1b5e:	68b8      	ldr	r0, [r7, #8]
    1b60:	f00b ffd2 	bl	db08 <mp_obj_get_int>
    1b64:	4603      	mov	r3, r0
    1b66:	005b      	lsls	r3, r3, #1
    1b68:	f043 0301 	orr.w	r3, r3, #1
    1b6c:	60bb      	str	r3, [r7, #8]
    }

    if ((flags & (PF_FLAG_LEFT_ADJUST | PF_FLAG_CENTER_ADJUST)) == 0 && fill == '0') {
    1b6e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    1b70:	f003 0381 	and.w	r3, r3, #129	; 0x81
    1b74:	2b00      	cmp	r3, #0
    1b76:	d10b      	bne.n	1b90 <mp_print_mp_int+0x92>
    1b78:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
    1b7c:	2b30      	cmp	r3, #48	; 0x30
    1b7e:	d107      	bne.n	1b90 <mp_print_mp_int+0x92>
        if (prec > width) {
    1b80:	6f7a      	ldr	r2, [r7, #116]	; 0x74
    1b82:	6f3b      	ldr	r3, [r7, #112]	; 0x70
    1b84:	429a      	cmp	r2, r3
    1b86:	dd01      	ble.n	1b8c <mp_print_mp_int+0x8e>
            width = prec;
    1b88:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    1b8a:	673b      	str	r3, [r7, #112]	; 0x70
        }
        prec = 0;
    1b8c:	2300      	movs	r3, #0
    1b8e:	677b      	str	r3, [r7, #116]	; 0x74
    }
    char prefix_buf[4];
    char *prefix = prefix_buf;
    1b90:	f107 0334 	add.w	r3, r7, #52	; 0x34
    1b94:	657b      	str	r3, [r7, #84]	; 0x54

    if (mp_obj_int_sign(x) >= 0) {
    1b96:	68b8      	ldr	r0, [r7, #8]
    1b98:	f00e fdac 	bl	106f4 <mp_obj_int_sign>
    1b9c:	4603      	mov	r3, r0
    1b9e:	2b00      	cmp	r3, #0
    1ba0:	db14      	blt.n	1bcc <mp_print_mp_int+0xce>
        if (flags & PF_FLAG_SHOW_SIGN) {
    1ba2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    1ba4:	f003 0302 	and.w	r3, r3, #2
    1ba8:	2b00      	cmp	r3, #0
    1baa:	d005      	beq.n	1bb8 <mp_print_mp_int+0xba>
            *prefix++ = '+';
    1bac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    1bae:	1c5a      	adds	r2, r3, #1
    1bb0:	657a      	str	r2, [r7, #84]	; 0x54
    1bb2:	222b      	movs	r2, #43	; 0x2b
    1bb4:	701a      	strb	r2, [r3, #0]
    1bb6:	e009      	b.n	1bcc <mp_print_mp_int+0xce>
        } else if (flags & PF_FLAG_SPACE_SIGN) {
    1bb8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    1bba:	f003 0304 	and.w	r3, r3, #4
    1bbe:	2b00      	cmp	r3, #0
    1bc0:	d004      	beq.n	1bcc <mp_print_mp_int+0xce>
            *prefix++ = ' ';
    1bc2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    1bc4:	1c5a      	adds	r2, r3, #1
    1bc6:	657a      	str	r2, [r7, #84]	; 0x54
    1bc8:	2220      	movs	r2, #32
    1bca:	701a      	strb	r2, [r3, #0]
        }
    }

    if (flags & PF_FLAG_SHOW_PREFIX) {
    1bcc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    1bce:	f003 0310 	and.w	r3, r3, #16
    1bd2:	2b00      	cmp	r3, #0
    1bd4:	d036      	beq.n	1c44 <mp_print_mp_int+0x146>
        if (base == 2) {
    1bd6:	687b      	ldr	r3, [r7, #4]
    1bd8:	2b02      	cmp	r3, #2
    1bda:	d10d      	bne.n	1bf8 <mp_print_mp_int+0xfa>
            *prefix++ = '0';
    1bdc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    1bde:	1c5a      	adds	r2, r3, #1
    1be0:	657a      	str	r2, [r7, #84]	; 0x54
    1be2:	2230      	movs	r2, #48	; 0x30
    1be4:	701a      	strb	r2, [r3, #0]
            *prefix++ = base_char + 'b' - 'a';
    1be6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    1be8:	1c5a      	adds	r2, r3, #1
    1bea:	657a      	str	r2, [r7, #84]	; 0x54
    1bec:	683a      	ldr	r2, [r7, #0]
    1bee:	b2d2      	uxtb	r2, r2
    1bf0:	3201      	adds	r2, #1
    1bf2:	b2d2      	uxtb	r2, r2
    1bf4:	701a      	strb	r2, [r3, #0]
    1bf6:	e025      	b.n	1c44 <mp_print_mp_int+0x146>
        } else if (base == 8) {
    1bf8:	687b      	ldr	r3, [r7, #4]
    1bfa:	2b08      	cmp	r3, #8
    1bfc:	d112      	bne.n	1c24 <mp_print_mp_int+0x126>
            *prefix++ = '0';
    1bfe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    1c00:	1c5a      	adds	r2, r3, #1
    1c02:	657a      	str	r2, [r7, #84]	; 0x54
    1c04:	2230      	movs	r2, #48	; 0x30
    1c06:	701a      	strb	r2, [r3, #0]
            if (flags & PF_FLAG_SHOW_OCTAL_LETTER) {
    1c08:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    1c0a:	f403 7300 	and.w	r3, r3, #512	; 0x200
    1c0e:	2b00      	cmp	r3, #0
    1c10:	d018      	beq.n	1c44 <mp_print_mp_int+0x146>
                *prefix++ = base_char + 'o' - 'a';
    1c12:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    1c14:	1c5a      	adds	r2, r3, #1
    1c16:	657a      	str	r2, [r7, #84]	; 0x54
    1c18:	683a      	ldr	r2, [r7, #0]
    1c1a:	b2d2      	uxtb	r2, r2
    1c1c:	320e      	adds	r2, #14
    1c1e:	b2d2      	uxtb	r2, r2
    1c20:	701a      	strb	r2, [r3, #0]
    1c22:	e00f      	b.n	1c44 <mp_print_mp_int+0x146>
            }
        } else if (base == 16) {
    1c24:	687b      	ldr	r3, [r7, #4]
    1c26:	2b10      	cmp	r3, #16
    1c28:	d10c      	bne.n	1c44 <mp_print_mp_int+0x146>
            *prefix++ = '0';
    1c2a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    1c2c:	1c5a      	adds	r2, r3, #1
    1c2e:	657a      	str	r2, [r7, #84]	; 0x54
    1c30:	2230      	movs	r2, #48	; 0x30
    1c32:	701a      	strb	r2, [r3, #0]
            *prefix++ = base_char + 'x' - 'a';
    1c34:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    1c36:	1c5a      	adds	r2, r3, #1
    1c38:	657a      	str	r2, [r7, #84]	; 0x54
    1c3a:	683a      	ldr	r2, [r7, #0]
    1c3c:	b2d2      	uxtb	r2, r2
    1c3e:	3217      	adds	r2, #23
    1c40:	b2d2      	uxtb	r2, r2
    1c42:	701a      	strb	r2, [r3, #0]
        }
    }
    *prefix = '\0';
    1c44:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    1c46:	2200      	movs	r2, #0
    1c48:	701a      	strb	r2, [r3, #0]
    int prefix_len = prefix - prefix_buf;
    1c4a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
    1c4c:	f107 0334 	add.w	r3, r7, #52	; 0x34
    1c50:	1ad3      	subs	r3, r2, r3
    1c52:	63bb      	str	r3, [r7, #56]	; 0x38
    prefix = prefix_buf;
    1c54:	f107 0334 	add.w	r3, r7, #52	; 0x34
    1c58:	657b      	str	r3, [r7, #84]	; 0x54

    char comma = '\0';
    1c5a:	2300      	movs	r3, #0
    1c5c:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
    if (flags & PF_FLAG_SHOW_COMMA) {
    1c60:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    1c62:	f003 0320 	and.w	r3, r3, #32
    1c66:	2b00      	cmp	r3, #0
    1c68:	d002      	beq.n	1c70 <mp_print_mp_int+0x172>
        comma = ',';
    1c6a:	232c      	movs	r3, #44	; 0x2c
    1c6c:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
    }

    // The size of this buffer is rather arbitrary. If it's not large
    // enough, a dynamic one will be allocated.
    char stack_buf[sizeof(mp_int_t) * 4];
    char *buf = stack_buf;
    1c70:	f107 0324 	add.w	r3, r7, #36	; 0x24
    1c74:	623b      	str	r3, [r7, #32]
    size_t buf_size = sizeof(stack_buf);
    1c76:	2310      	movs	r3, #16
    1c78:	61fb      	str	r3, [r7, #28]
    size_t fmt_size = 0;
    1c7a:	2300      	movs	r3, #0
    1c7c:	61bb      	str	r3, [r7, #24]
    char *str;

    if (prec > 1) {
    1c7e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    1c80:	2b01      	cmp	r3, #1
    1c82:	dd03      	ble.n	1c8c <mp_print_mp_int+0x18e>
        flags |= PF_FLAG_PAD_AFTER_SIGN;
    1c84:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    1c86:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    1c8a:	66bb      	str	r3, [r7, #104]	; 0x68
    }
    char sign = '\0';
    1c8c:	2300      	movs	r3, #0
    1c8e:	75fb      	strb	r3, [r7, #23]
    if (flags & PF_FLAG_PAD_AFTER_SIGN) {
    1c90:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    1c92:	f003 0340 	and.w	r3, r3, #64	; 0x40
    1c96:	2b00      	cmp	r3, #0
    1c98:	d021      	beq.n	1cde <mp_print_mp_int+0x1e0>
        // We add the pad in this function, so since the pad goes after
        // the sign & prefix, we format without a prefix
        str = mp_obj_int_formatted(&buf, &buf_size, &fmt_size,
    1c9a:	683b      	ldr	r3, [r7, #0]
    1c9c:	b2db      	uxtb	r3, r3
    1c9e:	f107 0418 	add.w	r4, r7, #24
    1ca2:	f107 011c 	add.w	r1, r7, #28
    1ca6:	f107 0020 	add.w	r0, r7, #32
    1caa:	f897 2053 	ldrb.w	r2, [r7, #83]	; 0x53
    1cae:	9203      	str	r2, [sp, #12]
    1cb0:	9302      	str	r3, [sp, #8]
    1cb2:	2300      	movs	r3, #0
    1cb4:	9301      	str	r3, [sp, #4]
    1cb6:	687b      	ldr	r3, [r7, #4]
    1cb8:	9300      	str	r3, [sp, #0]
    1cba:	68bb      	ldr	r3, [r7, #8]
    1cbc:	4622      	mov	r2, r4
    1cbe:	f00e fc55 	bl	1056c <mp_obj_int_formatted>
    1cc2:	64f8      	str	r0, [r7, #76]	; 0x4c
                                   x, base, NULL, base_char, comma);
        if (*str == '-') {
    1cc4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    1cc6:	781b      	ldrb	r3, [r3, #0]
    1cc8:	2b2d      	cmp	r3, #45	; 0x2d
    1cca:	d11d      	bne.n	1d08 <mp_print_mp_int+0x20a>
            sign = *str++;
    1ccc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    1cce:	1c5a      	adds	r2, r3, #1
    1cd0:	64fa      	str	r2, [r7, #76]	; 0x4c
    1cd2:	781b      	ldrb	r3, [r3, #0]
    1cd4:	75fb      	strb	r3, [r7, #23]
            fmt_size--;
    1cd6:	69bb      	ldr	r3, [r7, #24]
    1cd8:	3b01      	subs	r3, #1
    1cda:	61bb      	str	r3, [r7, #24]
    1cdc:	e014      	b.n	1d08 <mp_print_mp_int+0x20a>
        }
    } else {
        str = mp_obj_int_formatted(&buf, &buf_size, &fmt_size,
    1cde:	683b      	ldr	r3, [r7, #0]
    1ce0:	b2db      	uxtb	r3, r3
    1ce2:	f107 0418 	add.w	r4, r7, #24
    1ce6:	f107 011c 	add.w	r1, r7, #28
    1cea:	f107 0020 	add.w	r0, r7, #32
    1cee:	f897 2053 	ldrb.w	r2, [r7, #83]	; 0x53
    1cf2:	9203      	str	r2, [sp, #12]
    1cf4:	9302      	str	r3, [sp, #8]
    1cf6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    1cf8:	9301      	str	r3, [sp, #4]
    1cfa:	687b      	ldr	r3, [r7, #4]
    1cfc:	9300      	str	r3, [sp, #0]
    1cfe:	68bb      	ldr	r3, [r7, #8]
    1d00:	4622      	mov	r2, r4
    1d02:	f00e fc33 	bl	1056c <mp_obj_int_formatted>
    1d06:	64f8      	str	r0, [r7, #76]	; 0x4c
                                   x, base, prefix, base_char, comma);
    }

    int spaces_before = 0;
    1d08:	2300      	movs	r3, #0
    1d0a:	64bb      	str	r3, [r7, #72]	; 0x48
    int spaces_after = 0;
    1d0c:	2300      	movs	r3, #0
    1d0e:	647b      	str	r3, [r7, #68]	; 0x44

    if (prec > 1) {
    1d10:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    1d12:	2b01      	cmp	r3, #1
    1d14:	dd37      	ble.n	1d86 <mp_print_mp_int+0x288>
        // If prec was specified, then prec specifies the width to zero-pad the
        // the number to. This zero-padded number then gets left or right
        // aligned in width characters.

        int prec_width = fmt_size;  // The digits
    1d16:	69bb      	ldr	r3, [r7, #24]
    1d18:	643b      	str	r3, [r7, #64]	; 0x40
        if (prec_width < prec) {
    1d1a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    1d1c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    1d1e:	429a      	cmp	r2, r3
    1d20:	da01      	bge.n	1d26 <mp_print_mp_int+0x228>
            prec_width = prec;
    1d22:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    1d24:	643b      	str	r3, [r7, #64]	; 0x40
        }
        if (flags & PF_FLAG_PAD_AFTER_SIGN) {
    1d26:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    1d28:	f003 0340 	and.w	r3, r3, #64	; 0x40
    1d2c:	2b00      	cmp	r3, #0
    1d2e:	d009      	beq.n	1d44 <mp_print_mp_int+0x246>
            if (sign) {
    1d30:	7dfb      	ldrb	r3, [r7, #23]
    1d32:	2b00      	cmp	r3, #0
    1d34:	d002      	beq.n	1d3c <mp_print_mp_int+0x23e>
                prec_width++;
    1d36:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    1d38:	3301      	adds	r3, #1
    1d3a:	643b      	str	r3, [r7, #64]	; 0x40
            }
            prec_width += prefix_len;
    1d3c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    1d3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1d40:	4413      	add	r3, r2
    1d42:	643b      	str	r3, [r7, #64]	; 0x40
        }
        if (prec_width < width) {
    1d44:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    1d46:	6f3b      	ldr	r3, [r7, #112]	; 0x70
    1d48:	429a      	cmp	r2, r3
    1d4a:	da15      	bge.n	1d78 <mp_print_mp_int+0x27a>
            if (flags & PF_FLAG_LEFT_ADJUST) {
    1d4c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    1d4e:	f003 0301 	and.w	r3, r3, #1
    1d52:	2b00      	cmp	r3, #0
    1d54:	d00c      	beq.n	1d70 <mp_print_mp_int+0x272>
                spaces_after = width - prec_width;
    1d56:	6f3a      	ldr	r2, [r7, #112]	; 0x70
    1d58:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    1d5a:	1ad3      	subs	r3, r2, r3
    1d5c:	647b      	str	r3, [r7, #68]	; 0x44
    1d5e:	e00b      	b.n	1d78 <mp_print_mp_int+0x27a>
    1d60:	0001d5b4 	.word	0x0001d5b4
    1d64:	0001d640 	.word	0x0001d640
    1d68:	0001d5e8 	.word	0x0001d5e8
    1d6c:	00020d10 	.word	0x00020d10
            } else {
                spaces_before = width - prec_width;
    1d70:	6f3a      	ldr	r2, [r7, #112]	; 0x70
    1d72:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    1d74:	1ad3      	subs	r3, r2, r3
    1d76:	64bb      	str	r3, [r7, #72]	; 0x48
            }
        }
        fill = '0';
    1d78:	2330      	movs	r3, #48	; 0x30
    1d7a:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
        flags &= ~PF_FLAG_LEFT_ADJUST;
    1d7e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    1d80:	f023 0301 	bic.w	r3, r3, #1
    1d84:	66bb      	str	r3, [r7, #104]	; 0x68
    }

    int len = 0;
    1d86:	2300      	movs	r3, #0
    1d88:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (spaces_before) {
    1d8a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    1d8c:	2b00      	cmp	r3, #0
    1d8e:	d00d      	beq.n	1dac <mp_print_mp_int+0x2ae>
        len += mp_print_strn(print, "", 0, 0, ' ', spaces_before);
    1d90:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    1d92:	9301      	str	r3, [sp, #4]
    1d94:	2320      	movs	r3, #32
    1d96:	9300      	str	r3, [sp, #0]
    1d98:	2300      	movs	r3, #0
    1d9a:	2200      	movs	r2, #0
    1d9c:	4934      	ldr	r1, [pc, #208]	; (1e70 <mp_print_mp_int+0x372>)
    1d9e:	68f8      	ldr	r0, [r7, #12]
    1da0:	f7ff fd6e 	bl	1880 <mp_print_strn>
    1da4:	4602      	mov	r2, r0
    1da6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1da8:	4413      	add	r3, r2
    1daa:	63fb      	str	r3, [r7, #60]	; 0x3c
    }
    if (flags & PF_FLAG_PAD_AFTER_SIGN) {
    1dac:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    1dae:	f003 0340 	and.w	r3, r3, #64	; 0x40
    1db2:	2b00      	cmp	r3, #0
    1db4:	d029      	beq.n	1e0a <mp_print_mp_int+0x30c>
        // pad after sign implies pad after prefix as well.
        if (sign) {
    1db6:	7dfb      	ldrb	r3, [r7, #23]
    1db8:	2b00      	cmp	r3, #0
    1dba:	d011      	beq.n	1de0 <mp_print_mp_int+0x2e2>
            len += mp_print_strn(print, &sign, 1, 0, 0, 1);
    1dbc:	f107 0117 	add.w	r1, r7, #23
    1dc0:	2301      	movs	r3, #1
    1dc2:	9301      	str	r3, [sp, #4]
    1dc4:	2300      	movs	r3, #0
    1dc6:	9300      	str	r3, [sp, #0]
    1dc8:	2300      	movs	r3, #0
    1dca:	2201      	movs	r2, #1
    1dcc:	68f8      	ldr	r0, [r7, #12]
    1dce:	f7ff fd57 	bl	1880 <mp_print_strn>
    1dd2:	4602      	mov	r2, r0
    1dd4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1dd6:	4413      	add	r3, r2
    1dd8:	63fb      	str	r3, [r7, #60]	; 0x3c
            width--;
    1dda:	6f3b      	ldr	r3, [r7, #112]	; 0x70
    1ddc:	3b01      	subs	r3, #1
    1dde:	673b      	str	r3, [r7, #112]	; 0x70
        }
        if (prefix_len) {
    1de0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1de2:	2b00      	cmp	r3, #0
    1de4:	d011      	beq.n	1e0a <mp_print_mp_int+0x30c>
            len += mp_print_strn(print, prefix, prefix_len, 0, 0, 1);
    1de6:	6bba      	ldr	r2, [r7, #56]	; 0x38
    1de8:	2301      	movs	r3, #1
    1dea:	9301      	str	r3, [sp, #4]
    1dec:	2300      	movs	r3, #0
    1dee:	9300      	str	r3, [sp, #0]
    1df0:	2300      	movs	r3, #0
    1df2:	6d79      	ldr	r1, [r7, #84]	; 0x54
    1df4:	68f8      	ldr	r0, [r7, #12]
    1df6:	f7ff fd43 	bl	1880 <mp_print_strn>
    1dfa:	4602      	mov	r2, r0
    1dfc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1dfe:	4413      	add	r3, r2
    1e00:	63fb      	str	r3, [r7, #60]	; 0x3c
            width -= prefix_len;
    1e02:	6f3a      	ldr	r2, [r7, #112]	; 0x70
    1e04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1e06:	1ad3      	subs	r3, r2, r3
    1e08:	673b      	str	r3, [r7, #112]	; 0x70
        }
    }
    if (prec > 1) {
    1e0a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    1e0c:	2b01      	cmp	r3, #1
    1e0e:	dd01      	ble.n	1e14 <mp_print_mp_int+0x316>
        width = prec;
    1e10:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    1e12:	673b      	str	r3, [r7, #112]	; 0x70
    }

    len += mp_print_strn(print, str, fmt_size, flags, fill, width);
    1e14:	69ba      	ldr	r2, [r7, #24]
    1e16:	6f3b      	ldr	r3, [r7, #112]	; 0x70
    1e18:	9301      	str	r3, [sp, #4]
    1e1a:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
    1e1e:	9300      	str	r3, [sp, #0]
    1e20:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    1e22:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
    1e24:	68f8      	ldr	r0, [r7, #12]
    1e26:	f7ff fd2b 	bl	1880 <mp_print_strn>
    1e2a:	4602      	mov	r2, r0
    1e2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1e2e:	4413      	add	r3, r2
    1e30:	63fb      	str	r3, [r7, #60]	; 0x3c

    if (spaces_after) {
    1e32:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    1e34:	2b00      	cmp	r3, #0
    1e36:	d00d      	beq.n	1e54 <mp_print_mp_int+0x356>
        len += mp_print_strn(print, "", 0, 0, ' ', spaces_after);
    1e38:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    1e3a:	9301      	str	r3, [sp, #4]
    1e3c:	2320      	movs	r3, #32
    1e3e:	9300      	str	r3, [sp, #0]
    1e40:	2300      	movs	r3, #0
    1e42:	2200      	movs	r2, #0
    1e44:	490a      	ldr	r1, [pc, #40]	; (1e70 <mp_print_mp_int+0x372>)
    1e46:	68f8      	ldr	r0, [r7, #12]
    1e48:	f7ff fd1a 	bl	1880 <mp_print_strn>
    1e4c:	4602      	mov	r2, r0
    1e4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1e50:	4413      	add	r3, r2
    1e52:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

    if (buf != stack_buf) {
    1e54:	6a3a      	ldr	r2, [r7, #32]
    1e56:	f107 0324 	add.w	r3, r7, #36	; 0x24
    1e5a:	429a      	cmp	r2, r3
    1e5c:	d003      	beq.n	1e66 <mp_print_mp_int+0x368>
        m_del(char, buf, buf_size);
    1e5e:	6a3b      	ldr	r3, [r7, #32]
    1e60:	4618      	mov	r0, r3
    1e62:	f7fe fab9 	bl	3d8 <m_free>
    }
    return len;
    1e66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
    1e68:	4618      	mov	r0, r3
    1e6a:	375c      	adds	r7, #92	; 0x5c
    1e6c:	46bd      	mov	sp, r7
    1e6e:	bd90      	pop	{r4, r7, pc}
    1e70:	0001d5fc 	.word	0x0001d5fc

00001e74 <mp_printf>:

    return chrs;
}
#endif

int mp_printf(const mp_print_t *print, const char *fmt, ...) {
    1e74:	b40e      	push	{r1, r2, r3}
    1e76:	b580      	push	{r7, lr}
    1e78:	b085      	sub	sp, #20
    1e7a:	af00      	add	r7, sp, #0
    1e7c:	6078      	str	r0, [r7, #4]
    va_list ap;
    va_start(ap, fmt);
    1e7e:	f107 0320 	add.w	r3, r7, #32
    1e82:	60bb      	str	r3, [r7, #8]
    int ret = mp_vprintf(print, fmt, ap);
    1e84:	68ba      	ldr	r2, [r7, #8]
    1e86:	69f9      	ldr	r1, [r7, #28]
    1e88:	6878      	ldr	r0, [r7, #4]
    1e8a:	f000 f809 	bl	1ea0 <mp_vprintf>
    1e8e:	60f8      	str	r0, [r7, #12]
    va_end(ap);
    return ret;
    1e90:	68fb      	ldr	r3, [r7, #12]
}
    1e92:	4618      	mov	r0, r3
    1e94:	3714      	adds	r7, #20
    1e96:	46bd      	mov	sp, r7
    1e98:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
    1e9c:	b003      	add	sp, #12
    1e9e:	4770      	bx	lr

00001ea0 <mp_vprintf>:

int mp_vprintf(const mp_print_t *print, const char *fmt, va_list args) {
    1ea0:	b580      	push	{r7, lr}
    1ea2:	b096      	sub	sp, #88	; 0x58
    1ea4:	af04      	add	r7, sp, #16
    1ea6:	60f8      	str	r0, [r7, #12]
    1ea8:	60b9      	str	r1, [r7, #8]
    1eaa:	607a      	str	r2, [r7, #4]
    int chrs = 0;
    1eac:	2300      	movs	r3, #0
    1eae:	647b      	str	r3, [r7, #68]	; 0x44
    for (;;) {
        {
            const char *f = fmt;
    1eb0:	68bb      	ldr	r3, [r7, #8]
    1eb2:	643b      	str	r3, [r7, #64]	; 0x40
            while (*f != '\0' && *f != '%') {
    1eb4:	e002      	b.n	1ebc <mp_vprintf+0x1c>
                ++f; // XXX UTF8 advance char
    1eb6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    1eb8:	3301      	adds	r3, #1
    1eba:	643b      	str	r3, [r7, #64]	; 0x40
            while (*f != '\0' && *f != '%') {
    1ebc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    1ebe:	781b      	ldrb	r3, [r3, #0]
    1ec0:	2b00      	cmp	r3, #0
    1ec2:	d003      	beq.n	1ecc <mp_vprintf+0x2c>
    1ec4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    1ec6:	781b      	ldrb	r3, [r3, #0]
    1ec8:	2b25      	cmp	r3, #37	; 0x25
    1eca:	d1f4      	bne.n	1eb6 <mp_vprintf+0x16>
            }
            if (f > fmt) {
    1ecc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    1ece:	68bb      	ldr	r3, [r7, #8]
    1ed0:	429a      	cmp	r2, r3
    1ed2:	d910      	bls.n	1ef6 <mp_vprintf+0x56>
                print->print_strn(print->data, fmt, f - fmt);
    1ed4:	68fb      	ldr	r3, [r7, #12]
    1ed6:	685b      	ldr	r3, [r3, #4]
    1ed8:	68fa      	ldr	r2, [r7, #12]
    1eda:	6810      	ldr	r0, [r2, #0]
    1edc:	6c39      	ldr	r1, [r7, #64]	; 0x40
    1ede:	68ba      	ldr	r2, [r7, #8]
    1ee0:	1a8a      	subs	r2, r1, r2
    1ee2:	68b9      	ldr	r1, [r7, #8]
    1ee4:	4798      	blx	r3
                chrs += f - fmt;
    1ee6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    1ee8:	68bb      	ldr	r3, [r7, #8]
    1eea:	1ad3      	subs	r3, r2, r3
    1eec:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    1eee:	4413      	add	r3, r2
    1ef0:	647b      	str	r3, [r7, #68]	; 0x44
                fmt = f;
    1ef2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    1ef4:	60bb      	str	r3, [r7, #8]
            }
        }

        if (*fmt == '\0') {
    1ef6:	68bb      	ldr	r3, [r7, #8]
    1ef8:	781b      	ldrb	r3, [r3, #0]
    1efa:	2b00      	cmp	r3, #0
    1efc:	f000 8214 	beq.w	2328 <mp_vprintf+0x488>
            break;
        }

        // move past % character
        ++fmt;
    1f00:	68bb      	ldr	r3, [r7, #8]
    1f02:	3301      	adds	r3, #1
    1f04:	60bb      	str	r3, [r7, #8]

        // parse flags, if they exist
        int flags = 0;
    1f06:	2300      	movs	r3, #0
    1f08:	63fb      	str	r3, [r7, #60]	; 0x3c
        char fill = ' ';
    1f0a:	2320      	movs	r3, #32
    1f0c:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
        while (*fmt != '\0') {
    1f10:	e031      	b.n	1f76 <mp_vprintf+0xd6>
            if (*fmt == '-') flags |= PF_FLAG_LEFT_ADJUST;
    1f12:	68bb      	ldr	r3, [r7, #8]
    1f14:	781b      	ldrb	r3, [r3, #0]
    1f16:	2b2d      	cmp	r3, #45	; 0x2d
    1f18:	d104      	bne.n	1f24 <mp_vprintf+0x84>
    1f1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1f1c:	f043 0301 	orr.w	r3, r3, #1
    1f20:	63fb      	str	r3, [r7, #60]	; 0x3c
    1f22:	e025      	b.n	1f70 <mp_vprintf+0xd0>
            else if (*fmt == '+') flags |= PF_FLAG_SHOW_SIGN;
    1f24:	68bb      	ldr	r3, [r7, #8]
    1f26:	781b      	ldrb	r3, [r3, #0]
    1f28:	2b2b      	cmp	r3, #43	; 0x2b
    1f2a:	d104      	bne.n	1f36 <mp_vprintf+0x96>
    1f2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1f2e:	f043 0302 	orr.w	r3, r3, #2
    1f32:	63fb      	str	r3, [r7, #60]	; 0x3c
    1f34:	e01c      	b.n	1f70 <mp_vprintf+0xd0>
            else if (*fmt == ' ') flags |= PF_FLAG_SPACE_SIGN;
    1f36:	68bb      	ldr	r3, [r7, #8]
    1f38:	781b      	ldrb	r3, [r3, #0]
    1f3a:	2b20      	cmp	r3, #32
    1f3c:	d104      	bne.n	1f48 <mp_vprintf+0xa8>
    1f3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1f40:	f043 0304 	orr.w	r3, r3, #4
    1f44:	63fb      	str	r3, [r7, #60]	; 0x3c
    1f46:	e013      	b.n	1f70 <mp_vprintf+0xd0>
            else if (*fmt == '!') flags |= PF_FLAG_NO_TRAILZ;
    1f48:	68bb      	ldr	r3, [r7, #8]
    1f4a:	781b      	ldrb	r3, [r3, #0]
    1f4c:	2b21      	cmp	r3, #33	; 0x21
    1f4e:	d104      	bne.n	1f5a <mp_vprintf+0xba>
    1f50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1f52:	f043 0308 	orr.w	r3, r3, #8
    1f56:	63fb      	str	r3, [r7, #60]	; 0x3c
    1f58:	e00a      	b.n	1f70 <mp_vprintf+0xd0>
            else if (*fmt == '0') {
    1f5a:	68bb      	ldr	r3, [r7, #8]
    1f5c:	781b      	ldrb	r3, [r3, #0]
    1f5e:	2b30      	cmp	r3, #48	; 0x30
    1f60:	d10e      	bne.n	1f80 <mp_vprintf+0xe0>
                flags |= PF_FLAG_PAD_AFTER_SIGN;
    1f62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1f64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    1f68:	63fb      	str	r3, [r7, #60]	; 0x3c
                fill = '0';
    1f6a:	2330      	movs	r3, #48	; 0x30
    1f6c:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
            } else break;
            ++fmt;
    1f70:	68bb      	ldr	r3, [r7, #8]
    1f72:	3301      	adds	r3, #1
    1f74:	60bb      	str	r3, [r7, #8]
        while (*fmt != '\0') {
    1f76:	68bb      	ldr	r3, [r7, #8]
    1f78:	781b      	ldrb	r3, [r3, #0]
    1f7a:	2b00      	cmp	r3, #0
    1f7c:	d1c9      	bne.n	1f12 <mp_vprintf+0x72>
    1f7e:	e000      	b.n	1f82 <mp_vprintf+0xe2>
            } else break;
    1f80:	bf00      	nop
        }

        // parse width, if it exists
        int width = 0;
    1f82:	2300      	movs	r3, #0
    1f84:	637b      	str	r3, [r7, #52]	; 0x34
        for (; '0' <= *fmt && *fmt <= '9'; ++fmt) {
    1f86:	e00d      	b.n	1fa4 <mp_vprintf+0x104>
            width = width * 10 + *fmt - '0';
    1f88:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    1f8a:	4613      	mov	r3, r2
    1f8c:	009b      	lsls	r3, r3, #2
    1f8e:	4413      	add	r3, r2
    1f90:	005b      	lsls	r3, r3, #1
    1f92:	461a      	mov	r2, r3
    1f94:	68bb      	ldr	r3, [r7, #8]
    1f96:	781b      	ldrb	r3, [r3, #0]
    1f98:	4413      	add	r3, r2
    1f9a:	3b30      	subs	r3, #48	; 0x30
    1f9c:	637b      	str	r3, [r7, #52]	; 0x34
        for (; '0' <= *fmt && *fmt <= '9'; ++fmt) {
    1f9e:	68bb      	ldr	r3, [r7, #8]
    1fa0:	3301      	adds	r3, #1
    1fa2:	60bb      	str	r3, [r7, #8]
    1fa4:	68bb      	ldr	r3, [r7, #8]
    1fa6:	781b      	ldrb	r3, [r3, #0]
    1fa8:	2b2f      	cmp	r3, #47	; 0x2f
    1faa:	d903      	bls.n	1fb4 <mp_vprintf+0x114>
    1fac:	68bb      	ldr	r3, [r7, #8]
    1fae:	781b      	ldrb	r3, [r3, #0]
    1fb0:	2b39      	cmp	r3, #57	; 0x39
    1fb2:	d9e9      	bls.n	1f88 <mp_vprintf+0xe8>
        }

        // parse precision, if it exists
        int prec = -1;
    1fb4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    1fb8:	633b      	str	r3, [r7, #48]	; 0x30
        if (*fmt == '.') {
    1fba:	68bb      	ldr	r3, [r7, #8]
    1fbc:	781b      	ldrb	r3, [r3, #0]
    1fbe:	2b2e      	cmp	r3, #46	; 0x2e
    1fc0:	d12d      	bne.n	201e <mp_vprintf+0x17e>
            ++fmt;
    1fc2:	68bb      	ldr	r3, [r7, #8]
    1fc4:	3301      	adds	r3, #1
    1fc6:	60bb      	str	r3, [r7, #8]
            if (*fmt == '*') {
    1fc8:	68bb      	ldr	r3, [r7, #8]
    1fca:	781b      	ldrb	r3, [r3, #0]
    1fcc:	2b2a      	cmp	r3, #42	; 0x2a
    1fce:	d108      	bne.n	1fe2 <mp_vprintf+0x142>
                ++fmt;
    1fd0:	68bb      	ldr	r3, [r7, #8]
    1fd2:	3301      	adds	r3, #1
    1fd4:	60bb      	str	r3, [r7, #8]
                prec = va_arg(args, int);
    1fd6:	687b      	ldr	r3, [r7, #4]
    1fd8:	1d1a      	adds	r2, r3, #4
    1fda:	607a      	str	r2, [r7, #4]
    1fdc:	681b      	ldr	r3, [r3, #0]
    1fde:	633b      	str	r3, [r7, #48]	; 0x30
    1fe0:	e018      	b.n	2014 <mp_vprintf+0x174>
            } else {
                prec = 0;
    1fe2:	2300      	movs	r3, #0
    1fe4:	633b      	str	r3, [r7, #48]	; 0x30
                for (; '0' <= *fmt && *fmt <= '9'; ++fmt) {
    1fe6:	e00d      	b.n	2004 <mp_vprintf+0x164>
                    prec = prec * 10 + *fmt - '0';
    1fe8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    1fea:	4613      	mov	r3, r2
    1fec:	009b      	lsls	r3, r3, #2
    1fee:	4413      	add	r3, r2
    1ff0:	005b      	lsls	r3, r3, #1
    1ff2:	461a      	mov	r2, r3
    1ff4:	68bb      	ldr	r3, [r7, #8]
    1ff6:	781b      	ldrb	r3, [r3, #0]
    1ff8:	4413      	add	r3, r2
    1ffa:	3b30      	subs	r3, #48	; 0x30
    1ffc:	633b      	str	r3, [r7, #48]	; 0x30
                for (; '0' <= *fmt && *fmt <= '9'; ++fmt) {
    1ffe:	68bb      	ldr	r3, [r7, #8]
    2000:	3301      	adds	r3, #1
    2002:	60bb      	str	r3, [r7, #8]
    2004:	68bb      	ldr	r3, [r7, #8]
    2006:	781b      	ldrb	r3, [r3, #0]
    2008:	2b2f      	cmp	r3, #47	; 0x2f
    200a:	d903      	bls.n	2014 <mp_vprintf+0x174>
    200c:	68bb      	ldr	r3, [r7, #8]
    200e:	781b      	ldrb	r3, [r3, #0]
    2010:	2b39      	cmp	r3, #57	; 0x39
    2012:	d9e9      	bls.n	1fe8 <mp_vprintf+0x148>
                }
            }
            if (prec < 0) {
    2014:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    2016:	2b00      	cmp	r3, #0
    2018:	da01      	bge.n	201e <mp_vprintf+0x17e>
                prec = 0;
    201a:	2300      	movs	r3, #0
    201c:	633b      	str	r3, [r7, #48]	; 0x30

        // parse long specifiers (only for LP64 model where they make a difference)
        #ifndef __LP64__
        const
        #endif
        bool long_arg = false;
    201e:	2300      	movs	r3, #0
    2020:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        if (*fmt == 'l') {
    2024:	68bb      	ldr	r3, [r7, #8]
    2026:	781b      	ldrb	r3, [r3, #0]
    2028:	2b6c      	cmp	r3, #108	; 0x6c
    202a:	d102      	bne.n	2032 <mp_vprintf+0x192>
            ++fmt;
    202c:	68bb      	ldr	r3, [r7, #8]
    202e:	3301      	adds	r3, #1
    2030:	60bb      	str	r3, [r7, #8]
            #ifdef __LP64__
            long_arg = true;
            #endif
        }

        if (*fmt == '\0') {
    2032:	68bb      	ldr	r3, [r7, #8]
    2034:	781b      	ldrb	r3, [r3, #0]
    2036:	2b00      	cmp	r3, #0
    2038:	f000 8178 	beq.w	232c <mp_vprintf+0x48c>
            break;
        }

        switch (*fmt) {
    203c:	68bb      	ldr	r3, [r7, #8]
    203e:	781b      	ldrb	r3, [r3, #0]
    2040:	3b50      	subs	r3, #80	; 0x50
    2042:	2b28      	cmp	r3, #40	; 0x28
    2044:	f200 8156 	bhi.w	22f4 <mp_vprintf+0x454>
    2048:	a201      	add	r2, pc, #4	; (adr r2, 2050 <mp_vprintf+0x1b0>)
    204a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    204e:	bf00      	nop
    2050:	000022c7 	.word	0x000022c7
    2054:	000022f5 	.word	0x000022f5
    2058:	000022f5 	.word	0x000022f5
    205c:	000022f5 	.word	0x000022f5
    2060:	000022f5 	.word	0x000022f5
    2064:	000022f5 	.word	0x000022f5
    2068:	000022f5 	.word	0x000022f5
    206c:	000022f5 	.word	0x000022f5
    2070:	00002279 	.word	0x00002279
    2074:	000022f5 	.word	0x000022f5
    2078:	000022f5 	.word	0x000022f5
    207c:	000022f5 	.word	0x000022f5
    2080:	000022f5 	.word	0x000022f5
    2084:	000022f5 	.word	0x000022f5
    2088:	000022f5 	.word	0x000022f5
    208c:	000022f5 	.word	0x000022f5
    2090:	000022f5 	.word	0x000022f5
    2094:	000022f5 	.word	0x000022f5
    2098:	000020f5 	.word	0x000020f5
    209c:	00002141 	.word	0x00002141
    20a0:	00002249 	.word	0x00002249
    20a4:	000022f5 	.word	0x000022f5
    20a8:	000022f5 	.word	0x000022f5
    20ac:	000022f5 	.word	0x000022f5
    20b0:	000022f5 	.word	0x000022f5
    20b4:	000022f5 	.word	0x000022f5
    20b8:	000022f5 	.word	0x000022f5
    20bc:	000022f5 	.word	0x000022f5
    20c0:	000022f5 	.word	0x000022f5
    20c4:	000022f5 	.word	0x000022f5
    20c8:	000022f5 	.word	0x000022f5
    20cc:	000022f5 	.word	0x000022f5
    20d0:	000022c7 	.word	0x000022c7
    20d4:	00002171 	.word	0x00002171
    20d8:	000022f5 	.word	0x000022f5
    20dc:	000021b5 	.word	0x000021b5
    20e0:	000022f5 	.word	0x000022f5
    20e4:	0000221b 	.word	0x0000221b
    20e8:	000022f5 	.word	0x000022f5
    20ec:	000022f5 	.word	0x000022f5
    20f0:	00002279 	.word	0x00002279
            case 'b':
                if (va_arg(args, int)) {
    20f4:	687b      	ldr	r3, [r7, #4]
    20f6:	1d1a      	adds	r2, r3, #4
    20f8:	607a      	str	r2, [r7, #4]
    20fa:	681b      	ldr	r3, [r3, #0]
    20fc:	2b00      	cmp	r3, #0
    20fe:	d00f      	beq.n	2120 <mp_vprintf+0x280>
                    chrs += mp_print_strn(print, "true", 4, flags, fill, width);
    2100:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    2102:	9301      	str	r3, [sp, #4]
    2104:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
    2108:	9300      	str	r3, [sp, #0]
    210a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    210c:	2204      	movs	r2, #4
    210e:	498a      	ldr	r1, [pc, #552]	; (2338 <mp_vprintf+0x498>)
    2110:	68f8      	ldr	r0, [r7, #12]
    2112:	f7ff fbb5 	bl	1880 <mp_print_strn>
    2116:	4602      	mov	r2, r0
    2118:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    211a:	4413      	add	r3, r2
    211c:	647b      	str	r3, [r7, #68]	; 0x44
                } else {
                    chrs += mp_print_strn(print, "false", 5, flags, fill, width);
                }
                break;
    211e:	e0ff      	b.n	2320 <mp_vprintf+0x480>
                    chrs += mp_print_strn(print, "false", 5, flags, fill, width);
    2120:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    2122:	9301      	str	r3, [sp, #4]
    2124:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
    2128:	9300      	str	r3, [sp, #0]
    212a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    212c:	2205      	movs	r2, #5
    212e:	4983      	ldr	r1, [pc, #524]	; (233c <mp_vprintf+0x49c>)
    2130:	68f8      	ldr	r0, [r7, #12]
    2132:	f7ff fba5 	bl	1880 <mp_print_strn>
    2136:	4602      	mov	r2, r0
    2138:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    213a:	4413      	add	r3, r2
    213c:	647b      	str	r3, [r7, #68]	; 0x44
                break;
    213e:	e0ef      	b.n	2320 <mp_vprintf+0x480>
            case 'c':
            {
                char str = va_arg(args, int);
    2140:	687b      	ldr	r3, [r7, #4]
    2142:	1d1a      	adds	r2, r3, #4
    2144:	607a      	str	r2, [r7, #4]
    2146:	681b      	ldr	r3, [r3, #0]
    2148:	b2db      	uxtb	r3, r3
    214a:	76bb      	strb	r3, [r7, #26]
                chrs += mp_print_strn(print, &str, 1, flags, fill, width);
    214c:	f107 011a 	add.w	r1, r7, #26
    2150:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    2152:	9301      	str	r3, [sp, #4]
    2154:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
    2158:	9300      	str	r3, [sp, #0]
    215a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    215c:	2201      	movs	r2, #1
    215e:	68f8      	ldr	r0, [r7, #12]
    2160:	f7ff fb8e 	bl	1880 <mp_print_strn>
    2164:	4602      	mov	r2, r0
    2166:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    2168:	4413      	add	r3, r2
    216a:	647b      	str	r3, [r7, #68]	; 0x44
                break;
    216c:	bf00      	nop
    216e:	e0d7      	b.n	2320 <mp_vprintf+0x480>
            }
            case 'q':
            {
                qstr qst = va_arg(args, qstr);
    2170:	687b      	ldr	r3, [r7, #4]
    2172:	1d1a      	adds	r2, r3, #4
    2174:	607a      	str	r2, [r7, #4]
    2176:	681b      	ldr	r3, [r3, #0]
    2178:	627b      	str	r3, [r7, #36]	; 0x24
                size_t len;
                const char *str = (const char*)qstr_data(qst, &len);
    217a:	f107 0314 	add.w	r3, r7, #20
    217e:	4619      	mov	r1, r3
    2180:	6a78      	ldr	r0, [r7, #36]	; 0x24
    2182:	f7ff f835 	bl	11f0 <qstr_data>
    2186:	6238      	str	r0, [r7, #32]
                if (prec < 0) {
    2188:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    218a:	2b00      	cmp	r3, #0
    218c:	da01      	bge.n	2192 <mp_vprintf+0x2f2>
                    prec = len;
    218e:	697b      	ldr	r3, [r7, #20]
    2190:	633b      	str	r3, [r7, #48]	; 0x30
                }
                chrs += mp_print_strn(print, str, prec, flags, fill, width);
    2192:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    2194:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    2196:	9301      	str	r3, [sp, #4]
    2198:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
    219c:	9300      	str	r3, [sp, #0]
    219e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    21a0:	6a39      	ldr	r1, [r7, #32]
    21a2:	68f8      	ldr	r0, [r7, #12]
    21a4:	f7ff fb6c 	bl	1880 <mp_print_strn>
    21a8:	4602      	mov	r2, r0
    21aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    21ac:	4413      	add	r3, r2
    21ae:	647b      	str	r3, [r7, #68]	; 0x44
                break;
    21b0:	bf00      	nop
    21b2:	e0b5      	b.n	2320 <mp_vprintf+0x480>
            }
            case 's':
            {
                const char *str = va_arg(args, const char*);
    21b4:	687b      	ldr	r3, [r7, #4]
    21b6:	1d1a      	adds	r2, r3, #4
    21b8:	607a      	str	r2, [r7, #4]
    21ba:	681b      	ldr	r3, [r3, #0]
    21bc:	61fb      	str	r3, [r7, #28]
                #ifndef NDEBUG
                // With debugging enabled, catch printing of null string pointers
                if (prec != 0 && str == NULL) {
    21be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    21c0:	2b00      	cmp	r3, #0
    21c2:	d012      	beq.n	21ea <mp_vprintf+0x34a>
    21c4:	69fb      	ldr	r3, [r7, #28]
    21c6:	2b00      	cmp	r3, #0
    21c8:	d10f      	bne.n	21ea <mp_vprintf+0x34a>
                    chrs += mp_print_strn(print, "(null)", 6, flags, fill, width);
    21ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    21cc:	9301      	str	r3, [sp, #4]
    21ce:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
    21d2:	9300      	str	r3, [sp, #0]
    21d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    21d6:	2206      	movs	r2, #6
    21d8:	4959      	ldr	r1, [pc, #356]	; (2340 <mp_vprintf+0x4a0>)
    21da:	68f8      	ldr	r0, [r7, #12]
    21dc:	f7ff fb50 	bl	1880 <mp_print_strn>
    21e0:	4602      	mov	r2, r0
    21e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    21e4:	4413      	add	r3, r2
    21e6:	647b      	str	r3, [r7, #68]	; 0x44
                    break;
    21e8:	e09a      	b.n	2320 <mp_vprintf+0x480>
                }
                #endif
                if (prec < 0) {
    21ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    21ec:	2b00      	cmp	r3, #0
    21ee:	da04      	bge.n	21fa <mp_vprintf+0x35a>
                    prec = strlen(str);
    21f0:	69f8      	ldr	r0, [r7, #28]
    21f2:	f019 fd1d 	bl	1bc30 <strlen>
    21f6:	4603      	mov	r3, r0
    21f8:	633b      	str	r3, [r7, #48]	; 0x30
                }
                chrs += mp_print_strn(print, str, prec, flags, fill, width);
    21fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    21fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    21fe:	9301      	str	r3, [sp, #4]
    2200:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
    2204:	9300      	str	r3, [sp, #0]
    2206:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    2208:	69f9      	ldr	r1, [r7, #28]
    220a:	68f8      	ldr	r0, [r7, #12]
    220c:	f7ff fb38 	bl	1880 <mp_print_strn>
    2210:	4602      	mov	r2, r0
    2212:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    2214:	4413      	add	r3, r2
    2216:	647b      	str	r3, [r7, #68]	; 0x44
                break;
    2218:	e082      	b.n	2320 <mp_vprintf+0x480>
            }
            case 'u':
                chrs += mp_print_int(print, va_arg(args, unsigned int), 0, 10, 'a', flags, fill, width);
    221a:	687b      	ldr	r3, [r7, #4]
    221c:	1d1a      	adds	r2, r3, #4
    221e:	607a      	str	r2, [r7, #4]
    2220:	6819      	ldr	r1, [r3, #0]
    2222:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    2224:	9303      	str	r3, [sp, #12]
    2226:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
    222a:	9302      	str	r3, [sp, #8]
    222c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    222e:	9301      	str	r3, [sp, #4]
    2230:	2361      	movs	r3, #97	; 0x61
    2232:	9300      	str	r3, [sp, #0]
    2234:	230a      	movs	r3, #10
    2236:	2200      	movs	r2, #0
    2238:	68f8      	ldr	r0, [r7, #12]
    223a:	f7ff fbb9 	bl	19b0 <mp_print_int>
    223e:	4602      	mov	r2, r0
    2240:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    2242:	4413      	add	r3, r2
    2244:	647b      	str	r3, [r7, #68]	; 0x44
                break;
    2246:	e06b      	b.n	2320 <mp_vprintf+0x480>
            case 'd':
                chrs += mp_print_int(print, va_arg(args, int), 1, 10, 'a', flags, fill, width);
    2248:	687b      	ldr	r3, [r7, #4]
    224a:	1d1a      	adds	r2, r3, #4
    224c:	607a      	str	r2, [r7, #4]
    224e:	681b      	ldr	r3, [r3, #0]
    2250:	4619      	mov	r1, r3
    2252:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    2254:	9303      	str	r3, [sp, #12]
    2256:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
    225a:	9302      	str	r3, [sp, #8]
    225c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    225e:	9301      	str	r3, [sp, #4]
    2260:	2361      	movs	r3, #97	; 0x61
    2262:	9300      	str	r3, [sp, #0]
    2264:	230a      	movs	r3, #10
    2266:	2201      	movs	r2, #1
    2268:	68f8      	ldr	r0, [r7, #12]
    226a:	f7ff fba1 	bl	19b0 <mp_print_int>
    226e:	4602      	mov	r2, r0
    2270:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    2272:	4413      	add	r3, r2
    2274:	647b      	str	r3, [r7, #68]	; 0x44
                break;
    2276:	e053      	b.n	2320 <mp_vprintf+0x480>
            case 'x':
            case 'X': {
                char fmt_c = *fmt - 'X' + 'A';
    2278:	68bb      	ldr	r3, [r7, #8]
    227a:	781b      	ldrb	r3, [r3, #0]
    227c:	3b17      	subs	r3, #23
    227e:	76fb      	strb	r3, [r7, #27]
                mp_uint_t val;
                if (long_arg) {
    2280:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
    2284:	2b00      	cmp	r3, #0
    2286:	d005      	beq.n	2294 <mp_vprintf+0x3f4>
                    val = va_arg(args, unsigned long int);
    2288:	687b      	ldr	r3, [r7, #4]
    228a:	1d1a      	adds	r2, r3, #4
    228c:	607a      	str	r2, [r7, #4]
    228e:	681b      	ldr	r3, [r3, #0]
    2290:	62fb      	str	r3, [r7, #44]	; 0x2c
    2292:	e004      	b.n	229e <mp_vprintf+0x3fe>
                } else {
                    val = va_arg(args, unsigned int);
    2294:	687b      	ldr	r3, [r7, #4]
    2296:	1d1a      	adds	r2, r3, #4
    2298:	607a      	str	r2, [r7, #4]
    229a:	681b      	ldr	r3, [r3, #0]
    229c:	62fb      	str	r3, [r7, #44]	; 0x2c
                }
                chrs += mp_print_int(print, val, 0, 16, fmt_c, flags, fill, width);
    229e:	7efb      	ldrb	r3, [r7, #27]
    22a0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    22a2:	9203      	str	r2, [sp, #12]
    22a4:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
    22a8:	9202      	str	r2, [sp, #8]
    22aa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    22ac:	9201      	str	r2, [sp, #4]
    22ae:	9300      	str	r3, [sp, #0]
    22b0:	2310      	movs	r3, #16
    22b2:	2200      	movs	r2, #0
    22b4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
    22b6:	68f8      	ldr	r0, [r7, #12]
    22b8:	f7ff fb7a 	bl	19b0 <mp_print_int>
    22bc:	4602      	mov	r2, r0
    22be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    22c0:	4413      	add	r3, r2
    22c2:	647b      	str	r3, [r7, #68]	; 0x44
                break;
    22c4:	e02c      	b.n	2320 <mp_vprintf+0x480>
            }
            case 'p':
            case 'P': // don't bother to handle upcase for 'P'
                // Use unsigned long int to work on both ILP32 and LP64 systems
                chrs += mp_print_int(print, va_arg(args, unsigned long int), 0, 16, 'a', flags, fill, width);
    22c6:	687b      	ldr	r3, [r7, #4]
    22c8:	1d1a      	adds	r2, r3, #4
    22ca:	607a      	str	r2, [r7, #4]
    22cc:	6819      	ldr	r1, [r3, #0]
    22ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    22d0:	9303      	str	r3, [sp, #12]
    22d2:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
    22d6:	9302      	str	r3, [sp, #8]
    22d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    22da:	9301      	str	r3, [sp, #4]
    22dc:	2361      	movs	r3, #97	; 0x61
    22de:	9300      	str	r3, [sp, #0]
    22e0:	2310      	movs	r3, #16
    22e2:	2200      	movs	r2, #0
    22e4:	68f8      	ldr	r0, [r7, #12]
    22e6:	f7ff fb63 	bl	19b0 <mp_print_int>
    22ea:	4602      	mov	r2, r0
    22ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    22ee:	4413      	add	r3, r2
    22f0:	647b      	str	r3, [r7, #68]	; 0x44
                break;
    22f2:	e015      	b.n	2320 <mp_vprintf+0x480>
                assert(!"unsupported fmt char");
            }
            #endif
            default:
                // if it's not %% then it's an unsupported format character
                assert(*fmt == '%' || !"unsupported fmt char");
    22f4:	68bb      	ldr	r3, [r7, #8]
    22f6:	781b      	ldrb	r3, [r3, #0]
    22f8:	2b25      	cmp	r3, #37	; 0x25
    22fa:	d006      	beq.n	230a <mp_vprintf+0x46a>
    22fc:	4b11      	ldr	r3, [pc, #68]	; (2344 <mp_vprintf+0x4a4>)
    22fe:	4a12      	ldr	r2, [pc, #72]	; (2348 <mp_vprintf+0x4a8>)
    2300:	f240 2132 	movw	r1, #562	; 0x232
    2304:	4811      	ldr	r0, [pc, #68]	; (234c <mp_vprintf+0x4ac>)
    2306:	f018 ff59 	bl	1b1bc <__assert_func>
                print->print_strn(print->data, fmt, 1);
    230a:	68fb      	ldr	r3, [r7, #12]
    230c:	685b      	ldr	r3, [r3, #4]
    230e:	68fa      	ldr	r2, [r7, #12]
    2310:	6810      	ldr	r0, [r2, #0]
    2312:	2201      	movs	r2, #1
    2314:	68b9      	ldr	r1, [r7, #8]
    2316:	4798      	blx	r3
                chrs += 1;
    2318:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    231a:	3301      	adds	r3, #1
    231c:	647b      	str	r3, [r7, #68]	; 0x44
                break;
    231e:	bf00      	nop
        }
        ++fmt;
    2320:	68bb      	ldr	r3, [r7, #8]
    2322:	3301      	adds	r3, #1
    2324:	60bb      	str	r3, [r7, #8]
    for (;;) {
    2326:	e5c3      	b.n	1eb0 <mp_vprintf+0x10>
            break;
    2328:	bf00      	nop
    232a:	e000      	b.n	232e <mp_vprintf+0x48e>
            break;
    232c:	bf00      	nop
    }
    return chrs;
    232e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
    2330:	4618      	mov	r0, r3
    2332:	3748      	adds	r7, #72	; 0x48
    2334:	46bd      	mov	sp, r7
    2336:	bd80      	pop	{r7, pc}
    2338:	0001d600 	.word	0x0001d600
    233c:	0001d608 	.word	0x0001d608
    2340:	0001d610 	.word	0x0001d610
    2344:	0001d618 	.word	0x0001d618
    2348:	0001d650 	.word	0x0001d650
    234c:	0001d5e8 	.word	0x0001d5e8

00002350 <unichar_isspace>:
}

#endif

// Be aware: These unichar_is* functions are actually ASCII-only!
bool unichar_isspace(unichar c) {
    2350:	b480      	push	{r7}
    2352:	b083      	sub	sp, #12
    2354:	af00      	add	r7, sp, #0
    2356:	6078      	str	r0, [r7, #4]
    return c < 128 && (attr[c] & FL_SPACE) != 0;
    2358:	687b      	ldr	r3, [r7, #4]
    235a:	2b7f      	cmp	r3, #127	; 0x7f
    235c:	d809      	bhi.n	2372 <unichar_isspace+0x22>
    235e:	4a0a      	ldr	r2, [pc, #40]	; (2388 <unichar_isspace+0x38>)
    2360:	687b      	ldr	r3, [r7, #4]
    2362:	4413      	add	r3, r2
    2364:	781b      	ldrb	r3, [r3, #0]
    2366:	f003 0302 	and.w	r3, r3, #2
    236a:	2b00      	cmp	r3, #0
    236c:	d001      	beq.n	2372 <unichar_isspace+0x22>
    236e:	2301      	movs	r3, #1
    2370:	e000      	b.n	2374 <unichar_isspace+0x24>
    2372:	2300      	movs	r3, #0
    2374:	f003 0301 	and.w	r3, r3, #1
    2378:	b2db      	uxtb	r3, r3
}
    237a:	4618      	mov	r0, r3
    237c:	370c      	adds	r7, #12
    237e:	46bd      	mov	sp, r7
    2380:	f85d 7b04 	ldr.w	r7, [sp], #4
    2384:	4770      	bx	lr
    2386:	bf00      	nop
    2388:	0001d65c 	.word	0x0001d65c

0000238c <unichar_isalpha>:

bool unichar_isalpha(unichar c) {
    238c:	b480      	push	{r7}
    238e:	b083      	sub	sp, #12
    2390:	af00      	add	r7, sp, #0
    2392:	6078      	str	r0, [r7, #4]
    return c < 128 && (attr[c] & FL_ALPHA) != 0;
    2394:	687b      	ldr	r3, [r7, #4]
    2396:	2b7f      	cmp	r3, #127	; 0x7f
    2398:	d809      	bhi.n	23ae <unichar_isalpha+0x22>
    239a:	4a0a      	ldr	r2, [pc, #40]	; (23c4 <unichar_isalpha+0x38>)
    239c:	687b      	ldr	r3, [r7, #4]
    239e:	4413      	add	r3, r2
    23a0:	781b      	ldrb	r3, [r3, #0]
    23a2:	f003 0308 	and.w	r3, r3, #8
    23a6:	2b00      	cmp	r3, #0
    23a8:	d001      	beq.n	23ae <unichar_isalpha+0x22>
    23aa:	2301      	movs	r3, #1
    23ac:	e000      	b.n	23b0 <unichar_isalpha+0x24>
    23ae:	2300      	movs	r3, #0
    23b0:	f003 0301 	and.w	r3, r3, #1
    23b4:	b2db      	uxtb	r3, r3
}
    23b6:	4618      	mov	r0, r3
    23b8:	370c      	adds	r7, #12
    23ba:	46bd      	mov	sp, r7
    23bc:	f85d 7b04 	ldr.w	r7, [sp], #4
    23c0:	4770      	bx	lr
    23c2:	bf00      	nop
    23c4:	0001d65c 	.word	0x0001d65c

000023c8 <unichar_isdigit>:
bool unichar_isprint(unichar c) {
    return c < 128 && (attr[c] & FL_PRINT) != 0;
}
*/

bool unichar_isdigit(unichar c) {
    23c8:	b480      	push	{r7}
    23ca:	b083      	sub	sp, #12
    23cc:	af00      	add	r7, sp, #0
    23ce:	6078      	str	r0, [r7, #4]
    return c < 128 && (attr[c] & FL_DIGIT) != 0;
    23d0:	687b      	ldr	r3, [r7, #4]
    23d2:	2b7f      	cmp	r3, #127	; 0x7f
    23d4:	d809      	bhi.n	23ea <unichar_isdigit+0x22>
    23d6:	4a0a      	ldr	r2, [pc, #40]	; (2400 <unichar_isdigit+0x38>)
    23d8:	687b      	ldr	r3, [r7, #4]
    23da:	4413      	add	r3, r2
    23dc:	781b      	ldrb	r3, [r3, #0]
    23de:	f003 0304 	and.w	r3, r3, #4
    23e2:	2b00      	cmp	r3, #0
    23e4:	d001      	beq.n	23ea <unichar_isdigit+0x22>
    23e6:	2301      	movs	r3, #1
    23e8:	e000      	b.n	23ec <unichar_isdigit+0x24>
    23ea:	2300      	movs	r3, #0
    23ec:	f003 0301 	and.w	r3, r3, #1
    23f0:	b2db      	uxtb	r3, r3
}
    23f2:	4618      	mov	r0, r3
    23f4:	370c      	adds	r7, #12
    23f6:	46bd      	mov	sp, r7
    23f8:	f85d 7b04 	ldr.w	r7, [sp], #4
    23fc:	4770      	bx	lr
    23fe:	bf00      	nop
    2400:	0001d65c 	.word	0x0001d65c

00002404 <unichar_isxdigit>:

bool unichar_isxdigit(unichar c) {
    2404:	b480      	push	{r7}
    2406:	b083      	sub	sp, #12
    2408:	af00      	add	r7, sp, #0
    240a:	6078      	str	r0, [r7, #4]
    return c < 128 && (attr[c] & FL_XDIGIT) != 0;
    240c:	687b      	ldr	r3, [r7, #4]
    240e:	2b7f      	cmp	r3, #127	; 0x7f
    2410:	d809      	bhi.n	2426 <unichar_isxdigit+0x22>
    2412:	4a0a      	ldr	r2, [pc, #40]	; (243c <unichar_isxdigit+0x38>)
    2414:	687b      	ldr	r3, [r7, #4]
    2416:	4413      	add	r3, r2
    2418:	781b      	ldrb	r3, [r3, #0]
    241a:	f003 0340 	and.w	r3, r3, #64	; 0x40
    241e:	2b00      	cmp	r3, #0
    2420:	d001      	beq.n	2426 <unichar_isxdigit+0x22>
    2422:	2301      	movs	r3, #1
    2424:	e000      	b.n	2428 <unichar_isxdigit+0x24>
    2426:	2300      	movs	r3, #0
    2428:	f003 0301 	and.w	r3, r3, #1
    242c:	b2db      	uxtb	r3, r3
}
    242e:	4618      	mov	r0, r3
    2430:	370c      	adds	r7, #12
    2432:	46bd      	mov	sp, r7
    2434:	f85d 7b04 	ldr.w	r7, [sp], #4
    2438:	4770      	bx	lr
    243a:	bf00      	nop
    243c:	0001d65c 	.word	0x0001d65c

00002440 <unichar_isident>:

bool unichar_isident(unichar c) {
    2440:	b480      	push	{r7}
    2442:	b083      	sub	sp, #12
    2444:	af00      	add	r7, sp, #0
    2446:	6078      	str	r0, [r7, #4]
    return c < 128 && ((attr[c] & (FL_ALPHA | FL_DIGIT)) != 0 || c == '_');
    2448:	687b      	ldr	r3, [r7, #4]
    244a:	2b7f      	cmp	r3, #127	; 0x7f
    244c:	d80c      	bhi.n	2468 <unichar_isident+0x28>
    244e:	4a0b      	ldr	r2, [pc, #44]	; (247c <unichar_isident+0x3c>)
    2450:	687b      	ldr	r3, [r7, #4]
    2452:	4413      	add	r3, r2
    2454:	781b      	ldrb	r3, [r3, #0]
    2456:	f003 030c 	and.w	r3, r3, #12
    245a:	2b00      	cmp	r3, #0
    245c:	d102      	bne.n	2464 <unichar_isident+0x24>
    245e:	687b      	ldr	r3, [r7, #4]
    2460:	2b5f      	cmp	r3, #95	; 0x5f
    2462:	d101      	bne.n	2468 <unichar_isident+0x28>
    2464:	2301      	movs	r3, #1
    2466:	e000      	b.n	246a <unichar_isident+0x2a>
    2468:	2300      	movs	r3, #0
    246a:	f003 0301 	and.w	r3, r3, #1
    246e:	b2db      	uxtb	r3, r3
}
    2470:	4618      	mov	r0, r3
    2472:	370c      	adds	r7, #12
    2474:	46bd      	mov	sp, r7
    2476:	f85d 7b04 	ldr.w	r7, [sp], #4
    247a:	4770      	bx	lr
    247c:	0001d65c 	.word	0x0001d65c

00002480 <unichar_isupper>:

bool unichar_isupper(unichar c) {
    2480:	b480      	push	{r7}
    2482:	b083      	sub	sp, #12
    2484:	af00      	add	r7, sp, #0
    2486:	6078      	str	r0, [r7, #4]
    return c < 128 && (attr[c] & FL_UPPER) != 0;
    2488:	687b      	ldr	r3, [r7, #4]
    248a:	2b7f      	cmp	r3, #127	; 0x7f
    248c:	d809      	bhi.n	24a2 <unichar_isupper+0x22>
    248e:	4a0a      	ldr	r2, [pc, #40]	; (24b8 <unichar_isupper+0x38>)
    2490:	687b      	ldr	r3, [r7, #4]
    2492:	4413      	add	r3, r2
    2494:	781b      	ldrb	r3, [r3, #0]
    2496:	f003 0310 	and.w	r3, r3, #16
    249a:	2b00      	cmp	r3, #0
    249c:	d001      	beq.n	24a2 <unichar_isupper+0x22>
    249e:	2301      	movs	r3, #1
    24a0:	e000      	b.n	24a4 <unichar_isupper+0x24>
    24a2:	2300      	movs	r3, #0
    24a4:	f003 0301 	and.w	r3, r3, #1
    24a8:	b2db      	uxtb	r3, r3
}
    24aa:	4618      	mov	r0, r3
    24ac:	370c      	adds	r7, #12
    24ae:	46bd      	mov	sp, r7
    24b0:	f85d 7b04 	ldr.w	r7, [sp], #4
    24b4:	4770      	bx	lr
    24b6:	bf00      	nop
    24b8:	0001d65c 	.word	0x0001d65c

000024bc <unichar_islower>:

bool unichar_islower(unichar c) {
    24bc:	b480      	push	{r7}
    24be:	b083      	sub	sp, #12
    24c0:	af00      	add	r7, sp, #0
    24c2:	6078      	str	r0, [r7, #4]
    return c < 128 && (attr[c] & FL_LOWER) != 0;
    24c4:	687b      	ldr	r3, [r7, #4]
    24c6:	2b7f      	cmp	r3, #127	; 0x7f
    24c8:	d809      	bhi.n	24de <unichar_islower+0x22>
    24ca:	4a0a      	ldr	r2, [pc, #40]	; (24f4 <unichar_islower+0x38>)
    24cc:	687b      	ldr	r3, [r7, #4]
    24ce:	4413      	add	r3, r2
    24d0:	781b      	ldrb	r3, [r3, #0]
    24d2:	f003 0320 	and.w	r3, r3, #32
    24d6:	2b00      	cmp	r3, #0
    24d8:	d001      	beq.n	24de <unichar_islower+0x22>
    24da:	2301      	movs	r3, #1
    24dc:	e000      	b.n	24e0 <unichar_islower+0x24>
    24de:	2300      	movs	r3, #0
    24e0:	f003 0301 	and.w	r3, r3, #1
    24e4:	b2db      	uxtb	r3, r3
}
    24e6:	4618      	mov	r0, r3
    24e8:	370c      	adds	r7, #12
    24ea:	46bd      	mov	sp, r7
    24ec:	f85d 7b04 	ldr.w	r7, [sp], #4
    24f0:	4770      	bx	lr
    24f2:	bf00      	nop
    24f4:	0001d65c 	.word	0x0001d65c

000024f8 <unichar_tolower>:

unichar unichar_tolower(unichar c) {
    24f8:	b580      	push	{r7, lr}
    24fa:	b082      	sub	sp, #8
    24fc:	af00      	add	r7, sp, #0
    24fe:	6078      	str	r0, [r7, #4]
    if (unichar_isupper(c)) {
    2500:	6878      	ldr	r0, [r7, #4]
    2502:	f7ff ffbd 	bl	2480 <unichar_isupper>
    2506:	4603      	mov	r3, r0
    2508:	2b00      	cmp	r3, #0
    250a:	d002      	beq.n	2512 <unichar_tolower+0x1a>
        return c + 0x20;
    250c:	687b      	ldr	r3, [r7, #4]
    250e:	3320      	adds	r3, #32
    2510:	e000      	b.n	2514 <unichar_tolower+0x1c>
    }
    return c;
    2512:	687b      	ldr	r3, [r7, #4]
}
    2514:	4618      	mov	r0, r3
    2516:	3708      	adds	r7, #8
    2518:	46bd      	mov	sp, r7
    251a:	bd80      	pop	{r7, pc}

0000251c <unichar_toupper>:

unichar unichar_toupper(unichar c) {
    251c:	b580      	push	{r7, lr}
    251e:	b082      	sub	sp, #8
    2520:	af00      	add	r7, sp, #0
    2522:	6078      	str	r0, [r7, #4]
    if (unichar_islower(c)) {
    2524:	6878      	ldr	r0, [r7, #4]
    2526:	f7ff ffc9 	bl	24bc <unichar_islower>
    252a:	4603      	mov	r3, r0
    252c:	2b00      	cmp	r3, #0
    252e:	d002      	beq.n	2536 <unichar_toupper+0x1a>
        return c - 0x20;
    2530:	687b      	ldr	r3, [r7, #4]
    2532:	3b20      	subs	r3, #32
    2534:	e000      	b.n	2538 <unichar_toupper+0x1c>
    }
    return c;
    2536:	687b      	ldr	r3, [r7, #4]
}
    2538:	4618      	mov	r0, r3
    253a:	3708      	adds	r7, #8
    253c:	46bd      	mov	sp, r7
    253e:	bd80      	pop	{r7, pc}

00002540 <unichar_xdigit_value>:

mp_uint_t unichar_xdigit_value(unichar c) {
    2540:	b480      	push	{r7}
    2542:	b085      	sub	sp, #20
    2544:	af00      	add	r7, sp, #0
    2546:	6078      	str	r0, [r7, #4]
    // c is assumed to be hex digit
    mp_uint_t n = c - '0';
    2548:	687b      	ldr	r3, [r7, #4]
    254a:	3b30      	subs	r3, #48	; 0x30
    254c:	60fb      	str	r3, [r7, #12]
    if (n > 9) {
    254e:	68fb      	ldr	r3, [r7, #12]
    2550:	2b09      	cmp	r3, #9
    2552:	d906      	bls.n	2562 <unichar_xdigit_value+0x22>
        n &= ~('a' - 'A');
    2554:	68fb      	ldr	r3, [r7, #12]
    2556:	f023 0320 	bic.w	r3, r3, #32
    255a:	60fb      	str	r3, [r7, #12]
        n -= ('A' - ('9' + 1));
    255c:	68fb      	ldr	r3, [r7, #12]
    255e:	3b07      	subs	r3, #7
    2560:	60fb      	str	r3, [r7, #12]
    }
    return n;
    2562:	68fb      	ldr	r3, [r7, #12]
}
    2564:	4618      	mov	r0, r3
    2566:	3714      	adds	r7, #20
    2568:	46bd      	mov	sp, r7
    256a:	f85d 7b04 	ldr.w	r7, [sp], #4
    256e:	4770      	bx	lr

00002570 <mp_reader_mem_readbyte>:
    const byte *beg;
    const byte *cur;
    const byte *end;
} mp_reader_mem_t;

STATIC mp_uint_t mp_reader_mem_readbyte(void *data) {
    2570:	b480      	push	{r7}
    2572:	b085      	sub	sp, #20
    2574:	af00      	add	r7, sp, #0
    2576:	6078      	str	r0, [r7, #4]
    mp_reader_mem_t *reader = (mp_reader_mem_t*)data;
    2578:	687b      	ldr	r3, [r7, #4]
    257a:	60fb      	str	r3, [r7, #12]
    if (reader->cur < reader->end) {
    257c:	68fb      	ldr	r3, [r7, #12]
    257e:	689a      	ldr	r2, [r3, #8]
    2580:	68fb      	ldr	r3, [r7, #12]
    2582:	68db      	ldr	r3, [r3, #12]
    2584:	429a      	cmp	r2, r3
    2586:	d206      	bcs.n	2596 <mp_reader_mem_readbyte+0x26>
        return *reader->cur++;
    2588:	68fb      	ldr	r3, [r7, #12]
    258a:	689b      	ldr	r3, [r3, #8]
    258c:	1c59      	adds	r1, r3, #1
    258e:	68fa      	ldr	r2, [r7, #12]
    2590:	6091      	str	r1, [r2, #8]
    2592:	781b      	ldrb	r3, [r3, #0]
    2594:	e001      	b.n	259a <mp_reader_mem_readbyte+0x2a>
    } else {
        return MP_READER_EOF;
    2596:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    }
}
    259a:	4618      	mov	r0, r3
    259c:	3714      	adds	r7, #20
    259e:	46bd      	mov	sp, r7
    25a0:	f85d 7b04 	ldr.w	r7, [sp], #4
    25a4:	4770      	bx	lr

000025a6 <mp_reader_mem_close>:

STATIC void mp_reader_mem_close(void *data) {
    25a6:	b580      	push	{r7, lr}
    25a8:	b084      	sub	sp, #16
    25aa:	af00      	add	r7, sp, #0
    25ac:	6078      	str	r0, [r7, #4]
    mp_reader_mem_t *reader = (mp_reader_mem_t*)data;
    25ae:	687b      	ldr	r3, [r7, #4]
    25b0:	60fb      	str	r3, [r7, #12]
    if (reader->free_len > 0) {
    25b2:	68fb      	ldr	r3, [r7, #12]
    25b4:	681b      	ldr	r3, [r3, #0]
    25b6:	2b00      	cmp	r3, #0
    25b8:	d004      	beq.n	25c4 <mp_reader_mem_close+0x1e>
        m_del(char, (char*)reader->beg, reader->free_len);
    25ba:	68fb      	ldr	r3, [r7, #12]
    25bc:	685b      	ldr	r3, [r3, #4]
    25be:	4618      	mov	r0, r3
    25c0:	f7fd ff0a 	bl	3d8 <m_free>
    }
    m_del_obj(mp_reader_mem_t, reader);
    25c4:	68f8      	ldr	r0, [r7, #12]
    25c6:	f7fd ff07 	bl	3d8 <m_free>
}
    25ca:	bf00      	nop
    25cc:	3710      	adds	r7, #16
    25ce:	46bd      	mov	sp, r7
    25d0:	bd80      	pop	{r7, pc}

000025d2 <mp_reader_new_mem>:

void mp_reader_new_mem(mp_reader_t *reader, const byte *buf, size_t len, size_t free_len) {
    25d2:	b580      	push	{r7, lr}
    25d4:	b086      	sub	sp, #24
    25d6:	af00      	add	r7, sp, #0
    25d8:	60f8      	str	r0, [r7, #12]
    25da:	60b9      	str	r1, [r7, #8]
    25dc:	607a      	str	r2, [r7, #4]
    25de:	603b      	str	r3, [r7, #0]
    mp_reader_mem_t *rm = m_new_obj(mp_reader_mem_t);
    25e0:	2010      	movs	r0, #16
    25e2:	f7fd fe9b 	bl	31c <m_malloc>
    25e6:	6178      	str	r0, [r7, #20]
    rm->free_len = free_len;
    25e8:	697b      	ldr	r3, [r7, #20]
    25ea:	683a      	ldr	r2, [r7, #0]
    25ec:	601a      	str	r2, [r3, #0]
    rm->beg = buf;
    25ee:	697b      	ldr	r3, [r7, #20]
    25f0:	68ba      	ldr	r2, [r7, #8]
    25f2:	605a      	str	r2, [r3, #4]
    rm->cur = buf;
    25f4:	697b      	ldr	r3, [r7, #20]
    25f6:	68ba      	ldr	r2, [r7, #8]
    25f8:	609a      	str	r2, [r3, #8]
    rm->end = buf + len;
    25fa:	68ba      	ldr	r2, [r7, #8]
    25fc:	687b      	ldr	r3, [r7, #4]
    25fe:	441a      	add	r2, r3
    2600:	697b      	ldr	r3, [r7, #20]
    2602:	60da      	str	r2, [r3, #12]
    reader->data = rm;
    2604:	68fb      	ldr	r3, [r7, #12]
    2606:	697a      	ldr	r2, [r7, #20]
    2608:	601a      	str	r2, [r3, #0]
    reader->readbyte = mp_reader_mem_readbyte;
    260a:	68fb      	ldr	r3, [r7, #12]
    260c:	4a04      	ldr	r2, [pc, #16]	; (2620 <mp_reader_new_mem+0x4e>)
    260e:	605a      	str	r2, [r3, #4]
    reader->close = mp_reader_mem_close;
    2610:	68fb      	ldr	r3, [r7, #12]
    2612:	4a04      	ldr	r2, [pc, #16]	; (2624 <mp_reader_new_mem+0x52>)
    2614:	609a      	str	r2, [r3, #8]
}
    2616:	bf00      	nop
    2618:	3718      	adds	r7, #24
    261a:	46bd      	mov	sp, r7
    261c:	bd80      	pop	{r7, pc}
    261e:	bf00      	nop
    2620:	00002571 	.word	0x00002571
    2624:	000025a7 	.word	0x000025a7

00002628 <vstr_reset>:
struct _mp_print_t;
void vstr_init_print(vstr_t *vstr, size_t alloc, struct _mp_print_t *print);
void vstr_clear(vstr_t *vstr);
vstr_t *vstr_new(size_t alloc);
void vstr_free(vstr_t *vstr);
static inline void vstr_reset(vstr_t *vstr) { vstr->len = 0; }
    2628:	b480      	push	{r7}
    262a:	b083      	sub	sp, #12
    262c:	af00      	add	r7, sp, #0
    262e:	6078      	str	r0, [r7, #4]
    2630:	687b      	ldr	r3, [r7, #4]
    2632:	2200      	movs	r2, #0
    2634:	605a      	str	r2, [r3, #4]
    2636:	bf00      	nop
    2638:	370c      	adds	r7, #12
    263a:	46bd      	mov	sp, r7
    263c:	f85d 7b04 	ldr.w	r7, [sp], #4
    2640:	4770      	bx	lr

00002642 <is_end>:
// don't know if that's intentional or not, but we don't allow it

#define MP_LEXER_EOF ((unichar)MP_READER_EOF)
#define CUR_CHAR(lex) ((lex)->chr0)

STATIC bool is_end(mp_lexer_t *lex) {
    2642:	b480      	push	{r7}
    2644:	b083      	sub	sp, #12
    2646:	af00      	add	r7, sp, #0
    2648:	6078      	str	r0, [r7, #4]
    return lex->chr0 == MP_LEXER_EOF;
    264a:	687b      	ldr	r3, [r7, #4]
    264c:	691b      	ldr	r3, [r3, #16]
    264e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    2652:	bf0c      	ite	eq
    2654:	2301      	moveq	r3, #1
    2656:	2300      	movne	r3, #0
    2658:	b2db      	uxtb	r3, r3
}
    265a:	4618      	mov	r0, r3
    265c:	370c      	adds	r7, #12
    265e:	46bd      	mov	sp, r7
    2660:	f85d 7b04 	ldr.w	r7, [sp], #4
    2664:	4770      	bx	lr

00002666 <is_physical_newline>:

STATIC bool is_physical_newline(mp_lexer_t *lex) {
    2666:	b480      	push	{r7}
    2668:	b083      	sub	sp, #12
    266a:	af00      	add	r7, sp, #0
    266c:	6078      	str	r0, [r7, #4]
    return lex->chr0 == '\n';
    266e:	687b      	ldr	r3, [r7, #4]
    2670:	691b      	ldr	r3, [r3, #16]
    2672:	2b0a      	cmp	r3, #10
    2674:	bf0c      	ite	eq
    2676:	2301      	moveq	r3, #1
    2678:	2300      	movne	r3, #0
    267a:	b2db      	uxtb	r3, r3
}
    267c:	4618      	mov	r0, r3
    267e:	370c      	adds	r7, #12
    2680:	46bd      	mov	sp, r7
    2682:	f85d 7b04 	ldr.w	r7, [sp], #4
    2686:	4770      	bx	lr

00002688 <is_char>:

STATIC bool is_char(mp_lexer_t *lex, byte c) {
    2688:	b480      	push	{r7}
    268a:	b083      	sub	sp, #12
    268c:	af00      	add	r7, sp, #0
    268e:	6078      	str	r0, [r7, #4]
    2690:	460b      	mov	r3, r1
    2692:	70fb      	strb	r3, [r7, #3]
    return lex->chr0 == c;
    2694:	687b      	ldr	r3, [r7, #4]
    2696:	691a      	ldr	r2, [r3, #16]
    2698:	78fb      	ldrb	r3, [r7, #3]
    269a:	429a      	cmp	r2, r3
    269c:	bf0c      	ite	eq
    269e:	2301      	moveq	r3, #1
    26a0:	2300      	movne	r3, #0
    26a2:	b2db      	uxtb	r3, r3
}
    26a4:	4618      	mov	r0, r3
    26a6:	370c      	adds	r7, #12
    26a8:	46bd      	mov	sp, r7
    26aa:	f85d 7b04 	ldr.w	r7, [sp], #4
    26ae:	4770      	bx	lr

000026b0 <is_char_or>:

STATIC bool is_char_or(mp_lexer_t *lex, byte c1, byte c2) {
    26b0:	b480      	push	{r7}
    26b2:	b083      	sub	sp, #12
    26b4:	af00      	add	r7, sp, #0
    26b6:	6078      	str	r0, [r7, #4]
    26b8:	460b      	mov	r3, r1
    26ba:	70fb      	strb	r3, [r7, #3]
    26bc:	4613      	mov	r3, r2
    26be:	70bb      	strb	r3, [r7, #2]
    return lex->chr0 == c1 || lex->chr0 == c2;
    26c0:	687b      	ldr	r3, [r7, #4]
    26c2:	691a      	ldr	r2, [r3, #16]
    26c4:	78fb      	ldrb	r3, [r7, #3]
    26c6:	429a      	cmp	r2, r3
    26c8:	d004      	beq.n	26d4 <is_char_or+0x24>
    26ca:	687b      	ldr	r3, [r7, #4]
    26cc:	691a      	ldr	r2, [r3, #16]
    26ce:	78bb      	ldrb	r3, [r7, #2]
    26d0:	429a      	cmp	r2, r3
    26d2:	d101      	bne.n	26d8 <is_char_or+0x28>
    26d4:	2301      	movs	r3, #1
    26d6:	e000      	b.n	26da <is_char_or+0x2a>
    26d8:	2300      	movs	r3, #0
    26da:	f003 0301 	and.w	r3, r3, #1
    26de:	b2db      	uxtb	r3, r3
}
    26e0:	4618      	mov	r0, r3
    26e2:	370c      	adds	r7, #12
    26e4:	46bd      	mov	sp, r7
    26e6:	f85d 7b04 	ldr.w	r7, [sp], #4
    26ea:	4770      	bx	lr

000026ec <is_char_or3>:

STATIC bool is_char_or3(mp_lexer_t *lex, byte c1, byte c2, byte c3) {
    26ec:	b480      	push	{r7}
    26ee:	b083      	sub	sp, #12
    26f0:	af00      	add	r7, sp, #0
    26f2:	6078      	str	r0, [r7, #4]
    26f4:	4608      	mov	r0, r1
    26f6:	4611      	mov	r1, r2
    26f8:	461a      	mov	r2, r3
    26fa:	4603      	mov	r3, r0
    26fc:	70fb      	strb	r3, [r7, #3]
    26fe:	460b      	mov	r3, r1
    2700:	70bb      	strb	r3, [r7, #2]
    2702:	4613      	mov	r3, r2
    2704:	707b      	strb	r3, [r7, #1]
    return lex->chr0 == c1 || lex->chr0 == c2 || lex->chr0 == c3;
    2706:	687b      	ldr	r3, [r7, #4]
    2708:	691a      	ldr	r2, [r3, #16]
    270a:	78fb      	ldrb	r3, [r7, #3]
    270c:	429a      	cmp	r2, r3
    270e:	d009      	beq.n	2724 <is_char_or3+0x38>
    2710:	687b      	ldr	r3, [r7, #4]
    2712:	691a      	ldr	r2, [r3, #16]
    2714:	78bb      	ldrb	r3, [r7, #2]
    2716:	429a      	cmp	r2, r3
    2718:	d004      	beq.n	2724 <is_char_or3+0x38>
    271a:	687b      	ldr	r3, [r7, #4]
    271c:	691a      	ldr	r2, [r3, #16]
    271e:	787b      	ldrb	r3, [r7, #1]
    2720:	429a      	cmp	r2, r3
    2722:	d101      	bne.n	2728 <is_char_or3+0x3c>
    2724:	2301      	movs	r3, #1
    2726:	e000      	b.n	272a <is_char_or3+0x3e>
    2728:	2300      	movs	r3, #0
    272a:	f003 0301 	and.w	r3, r3, #1
    272e:	b2db      	uxtb	r3, r3
}
    2730:	4618      	mov	r0, r3
    2732:	370c      	adds	r7, #12
    2734:	46bd      	mov	sp, r7
    2736:	f85d 7b04 	ldr.w	r7, [sp], #4
    273a:	4770      	bx	lr

0000273c <is_char_following>:

STATIC bool is_char_following(mp_lexer_t *lex, byte c) {
    273c:	b480      	push	{r7}
    273e:	b083      	sub	sp, #12
    2740:	af00      	add	r7, sp, #0
    2742:	6078      	str	r0, [r7, #4]
    2744:	460b      	mov	r3, r1
    2746:	70fb      	strb	r3, [r7, #3]
    return lex->chr1 == c;
    2748:	687b      	ldr	r3, [r7, #4]
    274a:	695a      	ldr	r2, [r3, #20]
    274c:	78fb      	ldrb	r3, [r7, #3]
    274e:	429a      	cmp	r2, r3
    2750:	bf0c      	ite	eq
    2752:	2301      	moveq	r3, #1
    2754:	2300      	movne	r3, #0
    2756:	b2db      	uxtb	r3, r3
}
    2758:	4618      	mov	r0, r3
    275a:	370c      	adds	r7, #12
    275c:	46bd      	mov	sp, r7
    275e:	f85d 7b04 	ldr.w	r7, [sp], #4
    2762:	4770      	bx	lr

00002764 <is_char_following_or>:

STATIC bool is_char_following_or(mp_lexer_t *lex, byte c1, byte c2) {
    2764:	b480      	push	{r7}
    2766:	b083      	sub	sp, #12
    2768:	af00      	add	r7, sp, #0
    276a:	6078      	str	r0, [r7, #4]
    276c:	460b      	mov	r3, r1
    276e:	70fb      	strb	r3, [r7, #3]
    2770:	4613      	mov	r3, r2
    2772:	70bb      	strb	r3, [r7, #2]
    return lex->chr1 == c1 || lex->chr1 == c2;
    2774:	687b      	ldr	r3, [r7, #4]
    2776:	695a      	ldr	r2, [r3, #20]
    2778:	78fb      	ldrb	r3, [r7, #3]
    277a:	429a      	cmp	r2, r3
    277c:	d004      	beq.n	2788 <is_char_following_or+0x24>
    277e:	687b      	ldr	r3, [r7, #4]
    2780:	695a      	ldr	r2, [r3, #20]
    2782:	78bb      	ldrb	r3, [r7, #2]
    2784:	429a      	cmp	r2, r3
    2786:	d101      	bne.n	278c <is_char_following_or+0x28>
    2788:	2301      	movs	r3, #1
    278a:	e000      	b.n	278e <is_char_following_or+0x2a>
    278c:	2300      	movs	r3, #0
    278e:	f003 0301 	and.w	r3, r3, #1
    2792:	b2db      	uxtb	r3, r3
}
    2794:	4618      	mov	r0, r3
    2796:	370c      	adds	r7, #12
    2798:	46bd      	mov	sp, r7
    279a:	f85d 7b04 	ldr.w	r7, [sp], #4
    279e:	4770      	bx	lr

000027a0 <is_char_following_following_or>:

STATIC bool is_char_following_following_or(mp_lexer_t *lex, byte c1, byte c2) {
    27a0:	b480      	push	{r7}
    27a2:	b083      	sub	sp, #12
    27a4:	af00      	add	r7, sp, #0
    27a6:	6078      	str	r0, [r7, #4]
    27a8:	460b      	mov	r3, r1
    27aa:	70fb      	strb	r3, [r7, #3]
    27ac:	4613      	mov	r3, r2
    27ae:	70bb      	strb	r3, [r7, #2]
    return lex->chr2 == c1 || lex->chr2 == c2;
    27b0:	687b      	ldr	r3, [r7, #4]
    27b2:	699a      	ldr	r2, [r3, #24]
    27b4:	78fb      	ldrb	r3, [r7, #3]
    27b6:	429a      	cmp	r2, r3
    27b8:	d004      	beq.n	27c4 <is_char_following_following_or+0x24>
    27ba:	687b      	ldr	r3, [r7, #4]
    27bc:	699a      	ldr	r2, [r3, #24]
    27be:	78bb      	ldrb	r3, [r7, #2]
    27c0:	429a      	cmp	r2, r3
    27c2:	d101      	bne.n	27c8 <is_char_following_following_or+0x28>
    27c4:	2301      	movs	r3, #1
    27c6:	e000      	b.n	27ca <is_char_following_following_or+0x2a>
    27c8:	2300      	movs	r3, #0
    27ca:	f003 0301 	and.w	r3, r3, #1
    27ce:	b2db      	uxtb	r3, r3
}
    27d0:	4618      	mov	r0, r3
    27d2:	370c      	adds	r7, #12
    27d4:	46bd      	mov	sp, r7
    27d6:	f85d 7b04 	ldr.w	r7, [sp], #4
    27da:	4770      	bx	lr

000027dc <is_char_and>:

STATIC bool is_char_and(mp_lexer_t *lex, byte c1, byte c2) {
    27dc:	b480      	push	{r7}
    27de:	b083      	sub	sp, #12
    27e0:	af00      	add	r7, sp, #0
    27e2:	6078      	str	r0, [r7, #4]
    27e4:	460b      	mov	r3, r1
    27e6:	70fb      	strb	r3, [r7, #3]
    27e8:	4613      	mov	r3, r2
    27ea:	70bb      	strb	r3, [r7, #2]
    return lex->chr0 == c1 && lex->chr1 == c2;
    27ec:	687b      	ldr	r3, [r7, #4]
    27ee:	691a      	ldr	r2, [r3, #16]
    27f0:	78fb      	ldrb	r3, [r7, #3]
    27f2:	429a      	cmp	r2, r3
    27f4:	d106      	bne.n	2804 <is_char_and+0x28>
    27f6:	687b      	ldr	r3, [r7, #4]
    27f8:	695a      	ldr	r2, [r3, #20]
    27fa:	78bb      	ldrb	r3, [r7, #2]
    27fc:	429a      	cmp	r2, r3
    27fe:	d101      	bne.n	2804 <is_char_and+0x28>
    2800:	2301      	movs	r3, #1
    2802:	e000      	b.n	2806 <is_char_and+0x2a>
    2804:	2300      	movs	r3, #0
    2806:	f003 0301 	and.w	r3, r3, #1
    280a:	b2db      	uxtb	r3, r3
}
    280c:	4618      	mov	r0, r3
    280e:	370c      	adds	r7, #12
    2810:	46bd      	mov	sp, r7
    2812:	f85d 7b04 	ldr.w	r7, [sp], #4
    2816:	4770      	bx	lr

00002818 <is_whitespace>:

STATIC bool is_whitespace(mp_lexer_t *lex) {
    2818:	b580      	push	{r7, lr}
    281a:	b082      	sub	sp, #8
    281c:	af00      	add	r7, sp, #0
    281e:	6078      	str	r0, [r7, #4]
    return unichar_isspace(lex->chr0);
    2820:	687b      	ldr	r3, [r7, #4]
    2822:	691b      	ldr	r3, [r3, #16]
    2824:	4618      	mov	r0, r3
    2826:	f7ff fd93 	bl	2350 <unichar_isspace>
    282a:	4603      	mov	r3, r0
}
    282c:	4618      	mov	r0, r3
    282e:	3708      	adds	r7, #8
    2830:	46bd      	mov	sp, r7
    2832:	bd80      	pop	{r7, pc}

00002834 <is_letter>:

STATIC bool is_letter(mp_lexer_t *lex) {
    2834:	b580      	push	{r7, lr}
    2836:	b082      	sub	sp, #8
    2838:	af00      	add	r7, sp, #0
    283a:	6078      	str	r0, [r7, #4]
    return unichar_isalpha(lex->chr0);
    283c:	687b      	ldr	r3, [r7, #4]
    283e:	691b      	ldr	r3, [r3, #16]
    2840:	4618      	mov	r0, r3
    2842:	f7ff fda3 	bl	238c <unichar_isalpha>
    2846:	4603      	mov	r3, r0
}
    2848:	4618      	mov	r0, r3
    284a:	3708      	adds	r7, #8
    284c:	46bd      	mov	sp, r7
    284e:	bd80      	pop	{r7, pc}

00002850 <is_digit>:

STATIC bool is_digit(mp_lexer_t *lex) {
    2850:	b580      	push	{r7, lr}
    2852:	b082      	sub	sp, #8
    2854:	af00      	add	r7, sp, #0
    2856:	6078      	str	r0, [r7, #4]
    return unichar_isdigit(lex->chr0);
    2858:	687b      	ldr	r3, [r7, #4]
    285a:	691b      	ldr	r3, [r3, #16]
    285c:	4618      	mov	r0, r3
    285e:	f7ff fdb3 	bl	23c8 <unichar_isdigit>
    2862:	4603      	mov	r3, r0
}
    2864:	4618      	mov	r0, r3
    2866:	3708      	adds	r7, #8
    2868:	46bd      	mov	sp, r7
    286a:	bd80      	pop	{r7, pc}

0000286c <is_following_digit>:

STATIC bool is_following_digit(mp_lexer_t *lex) {
    286c:	b580      	push	{r7, lr}
    286e:	b082      	sub	sp, #8
    2870:	af00      	add	r7, sp, #0
    2872:	6078      	str	r0, [r7, #4]
    return unichar_isdigit(lex->chr1);
    2874:	687b      	ldr	r3, [r7, #4]
    2876:	695b      	ldr	r3, [r3, #20]
    2878:	4618      	mov	r0, r3
    287a:	f7ff fda5 	bl	23c8 <unichar_isdigit>
    287e:	4603      	mov	r3, r0
}
    2880:	4618      	mov	r0, r3
    2882:	3708      	adds	r7, #8
    2884:	46bd      	mov	sp, r7
    2886:	bd80      	pop	{r7, pc}

00002888 <is_following_base_char>:

STATIC bool is_following_base_char(mp_lexer_t *lex) {
    2888:	b480      	push	{r7}
    288a:	b085      	sub	sp, #20
    288c:	af00      	add	r7, sp, #0
    288e:	6078      	str	r0, [r7, #4]
    const unichar chr1 = lex->chr1 | 0x20;
    2890:	687b      	ldr	r3, [r7, #4]
    2892:	695b      	ldr	r3, [r3, #20]
    2894:	f043 0320 	orr.w	r3, r3, #32
    2898:	60fb      	str	r3, [r7, #12]
    return chr1 == 'b' || chr1 == 'o' || chr1 == 'x';
    289a:	68fb      	ldr	r3, [r7, #12]
    289c:	2b62      	cmp	r3, #98	; 0x62
    289e:	d005      	beq.n	28ac <is_following_base_char+0x24>
    28a0:	68fb      	ldr	r3, [r7, #12]
    28a2:	2b6f      	cmp	r3, #111	; 0x6f
    28a4:	d002      	beq.n	28ac <is_following_base_char+0x24>
    28a6:	68fb      	ldr	r3, [r7, #12]
    28a8:	2b78      	cmp	r3, #120	; 0x78
    28aa:	d101      	bne.n	28b0 <is_following_base_char+0x28>
    28ac:	2301      	movs	r3, #1
    28ae:	e000      	b.n	28b2 <is_following_base_char+0x2a>
    28b0:	2300      	movs	r3, #0
    28b2:	f003 0301 	and.w	r3, r3, #1
    28b6:	b2db      	uxtb	r3, r3
}
    28b8:	4618      	mov	r0, r3
    28ba:	3714      	adds	r7, #20
    28bc:	46bd      	mov	sp, r7
    28be:	f85d 7b04 	ldr.w	r7, [sp], #4
    28c2:	4770      	bx	lr

000028c4 <is_following_odigit>:

STATIC bool is_following_odigit(mp_lexer_t *lex) {
    28c4:	b480      	push	{r7}
    28c6:	b083      	sub	sp, #12
    28c8:	af00      	add	r7, sp, #0
    28ca:	6078      	str	r0, [r7, #4]
    return lex->chr1 >= '0' && lex->chr1 <= '7';
    28cc:	687b      	ldr	r3, [r7, #4]
    28ce:	695b      	ldr	r3, [r3, #20]
    28d0:	2b2f      	cmp	r3, #47	; 0x2f
    28d2:	d905      	bls.n	28e0 <is_following_odigit+0x1c>
    28d4:	687b      	ldr	r3, [r7, #4]
    28d6:	695b      	ldr	r3, [r3, #20]
    28d8:	2b37      	cmp	r3, #55	; 0x37
    28da:	d801      	bhi.n	28e0 <is_following_odigit+0x1c>
    28dc:	2301      	movs	r3, #1
    28de:	e000      	b.n	28e2 <is_following_odigit+0x1e>
    28e0:	2300      	movs	r3, #0
    28e2:	f003 0301 	and.w	r3, r3, #1
    28e6:	b2db      	uxtb	r3, r3
}
    28e8:	4618      	mov	r0, r3
    28ea:	370c      	adds	r7, #12
    28ec:	46bd      	mov	sp, r7
    28ee:	f85d 7b04 	ldr.w	r7, [sp], #4
    28f2:	4770      	bx	lr

000028f4 <is_string_or_bytes>:

STATIC bool is_string_or_bytes(mp_lexer_t *lex) {
    28f4:	b580      	push	{r7, lr}
    28f6:	b082      	sub	sp, #8
    28f8:	af00      	add	r7, sp, #0
    28fa:	6078      	str	r0, [r7, #4]
    return is_char_or(lex, '\'', '\"')
    28fc:	2222      	movs	r2, #34	; 0x22
    28fe:	2127      	movs	r1, #39	; 0x27
    2900:	6878      	ldr	r0, [r7, #4]
    2902:	f7ff fed5 	bl	26b0 <is_char_or>
    2906:	4603      	mov	r3, r0
        || (is_char_or3(lex, 'r', 'u', 'b') && is_char_following_or(lex, '\'', '\"'))
        || ((is_char_and(lex, 'r', 'b') || is_char_and(lex, 'b', 'r'))
    2908:	2b00      	cmp	r3, #0
    290a:	d128      	bne.n	295e <is_string_or_bytes+0x6a>
        || (is_char_or3(lex, 'r', 'u', 'b') && is_char_following_or(lex, '\'', '\"'))
    290c:	2362      	movs	r3, #98	; 0x62
    290e:	2275      	movs	r2, #117	; 0x75
    2910:	2172      	movs	r1, #114	; 0x72
    2912:	6878      	ldr	r0, [r7, #4]
    2914:	f7ff feea 	bl	26ec <is_char_or3>
    2918:	4603      	mov	r3, r0
    291a:	2b00      	cmp	r3, #0
    291c:	d007      	beq.n	292e <is_string_or_bytes+0x3a>
    291e:	2222      	movs	r2, #34	; 0x22
    2920:	2127      	movs	r1, #39	; 0x27
    2922:	6878      	ldr	r0, [r7, #4]
    2924:	f7ff ff1e 	bl	2764 <is_char_following_or>
    2928:	4603      	mov	r3, r0
    292a:	2b00      	cmp	r3, #0
    292c:	d117      	bne.n	295e <is_string_or_bytes+0x6a>
        || ((is_char_and(lex, 'r', 'b') || is_char_and(lex, 'b', 'r'))
    292e:	2262      	movs	r2, #98	; 0x62
    2930:	2172      	movs	r1, #114	; 0x72
    2932:	6878      	ldr	r0, [r7, #4]
    2934:	f7ff ff52 	bl	27dc <is_char_and>
    2938:	4603      	mov	r3, r0
    293a:	2b00      	cmp	r3, #0
    293c:	d107      	bne.n	294e <is_string_or_bytes+0x5a>
    293e:	2272      	movs	r2, #114	; 0x72
    2940:	2162      	movs	r1, #98	; 0x62
    2942:	6878      	ldr	r0, [r7, #4]
    2944:	f7ff ff4a 	bl	27dc <is_char_and>
    2948:	4603      	mov	r3, r0
    294a:	2b00      	cmp	r3, #0
    294c:	d009      	beq.n	2962 <is_string_or_bytes+0x6e>
            && is_char_following_following_or(lex, '\'', '\"'));
    294e:	2222      	movs	r2, #34	; 0x22
    2950:	2127      	movs	r1, #39	; 0x27
    2952:	6878      	ldr	r0, [r7, #4]
    2954:	f7ff ff24 	bl	27a0 <is_char_following_following_or>
    2958:	4603      	mov	r3, r0
    295a:	2b00      	cmp	r3, #0
    295c:	d001      	beq.n	2962 <is_string_or_bytes+0x6e>
        || ((is_char_and(lex, 'r', 'b') || is_char_and(lex, 'b', 'r'))
    295e:	2301      	movs	r3, #1
    2960:	e000      	b.n	2964 <is_string_or_bytes+0x70>
    2962:	2300      	movs	r3, #0
    2964:	f003 0301 	and.w	r3, r3, #1
    2968:	b2db      	uxtb	r3, r3
}
    296a:	4618      	mov	r0, r3
    296c:	3708      	adds	r7, #8
    296e:	46bd      	mov	sp, r7
    2970:	bd80      	pop	{r7, pc}

00002972 <is_head_of_identifier>:

// to easily parse utf-8 identifiers we allow any raw byte with high bit set
STATIC bool is_head_of_identifier(mp_lexer_t *lex) {
    2972:	b580      	push	{r7, lr}
    2974:	b082      	sub	sp, #8
    2976:	af00      	add	r7, sp, #0
    2978:	6078      	str	r0, [r7, #4]
    return is_letter(lex) || lex->chr0 == '_' || lex->chr0 >= 0x80;
    297a:	6878      	ldr	r0, [r7, #4]
    297c:	f7ff ff5a 	bl	2834 <is_letter>
    2980:	4603      	mov	r3, r0
    2982:	2b00      	cmp	r3, #0
    2984:	d107      	bne.n	2996 <is_head_of_identifier+0x24>
    2986:	687b      	ldr	r3, [r7, #4]
    2988:	691b      	ldr	r3, [r3, #16]
    298a:	2b5f      	cmp	r3, #95	; 0x5f
    298c:	d003      	beq.n	2996 <is_head_of_identifier+0x24>
    298e:	687b      	ldr	r3, [r7, #4]
    2990:	691b      	ldr	r3, [r3, #16]
    2992:	2b7f      	cmp	r3, #127	; 0x7f
    2994:	d901      	bls.n	299a <is_head_of_identifier+0x28>
    2996:	2301      	movs	r3, #1
    2998:	e000      	b.n	299c <is_head_of_identifier+0x2a>
    299a:	2300      	movs	r3, #0
    299c:	f003 0301 	and.w	r3, r3, #1
    29a0:	b2db      	uxtb	r3, r3
}
    29a2:	4618      	mov	r0, r3
    29a4:	3708      	adds	r7, #8
    29a6:	46bd      	mov	sp, r7
    29a8:	bd80      	pop	{r7, pc}

000029aa <is_tail_of_identifier>:

STATIC bool is_tail_of_identifier(mp_lexer_t *lex) {
    29aa:	b580      	push	{r7, lr}
    29ac:	b082      	sub	sp, #8
    29ae:	af00      	add	r7, sp, #0
    29b0:	6078      	str	r0, [r7, #4]
    return is_head_of_identifier(lex) || is_digit(lex);
    29b2:	6878      	ldr	r0, [r7, #4]
    29b4:	f7ff ffdd 	bl	2972 <is_head_of_identifier>
    29b8:	4603      	mov	r3, r0
    29ba:	2b00      	cmp	r3, #0
    29bc:	d105      	bne.n	29ca <is_tail_of_identifier+0x20>
    29be:	6878      	ldr	r0, [r7, #4]
    29c0:	f7ff ff46 	bl	2850 <is_digit>
    29c4:	4603      	mov	r3, r0
    29c6:	2b00      	cmp	r3, #0
    29c8:	d001      	beq.n	29ce <is_tail_of_identifier+0x24>
    29ca:	2301      	movs	r3, #1
    29cc:	e000      	b.n	29d0 <is_tail_of_identifier+0x26>
    29ce:	2300      	movs	r3, #0
    29d0:	f003 0301 	and.w	r3, r3, #1
    29d4:	b2db      	uxtb	r3, r3
}
    29d6:	4618      	mov	r0, r3
    29d8:	3708      	adds	r7, #8
    29da:	46bd      	mov	sp, r7
    29dc:	bd80      	pop	{r7, pc}

000029de <next_char>:

STATIC void next_char(mp_lexer_t *lex) {
    29de:	b580      	push	{r7, lr}
    29e0:	b082      	sub	sp, #8
    29e2:	af00      	add	r7, sp, #0
    29e4:	6078      	str	r0, [r7, #4]
    if (lex->chr0 == '\n') {
    29e6:	687b      	ldr	r3, [r7, #4]
    29e8:	691b      	ldr	r3, [r3, #16]
    29ea:	2b0a      	cmp	r3, #10
    29ec:	d108      	bne.n	2a00 <next_char+0x22>
        // a new line
        ++lex->line;
    29ee:	687b      	ldr	r3, [r7, #4]
    29f0:	69db      	ldr	r3, [r3, #28]
    29f2:	1c5a      	adds	r2, r3, #1
    29f4:	687b      	ldr	r3, [r7, #4]
    29f6:	61da      	str	r2, [r3, #28]
        lex->column = 1;
    29f8:	687b      	ldr	r3, [r7, #4]
    29fa:	2201      	movs	r2, #1
    29fc:	621a      	str	r2, [r3, #32]
    29fe:	e011      	b.n	2a24 <next_char+0x46>
    } else if (lex->chr0 == '\t') {
    2a00:	687b      	ldr	r3, [r7, #4]
    2a02:	691b      	ldr	r3, [r3, #16]
    2a04:	2b09      	cmp	r3, #9
    2a06:	d108      	bne.n	2a1a <next_char+0x3c>
        // a tab
        lex->column = (((lex->column - 1 + TAB_SIZE) / TAB_SIZE) * TAB_SIZE) + 1;
    2a08:	687b      	ldr	r3, [r7, #4]
    2a0a:	6a1b      	ldr	r3, [r3, #32]
    2a0c:	3307      	adds	r3, #7
    2a0e:	f023 0307 	bic.w	r3, r3, #7
    2a12:	1c5a      	adds	r2, r3, #1
    2a14:	687b      	ldr	r3, [r7, #4]
    2a16:	621a      	str	r2, [r3, #32]
    2a18:	e004      	b.n	2a24 <next_char+0x46>
    } else {
        // a character worth one column
        ++lex->column;
    2a1a:	687b      	ldr	r3, [r7, #4]
    2a1c:	6a1b      	ldr	r3, [r3, #32]
    2a1e:	1c5a      	adds	r2, r3, #1
    2a20:	687b      	ldr	r3, [r7, #4]
    2a22:	621a      	str	r2, [r3, #32]
    }

    lex->chr0 = lex->chr1;
    2a24:	687b      	ldr	r3, [r7, #4]
    2a26:	695a      	ldr	r2, [r3, #20]
    2a28:	687b      	ldr	r3, [r7, #4]
    2a2a:	611a      	str	r2, [r3, #16]
    lex->chr1 = lex->chr2;
    2a2c:	687b      	ldr	r3, [r7, #4]
    2a2e:	699a      	ldr	r2, [r3, #24]
    2a30:	687b      	ldr	r3, [r7, #4]
    2a32:	615a      	str	r2, [r3, #20]
    lex->chr2 = lex->reader.readbyte(lex->reader.data);
    2a34:	687b      	ldr	r3, [r7, #4]
    2a36:	689b      	ldr	r3, [r3, #8]
    2a38:	687a      	ldr	r2, [r7, #4]
    2a3a:	6852      	ldr	r2, [r2, #4]
    2a3c:	4610      	mov	r0, r2
    2a3e:	4798      	blx	r3
    2a40:	4602      	mov	r2, r0
    2a42:	687b      	ldr	r3, [r7, #4]
    2a44:	619a      	str	r2, [r3, #24]

    if (lex->chr1 == '\r') {
    2a46:	687b      	ldr	r3, [r7, #4]
    2a48:	695b      	ldr	r3, [r3, #20]
    2a4a:	2b0d      	cmp	r3, #13
    2a4c:	d10f      	bne.n	2a6e <next_char+0x90>
        // CR is a new line, converted to LF
        lex->chr1 = '\n';
    2a4e:	687b      	ldr	r3, [r7, #4]
    2a50:	220a      	movs	r2, #10
    2a52:	615a      	str	r2, [r3, #20]
        if (lex->chr2 == '\n') {
    2a54:	687b      	ldr	r3, [r7, #4]
    2a56:	699b      	ldr	r3, [r3, #24]
    2a58:	2b0a      	cmp	r3, #10
    2a5a:	d108      	bne.n	2a6e <next_char+0x90>
            // CR LF is a single new line, throw out the extra LF
            lex->chr2 = lex->reader.readbyte(lex->reader.data);
    2a5c:	687b      	ldr	r3, [r7, #4]
    2a5e:	689b      	ldr	r3, [r3, #8]
    2a60:	687a      	ldr	r2, [r7, #4]
    2a62:	6852      	ldr	r2, [r2, #4]
    2a64:	4610      	mov	r0, r2
    2a66:	4798      	blx	r3
    2a68:	4602      	mov	r2, r0
    2a6a:	687b      	ldr	r3, [r7, #4]
    2a6c:	619a      	str	r2, [r3, #24]
        }
    }

    // check if we need to insert a newline at end of file
    if (lex->chr2 == MP_LEXER_EOF && lex->chr1 != MP_LEXER_EOF && lex->chr1 != '\n') {
    2a6e:	687b      	ldr	r3, [r7, #4]
    2a70:	699b      	ldr	r3, [r3, #24]
    2a72:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    2a76:	d10b      	bne.n	2a90 <next_char+0xb2>
    2a78:	687b      	ldr	r3, [r7, #4]
    2a7a:	695b      	ldr	r3, [r3, #20]
    2a7c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    2a80:	d006      	beq.n	2a90 <next_char+0xb2>
    2a82:	687b      	ldr	r3, [r7, #4]
    2a84:	695b      	ldr	r3, [r3, #20]
    2a86:	2b0a      	cmp	r3, #10
    2a88:	d002      	beq.n	2a90 <next_char+0xb2>
        lex->chr2 = '\n';
    2a8a:	687b      	ldr	r3, [r7, #4]
    2a8c:	220a      	movs	r2, #10
    2a8e:	619a      	str	r2, [r3, #24]
    }
}
    2a90:	bf00      	nop
    2a92:	3708      	adds	r7, #8
    2a94:	46bd      	mov	sp, r7
    2a96:	bd80      	pop	{r7, pc}

00002a98 <indent_push>:

STATIC void indent_push(mp_lexer_t *lex, size_t indent) {
    2a98:	b580      	push	{r7, lr}
    2a9a:	b082      	sub	sp, #8
    2a9c:	af00      	add	r7, sp, #0
    2a9e:	6078      	str	r0, [r7, #4]
    2aa0:	6039      	str	r1, [r7, #0]
    if (lex->num_indent_level >= lex->alloc_indent_level) {
    2aa2:	687b      	ldr	r3, [r7, #4]
    2aa4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    2aa6:	687b      	ldr	r3, [r7, #4]
    2aa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    2aaa:	429a      	cmp	r2, r3
    2aac:	d312      	bcc.n	2ad4 <indent_push+0x3c>
        lex->indent_level = m_renew(uint16_t, lex->indent_level, lex->alloc_indent_level, lex->alloc_indent_level + MICROPY_ALLOC_LEXEL_INDENT_INC);
    2aae:	687b      	ldr	r3, [r7, #4]
    2ab0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    2ab2:	687b      	ldr	r3, [r7, #4]
    2ab4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    2ab6:	3308      	adds	r3, #8
    2ab8:	005b      	lsls	r3, r3, #1
    2aba:	4619      	mov	r1, r3
    2abc:	4610      	mov	r0, r2
    2abe:	f7fd fc5f 	bl	380 <m_realloc>
    2ac2:	4602      	mov	r2, r0
    2ac4:	687b      	ldr	r3, [r7, #4]
    2ac6:	635a      	str	r2, [r3, #52]	; 0x34
        lex->alloc_indent_level += MICROPY_ALLOC_LEXEL_INDENT_INC;
    2ac8:	687b      	ldr	r3, [r7, #4]
    2aca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    2acc:	f103 0208 	add.w	r2, r3, #8
    2ad0:	687b      	ldr	r3, [r7, #4]
    2ad2:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    lex->indent_level[lex->num_indent_level++] = indent;
    2ad4:	687b      	ldr	r3, [r7, #4]
    2ad6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    2ad8:	687b      	ldr	r3, [r7, #4]
    2ada:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    2adc:	1c58      	adds	r0, r3, #1
    2ade:	6879      	ldr	r1, [r7, #4]
    2ae0:	6308      	str	r0, [r1, #48]	; 0x30
    2ae2:	005b      	lsls	r3, r3, #1
    2ae4:	4413      	add	r3, r2
    2ae6:	683a      	ldr	r2, [r7, #0]
    2ae8:	b292      	uxth	r2, r2
    2aea:	801a      	strh	r2, [r3, #0]
}
    2aec:	bf00      	nop
    2aee:	3708      	adds	r7, #8
    2af0:	46bd      	mov	sp, r7
    2af2:	bd80      	pop	{r7, pc}

00002af4 <indent_top>:

STATIC size_t indent_top(mp_lexer_t *lex) {
    2af4:	b480      	push	{r7}
    2af6:	b083      	sub	sp, #12
    2af8:	af00      	add	r7, sp, #0
    2afa:	6078      	str	r0, [r7, #4]
    return lex->indent_level[lex->num_indent_level - 1];
    2afc:	687b      	ldr	r3, [r7, #4]
    2afe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    2b00:	687b      	ldr	r3, [r7, #4]
    2b02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    2b04:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
    2b08:	3b01      	subs	r3, #1
    2b0a:	005b      	lsls	r3, r3, #1
    2b0c:	4413      	add	r3, r2
    2b0e:	881b      	ldrh	r3, [r3, #0]
}
    2b10:	4618      	mov	r0, r3
    2b12:	370c      	adds	r7, #12
    2b14:	46bd      	mov	sp, r7
    2b16:	f85d 7b04 	ldr.w	r7, [sp], #4
    2b1a:	4770      	bx	lr

00002b1c <indent_pop>:

STATIC void indent_pop(mp_lexer_t *lex) {
    2b1c:	b480      	push	{r7}
    2b1e:	b083      	sub	sp, #12
    2b20:	af00      	add	r7, sp, #0
    2b22:	6078      	str	r0, [r7, #4]
    lex->num_indent_level -= 1;
    2b24:	687b      	ldr	r3, [r7, #4]
    2b26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    2b28:	1e5a      	subs	r2, r3, #1
    2b2a:	687b      	ldr	r3, [r7, #4]
    2b2c:	631a      	str	r2, [r3, #48]	; 0x30
}
    2b2e:	bf00      	nop
    2b30:	370c      	adds	r7, #12
    2b32:	46bd      	mov	sp, r7
    2b34:	f85d 7b04 	ldr.w	r7, [sp], #4
    2b38:	4770      	bx	lr

00002b3a <get_hex>:
};

// This is called with CUR_CHAR() before first hex digit, and should return with
// it pointing to last hex digit
// num_digits must be greater than zero
STATIC bool get_hex(mp_lexer_t *lex, size_t num_digits, mp_uint_t *result) {
    2b3a:	b590      	push	{r4, r7, lr}
    2b3c:	b087      	sub	sp, #28
    2b3e:	af00      	add	r7, sp, #0
    2b40:	60f8      	str	r0, [r7, #12]
    2b42:	60b9      	str	r1, [r7, #8]
    2b44:	607a      	str	r2, [r7, #4]
    mp_uint_t num = 0;
    2b46:	2300      	movs	r3, #0
    2b48:	617b      	str	r3, [r7, #20]
    while (num_digits-- != 0) {
    2b4a:	e018      	b.n	2b7e <get_hex+0x44>
        next_char(lex);
    2b4c:	68f8      	ldr	r0, [r7, #12]
    2b4e:	f7ff ff46 	bl	29de <next_char>
        unichar c = CUR_CHAR(lex);
    2b52:	68fb      	ldr	r3, [r7, #12]
    2b54:	691b      	ldr	r3, [r3, #16]
    2b56:	613b      	str	r3, [r7, #16]
        if (!unichar_isxdigit(c)) {
    2b58:	6938      	ldr	r0, [r7, #16]
    2b5a:	f7ff fc53 	bl	2404 <unichar_isxdigit>
    2b5e:	4603      	mov	r3, r0
    2b60:	f083 0301 	eor.w	r3, r3, #1
    2b64:	b2db      	uxtb	r3, r3
    2b66:	2b00      	cmp	r3, #0
    2b68:	d001      	beq.n	2b6e <get_hex+0x34>
            return false;
    2b6a:	2300      	movs	r3, #0
    2b6c:	e010      	b.n	2b90 <get_hex+0x56>
        }
        num = (num << 4) + unichar_xdigit_value(c);
    2b6e:	697b      	ldr	r3, [r7, #20]
    2b70:	011c      	lsls	r4, r3, #4
    2b72:	6938      	ldr	r0, [r7, #16]
    2b74:	f7ff fce4 	bl	2540 <unichar_xdigit_value>
    2b78:	4603      	mov	r3, r0
    2b7a:	4423      	add	r3, r4
    2b7c:	617b      	str	r3, [r7, #20]
    while (num_digits-- != 0) {
    2b7e:	68bb      	ldr	r3, [r7, #8]
    2b80:	1e5a      	subs	r2, r3, #1
    2b82:	60ba      	str	r2, [r7, #8]
    2b84:	2b00      	cmp	r3, #0
    2b86:	d1e1      	bne.n	2b4c <get_hex+0x12>
    }
    *result = num;
    2b88:	687b      	ldr	r3, [r7, #4]
    2b8a:	697a      	ldr	r2, [r7, #20]
    2b8c:	601a      	str	r2, [r3, #0]
    return true;
    2b8e:	2301      	movs	r3, #1
}
    2b90:	4618      	mov	r0, r3
    2b92:	371c      	adds	r7, #28
    2b94:	46bd      	mov	sp, r7
    2b96:	bd90      	pop	{r4, r7, pc}

00002b98 <parse_string_literal>:

STATIC void parse_string_literal(mp_lexer_t *lex, bool is_raw) {
    2b98:	b580      	push	{r7, lr}
    2b9a:	b08a      	sub	sp, #40	; 0x28
    2b9c:	af00      	add	r7, sp, #0
    2b9e:	6078      	str	r0, [r7, #4]
    2ba0:	460b      	mov	r3, r1
    2ba2:	70fb      	strb	r3, [r7, #3]
    // get first quoting character
    char quote_char = '\'';
    2ba4:	2327      	movs	r3, #39	; 0x27
    2ba6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if (is_char(lex, '\"')) {
    2baa:	2122      	movs	r1, #34	; 0x22
    2bac:	6878      	ldr	r0, [r7, #4]
    2bae:	f7ff fd6b 	bl	2688 <is_char>
    2bb2:	4603      	mov	r3, r0
    2bb4:	2b00      	cmp	r3, #0
    2bb6:	d002      	beq.n	2bbe <parse_string_literal+0x26>
        quote_char = '\"';
    2bb8:	2322      	movs	r3, #34	; 0x22
    2bba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
    next_char(lex);
    2bbe:	6878      	ldr	r0, [r7, #4]
    2bc0:	f7ff ff0d 	bl	29de <next_char>

    // work out if it's a single or triple quoted literal
    size_t num_quotes;
    if (is_char_and(lex, quote_char, quote_char)) {
    2bc4:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
    2bc8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    2bcc:	4619      	mov	r1, r3
    2bce:	6878      	ldr	r0, [r7, #4]
    2bd0:	f7ff fe04 	bl	27dc <is_char_and>
    2bd4:	4603      	mov	r3, r0
    2bd6:	2b00      	cmp	r3, #0
    2bd8:	d008      	beq.n	2bec <parse_string_literal+0x54>
        // triple quotes
        next_char(lex);
    2bda:	6878      	ldr	r0, [r7, #4]
    2bdc:	f7ff feff 	bl	29de <next_char>
        next_char(lex);
    2be0:	6878      	ldr	r0, [r7, #4]
    2be2:	f7ff fefc 	bl	29de <next_char>
        num_quotes = 3;
    2be6:	2303      	movs	r3, #3
    2be8:	623b      	str	r3, [r7, #32]
    2bea:	e001      	b.n	2bf0 <parse_string_literal+0x58>
    } else {
        // single quotes
        num_quotes = 1;
    2bec:	2301      	movs	r3, #1
    2bee:	623b      	str	r3, [r7, #32]
    }

    size_t n_closing = 0;
    2bf0:	2300      	movs	r3, #0
    2bf2:	61fb      	str	r3, [r7, #28]
    while (!is_end(lex) && (num_quotes > 1 || !is_char(lex, '\n')) && n_closing < num_quotes) {
    2bf4:	e1ac      	b.n	2f50 <parse_string_literal+0x3b8>
        if (is_char(lex, quote_char)) {
    2bf6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    2bfa:	4619      	mov	r1, r3
    2bfc:	6878      	ldr	r0, [r7, #4]
    2bfe:	f7ff fd43 	bl	2688 <is_char>
    2c02:	4603      	mov	r3, r0
    2c04:	2b00      	cmp	r3, #0
    2c06:	d00c      	beq.n	2c22 <parse_string_literal+0x8a>
            n_closing += 1;
    2c08:	69fb      	ldr	r3, [r7, #28]
    2c0a:	3301      	adds	r3, #1
    2c0c:	61fb      	str	r3, [r7, #28]
            vstr_add_char(&lex->vstr, CUR_CHAR(lex));
    2c0e:	687b      	ldr	r3, [r7, #4]
    2c10:	f103 0244 	add.w	r2, r3, #68	; 0x44
    2c14:	687b      	ldr	r3, [r7, #4]
    2c16:	691b      	ldr	r3, [r3, #16]
    2c18:	4619      	mov	r1, r3
    2c1a:	4610      	mov	r0, r2
    2c1c:	f7fe fcc4 	bl	15a8 <vstr_add_char>
    2c20:	e193      	b.n	2f4a <parse_string_literal+0x3b2>
        } else {
            n_closing = 0;
    2c22:	2300      	movs	r3, #0
    2c24:	61fb      	str	r3, [r7, #28]
            if (is_char(lex, '\\')) {
    2c26:	215c      	movs	r1, #92	; 0x5c
    2c28:	6878      	ldr	r0, [r7, #4]
    2c2a:	f7ff fd2d 	bl	2688 <is_char>
    2c2e:	4603      	mov	r3, r0
    2c30:	2b00      	cmp	r3, #0
    2c32:	f000 8180 	beq.w	2f36 <parse_string_literal+0x39e>
                next_char(lex);
    2c36:	6878      	ldr	r0, [r7, #4]
    2c38:	f7ff fed1 	bl	29de <next_char>
                unichar c = CUR_CHAR(lex);
    2c3c:	687b      	ldr	r3, [r7, #4]
    2c3e:	691b      	ldr	r3, [r3, #16]
    2c40:	61bb      	str	r3, [r7, #24]
                if (is_raw) {
    2c42:	78fb      	ldrb	r3, [r7, #3]
    2c44:	2b00      	cmp	r3, #0
    2c46:	d006      	beq.n	2c56 <parse_string_literal+0xbe>
                    // raw strings allow escaping of quotes, but the backslash is also emitted
                    vstr_add_char(&lex->vstr, '\\');
    2c48:	687b      	ldr	r3, [r7, #4]
    2c4a:	3344      	adds	r3, #68	; 0x44
    2c4c:	215c      	movs	r1, #92	; 0x5c
    2c4e:	4618      	mov	r0, r3
    2c50:	f7fe fcaa 	bl	15a8 <vstr_add_char>
    2c54:	e15b      	b.n	2f0e <parse_string_literal+0x376>
                } else {
                    switch (c) {
    2c56:	69bb      	ldr	r3, [r7, #24]
    2c58:	3b0a      	subs	r3, #10
    2c5a:	2b6e      	cmp	r3, #110	; 0x6e
    2c5c:	f200 8129 	bhi.w	2eb2 <parse_string_literal+0x31a>
    2c60:	a201      	add	r2, pc, #4	; (adr r2, 2c68 <parse_string_literal+0xd0>)
    2c62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    2c66:	bf00      	nop
    2c68:	00002e25 	.word	0x00002e25
    2c6c:	00002eb3 	.word	0x00002eb3
    2c70:	00002eb3 	.word	0x00002eb3
    2c74:	00002eb3 	.word	0x00002eb3
    2c78:	00002eb3 	.word	0x00002eb3
    2c7c:	00002eb3 	.word	0x00002eb3
    2c80:	00002eb3 	.word	0x00002eb3
    2c84:	00002eb3 	.word	0x00002eb3
    2c88:	00002eb3 	.word	0x00002eb3
    2c8c:	00002eb3 	.word	0x00002eb3
    2c90:	00002eb3 	.word	0x00002eb3
    2c94:	00002eb3 	.word	0x00002eb3
    2c98:	00002eb3 	.word	0x00002eb3
    2c9c:	00002eb3 	.word	0x00002eb3
    2ca0:	00002eb3 	.word	0x00002eb3
    2ca4:	00002eb3 	.word	0x00002eb3
    2ca8:	00002eb3 	.word	0x00002eb3
    2cac:	00002eb3 	.word	0x00002eb3
    2cb0:	00002eb3 	.word	0x00002eb3
    2cb4:	00002eb3 	.word	0x00002eb3
    2cb8:	00002eb3 	.word	0x00002eb3
    2cbc:	00002eb3 	.word	0x00002eb3
    2cc0:	00002eb3 	.word	0x00002eb3
    2cc4:	00002eb3 	.word	0x00002eb3
    2cc8:	00002f0d 	.word	0x00002f0d
    2ccc:	00002eb3 	.word	0x00002eb3
    2cd0:	00002eb3 	.word	0x00002eb3
    2cd4:	00002eb3 	.word	0x00002eb3
    2cd8:	00002eb3 	.word	0x00002eb3
    2cdc:	00002f0d 	.word	0x00002f0d
    2ce0:	00002eb3 	.word	0x00002eb3
    2ce4:	00002eb3 	.word	0x00002eb3
    2ce8:	00002eb3 	.word	0x00002eb3
    2cec:	00002eb3 	.word	0x00002eb3
    2cf0:	00002eb3 	.word	0x00002eb3
    2cf4:	00002eb3 	.word	0x00002eb3
    2cf8:	00002eb3 	.word	0x00002eb3
    2cfc:	00002eb3 	.word	0x00002eb3
    2d00:	00002eb3 	.word	0x00002eb3
    2d04:	00002eb3 	.word	0x00002eb3
    2d08:	00002eb3 	.word	0x00002eb3
    2d0c:	00002eb3 	.word	0x00002eb3
    2d10:	00002eb3 	.word	0x00002eb3
    2d14:	00002eb3 	.word	0x00002eb3
    2d18:	00002eb3 	.word	0x00002eb3
    2d1c:	00002eb3 	.word	0x00002eb3
    2d20:	00002eb3 	.word	0x00002eb3
    2d24:	00002eb3 	.word	0x00002eb3
    2d28:	00002eb3 	.word	0x00002eb3
    2d2c:	00002eb3 	.word	0x00002eb3
    2d30:	00002eb3 	.word	0x00002eb3
    2d34:	00002eb3 	.word	0x00002eb3
    2d38:	00002eb3 	.word	0x00002eb3
    2d3c:	00002eb3 	.word	0x00002eb3
    2d40:	00002eb3 	.word	0x00002eb3
    2d44:	00002eb3 	.word	0x00002eb3
    2d48:	00002eb3 	.word	0x00002eb3
    2d4c:	00002eb3 	.word	0x00002eb3
    2d50:	00002eb3 	.word	0x00002eb3
    2d54:	00002eb3 	.word	0x00002eb3
    2d58:	00002eb3 	.word	0x00002eb3
    2d5c:	00002eb3 	.word	0x00002eb3
    2d60:	00002eb3 	.word	0x00002eb3
    2d64:	00002eb3 	.word	0x00002eb3
    2d68:	00002eb3 	.word	0x00002eb3
    2d6c:	00002eb3 	.word	0x00002eb3
    2d70:	00002eb3 	.word	0x00002eb3
    2d74:	00002eb3 	.word	0x00002eb3
    2d78:	00002ead 	.word	0x00002ead
    2d7c:	00002eb3 	.word	0x00002eb3
    2d80:	00002eb3 	.word	0x00002eb3
    2d84:	00002eb3 	.word	0x00002eb3
    2d88:	00002eb3 	.word	0x00002eb3
    2d8c:	00002eb3 	.word	0x00002eb3
    2d90:	00002eb3 	.word	0x00002eb3
    2d94:	00002e57 	.word	0x00002e57
    2d98:	00002eb3 	.word	0x00002eb3
    2d9c:	00002eb3 	.word	0x00002eb3
    2da0:	00002eb3 	.word	0x00002eb3
    2da4:	00002eb3 	.word	0x00002eb3
    2da8:	00002eb3 	.word	0x00002eb3
    2dac:	00002eb3 	.word	0x00002eb3
    2db0:	00002f0d 	.word	0x00002f0d
    2db4:	00002eb3 	.word	0x00002eb3
    2db8:	00002eb3 	.word	0x00002eb3
    2dbc:	00002eb3 	.word	0x00002eb3
    2dc0:	00002eb3 	.word	0x00002eb3
    2dc4:	00002e2d 	.word	0x00002e2d
    2dc8:	00002e33 	.word	0x00002e33
    2dcc:	00002eb3 	.word	0x00002eb3
    2dd0:	00002eb3 	.word	0x00002eb3
    2dd4:	00002eb3 	.word	0x00002eb3
    2dd8:	00002e4b 	.word	0x00002e4b
    2ddc:	00002eb3 	.word	0x00002eb3
    2de0:	00002eb3 	.word	0x00002eb3
    2de4:	00002eb3 	.word	0x00002eb3
    2de8:	00002eb3 	.word	0x00002eb3
    2dec:	00002eb3 	.word	0x00002eb3
    2df0:	00002eb3 	.word	0x00002eb3
    2df4:	00002eb3 	.word	0x00002eb3
    2df8:	00002e3f 	.word	0x00002e3f
    2dfc:	00002eb3 	.word	0x00002eb3
    2e00:	00002eb3 	.word	0x00002eb3
    2e04:	00002eb3 	.word	0x00002eb3
    2e08:	00002e51 	.word	0x00002e51
    2e0c:	00002eb3 	.word	0x00002eb3
    2e10:	00002e39 	.word	0x00002e39
    2e14:	00002e57 	.word	0x00002e57
    2e18:	00002e45 	.word	0x00002e45
    2e1c:	00002eb3 	.word	0x00002eb3
    2e20:	00002e6d 	.word	0x00002e6d
                        // note: "c" can never be MP_LEXER_EOF because next_char
                        // always inserts a newline at the end of the input stream
                        case '\n': c = MP_LEXER_EOF; break; // backslash escape the newline, just ignore it
    2e24:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    2e28:	61bb      	str	r3, [r7, #24]
    2e2a:	e070      	b.n	2f0e <parse_string_literal+0x376>
                        case '\\': break;
                        case '\'': break;
                        case '"': break;
                        case 'a': c = 0x07; break;
    2e2c:	2307      	movs	r3, #7
    2e2e:	61bb      	str	r3, [r7, #24]
    2e30:	e06d      	b.n	2f0e <parse_string_literal+0x376>
                        case 'b': c = 0x08; break;
    2e32:	2308      	movs	r3, #8
    2e34:	61bb      	str	r3, [r7, #24]
    2e36:	e06a      	b.n	2f0e <parse_string_literal+0x376>
                        case 't': c = 0x09; break;
    2e38:	2309      	movs	r3, #9
    2e3a:	61bb      	str	r3, [r7, #24]
    2e3c:	e067      	b.n	2f0e <parse_string_literal+0x376>
                        case 'n': c = 0x0a; break;
    2e3e:	230a      	movs	r3, #10
    2e40:	61bb      	str	r3, [r7, #24]
    2e42:	e064      	b.n	2f0e <parse_string_literal+0x376>
                        case 'v': c = 0x0b; break;
    2e44:	230b      	movs	r3, #11
    2e46:	61bb      	str	r3, [r7, #24]
    2e48:	e061      	b.n	2f0e <parse_string_literal+0x376>
                        case 'f': c = 0x0c; break;
    2e4a:	230c      	movs	r3, #12
    2e4c:	61bb      	str	r3, [r7, #24]
    2e4e:	e05e      	b.n	2f0e <parse_string_literal+0x376>
                        case 'r': c = 0x0d; break;
    2e50:	230d      	movs	r3, #13
    2e52:	61bb      	str	r3, [r7, #24]
    2e54:	e05b      	b.n	2f0e <parse_string_literal+0x376>
                        case 'u':
                        case 'U':
                            if (lex->tok_kind == MP_TOKEN_BYTES) {
    2e56:	687b      	ldr	r3, [r7, #4]
    2e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    2e5a:	2b0b      	cmp	r3, #11
    2e5c:	d106      	bne.n	2e6c <parse_string_literal+0x2d4>
                                // b'\u1234' == b'\\u1234'
                                vstr_add_char(&lex->vstr, '\\');
    2e5e:	687b      	ldr	r3, [r7, #4]
    2e60:	3344      	adds	r3, #68	; 0x44
    2e62:	215c      	movs	r1, #92	; 0x5c
    2e64:	4618      	mov	r0, r3
    2e66:	f7fe fb9f 	bl	15a8 <vstr_add_char>
                                break;
    2e6a:	e050      	b.n	2f0e <parse_string_literal+0x376>
                            }
                            // Otherwise fall through.
                        case 'x':
                        {
                            mp_uint_t num = 0;
    2e6c:	2300      	movs	r3, #0
    2e6e:	60fb      	str	r3, [r7, #12]
                            if (!get_hex(lex, (c == 'x' ? 2 : c == 'u' ? 4 : 8), &num)) {
    2e70:	69bb      	ldr	r3, [r7, #24]
    2e72:	2b78      	cmp	r3, #120	; 0x78
    2e74:	d006      	beq.n	2e84 <parse_string_literal+0x2ec>
    2e76:	69bb      	ldr	r3, [r7, #24]
    2e78:	2b75      	cmp	r3, #117	; 0x75
    2e7a:	d101      	bne.n	2e80 <parse_string_literal+0x2e8>
    2e7c:	2304      	movs	r3, #4
    2e7e:	e002      	b.n	2e86 <parse_string_literal+0x2ee>
    2e80:	2308      	movs	r3, #8
    2e82:	e000      	b.n	2e86 <parse_string_literal+0x2ee>
    2e84:	2302      	movs	r3, #2
    2e86:	f107 020c 	add.w	r2, r7, #12
    2e8a:	4619      	mov	r1, r3
    2e8c:	6878      	ldr	r0, [r7, #4]
    2e8e:	f7ff fe54 	bl	2b3a <get_hex>
    2e92:	4603      	mov	r3, r0
    2e94:	f083 0301 	eor.w	r3, r3, #1
    2e98:	b2db      	uxtb	r3, r3
    2e9a:	2b00      	cmp	r3, #0
    2e9c:	d002      	beq.n	2ea4 <parse_string_literal+0x30c>
                                // not enough hex chars for escape sequence
                                lex->tok_kind = MP_TOKEN_INVALID;
    2e9e:	687b      	ldr	r3, [r7, #4]
    2ea0:	2201      	movs	r2, #1
    2ea2:	641a      	str	r2, [r3, #64]	; 0x40
                            }
                            c = num;
    2ea4:	68fb      	ldr	r3, [r7, #12]
    2ea6:	61bb      	str	r3, [r7, #24]
                            break;
    2ea8:	bf00      	nop
    2eaa:	e030      	b.n	2f0e <parse_string_literal+0x376>
                            // Supporting '\N{LATIN SMALL LETTER A}' == 'a' would require keeping the
                            // entire Unicode name table in the core. As of Unicode 6.3.0, that's nearly
                            // 3MB of text; even gzip-compressed and with minimal structure, it'll take
                            // roughly half a meg of storage. This form of Unicode escape may be added
                            // later on, but it's definitely not a priority right now. -- CJA 20140607
                            mp_raise_NotImplementedError("unicode name escapes");
    2eac:	483e      	ldr	r0, [pc, #248]	; (2fa8 <parse_string_literal+0x410>)
    2eae:	f00a f855 	bl	cf5c <mp_raise_NotImplementedError>
                            break;
                        default:
                            if (c >= '0' && c <= '7') {
    2eb2:	69bb      	ldr	r3, [r7, #24]
    2eb4:	2b2f      	cmp	r3, #47	; 0x2f
    2eb6:	d922      	bls.n	2efe <parse_string_literal+0x366>
    2eb8:	69bb      	ldr	r3, [r7, #24]
    2eba:	2b37      	cmp	r3, #55	; 0x37
    2ebc:	d81f      	bhi.n	2efe <parse_string_literal+0x366>
                                // Octal sequence, 1-3 chars
                                size_t digits = 3;
    2ebe:	2303      	movs	r3, #3
    2ec0:	617b      	str	r3, [r7, #20]
                                mp_uint_t num = c - '0';
    2ec2:	69bb      	ldr	r3, [r7, #24]
    2ec4:	3b30      	subs	r3, #48	; 0x30
    2ec6:	613b      	str	r3, [r7, #16]
                                while (is_following_odigit(lex) && --digits != 0) {
    2ec8:	e009      	b.n	2ede <parse_string_literal+0x346>
                                    next_char(lex);
    2eca:	6878      	ldr	r0, [r7, #4]
    2ecc:	f7ff fd87 	bl	29de <next_char>
                                    num = num * 8 + (CUR_CHAR(lex) - '0');
    2ed0:	693b      	ldr	r3, [r7, #16]
    2ed2:	00da      	lsls	r2, r3, #3
    2ed4:	687b      	ldr	r3, [r7, #4]
    2ed6:	691b      	ldr	r3, [r3, #16]
    2ed8:	4413      	add	r3, r2
    2eda:	3b30      	subs	r3, #48	; 0x30
    2edc:	613b      	str	r3, [r7, #16]
                                while (is_following_odigit(lex) && --digits != 0) {
    2ede:	6878      	ldr	r0, [r7, #4]
    2ee0:	f7ff fcf0 	bl	28c4 <is_following_odigit>
    2ee4:	4603      	mov	r3, r0
    2ee6:	2b00      	cmp	r3, #0
    2ee8:	d005      	beq.n	2ef6 <parse_string_literal+0x35e>
    2eea:	697b      	ldr	r3, [r7, #20]
    2eec:	3b01      	subs	r3, #1
    2eee:	617b      	str	r3, [r7, #20]
    2ef0:	697b      	ldr	r3, [r7, #20]
    2ef2:	2b00      	cmp	r3, #0
    2ef4:	d1e9      	bne.n	2eca <parse_string_literal+0x332>
                                }
                                c = num;
    2ef6:	693b      	ldr	r3, [r7, #16]
    2ef8:	61bb      	str	r3, [r7, #24]
                            if (c >= '0' && c <= '7') {
    2efa:	bf00      	nop
                            } else {
                                // unrecognised escape character; CPython lets this through verbatim as '\' and then the character
                                vstr_add_char(&lex->vstr, '\\');
                            }
                            break;
    2efc:	e007      	b.n	2f0e <parse_string_literal+0x376>
                                vstr_add_char(&lex->vstr, '\\');
    2efe:	687b      	ldr	r3, [r7, #4]
    2f00:	3344      	adds	r3, #68	; 0x44
    2f02:	215c      	movs	r1, #92	; 0x5c
    2f04:	4618      	mov	r0, r3
    2f06:	f7fe fb4f 	bl	15a8 <vstr_add_char>
                            break;
    2f0a:	e000      	b.n	2f0e <parse_string_literal+0x376>
                        case '"': break;
    2f0c:	bf00      	nop
                    }
                }
                if (c != MP_LEXER_EOF) {
    2f0e:	69bb      	ldr	r3, [r7, #24]
    2f10:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    2f14:	d019      	beq.n	2f4a <parse_string_literal+0x3b2>
                            // this raises a generic SyntaxError; could provide more info
                            lex->tok_kind = MP_TOKEN_INVALID;
                        }
                    } else {
                        // without unicode everything is just added as an 8-bit byte
                        if (c < 0x100) {
    2f16:	69bb      	ldr	r3, [r7, #24]
    2f18:	2bff      	cmp	r3, #255	; 0xff
    2f1a:	d808      	bhi.n	2f2e <parse_string_literal+0x396>
                            vstr_add_byte(&lex->vstr, c);
    2f1c:	687b      	ldr	r3, [r7, #4]
    2f1e:	3344      	adds	r3, #68	; 0x44
    2f20:	69ba      	ldr	r2, [r7, #24]
    2f22:	b2d2      	uxtb	r2, r2
    2f24:	4611      	mov	r1, r2
    2f26:	4618      	mov	r0, r3
    2f28:	f7fe fb2c 	bl	1584 <vstr_add_byte>
    2f2c:	e00d      	b.n	2f4a <parse_string_literal+0x3b2>
                        } else {
                            // 8-bit character out of range
                            // this raises a generic SyntaxError; could provide more info
                            lex->tok_kind = MP_TOKEN_INVALID;
    2f2e:	687b      	ldr	r3, [r7, #4]
    2f30:	2201      	movs	r2, #1
    2f32:	641a      	str	r2, [r3, #64]	; 0x40
    2f34:	e009      	b.n	2f4a <parse_string_literal+0x3b2>
                    }
                }
            } else {
                // Add the "character" as a byte so that we remain 8-bit clean.
                // This way, strings are parsed correctly whether or not they contain utf-8 chars.
                vstr_add_byte(&lex->vstr, CUR_CHAR(lex));
    2f36:	687b      	ldr	r3, [r7, #4]
    2f38:	f103 0244 	add.w	r2, r3, #68	; 0x44
    2f3c:	687b      	ldr	r3, [r7, #4]
    2f3e:	691b      	ldr	r3, [r3, #16]
    2f40:	b2db      	uxtb	r3, r3
    2f42:	4619      	mov	r1, r3
    2f44:	4610      	mov	r0, r2
    2f46:	f7fe fb1d 	bl	1584 <vstr_add_byte>
            }
        }
        next_char(lex);
    2f4a:	6878      	ldr	r0, [r7, #4]
    2f4c:	f7ff fd47 	bl	29de <next_char>
    while (!is_end(lex) && (num_quotes > 1 || !is_char(lex, '\n')) && n_closing < num_quotes) {
    2f50:	6878      	ldr	r0, [r7, #4]
    2f52:	f7ff fb76 	bl	2642 <is_end>
    2f56:	4603      	mov	r3, r0
    2f58:	f083 0301 	eor.w	r3, r3, #1
    2f5c:	b2db      	uxtb	r3, r3
    2f5e:	2b00      	cmp	r3, #0
    2f60:	d011      	beq.n	2f86 <parse_string_literal+0x3ee>
    2f62:	6a3b      	ldr	r3, [r7, #32]
    2f64:	2b01      	cmp	r3, #1
    2f66:	d809      	bhi.n	2f7c <parse_string_literal+0x3e4>
    2f68:	210a      	movs	r1, #10
    2f6a:	6878      	ldr	r0, [r7, #4]
    2f6c:	f7ff fb8c 	bl	2688 <is_char>
    2f70:	4603      	mov	r3, r0
    2f72:	f083 0301 	eor.w	r3, r3, #1
    2f76:	b2db      	uxtb	r3, r3
    2f78:	2b00      	cmp	r3, #0
    2f7a:	d004      	beq.n	2f86 <parse_string_literal+0x3ee>
    2f7c:	69fa      	ldr	r2, [r7, #28]
    2f7e:	6a3b      	ldr	r3, [r7, #32]
    2f80:	429a      	cmp	r2, r3
    2f82:	f4ff ae38 	bcc.w	2bf6 <parse_string_literal+0x5e>
    }

    // check we got the required end quotes
    if (n_closing < num_quotes) {
    2f86:	69fa      	ldr	r2, [r7, #28]
    2f88:	6a3b      	ldr	r3, [r7, #32]
    2f8a:	429a      	cmp	r2, r3
    2f8c:	d202      	bcs.n	2f94 <parse_string_literal+0x3fc>
        lex->tok_kind = MP_TOKEN_LONELY_STRING_OPEN;
    2f8e:	687b      	ldr	r3, [r7, #4]
    2f90:	2203      	movs	r2, #3
    2f92:	641a      	str	r2, [r3, #64]	; 0x40
    }

    // cut off the end quotes from the token text
    vstr_cut_tail_bytes(&lex->vstr, n_closing);
    2f94:	687b      	ldr	r3, [r7, #4]
    2f96:	3344      	adds	r3, #68	; 0x44
    2f98:	69f9      	ldr	r1, [r7, #28]
    2f9a:	4618      	mov	r0, r3
    2f9c:	f7fe fbad 	bl	16fa <vstr_cut_tail_bytes>
}
    2fa0:	bf00      	nop
    2fa2:	3728      	adds	r7, #40	; 0x28
    2fa4:	46bd      	mov	sp, r7
    2fa6:	bd80      	pop	{r7, pc}
    2fa8:	0001d8c8 	.word	0x0001d8c8

00002fac <skip_whitespace>:

STATIC bool skip_whitespace(mp_lexer_t *lex, bool stop_at_newline) {
    2fac:	b580      	push	{r7, lr}
    2fae:	b084      	sub	sp, #16
    2fb0:	af00      	add	r7, sp, #0
    2fb2:	6078      	str	r0, [r7, #4]
    2fb4:	460b      	mov	r3, r1
    2fb6:	70fb      	strb	r3, [r7, #3]
    bool had_physical_newline = false;
    2fb8:	2300      	movs	r3, #0
    2fba:	73fb      	strb	r3, [r7, #15]
    while (!is_end(lex)) {
    2fbc:	e04b      	b.n	3056 <skip_whitespace+0xaa>
        if (is_physical_newline(lex)) {
    2fbe:	6878      	ldr	r0, [r7, #4]
    2fc0:	f7ff fb51 	bl	2666 <is_physical_newline>
    2fc4:	4603      	mov	r3, r0
    2fc6:	2b00      	cmp	r3, #0
    2fc8:	d00c      	beq.n	2fe4 <skip_whitespace+0x38>
            if (stop_at_newline && lex->nested_bracket_level == 0) {
    2fca:	78fb      	ldrb	r3, [r7, #3]
    2fcc:	2b00      	cmp	r3, #0
    2fce:	d003      	beq.n	2fd8 <skip_whitespace+0x2c>
    2fd0:	687b      	ldr	r3, [r7, #4]
    2fd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2fd4:	2b00      	cmp	r3, #0
    2fd6:	d048      	beq.n	306a <skip_whitespace+0xbe>
                break;
            }
            had_physical_newline = true;
    2fd8:	2301      	movs	r3, #1
    2fda:	73fb      	strb	r3, [r7, #15]
            next_char(lex);
    2fdc:	6878      	ldr	r0, [r7, #4]
    2fde:	f7ff fcfe 	bl	29de <next_char>
    2fe2:	e038      	b.n	3056 <skip_whitespace+0xaa>
        } else if (is_whitespace(lex)) {
    2fe4:	6878      	ldr	r0, [r7, #4]
    2fe6:	f7ff fc17 	bl	2818 <is_whitespace>
    2fea:	4603      	mov	r3, r0
    2fec:	2b00      	cmp	r3, #0
    2fee:	d003      	beq.n	2ff8 <skip_whitespace+0x4c>
            next_char(lex);
    2ff0:	6878      	ldr	r0, [r7, #4]
    2ff2:	f7ff fcf4 	bl	29de <next_char>
    2ff6:	e02e      	b.n	3056 <skip_whitespace+0xaa>
        } else if (is_char(lex, '#')) {
    2ff8:	2123      	movs	r1, #35	; 0x23
    2ffa:	6878      	ldr	r0, [r7, #4]
    2ffc:	f7ff fb44 	bl	2688 <is_char>
    3000:	4603      	mov	r3, r0
    3002:	2b00      	cmp	r3, #0
    3004:	d019      	beq.n	303a <skip_whitespace+0x8e>
            next_char(lex);
    3006:	6878      	ldr	r0, [r7, #4]
    3008:	f7ff fce9 	bl	29de <next_char>
            while (!is_end(lex) && !is_physical_newline(lex)) {
    300c:	e002      	b.n	3014 <skip_whitespace+0x68>
                next_char(lex);
    300e:	6878      	ldr	r0, [r7, #4]
    3010:	f7ff fce5 	bl	29de <next_char>
            while (!is_end(lex) && !is_physical_newline(lex)) {
    3014:	6878      	ldr	r0, [r7, #4]
    3016:	f7ff fb14 	bl	2642 <is_end>
    301a:	4603      	mov	r3, r0
    301c:	f083 0301 	eor.w	r3, r3, #1
    3020:	b2db      	uxtb	r3, r3
    3022:	2b00      	cmp	r3, #0
    3024:	d017      	beq.n	3056 <skip_whitespace+0xaa>
    3026:	6878      	ldr	r0, [r7, #4]
    3028:	f7ff fb1d 	bl	2666 <is_physical_newline>
    302c:	4603      	mov	r3, r0
    302e:	f083 0301 	eor.w	r3, r3, #1
    3032:	b2db      	uxtb	r3, r3
    3034:	2b00      	cmp	r3, #0
    3036:	d1ea      	bne.n	300e <skip_whitespace+0x62>
    3038:	e00d      	b.n	3056 <skip_whitespace+0xaa>
            }
            // had_physical_newline will be set on next loop
        } else if (is_char_and(lex, '\\', '\n')) {
    303a:	220a      	movs	r2, #10
    303c:	215c      	movs	r1, #92	; 0x5c
    303e:	6878      	ldr	r0, [r7, #4]
    3040:	f7ff fbcc 	bl	27dc <is_char_and>
    3044:	4603      	mov	r3, r0
    3046:	2b00      	cmp	r3, #0
    3048:	d011      	beq.n	306e <skip_whitespace+0xc2>
            // line-continuation, so don't set had_physical_newline
            next_char(lex);
    304a:	6878      	ldr	r0, [r7, #4]
    304c:	f7ff fcc7 	bl	29de <next_char>
            next_char(lex);
    3050:	6878      	ldr	r0, [r7, #4]
    3052:	f7ff fcc4 	bl	29de <next_char>
    while (!is_end(lex)) {
    3056:	6878      	ldr	r0, [r7, #4]
    3058:	f7ff faf3 	bl	2642 <is_end>
    305c:	4603      	mov	r3, r0
    305e:	f083 0301 	eor.w	r3, r3, #1
    3062:	b2db      	uxtb	r3, r3
    3064:	2b00      	cmp	r3, #0
    3066:	d1aa      	bne.n	2fbe <skip_whitespace+0x12>
    3068:	e002      	b.n	3070 <skip_whitespace+0xc4>
                break;
    306a:	bf00      	nop
    306c:	e000      	b.n	3070 <skip_whitespace+0xc4>
        } else {
            break;
    306e:	bf00      	nop
        }
    }
    return had_physical_newline;
    3070:	7bfb      	ldrb	r3, [r7, #15]
}
    3072:	4618      	mov	r0, r3
    3074:	3710      	adds	r7, #16
    3076:	46bd      	mov	sp, r7
    3078:	bd80      	pop	{r7, pc}

0000307a <mp_lexer_to_next>:

void mp_lexer_to_next(mp_lexer_t *lex) {
    307a:	b580      	push	{r7, lr}
    307c:	b08e      	sub	sp, #56	; 0x38
    307e:	af00      	add	r7, sp, #0
    3080:	6078      	str	r0, [r7, #4]
    // start new token text
    vstr_reset(&lex->vstr);
    3082:	687b      	ldr	r3, [r7, #4]
    3084:	3344      	adds	r3, #68	; 0x44
    3086:	4618      	mov	r0, r3
    3088:	f7ff face 	bl	2628 <vstr_reset>

    // skip white space and comments
    bool had_physical_newline = skip_whitespace(lex, false);
    308c:	2100      	movs	r1, #0
    308e:	6878      	ldr	r0, [r7, #4]
    3090:	f7ff ff8c 	bl	2fac <skip_whitespace>
    3094:	4603      	mov	r3, r0
    3096:	75fb      	strb	r3, [r7, #23]

    // set token source information
    lex->tok_line = lex->line;
    3098:	687b      	ldr	r3, [r7, #4]
    309a:	69da      	ldr	r2, [r3, #28]
    309c:	687b      	ldr	r3, [r7, #4]
    309e:	639a      	str	r2, [r3, #56]	; 0x38
    lex->tok_column = lex->column;
    30a0:	687b      	ldr	r3, [r7, #4]
    30a2:	6a1a      	ldr	r2, [r3, #32]
    30a4:	687b      	ldr	r3, [r7, #4]
    30a6:	63da      	str	r2, [r3, #60]	; 0x3c

    if (lex->emit_dent < 0) {
    30a8:	687b      	ldr	r3, [r7, #4]
    30aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    30ac:	2b00      	cmp	r3, #0
    30ae:	da08      	bge.n	30c2 <mp_lexer_to_next+0x48>
        lex->tok_kind = MP_TOKEN_DEDENT;
    30b0:	687b      	ldr	r3, [r7, #4]
    30b2:	2206      	movs	r2, #6
    30b4:	641a      	str	r2, [r3, #64]	; 0x40
        lex->emit_dent += 1;
    30b6:	687b      	ldr	r3, [r7, #4]
    30b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    30ba:	1c5a      	adds	r2, r3, #1
    30bc:	687b      	ldr	r3, [r7, #4]
    30be:	625a      	str	r2, [r3, #36]	; 0x24
            } else if (lex->tok_kind == MP_TOKEN_DEL_PAREN_CLOSE || lex->tok_kind == MP_TOKEN_DEL_BRACKET_CLOSE || lex->tok_kind == MP_TOKEN_DEL_BRACE_CLOSE) {
                lex->nested_bracket_level -= 1;
            }
        }
    }
}
    30c0:	e2ad      	b.n	361e <mp_lexer_to_next+0x5a4>
    } else if (lex->emit_dent > 0) {
    30c2:	687b      	ldr	r3, [r7, #4]
    30c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    30c6:	2b00      	cmp	r3, #0
    30c8:	dd08      	ble.n	30dc <mp_lexer_to_next+0x62>
        lex->tok_kind = MP_TOKEN_INDENT;
    30ca:	687b      	ldr	r3, [r7, #4]
    30cc:	2205      	movs	r2, #5
    30ce:	641a      	str	r2, [r3, #64]	; 0x40
        lex->emit_dent -= 1;
    30d0:	687b      	ldr	r3, [r7, #4]
    30d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    30d4:	1e5a      	subs	r2, r3, #1
    30d6:	687b      	ldr	r3, [r7, #4]
    30d8:	625a      	str	r2, [r3, #36]	; 0x24
}
    30da:	e2a0      	b.n	361e <mp_lexer_to_next+0x5a4>
    } else if (had_physical_newline && lex->nested_bracket_level == 0) {
    30dc:	7dfb      	ldrb	r3, [r7, #23]
    30de:	2b00      	cmp	r3, #0
    30e0:	d03e      	beq.n	3160 <mp_lexer_to_next+0xe6>
    30e2:	687b      	ldr	r3, [r7, #4]
    30e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    30e6:	2b00      	cmp	r3, #0
    30e8:	d13a      	bne.n	3160 <mp_lexer_to_next+0xe6>
        lex->tok_kind = MP_TOKEN_NEWLINE;
    30ea:	687b      	ldr	r3, [r7, #4]
    30ec:	2204      	movs	r2, #4
    30ee:	641a      	str	r2, [r3, #64]	; 0x40
        size_t num_spaces = lex->column - 1;
    30f0:	687b      	ldr	r3, [r7, #4]
    30f2:	6a1b      	ldr	r3, [r3, #32]
    30f4:	3b01      	subs	r3, #1
    30f6:	613b      	str	r3, [r7, #16]
        if (num_spaces == indent_top(lex)) {
    30f8:	6878      	ldr	r0, [r7, #4]
    30fa:	f7ff fcfb 	bl	2af4 <indent_top>
    30fe:	4602      	mov	r2, r0
    3100:	693b      	ldr	r3, [r7, #16]
    3102:	429a      	cmp	r2, r3
    3104:	f000 8282 	beq.w	360c <mp_lexer_to_next+0x592>
        } else if (num_spaces > indent_top(lex)) {
    3108:	6878      	ldr	r0, [r7, #4]
    310a:	f7ff fcf3 	bl	2af4 <indent_top>
    310e:	4602      	mov	r2, r0
    3110:	693b      	ldr	r3, [r7, #16]
    3112:	429a      	cmp	r2, r3
    3114:	d211      	bcs.n	313a <mp_lexer_to_next+0xc0>
            indent_push(lex, num_spaces);
    3116:	6939      	ldr	r1, [r7, #16]
    3118:	6878      	ldr	r0, [r7, #4]
    311a:	f7ff fcbd 	bl	2a98 <indent_push>
            lex->emit_dent += 1;
    311e:	687b      	ldr	r3, [r7, #4]
    3120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    3122:	1c5a      	adds	r2, r3, #1
    3124:	687b      	ldr	r3, [r7, #4]
    3126:	625a      	str	r2, [r3, #36]	; 0x24
    } else if (had_physical_newline && lex->nested_bracket_level == 0) {
    3128:	e270      	b.n	360c <mp_lexer_to_next+0x592>
                indent_pop(lex);
    312a:	6878      	ldr	r0, [r7, #4]
    312c:	f7ff fcf6 	bl	2b1c <indent_pop>
                lex->emit_dent -= 1;
    3130:	687b      	ldr	r3, [r7, #4]
    3132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    3134:	1e5a      	subs	r2, r3, #1
    3136:	687b      	ldr	r3, [r7, #4]
    3138:	625a      	str	r2, [r3, #36]	; 0x24
            while (num_spaces < indent_top(lex)) {
    313a:	6878      	ldr	r0, [r7, #4]
    313c:	f7ff fcda 	bl	2af4 <indent_top>
    3140:	4602      	mov	r2, r0
    3142:	693b      	ldr	r3, [r7, #16]
    3144:	429a      	cmp	r2, r3
    3146:	d8f0      	bhi.n	312a <mp_lexer_to_next+0xb0>
            if (num_spaces != indent_top(lex)) {
    3148:	6878      	ldr	r0, [r7, #4]
    314a:	f7ff fcd3 	bl	2af4 <indent_top>
    314e:	4602      	mov	r2, r0
    3150:	693b      	ldr	r3, [r7, #16]
    3152:	429a      	cmp	r2, r3
    3154:	f000 825a 	beq.w	360c <mp_lexer_to_next+0x592>
                lex->tok_kind = MP_TOKEN_DEDENT_MISMATCH;
    3158:	687b      	ldr	r3, [r7, #4]
    315a:	2202      	movs	r2, #2
    315c:	641a      	str	r2, [r3, #64]	; 0x40
    } else if (had_physical_newline && lex->nested_bracket_level == 0) {
    315e:	e255      	b.n	360c <mp_lexer_to_next+0x592>
    } else if (is_end(lex)) {
    3160:	6878      	ldr	r0, [r7, #4]
    3162:	f7ff fa6e 	bl	2642 <is_end>
    3166:	4603      	mov	r3, r0
    3168:	2b00      	cmp	r3, #0
    316a:	d003      	beq.n	3174 <mp_lexer_to_next+0xfa>
        lex->tok_kind = MP_TOKEN_END;
    316c:	687b      	ldr	r3, [r7, #4]
    316e:	2200      	movs	r2, #0
    3170:	641a      	str	r2, [r3, #64]	; 0x40
}
    3172:	e254      	b.n	361e <mp_lexer_to_next+0x5a4>
    } else if (is_string_or_bytes(lex)) {
    3174:	6878      	ldr	r0, [r7, #4]
    3176:	f7ff fbbd 	bl	28f4 <is_string_or_bytes>
    317a:	4603      	mov	r3, r0
    317c:	2b00      	cmp	r3, #0
    317e:	d06d      	beq.n	325c <mp_lexer_to_next+0x1e2>
        lex->tok_kind = MP_TOKEN_END;
    3180:	687b      	ldr	r3, [r7, #4]
    3182:	2200      	movs	r2, #0
    3184:	641a      	str	r2, [r3, #64]	; 0x40
            bool is_raw = false;
    3186:	2300      	movs	r3, #0
    3188:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
            mp_token_kind_t kind = MP_TOKEN_STRING;
    318c:	230a      	movs	r3, #10
    318e:	633b      	str	r3, [r7, #48]	; 0x30
            int n_char = 0;
    3190:	2300      	movs	r3, #0
    3192:	62fb      	str	r3, [r7, #44]	; 0x2c
            if (is_char(lex, 'u')) {
    3194:	2175      	movs	r1, #117	; 0x75
    3196:	6878      	ldr	r0, [r7, #4]
    3198:	f7ff fa76 	bl	2688 <is_char>
    319c:	4603      	mov	r3, r0
    319e:	2b00      	cmp	r3, #0
    31a0:	d002      	beq.n	31a8 <mp_lexer_to_next+0x12e>
                n_char = 1;
    31a2:	2301      	movs	r3, #1
    31a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    31a6:	e02e      	b.n	3206 <mp_lexer_to_next+0x18c>
            } else if (is_char(lex, 'b')) {
    31a8:	2162      	movs	r1, #98	; 0x62
    31aa:	6878      	ldr	r0, [r7, #4]
    31ac:	f7ff fa6c 	bl	2688 <is_char>
    31b0:	4603      	mov	r3, r0
    31b2:	2b00      	cmp	r3, #0
    31b4:	d010      	beq.n	31d8 <mp_lexer_to_next+0x15e>
                kind = MP_TOKEN_BYTES;
    31b6:	230b      	movs	r3, #11
    31b8:	633b      	str	r3, [r7, #48]	; 0x30
                n_char = 1;
    31ba:	2301      	movs	r3, #1
    31bc:	62fb      	str	r3, [r7, #44]	; 0x2c
                if (is_char_following(lex, 'r')) {
    31be:	2172      	movs	r1, #114	; 0x72
    31c0:	6878      	ldr	r0, [r7, #4]
    31c2:	f7ff fabb 	bl	273c <is_char_following>
    31c6:	4603      	mov	r3, r0
    31c8:	2b00      	cmp	r3, #0
    31ca:	d01c      	beq.n	3206 <mp_lexer_to_next+0x18c>
                    is_raw = true;
    31cc:	2301      	movs	r3, #1
    31ce:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
                    n_char = 2;
    31d2:	2302      	movs	r3, #2
    31d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    31d6:	e016      	b.n	3206 <mp_lexer_to_next+0x18c>
            } else if (is_char(lex, 'r')) {
    31d8:	2172      	movs	r1, #114	; 0x72
    31da:	6878      	ldr	r0, [r7, #4]
    31dc:	f7ff fa54 	bl	2688 <is_char>
    31e0:	4603      	mov	r3, r0
    31e2:	2b00      	cmp	r3, #0
    31e4:	d00f      	beq.n	3206 <mp_lexer_to_next+0x18c>
                is_raw = true;
    31e6:	2301      	movs	r3, #1
    31e8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
                n_char = 1;
    31ec:	2301      	movs	r3, #1
    31ee:	62fb      	str	r3, [r7, #44]	; 0x2c
                if (is_char_following(lex, 'b')) {
    31f0:	2162      	movs	r1, #98	; 0x62
    31f2:	6878      	ldr	r0, [r7, #4]
    31f4:	f7ff faa2 	bl	273c <is_char_following>
    31f8:	4603      	mov	r3, r0
    31fa:	2b00      	cmp	r3, #0
    31fc:	d003      	beq.n	3206 <mp_lexer_to_next+0x18c>
                    kind = MP_TOKEN_BYTES;
    31fe:	230b      	movs	r3, #11
    3200:	633b      	str	r3, [r7, #48]	; 0x30
                    n_char = 2;
    3202:	2302      	movs	r3, #2
    3204:	62fb      	str	r3, [r7, #44]	; 0x2c
            if (lex->tok_kind == MP_TOKEN_END) {
    3206:	687b      	ldr	r3, [r7, #4]
    3208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    320a:	2b00      	cmp	r3, #0
    320c:	d103      	bne.n	3216 <mp_lexer_to_next+0x19c>
                lex->tok_kind = kind;
    320e:	687b      	ldr	r3, [r7, #4]
    3210:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    3212:	641a      	str	r2, [r3, #64]	; 0x40
    3214:	e005      	b.n	3222 <mp_lexer_to_next+0x1a8>
            } else if (lex->tok_kind != kind) {
    3216:	687b      	ldr	r3, [r7, #4]
    3218:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    321a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    321c:	429a      	cmp	r2, r3
    321e:	f040 81f7 	bne.w	3610 <mp_lexer_to_next+0x596>
            if (n_char != 0) {
    3222:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    3224:	2b00      	cmp	r3, #0
    3226:	d008      	beq.n	323a <mp_lexer_to_next+0x1c0>
                next_char(lex);
    3228:	6878      	ldr	r0, [r7, #4]
    322a:	f7ff fbd8 	bl	29de <next_char>
                if (n_char == 2) {
    322e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    3230:	2b02      	cmp	r3, #2
    3232:	d102      	bne.n	323a <mp_lexer_to_next+0x1c0>
                    next_char(lex);
    3234:	6878      	ldr	r0, [r7, #4]
    3236:	f7ff fbd2 	bl	29de <next_char>
            parse_string_literal(lex, is_raw);
    323a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
    323e:	4619      	mov	r1, r3
    3240:	6878      	ldr	r0, [r7, #4]
    3242:	f7ff fca9 	bl	2b98 <parse_string_literal>
            skip_whitespace(lex, true);
    3246:	2101      	movs	r1, #1
    3248:	6878      	ldr	r0, [r7, #4]
    324a:	f7ff feaf 	bl	2fac <skip_whitespace>
        } while (is_string_or_bytes(lex));
    324e:	6878      	ldr	r0, [r7, #4]
    3250:	f7ff fb50 	bl	28f4 <is_string_or_bytes>
    3254:	4603      	mov	r3, r0
    3256:	2b00      	cmp	r3, #0
    3258:	d195      	bne.n	3186 <mp_lexer_to_next+0x10c>
}
    325a:	e1e0      	b.n	361e <mp_lexer_to_next+0x5a4>
    } else if (is_head_of_identifier(lex)) {
    325c:	6878      	ldr	r0, [r7, #4]
    325e:	f7ff fb88 	bl	2972 <is_head_of_identifier>
    3262:	4603      	mov	r3, r0
    3264:	2b00      	cmp	r3, #0
    3266:	d061      	beq.n	332c <mp_lexer_to_next+0x2b2>
        lex->tok_kind = MP_TOKEN_NAME;
    3268:	687b      	ldr	r3, [r7, #4]
    326a:	2207      	movs	r2, #7
    326c:	641a      	str	r2, [r3, #64]	; 0x40
        vstr_add_byte(&lex->vstr, CUR_CHAR(lex));
    326e:	687b      	ldr	r3, [r7, #4]
    3270:	f103 0244 	add.w	r2, r3, #68	; 0x44
    3274:	687b      	ldr	r3, [r7, #4]
    3276:	691b      	ldr	r3, [r3, #16]
    3278:	b2db      	uxtb	r3, r3
    327a:	4619      	mov	r1, r3
    327c:	4610      	mov	r0, r2
    327e:	f7fe f981 	bl	1584 <vstr_add_byte>
        next_char(lex);
    3282:	6878      	ldr	r0, [r7, #4]
    3284:	f7ff fbab 	bl	29de <next_char>
        while (!is_end(lex) && is_tail_of_identifier(lex)) {
    3288:	e00c      	b.n	32a4 <mp_lexer_to_next+0x22a>
            vstr_add_byte(&lex->vstr, CUR_CHAR(lex));
    328a:	687b      	ldr	r3, [r7, #4]
    328c:	f103 0244 	add.w	r2, r3, #68	; 0x44
    3290:	687b      	ldr	r3, [r7, #4]
    3292:	691b      	ldr	r3, [r3, #16]
    3294:	b2db      	uxtb	r3, r3
    3296:	4619      	mov	r1, r3
    3298:	4610      	mov	r0, r2
    329a:	f7fe f973 	bl	1584 <vstr_add_byte>
            next_char(lex);
    329e:	6878      	ldr	r0, [r7, #4]
    32a0:	f7ff fb9d 	bl	29de <next_char>
        while (!is_end(lex) && is_tail_of_identifier(lex)) {
    32a4:	6878      	ldr	r0, [r7, #4]
    32a6:	f7ff f9cc 	bl	2642 <is_end>
    32aa:	4603      	mov	r3, r0
    32ac:	f083 0301 	eor.w	r3, r3, #1
    32b0:	b2db      	uxtb	r3, r3
    32b2:	2b00      	cmp	r3, #0
    32b4:	d005      	beq.n	32c2 <mp_lexer_to_next+0x248>
    32b6:	6878      	ldr	r0, [r7, #4]
    32b8:	f7ff fb77 	bl	29aa <is_tail_of_identifier>
    32bc:	4603      	mov	r3, r0
    32be:	2b00      	cmp	r3, #0
    32c0:	d1e3      	bne.n	328a <mp_lexer_to_next+0x210>
        const char *s = vstr_null_terminated_str(&lex->vstr);
    32c2:	687b      	ldr	r3, [r7, #4]
    32c4:	3344      	adds	r3, #68	; 0x44
    32c6:	4618      	mov	r0, r3
    32c8:	f7fe f941 	bl	154e <vstr_null_terminated_str>
    32cc:	60f8      	str	r0, [r7, #12]
        for (size_t i = 0; i < MP_ARRAY_SIZE(tok_kw); i++) {
    32ce:	2300      	movs	r3, #0
    32d0:	62bb      	str	r3, [r7, #40]	; 0x28
    32d2:	e027      	b.n	3324 <mp_lexer_to_next+0x2aa>
            int cmp = strcmp(s, tok_kw[i]);
    32d4:	4aac      	ldr	r2, [pc, #688]	; (3588 <mp_lexer_to_next+0x50e>)
    32d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
    32d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    32dc:	4619      	mov	r1, r3
    32de:	68f8      	ldr	r0, [r7, #12]
    32e0:	f018 fcc0 	bl	1bc64 <strcmp>
    32e4:	60b8      	str	r0, [r7, #8]
            if (cmp == 0) {
    32e6:	68bb      	ldr	r3, [r7, #8]
    32e8:	2b00      	cmp	r3, #0
    32ea:	d114      	bne.n	3316 <mp_lexer_to_next+0x29c>
                lex->tok_kind = MP_TOKEN_KW_FALSE + i;
    32ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
    32ee:	f103 020d 	add.w	r2, r3, #13
    32f2:	687b      	ldr	r3, [r7, #4]
    32f4:	641a      	str	r2, [r3, #64]	; 0x40
                if (lex->tok_kind == MP_TOKEN_KW___DEBUG__) {
    32f6:	687b      	ldr	r3, [r7, #4]
    32f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    32fa:	2b10      	cmp	r3, #16
    32fc:	f040 818a 	bne.w	3614 <mp_lexer_to_next+0x59a>
                    lex->tok_kind = (MP_STATE_VM(mp_optimise_value) == 0 ? MP_TOKEN_KW_TRUE : MP_TOKEN_KW_FALSE);
    3300:	4ba2      	ldr	r3, [pc, #648]	; (358c <mp_lexer_to_next+0x512>)
    3302:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
    3306:	2b00      	cmp	r3, #0
    3308:	d101      	bne.n	330e <mp_lexer_to_next+0x294>
    330a:	220f      	movs	r2, #15
    330c:	e000      	b.n	3310 <mp_lexer_to_next+0x296>
    330e:	220d      	movs	r2, #13
    3310:	687b      	ldr	r3, [r7, #4]
    3312:	641a      	str	r2, [r3, #64]	; 0x40
                break;
    3314:	e17e      	b.n	3614 <mp_lexer_to_next+0x59a>
            } else if (cmp < 0) {
    3316:	68bb      	ldr	r3, [r7, #8]
    3318:	2b00      	cmp	r3, #0
    331a:	f2c0 817d 	blt.w	3618 <mp_lexer_to_next+0x59e>
        for (size_t i = 0; i < MP_ARRAY_SIZE(tok_kw); i++) {
    331e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3320:	3301      	adds	r3, #1
    3322:	62bb      	str	r3, [r7, #40]	; 0x28
    3324:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3326:	2b21      	cmp	r3, #33	; 0x21
    3328:	d9d4      	bls.n	32d4 <mp_lexer_to_next+0x25a>
}
    332a:	e178      	b.n	361e <mp_lexer_to_next+0x5a4>
    } else if (is_digit(lex) || (is_char(lex, '.') && is_following_digit(lex))) {
    332c:	6878      	ldr	r0, [r7, #4]
    332e:	f7ff fa8f 	bl	2850 <is_digit>
    3332:	4603      	mov	r3, r0
    3334:	2b00      	cmp	r3, #0
    3336:	d10e      	bne.n	3356 <mp_lexer_to_next+0x2dc>
    3338:	212e      	movs	r1, #46	; 0x2e
    333a:	6878      	ldr	r0, [r7, #4]
    333c:	f7ff f9a4 	bl	2688 <is_char>
    3340:	4603      	mov	r3, r0
    3342:	2b00      	cmp	r3, #0
    3344:	f000 80a1 	beq.w	348a <mp_lexer_to_next+0x410>
    3348:	6878      	ldr	r0, [r7, #4]
    334a:	f7ff fa8f 	bl	286c <is_following_digit>
    334e:	4603      	mov	r3, r0
    3350:	2b00      	cmp	r3, #0
    3352:	f000 809a 	beq.w	348a <mp_lexer_to_next+0x410>
        bool forced_integer = false;
    3356:	2300      	movs	r3, #0
    3358:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (is_char(lex, '.')) {
    335c:	212e      	movs	r1, #46	; 0x2e
    335e:	6878      	ldr	r0, [r7, #4]
    3360:	f7ff f992 	bl	2688 <is_char>
    3364:	4603      	mov	r3, r0
    3366:	2b00      	cmp	r3, #0
    3368:	d003      	beq.n	3372 <mp_lexer_to_next+0x2f8>
            lex->tok_kind = MP_TOKEN_FLOAT_OR_IMAG;
    336a:	687b      	ldr	r3, [r7, #4]
    336c:	2209      	movs	r2, #9
    336e:	641a      	str	r2, [r3, #64]	; 0x40
    3370:	e012      	b.n	3398 <mp_lexer_to_next+0x31e>
            lex->tok_kind = MP_TOKEN_INTEGER;
    3372:	687b      	ldr	r3, [r7, #4]
    3374:	2208      	movs	r2, #8
    3376:	641a      	str	r2, [r3, #64]	; 0x40
            if (is_char(lex, '0') && is_following_base_char(lex)) {
    3378:	2130      	movs	r1, #48	; 0x30
    337a:	6878      	ldr	r0, [r7, #4]
    337c:	f7ff f984 	bl	2688 <is_char>
    3380:	4603      	mov	r3, r0
    3382:	2b00      	cmp	r3, #0
    3384:	d008      	beq.n	3398 <mp_lexer_to_next+0x31e>
    3386:	6878      	ldr	r0, [r7, #4]
    3388:	f7ff fa7e 	bl	2888 <is_following_base_char>
    338c:	4603      	mov	r3, r0
    338e:	2b00      	cmp	r3, #0
    3390:	d002      	beq.n	3398 <mp_lexer_to_next+0x31e>
                forced_integer = true;
    3392:	2301      	movs	r3, #1
    3394:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        vstr_add_char(&lex->vstr, CUR_CHAR(lex));
    3398:	687b      	ldr	r3, [r7, #4]
    339a:	f103 0244 	add.w	r2, r3, #68	; 0x44
    339e:	687b      	ldr	r3, [r7, #4]
    33a0:	691b      	ldr	r3, [r3, #16]
    33a2:	4619      	mov	r1, r3
    33a4:	4610      	mov	r0, r2
    33a6:	f7fe f8ff 	bl	15a8 <vstr_add_char>
        next_char(lex);
    33aa:	6878      	ldr	r0, [r7, #4]
    33ac:	f7ff fb17 	bl	29de <next_char>
        while (!is_end(lex)) {
    33b0:	e061      	b.n	3476 <mp_lexer_to_next+0x3fc>
            if (!forced_integer && is_char_or(lex, 'e', 'E')) {
    33b2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    33b6:	f083 0301 	eor.w	r3, r3, #1
    33ba:	b2db      	uxtb	r3, r3
    33bc:	2b00      	cmp	r3, #0
    33be:	d02e      	beq.n	341e <mp_lexer_to_next+0x3a4>
    33c0:	2245      	movs	r2, #69	; 0x45
    33c2:	2165      	movs	r1, #101	; 0x65
    33c4:	6878      	ldr	r0, [r7, #4]
    33c6:	f7ff f973 	bl	26b0 <is_char_or>
    33ca:	4603      	mov	r3, r0
    33cc:	2b00      	cmp	r3, #0
    33ce:	d026      	beq.n	341e <mp_lexer_to_next+0x3a4>
                lex->tok_kind = MP_TOKEN_FLOAT_OR_IMAG;
    33d0:	687b      	ldr	r3, [r7, #4]
    33d2:	2209      	movs	r2, #9
    33d4:	641a      	str	r2, [r3, #64]	; 0x40
                vstr_add_char(&lex->vstr, 'e');
    33d6:	687b      	ldr	r3, [r7, #4]
    33d8:	3344      	adds	r3, #68	; 0x44
    33da:	2165      	movs	r1, #101	; 0x65
    33dc:	4618      	mov	r0, r3
    33de:	f7fe f8e3 	bl	15a8 <vstr_add_char>
                next_char(lex);
    33e2:	6878      	ldr	r0, [r7, #4]
    33e4:	f7ff fafb 	bl	29de <next_char>
                if (is_char(lex, '+') || is_char(lex, '-')) {
    33e8:	212b      	movs	r1, #43	; 0x2b
    33ea:	6878      	ldr	r0, [r7, #4]
    33ec:	f7ff f94c 	bl	2688 <is_char>
    33f0:	4603      	mov	r3, r0
    33f2:	2b00      	cmp	r3, #0
    33f4:	d106      	bne.n	3404 <mp_lexer_to_next+0x38a>
    33f6:	212d      	movs	r1, #45	; 0x2d
    33f8:	6878      	ldr	r0, [r7, #4]
    33fa:	f7ff f945 	bl	2688 <is_char>
    33fe:	4603      	mov	r3, r0
    3400:	2b00      	cmp	r3, #0
    3402:	d038      	beq.n	3476 <mp_lexer_to_next+0x3fc>
                    vstr_add_char(&lex->vstr, CUR_CHAR(lex));
    3404:	687b      	ldr	r3, [r7, #4]
    3406:	f103 0244 	add.w	r2, r3, #68	; 0x44
    340a:	687b      	ldr	r3, [r7, #4]
    340c:	691b      	ldr	r3, [r3, #16]
    340e:	4619      	mov	r1, r3
    3410:	4610      	mov	r0, r2
    3412:	f7fe f8c9 	bl	15a8 <vstr_add_char>
                    next_char(lex);
    3416:	6878      	ldr	r0, [r7, #4]
    3418:	f7ff fae1 	bl	29de <next_char>
                if (is_char(lex, '+') || is_char(lex, '-')) {
    341c:	e02b      	b.n	3476 <mp_lexer_to_next+0x3fc>
            } else if (is_letter(lex) || is_digit(lex) || is_char(lex, '.')) {
    341e:	6878      	ldr	r0, [r7, #4]
    3420:	f7ff fa08 	bl	2834 <is_letter>
    3424:	4603      	mov	r3, r0
    3426:	2b00      	cmp	r3, #0
    3428:	d10d      	bne.n	3446 <mp_lexer_to_next+0x3cc>
    342a:	6878      	ldr	r0, [r7, #4]
    342c:	f7ff fa10 	bl	2850 <is_digit>
    3430:	4603      	mov	r3, r0
    3432:	2b00      	cmp	r3, #0
    3434:	d107      	bne.n	3446 <mp_lexer_to_next+0x3cc>
    3436:	212e      	movs	r1, #46	; 0x2e
    3438:	6878      	ldr	r0, [r7, #4]
    343a:	f7ff f925 	bl	2688 <is_char>
    343e:	4603      	mov	r3, r0
    3440:	2b00      	cmp	r3, #0
    3442:	f000 80eb 	beq.w	361c <mp_lexer_to_next+0x5a2>
                if (is_char_or3(lex, '.', 'j', 'J')) {
    3446:	234a      	movs	r3, #74	; 0x4a
    3448:	226a      	movs	r2, #106	; 0x6a
    344a:	212e      	movs	r1, #46	; 0x2e
    344c:	6878      	ldr	r0, [r7, #4]
    344e:	f7ff f94d 	bl	26ec <is_char_or3>
    3452:	4603      	mov	r3, r0
    3454:	2b00      	cmp	r3, #0
    3456:	d002      	beq.n	345e <mp_lexer_to_next+0x3e4>
                    lex->tok_kind = MP_TOKEN_FLOAT_OR_IMAG;
    3458:	687b      	ldr	r3, [r7, #4]
    345a:	2209      	movs	r2, #9
    345c:	641a      	str	r2, [r3, #64]	; 0x40
                vstr_add_char(&lex->vstr, CUR_CHAR(lex));
    345e:	687b      	ldr	r3, [r7, #4]
    3460:	f103 0244 	add.w	r2, r3, #68	; 0x44
    3464:	687b      	ldr	r3, [r7, #4]
    3466:	691b      	ldr	r3, [r3, #16]
    3468:	4619      	mov	r1, r3
    346a:	4610      	mov	r0, r2
    346c:	f7fe f89c 	bl	15a8 <vstr_add_char>
                next_char(lex);
    3470:	6878      	ldr	r0, [r7, #4]
    3472:	f7ff fab4 	bl	29de <next_char>
        while (!is_end(lex)) {
    3476:	6878      	ldr	r0, [r7, #4]
    3478:	f7ff f8e3 	bl	2642 <is_end>
    347c:	4603      	mov	r3, r0
    347e:	f083 0301 	eor.w	r3, r3, #1
    3482:	b2db      	uxtb	r3, r3
    3484:	2b00      	cmp	r3, #0
    3486:	d194      	bne.n	33b2 <mp_lexer_to_next+0x338>
    } else if (is_digit(lex) || (is_char(lex, '.') && is_following_digit(lex))) {
    3488:	e0c8      	b.n	361c <mp_lexer_to_next+0x5a2>
        const char *t = tok_enc;
    348a:	4b41      	ldr	r3, [pc, #260]	; (3590 <mp_lexer_to_next+0x516>)
    348c:	623b      	str	r3, [r7, #32]
        size_t tok_enc_index = 0;
    348e:	2300      	movs	r3, #0
    3490:	61fb      	str	r3, [r7, #28]
        for (; *t != 0 && !is_char(lex, *t); t += 1) {
    3492:	e010      	b.n	34b6 <mp_lexer_to_next+0x43c>
            if (*t == 'e' || *t == 'c') {
    3494:	6a3b      	ldr	r3, [r7, #32]
    3496:	781b      	ldrb	r3, [r3, #0]
    3498:	2b65      	cmp	r3, #101	; 0x65
    349a:	d003      	beq.n	34a4 <mp_lexer_to_next+0x42a>
    349c:	6a3b      	ldr	r3, [r7, #32]
    349e:	781b      	ldrb	r3, [r3, #0]
    34a0:	2b63      	cmp	r3, #99	; 0x63
    34a2:	d102      	bne.n	34aa <mp_lexer_to_next+0x430>
                t += 1;
    34a4:	6a3b      	ldr	r3, [r7, #32]
    34a6:	3301      	adds	r3, #1
    34a8:	623b      	str	r3, [r7, #32]
            tok_enc_index += 1;
    34aa:	69fb      	ldr	r3, [r7, #28]
    34ac:	3301      	adds	r3, #1
    34ae:	61fb      	str	r3, [r7, #28]
        for (; *t != 0 && !is_char(lex, *t); t += 1) {
    34b0:	6a3b      	ldr	r3, [r7, #32]
    34b2:	3301      	adds	r3, #1
    34b4:	623b      	str	r3, [r7, #32]
    34b6:	6a3b      	ldr	r3, [r7, #32]
    34b8:	781b      	ldrb	r3, [r3, #0]
    34ba:	2b00      	cmp	r3, #0
    34bc:	d00b      	beq.n	34d6 <mp_lexer_to_next+0x45c>
    34be:	6a3b      	ldr	r3, [r7, #32]
    34c0:	781b      	ldrb	r3, [r3, #0]
    34c2:	4619      	mov	r1, r3
    34c4:	6878      	ldr	r0, [r7, #4]
    34c6:	f7ff f8df 	bl	2688 <is_char>
    34ca:	4603      	mov	r3, r0
    34cc:	f083 0301 	eor.w	r3, r3, #1
    34d0:	b2db      	uxtb	r3, r3
    34d2:	2b00      	cmp	r3, #0
    34d4:	d1de      	bne.n	3494 <mp_lexer_to_next+0x41a>
        next_char(lex);
    34d6:	6878      	ldr	r0, [r7, #4]
    34d8:	f7ff fa81 	bl	29de <next_char>
        if (*t == 0) {
    34dc:	6a3b      	ldr	r3, [r7, #32]
    34de:	781b      	ldrb	r3, [r3, #0]
    34e0:	2b00      	cmp	r3, #0
    34e2:	d103      	bne.n	34ec <mp_lexer_to_next+0x472>
            lex->tok_kind = MP_TOKEN_INVALID;
    34e4:	687b      	ldr	r3, [r7, #4]
    34e6:	2201      	movs	r2, #1
    34e8:	641a      	str	r2, [r3, #64]	; 0x40
}
    34ea:	e098      	b.n	361e <mp_lexer_to_next+0x5a4>
        } else if (*t == '!') {
    34ec:	6a3b      	ldr	r3, [r7, #32]
    34ee:	781b      	ldrb	r3, [r3, #0]
    34f0:	2b21      	cmp	r3, #33	; 0x21
    34f2:	d111      	bne.n	3518 <mp_lexer_to_next+0x49e>
            if (is_char(lex, '=')) {
    34f4:	213d      	movs	r1, #61	; 0x3d
    34f6:	6878      	ldr	r0, [r7, #4]
    34f8:	f7ff f8c6 	bl	2688 <is_char>
    34fc:	4603      	mov	r3, r0
    34fe:	2b00      	cmp	r3, #0
    3500:	d006      	beq.n	3510 <mp_lexer_to_next+0x496>
                next_char(lex);
    3502:	6878      	ldr	r0, [r7, #4]
    3504:	f7ff fa6b 	bl	29de <next_char>
                lex->tok_kind = MP_TOKEN_OP_NOT_EQUAL;
    3508:	687b      	ldr	r3, [r7, #4]
    350a:	2241      	movs	r2, #65	; 0x41
    350c:	641a      	str	r2, [r3, #64]	; 0x40
}
    350e:	e086      	b.n	361e <mp_lexer_to_next+0x5a4>
                lex->tok_kind = MP_TOKEN_INVALID;
    3510:	687b      	ldr	r3, [r7, #4]
    3512:	2201      	movs	r2, #1
    3514:	641a      	str	r2, [r3, #64]	; 0x40
}
    3516:	e082      	b.n	361e <mp_lexer_to_next+0x5a4>
        } else if (*t == '.') {
    3518:	6a3b      	ldr	r3, [r7, #32]
    351a:	781b      	ldrb	r3, [r3, #0]
    351c:	2b2e      	cmp	r3, #46	; 0x2e
    351e:	d115      	bne.n	354c <mp_lexer_to_next+0x4d2>
            if (is_char_and(lex, '.', '.')) {
    3520:	222e      	movs	r2, #46	; 0x2e
    3522:	212e      	movs	r1, #46	; 0x2e
    3524:	6878      	ldr	r0, [r7, #4]
    3526:	f7ff f959 	bl	27dc <is_char_and>
    352a:	4603      	mov	r3, r0
    352c:	2b00      	cmp	r3, #0
    352e:	d009      	beq.n	3544 <mp_lexer_to_next+0x4ca>
                next_char(lex);
    3530:	6878      	ldr	r0, [r7, #4]
    3532:	f7ff fa54 	bl	29de <next_char>
                next_char(lex);
    3536:	6878      	ldr	r0, [r7, #4]
    3538:	f7ff fa51 	bl	29de <next_char>
                lex->tok_kind = MP_TOKEN_ELLIPSIS;
    353c:	687b      	ldr	r3, [r7, #4]
    353e:	220c      	movs	r2, #12
    3540:	641a      	str	r2, [r3, #64]	; 0x40
}
    3542:	e06c      	b.n	361e <mp_lexer_to_next+0x5a4>
                lex->tok_kind = MP_TOKEN_DEL_PERIOD;
    3544:	687b      	ldr	r3, [r7, #4]
    3546:	224a      	movs	r2, #74	; 0x4a
    3548:	641a      	str	r2, [r3, #64]	; 0x40
}
    354a:	e068      	b.n	361e <mp_lexer_to_next+0x5a4>
            t += 1;
    354c:	6a3b      	ldr	r3, [r7, #32]
    354e:	3301      	adds	r3, #1
    3550:	623b      	str	r3, [r7, #32]
            size_t t_index = tok_enc_index;
    3552:	69fb      	ldr	r3, [r7, #28]
    3554:	61bb      	str	r3, [r7, #24]
            while (*t == 'c' || *t == 'e') {
    3556:	e024      	b.n	35a2 <mp_lexer_to_next+0x528>
                t_index += 1;
    3558:	69bb      	ldr	r3, [r7, #24]
    355a:	3301      	adds	r3, #1
    355c:	61bb      	str	r3, [r7, #24]
                if (is_char(lex, t[1])) {
    355e:	6a3b      	ldr	r3, [r7, #32]
    3560:	3301      	adds	r3, #1
    3562:	781b      	ldrb	r3, [r3, #0]
    3564:	4619      	mov	r1, r3
    3566:	6878      	ldr	r0, [r7, #4]
    3568:	f7ff f88e 	bl	2688 <is_char>
    356c:	4603      	mov	r3, r0
    356e:	2b00      	cmp	r3, #0
    3570:	d010      	beq.n	3594 <mp_lexer_to_next+0x51a>
                    next_char(lex);
    3572:	6878      	ldr	r0, [r7, #4]
    3574:	f7ff fa33 	bl	29de <next_char>
                    tok_enc_index = t_index;
    3578:	69bb      	ldr	r3, [r7, #24]
    357a:	61fb      	str	r3, [r7, #28]
                    if (*t == 'e') {
    357c:	6a3b      	ldr	r3, [r7, #32]
    357e:	781b      	ldrb	r3, [r3, #0]
    3580:	2b65      	cmp	r3, #101	; 0x65
    3582:	d10b      	bne.n	359c <mp_lexer_to_next+0x522>
                        break;
    3584:	e017      	b.n	35b6 <mp_lexer_to_next+0x53c>
    3586:	bf00      	nop
    3588:	0001d840 	.word	0x0001d840
    358c:	20000a2c 	.word	0x20000a2c
    3590:	0001d6dc 	.word	0x0001d6dc
                } else if (*t == 'c') {
    3594:	6a3b      	ldr	r3, [r7, #32]
    3596:	781b      	ldrb	r3, [r3, #0]
    3598:	2b63      	cmp	r3, #99	; 0x63
    359a:	d00b      	beq.n	35b4 <mp_lexer_to_next+0x53a>
                t += 2;
    359c:	6a3b      	ldr	r3, [r7, #32]
    359e:	3302      	adds	r3, #2
    35a0:	623b      	str	r3, [r7, #32]
            while (*t == 'c' || *t == 'e') {
    35a2:	6a3b      	ldr	r3, [r7, #32]
    35a4:	781b      	ldrb	r3, [r3, #0]
    35a6:	2b63      	cmp	r3, #99	; 0x63
    35a8:	d0d6      	beq.n	3558 <mp_lexer_to_next+0x4de>
    35aa:	6a3b      	ldr	r3, [r7, #32]
    35ac:	781b      	ldrb	r3, [r3, #0]
    35ae:	2b65      	cmp	r3, #101	; 0x65
    35b0:	d0d2      	beq.n	3558 <mp_lexer_to_next+0x4de>
    35b2:	e000      	b.n	35b6 <mp_lexer_to_next+0x53c>
                    break;
    35b4:	bf00      	nop
            lex->tok_kind = tok_enc_kind[tok_enc_index];
    35b6:	4a1c      	ldr	r2, [pc, #112]	; (3628 <mp_lexer_to_next+0x5ae>)
    35b8:	69fb      	ldr	r3, [r7, #28]
    35ba:	4413      	add	r3, r2
    35bc:	781b      	ldrb	r3, [r3, #0]
    35be:	461a      	mov	r2, r3
    35c0:	687b      	ldr	r3, [r7, #4]
    35c2:	641a      	str	r2, [r3, #64]	; 0x40
            if (lex->tok_kind == MP_TOKEN_DEL_PAREN_OPEN || lex->tok_kind == MP_TOKEN_DEL_BRACKET_OPEN || lex->tok_kind == MP_TOKEN_DEL_BRACE_OPEN) {
    35c4:	687b      	ldr	r3, [r7, #4]
    35c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    35c8:	2b42      	cmp	r3, #66	; 0x42
    35ca:	d007      	beq.n	35dc <mp_lexer_to_next+0x562>
    35cc:	687b      	ldr	r3, [r7, #4]
    35ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    35d0:	2b44      	cmp	r3, #68	; 0x44
    35d2:	d003      	beq.n	35dc <mp_lexer_to_next+0x562>
    35d4:	687b      	ldr	r3, [r7, #4]
    35d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    35d8:	2b46      	cmp	r3, #70	; 0x46
    35da:	d105      	bne.n	35e8 <mp_lexer_to_next+0x56e>
                lex->nested_bracket_level += 1;
    35dc:	687b      	ldr	r3, [r7, #4]
    35de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    35e0:	1c5a      	adds	r2, r3, #1
    35e2:	687b      	ldr	r3, [r7, #4]
    35e4:	629a      	str	r2, [r3, #40]	; 0x28
    35e6:	e01a      	b.n	361e <mp_lexer_to_next+0x5a4>
            } else if (lex->tok_kind == MP_TOKEN_DEL_PAREN_CLOSE || lex->tok_kind == MP_TOKEN_DEL_BRACKET_CLOSE || lex->tok_kind == MP_TOKEN_DEL_BRACE_CLOSE) {
    35e8:	687b      	ldr	r3, [r7, #4]
    35ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    35ec:	2b43      	cmp	r3, #67	; 0x43
    35ee:	d007      	beq.n	3600 <mp_lexer_to_next+0x586>
    35f0:	687b      	ldr	r3, [r7, #4]
    35f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    35f4:	2b45      	cmp	r3, #69	; 0x45
    35f6:	d003      	beq.n	3600 <mp_lexer_to_next+0x586>
    35f8:	687b      	ldr	r3, [r7, #4]
    35fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    35fc:	2b47      	cmp	r3, #71	; 0x47
    35fe:	d10e      	bne.n	361e <mp_lexer_to_next+0x5a4>
                lex->nested_bracket_level -= 1;
    3600:	687b      	ldr	r3, [r7, #4]
    3602:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3604:	1e5a      	subs	r2, r3, #1
    3606:	687b      	ldr	r3, [r7, #4]
    3608:	629a      	str	r2, [r3, #40]	; 0x28
}
    360a:	e008      	b.n	361e <mp_lexer_to_next+0x5a4>
    } else if (had_physical_newline && lex->nested_bracket_level == 0) {
    360c:	bf00      	nop
    360e:	e006      	b.n	361e <mp_lexer_to_next+0x5a4>
                break;
    3610:	bf00      	nop
    3612:	e004      	b.n	361e <mp_lexer_to_next+0x5a4>
                break;
    3614:	bf00      	nop
    3616:	e002      	b.n	361e <mp_lexer_to_next+0x5a4>
                break;
    3618:	bf00      	nop
    361a:	e000      	b.n	361e <mp_lexer_to_next+0x5a4>
    } else if (is_digit(lex) || (is_char(lex, '.') && is_following_digit(lex))) {
    361c:	bf00      	nop
}
    361e:	bf00      	nop
    3620:	3738      	adds	r7, #56	; 0x38
    3622:	46bd      	mov	sp, r7
    3624:	bd80      	pop	{r7, pc}
    3626:	bf00      	nop
    3628:	0001d724 	.word	0x0001d724

0000362c <mp_lexer_new>:

mp_lexer_t *mp_lexer_new(qstr src_name, mp_reader_t reader) {
    362c:	b580      	push	{r7, lr}
    362e:	b086      	sub	sp, #24
    3630:	af00      	add	r7, sp, #0
    3632:	60f8      	str	r0, [r7, #12]
    3634:	4638      	mov	r0, r7
    3636:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    mp_lexer_t *lex = m_new_obj(mp_lexer_t);
    363a:	2054      	movs	r0, #84	; 0x54
    363c:	f7fc fe6e 	bl	31c <m_malloc>
    3640:	6178      	str	r0, [r7, #20]

    lex->source_name = src_name;
    3642:	697b      	ldr	r3, [r7, #20]
    3644:	68fa      	ldr	r2, [r7, #12]
    3646:	601a      	str	r2, [r3, #0]
    lex->reader = reader;
    3648:	697b      	ldr	r3, [r7, #20]
    364a:	3304      	adds	r3, #4
    364c:	463a      	mov	r2, r7
    364e:	ca07      	ldmia	r2, {r0, r1, r2}
    3650:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    lex->line = 1;
    3654:	697b      	ldr	r3, [r7, #20]
    3656:	2201      	movs	r2, #1
    3658:	61da      	str	r2, [r3, #28]
    lex->column = (size_t)-2; // account for 3 dummy bytes
    365a:	697b      	ldr	r3, [r7, #20]
    365c:	f06f 0201 	mvn.w	r2, #1
    3660:	621a      	str	r2, [r3, #32]
    lex->emit_dent = 0;
    3662:	697b      	ldr	r3, [r7, #20]
    3664:	2200      	movs	r2, #0
    3666:	625a      	str	r2, [r3, #36]	; 0x24
    lex->nested_bracket_level = 0;
    3668:	697b      	ldr	r3, [r7, #20]
    366a:	2200      	movs	r2, #0
    366c:	629a      	str	r2, [r3, #40]	; 0x28
    lex->alloc_indent_level = MICROPY_ALLOC_LEXER_INDENT_INIT;
    366e:	697b      	ldr	r3, [r7, #20]
    3670:	220a      	movs	r2, #10
    3672:	62da      	str	r2, [r3, #44]	; 0x2c
    lex->num_indent_level = 1;
    3674:	697b      	ldr	r3, [r7, #20]
    3676:	2201      	movs	r2, #1
    3678:	631a      	str	r2, [r3, #48]	; 0x30
    lex->indent_level = m_new(uint16_t, lex->alloc_indent_level);
    367a:	697b      	ldr	r3, [r7, #20]
    367c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    367e:	005b      	lsls	r3, r3, #1
    3680:	4618      	mov	r0, r3
    3682:	f7fc fe4b 	bl	31c <m_malloc>
    3686:	4602      	mov	r2, r0
    3688:	697b      	ldr	r3, [r7, #20]
    368a:	635a      	str	r2, [r3, #52]	; 0x34
    vstr_init(&lex->vstr, 32);
    368c:	697b      	ldr	r3, [r7, #20]
    368e:	3344      	adds	r3, #68	; 0x44
    3690:	2120      	movs	r1, #32
    3692:	4618      	mov	r0, r3
    3694:	f7fd fe24 	bl	12e0 <vstr_init>

    // store sentinel for first indentation level
    lex->indent_level[0] = 0;
    3698:	697b      	ldr	r3, [r7, #20]
    369a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    369c:	2200      	movs	r2, #0
    369e:	801a      	strh	r2, [r3, #0]

    // load lexer with start of file, advancing lex->column to 1
    // start with dummy bytes and use next_char() for proper EOL/EOF handling
    lex->chr0 = lex->chr1 = lex->chr2 = 0;
    36a0:	697b      	ldr	r3, [r7, #20]
    36a2:	2200      	movs	r2, #0
    36a4:	619a      	str	r2, [r3, #24]
    36a6:	697b      	ldr	r3, [r7, #20]
    36a8:	699a      	ldr	r2, [r3, #24]
    36aa:	697b      	ldr	r3, [r7, #20]
    36ac:	615a      	str	r2, [r3, #20]
    36ae:	697b      	ldr	r3, [r7, #20]
    36b0:	695a      	ldr	r2, [r3, #20]
    36b2:	697b      	ldr	r3, [r7, #20]
    36b4:	611a      	str	r2, [r3, #16]
    next_char(lex);
    36b6:	6978      	ldr	r0, [r7, #20]
    36b8:	f7ff f991 	bl	29de <next_char>
    next_char(lex);
    36bc:	6978      	ldr	r0, [r7, #20]
    36be:	f7ff f98e 	bl	29de <next_char>
    next_char(lex);
    36c2:	6978      	ldr	r0, [r7, #20]
    36c4:	f7ff f98b 	bl	29de <next_char>

    // preload first token
    mp_lexer_to_next(lex);
    36c8:	6978      	ldr	r0, [r7, #20]
    36ca:	f7ff fcd6 	bl	307a <mp_lexer_to_next>

    // Check that the first token is in the first column.  If it's not then we
    // convert the token kind to INDENT so that the parser gives a syntax error.
    if (lex->tok_column != 1) {
    36ce:	697b      	ldr	r3, [r7, #20]
    36d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    36d2:	2b01      	cmp	r3, #1
    36d4:	d002      	beq.n	36dc <mp_lexer_new+0xb0>
        lex->tok_kind = MP_TOKEN_INDENT;
    36d6:	697b      	ldr	r3, [r7, #20]
    36d8:	2205      	movs	r2, #5
    36da:	641a      	str	r2, [r3, #64]	; 0x40
    }

    return lex;
    36dc:	697b      	ldr	r3, [r7, #20]
}
    36de:	4618      	mov	r0, r3
    36e0:	3718      	adds	r7, #24
    36e2:	46bd      	mov	sp, r7
    36e4:	bd80      	pop	{r7, pc}

000036e6 <mp_lexer_new_from_str_len>:

mp_lexer_t *mp_lexer_new_from_str_len(qstr src_name, const char *str, size_t len, size_t free_len) {
    36e6:	b580      	push	{r7, lr}
    36e8:	b088      	sub	sp, #32
    36ea:	af00      	add	r7, sp, #0
    36ec:	60f8      	str	r0, [r7, #12]
    36ee:	60b9      	str	r1, [r7, #8]
    36f0:	607a      	str	r2, [r7, #4]
    36f2:	603b      	str	r3, [r7, #0]
    mp_reader_t reader;
    mp_reader_new_mem(&reader, (const byte*)str, len, free_len);
    36f4:	f107 0014 	add.w	r0, r7, #20
    36f8:	683b      	ldr	r3, [r7, #0]
    36fa:	687a      	ldr	r2, [r7, #4]
    36fc:	68b9      	ldr	r1, [r7, #8]
    36fe:	f7fe ff68 	bl	25d2 <mp_reader_new_mem>
    return mp_lexer_new(src_name, reader);
    3702:	f107 0314 	add.w	r3, r7, #20
    3706:	cb0e      	ldmia	r3, {r1, r2, r3}
    3708:	68f8      	ldr	r0, [r7, #12]
    370a:	f7ff ff8f 	bl	362c <mp_lexer_new>
    370e:	4603      	mov	r3, r0
}
    3710:	4618      	mov	r0, r3
    3712:	3720      	adds	r7, #32
    3714:	46bd      	mov	sp, r7
    3716:	bd80      	pop	{r7, pc}

00003718 <mp_lexer_free>:

#endif

#endif

void mp_lexer_free(mp_lexer_t *lex) {
    3718:	b580      	push	{r7, lr}
    371a:	b082      	sub	sp, #8
    371c:	af00      	add	r7, sp, #0
    371e:	6078      	str	r0, [r7, #4]
    if (lex) {
    3720:	687b      	ldr	r3, [r7, #4]
    3722:	2b00      	cmp	r3, #0
    3724:	d012      	beq.n	374c <mp_lexer_free+0x34>
        lex->reader.close(lex->reader.data);
    3726:	687b      	ldr	r3, [r7, #4]
    3728:	68db      	ldr	r3, [r3, #12]
    372a:	687a      	ldr	r2, [r7, #4]
    372c:	6852      	ldr	r2, [r2, #4]
    372e:	4610      	mov	r0, r2
    3730:	4798      	blx	r3
        vstr_clear(&lex->vstr);
    3732:	687b      	ldr	r3, [r7, #4]
    3734:	3344      	adds	r3, #68	; 0x44
    3736:	4618      	mov	r0, r3
    3738:	f7fd fe36 	bl	13a8 <vstr_clear>
        m_del(uint16_t, lex->indent_level, lex->alloc_indent_level);
    373c:	687b      	ldr	r3, [r7, #4]
    373e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    3740:	4618      	mov	r0, r3
    3742:	f7fc fe49 	bl	3d8 <m_free>
        m_del_obj(mp_lexer_t, lex);
    3746:	6878      	ldr	r0, [r7, #4]
    3748:	f7fc fe46 	bl	3d8 <m_free>
    }
}
    374c:	bf00      	nop
    374e:	3708      	adds	r7, #8
    3750:	46bd      	mov	sp, r7
    3752:	bd80      	pop	{r7, pc}

00003754 <MP_OBJ_IS_SMALL_INT>:
    { return ((((mp_int_t)(o)) & 1) != 0); }
    3754:	b480      	push	{r7}
    3756:	b083      	sub	sp, #12
    3758:	af00      	add	r7, sp, #0
    375a:	6078      	str	r0, [r7, #4]
    375c:	687b      	ldr	r3, [r7, #4]
    375e:	f003 0301 	and.w	r3, r3, #1
    3762:	2b00      	cmp	r3, #0
    3764:	bf14      	ite	ne
    3766:	2301      	movne	r3, #1
    3768:	2300      	moveq	r3, #0
    376a:	b2db      	uxtb	r3, r3
    376c:	4618      	mov	r0, r3
    376e:	370c      	adds	r7, #12
    3770:	46bd      	mov	sp, r7
    3772:	f85d 7b04 	ldr.w	r7, [sp], #4
    3776:	4770      	bx	lr

00003778 <MP_OBJ_IS_OBJ>:
    { return ((((mp_int_t)(o)) & 3) == 0); }
    3778:	b480      	push	{r7}
    377a:	b083      	sub	sp, #12
    377c:	af00      	add	r7, sp, #0
    377e:	6078      	str	r0, [r7, #4]
    3780:	687b      	ldr	r3, [r7, #4]
    3782:	f003 0303 	and.w	r3, r3, #3
    3786:	2b00      	cmp	r3, #0
    3788:	bf0c      	ite	eq
    378a:	2301      	moveq	r3, #1
    378c:	2300      	movne	r3, #0
    378e:	b2db      	uxtb	r3, r3
    3790:	4618      	mov	r0, r3
    3792:	370c      	adds	r7, #12
    3794:	46bd      	mov	sp, r7
    3796:	f85d 7b04 	ldr.w	r7, [sp], #4
    379a:	4770      	bx	lr

0000379c <mp_parse_node_new_small_int>:
#define MP_PARSE_NODE_LEAF_ARG(pn) (((uintptr_t)(pn)) >> 4)
#define MP_PARSE_NODE_LEAF_SMALL_INT(pn) (((mp_int_t)(intptr_t)(pn)) >> 1)
#define MP_PARSE_NODE_STRUCT_KIND(pns) ((pns)->kind_num_nodes & 0xff)
#define MP_PARSE_NODE_STRUCT_NUM_NODES(pns) ((pns)->kind_num_nodes >> 8)

static inline mp_parse_node_t mp_parse_node_new_small_int(mp_int_t val) {
    379c:	b480      	push	{r7}
    379e:	b083      	sub	sp, #12
    37a0:	af00      	add	r7, sp, #0
    37a2:	6078      	str	r0, [r7, #4]
    return (mp_parse_node_t)(MP_PARSE_NODE_SMALL_INT | ((mp_uint_t)val << 1));
    37a4:	687b      	ldr	r3, [r7, #4]
    37a6:	005b      	lsls	r3, r3, #1
    37a8:	f043 0301 	orr.w	r3, r3, #1
}
    37ac:	4618      	mov	r0, r3
    37ae:	370c      	adds	r7, #12
    37b0:	46bd      	mov	sp, r7
    37b2:	f85d 7b04 	ldr.w	r7, [sp], #4
    37b6:	4770      	bx	lr

000037b8 <mp_parse_node_new_leaf>:
static inline mp_parse_node_t mp_parse_node_new_leaf(size_t kind, mp_int_t arg) {
    37b8:	b480      	push	{r7}
    37ba:	b083      	sub	sp, #12
    37bc:	af00      	add	r7, sp, #0
    37be:	6078      	str	r0, [r7, #4]
    37c0:	6039      	str	r1, [r7, #0]
    return (mp_parse_node_t)(kind | ((mp_uint_t)arg << 4));
    37c2:	683b      	ldr	r3, [r7, #0]
    37c4:	011a      	lsls	r2, r3, #4
    37c6:	687b      	ldr	r3, [r7, #4]
    37c8:	4313      	orrs	r3, r2
}
    37ca:	4618      	mov	r0, r3
    37cc:	370c      	adds	r7, #12
    37ce:	46bd      	mov	sp, r7
    37d0:	f85d 7b04 	ldr.w	r7, [sp], #4
    37d4:	4770      	bx	lr

000037d6 <get_rule_arg>:
    #if MICROPY_COMP_CONST
    mp_map_t consts;
    #endif
} parser_t;

STATIC const uint16_t *get_rule_arg(uint8_t r_id) {
    37d6:	b480      	push	{r7}
    37d8:	b085      	sub	sp, #20
    37da:	af00      	add	r7, sp, #0
    37dc:	4603      	mov	r3, r0
    37de:	71fb      	strb	r3, [r7, #7]
    size_t off = rule_arg_offset_table[r_id];
    37e0:	79fb      	ldrb	r3, [r7, #7]
    37e2:	4a0a      	ldr	r2, [pc, #40]	; (380c <get_rule_arg+0x36>)
    37e4:	5cd3      	ldrb	r3, [r2, r3]
    37e6:	60fb      	str	r3, [r7, #12]
    if (r_id >= FIRST_RULE_WITH_OFFSET_ABOVE_255) {
    37e8:	79fb      	ldrb	r3, [r7, #7]
    37ea:	2266      	movs	r2, #102	; 0x66
    37ec:	4293      	cmp	r3, r2
    37ee:	d303      	bcc.n	37f8 <get_rule_arg+0x22>
        off |= 0x100;
    37f0:	68fb      	ldr	r3, [r7, #12]
    37f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    37f6:	60fb      	str	r3, [r7, #12]
    }
    return &rule_arg_combined_table[off];
    37f8:	68fb      	ldr	r3, [r7, #12]
    37fa:	005b      	lsls	r3, r3, #1
    37fc:	4a04      	ldr	r2, [pc, #16]	; (3810 <get_rule_arg+0x3a>)
    37fe:	4413      	add	r3, r2
}
    3800:	4618      	mov	r0, r3
    3802:	3714      	adds	r7, #20
    3804:	46bd      	mov	sp, r7
    3806:	f85d 7b04 	ldr.w	r7, [sp], #4
    380a:	4770      	bx	lr
    380c:	0001dcc8 	.word	0x0001dcc8
    3810:	0001d984 	.word	0x0001d984

00003814 <parser_alloc>:

STATIC void *parser_alloc(parser_t *parser, size_t num_bytes) {
    3814:	b580      	push	{r7, lr}
    3816:	b086      	sub	sp, #24
    3818:	af00      	add	r7, sp, #0
    381a:	6078      	str	r0, [r7, #4]
    381c:	6039      	str	r1, [r7, #0]
    // use a custom memory allocator to store parse nodes sequentially in large chunks

    mp_parse_chunk_t *chunk = parser->cur_chunk;
    381e:	687b      	ldr	r3, [r7, #4]
    3820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    3822:	617b      	str	r3, [r7, #20]

    if (chunk != NULL && chunk->union_.used + num_bytes > chunk->alloc) {
    3824:	697b      	ldr	r3, [r7, #20]
    3826:	2b00      	cmp	r3, #0
    3828:	d031      	beq.n	388e <parser_alloc+0x7a>
    382a:	697b      	ldr	r3, [r7, #20]
    382c:	685a      	ldr	r2, [r3, #4]
    382e:	683b      	ldr	r3, [r7, #0]
    3830:	441a      	add	r2, r3
    3832:	697b      	ldr	r3, [r7, #20]
    3834:	681b      	ldr	r3, [r3, #0]
    3836:	429a      	cmp	r2, r3
    3838:	d929      	bls.n	388e <parser_alloc+0x7a>
        // not enough room at end of previously allocated chunk so try to grow
        mp_parse_chunk_t *new_data = (mp_parse_chunk_t*)m_renew_maybe(byte, chunk,
    383a:	697b      	ldr	r3, [r7, #20]
    383c:	681a      	ldr	r2, [r3, #0]
    383e:	683b      	ldr	r3, [r7, #0]
    3840:	4413      	add	r3, r2
    3842:	3308      	adds	r3, #8
    3844:	2200      	movs	r2, #0
    3846:	4619      	mov	r1, r3
    3848:	6978      	ldr	r0, [r7, #20]
    384a:	f7fc fdb2 	bl	3b2 <m_realloc_maybe>
    384e:	60f8      	str	r0, [r7, #12]
            sizeof(mp_parse_chunk_t) + chunk->alloc,
            sizeof(mp_parse_chunk_t) + chunk->alloc + num_bytes, false);
        if (new_data == NULL) {
    3850:	68fb      	ldr	r3, [r7, #12]
    3852:	2b00      	cmp	r3, #0
    3854:	d115      	bne.n	3882 <parser_alloc+0x6e>
            // could not grow existing memory; shrink it to fit previous
            (void)m_renew_maybe(byte, chunk, sizeof(mp_parse_chunk_t) + chunk->alloc,
    3856:	697b      	ldr	r3, [r7, #20]
    3858:	685b      	ldr	r3, [r3, #4]
    385a:	3308      	adds	r3, #8
    385c:	2200      	movs	r2, #0
    385e:	4619      	mov	r1, r3
    3860:	6978      	ldr	r0, [r7, #20]
    3862:	f7fc fda6 	bl	3b2 <m_realloc_maybe>
                sizeof(mp_parse_chunk_t) + chunk->union_.used, false);
            chunk->alloc = chunk->union_.used;
    3866:	697b      	ldr	r3, [r7, #20]
    3868:	685a      	ldr	r2, [r3, #4]
    386a:	697b      	ldr	r3, [r7, #20]
    386c:	601a      	str	r2, [r3, #0]
            chunk->union_.next = parser->tree.chunk;
    386e:	687b      	ldr	r3, [r7, #4]
    3870:	6a1a      	ldr	r2, [r3, #32]
    3872:	697b      	ldr	r3, [r7, #20]
    3874:	605a      	str	r2, [r3, #4]
            parser->tree.chunk = chunk;
    3876:	687b      	ldr	r3, [r7, #4]
    3878:	697a      	ldr	r2, [r7, #20]
    387a:	621a      	str	r2, [r3, #32]
            chunk = NULL;
    387c:	2300      	movs	r3, #0
    387e:	617b      	str	r3, [r7, #20]
    3880:	e005      	b.n	388e <parser_alloc+0x7a>
        } else {
            // could grow existing memory
            chunk->alloc += num_bytes;
    3882:	697b      	ldr	r3, [r7, #20]
    3884:	681a      	ldr	r2, [r3, #0]
    3886:	683b      	ldr	r3, [r7, #0]
    3888:	441a      	add	r2, r3
    388a:	697b      	ldr	r3, [r7, #20]
    388c:	601a      	str	r2, [r3, #0]
        }
    }

    if (chunk == NULL) {
    388e:	697b      	ldr	r3, [r7, #20]
    3890:	2b00      	cmp	r3, #0
    3892:	d116      	bne.n	38c2 <parser_alloc+0xae>
        // no previous chunk, allocate a new chunk
        size_t alloc = MICROPY_ALLOC_PARSE_CHUNK_INIT;
    3894:	2310      	movs	r3, #16
    3896:	613b      	str	r3, [r7, #16]
        if (alloc < num_bytes) {
    3898:	693a      	ldr	r2, [r7, #16]
    389a:	683b      	ldr	r3, [r7, #0]
    389c:	429a      	cmp	r2, r3
    389e:	d201      	bcs.n	38a4 <parser_alloc+0x90>
            alloc = num_bytes;
    38a0:	683b      	ldr	r3, [r7, #0]
    38a2:	613b      	str	r3, [r7, #16]
        }
        chunk = (mp_parse_chunk_t*)m_new(byte, sizeof(mp_parse_chunk_t) + alloc);
    38a4:	693b      	ldr	r3, [r7, #16]
    38a6:	3308      	adds	r3, #8
    38a8:	4618      	mov	r0, r3
    38aa:	f7fc fd37 	bl	31c <m_malloc>
    38ae:	6178      	str	r0, [r7, #20]
        chunk->alloc = alloc;
    38b0:	697b      	ldr	r3, [r7, #20]
    38b2:	693a      	ldr	r2, [r7, #16]
    38b4:	601a      	str	r2, [r3, #0]
        chunk->union_.used = 0;
    38b6:	697b      	ldr	r3, [r7, #20]
    38b8:	2200      	movs	r2, #0
    38ba:	605a      	str	r2, [r3, #4]
        parser->cur_chunk = chunk;
    38bc:	687b      	ldr	r3, [r7, #4]
    38be:	697a      	ldr	r2, [r7, #20]
    38c0:	625a      	str	r2, [r3, #36]	; 0x24
    }

    byte *ret = chunk->data + chunk->union_.used;
    38c2:	697b      	ldr	r3, [r7, #20]
    38c4:	f103 0208 	add.w	r2, r3, #8
    38c8:	697b      	ldr	r3, [r7, #20]
    38ca:	685b      	ldr	r3, [r3, #4]
    38cc:	4413      	add	r3, r2
    38ce:	60bb      	str	r3, [r7, #8]
    chunk->union_.used += num_bytes;
    38d0:	697b      	ldr	r3, [r7, #20]
    38d2:	685a      	ldr	r2, [r3, #4]
    38d4:	683b      	ldr	r3, [r7, #0]
    38d6:	441a      	add	r2, r3
    38d8:	697b      	ldr	r3, [r7, #20]
    38da:	605a      	str	r2, [r3, #4]
    return ret;
    38dc:	68bb      	ldr	r3, [r7, #8]
}
    38de:	4618      	mov	r0, r3
    38e0:	3718      	adds	r7, #24
    38e2:	46bd      	mov	sp, r7
    38e4:	bd80      	pop	{r7, pc}

000038e6 <push_rule>:

STATIC void push_rule(parser_t *parser, size_t src_line, uint8_t rule_id, size_t arg_i) {
    38e6:	b580      	push	{r7, lr}
    38e8:	b086      	sub	sp, #24
    38ea:	af00      	add	r7, sp, #0
    38ec:	60f8      	str	r0, [r7, #12]
    38ee:	60b9      	str	r1, [r7, #8]
    38f0:	603b      	str	r3, [r7, #0]
    38f2:	4613      	mov	r3, r2
    38f4:	71fb      	strb	r3, [r7, #7]
    if (parser->rule_stack_top >= parser->rule_stack_alloc) {
    38f6:	68fb      	ldr	r3, [r7, #12]
    38f8:	685a      	ldr	r2, [r3, #4]
    38fa:	68fb      	ldr	r3, [r7, #12]
    38fc:	681b      	ldr	r3, [r3, #0]
    38fe:	429a      	cmp	r2, r3
    3900:	d313      	bcc.n	392a <push_rule+0x44>
        rule_stack_t *rs = m_renew(rule_stack_t, parser->rule_stack, parser->rule_stack_alloc, parser->rule_stack_alloc + MICROPY_ALLOC_PARSE_RULE_INC);
    3902:	68fb      	ldr	r3, [r7, #12]
    3904:	689a      	ldr	r2, [r3, #8]
    3906:	68fb      	ldr	r3, [r7, #12]
    3908:	681b      	ldr	r3, [r3, #0]
    390a:	3310      	adds	r3, #16
    390c:	00db      	lsls	r3, r3, #3
    390e:	4619      	mov	r1, r3
    3910:	4610      	mov	r0, r2
    3912:	f7fc fd35 	bl	380 <m_realloc>
    3916:	6178      	str	r0, [r7, #20]
        parser->rule_stack = rs;
    3918:	68fb      	ldr	r3, [r7, #12]
    391a:	697a      	ldr	r2, [r7, #20]
    391c:	609a      	str	r2, [r3, #8]
        parser->rule_stack_alloc += MICROPY_ALLOC_PARSE_RULE_INC;
    391e:	68fb      	ldr	r3, [r7, #12]
    3920:	681b      	ldr	r3, [r3, #0]
    3922:	f103 0210 	add.w	r2, r3, #16
    3926:	68fb      	ldr	r3, [r7, #12]
    3928:	601a      	str	r2, [r3, #0]
    }
    rule_stack_t *rs = &parser->rule_stack[parser->rule_stack_top++];
    392a:	68fb      	ldr	r3, [r7, #12]
    392c:	689a      	ldr	r2, [r3, #8]
    392e:	68fb      	ldr	r3, [r7, #12]
    3930:	685b      	ldr	r3, [r3, #4]
    3932:	1c58      	adds	r0, r3, #1
    3934:	68f9      	ldr	r1, [r7, #12]
    3936:	6048      	str	r0, [r1, #4]
    3938:	00db      	lsls	r3, r3, #3
    393a:	4413      	add	r3, r2
    393c:	613b      	str	r3, [r7, #16]
    rs->src_line = src_line;
    393e:	68bb      	ldr	r3, [r7, #8]
    3940:	f023 417f 	bic.w	r1, r3, #4278190080	; 0xff000000
    3944:	693a      	ldr	r2, [r7, #16]
    3946:	6813      	ldr	r3, [r2, #0]
    3948:	f361 0317 	bfi	r3, r1, #0, #24
    394c:	6013      	str	r3, [r2, #0]
    rs->rule_id = rule_id;
    394e:	693b      	ldr	r3, [r7, #16]
    3950:	79fa      	ldrb	r2, [r7, #7]
    3952:	70da      	strb	r2, [r3, #3]
    rs->arg_i = arg_i;
    3954:	693b      	ldr	r3, [r7, #16]
    3956:	683a      	ldr	r2, [r7, #0]
    3958:	605a      	str	r2, [r3, #4]
}
    395a:	bf00      	nop
    395c:	3718      	adds	r7, #24
    395e:	46bd      	mov	sp, r7
    3960:	bd80      	pop	{r7, pc}

00003962 <push_rule_from_arg>:

STATIC void push_rule_from_arg(parser_t *parser, size_t arg) {
    3962:	b580      	push	{r7, lr}
    3964:	b084      	sub	sp, #16
    3966:	af00      	add	r7, sp, #0
    3968:	6078      	str	r0, [r7, #4]
    396a:	6039      	str	r1, [r7, #0]
    assert((arg & RULE_ARG_KIND_MASK) == RULE_ARG_RULE || (arg & RULE_ARG_KIND_MASK) == RULE_ARG_OPT_RULE);
    396c:	683b      	ldr	r3, [r7, #0]
    396e:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
    3972:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
    3976:	d00c      	beq.n	3992 <push_rule_from_arg+0x30>
    3978:	683b      	ldr	r3, [r7, #0]
    397a:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
    397e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
    3982:	d006      	beq.n	3992 <push_rule_from_arg+0x30>
    3984:	4b0b      	ldr	r3, [pc, #44]	; (39b4 <push_rule_from_arg+0x52>)
    3986:	4a0c      	ldr	r2, [pc, #48]	; (39b8 <push_rule_from_arg+0x56>)
    3988:	f44f 7199 	mov.w	r1, #306	; 0x132
    398c:	480b      	ldr	r0, [pc, #44]	; (39bc <push_rule_from_arg+0x5a>)
    398e:	f017 fc15 	bl	1b1bc <__assert_func>
    size_t rule_id = arg & RULE_ARG_ARG_MASK;
    3992:	683b      	ldr	r3, [r7, #0]
    3994:	f3c3 030b 	ubfx	r3, r3, #0, #12
    3998:	60fb      	str	r3, [r7, #12]
    push_rule(parser, parser->lexer->tok_line, rule_id, 0);
    399a:	687b      	ldr	r3, [r7, #4]
    399c:	699b      	ldr	r3, [r3, #24]
    399e:	6b99      	ldr	r1, [r3, #56]	; 0x38
    39a0:	68fb      	ldr	r3, [r7, #12]
    39a2:	b2da      	uxtb	r2, r3
    39a4:	2300      	movs	r3, #0
    39a6:	6878      	ldr	r0, [r7, #4]
    39a8:	f7ff ff9d 	bl	38e6 <push_rule>
}
    39ac:	bf00      	nop
    39ae:	3710      	adds	r7, #16
    39b0:	46bd      	mov	sp, r7
    39b2:	bd80      	pop	{r7, pc}
    39b4:	0001dd70 	.word	0x0001dd70
    39b8:	0001df48 	.word	0x0001df48
    39bc:	0001ddd0 	.word	0x0001ddd0

000039c0 <pop_rule>:

STATIC uint8_t pop_rule(parser_t *parser, size_t *arg_i, size_t *src_line) {
    39c0:	b480      	push	{r7}
    39c2:	b087      	sub	sp, #28
    39c4:	af00      	add	r7, sp, #0
    39c6:	60f8      	str	r0, [r7, #12]
    39c8:	60b9      	str	r1, [r7, #8]
    39ca:	607a      	str	r2, [r7, #4]
    parser->rule_stack_top -= 1;
    39cc:	68fb      	ldr	r3, [r7, #12]
    39ce:	685b      	ldr	r3, [r3, #4]
    39d0:	1e5a      	subs	r2, r3, #1
    39d2:	68fb      	ldr	r3, [r7, #12]
    39d4:	605a      	str	r2, [r3, #4]
    uint8_t rule_id = parser->rule_stack[parser->rule_stack_top].rule_id;
    39d6:	68fb      	ldr	r3, [r7, #12]
    39d8:	689a      	ldr	r2, [r3, #8]
    39da:	68fb      	ldr	r3, [r7, #12]
    39dc:	685b      	ldr	r3, [r3, #4]
    39de:	00db      	lsls	r3, r3, #3
    39e0:	4413      	add	r3, r2
    39e2:	78db      	ldrb	r3, [r3, #3]
    39e4:	75fb      	strb	r3, [r7, #23]
    *arg_i = parser->rule_stack[parser->rule_stack_top].arg_i;
    39e6:	68fb      	ldr	r3, [r7, #12]
    39e8:	689a      	ldr	r2, [r3, #8]
    39ea:	68fb      	ldr	r3, [r7, #12]
    39ec:	685b      	ldr	r3, [r3, #4]
    39ee:	00db      	lsls	r3, r3, #3
    39f0:	4413      	add	r3, r2
    39f2:	685a      	ldr	r2, [r3, #4]
    39f4:	68bb      	ldr	r3, [r7, #8]
    39f6:	601a      	str	r2, [r3, #0]
    *src_line = parser->rule_stack[parser->rule_stack_top].src_line;
    39f8:	68fb      	ldr	r3, [r7, #12]
    39fa:	689a      	ldr	r2, [r3, #8]
    39fc:	68fb      	ldr	r3, [r7, #12]
    39fe:	685b      	ldr	r3, [r3, #4]
    3a00:	00db      	lsls	r3, r3, #3
    3a02:	4413      	add	r3, r2
    3a04:	681b      	ldr	r3, [r3, #0]
    3a06:	f3c3 0317 	ubfx	r3, r3, #0, #24
    3a0a:	461a      	mov	r2, r3
    3a0c:	687b      	ldr	r3, [r7, #4]
    3a0e:	601a      	str	r2, [r3, #0]
    return rule_id;
    3a10:	7dfb      	ldrb	r3, [r7, #23]
}
    3a12:	4618      	mov	r0, r3
    3a14:	371c      	adds	r7, #28
    3a16:	46bd      	mov	sp, r7
    3a18:	f85d 7b04 	ldr.w	r7, [sp], #4
    3a1c:	4770      	bx	lr

00003a1e <mp_parse_node_is_const_false>:

bool mp_parse_node_is_const_false(mp_parse_node_t pn) {
    3a1e:	b480      	push	{r7}
    3a20:	b083      	sub	sp, #12
    3a22:	af00      	add	r7, sp, #0
    3a24:	6078      	str	r0, [r7, #4]
    return MP_PARSE_NODE_IS_TOKEN_KIND(pn, MP_TOKEN_KW_FALSE)
        || (MP_PARSE_NODE_IS_SMALL_INT(pn) && MP_PARSE_NODE_LEAF_SMALL_INT(pn) == 0);
    3a26:	687b      	ldr	r3, [r7, #4]
    3a28:	2bde      	cmp	r3, #222	; 0xde
    3a2a:	d008      	beq.n	3a3e <mp_parse_node_is_const_false+0x20>
    3a2c:	687b      	ldr	r3, [r7, #4]
    3a2e:	f003 0301 	and.w	r3, r3, #1
    3a32:	2b00      	cmp	r3, #0
    3a34:	d005      	beq.n	3a42 <mp_parse_node_is_const_false+0x24>
    3a36:	687b      	ldr	r3, [r7, #4]
    3a38:	105b      	asrs	r3, r3, #1
    3a3a:	2b00      	cmp	r3, #0
    3a3c:	d101      	bne.n	3a42 <mp_parse_node_is_const_false+0x24>
    3a3e:	2301      	movs	r3, #1
    3a40:	e000      	b.n	3a44 <mp_parse_node_is_const_false+0x26>
    3a42:	2300      	movs	r3, #0
    3a44:	f003 0301 	and.w	r3, r3, #1
    3a48:	b2db      	uxtb	r3, r3
}
    3a4a:	4618      	mov	r0, r3
    3a4c:	370c      	adds	r7, #12
    3a4e:	46bd      	mov	sp, r7
    3a50:	f85d 7b04 	ldr.w	r7, [sp], #4
    3a54:	4770      	bx	lr

00003a56 <mp_parse_node_is_const_true>:

bool mp_parse_node_is_const_true(mp_parse_node_t pn) {
    3a56:	b480      	push	{r7}
    3a58:	b083      	sub	sp, #12
    3a5a:	af00      	add	r7, sp, #0
    3a5c:	6078      	str	r0, [r7, #4]
    return MP_PARSE_NODE_IS_TOKEN_KIND(pn, MP_TOKEN_KW_TRUE)
        || (MP_PARSE_NODE_IS_SMALL_INT(pn) && MP_PARSE_NODE_LEAF_SMALL_INT(pn) != 0);
    3a5e:	687b      	ldr	r3, [r7, #4]
    3a60:	2bfe      	cmp	r3, #254	; 0xfe
    3a62:	d008      	beq.n	3a76 <mp_parse_node_is_const_true+0x20>
    3a64:	687b      	ldr	r3, [r7, #4]
    3a66:	f003 0301 	and.w	r3, r3, #1
    3a6a:	2b00      	cmp	r3, #0
    3a6c:	d005      	beq.n	3a7a <mp_parse_node_is_const_true+0x24>
    3a6e:	687b      	ldr	r3, [r7, #4]
    3a70:	105b      	asrs	r3, r3, #1
    3a72:	2b00      	cmp	r3, #0
    3a74:	d001      	beq.n	3a7a <mp_parse_node_is_const_true+0x24>
    3a76:	2301      	movs	r3, #1
    3a78:	e000      	b.n	3a7c <mp_parse_node_is_const_true+0x26>
    3a7a:	2300      	movs	r3, #0
    3a7c:	f003 0301 	and.w	r3, r3, #1
    3a80:	b2db      	uxtb	r3, r3
}
    3a82:	4618      	mov	r0, r3
    3a84:	370c      	adds	r7, #12
    3a86:	46bd      	mov	sp, r7
    3a88:	f85d 7b04 	ldr.w	r7, [sp], #4
    3a8c:	4770      	bx	lr

00003a8e <mp_parse_node_get_int_maybe>:

bool mp_parse_node_get_int_maybe(mp_parse_node_t pn, mp_obj_t *o) {
    3a8e:	b580      	push	{r7, lr}
    3a90:	b084      	sub	sp, #16
    3a92:	af00      	add	r7, sp, #0
    3a94:	6078      	str	r0, [r7, #4]
    3a96:	6039      	str	r1, [r7, #0]
    if (MP_PARSE_NODE_IS_SMALL_INT(pn)) {
    3a98:	687b      	ldr	r3, [r7, #4]
    3a9a:	f003 0301 	and.w	r3, r3, #1
    3a9e:	2b00      	cmp	r3, #0
    3aa0:	d009      	beq.n	3ab6 <mp_parse_node_get_int_maybe+0x28>
        *o = MP_OBJ_NEW_SMALL_INT(MP_PARSE_NODE_LEAF_SMALL_INT(pn));
    3aa2:	687b      	ldr	r3, [r7, #4]
    3aa4:	105b      	asrs	r3, r3, #1
    3aa6:	005b      	lsls	r3, r3, #1
    3aa8:	f043 0301 	orr.w	r3, r3, #1
    3aac:	461a      	mov	r2, r3
    3aae:	683b      	ldr	r3, [r7, #0]
    3ab0:	601a      	str	r2, [r3, #0]
        return true;
    3ab2:	2301      	movs	r3, #1
    3ab4:	e031      	b.n	3b1a <mp_parse_node_get_int_maybe+0x8c>
    } else if (MP_PARSE_NODE_IS_STRUCT_KIND(pn, RULE_const_object)) {
    3ab6:	687b      	ldr	r3, [r7, #4]
    3ab8:	2b00      	cmp	r3, #0
    3aba:	d02d      	beq.n	3b18 <mp_parse_node_get_int_maybe+0x8a>
    3abc:	687b      	ldr	r3, [r7, #4]
    3abe:	f003 0303 	and.w	r3, r3, #3
    3ac2:	2b00      	cmp	r3, #0
    3ac4:	d128      	bne.n	3b18 <mp_parse_node_get_int_maybe+0x8a>
    3ac6:	687b      	ldr	r3, [r7, #4]
    3ac8:	685b      	ldr	r3, [r3, #4]
    3aca:	b2db      	uxtb	r3, r3
    3acc:	2b35      	cmp	r3, #53	; 0x35
    3ace:	d123      	bne.n	3b18 <mp_parse_node_get_int_maybe+0x8a>
        mp_parse_node_struct_t *pns = (mp_parse_node_struct_t*)pn;
    3ad0:	687b      	ldr	r3, [r7, #4]
    3ad2:	60fb      	str	r3, [r7, #12]
        #if MICROPY_OBJ_REPR == MICROPY_OBJ_REPR_D
        // nodes are 32-bit pointers, but need to extract 64-bit object
        *o = (uint64_t)pns->nodes[0] | ((uint64_t)pns->nodes[1] << 32);
        #else
        *o = (mp_obj_t)pns->nodes[0];
    3ad4:	68fb      	ldr	r3, [r7, #12]
    3ad6:	689b      	ldr	r3, [r3, #8]
    3ad8:	461a      	mov	r2, r3
    3ada:	683b      	ldr	r3, [r7, #0]
    3adc:	601a      	str	r2, [r3, #0]
        #endif
        return MP_OBJ_IS_INT(*o);
    3ade:	683b      	ldr	r3, [r7, #0]
    3ae0:	681b      	ldr	r3, [r3, #0]
    3ae2:	4618      	mov	r0, r3
    3ae4:	f7ff fe36 	bl	3754 <MP_OBJ_IS_SMALL_INT>
    3ae8:	4603      	mov	r3, r0
    3aea:	2b00      	cmp	r3, #0
    3aec:	d10d      	bne.n	3b0a <mp_parse_node_get_int_maybe+0x7c>
    3aee:	683b      	ldr	r3, [r7, #0]
    3af0:	681b      	ldr	r3, [r3, #0]
    3af2:	4618      	mov	r0, r3
    3af4:	f7ff fe40 	bl	3778 <MP_OBJ_IS_OBJ>
    3af8:	4603      	mov	r3, r0
    3afa:	2b00      	cmp	r3, #0
    3afc:	d007      	beq.n	3b0e <mp_parse_node_get_int_maybe+0x80>
    3afe:	683b      	ldr	r3, [r7, #0]
    3b00:	681b      	ldr	r3, [r3, #0]
    3b02:	681b      	ldr	r3, [r3, #0]
    3b04:	4a07      	ldr	r2, [pc, #28]	; (3b24 <mp_parse_node_get_int_maybe+0x96>)
    3b06:	4293      	cmp	r3, r2
    3b08:	d101      	bne.n	3b0e <mp_parse_node_get_int_maybe+0x80>
    3b0a:	2301      	movs	r3, #1
    3b0c:	e000      	b.n	3b10 <mp_parse_node_get_int_maybe+0x82>
    3b0e:	2300      	movs	r3, #0
    3b10:	f003 0301 	and.w	r3, r3, #1
    3b14:	b2db      	uxtb	r3, r3
    3b16:	e000      	b.n	3b1a <mp_parse_node_get_int_maybe+0x8c>
    } else {
        return false;
    3b18:	2300      	movs	r3, #0
    }
}
    3b1a:	4618      	mov	r0, r3
    3b1c:	3710      	adds	r7, #16
    3b1e:	46bd      	mov	sp, r7
    3b20:	bd80      	pop	{r7, pc}
    3b22:	bf00      	nop
    3b24:	00020d10 	.word	0x00020d10

00003b28 <mp_parse_node_extract_list>:

int mp_parse_node_extract_list(mp_parse_node_t *pn, size_t pn_kind, mp_parse_node_t **nodes) {
    3b28:	b480      	push	{r7}
    3b2a:	b087      	sub	sp, #28
    3b2c:	af00      	add	r7, sp, #0
    3b2e:	60f8      	str	r0, [r7, #12]
    3b30:	60b9      	str	r1, [r7, #8]
    3b32:	607a      	str	r2, [r7, #4]
    if (MP_PARSE_NODE_IS_NULL(*pn)) {
    3b34:	68fb      	ldr	r3, [r7, #12]
    3b36:	681b      	ldr	r3, [r3, #0]
    3b38:	2b00      	cmp	r3, #0
    3b3a:	d104      	bne.n	3b46 <mp_parse_node_extract_list+0x1e>
        *nodes = NULL;
    3b3c:	687b      	ldr	r3, [r7, #4]
    3b3e:	2200      	movs	r2, #0
    3b40:	601a      	str	r2, [r3, #0]
        return 0;
    3b42:	2300      	movs	r3, #0
    3b44:	e020      	b.n	3b88 <mp_parse_node_extract_list+0x60>
    } else if (MP_PARSE_NODE_IS_LEAF(*pn)) {
    3b46:	68fb      	ldr	r3, [r7, #12]
    3b48:	681b      	ldr	r3, [r3, #0]
    3b4a:	f003 0303 	and.w	r3, r3, #3
    3b4e:	2b00      	cmp	r3, #0
    3b50:	d004      	beq.n	3b5c <mp_parse_node_extract_list+0x34>
        *nodes = pn;
    3b52:	687b      	ldr	r3, [r7, #4]
    3b54:	68fa      	ldr	r2, [r7, #12]
    3b56:	601a      	str	r2, [r3, #0]
        return 1;
    3b58:	2301      	movs	r3, #1
    3b5a:	e015      	b.n	3b88 <mp_parse_node_extract_list+0x60>
    } else {
        mp_parse_node_struct_t *pns = (mp_parse_node_struct_t*)(*pn);
    3b5c:	68fb      	ldr	r3, [r7, #12]
    3b5e:	681b      	ldr	r3, [r3, #0]
    3b60:	617b      	str	r3, [r7, #20]
        if (MP_PARSE_NODE_STRUCT_KIND(pns) != pn_kind) {
    3b62:	697b      	ldr	r3, [r7, #20]
    3b64:	685b      	ldr	r3, [r3, #4]
    3b66:	b2da      	uxtb	r2, r3
    3b68:	68bb      	ldr	r3, [r7, #8]
    3b6a:	429a      	cmp	r2, r3
    3b6c:	d004      	beq.n	3b78 <mp_parse_node_extract_list+0x50>
            *nodes = pn;
    3b6e:	687b      	ldr	r3, [r7, #4]
    3b70:	68fa      	ldr	r2, [r7, #12]
    3b72:	601a      	str	r2, [r3, #0]
            return 1;
    3b74:	2301      	movs	r3, #1
    3b76:	e007      	b.n	3b88 <mp_parse_node_extract_list+0x60>
        } else {
            *nodes = pns->nodes;
    3b78:	697b      	ldr	r3, [r7, #20]
    3b7a:	f103 0208 	add.w	r2, r3, #8
    3b7e:	687b      	ldr	r3, [r7, #4]
    3b80:	601a      	str	r2, [r3, #0]
            return MP_PARSE_NODE_STRUCT_NUM_NODES(pns);
    3b82:	697b      	ldr	r3, [r7, #20]
    3b84:	685b      	ldr	r3, [r3, #4]
    3b86:	0a1b      	lsrs	r3, r3, #8
        }
    }
}
    3b88:	4618      	mov	r0, r3
    3b8a:	371c      	adds	r7, #28
    3b8c:	46bd      	mov	sp, r7
    3b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
    3b92:	4770      	bx	lr

00003b94 <pop_result>:
        mp_parse_node_print(parser->result_stack[i], 0);
    }
}
*/

STATIC mp_parse_node_t pop_result(parser_t *parser) {
    3b94:	b580      	push	{r7, lr}
    3b96:	b082      	sub	sp, #8
    3b98:	af00      	add	r7, sp, #0
    3b9a:	6078      	str	r0, [r7, #4]
    assert(parser->result_stack_top > 0);
    3b9c:	687b      	ldr	r3, [r7, #4]
    3b9e:	691b      	ldr	r3, [r3, #16]
    3ba0:	2b00      	cmp	r3, #0
    3ba2:	d106      	bne.n	3bb2 <pop_result+0x1e>
    3ba4:	4b0b      	ldr	r3, [pc, #44]	; (3bd4 <pop_result+0x40>)
    3ba6:	4a0c      	ldr	r2, [pc, #48]	; (3bd8 <pop_result+0x44>)
    3ba8:	f240 11a9 	movw	r1, #425	; 0x1a9
    3bac:	480b      	ldr	r0, [pc, #44]	; (3bdc <pop_result+0x48>)
    3bae:	f017 fb05 	bl	1b1bc <__assert_func>
    return parser->result_stack[--parser->result_stack_top];
    3bb2:	687b      	ldr	r3, [r7, #4]
    3bb4:	695a      	ldr	r2, [r3, #20]
    3bb6:	687b      	ldr	r3, [r7, #4]
    3bb8:	691b      	ldr	r3, [r3, #16]
    3bba:	1e59      	subs	r1, r3, #1
    3bbc:	687b      	ldr	r3, [r7, #4]
    3bbe:	6119      	str	r1, [r3, #16]
    3bc0:	687b      	ldr	r3, [r7, #4]
    3bc2:	691b      	ldr	r3, [r3, #16]
    3bc4:	009b      	lsls	r3, r3, #2
    3bc6:	4413      	add	r3, r2
    3bc8:	681b      	ldr	r3, [r3, #0]
}
    3bca:	4618      	mov	r0, r3
    3bcc:	3708      	adds	r7, #8
    3bce:	46bd      	mov	sp, r7
    3bd0:	bd80      	pop	{r7, pc}
    3bd2:	bf00      	nop
    3bd4:	0001dde4 	.word	0x0001dde4
    3bd8:	0001df5c 	.word	0x0001df5c
    3bdc:	0001ddd0 	.word	0x0001ddd0

00003be0 <peek_result>:

STATIC mp_parse_node_t peek_result(parser_t *parser, size_t pos) {
    3be0:	b580      	push	{r7, lr}
    3be2:	b082      	sub	sp, #8
    3be4:	af00      	add	r7, sp, #0
    3be6:	6078      	str	r0, [r7, #4]
    3be8:	6039      	str	r1, [r7, #0]
    assert(parser->result_stack_top > pos);
    3bea:	687b      	ldr	r3, [r7, #4]
    3bec:	691a      	ldr	r2, [r3, #16]
    3bee:	683b      	ldr	r3, [r7, #0]
    3bf0:	429a      	cmp	r2, r3
    3bf2:	d806      	bhi.n	3c02 <peek_result+0x22>
    3bf4:	4b0b      	ldr	r3, [pc, #44]	; (3c24 <peek_result+0x44>)
    3bf6:	4a0c      	ldr	r2, [pc, #48]	; (3c28 <peek_result+0x48>)
    3bf8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
    3bfc:	480b      	ldr	r0, [pc, #44]	; (3c2c <peek_result+0x4c>)
    3bfe:	f017 fadd 	bl	1b1bc <__assert_func>
    return parser->result_stack[parser->result_stack_top - 1 - pos];
    3c02:	687b      	ldr	r3, [r7, #4]
    3c04:	695a      	ldr	r2, [r3, #20]
    3c06:	687b      	ldr	r3, [r7, #4]
    3c08:	6919      	ldr	r1, [r3, #16]
    3c0a:	683b      	ldr	r3, [r7, #0]
    3c0c:	1acb      	subs	r3, r1, r3
    3c0e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    3c12:	3b01      	subs	r3, #1
    3c14:	009b      	lsls	r3, r3, #2
    3c16:	4413      	add	r3, r2
    3c18:	681b      	ldr	r3, [r3, #0]
}
    3c1a:	4618      	mov	r0, r3
    3c1c:	3708      	adds	r7, #8
    3c1e:	46bd      	mov	sp, r7
    3c20:	bd80      	pop	{r7, pc}
    3c22:	bf00      	nop
    3c24:	0001de04 	.word	0x0001de04
    3c28:	0001df68 	.word	0x0001df68
    3c2c:	0001ddd0 	.word	0x0001ddd0

00003c30 <push_result_node>:

STATIC void push_result_node(parser_t *parser, mp_parse_node_t pn) {
    3c30:	b580      	push	{r7, lr}
    3c32:	b084      	sub	sp, #16
    3c34:	af00      	add	r7, sp, #0
    3c36:	6078      	str	r0, [r7, #4]
    3c38:	6039      	str	r1, [r7, #0]
    if (parser->result_stack_top >= parser->result_stack_alloc) {
    3c3a:	687b      	ldr	r3, [r7, #4]
    3c3c:	691a      	ldr	r2, [r3, #16]
    3c3e:	687b      	ldr	r3, [r7, #4]
    3c40:	68db      	ldr	r3, [r3, #12]
    3c42:	429a      	cmp	r2, r3
    3c44:	d313      	bcc.n	3c6e <push_result_node+0x3e>
        mp_parse_node_t *stack = m_renew(mp_parse_node_t, parser->result_stack, parser->result_stack_alloc, parser->result_stack_alloc + MICROPY_ALLOC_PARSE_RESULT_INC);
    3c46:	687b      	ldr	r3, [r7, #4]
    3c48:	695a      	ldr	r2, [r3, #20]
    3c4a:	687b      	ldr	r3, [r7, #4]
    3c4c:	68db      	ldr	r3, [r3, #12]
    3c4e:	3310      	adds	r3, #16
    3c50:	009b      	lsls	r3, r3, #2
    3c52:	4619      	mov	r1, r3
    3c54:	4610      	mov	r0, r2
    3c56:	f7fc fb93 	bl	380 <m_realloc>
    3c5a:	60f8      	str	r0, [r7, #12]
        parser->result_stack = stack;
    3c5c:	687b      	ldr	r3, [r7, #4]
    3c5e:	68fa      	ldr	r2, [r7, #12]
    3c60:	615a      	str	r2, [r3, #20]
        parser->result_stack_alloc += MICROPY_ALLOC_PARSE_RESULT_INC;
    3c62:	687b      	ldr	r3, [r7, #4]
    3c64:	68db      	ldr	r3, [r3, #12]
    3c66:	f103 0210 	add.w	r2, r3, #16
    3c6a:	687b      	ldr	r3, [r7, #4]
    3c6c:	60da      	str	r2, [r3, #12]
    }
    parser->result_stack[parser->result_stack_top++] = pn;
    3c6e:	687b      	ldr	r3, [r7, #4]
    3c70:	695a      	ldr	r2, [r3, #20]
    3c72:	687b      	ldr	r3, [r7, #4]
    3c74:	691b      	ldr	r3, [r3, #16]
    3c76:	1c58      	adds	r0, r3, #1
    3c78:	6879      	ldr	r1, [r7, #4]
    3c7a:	6108      	str	r0, [r1, #16]
    3c7c:	009b      	lsls	r3, r3, #2
    3c7e:	4413      	add	r3, r2
    3c80:	683a      	ldr	r2, [r7, #0]
    3c82:	601a      	str	r2, [r3, #0]
}
    3c84:	bf00      	nop
    3c86:	3710      	adds	r7, #16
    3c88:	46bd      	mov	sp, r7
    3c8a:	bd80      	pop	{r7, pc}

00003c8c <make_node_const_object>:

STATIC mp_parse_node_t make_node_const_object(parser_t *parser, size_t src_line, mp_obj_t obj) {
    3c8c:	b580      	push	{r7, lr}
    3c8e:	b086      	sub	sp, #24
    3c90:	af00      	add	r7, sp, #0
    3c92:	60f8      	str	r0, [r7, #12]
    3c94:	60b9      	str	r1, [r7, #8]
    3c96:	607a      	str	r2, [r7, #4]
    mp_parse_node_struct_t *pn = parser_alloc(parser, sizeof(mp_parse_node_struct_t) + sizeof(mp_obj_t));
    3c98:	210c      	movs	r1, #12
    3c9a:	68f8      	ldr	r0, [r7, #12]
    3c9c:	f7ff fdba 	bl	3814 <parser_alloc>
    3ca0:	6178      	str	r0, [r7, #20]
    pn->source_line = src_line;
    3ca2:	697b      	ldr	r3, [r7, #20]
    3ca4:	68ba      	ldr	r2, [r7, #8]
    3ca6:	601a      	str	r2, [r3, #0]
    // nodes are 32-bit pointers, but need to store 64-bit object
    pn->kind_num_nodes = RULE_const_object | (2 << 8);
    pn->nodes[0] = (uint64_t)obj;
    pn->nodes[1] = (uint64_t)obj >> 32;
    #else
    pn->kind_num_nodes = RULE_const_object | (1 << 8);
    3ca8:	697b      	ldr	r3, [r7, #20]
    3caa:	f240 1235 	movw	r2, #309	; 0x135
    3cae:	605a      	str	r2, [r3, #4]
    pn->nodes[0] = (uintptr_t)obj;
    3cb0:	687a      	ldr	r2, [r7, #4]
    3cb2:	697b      	ldr	r3, [r7, #20]
    3cb4:	609a      	str	r2, [r3, #8]
    #endif
    return (mp_parse_node_t)pn;
    3cb6:	697b      	ldr	r3, [r7, #20]
}
    3cb8:	4618      	mov	r0, r3
    3cba:	3718      	adds	r7, #24
    3cbc:	46bd      	mov	sp, r7
    3cbe:	bd80      	pop	{r7, pc}

00003cc0 <mp_parse_node_new_small_int_checked>:

STATIC mp_parse_node_t mp_parse_node_new_small_int_checked(parser_t *parser, mp_obj_t o_val) {
    3cc0:	b580      	push	{r7, lr}
    3cc2:	b084      	sub	sp, #16
    3cc4:	af00      	add	r7, sp, #0
    3cc6:	6078      	str	r0, [r7, #4]
    3cc8:	6039      	str	r1, [r7, #0]
    (void)parser;
    mp_int_t val = MP_OBJ_SMALL_INT_VALUE(o_val);
    3cca:	683b      	ldr	r3, [r7, #0]
    3ccc:	105b      	asrs	r3, r3, #1
    3cce:	60fb      	str	r3, [r7, #12]
    // A parse node is only 32-bits and the small-int value must fit in 31-bits
    if (((val ^ (val << 1)) & 0xffffffff80000000) != 0) {
        return make_node_const_object(parser, 0, o_val);
    }
    #endif
    return mp_parse_node_new_small_int(val);
    3cd0:	68f8      	ldr	r0, [r7, #12]
    3cd2:	f7ff fd63 	bl	379c <mp_parse_node_new_small_int>
    3cd6:	4603      	mov	r3, r0
}
    3cd8:	4618      	mov	r0, r3
    3cda:	3710      	adds	r7, #16
    3cdc:	46bd      	mov	sp, r7
    3cde:	bd80      	pop	{r7, pc}

00003ce0 <push_result_token>:

STATIC void push_result_token(parser_t *parser, uint8_t rule_id) {
    3ce0:	b580      	push	{r7, lr}
    3ce2:	b08c      	sub	sp, #48	; 0x30
    3ce4:	af02      	add	r7, sp, #8
    3ce6:	6078      	str	r0, [r7, #4]
    3ce8:	460b      	mov	r3, r1
    3cea:	70fb      	strb	r3, [r7, #3]
    mp_parse_node_t pn;
    mp_lexer_t *lex = parser->lexer;
    3cec:	687b      	ldr	r3, [r7, #4]
    3cee:	699b      	ldr	r3, [r3, #24]
    3cf0:	61fb      	str	r3, [r7, #28]
    if (lex->tok_kind == MP_TOKEN_NAME) {
    3cf2:	69fb      	ldr	r3, [r7, #28]
    3cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    3cf6:	2b07      	cmp	r3, #7
    3cf8:	d10f      	bne.n	3d1a <push_result_token+0x3a>
        qstr id = qstr_from_strn(lex->vstr.buf, lex->vstr.len);
    3cfa:	69fb      	ldr	r3, [r7, #28]
    3cfc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    3cfe:	69fb      	ldr	r3, [r7, #28]
    3d00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    3d02:	4619      	mov	r1, r3
    3d04:	4610      	mov	r0, r2
    3d06:	f7fd f98c 	bl	1022 <qstr_from_strn>
    3d0a:	61b8      	str	r0, [r7, #24]
        } else {
            pn = mp_parse_node_new_leaf(MP_PARSE_NODE_ID, id);
        }
        #else
        (void)rule_id;
        pn = mp_parse_node_new_leaf(MP_PARSE_NODE_ID, id);
    3d0c:	69bb      	ldr	r3, [r7, #24]
    3d0e:	4619      	mov	r1, r3
    3d10:	2002      	movs	r0, #2
    3d12:	f7ff fd51 	bl	37b8 <mp_parse_node_new_leaf>
    3d16:	6278      	str	r0, [r7, #36]	; 0x24
    3d18:	e08a      	b.n	3e30 <push_result_token+0x150>
        #endif
    } else if (lex->tok_kind == MP_TOKEN_INTEGER) {
    3d1a:	69fb      	ldr	r3, [r7, #28]
    3d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    3d1e:	2b08      	cmp	r3, #8
    3d20:	d11d      	bne.n	3d5e <push_result_token+0x7e>
        mp_obj_t o = mp_parse_num_integer(lex->vstr.buf, lex->vstr.len, 0, lex);
    3d22:	69fb      	ldr	r3, [r7, #28]
    3d24:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
    3d26:	69fb      	ldr	r3, [r7, #28]
    3d28:	6c99      	ldr	r1, [r3, #72]	; 0x48
    3d2a:	69fb      	ldr	r3, [r7, #28]
    3d2c:	2200      	movs	r2, #0
    3d2e:	f007 f92d 	bl	af8c <mp_parse_num_integer>
    3d32:	6178      	str	r0, [r7, #20]
        if (MP_OBJ_IS_SMALL_INT(o)) {
    3d34:	6978      	ldr	r0, [r7, #20]
    3d36:	f7ff fd0d 	bl	3754 <MP_OBJ_IS_SMALL_INT>
    3d3a:	4603      	mov	r3, r0
    3d3c:	2b00      	cmp	r3, #0
    3d3e:	d005      	beq.n	3d4c <push_result_token+0x6c>
            pn = mp_parse_node_new_small_int_checked(parser, o);
    3d40:	6979      	ldr	r1, [r7, #20]
    3d42:	6878      	ldr	r0, [r7, #4]
    3d44:	f7ff ffbc 	bl	3cc0 <mp_parse_node_new_small_int_checked>
    3d48:	6278      	str	r0, [r7, #36]	; 0x24
    3d4a:	e071      	b.n	3e30 <push_result_token+0x150>
        } else {
            pn = make_node_const_object(parser, lex->tok_line, o);
    3d4c:	69fb      	ldr	r3, [r7, #28]
    3d4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    3d50:	697a      	ldr	r2, [r7, #20]
    3d52:	4619      	mov	r1, r3
    3d54:	6878      	ldr	r0, [r7, #4]
    3d56:	f7ff ff99 	bl	3c8c <make_node_const_object>
    3d5a:	6278      	str	r0, [r7, #36]	; 0x24
    3d5c:	e068      	b.n	3e30 <push_result_token+0x150>
        }
    } else if (lex->tok_kind == MP_TOKEN_FLOAT_OR_IMAG) {
    3d5e:	69fb      	ldr	r3, [r7, #28]
    3d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    3d62:	2b09      	cmp	r3, #9
    3d64:	d113      	bne.n	3d8e <push_result_token+0xae>
        mp_obj_t o = mp_parse_num_decimal(lex->vstr.buf, lex->vstr.len, true, false, lex);
    3d66:	69fb      	ldr	r3, [r7, #28]
    3d68:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
    3d6a:	69fb      	ldr	r3, [r7, #28]
    3d6c:	6c99      	ldr	r1, [r3, #72]	; 0x48
    3d6e:	69fb      	ldr	r3, [r7, #28]
    3d70:	9300      	str	r3, [sp, #0]
    3d72:	2300      	movs	r3, #0
    3d74:	2201      	movs	r2, #1
    3d76:	f007 f9eb 	bl	b150 <mp_parse_num_decimal>
    3d7a:	6138      	str	r0, [r7, #16]
        pn = make_node_const_object(parser, lex->tok_line, o);
    3d7c:	69fb      	ldr	r3, [r7, #28]
    3d7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    3d80:	693a      	ldr	r2, [r7, #16]
    3d82:	4619      	mov	r1, r3
    3d84:	6878      	ldr	r0, [r7, #4]
    3d86:	f7ff ff81 	bl	3c8c <make_node_const_object>
    3d8a:	6278      	str	r0, [r7, #36]	; 0x24
    3d8c:	e050      	b.n	3e30 <push_result_token+0x150>
    } else if (lex->tok_kind == MP_TOKEN_STRING || lex->tok_kind == MP_TOKEN_BYTES) {
    3d8e:	69fb      	ldr	r3, [r7, #28]
    3d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    3d92:	2b0a      	cmp	r3, #10
    3d94:	d003      	beq.n	3d9e <push_result_token+0xbe>
    3d96:	69fb      	ldr	r3, [r7, #28]
    3d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    3d9a:	2b0b      	cmp	r3, #11
    3d9c:	d141      	bne.n	3e22 <push_result_token+0x142>
        // Don't automatically intern all strings/bytes.  doc strings (which are usually large)
        // will be discarded by the compiler, and so we shouldn't intern them.
        qstr qst = MP_QSTR_NULL;
    3d9e:	2300      	movs	r3, #0
    3da0:	623b      	str	r3, [r7, #32]
        if (lex->vstr.len <= MICROPY_ALLOC_PARSE_INTERN_STRING_LEN) {
    3da2:	69fb      	ldr	r3, [r7, #28]
    3da4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    3da6:	2b0a      	cmp	r3, #10
    3da8:	d809      	bhi.n	3dbe <push_result_token+0xde>
            // intern short strings
            qst = qstr_from_strn(lex->vstr.buf, lex->vstr.len);
    3daa:	69fb      	ldr	r3, [r7, #28]
    3dac:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    3dae:	69fb      	ldr	r3, [r7, #28]
    3db0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    3db2:	4619      	mov	r1, r3
    3db4:	4610      	mov	r0, r2
    3db6:	f7fd f934 	bl	1022 <qstr_from_strn>
    3dba:	6238      	str	r0, [r7, #32]
    3dbc:	e008      	b.n	3dd0 <push_result_token+0xf0>
        } else {
            // check if this string is already interned
            qst = qstr_find_strn(lex->vstr.buf, lex->vstr.len);
    3dbe:	69fb      	ldr	r3, [r7, #28]
    3dc0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    3dc2:	69fb      	ldr	r3, [r7, #28]
    3dc4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    3dc6:	4619      	mov	r1, r3
    3dc8:	4610      	mov	r0, r2
    3dca:	f7fd f8c7 	bl	f5c <qstr_find_strn>
    3dce:	6238      	str	r0, [r7, #32]
        }
        if (qst != MP_QSTR_NULL) {
    3dd0:	6a3b      	ldr	r3, [r7, #32]
    3dd2:	2b00      	cmp	r3, #0
    3dd4:	d00d      	beq.n	3df2 <push_result_token+0x112>
            // qstr exists, make a leaf node
            pn = mp_parse_node_new_leaf(lex->tok_kind == MP_TOKEN_STRING ? MP_PARSE_NODE_STRING : MP_PARSE_NODE_BYTES, qst);
    3dd6:	69fb      	ldr	r3, [r7, #28]
    3dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    3dda:	2b0a      	cmp	r3, #10
    3ddc:	d101      	bne.n	3de2 <push_result_token+0x102>
    3dde:	2306      	movs	r3, #6
    3de0:	e000      	b.n	3de4 <push_result_token+0x104>
    3de2:	230a      	movs	r3, #10
    3de4:	6a3a      	ldr	r2, [r7, #32]
    3de6:	4611      	mov	r1, r2
    3de8:	4618      	mov	r0, r3
    3dea:	f7ff fce5 	bl	37b8 <mp_parse_node_new_leaf>
    3dee:	6278      	str	r0, [r7, #36]	; 0x24
    } else if (lex->tok_kind == MP_TOKEN_STRING || lex->tok_kind == MP_TOKEN_BYTES) {
    3df0:	e01e      	b.n	3e30 <push_result_token+0x150>
        } else {
            // not interned, make a node holding a pointer to the string/bytes object
            mp_obj_t o = mp_obj_new_str_copy(
                lex->tok_kind == MP_TOKEN_STRING ? &mp_type_str : &mp_type_bytes,
    3df2:	69fb      	ldr	r3, [r7, #28]
    3df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
            mp_obj_t o = mp_obj_new_str_copy(
    3df6:	2b0a      	cmp	r3, #10
    3df8:	d101      	bne.n	3dfe <push_result_token+0x11e>
    3dfa:	4811      	ldr	r0, [pc, #68]	; (3e40 <push_result_token+0x160>)
    3dfc:	e000      	b.n	3e00 <push_result_token+0x120>
    3dfe:	4811      	ldr	r0, [pc, #68]	; (3e44 <push_result_token+0x164>)
                (const byte*)lex->vstr.buf, lex->vstr.len);
    3e00:	69fb      	ldr	r3, [r7, #28]
    3e02:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
            mp_obj_t o = mp_obj_new_str_copy(
    3e04:	69fb      	ldr	r3, [r7, #28]
    3e06:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    3e08:	461a      	mov	r2, r3
    3e0a:	f011 f90e 	bl	1502a <mp_obj_new_str_copy>
    3e0e:	60f8      	str	r0, [r7, #12]
            pn = make_node_const_object(parser, lex->tok_line, o);
    3e10:	69fb      	ldr	r3, [r7, #28]
    3e12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    3e14:	68fa      	ldr	r2, [r7, #12]
    3e16:	4619      	mov	r1, r3
    3e18:	6878      	ldr	r0, [r7, #4]
    3e1a:	f7ff ff37 	bl	3c8c <make_node_const_object>
    3e1e:	6278      	str	r0, [r7, #36]	; 0x24
    } else if (lex->tok_kind == MP_TOKEN_STRING || lex->tok_kind == MP_TOKEN_BYTES) {
    3e20:	e006      	b.n	3e30 <push_result_token+0x150>
        }
    } else {
        pn = mp_parse_node_new_leaf(MP_PARSE_NODE_TOKEN, lex->tok_kind);
    3e22:	69fb      	ldr	r3, [r7, #28]
    3e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    3e26:	4619      	mov	r1, r3
    3e28:	200e      	movs	r0, #14
    3e2a:	f7ff fcc5 	bl	37b8 <mp_parse_node_new_leaf>
    3e2e:	6278      	str	r0, [r7, #36]	; 0x24
    }
    push_result_node(parser, pn);
    3e30:	6a79      	ldr	r1, [r7, #36]	; 0x24
    3e32:	6878      	ldr	r0, [r7, #4]
    3e34:	f7ff fefc 	bl	3c30 <push_result_node>
}
    3e38:	bf00      	nop
    3e3a:	3728      	adds	r7, #40	; 0x28
    3e3c:	46bd      	mov	sp, r7
    3e3e:	bd80      	pop	{r7, pc}
    3e40:	00021964 	.word	0x00021964
    3e44:	000219a0 	.word	0x000219a0

00003e48 <fold_logical_constants>:
#endif

STATIC void push_result_rule(parser_t *parser, size_t src_line, uint8_t rule_id, size_t num_args);

#if MICROPY_COMP_CONST_FOLDING
STATIC bool fold_logical_constants(parser_t *parser, uint8_t rule_id, size_t *num_args) {
    3e48:	b580      	push	{r7, lr}
    3e4a:	b08a      	sub	sp, #40	; 0x28
    3e4c:	af00      	add	r7, sp, #0
    3e4e:	60f8      	str	r0, [r7, #12]
    3e50:	460b      	mov	r3, r1
    3e52:	607a      	str	r2, [r7, #4]
    3e54:	72fb      	strb	r3, [r7, #11]
    if (rule_id == RULE_or_test
    3e56:	7afb      	ldrb	r3, [r7, #11]
    3e58:	2b1c      	cmp	r3, #28
    3e5a:	d002      	beq.n	3e62 <fold_logical_constants+0x1a>
        || rule_id == RULE_and_test) {
    3e5c:	7afb      	ldrb	r3, [r7, #11]
    3e5e:	2b1d      	cmp	r3, #29
    3e60:	d169      	bne.n	3f36 <fold_logical_constants+0xee>
        // folding for binary logical ops: or and
        size_t copy_to = *num_args;
    3e62:	687b      	ldr	r3, [r7, #4]
    3e64:	681b      	ldr	r3, [r3, #0]
    3e66:	627b      	str	r3, [r7, #36]	; 0x24
        for (size_t i = copy_to; i > 0;) {
    3e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3e6a:	623b      	str	r3, [r7, #32]
    3e6c:	e03c      	b.n	3ee8 <fold_logical_constants+0xa0>
            mp_parse_node_t pn = peek_result(parser, --i);
    3e6e:	6a3b      	ldr	r3, [r7, #32]
    3e70:	3b01      	subs	r3, #1
    3e72:	623b      	str	r3, [r7, #32]
    3e74:	6a39      	ldr	r1, [r7, #32]
    3e76:	68f8      	ldr	r0, [r7, #12]
    3e78:	f7ff feb2 	bl	3be0 <peek_result>
    3e7c:	6178      	str	r0, [r7, #20]
            parser->result_stack[parser->result_stack_top - copy_to] = pn;
    3e7e:	68fb      	ldr	r3, [r7, #12]
    3e80:	695a      	ldr	r2, [r3, #20]
    3e82:	68fb      	ldr	r3, [r7, #12]
    3e84:	6919      	ldr	r1, [r3, #16]
    3e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3e88:	1acb      	subs	r3, r1, r3
    3e8a:	009b      	lsls	r3, r3, #2
    3e8c:	4413      	add	r3, r2
    3e8e:	697a      	ldr	r2, [r7, #20]
    3e90:	601a      	str	r2, [r3, #0]
            if (i == 0) {
    3e92:	6a3b      	ldr	r3, [r7, #32]
    3e94:	2b00      	cmp	r3, #0
    3e96:	d02b      	beq.n	3ef0 <fold_logical_constants+0xa8>
                // always need to keep the last value
                break;
            }
            if (rule_id == RULE_or_test) {
    3e98:	7afb      	ldrb	r3, [r7, #11]
    3e9a:	2b1c      	cmp	r3, #28
    3e9c:	d112      	bne.n	3ec4 <fold_logical_constants+0x7c>
                if (mp_parse_node_is_const_true(pn)) {
    3e9e:	6978      	ldr	r0, [r7, #20]
    3ea0:	f7ff fdd9 	bl	3a56 <mp_parse_node_is_const_true>
    3ea4:	4603      	mov	r3, r0
    3ea6:	2b00      	cmp	r3, #0
    3ea8:	d124      	bne.n	3ef4 <fold_logical_constants+0xac>
                    //
                    break;
                } else if (!mp_parse_node_is_const_false(pn)) {
    3eaa:	6978      	ldr	r0, [r7, #20]
    3eac:	f7ff fdb7 	bl	3a1e <mp_parse_node_is_const_false>
    3eb0:	4603      	mov	r3, r0
    3eb2:	f083 0301 	eor.w	r3, r3, #1
    3eb6:	b2db      	uxtb	r3, r3
    3eb8:	2b00      	cmp	r3, #0
    3eba:	d015      	beq.n	3ee8 <fold_logical_constants+0xa0>
                    copy_to -= 1;
    3ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3ebe:	3b01      	subs	r3, #1
    3ec0:	627b      	str	r3, [r7, #36]	; 0x24
    3ec2:	e011      	b.n	3ee8 <fold_logical_constants+0xa0>
                }
            } else {
                // RULE_and_test
                if (mp_parse_node_is_const_false(pn)) {
    3ec4:	6978      	ldr	r0, [r7, #20]
    3ec6:	f7ff fdaa 	bl	3a1e <mp_parse_node_is_const_false>
    3eca:	4603      	mov	r3, r0
    3ecc:	2b00      	cmp	r3, #0
    3ece:	d113      	bne.n	3ef8 <fold_logical_constants+0xb0>
                    break;
                } else if (!mp_parse_node_is_const_true(pn)) {
    3ed0:	6978      	ldr	r0, [r7, #20]
    3ed2:	f7ff fdc0 	bl	3a56 <mp_parse_node_is_const_true>
    3ed6:	4603      	mov	r3, r0
    3ed8:	f083 0301 	eor.w	r3, r3, #1
    3edc:	b2db      	uxtb	r3, r3
    3ede:	2b00      	cmp	r3, #0
    3ee0:	d002      	beq.n	3ee8 <fold_logical_constants+0xa0>
                    copy_to -= 1;
    3ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3ee4:	3b01      	subs	r3, #1
    3ee6:	627b      	str	r3, [r7, #36]	; 0x24
        for (size_t i = copy_to; i > 0;) {
    3ee8:	6a3b      	ldr	r3, [r7, #32]
    3eea:	2b00      	cmp	r3, #0
    3eec:	d1bf      	bne.n	3e6e <fold_logical_constants+0x26>
    3eee:	e004      	b.n	3efa <fold_logical_constants+0xb2>
                break;
    3ef0:	bf00      	nop
    3ef2:	e002      	b.n	3efa <fold_logical_constants+0xb2>
                    break;
    3ef4:	bf00      	nop
    3ef6:	e000      	b.n	3efa <fold_logical_constants+0xb2>
                    break;
    3ef8:	bf00      	nop
                }
            }
        }
        copy_to -= 1; // copy_to now contains number of args to pop
    3efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3efc:	3b01      	subs	r3, #1
    3efe:	627b      	str	r3, [r7, #36]	; 0x24

        // pop and discard all the short-circuited expressions
        for (size_t i = 0; i < copy_to; ++i) {
    3f00:	2300      	movs	r3, #0
    3f02:	61fb      	str	r3, [r7, #28]
    3f04:	e005      	b.n	3f12 <fold_logical_constants+0xca>
            pop_result(parser);
    3f06:	68f8      	ldr	r0, [r7, #12]
    3f08:	f7ff fe44 	bl	3b94 <pop_result>
        for (size_t i = 0; i < copy_to; ++i) {
    3f0c:	69fb      	ldr	r3, [r7, #28]
    3f0e:	3301      	adds	r3, #1
    3f10:	61fb      	str	r3, [r7, #28]
    3f12:	69fa      	ldr	r2, [r7, #28]
    3f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3f16:	429a      	cmp	r2, r3
    3f18:	d3f5      	bcc.n	3f06 <fold_logical_constants+0xbe>
        }
        *num_args -= copy_to;
    3f1a:	687b      	ldr	r3, [r7, #4]
    3f1c:	681a      	ldr	r2, [r3, #0]
    3f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3f20:	1ad2      	subs	r2, r2, r3
    3f22:	687b      	ldr	r3, [r7, #4]
    3f24:	601a      	str	r2, [r3, #0]

        // we did a complete folding if there's only 1 arg left
        return *num_args == 1;
    3f26:	687b      	ldr	r3, [r7, #4]
    3f28:	681b      	ldr	r3, [r3, #0]
    3f2a:	2b01      	cmp	r3, #1
    3f2c:	bf0c      	ite	eq
    3f2e:	2301      	moveq	r3, #1
    3f30:	2300      	movne	r3, #0
    3f32:	b2db      	uxtb	r3, r3
    3f34:	e02b      	b.n	3f8e <fold_logical_constants+0x146>

    } else if (rule_id == RULE_not_test_2) {
    3f36:	7afb      	ldrb	r3, [r7, #11]
    3f38:	2b1e      	cmp	r3, #30
    3f3a:	d127      	bne.n	3f8c <fold_logical_constants+0x144>
        // folding for unary logical op: not
        mp_parse_node_t pn = peek_result(parser, 0);
    3f3c:	2100      	movs	r1, #0
    3f3e:	68f8      	ldr	r0, [r7, #12]
    3f40:	f7ff fe4e 	bl	3be0 <peek_result>
    3f44:	61b8      	str	r0, [r7, #24]
        if (mp_parse_node_is_const_false(pn)) {
    3f46:	69b8      	ldr	r0, [r7, #24]
    3f48:	f7ff fd69 	bl	3a1e <mp_parse_node_is_const_false>
    3f4c:	4603      	mov	r3, r0
    3f4e:	2b00      	cmp	r3, #0
    3f50:	d005      	beq.n	3f5e <fold_logical_constants+0x116>
            pn = mp_parse_node_new_leaf(MP_PARSE_NODE_TOKEN, MP_TOKEN_KW_TRUE);
    3f52:	210f      	movs	r1, #15
    3f54:	200e      	movs	r0, #14
    3f56:	f7ff fc2f 	bl	37b8 <mp_parse_node_new_leaf>
    3f5a:	61b8      	str	r0, [r7, #24]
    3f5c:	e00d      	b.n	3f7a <fold_logical_constants+0x132>
        } else if (mp_parse_node_is_const_true(pn)) {
    3f5e:	69b8      	ldr	r0, [r7, #24]
    3f60:	f7ff fd79 	bl	3a56 <mp_parse_node_is_const_true>
    3f64:	4603      	mov	r3, r0
    3f66:	2b00      	cmp	r3, #0
    3f68:	d005      	beq.n	3f76 <fold_logical_constants+0x12e>
            pn = mp_parse_node_new_leaf(MP_PARSE_NODE_TOKEN, MP_TOKEN_KW_FALSE);
    3f6a:	210d      	movs	r1, #13
    3f6c:	200e      	movs	r0, #14
    3f6e:	f7ff fc23 	bl	37b8 <mp_parse_node_new_leaf>
    3f72:	61b8      	str	r0, [r7, #24]
    3f74:	e001      	b.n	3f7a <fold_logical_constants+0x132>
        } else {
            return false;
    3f76:	2300      	movs	r3, #0
    3f78:	e009      	b.n	3f8e <fold_logical_constants+0x146>
        }
        pop_result(parser);
    3f7a:	68f8      	ldr	r0, [r7, #12]
    3f7c:	f7ff fe0a 	bl	3b94 <pop_result>
        push_result_node(parser, pn);
    3f80:	69b9      	ldr	r1, [r7, #24]
    3f82:	68f8      	ldr	r0, [r7, #12]
    3f84:	f7ff fe54 	bl	3c30 <push_result_node>
        return true;
    3f88:	2301      	movs	r3, #1
    3f8a:	e000      	b.n	3f8e <fold_logical_constants+0x146>
    }

    return false;
    3f8c:	2300      	movs	r3, #0
}
    3f8e:	4618      	mov	r0, r3
    3f90:	3728      	adds	r7, #40	; 0x28
    3f92:	46bd      	mov	sp, r7
    3f94:	bd80      	pop	{r7, pc}

00003f96 <fold_constants>:

STATIC bool fold_constants(parser_t *parser, uint8_t rule_id, size_t num_args) {
    3f96:	b580      	push	{r7, lr}
    3f98:	b094      	sub	sp, #80	; 0x50
    3f9a:	af00      	add	r7, sp, #0
    3f9c:	60f8      	str	r0, [r7, #12]
    3f9e:	460b      	mov	r3, r1
    3fa0:	607a      	str	r2, [r7, #4]
    3fa2:	72fb      	strb	r3, [r7, #11]
    // this code does folding of arbitrary integer expressions, eg 1 + 2 * 3 + 4
    // it does not do partial folding, eg 1 + 2 + x -> 3 + x

    mp_obj_t arg0;
    if (rule_id == RULE_expr
    3fa4:	7afb      	ldrb	r3, [r7, #11]
    3fa6:	2b21      	cmp	r3, #33	; 0x21
    3fa8:	d005      	beq.n	3fb6 <fold_constants+0x20>
        || rule_id == RULE_xor_expr
    3faa:	7afb      	ldrb	r3, [r7, #11]
    3fac:	2b22      	cmp	r3, #34	; 0x22
    3fae:	d002      	beq.n	3fb6 <fold_constants+0x20>
        || rule_id == RULE_and_expr) {
    3fb0:	7afb      	ldrb	r3, [r7, #11]
    3fb2:	2b23      	cmp	r3, #35	; 0x23
    3fb4:	d149      	bne.n	404a <fold_constants+0xb4>
        // folding for binary ops: | ^ &
        mp_parse_node_t pn = peek_result(parser, num_args - 1);
    3fb6:	687b      	ldr	r3, [r7, #4]
    3fb8:	3b01      	subs	r3, #1
    3fba:	4619      	mov	r1, r3
    3fbc:	68f8      	ldr	r0, [r7, #12]
    3fbe:	f7ff fe0f 	bl	3be0 <peek_result>
    3fc2:	6238      	str	r0, [r7, #32]
        if (!mp_parse_node_get_int_maybe(pn, &arg0)) {
    3fc4:	f107 031c 	add.w	r3, r7, #28
    3fc8:	4619      	mov	r1, r3
    3fca:	6a38      	ldr	r0, [r7, #32]
    3fcc:	f7ff fd5f 	bl	3a8e <mp_parse_node_get_int_maybe>
    3fd0:	4603      	mov	r3, r0
    3fd2:	f083 0301 	eor.w	r3, r3, #1
    3fd6:	b2db      	uxtb	r3, r3
    3fd8:	2b00      	cmp	r3, #0
    3fda:	d001      	beq.n	3fe0 <fold_constants+0x4a>
            return false;
    3fdc:	2300      	movs	r3, #0
    3fde:	e10a      	b.n	41f6 <fold_constants+0x260>
        }
        mp_binary_op_t op;
        if (rule_id == RULE_expr) {
    3fe0:	7afb      	ldrb	r3, [r7, #11]
    3fe2:	2b21      	cmp	r3, #33	; 0x21
    3fe4:	d102      	bne.n	3fec <fold_constants+0x56>
            op = MP_BINARY_OP_OR;
    3fe6:	2315      	movs	r3, #21
    3fe8:	64fb      	str	r3, [r7, #76]	; 0x4c
    3fea:	e007      	b.n	3ffc <fold_constants+0x66>
        } else if (rule_id == RULE_xor_expr) {
    3fec:	7afb      	ldrb	r3, [r7, #11]
    3fee:	2b22      	cmp	r3, #34	; 0x22
    3ff0:	d102      	bne.n	3ff8 <fold_constants+0x62>
            op = MP_BINARY_OP_XOR;
    3ff2:	2316      	movs	r3, #22
    3ff4:	64fb      	str	r3, [r7, #76]	; 0x4c
    3ff6:	e001      	b.n	3ffc <fold_constants+0x66>
        } else {
            op = MP_BINARY_OP_AND;
    3ff8:	2317      	movs	r3, #23
    3ffa:	64fb      	str	r3, [r7, #76]	; 0x4c
        }
        for (ssize_t i = num_args - 2; i >= 0; --i) {
    3ffc:	687b      	ldr	r3, [r7, #4]
    3ffe:	3b02      	subs	r3, #2
    4000:	64bb      	str	r3, [r7, #72]	; 0x48
    4002:	e01e      	b.n	4042 <fold_constants+0xac>
            pn = peek_result(parser, i);
    4004:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    4006:	4619      	mov	r1, r3
    4008:	68f8      	ldr	r0, [r7, #12]
    400a:	f7ff fde9 	bl	3be0 <peek_result>
    400e:	6238      	str	r0, [r7, #32]
            mp_obj_t arg1;
            if (!mp_parse_node_get_int_maybe(pn, &arg1)) {
    4010:	f107 0318 	add.w	r3, r7, #24
    4014:	4619      	mov	r1, r3
    4016:	6a38      	ldr	r0, [r7, #32]
    4018:	f7ff fd39 	bl	3a8e <mp_parse_node_get_int_maybe>
    401c:	4603      	mov	r3, r0
    401e:	f083 0301 	eor.w	r3, r3, #1
    4022:	b2db      	uxtb	r3, r3
    4024:	2b00      	cmp	r3, #0
    4026:	d001      	beq.n	402c <fold_constants+0x96>
                return false;
    4028:	2300      	movs	r3, #0
    402a:	e0e4      	b.n	41f6 <fold_constants+0x260>
            }
            arg0 = mp_binary_op(op, arg0, arg1);
    402c:	69fb      	ldr	r3, [r7, #28]
    402e:	69ba      	ldr	r2, [r7, #24]
    4030:	4619      	mov	r1, r3
    4032:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
    4034:	f007 fc24 	bl	b880 <mp_binary_op>
    4038:	4603      	mov	r3, r0
    403a:	61fb      	str	r3, [r7, #28]
        for (ssize_t i = num_args - 2; i >= 0; --i) {
    403c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    403e:	3b01      	subs	r3, #1
    4040:	64bb      	str	r3, [r7, #72]	; 0x48
    4042:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    4044:	2b00      	cmp	r3, #0
    4046:	dadd      	bge.n	4004 <fold_constants+0x6e>
        || rule_id == RULE_and_expr) {
    4048:	e0ab      	b.n	41a2 <fold_constants+0x20c>
        }
    } else if (rule_id == RULE_shift_expr
    404a:	7afb      	ldrb	r3, [r7, #11]
    404c:	2b24      	cmp	r3, #36	; 0x24
    404e:	d005      	beq.n	405c <fold_constants+0xc6>
        || rule_id == RULE_arith_expr
    4050:	7afb      	ldrb	r3, [r7, #11]
    4052:	2b25      	cmp	r3, #37	; 0x25
    4054:	d002      	beq.n	405c <fold_constants+0xc6>
        || rule_id == RULE_term) {
    4056:	7afb      	ldrb	r3, [r7, #11]
    4058:	2b26      	cmp	r3, #38	; 0x26
    405a:	d163      	bne.n	4124 <fold_constants+0x18e>
        // folding for binary ops: << >> + - * / % //
        mp_parse_node_t pn = peek_result(parser, num_args - 1);
    405c:	687b      	ldr	r3, [r7, #4]
    405e:	3b01      	subs	r3, #1
    4060:	4619      	mov	r1, r3
    4062:	68f8      	ldr	r0, [r7, #12]
    4064:	f7ff fdbc 	bl	3be0 <peek_result>
    4068:	6338      	str	r0, [r7, #48]	; 0x30
        if (!mp_parse_node_get_int_maybe(pn, &arg0)) {
    406a:	f107 031c 	add.w	r3, r7, #28
    406e:	4619      	mov	r1, r3
    4070:	6b38      	ldr	r0, [r7, #48]	; 0x30
    4072:	f7ff fd0c 	bl	3a8e <mp_parse_node_get_int_maybe>
    4076:	4603      	mov	r3, r0
    4078:	f083 0301 	eor.w	r3, r3, #1
    407c:	b2db      	uxtb	r3, r3
    407e:	2b00      	cmp	r3, #0
    4080:	d001      	beq.n	4086 <fold_constants+0xf0>
            return false;
    4082:	2300      	movs	r3, #0
    4084:	e0b7      	b.n	41f6 <fold_constants+0x260>
        }
        for (ssize_t i = num_args - 2; i >= 1; i -= 2) {
    4086:	687b      	ldr	r3, [r7, #4]
    4088:	3b02      	subs	r3, #2
    408a:	647b      	str	r3, [r7, #68]	; 0x44
    408c:	e046      	b.n	411c <fold_constants+0x186>
            pn = peek_result(parser, i - 1);
    408e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    4090:	3b01      	subs	r3, #1
    4092:	4619      	mov	r1, r3
    4094:	68f8      	ldr	r0, [r7, #12]
    4096:	f7ff fda3 	bl	3be0 <peek_result>
    409a:	6338      	str	r0, [r7, #48]	; 0x30
            mp_obj_t arg1;
            if (!mp_parse_node_get_int_maybe(pn, &arg1)) {
    409c:	f107 0314 	add.w	r3, r7, #20
    40a0:	4619      	mov	r1, r3
    40a2:	6b38      	ldr	r0, [r7, #48]	; 0x30
    40a4:	f7ff fcf3 	bl	3a8e <mp_parse_node_get_int_maybe>
    40a8:	4603      	mov	r3, r0
    40aa:	f083 0301 	eor.w	r3, r3, #1
    40ae:	b2db      	uxtb	r3, r3
    40b0:	2b00      	cmp	r3, #0
    40b2:	d001      	beq.n	40b8 <fold_constants+0x122>
                return false;
    40b4:	2300      	movs	r3, #0
    40b6:	e09e      	b.n	41f6 <fold_constants+0x260>
            }
            mp_token_kind_t tok = MP_PARSE_NODE_LEAF_ARG(peek_result(parser, i));
    40b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    40ba:	4619      	mov	r1, r3
    40bc:	68f8      	ldr	r0, [r7, #12]
    40be:	f7ff fd8f 	bl	3be0 <peek_result>
    40c2:	4603      	mov	r3, r0
    40c4:	091b      	lsrs	r3, r3, #4
    40c6:	62fb      	str	r3, [r7, #44]	; 0x2c
                255,//MP_BINARY_OP_LESS
                MP_BINARY_OP_LSHIFT,
                255,//MP_BINARY_OP_MORE
                MP_BINARY_OP_RSHIFT,
            };
            mp_binary_op_t op = token_to_op[tok - MP_TOKEN_OP_PLUS];
    40c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    40ca:	3b2f      	subs	r3, #47	; 0x2f
    40cc:	4a4c      	ldr	r2, [pc, #304]	; (4200 <fold_constants+0x26a>)
    40ce:	5cd3      	ldrb	r3, [r2, r3]
    40d0:	62bb      	str	r3, [r7, #40]	; 0x28
            if (op == (mp_binary_op_t)255) {
    40d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    40d4:	2bff      	cmp	r3, #255	; 0xff
    40d6:	d101      	bne.n	40dc <fold_constants+0x146>
                return false;
    40d8:	2300      	movs	r3, #0
    40da:	e08c      	b.n	41f6 <fold_constants+0x260>
            }
            int rhs_sign = mp_obj_int_sign(arg1);
    40dc:	697b      	ldr	r3, [r7, #20]
    40de:	4618      	mov	r0, r3
    40e0:	f00c fb08 	bl	106f4 <mp_obj_int_sign>
    40e4:	6278      	str	r0, [r7, #36]	; 0x24
            if (op <= MP_BINARY_OP_RSHIFT) {
    40e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
    40e8:	2b19      	cmp	r3, #25
    40ea:	d804      	bhi.n	40f6 <fold_constants+0x160>
                // << and >> can't have negative rhs
                if (rhs_sign < 0) {
    40ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    40ee:	2b00      	cmp	r3, #0
    40f0:	da09      	bge.n	4106 <fold_constants+0x170>
                    return false;
    40f2:	2300      	movs	r3, #0
    40f4:	e07f      	b.n	41f6 <fold_constants+0x260>
                }
            } else if (op >= MP_BINARY_OP_FLOOR_DIVIDE) {
    40f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
    40f8:	2b1c      	cmp	r3, #28
    40fa:	d904      	bls.n	4106 <fold_constants+0x170>
                // % and // can't have zero rhs
                if (rhs_sign == 0) {
    40fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    40fe:	2b00      	cmp	r3, #0
    4100:	d101      	bne.n	4106 <fold_constants+0x170>
                    return false;
    4102:	2300      	movs	r3, #0
    4104:	e077      	b.n	41f6 <fold_constants+0x260>
                }
            }
            arg0 = mp_binary_op(op, arg0, arg1);
    4106:	69fb      	ldr	r3, [r7, #28]
    4108:	697a      	ldr	r2, [r7, #20]
    410a:	4619      	mov	r1, r3
    410c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    410e:	f007 fbb7 	bl	b880 <mp_binary_op>
    4112:	4603      	mov	r3, r0
    4114:	61fb      	str	r3, [r7, #28]
        for (ssize_t i = num_args - 2; i >= 1; i -= 2) {
    4116:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    4118:	3b02      	subs	r3, #2
    411a:	647b      	str	r3, [r7, #68]	; 0x44
    411c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    411e:	2b00      	cmp	r3, #0
    4120:	dcb5      	bgt.n	408e <fold_constants+0xf8>
        || rule_id == RULE_term) {
    4122:	e03e      	b.n	41a2 <fold_constants+0x20c>
        }
    } else if (rule_id == RULE_factor_2) {
    4124:	7afb      	ldrb	r3, [r7, #11]
    4126:	2b27      	cmp	r3, #39	; 0x27
    4128:	d139      	bne.n	419e <fold_constants+0x208>
        // folding for unary ops: + - ~
        mp_parse_node_t pn = peek_result(parser, 0);
    412a:	2100      	movs	r1, #0
    412c:	68f8      	ldr	r0, [r7, #12]
    412e:	f7ff fd57 	bl	3be0 <peek_result>
    4132:	63b8      	str	r0, [r7, #56]	; 0x38
        if (!mp_parse_node_get_int_maybe(pn, &arg0)) {
    4134:	f107 031c 	add.w	r3, r7, #28
    4138:	4619      	mov	r1, r3
    413a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
    413c:	f7ff fca7 	bl	3a8e <mp_parse_node_get_int_maybe>
    4140:	4603      	mov	r3, r0
    4142:	f083 0301 	eor.w	r3, r3, #1
    4146:	b2db      	uxtb	r3, r3
    4148:	2b00      	cmp	r3, #0
    414a:	d001      	beq.n	4150 <fold_constants+0x1ba>
            return false;
    414c:	2300      	movs	r3, #0
    414e:	e052      	b.n	41f6 <fold_constants+0x260>
        }
        mp_token_kind_t tok = MP_PARSE_NODE_LEAF_ARG(peek_result(parser, 1));
    4150:	2101      	movs	r1, #1
    4152:	68f8      	ldr	r0, [r7, #12]
    4154:	f7ff fd44 	bl	3be0 <peek_result>
    4158:	4603      	mov	r3, r0
    415a:	091b      	lsrs	r3, r3, #4
    415c:	637b      	str	r3, [r7, #52]	; 0x34
        mp_unary_op_t op;
        if (tok == MP_TOKEN_OP_PLUS) {
    415e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    4160:	2b2f      	cmp	r3, #47	; 0x2f
    4162:	d102      	bne.n	416a <fold_constants+0x1d4>
            op = MP_UNARY_OP_POSITIVE;
    4164:	2300      	movs	r3, #0
    4166:	643b      	str	r3, [r7, #64]	; 0x40
    4168:	e011      	b.n	418e <fold_constants+0x1f8>
        } else if (tok == MP_TOKEN_OP_MINUS) {
    416a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    416c:	2b30      	cmp	r3, #48	; 0x30
    416e:	d102      	bne.n	4176 <fold_constants+0x1e0>
            op = MP_UNARY_OP_NEGATIVE;
    4170:	2301      	movs	r3, #1
    4172:	643b      	str	r3, [r7, #64]	; 0x40
    4174:	e00b      	b.n	418e <fold_constants+0x1f8>
        } else {
            assert(tok == MP_TOKEN_OP_TILDE); // should be
    4176:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    4178:	2b3d      	cmp	r3, #61	; 0x3d
    417a:	d006      	beq.n	418a <fold_constants+0x1f4>
    417c:	4b21      	ldr	r3, [pc, #132]	; (4204 <fold_constants+0x26e>)
    417e:	4a22      	ldr	r2, [pc, #136]	; (4208 <fold_constants+0x272>)
    4180:	f240 21b3 	movw	r1, #691	; 0x2b3
    4184:	4821      	ldr	r0, [pc, #132]	; (420c <fold_constants+0x276>)
    4186:	f017 f819 	bl	1b1bc <__assert_func>
            op = MP_UNARY_OP_INVERT;
    418a:	2302      	movs	r3, #2
    418c:	643b      	str	r3, [r7, #64]	; 0x40
        }
        arg0 = mp_unary_op(op, arg0);
    418e:	69fb      	ldr	r3, [r7, #28]
    4190:	4619      	mov	r1, r3
    4192:	6c38      	ldr	r0, [r7, #64]	; 0x40
    4194:	f007 fa8e 	bl	b6b4 <mp_unary_op>
    4198:	4603      	mov	r3, r0
    419a:	61fb      	str	r3, [r7, #28]
    419c:	e001      	b.n	41a2 <fold_constants+0x20c>
        }
        arg0 = dest[0];
    #endif

    } else {
        return false;
    419e:	2300      	movs	r3, #0
    41a0:	e029      	b.n	41f6 <fold_constants+0x260>
    }

    // success folding this rule

    for (size_t i = num_args; i > 0; i--) {
    41a2:	687b      	ldr	r3, [r7, #4]
    41a4:	63fb      	str	r3, [r7, #60]	; 0x3c
    41a6:	e005      	b.n	41b4 <fold_constants+0x21e>
        pop_result(parser);
    41a8:	68f8      	ldr	r0, [r7, #12]
    41aa:	f7ff fcf3 	bl	3b94 <pop_result>
    for (size_t i = num_args; i > 0; i--) {
    41ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    41b0:	3b01      	subs	r3, #1
    41b2:	63fb      	str	r3, [r7, #60]	; 0x3c
    41b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    41b6:	2b00      	cmp	r3, #0
    41b8:	d1f6      	bne.n	41a8 <fold_constants+0x212>
    }
    if (MP_OBJ_IS_SMALL_INT(arg0)) {
    41ba:	69fb      	ldr	r3, [r7, #28]
    41bc:	4618      	mov	r0, r3
    41be:	f7ff fac9 	bl	3754 <MP_OBJ_IS_SMALL_INT>
    41c2:	4603      	mov	r3, r0
    41c4:	2b00      	cmp	r3, #0
    41c6:	d00a      	beq.n	41de <fold_constants+0x248>
        push_result_node(parser, mp_parse_node_new_small_int_checked(parser, arg0));
    41c8:	69fb      	ldr	r3, [r7, #28]
    41ca:	4619      	mov	r1, r3
    41cc:	68f8      	ldr	r0, [r7, #12]
    41ce:	f7ff fd77 	bl	3cc0 <mp_parse_node_new_small_int_checked>
    41d2:	4603      	mov	r3, r0
    41d4:	4619      	mov	r1, r3
    41d6:	68f8      	ldr	r0, [r7, #12]
    41d8:	f7ff fd2a 	bl	3c30 <push_result_node>
    41dc:	e00a      	b.n	41f4 <fold_constants+0x25e>
    } else {
        // TODO reuse memory for parse node struct?
        push_result_node(parser, make_node_const_object(parser, 0, arg0));
    41de:	69fb      	ldr	r3, [r7, #28]
    41e0:	461a      	mov	r2, r3
    41e2:	2100      	movs	r1, #0
    41e4:	68f8      	ldr	r0, [r7, #12]
    41e6:	f7ff fd51 	bl	3c8c <make_node_const_object>
    41ea:	4603      	mov	r3, r0
    41ec:	4619      	mov	r1, r3
    41ee:	68f8      	ldr	r0, [r7, #12]
    41f0:	f7ff fd1e 	bl	3c30 <push_result_node>
    }

    return true;
    41f4:	2301      	movs	r3, #1
}
    41f6:	4618      	mov	r0, r3
    41f8:	3750      	adds	r7, #80	; 0x50
    41fa:	46bd      	mov	sp, r7
    41fc:	bd80      	pop	{r7, pc}
    41fe:	bf00      	nop
    4200:	0001df74 	.word	0x0001df74
    4204:	0001de24 	.word	0x0001de24
    4208:	0001df80 	.word	0x0001df80
    420c:	0001ddd0 	.word	0x0001ddd0

00004210 <push_result_rule>:
#endif

STATIC void push_result_rule(parser_t *parser, size_t src_line, uint8_t rule_id, size_t num_args) {
    4210:	b590      	push	{r4, r7, lr}
    4212:	b089      	sub	sp, #36	; 0x24
    4214:	af00      	add	r7, sp, #0
    4216:	60f8      	str	r0, [r7, #12]
    4218:	60b9      	str	r1, [r7, #8]
    421a:	603b      	str	r3, [r7, #0]
    421c:	4613      	mov	r3, r2
    421e:	71fb      	strb	r3, [r7, #7]
    // optimise away parenthesis around an expression if possible
    if (rule_id == RULE_atom_paren) {
    4220:	79fb      	ldrb	r3, [r7, #7]
    4222:	2b2a      	cmp	r3, #42	; 0x2a
    4224:	d114      	bne.n	4250 <push_result_rule+0x40>
        // there should be just 1 arg for this rule
        mp_parse_node_t pn = peek_result(parser, 0);
    4226:	2100      	movs	r1, #0
    4228:	68f8      	ldr	r0, [r7, #12]
    422a:	f7ff fcd9 	bl	3be0 <peek_result>
    422e:	61b8      	str	r0, [r7, #24]
        if (MP_PARSE_NODE_IS_NULL(pn)) {
    4230:	69bb      	ldr	r3, [r7, #24]
    4232:	2b00      	cmp	r3, #0
    4234:	d00c      	beq.n	4250 <push_result_rule+0x40>
            // need to keep parenthesis for ()
        } else if (MP_PARSE_NODE_IS_STRUCT_KIND(pn, RULE_testlist_comp)) {
    4236:	69bb      	ldr	r3, [r7, #24]
    4238:	2b00      	cmp	r3, #0
    423a:	d045      	beq.n	42c8 <push_result_rule+0xb8>
    423c:	69bb      	ldr	r3, [r7, #24]
    423e:	f003 0303 	and.w	r3, r3, #3
    4242:	2b00      	cmp	r3, #0
    4244:	d140      	bne.n	42c8 <push_result_rule+0xb8>
    4246:	69bb      	ldr	r3, [r7, #24]
    4248:	685b      	ldr	r3, [r3, #4]
    424a:	b2db      	uxtb	r3, r3
    424c:	2b8a      	cmp	r3, #138	; 0x8a
    424e:	d13b      	bne.n	42c8 <push_result_rule+0xb8>
            return;
        }
    }

    #if MICROPY_COMP_CONST_FOLDING
    if (fold_logical_constants(parser, rule_id, &num_args)) {
    4250:	463a      	mov	r2, r7
    4252:	79fb      	ldrb	r3, [r7, #7]
    4254:	4619      	mov	r1, r3
    4256:	68f8      	ldr	r0, [r7, #12]
    4258:	f7ff fdf6 	bl	3e48 <fold_logical_constants>
    425c:	4603      	mov	r3, r0
    425e:	2b00      	cmp	r3, #0
    4260:	d134      	bne.n	42cc <push_result_rule+0xbc>
        // we folded this rule so return straight away
        return;
    }
    if (fold_constants(parser, rule_id, num_args)) {
    4262:	683a      	ldr	r2, [r7, #0]
    4264:	79fb      	ldrb	r3, [r7, #7]
    4266:	4619      	mov	r1, r3
    4268:	68f8      	ldr	r0, [r7, #12]
    426a:	f7ff fe94 	bl	3f96 <fold_constants>
    426e:	4603      	mov	r3, r0
    4270:	2b00      	cmp	r3, #0
    4272:	d12d      	bne.n	42d0 <push_result_rule+0xc0>
        // we folded this rule so return straight away
        return;
    }
    #endif

    mp_parse_node_struct_t *pn = parser_alloc(parser, sizeof(mp_parse_node_struct_t) + sizeof(mp_parse_node_t) * num_args);
    4274:	683b      	ldr	r3, [r7, #0]
    4276:	3302      	adds	r3, #2
    4278:	009b      	lsls	r3, r3, #2
    427a:	4619      	mov	r1, r3
    427c:	68f8      	ldr	r0, [r7, #12]
    427e:	f7ff fac9 	bl	3814 <parser_alloc>
    4282:	6178      	str	r0, [r7, #20]
    pn->source_line = src_line;
    4284:	697b      	ldr	r3, [r7, #20]
    4286:	68ba      	ldr	r2, [r7, #8]
    4288:	601a      	str	r2, [r3, #0]
    pn->kind_num_nodes = (rule_id & 0xff) | (num_args << 8);
    428a:	79fa      	ldrb	r2, [r7, #7]
    428c:	683b      	ldr	r3, [r7, #0]
    428e:	021b      	lsls	r3, r3, #8
    4290:	431a      	orrs	r2, r3
    4292:	697b      	ldr	r3, [r7, #20]
    4294:	605a      	str	r2, [r3, #4]
    for (size_t i = num_args; i > 0; i--) {
    4296:	683b      	ldr	r3, [r7, #0]
    4298:	61fb      	str	r3, [r7, #28]
    429a:	e00c      	b.n	42b6 <push_result_rule+0xa6>
        pn->nodes[i - 1] = pop_result(parser);
    429c:	69fb      	ldr	r3, [r7, #28]
    429e:	1e5c      	subs	r4, r3, #1
    42a0:	68f8      	ldr	r0, [r7, #12]
    42a2:	f7ff fc77 	bl	3b94 <pop_result>
    42a6:	4601      	mov	r1, r0
    42a8:	697b      	ldr	r3, [r7, #20]
    42aa:	1ca2      	adds	r2, r4, #2
    42ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (size_t i = num_args; i > 0; i--) {
    42b0:	69fb      	ldr	r3, [r7, #28]
    42b2:	3b01      	subs	r3, #1
    42b4:	61fb      	str	r3, [r7, #28]
    42b6:	69fb      	ldr	r3, [r7, #28]
    42b8:	2b00      	cmp	r3, #0
    42ba:	d1ef      	bne.n	429c <push_result_rule+0x8c>
    }
    push_result_node(parser, (mp_parse_node_t)pn);
    42bc:	697b      	ldr	r3, [r7, #20]
    42be:	4619      	mov	r1, r3
    42c0:	68f8      	ldr	r0, [r7, #12]
    42c2:	f7ff fcb5 	bl	3c30 <push_result_node>
    42c6:	e004      	b.n	42d2 <push_result_rule+0xc2>
            return;
    42c8:	bf00      	nop
    42ca:	e002      	b.n	42d2 <push_result_rule+0xc2>
        return;
    42cc:	bf00      	nop
    42ce:	e000      	b.n	42d2 <push_result_rule+0xc2>
        return;
    42d0:	bf00      	nop
}
    42d2:	3724      	adds	r7, #36	; 0x24
    42d4:	46bd      	mov	sp, r7
    42d6:	bd90      	pop	{r4, r7, pc}

000042d8 <mp_parse>:

mp_parse_tree_t mp_parse(mp_lexer_t *lex, mp_parse_input_kind_t input_kind) {
    42d8:	b580      	push	{r7, lr}
    42da:	b0a2      	sub	sp, #136	; 0x88
    42dc:	af00      	add	r7, sp, #0
    42de:	60f8      	str	r0, [r7, #12]
    42e0:	60b9      	str	r1, [r7, #8]
    42e2:	607a      	str	r2, [r7, #4]

    // initialise parser and allocate memory for its stacks

    parser_t parser;

    parser.rule_stack_alloc = MICROPY_ALLOC_PARSE_RULE_INIT;
    42e4:	2340      	movs	r3, #64	; 0x40
    42e6:	61fb      	str	r3, [r7, #28]
    parser.rule_stack_top = 0;
    42e8:	2300      	movs	r3, #0
    42ea:	623b      	str	r3, [r7, #32]
    parser.rule_stack = m_new(rule_stack_t, parser.rule_stack_alloc);
    42ec:	69fb      	ldr	r3, [r7, #28]
    42ee:	00db      	lsls	r3, r3, #3
    42f0:	4618      	mov	r0, r3
    42f2:	f7fc f813 	bl	31c <m_malloc>
    42f6:	4603      	mov	r3, r0
    42f8:	627b      	str	r3, [r7, #36]	; 0x24

    parser.result_stack_alloc = MICROPY_ALLOC_PARSE_RESULT_INIT;
    42fa:	2320      	movs	r3, #32
    42fc:	62bb      	str	r3, [r7, #40]	; 0x28
    parser.result_stack_top = 0;
    42fe:	2300      	movs	r3, #0
    4300:	62fb      	str	r3, [r7, #44]	; 0x2c
    parser.result_stack = m_new(mp_parse_node_t, parser.result_stack_alloc);
    4302:	6abb      	ldr	r3, [r7, #40]	; 0x28
    4304:	009b      	lsls	r3, r3, #2
    4306:	4618      	mov	r0, r3
    4308:	f7fc f808 	bl	31c <m_malloc>
    430c:	4603      	mov	r3, r0
    430e:	633b      	str	r3, [r7, #48]	; 0x30

    parser.lexer = lex;
    4310:	68bb      	ldr	r3, [r7, #8]
    4312:	637b      	str	r3, [r7, #52]	; 0x34

    parser.tree.chunk = NULL;
    4314:	2300      	movs	r3, #0
    4316:	63fb      	str	r3, [r7, #60]	; 0x3c
    parser.cur_chunk = NULL;
    4318:	2300      	movs	r3, #0
    431a:	643b      	str	r3, [r7, #64]	; 0x40
    mp_map_init(&parser.consts, 0);
    #endif

    // work out the top-level rule to use, and push it on the stack
    size_t top_level_rule;
    switch (input_kind) {
    431c:	687b      	ldr	r3, [r7, #4]
    431e:	2b00      	cmp	r3, #0
    4320:	d002      	beq.n	4328 <mp_parse+0x50>
    4322:	2b02      	cmp	r3, #2
    4324:	d004      	beq.n	4330 <mp_parse+0x58>
    4326:	e007      	b.n	4338 <mp_parse+0x60>
        case MP_PARSE_SINGLE_INPUT: top_level_rule = RULE_single_input; break;
    4328:	2336      	movs	r3, #54	; 0x36
    432a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    432e:	e006      	b.n	433e <mp_parse+0x66>
        case MP_PARSE_EVAL_INPUT: top_level_rule = RULE_eval_input; break;
    4330:	2338      	movs	r3, #56	; 0x38
    4332:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    4336:	e002      	b.n	433e <mp_parse+0x66>
        default: top_level_rule = RULE_file_input;
    4338:	2300      	movs	r3, #0
    433a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    }
    push_rule(&parser, lex->tok_line, top_level_rule, 0);
    433e:	68bb      	ldr	r3, [r7, #8]
    4340:	6b99      	ldr	r1, [r3, #56]	; 0x38
    4342:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
    4346:	b2da      	uxtb	r2, r3
    4348:	f107 001c 	add.w	r0, r7, #28
    434c:	2300      	movs	r3, #0
    434e:	f7ff faca 	bl	38e6 <push_rule>

    // parse!

    bool backtrack = false;
    4352:	2300      	movs	r3, #0
    4354:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83

    for (;;) {
        next_rule:
        if (parser.rule_stack_top == 0) {
    4358:	6a3b      	ldr	r3, [r7, #32]
    435a:	2b00      	cmp	r3, #0
    435c:	d104      	bne.n	4368 <mp_parse+0x90>
    #if MICROPY_COMP_CONST
    mp_map_deinit(&parser.consts);
    #endif

    // truncate final chunk and link into chain of chunks
    if (parser.cur_chunk != NULL) {
    435e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    4360:	2b00      	cmp	r3, #0
    4362:	f040 8292 	bne.w	488a <mp_parse+0x5b2>
    4366:	e2a1      	b.n	48ac <mp_parse+0x5d4>
        uint8_t rule_id = pop_rule(&parser, &i, &rule_src_line);
    4368:	f107 0214 	add.w	r2, r7, #20
    436c:	f107 0118 	add.w	r1, r7, #24
    4370:	f107 031c 	add.w	r3, r7, #28
    4374:	4618      	mov	r0, r3
    4376:	f7ff fb23 	bl	39c0 <pop_rule>
    437a:	4603      	mov	r3, r0
    437c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        uint8_t rule_act = rule_act_table[rule_id];
    4380:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
    4384:	4ab2      	ldr	r2, [pc, #712]	; (4650 <mp_parse+0x378>)
    4386:	5cd3      	ldrb	r3, [r2, r3]
    4388:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
        const uint16_t *rule_arg = get_rule_arg(rule_id);
    438c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
    4390:	4618      	mov	r0, r3
    4392:	f7ff fa20 	bl	37d6 <get_rule_arg>
    4396:	6638      	str	r0, [r7, #96]	; 0x60
        size_t n = rule_act & RULE_ACT_ARG_MASK;
    4398:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
    439c:	f003 030f 	and.w	r3, r3, #15
    43a0:	65fb      	str	r3, [r7, #92]	; 0x5c
        switch (rule_act & RULE_ACT_KIND_MASK) {
    43a2:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
    43a6:	f003 0330 	and.w	r3, r3, #48	; 0x30
    43aa:	2b10      	cmp	r3, #16
    43ac:	d002      	beq.n	43b4 <mp_parse+0xdc>
    43ae:	2b20      	cmp	r3, #32
    43b0:	d067      	beq.n	4482 <mp_parse+0x1aa>
    43b2:	e1aa      	b.n	470a <mp_parse+0x432>
                if (i > 0 && !backtrack) {
    43b4:	69bb      	ldr	r3, [r7, #24]
    43b6:	2b00      	cmp	r3, #0
    43b8:	d006      	beq.n	43c8 <mp_parse+0xf0>
    43ba:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
    43be:	f083 0301 	eor.w	r3, r3, #1
    43c2:	b2db      	uxtb	r3, r3
    43c4:	2b00      	cmp	r3, #0
    43c6:	d1c7      	bne.n	4358 <mp_parse+0x80>
                    backtrack = false;
    43c8:	2300      	movs	r3, #0
    43ca:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
                for (; i < n; ++i) {
    43ce:	e050      	b.n	4472 <mp_parse+0x19a>
                    uint16_t kind = rule_arg[i] & RULE_ARG_KIND_MASK;
    43d0:	69bb      	ldr	r3, [r7, #24]
    43d2:	005b      	lsls	r3, r3, #1
    43d4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
    43d6:	4413      	add	r3, r2
    43d8:	881b      	ldrh	r3, [r3, #0]
    43da:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
    43de:	f023 030f 	bic.w	r3, r3, #15
    43e2:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
                    if (kind == RULE_ARG_TOK) {
    43e6:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
    43ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    43ee:	d116      	bne.n	441e <mp_parse+0x146>
                        if (lex->tok_kind == (rule_arg[i] & RULE_ARG_ARG_MASK)) {
    43f0:	68bb      	ldr	r3, [r7, #8]
    43f2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    43f4:	69bb      	ldr	r3, [r7, #24]
    43f6:	005b      	lsls	r3, r3, #1
    43f8:	6e39      	ldr	r1, [r7, #96]	; 0x60
    43fa:	440b      	add	r3, r1
    43fc:	881b      	ldrh	r3, [r3, #0]
    43fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
    4402:	429a      	cmp	r2, r3
    4404:	d132      	bne.n	446c <mp_parse+0x194>
                            push_result_token(&parser, rule_id);
    4406:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
    440a:	f107 031c 	add.w	r3, r7, #28
    440e:	4611      	mov	r1, r2
    4410:	4618      	mov	r0, r3
    4412:	f7ff fc65 	bl	3ce0 <push_result_token>
                            mp_lexer_to_next(lex);
    4416:	68b8      	ldr	r0, [r7, #8]
    4418:	f7fe fe2f 	bl	307a <mp_lexer_to_next>
                            goto next_rule;
    441c:	e79c      	b.n	4358 <mp_parse+0x80>
                        assert(kind == RULE_ARG_RULE);
    441e:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
    4422:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
    4426:	d006      	beq.n	4436 <mp_parse+0x15e>
    4428:	4b8a      	ldr	r3, [pc, #552]	; (4654 <mp_parse+0x37c>)
    442a:	4a8b      	ldr	r2, [pc, #556]	; (4658 <mp_parse+0x380>)
    442c:	f240 318b 	movw	r1, #907	; 0x38b
    4430:	488a      	ldr	r0, [pc, #552]	; (465c <mp_parse+0x384>)
    4432:	f016 fec3 	bl	1b1bc <__assert_func>
                        if (i + 1 < n) {
    4436:	69bb      	ldr	r3, [r7, #24]
    4438:	1c5a      	adds	r2, r3, #1
    443a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    443c:	429a      	cmp	r2, r3
    443e:	d208      	bcs.n	4452 <mp_parse+0x17a>
                            push_rule(&parser, rule_src_line, rule_id, i + 1); // save this or-rule
    4440:	6979      	ldr	r1, [r7, #20]
    4442:	69bb      	ldr	r3, [r7, #24]
    4444:	3301      	adds	r3, #1
    4446:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
    444a:	f107 001c 	add.w	r0, r7, #28
    444e:	f7ff fa4a 	bl	38e6 <push_rule>
                        push_rule_from_arg(&parser, rule_arg[i]); // push child of or-rule
    4452:	69bb      	ldr	r3, [r7, #24]
    4454:	005b      	lsls	r3, r3, #1
    4456:	6e3a      	ldr	r2, [r7, #96]	; 0x60
    4458:	4413      	add	r3, r2
    445a:	881b      	ldrh	r3, [r3, #0]
    445c:	461a      	mov	r2, r3
    445e:	f107 031c 	add.w	r3, r7, #28
    4462:	4611      	mov	r1, r2
    4464:	4618      	mov	r0, r3
    4466:	f7ff fa7c 	bl	3962 <push_rule_from_arg>
                        goto next_rule;
    446a:	e775      	b.n	4358 <mp_parse+0x80>
                for (; i < n; ++i) {
    446c:	69bb      	ldr	r3, [r7, #24]
    446e:	3301      	adds	r3, #1
    4470:	61bb      	str	r3, [r7, #24]
    4472:	69ba      	ldr	r2, [r7, #24]
    4474:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    4476:	429a      	cmp	r2, r3
    4478:	d3aa      	bcc.n	43d0 <mp_parse+0xf8>
                backtrack = true;
    447a:	2301      	movs	r3, #1
    447c:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
                break;
    4480:	e202      	b.n	4888 <mp_parse+0x5b0>
                if (backtrack) {
    4482:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
    4486:	2b00      	cmp	r3, #0
    4488:	d06c      	beq.n	4564 <mp_parse+0x28c>
                    assert(i > 0);
    448a:	69bb      	ldr	r3, [r7, #24]
    448c:	2b00      	cmp	r3, #0
    448e:	d106      	bne.n	449e <mp_parse+0x1c6>
    4490:	4b73      	ldr	r3, [pc, #460]	; (4660 <mp_parse+0x388>)
    4492:	4a71      	ldr	r2, [pc, #452]	; (4658 <mp_parse+0x380>)
    4494:	f240 319a 	movw	r1, #922	; 0x39a
    4498:	4870      	ldr	r0, [pc, #448]	; (465c <mp_parse+0x384>)
    449a:	f016 fe8f 	bl	1b1bc <__assert_func>
                    if ((rule_arg[i - 1] & RULE_ARG_KIND_MASK) == RULE_ARG_OPT_RULE) {
    449e:	69bb      	ldr	r3, [r7, #24]
    44a0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
    44a4:	3b01      	subs	r3, #1
    44a6:	005b      	lsls	r3, r3, #1
    44a8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
    44aa:	4413      	add	r3, r2
    44ac:	881b      	ldrh	r3, [r3, #0]
    44ae:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
    44b2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
    44b6:	d109      	bne.n	44cc <mp_parse+0x1f4>
                        push_result_node(&parser, MP_PARSE_NODE_NULL);
    44b8:	f107 031c 	add.w	r3, r7, #28
    44bc:	2100      	movs	r1, #0
    44be:	4618      	mov	r0, r3
    44c0:	f7ff fbb6 	bl	3c30 <push_result_node>
                        backtrack = false;
    44c4:	2300      	movs	r3, #0
    44c6:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
    44ca:	e04b      	b.n	4564 <mp_parse+0x28c>
                        if (i > 1) {
    44cc:	69bb      	ldr	r3, [r7, #24]
    44ce:	2b01      	cmp	r3, #1
    44d0:	f200 81f4 	bhi.w	48bc <mp_parse+0x5e4>
                            goto next_rule;
    44d4:	e740      	b.n	4358 <mp_parse+0x80>
                    if ((rule_arg[i] & RULE_ARG_KIND_MASK) == RULE_ARG_TOK) {
    44d6:	69bb      	ldr	r3, [r7, #24]
    44d8:	005b      	lsls	r3, r3, #1
    44da:	6e3a      	ldr	r2, [r7, #96]	; 0x60
    44dc:	4413      	add	r3, r2
    44de:	881b      	ldrh	r3, [r3, #0]
    44e0:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
    44e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    44e8:	d123      	bne.n	4532 <mp_parse+0x25a>
                        mp_token_kind_t tok_kind = rule_arg[i] & RULE_ARG_ARG_MASK;
    44ea:	69bb      	ldr	r3, [r7, #24]
    44ec:	005b      	lsls	r3, r3, #1
    44ee:	6e3a      	ldr	r2, [r7, #96]	; 0x60
    44f0:	4413      	add	r3, r2
    44f2:	881b      	ldrh	r3, [r3, #0]
    44f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
    44f8:	657b      	str	r3, [r7, #84]	; 0x54
                        if (lex->tok_kind == tok_kind) {
    44fa:	68bb      	ldr	r3, [r7, #8]
    44fc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    44fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    4500:	429a      	cmp	r2, r3
    4502:	d10e      	bne.n	4522 <mp_parse+0x24a>
                            if (tok_kind == MP_TOKEN_NAME) {
    4504:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    4506:	2b07      	cmp	r3, #7
    4508:	d107      	bne.n	451a <mp_parse+0x242>
                                push_result_token(&parser, rule_id);
    450a:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
    450e:	f107 031c 	add.w	r3, r7, #28
    4512:	4611      	mov	r1, r2
    4514:	4618      	mov	r0, r3
    4516:	f7ff fbe3 	bl	3ce0 <push_result_token>
                            mp_lexer_to_next(lex);
    451a:	68b8      	ldr	r0, [r7, #8]
    451c:	f7fe fdad 	bl	307a <mp_lexer_to_next>
    4520:	e01d      	b.n	455e <mp_parse+0x286>
                            if (i > 0) {
    4522:	69bb      	ldr	r3, [r7, #24]
    4524:	2b00      	cmp	r3, #0
    4526:	f040 81cb 	bne.w	48c0 <mp_parse+0x5e8>
                                backtrack = true;
    452a:	2301      	movs	r3, #1
    452c:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
                                goto next_rule;
    4530:	e712      	b.n	4358 <mp_parse+0x80>
                        push_rule(&parser, rule_src_line, rule_id, i + 1); // save this and-rule
    4532:	6979      	ldr	r1, [r7, #20]
    4534:	69bb      	ldr	r3, [r7, #24]
    4536:	3301      	adds	r3, #1
    4538:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
    453c:	f107 001c 	add.w	r0, r7, #28
    4540:	f7ff f9d1 	bl	38e6 <push_rule>
                        push_rule_from_arg(&parser, rule_arg[i]); // push child of and-rule
    4544:	69bb      	ldr	r3, [r7, #24]
    4546:	005b      	lsls	r3, r3, #1
    4548:	6e3a      	ldr	r2, [r7, #96]	; 0x60
    454a:	4413      	add	r3, r2
    454c:	881b      	ldrh	r3, [r3, #0]
    454e:	461a      	mov	r2, r3
    4550:	f107 031c 	add.w	r3, r7, #28
    4554:	4611      	mov	r1, r2
    4556:	4618      	mov	r0, r3
    4558:	f7ff fa03 	bl	3962 <push_rule_from_arg>
                        goto next_rule;
    455c:	e6fc      	b.n	4358 <mp_parse+0x80>
                for (; i < n; ++i) {
    455e:	69bb      	ldr	r3, [r7, #24]
    4560:	3301      	adds	r3, #1
    4562:	61bb      	str	r3, [r7, #24]
    4564:	69ba      	ldr	r2, [r7, #24]
    4566:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    4568:	429a      	cmp	r2, r3
    456a:	d3b4      	bcc.n	44d6 <mp_parse+0x1fe>
                assert(i == n);
    456c:	69ba      	ldr	r2, [r7, #24]
    456e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    4570:	429a      	cmp	r2, r3
    4572:	d006      	beq.n	4582 <mp_parse+0x2aa>
    4574:	4b3b      	ldr	r3, [pc, #236]	; (4664 <mp_parse+0x38c>)
    4576:	4a38      	ldr	r2, [pc, #224]	; (4658 <mp_parse+0x380>)
    4578:	f240 31c7 	movw	r1, #967	; 0x3c7
    457c:	4837      	ldr	r0, [pc, #220]	; (465c <mp_parse+0x384>)
    457e:	f016 fe1d 	bl	1b1bc <__assert_func>
                if (input_kind != MP_PARSE_SINGLE_INPUT && rule_id == RULE_expr_stmt && peek_result(&parser, 0) == MP_PARSE_NODE_NULL) {
    4582:	687b      	ldr	r3, [r7, #4]
    4584:	2b00      	cmp	r3, #0
    4586:	d03c      	beq.n	4602 <mp_parse+0x32a>
    4588:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
    458c:	2b05      	cmp	r3, #5
    458e:	d138      	bne.n	4602 <mp_parse+0x32a>
    4590:	f107 031c 	add.w	r3, r7, #28
    4594:	2100      	movs	r1, #0
    4596:	4618      	mov	r0, r3
    4598:	f7ff fb22 	bl	3be0 <peek_result>
    459c:	4603      	mov	r3, r0
    459e:	2b00      	cmp	r3, #0
    45a0:	d12f      	bne.n	4602 <mp_parse+0x32a>
                    mp_parse_node_t p = peek_result(&parser, 1);
    45a2:	f107 031c 	add.w	r3, r7, #28
    45a6:	2101      	movs	r1, #1
    45a8:	4618      	mov	r0, r3
    45aa:	f7ff fb19 	bl	3be0 <peek_result>
    45ae:	6538      	str	r0, [r7, #80]	; 0x50
                    if ((MP_PARSE_NODE_IS_LEAF(p) && !MP_PARSE_NODE_IS_ID(p))
    45b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    45b2:	f003 0303 	and.w	r3, r3, #3
    45b6:	2b00      	cmp	r3, #0
    45b8:	d004      	beq.n	45c4 <mp_parse+0x2ec>
    45ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    45bc:	f003 030f 	and.w	r3, r3, #15
    45c0:	2b02      	cmp	r3, #2
    45c2:	d10c      	bne.n	45de <mp_parse+0x306>
                        || MP_PARSE_NODE_IS_STRUCT_KIND(p, RULE_const_object)) {
    45c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    45c6:	2b00      	cmp	r3, #0
    45c8:	d01b      	beq.n	4602 <mp_parse+0x32a>
    45ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    45cc:	f003 0303 	and.w	r3, r3, #3
    45d0:	2b00      	cmp	r3, #0
    45d2:	d116      	bne.n	4602 <mp_parse+0x32a>
    45d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    45d6:	685b      	ldr	r3, [r3, #4]
    45d8:	b2db      	uxtb	r3, r3
    45da:	2b35      	cmp	r3, #53	; 0x35
    45dc:	d111      	bne.n	4602 <mp_parse+0x32a>
                        pop_result(&parser); // MP_PARSE_NODE_NULL
    45de:	f107 031c 	add.w	r3, r7, #28
    45e2:	4618      	mov	r0, r3
    45e4:	f7ff fad6 	bl	3b94 <pop_result>
                        pop_result(&parser); // const expression (leaf or RULE_const_object)
    45e8:	f107 031c 	add.w	r3, r7, #28
    45ec:	4618      	mov	r0, r3
    45ee:	f7ff fad1 	bl	3b94 <pop_result>
                        push_result_rule(&parser, rule_src_line, RULE_pass_stmt, 0);
    45f2:	6979      	ldr	r1, [r7, #20]
    45f4:	f107 001c 	add.w	r0, r7, #28
    45f8:	2300      	movs	r3, #0
    45fa:	2208      	movs	r2, #8
    45fc:	f7ff fe08 	bl	4210 <push_result_rule>
                        break;
    4600:	e142      	b.n	4888 <mp_parse+0x5b0>
                i = 0;
    4602:	2300      	movs	r3, #0
    4604:	61bb      	str	r3, [r7, #24]
                size_t num_not_nil = 0;
    4606:	2300      	movs	r3, #0
    4608:	67fb      	str	r3, [r7, #124]	; 0x7c
                for (size_t x = n; x > 0;) {
    460a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    460c:	67bb      	str	r3, [r7, #120]	; 0x78
    460e:	e03b      	b.n	4688 <mp_parse+0x3b0>
                    --x;
    4610:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    4612:	3b01      	subs	r3, #1
    4614:	67bb      	str	r3, [r7, #120]	; 0x78
                    if ((rule_arg[x] & RULE_ARG_KIND_MASK) == RULE_ARG_TOK) {
    4616:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    4618:	005b      	lsls	r3, r3, #1
    461a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
    461c:	4413      	add	r3, r2
    461e:	881b      	ldrh	r3, [r3, #0]
    4620:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
    4624:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    4628:	d11e      	bne.n	4668 <mp_parse+0x390>
                        mp_token_kind_t tok_kind = rule_arg[x] & RULE_ARG_ARG_MASK;
    462a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    462c:	005b      	lsls	r3, r3, #1
    462e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
    4630:	4413      	add	r3, r2
    4632:	881b      	ldrh	r3, [r3, #0]
    4634:	f3c3 030b 	ubfx	r3, r3, #0, #12
    4638:	64fb      	str	r3, [r7, #76]	; 0x4c
                        if (tok_kind == MP_TOKEN_NAME) {
    463a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    463c:	2b07      	cmp	r3, #7
    463e:	d123      	bne.n	4688 <mp_parse+0x3b0>
                            i += 1;
    4640:	69bb      	ldr	r3, [r7, #24]
    4642:	3301      	adds	r3, #1
    4644:	61bb      	str	r3, [r7, #24]
                            num_not_nil += 1;
    4646:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    4648:	3301      	adds	r3, #1
    464a:	67fb      	str	r3, [r7, #124]	; 0x7c
    464c:	e01c      	b.n	4688 <mp_parse+0x3b0>
    464e:	bf00      	nop
    4650:	0001d8e0 	.word	0x0001d8e0
    4654:	0001de40 	.word	0x0001de40
    4658:	0001df90 	.word	0x0001df90
    465c:	0001ddd0 	.word	0x0001ddd0
    4660:	0001de58 	.word	0x0001de58
    4664:	0001de60 	.word	0x0001de60
                        if (peek_result(&parser, i) != MP_PARSE_NODE_NULL) {
    4668:	69ba      	ldr	r2, [r7, #24]
    466a:	f107 031c 	add.w	r3, r7, #28
    466e:	4611      	mov	r1, r2
    4670:	4618      	mov	r0, r3
    4672:	f7ff fab5 	bl	3be0 <peek_result>
    4676:	4603      	mov	r3, r0
    4678:	2b00      	cmp	r3, #0
    467a:	d002      	beq.n	4682 <mp_parse+0x3aa>
                            num_not_nil += 1;
    467c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    467e:	3301      	adds	r3, #1
    4680:	67fb      	str	r3, [r7, #124]	; 0x7c
                        i += 1;
    4682:	69bb      	ldr	r3, [r7, #24]
    4684:	3301      	adds	r3, #1
    4686:	61bb      	str	r3, [r7, #24]
                for (size_t x = n; x > 0;) {
    4688:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    468a:	2b00      	cmp	r3, #0
    468c:	d1c0      	bne.n	4610 <mp_parse+0x338>
                if (num_not_nil == 1 && (rule_act & RULE_ACT_ALLOW_IDENT)) {
    468e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    4690:	2b01      	cmp	r3, #1
    4692:	d124      	bne.n	46de <mp_parse+0x406>
    4694:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
    4698:	f003 0340 	and.w	r3, r3, #64	; 0x40
    469c:	2b00      	cmp	r3, #0
    469e:	d01e      	beq.n	46de <mp_parse+0x406>
                    mp_parse_node_t pn = MP_PARSE_NODE_NULL;
    46a0:	2300      	movs	r3, #0
    46a2:	677b      	str	r3, [r7, #116]	; 0x74
                    for (size_t x = 0; x < i; ++x) {
    46a4:	2300      	movs	r3, #0
    46a6:	673b      	str	r3, [r7, #112]	; 0x70
    46a8:	e00d      	b.n	46c6 <mp_parse+0x3ee>
                        mp_parse_node_t pn2 = pop_result(&parser);
    46aa:	f107 031c 	add.w	r3, r7, #28
    46ae:	4618      	mov	r0, r3
    46b0:	f7ff fa70 	bl	3b94 <pop_result>
    46b4:	64b8      	str	r0, [r7, #72]	; 0x48
                        if (pn2 != MP_PARSE_NODE_NULL) {
    46b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    46b8:	2b00      	cmp	r3, #0
    46ba:	d001      	beq.n	46c0 <mp_parse+0x3e8>
                            pn = pn2;
    46bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    46be:	677b      	str	r3, [r7, #116]	; 0x74
                    for (size_t x = 0; x < i; ++x) {
    46c0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
    46c2:	3301      	adds	r3, #1
    46c4:	673b      	str	r3, [r7, #112]	; 0x70
    46c6:	69bb      	ldr	r3, [r7, #24]
    46c8:	6f3a      	ldr	r2, [r7, #112]	; 0x70
    46ca:	429a      	cmp	r2, r3
    46cc:	d3ed      	bcc.n	46aa <mp_parse+0x3d2>
                    push_result_node(&parser, pn);
    46ce:	f107 031c 	add.w	r3, r7, #28
    46d2:	6f79      	ldr	r1, [r7, #116]	; 0x74
    46d4:	4618      	mov	r0, r3
    46d6:	f7ff faab 	bl	3c30 <push_result_node>
                if (num_not_nil == 1 && (rule_act & RULE_ACT_ALLOW_IDENT)) {
    46da:	bf00      	nop
                break;
    46dc:	e0d4      	b.n	4888 <mp_parse+0x5b0>
                    if (rule_act & RULE_ACT_ADD_BLANK) {
    46de:	f997 3066 	ldrsb.w	r3, [r7, #102]	; 0x66
    46e2:	2b00      	cmp	r3, #0
    46e4:	da08      	bge.n	46f8 <mp_parse+0x420>
                        push_result_node(&parser, MP_PARSE_NODE_NULL);
    46e6:	f107 031c 	add.w	r3, r7, #28
    46ea:	2100      	movs	r1, #0
    46ec:	4618      	mov	r0, r3
    46ee:	f7ff fa9f 	bl	3c30 <push_result_node>
                        i += 1;
    46f2:	69bb      	ldr	r3, [r7, #24]
    46f4:	3301      	adds	r3, #1
    46f6:	61bb      	str	r3, [r7, #24]
                    push_result_rule(&parser, rule_src_line, rule_id, i);
    46f8:	6979      	ldr	r1, [r7, #20]
    46fa:	69bb      	ldr	r3, [r7, #24]
    46fc:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
    4700:	f107 001c 	add.w	r0, r7, #28
    4704:	f7ff fd84 	bl	4210 <push_result_rule>
                break;
    4708:	e0be      	b.n	4888 <mp_parse+0x5b0>
                assert((rule_act & RULE_ACT_KIND_MASK) == RULE_ACT_LIST);
    470a:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
    470e:	f003 0330 	and.w	r3, r3, #48	; 0x30
    4712:	2b30      	cmp	r3, #48	; 0x30
    4714:	d006      	beq.n	4724 <mp_parse+0x44c>
    4716:	4b90      	ldr	r3, [pc, #576]	; (4958 <mp_parse+0x680>)
    4718:	4a90      	ldr	r2, [pc, #576]	; (495c <mp_parse+0x684>)
    471a:	f240 410a 	movw	r1, #1034	; 0x40a
    471e:	4890      	ldr	r0, [pc, #576]	; (4960 <mp_parse+0x688>)
    4720:	f016 fd4c 	bl	1b1bc <__assert_func>
                if (backtrack) {
    4724:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
    4728:	2b00      	cmp	r3, #0
    472a:	d025      	beq.n	4778 <mp_parse+0x4a0>
                    had_trailing_sep = false;
    472c:	2300      	movs	r3, #0
    472e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
                    if (n == 2) {
    4732:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    4734:	2b02      	cmp	r3, #2
    4736:	d107      	bne.n	4748 <mp_parse+0x470>
                        if (i == 1) {
    4738:	69bb      	ldr	r3, [r7, #24]
    473a:	2b01      	cmp	r3, #1
    473c:	d100      	bne.n	4740 <mp_parse+0x468>
                            goto next_rule;
    473e:	e60b      	b.n	4358 <mp_parse+0x80>
                            backtrack = false;
    4740:	2300      	movs	r3, #0
    4742:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
    4746:	e068      	b.n	481a <mp_parse+0x542>
                        if (i == 1) {
    4748:	69bb      	ldr	r3, [r7, #24]
    474a:	2b01      	cmp	r3, #1
    474c:	d100      	bne.n	4750 <mp_parse+0x478>
                            goto next_rule;
    474e:	e603      	b.n	4358 <mp_parse+0x80>
                        } else if ((i & 1) == 1) {
    4750:	69bb      	ldr	r3, [r7, #24]
    4752:	f003 0301 	and.w	r3, r3, #1
    4756:	2b00      	cmp	r3, #0
    4758:	d00a      	beq.n	4770 <mp_parse+0x498>
                            if (n == 3) {
    475a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    475c:	2b03      	cmp	r3, #3
    475e:	f040 80b1 	bne.w	48c4 <mp_parse+0x5ec>
                                had_trailing_sep = true;
    4762:	2301      	movs	r3, #1
    4764:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
                                backtrack = false;
    4768:	2300      	movs	r3, #0
    476a:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
    476e:	e054      	b.n	481a <mp_parse+0x542>
                            backtrack = false;
    4770:	2300      	movs	r3, #0
    4772:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
    4776:	e050      	b.n	481a <mp_parse+0x542>
                        size_t arg = rule_arg[i & 1 & n];
    4778:	69ba      	ldr	r2, [r7, #24]
    477a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    477c:	4013      	ands	r3, r2
    477e:	f003 0301 	and.w	r3, r3, #1
    4782:	005b      	lsls	r3, r3, #1
    4784:	6e3a      	ldr	r2, [r7, #96]	; 0x60
    4786:	4413      	add	r3, r2
    4788:	881b      	ldrh	r3, [r3, #0]
    478a:	647b      	str	r3, [r7, #68]	; 0x44
                        if ((arg & RULE_ARG_KIND_MASK) == RULE_ARG_TOK) {
    478c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    478e:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
    4792:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    4796:	d123      	bne.n	47e0 <mp_parse+0x508>
                            if (lex->tok_kind == (arg & RULE_ARG_ARG_MASK)) {
    4798:	68bb      	ldr	r3, [r7, #8]
    479a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    479c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    479e:	f3c3 030b 	ubfx	r3, r3, #0, #12
    47a2:	429a      	cmp	r2, r3
    47a4:	d115      	bne.n	47d2 <mp_parse+0x4fa>
                                if (i & 1 & n) {
    47a6:	69ba      	ldr	r2, [r7, #24]
    47a8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    47aa:	4013      	ands	r3, r2
    47ac:	f003 0301 	and.w	r3, r3, #1
    47b0:	2b00      	cmp	r3, #0
    47b2:	d107      	bne.n	47c4 <mp_parse+0x4ec>
                                    push_result_token(&parser, rule_id);
    47b4:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
    47b8:	f107 031c 	add.w	r3, r7, #28
    47bc:	4611      	mov	r1, r2
    47be:	4618      	mov	r0, r3
    47c0:	f7ff fa8e 	bl	3ce0 <push_result_token>
                                mp_lexer_to_next(lex);
    47c4:	68b8      	ldr	r0, [r7, #8]
    47c6:	f7fe fc58 	bl	307a <mp_lexer_to_next>
                                i += 1;
    47ca:	69bb      	ldr	r3, [r7, #24]
    47cc:	3301      	adds	r3, #1
    47ce:	61bb      	str	r3, [r7, #24]
    47d0:	e7d2      	b.n	4778 <mp_parse+0x4a0>
                                i += 1;
    47d2:	69bb      	ldr	r3, [r7, #24]
    47d4:	3301      	adds	r3, #1
    47d6:	61bb      	str	r3, [r7, #24]
                                backtrack = true;
    47d8:	2301      	movs	r3, #1
    47da:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
                                goto list_backtrack;
    47de:	e7a5      	b.n	472c <mp_parse+0x454>
                            assert((arg & RULE_ARG_KIND_MASK) == RULE_ARG_RULE);
    47e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    47e2:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
    47e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
    47ea:	d006      	beq.n	47fa <mp_parse+0x522>
    47ec:	4b5d      	ldr	r3, [pc, #372]	; (4964 <mp_parse+0x68c>)
    47ee:	4a5b      	ldr	r2, [pc, #364]	; (495c <mp_parse+0x684>)
    47f0:	f240 4142 	movw	r1, #1090	; 0x442
    47f4:	485a      	ldr	r0, [pc, #360]	; (4960 <mp_parse+0x688>)
    47f6:	f016 fce1 	bl	1b1bc <__assert_func>
                            push_rule(&parser, rule_src_line, rule_id, i + 1); // save this list-rule
    47fa:	6979      	ldr	r1, [r7, #20]
    47fc:	69bb      	ldr	r3, [r7, #24]
    47fe:	3301      	adds	r3, #1
    4800:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
    4804:	f107 001c 	add.w	r0, r7, #28
    4808:	f7ff f86d 	bl	38e6 <push_rule>
                            push_rule_from_arg(&parser, arg); // push child of list-rule
    480c:	f107 031c 	add.w	r3, r7, #28
    4810:	6c79      	ldr	r1, [r7, #68]	; 0x44
    4812:	4618      	mov	r0, r3
    4814:	f7ff f8a5 	bl	3962 <push_rule_from_arg>
                            goto next_rule;
    4818:	e59e      	b.n	4358 <mp_parse+0x80>
                assert(i >= 1);
    481a:	69bb      	ldr	r3, [r7, #24]
    481c:	2b00      	cmp	r3, #0
    481e:	d106      	bne.n	482e <mp_parse+0x556>
    4820:	4b51      	ldr	r3, [pc, #324]	; (4968 <mp_parse+0x690>)
    4822:	4a4e      	ldr	r2, [pc, #312]	; (495c <mp_parse+0x684>)
    4824:	f240 4149 	movw	r1, #1097	; 0x449
    4828:	484d      	ldr	r0, [pc, #308]	; (4960 <mp_parse+0x688>)
    482a:	f016 fcc7 	bl	1b1bc <__assert_func>
                i -= 1;
    482e:	69bb      	ldr	r3, [r7, #24]
    4830:	3b01      	subs	r3, #1
    4832:	61bb      	str	r3, [r7, #24]
                if ((n & 1) && (rule_arg[1] & RULE_ARG_KIND_MASK) == RULE_ARG_TOK) {
    4834:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    4836:	f003 0301 	and.w	r3, r3, #1
    483a:	2b00      	cmp	r3, #0
    483c:	d00b      	beq.n	4856 <mp_parse+0x57e>
    483e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    4840:	3302      	adds	r3, #2
    4842:	881b      	ldrh	r3, [r3, #0]
    4844:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
    4848:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    484c:	d103      	bne.n	4856 <mp_parse+0x57e>
                    i = (i + 1) / 2;
    484e:	69bb      	ldr	r3, [r7, #24]
    4850:	3301      	adds	r3, #1
    4852:	085b      	lsrs	r3, r3, #1
    4854:	61bb      	str	r3, [r7, #24]
                if (i == 1) {
    4856:	69bb      	ldr	r3, [r7, #24]
    4858:	2b01      	cmp	r3, #1
    485a:	d10c      	bne.n	4876 <mp_parse+0x59e>
                    if (had_trailing_sep) {
    485c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
    4860:	2b00      	cmp	r3, #0
    4862:	d010      	beq.n	4886 <mp_parse+0x5ae>
                        push_result_rule(&parser, rule_src_line, rule_id, i);
    4864:	6979      	ldr	r1, [r7, #20]
    4866:	69bb      	ldr	r3, [r7, #24]
    4868:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
    486c:	f107 001c 	add.w	r0, r7, #28
    4870:	f7ff fcce 	bl	4210 <push_result_rule>
                break;
    4874:	e007      	b.n	4886 <mp_parse+0x5ae>
                    push_result_rule(&parser, rule_src_line, rule_id, i);
    4876:	6979      	ldr	r1, [r7, #20]
    4878:	69bb      	ldr	r3, [r7, #24]
    487a:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
    487e:	f107 001c 	add.w	r0, r7, #28
    4882:	f7ff fcc5 	bl	4210 <push_result_rule>
                break;
    4886:	bf00      	nop
    for (;;) {
    4888:	e566      	b.n	4358 <mp_parse+0x80>
        (void)m_renew_maybe(byte, parser.cur_chunk,
    488a:	6c38      	ldr	r0, [r7, #64]	; 0x40
    488c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    488e:	685b      	ldr	r3, [r3, #4]
    4890:	3308      	adds	r3, #8
    4892:	2200      	movs	r2, #0
    4894:	4619      	mov	r1, r3
    4896:	f7fb fd8c 	bl	3b2 <m_realloc_maybe>
            sizeof(mp_parse_chunk_t) + parser.cur_chunk->alloc,
            sizeof(mp_parse_chunk_t) + parser.cur_chunk->union_.used,
            false);
        parser.cur_chunk->alloc = parser.cur_chunk->union_.used;
    489a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    489c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    489e:	6852      	ldr	r2, [r2, #4]
    48a0:	601a      	str	r2, [r3, #0]
        parser.cur_chunk->union_.next = parser.tree.chunk;
    48a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    48a4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    48a6:	605a      	str	r2, [r3, #4]
        parser.tree.chunk = parser.cur_chunk;
    48a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    48aa:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

    if (
        lex->tok_kind != MP_TOKEN_END // check we are at the end of the token stream
    48ac:	68bb      	ldr	r3, [r7, #8]
    48ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    if (
    48b0:	2b00      	cmp	r3, #0
    48b2:	d108      	bne.n	48c6 <mp_parse+0x5ee>
        || parser.result_stack_top == 0 // check that we got a node (can fail on empty input)
    48b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    48b6:	2b00      	cmp	r3, #0
    48b8:	d129      	bne.n	490e <mp_parse+0x636>
    48ba:	e004      	b.n	48c6 <mp_parse+0x5ee>
                            goto syntax_error;
    48bc:	bf00      	nop
    48be:	e002      	b.n	48c6 <mp_parse+0x5ee>
                                goto syntax_error;
    48c0:	bf00      	nop
    48c2:	e000      	b.n	48c6 <mp_parse+0x5ee>
                                goto syntax_error;
    48c4:	bf00      	nop
        ) {
    syntax_error:;
        mp_obj_t exc;
        if (lex->tok_kind == MP_TOKEN_INDENT) {
    48c6:	68bb      	ldr	r3, [r7, #8]
    48c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    48ca:	2b05      	cmp	r3, #5
    48cc:	d105      	bne.n	48da <mp_parse+0x602>
            exc = mp_obj_new_exception_msg(&mp_type_IndentationError,
    48ce:	4927      	ldr	r1, [pc, #156]	; (496c <mp_parse+0x694>)
    48d0:	4827      	ldr	r0, [pc, #156]	; (4970 <mp_parse+0x698>)
    48d2:	f00a fd8f 	bl	f3f4 <mp_obj_new_exception_msg>
    48d6:	66b8      	str	r0, [r7, #104]	; 0x68
    48d8:	e00e      	b.n	48f8 <mp_parse+0x620>
                "unexpected indent");
        } else if (lex->tok_kind == MP_TOKEN_DEDENT_MISMATCH) {
    48da:	68bb      	ldr	r3, [r7, #8]
    48dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    48de:	2b02      	cmp	r3, #2
    48e0:	d105      	bne.n	48ee <mp_parse+0x616>
            exc = mp_obj_new_exception_msg(&mp_type_IndentationError,
    48e2:	4924      	ldr	r1, [pc, #144]	; (4974 <mp_parse+0x69c>)
    48e4:	4822      	ldr	r0, [pc, #136]	; (4970 <mp_parse+0x698>)
    48e6:	f00a fd85 	bl	f3f4 <mp_obj_new_exception_msg>
    48ea:	66b8      	str	r0, [r7, #104]	; 0x68
    48ec:	e004      	b.n	48f8 <mp_parse+0x620>
                "unindent does not match any outer indentation level");
        } else {
            exc = mp_obj_new_exception_msg(&mp_type_SyntaxError,
    48ee:	4922      	ldr	r1, [pc, #136]	; (4978 <mp_parse+0x6a0>)
    48f0:	4822      	ldr	r0, [pc, #136]	; (497c <mp_parse+0x6a4>)
    48f2:	f00a fd7f 	bl	f3f4 <mp_obj_new_exception_msg>
    48f6:	66b8      	str	r0, [r7, #104]	; 0x68
                "invalid syntax");
        }
        // add traceback to give info about file name and location
        // we don't have a 'block' name, so just pass the NULL qstr to indicate this
        mp_obj_exception_add_traceback(exc, lex->source_name, lex->tok_line, MP_QSTR_NULL);
    48f8:	68bb      	ldr	r3, [r7, #8]
    48fa:	6819      	ldr	r1, [r3, #0]
    48fc:	68bb      	ldr	r3, [r7, #8]
    48fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    4900:	2300      	movs	r3, #0
    4902:	6eb8      	ldr	r0, [r7, #104]	; 0x68
    4904:	f00a fef2 	bl	f6ec <mp_obj_exception_add_traceback>
        nlr_raise(exc);
    4908:	6eb8      	ldr	r0, [r7, #104]	; 0x68
    490a:	f7fb fce9 	bl	2e0 <nlr_jump>
    }

    // get the root parse node that we created
    assert(parser.result_stack_top == 1);
    490e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    4910:	2b01      	cmp	r3, #1
    4912:	d006      	beq.n	4922 <mp_parse+0x64a>
    4914:	4b1a      	ldr	r3, [pc, #104]	; (4980 <mp_parse+0x6a8>)
    4916:	4a11      	ldr	r2, [pc, #68]	; (495c <mp_parse+0x684>)
    4918:	f44f 6191 	mov.w	r1, #1160	; 0x488
    491c:	4810      	ldr	r0, [pc, #64]	; (4960 <mp_parse+0x688>)
    491e:	f016 fc4d 	bl	1b1bc <__assert_func>
    parser.tree.root = parser.result_stack[0];
    4922:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    4924:	681b      	ldr	r3, [r3, #0]
    4926:	63bb      	str	r3, [r7, #56]	; 0x38

    // free the memory that we don't need anymore
    m_del(rule_stack_t, parser.rule_stack, parser.rule_stack_alloc);
    4928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    492a:	4618      	mov	r0, r3
    492c:	f7fb fd54 	bl	3d8 <m_free>
    m_del(mp_parse_node_t, parser.result_stack, parser.result_stack_alloc);
    4930:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    4932:	4618      	mov	r0, r3
    4934:	f7fb fd50 	bl	3d8 <m_free>

    // we also free the lexer on behalf of the caller
    mp_lexer_free(lex);
    4938:	68b8      	ldr	r0, [r7, #8]
    493a:	f7fe feed 	bl	3718 <mp_lexer_free>

    return parser.tree;
    493e:	68fb      	ldr	r3, [r7, #12]
    4940:	461a      	mov	r2, r3
    4942:	f107 0338 	add.w	r3, r7, #56	; 0x38
    4946:	e893 0003 	ldmia.w	r3, {r0, r1}
    494a:	e882 0003 	stmia.w	r2, {r0, r1}
}
    494e:	68f8      	ldr	r0, [r7, #12]
    4950:	3788      	adds	r7, #136	; 0x88
    4952:	46bd      	mov	sp, r7
    4954:	bd80      	pop	{r7, pc}
    4956:	bf00      	nop
    4958:	0001de68 	.word	0x0001de68
    495c:	0001df90 	.word	0x0001df90
    4960:	0001ddd0 	.word	0x0001ddd0
    4964:	0001de9c 	.word	0x0001de9c
    4968:	0001dec8 	.word	0x0001dec8
    496c:	0001ded0 	.word	0x0001ded0
    4970:	000204a8 	.word	0x000204a8
    4974:	0001dee4 	.word	0x0001dee4
    4978:	0001df18 	.word	0x0001df18
    497c:	0002046c 	.word	0x0002046c
    4980:	0001df28 	.word	0x0001df28

00004984 <mp_parse_tree_clear>:

void mp_parse_tree_clear(mp_parse_tree_t *tree) {
    4984:	b580      	push	{r7, lr}
    4986:	b084      	sub	sp, #16
    4988:	af00      	add	r7, sp, #0
    498a:	6078      	str	r0, [r7, #4]
    mp_parse_chunk_t *chunk = tree->chunk;
    498c:	687b      	ldr	r3, [r7, #4]
    498e:	685b      	ldr	r3, [r3, #4]
    4990:	60fb      	str	r3, [r7, #12]
    while (chunk != NULL) {
    4992:	e007      	b.n	49a4 <mp_parse_tree_clear+0x20>
        mp_parse_chunk_t *next = chunk->union_.next;
    4994:	68fb      	ldr	r3, [r7, #12]
    4996:	685b      	ldr	r3, [r3, #4]
    4998:	60bb      	str	r3, [r7, #8]
        m_del(byte, chunk, sizeof(mp_parse_chunk_t) + chunk->alloc);
    499a:	68f8      	ldr	r0, [r7, #12]
    499c:	f7fb fd1c 	bl	3d8 <m_free>
        chunk = next;
    49a0:	68bb      	ldr	r3, [r7, #8]
    49a2:	60fb      	str	r3, [r7, #12]
    while (chunk != NULL) {
    49a4:	68fb      	ldr	r3, [r7, #12]
    49a6:	2b00      	cmp	r3, #0
    49a8:	d1f4      	bne.n	4994 <mp_parse_tree_clear+0x10>
    }
}
    49aa:	bf00      	nop
    49ac:	3710      	adds	r7, #16
    49ae:	46bd      	mov	sp, r7
    49b0:	bd80      	pop	{r7, pc}
    49b2:	bf00      	nop

000049b4 <scope_new>:
    [SCOPE_DICT_COMP] = MP_QSTR__lt_dictcomp_gt_,
    [SCOPE_SET_COMP] = MP_QSTR__lt_setcomp_gt_,
    [SCOPE_GEN_EXPR] = MP_QSTR__lt_genexpr_gt_,
};

scope_t *scope_new(scope_kind_t kind, mp_parse_node_t pn, qstr source_file, mp_uint_t emit_options) {
    49b4:	b580      	push	{r7, lr}
    49b6:	b086      	sub	sp, #24
    49b8:	af00      	add	r7, sp, #0
    49ba:	60f8      	str	r0, [r7, #12]
    49bc:	60b9      	str	r1, [r7, #8]
    49be:	607a      	str	r2, [r7, #4]
    49c0:	603b      	str	r3, [r7, #0]
    scope_t *scope = m_new0(scope_t, 1);
    49c2:	2030      	movs	r0, #48	; 0x30
    49c4:	f7fb fccf 	bl	366 <m_malloc0>
    49c8:	6178      	str	r0, [r7, #20]
    scope->kind = kind;
    49ca:	697b      	ldr	r3, [r7, #20]
    49cc:	68fa      	ldr	r2, [r7, #12]
    49ce:	601a      	str	r2, [r3, #0]
    scope->pn = pn;
    49d0:	697b      	ldr	r3, [r7, #20]
    49d2:	68ba      	ldr	r2, [r7, #8]
    49d4:	60da      	str	r2, [r3, #12]
    scope->source_file = source_file;
    49d6:	687b      	ldr	r3, [r7, #4]
    49d8:	b29a      	uxth	r2, r3
    49da:	697b      	ldr	r3, [r7, #20]
    49dc:	821a      	strh	r2, [r3, #16]
    if (kind == SCOPE_FUNCTION || kind == SCOPE_CLASS) {
    49de:	68fb      	ldr	r3, [r7, #12]
    49e0:	2b07      	cmp	r3, #7
    49e2:	d002      	beq.n	49ea <scope_new+0x36>
    49e4:	68fb      	ldr	r3, [r7, #12]
    49e6:	2b01      	cmp	r3, #1
    49e8:	d114      	bne.n	4a14 <scope_new+0x60>
        assert(MP_PARSE_NODE_IS_STRUCT(pn));
    49ea:	68bb      	ldr	r3, [r7, #8]
    49ec:	2b00      	cmp	r3, #0
    49ee:	d004      	beq.n	49fa <scope_new+0x46>
    49f0:	68bb      	ldr	r3, [r7, #8]
    49f2:	f003 0303 	and.w	r3, r3, #3
    49f6:	2b00      	cmp	r3, #0
    49f8:	d005      	beq.n	4a06 <scope_new+0x52>
    49fa:	4b17      	ldr	r3, [pc, #92]	; (4a58 <scope_new+0xa4>)
    49fc:	4a17      	ldr	r2, [pc, #92]	; (4a5c <scope_new+0xa8>)
    49fe:	2131      	movs	r1, #49	; 0x31
    4a00:	4817      	ldr	r0, [pc, #92]	; (4a60 <scope_new+0xac>)
    4a02:	f016 fbdb 	bl	1b1bc <__assert_func>
        scope->simple_name = MP_PARSE_NODE_LEAF_ARG(((mp_parse_node_struct_t*)pn)->nodes[0]);
    4a06:	68bb      	ldr	r3, [r7, #8]
    4a08:	689b      	ldr	r3, [r3, #8]
    4a0a:	091b      	lsrs	r3, r3, #4
    4a0c:	b29a      	uxth	r2, r3
    4a0e:	697b      	ldr	r3, [r7, #20]
    4a10:	825a      	strh	r2, [r3, #18]
    4a12:	e006      	b.n	4a22 <scope_new+0x6e>
    } else {
        scope->simple_name = scope_simple_name_table[kind];
    4a14:	4a13      	ldr	r2, [pc, #76]	; (4a64 <scope_new+0xb0>)
    4a16:	68fb      	ldr	r3, [r7, #12]
    4a18:	4413      	add	r3, r2
    4a1a:	781b      	ldrb	r3, [r3, #0]
    4a1c:	b29a      	uxth	r2, r3
    4a1e:	697b      	ldr	r3, [r7, #20]
    4a20:	825a      	strh	r2, [r3, #18]
    }
    scope->raw_code = mp_emit_glue_new_raw_code();
    4a22:	f006 fbbf 	bl	b1a4 <mp_emit_glue_new_raw_code>
    4a26:	4602      	mov	r2, r0
    4a28:	697b      	ldr	r3, [r7, #20]
    4a2a:	615a      	str	r2, [r3, #20]
    scope->emit_options = emit_options;
    4a2c:	683b      	ldr	r3, [r7, #0]
    4a2e:	b2da      	uxtb	r2, r3
    4a30:	697b      	ldr	r3, [r7, #20]
    4a32:	765a      	strb	r2, [r3, #25]
    scope->id_info_alloc = MICROPY_ALLOC_SCOPE_ID_INIT;
    4a34:	697b      	ldr	r3, [r7, #20]
    4a36:	2204      	movs	r2, #4
    4a38:	84da      	strh	r2, [r3, #38]	; 0x26
    scope->id_info = m_new(id_info_t, scope->id_info_alloc);
    4a3a:	697b      	ldr	r3, [r7, #20]
    4a3c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
    4a3e:	00db      	lsls	r3, r3, #3
    4a40:	4618      	mov	r0, r3
    4a42:	f7fb fc6b 	bl	31c <m_malloc>
    4a46:	4602      	mov	r2, r0
    4a48:	697b      	ldr	r3, [r7, #20]
    4a4a:	62da      	str	r2, [r3, #44]	; 0x2c

    return scope;
    4a4c:	697b      	ldr	r3, [r7, #20]
}
    4a4e:	4618      	mov	r0, r3
    4a50:	3718      	adds	r7, #24
    4a52:	46bd      	mov	sp, r7
    4a54:	bd80      	pop	{r7, pc}
    4a56:	bf00      	nop
    4a58:	0001dfa4 	.word	0x0001dfa4
    4a5c:	0001e040 	.word	0x0001e040
    4a60:	0001dfc0 	.word	0x0001dfc0
    4a64:	0001df9c 	.word	0x0001df9c

00004a68 <scope_free>:

void scope_free(scope_t *scope) {
    4a68:	b580      	push	{r7, lr}
    4a6a:	b082      	sub	sp, #8
    4a6c:	af00      	add	r7, sp, #0
    4a6e:	6078      	str	r0, [r7, #4]
    m_del(id_info_t, scope->id_info, scope->id_info_alloc);
    4a70:	687b      	ldr	r3, [r7, #4]
    4a72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    4a74:	4618      	mov	r0, r3
    4a76:	f7fb fcaf 	bl	3d8 <m_free>
    m_del(scope_t, scope, 1);
    4a7a:	6878      	ldr	r0, [r7, #4]
    4a7c:	f7fb fcac 	bl	3d8 <m_free>
}
    4a80:	bf00      	nop
    4a82:	3708      	adds	r7, #8
    4a84:	46bd      	mov	sp, r7
    4a86:	bd80      	pop	{r7, pc}

00004a88 <scope_find_or_add_id>:

id_info_t *scope_find_or_add_id(scope_t *scope, qstr qst, bool *added) {
    4a88:	b580      	push	{r7, lr}
    4a8a:	b086      	sub	sp, #24
    4a8c:	af00      	add	r7, sp, #0
    4a8e:	60f8      	str	r0, [r7, #12]
    4a90:	60b9      	str	r1, [r7, #8]
    4a92:	607a      	str	r2, [r7, #4]
    id_info_t *id_info = scope_find(scope, qst);
    4a94:	68b9      	ldr	r1, [r7, #8]
    4a96:	68f8      	ldr	r0, [r7, #12]
    4a98:	f000 f841 	bl	4b1e <scope_find>
    4a9c:	6178      	str	r0, [r7, #20]
    if (id_info != NULL) {
    4a9e:	697b      	ldr	r3, [r7, #20]
    4aa0:	2b00      	cmp	r3, #0
    4aa2:	d004      	beq.n	4aae <scope_find_or_add_id+0x26>
        *added = false;
    4aa4:	687b      	ldr	r3, [r7, #4]
    4aa6:	2200      	movs	r2, #0
    4aa8:	701a      	strb	r2, [r3, #0]
        return id_info;
    4aaa:	697b      	ldr	r3, [r7, #20]
    4aac:	e033      	b.n	4b16 <scope_find_or_add_id+0x8e>
    }

    // make sure we have enough memory
    if (scope->id_info_len >= scope->id_info_alloc) {
    4aae:	68fb      	ldr	r3, [r7, #12]
    4ab0:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
    4ab2:	68fb      	ldr	r3, [r7, #12]
    4ab4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
    4ab6:	429a      	cmp	r2, r3
    4ab8:	d312      	bcc.n	4ae0 <scope_find_or_add_id+0x58>
        scope->id_info = m_renew(id_info_t, scope->id_info, scope->id_info_alloc, scope->id_info_alloc + MICROPY_ALLOC_SCOPE_ID_INC);
    4aba:	68fb      	ldr	r3, [r7, #12]
    4abc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4abe:	68fb      	ldr	r3, [r7, #12]
    4ac0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
    4ac2:	3306      	adds	r3, #6
    4ac4:	00db      	lsls	r3, r3, #3
    4ac6:	4619      	mov	r1, r3
    4ac8:	4610      	mov	r0, r2
    4aca:	f7fb fc59 	bl	380 <m_realloc>
    4ace:	4602      	mov	r2, r0
    4ad0:	68fb      	ldr	r3, [r7, #12]
    4ad2:	62da      	str	r2, [r3, #44]	; 0x2c
        scope->id_info_alloc += MICROPY_ALLOC_SCOPE_ID_INC;
    4ad4:	68fb      	ldr	r3, [r7, #12]
    4ad6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
    4ad8:	3306      	adds	r3, #6
    4ada:	b29a      	uxth	r2, r3
    4adc:	68fb      	ldr	r3, [r7, #12]
    4ade:	84da      	strh	r2, [r3, #38]	; 0x26
    }

    // add new id to end of array of all ids; this seems to match CPython
    // important thing is that function arguments are first, but that is
    // handled by the compiler because it adds arguments before compiling the body
    id_info = &scope->id_info[scope->id_info_len++];
    4ae0:	68fb      	ldr	r3, [r7, #12]
    4ae2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4ae4:	68fb      	ldr	r3, [r7, #12]
    4ae6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    4ae8:	1c59      	adds	r1, r3, #1
    4aea:	b288      	uxth	r0, r1
    4aec:	68f9      	ldr	r1, [r7, #12]
    4aee:	8508      	strh	r0, [r1, #40]	; 0x28
    4af0:	00db      	lsls	r3, r3, #3
    4af2:	4413      	add	r3, r2
    4af4:	617b      	str	r3, [r7, #20]

    id_info->kind = 0;
    4af6:	697b      	ldr	r3, [r7, #20]
    4af8:	2200      	movs	r2, #0
    4afa:	701a      	strb	r2, [r3, #0]
    id_info->flags = 0;
    4afc:	697b      	ldr	r3, [r7, #20]
    4afe:	2200      	movs	r2, #0
    4b00:	705a      	strb	r2, [r3, #1]
    id_info->local_num = 0;
    4b02:	697b      	ldr	r3, [r7, #20]
    4b04:	2200      	movs	r2, #0
    4b06:	805a      	strh	r2, [r3, #2]
    id_info->qst = qst;
    4b08:	697b      	ldr	r3, [r7, #20]
    4b0a:	68ba      	ldr	r2, [r7, #8]
    4b0c:	605a      	str	r2, [r3, #4]
    *added = true;
    4b0e:	687b      	ldr	r3, [r7, #4]
    4b10:	2201      	movs	r2, #1
    4b12:	701a      	strb	r2, [r3, #0]
    return id_info;
    4b14:	697b      	ldr	r3, [r7, #20]
}
    4b16:	4618      	mov	r0, r3
    4b18:	3718      	adds	r7, #24
    4b1a:	46bd      	mov	sp, r7
    4b1c:	bd80      	pop	{r7, pc}

00004b1e <scope_find>:

id_info_t *scope_find(scope_t *scope, qstr qst) {
    4b1e:	b480      	push	{r7}
    4b20:	b085      	sub	sp, #20
    4b22:	af00      	add	r7, sp, #0
    4b24:	6078      	str	r0, [r7, #4]
    4b26:	6039      	str	r1, [r7, #0]
    for (mp_uint_t i = 0; i < scope->id_info_len; i++) {
    4b28:	2300      	movs	r3, #0
    4b2a:	60fb      	str	r3, [r7, #12]
    4b2c:	e011      	b.n	4b52 <scope_find+0x34>
        if (scope->id_info[i].qst == qst) {
    4b2e:	687b      	ldr	r3, [r7, #4]
    4b30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4b32:	68fb      	ldr	r3, [r7, #12]
    4b34:	00db      	lsls	r3, r3, #3
    4b36:	4413      	add	r3, r2
    4b38:	685a      	ldr	r2, [r3, #4]
    4b3a:	683b      	ldr	r3, [r7, #0]
    4b3c:	429a      	cmp	r2, r3
    4b3e:	d105      	bne.n	4b4c <scope_find+0x2e>
            return &scope->id_info[i];
    4b40:	687b      	ldr	r3, [r7, #4]
    4b42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4b44:	68fb      	ldr	r3, [r7, #12]
    4b46:	00db      	lsls	r3, r3, #3
    4b48:	4413      	add	r3, r2
    4b4a:	e009      	b.n	4b60 <scope_find+0x42>
    for (mp_uint_t i = 0; i < scope->id_info_len; i++) {
    4b4c:	68fb      	ldr	r3, [r7, #12]
    4b4e:	3301      	adds	r3, #1
    4b50:	60fb      	str	r3, [r7, #12]
    4b52:	687b      	ldr	r3, [r7, #4]
    4b54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    4b56:	461a      	mov	r2, r3
    4b58:	68fb      	ldr	r3, [r7, #12]
    4b5a:	429a      	cmp	r2, r3
    4b5c:	d8e7      	bhi.n	4b2e <scope_find+0x10>
        }
    }
    return NULL;
    4b5e:	2300      	movs	r3, #0
}
    4b60:	4618      	mov	r0, r3
    4b62:	3714      	adds	r7, #20
    4b64:	46bd      	mov	sp, r7
    4b66:	f85d 7b04 	ldr.w	r7, [sp], #4
    4b6a:	4770      	bx	lr

00004b6c <scope_find_global>:

id_info_t *scope_find_global(scope_t *scope, qstr qst) {
    4b6c:	b580      	push	{r7, lr}
    4b6e:	b082      	sub	sp, #8
    4b70:	af00      	add	r7, sp, #0
    4b72:	6078      	str	r0, [r7, #4]
    4b74:	6039      	str	r1, [r7, #0]
    while (scope->parent != NULL) {
    4b76:	e002      	b.n	4b7e <scope_find_global+0x12>
        scope = scope->parent;
    4b78:	687b      	ldr	r3, [r7, #4]
    4b7a:	685b      	ldr	r3, [r3, #4]
    4b7c:	607b      	str	r3, [r7, #4]
    while (scope->parent != NULL) {
    4b7e:	687b      	ldr	r3, [r7, #4]
    4b80:	685b      	ldr	r3, [r3, #4]
    4b82:	2b00      	cmp	r3, #0
    4b84:	d1f8      	bne.n	4b78 <scope_find_global+0xc>
    }
    return scope_find(scope, qst);
    4b86:	6839      	ldr	r1, [r7, #0]
    4b88:	6878      	ldr	r0, [r7, #4]
    4b8a:	f7ff ffc8 	bl	4b1e <scope_find>
    4b8e:	4603      	mov	r3, r0
}
    4b90:	4618      	mov	r0, r3
    4b92:	3708      	adds	r7, #8
    4b94:	46bd      	mov	sp, r7
    4b96:	bd80      	pop	{r7, pc}

00004b98 <scope_close_over_in_parents>:

STATIC void scope_close_over_in_parents(scope_t *scope, qstr qst) {
    4b98:	b580      	push	{r7, lr}
    4b9a:	b086      	sub	sp, #24
    4b9c:	af00      	add	r7, sp, #0
    4b9e:	6078      	str	r0, [r7, #4]
    4ba0:	6039      	str	r1, [r7, #0]
    assert(scope->parent != NULL); // we should have at least 1 parent
    4ba2:	687b      	ldr	r3, [r7, #4]
    4ba4:	685b      	ldr	r3, [r3, #4]
    4ba6:	2b00      	cmp	r3, #0
    4ba8:	d105      	bne.n	4bb6 <scope_close_over_in_parents+0x1e>
    4baa:	4b1f      	ldr	r3, [pc, #124]	; (4c28 <scope_close_over_in_parents+0x90>)
    4bac:	4a1f      	ldr	r2, [pc, #124]	; (4c2c <scope_close_over_in_parents+0x94>)
    4bae:	216e      	movs	r1, #110	; 0x6e
    4bb0:	481f      	ldr	r0, [pc, #124]	; (4c30 <scope_close_over_in_parents+0x98>)
    4bb2:	f016 fb03 	bl	1b1bc <__assert_func>
    for (scope_t *s = scope->parent;; s = s->parent) {
    4bb6:	687b      	ldr	r3, [r7, #4]
    4bb8:	685b      	ldr	r3, [r3, #4]
    4bba:	617b      	str	r3, [r7, #20]
        assert(s->parent != NULL); // we should not get to the outer scope
    4bbc:	697b      	ldr	r3, [r7, #20]
    4bbe:	685b      	ldr	r3, [r3, #4]
    4bc0:	2b00      	cmp	r3, #0
    4bc2:	d105      	bne.n	4bd0 <scope_close_over_in_parents+0x38>
    4bc4:	4b1b      	ldr	r3, [pc, #108]	; (4c34 <scope_close_over_in_parents+0x9c>)
    4bc6:	4a19      	ldr	r2, [pc, #100]	; (4c2c <scope_close_over_in_parents+0x94>)
    4bc8:	2170      	movs	r1, #112	; 0x70
    4bca:	4819      	ldr	r0, [pc, #100]	; (4c30 <scope_close_over_in_parents+0x98>)
    4bcc:	f016 faf6 	bl	1b1bc <__assert_func>
        bool added;
        id_info_t *id = scope_find_or_add_id(s, qst, &added);
    4bd0:	f107 030f 	add.w	r3, r7, #15
    4bd4:	461a      	mov	r2, r3
    4bd6:	6839      	ldr	r1, [r7, #0]
    4bd8:	6978      	ldr	r0, [r7, #20]
    4bda:	f7ff ff55 	bl	4a88 <scope_find_or_add_id>
    4bde:	6138      	str	r0, [r7, #16]
        if (added) {
    4be0:	7bfb      	ldrb	r3, [r7, #15]
    4be2:	2b00      	cmp	r3, #0
    4be4:	d006      	beq.n	4bf4 <scope_close_over_in_parents+0x5c>
            // variable not previously declared in this scope, so declare it as free and keep searching parents
            id->kind = ID_INFO_KIND_FREE;
    4be6:	693b      	ldr	r3, [r7, #16]
    4be8:	2204      	movs	r2, #4
    4bea:	701a      	strb	r2, [r3, #0]
    for (scope_t *s = scope->parent;; s = s->parent) {
    4bec:	697b      	ldr	r3, [r7, #20]
    4bee:	685b      	ldr	r3, [r3, #4]
    4bf0:	617b      	str	r3, [r7, #20]
    4bf2:	e7e3      	b.n	4bbc <scope_close_over_in_parents+0x24>
        } else {
            // variable is declared in this scope, so finish
            if (id->kind == ID_INFO_KIND_LOCAL) {
    4bf4:	693b      	ldr	r3, [r7, #16]
    4bf6:	781b      	ldrb	r3, [r3, #0]
    4bf8:	2b02      	cmp	r3, #2
    4bfa:	d103      	bne.n	4c04 <scope_close_over_in_parents+0x6c>
                // variable local to this scope, close it over
                id->kind = ID_INFO_KIND_CELL;
    4bfc:	693b      	ldr	r3, [r7, #16]
    4bfe:	2203      	movs	r2, #3
    4c00:	701a      	strb	r2, [r3, #0]
            } else {
                // ID_INFO_KIND_FREE: variable already closed over in a parent scope
                // ID_INFO_KIND_CELL: variable already closed over in this scope
                assert(id->kind == ID_INFO_KIND_FREE || id->kind == ID_INFO_KIND_CELL);
            }
            return;
    4c02:	e00d      	b.n	4c20 <scope_close_over_in_parents+0x88>
                assert(id->kind == ID_INFO_KIND_FREE || id->kind == ID_INFO_KIND_CELL);
    4c04:	693b      	ldr	r3, [r7, #16]
    4c06:	781b      	ldrb	r3, [r3, #0]
    4c08:	2b04      	cmp	r3, #4
    4c0a:	d009      	beq.n	4c20 <scope_close_over_in_parents+0x88>
    4c0c:	693b      	ldr	r3, [r7, #16]
    4c0e:	781b      	ldrb	r3, [r3, #0]
    4c10:	2b03      	cmp	r3, #3
    4c12:	d005      	beq.n	4c20 <scope_close_over_in_parents+0x88>
    4c14:	4b08      	ldr	r3, [pc, #32]	; (4c38 <scope_close_over_in_parents+0xa0>)
    4c16:	4a05      	ldr	r2, [pc, #20]	; (4c2c <scope_close_over_in_parents+0x94>)
    4c18:	217e      	movs	r1, #126	; 0x7e
    4c1a:	4805      	ldr	r0, [pc, #20]	; (4c30 <scope_close_over_in_parents+0x98>)
    4c1c:	f016 face 	bl	1b1bc <__assert_func>
            return;
    4c20:	bf00      	nop
        }
    }
}
    4c22:	3718      	adds	r7, #24
    4c24:	46bd      	mov	sp, r7
    4c26:	bd80      	pop	{r7, pc}
    4c28:	0001dfd4 	.word	0x0001dfd4
    4c2c:	0001e04c 	.word	0x0001e04c
    4c30:	0001dfc0 	.word	0x0001dfc0
    4c34:	0001dfec 	.word	0x0001dfec
    4c38:	0001e000 	.word	0x0001e000

00004c3c <scope_find_local_and_close_over>:

void scope_find_local_and_close_over(scope_t *scope, id_info_t *id, qstr qst) {
    4c3c:	b580      	push	{r7, lr}
    4c3e:	b086      	sub	sp, #24
    4c40:	af00      	add	r7, sp, #0
    4c42:	60f8      	str	r0, [r7, #12]
    4c44:	60b9      	str	r1, [r7, #8]
    4c46:	607a      	str	r2, [r7, #4]
    if (scope->parent != NULL) {
    4c48:	68fb      	ldr	r3, [r7, #12]
    4c4a:	685b      	ldr	r3, [r3, #4]
    4c4c:	2b00      	cmp	r3, #0
    4c4e:	d028      	beq.n	4ca2 <scope_find_local_and_close_over+0x66>
        for (scope_t *s = scope->parent; s->parent != NULL; s = s->parent) {
    4c50:	68fb      	ldr	r3, [r7, #12]
    4c52:	685b      	ldr	r3, [r3, #4]
    4c54:	617b      	str	r3, [r7, #20]
    4c56:	e01e      	b.n	4c96 <scope_find_local_and_close_over+0x5a>
            id_info_t *id2 = scope_find(s, qst);
    4c58:	6879      	ldr	r1, [r7, #4]
    4c5a:	6978      	ldr	r0, [r7, #20]
    4c5c:	f7ff ff5f 	bl	4b1e <scope_find>
    4c60:	6138      	str	r0, [r7, #16]
            if (id2 != NULL) {
    4c62:	693b      	ldr	r3, [r7, #16]
    4c64:	2b00      	cmp	r3, #0
    4c66:	d013      	beq.n	4c90 <scope_find_local_and_close_over+0x54>
                if (id2->kind == ID_INFO_KIND_LOCAL || id2->kind == ID_INFO_KIND_CELL || id2->kind == ID_INFO_KIND_FREE) {
    4c68:	693b      	ldr	r3, [r7, #16]
    4c6a:	781b      	ldrb	r3, [r3, #0]
    4c6c:	2b02      	cmp	r3, #2
    4c6e:	d007      	beq.n	4c80 <scope_find_local_and_close_over+0x44>
    4c70:	693b      	ldr	r3, [r7, #16]
    4c72:	781b      	ldrb	r3, [r3, #0]
    4c74:	2b03      	cmp	r3, #3
    4c76:	d003      	beq.n	4c80 <scope_find_local_and_close_over+0x44>
    4c78:	693b      	ldr	r3, [r7, #16]
    4c7a:	781b      	ldrb	r3, [r3, #0]
    4c7c:	2b04      	cmp	r3, #4
    4c7e:	d10f      	bne.n	4ca0 <scope_find_local_and_close_over+0x64>
                    id->kind = ID_INFO_KIND_FREE;
    4c80:	68bb      	ldr	r3, [r7, #8]
    4c82:	2204      	movs	r2, #4
    4c84:	701a      	strb	r2, [r3, #0]
                    scope_close_over_in_parents(scope, qst);
    4c86:	6879      	ldr	r1, [r7, #4]
    4c88:	68f8      	ldr	r0, [r7, #12]
    4c8a:	f7ff ff85 	bl	4b98 <scope_close_over_in_parents>
                    return;
    4c8e:	e00b      	b.n	4ca8 <scope_find_local_and_close_over+0x6c>
        for (scope_t *s = scope->parent; s->parent != NULL; s = s->parent) {
    4c90:	697b      	ldr	r3, [r7, #20]
    4c92:	685b      	ldr	r3, [r3, #4]
    4c94:	617b      	str	r3, [r7, #20]
    4c96:	697b      	ldr	r3, [r7, #20]
    4c98:	685b      	ldr	r3, [r3, #4]
    4c9a:	2b00      	cmp	r3, #0
    4c9c:	d1dc      	bne.n	4c58 <scope_find_local_and_close_over+0x1c>
    4c9e:	e000      	b.n	4ca2 <scope_find_local_and_close_over+0x66>
                }
                break;
    4ca0:	bf00      	nop
            }
        }
    }
    id->kind = ID_INFO_KIND_GLOBAL_IMPLICIT;
    4ca2:	68bb      	ldr	r3, [r7, #8]
    4ca4:	2200      	movs	r2, #0
    4ca6:	701a      	strb	r2, [r3, #0]
}
    4ca8:	3718      	adds	r7, #24
    4caa:	46bd      	mov	sp, r7
    4cac:	bd80      	pop	{r7, pc}
    4cae:	bf00      	nop

00004cb0 <mp_parse_node_new_small_int>:
static inline mp_parse_node_t mp_parse_node_new_small_int(mp_int_t val) {
    4cb0:	b480      	push	{r7}
    4cb2:	b083      	sub	sp, #12
    4cb4:	af00      	add	r7, sp, #0
    4cb6:	6078      	str	r0, [r7, #4]
    return (mp_parse_node_t)(MP_PARSE_NODE_SMALL_INT | ((mp_uint_t)val << 1));
    4cb8:	687b      	ldr	r3, [r7, #4]
    4cba:	005b      	lsls	r3, r3, #1
    4cbc:	f043 0301 	orr.w	r3, r3, #1
}
    4cc0:	4618      	mov	r0, r3
    4cc2:	370c      	adds	r7, #12
    4cc4:	46bd      	mov	sp, r7
    4cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
    4cca:	4770      	bx	lr

00004ccc <mp_local_free>:

#if !MICROPY_ENABLE_PYSTACK

#define mp_local_alloc(n_bytes) alloca(n_bytes)

static inline void mp_local_free(void *ptr) {
    4ccc:	b480      	push	{r7}
    4cce:	b083      	sub	sp, #12
    4cd0:	af00      	add	r7, sp, #0
    4cd2:	6078      	str	r0, [r7, #4]
    (void)ptr;
}
    4cd4:	bf00      	nop
    4cd6:	370c      	adds	r7, #12
    4cd8:	46bd      	mov	sp, r7
    4cda:	f85d 7b04 	ldr.w	r7, [sp], #4
    4cde:	4770      	bx	lr

00004ce0 <compile_error_set_line>:
    emit_inline_asm_t *emit_inline_asm;                                   // current emitter for inline asm
    const emit_inline_asm_method_table_t *emit_inline_asm_method_table;   // current emit method table for inline asm
    #endif
} compiler_t;

STATIC void compile_error_set_line(compiler_t *comp, mp_parse_node_t pn) {
    4ce0:	b480      	push	{r7}
    4ce2:	b083      	sub	sp, #12
    4ce4:	af00      	add	r7, sp, #0
    4ce6:	6078      	str	r0, [r7, #4]
    4ce8:	6039      	str	r1, [r7, #0]
    // if the line of the error is unknown then try to update it from the pn
    if (comp->compile_error_line == 0 && MP_PARSE_NODE_IS_STRUCT(pn)) {
    4cea:	687b      	ldr	r3, [r7, #4]
    4cec:	68db      	ldr	r3, [r3, #12]
    4cee:	2b00      	cmp	r3, #0
    4cf0:	d10b      	bne.n	4d0a <compile_error_set_line+0x2a>
    4cf2:	683b      	ldr	r3, [r7, #0]
    4cf4:	2b00      	cmp	r3, #0
    4cf6:	d008      	beq.n	4d0a <compile_error_set_line+0x2a>
    4cf8:	683b      	ldr	r3, [r7, #0]
    4cfa:	f003 0303 	and.w	r3, r3, #3
    4cfe:	2b00      	cmp	r3, #0
    4d00:	d103      	bne.n	4d0a <compile_error_set_line+0x2a>
        comp->compile_error_line = ((mp_parse_node_struct_t*)pn)->source_line;
    4d02:	683b      	ldr	r3, [r7, #0]
    4d04:	681a      	ldr	r2, [r3, #0]
    4d06:	687b      	ldr	r3, [r7, #4]
    4d08:	60da      	str	r2, [r3, #12]
    }
}
    4d0a:	bf00      	nop
    4d0c:	370c      	adds	r7, #12
    4d0e:	46bd      	mov	sp, r7
    4d10:	f85d 7b04 	ldr.w	r7, [sp], #4
    4d14:	4770      	bx	lr

00004d16 <compile_syntax_error>:

STATIC void compile_syntax_error(compiler_t *comp, mp_parse_node_t pn, const char *msg) {
    4d16:	b580      	push	{r7, lr}
    4d18:	b084      	sub	sp, #16
    4d1a:	af00      	add	r7, sp, #0
    4d1c:	60f8      	str	r0, [r7, #12]
    4d1e:	60b9      	str	r1, [r7, #8]
    4d20:	607a      	str	r2, [r7, #4]
    // only register the error if there has been no other error
    if (comp->compile_error == MP_OBJ_NULL) {
    4d22:	68fb      	ldr	r3, [r7, #12]
    4d24:	689b      	ldr	r3, [r3, #8]
    4d26:	2b00      	cmp	r3, #0
    4d28:	d10a      	bne.n	4d40 <compile_syntax_error+0x2a>
        comp->compile_error = mp_obj_new_exception_msg(&mp_type_SyntaxError, msg);
    4d2a:	6879      	ldr	r1, [r7, #4]
    4d2c:	4806      	ldr	r0, [pc, #24]	; (4d48 <compile_syntax_error+0x32>)
    4d2e:	f00a fb61 	bl	f3f4 <mp_obj_new_exception_msg>
    4d32:	4602      	mov	r2, r0
    4d34:	68fb      	ldr	r3, [r7, #12]
    4d36:	609a      	str	r2, [r3, #8]
        compile_error_set_line(comp, pn);
    4d38:	68b9      	ldr	r1, [r7, #8]
    4d3a:	68f8      	ldr	r0, [r7, #12]
    4d3c:	f7ff ffd0 	bl	4ce0 <compile_error_set_line>
    }
}
    4d40:	bf00      	nop
    4d42:	3710      	adds	r7, #16
    4d44:	46bd      	mov	sp, r7
    4d46:	bd80      	pop	{r7, pc}
    4d48:	0002046c 	.word	0x0002046c

00004d4c <comp_next_label>:

STATIC void compile_trailer_paren_helper(compiler_t *comp, mp_parse_node_t pn_arglist, bool is_method_call, int n_positional_extra);
STATIC void compile_comprehension(compiler_t *comp, mp_parse_node_struct_t *pns, scope_kind_t kind);
STATIC void compile_node(compiler_t *comp, mp_parse_node_t pn);

STATIC uint comp_next_label(compiler_t *comp) {
    4d4c:	b480      	push	{r7}
    4d4e:	b083      	sub	sp, #12
    4d50:	af00      	add	r7, sp, #0
    4d52:	6078      	str	r0, [r7, #4]
    return comp->next_label++;
    4d54:	687b      	ldr	r3, [r7, #4]
    4d56:	691b      	ldr	r3, [r3, #16]
    4d58:	1c59      	adds	r1, r3, #1
    4d5a:	687a      	ldr	r2, [r7, #4]
    4d5c:	6111      	str	r1, [r2, #16]
}
    4d5e:	4618      	mov	r0, r3
    4d60:	370c      	adds	r7, #12
    4d62:	46bd      	mov	sp, r7
    4d64:	f85d 7b04 	ldr.w	r7, [sp], #4
    4d68:	4770      	bx	lr

00004d6a <compile_increase_except_level>:

STATIC void compile_increase_except_level(compiler_t *comp) {
    4d6a:	b480      	push	{r7}
    4d6c:	b083      	sub	sp, #12
    4d6e:	af00      	add	r7, sp, #0
    4d70:	6078      	str	r0, [r7, #4]
    comp->cur_except_level += 1;
    4d72:	687b      	ldr	r3, [r7, #4]
    4d74:	8b9b      	ldrh	r3, [r3, #28]
    4d76:	3301      	adds	r3, #1
    4d78:	b29a      	uxth	r2, r3
    4d7a:	687b      	ldr	r3, [r7, #4]
    4d7c:	839a      	strh	r2, [r3, #28]
    if (comp->cur_except_level > comp->scope_cur->exc_stack_size) {
    4d7e:	687b      	ldr	r3, [r7, #4]
    4d80:	8b9a      	ldrh	r2, [r3, #28]
    4d82:	687b      	ldr	r3, [r7, #4]
    4d84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    4d86:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
    4d88:	429a      	cmp	r2, r3
    4d8a:	d904      	bls.n	4d96 <compile_increase_except_level+0x2c>
        comp->scope_cur->exc_stack_size = comp->cur_except_level;
    4d8c:	687b      	ldr	r3, [r7, #4]
    4d8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    4d90:	687a      	ldr	r2, [r7, #4]
    4d92:	8b92      	ldrh	r2, [r2, #28]
    4d94:	849a      	strh	r2, [r3, #36]	; 0x24
    }
}
    4d96:	bf00      	nop
    4d98:	370c      	adds	r7, #12
    4d9a:	46bd      	mov	sp, r7
    4d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
    4da0:	4770      	bx	lr

00004da2 <compile_decrease_except_level>:

STATIC void compile_decrease_except_level(compiler_t *comp) {
    4da2:	b580      	push	{r7, lr}
    4da4:	b082      	sub	sp, #8
    4da6:	af00      	add	r7, sp, #0
    4da8:	6078      	str	r0, [r7, #4]
    assert(comp->cur_except_level > 0);
    4daa:	687b      	ldr	r3, [r7, #4]
    4dac:	8b9b      	ldrh	r3, [r3, #28]
    4dae:	2b00      	cmp	r3, #0
    4db0:	d105      	bne.n	4dbe <compile_decrease_except_level+0x1c>
    4db2:	4b08      	ldr	r3, [pc, #32]	; (4dd4 <compile_decrease_except_level+0x32>)
    4db4:	4a08      	ldr	r2, [pc, #32]	; (4dd8 <compile_decrease_except_level+0x36>)
    4db6:	21b5      	movs	r1, #181	; 0xb5
    4db8:	4808      	ldr	r0, [pc, #32]	; (4ddc <compile_decrease_except_level+0x3a>)
    4dba:	f016 f9ff 	bl	1b1bc <__assert_func>
    comp->cur_except_level -= 1;
    4dbe:	687b      	ldr	r3, [r7, #4]
    4dc0:	8b9b      	ldrh	r3, [r3, #28]
    4dc2:	3b01      	subs	r3, #1
    4dc4:	b29a      	uxth	r2, r3
    4dc6:	687b      	ldr	r3, [r7, #4]
    4dc8:	839a      	strh	r2, [r3, #28]
}
    4dca:	bf00      	nop
    4dcc:	3708      	adds	r7, #8
    4dce:	46bd      	mov	sp, r7
    4dd0:	bd80      	pop	{r7, pc}
    4dd2:	bf00      	nop
    4dd4:	0001e068 	.word	0x0001e068
    4dd8:	0001ebfc 	.word	0x0001ebfc
    4ddc:	0001e084 	.word	0x0001e084

00004de0 <scope_new_and_link>:

STATIC scope_t *scope_new_and_link(compiler_t *comp, scope_kind_t kind, mp_parse_node_t pn, uint emit_options) {
    4de0:	b580      	push	{r7, lr}
    4de2:	b086      	sub	sp, #24
    4de4:	af00      	add	r7, sp, #0
    4de6:	60f8      	str	r0, [r7, #12]
    4de8:	60b9      	str	r1, [r7, #8]
    4dea:	607a      	str	r2, [r7, #4]
    4dec:	603b      	str	r3, [r7, #0]
    scope_t *scope = scope_new(kind, pn, comp->source_file, emit_options);
    4dee:	68fb      	ldr	r3, [r7, #12]
    4df0:	681a      	ldr	r2, [r3, #0]
    4df2:	683b      	ldr	r3, [r7, #0]
    4df4:	6879      	ldr	r1, [r7, #4]
    4df6:	68b8      	ldr	r0, [r7, #8]
    4df8:	f7ff fddc 	bl	49b4 <scope_new>
    4dfc:	6138      	str	r0, [r7, #16]
    scope->parent = comp->scope_cur;
    4dfe:	68fb      	ldr	r3, [r7, #12]
    4e00:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    4e02:	693b      	ldr	r3, [r7, #16]
    4e04:	605a      	str	r2, [r3, #4]
    scope->next = NULL;
    4e06:	693b      	ldr	r3, [r7, #16]
    4e08:	2200      	movs	r2, #0
    4e0a:	609a      	str	r2, [r3, #8]
    if (comp->scope_head == NULL) {
    4e0c:	68fb      	ldr	r3, [r7, #12]
    4e0e:	6a1b      	ldr	r3, [r3, #32]
    4e10:	2b00      	cmp	r3, #0
    4e12:	d103      	bne.n	4e1c <scope_new_and_link+0x3c>
        comp->scope_head = scope;
    4e14:	68fb      	ldr	r3, [r7, #12]
    4e16:	693a      	ldr	r2, [r7, #16]
    4e18:	621a      	str	r2, [r3, #32]
    4e1a:	e00d      	b.n	4e38 <scope_new_and_link+0x58>
    } else {
        scope_t *s = comp->scope_head;
    4e1c:	68fb      	ldr	r3, [r7, #12]
    4e1e:	6a1b      	ldr	r3, [r3, #32]
    4e20:	617b      	str	r3, [r7, #20]
        while (s->next != NULL) {
    4e22:	e002      	b.n	4e2a <scope_new_and_link+0x4a>
            s = s->next;
    4e24:	697b      	ldr	r3, [r7, #20]
    4e26:	689b      	ldr	r3, [r3, #8]
    4e28:	617b      	str	r3, [r7, #20]
        while (s->next != NULL) {
    4e2a:	697b      	ldr	r3, [r7, #20]
    4e2c:	689b      	ldr	r3, [r3, #8]
    4e2e:	2b00      	cmp	r3, #0
    4e30:	d1f8      	bne.n	4e24 <scope_new_and_link+0x44>
        }
        s->next = scope;
    4e32:	697b      	ldr	r3, [r7, #20]
    4e34:	693a      	ldr	r2, [r7, #16]
    4e36:	609a      	str	r2, [r3, #8]
    }
    return scope;
    4e38:	693b      	ldr	r3, [r7, #16]
}
    4e3a:	4618      	mov	r0, r3
    4e3c:	3718      	adds	r7, #24
    4e3e:	46bd      	mov	sp, r7
    4e40:	bd80      	pop	{r7, pc}

00004e42 <apply_to_single_or_list>:

typedef void (*apply_list_fun_t)(compiler_t *comp, mp_parse_node_t pn);

STATIC void apply_to_single_or_list(compiler_t *comp, mp_parse_node_t pn, pn_kind_t pn_list_kind, apply_list_fun_t f) {
    4e42:	b580      	push	{r7, lr}
    4e44:	b088      	sub	sp, #32
    4e46:	af00      	add	r7, sp, #0
    4e48:	60f8      	str	r0, [r7, #12]
    4e4a:	60b9      	str	r1, [r7, #8]
    4e4c:	607a      	str	r2, [r7, #4]
    4e4e:	603b      	str	r3, [r7, #0]
    if (MP_PARSE_NODE_IS_STRUCT_KIND(pn, pn_list_kind)) {
    4e50:	68bb      	ldr	r3, [r7, #8]
    4e52:	2b00      	cmp	r3, #0
    4e54:	d024      	beq.n	4ea0 <apply_to_single_or_list+0x5e>
    4e56:	68bb      	ldr	r3, [r7, #8]
    4e58:	f003 0303 	and.w	r3, r3, #3
    4e5c:	2b00      	cmp	r3, #0
    4e5e:	d11f      	bne.n	4ea0 <apply_to_single_or_list+0x5e>
    4e60:	68bb      	ldr	r3, [r7, #8]
    4e62:	685b      	ldr	r3, [r3, #4]
    4e64:	b2da      	uxtb	r2, r3
    4e66:	687b      	ldr	r3, [r7, #4]
    4e68:	429a      	cmp	r2, r3
    4e6a:	d119      	bne.n	4ea0 <apply_to_single_or_list+0x5e>
        mp_parse_node_struct_t *pns = (mp_parse_node_struct_t*)pn;
    4e6c:	68bb      	ldr	r3, [r7, #8]
    4e6e:	61bb      	str	r3, [r7, #24]
        int num_nodes = MP_PARSE_NODE_STRUCT_NUM_NODES(pns);
    4e70:	69bb      	ldr	r3, [r7, #24]
    4e72:	685b      	ldr	r3, [r3, #4]
    4e74:	0a1b      	lsrs	r3, r3, #8
    4e76:	617b      	str	r3, [r7, #20]
        for (int i = 0; i < num_nodes; i++) {
    4e78:	2300      	movs	r3, #0
    4e7a:	61fb      	str	r3, [r7, #28]
    4e7c:	e00b      	b.n	4e96 <apply_to_single_or_list+0x54>
            f(comp, pns->nodes[i]);
    4e7e:	69bb      	ldr	r3, [r7, #24]
    4e80:	69fa      	ldr	r2, [r7, #28]
    4e82:	3202      	adds	r2, #2
    4e84:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    4e88:	683b      	ldr	r3, [r7, #0]
    4e8a:	4611      	mov	r1, r2
    4e8c:	68f8      	ldr	r0, [r7, #12]
    4e8e:	4798      	blx	r3
        for (int i = 0; i < num_nodes; i++) {
    4e90:	69fb      	ldr	r3, [r7, #28]
    4e92:	3301      	adds	r3, #1
    4e94:	61fb      	str	r3, [r7, #28]
    4e96:	69fa      	ldr	r2, [r7, #28]
    4e98:	697b      	ldr	r3, [r7, #20]
    4e9a:	429a      	cmp	r2, r3
    4e9c:	dbef      	blt.n	4e7e <apply_to_single_or_list+0x3c>
    if (MP_PARSE_NODE_IS_STRUCT_KIND(pn, pn_list_kind)) {
    4e9e:	e007      	b.n	4eb0 <apply_to_single_or_list+0x6e>
        }
    } else if (!MP_PARSE_NODE_IS_NULL(pn)) {
    4ea0:	68bb      	ldr	r3, [r7, #8]
    4ea2:	2b00      	cmp	r3, #0
    4ea4:	d004      	beq.n	4eb0 <apply_to_single_or_list+0x6e>
        f(comp, pn);
    4ea6:	683b      	ldr	r3, [r7, #0]
    4ea8:	68b9      	ldr	r1, [r7, #8]
    4eaa:	68f8      	ldr	r0, [r7, #12]
    4eac:	4798      	blx	r3
    }
}
    4eae:	e7ff      	b.n	4eb0 <apply_to_single_or_list+0x6e>
    4eb0:	bf00      	nop
    4eb2:	3720      	adds	r7, #32
    4eb4:	46bd      	mov	sp, r7
    4eb6:	bd80      	pop	{r7, pc}

00004eb8 <compile_generic_all_nodes>:

STATIC void compile_generic_all_nodes(compiler_t *comp, mp_parse_node_struct_t *pns) {
    4eb8:	b580      	push	{r7, lr}
    4eba:	b084      	sub	sp, #16
    4ebc:	af00      	add	r7, sp, #0
    4ebe:	6078      	str	r0, [r7, #4]
    4ec0:	6039      	str	r1, [r7, #0]
    int num_nodes = MP_PARSE_NODE_STRUCT_NUM_NODES(pns);
    4ec2:	683b      	ldr	r3, [r7, #0]
    4ec4:	685b      	ldr	r3, [r3, #4]
    4ec6:	0a1b      	lsrs	r3, r3, #8
    4ec8:	60bb      	str	r3, [r7, #8]
    for (int i = 0; i < num_nodes; i++) {
    4eca:	2300      	movs	r3, #0
    4ecc:	60fb      	str	r3, [r7, #12]
    4ece:	e019      	b.n	4f04 <compile_generic_all_nodes+0x4c>
        compile_node(comp, pns->nodes[i]);
    4ed0:	683b      	ldr	r3, [r7, #0]
    4ed2:	68fa      	ldr	r2, [r7, #12]
    4ed4:	3202      	adds	r2, #2
    4ed6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    4eda:	4619      	mov	r1, r3
    4edc:	6878      	ldr	r0, [r7, #4]
    4ede:	f003 fd88 	bl	89f2 <compile_node>
        if (comp->compile_error != MP_OBJ_NULL) {
    4ee2:	687b      	ldr	r3, [r7, #4]
    4ee4:	689b      	ldr	r3, [r3, #8]
    4ee6:	2b00      	cmp	r3, #0
    4ee8:	d009      	beq.n	4efe <compile_generic_all_nodes+0x46>
            // add line info for the error in case it didn't have a line number
            compile_error_set_line(comp, pns->nodes[i]);
    4eea:	683b      	ldr	r3, [r7, #0]
    4eec:	68fa      	ldr	r2, [r7, #12]
    4eee:	3202      	adds	r2, #2
    4ef0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    4ef4:	4619      	mov	r1, r3
    4ef6:	6878      	ldr	r0, [r7, #4]
    4ef8:	f7ff fef2 	bl	4ce0 <compile_error_set_line>
            return;
    4efc:	e006      	b.n	4f0c <compile_generic_all_nodes+0x54>
    for (int i = 0; i < num_nodes; i++) {
    4efe:	68fb      	ldr	r3, [r7, #12]
    4f00:	3301      	adds	r3, #1
    4f02:	60fb      	str	r3, [r7, #12]
    4f04:	68fa      	ldr	r2, [r7, #12]
    4f06:	68bb      	ldr	r3, [r7, #8]
    4f08:	429a      	cmp	r2, r3
    4f0a:	dbe1      	blt.n	4ed0 <compile_generic_all_nodes+0x18>
        }
    }
}
    4f0c:	3710      	adds	r7, #16
    4f0e:	46bd      	mov	sp, r7
    4f10:	bd80      	pop	{r7, pc}

00004f12 <compile_load_id>:

STATIC void compile_load_id(compiler_t *comp, qstr qst) {
    4f12:	b580      	push	{r7, lr}
    4f14:	b082      	sub	sp, #8
    4f16:	af00      	add	r7, sp, #0
    4f18:	6078      	str	r0, [r7, #4]
    4f1a:	6039      	str	r1, [r7, #0]
    if (comp->pass == MP_PASS_SCOPE) {
    4f1c:	687b      	ldr	r3, [r7, #4]
    4f1e:	795b      	ldrb	r3, [r3, #5]
    4f20:	2b01      	cmp	r3, #1
    4f22:	d106      	bne.n	4f32 <compile_load_id+0x20>
        mp_emit_common_get_id_for_load(comp->scope_cur, qst);
    4f24:	687b      	ldr	r3, [r7, #4]
    4f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    4f28:	6839      	ldr	r1, [r7, #0]
    4f2a:	4618      	mov	r0, r3
    4f2c:	f004 fc64 	bl	97f8 <mp_emit_common_get_id_for_load>
        mp_emit_common_id_op(comp->emit, &comp->emit_method_table->load_id, comp->scope_cur, qst);
        #else
        mp_emit_common_id_op(comp->emit, &mp_emit_bc_method_table_load_id_ops, comp->scope_cur, qst);
        #endif
    }
}
    4f30:	e007      	b.n	4f42 <compile_load_id+0x30>
        mp_emit_common_id_op(comp->emit, &mp_emit_bc_method_table_load_id_ops, comp->scope_cur, qst);
    4f32:	687b      	ldr	r3, [r7, #4]
    4f34:	6a98      	ldr	r0, [r3, #40]	; 0x28
    4f36:	687b      	ldr	r3, [r7, #4]
    4f38:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    4f3a:	683b      	ldr	r3, [r7, #0]
    4f3c:	4903      	ldr	r1, [pc, #12]	; (4f4c <compile_load_id+0x3a>)
    4f3e:	f004 fc9f 	bl	9880 <mp_emit_common_id_op>
}
    4f42:	bf00      	nop
    4f44:	3708      	adds	r7, #8
    4f46:	46bd      	mov	sp, r7
    4f48:	bd80      	pop	{r7, pc}
    4f4a:	bf00      	nop
    4f4c:	0001f124 	.word	0x0001f124

00004f50 <compile_store_id>:

STATIC void compile_store_id(compiler_t *comp, qstr qst) {
    4f50:	b580      	push	{r7, lr}
    4f52:	b082      	sub	sp, #8
    4f54:	af00      	add	r7, sp, #0
    4f56:	6078      	str	r0, [r7, #4]
    4f58:	6039      	str	r1, [r7, #0]
    if (comp->pass == MP_PASS_SCOPE) {
    4f5a:	687b      	ldr	r3, [r7, #4]
    4f5c:	795b      	ldrb	r3, [r3, #5]
    4f5e:	2b01      	cmp	r3, #1
    4f60:	d106      	bne.n	4f70 <compile_store_id+0x20>
        mp_emit_common_get_id_for_modification(comp->scope_cur, qst);
    4f62:	687b      	ldr	r3, [r7, #4]
    4f64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    4f66:	6839      	ldr	r1, [r7, #0]
    4f68:	4618      	mov	r0, r3
    4f6a:	f004 fc5e 	bl	982a <mp_emit_common_get_id_for_modification>
        mp_emit_common_id_op(comp->emit, &comp->emit_method_table->store_id, comp->scope_cur, qst);
        #else
        mp_emit_common_id_op(comp->emit, &mp_emit_bc_method_table_store_id_ops, comp->scope_cur, qst);
        #endif
    }
}
    4f6e:	e007      	b.n	4f80 <compile_store_id+0x30>
        mp_emit_common_id_op(comp->emit, &mp_emit_bc_method_table_store_id_ops, comp->scope_cur, qst);
    4f70:	687b      	ldr	r3, [r7, #4]
    4f72:	6a98      	ldr	r0, [r3, #40]	; 0x28
    4f74:	687b      	ldr	r3, [r7, #4]
    4f76:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    4f78:	683b      	ldr	r3, [r7, #0]
    4f7a:	4903      	ldr	r1, [pc, #12]	; (4f88 <compile_store_id+0x38>)
    4f7c:	f004 fc80 	bl	9880 <mp_emit_common_id_op>
}
    4f80:	bf00      	nop
    4f82:	3708      	adds	r7, #8
    4f84:	46bd      	mov	sp, r7
    4f86:	bd80      	pop	{r7, pc}
    4f88:	0001f12c 	.word	0x0001f12c

00004f8c <compile_delete_id>:

STATIC void compile_delete_id(compiler_t *comp, qstr qst) {
    4f8c:	b580      	push	{r7, lr}
    4f8e:	b082      	sub	sp, #8
    4f90:	af00      	add	r7, sp, #0
    4f92:	6078      	str	r0, [r7, #4]
    4f94:	6039      	str	r1, [r7, #0]
    if (comp->pass == MP_PASS_SCOPE) {
    4f96:	687b      	ldr	r3, [r7, #4]
    4f98:	795b      	ldrb	r3, [r3, #5]
    4f9a:	2b01      	cmp	r3, #1
    4f9c:	d106      	bne.n	4fac <compile_delete_id+0x20>
        mp_emit_common_get_id_for_modification(comp->scope_cur, qst);
    4f9e:	687b      	ldr	r3, [r7, #4]
    4fa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    4fa2:	6839      	ldr	r1, [r7, #0]
    4fa4:	4618      	mov	r0, r3
    4fa6:	f004 fc40 	bl	982a <mp_emit_common_get_id_for_modification>
        mp_emit_common_id_op(comp->emit, &comp->emit_method_table->delete_id, comp->scope_cur, qst);
        #else
        mp_emit_common_id_op(comp->emit, &mp_emit_bc_method_table_delete_id_ops, comp->scope_cur, qst);
        #endif
    }
}
    4faa:	e007      	b.n	4fbc <compile_delete_id+0x30>
        mp_emit_common_id_op(comp->emit, &mp_emit_bc_method_table_delete_id_ops, comp->scope_cur, qst);
    4fac:	687b      	ldr	r3, [r7, #4]
    4fae:	6a98      	ldr	r0, [r3, #40]	; 0x28
    4fb0:	687b      	ldr	r3, [r7, #4]
    4fb2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    4fb4:	683b      	ldr	r3, [r7, #0]
    4fb6:	4903      	ldr	r1, [pc, #12]	; (4fc4 <compile_delete_id+0x38>)
    4fb8:	f004 fc62 	bl	9880 <mp_emit_common_id_op>
}
    4fbc:	bf00      	nop
    4fbe:	3708      	adds	r7, #8
    4fc0:	46bd      	mov	sp, r7
    4fc2:	bd80      	pop	{r7, pc}
    4fc4:	0001f134 	.word	0x0001f134

00004fc8 <c_tuple>:

STATIC void c_tuple(compiler_t *comp, mp_parse_node_t pn, mp_parse_node_struct_t *pns_list) {
    4fc8:	b580      	push	{r7, lr}
    4fca:	b088      	sub	sp, #32
    4fcc:	af00      	add	r7, sp, #0
    4fce:	60f8      	str	r0, [r7, #12]
    4fd0:	60b9      	str	r1, [r7, #8]
    4fd2:	607a      	str	r2, [r7, #4]
    int total = 0;
    4fd4:	2300      	movs	r3, #0
    4fd6:	61fb      	str	r3, [r7, #28]
    if (!MP_PARSE_NODE_IS_NULL(pn)) {
    4fd8:	68bb      	ldr	r3, [r7, #8]
    4fda:	2b00      	cmp	r3, #0
    4fdc:	d006      	beq.n	4fec <c_tuple+0x24>
        compile_node(comp, pn);
    4fde:	68b9      	ldr	r1, [r7, #8]
    4fe0:	68f8      	ldr	r0, [r7, #12]
    4fe2:	f003 fd06 	bl	89f2 <compile_node>
        total += 1;
    4fe6:	69fb      	ldr	r3, [r7, #28]
    4fe8:	3301      	adds	r3, #1
    4fea:	61fb      	str	r3, [r7, #28]
    }
    if (pns_list != NULL) {
    4fec:	687b      	ldr	r3, [r7, #4]
    4fee:	2b00      	cmp	r3, #0
    4ff0:	d01a      	beq.n	5028 <c_tuple+0x60>
        int n = MP_PARSE_NODE_STRUCT_NUM_NODES(pns_list);
    4ff2:	687b      	ldr	r3, [r7, #4]
    4ff4:	685b      	ldr	r3, [r3, #4]
    4ff6:	0a1b      	lsrs	r3, r3, #8
    4ff8:	617b      	str	r3, [r7, #20]
        for (int i = 0; i < n; i++) {
    4ffa:	2300      	movs	r3, #0
    4ffc:	61bb      	str	r3, [r7, #24]
    4ffe:	e00b      	b.n	5018 <c_tuple+0x50>
            compile_node(comp, pns_list->nodes[i]);
    5000:	687b      	ldr	r3, [r7, #4]
    5002:	69ba      	ldr	r2, [r7, #24]
    5004:	3202      	adds	r2, #2
    5006:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    500a:	4619      	mov	r1, r3
    500c:	68f8      	ldr	r0, [r7, #12]
    500e:	f003 fcf0 	bl	89f2 <compile_node>
        for (int i = 0; i < n; i++) {
    5012:	69bb      	ldr	r3, [r7, #24]
    5014:	3301      	adds	r3, #1
    5016:	61bb      	str	r3, [r7, #24]
    5018:	69ba      	ldr	r2, [r7, #24]
    501a:	697b      	ldr	r3, [r7, #20]
    501c:	429a      	cmp	r2, r3
    501e:	dbef      	blt.n	5000 <c_tuple+0x38>
        }
        total += n;
    5020:	69fa      	ldr	r2, [r7, #28]
    5022:	697b      	ldr	r3, [r7, #20]
    5024:	4413      	add	r3, r2
    5026:	61fb      	str	r3, [r7, #28]
    }
    EMIT_ARG(build, total, MP_EMIT_BUILD_TUPLE);
    5028:	68fb      	ldr	r3, [r7, #12]
    502a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    502c:	69f9      	ldr	r1, [r7, #28]
    502e:	2200      	movs	r2, #0
    5030:	4618      	mov	r0, r3
    5032:	f005 fd30 	bl	aa96 <mp_emit_bc_build>
}
    5036:	bf00      	nop
    5038:	3720      	adds	r7, #32
    503a:	46bd      	mov	sp, r7
    503c:	bd80      	pop	{r7, pc}

0000503e <compile_generic_tuple>:

STATIC void compile_generic_tuple(compiler_t *comp, mp_parse_node_struct_t *pns) {
    503e:	b580      	push	{r7, lr}
    5040:	b082      	sub	sp, #8
    5042:	af00      	add	r7, sp, #0
    5044:	6078      	str	r0, [r7, #4]
    5046:	6039      	str	r1, [r7, #0]
    // a simple tuple expression
    c_tuple(comp, MP_PARSE_NODE_NULL, pns);
    5048:	683a      	ldr	r2, [r7, #0]
    504a:	2100      	movs	r1, #0
    504c:	6878      	ldr	r0, [r7, #4]
    504e:	f7ff ffbb 	bl	4fc8 <c_tuple>
}
    5052:	bf00      	nop
    5054:	3708      	adds	r7, #8
    5056:	46bd      	mov	sp, r7
    5058:	bd80      	pop	{r7, pc}

0000505a <c_if_cond>:

STATIC void c_if_cond(compiler_t *comp, mp_parse_node_t pn, bool jump_if, int label) {
    505a:	b580      	push	{r7, lr}
    505c:	b08a      	sub	sp, #40	; 0x28
    505e:	af00      	add	r7, sp, #0
    5060:	60f8      	str	r0, [r7, #12]
    5062:	60b9      	str	r1, [r7, #8]
    5064:	603b      	str	r3, [r7, #0]
    5066:	4613      	mov	r3, r2
    5068:	71fb      	strb	r3, [r7, #7]
    if (mp_parse_node_is_const_false(pn)) {
    506a:	68b8      	ldr	r0, [r7, #8]
    506c:	f7fe fcd7 	bl	3a1e <mp_parse_node_is_const_false>
    5070:	4603      	mov	r3, r0
    5072:	2b00      	cmp	r3, #0
    5074:	d00e      	beq.n	5094 <c_if_cond+0x3a>
        if (jump_if == false) {
    5076:	79fb      	ldrb	r3, [r7, #7]
    5078:	f083 0301 	eor.w	r3, r3, #1
    507c:	b2db      	uxtb	r3, r3
    507e:	2b00      	cmp	r3, #0
    5080:	f000 80eb 	beq.w	525a <c_if_cond+0x200>
            EMIT_ARG(jump, label);
    5084:	68fb      	ldr	r3, [r7, #12]
    5086:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5088:	683a      	ldr	r2, [r7, #0]
    508a:	4611      	mov	r1, r2
    508c:	4618      	mov	r0, r3
    508e:	f005 fb77 	bl	a780 <mp_emit_bc_jump>
        }
        return;
    5092:	e0e2      	b.n	525a <c_if_cond+0x200>
    } else if (mp_parse_node_is_const_true(pn)) {
    5094:	68b8      	ldr	r0, [r7, #8]
    5096:	f7fe fcde 	bl	3a56 <mp_parse_node_is_const_true>
    509a:	4603      	mov	r3, r0
    509c:	2b00      	cmp	r3, #0
    509e:	d00b      	beq.n	50b8 <c_if_cond+0x5e>
        if (jump_if == true) {
    50a0:	79fb      	ldrb	r3, [r7, #7]
    50a2:	2b00      	cmp	r3, #0
    50a4:	f000 80db 	beq.w	525e <c_if_cond+0x204>
            EMIT_ARG(jump, label);
    50a8:	68fb      	ldr	r3, [r7, #12]
    50aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    50ac:	683a      	ldr	r2, [r7, #0]
    50ae:	4611      	mov	r1, r2
    50b0:	4618      	mov	r0, r3
    50b2:	f005 fb65 	bl	a780 <mp_emit_bc_jump>
        }
        return;
    50b6:	e0d2      	b.n	525e <c_if_cond+0x204>
    } else if (MP_PARSE_NODE_IS_STRUCT(pn)) {
    50b8:	68bb      	ldr	r3, [r7, #8]
    50ba:	2b00      	cmp	r3, #0
    50bc:	f000 80c1 	beq.w	5242 <c_if_cond+0x1e8>
    50c0:	68bb      	ldr	r3, [r7, #8]
    50c2:	f003 0303 	and.w	r3, r3, #3
    50c6:	2b00      	cmp	r3, #0
    50c8:	f040 80bb 	bne.w	5242 <c_if_cond+0x1e8>
        mp_parse_node_struct_t *pns = (mp_parse_node_struct_t*)pn;
    50cc:	68bb      	ldr	r3, [r7, #8]
    50ce:	61fb      	str	r3, [r7, #28]
        int n = MP_PARSE_NODE_STRUCT_NUM_NODES(pns);
    50d0:	69fb      	ldr	r3, [r7, #28]
    50d2:	685b      	ldr	r3, [r3, #4]
    50d4:	0a1b      	lsrs	r3, r3, #8
    50d6:	61bb      	str	r3, [r7, #24]
        if (MP_PARSE_NODE_STRUCT_KIND(pns) == PN_or_test) {
    50d8:	69fb      	ldr	r3, [r7, #28]
    50da:	685b      	ldr	r3, [r3, #4]
    50dc:	b2db      	uxtb	r3, r3
    50de:	2b1c      	cmp	r3, #28
    50e0:	d152      	bne.n	5188 <c_if_cond+0x12e>
            if (jump_if == false) {
    50e2:	79fb      	ldrb	r3, [r7, #7]
    50e4:	f083 0301 	eor.w	r3, r3, #1
    50e8:	b2db      	uxtb	r3, r3
    50ea:	2b00      	cmp	r3, #0
    50ec:	d037      	beq.n	515e <c_if_cond+0x104>
    50ee:	e000      	b.n	50f2 <c_if_cond+0x98>
            return;
        } else if (MP_PARSE_NODE_STRUCT_KIND(pns) == PN_and_test) {
            if (jump_if == false) {
                goto and_or_logic2;
            } else {
                goto and_or_logic1;
    50f0:	bf00      	nop
                uint label2 = comp_next_label(comp);
    50f2:	68f8      	ldr	r0, [r7, #12]
    50f4:	f7ff fe2a 	bl	4d4c <comp_next_label>
    50f8:	6178      	str	r0, [r7, #20]
                for (int i = 0; i < n - 1; i++) {
    50fa:	2300      	movs	r3, #0
    50fc:	627b      	str	r3, [r7, #36]	; 0x24
    50fe:	e017      	b.n	5130 <c_if_cond+0xd6>
                    c_if_cond(comp, pns->nodes[i], !jump_if, label2);
    5100:	69fb      	ldr	r3, [r7, #28]
    5102:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    5104:	3202      	adds	r2, #2
    5106:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    510a:	79fb      	ldrb	r3, [r7, #7]
    510c:	2b00      	cmp	r3, #0
    510e:	bf14      	ite	ne
    5110:	2301      	movne	r3, #1
    5112:	2300      	moveq	r3, #0
    5114:	b2db      	uxtb	r3, r3
    5116:	f083 0301 	eor.w	r3, r3, #1
    511a:	b2db      	uxtb	r3, r3
    511c:	f003 0301 	and.w	r3, r3, #1
    5120:	b2da      	uxtb	r2, r3
    5122:	697b      	ldr	r3, [r7, #20]
    5124:	68f8      	ldr	r0, [r7, #12]
    5126:	f7ff ff98 	bl	505a <c_if_cond>
                for (int i = 0; i < n - 1; i++) {
    512a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    512c:	3301      	adds	r3, #1
    512e:	627b      	str	r3, [r7, #36]	; 0x24
    5130:	69bb      	ldr	r3, [r7, #24]
    5132:	1e5a      	subs	r2, r3, #1
    5134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5136:	429a      	cmp	r2, r3
    5138:	dce2      	bgt.n	5100 <c_if_cond+0xa6>
                c_if_cond(comp, pns->nodes[n - 1], jump_if, label);
    513a:	69bb      	ldr	r3, [r7, #24]
    513c:	1e5a      	subs	r2, r3, #1
    513e:	69fb      	ldr	r3, [r7, #28]
    5140:	3202      	adds	r2, #2
    5142:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    5146:	79fa      	ldrb	r2, [r7, #7]
    5148:	683b      	ldr	r3, [r7, #0]
    514a:	68f8      	ldr	r0, [r7, #12]
    514c:	f7ff ff85 	bl	505a <c_if_cond>
                EMIT_ARG(label_assign, label2);
    5150:	68fb      	ldr	r3, [r7, #12]
    5152:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5154:	6979      	ldr	r1, [r7, #20]
    5156:	4618      	mov	r0, r3
    5158:	f005 f888 	bl	a26c <mp_emit_bc_label_assign>
            return;
    515c:	e082      	b.n	5264 <c_if_cond+0x20a>
                for (int i = 0; i < n; i++) {
    515e:	2300      	movs	r3, #0
    5160:	623b      	str	r3, [r7, #32]
    5162:	e00c      	b.n	517e <c_if_cond+0x124>
                    c_if_cond(comp, pns->nodes[i], jump_if, label);
    5164:	69fb      	ldr	r3, [r7, #28]
    5166:	6a3a      	ldr	r2, [r7, #32]
    5168:	3202      	adds	r2, #2
    516a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    516e:	79fa      	ldrb	r2, [r7, #7]
    5170:	683b      	ldr	r3, [r7, #0]
    5172:	68f8      	ldr	r0, [r7, #12]
    5174:	f7ff ff71 	bl	505a <c_if_cond>
                for (int i = 0; i < n; i++) {
    5178:	6a3b      	ldr	r3, [r7, #32]
    517a:	3301      	adds	r3, #1
    517c:	623b      	str	r3, [r7, #32]
    517e:	6a3a      	ldr	r2, [r7, #32]
    5180:	69bb      	ldr	r3, [r7, #24]
    5182:	429a      	cmp	r2, r3
    5184:	dbee      	blt.n	5164 <c_if_cond+0x10a>
            return;
    5186:	e06d      	b.n	5264 <c_if_cond+0x20a>
        } else if (MP_PARSE_NODE_STRUCT_KIND(pns) == PN_and_test) {
    5188:	69fb      	ldr	r3, [r7, #28]
    518a:	685b      	ldr	r3, [r3, #4]
    518c:	b2db      	uxtb	r3, r3
    518e:	2b1d      	cmp	r3, #29
    5190:	d106      	bne.n	51a0 <c_if_cond+0x146>
            if (jump_if == false) {
    5192:	79fb      	ldrb	r3, [r7, #7]
    5194:	f083 0301 	eor.w	r3, r3, #1
    5198:	b2db      	uxtb	r3, r3
    519a:	2b00      	cmp	r3, #0
    519c:	d0a8      	beq.n	50f0 <c_if_cond+0x96>
                goto and_or_logic2;
    519e:	e7de      	b.n	515e <c_if_cond+0x104>
            }
        } else if (MP_PARSE_NODE_STRUCT_KIND(pns) == PN_not_test_2) {
    51a0:	69fb      	ldr	r3, [r7, #28]
    51a2:	685b      	ldr	r3, [r3, #4]
    51a4:	b2db      	uxtb	r3, r3
    51a6:	2b1e      	cmp	r3, #30
    51a8:	d112      	bne.n	51d0 <c_if_cond+0x176>
            c_if_cond(comp, pns->nodes[0], !jump_if, label);
    51aa:	69fb      	ldr	r3, [r7, #28]
    51ac:	6899      	ldr	r1, [r3, #8]
    51ae:	79fb      	ldrb	r3, [r7, #7]
    51b0:	2b00      	cmp	r3, #0
    51b2:	bf14      	ite	ne
    51b4:	2301      	movne	r3, #1
    51b6:	2300      	moveq	r3, #0
    51b8:	b2db      	uxtb	r3, r3
    51ba:	f083 0301 	eor.w	r3, r3, #1
    51be:	b2db      	uxtb	r3, r3
    51c0:	f003 0301 	and.w	r3, r3, #1
    51c4:	b2da      	uxtb	r2, r3
    51c6:	683b      	ldr	r3, [r7, #0]
    51c8:	68f8      	ldr	r0, [r7, #12]
    51ca:	f7ff ff46 	bl	505a <c_if_cond>
            return;
    51ce:	e049      	b.n	5264 <c_if_cond+0x20a>
        } else if (MP_PARSE_NODE_STRUCT_KIND(pns) == PN_atom_paren) {
    51d0:	69fb      	ldr	r3, [r7, #28]
    51d2:	685b      	ldr	r3, [r3, #4]
    51d4:	b2db      	uxtb	r3, r3
    51d6:	2b2a      	cmp	r3, #42	; 0x2a
    51d8:	d133      	bne.n	5242 <c_if_cond+0x1e8>
            // cond is something in parenthesis
            if (MP_PARSE_NODE_IS_NULL(pns->nodes[0])) {
    51da:	69fb      	ldr	r3, [r7, #28]
    51dc:	689b      	ldr	r3, [r3, #8]
    51de:	2b00      	cmp	r3, #0
    51e0:	d10d      	bne.n	51fe <c_if_cond+0x1a4>
                // empty tuple, acts as false for the condition
                if (jump_if == false) {
    51e2:	79fb      	ldrb	r3, [r7, #7]
    51e4:	f083 0301 	eor.w	r3, r3, #1
    51e8:	b2db      	uxtb	r3, r3
    51ea:	2b00      	cmp	r3, #0
    51ec:	d039      	beq.n	5262 <c_if_cond+0x208>
                    EMIT_ARG(jump, label);
    51ee:	68fb      	ldr	r3, [r7, #12]
    51f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    51f2:	683a      	ldr	r2, [r7, #0]
    51f4:	4611      	mov	r1, r2
    51f6:	4618      	mov	r0, r3
    51f8:	f005 fac2 	bl	a780 <mp_emit_bc_jump>
                // non-empty tuple, acts as true for the condition
                if (jump_if == true) {
                    EMIT_ARG(jump, label);
                }
            }
            return;
    51fc:	e031      	b.n	5262 <c_if_cond+0x208>
                assert(MP_PARSE_NODE_IS_STRUCT_KIND(pns->nodes[0], PN_testlist_comp));
    51fe:	69fb      	ldr	r3, [r7, #28]
    5200:	689b      	ldr	r3, [r3, #8]
    5202:	2b00      	cmp	r3, #0
    5204:	d00b      	beq.n	521e <c_if_cond+0x1c4>
    5206:	69fb      	ldr	r3, [r7, #28]
    5208:	689b      	ldr	r3, [r3, #8]
    520a:	f003 0303 	and.w	r3, r3, #3
    520e:	2b00      	cmp	r3, #0
    5210:	d105      	bne.n	521e <c_if_cond+0x1c4>
    5212:	69fb      	ldr	r3, [r7, #28]
    5214:	689b      	ldr	r3, [r3, #8]
    5216:	685b      	ldr	r3, [r3, #4]
    5218:	b2db      	uxtb	r3, r3
    521a:	2b8a      	cmp	r3, #138	; 0x8a
    521c:	d006      	beq.n	522c <c_if_cond+0x1d2>
    521e:	4b13      	ldr	r3, [pc, #76]	; (526c <c_if_cond+0x212>)
    5220:	4a13      	ldr	r2, [pc, #76]	; (5270 <c_if_cond+0x216>)
    5222:	f240 114b 	movw	r1, #331	; 0x14b
    5226:	4813      	ldr	r0, [pc, #76]	; (5274 <c_if_cond+0x21a>)
    5228:	f015 ffc8 	bl	1b1bc <__assert_func>
                if (jump_if == true) {
    522c:	79fb      	ldrb	r3, [r7, #7]
    522e:	2b00      	cmp	r3, #0
    5230:	d017      	beq.n	5262 <c_if_cond+0x208>
                    EMIT_ARG(jump, label);
    5232:	68fb      	ldr	r3, [r7, #12]
    5234:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5236:	683a      	ldr	r2, [r7, #0]
    5238:	4611      	mov	r1, r2
    523a:	4618      	mov	r0, r3
    523c:	f005 faa0 	bl	a780 <mp_emit_bc_jump>
            return;
    5240:	e00f      	b.n	5262 <c_if_cond+0x208>
        }
    }

    // nothing special, fall back to default compiling for node and jump
    compile_node(comp, pn);
    5242:	68b9      	ldr	r1, [r7, #8]
    5244:	68f8      	ldr	r0, [r7, #12]
    5246:	f003 fbd4 	bl	89f2 <compile_node>
    EMIT_ARG(pop_jump_if, jump_if, label);
    524a:	68fb      	ldr	r3, [r7, #12]
    524c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    524e:	683a      	ldr	r2, [r7, #0]
    5250:	79f9      	ldrb	r1, [r7, #7]
    5252:	4618      	mov	r0, r3
    5254:	f005 faa6 	bl	a7a4 <mp_emit_bc_pop_jump_if>
    5258:	e004      	b.n	5264 <c_if_cond+0x20a>
        return;
    525a:	bf00      	nop
    525c:	e002      	b.n	5264 <c_if_cond+0x20a>
        return;
    525e:	bf00      	nop
    5260:	e000      	b.n	5264 <c_if_cond+0x20a>
            return;
    5262:	bf00      	nop
}
    5264:	3728      	adds	r7, #40	; 0x28
    5266:	46bd      	mov	sp, r7
    5268:	bd80      	pop	{r7, pc}
    526a:	bf00      	nop
    526c:	0001e098 	.word	0x0001e098
    5270:	0001ec1c 	.word	0x0001ec1c
    5274:	0001e084 	.word	0x0001e084

00005278 <c_assign_atom_expr>:

typedef enum { ASSIGN_STORE, ASSIGN_AUG_LOAD, ASSIGN_AUG_STORE } assign_kind_t;
STATIC void c_assign(compiler_t *comp, mp_parse_node_t pn, assign_kind_t kind);

STATIC void c_assign_atom_expr(compiler_t *comp, mp_parse_node_struct_t *pns, assign_kind_t assign_kind) {
    5278:	b580      	push	{r7, lr}
    527a:	b088      	sub	sp, #32
    527c:	af00      	add	r7, sp, #0
    527e:	60f8      	str	r0, [r7, #12]
    5280:	60b9      	str	r1, [r7, #8]
    5282:	607a      	str	r2, [r7, #4]
    if (assign_kind != ASSIGN_AUG_STORE) {
    5284:	687b      	ldr	r3, [r7, #4]
    5286:	2b02      	cmp	r3, #2
    5288:	d005      	beq.n	5296 <c_assign_atom_expr+0x1e>
        compile_node(comp, pns->nodes[0]);
    528a:	68bb      	ldr	r3, [r7, #8]
    528c:	689b      	ldr	r3, [r3, #8]
    528e:	4619      	mov	r1, r3
    5290:	68f8      	ldr	r0, [r7, #12]
    5292:	f003 fbae 	bl	89f2 <compile_node>
    }

    if (MP_PARSE_NODE_IS_STRUCT(pns->nodes[1])) {
    5296:	68bb      	ldr	r3, [r7, #8]
    5298:	68db      	ldr	r3, [r3, #12]
    529a:	2b00      	cmp	r3, #0
    529c:	f000 80b0 	beq.w	5400 <c_assign_atom_expr+0x188>
    52a0:	68bb      	ldr	r3, [r7, #8]
    52a2:	68db      	ldr	r3, [r3, #12]
    52a4:	f003 0303 	and.w	r3, r3, #3
    52a8:	2b00      	cmp	r3, #0
    52aa:	f040 80a9 	bne.w	5400 <c_assign_atom_expr+0x188>
        mp_parse_node_struct_t *pns1 = (mp_parse_node_struct_t*)pns->nodes[1];
    52ae:	68bb      	ldr	r3, [r7, #8]
    52b0:	68db      	ldr	r3, [r3, #12]
    52b2:	61fb      	str	r3, [r7, #28]
        if (MP_PARSE_NODE_STRUCT_KIND(pns1) == PN_atom_expr_trailers) {
    52b4:	69fb      	ldr	r3, [r7, #28]
    52b6:	685b      	ldr	r3, [r3, #4]
    52b8:	b2db      	uxtb	r3, r3
    52ba:	2b86      	cmp	r3, #134	; 0x86
    52bc:	d13a      	bne.n	5334 <c_assign_atom_expr+0xbc>
            int n = MP_PARSE_NODE_STRUCT_NUM_NODES(pns1);
    52be:	69fb      	ldr	r3, [r7, #28]
    52c0:	685b      	ldr	r3, [r3, #4]
    52c2:	0a1b      	lsrs	r3, r3, #8
    52c4:	617b      	str	r3, [r7, #20]
            if (assign_kind != ASSIGN_AUG_STORE) {
    52c6:	687b      	ldr	r3, [r7, #4]
    52c8:	2b02      	cmp	r3, #2
    52ca:	d013      	beq.n	52f4 <c_assign_atom_expr+0x7c>
                for (int i = 0; i < n - 1; i++) {
    52cc:	2300      	movs	r3, #0
    52ce:	61bb      	str	r3, [r7, #24]
    52d0:	e00b      	b.n	52ea <c_assign_atom_expr+0x72>
                    compile_node(comp, pns1->nodes[i]);
    52d2:	69fb      	ldr	r3, [r7, #28]
    52d4:	69ba      	ldr	r2, [r7, #24]
    52d6:	3202      	adds	r2, #2
    52d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    52dc:	4619      	mov	r1, r3
    52de:	68f8      	ldr	r0, [r7, #12]
    52e0:	f003 fb87 	bl	89f2 <compile_node>
                for (int i = 0; i < n - 1; i++) {
    52e4:	69bb      	ldr	r3, [r7, #24]
    52e6:	3301      	adds	r3, #1
    52e8:	61bb      	str	r3, [r7, #24]
    52ea:	697b      	ldr	r3, [r7, #20]
    52ec:	1e5a      	subs	r2, r3, #1
    52ee:	69bb      	ldr	r3, [r7, #24]
    52f0:	429a      	cmp	r2, r3
    52f2:	dcee      	bgt.n	52d2 <c_assign_atom_expr+0x5a>
                }
            }
            assert(MP_PARSE_NODE_IS_STRUCT(pns1->nodes[n - 1]));
    52f4:	697b      	ldr	r3, [r7, #20]
    52f6:	1e5a      	subs	r2, r3, #1
    52f8:	69fb      	ldr	r3, [r7, #28]
    52fa:	3202      	adds	r2, #2
    52fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    5300:	2b00      	cmp	r3, #0
    5302:	d009      	beq.n	5318 <c_assign_atom_expr+0xa0>
    5304:	697b      	ldr	r3, [r7, #20]
    5306:	1e5a      	subs	r2, r3, #1
    5308:	69fb      	ldr	r3, [r7, #28]
    530a:	3202      	adds	r2, #2
    530c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    5310:	f003 0303 	and.w	r3, r3, #3
    5314:	2b00      	cmp	r3, #0
    5316:	d006      	beq.n	5326 <c_assign_atom_expr+0xae>
    5318:	4b3e      	ldr	r3, [pc, #248]	; (5414 <c_assign_atom_expr+0x19c>)
    531a:	4a3f      	ldr	r2, [pc, #252]	; (5418 <c_assign_atom_expr+0x1a0>)
    531c:	f240 116b 	movw	r1, #363	; 0x16b
    5320:	483e      	ldr	r0, [pc, #248]	; (541c <c_assign_atom_expr+0x1a4>)
    5322:	f015 ff4b 	bl	1b1bc <__assert_func>
            pns1 = (mp_parse_node_struct_t*)pns1->nodes[n - 1];
    5326:	697b      	ldr	r3, [r7, #20]
    5328:	1e5a      	subs	r2, r3, #1
    532a:	69fb      	ldr	r3, [r7, #28]
    532c:	3202      	adds	r2, #2
    532e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    5332:	61fb      	str	r3, [r7, #28]
        }
        if (MP_PARSE_NODE_STRUCT_KIND(pns1) == PN_trailer_bracket) {
    5334:	69fb      	ldr	r3, [r7, #28]
    5336:	685b      	ldr	r3, [r3, #4]
    5338:	b2db      	uxtb	r3, r3
    533a:	2b2e      	cmp	r3, #46	; 0x2e
    533c:	d12a      	bne.n	5394 <c_assign_atom_expr+0x11c>
            if (assign_kind == ASSIGN_AUG_STORE) {
    533e:	687b      	ldr	r3, [r7, #4]
    5340:	2b02      	cmp	r3, #2
    5342:	d10b      	bne.n	535c <c_assign_atom_expr+0xe4>
                EMIT(rot_three);
    5344:	68fb      	ldr	r3, [r7, #12]
    5346:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5348:	4618      	mov	r0, r3
    534a:	f005 fa09 	bl	a760 <mp_emit_bc_rot_three>
                EMIT_ARG(subscr, MP_EMIT_SUBSCR_STORE);
    534e:	68fb      	ldr	r3, [r7, #12]
    5350:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5352:	2101      	movs	r1, #1
    5354:	4618      	mov	r0, r3
    5356:	f005 f905 	bl	a564 <mp_emit_bc_subscr>
                    EMIT_ARG(subscr, MP_EMIT_SUBSCR_LOAD);
                } else {
                    EMIT_ARG(subscr, MP_EMIT_SUBSCR_STORE);
                }
            }
            return;
    535a:	e057      	b.n	540c <c_assign_atom_expr+0x194>
                compile_node(comp, pns1->nodes[0]);
    535c:	69fb      	ldr	r3, [r7, #28]
    535e:	689b      	ldr	r3, [r3, #8]
    5360:	4619      	mov	r1, r3
    5362:	68f8      	ldr	r0, [r7, #12]
    5364:	f003 fb45 	bl	89f2 <compile_node>
                if (assign_kind == ASSIGN_AUG_LOAD) {
    5368:	687b      	ldr	r3, [r7, #4]
    536a:	2b01      	cmp	r3, #1
    536c:	d10b      	bne.n	5386 <c_assign_atom_expr+0x10e>
                    EMIT(dup_top_two);
    536e:	68fb      	ldr	r3, [r7, #12]
    5370:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5372:	4618      	mov	r0, r3
    5374:	f005 f9c3 	bl	a6fe <mp_emit_bc_dup_top_two>
                    EMIT_ARG(subscr, MP_EMIT_SUBSCR_LOAD);
    5378:	68fb      	ldr	r3, [r7, #12]
    537a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    537c:	2100      	movs	r1, #0
    537e:	4618      	mov	r0, r3
    5380:	f005 f8f0 	bl	a564 <mp_emit_bc_subscr>
            return;
    5384:	e042      	b.n	540c <c_assign_atom_expr+0x194>
                    EMIT_ARG(subscr, MP_EMIT_SUBSCR_STORE);
    5386:	68fb      	ldr	r3, [r7, #12]
    5388:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    538a:	2101      	movs	r1, #1
    538c:	4618      	mov	r0, r3
    538e:	f005 f8e9 	bl	a564 <mp_emit_bc_subscr>
            return;
    5392:	e03b      	b.n	540c <c_assign_atom_expr+0x194>
        } else if (MP_PARSE_NODE_STRUCT_KIND(pns1) == PN_trailer_period) {
    5394:	69fb      	ldr	r3, [r7, #28]
    5396:	685b      	ldr	r3, [r3, #4]
    5398:	b2db      	uxtb	r3, r3
    539a:	2b2f      	cmp	r3, #47	; 0x2f
    539c:	d130      	bne.n	5400 <c_assign_atom_expr+0x188>
            assert(MP_PARSE_NODE_IS_ID(pns1->nodes[0]));
    539e:	69fb      	ldr	r3, [r7, #28]
    53a0:	689b      	ldr	r3, [r3, #8]
    53a2:	f003 030f 	and.w	r3, r3, #15
    53a6:	2b02      	cmp	r3, #2
    53a8:	d006      	beq.n	53b8 <c_assign_atom_expr+0x140>
    53aa:	4b1d      	ldr	r3, [pc, #116]	; (5420 <c_assign_atom_expr+0x1a8>)
    53ac:	4a1a      	ldr	r2, [pc, #104]	; (5418 <c_assign_atom_expr+0x1a0>)
    53ae:	f240 117d 	movw	r1, #381	; 0x17d
    53b2:	481a      	ldr	r0, [pc, #104]	; (541c <c_assign_atom_expr+0x1a4>)
    53b4:	f015 ff02 	bl	1b1bc <__assert_func>
            if (assign_kind == ASSIGN_AUG_LOAD) {
    53b8:	687b      	ldr	r3, [r7, #4]
    53ba:	2b01      	cmp	r3, #1
    53bc:	d10e      	bne.n	53dc <c_assign_atom_expr+0x164>
                EMIT(dup_top);
    53be:	68fb      	ldr	r3, [r7, #12]
    53c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    53c2:	4618      	mov	r0, r3
    53c4:	f005 f98b 	bl	a6de <mp_emit_bc_dup_top>
                EMIT_ARG(attr, MP_PARSE_NODE_LEAF_ARG(pns1->nodes[0]), MP_EMIT_ATTR_LOAD);
    53c8:	68fb      	ldr	r3, [r7, #12]
    53ca:	6a98      	ldr	r0, [r3, #40]	; 0x28
    53cc:	69fb      	ldr	r3, [r7, #28]
    53ce:	689b      	ldr	r3, [r3, #8]
    53d0:	091b      	lsrs	r3, r3, #4
    53d2:	2200      	movs	r2, #0
    53d4:	4619      	mov	r1, r3
    53d6:	f005 f8ed 	bl	a5b4 <mp_emit_bc_attr>
                if (assign_kind == ASSIGN_AUG_STORE) {
                    EMIT(rot_two);
                }
                EMIT_ARG(attr, MP_PARSE_NODE_LEAF_ARG(pns1->nodes[0]), MP_EMIT_ATTR_STORE);
            }
            return;
    53da:	e017      	b.n	540c <c_assign_atom_expr+0x194>
                if (assign_kind == ASSIGN_AUG_STORE) {
    53dc:	687b      	ldr	r3, [r7, #4]
    53de:	2b02      	cmp	r3, #2
    53e0:	d104      	bne.n	53ec <c_assign_atom_expr+0x174>
                    EMIT(rot_two);
    53e2:	68fb      	ldr	r3, [r7, #12]
    53e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    53e6:	4618      	mov	r0, r3
    53e8:	f005 f9aa 	bl	a740 <mp_emit_bc_rot_two>
                EMIT_ARG(attr, MP_PARSE_NODE_LEAF_ARG(pns1->nodes[0]), MP_EMIT_ATTR_STORE);
    53ec:	68fb      	ldr	r3, [r7, #12]
    53ee:	6a98      	ldr	r0, [r3, #40]	; 0x28
    53f0:	69fb      	ldr	r3, [r7, #28]
    53f2:	689b      	ldr	r3, [r3, #8]
    53f4:	091b      	lsrs	r3, r3, #4
    53f6:	2201      	movs	r2, #1
    53f8:	4619      	mov	r1, r3
    53fa:	f005 f8db 	bl	a5b4 <mp_emit_bc_attr>
            return;
    53fe:	e005      	b.n	540c <c_assign_atom_expr+0x194>
        }
    }

    compile_syntax_error(comp, (mp_parse_node_t)pns, "can't assign to expression");
    5400:	68bb      	ldr	r3, [r7, #8]
    5402:	4a08      	ldr	r2, [pc, #32]	; (5424 <c_assign_atom_expr+0x1ac>)
    5404:	4619      	mov	r1, r3
    5406:	68f8      	ldr	r0, [r7, #12]
    5408:	f7ff fc85 	bl	4d16 <compile_syntax_error>
}
    540c:	3720      	adds	r7, #32
    540e:	46bd      	mov	sp, r7
    5410:	bd80      	pop	{r7, pc}
    5412:	bf00      	nop
    5414:	0001e0d8 	.word	0x0001e0d8
    5418:	0001ec28 	.word	0x0001ec28
    541c:	0001e084 	.word	0x0001e084
    5420:	0001e104 	.word	0x0001e104
    5424:	0001e128 	.word	0x0001e128

00005428 <c_assign_tuple>:

// we need to allow for a caller passing in 1 initial node (node_head) followed by an array of nodes (nodes_tail)
STATIC void c_assign_tuple(compiler_t *comp, mp_parse_node_t node_head, uint num_tail, mp_parse_node_t *nodes_tail) {
    5428:	b580      	push	{r7, lr}
    542a:	b088      	sub	sp, #32
    542c:	af00      	add	r7, sp, #0
    542e:	60f8      	str	r0, [r7, #12]
    5430:	60b9      	str	r1, [r7, #8]
    5432:	607a      	str	r2, [r7, #4]
    5434:	603b      	str	r3, [r7, #0]
    uint num_head = (node_head == MP_PARSE_NODE_NULL) ? 0 : 1;
    5436:	68bb      	ldr	r3, [r7, #8]
    5438:	2b00      	cmp	r3, #0
    543a:	bf14      	ite	ne
    543c:	2301      	movne	r3, #1
    543e:	2300      	moveq	r3, #0
    5440:	b2db      	uxtb	r3, r3
    5442:	613b      	str	r3, [r7, #16]

    // look for star expression
    uint have_star_index = -1;
    5444:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    5448:	61fb      	str	r3, [r7, #28]
    if (num_head != 0 && MP_PARSE_NODE_IS_STRUCT_KIND(node_head, PN_star_expr)) {
    544a:	693b      	ldr	r3, [r7, #16]
    544c:	2b00      	cmp	r3, #0
    544e:	d015      	beq.n	547c <c_assign_tuple+0x54>
    5450:	68bb      	ldr	r3, [r7, #8]
    5452:	2b00      	cmp	r3, #0
    5454:	d012      	beq.n	547c <c_assign_tuple+0x54>
    5456:	68bb      	ldr	r3, [r7, #8]
    5458:	f003 0303 	and.w	r3, r3, #3
    545c:	2b00      	cmp	r3, #0
    545e:	d10d      	bne.n	547c <c_assign_tuple+0x54>
    5460:	68bb      	ldr	r3, [r7, #8]
    5462:	685b      	ldr	r3, [r3, #4]
    5464:	b2db      	uxtb	r3, r3
    5466:	2b20      	cmp	r3, #32
    5468:	d108      	bne.n	547c <c_assign_tuple+0x54>
        EMIT_ARG(unpack_ex, 0, num_tail);
    546a:	68fb      	ldr	r3, [r7, #12]
    546c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    546e:	687a      	ldr	r2, [r7, #4]
    5470:	2100      	movs	r1, #0
    5472:	4618      	mov	r0, r3
    5474:	f005 fb7d 	bl	ab72 <mp_emit_bc_unpack_ex>
        have_star_index = 0;
    5478:	2300      	movs	r3, #0
    547a:	61fb      	str	r3, [r7, #28]
    }
    for (uint i = 0; i < num_tail; i++) {
    547c:	2300      	movs	r3, #0
    547e:	61bb      	str	r3, [r7, #24]
    5480:	e03b      	b.n	54fa <c_assign_tuple+0xd2>
        if (MP_PARSE_NODE_IS_STRUCT_KIND(nodes_tail[i], PN_star_expr)) {
    5482:	69bb      	ldr	r3, [r7, #24]
    5484:	009b      	lsls	r3, r3, #2
    5486:	683a      	ldr	r2, [r7, #0]
    5488:	4413      	add	r3, r2
    548a:	681b      	ldr	r3, [r3, #0]
    548c:	2b00      	cmp	r3, #0
    548e:	d031      	beq.n	54f4 <c_assign_tuple+0xcc>
    5490:	69bb      	ldr	r3, [r7, #24]
    5492:	009b      	lsls	r3, r3, #2
    5494:	683a      	ldr	r2, [r7, #0]
    5496:	4413      	add	r3, r2
    5498:	681b      	ldr	r3, [r3, #0]
    549a:	f003 0303 	and.w	r3, r3, #3
    549e:	2b00      	cmp	r3, #0
    54a0:	d128      	bne.n	54f4 <c_assign_tuple+0xcc>
    54a2:	69bb      	ldr	r3, [r7, #24]
    54a4:	009b      	lsls	r3, r3, #2
    54a6:	683a      	ldr	r2, [r7, #0]
    54a8:	4413      	add	r3, r2
    54aa:	681b      	ldr	r3, [r3, #0]
    54ac:	685b      	ldr	r3, [r3, #4]
    54ae:	b2db      	uxtb	r3, r3
    54b0:	2b20      	cmp	r3, #32
    54b2:	d11f      	bne.n	54f4 <c_assign_tuple+0xcc>
            if (have_star_index == (uint)-1) {
    54b4:	69fb      	ldr	r3, [r7, #28]
    54b6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    54ba:	d110      	bne.n	54de <c_assign_tuple+0xb6>
                EMIT_ARG(unpack_ex, num_head + i, num_tail - i - 1);
    54bc:	68fb      	ldr	r3, [r7, #12]
    54be:	6a98      	ldr	r0, [r3, #40]	; 0x28
    54c0:	693a      	ldr	r2, [r7, #16]
    54c2:	69bb      	ldr	r3, [r7, #24]
    54c4:	18d1      	adds	r1, r2, r3
    54c6:	687a      	ldr	r2, [r7, #4]
    54c8:	69bb      	ldr	r3, [r7, #24]
    54ca:	1ad3      	subs	r3, r2, r3
    54cc:	3b01      	subs	r3, #1
    54ce:	461a      	mov	r2, r3
    54d0:	f005 fb4f 	bl	ab72 <mp_emit_bc_unpack_ex>
                have_star_index = num_head + i;
    54d4:	693a      	ldr	r2, [r7, #16]
    54d6:	69bb      	ldr	r3, [r7, #24]
    54d8:	4413      	add	r3, r2
    54da:	61fb      	str	r3, [r7, #28]
    54dc:	e00a      	b.n	54f4 <c_assign_tuple+0xcc>
            } else {
                compile_syntax_error(comp, nodes_tail[i], "multiple *x in assignment");
    54de:	69bb      	ldr	r3, [r7, #24]
    54e0:	009b      	lsls	r3, r3, #2
    54e2:	683a      	ldr	r2, [r7, #0]
    54e4:	4413      	add	r3, r2
    54e6:	681b      	ldr	r3, [r3, #0]
    54e8:	4a2a      	ldr	r2, [pc, #168]	; (5594 <c_assign_tuple+0x16c>)
    54ea:	4619      	mov	r1, r3
    54ec:	68f8      	ldr	r0, [r7, #12]
    54ee:	f7ff fc12 	bl	4d16 <compile_syntax_error>
                return;
    54f2:	e04b      	b.n	558c <c_assign_tuple+0x164>
    for (uint i = 0; i < num_tail; i++) {
    54f4:	69bb      	ldr	r3, [r7, #24]
    54f6:	3301      	adds	r3, #1
    54f8:	61bb      	str	r3, [r7, #24]
    54fa:	69ba      	ldr	r2, [r7, #24]
    54fc:	687b      	ldr	r3, [r7, #4]
    54fe:	429a      	cmp	r2, r3
    5500:	d3bf      	bcc.n	5482 <c_assign_tuple+0x5a>
            }
        }
    }
    if (have_star_index == (uint)-1) {
    5502:	69fb      	ldr	r3, [r7, #28]
    5504:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    5508:	d107      	bne.n	551a <c_assign_tuple+0xf2>
        EMIT_ARG(unpack_sequence, num_head + num_tail);
    550a:	68fb      	ldr	r3, [r7, #12]
    550c:	6a98      	ldr	r0, [r3, #40]	; 0x28
    550e:	693a      	ldr	r2, [r7, #16]
    5510:	687b      	ldr	r3, [r7, #4]
    5512:	4413      	add	r3, r2
    5514:	4619      	mov	r1, r3
    5516:	f005 fb18 	bl	ab4a <mp_emit_bc_unpack_sequence>
    }
    if (num_head != 0) {
    551a:	693b      	ldr	r3, [r7, #16]
    551c:	2b00      	cmp	r3, #0
    551e:	d00f      	beq.n	5540 <c_assign_tuple+0x118>
        if (0 == have_star_index) {
    5520:	69fb      	ldr	r3, [r7, #28]
    5522:	2b00      	cmp	r3, #0
    5524:	d107      	bne.n	5536 <c_assign_tuple+0x10e>
            c_assign(comp, ((mp_parse_node_struct_t*)node_head)->nodes[0], ASSIGN_STORE);
    5526:	68bb      	ldr	r3, [r7, #8]
    5528:	689b      	ldr	r3, [r3, #8]
    552a:	2200      	movs	r2, #0
    552c:	4619      	mov	r1, r3
    552e:	68f8      	ldr	r0, [r7, #12]
    5530:	f000 f832 	bl	5598 <c_assign>
    5534:	e004      	b.n	5540 <c_assign_tuple+0x118>
        } else {
            c_assign(comp, node_head, ASSIGN_STORE);
    5536:	2200      	movs	r2, #0
    5538:	68b9      	ldr	r1, [r7, #8]
    553a:	68f8      	ldr	r0, [r7, #12]
    553c:	f000 f82c 	bl	5598 <c_assign>
        }
    }
    for (uint i = 0; i < num_tail; i++) {
    5540:	2300      	movs	r3, #0
    5542:	617b      	str	r3, [r7, #20]
    5544:	e01e      	b.n	5584 <c_assign_tuple+0x15c>
        if (num_head + i == have_star_index) {
    5546:	693a      	ldr	r2, [r7, #16]
    5548:	697b      	ldr	r3, [r7, #20]
    554a:	441a      	add	r2, r3
    554c:	69fb      	ldr	r3, [r7, #28]
    554e:	429a      	cmp	r2, r3
    5550:	d10b      	bne.n	556a <c_assign_tuple+0x142>
            c_assign(comp, ((mp_parse_node_struct_t*)nodes_tail[i])->nodes[0], ASSIGN_STORE);
    5552:	697b      	ldr	r3, [r7, #20]
    5554:	009b      	lsls	r3, r3, #2
    5556:	683a      	ldr	r2, [r7, #0]
    5558:	4413      	add	r3, r2
    555a:	681b      	ldr	r3, [r3, #0]
    555c:	689b      	ldr	r3, [r3, #8]
    555e:	2200      	movs	r2, #0
    5560:	4619      	mov	r1, r3
    5562:	68f8      	ldr	r0, [r7, #12]
    5564:	f000 f818 	bl	5598 <c_assign>
    5568:	e009      	b.n	557e <c_assign_tuple+0x156>
        } else {
            c_assign(comp, nodes_tail[i], ASSIGN_STORE);
    556a:	697b      	ldr	r3, [r7, #20]
    556c:	009b      	lsls	r3, r3, #2
    556e:	683a      	ldr	r2, [r7, #0]
    5570:	4413      	add	r3, r2
    5572:	681b      	ldr	r3, [r3, #0]
    5574:	2200      	movs	r2, #0
    5576:	4619      	mov	r1, r3
    5578:	68f8      	ldr	r0, [r7, #12]
    557a:	f000 f80d 	bl	5598 <c_assign>
    for (uint i = 0; i < num_tail; i++) {
    557e:	697b      	ldr	r3, [r7, #20]
    5580:	3301      	adds	r3, #1
    5582:	617b      	str	r3, [r7, #20]
    5584:	697a      	ldr	r2, [r7, #20]
    5586:	687b      	ldr	r3, [r7, #4]
    5588:	429a      	cmp	r2, r3
    558a:	d3dc      	bcc.n	5546 <c_assign_tuple+0x11e>
        }
    }
}
    558c:	3720      	adds	r7, #32
    558e:	46bd      	mov	sp, r7
    5590:	bd80      	pop	{r7, pc}
    5592:	bf00      	nop
    5594:	0001e144 	.word	0x0001e144

00005598 <c_assign>:

// assigns top of stack to pn
STATIC void c_assign(compiler_t *comp, mp_parse_node_t pn, assign_kind_t assign_kind) {
    5598:	b580      	push	{r7, lr}
    559a:	b088      	sub	sp, #32
    559c:	af00      	add	r7, sp, #0
    559e:	60f8      	str	r0, [r7, #12]
    55a0:	60b9      	str	r1, [r7, #8]
    55a2:	607a      	str	r2, [r7, #4]
    assert(!MP_PARSE_NODE_IS_NULL(pn));
    55a4:	68bb      	ldr	r3, [r7, #8]
    55a6:	2b00      	cmp	r3, #0
    55a8:	d106      	bne.n	55b8 <c_assign+0x20>
    55aa:	4b7a      	ldr	r3, [pc, #488]	; (5794 <c_assign+0x1fc>)
    55ac:	4a7a      	ldr	r2, [pc, #488]	; (5798 <c_assign+0x200>)
    55ae:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
    55b2:	487a      	ldr	r0, [pc, #488]	; (579c <c_assign+0x204>)
    55b4:	f015 fe02 	bl	1b1bc <__assert_func>
    if (MP_PARSE_NODE_IS_LEAF(pn)) {
    55b8:	68bb      	ldr	r3, [r7, #8]
    55ba:	f003 0303 	and.w	r3, r3, #3
    55be:	2b00      	cmp	r3, #0
    55c0:	d018      	beq.n	55f4 <c_assign+0x5c>
        if (MP_PARSE_NODE_IS_ID(pn)) {
    55c2:	68bb      	ldr	r3, [r7, #8]
    55c4:	f003 030f 	and.w	r3, r3, #15
    55c8:	2b02      	cmp	r3, #2
    55ca:	f040 80cf 	bne.w	576c <c_assign+0x1d4>
            qstr arg = MP_PARSE_NODE_LEAF_ARG(pn);
    55ce:	68bb      	ldr	r3, [r7, #8]
    55d0:	091b      	lsrs	r3, r3, #4
    55d2:	613b      	str	r3, [r7, #16]
            switch (assign_kind) {
    55d4:	687b      	ldr	r3, [r7, #4]
    55d6:	2b00      	cmp	r3, #0
    55d8:	d001      	beq.n	55de <c_assign+0x46>
    55da:	2b02      	cmp	r3, #2
    55dc:	d104      	bne.n	55e8 <c_assign+0x50>
                case ASSIGN_STORE:
                case ASSIGN_AUG_STORE:
                    compile_store_id(comp, arg);
    55de:	6939      	ldr	r1, [r7, #16]
    55e0:	68f8      	ldr	r0, [r7, #12]
    55e2:	f7ff fcb5 	bl	4f50 <compile_store_id>
                    break;
    55e6:	e0c0      	b.n	576a <c_assign+0x1d2>
                case ASSIGN_AUG_LOAD:
                default:
                    compile_load_id(comp, arg);
    55e8:	6939      	ldr	r1, [r7, #16]
    55ea:	68f8      	ldr	r0, [r7, #12]
    55ec:	f7ff fc91 	bl	4f12 <compile_load_id>
                    break;
    55f0:	bf00      	nop
    55f2:	e0ba      	b.n	576a <c_assign+0x1d2>
        } else {
            goto cannot_assign;
        }
    } else {
        // pn must be a struct
        mp_parse_node_struct_t *pns = (mp_parse_node_struct_t*)pn;
    55f4:	68bb      	ldr	r3, [r7, #8]
    55f6:	61fb      	str	r3, [r7, #28]
        switch (MP_PARSE_NODE_STRUCT_KIND(pns)) {
    55f8:	69fb      	ldr	r3, [r7, #28]
    55fa:	685b      	ldr	r3, [r3, #4]
    55fc:	b2db      	uxtb	r3, r3
    55fe:	2b2a      	cmp	r3, #42	; 0x2a
    5600:	d01f      	beq.n	5642 <c_assign+0xaa>
    5602:	2b2a      	cmp	r3, #42	; 0x2a
    5604:	d804      	bhi.n	5610 <c_assign+0x78>
    5606:	2b06      	cmp	r3, #6
    5608:	d00d      	beq.n	5626 <c_assign+0x8e>
    560a:	2b29      	cmp	r3, #41	; 0x29
    560c:	d005      	beq.n	561a <c_assign+0x82>
                    c_assign_tuple(comp, pns->nodes[0], 0, NULL);
                }
                break;

            default:
                goto cannot_assign;
    560e:	e0b8      	b.n	5782 <c_assign+0x1ea>
        switch (MP_PARSE_NODE_STRUCT_KIND(pns)) {
    5610:	2b2b      	cmp	r3, #43	; 0x2b
    5612:	d039      	beq.n	5688 <c_assign+0xf0>
    5614:	2b90      	cmp	r3, #144	; 0x90
    5616:	d006      	beq.n	5626 <c_assign+0x8e>
                goto cannot_assign;
    5618:	e0b3      	b.n	5782 <c_assign+0x1ea>
                c_assign_atom_expr(comp, pns, assign_kind);
    561a:	687a      	ldr	r2, [r7, #4]
    561c:	69f9      	ldr	r1, [r7, #28]
    561e:	68f8      	ldr	r0, [r7, #12]
    5620:	f7ff fe2a 	bl	5278 <c_assign_atom_expr>
                break;
    5624:	e05a      	b.n	56dc <c_assign+0x144>
                if (assign_kind != ASSIGN_STORE) {
    5626:	687b      	ldr	r3, [r7, #4]
    5628:	2b00      	cmp	r3, #0
    562a:	f040 80a1 	bne.w	5770 <c_assign+0x1d8>
                c_assign_tuple(comp, MP_PARSE_NODE_NULL, MP_PARSE_NODE_STRUCT_NUM_NODES(pns), pns->nodes);
    562e:	69fb      	ldr	r3, [r7, #28]
    5630:	685b      	ldr	r3, [r3, #4]
    5632:	0a1a      	lsrs	r2, r3, #8
    5634:	69fb      	ldr	r3, [r7, #28]
    5636:	3308      	adds	r3, #8
    5638:	2100      	movs	r1, #0
    563a:	68f8      	ldr	r0, [r7, #12]
    563c:	f7ff fef4 	bl	5428 <c_assign_tuple>
                break;
    5640:	e04c      	b.n	56dc <c_assign+0x144>
                if (MP_PARSE_NODE_IS_NULL(pns->nodes[0])) {
    5642:	69fb      	ldr	r3, [r7, #28]
    5644:	689b      	ldr	r3, [r3, #8]
    5646:	2b00      	cmp	r3, #0
    5648:	f000 8094 	beq.w	5774 <c_assign+0x1dc>
                    assert(MP_PARSE_NODE_IS_STRUCT_KIND(pns->nodes[0], PN_testlist_comp));
    564c:	69fb      	ldr	r3, [r7, #28]
    564e:	689b      	ldr	r3, [r3, #8]
    5650:	2b00      	cmp	r3, #0
    5652:	d00b      	beq.n	566c <c_assign+0xd4>
    5654:	69fb      	ldr	r3, [r7, #28]
    5656:	689b      	ldr	r3, [r3, #8]
    5658:	f003 0303 	and.w	r3, r3, #3
    565c:	2b00      	cmp	r3, #0
    565e:	d105      	bne.n	566c <c_assign+0xd4>
    5660:	69fb      	ldr	r3, [r7, #28]
    5662:	689b      	ldr	r3, [r3, #8]
    5664:	685b      	ldr	r3, [r3, #4]
    5666:	b2db      	uxtb	r3, r3
    5668:	2b8a      	cmp	r3, #138	; 0x8a
    566a:	d006      	beq.n	567a <c_assign+0xe2>
    566c:	4b4c      	ldr	r3, [pc, #304]	; (57a0 <c_assign+0x208>)
    566e:	4a4a      	ldr	r2, [pc, #296]	; (5798 <c_assign+0x200>)
    5670:	f240 11e1 	movw	r1, #481	; 0x1e1
    5674:	4849      	ldr	r0, [pc, #292]	; (579c <c_assign+0x204>)
    5676:	f015 fda1 	bl	1b1bc <__assert_func>
                    if (assign_kind != ASSIGN_STORE) {
    567a:	687b      	ldr	r3, [r7, #4]
    567c:	2b00      	cmp	r3, #0
    567e:	d17b      	bne.n	5778 <c_assign+0x1e0>
                    pns = (mp_parse_node_struct_t*)pns->nodes[0];
    5680:	69fb      	ldr	r3, [r7, #28]
    5682:	689b      	ldr	r3, [r3, #8]
    5684:	61fb      	str	r3, [r7, #28]
                    goto testlist_comp;
    5686:	e02a      	b.n	56de <c_assign+0x146>
                if (assign_kind != ASSIGN_STORE) {
    5688:	687b      	ldr	r3, [r7, #4]
    568a:	2b00      	cmp	r3, #0
    568c:	d176      	bne.n	577c <c_assign+0x1e4>
                if (MP_PARSE_NODE_IS_NULL(pns->nodes[0])) {
    568e:	69fb      	ldr	r3, [r7, #28]
    5690:	689b      	ldr	r3, [r3, #8]
    5692:	2b00      	cmp	r3, #0
    5694:	d106      	bne.n	56a4 <c_assign+0x10c>
                    c_assign_tuple(comp, MP_PARSE_NODE_NULL, 0, NULL);
    5696:	2300      	movs	r3, #0
    5698:	2200      	movs	r2, #0
    569a:	2100      	movs	r1, #0
    569c:	68f8      	ldr	r0, [r7, #12]
    569e:	f7ff fec3 	bl	5428 <c_assign_tuple>
                break;
    56a2:	e01a      	b.n	56da <c_assign+0x142>
                } else if (MP_PARSE_NODE_IS_STRUCT_KIND(pns->nodes[0], PN_testlist_comp)) {
    56a4:	69fb      	ldr	r3, [r7, #28]
    56a6:	689b      	ldr	r3, [r3, #8]
    56a8:	2b00      	cmp	r3, #0
    56aa:	d00f      	beq.n	56cc <c_assign+0x134>
    56ac:	69fb      	ldr	r3, [r7, #28]
    56ae:	689b      	ldr	r3, [r3, #8]
    56b0:	f003 0303 	and.w	r3, r3, #3
    56b4:	2b00      	cmp	r3, #0
    56b6:	d109      	bne.n	56cc <c_assign+0x134>
    56b8:	69fb      	ldr	r3, [r7, #28]
    56ba:	689b      	ldr	r3, [r3, #8]
    56bc:	685b      	ldr	r3, [r3, #4]
    56be:	b2db      	uxtb	r3, r3
    56c0:	2b8a      	cmp	r3, #138	; 0x8a
    56c2:	d103      	bne.n	56cc <c_assign+0x134>
                    pns = (mp_parse_node_struct_t*)pns->nodes[0];
    56c4:	69fb      	ldr	r3, [r7, #28]
    56c6:	689b      	ldr	r3, [r3, #8]
    56c8:	61fb      	str	r3, [r7, #28]
                    goto testlist_comp;
    56ca:	e008      	b.n	56de <c_assign+0x146>
                    c_assign_tuple(comp, pns->nodes[0], 0, NULL);
    56cc:	69fb      	ldr	r3, [r7, #28]
    56ce:	6899      	ldr	r1, [r3, #8]
    56d0:	2300      	movs	r3, #0
    56d2:	2200      	movs	r2, #0
    56d4:	68f8      	ldr	r0, [r7, #12]
    56d6:	f7ff fea7 	bl	5428 <c_assign_tuple>
                break;
    56da:	bf00      	nop
        }
        return;
    56dc:	e056      	b.n	578c <c_assign+0x1f4>

        testlist_comp:
        // lhs is a sequence
        if (MP_PARSE_NODE_IS_STRUCT(pns->nodes[1])) {
    56de:	69fb      	ldr	r3, [r7, #28]
    56e0:	68db      	ldr	r3, [r3, #12]
    56e2:	2b00      	cmp	r3, #0
    56e4:	d038      	beq.n	5758 <c_assign+0x1c0>
    56e6:	69fb      	ldr	r3, [r7, #28]
    56e8:	68db      	ldr	r3, [r3, #12]
    56ea:	f003 0303 	and.w	r3, r3, #3
    56ee:	2b00      	cmp	r3, #0
    56f0:	d132      	bne.n	5758 <c_assign+0x1c0>
            mp_parse_node_struct_t *pns2 = (mp_parse_node_struct_t*)pns->nodes[1];
    56f2:	69fb      	ldr	r3, [r7, #28]
    56f4:	68db      	ldr	r3, [r3, #12]
    56f6:	61bb      	str	r3, [r7, #24]
            if (MP_PARSE_NODE_STRUCT_KIND(pns2) == PN_testlist_comp_3b) {
    56f8:	69bb      	ldr	r3, [r7, #24]
    56fa:	685b      	ldr	r3, [r3, #4]
    56fc:	b2db      	uxtb	r3, r3
    56fe:	2b8d      	cmp	r3, #141	; 0x8d
    5700:	d112      	bne.n	5728 <c_assign+0x190>
                // sequence of one item, with trailing comma
                assert(MP_PARSE_NODE_IS_NULL(pns2->nodes[0]));
    5702:	69bb      	ldr	r3, [r7, #24]
    5704:	689b      	ldr	r3, [r3, #8]
    5706:	2b00      	cmp	r3, #0
    5708:	d006      	beq.n	5718 <c_assign+0x180>
    570a:	4b26      	ldr	r3, [pc, #152]	; (57a4 <c_assign+0x20c>)
    570c:	4a22      	ldr	r2, [pc, #136]	; (5798 <c_assign+0x200>)
    570e:	f240 2106 	movw	r1, #518	; 0x206
    5712:	4822      	ldr	r0, [pc, #136]	; (579c <c_assign+0x204>)
    5714:	f015 fd52 	bl	1b1bc <__assert_func>
                c_assign_tuple(comp, pns->nodes[0], 0, NULL);
    5718:	69fb      	ldr	r3, [r7, #28]
    571a:	6899      	ldr	r1, [r3, #8]
    571c:	2300      	movs	r3, #0
    571e:	2200      	movs	r2, #0
    5720:	68f8      	ldr	r0, [r7, #12]
    5722:	f7ff fe81 	bl	5428 <c_assign_tuple>
        if (MP_PARSE_NODE_IS_STRUCT(pns->nodes[1])) {
    5726:	e01f      	b.n	5768 <c_assign+0x1d0>
            } else if (MP_PARSE_NODE_STRUCT_KIND(pns2) == PN_testlist_comp_3c) {
    5728:	69bb      	ldr	r3, [r7, #24]
    572a:	685b      	ldr	r3, [r3, #4]
    572c:	b2db      	uxtb	r3, r3
    572e:	2b8e      	cmp	r3, #142	; 0x8e
    5730:	d10c      	bne.n	574c <c_assign+0x1b4>
                // sequence of many items
                uint n = MP_PARSE_NODE_STRUCT_NUM_NODES(pns2);
    5732:	69bb      	ldr	r3, [r7, #24]
    5734:	685b      	ldr	r3, [r3, #4]
    5736:	0a1b      	lsrs	r3, r3, #8
    5738:	617b      	str	r3, [r7, #20]
                c_assign_tuple(comp, pns->nodes[0], n, pns2->nodes);
    573a:	69fb      	ldr	r3, [r7, #28]
    573c:	6899      	ldr	r1, [r3, #8]
    573e:	69bb      	ldr	r3, [r7, #24]
    5740:	3308      	adds	r3, #8
    5742:	697a      	ldr	r2, [r7, #20]
    5744:	68f8      	ldr	r0, [r7, #12]
    5746:	f7ff fe6f 	bl	5428 <c_assign_tuple>
        if (MP_PARSE_NODE_IS_STRUCT(pns->nodes[1])) {
    574a:	e00d      	b.n	5768 <c_assign+0x1d0>
            } else if (MP_PARSE_NODE_STRUCT_KIND(pns2) == PN_comp_for) {
    574c:	69bb      	ldr	r3, [r7, #24]
    574e:	685b      	ldr	r3, [r3, #4]
    5750:	b2db      	uxtb	r3, r3
    5752:	2b9f      	cmp	r3, #159	; 0x9f
    5754:	d014      	beq.n	5780 <c_assign+0x1e8>
                goto cannot_assign;
            } else {
                // sequence with 2 items
                goto sequence_with_2_items;
    5756:	bf00      	nop
            }
        } else {
            // sequence with 2 items
            sequence_with_2_items:
            c_assign_tuple(comp, MP_PARSE_NODE_NULL, 2, pns->nodes);
    5758:	69fb      	ldr	r3, [r7, #28]
    575a:	3308      	adds	r3, #8
    575c:	2202      	movs	r2, #2
    575e:	2100      	movs	r1, #0
    5760:	68f8      	ldr	r0, [r7, #12]
    5762:	f7ff fe61 	bl	5428 <c_assign_tuple>
        }
        return;
    5766:	e011      	b.n	578c <c_assign+0x1f4>
    5768:	e010      	b.n	578c <c_assign+0x1f4>
    }
    return;
    576a:	e00f      	b.n	578c <c_assign+0x1f4>
            goto cannot_assign;
    576c:	bf00      	nop
    576e:	e008      	b.n	5782 <c_assign+0x1ea>
                    goto cannot_assign;
    5770:	bf00      	nop
    5772:	e006      	b.n	5782 <c_assign+0x1ea>
                    goto cannot_assign;
    5774:	bf00      	nop
    5776:	e004      	b.n	5782 <c_assign+0x1ea>
                        goto cannot_assign;
    5778:	bf00      	nop
    577a:	e002      	b.n	5782 <c_assign+0x1ea>
                    goto cannot_assign;
    577c:	bf00      	nop
    577e:	e000      	b.n	5782 <c_assign+0x1ea>
                goto cannot_assign;
    5780:	bf00      	nop

    cannot_assign:
    compile_syntax_error(comp, pn, "can't assign to expression");
    5782:	4a09      	ldr	r2, [pc, #36]	; (57a8 <c_assign+0x210>)
    5784:	68b9      	ldr	r1, [r7, #8]
    5786:	68f8      	ldr	r0, [r7, #12]
    5788:	f7ff fac5 	bl	4d16 <compile_syntax_error>
}
    578c:	3720      	adds	r7, #32
    578e:	46bd      	mov	sp, r7
    5790:	bd80      	pop	{r7, pc}
    5792:	bf00      	nop
    5794:	0001e160 	.word	0x0001e160
    5798:	0001ec3c 	.word	0x0001ec3c
    579c:	0001e084 	.word	0x0001e084
    57a0:	0001e098 	.word	0x0001e098
    57a4:	0001e17c 	.word	0x0001e17c
    57a8:	0001e128 	.word	0x0001e128

000057ac <close_over_variables_etc>:

// stuff for lambda and comprehensions and generators:
//  if n_pos_defaults > 0 then there is a tuple on the stack with the positional defaults
//  if n_kw_defaults > 0 then there is a dictionary on the stack with the keyword defaults
//  if both exist, the tuple is above the dictionary (ie the first pop gets the tuple)
STATIC void close_over_variables_etc(compiler_t *comp, scope_t *this_scope, int n_pos_defaults, int n_kw_defaults) {
    57ac:	b580      	push	{r7, lr}
    57ae:	b08c      	sub	sp, #48	; 0x30
    57b0:	af02      	add	r7, sp, #8
    57b2:	60f8      	str	r0, [r7, #12]
    57b4:	60b9      	str	r1, [r7, #8]
    57b6:	607a      	str	r2, [r7, #4]
    57b8:	603b      	str	r3, [r7, #0]
    assert(n_pos_defaults >= 0);
    57ba:	687b      	ldr	r3, [r7, #4]
    57bc:	2b00      	cmp	r3, #0
    57be:	da06      	bge.n	57ce <close_over_variables_etc+0x22>
    57c0:	4b41      	ldr	r3, [pc, #260]	; (58c8 <close_over_variables_etc+0x11c>)
    57c2:	4a42      	ldr	r2, [pc, #264]	; (58cc <close_over_variables_etc+0x120>)
    57c4:	f44f 7109 	mov.w	r1, #548	; 0x224
    57c8:	4841      	ldr	r0, [pc, #260]	; (58d0 <close_over_variables_etc+0x124>)
    57ca:	f015 fcf7 	bl	1b1bc <__assert_func>
    assert(n_kw_defaults >= 0);
    57ce:	683b      	ldr	r3, [r7, #0]
    57d0:	2b00      	cmp	r3, #0
    57d2:	da06      	bge.n	57e2 <close_over_variables_etc+0x36>
    57d4:	4b3f      	ldr	r3, [pc, #252]	; (58d4 <close_over_variables_etc+0x128>)
    57d6:	4a3d      	ldr	r2, [pc, #244]	; (58cc <close_over_variables_etc+0x120>)
    57d8:	f240 2125 	movw	r1, #549	; 0x225
    57dc:	483c      	ldr	r0, [pc, #240]	; (58d0 <close_over_variables_etc+0x124>)
    57de:	f015 fced 	bl	1b1bc <__assert_func>

    // set flags
    if (n_kw_defaults > 0) {
    57e2:	683b      	ldr	r3, [r7, #0]
    57e4:	2b00      	cmp	r3, #0
    57e6:	dd06      	ble.n	57f6 <close_over_variables_etc+0x4a>
        this_scope->scope_flags |= MP_SCOPE_FLAG_DEFKWARGS;
    57e8:	68bb      	ldr	r3, [r7, #8]
    57ea:	7e1b      	ldrb	r3, [r3, #24]
    57ec:	f043 0308 	orr.w	r3, r3, #8
    57f0:	b2da      	uxtb	r2, r3
    57f2:	68bb      	ldr	r3, [r7, #8]
    57f4:	761a      	strb	r2, [r3, #24]
    }
    this_scope->num_def_pos_args = n_pos_defaults;
    57f6:	687b      	ldr	r3, [r7, #4]
    57f8:	b29a      	uxth	r2, r3
    57fa:	68bb      	ldr	r3, [r7, #8]
    57fc:	83da      	strh	r2, [r3, #30]

    // make closed over variables, if any
    // ensure they are closed over in the order defined in the outer scope (mainly to agree with CPython)
    int nfree = 0;
    57fe:	2300      	movs	r3, #0
    5800:	627b      	str	r3, [r7, #36]	; 0x24
    if (comp->scope_cur->kind != SCOPE_MODULE) {
    5802:	68fb      	ldr	r3, [r7, #12]
    5804:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    5806:	681b      	ldr	r3, [r3, #0]
    5808:	2b00      	cmp	r3, #0
    580a:	d044      	beq.n	5896 <close_over_variables_etc+0xea>
        for (int i = 0; i < comp->scope_cur->id_info_len; i++) {
    580c:	2300      	movs	r3, #0
    580e:	623b      	str	r3, [r7, #32]
    5810:	e03a      	b.n	5888 <close_over_variables_etc+0xdc>
            id_info_t *id = &comp->scope_cur->id_info[i];
    5812:	68fb      	ldr	r3, [r7, #12]
    5814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    5816:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5818:	6a3b      	ldr	r3, [r7, #32]
    581a:	00db      	lsls	r3, r3, #3
    581c:	4413      	add	r3, r2
    581e:	61bb      	str	r3, [r7, #24]
            if (id->kind == ID_INFO_KIND_CELL || id->kind == ID_INFO_KIND_FREE) {
    5820:	69bb      	ldr	r3, [r7, #24]
    5822:	781b      	ldrb	r3, [r3, #0]
    5824:	2b03      	cmp	r3, #3
    5826:	d003      	beq.n	5830 <close_over_variables_etc+0x84>
    5828:	69bb      	ldr	r3, [r7, #24]
    582a:	781b      	ldrb	r3, [r3, #0]
    582c:	2b04      	cmp	r3, #4
    582e:	d128      	bne.n	5882 <close_over_variables_etc+0xd6>
                for (int j = 0; j < this_scope->id_info_len; j++) {
    5830:	2300      	movs	r3, #0
    5832:	61fb      	str	r3, [r7, #28]
    5834:	e01f      	b.n	5876 <close_over_variables_etc+0xca>
                    id_info_t *id2 = &this_scope->id_info[j];
    5836:	68bb      	ldr	r3, [r7, #8]
    5838:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    583a:	69fb      	ldr	r3, [r7, #28]
    583c:	00db      	lsls	r3, r3, #3
    583e:	4413      	add	r3, r2
    5840:	617b      	str	r3, [r7, #20]
                    if (id2->kind == ID_INFO_KIND_FREE && id->qst == id2->qst) {
    5842:	697b      	ldr	r3, [r7, #20]
    5844:	781b      	ldrb	r3, [r3, #0]
    5846:	2b04      	cmp	r3, #4
    5848:	d112      	bne.n	5870 <close_over_variables_etc+0xc4>
    584a:	69bb      	ldr	r3, [r7, #24]
    584c:	685a      	ldr	r2, [r3, #4]
    584e:	697b      	ldr	r3, [r7, #20]
    5850:	685b      	ldr	r3, [r3, #4]
    5852:	429a      	cmp	r2, r3
    5854:	d10c      	bne.n	5870 <close_over_variables_etc+0xc4>
                        // in MicroPython we load closures using LOAD_FAST
                        EMIT_LOAD_FAST(id->qst, id->local_num);
    5856:	68fb      	ldr	r3, [r7, #12]
    5858:	6a98      	ldr	r0, [r3, #40]	; 0x28
    585a:	69bb      	ldr	r3, [r7, #24]
    585c:	6859      	ldr	r1, [r3, #4]
    585e:	69bb      	ldr	r3, [r7, #24]
    5860:	885b      	ldrh	r3, [r3, #2]
    5862:	461a      	mov	r2, r3
    5864:	2300      	movs	r3, #0
    5866:	f004 fe11 	bl	a48c <mp_emit_bc_load_local>
                        nfree += 1;
    586a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    586c:	3301      	adds	r3, #1
    586e:	627b      	str	r3, [r7, #36]	; 0x24
                for (int j = 0; j < this_scope->id_info_len; j++) {
    5870:	69fb      	ldr	r3, [r7, #28]
    5872:	3301      	adds	r3, #1
    5874:	61fb      	str	r3, [r7, #28]
    5876:	68bb      	ldr	r3, [r7, #8]
    5878:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    587a:	461a      	mov	r2, r3
    587c:	69fb      	ldr	r3, [r7, #28]
    587e:	429a      	cmp	r2, r3
    5880:	dcd9      	bgt.n	5836 <close_over_variables_etc+0x8a>
        for (int i = 0; i < comp->scope_cur->id_info_len; i++) {
    5882:	6a3b      	ldr	r3, [r7, #32]
    5884:	3301      	adds	r3, #1
    5886:	623b      	str	r3, [r7, #32]
    5888:	68fb      	ldr	r3, [r7, #12]
    588a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    588c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    588e:	461a      	mov	r2, r3
    5890:	6a3b      	ldr	r3, [r7, #32]
    5892:	429a      	cmp	r2, r3
    5894:	dcbd      	bgt.n	5812 <close_over_variables_etc+0x66>
            }
        }
    }

    // make the function/closure
    if (nfree == 0) {
    5896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5898:	2b00      	cmp	r3, #0
    589a:	d107      	bne.n	58ac <close_over_variables_etc+0x100>
        EMIT_ARG(make_function, this_scope, n_pos_defaults, n_kw_defaults);
    589c:	68fb      	ldr	r3, [r7, #12]
    589e:	6a98      	ldr	r0, [r3, #40]	; 0x28
    58a0:	687a      	ldr	r2, [r7, #4]
    58a2:	683b      	ldr	r3, [r7, #0]
    58a4:	68b9      	ldr	r1, [r7, #8]
    58a6:	f005 f97e 	bl	aba6 <mp_emit_bc_make_function>
    } else {
        EMIT_ARG(make_closure, this_scope, nfree, n_pos_defaults, n_kw_defaults);
    }
}
    58aa:	e009      	b.n	58c0 <close_over_variables_etc+0x114>
        EMIT_ARG(make_closure, this_scope, nfree, n_pos_defaults, n_kw_defaults);
    58ac:	68fb      	ldr	r3, [r7, #12]
    58ae:	6a98      	ldr	r0, [r3, #40]	; 0x28
    58b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    58b2:	6879      	ldr	r1, [r7, #4]
    58b4:	683b      	ldr	r3, [r7, #0]
    58b6:	9300      	str	r3, [sp, #0]
    58b8:	460b      	mov	r3, r1
    58ba:	68b9      	ldr	r1, [r7, #8]
    58bc:	f005 f99c 	bl	abf8 <mp_emit_bc_make_closure>
}
    58c0:	bf00      	nop
    58c2:	3728      	adds	r7, #40	; 0x28
    58c4:	46bd      	mov	sp, r7
    58c6:	bd80      	pop	{r7, pc}
    58c8:	0001e1a4 	.word	0x0001e1a4
    58cc:	0001ec48 	.word	0x0001ec48
    58d0:	0001e084 	.word	0x0001e084
    58d4:	0001e1b8 	.word	0x0001e1b8

000058d8 <compile_funcdef_lambdef_param>:

STATIC void compile_funcdef_lambdef_param(compiler_t *comp, mp_parse_node_t pn) {
    58d8:	b580      	push	{r7, lr}
    58da:	b088      	sub	sp, #32
    58dc:	af00      	add	r7, sp, #0
    58de:	6078      	str	r0, [r7, #4]
    58e0:	6039      	str	r1, [r7, #0]
    // For efficiency of the code below we extract the parse-node kind here
    int pn_kind;
    if (MP_PARSE_NODE_IS_ID(pn)) {
    58e2:	683b      	ldr	r3, [r7, #0]
    58e4:	f003 030f 	and.w	r3, r3, #15
    58e8:	2b02      	cmp	r3, #2
    58ea:	d103      	bne.n	58f4 <compile_funcdef_lambdef_param+0x1c>
        pn_kind = -1;
    58ec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    58f0:	61fb      	str	r3, [r7, #28]
    58f2:	e012      	b.n	591a <compile_funcdef_lambdef_param+0x42>
    } else {
        assert(MP_PARSE_NODE_IS_STRUCT(pn));
    58f4:	683b      	ldr	r3, [r7, #0]
    58f6:	2b00      	cmp	r3, #0
    58f8:	d004      	beq.n	5904 <compile_funcdef_lambdef_param+0x2c>
    58fa:	683b      	ldr	r3, [r7, #0]
    58fc:	f003 0303 	and.w	r3, r3, #3
    5900:	2b00      	cmp	r3, #0
    5902:	d006      	beq.n	5912 <compile_funcdef_lambdef_param+0x3a>
    5904:	4b4c      	ldr	r3, [pc, #304]	; (5a38 <compile_funcdef_lambdef_param+0x160>)
    5906:	4a4d      	ldr	r2, [pc, #308]	; (5a3c <compile_funcdef_lambdef_param+0x164>)
    5908:	f240 214e 	movw	r1, #590	; 0x24e
    590c:	484c      	ldr	r0, [pc, #304]	; (5a40 <compile_funcdef_lambdef_param+0x168>)
    590e:	f015 fc55 	bl	1b1bc <__assert_func>
        pn_kind = MP_PARSE_NODE_STRUCT_KIND((mp_parse_node_struct_t*)pn);
    5912:	683b      	ldr	r3, [r7, #0]
    5914:	685b      	ldr	r3, [r3, #4]
    5916:	b2db      	uxtb	r3, r3
    5918:	61fb      	str	r3, [r7, #28]
    }

    if (pn_kind == PN_typedargslist_star || pn_kind == PN_varargslist_star) {
    591a:	69fb      	ldr	r3, [r7, #28]
    591c:	2b41      	cmp	r3, #65	; 0x41
    591e:	d002      	beq.n	5926 <compile_funcdef_lambdef_param+0x4e>
    5920:	69fb      	ldr	r3, [r7, #28]
    5922:	2b49      	cmp	r3, #73	; 0x49
    5924:	d103      	bne.n	592e <compile_funcdef_lambdef_param+0x56>
        comp->have_star = true;
    5926:	687b      	ldr	r3, [r7, #4]
    5928:	2201      	movs	r2, #1
    592a:	719a      	strb	r2, [r3, #6]
    592c:	e080      	b.n	5a30 <compile_funcdef_lambdef_param+0x158>
        } else {
            // named star
        }
        */

    } else if (pn_kind == PN_typedargslist_dbl_star || pn_kind == PN_varargslist_dbl_star) {
    592e:	69fb      	ldr	r3, [r7, #28]
    5930:	2b42      	cmp	r3, #66	; 0x42
    5932:	d07d      	beq.n	5a30 <compile_funcdef_lambdef_param+0x158>
    5934:	69fb      	ldr	r3, [r7, #28]
    5936:	2b4a      	cmp	r3, #74	; 0x4a
    5938:	d07a      	beq.n	5a30 <compile_funcdef_lambdef_param+0x158>
        // TODO do we need to do anything with this?

    } else {
        mp_parse_node_t pn_id;
        mp_parse_node_t pn_equal;
        if (pn_kind == -1) {
    593a:	69fb      	ldr	r3, [r7, #28]
    593c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    5940:	d104      	bne.n	594c <compile_funcdef_lambdef_param+0x74>
            // this parameter is just an id

            pn_id = pn;
    5942:	683b      	ldr	r3, [r7, #0]
    5944:	61bb      	str	r3, [r7, #24]
            pn_equal = MP_PARSE_NODE_NULL;
    5946:	2300      	movs	r3, #0
    5948:	617b      	str	r3, [r7, #20]
    594a:	e01d      	b.n	5988 <compile_funcdef_lambdef_param+0xb0>

        } else if (pn_kind == PN_typedargslist_name) {
    594c:	69fb      	ldr	r3, [r7, #28]
    594e:	2b40      	cmp	r3, #64	; 0x40
    5950:	d108      	bne.n	5964 <compile_funcdef_lambdef_param+0x8c>
            // this parameter has a colon and/or equal specifier

            mp_parse_node_struct_t *pns = (mp_parse_node_struct_t*)pn;
    5952:	683b      	ldr	r3, [r7, #0]
    5954:	613b      	str	r3, [r7, #16]
            pn_id = pns->nodes[0];
    5956:	693b      	ldr	r3, [r7, #16]
    5958:	689b      	ldr	r3, [r3, #8]
    595a:	61bb      	str	r3, [r7, #24]
            //pn_colon = pns->nodes[1]; // unused
            pn_equal = pns->nodes[2];
    595c:	693b      	ldr	r3, [r7, #16]
    595e:	691b      	ldr	r3, [r3, #16]
    5960:	617b      	str	r3, [r7, #20]
    5962:	e011      	b.n	5988 <compile_funcdef_lambdef_param+0xb0>

        } else {
            assert(pn_kind == PN_varargslist_name); // should be
    5964:	69fb      	ldr	r3, [r7, #28]
    5966:	2b48      	cmp	r3, #72	; 0x48
    5968:	d006      	beq.n	5978 <compile_funcdef_lambdef_param+0xa0>
    596a:	4b36      	ldr	r3, [pc, #216]	; (5a44 <compile_funcdef_lambdef_param+0x16c>)
    596c:	4a33      	ldr	r2, [pc, #204]	; (5a3c <compile_funcdef_lambdef_param+0x164>)
    596e:	f240 2173 	movw	r1, #627	; 0x273
    5972:	4833      	ldr	r0, [pc, #204]	; (5a40 <compile_funcdef_lambdef_param+0x168>)
    5974:	f015 fc22 	bl	1b1bc <__assert_func>
            // this parameter has an equal specifier

            mp_parse_node_struct_t *pns = (mp_parse_node_struct_t*)pn;
    5978:	683b      	ldr	r3, [r7, #0]
    597a:	60fb      	str	r3, [r7, #12]
            pn_id = pns->nodes[0];
    597c:	68fb      	ldr	r3, [r7, #12]
    597e:	689b      	ldr	r3, [r3, #8]
    5980:	61bb      	str	r3, [r7, #24]
            pn_equal = pns->nodes[1];
    5982:	68fb      	ldr	r3, [r7, #12]
    5984:	68db      	ldr	r3, [r3, #12]
    5986:	617b      	str	r3, [r7, #20]
        }

        if (MP_PARSE_NODE_IS_NULL(pn_equal)) {
    5988:	697b      	ldr	r3, [r7, #20]
    598a:	2b00      	cmp	r3, #0
    598c:	d10d      	bne.n	59aa <compile_funcdef_lambdef_param+0xd2>
            // this parameter does not have a default value

            // check for non-default parameters given after default parameters (allowed by parser, but not syntactically valid)
            if (!comp->have_star && comp->num_default_params != 0) {
    598e:	687b      	ldr	r3, [r7, #4]
    5990:	799b      	ldrb	r3, [r3, #6]
    5992:	2b00      	cmp	r3, #0
    5994:	d14c      	bne.n	5a30 <compile_funcdef_lambdef_param+0x158>
    5996:	687b      	ldr	r3, [r7, #4]
    5998:	8adb      	ldrh	r3, [r3, #22]
    599a:	2b00      	cmp	r3, #0
    599c:	d048      	beq.n	5a30 <compile_funcdef_lambdef_param+0x158>
                compile_syntax_error(comp, pn, "non-default argument follows default argument");
    599e:	4a2a      	ldr	r2, [pc, #168]	; (5a48 <compile_funcdef_lambdef_param+0x170>)
    59a0:	6839      	ldr	r1, [r7, #0]
    59a2:	6878      	ldr	r0, [r7, #4]
    59a4:	f7ff f9b7 	bl	4d16 <compile_syntax_error>
                return;
    59a8:	e042      	b.n	5a30 <compile_funcdef_lambdef_param+0x158>

        } else {
            // this parameter has a default value
            // in CPython, None (and True, False?) as default parameters are loaded with LOAD_NAME; don't understandy why

            if (comp->have_star) {
    59aa:	687b      	ldr	r3, [r7, #4]
    59ac:	799b      	ldrb	r3, [r3, #6]
    59ae:	2b00      	cmp	r3, #0
    59b0:	d034      	beq.n	5a1c <compile_funcdef_lambdef_param+0x144>
                comp->num_dict_params += 1;
    59b2:	687b      	ldr	r3, [r7, #4]
    59b4:	8a9b      	ldrh	r3, [r3, #20]
    59b6:	3301      	adds	r3, #1
    59b8:	b29a      	uxth	r2, r3
    59ba:	687b      	ldr	r3, [r7, #4]
    59bc:	829a      	strh	r2, [r3, #20]
                // in MicroPython we put the default dict parameters into a dictionary using the bytecode
                if (comp->num_dict_params == 1) {
    59be:	687b      	ldr	r3, [r7, #4]
    59c0:	8a9b      	ldrh	r3, [r3, #20]
    59c2:	2b01      	cmp	r3, #1
    59c4:	d118      	bne.n	59f8 <compile_funcdef_lambdef_param+0x120>
                    // in MicroPython we put the default positional parameters into a tuple using the bytecode
                    // we need to do this here before we start building the map for the default keywords
                    if (comp->num_default_params > 0) {
    59c6:	687b      	ldr	r3, [r7, #4]
    59c8:	8adb      	ldrh	r3, [r3, #22]
    59ca:	2b00      	cmp	r3, #0
    59cc:	d008      	beq.n	59e0 <compile_funcdef_lambdef_param+0x108>
                        EMIT_ARG(build, comp->num_default_params, MP_EMIT_BUILD_TUPLE);
    59ce:	687b      	ldr	r3, [r7, #4]
    59d0:	6a98      	ldr	r0, [r3, #40]	; 0x28
    59d2:	687b      	ldr	r3, [r7, #4]
    59d4:	8adb      	ldrh	r3, [r3, #22]
    59d6:	2200      	movs	r2, #0
    59d8:	4619      	mov	r1, r3
    59da:	f005 f85c 	bl	aa96 <mp_emit_bc_build>
    59de:	e004      	b.n	59ea <compile_funcdef_lambdef_param+0x112>
                    } else {
                        EMIT(load_null); // sentinel indicating empty default positional args
    59e0:	687b      	ldr	r3, [r7, #4]
    59e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    59e4:	4618      	mov	r0, r3
    59e6:	f004 fd41 	bl	a46c <mp_emit_bc_load_null>
                    }
                    // first default dict param, so make the map
                    EMIT_ARG(build, 0, MP_EMIT_BUILD_MAP);
    59ea:	687b      	ldr	r3, [r7, #4]
    59ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    59ee:	2203      	movs	r2, #3
    59f0:	2100      	movs	r1, #0
    59f2:	4618      	mov	r0, r3
    59f4:	f005 f84f 	bl	aa96 <mp_emit_bc_build>
                }

                // compile value then key, then store it to the dict
                compile_node(comp, pn_equal);
    59f8:	6979      	ldr	r1, [r7, #20]
    59fa:	6878      	ldr	r0, [r7, #4]
    59fc:	f002 fff9 	bl	89f2 <compile_node>
                EMIT_ARG(load_const_str, MP_PARSE_NODE_LEAF_ARG(pn_id));
    5a00:	687b      	ldr	r3, [r7, #4]
    5a02:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    5a04:	69bb      	ldr	r3, [r7, #24]
    5a06:	091b      	lsrs	r3, r3, #4
    5a08:	4619      	mov	r1, r3
    5a0a:	4610      	mov	r0, r2
    5a0c:	f004 fd0a 	bl	a424 <mp_emit_bc_load_const_str>
                EMIT(store_map);
    5a10:	687b      	ldr	r3, [r7, #4]
    5a12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5a14:	4618      	mov	r0, r3
    5a16:	f005 f860 	bl	aada <mp_emit_bc_store_map>
    5a1a:	e009      	b.n	5a30 <compile_funcdef_lambdef_param+0x158>
            } else {
                comp->num_default_params += 1;
    5a1c:	687b      	ldr	r3, [r7, #4]
    5a1e:	8adb      	ldrh	r3, [r3, #22]
    5a20:	3301      	adds	r3, #1
    5a22:	b29a      	uxth	r2, r3
    5a24:	687b      	ldr	r3, [r7, #4]
    5a26:	82da      	strh	r2, [r3, #22]
                compile_node(comp, pn_equal);
    5a28:	6979      	ldr	r1, [r7, #20]
    5a2a:	6878      	ldr	r0, [r7, #4]
    5a2c:	f002 ffe1 	bl	89f2 <compile_node>
            }
        }
    }
}
    5a30:	3720      	adds	r7, #32
    5a32:	46bd      	mov	sp, r7
    5a34:	bd80      	pop	{r7, pc}
    5a36:	bf00      	nop
    5a38:	0001e1cc 	.word	0x0001e1cc
    5a3c:	0001ec64 	.word	0x0001ec64
    5a40:	0001e084 	.word	0x0001e084
    5a44:	0001e1e8 	.word	0x0001e1e8
    5a48:	0001e208 	.word	0x0001e208

00005a4c <compile_funcdef_lambdef>:

STATIC void compile_funcdef_lambdef(compiler_t *comp, scope_t *scope, mp_parse_node_t pn_params, pn_kind_t pn_list_kind) {
    5a4c:	b580      	push	{r7, lr}
    5a4e:	b086      	sub	sp, #24
    5a50:	af00      	add	r7, sp, #0
    5a52:	60f8      	str	r0, [r7, #12]
    5a54:	60b9      	str	r1, [r7, #8]
    5a56:	607a      	str	r2, [r7, #4]
    5a58:	603b      	str	r3, [r7, #0]
    // When we call compile_funcdef_lambdef_param below it can compile an arbitrary
    // expression for default arguments, which may contain a lambda.  The lambda will
    // call here in a nested way, so we must save and restore the relevant state.
    bool orig_have_star = comp->have_star;
    5a5a:	68fb      	ldr	r3, [r7, #12]
    5a5c:	799b      	ldrb	r3, [r3, #6]
    5a5e:	2b00      	cmp	r3, #0
    5a60:	bf14      	ite	ne
    5a62:	2301      	movne	r3, #1
    5a64:	2300      	moveq	r3, #0
    5a66:	75fb      	strb	r3, [r7, #23]
    uint16_t orig_num_dict_params = comp->num_dict_params;
    5a68:	68fb      	ldr	r3, [r7, #12]
    5a6a:	8a9b      	ldrh	r3, [r3, #20]
    5a6c:	82bb      	strh	r3, [r7, #20]
    uint16_t orig_num_default_params = comp->num_default_params;
    5a6e:	68fb      	ldr	r3, [r7, #12]
    5a70:	8adb      	ldrh	r3, [r3, #22]
    5a72:	827b      	strh	r3, [r7, #18]

    // compile default parameters
    comp->have_star = false;
    5a74:	68fb      	ldr	r3, [r7, #12]
    5a76:	2200      	movs	r2, #0
    5a78:	719a      	strb	r2, [r3, #6]
    comp->num_dict_params = 0;
    5a7a:	68fb      	ldr	r3, [r7, #12]
    5a7c:	2200      	movs	r2, #0
    5a7e:	829a      	strh	r2, [r3, #20]
    comp->num_default_params = 0;
    5a80:	68fb      	ldr	r3, [r7, #12]
    5a82:	2200      	movs	r2, #0
    5a84:	82da      	strh	r2, [r3, #22]
    apply_to_single_or_list(comp, pn_params, pn_list_kind, compile_funcdef_lambdef_param);
    5a86:	4b1b      	ldr	r3, [pc, #108]	; (5af4 <compile_funcdef_lambdef+0xa8>)
    5a88:	683a      	ldr	r2, [r7, #0]
    5a8a:	6879      	ldr	r1, [r7, #4]
    5a8c:	68f8      	ldr	r0, [r7, #12]
    5a8e:	f7ff f9d8 	bl	4e42 <apply_to_single_or_list>

    if (comp->compile_error != MP_OBJ_NULL) {
    5a92:	68fb      	ldr	r3, [r7, #12]
    5a94:	689b      	ldr	r3, [r3, #8]
    5a96:	2b00      	cmp	r3, #0
    5a98:	d127      	bne.n	5aea <compile_funcdef_lambdef+0x9e>
        return;
    }

    // in MicroPython we put the default positional parameters into a tuple using the bytecode
    // the default keywords args may have already made the tuple; if not, do it now
    if (comp->num_default_params > 0 && comp->num_dict_params == 0) {
    5a9a:	68fb      	ldr	r3, [r7, #12]
    5a9c:	8adb      	ldrh	r3, [r3, #22]
    5a9e:	2b00      	cmp	r3, #0
    5aa0:	d010      	beq.n	5ac4 <compile_funcdef_lambdef+0x78>
    5aa2:	68fb      	ldr	r3, [r7, #12]
    5aa4:	8a9b      	ldrh	r3, [r3, #20]
    5aa6:	2b00      	cmp	r3, #0
    5aa8:	d10c      	bne.n	5ac4 <compile_funcdef_lambdef+0x78>
        EMIT_ARG(build, comp->num_default_params, MP_EMIT_BUILD_TUPLE);
    5aaa:	68fb      	ldr	r3, [r7, #12]
    5aac:	6a98      	ldr	r0, [r3, #40]	; 0x28
    5aae:	68fb      	ldr	r3, [r7, #12]
    5ab0:	8adb      	ldrh	r3, [r3, #22]
    5ab2:	2200      	movs	r2, #0
    5ab4:	4619      	mov	r1, r3
    5ab6:	f004 ffee 	bl	aa96 <mp_emit_bc_build>
        EMIT(load_null); // sentinel indicating empty default keyword args
    5aba:	68fb      	ldr	r3, [r7, #12]
    5abc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5abe:	4618      	mov	r0, r3
    5ac0:	f004 fcd4 	bl	a46c <mp_emit_bc_load_null>
    }

    // make the function
    close_over_variables_etc(comp, scope, comp->num_default_params, comp->num_dict_params);
    5ac4:	68fb      	ldr	r3, [r7, #12]
    5ac6:	8adb      	ldrh	r3, [r3, #22]
    5ac8:	461a      	mov	r2, r3
    5aca:	68fb      	ldr	r3, [r7, #12]
    5acc:	8a9b      	ldrh	r3, [r3, #20]
    5ace:	68b9      	ldr	r1, [r7, #8]
    5ad0:	68f8      	ldr	r0, [r7, #12]
    5ad2:	f7ff fe6b 	bl	57ac <close_over_variables_etc>

    // restore state
    comp->have_star = orig_have_star;
    5ad6:	7dfa      	ldrb	r2, [r7, #23]
    5ad8:	68fb      	ldr	r3, [r7, #12]
    5ada:	719a      	strb	r2, [r3, #6]
    comp->num_dict_params = orig_num_dict_params;
    5adc:	68fb      	ldr	r3, [r7, #12]
    5ade:	8aba      	ldrh	r2, [r7, #20]
    5ae0:	829a      	strh	r2, [r3, #20]
    comp->num_default_params = orig_num_default_params;
    5ae2:	68fb      	ldr	r3, [r7, #12]
    5ae4:	8a7a      	ldrh	r2, [r7, #18]
    5ae6:	82da      	strh	r2, [r3, #22]
    5ae8:	e000      	b.n	5aec <compile_funcdef_lambdef+0xa0>
        return;
    5aea:	bf00      	nop
}
    5aec:	3718      	adds	r7, #24
    5aee:	46bd      	mov	sp, r7
    5af0:	bd80      	pop	{r7, pc}
    5af2:	bf00      	nop
    5af4:	000058d9 	.word	0x000058d9

00005af8 <compile_funcdef_helper>:

// leaves function object on stack
// returns function name
STATIC qstr compile_funcdef_helper(compiler_t *comp, mp_parse_node_struct_t *pns, uint emit_options) {
    5af8:	b580      	push	{r7, lr}
    5afa:	b086      	sub	sp, #24
    5afc:	af00      	add	r7, sp, #0
    5afe:	60f8      	str	r0, [r7, #12]
    5b00:	60b9      	str	r1, [r7, #8]
    5b02:	607a      	str	r2, [r7, #4]
    if (comp->pass == MP_PASS_SCOPE) {
    5b04:	68fb      	ldr	r3, [r7, #12]
    5b06:	795b      	ldrb	r3, [r3, #5]
    5b08:	2b01      	cmp	r3, #1
    5b0a:	d109      	bne.n	5b20 <compile_funcdef_helper+0x28>
        // create a new scope for this function
        scope_t *s = scope_new_and_link(comp, SCOPE_FUNCTION, (mp_parse_node_t)pns, emit_options);
    5b0c:	68ba      	ldr	r2, [r7, #8]
    5b0e:	687b      	ldr	r3, [r7, #4]
    5b10:	2107      	movs	r1, #7
    5b12:	68f8      	ldr	r0, [r7, #12]
    5b14:	f7ff f964 	bl	4de0 <scope_new_and_link>
    5b18:	6178      	str	r0, [r7, #20]
        // store the function scope so the compiling function can use it at each pass
        pns->nodes[4] = (mp_parse_node_t)s;
    5b1a:	697a      	ldr	r2, [r7, #20]
    5b1c:	68bb      	ldr	r3, [r7, #8]
    5b1e:	619a      	str	r2, [r3, #24]
    }

    // get the scope for this function
    scope_t *fscope = (scope_t*)pns->nodes[4];
    5b20:	68bb      	ldr	r3, [r7, #8]
    5b22:	699b      	ldr	r3, [r3, #24]
    5b24:	613b      	str	r3, [r7, #16]

    // compile the function definition
    compile_funcdef_lambdef(comp, fscope, pns->nodes[1], PN_typedargslist);
    5b26:	68bb      	ldr	r3, [r7, #8]
    5b28:	68da      	ldr	r2, [r3, #12]
    5b2a:	233e      	movs	r3, #62	; 0x3e
    5b2c:	6939      	ldr	r1, [r7, #16]
    5b2e:	68f8      	ldr	r0, [r7, #12]
    5b30:	f7ff ff8c 	bl	5a4c <compile_funcdef_lambdef>

    // return its name (the 'f' in "def f(...):")
    return fscope->simple_name;
    5b34:	693b      	ldr	r3, [r7, #16]
    5b36:	8a5b      	ldrh	r3, [r3, #18]
}
    5b38:	4618      	mov	r0, r3
    5b3a:	3718      	adds	r7, #24
    5b3c:	46bd      	mov	sp, r7
    5b3e:	bd80      	pop	{r7, pc}

00005b40 <compile_classdef_helper>:

// leaves class object on stack
// returns class name
STATIC qstr compile_classdef_helper(compiler_t *comp, mp_parse_node_struct_t *pns, uint emit_options) {
    5b40:	b580      	push	{r7, lr}
    5b42:	b088      	sub	sp, #32
    5b44:	af00      	add	r7, sp, #0
    5b46:	60f8      	str	r0, [r7, #12]
    5b48:	60b9      	str	r1, [r7, #8]
    5b4a:	607a      	str	r2, [r7, #4]
    if (comp->pass == MP_PASS_SCOPE) {
    5b4c:	68fb      	ldr	r3, [r7, #12]
    5b4e:	795b      	ldrb	r3, [r3, #5]
    5b50:	2b01      	cmp	r3, #1
    5b52:	d109      	bne.n	5b68 <compile_classdef_helper+0x28>
        // create a new scope for this class
        scope_t *s = scope_new_and_link(comp, SCOPE_CLASS, (mp_parse_node_t)pns, emit_options);
    5b54:	68ba      	ldr	r2, [r7, #8]
    5b56:	687b      	ldr	r3, [r7, #4]
    5b58:	2101      	movs	r1, #1
    5b5a:	68f8      	ldr	r0, [r7, #12]
    5b5c:	f7ff f940 	bl	4de0 <scope_new_and_link>
    5b60:	61b8      	str	r0, [r7, #24]
        // store the class scope so the compiling function can use it at each pass
        pns->nodes[3] = (mp_parse_node_t)s;
    5b62:	69ba      	ldr	r2, [r7, #24]
    5b64:	68bb      	ldr	r3, [r7, #8]
    5b66:	615a      	str	r2, [r3, #20]
    }

    EMIT(load_build_class);
    5b68:	68fb      	ldr	r3, [r7, #12]
    5b6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5b6c:	4618      	mov	r0, r3
    5b6e:	f004 fce9 	bl	a544 <mp_emit_bc_load_build_class>

    // scope for this class
    scope_t *cscope = (scope_t*)pns->nodes[3];
    5b72:	68bb      	ldr	r3, [r7, #8]
    5b74:	695b      	ldr	r3, [r3, #20]
    5b76:	617b      	str	r3, [r7, #20]

    // compile the class
    close_over_variables_etc(comp, cscope, 0, 0);
    5b78:	2300      	movs	r3, #0
    5b7a:	2200      	movs	r2, #0
    5b7c:	6979      	ldr	r1, [r7, #20]
    5b7e:	68f8      	ldr	r0, [r7, #12]
    5b80:	f7ff fe14 	bl	57ac <close_over_variables_etc>

    // get its name
    EMIT_ARG(load_const_str, cscope->simple_name);
    5b84:	68fb      	ldr	r3, [r7, #12]
    5b86:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    5b88:	697b      	ldr	r3, [r7, #20]
    5b8a:	8a5b      	ldrh	r3, [r3, #18]
    5b8c:	4619      	mov	r1, r3
    5b8e:	4610      	mov	r0, r2
    5b90:	f004 fc48 	bl	a424 <mp_emit_bc_load_const_str>

    // nodes[1] has parent classes, if any
    // empty parenthesis (eg class C():) gets here as an empty PN_classdef_2 and needs special handling
    mp_parse_node_t parents = pns->nodes[1];
    5b94:	68bb      	ldr	r3, [r7, #8]
    5b96:	68db      	ldr	r3, [r3, #12]
    5b98:	61fb      	str	r3, [r7, #28]
    if (MP_PARSE_NODE_IS_STRUCT_KIND(parents, PN_classdef_2)) {
    5b9a:	69fb      	ldr	r3, [r7, #28]
    5b9c:	2b00      	cmp	r3, #0
    5b9e:	d00b      	beq.n	5bb8 <compile_classdef_helper+0x78>
    5ba0:	69fb      	ldr	r3, [r7, #28]
    5ba2:	f003 0303 	and.w	r3, r3, #3
    5ba6:	2b00      	cmp	r3, #0
    5ba8:	d106      	bne.n	5bb8 <compile_classdef_helper+0x78>
    5baa:	69fb      	ldr	r3, [r7, #28]
    5bac:	685b      	ldr	r3, [r3, #4]
    5bae:	b2db      	uxtb	r3, r3
    5bb0:	2b96      	cmp	r3, #150	; 0x96
    5bb2:	d101      	bne.n	5bb8 <compile_classdef_helper+0x78>
        parents = MP_PARSE_NODE_NULL;
    5bb4:	2300      	movs	r3, #0
    5bb6:	61fb      	str	r3, [r7, #28]
    }
    compile_trailer_paren_helper(comp, parents, false, 2);
    5bb8:	2302      	movs	r3, #2
    5bba:	2200      	movs	r2, #0
    5bbc:	69f9      	ldr	r1, [r7, #28]
    5bbe:	68f8      	ldr	r0, [r7, #12]
    5bc0:	f002 fab7 	bl	8132 <compile_trailer_paren_helper>

    // return its name (the 'C' in class C(...):")
    return cscope->simple_name;
    5bc4:	697b      	ldr	r3, [r7, #20]
    5bc6:	8a5b      	ldrh	r3, [r3, #18]
}
    5bc8:	4618      	mov	r0, r3
    5bca:	3720      	adds	r7, #32
    5bcc:	46bd      	mov	sp, r7
    5bce:	bd80      	pop	{r7, pc}

00005bd0 <compile_built_in_decorator>:

// returns true if it was a built-in decorator (even if the built-in had an error)
STATIC bool compile_built_in_decorator(compiler_t *comp, int name_len, mp_parse_node_t *name_nodes, uint *emit_options) {
    5bd0:	b580      	push	{r7, lr}
    5bd2:	b086      	sub	sp, #24
    5bd4:	af00      	add	r7, sp, #0
    5bd6:	60f8      	str	r0, [r7, #12]
    5bd8:	60b9      	str	r1, [r7, #8]
    5bda:	607a      	str	r2, [r7, #4]
    5bdc:	603b      	str	r3, [r7, #0]
    if (MP_PARSE_NODE_LEAF_ARG(name_nodes[0]) != MP_QSTR_micropython) {
    5bde:	687b      	ldr	r3, [r7, #4]
    5be0:	681b      	ldr	r3, [r3, #0]
    5be2:	091b      	lsrs	r3, r3, #4
    5be4:	2b96      	cmp	r3, #150	; 0x96
    5be6:	d001      	beq.n	5bec <compile_built_in_decorator+0x1c>
        return false;
    5be8:	2300      	movs	r3, #0
    5bea:	e020      	b.n	5c2e <compile_built_in_decorator+0x5e>
    }

    if (name_len != 2) {
    5bec:	68bb      	ldr	r3, [r7, #8]
    5bee:	2b02      	cmp	r3, #2
    5bf0:	d008      	beq.n	5c04 <compile_built_in_decorator+0x34>
        compile_syntax_error(comp, name_nodes[0], "invalid micropython decorator");
    5bf2:	687b      	ldr	r3, [r7, #4]
    5bf4:	681b      	ldr	r3, [r3, #0]
    5bf6:	4a10      	ldr	r2, [pc, #64]	; (5c38 <compile_built_in_decorator+0x68>)
    5bf8:	4619      	mov	r1, r3
    5bfa:	68f8      	ldr	r0, [r7, #12]
    5bfc:	f7ff f88b 	bl	4d16 <compile_syntax_error>
        return true;
    5c00:	2301      	movs	r3, #1
    5c02:	e014      	b.n	5c2e <compile_built_in_decorator+0x5e>
    }

    qstr attr = MP_PARSE_NODE_LEAF_ARG(name_nodes[1]);
    5c04:	687b      	ldr	r3, [r7, #4]
    5c06:	3304      	adds	r3, #4
    5c08:	681b      	ldr	r3, [r3, #0]
    5c0a:	091b      	lsrs	r3, r3, #4
    5c0c:	617b      	str	r3, [r7, #20]
    if (attr == MP_QSTR_bytecode) {
    5c0e:	697b      	ldr	r3, [r7, #20]
    5c10:	2b5c      	cmp	r3, #92	; 0x5c
    5c12:	d103      	bne.n	5c1c <compile_built_in_decorator+0x4c>
        *emit_options = MP_EMIT_OPT_BYTECODE;
    5c14:	683b      	ldr	r3, [r7, #0]
    5c16:	2201      	movs	r2, #1
    5c18:	601a      	str	r2, [r3, #0]
    5c1a:	e007      	b.n	5c2c <compile_built_in_decorator+0x5c>
    #if MICROPY_EMIT_INLINE_ASM
    } else if (attr == ASM_DECORATOR_QSTR) {
        *emit_options = MP_EMIT_OPT_ASM;
    #endif
    } else {
        compile_syntax_error(comp, name_nodes[1], "invalid micropython decorator");
    5c1c:	687b      	ldr	r3, [r7, #4]
    5c1e:	3304      	adds	r3, #4
    5c20:	681b      	ldr	r3, [r3, #0]
    5c22:	4a05      	ldr	r2, [pc, #20]	; (5c38 <compile_built_in_decorator+0x68>)
    5c24:	4619      	mov	r1, r3
    5c26:	68f8      	ldr	r0, [r7, #12]
    5c28:	f7ff f875 	bl	4d16 <compile_syntax_error>
    }

    return true;
    5c2c:	2301      	movs	r3, #1
}
    5c2e:	4618      	mov	r0, r3
    5c30:	3718      	adds	r7, #24
    5c32:	46bd      	mov	sp, r7
    5c34:	bd80      	pop	{r7, pc}
    5c36:	bf00      	nop
    5c38:	0001e238 	.word	0x0001e238

00005c3c <compile_decorated>:

STATIC void compile_decorated(compiler_t *comp, mp_parse_node_struct_t *pns) {
    5c3c:	b580      	push	{r7, lr}
    5c3e:	b08e      	sub	sp, #56	; 0x38
    5c40:	af00      	add	r7, sp, #0
    5c42:	6078      	str	r0, [r7, #4]
    5c44:	6039      	str	r1, [r7, #0]
    // get the list of decorators
    mp_parse_node_t *nodes;
    int n = mp_parse_node_extract_list(&pns->nodes[0], PN_decorators, &nodes);
    5c46:	683b      	ldr	r3, [r7, #0]
    5c48:	3308      	adds	r3, #8
    5c4a:	f107 0210 	add.w	r2, r7, #16
    5c4e:	213b      	movs	r1, #59	; 0x3b
    5c50:	4618      	mov	r0, r3
    5c52:	f7fd ff69 	bl	3b28 <mp_parse_node_extract_list>
    5c56:	6238      	str	r0, [r7, #32]

    // inherit emit options for this function/class definition
    uint emit_options = comp->scope_cur->emit_options;
    5c58:	687b      	ldr	r3, [r7, #4]
    5c5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    5c5c:	7e5b      	ldrb	r3, [r3, #25]
    5c5e:	60fb      	str	r3, [r7, #12]

    // compile each decorator
    int num_built_in_decorators = 0;
    5c60:	2300      	movs	r3, #0
    5c62:	637b      	str	r3, [r7, #52]	; 0x34
    for (int i = 0; i < n; i++) {
    5c64:	2300      	movs	r3, #0
    5c66:	633b      	str	r3, [r7, #48]	; 0x30
    5c68:	e075      	b.n	5d56 <compile_decorated+0x11a>
        assert(MP_PARSE_NODE_IS_STRUCT_KIND(nodes[i], PN_decorator)); // should be
    5c6a:	693a      	ldr	r2, [r7, #16]
    5c6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    5c6e:	009b      	lsls	r3, r3, #2
    5c70:	4413      	add	r3, r2
    5c72:	681b      	ldr	r3, [r3, #0]
    5c74:	2b00      	cmp	r3, #0
    5c76:	d011      	beq.n	5c9c <compile_decorated+0x60>
    5c78:	693a      	ldr	r2, [r7, #16]
    5c7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    5c7c:	009b      	lsls	r3, r3, #2
    5c7e:	4413      	add	r3, r2
    5c80:	681b      	ldr	r3, [r3, #0]
    5c82:	f003 0303 	and.w	r3, r3, #3
    5c86:	2b00      	cmp	r3, #0
    5c88:	d108      	bne.n	5c9c <compile_decorated+0x60>
    5c8a:	693a      	ldr	r2, [r7, #16]
    5c8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    5c8e:	009b      	lsls	r3, r3, #2
    5c90:	4413      	add	r3, r2
    5c92:	681b      	ldr	r3, [r3, #0]
    5c94:	685b      	ldr	r3, [r3, #4]
    5c96:	b2db      	uxtb	r3, r3
    5c98:	2b3a      	cmp	r3, #58	; 0x3a
    5c9a:	d006      	beq.n	5caa <compile_decorated+0x6e>
    5c9c:	4b50      	ldr	r3, [pc, #320]	; (5de0 <compile_decorated+0x1a4>)
    5c9e:	4a51      	ldr	r2, [pc, #324]	; (5de4 <compile_decorated+0x1a8>)
    5ca0:	f44f 7149 	mov.w	r1, #804	; 0x324
    5ca4:	4850      	ldr	r0, [pc, #320]	; (5de8 <compile_decorated+0x1ac>)
    5ca6:	f015 fa89 	bl	1b1bc <__assert_func>
        mp_parse_node_struct_t *pns_decorator = (mp_parse_node_struct_t*)nodes[i];
    5caa:	693a      	ldr	r2, [r7, #16]
    5cac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    5cae:	009b      	lsls	r3, r3, #2
    5cb0:	4413      	add	r3, r2
    5cb2:	681b      	ldr	r3, [r3, #0]
    5cb4:	61fb      	str	r3, [r7, #28]

        // nodes[0] contains the decorator function, which is a dotted name
        mp_parse_node_t *name_nodes;
        int name_len = mp_parse_node_extract_list(&pns_decorator->nodes[0], PN_dotted_name, &name_nodes);
    5cb6:	69fb      	ldr	r3, [r7, #28]
    5cb8:	3308      	adds	r3, #8
    5cba:	f107 0208 	add.w	r2, r7, #8
    5cbe:	2166      	movs	r1, #102	; 0x66
    5cc0:	4618      	mov	r0, r3
    5cc2:	f7fd ff31 	bl	3b28 <mp_parse_node_extract_list>
    5cc6:	61b8      	str	r0, [r7, #24]

        // check for built-in decorators
        if (compile_built_in_decorator(comp, name_len, name_nodes, &emit_options)) {
    5cc8:	68ba      	ldr	r2, [r7, #8]
    5cca:	f107 030c 	add.w	r3, r7, #12
    5cce:	69b9      	ldr	r1, [r7, #24]
    5cd0:	6878      	ldr	r0, [r7, #4]
    5cd2:	f7ff ff7d 	bl	5bd0 <compile_built_in_decorator>
    5cd6:	4603      	mov	r3, r0
    5cd8:	2b00      	cmp	r3, #0
    5cda:	d003      	beq.n	5ce4 <compile_decorated+0xa8>
            // this was a built-in
            num_built_in_decorators += 1;
    5cdc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    5cde:	3301      	adds	r3, #1
    5ce0:	637b      	str	r3, [r7, #52]	; 0x34
    5ce2:	e035      	b.n	5d50 <compile_decorated+0x114>

        } else {
            // not a built-in, compile normally

            // compile the decorator function
            compile_node(comp, name_nodes[0]);
    5ce4:	68bb      	ldr	r3, [r7, #8]
    5ce6:	681b      	ldr	r3, [r3, #0]
    5ce8:	4619      	mov	r1, r3
    5cea:	6878      	ldr	r0, [r7, #4]
    5cec:	f002 fe81 	bl	89f2 <compile_node>
            for (int j = 1; j < name_len; j++) {
    5cf0:	2301      	movs	r3, #1
    5cf2:	62fb      	str	r3, [r7, #44]	; 0x2c
    5cf4:	e01e      	b.n	5d34 <compile_decorated+0xf8>
                assert(MP_PARSE_NODE_IS_ID(name_nodes[j])); // should be
    5cf6:	68ba      	ldr	r2, [r7, #8]
    5cf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    5cfa:	009b      	lsls	r3, r3, #2
    5cfc:	4413      	add	r3, r2
    5cfe:	681b      	ldr	r3, [r3, #0]
    5d00:	f003 030f 	and.w	r3, r3, #15
    5d04:	2b02      	cmp	r3, #2
    5d06:	d006      	beq.n	5d16 <compile_decorated+0xda>
    5d08:	4b38      	ldr	r3, [pc, #224]	; (5dec <compile_decorated+0x1b0>)
    5d0a:	4a36      	ldr	r2, [pc, #216]	; (5de4 <compile_decorated+0x1a8>)
    5d0c:	f240 3136 	movw	r1, #822	; 0x336
    5d10:	4835      	ldr	r0, [pc, #212]	; (5de8 <compile_decorated+0x1ac>)
    5d12:	f015 fa53 	bl	1b1bc <__assert_func>
                EMIT_ARG(attr, MP_PARSE_NODE_LEAF_ARG(name_nodes[j]), MP_EMIT_ATTR_LOAD);
    5d16:	687b      	ldr	r3, [r7, #4]
    5d18:	6a98      	ldr	r0, [r3, #40]	; 0x28
    5d1a:	68ba      	ldr	r2, [r7, #8]
    5d1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    5d1e:	009b      	lsls	r3, r3, #2
    5d20:	4413      	add	r3, r2
    5d22:	681b      	ldr	r3, [r3, #0]
    5d24:	091b      	lsrs	r3, r3, #4
    5d26:	2200      	movs	r2, #0
    5d28:	4619      	mov	r1, r3
    5d2a:	f004 fc43 	bl	a5b4 <mp_emit_bc_attr>
            for (int j = 1; j < name_len; j++) {
    5d2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    5d30:	3301      	adds	r3, #1
    5d32:	62fb      	str	r3, [r7, #44]	; 0x2c
    5d34:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    5d36:	69bb      	ldr	r3, [r7, #24]
    5d38:	429a      	cmp	r2, r3
    5d3a:	dbdc      	blt.n	5cf6 <compile_decorated+0xba>
            }

            // nodes[1] contains arguments to the decorator function, if any
            if (!MP_PARSE_NODE_IS_NULL(pns_decorator->nodes[1])) {
    5d3c:	69fb      	ldr	r3, [r7, #28]
    5d3e:	68db      	ldr	r3, [r3, #12]
    5d40:	2b00      	cmp	r3, #0
    5d42:	d005      	beq.n	5d50 <compile_decorated+0x114>
                // call the decorator function with the arguments in nodes[1]
                compile_node(comp, pns_decorator->nodes[1]);
    5d44:	69fb      	ldr	r3, [r7, #28]
    5d46:	68db      	ldr	r3, [r3, #12]
    5d48:	4619      	mov	r1, r3
    5d4a:	6878      	ldr	r0, [r7, #4]
    5d4c:	f002 fe51 	bl	89f2 <compile_node>
    for (int i = 0; i < n; i++) {
    5d50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    5d52:	3301      	adds	r3, #1
    5d54:	633b      	str	r3, [r7, #48]	; 0x30
    5d56:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    5d58:	6a3b      	ldr	r3, [r7, #32]
    5d5a:	429a      	cmp	r2, r3
    5d5c:	db85      	blt.n	5c6a <compile_decorated+0x2e>
            }
        }
    }

    // compile the body (funcdef, async funcdef or classdef) and get its name
    mp_parse_node_struct_t *pns_body = (mp_parse_node_struct_t*)pns->nodes[1];
    5d5e:	683b      	ldr	r3, [r7, #0]
    5d60:	68db      	ldr	r3, [r3, #12]
    5d62:	617b      	str	r3, [r7, #20]
    qstr body_name = 0;
    5d64:	2300      	movs	r3, #0
    5d66:	62bb      	str	r3, [r7, #40]	; 0x28
    if (MP_PARSE_NODE_STRUCT_KIND(pns_body) == PN_funcdef) {
    5d68:	697b      	ldr	r3, [r7, #20]
    5d6a:	685b      	ldr	r3, [r3, #4]
    5d6c:	b2db      	uxtb	r3, r3
    5d6e:	2b03      	cmp	r3, #3
    5d70:	d107      	bne.n	5d82 <compile_decorated+0x146>
        body_name = compile_funcdef_helper(comp, pns_body, emit_options);
    5d72:	68fb      	ldr	r3, [r7, #12]
    5d74:	461a      	mov	r2, r3
    5d76:	6979      	ldr	r1, [r7, #20]
    5d78:	6878      	ldr	r0, [r7, #4]
    5d7a:	f7ff febd 	bl	5af8 <compile_funcdef_helper>
    5d7e:	62b8      	str	r0, [r7, #40]	; 0x28
    5d80:	e012      	b.n	5da8 <compile_decorated+0x16c>
        body_name = compile_funcdef_helper(comp, pns0, emit_options);
        scope_t *fscope = (scope_t*)pns0->nodes[4];
        fscope->scope_flags |= MP_SCOPE_FLAG_GENERATOR;
    #endif
    } else {
        assert(MP_PARSE_NODE_STRUCT_KIND(pns_body) == PN_classdef); // should be
    5d82:	697b      	ldr	r3, [r7, #20]
    5d84:	685b      	ldr	r3, [r3, #4]
    5d86:	b2db      	uxtb	r3, r3
    5d88:	2b33      	cmp	r3, #51	; 0x33
    5d8a:	d006      	beq.n	5d9a <compile_decorated+0x15e>
    5d8c:	4b18      	ldr	r3, [pc, #96]	; (5df0 <compile_decorated+0x1b4>)
    5d8e:	4a15      	ldr	r2, [pc, #84]	; (5de4 <compile_decorated+0x1a8>)
    5d90:	f44f 7154 	mov.w	r1, #848	; 0x350
    5d94:	4814      	ldr	r0, [pc, #80]	; (5de8 <compile_decorated+0x1ac>)
    5d96:	f015 fa11 	bl	1b1bc <__assert_func>
        body_name = compile_classdef_helper(comp, pns_body, emit_options);
    5d9a:	68fb      	ldr	r3, [r7, #12]
    5d9c:	461a      	mov	r2, r3
    5d9e:	6979      	ldr	r1, [r7, #20]
    5da0:	6878      	ldr	r0, [r7, #4]
    5da2:	f7ff fecd 	bl	5b40 <compile_classdef_helper>
    5da6:	62b8      	str	r0, [r7, #40]	; 0x28
    }

    // call each decorator
    for (int i = 0; i < n - num_built_in_decorators; i++) {
    5da8:	2300      	movs	r3, #0
    5daa:	627b      	str	r3, [r7, #36]	; 0x24
    5dac:	e009      	b.n	5dc2 <compile_decorated+0x186>
        EMIT_ARG(call_function, 1, 0, 0);
    5dae:	687b      	ldr	r3, [r7, #4]
    5db0:	6a98      	ldr	r0, [r3, #40]	; 0x28
    5db2:	2300      	movs	r3, #0
    5db4:	2200      	movs	r2, #0
    5db6:	2101      	movs	r1, #1
    5db8:	f004 ffa2 	bl	ad00 <mp_emit_bc_call_function>
    for (int i = 0; i < n - num_built_in_decorators; i++) {
    5dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5dbe:	3301      	adds	r3, #1
    5dc0:	627b      	str	r3, [r7, #36]	; 0x24
    5dc2:	6a3a      	ldr	r2, [r7, #32]
    5dc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    5dc6:	1ad2      	subs	r2, r2, r3
    5dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5dca:	429a      	cmp	r2, r3
    5dcc:	dcef      	bgt.n	5dae <compile_decorated+0x172>
    }

    // store func/class object into name
    compile_store_id(comp, body_name);
    5dce:	6ab9      	ldr	r1, [r7, #40]	; 0x28
    5dd0:	6878      	ldr	r0, [r7, #4]
    5dd2:	f7ff f8bd 	bl	4f50 <compile_store_id>
}
    5dd6:	bf00      	nop
    5dd8:	3738      	adds	r7, #56	; 0x38
    5dda:	46bd      	mov	sp, r7
    5ddc:	bd80      	pop	{r7, pc}
    5dde:	bf00      	nop
    5de0:	0001e258 	.word	0x0001e258
    5de4:	0001ec84 	.word	0x0001ec84
    5de8:	0001e084 	.word	0x0001e084
    5dec:	0001e290 	.word	0x0001e290
    5df0:	0001e2b4 	.word	0x0001e2b4

00005df4 <compile_funcdef>:

STATIC void compile_funcdef(compiler_t *comp, mp_parse_node_struct_t *pns) {
    5df4:	b580      	push	{r7, lr}
    5df6:	b084      	sub	sp, #16
    5df8:	af00      	add	r7, sp, #0
    5dfa:	6078      	str	r0, [r7, #4]
    5dfc:	6039      	str	r1, [r7, #0]
    qstr fname = compile_funcdef_helper(comp, pns, comp->scope_cur->emit_options);
    5dfe:	687b      	ldr	r3, [r7, #4]
    5e00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    5e02:	7e5b      	ldrb	r3, [r3, #25]
    5e04:	461a      	mov	r2, r3
    5e06:	6839      	ldr	r1, [r7, #0]
    5e08:	6878      	ldr	r0, [r7, #4]
    5e0a:	f7ff fe75 	bl	5af8 <compile_funcdef_helper>
    5e0e:	60f8      	str	r0, [r7, #12]
    // store function object into function name
    compile_store_id(comp, fname);
    5e10:	68f9      	ldr	r1, [r7, #12]
    5e12:	6878      	ldr	r0, [r7, #4]
    5e14:	f7ff f89c 	bl	4f50 <compile_store_id>
}
    5e18:	bf00      	nop
    5e1a:	3710      	adds	r7, #16
    5e1c:	46bd      	mov	sp, r7
    5e1e:	bd80      	pop	{r7, pc}

00005e20 <c_del_stmt>:

STATIC void c_del_stmt(compiler_t *comp, mp_parse_node_t pn) {
    5e20:	b580      	push	{r7, lr}
    5e22:	b08a      	sub	sp, #40	; 0x28
    5e24:	af00      	add	r7, sp, #0
    5e26:	6078      	str	r0, [r7, #4]
    5e28:	6039      	str	r1, [r7, #0]
    if (MP_PARSE_NODE_IS_ID(pn)) {
    5e2a:	683b      	ldr	r3, [r7, #0]
    5e2c:	f003 030f 	and.w	r3, r3, #15
    5e30:	2b02      	cmp	r3, #2
    5e32:	d106      	bne.n	5e42 <c_del_stmt+0x22>
        compile_delete_id(comp, MP_PARSE_NODE_LEAF_ARG(pn));
    5e34:	683b      	ldr	r3, [r7, #0]
    5e36:	091b      	lsrs	r3, r3, #4
    5e38:	4619      	mov	r1, r3
    5e3a:	6878      	ldr	r0, [r7, #4]
    5e3c:	f7ff f8a6 	bl	4f8c <compile_delete_id>
    } else {
        // some arbitrary statement that we can't delete (eg del 1)
        goto cannot_delete;
    }

    return;
    5e40:	e122      	b.n	6088 <c_del_stmt+0x268>
    } else if (MP_PARSE_NODE_IS_STRUCT_KIND(pn, PN_atom_expr_normal)) {
    5e42:	683b      	ldr	r3, [r7, #0]
    5e44:	2b00      	cmp	r3, #0
    5e46:	f000 808f 	beq.w	5f68 <c_del_stmt+0x148>
    5e4a:	683b      	ldr	r3, [r7, #0]
    5e4c:	f003 0303 	and.w	r3, r3, #3
    5e50:	2b00      	cmp	r3, #0
    5e52:	f040 8089 	bne.w	5f68 <c_del_stmt+0x148>
    5e56:	683b      	ldr	r3, [r7, #0]
    5e58:	685b      	ldr	r3, [r3, #4]
    5e5a:	b2db      	uxtb	r3, r3
    5e5c:	2b29      	cmp	r3, #41	; 0x29
    5e5e:	f040 8083 	bne.w	5f68 <c_del_stmt+0x148>
        mp_parse_node_struct_t *pns = (mp_parse_node_struct_t*)pn;
    5e62:	683b      	ldr	r3, [r7, #0]
    5e64:	61bb      	str	r3, [r7, #24]
        compile_node(comp, pns->nodes[0]); // base of the atom_expr_normal node
    5e66:	69bb      	ldr	r3, [r7, #24]
    5e68:	689b      	ldr	r3, [r3, #8]
    5e6a:	4619      	mov	r1, r3
    5e6c:	6878      	ldr	r0, [r7, #4]
    5e6e:	f002 fdc0 	bl	89f2 <compile_node>
        if (MP_PARSE_NODE_IS_STRUCT(pns->nodes[1])) {
    5e72:	69bb      	ldr	r3, [r7, #24]
    5e74:	68db      	ldr	r3, [r3, #12]
    5e76:	2b00      	cmp	r3, #0
    5e78:	f000 8101 	beq.w	607e <c_del_stmt+0x25e>
    5e7c:	69bb      	ldr	r3, [r7, #24]
    5e7e:	68db      	ldr	r3, [r3, #12]
    5e80:	f003 0303 	and.w	r3, r3, #3
    5e84:	2b00      	cmp	r3, #0
    5e86:	f040 80fa 	bne.w	607e <c_del_stmt+0x25e>
            mp_parse_node_struct_t *pns1 = (mp_parse_node_struct_t*)pns->nodes[1];
    5e8a:	69bb      	ldr	r3, [r7, #24]
    5e8c:	68db      	ldr	r3, [r3, #12]
    5e8e:	627b      	str	r3, [r7, #36]	; 0x24
            if (MP_PARSE_NODE_STRUCT_KIND(pns1) == PN_atom_expr_trailers) {
    5e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5e92:	685b      	ldr	r3, [r3, #4]
    5e94:	b2db      	uxtb	r3, r3
    5e96:	2b86      	cmp	r3, #134	; 0x86
    5e98:	d137      	bne.n	5f0a <c_del_stmt+0xea>
                int n = MP_PARSE_NODE_STRUCT_NUM_NODES(pns1);
    5e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5e9c:	685b      	ldr	r3, [r3, #4]
    5e9e:	0a1b      	lsrs	r3, r3, #8
    5ea0:	617b      	str	r3, [r7, #20]
                for (int i = 0; i < n - 1; i++) {
    5ea2:	2300      	movs	r3, #0
    5ea4:	623b      	str	r3, [r7, #32]
    5ea6:	e00b      	b.n	5ec0 <c_del_stmt+0xa0>
                    compile_node(comp, pns1->nodes[i]);
    5ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5eaa:	6a3a      	ldr	r2, [r7, #32]
    5eac:	3202      	adds	r2, #2
    5eae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    5eb2:	4619      	mov	r1, r3
    5eb4:	6878      	ldr	r0, [r7, #4]
    5eb6:	f002 fd9c 	bl	89f2 <compile_node>
                for (int i = 0; i < n - 1; i++) {
    5eba:	6a3b      	ldr	r3, [r7, #32]
    5ebc:	3301      	adds	r3, #1
    5ebe:	623b      	str	r3, [r7, #32]
    5ec0:	697b      	ldr	r3, [r7, #20]
    5ec2:	1e5a      	subs	r2, r3, #1
    5ec4:	6a3b      	ldr	r3, [r7, #32]
    5ec6:	429a      	cmp	r2, r3
    5ec8:	dcee      	bgt.n	5ea8 <c_del_stmt+0x88>
                assert(MP_PARSE_NODE_IS_STRUCT(pns1->nodes[n - 1]));
    5eca:	697b      	ldr	r3, [r7, #20]
    5ecc:	1e5a      	subs	r2, r3, #1
    5ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5ed0:	3202      	adds	r2, #2
    5ed2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    5ed6:	2b00      	cmp	r3, #0
    5ed8:	d009      	beq.n	5eee <c_del_stmt+0xce>
    5eda:	697b      	ldr	r3, [r7, #20]
    5edc:	1e5a      	subs	r2, r3, #1
    5ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5ee0:	3202      	adds	r2, #2
    5ee2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    5ee6:	f003 0303 	and.w	r3, r3, #3
    5eea:	2b00      	cmp	r3, #0
    5eec:	d006      	beq.n	5efc <c_del_stmt+0xdc>
    5eee:	4b68      	ldr	r3, [pc, #416]	; (6090 <c_del_stmt+0x270>)
    5ef0:	4a68      	ldr	r2, [pc, #416]	; (6094 <c_del_stmt+0x274>)
    5ef2:	f240 3172 	movw	r1, #882	; 0x372
    5ef6:	4868      	ldr	r0, [pc, #416]	; (6098 <c_del_stmt+0x278>)
    5ef8:	f015 f960 	bl	1b1bc <__assert_func>
                pns1 = (mp_parse_node_struct_t*)pns1->nodes[n - 1];
    5efc:	697b      	ldr	r3, [r7, #20]
    5efe:	1e5a      	subs	r2, r3, #1
    5f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5f02:	3202      	adds	r2, #2
    5f04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    5f08:	627b      	str	r3, [r7, #36]	; 0x24
            if (MP_PARSE_NODE_STRUCT_KIND(pns1) == PN_trailer_bracket) {
    5f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5f0c:	685b      	ldr	r3, [r3, #4]
    5f0e:	b2db      	uxtb	r3, r3
    5f10:	2b2e      	cmp	r3, #46	; 0x2e
    5f12:	d10c      	bne.n	5f2e <c_del_stmt+0x10e>
                compile_node(comp, pns1->nodes[0]);
    5f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5f16:	689b      	ldr	r3, [r3, #8]
    5f18:	4619      	mov	r1, r3
    5f1a:	6878      	ldr	r0, [r7, #4]
    5f1c:	f002 fd69 	bl	89f2 <compile_node>
                EMIT_ARG(subscr, MP_EMIT_SUBSCR_DELETE);
    5f20:	687b      	ldr	r3, [r7, #4]
    5f22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5f24:	2102      	movs	r1, #2
    5f26:	4618      	mov	r0, r3
    5f28:	f004 fb1c 	bl	a564 <mp_emit_bc_subscr>
    } else if (MP_PARSE_NODE_IS_STRUCT_KIND(pn, PN_atom_expr_normal)) {
    5f2c:	e0a1      	b.n	6072 <c_del_stmt+0x252>
            } else if (MP_PARSE_NODE_STRUCT_KIND(pns1) == PN_trailer_period) {
    5f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5f30:	685b      	ldr	r3, [r3, #4]
    5f32:	b2db      	uxtb	r3, r3
    5f34:	2b2f      	cmp	r3, #47	; 0x2f
    5f36:	f040 809d 	bne.w	6074 <c_del_stmt+0x254>
                assert(MP_PARSE_NODE_IS_ID(pns1->nodes[0]));
    5f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5f3c:	689b      	ldr	r3, [r3, #8]
    5f3e:	f003 030f 	and.w	r3, r3, #15
    5f42:	2b02      	cmp	r3, #2
    5f44:	d006      	beq.n	5f54 <c_del_stmt+0x134>
    5f46:	4b55      	ldr	r3, [pc, #340]	; (609c <c_del_stmt+0x27c>)
    5f48:	4a52      	ldr	r2, [pc, #328]	; (6094 <c_del_stmt+0x274>)
    5f4a:	f240 3179 	movw	r1, #889	; 0x379
    5f4e:	4852      	ldr	r0, [pc, #328]	; (6098 <c_del_stmt+0x278>)
    5f50:	f015 f934 	bl	1b1bc <__assert_func>
                EMIT_ARG(attr, MP_PARSE_NODE_LEAF_ARG(pns1->nodes[0]), MP_EMIT_ATTR_DELETE);
    5f54:	687b      	ldr	r3, [r7, #4]
    5f56:	6a98      	ldr	r0, [r3, #40]	; 0x28
    5f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5f5a:	689b      	ldr	r3, [r3, #8]
    5f5c:	091b      	lsrs	r3, r3, #4
    5f5e:	2202      	movs	r2, #2
    5f60:	4619      	mov	r1, r3
    5f62:	f004 fb27 	bl	a5b4 <mp_emit_bc_attr>
    } else if (MP_PARSE_NODE_IS_STRUCT_KIND(pn, PN_atom_expr_normal)) {
    5f66:	e084      	b.n	6072 <c_del_stmt+0x252>
    } else if (MP_PARSE_NODE_IS_STRUCT_KIND(pn, PN_atom_paren)) {
    5f68:	683b      	ldr	r3, [r7, #0]
    5f6a:	2b00      	cmp	r3, #0
    5f6c:	f000 8087 	beq.w	607e <c_del_stmt+0x25e>
    5f70:	683b      	ldr	r3, [r7, #0]
    5f72:	f003 0303 	and.w	r3, r3, #3
    5f76:	2b00      	cmp	r3, #0
    5f78:	f040 8081 	bne.w	607e <c_del_stmt+0x25e>
    5f7c:	683b      	ldr	r3, [r7, #0]
    5f7e:	685b      	ldr	r3, [r3, #4]
    5f80:	b2db      	uxtb	r3, r3
    5f82:	2b2a      	cmp	r3, #42	; 0x2a
    5f84:	d17b      	bne.n	607e <c_del_stmt+0x25e>
        pn = ((mp_parse_node_struct_t*)pn)->nodes[0];
    5f86:	683b      	ldr	r3, [r7, #0]
    5f88:	689b      	ldr	r3, [r3, #8]
    5f8a:	603b      	str	r3, [r7, #0]
        if (MP_PARSE_NODE_IS_NULL(pn)) {
    5f8c:	683b      	ldr	r3, [r7, #0]
    5f8e:	2b00      	cmp	r3, #0
    5f90:	d072      	beq.n	6078 <c_del_stmt+0x258>
            assert(MP_PARSE_NODE_IS_STRUCT_KIND(pn, PN_testlist_comp));
    5f92:	683b      	ldr	r3, [r7, #0]
    5f94:	2b00      	cmp	r3, #0
    5f96:	d009      	beq.n	5fac <c_del_stmt+0x18c>
    5f98:	683b      	ldr	r3, [r7, #0]
    5f9a:	f003 0303 	and.w	r3, r3, #3
    5f9e:	2b00      	cmp	r3, #0
    5fa0:	d104      	bne.n	5fac <c_del_stmt+0x18c>
    5fa2:	683b      	ldr	r3, [r7, #0]
    5fa4:	685b      	ldr	r3, [r3, #4]
    5fa6:	b2db      	uxtb	r3, r3
    5fa8:	2b8a      	cmp	r3, #138	; 0x8a
    5faa:	d006      	beq.n	5fba <c_del_stmt+0x19a>
    5fac:	4b3c      	ldr	r3, [pc, #240]	; (60a0 <c_del_stmt+0x280>)
    5fae:	4a39      	ldr	r2, [pc, #228]	; (6094 <c_del_stmt+0x274>)
    5fb0:	f240 3187 	movw	r1, #903	; 0x387
    5fb4:	4838      	ldr	r0, [pc, #224]	; (6098 <c_del_stmt+0x278>)
    5fb6:	f015 f901 	bl	1b1bc <__assert_func>
            mp_parse_node_struct_t *pns = (mp_parse_node_struct_t*)pn;
    5fba:	683b      	ldr	r3, [r7, #0]
    5fbc:	613b      	str	r3, [r7, #16]
            if (MP_PARSE_NODE_IS_STRUCT(pns->nodes[1])) {
    5fbe:	693b      	ldr	r3, [r7, #16]
    5fc0:	68db      	ldr	r3, [r3, #12]
    5fc2:	2b00      	cmp	r3, #0
    5fc4:	d048      	beq.n	6058 <c_del_stmt+0x238>
    5fc6:	693b      	ldr	r3, [r7, #16]
    5fc8:	68db      	ldr	r3, [r3, #12]
    5fca:	f003 0303 	and.w	r3, r3, #3
    5fce:	2b00      	cmp	r3, #0
    5fd0:	d142      	bne.n	6058 <c_del_stmt+0x238>
                mp_parse_node_struct_t *pns1 = (mp_parse_node_struct_t*)pns->nodes[1];
    5fd2:	693b      	ldr	r3, [r7, #16]
    5fd4:	68db      	ldr	r3, [r3, #12]
    5fd6:	60fb      	str	r3, [r7, #12]
                if (MP_PARSE_NODE_STRUCT_KIND(pns1) == PN_testlist_comp_3b) {
    5fd8:	68fb      	ldr	r3, [r7, #12]
    5fda:	685b      	ldr	r3, [r3, #4]
    5fdc:	b2db      	uxtb	r3, r3
    5fde:	2b8d      	cmp	r3, #141	; 0x8d
    5fe0:	d111      	bne.n	6006 <c_del_stmt+0x1e6>
                    assert(MP_PARSE_NODE_IS_NULL(pns1->nodes[0]));
    5fe2:	68fb      	ldr	r3, [r7, #12]
    5fe4:	689b      	ldr	r3, [r3, #8]
    5fe6:	2b00      	cmp	r3, #0
    5fe8:	d006      	beq.n	5ff8 <c_del_stmt+0x1d8>
    5fea:	4b2e      	ldr	r3, [pc, #184]	; (60a4 <c_del_stmt+0x284>)
    5fec:	4a29      	ldr	r2, [pc, #164]	; (6094 <c_del_stmt+0x274>)
    5fee:	f240 318f 	movw	r1, #911	; 0x38f
    5ff2:	4829      	ldr	r0, [pc, #164]	; (6098 <c_del_stmt+0x278>)
    5ff4:	f015 f8e2 	bl	1b1bc <__assert_func>
                    c_del_stmt(comp, pns->nodes[0]);
    5ff8:	693b      	ldr	r3, [r7, #16]
    5ffa:	689b      	ldr	r3, [r3, #8]
    5ffc:	4619      	mov	r1, r3
    5ffe:	6878      	ldr	r0, [r7, #4]
    6000:	f7ff ff0e 	bl	5e20 <c_del_stmt>
            if (MP_PARSE_NODE_IS_STRUCT(pns->nodes[1])) {
    6004:	e035      	b.n	6072 <c_del_stmt+0x252>
                } else if (MP_PARSE_NODE_STRUCT_KIND(pns1) == PN_testlist_comp_3c) {
    6006:	68fb      	ldr	r3, [r7, #12]
    6008:	685b      	ldr	r3, [r3, #4]
    600a:	b2db      	uxtb	r3, r3
    600c:	2b8e      	cmp	r3, #142	; 0x8e
    600e:	d11d      	bne.n	604c <c_del_stmt+0x22c>
                    int n = MP_PARSE_NODE_STRUCT_NUM_NODES(pns1);
    6010:	68fb      	ldr	r3, [r7, #12]
    6012:	685b      	ldr	r3, [r3, #4]
    6014:	0a1b      	lsrs	r3, r3, #8
    6016:	60bb      	str	r3, [r7, #8]
                    c_del_stmt(comp, pns->nodes[0]);
    6018:	693b      	ldr	r3, [r7, #16]
    601a:	689b      	ldr	r3, [r3, #8]
    601c:	4619      	mov	r1, r3
    601e:	6878      	ldr	r0, [r7, #4]
    6020:	f7ff fefe 	bl	5e20 <c_del_stmt>
                    for (int i = 0; i < n; i++) {
    6024:	2300      	movs	r3, #0
    6026:	61fb      	str	r3, [r7, #28]
    6028:	e00b      	b.n	6042 <c_del_stmt+0x222>
                        c_del_stmt(comp, pns1->nodes[i]);
    602a:	68fb      	ldr	r3, [r7, #12]
    602c:	69fa      	ldr	r2, [r7, #28]
    602e:	3202      	adds	r2, #2
    6030:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    6034:	4619      	mov	r1, r3
    6036:	6878      	ldr	r0, [r7, #4]
    6038:	f7ff fef2 	bl	5e20 <c_del_stmt>
                    for (int i = 0; i < n; i++) {
    603c:	69fb      	ldr	r3, [r7, #28]
    603e:	3301      	adds	r3, #1
    6040:	61fb      	str	r3, [r7, #28]
    6042:	69fa      	ldr	r2, [r7, #28]
    6044:	68bb      	ldr	r3, [r7, #8]
    6046:	429a      	cmp	r2, r3
    6048:	dbef      	blt.n	602a <c_del_stmt+0x20a>
            if (MP_PARSE_NODE_IS_STRUCT(pns->nodes[1])) {
    604a:	e012      	b.n	6072 <c_del_stmt+0x252>
                } else if (MP_PARSE_NODE_STRUCT_KIND(pns1) == PN_comp_for) {
    604c:	68fb      	ldr	r3, [r7, #12]
    604e:	685b      	ldr	r3, [r3, #4]
    6050:	b2db      	uxtb	r3, r3
    6052:	2b9f      	cmp	r3, #159	; 0x9f
    6054:	d012      	beq.n	607c <c_del_stmt+0x25c>
                    goto sequence_with_2_items;
    6056:	bf00      	nop
                c_del_stmt(comp, pns->nodes[0]);
    6058:	693b      	ldr	r3, [r7, #16]
    605a:	689b      	ldr	r3, [r3, #8]
    605c:	4619      	mov	r1, r3
    605e:	6878      	ldr	r0, [r7, #4]
    6060:	f7ff fede 	bl	5e20 <c_del_stmt>
                c_del_stmt(comp, pns->nodes[1]);
    6064:	693b      	ldr	r3, [r7, #16]
    6066:	68db      	ldr	r3, [r3, #12]
    6068:	4619      	mov	r1, r3
    606a:	6878      	ldr	r0, [r7, #4]
    606c:	f7ff fed8 	bl	5e20 <c_del_stmt>
    return;
    6070:	e00a      	b.n	6088 <c_del_stmt+0x268>
    6072:	e009      	b.n	6088 <c_del_stmt+0x268>
                goto cannot_delete;
    6074:	bf00      	nop
    6076:	e002      	b.n	607e <c_del_stmt+0x25e>
            goto cannot_delete;
    6078:	bf00      	nop
    607a:	e000      	b.n	607e <c_del_stmt+0x25e>
                    goto cannot_delete;
    607c:	bf00      	nop

cannot_delete:
    compile_syntax_error(comp, (mp_parse_node_t)pn, "can't delete expression");
    607e:	4a0a      	ldr	r2, [pc, #40]	; (60a8 <c_del_stmt+0x288>)
    6080:	6839      	ldr	r1, [r7, #0]
    6082:	6878      	ldr	r0, [r7, #4]
    6084:	f7fe fe47 	bl	4d16 <compile_syntax_error>
}
    6088:	3728      	adds	r7, #40	; 0x28
    608a:	46bd      	mov	sp, r7
    608c:	bd80      	pop	{r7, pc}
    608e:	bf00      	nop
    6090:	0001e0d8 	.word	0x0001e0d8
    6094:	0001ec98 	.word	0x0001ec98
    6098:	0001e084 	.word	0x0001e084
    609c:	0001e104 	.word	0x0001e104
    60a0:	0001e2e8 	.word	0x0001e2e8
    60a4:	0001e31c 	.word	0x0001e31c
    60a8:	0001e344 	.word	0x0001e344

000060ac <compile_del_stmt>:

STATIC void compile_del_stmt(compiler_t *comp, mp_parse_node_struct_t *pns) {
    60ac:	b580      	push	{r7, lr}
    60ae:	b082      	sub	sp, #8
    60b0:	af00      	add	r7, sp, #0
    60b2:	6078      	str	r0, [r7, #4]
    60b4:	6039      	str	r1, [r7, #0]
    apply_to_single_or_list(comp, pns->nodes[0], PN_exprlist, c_del_stmt);
    60b6:	683b      	ldr	r3, [r7, #0]
    60b8:	6899      	ldr	r1, [r3, #8]
    60ba:	4b04      	ldr	r3, [pc, #16]	; (60cc <compile_del_stmt+0x20>)
    60bc:	2290      	movs	r2, #144	; 0x90
    60be:	6878      	ldr	r0, [r7, #4]
    60c0:	f7fe febf 	bl	4e42 <apply_to_single_or_list>
}
    60c4:	bf00      	nop
    60c6:	3708      	adds	r7, #8
    60c8:	46bd      	mov	sp, r7
    60ca:	bd80      	pop	{r7, pc}
    60cc:	00005e21 	.word	0x00005e21

000060d0 <compile_break_stmt>:

STATIC void compile_break_stmt(compiler_t *comp, mp_parse_node_struct_t *pns) {
    60d0:	b580      	push	{r7, lr}
    60d2:	b082      	sub	sp, #8
    60d4:	af00      	add	r7, sp, #0
    60d6:	6078      	str	r0, [r7, #4]
    60d8:	6039      	str	r1, [r7, #0]
    if (comp->break_label == INVALID_LABEL) {
    60da:	687b      	ldr	r3, [r7, #4]
    60dc:	8b1b      	ldrh	r3, [r3, #24]
    60de:	f64f 72ff 	movw	r2, #65535	; 0xffff
    60e2:	4293      	cmp	r3, r2
    60e4:	d105      	bne.n	60f2 <compile_break_stmt+0x22>
        compile_syntax_error(comp, (mp_parse_node_t)pns, "'break' outside loop");
    60e6:	683b      	ldr	r3, [r7, #0]
    60e8:	4a11      	ldr	r2, [pc, #68]	; (6130 <compile_break_stmt+0x60>)
    60ea:	4619      	mov	r1, r3
    60ec:	6878      	ldr	r0, [r7, #4]
    60ee:	f7fe fe12 	bl	4d16 <compile_syntax_error>
    }
    assert(comp->cur_except_level >= comp->break_continue_except_level);
    60f2:	687b      	ldr	r3, [r7, #4]
    60f4:	8b9a      	ldrh	r2, [r3, #28]
    60f6:	687b      	ldr	r3, [r7, #4]
    60f8:	8bdb      	ldrh	r3, [r3, #30]
    60fa:	429a      	cmp	r2, r3
    60fc:	d206      	bcs.n	610c <compile_break_stmt+0x3c>
    60fe:	4b0d      	ldr	r3, [pc, #52]	; (6134 <compile_break_stmt+0x64>)
    6100:	4a0d      	ldr	r2, [pc, #52]	; (6138 <compile_break_stmt+0x68>)
    6102:	f44f 716e 	mov.w	r1, #952	; 0x3b8
    6106:	480d      	ldr	r0, [pc, #52]	; (613c <compile_break_stmt+0x6c>)
    6108:	f015 f858 	bl	1b1bc <__assert_func>
    EMIT_ARG(unwind_jump, comp->break_label, comp->cur_except_level - comp->break_continue_except_level);
    610c:	687b      	ldr	r3, [r7, #4]
    610e:	6a98      	ldr	r0, [r3, #40]	; 0x28
    6110:	687b      	ldr	r3, [r7, #4]
    6112:	8b1b      	ldrh	r3, [r3, #24]
    6114:	4619      	mov	r1, r3
    6116:	687b      	ldr	r3, [r7, #4]
    6118:	8b9b      	ldrh	r3, [r3, #28]
    611a:	461a      	mov	r2, r3
    611c:	687b      	ldr	r3, [r7, #4]
    611e:	8bdb      	ldrh	r3, [r3, #30]
    6120:	1ad3      	subs	r3, r2, r3
    6122:	461a      	mov	r2, r3
    6124:	f004 fb7a 	bl	a81c <mp_emit_bc_unwind_jump>
}
    6128:	bf00      	nop
    612a:	3708      	adds	r7, #8
    612c:	46bd      	mov	sp, r7
    612e:	bd80      	pop	{r7, pc}
    6130:	0001e35c 	.word	0x0001e35c
    6134:	0001e374 	.word	0x0001e374
    6138:	0001eca4 	.word	0x0001eca4
    613c:	0001e084 	.word	0x0001e084

00006140 <compile_continue_stmt>:

STATIC void compile_continue_stmt(compiler_t *comp, mp_parse_node_struct_t *pns) {
    6140:	b580      	push	{r7, lr}
    6142:	b082      	sub	sp, #8
    6144:	af00      	add	r7, sp, #0
    6146:	6078      	str	r0, [r7, #4]
    6148:	6039      	str	r1, [r7, #0]
    if (comp->continue_label == INVALID_LABEL) {
    614a:	687b      	ldr	r3, [r7, #4]
    614c:	8b5b      	ldrh	r3, [r3, #26]
    614e:	f64f 72ff 	movw	r2, #65535	; 0xffff
    6152:	4293      	cmp	r3, r2
    6154:	d105      	bne.n	6162 <compile_continue_stmt+0x22>
        compile_syntax_error(comp, (mp_parse_node_t)pns, "'continue' outside loop");
    6156:	683b      	ldr	r3, [r7, #0]
    6158:	4a11      	ldr	r2, [pc, #68]	; (61a0 <compile_continue_stmt+0x60>)
    615a:	4619      	mov	r1, r3
    615c:	6878      	ldr	r0, [r7, #4]
    615e:	f7fe fdda 	bl	4d16 <compile_syntax_error>
    }
    assert(comp->cur_except_level >= comp->break_continue_except_level);
    6162:	687b      	ldr	r3, [r7, #4]
    6164:	8b9a      	ldrh	r2, [r3, #28]
    6166:	687b      	ldr	r3, [r7, #4]
    6168:	8bdb      	ldrh	r3, [r3, #30]
    616a:	429a      	cmp	r2, r3
    616c:	d206      	bcs.n	617c <compile_continue_stmt+0x3c>
    616e:	4b0d      	ldr	r3, [pc, #52]	; (61a4 <compile_continue_stmt+0x64>)
    6170:	4a0d      	ldr	r2, [pc, #52]	; (61a8 <compile_continue_stmt+0x68>)
    6172:	f44f 7170 	mov.w	r1, #960	; 0x3c0
    6176:	480d      	ldr	r0, [pc, #52]	; (61ac <compile_continue_stmt+0x6c>)
    6178:	f015 f820 	bl	1b1bc <__assert_func>
    EMIT_ARG(unwind_jump, comp->continue_label, comp->cur_except_level - comp->break_continue_except_level);
    617c:	687b      	ldr	r3, [r7, #4]
    617e:	6a98      	ldr	r0, [r3, #40]	; 0x28
    6180:	687b      	ldr	r3, [r7, #4]
    6182:	8b5b      	ldrh	r3, [r3, #26]
    6184:	4619      	mov	r1, r3
    6186:	687b      	ldr	r3, [r7, #4]
    6188:	8b9b      	ldrh	r3, [r3, #28]
    618a:	461a      	mov	r2, r3
    618c:	687b      	ldr	r3, [r7, #4]
    618e:	8bdb      	ldrh	r3, [r3, #30]
    6190:	1ad3      	subs	r3, r2, r3
    6192:	461a      	mov	r2, r3
    6194:	f004 fb42 	bl	a81c <mp_emit_bc_unwind_jump>
}
    6198:	bf00      	nop
    619a:	3708      	adds	r7, #8
    619c:	46bd      	mov	sp, r7
    619e:	bd80      	pop	{r7, pc}
    61a0:	0001e3b0 	.word	0x0001e3b0
    61a4:	0001e374 	.word	0x0001e374
    61a8:	0001ecb8 	.word	0x0001ecb8
    61ac:	0001e084 	.word	0x0001e084

000061b0 <compile_return_stmt>:

STATIC void compile_return_stmt(compiler_t *comp, mp_parse_node_struct_t *pns) {
    61b0:	b580      	push	{r7, lr}
    61b2:	b082      	sub	sp, #8
    61b4:	af00      	add	r7, sp, #0
    61b6:	6078      	str	r0, [r7, #4]
    61b8:	6039      	str	r1, [r7, #0]
    if (comp->scope_cur->kind != SCOPE_FUNCTION) {
    61ba:	687b      	ldr	r3, [r7, #4]
    61bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    61be:	681b      	ldr	r3, [r3, #0]
    61c0:	2b07      	cmp	r3, #7
    61c2:	d006      	beq.n	61d2 <compile_return_stmt+0x22>
        compile_syntax_error(comp, (mp_parse_node_t)pns, "'return' outside function");
    61c4:	683b      	ldr	r3, [r7, #0]
    61c6:	4a0f      	ldr	r2, [pc, #60]	; (6204 <compile_return_stmt+0x54>)
    61c8:	4619      	mov	r1, r3
    61ca:	6878      	ldr	r0, [r7, #4]
    61cc:	f7fe fda3 	bl	4d16 <compile_syntax_error>
        return;
    61d0:	e015      	b.n	61fe <compile_return_stmt+0x4e>
    }
    if (MP_PARSE_NODE_IS_NULL(pns->nodes[0])) {
    61d2:	683b      	ldr	r3, [r7, #0]
    61d4:	689b      	ldr	r3, [r3, #8]
    61d6:	2b00      	cmp	r3, #0
    61d8:	d106      	bne.n	61e8 <compile_return_stmt+0x38>
        // no argument to 'return', so return None
        EMIT_ARG(load_const_tok, MP_TOKEN_KW_NONE);
    61da:	687b      	ldr	r3, [r7, #4]
    61dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    61de:	210e      	movs	r1, #14
    61e0:	4618      	mov	r0, r3
    61e2:	f004 f8c1 	bl	a368 <mp_emit_bc_load_const_tok>
    61e6:	e005      	b.n	61f4 <compile_return_stmt+0x44>
        compile_node(comp, pns_test_if_expr->nodes[0]); // success value
        EMIT(return_value);
        EMIT_ARG(label_assign, l_fail);
        compile_node(comp, pns_test_if_else->nodes[1]); // failure value
    } else {
        compile_node(comp, pns->nodes[0]);
    61e8:	683b      	ldr	r3, [r7, #0]
    61ea:	689b      	ldr	r3, [r3, #8]
    61ec:	4619      	mov	r1, r3
    61ee:	6878      	ldr	r0, [r7, #4]
    61f0:	f002 fbff 	bl	89f2 <compile_node>
    }
    EMIT(return_value);
    61f4:	687b      	ldr	r3, [r7, #4]
    61f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    61f8:	4618      	mov	r0, r3
    61fa:	f004 fdac 	bl	ad56 <mp_emit_bc_return_value>
}
    61fe:	3708      	adds	r7, #8
    6200:	46bd      	mov	sp, r7
    6202:	bd80      	pop	{r7, pc}
    6204:	0001e3c8 	.word	0x0001e3c8

00006208 <compile_yield_stmt>:

STATIC void compile_yield_stmt(compiler_t *comp, mp_parse_node_struct_t *pns) {
    6208:	b580      	push	{r7, lr}
    620a:	b082      	sub	sp, #8
    620c:	af00      	add	r7, sp, #0
    620e:	6078      	str	r0, [r7, #4]
    6210:	6039      	str	r1, [r7, #0]
    compile_node(comp, pns->nodes[0]);
    6212:	683b      	ldr	r3, [r7, #0]
    6214:	689b      	ldr	r3, [r3, #8]
    6216:	4619      	mov	r1, r3
    6218:	6878      	ldr	r0, [r7, #4]
    621a:	f002 fbea 	bl	89f2 <compile_node>
    EMIT(pop_top);
    621e:	687b      	ldr	r3, [r7, #4]
    6220:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6222:	4618      	mov	r0, r3
    6224:	f004 fa7b 	bl	a71e <mp_emit_bc_pop_top>
}
    6228:	bf00      	nop
    622a:	3708      	adds	r7, #8
    622c:	46bd      	mov	sp, r7
    622e:	bd80      	pop	{r7, pc}

00006230 <compile_raise_stmt>:

STATIC void compile_raise_stmt(compiler_t *comp, mp_parse_node_struct_t *pns) {
    6230:	b580      	push	{r7, lr}
    6232:	b082      	sub	sp, #8
    6234:	af00      	add	r7, sp, #0
    6236:	6078      	str	r0, [r7, #4]
    6238:	6039      	str	r1, [r7, #0]
    if (MP_PARSE_NODE_IS_NULL(pns->nodes[0])) {
    623a:	683b      	ldr	r3, [r7, #0]
    623c:	689b      	ldr	r3, [r3, #8]
    623e:	2b00      	cmp	r3, #0
    6240:	d106      	bne.n	6250 <compile_raise_stmt+0x20>
        // raise
        EMIT_ARG(raise_varargs, 0);
    6242:	687b      	ldr	r3, [r7, #4]
    6244:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6246:	2100      	movs	r1, #0
    6248:	4618      	mov	r0, r3
    624a:	f004 fd98 	bl	ad7e <mp_emit_bc_raise_varargs>
    } else {
        // raise x
        compile_node(comp, pns->nodes[0]);
        EMIT_ARG(raise_varargs, 1);
    }
}
    624e:	e031      	b.n	62b4 <compile_raise_stmt+0x84>
    } else if (MP_PARSE_NODE_IS_STRUCT_KIND(pns->nodes[0], PN_raise_stmt_arg)) {
    6250:	683b      	ldr	r3, [r7, #0]
    6252:	689b      	ldr	r3, [r3, #8]
    6254:	2b00      	cmp	r3, #0
    6256:	d021      	beq.n	629c <compile_raise_stmt+0x6c>
    6258:	683b      	ldr	r3, [r7, #0]
    625a:	689b      	ldr	r3, [r3, #8]
    625c:	f003 0303 	and.w	r3, r3, #3
    6260:	2b00      	cmp	r3, #0
    6262:	d11b      	bne.n	629c <compile_raise_stmt+0x6c>
    6264:	683b      	ldr	r3, [r7, #0]
    6266:	689b      	ldr	r3, [r3, #8]
    6268:	685b      	ldr	r3, [r3, #4]
    626a:	b2db      	uxtb	r3, r3
    626c:	2b58      	cmp	r3, #88	; 0x58
    626e:	d115      	bne.n	629c <compile_raise_stmt+0x6c>
        pns = (mp_parse_node_struct_t*)pns->nodes[0];
    6270:	683b      	ldr	r3, [r7, #0]
    6272:	689b      	ldr	r3, [r3, #8]
    6274:	603b      	str	r3, [r7, #0]
        compile_node(comp, pns->nodes[0]);
    6276:	683b      	ldr	r3, [r7, #0]
    6278:	689b      	ldr	r3, [r3, #8]
    627a:	4619      	mov	r1, r3
    627c:	6878      	ldr	r0, [r7, #4]
    627e:	f002 fbb8 	bl	89f2 <compile_node>
        compile_node(comp, pns->nodes[1]);
    6282:	683b      	ldr	r3, [r7, #0]
    6284:	68db      	ldr	r3, [r3, #12]
    6286:	4619      	mov	r1, r3
    6288:	6878      	ldr	r0, [r7, #4]
    628a:	f002 fbb2 	bl	89f2 <compile_node>
        EMIT_ARG(raise_varargs, 2);
    628e:	687b      	ldr	r3, [r7, #4]
    6290:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6292:	2102      	movs	r1, #2
    6294:	4618      	mov	r0, r3
    6296:	f004 fd72 	bl	ad7e <mp_emit_bc_raise_varargs>
}
    629a:	e00b      	b.n	62b4 <compile_raise_stmt+0x84>
        compile_node(comp, pns->nodes[0]);
    629c:	683b      	ldr	r3, [r7, #0]
    629e:	689b      	ldr	r3, [r3, #8]
    62a0:	4619      	mov	r1, r3
    62a2:	6878      	ldr	r0, [r7, #4]
    62a4:	f002 fba5 	bl	89f2 <compile_node>
        EMIT_ARG(raise_varargs, 1);
    62a8:	687b      	ldr	r3, [r7, #4]
    62aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    62ac:	2101      	movs	r1, #1
    62ae:	4618      	mov	r0, r3
    62b0:	f004 fd65 	bl	ad7e <mp_emit_bc_raise_varargs>
}
    62b4:	bf00      	nop
    62b6:	3708      	adds	r7, #8
    62b8:	46bd      	mov	sp, r7
    62ba:	bd80      	pop	{r7, pc}

000062bc <do_import_name>:

// q_base holds the base of the name
// eg   a -> q_base=a
//      a.b.c -> q_base=a
STATIC void do_import_name(compiler_t *comp, mp_parse_node_t pn, qstr *q_base) {
    62bc:	b580      	push	{r7, lr}
    62be:	b092      	sub	sp, #72	; 0x48
    62c0:	af00      	add	r7, sp, #0
    62c2:	60f8      	str	r0, [r7, #12]
    62c4:	60b9      	str	r1, [r7, #8]
    62c6:	607a      	str	r2, [r7, #4]
    bool is_as = false;
    62c8:	2300      	movs	r3, #0
    62ca:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if (MP_PARSE_NODE_IS_STRUCT_KIND(pn, PN_dotted_as_name)) {
    62ce:	68bb      	ldr	r3, [r7, #8]
    62d0:	2b00      	cmp	r3, #0
    62d2:	d016      	beq.n	6302 <do_import_name+0x46>
    62d4:	68bb      	ldr	r3, [r7, #8]
    62d6:	f003 0303 	and.w	r3, r3, #3
    62da:	2b00      	cmp	r3, #0
    62dc:	d111      	bne.n	6302 <do_import_name+0x46>
    62de:	68bb      	ldr	r3, [r7, #8]
    62e0:	685b      	ldr	r3, [r3, #4]
    62e2:	b2db      	uxtb	r3, r3
    62e4:	2b62      	cmp	r3, #98	; 0x62
    62e6:	d10c      	bne.n	6302 <do_import_name+0x46>
        mp_parse_node_struct_t *pns = (mp_parse_node_struct_t*)pn;
    62e8:	68bb      	ldr	r3, [r7, #8]
    62ea:	62fb      	str	r3, [r7, #44]	; 0x2c
        // a name of the form x as y; unwrap it
        *q_base = MP_PARSE_NODE_LEAF_ARG(pns->nodes[1]);
    62ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    62ee:	68db      	ldr	r3, [r3, #12]
    62f0:	091a      	lsrs	r2, r3, #4
    62f2:	687b      	ldr	r3, [r7, #4]
    62f4:	601a      	str	r2, [r3, #0]
        pn = pns->nodes[0];
    62f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    62f8:	689b      	ldr	r3, [r3, #8]
    62fa:	60bb      	str	r3, [r7, #8]
        is_as = true;
    62fc:	2301      	movs	r3, #1
    62fe:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    if (MP_PARSE_NODE_IS_NULL(pn)) {
    6302:	68bb      	ldr	r3, [r7, #8]
    6304:	2b00      	cmp	r3, #0
    6306:	d10a      	bne.n	631e <do_import_name+0x62>
        // empty name (eg, from . import x)
        *q_base = MP_QSTR_;
    6308:	687b      	ldr	r3, [r7, #4]
    630a:	2201      	movs	r2, #1
    630c:	601a      	str	r2, [r3, #0]
        EMIT_ARG(import, MP_QSTR_, MP_EMIT_IMPORT_NAME); // import the empty string
    630e:	68fb      	ldr	r3, [r7, #12]
    6310:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6312:	2200      	movs	r2, #0
    6314:	2101      	movs	r1, #1
    6316:	4618      	mov	r0, r3
    6318:	f003 fffe 	bl	a318 <mp_emit_bc_import>
                    EMIT_ARG(attr, MP_PARSE_NODE_LEAF_ARG(pns->nodes[i]), MP_EMIT_ATTR_LOAD);
                }
            }
        }
    }
}
    631c:	e0ba      	b.n	6494 <do_import_name+0x1d8>
    } else if (MP_PARSE_NODE_IS_ID(pn)) {
    631e:	68bb      	ldr	r3, [r7, #8]
    6320:	f003 030f 	and.w	r3, r3, #15
    6324:	2b02      	cmp	r3, #2
    6326:	d114      	bne.n	6352 <do_import_name+0x96>
        qstr q_full = MP_PARSE_NODE_LEAF_ARG(pn);
    6328:	68bb      	ldr	r3, [r7, #8]
    632a:	091b      	lsrs	r3, r3, #4
    632c:	62bb      	str	r3, [r7, #40]	; 0x28
        if (!is_as) {
    632e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
    6332:	f083 0301 	eor.w	r3, r3, #1
    6336:	b2db      	uxtb	r3, r3
    6338:	2b00      	cmp	r3, #0
    633a:	d002      	beq.n	6342 <do_import_name+0x86>
            *q_base = q_full;
    633c:	687b      	ldr	r3, [r7, #4]
    633e:	6aba      	ldr	r2, [r7, #40]	; 0x28
    6340:	601a      	str	r2, [r3, #0]
        EMIT_ARG(import, q_full, MP_EMIT_IMPORT_NAME);
    6342:	68fb      	ldr	r3, [r7, #12]
    6344:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6346:	2200      	movs	r2, #0
    6348:	6ab9      	ldr	r1, [r7, #40]	; 0x28
    634a:	4618      	mov	r0, r3
    634c:	f003 ffe4 	bl	a318 <mp_emit_bc_import>
}
    6350:	e0a0      	b.n	6494 <do_import_name+0x1d8>
        assert(MP_PARSE_NODE_IS_STRUCT_KIND(pn, PN_dotted_name)); // should be
    6352:	68bb      	ldr	r3, [r7, #8]
    6354:	2b00      	cmp	r3, #0
    6356:	d009      	beq.n	636c <do_import_name+0xb0>
    6358:	68bb      	ldr	r3, [r7, #8]
    635a:	f003 0303 	and.w	r3, r3, #3
    635e:	2b00      	cmp	r3, #0
    6360:	d104      	bne.n	636c <do_import_name+0xb0>
    6362:	68bb      	ldr	r3, [r7, #8]
    6364:	685b      	ldr	r3, [r3, #4]
    6366:	b2db      	uxtb	r3, r3
    6368:	2b66      	cmp	r3, #102	; 0x66
    636a:	d006      	beq.n	637a <do_import_name+0xbe>
    636c:	4b4b      	ldr	r3, [pc, #300]	; (649c <do_import_name+0x1e0>)
    636e:	4a4c      	ldr	r2, [pc, #304]	; (64a0 <do_import_name+0x1e4>)
    6370:	f240 410c 	movw	r1, #1036	; 0x40c
    6374:	484b      	ldr	r0, [pc, #300]	; (64a4 <do_import_name+0x1e8>)
    6376:	f014 ff21 	bl	1b1bc <__assert_func>
        mp_parse_node_struct_t *pns = (mp_parse_node_struct_t*)pn;
    637a:	68bb      	ldr	r3, [r7, #8]
    637c:	627b      	str	r3, [r7, #36]	; 0x24
            if (!is_as) {
    637e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
    6382:	f083 0301 	eor.w	r3, r3, #1
    6386:	b2db      	uxtb	r3, r3
    6388:	2b00      	cmp	r3, #0
    638a:	d004      	beq.n	6396 <do_import_name+0xda>
                *q_base = MP_PARSE_NODE_LEAF_ARG(pns->nodes[0]);
    638c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    638e:	689b      	ldr	r3, [r3, #8]
    6390:	091a      	lsrs	r2, r3, #4
    6392:	687b      	ldr	r3, [r7, #4]
    6394:	601a      	str	r2, [r3, #0]
            int n = MP_PARSE_NODE_STRUCT_NUM_NODES(pns);
    6396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    6398:	685b      	ldr	r3, [r3, #4]
    639a:	0a1b      	lsrs	r3, r3, #8
    639c:	623b      	str	r3, [r7, #32]
            int len = n - 1;
    639e:	6a3b      	ldr	r3, [r7, #32]
    63a0:	3b01      	subs	r3, #1
    63a2:	643b      	str	r3, [r7, #64]	; 0x40
            for (int i = 0; i < n; i++) {
    63a4:	2300      	movs	r3, #0
    63a6:	63fb      	str	r3, [r7, #60]	; 0x3c
    63a8:	e00f      	b.n	63ca <do_import_name+0x10e>
                len += qstr_len(MP_PARSE_NODE_LEAF_ARG(pns->nodes[i]));
    63aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    63ac:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    63ae:	3202      	adds	r2, #2
    63b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    63b4:	091b      	lsrs	r3, r3, #4
    63b6:	4618      	mov	r0, r3
    63b8:	f7fa fefd 	bl	11b6 <qstr_len>
    63bc:	4602      	mov	r2, r0
    63be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    63c0:	4413      	add	r3, r2
    63c2:	643b      	str	r3, [r7, #64]	; 0x40
            for (int i = 0; i < n; i++) {
    63c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    63c6:	3301      	adds	r3, #1
    63c8:	63fb      	str	r3, [r7, #60]	; 0x3c
    63ca:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    63cc:	6a3b      	ldr	r3, [r7, #32]
    63ce:	429a      	cmp	r2, r3
    63d0:	dbeb      	blt.n	63aa <do_import_name+0xee>
            char *q_ptr = mp_local_alloc(len);
    63d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    63d4:	3307      	adds	r3, #7
    63d6:	3307      	adds	r3, #7
    63d8:	08db      	lsrs	r3, r3, #3
    63da:	00db      	lsls	r3, r3, #3
    63dc:	ebad 0d03 	sub.w	sp, sp, r3
    63e0:	466b      	mov	r3, sp
    63e2:	3307      	adds	r3, #7
    63e4:	08db      	lsrs	r3, r3, #3
    63e6:	00db      	lsls	r3, r3, #3
    63e8:	61fb      	str	r3, [r7, #28]
            char *str_dest = q_ptr;
    63ea:	69fb      	ldr	r3, [r7, #28]
    63ec:	63bb      	str	r3, [r7, #56]	; 0x38
            for (int i = 0; i < n; i++) {
    63ee:	2300      	movs	r3, #0
    63f0:	637b      	str	r3, [r7, #52]	; 0x34
    63f2:	e021      	b.n	6438 <do_import_name+0x17c>
                if (i > 0) {
    63f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    63f6:	2b00      	cmp	r3, #0
    63f8:	dd04      	ble.n	6404 <do_import_name+0x148>
                    *str_dest++ = '.';
    63fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    63fc:	1c5a      	adds	r2, r3, #1
    63fe:	63ba      	str	r2, [r7, #56]	; 0x38
    6400:	222e      	movs	r2, #46	; 0x2e
    6402:	701a      	strb	r2, [r3, #0]
                const byte *str_src = qstr_data(MP_PARSE_NODE_LEAF_ARG(pns->nodes[i]), &str_src_len);
    6404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    6406:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    6408:	3202      	adds	r2, #2
    640a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    640e:	091b      	lsrs	r3, r3, #4
    6410:	f107 0210 	add.w	r2, r7, #16
    6414:	4611      	mov	r1, r2
    6416:	4618      	mov	r0, r3
    6418:	f7fa feea 	bl	11f0 <qstr_data>
    641c:	61b8      	str	r0, [r7, #24]
                memcpy(str_dest, str_src, str_src_len);
    641e:	693b      	ldr	r3, [r7, #16]
    6420:	461a      	mov	r2, r3
    6422:	69b9      	ldr	r1, [r7, #24]
    6424:	6bb8      	ldr	r0, [r7, #56]	; 0x38
    6426:	f015 facd 	bl	1b9c4 <memcpy>
                str_dest += str_src_len;
    642a:	693b      	ldr	r3, [r7, #16]
    642c:	6bba      	ldr	r2, [r7, #56]	; 0x38
    642e:	4413      	add	r3, r2
    6430:	63bb      	str	r3, [r7, #56]	; 0x38
            for (int i = 0; i < n; i++) {
    6432:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    6434:	3301      	adds	r3, #1
    6436:	637b      	str	r3, [r7, #52]	; 0x34
    6438:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    643a:	6a3b      	ldr	r3, [r7, #32]
    643c:	429a      	cmp	r2, r3
    643e:	dbd9      	blt.n	63f4 <do_import_name+0x138>
            qstr q_full = qstr_from_strn(q_ptr, len);
    6440:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    6442:	4619      	mov	r1, r3
    6444:	69f8      	ldr	r0, [r7, #28]
    6446:	f7fa fdec 	bl	1022 <qstr_from_strn>
    644a:	6178      	str	r0, [r7, #20]
            mp_local_free(q_ptr);
    644c:	69f8      	ldr	r0, [r7, #28]
    644e:	f7fe fc3d 	bl	4ccc <mp_local_free>
            EMIT_ARG(import, q_full, MP_EMIT_IMPORT_NAME);
    6452:	68fb      	ldr	r3, [r7, #12]
    6454:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6456:	2200      	movs	r2, #0
    6458:	6979      	ldr	r1, [r7, #20]
    645a:	4618      	mov	r0, r3
    645c:	f003 ff5c 	bl	a318 <mp_emit_bc_import>
            if (is_as) {
    6460:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
    6464:	2b00      	cmp	r3, #0
    6466:	d015      	beq.n	6494 <do_import_name+0x1d8>
                for (int i = 1; i < n; i++) {
    6468:	2301      	movs	r3, #1
    646a:	633b      	str	r3, [r7, #48]	; 0x30
    646c:	e00e      	b.n	648c <do_import_name+0x1d0>
                    EMIT_ARG(attr, MP_PARSE_NODE_LEAF_ARG(pns->nodes[i]), MP_EMIT_ATTR_LOAD);
    646e:	68fb      	ldr	r3, [r7, #12]
    6470:	6a98      	ldr	r0, [r3, #40]	; 0x28
    6472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    6474:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    6476:	3202      	adds	r2, #2
    6478:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    647c:	091b      	lsrs	r3, r3, #4
    647e:	2200      	movs	r2, #0
    6480:	4619      	mov	r1, r3
    6482:	f004 f897 	bl	a5b4 <mp_emit_bc_attr>
                for (int i = 1; i < n; i++) {
    6486:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    6488:	3301      	adds	r3, #1
    648a:	633b      	str	r3, [r7, #48]	; 0x30
    648c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    648e:	6a3b      	ldr	r3, [r7, #32]
    6490:	429a      	cmp	r2, r3
    6492:	dbec      	blt.n	646e <do_import_name+0x1b2>
}
    6494:	bf00      	nop
    6496:	3748      	adds	r7, #72	; 0x48
    6498:	46bd      	mov	sp, r7
    649a:	bd80      	pop	{r7, pc}
    649c:	0001e3e4 	.word	0x0001e3e4
    64a0:	0001ecd0 	.word	0x0001ecd0
    64a4:	0001e084 	.word	0x0001e084

000064a8 <compile_dotted_as_name>:

STATIC void compile_dotted_as_name(compiler_t *comp, mp_parse_node_t pn) {
    64a8:	b580      	push	{r7, lr}
    64aa:	b084      	sub	sp, #16
    64ac:	af00      	add	r7, sp, #0
    64ae:	6078      	str	r0, [r7, #4]
    64b0:	6039      	str	r1, [r7, #0]
    EMIT_ARG(load_const_small_int, 0); // level 0 import
    64b2:	687b      	ldr	r3, [r7, #4]
    64b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    64b6:	2100      	movs	r1, #0
    64b8:	4618      	mov	r0, r3
    64ba:	f003 ff91 	bl	a3e0 <mp_emit_bc_load_const_small_int>
    EMIT_ARG(load_const_tok, MP_TOKEN_KW_NONE); // not importing from anything
    64be:	687b      	ldr	r3, [r7, #4]
    64c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    64c2:	210e      	movs	r1, #14
    64c4:	4618      	mov	r0, r3
    64c6:	f003 ff4f 	bl	a368 <mp_emit_bc_load_const_tok>
    qstr q_base;
    do_import_name(comp, pn, &q_base);
    64ca:	f107 030c 	add.w	r3, r7, #12
    64ce:	461a      	mov	r2, r3
    64d0:	6839      	ldr	r1, [r7, #0]
    64d2:	6878      	ldr	r0, [r7, #4]
    64d4:	f7ff fef2 	bl	62bc <do_import_name>
    compile_store_id(comp, q_base);
    64d8:	68fb      	ldr	r3, [r7, #12]
    64da:	4619      	mov	r1, r3
    64dc:	6878      	ldr	r0, [r7, #4]
    64de:	f7fe fd37 	bl	4f50 <compile_store_id>
}
    64e2:	bf00      	nop
    64e4:	3710      	adds	r7, #16
    64e6:	46bd      	mov	sp, r7
    64e8:	bd80      	pop	{r7, pc}

000064ea <compile_import_name>:

STATIC void compile_import_name(compiler_t *comp, mp_parse_node_struct_t *pns) {
    64ea:	b580      	push	{r7, lr}
    64ec:	b082      	sub	sp, #8
    64ee:	af00      	add	r7, sp, #0
    64f0:	6078      	str	r0, [r7, #4]
    64f2:	6039      	str	r1, [r7, #0]
    apply_to_single_or_list(comp, pns->nodes[0], PN_dotted_as_names, compile_dotted_as_name);
    64f4:	683b      	ldr	r3, [r7, #0]
    64f6:	6899      	ldr	r1, [r3, #8]
    64f8:	4b04      	ldr	r3, [pc, #16]	; (650c <compile_import_name+0x22>)
    64fa:	2265      	movs	r2, #101	; 0x65
    64fc:	6878      	ldr	r0, [r7, #4]
    64fe:	f7fe fca0 	bl	4e42 <apply_to_single_or_list>
}
    6502:	bf00      	nop
    6504:	3708      	adds	r7, #8
    6506:	46bd      	mov	sp, r7
    6508:	bd80      	pop	{r7, pc}
    650a:	bf00      	nop
    650c:	000064a9 	.word	0x000064a9

00006510 <compile_import_from>:

STATIC void compile_import_from(compiler_t *comp, mp_parse_node_struct_t *pns) {
    6510:	b580      	push	{r7, lr}
    6512:	b094      	sub	sp, #80	; 0x50
    6514:	af00      	add	r7, sp, #0
    6516:	6078      	str	r0, [r7, #4]
    6518:	6039      	str	r1, [r7, #0]
    mp_parse_node_t pn_import_source = pns->nodes[0];
    651a:	683b      	ldr	r3, [r7, #0]
    651c:	689b      	ldr	r3, [r3, #8]
    651e:	64fb      	str	r3, [r7, #76]	; 0x4c

    // extract the preceding .'s (if any) for a relative import, to compute the import level
    uint import_level = 0;
    6520:	2300      	movs	r3, #0
    6522:	64bb      	str	r3, [r7, #72]	; 0x48
    do {
        mp_parse_node_t pn_rel;
        if (MP_PARSE_NODE_IS_TOKEN(pn_import_source) || MP_PARSE_NODE_IS_STRUCT_KIND(pn_import_source, PN_one_or_more_period_or_ellipsis)) {
    6524:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    6526:	f003 030f 	and.w	r3, r3, #15
    652a:	2b0e      	cmp	r3, #14
    652c:	d00c      	beq.n	6548 <compile_import_from+0x38>
    652e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    6530:	2b00      	cmp	r3, #0
    6532:	d00e      	beq.n	6552 <compile_import_from+0x42>
    6534:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    6536:	f003 0303 	and.w	r3, r3, #3
    653a:	2b00      	cmp	r3, #0
    653c:	d109      	bne.n	6552 <compile_import_from+0x42>
    653e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    6540:	685b      	ldr	r3, [r3, #4]
    6542:	b2db      	uxtb	r3, r3
    6544:	2b5f      	cmp	r3, #95	; 0x5f
    6546:	d104      	bne.n	6552 <compile_import_from+0x42>
            // This covers relative imports with dots only like "from .. import"
            pn_rel = pn_import_source;
    6548:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    654a:	61fb      	str	r3, [r7, #28]
            pn_import_source = MP_PARSE_NODE_NULL;
    654c:	2300      	movs	r3, #0
    654e:	64fb      	str	r3, [r7, #76]	; 0x4c
    6550:	e01e      	b.n	6590 <compile_import_from+0x80>
        } else if (MP_PARSE_NODE_IS_STRUCT_KIND(pn_import_source, PN_import_from_2b)) {
    6552:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    6554:	2b00      	cmp	r3, #0
    6556:	d03e      	beq.n	65d6 <compile_import_from+0xc6>
    6558:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    655a:	f003 0303 	and.w	r3, r3, #3
    655e:	2b00      	cmp	r3, #0
    6560:	d139      	bne.n	65d6 <compile_import_from+0xc6>
    6562:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    6564:	685b      	ldr	r3, [r3, #4]
    6566:	b2db      	uxtb	r3, r3
    6568:	2b5c      	cmp	r3, #92	; 0x5c
    656a:	d134      	bne.n	65d6 <compile_import_from+0xc6>
            // This covers relative imports starting with dot(s) like "from .foo import"
            mp_parse_node_struct_t *pns_2b = (mp_parse_node_struct_t*)pn_import_source;
    656c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    656e:	63bb      	str	r3, [r7, #56]	; 0x38
            pn_rel = pns_2b->nodes[0];
    6570:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    6572:	689b      	ldr	r3, [r3, #8]
    6574:	61fb      	str	r3, [r7, #28]
            pn_import_source = pns_2b->nodes[1];
    6576:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    6578:	68db      	ldr	r3, [r3, #12]
    657a:	64fb      	str	r3, [r7, #76]	; 0x4c
            assert(!MP_PARSE_NODE_IS_NULL(pn_import_source)); // should not be
    657c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    657e:	2b00      	cmp	r3, #0
    6580:	d106      	bne.n	6590 <compile_import_from+0x80>
    6582:	4b7f      	ldr	r3, [pc, #508]	; (6780 <compile_import_from+0x270>)
    6584:	4a7f      	ldr	r2, [pc, #508]	; (6784 <compile_import_from+0x274>)
    6586:	f240 414b 	movw	r1, #1099	; 0x44b
    658a:	487f      	ldr	r0, [pc, #508]	; (6788 <compile_import_from+0x278>)
    658c:	f014 fe16 	bl	1b1bc <__assert_func>
            break;
        }

        // get the list of . and/or ...'s
        mp_parse_node_t *nodes;
        int n = mp_parse_node_extract_list(&pn_rel, PN_one_or_more_period_or_ellipsis, &nodes);
    6590:	f107 0218 	add.w	r2, r7, #24
    6594:	f107 031c 	add.w	r3, r7, #28
    6598:	215f      	movs	r1, #95	; 0x5f
    659a:	4618      	mov	r0, r3
    659c:	f7fd fac4 	bl	3b28 <mp_parse_node_extract_list>
    65a0:	6378      	str	r0, [r7, #52]	; 0x34

        // count the total number of .'s
        for (int i = 0; i < n; i++) {
    65a2:	2300      	movs	r3, #0
    65a4:	647b      	str	r3, [r7, #68]	; 0x44
    65a6:	e012      	b.n	65ce <compile_import_from+0xbe>
            if (MP_PARSE_NODE_IS_TOKEN_KIND(nodes[i], MP_TOKEN_DEL_PERIOD)) {
    65a8:	69ba      	ldr	r2, [r7, #24]
    65aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    65ac:	009b      	lsls	r3, r3, #2
    65ae:	4413      	add	r3, r2
    65b0:	681b      	ldr	r3, [r3, #0]
    65b2:	f240 42ae 	movw	r2, #1198	; 0x4ae
    65b6:	4293      	cmp	r3, r2
    65b8:	d103      	bne.n	65c2 <compile_import_from+0xb2>
                import_level++;
    65ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    65bc:	3301      	adds	r3, #1
    65be:	64bb      	str	r3, [r7, #72]	; 0x48
    65c0:	e002      	b.n	65c8 <compile_import_from+0xb8>
            } else {
                // should be an MP_TOKEN_ELLIPSIS
                import_level += 3;
    65c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    65c4:	3303      	adds	r3, #3
    65c6:	64bb      	str	r3, [r7, #72]	; 0x48
        for (int i = 0; i < n; i++) {
    65c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    65ca:	3301      	adds	r3, #1
    65cc:	647b      	str	r3, [r7, #68]	; 0x44
    65ce:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    65d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    65d2:	429a      	cmp	r2, r3
    65d4:	dbe8      	blt.n	65a8 <compile_import_from+0x98>
            }
        }
    } while (0);

    if (MP_PARSE_NODE_IS_TOKEN_KIND(pns->nodes[1], MP_TOKEN_OP_STAR)) {
    65d6:	683b      	ldr	r3, [r7, #0]
    65d8:	68db      	ldr	r3, [r3, #12]
    65da:	f240 321e 	movw	r2, #798	; 0x31e
    65de:	4293      	cmp	r3, r2
    65e0:	d122      	bne.n	6628 <compile_import_from+0x118>
        EMIT_ARG(load_const_small_int, import_level);
    65e2:	687b      	ldr	r3, [r7, #4]
    65e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    65e6:	6cba      	ldr	r2, [r7, #72]	; 0x48
    65e8:	4611      	mov	r1, r2
    65ea:	4618      	mov	r0, r3
    65ec:	f003 fef8 	bl	a3e0 <mp_emit_bc_load_const_small_int>

        // build the "fromlist" tuple
        EMIT_ARG(load_const_str, MP_QSTR__star_);
    65f0:	687b      	ldr	r3, [r7, #4]
    65f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    65f4:	2126      	movs	r1, #38	; 0x26
    65f6:	4618      	mov	r0, r3
    65f8:	f003 ff14 	bl	a424 <mp_emit_bc_load_const_str>
        EMIT_ARG(build, 1, MP_EMIT_BUILD_TUPLE);
    65fc:	687b      	ldr	r3, [r7, #4]
    65fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6600:	2200      	movs	r2, #0
    6602:	2101      	movs	r1, #1
    6604:	4618      	mov	r0, r3
    6606:	f004 fa46 	bl	aa96 <mp_emit_bc_build>

        // do the import
        qstr dummy_q;
        do_import_name(comp, pn_import_source, &dummy_q);
    660a:	f107 0314 	add.w	r3, r7, #20
    660e:	461a      	mov	r2, r3
    6610:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
    6612:	6878      	ldr	r0, [r7, #4]
    6614:	f7ff fe52 	bl	62bc <do_import_name>
        EMIT_ARG(import, MP_QSTR_NULL, MP_EMIT_IMPORT_STAR);
    6618:	687b      	ldr	r3, [r7, #4]
    661a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    661c:	2202      	movs	r2, #2
    661e:	2100      	movs	r1, #0
    6620:	4618      	mov	r0, r3
    6622:	f003 fe79 	bl	a318 <mp_emit_bc_import>
                compile_store_id(comp, MP_PARSE_NODE_LEAF_ARG(pns3->nodes[1]));
            }
        }
        EMIT(pop_top);
    }
}
    6626:	e0a7      	b.n	6778 <compile_import_from+0x268>
        EMIT_ARG(load_const_small_int, import_level);
    6628:	687b      	ldr	r3, [r7, #4]
    662a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    662c:	6cba      	ldr	r2, [r7, #72]	; 0x48
    662e:	4611      	mov	r1, r2
    6630:	4618      	mov	r0, r3
    6632:	f003 fed5 	bl	a3e0 <mp_emit_bc_load_const_small_int>
        int n = mp_parse_node_extract_list(&pns->nodes[1], PN_import_as_names, &pn_nodes);
    6636:	683b      	ldr	r3, [r7, #0]
    6638:	330c      	adds	r3, #12
    663a:	f107 0210 	add.w	r2, r7, #16
    663e:	2164      	movs	r1, #100	; 0x64
    6640:	4618      	mov	r0, r3
    6642:	f7fd fa71 	bl	3b28 <mp_parse_node_extract_list>
    6646:	6338      	str	r0, [r7, #48]	; 0x30
        for (int i = 0; i < n; i++) {
    6648:	2300      	movs	r3, #0
    664a:	643b      	str	r3, [r7, #64]	; 0x40
    664c:	e032      	b.n	66b4 <compile_import_from+0x1a4>
            assert(MP_PARSE_NODE_IS_STRUCT_KIND(pn_nodes[i], PN_import_as_name));
    664e:	693a      	ldr	r2, [r7, #16]
    6650:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    6652:	009b      	lsls	r3, r3, #2
    6654:	4413      	add	r3, r2
    6656:	681b      	ldr	r3, [r3, #0]
    6658:	2b00      	cmp	r3, #0
    665a:	d011      	beq.n	6680 <compile_import_from+0x170>
    665c:	693a      	ldr	r2, [r7, #16]
    665e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    6660:	009b      	lsls	r3, r3, #2
    6662:	4413      	add	r3, r2
    6664:	681b      	ldr	r3, [r3, #0]
    6666:	f003 0303 	and.w	r3, r3, #3
    666a:	2b00      	cmp	r3, #0
    666c:	d108      	bne.n	6680 <compile_import_from+0x170>
    666e:	693a      	ldr	r2, [r7, #16]
    6670:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    6672:	009b      	lsls	r3, r3, #2
    6674:	4413      	add	r3, r2
    6676:	681b      	ldr	r3, [r3, #0]
    6678:	685b      	ldr	r3, [r3, #4]
    667a:	b2db      	uxtb	r3, r3
    667c:	2b61      	cmp	r3, #97	; 0x61
    667e:	d006      	beq.n	668e <compile_import_from+0x17e>
    6680:	4b42      	ldr	r3, [pc, #264]	; (678c <compile_import_from+0x27c>)
    6682:	4a40      	ldr	r2, [pc, #256]	; (6784 <compile_import_from+0x274>)
    6684:	f240 4173 	movw	r1, #1139	; 0x473
    6688:	483f      	ldr	r0, [pc, #252]	; (6788 <compile_import_from+0x278>)
    668a:	f014 fd97 	bl	1b1bc <__assert_func>
            mp_parse_node_struct_t *pns3 = (mp_parse_node_struct_t*)pn_nodes[i];
    668e:	693a      	ldr	r2, [r7, #16]
    6690:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    6692:	009b      	lsls	r3, r3, #2
    6694:	4413      	add	r3, r2
    6696:	681b      	ldr	r3, [r3, #0]
    6698:	62fb      	str	r3, [r7, #44]	; 0x2c
            qstr id2 = MP_PARSE_NODE_LEAF_ARG(pns3->nodes[0]); // should be id
    669a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    669c:	689b      	ldr	r3, [r3, #8]
    669e:	091b      	lsrs	r3, r3, #4
    66a0:	62bb      	str	r3, [r7, #40]	; 0x28
            EMIT_ARG(load_const_str, id2);
    66a2:	687b      	ldr	r3, [r7, #4]
    66a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    66a6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
    66a8:	4618      	mov	r0, r3
    66aa:	f003 febb 	bl	a424 <mp_emit_bc_load_const_str>
        for (int i = 0; i < n; i++) {
    66ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    66b0:	3301      	adds	r3, #1
    66b2:	643b      	str	r3, [r7, #64]	; 0x40
    66b4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    66b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    66b8:	429a      	cmp	r2, r3
    66ba:	dbc8      	blt.n	664e <compile_import_from+0x13e>
        EMIT_ARG(build, n, MP_EMIT_BUILD_TUPLE);
    66bc:	687b      	ldr	r3, [r7, #4]
    66be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    66c0:	6b39      	ldr	r1, [r7, #48]	; 0x30
    66c2:	2200      	movs	r2, #0
    66c4:	4618      	mov	r0, r3
    66c6:	f004 f9e6 	bl	aa96 <mp_emit_bc_build>
        do_import_name(comp, pn_import_source, &dummy_q);
    66ca:	f107 030c 	add.w	r3, r7, #12
    66ce:	461a      	mov	r2, r3
    66d0:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
    66d2:	6878      	ldr	r0, [r7, #4]
    66d4:	f7ff fdf2 	bl	62bc <do_import_name>
        for (int i = 0; i < n; i++) {
    66d8:	2300      	movs	r3, #0
    66da:	63fb      	str	r3, [r7, #60]	; 0x3c
    66dc:	e043      	b.n	6766 <compile_import_from+0x256>
            assert(MP_PARSE_NODE_IS_STRUCT_KIND(pn_nodes[i], PN_import_as_name));
    66de:	693a      	ldr	r2, [r7, #16]
    66e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    66e2:	009b      	lsls	r3, r3, #2
    66e4:	4413      	add	r3, r2
    66e6:	681b      	ldr	r3, [r3, #0]
    66e8:	2b00      	cmp	r3, #0
    66ea:	d011      	beq.n	6710 <compile_import_from+0x200>
    66ec:	693a      	ldr	r2, [r7, #16]
    66ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    66f0:	009b      	lsls	r3, r3, #2
    66f2:	4413      	add	r3, r2
    66f4:	681b      	ldr	r3, [r3, #0]
    66f6:	f003 0303 	and.w	r3, r3, #3
    66fa:	2b00      	cmp	r3, #0
    66fc:	d108      	bne.n	6710 <compile_import_from+0x200>
    66fe:	693a      	ldr	r2, [r7, #16]
    6700:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    6702:	009b      	lsls	r3, r3, #2
    6704:	4413      	add	r3, r2
    6706:	681b      	ldr	r3, [r3, #0]
    6708:	685b      	ldr	r3, [r3, #4]
    670a:	b2db      	uxtb	r3, r3
    670c:	2b61      	cmp	r3, #97	; 0x61
    670e:	d006      	beq.n	671e <compile_import_from+0x20e>
    6710:	4b1e      	ldr	r3, [pc, #120]	; (678c <compile_import_from+0x27c>)
    6712:	4a1c      	ldr	r2, [pc, #112]	; (6784 <compile_import_from+0x274>)
    6714:	f240 417e 	movw	r1, #1150	; 0x47e
    6718:	481b      	ldr	r0, [pc, #108]	; (6788 <compile_import_from+0x278>)
    671a:	f014 fd4f 	bl	1b1bc <__assert_func>
            mp_parse_node_struct_t *pns3 = (mp_parse_node_struct_t*)pn_nodes[i];
    671e:	693a      	ldr	r2, [r7, #16]
    6720:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    6722:	009b      	lsls	r3, r3, #2
    6724:	4413      	add	r3, r2
    6726:	681b      	ldr	r3, [r3, #0]
    6728:	627b      	str	r3, [r7, #36]	; 0x24
            qstr id2 = MP_PARSE_NODE_LEAF_ARG(pns3->nodes[0]); // should be id
    672a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    672c:	689b      	ldr	r3, [r3, #8]
    672e:	091b      	lsrs	r3, r3, #4
    6730:	623b      	str	r3, [r7, #32]
            EMIT_ARG(import, id2, MP_EMIT_IMPORT_FROM);
    6732:	687b      	ldr	r3, [r7, #4]
    6734:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6736:	2201      	movs	r2, #1
    6738:	6a39      	ldr	r1, [r7, #32]
    673a:	4618      	mov	r0, r3
    673c:	f003 fdec 	bl	a318 <mp_emit_bc_import>
            if (MP_PARSE_NODE_IS_NULL(pns3->nodes[1])) {
    6740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    6742:	68db      	ldr	r3, [r3, #12]
    6744:	2b00      	cmp	r3, #0
    6746:	d104      	bne.n	6752 <compile_import_from+0x242>
                compile_store_id(comp, id2);
    6748:	6a39      	ldr	r1, [r7, #32]
    674a:	6878      	ldr	r0, [r7, #4]
    674c:	f7fe fc00 	bl	4f50 <compile_store_id>
    6750:	e006      	b.n	6760 <compile_import_from+0x250>
                compile_store_id(comp, MP_PARSE_NODE_LEAF_ARG(pns3->nodes[1]));
    6752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    6754:	68db      	ldr	r3, [r3, #12]
    6756:	091b      	lsrs	r3, r3, #4
    6758:	4619      	mov	r1, r3
    675a:	6878      	ldr	r0, [r7, #4]
    675c:	f7fe fbf8 	bl	4f50 <compile_store_id>
        for (int i = 0; i < n; i++) {
    6760:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    6762:	3301      	adds	r3, #1
    6764:	63fb      	str	r3, [r7, #60]	; 0x3c
    6766:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    6768:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    676a:	429a      	cmp	r2, r3
    676c:	dbb7      	blt.n	66de <compile_import_from+0x1ce>
        EMIT(pop_top);
    676e:	687b      	ldr	r3, [r7, #4]
    6770:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6772:	4618      	mov	r0, r3
    6774:	f003 ffd3 	bl	a71e <mp_emit_bc_pop_top>
}
    6778:	bf00      	nop
    677a:	3750      	adds	r7, #80	; 0x50
    677c:	46bd      	mov	sp, r7
    677e:	bd80      	pop	{r7, pc}
    6780:	0001e418 	.word	0x0001e418
    6784:	0001ece0 	.word	0x0001ece0
    6788:	0001e084 	.word	0x0001e084
    678c:	0001e444 	.word	0x0001e444

00006790 <compile_declare_global>:

STATIC void compile_declare_global(compiler_t *comp, mp_parse_node_t pn, qstr qst) {
    6790:	b580      	push	{r7, lr}
    6792:	b086      	sub	sp, #24
    6794:	af00      	add	r7, sp, #0
    6796:	60f8      	str	r0, [r7, #12]
    6798:	60b9      	str	r1, [r7, #8]
    679a:	607a      	str	r2, [r7, #4]
    bool added;
    id_info_t *id_info = scope_find_or_add_id(comp->scope_cur, qst, &added);
    679c:	68fb      	ldr	r3, [r7, #12]
    679e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    67a0:	f107 0213 	add.w	r2, r7, #19
    67a4:	6879      	ldr	r1, [r7, #4]
    67a6:	4618      	mov	r0, r3
    67a8:	f7fe f96e 	bl	4a88 <scope_find_or_add_id>
    67ac:	6178      	str	r0, [r7, #20]
    if (!added && id_info->kind != ID_INFO_KIND_GLOBAL_EXPLICIT) {
    67ae:	7cfb      	ldrb	r3, [r7, #19]
    67b0:	f083 0301 	eor.w	r3, r3, #1
    67b4:	b2db      	uxtb	r3, r3
    67b6:	2b00      	cmp	r3, #0
    67b8:	d009      	beq.n	67ce <compile_declare_global+0x3e>
    67ba:	697b      	ldr	r3, [r7, #20]
    67bc:	781b      	ldrb	r3, [r3, #0]
    67be:	2b01      	cmp	r3, #1
    67c0:	d005      	beq.n	67ce <compile_declare_global+0x3e>
        compile_syntax_error(comp, pn, "identifier redefined as global");
    67c2:	4a0c      	ldr	r2, [pc, #48]	; (67f4 <compile_declare_global+0x64>)
    67c4:	68b9      	ldr	r1, [r7, #8]
    67c6:	68f8      	ldr	r0, [r7, #12]
    67c8:	f7fe faa5 	bl	4d16 <compile_syntax_error>
    67cc:	e00f      	b.n	67ee <compile_declare_global+0x5e>
        return;
    }
    id_info->kind = ID_INFO_KIND_GLOBAL_EXPLICIT;
    67ce:	697b      	ldr	r3, [r7, #20]
    67d0:	2201      	movs	r2, #1
    67d2:	701a      	strb	r2, [r3, #0]

    // if the id exists in the global scope, set its kind to EXPLICIT_GLOBAL
    id_info = scope_find_global(comp->scope_cur, qst);
    67d4:	68fb      	ldr	r3, [r7, #12]
    67d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    67d8:	6879      	ldr	r1, [r7, #4]
    67da:	4618      	mov	r0, r3
    67dc:	f7fe f9c6 	bl	4b6c <scope_find_global>
    67e0:	6178      	str	r0, [r7, #20]
    if (id_info != NULL) {
    67e2:	697b      	ldr	r3, [r7, #20]
    67e4:	2b00      	cmp	r3, #0
    67e6:	d002      	beq.n	67ee <compile_declare_global+0x5e>
        id_info->kind = ID_INFO_KIND_GLOBAL_EXPLICIT;
    67e8:	697b      	ldr	r3, [r7, #20]
    67ea:	2201      	movs	r2, #1
    67ec:	701a      	strb	r2, [r3, #0]
    }
}
    67ee:	3718      	adds	r7, #24
    67f0:	46bd      	mov	sp, r7
    67f2:	bd80      	pop	{r7, pc}
    67f4:	0001e484 	.word	0x0001e484

000067f8 <compile_global_stmt>:

STATIC void compile_global_stmt(compiler_t *comp, mp_parse_node_struct_t *pns) {
    67f8:	b580      	push	{r7, lr}
    67fa:	b086      	sub	sp, #24
    67fc:	af00      	add	r7, sp, #0
    67fe:	6078      	str	r0, [r7, #4]
    6800:	6039      	str	r1, [r7, #0]
    if (comp->pass == MP_PASS_SCOPE) {
    6802:	687b      	ldr	r3, [r7, #4]
    6804:	795b      	ldrb	r3, [r3, #5]
    6806:	2b01      	cmp	r3, #1
    6808:	d11d      	bne.n	6846 <compile_global_stmt+0x4e>
        mp_parse_node_t *nodes;
        int n = mp_parse_node_extract_list(&pns->nodes[0], PN_name_list, &nodes);
    680a:	683b      	ldr	r3, [r7, #0]
    680c:	3308      	adds	r3, #8
    680e:	f107 020c 	add.w	r2, r7, #12
    6812:	2167      	movs	r1, #103	; 0x67
    6814:	4618      	mov	r0, r3
    6816:	f7fd f987 	bl	3b28 <mp_parse_node_extract_list>
    681a:	6138      	str	r0, [r7, #16]
        for (int i = 0; i < n; i++) {
    681c:	2300      	movs	r3, #0
    681e:	617b      	str	r3, [r7, #20]
    6820:	e00d      	b.n	683e <compile_global_stmt+0x46>
            compile_declare_global(comp, (mp_parse_node_t)pns, MP_PARSE_NODE_LEAF_ARG(nodes[i]));
    6822:	6839      	ldr	r1, [r7, #0]
    6824:	68fa      	ldr	r2, [r7, #12]
    6826:	697b      	ldr	r3, [r7, #20]
    6828:	009b      	lsls	r3, r3, #2
    682a:	4413      	add	r3, r2
    682c:	681b      	ldr	r3, [r3, #0]
    682e:	091b      	lsrs	r3, r3, #4
    6830:	461a      	mov	r2, r3
    6832:	6878      	ldr	r0, [r7, #4]
    6834:	f7ff ffac 	bl	6790 <compile_declare_global>
        for (int i = 0; i < n; i++) {
    6838:	697b      	ldr	r3, [r7, #20]
    683a:	3301      	adds	r3, #1
    683c:	617b      	str	r3, [r7, #20]
    683e:	697a      	ldr	r2, [r7, #20]
    6840:	693b      	ldr	r3, [r7, #16]
    6842:	429a      	cmp	r2, r3
    6844:	dbed      	blt.n	6822 <compile_global_stmt+0x2a>
        }
    }
}
    6846:	bf00      	nop
    6848:	3718      	adds	r7, #24
    684a:	46bd      	mov	sp, r7
    684c:	bd80      	pop	{r7, pc}

0000684e <compile_declare_nonlocal>:

STATIC void compile_declare_nonlocal(compiler_t *comp, mp_parse_node_t pn, qstr qst) {
    684e:	b580      	push	{r7, lr}
    6850:	b086      	sub	sp, #24
    6852:	af00      	add	r7, sp, #0
    6854:	60f8      	str	r0, [r7, #12]
    6856:	60b9      	str	r1, [r7, #8]
    6858:	607a      	str	r2, [r7, #4]
    bool added;
    id_info_t *id_info = scope_find_or_add_id(comp->scope_cur, qst, &added);
    685a:	68fb      	ldr	r3, [r7, #12]
    685c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    685e:	f107 0213 	add.w	r2, r7, #19
    6862:	6879      	ldr	r1, [r7, #4]
    6864:	4618      	mov	r0, r3
    6866:	f7fe f90f 	bl	4a88 <scope_find_or_add_id>
    686a:	6178      	str	r0, [r7, #20]
    if (added) {
    686c:	7cfb      	ldrb	r3, [r7, #19]
    686e:	2b00      	cmp	r3, #0
    6870:	d010      	beq.n	6894 <compile_declare_nonlocal+0x46>
        scope_find_local_and_close_over(comp->scope_cur, id_info, qst);
    6872:	68fb      	ldr	r3, [r7, #12]
    6874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    6876:	687a      	ldr	r2, [r7, #4]
    6878:	6979      	ldr	r1, [r7, #20]
    687a:	4618      	mov	r0, r3
    687c:	f7fe f9de 	bl	4c3c <scope_find_local_and_close_over>
        if (id_info->kind == ID_INFO_KIND_GLOBAL_IMPLICIT) {
    6880:	697b      	ldr	r3, [r7, #20]
    6882:	781b      	ldrb	r3, [r3, #0]
    6884:	2b00      	cmp	r3, #0
    6886:	d10e      	bne.n	68a6 <compile_declare_nonlocal+0x58>
            compile_syntax_error(comp, pn, "no binding for nonlocal found");
    6888:	4a09      	ldr	r2, [pc, #36]	; (68b0 <compile_declare_nonlocal+0x62>)
    688a:	68b9      	ldr	r1, [r7, #8]
    688c:	68f8      	ldr	r0, [r7, #12]
    688e:	f7fe fa42 	bl	4d16 <compile_syntax_error>
        }
    } else if (id_info->kind != ID_INFO_KIND_FREE) {
        compile_syntax_error(comp, pn, "identifier redefined as nonlocal");
    }
}
    6892:	e008      	b.n	68a6 <compile_declare_nonlocal+0x58>
    } else if (id_info->kind != ID_INFO_KIND_FREE) {
    6894:	697b      	ldr	r3, [r7, #20]
    6896:	781b      	ldrb	r3, [r3, #0]
    6898:	2b04      	cmp	r3, #4
    689a:	d004      	beq.n	68a6 <compile_declare_nonlocal+0x58>
        compile_syntax_error(comp, pn, "identifier redefined as nonlocal");
    689c:	4a05      	ldr	r2, [pc, #20]	; (68b4 <compile_declare_nonlocal+0x66>)
    689e:	68b9      	ldr	r1, [r7, #8]
    68a0:	68f8      	ldr	r0, [r7, #12]
    68a2:	f7fe fa38 	bl	4d16 <compile_syntax_error>
}
    68a6:	bf00      	nop
    68a8:	3718      	adds	r7, #24
    68aa:	46bd      	mov	sp, r7
    68ac:	bd80      	pop	{r7, pc}
    68ae:	bf00      	nop
    68b0:	0001e4a4 	.word	0x0001e4a4
    68b4:	0001e4c4 	.word	0x0001e4c4

000068b8 <compile_nonlocal_stmt>:

STATIC void compile_nonlocal_stmt(compiler_t *comp, mp_parse_node_struct_t *pns) {
    68b8:	b580      	push	{r7, lr}
    68ba:	b086      	sub	sp, #24
    68bc:	af00      	add	r7, sp, #0
    68be:	6078      	str	r0, [r7, #4]
    68c0:	6039      	str	r1, [r7, #0]
    if (comp->pass == MP_PASS_SCOPE) {
    68c2:	687b      	ldr	r3, [r7, #4]
    68c4:	795b      	ldrb	r3, [r3, #5]
    68c6:	2b01      	cmp	r3, #1
    68c8:	d129      	bne.n	691e <compile_nonlocal_stmt+0x66>
        if (comp->scope_cur->kind == SCOPE_MODULE) {
    68ca:	687b      	ldr	r3, [r7, #4]
    68cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    68ce:	681b      	ldr	r3, [r3, #0]
    68d0:	2b00      	cmp	r3, #0
    68d2:	d106      	bne.n	68e2 <compile_nonlocal_stmt+0x2a>
            compile_syntax_error(comp, (mp_parse_node_t)pns, "can't declare nonlocal in outer code");
    68d4:	683b      	ldr	r3, [r7, #0]
    68d6:	4a13      	ldr	r2, [pc, #76]	; (6924 <compile_nonlocal_stmt+0x6c>)
    68d8:	4619      	mov	r1, r3
    68da:	6878      	ldr	r0, [r7, #4]
    68dc:	f7fe fa1b 	bl	4d16 <compile_syntax_error>
    68e0:	e01d      	b.n	691e <compile_nonlocal_stmt+0x66>
            return;
        }
        mp_parse_node_t *nodes;
        int n = mp_parse_node_extract_list(&pns->nodes[0], PN_name_list, &nodes);
    68e2:	683b      	ldr	r3, [r7, #0]
    68e4:	3308      	adds	r3, #8
    68e6:	f107 020c 	add.w	r2, r7, #12
    68ea:	2167      	movs	r1, #103	; 0x67
    68ec:	4618      	mov	r0, r3
    68ee:	f7fd f91b 	bl	3b28 <mp_parse_node_extract_list>
    68f2:	6138      	str	r0, [r7, #16]
        for (int i = 0; i < n; i++) {
    68f4:	2300      	movs	r3, #0
    68f6:	617b      	str	r3, [r7, #20]
    68f8:	e00d      	b.n	6916 <compile_nonlocal_stmt+0x5e>
            compile_declare_nonlocal(comp, (mp_parse_node_t)pns, MP_PARSE_NODE_LEAF_ARG(nodes[i]));
    68fa:	6839      	ldr	r1, [r7, #0]
    68fc:	68fa      	ldr	r2, [r7, #12]
    68fe:	697b      	ldr	r3, [r7, #20]
    6900:	009b      	lsls	r3, r3, #2
    6902:	4413      	add	r3, r2
    6904:	681b      	ldr	r3, [r3, #0]
    6906:	091b      	lsrs	r3, r3, #4
    6908:	461a      	mov	r2, r3
    690a:	6878      	ldr	r0, [r7, #4]
    690c:	f7ff ff9f 	bl	684e <compile_declare_nonlocal>
        for (int i = 0; i < n; i++) {
    6910:	697b      	ldr	r3, [r7, #20]
    6912:	3301      	adds	r3, #1
    6914:	617b      	str	r3, [r7, #20]
    6916:	697a      	ldr	r2, [r7, #20]
    6918:	693b      	ldr	r3, [r7, #16]
    691a:	429a      	cmp	r2, r3
    691c:	dbed      	blt.n	68fa <compile_nonlocal_stmt+0x42>
        }
    }
}
    691e:	3718      	adds	r7, #24
    6920:	46bd      	mov	sp, r7
    6922:	bd80      	pop	{r7, pc}
    6924:	0001e4e8 	.word	0x0001e4e8

00006928 <compile_assert_stmt>:

STATIC void compile_assert_stmt(compiler_t *comp, mp_parse_node_struct_t *pns) {
    6928:	b580      	push	{r7, lr}
    692a:	b084      	sub	sp, #16
    692c:	af00      	add	r7, sp, #0
    692e:	6078      	str	r0, [r7, #4]
    6930:	6039      	str	r1, [r7, #0]
    // with optimisations enabled we don't compile assertions
    if (MP_STATE_VM(mp_optimise_value) != 0) {
    6932:	4b1c      	ldr	r3, [pc, #112]	; (69a4 <compile_assert_stmt+0x7c>)
    6934:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
    6938:	2b00      	cmp	r3, #0
    693a:	d12f      	bne.n	699c <compile_assert_stmt+0x74>
        return;
    }

    uint l_end = comp_next_label(comp);
    693c:	6878      	ldr	r0, [r7, #4]
    693e:	f7fe fa05 	bl	4d4c <comp_next_label>
    6942:	60f8      	str	r0, [r7, #12]
    c_if_cond(comp, pns->nodes[0], true, l_end);
    6944:	683b      	ldr	r3, [r7, #0]
    6946:	6899      	ldr	r1, [r3, #8]
    6948:	68fb      	ldr	r3, [r7, #12]
    694a:	2201      	movs	r2, #1
    694c:	6878      	ldr	r0, [r7, #4]
    694e:	f7fe fb84 	bl	505a <c_if_cond>
    EMIT_LOAD_GLOBAL(MP_QSTR_AssertionError); // we load_global instead of load_id, to be consistent with CPython
    6952:	687b      	ldr	r3, [r7, #4]
    6954:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6956:	2201      	movs	r2, #1
    6958:	2139      	movs	r1, #57	; 0x39
    695a:	4618      	mov	r0, r3
    695c:	f003 fdbd 	bl	a4da <mp_emit_bc_load_global>
    if (!MP_PARSE_NODE_IS_NULL(pns->nodes[1])) {
    6960:	683b      	ldr	r3, [r7, #0]
    6962:	68db      	ldr	r3, [r3, #12]
    6964:	2b00      	cmp	r3, #0
    6966:	d00c      	beq.n	6982 <compile_assert_stmt+0x5a>
        // assertion message
        compile_node(comp, pns->nodes[1]);
    6968:	683b      	ldr	r3, [r7, #0]
    696a:	68db      	ldr	r3, [r3, #12]
    696c:	4619      	mov	r1, r3
    696e:	6878      	ldr	r0, [r7, #4]
    6970:	f002 f83f 	bl	89f2 <compile_node>
        EMIT_ARG(call_function, 1, 0, 0);
    6974:	687b      	ldr	r3, [r7, #4]
    6976:	6a98      	ldr	r0, [r3, #40]	; 0x28
    6978:	2300      	movs	r3, #0
    697a:	2200      	movs	r2, #0
    697c:	2101      	movs	r1, #1
    697e:	f004 f9bf 	bl	ad00 <mp_emit_bc_call_function>
    }
    EMIT_ARG(raise_varargs, 1);
    6982:	687b      	ldr	r3, [r7, #4]
    6984:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6986:	2101      	movs	r1, #1
    6988:	4618      	mov	r0, r3
    698a:	f004 f9f8 	bl	ad7e <mp_emit_bc_raise_varargs>
    EMIT_ARG(label_assign, l_end);
    698e:	687b      	ldr	r3, [r7, #4]
    6990:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6992:	68f9      	ldr	r1, [r7, #12]
    6994:	4618      	mov	r0, r3
    6996:	f003 fc69 	bl	a26c <mp_emit_bc_label_assign>
    699a:	e000      	b.n	699e <compile_assert_stmt+0x76>
        return;
    699c:	bf00      	nop
}
    699e:	3710      	adds	r7, #16
    69a0:	46bd      	mov	sp, r7
    69a2:	bd80      	pop	{r7, pc}
    69a4:	20000a2c 	.word	0x20000a2c

000069a8 <compile_if_stmt>:

STATIC void compile_if_stmt(compiler_t *comp, mp_parse_node_struct_t *pns) {
    69a8:	b580      	push	{r7, lr}
    69aa:	b08a      	sub	sp, #40	; 0x28
    69ac:	af00      	add	r7, sp, #0
    69ae:	6078      	str	r0, [r7, #4]
    69b0:	6039      	str	r1, [r7, #0]
    uint l_end = comp_next_label(comp);
    69b2:	6878      	ldr	r0, [r7, #4]
    69b4:	f7fe f9ca 	bl	4d4c <comp_next_label>
    69b8:	6238      	str	r0, [r7, #32]

    // optimisation: don't emit anything when "if False"
    if (!mp_parse_node_is_const_false(pns->nodes[0])) {
    69ba:	683b      	ldr	r3, [r7, #0]
    69bc:	689b      	ldr	r3, [r3, #8]
    69be:	4618      	mov	r0, r3
    69c0:	f7fd f82d 	bl	3a1e <mp_parse_node_is_const_false>
    69c4:	4603      	mov	r3, r0
    69c6:	f083 0301 	eor.w	r3, r3, #1
    69ca:	b2db      	uxtb	r3, r3
    69cc:	2b00      	cmp	r3, #0
    69ce:	d038      	beq.n	6a42 <compile_if_stmt+0x9a>
        uint l_fail = comp_next_label(comp);
    69d0:	6878      	ldr	r0, [r7, #4]
    69d2:	f7fe f9bb 	bl	4d4c <comp_next_label>
    69d6:	61f8      	str	r0, [r7, #28]
        c_if_cond(comp, pns->nodes[0], false, l_fail); // if condition
    69d8:	683b      	ldr	r3, [r7, #0]
    69da:	6899      	ldr	r1, [r3, #8]
    69dc:	69fb      	ldr	r3, [r7, #28]
    69de:	2200      	movs	r2, #0
    69e0:	6878      	ldr	r0, [r7, #4]
    69e2:	f7fe fb3a 	bl	505a <c_if_cond>

        compile_node(comp, pns->nodes[1]); // if block
    69e6:	683b      	ldr	r3, [r7, #0]
    69e8:	68db      	ldr	r3, [r3, #12]
    69ea:	4619      	mov	r1, r3
    69ec:	6878      	ldr	r0, [r7, #4]
    69ee:	f002 f800 	bl	89f2 <compile_node>

        // optimisation: skip everything else when "if True"
        if (mp_parse_node_is_const_true(pns->nodes[0])) {
    69f2:	683b      	ldr	r3, [r7, #0]
    69f4:	689b      	ldr	r3, [r3, #8]
    69f6:	4618      	mov	r0, r3
    69f8:	f7fd f82d 	bl	3a56 <mp_parse_node_is_const_true>
    69fc:	4603      	mov	r3, r0
    69fe:	2b00      	cmp	r3, #0
    6a00:	f040 809a 	bne.w	6b38 <compile_if_stmt+0x190>
            goto done;
        }

        if (
            // optimisation: don't jump over non-existent elif/else blocks
            !(MP_PARSE_NODE_IS_NULL(pns->nodes[2]) && MP_PARSE_NODE_IS_NULL(pns->nodes[3]))
    6a04:	683b      	ldr	r3, [r7, #0]
    6a06:	691b      	ldr	r3, [r3, #16]
        if (
    6a08:	2b00      	cmp	r3, #0
    6a0a:	d103      	bne.n	6a14 <compile_if_stmt+0x6c>
            !(MP_PARSE_NODE_IS_NULL(pns->nodes[2]) && MP_PARSE_NODE_IS_NULL(pns->nodes[3]))
    6a0c:	683b      	ldr	r3, [r7, #0]
    6a0e:	695b      	ldr	r3, [r3, #20]
    6a10:	2b00      	cmp	r3, #0
    6a12:	d010      	beq.n	6a36 <compile_if_stmt+0x8e>
            // optimisation: don't jump if last instruction was return
            && !EMIT(last_emit_was_return_value)
    6a14:	687b      	ldr	r3, [r7, #4]
    6a16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6a18:	4618      	mov	r0, r3
    6a1a:	f003 fbc7 	bl	a1ac <mp_emit_bc_last_emit_was_return_value>
    6a1e:	4603      	mov	r3, r0
    6a20:	f083 0301 	eor.w	r3, r3, #1
    6a24:	b2db      	uxtb	r3, r3
    6a26:	2b00      	cmp	r3, #0
    6a28:	d005      	beq.n	6a36 <compile_if_stmt+0x8e>
            ) {
            // jump over elif/else blocks
            EMIT_ARG(jump, l_end);
    6a2a:	687b      	ldr	r3, [r7, #4]
    6a2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6a2e:	6a39      	ldr	r1, [r7, #32]
    6a30:	4618      	mov	r0, r3
    6a32:	f003 fea5 	bl	a780 <mp_emit_bc_jump>
        }

        EMIT_ARG(label_assign, l_fail);
    6a36:	687b      	ldr	r3, [r7, #4]
    6a38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6a3a:	69f9      	ldr	r1, [r7, #28]
    6a3c:	4618      	mov	r0, r3
    6a3e:	f003 fc15 	bl	a26c <mp_emit_bc_label_assign>
    }

    // compile elif blocks (if any)
    mp_parse_node_t *pn_elif;
    int n_elif = mp_parse_node_extract_list(&pns->nodes[2], PN_if_stmt_elif_list, &pn_elif);
    6a42:	683b      	ldr	r3, [r7, #0]
    6a44:	3310      	adds	r3, #16
    6a46:	f107 020c 	add.w	r2, r7, #12
    6a4a:	216a      	movs	r1, #106	; 0x6a
    6a4c:	4618      	mov	r0, r3
    6a4e:	f7fd f86b 	bl	3b28 <mp_parse_node_extract_list>
    6a52:	61b8      	str	r0, [r7, #24]
    for (int i = 0; i < n_elif; i++) {
    6a54:	2300      	movs	r3, #0
    6a56:	627b      	str	r3, [r7, #36]	; 0x24
    6a58:	e063      	b.n	6b22 <compile_if_stmt+0x17a>
        assert(MP_PARSE_NODE_IS_STRUCT_KIND(pn_elif[i], PN_if_stmt_elif)); // should be
    6a5a:	68fa      	ldr	r2, [r7, #12]
    6a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    6a5e:	009b      	lsls	r3, r3, #2
    6a60:	4413      	add	r3, r2
    6a62:	681b      	ldr	r3, [r3, #0]
    6a64:	2b00      	cmp	r3, #0
    6a66:	d011      	beq.n	6a8c <compile_if_stmt+0xe4>
    6a68:	68fa      	ldr	r2, [r7, #12]
    6a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    6a6c:	009b      	lsls	r3, r3, #2
    6a6e:	4413      	add	r3, r2
    6a70:	681b      	ldr	r3, [r3, #0]
    6a72:	f003 0303 	and.w	r3, r3, #3
    6a76:	2b00      	cmp	r3, #0
    6a78:	d108      	bne.n	6a8c <compile_if_stmt+0xe4>
    6a7a:	68fa      	ldr	r2, [r7, #12]
    6a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    6a7e:	009b      	lsls	r3, r3, #2
    6a80:	4413      	add	r3, r2
    6a82:	681b      	ldr	r3, [r3, #0]
    6a84:	685b      	ldr	r3, [r3, #4]
    6a86:	b2db      	uxtb	r3, r3
    6a88:	2b6b      	cmp	r3, #107	; 0x6b
    6a8a:	d006      	beq.n	6a9a <compile_if_stmt+0xf2>
    6a8c:	4b31      	ldr	r3, [pc, #196]	; (6b54 <compile_if_stmt+0x1ac>)
    6a8e:	4a32      	ldr	r2, [pc, #200]	; (6b58 <compile_if_stmt+0x1b0>)
    6a90:	f240 41f3 	movw	r1, #1267	; 0x4f3
    6a94:	4831      	ldr	r0, [pc, #196]	; (6b5c <compile_if_stmt+0x1b4>)
    6a96:	f014 fb91 	bl	1b1bc <__assert_func>
        mp_parse_node_struct_t *pns_elif = (mp_parse_node_struct_t*)pn_elif[i];
    6a9a:	68fa      	ldr	r2, [r7, #12]
    6a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    6a9e:	009b      	lsls	r3, r3, #2
    6aa0:	4413      	add	r3, r2
    6aa2:	681b      	ldr	r3, [r3, #0]
    6aa4:	617b      	str	r3, [r7, #20]

        // optimisation: don't emit anything when "if False"
        if (!mp_parse_node_is_const_false(pns_elif->nodes[0])) {
    6aa6:	697b      	ldr	r3, [r7, #20]
    6aa8:	689b      	ldr	r3, [r3, #8]
    6aaa:	4618      	mov	r0, r3
    6aac:	f7fc ffb7 	bl	3a1e <mp_parse_node_is_const_false>
    6ab0:	4603      	mov	r3, r0
    6ab2:	f083 0301 	eor.w	r3, r3, #1
    6ab6:	b2db      	uxtb	r3, r3
    6ab8:	2b00      	cmp	r3, #0
    6aba:	d02f      	beq.n	6b1c <compile_if_stmt+0x174>
            uint l_fail = comp_next_label(comp);
    6abc:	6878      	ldr	r0, [r7, #4]
    6abe:	f7fe f945 	bl	4d4c <comp_next_label>
    6ac2:	6138      	str	r0, [r7, #16]
            c_if_cond(comp, pns_elif->nodes[0], false, l_fail); // elif condition
    6ac4:	697b      	ldr	r3, [r7, #20]
    6ac6:	6899      	ldr	r1, [r3, #8]
    6ac8:	693b      	ldr	r3, [r7, #16]
    6aca:	2200      	movs	r2, #0
    6acc:	6878      	ldr	r0, [r7, #4]
    6ace:	f7fe fac4 	bl	505a <c_if_cond>

            compile_node(comp, pns_elif->nodes[1]); // elif block
    6ad2:	697b      	ldr	r3, [r7, #20]
    6ad4:	68db      	ldr	r3, [r3, #12]
    6ad6:	4619      	mov	r1, r3
    6ad8:	6878      	ldr	r0, [r7, #4]
    6ada:	f001 ff8a 	bl	89f2 <compile_node>

            // optimisation: skip everything else when "elif True"
            if (mp_parse_node_is_const_true(pns_elif->nodes[0])) {
    6ade:	697b      	ldr	r3, [r7, #20]
    6ae0:	689b      	ldr	r3, [r3, #8]
    6ae2:	4618      	mov	r0, r3
    6ae4:	f7fc ffb7 	bl	3a56 <mp_parse_node_is_const_true>
    6ae8:	4603      	mov	r3, r0
    6aea:	2b00      	cmp	r3, #0
    6aec:	d126      	bne.n	6b3c <compile_if_stmt+0x194>
                goto done;
            }

            // optimisation: don't jump if last instruction was return
            if (!EMIT(last_emit_was_return_value)) {
    6aee:	687b      	ldr	r3, [r7, #4]
    6af0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6af2:	4618      	mov	r0, r3
    6af4:	f003 fb5a 	bl	a1ac <mp_emit_bc_last_emit_was_return_value>
    6af8:	4603      	mov	r3, r0
    6afa:	f083 0301 	eor.w	r3, r3, #1
    6afe:	b2db      	uxtb	r3, r3
    6b00:	2b00      	cmp	r3, #0
    6b02:	d005      	beq.n	6b10 <compile_if_stmt+0x168>
                EMIT_ARG(jump, l_end);
    6b04:	687b      	ldr	r3, [r7, #4]
    6b06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6b08:	6a39      	ldr	r1, [r7, #32]
    6b0a:	4618      	mov	r0, r3
    6b0c:	f003 fe38 	bl	a780 <mp_emit_bc_jump>
            }
            EMIT_ARG(label_assign, l_fail);
    6b10:	687b      	ldr	r3, [r7, #4]
    6b12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6b14:	6939      	ldr	r1, [r7, #16]
    6b16:	4618      	mov	r0, r3
    6b18:	f003 fba8 	bl	a26c <mp_emit_bc_label_assign>
    for (int i = 0; i < n_elif; i++) {
    6b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    6b1e:	3301      	adds	r3, #1
    6b20:	627b      	str	r3, [r7, #36]	; 0x24
    6b22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    6b24:	69bb      	ldr	r3, [r7, #24]
    6b26:	429a      	cmp	r2, r3
    6b28:	db97      	blt.n	6a5a <compile_if_stmt+0xb2>
        }
    }

    // compile else block
    compile_node(comp, pns->nodes[3]); // can be null
    6b2a:	683b      	ldr	r3, [r7, #0]
    6b2c:	695b      	ldr	r3, [r3, #20]
    6b2e:	4619      	mov	r1, r3
    6b30:	6878      	ldr	r0, [r7, #4]
    6b32:	f001 ff5e 	bl	89f2 <compile_node>
    6b36:	e002      	b.n	6b3e <compile_if_stmt+0x196>
            goto done;
    6b38:	bf00      	nop
    6b3a:	e000      	b.n	6b3e <compile_if_stmt+0x196>
                goto done;
    6b3c:	bf00      	nop

done:
    EMIT_ARG(label_assign, l_end);
    6b3e:	687b      	ldr	r3, [r7, #4]
    6b40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6b42:	6a39      	ldr	r1, [r7, #32]
    6b44:	4618      	mov	r0, r3
    6b46:	f003 fb91 	bl	a26c <mp_emit_bc_label_assign>
}
    6b4a:	bf00      	nop
    6b4c:	3728      	adds	r7, #40	; 0x28
    6b4e:	46bd      	mov	sp, r7
    6b50:	bd80      	pop	{r7, pc}
    6b52:	bf00      	nop
    6b54:	0001e510 	.word	0x0001e510
    6b58:	0001ecf4 	.word	0x0001ecf4
    6b5c:	0001e084 	.word	0x0001e084

00006b60 <compile_while_stmt>:
#define END_BREAK_CONTINUE_BLOCK \
    comp->break_label = old_break_label; \
    comp->continue_label = old_continue_label; \
    comp->break_continue_except_level = old_break_continue_except_level;

STATIC void compile_while_stmt(compiler_t *comp, mp_parse_node_struct_t *pns) {
    6b60:	b580      	push	{r7, lr}
    6b62:	b088      	sub	sp, #32
    6b64:	af00      	add	r7, sp, #0
    6b66:	6078      	str	r0, [r7, #4]
    6b68:	6039      	str	r1, [r7, #0]
    START_BREAK_CONTINUE_BLOCK
    6b6a:	687b      	ldr	r3, [r7, #4]
    6b6c:	8b1b      	ldrh	r3, [r3, #24]
    6b6e:	83fb      	strh	r3, [r7, #30]
    6b70:	687b      	ldr	r3, [r7, #4]
    6b72:	8b5b      	ldrh	r3, [r3, #26]
    6b74:	83bb      	strh	r3, [r7, #28]
    6b76:	687b      	ldr	r3, [r7, #4]
    6b78:	8bdb      	ldrh	r3, [r3, #30]
    6b7a:	837b      	strh	r3, [r7, #26]
    6b7c:	6878      	ldr	r0, [r7, #4]
    6b7e:	f7fe f8e5 	bl	4d4c <comp_next_label>
    6b82:	6178      	str	r0, [r7, #20]
    6b84:	6878      	ldr	r0, [r7, #4]
    6b86:	f7fe f8e1 	bl	4d4c <comp_next_label>
    6b8a:	6138      	str	r0, [r7, #16]
    6b8c:	697b      	ldr	r3, [r7, #20]
    6b8e:	b29a      	uxth	r2, r3
    6b90:	687b      	ldr	r3, [r7, #4]
    6b92:	831a      	strh	r2, [r3, #24]
    6b94:	693b      	ldr	r3, [r7, #16]
    6b96:	b29a      	uxth	r2, r3
    6b98:	687b      	ldr	r3, [r7, #4]
    6b9a:	835a      	strh	r2, [r3, #26]
    6b9c:	687b      	ldr	r3, [r7, #4]
    6b9e:	8b9a      	ldrh	r2, [r3, #28]
    6ba0:	687b      	ldr	r3, [r7, #4]
    6ba2:	83da      	strh	r2, [r3, #30]

    if (!mp_parse_node_is_const_false(pns->nodes[0])) { // optimisation: don't emit anything for "while False"
    6ba4:	683b      	ldr	r3, [r7, #0]
    6ba6:	689b      	ldr	r3, [r3, #8]
    6ba8:	4618      	mov	r0, r3
    6baa:	f7fc ff38 	bl	3a1e <mp_parse_node_is_const_false>
    6bae:	4603      	mov	r3, r0
    6bb0:	f083 0301 	eor.w	r3, r3, #1
    6bb4:	b2db      	uxtb	r3, r3
    6bb6:	2b00      	cmp	r3, #0
    6bb8:	d02d      	beq.n	6c16 <compile_while_stmt+0xb6>
        uint top_label = comp_next_label(comp);
    6bba:	6878      	ldr	r0, [r7, #4]
    6bbc:	f7fe f8c6 	bl	4d4c <comp_next_label>
    6bc0:	60f8      	str	r0, [r7, #12]
        if (!mp_parse_node_is_const_true(pns->nodes[0])) { // optimisation: don't jump to cond for "while True"
    6bc2:	683b      	ldr	r3, [r7, #0]
    6bc4:	689b      	ldr	r3, [r3, #8]
    6bc6:	4618      	mov	r0, r3
    6bc8:	f7fc ff45 	bl	3a56 <mp_parse_node_is_const_true>
    6bcc:	4603      	mov	r3, r0
    6bce:	f083 0301 	eor.w	r3, r3, #1
    6bd2:	b2db      	uxtb	r3, r3
    6bd4:	2b00      	cmp	r3, #0
    6bd6:	d005      	beq.n	6be4 <compile_while_stmt+0x84>
            EMIT_ARG(jump, continue_label);
    6bd8:	687b      	ldr	r3, [r7, #4]
    6bda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6bdc:	6939      	ldr	r1, [r7, #16]
    6bde:	4618      	mov	r0, r3
    6be0:	f003 fdce 	bl	a780 <mp_emit_bc_jump>
        }
        EMIT_ARG(label_assign, top_label);
    6be4:	687b      	ldr	r3, [r7, #4]
    6be6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6be8:	68f9      	ldr	r1, [r7, #12]
    6bea:	4618      	mov	r0, r3
    6bec:	f003 fb3e 	bl	a26c <mp_emit_bc_label_assign>
        compile_node(comp, pns->nodes[1]); // body
    6bf0:	683b      	ldr	r3, [r7, #0]
    6bf2:	68db      	ldr	r3, [r3, #12]
    6bf4:	4619      	mov	r1, r3
    6bf6:	6878      	ldr	r0, [r7, #4]
    6bf8:	f001 fefb 	bl	89f2 <compile_node>
        EMIT_ARG(label_assign, continue_label);
    6bfc:	687b      	ldr	r3, [r7, #4]
    6bfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6c00:	6939      	ldr	r1, [r7, #16]
    6c02:	4618      	mov	r0, r3
    6c04:	f003 fb32 	bl	a26c <mp_emit_bc_label_assign>
        c_if_cond(comp, pns->nodes[0], true, top_label); // condition
    6c08:	683b      	ldr	r3, [r7, #0]
    6c0a:	6899      	ldr	r1, [r3, #8]
    6c0c:	68fb      	ldr	r3, [r7, #12]
    6c0e:	2201      	movs	r2, #1
    6c10:	6878      	ldr	r0, [r7, #4]
    6c12:	f7fe fa22 	bl	505a <c_if_cond>
    }

    // break/continue apply to outer loop (if any) in the else block
    END_BREAK_CONTINUE_BLOCK
    6c16:	687b      	ldr	r3, [r7, #4]
    6c18:	8bfa      	ldrh	r2, [r7, #30]
    6c1a:	831a      	strh	r2, [r3, #24]
    6c1c:	687b      	ldr	r3, [r7, #4]
    6c1e:	8bba      	ldrh	r2, [r7, #28]
    6c20:	835a      	strh	r2, [r3, #26]
    6c22:	687b      	ldr	r3, [r7, #4]
    6c24:	8b7a      	ldrh	r2, [r7, #26]
    6c26:	83da      	strh	r2, [r3, #30]

    compile_node(comp, pns->nodes[2]); // else
    6c28:	683b      	ldr	r3, [r7, #0]
    6c2a:	691b      	ldr	r3, [r3, #16]
    6c2c:	4619      	mov	r1, r3
    6c2e:	6878      	ldr	r0, [r7, #4]
    6c30:	f001 fedf 	bl	89f2 <compile_node>

    EMIT_ARG(label_assign, break_label);
    6c34:	687b      	ldr	r3, [r7, #4]
    6c36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6c38:	6979      	ldr	r1, [r7, #20]
    6c3a:	4618      	mov	r0, r3
    6c3c:	f003 fb16 	bl	a26c <mp_emit_bc_label_assign>
}
    6c40:	bf00      	nop
    6c42:	3720      	adds	r7, #32
    6c44:	46bd      	mov	sp, r7
    6c46:	bd80      	pop	{r7, pc}

00006c48 <compile_for_stmt_optimised_range>:
//    (<step> is a constant for us, so no need to worry about it changing)
//
// If <end> is a small-int, then the stack during the for-loop contains just
// the current value of <var>.  Otherwise, the stack contains <end> then the
// current value of <var>.
STATIC void compile_for_stmt_optimised_range(compiler_t *comp, mp_parse_node_t pn_var, mp_parse_node_t pn_start, mp_parse_node_t pn_end, mp_parse_node_t pn_step, mp_parse_node_t pn_body, mp_parse_node_t pn_else) {
    6c48:	b580      	push	{r7, lr}
    6c4a:	b08c      	sub	sp, #48	; 0x30
    6c4c:	af00      	add	r7, sp, #0
    6c4e:	60f8      	str	r0, [r7, #12]
    6c50:	60b9      	str	r1, [r7, #8]
    6c52:	607a      	str	r2, [r7, #4]
    6c54:	603b      	str	r3, [r7, #0]
    START_BREAK_CONTINUE_BLOCK
    6c56:	68fb      	ldr	r3, [r7, #12]
    6c58:	8b1b      	ldrh	r3, [r3, #24]
    6c5a:	857b      	strh	r3, [r7, #42]	; 0x2a
    6c5c:	68fb      	ldr	r3, [r7, #12]
    6c5e:	8b5b      	ldrh	r3, [r3, #26]
    6c60:	853b      	strh	r3, [r7, #40]	; 0x28
    6c62:	68fb      	ldr	r3, [r7, #12]
    6c64:	8bdb      	ldrh	r3, [r3, #30]
    6c66:	84fb      	strh	r3, [r7, #38]	; 0x26
    6c68:	68f8      	ldr	r0, [r7, #12]
    6c6a:	f7fe f86f 	bl	4d4c <comp_next_label>
    6c6e:	6238      	str	r0, [r7, #32]
    6c70:	68f8      	ldr	r0, [r7, #12]
    6c72:	f7fe f86b 	bl	4d4c <comp_next_label>
    6c76:	61f8      	str	r0, [r7, #28]
    6c78:	6a3b      	ldr	r3, [r7, #32]
    6c7a:	b29a      	uxth	r2, r3
    6c7c:	68fb      	ldr	r3, [r7, #12]
    6c7e:	831a      	strh	r2, [r3, #24]
    6c80:	69fb      	ldr	r3, [r7, #28]
    6c82:	b29a      	uxth	r2, r3
    6c84:	68fb      	ldr	r3, [r7, #12]
    6c86:	835a      	strh	r2, [r3, #26]
    6c88:	68fb      	ldr	r3, [r7, #12]
    6c8a:	8b9a      	ldrh	r2, [r3, #28]
    6c8c:	68fb      	ldr	r3, [r7, #12]
    6c8e:	83da      	strh	r2, [r3, #30]

    uint top_label = comp_next_label(comp);
    6c90:	68f8      	ldr	r0, [r7, #12]
    6c92:	f7fe f85b 	bl	4d4c <comp_next_label>
    6c96:	61b8      	str	r0, [r7, #24]
    uint entry_label = comp_next_label(comp);
    6c98:	68f8      	ldr	r0, [r7, #12]
    6c9a:	f7fe f857 	bl	4d4c <comp_next_label>
    6c9e:	6178      	str	r0, [r7, #20]

    // put the end value on the stack if it's not a small-int constant
    bool end_on_stack = !MP_PARSE_NODE_IS_SMALL_INT(pn_end);
    6ca0:	683b      	ldr	r3, [r7, #0]
    6ca2:	f003 0301 	and.w	r3, r3, #1
    6ca6:	2b00      	cmp	r3, #0
    6ca8:	bf0c      	ite	eq
    6caa:	2301      	moveq	r3, #1
    6cac:	2300      	movne	r3, #0
    6cae:	74fb      	strb	r3, [r7, #19]
    if (end_on_stack) {
    6cb0:	7cfb      	ldrb	r3, [r7, #19]
    6cb2:	2b00      	cmp	r3, #0
    6cb4:	d003      	beq.n	6cbe <compile_for_stmt_optimised_range+0x76>
        compile_node(comp, pn_end);
    6cb6:	6839      	ldr	r1, [r7, #0]
    6cb8:	68f8      	ldr	r0, [r7, #12]
    6cba:	f001 fe9a 	bl	89f2 <compile_node>
    }

    // compile: start
    compile_node(comp, pn_start);
    6cbe:	6879      	ldr	r1, [r7, #4]
    6cc0:	68f8      	ldr	r0, [r7, #12]
    6cc2:	f001 fe96 	bl	89f2 <compile_node>

    EMIT_ARG(jump, entry_label);
    6cc6:	68fb      	ldr	r3, [r7, #12]
    6cc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6cca:	6979      	ldr	r1, [r7, #20]
    6ccc:	4618      	mov	r0, r3
    6cce:	f003 fd57 	bl	a780 <mp_emit_bc_jump>
    EMIT_ARG(label_assign, top_label);
    6cd2:	68fb      	ldr	r3, [r7, #12]
    6cd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6cd6:	69b9      	ldr	r1, [r7, #24]
    6cd8:	4618      	mov	r0, r3
    6cda:	f003 fac7 	bl	a26c <mp_emit_bc_label_assign>

    // duplicate next value and store it to var
    EMIT(dup_top);
    6cde:	68fb      	ldr	r3, [r7, #12]
    6ce0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6ce2:	4618      	mov	r0, r3
    6ce4:	f003 fcfb 	bl	a6de <mp_emit_bc_dup_top>
    c_assign(comp, pn_var, ASSIGN_STORE);
    6ce8:	2200      	movs	r2, #0
    6cea:	68b9      	ldr	r1, [r7, #8]
    6cec:	68f8      	ldr	r0, [r7, #12]
    6cee:	f7fe fc53 	bl	5598 <c_assign>

    // compile body
    compile_node(comp, pn_body);
    6cf2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
    6cf4:	68f8      	ldr	r0, [r7, #12]
    6cf6:	f001 fe7c 	bl	89f2 <compile_node>

    EMIT_ARG(label_assign, continue_label);
    6cfa:	68fb      	ldr	r3, [r7, #12]
    6cfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6cfe:	69f9      	ldr	r1, [r7, #28]
    6d00:	4618      	mov	r0, r3
    6d02:	f003 fab3 	bl	a26c <mp_emit_bc_label_assign>

    // compile: var + step
    compile_node(comp, pn_step);
    6d06:	6bb9      	ldr	r1, [r7, #56]	; 0x38
    6d08:	68f8      	ldr	r0, [r7, #12]
    6d0a:	f001 fe72 	bl	89f2 <compile_node>
    EMIT_ARG(binary_op, MP_BINARY_OP_INPLACE_ADD);
    6d0e:	68fb      	ldr	r3, [r7, #12]
    6d10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6d12:	210e      	movs	r1, #14
    6d14:	4618      	mov	r0, r3
    6d16:	f003 fe8c 	bl	aa32 <mp_emit_bc_binary_op>

    EMIT_ARG(label_assign, entry_label);
    6d1a:	68fb      	ldr	r3, [r7, #12]
    6d1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6d1e:	6979      	ldr	r1, [r7, #20]
    6d20:	4618      	mov	r0, r3
    6d22:	f003 faa3 	bl	a26c <mp_emit_bc_label_assign>

    // compile: if var <cond> end: goto top
    if (end_on_stack) {
    6d26:	7cfb      	ldrb	r3, [r7, #19]
    6d28:	2b00      	cmp	r3, #0
    6d2a:	d00a      	beq.n	6d42 <compile_for_stmt_optimised_range+0xfa>
        EMIT(dup_top_two);
    6d2c:	68fb      	ldr	r3, [r7, #12]
    6d2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6d30:	4618      	mov	r0, r3
    6d32:	f003 fce4 	bl	a6fe <mp_emit_bc_dup_top_two>
        EMIT(rot_two);
    6d36:	68fb      	ldr	r3, [r7, #12]
    6d38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6d3a:	4618      	mov	r0, r3
    6d3c:	f003 fd00 	bl	a740 <mp_emit_bc_rot_two>
    6d40:	e008      	b.n	6d54 <compile_for_stmt_optimised_range+0x10c>
    } else {
        EMIT(dup_top);
    6d42:	68fb      	ldr	r3, [r7, #12]
    6d44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6d46:	4618      	mov	r0, r3
    6d48:	f003 fcc9 	bl	a6de <mp_emit_bc_dup_top>
        compile_node(comp, pn_end);
    6d4c:	6839      	ldr	r1, [r7, #0]
    6d4e:	68f8      	ldr	r0, [r7, #12]
    6d50:	f001 fe4f 	bl	89f2 <compile_node>
    }
    assert(MP_PARSE_NODE_IS_SMALL_INT(pn_step));
    6d54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    6d56:	f003 0301 	and.w	r3, r3, #1
    6d5a:	2b00      	cmp	r3, #0
    6d5c:	d106      	bne.n	6d6c <compile_for_stmt_optimised_range+0x124>
    6d5e:	4b38      	ldr	r3, [pc, #224]	; (6e40 <compile_for_stmt_optimised_range+0x1f8>)
    6d60:	4a38      	ldr	r2, [pc, #224]	; (6e44 <compile_for_stmt_optimised_range+0x1fc>)
    6d62:	f240 516f 	movw	r1, #1391	; 0x56f
    6d66:	4838      	ldr	r0, [pc, #224]	; (6e48 <compile_for_stmt_optimised_range+0x200>)
    6d68:	f014 fa28 	bl	1b1bc <__assert_func>
    if (MP_PARSE_NODE_LEAF_SMALL_INT(pn_step) >= 0) {
    6d6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    6d6e:	105b      	asrs	r3, r3, #1
    6d70:	2b00      	cmp	r3, #0
    6d72:	db06      	blt.n	6d82 <compile_for_stmt_optimised_range+0x13a>
        EMIT_ARG(binary_op, MP_BINARY_OP_LESS);
    6d74:	68fb      	ldr	r3, [r7, #12]
    6d76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6d78:	2100      	movs	r1, #0
    6d7a:	4618      	mov	r0, r3
    6d7c:	f003 fe59 	bl	aa32 <mp_emit_bc_binary_op>
    6d80:	e005      	b.n	6d8e <compile_for_stmt_optimised_range+0x146>
    } else {
        EMIT_ARG(binary_op, MP_BINARY_OP_MORE);
    6d82:	68fb      	ldr	r3, [r7, #12]
    6d84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6d86:	2101      	movs	r1, #1
    6d88:	4618      	mov	r0, r3
    6d8a:	f003 fe52 	bl	aa32 <mp_emit_bc_binary_op>
    }
    EMIT_ARG(pop_jump_if, true, top_label);
    6d8e:	68fb      	ldr	r3, [r7, #12]
    6d90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6d92:	69ba      	ldr	r2, [r7, #24]
    6d94:	2101      	movs	r1, #1
    6d96:	4618      	mov	r0, r3
    6d98:	f003 fd04 	bl	a7a4 <mp_emit_bc_pop_jump_if>

    // break/continue apply to outer loop (if any) in the else block
    END_BREAK_CONTINUE_BLOCK
    6d9c:	68fb      	ldr	r3, [r7, #12]
    6d9e:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
    6da0:	831a      	strh	r2, [r3, #24]
    6da2:	68fb      	ldr	r3, [r7, #12]
    6da4:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
    6da6:	835a      	strh	r2, [r3, #26]
    6da8:	68fb      	ldr	r3, [r7, #12]
    6daa:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    6dac:	83da      	strh	r2, [r3, #30]

    // Compile the else block.  We must pop the iterator variables before
    // executing the else code because it may contain break/continue statements.
    uint end_label = 0;
    6dae:	2300      	movs	r3, #0
    6db0:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (!MP_PARSE_NODE_IS_NULL(pn_else)) {
    6db2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    6db4:	2b00      	cmp	r3, #0
    6db6:	d022      	beq.n	6dfe <compile_for_stmt_optimised_range+0x1b6>
        // discard final value of "var", and possible "end" value
        EMIT(pop_top);
    6db8:	68fb      	ldr	r3, [r7, #12]
    6dba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6dbc:	4618      	mov	r0, r3
    6dbe:	f003 fcae 	bl	a71e <mp_emit_bc_pop_top>
        if (end_on_stack) {
    6dc2:	7cfb      	ldrb	r3, [r7, #19]
    6dc4:	2b00      	cmp	r3, #0
    6dc6:	d004      	beq.n	6dd2 <compile_for_stmt_optimised_range+0x18a>
            EMIT(pop_top);
    6dc8:	68fb      	ldr	r3, [r7, #12]
    6dca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6dcc:	4618      	mov	r0, r3
    6dce:	f003 fca6 	bl	a71e <mp_emit_bc_pop_top>
        }
        compile_node(comp, pn_else);
    6dd2:	6c39      	ldr	r1, [r7, #64]	; 0x40
    6dd4:	68f8      	ldr	r0, [r7, #12]
    6dd6:	f001 fe0c 	bl	89f2 <compile_node>
        end_label = comp_next_label(comp);
    6dda:	68f8      	ldr	r0, [r7, #12]
    6ddc:	f7fd ffb6 	bl	4d4c <comp_next_label>
    6de0:	62f8      	str	r0, [r7, #44]	; 0x2c
        EMIT_ARG(jump, end_label);
    6de2:	68fb      	ldr	r3, [r7, #12]
    6de4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6de6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
    6de8:	4618      	mov	r0, r3
    6dea:	f003 fcc9 	bl	a780 <mp_emit_bc_jump>
        EMIT_ARG(adjust_stack_size, 1 + end_on_stack);
    6dee:	68fb      	ldr	r3, [r7, #12]
    6df0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    6df2:	7cfb      	ldrb	r3, [r7, #19]
    6df4:	3301      	adds	r3, #1
    6df6:	4619      	mov	r1, r3
    6df8:	4610      	mov	r0, r2
    6dfa:	f003 f9e8 	bl	a1ce <mp_emit_bc_adjust_stack_size>
    }

    EMIT_ARG(label_assign, break_label);
    6dfe:	68fb      	ldr	r3, [r7, #12]
    6e00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6e02:	6a39      	ldr	r1, [r7, #32]
    6e04:	4618      	mov	r0, r3
    6e06:	f003 fa31 	bl	a26c <mp_emit_bc_label_assign>

    // discard final value of var that failed the loop condition
    EMIT(pop_top);
    6e0a:	68fb      	ldr	r3, [r7, #12]
    6e0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6e0e:	4618      	mov	r0, r3
    6e10:	f003 fc85 	bl	a71e <mp_emit_bc_pop_top>

    // discard <end> value if it's on the stack
    if (end_on_stack) {
    6e14:	7cfb      	ldrb	r3, [r7, #19]
    6e16:	2b00      	cmp	r3, #0
    6e18:	d004      	beq.n	6e24 <compile_for_stmt_optimised_range+0x1dc>
        EMIT(pop_top);
    6e1a:	68fb      	ldr	r3, [r7, #12]
    6e1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6e1e:	4618      	mov	r0, r3
    6e20:	f003 fc7d 	bl	a71e <mp_emit_bc_pop_top>
    }

    if (!MP_PARSE_NODE_IS_NULL(pn_else)) {
    6e24:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    6e26:	2b00      	cmp	r3, #0
    6e28:	d005      	beq.n	6e36 <compile_for_stmt_optimised_range+0x1ee>
        EMIT_ARG(label_assign, end_label);
    6e2a:	68fb      	ldr	r3, [r7, #12]
    6e2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6e2e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
    6e30:	4618      	mov	r0, r3
    6e32:	f003 fa1b 	bl	a26c <mp_emit_bc_label_assign>
    }
}
    6e36:	bf00      	nop
    6e38:	3730      	adds	r7, #48	; 0x30
    6e3a:	46bd      	mov	sp, r7
    6e3c:	bd80      	pop	{r7, pc}
    6e3e:	bf00      	nop
    6e40:	0001e54c 	.word	0x0001e54c
    6e44:	0001ed04 	.word	0x0001ed04
    6e48:	0001e084 	.word	0x0001e084

00006e4c <compile_for_stmt>:

STATIC void compile_for_stmt(compiler_t *comp, mp_parse_node_struct_t *pns) {
    6e4c:	b580      	push	{r7, lr}
    6e4e:	b096      	sub	sp, #88	; 0x58
    6e50:	af04      	add	r7, sp, #16
    6e52:	6078      	str	r0, [r7, #4]
    6e54:	6039      	str	r1, [r7, #0]
    // this bit optimises: for <x> in range(...), turning it into an explicitly incremented variable
    // this is actually slower, but uses no heap memory
    // for viper it will be much, much faster
    if (/*comp->scope_cur->emit_options == MP_EMIT_OPT_VIPER &&*/ MP_PARSE_NODE_IS_ID(pns->nodes[0]) && MP_PARSE_NODE_IS_STRUCT_KIND(pns->nodes[1], PN_atom_expr_normal)) {
    6e56:	683b      	ldr	r3, [r7, #0]
    6e58:	689b      	ldr	r3, [r3, #8]
    6e5a:	f003 030f 	and.w	r3, r3, #15
    6e5e:	2b02      	cmp	r3, #2
    6e60:	f040 80c1 	bne.w	6fe6 <compile_for_stmt+0x19a>
    6e64:	683b      	ldr	r3, [r7, #0]
    6e66:	68db      	ldr	r3, [r3, #12]
    6e68:	2b00      	cmp	r3, #0
    6e6a:	f000 80bc 	beq.w	6fe6 <compile_for_stmt+0x19a>
    6e6e:	683b      	ldr	r3, [r7, #0]
    6e70:	68db      	ldr	r3, [r3, #12]
    6e72:	f003 0303 	and.w	r3, r3, #3
    6e76:	2b00      	cmp	r3, #0
    6e78:	f040 80b5 	bne.w	6fe6 <compile_for_stmt+0x19a>
    6e7c:	683b      	ldr	r3, [r7, #0]
    6e7e:	68db      	ldr	r3, [r3, #12]
    6e80:	685b      	ldr	r3, [r3, #4]
    6e82:	b2db      	uxtb	r3, r3
    6e84:	2b29      	cmp	r3, #41	; 0x29
    6e86:	f040 80ae 	bne.w	6fe6 <compile_for_stmt+0x19a>
        mp_parse_node_struct_t *pns_it = (mp_parse_node_struct_t*)pns->nodes[1];
    6e8a:	683b      	ldr	r3, [r7, #0]
    6e8c:	68db      	ldr	r3, [r3, #12]
    6e8e:	637b      	str	r3, [r7, #52]	; 0x34
        if (MP_PARSE_NODE_IS_ID(pns_it->nodes[0])
    6e90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    6e92:	689b      	ldr	r3, [r3, #8]
    6e94:	f003 030f 	and.w	r3, r3, #15
    6e98:	2b02      	cmp	r3, #2
    6e9a:	f040 80a4 	bne.w	6fe6 <compile_for_stmt+0x19a>
            && MP_PARSE_NODE_LEAF_ARG(pns_it->nodes[0]) == MP_QSTR_range
    6e9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    6ea0:	689b      	ldr	r3, [r3, #8]
    6ea2:	091b      	lsrs	r3, r3, #4
    6ea4:	2ba3      	cmp	r3, #163	; 0xa3
    6ea6:	f040 809e 	bne.w	6fe6 <compile_for_stmt+0x19a>
            && MP_PARSE_NODE_STRUCT_KIND((mp_parse_node_struct_t*)pns_it->nodes[1]) == PN_trailer_paren) {
    6eaa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    6eac:	68db      	ldr	r3, [r3, #12]
    6eae:	685b      	ldr	r3, [r3, #4]
    6eb0:	b2db      	uxtb	r3, r3
    6eb2:	2b2d      	cmp	r3, #45	; 0x2d
    6eb4:	f040 8097 	bne.w	6fe6 <compile_for_stmt+0x19a>
            mp_parse_node_t pn_range_args = ((mp_parse_node_struct_t*)pns_it->nodes[1])->nodes[0];
    6eb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    6eba:	68db      	ldr	r3, [r3, #12]
    6ebc:	689b      	ldr	r3, [r3, #8]
    6ebe:	613b      	str	r3, [r7, #16]
            mp_parse_node_t *args;
            int n_args = mp_parse_node_extract_list(&pn_range_args, PN_arglist, &args);
    6ec0:	f107 020c 	add.w	r2, r7, #12
    6ec4:	f107 0310 	add.w	r3, r7, #16
    6ec8:	2197      	movs	r1, #151	; 0x97
    6eca:	4618      	mov	r0, r3
    6ecc:	f7fc fe2c 	bl	3b28 <mp_parse_node_extract_list>
    6ed0:	6338      	str	r0, [r7, #48]	; 0x30
            mp_parse_node_t pn_range_start;
            mp_parse_node_t pn_range_end;
            mp_parse_node_t pn_range_step;
            bool optimize = false;
    6ed2:	2300      	movs	r3, #0
    6ed4:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
            if (1 <= n_args && n_args <= 3) {
    6ed8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    6eda:	2b00      	cmp	r3, #0
    6edc:	dd6f      	ble.n	6fbe <compile_for_stmt+0x172>
    6ede:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    6ee0:	2b03      	cmp	r3, #3
    6ee2:	dc6c      	bgt.n	6fbe <compile_for_stmt+0x172>
                optimize = true;
    6ee4:	2301      	movs	r3, #1
    6ee6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
                if (n_args == 1) {
    6eea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    6eec:	2b01      	cmp	r3, #1
    6eee:	d10b      	bne.n	6f08 <compile_for_stmt+0xbc>
                    pn_range_start = mp_parse_node_new_small_int(0);
    6ef0:	2000      	movs	r0, #0
    6ef2:	f7fd fedd 	bl	4cb0 <mp_parse_node_new_small_int>
    6ef6:	6478      	str	r0, [r7, #68]	; 0x44
                    pn_range_end = args[0];
    6ef8:	68fb      	ldr	r3, [r7, #12]
    6efa:	681b      	ldr	r3, [r3, #0]
    6efc:	643b      	str	r3, [r7, #64]	; 0x40
                    pn_range_step = mp_parse_node_new_small_int(1);
    6efe:	2001      	movs	r0, #1
    6f00:	f7fd fed6 	bl	4cb0 <mp_parse_node_new_small_int>
    6f04:	63f8      	str	r0, [r7, #60]	; 0x3c
    6f06:	e022      	b.n	6f4e <compile_for_stmt+0x102>
                } else if (n_args == 2) {
    6f08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    6f0a:	2b02      	cmp	r3, #2
    6f0c:	d10a      	bne.n	6f24 <compile_for_stmt+0xd8>
                    pn_range_start = args[0];
    6f0e:	68fb      	ldr	r3, [r7, #12]
    6f10:	681b      	ldr	r3, [r3, #0]
    6f12:	647b      	str	r3, [r7, #68]	; 0x44
                    pn_range_end = args[1];
    6f14:	68fb      	ldr	r3, [r7, #12]
    6f16:	685b      	ldr	r3, [r3, #4]
    6f18:	643b      	str	r3, [r7, #64]	; 0x40
                    pn_range_step = mp_parse_node_new_small_int(1);
    6f1a:	2001      	movs	r0, #1
    6f1c:	f7fd fec8 	bl	4cb0 <mp_parse_node_new_small_int>
    6f20:	63f8      	str	r0, [r7, #60]	; 0x3c
    6f22:	e014      	b.n	6f4e <compile_for_stmt+0x102>
                } else {
                    pn_range_start = args[0];
    6f24:	68fb      	ldr	r3, [r7, #12]
    6f26:	681b      	ldr	r3, [r3, #0]
    6f28:	647b      	str	r3, [r7, #68]	; 0x44
                    pn_range_end = args[1];
    6f2a:	68fb      	ldr	r3, [r7, #12]
    6f2c:	685b      	ldr	r3, [r3, #4]
    6f2e:	643b      	str	r3, [r7, #64]	; 0x40
                    pn_range_step = args[2];
    6f30:	68fb      	ldr	r3, [r7, #12]
    6f32:	689b      	ldr	r3, [r3, #8]
    6f34:	63fb      	str	r3, [r7, #60]	; 0x3c
                    // the step must be a non-zero constant integer to do the optimisation
                    if (!MP_PARSE_NODE_IS_SMALL_INT(pn_range_step)
    6f36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    6f38:	f003 0301 	and.w	r3, r3, #1
    6f3c:	2b00      	cmp	r3, #0
    6f3e:	d003      	beq.n	6f48 <compile_for_stmt+0xfc>
                        || MP_PARSE_NODE_LEAF_SMALL_INT(pn_range_step) == 0) {
    6f40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    6f42:	105b      	asrs	r3, r3, #1
    6f44:	2b00      	cmp	r3, #0
    6f46:	d102      	bne.n	6f4e <compile_for_stmt+0x102>
                        optimize = false;
    6f48:	2300      	movs	r3, #0
    6f4a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
                    }
                }
                // arguments must be able to be compiled as standard expressions
                if (optimize && MP_PARSE_NODE_IS_STRUCT(pn_range_start)) {
    6f4e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
    6f52:	2b00      	cmp	r3, #0
    6f54:	d017      	beq.n	6f86 <compile_for_stmt+0x13a>
    6f56:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    6f58:	2b00      	cmp	r3, #0
    6f5a:	d014      	beq.n	6f86 <compile_for_stmt+0x13a>
    6f5c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    6f5e:	f003 0303 	and.w	r3, r3, #3
    6f62:	2b00      	cmp	r3, #0
    6f64:	d10f      	bne.n	6f86 <compile_for_stmt+0x13a>
                    int k = MP_PARSE_NODE_STRUCT_KIND((mp_parse_node_struct_t*)pn_range_start);
    6f66:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    6f68:	685b      	ldr	r3, [r3, #4]
    6f6a:	b2db      	uxtb	r3, r3
    6f6c:	62fb      	str	r3, [r7, #44]	; 0x2c
                    if (k == PN_arglist_star || k == PN_arglist_dbl_star || k == PN_argument) {
    6f6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    6f70:	2b99      	cmp	r3, #153	; 0x99
    6f72:	d005      	beq.n	6f80 <compile_for_stmt+0x134>
    6f74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    6f76:	2b9a      	cmp	r3, #154	; 0x9a
    6f78:	d002      	beq.n	6f80 <compile_for_stmt+0x134>
    6f7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    6f7c:	2b9b      	cmp	r3, #155	; 0x9b
    6f7e:	d102      	bne.n	6f86 <compile_for_stmt+0x13a>
                        optimize = false;
    6f80:	2300      	movs	r3, #0
    6f82:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
                    }
                }
                if (optimize && MP_PARSE_NODE_IS_STRUCT(pn_range_end)) {
    6f86:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
    6f8a:	2b00      	cmp	r3, #0
    6f8c:	d017      	beq.n	6fbe <compile_for_stmt+0x172>
    6f8e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    6f90:	2b00      	cmp	r3, #0
    6f92:	d014      	beq.n	6fbe <compile_for_stmt+0x172>
    6f94:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    6f96:	f003 0303 	and.w	r3, r3, #3
    6f9a:	2b00      	cmp	r3, #0
    6f9c:	d10f      	bne.n	6fbe <compile_for_stmt+0x172>
                    int k = MP_PARSE_NODE_STRUCT_KIND((mp_parse_node_struct_t*)pn_range_end);
    6f9e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    6fa0:	685b      	ldr	r3, [r3, #4]
    6fa2:	b2db      	uxtb	r3, r3
    6fa4:	62bb      	str	r3, [r7, #40]	; 0x28
                    if (k == PN_arglist_star || k == PN_arglist_dbl_star || k == PN_argument) {
    6fa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
    6fa8:	2b99      	cmp	r3, #153	; 0x99
    6faa:	d005      	beq.n	6fb8 <compile_for_stmt+0x16c>
    6fac:	6abb      	ldr	r3, [r7, #40]	; 0x28
    6fae:	2b9a      	cmp	r3, #154	; 0x9a
    6fb0:	d002      	beq.n	6fb8 <compile_for_stmt+0x16c>
    6fb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    6fb4:	2b9b      	cmp	r3, #155	; 0x9b
    6fb6:	d102      	bne.n	6fbe <compile_for_stmt+0x172>
                        optimize = false;
    6fb8:	2300      	movs	r3, #0
    6fba:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
                    }
                }
            }
            if (optimize) {
    6fbe:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
    6fc2:	2b00      	cmp	r3, #0
    6fc4:	d00f      	beq.n	6fe6 <compile_for_stmt+0x19a>
                compile_for_stmt_optimised_range(comp, pns->nodes[0], pn_range_start, pn_range_end, pn_range_step, pns->nodes[2], pns->nodes[3]);
    6fc6:	683b      	ldr	r3, [r7, #0]
    6fc8:	6899      	ldr	r1, [r3, #8]
    6fca:	683b      	ldr	r3, [r7, #0]
    6fcc:	691b      	ldr	r3, [r3, #16]
    6fce:	683a      	ldr	r2, [r7, #0]
    6fd0:	6952      	ldr	r2, [r2, #20]
    6fd2:	9202      	str	r2, [sp, #8]
    6fd4:	9301      	str	r3, [sp, #4]
    6fd6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    6fd8:	9300      	str	r3, [sp, #0]
    6fda:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    6fdc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    6fde:	6878      	ldr	r0, [r7, #4]
    6fe0:	f7ff fe32 	bl	6c48 <compile_for_stmt_optimised_range>
    6fe4:	e07f      	b.n	70e6 <compile_for_stmt+0x29a>
                return;
            }
        }
    }

    START_BREAK_CONTINUE_BLOCK
    6fe6:	687b      	ldr	r3, [r7, #4]
    6fe8:	8b1b      	ldrh	r3, [r3, #24]
    6fea:	84fb      	strh	r3, [r7, #38]	; 0x26
    6fec:	687b      	ldr	r3, [r7, #4]
    6fee:	8b5b      	ldrh	r3, [r3, #26]
    6ff0:	84bb      	strh	r3, [r7, #36]	; 0x24
    6ff2:	687b      	ldr	r3, [r7, #4]
    6ff4:	8bdb      	ldrh	r3, [r3, #30]
    6ff6:	847b      	strh	r3, [r7, #34]	; 0x22
    6ff8:	6878      	ldr	r0, [r7, #4]
    6ffa:	f7fd fea7 	bl	4d4c <comp_next_label>
    6ffe:	61f8      	str	r0, [r7, #28]
    7000:	6878      	ldr	r0, [r7, #4]
    7002:	f7fd fea3 	bl	4d4c <comp_next_label>
    7006:	61b8      	str	r0, [r7, #24]
    7008:	69fb      	ldr	r3, [r7, #28]
    700a:	b29a      	uxth	r2, r3
    700c:	687b      	ldr	r3, [r7, #4]
    700e:	831a      	strh	r2, [r3, #24]
    7010:	69bb      	ldr	r3, [r7, #24]
    7012:	b29a      	uxth	r2, r3
    7014:	687b      	ldr	r3, [r7, #4]
    7016:	835a      	strh	r2, [r3, #26]
    7018:	687b      	ldr	r3, [r7, #4]
    701a:	8b9a      	ldrh	r2, [r3, #28]
    701c:	687b      	ldr	r3, [r7, #4]
    701e:	83da      	strh	r2, [r3, #30]
    comp->break_label |= MP_EMIT_BREAK_FROM_FOR;
    7020:	687b      	ldr	r3, [r7, #4]
    7022:	8b1b      	ldrh	r3, [r3, #24]
    7024:	ea6f 4343 	mvn.w	r3, r3, lsl #17
    7028:	ea6f 4353 	mvn.w	r3, r3, lsr #17
    702c:	b29a      	uxth	r2, r3
    702e:	687b      	ldr	r3, [r7, #4]
    7030:	831a      	strh	r2, [r3, #24]

    uint pop_label = comp_next_label(comp);
    7032:	6878      	ldr	r0, [r7, #4]
    7034:	f7fd fe8a 	bl	4d4c <comp_next_label>
    7038:	6178      	str	r0, [r7, #20]

    compile_node(comp, pns->nodes[1]); // iterator
    703a:	683b      	ldr	r3, [r7, #0]
    703c:	68db      	ldr	r3, [r3, #12]
    703e:	4619      	mov	r1, r3
    7040:	6878      	ldr	r0, [r7, #4]
    7042:	f001 fcd6 	bl	89f2 <compile_node>
    EMIT_ARG(get_iter, true);
    7046:	687b      	ldr	r3, [r7, #4]
    7048:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    704a:	2101      	movs	r1, #1
    704c:	4618      	mov	r0, r3
    704e:	f003 fc7e 	bl	a94e <mp_emit_bc_get_iter>
    EMIT_ARG(label_assign, continue_label);
    7052:	687b      	ldr	r3, [r7, #4]
    7054:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7056:	69b9      	ldr	r1, [r7, #24]
    7058:	4618      	mov	r0, r3
    705a:	f003 f907 	bl	a26c <mp_emit_bc_label_assign>
    EMIT_ARG(for_iter, pop_label);
    705e:	687b      	ldr	r3, [r7, #4]
    7060:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7062:	6979      	ldr	r1, [r7, #20]
    7064:	4618      	mov	r0, r3
    7066:	f003 fc90 	bl	a98a <mp_emit_bc_for_iter>
    c_assign(comp, pns->nodes[0], ASSIGN_STORE); // variable
    706a:	683b      	ldr	r3, [r7, #0]
    706c:	689b      	ldr	r3, [r3, #8]
    706e:	2200      	movs	r2, #0
    7070:	4619      	mov	r1, r3
    7072:	6878      	ldr	r0, [r7, #4]
    7074:	f7fe fa90 	bl	5598 <c_assign>
    compile_node(comp, pns->nodes[2]); // body
    7078:	683b      	ldr	r3, [r7, #0]
    707a:	691b      	ldr	r3, [r3, #16]
    707c:	4619      	mov	r1, r3
    707e:	6878      	ldr	r0, [r7, #4]
    7080:	f001 fcb7 	bl	89f2 <compile_node>
    if (!EMIT(last_emit_was_return_value)) {
    7084:	687b      	ldr	r3, [r7, #4]
    7086:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7088:	4618      	mov	r0, r3
    708a:	f003 f88f 	bl	a1ac <mp_emit_bc_last_emit_was_return_value>
    708e:	4603      	mov	r3, r0
    7090:	f083 0301 	eor.w	r3, r3, #1
    7094:	b2db      	uxtb	r3, r3
    7096:	2b00      	cmp	r3, #0
    7098:	d005      	beq.n	70a6 <compile_for_stmt+0x25a>
        EMIT_ARG(jump, continue_label);
    709a:	687b      	ldr	r3, [r7, #4]
    709c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    709e:	69b9      	ldr	r1, [r7, #24]
    70a0:	4618      	mov	r0, r3
    70a2:	f003 fb6d 	bl	a780 <mp_emit_bc_jump>
    }
    EMIT_ARG(label_assign, pop_label);
    70a6:	687b      	ldr	r3, [r7, #4]
    70a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    70aa:	6979      	ldr	r1, [r7, #20]
    70ac:	4618      	mov	r0, r3
    70ae:	f003 f8dd 	bl	a26c <mp_emit_bc_label_assign>
    EMIT(for_iter_end);
    70b2:	687b      	ldr	r3, [r7, #4]
    70b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    70b6:	4618      	mov	r0, r3
    70b8:	f003 fc79 	bl	a9ae <mp_emit_bc_for_iter_end>

    // break/continue apply to outer loop (if any) in the else block
    END_BREAK_CONTINUE_BLOCK
    70bc:	687b      	ldr	r3, [r7, #4]
    70be:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    70c0:	831a      	strh	r2, [r3, #24]
    70c2:	687b      	ldr	r3, [r7, #4]
    70c4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
    70c6:	835a      	strh	r2, [r3, #26]
    70c8:	687b      	ldr	r3, [r7, #4]
    70ca:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
    70cc:	83da      	strh	r2, [r3, #30]

    compile_node(comp, pns->nodes[3]); // else (may be empty)
    70ce:	683b      	ldr	r3, [r7, #0]
    70d0:	695b      	ldr	r3, [r3, #20]
    70d2:	4619      	mov	r1, r3
    70d4:	6878      	ldr	r0, [r7, #4]
    70d6:	f001 fc8c 	bl	89f2 <compile_node>

    EMIT_ARG(label_assign, break_label);
    70da:	687b      	ldr	r3, [r7, #4]
    70dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    70de:	69f9      	ldr	r1, [r7, #28]
    70e0:	4618      	mov	r0, r3
    70e2:	f003 f8c3 	bl	a26c <mp_emit_bc_label_assign>
}
    70e6:	3748      	adds	r7, #72	; 0x48
    70e8:	46bd      	mov	sp, r7
    70ea:	bd80      	pop	{r7, pc}

000070ec <compile_try_except>:

STATIC void compile_try_except(compiler_t *comp, mp_parse_node_t pn_body, int n_except, mp_parse_node_t *pn_excepts, mp_parse_node_t pn_else) {
    70ec:	b580      	push	{r7, lr}
    70ee:	b08e      	sub	sp, #56	; 0x38
    70f0:	af00      	add	r7, sp, #0
    70f2:	60f8      	str	r0, [r7, #12]
    70f4:	60b9      	str	r1, [r7, #8]
    70f6:	607a      	str	r2, [r7, #4]
    70f8:	603b      	str	r3, [r7, #0]
    // setup code
    uint l1 = comp_next_label(comp);
    70fa:	68f8      	ldr	r0, [r7, #12]
    70fc:	f7fd fe26 	bl	4d4c <comp_next_label>
    7100:	6278      	str	r0, [r7, #36]	; 0x24
    uint success_label = comp_next_label(comp);
    7102:	68f8      	ldr	r0, [r7, #12]
    7104:	f7fd fe22 	bl	4d4c <comp_next_label>
    7108:	6238      	str	r0, [r7, #32]

    EMIT_ARG(setup_block, l1, MP_EMIT_SETUP_BLOCK_EXCEPT);
    710a:	68fb      	ldr	r3, [r7, #12]
    710c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    710e:	2202      	movs	r2, #2
    7110:	6a79      	ldr	r1, [r7, #36]	; 0x24
    7112:	4618      	mov	r0, r3
    7114:	f003 fbca 	bl	a8ac <mp_emit_bc_setup_block>
    compile_increase_except_level(comp);
    7118:	68f8      	ldr	r0, [r7, #12]
    711a:	f7fd fe26 	bl	4d6a <compile_increase_except_level>

    compile_node(comp, pn_body); // body
    711e:	68b9      	ldr	r1, [r7, #8]
    7120:	68f8      	ldr	r0, [r7, #12]
    7122:	f001 fc66 	bl	89f2 <compile_node>
    EMIT(pop_block);
    7126:	68fb      	ldr	r3, [r7, #12]
    7128:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    712a:	4618      	mov	r0, r3
    712c:	f003 fc4c 	bl	a9c8 <mp_emit_bc_pop_block>
    EMIT_ARG(jump, success_label); // jump over exception handler
    7130:	68fb      	ldr	r3, [r7, #12]
    7132:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7134:	6a39      	ldr	r1, [r7, #32]
    7136:	4618      	mov	r0, r3
    7138:	f003 fb22 	bl	a780 <mp_emit_bc_jump>

    EMIT_ARG(label_assign, l1); // start of exception handler
    713c:	68fb      	ldr	r3, [r7, #12]
    713e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7140:	6a79      	ldr	r1, [r7, #36]	; 0x24
    7142:	4618      	mov	r0, r3
    7144:	f003 f892 	bl	a26c <mp_emit_bc_label_assign>
    EMIT(start_except_handler);
    7148:	68fb      	ldr	r3, [r7, #12]
    714a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    714c:	4618      	mov	r0, r3
    714e:	f003 fe5d 	bl	ae0c <mp_emit_bc_start_except_handler>

    // at this point the top of the stack contains the exception instance that was raised

    uint l2 = comp_next_label(comp);
    7152:	68f8      	ldr	r0, [r7, #12]
    7154:	f7fd fdfa 	bl	4d4c <comp_next_label>
    7158:	61f8      	str	r0, [r7, #28]

    for (int i = 0; i < n_except; i++) {
    715a:	2300      	movs	r3, #0
    715c:	637b      	str	r3, [r7, #52]	; 0x34
    715e:	e0de      	b.n	731e <compile_try_except+0x232>
        assert(MP_PARSE_NODE_IS_STRUCT_KIND(pn_excepts[i], PN_try_stmt_except)); // should be
    7160:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    7162:	009b      	lsls	r3, r3, #2
    7164:	683a      	ldr	r2, [r7, #0]
    7166:	4413      	add	r3, r2
    7168:	681b      	ldr	r3, [r3, #0]
    716a:	2b00      	cmp	r3, #0
    716c:	d011      	beq.n	7192 <compile_try_except+0xa6>
    716e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    7170:	009b      	lsls	r3, r3, #2
    7172:	683a      	ldr	r2, [r7, #0]
    7174:	4413      	add	r3, r2
    7176:	681b      	ldr	r3, [r3, #0]
    7178:	f003 0303 	and.w	r3, r3, #3
    717c:	2b00      	cmp	r3, #0
    717e:	d108      	bne.n	7192 <compile_try_except+0xa6>
    7180:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    7182:	009b      	lsls	r3, r3, #2
    7184:	683a      	ldr	r2, [r7, #0]
    7186:	4413      	add	r3, r2
    7188:	681b      	ldr	r3, [r3, #0]
    718a:	685b      	ldr	r3, [r3, #4]
    718c:	b2db      	uxtb	r3, r3
    718e:	2b6e      	cmp	r3, #110	; 0x6e
    7190:	d006      	beq.n	71a0 <compile_try_except+0xb4>
    7192:	4b75      	ldr	r3, [pc, #468]	; (7368 <compile_try_except+0x27c>)
    7194:	4a75      	ldr	r2, [pc, #468]	; (736c <compile_try_except+0x280>)
    7196:	f240 51fe 	movw	r1, #1534	; 0x5fe
    719a:	4875      	ldr	r0, [pc, #468]	; (7370 <compile_try_except+0x284>)
    719c:	f014 f80e 	bl	1b1bc <__assert_func>
        mp_parse_node_struct_t *pns_except = (mp_parse_node_struct_t*)pn_excepts[i];
    71a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    71a2:	009b      	lsls	r3, r3, #2
    71a4:	683a      	ldr	r2, [r7, #0]
    71a6:	4413      	add	r3, r2
    71a8:	681b      	ldr	r3, [r3, #0]
    71aa:	61bb      	str	r3, [r7, #24]

        qstr qstr_exception_local = 0;
    71ac:	2300      	movs	r3, #0
    71ae:	633b      	str	r3, [r7, #48]	; 0x30
        uint end_finally_label = comp_next_label(comp);
    71b0:	68f8      	ldr	r0, [r7, #12]
    71b2:	f7fd fdcb 	bl	4d4c <comp_next_label>
    71b6:	6178      	str	r0, [r7, #20]

        if (MP_PARSE_NODE_IS_NULL(pns_except->nodes[0])) {
    71b8:	69bb      	ldr	r3, [r7, #24]
    71ba:	689b      	ldr	r3, [r3, #8]
    71bc:	2b00      	cmp	r3, #0
    71be:	d112      	bne.n	71e6 <compile_try_except+0xfa>
            // this is a catch all exception handler
            if (i + 1 != n_except) {
    71c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    71c2:	1c5a      	adds	r2, r3, #1
    71c4:	687b      	ldr	r3, [r7, #4]
    71c6:	429a      	cmp	r2, r3
    71c8:	d03c      	beq.n	7244 <compile_try_except+0x158>
                compile_syntax_error(comp, pn_excepts[i], "default 'except' must be last");
    71ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    71cc:	009b      	lsls	r3, r3, #2
    71ce:	683a      	ldr	r2, [r7, #0]
    71d0:	4413      	add	r3, r2
    71d2:	681b      	ldr	r3, [r3, #0]
    71d4:	4a67      	ldr	r2, [pc, #412]	; (7374 <compile_try_except+0x288>)
    71d6:	4619      	mov	r1, r3
    71d8:	68f8      	ldr	r0, [r7, #12]
    71da:	f7fd fd9c 	bl	4d16 <compile_syntax_error>
                compile_decrease_except_level(comp);
    71de:	68f8      	ldr	r0, [r7, #12]
    71e0:	f7fd fddf 	bl	4da2 <compile_decrease_except_level>
                return;
    71e4:	e0bd      	b.n	7362 <compile_try_except+0x276>
            }
        } else {
            // this exception handler requires a match to a certain type of exception
            mp_parse_node_t pns_exception_expr = pns_except->nodes[0];
    71e6:	69bb      	ldr	r3, [r7, #24]
    71e8:	689b      	ldr	r3, [r3, #8]
    71ea:	62fb      	str	r3, [r7, #44]	; 0x2c
            if (MP_PARSE_NODE_IS_STRUCT(pns_exception_expr)) {
    71ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    71ee:	2b00      	cmp	r3, #0
    71f0:	d012      	beq.n	7218 <compile_try_except+0x12c>
    71f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    71f4:	f003 0303 	and.w	r3, r3, #3
    71f8:	2b00      	cmp	r3, #0
    71fa:	d10d      	bne.n	7218 <compile_try_except+0x12c>
                mp_parse_node_struct_t *pns3 = (mp_parse_node_struct_t*)pns_exception_expr;
    71fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    71fe:	613b      	str	r3, [r7, #16]
                if (MP_PARSE_NODE_STRUCT_KIND(pns3) == PN_try_stmt_as_name) {
    7200:	693b      	ldr	r3, [r7, #16]
    7202:	685b      	ldr	r3, [r3, #4]
    7204:	b2db      	uxtb	r3, r3
    7206:	2b6f      	cmp	r3, #111	; 0x6f
    7208:	d106      	bne.n	7218 <compile_try_except+0x12c>
                    // handler binds the exception to a local
                    pns_exception_expr = pns3->nodes[0];
    720a:	693b      	ldr	r3, [r7, #16]
    720c:	689b      	ldr	r3, [r3, #8]
    720e:	62fb      	str	r3, [r7, #44]	; 0x2c
                    qstr_exception_local = MP_PARSE_NODE_LEAF_ARG(pns3->nodes[1]);
    7210:	693b      	ldr	r3, [r7, #16]
    7212:	68db      	ldr	r3, [r3, #12]
    7214:	091b      	lsrs	r3, r3, #4
    7216:	633b      	str	r3, [r7, #48]	; 0x30
                }
            }
            EMIT(dup_top);
    7218:	68fb      	ldr	r3, [r7, #12]
    721a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    721c:	4618      	mov	r0, r3
    721e:	f003 fa5e 	bl	a6de <mp_emit_bc_dup_top>
            compile_node(comp, pns_exception_expr);
    7222:	6af9      	ldr	r1, [r7, #44]	; 0x2c
    7224:	68f8      	ldr	r0, [r7, #12]
    7226:	f001 fbe4 	bl	89f2 <compile_node>
            EMIT_ARG(binary_op, MP_BINARY_OP_EXCEPTION_MATCH);
    722a:	68fb      	ldr	r3, [r7, #12]
    722c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    722e:	2108      	movs	r1, #8
    7230:	4618      	mov	r0, r3
    7232:	f003 fbfe 	bl	aa32 <mp_emit_bc_binary_op>
            EMIT_ARG(pop_jump_if, false, end_finally_label);
    7236:	68fb      	ldr	r3, [r7, #12]
    7238:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    723a:	697a      	ldr	r2, [r7, #20]
    723c:	2100      	movs	r1, #0
    723e:	4618      	mov	r0, r3
    7240:	f003 fab0 	bl	a7a4 <mp_emit_bc_pop_jump_if>
        }

        // either discard or store the exception instance
        if (qstr_exception_local == 0) {
    7244:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    7246:	2b00      	cmp	r3, #0
    7248:	d105      	bne.n	7256 <compile_try_except+0x16a>
            EMIT(pop_top);
    724a:	68fb      	ldr	r3, [r7, #12]
    724c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    724e:	4618      	mov	r0, r3
    7250:	f003 fa65 	bl	a71e <mp_emit_bc_pop_top>
    7254:	e003      	b.n	725e <compile_try_except+0x172>
        } else {
            compile_store_id(comp, qstr_exception_local);
    7256:	6b39      	ldr	r1, [r7, #48]	; 0x30
    7258:	68f8      	ldr	r0, [r7, #12]
    725a:	f7fd fe79 	bl	4f50 <compile_store_id>
        }

        uint l3 = 0;
    725e:	2300      	movs	r3, #0
    7260:	62bb      	str	r3, [r7, #40]	; 0x28
        if (qstr_exception_local != 0) {
    7262:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    7264:	2b00      	cmp	r3, #0
    7266:	d00d      	beq.n	7284 <compile_try_except+0x198>
            l3 = comp_next_label(comp);
    7268:	68f8      	ldr	r0, [r7, #12]
    726a:	f7fd fd6f 	bl	4d4c <comp_next_label>
    726e:	62b8      	str	r0, [r7, #40]	; 0x28
            EMIT_ARG(setup_block, l3, MP_EMIT_SETUP_BLOCK_FINALLY);
    7270:	68fb      	ldr	r3, [r7, #12]
    7272:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7274:	2203      	movs	r2, #3
    7276:	6ab9      	ldr	r1, [r7, #40]	; 0x28
    7278:	4618      	mov	r0, r3
    727a:	f003 fb17 	bl	a8ac <mp_emit_bc_setup_block>
            compile_increase_except_level(comp);
    727e:	68f8      	ldr	r0, [r7, #12]
    7280:	f7fd fd73 	bl	4d6a <compile_increase_except_level>
        }
        compile_node(comp, pns_except->nodes[1]);
    7284:	69bb      	ldr	r3, [r7, #24]
    7286:	68db      	ldr	r3, [r3, #12]
    7288:	4619      	mov	r1, r3
    728a:	68f8      	ldr	r0, [r7, #12]
    728c:	f001 fbb1 	bl	89f2 <compile_node>
        if (qstr_exception_local != 0) {
    7290:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    7292:	2b00      	cmp	r3, #0
    7294:	d004      	beq.n	72a0 <compile_try_except+0x1b4>
            EMIT(pop_block);
    7296:	68fb      	ldr	r3, [r7, #12]
    7298:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    729a:	4618      	mov	r0, r3
    729c:	f003 fb94 	bl	a9c8 <mp_emit_bc_pop_block>
        }
        EMIT(pop_except);
    72a0:	68fb      	ldr	r3, [r7, #12]
    72a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    72a4:	4618      	mov	r0, r3
    72a6:	f003 fb9f 	bl	a9e8 <mp_emit_bc_pop_except>
        if (qstr_exception_local != 0) {
    72aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    72ac:	2b00      	cmp	r3, #0
    72ae:	d021      	beq.n	72f4 <compile_try_except+0x208>
            EMIT_ARG(load_const_tok, MP_TOKEN_KW_NONE);
    72b0:	68fb      	ldr	r3, [r7, #12]
    72b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    72b4:	210e      	movs	r1, #14
    72b6:	4618      	mov	r0, r3
    72b8:	f003 f856 	bl	a368 <mp_emit_bc_load_const_tok>
            EMIT_ARG(label_assign, l3);
    72bc:	68fb      	ldr	r3, [r7, #12]
    72be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    72c0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
    72c2:	4618      	mov	r0, r3
    72c4:	f002 ffd2 	bl	a26c <mp_emit_bc_label_assign>
            EMIT_ARG(load_const_tok, MP_TOKEN_KW_NONE);
    72c8:	68fb      	ldr	r3, [r7, #12]
    72ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    72cc:	210e      	movs	r1, #14
    72ce:	4618      	mov	r0, r3
    72d0:	f003 f84a 	bl	a368 <mp_emit_bc_load_const_tok>
            compile_store_id(comp, qstr_exception_local);
    72d4:	6b39      	ldr	r1, [r7, #48]	; 0x30
    72d6:	68f8      	ldr	r0, [r7, #12]
    72d8:	f7fd fe3a 	bl	4f50 <compile_store_id>
            compile_delete_id(comp, qstr_exception_local);
    72dc:	6b39      	ldr	r1, [r7, #48]	; 0x30
    72de:	68f8      	ldr	r0, [r7, #12]
    72e0:	f7fd fe54 	bl	4f8c <compile_delete_id>

            compile_decrease_except_level(comp);
    72e4:	68f8      	ldr	r0, [r7, #12]
    72e6:	f7fd fd5c 	bl	4da2 <compile_decrease_except_level>
            EMIT(end_finally);
    72ea:	68fb      	ldr	r3, [r7, #12]
    72ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    72ee:	4618      	mov	r0, r3
    72f0:	f003 fb1c 	bl	a92c <mp_emit_bc_end_finally>
        }
        EMIT_ARG(jump, l2);
    72f4:	68fb      	ldr	r3, [r7, #12]
    72f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    72f8:	69f9      	ldr	r1, [r7, #28]
    72fa:	4618      	mov	r0, r3
    72fc:	f003 fa40 	bl	a780 <mp_emit_bc_jump>
        EMIT_ARG(label_assign, end_finally_label);
    7300:	68fb      	ldr	r3, [r7, #12]
    7302:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7304:	6979      	ldr	r1, [r7, #20]
    7306:	4618      	mov	r0, r3
    7308:	f002 ffb0 	bl	a26c <mp_emit_bc_label_assign>
        EMIT_ARG(adjust_stack_size, 1); // stack adjust for the exception instance
    730c:	68fb      	ldr	r3, [r7, #12]
    730e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7310:	2101      	movs	r1, #1
    7312:	4618      	mov	r0, r3
    7314:	f002 ff5b 	bl	a1ce <mp_emit_bc_adjust_stack_size>
    for (int i = 0; i < n_except; i++) {
    7318:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    731a:	3301      	adds	r3, #1
    731c:	637b      	str	r3, [r7, #52]	; 0x34
    731e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    7320:	687b      	ldr	r3, [r7, #4]
    7322:	429a      	cmp	r2, r3
    7324:	f6ff af1c 	blt.w	7160 <compile_try_except+0x74>
    }

    compile_decrease_except_level(comp);
    7328:	68f8      	ldr	r0, [r7, #12]
    732a:	f7fd fd3a 	bl	4da2 <compile_decrease_except_level>
    EMIT(end_finally);
    732e:	68fb      	ldr	r3, [r7, #12]
    7330:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7332:	4618      	mov	r0, r3
    7334:	f003 fafa 	bl	a92c <mp_emit_bc_end_finally>
    EMIT(end_except_handler);
    7338:	68fb      	ldr	r3, [r7, #12]
    733a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    733c:	4618      	mov	r0, r3
    733e:	f003 fd71 	bl	ae24 <mp_emit_bc_end_except_handler>

    EMIT_ARG(label_assign, success_label);
    7342:	68fb      	ldr	r3, [r7, #12]
    7344:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7346:	6a39      	ldr	r1, [r7, #32]
    7348:	4618      	mov	r0, r3
    734a:	f002 ff8f 	bl	a26c <mp_emit_bc_label_assign>
    compile_node(comp, pn_else); // else block, can be null
    734e:	6c39      	ldr	r1, [r7, #64]	; 0x40
    7350:	68f8      	ldr	r0, [r7, #12]
    7352:	f001 fb4e 	bl	89f2 <compile_node>
    EMIT_ARG(label_assign, l2);
    7356:	68fb      	ldr	r3, [r7, #12]
    7358:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    735a:	69f9      	ldr	r1, [r7, #28]
    735c:	4618      	mov	r0, r3
    735e:	f002 ff85 	bl	a26c <mp_emit_bc_label_assign>
}
    7362:	3738      	adds	r7, #56	; 0x38
    7364:	46bd      	mov	sp, r7
    7366:	bd80      	pop	{r7, pc}
    7368:	0001e570 	.word	0x0001e570
    736c:	0001ed28 	.word	0x0001ed28
    7370:	0001e084 	.word	0x0001e084
    7374:	0001e5b0 	.word	0x0001e5b0

00007378 <compile_try_finally>:

STATIC void compile_try_finally(compiler_t *comp, mp_parse_node_t pn_body, int n_except, mp_parse_node_t *pn_except, mp_parse_node_t pn_else, mp_parse_node_t pn_finally) {
    7378:	b580      	push	{r7, lr}
    737a:	b088      	sub	sp, #32
    737c:	af02      	add	r7, sp, #8
    737e:	60f8      	str	r0, [r7, #12]
    7380:	60b9      	str	r1, [r7, #8]
    7382:	607a      	str	r2, [r7, #4]
    7384:	603b      	str	r3, [r7, #0]
    uint l_finally_block = comp_next_label(comp);
    7386:	68f8      	ldr	r0, [r7, #12]
    7388:	f7fd fce0 	bl	4d4c <comp_next_label>
    738c:	6178      	str	r0, [r7, #20]

    EMIT_ARG(setup_block, l_finally_block, MP_EMIT_SETUP_BLOCK_FINALLY);
    738e:	68fb      	ldr	r3, [r7, #12]
    7390:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7392:	2203      	movs	r2, #3
    7394:	6979      	ldr	r1, [r7, #20]
    7396:	4618      	mov	r0, r3
    7398:	f003 fa88 	bl	a8ac <mp_emit_bc_setup_block>
    compile_increase_except_level(comp);
    739c:	68f8      	ldr	r0, [r7, #12]
    739e:	f7fd fce4 	bl	4d6a <compile_increase_except_level>

    if (n_except == 0) {
    73a2:	687b      	ldr	r3, [r7, #4]
    73a4:	2b00      	cmp	r3, #0
    73a6:	d11b      	bne.n	73e0 <compile_try_finally+0x68>
        assert(MP_PARSE_NODE_IS_NULL(pn_else));
    73a8:	6a3b      	ldr	r3, [r7, #32]
    73aa:	2b00      	cmp	r3, #0
    73ac:	d006      	beq.n	73bc <compile_try_finally+0x44>
    73ae:	4b21      	ldr	r3, [pc, #132]	; (7434 <compile_try_finally+0xbc>)
    73b0:	4a21      	ldr	r2, [pc, #132]	; (7438 <compile_try_finally+0xc0>)
    73b2:	f240 614d 	movw	r1, #1613	; 0x64d
    73b6:	4821      	ldr	r0, [pc, #132]	; (743c <compile_try_finally+0xc4>)
    73b8:	f013 ff00 	bl	1b1bc <__assert_func>
        EMIT_ARG(adjust_stack_size, 3); // stack adjust for possible UNWIND_JUMP state
    73bc:	68fb      	ldr	r3, [r7, #12]
    73be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    73c0:	2103      	movs	r1, #3
    73c2:	4618      	mov	r0, r3
    73c4:	f002 ff03 	bl	a1ce <mp_emit_bc_adjust_stack_size>
        compile_node(comp, pn_body);
    73c8:	68b9      	ldr	r1, [r7, #8]
    73ca:	68f8      	ldr	r0, [r7, #12]
    73cc:	f001 fb11 	bl	89f2 <compile_node>
        EMIT_ARG(adjust_stack_size, -3);
    73d0:	68fb      	ldr	r3, [r7, #12]
    73d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    73d4:	f06f 0102 	mvn.w	r1, #2
    73d8:	4618      	mov	r0, r3
    73da:	f002 fef8 	bl	a1ce <mp_emit_bc_adjust_stack_size>
    73de:	e007      	b.n	73f0 <compile_try_finally+0x78>
    } else {
        compile_try_except(comp, pn_body, n_except, pn_except, pn_else);
    73e0:	6a3b      	ldr	r3, [r7, #32]
    73e2:	9300      	str	r3, [sp, #0]
    73e4:	683b      	ldr	r3, [r7, #0]
    73e6:	687a      	ldr	r2, [r7, #4]
    73e8:	68b9      	ldr	r1, [r7, #8]
    73ea:	68f8      	ldr	r0, [r7, #12]
    73ec:	f7ff fe7e 	bl	70ec <compile_try_except>
    }
    EMIT(pop_block);
    73f0:	68fb      	ldr	r3, [r7, #12]
    73f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    73f4:	4618      	mov	r0, r3
    73f6:	f003 fae7 	bl	a9c8 <mp_emit_bc_pop_block>
    EMIT_ARG(load_const_tok, MP_TOKEN_KW_NONE);
    73fa:	68fb      	ldr	r3, [r7, #12]
    73fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    73fe:	210e      	movs	r1, #14
    7400:	4618      	mov	r0, r3
    7402:	f002 ffb1 	bl	a368 <mp_emit_bc_load_const_tok>
    EMIT_ARG(label_assign, l_finally_block);
    7406:	68fb      	ldr	r3, [r7, #12]
    7408:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    740a:	6979      	ldr	r1, [r7, #20]
    740c:	4618      	mov	r0, r3
    740e:	f002 ff2d 	bl	a26c <mp_emit_bc_label_assign>
    compile_node(comp, pn_finally);
    7412:	6a79      	ldr	r1, [r7, #36]	; 0x24
    7414:	68f8      	ldr	r0, [r7, #12]
    7416:	f001 faec 	bl	89f2 <compile_node>

    compile_decrease_except_level(comp);
    741a:	68f8      	ldr	r0, [r7, #12]
    741c:	f7fd fcc1 	bl	4da2 <compile_decrease_except_level>
    EMIT(end_finally);
    7420:	68fb      	ldr	r3, [r7, #12]
    7422:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7424:	4618      	mov	r0, r3
    7426:	f003 fa81 	bl	a92c <mp_emit_bc_end_finally>
}
    742a:	bf00      	nop
    742c:	3718      	adds	r7, #24
    742e:	46bd      	mov	sp, r7
    7430:	bd80      	pop	{r7, pc}
    7432:	bf00      	nop
    7434:	0001e5d0 	.word	0x0001e5d0
    7438:	0001ed3c 	.word	0x0001ed3c
    743c:	0001e084 	.word	0x0001e084

00007440 <compile_try_stmt>:

STATIC void compile_try_stmt(compiler_t *comp, mp_parse_node_struct_t *pns) {
    7440:	b580      	push	{r7, lr}
    7442:	b08a      	sub	sp, #40	; 0x28
    7444:	af02      	add	r7, sp, #8
    7446:	6078      	str	r0, [r7, #4]
    7448:	6039      	str	r1, [r7, #0]
    assert(MP_PARSE_NODE_IS_STRUCT(pns->nodes[1])); // should be
    744a:	683b      	ldr	r3, [r7, #0]
    744c:	68db      	ldr	r3, [r3, #12]
    744e:	2b00      	cmp	r3, #0
    7450:	d005      	beq.n	745e <compile_try_stmt+0x1e>
    7452:	683b      	ldr	r3, [r7, #0]
    7454:	68db      	ldr	r3, [r3, #12]
    7456:	f003 0303 	and.w	r3, r3, #3
    745a:	2b00      	cmp	r3, #0
    745c:	d006      	beq.n	746c <compile_try_stmt+0x2c>
    745e:	4b30      	ldr	r3, [pc, #192]	; (7520 <compile_try_stmt+0xe0>)
    7460:	4a30      	ldr	r2, [pc, #192]	; (7524 <compile_try_stmt+0xe4>)
    7462:	f240 615e 	movw	r1, #1630	; 0x65e
    7466:	4830      	ldr	r0, [pc, #192]	; (7528 <compile_try_stmt+0xe8>)
    7468:	f013 fea8 	bl	1b1bc <__assert_func>
    {
        mp_parse_node_struct_t *pns2 = (mp_parse_node_struct_t*)pns->nodes[1];
    746c:	683b      	ldr	r3, [r7, #0]
    746e:	68db      	ldr	r3, [r3, #12]
    7470:	61fb      	str	r3, [r7, #28]
        if (MP_PARSE_NODE_STRUCT_KIND(pns2) == PN_try_stmt_finally) {
    7472:	69fb      	ldr	r3, [r7, #28]
    7474:	685b      	ldr	r3, [r3, #4]
    7476:	b2db      	uxtb	r3, r3
    7478:	2b71      	cmp	r3, #113	; 0x71
    747a:	d10c      	bne.n	7496 <compile_try_stmt+0x56>
            // just try-finally
            compile_try_finally(comp, pns->nodes[0], 0, NULL, MP_PARSE_NODE_NULL, pns2->nodes[0]);
    747c:	683b      	ldr	r3, [r7, #0]
    747e:	6899      	ldr	r1, [r3, #8]
    7480:	69fb      	ldr	r3, [r7, #28]
    7482:	689b      	ldr	r3, [r3, #8]
    7484:	9301      	str	r3, [sp, #4]
    7486:	2300      	movs	r3, #0
    7488:	9300      	str	r3, [sp, #0]
    748a:	2300      	movs	r3, #0
    748c:	2200      	movs	r2, #0
    748e:	6878      	ldr	r0, [r7, #4]
    7490:	f7ff ff72 	bl	7378 <compile_try_finally>
            mp_parse_node_t *pn_excepts;
            int n_except = mp_parse_node_extract_list(&pns->nodes[1], PN_try_stmt_except_list, &pn_excepts);
            compile_try_except(comp, pns->nodes[0], n_except, pn_excepts, MP_PARSE_NODE_NULL);
        }
    }
}
    7494:	e040      	b.n	7518 <compile_try_stmt+0xd8>
        } else if (MP_PARSE_NODE_STRUCT_KIND(pns2) == PN_try_stmt_except_and_more) {
    7496:	69fb      	ldr	r3, [r7, #28]
    7498:	685b      	ldr	r3, [r3, #4]
    749a:	b2db      	uxtb	r3, r3
    749c:	2b6d      	cmp	r3, #109	; 0x6d
    749e:	d128      	bne.n	74f2 <compile_try_stmt+0xb2>
            int n_except = mp_parse_node_extract_list(&pns2->nodes[0], PN_try_stmt_except_list, &pn_excepts);
    74a0:	69fb      	ldr	r3, [r7, #28]
    74a2:	3308      	adds	r3, #8
    74a4:	f107 0210 	add.w	r2, r7, #16
    74a8:	2170      	movs	r1, #112	; 0x70
    74aa:	4618      	mov	r0, r3
    74ac:	f7fc fb3c 	bl	3b28 <mp_parse_node_extract_list>
    74b0:	61b8      	str	r0, [r7, #24]
            if (MP_PARSE_NODE_IS_NULL(pns2->nodes[2])) {
    74b2:	69fb      	ldr	r3, [r7, #28]
    74b4:	691b      	ldr	r3, [r3, #16]
    74b6:	2b00      	cmp	r3, #0
    74b8:	d10b      	bne.n	74d2 <compile_try_stmt+0x92>
                compile_try_except(comp, pns->nodes[0], n_except, pn_excepts, pns2->nodes[1]);
    74ba:	683b      	ldr	r3, [r7, #0]
    74bc:	6899      	ldr	r1, [r3, #8]
    74be:	693a      	ldr	r2, [r7, #16]
    74c0:	69fb      	ldr	r3, [r7, #28]
    74c2:	68db      	ldr	r3, [r3, #12]
    74c4:	9300      	str	r3, [sp, #0]
    74c6:	4613      	mov	r3, r2
    74c8:	69ba      	ldr	r2, [r7, #24]
    74ca:	6878      	ldr	r0, [r7, #4]
    74cc:	f7ff fe0e 	bl	70ec <compile_try_except>
}
    74d0:	e022      	b.n	7518 <compile_try_stmt+0xd8>
                compile_try_finally(comp, pns->nodes[0], n_except, pn_excepts, pns2->nodes[1], ((mp_parse_node_struct_t*)pns2->nodes[2])->nodes[0]);
    74d2:	683b      	ldr	r3, [r7, #0]
    74d4:	6899      	ldr	r1, [r3, #8]
    74d6:	6938      	ldr	r0, [r7, #16]
    74d8:	69fb      	ldr	r3, [r7, #28]
    74da:	68db      	ldr	r3, [r3, #12]
    74dc:	69fa      	ldr	r2, [r7, #28]
    74de:	6912      	ldr	r2, [r2, #16]
    74e0:	6892      	ldr	r2, [r2, #8]
    74e2:	9201      	str	r2, [sp, #4]
    74e4:	9300      	str	r3, [sp, #0]
    74e6:	4603      	mov	r3, r0
    74e8:	69ba      	ldr	r2, [r7, #24]
    74ea:	6878      	ldr	r0, [r7, #4]
    74ec:	f7ff ff44 	bl	7378 <compile_try_finally>
}
    74f0:	e012      	b.n	7518 <compile_try_stmt+0xd8>
            int n_except = mp_parse_node_extract_list(&pns->nodes[1], PN_try_stmt_except_list, &pn_excepts);
    74f2:	683b      	ldr	r3, [r7, #0]
    74f4:	330c      	adds	r3, #12
    74f6:	f107 020c 	add.w	r2, r7, #12
    74fa:	2170      	movs	r1, #112	; 0x70
    74fc:	4618      	mov	r0, r3
    74fe:	f7fc fb13 	bl	3b28 <mp_parse_node_extract_list>
    7502:	6178      	str	r0, [r7, #20]
            compile_try_except(comp, pns->nodes[0], n_except, pn_excepts, MP_PARSE_NODE_NULL);
    7504:	683b      	ldr	r3, [r7, #0]
    7506:	6899      	ldr	r1, [r3, #8]
    7508:	68fa      	ldr	r2, [r7, #12]
    750a:	2300      	movs	r3, #0
    750c:	9300      	str	r3, [sp, #0]
    750e:	4613      	mov	r3, r2
    7510:	697a      	ldr	r2, [r7, #20]
    7512:	6878      	ldr	r0, [r7, #4]
    7514:	f7ff fdea 	bl	70ec <compile_try_except>
}
    7518:	bf00      	nop
    751a:	3720      	adds	r7, #32
    751c:	46bd      	mov	sp, r7
    751e:	bd80      	pop	{r7, pc}
    7520:	0001e5f0 	.word	0x0001e5f0
    7524:	0001ed50 	.word	0x0001ed50
    7528:	0001e084 	.word	0x0001e084

0000752c <compile_with_stmt_helper>:

STATIC void compile_with_stmt_helper(compiler_t *comp, int n, mp_parse_node_t *nodes, mp_parse_node_t body) {
    752c:	b580      	push	{r7, lr}
    752e:	b086      	sub	sp, #24
    7530:	af00      	add	r7, sp, #0
    7532:	60f8      	str	r0, [r7, #12]
    7534:	60b9      	str	r1, [r7, #8]
    7536:	607a      	str	r2, [r7, #4]
    7538:	603b      	str	r3, [r7, #0]
    if (n == 0) {
    753a:	68bb      	ldr	r3, [r7, #8]
    753c:	2b00      	cmp	r3, #0
    753e:	d104      	bne.n	754a <compile_with_stmt_helper+0x1e>
        // no more pre-bits, compile the body of the with
        compile_node(comp, body);
    7540:	6839      	ldr	r1, [r7, #0]
    7542:	68f8      	ldr	r0, [r7, #12]
    7544:	f001 fa55 	bl	89f2 <compile_node>
        // finish this with block
        EMIT_ARG(with_cleanup, l_end);
        compile_decrease_except_level(comp);
        EMIT(end_finally);
    }
}
    7548:	e056      	b.n	75f8 <compile_with_stmt_helper+0xcc>
        uint l_end = comp_next_label(comp);
    754a:	68f8      	ldr	r0, [r7, #12]
    754c:	f7fd fbfe 	bl	4d4c <comp_next_label>
    7550:	6178      	str	r0, [r7, #20]
        if (MP_PARSE_NODE_IS_STRUCT_KIND(nodes[0], PN_with_item)) {
    7552:	687b      	ldr	r3, [r7, #4]
    7554:	681b      	ldr	r3, [r3, #0]
    7556:	2b00      	cmp	r3, #0
    7558:	d023      	beq.n	75a2 <compile_with_stmt_helper+0x76>
    755a:	687b      	ldr	r3, [r7, #4]
    755c:	681b      	ldr	r3, [r3, #0]
    755e:	f003 0303 	and.w	r3, r3, #3
    7562:	2b00      	cmp	r3, #0
    7564:	d11d      	bne.n	75a2 <compile_with_stmt_helper+0x76>
    7566:	687b      	ldr	r3, [r7, #4]
    7568:	681b      	ldr	r3, [r3, #0]
    756a:	685b      	ldr	r3, [r3, #4]
    756c:	b2db      	uxtb	r3, r3
    756e:	2b74      	cmp	r3, #116	; 0x74
    7570:	d117      	bne.n	75a2 <compile_with_stmt_helper+0x76>
            mp_parse_node_struct_t *pns = (mp_parse_node_struct_t*)nodes[0];
    7572:	687b      	ldr	r3, [r7, #4]
    7574:	681b      	ldr	r3, [r3, #0]
    7576:	613b      	str	r3, [r7, #16]
            compile_node(comp, pns->nodes[0]);
    7578:	693b      	ldr	r3, [r7, #16]
    757a:	689b      	ldr	r3, [r3, #8]
    757c:	4619      	mov	r1, r3
    757e:	68f8      	ldr	r0, [r7, #12]
    7580:	f001 fa37 	bl	89f2 <compile_node>
            EMIT_ARG(setup_block, l_end, MP_EMIT_SETUP_BLOCK_WITH);
    7584:	68fb      	ldr	r3, [r7, #12]
    7586:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7588:	2200      	movs	r2, #0
    758a:	6979      	ldr	r1, [r7, #20]
    758c:	4618      	mov	r0, r3
    758e:	f003 f98d 	bl	a8ac <mp_emit_bc_setup_block>
            c_assign(comp, pns->nodes[1], ASSIGN_STORE);
    7592:	693b      	ldr	r3, [r7, #16]
    7594:	68db      	ldr	r3, [r3, #12]
    7596:	2200      	movs	r2, #0
    7598:	4619      	mov	r1, r3
    759a:	68f8      	ldr	r0, [r7, #12]
    759c:	f7fd fffc 	bl	5598 <c_assign>
        if (MP_PARSE_NODE_IS_STRUCT_KIND(nodes[0], PN_with_item)) {
    75a0:	e011      	b.n	75c6 <compile_with_stmt_helper+0x9a>
            compile_node(comp, nodes[0]);
    75a2:	687b      	ldr	r3, [r7, #4]
    75a4:	681b      	ldr	r3, [r3, #0]
    75a6:	4619      	mov	r1, r3
    75a8:	68f8      	ldr	r0, [r7, #12]
    75aa:	f001 fa22 	bl	89f2 <compile_node>
            EMIT_ARG(setup_block, l_end, MP_EMIT_SETUP_BLOCK_WITH);
    75ae:	68fb      	ldr	r3, [r7, #12]
    75b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    75b2:	2200      	movs	r2, #0
    75b4:	6979      	ldr	r1, [r7, #20]
    75b6:	4618      	mov	r0, r3
    75b8:	f003 f978 	bl	a8ac <mp_emit_bc_setup_block>
            EMIT(pop_top);
    75bc:	68fb      	ldr	r3, [r7, #12]
    75be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    75c0:	4618      	mov	r0, r3
    75c2:	f003 f8ac 	bl	a71e <mp_emit_bc_pop_top>
        compile_increase_except_level(comp);
    75c6:	68f8      	ldr	r0, [r7, #12]
    75c8:	f7fd fbcf 	bl	4d6a <compile_increase_except_level>
        compile_with_stmt_helper(comp, n - 1, nodes + 1, body);
    75cc:	68bb      	ldr	r3, [r7, #8]
    75ce:	1e59      	subs	r1, r3, #1
    75d0:	687b      	ldr	r3, [r7, #4]
    75d2:	1d1a      	adds	r2, r3, #4
    75d4:	683b      	ldr	r3, [r7, #0]
    75d6:	68f8      	ldr	r0, [r7, #12]
    75d8:	f7ff ffa8 	bl	752c <compile_with_stmt_helper>
        EMIT_ARG(with_cleanup, l_end);
    75dc:	68fb      	ldr	r3, [r7, #12]
    75de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    75e0:	6979      	ldr	r1, [r7, #20]
    75e2:	4618      	mov	r0, r3
    75e4:	f003 f981 	bl	a8ea <mp_emit_bc_with_cleanup>
        compile_decrease_except_level(comp);
    75e8:	68f8      	ldr	r0, [r7, #12]
    75ea:	f7fd fbda 	bl	4da2 <compile_decrease_except_level>
        EMIT(end_finally);
    75ee:	68fb      	ldr	r3, [r7, #12]
    75f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    75f2:	4618      	mov	r0, r3
    75f4:	f003 f99a 	bl	a92c <mp_emit_bc_end_finally>
}
    75f8:	bf00      	nop
    75fa:	3718      	adds	r7, #24
    75fc:	46bd      	mov	sp, r7
    75fe:	bd80      	pop	{r7, pc}

00007600 <compile_with_stmt>:

STATIC void compile_with_stmt(compiler_t *comp, mp_parse_node_struct_t *pns) {
    7600:	b580      	push	{r7, lr}
    7602:	b084      	sub	sp, #16
    7604:	af00      	add	r7, sp, #0
    7606:	6078      	str	r0, [r7, #4]
    7608:	6039      	str	r1, [r7, #0]
    // get the nodes for the pre-bit of the with (the a as b, c as d, ... bit)
    mp_parse_node_t *nodes;
    int n = mp_parse_node_extract_list(&pns->nodes[0], PN_with_stmt_list, &nodes);
    760a:	683b      	ldr	r3, [r7, #0]
    760c:	3308      	adds	r3, #8
    760e:	f107 0208 	add.w	r2, r7, #8
    7612:	2173      	movs	r1, #115	; 0x73
    7614:	4618      	mov	r0, r3
    7616:	f7fc fa87 	bl	3b28 <mp_parse_node_extract_list>
    761a:	60f8      	str	r0, [r7, #12]
    assert(n > 0);
    761c:	68fb      	ldr	r3, [r7, #12]
    761e:	2b00      	cmp	r3, #0
    7620:	dc06      	bgt.n	7630 <compile_with_stmt+0x30>
    7622:	4b09      	ldr	r3, [pc, #36]	; (7648 <compile_with_stmt+0x48>)
    7624:	4a09      	ldr	r2, [pc, #36]	; (764c <compile_with_stmt+0x4c>)
    7626:	f240 619d 	movw	r1, #1693	; 0x69d
    762a:	4809      	ldr	r0, [pc, #36]	; (7650 <compile_with_stmt+0x50>)
    762c:	f013 fdc6 	bl	1b1bc <__assert_func>

    // compile in a nested fashion
    compile_with_stmt_helper(comp, n, nodes, pns->nodes[1]);
    7630:	68ba      	ldr	r2, [r7, #8]
    7632:	683b      	ldr	r3, [r7, #0]
    7634:	68db      	ldr	r3, [r3, #12]
    7636:	68f9      	ldr	r1, [r7, #12]
    7638:	6878      	ldr	r0, [r7, #4]
    763a:	f7ff ff77 	bl	752c <compile_with_stmt_helper>
}
    763e:	bf00      	nop
    7640:	3710      	adds	r7, #16
    7642:	46bd      	mov	sp, r7
    7644:	bd80      	pop	{r7, pc}
    7646:	bf00      	nop
    7648:	0001e618 	.word	0x0001e618
    764c:	0001ed64 	.word	0x0001ed64
    7650:	0001e084 	.word	0x0001e084

00007654 <compile_yield_from>:

STATIC void compile_yield_from(compiler_t *comp) {
    7654:	b580      	push	{r7, lr}
    7656:	b082      	sub	sp, #8
    7658:	af00      	add	r7, sp, #0
    765a:	6078      	str	r0, [r7, #4]
    EMIT_ARG(get_iter, false);
    765c:	687b      	ldr	r3, [r7, #4]
    765e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7660:	2100      	movs	r1, #0
    7662:	4618      	mov	r0, r3
    7664:	f003 f973 	bl	a94e <mp_emit_bc_get_iter>
    EMIT_ARG(load_const_tok, MP_TOKEN_KW_NONE);
    7668:	687b      	ldr	r3, [r7, #4]
    766a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    766c:	210e      	movs	r1, #14
    766e:	4618      	mov	r0, r3
    7670:	f002 fe7a 	bl	a368 <mp_emit_bc_load_const_tok>
    EMIT_ARG(yield, MP_EMIT_YIELD_FROM);
    7674:	687b      	ldr	r3, [r7, #4]
    7676:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7678:	2101      	movs	r1, #1
    767a:	4618      	mov	r0, r3
    767c:	f003 fba6 	bl	adcc <mp_emit_bc_yield>
}
    7680:	bf00      	nop
    7682:	3708      	adds	r7, #8
    7684:	46bd      	mov	sp, r7
    7686:	bd80      	pop	{r7, pc}

00007688 <compile_expr_stmt>:
        compile_async_with_stmt(comp, pns0);
    }
}
#endif

STATIC void compile_expr_stmt(compiler_t *comp, mp_parse_node_struct_t *pns) {
    7688:	b580      	push	{r7, lr}
    768a:	b088      	sub	sp, #32
    768c:	af00      	add	r7, sp, #0
    768e:	6078      	str	r0, [r7, #4]
    7690:	6039      	str	r1, [r7, #0]
    if (MP_PARSE_NODE_IS_NULL(pns->nodes[1])) {
    7692:	683b      	ldr	r3, [r7, #0]
    7694:	68db      	ldr	r3, [r3, #12]
    7696:	2b00      	cmp	r3, #0
    7698:	d149      	bne.n	772e <compile_expr_stmt+0xa6>
        if (comp->is_repl && comp->scope_cur->kind == SCOPE_MODULE) {
    769a:	687b      	ldr	r3, [r7, #4]
    769c:	791b      	ldrb	r3, [r3, #4]
    769e:	2b00      	cmp	r3, #0
    76a0:	d01b      	beq.n	76da <compile_expr_stmt+0x52>
    76a2:	687b      	ldr	r3, [r7, #4]
    76a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    76a6:	681b      	ldr	r3, [r3, #0]
    76a8:	2b00      	cmp	r3, #0
    76aa:	d116      	bne.n	76da <compile_expr_stmt+0x52>
            // for REPL, evaluate then print the expression
            compile_load_id(comp, MP_QSTR___repl_print__);
    76ac:	2120      	movs	r1, #32
    76ae:	6878      	ldr	r0, [r7, #4]
    76b0:	f7fd fc2f 	bl	4f12 <compile_load_id>
            compile_node(comp, pns->nodes[0]);
    76b4:	683b      	ldr	r3, [r7, #0]
    76b6:	689b      	ldr	r3, [r3, #8]
    76b8:	4619      	mov	r1, r3
    76ba:	6878      	ldr	r0, [r7, #4]
    76bc:	f001 f999 	bl	89f2 <compile_node>
            EMIT_ARG(call_function, 1, 0, 0);
    76c0:	687b      	ldr	r3, [r7, #4]
    76c2:	6a98      	ldr	r0, [r3, #40]	; 0x28
    76c4:	2300      	movs	r3, #0
    76c6:	2200      	movs	r2, #0
    76c8:	2101      	movs	r1, #1
    76ca:	f003 fb19 	bl	ad00 <mp_emit_bc_call_function>
            EMIT(pop_top);
    76ce:	687b      	ldr	r3, [r7, #4]
    76d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    76d2:	4618      	mov	r0, r3
    76d4:	f003 f823 	bl	a71e <mp_emit_bc_pop_top>
    76d8:	e0f7      	b.n	78ca <compile_expr_stmt+0x242>

        } else {
            // for non-REPL, evaluate then discard the expression
            if ((MP_PARSE_NODE_IS_LEAF(pns->nodes[0]) && !MP_PARSE_NODE_IS_ID(pns->nodes[0]))
    76da:	683b      	ldr	r3, [r7, #0]
    76dc:	689b      	ldr	r3, [r3, #8]
    76de:	f003 0303 	and.w	r3, r3, #3
    76e2:	2b00      	cmp	r3, #0
    76e4:	d006      	beq.n	76f4 <compile_expr_stmt+0x6c>
    76e6:	683b      	ldr	r3, [r7, #0]
    76e8:	689b      	ldr	r3, [r3, #8]
    76ea:	f003 030f 	and.w	r3, r3, #15
    76ee:	2b02      	cmp	r3, #2
    76f0:	f040 80eb 	bne.w	78ca <compile_expr_stmt+0x242>
                || MP_PARSE_NODE_IS_STRUCT_KIND(pns->nodes[0], PN_const_object)) {
    76f4:	683b      	ldr	r3, [r7, #0]
    76f6:	689b      	ldr	r3, [r3, #8]
    76f8:	2b00      	cmp	r3, #0
    76fa:	d00c      	beq.n	7716 <compile_expr_stmt+0x8e>
    76fc:	683b      	ldr	r3, [r7, #0]
    76fe:	689b      	ldr	r3, [r3, #8]
    7700:	f003 0303 	and.w	r3, r3, #3
    7704:	2b00      	cmp	r3, #0
    7706:	d106      	bne.n	7716 <compile_expr_stmt+0x8e>
    7708:	683b      	ldr	r3, [r7, #0]
    770a:	689b      	ldr	r3, [r3, #8]
    770c:	685b      	ldr	r3, [r3, #4]
    770e:	b2db      	uxtb	r3, r3
    7710:	2b35      	cmp	r3, #53	; 0x35
    7712:	f000 80da 	beq.w	78ca <compile_expr_stmt+0x242>
                // do nothing with a lonely constant
            } else {
                compile_node(comp, pns->nodes[0]); // just an expression
    7716:	683b      	ldr	r3, [r7, #0]
    7718:	689b      	ldr	r3, [r3, #8]
    771a:	4619      	mov	r1, r3
    771c:	6878      	ldr	r0, [r7, #4]
    771e:	f001 f968 	bl	89f2 <compile_node>
                EMIT(pop_top); // discard last result since this is a statement and leaves nothing on the stack
    7722:	687b      	ldr	r3, [r7, #4]
    7724:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7726:	4618      	mov	r0, r3
    7728:	f002 fff9 	bl	a71e <mp_emit_bc_pop_top>
            c_assign(comp, pns->nodes[0], ASSIGN_STORE); // lhs store
        }
    } else {
        goto plain_assign;
    }
}
    772c:	e0cd      	b.n	78ca <compile_expr_stmt+0x242>
    } else if (MP_PARSE_NODE_IS_STRUCT(pns->nodes[1])) {
    772e:	683b      	ldr	r3, [r7, #0]
    7730:	68db      	ldr	r3, [r3, #12]
    7732:	2b00      	cmp	r3, #0
    7734:	f000 80bb 	beq.w	78ae <compile_expr_stmt+0x226>
    7738:	683b      	ldr	r3, [r7, #0]
    773a:	68db      	ldr	r3, [r3, #12]
    773c:	f003 0303 	and.w	r3, r3, #3
    7740:	2b00      	cmp	r3, #0
    7742:	f040 80b4 	bne.w	78ae <compile_expr_stmt+0x226>
        mp_parse_node_struct_t *pns1 = (mp_parse_node_struct_t*)pns->nodes[1];
    7746:	683b      	ldr	r3, [r7, #0]
    7748:	68db      	ldr	r3, [r3, #12]
    774a:	617b      	str	r3, [r7, #20]
        int kind = MP_PARSE_NODE_STRUCT_KIND(pns1);
    774c:	697b      	ldr	r3, [r7, #20]
    774e:	685b      	ldr	r3, [r3, #4]
    7750:	b2db      	uxtb	r3, r3
    7752:	613b      	str	r3, [r7, #16]
        if (kind == PN_expr_stmt_augassign) {
    7754:	693b      	ldr	r3, [r7, #16]
    7756:	2b51      	cmp	r3, #81	; 0x51
    7758:	d16a      	bne.n	7830 <compile_expr_stmt+0x1a8>
            c_assign(comp, pns->nodes[0], ASSIGN_AUG_LOAD); // lhs load for aug assign
    775a:	683b      	ldr	r3, [r7, #0]
    775c:	689b      	ldr	r3, [r3, #8]
    775e:	2201      	movs	r2, #1
    7760:	4619      	mov	r1, r3
    7762:	6878      	ldr	r0, [r7, #4]
    7764:	f7fd ff18 	bl	5598 <c_assign>
            compile_node(comp, pns1->nodes[1]); // rhs
    7768:	697b      	ldr	r3, [r7, #20]
    776a:	68db      	ldr	r3, [r3, #12]
    776c:	4619      	mov	r1, r3
    776e:	6878      	ldr	r0, [r7, #4]
    7770:	f001 f93f 	bl	89f2 <compile_node>
            assert(MP_PARSE_NODE_IS_TOKEN(pns1->nodes[0]));
    7774:	697b      	ldr	r3, [r7, #20]
    7776:	689b      	ldr	r3, [r3, #8]
    7778:	f003 030f 	and.w	r3, r3, #15
    777c:	2b0e      	cmp	r3, #14
    777e:	d006      	beq.n	778e <compile_expr_stmt+0x106>
    7780:	4b54      	ldr	r3, [pc, #336]	; (78d4 <compile_expr_stmt+0x24c>)
    7782:	4a55      	ldr	r2, [pc, #340]	; (78d8 <compile_expr_stmt+0x250>)
    7784:	f240 7171 	movw	r1, #1905	; 0x771
    7788:	4854      	ldr	r0, [pc, #336]	; (78dc <compile_expr_stmt+0x254>)
    778a:	f013 fd17 	bl	1b1bc <__assert_func>
            switch (MP_PARSE_NODE_LEAF_ARG(pns1->nodes[0])) {
    778e:	697b      	ldr	r3, [r7, #20]
    7790:	689b      	ldr	r3, [r3, #8]
    7792:	091b      	lsrs	r3, r3, #4
    7794:	3b4e      	subs	r3, #78	; 0x4e
    7796:	2b0a      	cmp	r3, #10
    7798:	d839      	bhi.n	780e <compile_expr_stmt+0x186>
    779a:	a201      	add	r2, pc, #4	; (adr r2, 77a0 <compile_expr_stmt+0x118>)
    779c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    77a0:	000077eb 	.word	0x000077eb
    77a4:	000077f1 	.word	0x000077f1
    77a8:	000077f7 	.word	0x000077f7
    77ac:	00007803 	.word	0x00007803
    77b0:	000077fd 	.word	0x000077fd
    77b4:	00007809 	.word	0x00007809
    77b8:	000077d9 	.word	0x000077d9
    77bc:	000077cd 	.word	0x000077cd
    77c0:	000077d3 	.word	0x000077d3
    77c4:	000077e5 	.word	0x000077e5
    77c8:	000077df 	.word	0x000077df
                case MP_TOKEN_DEL_PIPE_EQUAL: op = MP_BINARY_OP_INPLACE_OR; break;
    77cc:	2309      	movs	r3, #9
    77ce:	61fb      	str	r3, [r7, #28]
    77d0:	e020      	b.n	7814 <compile_expr_stmt+0x18c>
                case MP_TOKEN_DEL_CARET_EQUAL: op = MP_BINARY_OP_INPLACE_XOR; break;
    77d2:	230a      	movs	r3, #10
    77d4:	61fb      	str	r3, [r7, #28]
    77d6:	e01d      	b.n	7814 <compile_expr_stmt+0x18c>
                case MP_TOKEN_DEL_AMPERSAND_EQUAL: op = MP_BINARY_OP_INPLACE_AND; break;
    77d8:	230b      	movs	r3, #11
    77da:	61fb      	str	r3, [r7, #28]
    77dc:	e01a      	b.n	7814 <compile_expr_stmt+0x18c>
                case MP_TOKEN_DEL_DBL_LESS_EQUAL: op = MP_BINARY_OP_INPLACE_LSHIFT; break;
    77de:	230c      	movs	r3, #12
    77e0:	61fb      	str	r3, [r7, #28]
    77e2:	e017      	b.n	7814 <compile_expr_stmt+0x18c>
                case MP_TOKEN_DEL_DBL_MORE_EQUAL: op = MP_BINARY_OP_INPLACE_RSHIFT; break;
    77e4:	230d      	movs	r3, #13
    77e6:	61fb      	str	r3, [r7, #28]
    77e8:	e014      	b.n	7814 <compile_expr_stmt+0x18c>
                case MP_TOKEN_DEL_PLUS_EQUAL: op = MP_BINARY_OP_INPLACE_ADD; break;
    77ea:	230e      	movs	r3, #14
    77ec:	61fb      	str	r3, [r7, #28]
    77ee:	e011      	b.n	7814 <compile_expr_stmt+0x18c>
                case MP_TOKEN_DEL_MINUS_EQUAL: op = MP_BINARY_OP_INPLACE_SUBTRACT; break;
    77f0:	230f      	movs	r3, #15
    77f2:	61fb      	str	r3, [r7, #28]
    77f4:	e00e      	b.n	7814 <compile_expr_stmt+0x18c>
                case MP_TOKEN_DEL_STAR_EQUAL: op = MP_BINARY_OP_INPLACE_MULTIPLY; break;
    77f6:	2310      	movs	r3, #16
    77f8:	61fb      	str	r3, [r7, #28]
    77fa:	e00b      	b.n	7814 <compile_expr_stmt+0x18c>
                case MP_TOKEN_DEL_DBL_SLASH_EQUAL: op = MP_BINARY_OP_INPLACE_FLOOR_DIVIDE; break;
    77fc:	2311      	movs	r3, #17
    77fe:	61fb      	str	r3, [r7, #28]
    7800:	e008      	b.n	7814 <compile_expr_stmt+0x18c>
                case MP_TOKEN_DEL_SLASH_EQUAL: op = MP_BINARY_OP_INPLACE_TRUE_DIVIDE; break;
    7802:	2312      	movs	r3, #18
    7804:	61fb      	str	r3, [r7, #28]
    7806:	e005      	b.n	7814 <compile_expr_stmt+0x18c>
                case MP_TOKEN_DEL_PERCENT_EQUAL: op = MP_BINARY_OP_INPLACE_MODULO; break;
    7808:	2313      	movs	r3, #19
    780a:	61fb      	str	r3, [r7, #28]
    780c:	e002      	b.n	7814 <compile_expr_stmt+0x18c>
                case MP_TOKEN_DEL_DBL_STAR_EQUAL: default: op = MP_BINARY_OP_INPLACE_POWER; break;
    780e:	2314      	movs	r3, #20
    7810:	61fb      	str	r3, [r7, #28]
    7812:	bf00      	nop
            EMIT_ARG(binary_op, op);
    7814:	687b      	ldr	r3, [r7, #4]
    7816:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7818:	69f9      	ldr	r1, [r7, #28]
    781a:	4618      	mov	r0, r3
    781c:	f003 f909 	bl	aa32 <mp_emit_bc_binary_op>
            c_assign(comp, pns->nodes[0], ASSIGN_AUG_STORE); // lhs store for aug assign
    7820:	683b      	ldr	r3, [r7, #0]
    7822:	689b      	ldr	r3, [r3, #8]
    7824:	2202      	movs	r2, #2
    7826:	4619      	mov	r1, r3
    7828:	6878      	ldr	r0, [r7, #4]
    782a:	f7fd feb5 	bl	5598 <c_assign>
}
    782e:	e04c      	b.n	78ca <compile_expr_stmt+0x242>
        } else if (kind == PN_expr_stmt_assign_list) {
    7830:	693b      	ldr	r3, [r7, #16]
    7832:	2b52      	cmp	r3, #82	; 0x52
    7834:	d13b      	bne.n	78ae <compile_expr_stmt+0x226>
            int rhs = MP_PARSE_NODE_STRUCT_NUM_NODES(pns1) - 1;
    7836:	697b      	ldr	r3, [r7, #20]
    7838:	685b      	ldr	r3, [r3, #4]
    783a:	0a1b      	lsrs	r3, r3, #8
    783c:	3b01      	subs	r3, #1
    783e:	60fb      	str	r3, [r7, #12]
            compile_node(comp, pns1->nodes[rhs]); // rhs
    7840:	697b      	ldr	r3, [r7, #20]
    7842:	68fa      	ldr	r2, [r7, #12]
    7844:	3202      	adds	r2, #2
    7846:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    784a:	4619      	mov	r1, r3
    784c:	6878      	ldr	r0, [r7, #4]
    784e:	f001 f8d0 	bl	89f2 <compile_node>
            if (rhs > 0) {
    7852:	68fb      	ldr	r3, [r7, #12]
    7854:	2b00      	cmp	r3, #0
    7856:	dd04      	ble.n	7862 <compile_expr_stmt+0x1da>
                EMIT(dup_top);
    7858:	687b      	ldr	r3, [r7, #4]
    785a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    785c:	4618      	mov	r0, r3
    785e:	f002 ff3e 	bl	a6de <mp_emit_bc_dup_top>
            c_assign(comp, pns->nodes[0], ASSIGN_STORE); // lhs store
    7862:	683b      	ldr	r3, [r7, #0]
    7864:	689b      	ldr	r3, [r3, #8]
    7866:	2200      	movs	r2, #0
    7868:	4619      	mov	r1, r3
    786a:	6878      	ldr	r0, [r7, #4]
    786c:	f7fd fe94 	bl	5598 <c_assign>
            for (int i = 0; i < rhs; i++) {
    7870:	2300      	movs	r3, #0
    7872:	61bb      	str	r3, [r7, #24]
    7874:	e016      	b.n	78a4 <compile_expr_stmt+0x21c>
                if (i + 1 < rhs) {
    7876:	69bb      	ldr	r3, [r7, #24]
    7878:	1c5a      	adds	r2, r3, #1
    787a:	68fb      	ldr	r3, [r7, #12]
    787c:	429a      	cmp	r2, r3
    787e:	da04      	bge.n	788a <compile_expr_stmt+0x202>
                    EMIT(dup_top);
    7880:	687b      	ldr	r3, [r7, #4]
    7882:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7884:	4618      	mov	r0, r3
    7886:	f002 ff2a 	bl	a6de <mp_emit_bc_dup_top>
                c_assign(comp, pns1->nodes[i], ASSIGN_STORE); // middle store
    788a:	697b      	ldr	r3, [r7, #20]
    788c:	69ba      	ldr	r2, [r7, #24]
    788e:	3202      	adds	r2, #2
    7890:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    7894:	2200      	movs	r2, #0
    7896:	4619      	mov	r1, r3
    7898:	6878      	ldr	r0, [r7, #4]
    789a:	f7fd fe7d 	bl	5598 <c_assign>
            for (int i = 0; i < rhs; i++) {
    789e:	69bb      	ldr	r3, [r7, #24]
    78a0:	3301      	adds	r3, #1
    78a2:	61bb      	str	r3, [r7, #24]
    78a4:	69ba      	ldr	r2, [r7, #24]
    78a6:	68fb      	ldr	r3, [r7, #12]
    78a8:	429a      	cmp	r2, r3
    78aa:	dbe4      	blt.n	7876 <compile_expr_stmt+0x1ee>
}
    78ac:	e00d      	b.n	78ca <compile_expr_stmt+0x242>
            compile_node(comp, pns->nodes[1]); // rhs
    78ae:	683b      	ldr	r3, [r7, #0]
    78b0:	68db      	ldr	r3, [r3, #12]
    78b2:	4619      	mov	r1, r3
    78b4:	6878      	ldr	r0, [r7, #4]
    78b6:	f001 f89c 	bl	89f2 <compile_node>
            c_assign(comp, pns->nodes[0], ASSIGN_STORE); // lhs store
    78ba:	683b      	ldr	r3, [r7, #0]
    78bc:	689b      	ldr	r3, [r3, #8]
    78be:	2200      	movs	r2, #0
    78c0:	4619      	mov	r1, r3
    78c2:	6878      	ldr	r0, [r7, #4]
    78c4:	f7fd fe68 	bl	5598 <c_assign>
}
    78c8:	e7ff      	b.n	78ca <compile_expr_stmt+0x242>
    78ca:	bf00      	nop
    78cc:	3720      	adds	r7, #32
    78ce:	46bd      	mov	sp, r7
    78d0:	bd80      	pop	{r7, pc}
    78d2:	bf00      	nop
    78d4:	0001e620 	.word	0x0001e620
    78d8:	0001ed78 	.word	0x0001ed78
    78dc:	0001e084 	.word	0x0001e084

000078e0 <c_binary_op>:

STATIC void c_binary_op(compiler_t *comp, mp_parse_node_struct_t *pns, mp_binary_op_t binary_op) {
    78e0:	b580      	push	{r7, lr}
    78e2:	b086      	sub	sp, #24
    78e4:	af00      	add	r7, sp, #0
    78e6:	60f8      	str	r0, [r7, #12]
    78e8:	60b9      	str	r1, [r7, #8]
    78ea:	607a      	str	r2, [r7, #4]
    int num_nodes = MP_PARSE_NODE_STRUCT_NUM_NODES(pns);
    78ec:	68bb      	ldr	r3, [r7, #8]
    78ee:	685b      	ldr	r3, [r3, #4]
    78f0:	0a1b      	lsrs	r3, r3, #8
    78f2:	613b      	str	r3, [r7, #16]
    compile_node(comp, pns->nodes[0]);
    78f4:	68bb      	ldr	r3, [r7, #8]
    78f6:	689b      	ldr	r3, [r3, #8]
    78f8:	4619      	mov	r1, r3
    78fa:	68f8      	ldr	r0, [r7, #12]
    78fc:	f001 f879 	bl	89f2 <compile_node>
    for (int i = 1; i < num_nodes; i += 1) {
    7900:	2301      	movs	r3, #1
    7902:	617b      	str	r3, [r7, #20]
    7904:	e011      	b.n	792a <c_binary_op+0x4a>
        compile_node(comp, pns->nodes[i]);
    7906:	68bb      	ldr	r3, [r7, #8]
    7908:	697a      	ldr	r2, [r7, #20]
    790a:	3202      	adds	r2, #2
    790c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    7910:	4619      	mov	r1, r3
    7912:	68f8      	ldr	r0, [r7, #12]
    7914:	f001 f86d 	bl	89f2 <compile_node>
        EMIT_ARG(binary_op, binary_op);
    7918:	68fb      	ldr	r3, [r7, #12]
    791a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    791c:	6879      	ldr	r1, [r7, #4]
    791e:	4618      	mov	r0, r3
    7920:	f003 f887 	bl	aa32 <mp_emit_bc_binary_op>
    for (int i = 1; i < num_nodes; i += 1) {
    7924:	697b      	ldr	r3, [r7, #20]
    7926:	3301      	adds	r3, #1
    7928:	617b      	str	r3, [r7, #20]
    792a:	697a      	ldr	r2, [r7, #20]
    792c:	693b      	ldr	r3, [r7, #16]
    792e:	429a      	cmp	r2, r3
    7930:	dbe9      	blt.n	7906 <c_binary_op+0x26>
    }
}
    7932:	bf00      	nop
    7934:	3718      	adds	r7, #24
    7936:	46bd      	mov	sp, r7
    7938:	bd80      	pop	{r7, pc}

0000793a <compile_test_if_expr>:

STATIC void compile_test_if_expr(compiler_t *comp, mp_parse_node_struct_t *pns) {
    793a:	b580      	push	{r7, lr}
    793c:	b086      	sub	sp, #24
    793e:	af00      	add	r7, sp, #0
    7940:	6078      	str	r0, [r7, #4]
    7942:	6039      	str	r1, [r7, #0]
    assert(MP_PARSE_NODE_IS_STRUCT_KIND(pns->nodes[1], PN_test_if_else));
    7944:	683b      	ldr	r3, [r7, #0]
    7946:	68db      	ldr	r3, [r3, #12]
    7948:	2b00      	cmp	r3, #0
    794a:	d00b      	beq.n	7964 <compile_test_if_expr+0x2a>
    794c:	683b      	ldr	r3, [r7, #0]
    794e:	68db      	ldr	r3, [r3, #12]
    7950:	f003 0303 	and.w	r3, r3, #3
    7954:	2b00      	cmp	r3, #0
    7956:	d105      	bne.n	7964 <compile_test_if_expr+0x2a>
    7958:	683b      	ldr	r3, [r7, #0]
    795a:	68db      	ldr	r3, [r3, #12]
    795c:	685b      	ldr	r3, [r3, #4]
    795e:	b2db      	uxtb	r3, r3
    7960:	2b79      	cmp	r3, #121	; 0x79
    7962:	d006      	beq.n	7972 <compile_test_if_expr+0x38>
    7964:	4b20      	ldr	r3, [pc, #128]	; (79e8 <compile_test_if_expr+0xae>)
    7966:	4a21      	ldr	r2, [pc, #132]	; (79ec <compile_test_if_expr+0xb2>)
    7968:	f240 71d1 	movw	r1, #2001	; 0x7d1
    796c:	4820      	ldr	r0, [pc, #128]	; (79f0 <compile_test_if_expr+0xb6>)
    796e:	f013 fc25 	bl	1b1bc <__assert_func>
    mp_parse_node_struct_t *pns_test_if_else = (mp_parse_node_struct_t*)pns->nodes[1];
    7972:	683b      	ldr	r3, [r7, #0]
    7974:	68db      	ldr	r3, [r3, #12]
    7976:	617b      	str	r3, [r7, #20]

    uint l_fail = comp_next_label(comp);
    7978:	6878      	ldr	r0, [r7, #4]
    797a:	f7fd f9e7 	bl	4d4c <comp_next_label>
    797e:	6138      	str	r0, [r7, #16]
    uint l_end = comp_next_label(comp);
    7980:	6878      	ldr	r0, [r7, #4]
    7982:	f7fd f9e3 	bl	4d4c <comp_next_label>
    7986:	60f8      	str	r0, [r7, #12]
    c_if_cond(comp, pns_test_if_else->nodes[0], false, l_fail); // condition
    7988:	697b      	ldr	r3, [r7, #20]
    798a:	6899      	ldr	r1, [r3, #8]
    798c:	693b      	ldr	r3, [r7, #16]
    798e:	2200      	movs	r2, #0
    7990:	6878      	ldr	r0, [r7, #4]
    7992:	f7fd fb62 	bl	505a <c_if_cond>
    compile_node(comp, pns->nodes[0]); // success value
    7996:	683b      	ldr	r3, [r7, #0]
    7998:	689b      	ldr	r3, [r3, #8]
    799a:	4619      	mov	r1, r3
    799c:	6878      	ldr	r0, [r7, #4]
    799e:	f001 f828 	bl	89f2 <compile_node>
    EMIT_ARG(jump, l_end);
    79a2:	687b      	ldr	r3, [r7, #4]
    79a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    79a6:	68f9      	ldr	r1, [r7, #12]
    79a8:	4618      	mov	r0, r3
    79aa:	f002 fee9 	bl	a780 <mp_emit_bc_jump>
    EMIT_ARG(label_assign, l_fail);
    79ae:	687b      	ldr	r3, [r7, #4]
    79b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    79b2:	6939      	ldr	r1, [r7, #16]
    79b4:	4618      	mov	r0, r3
    79b6:	f002 fc59 	bl	a26c <mp_emit_bc_label_assign>
    EMIT_ARG(adjust_stack_size, -1); // adjust stack size
    79ba:	687b      	ldr	r3, [r7, #4]
    79bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    79be:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    79c2:	4618      	mov	r0, r3
    79c4:	f002 fc03 	bl	a1ce <mp_emit_bc_adjust_stack_size>
    compile_node(comp, pns_test_if_else->nodes[1]); // failure value
    79c8:	697b      	ldr	r3, [r7, #20]
    79ca:	68db      	ldr	r3, [r3, #12]
    79cc:	4619      	mov	r1, r3
    79ce:	6878      	ldr	r0, [r7, #4]
    79d0:	f001 f80f 	bl	89f2 <compile_node>
    EMIT_ARG(label_assign, l_end);
    79d4:	687b      	ldr	r3, [r7, #4]
    79d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    79d8:	68f9      	ldr	r1, [r7, #12]
    79da:	4618      	mov	r0, r3
    79dc:	f002 fc46 	bl	a26c <mp_emit_bc_label_assign>
}
    79e0:	bf00      	nop
    79e2:	3718      	adds	r7, #24
    79e4:	46bd      	mov	sp, r7
    79e6:	bd80      	pop	{r7, pc}
    79e8:	0001e648 	.word	0x0001e648
    79ec:	0001ed8c 	.word	0x0001ed8c
    79f0:	0001e084 	.word	0x0001e084

000079f4 <compile_lambdef>:

STATIC void compile_lambdef(compiler_t *comp, mp_parse_node_struct_t *pns) {
    79f4:	b580      	push	{r7, lr}
    79f6:	b084      	sub	sp, #16
    79f8:	af00      	add	r7, sp, #0
    79fa:	6078      	str	r0, [r7, #4]
    79fc:	6039      	str	r1, [r7, #0]
    if (comp->pass == MP_PASS_SCOPE) {
    79fe:	687b      	ldr	r3, [r7, #4]
    7a00:	795b      	ldrb	r3, [r3, #5]
    7a02:	2b01      	cmp	r3, #1
    7a04:	d10b      	bne.n	7a1e <compile_lambdef+0x2a>
        // create a new scope for this lambda
        scope_t *s = scope_new_and_link(comp, SCOPE_LAMBDA, (mp_parse_node_t)pns, comp->scope_cur->emit_options);
    7a06:	683a      	ldr	r2, [r7, #0]
    7a08:	687b      	ldr	r3, [r7, #4]
    7a0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    7a0c:	7e5b      	ldrb	r3, [r3, #25]
    7a0e:	2102      	movs	r1, #2
    7a10:	6878      	ldr	r0, [r7, #4]
    7a12:	f7fd f9e5 	bl	4de0 <scope_new_and_link>
    7a16:	60f8      	str	r0, [r7, #12]
        // store the lambda scope so the compiling function (this one) can use it at each pass
        pns->nodes[2] = (mp_parse_node_t)s;
    7a18:	68fa      	ldr	r2, [r7, #12]
    7a1a:	683b      	ldr	r3, [r7, #0]
    7a1c:	611a      	str	r2, [r3, #16]
    }

    // get the scope for this lambda
    scope_t *this_scope = (scope_t*)pns->nodes[2];
    7a1e:	683b      	ldr	r3, [r7, #0]
    7a20:	691b      	ldr	r3, [r3, #16]
    7a22:	60bb      	str	r3, [r7, #8]

    // compile the lambda definition
    compile_funcdef_lambdef(comp, this_scope, pns->nodes[0], PN_varargslist);
    7a24:	683b      	ldr	r3, [r7, #0]
    7a26:	689a      	ldr	r2, [r3, #8]
    7a28:	2346      	movs	r3, #70	; 0x46
    7a2a:	68b9      	ldr	r1, [r7, #8]
    7a2c:	6878      	ldr	r0, [r7, #4]
    7a2e:	f7fe f80d 	bl	5a4c <compile_funcdef_lambdef>
}
    7a32:	bf00      	nop
    7a34:	3710      	adds	r7, #16
    7a36:	46bd      	mov	sp, r7
    7a38:	bd80      	pop	{r7, pc}

00007a3a <compile_or_and_test>:

STATIC void compile_or_and_test(compiler_t *comp, mp_parse_node_struct_t *pns, bool cond) {
    7a3a:	b580      	push	{r7, lr}
    7a3c:	b088      	sub	sp, #32
    7a3e:	af00      	add	r7, sp, #0
    7a40:	60f8      	str	r0, [r7, #12]
    7a42:	60b9      	str	r1, [r7, #8]
    7a44:	4613      	mov	r3, r2
    7a46:	71fb      	strb	r3, [r7, #7]
    uint l_end = comp_next_label(comp);
    7a48:	68f8      	ldr	r0, [r7, #12]
    7a4a:	f7fd f97f 	bl	4d4c <comp_next_label>
    7a4e:	61b8      	str	r0, [r7, #24]
    int n = MP_PARSE_NODE_STRUCT_NUM_NODES(pns);
    7a50:	68bb      	ldr	r3, [r7, #8]
    7a52:	685b      	ldr	r3, [r3, #4]
    7a54:	0a1b      	lsrs	r3, r3, #8
    7a56:	617b      	str	r3, [r7, #20]
    for (int i = 0; i < n; i += 1) {
    7a58:	2300      	movs	r3, #0
    7a5a:	61fb      	str	r3, [r7, #28]
    7a5c:	e017      	b.n	7a8e <compile_or_and_test+0x54>
        compile_node(comp, pns->nodes[i]);
    7a5e:	68bb      	ldr	r3, [r7, #8]
    7a60:	69fa      	ldr	r2, [r7, #28]
    7a62:	3202      	adds	r2, #2
    7a64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    7a68:	4619      	mov	r1, r3
    7a6a:	68f8      	ldr	r0, [r7, #12]
    7a6c:	f000 ffc1 	bl	89f2 <compile_node>
        if (i + 1 < n) {
    7a70:	69fb      	ldr	r3, [r7, #28]
    7a72:	1c5a      	adds	r2, r3, #1
    7a74:	697b      	ldr	r3, [r7, #20]
    7a76:	429a      	cmp	r2, r3
    7a78:	da06      	bge.n	7a88 <compile_or_and_test+0x4e>
            EMIT_ARG(jump_if_or_pop, cond, l_end);
    7a7a:	68fb      	ldr	r3, [r7, #12]
    7a7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7a7e:	79f9      	ldrb	r1, [r7, #7]
    7a80:	69ba      	ldr	r2, [r7, #24]
    7a82:	4618      	mov	r0, r3
    7a84:	f002 feac 	bl	a7e0 <mp_emit_bc_jump_if_or_pop>
    for (int i = 0; i < n; i += 1) {
    7a88:	69fb      	ldr	r3, [r7, #28]
    7a8a:	3301      	adds	r3, #1
    7a8c:	61fb      	str	r3, [r7, #28]
    7a8e:	69fa      	ldr	r2, [r7, #28]
    7a90:	697b      	ldr	r3, [r7, #20]
    7a92:	429a      	cmp	r2, r3
    7a94:	dbe3      	blt.n	7a5e <compile_or_and_test+0x24>
        }
    }
    EMIT_ARG(label_assign, l_end);
    7a96:	68fb      	ldr	r3, [r7, #12]
    7a98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7a9a:	69b9      	ldr	r1, [r7, #24]
    7a9c:	4618      	mov	r0, r3
    7a9e:	f002 fbe5 	bl	a26c <mp_emit_bc_label_assign>
}
    7aa2:	bf00      	nop
    7aa4:	3720      	adds	r7, #32
    7aa6:	46bd      	mov	sp, r7
    7aa8:	bd80      	pop	{r7, pc}

00007aaa <compile_or_test>:

STATIC void compile_or_test(compiler_t *comp, mp_parse_node_struct_t *pns) {
    7aaa:	b580      	push	{r7, lr}
    7aac:	b082      	sub	sp, #8
    7aae:	af00      	add	r7, sp, #0
    7ab0:	6078      	str	r0, [r7, #4]
    7ab2:	6039      	str	r1, [r7, #0]
    compile_or_and_test(comp, pns, true);
    7ab4:	2201      	movs	r2, #1
    7ab6:	6839      	ldr	r1, [r7, #0]
    7ab8:	6878      	ldr	r0, [r7, #4]
    7aba:	f7ff ffbe 	bl	7a3a <compile_or_and_test>
}
    7abe:	bf00      	nop
    7ac0:	3708      	adds	r7, #8
    7ac2:	46bd      	mov	sp, r7
    7ac4:	bd80      	pop	{r7, pc}

00007ac6 <compile_and_test>:

STATIC void compile_and_test(compiler_t *comp, mp_parse_node_struct_t *pns) {
    7ac6:	b580      	push	{r7, lr}
    7ac8:	b082      	sub	sp, #8
    7aca:	af00      	add	r7, sp, #0
    7acc:	6078      	str	r0, [r7, #4]
    7ace:	6039      	str	r1, [r7, #0]
    compile_or_and_test(comp, pns, false);
    7ad0:	2200      	movs	r2, #0
    7ad2:	6839      	ldr	r1, [r7, #0]
    7ad4:	6878      	ldr	r0, [r7, #4]
    7ad6:	f7ff ffb0 	bl	7a3a <compile_or_and_test>
}
    7ada:	bf00      	nop
    7adc:	3708      	adds	r7, #8
    7ade:	46bd      	mov	sp, r7
    7ae0:	bd80      	pop	{r7, pc}

00007ae2 <compile_not_test_2>:

STATIC void compile_not_test_2(compiler_t *comp, mp_parse_node_struct_t *pns) {
    7ae2:	b580      	push	{r7, lr}
    7ae4:	b082      	sub	sp, #8
    7ae6:	af00      	add	r7, sp, #0
    7ae8:	6078      	str	r0, [r7, #4]
    7aea:	6039      	str	r1, [r7, #0]
    compile_node(comp, pns->nodes[0]);
    7aec:	683b      	ldr	r3, [r7, #0]
    7aee:	689b      	ldr	r3, [r3, #8]
    7af0:	4619      	mov	r1, r3
    7af2:	6878      	ldr	r0, [r7, #4]
    7af4:	f000 ff7d 	bl	89f2 <compile_node>
    EMIT_ARG(unary_op, MP_UNARY_OP_NOT);
    7af8:	687b      	ldr	r3, [r7, #4]
    7afa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7afc:	2103      	movs	r1, #3
    7afe:	4618      	mov	r0, r3
    7b00:	f002 ff82 	bl	aa08 <mp_emit_bc_unary_op>
}
    7b04:	bf00      	nop
    7b06:	3708      	adds	r7, #8
    7b08:	46bd      	mov	sp, r7
    7b0a:	bd80      	pop	{r7, pc}

00007b0c <compile_comparison>:

STATIC void compile_comparison(compiler_t *comp, mp_parse_node_struct_t *pns) {
    7b0c:	b580      	push	{r7, lr}
    7b0e:	b08a      	sub	sp, #40	; 0x28
    7b10:	af00      	add	r7, sp, #0
    7b12:	6078      	str	r0, [r7, #4]
    7b14:	6039      	str	r1, [r7, #0]
    int num_nodes = MP_PARSE_NODE_STRUCT_NUM_NODES(pns);
    7b16:	683b      	ldr	r3, [r7, #0]
    7b18:	685b      	ldr	r3, [r3, #4]
    7b1a:	0a1b      	lsrs	r3, r3, #8
    7b1c:	61bb      	str	r3, [r7, #24]
    compile_node(comp, pns->nodes[0]);
    7b1e:	683b      	ldr	r3, [r7, #0]
    7b20:	689b      	ldr	r3, [r3, #8]
    7b22:	4619      	mov	r1, r3
    7b24:	6878      	ldr	r0, [r7, #4]
    7b26:	f000 ff64 	bl	89f2 <compile_node>
    bool multi = (num_nodes > 3);
    7b2a:	69bb      	ldr	r3, [r7, #24]
    7b2c:	2b03      	cmp	r3, #3
    7b2e:	bfcc      	ite	gt
    7b30:	2301      	movgt	r3, #1
    7b32:	2300      	movle	r3, #0
    7b34:	75fb      	strb	r3, [r7, #23]
    uint l_fail = 0;
    7b36:	2300      	movs	r3, #0
    7b38:	627b      	str	r3, [r7, #36]	; 0x24
    if (multi) {
    7b3a:	7dfb      	ldrb	r3, [r7, #23]
    7b3c:	2b00      	cmp	r3, #0
    7b3e:	d003      	beq.n	7b48 <compile_comparison+0x3c>
        l_fail = comp_next_label(comp);
    7b40:	6878      	ldr	r0, [r7, #4]
    7b42:	f7fd f903 	bl	4d4c <comp_next_label>
    7b46:	6278      	str	r0, [r7, #36]	; 0x24
    }
    for (int i = 1; i + 1 < num_nodes; i += 2) {
    7b48:	2301      	movs	r3, #1
    7b4a:	623b      	str	r3, [r7, #32]
    7b4c:	e0b7      	b.n	7cbe <compile_comparison+0x1b2>
        compile_node(comp, pns->nodes[i + 1]);
    7b4e:	6a3b      	ldr	r3, [r7, #32]
    7b50:	1c5a      	adds	r2, r3, #1
    7b52:	683b      	ldr	r3, [r7, #0]
    7b54:	3202      	adds	r2, #2
    7b56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    7b5a:	4619      	mov	r1, r3
    7b5c:	6878      	ldr	r0, [r7, #4]
    7b5e:	f000 ff48 	bl	89f2 <compile_node>
        if (i + 2 < num_nodes) {
    7b62:	6a3b      	ldr	r3, [r7, #32]
    7b64:	1c9a      	adds	r2, r3, #2
    7b66:	69bb      	ldr	r3, [r7, #24]
    7b68:	429a      	cmp	r2, r3
    7b6a:	da09      	bge.n	7b80 <compile_comparison+0x74>
            EMIT(dup_top);
    7b6c:	687b      	ldr	r3, [r7, #4]
    7b6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7b70:	4618      	mov	r0, r3
    7b72:	f002 fdb4 	bl	a6de <mp_emit_bc_dup_top>
            EMIT(rot_three);
    7b76:	687b      	ldr	r3, [r7, #4]
    7b78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7b7a:	4618      	mov	r0, r3
    7b7c:	f002 fdf0 	bl	a760 <mp_emit_bc_rot_three>
        }
        if (MP_PARSE_NODE_IS_TOKEN(pns->nodes[i])) {
    7b80:	683b      	ldr	r3, [r7, #0]
    7b82:	6a3a      	ldr	r2, [r7, #32]
    7b84:	3202      	adds	r2, #2
    7b86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    7b8a:	f003 030f 	and.w	r3, r3, #15
    7b8e:	2b0e      	cmp	r3, #14
    7b90:	d140      	bne.n	7c14 <compile_comparison+0x108>
            mp_binary_op_t op;
            switch (MP_PARSE_NODE_LEAF_ARG(pns->nodes[i])) {
    7b92:	683b      	ldr	r3, [r7, #0]
    7b94:	6a3a      	ldr	r2, [r7, #32]
    7b96:	3202      	adds	r2, #2
    7b98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    7b9c:	091b      	lsrs	r3, r3, #4
    7b9e:	3b36      	subs	r3, #54	; 0x36
    7ba0:	2b0b      	cmp	r3, #11
    7ba2:	d82d      	bhi.n	7c00 <compile_comparison+0xf4>
    7ba4:	a201      	add	r2, pc, #4	; (adr r2, 7bac <compile_comparison+0xa0>)
    7ba6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    7baa:	bf00      	nop
    7bac:	00007bdd 	.word	0x00007bdd
    7bb0:	00007c01 	.word	0x00007c01
    7bb4:	00007be3 	.word	0x00007be3
    7bb8:	00007c01 	.word	0x00007c01
    7bbc:	00007c01 	.word	0x00007c01
    7bc0:	00007c01 	.word	0x00007c01
    7bc4:	00007c01 	.word	0x00007c01
    7bc8:	00007c01 	.word	0x00007c01
    7bcc:	00007bef 	.word	0x00007bef
    7bd0:	00007bf5 	.word	0x00007bf5
    7bd4:	00007be9 	.word	0x00007be9
    7bd8:	00007bfb 	.word	0x00007bfb
                case MP_TOKEN_OP_LESS: op = MP_BINARY_OP_LESS; break;
    7bdc:	2300      	movs	r3, #0
    7bde:	61fb      	str	r3, [r7, #28]
    7be0:	e011      	b.n	7c06 <compile_comparison+0xfa>
                case MP_TOKEN_OP_MORE: op = MP_BINARY_OP_MORE; break;
    7be2:	2301      	movs	r3, #1
    7be4:	61fb      	str	r3, [r7, #28]
    7be6:	e00e      	b.n	7c06 <compile_comparison+0xfa>
                case MP_TOKEN_OP_DBL_EQUAL: op = MP_BINARY_OP_EQUAL; break;
    7be8:	2302      	movs	r3, #2
    7bea:	61fb      	str	r3, [r7, #28]
    7bec:	e00b      	b.n	7c06 <compile_comparison+0xfa>
                case MP_TOKEN_OP_LESS_EQUAL: op = MP_BINARY_OP_LESS_EQUAL; break;
    7bee:	2303      	movs	r3, #3
    7bf0:	61fb      	str	r3, [r7, #28]
    7bf2:	e008      	b.n	7c06 <compile_comparison+0xfa>
                case MP_TOKEN_OP_MORE_EQUAL: op = MP_BINARY_OP_MORE_EQUAL; break;
    7bf4:	2304      	movs	r3, #4
    7bf6:	61fb      	str	r3, [r7, #28]
    7bf8:	e005      	b.n	7c06 <compile_comparison+0xfa>
                case MP_TOKEN_OP_NOT_EQUAL: op = MP_BINARY_OP_NOT_EQUAL; break;
    7bfa:	2305      	movs	r3, #5
    7bfc:	61fb      	str	r3, [r7, #28]
    7bfe:	e002      	b.n	7c06 <compile_comparison+0xfa>
                case MP_TOKEN_KW_IN: default: op = MP_BINARY_OP_IN; break;
    7c00:	2306      	movs	r3, #6
    7c02:	61fb      	str	r3, [r7, #28]
    7c04:	bf00      	nop
            }
            EMIT_ARG(binary_op, op);
    7c06:	687b      	ldr	r3, [r7, #4]
    7c08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7c0a:	69f9      	ldr	r1, [r7, #28]
    7c0c:	4618      	mov	r0, r3
    7c0e:	f002 ff10 	bl	aa32 <mp_emit_bc_binary_op>
    7c12:	e045      	b.n	7ca0 <compile_comparison+0x194>
        } else {
            assert(MP_PARSE_NODE_IS_STRUCT(pns->nodes[i])); // should be
    7c14:	683b      	ldr	r3, [r7, #0]
    7c16:	6a3a      	ldr	r2, [r7, #32]
    7c18:	3202      	adds	r2, #2
    7c1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    7c1e:	2b00      	cmp	r3, #0
    7c20:	d008      	beq.n	7c34 <compile_comparison+0x128>
    7c22:	683b      	ldr	r3, [r7, #0]
    7c24:	6a3a      	ldr	r2, [r7, #32]
    7c26:	3202      	adds	r2, #2
    7c28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    7c2c:	f003 0303 	and.w	r3, r3, #3
    7c30:	2b00      	cmp	r3, #0
    7c32:	d006      	beq.n	7c42 <compile_comparison+0x136>
    7c34:	4b3b      	ldr	r3, [pc, #236]	; (7d24 <compile_comparison+0x218>)
    7c36:	4a3c      	ldr	r2, [pc, #240]	; (7d28 <compile_comparison+0x21c>)
    7c38:	f640 0122 	movw	r1, #2082	; 0x822
    7c3c:	483b      	ldr	r0, [pc, #236]	; (7d2c <compile_comparison+0x220>)
    7c3e:	f013 fabd 	bl	1b1bc <__assert_func>
            mp_parse_node_struct_t *pns2 = (mp_parse_node_struct_t*)pns->nodes[i];
    7c42:	683b      	ldr	r3, [r7, #0]
    7c44:	6a3a      	ldr	r2, [r7, #32]
    7c46:	3202      	adds	r2, #2
    7c48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    7c4c:	613b      	str	r3, [r7, #16]
            int kind = MP_PARSE_NODE_STRUCT_KIND(pns2);
    7c4e:	693b      	ldr	r3, [r7, #16]
    7c50:	685b      	ldr	r3, [r3, #4]
    7c52:	b2db      	uxtb	r3, r3
    7c54:	60fb      	str	r3, [r7, #12]
            if (kind == PN_comp_op_not_in) {
    7c56:	68fb      	ldr	r3, [r7, #12]
    7c58:	2b7d      	cmp	r3, #125	; 0x7d
    7c5a:	d106      	bne.n	7c6a <compile_comparison+0x15e>
                EMIT_ARG(binary_op, MP_BINARY_OP_NOT_IN);
    7c5c:	687b      	ldr	r3, [r7, #4]
    7c5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7c60:	2124      	movs	r1, #36	; 0x24
    7c62:	4618      	mov	r0, r3
    7c64:	f002 fee5 	bl	aa32 <mp_emit_bc_binary_op>
    7c68:	e01a      	b.n	7ca0 <compile_comparison+0x194>
            } else {
                assert(kind == PN_comp_op_is); // should be
    7c6a:	68fb      	ldr	r3, [r7, #12]
    7c6c:	2b7e      	cmp	r3, #126	; 0x7e
    7c6e:	d006      	beq.n	7c7e <compile_comparison+0x172>
    7c70:	4b2f      	ldr	r3, [pc, #188]	; (7d30 <compile_comparison+0x224>)
    7c72:	4a2d      	ldr	r2, [pc, #180]	; (7d28 <compile_comparison+0x21c>)
    7c74:	f640 0128 	movw	r1, #2088	; 0x828
    7c78:	482c      	ldr	r0, [pc, #176]	; (7d2c <compile_comparison+0x220>)
    7c7a:	f013 fa9f 	bl	1b1bc <__assert_func>
                if (MP_PARSE_NODE_IS_NULL(pns2->nodes[0])) {
    7c7e:	693b      	ldr	r3, [r7, #16]
    7c80:	689b      	ldr	r3, [r3, #8]
    7c82:	2b00      	cmp	r3, #0
    7c84:	d106      	bne.n	7c94 <compile_comparison+0x188>
                    EMIT_ARG(binary_op, MP_BINARY_OP_IS);
    7c86:	687b      	ldr	r3, [r7, #4]
    7c88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7c8a:	2107      	movs	r1, #7
    7c8c:	4618      	mov	r0, r3
    7c8e:	f002 fed0 	bl	aa32 <mp_emit_bc_binary_op>
    7c92:	e005      	b.n	7ca0 <compile_comparison+0x194>
                } else {
                    EMIT_ARG(binary_op, MP_BINARY_OP_IS_NOT);
    7c94:	687b      	ldr	r3, [r7, #4]
    7c96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7c98:	2125      	movs	r1, #37	; 0x25
    7c9a:	4618      	mov	r0, r3
    7c9c:	f002 fec9 	bl	aa32 <mp_emit_bc_binary_op>
                }
            }
        }
        if (i + 2 < num_nodes) {
    7ca0:	6a3b      	ldr	r3, [r7, #32]
    7ca2:	1c9a      	adds	r2, r3, #2
    7ca4:	69bb      	ldr	r3, [r7, #24]
    7ca6:	429a      	cmp	r2, r3
    7ca8:	da06      	bge.n	7cb8 <compile_comparison+0x1ac>
            EMIT_ARG(jump_if_or_pop, false, l_fail);
    7caa:	687b      	ldr	r3, [r7, #4]
    7cac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7cae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    7cb0:	2100      	movs	r1, #0
    7cb2:	4618      	mov	r0, r3
    7cb4:	f002 fd94 	bl	a7e0 <mp_emit_bc_jump_if_or_pop>
    for (int i = 1; i + 1 < num_nodes; i += 2) {
    7cb8:	6a3b      	ldr	r3, [r7, #32]
    7cba:	3302      	adds	r3, #2
    7cbc:	623b      	str	r3, [r7, #32]
    7cbe:	6a3b      	ldr	r3, [r7, #32]
    7cc0:	1c5a      	adds	r2, r3, #1
    7cc2:	69bb      	ldr	r3, [r7, #24]
    7cc4:	429a      	cmp	r2, r3
    7cc6:	f6ff af42 	blt.w	7b4e <compile_comparison+0x42>
        }
    }
    if (multi) {
    7cca:	7dfb      	ldrb	r3, [r7, #23]
    7ccc:	2b00      	cmp	r3, #0
    7cce:	d025      	beq.n	7d1c <compile_comparison+0x210>
        uint l_end = comp_next_label(comp);
    7cd0:	6878      	ldr	r0, [r7, #4]
    7cd2:	f7fd f83b 	bl	4d4c <comp_next_label>
    7cd6:	60b8      	str	r0, [r7, #8]
        EMIT_ARG(jump, l_end);
    7cd8:	687b      	ldr	r3, [r7, #4]
    7cda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7cdc:	68b9      	ldr	r1, [r7, #8]
    7cde:	4618      	mov	r0, r3
    7ce0:	f002 fd4e 	bl	a780 <mp_emit_bc_jump>
        EMIT_ARG(label_assign, l_fail);
    7ce4:	687b      	ldr	r3, [r7, #4]
    7ce6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7ce8:	6a79      	ldr	r1, [r7, #36]	; 0x24
    7cea:	4618      	mov	r0, r3
    7cec:	f002 fabe 	bl	a26c <mp_emit_bc_label_assign>
        EMIT_ARG(adjust_stack_size, 1);
    7cf0:	687b      	ldr	r3, [r7, #4]
    7cf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7cf4:	2101      	movs	r1, #1
    7cf6:	4618      	mov	r0, r3
    7cf8:	f002 fa69 	bl	a1ce <mp_emit_bc_adjust_stack_size>
        EMIT(rot_two);
    7cfc:	687b      	ldr	r3, [r7, #4]
    7cfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7d00:	4618      	mov	r0, r3
    7d02:	f002 fd1d 	bl	a740 <mp_emit_bc_rot_two>
        EMIT(pop_top);
    7d06:	687b      	ldr	r3, [r7, #4]
    7d08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7d0a:	4618      	mov	r0, r3
    7d0c:	f002 fd07 	bl	a71e <mp_emit_bc_pop_top>
        EMIT_ARG(label_assign, l_end);
    7d10:	687b      	ldr	r3, [r7, #4]
    7d12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7d14:	68b9      	ldr	r1, [r7, #8]
    7d16:	4618      	mov	r0, r3
    7d18:	f002 faa8 	bl	a26c <mp_emit_bc_label_assign>
    }
}
    7d1c:	bf00      	nop
    7d1e:	3728      	adds	r7, #40	; 0x28
    7d20:	46bd      	mov	sp, r7
    7d22:	bd80      	pop	{r7, pc}
    7d24:	0001e688 	.word	0x0001e688
    7d28:	0001eda4 	.word	0x0001eda4
    7d2c:	0001e084 	.word	0x0001e084
    7d30:	0001e6b0 	.word	0x0001e6b0

00007d34 <compile_star_expr>:

STATIC void compile_star_expr(compiler_t *comp, mp_parse_node_struct_t *pns) {
    7d34:	b580      	push	{r7, lr}
    7d36:	b082      	sub	sp, #8
    7d38:	af00      	add	r7, sp, #0
    7d3a:	6078      	str	r0, [r7, #4]
    7d3c:	6039      	str	r1, [r7, #0]
    compile_syntax_error(comp, (mp_parse_node_t)pns, "*x must be assignment target");
    7d3e:	683b      	ldr	r3, [r7, #0]
    7d40:	4a04      	ldr	r2, [pc, #16]	; (7d54 <compile_star_expr+0x20>)
    7d42:	4619      	mov	r1, r3
    7d44:	6878      	ldr	r0, [r7, #4]
    7d46:	f7fc ffe6 	bl	4d16 <compile_syntax_error>
}
    7d4a:	bf00      	nop
    7d4c:	3708      	adds	r7, #8
    7d4e:	46bd      	mov	sp, r7
    7d50:	bd80      	pop	{r7, pc}
    7d52:	bf00      	nop
    7d54:	0001e6c8 	.word	0x0001e6c8

00007d58 <compile_expr>:

STATIC void compile_expr(compiler_t *comp, mp_parse_node_struct_t *pns) {
    7d58:	b580      	push	{r7, lr}
    7d5a:	b082      	sub	sp, #8
    7d5c:	af00      	add	r7, sp, #0
    7d5e:	6078      	str	r0, [r7, #4]
    7d60:	6039      	str	r1, [r7, #0]
    c_binary_op(comp, pns, MP_BINARY_OP_OR);
    7d62:	2215      	movs	r2, #21
    7d64:	6839      	ldr	r1, [r7, #0]
    7d66:	6878      	ldr	r0, [r7, #4]
    7d68:	f7ff fdba 	bl	78e0 <c_binary_op>
}
    7d6c:	bf00      	nop
    7d6e:	3708      	adds	r7, #8
    7d70:	46bd      	mov	sp, r7
    7d72:	bd80      	pop	{r7, pc}

00007d74 <compile_xor_expr>:

STATIC void compile_xor_expr(compiler_t *comp, mp_parse_node_struct_t *pns) {
    7d74:	b580      	push	{r7, lr}
    7d76:	b082      	sub	sp, #8
    7d78:	af00      	add	r7, sp, #0
    7d7a:	6078      	str	r0, [r7, #4]
    7d7c:	6039      	str	r1, [r7, #0]
    c_binary_op(comp, pns, MP_BINARY_OP_XOR);
    7d7e:	2216      	movs	r2, #22
    7d80:	6839      	ldr	r1, [r7, #0]
    7d82:	6878      	ldr	r0, [r7, #4]
    7d84:	f7ff fdac 	bl	78e0 <c_binary_op>
}
    7d88:	bf00      	nop
    7d8a:	3708      	adds	r7, #8
    7d8c:	46bd      	mov	sp, r7
    7d8e:	bd80      	pop	{r7, pc}

00007d90 <compile_and_expr>:

STATIC void compile_and_expr(compiler_t *comp, mp_parse_node_struct_t *pns) {
    7d90:	b580      	push	{r7, lr}
    7d92:	b082      	sub	sp, #8
    7d94:	af00      	add	r7, sp, #0
    7d96:	6078      	str	r0, [r7, #4]
    7d98:	6039      	str	r1, [r7, #0]
    c_binary_op(comp, pns, MP_BINARY_OP_AND);
    7d9a:	2217      	movs	r2, #23
    7d9c:	6839      	ldr	r1, [r7, #0]
    7d9e:	6878      	ldr	r0, [r7, #4]
    7da0:	f7ff fd9e 	bl	78e0 <c_binary_op>
}
    7da4:	bf00      	nop
    7da6:	3708      	adds	r7, #8
    7da8:	46bd      	mov	sp, r7
    7daa:	bd80      	pop	{r7, pc}

00007dac <compile_term>:

STATIC void compile_term(compiler_t *comp, mp_parse_node_struct_t *pns) {
    7dac:	b580      	push	{r7, lr}
    7dae:	b086      	sub	sp, #24
    7db0:	af00      	add	r7, sp, #0
    7db2:	6078      	str	r0, [r7, #4]
    7db4:	6039      	str	r1, [r7, #0]
    int num_nodes = MP_PARSE_NODE_STRUCT_NUM_NODES(pns);
    7db6:	683b      	ldr	r3, [r7, #0]
    7db8:	685b      	ldr	r3, [r3, #4]
    7dba:	0a1b      	lsrs	r3, r3, #8
    7dbc:	60fb      	str	r3, [r7, #12]
    compile_node(comp, pns->nodes[0]);
    7dbe:	683b      	ldr	r3, [r7, #0]
    7dc0:	689b      	ldr	r3, [r3, #8]
    7dc2:	4619      	mov	r1, r3
    7dc4:	6878      	ldr	r0, [r7, #4]
    7dc6:	f000 fe14 	bl	89f2 <compile_node>
    for (int i = 1; i + 1 < num_nodes; i += 2) {
    7dca:	2301      	movs	r3, #1
    7dcc:	617b      	str	r3, [r7, #20]
    7dce:	e054      	b.n	7e7a <compile_term+0xce>
        compile_node(comp, pns->nodes[i + 1]);
    7dd0:	697b      	ldr	r3, [r7, #20]
    7dd2:	1c5a      	adds	r2, r3, #1
    7dd4:	683b      	ldr	r3, [r7, #0]
    7dd6:	3202      	adds	r2, #2
    7dd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    7ddc:	4619      	mov	r1, r3
    7dde:	6878      	ldr	r0, [r7, #4]
    7de0:	f000 fe07 	bl	89f2 <compile_node>
        mp_binary_op_t op;
        mp_token_kind_t tok = MP_PARSE_NODE_LEAF_ARG(pns->nodes[i]);
    7de4:	683b      	ldr	r3, [r7, #0]
    7de6:	697a      	ldr	r2, [r7, #20]
    7de8:	3202      	adds	r2, #2
    7dea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    7dee:	091b      	lsrs	r3, r3, #4
    7df0:	60bb      	str	r3, [r7, #8]
        switch (tok) {
    7df2:	68bb      	ldr	r3, [r7, #8]
    7df4:	3b2f      	subs	r3, #47	; 0x2f
    7df6:	2b08      	cmp	r3, #8
    7df8:	d829      	bhi.n	7e4e <compile_term+0xa2>
    7dfa:	a201      	add	r2, pc, #4	; (adr r2, 7e00 <compile_term+0x54>)
    7dfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    7e00:	00007e25 	.word	0x00007e25
    7e04:	00007e2b 	.word	0x00007e2b
    7e08:	00007e31 	.word	0x00007e31
    7e0c:	00007e4f 	.word	0x00007e4f
    7e10:	00007e3d 	.word	0x00007e3d
    7e14:	00007e37 	.word	0x00007e37
    7e18:	00007e43 	.word	0x00007e43
    7e1c:	00007e4f 	.word	0x00007e4f
    7e20:	00007e49 	.word	0x00007e49
            case MP_TOKEN_OP_PLUS:      op = MP_BINARY_OP_ADD; break;
    7e24:	231a      	movs	r3, #26
    7e26:	613b      	str	r3, [r7, #16]
    7e28:	e01e      	b.n	7e68 <compile_term+0xbc>
            case MP_TOKEN_OP_MINUS:     op = MP_BINARY_OP_SUBTRACT; break;
    7e2a:	231b      	movs	r3, #27
    7e2c:	613b      	str	r3, [r7, #16]
    7e2e:	e01b      	b.n	7e68 <compile_term+0xbc>
            case MP_TOKEN_OP_STAR:      op = MP_BINARY_OP_MULTIPLY; break;
    7e30:	231c      	movs	r3, #28
    7e32:	613b      	str	r3, [r7, #16]
    7e34:	e018      	b.n	7e68 <compile_term+0xbc>
            case MP_TOKEN_OP_DBL_SLASH: op = MP_BINARY_OP_FLOOR_DIVIDE; break;
    7e36:	231d      	movs	r3, #29
    7e38:	613b      	str	r3, [r7, #16]
    7e3a:	e015      	b.n	7e68 <compile_term+0xbc>
            case MP_TOKEN_OP_SLASH:     op = MP_BINARY_OP_TRUE_DIVIDE; break;
    7e3c:	231e      	movs	r3, #30
    7e3e:	613b      	str	r3, [r7, #16]
    7e40:	e012      	b.n	7e68 <compile_term+0xbc>
            case MP_TOKEN_OP_PERCENT:   op = MP_BINARY_OP_MODULO; break;
    7e42:	231f      	movs	r3, #31
    7e44:	613b      	str	r3, [r7, #16]
    7e46:	e00f      	b.n	7e68 <compile_term+0xbc>
            case MP_TOKEN_OP_DBL_LESS:  op = MP_BINARY_OP_LSHIFT; break;
    7e48:	2318      	movs	r3, #24
    7e4a:	613b      	str	r3, [r7, #16]
    7e4c:	e00c      	b.n	7e68 <compile_term+0xbc>
            default:
                assert(tok == MP_TOKEN_OP_DBL_MORE);
    7e4e:	68bb      	ldr	r3, [r7, #8]
    7e50:	2b39      	cmp	r3, #57	; 0x39
    7e52:	d006      	beq.n	7e62 <compile_term+0xb6>
    7e54:	4b0d      	ldr	r3, [pc, #52]	; (7e8c <compile_term+0xe0>)
    7e56:	4a0e      	ldr	r2, [pc, #56]	; (7e90 <compile_term+0xe4>)
    7e58:	f640 015f 	movw	r1, #2143	; 0x85f
    7e5c:	480d      	ldr	r0, [pc, #52]	; (7e94 <compile_term+0xe8>)
    7e5e:	f013 f9ad 	bl	1b1bc <__assert_func>
                op = MP_BINARY_OP_RSHIFT;
    7e62:	2319      	movs	r3, #25
    7e64:	613b      	str	r3, [r7, #16]
                break;
    7e66:	bf00      	nop
        }
        EMIT_ARG(binary_op, op);
    7e68:	687b      	ldr	r3, [r7, #4]
    7e6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7e6c:	6939      	ldr	r1, [r7, #16]
    7e6e:	4618      	mov	r0, r3
    7e70:	f002 fddf 	bl	aa32 <mp_emit_bc_binary_op>
    for (int i = 1; i + 1 < num_nodes; i += 2) {
    7e74:	697b      	ldr	r3, [r7, #20]
    7e76:	3302      	adds	r3, #2
    7e78:	617b      	str	r3, [r7, #20]
    7e7a:	697b      	ldr	r3, [r7, #20]
    7e7c:	1c5a      	adds	r2, r3, #1
    7e7e:	68fb      	ldr	r3, [r7, #12]
    7e80:	429a      	cmp	r2, r3
    7e82:	dba5      	blt.n	7dd0 <compile_term+0x24>
    }
}
    7e84:	bf00      	nop
    7e86:	3718      	adds	r7, #24
    7e88:	46bd      	mov	sp, r7
    7e8a:	bd80      	pop	{r7, pc}
    7e8c:	0001e6e8 	.word	0x0001e6e8
    7e90:	0001edb8 	.word	0x0001edb8
    7e94:	0001e084 	.word	0x0001e084

00007e98 <compile_factor_2>:

STATIC void compile_factor_2(compiler_t *comp, mp_parse_node_struct_t *pns) {
    7e98:	b580      	push	{r7, lr}
    7e9a:	b084      	sub	sp, #16
    7e9c:	af00      	add	r7, sp, #0
    7e9e:	6078      	str	r0, [r7, #4]
    7ea0:	6039      	str	r1, [r7, #0]
    compile_node(comp, pns->nodes[1]);
    7ea2:	683b      	ldr	r3, [r7, #0]
    7ea4:	68db      	ldr	r3, [r3, #12]
    7ea6:	4619      	mov	r1, r3
    7ea8:	6878      	ldr	r0, [r7, #4]
    7eaa:	f000 fda2 	bl	89f2 <compile_node>
    mp_unary_op_t op;
    mp_token_kind_t tok = MP_PARSE_NODE_LEAF_ARG(pns->nodes[0]);
    7eae:	683b      	ldr	r3, [r7, #0]
    7eb0:	689b      	ldr	r3, [r3, #8]
    7eb2:	091b      	lsrs	r3, r3, #4
    7eb4:	60bb      	str	r3, [r7, #8]
    switch (tok) {
    7eb6:	68bb      	ldr	r3, [r7, #8]
    7eb8:	2b2f      	cmp	r3, #47	; 0x2f
    7eba:	d002      	beq.n	7ec2 <compile_factor_2+0x2a>
    7ebc:	2b30      	cmp	r3, #48	; 0x30
    7ebe:	d003      	beq.n	7ec8 <compile_factor_2+0x30>
    7ec0:	e005      	b.n	7ece <compile_factor_2+0x36>
        case MP_TOKEN_OP_PLUS:  op = MP_UNARY_OP_POSITIVE; break;
    7ec2:	2300      	movs	r3, #0
    7ec4:	60fb      	str	r3, [r7, #12]
    7ec6:	e00f      	b.n	7ee8 <compile_factor_2+0x50>
        case MP_TOKEN_OP_MINUS: op = MP_UNARY_OP_NEGATIVE; break;
    7ec8:	2301      	movs	r3, #1
    7eca:	60fb      	str	r3, [r7, #12]
    7ecc:	e00c      	b.n	7ee8 <compile_factor_2+0x50>
        default:
            assert(tok == MP_TOKEN_OP_TILDE);
    7ece:	68bb      	ldr	r3, [r7, #8]
    7ed0:	2b3d      	cmp	r3, #61	; 0x3d
    7ed2:	d006      	beq.n	7ee2 <compile_factor_2+0x4a>
    7ed4:	4b09      	ldr	r3, [pc, #36]	; (7efc <compile_factor_2+0x64>)
    7ed6:	4a0a      	ldr	r2, [pc, #40]	; (7f00 <compile_factor_2+0x68>)
    7ed8:	f640 016f 	movw	r1, #2159	; 0x86f
    7edc:	4809      	ldr	r0, [pc, #36]	; (7f04 <compile_factor_2+0x6c>)
    7ede:	f013 f96d 	bl	1b1bc <__assert_func>
            op = MP_UNARY_OP_INVERT;
    7ee2:	2302      	movs	r3, #2
    7ee4:	60fb      	str	r3, [r7, #12]
            break;
    7ee6:	bf00      	nop
    }
    EMIT_ARG(unary_op, op);
    7ee8:	687b      	ldr	r3, [r7, #4]
    7eea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7eec:	68f9      	ldr	r1, [r7, #12]
    7eee:	4618      	mov	r0, r3
    7ef0:	f002 fd8a 	bl	aa08 <mp_emit_bc_unary_op>
}
    7ef4:	bf00      	nop
    7ef6:	3710      	adds	r7, #16
    7ef8:	46bd      	mov	sp, r7
    7efa:	bd80      	pop	{r7, pc}
    7efc:	0001e704 	.word	0x0001e704
    7f00:	0001edc8 	.word	0x0001edc8
    7f04:	0001e084 	.word	0x0001e084

00007f08 <compile_atom_expr_normal>:

STATIC void compile_atom_expr_normal(compiler_t *comp, mp_parse_node_struct_t *pns) {
    7f08:	b580      	push	{r7, lr}
    7f0a:	b08c      	sub	sp, #48	; 0x30
    7f0c:	af00      	add	r7, sp, #0
    7f0e:	6078      	str	r0, [r7, #4]
    7f10:	6039      	str	r1, [r7, #0]
    // compile the subject of the expression
    compile_node(comp, pns->nodes[0]);
    7f12:	683b      	ldr	r3, [r7, #0]
    7f14:	689b      	ldr	r3, [r3, #8]
    7f16:	4619      	mov	r1, r3
    7f18:	6878      	ldr	r0, [r7, #4]
    7f1a:	f000 fd6a 	bl	89f2 <compile_node>

    // compile_atom_expr_await may call us with a NULL node
    if (MP_PARSE_NODE_IS_NULL(pns->nodes[1])) {
    7f1e:	683b      	ldr	r3, [r7, #0]
    7f20:	68db      	ldr	r3, [r3, #12]
    7f22:	2b00      	cmp	r3, #0
    7f24:	f000 80ec 	beq.w	8100 <compile_atom_expr_normal+0x1f8>
        return;
    }

    // get the array of trailers (known to be an array of PARSE_NODE_STRUCT)
    size_t num_trail = 1;
    7f28:	2301      	movs	r3, #1
    7f2a:	62fb      	str	r3, [r7, #44]	; 0x2c
    mp_parse_node_struct_t **pns_trail = (mp_parse_node_struct_t**)&pns->nodes[1];
    7f2c:	683b      	ldr	r3, [r7, #0]
    7f2e:	330c      	adds	r3, #12
    7f30:	62bb      	str	r3, [r7, #40]	; 0x28
    if (MP_PARSE_NODE_STRUCT_KIND(pns_trail[0]) == PN_atom_expr_trailers) {
    7f32:	6abb      	ldr	r3, [r7, #40]	; 0x28
    7f34:	681b      	ldr	r3, [r3, #0]
    7f36:	685b      	ldr	r3, [r3, #4]
    7f38:	b2db      	uxtb	r3, r3
    7f3a:	2b86      	cmp	r3, #134	; 0x86
    7f3c:	d108      	bne.n	7f50 <compile_atom_expr_normal+0x48>
        num_trail = MP_PARSE_NODE_STRUCT_NUM_NODES(pns_trail[0]);
    7f3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    7f40:	681b      	ldr	r3, [r3, #0]
    7f42:	685b      	ldr	r3, [r3, #4]
    7f44:	0a1b      	lsrs	r3, r3, #8
    7f46:	62fb      	str	r3, [r7, #44]	; 0x2c
        pns_trail = (mp_parse_node_struct_t**)&pns_trail[0]->nodes[0];
    7f48:	6abb      	ldr	r3, [r7, #40]	; 0x28
    7f4a:	681b      	ldr	r3, [r3, #0]
    7f4c:	3308      	adds	r3, #8
    7f4e:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    // the current index into the array of trailers
    size_t i = 0;
    7f50:	2300      	movs	r3, #0
    7f52:	627b      	str	r3, [r7, #36]	; 0x24

    // handle special super() call
    if (comp->scope_cur->kind == SCOPE_FUNCTION
    7f54:	687b      	ldr	r3, [r7, #4]
    7f56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    7f58:	681b      	ldr	r3, [r3, #0]
    7f5a:	2b07      	cmp	r3, #7
    7f5c:	f040 80cb 	bne.w	80f6 <compile_atom_expr_normal+0x1ee>
        && MP_PARSE_NODE_IS_ID(pns->nodes[0])
    7f60:	683b      	ldr	r3, [r7, #0]
    7f62:	689b      	ldr	r3, [r3, #8]
    7f64:	f003 030f 	and.w	r3, r3, #15
    7f68:	2b02      	cmp	r3, #2
    7f6a:	f040 80c4 	bne.w	80f6 <compile_atom_expr_normal+0x1ee>
        && MP_PARSE_NODE_LEAF_ARG(pns->nodes[0]) == MP_QSTR_super
    7f6e:	683b      	ldr	r3, [r7, #0]
    7f70:	689b      	ldr	r3, [r3, #8]
    7f72:	091b      	lsrs	r3, r3, #4
    7f74:	2bbc      	cmp	r3, #188	; 0xbc
    7f76:	f040 80be 	bne.w	80f6 <compile_atom_expr_normal+0x1ee>
        && MP_PARSE_NODE_STRUCT_KIND(pns_trail[0]) == PN_trailer_paren
    7f7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    7f7c:	681b      	ldr	r3, [r3, #0]
    7f7e:	685b      	ldr	r3, [r3, #4]
    7f80:	b2db      	uxtb	r3, r3
    7f82:	2b2d      	cmp	r3, #45	; 0x2d
    7f84:	f040 80b7 	bne.w	80f6 <compile_atom_expr_normal+0x1ee>
        && MP_PARSE_NODE_IS_NULL(pns_trail[0]->nodes[0])) {
    7f88:	6abb      	ldr	r3, [r7, #40]	; 0x28
    7f8a:	681b      	ldr	r3, [r3, #0]
    7f8c:	689b      	ldr	r3, [r3, #8]
    7f8e:	2b00      	cmp	r3, #0
    7f90:	f040 80b1 	bne.w	80f6 <compile_atom_expr_normal+0x1ee>
        // at this point we have matched "super()" within a function

        // load the class for super to search for a parent
        compile_load_id(comp, MP_QSTR___class__);
    7f94:	2106      	movs	r1, #6
    7f96:	6878      	ldr	r0, [r7, #4]
    7f98:	f7fc ffbb 	bl	4f12 <compile_load_id>

        // look for first argument to function (assumes it's "self")
        bool found = false;
    7f9c:	2300      	movs	r3, #0
    7f9e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        id_info_t *id = &comp->scope_cur->id_info[0];
    7fa2:	687b      	ldr	r3, [r7, #4]
    7fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    7fa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    7fa8:	61fb      	str	r3, [r7, #28]
        for (size_t n = comp->scope_cur->id_info_len; n > 0; --n, ++id) {
    7faa:	687b      	ldr	r3, [r7, #4]
    7fac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    7fae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    7fb0:	61bb      	str	r3, [r7, #24]
    7fb2:	e015      	b.n	7fe0 <compile_atom_expr_normal+0xd8>
            if (id->flags & ID_FLAG_IS_PARAM) {
    7fb4:	69fb      	ldr	r3, [r7, #28]
    7fb6:	785b      	ldrb	r3, [r3, #1]
    7fb8:	f003 0301 	and.w	r3, r3, #1
    7fbc:	2b00      	cmp	r3, #0
    7fbe:	d009      	beq.n	7fd4 <compile_atom_expr_normal+0xcc>
                // first argument found; load it
                compile_load_id(comp, id->qst);
    7fc0:	69fb      	ldr	r3, [r7, #28]
    7fc2:	685b      	ldr	r3, [r3, #4]
    7fc4:	4619      	mov	r1, r3
    7fc6:	6878      	ldr	r0, [r7, #4]
    7fc8:	f7fc ffa3 	bl	4f12 <compile_load_id>
                found = true;
    7fcc:	2301      	movs	r3, #1
    7fce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
                break;
    7fd2:	e008      	b.n	7fe6 <compile_atom_expr_normal+0xde>
        for (size_t n = comp->scope_cur->id_info_len; n > 0; --n, ++id) {
    7fd4:	69bb      	ldr	r3, [r7, #24]
    7fd6:	3b01      	subs	r3, #1
    7fd8:	61bb      	str	r3, [r7, #24]
    7fda:	69fb      	ldr	r3, [r7, #28]
    7fdc:	3308      	adds	r3, #8
    7fde:	61fb      	str	r3, [r7, #28]
    7fe0:	69bb      	ldr	r3, [r7, #24]
    7fe2:	2b00      	cmp	r3, #0
    7fe4:	d1e6      	bne.n	7fb4 <compile_atom_expr_normal+0xac>
            }
        }
        if (!found) {
    7fe6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
    7fea:	f083 0301 	eor.w	r3, r3, #1
    7fee:	b2db      	uxtb	r3, r3
    7ff0:	2b00      	cmp	r3, #0
    7ff2:	d007      	beq.n	8004 <compile_atom_expr_normal+0xfc>
            compile_syntax_error(comp, (mp_parse_node_t)pns_trail[0],
    7ff4:	6abb      	ldr	r3, [r7, #40]	; 0x28
    7ff6:	681b      	ldr	r3, [r3, #0]
    7ff8:	4a43      	ldr	r2, [pc, #268]	; (8108 <compile_atom_expr_normal+0x200>)
    7ffa:	4619      	mov	r1, r3
    7ffc:	6878      	ldr	r0, [r7, #4]
    7ffe:	f7fc fe8a 	bl	4d16 <compile_syntax_error>
                "super() can't find self"); // really a TypeError
            return;
    8002:	e07e      	b.n	8102 <compile_atom_expr_normal+0x1fa>
        }

        if (num_trail >= 3
    8004:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    8006:	2b02      	cmp	r3, #2
    8008:	d926      	bls.n	8058 <compile_atom_expr_normal+0x150>
            && MP_PARSE_NODE_STRUCT_KIND(pns_trail[1]) == PN_trailer_period
    800a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    800c:	3304      	adds	r3, #4
    800e:	681b      	ldr	r3, [r3, #0]
    8010:	685b      	ldr	r3, [r3, #4]
    8012:	b2db      	uxtb	r3, r3
    8014:	2b2f      	cmp	r3, #47	; 0x2f
    8016:	d11f      	bne.n	8058 <compile_atom_expr_normal+0x150>
            && MP_PARSE_NODE_STRUCT_KIND(pns_trail[2]) == PN_trailer_paren) {
    8018:	6abb      	ldr	r3, [r7, #40]	; 0x28
    801a:	3308      	adds	r3, #8
    801c:	681b      	ldr	r3, [r3, #0]
    801e:	685b      	ldr	r3, [r3, #4]
    8020:	b2db      	uxtb	r3, r3
    8022:	2b2d      	cmp	r3, #45	; 0x2d
    8024:	d118      	bne.n	8058 <compile_atom_expr_normal+0x150>
            // optimisation for method calls super().f(...), to eliminate heap allocation
            mp_parse_node_struct_t *pns_period = pns_trail[1];
    8026:	6abb      	ldr	r3, [r7, #40]	; 0x28
    8028:	685b      	ldr	r3, [r3, #4]
    802a:	617b      	str	r3, [r7, #20]
            mp_parse_node_struct_t *pns_paren = pns_trail[2];
    802c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    802e:	689b      	ldr	r3, [r3, #8]
    8030:	613b      	str	r3, [r7, #16]
            EMIT_ARG(load_method, MP_PARSE_NODE_LEAF_ARG(pns_period->nodes[0]), true);
    8032:	687b      	ldr	r3, [r7, #4]
    8034:	6a98      	ldr	r0, [r3, #40]	; 0x28
    8036:	697b      	ldr	r3, [r7, #20]
    8038:	689b      	ldr	r3, [r3, #8]
    803a:	091b      	lsrs	r3, r3, #4
    803c:	2201      	movs	r2, #1
    803e:	4619      	mov	r1, r3
    8040:	f002 fa62 	bl	a508 <mp_emit_bc_load_method>
            compile_trailer_paren_helper(comp, pns_paren->nodes[0], true, 0);
    8044:	693b      	ldr	r3, [r7, #16]
    8046:	6899      	ldr	r1, [r3, #8]
    8048:	2300      	movs	r3, #0
    804a:	2201      	movs	r2, #1
    804c:	6878      	ldr	r0, [r7, #4]
    804e:	f000 f870 	bl	8132 <compile_trailer_paren_helper>
            i = 3;
    8052:	2303      	movs	r3, #3
    8054:	627b      	str	r3, [r7, #36]	; 0x24
            && MP_PARSE_NODE_STRUCT_KIND(pns_trail[2]) == PN_trailer_paren) {
    8056:	e008      	b.n	806a <compile_atom_expr_normal+0x162>
        } else {
            // a super() call
            EMIT_ARG(call_function, 2, 0, 0);
    8058:	687b      	ldr	r3, [r7, #4]
    805a:	6a98      	ldr	r0, [r3, #40]	; 0x28
    805c:	2300      	movs	r3, #0
    805e:	2200      	movs	r2, #0
    8060:	2102      	movs	r1, #2
    8062:	f002 fe4d 	bl	ad00 <mp_emit_bc_call_function>
            i = 1;
    8066:	2301      	movs	r3, #1
    8068:	627b      	str	r3, [r7, #36]	; 0x24
        }
    }

    // compile the remaining trailers
    for (; i < num_trail; i++) {
    806a:	e044      	b.n	80f6 <compile_atom_expr_normal+0x1ee>
        if (i + 1 < num_trail
    806c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    806e:	1c5a      	adds	r2, r3, #1
    8070:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    8072:	429a      	cmp	r2, r3
    8074:	d233      	bcs.n	80de <compile_atom_expr_normal+0x1d6>
            && MP_PARSE_NODE_STRUCT_KIND(pns_trail[i]) == PN_trailer_period
    8076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    8078:	009b      	lsls	r3, r3, #2
    807a:	6aba      	ldr	r2, [r7, #40]	; 0x28
    807c:	4413      	add	r3, r2
    807e:	681b      	ldr	r3, [r3, #0]
    8080:	685b      	ldr	r3, [r3, #4]
    8082:	b2db      	uxtb	r3, r3
    8084:	2b2f      	cmp	r3, #47	; 0x2f
    8086:	d12a      	bne.n	80de <compile_atom_expr_normal+0x1d6>
            && MP_PARSE_NODE_STRUCT_KIND(pns_trail[i + 1]) == PN_trailer_paren) {
    8088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    808a:	3301      	adds	r3, #1
    808c:	009b      	lsls	r3, r3, #2
    808e:	6aba      	ldr	r2, [r7, #40]	; 0x28
    8090:	4413      	add	r3, r2
    8092:	681b      	ldr	r3, [r3, #0]
    8094:	685b      	ldr	r3, [r3, #4]
    8096:	b2db      	uxtb	r3, r3
    8098:	2b2d      	cmp	r3, #45	; 0x2d
    809a:	d120      	bne.n	80de <compile_atom_expr_normal+0x1d6>
            // optimisation for method calls a.f(...), following PyPy
            mp_parse_node_struct_t *pns_period = pns_trail[i];
    809c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    809e:	009b      	lsls	r3, r3, #2
    80a0:	6aba      	ldr	r2, [r7, #40]	; 0x28
    80a2:	4413      	add	r3, r2
    80a4:	681b      	ldr	r3, [r3, #0]
    80a6:	60fb      	str	r3, [r7, #12]
            mp_parse_node_struct_t *pns_paren = pns_trail[i + 1];
    80a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    80aa:	3301      	adds	r3, #1
    80ac:	009b      	lsls	r3, r3, #2
    80ae:	6aba      	ldr	r2, [r7, #40]	; 0x28
    80b0:	4413      	add	r3, r2
    80b2:	681b      	ldr	r3, [r3, #0]
    80b4:	60bb      	str	r3, [r7, #8]
            EMIT_ARG(load_method, MP_PARSE_NODE_LEAF_ARG(pns_period->nodes[0]), false);
    80b6:	687b      	ldr	r3, [r7, #4]
    80b8:	6a98      	ldr	r0, [r3, #40]	; 0x28
    80ba:	68fb      	ldr	r3, [r7, #12]
    80bc:	689b      	ldr	r3, [r3, #8]
    80be:	091b      	lsrs	r3, r3, #4
    80c0:	2200      	movs	r2, #0
    80c2:	4619      	mov	r1, r3
    80c4:	f002 fa20 	bl	a508 <mp_emit_bc_load_method>
            compile_trailer_paren_helper(comp, pns_paren->nodes[0], true, 0);
    80c8:	68bb      	ldr	r3, [r7, #8]
    80ca:	6899      	ldr	r1, [r3, #8]
    80cc:	2300      	movs	r3, #0
    80ce:	2201      	movs	r2, #1
    80d0:	6878      	ldr	r0, [r7, #4]
    80d2:	f000 f82e 	bl	8132 <compile_trailer_paren_helper>
            i += 1;
    80d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    80d8:	3301      	adds	r3, #1
    80da:	627b      	str	r3, [r7, #36]	; 0x24
            && MP_PARSE_NODE_STRUCT_KIND(pns_trail[i + 1]) == PN_trailer_paren) {
    80dc:	e008      	b.n	80f0 <compile_atom_expr_normal+0x1e8>
        } else {
            // node is one of: trailer_paren, trailer_bracket, trailer_period
            compile_node(comp, (mp_parse_node_t)pns_trail[i]);
    80de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    80e0:	009b      	lsls	r3, r3, #2
    80e2:	6aba      	ldr	r2, [r7, #40]	; 0x28
    80e4:	4413      	add	r3, r2
    80e6:	681b      	ldr	r3, [r3, #0]
    80e8:	4619      	mov	r1, r3
    80ea:	6878      	ldr	r0, [r7, #4]
    80ec:	f000 fc81 	bl	89f2 <compile_node>
    for (; i < num_trail; i++) {
    80f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    80f2:	3301      	adds	r3, #1
    80f4:	627b      	str	r3, [r7, #36]	; 0x24
    80f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    80f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    80fa:	429a      	cmp	r2, r3
    80fc:	d3b6      	bcc.n	806c <compile_atom_expr_normal+0x164>
    80fe:	e000      	b.n	8102 <compile_atom_expr_normal+0x1fa>
        return;
    8100:	bf00      	nop
        }
    }
}
    8102:	3730      	adds	r7, #48	; 0x30
    8104:	46bd      	mov	sp, r7
    8106:	bd80      	pop	{r7, pc}
    8108:	0001e720 	.word	0x0001e720

0000810c <compile_power>:

STATIC void compile_power(compiler_t *comp, mp_parse_node_struct_t *pns) {
    810c:	b580      	push	{r7, lr}
    810e:	b082      	sub	sp, #8
    8110:	af00      	add	r7, sp, #0
    8112:	6078      	str	r0, [r7, #4]
    8114:	6039      	str	r1, [r7, #0]
    compile_generic_all_nodes(comp, pns); // 2 nodes, arguments of power
    8116:	6839      	ldr	r1, [r7, #0]
    8118:	6878      	ldr	r0, [r7, #4]
    811a:	f7fc fecd 	bl	4eb8 <compile_generic_all_nodes>
    EMIT_ARG(binary_op, MP_BINARY_OP_POWER);
    811e:	687b      	ldr	r3, [r7, #4]
    8120:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    8122:	2120      	movs	r1, #32
    8124:	4618      	mov	r0, r3
    8126:	f002 fc84 	bl	aa32 <mp_emit_bc_binary_op>
}
    812a:	bf00      	nop
    812c:	3708      	adds	r7, #8
    812e:	46bd      	mov	sp, r7
    8130:	bd80      	pop	{r7, pc}

00008132 <compile_trailer_paren_helper>:

STATIC void compile_trailer_paren_helper(compiler_t *comp, mp_parse_node_t pn_arglist, bool is_method_call, int n_positional_extra) {
    8132:	b580      	push	{r7, lr}
    8134:	b08e      	sub	sp, #56	; 0x38
    8136:	af00      	add	r7, sp, #0
    8138:	60f8      	str	r0, [r7, #12]
    813a:	60b9      	str	r1, [r7, #8]
    813c:	603b      	str	r3, [r7, #0]
    813e:	4613      	mov	r3, r2
    8140:	71fb      	strb	r3, [r7, #7]
    // function to call is on top of stack

    // get the list of arguments
    mp_parse_node_t *args;
    int n_args = mp_parse_node_extract_list(&pn_arglist, PN_arglist, &args);
    8142:	f107 0214 	add.w	r2, r7, #20
    8146:	f107 0308 	add.w	r3, r7, #8
    814a:	2197      	movs	r1, #151	; 0x97
    814c:	4618      	mov	r0, r3
    814e:	f7fb fceb 	bl	3b28 <mp_parse_node_extract_list>
    8152:	61f8      	str	r0, [r7, #28]

    // compile the arguments
    // Rather than calling compile_node on the list, we go through the list of args
    // explicitly here so that we can count the number of arguments and give sensible
    // error messages.
    int n_positional = n_positional_extra;
    8154:	683b      	ldr	r3, [r7, #0]
    8156:	637b      	str	r3, [r7, #52]	; 0x34
    uint n_keyword = 0;
    8158:	2300      	movs	r3, #0
    815a:	633b      	str	r3, [r7, #48]	; 0x30
    uint star_flags = 0;
    815c:	2300      	movs	r3, #0
    815e:	62fb      	str	r3, [r7, #44]	; 0x2c
    mp_parse_node_struct_t *star_args_node = NULL, *dblstar_args_node = NULL;
    8160:	2300      	movs	r3, #0
    8162:	62bb      	str	r3, [r7, #40]	; 0x28
    8164:	2300      	movs	r3, #0
    8166:	627b      	str	r3, [r7, #36]	; 0x24
    for (int i = 0; i < n_args; i++) {
    8168:	2300      	movs	r3, #0
    816a:	623b      	str	r3, [r7, #32]
    816c:	e0af      	b.n	82ce <compile_trailer_paren_helper+0x19c>
        if (MP_PARSE_NODE_IS_STRUCT(args[i])) {
    816e:	697a      	ldr	r2, [r7, #20]
    8170:	6a3b      	ldr	r3, [r7, #32]
    8172:	009b      	lsls	r3, r3, #2
    8174:	4413      	add	r3, r2
    8176:	681b      	ldr	r3, [r3, #0]
    8178:	2b00      	cmp	r3, #0
    817a:	d07d      	beq.n	8278 <compile_trailer_paren_helper+0x146>
    817c:	697a      	ldr	r2, [r7, #20]
    817e:	6a3b      	ldr	r3, [r7, #32]
    8180:	009b      	lsls	r3, r3, #2
    8182:	4413      	add	r3, r2
    8184:	681b      	ldr	r3, [r3, #0]
    8186:	f003 0303 	and.w	r3, r3, #3
    818a:	2b00      	cmp	r3, #0
    818c:	d174      	bne.n	8278 <compile_trailer_paren_helper+0x146>
            mp_parse_node_struct_t *pns_arg = (mp_parse_node_struct_t*)args[i];
    818e:	697a      	ldr	r2, [r7, #20]
    8190:	6a3b      	ldr	r3, [r7, #32]
    8192:	009b      	lsls	r3, r3, #2
    8194:	4413      	add	r3, r2
    8196:	681b      	ldr	r3, [r3, #0]
    8198:	61bb      	str	r3, [r7, #24]
            if (MP_PARSE_NODE_STRUCT_KIND(pns_arg) == PN_arglist_star) {
    819a:	69bb      	ldr	r3, [r7, #24]
    819c:	685b      	ldr	r3, [r3, #4]
    819e:	b2db      	uxtb	r3, r3
    81a0:	2b99      	cmp	r3, #153	; 0x99
    81a2:	d112      	bne.n	81ca <compile_trailer_paren_helper+0x98>
                if (star_flags & MP_EMIT_STAR_FLAG_SINGLE) {
    81a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    81a6:	f003 0301 	and.w	r3, r3, #1
    81aa:	2b00      	cmp	r3, #0
    81ac:	d006      	beq.n	81bc <compile_trailer_paren_helper+0x8a>
                    compile_syntax_error(comp, (mp_parse_node_t)pns_arg, "can't have multiple *x");
    81ae:	69bb      	ldr	r3, [r7, #24]
    81b0:	4a64      	ldr	r2, [pc, #400]	; (8344 <compile_trailer_paren_helper+0x212>)
    81b2:	4619      	mov	r1, r3
    81b4:	68f8      	ldr	r0, [r7, #12]
    81b6:	f7fc fdae 	bl	4d16 <compile_syntax_error>
                    return;
    81ba:	e0c0      	b.n	833e <compile_trailer_paren_helper+0x20c>
                }
                star_flags |= MP_EMIT_STAR_FLAG_SINGLE;
    81bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    81be:	f043 0301 	orr.w	r3, r3, #1
    81c2:	62fb      	str	r3, [r7, #44]	; 0x2c
                star_args_node = pns_arg;
    81c4:	69bb      	ldr	r3, [r7, #24]
    81c6:	62bb      	str	r3, [r7, #40]	; 0x28
        if (MP_PARSE_NODE_IS_STRUCT(args[i])) {
    81c8:	e07e      	b.n	82c8 <compile_trailer_paren_helper+0x196>
            } else if (MP_PARSE_NODE_STRUCT_KIND(pns_arg) == PN_arglist_dbl_star) {
    81ca:	69bb      	ldr	r3, [r7, #24]
    81cc:	685b      	ldr	r3, [r3, #4]
    81ce:	b2db      	uxtb	r3, r3
    81d0:	2b9a      	cmp	r3, #154	; 0x9a
    81d2:	d112      	bne.n	81fa <compile_trailer_paren_helper+0xc8>
                if (star_flags & MP_EMIT_STAR_FLAG_DOUBLE) {
    81d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    81d6:	f003 0302 	and.w	r3, r3, #2
    81da:	2b00      	cmp	r3, #0
    81dc:	d006      	beq.n	81ec <compile_trailer_paren_helper+0xba>
                    compile_syntax_error(comp, (mp_parse_node_t)pns_arg, "can't have multiple **x");
    81de:	69bb      	ldr	r3, [r7, #24]
    81e0:	4a59      	ldr	r2, [pc, #356]	; (8348 <compile_trailer_paren_helper+0x216>)
    81e2:	4619      	mov	r1, r3
    81e4:	68f8      	ldr	r0, [r7, #12]
    81e6:	f7fc fd96 	bl	4d16 <compile_syntax_error>
                    return;
    81ea:	e0a8      	b.n	833e <compile_trailer_paren_helper+0x20c>
                }
                star_flags |= MP_EMIT_STAR_FLAG_DOUBLE;
    81ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    81ee:	f043 0302 	orr.w	r3, r3, #2
    81f2:	62fb      	str	r3, [r7, #44]	; 0x2c
                dblstar_args_node = pns_arg;
    81f4:	69bb      	ldr	r3, [r7, #24]
    81f6:	627b      	str	r3, [r7, #36]	; 0x24
        if (MP_PARSE_NODE_IS_STRUCT(args[i])) {
    81f8:	e066      	b.n	82c8 <compile_trailer_paren_helper+0x196>
            } else if (MP_PARSE_NODE_STRUCT_KIND(pns_arg) == PN_argument) {
    81fa:	69bb      	ldr	r3, [r7, #24]
    81fc:	685b      	ldr	r3, [r3, #4]
    81fe:	b2db      	uxtb	r3, r3
    8200:	2b9b      	cmp	r3, #155	; 0x9b
    8202:	d138      	bne.n	8276 <compile_trailer_paren_helper+0x144>
                if (!MP_PARSE_NODE_IS_STRUCT_KIND(pns_arg->nodes[1], PN_comp_for)) {
    8204:	69bb      	ldr	r3, [r7, #24]
    8206:	68db      	ldr	r3, [r3, #12]
    8208:	2b00      	cmp	r3, #0
    820a:	d00b      	beq.n	8224 <compile_trailer_paren_helper+0xf2>
    820c:	69bb      	ldr	r3, [r7, #24]
    820e:	68db      	ldr	r3, [r3, #12]
    8210:	f003 0303 	and.w	r3, r3, #3
    8214:	2b00      	cmp	r3, #0
    8216:	d105      	bne.n	8224 <compile_trailer_paren_helper+0xf2>
    8218:	69bb      	ldr	r3, [r7, #24]
    821a:	68db      	ldr	r3, [r3, #12]
    821c:	685b      	ldr	r3, [r3, #4]
    821e:	b2db      	uxtb	r3, r3
    8220:	2b9f      	cmp	r3, #159	; 0x9f
    8222:	d01f      	beq.n	8264 <compile_trailer_paren_helper+0x132>
                    if (!MP_PARSE_NODE_IS_ID(pns_arg->nodes[0])) {
    8224:	69bb      	ldr	r3, [r7, #24]
    8226:	689b      	ldr	r3, [r3, #8]
    8228:	f003 030f 	and.w	r3, r3, #15
    822c:	2b02      	cmp	r3, #2
    822e:	d006      	beq.n	823e <compile_trailer_paren_helper+0x10c>
                        compile_syntax_error(comp, (mp_parse_node_t)pns_arg, "LHS of keyword arg must be an id");
    8230:	69bb      	ldr	r3, [r7, #24]
    8232:	4a46      	ldr	r2, [pc, #280]	; (834c <compile_trailer_paren_helper+0x21a>)
    8234:	4619      	mov	r1, r3
    8236:	68f8      	ldr	r0, [r7, #12]
    8238:	f7fc fd6d 	bl	4d16 <compile_syntax_error>
                        return;
    823c:	e07f      	b.n	833e <compile_trailer_paren_helper+0x20c>
                    }
                    EMIT_ARG(load_const_str, MP_PARSE_NODE_LEAF_ARG(pns_arg->nodes[0]));
    823e:	68fb      	ldr	r3, [r7, #12]
    8240:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    8242:	69bb      	ldr	r3, [r7, #24]
    8244:	689b      	ldr	r3, [r3, #8]
    8246:	091b      	lsrs	r3, r3, #4
    8248:	4619      	mov	r1, r3
    824a:	4610      	mov	r0, r2
    824c:	f002 f8ea 	bl	a424 <mp_emit_bc_load_const_str>
                    compile_node(comp, pns_arg->nodes[1]);
    8250:	69bb      	ldr	r3, [r7, #24]
    8252:	68db      	ldr	r3, [r3, #12]
    8254:	4619      	mov	r1, r3
    8256:	68f8      	ldr	r0, [r7, #12]
    8258:	f000 fbcb 	bl	89f2 <compile_node>
                    n_keyword += 1;
    825c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    825e:	3301      	adds	r3, #1
    8260:	633b      	str	r3, [r7, #48]	; 0x30
        if (MP_PARSE_NODE_IS_STRUCT(args[i])) {
    8262:	e031      	b.n	82c8 <compile_trailer_paren_helper+0x196>
                } else {
                    compile_comprehension(comp, pns_arg, SCOPE_GEN_EXPR);
    8264:	2206      	movs	r2, #6
    8266:	69b9      	ldr	r1, [r7, #24]
    8268:	68f8      	ldr	r0, [r7, #12]
    826a:	f000 f875 	bl	8358 <compile_comprehension>
                    n_positional++;
    826e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    8270:	3301      	adds	r3, #1
    8272:	637b      	str	r3, [r7, #52]	; 0x34
        if (MP_PARSE_NODE_IS_STRUCT(args[i])) {
    8274:	e028      	b.n	82c8 <compile_trailer_paren_helper+0x196>
                }
            } else {
                goto normal_argument;
    8276:	bf00      	nop
            }
        } else {
            normal_argument:
            if (star_flags) {
    8278:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    827a:	2b00      	cmp	r3, #0
    827c:	d00a      	beq.n	8294 <compile_trailer_paren_helper+0x162>
                compile_syntax_error(comp, args[i], "non-keyword arg after */**");
    827e:	697a      	ldr	r2, [r7, #20]
    8280:	6a3b      	ldr	r3, [r7, #32]
    8282:	009b      	lsls	r3, r3, #2
    8284:	4413      	add	r3, r2
    8286:	681b      	ldr	r3, [r3, #0]
    8288:	4a31      	ldr	r2, [pc, #196]	; (8350 <compile_trailer_paren_helper+0x21e>)
    828a:	4619      	mov	r1, r3
    828c:	68f8      	ldr	r0, [r7, #12]
    828e:	f7fc fd42 	bl	4d16 <compile_syntax_error>
                return;
    8292:	e054      	b.n	833e <compile_trailer_paren_helper+0x20c>
            }
            if (n_keyword > 0) {
    8294:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    8296:	2b00      	cmp	r3, #0
    8298:	d00a      	beq.n	82b0 <compile_trailer_paren_helper+0x17e>
                compile_syntax_error(comp, args[i], "non-keyword arg after keyword arg");
    829a:	697a      	ldr	r2, [r7, #20]
    829c:	6a3b      	ldr	r3, [r7, #32]
    829e:	009b      	lsls	r3, r3, #2
    82a0:	4413      	add	r3, r2
    82a2:	681b      	ldr	r3, [r3, #0]
    82a4:	4a2b      	ldr	r2, [pc, #172]	; (8354 <compile_trailer_paren_helper+0x222>)
    82a6:	4619      	mov	r1, r3
    82a8:	68f8      	ldr	r0, [r7, #12]
    82aa:	f7fc fd34 	bl	4d16 <compile_syntax_error>
                return;
    82ae:	e046      	b.n	833e <compile_trailer_paren_helper+0x20c>
            }
            compile_node(comp, args[i]);
    82b0:	697a      	ldr	r2, [r7, #20]
    82b2:	6a3b      	ldr	r3, [r7, #32]
    82b4:	009b      	lsls	r3, r3, #2
    82b6:	4413      	add	r3, r2
    82b8:	681b      	ldr	r3, [r3, #0]
    82ba:	4619      	mov	r1, r3
    82bc:	68f8      	ldr	r0, [r7, #12]
    82be:	f000 fb98 	bl	89f2 <compile_node>
            n_positional++;
    82c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    82c4:	3301      	adds	r3, #1
    82c6:	637b      	str	r3, [r7, #52]	; 0x34
    for (int i = 0; i < n_args; i++) {
    82c8:	6a3b      	ldr	r3, [r7, #32]
    82ca:	3301      	adds	r3, #1
    82cc:	623b      	str	r3, [r7, #32]
    82ce:	6a3a      	ldr	r2, [r7, #32]
    82d0:	69fb      	ldr	r3, [r7, #28]
    82d2:	429a      	cmp	r2, r3
    82d4:	f6ff af4b 	blt.w	816e <compile_trailer_paren_helper+0x3c>
        }
    }

    // compile the star/double-star arguments if we had them
    // if we had one but not the other then we load "null" as a place holder
    if (star_flags != 0) {
    82d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    82da:	2b00      	cmp	r3, #0
    82dc:	d01d      	beq.n	831a <compile_trailer_paren_helper+0x1e8>
        if (star_args_node == NULL) {
    82de:	6abb      	ldr	r3, [r7, #40]	; 0x28
    82e0:	2b00      	cmp	r3, #0
    82e2:	d105      	bne.n	82f0 <compile_trailer_paren_helper+0x1be>
            EMIT(load_null);
    82e4:	68fb      	ldr	r3, [r7, #12]
    82e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    82e8:	4618      	mov	r0, r3
    82ea:	f002 f8bf 	bl	a46c <mp_emit_bc_load_null>
    82ee:	e005      	b.n	82fc <compile_trailer_paren_helper+0x1ca>
        } else {
            compile_node(comp, star_args_node->nodes[0]);
    82f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
    82f2:	689b      	ldr	r3, [r3, #8]
    82f4:	4619      	mov	r1, r3
    82f6:	68f8      	ldr	r0, [r7, #12]
    82f8:	f000 fb7b 	bl	89f2 <compile_node>
        }
        if (dblstar_args_node == NULL) {
    82fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    82fe:	2b00      	cmp	r3, #0
    8300:	d105      	bne.n	830e <compile_trailer_paren_helper+0x1dc>
            EMIT(load_null);
    8302:	68fb      	ldr	r3, [r7, #12]
    8304:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    8306:	4618      	mov	r0, r3
    8308:	f002 f8b0 	bl	a46c <mp_emit_bc_load_null>
    830c:	e005      	b.n	831a <compile_trailer_paren_helper+0x1e8>
        } else {
            compile_node(comp, dblstar_args_node->nodes[0]);
    830e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    8310:	689b      	ldr	r3, [r3, #8]
    8312:	4619      	mov	r1, r3
    8314:	68f8      	ldr	r0, [r7, #12]
    8316:	f000 fb6c 	bl	89f2 <compile_node>
        }
    }

    // emit the function/method call
    if (is_method_call) {
    831a:	79fb      	ldrb	r3, [r7, #7]
    831c:	2b00      	cmp	r3, #0
    831e:	d007      	beq.n	8330 <compile_trailer_paren_helper+0x1fe>
        EMIT_ARG(call_method, n_positional, n_keyword, star_flags);
    8320:	68fb      	ldr	r3, [r7, #12]
    8322:	6a98      	ldr	r0, [r3, #40]	; 0x28
    8324:	6b79      	ldr	r1, [r7, #52]	; 0x34
    8326:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    8328:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    832a:	f002 fcfe 	bl	ad2a <mp_emit_bc_call_method>
    832e:	e006      	b.n	833e <compile_trailer_paren_helper+0x20c>
    } else {
        EMIT_ARG(call_function, n_positional, n_keyword, star_flags);
    8330:	68fb      	ldr	r3, [r7, #12]
    8332:	6a98      	ldr	r0, [r3, #40]	; 0x28
    8334:	6b79      	ldr	r1, [r7, #52]	; 0x34
    8336:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    8338:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    833a:	f002 fce1 	bl	ad00 <mp_emit_bc_call_function>
    }
}
    833e:	3738      	adds	r7, #56	; 0x38
    8340:	46bd      	mov	sp, r7
    8342:	bd80      	pop	{r7, pc}
    8344:	0001e738 	.word	0x0001e738
    8348:	0001e750 	.word	0x0001e750
    834c:	0001e768 	.word	0x0001e768
    8350:	0001e78c 	.word	0x0001e78c
    8354:	0001e7a8 	.word	0x0001e7a8

00008358 <compile_comprehension>:

// pns needs to have 2 nodes, first is lhs of comprehension, second is PN_comp_for node
STATIC void compile_comprehension(compiler_t *comp, mp_parse_node_struct_t *pns, scope_kind_t kind) {
    8358:	b580      	push	{r7, lr}
    835a:	b088      	sub	sp, #32
    835c:	af00      	add	r7, sp, #0
    835e:	60f8      	str	r0, [r7, #12]
    8360:	60b9      	str	r1, [r7, #8]
    8362:	607a      	str	r2, [r7, #4]
    assert(MP_PARSE_NODE_STRUCT_NUM_NODES(pns) == 2);
    8364:	68bb      	ldr	r3, [r7, #8]
    8366:	685b      	ldr	r3, [r3, #4]
    8368:	0a1b      	lsrs	r3, r3, #8
    836a:	2b02      	cmp	r3, #2
    836c:	d006      	beq.n	837c <compile_comprehension+0x24>
    836e:	4b2a      	ldr	r3, [pc, #168]	; (8418 <compile_comprehension+0xc0>)
    8370:	4a2a      	ldr	r2, [pc, #168]	; (841c <compile_comprehension+0xc4>)
    8372:	f640 1125 	movw	r1, #2341	; 0x925
    8376:	482a      	ldr	r0, [pc, #168]	; (8420 <compile_comprehension+0xc8>)
    8378:	f012 ff20 	bl	1b1bc <__assert_func>
    assert(MP_PARSE_NODE_IS_STRUCT_KIND(pns->nodes[1], PN_comp_for));
    837c:	68bb      	ldr	r3, [r7, #8]
    837e:	68db      	ldr	r3, [r3, #12]
    8380:	2b00      	cmp	r3, #0
    8382:	d00b      	beq.n	839c <compile_comprehension+0x44>
    8384:	68bb      	ldr	r3, [r7, #8]
    8386:	68db      	ldr	r3, [r3, #12]
    8388:	f003 0303 	and.w	r3, r3, #3
    838c:	2b00      	cmp	r3, #0
    838e:	d105      	bne.n	839c <compile_comprehension+0x44>
    8390:	68bb      	ldr	r3, [r7, #8]
    8392:	68db      	ldr	r3, [r3, #12]
    8394:	685b      	ldr	r3, [r3, #4]
    8396:	b2db      	uxtb	r3, r3
    8398:	2b9f      	cmp	r3, #159	; 0x9f
    839a:	d006      	beq.n	83aa <compile_comprehension+0x52>
    839c:	4b21      	ldr	r3, [pc, #132]	; (8424 <compile_comprehension+0xcc>)
    839e:	4a1f      	ldr	r2, [pc, #124]	; (841c <compile_comprehension+0xc4>)
    83a0:	f640 1126 	movw	r1, #2342	; 0x926
    83a4:	481e      	ldr	r0, [pc, #120]	; (8420 <compile_comprehension+0xc8>)
    83a6:	f012 ff09 	bl	1b1bc <__assert_func>
    mp_parse_node_struct_t *pns_comp_for = (mp_parse_node_struct_t*)pns->nodes[1];
    83aa:	68bb      	ldr	r3, [r7, #8]
    83ac:	68db      	ldr	r3, [r3, #12]
    83ae:	61fb      	str	r3, [r7, #28]

    if (comp->pass == MP_PASS_SCOPE) {
    83b0:	68fb      	ldr	r3, [r7, #12]
    83b2:	795b      	ldrb	r3, [r3, #5]
    83b4:	2b01      	cmp	r3, #1
    83b6:	d10b      	bne.n	83d0 <compile_comprehension+0x78>
        // create a new scope for this comprehension
        scope_t *s = scope_new_and_link(comp, kind, (mp_parse_node_t)pns, comp->scope_cur->emit_options);
    83b8:	68ba      	ldr	r2, [r7, #8]
    83ba:	68fb      	ldr	r3, [r7, #12]
    83bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    83be:	7e5b      	ldrb	r3, [r3, #25]
    83c0:	6879      	ldr	r1, [r7, #4]
    83c2:	68f8      	ldr	r0, [r7, #12]
    83c4:	f7fc fd0c 	bl	4de0 <scope_new_and_link>
    83c8:	61b8      	str	r0, [r7, #24]
        // store the comprehension scope so the compiling function (this one) can use it at each pass
        pns_comp_for->nodes[3] = (mp_parse_node_t)s;
    83ca:	69ba      	ldr	r2, [r7, #24]
    83cc:	69fb      	ldr	r3, [r7, #28]
    83ce:	615a      	str	r2, [r3, #20]
    }

    // get the scope for this comprehension
    scope_t *this_scope = (scope_t*)pns_comp_for->nodes[3];
    83d0:	69fb      	ldr	r3, [r7, #28]
    83d2:	695b      	ldr	r3, [r3, #20]
    83d4:	617b      	str	r3, [r7, #20]

    // compile the comprehension
    close_over_variables_etc(comp, this_scope, 0, 0);
    83d6:	2300      	movs	r3, #0
    83d8:	2200      	movs	r2, #0
    83da:	6979      	ldr	r1, [r7, #20]
    83dc:	68f8      	ldr	r0, [r7, #12]
    83de:	f7fd f9e5 	bl	57ac <close_over_variables_etc>

    compile_node(comp, pns_comp_for->nodes[1]); // source of the iterator
    83e2:	69fb      	ldr	r3, [r7, #28]
    83e4:	68db      	ldr	r3, [r3, #12]
    83e6:	4619      	mov	r1, r3
    83e8:	68f8      	ldr	r0, [r7, #12]
    83ea:	f000 fb02 	bl	89f2 <compile_node>
    if (kind == SCOPE_GEN_EXPR) {
    83ee:	687b      	ldr	r3, [r7, #4]
    83f0:	2b06      	cmp	r3, #6
    83f2:	d105      	bne.n	8400 <compile_comprehension+0xa8>
        EMIT_ARG(get_iter, false);
    83f4:	68fb      	ldr	r3, [r7, #12]
    83f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    83f8:	2100      	movs	r1, #0
    83fa:	4618      	mov	r0, r3
    83fc:	f002 faa7 	bl	a94e <mp_emit_bc_get_iter>
    }
    EMIT_ARG(call_function, 1, 0, 0);
    8400:	68fb      	ldr	r3, [r7, #12]
    8402:	6a98      	ldr	r0, [r3, #40]	; 0x28
    8404:	2300      	movs	r3, #0
    8406:	2200      	movs	r2, #0
    8408:	2101      	movs	r1, #1
    840a:	f002 fc79 	bl	ad00 <mp_emit_bc_call_function>
}
    840e:	bf00      	nop
    8410:	3720      	adds	r7, #32
    8412:	46bd      	mov	sp, r7
    8414:	bd80      	pop	{r7, pc}
    8416:	bf00      	nop
    8418:	0001e7cc 	.word	0x0001e7cc
    841c:	0001eddc 	.word	0x0001eddc
    8420:	0001e084 	.word	0x0001e084
    8424:	0001e7f8 	.word	0x0001e7f8

00008428 <compile_atom_paren>:

STATIC void compile_atom_paren(compiler_t *comp, mp_parse_node_struct_t *pns) {
    8428:	b580      	push	{r7, lr}
    842a:	b084      	sub	sp, #16
    842c:	af00      	add	r7, sp, #0
    842e:	6078      	str	r0, [r7, #4]
    8430:	6039      	str	r1, [r7, #0]
    if (MP_PARSE_NODE_IS_NULL(pns->nodes[0])) {
    8432:	683b      	ldr	r3, [r7, #0]
    8434:	689b      	ldr	r3, [r3, #8]
    8436:	2b00      	cmp	r3, #0
    8438:	d105      	bne.n	8446 <compile_atom_paren+0x1e>
        // an empty tuple
        c_tuple(comp, MP_PARSE_NODE_NULL, NULL);
    843a:	2200      	movs	r2, #0
    843c:	2100      	movs	r1, #0
    843e:	6878      	ldr	r0, [r7, #4]
    8440:	f7fc fdc2 	bl	4fc8 <c_tuple>
            // tuple with 2 items
            tuple_with_2_items:
            c_tuple(comp, MP_PARSE_NODE_NULL, pns);
        }
    }
}
    8444:	e068      	b.n	8518 <compile_atom_paren+0xf0>
        assert(MP_PARSE_NODE_IS_STRUCT_KIND(pns->nodes[0], PN_testlist_comp));
    8446:	683b      	ldr	r3, [r7, #0]
    8448:	689b      	ldr	r3, [r3, #8]
    844a:	2b00      	cmp	r3, #0
    844c:	d00b      	beq.n	8466 <compile_atom_paren+0x3e>
    844e:	683b      	ldr	r3, [r7, #0]
    8450:	689b      	ldr	r3, [r3, #8]
    8452:	f003 0303 	and.w	r3, r3, #3
    8456:	2b00      	cmp	r3, #0
    8458:	d105      	bne.n	8466 <compile_atom_paren+0x3e>
    845a:	683b      	ldr	r3, [r7, #0]
    845c:	689b      	ldr	r3, [r3, #8]
    845e:	685b      	ldr	r3, [r3, #4]
    8460:	b2db      	uxtb	r3, r3
    8462:	2b8a      	cmp	r3, #138	; 0x8a
    8464:	d006      	beq.n	8474 <compile_atom_paren+0x4c>
    8466:	4b2e      	ldr	r3, [pc, #184]	; (8520 <compile_atom_paren+0xf8>)
    8468:	4a2e      	ldr	r2, [pc, #184]	; (8524 <compile_atom_paren+0xfc>)
    846a:	f640 1142 	movw	r1, #2370	; 0x942
    846e:	482e      	ldr	r0, [pc, #184]	; (8528 <compile_atom_paren+0x100>)
    8470:	f012 fea4 	bl	1b1bc <__assert_func>
        pns = (mp_parse_node_struct_t*)pns->nodes[0];
    8474:	683b      	ldr	r3, [r7, #0]
    8476:	689b      	ldr	r3, [r3, #8]
    8478:	603b      	str	r3, [r7, #0]
        assert(!MP_PARSE_NODE_IS_NULL(pns->nodes[1]));
    847a:	683b      	ldr	r3, [r7, #0]
    847c:	68db      	ldr	r3, [r3, #12]
    847e:	2b00      	cmp	r3, #0
    8480:	d106      	bne.n	8490 <compile_atom_paren+0x68>
    8482:	4b2a      	ldr	r3, [pc, #168]	; (852c <compile_atom_paren+0x104>)
    8484:	4a27      	ldr	r2, [pc, #156]	; (8524 <compile_atom_paren+0xfc>)
    8486:	f640 1144 	movw	r1, #2372	; 0x944
    848a:	4827      	ldr	r0, [pc, #156]	; (8528 <compile_atom_paren+0x100>)
    848c:	f012 fe96 	bl	1b1bc <__assert_func>
        if (MP_PARSE_NODE_IS_STRUCT(pns->nodes[1])) {
    8490:	683b      	ldr	r3, [r7, #0]
    8492:	68db      	ldr	r3, [r3, #12]
    8494:	2b00      	cmp	r3, #0
    8496:	d039      	beq.n	850c <compile_atom_paren+0xe4>
    8498:	683b      	ldr	r3, [r7, #0]
    849a:	68db      	ldr	r3, [r3, #12]
    849c:	f003 0303 	and.w	r3, r3, #3
    84a0:	2b00      	cmp	r3, #0
    84a2:	d133      	bne.n	850c <compile_atom_paren+0xe4>
            mp_parse_node_struct_t *pns2 = (mp_parse_node_struct_t*)pns->nodes[1];
    84a4:	683b      	ldr	r3, [r7, #0]
    84a6:	68db      	ldr	r3, [r3, #12]
    84a8:	60fb      	str	r3, [r7, #12]
            if (MP_PARSE_NODE_STRUCT_KIND(pns2) == PN_testlist_comp_3b) {
    84aa:	68fb      	ldr	r3, [r7, #12]
    84ac:	685b      	ldr	r3, [r3, #4]
    84ae:	b2db      	uxtb	r3, r3
    84b0:	2b8d      	cmp	r3, #141	; 0x8d
    84b2:	d112      	bne.n	84da <compile_atom_paren+0xb2>
                assert(MP_PARSE_NODE_IS_NULL(pns2->nodes[0]));
    84b4:	68fb      	ldr	r3, [r7, #12]
    84b6:	689b      	ldr	r3, [r3, #8]
    84b8:	2b00      	cmp	r3, #0
    84ba:	d006      	beq.n	84ca <compile_atom_paren+0xa2>
    84bc:	4b1c      	ldr	r3, [pc, #112]	; (8530 <compile_atom_paren+0x108>)
    84be:	4a19      	ldr	r2, [pc, #100]	; (8524 <compile_atom_paren+0xfc>)
    84c0:	f640 1149 	movw	r1, #2377	; 0x949
    84c4:	4818      	ldr	r0, [pc, #96]	; (8528 <compile_atom_paren+0x100>)
    84c6:	f012 fe79 	bl	1b1bc <__assert_func>
                c_tuple(comp, pns->nodes[0], NULL);
    84ca:	683b      	ldr	r3, [r7, #0]
    84cc:	689b      	ldr	r3, [r3, #8]
    84ce:	2200      	movs	r2, #0
    84d0:	4619      	mov	r1, r3
    84d2:	6878      	ldr	r0, [r7, #4]
    84d4:	f7fc fd78 	bl	4fc8 <c_tuple>
        if (MP_PARSE_NODE_IS_STRUCT(pns->nodes[1])) {
    84d8:	e01e      	b.n	8518 <compile_atom_paren+0xf0>
            } else if (MP_PARSE_NODE_STRUCT_KIND(pns2) == PN_testlist_comp_3c) {
    84da:	68fb      	ldr	r3, [r7, #12]
    84dc:	685b      	ldr	r3, [r3, #4]
    84de:	b2db      	uxtb	r3, r3
    84e0:	2b8e      	cmp	r3, #142	; 0x8e
    84e2:	d107      	bne.n	84f4 <compile_atom_paren+0xcc>
                c_tuple(comp, pns->nodes[0], pns2);
    84e4:	683b      	ldr	r3, [r7, #0]
    84e6:	689b      	ldr	r3, [r3, #8]
    84e8:	68fa      	ldr	r2, [r7, #12]
    84ea:	4619      	mov	r1, r3
    84ec:	6878      	ldr	r0, [r7, #4]
    84ee:	f7fc fd6b 	bl	4fc8 <c_tuple>
        if (MP_PARSE_NODE_IS_STRUCT(pns->nodes[1])) {
    84f2:	e011      	b.n	8518 <compile_atom_paren+0xf0>
            } else if (MP_PARSE_NODE_STRUCT_KIND(pns2) == PN_comp_for) {
    84f4:	68fb      	ldr	r3, [r7, #12]
    84f6:	685b      	ldr	r3, [r3, #4]
    84f8:	b2db      	uxtb	r3, r3
    84fa:	2b9f      	cmp	r3, #159	; 0x9f
    84fc:	d105      	bne.n	850a <compile_atom_paren+0xe2>
                compile_comprehension(comp, pns, SCOPE_GEN_EXPR);
    84fe:	2206      	movs	r2, #6
    8500:	6839      	ldr	r1, [r7, #0]
    8502:	6878      	ldr	r0, [r7, #4]
    8504:	f7ff ff28 	bl	8358 <compile_comprehension>
        if (MP_PARSE_NODE_IS_STRUCT(pns->nodes[1])) {
    8508:	e006      	b.n	8518 <compile_atom_paren+0xf0>
                goto tuple_with_2_items;
    850a:	bf00      	nop
            c_tuple(comp, MP_PARSE_NODE_NULL, pns);
    850c:	683a      	ldr	r2, [r7, #0]
    850e:	2100      	movs	r1, #0
    8510:	6878      	ldr	r0, [r7, #4]
    8512:	f7fc fd59 	bl	4fc8 <c_tuple>
}
    8516:	e7ff      	b.n	8518 <compile_atom_paren+0xf0>
    8518:	bf00      	nop
    851a:	3710      	adds	r7, #16
    851c:	46bd      	mov	sp, r7
    851e:	bd80      	pop	{r7, pc}
    8520:	0001e098 	.word	0x0001e098
    8524:	0001edf4 	.word	0x0001edf4
    8528:	0001e084 	.word	0x0001e084
    852c:	0001e834 	.word	0x0001e834
    8530:	0001e17c 	.word	0x0001e17c

00008534 <compile_atom_bracket>:

STATIC void compile_atom_bracket(compiler_t *comp, mp_parse_node_struct_t *pns) {
    8534:	b580      	push	{r7, lr}
    8536:	b084      	sub	sp, #16
    8538:	af00      	add	r7, sp, #0
    853a:	6078      	str	r0, [r7, #4]
    853c:	6039      	str	r1, [r7, #0]
    if (MP_PARSE_NODE_IS_NULL(pns->nodes[0])) {
    853e:	683b      	ldr	r3, [r7, #0]
    8540:	689b      	ldr	r3, [r3, #8]
    8542:	2b00      	cmp	r3, #0
    8544:	d107      	bne.n	8556 <compile_atom_bracket+0x22>
        // empty list
        EMIT_ARG(build, 0, MP_EMIT_BUILD_LIST);
    8546:	687b      	ldr	r3, [r7, #4]
    8548:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    854a:	2201      	movs	r2, #1
    854c:	2100      	movs	r1, #0
    854e:	4618      	mov	r0, r3
    8550:	f002 faa1 	bl	aa96 <mp_emit_bc_build>
    } else {
        // list with 1 item
        compile_node(comp, pns->nodes[0]);
        EMIT_ARG(build, 1, MP_EMIT_BUILD_LIST);
    }
}
    8554:	e086      	b.n	8664 <compile_atom_bracket+0x130>
    } else if (MP_PARSE_NODE_IS_STRUCT_KIND(pns->nodes[0], PN_testlist_comp)) {
    8556:	683b      	ldr	r3, [r7, #0]
    8558:	689b      	ldr	r3, [r3, #8]
    855a:	2b00      	cmp	r3, #0
    855c:	d074      	beq.n	8648 <compile_atom_bracket+0x114>
    855e:	683b      	ldr	r3, [r7, #0]
    8560:	689b      	ldr	r3, [r3, #8]
    8562:	f003 0303 	and.w	r3, r3, #3
    8566:	2b00      	cmp	r3, #0
    8568:	d16e      	bne.n	8648 <compile_atom_bracket+0x114>
    856a:	683b      	ldr	r3, [r7, #0]
    856c:	689b      	ldr	r3, [r3, #8]
    856e:	685b      	ldr	r3, [r3, #4]
    8570:	b2db      	uxtb	r3, r3
    8572:	2b8a      	cmp	r3, #138	; 0x8a
    8574:	d168      	bne.n	8648 <compile_atom_bracket+0x114>
        mp_parse_node_struct_t *pns2 = (mp_parse_node_struct_t*)pns->nodes[0];
    8576:	683b      	ldr	r3, [r7, #0]
    8578:	689b      	ldr	r3, [r3, #8]
    857a:	60fb      	str	r3, [r7, #12]
        if (MP_PARSE_NODE_IS_STRUCT(pns2->nodes[1])) {
    857c:	68fb      	ldr	r3, [r7, #12]
    857e:	68db      	ldr	r3, [r3, #12]
    8580:	2b00      	cmp	r3, #0
    8582:	d04c      	beq.n	861e <compile_atom_bracket+0xea>
    8584:	68fb      	ldr	r3, [r7, #12]
    8586:	68db      	ldr	r3, [r3, #12]
    8588:	f003 0303 	and.w	r3, r3, #3
    858c:	2b00      	cmp	r3, #0
    858e:	d146      	bne.n	861e <compile_atom_bracket+0xea>
            mp_parse_node_struct_t *pns3 = (mp_parse_node_struct_t*)pns2->nodes[1];
    8590:	68fb      	ldr	r3, [r7, #12]
    8592:	68db      	ldr	r3, [r3, #12]
    8594:	60bb      	str	r3, [r7, #8]
            if (MP_PARSE_NODE_STRUCT_KIND(pns3) == PN_testlist_comp_3b) {
    8596:	68bb      	ldr	r3, [r7, #8]
    8598:	685b      	ldr	r3, [r3, #4]
    859a:	b2db      	uxtb	r3, r3
    859c:	2b8d      	cmp	r3, #141	; 0x8d
    859e:	d118      	bne.n	85d2 <compile_atom_bracket+0x9e>
                assert(MP_PARSE_NODE_IS_NULL(pns3->nodes[0]));
    85a0:	68bb      	ldr	r3, [r7, #8]
    85a2:	689b      	ldr	r3, [r3, #8]
    85a4:	2b00      	cmp	r3, #0
    85a6:	d006      	beq.n	85b6 <compile_atom_bracket+0x82>
    85a8:	4b30      	ldr	r3, [pc, #192]	; (866c <compile_atom_bracket+0x138>)
    85aa:	4a31      	ldr	r2, [pc, #196]	; (8670 <compile_atom_bracket+0x13c>)
    85ac:	f640 1167 	movw	r1, #2407	; 0x967
    85b0:	4830      	ldr	r0, [pc, #192]	; (8674 <compile_atom_bracket+0x140>)
    85b2:	f012 fe03 	bl	1b1bc <__assert_func>
                compile_node(comp, pns2->nodes[0]);
    85b6:	68fb      	ldr	r3, [r7, #12]
    85b8:	689b      	ldr	r3, [r3, #8]
    85ba:	4619      	mov	r1, r3
    85bc:	6878      	ldr	r0, [r7, #4]
    85be:	f000 fa18 	bl	89f2 <compile_node>
                EMIT_ARG(build, 1, MP_EMIT_BUILD_LIST);
    85c2:	687b      	ldr	r3, [r7, #4]
    85c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    85c6:	2201      	movs	r2, #1
    85c8:	2101      	movs	r1, #1
    85ca:	4618      	mov	r0, r3
    85cc:	f002 fa63 	bl	aa96 <mp_emit_bc_build>
        if (MP_PARSE_NODE_IS_STRUCT(pns2->nodes[1])) {
    85d0:	e039      	b.n	8646 <compile_atom_bracket+0x112>
            } else if (MP_PARSE_NODE_STRUCT_KIND(pns3) == PN_testlist_comp_3c) {
    85d2:	68bb      	ldr	r3, [r7, #8]
    85d4:	685b      	ldr	r3, [r3, #4]
    85d6:	b2db      	uxtb	r3, r3
    85d8:	2b8e      	cmp	r3, #142	; 0x8e
    85da:	d114      	bne.n	8606 <compile_atom_bracket+0xd2>
                compile_node(comp, pns2->nodes[0]);
    85dc:	68fb      	ldr	r3, [r7, #12]
    85de:	689b      	ldr	r3, [r3, #8]
    85e0:	4619      	mov	r1, r3
    85e2:	6878      	ldr	r0, [r7, #4]
    85e4:	f000 fa05 	bl	89f2 <compile_node>
                compile_generic_all_nodes(comp, pns3);
    85e8:	68b9      	ldr	r1, [r7, #8]
    85ea:	6878      	ldr	r0, [r7, #4]
    85ec:	f7fc fc64 	bl	4eb8 <compile_generic_all_nodes>
                EMIT_ARG(build, 1 + MP_PARSE_NODE_STRUCT_NUM_NODES(pns3), MP_EMIT_BUILD_LIST);
    85f0:	687b      	ldr	r3, [r7, #4]
    85f2:	6a98      	ldr	r0, [r3, #40]	; 0x28
    85f4:	68bb      	ldr	r3, [r7, #8]
    85f6:	685b      	ldr	r3, [r3, #4]
    85f8:	0a1b      	lsrs	r3, r3, #8
    85fa:	3301      	adds	r3, #1
    85fc:	2201      	movs	r2, #1
    85fe:	4619      	mov	r1, r3
    8600:	f002 fa49 	bl	aa96 <mp_emit_bc_build>
        if (MP_PARSE_NODE_IS_STRUCT(pns2->nodes[1])) {
    8604:	e01f      	b.n	8646 <compile_atom_bracket+0x112>
            } else if (MP_PARSE_NODE_STRUCT_KIND(pns3) == PN_comp_for) {
    8606:	68bb      	ldr	r3, [r7, #8]
    8608:	685b      	ldr	r3, [r3, #4]
    860a:	b2db      	uxtb	r3, r3
    860c:	2b9f      	cmp	r3, #159	; 0x9f
    860e:	d105      	bne.n	861c <compile_atom_bracket+0xe8>
                compile_comprehension(comp, pns2, SCOPE_LIST_COMP);
    8610:	2203      	movs	r2, #3
    8612:	68f9      	ldr	r1, [r7, #12]
    8614:	6878      	ldr	r0, [r7, #4]
    8616:	f7ff fe9f 	bl	8358 <compile_comprehension>
        if (MP_PARSE_NODE_IS_STRUCT(pns2->nodes[1])) {
    861a:	e014      	b.n	8646 <compile_atom_bracket+0x112>
                goto list_with_2_items;
    861c:	bf00      	nop
            compile_node(comp, pns2->nodes[0]);
    861e:	68fb      	ldr	r3, [r7, #12]
    8620:	689b      	ldr	r3, [r3, #8]
    8622:	4619      	mov	r1, r3
    8624:	6878      	ldr	r0, [r7, #4]
    8626:	f000 f9e4 	bl	89f2 <compile_node>
            compile_node(comp, pns2->nodes[1]);
    862a:	68fb      	ldr	r3, [r7, #12]
    862c:	68db      	ldr	r3, [r3, #12]
    862e:	4619      	mov	r1, r3
    8630:	6878      	ldr	r0, [r7, #4]
    8632:	f000 f9de 	bl	89f2 <compile_node>
            EMIT_ARG(build, 2, MP_EMIT_BUILD_LIST);
    8636:	687b      	ldr	r3, [r7, #4]
    8638:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    863a:	2201      	movs	r2, #1
    863c:	2102      	movs	r1, #2
    863e:	4618      	mov	r0, r3
    8640:	f002 fa29 	bl	aa96 <mp_emit_bc_build>
    } else if (MP_PARSE_NODE_IS_STRUCT_KIND(pns->nodes[0], PN_testlist_comp)) {
    8644:	e00e      	b.n	8664 <compile_atom_bracket+0x130>
    8646:	e00d      	b.n	8664 <compile_atom_bracket+0x130>
        compile_node(comp, pns->nodes[0]);
    8648:	683b      	ldr	r3, [r7, #0]
    864a:	689b      	ldr	r3, [r3, #8]
    864c:	4619      	mov	r1, r3
    864e:	6878      	ldr	r0, [r7, #4]
    8650:	f000 f9cf 	bl	89f2 <compile_node>
        EMIT_ARG(build, 1, MP_EMIT_BUILD_LIST);
    8654:	687b      	ldr	r3, [r7, #4]
    8656:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    8658:	2201      	movs	r2, #1
    865a:	2101      	movs	r1, #1
    865c:	4618      	mov	r0, r3
    865e:	f002 fa1a 	bl	aa96 <mp_emit_bc_build>
}
    8662:	e7ff      	b.n	8664 <compile_atom_bracket+0x130>
    8664:	bf00      	nop
    8666:	3710      	adds	r7, #16
    8668:	46bd      	mov	sp, r7
    866a:	bd80      	pop	{r7, pc}
    866c:	0001e85c 	.word	0x0001e85c
    8670:	0001ee08 	.word	0x0001ee08
    8674:	0001e084 	.word	0x0001e084

00008678 <compile_atom_brace>:

STATIC void compile_atom_brace(compiler_t *comp, mp_parse_node_struct_t *pns) {
    8678:	b580      	push	{r7, lr}
    867a:	b08a      	sub	sp, #40	; 0x28
    867c:	af00      	add	r7, sp, #0
    867e:	6078      	str	r0, [r7, #4]
    8680:	6039      	str	r1, [r7, #0]
    mp_parse_node_t pn = pns->nodes[0];
    8682:	683b      	ldr	r3, [r7, #0]
    8684:	689b      	ldr	r3, [r3, #8]
    8686:	623b      	str	r3, [r7, #32]
    if (MP_PARSE_NODE_IS_NULL(pn)) {
    8688:	6a3b      	ldr	r3, [r7, #32]
    868a:	2b00      	cmp	r3, #0
    868c:	d107      	bne.n	869e <compile_atom_brace+0x26>
        // empty dict
        EMIT_ARG(build, 0, MP_EMIT_BUILD_MAP);
    868e:	687b      	ldr	r3, [r7, #4]
    8690:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    8692:	2203      	movs	r2, #3
    8694:	2100      	movs	r1, #0
    8696:	4618      	mov	r0, r3
    8698:	f002 f9fd 	bl	aa96 <mp_emit_bc_build>
    869c:	e0c3      	b.n	8826 <compile_atom_brace+0x1ae>
    } else if (MP_PARSE_NODE_IS_STRUCT(pn)) {
    869e:	6a3b      	ldr	r3, [r7, #32]
    86a0:	2b00      	cmp	r3, #0
    86a2:	f000 80b9 	beq.w	8818 <compile_atom_brace+0x1a0>
    86a6:	6a3b      	ldr	r3, [r7, #32]
    86a8:	f003 0303 	and.w	r3, r3, #3
    86ac:	2b00      	cmp	r3, #0
    86ae:	f040 80b3 	bne.w	8818 <compile_atom_brace+0x1a0>
        pns = (mp_parse_node_struct_t*)pn;
    86b2:	6a3b      	ldr	r3, [r7, #32]
    86b4:	603b      	str	r3, [r7, #0]
        if (MP_PARSE_NODE_STRUCT_KIND(pns) == PN_dictorsetmaker_item) {
    86b6:	683b      	ldr	r3, [r7, #0]
    86b8:	685b      	ldr	r3, [r3, #4]
    86ba:	b2db      	uxtb	r3, r3
    86bc:	2b32      	cmp	r3, #50	; 0x32
    86be:	d110      	bne.n	86e2 <compile_atom_brace+0x6a>
            // dict with one element
            EMIT_ARG(build, 1, MP_EMIT_BUILD_MAP);
    86c0:	687b      	ldr	r3, [r7, #4]
    86c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    86c4:	2203      	movs	r2, #3
    86c6:	2101      	movs	r1, #1
    86c8:	4618      	mov	r0, r3
    86ca:	f002 f9e4 	bl	aa96 <mp_emit_bc_build>
            compile_node(comp, pn);
    86ce:	6a39      	ldr	r1, [r7, #32]
    86d0:	6878      	ldr	r0, [r7, #4]
    86d2:	f000 f98e 	bl	89f2 <compile_node>
            EMIT(store_map);
    86d6:	687b      	ldr	r3, [r7, #4]
    86d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    86da:	4618      	mov	r0, r3
    86dc:	f002 f9fd 	bl	aada <mp_emit_bc_store_map>
        if (MP_PARSE_NODE_STRUCT_KIND(pns) == PN_dictorsetmaker_item) {
    86e0:	e0a1      	b.n	8826 <compile_atom_brace+0x1ae>
        } else if (MP_PARSE_NODE_STRUCT_KIND(pns) == PN_dictorsetmaker) {
    86e2:	683b      	ldr	r3, [r7, #0]
    86e4:	685b      	ldr	r3, [r3, #4]
    86e6:	b2db      	uxtb	r3, r3
    86e8:	2b92      	cmp	r3, #146	; 0x92
    86ea:	f040 8094 	bne.w	8816 <compile_atom_brace+0x19e>
            assert(MP_PARSE_NODE_IS_STRUCT(pns->nodes[1])); // should succeed
    86ee:	683b      	ldr	r3, [r7, #0]
    86f0:	68db      	ldr	r3, [r3, #12]
    86f2:	2b00      	cmp	r3, #0
    86f4:	d005      	beq.n	8702 <compile_atom_brace+0x8a>
    86f6:	683b      	ldr	r3, [r7, #0]
    86f8:	68db      	ldr	r3, [r3, #12]
    86fa:	f003 0303 	and.w	r3, r3, #3
    86fe:	2b00      	cmp	r3, #0
    8700:	d006      	beq.n	8710 <compile_atom_brace+0x98>
    8702:	4b4a      	ldr	r3, [pc, #296]	; (882c <compile_atom_brace+0x1b4>)
    8704:	4a4a      	ldr	r2, [pc, #296]	; (8830 <compile_atom_brace+0x1b8>)
    8706:	f640 1191 	movw	r1, #2449	; 0x991
    870a:	484a      	ldr	r0, [pc, #296]	; (8834 <compile_atom_brace+0x1bc>)
    870c:	f012 fd56 	bl	1b1bc <__assert_func>
            mp_parse_node_struct_t *pns1 = (mp_parse_node_struct_t*)pns->nodes[1];
    8710:	683b      	ldr	r3, [r7, #0]
    8712:	68db      	ldr	r3, [r3, #12]
    8714:	61fb      	str	r3, [r7, #28]
            if (MP_PARSE_NODE_STRUCT_KIND(pns1) == PN_dictorsetmaker_list) {
    8716:	69fb      	ldr	r3, [r7, #28]
    8718:	685b      	ldr	r3, [r3, #4]
    871a:	b2db      	uxtb	r3, r3
    871c:	2b94      	cmp	r3, #148	; 0x94
    871e:	d168      	bne.n	87f2 <compile_atom_brace+0x17a>
                // dict/set with multiple elements

                // get tail elements (2nd, 3rd, ...)
                mp_parse_node_t *nodes;
                int n = mp_parse_node_extract_list(&pns1->nodes[0], PN_dictorsetmaker_list2, &nodes);
    8720:	69fb      	ldr	r3, [r7, #28]
    8722:	3308      	adds	r3, #8
    8724:	f107 0208 	add.w	r2, r7, #8
    8728:	2195      	movs	r1, #149	; 0x95
    872a:	4618      	mov	r0, r3
    872c:	f7fb f9fc 	bl	3b28 <mp_parse_node_extract_list>
    8730:	61b8      	str	r0, [r7, #24]

                // first element sets whether it's a dict or set
                bool is_dict;
                if (!MICROPY_PY_BUILTINS_SET || MP_PARSE_NODE_IS_STRUCT_KIND(pns->nodes[0], PN_dictorsetmaker_item)) {
                    // a dictionary
                    EMIT_ARG(build, 1 + n, MP_EMIT_BUILD_MAP);
    8732:	687b      	ldr	r3, [r7, #4]
    8734:	6a98      	ldr	r0, [r3, #40]	; 0x28
    8736:	69bb      	ldr	r3, [r7, #24]
    8738:	3301      	adds	r3, #1
    873a:	2203      	movs	r2, #3
    873c:	4619      	mov	r1, r3
    873e:	f002 f9aa 	bl	aa96 <mp_emit_bc_build>
                    compile_node(comp, pns->nodes[0]);
    8742:	683b      	ldr	r3, [r7, #0]
    8744:	689b      	ldr	r3, [r3, #8]
    8746:	4619      	mov	r1, r3
    8748:	6878      	ldr	r0, [r7, #4]
    874a:	f000 f952 	bl	89f2 <compile_node>
                    EMIT(store_map);
    874e:	687b      	ldr	r3, [r7, #4]
    8750:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    8752:	4618      	mov	r0, r3
    8754:	f002 f9c1 	bl	aada <mp_emit_bc_store_map>
                    is_dict = true;
    8758:	2301      	movs	r3, #1
    875a:	75fb      	strb	r3, [r7, #23]
                    compile_node(comp, pns->nodes[0]); // 1st value of set
                    is_dict = false;
                }

                // process rest of elements
                for (int i = 0; i < n; i++) {
    875c:	2300      	movs	r3, #0
    875e:	627b      	str	r3, [r7, #36]	; 0x24
    8760:	e042      	b.n	87e8 <compile_atom_brace+0x170>
                    mp_parse_node_t pn_i = nodes[i];
    8762:	68ba      	ldr	r2, [r7, #8]
    8764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    8766:	009b      	lsls	r3, r3, #2
    8768:	4413      	add	r3, r2
    876a:	681b      	ldr	r3, [r3, #0]
    876c:	613b      	str	r3, [r7, #16]
                    bool is_key_value = MP_PARSE_NODE_IS_STRUCT_KIND(pn_i, PN_dictorsetmaker_item);
    876e:	693b      	ldr	r3, [r7, #16]
    8770:	2b00      	cmp	r3, #0
    8772:	d00b      	beq.n	878c <compile_atom_brace+0x114>
    8774:	693b      	ldr	r3, [r7, #16]
    8776:	f003 0303 	and.w	r3, r3, #3
    877a:	2b00      	cmp	r3, #0
    877c:	d106      	bne.n	878c <compile_atom_brace+0x114>
    877e:	693b      	ldr	r3, [r7, #16]
    8780:	685b      	ldr	r3, [r3, #4]
    8782:	b2db      	uxtb	r3, r3
    8784:	2b32      	cmp	r3, #50	; 0x32
    8786:	d101      	bne.n	878c <compile_atom_brace+0x114>
    8788:	2301      	movs	r3, #1
    878a:	e000      	b.n	878e <compile_atom_brace+0x116>
    878c:	2300      	movs	r3, #0
    878e:	73fb      	strb	r3, [r7, #15]
    8790:	7bfb      	ldrb	r3, [r7, #15]
    8792:	f003 0301 	and.w	r3, r3, #1
    8796:	73fb      	strb	r3, [r7, #15]
                    compile_node(comp, pn_i);
    8798:	6939      	ldr	r1, [r7, #16]
    879a:	6878      	ldr	r0, [r7, #4]
    879c:	f000 f929 	bl	89f2 <compile_node>
                    if (is_dict) {
    87a0:	7dfb      	ldrb	r3, [r7, #23]
    87a2:	2b00      	cmp	r3, #0
    87a4:	d012      	beq.n	87cc <compile_atom_brace+0x154>
                        if (!is_key_value) {
    87a6:	7bfb      	ldrb	r3, [r7, #15]
    87a8:	f083 0301 	eor.w	r3, r3, #1
    87ac:	b2db      	uxtb	r3, r3
    87ae:	2b00      	cmp	r3, #0
    87b0:	d006      	beq.n	87c0 <compile_atom_brace+0x148>
                            if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
                                compile_syntax_error(comp, (mp_parse_node_t)pns, "invalid syntax");
    87b2:	683b      	ldr	r3, [r7, #0]
    87b4:	4a20      	ldr	r2, [pc, #128]	; (8838 <compile_atom_brace+0x1c0>)
    87b6:	4619      	mov	r1, r3
    87b8:	6878      	ldr	r0, [r7, #4]
    87ba:	f7fc faac 	bl	4d16 <compile_syntax_error>
                            } else {
                                compile_syntax_error(comp, (mp_parse_node_t)pns, "expecting key:value for dict");
                            }
                            return;
    87be:	e032      	b.n	8826 <compile_atom_brace+0x1ae>
                        }
                        EMIT(store_map);
    87c0:	687b      	ldr	r3, [r7, #4]
    87c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    87c4:	4618      	mov	r0, r3
    87c6:	f002 f988 	bl	aada <mp_emit_bc_store_map>
    87ca:	e00a      	b.n	87e2 <compile_atom_brace+0x16a>
                    } else {
                        if (is_key_value) {
    87cc:	7bfb      	ldrb	r3, [r7, #15]
    87ce:	2b00      	cmp	r3, #0
    87d0:	d007      	beq.n	87e2 <compile_atom_brace+0x16a>
                            if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
                                compile_syntax_error(comp, (mp_parse_node_t)pns, "invalid syntax");
    87d2:	683b      	ldr	r3, [r7, #0]
    87d4:	4a18      	ldr	r2, [pc, #96]	; (8838 <compile_atom_brace+0x1c0>)
    87d6:	4619      	mov	r1, r3
    87d8:	6878      	ldr	r0, [r7, #4]
    87da:	f7fc fa9c 	bl	4d16 <compile_syntax_error>
                            } else {
                                compile_syntax_error(comp, (mp_parse_node_t)pns, "expecting just a value for set");
                            }
                            return;
    87de:	bf00      	nop
    87e0:	e021      	b.n	8826 <compile_atom_brace+0x1ae>
                for (int i = 0; i < n; i++) {
    87e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    87e4:	3301      	adds	r3, #1
    87e6:	627b      	str	r3, [r7, #36]	; 0x24
    87e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    87ea:	69bb      	ldr	r3, [r7, #24]
    87ec:	429a      	cmp	r2, r3
    87ee:	dbb8      	blt.n	8762 <compile_atom_brace+0xea>
        if (MP_PARSE_NODE_STRUCT_KIND(pns) == PN_dictorsetmaker_item) {
    87f0:	e019      	b.n	8826 <compile_atom_brace+0x1ae>
                if (!is_dict) {
                    EMIT_ARG(build, 1 + n, MP_EMIT_BUILD_SET);
                }
                #endif
            } else {
                assert(MP_PARSE_NODE_STRUCT_KIND(pns1) == PN_comp_for); // should be
    87f2:	69fb      	ldr	r3, [r7, #28]
    87f4:	685b      	ldr	r3, [r3, #4]
    87f6:	b2db      	uxtb	r3, r3
    87f8:	2b9f      	cmp	r3, #159	; 0x9f
    87fa:	d006      	beq.n	880a <compile_atom_brace+0x192>
    87fc:	4b0f      	ldr	r3, [pc, #60]	; (883c <compile_atom_brace+0x1c4>)
    87fe:	4a0c      	ldr	r2, [pc, #48]	; (8830 <compile_atom_brace+0x1b8>)
    8800:	f640 11ca 	movw	r1, #2506	; 0x9ca
    8804:	480b      	ldr	r0, [pc, #44]	; (8834 <compile_atom_brace+0x1bc>)
    8806:	f012 fcd9 	bl	1b1bc <__assert_func>
                // dict/set comprehension
                if (!MICROPY_PY_BUILTINS_SET || MP_PARSE_NODE_IS_STRUCT_KIND(pns->nodes[0], PN_dictorsetmaker_item)) {
                    // a dictionary comprehension
                    compile_comprehension(comp, pns, SCOPE_DICT_COMP);
    880a:	2204      	movs	r2, #4
    880c:	6839      	ldr	r1, [r7, #0]
    880e:	6878      	ldr	r0, [r7, #4]
    8810:	f7ff fda2 	bl	8358 <compile_comprehension>
        if (MP_PARSE_NODE_STRUCT_KIND(pns) == PN_dictorsetmaker_item) {
    8814:	e007      	b.n	8826 <compile_atom_brace+0x1ae>
                    compile_comprehension(comp, pns, SCOPE_SET_COMP);
                }
            }
        } else {
            // set with one element
            goto set_with_one_element;
    8816:	bf00      	nop
        set_with_one_element:
        #if MICROPY_PY_BUILTINS_SET
        compile_node(comp, pn);
        EMIT_ARG(build, 1, MP_EMIT_BUILD_SET);
        #else
        assert(0);
    8818:	4b09      	ldr	r3, [pc, #36]	; (8840 <compile_atom_brace+0x1c8>)
    881a:	4a05      	ldr	r2, [pc, #20]	; (8830 <compile_atom_brace+0x1b8>)
    881c:	f640 11df 	movw	r1, #2527	; 0x9df
    8820:	4804      	ldr	r0, [pc, #16]	; (8834 <compile_atom_brace+0x1bc>)
    8822:	f012 fccb 	bl	1b1bc <__assert_func>
        #endif
    }
}
    8826:	3728      	adds	r7, #40	; 0x28
    8828:	46bd      	mov	sp, r7
    882a:	bd80      	pop	{r7, pc}
    882c:	0001e5f0 	.word	0x0001e5f0
    8830:	0001ee20 	.word	0x0001ee20
    8834:	0001e084 	.word	0x0001e084
    8838:	0001e884 	.word	0x0001e884
    883c:	0001e894 	.word	0x0001e894
    8840:	0001e8c4 	.word	0x0001e8c4

00008844 <compile_trailer_paren>:

STATIC void compile_trailer_paren(compiler_t *comp, mp_parse_node_struct_t *pns) {
    8844:	b580      	push	{r7, lr}
    8846:	b082      	sub	sp, #8
    8848:	af00      	add	r7, sp, #0
    884a:	6078      	str	r0, [r7, #4]
    884c:	6039      	str	r1, [r7, #0]
    compile_trailer_paren_helper(comp, pns->nodes[0], false, 0);
    884e:	683b      	ldr	r3, [r7, #0]
    8850:	6899      	ldr	r1, [r3, #8]
    8852:	2300      	movs	r3, #0
    8854:	2200      	movs	r2, #0
    8856:	6878      	ldr	r0, [r7, #4]
    8858:	f7ff fc6b 	bl	8132 <compile_trailer_paren_helper>
}
    885c:	bf00      	nop
    885e:	3708      	adds	r7, #8
    8860:	46bd      	mov	sp, r7
    8862:	bd80      	pop	{r7, pc}

00008864 <compile_trailer_bracket>:

STATIC void compile_trailer_bracket(compiler_t *comp, mp_parse_node_struct_t *pns) {
    8864:	b580      	push	{r7, lr}
    8866:	b082      	sub	sp, #8
    8868:	af00      	add	r7, sp, #0
    886a:	6078      	str	r0, [r7, #4]
    886c:	6039      	str	r1, [r7, #0]
    // object who's index we want is on top of stack
    compile_node(comp, pns->nodes[0]); // the index
    886e:	683b      	ldr	r3, [r7, #0]
    8870:	689b      	ldr	r3, [r3, #8]
    8872:	4619      	mov	r1, r3
    8874:	6878      	ldr	r0, [r7, #4]
    8876:	f000 f8bc 	bl	89f2 <compile_node>
    EMIT_ARG(subscr, MP_EMIT_SUBSCR_LOAD);
    887a:	687b      	ldr	r3, [r7, #4]
    887c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    887e:	2100      	movs	r1, #0
    8880:	4618      	mov	r0, r3
    8882:	f001 fe6f 	bl	a564 <mp_emit_bc_subscr>
}
    8886:	bf00      	nop
    8888:	3708      	adds	r7, #8
    888a:	46bd      	mov	sp, r7
    888c:	bd80      	pop	{r7, pc}

0000888e <compile_trailer_period>:

STATIC void compile_trailer_period(compiler_t *comp, mp_parse_node_struct_t *pns) {
    888e:	b580      	push	{r7, lr}
    8890:	b082      	sub	sp, #8
    8892:	af00      	add	r7, sp, #0
    8894:	6078      	str	r0, [r7, #4]
    8896:	6039      	str	r1, [r7, #0]
    // object who's attribute we want is on top of stack
    EMIT_ARG(attr, MP_PARSE_NODE_LEAF_ARG(pns->nodes[0]), MP_EMIT_ATTR_LOAD); // attribute to get
    8898:	687b      	ldr	r3, [r7, #4]
    889a:	6a98      	ldr	r0, [r3, #40]	; 0x28
    889c:	683b      	ldr	r3, [r7, #0]
    889e:	689b      	ldr	r3, [r3, #8]
    88a0:	091b      	lsrs	r3, r3, #4
    88a2:	2200      	movs	r2, #0
    88a4:	4619      	mov	r1, r3
    88a6:	f001 fe85 	bl	a5b4 <mp_emit_bc_attr>
}
    88aa:	bf00      	nop
    88ac:	3708      	adds	r7, #8
    88ae:	46bd      	mov	sp, r7
    88b0:	bd80      	pop	{r7, pc}

000088b2 <compile_dictorsetmaker_item>:
    EMIT_ARG(load_const_tok, MP_TOKEN_KW_NONE);
    compile_subscript_3_helper(comp, pns);
}
#endif // MICROPY_PY_BUILTINS_SLICE

STATIC void compile_dictorsetmaker_item(compiler_t *comp, mp_parse_node_struct_t *pns) {
    88b2:	b580      	push	{r7, lr}
    88b4:	b082      	sub	sp, #8
    88b6:	af00      	add	r7, sp, #0
    88b8:	6078      	str	r0, [r7, #4]
    88ba:	6039      	str	r1, [r7, #0]
    // if this is called then we are compiling a dict key:value pair
    compile_node(comp, pns->nodes[1]); // value
    88bc:	683b      	ldr	r3, [r7, #0]
    88be:	68db      	ldr	r3, [r3, #12]
    88c0:	4619      	mov	r1, r3
    88c2:	6878      	ldr	r0, [r7, #4]
    88c4:	f000 f895 	bl	89f2 <compile_node>
    compile_node(comp, pns->nodes[0]); // key
    88c8:	683b      	ldr	r3, [r7, #0]
    88ca:	689b      	ldr	r3, [r3, #8]
    88cc:	4619      	mov	r1, r3
    88ce:	6878      	ldr	r0, [r7, #4]
    88d0:	f000 f88f 	bl	89f2 <compile_node>
}
    88d4:	bf00      	nop
    88d6:	3708      	adds	r7, #8
    88d8:	46bd      	mov	sp, r7
    88da:	bd80      	pop	{r7, pc}

000088dc <compile_classdef>:

STATIC void compile_classdef(compiler_t *comp, mp_parse_node_struct_t *pns) {
    88dc:	b580      	push	{r7, lr}
    88de:	b084      	sub	sp, #16
    88e0:	af00      	add	r7, sp, #0
    88e2:	6078      	str	r0, [r7, #4]
    88e4:	6039      	str	r1, [r7, #0]
    qstr cname = compile_classdef_helper(comp, pns, comp->scope_cur->emit_options);
    88e6:	687b      	ldr	r3, [r7, #4]
    88e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    88ea:	7e5b      	ldrb	r3, [r3, #25]
    88ec:	461a      	mov	r2, r3
    88ee:	6839      	ldr	r1, [r7, #0]
    88f0:	6878      	ldr	r0, [r7, #4]
    88f2:	f7fd f925 	bl	5b40 <compile_classdef_helper>
    88f6:	60f8      	str	r0, [r7, #12]
    // store class object into class name
    compile_store_id(comp, cname);
    88f8:	68f9      	ldr	r1, [r7, #12]
    88fa:	6878      	ldr	r0, [r7, #4]
    88fc:	f7fc fb28 	bl	4f50 <compile_store_id>
}
    8900:	bf00      	nop
    8902:	3710      	adds	r7, #16
    8904:	46bd      	mov	sp, r7
    8906:	bd80      	pop	{r7, pc}

00008908 <compile_yield_expr>:

STATIC void compile_yield_expr(compiler_t *comp, mp_parse_node_struct_t *pns) {
    8908:	b580      	push	{r7, lr}
    890a:	b082      	sub	sp, #8
    890c:	af00      	add	r7, sp, #0
    890e:	6078      	str	r0, [r7, #4]
    8910:	6039      	str	r1, [r7, #0]
    if (comp->scope_cur->kind != SCOPE_FUNCTION && comp->scope_cur->kind != SCOPE_LAMBDA) {
    8912:	687b      	ldr	r3, [r7, #4]
    8914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    8916:	681b      	ldr	r3, [r3, #0]
    8918:	2b07      	cmp	r3, #7
    891a:	d00b      	beq.n	8934 <compile_yield_expr+0x2c>
    891c:	687b      	ldr	r3, [r7, #4]
    891e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    8920:	681b      	ldr	r3, [r3, #0]
    8922:	2b02      	cmp	r3, #2
    8924:	d006      	beq.n	8934 <compile_yield_expr+0x2c>
        compile_syntax_error(comp, (mp_parse_node_t)pns, "'yield' outside function");
    8926:	683b      	ldr	r3, [r7, #0]
    8928:	4a21      	ldr	r2, [pc, #132]	; (89b0 <compile_yield_expr+0xa8>)
    892a:	4619      	mov	r1, r3
    892c:	6878      	ldr	r0, [r7, #4]
    892e:	f7fc f9f2 	bl	4d16 <compile_syntax_error>
        return;
    8932:	e039      	b.n	89a8 <compile_yield_expr+0xa0>
    }
    if (MP_PARSE_NODE_IS_NULL(pns->nodes[0])) {
    8934:	683b      	ldr	r3, [r7, #0]
    8936:	689b      	ldr	r3, [r3, #8]
    8938:	2b00      	cmp	r3, #0
    893a:	d10c      	bne.n	8956 <compile_yield_expr+0x4e>
        EMIT_ARG(load_const_tok, MP_TOKEN_KW_NONE);
    893c:	687b      	ldr	r3, [r7, #4]
    893e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    8940:	210e      	movs	r1, #14
    8942:	4618      	mov	r0, r3
    8944:	f001 fd10 	bl	a368 <mp_emit_bc_load_const_tok>
        EMIT_ARG(yield, MP_EMIT_YIELD_VALUE);
    8948:	687b      	ldr	r3, [r7, #4]
    894a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    894c:	2100      	movs	r1, #0
    894e:	4618      	mov	r0, r3
    8950:	f002 fa3c 	bl	adcc <mp_emit_bc_yield>
    8954:	e028      	b.n	89a8 <compile_yield_expr+0xa0>
    } else if (MP_PARSE_NODE_IS_STRUCT_KIND(pns->nodes[0], PN_yield_arg_from)) {
    8956:	683b      	ldr	r3, [r7, #0]
    8958:	689b      	ldr	r3, [r3, #8]
    895a:	2b00      	cmp	r3, #0
    895c:	d018      	beq.n	8990 <compile_yield_expr+0x88>
    895e:	683b      	ldr	r3, [r7, #0]
    8960:	689b      	ldr	r3, [r3, #8]
    8962:	f003 0303 	and.w	r3, r3, #3
    8966:	2b00      	cmp	r3, #0
    8968:	d112      	bne.n	8990 <compile_yield_expr+0x88>
    896a:	683b      	ldr	r3, [r7, #0]
    896c:	689b      	ldr	r3, [r3, #8]
    896e:	685b      	ldr	r3, [r3, #4]
    8970:	b2db      	uxtb	r3, r3
    8972:	2ba2      	cmp	r3, #162	; 0xa2
    8974:	d10c      	bne.n	8990 <compile_yield_expr+0x88>
        pns = (mp_parse_node_struct_t*)pns->nodes[0];
    8976:	683b      	ldr	r3, [r7, #0]
    8978:	689b      	ldr	r3, [r3, #8]
    897a:	603b      	str	r3, [r7, #0]
        compile_node(comp, pns->nodes[0]);
    897c:	683b      	ldr	r3, [r7, #0]
    897e:	689b      	ldr	r3, [r3, #8]
    8980:	4619      	mov	r1, r3
    8982:	6878      	ldr	r0, [r7, #4]
    8984:	f000 f835 	bl	89f2 <compile_node>
        compile_yield_from(comp);
    8988:	6878      	ldr	r0, [r7, #4]
    898a:	f7fe fe63 	bl	7654 <compile_yield_from>
    898e:	e00b      	b.n	89a8 <compile_yield_expr+0xa0>
    } else {
        compile_node(comp, pns->nodes[0]);
    8990:	683b      	ldr	r3, [r7, #0]
    8992:	689b      	ldr	r3, [r3, #8]
    8994:	4619      	mov	r1, r3
    8996:	6878      	ldr	r0, [r7, #4]
    8998:	f000 f82b 	bl	89f2 <compile_node>
        EMIT_ARG(yield, MP_EMIT_YIELD_VALUE);
    899c:	687b      	ldr	r3, [r7, #4]
    899e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    89a0:	2100      	movs	r1, #0
    89a2:	4618      	mov	r0, r3
    89a4:	f002 fa12 	bl	adcc <mp_emit_bc_yield>
    }
}
    89a8:	3708      	adds	r7, #8
    89aa:	46bd      	mov	sp, r7
    89ac:	bd80      	pop	{r7, pc}
    89ae:	bf00      	nop
    89b0:	0001e8c8 	.word	0x0001e8c8

000089b4 <get_const_object>:
    compile_atom_expr_normal(comp, pns);
    compile_yield_from(comp);
}
#endif

STATIC mp_obj_t get_const_object(mp_parse_node_struct_t *pns) {
    89b4:	b480      	push	{r7}
    89b6:	b083      	sub	sp, #12
    89b8:	af00      	add	r7, sp, #0
    89ba:	6078      	str	r0, [r7, #4]
    #if MICROPY_OBJ_REPR == MICROPY_OBJ_REPR_D
    // nodes are 32-bit pointers, but need to extract 64-bit object
    return (uint64_t)pns->nodes[0] | ((uint64_t)pns->nodes[1] << 32);
    #else
    return (mp_obj_t)pns->nodes[0];
    89bc:	687b      	ldr	r3, [r7, #4]
    89be:	689b      	ldr	r3, [r3, #8]
    #endif
}
    89c0:	4618      	mov	r0, r3
    89c2:	370c      	adds	r7, #12
    89c4:	46bd      	mov	sp, r7
    89c6:	f85d 7b04 	ldr.w	r7, [sp], #4
    89ca:	4770      	bx	lr

000089cc <compile_const_object>:

STATIC void compile_const_object(compiler_t *comp, mp_parse_node_struct_t *pns) {
    89cc:	b590      	push	{r4, r7, lr}
    89ce:	b083      	sub	sp, #12
    89d0:	af00      	add	r7, sp, #0
    89d2:	6078      	str	r0, [r7, #4]
    89d4:	6039      	str	r1, [r7, #0]
    EMIT_ARG(load_const_obj, get_const_object(pns));
    89d6:	687b      	ldr	r3, [r7, #4]
    89d8:	6a9c      	ldr	r4, [r3, #40]	; 0x28
    89da:	6838      	ldr	r0, [r7, #0]
    89dc:	f7ff ffea 	bl	89b4 <get_const_object>
    89e0:	4603      	mov	r3, r0
    89e2:	4619      	mov	r1, r3
    89e4:	4620      	mov	r0, r4
    89e6:	f001 fd2f 	bl	a448 <mp_emit_bc_load_const_obj>
}
    89ea:	bf00      	nop
    89ec:	370c      	adds	r7, #12
    89ee:	46bd      	mov	sp, r7
    89f0:	bd90      	pop	{r4, r7, pc}

000089f2 <compile_node>:
#undef DEF_RULE
#undef DEF_RULE_NC
    compile_const_object,
};

STATIC void compile_node(compiler_t *comp, mp_parse_node_t pn) {
    89f2:	b590      	push	{r4, r7, lr}
    89f4:	b089      	sub	sp, #36	; 0x24
    89f6:	af00      	add	r7, sp, #0
    89f8:	6078      	str	r0, [r7, #4]
    89fa:	6039      	str	r1, [r7, #0]
    if (MP_PARSE_NODE_IS_NULL(pn)) {
    89fc:	683b      	ldr	r3, [r7, #0]
    89fe:	2b00      	cmp	r3, #0
    8a00:	d078      	beq.n	8af4 <compile_node+0x102>
        // pass
    } else if (MP_PARSE_NODE_IS_SMALL_INT(pn)) {
    8a02:	683b      	ldr	r3, [r7, #0]
    8a04:	f003 0301 	and.w	r3, r3, #1
    8a08:	2b00      	cmp	r3, #0
    8a0a:	d009      	beq.n	8a20 <compile_node+0x2e>
        mp_int_t arg = MP_PARSE_NODE_LEAF_SMALL_INT(pn);
    8a0c:	683b      	ldr	r3, [r7, #0]
    8a0e:	105b      	asrs	r3, r3, #1
    8a10:	61fb      	str	r3, [r7, #28]
            } else {
                EMIT_ARG(load_const_obj, mp_obj_new_int_from_ll(arg));
            }
        }
        #else
        EMIT_ARG(load_const_small_int, arg);
    8a12:	687b      	ldr	r3, [r7, #4]
    8a14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    8a16:	69f9      	ldr	r1, [r7, #28]
    8a18:	4618      	mov	r0, r3
    8a1a:	f001 fce1 	bl	a3e0 <mp_emit_bc_load_const_small_int>
        EMIT_ARG(set_source_line, pns->source_line);
        assert(MP_PARSE_NODE_STRUCT_KIND(pns) <= PN_const_object);
        compile_function_t f = compile_function[MP_PARSE_NODE_STRUCT_KIND(pns)];
        f(comp, pns);
    }
}
    8a1e:	e069      	b.n	8af4 <compile_node+0x102>
    } else if (MP_PARSE_NODE_IS_LEAF(pn)) {
    8a20:	683b      	ldr	r3, [r7, #0]
    8a22:	f003 0303 	and.w	r3, r3, #3
    8a26:	2b00      	cmp	r3, #0
    8a28:	d041      	beq.n	8aae <compile_node+0xbc>
        uintptr_t arg = MP_PARSE_NODE_LEAF_ARG(pn);
    8a2a:	683b      	ldr	r3, [r7, #0]
    8a2c:	091b      	lsrs	r3, r3, #4
    8a2e:	61bb      	str	r3, [r7, #24]
        switch (MP_PARSE_NODE_LEAF_KIND(pn)) {
    8a30:	683b      	ldr	r3, [r7, #0]
    8a32:	f003 030f 	and.w	r3, r3, #15
    8a36:	2b06      	cmp	r3, #6
    8a38:	d008      	beq.n	8a4c <compile_node+0x5a>
    8a3a:	2b0a      	cmp	r3, #10
    8a3c:	d00d      	beq.n	8a5a <compile_node+0x68>
    8a3e:	2b02      	cmp	r3, #2
    8a40:	d12a      	bne.n	8a98 <compile_node+0xa6>
            case MP_PARSE_NODE_ID: compile_load_id(comp, arg); break;
    8a42:	69b9      	ldr	r1, [r7, #24]
    8a44:	6878      	ldr	r0, [r7, #4]
    8a46:	f7fc fa64 	bl	4f12 <compile_load_id>
    8a4a:	e053      	b.n	8af4 <compile_node+0x102>
            case MP_PARSE_NODE_STRING: EMIT_ARG(load_const_str, arg); break;
    8a4c:	687b      	ldr	r3, [r7, #4]
    8a4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    8a50:	69b9      	ldr	r1, [r7, #24]
    8a52:	4618      	mov	r0, r3
    8a54:	f001 fce6 	bl	a424 <mp_emit_bc_load_const_str>
    8a58:	e04c      	b.n	8af4 <compile_node+0x102>
                if (comp->pass != MP_PASS_EMIT) {
    8a5a:	687b      	ldr	r3, [r7, #4]
    8a5c:	795b      	ldrb	r3, [r3, #5]
    8a5e:	2b04      	cmp	r3, #4
    8a60:	d006      	beq.n	8a70 <compile_node+0x7e>
                    EMIT_ARG(load_const_obj, mp_const_none);
    8a62:	687b      	ldr	r3, [r7, #4]
    8a64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    8a66:	4925      	ldr	r1, [pc, #148]	; (8afc <compile_node+0x10a>)
    8a68:	4618      	mov	r0, r3
    8a6a:	f001 fced 	bl	a448 <mp_emit_bc_load_const_obj>
                break;
    8a6e:	e041      	b.n	8af4 <compile_node+0x102>
                    const byte *data = qstr_data(arg, &len);
    8a70:	f107 0308 	add.w	r3, r7, #8
    8a74:	4619      	mov	r1, r3
    8a76:	69b8      	ldr	r0, [r7, #24]
    8a78:	f7f8 fbba 	bl	11f0 <qstr_data>
    8a7c:	6178      	str	r0, [r7, #20]
                    EMIT_ARG(load_const_obj, mp_obj_new_bytes(data, len));
    8a7e:	687b      	ldr	r3, [r7, #4]
    8a80:	6a9c      	ldr	r4, [r3, #40]	; 0x28
    8a82:	68bb      	ldr	r3, [r7, #8]
    8a84:	4619      	mov	r1, r3
    8a86:	6978      	ldr	r0, [r7, #20]
    8a88:	f00c fbe7 	bl	1525a <mp_obj_new_bytes>
    8a8c:	4603      	mov	r3, r0
    8a8e:	4619      	mov	r1, r3
    8a90:	4620      	mov	r0, r4
    8a92:	f001 fcd9 	bl	a448 <mp_emit_bc_load_const_obj>
                break;
    8a96:	e02d      	b.n	8af4 <compile_node+0x102>
                if (arg == MP_TOKEN_NEWLINE) {
    8a98:	69bb      	ldr	r3, [r7, #24]
    8a9a:	2b04      	cmp	r3, #4
    8a9c:	d029      	beq.n	8af2 <compile_node+0x100>
                  EMIT_ARG(load_const_tok, arg);
    8a9e:	687b      	ldr	r3, [r7, #4]
    8aa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    8aa2:	69b9      	ldr	r1, [r7, #24]
    8aa4:	4618      	mov	r0, r3
    8aa6:	f001 fc5f 	bl	a368 <mp_emit_bc_load_const_tok>
                break;
    8aaa:	bf00      	nop
    8aac:	e021      	b.n	8af2 <compile_node+0x100>
        mp_parse_node_struct_t *pns = (mp_parse_node_struct_t*)pn;
    8aae:	683b      	ldr	r3, [r7, #0]
    8ab0:	613b      	str	r3, [r7, #16]
        EMIT_ARG(set_source_line, pns->source_line);
    8ab2:	687b      	ldr	r3, [r7, #4]
    8ab4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    8ab6:	693b      	ldr	r3, [r7, #16]
    8ab8:	681b      	ldr	r3, [r3, #0]
    8aba:	4619      	mov	r1, r3
    8abc:	4610      	mov	r0, r2
    8abe:	f001 fbca 	bl	a256 <mp_emit_bc_set_source_line>
        assert(MP_PARSE_NODE_STRUCT_KIND(pns) <= PN_const_object);
    8ac2:	693b      	ldr	r3, [r7, #16]
    8ac4:	685b      	ldr	r3, [r3, #4]
    8ac6:	b2db      	uxtb	r3, r3
    8ac8:	2b35      	cmp	r3, #53	; 0x35
    8aca:	d906      	bls.n	8ada <compile_node+0xe8>
    8acc:	4b0c      	ldr	r3, [pc, #48]	; (8b00 <compile_node+0x10e>)
    8ace:	4a0d      	ldr	r2, [pc, #52]	; (8b04 <compile_node+0x112>)
    8ad0:	f640 21a2 	movw	r1, #2722	; 0xaa2
    8ad4:	480c      	ldr	r0, [pc, #48]	; (8b08 <compile_node+0x116>)
    8ad6:	f012 fb71 	bl	1b1bc <__assert_func>
        compile_function_t f = compile_function[MP_PARSE_NODE_STRUCT_KIND(pns)];
    8ada:	693b      	ldr	r3, [r7, #16]
    8adc:	685b      	ldr	r3, [r3, #4]
    8ade:	b2db      	uxtb	r3, r3
    8ae0:	4a0a      	ldr	r2, [pc, #40]	; (8b0c <compile_node+0x11a>)
    8ae2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8ae6:	60fb      	str	r3, [r7, #12]
        f(comp, pns);
    8ae8:	68fb      	ldr	r3, [r7, #12]
    8aea:	6939      	ldr	r1, [r7, #16]
    8aec:	6878      	ldr	r0, [r7, #4]
    8aee:	4798      	blx	r3
}
    8af0:	e000      	b.n	8af4 <compile_node+0x102>
                break;
    8af2:	bf00      	nop
}
    8af4:	bf00      	nop
    8af6:	3724      	adds	r7, #36	; 0x24
    8af8:	46bd      	mov	sp, r7
    8afa:	bd90      	pop	{r4, r7, pc}
    8afc:	000212b4 	.word	0x000212b4
    8b00:	0001e9bc 	.word	0x0001e9bc
    8b04:	0001ee34 	.word	0x0001ee34
    8b08:	0001e084 	.word	0x0001e084
    8b0c:	0001e8e4 	.word	0x0001e8e4

00008b10 <compile_scope_func_lambda_param>:

STATIC void compile_scope_func_lambda_param(compiler_t *comp, mp_parse_node_t pn, pn_kind_t pn_name, pn_kind_t pn_star, pn_kind_t pn_dbl_star) {
    8b10:	b580      	push	{r7, lr}
    8b12:	b08a      	sub	sp, #40	; 0x28
    8b14:	af00      	add	r7, sp, #0
    8b16:	60f8      	str	r0, [r7, #12]
    8b18:	60b9      	str	r1, [r7, #8]
    8b1a:	607a      	str	r2, [r7, #4]
    8b1c:	603b      	str	r3, [r7, #0]
    // check that **kw is last
    if ((comp->scope_cur->scope_flags & MP_SCOPE_FLAG_VARKEYWORDS) != 0) {
    8b1e:	68fb      	ldr	r3, [r7, #12]
    8b20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    8b22:	7e1b      	ldrb	r3, [r3, #24]
    8b24:	f003 0302 	and.w	r3, r3, #2
    8b28:	2b00      	cmp	r3, #0
    8b2a:	d005      	beq.n	8b38 <compile_scope_func_lambda_param+0x28>
        compile_syntax_error(comp, pn, "invalid syntax");
    8b2c:	4a75      	ldr	r2, [pc, #468]	; (8d04 <compile_scope_func_lambda_param+0x1f4>)
    8b2e:	68b9      	ldr	r1, [r7, #8]
    8b30:	68f8      	ldr	r0, [r7, #12]
    8b32:	f7fc f8f0 	bl	4d16 <compile_syntax_error>
        return;
    8b36:	e0e2      	b.n	8cfe <compile_scope_func_lambda_param+0x1ee>
    }

    qstr param_name = MP_QSTR_NULL;
    8b38:	2300      	movs	r3, #0
    8b3a:	627b      	str	r3, [r7, #36]	; 0x24
    uint param_flag = ID_FLAG_IS_PARAM;
    8b3c:	2301      	movs	r3, #1
    8b3e:	623b      	str	r3, [r7, #32]
    if (MP_PARSE_NODE_IS_ID(pn)) {
    8b40:	68bb      	ldr	r3, [r7, #8]
    8b42:	f003 030f 	and.w	r3, r3, #15
    8b46:	2b02      	cmp	r3, #2
    8b48:	d118      	bne.n	8b7c <compile_scope_func_lambda_param+0x6c>
        param_name = MP_PARSE_NODE_LEAF_ARG(pn);
    8b4a:	68bb      	ldr	r3, [r7, #8]
    8b4c:	091b      	lsrs	r3, r3, #4
    8b4e:	627b      	str	r3, [r7, #36]	; 0x24
        if (comp->have_star) {
    8b50:	68fb      	ldr	r3, [r7, #12]
    8b52:	799b      	ldrb	r3, [r3, #6]
    8b54:	2b00      	cmp	r3, #0
    8b56:	d008      	beq.n	8b6a <compile_scope_func_lambda_param+0x5a>
            // comes after a star, so counts as a keyword-only parameter
            comp->scope_cur->num_kwonly_args += 1;
    8b58:	68fb      	ldr	r3, [r7, #12]
    8b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    8b5c:	68fa      	ldr	r2, [r7, #12]
    8b5e:	6a52      	ldr	r2, [r2, #36]	; 0x24
    8b60:	8b92      	ldrh	r2, [r2, #28]
    8b62:	3201      	adds	r2, #1
    8b64:	b292      	uxth	r2, r2
    8b66:	839a      	strh	r2, [r3, #28]
    8b68:	e0aa      	b.n	8cc0 <compile_scope_func_lambda_param+0x1b0>
        } else {
            // comes before a star, so counts as a positional parameter
            comp->scope_cur->num_pos_args += 1;
    8b6a:	68fb      	ldr	r3, [r7, #12]
    8b6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    8b6e:	68fa      	ldr	r2, [r7, #12]
    8b70:	6a52      	ldr	r2, [r2, #36]	; 0x24
    8b72:	8b52      	ldrh	r2, [r2, #26]
    8b74:	3201      	adds	r2, #1
    8b76:	b292      	uxth	r2, r2
    8b78:	835a      	strh	r2, [r3, #26]
    8b7a:	e0a1      	b.n	8cc0 <compile_scope_func_lambda_param+0x1b0>
        }
    } else {
        assert(MP_PARSE_NODE_IS_STRUCT(pn));
    8b7c:	68bb      	ldr	r3, [r7, #8]
    8b7e:	2b00      	cmp	r3, #0
    8b80:	d004      	beq.n	8b8c <compile_scope_func_lambda_param+0x7c>
    8b82:	68bb      	ldr	r3, [r7, #8]
    8b84:	f003 0303 	and.w	r3, r3, #3
    8b88:	2b00      	cmp	r3, #0
    8b8a:	d006      	beq.n	8b9a <compile_scope_func_lambda_param+0x8a>
    8b8c:	4b5e      	ldr	r3, [pc, #376]	; (8d08 <compile_scope_func_lambda_param+0x1f8>)
    8b8e:	4a5f      	ldr	r2, [pc, #380]	; (8d0c <compile_scope_func_lambda_param+0x1fc>)
    8b90:	f640 21bb 	movw	r1, #2747	; 0xabb
    8b94:	485e      	ldr	r0, [pc, #376]	; (8d10 <compile_scope_func_lambda_param+0x200>)
    8b96:	f012 fb11 	bl	1b1bc <__assert_func>
        mp_parse_node_struct_t *pns = (mp_parse_node_struct_t*)pn;
    8b9a:	68bb      	ldr	r3, [r7, #8]
    8b9c:	61fb      	str	r3, [r7, #28]
        if (MP_PARSE_NODE_STRUCT_KIND(pns) == pn_name) {
    8b9e:	69fb      	ldr	r3, [r7, #28]
    8ba0:	685b      	ldr	r3, [r3, #4]
    8ba2:	b2da      	uxtb	r2, r3
    8ba4:	687b      	ldr	r3, [r7, #4]
    8ba6:	429a      	cmp	r2, r3
    8ba8:	d119      	bne.n	8bde <compile_scope_func_lambda_param+0xce>
            param_name = MP_PARSE_NODE_LEAF_ARG(pns->nodes[0]);
    8baa:	69fb      	ldr	r3, [r7, #28]
    8bac:	689b      	ldr	r3, [r3, #8]
    8bae:	091b      	lsrs	r3, r3, #4
    8bb0:	627b      	str	r3, [r7, #36]	; 0x24
            if (comp->have_star) {
    8bb2:	68fb      	ldr	r3, [r7, #12]
    8bb4:	799b      	ldrb	r3, [r3, #6]
    8bb6:	2b00      	cmp	r3, #0
    8bb8:	d008      	beq.n	8bcc <compile_scope_func_lambda_param+0xbc>
                // comes after a star, so counts as a keyword-only parameter
                comp->scope_cur->num_kwonly_args += 1;
    8bba:	68fb      	ldr	r3, [r7, #12]
    8bbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    8bbe:	68fa      	ldr	r2, [r7, #12]
    8bc0:	6a52      	ldr	r2, [r2, #36]	; 0x24
    8bc2:	8b92      	ldrh	r2, [r2, #28]
    8bc4:	3201      	adds	r2, #1
    8bc6:	b292      	uxth	r2, r2
    8bc8:	839a      	strh	r2, [r3, #28]
    8bca:	e079      	b.n	8cc0 <compile_scope_func_lambda_param+0x1b0>
            } else {
                // comes before a star, so counts as a positional parameter
                comp->scope_cur->num_pos_args += 1;
    8bcc:	68fb      	ldr	r3, [r7, #12]
    8bce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    8bd0:	68fa      	ldr	r2, [r7, #12]
    8bd2:	6a52      	ldr	r2, [r2, #36]	; 0x24
    8bd4:	8b52      	ldrh	r2, [r2, #26]
    8bd6:	3201      	adds	r2, #1
    8bd8:	b292      	uxth	r2, r2
    8bda:	835a      	strh	r2, [r3, #26]
    8bdc:	e070      	b.n	8cc0 <compile_scope_func_lambda_param+0x1b0>
            }
        } else if (MP_PARSE_NODE_STRUCT_KIND(pns) == pn_star) {
    8bde:	69fb      	ldr	r3, [r7, #28]
    8be0:	685b      	ldr	r3, [r3, #4]
    8be2:	b2da      	uxtb	r2, r3
    8be4:	683b      	ldr	r3, [r7, #0]
    8be6:	429a      	cmp	r2, r3
    8be8:	d14e      	bne.n	8c88 <compile_scope_func_lambda_param+0x178>
            if (comp->have_star) {
    8bea:	68fb      	ldr	r3, [r7, #12]
    8bec:	799b      	ldrb	r3, [r3, #6]
    8bee:	2b00      	cmp	r3, #0
    8bf0:	d005      	beq.n	8bfe <compile_scope_func_lambda_param+0xee>
                // more than one star
                compile_syntax_error(comp, pn, "invalid syntax");
    8bf2:	4a44      	ldr	r2, [pc, #272]	; (8d04 <compile_scope_func_lambda_param+0x1f4>)
    8bf4:	68b9      	ldr	r1, [r7, #8]
    8bf6:	68f8      	ldr	r0, [r7, #12]
    8bf8:	f7fc f88d 	bl	4d16 <compile_syntax_error>
                return;
    8bfc:	e07f      	b.n	8cfe <compile_scope_func_lambda_param+0x1ee>
            }
            comp->have_star = true;
    8bfe:	68fb      	ldr	r3, [r7, #12]
    8c00:	2201      	movs	r2, #1
    8c02:	719a      	strb	r2, [r3, #6]
            param_flag = ID_FLAG_IS_PARAM | ID_FLAG_IS_STAR_PARAM;
    8c04:	2303      	movs	r3, #3
    8c06:	623b      	str	r3, [r7, #32]
            if (MP_PARSE_NODE_IS_NULL(pns->nodes[0])) {
    8c08:	69fb      	ldr	r3, [r7, #28]
    8c0a:	689b      	ldr	r3, [r3, #8]
    8c0c:	2b00      	cmp	r3, #0
    8c0e:	d057      	beq.n	8cc0 <compile_scope_func_lambda_param+0x1b0>
                // bare star
                // TODO see http://www.python.org/dev/peps/pep-3102/
                //assert(comp->scope_cur->num_dict_params == 0);
            } else if (MP_PARSE_NODE_IS_ID(pns->nodes[0])) {
    8c10:	69fb      	ldr	r3, [r7, #28]
    8c12:	689b      	ldr	r3, [r3, #8]
    8c14:	f003 030f 	and.w	r3, r3, #15
    8c18:	2b02      	cmp	r3, #2
    8c1a:	d10d      	bne.n	8c38 <compile_scope_func_lambda_param+0x128>
                // named star
                comp->scope_cur->scope_flags |= MP_SCOPE_FLAG_VARARGS;
    8c1c:	68fb      	ldr	r3, [r7, #12]
    8c1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    8c20:	68fa      	ldr	r2, [r7, #12]
    8c22:	6a52      	ldr	r2, [r2, #36]	; 0x24
    8c24:	7e12      	ldrb	r2, [r2, #24]
    8c26:	f042 0201 	orr.w	r2, r2, #1
    8c2a:	b2d2      	uxtb	r2, r2
    8c2c:	761a      	strb	r2, [r3, #24]
                param_name = MP_PARSE_NODE_LEAF_ARG(pns->nodes[0]);
    8c2e:	69fb      	ldr	r3, [r7, #28]
    8c30:	689b      	ldr	r3, [r3, #8]
    8c32:	091b      	lsrs	r3, r3, #4
    8c34:	627b      	str	r3, [r7, #36]	; 0x24
    8c36:	e043      	b.n	8cc0 <compile_scope_func_lambda_param+0x1b0>
            } else {
                assert(MP_PARSE_NODE_IS_STRUCT_KIND(pns->nodes[0], PN_tfpdef)); // should be
    8c38:	69fb      	ldr	r3, [r7, #28]
    8c3a:	689b      	ldr	r3, [r3, #8]
    8c3c:	2b00      	cmp	r3, #0
    8c3e:	d00b      	beq.n	8c58 <compile_scope_func_lambda_param+0x148>
    8c40:	69fb      	ldr	r3, [r7, #28]
    8c42:	689b      	ldr	r3, [r3, #8]
    8c44:	f003 0303 	and.w	r3, r3, #3
    8c48:	2b00      	cmp	r3, #0
    8c4a:	d105      	bne.n	8c58 <compile_scope_func_lambda_param+0x148>
    8c4c:	69fb      	ldr	r3, [r7, #28]
    8c4e:	689b      	ldr	r3, [r3, #8]
    8c50:	685b      	ldr	r3, [r3, #4]
    8c52:	b2db      	uxtb	r3, r3
    8c54:	2b45      	cmp	r3, #69	; 0x45
    8c56:	d006      	beq.n	8c66 <compile_scope_func_lambda_param+0x156>
    8c58:	4b2e      	ldr	r3, [pc, #184]	; (8d14 <compile_scope_func_lambda_param+0x204>)
    8c5a:	4a2c      	ldr	r2, [pc, #176]	; (8d0c <compile_scope_func_lambda_param+0x1fc>)
    8c5c:	f640 21d7 	movw	r1, #2775	; 0xad7
    8c60:	482b      	ldr	r0, [pc, #172]	; (8d10 <compile_scope_func_lambda_param+0x200>)
    8c62:	f012 faab 	bl	1b1bc <__assert_func>
                // named star with possible annotation
                comp->scope_cur->scope_flags |= MP_SCOPE_FLAG_VARARGS;
    8c66:	68fb      	ldr	r3, [r7, #12]
    8c68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    8c6a:	68fa      	ldr	r2, [r7, #12]
    8c6c:	6a52      	ldr	r2, [r2, #36]	; 0x24
    8c6e:	7e12      	ldrb	r2, [r2, #24]
    8c70:	f042 0201 	orr.w	r2, r2, #1
    8c74:	b2d2      	uxtb	r2, r2
    8c76:	761a      	strb	r2, [r3, #24]
                pns = (mp_parse_node_struct_t*)pns->nodes[0];
    8c78:	69fb      	ldr	r3, [r7, #28]
    8c7a:	689b      	ldr	r3, [r3, #8]
    8c7c:	61fb      	str	r3, [r7, #28]
                param_name = MP_PARSE_NODE_LEAF_ARG(pns->nodes[0]);
    8c7e:	69fb      	ldr	r3, [r7, #28]
    8c80:	689b      	ldr	r3, [r3, #8]
    8c82:	091b      	lsrs	r3, r3, #4
    8c84:	627b      	str	r3, [r7, #36]	; 0x24
    8c86:	e01b      	b.n	8cc0 <compile_scope_func_lambda_param+0x1b0>
            }
        } else {
            assert(MP_PARSE_NODE_STRUCT_KIND(pns) == pn_dbl_star); // should be
    8c88:	69fb      	ldr	r3, [r7, #28]
    8c8a:	685b      	ldr	r3, [r3, #4]
    8c8c:	b2da      	uxtb	r2, r3
    8c8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    8c90:	429a      	cmp	r2, r3
    8c92:	d006      	beq.n	8ca2 <compile_scope_func_lambda_param+0x192>
    8c94:	4b20      	ldr	r3, [pc, #128]	; (8d18 <compile_scope_func_lambda_param+0x208>)
    8c96:	4a1d      	ldr	r2, [pc, #116]	; (8d0c <compile_scope_func_lambda_param+0x1fc>)
    8c98:	f640 21de 	movw	r1, #2782	; 0xade
    8c9c:	481c      	ldr	r0, [pc, #112]	; (8d10 <compile_scope_func_lambda_param+0x200>)
    8c9e:	f012 fa8d 	bl	1b1bc <__assert_func>
            param_name = MP_PARSE_NODE_LEAF_ARG(pns->nodes[0]);
    8ca2:	69fb      	ldr	r3, [r7, #28]
    8ca4:	689b      	ldr	r3, [r3, #8]
    8ca6:	091b      	lsrs	r3, r3, #4
    8ca8:	627b      	str	r3, [r7, #36]	; 0x24
            param_flag = ID_FLAG_IS_PARAM | ID_FLAG_IS_DBL_STAR_PARAM;
    8caa:	2305      	movs	r3, #5
    8cac:	623b      	str	r3, [r7, #32]
            comp->scope_cur->scope_flags |= MP_SCOPE_FLAG_VARKEYWORDS;
    8cae:	68fb      	ldr	r3, [r7, #12]
    8cb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    8cb2:	68fa      	ldr	r2, [r7, #12]
    8cb4:	6a52      	ldr	r2, [r2, #36]	; 0x24
    8cb6:	7e12      	ldrb	r2, [r2, #24]
    8cb8:	f042 0202 	orr.w	r2, r2, #2
    8cbc:	b2d2      	uxtb	r2, r2
    8cbe:	761a      	strb	r2, [r3, #24]
        }
    }

    if (param_name != MP_QSTR_NULL) {
    8cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    8cc2:	2b00      	cmp	r3, #0
    8cc4:	d01b      	beq.n	8cfe <compile_scope_func_lambda_param+0x1ee>
        bool added;
        id_info_t *id_info = scope_find_or_add_id(comp->scope_cur, param_name, &added);
    8cc6:	68fb      	ldr	r3, [r7, #12]
    8cc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    8cca:	f107 0217 	add.w	r2, r7, #23
    8cce:	6a79      	ldr	r1, [r7, #36]	; 0x24
    8cd0:	4618      	mov	r0, r3
    8cd2:	f7fb fed9 	bl	4a88 <scope_find_or_add_id>
    8cd6:	61b8      	str	r0, [r7, #24]
        if (!added) {
    8cd8:	7dfb      	ldrb	r3, [r7, #23]
    8cda:	f083 0301 	eor.w	r3, r3, #1
    8cde:	b2db      	uxtb	r3, r3
    8ce0:	2b00      	cmp	r3, #0
    8ce2:	d005      	beq.n	8cf0 <compile_scope_func_lambda_param+0x1e0>
            compile_syntax_error(comp, pn, "name reused for argument");
    8ce4:	4a0d      	ldr	r2, [pc, #52]	; (8d1c <compile_scope_func_lambda_param+0x20c>)
    8ce6:	68b9      	ldr	r1, [r7, #8]
    8ce8:	68f8      	ldr	r0, [r7, #12]
    8cea:	f7fc f814 	bl	4d16 <compile_syntax_error>
    8cee:	e006      	b.n	8cfe <compile_scope_func_lambda_param+0x1ee>
            return;
        }
        id_info->kind = ID_INFO_KIND_LOCAL;
    8cf0:	69bb      	ldr	r3, [r7, #24]
    8cf2:	2202      	movs	r2, #2
    8cf4:	701a      	strb	r2, [r3, #0]
        id_info->flags = param_flag;
    8cf6:	6a3b      	ldr	r3, [r7, #32]
    8cf8:	b2da      	uxtb	r2, r3
    8cfa:	69bb      	ldr	r3, [r7, #24]
    8cfc:	705a      	strb	r2, [r3, #1]
    }
}
    8cfe:	3728      	adds	r7, #40	; 0x28
    8d00:	46bd      	mov	sp, r7
    8d02:	bd80      	pop	{r7, pc}
    8d04:	0001e884 	.word	0x0001e884
    8d08:	0001e1cc 	.word	0x0001e1cc
    8d0c:	0001ee44 	.word	0x0001ee44
    8d10:	0001e084 	.word	0x0001e084
    8d14:	0001e9f0 	.word	0x0001e9f0
    8d18:	0001ea28 	.word	0x0001ea28
    8d1c:	0001ea58 	.word	0x0001ea58

00008d20 <compile_scope_func_param>:

STATIC void compile_scope_func_param(compiler_t *comp, mp_parse_node_t pn) {
    8d20:	b580      	push	{r7, lr}
    8d22:	b084      	sub	sp, #16
    8d24:	af02      	add	r7, sp, #8
    8d26:	6078      	str	r0, [r7, #4]
    8d28:	6039      	str	r1, [r7, #0]
    compile_scope_func_lambda_param(comp, pn, PN_typedargslist_name, PN_typedargslist_star, PN_typedargslist_dbl_star);
    8d2a:	2342      	movs	r3, #66	; 0x42
    8d2c:	9300      	str	r3, [sp, #0]
    8d2e:	2341      	movs	r3, #65	; 0x41
    8d30:	2240      	movs	r2, #64	; 0x40
    8d32:	6839      	ldr	r1, [r7, #0]
    8d34:	6878      	ldr	r0, [r7, #4]
    8d36:	f7ff feeb 	bl	8b10 <compile_scope_func_lambda_param>
}
    8d3a:	bf00      	nop
    8d3c:	3708      	adds	r7, #8
    8d3e:	46bd      	mov	sp, r7
    8d40:	bd80      	pop	{r7, pc}

00008d42 <compile_scope_lambda_param>:

STATIC void compile_scope_lambda_param(compiler_t *comp, mp_parse_node_t pn) {
    8d42:	b580      	push	{r7, lr}
    8d44:	b084      	sub	sp, #16
    8d46:	af02      	add	r7, sp, #8
    8d48:	6078      	str	r0, [r7, #4]
    8d4a:	6039      	str	r1, [r7, #0]
    compile_scope_func_lambda_param(comp, pn, PN_varargslist_name, PN_varargslist_star, PN_varargslist_dbl_star);
    8d4c:	234a      	movs	r3, #74	; 0x4a
    8d4e:	9300      	str	r3, [sp, #0]
    8d50:	2349      	movs	r3, #73	; 0x49
    8d52:	2248      	movs	r2, #72	; 0x48
    8d54:	6839      	ldr	r1, [r7, #0]
    8d56:	6878      	ldr	r0, [r7, #4]
    8d58:	f7ff feda 	bl	8b10 <compile_scope_func_lambda_param>
}
    8d5c:	bf00      	nop
    8d5e:	3708      	adds	r7, #8
    8d60:	46bd      	mov	sp, r7
    8d62:	bd80      	pop	{r7, pc}

00008d64 <compile_scope_comp_iter>:
        }
    }
}
#endif // MICROPY_EMIT_NATIVE

STATIC void compile_scope_comp_iter(compiler_t *comp, mp_parse_node_struct_t *pns_comp_for, mp_parse_node_t pn_inner_expr, int for_depth) {
    8d64:	b580      	push	{r7, lr}
    8d66:	b08a      	sub	sp, #40	; 0x28
    8d68:	af00      	add	r7, sp, #0
    8d6a:	60f8      	str	r0, [r7, #12]
    8d6c:	60b9      	str	r1, [r7, #8]
    8d6e:	607a      	str	r2, [r7, #4]
    8d70:	603b      	str	r3, [r7, #0]
    uint l_top = comp_next_label(comp);
    8d72:	68f8      	ldr	r0, [r7, #12]
    8d74:	f7fb ffea 	bl	4d4c <comp_next_label>
    8d78:	6238      	str	r0, [r7, #32]
    uint l_end = comp_next_label(comp);
    8d7a:	68f8      	ldr	r0, [r7, #12]
    8d7c:	f7fb ffe6 	bl	4d4c <comp_next_label>
    8d80:	61f8      	str	r0, [r7, #28]
    EMIT_ARG(label_assign, l_top);
    8d82:	68fb      	ldr	r3, [r7, #12]
    8d84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    8d86:	6a39      	ldr	r1, [r7, #32]
    8d88:	4618      	mov	r0, r3
    8d8a:	f001 fa6f 	bl	a26c <mp_emit_bc_label_assign>
    EMIT_ARG(for_iter, l_end);
    8d8e:	68fb      	ldr	r3, [r7, #12]
    8d90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    8d92:	69f9      	ldr	r1, [r7, #28]
    8d94:	4618      	mov	r0, r3
    8d96:	f001 fdf8 	bl	a98a <mp_emit_bc_for_iter>
    c_assign(comp, pns_comp_for->nodes[0], ASSIGN_STORE);
    8d9a:	68bb      	ldr	r3, [r7, #8]
    8d9c:	689b      	ldr	r3, [r3, #8]
    8d9e:	2200      	movs	r2, #0
    8da0:	4619      	mov	r1, r3
    8da2:	68f8      	ldr	r0, [r7, #12]
    8da4:	f7fc fbf8 	bl	5598 <c_assign>
    mp_parse_node_t pn_iter = pns_comp_for->nodes[2];
    8da8:	68bb      	ldr	r3, [r7, #8]
    8daa:	691b      	ldr	r3, [r3, #16]
    8dac:	627b      	str	r3, [r7, #36]	; 0x24

    tail_recursion:
    if (MP_PARSE_NODE_IS_NULL(pn_iter)) {
    8dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    8db0:	2b00      	cmp	r3, #0
    8db2:	d120      	bne.n	8df6 <compile_scope_comp_iter+0x92>
        // no more nested if/for; compile inner expression
        compile_node(comp, pn_inner_expr);
    8db4:	6879      	ldr	r1, [r7, #4]
    8db6:	68f8      	ldr	r0, [r7, #12]
    8db8:	f7ff fe1b 	bl	89f2 <compile_node>
        if (comp->scope_cur->kind == SCOPE_GEN_EXPR) {
    8dbc:	68fb      	ldr	r3, [r7, #12]
    8dbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    8dc0:	681b      	ldr	r3, [r3, #0]
    8dc2:	2b06      	cmp	r3, #6
    8dc4:	d10b      	bne.n	8dde <compile_scope_comp_iter+0x7a>
            EMIT_ARG(yield, MP_EMIT_YIELD_VALUE);
    8dc6:	68fb      	ldr	r3, [r7, #12]
    8dc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    8dca:	2100      	movs	r1, #0
    8dcc:	4618      	mov	r0, r3
    8dce:	f001 fffd 	bl	adcc <mp_emit_bc_yield>
            EMIT(pop_top);
    8dd2:	68fb      	ldr	r3, [r7, #12]
    8dd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    8dd6:	4618      	mov	r0, r3
    8dd8:	f001 fca1 	bl	a71e <mp_emit_bc_pop_top>
    8ddc:	e03e      	b.n	8e5c <compile_scope_comp_iter+0xf8>
        } else {
            EMIT_ARG(store_comp, comp->scope_cur->kind, 4 * for_depth + 5);
    8dde:	68fb      	ldr	r3, [r7, #12]
    8de0:	6a98      	ldr	r0, [r3, #40]	; 0x28
    8de2:	68fb      	ldr	r3, [r7, #12]
    8de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    8de6:	6819      	ldr	r1, [r3, #0]
    8de8:	683b      	ldr	r3, [r7, #0]
    8dea:	009b      	lsls	r3, r3, #2
    8dec:	3305      	adds	r3, #5
    8dee:	461a      	mov	r2, r3
    8df0:	f001 fe84 	bl	aafc <mp_emit_bc_store_comp>
    8df4:	e032      	b.n	8e5c <compile_scope_comp_iter+0xf8>
        }
    } else if (MP_PARSE_NODE_STRUCT_KIND((mp_parse_node_struct_t*)pn_iter) == PN_comp_if) {
    8df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    8df8:	685b      	ldr	r3, [r3, #4]
    8dfa:	b2db      	uxtb	r3, r3
    8dfc:	2ba0      	cmp	r3, #160	; 0xa0
    8dfe:	d10c      	bne.n	8e1a <compile_scope_comp_iter+0xb6>
        // if condition
        mp_parse_node_struct_t *pns_comp_if = (mp_parse_node_struct_t*)pn_iter;
    8e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    8e02:	61bb      	str	r3, [r7, #24]
        c_if_cond(comp, pns_comp_if->nodes[0], false, l_top);
    8e04:	69bb      	ldr	r3, [r7, #24]
    8e06:	6899      	ldr	r1, [r3, #8]
    8e08:	6a3b      	ldr	r3, [r7, #32]
    8e0a:	2200      	movs	r2, #0
    8e0c:	68f8      	ldr	r0, [r7, #12]
    8e0e:	f7fc f924 	bl	505a <c_if_cond>
        pn_iter = pns_comp_if->nodes[1];
    8e12:	69bb      	ldr	r3, [r7, #24]
    8e14:	68db      	ldr	r3, [r3, #12]
    8e16:	627b      	str	r3, [r7, #36]	; 0x24
        goto tail_recursion;
    8e18:	e7c9      	b.n	8dae <compile_scope_comp_iter+0x4a>
    } else {
        assert(MP_PARSE_NODE_STRUCT_KIND((mp_parse_node_struct_t*)pn_iter) == PN_comp_for); // should be
    8e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    8e1c:	685b      	ldr	r3, [r3, #4]
    8e1e:	b2db      	uxtb	r3, r3
    8e20:	2b9f      	cmp	r3, #159	; 0x9f
    8e22:	d006      	beq.n	8e32 <compile_scope_comp_iter+0xce>
    8e24:	4b18      	ldr	r3, [pc, #96]	; (8e88 <compile_scope_comp_iter+0x124>)
    8e26:	4a19      	ldr	r2, [pc, #100]	; (8e8c <compile_scope_comp_iter+0x128>)
    8e28:	f640 313d 	movw	r1, #2877	; 0xb3d
    8e2c:	4818      	ldr	r0, [pc, #96]	; (8e90 <compile_scope_comp_iter+0x12c>)
    8e2e:	f012 f9c5 	bl	1b1bc <__assert_func>
        // for loop
        mp_parse_node_struct_t *pns_comp_for2 = (mp_parse_node_struct_t*)pn_iter;
    8e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    8e34:	617b      	str	r3, [r7, #20]
        compile_node(comp, pns_comp_for2->nodes[1]);
    8e36:	697b      	ldr	r3, [r7, #20]
    8e38:	68db      	ldr	r3, [r3, #12]
    8e3a:	4619      	mov	r1, r3
    8e3c:	68f8      	ldr	r0, [r7, #12]
    8e3e:	f7ff fdd8 	bl	89f2 <compile_node>
        EMIT_ARG(get_iter, true);
    8e42:	68fb      	ldr	r3, [r7, #12]
    8e44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    8e46:	2101      	movs	r1, #1
    8e48:	4618      	mov	r0, r3
    8e4a:	f001 fd80 	bl	a94e <mp_emit_bc_get_iter>
        compile_scope_comp_iter(comp, pns_comp_for2, pn_inner_expr, for_depth + 1);
    8e4e:	683b      	ldr	r3, [r7, #0]
    8e50:	3301      	adds	r3, #1
    8e52:	687a      	ldr	r2, [r7, #4]
    8e54:	6979      	ldr	r1, [r7, #20]
    8e56:	68f8      	ldr	r0, [r7, #12]
    8e58:	f7ff ff84 	bl	8d64 <compile_scope_comp_iter>
    }

    EMIT_ARG(jump, l_top);
    8e5c:	68fb      	ldr	r3, [r7, #12]
    8e5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    8e60:	6a39      	ldr	r1, [r7, #32]
    8e62:	4618      	mov	r0, r3
    8e64:	f001 fc8c 	bl	a780 <mp_emit_bc_jump>
    EMIT_ARG(label_assign, l_end);
    8e68:	68fb      	ldr	r3, [r7, #12]
    8e6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    8e6c:	69f9      	ldr	r1, [r7, #28]
    8e6e:	4618      	mov	r0, r3
    8e70:	f001 f9fc 	bl	a26c <mp_emit_bc_label_assign>
    EMIT(for_iter_end);
    8e74:	68fb      	ldr	r3, [r7, #12]
    8e76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    8e78:	4618      	mov	r0, r3
    8e7a:	f001 fd98 	bl	a9ae <mp_emit_bc_for_iter_end>
}
    8e7e:	bf00      	nop
    8e80:	3728      	adds	r7, #40	; 0x28
    8e82:	46bd      	mov	sp, r7
    8e84:	bd80      	pop	{r7, pc}
    8e86:	bf00      	nop
    8e88:	0001ea74 	.word	0x0001ea74
    8e8c:	0001ee64 	.word	0x0001ee64
    8e90:	0001e084 	.word	0x0001e084

00008e94 <check_for_doc_string>:

STATIC void check_for_doc_string(compiler_t *comp, mp_parse_node_t pn) {
    8e94:	b480      	push	{r7}
    8e96:	b083      	sub	sp, #12
    8e98:	af00      	add	r7, sp, #0
    8e9a:	6078      	str	r0, [r7, #4]
    8e9c:	6039      	str	r1, [r7, #0]
    }
#else
    (void)comp;
    (void)pn;
#endif
}
    8e9e:	bf00      	nop
    8ea0:	370c      	adds	r7, #12
    8ea2:	46bd      	mov	sp, r7
    8ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
    8ea8:	4770      	bx	lr

00008eaa <compile_scope>:

STATIC void compile_scope(compiler_t *comp, scope_t *scope, pass_kind_t pass) {
    8eaa:	b580      	push	{r7, lr}
    8eac:	b090      	sub	sp, #64	; 0x40
    8eae:	af00      	add	r7, sp, #0
    8eb0:	60f8      	str	r0, [r7, #12]
    8eb2:	60b9      	str	r1, [r7, #8]
    8eb4:	607a      	str	r2, [r7, #4]
    comp->pass = pass;
    8eb6:	687b      	ldr	r3, [r7, #4]
    8eb8:	b2da      	uxtb	r2, r3
    8eba:	68fb      	ldr	r3, [r7, #12]
    8ebc:	715a      	strb	r2, [r3, #5]
    comp->scope_cur = scope;
    8ebe:	68fb      	ldr	r3, [r7, #12]
    8ec0:	68ba      	ldr	r2, [r7, #8]
    8ec2:	625a      	str	r2, [r3, #36]	; 0x24
    comp->next_label = 0;
    8ec4:	68fb      	ldr	r3, [r7, #12]
    8ec6:	2200      	movs	r2, #0
    8ec8:	611a      	str	r2, [r3, #16]
    EMIT_ARG(start_pass, pass, scope);
    8eca:	68fb      	ldr	r3, [r7, #12]
    8ecc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    8ece:	68ba      	ldr	r2, [r7, #8]
    8ed0:	6879      	ldr	r1, [r7, #4]
    8ed2:	4618      	mov	r0, r3
    8ed4:	f000 fff5 	bl	9ec2 <mp_emit_bc_start_pass>

    if (comp->pass == MP_PASS_SCOPE) {
    8ed8:	68fb      	ldr	r3, [r7, #12]
    8eda:	795b      	ldrb	r3, [r3, #5]
    8edc:	2b01      	cmp	r3, #1
    8ede:	d105      	bne.n	8eec <compile_scope+0x42>
        // reset maximum stack sizes in scope
        // they will be computed in this first pass
        scope->stack_size = 0;
    8ee0:	68bb      	ldr	r3, [r7, #8]
    8ee2:	2200      	movs	r2, #0
    8ee4:	845a      	strh	r2, [r3, #34]	; 0x22
        scope->exc_stack_size = 0;
    8ee6:	68bb      	ldr	r3, [r7, #8]
    8ee8:	2200      	movs	r2, #0
    8eea:	849a      	strh	r2, [r3, #36]	; 0x24
    }

    // compile
    if (MP_PARSE_NODE_IS_STRUCT_KIND(scope->pn, PN_eval_input)) {
    8eec:	68bb      	ldr	r3, [r7, #8]
    8eee:	68db      	ldr	r3, [r3, #12]
    8ef0:	2b00      	cmp	r3, #0
    8ef2:	d025      	beq.n	8f40 <compile_scope+0x96>
    8ef4:	68bb      	ldr	r3, [r7, #8]
    8ef6:	68db      	ldr	r3, [r3, #12]
    8ef8:	f003 0303 	and.w	r3, r3, #3
    8efc:	2b00      	cmp	r3, #0
    8efe:	d11f      	bne.n	8f40 <compile_scope+0x96>
    8f00:	68bb      	ldr	r3, [r7, #8]
    8f02:	68db      	ldr	r3, [r3, #12]
    8f04:	685b      	ldr	r3, [r3, #4]
    8f06:	b2db      	uxtb	r3, r3
    8f08:	2b38      	cmp	r3, #56	; 0x38
    8f0a:	d119      	bne.n	8f40 <compile_scope+0x96>
        assert(scope->kind == SCOPE_MODULE);
    8f0c:	68bb      	ldr	r3, [r7, #8]
    8f0e:	681b      	ldr	r3, [r3, #0]
    8f10:	2b00      	cmp	r3, #0
    8f12:	d006      	beq.n	8f22 <compile_scope+0x78>
    8f14:	4b9c      	ldr	r3, [pc, #624]	; (9188 <compile_scope+0x2de>)
    8f16:	4a9d      	ldr	r2, [pc, #628]	; (918c <compile_scope+0x2e2>)
    8f18:	f640 3186 	movw	r1, #2950	; 0xb86
    8f1c:	489c      	ldr	r0, [pc, #624]	; (9190 <compile_scope+0x2e6>)
    8f1e:	f012 f94d 	bl	1b1bc <__assert_func>
        mp_parse_node_struct_t *pns = (mp_parse_node_struct_t*)scope->pn;
    8f22:	68bb      	ldr	r3, [r7, #8]
    8f24:	68db      	ldr	r3, [r3, #12]
    8f26:	63fb      	str	r3, [r7, #60]	; 0x3c
        compile_node(comp, pns->nodes[0]); // compile the expression
    8f28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    8f2a:	689b      	ldr	r3, [r3, #8]
    8f2c:	4619      	mov	r1, r3
    8f2e:	68f8      	ldr	r0, [r7, #12]
    8f30:	f7ff fd5f 	bl	89f2 <compile_node>
        EMIT(return_value);
    8f34:	68fb      	ldr	r3, [r7, #12]
    8f36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    8f38:	4618      	mov	r0, r3
    8f3a:	f001 ff0c 	bl	ad56 <mp_emit_bc_return_value>
    if (MP_PARSE_NODE_IS_STRUCT_KIND(scope->pn, PN_eval_input)) {
    8f3e:	e21c      	b.n	937a <compile_scope+0x4d0>
    } else if (scope->kind == SCOPE_MODULE) {
    8f40:	68bb      	ldr	r3, [r7, #8]
    8f42:	681b      	ldr	r3, [r3, #0]
    8f44:	2b00      	cmp	r3, #0
    8f46:	d11b      	bne.n	8f80 <compile_scope+0xd6>
        if (!comp->is_repl) {
    8f48:	68fb      	ldr	r3, [r7, #12]
    8f4a:	791b      	ldrb	r3, [r3, #4]
    8f4c:	2b00      	cmp	r3, #0
    8f4e:	d105      	bne.n	8f5c <compile_scope+0xb2>
            check_for_doc_string(comp, scope->pn);
    8f50:	68bb      	ldr	r3, [r7, #8]
    8f52:	68db      	ldr	r3, [r3, #12]
    8f54:	4619      	mov	r1, r3
    8f56:	68f8      	ldr	r0, [r7, #12]
    8f58:	f7ff ff9c 	bl	8e94 <check_for_doc_string>
        }
        compile_node(comp, scope->pn);
    8f5c:	68bb      	ldr	r3, [r7, #8]
    8f5e:	68db      	ldr	r3, [r3, #12]
    8f60:	4619      	mov	r1, r3
    8f62:	68f8      	ldr	r0, [r7, #12]
    8f64:	f7ff fd45 	bl	89f2 <compile_node>
        EMIT_ARG(load_const_tok, MP_TOKEN_KW_NONE);
    8f68:	68fb      	ldr	r3, [r7, #12]
    8f6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    8f6c:	210e      	movs	r1, #14
    8f6e:	4618      	mov	r0, r3
    8f70:	f001 f9fa 	bl	a368 <mp_emit_bc_load_const_tok>
        EMIT(return_value);
    8f74:	68fb      	ldr	r3, [r7, #12]
    8f76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    8f78:	4618      	mov	r0, r3
    8f7a:	f001 feec 	bl	ad56 <mp_emit_bc_return_value>
    8f7e:	e1fc      	b.n	937a <compile_scope+0x4d0>
    } else if (scope->kind == SCOPE_FUNCTION) {
    8f80:	68bb      	ldr	r3, [r7, #8]
    8f82:	681b      	ldr	r3, [r3, #0]
    8f84:	2b07      	cmp	r3, #7
    8f86:	d14b      	bne.n	9020 <compile_scope+0x176>
        assert(MP_PARSE_NODE_IS_STRUCT(scope->pn));
    8f88:	68bb      	ldr	r3, [r7, #8]
    8f8a:	68db      	ldr	r3, [r3, #12]
    8f8c:	2b00      	cmp	r3, #0
    8f8e:	d005      	beq.n	8f9c <compile_scope+0xf2>
    8f90:	68bb      	ldr	r3, [r7, #8]
    8f92:	68db      	ldr	r3, [r3, #12]
    8f94:	f003 0303 	and.w	r3, r3, #3
    8f98:	2b00      	cmp	r3, #0
    8f9a:	d006      	beq.n	8faa <compile_scope+0x100>
    8f9c:	4b7d      	ldr	r3, [pc, #500]	; (9194 <compile_scope+0x2ea>)
    8f9e:	4a7b      	ldr	r2, [pc, #492]	; (918c <compile_scope+0x2e2>)
    8fa0:	f640 3192 	movw	r1, #2962	; 0xb92
    8fa4:	487a      	ldr	r0, [pc, #488]	; (9190 <compile_scope+0x2e6>)
    8fa6:	f012 f909 	bl	1b1bc <__assert_func>
        mp_parse_node_struct_t *pns = (mp_parse_node_struct_t*)scope->pn;
    8faa:	68bb      	ldr	r3, [r7, #8]
    8fac:	68db      	ldr	r3, [r3, #12]
    8fae:	63bb      	str	r3, [r7, #56]	; 0x38
        assert(MP_PARSE_NODE_STRUCT_KIND(pns) == PN_funcdef);
    8fb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    8fb2:	685b      	ldr	r3, [r3, #4]
    8fb4:	b2db      	uxtb	r3, r3
    8fb6:	2b03      	cmp	r3, #3
    8fb8:	d006      	beq.n	8fc8 <compile_scope+0x11e>
    8fba:	4b77      	ldr	r3, [pc, #476]	; (9198 <compile_scope+0x2ee>)
    8fbc:	4a73      	ldr	r2, [pc, #460]	; (918c <compile_scope+0x2e2>)
    8fbe:	f640 3194 	movw	r1, #2964	; 0xb94
    8fc2:	4873      	ldr	r0, [pc, #460]	; (9190 <compile_scope+0x2e6>)
    8fc4:	f012 f8fa 	bl	1b1bc <__assert_func>

        // work out number of parameters, keywords and default parameters, and add them to the id_info array
        // must be done before compiling the body so that arguments are numbered first (for LOAD_FAST etc)
        if (comp->pass == MP_PASS_SCOPE) {
    8fc8:	68fb      	ldr	r3, [r7, #12]
    8fca:	795b      	ldrb	r3, [r3, #5]
    8fcc:	2b01      	cmp	r3, #1
    8fce:	d109      	bne.n	8fe4 <compile_scope+0x13a>
            comp->have_star = false;
    8fd0:	68fb      	ldr	r3, [r7, #12]
    8fd2:	2200      	movs	r2, #0
    8fd4:	719a      	strb	r2, [r3, #6]
            apply_to_single_or_list(comp, pns->nodes[1], PN_typedargslist, compile_scope_func_param);
    8fd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    8fd8:	68d9      	ldr	r1, [r3, #12]
    8fda:	4b70      	ldr	r3, [pc, #448]	; (919c <compile_scope+0x2f2>)
    8fdc:	223e      	movs	r2, #62	; 0x3e
    8fde:	68f8      	ldr	r0, [r7, #12]
    8fe0:	f7fb ff2f 	bl	4e42 <apply_to_single_or_list>
                }
            }
        }
        #endif // MICROPY_EMIT_NATIVE

        compile_node(comp, pns->nodes[3]); // 3 is function body
    8fe4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    8fe6:	695b      	ldr	r3, [r3, #20]
    8fe8:	4619      	mov	r1, r3
    8fea:	68f8      	ldr	r0, [r7, #12]
    8fec:	f7ff fd01 	bl	89f2 <compile_node>
        // emit return if it wasn't the last opcode
        if (!EMIT(last_emit_was_return_value)) {
    8ff0:	68fb      	ldr	r3, [r7, #12]
    8ff2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    8ff4:	4618      	mov	r0, r3
    8ff6:	f001 f8d9 	bl	a1ac <mp_emit_bc_last_emit_was_return_value>
    8ffa:	4603      	mov	r3, r0
    8ffc:	f083 0301 	eor.w	r3, r3, #1
    9000:	b2db      	uxtb	r3, r3
    9002:	2b00      	cmp	r3, #0
    9004:	f000 81b9 	beq.w	937a <compile_scope+0x4d0>
            EMIT_ARG(load_const_tok, MP_TOKEN_KW_NONE);
    9008:	68fb      	ldr	r3, [r7, #12]
    900a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    900c:	210e      	movs	r1, #14
    900e:	4618      	mov	r0, r3
    9010:	f001 f9aa 	bl	a368 <mp_emit_bc_load_const_tok>
            EMIT(return_value);
    9014:	68fb      	ldr	r3, [r7, #12]
    9016:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    9018:	4618      	mov	r0, r3
    901a:	f001 fe9c 	bl	ad56 <mp_emit_bc_return_value>
    901e:	e1ac      	b.n	937a <compile_scope+0x4d0>
        }
    } else if (scope->kind == SCOPE_LAMBDA) {
    9020:	68bb      	ldr	r3, [r7, #8]
    9022:	681b      	ldr	r3, [r3, #0]
    9024:	2b02      	cmp	r3, #2
    9026:	d14a      	bne.n	90be <compile_scope+0x214>
        assert(MP_PARSE_NODE_IS_STRUCT(scope->pn));
    9028:	68bb      	ldr	r3, [r7, #8]
    902a:	68db      	ldr	r3, [r3, #12]
    902c:	2b00      	cmp	r3, #0
    902e:	d005      	beq.n	903c <compile_scope+0x192>
    9030:	68bb      	ldr	r3, [r7, #8]
    9032:	68db      	ldr	r3, [r3, #12]
    9034:	f003 0303 	and.w	r3, r3, #3
    9038:	2b00      	cmp	r3, #0
    903a:	d006      	beq.n	904a <compile_scope+0x1a0>
    903c:	4b55      	ldr	r3, [pc, #340]	; (9194 <compile_scope+0x2ea>)
    903e:	4a53      	ldr	r2, [pc, #332]	; (918c <compile_scope+0x2e2>)
    9040:	f640 31b9 	movw	r1, #3001	; 0xbb9
    9044:	4852      	ldr	r0, [pc, #328]	; (9190 <compile_scope+0x2e6>)
    9046:	f012 f8b9 	bl	1b1bc <__assert_func>
        mp_parse_node_struct_t *pns = (mp_parse_node_struct_t*)scope->pn;
    904a:	68bb      	ldr	r3, [r7, #8]
    904c:	68db      	ldr	r3, [r3, #12]
    904e:	637b      	str	r3, [r7, #52]	; 0x34
        assert(MP_PARSE_NODE_STRUCT_NUM_NODES(pns) == 3);
    9050:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    9052:	685b      	ldr	r3, [r3, #4]
    9054:	0a1b      	lsrs	r3, r3, #8
    9056:	2b03      	cmp	r3, #3
    9058:	d006      	beq.n	9068 <compile_scope+0x1be>
    905a:	4b51      	ldr	r3, [pc, #324]	; (91a0 <compile_scope+0x2f6>)
    905c:	4a4b      	ldr	r2, [pc, #300]	; (918c <compile_scope+0x2e2>)
    905e:	f640 31bb 	movw	r1, #3003	; 0xbbb
    9062:	484b      	ldr	r0, [pc, #300]	; (9190 <compile_scope+0x2e6>)
    9064:	f012 f8aa 	bl	1b1bc <__assert_func>

        // work out number of parameters, keywords and default parameters, and add them to the id_info array
        // must be done before compiling the body so that arguments are numbered first (for LOAD_FAST etc)
        if (comp->pass == MP_PASS_SCOPE) {
    9068:	68fb      	ldr	r3, [r7, #12]
    906a:	795b      	ldrb	r3, [r3, #5]
    906c:	2b01      	cmp	r3, #1
    906e:	d109      	bne.n	9084 <compile_scope+0x1da>
            comp->have_star = false;
    9070:	68fb      	ldr	r3, [r7, #12]
    9072:	2200      	movs	r2, #0
    9074:	719a      	strb	r2, [r3, #6]
            apply_to_single_or_list(comp, pns->nodes[0], PN_varargslist, compile_scope_lambda_param);
    9076:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    9078:	6899      	ldr	r1, [r3, #8]
    907a:	4b4a      	ldr	r3, [pc, #296]	; (91a4 <compile_scope+0x2fa>)
    907c:	2246      	movs	r2, #70	; 0x46
    907e:	68f8      	ldr	r0, [r7, #12]
    9080:	f7fb fedf 	bl	4e42 <apply_to_single_or_list>
        }

        compile_node(comp, pns->nodes[1]); // 1 is lambda body
    9084:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    9086:	68db      	ldr	r3, [r3, #12]
    9088:	4619      	mov	r1, r3
    908a:	68f8      	ldr	r0, [r7, #12]
    908c:	f7ff fcb1 	bl	89f2 <compile_node>

        // if the lambda is a generator, then we return None, not the result of the expression of the lambda
        if (scope->scope_flags & MP_SCOPE_FLAG_GENERATOR) {
    9090:	68bb      	ldr	r3, [r7, #8]
    9092:	7e1b      	ldrb	r3, [r3, #24]
    9094:	f003 0304 	and.w	r3, r3, #4
    9098:	2b00      	cmp	r3, #0
    909a:	d00a      	beq.n	90b2 <compile_scope+0x208>
            EMIT(pop_top);
    909c:	68fb      	ldr	r3, [r7, #12]
    909e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    90a0:	4618      	mov	r0, r3
    90a2:	f001 fb3c 	bl	a71e <mp_emit_bc_pop_top>
            EMIT_ARG(load_const_tok, MP_TOKEN_KW_NONE);
    90a6:	68fb      	ldr	r3, [r7, #12]
    90a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    90aa:	210e      	movs	r1, #14
    90ac:	4618      	mov	r0, r3
    90ae:	f001 f95b 	bl	a368 <mp_emit_bc_load_const_tok>
        }
        EMIT(return_value);
    90b2:	68fb      	ldr	r3, [r7, #12]
    90b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    90b6:	4618      	mov	r0, r3
    90b8:	f001 fe4d 	bl	ad56 <mp_emit_bc_return_value>
    90bc:	e15d      	b.n	937a <compile_scope+0x4d0>
    } else if (scope->kind == SCOPE_LIST_COMP || scope->kind == SCOPE_DICT_COMP || scope->kind == SCOPE_SET_COMP || scope->kind == SCOPE_GEN_EXPR) {
    90be:	68bb      	ldr	r3, [r7, #8]
    90c0:	681b      	ldr	r3, [r3, #0]
    90c2:	2b03      	cmp	r3, #3
    90c4:	d00c      	beq.n	90e0 <compile_scope+0x236>
    90c6:	68bb      	ldr	r3, [r7, #8]
    90c8:	681b      	ldr	r3, [r3, #0]
    90ca:	2b04      	cmp	r3, #4
    90cc:	d008      	beq.n	90e0 <compile_scope+0x236>
    90ce:	68bb      	ldr	r3, [r7, #8]
    90d0:	681b      	ldr	r3, [r3, #0]
    90d2:	2b05      	cmp	r3, #5
    90d4:	d004      	beq.n	90e0 <compile_scope+0x236>
    90d6:	68bb      	ldr	r3, [r7, #8]
    90d8:	681b      	ldr	r3, [r3, #0]
    90da:	2b06      	cmp	r3, #6
    90dc:	f040 80c0 	bne.w	9260 <compile_scope+0x3b6>
        // a bit of a hack at the moment

        assert(MP_PARSE_NODE_IS_STRUCT(scope->pn));
    90e0:	68bb      	ldr	r3, [r7, #8]
    90e2:	68db      	ldr	r3, [r3, #12]
    90e4:	2b00      	cmp	r3, #0
    90e6:	d005      	beq.n	90f4 <compile_scope+0x24a>
    90e8:	68bb      	ldr	r3, [r7, #8]
    90ea:	68db      	ldr	r3, [r3, #12]
    90ec:	f003 0303 	and.w	r3, r3, #3
    90f0:	2b00      	cmp	r3, #0
    90f2:	d006      	beq.n	9102 <compile_scope+0x258>
    90f4:	4b27      	ldr	r3, [pc, #156]	; (9194 <compile_scope+0x2ea>)
    90f6:	4a25      	ldr	r2, [pc, #148]	; (918c <compile_scope+0x2e2>)
    90f8:	f640 31cf 	movw	r1, #3023	; 0xbcf
    90fc:	4824      	ldr	r0, [pc, #144]	; (9190 <compile_scope+0x2e6>)
    90fe:	f012 f85d 	bl	1b1bc <__assert_func>
        mp_parse_node_struct_t *pns = (mp_parse_node_struct_t*)scope->pn;
    9102:	68bb      	ldr	r3, [r7, #8]
    9104:	68db      	ldr	r3, [r3, #12]
    9106:	627b      	str	r3, [r7, #36]	; 0x24
        assert(MP_PARSE_NODE_STRUCT_NUM_NODES(pns) == 2);
    9108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    910a:	685b      	ldr	r3, [r3, #4]
    910c:	0a1b      	lsrs	r3, r3, #8
    910e:	2b02      	cmp	r3, #2
    9110:	d006      	beq.n	9120 <compile_scope+0x276>
    9112:	4b25      	ldr	r3, [pc, #148]	; (91a8 <compile_scope+0x2fe>)
    9114:	4a1d      	ldr	r2, [pc, #116]	; (918c <compile_scope+0x2e2>)
    9116:	f640 31d1 	movw	r1, #3025	; 0xbd1
    911a:	481d      	ldr	r0, [pc, #116]	; (9190 <compile_scope+0x2e6>)
    911c:	f012 f84e 	bl	1b1bc <__assert_func>
        assert(MP_PARSE_NODE_IS_STRUCT_KIND(pns->nodes[1], PN_comp_for));
    9120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    9122:	68db      	ldr	r3, [r3, #12]
    9124:	2b00      	cmp	r3, #0
    9126:	d00b      	beq.n	9140 <compile_scope+0x296>
    9128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    912a:	68db      	ldr	r3, [r3, #12]
    912c:	f003 0303 	and.w	r3, r3, #3
    9130:	2b00      	cmp	r3, #0
    9132:	d105      	bne.n	9140 <compile_scope+0x296>
    9134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    9136:	68db      	ldr	r3, [r3, #12]
    9138:	685b      	ldr	r3, [r3, #4]
    913a:	b2db      	uxtb	r3, r3
    913c:	2b9f      	cmp	r3, #159	; 0x9f
    913e:	d006      	beq.n	914e <compile_scope+0x2a4>
    9140:	4b1a      	ldr	r3, [pc, #104]	; (91ac <compile_scope+0x302>)
    9142:	4a12      	ldr	r2, [pc, #72]	; (918c <compile_scope+0x2e2>)
    9144:	f640 31d2 	movw	r1, #3026	; 0xbd2
    9148:	4811      	ldr	r0, [pc, #68]	; (9190 <compile_scope+0x2e6>)
    914a:	f012 f837 	bl	1b1bc <__assert_func>
        mp_parse_node_struct_t *pns_comp_for = (mp_parse_node_struct_t*)pns->nodes[1];
    914e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    9150:	68db      	ldr	r3, [r3, #12]
    9152:	623b      	str	r3, [r7, #32]

        // We need a unique name for the comprehension argument (the iterator).
        // CPython uses .0, but we should be able to use anything that won't
        // clash with a user defined variable.  Best to use an existing qstr,
        // so we use the blank qstr.
        qstr qstr_arg = MP_QSTR_;
    9154:	2301      	movs	r3, #1
    9156:	61fb      	str	r3, [r7, #28]
        if (comp->pass == MP_PASS_SCOPE) {
    9158:	68fb      	ldr	r3, [r7, #12]
    915a:	795b      	ldrb	r3, [r3, #5]
    915c:	2b01      	cmp	r3, #1
    915e:	d12f      	bne.n	91c0 <compile_scope+0x316>
            bool added;
            id_info_t *id_info = scope_find_or_add_id(comp->scope_cur, qstr_arg, &added);
    9160:	68fb      	ldr	r3, [r7, #12]
    9162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    9164:	f107 0217 	add.w	r2, r7, #23
    9168:	69f9      	ldr	r1, [r7, #28]
    916a:	4618      	mov	r0, r3
    916c:	f7fb fc8c 	bl	4a88 <scope_find_or_add_id>
    9170:	61b8      	str	r0, [r7, #24]
            assert(added);
    9172:	7dfb      	ldrb	r3, [r7, #23]
    9174:	2b00      	cmp	r3, #0
    9176:	d11d      	bne.n	91b4 <compile_scope+0x30a>
    9178:	4b0d      	ldr	r3, [pc, #52]	; (91b0 <compile_scope+0x306>)
    917a:	4a04      	ldr	r2, [pc, #16]	; (918c <compile_scope+0x2e2>)
    917c:	f640 31dd 	movw	r1, #3037	; 0xbdd
    9180:	4803      	ldr	r0, [pc, #12]	; (9190 <compile_scope+0x2e6>)
    9182:	f012 f81b 	bl	1b1bc <__assert_func>
    9186:	bf00      	nop
    9188:	0001eac0 	.word	0x0001eac0
    918c:	0001ee7c 	.word	0x0001ee7c
    9190:	0001e084 	.word	0x0001e084
    9194:	0001eadc 	.word	0x0001eadc
    9198:	0001eb00 	.word	0x0001eb00
    919c:	00008d21 	.word	0x00008d21
    91a0:	0001eb30 	.word	0x0001eb30
    91a4:	00008d43 	.word	0x00008d43
    91a8:	0001e7cc 	.word	0x0001e7cc
    91ac:	0001e7f8 	.word	0x0001e7f8
    91b0:	0001eb5c 	.word	0x0001eb5c
            id_info->kind = ID_INFO_KIND_LOCAL;
    91b4:	69bb      	ldr	r3, [r7, #24]
    91b6:	2202      	movs	r2, #2
    91b8:	701a      	strb	r2, [r3, #0]
            scope->num_pos_args = 1;
    91ba:	68bb      	ldr	r3, [r7, #8]
    91bc:	2201      	movs	r2, #1
    91be:	835a      	strh	r2, [r3, #26]
        }

        if (scope->kind == SCOPE_LIST_COMP) {
    91c0:	68bb      	ldr	r3, [r7, #8]
    91c2:	681b      	ldr	r3, [r3, #0]
    91c4:	2b03      	cmp	r3, #3
    91c6:	d107      	bne.n	91d8 <compile_scope+0x32e>
            EMIT_ARG(build, 0, MP_EMIT_BUILD_LIST);
    91c8:	68fb      	ldr	r3, [r7, #12]
    91ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    91cc:	2201      	movs	r2, #1
    91ce:	2100      	movs	r1, #0
    91d0:	4618      	mov	r0, r3
    91d2:	f001 fc60 	bl	aa96 <mp_emit_bc_build>
    91d6:	e00a      	b.n	91ee <compile_scope+0x344>
        } else if (scope->kind == SCOPE_DICT_COMP) {
    91d8:	68bb      	ldr	r3, [r7, #8]
    91da:	681b      	ldr	r3, [r3, #0]
    91dc:	2b04      	cmp	r3, #4
    91de:	d106      	bne.n	91ee <compile_scope+0x344>
            EMIT_ARG(build, 0, MP_EMIT_BUILD_MAP);
    91e0:	68fb      	ldr	r3, [r7, #12]
    91e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    91e4:	2203      	movs	r2, #3
    91e6:	2100      	movs	r1, #0
    91e8:	4618      	mov	r0, r3
    91ea:	f001 fc54 	bl	aa96 <mp_emit_bc_build>
        #endif
        }

        // There are 4 slots on the stack for the iterator, and the first one is
        // NULL to indicate that the second one points to the iterator object.
        if (scope->kind == SCOPE_GEN_EXPR) {
    91ee:	68bb      	ldr	r3, [r7, #8]
    91f0:	681b      	ldr	r3, [r3, #0]
    91f2:	2b06      	cmp	r3, #6
    91f4:	d113      	bne.n	921e <compile_scope+0x374>
            MP_STATIC_ASSERT(MP_OBJ_ITER_BUF_NSLOTS == 4);
            EMIT(load_null);
    91f6:	68fb      	ldr	r3, [r7, #12]
    91f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    91fa:	4618      	mov	r0, r3
    91fc:	f001 f936 	bl	a46c <mp_emit_bc_load_null>
            compile_load_id(comp, qstr_arg);
    9200:	69f9      	ldr	r1, [r7, #28]
    9202:	68f8      	ldr	r0, [r7, #12]
    9204:	f7fb fe85 	bl	4f12 <compile_load_id>
            EMIT(load_null);
    9208:	68fb      	ldr	r3, [r7, #12]
    920a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    920c:	4618      	mov	r0, r3
    920e:	f001 f92d 	bl	a46c <mp_emit_bc_load_null>
            EMIT(load_null);
    9212:	68fb      	ldr	r3, [r7, #12]
    9214:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    9216:	4618      	mov	r0, r3
    9218:	f001 f928 	bl	a46c <mp_emit_bc_load_null>
    921c:	e009      	b.n	9232 <compile_scope+0x388>
        } else {
            compile_load_id(comp, qstr_arg);
    921e:	69f9      	ldr	r1, [r7, #28]
    9220:	68f8      	ldr	r0, [r7, #12]
    9222:	f7fb fe76 	bl	4f12 <compile_load_id>
            EMIT_ARG(get_iter, true);
    9226:	68fb      	ldr	r3, [r7, #12]
    9228:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    922a:	2101      	movs	r1, #1
    922c:	4618      	mov	r0, r3
    922e:	f001 fb8e 	bl	a94e <mp_emit_bc_get_iter>
        }

        compile_scope_comp_iter(comp, pns_comp_for, pns->nodes[0], 0);
    9232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    9234:	689a      	ldr	r2, [r3, #8]
    9236:	2300      	movs	r3, #0
    9238:	6a39      	ldr	r1, [r7, #32]
    923a:	68f8      	ldr	r0, [r7, #12]
    923c:	f7ff fd92 	bl	8d64 <compile_scope_comp_iter>

        if (scope->kind == SCOPE_GEN_EXPR) {
    9240:	68bb      	ldr	r3, [r7, #8]
    9242:	681b      	ldr	r3, [r3, #0]
    9244:	2b06      	cmp	r3, #6
    9246:	d105      	bne.n	9254 <compile_scope+0x3aa>
            EMIT_ARG(load_const_tok, MP_TOKEN_KW_NONE);
    9248:	68fb      	ldr	r3, [r7, #12]
    924a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    924c:	210e      	movs	r1, #14
    924e:	4618      	mov	r0, r3
    9250:	f001 f88a 	bl	a368 <mp_emit_bc_load_const_tok>
        }
        EMIT(return_value);
    9254:	68fb      	ldr	r3, [r7, #12]
    9256:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    9258:	4618      	mov	r0, r3
    925a:	f001 fd7c 	bl	ad56 <mp_emit_bc_return_value>
    } else if (scope->kind == SCOPE_LIST_COMP || scope->kind == SCOPE_DICT_COMP || scope->kind == SCOPE_SET_COMP || scope->kind == SCOPE_GEN_EXPR) {
    925e:	e08c      	b.n	937a <compile_scope+0x4d0>
    } else {
        assert(scope->kind == SCOPE_CLASS);
    9260:	68bb      	ldr	r3, [r7, #8]
    9262:	681b      	ldr	r3, [r3, #0]
    9264:	2b01      	cmp	r3, #1
    9266:	d006      	beq.n	9276 <compile_scope+0x3cc>
    9268:	4b4e      	ldr	r3, [pc, #312]	; (93a4 <compile_scope+0x4fa>)
    926a:	4a4f      	ldr	r2, [pc, #316]	; (93a8 <compile_scope+0x4fe>)
    926c:	f44f 6140 	mov.w	r1, #3072	; 0xc00
    9270:	484e      	ldr	r0, [pc, #312]	; (93ac <compile_scope+0x502>)
    9272:	f011 ffa3 	bl	1b1bc <__assert_func>
        assert(MP_PARSE_NODE_IS_STRUCT(scope->pn));
    9276:	68bb      	ldr	r3, [r7, #8]
    9278:	68db      	ldr	r3, [r3, #12]
    927a:	2b00      	cmp	r3, #0
    927c:	d005      	beq.n	928a <compile_scope+0x3e0>
    927e:	68bb      	ldr	r3, [r7, #8]
    9280:	68db      	ldr	r3, [r3, #12]
    9282:	f003 0303 	and.w	r3, r3, #3
    9286:	2b00      	cmp	r3, #0
    9288:	d006      	beq.n	9298 <compile_scope+0x3ee>
    928a:	4b49      	ldr	r3, [pc, #292]	; (93b0 <compile_scope+0x506>)
    928c:	4a46      	ldr	r2, [pc, #280]	; (93a8 <compile_scope+0x4fe>)
    928e:	f640 4101 	movw	r1, #3073	; 0xc01
    9292:	4846      	ldr	r0, [pc, #280]	; (93ac <compile_scope+0x502>)
    9294:	f011 ff92 	bl	1b1bc <__assert_func>
        mp_parse_node_struct_t *pns = (mp_parse_node_struct_t*)scope->pn;
    9298:	68bb      	ldr	r3, [r7, #8]
    929a:	68db      	ldr	r3, [r3, #12]
    929c:	633b      	str	r3, [r7, #48]	; 0x30
        assert(MP_PARSE_NODE_STRUCT_KIND(pns) == PN_classdef);
    929e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    92a0:	685b      	ldr	r3, [r3, #4]
    92a2:	b2db      	uxtb	r3, r3
    92a4:	2b33      	cmp	r3, #51	; 0x33
    92a6:	d006      	beq.n	92b6 <compile_scope+0x40c>
    92a8:	4b42      	ldr	r3, [pc, #264]	; (93b4 <compile_scope+0x50a>)
    92aa:	4a3f      	ldr	r2, [pc, #252]	; (93a8 <compile_scope+0x4fe>)
    92ac:	f640 4103 	movw	r1, #3075	; 0xc03
    92b0:	483e      	ldr	r0, [pc, #248]	; (93ac <compile_scope+0x502>)
    92b2:	f011 ff83 	bl	1b1bc <__assert_func>

        if (comp->pass == MP_PASS_SCOPE) {
    92b6:	68fb      	ldr	r3, [r7, #12]
    92b8:	795b      	ldrb	r3, [r3, #5]
    92ba:	2b01      	cmp	r3, #1
    92bc:	d114      	bne.n	92e8 <compile_scope+0x43e>
            bool added;
            id_info_t *id_info = scope_find_or_add_id(scope, MP_QSTR___class__, &added);
    92be:	f107 0316 	add.w	r3, r7, #22
    92c2:	461a      	mov	r2, r3
    92c4:	2106      	movs	r1, #6
    92c6:	68b8      	ldr	r0, [r7, #8]
    92c8:	f7fb fbde 	bl	4a88 <scope_find_or_add_id>
    92cc:	62f8      	str	r0, [r7, #44]	; 0x2c
            assert(added);
    92ce:	7dbb      	ldrb	r3, [r7, #22]
    92d0:	2b00      	cmp	r3, #0
    92d2:	d106      	bne.n	92e2 <compile_scope+0x438>
    92d4:	4b38      	ldr	r3, [pc, #224]	; (93b8 <compile_scope+0x50e>)
    92d6:	4a34      	ldr	r2, [pc, #208]	; (93a8 <compile_scope+0x4fe>)
    92d8:	f640 4108 	movw	r1, #3080	; 0xc08
    92dc:	4833      	ldr	r0, [pc, #204]	; (93ac <compile_scope+0x502>)
    92de:	f011 ff6d 	bl	1b1bc <__assert_func>
            id_info->kind = ID_INFO_KIND_LOCAL;
    92e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    92e4:	2202      	movs	r2, #2
    92e6:	701a      	strb	r2, [r3, #0]
        }

        compile_load_id(comp, MP_QSTR___name__);
    92e8:	211b      	movs	r1, #27
    92ea:	68f8      	ldr	r0, [r7, #12]
    92ec:	f7fb fe11 	bl	4f12 <compile_load_id>
        compile_store_id(comp, MP_QSTR___module__);
    92f0:	211a      	movs	r1, #26
    92f2:	68f8      	ldr	r0, [r7, #12]
    92f4:	f7fb fe2c 	bl	4f50 <compile_store_id>
        EMIT_ARG(load_const_str, MP_PARSE_NODE_LEAF_ARG(pns->nodes[0])); // 0 is class name
    92f8:	68fb      	ldr	r3, [r7, #12]
    92fa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    92fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    92fe:	689b      	ldr	r3, [r3, #8]
    9300:	091b      	lsrs	r3, r3, #4
    9302:	4619      	mov	r1, r3
    9304:	4610      	mov	r0, r2
    9306:	f001 f88d 	bl	a424 <mp_emit_bc_load_const_str>
        compile_store_id(comp, MP_QSTR___qualname__);
    930a:	211f      	movs	r1, #31
    930c:	68f8      	ldr	r0, [r7, #12]
    930e:	f7fb fe1f 	bl	4f50 <compile_store_id>

        check_for_doc_string(comp, pns->nodes[2]);
    9312:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    9314:	691b      	ldr	r3, [r3, #16]
    9316:	4619      	mov	r1, r3
    9318:	68f8      	ldr	r0, [r7, #12]
    931a:	f7ff fdbb 	bl	8e94 <check_for_doc_string>
        compile_node(comp, pns->nodes[2]); // 2 is class body
    931e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    9320:	691b      	ldr	r3, [r3, #16]
    9322:	4619      	mov	r1, r3
    9324:	68f8      	ldr	r0, [r7, #12]
    9326:	f7ff fb64 	bl	89f2 <compile_node>

        id_info_t *id = scope_find(scope, MP_QSTR___class__);
    932a:	2106      	movs	r1, #6
    932c:	68b8      	ldr	r0, [r7, #8]
    932e:	f7fb fbf6 	bl	4b1e <scope_find>
    9332:	62b8      	str	r0, [r7, #40]	; 0x28
        assert(id != NULL);
    9334:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9336:	2b00      	cmp	r3, #0
    9338:	d106      	bne.n	9348 <compile_scope+0x49e>
    933a:	4b20      	ldr	r3, [pc, #128]	; (93bc <compile_scope+0x512>)
    933c:	4a1a      	ldr	r2, [pc, #104]	; (93a8 <compile_scope+0x4fe>)
    933e:	f640 4115 	movw	r1, #3093	; 0xc15
    9342:	481a      	ldr	r0, [pc, #104]	; (93ac <compile_scope+0x502>)
    9344:	f011 ff3a 	bl	1b1bc <__assert_func>
        if (id->kind == ID_INFO_KIND_LOCAL) {
    9348:	6abb      	ldr	r3, [r7, #40]	; 0x28
    934a:	781b      	ldrb	r3, [r3, #0]
    934c:	2b02      	cmp	r3, #2
    934e:	d106      	bne.n	935e <compile_scope+0x4b4>
            EMIT_ARG(load_const_tok, MP_TOKEN_KW_NONE);
    9350:	68fb      	ldr	r3, [r7, #12]
    9352:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    9354:	210e      	movs	r1, #14
    9356:	4618      	mov	r0, r3
    9358:	f001 f806 	bl	a368 <mp_emit_bc_load_const_tok>
    935c:	e008      	b.n	9370 <compile_scope+0x4c6>
        } else {
            EMIT_LOAD_FAST(MP_QSTR___class__, id->local_num);
    935e:	68fb      	ldr	r3, [r7, #12]
    9360:	6a98      	ldr	r0, [r3, #40]	; 0x28
    9362:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9364:	885b      	ldrh	r3, [r3, #2]
    9366:	461a      	mov	r2, r3
    9368:	2300      	movs	r3, #0
    936a:	2106      	movs	r1, #6
    936c:	f001 f88e 	bl	a48c <mp_emit_bc_load_local>
        }
        EMIT(return_value);
    9370:	68fb      	ldr	r3, [r7, #12]
    9372:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    9374:	4618      	mov	r0, r3
    9376:	f001 fcee 	bl	ad56 <mp_emit_bc_return_value>
    }

    EMIT(end_pass);
    937a:	68fb      	ldr	r3, [r7, #12]
    937c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    937e:	4618      	mov	r0, r3
    9380:	f000 fe9e 	bl	a0c0 <mp_emit_bc_end_pass>

    // make sure we match all the exception levels
    assert(comp->cur_except_level == 0);
    9384:	68fb      	ldr	r3, [r7, #12]
    9386:	8b9b      	ldrh	r3, [r3, #28]
    9388:	2b00      	cmp	r3, #0
    938a:	d006      	beq.n	939a <compile_scope+0x4f0>
    938c:	4b0c      	ldr	r3, [pc, #48]	; (93c0 <compile_scope+0x516>)
    938e:	4a06      	ldr	r2, [pc, #24]	; (93a8 <compile_scope+0x4fe>)
    9390:	f640 4121 	movw	r1, #3105	; 0xc21
    9394:	4805      	ldr	r0, [pc, #20]	; (93ac <compile_scope+0x502>)
    9396:	f011 ff11 	bl	1b1bc <__assert_func>
}
    939a:	bf00      	nop
    939c:	3740      	adds	r7, #64	; 0x40
    939e:	46bd      	mov	sp, r7
    93a0:	bd80      	pop	{r7, pc}
    93a2:	bf00      	nop
    93a4:	0001eb64 	.word	0x0001eb64
    93a8:	0001ee7c 	.word	0x0001ee7c
    93ac:	0001e084 	.word	0x0001e084
    93b0:	0001eadc 	.word	0x0001eadc
    93b4:	0001eb80 	.word	0x0001eb80
    93b8:	0001eb5c 	.word	0x0001eb5c
    93bc:	0001ebb0 	.word	0x0001ebb0
    93c0:	0001ebbc 	.word	0x0001ebbc

000093c4 <scope_compute_things>:
        comp->compile_error_line = pns->source_line;
    }
}
#endif

STATIC void scope_compute_things(scope_t *scope) {
    93c4:	b580      	push	{r7, lr}
    93c6:	b092      	sub	sp, #72	; 0x48
    93c8:	af00      	add	r7, sp, #0
    93ca:	6078      	str	r0, [r7, #4]
    // in MicroPython we put the *x parameter after all other parameters (except **y)
    if (scope->scope_flags & MP_SCOPE_FLAG_VARARGS) {
    93cc:	687b      	ldr	r3, [r7, #4]
    93ce:	7e1b      	ldrb	r3, [r3, #24]
    93d0:	f003 0301 	and.w	r3, r3, #1
    93d4:	2b00      	cmp	r3, #0
    93d6:	d03c      	beq.n	9452 <scope_compute_things+0x8e>
        id_info_t *id_param = NULL;
    93d8:	2300      	movs	r3, #0
    93da:	647b      	str	r3, [r7, #68]	; 0x44
        for (int i = scope->id_info_len - 1; i >= 0; i--) {
    93dc:	687b      	ldr	r3, [r7, #4]
    93de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    93e0:	3b01      	subs	r3, #1
    93e2:	643b      	str	r3, [r7, #64]	; 0x40
    93e4:	e030      	b.n	9448 <scope_compute_things+0x84>
            id_info_t *id = &scope->id_info[i];
    93e6:	687b      	ldr	r3, [r7, #4]
    93e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    93ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    93ec:	00db      	lsls	r3, r3, #3
    93ee:	4413      	add	r3, r2
    93f0:	627b      	str	r3, [r7, #36]	; 0x24
            if (id->flags & ID_FLAG_IS_STAR_PARAM) {
    93f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    93f4:	785b      	ldrb	r3, [r3, #1]
    93f6:	f003 0302 	and.w	r3, r3, #2
    93fa:	2b00      	cmp	r3, #0
    93fc:	d018      	beq.n	9430 <scope_compute_things+0x6c>
                if (id_param != NULL) {
    93fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    9400:	2b00      	cmp	r3, #0
    9402:	d025      	beq.n	9450 <scope_compute_things+0x8c>
                    // swap star param with last param
                    id_info_t temp = *id_param; *id_param = *id; *id = temp;
    9404:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    9406:	f107 0308 	add.w	r3, r7, #8
    940a:	e892 0003 	ldmia.w	r2, {r0, r1}
    940e:	e883 0003 	stmia.w	r3, {r0, r1}
    9412:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    9414:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    9416:	e892 0003 	ldmia.w	r2, {r0, r1}
    941a:	e883 0003 	stmia.w	r3, {r0, r1}
    941e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    9420:	461a      	mov	r2, r3
    9422:	f107 0308 	add.w	r3, r7, #8
    9426:	e893 0003 	ldmia.w	r3, {r0, r1}
    942a:	e882 0003 	stmia.w	r2, {r0, r1}
                }
                break;
    942e:	e00f      	b.n	9450 <scope_compute_things+0x8c>
            } else if (id_param == NULL && id->flags == ID_FLAG_IS_PARAM) {
    9430:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    9432:	2b00      	cmp	r3, #0
    9434:	d105      	bne.n	9442 <scope_compute_things+0x7e>
    9436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    9438:	785b      	ldrb	r3, [r3, #1]
    943a:	2b01      	cmp	r3, #1
    943c:	d101      	bne.n	9442 <scope_compute_things+0x7e>
                id_param = id;
    943e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    9440:	647b      	str	r3, [r7, #68]	; 0x44
        for (int i = scope->id_info_len - 1; i >= 0; i--) {
    9442:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    9444:	3b01      	subs	r3, #1
    9446:	643b      	str	r3, [r7, #64]	; 0x40
    9448:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    944a:	2b00      	cmp	r3, #0
    944c:	dacb      	bge.n	93e6 <scope_compute_things+0x22>
    944e:	e000      	b.n	9452 <scope_compute_things+0x8e>
                break;
    9450:	bf00      	nop
        }
    }

    // in functions, turn implicit globals into explicit globals
    // compute the index of each local
    scope->num_locals = 0;
    9452:	687b      	ldr	r3, [r7, #4]
    9454:	2200      	movs	r2, #0
    9456:	841a      	strh	r2, [r3, #32]
    for (int i = 0; i < scope->id_info_len; i++) {
    9458:	2300      	movs	r3, #0
    945a:	63fb      	str	r3, [r7, #60]	; 0x3c
    945c:	e02f      	b.n	94be <scope_compute_things+0xfa>
        id_info_t *id = &scope->id_info[i];
    945e:	687b      	ldr	r3, [r7, #4]
    9460:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    9462:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    9464:	00db      	lsls	r3, r3, #3
    9466:	4413      	add	r3, r2
    9468:	623b      	str	r3, [r7, #32]
        if (scope->kind == SCOPE_CLASS && id->qst == MP_QSTR___class__) {
    946a:	687b      	ldr	r3, [r7, #4]
    946c:	681b      	ldr	r3, [r3, #0]
    946e:	2b01      	cmp	r3, #1
    9470:	d103      	bne.n	947a <scope_compute_things+0xb6>
    9472:	6a3b      	ldr	r3, [r7, #32]
    9474:	685b      	ldr	r3, [r3, #4]
    9476:	2b06      	cmp	r3, #6
    9478:	d01d      	beq.n	94b6 <scope_compute_things+0xf2>
            // __class__ is not counted as a local; if it's used then it becomes a ID_INFO_KIND_CELL
            continue;
        }
        if (SCOPE_IS_FUNC_LIKE(scope->kind) && id->kind == ID_INFO_KIND_GLOBAL_IMPLICIT) {
    947a:	687b      	ldr	r3, [r7, #4]
    947c:	681b      	ldr	r3, [r3, #0]
    947e:	2b01      	cmp	r3, #1
    9480:	d906      	bls.n	9490 <scope_compute_things+0xcc>
    9482:	6a3b      	ldr	r3, [r7, #32]
    9484:	781b      	ldrb	r3, [r3, #0]
    9486:	2b00      	cmp	r3, #0
    9488:	d102      	bne.n	9490 <scope_compute_things+0xcc>
            id->kind = ID_INFO_KIND_GLOBAL_EXPLICIT;
    948a:	6a3b      	ldr	r3, [r7, #32]
    948c:	2201      	movs	r2, #1
    948e:	701a      	strb	r2, [r3, #0]
        }
        // params always count for 1 local, even if they are a cell
        if (id->kind == ID_INFO_KIND_LOCAL || (id->flags & ID_FLAG_IS_PARAM)) {
    9490:	6a3b      	ldr	r3, [r7, #32]
    9492:	781b      	ldrb	r3, [r3, #0]
    9494:	2b02      	cmp	r3, #2
    9496:	d005      	beq.n	94a4 <scope_compute_things+0xe0>
    9498:	6a3b      	ldr	r3, [r7, #32]
    949a:	785b      	ldrb	r3, [r3, #1]
    949c:	f003 0301 	and.w	r3, r3, #1
    94a0:	2b00      	cmp	r3, #0
    94a2:	d009      	beq.n	94b8 <scope_compute_things+0xf4>
            id->local_num = scope->num_locals++;
    94a4:	687b      	ldr	r3, [r7, #4]
    94a6:	8c1b      	ldrh	r3, [r3, #32]
    94a8:	1c5a      	adds	r2, r3, #1
    94aa:	b291      	uxth	r1, r2
    94ac:	687a      	ldr	r2, [r7, #4]
    94ae:	8411      	strh	r1, [r2, #32]
    94b0:	6a3a      	ldr	r2, [r7, #32]
    94b2:	8053      	strh	r3, [r2, #2]
    94b4:	e000      	b.n	94b8 <scope_compute_things+0xf4>
            continue;
    94b6:	bf00      	nop
    for (int i = 0; i < scope->id_info_len; i++) {
    94b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    94ba:	3301      	adds	r3, #1
    94bc:	63fb      	str	r3, [r7, #60]	; 0x3c
    94be:	687b      	ldr	r3, [r7, #4]
    94c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    94c2:	461a      	mov	r2, r3
    94c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    94c6:	429a      	cmp	r2, r3
    94c8:	dcc9      	bgt.n	945e <scope_compute_things+0x9a>
        }
    }

    // compute the index of cell vars
    for (int i = 0; i < scope->id_info_len; i++) {
    94ca:	2300      	movs	r3, #0
    94cc:	63bb      	str	r3, [r7, #56]	; 0x38
    94ce:	e01c      	b.n	950a <scope_compute_things+0x146>
        id_info_t *id = &scope->id_info[i];
    94d0:	687b      	ldr	r3, [r7, #4]
    94d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    94d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    94d6:	00db      	lsls	r3, r3, #3
    94d8:	4413      	add	r3, r2
    94da:	61fb      	str	r3, [r7, #28]
        // in MicroPython the cells come right after the fast locals
        // parameters are not counted here, since they remain at the start
        // of the locals, even if they are cell vars
        if (id->kind == ID_INFO_KIND_CELL && !(id->flags & ID_FLAG_IS_PARAM)) {
    94dc:	69fb      	ldr	r3, [r7, #28]
    94de:	781b      	ldrb	r3, [r3, #0]
    94e0:	2b03      	cmp	r3, #3
    94e2:	d10f      	bne.n	9504 <scope_compute_things+0x140>
    94e4:	69fb      	ldr	r3, [r7, #28]
    94e6:	785b      	ldrb	r3, [r3, #1]
    94e8:	f003 0301 	and.w	r3, r3, #1
    94ec:	2b00      	cmp	r3, #0
    94ee:	d109      	bne.n	9504 <scope_compute_things+0x140>
            id->local_num = scope->num_locals;
    94f0:	687b      	ldr	r3, [r7, #4]
    94f2:	8c1a      	ldrh	r2, [r3, #32]
    94f4:	69fb      	ldr	r3, [r7, #28]
    94f6:	805a      	strh	r2, [r3, #2]
            scope->num_locals += 1;
    94f8:	687b      	ldr	r3, [r7, #4]
    94fa:	8c1b      	ldrh	r3, [r3, #32]
    94fc:	3301      	adds	r3, #1
    94fe:	b29a      	uxth	r2, r3
    9500:	687b      	ldr	r3, [r7, #4]
    9502:	841a      	strh	r2, [r3, #32]
    for (int i = 0; i < scope->id_info_len; i++) {
    9504:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    9506:	3301      	adds	r3, #1
    9508:	63bb      	str	r3, [r7, #56]	; 0x38
    950a:	687b      	ldr	r3, [r7, #4]
    950c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    950e:	461a      	mov	r2, r3
    9510:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    9512:	429a      	cmp	r2, r3
    9514:	dcdc      	bgt.n	94d0 <scope_compute_things+0x10c>
        }
    }

    // compute the index of free vars
    // make sure they are in the order of the parent scope
    if (scope->parent != NULL) {
    9516:	687b      	ldr	r3, [r7, #4]
    9518:	685b      	ldr	r3, [r3, #4]
    951a:	2b00      	cmp	r3, #0
    951c:	f000 8085 	beq.w	962a <scope_compute_things+0x266>
        int num_free = 0;
    9520:	2300      	movs	r3, #0
    9522:	637b      	str	r3, [r7, #52]	; 0x34
        for (int i = 0; i < scope->parent->id_info_len; i++) {
    9524:	2300      	movs	r3, #0
    9526:	633b      	str	r3, [r7, #48]	; 0x30
    9528:	e041      	b.n	95ae <scope_compute_things+0x1ea>
            id_info_t *id = &scope->parent->id_info[i];
    952a:	687b      	ldr	r3, [r7, #4]
    952c:	685b      	ldr	r3, [r3, #4]
    952e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    9530:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    9532:	00db      	lsls	r3, r3, #3
    9534:	4413      	add	r3, r2
    9536:	61bb      	str	r3, [r7, #24]
            if (id->kind == ID_INFO_KIND_CELL || id->kind == ID_INFO_KIND_FREE) {
    9538:	69bb      	ldr	r3, [r7, #24]
    953a:	781b      	ldrb	r3, [r3, #0]
    953c:	2b03      	cmp	r3, #3
    953e:	d003      	beq.n	9548 <scope_compute_things+0x184>
    9540:	69bb      	ldr	r3, [r7, #24]
    9542:	781b      	ldrb	r3, [r3, #0]
    9544:	2b04      	cmp	r3, #4
    9546:	d12f      	bne.n	95a8 <scope_compute_things+0x1e4>
                for (int j = 0; j < scope->id_info_len; j++) {
    9548:	2300      	movs	r3, #0
    954a:	62fb      	str	r3, [r7, #44]	; 0x2c
    954c:	e026      	b.n	959c <scope_compute_things+0x1d8>
                    id_info_t *id2 = &scope->id_info[j];
    954e:	687b      	ldr	r3, [r7, #4]
    9550:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    9552:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    9554:	00db      	lsls	r3, r3, #3
    9556:	4413      	add	r3, r2
    9558:	617b      	str	r3, [r7, #20]
                    if (id2->kind == ID_INFO_KIND_FREE && id->qst == id2->qst) {
    955a:	697b      	ldr	r3, [r7, #20]
    955c:	781b      	ldrb	r3, [r3, #0]
    955e:	2b04      	cmp	r3, #4
    9560:	d119      	bne.n	9596 <scope_compute_things+0x1d2>
    9562:	69bb      	ldr	r3, [r7, #24]
    9564:	685a      	ldr	r2, [r3, #4]
    9566:	697b      	ldr	r3, [r7, #20]
    9568:	685b      	ldr	r3, [r3, #4]
    956a:	429a      	cmp	r2, r3
    956c:	d113      	bne.n	9596 <scope_compute_things+0x1d2>
                        assert(!(id2->flags & ID_FLAG_IS_PARAM)); // free vars should not be params
    956e:	697b      	ldr	r3, [r7, #20]
    9570:	785b      	ldrb	r3, [r3, #1]
    9572:	f003 0301 	and.w	r3, r3, #1
    9576:	2b00      	cmp	r3, #0
    9578:	d006      	beq.n	9588 <scope_compute_things+0x1c4>
    957a:	4b2e      	ldr	r3, [pc, #184]	; (9634 <scope_compute_things+0x270>)
    957c:	4a2e      	ldr	r2, [pc, #184]	; (9638 <scope_compute_things+0x274>)
    957e:	f640 41ff 	movw	r1, #3327	; 0xcff
    9582:	482e      	ldr	r0, [pc, #184]	; (963c <scope_compute_things+0x278>)
    9584:	f011 fe1a 	bl	1b1bc <__assert_func>
                        // in MicroPython the frees come first, before the params
                        id2->local_num = num_free;
    9588:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    958a:	b29a      	uxth	r2, r3
    958c:	697b      	ldr	r3, [r7, #20]
    958e:	805a      	strh	r2, [r3, #2]
                        num_free += 1;
    9590:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    9592:	3301      	adds	r3, #1
    9594:	637b      	str	r3, [r7, #52]	; 0x34
                for (int j = 0; j < scope->id_info_len; j++) {
    9596:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    9598:	3301      	adds	r3, #1
    959a:	62fb      	str	r3, [r7, #44]	; 0x2c
    959c:	687b      	ldr	r3, [r7, #4]
    959e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    95a0:	461a      	mov	r2, r3
    95a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    95a4:	429a      	cmp	r2, r3
    95a6:	dcd2      	bgt.n	954e <scope_compute_things+0x18a>
        for (int i = 0; i < scope->parent->id_info_len; i++) {
    95a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    95aa:	3301      	adds	r3, #1
    95ac:	633b      	str	r3, [r7, #48]	; 0x30
    95ae:	687b      	ldr	r3, [r7, #4]
    95b0:	685b      	ldr	r3, [r3, #4]
    95b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    95b4:	461a      	mov	r2, r3
    95b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    95b8:	429a      	cmp	r2, r3
    95ba:	dcb6      	bgt.n	952a <scope_compute_things+0x166>
                    }
                }
            }
        }
        // in MicroPython shift all other locals after the free locals
        if (num_free > 0) {
    95bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    95be:	2b00      	cmp	r3, #0
    95c0:	dd33      	ble.n	962a <scope_compute_things+0x266>
            for (int i = 0; i < scope->id_info_len; i++) {
    95c2:	2300      	movs	r3, #0
    95c4:	62bb      	str	r3, [r7, #40]	; 0x28
    95c6:	e01a      	b.n	95fe <scope_compute_things+0x23a>
                id_info_t *id = &scope->id_info[i];
    95c8:	687b      	ldr	r3, [r7, #4]
    95ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    95cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
    95ce:	00db      	lsls	r3, r3, #3
    95d0:	4413      	add	r3, r2
    95d2:	613b      	str	r3, [r7, #16]
                if (id->kind != ID_INFO_KIND_FREE || (id->flags & ID_FLAG_IS_PARAM)) {
    95d4:	693b      	ldr	r3, [r7, #16]
    95d6:	781b      	ldrb	r3, [r3, #0]
    95d8:	2b04      	cmp	r3, #4
    95da:	d105      	bne.n	95e8 <scope_compute_things+0x224>
    95dc:	693b      	ldr	r3, [r7, #16]
    95de:	785b      	ldrb	r3, [r3, #1]
    95e0:	f003 0301 	and.w	r3, r3, #1
    95e4:	2b00      	cmp	r3, #0
    95e6:	d007      	beq.n	95f8 <scope_compute_things+0x234>
                    id->local_num += num_free;
    95e8:	693b      	ldr	r3, [r7, #16]
    95ea:	885a      	ldrh	r2, [r3, #2]
    95ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    95ee:	b29b      	uxth	r3, r3
    95f0:	4413      	add	r3, r2
    95f2:	b29a      	uxth	r2, r3
    95f4:	693b      	ldr	r3, [r7, #16]
    95f6:	805a      	strh	r2, [r3, #2]
            for (int i = 0; i < scope->id_info_len; i++) {
    95f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
    95fa:	3301      	adds	r3, #1
    95fc:	62bb      	str	r3, [r7, #40]	; 0x28
    95fe:	687b      	ldr	r3, [r7, #4]
    9600:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    9602:	461a      	mov	r2, r3
    9604:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9606:	429a      	cmp	r2, r3
    9608:	dcde      	bgt.n	95c8 <scope_compute_things+0x204>
                }
            }
            scope->num_pos_args += num_free; // free vars are counted as params for passing them into the function
    960a:	687b      	ldr	r3, [r7, #4]
    960c:	8b5a      	ldrh	r2, [r3, #26]
    960e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    9610:	b29b      	uxth	r3, r3
    9612:	4413      	add	r3, r2
    9614:	b29a      	uxth	r2, r3
    9616:	687b      	ldr	r3, [r7, #4]
    9618:	835a      	strh	r2, [r3, #26]
            scope->num_locals += num_free;
    961a:	687b      	ldr	r3, [r7, #4]
    961c:	8c1a      	ldrh	r2, [r3, #32]
    961e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    9620:	b29b      	uxth	r3, r3
    9622:	4413      	add	r3, r2
    9624:	b29a      	uxth	r2, r3
    9626:	687b      	ldr	r3, [r7, #4]
    9628:	841a      	strh	r2, [r3, #32]
        }
    }
}
    962a:	bf00      	nop
    962c:	3748      	adds	r7, #72	; 0x48
    962e:	46bd      	mov	sp, r7
    9630:	bd80      	pop	{r7, pc}
    9632:	bf00      	nop
    9634:	0001ebd8 	.word	0x0001ebd8
    9638:	0001ee8c 	.word	0x0001ee8c
    963c:	0001e084 	.word	0x0001e084

00009640 <mp_compile_to_raw_code>:

#if !MICROPY_PERSISTENT_CODE_SAVE
STATIC
#endif
mp_raw_code_t *mp_compile_to_raw_code(mp_parse_tree_t *parse_tree, qstr source_file, uint emit_opt, bool is_repl) {
    9640:	b580      	push	{r7, lr}
    9642:	b09a      	sub	sp, #104	; 0x68
    9644:	af00      	add	r7, sp, #0
    9646:	60f8      	str	r0, [r7, #12]
    9648:	60b9      	str	r1, [r7, #8]
    964a:	607a      	str	r2, [r7, #4]
    964c:	70fb      	strb	r3, [r7, #3]
    // put compiler state on the stack, it's relatively small
    compiler_t comp_state = {0};
    964e:	f107 0314 	add.w	r3, r7, #20
    9652:	222c      	movs	r2, #44	; 0x2c
    9654:	2100      	movs	r1, #0
    9656:	4618      	mov	r0, r3
    9658:	f012 fa4e 	bl	1baf8 <memset>
    compiler_t *comp = &comp_state;
    965c:	f107 0314 	add.w	r3, r7, #20
    9660:	653b      	str	r3, [r7, #80]	; 0x50

    comp->source_file = source_file;
    9662:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    9664:	68ba      	ldr	r2, [r7, #8]
    9666:	601a      	str	r2, [r3, #0]
    comp->is_repl = is_repl;
    9668:	78fa      	ldrb	r2, [r7, #3]
    966a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    966c:	711a      	strb	r2, [r3, #4]
    comp->break_label = INVALID_LABEL;
    966e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    9670:	f64f 72ff 	movw	r2, #65535	; 0xffff
    9674:	831a      	strh	r2, [r3, #24]
    comp->continue_label = INVALID_LABEL;
    9676:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    9678:	f64f 72ff 	movw	r2, #65535	; 0xffff
    967c:	835a      	strh	r2, [r3, #26]

    // create the module scope
    scope_t *module_scope = scope_new_and_link(comp, SCOPE_MODULE, parse_tree->root, emit_opt);
    967e:	68fb      	ldr	r3, [r7, #12]
    9680:	681a      	ldr	r2, [r3, #0]
    9682:	687b      	ldr	r3, [r7, #4]
    9684:	2100      	movs	r1, #0
    9686:	6d38      	ldr	r0, [r7, #80]	; 0x50
    9688:	f7fb fbaa 	bl	4de0 <scope_new_and_link>
    968c:	64f8      	str	r0, [r7, #76]	; 0x4c

    // create standard emitter; it's used at least for MP_PASS_SCOPE
    emit_t *emit_bc = emit_bc_new();
    968e:	f000 f953 	bl	9938 <emit_bc_new>
    9692:	64b8      	str	r0, [r7, #72]	; 0x48

    // compile pass 1
    comp->emit = emit_bc;
    9694:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    9696:	6cba      	ldr	r2, [r7, #72]	; 0x48
    9698:	629a      	str	r2, [r3, #40]	; 0x28
    #if MICROPY_EMIT_NATIVE
    comp->emit_method_table = &emit_bc_method_table;
    #endif
    uint max_num_labels = 0;
    969a:	2300      	movs	r3, #0
    969c:	667b      	str	r3, [r7, #100]	; 0x64
    for (scope_t *s = comp->scope_head; s != NULL && comp->compile_error == MP_OBJ_NULL; s = s->next) {
    969e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    96a0:	6a1b      	ldr	r3, [r3, #32]
    96a2:	663b      	str	r3, [r7, #96]	; 0x60
    96a4:	e00f      	b.n	96c6 <mp_compile_to_raw_code+0x86>
        #if MICROPY_EMIT_INLINE_ASM
        } else if (s->emit_options == MP_EMIT_OPT_ASM) {
            compile_scope_inline_asm(comp, s, MP_PASS_SCOPE);
        #endif
        } else {
            compile_scope(comp, s, MP_PASS_SCOPE);
    96a6:	2201      	movs	r2, #1
    96a8:	6e39      	ldr	r1, [r7, #96]	; 0x60
    96aa:	6d38      	ldr	r0, [r7, #80]	; 0x50
    96ac:	f7ff fbfd 	bl	8eaa <compile_scope>
        }

        // update maximim number of labels needed
        if (comp->next_label > max_num_labels) {
    96b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    96b2:	691a      	ldr	r2, [r3, #16]
    96b4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    96b6:	429a      	cmp	r2, r3
    96b8:	d902      	bls.n	96c0 <mp_compile_to_raw_code+0x80>
            max_num_labels = comp->next_label;
    96ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    96bc:	691b      	ldr	r3, [r3, #16]
    96be:	667b      	str	r3, [r7, #100]	; 0x64
    for (scope_t *s = comp->scope_head; s != NULL && comp->compile_error == MP_OBJ_NULL; s = s->next) {
    96c0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    96c2:	689b      	ldr	r3, [r3, #8]
    96c4:	663b      	str	r3, [r7, #96]	; 0x60
    96c6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    96c8:	2b00      	cmp	r3, #0
    96ca:	d003      	beq.n	96d4 <mp_compile_to_raw_code+0x94>
    96cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    96ce:	689b      	ldr	r3, [r3, #8]
    96d0:	2b00      	cmp	r3, #0
    96d2:	d0e8      	beq.n	96a6 <mp_compile_to_raw_code+0x66>
        }
    }

    // compute some things related to scope and identifiers
    for (scope_t *s = comp->scope_head; s != NULL && comp->compile_error == MP_OBJ_NULL; s = s->next) {
    96d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    96d6:	6a1b      	ldr	r3, [r3, #32]
    96d8:	65fb      	str	r3, [r7, #92]	; 0x5c
    96da:	e005      	b.n	96e8 <mp_compile_to_raw_code+0xa8>
        scope_compute_things(s);
    96dc:	6df8      	ldr	r0, [r7, #92]	; 0x5c
    96de:	f7ff fe71 	bl	93c4 <scope_compute_things>
    for (scope_t *s = comp->scope_head; s != NULL && comp->compile_error == MP_OBJ_NULL; s = s->next) {
    96e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    96e4:	689b      	ldr	r3, [r3, #8]
    96e6:	65fb      	str	r3, [r7, #92]	; 0x5c
    96e8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    96ea:	2b00      	cmp	r3, #0
    96ec:	d003      	beq.n	96f6 <mp_compile_to_raw_code+0xb6>
    96ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    96f0:	689b      	ldr	r3, [r3, #8]
    96f2:	2b00      	cmp	r3, #0
    96f4:	d0f2      	beq.n	96dc <mp_compile_to_raw_code+0x9c>
    }

    // set max number of labels now that it's calculated
    emit_bc_set_max_num_labels(emit_bc, max_num_labels);
    96f6:	6e79      	ldr	r1, [r7, #100]	; 0x64
    96f8:	6cb8      	ldr	r0, [r7, #72]	; 0x48
    96fa:	f000 f929 	bl	9950 <emit_bc_set_max_num_labels>

    // compile pass 2 and 3
#if MICROPY_EMIT_NATIVE
    emit_t *emit_native = NULL;
#endif
    for (scope_t *s = comp->scope_head; s != NULL && comp->compile_error == MP_OBJ_NULL; s = s->next) {
    96fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    9700:	6a1b      	ldr	r3, [r3, #32]
    9702:	65bb      	str	r3, [r7, #88]	; 0x58
    9704:	e01d      	b.n	9742 <mp_compile_to_raw_code+0x102>
                    EMIT_ARG(set_native_type, MP_EMIT_NATIVE_TYPE_ENABLE, s->emit_options == MP_EMIT_OPT_VIPER, 0);
                    break;
#endif // MICROPY_EMIT_NATIVE

                default:
                    comp->emit = emit_bc;
    9706:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    9708:	6cba      	ldr	r2, [r7, #72]	; 0x48
    970a:	629a      	str	r2, [r3, #40]	; 0x28
                    #if MICROPY_EMIT_NATIVE
                    comp->emit_method_table = &emit_bc_method_table;
                    #endif
                    break;
    970c:	bf00      	nop
            }

            // need a pass to compute stack size
            compile_scope(comp, s, MP_PASS_STACK_SIZE);
    970e:	2202      	movs	r2, #2
    9710:	6db9      	ldr	r1, [r7, #88]	; 0x58
    9712:	6d38      	ldr	r0, [r7, #80]	; 0x50
    9714:	f7ff fbc9 	bl	8eaa <compile_scope>

            // second last pass: compute code size
            if (comp->compile_error == MP_OBJ_NULL) {
    9718:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    971a:	689b      	ldr	r3, [r3, #8]
    971c:	2b00      	cmp	r3, #0
    971e:	d104      	bne.n	972a <mp_compile_to_raw_code+0xea>
                compile_scope(comp, s, MP_PASS_CODE_SIZE);
    9720:	2203      	movs	r2, #3
    9722:	6db9      	ldr	r1, [r7, #88]	; 0x58
    9724:	6d38      	ldr	r0, [r7, #80]	; 0x50
    9726:	f7ff fbc0 	bl	8eaa <compile_scope>
            }

            // final pass: emit code
            if (comp->compile_error == MP_OBJ_NULL) {
    972a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    972c:	689b      	ldr	r3, [r3, #8]
    972e:	2b00      	cmp	r3, #0
    9730:	d104      	bne.n	973c <mp_compile_to_raw_code+0xfc>
                compile_scope(comp, s, MP_PASS_EMIT);
    9732:	2204      	movs	r2, #4
    9734:	6db9      	ldr	r1, [r7, #88]	; 0x58
    9736:	6d38      	ldr	r0, [r7, #80]	; 0x50
    9738:	f7ff fbb7 	bl	8eaa <compile_scope>
    for (scope_t *s = comp->scope_head; s != NULL && comp->compile_error == MP_OBJ_NULL; s = s->next) {
    973c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    973e:	689b      	ldr	r3, [r3, #8]
    9740:	65bb      	str	r3, [r7, #88]	; 0x58
    9742:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    9744:	2b00      	cmp	r3, #0
    9746:	d003      	beq.n	9750 <mp_compile_to_raw_code+0x110>
    9748:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    974a:	689b      	ldr	r3, [r3, #8]
    974c:	2b00      	cmp	r3, #0
    974e:	d0da      	beq.n	9706 <mp_compile_to_raw_code+0xc6>
            }
        }
    }

    if (comp->compile_error != MP_OBJ_NULL) {
    9750:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    9752:	689b      	ldr	r3, [r3, #8]
    9754:	2b00      	cmp	r3, #0
    9756:	d011      	beq.n	977c <mp_compile_to_raw_code+0x13c>
        // if there is no line number for the error then use the line
        // number for the start of this scope
        compile_error_set_line(comp, comp->scope_cur->pn);
    9758:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    975a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    975c:	68db      	ldr	r3, [r3, #12]
    975e:	4619      	mov	r1, r3
    9760:	6d38      	ldr	r0, [r7, #80]	; 0x50
    9762:	f7fb fabd 	bl	4ce0 <compile_error_set_line>
        // add a traceback to the exception using relevant source info
        mp_obj_exception_add_traceback(comp->compile_error, comp->source_file,
    9766:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    9768:	6898      	ldr	r0, [r3, #8]
    976a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    976c:	6819      	ldr	r1, [r3, #0]
    976e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    9770:	68da      	ldr	r2, [r3, #12]
            comp->compile_error_line, comp->scope_cur->simple_name);
    9772:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    9774:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    9776:	8a5b      	ldrh	r3, [r3, #18]
        mp_obj_exception_add_traceback(comp->compile_error, comp->source_file,
    9778:	f005 ffb8 	bl	f6ec <mp_obj_exception_add_traceback>
    }

    // free the emitters

    emit_bc_free(emit_bc);
    977c:	6cb8      	ldr	r0, [r7, #72]	; 0x48
    977e:	f000 f8fc 	bl	997a <emit_bc_free>
        ASM_EMITTER(free)(comp->emit_inline_asm);
    }
    #endif

    // free the parse tree
    mp_parse_tree_clear(parse_tree);
    9782:	68f8      	ldr	r0, [r7, #12]
    9784:	f7fb f8fe 	bl	4984 <mp_parse_tree_clear>

    // free the scopes
    mp_raw_code_t *outer_raw_code = module_scope->raw_code;
    9788:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    978a:	695b      	ldr	r3, [r3, #20]
    978c:	647b      	str	r3, [r7, #68]	; 0x44
    for (scope_t *s = module_scope; s;) {
    978e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    9790:	657b      	str	r3, [r7, #84]	; 0x54
    9792:	e007      	b.n	97a4 <mp_compile_to_raw_code+0x164>
        scope_t *next = s->next;
    9794:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    9796:	689b      	ldr	r3, [r3, #8]
    9798:	643b      	str	r3, [r7, #64]	; 0x40
        scope_free(s);
    979a:	6d78      	ldr	r0, [r7, #84]	; 0x54
    979c:	f7fb f964 	bl	4a68 <scope_free>
        s = next;
    97a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    97a2:	657b      	str	r3, [r7, #84]	; 0x54
    for (scope_t *s = module_scope; s;) {
    97a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    97a6:	2b00      	cmp	r3, #0
    97a8:	d1f4      	bne.n	9794 <mp_compile_to_raw_code+0x154>
    }

    if (comp->compile_error != MP_OBJ_NULL) {
    97aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    97ac:	689b      	ldr	r3, [r3, #8]
    97ae:	2b00      	cmp	r3, #0
    97b0:	d004      	beq.n	97bc <mp_compile_to_raw_code+0x17c>
        nlr_raise(comp->compile_error);
    97b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    97b4:	689b      	ldr	r3, [r3, #8]
    97b6:	4618      	mov	r0, r3
    97b8:	f7f6 fd92 	bl	2e0 <nlr_jump>
    } else {
        return outer_raw_code;
    97bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    }
}
    97be:	4618      	mov	r0, r3
    97c0:	3768      	adds	r7, #104	; 0x68
    97c2:	46bd      	mov	sp, r7
    97c4:	bd80      	pop	{r7, pc}

000097c6 <mp_compile>:

mp_obj_t mp_compile(mp_parse_tree_t *parse_tree, qstr source_file, uint emit_opt, bool is_repl) {
    97c6:	b580      	push	{r7, lr}
    97c8:	b086      	sub	sp, #24
    97ca:	af00      	add	r7, sp, #0
    97cc:	60f8      	str	r0, [r7, #12]
    97ce:	60b9      	str	r1, [r7, #8]
    97d0:	607a      	str	r2, [r7, #4]
    97d2:	70fb      	strb	r3, [r7, #3]
    mp_raw_code_t *rc = mp_compile_to_raw_code(parse_tree, source_file, emit_opt, is_repl);
    97d4:	78fb      	ldrb	r3, [r7, #3]
    97d6:	687a      	ldr	r2, [r7, #4]
    97d8:	68b9      	ldr	r1, [r7, #8]
    97da:	68f8      	ldr	r0, [r7, #12]
    97dc:	f7ff ff30 	bl	9640 <mp_compile_to_raw_code>
    97e0:	6178      	str	r0, [r7, #20]
    // return function that executes the outer module
    return mp_make_function_from_raw_code(rc, MP_OBJ_NULL, MP_OBJ_NULL);
    97e2:	2200      	movs	r2, #0
    97e4:	2100      	movs	r1, #0
    97e6:	6978      	ldr	r0, [r7, #20]
    97e8:	f001 fd11 	bl	b20e <mp_make_function_from_raw_code>
    97ec:	4603      	mov	r3, r0
}
    97ee:	4618      	mov	r0, r3
    97f0:	3718      	adds	r7, #24
    97f2:	46bd      	mov	sp, r7
    97f4:	bd80      	pop	{r7, pc}
    97f6:	bf00      	nop

000097f8 <mp_emit_common_get_id_for_load>:

#include "py/emit.h"

#if MICROPY_ENABLE_COMPILER

void mp_emit_common_get_id_for_load(scope_t *scope, qstr qst) {
    97f8:	b580      	push	{r7, lr}
    97fa:	b084      	sub	sp, #16
    97fc:	af00      	add	r7, sp, #0
    97fe:	6078      	str	r0, [r7, #4]
    9800:	6039      	str	r1, [r7, #0]
    // name adding/lookup
    bool added;
    id_info_t *id = scope_find_or_add_id(scope, qst, &added);
    9802:	f107 030b 	add.w	r3, r7, #11
    9806:	461a      	mov	r2, r3
    9808:	6839      	ldr	r1, [r7, #0]
    980a:	6878      	ldr	r0, [r7, #4]
    980c:	f7fb f93c 	bl	4a88 <scope_find_or_add_id>
    9810:	60f8      	str	r0, [r7, #12]
    if (added) {
    9812:	7afb      	ldrb	r3, [r7, #11]
    9814:	2b00      	cmp	r3, #0
    9816:	d004      	beq.n	9822 <mp_emit_common_get_id_for_load+0x2a>
        scope_find_local_and_close_over(scope, id, qst);
    9818:	683a      	ldr	r2, [r7, #0]
    981a:	68f9      	ldr	r1, [r7, #12]
    981c:	6878      	ldr	r0, [r7, #4]
    981e:	f7fb fa0d 	bl	4c3c <scope_find_local_and_close_over>
    }
}
    9822:	bf00      	nop
    9824:	3710      	adds	r7, #16
    9826:	46bd      	mov	sp, r7
    9828:	bd80      	pop	{r7, pc}

0000982a <mp_emit_common_get_id_for_modification>:

void mp_emit_common_get_id_for_modification(scope_t *scope, qstr qst) {
    982a:	b580      	push	{r7, lr}
    982c:	b084      	sub	sp, #16
    982e:	af00      	add	r7, sp, #0
    9830:	6078      	str	r0, [r7, #4]
    9832:	6039      	str	r1, [r7, #0]
    // name adding/lookup
    bool added;
    id_info_t *id = scope_find_or_add_id(scope, qst, &added);
    9834:	f107 030b 	add.w	r3, r7, #11
    9838:	461a      	mov	r2, r3
    983a:	6839      	ldr	r1, [r7, #0]
    983c:	6878      	ldr	r0, [r7, #4]
    983e:	f7fb f923 	bl	4a88 <scope_find_or_add_id>
    9842:	60f8      	str	r0, [r7, #12]
    if (added) {
    9844:	7afb      	ldrb	r3, [r7, #11]
    9846:	2b00      	cmp	r3, #0
    9848:	d00b      	beq.n	9862 <mp_emit_common_get_id_for_modification+0x38>
        if (SCOPE_IS_FUNC_LIKE(scope->kind)) {
    984a:	687b      	ldr	r3, [r7, #4]
    984c:	681b      	ldr	r3, [r3, #0]
    984e:	2b01      	cmp	r3, #1
    9850:	d903      	bls.n	985a <mp_emit_common_get_id_for_modification+0x30>
            id->kind = ID_INFO_KIND_LOCAL;
    9852:	68fb      	ldr	r3, [r7, #12]
    9854:	2202      	movs	r2, #2
    9856:	701a      	strb	r2, [r3, #0]
        }
    } else if (SCOPE_IS_FUNC_LIKE(scope->kind) && id->kind == ID_INFO_KIND_GLOBAL_IMPLICIT) {
        // rebind as a local variable
        id->kind = ID_INFO_KIND_LOCAL;
    }
}
    9858:	e00e      	b.n	9878 <mp_emit_common_get_id_for_modification+0x4e>
            id->kind = ID_INFO_KIND_GLOBAL_IMPLICIT;
    985a:	68fb      	ldr	r3, [r7, #12]
    985c:	2200      	movs	r2, #0
    985e:	701a      	strb	r2, [r3, #0]
}
    9860:	e00a      	b.n	9878 <mp_emit_common_get_id_for_modification+0x4e>
    } else if (SCOPE_IS_FUNC_LIKE(scope->kind) && id->kind == ID_INFO_KIND_GLOBAL_IMPLICIT) {
    9862:	687b      	ldr	r3, [r7, #4]
    9864:	681b      	ldr	r3, [r3, #0]
    9866:	2b01      	cmp	r3, #1
    9868:	d906      	bls.n	9878 <mp_emit_common_get_id_for_modification+0x4e>
    986a:	68fb      	ldr	r3, [r7, #12]
    986c:	781b      	ldrb	r3, [r3, #0]
    986e:	2b00      	cmp	r3, #0
    9870:	d102      	bne.n	9878 <mp_emit_common_get_id_for_modification+0x4e>
        id->kind = ID_INFO_KIND_LOCAL;
    9872:	68fb      	ldr	r3, [r7, #12]
    9874:	2202      	movs	r2, #2
    9876:	701a      	strb	r2, [r3, #0]
}
    9878:	bf00      	nop
    987a:	3710      	adds	r7, #16
    987c:	46bd      	mov	sp, r7
    987e:	bd80      	pop	{r7, pc}

00009880 <mp_emit_common_id_op>:

void mp_emit_common_id_op(emit_t *emit, const mp_emit_method_table_id_ops_t *emit_method_table, scope_t *scope, qstr qst) {
    9880:	b590      	push	{r4, r7, lr}
    9882:	b087      	sub	sp, #28
    9884:	af00      	add	r7, sp, #0
    9886:	60f8      	str	r0, [r7, #12]
    9888:	60b9      	str	r1, [r7, #8]
    988a:	607a      	str	r2, [r7, #4]
    988c:	603b      	str	r3, [r7, #0]
    // assumes pass is greater than 1, ie that all identifiers are defined in the scope

    id_info_t *id = scope_find(scope, qst);
    988e:	6839      	ldr	r1, [r7, #0]
    9890:	6878      	ldr	r0, [r7, #4]
    9892:	f7fb f944 	bl	4b1e <scope_find>
    9896:	6178      	str	r0, [r7, #20]
    assert(id != NULL);
    9898:	697b      	ldr	r3, [r7, #20]
    989a:	2b00      	cmp	r3, #0
    989c:	d105      	bne.n	98aa <mp_emit_common_id_op+0x2a>
    989e:	4b22      	ldr	r3, [pc, #136]	; (9928 <mp_emit_common_id_op+0xa8>)
    98a0:	4a22      	ldr	r2, [pc, #136]	; (992c <mp_emit_common_id_op+0xac>)
    98a2:	213e      	movs	r1, #62	; 0x3e
    98a4:	4822      	ldr	r0, [pc, #136]	; (9930 <mp_emit_common_id_op+0xb0>)
    98a6:	f011 fc89 	bl	1b1bc <__assert_func>

    // call the emit backend with the correct code
    if (id->kind == ID_INFO_KIND_GLOBAL_IMPLICIT) {
    98aa:	697b      	ldr	r3, [r7, #20]
    98ac:	781b      	ldrb	r3, [r3, #0]
    98ae:	2b00      	cmp	r3, #0
    98b0:	d106      	bne.n	98c0 <mp_emit_common_id_op+0x40>
        emit_method_table->global(emit, qst, MP_EMIT_IDOP_GLOBAL_NAME);
    98b2:	68bb      	ldr	r3, [r7, #8]
    98b4:	685b      	ldr	r3, [r3, #4]
    98b6:	2200      	movs	r2, #0
    98b8:	6839      	ldr	r1, [r7, #0]
    98ba:	68f8      	ldr	r0, [r7, #12]
    98bc:	4798      	blx	r3
        emit_method_table->local(emit, qst, id->local_num, MP_EMIT_IDOP_LOCAL_FAST);
    } else {
        assert(id->kind == ID_INFO_KIND_CELL || id->kind == ID_INFO_KIND_FREE);
        emit_method_table->local(emit, qst, id->local_num, MP_EMIT_IDOP_LOCAL_DEREF);
    }
}
    98be:	e02f      	b.n	9920 <mp_emit_common_id_op+0xa0>
    } else if (id->kind == ID_INFO_KIND_GLOBAL_EXPLICIT) {
    98c0:	697b      	ldr	r3, [r7, #20]
    98c2:	781b      	ldrb	r3, [r3, #0]
    98c4:	2b01      	cmp	r3, #1
    98c6:	d106      	bne.n	98d6 <mp_emit_common_id_op+0x56>
        emit_method_table->global(emit, qst, MP_EMIT_IDOP_GLOBAL_GLOBAL);
    98c8:	68bb      	ldr	r3, [r7, #8]
    98ca:	685b      	ldr	r3, [r3, #4]
    98cc:	2201      	movs	r2, #1
    98ce:	6839      	ldr	r1, [r7, #0]
    98d0:	68f8      	ldr	r0, [r7, #12]
    98d2:	4798      	blx	r3
}
    98d4:	e024      	b.n	9920 <mp_emit_common_id_op+0xa0>
    } else if (id->kind == ID_INFO_KIND_LOCAL) {
    98d6:	697b      	ldr	r3, [r7, #20]
    98d8:	781b      	ldrb	r3, [r3, #0]
    98da:	2b02      	cmp	r3, #2
    98dc:	d109      	bne.n	98f2 <mp_emit_common_id_op+0x72>
        emit_method_table->local(emit, qst, id->local_num, MP_EMIT_IDOP_LOCAL_FAST);
    98de:	68bb      	ldr	r3, [r7, #8]
    98e0:	681c      	ldr	r4, [r3, #0]
    98e2:	697b      	ldr	r3, [r7, #20]
    98e4:	885b      	ldrh	r3, [r3, #2]
    98e6:	461a      	mov	r2, r3
    98e8:	2300      	movs	r3, #0
    98ea:	6839      	ldr	r1, [r7, #0]
    98ec:	68f8      	ldr	r0, [r7, #12]
    98ee:	47a0      	blx	r4
}
    98f0:	e016      	b.n	9920 <mp_emit_common_id_op+0xa0>
        assert(id->kind == ID_INFO_KIND_CELL || id->kind == ID_INFO_KIND_FREE);
    98f2:	697b      	ldr	r3, [r7, #20]
    98f4:	781b      	ldrb	r3, [r3, #0]
    98f6:	2b03      	cmp	r3, #3
    98f8:	d009      	beq.n	990e <mp_emit_common_id_op+0x8e>
    98fa:	697b      	ldr	r3, [r7, #20]
    98fc:	781b      	ldrb	r3, [r3, #0]
    98fe:	2b04      	cmp	r3, #4
    9900:	d005      	beq.n	990e <mp_emit_common_id_op+0x8e>
    9902:	4b0c      	ldr	r3, [pc, #48]	; (9934 <mp_emit_common_id_op+0xb4>)
    9904:	4a09      	ldr	r2, [pc, #36]	; (992c <mp_emit_common_id_op+0xac>)
    9906:	2148      	movs	r1, #72	; 0x48
    9908:	4809      	ldr	r0, [pc, #36]	; (9930 <mp_emit_common_id_op+0xb0>)
    990a:	f011 fc57 	bl	1b1bc <__assert_func>
        emit_method_table->local(emit, qst, id->local_num, MP_EMIT_IDOP_LOCAL_DEREF);
    990e:	68bb      	ldr	r3, [r7, #8]
    9910:	681c      	ldr	r4, [r3, #0]
    9912:	697b      	ldr	r3, [r7, #20]
    9914:	885b      	ldrh	r3, [r3, #2]
    9916:	461a      	mov	r2, r3
    9918:	2301      	movs	r3, #1
    991a:	6839      	ldr	r1, [r7, #0]
    991c:	68f8      	ldr	r0, [r7, #12]
    991e:	47a0      	blx	r4
}
    9920:	bf00      	nop
    9922:	371c      	adds	r7, #28
    9924:	46bd      	mov	sp, r7
    9926:	bd90      	pop	{r4, r7, pc}
    9928:	0001eea4 	.word	0x0001eea4
    992c:	0001ef08 	.word	0x0001ef08
    9930:	0001eeb0 	.word	0x0001eeb0
    9934:	0001eec8 	.word	0x0001eec8

00009938 <emit_bc_new>:
    uint16_t ct_cur_raw_code;
    #endif
    mp_uint_t *const_table;
};

emit_t *emit_bc_new(void) {
    9938:	b580      	push	{r7, lr}
    993a:	b082      	sub	sp, #8
    993c:	af00      	add	r7, sp, #0
    emit_t *emit = m_new0(emit_t, 1);
    993e:	2040      	movs	r0, #64	; 0x40
    9940:	f7f6 fd11 	bl	366 <m_malloc0>
    9944:	6078      	str	r0, [r7, #4]
    return emit;
    9946:	687b      	ldr	r3, [r7, #4]
}
    9948:	4618      	mov	r0, r3
    994a:	3708      	adds	r7, #8
    994c:	46bd      	mov	sp, r7
    994e:	bd80      	pop	{r7, pc}

00009950 <emit_bc_set_max_num_labels>:

void emit_bc_set_max_num_labels(emit_t *emit, mp_uint_t max_num_labels) {
    9950:	b580      	push	{r7, lr}
    9952:	b082      	sub	sp, #8
    9954:	af00      	add	r7, sp, #0
    9956:	6078      	str	r0, [r7, #4]
    9958:	6039      	str	r1, [r7, #0]
    emit->max_num_labels = max_num_labels;
    995a:	687b      	ldr	r3, [r7, #4]
    995c:	683a      	ldr	r2, [r7, #0]
    995e:	619a      	str	r2, [r3, #24]
    emit->label_offsets = m_new(mp_uint_t, emit->max_num_labels);
    9960:	687b      	ldr	r3, [r7, #4]
    9962:	699b      	ldr	r3, [r3, #24]
    9964:	009b      	lsls	r3, r3, #2
    9966:	4618      	mov	r0, r3
    9968:	f7f6 fcd8 	bl	31c <m_malloc>
    996c:	4602      	mov	r2, r0
    996e:	687b      	ldr	r3, [r7, #4]
    9970:	61da      	str	r2, [r3, #28]
}
    9972:	bf00      	nop
    9974:	3708      	adds	r7, #8
    9976:	46bd      	mov	sp, r7
    9978:	bd80      	pop	{r7, pc}

0000997a <emit_bc_free>:

void emit_bc_free(emit_t *emit) {
    997a:	b580      	push	{r7, lr}
    997c:	b082      	sub	sp, #8
    997e:	af00      	add	r7, sp, #0
    9980:	6078      	str	r0, [r7, #4]
    m_del(mp_uint_t, emit->label_offsets, emit->max_num_labels);
    9982:	687b      	ldr	r3, [r7, #4]
    9984:	69db      	ldr	r3, [r3, #28]
    9986:	4618      	mov	r0, r3
    9988:	f7f6 fd26 	bl	3d8 <m_free>
    m_del_obj(emit_t, emit);
    998c:	6878      	ldr	r0, [r7, #4]
    998e:	f7f6 fd23 	bl	3d8 <m_free>
}
    9992:	bf00      	nop
    9994:	3708      	adds	r7, #8
    9996:	46bd      	mov	sp, r7
    9998:	bd80      	pop	{r7, pc}

0000999a <emit_write_uint>:

typedef byte *(*emit_allocator_t)(emit_t *emit, int nbytes);

STATIC void emit_write_uint(emit_t *emit, emit_allocator_t allocator, mp_uint_t val) {
    999a:	b580      	push	{r7, lr}
    999c:	b088      	sub	sp, #32
    999e:	af00      	add	r7, sp, #0
    99a0:	60f8      	str	r0, [r7, #12]
    99a2:	60b9      	str	r1, [r7, #8]
    99a4:	607a      	str	r2, [r7, #4]
    // We store each 7 bits in a separate byte, and that's how many bytes needed
    byte buf[BYTES_FOR_INT];
    byte *p = buf + sizeof(buf);
    99a6:	f107 0310 	add.w	r3, r7, #16
    99aa:	3305      	adds	r3, #5
    99ac:	61fb      	str	r3, [r7, #28]
    // We encode in little-ending order, but store in big-endian, to help decoding
    do {
        *--p = val & 0x7f;
    99ae:	69fb      	ldr	r3, [r7, #28]
    99b0:	3b01      	subs	r3, #1
    99b2:	61fb      	str	r3, [r7, #28]
    99b4:	687b      	ldr	r3, [r7, #4]
    99b6:	b2db      	uxtb	r3, r3
    99b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    99bc:	b2da      	uxtb	r2, r3
    99be:	69fb      	ldr	r3, [r7, #28]
    99c0:	701a      	strb	r2, [r3, #0]
        val >>= 7;
    99c2:	687b      	ldr	r3, [r7, #4]
    99c4:	09db      	lsrs	r3, r3, #7
    99c6:	607b      	str	r3, [r7, #4]
    } while (val != 0);
    99c8:	687b      	ldr	r3, [r7, #4]
    99ca:	2b00      	cmp	r3, #0
    99cc:	d1ef      	bne.n	99ae <emit_write_uint+0x14>
    byte *c = allocator(emit, buf + sizeof(buf) - p);
    99ce:	f107 0310 	add.w	r3, r7, #16
    99d2:	3305      	adds	r3, #5
    99d4:	461a      	mov	r2, r3
    99d6:	69fb      	ldr	r3, [r7, #28]
    99d8:	1ad2      	subs	r2, r2, r3
    99da:	68bb      	ldr	r3, [r7, #8]
    99dc:	4611      	mov	r1, r2
    99de:	68f8      	ldr	r0, [r7, #12]
    99e0:	4798      	blx	r3
    99e2:	61b8      	str	r0, [r7, #24]
    while (p != buf + sizeof(buf) - 1) {
    99e4:	e00a      	b.n	99fc <emit_write_uint+0x62>
        *c++ = *p++ | 0x80;
    99e6:	69bb      	ldr	r3, [r7, #24]
    99e8:	1c5a      	adds	r2, r3, #1
    99ea:	61ba      	str	r2, [r7, #24]
    99ec:	69fa      	ldr	r2, [r7, #28]
    99ee:	1c51      	adds	r1, r2, #1
    99f0:	61f9      	str	r1, [r7, #28]
    99f2:	7812      	ldrb	r2, [r2, #0]
    99f4:	f062 027f 	orn	r2, r2, #127	; 0x7f
    99f8:	b2d2      	uxtb	r2, r2
    99fa:	701a      	strb	r2, [r3, #0]
    while (p != buf + sizeof(buf) - 1) {
    99fc:	f107 0310 	add.w	r3, r7, #16
    9a00:	3304      	adds	r3, #4
    9a02:	69fa      	ldr	r2, [r7, #28]
    9a04:	4293      	cmp	r3, r2
    9a06:	d1ee      	bne.n	99e6 <emit_write_uint+0x4c>
    }
    *c = *p;
    9a08:	69fb      	ldr	r3, [r7, #28]
    9a0a:	781a      	ldrb	r2, [r3, #0]
    9a0c:	69bb      	ldr	r3, [r7, #24]
    9a0e:	701a      	strb	r2, [r3, #0]
}
    9a10:	bf00      	nop
    9a12:	3720      	adds	r7, #32
    9a14:	46bd      	mov	sp, r7
    9a16:	bd80      	pop	{r7, pc}

00009a18 <emit_get_cur_to_write_code_info>:

// all functions must go through this one to emit code info
STATIC byte *emit_get_cur_to_write_code_info(emit_t *emit, int num_bytes_to_write) {
    9a18:	b580      	push	{r7, lr}
    9a1a:	b084      	sub	sp, #16
    9a1c:	af00      	add	r7, sp, #0
    9a1e:	6078      	str	r0, [r7, #4]
    9a20:	6039      	str	r1, [r7, #0]
    //printf("emit %d\n", num_bytes_to_write);
    if (emit->pass < MP_PASS_EMIT) {
    9a22:	687b      	ldr	r3, [r7, #4]
    9a24:	795b      	ldrb	r3, [r3, #5]
    9a26:	2b03      	cmp	r3, #3
    9a28:	d807      	bhi.n	9a3a <emit_get_cur_to_write_code_info+0x22>
        emit->code_info_offset += num_bytes_to_write;
    9a2a:	687b      	ldr	r3, [r7, #4]
    9a2c:	6a1a      	ldr	r2, [r3, #32]
    9a2e:	683b      	ldr	r3, [r7, #0]
    9a30:	441a      	add	r2, r3
    9a32:	687b      	ldr	r3, [r7, #4]
    9a34:	621a      	str	r2, [r3, #32]
        return emit->dummy_data;
    9a36:	687b      	ldr	r3, [r7, #4]
    9a38:	e01a      	b.n	9a70 <emit_get_cur_to_write_code_info+0x58>
    } else {
        assert(emit->code_info_offset + num_bytes_to_write <= emit->code_info_size);
    9a3a:	687b      	ldr	r3, [r7, #4]
    9a3c:	6a1a      	ldr	r2, [r3, #32]
    9a3e:	683b      	ldr	r3, [r7, #0]
    9a40:	441a      	add	r2, r3
    9a42:	687b      	ldr	r3, [r7, #4]
    9a44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    9a46:	429a      	cmp	r2, r3
    9a48:	d905      	bls.n	9a56 <emit_get_cur_to_write_code_info+0x3e>
    9a4a:	4b0b      	ldr	r3, [pc, #44]	; (9a78 <emit_get_cur_to_write_code_info+0x60>)
    9a4c:	4a0b      	ldr	r2, [pc, #44]	; (9a7c <emit_get_cur_to_write_code_info+0x64>)
    9a4e:	2173      	movs	r1, #115	; 0x73
    9a50:	480b      	ldr	r0, [pc, #44]	; (9a80 <emit_get_cur_to_write_code_info+0x68>)
    9a52:	f011 fbb3 	bl	1b1bc <__assert_func>
        byte *c = emit->code_base + emit->code_info_offset;
    9a56:	687b      	ldr	r3, [r7, #4]
    9a58:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    9a5a:	687b      	ldr	r3, [r7, #4]
    9a5c:	6a1b      	ldr	r3, [r3, #32]
    9a5e:	4413      	add	r3, r2
    9a60:	60fb      	str	r3, [r7, #12]
        emit->code_info_offset += num_bytes_to_write;
    9a62:	687b      	ldr	r3, [r7, #4]
    9a64:	6a1a      	ldr	r2, [r3, #32]
    9a66:	683b      	ldr	r3, [r7, #0]
    9a68:	441a      	add	r2, r3
    9a6a:	687b      	ldr	r3, [r7, #4]
    9a6c:	621a      	str	r2, [r3, #32]
        return c;
    9a6e:	68fb      	ldr	r3, [r7, #12]
    }
}
    9a70:	4618      	mov	r0, r3
    9a72:	3710      	adds	r7, #16
    9a74:	46bd      	mov	sp, r7
    9a76:	bd80      	pop	{r7, pc}
    9a78:	0001ef20 	.word	0x0001ef20
    9a7c:	0001f13c 	.word	0x0001f13c
    9a80:	0001ef64 	.word	0x0001ef64

00009a84 <emit_write_code_info_byte>:

STATIC void emit_write_code_info_byte(emit_t* emit, byte val) {
    9a84:	b580      	push	{r7, lr}
    9a86:	b082      	sub	sp, #8
    9a88:	af00      	add	r7, sp, #0
    9a8a:	6078      	str	r0, [r7, #4]
    9a8c:	460b      	mov	r3, r1
    9a8e:	70fb      	strb	r3, [r7, #3]
    *emit_get_cur_to_write_code_info(emit, 1) = val;
    9a90:	2101      	movs	r1, #1
    9a92:	6878      	ldr	r0, [r7, #4]
    9a94:	f7ff ffc0 	bl	9a18 <emit_get_cur_to_write_code_info>
    9a98:	4602      	mov	r2, r0
    9a9a:	78fb      	ldrb	r3, [r7, #3]
    9a9c:	7013      	strb	r3, [r2, #0]
}
    9a9e:	bf00      	nop
    9aa0:	3708      	adds	r7, #8
    9aa2:	46bd      	mov	sp, r7
    9aa4:	bd80      	pop	{r7, pc}

00009aa6 <emit_write_code_info_uint>:

STATIC void emit_write_code_info_uint(emit_t* emit, mp_uint_t val) {
    9aa6:	b580      	push	{r7, lr}
    9aa8:	b082      	sub	sp, #8
    9aaa:	af00      	add	r7, sp, #0
    9aac:	6078      	str	r0, [r7, #4]
    9aae:	6039      	str	r1, [r7, #0]
    emit_write_uint(emit, emit_get_cur_to_write_code_info, val);
    9ab0:	683a      	ldr	r2, [r7, #0]
    9ab2:	4904      	ldr	r1, [pc, #16]	; (9ac4 <emit_write_code_info_uint+0x1e>)
    9ab4:	6878      	ldr	r0, [r7, #4]
    9ab6:	f7ff ff70 	bl	999a <emit_write_uint>
}
    9aba:	bf00      	nop
    9abc:	3708      	adds	r7, #8
    9abe:	46bd      	mov	sp, r7
    9ac0:	bd80      	pop	{r7, pc}
    9ac2:	bf00      	nop
    9ac4:	00009a19 	.word	0x00009a19

00009ac8 <emit_write_code_info_qstr>:

STATIC void emit_write_code_info_qstr(emit_t *emit, qstr qst) {
    9ac8:	b580      	push	{r7, lr}
    9aca:	b084      	sub	sp, #16
    9acc:	af00      	add	r7, sp, #0
    9ace:	6078      	str	r0, [r7, #4]
    9ad0:	6039      	str	r1, [r7, #0]
    #if MICROPY_PERSISTENT_CODE
    assert((qst >> 16) == 0);
    9ad2:	683b      	ldr	r3, [r7, #0]
    9ad4:	0c1b      	lsrs	r3, r3, #16
    9ad6:	2b00      	cmp	r3, #0
    9ad8:	d005      	beq.n	9ae6 <emit_write_code_info_qstr+0x1e>
    9ada:	4b0c      	ldr	r3, [pc, #48]	; (9b0c <emit_write_code_info_qstr+0x44>)
    9adc:	4a0c      	ldr	r2, [pc, #48]	; (9b10 <emit_write_code_info_qstr+0x48>)
    9ade:	2184      	movs	r1, #132	; 0x84
    9ae0:	480c      	ldr	r0, [pc, #48]	; (9b14 <emit_write_code_info_qstr+0x4c>)
    9ae2:	f011 fb6b 	bl	1b1bc <__assert_func>
    byte *c = emit_get_cur_to_write_code_info(emit, 2);
    9ae6:	2102      	movs	r1, #2
    9ae8:	6878      	ldr	r0, [r7, #4]
    9aea:	f7ff ff95 	bl	9a18 <emit_get_cur_to_write_code_info>
    9aee:	60f8      	str	r0, [r7, #12]
    c[0] = qst;
    9af0:	683b      	ldr	r3, [r7, #0]
    9af2:	b2da      	uxtb	r2, r3
    9af4:	68fb      	ldr	r3, [r7, #12]
    9af6:	701a      	strb	r2, [r3, #0]
    c[1] = qst >> 8;
    9af8:	68fb      	ldr	r3, [r7, #12]
    9afa:	3301      	adds	r3, #1
    9afc:	683a      	ldr	r2, [r7, #0]
    9afe:	0a12      	lsrs	r2, r2, #8
    9b00:	b2d2      	uxtb	r2, r2
    9b02:	701a      	strb	r2, [r3, #0]
    #else
    emit_write_uint(emit, emit_get_cur_to_write_code_info, qst);
    #endif
}
    9b04:	bf00      	nop
    9b06:	3710      	adds	r7, #16
    9b08:	46bd      	mov	sp, r7
    9b0a:	bd80      	pop	{r7, pc}
    9b0c:	0001ef78 	.word	0x0001ef78
    9b10:	0001f15c 	.word	0x0001f15c
    9b14:	0001ef64 	.word	0x0001ef64

00009b18 <emit_get_cur_to_write_bytecode>:
    }
}
#endif

// all functions must go through this one to emit byte code
STATIC byte *emit_get_cur_to_write_bytecode(emit_t *emit, int num_bytes_to_write) {
    9b18:	b580      	push	{r7, lr}
    9b1a:	b084      	sub	sp, #16
    9b1c:	af00      	add	r7, sp, #0
    9b1e:	6078      	str	r0, [r7, #4]
    9b20:	6039      	str	r1, [r7, #0]
    //printf("emit %d\n", num_bytes_to_write);
    if (emit->pass < MP_PASS_EMIT) {
    9b22:	687b      	ldr	r3, [r7, #4]
    9b24:	795b      	ldrb	r3, [r3, #5]
    9b26:	2b03      	cmp	r3, #3
    9b28:	d807      	bhi.n	9b3a <emit_get_cur_to_write_bytecode+0x22>
        emit->bytecode_offset += num_bytes_to_write;
    9b2a:	687b      	ldr	r3, [r7, #4]
    9b2c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    9b2e:	683b      	ldr	r3, [r7, #0]
    9b30:	441a      	add	r2, r3
    9b32:	687b      	ldr	r3, [r7, #4]
    9b34:	629a      	str	r2, [r3, #40]	; 0x28
        return emit->dummy_data;
    9b36:	687b      	ldr	r3, [r7, #4]
    9b38:	e01d      	b.n	9b76 <emit_get_cur_to_write_bytecode+0x5e>
    } else {
        assert(emit->bytecode_offset + num_bytes_to_write <= emit->bytecode_size);
    9b3a:	687b      	ldr	r3, [r7, #4]
    9b3c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    9b3e:	683b      	ldr	r3, [r7, #0]
    9b40:	441a      	add	r2, r3
    9b42:	687b      	ldr	r3, [r7, #4]
    9b44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    9b46:	429a      	cmp	r2, r3
    9b48:	d905      	bls.n	9b56 <emit_get_cur_to_write_bytecode+0x3e>
    9b4a:	4b0d      	ldr	r3, [pc, #52]	; (9b80 <emit_get_cur_to_write_bytecode+0x68>)
    9b4c:	4a0d      	ldr	r2, [pc, #52]	; (9b84 <emit_get_cur_to_write_bytecode+0x6c>)
    9b4e:	21b2      	movs	r1, #178	; 0xb2
    9b50:	480d      	ldr	r0, [pc, #52]	; (9b88 <emit_get_cur_to_write_bytecode+0x70>)
    9b52:	f011 fb33 	bl	1b1bc <__assert_func>
        byte *c = emit->code_base + emit->code_info_size + emit->bytecode_offset;
    9b56:	687b      	ldr	r3, [r7, #4]
    9b58:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    9b5a:	687b      	ldr	r3, [r7, #4]
    9b5c:	6a59      	ldr	r1, [r3, #36]	; 0x24
    9b5e:	687b      	ldr	r3, [r7, #4]
    9b60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    9b62:	440b      	add	r3, r1
    9b64:	4413      	add	r3, r2
    9b66:	60fb      	str	r3, [r7, #12]
        emit->bytecode_offset += num_bytes_to_write;
    9b68:	687b      	ldr	r3, [r7, #4]
    9b6a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    9b6c:	683b      	ldr	r3, [r7, #0]
    9b6e:	441a      	add	r2, r3
    9b70:	687b      	ldr	r3, [r7, #4]
    9b72:	629a      	str	r2, [r3, #40]	; 0x28
        return c;
    9b74:	68fb      	ldr	r3, [r7, #12]
    }
}
    9b76:	4618      	mov	r0, r3
    9b78:	3710      	adds	r7, #16
    9b7a:	46bd      	mov	sp, r7
    9b7c:	bd80      	pop	{r7, pc}
    9b7e:	bf00      	nop
    9b80:	0001ef8c 	.word	0x0001ef8c
    9b84:	0001f178 	.word	0x0001f178
    9b88:	0001ef64 	.word	0x0001ef64

00009b8c <emit_write_bytecode_byte>:

STATIC void emit_write_bytecode_byte(emit_t *emit, byte b1) {
    9b8c:	b580      	push	{r7, lr}
    9b8e:	b084      	sub	sp, #16
    9b90:	af00      	add	r7, sp, #0
    9b92:	6078      	str	r0, [r7, #4]
    9b94:	460b      	mov	r3, r1
    9b96:	70fb      	strb	r3, [r7, #3]
    byte *c = emit_get_cur_to_write_bytecode(emit, 1);
    9b98:	2101      	movs	r1, #1
    9b9a:	6878      	ldr	r0, [r7, #4]
    9b9c:	f7ff ffbc 	bl	9b18 <emit_get_cur_to_write_bytecode>
    9ba0:	60f8      	str	r0, [r7, #12]
    c[0] = b1;
    9ba2:	68fb      	ldr	r3, [r7, #12]
    9ba4:	78fa      	ldrb	r2, [r7, #3]
    9ba6:	701a      	strb	r2, [r3, #0]
}
    9ba8:	bf00      	nop
    9baa:	3710      	adds	r7, #16
    9bac:	46bd      	mov	sp, r7
    9bae:	bd80      	pop	{r7, pc}

00009bb0 <emit_write_bytecode_byte_byte>:

STATIC void emit_write_bytecode_byte_byte(emit_t* emit, byte b1, byte b2) {
    9bb0:	b580      	push	{r7, lr}
    9bb2:	b084      	sub	sp, #16
    9bb4:	af00      	add	r7, sp, #0
    9bb6:	6078      	str	r0, [r7, #4]
    9bb8:	460b      	mov	r3, r1
    9bba:	70fb      	strb	r3, [r7, #3]
    9bbc:	4613      	mov	r3, r2
    9bbe:	70bb      	strb	r3, [r7, #2]
    byte *c = emit_get_cur_to_write_bytecode(emit, 2);
    9bc0:	2102      	movs	r1, #2
    9bc2:	6878      	ldr	r0, [r7, #4]
    9bc4:	f7ff ffa8 	bl	9b18 <emit_get_cur_to_write_bytecode>
    9bc8:	60f8      	str	r0, [r7, #12]
    c[0] = b1;
    9bca:	68fb      	ldr	r3, [r7, #12]
    9bcc:	78fa      	ldrb	r2, [r7, #3]
    9bce:	701a      	strb	r2, [r3, #0]
    c[1] = b2;
    9bd0:	68fb      	ldr	r3, [r7, #12]
    9bd2:	3301      	adds	r3, #1
    9bd4:	78ba      	ldrb	r2, [r7, #2]
    9bd6:	701a      	strb	r2, [r3, #0]
}
    9bd8:	bf00      	nop
    9bda:	3710      	adds	r7, #16
    9bdc:	46bd      	mov	sp, r7
    9bde:	bd80      	pop	{r7, pc}

00009be0 <emit_write_bytecode_byte_int>:

// Similar to emit_write_bytecode_uint(), just some extra handling to encode sign
STATIC void emit_write_bytecode_byte_int(emit_t *emit, byte b1, mp_int_t num) {
    9be0:	b580      	push	{r7, lr}
    9be2:	b088      	sub	sp, #32
    9be4:	af00      	add	r7, sp, #0
    9be6:	60f8      	str	r0, [r7, #12]
    9be8:	460b      	mov	r3, r1
    9bea:	607a      	str	r2, [r7, #4]
    9bec:	72fb      	strb	r3, [r7, #11]
    emit_write_bytecode_byte(emit, b1);
    9bee:	7afb      	ldrb	r3, [r7, #11]
    9bf0:	4619      	mov	r1, r3
    9bf2:	68f8      	ldr	r0, [r7, #12]
    9bf4:	f7ff ffca 	bl	9b8c <emit_write_bytecode_byte>

    // We store each 7 bits in a separate byte, and that's how many bytes needed
    byte buf[BYTES_FOR_INT];
    byte *p = buf + sizeof(buf);
    9bf8:	f107 0310 	add.w	r3, r7, #16
    9bfc:	3305      	adds	r3, #5
    9bfe:	61fb      	str	r3, [r7, #28]
    // We encode in little-ending order, but store in big-endian, to help decoding
    do {
        *--p = num & 0x7f;
    9c00:	69fb      	ldr	r3, [r7, #28]
    9c02:	3b01      	subs	r3, #1
    9c04:	61fb      	str	r3, [r7, #28]
    9c06:	687b      	ldr	r3, [r7, #4]
    9c08:	b2db      	uxtb	r3, r3
    9c0a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    9c0e:	b2da      	uxtb	r2, r3
    9c10:	69fb      	ldr	r3, [r7, #28]
    9c12:	701a      	strb	r2, [r3, #0]
        num >>= 7;
    9c14:	687b      	ldr	r3, [r7, #4]
    9c16:	11db      	asrs	r3, r3, #7
    9c18:	607b      	str	r3, [r7, #4]
    } while (num != 0 && num != -1);
    9c1a:	687b      	ldr	r3, [r7, #4]
    9c1c:	2b00      	cmp	r3, #0
    9c1e:	d003      	beq.n	9c28 <emit_write_bytecode_byte_int+0x48>
    9c20:	687b      	ldr	r3, [r7, #4]
    9c22:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    9c26:	d1eb      	bne.n	9c00 <emit_write_bytecode_byte_int+0x20>
    // Make sure that highest bit we stored (mask 0x40) matches sign
    // of the number. If not, store extra byte just to encode sign
    if (num == -1 && (*p & 0x40) == 0) {
    9c28:	687b      	ldr	r3, [r7, #4]
    9c2a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    9c2e:	d10c      	bne.n	9c4a <emit_write_bytecode_byte_int+0x6a>
    9c30:	69fb      	ldr	r3, [r7, #28]
    9c32:	781b      	ldrb	r3, [r3, #0]
    9c34:	f003 0340 	and.w	r3, r3, #64	; 0x40
    9c38:	2b00      	cmp	r3, #0
    9c3a:	d106      	bne.n	9c4a <emit_write_bytecode_byte_int+0x6a>
        *--p = 0x7f;
    9c3c:	69fb      	ldr	r3, [r7, #28]
    9c3e:	3b01      	subs	r3, #1
    9c40:	61fb      	str	r3, [r7, #28]
    9c42:	69fb      	ldr	r3, [r7, #28]
    9c44:	227f      	movs	r2, #127	; 0x7f
    9c46:	701a      	strb	r2, [r3, #0]
    9c48:	e00e      	b.n	9c68 <emit_write_bytecode_byte_int+0x88>
    } else if (num == 0 && (*p & 0x40) != 0) {
    9c4a:	687b      	ldr	r3, [r7, #4]
    9c4c:	2b00      	cmp	r3, #0
    9c4e:	d10b      	bne.n	9c68 <emit_write_bytecode_byte_int+0x88>
    9c50:	69fb      	ldr	r3, [r7, #28]
    9c52:	781b      	ldrb	r3, [r3, #0]
    9c54:	f003 0340 	and.w	r3, r3, #64	; 0x40
    9c58:	2b00      	cmp	r3, #0
    9c5a:	d005      	beq.n	9c68 <emit_write_bytecode_byte_int+0x88>
        *--p = 0;
    9c5c:	69fb      	ldr	r3, [r7, #28]
    9c5e:	3b01      	subs	r3, #1
    9c60:	61fb      	str	r3, [r7, #28]
    9c62:	69fb      	ldr	r3, [r7, #28]
    9c64:	2200      	movs	r2, #0
    9c66:	701a      	strb	r2, [r3, #0]
    }

    byte *c = emit_get_cur_to_write_bytecode(emit, buf + sizeof(buf) - p);
    9c68:	f107 0310 	add.w	r3, r7, #16
    9c6c:	3305      	adds	r3, #5
    9c6e:	461a      	mov	r2, r3
    9c70:	69fb      	ldr	r3, [r7, #28]
    9c72:	1ad3      	subs	r3, r2, r3
    9c74:	4619      	mov	r1, r3
    9c76:	68f8      	ldr	r0, [r7, #12]
    9c78:	f7ff ff4e 	bl	9b18 <emit_get_cur_to_write_bytecode>
    9c7c:	61b8      	str	r0, [r7, #24]
    while (p != buf + sizeof(buf) - 1) {
    9c7e:	e00a      	b.n	9c96 <emit_write_bytecode_byte_int+0xb6>
        *c++ = *p++ | 0x80;
    9c80:	69bb      	ldr	r3, [r7, #24]
    9c82:	1c5a      	adds	r2, r3, #1
    9c84:	61ba      	str	r2, [r7, #24]
    9c86:	69fa      	ldr	r2, [r7, #28]
    9c88:	1c51      	adds	r1, r2, #1
    9c8a:	61f9      	str	r1, [r7, #28]
    9c8c:	7812      	ldrb	r2, [r2, #0]
    9c8e:	f062 027f 	orn	r2, r2, #127	; 0x7f
    9c92:	b2d2      	uxtb	r2, r2
    9c94:	701a      	strb	r2, [r3, #0]
    while (p != buf + sizeof(buf) - 1) {
    9c96:	f107 0310 	add.w	r3, r7, #16
    9c9a:	3304      	adds	r3, #4
    9c9c:	69fa      	ldr	r2, [r7, #28]
    9c9e:	4293      	cmp	r3, r2
    9ca0:	d1ee      	bne.n	9c80 <emit_write_bytecode_byte_int+0xa0>
    }
    *c = *p;
    9ca2:	69fb      	ldr	r3, [r7, #28]
    9ca4:	781a      	ldrb	r2, [r3, #0]
    9ca6:	69bb      	ldr	r3, [r7, #24]
    9ca8:	701a      	strb	r2, [r3, #0]
}
    9caa:	bf00      	nop
    9cac:	3720      	adds	r7, #32
    9cae:	46bd      	mov	sp, r7
    9cb0:	bd80      	pop	{r7, pc}

00009cb2 <emit_write_bytecode_byte_uint>:

STATIC void emit_write_bytecode_byte_uint(emit_t *emit, byte b, mp_uint_t val) {
    9cb2:	b580      	push	{r7, lr}
    9cb4:	b084      	sub	sp, #16
    9cb6:	af00      	add	r7, sp, #0
    9cb8:	60f8      	str	r0, [r7, #12]
    9cba:	460b      	mov	r3, r1
    9cbc:	607a      	str	r2, [r7, #4]
    9cbe:	72fb      	strb	r3, [r7, #11]
    emit_write_bytecode_byte(emit, b);
    9cc0:	7afb      	ldrb	r3, [r7, #11]
    9cc2:	4619      	mov	r1, r3
    9cc4:	68f8      	ldr	r0, [r7, #12]
    9cc6:	f7ff ff61 	bl	9b8c <emit_write_bytecode_byte>
    emit_write_uint(emit, emit_get_cur_to_write_bytecode, val);
    9cca:	687a      	ldr	r2, [r7, #4]
    9ccc:	4903      	ldr	r1, [pc, #12]	; (9cdc <emit_write_bytecode_byte_uint+0x2a>)
    9cce:	68f8      	ldr	r0, [r7, #12]
    9cd0:	f7ff fe63 	bl	999a <emit_write_uint>
}
    9cd4:	bf00      	nop
    9cd6:	3710      	adds	r7, #16
    9cd8:	46bd      	mov	sp, r7
    9cda:	bd80      	pop	{r7, pc}
    9cdc:	00009b19 	.word	0x00009b19

00009ce0 <emit_write_bytecode_byte_const>:

#if MICROPY_PERSISTENT_CODE
STATIC void emit_write_bytecode_byte_const(emit_t *emit, byte b, mp_uint_t n, mp_uint_t c) {
    9ce0:	b580      	push	{r7, lr}
    9ce2:	b084      	sub	sp, #16
    9ce4:	af00      	add	r7, sp, #0
    9ce6:	60f8      	str	r0, [r7, #12]
    9ce8:	607a      	str	r2, [r7, #4]
    9cea:	603b      	str	r3, [r7, #0]
    9cec:	460b      	mov	r3, r1
    9cee:	72fb      	strb	r3, [r7, #11]
    if (emit->pass == MP_PASS_EMIT) {
    9cf0:	68fb      	ldr	r3, [r7, #12]
    9cf2:	795b      	ldrb	r3, [r3, #5]
    9cf4:	2b04      	cmp	r3, #4
    9cf6:	d106      	bne.n	9d06 <emit_write_bytecode_byte_const+0x26>
        emit->const_table[n] = c;
    9cf8:	68fb      	ldr	r3, [r7, #12]
    9cfa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
    9cfc:	687b      	ldr	r3, [r7, #4]
    9cfe:	009b      	lsls	r3, r3, #2
    9d00:	4413      	add	r3, r2
    9d02:	683a      	ldr	r2, [r7, #0]
    9d04:	601a      	str	r2, [r3, #0]
    }
    emit_write_bytecode_byte_uint(emit, b, n);
    9d06:	7afb      	ldrb	r3, [r7, #11]
    9d08:	687a      	ldr	r2, [r7, #4]
    9d0a:	4619      	mov	r1, r3
    9d0c:	68f8      	ldr	r0, [r7, #12]
    9d0e:	f7ff ffd0 	bl	9cb2 <emit_write_bytecode_byte_uint>
}
    9d12:	bf00      	nop
    9d14:	3710      	adds	r7, #16
    9d16:	46bd      	mov	sp, r7
    9d18:	bd80      	pop	{r7, pc}

00009d1a <emit_write_bytecode_byte_qstr>:
#endif

STATIC void emit_write_bytecode_byte_qstr(emit_t* emit, byte b, qstr qst) {
    9d1a:	b580      	push	{r7, lr}
    9d1c:	b086      	sub	sp, #24
    9d1e:	af00      	add	r7, sp, #0
    9d20:	60f8      	str	r0, [r7, #12]
    9d22:	460b      	mov	r3, r1
    9d24:	607a      	str	r2, [r7, #4]
    9d26:	72fb      	strb	r3, [r7, #11]
    #if MICROPY_PERSISTENT_CODE
    assert((qst >> 16) == 0);
    9d28:	687b      	ldr	r3, [r7, #4]
    9d2a:	0c1b      	lsrs	r3, r3, #16
    9d2c:	2b00      	cmp	r3, #0
    9d2e:	d005      	beq.n	9d3c <emit_write_bytecode_byte_qstr+0x22>
    9d30:	4b0e      	ldr	r3, [pc, #56]	; (9d6c <emit_write_bytecode_byte_qstr+0x52>)
    9d32:	4a0f      	ldr	r2, [pc, #60]	; (9d70 <emit_write_bytecode_byte_qstr+0x56>)
    9d34:	21ef      	movs	r1, #239	; 0xef
    9d36:	480f      	ldr	r0, [pc, #60]	; (9d74 <emit_write_bytecode_byte_qstr+0x5a>)
    9d38:	f011 fa40 	bl	1b1bc <__assert_func>
    byte *c = emit_get_cur_to_write_bytecode(emit, 3);
    9d3c:	2103      	movs	r1, #3
    9d3e:	68f8      	ldr	r0, [r7, #12]
    9d40:	f7ff feea 	bl	9b18 <emit_get_cur_to_write_bytecode>
    9d44:	6178      	str	r0, [r7, #20]
    c[0] = b;
    9d46:	697b      	ldr	r3, [r7, #20]
    9d48:	7afa      	ldrb	r2, [r7, #11]
    9d4a:	701a      	strb	r2, [r3, #0]
    c[1] = qst;
    9d4c:	697b      	ldr	r3, [r7, #20]
    9d4e:	3301      	adds	r3, #1
    9d50:	687a      	ldr	r2, [r7, #4]
    9d52:	b2d2      	uxtb	r2, r2
    9d54:	701a      	strb	r2, [r3, #0]
    c[2] = qst >> 8;
    9d56:	697b      	ldr	r3, [r7, #20]
    9d58:	3302      	adds	r3, #2
    9d5a:	687a      	ldr	r2, [r7, #4]
    9d5c:	0a12      	lsrs	r2, r2, #8
    9d5e:	b2d2      	uxtb	r2, r2
    9d60:	701a      	strb	r2, [r3, #0]
    #else
    emit_write_bytecode_byte_uint(emit, b, qst);
    #endif
}
    9d62:	bf00      	nop
    9d64:	3718      	adds	r7, #24
    9d66:	46bd      	mov	sp, r7
    9d68:	bd80      	pop	{r7, pc}
    9d6a:	bf00      	nop
    9d6c:	0001ef78 	.word	0x0001ef78
    9d70:	0001f198 	.word	0x0001f198
    9d74:	0001ef64 	.word	0x0001ef64

00009d78 <emit_write_bytecode_byte_obj>:

STATIC void emit_write_bytecode_byte_obj(emit_t *emit, byte b, mp_obj_t obj) {
    9d78:	b580      	push	{r7, lr}
    9d7a:	b084      	sub	sp, #16
    9d7c:	af00      	add	r7, sp, #0
    9d7e:	60f8      	str	r0, [r7, #12]
    9d80:	460b      	mov	r3, r1
    9d82:	607a      	str	r2, [r7, #4]
    9d84:	72fb      	strb	r3, [r7, #11]
    #if MICROPY_PERSISTENT_CODE
    emit_write_bytecode_byte_const(emit, b,
        emit->scope->num_pos_args + emit->scope->num_kwonly_args
    9d86:	68fb      	ldr	r3, [r7, #12]
    9d88:	68db      	ldr	r3, [r3, #12]
    9d8a:	8b5b      	ldrh	r3, [r3, #26]
    9d8c:	461a      	mov	r2, r3
    9d8e:	68fb      	ldr	r3, [r7, #12]
    9d90:	68db      	ldr	r3, [r3, #12]
    9d92:	8b9b      	ldrh	r3, [r3, #28]
    9d94:	441a      	add	r2, r3
        + emit->ct_cur_obj++, (mp_uint_t)obj);
    9d96:	68fb      	ldr	r3, [r7, #12]
    9d98:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
    9d9a:	1c59      	adds	r1, r3, #1
    9d9c:	b288      	uxth	r0, r1
    9d9e:	68f9      	ldr	r1, [r7, #12]
    9da0:	8688      	strh	r0, [r1, #52]	; 0x34
    9da2:	4413      	add	r3, r2
    emit_write_bytecode_byte_const(emit, b,
    9da4:	461a      	mov	r2, r3
    9da6:	687b      	ldr	r3, [r7, #4]
    9da8:	7af9      	ldrb	r1, [r7, #11]
    9daa:	68f8      	ldr	r0, [r7, #12]
    9dac:	f7ff ff98 	bl	9ce0 <emit_write_bytecode_byte_const>
    mp_obj_t *c = (mp_obj_t*)emit_get_cur_to_write_bytecode(emit, sizeof(mp_obj_t));
    // Verify thar c is already uint-aligned
    assert(c == MP_ALIGN(c, sizeof(mp_obj_t)));
    *c = obj;
    #endif
}
    9db0:	bf00      	nop
    9db2:	3710      	adds	r7, #16
    9db4:	46bd      	mov	sp, r7
    9db6:	bd80      	pop	{r7, pc}

00009db8 <emit_write_bytecode_byte_raw_code>:

STATIC void emit_write_bytecode_byte_raw_code(emit_t *emit, byte b, mp_raw_code_t *rc) {
    9db8:	b580      	push	{r7, lr}
    9dba:	b084      	sub	sp, #16
    9dbc:	af00      	add	r7, sp, #0
    9dbe:	60f8      	str	r0, [r7, #12]
    9dc0:	460b      	mov	r3, r1
    9dc2:	607a      	str	r2, [r7, #4]
    9dc4:	72fb      	strb	r3, [r7, #11]
    #if MICROPY_PERSISTENT_CODE
    emit_write_bytecode_byte_const(emit, b,
        emit->scope->num_pos_args + emit->scope->num_kwonly_args
    9dc6:	68fb      	ldr	r3, [r7, #12]
    9dc8:	68db      	ldr	r3, [r3, #12]
    9dca:	8b5b      	ldrh	r3, [r3, #26]
    9dcc:	461a      	mov	r2, r3
    9dce:	68fb      	ldr	r3, [r7, #12]
    9dd0:	68db      	ldr	r3, [r3, #12]
    9dd2:	8b9b      	ldrh	r3, [r3, #28]
    9dd4:	4413      	add	r3, r2
        + emit->ct_num_obj + emit->ct_cur_raw_code++, (mp_uint_t)(uintptr_t)rc);
    9dd6:	68fa      	ldr	r2, [r7, #12]
    9dd8:	8ed2      	ldrh	r2, [r2, #54]	; 0x36
    9dda:	441a      	add	r2, r3
    9ddc:	68fb      	ldr	r3, [r7, #12]
    9dde:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
    9de0:	1c59      	adds	r1, r3, #1
    9de2:	b288      	uxth	r0, r1
    9de4:	68f9      	ldr	r1, [r7, #12]
    9de6:	8708      	strh	r0, [r1, #56]	; 0x38
    9de8:	4413      	add	r3, r2
    emit_write_bytecode_byte_const(emit, b,
    9dea:	461a      	mov	r2, r3
    9dec:	687b      	ldr	r3, [r7, #4]
    9dee:	7af9      	ldrb	r1, [r7, #11]
    9df0:	68f8      	ldr	r0, [r7, #12]
    9df2:	f7ff ff75 	bl	9ce0 <emit_write_bytecode_byte_const>
    void **c = (void**)emit_get_cur_to_write_bytecode(emit, sizeof(void*));
    // Verify thar c is already uint-aligned
    assert(c == MP_ALIGN(c, sizeof(void*)));
    *c = rc;
    #endif
}
    9df6:	bf00      	nop
    9df8:	3710      	adds	r7, #16
    9dfa:	46bd      	mov	sp, r7
    9dfc:	bd80      	pop	{r7, pc}

00009dfe <emit_write_bytecode_byte_unsigned_label>:

// unsigned labels are relative to ip following this instruction, stored as 16 bits
STATIC void emit_write_bytecode_byte_unsigned_label(emit_t *emit, byte b1, mp_uint_t label) {
    9dfe:	b580      	push	{r7, lr}
    9e00:	b086      	sub	sp, #24
    9e02:	af00      	add	r7, sp, #0
    9e04:	60f8      	str	r0, [r7, #12]
    9e06:	460b      	mov	r3, r1
    9e08:	607a      	str	r2, [r7, #4]
    9e0a:	72fb      	strb	r3, [r7, #11]
    mp_uint_t bytecode_offset;
    if (emit->pass < MP_PASS_EMIT) {
    9e0c:	68fb      	ldr	r3, [r7, #12]
    9e0e:	795b      	ldrb	r3, [r3, #5]
    9e10:	2b03      	cmp	r3, #3
    9e12:	d802      	bhi.n	9e1a <emit_write_bytecode_byte_unsigned_label+0x1c>
        bytecode_offset = 0;
    9e14:	2300      	movs	r3, #0
    9e16:	617b      	str	r3, [r7, #20]
    9e18:	e00a      	b.n	9e30 <emit_write_bytecode_byte_unsigned_label+0x32>
    } else {
        bytecode_offset = emit->label_offsets[label] - emit->bytecode_offset - 3;
    9e1a:	68fb      	ldr	r3, [r7, #12]
    9e1c:	69da      	ldr	r2, [r3, #28]
    9e1e:	687b      	ldr	r3, [r7, #4]
    9e20:	009b      	lsls	r3, r3, #2
    9e22:	4413      	add	r3, r2
    9e24:	681a      	ldr	r2, [r3, #0]
    9e26:	68fb      	ldr	r3, [r7, #12]
    9e28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    9e2a:	1ad3      	subs	r3, r2, r3
    9e2c:	3b03      	subs	r3, #3
    9e2e:	617b      	str	r3, [r7, #20]
    }
    byte *c = emit_get_cur_to_write_bytecode(emit, 3);
    9e30:	2103      	movs	r1, #3
    9e32:	68f8      	ldr	r0, [r7, #12]
    9e34:	f7ff fe70 	bl	9b18 <emit_get_cur_to_write_bytecode>
    9e38:	6138      	str	r0, [r7, #16]
    c[0] = b1;
    9e3a:	693b      	ldr	r3, [r7, #16]
    9e3c:	7afa      	ldrb	r2, [r7, #11]
    9e3e:	701a      	strb	r2, [r3, #0]
    c[1] = bytecode_offset;
    9e40:	693b      	ldr	r3, [r7, #16]
    9e42:	3301      	adds	r3, #1
    9e44:	697a      	ldr	r2, [r7, #20]
    9e46:	b2d2      	uxtb	r2, r2
    9e48:	701a      	strb	r2, [r3, #0]
    c[2] = bytecode_offset >> 8;
    9e4a:	693b      	ldr	r3, [r7, #16]
    9e4c:	3302      	adds	r3, #2
    9e4e:	697a      	ldr	r2, [r7, #20]
    9e50:	0a12      	lsrs	r2, r2, #8
    9e52:	b2d2      	uxtb	r2, r2
    9e54:	701a      	strb	r2, [r3, #0]
}
    9e56:	bf00      	nop
    9e58:	3718      	adds	r7, #24
    9e5a:	46bd      	mov	sp, r7
    9e5c:	bd80      	pop	{r7, pc}

00009e5e <emit_write_bytecode_byte_signed_label>:

// signed labels are relative to ip following this instruction, stored as 16 bits, in excess
STATIC void emit_write_bytecode_byte_signed_label(emit_t *emit, byte b1, mp_uint_t label) {
    9e5e:	b580      	push	{r7, lr}
    9e60:	b086      	sub	sp, #24
    9e62:	af00      	add	r7, sp, #0
    9e64:	60f8      	str	r0, [r7, #12]
    9e66:	460b      	mov	r3, r1
    9e68:	607a      	str	r2, [r7, #4]
    9e6a:	72fb      	strb	r3, [r7, #11]
    int bytecode_offset;
    if (emit->pass < MP_PASS_EMIT) {
    9e6c:	68fb      	ldr	r3, [r7, #12]
    9e6e:	795b      	ldrb	r3, [r3, #5]
    9e70:	2b03      	cmp	r3, #3
    9e72:	d802      	bhi.n	9e7a <emit_write_bytecode_byte_signed_label+0x1c>
        bytecode_offset = 0;
    9e74:	2300      	movs	r3, #0
    9e76:	617b      	str	r3, [r7, #20]
    9e78:	e00c      	b.n	9e94 <emit_write_bytecode_byte_signed_label+0x36>
    } else {
        bytecode_offset = emit->label_offsets[label] - emit->bytecode_offset - 3 + 0x8000;
    9e7a:	68fb      	ldr	r3, [r7, #12]
    9e7c:	69da      	ldr	r2, [r3, #28]
    9e7e:	687b      	ldr	r3, [r7, #4]
    9e80:	009b      	lsls	r3, r3, #2
    9e82:	4413      	add	r3, r2
    9e84:	681a      	ldr	r2, [r3, #0]
    9e86:	68fb      	ldr	r3, [r7, #12]
    9e88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    9e8a:	1ad3      	subs	r3, r2, r3
    9e8c:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
    9e90:	337d      	adds	r3, #125	; 0x7d
    9e92:	617b      	str	r3, [r7, #20]
    }
    byte *c = emit_get_cur_to_write_bytecode(emit, 3);
    9e94:	2103      	movs	r1, #3
    9e96:	68f8      	ldr	r0, [r7, #12]
    9e98:	f7ff fe3e 	bl	9b18 <emit_get_cur_to_write_bytecode>
    9e9c:	6138      	str	r0, [r7, #16]
    c[0] = b1;
    9e9e:	693b      	ldr	r3, [r7, #16]
    9ea0:	7afa      	ldrb	r2, [r7, #11]
    9ea2:	701a      	strb	r2, [r3, #0]
    c[1] = bytecode_offset;
    9ea4:	693b      	ldr	r3, [r7, #16]
    9ea6:	3301      	adds	r3, #1
    9ea8:	697a      	ldr	r2, [r7, #20]
    9eaa:	b2d2      	uxtb	r2, r2
    9eac:	701a      	strb	r2, [r3, #0]
    c[2] = bytecode_offset >> 8;
    9eae:	693b      	ldr	r3, [r7, #16]
    9eb0:	3302      	adds	r3, #2
    9eb2:	697a      	ldr	r2, [r7, #20]
    9eb4:	1212      	asrs	r2, r2, #8
    9eb6:	b2d2      	uxtb	r2, r2
    9eb8:	701a      	strb	r2, [r3, #0]
}
    9eba:	bf00      	nop
    9ebc:	3718      	adds	r7, #24
    9ebe:	46bd      	mov	sp, r7
    9ec0:	bd80      	pop	{r7, pc}

00009ec2 <mp_emit_bc_start_pass>:

void mp_emit_bc_start_pass(emit_t *emit, pass_kind_t pass, scope_t *scope) {
    9ec2:	b580      	push	{r7, lr}
    9ec4:	b08c      	sub	sp, #48	; 0x30
    9ec6:	af00      	add	r7, sp, #0
    9ec8:	60f8      	str	r0, [r7, #12]
    9eca:	60b9      	str	r1, [r7, #8]
    9ecc:	607a      	str	r2, [r7, #4]
    emit->pass = pass;
    9ece:	68bb      	ldr	r3, [r7, #8]
    9ed0:	b2da      	uxtb	r2, r3
    9ed2:	68fb      	ldr	r3, [r7, #12]
    9ed4:	715a      	strb	r2, [r3, #5]
    emit->stack_size = 0;
    9ed6:	68fb      	ldr	r3, [r7, #12]
    9ed8:	2200      	movs	r2, #0
    9eda:	609a      	str	r2, [r3, #8]
    emit->last_emit_was_return_value = false;
    9edc:	68fb      	ldr	r3, [r7, #12]
    9ede:	2200      	movs	r2, #0
    9ee0:	719a      	strb	r2, [r3, #6]
    emit->scope = scope;
    9ee2:	68fb      	ldr	r3, [r7, #12]
    9ee4:	687a      	ldr	r2, [r7, #4]
    9ee6:	60da      	str	r2, [r3, #12]
    emit->last_source_line_offset = 0;
    9ee8:	68fb      	ldr	r3, [r7, #12]
    9eea:	2200      	movs	r2, #0
    9eec:	611a      	str	r2, [r3, #16]
    emit->last_source_line = 1;
    9eee:	68fb      	ldr	r3, [r7, #12]
    9ef0:	2201      	movs	r2, #1
    9ef2:	615a      	str	r2, [r3, #20]
    #ifndef NDEBUG
    // With debugging enabled labels are checked for unique assignment
    if (pass < MP_PASS_EMIT && emit->label_offsets != NULL) {
    9ef4:	68bb      	ldr	r3, [r7, #8]
    9ef6:	2b03      	cmp	r3, #3
    9ef8:	d80d      	bhi.n	9f16 <mp_emit_bc_start_pass+0x54>
    9efa:	68fb      	ldr	r3, [r7, #12]
    9efc:	69db      	ldr	r3, [r3, #28]
    9efe:	2b00      	cmp	r3, #0
    9f00:	d009      	beq.n	9f16 <mp_emit_bc_start_pass+0x54>
        memset(emit->label_offsets, -1, emit->max_num_labels * sizeof(mp_uint_t));
    9f02:	68fb      	ldr	r3, [r7, #12]
    9f04:	69d8      	ldr	r0, [r3, #28]
    9f06:	68fb      	ldr	r3, [r7, #12]
    9f08:	699b      	ldr	r3, [r3, #24]
    9f0a:	009b      	lsls	r3, r3, #2
    9f0c:	461a      	mov	r2, r3
    9f0e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    9f12:	f011 fdf1 	bl	1baf8 <memset>
    }
    #endif
    emit->bytecode_offset = 0;
    9f16:	68fb      	ldr	r3, [r7, #12]
    9f18:	2200      	movs	r2, #0
    9f1a:	629a      	str	r2, [r3, #40]	; 0x28
    emit->code_info_offset = 0;
    9f1c:	68fb      	ldr	r3, [r7, #12]
    9f1e:	2200      	movs	r2, #0
    9f20:	621a      	str	r2, [r3, #32]

    // Write local state size and exception stack size.
    {
        mp_uint_t n_state = scope->num_locals + scope->stack_size;
    9f22:	687b      	ldr	r3, [r7, #4]
    9f24:	8c1b      	ldrh	r3, [r3, #32]
    9f26:	461a      	mov	r2, r3
    9f28:	687b      	ldr	r3, [r7, #4]
    9f2a:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
    9f2c:	4413      	add	r3, r2
    9f2e:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (n_state == 0) {
    9f30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    9f32:	2b00      	cmp	r3, #0
    9f34:	d101      	bne.n	9f3a <mp_emit_bc_start_pass+0x78>
            // Need at least 1 entry in the state, in the case an exception is
            // propagated through this function, the exception is returned in
            // the highest slot in the state (fastn[0], see vm.c).
            n_state = 1;
    9f36:	2301      	movs	r3, #1
    9f38:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        emit_write_code_info_uint(emit, n_state);
    9f3a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
    9f3c:	68f8      	ldr	r0, [r7, #12]
    9f3e:	f7ff fdb2 	bl	9aa6 <emit_write_code_info_uint>
        emit_write_code_info_uint(emit, scope->exc_stack_size);
    9f42:	687b      	ldr	r3, [r7, #4]
    9f44:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
    9f46:	4619      	mov	r1, r3
    9f48:	68f8      	ldr	r0, [r7, #12]
    9f4a:	f7ff fdac 	bl	9aa6 <emit_write_code_info_uint>
    }

    // Write scope flags and number of arguments.
    // TODO check that num args all fit in a byte
    emit_write_code_info_byte(emit, emit->scope->scope_flags);
    9f4e:	68fb      	ldr	r3, [r7, #12]
    9f50:	68db      	ldr	r3, [r3, #12]
    9f52:	7e1b      	ldrb	r3, [r3, #24]
    9f54:	4619      	mov	r1, r3
    9f56:	68f8      	ldr	r0, [r7, #12]
    9f58:	f7ff fd94 	bl	9a84 <emit_write_code_info_byte>
    emit_write_code_info_byte(emit, emit->scope->num_pos_args);
    9f5c:	68fb      	ldr	r3, [r7, #12]
    9f5e:	68db      	ldr	r3, [r3, #12]
    9f60:	8b5b      	ldrh	r3, [r3, #26]
    9f62:	b2db      	uxtb	r3, r3
    9f64:	4619      	mov	r1, r3
    9f66:	68f8      	ldr	r0, [r7, #12]
    9f68:	f7ff fd8c 	bl	9a84 <emit_write_code_info_byte>
    emit_write_code_info_byte(emit, emit->scope->num_kwonly_args);
    9f6c:	68fb      	ldr	r3, [r7, #12]
    9f6e:	68db      	ldr	r3, [r3, #12]
    9f70:	8b9b      	ldrh	r3, [r3, #28]
    9f72:	b2db      	uxtb	r3, r3
    9f74:	4619      	mov	r1, r3
    9f76:	68f8      	ldr	r0, [r7, #12]
    9f78:	f7ff fd84 	bl	9a84 <emit_write_code_info_byte>
    emit_write_code_info_byte(emit, emit->scope->num_def_pos_args);
    9f7c:	68fb      	ldr	r3, [r7, #12]
    9f7e:	68db      	ldr	r3, [r3, #12]
    9f80:	8bdb      	ldrh	r3, [r3, #30]
    9f82:	b2db      	uxtb	r3, r3
    9f84:	4619      	mov	r1, r3
    9f86:	68f8      	ldr	r0, [r7, #12]
    9f88:	f7ff fd7c 	bl	9a84 <emit_write_code_info_byte>

    // Write size of the rest of the code info.  We don't know how big this
    // variable uint will be on the MP_PASS_CODE_SIZE pass so we reserve 2 bytes
    // for it and hope that is enough!  TODO assert this or something.
    if (pass == MP_PASS_EMIT) {
    9f8c:	68bb      	ldr	r3, [r7, #8]
    9f8e:	2b04      	cmp	r3, #4
    9f90:	d109      	bne.n	9fa6 <mp_emit_bc_start_pass+0xe4>
        emit_write_code_info_uint(emit, emit->code_info_size - emit->code_info_offset);
    9f92:	68fb      	ldr	r3, [r7, #12]
    9f94:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    9f96:	68fb      	ldr	r3, [r7, #12]
    9f98:	6a1b      	ldr	r3, [r3, #32]
    9f9a:	1ad3      	subs	r3, r2, r3
    9f9c:	4619      	mov	r1, r3
    9f9e:	68f8      	ldr	r0, [r7, #12]
    9fa0:	f7ff fd81 	bl	9aa6 <emit_write_code_info_uint>
    9fa4:	e003      	b.n	9fae <mp_emit_bc_start_pass+0xec>
    } else  {
        emit_get_cur_to_write_code_info(emit, 2);
    9fa6:	2102      	movs	r1, #2
    9fa8:	68f8      	ldr	r0, [r7, #12]
    9faa:	f7ff fd35 	bl	9a18 <emit_get_cur_to_write_code_info>
    }

    // Write the name and source file of this function.
    emit_write_code_info_qstr(emit, scope->simple_name);
    9fae:	687b      	ldr	r3, [r7, #4]
    9fb0:	8a5b      	ldrh	r3, [r3, #18]
    9fb2:	4619      	mov	r1, r3
    9fb4:	68f8      	ldr	r0, [r7, #12]
    9fb6:	f7ff fd87 	bl	9ac8 <emit_write_code_info_qstr>
    emit_write_code_info_qstr(emit, scope->source_file);
    9fba:	687b      	ldr	r3, [r7, #4]
    9fbc:	8a1b      	ldrh	r3, [r3, #16]
    9fbe:	4619      	mov	r1, r3
    9fc0:	68f8      	ldr	r0, [r7, #12]
    9fc2:	f7ff fd81 	bl	9ac8 <emit_write_code_info_qstr>

    // bytecode prelude: initialise closed over variables
    for (int i = 0; i < scope->id_info_len; i++) {
    9fc6:	2300      	movs	r3, #0
    9fc8:	62bb      	str	r3, [r7, #40]	; 0x28
    9fca:	e01e      	b.n	a00a <mp_emit_bc_start_pass+0x148>
        id_info_t *id = &scope->id_info[i];
    9fcc:	687b      	ldr	r3, [r7, #4]
    9fce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    9fd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9fd2:	00db      	lsls	r3, r3, #3
    9fd4:	4413      	add	r3, r2
    9fd6:	61bb      	str	r3, [r7, #24]
        if (id->kind == ID_INFO_KIND_CELL) {
    9fd8:	69bb      	ldr	r3, [r7, #24]
    9fda:	781b      	ldrb	r3, [r3, #0]
    9fdc:	2b03      	cmp	r3, #3
    9fde:	d111      	bne.n	a004 <mp_emit_bc_start_pass+0x142>
            assert(id->local_num < 255);
    9fe0:	69bb      	ldr	r3, [r7, #24]
    9fe2:	885b      	ldrh	r3, [r3, #2]
    9fe4:	2bfe      	cmp	r3, #254	; 0xfe
    9fe6:	d906      	bls.n	9ff6 <mp_emit_bc_start_pass+0x134>
    9fe8:	4b32      	ldr	r3, [pc, #200]	; (a0b4 <mp_emit_bc_start_pass+0x1f2>)
    9fea:	4a33      	ldr	r2, [pc, #204]	; (a0b8 <mp_emit_bc_start_pass+0x1f6>)
    9fec:	f44f 71b5 	mov.w	r1, #362	; 0x16a
    9ff0:	4832      	ldr	r0, [pc, #200]	; (a0bc <mp_emit_bc_start_pass+0x1fa>)
    9ff2:	f011 f8e3 	bl	1b1bc <__assert_func>
            emit_write_bytecode_byte(emit, id->local_num); // write the local which should be converted to a cell
    9ff6:	69bb      	ldr	r3, [r7, #24]
    9ff8:	885b      	ldrh	r3, [r3, #2]
    9ffa:	b2db      	uxtb	r3, r3
    9ffc:	4619      	mov	r1, r3
    9ffe:	68f8      	ldr	r0, [r7, #12]
    a000:	f7ff fdc4 	bl	9b8c <emit_write_bytecode_byte>
    for (int i = 0; i < scope->id_info_len; i++) {
    a004:	6abb      	ldr	r3, [r7, #40]	; 0x28
    a006:	3301      	adds	r3, #1
    a008:	62bb      	str	r3, [r7, #40]	; 0x28
    a00a:	687b      	ldr	r3, [r7, #4]
    a00c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    a00e:	461a      	mov	r2, r3
    a010:	6abb      	ldr	r3, [r7, #40]	; 0x28
    a012:	429a      	cmp	r2, r3
    a014:	dcda      	bgt.n	9fcc <mp_emit_bc_start_pass+0x10a>
        }
    }
    emit_write_bytecode_byte(emit, 255); // end of list sentinel
    a016:	21ff      	movs	r1, #255	; 0xff
    a018:	68f8      	ldr	r0, [r7, #12]
    a01a:	f7ff fdb7 	bl	9b8c <emit_write_bytecode_byte>

    #if MICROPY_PERSISTENT_CODE
    emit->ct_cur_obj = 0;
    a01e:	68fb      	ldr	r3, [r7, #12]
    a020:	2200      	movs	r2, #0
    a022:	869a      	strh	r2, [r3, #52]	; 0x34
    emit->ct_cur_raw_code = 0;
    a024:	68fb      	ldr	r3, [r7, #12]
    a026:	2200      	movs	r2, #0
    a028:	871a      	strh	r2, [r3, #56]	; 0x38
    #endif

    if (pass == MP_PASS_EMIT) {
    a02a:	68bb      	ldr	r3, [r7, #8]
    a02c:	2b04      	cmp	r3, #4
    a02e:	d13c      	bne.n	a0aa <mp_emit_bc_start_pass+0x1e8>
        // parameter we use "*" as its name (since no argument can ever be named
        // "*").  We could use a blank qstr but "*" is better for debugging.
        // Note: there is some wasted RAM here for the case of storing a qstr
        // for each closed-over variable, and maybe there is a better way to do
        // it, but that would require changes to mp_setup_code_state.
        for (int i = 0; i < scope->num_pos_args + scope->num_kwonly_args; i++) {
    a030:	2300      	movs	r3, #0
    a032:	627b      	str	r3, [r7, #36]	; 0x24
    a034:	e030      	b.n	a098 <mp_emit_bc_start_pass+0x1d6>
            qstr qst = MP_QSTR__star_;
    a036:	2326      	movs	r3, #38	; 0x26
    a038:	623b      	str	r3, [r7, #32]
            for (int j = 0; j < scope->id_info_len; ++j) {
    a03a:	2300      	movs	r3, #0
    a03c:	61fb      	str	r3, [r7, #28]
    a03e:	e018      	b.n	a072 <mp_emit_bc_start_pass+0x1b0>
                id_info_t *id = &scope->id_info[j];
    a040:	687b      	ldr	r3, [r7, #4]
    a042:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    a044:	69fb      	ldr	r3, [r7, #28]
    a046:	00db      	lsls	r3, r3, #3
    a048:	4413      	add	r3, r2
    a04a:	617b      	str	r3, [r7, #20]
                if ((id->flags & ID_FLAG_IS_PARAM) && id->local_num == i) {
    a04c:	697b      	ldr	r3, [r7, #20]
    a04e:	785b      	ldrb	r3, [r3, #1]
    a050:	f003 0301 	and.w	r3, r3, #1
    a054:	2b00      	cmp	r3, #0
    a056:	d009      	beq.n	a06c <mp_emit_bc_start_pass+0x1aa>
    a058:	697b      	ldr	r3, [r7, #20]
    a05a:	885b      	ldrh	r3, [r3, #2]
    a05c:	461a      	mov	r2, r3
    a05e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    a060:	429a      	cmp	r2, r3
    a062:	d103      	bne.n	a06c <mp_emit_bc_start_pass+0x1aa>
                    qst = id->qst;
    a064:	697b      	ldr	r3, [r7, #20]
    a066:	685b      	ldr	r3, [r3, #4]
    a068:	623b      	str	r3, [r7, #32]
                    break;
    a06a:	e008      	b.n	a07e <mp_emit_bc_start_pass+0x1bc>
            for (int j = 0; j < scope->id_info_len; ++j) {
    a06c:	69fb      	ldr	r3, [r7, #28]
    a06e:	3301      	adds	r3, #1
    a070:	61fb      	str	r3, [r7, #28]
    a072:	687b      	ldr	r3, [r7, #4]
    a074:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    a076:	461a      	mov	r2, r3
    a078:	69fb      	ldr	r3, [r7, #28]
    a07a:	429a      	cmp	r2, r3
    a07c:	dce0      	bgt.n	a040 <mp_emit_bc_start_pass+0x17e>
                }
            }
            emit->const_table[i] = (mp_uint_t)MP_OBJ_NEW_QSTR(qst);
    a07e:	68fb      	ldr	r3, [r7, #12]
    a080:	6bda      	ldr	r2, [r3, #60]	; 0x3c
    a082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    a084:	009b      	lsls	r3, r3, #2
    a086:	4413      	add	r3, r2
    a088:	6a3a      	ldr	r2, [r7, #32]
    a08a:	0092      	lsls	r2, r2, #2
    a08c:	f042 0202 	orr.w	r2, r2, #2
    a090:	601a      	str	r2, [r3, #0]
        for (int i = 0; i < scope->num_pos_args + scope->num_kwonly_args; i++) {
    a092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    a094:	3301      	adds	r3, #1
    a096:	627b      	str	r3, [r7, #36]	; 0x24
    a098:	687b      	ldr	r3, [r7, #4]
    a09a:	8b5b      	ldrh	r3, [r3, #26]
    a09c:	461a      	mov	r2, r3
    a09e:	687b      	ldr	r3, [r7, #4]
    a0a0:	8b9b      	ldrh	r3, [r3, #28]
    a0a2:	441a      	add	r2, r3
    a0a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    a0a6:	429a      	cmp	r2, r3
    a0a8:	dcc5      	bgt.n	a036 <mp_emit_bc_start_pass+0x174>
        }
    }
}
    a0aa:	bf00      	nop
    a0ac:	3730      	adds	r7, #48	; 0x30
    a0ae:	46bd      	mov	sp, r7
    a0b0:	bd80      	pop	{r7, pc}
    a0b2:	bf00      	nop
    a0b4:	0001efd0 	.word	0x0001efd0
    a0b8:	0001f1b8 	.word	0x0001f1b8
    a0bc:	0001ef64 	.word	0x0001ef64

0000a0c0 <mp_emit_bc_end_pass>:

void mp_emit_bc_end_pass(emit_t *emit) {
    a0c0:	b580      	push	{r7, lr}
    a0c2:	b082      	sub	sp, #8
    a0c4:	af00      	add	r7, sp, #0
    a0c6:	6078      	str	r0, [r7, #4]
    if (emit->pass == MP_PASS_SCOPE) {
    a0c8:	687b      	ldr	r3, [r7, #4]
    a0ca:	795b      	ldrb	r3, [r3, #5]
    a0cc:	2b01      	cmp	r3, #1
    a0ce:	d061      	beq.n	a194 <mp_emit_bc_end_pass+0xd4>
        return;
    }

    // check stack is back to zero size
    assert(emit->stack_size == 0);
    a0d0:	687b      	ldr	r3, [r7, #4]
    a0d2:	689b      	ldr	r3, [r3, #8]
    a0d4:	2b00      	cmp	r3, #0
    a0d6:	d006      	beq.n	a0e6 <mp_emit_bc_end_pass+0x26>
    a0d8:	4b30      	ldr	r3, [pc, #192]	; (a19c <mp_emit_bc_end_pass+0xdc>)
    a0da:	4a31      	ldr	r2, [pc, #196]	; (a1a0 <mp_emit_bc_end_pass+0xe0>)
    a0dc:	f240 1199 	movw	r1, #409	; 0x199
    a0e0:	4830      	ldr	r0, [pc, #192]	; (a1a4 <mp_emit_bc_end_pass+0xe4>)
    a0e2:	f011 f86b 	bl	1b1bc <__assert_func>

    emit_write_code_info_byte(emit, 0); // end of line number info
    a0e6:	2100      	movs	r1, #0
    a0e8:	6878      	ldr	r0, [r7, #4]
    a0ea:	f7ff fccb 	bl	9a84 <emit_write_code_info_byte>

    #if MICROPY_PERSISTENT_CODE
    assert(emit->pass <= MP_PASS_STACK_SIZE || (emit->ct_num_obj == emit->ct_cur_obj));
    a0ee:	687b      	ldr	r3, [r7, #4]
    a0f0:	795b      	ldrb	r3, [r3, #5]
    a0f2:	2b02      	cmp	r3, #2
    a0f4:	d90c      	bls.n	a110 <mp_emit_bc_end_pass+0x50>
    a0f6:	687b      	ldr	r3, [r7, #4]
    a0f8:	8eda      	ldrh	r2, [r3, #54]	; 0x36
    a0fa:	687b      	ldr	r3, [r7, #4]
    a0fc:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
    a0fe:	429a      	cmp	r2, r3
    a100:	d006      	beq.n	a110 <mp_emit_bc_end_pass+0x50>
    a102:	4b29      	ldr	r3, [pc, #164]	; (a1a8 <mp_emit_bc_end_pass+0xe8>)
    a104:	4a26      	ldr	r2, [pc, #152]	; (a1a0 <mp_emit_bc_end_pass+0xe0>)
    a106:	f44f 71cf 	mov.w	r1, #414	; 0x19e
    a10a:	4826      	ldr	r0, [pc, #152]	; (a1a4 <mp_emit_bc_end_pass+0xe4>)
    a10c:	f011 f856 	bl	1b1bc <__assert_func>
    emit->ct_num_obj = emit->ct_cur_obj;
    a110:	687b      	ldr	r3, [r7, #4]
    a112:	8e9a      	ldrh	r2, [r3, #52]	; 0x34
    a114:	687b      	ldr	r3, [r7, #4]
    a116:	86da      	strh	r2, [r3, #54]	; 0x36
    #endif

    if (emit->pass == MP_PASS_CODE_SIZE) {
    a118:	687b      	ldr	r3, [r7, #4]
    a11a:	795b      	ldrb	r3, [r3, #5]
    a11c:	2b03      	cmp	r3, #3
    a11e:	d128      	bne.n	a172 <mp_emit_bc_end_pass+0xb2>
        // so bytecode is aligned
        emit->code_info_offset = (size_t)MP_ALIGN(emit->code_info_offset, sizeof(mp_uint_t));
        #endif

        // calculate size of total code-info + bytecode, in bytes
        emit->code_info_size = emit->code_info_offset;
    a120:	687b      	ldr	r3, [r7, #4]
    a122:	6a1a      	ldr	r2, [r3, #32]
    a124:	687b      	ldr	r3, [r7, #4]
    a126:	625a      	str	r2, [r3, #36]	; 0x24
        emit->bytecode_size = emit->bytecode_offset;
    a128:	687b      	ldr	r3, [r7, #4]
    a12a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    a12c:	687b      	ldr	r3, [r7, #4]
    a12e:	62da      	str	r2, [r3, #44]	; 0x2c
        emit->code_base = m_new0(byte, emit->code_info_size + emit->bytecode_size);
    a130:	687b      	ldr	r3, [r7, #4]
    a132:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    a134:	687b      	ldr	r3, [r7, #4]
    a136:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    a138:	4413      	add	r3, r2
    a13a:	4618      	mov	r0, r3
    a13c:	f7f6 f913 	bl	366 <m_malloc0>
    a140:	4602      	mov	r2, r0
    a142:	687b      	ldr	r3, [r7, #4]
    a144:	631a      	str	r2, [r3, #48]	; 0x30

        #if MICROPY_PERSISTENT_CODE
        emit->const_table = m_new0(mp_uint_t,
    a146:	687b      	ldr	r3, [r7, #4]
    a148:	68db      	ldr	r3, [r3, #12]
    a14a:	8b5b      	ldrh	r3, [r3, #26]
    a14c:	461a      	mov	r2, r3
    a14e:	687b      	ldr	r3, [r7, #4]
    a150:	68db      	ldr	r3, [r3, #12]
    a152:	8b9b      	ldrh	r3, [r3, #28]
    a154:	4413      	add	r3, r2
    a156:	687a      	ldr	r2, [r7, #4]
    a158:	8e92      	ldrh	r2, [r2, #52]	; 0x34
    a15a:	4413      	add	r3, r2
    a15c:	687a      	ldr	r2, [r7, #4]
    a15e:	8f12      	ldrh	r2, [r2, #56]	; 0x38
    a160:	4413      	add	r3, r2
    a162:	009b      	lsls	r3, r3, #2
    a164:	4618      	mov	r0, r3
    a166:	f7f6 f8fe 	bl	366 <m_malloc0>
    a16a:	4602      	mov	r2, r0
    a16c:	687b      	ldr	r3, [r7, #4]
    a16e:	63da      	str	r2, [r3, #60]	; 0x3c
    a170:	e011      	b.n	a196 <mp_emit_bc_end_pass+0xd6>
        #else
        emit->const_table = m_new0(mp_uint_t,
            emit->scope->num_pos_args + emit->scope->num_kwonly_args);
        #endif

    } else if (emit->pass == MP_PASS_EMIT) {
    a172:	687b      	ldr	r3, [r7, #4]
    a174:	795b      	ldrb	r3, [r3, #5]
    a176:	2b04      	cmp	r3, #4
    a178:	d10d      	bne.n	a196 <mp_emit_bc_end_pass+0xd6>
        mp_emit_glue_assign_bytecode(emit->scope->raw_code, emit->code_base,
    a17a:	687b      	ldr	r3, [r7, #4]
    a17c:	68db      	ldr	r3, [r3, #12]
    a17e:	6958      	ldr	r0, [r3, #20]
    a180:	687b      	ldr	r3, [r7, #4]
    a182:	6b19      	ldr	r1, [r3, #48]	; 0x30
            #if MICROPY_PERSISTENT_CODE_SAVE || MICROPY_DEBUG_PRINTERS
            emit->code_info_size + emit->bytecode_size,
            #endif
            emit->const_table,
    a184:	687b      	ldr	r3, [r7, #4]
    a186:	6bda      	ldr	r2, [r3, #60]	; 0x3c
            #if MICROPY_PERSISTENT_CODE_SAVE
            emit->ct_cur_obj, emit->ct_cur_raw_code,
            #endif
            emit->scope->scope_flags);
    a188:	687b      	ldr	r3, [r7, #4]
    a18a:	68db      	ldr	r3, [r3, #12]
    a18c:	7e1b      	ldrb	r3, [r3, #24]
        mp_emit_glue_assign_bytecode(emit->scope->raw_code, emit->code_base,
    a18e:	f001 f81b 	bl	b1c8 <mp_emit_glue_assign_bytecode>
    a192:	e000      	b.n	a196 <mp_emit_bc_end_pass+0xd6>
        return;
    a194:	bf00      	nop
    }
}
    a196:	3708      	adds	r7, #8
    a198:	46bd      	mov	sp, r7
    a19a:	bd80      	pop	{r7, pc}
    a19c:	0001efe4 	.word	0x0001efe4
    a1a0:	0001f1d0 	.word	0x0001f1d0
    a1a4:	0001ef64 	.word	0x0001ef64
    a1a8:	0001effc 	.word	0x0001effc

0000a1ac <mp_emit_bc_last_emit_was_return_value>:

bool mp_emit_bc_last_emit_was_return_value(emit_t *emit) {
    a1ac:	b480      	push	{r7}
    a1ae:	b083      	sub	sp, #12
    a1b0:	af00      	add	r7, sp, #0
    a1b2:	6078      	str	r0, [r7, #4]
    return emit->last_emit_was_return_value;
    a1b4:	687b      	ldr	r3, [r7, #4]
    a1b6:	799b      	ldrb	r3, [r3, #6]
    a1b8:	2b00      	cmp	r3, #0
    a1ba:	bf14      	ite	ne
    a1bc:	2301      	movne	r3, #1
    a1be:	2300      	moveq	r3, #0
    a1c0:	b2db      	uxtb	r3, r3
}
    a1c2:	4618      	mov	r0, r3
    a1c4:	370c      	adds	r7, #12
    a1c6:	46bd      	mov	sp, r7
    a1c8:	f85d 7b04 	ldr.w	r7, [sp], #4
    a1cc:	4770      	bx	lr

0000a1ce <mp_emit_bc_adjust_stack_size>:

void mp_emit_bc_adjust_stack_size(emit_t *emit, mp_int_t delta) {
    a1ce:	b580      	push	{r7, lr}
    a1d0:	b082      	sub	sp, #8
    a1d2:	af00      	add	r7, sp, #0
    a1d4:	6078      	str	r0, [r7, #4]
    a1d6:	6039      	str	r1, [r7, #0]
    if (emit->pass == MP_PASS_SCOPE) {
    a1d8:	687b      	ldr	r3, [r7, #4]
    a1da:	795b      	ldrb	r3, [r3, #5]
    a1dc:	2b01      	cmp	r3, #1
    a1de:	d023      	beq.n	a228 <mp_emit_bc_adjust_stack_size+0x5a>
        return;
    }
    assert((mp_int_t)emit->stack_size + delta >= 0);
    a1e0:	687b      	ldr	r3, [r7, #4]
    a1e2:	689a      	ldr	r2, [r3, #8]
    a1e4:	683b      	ldr	r3, [r7, #0]
    a1e6:	4413      	add	r3, r2
    a1e8:	2b00      	cmp	r3, #0
    a1ea:	da06      	bge.n	a1fa <mp_emit_bc_adjust_stack_size+0x2c>
    a1ec:	4b10      	ldr	r3, [pc, #64]	; (a230 <mp_emit_bc_adjust_stack_size+0x62>)
    a1ee:	4a11      	ldr	r2, [pc, #68]	; (a234 <mp_emit_bc_adjust_stack_size+0x66>)
    a1f0:	f240 11cb 	movw	r1, #459	; 0x1cb
    a1f4:	4810      	ldr	r0, [pc, #64]	; (a238 <mp_emit_bc_adjust_stack_size+0x6a>)
    a1f6:	f010 ffe1 	bl	1b1bc <__assert_func>
    emit->stack_size += delta;
    a1fa:	687b      	ldr	r3, [r7, #4]
    a1fc:	689a      	ldr	r2, [r3, #8]
    a1fe:	683b      	ldr	r3, [r7, #0]
    a200:	441a      	add	r2, r3
    a202:	687b      	ldr	r3, [r7, #4]
    a204:	609a      	str	r2, [r3, #8]
    if (emit->stack_size > emit->scope->stack_size) {
    a206:	687b      	ldr	r3, [r7, #4]
    a208:	689b      	ldr	r3, [r3, #8]
    a20a:	687a      	ldr	r2, [r7, #4]
    a20c:	68d2      	ldr	r2, [r2, #12]
    a20e:	8c52      	ldrh	r2, [r2, #34]	; 0x22
    a210:	4293      	cmp	r3, r2
    a212:	dd05      	ble.n	a220 <mp_emit_bc_adjust_stack_size+0x52>
        emit->scope->stack_size = emit->stack_size;
    a214:	687b      	ldr	r3, [r7, #4]
    a216:	68db      	ldr	r3, [r3, #12]
    a218:	687a      	ldr	r2, [r7, #4]
    a21a:	6892      	ldr	r2, [r2, #8]
    a21c:	b292      	uxth	r2, r2
    a21e:	845a      	strh	r2, [r3, #34]	; 0x22
    }
    emit->last_emit_was_return_value = false;
    a220:	687b      	ldr	r3, [r7, #4]
    a222:	2200      	movs	r2, #0
    a224:	719a      	strb	r2, [r3, #6]
    a226:	e000      	b.n	a22a <mp_emit_bc_adjust_stack_size+0x5c>
        return;
    a228:	bf00      	nop
}
    a22a:	3708      	adds	r7, #8
    a22c:	46bd      	mov	sp, r7
    a22e:	bd80      	pop	{r7, pc}
    a230:	0001f048 	.word	0x0001f048
    a234:	0001f1e4 	.word	0x0001f1e4
    a238:	0001ef64 	.word	0x0001ef64

0000a23c <emit_bc_pre>:

static inline void emit_bc_pre(emit_t *emit, mp_int_t stack_size_delta) {
    a23c:	b580      	push	{r7, lr}
    a23e:	b082      	sub	sp, #8
    a240:	af00      	add	r7, sp, #0
    a242:	6078      	str	r0, [r7, #4]
    a244:	6039      	str	r1, [r7, #0]
    mp_emit_bc_adjust_stack_size(emit, stack_size_delta);
    a246:	6839      	ldr	r1, [r7, #0]
    a248:	6878      	ldr	r0, [r7, #4]
    a24a:	f7ff ffc0 	bl	a1ce <mp_emit_bc_adjust_stack_size>
}
    a24e:	bf00      	nop
    a250:	3708      	adds	r7, #8
    a252:	46bd      	mov	sp, r7
    a254:	bd80      	pop	{r7, pc}

0000a256 <mp_emit_bc_set_source_line>:

void mp_emit_bc_set_source_line(emit_t *emit, mp_uint_t source_line) {
    a256:	b480      	push	{r7}
    a258:	b083      	sub	sp, #12
    a25a:	af00      	add	r7, sp, #0
    a25c:	6078      	str	r0, [r7, #4]
    a25e:	6039      	str	r1, [r7, #0]
    }
#else
    (void)emit;
    (void)source_line;
#endif
}
    a260:	bf00      	nop
    a262:	370c      	adds	r7, #12
    a264:	46bd      	mov	sp, r7
    a266:	f85d 7b04 	ldr.w	r7, [sp], #4
    a26a:	4770      	bx	lr

0000a26c <mp_emit_bc_label_assign>:

void mp_emit_bc_label_assign(emit_t *emit, mp_uint_t l) {
    a26c:	b580      	push	{r7, lr}
    a26e:	b082      	sub	sp, #8
    a270:	af00      	add	r7, sp, #0
    a272:	6078      	str	r0, [r7, #4]
    a274:	6039      	str	r1, [r7, #0]
    emit_bc_pre(emit, 0);
    a276:	2100      	movs	r1, #0
    a278:	6878      	ldr	r0, [r7, #4]
    a27a:	f7ff ffdf 	bl	a23c <emit_bc_pre>
    if (emit->pass == MP_PASS_SCOPE) {
    a27e:	687b      	ldr	r3, [r7, #4]
    a280:	795b      	ldrb	r3, [r3, #5]
    a282:	2b01      	cmp	r3, #1
    a284:	d039      	beq.n	a2fa <mp_emit_bc_label_assign+0x8e>
        return;
    }
    assert(l < emit->max_num_labels);
    a286:	687b      	ldr	r3, [r7, #4]
    a288:	699a      	ldr	r2, [r3, #24]
    a28a:	683b      	ldr	r3, [r7, #0]
    a28c:	429a      	cmp	r2, r3
    a28e:	d806      	bhi.n	a29e <mp_emit_bc_label_assign+0x32>
    a290:	4b1c      	ldr	r3, [pc, #112]	; (a304 <mp_emit_bc_label_assign+0x98>)
    a292:	4a1d      	ldr	r2, [pc, #116]	; (a308 <mp_emit_bc_label_assign+0x9c>)
    a294:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
    a298:	481c      	ldr	r0, [pc, #112]	; (a30c <mp_emit_bc_label_assign+0xa0>)
    a29a:	f010 ff8f 	bl	1b1bc <__assert_func>
    if (emit->pass < MP_PASS_EMIT) {
    a29e:	687b      	ldr	r3, [r7, #4]
    a2a0:	795b      	ldrb	r3, [r3, #5]
    a2a2:	2b03      	cmp	r3, #3
    a2a4:	d818      	bhi.n	a2d8 <mp_emit_bc_label_assign+0x6c>
        // assign label offset
        assert(emit->label_offsets[l] == (mp_uint_t)-1);
    a2a6:	687b      	ldr	r3, [r7, #4]
    a2a8:	69da      	ldr	r2, [r3, #28]
    a2aa:	683b      	ldr	r3, [r7, #0]
    a2ac:	009b      	lsls	r3, r3, #2
    a2ae:	4413      	add	r3, r2
    a2b0:	681b      	ldr	r3, [r3, #0]
    a2b2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    a2b6:	d006      	beq.n	a2c6 <mp_emit_bc_label_assign+0x5a>
    a2b8:	4b15      	ldr	r3, [pc, #84]	; (a310 <mp_emit_bc_label_assign+0xa4>)
    a2ba:	4a13      	ldr	r2, [pc, #76]	; (a308 <mp_emit_bc_label_assign+0x9c>)
    a2bc:	f240 11f3 	movw	r1, #499	; 0x1f3
    a2c0:	4812      	ldr	r0, [pc, #72]	; (a30c <mp_emit_bc_label_assign+0xa0>)
    a2c2:	f010 ff7b 	bl	1b1bc <__assert_func>
        emit->label_offsets[l] = emit->bytecode_offset;
    a2c6:	687b      	ldr	r3, [r7, #4]
    a2c8:	69da      	ldr	r2, [r3, #28]
    a2ca:	683b      	ldr	r3, [r7, #0]
    a2cc:	009b      	lsls	r3, r3, #2
    a2ce:	4413      	add	r3, r2
    a2d0:	687a      	ldr	r2, [r7, #4]
    a2d2:	6a92      	ldr	r2, [r2, #40]	; 0x28
    a2d4:	601a      	str	r2, [r3, #0]
    a2d6:	e011      	b.n	a2fc <mp_emit_bc_label_assign+0x90>
    } else {
        // ensure label offset has not changed from MP_PASS_CODE_SIZE to MP_PASS_EMIT
        assert(emit->label_offsets[l] == emit->bytecode_offset);
    a2d8:	687b      	ldr	r3, [r7, #4]
    a2da:	69da      	ldr	r2, [r3, #28]
    a2dc:	683b      	ldr	r3, [r7, #0]
    a2de:	009b      	lsls	r3, r3, #2
    a2e0:	4413      	add	r3, r2
    a2e2:	681a      	ldr	r2, [r3, #0]
    a2e4:	687b      	ldr	r3, [r7, #4]
    a2e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    a2e8:	429a      	cmp	r2, r3
    a2ea:	d007      	beq.n	a2fc <mp_emit_bc_label_assign+0x90>
    a2ec:	4b09      	ldr	r3, [pc, #36]	; (a314 <mp_emit_bc_label_assign+0xa8>)
    a2ee:	4a06      	ldr	r2, [pc, #24]	; (a308 <mp_emit_bc_label_assign+0x9c>)
    a2f0:	f240 11f7 	movw	r1, #503	; 0x1f7
    a2f4:	4805      	ldr	r0, [pc, #20]	; (a30c <mp_emit_bc_label_assign+0xa0>)
    a2f6:	f010 ff61 	bl	1b1bc <__assert_func>
        return;
    a2fa:	bf00      	nop
    }
}
    a2fc:	3708      	adds	r7, #8
    a2fe:	46bd      	mov	sp, r7
    a300:	bd80      	pop	{r7, pc}
    a302:	bf00      	nop
    a304:	0001f070 	.word	0x0001f070
    a308:	0001f204 	.word	0x0001f204
    a30c:	0001ef64 	.word	0x0001ef64
    a310:	0001f08c 	.word	0x0001f08c
    a314:	0001f0b4 	.word	0x0001f0b4

0000a318 <mp_emit_bc_import>:

void mp_emit_bc_import(emit_t *emit, qstr qst, int kind) {
    a318:	b580      	push	{r7, lr}
    a31a:	b084      	sub	sp, #16
    a31c:	af00      	add	r7, sp, #0
    a31e:	60f8      	str	r0, [r7, #12]
    a320:	60b9      	str	r1, [r7, #8]
    a322:	607a      	str	r2, [r7, #4]
    MP_STATIC_ASSERT(MP_BC_IMPORT_NAME + MP_EMIT_IMPORT_NAME == MP_BC_IMPORT_NAME);
    MP_STATIC_ASSERT(MP_BC_IMPORT_NAME + MP_EMIT_IMPORT_FROM == MP_BC_IMPORT_FROM);
    if (kind == MP_EMIT_IMPORT_FROM) {
    a324:	687b      	ldr	r3, [r7, #4]
    a326:	2b01      	cmp	r3, #1
    a328:	d104      	bne.n	a334 <mp_emit_bc_import+0x1c>
        emit_bc_pre(emit, 1);
    a32a:	2101      	movs	r1, #1
    a32c:	68f8      	ldr	r0, [r7, #12]
    a32e:	f7ff ff85 	bl	a23c <emit_bc_pre>
    a332:	e004      	b.n	a33e <mp_emit_bc_import+0x26>
    } else {
        emit_bc_pre(emit, -1);
    a334:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    a338:	68f8      	ldr	r0, [r7, #12]
    a33a:	f7ff ff7f 	bl	a23c <emit_bc_pre>
    }
    if (kind == MP_EMIT_IMPORT_STAR) {
    a33e:	687b      	ldr	r3, [r7, #4]
    a340:	2b02      	cmp	r3, #2
    a342:	d104      	bne.n	a34e <mp_emit_bc_import+0x36>
        emit_write_bytecode_byte(emit, MP_BC_IMPORT_STAR);
    a344:	216a      	movs	r1, #106	; 0x6a
    a346:	68f8      	ldr	r0, [r7, #12]
    a348:	f7ff fc20 	bl	9b8c <emit_write_bytecode_byte>
    } else {
        emit_write_bytecode_byte_qstr(emit, MP_BC_IMPORT_NAME + kind, qst);
    }
}
    a34c:	e008      	b.n	a360 <mp_emit_bc_import+0x48>
        emit_write_bytecode_byte_qstr(emit, MP_BC_IMPORT_NAME + kind, qst);
    a34e:	687b      	ldr	r3, [r7, #4]
    a350:	b2db      	uxtb	r3, r3
    a352:	3368      	adds	r3, #104	; 0x68
    a354:	b2db      	uxtb	r3, r3
    a356:	68ba      	ldr	r2, [r7, #8]
    a358:	4619      	mov	r1, r3
    a35a:	68f8      	ldr	r0, [r7, #12]
    a35c:	f7ff fcdd 	bl	9d1a <emit_write_bytecode_byte_qstr>
}
    a360:	bf00      	nop
    a362:	3710      	adds	r7, #16
    a364:	46bd      	mov	sp, r7
    a366:	bd80      	pop	{r7, pc}

0000a368 <mp_emit_bc_load_const_tok>:

void mp_emit_bc_load_const_tok(emit_t *emit, mp_token_kind_t tok) {
    a368:	b580      	push	{r7, lr}
    a36a:	b082      	sub	sp, #8
    a36c:	af00      	add	r7, sp, #0
    a36e:	6078      	str	r0, [r7, #4]
    a370:	6039      	str	r1, [r7, #0]
    emit_bc_pre(emit, 1);
    a372:	2101      	movs	r1, #1
    a374:	6878      	ldr	r0, [r7, #4]
    a376:	f7ff ff61 	bl	a23c <emit_bc_pre>
    switch (tok) {
    a37a:	683b      	ldr	r3, [r7, #0]
    a37c:	2b0e      	cmp	r3, #14
    a37e:	d008      	beq.n	a392 <mp_emit_bc_load_const_tok+0x2a>
    a380:	2b0f      	cmp	r3, #15
    a382:	d00b      	beq.n	a39c <mp_emit_bc_load_const_tok+0x34>
    a384:	2b0d      	cmp	r3, #13
    a386:	d10e      	bne.n	a3a6 <mp_emit_bc_load_const_tok+0x3e>
        case MP_TOKEN_KW_FALSE: emit_write_bytecode_byte(emit, MP_BC_LOAD_CONST_FALSE); break;
    a388:	2110      	movs	r1, #16
    a38a:	6878      	ldr	r0, [r7, #4]
    a38c:	f7ff fbfe 	bl	9b8c <emit_write_bytecode_byte>
    a390:	e019      	b.n	a3c6 <mp_emit_bc_load_const_tok+0x5e>
        case MP_TOKEN_KW_NONE: emit_write_bytecode_byte(emit, MP_BC_LOAD_CONST_NONE); break;
    a392:	2111      	movs	r1, #17
    a394:	6878      	ldr	r0, [r7, #4]
    a396:	f7ff fbf9 	bl	9b8c <emit_write_bytecode_byte>
    a39a:	e014      	b.n	a3c6 <mp_emit_bc_load_const_tok+0x5e>
        case MP_TOKEN_KW_TRUE: emit_write_bytecode_byte(emit, MP_BC_LOAD_CONST_TRUE); break;
    a39c:	2112      	movs	r1, #18
    a39e:	6878      	ldr	r0, [r7, #4]
    a3a0:	f7ff fbf4 	bl	9b8c <emit_write_bytecode_byte>
    a3a4:	e00f      	b.n	a3c6 <mp_emit_bc_load_const_tok+0x5e>
        default:
            assert(tok == MP_TOKEN_ELLIPSIS);
    a3a6:	683b      	ldr	r3, [r7, #0]
    a3a8:	2b0c      	cmp	r3, #12
    a3aa:	d006      	beq.n	a3ba <mp_emit_bc_load_const_tok+0x52>
    a3ac:	4b08      	ldr	r3, [pc, #32]	; (a3d0 <mp_emit_bc_load_const_tok+0x68>)
    a3ae:	4a09      	ldr	r2, [pc, #36]	; (a3d4 <mp_emit_bc_load_const_tok+0x6c>)
    a3b0:	f240 2111 	movw	r1, #529	; 0x211
    a3b4:	4808      	ldr	r0, [pc, #32]	; (a3d8 <mp_emit_bc_load_const_tok+0x70>)
    a3b6:	f010 ff01 	bl	1b1bc <__assert_func>
            emit_write_bytecode_byte_obj(emit, MP_BC_LOAD_CONST_OBJ, MP_OBJ_FROM_PTR(&mp_const_ellipsis_obj));
    a3ba:	4a08      	ldr	r2, [pc, #32]	; (a3dc <mp_emit_bc_load_const_tok+0x74>)
    a3bc:	2117      	movs	r1, #23
    a3be:	6878      	ldr	r0, [r7, #4]
    a3c0:	f7ff fcda 	bl	9d78 <emit_write_bytecode_byte_obj>
            break;
    a3c4:	bf00      	nop
    }
}
    a3c6:	bf00      	nop
    a3c8:	3708      	adds	r7, #8
    a3ca:	46bd      	mov	sp, r7
    a3cc:	bd80      	pop	{r7, pc}
    a3ce:	bf00      	nop
    a3d0:	0001f0e4 	.word	0x0001f0e4
    a3d4:	0001f21c 	.word	0x0001f21c
    a3d8:	0001ef64 	.word	0x0001ef64
    a3dc:	00021398 	.word	0x00021398

0000a3e0 <mp_emit_bc_load_const_small_int>:

void mp_emit_bc_load_const_small_int(emit_t *emit, mp_int_t arg) {
    a3e0:	b580      	push	{r7, lr}
    a3e2:	b082      	sub	sp, #8
    a3e4:	af00      	add	r7, sp, #0
    a3e6:	6078      	str	r0, [r7, #4]
    a3e8:	6039      	str	r1, [r7, #0]
    emit_bc_pre(emit, 1);
    a3ea:	2101      	movs	r1, #1
    a3ec:	6878      	ldr	r0, [r7, #4]
    a3ee:	f7ff ff25 	bl	a23c <emit_bc_pre>
    if (-16 <= arg && arg <= 47) {
    a3f2:	683b      	ldr	r3, [r7, #0]
    a3f4:	f113 0f10 	cmn.w	r3, #16
    a3f8:	db0b      	blt.n	a412 <mp_emit_bc_load_const_small_int+0x32>
    a3fa:	683b      	ldr	r3, [r7, #0]
    a3fc:	2b2f      	cmp	r3, #47	; 0x2f
    a3fe:	dc08      	bgt.n	a412 <mp_emit_bc_load_const_small_int+0x32>
        emit_write_bytecode_byte(emit, MP_BC_LOAD_CONST_SMALL_INT_MULTI + 16 + arg);
    a400:	683b      	ldr	r3, [r7, #0]
    a402:	b2db      	uxtb	r3, r3
    a404:	3b80      	subs	r3, #128	; 0x80
    a406:	b2db      	uxtb	r3, r3
    a408:	4619      	mov	r1, r3
    a40a:	6878      	ldr	r0, [r7, #4]
    a40c:	f7ff fbbe 	bl	9b8c <emit_write_bytecode_byte>
    a410:	e004      	b.n	a41c <mp_emit_bc_load_const_small_int+0x3c>
    } else {
        emit_write_bytecode_byte_int(emit, MP_BC_LOAD_CONST_SMALL_INT, arg);
    a412:	683a      	ldr	r2, [r7, #0]
    a414:	2114      	movs	r1, #20
    a416:	6878      	ldr	r0, [r7, #4]
    a418:	f7ff fbe2 	bl	9be0 <emit_write_bytecode_byte_int>
    }
}
    a41c:	bf00      	nop
    a41e:	3708      	adds	r7, #8
    a420:	46bd      	mov	sp, r7
    a422:	bd80      	pop	{r7, pc}

0000a424 <mp_emit_bc_load_const_str>:

void mp_emit_bc_load_const_str(emit_t *emit, qstr qst) {
    a424:	b580      	push	{r7, lr}
    a426:	b082      	sub	sp, #8
    a428:	af00      	add	r7, sp, #0
    a42a:	6078      	str	r0, [r7, #4]
    a42c:	6039      	str	r1, [r7, #0]
    emit_bc_pre(emit, 1);
    a42e:	2101      	movs	r1, #1
    a430:	6878      	ldr	r0, [r7, #4]
    a432:	f7ff ff03 	bl	a23c <emit_bc_pre>
    emit_write_bytecode_byte_qstr(emit, MP_BC_LOAD_CONST_STRING, qst);
    a436:	683a      	ldr	r2, [r7, #0]
    a438:	2116      	movs	r1, #22
    a43a:	6878      	ldr	r0, [r7, #4]
    a43c:	f7ff fc6d 	bl	9d1a <emit_write_bytecode_byte_qstr>
}
    a440:	bf00      	nop
    a442:	3708      	adds	r7, #8
    a444:	46bd      	mov	sp, r7
    a446:	bd80      	pop	{r7, pc}

0000a448 <mp_emit_bc_load_const_obj>:

void mp_emit_bc_load_const_obj(emit_t *emit, mp_obj_t obj) {
    a448:	b580      	push	{r7, lr}
    a44a:	b082      	sub	sp, #8
    a44c:	af00      	add	r7, sp, #0
    a44e:	6078      	str	r0, [r7, #4]
    a450:	6039      	str	r1, [r7, #0]
    emit_bc_pre(emit, 1);
    a452:	2101      	movs	r1, #1
    a454:	6878      	ldr	r0, [r7, #4]
    a456:	f7ff fef1 	bl	a23c <emit_bc_pre>
    emit_write_bytecode_byte_obj(emit, MP_BC_LOAD_CONST_OBJ, obj);
    a45a:	683a      	ldr	r2, [r7, #0]
    a45c:	2117      	movs	r1, #23
    a45e:	6878      	ldr	r0, [r7, #4]
    a460:	f7ff fc8a 	bl	9d78 <emit_write_bytecode_byte_obj>
}
    a464:	bf00      	nop
    a466:	3708      	adds	r7, #8
    a468:	46bd      	mov	sp, r7
    a46a:	bd80      	pop	{r7, pc}

0000a46c <mp_emit_bc_load_null>:

void mp_emit_bc_load_null(emit_t *emit) {
    a46c:	b580      	push	{r7, lr}
    a46e:	b082      	sub	sp, #8
    a470:	af00      	add	r7, sp, #0
    a472:	6078      	str	r0, [r7, #4]
    emit_bc_pre(emit, 1);
    a474:	2101      	movs	r1, #1
    a476:	6878      	ldr	r0, [r7, #4]
    a478:	f7ff fee0 	bl	a23c <emit_bc_pre>
    emit_write_bytecode_byte(emit, MP_BC_LOAD_NULL);
    a47c:	2118      	movs	r1, #24
    a47e:	6878      	ldr	r0, [r7, #4]
    a480:	f7ff fb84 	bl	9b8c <emit_write_bytecode_byte>
}
    a484:	bf00      	nop
    a486:	3708      	adds	r7, #8
    a488:	46bd      	mov	sp, r7
    a48a:	bd80      	pop	{r7, pc}

0000a48c <mp_emit_bc_load_local>:

void mp_emit_bc_load_local(emit_t *emit, qstr qst, mp_uint_t local_num, int kind) {
    a48c:	b580      	push	{r7, lr}
    a48e:	b084      	sub	sp, #16
    a490:	af00      	add	r7, sp, #0
    a492:	60f8      	str	r0, [r7, #12]
    a494:	60b9      	str	r1, [r7, #8]
    a496:	607a      	str	r2, [r7, #4]
    a498:	603b      	str	r3, [r7, #0]
    MP_STATIC_ASSERT(MP_BC_LOAD_FAST_N + MP_EMIT_IDOP_LOCAL_FAST == MP_BC_LOAD_FAST_N);
    MP_STATIC_ASSERT(MP_BC_LOAD_FAST_N + MP_EMIT_IDOP_LOCAL_DEREF == MP_BC_LOAD_DEREF);
    (void)qst;
    emit_bc_pre(emit, 1);
    a49a:	2101      	movs	r1, #1
    a49c:	68f8      	ldr	r0, [r7, #12]
    a49e:	f7ff fecd 	bl	a23c <emit_bc_pre>
    if (kind == MP_EMIT_IDOP_LOCAL_FAST && local_num <= 15) {
    a4a2:	683b      	ldr	r3, [r7, #0]
    a4a4:	2b00      	cmp	r3, #0
    a4a6:	d10b      	bne.n	a4c0 <mp_emit_bc_load_local+0x34>
    a4a8:	687b      	ldr	r3, [r7, #4]
    a4aa:	2b0f      	cmp	r3, #15
    a4ac:	d808      	bhi.n	a4c0 <mp_emit_bc_load_local+0x34>
        emit_write_bytecode_byte(emit, MP_BC_LOAD_FAST_MULTI + local_num);
    a4ae:	687b      	ldr	r3, [r7, #4]
    a4b0:	b2db      	uxtb	r3, r3
    a4b2:	3b50      	subs	r3, #80	; 0x50
    a4b4:	b2db      	uxtb	r3, r3
    a4b6:	4619      	mov	r1, r3
    a4b8:	68f8      	ldr	r0, [r7, #12]
    a4ba:	f7ff fb67 	bl	9b8c <emit_write_bytecode_byte>
    a4be:	e008      	b.n	a4d2 <mp_emit_bc_load_local+0x46>
    } else {
        emit_write_bytecode_byte_uint(emit, MP_BC_LOAD_FAST_N + kind, local_num);
    a4c0:	683b      	ldr	r3, [r7, #0]
    a4c2:	b2db      	uxtb	r3, r3
    a4c4:	3319      	adds	r3, #25
    a4c6:	b2db      	uxtb	r3, r3
    a4c8:	687a      	ldr	r2, [r7, #4]
    a4ca:	4619      	mov	r1, r3
    a4cc:	68f8      	ldr	r0, [r7, #12]
    a4ce:	f7ff fbf0 	bl	9cb2 <emit_write_bytecode_byte_uint>
    }
}
    a4d2:	bf00      	nop
    a4d4:	3710      	adds	r7, #16
    a4d6:	46bd      	mov	sp, r7
    a4d8:	bd80      	pop	{r7, pc}

0000a4da <mp_emit_bc_load_global>:

void mp_emit_bc_load_global(emit_t *emit, qstr qst, int kind) {
    a4da:	b580      	push	{r7, lr}
    a4dc:	b084      	sub	sp, #16
    a4de:	af00      	add	r7, sp, #0
    a4e0:	60f8      	str	r0, [r7, #12]
    a4e2:	60b9      	str	r1, [r7, #8]
    a4e4:	607a      	str	r2, [r7, #4]
    MP_STATIC_ASSERT(MP_BC_LOAD_NAME + MP_EMIT_IDOP_GLOBAL_NAME == MP_BC_LOAD_NAME);
    MP_STATIC_ASSERT(MP_BC_LOAD_NAME + MP_EMIT_IDOP_GLOBAL_GLOBAL == MP_BC_LOAD_GLOBAL);
    (void)qst;
    emit_bc_pre(emit, 1);
    a4e6:	2101      	movs	r1, #1
    a4e8:	68f8      	ldr	r0, [r7, #12]
    a4ea:	f7ff fea7 	bl	a23c <emit_bc_pre>
    emit_write_bytecode_byte_qstr(emit, MP_BC_LOAD_NAME + kind, qst);
    a4ee:	687b      	ldr	r3, [r7, #4]
    a4f0:	b2db      	uxtb	r3, r3
    a4f2:	331b      	adds	r3, #27
    a4f4:	b2db      	uxtb	r3, r3
    a4f6:	68ba      	ldr	r2, [r7, #8]
    a4f8:	4619      	mov	r1, r3
    a4fa:	68f8      	ldr	r0, [r7, #12]
    a4fc:	f7ff fc0d 	bl	9d1a <emit_write_bytecode_byte_qstr>
    if (MICROPY_OPT_CACHE_MAP_LOOKUP_IN_BYTECODE_DYNAMIC) {
        emit_write_bytecode_byte(emit, 0);
    }
}
    a500:	bf00      	nop
    a502:	3710      	adds	r7, #16
    a504:	46bd      	mov	sp, r7
    a506:	bd80      	pop	{r7, pc}

0000a508 <mp_emit_bc_load_method>:

void mp_emit_bc_load_method(emit_t *emit, qstr qst, bool is_super) {
    a508:	b580      	push	{r7, lr}
    a50a:	b084      	sub	sp, #16
    a50c:	af00      	add	r7, sp, #0
    a50e:	60f8      	str	r0, [r7, #12]
    a510:	60b9      	str	r1, [r7, #8]
    a512:	4613      	mov	r3, r2
    a514:	71fb      	strb	r3, [r7, #7]
    emit_bc_pre(emit, 1 - 2 * is_super);
    a516:	79fb      	ldrb	r3, [r7, #7]
    a518:	005b      	lsls	r3, r3, #1
    a51a:	f1c3 0301 	rsb	r3, r3, #1
    a51e:	4619      	mov	r1, r3
    a520:	68f8      	ldr	r0, [r7, #12]
    a522:	f7ff fe8b 	bl	a23c <emit_bc_pre>
    emit_write_bytecode_byte_qstr(emit, is_super ? MP_BC_LOAD_SUPER_METHOD : MP_BC_LOAD_METHOD, qst);
    a526:	79fb      	ldrb	r3, [r7, #7]
    a528:	2b00      	cmp	r3, #0
    a52a:	d001      	beq.n	a530 <mp_emit_bc_load_method+0x28>
    a52c:	231f      	movs	r3, #31
    a52e:	e000      	b.n	a532 <mp_emit_bc_load_method+0x2a>
    a530:	231e      	movs	r3, #30
    a532:	68ba      	ldr	r2, [r7, #8]
    a534:	4619      	mov	r1, r3
    a536:	68f8      	ldr	r0, [r7, #12]
    a538:	f7ff fbef 	bl	9d1a <emit_write_bytecode_byte_qstr>
}
    a53c:	bf00      	nop
    a53e:	3710      	adds	r7, #16
    a540:	46bd      	mov	sp, r7
    a542:	bd80      	pop	{r7, pc}

0000a544 <mp_emit_bc_load_build_class>:

void mp_emit_bc_load_build_class(emit_t *emit) {
    a544:	b580      	push	{r7, lr}
    a546:	b082      	sub	sp, #8
    a548:	af00      	add	r7, sp, #0
    a54a:	6078      	str	r0, [r7, #4]
    emit_bc_pre(emit, 1);
    a54c:	2101      	movs	r1, #1
    a54e:	6878      	ldr	r0, [r7, #4]
    a550:	f7ff fe74 	bl	a23c <emit_bc_pre>
    emit_write_bytecode_byte(emit, MP_BC_LOAD_BUILD_CLASS);
    a554:	2120      	movs	r1, #32
    a556:	6878      	ldr	r0, [r7, #4]
    a558:	f7ff fb18 	bl	9b8c <emit_write_bytecode_byte>
}
    a55c:	bf00      	nop
    a55e:	3708      	adds	r7, #8
    a560:	46bd      	mov	sp, r7
    a562:	bd80      	pop	{r7, pc}

0000a564 <mp_emit_bc_subscr>:

void mp_emit_bc_subscr(emit_t *emit, int kind) {
    a564:	b580      	push	{r7, lr}
    a566:	b082      	sub	sp, #8
    a568:	af00      	add	r7, sp, #0
    a56a:	6078      	str	r0, [r7, #4]
    a56c:	6039      	str	r1, [r7, #0]
    if (kind == MP_EMIT_SUBSCR_LOAD) {
    a56e:	683b      	ldr	r3, [r7, #0]
    a570:	2b00      	cmp	r3, #0
    a572:	d109      	bne.n	a588 <mp_emit_bc_subscr+0x24>
        emit_bc_pre(emit, -1);
    a574:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    a578:	6878      	ldr	r0, [r7, #4]
    a57a:	f7ff fe5f 	bl	a23c <emit_bc_pre>
        emit_write_bytecode_byte(emit, MP_BC_LOAD_SUBSCR);
    a57e:	2121      	movs	r1, #33	; 0x21
    a580:	6878      	ldr	r0, [r7, #4]
    a582:	f7ff fb03 	bl	9b8c <emit_write_bytecode_byte>
            mp_emit_bc_rot_three(emit);
        }
        emit_bc_pre(emit, -3);
        emit_write_bytecode_byte(emit, MP_BC_STORE_SUBSCR);
    }
}
    a586:	e011      	b.n	a5ac <mp_emit_bc_subscr+0x48>
        if (kind == MP_EMIT_SUBSCR_DELETE) {
    a588:	683b      	ldr	r3, [r7, #0]
    a58a:	2b02      	cmp	r3, #2
    a58c:	d105      	bne.n	a59a <mp_emit_bc_subscr+0x36>
            mp_emit_bc_load_null(emit);
    a58e:	6878      	ldr	r0, [r7, #4]
    a590:	f7ff ff6c 	bl	a46c <mp_emit_bc_load_null>
            mp_emit_bc_rot_three(emit);
    a594:	6878      	ldr	r0, [r7, #4]
    a596:	f000 f8e3 	bl	a760 <mp_emit_bc_rot_three>
        emit_bc_pre(emit, -3);
    a59a:	f06f 0102 	mvn.w	r1, #2
    a59e:	6878      	ldr	r0, [r7, #4]
    a5a0:	f7ff fe4c 	bl	a23c <emit_bc_pre>
        emit_write_bytecode_byte(emit, MP_BC_STORE_SUBSCR);
    a5a4:	2127      	movs	r1, #39	; 0x27
    a5a6:	6878      	ldr	r0, [r7, #4]
    a5a8:	f7ff faf0 	bl	9b8c <emit_write_bytecode_byte>
}
    a5ac:	bf00      	nop
    a5ae:	3708      	adds	r7, #8
    a5b0:	46bd      	mov	sp, r7
    a5b2:	bd80      	pop	{r7, pc}

0000a5b4 <mp_emit_bc_attr>:

void mp_emit_bc_attr(emit_t *emit, qstr qst, int kind) {
    a5b4:	b580      	push	{r7, lr}
    a5b6:	b084      	sub	sp, #16
    a5b8:	af00      	add	r7, sp, #0
    a5ba:	60f8      	str	r0, [r7, #12]
    a5bc:	60b9      	str	r1, [r7, #8]
    a5be:	607a      	str	r2, [r7, #4]
    if (kind == MP_EMIT_ATTR_LOAD) {
    a5c0:	687b      	ldr	r3, [r7, #4]
    a5c2:	2b00      	cmp	r3, #0
    a5c4:	d109      	bne.n	a5da <mp_emit_bc_attr+0x26>
        emit_bc_pre(emit, 0);
    a5c6:	2100      	movs	r1, #0
    a5c8:	68f8      	ldr	r0, [r7, #12]
    a5ca:	f7ff fe37 	bl	a23c <emit_bc_pre>
        emit_write_bytecode_byte_qstr(emit, MP_BC_LOAD_ATTR, qst);
    a5ce:	68ba      	ldr	r2, [r7, #8]
    a5d0:	211d      	movs	r1, #29
    a5d2:	68f8      	ldr	r0, [r7, #12]
    a5d4:	f7ff fba1 	bl	9d1a <emit_write_bytecode_byte_qstr>
        emit_write_bytecode_byte_qstr(emit, MP_BC_STORE_ATTR, qst);
    }
    if (MICROPY_OPT_CACHE_MAP_LOOKUP_IN_BYTECODE_DYNAMIC) {
        emit_write_bytecode_byte(emit, 0);
    }
}
    a5d8:	e012      	b.n	a600 <mp_emit_bc_attr+0x4c>
        if (kind == MP_EMIT_ATTR_DELETE) {
    a5da:	687b      	ldr	r3, [r7, #4]
    a5dc:	2b02      	cmp	r3, #2
    a5de:	d105      	bne.n	a5ec <mp_emit_bc_attr+0x38>
            mp_emit_bc_load_null(emit);
    a5e0:	68f8      	ldr	r0, [r7, #12]
    a5e2:	f7ff ff43 	bl	a46c <mp_emit_bc_load_null>
            mp_emit_bc_rot_two(emit);
    a5e6:	68f8      	ldr	r0, [r7, #12]
    a5e8:	f000 f8aa 	bl	a740 <mp_emit_bc_rot_two>
        emit_bc_pre(emit, -2);
    a5ec:	f06f 0101 	mvn.w	r1, #1
    a5f0:	68f8      	ldr	r0, [r7, #12]
    a5f2:	f7ff fe23 	bl	a23c <emit_bc_pre>
        emit_write_bytecode_byte_qstr(emit, MP_BC_STORE_ATTR, qst);
    a5f6:	68ba      	ldr	r2, [r7, #8]
    a5f8:	2126      	movs	r1, #38	; 0x26
    a5fa:	68f8      	ldr	r0, [r7, #12]
    a5fc:	f7ff fb8d 	bl	9d1a <emit_write_bytecode_byte_qstr>
}
    a600:	bf00      	nop
    a602:	3710      	adds	r7, #16
    a604:	46bd      	mov	sp, r7
    a606:	bd80      	pop	{r7, pc}

0000a608 <mp_emit_bc_store_local>:

void mp_emit_bc_store_local(emit_t *emit, qstr qst, mp_uint_t local_num, int kind) {
    a608:	b580      	push	{r7, lr}
    a60a:	b084      	sub	sp, #16
    a60c:	af00      	add	r7, sp, #0
    a60e:	60f8      	str	r0, [r7, #12]
    a610:	60b9      	str	r1, [r7, #8]
    a612:	607a      	str	r2, [r7, #4]
    a614:	603b      	str	r3, [r7, #0]
    MP_STATIC_ASSERT(MP_BC_STORE_FAST_N + MP_EMIT_IDOP_LOCAL_FAST == MP_BC_STORE_FAST_N);
    MP_STATIC_ASSERT(MP_BC_STORE_FAST_N + MP_EMIT_IDOP_LOCAL_DEREF == MP_BC_STORE_DEREF);
    (void)qst;
    emit_bc_pre(emit, -1);
    a616:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    a61a:	68f8      	ldr	r0, [r7, #12]
    a61c:	f7ff fe0e 	bl	a23c <emit_bc_pre>
    if (kind == MP_EMIT_IDOP_LOCAL_FAST && local_num <= 15) {
    a620:	683b      	ldr	r3, [r7, #0]
    a622:	2b00      	cmp	r3, #0
    a624:	d10b      	bne.n	a63e <mp_emit_bc_store_local+0x36>
    a626:	687b      	ldr	r3, [r7, #4]
    a628:	2b0f      	cmp	r3, #15
    a62a:	d808      	bhi.n	a63e <mp_emit_bc_store_local+0x36>
        emit_write_bytecode_byte(emit, MP_BC_STORE_FAST_MULTI + local_num);
    a62c:	687b      	ldr	r3, [r7, #4]
    a62e:	b2db      	uxtb	r3, r3
    a630:	3b40      	subs	r3, #64	; 0x40
    a632:	b2db      	uxtb	r3, r3
    a634:	4619      	mov	r1, r3
    a636:	68f8      	ldr	r0, [r7, #12]
    a638:	f7ff faa8 	bl	9b8c <emit_write_bytecode_byte>
    a63c:	e008      	b.n	a650 <mp_emit_bc_store_local+0x48>
    } else {
        emit_write_bytecode_byte_uint(emit, MP_BC_STORE_FAST_N + kind, local_num);
    a63e:	683b      	ldr	r3, [r7, #0]
    a640:	b2db      	uxtb	r3, r3
    a642:	3322      	adds	r3, #34	; 0x22
    a644:	b2db      	uxtb	r3, r3
    a646:	687a      	ldr	r2, [r7, #4]
    a648:	4619      	mov	r1, r3
    a64a:	68f8      	ldr	r0, [r7, #12]
    a64c:	f7ff fb31 	bl	9cb2 <emit_write_bytecode_byte_uint>
    }
}
    a650:	bf00      	nop
    a652:	3710      	adds	r7, #16
    a654:	46bd      	mov	sp, r7
    a656:	bd80      	pop	{r7, pc}

0000a658 <mp_emit_bc_store_global>:

void mp_emit_bc_store_global(emit_t *emit, qstr qst, int kind) {
    a658:	b580      	push	{r7, lr}
    a65a:	b084      	sub	sp, #16
    a65c:	af00      	add	r7, sp, #0
    a65e:	60f8      	str	r0, [r7, #12]
    a660:	60b9      	str	r1, [r7, #8]
    a662:	607a      	str	r2, [r7, #4]
    MP_STATIC_ASSERT(MP_BC_STORE_NAME + MP_EMIT_IDOP_GLOBAL_NAME == MP_BC_STORE_NAME);
    MP_STATIC_ASSERT(MP_BC_STORE_NAME + MP_EMIT_IDOP_GLOBAL_GLOBAL == MP_BC_STORE_GLOBAL);
    emit_bc_pre(emit, -1);
    a664:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    a668:	68f8      	ldr	r0, [r7, #12]
    a66a:	f7ff fde7 	bl	a23c <emit_bc_pre>
    emit_write_bytecode_byte_qstr(emit, MP_BC_STORE_NAME + kind, qst);
    a66e:	687b      	ldr	r3, [r7, #4]
    a670:	b2db      	uxtb	r3, r3
    a672:	3324      	adds	r3, #36	; 0x24
    a674:	b2db      	uxtb	r3, r3
    a676:	68ba      	ldr	r2, [r7, #8]
    a678:	4619      	mov	r1, r3
    a67a:	68f8      	ldr	r0, [r7, #12]
    a67c:	f7ff fb4d 	bl	9d1a <emit_write_bytecode_byte_qstr>
}
    a680:	bf00      	nop
    a682:	3710      	adds	r7, #16
    a684:	46bd      	mov	sp, r7
    a686:	bd80      	pop	{r7, pc}

0000a688 <mp_emit_bc_delete_local>:

void mp_emit_bc_delete_local(emit_t *emit, qstr qst, mp_uint_t local_num, int kind) {
    a688:	b580      	push	{r7, lr}
    a68a:	b084      	sub	sp, #16
    a68c:	af00      	add	r7, sp, #0
    a68e:	60f8      	str	r0, [r7, #12]
    a690:	60b9      	str	r1, [r7, #8]
    a692:	607a      	str	r2, [r7, #4]
    a694:	603b      	str	r3, [r7, #0]
    MP_STATIC_ASSERT(MP_BC_DELETE_FAST + MP_EMIT_IDOP_LOCAL_FAST == MP_BC_DELETE_FAST);
    MP_STATIC_ASSERT(MP_BC_DELETE_FAST + MP_EMIT_IDOP_LOCAL_DEREF == MP_BC_DELETE_DEREF);
    (void)qst;
    emit_write_bytecode_byte_uint(emit, MP_BC_DELETE_FAST + kind, local_num);
    a696:	683b      	ldr	r3, [r7, #0]
    a698:	b2db      	uxtb	r3, r3
    a69a:	3328      	adds	r3, #40	; 0x28
    a69c:	b2db      	uxtb	r3, r3
    a69e:	687a      	ldr	r2, [r7, #4]
    a6a0:	4619      	mov	r1, r3
    a6a2:	68f8      	ldr	r0, [r7, #12]
    a6a4:	f7ff fb05 	bl	9cb2 <emit_write_bytecode_byte_uint>
}
    a6a8:	bf00      	nop
    a6aa:	3710      	adds	r7, #16
    a6ac:	46bd      	mov	sp, r7
    a6ae:	bd80      	pop	{r7, pc}

0000a6b0 <mp_emit_bc_delete_global>:

void mp_emit_bc_delete_global(emit_t *emit, qstr qst, int kind) {
    a6b0:	b580      	push	{r7, lr}
    a6b2:	b084      	sub	sp, #16
    a6b4:	af00      	add	r7, sp, #0
    a6b6:	60f8      	str	r0, [r7, #12]
    a6b8:	60b9      	str	r1, [r7, #8]
    a6ba:	607a      	str	r2, [r7, #4]
    MP_STATIC_ASSERT(MP_BC_DELETE_NAME + MP_EMIT_IDOP_GLOBAL_NAME == MP_BC_DELETE_NAME);
    MP_STATIC_ASSERT(MP_BC_DELETE_NAME + MP_EMIT_IDOP_GLOBAL_GLOBAL == MP_BC_DELETE_GLOBAL);
    emit_bc_pre(emit, 0);
    a6bc:	2100      	movs	r1, #0
    a6be:	68f8      	ldr	r0, [r7, #12]
    a6c0:	f7ff fdbc 	bl	a23c <emit_bc_pre>
    emit_write_bytecode_byte_qstr(emit, MP_BC_DELETE_NAME + kind, qst);
    a6c4:	687b      	ldr	r3, [r7, #4]
    a6c6:	b2db      	uxtb	r3, r3
    a6c8:	332a      	adds	r3, #42	; 0x2a
    a6ca:	b2db      	uxtb	r3, r3
    a6cc:	68ba      	ldr	r2, [r7, #8]
    a6ce:	4619      	mov	r1, r3
    a6d0:	68f8      	ldr	r0, [r7, #12]
    a6d2:	f7ff fb22 	bl	9d1a <emit_write_bytecode_byte_qstr>
}
    a6d6:	bf00      	nop
    a6d8:	3710      	adds	r7, #16
    a6da:	46bd      	mov	sp, r7
    a6dc:	bd80      	pop	{r7, pc}

0000a6de <mp_emit_bc_dup_top>:

void mp_emit_bc_dup_top(emit_t *emit) {
    a6de:	b580      	push	{r7, lr}
    a6e0:	b082      	sub	sp, #8
    a6e2:	af00      	add	r7, sp, #0
    a6e4:	6078      	str	r0, [r7, #4]
    emit_bc_pre(emit, 1);
    a6e6:	2101      	movs	r1, #1
    a6e8:	6878      	ldr	r0, [r7, #4]
    a6ea:	f7ff fda7 	bl	a23c <emit_bc_pre>
    emit_write_bytecode_byte(emit, MP_BC_DUP_TOP);
    a6ee:	2130      	movs	r1, #48	; 0x30
    a6f0:	6878      	ldr	r0, [r7, #4]
    a6f2:	f7ff fa4b 	bl	9b8c <emit_write_bytecode_byte>
}
    a6f6:	bf00      	nop
    a6f8:	3708      	adds	r7, #8
    a6fa:	46bd      	mov	sp, r7
    a6fc:	bd80      	pop	{r7, pc}

0000a6fe <mp_emit_bc_dup_top_two>:

void mp_emit_bc_dup_top_two(emit_t *emit) {
    a6fe:	b580      	push	{r7, lr}
    a700:	b082      	sub	sp, #8
    a702:	af00      	add	r7, sp, #0
    a704:	6078      	str	r0, [r7, #4]
    emit_bc_pre(emit, 2);
    a706:	2102      	movs	r1, #2
    a708:	6878      	ldr	r0, [r7, #4]
    a70a:	f7ff fd97 	bl	a23c <emit_bc_pre>
    emit_write_bytecode_byte(emit, MP_BC_DUP_TOP_TWO);
    a70e:	2131      	movs	r1, #49	; 0x31
    a710:	6878      	ldr	r0, [r7, #4]
    a712:	f7ff fa3b 	bl	9b8c <emit_write_bytecode_byte>
}
    a716:	bf00      	nop
    a718:	3708      	adds	r7, #8
    a71a:	46bd      	mov	sp, r7
    a71c:	bd80      	pop	{r7, pc}

0000a71e <mp_emit_bc_pop_top>:

void mp_emit_bc_pop_top(emit_t *emit) {
    a71e:	b580      	push	{r7, lr}
    a720:	b082      	sub	sp, #8
    a722:	af00      	add	r7, sp, #0
    a724:	6078      	str	r0, [r7, #4]
    emit_bc_pre(emit, -1);
    a726:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    a72a:	6878      	ldr	r0, [r7, #4]
    a72c:	f7ff fd86 	bl	a23c <emit_bc_pre>
    emit_write_bytecode_byte(emit, MP_BC_POP_TOP);
    a730:	2132      	movs	r1, #50	; 0x32
    a732:	6878      	ldr	r0, [r7, #4]
    a734:	f7ff fa2a 	bl	9b8c <emit_write_bytecode_byte>
}
    a738:	bf00      	nop
    a73a:	3708      	adds	r7, #8
    a73c:	46bd      	mov	sp, r7
    a73e:	bd80      	pop	{r7, pc}

0000a740 <mp_emit_bc_rot_two>:

void mp_emit_bc_rot_two(emit_t *emit) {
    a740:	b580      	push	{r7, lr}
    a742:	b082      	sub	sp, #8
    a744:	af00      	add	r7, sp, #0
    a746:	6078      	str	r0, [r7, #4]
    emit_bc_pre(emit, 0);
    a748:	2100      	movs	r1, #0
    a74a:	6878      	ldr	r0, [r7, #4]
    a74c:	f7ff fd76 	bl	a23c <emit_bc_pre>
    emit_write_bytecode_byte(emit, MP_BC_ROT_TWO);
    a750:	2133      	movs	r1, #51	; 0x33
    a752:	6878      	ldr	r0, [r7, #4]
    a754:	f7ff fa1a 	bl	9b8c <emit_write_bytecode_byte>
}
    a758:	bf00      	nop
    a75a:	3708      	adds	r7, #8
    a75c:	46bd      	mov	sp, r7
    a75e:	bd80      	pop	{r7, pc}

0000a760 <mp_emit_bc_rot_three>:

void mp_emit_bc_rot_three(emit_t *emit) {
    a760:	b580      	push	{r7, lr}
    a762:	b082      	sub	sp, #8
    a764:	af00      	add	r7, sp, #0
    a766:	6078      	str	r0, [r7, #4]
    emit_bc_pre(emit, 0);
    a768:	2100      	movs	r1, #0
    a76a:	6878      	ldr	r0, [r7, #4]
    a76c:	f7ff fd66 	bl	a23c <emit_bc_pre>
    emit_write_bytecode_byte(emit, MP_BC_ROT_THREE);
    a770:	2134      	movs	r1, #52	; 0x34
    a772:	6878      	ldr	r0, [r7, #4]
    a774:	f7ff fa0a 	bl	9b8c <emit_write_bytecode_byte>
}
    a778:	bf00      	nop
    a77a:	3708      	adds	r7, #8
    a77c:	46bd      	mov	sp, r7
    a77e:	bd80      	pop	{r7, pc}

0000a780 <mp_emit_bc_jump>:

void mp_emit_bc_jump(emit_t *emit, mp_uint_t label) {
    a780:	b580      	push	{r7, lr}
    a782:	b082      	sub	sp, #8
    a784:	af00      	add	r7, sp, #0
    a786:	6078      	str	r0, [r7, #4]
    a788:	6039      	str	r1, [r7, #0]
    emit_bc_pre(emit, 0);
    a78a:	2100      	movs	r1, #0
    a78c:	6878      	ldr	r0, [r7, #4]
    a78e:	f7ff fd55 	bl	a23c <emit_bc_pre>
    emit_write_bytecode_byte_signed_label(emit, MP_BC_JUMP, label);
    a792:	683a      	ldr	r2, [r7, #0]
    a794:	2135      	movs	r1, #53	; 0x35
    a796:	6878      	ldr	r0, [r7, #4]
    a798:	f7ff fb61 	bl	9e5e <emit_write_bytecode_byte_signed_label>
}
    a79c:	bf00      	nop
    a79e:	3708      	adds	r7, #8
    a7a0:	46bd      	mov	sp, r7
    a7a2:	bd80      	pop	{r7, pc}

0000a7a4 <mp_emit_bc_pop_jump_if>:

void mp_emit_bc_pop_jump_if(emit_t *emit, bool cond, mp_uint_t label) {
    a7a4:	b580      	push	{r7, lr}
    a7a6:	b084      	sub	sp, #16
    a7a8:	af00      	add	r7, sp, #0
    a7aa:	60f8      	str	r0, [r7, #12]
    a7ac:	460b      	mov	r3, r1
    a7ae:	607a      	str	r2, [r7, #4]
    a7b0:	72fb      	strb	r3, [r7, #11]
    emit_bc_pre(emit, -1);
    a7b2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    a7b6:	68f8      	ldr	r0, [r7, #12]
    a7b8:	f7ff fd40 	bl	a23c <emit_bc_pre>
    if (cond) {
    a7bc:	7afb      	ldrb	r3, [r7, #11]
    a7be:	2b00      	cmp	r3, #0
    a7c0:	d005      	beq.n	a7ce <mp_emit_bc_pop_jump_if+0x2a>
        emit_write_bytecode_byte_signed_label(emit, MP_BC_POP_JUMP_IF_TRUE, label);
    a7c2:	687a      	ldr	r2, [r7, #4]
    a7c4:	2136      	movs	r1, #54	; 0x36
    a7c6:	68f8      	ldr	r0, [r7, #12]
    a7c8:	f7ff fb49 	bl	9e5e <emit_write_bytecode_byte_signed_label>
    } else {
        emit_write_bytecode_byte_signed_label(emit, MP_BC_POP_JUMP_IF_FALSE, label);
    }
}
    a7cc:	e004      	b.n	a7d8 <mp_emit_bc_pop_jump_if+0x34>
        emit_write_bytecode_byte_signed_label(emit, MP_BC_POP_JUMP_IF_FALSE, label);
    a7ce:	687a      	ldr	r2, [r7, #4]
    a7d0:	2137      	movs	r1, #55	; 0x37
    a7d2:	68f8      	ldr	r0, [r7, #12]
    a7d4:	f7ff fb43 	bl	9e5e <emit_write_bytecode_byte_signed_label>
}
    a7d8:	bf00      	nop
    a7da:	3710      	adds	r7, #16
    a7dc:	46bd      	mov	sp, r7
    a7de:	bd80      	pop	{r7, pc}

0000a7e0 <mp_emit_bc_jump_if_or_pop>:

void mp_emit_bc_jump_if_or_pop(emit_t *emit, bool cond, mp_uint_t label) {
    a7e0:	b580      	push	{r7, lr}
    a7e2:	b084      	sub	sp, #16
    a7e4:	af00      	add	r7, sp, #0
    a7e6:	60f8      	str	r0, [r7, #12]
    a7e8:	460b      	mov	r3, r1
    a7ea:	607a      	str	r2, [r7, #4]
    a7ec:	72fb      	strb	r3, [r7, #11]
    emit_bc_pre(emit, -1);
    a7ee:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    a7f2:	68f8      	ldr	r0, [r7, #12]
    a7f4:	f7ff fd22 	bl	a23c <emit_bc_pre>
    if (cond) {
    a7f8:	7afb      	ldrb	r3, [r7, #11]
    a7fa:	2b00      	cmp	r3, #0
    a7fc:	d005      	beq.n	a80a <mp_emit_bc_jump_if_or_pop+0x2a>
        emit_write_bytecode_byte_signed_label(emit, MP_BC_JUMP_IF_TRUE_OR_POP, label);
    a7fe:	687a      	ldr	r2, [r7, #4]
    a800:	2138      	movs	r1, #56	; 0x38
    a802:	68f8      	ldr	r0, [r7, #12]
    a804:	f7ff fb2b 	bl	9e5e <emit_write_bytecode_byte_signed_label>
    } else {
        emit_write_bytecode_byte_signed_label(emit, MP_BC_JUMP_IF_FALSE_OR_POP, label);
    }
}
    a808:	e004      	b.n	a814 <mp_emit_bc_jump_if_or_pop+0x34>
        emit_write_bytecode_byte_signed_label(emit, MP_BC_JUMP_IF_FALSE_OR_POP, label);
    a80a:	687a      	ldr	r2, [r7, #4]
    a80c:	2139      	movs	r1, #57	; 0x39
    a80e:	68f8      	ldr	r0, [r7, #12]
    a810:	f7ff fb25 	bl	9e5e <emit_write_bytecode_byte_signed_label>
}
    a814:	bf00      	nop
    a816:	3710      	adds	r7, #16
    a818:	46bd      	mov	sp, r7
    a81a:	bd80      	pop	{r7, pc}

0000a81c <mp_emit_bc_unwind_jump>:

void mp_emit_bc_unwind_jump(emit_t *emit, mp_uint_t label, mp_uint_t except_depth) {
    a81c:	b580      	push	{r7, lr}
    a81e:	b086      	sub	sp, #24
    a820:	af00      	add	r7, sp, #0
    a822:	60f8      	str	r0, [r7, #12]
    a824:	60b9      	str	r1, [r7, #8]
    a826:	607a      	str	r2, [r7, #4]
    if (except_depth == 0) {
    a828:	687b      	ldr	r3, [r7, #4]
    a82a:	2b00      	cmp	r3, #0
    a82c:	d122      	bne.n	a874 <mp_emit_bc_unwind_jump+0x58>
        emit_bc_pre(emit, 0);
    a82e:	2100      	movs	r1, #0
    a830:	68f8      	ldr	r0, [r7, #12]
    a832:	f7ff fd03 	bl	a23c <emit_bc_pre>
        if (label & MP_EMIT_BREAK_FROM_FOR) {
    a836:	68bb      	ldr	r3, [r7, #8]
    a838:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    a83c:	2b00      	cmp	r3, #0
    a83e:	d010      	beq.n	a862 <mp_emit_bc_unwind_jump+0x46>
            // need to pop the iterator if we are breaking out of a for loop
            emit_write_bytecode_byte(emit, MP_BC_POP_TOP);
    a840:	2132      	movs	r1, #50	; 0x32
    a842:	68f8      	ldr	r0, [r7, #12]
    a844:	f7ff f9a2 	bl	9b8c <emit_write_bytecode_byte>
            // also pop the iter_buf
            for (size_t i = 0; i < MP_OBJ_ITER_BUF_NSLOTS - 1; ++i) {
    a848:	2300      	movs	r3, #0
    a84a:	617b      	str	r3, [r7, #20]
    a84c:	e006      	b.n	a85c <mp_emit_bc_unwind_jump+0x40>
                emit_write_bytecode_byte(emit, MP_BC_POP_TOP);
    a84e:	2132      	movs	r1, #50	; 0x32
    a850:	68f8      	ldr	r0, [r7, #12]
    a852:	f7ff f99b 	bl	9b8c <emit_write_bytecode_byte>
            for (size_t i = 0; i < MP_OBJ_ITER_BUF_NSLOTS - 1; ++i) {
    a856:	697b      	ldr	r3, [r7, #20]
    a858:	3301      	adds	r3, #1
    a85a:	617b      	str	r3, [r7, #20]
    a85c:	697b      	ldr	r3, [r7, #20]
    a85e:	2b02      	cmp	r3, #2
    a860:	d9f5      	bls.n	a84e <mp_emit_bc_unwind_jump+0x32>
            }
        }
        emit_write_bytecode_byte_signed_label(emit, MP_BC_JUMP, label & ~MP_EMIT_BREAK_FROM_FOR);
    a862:	68bb      	ldr	r3, [r7, #8]
    a864:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    a868:	461a      	mov	r2, r3
    a86a:	2135      	movs	r1, #53	; 0x35
    a86c:	68f8      	ldr	r0, [r7, #12]
    a86e:	f7ff faf6 	bl	9e5e <emit_write_bytecode_byte_signed_label>
    } else {
        emit_write_bytecode_byte_signed_label(emit, MP_BC_UNWIND_JUMP, label & ~MP_EMIT_BREAK_FROM_FOR);
        emit_write_bytecode_byte(emit, ((label & MP_EMIT_BREAK_FROM_FOR) ? 0x80 : 0) | except_depth);
    }
}
    a872:	e017      	b.n	a8a4 <mp_emit_bc_unwind_jump+0x88>
        emit_write_bytecode_byte_signed_label(emit, MP_BC_UNWIND_JUMP, label & ~MP_EMIT_BREAK_FROM_FOR);
    a874:	68bb      	ldr	r3, [r7, #8]
    a876:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    a87a:	461a      	mov	r2, r3
    a87c:	2146      	movs	r1, #70	; 0x46
    a87e:	68f8      	ldr	r0, [r7, #12]
    a880:	f7ff faed 	bl	9e5e <emit_write_bytecode_byte_signed_label>
        emit_write_bytecode_byte(emit, ((label & MP_EMIT_BREAK_FROM_FOR) ? 0x80 : 0) | except_depth);
    a884:	68bb      	ldr	r3, [r7, #8]
    a886:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    a88a:	2b00      	cmp	r3, #0
    a88c:	d001      	beq.n	a892 <mp_emit_bc_unwind_jump+0x76>
    a88e:	2280      	movs	r2, #128	; 0x80
    a890:	e000      	b.n	a894 <mp_emit_bc_unwind_jump+0x78>
    a892:	2200      	movs	r2, #0
    a894:	687b      	ldr	r3, [r7, #4]
    a896:	b2db      	uxtb	r3, r3
    a898:	4313      	orrs	r3, r2
    a89a:	b2db      	uxtb	r3, r3
    a89c:	4619      	mov	r1, r3
    a89e:	68f8      	ldr	r0, [r7, #12]
    a8a0:	f7ff f974 	bl	9b8c <emit_write_bytecode_byte>
}
    a8a4:	bf00      	nop
    a8a6:	3718      	adds	r7, #24
    a8a8:	46bd      	mov	sp, r7
    a8aa:	bd80      	pop	{r7, pc}

0000a8ac <mp_emit_bc_setup_block>:

void mp_emit_bc_setup_block(emit_t *emit, mp_uint_t label, int kind) {
    a8ac:	b580      	push	{r7, lr}
    a8ae:	b084      	sub	sp, #16
    a8b0:	af00      	add	r7, sp, #0
    a8b2:	60f8      	str	r0, [r7, #12]
    a8b4:	60b9      	str	r1, [r7, #8]
    a8b6:	607a      	str	r2, [r7, #4]
    MP_STATIC_ASSERT(MP_BC_SETUP_WITH + MP_EMIT_SETUP_BLOCK_WITH == MP_BC_SETUP_WITH);
    MP_STATIC_ASSERT(MP_BC_SETUP_WITH + MP_EMIT_SETUP_BLOCK_EXCEPT == MP_BC_SETUP_EXCEPT);
    MP_STATIC_ASSERT(MP_BC_SETUP_WITH + MP_EMIT_SETUP_BLOCK_FINALLY == MP_BC_SETUP_FINALLY);
    if (kind == MP_EMIT_SETUP_BLOCK_WITH) {
    a8b8:	687b      	ldr	r3, [r7, #4]
    a8ba:	2b00      	cmp	r3, #0
    a8bc:	d104      	bne.n	a8c8 <mp_emit_bc_setup_block+0x1c>
    // The SETUP_WITH opcode pops ctx_mgr from the top of the stack
    // and then pushes 3 entries: __exit__, ctx_mgr, as_value.
        emit_bc_pre(emit, 2);
    a8be:	2102      	movs	r1, #2
    a8c0:	68f8      	ldr	r0, [r7, #12]
    a8c2:	f7ff fcbb 	bl	a23c <emit_bc_pre>
    a8c6:	e003      	b.n	a8d0 <mp_emit_bc_setup_block+0x24>
    } else {
        emit_bc_pre(emit, 0);
    a8c8:	2100      	movs	r1, #0
    a8ca:	68f8      	ldr	r0, [r7, #12]
    a8cc:	f7ff fcb6 	bl	a23c <emit_bc_pre>
    }
    emit_write_bytecode_byte_unsigned_label(emit, MP_BC_SETUP_WITH + kind, label);
    a8d0:	687b      	ldr	r3, [r7, #4]
    a8d2:	b2db      	uxtb	r3, r3
    a8d4:	333d      	adds	r3, #61	; 0x3d
    a8d6:	b2db      	uxtb	r3, r3
    a8d8:	68ba      	ldr	r2, [r7, #8]
    a8da:	4619      	mov	r1, r3
    a8dc:	68f8      	ldr	r0, [r7, #12]
    a8de:	f7ff fa8e 	bl	9dfe <emit_write_bytecode_byte_unsigned_label>
}
    a8e2:	bf00      	nop
    a8e4:	3710      	adds	r7, #16
    a8e6:	46bd      	mov	sp, r7
    a8e8:	bd80      	pop	{r7, pc}

0000a8ea <mp_emit_bc_with_cleanup>:

void mp_emit_bc_with_cleanup(emit_t *emit, mp_uint_t label) {
    a8ea:	b580      	push	{r7, lr}
    a8ec:	b082      	sub	sp, #8
    a8ee:	af00      	add	r7, sp, #0
    a8f0:	6078      	str	r0, [r7, #4]
    a8f2:	6039      	str	r1, [r7, #0]
    mp_emit_bc_pop_block(emit);
    a8f4:	6878      	ldr	r0, [r7, #4]
    a8f6:	f000 f867 	bl	a9c8 <mp_emit_bc_pop_block>
    mp_emit_bc_load_const_tok(emit, MP_TOKEN_KW_NONE);
    a8fa:	210e      	movs	r1, #14
    a8fc:	6878      	ldr	r0, [r7, #4]
    a8fe:	f7ff fd33 	bl	a368 <mp_emit_bc_load_const_tok>
    mp_emit_bc_label_assign(emit, label);
    a902:	6839      	ldr	r1, [r7, #0]
    a904:	6878      	ldr	r0, [r7, #4]
    a906:	f7ff fcb1 	bl	a26c <mp_emit_bc_label_assign>
    emit_bc_pre(emit, 2); // ensure we have enough stack space to call the __exit__ method
    a90a:	2102      	movs	r1, #2
    a90c:	6878      	ldr	r0, [r7, #4]
    a90e:	f7ff fc95 	bl	a23c <emit_bc_pre>
    emit_write_bytecode_byte(emit, MP_BC_WITH_CLEANUP);
    a912:	213e      	movs	r1, #62	; 0x3e
    a914:	6878      	ldr	r0, [r7, #4]
    a916:	f7ff f939 	bl	9b8c <emit_write_bytecode_byte>
    emit_bc_pre(emit, -4); // cancel the 2 above, plus the 2 from mp_emit_bc_setup_block(MP_EMIT_SETUP_BLOCK_WITH)
    a91a:	f06f 0103 	mvn.w	r1, #3
    a91e:	6878      	ldr	r0, [r7, #4]
    a920:	f7ff fc8c 	bl	a23c <emit_bc_pre>
}
    a924:	bf00      	nop
    a926:	3708      	adds	r7, #8
    a928:	46bd      	mov	sp, r7
    a92a:	bd80      	pop	{r7, pc}

0000a92c <mp_emit_bc_end_finally>:

void mp_emit_bc_end_finally(emit_t *emit) {
    a92c:	b580      	push	{r7, lr}
    a92e:	b082      	sub	sp, #8
    a930:	af00      	add	r7, sp, #0
    a932:	6078      	str	r0, [r7, #4]
    emit_bc_pre(emit, -1);
    a934:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    a938:	6878      	ldr	r0, [r7, #4]
    a93a:	f7ff fc7f 	bl	a23c <emit_bc_pre>
    emit_write_bytecode_byte(emit, MP_BC_END_FINALLY);
    a93e:	2141      	movs	r1, #65	; 0x41
    a940:	6878      	ldr	r0, [r7, #4]
    a942:	f7ff f923 	bl	9b8c <emit_write_bytecode_byte>
}
    a946:	bf00      	nop
    a948:	3708      	adds	r7, #8
    a94a:	46bd      	mov	sp, r7
    a94c:	bd80      	pop	{r7, pc}

0000a94e <mp_emit_bc_get_iter>:

void mp_emit_bc_get_iter(emit_t *emit, bool use_stack) {
    a94e:	b580      	push	{r7, lr}
    a950:	b082      	sub	sp, #8
    a952:	af00      	add	r7, sp, #0
    a954:	6078      	str	r0, [r7, #4]
    a956:	460b      	mov	r3, r1
    a958:	70fb      	strb	r3, [r7, #3]
    emit_bc_pre(emit, use_stack ? MP_OBJ_ITER_BUF_NSLOTS - 1 : 0);
    a95a:	78fb      	ldrb	r3, [r7, #3]
    a95c:	2b00      	cmp	r3, #0
    a95e:	d001      	beq.n	a964 <mp_emit_bc_get_iter+0x16>
    a960:	2303      	movs	r3, #3
    a962:	e000      	b.n	a966 <mp_emit_bc_get_iter+0x18>
    a964:	2300      	movs	r3, #0
    a966:	4619      	mov	r1, r3
    a968:	6878      	ldr	r0, [r7, #4]
    a96a:	f7ff fc67 	bl	a23c <emit_bc_pre>
    emit_write_bytecode_byte(emit, use_stack ? MP_BC_GET_ITER_STACK : MP_BC_GET_ITER);
    a96e:	78fb      	ldrb	r3, [r7, #3]
    a970:	2b00      	cmp	r3, #0
    a972:	d001      	beq.n	a978 <mp_emit_bc_get_iter+0x2a>
    a974:	2347      	movs	r3, #71	; 0x47
    a976:	e000      	b.n	a97a <mp_emit_bc_get_iter+0x2c>
    a978:	2342      	movs	r3, #66	; 0x42
    a97a:	4619      	mov	r1, r3
    a97c:	6878      	ldr	r0, [r7, #4]
    a97e:	f7ff f905 	bl	9b8c <emit_write_bytecode_byte>
}
    a982:	bf00      	nop
    a984:	3708      	adds	r7, #8
    a986:	46bd      	mov	sp, r7
    a988:	bd80      	pop	{r7, pc}

0000a98a <mp_emit_bc_for_iter>:

void mp_emit_bc_for_iter(emit_t *emit, mp_uint_t label) {
    a98a:	b580      	push	{r7, lr}
    a98c:	b082      	sub	sp, #8
    a98e:	af00      	add	r7, sp, #0
    a990:	6078      	str	r0, [r7, #4]
    a992:	6039      	str	r1, [r7, #0]
    emit_bc_pre(emit, 1);
    a994:	2101      	movs	r1, #1
    a996:	6878      	ldr	r0, [r7, #4]
    a998:	f7ff fc50 	bl	a23c <emit_bc_pre>
    emit_write_bytecode_byte_unsigned_label(emit, MP_BC_FOR_ITER, label);
    a99c:	683a      	ldr	r2, [r7, #0]
    a99e:	2143      	movs	r1, #67	; 0x43
    a9a0:	6878      	ldr	r0, [r7, #4]
    a9a2:	f7ff fa2c 	bl	9dfe <emit_write_bytecode_byte_unsigned_label>
}
    a9a6:	bf00      	nop
    a9a8:	3708      	adds	r7, #8
    a9aa:	46bd      	mov	sp, r7
    a9ac:	bd80      	pop	{r7, pc}

0000a9ae <mp_emit_bc_for_iter_end>:

void mp_emit_bc_for_iter_end(emit_t *emit) {
    a9ae:	b580      	push	{r7, lr}
    a9b0:	b082      	sub	sp, #8
    a9b2:	af00      	add	r7, sp, #0
    a9b4:	6078      	str	r0, [r7, #4]
    emit_bc_pre(emit, -MP_OBJ_ITER_BUF_NSLOTS);
    a9b6:	f06f 0103 	mvn.w	r1, #3
    a9ba:	6878      	ldr	r0, [r7, #4]
    a9bc:	f7ff fc3e 	bl	a23c <emit_bc_pre>
}
    a9c0:	bf00      	nop
    a9c2:	3708      	adds	r7, #8
    a9c4:	46bd      	mov	sp, r7
    a9c6:	bd80      	pop	{r7, pc}

0000a9c8 <mp_emit_bc_pop_block>:

void mp_emit_bc_pop_block(emit_t *emit) {
    a9c8:	b580      	push	{r7, lr}
    a9ca:	b082      	sub	sp, #8
    a9cc:	af00      	add	r7, sp, #0
    a9ce:	6078      	str	r0, [r7, #4]
    emit_bc_pre(emit, 0);
    a9d0:	2100      	movs	r1, #0
    a9d2:	6878      	ldr	r0, [r7, #4]
    a9d4:	f7ff fc32 	bl	a23c <emit_bc_pre>
    emit_write_bytecode_byte(emit, MP_BC_POP_BLOCK);
    a9d8:	2144      	movs	r1, #68	; 0x44
    a9da:	6878      	ldr	r0, [r7, #4]
    a9dc:	f7ff f8d6 	bl	9b8c <emit_write_bytecode_byte>
}
    a9e0:	bf00      	nop
    a9e2:	3708      	adds	r7, #8
    a9e4:	46bd      	mov	sp, r7
    a9e6:	bd80      	pop	{r7, pc}

0000a9e8 <mp_emit_bc_pop_except>:

void mp_emit_bc_pop_except(emit_t *emit) {
    a9e8:	b580      	push	{r7, lr}
    a9ea:	b082      	sub	sp, #8
    a9ec:	af00      	add	r7, sp, #0
    a9ee:	6078      	str	r0, [r7, #4]
    emit_bc_pre(emit, 0);
    a9f0:	2100      	movs	r1, #0
    a9f2:	6878      	ldr	r0, [r7, #4]
    a9f4:	f7ff fc22 	bl	a23c <emit_bc_pre>
    emit_write_bytecode_byte(emit, MP_BC_POP_EXCEPT);
    a9f8:	2145      	movs	r1, #69	; 0x45
    a9fa:	6878      	ldr	r0, [r7, #4]
    a9fc:	f7ff f8c6 	bl	9b8c <emit_write_bytecode_byte>
}
    aa00:	bf00      	nop
    aa02:	3708      	adds	r7, #8
    aa04:	46bd      	mov	sp, r7
    aa06:	bd80      	pop	{r7, pc}

0000aa08 <mp_emit_bc_unary_op>:

void mp_emit_bc_unary_op(emit_t *emit, mp_unary_op_t op) {
    aa08:	b580      	push	{r7, lr}
    aa0a:	b082      	sub	sp, #8
    aa0c:	af00      	add	r7, sp, #0
    aa0e:	6078      	str	r0, [r7, #4]
    aa10:	6039      	str	r1, [r7, #0]
    emit_bc_pre(emit, 0);
    aa12:	2100      	movs	r1, #0
    aa14:	6878      	ldr	r0, [r7, #4]
    aa16:	f7ff fc11 	bl	a23c <emit_bc_pre>
    emit_write_bytecode_byte(emit, MP_BC_UNARY_OP_MULTI + op);
    aa1a:	683b      	ldr	r3, [r7, #0]
    aa1c:	b2db      	uxtb	r3, r3
    aa1e:	3b30      	subs	r3, #48	; 0x30
    aa20:	b2db      	uxtb	r3, r3
    aa22:	4619      	mov	r1, r3
    aa24:	6878      	ldr	r0, [r7, #4]
    aa26:	f7ff f8b1 	bl	9b8c <emit_write_bytecode_byte>
}
    aa2a:	bf00      	nop
    aa2c:	3708      	adds	r7, #8
    aa2e:	46bd      	mov	sp, r7
    aa30:	bd80      	pop	{r7, pc}

0000aa32 <mp_emit_bc_binary_op>:

void mp_emit_bc_binary_op(emit_t *emit, mp_binary_op_t op) {
    aa32:	b580      	push	{r7, lr}
    aa34:	b084      	sub	sp, #16
    aa36:	af00      	add	r7, sp, #0
    aa38:	6078      	str	r0, [r7, #4]
    aa3a:	6039      	str	r1, [r7, #0]
    bool invert = false;
    aa3c:	2300      	movs	r3, #0
    aa3e:	73fb      	strb	r3, [r7, #15]
    if (op == MP_BINARY_OP_NOT_IN) {
    aa40:	683b      	ldr	r3, [r7, #0]
    aa42:	2b24      	cmp	r3, #36	; 0x24
    aa44:	d104      	bne.n	aa50 <mp_emit_bc_binary_op+0x1e>
        invert = true;
    aa46:	2301      	movs	r3, #1
    aa48:	73fb      	strb	r3, [r7, #15]
        op = MP_BINARY_OP_IN;
    aa4a:	2306      	movs	r3, #6
    aa4c:	603b      	str	r3, [r7, #0]
    aa4e:	e006      	b.n	aa5e <mp_emit_bc_binary_op+0x2c>
    } else if (op == MP_BINARY_OP_IS_NOT) {
    aa50:	683b      	ldr	r3, [r7, #0]
    aa52:	2b25      	cmp	r3, #37	; 0x25
    aa54:	d103      	bne.n	aa5e <mp_emit_bc_binary_op+0x2c>
        invert = true;
    aa56:	2301      	movs	r3, #1
    aa58:	73fb      	strb	r3, [r7, #15]
        op = MP_BINARY_OP_IS;
    aa5a:	2307      	movs	r3, #7
    aa5c:	603b      	str	r3, [r7, #0]
    }
    emit_bc_pre(emit, -1);
    aa5e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    aa62:	6878      	ldr	r0, [r7, #4]
    aa64:	f7ff fbea 	bl	a23c <emit_bc_pre>
    emit_write_bytecode_byte(emit, MP_BC_BINARY_OP_MULTI + op);
    aa68:	683b      	ldr	r3, [r7, #0]
    aa6a:	b2db      	uxtb	r3, r3
    aa6c:	3b29      	subs	r3, #41	; 0x29
    aa6e:	b2db      	uxtb	r3, r3
    aa70:	4619      	mov	r1, r3
    aa72:	6878      	ldr	r0, [r7, #4]
    aa74:	f7ff f88a 	bl	9b8c <emit_write_bytecode_byte>
    if (invert) {
    aa78:	7bfb      	ldrb	r3, [r7, #15]
    aa7a:	2b00      	cmp	r3, #0
    aa7c:	d007      	beq.n	aa8e <mp_emit_bc_binary_op+0x5c>
        emit_bc_pre(emit, 0);
    aa7e:	2100      	movs	r1, #0
    aa80:	6878      	ldr	r0, [r7, #4]
    aa82:	f7ff fbdb 	bl	a23c <emit_bc_pre>
        emit_write_bytecode_byte(emit, MP_BC_UNARY_OP_MULTI + MP_UNARY_OP_NOT);
    aa86:	21d3      	movs	r1, #211	; 0xd3
    aa88:	6878      	ldr	r0, [r7, #4]
    aa8a:	f7ff f87f 	bl	9b8c <emit_write_bytecode_byte>
    }
}
    aa8e:	bf00      	nop
    aa90:	3710      	adds	r7, #16
    aa92:	46bd      	mov	sp, r7
    aa94:	bd80      	pop	{r7, pc}

0000aa96 <mp_emit_bc_build>:

void mp_emit_bc_build(emit_t *emit, mp_uint_t n_args, int kind) {
    aa96:	b580      	push	{r7, lr}
    aa98:	b084      	sub	sp, #16
    aa9a:	af00      	add	r7, sp, #0
    aa9c:	60f8      	str	r0, [r7, #12]
    aa9e:	60b9      	str	r1, [r7, #8]
    aaa0:	607a      	str	r2, [r7, #4]
    MP_STATIC_ASSERT(MP_BC_BUILD_TUPLE + MP_EMIT_BUILD_TUPLE == MP_BC_BUILD_TUPLE);
    MP_STATIC_ASSERT(MP_BC_BUILD_TUPLE + MP_EMIT_BUILD_LIST == MP_BC_BUILD_LIST);
    MP_STATIC_ASSERT(MP_BC_BUILD_TUPLE + MP_EMIT_BUILD_MAP == MP_BC_BUILD_MAP);
    MP_STATIC_ASSERT(MP_BC_BUILD_TUPLE + MP_EMIT_BUILD_SET == MP_BC_BUILD_SET);
    MP_STATIC_ASSERT(MP_BC_BUILD_TUPLE + MP_EMIT_BUILD_SLICE == MP_BC_BUILD_SLICE);
    if (kind == MP_EMIT_BUILD_MAP) {
    aaa2:	687b      	ldr	r3, [r7, #4]
    aaa4:	2b03      	cmp	r3, #3
    aaa6:	d104      	bne.n	aab2 <mp_emit_bc_build+0x1c>
        emit_bc_pre(emit, 1);
    aaa8:	2101      	movs	r1, #1
    aaaa:	68f8      	ldr	r0, [r7, #12]
    aaac:	f7ff fbc6 	bl	a23c <emit_bc_pre>
    aab0:	e006      	b.n	aac0 <mp_emit_bc_build+0x2a>
    } else {
        emit_bc_pre(emit, 1 - n_args);
    aab2:	68bb      	ldr	r3, [r7, #8]
    aab4:	f1c3 0301 	rsb	r3, r3, #1
    aab8:	4619      	mov	r1, r3
    aaba:	68f8      	ldr	r0, [r7, #12]
    aabc:	f7ff fbbe 	bl	a23c <emit_bc_pre>
    }
    emit_write_bytecode_byte_uint(emit, MP_BC_BUILD_TUPLE + kind, n_args);
    aac0:	687b      	ldr	r3, [r7, #4]
    aac2:	b2db      	uxtb	r3, r3
    aac4:	3350      	adds	r3, #80	; 0x50
    aac6:	b2db      	uxtb	r3, r3
    aac8:	68ba      	ldr	r2, [r7, #8]
    aaca:	4619      	mov	r1, r3
    aacc:	68f8      	ldr	r0, [r7, #12]
    aace:	f7ff f8f0 	bl	9cb2 <emit_write_bytecode_byte_uint>
}
    aad2:	bf00      	nop
    aad4:	3710      	adds	r7, #16
    aad6:	46bd      	mov	sp, r7
    aad8:	bd80      	pop	{r7, pc}

0000aada <mp_emit_bc_store_map>:

void mp_emit_bc_store_map(emit_t *emit) {
    aada:	b580      	push	{r7, lr}
    aadc:	b082      	sub	sp, #8
    aade:	af00      	add	r7, sp, #0
    aae0:	6078      	str	r0, [r7, #4]
    emit_bc_pre(emit, -2);
    aae2:	f06f 0101 	mvn.w	r1, #1
    aae6:	6878      	ldr	r0, [r7, #4]
    aae8:	f7ff fba8 	bl	a23c <emit_bc_pre>
    emit_write_bytecode_byte(emit, MP_BC_STORE_MAP);
    aaec:	2154      	movs	r1, #84	; 0x54
    aaee:	6878      	ldr	r0, [r7, #4]
    aaf0:	f7ff f84c 	bl	9b8c <emit_write_bytecode_byte>
}
    aaf4:	bf00      	nop
    aaf6:	3708      	adds	r7, #8
    aaf8:	46bd      	mov	sp, r7
    aafa:	bd80      	pop	{r7, pc}

0000aafc <mp_emit_bc_store_comp>:

void mp_emit_bc_store_comp(emit_t *emit, scope_kind_t kind, mp_uint_t collection_stack_index) {
    aafc:	b580      	push	{r7, lr}
    aafe:	b086      	sub	sp, #24
    ab00:	af00      	add	r7, sp, #0
    ab02:	60f8      	str	r0, [r7, #12]
    ab04:	60b9      	str	r1, [r7, #8]
    ab06:	607a      	str	r2, [r7, #4]
    int t;
    int n;
    if (kind == SCOPE_LIST_COMP) {
    ab08:	68bb      	ldr	r3, [r7, #8]
    ab0a:	2b03      	cmp	r3, #3
    ab0c:	d104      	bne.n	ab18 <mp_emit_bc_store_comp+0x1c>
        n = 0;
    ab0e:	2300      	movs	r3, #0
    ab10:	613b      	str	r3, [r7, #16]
        t = 0;
    ab12:	2300      	movs	r3, #0
    ab14:	617b      	str	r3, [r7, #20]
    ab16:	e003      	b.n	ab20 <mp_emit_bc_store_comp+0x24>
    } else if (!MICROPY_PY_BUILTINS_SET || kind == SCOPE_DICT_COMP) {
        n = 1;
    ab18:	2301      	movs	r3, #1
    ab1a:	613b      	str	r3, [r7, #16]
        t = 1;
    ab1c:	2301      	movs	r3, #1
    ab1e:	617b      	str	r3, [r7, #20]
    } else if (MICROPY_PY_BUILTINS_SET) {
        n = 0;
        t = 2;
    }
    emit_bc_pre(emit, -1 - n);
    ab20:	693b      	ldr	r3, [r7, #16]
    ab22:	43db      	mvns	r3, r3
    ab24:	4619      	mov	r1, r3
    ab26:	68f8      	ldr	r0, [r7, #12]
    ab28:	f7ff fb88 	bl	a23c <emit_bc_pre>
    // the lower 2 bits of the opcode argument indicate the collection type
    emit_write_bytecode_byte_uint(emit, MP_BC_STORE_COMP, ((collection_stack_index + n) << 2) | t);
    ab2c:	693a      	ldr	r2, [r7, #16]
    ab2e:	687b      	ldr	r3, [r7, #4]
    ab30:	4413      	add	r3, r2
    ab32:	009a      	lsls	r2, r3, #2
    ab34:	697b      	ldr	r3, [r7, #20]
    ab36:	4313      	orrs	r3, r2
    ab38:	461a      	mov	r2, r3
    ab3a:	2157      	movs	r1, #87	; 0x57
    ab3c:	68f8      	ldr	r0, [r7, #12]
    ab3e:	f7ff f8b8 	bl	9cb2 <emit_write_bytecode_byte_uint>
}
    ab42:	bf00      	nop
    ab44:	3718      	adds	r7, #24
    ab46:	46bd      	mov	sp, r7
    ab48:	bd80      	pop	{r7, pc}

0000ab4a <mp_emit_bc_unpack_sequence>:

void mp_emit_bc_unpack_sequence(emit_t *emit, mp_uint_t n_args) {
    ab4a:	b580      	push	{r7, lr}
    ab4c:	b082      	sub	sp, #8
    ab4e:	af00      	add	r7, sp, #0
    ab50:	6078      	str	r0, [r7, #4]
    ab52:	6039      	str	r1, [r7, #0]
    emit_bc_pre(emit, -1 + n_args);
    ab54:	683b      	ldr	r3, [r7, #0]
    ab56:	3b01      	subs	r3, #1
    ab58:	4619      	mov	r1, r3
    ab5a:	6878      	ldr	r0, [r7, #4]
    ab5c:	f7ff fb6e 	bl	a23c <emit_bc_pre>
    emit_write_bytecode_byte_uint(emit, MP_BC_UNPACK_SEQUENCE, n_args);
    ab60:	683a      	ldr	r2, [r7, #0]
    ab62:	2159      	movs	r1, #89	; 0x59
    ab64:	6878      	ldr	r0, [r7, #4]
    ab66:	f7ff f8a4 	bl	9cb2 <emit_write_bytecode_byte_uint>
}
    ab6a:	bf00      	nop
    ab6c:	3708      	adds	r7, #8
    ab6e:	46bd      	mov	sp, r7
    ab70:	bd80      	pop	{r7, pc}

0000ab72 <mp_emit_bc_unpack_ex>:

void mp_emit_bc_unpack_ex(emit_t *emit, mp_uint_t n_left, mp_uint_t n_right) {
    ab72:	b580      	push	{r7, lr}
    ab74:	b084      	sub	sp, #16
    ab76:	af00      	add	r7, sp, #0
    ab78:	60f8      	str	r0, [r7, #12]
    ab7a:	60b9      	str	r1, [r7, #8]
    ab7c:	607a      	str	r2, [r7, #4]
    emit_bc_pre(emit, -1 + n_left + n_right + 1);
    ab7e:	68ba      	ldr	r2, [r7, #8]
    ab80:	687b      	ldr	r3, [r7, #4]
    ab82:	4413      	add	r3, r2
    ab84:	4619      	mov	r1, r3
    ab86:	68f8      	ldr	r0, [r7, #12]
    ab88:	f7ff fb58 	bl	a23c <emit_bc_pre>
    emit_write_bytecode_byte_uint(emit, MP_BC_UNPACK_EX, n_left | (n_right << 8));
    ab8c:	687b      	ldr	r3, [r7, #4]
    ab8e:	021a      	lsls	r2, r3, #8
    ab90:	68bb      	ldr	r3, [r7, #8]
    ab92:	4313      	orrs	r3, r2
    ab94:	461a      	mov	r2, r3
    ab96:	215a      	movs	r1, #90	; 0x5a
    ab98:	68f8      	ldr	r0, [r7, #12]
    ab9a:	f7ff f88a 	bl	9cb2 <emit_write_bytecode_byte_uint>
}
    ab9e:	bf00      	nop
    aba0:	3710      	adds	r7, #16
    aba2:	46bd      	mov	sp, r7
    aba4:	bd80      	pop	{r7, pc}

0000aba6 <mp_emit_bc_make_function>:

void mp_emit_bc_make_function(emit_t *emit, scope_t *scope, mp_uint_t n_pos_defaults, mp_uint_t n_kw_defaults) {
    aba6:	b580      	push	{r7, lr}
    aba8:	b084      	sub	sp, #16
    abaa:	af00      	add	r7, sp, #0
    abac:	60f8      	str	r0, [r7, #12]
    abae:	60b9      	str	r1, [r7, #8]
    abb0:	607a      	str	r2, [r7, #4]
    abb2:	603b      	str	r3, [r7, #0]
    if (n_pos_defaults == 0 && n_kw_defaults == 0) {
    abb4:	687b      	ldr	r3, [r7, #4]
    abb6:	2b00      	cmp	r3, #0
    abb8:	d10e      	bne.n	abd8 <mp_emit_bc_make_function+0x32>
    abba:	683b      	ldr	r3, [r7, #0]
    abbc:	2b00      	cmp	r3, #0
    abbe:	d10b      	bne.n	abd8 <mp_emit_bc_make_function+0x32>
        emit_bc_pre(emit, 1);
    abc0:	2101      	movs	r1, #1
    abc2:	68f8      	ldr	r0, [r7, #12]
    abc4:	f7ff fb3a 	bl	a23c <emit_bc_pre>
        emit_write_bytecode_byte_raw_code(emit, MP_BC_MAKE_FUNCTION, scope->raw_code);
    abc8:	68bb      	ldr	r3, [r7, #8]
    abca:	695b      	ldr	r3, [r3, #20]
    abcc:	461a      	mov	r2, r3
    abce:	2160      	movs	r1, #96	; 0x60
    abd0:	68f8      	ldr	r0, [r7, #12]
    abd2:	f7ff f8f1 	bl	9db8 <emit_write_bytecode_byte_raw_code>
    abd6:	e00b      	b.n	abf0 <mp_emit_bc_make_function+0x4a>
    } else {
        emit_bc_pre(emit, -1);
    abd8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    abdc:	68f8      	ldr	r0, [r7, #12]
    abde:	f7ff fb2d 	bl	a23c <emit_bc_pre>
        emit_write_bytecode_byte_raw_code(emit, MP_BC_MAKE_FUNCTION_DEFARGS, scope->raw_code);
    abe2:	68bb      	ldr	r3, [r7, #8]
    abe4:	695b      	ldr	r3, [r3, #20]
    abe6:	461a      	mov	r2, r3
    abe8:	2161      	movs	r1, #97	; 0x61
    abea:	68f8      	ldr	r0, [r7, #12]
    abec:	f7ff f8e4 	bl	9db8 <emit_write_bytecode_byte_raw_code>
    }
}
    abf0:	bf00      	nop
    abf2:	3710      	adds	r7, #16
    abf4:	46bd      	mov	sp, r7
    abf6:	bd80      	pop	{r7, pc}

0000abf8 <mp_emit_bc_make_closure>:

void mp_emit_bc_make_closure(emit_t *emit, scope_t *scope, mp_uint_t n_closed_over, mp_uint_t n_pos_defaults, mp_uint_t n_kw_defaults) {
    abf8:	b580      	push	{r7, lr}
    abfa:	b084      	sub	sp, #16
    abfc:	af00      	add	r7, sp, #0
    abfe:	60f8      	str	r0, [r7, #12]
    ac00:	60b9      	str	r1, [r7, #8]
    ac02:	607a      	str	r2, [r7, #4]
    ac04:	603b      	str	r3, [r7, #0]
    if (n_pos_defaults == 0 && n_kw_defaults == 0) {
    ac06:	683b      	ldr	r3, [r7, #0]
    ac08:	2b00      	cmp	r3, #0
    ac0a:	d117      	bne.n	ac3c <mp_emit_bc_make_closure+0x44>
    ac0c:	69bb      	ldr	r3, [r7, #24]
    ac0e:	2b00      	cmp	r3, #0
    ac10:	d114      	bne.n	ac3c <mp_emit_bc_make_closure+0x44>
        emit_bc_pre(emit, -n_closed_over + 1);
    ac12:	687b      	ldr	r3, [r7, #4]
    ac14:	f1c3 0301 	rsb	r3, r3, #1
    ac18:	4619      	mov	r1, r3
    ac1a:	68f8      	ldr	r0, [r7, #12]
    ac1c:	f7ff fb0e 	bl	a23c <emit_bc_pre>
        emit_write_bytecode_byte_raw_code(emit, MP_BC_MAKE_CLOSURE, scope->raw_code);
    ac20:	68bb      	ldr	r3, [r7, #8]
    ac22:	695b      	ldr	r3, [r3, #20]
    ac24:	461a      	mov	r2, r3
    ac26:	2162      	movs	r1, #98	; 0x62
    ac28:	68f8      	ldr	r0, [r7, #12]
    ac2a:	f7ff f8c5 	bl	9db8 <emit_write_bytecode_byte_raw_code>
        emit_write_bytecode_byte(emit, n_closed_over);
    ac2e:	687b      	ldr	r3, [r7, #4]
    ac30:	b2db      	uxtb	r3, r3
    ac32:	4619      	mov	r1, r3
    ac34:	68f8      	ldr	r0, [r7, #12]
    ac36:	f7fe ffa9 	bl	9b8c <emit_write_bytecode_byte>
    ac3a:	e01c      	b.n	ac76 <mp_emit_bc_make_closure+0x7e>
    } else {
        assert(n_closed_over <= 255);
    ac3c:	687b      	ldr	r3, [r7, #4]
    ac3e:	2bff      	cmp	r3, #255	; 0xff
    ac40:	d906      	bls.n	ac50 <mp_emit_bc_make_closure+0x58>
    ac42:	4b0f      	ldr	r3, [pc, #60]	; (ac80 <mp_emit_bc_make_closure+0x88>)
    ac44:	4a0f      	ldr	r2, [pc, #60]	; (ac84 <mp_emit_bc_make_closure+0x8c>)
    ac46:	f240 315b 	movw	r1, #859	; 0x35b
    ac4a:	480f      	ldr	r0, [pc, #60]	; (ac88 <mp_emit_bc_make_closure+0x90>)
    ac4c:	f010 fab6 	bl	1b1bc <__assert_func>
        emit_bc_pre(emit, -2 - (mp_int_t)n_closed_over + 1);
    ac50:	687b      	ldr	r3, [r7, #4]
    ac52:	43db      	mvns	r3, r3
    ac54:	4619      	mov	r1, r3
    ac56:	68f8      	ldr	r0, [r7, #12]
    ac58:	f7ff faf0 	bl	a23c <emit_bc_pre>
        emit_write_bytecode_byte_raw_code(emit, MP_BC_MAKE_CLOSURE_DEFARGS, scope->raw_code);
    ac5c:	68bb      	ldr	r3, [r7, #8]
    ac5e:	695b      	ldr	r3, [r3, #20]
    ac60:	461a      	mov	r2, r3
    ac62:	2163      	movs	r1, #99	; 0x63
    ac64:	68f8      	ldr	r0, [r7, #12]
    ac66:	f7ff f8a7 	bl	9db8 <emit_write_bytecode_byte_raw_code>
        emit_write_bytecode_byte(emit, n_closed_over);
    ac6a:	687b      	ldr	r3, [r7, #4]
    ac6c:	b2db      	uxtb	r3, r3
    ac6e:	4619      	mov	r1, r3
    ac70:	68f8      	ldr	r0, [r7, #12]
    ac72:	f7fe ff8b 	bl	9b8c <emit_write_bytecode_byte>
    }
}
    ac76:	bf00      	nop
    ac78:	3710      	adds	r7, #16
    ac7a:	46bd      	mov	sp, r7
    ac7c:	bd80      	pop	{r7, pc}
    ac7e:	bf00      	nop
    ac80:	0001f100 	.word	0x0001f100
    ac84:	0001f238 	.word	0x0001f238
    ac88:	0001ef64 	.word	0x0001ef64

0000ac8c <emit_bc_call_function_method_helper>:

STATIC void emit_bc_call_function_method_helper(emit_t *emit, mp_int_t stack_adj, mp_uint_t bytecode_base, mp_uint_t n_positional, mp_uint_t n_keyword, mp_uint_t star_flags) {
    ac8c:	b580      	push	{r7, lr}
    ac8e:	b084      	sub	sp, #16
    ac90:	af00      	add	r7, sp, #0
    ac92:	60f8      	str	r0, [r7, #12]
    ac94:	60b9      	str	r1, [r7, #8]
    ac96:	607a      	str	r2, [r7, #4]
    ac98:	603b      	str	r3, [r7, #0]
    if (star_flags) {
    ac9a:	69fb      	ldr	r3, [r7, #28]
    ac9c:	2b00      	cmp	r3, #0
    ac9e:	d017      	beq.n	acd0 <emit_bc_call_function_method_helper+0x44>
        emit_bc_pre(emit, stack_adj - (mp_int_t)n_positional - 2 * (mp_int_t)n_keyword - 2);
    aca0:	683b      	ldr	r3, [r7, #0]
    aca2:	68ba      	ldr	r2, [r7, #8]
    aca4:	1ad2      	subs	r2, r2, r3
    aca6:	69bb      	ldr	r3, [r7, #24]
    aca8:	005b      	lsls	r3, r3, #1
    acaa:	1ad3      	subs	r3, r2, r3
    acac:	3b02      	subs	r3, #2
    acae:	4619      	mov	r1, r3
    acb0:	68f8      	ldr	r0, [r7, #12]
    acb2:	f7ff fac3 	bl	a23c <emit_bc_pre>
        emit_write_bytecode_byte_uint(emit, bytecode_base + 1, (n_keyword << 8) | n_positional); // TODO make it 2 separate uints?
    acb6:	687b      	ldr	r3, [r7, #4]
    acb8:	b2db      	uxtb	r3, r3
    acba:	3301      	adds	r3, #1
    acbc:	b2d9      	uxtb	r1, r3
    acbe:	69bb      	ldr	r3, [r7, #24]
    acc0:	021a      	lsls	r2, r3, #8
    acc2:	683b      	ldr	r3, [r7, #0]
    acc4:	4313      	orrs	r3, r2
    acc6:	461a      	mov	r2, r3
    acc8:	68f8      	ldr	r0, [r7, #12]
    acca:	f7fe fff2 	bl	9cb2 <emit_write_bytecode_byte_uint>
    } else {
        emit_bc_pre(emit, stack_adj - (mp_int_t)n_positional - 2 * (mp_int_t)n_keyword);
        emit_write_bytecode_byte_uint(emit, bytecode_base, (n_keyword << 8) | n_positional); // TODO make it 2 separate uints?
    }
}
    acce:	e013      	b.n	acf8 <emit_bc_call_function_method_helper+0x6c>
        emit_bc_pre(emit, stack_adj - (mp_int_t)n_positional - 2 * (mp_int_t)n_keyword);
    acd0:	683b      	ldr	r3, [r7, #0]
    acd2:	68ba      	ldr	r2, [r7, #8]
    acd4:	1ad2      	subs	r2, r2, r3
    acd6:	69bb      	ldr	r3, [r7, #24]
    acd8:	005b      	lsls	r3, r3, #1
    acda:	1ad3      	subs	r3, r2, r3
    acdc:	4619      	mov	r1, r3
    acde:	68f8      	ldr	r0, [r7, #12]
    ace0:	f7ff faac 	bl	a23c <emit_bc_pre>
        emit_write_bytecode_byte_uint(emit, bytecode_base, (n_keyword << 8) | n_positional); // TODO make it 2 separate uints?
    ace4:	687b      	ldr	r3, [r7, #4]
    ace6:	b2d9      	uxtb	r1, r3
    ace8:	69bb      	ldr	r3, [r7, #24]
    acea:	021a      	lsls	r2, r3, #8
    acec:	683b      	ldr	r3, [r7, #0]
    acee:	4313      	orrs	r3, r2
    acf0:	461a      	mov	r2, r3
    acf2:	68f8      	ldr	r0, [r7, #12]
    acf4:	f7fe ffdd 	bl	9cb2 <emit_write_bytecode_byte_uint>
}
    acf8:	bf00      	nop
    acfa:	3710      	adds	r7, #16
    acfc:	46bd      	mov	sp, r7
    acfe:	bd80      	pop	{r7, pc}

0000ad00 <mp_emit_bc_call_function>:

void mp_emit_bc_call_function(emit_t *emit, mp_uint_t n_positional, mp_uint_t n_keyword, mp_uint_t star_flags) {
    ad00:	b580      	push	{r7, lr}
    ad02:	b086      	sub	sp, #24
    ad04:	af02      	add	r7, sp, #8
    ad06:	60f8      	str	r0, [r7, #12]
    ad08:	60b9      	str	r1, [r7, #8]
    ad0a:	607a      	str	r2, [r7, #4]
    ad0c:	603b      	str	r3, [r7, #0]
    emit_bc_call_function_method_helper(emit, 0, MP_BC_CALL_FUNCTION, n_positional, n_keyword, star_flags);
    ad0e:	683b      	ldr	r3, [r7, #0]
    ad10:	9301      	str	r3, [sp, #4]
    ad12:	687b      	ldr	r3, [r7, #4]
    ad14:	9300      	str	r3, [sp, #0]
    ad16:	68bb      	ldr	r3, [r7, #8]
    ad18:	2264      	movs	r2, #100	; 0x64
    ad1a:	2100      	movs	r1, #0
    ad1c:	68f8      	ldr	r0, [r7, #12]
    ad1e:	f7ff ffb5 	bl	ac8c <emit_bc_call_function_method_helper>
}
    ad22:	bf00      	nop
    ad24:	3710      	adds	r7, #16
    ad26:	46bd      	mov	sp, r7
    ad28:	bd80      	pop	{r7, pc}

0000ad2a <mp_emit_bc_call_method>:

void mp_emit_bc_call_method(emit_t *emit, mp_uint_t n_positional, mp_uint_t n_keyword, mp_uint_t star_flags) {
    ad2a:	b580      	push	{r7, lr}
    ad2c:	b086      	sub	sp, #24
    ad2e:	af02      	add	r7, sp, #8
    ad30:	60f8      	str	r0, [r7, #12]
    ad32:	60b9      	str	r1, [r7, #8]
    ad34:	607a      	str	r2, [r7, #4]
    ad36:	603b      	str	r3, [r7, #0]
    emit_bc_call_function_method_helper(emit, -1, MP_BC_CALL_METHOD, n_positional, n_keyword, star_flags);
    ad38:	683b      	ldr	r3, [r7, #0]
    ad3a:	9301      	str	r3, [sp, #4]
    ad3c:	687b      	ldr	r3, [r7, #4]
    ad3e:	9300      	str	r3, [sp, #0]
    ad40:	68bb      	ldr	r3, [r7, #8]
    ad42:	2266      	movs	r2, #102	; 0x66
    ad44:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    ad48:	68f8      	ldr	r0, [r7, #12]
    ad4a:	f7ff ff9f 	bl	ac8c <emit_bc_call_function_method_helper>
}
    ad4e:	bf00      	nop
    ad50:	3710      	adds	r7, #16
    ad52:	46bd      	mov	sp, r7
    ad54:	bd80      	pop	{r7, pc}

0000ad56 <mp_emit_bc_return_value>:

void mp_emit_bc_return_value(emit_t *emit) {
    ad56:	b580      	push	{r7, lr}
    ad58:	b082      	sub	sp, #8
    ad5a:	af00      	add	r7, sp, #0
    ad5c:	6078      	str	r0, [r7, #4]
    emit_bc_pre(emit, -1);
    ad5e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    ad62:	6878      	ldr	r0, [r7, #4]
    ad64:	f7ff fa6a 	bl	a23c <emit_bc_pre>
    emit->last_emit_was_return_value = true;
    ad68:	687b      	ldr	r3, [r7, #4]
    ad6a:	2201      	movs	r2, #1
    ad6c:	719a      	strb	r2, [r3, #6]
    emit_write_bytecode_byte(emit, MP_BC_RETURN_VALUE);
    ad6e:	215b      	movs	r1, #91	; 0x5b
    ad70:	6878      	ldr	r0, [r7, #4]
    ad72:	f7fe ff0b 	bl	9b8c <emit_write_bytecode_byte>
}
    ad76:	bf00      	nop
    ad78:	3708      	adds	r7, #8
    ad7a:	46bd      	mov	sp, r7
    ad7c:	bd80      	pop	{r7, pc}

0000ad7e <mp_emit_bc_raise_varargs>:

void mp_emit_bc_raise_varargs(emit_t *emit, mp_uint_t n_args) {
    ad7e:	b580      	push	{r7, lr}
    ad80:	b082      	sub	sp, #8
    ad82:	af00      	add	r7, sp, #0
    ad84:	6078      	str	r0, [r7, #4]
    ad86:	6039      	str	r1, [r7, #0]
    assert(n_args <= 2);
    ad88:	683b      	ldr	r3, [r7, #0]
    ad8a:	2b02      	cmp	r3, #2
    ad8c:	d906      	bls.n	ad9c <mp_emit_bc_raise_varargs+0x1e>
    ad8e:	4b0c      	ldr	r3, [pc, #48]	; (adc0 <mp_emit_bc_raise_varargs+0x42>)
    ad90:	4a0c      	ldr	r2, [pc, #48]	; (adc4 <mp_emit_bc_raise_varargs+0x46>)
    ad92:	f240 317b 	movw	r1, #891	; 0x37b
    ad96:	480c      	ldr	r0, [pc, #48]	; (adc8 <mp_emit_bc_raise_varargs+0x4a>)
    ad98:	f010 fa10 	bl	1b1bc <__assert_func>
    emit_bc_pre(emit, -n_args);
    ad9c:	683b      	ldr	r3, [r7, #0]
    ad9e:	425b      	negs	r3, r3
    ada0:	4619      	mov	r1, r3
    ada2:	6878      	ldr	r0, [r7, #4]
    ada4:	f7ff fa4a 	bl	a23c <emit_bc_pre>
    emit_write_bytecode_byte_byte(emit, MP_BC_RAISE_VARARGS, n_args);
    ada8:	683b      	ldr	r3, [r7, #0]
    adaa:	b2db      	uxtb	r3, r3
    adac:	461a      	mov	r2, r3
    adae:	215c      	movs	r1, #92	; 0x5c
    adb0:	6878      	ldr	r0, [r7, #4]
    adb2:	f7fe fefd 	bl	9bb0 <emit_write_bytecode_byte_byte>
}
    adb6:	bf00      	nop
    adb8:	3708      	adds	r7, #8
    adba:	46bd      	mov	sp, r7
    adbc:	bd80      	pop	{r7, pc}
    adbe:	bf00      	nop
    adc0:	0001f118 	.word	0x0001f118
    adc4:	0001f250 	.word	0x0001f250
    adc8:	0001ef64 	.word	0x0001ef64

0000adcc <mp_emit_bc_yield>:

void mp_emit_bc_yield(emit_t *emit, int kind) {
    adcc:	b580      	push	{r7, lr}
    adce:	b082      	sub	sp, #8
    add0:	af00      	add	r7, sp, #0
    add2:	6078      	str	r0, [r7, #4]
    add4:	6039      	str	r1, [r7, #0]
    MP_STATIC_ASSERT(MP_BC_YIELD_VALUE + 1 == MP_BC_YIELD_FROM);
    emit_bc_pre(emit, -kind);
    add6:	683b      	ldr	r3, [r7, #0]
    add8:	425b      	negs	r3, r3
    adda:	4619      	mov	r1, r3
    addc:	6878      	ldr	r0, [r7, #4]
    adde:	f7ff fa2d 	bl	a23c <emit_bc_pre>
    emit->scope->scope_flags |= MP_SCOPE_FLAG_GENERATOR;
    ade2:	687b      	ldr	r3, [r7, #4]
    ade4:	68db      	ldr	r3, [r3, #12]
    ade6:	687a      	ldr	r2, [r7, #4]
    ade8:	68d2      	ldr	r2, [r2, #12]
    adea:	7e12      	ldrb	r2, [r2, #24]
    adec:	f042 0204 	orr.w	r2, r2, #4
    adf0:	b2d2      	uxtb	r2, r2
    adf2:	761a      	strb	r2, [r3, #24]
    emit_write_bytecode_byte(emit, MP_BC_YIELD_VALUE + kind);
    adf4:	683b      	ldr	r3, [r7, #0]
    adf6:	b2db      	uxtb	r3, r3
    adf8:	335d      	adds	r3, #93	; 0x5d
    adfa:	b2db      	uxtb	r3, r3
    adfc:	4619      	mov	r1, r3
    adfe:	6878      	ldr	r0, [r7, #4]
    ae00:	f7fe fec4 	bl	9b8c <emit_write_bytecode_byte>
}
    ae04:	bf00      	nop
    ae06:	3708      	adds	r7, #8
    ae08:	46bd      	mov	sp, r7
    ae0a:	bd80      	pop	{r7, pc}

0000ae0c <mp_emit_bc_start_except_handler>:

void mp_emit_bc_start_except_handler(emit_t *emit) {
    ae0c:	b580      	push	{r7, lr}
    ae0e:	b082      	sub	sp, #8
    ae10:	af00      	add	r7, sp, #0
    ae12:	6078      	str	r0, [r7, #4]
    mp_emit_bc_adjust_stack_size(emit, 4); // stack adjust for the exception instance, +3 for possible UNWIND_JUMP state
    ae14:	2104      	movs	r1, #4
    ae16:	6878      	ldr	r0, [r7, #4]
    ae18:	f7ff f9d9 	bl	a1ce <mp_emit_bc_adjust_stack_size>
}
    ae1c:	bf00      	nop
    ae1e:	3708      	adds	r7, #8
    ae20:	46bd      	mov	sp, r7
    ae22:	bd80      	pop	{r7, pc}

0000ae24 <mp_emit_bc_end_except_handler>:

void mp_emit_bc_end_except_handler(emit_t *emit) {
    ae24:	b580      	push	{r7, lr}
    ae26:	b082      	sub	sp, #8
    ae28:	af00      	add	r7, sp, #0
    ae2a:	6078      	str	r0, [r7, #4]
    mp_emit_bc_adjust_stack_size(emit, -3); // stack adjust
    ae2c:	f06f 0102 	mvn.w	r1, #2
    ae30:	6878      	ldr	r0, [r7, #4]
    ae32:	f7ff f9cc 	bl	a1ce <mp_emit_bc_adjust_stack_size>
}
    ae36:	bf00      	nop
    ae38:	3708      	adds	r7, #8
    ae3a:	46bd      	mov	sp, r7
    ae3c:	bd80      	pop	{r7, pc}
    ae3e:	bf00      	nop

0000ae40 <mp_parse_num_base>:
#include "py/misc.h"
#include "py/parsenumbase.h"

// find real radix base, and strip preceding '0x', '0o' and '0b'
// puts base in *base, and returns number of bytes to skip the prefix
size_t mp_parse_num_base(const char *str, size_t len, int *base) {
    ae40:	b480      	push	{r7}
    ae42:	b087      	sub	sp, #28
    ae44:	af00      	add	r7, sp, #0
    ae46:	60f8      	str	r0, [r7, #12]
    ae48:	60b9      	str	r1, [r7, #8]
    ae4a:	607a      	str	r2, [r7, #4]
    const byte *p = (const byte*)str;
    ae4c:	68fb      	ldr	r3, [r7, #12]
    ae4e:	617b      	str	r3, [r7, #20]
    if (len <= 1) {
    ae50:	68bb      	ldr	r3, [r7, #8]
    ae52:	2b01      	cmp	r3, #1
    ae54:	d971      	bls.n	af3a <mp_parse_num_base+0xfa>
        goto no_prefix;
    }
    unichar c = *(p++);
    ae56:	697b      	ldr	r3, [r7, #20]
    ae58:	1c5a      	adds	r2, r3, #1
    ae5a:	617a      	str	r2, [r7, #20]
    ae5c:	781b      	ldrb	r3, [r3, #0]
    ae5e:	613b      	str	r3, [r7, #16]
    if ((*base == 0 || *base == 16) && c == '0') {
    ae60:	687b      	ldr	r3, [r7, #4]
    ae62:	681b      	ldr	r3, [r3, #0]
    ae64:	2b00      	cmp	r3, #0
    ae66:	d003      	beq.n	ae70 <mp_parse_num_base+0x30>
    ae68:	687b      	ldr	r3, [r7, #4]
    ae6a:	681b      	ldr	r3, [r3, #0]
    ae6c:	2b10      	cmp	r3, #16
    ae6e:	d136      	bne.n	aede <mp_parse_num_base+0x9e>
    ae70:	693b      	ldr	r3, [r7, #16]
    ae72:	2b30      	cmp	r3, #48	; 0x30
    ae74:	d133      	bne.n	aede <mp_parse_num_base+0x9e>
        c = *(p++);
    ae76:	697b      	ldr	r3, [r7, #20]
    ae78:	1c5a      	adds	r2, r3, #1
    ae7a:	617a      	str	r2, [r7, #20]
    ae7c:	781b      	ldrb	r3, [r3, #0]
    ae7e:	613b      	str	r3, [r7, #16]
        if ((c | 32) == 'x') {
    ae80:	693b      	ldr	r3, [r7, #16]
    ae82:	f043 0320 	orr.w	r3, r3, #32
    ae86:	2b78      	cmp	r3, #120	; 0x78
    ae88:	d103      	bne.n	ae92 <mp_parse_num_base+0x52>
            *base = 16;
    ae8a:	687b      	ldr	r3, [r7, #4]
    ae8c:	2210      	movs	r2, #16
    ae8e:	601a      	str	r2, [r3, #0]
        if ((c | 32) == 'x') {
    ae90:	e05b      	b.n	af4a <mp_parse_num_base+0x10a>
        } else if (*base == 0 && (c | 32) == 'o') {
    ae92:	687b      	ldr	r3, [r7, #4]
    ae94:	681b      	ldr	r3, [r3, #0]
    ae96:	2b00      	cmp	r3, #0
    ae98:	d108      	bne.n	aeac <mp_parse_num_base+0x6c>
    ae9a:	693b      	ldr	r3, [r7, #16]
    ae9c:	f043 0320 	orr.w	r3, r3, #32
    aea0:	2b6f      	cmp	r3, #111	; 0x6f
    aea2:	d103      	bne.n	aeac <mp_parse_num_base+0x6c>
            *base = 8;
    aea4:	687b      	ldr	r3, [r7, #4]
    aea6:	2208      	movs	r2, #8
    aea8:	601a      	str	r2, [r3, #0]
    aeaa:	e017      	b.n	aedc <mp_parse_num_base+0x9c>
        } else if (*base == 0 && (c | 32) == 'b') {
    aeac:	687b      	ldr	r3, [r7, #4]
    aeae:	681b      	ldr	r3, [r3, #0]
    aeb0:	2b00      	cmp	r3, #0
    aeb2:	d108      	bne.n	aec6 <mp_parse_num_base+0x86>
    aeb4:	693b      	ldr	r3, [r7, #16]
    aeb6:	f043 0320 	orr.w	r3, r3, #32
    aeba:	2b62      	cmp	r3, #98	; 0x62
    aebc:	d103      	bne.n	aec6 <mp_parse_num_base+0x86>
            *base = 2;
    aebe:	687b      	ldr	r3, [r7, #4]
    aec0:	2202      	movs	r2, #2
    aec2:	601a      	str	r2, [r3, #0]
    aec4:	e00a      	b.n	aedc <mp_parse_num_base+0x9c>
        } else {
            if (*base == 0) {
    aec6:	687b      	ldr	r3, [r7, #4]
    aec8:	681b      	ldr	r3, [r3, #0]
    aeca:	2b00      	cmp	r3, #0
    aecc:	d102      	bne.n	aed4 <mp_parse_num_base+0x94>
                *base = 10;
    aece:	687b      	ldr	r3, [r7, #4]
    aed0:	220a      	movs	r2, #10
    aed2:	601a      	str	r2, [r3, #0]
            }
            p -= 2;
    aed4:	697b      	ldr	r3, [r7, #20]
    aed6:	3b02      	subs	r3, #2
    aed8:	617b      	str	r3, [r7, #20]
        if ((c | 32) == 'x') {
    aeda:	e036      	b.n	af4a <mp_parse_num_base+0x10a>
    aedc:	e035      	b.n	af4a <mp_parse_num_base+0x10a>
        }
    } else if (*base == 8 && c == '0') {
    aede:	687b      	ldr	r3, [r7, #4]
    aee0:	681b      	ldr	r3, [r3, #0]
    aee2:	2b08      	cmp	r3, #8
    aee4:	d110      	bne.n	af08 <mp_parse_num_base+0xc8>
    aee6:	693b      	ldr	r3, [r7, #16]
    aee8:	2b30      	cmp	r3, #48	; 0x30
    aeea:	d10d      	bne.n	af08 <mp_parse_num_base+0xc8>
        c = *(p++);
    aeec:	697b      	ldr	r3, [r7, #20]
    aeee:	1c5a      	adds	r2, r3, #1
    aef0:	617a      	str	r2, [r7, #20]
    aef2:	781b      	ldrb	r3, [r3, #0]
    aef4:	613b      	str	r3, [r7, #16]
        if ((c | 32) != 'o') {
    aef6:	693b      	ldr	r3, [r7, #16]
    aef8:	f043 0320 	orr.w	r3, r3, #32
    aefc:	2b6f      	cmp	r3, #111	; 0x6f
    aefe:	d024      	beq.n	af4a <mp_parse_num_base+0x10a>
            p -= 2;
    af00:	697b      	ldr	r3, [r7, #20]
    af02:	3b02      	subs	r3, #2
    af04:	617b      	str	r3, [r7, #20]
        if ((c | 32) != 'o') {
    af06:	e020      	b.n	af4a <mp_parse_num_base+0x10a>
        }
    } else if (*base == 2 && c == '0') {
    af08:	687b      	ldr	r3, [r7, #4]
    af0a:	681b      	ldr	r3, [r3, #0]
    af0c:	2b02      	cmp	r3, #2
    af0e:	d110      	bne.n	af32 <mp_parse_num_base+0xf2>
    af10:	693b      	ldr	r3, [r7, #16]
    af12:	2b30      	cmp	r3, #48	; 0x30
    af14:	d10d      	bne.n	af32 <mp_parse_num_base+0xf2>
        c = *(p++);
    af16:	697b      	ldr	r3, [r7, #20]
    af18:	1c5a      	adds	r2, r3, #1
    af1a:	617a      	str	r2, [r7, #20]
    af1c:	781b      	ldrb	r3, [r3, #0]
    af1e:	613b      	str	r3, [r7, #16]
        if ((c | 32) != 'b') {
    af20:	693b      	ldr	r3, [r7, #16]
    af22:	f043 0320 	orr.w	r3, r3, #32
    af26:	2b62      	cmp	r3, #98	; 0x62
    af28:	d00f      	beq.n	af4a <mp_parse_num_base+0x10a>
            p -= 2;
    af2a:	697b      	ldr	r3, [r7, #20]
    af2c:	3b02      	subs	r3, #2
    af2e:	617b      	str	r3, [r7, #20]
        if ((c | 32) != 'b') {
    af30:	e00b      	b.n	af4a <mp_parse_num_base+0x10a>
        }
    } else {
        p--;
    af32:	697b      	ldr	r3, [r7, #20]
    af34:	3b01      	subs	r3, #1
    af36:	617b      	str	r3, [r7, #20]
    af38:	e000      	b.n	af3c <mp_parse_num_base+0xfc>
        goto no_prefix;
    af3a:	bf00      	nop
    no_prefix:
        if (*base == 0) {
    af3c:	687b      	ldr	r3, [r7, #4]
    af3e:	681b      	ldr	r3, [r3, #0]
    af40:	2b00      	cmp	r3, #0
    af42:	d102      	bne.n	af4a <mp_parse_num_base+0x10a>
            *base = 10;
    af44:	687b      	ldr	r3, [r7, #4]
    af46:	220a      	movs	r2, #10
    af48:	601a      	str	r2, [r3, #0]
        }
    }
    return p - (const byte*)str;
    af4a:	697a      	ldr	r2, [r7, #20]
    af4c:	68fb      	ldr	r3, [r7, #12]
    af4e:	1ad3      	subs	r3, r2, r3
}
    af50:	4618      	mov	r0, r3
    af52:	371c      	adds	r7, #28
    af54:	46bd      	mov	sp, r7
    af56:	f85d 7b04 	ldr.w	r7, [sp], #4
    af5a:	4770      	bx	lr

0000af5c <raise_exc>:

#if MICROPY_PY_BUILTINS_FLOAT
#include <math.h>
#endif

STATIC NORETURN void raise_exc(mp_obj_t exc, mp_lexer_t *lex) {
    af5c:	b580      	push	{r7, lr}
    af5e:	b082      	sub	sp, #8
    af60:	af00      	add	r7, sp, #0
    af62:	6078      	str	r0, [r7, #4]
    af64:	6039      	str	r1, [r7, #0]
    // if lex!=NULL then the parser called us and we need to convert the
    // exception's type from ValueError to SyntaxError and add traceback info
    if (lex != NULL) {
    af66:	683b      	ldr	r3, [r7, #0]
    af68:	2b00      	cmp	r3, #0
    af6a:	d00a      	beq.n	af82 <raise_exc+0x26>
        ((mp_obj_base_t*)MP_OBJ_TO_PTR(exc))->type = &mp_type_SyntaxError;
    af6c:	687b      	ldr	r3, [r7, #4]
    af6e:	4a06      	ldr	r2, [pc, #24]	; (af88 <raise_exc+0x2c>)
    af70:	601a      	str	r2, [r3, #0]
        mp_obj_exception_add_traceback(exc, lex->source_name, lex->tok_line, MP_QSTR_NULL);
    af72:	683b      	ldr	r3, [r7, #0]
    af74:	6819      	ldr	r1, [r3, #0]
    af76:	683b      	ldr	r3, [r7, #0]
    af78:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    af7a:	2300      	movs	r3, #0
    af7c:	6878      	ldr	r0, [r7, #4]
    af7e:	f004 fbb5 	bl	f6ec <mp_obj_exception_add_traceback>
    }
    nlr_raise(exc);
    af82:	6878      	ldr	r0, [r7, #4]
    af84:	f7f5 f9ac 	bl	2e0 <nlr_jump>
    af88:	0002046c 	.word	0x0002046c

0000af8c <mp_parse_num_integer>:
}

mp_obj_t mp_parse_num_integer(const char *restrict str_, size_t len, int base, mp_lexer_t *lex) {
    af8c:	b580      	push	{r7, lr}
    af8e:	b094      	sub	sp, #80	; 0x50
    af90:	af00      	add	r7, sp, #0
    af92:	60f8      	str	r0, [r7, #12]
    af94:	60b9      	str	r1, [r7, #8]
    af96:	607a      	str	r2, [r7, #4]
    af98:	603b      	str	r3, [r7, #0]
    const byte *restrict str = (const byte *)str_;
    af9a:	68fb      	ldr	r3, [r7, #12]
    af9c:	64fb      	str	r3, [r7, #76]	; 0x4c
    const byte *restrict top = str + len;
    af9e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    afa0:	68bb      	ldr	r3, [r7, #8]
    afa2:	4413      	add	r3, r2
    afa4:	63bb      	str	r3, [r7, #56]	; 0x38
    bool neg = false;
    afa6:	2300      	movs	r3, #0
    afa8:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
    mp_obj_t ret_val;

    // check radix base
    if ((base != 0 && base < 2) || base > 36) {
    afac:	687b      	ldr	r3, [r7, #4]
    afae:	2b00      	cmp	r3, #0
    afb0:	d002      	beq.n	afb8 <mp_parse_num_integer+0x2c>
    afb2:	687b      	ldr	r3, [r7, #4]
    afb4:	2b01      	cmp	r3, #1
    afb6:	dd02      	ble.n	afbe <mp_parse_num_integer+0x32>
    afb8:	687b      	ldr	r3, [r7, #4]
    afba:	2b24      	cmp	r3, #36	; 0x24
    afbc:	dd05      	ble.n	afca <mp_parse_num_integer+0x3e>
        // this won't be reached if lex!=NULL
        mp_raise_ValueError("int() arg 2 must be >= 2 and <= 36");
    afbe:	4861      	ldr	r0, [pc, #388]	; (b144 <mp_parse_num_integer+0x1b8>)
    afc0:	f001 ffa5 	bl	cf0e <mp_raise_ValueError>
    }

    // skip leading space
    for (; str < top && unichar_isspace(*str); str++) {
    afc4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    afc6:	3301      	adds	r3, #1
    afc8:	64fb      	str	r3, [r7, #76]	; 0x4c
    afca:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    afcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    afce:	429a      	cmp	r2, r3
    afd0:	d207      	bcs.n	afe2 <mp_parse_num_integer+0x56>
    afd2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    afd4:	781b      	ldrb	r3, [r3, #0]
    afd6:	4618      	mov	r0, r3
    afd8:	f7f7 f9ba 	bl	2350 <unichar_isspace>
    afdc:	4603      	mov	r3, r0
    afde:	2b00      	cmp	r3, #0
    afe0:	d1f0      	bne.n	afc4 <mp_parse_num_integer+0x38>
    }

    // parse optional sign
    if (str < top) {
    afe2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    afe4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    afe6:	429a      	cmp	r2, r3
    afe8:	d211      	bcs.n	b00e <mp_parse_num_integer+0x82>
        if (*str == '+') {
    afea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    afec:	781b      	ldrb	r3, [r3, #0]
    afee:	2b2b      	cmp	r3, #43	; 0x2b
    aff0:	d103      	bne.n	affa <mp_parse_num_integer+0x6e>
            str++;
    aff2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    aff4:	3301      	adds	r3, #1
    aff6:	64fb      	str	r3, [r7, #76]	; 0x4c
    aff8:	e009      	b.n	b00e <mp_parse_num_integer+0x82>
        } else if (*str == '-') {
    affa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    affc:	781b      	ldrb	r3, [r3, #0]
    affe:	2b2d      	cmp	r3, #45	; 0x2d
    b000:	d105      	bne.n	b00e <mp_parse_num_integer+0x82>
            str++;
    b002:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    b004:	3301      	adds	r3, #1
    b006:	64fb      	str	r3, [r7, #76]	; 0x4c
            neg = true;
    b008:	2301      	movs	r3, #1
    b00a:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
        }
    }

    // parse optional base prefix
    str += mp_parse_num_base((const char*)str, top - str, &base);
    b00e:	6bba      	ldr	r2, [r7, #56]	; 0x38
    b010:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    b012:	1ad3      	subs	r3, r2, r3
    b014:	4619      	mov	r1, r3
    b016:	1d3b      	adds	r3, r7, #4
    b018:	461a      	mov	r2, r3
    b01a:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
    b01c:	f7ff ff10 	bl	ae40 <mp_parse_num_base>
    b020:	4602      	mov	r2, r0
    b022:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    b024:	4413      	add	r3, r2
    b026:	64fb      	str	r3, [r7, #76]	; 0x4c

    // string should be an integer number
    mp_int_t int_val = 0;
    b028:	2300      	movs	r3, #0
    b02a:	643b      	str	r3, [r7, #64]	; 0x40
    const byte *restrict str_val_start = str;
    b02c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    b02e:	637b      	str	r3, [r7, #52]	; 0x34
    for (; str < top; str++) {
    b030:	e037      	b.n	b0a2 <mp_parse_num_integer+0x116>
        // get next digit as a value
        mp_uint_t dig = *str;
    b032:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    b034:	781b      	ldrb	r3, [r3, #0]
    b036:	63fb      	str	r3, [r7, #60]	; 0x3c
        if ('0' <= dig && dig <= '9') {
    b038:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    b03a:	2b2f      	cmp	r3, #47	; 0x2f
    b03c:	d906      	bls.n	b04c <mp_parse_num_integer+0xc0>
    b03e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    b040:	2b39      	cmp	r3, #57	; 0x39
    b042:	d803      	bhi.n	b04c <mp_parse_num_integer+0xc0>
            dig -= '0';
    b044:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    b046:	3b30      	subs	r3, #48	; 0x30
    b048:	63fb      	str	r3, [r7, #60]	; 0x3c
    b04a:	e00c      	b.n	b066 <mp_parse_num_integer+0xda>
        } else {
            dig |= 0x20; // make digit lower-case
    b04c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    b04e:	f043 0320 	orr.w	r3, r3, #32
    b052:	63fb      	str	r3, [r7, #60]	; 0x3c
            if ('a' <= dig && dig <= 'z') {
    b054:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    b056:	2b60      	cmp	r3, #96	; 0x60
    b058:	d929      	bls.n	b0ae <mp_parse_num_integer+0x122>
    b05a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    b05c:	2b7a      	cmp	r3, #122	; 0x7a
    b05e:	d826      	bhi.n	b0ae <mp_parse_num_integer+0x122>
                dig -= 'a' - 10;
    b060:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    b062:	3b57      	subs	r3, #87	; 0x57
    b064:	63fb      	str	r3, [r7, #60]	; 0x3c
            } else {
                // unknown character
                break;
            }
        }
        if (dig >= (mp_uint_t)base) {
    b066:	687b      	ldr	r3, [r7, #4]
    b068:	461a      	mov	r2, r3
    b06a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    b06c:	4293      	cmp	r3, r2
    b06e:	d21d      	bcs.n	b0ac <mp_parse_num_integer+0x120>
            break;
        }

        // add next digi and check for overflow
        if (mp_small_int_mul_overflow(int_val, base)) {
    b070:	687b      	ldr	r3, [r7, #4]
    b072:	4619      	mov	r1, r3
    b074:	6c38      	ldr	r0, [r7, #64]	; 0x40
    b076:	f00f fec5 	bl	1ae04 <mp_small_int_mul_overflow>
    b07a:	4603      	mov	r3, r0
    b07c:	2b00      	cmp	r3, #0
    b07e:	d13c      	bne.n	b0fa <mp_parse_num_integer+0x16e>
            goto overflow;
        }
        int_val = int_val * base + dig;
    b080:	687b      	ldr	r3, [r7, #4]
    b082:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    b084:	fb02 f303 	mul.w	r3, r2, r3
    b088:	461a      	mov	r2, r3
    b08a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    b08c:	4413      	add	r3, r2
    b08e:	643b      	str	r3, [r7, #64]	; 0x40
        if (!MP_SMALL_INT_FITS(int_val)) {
    b090:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    b092:	005a      	lsls	r2, r3, #1
    b094:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    b096:	4053      	eors	r3, r2
    b098:	2b00      	cmp	r3, #0
    b09a:	db30      	blt.n	b0fe <mp_parse_num_integer+0x172>
    for (; str < top; str++) {
    b09c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    b09e:	3301      	adds	r3, #1
    b0a0:	64fb      	str	r3, [r7, #76]	; 0x4c
    b0a2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    b0a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    b0a6:	429a      	cmp	r2, r3
    b0a8:	d3c3      	bcc.n	b032 <mp_parse_num_integer+0xa6>
    b0aa:	e000      	b.n	b0ae <mp_parse_num_integer+0x122>
            break;
    b0ac:	bf00      	nop
            goto overflow;
        }
    }

    // negate value if needed
    if (neg) {
    b0ae:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
    b0b2:	2b00      	cmp	r3, #0
    b0b4:	d002      	beq.n	b0bc <mp_parse_num_integer+0x130>
        int_val = -int_val;
    b0b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    b0b8:	425b      	negs	r3, r3
    b0ba:	643b      	str	r3, [r7, #64]	; 0x40
    }

    // create the small int
    ret_val = MP_OBJ_NEW_SMALL_INT(int_val);
    b0bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    b0be:	005b      	lsls	r3, r3, #1
    b0c0:	f043 0301 	orr.w	r3, r3, #1
    b0c4:	647b      	str	r3, [r7, #68]	; 0x44

have_ret_val:
    // check we parsed something
    if (str == str_val_start) {
    b0c6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    b0c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    b0ca:	429a      	cmp	r2, r3
    b0cc:	d02a      	beq.n	b124 <mp_parse_num_integer+0x198>
        goto value_error;
    }

    // skip trailing space
    for (; str < top && unichar_isspace(*str); str++) {
    b0ce:	e002      	b.n	b0d6 <mp_parse_num_integer+0x14a>
    b0d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    b0d2:	3301      	adds	r3, #1
    b0d4:	64fb      	str	r3, [r7, #76]	; 0x4c
    b0d6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    b0d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    b0da:	429a      	cmp	r2, r3
    b0dc:	d207      	bcs.n	b0ee <mp_parse_num_integer+0x162>
    b0de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    b0e0:	781b      	ldrb	r3, [r3, #0]
    b0e2:	4618      	mov	r0, r3
    b0e4:	f7f7 f934 	bl	2350 <unichar_isspace>
    b0e8:	4603      	mov	r3, r0
    b0ea:	2b00      	cmp	r3, #0
    b0ec:	d1f0      	bne.n	b0d0 <mp_parse_num_integer+0x144>
    }

    // check we reached the end of the string
    if (str != top) {
    b0ee:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    b0f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    b0f2:	429a      	cmp	r2, r3
    b0f4:	d118      	bne.n	b128 <mp_parse_num_integer+0x19c>
        goto value_error;
    }

    // return the object
    return ret_val;
    b0f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    b0f8:	e020      	b.n	b13c <mp_parse_num_integer+0x1b0>
            goto overflow;
    b0fa:	bf00      	nop
    b0fc:	e000      	b.n	b100 <mp_parse_num_integer+0x174>
            goto overflow;
    b0fe:	bf00      	nop

overflow:
    // reparse using long int
    {
        const char *s2 = (const char*)str_val_start;
    b100:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    b102:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret_val = mp_obj_new_int_from_str_len(&s2, top - str_val_start, neg, base);
    b104:	6bba      	ldr	r2, [r7, #56]	; 0x38
    b106:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    b108:	1ad3      	subs	r3, r2, r3
    b10a:	4619      	mov	r1, r3
    b10c:	687b      	ldr	r3, [r7, #4]
    b10e:	f897 204b 	ldrb.w	r2, [r7, #75]	; 0x4b
    b112:	f107 002c 	add.w	r0, r7, #44	; 0x2c
    b116:	f005 fb21 	bl	1075c <mp_obj_new_int_from_str_len>
    b11a:	6478      	str	r0, [r7, #68]	; 0x44
        str = (const byte*)s2;
    b11c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b11e:	64fb      	str	r3, [r7, #76]	; 0x4c
        goto have_ret_val;
    b120:	bf00      	nop
    b122:	e7d0      	b.n	b0c6 <mp_parse_num_integer+0x13a>
        goto value_error;
    b124:	bf00      	nop
    b126:	e000      	b.n	b12a <mp_parse_num_integer+0x19e>
        goto value_error;
    b128:	bf00      	nop
    }

value_error:
    if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
        mp_obj_t exc = mp_obj_new_exception_msg(&mp_type_ValueError,
    b12a:	4907      	ldr	r1, [pc, #28]	; (b148 <mp_parse_num_integer+0x1bc>)
    b12c:	4807      	ldr	r0, [pc, #28]	; (b14c <mp_parse_num_integer+0x1c0>)
    b12e:	f004 f961 	bl	f3f4 <mp_obj_new_exception_msg>
    b132:	6338      	str	r0, [r7, #48]	; 0x30
            "invalid syntax for integer");
        raise_exc(exc, lex);
    b134:	6839      	ldr	r1, [r7, #0]
    b136:	6b38      	ldr	r0, [r7, #48]	; 0x30
    b138:	f7ff ff10 	bl	af5c <raise_exc>
        mp_str_print_quoted(&print, str_val_start, top - str_val_start, true);
        mp_obj_t exc = mp_obj_new_exception_arg1(&mp_type_ValueError,
            mp_obj_new_str_from_vstr(&mp_type_str, &vstr));
        raise_exc(exc, lex);
    }
}
    b13c:	4618      	mov	r0, r3
    b13e:	3750      	adds	r7, #80	; 0x50
    b140:	46bd      	mov	sp, r7
    b142:	bd80      	pop	{r7, pc}
    b144:	0001f26c 	.word	0x0001f26c
    b148:	0001f290 	.word	0x0001f290
    b14c:	00020520 	.word	0x00020520

0000b150 <mp_parse_num_decimal>:
    PARSE_DEC_IN_INTG,
    PARSE_DEC_IN_FRAC,
    PARSE_DEC_IN_EXP,
} parse_dec_in_t;

mp_obj_t mp_parse_num_decimal(const char *str, size_t len, bool allow_imag, bool force_complex, mp_lexer_t *lex) {
    b150:	b580      	push	{r7, lr}
    b152:	b084      	sub	sp, #16
    b154:	af00      	add	r7, sp, #0
    b156:	60f8      	str	r0, [r7, #12]
    b158:	60b9      	str	r1, [r7, #8]
    b15a:	4611      	mov	r1, r2
    b15c:	461a      	mov	r2, r3
    b15e:	460b      	mov	r3, r1
    b160:	71fb      	strb	r3, [r7, #7]
    b162:	4613      	mov	r3, r2
    b164:	71bb      	strb	r3, [r7, #6]

value_error:
    raise_exc(mp_obj_new_exception_msg(&mp_type_ValueError, "invalid syntax for number"), lex);

#else
    raise_exc(mp_obj_new_exception_msg(&mp_type_ValueError, "decimal numbers not supported"), lex);
    b166:	4904      	ldr	r1, [pc, #16]	; (b178 <mp_parse_num_decimal+0x28>)
    b168:	4804      	ldr	r0, [pc, #16]	; (b17c <mp_parse_num_decimal+0x2c>)
    b16a:	f004 f943 	bl	f3f4 <mp_obj_new_exception_msg>
    b16e:	4603      	mov	r3, r0
    b170:	69b9      	ldr	r1, [r7, #24]
    b172:	4618      	mov	r0, r3
    b174:	f7ff fef2 	bl	af5c <raise_exc>
    b178:	0001f2ac 	.word	0x0001f2ac
    b17c:	00020520 	.word	0x00020520

0000b180 <MP_OBJ_IS_OBJ>:
    b180:	b480      	push	{r7}
    b182:	b083      	sub	sp, #12
    b184:	af00      	add	r7, sp, #0
    b186:	6078      	str	r0, [r7, #4]
    b188:	687b      	ldr	r3, [r7, #4]
    b18a:	f003 0303 	and.w	r3, r3, #3
    b18e:	2b00      	cmp	r3, #0
    b190:	bf0c      	ite	eq
    b192:	2301      	moveq	r3, #1
    b194:	2300      	movne	r3, #0
    b196:	b2db      	uxtb	r3, r3
    b198:	4618      	mov	r0, r3
    b19a:	370c      	adds	r7, #12
    b19c:	46bd      	mov	sp, r7
    b19e:	f85d 7b04 	ldr.w	r7, [sp], #4
    b1a2:	4770      	bx	lr

0000b1a4 <mp_emit_glue_new_raw_code>:

#if MICROPY_DEBUG_PRINTERS
mp_uint_t mp_verbose_flag = 0;
#endif

mp_raw_code_t *mp_emit_glue_new_raw_code(void) {
    b1a4:	b580      	push	{r7, lr}
    b1a6:	b082      	sub	sp, #8
    b1a8:	af00      	add	r7, sp, #0
    mp_raw_code_t *rc = m_new0(mp_raw_code_t, 1);
    b1aa:	2010      	movs	r0, #16
    b1ac:	f7f5 f8db 	bl	366 <m_malloc0>
    b1b0:	6078      	str	r0, [r7, #4]
    rc->kind = MP_CODE_RESERVED;
    b1b2:	687a      	ldr	r2, [r7, #4]
    b1b4:	7813      	ldrb	r3, [r2, #0]
    b1b6:	2101      	movs	r1, #1
    b1b8:	f361 0302 	bfi	r3, r1, #0, #3
    b1bc:	7013      	strb	r3, [r2, #0]
    return rc;
    b1be:	687b      	ldr	r3, [r7, #4]
}
    b1c0:	4618      	mov	r0, r3
    b1c2:	3708      	adds	r7, #8
    b1c4:	46bd      	mov	sp, r7
    b1c6:	bd80      	pop	{r7, pc}

0000b1c8 <mp_emit_glue_assign_bytecode>:
    #endif
    const mp_uint_t *const_table,
    #if MICROPY_PERSISTENT_CODE_SAVE
    uint16_t n_obj, uint16_t n_raw_code,
    #endif
    mp_uint_t scope_flags) {
    b1c8:	b480      	push	{r7}
    b1ca:	b085      	sub	sp, #20
    b1cc:	af00      	add	r7, sp, #0
    b1ce:	60f8      	str	r0, [r7, #12]
    b1d0:	60b9      	str	r1, [r7, #8]
    b1d2:	607a      	str	r2, [r7, #4]
    b1d4:	603b      	str	r3, [r7, #0]

    rc->kind = MP_CODE_BYTECODE;
    b1d6:	68fa      	ldr	r2, [r7, #12]
    b1d8:	7813      	ldrb	r3, [r2, #0]
    b1da:	2102      	movs	r1, #2
    b1dc:	f361 0302 	bfi	r3, r1, #0, #3
    b1e0:	7013      	strb	r3, [r2, #0]
    rc->scope_flags = scope_flags;
    b1e2:	683b      	ldr	r3, [r7, #0]
    b1e4:	b2db      	uxtb	r3, r3
    b1e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    b1ea:	b2d9      	uxtb	r1, r3
    b1ec:	68fa      	ldr	r2, [r7, #12]
    b1ee:	8813      	ldrh	r3, [r2, #0]
    b1f0:	f361 03c9 	bfi	r3, r1, #3, #7
    b1f4:	8013      	strh	r3, [r2, #0]
    rc->data.u_byte.bytecode = code;
    b1f6:	68fb      	ldr	r3, [r7, #12]
    b1f8:	68ba      	ldr	r2, [r7, #8]
    b1fa:	605a      	str	r2, [r3, #4]
    rc->data.u_byte.const_table = const_table;
    b1fc:	68fb      	ldr	r3, [r7, #12]
    b1fe:	687a      	ldr	r2, [r7, #4]
    b200:	609a      	str	r2, [r3, #8]
#if MICROPY_DEBUG_PRINTERS
    if (mp_verbose_flag >= 2) {
        mp_bytecode_print(rc, code, len, const_table);
    }
#endif
}
    b202:	bf00      	nop
    b204:	3714      	adds	r7, #20
    b206:	46bd      	mov	sp, r7
    b208:	f85d 7b04 	ldr.w	r7, [sp], #4
    b20c:	4770      	bx	lr

0000b20e <mp_make_function_from_raw_code>:
    (void)fun_len;
#endif
}
#endif

mp_obj_t mp_make_function_from_raw_code(const mp_raw_code_t *rc, mp_obj_t def_args, mp_obj_t def_kw_args) {
    b20e:	b580      	push	{r7, lr}
    b210:	b086      	sub	sp, #24
    b212:	af00      	add	r7, sp, #0
    b214:	60f8      	str	r0, [r7, #12]
    b216:	60b9      	str	r1, [r7, #8]
    b218:	607a      	str	r2, [r7, #4]
    DEBUG_OP_printf("make_function_from_raw_code %p\n", rc);
    assert(rc != NULL);
    b21a:	68fb      	ldr	r3, [r7, #12]
    b21c:	2b00      	cmp	r3, #0
    b21e:	d105      	bne.n	b22c <mp_make_function_from_raw_code+0x1e>
    b220:	4b2d      	ldr	r3, [pc, #180]	; (b2d8 <mp_make_function_from_raw_code+0xca>)
    b222:	4a2e      	ldr	r2, [pc, #184]	; (b2dc <mp_make_function_from_raw_code+0xce>)
    b224:	2179      	movs	r1, #121	; 0x79
    b226:	482e      	ldr	r0, [pc, #184]	; (b2e0 <mp_make_function_from_raw_code+0xd2>)
    b228:	f00f ffc8 	bl	1b1bc <__assert_func>

    // def_args must be MP_OBJ_NULL or a tuple
    assert(def_args == MP_OBJ_NULL || MP_OBJ_IS_TYPE(def_args, &mp_type_tuple));
    b22c:	68bb      	ldr	r3, [r7, #8]
    b22e:	2b00      	cmp	r3, #0
    b230:	d010      	beq.n	b254 <mp_make_function_from_raw_code+0x46>
    b232:	68b8      	ldr	r0, [r7, #8]
    b234:	f7ff ffa4 	bl	b180 <MP_OBJ_IS_OBJ>
    b238:	4603      	mov	r3, r0
    b23a:	2b00      	cmp	r3, #0
    b23c:	d004      	beq.n	b248 <mp_make_function_from_raw_code+0x3a>
    b23e:	68bb      	ldr	r3, [r7, #8]
    b240:	681b      	ldr	r3, [r3, #0]
    b242:	4a28      	ldr	r2, [pc, #160]	; (b2e4 <mp_make_function_from_raw_code+0xd6>)
    b244:	4293      	cmp	r3, r2
    b246:	d005      	beq.n	b254 <mp_make_function_from_raw_code+0x46>
    b248:	4b27      	ldr	r3, [pc, #156]	; (b2e8 <mp_make_function_from_raw_code+0xda>)
    b24a:	4a24      	ldr	r2, [pc, #144]	; (b2dc <mp_make_function_from_raw_code+0xce>)
    b24c:	217c      	movs	r1, #124	; 0x7c
    b24e:	4824      	ldr	r0, [pc, #144]	; (b2e0 <mp_make_function_from_raw_code+0xd2>)
    b250:	f00f ffb4 	bl	1b1bc <__assert_func>

    // def_kw_args must be MP_OBJ_NULL or a dict
    assert(def_kw_args == MP_OBJ_NULL || MP_OBJ_IS_TYPE(def_kw_args, &mp_type_dict));
    b254:	687b      	ldr	r3, [r7, #4]
    b256:	2b00      	cmp	r3, #0
    b258:	d010      	beq.n	b27c <mp_make_function_from_raw_code+0x6e>
    b25a:	6878      	ldr	r0, [r7, #4]
    b25c:	f7ff ff90 	bl	b180 <MP_OBJ_IS_OBJ>
    b260:	4603      	mov	r3, r0
    b262:	2b00      	cmp	r3, #0
    b264:	d004      	beq.n	b270 <mp_make_function_from_raw_code+0x62>
    b266:	687b      	ldr	r3, [r7, #4]
    b268:	681b      	ldr	r3, [r3, #0]
    b26a:	4a20      	ldr	r2, [pc, #128]	; (b2ec <mp_make_function_from_raw_code+0xde>)
    b26c:	4293      	cmp	r3, r2
    b26e:	d005      	beq.n	b27c <mp_make_function_from_raw_code+0x6e>
    b270:	4b1f      	ldr	r3, [pc, #124]	; (b2f0 <mp_make_function_from_raw_code+0xe2>)
    b272:	4a1a      	ldr	r2, [pc, #104]	; (b2dc <mp_make_function_from_raw_code+0xce>)
    b274:	217f      	movs	r1, #127	; 0x7f
    b276:	481a      	ldr	r0, [pc, #104]	; (b2e0 <mp_make_function_from_raw_code+0xd2>)
    b278:	f00f ffa0 	bl	1b1bc <__assert_func>

    // make the function, depending on the raw code kind
    mp_obj_t fun;
    switch (rc->kind) {
    b27c:	68fb      	ldr	r3, [r7, #12]
    b27e:	781b      	ldrb	r3, [r3, #0]
    b280:	f3c3 0302 	ubfx	r3, r3, #0, #3
            fun = mp_obj_new_fun_asm(rc->n_pos_args, rc->data.u_native.fun_data, rc->data.u_native.type_sig);
            break;
        #endif
        default:
            // rc->kind should always be set and BYTECODE is the only remaining case
            assert(rc->kind == MP_CODE_BYTECODE);
    b284:	68fb      	ldr	r3, [r7, #12]
    b286:	781b      	ldrb	r3, [r3, #0]
    b288:	f003 0307 	and.w	r3, r3, #7
    b28c:	b2db      	uxtb	r3, r3
    b28e:	2b02      	cmp	r3, #2
    b290:	d005      	beq.n	b29e <mp_make_function_from_raw_code+0x90>
    b292:	4b18      	ldr	r3, [pc, #96]	; (b2f4 <mp_make_function_from_raw_code+0xe6>)
    b294:	4a11      	ldr	r2, [pc, #68]	; (b2dc <mp_make_function_from_raw_code+0xce>)
    b296:	2193      	movs	r1, #147	; 0x93
    b298:	4811      	ldr	r0, [pc, #68]	; (b2e0 <mp_make_function_from_raw_code+0xd2>)
    b29a:	f00f ff8f 	bl	1b1bc <__assert_func>
            fun = mp_obj_new_fun_bc(def_args, def_kw_args, rc->data.u_byte.bytecode, rc->data.u_byte.const_table);
    b29e:	68fb      	ldr	r3, [r7, #12]
    b2a0:	685a      	ldr	r2, [r3, #4]
    b2a2:	68fb      	ldr	r3, [r7, #12]
    b2a4:	689b      	ldr	r3, [r3, #8]
    b2a6:	6879      	ldr	r1, [r7, #4]
    b2a8:	68b8      	ldr	r0, [r7, #8]
    b2aa:	f004 fd09 	bl	fcc0 <mp_obj_new_fun_bc>
    b2ae:	6178      	str	r0, [r7, #20]
            break;
    b2b0:	bf00      	nop
    }

    // check for generator functions and if so wrap in generator object
    if ((rc->scope_flags & MP_SCOPE_FLAG_GENERATOR) != 0) {
    b2b2:	68fb      	ldr	r3, [r7, #12]
    b2b4:	881b      	ldrh	r3, [r3, #0]
    b2b6:	f3c3 03c6 	ubfx	r3, r3, #3, #7
    b2ba:	b2db      	uxtb	r3, r3
    b2bc:	f003 0304 	and.w	r3, r3, #4
    b2c0:	2b00      	cmp	r3, #0
    b2c2:	d003      	beq.n	b2cc <mp_make_function_from_raw_code+0xbe>
        fun = mp_obj_new_gen_wrap(fun);
    b2c4:	6978      	ldr	r0, [r7, #20]
    b2c6:	f004 fdeb 	bl	fea0 <mp_obj_new_gen_wrap>
    b2ca:	6178      	str	r0, [r7, #20]
    }

    return fun;
    b2cc:	697b      	ldr	r3, [r7, #20]
}
    b2ce:	4618      	mov	r0, r3
    b2d0:	3718      	adds	r7, #24
    b2d2:	46bd      	mov	sp, r7
    b2d4:	bd80      	pop	{r7, pc}
    b2d6:	bf00      	nop
    b2d8:	0001f2cc 	.word	0x0001f2cc
    b2dc:	0001f39c 	.word	0x0001f39c
    b2e0:	0001f2d8 	.word	0x0001f2d8
    b2e4:	00021be8 	.word	0x00021be8
    b2e8:	0001f2ec 	.word	0x0001f2ec
    b2ec:	0001fe68 	.word	0x0001fe68
    b2f0:	0001f330 	.word	0x0001f330
    b2f4:	0001f37c 	.word	0x0001f37c

0000b2f8 <mp_make_closure_from_raw_code>:

mp_obj_t mp_make_closure_from_raw_code(const mp_raw_code_t *rc, mp_uint_t n_closed_over, const mp_obj_t *args) {
    b2f8:	b580      	push	{r7, lr}
    b2fa:	b086      	sub	sp, #24
    b2fc:	af00      	add	r7, sp, #0
    b2fe:	60f8      	str	r0, [r7, #12]
    b300:	60b9      	str	r1, [r7, #8]
    b302:	607a      	str	r2, [r7, #4]
    DEBUG_OP_printf("make_closure_from_raw_code %p " UINT_FMT " %p\n", rc, n_closed_over, args);
    // make function object
    mp_obj_t ffun;
    if (n_closed_over & 0x100) {
    b304:	68bb      	ldr	r3, [r7, #8]
    b306:	f403 7380 	and.w	r3, r3, #256	; 0x100
    b30a:	2b00      	cmp	r3, #0
    b30c:	d00a      	beq.n	b324 <mp_make_closure_from_raw_code+0x2c>
        // default positional and keyword args given
        ffun = mp_make_function_from_raw_code(rc, args[0], args[1]);
    b30e:	687b      	ldr	r3, [r7, #4]
    b310:	6819      	ldr	r1, [r3, #0]
    b312:	687b      	ldr	r3, [r7, #4]
    b314:	3304      	adds	r3, #4
    b316:	681b      	ldr	r3, [r3, #0]
    b318:	461a      	mov	r2, r3
    b31a:	68f8      	ldr	r0, [r7, #12]
    b31c:	f7ff ff77 	bl	b20e <mp_make_function_from_raw_code>
    b320:	6178      	str	r0, [r7, #20]
    b322:	e005      	b.n	b330 <mp_make_closure_from_raw_code+0x38>
    } else {
        // default positional and keyword args not given
        ffun = mp_make_function_from_raw_code(rc, MP_OBJ_NULL, MP_OBJ_NULL);
    b324:	2200      	movs	r2, #0
    b326:	2100      	movs	r1, #0
    b328:	68f8      	ldr	r0, [r7, #12]
    b32a:	f7ff ff70 	bl	b20e <mp_make_function_from_raw_code>
    b32e:	6178      	str	r0, [r7, #20]
    }
    // wrap function in closure object
    return mp_obj_new_closure(ffun, n_closed_over & 0xff, args + ((n_closed_over >> 7) & 2));
    b330:	68bb      	ldr	r3, [r7, #8]
    b332:	b2d9      	uxtb	r1, r3
    b334:	68bb      	ldr	r3, [r7, #8]
    b336:	09db      	lsrs	r3, r3, #7
    b338:	f003 0302 	and.w	r3, r3, #2
    b33c:	009b      	lsls	r3, r3, #2
    b33e:	687a      	ldr	r2, [r7, #4]
    b340:	4413      	add	r3, r2
    b342:	461a      	mov	r2, r3
    b344:	6978      	ldr	r0, [r7, #20]
    b346:	f002 ffe1 	bl	e30c <mp_obj_new_closure>
    b34a:	4603      	mov	r3, r0
}
    b34c:	4618      	mov	r0, r3
    b34e:	3718      	adds	r7, #24
    b350:	46bd      	mov	sp, r7
    b352:	bd80      	pop	{r7, pc}

0000b354 <MP_OBJ_IS_SMALL_INT>:
    { return ((((mp_int_t)(o)) & 1) != 0); }
    b354:	b480      	push	{r7}
    b356:	b083      	sub	sp, #12
    b358:	af00      	add	r7, sp, #0
    b35a:	6078      	str	r0, [r7, #4]
    b35c:	687b      	ldr	r3, [r7, #4]
    b35e:	f003 0301 	and.w	r3, r3, #1
    b362:	2b00      	cmp	r3, #0
    b364:	bf14      	ite	ne
    b366:	2301      	movne	r3, #1
    b368:	2300      	moveq	r3, #0
    b36a:	b2db      	uxtb	r3, r3
    b36c:	4618      	mov	r0, r3
    b36e:	370c      	adds	r7, #12
    b370:	46bd      	mov	sp, r7
    b372:	f85d 7b04 	ldr.w	r7, [sp], #4
    b376:	4770      	bx	lr

0000b378 <MP_OBJ_IS_QSTR>:
    { return ((((mp_int_t)(o)) & 3) == 2); }
    b378:	b480      	push	{r7}
    b37a:	b083      	sub	sp, #12
    b37c:	af00      	add	r7, sp, #0
    b37e:	6078      	str	r0, [r7, #4]
    b380:	687b      	ldr	r3, [r7, #4]
    b382:	f003 0303 	and.w	r3, r3, #3
    b386:	2b02      	cmp	r3, #2
    b388:	bf0c      	ite	eq
    b38a:	2301      	moveq	r3, #1
    b38c:	2300      	movne	r3, #0
    b38e:	b2db      	uxtb	r3, r3
    b390:	4618      	mov	r0, r3
    b392:	370c      	adds	r7, #12
    b394:	46bd      	mov	sp, r7
    b396:	f85d 7b04 	ldr.w	r7, [sp], #4
    b39a:	4770      	bx	lr

0000b39c <MP_OBJ_IS_OBJ>:
    { return ((((mp_int_t)(o)) & 3) == 0); }
    b39c:	b480      	push	{r7}
    b39e:	b083      	sub	sp, #12
    b3a0:	af00      	add	r7, sp, #0
    b3a2:	6078      	str	r0, [r7, #4]
    b3a4:	687b      	ldr	r3, [r7, #4]
    b3a6:	f003 0303 	and.w	r3, r3, #3
    b3aa:	2b00      	cmp	r3, #0
    b3ac:	bf0c      	ite	eq
    b3ae:	2301      	moveq	r3, #1
    b3b0:	2300      	movne	r3, #0
    b3b2:	b2db      	uxtb	r3, r3
    b3b4:	4618      	mov	r0, r3
    b3b6:	370c      	adds	r7, #12
    b3b8:	46bd      	mov	sp, r7
    b3ba:	f85d 7b04 	ldr.w	r7, [sp], #4
    b3be:	4770      	bx	lr

0000b3c0 <MP_MAP_SLOT_IS_FILLED>:
    MP_MAP_LOOKUP_ADD_IF_NOT_FOUND_OR_REMOVE_IF_FOUND = 3, // only valid for mp_set_lookup
} mp_map_lookup_kind_t;

extern const mp_map_t mp_const_empty_map;

static inline bool MP_MAP_SLOT_IS_FILLED(const mp_map_t *map, size_t pos) { return ((map)->table[pos].key != MP_OBJ_NULL && (map)->table[pos].key != MP_OBJ_SENTINEL); }
    b3c0:	b480      	push	{r7}
    b3c2:	b083      	sub	sp, #12
    b3c4:	af00      	add	r7, sp, #0
    b3c6:	6078      	str	r0, [r7, #4]
    b3c8:	6039      	str	r1, [r7, #0]
    b3ca:	687b      	ldr	r3, [r7, #4]
    b3cc:	689a      	ldr	r2, [r3, #8]
    b3ce:	683b      	ldr	r3, [r7, #0]
    b3d0:	00db      	lsls	r3, r3, #3
    b3d2:	4413      	add	r3, r2
    b3d4:	681b      	ldr	r3, [r3, #0]
    b3d6:	2b00      	cmp	r3, #0
    b3d8:	d009      	beq.n	b3ee <MP_MAP_SLOT_IS_FILLED+0x2e>
    b3da:	687b      	ldr	r3, [r7, #4]
    b3dc:	689a      	ldr	r2, [r3, #8]
    b3de:	683b      	ldr	r3, [r7, #0]
    b3e0:	00db      	lsls	r3, r3, #3
    b3e2:	4413      	add	r3, r2
    b3e4:	681b      	ldr	r3, [r3, #0]
    b3e6:	2b08      	cmp	r3, #8
    b3e8:	d001      	beq.n	b3ee <MP_MAP_SLOT_IS_FILLED+0x2e>
    b3ea:	2301      	movs	r3, #1
    b3ec:	e000      	b.n	b3f0 <MP_MAP_SLOT_IS_FILLED+0x30>
    b3ee:	2300      	movs	r3, #0
    b3f0:	f003 0301 	and.w	r3, r3, #1
    b3f4:	b2db      	uxtb	r3, r3
    b3f6:	4618      	mov	r0, r3
    b3f8:	370c      	adds	r7, #12
    b3fa:	46bd      	mov	sp, r7
    b3fc:	f85d 7b04 	ldr.w	r7, [sp], #4
    b400:	4770      	bx	lr

0000b402 <mp_obj_new_bool>:
extern const struct _mp_obj_exception_t mp_const_GeneratorExit_obj;

// General API for objects

mp_obj_t mp_obj_new_type(qstr name, mp_obj_t bases_tuple, mp_obj_t locals_dict);
static inline mp_obj_t mp_obj_new_bool(mp_int_t x) { return x ? mp_const_true : mp_const_false; }
    b402:	b480      	push	{r7}
    b404:	b083      	sub	sp, #12
    b406:	af00      	add	r7, sp, #0
    b408:	6078      	str	r0, [r7, #4]
    b40a:	687b      	ldr	r3, [r7, #4]
    b40c:	2b00      	cmp	r3, #0
    b40e:	d001      	beq.n	b414 <mp_obj_new_bool+0x12>
    b410:	4b04      	ldr	r3, [pc, #16]	; (b424 <mp_obj_new_bool+0x22>)
    b412:	e000      	b.n	b416 <mp_obj_new_bool+0x14>
    b414:	4b04      	ldr	r3, [pc, #16]	; (b428 <mp_obj_new_bool+0x26>)
    b416:	4618      	mov	r0, r3
    b418:	370c      	adds	r7, #12
    b41a:	46bd      	mov	sp, r7
    b41c:	f85d 7b04 	ldr.w	r7, [sp], #4
    b420:	4770      	bx	lr
    b422:	bf00      	nop
    b424:	0001f9c4 	.word	0x0001f9c4
    b428:	0001f9bc 	.word	0x0001f9bc

0000b42c <mp_local_free>:
static inline void mp_local_free(void *ptr) {
    b42c:	b480      	push	{r7}
    b42e:	b083      	sub	sp, #12
    b430:	af00      	add	r7, sp, #0
    b432:	6078      	str	r0, [r7, #4]
}
    b434:	bf00      	nop
    b436:	370c      	adds	r7, #12
    b438:	46bd      	mov	sp, r7
    b43a:	f85d 7b04 	ldr.w	r7, [sp], #4
    b43e:	4770      	bx	lr

0000b440 <mp_nonlocal_alloc>:

static inline void *mp_nonlocal_alloc(size_t n_bytes) {
    b440:	b580      	push	{r7, lr}
    b442:	b082      	sub	sp, #8
    b444:	af00      	add	r7, sp, #0
    b446:	6078      	str	r0, [r7, #4]
    return m_new(uint8_t, n_bytes);
    b448:	6878      	ldr	r0, [r7, #4]
    b44a:	f7f4 ff67 	bl	31c <m_malloc>
    b44e:	4603      	mov	r3, r0
}
    b450:	4618      	mov	r0, r3
    b452:	3708      	adds	r7, #8
    b454:	46bd      	mov	sp, r7
    b456:	bd80      	pop	{r7, pc}

0000b458 <mp_nonlocal_realloc>:

static inline void *mp_nonlocal_realloc(void *ptr, size_t old_n_bytes, size_t new_n_bytes) {
    b458:	b580      	push	{r7, lr}
    b45a:	b084      	sub	sp, #16
    b45c:	af00      	add	r7, sp, #0
    b45e:	60f8      	str	r0, [r7, #12]
    b460:	60b9      	str	r1, [r7, #8]
    b462:	607a      	str	r2, [r7, #4]
    return m_renew(uint8_t, ptr, old_n_bytes, new_n_bytes);
    b464:	6879      	ldr	r1, [r7, #4]
    b466:	68f8      	ldr	r0, [r7, #12]
    b468:	f7f4 ff8a 	bl	380 <m_realloc>
    b46c:	4603      	mov	r3, r0
}
    b46e:	4618      	mov	r0, r3
    b470:	3710      	adds	r7, #16
    b472:	46bd      	mov	sp, r7
    b474:	bd80      	pop	{r7, pc}

0000b476 <mp_nonlocal_free>:

static inline void mp_nonlocal_free(void *ptr, size_t n_bytes) {
    b476:	b580      	push	{r7, lr}
    b478:	b082      	sub	sp, #8
    b47a:	af00      	add	r7, sp, #0
    b47c:	6078      	str	r0, [r7, #4]
    b47e:	6039      	str	r1, [r7, #0]
    m_del(uint8_t, ptr, n_bytes);
    b480:	6878      	ldr	r0, [r7, #4]
    b482:	f7f4 ffa9 	bl	3d8 <m_free>
}
    b486:	bf00      	nop
    b488:	3708      	adds	r7, #8
    b48a:	46bd      	mov	sp, r7
    b48c:	bd80      	pop	{r7, pc}

0000b48e <mp_locals_get>:
void mp_arg_parse_all(size_t n_pos, const mp_obj_t *pos, mp_map_t *kws, size_t n_allowed, const mp_arg_t *allowed, mp_arg_val_t *out_vals);
void mp_arg_parse_all_kw_array(size_t n_pos, size_t n_kw, const mp_obj_t *args, size_t n_allowed, const mp_arg_t *allowed, mp_arg_val_t *out_vals);
NORETURN void mp_arg_error_terse_mismatch(void);
NORETURN void mp_arg_error_unimpl_kw(void);

static inline mp_obj_dict_t *mp_locals_get(void) { return MP_STATE_THREAD(dict_locals); }
    b48e:	b480      	push	{r7}
    b490:	af00      	add	r7, sp, #0
    b492:	4b03      	ldr	r3, [pc, #12]	; (b4a0 <mp_locals_get+0x12>)
    b494:	685b      	ldr	r3, [r3, #4]
    b496:	4618      	mov	r0, r3
    b498:	46bd      	mov	sp, r7
    b49a:	f85d 7b04 	ldr.w	r7, [sp], #4
    b49e:	4770      	bx	lr
    b4a0:	20000a2c 	.word	0x20000a2c

0000b4a4 <mp_locals_set>:
static inline void mp_locals_set(mp_obj_dict_t *d) { MP_STATE_THREAD(dict_locals) = d; }
    b4a4:	b480      	push	{r7}
    b4a6:	b083      	sub	sp, #12
    b4a8:	af00      	add	r7, sp, #0
    b4aa:	6078      	str	r0, [r7, #4]
    b4ac:	4a04      	ldr	r2, [pc, #16]	; (b4c0 <mp_locals_set+0x1c>)
    b4ae:	687b      	ldr	r3, [r7, #4]
    b4b0:	6053      	str	r3, [r2, #4]
    b4b2:	bf00      	nop
    b4b4:	370c      	adds	r7, #12
    b4b6:	46bd      	mov	sp, r7
    b4b8:	f85d 7b04 	ldr.w	r7, [sp], #4
    b4bc:	4770      	bx	lr
    b4be:	bf00      	nop
    b4c0:	20000a2c 	.word	0x20000a2c

0000b4c4 <mp_globals_get>:
static inline mp_obj_dict_t *mp_globals_get(void) { return MP_STATE_THREAD(dict_globals); }
    b4c4:	b480      	push	{r7}
    b4c6:	af00      	add	r7, sp, #0
    b4c8:	4b03      	ldr	r3, [pc, #12]	; (b4d8 <mp_globals_get+0x14>)
    b4ca:	689b      	ldr	r3, [r3, #8]
    b4cc:	4618      	mov	r0, r3
    b4ce:	46bd      	mov	sp, r7
    b4d0:	f85d 7b04 	ldr.w	r7, [sp], #4
    b4d4:	4770      	bx	lr
    b4d6:	bf00      	nop
    b4d8:	20000a2c 	.word	0x20000a2c

0000b4dc <mp_globals_set>:
static inline void mp_globals_set(mp_obj_dict_t *d) { MP_STATE_THREAD(dict_globals) = d; }
    b4dc:	b480      	push	{r7}
    b4de:	b083      	sub	sp, #12
    b4e0:	af00      	add	r7, sp, #0
    b4e2:	6078      	str	r0, [r7, #4]
    b4e4:	4a04      	ldr	r2, [pc, #16]	; (b4f8 <mp_globals_set+0x1c>)
    b4e6:	687b      	ldr	r3, [r7, #4]
    b4e8:	6093      	str	r3, [r2, #8]
    b4ea:	bf00      	nop
    b4ec:	370c      	adds	r7, #12
    b4ee:	46bd      	mov	sp, r7
    b4f0:	f85d 7b04 	ldr.w	r7, [sp], #4
    b4f4:	4770      	bx	lr
    b4f6:	bf00      	nop
    b4f8:	20000a2c 	.word	0x20000a2c

0000b4fc <mp_init>:
const mp_obj_module_t mp_module___main__ = {
    .base = { &mp_type_module },
    .globals = (mp_obj_dict_t*)&MP_STATE_VM(dict_main),
};

void mp_init(void) {
    b4fc:	b580      	push	{r7, lr}
    b4fe:	af00      	add	r7, sp, #0
    qstr_init();
    b500:	f7f5 fca8 	bl	e54 <qstr_init>

    // no pending exceptions to start with
    MP_STATE_VM(mp_pending_exception) = MP_OBJ_NULL;
    b504:	4b0d      	ldr	r3, [pc, #52]	; (b53c <mp_init+0x40>)
    b506:	2200      	movs	r2, #0
    b508:	635a      	str	r2, [r3, #52]	; 0x34
    MICROPY_PORT_INIT_FUNC;
#endif

    #if MICROPY_ENABLE_COMPILER
    // optimization disabled by default
    MP_STATE_VM(mp_optimise_value) = 0;
    b50a:	4b0c      	ldr	r3, [pc, #48]	; (b53c <mp_init+0x40>)
    b50c:	2200      	movs	r2, #0
    b50e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    #endif

    // init global module dict
    mp_obj_dict_init(&MP_STATE_VM(mp_loaded_modules_dict), 3);
    b512:	2103      	movs	r1, #3
    b514:	480a      	ldr	r0, [pc, #40]	; (b540 <mp_init+0x44>)
    b516:	f003 fd6b 	bl	eff0 <mp_obj_dict_init>

    // initialise the __main__ module
    mp_obj_dict_init(&MP_STATE_VM(dict_main), 1);
    b51a:	2101      	movs	r1, #1
    b51c:	4809      	ldr	r0, [pc, #36]	; (b544 <mp_init+0x48>)
    b51e:	f003 fd67 	bl	eff0 <mp_obj_dict_init>
    mp_obj_dict_store(MP_OBJ_FROM_PTR(&MP_STATE_VM(dict_main)), MP_OBJ_NEW_QSTR(MP_QSTR___name__), MP_OBJ_NEW_QSTR(MP_QSTR___main__));
    b522:	2266      	movs	r2, #102	; 0x66
    b524:	216e      	movs	r1, #110	; 0x6e
    b526:	4807      	ldr	r0, [pc, #28]	; (b544 <mp_init+0x48>)
    b528:	f003 fd97 	bl	f05a <mp_obj_dict_store>

    // locals = globals for outer module (see Objects/frameobject.c/PyFrame_New())
    mp_locals_set(&MP_STATE_VM(dict_main));
    b52c:	4805      	ldr	r0, [pc, #20]	; (b544 <mp_init+0x48>)
    b52e:	f7ff ffb9 	bl	b4a4 <mp_locals_set>
    mp_globals_set(&MP_STATE_VM(dict_main));
    b532:	4804      	ldr	r0, [pc, #16]	; (b544 <mp_init+0x48>)
    b534:	f7ff ffd2 	bl	b4dc <mp_globals_set>
    #if MICROPY_PY_THREAD_GIL
    mp_thread_mutex_init(&MP_STATE_VM(gil_mutex));
    #endif

    MP_THREAD_GIL_ENTER();
}
    b538:	bf00      	nop
    b53a:	bd80      	pop	{r7, pc}
    b53c:	20000a2c 	.word	0x20000a2c
    b540:	20000a50 	.word	0x20000a50
    b544:	20000a64 	.word	0x20000a64

0000b548 <mp_deinit>:

void mp_deinit(void) {
    b548:	b480      	push	{r7}
    b54a:	af00      	add	r7, sp, #0

    // call port specific deinitialization if any
#ifdef MICROPY_PORT_INIT_FUNC
    MICROPY_PORT_DEINIT_FUNC;
#endif
}
    b54c:	bf00      	nop
    b54e:	46bd      	mov	sp, r7
    b550:	f85d 7b04 	ldr.w	r7, [sp], #4
    b554:	4770      	bx	lr

0000b556 <mp_load_name>:

mp_obj_t mp_load_name(qstr qst) {
    b556:	b590      	push	{r4, r7, lr}
    b558:	b085      	sub	sp, #20
    b55a:	af00      	add	r7, sp, #0
    b55c:	6078      	str	r0, [r7, #4]
    // logic: search locals, globals, builtins
    DEBUG_OP_printf("load name %s\n", qstr_str(qst));
    // If we're at the outer scope (locals == globals), dispatch to load_global right away
    if (mp_locals_get() != mp_globals_get()) {
    b55e:	f7ff ff96 	bl	b48e <mp_locals_get>
    b562:	4604      	mov	r4, r0
    b564:	f7ff ffae 	bl	b4c4 <mp_globals_get>
    b568:	4603      	mov	r3, r0
    b56a:	429c      	cmp	r4, r3
    b56c:	d012      	beq.n	b594 <mp_load_name+0x3e>
        mp_map_elem_t *elem = mp_map_lookup(&mp_locals_get()->map, MP_OBJ_NEW_QSTR(qst), MP_MAP_LOOKUP);
    b56e:	f7ff ff8e 	bl	b48e <mp_locals_get>
    b572:	4603      	mov	r3, r0
    b574:	1d18      	adds	r0, r3, #4
    b576:	687b      	ldr	r3, [r7, #4]
    b578:	009b      	lsls	r3, r3, #2
    b57a:	f043 0302 	orr.w	r3, r3, #2
    b57e:	2200      	movs	r2, #0
    b580:	4619      	mov	r1, r3
    b582:	f001 ff3b 	bl	d3fc <mp_map_lookup>
    b586:	60f8      	str	r0, [r7, #12]
        if (elem != NULL) {
    b588:	68fb      	ldr	r3, [r7, #12]
    b58a:	2b00      	cmp	r3, #0
    b58c:	d002      	beq.n	b594 <mp_load_name+0x3e>
            return elem->value;
    b58e:	68fb      	ldr	r3, [r7, #12]
    b590:	685b      	ldr	r3, [r3, #4]
    b592:	e003      	b.n	b59c <mp_load_name+0x46>
        }
    }
    return mp_load_global(qst);
    b594:	6878      	ldr	r0, [r7, #4]
    b596:	f000 f805 	bl	b5a4 <mp_load_global>
    b59a:	4603      	mov	r3, r0
}
    b59c:	4618      	mov	r0, r3
    b59e:	3714      	adds	r7, #20
    b5a0:	46bd      	mov	sp, r7
    b5a2:	bd90      	pop	{r4, r7, pc}

0000b5a4 <mp_load_global>:

mp_obj_t mp_load_global(qstr qst) {
    b5a4:	b580      	push	{r7, lr}
    b5a6:	b084      	sub	sp, #16
    b5a8:	af00      	add	r7, sp, #0
    b5aa:	6078      	str	r0, [r7, #4]
    // logic: search globals, builtins
    DEBUG_OP_printf("load global %s\n", qstr_str(qst));
    mp_map_elem_t *elem = mp_map_lookup(&mp_globals_get()->map, MP_OBJ_NEW_QSTR(qst), MP_MAP_LOOKUP);
    b5ac:	f7ff ff8a 	bl	b4c4 <mp_globals_get>
    b5b0:	4603      	mov	r3, r0
    b5b2:	1d18      	adds	r0, r3, #4
    b5b4:	687b      	ldr	r3, [r7, #4]
    b5b6:	009b      	lsls	r3, r3, #2
    b5b8:	f043 0302 	orr.w	r3, r3, #2
    b5bc:	2200      	movs	r2, #0
    b5be:	4619      	mov	r1, r3
    b5c0:	f001 ff1c 	bl	d3fc <mp_map_lookup>
    b5c4:	60f8      	str	r0, [r7, #12]
    if (elem == NULL) {
    b5c6:	68fb      	ldr	r3, [r7, #12]
    b5c8:	2b00      	cmp	r3, #0
    b5ca:	d110      	bne.n	b5ee <mp_load_global+0x4a>
            if (elem != NULL) {
                return elem->value;
            }
        }
        #endif
        elem = mp_map_lookup((mp_map_t*)&mp_module_builtins_globals.map, MP_OBJ_NEW_QSTR(qst), MP_MAP_LOOKUP);
    b5cc:	687b      	ldr	r3, [r7, #4]
    b5ce:	009b      	lsls	r3, r3, #2
    b5d0:	f043 0302 	orr.w	r3, r3, #2
    b5d4:	2200      	movs	r2, #0
    b5d6:	4619      	mov	r1, r3
    b5d8:	4808      	ldr	r0, [pc, #32]	; (b5fc <mp_load_global+0x58>)
    b5da:	f001 ff0f 	bl	d3fc <mp_map_lookup>
    b5de:	60f8      	str	r0, [r7, #12]
        if (elem == NULL) {
    b5e0:	68fb      	ldr	r3, [r7, #12]
    b5e2:	2b00      	cmp	r3, #0
    b5e4:	d103      	bne.n	b5ee <mp_load_global+0x4a>
            if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
                mp_raise_msg(&mp_type_NameError, "name not defined");
    b5e6:	4906      	ldr	r1, [pc, #24]	; (b600 <mp_load_global+0x5c>)
    b5e8:	4806      	ldr	r0, [pc, #24]	; (b604 <mp_load_global+0x60>)
    b5ea:	f001 fc79 	bl	cee0 <mp_raise_msg>
                nlr_raise(mp_obj_new_exception_msg_varg(&mp_type_NameError,
                    "name '%q' is not defined", qst));
            }
        }
    }
    return elem->value;
    b5ee:	68fb      	ldr	r3, [r7, #12]
    b5f0:	685b      	ldr	r3, [r3, #4]
}
    b5f2:	4618      	mov	r0, r3
    b5f4:	3710      	adds	r7, #16
    b5f6:	46bd      	mov	sp, r7
    b5f8:	bd80      	pop	{r7, pc}
    b5fa:	bf00      	nop
    b5fc:	000227ec 	.word	0x000227ec
    b600:	0001f3c4 	.word	0x0001f3c4
    b604:	0002037c 	.word	0x0002037c

0000b608 <mp_load_build_class>:

mp_obj_t mp_load_build_class(void) {
    b608:	b480      	push	{r7}
    b60a:	af00      	add	r7, sp, #0
        if (elem != NULL) {
            return elem->value;
        }
    }
    #endif
    return MP_OBJ_FROM_PTR(&mp_builtin___build_class___obj);
    b60c:	4b02      	ldr	r3, [pc, #8]	; (b618 <mp_load_build_class+0x10>)
}
    b60e:	4618      	mov	r0, r3
    b610:	46bd      	mov	sp, r7
    b612:	f85d 7b04 	ldr.w	r7, [sp], #4
    b616:	4770      	bx	lr
    b618:	000223f8 	.word	0x000223f8

0000b61c <mp_store_name>:

void mp_store_name(qstr qst, mp_obj_t obj) {
    b61c:	b580      	push	{r7, lr}
    b61e:	b082      	sub	sp, #8
    b620:	af00      	add	r7, sp, #0
    b622:	6078      	str	r0, [r7, #4]
    b624:	6039      	str	r1, [r7, #0]
    DEBUG_OP_printf("store name %s <- %p\n", qstr_str(qst), obj);
    mp_obj_dict_store(MP_OBJ_FROM_PTR(mp_locals_get()), MP_OBJ_NEW_QSTR(qst), obj);
    b626:	f7ff ff32 	bl	b48e <mp_locals_get>
    b62a:	687b      	ldr	r3, [r7, #4]
    b62c:	009b      	lsls	r3, r3, #2
    b62e:	f043 0302 	orr.w	r3, r3, #2
    b632:	683a      	ldr	r2, [r7, #0]
    b634:	4619      	mov	r1, r3
    b636:	f003 fd10 	bl	f05a <mp_obj_dict_store>
}
    b63a:	bf00      	nop
    b63c:	3708      	adds	r7, #8
    b63e:	46bd      	mov	sp, r7
    b640:	bd80      	pop	{r7, pc}

0000b642 <mp_delete_name>:

void mp_delete_name(qstr qst) {
    b642:	b580      	push	{r7, lr}
    b644:	b082      	sub	sp, #8
    b646:	af00      	add	r7, sp, #0
    b648:	6078      	str	r0, [r7, #4]
    DEBUG_OP_printf("delete name %s\n", qstr_str(qst));
    // TODO convert KeyError to NameError if qst not found
    mp_obj_dict_delete(MP_OBJ_FROM_PTR(mp_locals_get()), MP_OBJ_NEW_QSTR(qst));
    b64a:	f7ff ff20 	bl	b48e <mp_locals_get>
    b64e:	4602      	mov	r2, r0
    b650:	687b      	ldr	r3, [r7, #4]
    b652:	009b      	lsls	r3, r3, #2
    b654:	f043 0302 	orr.w	r3, r3, #2
    b658:	4619      	mov	r1, r3
    b65a:	4610      	mov	r0, r2
    b65c:	f003 fd32 	bl	f0c4 <mp_obj_dict_delete>
}
    b660:	bf00      	nop
    b662:	3708      	adds	r7, #8
    b664:	46bd      	mov	sp, r7
    b666:	bd80      	pop	{r7, pc}

0000b668 <mp_store_global>:

void mp_store_global(qstr qst, mp_obj_t obj) {
    b668:	b580      	push	{r7, lr}
    b66a:	b082      	sub	sp, #8
    b66c:	af00      	add	r7, sp, #0
    b66e:	6078      	str	r0, [r7, #4]
    b670:	6039      	str	r1, [r7, #0]
    DEBUG_OP_printf("store global %s <- %p\n", qstr_str(qst), obj);
    mp_obj_dict_store(MP_OBJ_FROM_PTR(mp_globals_get()), MP_OBJ_NEW_QSTR(qst), obj);
    b672:	f7ff ff27 	bl	b4c4 <mp_globals_get>
    b676:	687b      	ldr	r3, [r7, #4]
    b678:	009b      	lsls	r3, r3, #2
    b67a:	f043 0302 	orr.w	r3, r3, #2
    b67e:	683a      	ldr	r2, [r7, #0]
    b680:	4619      	mov	r1, r3
    b682:	f003 fcea 	bl	f05a <mp_obj_dict_store>
}
    b686:	bf00      	nop
    b688:	3708      	adds	r7, #8
    b68a:	46bd      	mov	sp, r7
    b68c:	bd80      	pop	{r7, pc}

0000b68e <mp_delete_global>:

void mp_delete_global(qstr qst) {
    b68e:	b580      	push	{r7, lr}
    b690:	b082      	sub	sp, #8
    b692:	af00      	add	r7, sp, #0
    b694:	6078      	str	r0, [r7, #4]
    DEBUG_OP_printf("delete global %s\n", qstr_str(qst));
    // TODO convert KeyError to NameError if qst not found
    mp_obj_dict_delete(MP_OBJ_FROM_PTR(mp_globals_get()), MP_OBJ_NEW_QSTR(qst));
    b696:	f7ff ff15 	bl	b4c4 <mp_globals_get>
    b69a:	4602      	mov	r2, r0
    b69c:	687b      	ldr	r3, [r7, #4]
    b69e:	009b      	lsls	r3, r3, #2
    b6a0:	f043 0302 	orr.w	r3, r3, #2
    b6a4:	4619      	mov	r1, r3
    b6a6:	4610      	mov	r0, r2
    b6a8:	f003 fd0c 	bl	f0c4 <mp_obj_dict_delete>
}
    b6ac:	bf00      	nop
    b6ae:	3708      	adds	r7, #8
    b6b0:	46bd      	mov	sp, r7
    b6b2:	bd80      	pop	{r7, pc}

0000b6b4 <mp_unary_op>:

mp_obj_t mp_unary_op(mp_unary_op_t op, mp_obj_t arg) {
    b6b4:	b580      	push	{r7, lr}
    b6b6:	b088      	sub	sp, #32
    b6b8:	af00      	add	r7, sp, #0
    b6ba:	6078      	str	r0, [r7, #4]
    b6bc:	6039      	str	r1, [r7, #0]
    DEBUG_OP_printf("unary " UINT_FMT " %q %p\n", op, mp_unary_op_method_name[op], arg);

    if (op == MP_UNARY_OP_NOT) {
    b6be:	687b      	ldr	r3, [r7, #4]
    b6c0:	2b03      	cmp	r3, #3
    b6c2:	d10b      	bne.n	b6dc <mp_unary_op+0x28>
        // "not x" is the negative of whether "x" is true per Python semantics
        return mp_obj_new_bool(mp_obj_is_true(arg) == 0);
    b6c4:	6838      	ldr	r0, [r7, #0]
    b6c6:	f002 f91f 	bl	d908 <mp_obj_is_true>
    b6ca:	4603      	mov	r3, r0
    b6cc:	f083 0301 	eor.w	r3, r3, #1
    b6d0:	b2db      	uxtb	r3, r3
    b6d2:	4618      	mov	r0, r3
    b6d4:	f7ff fe95 	bl	b402 <mp_obj_new_bool>
    b6d8:	4603      	mov	r3, r0
    b6da:	e0c3      	b.n	b864 <mp_unary_op+0x1b0>
    } else if (MP_OBJ_IS_SMALL_INT(arg)) {
    b6dc:	6838      	ldr	r0, [r7, #0]
    b6de:	f7ff fe39 	bl	b354 <MP_OBJ_IS_SMALL_INT>
    b6e2:	4603      	mov	r3, r0
    b6e4:	2b00      	cmp	r3, #0
    b6e6:	d05e      	beq.n	b7a6 <mp_unary_op+0xf2>
        mp_int_t val = MP_OBJ_SMALL_INT_VALUE(arg);
    b6e8:	683b      	ldr	r3, [r7, #0]
    b6ea:	105b      	asrs	r3, r3, #1
    b6ec:	617b      	str	r3, [r7, #20]
        switch (op) {
    b6ee:	687b      	ldr	r3, [r7, #4]
    b6f0:	2b07      	cmp	r3, #7
    b6f2:	d849      	bhi.n	b788 <mp_unary_op+0xd4>
    b6f4:	a201      	add	r2, pc, #4	; (adr r2, b6fc <mp_unary_op+0x48>)
    b6f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    b6fa:	bf00      	nop
    b6fc:	0000b737 	.word	0x0000b737
    b700:	0000b73b 	.word	0x0000b73b
    b704:	0000b789 	.word	0x0000b789
    b708:	0000b789 	.word	0x0000b789
    b70c:	0000b71d 	.word	0x0000b71d
    b710:	0000b789 	.word	0x0000b789
    b714:	0000b733 	.word	0x0000b733
    b718:	0000b75d 	.word	0x0000b75d
            case MP_UNARY_OP_BOOL:
                return mp_obj_new_bool(val != 0);
    b71c:	697b      	ldr	r3, [r7, #20]
    b71e:	2b00      	cmp	r3, #0
    b720:	bf14      	ite	ne
    b722:	2301      	movne	r3, #1
    b724:	2300      	moveq	r3, #0
    b726:	b2db      	uxtb	r3, r3
    b728:	4618      	mov	r0, r3
    b72a:	f7ff fe6a 	bl	b402 <mp_obj_new_bool>
    b72e:	4603      	mov	r3, r0
    b730:	e098      	b.n	b864 <mp_unary_op+0x1b0>
            case MP_UNARY_OP_HASH:
                return arg;
    b732:	683b      	ldr	r3, [r7, #0]
    b734:	e096      	b.n	b864 <mp_unary_op+0x1b0>
            case MP_UNARY_OP_POSITIVE:
                return arg;
    b736:	683b      	ldr	r3, [r7, #0]
    b738:	e094      	b.n	b864 <mp_unary_op+0x1b0>
            case MP_UNARY_OP_NEGATIVE:
                // check for overflow
                if (val == MP_SMALL_INT_MIN) {
    b73a:	697b      	ldr	r3, [r7, #20]
    b73c:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
    b740:	d106      	bne.n	b750 <mp_unary_op+0x9c>
                    return mp_obj_new_int(-val);
    b742:	697b      	ldr	r3, [r7, #20]
    b744:	425b      	negs	r3, r3
    b746:	4618      	mov	r0, r3
    b748:	f005 f84e 	bl	107e8 <mp_obj_new_int>
    b74c:	4603      	mov	r3, r0
    b74e:	e089      	b.n	b864 <mp_unary_op+0x1b0>
                } else {
                    return MP_OBJ_NEW_SMALL_INT(-val);
    b750:	697b      	ldr	r3, [r7, #20]
    b752:	425b      	negs	r3, r3
    b754:	005b      	lsls	r3, r3, #1
    b756:	f043 0301 	orr.w	r3, r3, #1
    b75a:	e083      	b.n	b864 <mp_unary_op+0x1b0>
                }
            case MP_UNARY_OP_ABS:
                if (val >= 0) {
    b75c:	697b      	ldr	r3, [r7, #20]
    b75e:	2b00      	cmp	r3, #0
    b760:	db01      	blt.n	b766 <mp_unary_op+0xb2>
                    return arg;
    b762:	683b      	ldr	r3, [r7, #0]
    b764:	e07e      	b.n	b864 <mp_unary_op+0x1b0>
                } else if (val == MP_SMALL_INT_MIN) {
    b766:	697b      	ldr	r3, [r7, #20]
    b768:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
    b76c:	d106      	bne.n	b77c <mp_unary_op+0xc8>
                    // check for overflow
                    return mp_obj_new_int(-val);
    b76e:	697b      	ldr	r3, [r7, #20]
    b770:	425b      	negs	r3, r3
    b772:	4618      	mov	r0, r3
    b774:	f005 f838 	bl	107e8 <mp_obj_new_int>
    b778:	4603      	mov	r3, r0
    b77a:	e073      	b.n	b864 <mp_unary_op+0x1b0>
                } else {
                    return MP_OBJ_NEW_SMALL_INT(-val);
    b77c:	697b      	ldr	r3, [r7, #20]
    b77e:	425b      	negs	r3, r3
    b780:	005b      	lsls	r3, r3, #1
    b782:	f043 0301 	orr.w	r3, r3, #1
    b786:	e06d      	b.n	b864 <mp_unary_op+0x1b0>
                }
            default:
                assert(op == MP_UNARY_OP_INVERT);
    b788:	687b      	ldr	r3, [r7, #4]
    b78a:	2b02      	cmp	r3, #2
    b78c:	d005      	beq.n	b79a <mp_unary_op+0xe6>
    b78e:	4b37      	ldr	r3, [pc, #220]	; (b86c <mp_unary_op+0x1b8>)
    b790:	4a37      	ldr	r2, [pc, #220]	; (b870 <mp_unary_op+0x1bc>)
    b792:	21fa      	movs	r1, #250	; 0xfa
    b794:	4837      	ldr	r0, [pc, #220]	; (b874 <mp_unary_op+0x1c0>)
    b796:	f00f fd11 	bl	1b1bc <__assert_func>
                return MP_OBJ_NEW_SMALL_INT(~val);
    b79a:	697b      	ldr	r3, [r7, #20]
    b79c:	43db      	mvns	r3, r3
    b79e:	005b      	lsls	r3, r3, #1
    b7a0:	f043 0301 	orr.w	r3, r3, #1
    b7a4:	e05e      	b.n	b864 <mp_unary_op+0x1b0>
        }
    } else if (op == MP_UNARY_OP_HASH && MP_OBJ_IS_STR_OR_BYTES(arg)) {
    b7a6:	687b      	ldr	r3, [r7, #4]
    b7a8:	2b06      	cmp	r3, #6
    b7aa:	d145      	bne.n	b838 <mp_unary_op+0x184>
    b7ac:	6838      	ldr	r0, [r7, #0]
    b7ae:	f7ff fde3 	bl	b378 <MP_OBJ_IS_QSTR>
    b7b2:	4603      	mov	r3, r0
    b7b4:	2b00      	cmp	r3, #0
    b7b6:	d10b      	bne.n	b7d0 <mp_unary_op+0x11c>
    b7b8:	6838      	ldr	r0, [r7, #0]
    b7ba:	f7ff fdef 	bl	b39c <MP_OBJ_IS_OBJ>
    b7be:	4603      	mov	r3, r0
    b7c0:	2b00      	cmp	r3, #0
    b7c2:	d039      	beq.n	b838 <mp_unary_op+0x184>
    b7c4:	683b      	ldr	r3, [r7, #0]
    b7c6:	681b      	ldr	r3, [r3, #0]
    b7c8:	699b      	ldr	r3, [r3, #24]
    b7ca:	4a2b      	ldr	r2, [pc, #172]	; (b878 <mp_unary_op+0x1c4>)
    b7cc:	4293      	cmp	r3, r2
    b7ce:	d133      	bne.n	b838 <mp_unary_op+0x184>
        // fast path for hashing str/bytes
        GET_STR_HASH(arg, h);
    b7d0:	6838      	ldr	r0, [r7, #0]
    b7d2:	f7ff fdd1 	bl	b378 <MP_OBJ_IS_QSTR>
    b7d6:	4603      	mov	r3, r0
    b7d8:	2b00      	cmp	r3, #0
    b7da:	d006      	beq.n	b7ea <mp_unary_op+0x136>
    b7dc:	683b      	ldr	r3, [r7, #0]
    b7de:	089b      	lsrs	r3, r3, #2
    b7e0:	4618      	mov	r0, r3
    b7e2:	f7f5 fcdb 	bl	119c <qstr_hash>
    b7e6:	61f8      	str	r0, [r7, #28]
    b7e8:	e002      	b.n	b7f0 <mp_unary_op+0x13c>
    b7ea:	683b      	ldr	r3, [r7, #0]
    b7ec:	685b      	ldr	r3, [r3, #4]
    b7ee:	61fb      	str	r3, [r7, #28]
        if (h == 0) {
    b7f0:	69fb      	ldr	r3, [r7, #28]
    b7f2:	2b00      	cmp	r3, #0
    b7f4:	d11b      	bne.n	b82e <mp_unary_op+0x17a>
            GET_STR_DATA_LEN(arg, data, len);
    b7f6:	6838      	ldr	r0, [r7, #0]
    b7f8:	f7ff fdbe 	bl	b378 <MP_OBJ_IS_QSTR>
    b7fc:	4603      	mov	r3, r0
    b7fe:	2b00      	cmp	r3, #0
    b800:	d009      	beq.n	b816 <mp_unary_op+0x162>
    b802:	683b      	ldr	r3, [r7, #0]
    b804:	089b      	lsrs	r3, r3, #2
    b806:	f107 0208 	add.w	r2, r7, #8
    b80a:	4611      	mov	r1, r2
    b80c:	4618      	mov	r0, r3
    b80e:	f7f5 fcef 	bl	11f0 <qstr_data>
    b812:	61b8      	str	r0, [r7, #24]
    b814:	e005      	b.n	b822 <mp_unary_op+0x16e>
    b816:	683b      	ldr	r3, [r7, #0]
    b818:	689b      	ldr	r3, [r3, #8]
    b81a:	60bb      	str	r3, [r7, #8]
    b81c:	683b      	ldr	r3, [r7, #0]
    b81e:	68db      	ldr	r3, [r3, #12]
    b820:	61bb      	str	r3, [r7, #24]
            h = qstr_compute_hash(data, len);
    b822:	68bb      	ldr	r3, [r7, #8]
    b824:	4619      	mov	r1, r3
    b826:	69b8      	ldr	r0, [r7, #24]
    b828:	f7f5 fae8 	bl	dfc <qstr_compute_hash>
    b82c:	61f8      	str	r0, [r7, #28]
        }
        return MP_OBJ_NEW_SMALL_INT(h);
    b82e:	69fb      	ldr	r3, [r7, #28]
    b830:	005b      	lsls	r3, r3, #1
    b832:	f043 0301 	orr.w	r3, r3, #1
    b836:	e015      	b.n	b864 <mp_unary_op+0x1b0>
    } else {
        mp_obj_type_t *type = mp_obj_get_type(arg);
    b838:	6838      	ldr	r0, [r7, #0]
    b83a:	f001 ff89 	bl	d750 <mp_obj_get_type>
    b83e:	6138      	str	r0, [r7, #16]
        if (type->unary_op != NULL) {
    b840:	693b      	ldr	r3, [r7, #16]
    b842:	695b      	ldr	r3, [r3, #20]
    b844:	2b00      	cmp	r3, #0
    b846:	d00a      	beq.n	b85e <mp_unary_op+0x1aa>
            mp_obj_t result = type->unary_op(op, arg);
    b848:	693b      	ldr	r3, [r7, #16]
    b84a:	695b      	ldr	r3, [r3, #20]
    b84c:	6839      	ldr	r1, [r7, #0]
    b84e:	6878      	ldr	r0, [r7, #4]
    b850:	4798      	blx	r3
    b852:	60f8      	str	r0, [r7, #12]
            if (result != MP_OBJ_NULL) {
    b854:	68fb      	ldr	r3, [r7, #12]
    b856:	2b00      	cmp	r3, #0
    b858:	d001      	beq.n	b85e <mp_unary_op+0x1aa>
                return result;
    b85a:	68fb      	ldr	r3, [r7, #12]
    b85c:	e002      	b.n	b864 <mp_unary_op+0x1b0>
            }
        }
        if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
            mp_raise_TypeError("unsupported type for operator");
    b85e:	4807      	ldr	r0, [pc, #28]	; (b87c <mp_unary_op+0x1c8>)
    b860:	f001 fb60 	bl	cf24 <mp_raise_TypeError>
            nlr_raise(mp_obj_new_exception_msg_varg(&mp_type_TypeError,
                "unsupported type for %q: '%s'",
                mp_unary_op_method_name[op], mp_obj_get_type_str(arg)));
        }
    }
}
    b864:	4618      	mov	r0, r3
    b866:	3720      	adds	r7, #32
    b868:	46bd      	mov	sp, r7
    b86a:	bd80      	pop	{r7, pc}
    b86c:	0001f3d8 	.word	0x0001f3d8
    b870:	0001f650 	.word	0x0001f650
    b874:	0001f3f4 	.word	0x0001f3f4
    b878:	000126c3 	.word	0x000126c3
    b87c:	0001f408 	.word	0x0001f408

0000b880 <mp_binary_op>:

mp_obj_t mp_binary_op(mp_binary_op_t op, mp_obj_t lhs, mp_obj_t rhs) {
    b880:	b590      	push	{r4, r7, lr}
    b882:	b095      	sub	sp, #84	; 0x54
    b884:	af00      	add	r7, sp, #0
    b886:	60f8      	str	r0, [r7, #12]
    b888:	60b9      	str	r1, [r7, #8]
    b88a:	607a      	str	r2, [r7, #4]
    //   then check for implemented seq.concat
    //   then fail
    // note that list does not implement + or +=, so that inplace_concat is reached first for +=

    // deal with is
    if (op == MP_BINARY_OP_IS) {
    b88c:	68fb      	ldr	r3, [r7, #12]
    b88e:	2b07      	cmp	r3, #7
    b890:	d10b      	bne.n	b8aa <mp_binary_op+0x2a>
        return mp_obj_new_bool(lhs == rhs);
    b892:	68ba      	ldr	r2, [r7, #8]
    b894:	687b      	ldr	r3, [r7, #4]
    b896:	429a      	cmp	r2, r3
    b898:	bf0c      	ite	eq
    b89a:	2301      	moveq	r3, #1
    b89c:	2300      	movne	r3, #0
    b89e:	b2db      	uxtb	r3, r3
    b8a0:	4618      	mov	r0, r3
    b8a2:	f7ff fdae 	bl	b402 <mp_obj_new_bool>
    b8a6:	4603      	mov	r3, r0
    b8a8:	e239      	b.n	bd1e <mp_binary_op+0x49e>
    }

    // deal with == and != for all types
    if (op == MP_BINARY_OP_EQUAL || op == MP_BINARY_OP_NOT_EQUAL) {
    b8aa:	68fb      	ldr	r3, [r7, #12]
    b8ac:	2b02      	cmp	r3, #2
    b8ae:	d002      	beq.n	b8b6 <mp_binary_op+0x36>
    b8b0:	68fb      	ldr	r3, [r7, #12]
    b8b2:	2b05      	cmp	r3, #5
    b8b4:	d114      	bne.n	b8e0 <mp_binary_op+0x60>
        if (mp_obj_equal(lhs, rhs)) {
    b8b6:	6879      	ldr	r1, [r7, #4]
    b8b8:	68b8      	ldr	r0, [r7, #8]
    b8ba:	f002 f89b 	bl	d9f4 <mp_obj_equal>
    b8be:	4603      	mov	r3, r0
    b8c0:	2b00      	cmp	r3, #0
    b8c2:	d006      	beq.n	b8d2 <mp_binary_op+0x52>
            if (op == MP_BINARY_OP_EQUAL) {
    b8c4:	68fb      	ldr	r3, [r7, #12]
    b8c6:	2b02      	cmp	r3, #2
    b8c8:	d101      	bne.n	b8ce <mp_binary_op+0x4e>
                return mp_const_true;
    b8ca:	4bb0      	ldr	r3, [pc, #704]	; (bb8c <mp_binary_op+0x30c>)
    b8cc:	e227      	b.n	bd1e <mp_binary_op+0x49e>
            } else {
                return mp_const_false;
    b8ce:	4bb0      	ldr	r3, [pc, #704]	; (bb90 <mp_binary_op+0x310>)
    b8d0:	e225      	b.n	bd1e <mp_binary_op+0x49e>
            }
        } else {
            if (op == MP_BINARY_OP_EQUAL) {
    b8d2:	68fb      	ldr	r3, [r7, #12]
    b8d4:	2b02      	cmp	r3, #2
    b8d6:	d101      	bne.n	b8dc <mp_binary_op+0x5c>
                return mp_const_false;
    b8d8:	4bad      	ldr	r3, [pc, #692]	; (bb90 <mp_binary_op+0x310>)
    b8da:	e220      	b.n	bd1e <mp_binary_op+0x49e>
            } else {
                return mp_const_true;
    b8dc:	4bab      	ldr	r3, [pc, #684]	; (bb8c <mp_binary_op+0x30c>)
    b8de:	e21e      	b.n	bd1e <mp_binary_op+0x49e>
            }
        }
    }

    // deal with exception_match for all types
    if (op == MP_BINARY_OP_EXCEPTION_MATCH) {
    b8e0:	68fb      	ldr	r3, [r7, #12]
    b8e2:	2b08      	cmp	r3, #8
    b8e4:	d145      	bne.n	b972 <mp_binary_op+0xf2>
        // rhs must be issubclass(rhs, BaseException)
        if (mp_obj_is_exception_type(rhs)) {
    b8e6:	6878      	ldr	r0, [r7, #4]
    b8e8:	f003 fe82 	bl	f5f0 <mp_obj_is_exception_type>
    b8ec:	4603      	mov	r3, r0
    b8ee:	2b00      	cmp	r3, #0
    b8f0:	d00a      	beq.n	b908 <mp_binary_op+0x88>
            if (mp_obj_exception_match(lhs, rhs)) {
    b8f2:	6879      	ldr	r1, [r7, #4]
    b8f4:	68b8      	ldr	r0, [r7, #8]
    b8f6:	f003 feb3 	bl	f660 <mp_obj_exception_match>
    b8fa:	4603      	mov	r3, r0
    b8fc:	2b00      	cmp	r3, #0
    b8fe:	d001      	beq.n	b904 <mp_binary_op+0x84>
                return mp_const_true;
    b900:	4ba2      	ldr	r3, [pc, #648]	; (bb8c <mp_binary_op+0x30c>)
    b902:	e20c      	b.n	bd1e <mp_binary_op+0x49e>
            } else {
                return mp_const_false;
    b904:	4ba2      	ldr	r3, [pc, #648]	; (bb90 <mp_binary_op+0x310>)
    b906:	e20a      	b.n	bd1e <mp_binary_op+0x49e>
            }
        } else if (MP_OBJ_IS_TYPE(rhs, &mp_type_tuple)) {
    b908:	6878      	ldr	r0, [r7, #4]
    b90a:	f7ff fd47 	bl	b39c <MP_OBJ_IS_OBJ>
    b90e:	4603      	mov	r3, r0
    b910:	2b00      	cmp	r3, #0
    b912:	f000 81f3 	beq.w	bcfc <mp_binary_op+0x47c>
    b916:	687b      	ldr	r3, [r7, #4]
    b918:	681b      	ldr	r3, [r3, #0]
    b91a:	4a9e      	ldr	r2, [pc, #632]	; (bb94 <mp_binary_op+0x314>)
    b91c:	4293      	cmp	r3, r2
    b91e:	f040 81ed 	bne.w	bcfc <mp_binary_op+0x47c>
            mp_obj_tuple_t *tuple = MP_OBJ_TO_PTR(rhs);
    b922:	687b      	ldr	r3, [r7, #4]
    b924:	63fb      	str	r3, [r7, #60]	; 0x3c
            for (size_t i = 0; i < tuple->len; i++) {
    b926:	2300      	movs	r3, #0
    b928:	64fb      	str	r3, [r7, #76]	; 0x4c
    b92a:	e01b      	b.n	b964 <mp_binary_op+0xe4>
                rhs = tuple->items[i];
    b92c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    b92e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    b930:	3202      	adds	r2, #2
    b932:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    b936:	607b      	str	r3, [r7, #4]
                if (!mp_obj_is_exception_type(rhs)) {
    b938:	6878      	ldr	r0, [r7, #4]
    b93a:	f003 fe59 	bl	f5f0 <mp_obj_is_exception_type>
    b93e:	4603      	mov	r3, r0
    b940:	f083 0301 	eor.w	r3, r3, #1
    b944:	b2db      	uxtb	r3, r3
    b946:	2b00      	cmp	r3, #0
    b948:	f040 81da 	bne.w	bd00 <mp_binary_op+0x480>
                    goto unsupported_op;
                }
                if (mp_obj_exception_match(lhs, rhs)) {
    b94c:	6879      	ldr	r1, [r7, #4]
    b94e:	68b8      	ldr	r0, [r7, #8]
    b950:	f003 fe86 	bl	f660 <mp_obj_exception_match>
    b954:	4603      	mov	r3, r0
    b956:	2b00      	cmp	r3, #0
    b958:	d001      	beq.n	b95e <mp_binary_op+0xde>
                    return mp_const_true;
    b95a:	4b8c      	ldr	r3, [pc, #560]	; (bb8c <mp_binary_op+0x30c>)
    b95c:	e1df      	b.n	bd1e <mp_binary_op+0x49e>
            for (size_t i = 0; i < tuple->len; i++) {
    b95e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    b960:	3301      	adds	r3, #1
    b962:	64fb      	str	r3, [r7, #76]	; 0x4c
    b964:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    b966:	685a      	ldr	r2, [r3, #4]
    b968:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    b96a:	429a      	cmp	r2, r3
    b96c:	d8de      	bhi.n	b92c <mp_binary_op+0xac>
                }
            }
            return mp_const_false;
    b96e:	4b88      	ldr	r3, [pc, #544]	; (bb90 <mp_binary_op+0x310>)
    b970:	e1d5      	b.n	bd1e <mp_binary_op+0x49e>
        }
        goto unsupported_op;
    }

    if (MP_OBJ_IS_SMALL_INT(lhs)) {
    b972:	68b8      	ldr	r0, [r7, #8]
    b974:	f7ff fcee 	bl	b354 <MP_OBJ_IS_SMALL_INT>
    b978:	4603      	mov	r3, r0
    b97a:	2b00      	cmp	r3, #0
    b97c:	f000 8182 	beq.w	bc84 <mp_binary_op+0x404>
        mp_int_t lhs_val = MP_OBJ_SMALL_INT_VALUE(lhs);
    b980:	68bb      	ldr	r3, [r7, #8]
    b982:	105b      	asrs	r3, r3, #1
    b984:	64bb      	str	r3, [r7, #72]	; 0x48
        if (MP_OBJ_IS_SMALL_INT(rhs)) {
    b986:	6878      	ldr	r0, [r7, #4]
    b988:	f7ff fce4 	bl	b354 <MP_OBJ_IS_SMALL_INT>
    b98c:	4603      	mov	r3, r0
    b98e:	2b00      	cmp	r3, #0
    b990:	f000 8178 	beq.w	bc84 <mp_binary_op+0x404>
            mp_int_t rhs_val = MP_OBJ_SMALL_INT_VALUE(rhs);
    b994:	687b      	ldr	r3, [r7, #4]
    b996:	105b      	asrs	r3, r3, #1
    b998:	647b      	str	r3, [r7, #68]	; 0x44
            //      -       result always fits in mp_int_t, then handled by SMALL_INT check
            //      *       checked explicitly
            //      /       if lhs=MIN and rhs=-1; result always fits in mp_int_t, then handled by SMALL_INT check
            //      %       if lhs=MIN and rhs=-1; result always fits in mp_int_t, then handled by SMALL_INT check
            //      <<      checked explicitly
            switch (op) {
    b99a:	68fb      	ldr	r3, [r7, #12]
    b99c:	2b21      	cmp	r3, #33	; 0x21
    b99e:	f200 81b1 	bhi.w	bd04 <mp_binary_op+0x484>
    b9a2:	a201      	add	r2, pc, #4	; (adr r2, b9a8 <mp_binary_op+0x128>)
    b9a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    b9a8:	0000bc05 	.word	0x0000bc05
    b9ac:	0000bc1d 	.word	0x0000bc1d
    b9b0:	0000bd05 	.word	0x0000bd05
    b9b4:	0000bc35 	.word	0x0000bc35
    b9b8:	0000bc4d 	.word	0x0000bc4d
    b9bc:	0000bd05 	.word	0x0000bd05
    b9c0:	0000bd05 	.word	0x0000bd05
    b9c4:	0000bd05 	.word	0x0000bd05
    b9c8:	0000bd05 	.word	0x0000bd05
    b9cc:	0000ba31 	.word	0x0000ba31
    b9d0:	0000ba3b 	.word	0x0000ba3b
    b9d4:	0000ba45 	.word	0x0000ba45
    b9d8:	0000ba4f 	.word	0x0000ba4f
    b9dc:	0000ba9b 	.word	0x0000ba9b
    b9e0:	0000babd 	.word	0x0000babd
    b9e4:	0000bac7 	.word	0x0000bac7
    b9e8:	0000bad1 	.word	0x0000bad1
    b9ec:	0000bb01 	.word	0x0000bb01
    b9f0:	0000bd05 	.word	0x0000bd05
    b9f4:	0000bb15 	.word	0x0000bb15
    b9f8:	0000bb29 	.word	0x0000bb29
    b9fc:	0000ba31 	.word	0x0000ba31
    ba00:	0000ba3b 	.word	0x0000ba3b
    ba04:	0000ba45 	.word	0x0000ba45
    ba08:	0000ba4f 	.word	0x0000ba4f
    ba0c:	0000ba9b 	.word	0x0000ba9b
    ba10:	0000babd 	.word	0x0000babd
    ba14:	0000bac7 	.word	0x0000bac7
    ba18:	0000bad1 	.word	0x0000bad1
    ba1c:	0000bb01 	.word	0x0000bb01
    ba20:	0000bd05 	.word	0x0000bd05
    ba24:	0000bb15 	.word	0x0000bb15
    ba28:	0000bb29 	.word	0x0000bb29
    ba2c:	0000bbc3 	.word	0x0000bbc3
                case MP_BINARY_OP_OR:
                case MP_BINARY_OP_INPLACE_OR: lhs_val |= rhs_val; break;
    ba30:	6cba      	ldr	r2, [r7, #72]	; 0x48
    ba32:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    ba34:	4313      	orrs	r3, r2
    ba36:	64bb      	str	r3, [r7, #72]	; 0x48
    ba38:	e114      	b.n	bc64 <mp_binary_op+0x3e4>
                case MP_BINARY_OP_XOR:
                case MP_BINARY_OP_INPLACE_XOR: lhs_val ^= rhs_val; break;
    ba3a:	6cba      	ldr	r2, [r7, #72]	; 0x48
    ba3c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    ba3e:	4053      	eors	r3, r2
    ba40:	64bb      	str	r3, [r7, #72]	; 0x48
    ba42:	e10f      	b.n	bc64 <mp_binary_op+0x3e4>
                case MP_BINARY_OP_AND:
                case MP_BINARY_OP_INPLACE_AND: lhs_val &= rhs_val; break;
    ba44:	6cba      	ldr	r2, [r7, #72]	; 0x48
    ba46:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    ba48:	4013      	ands	r3, r2
    ba4a:	64bb      	str	r3, [r7, #72]	; 0x48
    ba4c:	e10a      	b.n	bc64 <mp_binary_op+0x3e4>
                case MP_BINARY_OP_LSHIFT:
                case MP_BINARY_OP_INPLACE_LSHIFT: {
                    if (rhs_val < 0) {
    ba4e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    ba50:	2b00      	cmp	r3, #0
    ba52:	da02      	bge.n	ba5a <mp_binary_op+0x1da>
                        // negative shift not allowed
                        mp_raise_ValueError("negative shift count");
    ba54:	4850      	ldr	r0, [pc, #320]	; (bb98 <mp_binary_op+0x318>)
    ba56:	f001 fa5a 	bl	cf0e <mp_raise_ValueError>
                    } else if (rhs_val >= (mp_int_t)BITS_PER_WORD || lhs_val > (MP_SMALL_INT_MAX >> rhs_val) || lhs_val < (MP_SMALL_INT_MIN >> rhs_val)) {
    ba5a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    ba5c:	2b1f      	cmp	r3, #31
    ba5e:	dc0d      	bgt.n	ba7c <mp_binary_op+0x1fc>
    ba60:	f06f 4240 	mvn.w	r2, #3221225472	; 0xc0000000
    ba64:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    ba66:	411a      	asrs	r2, r3
    ba68:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    ba6a:	429a      	cmp	r2, r3
    ba6c:	db06      	blt.n	ba7c <mp_binary_op+0x1fc>
    ba6e:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
    ba72:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    ba74:	411a      	asrs	r2, r3
    ba76:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    ba78:	429a      	cmp	r2, r3
    ba7a:	dd08      	ble.n	ba8e <mp_binary_op+0x20e>
                        // left-shift will overflow, so use higher precision integer
                        lhs = mp_obj_new_int_from_ll(lhs_val);
    ba7c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    ba7e:	ea4f 74e3 	mov.w	r4, r3, asr #31
    ba82:	4618      	mov	r0, r3
    ba84:	4621      	mov	r1, r4
    ba86:	f004 fe79 	bl	1077c <mp_obj_new_int_from_ll>
    ba8a:	60b8      	str	r0, [r7, #8]
                        goto generic_binary_op;
    ba8c:	e105      	b.n	bc9a <mp_binary_op+0x41a>
                    } else {
                        // use standard precision
                        lhs_val <<= rhs_val;
    ba8e:	6cba      	ldr	r2, [r7, #72]	; 0x48
    ba90:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    ba92:	fa02 f303 	lsl.w	r3, r2, r3
    ba96:	64bb      	str	r3, [r7, #72]	; 0x48
                    }
                    break;
    ba98:	e0e4      	b.n	bc64 <mp_binary_op+0x3e4>
                }
                case MP_BINARY_OP_RSHIFT:
                case MP_BINARY_OP_INPLACE_RSHIFT:
                    if (rhs_val < 0) {
    ba9a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    ba9c:	2b00      	cmp	r3, #0
    ba9e:	da02      	bge.n	baa6 <mp_binary_op+0x226>
                        // negative shift not allowed
                        mp_raise_ValueError("negative shift count");
    baa0:	483d      	ldr	r0, [pc, #244]	; (bb98 <mp_binary_op+0x318>)
    baa2:	f001 fa34 	bl	cf0e <mp_raise_ValueError>
                    } else {
                        // standard precision is enough for right-shift
                        if (rhs_val >= (mp_int_t)BITS_PER_WORD) {
    baa6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    baa8:	2b1f      	cmp	r3, #31
    baaa:	dd01      	ble.n	bab0 <mp_binary_op+0x230>
                            // Shifting to big amounts is underfined behavior
                            // in C and is CPU-dependent; propagate sign bit.
                            rhs_val = BITS_PER_WORD - 1;
    baac:	231f      	movs	r3, #31
    baae:	647b      	str	r3, [r7, #68]	; 0x44
                        }
                        lhs_val >>= rhs_val;
    bab0:	6cba      	ldr	r2, [r7, #72]	; 0x48
    bab2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    bab4:	fa42 f303 	asr.w	r3, r2, r3
    bab8:	64bb      	str	r3, [r7, #72]	; 0x48
                    }
                    break;
    baba:	e0d3      	b.n	bc64 <mp_binary_op+0x3e4>
                case MP_BINARY_OP_ADD:
                case MP_BINARY_OP_INPLACE_ADD: lhs_val += rhs_val; break;
    babc:	6cba      	ldr	r2, [r7, #72]	; 0x48
    babe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    bac0:	4413      	add	r3, r2
    bac2:	64bb      	str	r3, [r7, #72]	; 0x48
    bac4:	e0ce      	b.n	bc64 <mp_binary_op+0x3e4>
                case MP_BINARY_OP_SUBTRACT:
                case MP_BINARY_OP_INPLACE_SUBTRACT: lhs_val -= rhs_val; break;
    bac6:	6cba      	ldr	r2, [r7, #72]	; 0x48
    bac8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    baca:	1ad3      	subs	r3, r2, r3
    bacc:	64bb      	str	r3, [r7, #72]	; 0x48
    bace:	e0c9      	b.n	bc64 <mp_binary_op+0x3e4>
                        // use standard precision
                        lhs_val = (mp_int_t)res;
                    }
                    #endif

                    if (mp_small_int_mul_overflow(lhs_val, rhs_val)) {
    bad0:	6c79      	ldr	r1, [r7, #68]	; 0x44
    bad2:	6cb8      	ldr	r0, [r7, #72]	; 0x48
    bad4:	f00f f996 	bl	1ae04 <mp_small_int_mul_overflow>
    bad8:	4603      	mov	r3, r0
    bada:	2b00      	cmp	r3, #0
    badc:	d008      	beq.n	baf0 <mp_binary_op+0x270>
                        // use higher precision
                        lhs = mp_obj_new_int_from_ll(lhs_val);
    bade:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    bae0:	ea4f 74e3 	mov.w	r4, r3, asr #31
    bae4:	4618      	mov	r0, r3
    bae6:	4621      	mov	r1, r4
    bae8:	f004 fe48 	bl	1077c <mp_obj_new_int_from_ll>
    baec:	60b8      	str	r0, [r7, #8]
                        goto generic_binary_op;
    baee:	e0d4      	b.n	bc9a <mp_binary_op+0x41a>
                    } else {
                        // use standard precision
                        return MP_OBJ_NEW_SMALL_INT(lhs_val * rhs_val);
    baf0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    baf2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    baf4:	fb02 f303 	mul.w	r3, r2, r3
    baf8:	005b      	lsls	r3, r3, #1
    bafa:	f043 0301 	orr.w	r3, r3, #1
    bafe:	e10e      	b.n	bd1e <mp_binary_op+0x49e>
                    }
                }
                case MP_BINARY_OP_FLOOR_DIVIDE:
                case MP_BINARY_OP_INPLACE_FLOOR_DIVIDE:
                    if (rhs_val == 0) {
    bb00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    bb02:	2b00      	cmp	r3, #0
    bb04:	f000 8102 	beq.w	bd0c <mp_binary_op+0x48c>
                        goto zero_division;
                    }
                    lhs_val = mp_small_int_floor_divide(lhs_val, rhs_val);
    bb08:	6c79      	ldr	r1, [r7, #68]	; 0x44
    bb0a:	6cb8      	ldr	r0, [r7, #72]	; 0x48
    bb0c:	f00f f9df 	bl	1aece <mp_small_int_floor_divide>
    bb10:	64b8      	str	r0, [r7, #72]	; 0x48
                    break;
    bb12:	e0a7      	b.n	bc64 <mp_binary_op+0x3e4>
                    return mp_obj_new_float((mp_float_t)lhs_val / (mp_float_t)rhs_val);
                #endif

                case MP_BINARY_OP_MODULO:
                case MP_BINARY_OP_INPLACE_MODULO: {
                    if (rhs_val == 0) {
    bb14:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    bb16:	2b00      	cmp	r3, #0
    bb18:	f000 80fa 	beq.w	bd10 <mp_binary_op+0x490>
                        goto zero_division;
                    }
                    lhs_val = mp_small_int_modulo(lhs_val, rhs_val);
    bb1c:	6c79      	ldr	r1, [r7, #68]	; 0x44
    bb1e:	6cb8      	ldr	r0, [r7, #72]	; 0x48
    bb20:	f00f f9b0 	bl	1ae84 <mp_small_int_modulo>
    bb24:	64b8      	str	r0, [r7, #72]	; 0x48
                    break;
    bb26:	e09d      	b.n	bc64 <mp_binary_op+0x3e4>
                }

                case MP_BINARY_OP_POWER:
                case MP_BINARY_OP_INPLACE_POWER:
                    if (rhs_val < 0) {
    bb28:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    bb2a:	2b00      	cmp	r3, #0
    bb2c:	da02      	bge.n	bb34 <mp_binary_op+0x2b4>
                        #if MICROPY_PY_BUILTINS_FLOAT
                        lhs = mp_obj_new_float(lhs_val);
                        goto generic_binary_op;
                        #else
                        mp_raise_ValueError("negative power with no float support");
    bb2e:	481b      	ldr	r0, [pc, #108]	; (bb9c <mp_binary_op+0x31c>)
    bb30:	f001 f9ed 	bl	cf0e <mp_raise_ValueError>
                        #endif
                    } else {
                        mp_int_t ans = 1;
    bb34:	2301      	movs	r3, #1
    bb36:	643b      	str	r3, [r7, #64]	; 0x40
                        while (rhs_val > 0) {
    bb38:	e024      	b.n	bb84 <mp_binary_op+0x304>
                            if (rhs_val & 1) {
    bb3a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    bb3c:	f003 0301 	and.w	r3, r3, #1
    bb40:	2b00      	cmp	r3, #0
    bb42:	d00b      	beq.n	bb5c <mp_binary_op+0x2dc>
                                if (mp_small_int_mul_overflow(ans, lhs_val)) {
    bb44:	6cb9      	ldr	r1, [r7, #72]	; 0x48
    bb46:	6c38      	ldr	r0, [r7, #64]	; 0x40
    bb48:	f00f f95c 	bl	1ae04 <mp_small_int_mul_overflow>
    bb4c:	4603      	mov	r3, r0
    bb4e:	2b00      	cmp	r3, #0
    bb50:	d12a      	bne.n	bba8 <mp_binary_op+0x328>
                                    goto power_overflow;
                                }
                                ans *= lhs_val;
    bb52:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    bb54:	6cba      	ldr	r2, [r7, #72]	; 0x48
    bb56:	fb02 f303 	mul.w	r3, r2, r3
    bb5a:	643b      	str	r3, [r7, #64]	; 0x40
                            }
                            if (rhs_val == 1) {
    bb5c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    bb5e:	2b01      	cmp	r3, #1
    bb60:	d01e      	beq.n	bba0 <mp_binary_op+0x320>
                                break;
                            }
                            rhs_val /= 2;
    bb62:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    bb64:	0fda      	lsrs	r2, r3, #31
    bb66:	4413      	add	r3, r2
    bb68:	105b      	asrs	r3, r3, #1
    bb6a:	647b      	str	r3, [r7, #68]	; 0x44
                            if (mp_small_int_mul_overflow(lhs_val, lhs_val)) {
    bb6c:	6cb9      	ldr	r1, [r7, #72]	; 0x48
    bb6e:	6cb8      	ldr	r0, [r7, #72]	; 0x48
    bb70:	f00f f948 	bl	1ae04 <mp_small_int_mul_overflow>
    bb74:	4603      	mov	r3, r0
    bb76:	2b00      	cmp	r3, #0
    bb78:	d118      	bne.n	bbac <mp_binary_op+0x32c>
                                goto power_overflow;
                            }
                            lhs_val *= lhs_val;
    bb7a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    bb7c:	6cba      	ldr	r2, [r7, #72]	; 0x48
    bb7e:	fb02 f303 	mul.w	r3, r2, r3
    bb82:	64bb      	str	r3, [r7, #72]	; 0x48
                        while (rhs_val > 0) {
    bb84:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    bb86:	2b00      	cmp	r3, #0
    bb88:	dcd7      	bgt.n	bb3a <mp_binary_op+0x2ba>
    bb8a:	e00a      	b.n	bba2 <mp_binary_op+0x322>
    bb8c:	0001f9c4 	.word	0x0001f9c4
    bb90:	0001f9bc 	.word	0x0001f9bc
    bb94:	00021be8 	.word	0x00021be8
    bb98:	0001f428 	.word	0x0001f428
    bb9c:	0001f440 	.word	0x0001f440
                                break;
    bba0:	bf00      	nop
                        }
                        lhs_val = ans;
    bba2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    bba4:	64bb      	str	r3, [r7, #72]	; 0x48
                    }
                    break;
    bba6:	e05d      	b.n	bc64 <mp_binary_op+0x3e4>
                                    goto power_overflow;
    bba8:	bf00      	nop
    bbaa:	e000      	b.n	bbae <mp_binary_op+0x32e>
                                goto power_overflow;
    bbac:	bf00      	nop

                power_overflow:
                    // use higher precision
                    lhs = mp_obj_new_int_from_ll(MP_OBJ_SMALL_INT_VALUE(lhs));
    bbae:	68bb      	ldr	r3, [r7, #8]
    bbb0:	105b      	asrs	r3, r3, #1
    bbb2:	ea4f 74e3 	mov.w	r4, r3, asr #31
    bbb6:	4618      	mov	r0, r3
    bbb8:	4621      	mov	r1, r4
    bbba:	f004 fddf 	bl	1077c <mp_obj_new_int_from_ll>
    bbbe:	60b8      	str	r0, [r7, #8]
                    goto generic_binary_op;
    bbc0:	e06b      	b.n	bc9a <mp_binary_op+0x41a>

                case MP_BINARY_OP_DIVMOD: {
                    if (rhs_val == 0) {
    bbc2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    bbc4:	2b00      	cmp	r3, #0
    bbc6:	f000 80a5 	beq.w	bd14 <mp_binary_op+0x494>
                        goto zero_division;
                    }
                    // to reduce stack usage we don't pass a temp array of the 2 items
                    mp_obj_tuple_t *tuple = MP_OBJ_TO_PTR(mp_obj_new_tuple(2, NULL));
    bbca:	2100      	movs	r1, #0
    bbcc:	2002      	movs	r0, #2
    bbce:	f009 ffe7 	bl	15ba0 <mp_obj_new_tuple>
    bbd2:	63b8      	str	r0, [r7, #56]	; 0x38
                    tuple->items[0] = MP_OBJ_NEW_SMALL_INT(mp_small_int_floor_divide(lhs_val, rhs_val));
    bbd4:	6c79      	ldr	r1, [r7, #68]	; 0x44
    bbd6:	6cb8      	ldr	r0, [r7, #72]	; 0x48
    bbd8:	f00f f979 	bl	1aece <mp_small_int_floor_divide>
    bbdc:	4603      	mov	r3, r0
    bbde:	005b      	lsls	r3, r3, #1
    bbe0:	f043 0301 	orr.w	r3, r3, #1
    bbe4:	461a      	mov	r2, r3
    bbe6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    bbe8:	609a      	str	r2, [r3, #8]
                    tuple->items[1] = MP_OBJ_NEW_SMALL_INT(mp_small_int_modulo(lhs_val, rhs_val));
    bbea:	6c79      	ldr	r1, [r7, #68]	; 0x44
    bbec:	6cb8      	ldr	r0, [r7, #72]	; 0x48
    bbee:	f00f f949 	bl	1ae84 <mp_small_int_modulo>
    bbf2:	4603      	mov	r3, r0
    bbf4:	005b      	lsls	r3, r3, #1
    bbf6:	f043 0301 	orr.w	r3, r3, #1
    bbfa:	461a      	mov	r2, r3
    bbfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    bbfe:	60da      	str	r2, [r3, #12]
                    return MP_OBJ_FROM_PTR(tuple);
    bc00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    bc02:	e08c      	b.n	bd1e <mp_binary_op+0x49e>
                }

                case MP_BINARY_OP_LESS: return mp_obj_new_bool(lhs_val < rhs_val);
    bc04:	6cba      	ldr	r2, [r7, #72]	; 0x48
    bc06:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    bc08:	429a      	cmp	r2, r3
    bc0a:	bfb4      	ite	lt
    bc0c:	2301      	movlt	r3, #1
    bc0e:	2300      	movge	r3, #0
    bc10:	b2db      	uxtb	r3, r3
    bc12:	4618      	mov	r0, r3
    bc14:	f7ff fbf5 	bl	b402 <mp_obj_new_bool>
    bc18:	4603      	mov	r3, r0
    bc1a:	e080      	b.n	bd1e <mp_binary_op+0x49e>
                case MP_BINARY_OP_MORE: return mp_obj_new_bool(lhs_val > rhs_val);
    bc1c:	6cba      	ldr	r2, [r7, #72]	; 0x48
    bc1e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    bc20:	429a      	cmp	r2, r3
    bc22:	bfcc      	ite	gt
    bc24:	2301      	movgt	r3, #1
    bc26:	2300      	movle	r3, #0
    bc28:	b2db      	uxtb	r3, r3
    bc2a:	4618      	mov	r0, r3
    bc2c:	f7ff fbe9 	bl	b402 <mp_obj_new_bool>
    bc30:	4603      	mov	r3, r0
    bc32:	e074      	b.n	bd1e <mp_binary_op+0x49e>
                case MP_BINARY_OP_LESS_EQUAL: return mp_obj_new_bool(lhs_val <= rhs_val);
    bc34:	6cba      	ldr	r2, [r7, #72]	; 0x48
    bc36:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    bc38:	429a      	cmp	r2, r3
    bc3a:	bfd4      	ite	le
    bc3c:	2301      	movle	r3, #1
    bc3e:	2300      	movgt	r3, #0
    bc40:	b2db      	uxtb	r3, r3
    bc42:	4618      	mov	r0, r3
    bc44:	f7ff fbdd 	bl	b402 <mp_obj_new_bool>
    bc48:	4603      	mov	r3, r0
    bc4a:	e068      	b.n	bd1e <mp_binary_op+0x49e>
                case MP_BINARY_OP_MORE_EQUAL: return mp_obj_new_bool(lhs_val >= rhs_val);
    bc4c:	6cba      	ldr	r2, [r7, #72]	; 0x48
    bc4e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    bc50:	429a      	cmp	r2, r3
    bc52:	bfac      	ite	ge
    bc54:	2301      	movge	r3, #1
    bc56:	2300      	movlt	r3, #0
    bc58:	b2db      	uxtb	r3, r3
    bc5a:	4618      	mov	r0, r3
    bc5c:	f7ff fbd1 	bl	b402 <mp_obj_new_bool>
    bc60:	4603      	mov	r3, r0
    bc62:	e05c      	b.n	bd1e <mp_binary_op+0x49e>

                default:
                    goto unsupported_op;
            }
            // TODO: We just should make mp_obj_new_int() inline and use that
            if (MP_SMALL_INT_FITS(lhs_val)) {
    bc64:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    bc66:	005a      	lsls	r2, r3, #1
    bc68:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    bc6a:	4053      	eors	r3, r2
    bc6c:	2b00      	cmp	r3, #0
    bc6e:	db04      	blt.n	bc7a <mp_binary_op+0x3fa>
                return MP_OBJ_NEW_SMALL_INT(lhs_val);
    bc70:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    bc72:	005b      	lsls	r3, r3, #1
    bc74:	f043 0301 	orr.w	r3, r3, #1
    bc78:	e051      	b.n	bd1e <mp_binary_op+0x49e>
            } else {
                return mp_obj_new_int(lhs_val);
    bc7a:	6cb8      	ldr	r0, [r7, #72]	; 0x48
    bc7c:	f004 fdb4 	bl	107e8 <mp_obj_new_int>
    bc80:	4603      	mov	r3, r0
    bc82:	e04c      	b.n	bd1e <mp_binary_op+0x49e>
#endif
        }
    }

    // Convert MP_BINARY_OP_IN to MP_BINARY_OP_CONTAINS with swapped args.
    if (op == MP_BINARY_OP_IN) {
    bc84:	68fb      	ldr	r3, [r7, #12]
    bc86:	2b06      	cmp	r3, #6
    bc88:	d107      	bne.n	bc9a <mp_binary_op+0x41a>
        op = MP_BINARY_OP_CONTAINS;
    bc8a:	2322      	movs	r3, #34	; 0x22
    bc8c:	60fb      	str	r3, [r7, #12]
        mp_obj_t temp = lhs;
    bc8e:	68bb      	ldr	r3, [r7, #8]
    bc90:	637b      	str	r3, [r7, #52]	; 0x34
        lhs = rhs;
    bc92:	687b      	ldr	r3, [r7, #4]
    bc94:	60bb      	str	r3, [r7, #8]
        rhs = temp;
    bc96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    bc98:	607b      	str	r3, [r7, #4]
    }

    // generic binary_op supplied by type
    mp_obj_type_t *type;
generic_binary_op:
    type = mp_obj_get_type(lhs);
    bc9a:	68b8      	ldr	r0, [r7, #8]
    bc9c:	f001 fd58 	bl	d750 <mp_obj_get_type>
    bca0:	6338      	str	r0, [r7, #48]	; 0x30
    if (type->binary_op != NULL) {
    bca2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    bca4:	699b      	ldr	r3, [r3, #24]
    bca6:	2b00      	cmp	r3, #0
    bca8:	d00b      	beq.n	bcc2 <mp_binary_op+0x442>
        mp_obj_t result = type->binary_op(op, lhs, rhs);
    bcaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    bcac:	699b      	ldr	r3, [r3, #24]
    bcae:	687a      	ldr	r2, [r7, #4]
    bcb0:	68b9      	ldr	r1, [r7, #8]
    bcb2:	68f8      	ldr	r0, [r7, #12]
    bcb4:	4798      	blx	r3
    bcb6:	62f8      	str	r0, [r7, #44]	; 0x2c
        if (result != MP_OBJ_NULL) {
    bcb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    bcba:	2b00      	cmp	r3, #0
    bcbc:	d001      	beq.n	bcc2 <mp_binary_op+0x442>
            return result;
    bcbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    bcc0:	e02d      	b.n	bd1e <mp_binary_op+0x49e>
        // Convert __rop__ back to __op__ for error message
        op -= MP_BINARY_OP_REVERSE_OR - MP_BINARY_OP_OR;
    }
#endif

    if (op == MP_BINARY_OP_CONTAINS) {
    bcc2:	68fb      	ldr	r3, [r7, #12]
    bcc4:	2b22      	cmp	r3, #34	; 0x22
    bcc6:	d11e      	bne.n	bd06 <mp_binary_op+0x486>
        // If type didn't support containment then explicitly walk the iterator.
        // mp_getiter will raise the appropriate exception if lhs is not iterable.
        mp_obj_iter_buf_t iter_buf;
        mp_obj_t iter = mp_getiter(lhs, &iter_buf);
    bcc8:	f107 0314 	add.w	r3, r7, #20
    bccc:	4619      	mov	r1, r3
    bcce:	68b8      	ldr	r0, [r7, #8]
    bcd0:	f000 fdda 	bl	c888 <mp_getiter>
    bcd4:	62b8      	str	r0, [r7, #40]	; 0x28
        mp_obj_t next;
        while ((next = mp_iternext(iter)) != MP_OBJ_STOP_ITERATION) {
    bcd6:	e008      	b.n	bcea <mp_binary_op+0x46a>
            if (mp_obj_equal(next, rhs)) {
    bcd8:	6879      	ldr	r1, [r7, #4]
    bcda:	6a78      	ldr	r0, [r7, #36]	; 0x24
    bcdc:	f001 fe8a 	bl	d9f4 <mp_obj_equal>
    bce0:	4603      	mov	r3, r0
    bce2:	2b00      	cmp	r3, #0
    bce4:	d001      	beq.n	bcea <mp_binary_op+0x46a>
                return mp_const_true;
    bce6:	4b10      	ldr	r3, [pc, #64]	; (bd28 <mp_binary_op+0x4a8>)
    bce8:	e019      	b.n	bd1e <mp_binary_op+0x49e>
        while ((next = mp_iternext(iter)) != MP_OBJ_STOP_ITERATION) {
    bcea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    bcec:	f000 fe4e 	bl	c98c <mp_iternext>
    bcf0:	6278      	str	r0, [r7, #36]	; 0x24
    bcf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    bcf4:	2b04      	cmp	r3, #4
    bcf6:	d1ef      	bne.n	bcd8 <mp_binary_op+0x458>
            }
        }
        return mp_const_false;
    bcf8:	4b0c      	ldr	r3, [pc, #48]	; (bd2c <mp_binary_op+0x4ac>)
    bcfa:	e010      	b.n	bd1e <mp_binary_op+0x49e>
        goto unsupported_op;
    bcfc:	bf00      	nop
    bcfe:	e002      	b.n	bd06 <mp_binary_op+0x486>
                    goto unsupported_op;
    bd00:	bf00      	nop
    bd02:	e000      	b.n	bd06 <mp_binary_op+0x486>
                    goto unsupported_op;
    bd04:	bf00      	nop
    }

unsupported_op:
    if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
        mp_raise_TypeError("unsupported type for operator");
    bd06:	480a      	ldr	r0, [pc, #40]	; (bd30 <mp_binary_op+0x4b0>)
    bd08:	f001 f90c 	bl	cf24 <mp_raise_TypeError>
                        goto zero_division;
    bd0c:	bf00      	nop
    bd0e:	e002      	b.n	bd16 <mp_binary_op+0x496>
                        goto zero_division;
    bd10:	bf00      	nop
    bd12:	e000      	b.n	bd16 <mp_binary_op+0x496>
                        goto zero_division;
    bd14:	bf00      	nop
            "unsupported types for %q: '%s', '%s'",
            mp_binary_op_method_name[op], mp_obj_get_type_str(lhs), mp_obj_get_type_str(rhs)));
    }

zero_division:
    mp_raise_msg(&mp_type_ZeroDivisionError, "division by zero");
    bd16:	4907      	ldr	r1, [pc, #28]	; (bd34 <mp_binary_op+0x4b4>)
    bd18:	4807      	ldr	r0, [pc, #28]	; (bd38 <mp_binary_op+0x4b8>)
    bd1a:	f001 f8e1 	bl	cee0 <mp_raise_msg>
}
    bd1e:	4618      	mov	r0, r3
    bd20:	3754      	adds	r7, #84	; 0x54
    bd22:	46bd      	mov	sp, r7
    bd24:	bd90      	pop	{r4, r7, pc}
    bd26:	bf00      	nop
    bd28:	0001f9c4 	.word	0x0001f9c4
    bd2c:	0001f9bc 	.word	0x0001f9bc
    bd30:	0001f408 	.word	0x0001f408
    bd34:	0001f468 	.word	0x0001f468
    bd38:	00020160 	.word	0x00020160

0000bd3c <mp_call_function_0>:

mp_obj_t mp_call_function_0(mp_obj_t fun) {
    bd3c:	b580      	push	{r7, lr}
    bd3e:	b082      	sub	sp, #8
    bd40:	af00      	add	r7, sp, #0
    bd42:	6078      	str	r0, [r7, #4]
    return mp_call_function_n_kw(fun, 0, 0, NULL);
    bd44:	2300      	movs	r3, #0
    bd46:	2200      	movs	r2, #0
    bd48:	2100      	movs	r1, #0
    bd4a:	6878      	ldr	r0, [r7, #4]
    bd4c:	f000 f82b 	bl	bda6 <mp_call_function_n_kw>
    bd50:	4603      	mov	r3, r0
}
    bd52:	4618      	mov	r0, r3
    bd54:	3708      	adds	r7, #8
    bd56:	46bd      	mov	sp, r7
    bd58:	bd80      	pop	{r7, pc}

0000bd5a <mp_call_function_1>:

mp_obj_t mp_call_function_1(mp_obj_t fun, mp_obj_t arg) {
    bd5a:	b580      	push	{r7, lr}
    bd5c:	b082      	sub	sp, #8
    bd5e:	af00      	add	r7, sp, #0
    bd60:	6078      	str	r0, [r7, #4]
    bd62:	6039      	str	r1, [r7, #0]
    return mp_call_function_n_kw(fun, 1, 0, &arg);
    bd64:	463b      	mov	r3, r7
    bd66:	2200      	movs	r2, #0
    bd68:	2101      	movs	r1, #1
    bd6a:	6878      	ldr	r0, [r7, #4]
    bd6c:	f000 f81b 	bl	bda6 <mp_call_function_n_kw>
    bd70:	4603      	mov	r3, r0
}
    bd72:	4618      	mov	r0, r3
    bd74:	3708      	adds	r7, #8
    bd76:	46bd      	mov	sp, r7
    bd78:	bd80      	pop	{r7, pc}

0000bd7a <mp_call_function_2>:

mp_obj_t mp_call_function_2(mp_obj_t fun, mp_obj_t arg1, mp_obj_t arg2) {
    bd7a:	b580      	push	{r7, lr}
    bd7c:	b086      	sub	sp, #24
    bd7e:	af00      	add	r7, sp, #0
    bd80:	60f8      	str	r0, [r7, #12]
    bd82:	60b9      	str	r1, [r7, #8]
    bd84:	607a      	str	r2, [r7, #4]
    mp_obj_t args[2];
    args[0] = arg1;
    bd86:	68bb      	ldr	r3, [r7, #8]
    bd88:	613b      	str	r3, [r7, #16]
    args[1] = arg2;
    bd8a:	687b      	ldr	r3, [r7, #4]
    bd8c:	617b      	str	r3, [r7, #20]
    return mp_call_function_n_kw(fun, 2, 0, args);
    bd8e:	f107 0310 	add.w	r3, r7, #16
    bd92:	2200      	movs	r2, #0
    bd94:	2102      	movs	r1, #2
    bd96:	68f8      	ldr	r0, [r7, #12]
    bd98:	f000 f805 	bl	bda6 <mp_call_function_n_kw>
    bd9c:	4603      	mov	r3, r0
}
    bd9e:	4618      	mov	r0, r3
    bda0:	3718      	adds	r7, #24
    bda2:	46bd      	mov	sp, r7
    bda4:	bd80      	pop	{r7, pc}

0000bda6 <mp_call_function_n_kw>:

// args contains, eg: arg0  arg1  key0  value0  key1  value1
mp_obj_t mp_call_function_n_kw(mp_obj_t fun_in, size_t n_args, size_t n_kw, const mp_obj_t *args) {
    bda6:	b590      	push	{r4, r7, lr}
    bda8:	b087      	sub	sp, #28
    bdaa:	af00      	add	r7, sp, #0
    bdac:	60f8      	str	r0, [r7, #12]
    bdae:	60b9      	str	r1, [r7, #8]
    bdb0:	607a      	str	r2, [r7, #4]
    bdb2:	603b      	str	r3, [r7, #0]
    // passing to the function arrays of fixed and keyword arguments

    DEBUG_OP_printf("calling function %p(n_args=" UINT_FMT ", n_kw=" UINT_FMT ", args=%p)\n", fun_in, n_args, n_kw, args);

    // get the type
    mp_obj_type_t *type = mp_obj_get_type(fun_in);
    bdb4:	68f8      	ldr	r0, [r7, #12]
    bdb6:	f001 fccb 	bl	d750 <mp_obj_get_type>
    bdba:	6178      	str	r0, [r7, #20]

    // do the call
    if (type->call != NULL) {
    bdbc:	697b      	ldr	r3, [r7, #20]
    bdbe:	691b      	ldr	r3, [r3, #16]
    bdc0:	2b00      	cmp	r3, #0
    bdc2:	d008      	beq.n	bdd6 <mp_call_function_n_kw+0x30>
        return type->call(fun_in, n_args, n_kw, args);
    bdc4:	697b      	ldr	r3, [r7, #20]
    bdc6:	691c      	ldr	r4, [r3, #16]
    bdc8:	683b      	ldr	r3, [r7, #0]
    bdca:	687a      	ldr	r2, [r7, #4]
    bdcc:	68b9      	ldr	r1, [r7, #8]
    bdce:	68f8      	ldr	r0, [r7, #12]
    bdd0:	47a0      	blx	r4
    bdd2:	4603      	mov	r3, r0
    bdd4:	e002      	b.n	bddc <mp_call_function_n_kw+0x36>
    }

    if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
        mp_raise_TypeError("object not callable");
    bdd6:	4803      	ldr	r0, [pc, #12]	; (bde4 <mp_call_function_n_kw+0x3e>)
    bdd8:	f001 f8a4 	bl	cf24 <mp_raise_TypeError>
    } else {
        nlr_raise(mp_obj_new_exception_msg_varg(&mp_type_TypeError,
            "'%s' object is not callable", mp_obj_get_type_str(fun_in)));
    }
}
    bddc:	4618      	mov	r0, r3
    bdde:	371c      	adds	r7, #28
    bde0:	46bd      	mov	sp, r7
    bde2:	bd90      	pop	{r4, r7, pc}
    bde4:	0001f47c 	.word	0x0001f47c

0000bde8 <mp_call_method_n_kw>:

// args contains: fun  self/NULL  arg(0)  ...  arg(n_args-2)  arg(n_args-1)  kw_key(0)  kw_val(0)  ... kw_key(n_kw-1)  kw_val(n_kw-1)
// if n_args==0 and n_kw==0 then there are only fun and self/NULL
mp_obj_t mp_call_method_n_kw(size_t n_args, size_t n_kw, const mp_obj_t *args) {
    bde8:	b580      	push	{r7, lr}
    bdea:	b086      	sub	sp, #24
    bdec:	af00      	add	r7, sp, #0
    bdee:	60f8      	str	r0, [r7, #12]
    bdf0:	60b9      	str	r1, [r7, #8]
    bdf2:	607a      	str	r2, [r7, #4]
    DEBUG_OP_printf("call method (fun=%p, self=%p, n_args=" UINT_FMT ", n_kw=" UINT_FMT ", args=%p)\n", args[0], args[1], n_args, n_kw, args);
    int adjust = (args[1] == MP_OBJ_NULL) ? 0 : 1;
    bdf4:	687b      	ldr	r3, [r7, #4]
    bdf6:	3304      	adds	r3, #4
    bdf8:	681b      	ldr	r3, [r3, #0]
    bdfa:	2b00      	cmp	r3, #0
    bdfc:	bf14      	ite	ne
    bdfe:	2301      	movne	r3, #1
    be00:	2300      	moveq	r3, #0
    be02:	b2db      	uxtb	r3, r3
    be04:	617b      	str	r3, [r7, #20]
    return mp_call_function_n_kw(args[0], n_args + adjust, n_kw, args + 2 - adjust);
    be06:	687b      	ldr	r3, [r7, #4]
    be08:	6818      	ldr	r0, [r3, #0]
    be0a:	697a      	ldr	r2, [r7, #20]
    be0c:	68fb      	ldr	r3, [r7, #12]
    be0e:	18d1      	adds	r1, r2, r3
    be10:	697a      	ldr	r2, [r7, #20]
    be12:	4613      	mov	r3, r2
    be14:	079b      	lsls	r3, r3, #30
    be16:	1a9b      	subs	r3, r3, r2
    be18:	009b      	lsls	r3, r3, #2
    be1a:	3308      	adds	r3, #8
    be1c:	687a      	ldr	r2, [r7, #4]
    be1e:	4413      	add	r3, r2
    be20:	68ba      	ldr	r2, [r7, #8]
    be22:	f7ff ffc0 	bl	bda6 <mp_call_function_n_kw>
    be26:	4603      	mov	r3, r0
}
    be28:	4618      	mov	r0, r3
    be2a:	3718      	adds	r7, #24
    be2c:	46bd      	mov	sp, r7
    be2e:	bd80      	pop	{r7, pc}

0000be30 <mp_call_prepare_args_n_kw_var>:

// This function only needs to be exposed externally when in stackless mode.
#if !MICROPY_STACKLESS
STATIC
#endif
void mp_call_prepare_args_n_kw_var(bool have_self, size_t n_args_n_kw, const mp_obj_t *args, mp_call_args_t *out_args) {
    be30:	b580      	push	{r7, lr}
    be32:	b0a2      	sub	sp, #136	; 0x88
    be34:	af00      	add	r7, sp, #0
    be36:	60b9      	str	r1, [r7, #8]
    be38:	607a      	str	r2, [r7, #4]
    be3a:	603b      	str	r3, [r7, #0]
    be3c:	4603      	mov	r3, r0
    be3e:	73fb      	strb	r3, [r7, #15]
    mp_obj_t fun = *args++;
    be40:	687b      	ldr	r3, [r7, #4]
    be42:	1d1a      	adds	r2, r3, #4
    be44:	607a      	str	r2, [r7, #4]
    be46:	681b      	ldr	r3, [r3, #0]
    be48:	663b      	str	r3, [r7, #96]	; 0x60
    mp_obj_t self = MP_OBJ_NULL;
    be4a:	2300      	movs	r3, #0
    be4c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (have_self) {
    be50:	7bfb      	ldrb	r3, [r7, #15]
    be52:	2b00      	cmp	r3, #0
    be54:	d005      	beq.n	be62 <mp_call_prepare_args_n_kw_var+0x32>
        self = *args++; // may be MP_OBJ_NULL
    be56:	687b      	ldr	r3, [r7, #4]
    be58:	1d1a      	adds	r2, r3, #4
    be5a:	607a      	str	r2, [r7, #4]
    be5c:	681b      	ldr	r3, [r3, #0]
    be5e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    }
    uint n_args = n_args_n_kw & 0xff;
    be62:	68bb      	ldr	r3, [r7, #8]
    be64:	b2db      	uxtb	r3, r3
    be66:	65fb      	str	r3, [r7, #92]	; 0x5c
    uint n_kw = (n_args_n_kw >> 8) & 0xff;
    be68:	68bb      	ldr	r3, [r7, #8]
    be6a:	0a1b      	lsrs	r3, r3, #8
    be6c:	b2db      	uxtb	r3, r3
    be6e:	65bb      	str	r3, [r7, #88]	; 0x58
    mp_obj_t pos_seq = args[n_args + 2 * n_kw]; // may be MP_OBJ_NULL
    be70:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    be72:	005a      	lsls	r2, r3, #1
    be74:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    be76:	4413      	add	r3, r2
    be78:	009b      	lsls	r3, r3, #2
    be7a:	687a      	ldr	r2, [r7, #4]
    be7c:	4413      	add	r3, r2
    be7e:	681b      	ldr	r3, [r3, #0]
    be80:	657b      	str	r3, [r7, #84]	; 0x54
    mp_obj_t kw_dict = args[n_args + 2 * n_kw + 1]; // may be MP_OBJ_NULL
    be82:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    be84:	005a      	lsls	r2, r3, #1
    be86:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    be88:	4413      	add	r3, r2
    be8a:	3301      	adds	r3, #1
    be8c:	009b      	lsls	r3, r3, #2
    be8e:	687a      	ldr	r2, [r7, #4]
    be90:	4413      	add	r3, r2
    be92:	681b      	ldr	r3, [r3, #0]
    be94:	653b      	str	r3, [r7, #80]	; 0x50
    // TODO: optimize one day to avoid constructing new arg array? Will be hard.

    // The new args array
    mp_obj_t *args2;
    uint args2_alloc;
    uint args2_len = 0;
    be96:	2300      	movs	r3, #0
    be98:	67bb      	str	r3, [r7, #120]	; 0x78

    // Try to get a hint for the size of the kw_dict
    uint kw_dict_len = 0;
    be9a:	2300      	movs	r3, #0
    be9c:	677b      	str	r3, [r7, #116]	; 0x74
    if (kw_dict != MP_OBJ_NULL && MP_OBJ_IS_TYPE(kw_dict, &mp_type_dict)) {
    be9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    bea0:	2b00      	cmp	r3, #0
    bea2:	d00e      	beq.n	bec2 <mp_call_prepare_args_n_kw_var+0x92>
    bea4:	6d38      	ldr	r0, [r7, #80]	; 0x50
    bea6:	f7ff fa79 	bl	b39c <MP_OBJ_IS_OBJ>
    beaa:	4603      	mov	r3, r0
    beac:	2b00      	cmp	r3, #0
    beae:	d008      	beq.n	bec2 <mp_call_prepare_args_n_kw_var+0x92>
    beb0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    beb2:	681b      	ldr	r3, [r3, #0]
    beb4:	4ab0      	ldr	r2, [pc, #704]	; (c178 <mp_call_prepare_args_n_kw_var+0x348>)
    beb6:	4293      	cmp	r3, r2
    beb8:	d103      	bne.n	bec2 <mp_call_prepare_args_n_kw_var+0x92>
        kw_dict_len = mp_obj_dict_len(kw_dict);
    beba:	6d38      	ldr	r0, [r7, #80]	; 0x50
    bebc:	f003 f8bd 	bl	f03a <mp_obj_dict_len>
    bec0:	6778      	str	r0, [r7, #116]	; 0x74
    }

    // Extract the pos_seq sequence to the new args array.
    // Note that it can be arbitrary iterator.
    if (pos_seq == MP_OBJ_NULL) {
    bec2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    bec4:	2b00      	cmp	r3, #0
    bec6:	d12c      	bne.n	bf22 <mp_call_prepare_args_n_kw_var+0xf2>
        // no sequence

        // allocate memory for the new array of args
        args2_alloc = 1 + n_args + 2 * (n_kw + kw_dict_len);
    bec8:	6dba      	ldr	r2, [r7, #88]	; 0x58
    beca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    becc:	4413      	add	r3, r2
    bece:	005a      	lsls	r2, r3, #1
    bed0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    bed2:	4413      	add	r3, r2
    bed4:	3301      	adds	r3, #1
    bed6:	67fb      	str	r3, [r7, #124]	; 0x7c
        args2 = mp_nonlocal_alloc(args2_alloc * sizeof(mp_obj_t));
    bed8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    beda:	009b      	lsls	r3, r3, #2
    bedc:	4618      	mov	r0, r3
    bede:	f7ff faaf 	bl	b440 <mp_nonlocal_alloc>
    bee2:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80

        // copy the self
        if (self != MP_OBJ_NULL) {
    bee6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
    beea:	2b00      	cmp	r3, #0
    beec:	d009      	beq.n	bf02 <mp_call_prepare_args_n_kw_var+0xd2>
            args2[args2_len++] = self;
    beee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    bef0:	1c5a      	adds	r2, r3, #1
    bef2:	67ba      	str	r2, [r7, #120]	; 0x78
    bef4:	009b      	lsls	r3, r3, #2
    bef6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
    befa:	4413      	add	r3, r2
    befc:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
    bf00:	601a      	str	r2, [r3, #0]
        }

        // copy the fixed pos args
        mp_seq_copy(args2 + args2_len, args, n_args, mp_obj_t);
    bf02:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    bf04:	009b      	lsls	r3, r3, #2
    bf06:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
    bf0a:	18d0      	adds	r0, r2, r3
    bf0c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    bf0e:	009b      	lsls	r3, r3, #2
    bf10:	461a      	mov	r2, r3
    bf12:	6879      	ldr	r1, [r7, #4]
    bf14:	f00f fd56 	bl	1b9c4 <memcpy>
        args2_len += n_args;
    bf18:	6fba      	ldr	r2, [r7, #120]	; 0x78
    bf1a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    bf1c:	4413      	add	r3, r2
    bf1e:	67bb      	str	r3, [r7, #120]	; 0x78
    bf20:	e0b1      	b.n	c086 <mp_call_prepare_args_n_kw_var+0x256>

    } else if (MP_OBJ_IS_TYPE(pos_seq, &mp_type_tuple) || MP_OBJ_IS_TYPE(pos_seq, &mp_type_list)) {
    bf22:	6d78      	ldr	r0, [r7, #84]	; 0x54
    bf24:	f7ff fa3a 	bl	b39c <MP_OBJ_IS_OBJ>
    bf28:	4603      	mov	r3, r0
    bf2a:	2b00      	cmp	r3, #0
    bf2c:	d004      	beq.n	bf38 <mp_call_prepare_args_n_kw_var+0x108>
    bf2e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    bf30:	681b      	ldr	r3, [r3, #0]
    bf32:	4a92      	ldr	r2, [pc, #584]	; (c17c <mp_call_prepare_args_n_kw_var+0x34c>)
    bf34:	4293      	cmp	r3, r2
    bf36:	d00a      	beq.n	bf4e <mp_call_prepare_args_n_kw_var+0x11e>
    bf38:	6d78      	ldr	r0, [r7, #84]	; 0x54
    bf3a:	f7ff fa2f 	bl	b39c <MP_OBJ_IS_OBJ>
    bf3e:	4603      	mov	r3, r0
    bf40:	2b00      	cmp	r3, #0
    bf42:	d04a      	beq.n	bfda <mp_call_prepare_args_n_kw_var+0x1aa>
    bf44:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    bf46:	681b      	ldr	r3, [r3, #0]
    bf48:	4a8d      	ldr	r2, [pc, #564]	; (c180 <mp_call_prepare_args_n_kw_var+0x350>)
    bf4a:	4293      	cmp	r3, r2
    bf4c:	d145      	bne.n	bfda <mp_call_prepare_args_n_kw_var+0x1aa>
        // optimise the case of a tuple and list

        // get the items
        size_t len;
        mp_obj_t *items;
        mp_obj_get_array(pos_seq, &len, &items);
    bf4e:	f107 0230 	add.w	r2, r7, #48	; 0x30
    bf52:	f107 0334 	add.w	r3, r7, #52	; 0x34
    bf56:	4619      	mov	r1, r3
    bf58:	6d78      	ldr	r0, [r7, #84]	; 0x54
    bf5a:	f001 fe71 	bl	dc40 <mp_obj_get_array>

        // allocate memory for the new array of args
        args2_alloc = 1 + n_args + len + 2 * (n_kw + kw_dict_len);
    bf5e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    bf60:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    bf62:	441a      	add	r2, r3
    bf64:	6db9      	ldr	r1, [r7, #88]	; 0x58
    bf66:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    bf68:	440b      	add	r3, r1
    bf6a:	005b      	lsls	r3, r3, #1
    bf6c:	4413      	add	r3, r2
    bf6e:	3301      	adds	r3, #1
    bf70:	67fb      	str	r3, [r7, #124]	; 0x7c
        args2 = mp_nonlocal_alloc(args2_alloc * sizeof(mp_obj_t));
    bf72:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    bf74:	009b      	lsls	r3, r3, #2
    bf76:	4618      	mov	r0, r3
    bf78:	f7ff fa62 	bl	b440 <mp_nonlocal_alloc>
    bf7c:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80

        // copy the self
        if (self != MP_OBJ_NULL) {
    bf80:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
    bf84:	2b00      	cmp	r3, #0
    bf86:	d009      	beq.n	bf9c <mp_call_prepare_args_n_kw_var+0x16c>
            args2[args2_len++] = self;
    bf88:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    bf8a:	1c5a      	adds	r2, r3, #1
    bf8c:	67ba      	str	r2, [r7, #120]	; 0x78
    bf8e:	009b      	lsls	r3, r3, #2
    bf90:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
    bf94:	4413      	add	r3, r2
    bf96:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
    bf9a:	601a      	str	r2, [r3, #0]
        }

        // copy the fixed and variable position args
        mp_seq_cat(args2 + args2_len, args, n_args, items, len, mp_obj_t);
    bf9c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    bf9e:	009b      	lsls	r3, r3, #2
    bfa0:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
    bfa4:	18d0      	adds	r0, r2, r3
    bfa6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    bfa8:	009b      	lsls	r3, r3, #2
    bfaa:	461a      	mov	r2, r3
    bfac:	6879      	ldr	r1, [r7, #4]
    bfae:	f00f fd09 	bl	1b9c4 <memcpy>
    bfb2:	6fba      	ldr	r2, [r7, #120]	; 0x78
    bfb4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    bfb6:	4413      	add	r3, r2
    bfb8:	009b      	lsls	r3, r3, #2
    bfba:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
    bfbe:	18d0      	adds	r0, r2, r3
    bfc0:	6b39      	ldr	r1, [r7, #48]	; 0x30
    bfc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    bfc4:	009b      	lsls	r3, r3, #2
    bfc6:	461a      	mov	r2, r3
    bfc8:	f00f fcfc 	bl	1b9c4 <memcpy>
        args2_len += n_args + len;
    bfcc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    bfce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    bfd0:	4413      	add	r3, r2
    bfd2:	6fba      	ldr	r2, [r7, #120]	; 0x78
    bfd4:	4413      	add	r3, r2
    bfd6:	67bb      	str	r3, [r7, #120]	; 0x78
    } else if (MP_OBJ_IS_TYPE(pos_seq, &mp_type_tuple) || MP_OBJ_IS_TYPE(pos_seq, &mp_type_list)) {
    bfd8:	e055      	b.n	c086 <mp_call_prepare_args_n_kw_var+0x256>

    } else {
        // generic iterator

        // allocate memory for the new array of args
        args2_alloc = 1 + n_args + 2 * (n_kw + kw_dict_len) + 3;
    bfda:	6dba      	ldr	r2, [r7, #88]	; 0x58
    bfdc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    bfde:	4413      	add	r3, r2
    bfe0:	005a      	lsls	r2, r3, #1
    bfe2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    bfe4:	4413      	add	r3, r2
    bfe6:	3304      	adds	r3, #4
    bfe8:	67fb      	str	r3, [r7, #124]	; 0x7c
        args2 = mp_nonlocal_alloc(args2_alloc * sizeof(mp_obj_t));
    bfea:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    bfec:	009b      	lsls	r3, r3, #2
    bfee:	4618      	mov	r0, r3
    bff0:	f7ff fa26 	bl	b440 <mp_nonlocal_alloc>
    bff4:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80

        // copy the self
        if (self != MP_OBJ_NULL) {
    bff8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
    bffc:	2b00      	cmp	r3, #0
    bffe:	d009      	beq.n	c014 <mp_call_prepare_args_n_kw_var+0x1e4>
            args2[args2_len++] = self;
    c000:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    c002:	1c5a      	adds	r2, r3, #1
    c004:	67ba      	str	r2, [r7, #120]	; 0x78
    c006:	009b      	lsls	r3, r3, #2
    c008:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
    c00c:	4413      	add	r3, r2
    c00e:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
    c012:	601a      	str	r2, [r3, #0]
        }

        // copy the fixed position args
        mp_seq_copy(args2 + args2_len, args, n_args, mp_obj_t);
    c014:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    c016:	009b      	lsls	r3, r3, #2
    c018:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
    c01c:	18d0      	adds	r0, r2, r3
    c01e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    c020:	009b      	lsls	r3, r3, #2
    c022:	461a      	mov	r2, r3
    c024:	6879      	ldr	r1, [r7, #4]
    c026:	f00f fccd 	bl	1b9c4 <memcpy>
        args2_len += n_args;
    c02a:	6fba      	ldr	r2, [r7, #120]	; 0x78
    c02c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    c02e:	4413      	add	r3, r2
    c030:	67bb      	str	r3, [r7, #120]	; 0x78

        // extract the variable position args from the iterator
        mp_obj_iter_buf_t iter_buf;
        mp_obj_t iterable = mp_getiter(pos_seq, &iter_buf);
    c032:	f107 0320 	add.w	r3, r7, #32
    c036:	4619      	mov	r1, r3
    c038:	6d78      	ldr	r0, [r7, #84]	; 0x54
    c03a:	f000 fc25 	bl	c888 <mp_getiter>
    c03e:	64f8      	str	r0, [r7, #76]	; 0x4c
        mp_obj_t item;
        while ((item = mp_iternext(iterable)) != MP_OBJ_STOP_ITERATION) {
    c040:	e01a      	b.n	c078 <mp_call_prepare_args_n_kw_var+0x248>
            if (args2_len >= args2_alloc) {
    c042:	6fba      	ldr	r2, [r7, #120]	; 0x78
    c044:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    c046:	429a      	cmp	r2, r3
    c048:	d30d      	bcc.n	c066 <mp_call_prepare_args_n_kw_var+0x236>
                args2 = mp_nonlocal_realloc(args2, args2_alloc * sizeof(mp_obj_t), args2_alloc * 2 * sizeof(mp_obj_t));
    c04a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    c04c:	0099      	lsls	r1, r3, #2
    c04e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    c050:	00db      	lsls	r3, r3, #3
    c052:	461a      	mov	r2, r3
    c054:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
    c058:	f7ff f9fe 	bl	b458 <mp_nonlocal_realloc>
    c05c:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
                args2_alloc *= 2;
    c060:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    c062:	005b      	lsls	r3, r3, #1
    c064:	67fb      	str	r3, [r7, #124]	; 0x7c
            }
            args2[args2_len++] = item;
    c066:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    c068:	1c5a      	adds	r2, r3, #1
    c06a:	67ba      	str	r2, [r7, #120]	; 0x78
    c06c:	009b      	lsls	r3, r3, #2
    c06e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
    c072:	4413      	add	r3, r2
    c074:	6cba      	ldr	r2, [r7, #72]	; 0x48
    c076:	601a      	str	r2, [r3, #0]
        while ((item = mp_iternext(iterable)) != MP_OBJ_STOP_ITERATION) {
    c078:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
    c07a:	f000 fc87 	bl	c98c <mp_iternext>
    c07e:	64b8      	str	r0, [r7, #72]	; 0x48
    c080:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    c082:	2b04      	cmp	r3, #4
    c084:	d1dd      	bne.n	c042 <mp_call_prepare_args_n_kw_var+0x212>
        }
    }

    // The size of the args2 array now is the number of positional args.
    uint pos_args_len = args2_len;
    c086:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    c088:	647b      	str	r3, [r7, #68]	; 0x44

    // Copy the fixed kw args.
    mp_seq_copy(args2 + args2_len, args + n_args, 2 * n_kw, mp_obj_t);
    c08a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    c08c:	009b      	lsls	r3, r3, #2
    c08e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
    c092:	18d0      	adds	r0, r2, r3
    c094:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    c096:	009b      	lsls	r3, r3, #2
    c098:	687a      	ldr	r2, [r7, #4]
    c09a:	18d1      	adds	r1, r2, r3
    c09c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    c09e:	00db      	lsls	r3, r3, #3
    c0a0:	461a      	mov	r2, r3
    c0a2:	f00f fc8f 	bl	1b9c4 <memcpy>
    args2_len += 2 * n_kw;
    c0a6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    c0a8:	005b      	lsls	r3, r3, #1
    c0aa:	6fba      	ldr	r2, [r7, #120]	; 0x78
    c0ac:	4413      	add	r3, r2
    c0ae:	67bb      	str	r3, [r7, #120]	; 0x78

    // Extract (key,value) pairs from kw_dict dictionary and append to args2.
    // Note that it can be arbitrary iterator.
    if (kw_dict == MP_OBJ_NULL) {
    c0b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    c0b2:	2b00      	cmp	r3, #0
    c0b4:	f000 80d2 	beq.w	c25c <mp_call_prepare_args_n_kw_var+0x42c>
        // pass
    } else if (MP_OBJ_IS_TYPE(kw_dict, &mp_type_dict)) {
    c0b8:	6d38      	ldr	r0, [r7, #80]	; 0x50
    c0ba:	f7ff f96f 	bl	b39c <MP_OBJ_IS_OBJ>
    c0be:	4603      	mov	r3, r0
    c0c0:	2b00      	cmp	r3, #0
    c0c2:	d065      	beq.n	c190 <mp_call_prepare_args_n_kw_var+0x360>
    c0c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    c0c6:	681b      	ldr	r3, [r3, #0]
    c0c8:	4a2b      	ldr	r2, [pc, #172]	; (c178 <mp_call_prepare_args_n_kw_var+0x348>)
    c0ca:	4293      	cmp	r3, r2
    c0cc:	d160      	bne.n	c190 <mp_call_prepare_args_n_kw_var+0x360>
        // dictionary
        mp_map_t *map = mp_obj_dict_get_map(kw_dict);
    c0ce:	6d38      	ldr	r0, [r7, #80]	; 0x50
    c0d0:	f003 f80d 	bl	f0ee <mp_obj_dict_get_map>
    c0d4:	6438      	str	r0, [r7, #64]	; 0x40
        assert(args2_len + 2 * map->used <= args2_alloc); // should have enough, since kw_dict_len is in this case hinted correctly above
    c0d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    c0d8:	681b      	ldr	r3, [r3, #0]
    c0da:	f3c3 03dc 	ubfx	r3, r3, #3, #29
    c0de:	005b      	lsls	r3, r3, #1
    c0e0:	461a      	mov	r2, r3
    c0e2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    c0e4:	441a      	add	r2, r3
    c0e6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    c0e8:	429a      	cmp	r2, r3
    c0ea:	d906      	bls.n	c0fa <mp_call_prepare_args_n_kw_var+0x2ca>
    c0ec:	4b25      	ldr	r3, [pc, #148]	; (c184 <mp_call_prepare_args_n_kw_var+0x354>)
    c0ee:	4a26      	ldr	r2, [pc, #152]	; (c188 <mp_call_prepare_args_n_kw_var+0x358>)
    c0f0:	f44f 713b 	mov.w	r1, #748	; 0x2ec
    c0f4:	4825      	ldr	r0, [pc, #148]	; (c18c <mp_call_prepare_args_n_kw_var+0x35c>)
    c0f6:	f00f f861 	bl	1b1bc <__assert_func>
        for (size_t i = 0; i < map->alloc; i++) {
    c0fa:	2300      	movs	r3, #0
    c0fc:	673b      	str	r3, [r7, #112]	; 0x70
    c0fe:	e034      	b.n	c16a <mp_call_prepare_args_n_kw_var+0x33a>
            if (MP_MAP_SLOT_IS_FILLED(map, i)) {
    c100:	6f39      	ldr	r1, [r7, #112]	; 0x70
    c102:	6c38      	ldr	r0, [r7, #64]	; 0x40
    c104:	f7ff f95c 	bl	b3c0 <MP_MAP_SLOT_IS_FILLED>
    c108:	4603      	mov	r3, r0
    c10a:	2b00      	cmp	r3, #0
    c10c:	d02a      	beq.n	c164 <mp_call_prepare_args_n_kw_var+0x334>
                // the key must be a qstr, so intern it if it's a string
                mp_obj_t key = map->table[i].key;
    c10e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    c110:	689a      	ldr	r2, [r3, #8]
    c112:	6f3b      	ldr	r3, [r7, #112]	; 0x70
    c114:	00db      	lsls	r3, r3, #3
    c116:	4413      	add	r3, r2
    c118:	681b      	ldr	r3, [r3, #0]
    c11a:	66fb      	str	r3, [r7, #108]	; 0x6c
                if (!MP_OBJ_IS_QSTR(key)) {
    c11c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
    c11e:	f7ff f92b 	bl	b378 <MP_OBJ_IS_QSTR>
    c122:	4603      	mov	r3, r0
    c124:	f083 0301 	eor.w	r3, r3, #1
    c128:	b2db      	uxtb	r3, r3
    c12a:	2b00      	cmp	r3, #0
    c12c:	d003      	beq.n	c136 <mp_call_prepare_args_n_kw_var+0x306>
                    key = mp_obj_str_intern_checked(key);
    c12e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
    c130:	f009 f87e 	bl	15230 <mp_obj_str_intern_checked>
    c134:	66f8      	str	r0, [r7, #108]	; 0x6c
                }
                args2[args2_len++] = key;
    c136:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    c138:	1c5a      	adds	r2, r3, #1
    c13a:	67ba      	str	r2, [r7, #120]	; 0x78
    c13c:	009b      	lsls	r3, r3, #2
    c13e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
    c142:	4413      	add	r3, r2
    c144:	6efa      	ldr	r2, [r7, #108]	; 0x6c
    c146:	601a      	str	r2, [r3, #0]
                args2[args2_len++] = map->table[i].value;
    c148:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    c14a:	1c5a      	adds	r2, r3, #1
    c14c:	67ba      	str	r2, [r7, #120]	; 0x78
    c14e:	009b      	lsls	r3, r3, #2
    c150:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
    c154:	4413      	add	r3, r2
    c156:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    c158:	6891      	ldr	r1, [r2, #8]
    c15a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
    c15c:	00d2      	lsls	r2, r2, #3
    c15e:	440a      	add	r2, r1
    c160:	6852      	ldr	r2, [r2, #4]
    c162:	601a      	str	r2, [r3, #0]
        for (size_t i = 0; i < map->alloc; i++) {
    c164:	6f3b      	ldr	r3, [r7, #112]	; 0x70
    c166:	3301      	adds	r3, #1
    c168:	673b      	str	r3, [r7, #112]	; 0x70
    c16a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    c16c:	685a      	ldr	r2, [r3, #4]
    c16e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
    c170:	429a      	cmp	r2, r3
    c172:	d8c5      	bhi.n	c100 <mp_call_prepare_args_n_kw_var+0x2d0>
    } else if (MP_OBJ_IS_TYPE(kw_dict, &mp_type_dict)) {
    c174:	e072      	b.n	c25c <mp_call_prepare_args_n_kw_var+0x42c>
    c176:	bf00      	nop
    c178:	0001fe68 	.word	0x0001fe68
    c17c:	00021be8 	.word	0x00021be8
    c180:	00020f7c 	.word	0x00020f7c
    c184:	0001f490 	.word	0x0001f490
    c188:	0001f65c 	.word	0x0001f65c
    c18c:	0001f3f4 	.word	0x0001f3f4
        // - call keys() to get an iterable of all keys in the mapping
        // - call __getitem__ for each key to get the corresponding value

        // get the keys iterable
        mp_obj_t dest[3];
        mp_load_method(kw_dict, MP_QSTR_keys, dest);
    c190:	f107 0314 	add.w	r3, r7, #20
    c194:	461a      	mov	r2, r3
    c196:	218e      	movs	r1, #142	; 0x8e
    c198:	6d38      	ldr	r0, [r7, #80]	; 0x50
    c19a:	f000 fafd 	bl	c798 <mp_load_method>
        mp_obj_t iterable = mp_getiter(mp_call_method_n_kw(0, 0, dest), NULL);
    c19e:	f107 0314 	add.w	r3, r7, #20
    c1a2:	461a      	mov	r2, r3
    c1a4:	2100      	movs	r1, #0
    c1a6:	2000      	movs	r0, #0
    c1a8:	f7ff fe1e 	bl	bde8 <mp_call_method_n_kw>
    c1ac:	4603      	mov	r3, r0
    c1ae:	2100      	movs	r1, #0
    c1b0:	4618      	mov	r0, r3
    c1b2:	f000 fb69 	bl	c888 <mp_getiter>
    c1b6:	63f8      	str	r0, [r7, #60]	; 0x3c

        mp_obj_t key;
        while ((key = mp_iternext(iterable)) != MP_OBJ_STOP_ITERATION) {
    c1b8:	e049      	b.n	c24e <mp_call_prepare_args_n_kw_var+0x41e>
            // expand size of args array if needed
            if (args2_len + 1 >= args2_alloc) {
    c1ba:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    c1bc:	1c5a      	adds	r2, r3, #1
    c1be:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    c1c0:	429a      	cmp	r2, r3
    c1c2:	d314      	bcc.n	c1ee <mp_call_prepare_args_n_kw_var+0x3be>
                uint new_alloc = args2_alloc * 2;
    c1c4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    c1c6:	005b      	lsls	r3, r3, #1
    c1c8:	667b      	str	r3, [r7, #100]	; 0x64
                if (new_alloc < 4) {
    c1ca:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    c1cc:	2b03      	cmp	r3, #3
    c1ce:	d801      	bhi.n	c1d4 <mp_call_prepare_args_n_kw_var+0x3a4>
                    new_alloc = 4;
    c1d0:	2304      	movs	r3, #4
    c1d2:	667b      	str	r3, [r7, #100]	; 0x64
                }
                args2 = mp_nonlocal_realloc(args2, args2_alloc * sizeof(mp_obj_t), new_alloc * sizeof(mp_obj_t));
    c1d4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    c1d6:	0099      	lsls	r1, r3, #2
    c1d8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    c1da:	009b      	lsls	r3, r3, #2
    c1dc:	461a      	mov	r2, r3
    c1de:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
    c1e2:	f7ff f939 	bl	b458 <mp_nonlocal_realloc>
    c1e6:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
                args2_alloc = new_alloc;
    c1ea:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    c1ec:	67fb      	str	r3, [r7, #124]	; 0x7c
            }

            // the key must be a qstr, so intern it if it's a string
            if (!MP_OBJ_IS_QSTR(key)) {
    c1ee:	6eb8      	ldr	r0, [r7, #104]	; 0x68
    c1f0:	f7ff f8c2 	bl	b378 <MP_OBJ_IS_QSTR>
    c1f4:	4603      	mov	r3, r0
    c1f6:	f083 0301 	eor.w	r3, r3, #1
    c1fa:	b2db      	uxtb	r3, r3
    c1fc:	2b00      	cmp	r3, #0
    c1fe:	d003      	beq.n	c208 <mp_call_prepare_args_n_kw_var+0x3d8>
                key = mp_obj_str_intern_checked(key);
    c200:	6eb8      	ldr	r0, [r7, #104]	; 0x68
    c202:	f009 f815 	bl	15230 <mp_obj_str_intern_checked>
    c206:	66b8      	str	r0, [r7, #104]	; 0x68
            }

            // get the value corresponding to the key
            mp_load_method(kw_dict, MP_QSTR___getitem__, dest);
    c208:	f107 0314 	add.w	r3, r7, #20
    c20c:	461a      	mov	r2, r3
    c20e:	210e      	movs	r1, #14
    c210:	6d38      	ldr	r0, [r7, #80]	; 0x50
    c212:	f000 fac1 	bl	c798 <mp_load_method>
            dest[2] = key;
    c216:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    c218:	61fb      	str	r3, [r7, #28]
            mp_obj_t value = mp_call_method_n_kw(1, 0, dest);
    c21a:	f107 0314 	add.w	r3, r7, #20
    c21e:	461a      	mov	r2, r3
    c220:	2100      	movs	r1, #0
    c222:	2001      	movs	r0, #1
    c224:	f7ff fde0 	bl	bde8 <mp_call_method_n_kw>
    c228:	63b8      	str	r0, [r7, #56]	; 0x38

            // store the key/value pair in the argument array
            args2[args2_len++] = key;
    c22a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    c22c:	1c5a      	adds	r2, r3, #1
    c22e:	67ba      	str	r2, [r7, #120]	; 0x78
    c230:	009b      	lsls	r3, r3, #2
    c232:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
    c236:	4413      	add	r3, r2
    c238:	6eba      	ldr	r2, [r7, #104]	; 0x68
    c23a:	601a      	str	r2, [r3, #0]
            args2[args2_len++] = value;
    c23c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    c23e:	1c5a      	adds	r2, r3, #1
    c240:	67ba      	str	r2, [r7, #120]	; 0x78
    c242:	009b      	lsls	r3, r3, #2
    c244:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
    c248:	4413      	add	r3, r2
    c24a:	6bba      	ldr	r2, [r7, #56]	; 0x38
    c24c:	601a      	str	r2, [r3, #0]
        while ((key = mp_iternext(iterable)) != MP_OBJ_STOP_ITERATION) {
    c24e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
    c250:	f000 fb9c 	bl	c98c <mp_iternext>
    c254:	66b8      	str	r0, [r7, #104]	; 0x68
    c256:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    c258:	2b04      	cmp	r3, #4
    c25a:	d1ae      	bne.n	c1ba <mp_call_prepare_args_n_kw_var+0x38a>
        }
    }

    out_args->fun = fun;
    c25c:	683b      	ldr	r3, [r7, #0]
    c25e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
    c260:	601a      	str	r2, [r3, #0]
    out_args->args = args2;
    c262:	683b      	ldr	r3, [r7, #0]
    c264:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
    c268:	611a      	str	r2, [r3, #16]
    out_args->n_args = pos_args_len;
    c26a:	683b      	ldr	r3, [r7, #0]
    c26c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    c26e:	605a      	str	r2, [r3, #4]
    out_args->n_kw = (args2_len - pos_args_len) / 2;
    c270:	6fba      	ldr	r2, [r7, #120]	; 0x78
    c272:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    c274:	1ad3      	subs	r3, r2, r3
    c276:	085a      	lsrs	r2, r3, #1
    c278:	683b      	ldr	r3, [r7, #0]
    c27a:	609a      	str	r2, [r3, #8]
    out_args->n_alloc = args2_alloc;
    c27c:	683b      	ldr	r3, [r7, #0]
    c27e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
    c280:	60da      	str	r2, [r3, #12]
}
    c282:	bf00      	nop
    c284:	3788      	adds	r7, #136	; 0x88
    c286:	46bd      	mov	sp, r7
    c288:	bd80      	pop	{r7, pc}

0000c28a <mp_call_method_n_kw_var>:

mp_obj_t mp_call_method_n_kw_var(bool have_self, size_t n_args_n_kw, const mp_obj_t *args) {
    c28a:	b580      	push	{r7, lr}
    c28c:	b08a      	sub	sp, #40	; 0x28
    c28e:	af00      	add	r7, sp, #0
    c290:	4603      	mov	r3, r0
    c292:	60b9      	str	r1, [r7, #8]
    c294:	607a      	str	r2, [r7, #4]
    c296:	73fb      	strb	r3, [r7, #15]
    mp_call_args_t out_args;
    mp_call_prepare_args_n_kw_var(have_self, n_args_n_kw, args, &out_args);
    c298:	f107 0310 	add.w	r3, r7, #16
    c29c:	7bf8      	ldrb	r0, [r7, #15]
    c29e:	687a      	ldr	r2, [r7, #4]
    c2a0:	68b9      	ldr	r1, [r7, #8]
    c2a2:	f7ff fdc5 	bl	be30 <mp_call_prepare_args_n_kw_var>

    mp_obj_t res = mp_call_function_n_kw(out_args.fun, out_args.n_args, out_args.n_kw, out_args.args);
    c2a6:	6938      	ldr	r0, [r7, #16]
    c2a8:	6979      	ldr	r1, [r7, #20]
    c2aa:	69ba      	ldr	r2, [r7, #24]
    c2ac:	6a3b      	ldr	r3, [r7, #32]
    c2ae:	f7ff fd7a 	bl	bda6 <mp_call_function_n_kw>
    c2b2:	6278      	str	r0, [r7, #36]	; 0x24
    mp_nonlocal_free(out_args.args, out_args.n_alloc * sizeof(mp_obj_t));
    c2b4:	6a3a      	ldr	r2, [r7, #32]
    c2b6:	69fb      	ldr	r3, [r7, #28]
    c2b8:	009b      	lsls	r3, r3, #2
    c2ba:	4619      	mov	r1, r3
    c2bc:	4610      	mov	r0, r2
    c2be:	f7ff f8da 	bl	b476 <mp_nonlocal_free>

    return res;
    c2c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
    c2c4:	4618      	mov	r0, r3
    c2c6:	3728      	adds	r7, #40	; 0x28
    c2c8:	46bd      	mov	sp, r7
    c2ca:	bd80      	pop	{r7, pc}

0000c2cc <mp_unpack_sequence>:

// unpacked items are stored in reverse order into the array pointed to by items
void mp_unpack_sequence(mp_obj_t seq_in, size_t num, mp_obj_t *items) {
    c2cc:	b580      	push	{r7, lr}
    c2ce:	b08e      	sub	sp, #56	; 0x38
    c2d0:	af00      	add	r7, sp, #0
    c2d2:	60f8      	str	r0, [r7, #12]
    c2d4:	60b9      	str	r1, [r7, #8]
    c2d6:	607a      	str	r2, [r7, #4]
    size_t seq_len;
    if (MP_OBJ_IS_TYPE(seq_in, &mp_type_tuple) || MP_OBJ_IS_TYPE(seq_in, &mp_type_list)) {
    c2d8:	68f8      	ldr	r0, [r7, #12]
    c2da:	f7ff f85f 	bl	b39c <MP_OBJ_IS_OBJ>
    c2de:	4603      	mov	r3, r0
    c2e0:	2b00      	cmp	r3, #0
    c2e2:	d004      	beq.n	c2ee <mp_unpack_sequence+0x22>
    c2e4:	68fb      	ldr	r3, [r7, #12]
    c2e6:	681b      	ldr	r3, [r3, #0]
    c2e8:	4a38      	ldr	r2, [pc, #224]	; (c3cc <mp_unpack_sequence+0x100>)
    c2ea:	4293      	cmp	r3, r2
    c2ec:	d00a      	beq.n	c304 <mp_unpack_sequence+0x38>
    c2ee:	68f8      	ldr	r0, [r7, #12]
    c2f0:	f7ff f854 	bl	b39c <MP_OBJ_IS_OBJ>
    c2f4:	4603      	mov	r3, r0
    c2f6:	2b00      	cmp	r3, #0
    c2f8:	d02e      	beq.n	c358 <mp_unpack_sequence+0x8c>
    c2fa:	68fb      	ldr	r3, [r7, #12]
    c2fc:	681b      	ldr	r3, [r3, #0]
    c2fe:	4a34      	ldr	r2, [pc, #208]	; (c3d0 <mp_unpack_sequence+0x104>)
    c300:	4293      	cmp	r3, r2
    c302:	d129      	bne.n	c358 <mp_unpack_sequence+0x8c>
        mp_obj_t *seq_items;
        mp_obj_get_array(seq_in, &seq_len, &seq_items);
    c304:	f107 0224 	add.w	r2, r7, #36	; 0x24
    c308:	f107 0328 	add.w	r3, r7, #40	; 0x28
    c30c:	4619      	mov	r1, r3
    c30e:	68f8      	ldr	r0, [r7, #12]
    c310:	f001 fc96 	bl	dc40 <mp_obj_get_array>
        if (seq_len < num) {
    c314:	6aba      	ldr	r2, [r7, #40]	; 0x28
    c316:	68bb      	ldr	r3, [r7, #8]
    c318:	429a      	cmp	r2, r3
    c31a:	d348      	bcc.n	c3ae <mp_unpack_sequence+0xe2>
            goto too_short;
        } else if (seq_len > num) {
    c31c:	6aba      	ldr	r2, [r7, #40]	; 0x28
    c31e:	68bb      	ldr	r3, [r7, #8]
    c320:	429a      	cmp	r2, r3
    c322:	d84a      	bhi.n	c3ba <mp_unpack_sequence+0xee>
            goto too_long;
        }
        for (size_t i = 0; i < num; i++) {
    c324:	2300      	movs	r3, #0
    c326:	637b      	str	r3, [r7, #52]	; 0x34
    c328:	e011      	b.n	c34e <mp_unpack_sequence+0x82>
            items[i] = seq_items[num - 1 - i];
    c32a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    c32c:	009b      	lsls	r3, r3, #2
    c32e:	687a      	ldr	r2, [r7, #4]
    c330:	441a      	add	r2, r3
    c332:	6a79      	ldr	r1, [r7, #36]	; 0x24
    c334:	68b8      	ldr	r0, [r7, #8]
    c336:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    c338:	1ac3      	subs	r3, r0, r3
    c33a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    c33e:	3b01      	subs	r3, #1
    c340:	009b      	lsls	r3, r3, #2
    c342:	440b      	add	r3, r1
    c344:	681b      	ldr	r3, [r3, #0]
    c346:	6013      	str	r3, [r2, #0]
        for (size_t i = 0; i < num; i++) {
    c348:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    c34a:	3301      	adds	r3, #1
    c34c:	637b      	str	r3, [r7, #52]	; 0x34
    c34e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    c350:	68bb      	ldr	r3, [r7, #8]
    c352:	429a      	cmp	r2, r3
    c354:	d3e9      	bcc.n	c32a <mp_unpack_sequence+0x5e>
    if (MP_OBJ_IS_TYPE(seq_in, &mp_type_tuple) || MP_OBJ_IS_TYPE(seq_in, &mp_type_list)) {
    c356:	e029      	b.n	c3ac <mp_unpack_sequence+0xe0>
        }
    } else {
        mp_obj_iter_buf_t iter_buf;
        mp_obj_t iterable = mp_getiter(seq_in, &iter_buf);
    c358:	f107 0314 	add.w	r3, r7, #20
    c35c:	4619      	mov	r1, r3
    c35e:	68f8      	ldr	r0, [r7, #12]
    c360:	f000 fa92 	bl	c888 <mp_getiter>
    c364:	6338      	str	r0, [r7, #48]	; 0x30

        for (seq_len = 0; seq_len < num; seq_len++) {
    c366:	2300      	movs	r3, #0
    c368:	62bb      	str	r3, [r7, #40]	; 0x28
    c36a:	e014      	b.n	c396 <mp_unpack_sequence+0xca>
            mp_obj_t el = mp_iternext(iterable);
    c36c:	6b38      	ldr	r0, [r7, #48]	; 0x30
    c36e:	f000 fb0d 	bl	c98c <mp_iternext>
    c372:	62f8      	str	r0, [r7, #44]	; 0x2c
            if (el == MP_OBJ_STOP_ITERATION) {
    c374:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c376:	2b04      	cmp	r3, #4
    c378:	d01b      	beq.n	c3b2 <mp_unpack_sequence+0xe6>
                goto too_short;
            }
            items[num - 1 - seq_len] = el;
    c37a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    c37c:	68ba      	ldr	r2, [r7, #8]
    c37e:	1ad3      	subs	r3, r2, r3
    c380:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    c384:	3b01      	subs	r3, #1
    c386:	009b      	lsls	r3, r3, #2
    c388:	687a      	ldr	r2, [r7, #4]
    c38a:	4413      	add	r3, r2
    c38c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    c38e:	601a      	str	r2, [r3, #0]
        for (seq_len = 0; seq_len < num; seq_len++) {
    c390:	6abb      	ldr	r3, [r7, #40]	; 0x28
    c392:	3301      	adds	r3, #1
    c394:	62bb      	str	r3, [r7, #40]	; 0x28
    c396:	6aba      	ldr	r2, [r7, #40]	; 0x28
    c398:	68bb      	ldr	r3, [r7, #8]
    c39a:	429a      	cmp	r2, r3
    c39c:	d3e6      	bcc.n	c36c <mp_unpack_sequence+0xa0>
        }
        if (mp_iternext(iterable) != MP_OBJ_STOP_ITERATION) {
    c39e:	6b38      	ldr	r0, [r7, #48]	; 0x30
    c3a0:	f000 faf4 	bl	c98c <mp_iternext>
    c3a4:	4603      	mov	r3, r0
    c3a6:	2b04      	cmp	r3, #4
    c3a8:	d00b      	beq.n	c3c2 <mp_unpack_sequence+0xf6>
            goto too_long;
    c3aa:	e007      	b.n	c3bc <mp_unpack_sequence+0xf0>
        }
    }
    return;
    c3ac:	e009      	b.n	c3c2 <mp_unpack_sequence+0xf6>
            goto too_short;
    c3ae:	bf00      	nop
    c3b0:	e000      	b.n	c3b4 <mp_unpack_sequence+0xe8>
                goto too_short;
    c3b2:	bf00      	nop

too_short:
    if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
        mp_raise_ValueError("wrong number of values to unpack");
    c3b4:	4807      	ldr	r0, [pc, #28]	; (c3d4 <mp_unpack_sequence+0x108>)
    c3b6:	f000 fdaa 	bl	cf0e <mp_raise_ValueError>
            goto too_long;
    c3ba:	bf00      	nop
        nlr_raise(mp_obj_new_exception_msg_varg(&mp_type_ValueError,
            "need more than %d values to unpack", (int)seq_len));
    }
too_long:
    if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
        mp_raise_ValueError("wrong number of values to unpack");
    c3bc:	4805      	ldr	r0, [pc, #20]	; (c3d4 <mp_unpack_sequence+0x108>)
    c3be:	f000 fda6 	bl	cf0e <mp_raise_ValueError>
    return;
    c3c2:	bf00      	nop
    } else {
        nlr_raise(mp_obj_new_exception_msg_varg(&mp_type_ValueError,
            "too many values to unpack (expected %d)", (int)num));
    }
}
    c3c4:	3738      	adds	r7, #56	; 0x38
    c3c6:	46bd      	mov	sp, r7
    c3c8:	bd80      	pop	{r7, pc}
    c3ca:	bf00      	nop
    c3cc:	00021be8 	.word	0x00021be8
    c3d0:	00020f7c 	.word	0x00020f7c
    c3d4:	0001f4bc 	.word	0x0001f4bc

0000c3d8 <mp_unpack_ex>:

// unpacked items are stored in reverse order into the array pointed to by items
void mp_unpack_ex(mp_obj_t seq_in, size_t num_in, mp_obj_t *items) {
    c3d8:	b590      	push	{r4, r7, lr}
    c3da:	b08f      	sub	sp, #60	; 0x3c
    c3dc:	af00      	add	r7, sp, #0
    c3de:	60f8      	str	r0, [r7, #12]
    c3e0:	60b9      	str	r1, [r7, #8]
    c3e2:	607a      	str	r2, [r7, #4]
    size_t num_left = num_in & 0xff;
    c3e4:	68bb      	ldr	r3, [r7, #8]
    c3e6:	b2db      	uxtb	r3, r3
    c3e8:	62bb      	str	r3, [r7, #40]	; 0x28
    size_t num_right = (num_in >> 8) & 0xff;
    c3ea:	68bb      	ldr	r3, [r7, #8]
    c3ec:	0a1b      	lsrs	r3, r3, #8
    c3ee:	b2db      	uxtb	r3, r3
    c3f0:	627b      	str	r3, [r7, #36]	; 0x24
    DEBUG_OP_printf("unpack ex " UINT_FMT " " UINT_FMT "\n", num_left, num_right);
    size_t seq_len;
    if (MP_OBJ_IS_TYPE(seq_in, &mp_type_tuple) || MP_OBJ_IS_TYPE(seq_in, &mp_type_list)) {
    c3f2:	68f8      	ldr	r0, [r7, #12]
    c3f4:	f7fe ffd2 	bl	b39c <MP_OBJ_IS_OBJ>
    c3f8:	4603      	mov	r3, r0
    c3fa:	2b00      	cmp	r3, #0
    c3fc:	d004      	beq.n	c408 <mp_unpack_ex+0x30>
    c3fe:	68fb      	ldr	r3, [r7, #12]
    c400:	681b      	ldr	r3, [r3, #0]
    c402:	4a6a      	ldr	r2, [pc, #424]	; (c5ac <mp_unpack_ex+0x1d4>)
    c404:	4293      	cmp	r3, r2
    c406:	d00a      	beq.n	c41e <mp_unpack_ex+0x46>
    c408:	68f8      	ldr	r0, [r7, #12]
    c40a:	f7fe ffc7 	bl	b39c <MP_OBJ_IS_OBJ>
    c40e:	4603      	mov	r3, r0
    c410:	2b00      	cmp	r3, #0
    c412:	d05b      	beq.n	c4cc <mp_unpack_ex+0xf4>
    c414:	68fb      	ldr	r3, [r7, #12]
    c416:	681b      	ldr	r3, [r3, #0]
    c418:	4a65      	ldr	r2, [pc, #404]	; (c5b0 <mp_unpack_ex+0x1d8>)
    c41a:	4293      	cmp	r3, r2
    c41c:	d156      	bne.n	c4cc <mp_unpack_ex+0xf4>
        mp_obj_t *seq_items;
        mp_obj_get_array(seq_in, &seq_len, &seq_items);
    c41e:	f107 0210 	add.w	r2, r7, #16
    c422:	f107 0314 	add.w	r3, r7, #20
    c426:	4619      	mov	r1, r3
    c428:	68f8      	ldr	r0, [r7, #12]
    c42a:	f001 fc09 	bl	dc40 <mp_obj_get_array>
        if (seq_len < num_left + num_right) {
    c42e:	6aba      	ldr	r2, [r7, #40]	; 0x28
    c430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    c432:	441a      	add	r2, r3
    c434:	697b      	ldr	r3, [r7, #20]
    c436:	429a      	cmp	r2, r3
    c438:	f200 80ad 	bhi.w	c596 <mp_unpack_ex+0x1be>
            goto too_short;
        }
        for (size_t i = 0; i < num_right; i++) {
    c43c:	2300      	movs	r3, #0
    c43e:	637b      	str	r3, [r7, #52]	; 0x34
    c440:	e011      	b.n	c466 <mp_unpack_ex+0x8e>
            items[i] = seq_items[seq_len - 1 - i];
    c442:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    c444:	009b      	lsls	r3, r3, #2
    c446:	687a      	ldr	r2, [r7, #4]
    c448:	441a      	add	r2, r3
    c44a:	6939      	ldr	r1, [r7, #16]
    c44c:	6978      	ldr	r0, [r7, #20]
    c44e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    c450:	1ac3      	subs	r3, r0, r3
    c452:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    c456:	3b01      	subs	r3, #1
    c458:	009b      	lsls	r3, r3, #2
    c45a:	440b      	add	r3, r1
    c45c:	681b      	ldr	r3, [r3, #0]
    c45e:	6013      	str	r3, [r2, #0]
        for (size_t i = 0; i < num_right; i++) {
    c460:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    c462:	3301      	adds	r3, #1
    c464:	637b      	str	r3, [r7, #52]	; 0x34
    c466:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    c468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    c46a:	429a      	cmp	r2, r3
    c46c:	d3e9      	bcc.n	c442 <mp_unpack_ex+0x6a>
        }
        items[num_right] = mp_obj_new_list(seq_len - num_left - num_right, seq_items + num_left);
    c46e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    c470:	009b      	lsls	r3, r3, #2
    c472:	687a      	ldr	r2, [r7, #4]
    c474:	18d4      	adds	r4, r2, r3
    c476:	697a      	ldr	r2, [r7, #20]
    c478:	6abb      	ldr	r3, [r7, #40]	; 0x28
    c47a:	1ad2      	subs	r2, r2, r3
    c47c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    c47e:	1ad0      	subs	r0, r2, r3
    c480:	693a      	ldr	r2, [r7, #16]
    c482:	6abb      	ldr	r3, [r7, #40]	; 0x28
    c484:	009b      	lsls	r3, r3, #2
    c486:	4413      	add	r3, r2
    c488:	4619      	mov	r1, r3
    c48a:	f005 f92c 	bl	116e6 <mp_obj_new_list>
    c48e:	4603      	mov	r3, r0
    c490:	6023      	str	r3, [r4, #0]
        for (size_t i = 0; i < num_left; i++) {
    c492:	2300      	movs	r3, #0
    c494:	633b      	str	r3, [r7, #48]	; 0x30
    c496:	e014      	b.n	c4c2 <mp_unpack_ex+0xea>
            items[num_right + 1 + i] = seq_items[num_left - 1 - i];
    c498:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    c49a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    c49c:	4413      	add	r3, r2
    c49e:	3301      	adds	r3, #1
    c4a0:	009b      	lsls	r3, r3, #2
    c4a2:	687a      	ldr	r2, [r7, #4]
    c4a4:	441a      	add	r2, r3
    c4a6:	6939      	ldr	r1, [r7, #16]
    c4a8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    c4aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    c4ac:	1ac3      	subs	r3, r0, r3
    c4ae:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    c4b2:	3b01      	subs	r3, #1
    c4b4:	009b      	lsls	r3, r3, #2
    c4b6:	440b      	add	r3, r1
    c4b8:	681b      	ldr	r3, [r3, #0]
    c4ba:	6013      	str	r3, [r2, #0]
        for (size_t i = 0; i < num_left; i++) {
    c4bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    c4be:	3301      	adds	r3, #1
    c4c0:	633b      	str	r3, [r7, #48]	; 0x30
    c4c2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    c4c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
    c4c6:	429a      	cmp	r2, r3
    c4c8:	d3e6      	bcc.n	c498 <mp_unpack_ex+0xc0>
    if (MP_OBJ_IS_TYPE(seq_in, &mp_type_tuple) || MP_OBJ_IS_TYPE(seq_in, &mp_type_list)) {
    c4ca:	e063      	b.n	c594 <mp_unpack_ex+0x1bc>
    } else {
        // Generic iterable; this gets a bit messy: we unpack known left length to the
        // items destination array, then the rest to a dynamically created list.  Once the
        // iterable is exhausted, we take from this list for the right part of the items.
        // TODO Improve to waste less memory in the dynamically created list.
        mp_obj_t iterable = mp_getiter(seq_in, NULL);
    c4cc:	2100      	movs	r1, #0
    c4ce:	68f8      	ldr	r0, [r7, #12]
    c4d0:	f000 f9da 	bl	c888 <mp_getiter>
    c4d4:	6238      	str	r0, [r7, #32]
        mp_obj_t item;
        for (seq_len = 0; seq_len < num_left; seq_len++) {
    c4d6:	2300      	movs	r3, #0
    c4d8:	617b      	str	r3, [r7, #20]
    c4da:	e013      	b.n	c504 <mp_unpack_ex+0x12c>
            item = mp_iternext(iterable);
    c4dc:	6a38      	ldr	r0, [r7, #32]
    c4de:	f000 fa55 	bl	c98c <mp_iternext>
    c4e2:	61f8      	str	r0, [r7, #28]
            if (item == MP_OBJ_STOP_ITERATION) {
    c4e4:	69fb      	ldr	r3, [r7, #28]
    c4e6:	2b04      	cmp	r3, #4
    c4e8:	d057      	beq.n	c59a <mp_unpack_ex+0x1c2>
                goto too_short;
            }
            items[num_left + num_right + 1 - 1 - seq_len] = item;
    c4ea:	6aba      	ldr	r2, [r7, #40]	; 0x28
    c4ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    c4ee:	441a      	add	r2, r3
    c4f0:	697b      	ldr	r3, [r7, #20]
    c4f2:	1ad3      	subs	r3, r2, r3
    c4f4:	009b      	lsls	r3, r3, #2
    c4f6:	687a      	ldr	r2, [r7, #4]
    c4f8:	4413      	add	r3, r2
    c4fa:	69fa      	ldr	r2, [r7, #28]
    c4fc:	601a      	str	r2, [r3, #0]
        for (seq_len = 0; seq_len < num_left; seq_len++) {
    c4fe:	697b      	ldr	r3, [r7, #20]
    c500:	3301      	adds	r3, #1
    c502:	617b      	str	r3, [r7, #20]
    c504:	697a      	ldr	r2, [r7, #20]
    c506:	6abb      	ldr	r3, [r7, #40]	; 0x28
    c508:	429a      	cmp	r2, r3
    c50a:	d3e7      	bcc.n	c4dc <mp_unpack_ex+0x104>
        }
        mp_obj_list_t *rest = MP_OBJ_TO_PTR(mp_obj_new_list(0, NULL));
    c50c:	2100      	movs	r1, #0
    c50e:	2000      	movs	r0, #0
    c510:	f005 f8e9 	bl	116e6 <mp_obj_new_list>
    c514:	61b8      	str	r0, [r7, #24]
        while ((item = mp_iternext(iterable)) != MP_OBJ_STOP_ITERATION) {
    c516:	e003      	b.n	c520 <mp_unpack_ex+0x148>
            mp_obj_list_append(MP_OBJ_FROM_PTR(rest), item);
    c518:	69f9      	ldr	r1, [r7, #28]
    c51a:	69b8      	ldr	r0, [r7, #24]
    c51c:	f004 fc77 	bl	10e0e <mp_obj_list_append>
        while ((item = mp_iternext(iterable)) != MP_OBJ_STOP_ITERATION) {
    c520:	6a38      	ldr	r0, [r7, #32]
    c522:	f000 fa33 	bl	c98c <mp_iternext>
    c526:	61f8      	str	r0, [r7, #28]
    c528:	69fb      	ldr	r3, [r7, #28]
    c52a:	2b04      	cmp	r3, #4
    c52c:	d1f4      	bne.n	c518 <mp_unpack_ex+0x140>
        }
        if (rest->len < num_right) {
    c52e:	69bb      	ldr	r3, [r7, #24]
    c530:	689a      	ldr	r2, [r3, #8]
    c532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    c534:	429a      	cmp	r2, r3
    c536:	d332      	bcc.n	c59e <mp_unpack_ex+0x1c6>
            goto too_short;
        }
        items[num_right] = MP_OBJ_FROM_PTR(rest);
    c538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    c53a:	009b      	lsls	r3, r3, #2
    c53c:	687a      	ldr	r2, [r7, #4]
    c53e:	4413      	add	r3, r2
    c540:	69ba      	ldr	r2, [r7, #24]
    c542:	601a      	str	r2, [r3, #0]
        for (size_t i = 0; i < num_right; i++) {
    c544:	2300      	movs	r3, #0
    c546:	62fb      	str	r3, [r7, #44]	; 0x2c
    c548:	e017      	b.n	c57a <mp_unpack_ex+0x1a2>
            items[num_right - 1 - i] = rest->items[rest->len - num_right + i];
    c54a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    c54c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c54e:	1ad3      	subs	r3, r2, r3
    c550:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    c554:	3b01      	subs	r3, #1
    c556:	009b      	lsls	r3, r3, #2
    c558:	687a      	ldr	r2, [r7, #4]
    c55a:	4413      	add	r3, r2
    c55c:	69ba      	ldr	r2, [r7, #24]
    c55e:	68d1      	ldr	r1, [r2, #12]
    c560:	69ba      	ldr	r2, [r7, #24]
    c562:	6890      	ldr	r0, [r2, #8]
    c564:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    c566:	1a80      	subs	r0, r0, r2
    c568:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    c56a:	4402      	add	r2, r0
    c56c:	0092      	lsls	r2, r2, #2
    c56e:	440a      	add	r2, r1
    c570:	6812      	ldr	r2, [r2, #0]
    c572:	601a      	str	r2, [r3, #0]
        for (size_t i = 0; i < num_right; i++) {
    c574:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c576:	3301      	adds	r3, #1
    c578:	62fb      	str	r3, [r7, #44]	; 0x2c
    c57a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    c57c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    c57e:	429a      	cmp	r2, r3
    c580:	d3e3      	bcc.n	c54a <mp_unpack_ex+0x172>
        }
        mp_obj_list_set_len(MP_OBJ_FROM_PTR(rest), rest->len - num_right);
    c582:	69bb      	ldr	r3, [r7, #24]
    c584:	689a      	ldr	r2, [r3, #8]
    c586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    c588:	1ad3      	subs	r3, r2, r3
    c58a:	4619      	mov	r1, r3
    c58c:	69b8      	ldr	r0, [r7, #24]
    c58e:	f005 f8e6 	bl	1175e <mp_obj_list_set_len>
    }
    return;
    c592:	e008      	b.n	c5a6 <mp_unpack_ex+0x1ce>
    c594:	e007      	b.n	c5a6 <mp_unpack_ex+0x1ce>
            goto too_short;
    c596:	bf00      	nop
    c598:	e002      	b.n	c5a0 <mp_unpack_ex+0x1c8>
                goto too_short;
    c59a:	bf00      	nop
    c59c:	e000      	b.n	c5a0 <mp_unpack_ex+0x1c8>
            goto too_short;
    c59e:	bf00      	nop

too_short:
    if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
        mp_raise_ValueError("wrong number of values to unpack");
    c5a0:	4804      	ldr	r0, [pc, #16]	; (c5b4 <mp_unpack_ex+0x1dc>)
    c5a2:	f000 fcb4 	bl	cf0e <mp_raise_ValueError>
    } else {
        nlr_raise(mp_obj_new_exception_msg_varg(&mp_type_ValueError,
            "need more than %d values to unpack", (int)seq_len));
    }
}
    c5a6:	373c      	adds	r7, #60	; 0x3c
    c5a8:	46bd      	mov	sp, r7
    c5aa:	bd90      	pop	{r4, r7, pc}
    c5ac:	00021be8 	.word	0x00021be8
    c5b0:	00020f7c 	.word	0x00020f7c
    c5b4:	0001f4bc 	.word	0x0001f4bc

0000c5b8 <mp_load_attr>:

mp_obj_t mp_load_attr(mp_obj_t base, qstr attr) {
    c5b8:	b580      	push	{r7, lr}
    c5ba:	b084      	sub	sp, #16
    c5bc:	af00      	add	r7, sp, #0
    c5be:	6078      	str	r0, [r7, #4]
    c5c0:	6039      	str	r1, [r7, #0]
    DEBUG_OP_printf("load attr %p.%s\n", base, qstr_str(attr));
    // use load_method
    mp_obj_t dest[2];
    mp_load_method(base, attr, dest);
    c5c2:	f107 0308 	add.w	r3, r7, #8
    c5c6:	461a      	mov	r2, r3
    c5c8:	6839      	ldr	r1, [r7, #0]
    c5ca:	6878      	ldr	r0, [r7, #4]
    c5cc:	f000 f8e4 	bl	c798 <mp_load_method>
    if (dest[1] == MP_OBJ_NULL) {
    c5d0:	68fb      	ldr	r3, [r7, #12]
    c5d2:	2b00      	cmp	r3, #0
    c5d4:	d101      	bne.n	c5da <mp_load_attr+0x22>
        // load_method returned just a normal attribute
        return dest[0];
    c5d6:	68bb      	ldr	r3, [r7, #8]
    c5d8:	e006      	b.n	c5e8 <mp_load_attr+0x30>
    } else {
        // load_method returned a method, so build a bound method object
        return mp_obj_new_bound_meth(dest[0], dest[1]);
    c5da:	68bb      	ldr	r3, [r7, #8]
    c5dc:	68fa      	ldr	r2, [r7, #12]
    c5de:	4611      	mov	r1, r2
    c5e0:	4618      	mov	r0, r3
    c5e2:	f001 fdda 	bl	e19a <mp_obj_new_bound_meth>
    c5e6:	4603      	mov	r3, r0
    }
}
    c5e8:	4618      	mov	r0, r3
    c5ea:	3710      	adds	r7, #16
    c5ec:	46bd      	mov	sp, r7
    c5ee:	bd80      	pop	{r7, pc}

0000c5f0 <mp_convert_member_lookup>:

// Given a member that was extracted from an instance, convert it correctly
// and put the result in the dest[] array for a possible method call.
// Conversion means dealing with static/class methods, callables, and values.
// see http://docs.python.org/3/howto/descriptor.html
void mp_convert_member_lookup(mp_obj_t self, const mp_obj_type_t *type, mp_obj_t member, mp_obj_t *dest) {
    c5f0:	b580      	push	{r7, lr}
    c5f2:	b084      	sub	sp, #16
    c5f4:	af00      	add	r7, sp, #0
    c5f6:	60f8      	str	r0, [r7, #12]
    c5f8:	60b9      	str	r1, [r7, #8]
    c5fa:	607a      	str	r2, [r7, #4]
    c5fc:	603b      	str	r3, [r7, #0]
    if (MP_OBJ_IS_TYPE(member, &mp_type_staticmethod)) {
    c5fe:	6878      	ldr	r0, [r7, #4]
    c600:	f7fe fecc 	bl	b39c <MP_OBJ_IS_OBJ>
    c604:	4603      	mov	r3, r0
    c606:	2b00      	cmp	r3, #0
    c608:	d009      	beq.n	c61e <mp_convert_member_lookup+0x2e>
    c60a:	687b      	ldr	r3, [r7, #4]
    c60c:	681b      	ldr	r3, [r3, #0]
    c60e:	4a2e      	ldr	r2, [pc, #184]	; (c6c8 <mp_convert_member_lookup+0xd8>)
    c610:	4293      	cmp	r3, r2
    c612:	d104      	bne.n	c61e <mp_convert_member_lookup+0x2e>
        // return just the function
        dest[0] = ((mp_obj_static_class_method_t*)MP_OBJ_TO_PTR(member))->fun;
    c614:	687b      	ldr	r3, [r7, #4]
    c616:	685a      	ldr	r2, [r3, #4]
    c618:	683b      	ldr	r3, [r7, #0]
    c61a:	601a      	str	r2, [r3, #0]
    c61c:	e04f      	b.n	c6be <mp_convert_member_lookup+0xce>
    } else if (MP_OBJ_IS_TYPE(member, &mp_type_classmethod)) {
    c61e:	6878      	ldr	r0, [r7, #4]
    c620:	f7fe febc 	bl	b39c <MP_OBJ_IS_OBJ>
    c624:	4603      	mov	r3, r0
    c626:	2b00      	cmp	r3, #0
    c628:	d014      	beq.n	c654 <mp_convert_member_lookup+0x64>
    c62a:	687b      	ldr	r3, [r7, #4]
    c62c:	681b      	ldr	r3, [r3, #0]
    c62e:	4a27      	ldr	r2, [pc, #156]	; (c6cc <mp_convert_member_lookup+0xdc>)
    c630:	4293      	cmp	r3, r2
    c632:	d10f      	bne.n	c654 <mp_convert_member_lookup+0x64>
        // return a bound method, with self being the type of this object
        // this type should be the type of the original instance, not the base
        // type (which is what is passed in the 'type' argument to this function)
        if (self != MP_OBJ_NULL) {
    c634:	68fb      	ldr	r3, [r7, #12]
    c636:	2b00      	cmp	r3, #0
    c638:	d003      	beq.n	c642 <mp_convert_member_lookup+0x52>
            type = mp_obj_get_type(self);
    c63a:	68f8      	ldr	r0, [r7, #12]
    c63c:	f001 f888 	bl	d750 <mp_obj_get_type>
    c640:	60b8      	str	r0, [r7, #8]
        }
        dest[0] = ((mp_obj_static_class_method_t*)MP_OBJ_TO_PTR(member))->fun;
    c642:	687b      	ldr	r3, [r7, #4]
    c644:	685a      	ldr	r2, [r3, #4]
    c646:	683b      	ldr	r3, [r7, #0]
    c648:	601a      	str	r2, [r3, #0]
        dest[1] = MP_OBJ_FROM_PTR(type);
    c64a:	683b      	ldr	r3, [r7, #0]
    c64c:	3304      	adds	r3, #4
    c64e:	68ba      	ldr	r2, [r7, #8]
    c650:	601a      	str	r2, [r3, #0]
    c652:	e034      	b.n	c6be <mp_convert_member_lookup+0xce>
    } else if (MP_OBJ_IS_TYPE(member, &mp_type_type)) {
    c654:	6878      	ldr	r0, [r7, #4]
    c656:	f7fe fea1 	bl	b39c <MP_OBJ_IS_OBJ>
    c65a:	4603      	mov	r3, r0
    c65c:	2b00      	cmp	r3, #0
    c65e:	d008      	beq.n	c672 <mp_convert_member_lookup+0x82>
    c660:	687b      	ldr	r3, [r7, #4]
    c662:	681b      	ldr	r3, [r3, #0]
    c664:	4a1a      	ldr	r2, [pc, #104]	; (c6d0 <mp_convert_member_lookup+0xe0>)
    c666:	4293      	cmp	r3, r2
    c668:	d103      	bne.n	c672 <mp_convert_member_lookup+0x82>
        // Don't try to bind types (even though they're callable)
        dest[0] = member;
    c66a:	683b      	ldr	r3, [r7, #0]
    c66c:	687a      	ldr	r2, [r7, #4]
    c66e:	601a      	str	r2, [r3, #0]
    c670:	e025      	b.n	c6be <mp_convert_member_lookup+0xce>
    } else if (MP_OBJ_IS_FUN(member)
    c672:	6878      	ldr	r0, [r7, #4]
    c674:	f7fe fe92 	bl	b39c <MP_OBJ_IS_OBJ>
    c678:	4603      	mov	r3, r0
    c67a:	2b00      	cmp	r3, #0
    c67c:	d004      	beq.n	c688 <mp_convert_member_lookup+0x98>
    c67e:	687b      	ldr	r3, [r7, #4]
    c680:	681b      	ldr	r3, [r3, #0]
    c682:	685b      	ldr	r3, [r3, #4]
    c684:	2b74      	cmp	r3, #116	; 0x74
    c686:	d00f      	beq.n	c6a8 <mp_convert_member_lookup+0xb8>
        || (MP_OBJ_IS_OBJ(member)
    c688:	6878      	ldr	r0, [r7, #4]
    c68a:	f7fe fe87 	bl	b39c <MP_OBJ_IS_OBJ>
    c68e:	4603      	mov	r3, r0
    c690:	2b00      	cmp	r3, #0
    c692:	d011      	beq.n	c6b8 <mp_convert_member_lookup+0xc8>
            && (((mp_obj_base_t*)MP_OBJ_TO_PTR(member))->type->name == MP_QSTR_closure
    c694:	687b      	ldr	r3, [r7, #4]
    c696:	681b      	ldr	r3, [r3, #0]
    c698:	685b      	ldr	r3, [r3, #4]
    c69a:	2b63      	cmp	r3, #99	; 0x63
    c69c:	d004      	beq.n	c6a8 <mp_convert_member_lookup+0xb8>
                || ((mp_obj_base_t*)MP_OBJ_TO_PTR(member))->type->name == MP_QSTR_generator))) {
    c69e:	687b      	ldr	r3, [r7, #4]
    c6a0:	681b      	ldr	r3, [r3, #0]
    c6a2:	685b      	ldr	r3, [r3, #4]
    c6a4:	2b75      	cmp	r3, #117	; 0x75
    c6a6:	d107      	bne.n	c6b8 <mp_convert_member_lookup+0xc8>
            dest[0] = mp_obj_new_checked_fun(type, member);
        } else
        #endif
        {
            // return a bound method, with self being this object
            dest[0] = member;
    c6a8:	683b      	ldr	r3, [r7, #0]
    c6aa:	687a      	ldr	r2, [r7, #4]
    c6ac:	601a      	str	r2, [r3, #0]
            dest[1] = self;
    c6ae:	683b      	ldr	r3, [r7, #0]
    c6b0:	3304      	adds	r3, #4
    c6b2:	68fa      	ldr	r2, [r7, #12]
    c6b4:	601a      	str	r2, [r3, #0]
    c6b6:	e002      	b.n	c6be <mp_convert_member_lookup+0xce>
        }
    } else {
        // class member is a value, so just return that value
        dest[0] = member;
    c6b8:	683b      	ldr	r3, [r7, #0]
    c6ba:	687a      	ldr	r2, [r7, #4]
    c6bc:	601a      	str	r2, [r3, #0]
    }
}
    c6be:	bf00      	nop
    c6c0:	3710      	adds	r7, #16
    c6c2:	46bd      	mov	sp, r7
    c6c4:	bd80      	pop	{r7, pc}
    c6c6:	bf00      	nop
    c6c8:	000220ec 	.word	0x000220ec
    c6cc:	00022128 	.word	0x00022128
    c6d0:	00021ee0 	.word	0x00021ee0

0000c6d4 <mp_load_method_maybe>:

// no attribute found, returns:     dest[0] == MP_OBJ_NULL, dest[1] == MP_OBJ_NULL
// normal attribute found, returns: dest[0] == <attribute>, dest[1] == MP_OBJ_NULL
// method attribute found, returns: dest[0] == <method>,    dest[1] == <self>
void mp_load_method_maybe(mp_obj_t obj, qstr attr, mp_obj_t *dest) {
    c6d4:	b580      	push	{r7, lr}
    c6d6:	b088      	sub	sp, #32
    c6d8:	af00      	add	r7, sp, #0
    c6da:	60f8      	str	r0, [r7, #12]
    c6dc:	60b9      	str	r1, [r7, #8]
    c6de:	607a      	str	r2, [r7, #4]
    // clear output to indicate no attribute/method found yet
    dest[0] = MP_OBJ_NULL;
    c6e0:	687b      	ldr	r3, [r7, #4]
    c6e2:	2200      	movs	r2, #0
    c6e4:	601a      	str	r2, [r3, #0]
    dest[1] = MP_OBJ_NULL;
    c6e6:	687b      	ldr	r3, [r7, #4]
    c6e8:	3304      	adds	r3, #4
    c6ea:	2200      	movs	r2, #0
    c6ec:	601a      	str	r2, [r3, #0]

    // get the type
    mp_obj_type_t *type = mp_obj_get_type(obj);
    c6ee:	68f8      	ldr	r0, [r7, #12]
    c6f0:	f001 f82e 	bl	d750 <mp_obj_get_type>
    c6f4:	61f8      	str	r0, [r7, #28]
    } else if (attr == MP_QSTR___class__) {
        // a.__class__ is equivalent to type(a)
        dest[0] = MP_OBJ_FROM_PTR(type);
#endif

    } else if (attr == MP_QSTR___next__ && type->iternext != NULL) {
    c6f6:	68bb      	ldr	r3, [r7, #8]
    c6f8:	2b1d      	cmp	r3, #29
    c6fa:	d10b      	bne.n	c714 <mp_load_method_maybe+0x40>
    c6fc:	69fb      	ldr	r3, [r7, #28]
    c6fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    c700:	2b00      	cmp	r3, #0
    c702:	d007      	beq.n	c714 <mp_load_method_maybe+0x40>
        dest[0] = MP_OBJ_FROM_PTR(&mp_builtin_next_obj);
    c704:	687b      	ldr	r3, [r7, #4]
    c706:	4a1f      	ldr	r2, [pc, #124]	; (c784 <mp_load_method_maybe+0xb0>)
    c708:	601a      	str	r2, [r3, #0]
        dest[1] = obj;
    c70a:	687b      	ldr	r3, [r7, #4]
    c70c:	3304      	adds	r3, #4
    c70e:	68fa      	ldr	r2, [r7, #12]
    c710:	601a      	str	r2, [r3, #0]
        mp_map_elem_t *elem = mp_map_lookup(locals_map, MP_OBJ_NEW_QSTR(attr), MP_MAP_LOOKUP);
        if (elem != NULL) {
            mp_convert_member_lookup(obj, type, elem->value, dest);
        }
    }
}
    c712:	e033      	b.n	c77c <mp_load_method_maybe+0xa8>
    } else if (type->attr != NULL) {
    c714:	69fb      	ldr	r3, [r7, #28]
    c716:	69db      	ldr	r3, [r3, #28]
    c718:	2b00      	cmp	r3, #0
    c71a:	d006      	beq.n	c72a <mp_load_method_maybe+0x56>
        type->attr(obj, attr, dest);
    c71c:	69fb      	ldr	r3, [r7, #28]
    c71e:	69db      	ldr	r3, [r3, #28]
    c720:	687a      	ldr	r2, [r7, #4]
    c722:	68b9      	ldr	r1, [r7, #8]
    c724:	68f8      	ldr	r0, [r7, #12]
    c726:	4798      	blx	r3
}
    c728:	e028      	b.n	c77c <mp_load_method_maybe+0xa8>
    } else if (type->locals_dict != NULL) {
    c72a:	69fb      	ldr	r3, [r7, #28]
    c72c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    c72e:	2b00      	cmp	r3, #0
    c730:	d024      	beq.n	c77c <mp_load_method_maybe+0xa8>
        assert(type->locals_dict->base.type == &mp_type_dict); // MicroPython restriction, for now
    c732:	69fb      	ldr	r3, [r7, #28]
    c734:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    c736:	681b      	ldr	r3, [r3, #0]
    c738:	4a13      	ldr	r2, [pc, #76]	; (c788 <mp_load_method_maybe+0xb4>)
    c73a:	4293      	cmp	r3, r2
    c73c:	d006      	beq.n	c74c <mp_load_method_maybe+0x78>
    c73e:	4b13      	ldr	r3, [pc, #76]	; (c78c <mp_load_method_maybe+0xb8>)
    c740:	4a13      	ldr	r2, [pc, #76]	; (c790 <mp_load_method_maybe+0xbc>)
    c742:	f44f 6184 	mov.w	r1, #1056	; 0x420
    c746:	4813      	ldr	r0, [pc, #76]	; (c794 <mp_load_method_maybe+0xc0>)
    c748:	f00e fd38 	bl	1b1bc <__assert_func>
        mp_map_t *locals_map = &type->locals_dict->map;
    c74c:	69fb      	ldr	r3, [r7, #28]
    c74e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    c750:	3304      	adds	r3, #4
    c752:	61bb      	str	r3, [r7, #24]
        mp_map_elem_t *elem = mp_map_lookup(locals_map, MP_OBJ_NEW_QSTR(attr), MP_MAP_LOOKUP);
    c754:	68bb      	ldr	r3, [r7, #8]
    c756:	009b      	lsls	r3, r3, #2
    c758:	f043 0302 	orr.w	r3, r3, #2
    c75c:	2200      	movs	r2, #0
    c75e:	4619      	mov	r1, r3
    c760:	69b8      	ldr	r0, [r7, #24]
    c762:	f000 fe4b 	bl	d3fc <mp_map_lookup>
    c766:	6178      	str	r0, [r7, #20]
        if (elem != NULL) {
    c768:	697b      	ldr	r3, [r7, #20]
    c76a:	2b00      	cmp	r3, #0
    c76c:	d006      	beq.n	c77c <mp_load_method_maybe+0xa8>
            mp_convert_member_lookup(obj, type, elem->value, dest);
    c76e:	697b      	ldr	r3, [r7, #20]
    c770:	685a      	ldr	r2, [r3, #4]
    c772:	687b      	ldr	r3, [r7, #4]
    c774:	69f9      	ldr	r1, [r7, #28]
    c776:	68f8      	ldr	r0, [r7, #12]
    c778:	f7ff ff3a 	bl	c5f0 <mp_convert_member_lookup>
}
    c77c:	bf00      	nop
    c77e:	3720      	adds	r7, #32
    c780:	46bd      	mov	sp, r7
    c782:	bd80      	pop	{r7, pc}
    c784:	0002247c 	.word	0x0002247c
    c788:	0001fe68 	.word	0x0001fe68
    c78c:	0001f4e0 	.word	0x0001f4e0
    c790:	0001f67c 	.word	0x0001f67c
    c794:	0001f3f4 	.word	0x0001f3f4

0000c798 <mp_load_method>:

void mp_load_method(mp_obj_t base, qstr attr, mp_obj_t *dest) {
    c798:	b580      	push	{r7, lr}
    c79a:	b084      	sub	sp, #16
    c79c:	af00      	add	r7, sp, #0
    c79e:	60f8      	str	r0, [r7, #12]
    c7a0:	60b9      	str	r1, [r7, #8]
    c7a2:	607a      	str	r2, [r7, #4]
    DEBUG_OP_printf("load method %p.%s\n", base, qstr_str(attr));

    mp_load_method_maybe(base, attr, dest);
    c7a4:	687a      	ldr	r2, [r7, #4]
    c7a6:	68b9      	ldr	r1, [r7, #8]
    c7a8:	68f8      	ldr	r0, [r7, #12]
    c7aa:	f7ff ff93 	bl	c6d4 <mp_load_method_maybe>

    if (dest[0] == MP_OBJ_NULL) {
    c7ae:	687b      	ldr	r3, [r7, #4]
    c7b0:	681b      	ldr	r3, [r3, #0]
    c7b2:	2b00      	cmp	r3, #0
    c7b4:	d103      	bne.n	c7be <mp_load_method+0x26>
        // no attribute/method called attr
        if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
            mp_raise_msg(&mp_type_AttributeError, "no such attribute");
    c7b6:	4904      	ldr	r1, [pc, #16]	; (c7c8 <mp_load_method+0x30>)
    c7b8:	4804      	ldr	r0, [pc, #16]	; (c7cc <mp_load_method+0x34>)
    c7ba:	f000 fb91 	bl	cee0 <mp_raise_msg>
                    "'%s' object has no attribute '%q'",
                    mp_obj_get_type_str(base), attr));
            }
        }
    }
}
    c7be:	bf00      	nop
    c7c0:	3710      	adds	r7, #16
    c7c2:	46bd      	mov	sp, r7
    c7c4:	bd80      	pop	{r7, pc}
    c7c6:	bf00      	nop
    c7c8:	0001f510 	.word	0x0001f510
    c7cc:	000201d8 	.word	0x000201d8

0000c7d0 <mp_load_method_protected>:

// Acts like mp_load_method_maybe but catches AttributeError, and all other exceptions if requested
void mp_load_method_protected(mp_obj_t obj, qstr attr, mp_obj_t *dest, bool catch_all_exc) {
    c7d0:	b580      	push	{r7, lr}
    c7d2:	b090      	sub	sp, #64	; 0x40
    c7d4:	af00      	add	r7, sp, #0
    c7d6:	60f8      	str	r0, [r7, #12]
    c7d8:	60b9      	str	r1, [r7, #8]
    c7da:	607a      	str	r2, [r7, #4]
    c7dc:	70fb      	strb	r3, [r7, #3]
    nlr_buf_t nlr;
    if (nlr_push(&nlr) == 0) {
    c7de:	f107 0310 	add.w	r3, r7, #16
    c7e2:	4618      	mov	r0, r3
    c7e4:	f7f3 fd6a 	bl	2bc <nlr_push>
    c7e8:	4603      	mov	r3, r0
    c7ea:	2b00      	cmp	r3, #0
    c7ec:	d107      	bne.n	c7fe <mp_load_method_protected+0x2e>
        mp_load_method_maybe(obj, attr, dest);
    c7ee:	687a      	ldr	r2, [r7, #4]
    c7f0:	68b9      	ldr	r1, [r7, #8]
    c7f2:	68f8      	ldr	r0, [r7, #12]
    c7f4:	f7ff ff6e 	bl	c6d4 <mp_load_method_maybe>
        nlr_pop();
    c7f8:	f7f3 fd4e 	bl	298 <nlr_pop>
                MP_OBJ_FROM_PTR(&mp_type_AttributeError))) {
            // Re-raise the exception
            nlr_raise(MP_OBJ_FROM_PTR(nlr.ret_val));
        }
    }
}
    c7fc:	e015      	b.n	c82a <mp_load_method_protected+0x5a>
        if (!catch_all_exc
    c7fe:	78fb      	ldrb	r3, [r7, #3]
    c800:	f083 0301 	eor.w	r3, r3, #1
    c804:	b2db      	uxtb	r3, r3
    c806:	2b00      	cmp	r3, #0
    c808:	d00f      	beq.n	c82a <mp_load_method_protected+0x5a>
            && !mp_obj_is_subclass_fast(MP_OBJ_FROM_PTR(((mp_obj_base_t*)nlr.ret_val)->type),
    c80a:	697b      	ldr	r3, [r7, #20]
    c80c:	681b      	ldr	r3, [r3, #0]
    c80e:	4909      	ldr	r1, [pc, #36]	; (c834 <mp_load_method_protected+0x64>)
    c810:	4618      	mov	r0, r3
    c812:	f00a fc21 	bl	17058 <mp_obj_is_subclass_fast>
    c816:	4603      	mov	r3, r0
    c818:	f083 0301 	eor.w	r3, r3, #1
    c81c:	b2db      	uxtb	r3, r3
    c81e:	2b00      	cmp	r3, #0
    c820:	d003      	beq.n	c82a <mp_load_method_protected+0x5a>
            nlr_raise(MP_OBJ_FROM_PTR(nlr.ret_val));
    c822:	697b      	ldr	r3, [r7, #20]
    c824:	4618      	mov	r0, r3
    c826:	f7f3 fd5b 	bl	2e0 <nlr_jump>
}
    c82a:	bf00      	nop
    c82c:	3740      	adds	r7, #64	; 0x40
    c82e:	46bd      	mov	sp, r7
    c830:	bd80      	pop	{r7, pc}
    c832:	bf00      	nop
    c834:	000201d8 	.word	0x000201d8

0000c838 <mp_store_attr>:

void mp_store_attr(mp_obj_t base, qstr attr, mp_obj_t value) {
    c838:	b580      	push	{r7, lr}
    c83a:	b088      	sub	sp, #32
    c83c:	af00      	add	r7, sp, #0
    c83e:	60f8      	str	r0, [r7, #12]
    c840:	60b9      	str	r1, [r7, #8]
    c842:	607a      	str	r2, [r7, #4]
    DEBUG_OP_printf("store attr %p.%s <- %p\n", base, qstr_str(attr), value);
    mp_obj_type_t *type = mp_obj_get_type(base);
    c844:	68f8      	ldr	r0, [r7, #12]
    c846:	f000 ff83 	bl	d750 <mp_obj_get_type>
    c84a:	61f8      	str	r0, [r7, #28]
    if (type->attr != NULL) {
    c84c:	69fb      	ldr	r3, [r7, #28]
    c84e:	69db      	ldr	r3, [r3, #28]
    c850:	2b00      	cmp	r3, #0
    c852:	d00d      	beq.n	c870 <mp_store_attr+0x38>
        mp_obj_t dest[2] = {MP_OBJ_SENTINEL, value};
    c854:	2308      	movs	r3, #8
    c856:	617b      	str	r3, [r7, #20]
    c858:	687b      	ldr	r3, [r7, #4]
    c85a:	61bb      	str	r3, [r7, #24]
        type->attr(base, attr, dest);
    c85c:	69fb      	ldr	r3, [r7, #28]
    c85e:	69db      	ldr	r3, [r3, #28]
    c860:	f107 0214 	add.w	r2, r7, #20
    c864:	68b9      	ldr	r1, [r7, #8]
    c866:	68f8      	ldr	r0, [r7, #12]
    c868:	4798      	blx	r3
        if (dest[0] == MP_OBJ_NULL) {
    c86a:	697b      	ldr	r3, [r7, #20]
    c86c:	2b00      	cmp	r3, #0
    c86e:	d003      	beq.n	c878 <mp_store_attr+0x40>
            // success
            return;
        }
    }
    if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
        mp_raise_msg(&mp_type_AttributeError, "no such attribute");
    c870:	4903      	ldr	r1, [pc, #12]	; (c880 <mp_store_attr+0x48>)
    c872:	4804      	ldr	r0, [pc, #16]	; (c884 <mp_store_attr+0x4c>)
    c874:	f000 fb34 	bl	cee0 <mp_raise_msg>
            return;
    c878:	bf00      	nop
    } else {
        nlr_raise(mp_obj_new_exception_msg_varg(&mp_type_AttributeError,
            "'%s' object has no attribute '%q'",
            mp_obj_get_type_str(base), attr));
    }
}
    c87a:	3720      	adds	r7, #32
    c87c:	46bd      	mov	sp, r7
    c87e:	bd80      	pop	{r7, pc}
    c880:	0001f510 	.word	0x0001f510
    c884:	000201d8 	.word	0x000201d8

0000c888 <mp_getiter>:

mp_obj_t mp_getiter(mp_obj_t o_in, mp_obj_iter_buf_t *iter_buf) {
    c888:	b580      	push	{r7, lr}
    c88a:	b086      	sub	sp, #24
    c88c:	af00      	add	r7, sp, #0
    c88e:	6078      	str	r0, [r7, #4]
    c890:	6039      	str	r1, [r7, #0]
    assert(o_in);
    c892:	687b      	ldr	r3, [r7, #4]
    c894:	2b00      	cmp	r3, #0
    c896:	d106      	bne.n	c8a6 <mp_getiter+0x1e>
    c898:	4b20      	ldr	r3, [pc, #128]	; (c91c <mp_getiter+0x94>)
    c89a:	4a21      	ldr	r2, [pc, #132]	; (c920 <mp_getiter+0x98>)
    c89c:	f240 4166 	movw	r1, #1126	; 0x466
    c8a0:	4820      	ldr	r0, [pc, #128]	; (c924 <mp_getiter+0x9c>)
    c8a2:	f00e fc8b 	bl	1b1bc <__assert_func>
    mp_obj_type_t *type = mp_obj_get_type(o_in);
    c8a6:	6878      	ldr	r0, [r7, #4]
    c8a8:	f000 ff52 	bl	d750 <mp_obj_get_type>
    c8ac:	6178      	str	r0, [r7, #20]

    // Check for native getiter which is the identity.  We handle this case explicitly
    // so we don't unnecessarily allocate any RAM for the iter_buf, which won't be used.
    if (type->getiter == mp_identity_getiter) {
    c8ae:	697b      	ldr	r3, [r7, #20]
    c8b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    c8b2:	4a1d      	ldr	r2, [pc, #116]	; (c928 <mp_getiter+0xa0>)
    c8b4:	4293      	cmp	r3, r2
    c8b6:	d101      	bne.n	c8bc <mp_getiter+0x34>
        return o_in;
    c8b8:	687b      	ldr	r3, [r7, #4]
    c8ba:	e02a      	b.n	c912 <mp_getiter+0x8a>
    }

    // if caller did not provide a buffer then allocate one on the heap
    if (iter_buf == NULL) {
    c8bc:	683b      	ldr	r3, [r7, #0]
    c8be:	2b00      	cmp	r3, #0
    c8c0:	d103      	bne.n	c8ca <mp_getiter+0x42>
        iter_buf = m_new_obj(mp_obj_iter_buf_t);
    c8c2:	2010      	movs	r0, #16
    c8c4:	f7f3 fd2a 	bl	31c <m_malloc>
    c8c8:	6038      	str	r0, [r7, #0]
    }

    // check for native getiter (corresponds to __iter__)
    if (type->getiter != NULL) {
    c8ca:	697b      	ldr	r3, [r7, #20]
    c8cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    c8ce:	2b00      	cmp	r3, #0
    c8d0:	d00a      	beq.n	c8e8 <mp_getiter+0x60>
        mp_obj_t iter = type->getiter(o_in, iter_buf);
    c8d2:	697b      	ldr	r3, [r7, #20]
    c8d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    c8d6:	6839      	ldr	r1, [r7, #0]
    c8d8:	6878      	ldr	r0, [r7, #4]
    c8da:	4798      	blx	r3
    c8dc:	6138      	str	r0, [r7, #16]
        if (iter != MP_OBJ_NULL) {
    c8de:	693b      	ldr	r3, [r7, #16]
    c8e0:	2b00      	cmp	r3, #0
    c8e2:	d001      	beq.n	c8e8 <mp_getiter+0x60>
            return iter;
    c8e4:	693b      	ldr	r3, [r7, #16]
    c8e6:	e014      	b.n	c912 <mp_getiter+0x8a>
        }
    }

    // check for __getitem__
    mp_obj_t dest[2];
    mp_load_method_maybe(o_in, MP_QSTR___getitem__, dest);
    c8e8:	f107 0308 	add.w	r3, r7, #8
    c8ec:	461a      	mov	r2, r3
    c8ee:	210e      	movs	r1, #14
    c8f0:	6878      	ldr	r0, [r7, #4]
    c8f2:	f7ff feef 	bl	c6d4 <mp_load_method_maybe>
    if (dest[0] != MP_OBJ_NULL) {
    c8f6:	68bb      	ldr	r3, [r7, #8]
    c8f8:	2b00      	cmp	r3, #0
    c8fa:	d007      	beq.n	c90c <mp_getiter+0x84>
        // __getitem__ exists, create and return an iterator
        return mp_obj_new_getitem_iter(dest, iter_buf);
    c8fc:	f107 0308 	add.w	r3, r7, #8
    c900:	6839      	ldr	r1, [r7, #0]
    c902:	4618      	mov	r0, r3
    c904:	f003 fce8 	bl	102d8 <mp_obj_new_getitem_iter>
    c908:	4603      	mov	r3, r0
    c90a:	e002      	b.n	c912 <mp_getiter+0x8a>
    }

    // object not iterable
    if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
        mp_raise_TypeError("object not iterable");
    c90c:	4807      	ldr	r0, [pc, #28]	; (c92c <mp_getiter+0xa4>)
    c90e:	f000 fb09 	bl	cf24 <mp_raise_TypeError>
    } else {
        nlr_raise(mp_obj_new_exception_msg_varg(&mp_type_TypeError,
            "'%s' object is not iterable", mp_obj_get_type_str(o_in)));
    }
}
    c912:	4618      	mov	r0, r3
    c914:	3718      	adds	r7, #24
    c916:	46bd      	mov	sp, r7
    c918:	bd80      	pop	{r7, pc}
    c91a:	bf00      	nop
    c91c:	0001f524 	.word	0x0001f524
    c920:	0001f694 	.word	0x0001f694
    c924:	0001f3f4 	.word	0x0001f3f4
    c928:	0000df0f 	.word	0x0000df0f
    c92c:	0001f52c 	.word	0x0001f52c

0000c930 <mp_iternext_allow_raise>:

// may return MP_OBJ_STOP_ITERATION as an optimisation instead of raise StopIteration()
// may also raise StopIteration()
mp_obj_t mp_iternext_allow_raise(mp_obj_t o_in) {
    c930:	b580      	push	{r7, lr}
    c932:	b086      	sub	sp, #24
    c934:	af00      	add	r7, sp, #0
    c936:	6078      	str	r0, [r7, #4]
    mp_obj_type_t *type = mp_obj_get_type(o_in);
    c938:	6878      	ldr	r0, [r7, #4]
    c93a:	f000 ff09 	bl	d750 <mp_obj_get_type>
    c93e:	6178      	str	r0, [r7, #20]
    if (type->iternext != NULL) {
    c940:	697b      	ldr	r3, [r7, #20]
    c942:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    c944:	2b00      	cmp	r3, #0
    c946:	d005      	beq.n	c954 <mp_iternext_allow_raise+0x24>
        return type->iternext(o_in);
    c948:	697b      	ldr	r3, [r7, #20]
    c94a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    c94c:	6878      	ldr	r0, [r7, #4]
    c94e:	4798      	blx	r3
    c950:	4603      	mov	r3, r0
    c952:	e015      	b.n	c980 <mp_iternext_allow_raise+0x50>
    } else {
        // check for __next__ method
        mp_obj_t dest[2];
        mp_load_method_maybe(o_in, MP_QSTR___next__, dest);
    c954:	f107 030c 	add.w	r3, r7, #12
    c958:	461a      	mov	r2, r3
    c95a:	211d      	movs	r1, #29
    c95c:	6878      	ldr	r0, [r7, #4]
    c95e:	f7ff feb9 	bl	c6d4 <mp_load_method_maybe>
        if (dest[0] != MP_OBJ_NULL) {
    c962:	68fb      	ldr	r3, [r7, #12]
    c964:	2b00      	cmp	r3, #0
    c966:	d008      	beq.n	c97a <mp_iternext_allow_raise+0x4a>
            // __next__ exists, call it and return its result
            return mp_call_method_n_kw(0, 0, dest);
    c968:	f107 030c 	add.w	r3, r7, #12
    c96c:	461a      	mov	r2, r3
    c96e:	2100      	movs	r1, #0
    c970:	2000      	movs	r0, #0
    c972:	f7ff fa39 	bl	bde8 <mp_call_method_n_kw>
    c976:	4603      	mov	r3, r0
    c978:	e002      	b.n	c980 <mp_iternext_allow_raise+0x50>
        } else {
            if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
                mp_raise_TypeError("object not an iterator");
    c97a:	4803      	ldr	r0, [pc, #12]	; (c988 <mp_iternext_allow_raise+0x58>)
    c97c:	f000 fad2 	bl	cf24 <mp_raise_TypeError>
                nlr_raise(mp_obj_new_exception_msg_varg(&mp_type_TypeError,
                    "'%s' object is not an iterator", mp_obj_get_type_str(o_in)));
            }
        }
    }
}
    c980:	4618      	mov	r0, r3
    c982:	3718      	adds	r7, #24
    c984:	46bd      	mov	sp, r7
    c986:	bd80      	pop	{r7, pc}
    c988:	0001f540 	.word	0x0001f540

0000c98c <mp_iternext>:

// will always return MP_OBJ_STOP_ITERATION instead of raising StopIteration() (or any subclass thereof)
// may raise other exceptions
mp_obj_t mp_iternext(mp_obj_t o_in) {
    c98c:	b580      	push	{r7, lr}
    c98e:	b092      	sub	sp, #72	; 0x48
    c990:	af00      	add	r7, sp, #0
    c992:	6078      	str	r0, [r7, #4]
    MP_STACK_CHECK(); // enumerate, filter, map and zip can recursively call mp_iternext
    mp_obj_type_t *type = mp_obj_get_type(o_in);
    c994:	6878      	ldr	r0, [r7, #4]
    c996:	f000 fedb 	bl	d750 <mp_obj_get_type>
    c99a:	6478      	str	r0, [r7, #68]	; 0x44
    if (type->iternext != NULL) {
    c99c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    c99e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    c9a0:	2b00      	cmp	r3, #0
    c9a2:	d005      	beq.n	c9b0 <mp_iternext+0x24>
        return type->iternext(o_in);
    c9a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    c9a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    c9a8:	6878      	ldr	r0, [r7, #4]
    c9aa:	4798      	blx	r3
    c9ac:	4603      	mov	r3, r0
    c9ae:	e02f      	b.n	ca10 <mp_iternext+0x84>
    } else {
        // check for __next__ method
        mp_obj_t dest[2];
        mp_load_method_maybe(o_in, MP_QSTR___next__, dest);
    c9b0:	f107 0338 	add.w	r3, r7, #56	; 0x38
    c9b4:	461a      	mov	r2, r3
    c9b6:	211d      	movs	r1, #29
    c9b8:	6878      	ldr	r0, [r7, #4]
    c9ba:	f7ff fe8b 	bl	c6d4 <mp_load_method_maybe>
        if (dest[0] != MP_OBJ_NULL) {
    c9be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    c9c0:	2b00      	cmp	r3, #0
    c9c2:	d022      	beq.n	ca0a <mp_iternext+0x7e>
            // __next__ exists, call it and return its result
            nlr_buf_t nlr;
            if (nlr_push(&nlr) == 0) {
    c9c4:	f107 0308 	add.w	r3, r7, #8
    c9c8:	4618      	mov	r0, r3
    c9ca:	f7f3 fc77 	bl	2bc <nlr_push>
    c9ce:	4603      	mov	r3, r0
    c9d0:	2b00      	cmp	r3, #0
    c9d2:	d10b      	bne.n	c9ec <mp_iternext+0x60>
                mp_obj_t ret = mp_call_method_n_kw(0, 0, dest);
    c9d4:	f107 0338 	add.w	r3, r7, #56	; 0x38
    c9d8:	461a      	mov	r2, r3
    c9da:	2100      	movs	r1, #0
    c9dc:	2000      	movs	r0, #0
    c9de:	f7ff fa03 	bl	bde8 <mp_call_method_n_kw>
    c9e2:	6438      	str	r0, [r7, #64]	; 0x40
                nlr_pop();
    c9e4:	f7f3 fc58 	bl	298 <nlr_pop>
                return ret;
    c9e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    c9ea:	e011      	b.n	ca10 <mp_iternext+0x84>
            } else {
                if (mp_obj_is_subclass_fast(MP_OBJ_FROM_PTR(((mp_obj_base_t*)nlr.ret_val)->type), MP_OBJ_FROM_PTR(&mp_type_StopIteration))) {
    c9ec:	68fb      	ldr	r3, [r7, #12]
    c9ee:	681b      	ldr	r3, [r3, #0]
    c9f0:	4909      	ldr	r1, [pc, #36]	; (ca18 <mp_iternext+0x8c>)
    c9f2:	4618      	mov	r0, r3
    c9f4:	f00a fb30 	bl	17058 <mp_obj_is_subclass_fast>
    c9f8:	4603      	mov	r3, r0
    c9fa:	2b00      	cmp	r3, #0
    c9fc:	d001      	beq.n	ca02 <mp_iternext+0x76>
                    return MP_OBJ_STOP_ITERATION;
    c9fe:	2304      	movs	r3, #4
    ca00:	e006      	b.n	ca10 <mp_iternext+0x84>
                } else {
                    nlr_jump(nlr.ret_val);
    ca02:	68fb      	ldr	r3, [r7, #12]
    ca04:	4618      	mov	r0, r3
    ca06:	f7f3 fc6b 	bl	2e0 <nlr_jump>
                }
            }
        } else {
            if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
                mp_raise_TypeError("object not an iterator");
    ca0a:	4804      	ldr	r0, [pc, #16]	; (ca1c <mp_iternext+0x90>)
    ca0c:	f000 fa8a 	bl	cf24 <mp_raise_TypeError>
                nlr_raise(mp_obj_new_exception_msg_varg(&mp_type_TypeError,
                    "'%s' object is not an iterator", mp_obj_get_type_str(o_in)));
            }
        }
    }
}
    ca10:	4618      	mov	r0, r3
    ca12:	3748      	adds	r7, #72	; 0x48
    ca14:	46bd      	mov	sp, r7
    ca16:	bd80      	pop	{r7, pc}
    ca18:	000200ac 	.word	0x000200ac
    ca1c:	0001f540 	.word	0x0001f540

0000ca20 <mp_resume>:

// TODO: Unclear what to do with StopIterarion exception here.
mp_vm_return_kind_t mp_resume(mp_obj_t self_in, mp_obj_t send_value, mp_obj_t throw_value, mp_obj_t *ret_val) {
    ca20:	b580      	push	{r7, lr}
    ca22:	b096      	sub	sp, #88	; 0x58
    ca24:	af00      	add	r7, sp, #0
    ca26:	60f8      	str	r0, [r7, #12]
    ca28:	60b9      	str	r1, [r7, #8]
    ca2a:	607a      	str	r2, [r7, #4]
    ca2c:	603b      	str	r3, [r7, #0]
    assert((send_value != MP_OBJ_NULL) ^ (throw_value != MP_OBJ_NULL));
    ca2e:	68bb      	ldr	r3, [r7, #8]
    ca30:	2b00      	cmp	r3, #0
    ca32:	bf14      	ite	ne
    ca34:	2301      	movne	r3, #1
    ca36:	2300      	moveq	r3, #0
    ca38:	b2da      	uxtb	r2, r3
    ca3a:	687b      	ldr	r3, [r7, #4]
    ca3c:	2b00      	cmp	r3, #0
    ca3e:	bf14      	ite	ne
    ca40:	2301      	movne	r3, #1
    ca42:	2300      	moveq	r3, #0
    ca44:	b2db      	uxtb	r3, r3
    ca46:	4053      	eors	r3, r2
    ca48:	b2db      	uxtb	r3, r3
    ca4a:	2b00      	cmp	r3, #0
    ca4c:	d106      	bne.n	ca5c <mp_resume+0x3c>
    ca4e:	4b5e      	ldr	r3, [pc, #376]	; (cbc8 <mp_resume+0x1a8>)
    ca50:	4a5e      	ldr	r2, [pc, #376]	; (cbcc <mp_resume+0x1ac>)
    ca52:	f240 41cb 	movw	r1, #1227	; 0x4cb
    ca56:	485e      	ldr	r0, [pc, #376]	; (cbd0 <mp_resume+0x1b0>)
    ca58:	f00e fbb0 	bl	1b1bc <__assert_func>
    mp_obj_type_t *type = mp_obj_get_type(self_in);
    ca5c:	68f8      	ldr	r0, [r7, #12]
    ca5e:	f000 fe77 	bl	d750 <mp_obj_get_type>
    ca62:	6578      	str	r0, [r7, #84]	; 0x54

    if (type == &mp_type_gen_instance) {
    ca64:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    ca66:	4a5b      	ldr	r2, [pc, #364]	; (cbd4 <mp_resume+0x1b4>)
    ca68:	4293      	cmp	r3, r2
    ca6a:	d107      	bne.n	ca7c <mp_resume+0x5c>
        return mp_obj_gen_resume(self_in, send_value, throw_value, ret_val);
    ca6c:	683b      	ldr	r3, [r7, #0]
    ca6e:	687a      	ldr	r2, [r7, #4]
    ca70:	68b9      	ldr	r1, [r7, #8]
    ca72:	68f8      	ldr	r0, [r7, #12]
    ca74:	f003 fa44 	bl	ff00 <mp_obj_gen_resume>
    ca78:	4603      	mov	r3, r0
    ca7a:	e0a1      	b.n	cbc0 <mp_resume+0x1a0>
    }

    if (type->iternext != NULL && send_value == mp_const_none) {
    ca7c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    ca7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    ca80:	2b00      	cmp	r3, #0
    ca82:	d012      	beq.n	caaa <mp_resume+0x8a>
    ca84:	68bb      	ldr	r3, [r7, #8]
    ca86:	4a54      	ldr	r2, [pc, #336]	; (cbd8 <mp_resume+0x1b8>)
    ca88:	4293      	cmp	r3, r2
    ca8a:	d10e      	bne.n	caaa <mp_resume+0x8a>
        mp_obj_t ret = type->iternext(self_in);
    ca8c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    ca8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    ca90:	68f8      	ldr	r0, [r7, #12]
    ca92:	4798      	blx	r3
    ca94:	6538      	str	r0, [r7, #80]	; 0x50
        *ret_val = ret;
    ca96:	683b      	ldr	r3, [r7, #0]
    ca98:	6d3a      	ldr	r2, [r7, #80]	; 0x50
    ca9a:	601a      	str	r2, [r3, #0]
        if (ret != MP_OBJ_STOP_ITERATION) {
    ca9c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    ca9e:	2b04      	cmp	r3, #4
    caa0:	d001      	beq.n	caa6 <mp_resume+0x86>
            return MP_VM_RETURN_YIELD;
    caa2:	2301      	movs	r3, #1
    caa4:	e08c      	b.n	cbc0 <mp_resume+0x1a0>
        } else {
            // Emulate raise StopIteration()
            // Special case, handled in vm.c
            return MP_VM_RETURN_NORMAL;
    caa6:	2300      	movs	r3, #0
    caa8:	e08a      	b.n	cbc0 <mp_resume+0x1a0>
    }

    mp_obj_t dest[3]; // Reserve slot for send() arg

    // Python instance iterator protocol
    if (send_value == mp_const_none) {
    caaa:	68bb      	ldr	r3, [r7, #8]
    caac:	4a4a      	ldr	r2, [pc, #296]	; (cbd8 <mp_resume+0x1b8>)
    caae:	4293      	cmp	r3, r2
    cab0:	d124      	bne.n	cafc <mp_resume+0xdc>
        mp_load_method_maybe(self_in, MP_QSTR___next__, dest);
    cab2:	f107 0344 	add.w	r3, r7, #68	; 0x44
    cab6:	461a      	mov	r2, r3
    cab8:	211d      	movs	r1, #29
    caba:	68f8      	ldr	r0, [r7, #12]
    cabc:	f7ff fe0a 	bl	c6d4 <mp_load_method_maybe>
        if (dest[0] != MP_OBJ_NULL) {
    cac0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    cac2:	2b00      	cmp	r3, #0
    cac4:	d01a      	beq.n	cafc <mp_resume+0xdc>
            nlr_buf_t nlr;
            if (nlr_push(&nlr) == 0) {
    cac6:	f107 0314 	add.w	r3, r7, #20
    caca:	4618      	mov	r0, r3
    cacc:	f7f3 fbf6 	bl	2bc <nlr_push>
    cad0:	4603      	mov	r3, r0
    cad2:	2b00      	cmp	r3, #0
    cad4:	d10d      	bne.n	caf2 <mp_resume+0xd2>
                *ret_val = mp_call_method_n_kw(0, 0, dest);
    cad6:	f107 0344 	add.w	r3, r7, #68	; 0x44
    cada:	461a      	mov	r2, r3
    cadc:	2100      	movs	r1, #0
    cade:	2000      	movs	r0, #0
    cae0:	f7ff f982 	bl	bde8 <mp_call_method_n_kw>
    cae4:	4602      	mov	r2, r0
    cae6:	683b      	ldr	r3, [r7, #0]
    cae8:	601a      	str	r2, [r3, #0]
                nlr_pop();
    caea:	f7f3 fbd5 	bl	298 <nlr_pop>
                return MP_VM_RETURN_YIELD;
    caee:	2301      	movs	r3, #1
    caf0:	e066      	b.n	cbc0 <mp_resume+0x1a0>
            } else {
                *ret_val = MP_OBJ_FROM_PTR(nlr.ret_val);
    caf2:	69ba      	ldr	r2, [r7, #24]
    caf4:	683b      	ldr	r3, [r7, #0]
    caf6:	601a      	str	r2, [r3, #0]
                return MP_VM_RETURN_EXCEPTION;
    caf8:	2302      	movs	r3, #2
    cafa:	e061      	b.n	cbc0 <mp_resume+0x1a0>
        }
    }

    // Either python instance generator protocol, or native object
    // generator protocol.
    if (send_value != MP_OBJ_NULL) {
    cafc:	68bb      	ldr	r3, [r7, #8]
    cafe:	2b00      	cmp	r3, #0
    cb00:	d014      	beq.n	cb2c <mp_resume+0x10c>
        mp_load_method(self_in, MP_QSTR_send, dest);
    cb02:	f107 0344 	add.w	r3, r7, #68	; 0x44
    cb06:	461a      	mov	r2, r3
    cb08:	21ad      	movs	r1, #173	; 0xad
    cb0a:	68f8      	ldr	r0, [r7, #12]
    cb0c:	f7ff fe44 	bl	c798 <mp_load_method>
        dest[2] = send_value;
    cb10:	68bb      	ldr	r3, [r7, #8]
    cb12:	64fb      	str	r3, [r7, #76]	; 0x4c
        // TODO: This should have exception wrapping like __next__ case
        // above. Not done right away to think how to optimize native
        // generators better, see:
        // https://github.com/micropython/micropython/issues/2628
        *ret_val = mp_call_method_n_kw(1, 0, dest);
    cb14:	f107 0344 	add.w	r3, r7, #68	; 0x44
    cb18:	461a      	mov	r2, r3
    cb1a:	2100      	movs	r1, #0
    cb1c:	2001      	movs	r0, #1
    cb1e:	f7ff f963 	bl	bde8 <mp_call_method_n_kw>
    cb22:	4602      	mov	r2, r0
    cb24:	683b      	ldr	r3, [r7, #0]
    cb26:	601a      	str	r2, [r3, #0]
        return MP_VM_RETURN_YIELD;
    cb28:	2301      	movs	r3, #1
    cb2a:	e049      	b.n	cbc0 <mp_resume+0x1a0>
    }

    assert(throw_value != MP_OBJ_NULL);
    cb2c:	687b      	ldr	r3, [r7, #4]
    cb2e:	2b00      	cmp	r3, #0
    cb30:	d106      	bne.n	cb40 <mp_resume+0x120>
    cb32:	4b2a      	ldr	r3, [pc, #168]	; (cbdc <mp_resume+0x1bc>)
    cb34:	4a25      	ldr	r2, [pc, #148]	; (cbcc <mp_resume+0x1ac>)
    cb36:	f240 41fd 	movw	r1, #1277	; 0x4fd
    cb3a:	4825      	ldr	r0, [pc, #148]	; (cbd0 <mp_resume+0x1b0>)
    cb3c:	f00e fb3e 	bl	1b1bc <__assert_func>
    {
        if (mp_obj_is_subclass_fast(MP_OBJ_FROM_PTR(mp_obj_get_type(throw_value)), MP_OBJ_FROM_PTR(&mp_type_GeneratorExit))) {
    cb40:	6878      	ldr	r0, [r7, #4]
    cb42:	f000 fe05 	bl	d750 <mp_obj_get_type>
    cb46:	4603      	mov	r3, r0
    cb48:	4925      	ldr	r1, [pc, #148]	; (cbe0 <mp_resume+0x1c0>)
    cb4a:	4618      	mov	r0, r3
    cb4c:	f00a fa84 	bl	17058 <mp_obj_is_subclass_fast>
    cb50:	4603      	mov	r3, r0
    cb52:	2b00      	cmp	r3, #0
    cb54:	d015      	beq.n	cb82 <mp_resume+0x162>
            mp_load_method_maybe(self_in, MP_QSTR_close, dest);
    cb56:	f107 0344 	add.w	r3, r7, #68	; 0x44
    cb5a:	461a      	mov	r2, r3
    cb5c:	2162      	movs	r1, #98	; 0x62
    cb5e:	68f8      	ldr	r0, [r7, #12]
    cb60:	f7ff fdb8 	bl	c6d4 <mp_load_method_maybe>
            if (dest[0] != MP_OBJ_NULL) {
    cb64:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    cb66:	2b00      	cmp	r3, #0
    cb68:	d023      	beq.n	cbb2 <mp_resume+0x192>
                // TODO: Exceptions raised in close() are not propagated,
                // printed to sys.stderr
                *ret_val = mp_call_method_n_kw(0, 0, dest);
    cb6a:	f107 0344 	add.w	r3, r7, #68	; 0x44
    cb6e:	461a      	mov	r2, r3
    cb70:	2100      	movs	r1, #0
    cb72:	2000      	movs	r0, #0
    cb74:	f7ff f938 	bl	bde8 <mp_call_method_n_kw>
    cb78:	4602      	mov	r2, r0
    cb7a:	683b      	ldr	r3, [r7, #0]
    cb7c:	601a      	str	r2, [r3, #0]
                // We assume one can't "yield" from close()
                return MP_VM_RETURN_NORMAL;
    cb7e:	2300      	movs	r3, #0
    cb80:	e01e      	b.n	cbc0 <mp_resume+0x1a0>
            }
        } else {
            mp_load_method_maybe(self_in, MP_QSTR_throw, dest);
    cb82:	f107 0344 	add.w	r3, r7, #68	; 0x44
    cb86:	461a      	mov	r2, r3
    cb88:	21bd      	movs	r1, #189	; 0xbd
    cb8a:	68f8      	ldr	r0, [r7, #12]
    cb8c:	f7ff fda2 	bl	c6d4 <mp_load_method_maybe>
            if (dest[0] != MP_OBJ_NULL) {
    cb90:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    cb92:	2b00      	cmp	r3, #0
    cb94:	d00d      	beq.n	cbb2 <mp_resume+0x192>
                dest[2] = throw_value;
    cb96:	687b      	ldr	r3, [r7, #4]
    cb98:	64fb      	str	r3, [r7, #76]	; 0x4c
                *ret_val = mp_call_method_n_kw(1, 0, dest);
    cb9a:	f107 0344 	add.w	r3, r7, #68	; 0x44
    cb9e:	461a      	mov	r2, r3
    cba0:	2100      	movs	r1, #0
    cba2:	2001      	movs	r0, #1
    cba4:	f7ff f920 	bl	bde8 <mp_call_method_n_kw>
    cba8:	4602      	mov	r2, r0
    cbaa:	683b      	ldr	r3, [r7, #0]
    cbac:	601a      	str	r2, [r3, #0]
                // If .throw() method returned, we assume it's value to yield
                // - any exception would be thrown with nlr_raise().
                return MP_VM_RETURN_YIELD;
    cbae:	2301      	movs	r3, #1
    cbb0:	e006      	b.n	cbc0 <mp_resume+0x1a0>
        // If there's nowhere to throw exception into, then we assume that object
        // is just incapable to handle it, so any exception thrown into it
        // will be propagated up. This behavior is approved by test_pep380.py
        // test_delegation_of_close_to_non_generator(),
        //  test_delegating_throw_to_non_generator()
        *ret_val = mp_make_raise_obj(throw_value);
    cbb2:	6878      	ldr	r0, [r7, #4]
    cbb4:	f000 f816 	bl	cbe4 <mp_make_raise_obj>
    cbb8:	4602      	mov	r2, r0
    cbba:	683b      	ldr	r3, [r7, #0]
    cbbc:	601a      	str	r2, [r3, #0]
        return MP_VM_RETURN_EXCEPTION;
    cbbe:	2302      	movs	r3, #2
    }
}
    cbc0:	4618      	mov	r0, r3
    cbc2:	3758      	adds	r7, #88	; 0x58
    cbc4:	46bd      	mov	sp, r7
    cbc6:	bd80      	pop	{r7, pc}
    cbc8:	0001f558 	.word	0x0001f558
    cbcc:	0001f6a0 	.word	0x0001f6a0
    cbd0:	0001f3f4 	.word	0x0001f3f4
    cbd4:	00020bbc 	.word	0x00020bbc
    cbd8:	000212b4 	.word	0x000212b4
    cbdc:	0001f594 	.word	0x0001f594
    cbe0:	00020034 	.word	0x00020034

0000cbe4 <mp_make_raise_obj>:

mp_obj_t mp_make_raise_obj(mp_obj_t o) {
    cbe4:	b580      	push	{r7, lr}
    cbe6:	b082      	sub	sp, #8
    cbe8:	af00      	add	r7, sp, #0
    cbea:	6078      	str	r0, [r7, #4]
    DEBUG_printf("raise %p\n", o);
    if (mp_obj_is_exception_type(o)) {
    cbec:	6878      	ldr	r0, [r7, #4]
    cbee:	f002 fcff 	bl	f5f0 <mp_obj_is_exception_type>
    cbf2:	4603      	mov	r3, r0
    cbf4:	2b00      	cmp	r3, #0
    cbf6:	d007      	beq.n	cc08 <mp_make_raise_obj+0x24>
        // o is an exception type (it is derived from BaseException (or is BaseException))
        // create and return a new exception instance by calling o
        // TODO could have an option to disable traceback, then builtin exceptions (eg TypeError)
        // could have const instances in ROM which we return here instead
        return mp_call_function_n_kw(o, 0, 0, NULL);
    cbf8:	2300      	movs	r3, #0
    cbfa:	2200      	movs	r2, #0
    cbfc:	2100      	movs	r1, #0
    cbfe:	6878      	ldr	r0, [r7, #4]
    cc00:	f7ff f8d1 	bl	bda6 <mp_call_function_n_kw>
    cc04:	4603      	mov	r3, r0
    cc06:	e00c      	b.n	cc22 <mp_make_raise_obj+0x3e>
    } else if (mp_obj_is_exception_instance(o)) {
    cc08:	6878      	ldr	r0, [r7, #4]
    cc0a:	f002 fd19 	bl	f640 <mp_obj_is_exception_instance>
    cc0e:	4603      	mov	r3, r0
    cc10:	2b00      	cmp	r3, #0
    cc12:	d001      	beq.n	cc18 <mp_make_raise_obj+0x34>
        // o is an instance of an exception, so use it as the exception
        return o;
    cc14:	687b      	ldr	r3, [r7, #4]
    cc16:	e004      	b.n	cc22 <mp_make_raise_obj+0x3e>
    } else {
        // o cannot be used as an exception, so return a type error (which will be raised by the caller)
        return mp_obj_new_exception_msg(&mp_type_TypeError, "exceptions must derive from BaseException");
    cc18:	4904      	ldr	r1, [pc, #16]	; (cc2c <mp_make_raise_obj+0x48>)
    cc1a:	4805      	ldr	r0, [pc, #20]	; (cc30 <mp_make_raise_obj+0x4c>)
    cc1c:	f002 fbea 	bl	f3f4 <mp_obj_new_exception_msg>
    cc20:	4603      	mov	r3, r0
    }
}
    cc22:	4618      	mov	r0, r3
    cc24:	3708      	adds	r7, #8
    cc26:	46bd      	mov	sp, r7
    cc28:	bd80      	pop	{r7, pc}
    cc2a:	bf00      	nop
    cc2c:	0001f5b0 	.word	0x0001f5b0
    cc30:	000204e4 	.word	0x000204e4

0000cc34 <mp_import_name>:

mp_obj_t mp_import_name(qstr name, mp_obj_t fromlist, mp_obj_t level) {
    cc34:	b580      	push	{r7, lr}
    cc36:	b08a      	sub	sp, #40	; 0x28
    cc38:	af00      	add	r7, sp, #0
    cc3a:	60f8      	str	r0, [r7, #12]
    cc3c:	60b9      	str	r1, [r7, #8]
    cc3e:	607a      	str	r2, [r7, #4]
    DEBUG_printf("import name '%s' level=%d\n", qstr_str(name), MP_OBJ_SMALL_INT_VALUE(level));

    // build args array
    mp_obj_t args[5];
    args[0] = MP_OBJ_NEW_QSTR(name);
    cc40:	68fb      	ldr	r3, [r7, #12]
    cc42:	009b      	lsls	r3, r3, #2
    cc44:	f043 0302 	orr.w	r3, r3, #2
    cc48:	617b      	str	r3, [r7, #20]
    args[1] = mp_const_none; // TODO should be globals
    cc4a:	4b09      	ldr	r3, [pc, #36]	; (cc70 <mp_import_name+0x3c>)
    cc4c:	61bb      	str	r3, [r7, #24]
    args[2] = mp_const_none; // TODO should be locals
    cc4e:	4b08      	ldr	r3, [pc, #32]	; (cc70 <mp_import_name+0x3c>)
    cc50:	61fb      	str	r3, [r7, #28]
    args[3] = fromlist;
    cc52:	68bb      	ldr	r3, [r7, #8]
    cc54:	623b      	str	r3, [r7, #32]
    args[4] = level; // must be 0; we don't yet support other values
    cc56:	687b      	ldr	r3, [r7, #4]
    cc58:	627b      	str	r3, [r7, #36]	; 0x24

    // TODO lookup __import__ and call that instead of going straight to builtin implementation
    return mp_builtin___import__(5, args);
    cc5a:	f107 0314 	add.w	r3, r7, #20
    cc5e:	4619      	mov	r1, r3
    cc60:	2005      	movs	r0, #5
    cc62:	f00b fc4e 	bl	18502 <mp_builtin___import__>
    cc66:	4603      	mov	r3, r0
}
    cc68:	4618      	mov	r0, r3
    cc6a:	3728      	adds	r7, #40	; 0x28
    cc6c:	46bd      	mov	sp, r7
    cc6e:	bd80      	pop	{r7, pc}
    cc70:	000212b4 	.word	0x000212b4

0000cc74 <mp_import_from>:

mp_obj_t mp_import_from(mp_obj_t module, qstr name) {
    cc74:	b5b0      	push	{r4, r5, r7, lr}
    cc76:	b08e      	sub	sp, #56	; 0x38
    cc78:	af00      	add	r7, sp, #0
    cc7a:	6078      	str	r0, [r7, #4]
    cc7c:	6039      	str	r1, [r7, #0]
    DEBUG_printf("import from %p %s\n", module, qstr_str(name));

    mp_obj_t dest[2];

    mp_load_method_maybe(module, name, dest);
    cc7e:	f107 0320 	add.w	r3, r7, #32
    cc82:	461a      	mov	r2, r3
    cc84:	6839      	ldr	r1, [r7, #0]
    cc86:	6878      	ldr	r0, [r7, #4]
    cc88:	f7ff fd24 	bl	c6d4 <mp_load_method_maybe>

    if (dest[1] != MP_OBJ_NULL) {
    cc8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    cc8e:	2b00      	cmp	r3, #0
    cc90:	d00a      	beq.n	cca8 <mp_import_from+0x34>
    cc92:	e000      	b.n	cc96 <mp_import_from+0x22>

    #if MICROPY_ENABLE_EXTERNAL_IMPORT

    // See if it's a package, then can try FS import
    if (!mp_obj_is_package(module)) {
        goto import_error;
    cc94:	bf00      	nop
        nlr_raise(mp_obj_new_exception_msg_varg(&mp_type_ImportError, "cannot import name %q", name));
    cc96:	683a      	ldr	r2, [r7, #0]
    cc98:	493a      	ldr	r1, [pc, #232]	; (cd84 <mp_import_from+0x110>)
    cc9a:	483b      	ldr	r0, [pc, #236]	; (cd88 <mp_import_from+0x114>)
    cc9c:	f002 fc0a 	bl	f4b4 <mp_obj_new_exception_msg_varg>
    cca0:	4603      	mov	r3, r0
    cca2:	4618      	mov	r0, r3
    cca4:	f7f3 fb1c 	bl	2e0 <nlr_jump>
    if (dest[0] != MP_OBJ_NULL) {
    cca8:	6a3b      	ldr	r3, [r7, #32]
    ccaa:	2b00      	cmp	r3, #0
    ccac:	d001      	beq.n	ccb2 <mp_import_from+0x3e>
        return dest[0];
    ccae:	6a3b      	ldr	r3, [r7, #32]
    ccb0:	e063      	b.n	cd7a <mp_import_from+0x106>
    if (!mp_obj_is_package(module)) {
    ccb2:	6878      	ldr	r0, [r7, #4]
    ccb4:	f00b fb16 	bl	182e4 <mp_obj_is_package>
    ccb8:	4603      	mov	r3, r0
    ccba:	f083 0301 	eor.w	r3, r3, #1
    ccbe:	b2db      	uxtb	r3, r3
    ccc0:	2b00      	cmp	r3, #0
    ccc2:	d1e7      	bne.n	cc94 <mp_import_from+0x20>
    }

    mp_load_method_maybe(module, MP_QSTR___name__, dest);
    ccc4:	f107 0320 	add.w	r3, r7, #32
    ccc8:	461a      	mov	r2, r3
    ccca:	211b      	movs	r1, #27
    cccc:	6878      	ldr	r0, [r7, #4]
    ccce:	f7ff fd01 	bl	c6d4 <mp_load_method_maybe>
    size_t pkg_name_len;
    const char *pkg_name = mp_obj_str_get_data(dest[0], &pkg_name_len);
    ccd2:	6a3b      	ldr	r3, [r7, #32]
    ccd4:	f107 021c 	add.w	r2, r7, #28
    ccd8:	4611      	mov	r1, r2
    ccda:	4618      	mov	r0, r3
    ccdc:	f008 fbc4 	bl	15468 <mp_obj_str_get_data>
    cce0:	6378      	str	r0, [r7, #52]	; 0x34

    const uint dot_name_len = pkg_name_len + 1 + qstr_len(name);
    cce2:	6838      	ldr	r0, [r7, #0]
    cce4:	f7f4 fa67 	bl	11b6 <qstr_len>
    cce8:	4602      	mov	r2, r0
    ccea:	69fb      	ldr	r3, [r7, #28]
    ccec:	4413      	add	r3, r2
    ccee:	3301      	adds	r3, #1
    ccf0:	633b      	str	r3, [r7, #48]	; 0x30
    char *dot_name = mp_local_alloc(dot_name_len);
    ccf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    ccf4:	3307      	adds	r3, #7
    ccf6:	3307      	adds	r3, #7
    ccf8:	08db      	lsrs	r3, r3, #3
    ccfa:	00db      	lsls	r3, r3, #3
    ccfc:	ebad 0d03 	sub.w	sp, sp, r3
    cd00:	466b      	mov	r3, sp
    cd02:	3307      	adds	r3, #7
    cd04:	08db      	lsrs	r3, r3, #3
    cd06:	00db      	lsls	r3, r3, #3
    cd08:	62fb      	str	r3, [r7, #44]	; 0x2c
    memcpy(dot_name, pkg_name, pkg_name_len);
    cd0a:	69fb      	ldr	r3, [r7, #28]
    cd0c:	461a      	mov	r2, r3
    cd0e:	6b79      	ldr	r1, [r7, #52]	; 0x34
    cd10:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    cd12:	f00e fe57 	bl	1b9c4 <memcpy>
    dot_name[pkg_name_len] = '.';
    cd16:	69fb      	ldr	r3, [r7, #28]
    cd18:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    cd1a:	4413      	add	r3, r2
    cd1c:	222e      	movs	r2, #46	; 0x2e
    cd1e:	701a      	strb	r2, [r3, #0]
    memcpy(dot_name + pkg_name_len + 1, qstr_str(name), qstr_len(name));
    cd20:	69fb      	ldr	r3, [r7, #28]
    cd22:	3301      	adds	r3, #1
    cd24:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    cd26:	18d4      	adds	r4, r2, r3
    cd28:	6838      	ldr	r0, [r7, #0]
    cd2a:	f7f4 fa53 	bl	11d4 <qstr_str>
    cd2e:	4605      	mov	r5, r0
    cd30:	6838      	ldr	r0, [r7, #0]
    cd32:	f7f4 fa40 	bl	11b6 <qstr_len>
    cd36:	4603      	mov	r3, r0
    cd38:	461a      	mov	r2, r3
    cd3a:	4629      	mov	r1, r5
    cd3c:	4620      	mov	r0, r4
    cd3e:	f00e fe41 	bl	1b9c4 <memcpy>
    qstr dot_name_q = qstr_from_strn(dot_name, dot_name_len);
    cd42:	6b39      	ldr	r1, [r7, #48]	; 0x30
    cd44:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    cd46:	f7f4 f96c 	bl	1022 <qstr_from_strn>
    cd4a:	62b8      	str	r0, [r7, #40]	; 0x28
    mp_local_free(dot_name);
    cd4c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    cd4e:	f7fe fb6d 	bl	b42c <mp_local_free>

    mp_obj_t args[5];
    args[0] = MP_OBJ_NEW_QSTR(dot_name_q);
    cd52:	6abb      	ldr	r3, [r7, #40]	; 0x28
    cd54:	009b      	lsls	r3, r3, #2
    cd56:	f043 0302 	orr.w	r3, r3, #2
    cd5a:	60bb      	str	r3, [r7, #8]
    args[1] = mp_const_none; // TODO should be globals
    cd5c:	4b0b      	ldr	r3, [pc, #44]	; (cd8c <mp_import_from+0x118>)
    cd5e:	60fb      	str	r3, [r7, #12]
    args[2] = mp_const_none; // TODO should be locals
    cd60:	4b0a      	ldr	r3, [pc, #40]	; (cd8c <mp_import_from+0x118>)
    cd62:	613b      	str	r3, [r7, #16]
    args[3] = mp_const_true; // Pass sentinel "non empty" value to force returning of leaf module
    cd64:	4b0a      	ldr	r3, [pc, #40]	; (cd90 <mp_import_from+0x11c>)
    cd66:	617b      	str	r3, [r7, #20]
    args[4] = MP_OBJ_NEW_SMALL_INT(0);
    cd68:	2301      	movs	r3, #1
    cd6a:	61bb      	str	r3, [r7, #24]

    // TODO lookup __import__ and call that instead of going straight to builtin implementation
    return mp_builtin___import__(5, args);
    cd6c:	f107 0308 	add.w	r3, r7, #8
    cd70:	4619      	mov	r1, r3
    cd72:	2005      	movs	r0, #5
    cd74:	f00b fbc5 	bl	18502 <mp_builtin___import__>
    cd78:	4603      	mov	r3, r0

    // Package import not supported with external imports disabled
    goto import_error;

    #endif
}
    cd7a:	4618      	mov	r0, r3
    cd7c:	3738      	adds	r7, #56	; 0x38
    cd7e:	46bd      	mov	sp, r7
    cd80:	bdb0      	pop	{r4, r5, r7, pc}
    cd82:	bf00      	nop
    cd84:	0001f5dc 	.word	0x0001f5dc
    cd88:	00020250 	.word	0x00020250
    cd8c:	000212b4 	.word	0x000212b4
    cd90:	0001f9c4 	.word	0x0001f9c4

0000cd94 <mp_import_all>:

void mp_import_all(mp_obj_t module) {
    cd94:	b580      	push	{r7, lr}
    cd96:	b086      	sub	sp, #24
    cd98:	af00      	add	r7, sp, #0
    cd9a:	6078      	str	r0, [r7, #4]
    DEBUG_printf("import all %p\n", module);

    // TODO: Support __all__
    mp_map_t *map = mp_obj_dict_get_map(MP_OBJ_FROM_PTR(mp_obj_module_get_globals(module)));
    cd9c:	6878      	ldr	r0, [r7, #4]
    cd9e:	f004 fec7 	bl	11b30 <mp_obj_module_get_globals>
    cda2:	4603      	mov	r3, r0
    cda4:	4618      	mov	r0, r3
    cda6:	f002 f9a2 	bl	f0ee <mp_obj_dict_get_map>
    cdaa:	6138      	str	r0, [r7, #16]
    for (size_t i = 0; i < map->alloc; i++) {
    cdac:	2300      	movs	r3, #0
    cdae:	617b      	str	r3, [r7, #20]
    cdb0:	e022      	b.n	cdf8 <mp_import_all+0x64>
        if (MP_MAP_SLOT_IS_FILLED(map, i)) {
    cdb2:	6979      	ldr	r1, [r7, #20]
    cdb4:	6938      	ldr	r0, [r7, #16]
    cdb6:	f7fe fb03 	bl	b3c0 <MP_MAP_SLOT_IS_FILLED>
    cdba:	4603      	mov	r3, r0
    cdbc:	2b00      	cmp	r3, #0
    cdbe:	d018      	beq.n	cdf2 <mp_import_all+0x5e>
            qstr name = MP_OBJ_QSTR_VALUE(map->table[i].key);
    cdc0:	693b      	ldr	r3, [r7, #16]
    cdc2:	689a      	ldr	r2, [r3, #8]
    cdc4:	697b      	ldr	r3, [r7, #20]
    cdc6:	00db      	lsls	r3, r3, #3
    cdc8:	4413      	add	r3, r2
    cdca:	681b      	ldr	r3, [r3, #0]
    cdcc:	089b      	lsrs	r3, r3, #2
    cdce:	60fb      	str	r3, [r7, #12]
            if (*qstr_str(name) != '_') {
    cdd0:	68f8      	ldr	r0, [r7, #12]
    cdd2:	f7f4 f9ff 	bl	11d4 <qstr_str>
    cdd6:	4603      	mov	r3, r0
    cdd8:	781b      	ldrb	r3, [r3, #0]
    cdda:	2b5f      	cmp	r3, #95	; 0x5f
    cddc:	d009      	beq.n	cdf2 <mp_import_all+0x5e>
                mp_store_name(name, map->table[i].value);
    cdde:	693b      	ldr	r3, [r7, #16]
    cde0:	689a      	ldr	r2, [r3, #8]
    cde2:	697b      	ldr	r3, [r7, #20]
    cde4:	00db      	lsls	r3, r3, #3
    cde6:	4413      	add	r3, r2
    cde8:	685b      	ldr	r3, [r3, #4]
    cdea:	4619      	mov	r1, r3
    cdec:	68f8      	ldr	r0, [r7, #12]
    cdee:	f7fe fc15 	bl	b61c <mp_store_name>
    for (size_t i = 0; i < map->alloc; i++) {
    cdf2:	697b      	ldr	r3, [r7, #20]
    cdf4:	3301      	adds	r3, #1
    cdf6:	617b      	str	r3, [r7, #20]
    cdf8:	693b      	ldr	r3, [r7, #16]
    cdfa:	685a      	ldr	r2, [r3, #4]
    cdfc:	697b      	ldr	r3, [r7, #20]
    cdfe:	429a      	cmp	r2, r3
    ce00:	d8d7      	bhi.n	cdb2 <mp_import_all+0x1e>
            }
        }
    }
}
    ce02:	bf00      	nop
    ce04:	3718      	adds	r7, #24
    ce06:	46bd      	mov	sp, r7
    ce08:	bd80      	pop	{r7, pc}

0000ce0a <mp_parse_compile_execute>:

#if MICROPY_ENABLE_COMPILER

// this is implemented in this file so it can optimise access to locals/globals
mp_obj_t mp_parse_compile_execute(mp_lexer_t *lex, mp_parse_input_kind_t parse_input_kind, mp_obj_dict_t *globals, mp_obj_dict_t *locals) {
    ce0a:	b580      	push	{r7, lr}
    ce0c:	b098      	sub	sp, #96	; 0x60
    ce0e:	af00      	add	r7, sp, #0
    ce10:	60f8      	str	r0, [r7, #12]
    ce12:	60b9      	str	r1, [r7, #8]
    ce14:	607a      	str	r2, [r7, #4]
    ce16:	603b      	str	r3, [r7, #0]
    // save context
    mp_obj_dict_t *volatile old_globals = mp_globals_get();
    ce18:	f7fe fb54 	bl	b4c4 <mp_globals_get>
    ce1c:	4603      	mov	r3, r0
    ce1e:	653b      	str	r3, [r7, #80]	; 0x50
    mp_obj_dict_t *volatile old_locals = mp_locals_get();
    ce20:	f7fe fb35 	bl	b48e <mp_locals_get>
    ce24:	4603      	mov	r3, r0
    ce26:	64fb      	str	r3, [r7, #76]	; 0x4c

    // set new context
    mp_globals_set(globals);
    ce28:	6878      	ldr	r0, [r7, #4]
    ce2a:	f7fe fb57 	bl	b4dc <mp_globals_set>
    mp_locals_set(locals);
    ce2e:	6838      	ldr	r0, [r7, #0]
    ce30:	f7fe fb38 	bl	b4a4 <mp_locals_set>

    nlr_buf_t nlr;
    if (nlr_push(&nlr) == 0) {
    ce34:	f107 031c 	add.w	r3, r7, #28
    ce38:	4618      	mov	r0, r3
    ce3a:	f7f3 fa3f 	bl	2bc <nlr_push>
    ce3e:	4603      	mov	r3, r0
    ce40:	2b00      	cmp	r3, #0
    ce42:	d121      	bne.n	ce88 <mp_parse_compile_execute+0x7e>
        qstr source_name = lex->source_name;
    ce44:	68fb      	ldr	r3, [r7, #12]
    ce46:	681b      	ldr	r3, [r3, #0]
    ce48:	65fb      	str	r3, [r7, #92]	; 0x5c
        mp_parse_tree_t parse_tree = mp_parse(lex, parse_input_kind);
    ce4a:	f107 0314 	add.w	r3, r7, #20
    ce4e:	68ba      	ldr	r2, [r7, #8]
    ce50:	68f9      	ldr	r1, [r7, #12]
    ce52:	4618      	mov	r0, r3
    ce54:	f7f7 fa40 	bl	42d8 <mp_parse>
        mp_obj_t module_fun = mp_compile(&parse_tree, source_name, MP_EMIT_OPT_NONE, false);
    ce58:	f107 0014 	add.w	r0, r7, #20
    ce5c:	2300      	movs	r3, #0
    ce5e:	2200      	movs	r2, #0
    ce60:	6df9      	ldr	r1, [r7, #92]	; 0x5c
    ce62:	f7fc fcb0 	bl	97c6 <mp_compile>
    ce66:	65b8      	str	r0, [r7, #88]	; 0x58
        if (MICROPY_PY_BUILTINS_COMPILE && globals == NULL) {
            // for compile only, return value is the module function
            ret = module_fun;
        } else {
            // execute module function and get return value
            ret = mp_call_function_0(module_fun);
    ce68:	6db8      	ldr	r0, [r7, #88]	; 0x58
    ce6a:	f7fe ff67 	bl	bd3c <mp_call_function_0>
    ce6e:	6578      	str	r0, [r7, #84]	; 0x54
        }

        // finish nlr block, restore context and return value
        nlr_pop();
    ce70:	f7f3 fa12 	bl	298 <nlr_pop>
        mp_globals_set(old_globals);
    ce74:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    ce76:	4618      	mov	r0, r3
    ce78:	f7fe fb30 	bl	b4dc <mp_globals_set>
        mp_locals_set(old_locals);
    ce7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    ce7e:	4618      	mov	r0, r3
    ce80:	f7fe fb10 	bl	b4a4 <mp_locals_set>
        return ret;
    ce84:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    ce86:	e00b      	b.n	cea0 <mp_parse_compile_execute+0x96>
    } else {
        // exception; restore context and re-raise same exception
        mp_globals_set(old_globals);
    ce88:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    ce8a:	4618      	mov	r0, r3
    ce8c:	f7fe fb26 	bl	b4dc <mp_globals_set>
        mp_locals_set(old_locals);
    ce90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    ce92:	4618      	mov	r0, r3
    ce94:	f7fe fb06 	bl	b4a4 <mp_locals_set>
        nlr_jump(nlr.ret_val);
    ce98:	6a3b      	ldr	r3, [r7, #32]
    ce9a:	4618      	mov	r0, r3
    ce9c:	f7f3 fa20 	bl	2e0 <nlr_jump>
    }
}
    cea0:	4618      	mov	r0, r3
    cea2:	3760      	adds	r7, #96	; 0x60
    cea4:	46bd      	mov	sp, r7
    cea6:	bd80      	pop	{r7, pc}

0000cea8 <m_malloc_fail>:

#endif // MICROPY_ENABLE_COMPILER

NORETURN void m_malloc_fail(size_t num_bytes) {
    cea8:	b580      	push	{r7, lr}
    ceaa:	b082      	sub	sp, #8
    ceac:	af00      	add	r7, sp, #0
    ceae:	6078      	str	r0, [r7, #4]
    DEBUG_printf("memory allocation failed, allocating %u bytes\n", (uint)num_bytes);
    #if MICROPY_ENABLE_GC
    if (gc_is_locked()) {
    ceb0:	f7f3 fb80 	bl	5b4 <gc_is_locked>
    ceb4:	4603      	mov	r3, r0
    ceb6:	2b00      	cmp	r3, #0
    ceb8:	d003      	beq.n	cec2 <m_malloc_fail+0x1a>
        mp_raise_msg(&mp_type_MemoryError, "memory allocation failed, heap is locked");
    ceba:	4906      	ldr	r1, [pc, #24]	; (ced4 <m_malloc_fail+0x2c>)
    cebc:	4806      	ldr	r0, [pc, #24]	; (ced8 <m_malloc_fail+0x30>)
    cebe:	f000 f80f 	bl	cee0 <mp_raise_msg>
    }
    #endif
    nlr_raise(mp_obj_new_exception_msg_varg(&mp_type_MemoryError,
    cec2:	687a      	ldr	r2, [r7, #4]
    cec4:	4905      	ldr	r1, [pc, #20]	; (cedc <m_malloc_fail+0x34>)
    cec6:	4804      	ldr	r0, [pc, #16]	; (ced8 <m_malloc_fail+0x30>)
    cec8:	f002 faf4 	bl	f4b4 <mp_obj_new_exception_msg_varg>
    cecc:	4603      	mov	r3, r0
    cece:	4618      	mov	r0, r3
    ced0:	f7f3 fa06 	bl	2e0 <nlr_jump>
    ced4:	0001f5f4 	.word	0x0001f5f4
    ced8:	00020340 	.word	0x00020340
    cedc:	0001f620 	.word	0x0001f620

0000cee0 <mp_raise_msg>:
        "memory allocation failed, allocating %u bytes", (uint)num_bytes));
}

NORETURN void mp_raise_msg(const mp_obj_type_t *exc_type, const char *msg) {
    cee0:	b580      	push	{r7, lr}
    cee2:	b082      	sub	sp, #8
    cee4:	af00      	add	r7, sp, #0
    cee6:	6078      	str	r0, [r7, #4]
    cee8:	6039      	str	r1, [r7, #0]
    if (msg == NULL) {
    ceea:	683b      	ldr	r3, [r7, #0]
    ceec:	2b00      	cmp	r3, #0
    ceee:	d106      	bne.n	cefe <mp_raise_msg+0x1e>
        nlr_raise(mp_obj_new_exception(exc_type));
    cef0:	6878      	ldr	r0, [r7, #4]
    cef2:	f002 fa3b 	bl	f36c <mp_obj_new_exception>
    cef6:	4603      	mov	r3, r0
    cef8:	4618      	mov	r0, r3
    cefa:	f7f3 f9f1 	bl	2e0 <nlr_jump>
    } else {
        nlr_raise(mp_obj_new_exception_msg(exc_type, msg));
    cefe:	6839      	ldr	r1, [r7, #0]
    cf00:	6878      	ldr	r0, [r7, #4]
    cf02:	f002 fa77 	bl	f3f4 <mp_obj_new_exception_msg>
    cf06:	4603      	mov	r3, r0
    cf08:	4618      	mov	r0, r3
    cf0a:	f7f3 f9e9 	bl	2e0 <nlr_jump>

0000cf0e <mp_raise_ValueError>:
    }
}

NORETURN void mp_raise_ValueError(const char *msg) {
    cf0e:	b580      	push	{r7, lr}
    cf10:	b082      	sub	sp, #8
    cf12:	af00      	add	r7, sp, #0
    cf14:	6078      	str	r0, [r7, #4]
    mp_raise_msg(&mp_type_ValueError, msg);
    cf16:	6879      	ldr	r1, [r7, #4]
    cf18:	4801      	ldr	r0, [pc, #4]	; (cf20 <mp_raise_ValueError+0x12>)
    cf1a:	f7ff ffe1 	bl	cee0 <mp_raise_msg>
    cf1e:	bf00      	nop
    cf20:	00020520 	.word	0x00020520

0000cf24 <mp_raise_TypeError>:
}

NORETURN void mp_raise_TypeError(const char *msg) {
    cf24:	b580      	push	{r7, lr}
    cf26:	b082      	sub	sp, #8
    cf28:	af00      	add	r7, sp, #0
    cf2a:	6078      	str	r0, [r7, #4]
    mp_raise_msg(&mp_type_TypeError, msg);
    cf2c:	6879      	ldr	r1, [r7, #4]
    cf2e:	4801      	ldr	r0, [pc, #4]	; (cf34 <mp_raise_TypeError+0x10>)
    cf30:	f7ff ffd6 	bl	cee0 <mp_raise_msg>
    cf34:	000204e4 	.word	0x000204e4

0000cf38 <mp_raise_OSError>:
}

NORETURN void mp_raise_OSError(int errno_) {
    cf38:	b580      	push	{r7, lr}
    cf3a:	b082      	sub	sp, #8
    cf3c:	af00      	add	r7, sp, #0
    cf3e:	6078      	str	r0, [r7, #4]
    nlr_raise(mp_obj_new_exception_arg1(&mp_type_OSError, MP_OBJ_NEW_SMALL_INT(errno_)));
    cf40:	687b      	ldr	r3, [r7, #4]
    cf42:	005b      	lsls	r3, r3, #1
    cf44:	f043 0301 	orr.w	r3, r3, #1
    cf48:	4619      	mov	r1, r3
    cf4a:	4803      	ldr	r0, [pc, #12]	; (cf58 <mp_raise_OSError+0x20>)
    cf4c:	f002 fa1c 	bl	f388 <mp_obj_new_exception_arg1>
    cf50:	4603      	mov	r3, r0
    cf52:	4618      	mov	r0, r3
    cf54:	f7f3 f9c4 	bl	2e0 <nlr_jump>
    cf58:	000203b8 	.word	0x000203b8

0000cf5c <mp_raise_NotImplementedError>:
}

NORETURN void mp_raise_NotImplementedError(const char *msg) {
    cf5c:	b580      	push	{r7, lr}
    cf5e:	b082      	sub	sp, #8
    cf60:	af00      	add	r7, sp, #0
    cf62:	6078      	str	r0, [r7, #4]
    mp_raise_msg(&mp_type_NotImplementedError, msg);
    cf64:	6879      	ldr	r1, [r7, #4]
    cf66:	4801      	ldr	r0, [pc, #4]	; (cf6c <mp_raise_NotImplementedError+0x10>)
    cf68:	f7ff ffba 	bl	cee0 <mp_raise_msg>
    cf6c:	00020430 	.word	0x00020430

0000cf70 <mp_arg_check_num>:
#include <stdlib.h>
#include <assert.h>

#include "py/runtime.h"

void mp_arg_check_num(size_t n_args, size_t n_kw, size_t n_args_min, size_t n_args_max, bool takes_kw) {
    cf70:	b580      	push	{r7, lr}
    cf72:	b084      	sub	sp, #16
    cf74:	af00      	add	r7, sp, #0
    cf76:	60f8      	str	r0, [r7, #12]
    cf78:	60b9      	str	r1, [r7, #8]
    cf7a:	607a      	str	r2, [r7, #4]
    cf7c:	603b      	str	r3, [r7, #0]
    // TODO maybe take the function name as an argument so we can print nicer error messages

    if (n_kw && !takes_kw) {
    cf7e:	68bb      	ldr	r3, [r7, #8]
    cf80:	2b00      	cmp	r3, #0
    cf82:	d007      	beq.n	cf94 <mp_arg_check_num+0x24>
    cf84:	7e3b      	ldrb	r3, [r7, #24]
    cf86:	f083 0301 	eor.w	r3, r3, #1
    cf8a:	b2db      	uxtb	r3, r3
    cf8c:	2b00      	cmp	r3, #0
    cf8e:	d001      	beq.n	cf94 <mp_arg_check_num+0x24>
        if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
            mp_arg_error_terse_mismatch();
    cf90:	f000 f8e8 	bl	d164 <mp_arg_error_terse_mismatch>
        } else {
            mp_raise_TypeError("function does not take keyword arguments");
        }
    }

    if (n_args_min == n_args_max) {
    cf94:	687a      	ldr	r2, [r7, #4]
    cf96:	683b      	ldr	r3, [r7, #0]
    cf98:	429a      	cmp	r2, r3
    cf9a:	d105      	bne.n	cfa8 <mp_arg_check_num+0x38>
        if (n_args != n_args_min) {
    cf9c:	68fa      	ldr	r2, [r7, #12]
    cf9e:	687b      	ldr	r3, [r7, #4]
    cfa0:	429a      	cmp	r2, r3
    cfa2:	d00d      	beq.n	cfc0 <mp_arg_check_num+0x50>
            if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
                mp_arg_error_terse_mismatch();
    cfa4:	f000 f8de 	bl	d164 <mp_arg_error_terse_mismatch>
                    "function takes %d positional arguments but %d were given",
                    n_args_min, n_args));
            }
        }
    } else {
        if (n_args < n_args_min) {
    cfa8:	68fa      	ldr	r2, [r7, #12]
    cfaa:	687b      	ldr	r3, [r7, #4]
    cfac:	429a      	cmp	r2, r3
    cfae:	d201      	bcs.n	cfb4 <mp_arg_check_num+0x44>
            if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
                mp_arg_error_terse_mismatch();
    cfb0:	f000 f8d8 	bl	d164 <mp_arg_error_terse_mismatch>
            } else {
                nlr_raise(mp_obj_new_exception_msg_varg(&mp_type_TypeError,
                    "function missing %d required positional arguments",
                    n_args_min - n_args));
            }
        } else if (n_args > n_args_max) {
    cfb4:	68fa      	ldr	r2, [r7, #12]
    cfb6:	683b      	ldr	r3, [r7, #0]
    cfb8:	429a      	cmp	r2, r3
    cfba:	d901      	bls.n	cfc0 <mp_arg_check_num+0x50>
            if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
                mp_arg_error_terse_mismatch();
    cfbc:	f000 f8d2 	bl	d164 <mp_arg_error_terse_mismatch>
                    "function expected at most %d arguments, got %d",
                    n_args_max, n_args));
            }
        }
    }
}
    cfc0:	bf00      	nop
    cfc2:	3710      	adds	r7, #16
    cfc4:	46bd      	mov	sp, r7
    cfc6:	bd80      	pop	{r7, pc}

0000cfc8 <mp_arg_parse_all>:

void mp_arg_parse_all(size_t n_pos, const mp_obj_t *pos, mp_map_t *kws, size_t n_allowed, const mp_arg_t *allowed, mp_arg_val_t *out_vals) {
    cfc8:	b590      	push	{r4, r7, lr}
    cfca:	b08b      	sub	sp, #44	; 0x2c
    cfcc:	af00      	add	r7, sp, #0
    cfce:	60f8      	str	r0, [r7, #12]
    cfd0:	60b9      	str	r1, [r7, #8]
    cfd2:	607a      	str	r2, [r7, #4]
    cfd4:	603b      	str	r3, [r7, #0]
    size_t pos_found = 0, kws_found = 0;
    cfd6:	2300      	movs	r3, #0
    cfd8:	627b      	str	r3, [r7, #36]	; 0x24
    cfda:	2300      	movs	r3, #0
    cfdc:	623b      	str	r3, [r7, #32]
    for (size_t i = 0; i < n_allowed; i++) {
    cfde:	2300      	movs	r3, #0
    cfe0:	61fb      	str	r3, [r7, #28]
    cfe2:	e07e      	b.n	d0e2 <mp_arg_parse_all+0x11a>
        mp_obj_t given_arg;
        if (i < n_pos) {
    cfe4:	69fa      	ldr	r2, [r7, #28]
    cfe6:	68fb      	ldr	r3, [r7, #12]
    cfe8:	429a      	cmp	r2, r3
    cfea:	d212      	bcs.n	d012 <mp_arg_parse_all+0x4a>
            if (allowed[i].flags & MP_ARG_KW_ONLY) {
    cfec:	69fb      	ldr	r3, [r7, #28]
    cfee:	00db      	lsls	r3, r3, #3
    cff0:	6bba      	ldr	r2, [r7, #56]	; 0x38
    cff2:	4413      	add	r3, r2
    cff4:	885b      	ldrh	r3, [r3, #2]
    cff6:	f403 7300 	and.w	r3, r3, #512	; 0x200
    cffa:	2b00      	cmp	r3, #0
    cffc:	d17b      	bne.n	d0f6 <mp_arg_parse_all+0x12e>
                goto extra_positional;
            }
            pos_found++;
    cffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    d000:	3301      	adds	r3, #1
    d002:	627b      	str	r3, [r7, #36]	; 0x24
            given_arg = pos[i];
    d004:	69fb      	ldr	r3, [r7, #28]
    d006:	009b      	lsls	r3, r3, #2
    d008:	68ba      	ldr	r2, [r7, #8]
    d00a:	4413      	add	r3, r2
    d00c:	681b      	ldr	r3, [r3, #0]
    d00e:	61bb      	str	r3, [r7, #24]
    d010:	e02c      	b.n	d06c <mp_arg_parse_all+0xa4>
        } else {
            mp_map_elem_t *kw = mp_map_lookup(kws, MP_OBJ_NEW_QSTR(allowed[i].qst), MP_MAP_LOOKUP);
    d012:	69fb      	ldr	r3, [r7, #28]
    d014:	00db      	lsls	r3, r3, #3
    d016:	6bba      	ldr	r2, [r7, #56]	; 0x38
    d018:	4413      	add	r3, r2
    d01a:	881b      	ldrh	r3, [r3, #0]
    d01c:	009b      	lsls	r3, r3, #2
    d01e:	f043 0302 	orr.w	r3, r3, #2
    d022:	2200      	movs	r2, #0
    d024:	4619      	mov	r1, r3
    d026:	6878      	ldr	r0, [r7, #4]
    d028:	f000 f9e8 	bl	d3fc <mp_map_lookup>
    d02c:	6178      	str	r0, [r7, #20]
            if (kw == NULL) {
    d02e:	697b      	ldr	r3, [r7, #20]
    d030:	2b00      	cmp	r3, #0
    d032:	d115      	bne.n	d060 <mp_arg_parse_all+0x98>
                if (allowed[i].flags & MP_ARG_REQUIRED) {
    d034:	69fb      	ldr	r3, [r7, #28]
    d036:	00db      	lsls	r3, r3, #3
    d038:	6bba      	ldr	r2, [r7, #56]	; 0x38
    d03a:	4413      	add	r3, r2
    d03c:	885b      	ldrh	r3, [r3, #2]
    d03e:	f403 7380 	and.w	r3, r3, #256	; 0x100
    d042:	2b00      	cmp	r3, #0
    d044:	d001      	beq.n	d04a <mp_arg_parse_all+0x82>
                    if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
                        mp_arg_error_terse_mismatch();
    d046:	f000 f88d 	bl	d164 <mp_arg_error_terse_mismatch>
                    } else {
                        nlr_raise(mp_obj_new_exception_msg_varg(&mp_type_TypeError,
                            "'%q' argument required", allowed[i].qst));
                    }
                }
                out_vals[i] = allowed[i].defval;
    d04a:	69fb      	ldr	r3, [r7, #28]
    d04c:	009b      	lsls	r3, r3, #2
    d04e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    d050:	4413      	add	r3, r2
    d052:	69fa      	ldr	r2, [r7, #28]
    d054:	00d2      	lsls	r2, r2, #3
    d056:	6bb9      	ldr	r1, [r7, #56]	; 0x38
    d058:	440a      	add	r2, r1
    d05a:	6852      	ldr	r2, [r2, #4]
    d05c:	601a      	str	r2, [r3, #0]
                continue;
    d05e:	e03d      	b.n	d0dc <mp_arg_parse_all+0x114>
            } else {
                kws_found++;
    d060:	6a3b      	ldr	r3, [r7, #32]
    d062:	3301      	adds	r3, #1
    d064:	623b      	str	r3, [r7, #32]
                given_arg = kw->value;
    d066:	697b      	ldr	r3, [r7, #20]
    d068:	685b      	ldr	r3, [r3, #4]
    d06a:	61bb      	str	r3, [r7, #24]
            }
        }
        if ((allowed[i].flags & MP_ARG_KIND_MASK) == MP_ARG_BOOL) {
    d06c:	69fb      	ldr	r3, [r7, #28]
    d06e:	00db      	lsls	r3, r3, #3
    d070:	6bba      	ldr	r2, [r7, #56]	; 0x38
    d072:	4413      	add	r3, r2
    d074:	885b      	ldrh	r3, [r3, #2]
    d076:	b2db      	uxtb	r3, r3
    d078:	2b01      	cmp	r3, #1
    d07a:	d109      	bne.n	d090 <mp_arg_parse_all+0xc8>
            out_vals[i].u_bool = mp_obj_is_true(given_arg);
    d07c:	69fb      	ldr	r3, [r7, #28]
    d07e:	009b      	lsls	r3, r3, #2
    d080:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    d082:	18d4      	adds	r4, r2, r3
    d084:	69b8      	ldr	r0, [r7, #24]
    d086:	f000 fc3f 	bl	d908 <mp_obj_is_true>
    d08a:	4603      	mov	r3, r0
    d08c:	7023      	strb	r3, [r4, #0]
    d08e:	e025      	b.n	d0dc <mp_arg_parse_all+0x114>
        } else if ((allowed[i].flags & MP_ARG_KIND_MASK) == MP_ARG_INT) {
    d090:	69fb      	ldr	r3, [r7, #28]
    d092:	00db      	lsls	r3, r3, #3
    d094:	6bba      	ldr	r2, [r7, #56]	; 0x38
    d096:	4413      	add	r3, r2
    d098:	885b      	ldrh	r3, [r3, #2]
    d09a:	b2db      	uxtb	r3, r3
    d09c:	2b02      	cmp	r3, #2
    d09e:	d109      	bne.n	d0b4 <mp_arg_parse_all+0xec>
            out_vals[i].u_int = mp_obj_get_int(given_arg);
    d0a0:	69fb      	ldr	r3, [r7, #28]
    d0a2:	009b      	lsls	r3, r3, #2
    d0a4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    d0a6:	18d4      	adds	r4, r2, r3
    d0a8:	69b8      	ldr	r0, [r7, #24]
    d0aa:	f000 fd2d 	bl	db08 <mp_obj_get_int>
    d0ae:	4603      	mov	r3, r0
    d0b0:	6023      	str	r3, [r4, #0]
    d0b2:	e013      	b.n	d0dc <mp_arg_parse_all+0x114>
        } else {
            assert((allowed[i].flags & MP_ARG_KIND_MASK) == MP_ARG_OBJ);
    d0b4:	69fb      	ldr	r3, [r7, #28]
    d0b6:	00db      	lsls	r3, r3, #3
    d0b8:	6bba      	ldr	r2, [r7, #56]	; 0x38
    d0ba:	4413      	add	r3, r2
    d0bc:	885b      	ldrh	r3, [r3, #2]
    d0be:	b2db      	uxtb	r3, r3
    d0c0:	2b03      	cmp	r3, #3
    d0c2:	d005      	beq.n	d0d0 <mp_arg_parse_all+0x108>
    d0c4:	4b14      	ldr	r3, [pc, #80]	; (d118 <mp_arg_parse_all+0x150>)
    d0c6:	4a15      	ldr	r2, [pc, #84]	; (d11c <mp_arg_parse_all+0x154>)
    d0c8:	216b      	movs	r1, #107	; 0x6b
    d0ca:	4815      	ldr	r0, [pc, #84]	; (d120 <mp_arg_parse_all+0x158>)
    d0cc:	f00e f876 	bl	1b1bc <__assert_func>
            out_vals[i].u_obj = given_arg;
    d0d0:	69fb      	ldr	r3, [r7, #28]
    d0d2:	009b      	lsls	r3, r3, #2
    d0d4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    d0d6:	4413      	add	r3, r2
    d0d8:	69ba      	ldr	r2, [r7, #24]
    d0da:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < n_allowed; i++) {
    d0dc:	69fb      	ldr	r3, [r7, #28]
    d0de:	3301      	adds	r3, #1
    d0e0:	61fb      	str	r3, [r7, #28]
    d0e2:	69fa      	ldr	r2, [r7, #28]
    d0e4:	683b      	ldr	r3, [r7, #0]
    d0e6:	429a      	cmp	r2, r3
    d0e8:	f4ff af7c 	bcc.w	cfe4 <mp_arg_parse_all+0x1c>
        }
    }
    if (pos_found < n_pos) {
    d0ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    d0ee:	68fb      	ldr	r3, [r7, #12]
    d0f0:	429a      	cmp	r2, r3
    d0f2:	d203      	bcs.n	d0fc <mp_arg_parse_all+0x134>
    d0f4:	e000      	b.n	d0f8 <mp_arg_parse_all+0x130>
                goto extra_positional;
    d0f6:	bf00      	nop
        extra_positional:
        if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
            mp_arg_error_terse_mismatch();
    d0f8:	f000 f834 	bl	d164 <mp_arg_error_terse_mismatch>
        } else {
            // TODO better error message
            mp_raise_TypeError("extra positional arguments given");
        }
    }
    if (kws_found < kws->used) {
    d0fc:	687b      	ldr	r3, [r7, #4]
    d0fe:	681b      	ldr	r3, [r3, #0]
    d100:	f3c3 03dc 	ubfx	r3, r3, #3, #29
    d104:	461a      	mov	r2, r3
    d106:	6a3b      	ldr	r3, [r7, #32]
    d108:	429a      	cmp	r2, r3
    d10a:	d901      	bls.n	d110 <mp_arg_parse_all+0x148>
        if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
            mp_arg_error_terse_mismatch();
    d10c:	f000 f82a 	bl	d164 <mp_arg_error_terse_mismatch>
        } else {
            // TODO better error message
            mp_raise_TypeError("extra keyword arguments given");
        }
    }
}
    d110:	bf00      	nop
    d112:	372c      	adds	r7, #44	; 0x2c
    d114:	46bd      	mov	sp, r7
    d116:	bd90      	pop	{r4, r7, pc}
    d118:	0001f6ac 	.word	0x0001f6ac
    d11c:	0001f710 	.word	0x0001f710
    d120:	0001f6e0 	.word	0x0001f6e0

0000d124 <mp_arg_parse_all_kw_array>:

void mp_arg_parse_all_kw_array(size_t n_pos, size_t n_kw, const mp_obj_t *args, size_t n_allowed, const mp_arg_t *allowed, mp_arg_val_t *out_vals) {
    d124:	b580      	push	{r7, lr}
    d126:	b08a      	sub	sp, #40	; 0x28
    d128:	af02      	add	r7, sp, #8
    d12a:	60f8      	str	r0, [r7, #12]
    d12c:	60b9      	str	r1, [r7, #8]
    d12e:	607a      	str	r2, [r7, #4]
    d130:	603b      	str	r3, [r7, #0]
    mp_map_t kw_args;
    mp_map_init_fixed_table(&kw_args, n_kw, args + n_pos);
    d132:	68fb      	ldr	r3, [r7, #12]
    d134:	009b      	lsls	r3, r3, #2
    d136:	687a      	ldr	r2, [r7, #4]
    d138:	441a      	add	r2, r3
    d13a:	f107 0314 	add.w	r3, r7, #20
    d13e:	68b9      	ldr	r1, [r7, #8]
    d140:	4618      	mov	r0, r3
    d142:	f000 f896 	bl	d272 <mp_map_init_fixed_table>
    mp_arg_parse_all(n_pos, args, &kw_args, n_allowed, allowed, out_vals);
    d146:	f107 0214 	add.w	r2, r7, #20
    d14a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    d14c:	9301      	str	r3, [sp, #4]
    d14e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    d150:	9300      	str	r3, [sp, #0]
    d152:	683b      	ldr	r3, [r7, #0]
    d154:	6879      	ldr	r1, [r7, #4]
    d156:	68f8      	ldr	r0, [r7, #12]
    d158:	f7ff ff36 	bl	cfc8 <mp_arg_parse_all>
}
    d15c:	bf00      	nop
    d15e:	3720      	adds	r7, #32
    d160:	46bd      	mov	sp, r7
    d162:	bd80      	pop	{r7, pc}

0000d164 <mp_arg_error_terse_mismatch>:

NORETURN void mp_arg_error_terse_mismatch(void) {
    d164:	b580      	push	{r7, lr}
    d166:	af00      	add	r7, sp, #0
    mp_raise_TypeError("argument num/types mismatch");
    d168:	4801      	ldr	r0, [pc, #4]	; (d170 <mp_arg_error_terse_mismatch+0xc>)
    d16a:	f7ff fedb 	bl	cf24 <mp_raise_TypeError>
    d16e:	bf00      	nop
    d170:	0001f6f4 	.word	0x0001f6f4

0000d174 <MP_OBJ_IS_QSTR>:
    { return ((((mp_int_t)(o)) & 3) == 2); }
    d174:	b480      	push	{r7}
    d176:	b083      	sub	sp, #12
    d178:	af00      	add	r7, sp, #0
    d17a:	6078      	str	r0, [r7, #4]
    d17c:	687b      	ldr	r3, [r7, #4]
    d17e:	f003 0303 	and.w	r3, r3, #3
    d182:	2b02      	cmp	r3, #2
    d184:	bf0c      	ite	eq
    d186:	2301      	moveq	r3, #1
    d188:	2300      	movne	r3, #0
    d18a:	b2db      	uxtb	r3, r3
    d18c:	4618      	mov	r0, r3
    d18e:	370c      	adds	r7, #12
    d190:	46bd      	mov	sp, r7
    d192:	f85d 7b04 	ldr.w	r7, [sp], #4
    d196:	4770      	bx	lr

0000d198 <MP_OBJ_IS_OBJ>:
    { return ((((mp_int_t)(o)) & 3) == 0); }
    d198:	b480      	push	{r7}
    d19a:	b083      	sub	sp, #12
    d19c:	af00      	add	r7, sp, #0
    d19e:	6078      	str	r0, [r7, #4]
    d1a0:	687b      	ldr	r3, [r7, #4]
    d1a2:	f003 0303 	and.w	r3, r3, #3
    d1a6:	2b00      	cmp	r3, #0
    d1a8:	bf0c      	ite	eq
    d1aa:	2301      	moveq	r3, #1
    d1ac:	2300      	movne	r3, #0
    d1ae:	b2db      	uxtb	r3, r3
    d1b0:	4618      	mov	r0, r3
    d1b2:	370c      	adds	r7, #12
    d1b4:	46bd      	mov	sp, r7
    d1b6:	f85d 7b04 	ldr.w	r7, [sp], #4
    d1ba:	4770      	bx	lr

0000d1bc <get_hash_alloc_greater_or_equal_to>:
    17, 23, 29, 37, 47, 59, 73, // *1.25
    97, 127, 167, 223, 293, 389, 521, 691, 919, 1223, 1627, 2161, // *1.33
    3229, 4831, 7243, 10861, 16273, 24407, 36607, 54907, // *1.5
};

STATIC size_t get_hash_alloc_greater_or_equal_to(size_t x) {
    d1bc:	b480      	push	{r7}
    d1be:	b085      	sub	sp, #20
    d1c0:	af00      	add	r7, sp, #0
    d1c2:	6078      	str	r0, [r7, #4]
    for (size_t i = 0; i < MP_ARRAY_SIZE(hash_allocation_sizes); i++) {
    d1c4:	2300      	movs	r3, #0
    d1c6:	60fb      	str	r3, [r7, #12]
    d1c8:	e00f      	b.n	d1ea <get_hash_alloc_greater_or_equal_to+0x2e>
        if (hash_allocation_sizes[i] >= x) {
    d1ca:	4a0f      	ldr	r2, [pc, #60]	; (d208 <get_hash_alloc_greater_or_equal_to+0x4c>)
    d1cc:	68fb      	ldr	r3, [r7, #12]
    d1ce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
    d1d2:	461a      	mov	r2, r3
    d1d4:	687b      	ldr	r3, [r7, #4]
    d1d6:	429a      	cmp	r2, r3
    d1d8:	d304      	bcc.n	d1e4 <get_hash_alloc_greater_or_equal_to+0x28>
            return hash_allocation_sizes[i];
    d1da:	4a0b      	ldr	r2, [pc, #44]	; (d208 <get_hash_alloc_greater_or_equal_to+0x4c>)
    d1dc:	68fb      	ldr	r3, [r7, #12]
    d1de:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
    d1e2:	e00b      	b.n	d1fc <get_hash_alloc_greater_or_equal_to+0x40>
    for (size_t i = 0; i < MP_ARRAY_SIZE(hash_allocation_sizes); i++) {
    d1e4:	68fb      	ldr	r3, [r7, #12]
    d1e6:	3301      	adds	r3, #1
    d1e8:	60fb      	str	r3, [r7, #12]
    d1ea:	68fb      	ldr	r3, [r7, #12]
    d1ec:	2b21      	cmp	r3, #33	; 0x21
    d1ee:	d9ec      	bls.n	d1ca <get_hash_alloc_greater_or_equal_to+0xe>
        }
    }
    // ran out of primes in the table!
    // return something sensible, at least make it odd
    return (x + x / 2) | 1;
    d1f0:	687b      	ldr	r3, [r7, #4]
    d1f2:	085a      	lsrs	r2, r3, #1
    d1f4:	687b      	ldr	r3, [r7, #4]
    d1f6:	4413      	add	r3, r2
    d1f8:	f043 0301 	orr.w	r3, r3, #1
}
    d1fc:	4618      	mov	r0, r3
    d1fe:	3714      	adds	r7, #20
    d200:	46bd      	mov	sp, r7
    d202:	f85d 7b04 	ldr.w	r7, [sp], #4
    d206:	4770      	bx	lr
    d208:	0001f730 	.word	0x0001f730

0000d20c <mp_map_init>:

/******************************************************************************/
/* map                                                                        */

void mp_map_init(mp_map_t *map, size_t n) {
    d20c:	b580      	push	{r7, lr}
    d20e:	b082      	sub	sp, #8
    d210:	af00      	add	r7, sp, #0
    d212:	6078      	str	r0, [r7, #4]
    d214:	6039      	str	r1, [r7, #0]
    if (n == 0) {
    d216:	683b      	ldr	r3, [r7, #0]
    d218:	2b00      	cmp	r3, #0
    d21a:	d106      	bne.n	d22a <mp_map_init+0x1e>
        map->alloc = 0;
    d21c:	687b      	ldr	r3, [r7, #4]
    d21e:	2200      	movs	r2, #0
    d220:	605a      	str	r2, [r3, #4]
        map->table = NULL;
    d222:	687b      	ldr	r3, [r7, #4]
    d224:	2200      	movs	r2, #0
    d226:	609a      	str	r2, [r3, #8]
    d228:	e00b      	b.n	d242 <mp_map_init+0x36>
    } else {
        map->alloc = n;
    d22a:	687b      	ldr	r3, [r7, #4]
    d22c:	683a      	ldr	r2, [r7, #0]
    d22e:	605a      	str	r2, [r3, #4]
        map->table = m_new0(mp_map_elem_t, map->alloc);
    d230:	687b      	ldr	r3, [r7, #4]
    d232:	685b      	ldr	r3, [r3, #4]
    d234:	00db      	lsls	r3, r3, #3
    d236:	4618      	mov	r0, r3
    d238:	f7f3 f895 	bl	366 <m_malloc0>
    d23c:	4602      	mov	r2, r0
    d23e:	687b      	ldr	r3, [r7, #4]
    d240:	609a      	str	r2, [r3, #8]
    }
    map->used = 0;
    d242:	687a      	ldr	r2, [r7, #4]
    d244:	6813      	ldr	r3, [r2, #0]
    d246:	f36f 03df 	bfc	r3, #3, #29
    d24a:	6013      	str	r3, [r2, #0]
    map->all_keys_are_qstrs = 1;
    d24c:	687a      	ldr	r2, [r7, #4]
    d24e:	7813      	ldrb	r3, [r2, #0]
    d250:	f043 0301 	orr.w	r3, r3, #1
    d254:	7013      	strb	r3, [r2, #0]
    map->is_fixed = 0;
    d256:	687a      	ldr	r2, [r7, #4]
    d258:	7813      	ldrb	r3, [r2, #0]
    d25a:	f36f 0341 	bfc	r3, #1, #1
    d25e:	7013      	strb	r3, [r2, #0]
    map->is_ordered = 0;
    d260:	687a      	ldr	r2, [r7, #4]
    d262:	7813      	ldrb	r3, [r2, #0]
    d264:	f36f 0382 	bfc	r3, #2, #1
    d268:	7013      	strb	r3, [r2, #0]
}
    d26a:	bf00      	nop
    d26c:	3708      	adds	r7, #8
    d26e:	46bd      	mov	sp, r7
    d270:	bd80      	pop	{r7, pc}

0000d272 <mp_map_init_fixed_table>:

void mp_map_init_fixed_table(mp_map_t *map, size_t n, const mp_obj_t *table) {
    d272:	b480      	push	{r7}
    d274:	b085      	sub	sp, #20
    d276:	af00      	add	r7, sp, #0
    d278:	60f8      	str	r0, [r7, #12]
    d27a:	60b9      	str	r1, [r7, #8]
    d27c:	607a      	str	r2, [r7, #4]
    map->alloc = n;
    d27e:	68fb      	ldr	r3, [r7, #12]
    d280:	68ba      	ldr	r2, [r7, #8]
    d282:	605a      	str	r2, [r3, #4]
    map->used = n;
    d284:	68bb      	ldr	r3, [r7, #8]
    d286:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
    d28a:	68fa      	ldr	r2, [r7, #12]
    d28c:	6813      	ldr	r3, [r2, #0]
    d28e:	f361 03df 	bfi	r3, r1, #3, #29
    d292:	6013      	str	r3, [r2, #0]
    map->all_keys_are_qstrs = 1;
    d294:	68fa      	ldr	r2, [r7, #12]
    d296:	7813      	ldrb	r3, [r2, #0]
    d298:	f043 0301 	orr.w	r3, r3, #1
    d29c:	7013      	strb	r3, [r2, #0]
    map->is_fixed = 1;
    d29e:	68fa      	ldr	r2, [r7, #12]
    d2a0:	7813      	ldrb	r3, [r2, #0]
    d2a2:	f043 0302 	orr.w	r3, r3, #2
    d2a6:	7013      	strb	r3, [r2, #0]
    map->is_ordered = 1;
    d2a8:	68fa      	ldr	r2, [r7, #12]
    d2aa:	7813      	ldrb	r3, [r2, #0]
    d2ac:	f043 0304 	orr.w	r3, r3, #4
    d2b0:	7013      	strb	r3, [r2, #0]
    map->table = (mp_map_elem_t*)table;
    d2b2:	68fb      	ldr	r3, [r7, #12]
    d2b4:	687a      	ldr	r2, [r7, #4]
    d2b6:	609a      	str	r2, [r3, #8]
}
    d2b8:	bf00      	nop
    d2ba:	3714      	adds	r7, #20
    d2bc:	46bd      	mov	sp, r7
    d2be:	f85d 7b04 	ldr.w	r7, [sp], #4
    d2c2:	4770      	bx	lr

0000d2c4 <mp_map_deinit>:

// Differentiate from mp_map_clear() - semantics is different
void mp_map_deinit(mp_map_t *map) {
    d2c4:	b580      	push	{r7, lr}
    d2c6:	b082      	sub	sp, #8
    d2c8:	af00      	add	r7, sp, #0
    d2ca:	6078      	str	r0, [r7, #4]
    if (!map->is_fixed) {
    d2cc:	687b      	ldr	r3, [r7, #4]
    d2ce:	781b      	ldrb	r3, [r3, #0]
    d2d0:	f003 0302 	and.w	r3, r3, #2
    d2d4:	b2db      	uxtb	r3, r3
    d2d6:	2b00      	cmp	r3, #0
    d2d8:	d104      	bne.n	d2e4 <mp_map_deinit+0x20>
        m_del(mp_map_elem_t, map->table, map->alloc);
    d2da:	687b      	ldr	r3, [r7, #4]
    d2dc:	689b      	ldr	r3, [r3, #8]
    d2de:	4618      	mov	r0, r3
    d2e0:	f7f3 f87a 	bl	3d8 <m_free>
    }
    map->used = map->alloc = 0;
    d2e4:	687b      	ldr	r3, [r7, #4]
    d2e6:	2200      	movs	r2, #0
    d2e8:	605a      	str	r2, [r3, #4]
    d2ea:	687a      	ldr	r2, [r7, #4]
    d2ec:	6813      	ldr	r3, [r2, #0]
    d2ee:	f36f 03df 	bfc	r3, #3, #29
    d2f2:	6013      	str	r3, [r2, #0]
}
    d2f4:	bf00      	nop
    d2f6:	3708      	adds	r7, #8
    d2f8:	46bd      	mov	sp, r7
    d2fa:	bd80      	pop	{r7, pc}

0000d2fc <mp_map_clear>:

void mp_map_clear(mp_map_t *map) {
    d2fc:	b580      	push	{r7, lr}
    d2fe:	b082      	sub	sp, #8
    d300:	af00      	add	r7, sp, #0
    d302:	6078      	str	r0, [r7, #4]
    if (!map->is_fixed) {
    d304:	687b      	ldr	r3, [r7, #4]
    d306:	781b      	ldrb	r3, [r3, #0]
    d308:	f003 0302 	and.w	r3, r3, #2
    d30c:	b2db      	uxtb	r3, r3
    d30e:	2b00      	cmp	r3, #0
    d310:	d104      	bne.n	d31c <mp_map_clear+0x20>
        m_del(mp_map_elem_t, map->table, map->alloc);
    d312:	687b      	ldr	r3, [r7, #4]
    d314:	689b      	ldr	r3, [r3, #8]
    d316:	4618      	mov	r0, r3
    d318:	f7f3 f85e 	bl	3d8 <m_free>
    }
    map->alloc = 0;
    d31c:	687b      	ldr	r3, [r7, #4]
    d31e:	2200      	movs	r2, #0
    d320:	605a      	str	r2, [r3, #4]
    map->used = 0;
    d322:	687a      	ldr	r2, [r7, #4]
    d324:	6813      	ldr	r3, [r2, #0]
    d326:	f36f 03df 	bfc	r3, #3, #29
    d32a:	6013      	str	r3, [r2, #0]
    map->all_keys_are_qstrs = 1;
    d32c:	687a      	ldr	r2, [r7, #4]
    d32e:	7813      	ldrb	r3, [r2, #0]
    d330:	f043 0301 	orr.w	r3, r3, #1
    d334:	7013      	strb	r3, [r2, #0]
    map->is_fixed = 0;
    d336:	687a      	ldr	r2, [r7, #4]
    d338:	7813      	ldrb	r3, [r2, #0]
    d33a:	f36f 0341 	bfc	r3, #1, #1
    d33e:	7013      	strb	r3, [r2, #0]
    map->table = NULL;
    d340:	687b      	ldr	r3, [r7, #4]
    d342:	2200      	movs	r2, #0
    d344:	609a      	str	r2, [r3, #8]
}
    d346:	bf00      	nop
    d348:	3708      	adds	r7, #8
    d34a:	46bd      	mov	sp, r7
    d34c:	bd80      	pop	{r7, pc}

0000d34e <mp_map_rehash>:

STATIC void mp_map_rehash(mp_map_t *map) {
    d34e:	b580      	push	{r7, lr}
    d350:	b088      	sub	sp, #32
    d352:	af00      	add	r7, sp, #0
    d354:	6078      	str	r0, [r7, #4]
    size_t old_alloc = map->alloc;
    d356:	687b      	ldr	r3, [r7, #4]
    d358:	685b      	ldr	r3, [r3, #4]
    d35a:	61bb      	str	r3, [r7, #24]
    size_t new_alloc = get_hash_alloc_greater_or_equal_to(map->alloc + 1);
    d35c:	687b      	ldr	r3, [r7, #4]
    d35e:	685b      	ldr	r3, [r3, #4]
    d360:	3301      	adds	r3, #1
    d362:	4618      	mov	r0, r3
    d364:	f7ff ff2a 	bl	d1bc <get_hash_alloc_greater_or_equal_to>
    d368:	6178      	str	r0, [r7, #20]
    DEBUG_printf("mp_map_rehash(%p): " UINT_FMT " -> " UINT_FMT "\n", map, old_alloc, new_alloc);
    mp_map_elem_t *old_table = map->table;
    d36a:	687b      	ldr	r3, [r7, #4]
    d36c:	689b      	ldr	r3, [r3, #8]
    d36e:	613b      	str	r3, [r7, #16]
    mp_map_elem_t *new_table = m_new0(mp_map_elem_t, new_alloc);
    d370:	697b      	ldr	r3, [r7, #20]
    d372:	00db      	lsls	r3, r3, #3
    d374:	4618      	mov	r0, r3
    d376:	f7f2 fff6 	bl	366 <m_malloc0>
    d37a:	60f8      	str	r0, [r7, #12]
    // If we reach this point, table resizing succeeded, now we can edit the old map.
    map->alloc = new_alloc;
    d37c:	687b      	ldr	r3, [r7, #4]
    d37e:	697a      	ldr	r2, [r7, #20]
    d380:	605a      	str	r2, [r3, #4]
    map->used = 0;
    d382:	687a      	ldr	r2, [r7, #4]
    d384:	6813      	ldr	r3, [r2, #0]
    d386:	f36f 03df 	bfc	r3, #3, #29
    d38a:	6013      	str	r3, [r2, #0]
    map->all_keys_are_qstrs = 1;
    d38c:	687a      	ldr	r2, [r7, #4]
    d38e:	7813      	ldrb	r3, [r2, #0]
    d390:	f043 0301 	orr.w	r3, r3, #1
    d394:	7013      	strb	r3, [r2, #0]
    map->table = new_table;
    d396:	687b      	ldr	r3, [r7, #4]
    d398:	68fa      	ldr	r2, [r7, #12]
    d39a:	609a      	str	r2, [r3, #8]
    for (size_t i = 0; i < old_alloc; i++) {
    d39c:	2300      	movs	r3, #0
    d39e:	61fb      	str	r3, [r7, #28]
    d3a0:	e021      	b.n	d3e6 <mp_map_rehash+0x98>
        if (old_table[i].key != MP_OBJ_NULL && old_table[i].key != MP_OBJ_SENTINEL) {
    d3a2:	69fb      	ldr	r3, [r7, #28]
    d3a4:	00db      	lsls	r3, r3, #3
    d3a6:	693a      	ldr	r2, [r7, #16]
    d3a8:	4413      	add	r3, r2
    d3aa:	681b      	ldr	r3, [r3, #0]
    d3ac:	2b00      	cmp	r3, #0
    d3ae:	d017      	beq.n	d3e0 <mp_map_rehash+0x92>
    d3b0:	69fb      	ldr	r3, [r7, #28]
    d3b2:	00db      	lsls	r3, r3, #3
    d3b4:	693a      	ldr	r2, [r7, #16]
    d3b6:	4413      	add	r3, r2
    d3b8:	681b      	ldr	r3, [r3, #0]
    d3ba:	2b08      	cmp	r3, #8
    d3bc:	d010      	beq.n	d3e0 <mp_map_rehash+0x92>
            mp_map_lookup(map, old_table[i].key, MP_MAP_LOOKUP_ADD_IF_NOT_FOUND)->value = old_table[i].value;
    d3be:	69fb      	ldr	r3, [r7, #28]
    d3c0:	00db      	lsls	r3, r3, #3
    d3c2:	693a      	ldr	r2, [r7, #16]
    d3c4:	4413      	add	r3, r2
    d3c6:	681b      	ldr	r3, [r3, #0]
    d3c8:	2201      	movs	r2, #1
    d3ca:	4619      	mov	r1, r3
    d3cc:	6878      	ldr	r0, [r7, #4]
    d3ce:	f000 f815 	bl	d3fc <mp_map_lookup>
    d3d2:	4601      	mov	r1, r0
    d3d4:	69fb      	ldr	r3, [r7, #28]
    d3d6:	00db      	lsls	r3, r3, #3
    d3d8:	693a      	ldr	r2, [r7, #16]
    d3da:	4413      	add	r3, r2
    d3dc:	685b      	ldr	r3, [r3, #4]
    d3de:	604b      	str	r3, [r1, #4]
    for (size_t i = 0; i < old_alloc; i++) {
    d3e0:	69fb      	ldr	r3, [r7, #28]
    d3e2:	3301      	adds	r3, #1
    d3e4:	61fb      	str	r3, [r7, #28]
    d3e6:	69fa      	ldr	r2, [r7, #28]
    d3e8:	69bb      	ldr	r3, [r7, #24]
    d3ea:	429a      	cmp	r2, r3
    d3ec:	d3d9      	bcc.n	d3a2 <mp_map_rehash+0x54>
        }
    }
    m_del(mp_map_elem_t, old_table, old_alloc);
    d3ee:	6938      	ldr	r0, [r7, #16]
    d3f0:	f7f2 fff2 	bl	3d8 <m_free>
}
    d3f4:	bf00      	nop
    d3f6:	3720      	adds	r7, #32
    d3f8:	46bd      	mov	sp, r7
    d3fa:	bd80      	pop	{r7, pc}

0000d3fc <mp_map_lookup>:
//  - returns NULL if not found, else the slot it was found in with key,value non-null
// MP_MAP_LOOKUP_ADD_IF_NOT_FOUND behaviour:
//  - returns slot, with key non-null and value=MP_OBJ_NULL if it was added
// MP_MAP_LOOKUP_REMOVE_IF_FOUND behaviour:
//  - returns NULL if not found, else the slot if was found in with key null and value non-null
mp_map_elem_t *mp_map_lookup(mp_map_t *map, mp_obj_t index, mp_map_lookup_kind_t lookup_kind) {
    d3fc:	b580      	push	{r7, lr}
    d3fe:	b08c      	sub	sp, #48	; 0x30
    d400:	af00      	add	r7, sp, #0
    d402:	60f8      	str	r0, [r7, #12]
    d404:	60b9      	str	r1, [r7, #8]
    d406:	607a      	str	r2, [r7, #4]
    // If the map is a fixed array then we must only be called for a lookup
    assert(!map->is_fixed || lookup_kind == MP_MAP_LOOKUP);
    d408:	68fb      	ldr	r3, [r7, #12]
    d40a:	781b      	ldrb	r3, [r3, #0]
    d40c:	f003 0302 	and.w	r3, r3, #2
    d410:	b2db      	uxtb	r3, r3
    d412:	2b00      	cmp	r3, #0
    d414:	d008      	beq.n	d428 <mp_map_lookup+0x2c>
    d416:	687b      	ldr	r3, [r7, #4]
    d418:	2b00      	cmp	r3, #0
    d41a:	d005      	beq.n	d428 <mp_map_lookup+0x2c>
    d41c:	4ba3      	ldr	r3, [pc, #652]	; (d6ac <mp_map_lookup+0x2b0>)
    d41e:	4aa4      	ldr	r2, [pc, #656]	; (d6b0 <mp_map_lookup+0x2b4>)
    d420:	2194      	movs	r1, #148	; 0x94
    d422:	48a4      	ldr	r0, [pc, #656]	; (d6b4 <mp_map_lookup+0x2b8>)
    d424:	f00d feca 	bl	1b1bc <__assert_func>

    // Work out if we can compare just pointers
    bool compare_only_ptrs = map->all_keys_are_qstrs;
    d428:	68fb      	ldr	r3, [r7, #12]
    d42a:	781b      	ldrb	r3, [r3, #0]
    d42c:	f3c3 0300 	ubfx	r3, r3, #0, #1
    d430:	b2db      	uxtb	r3, r3
    d432:	2b00      	cmp	r3, #0
    d434:	bf14      	ite	ne
    d436:	2301      	movne	r3, #1
    d438:	2300      	moveq	r3, #0
    d43a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (compare_only_ptrs) {
    d43e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    d442:	2b00      	cmp	r3, #0
    d444:	d019      	beq.n	d47a <mp_map_lookup+0x7e>
        if (MP_OBJ_IS_QSTR(index)) {
    d446:	68b8      	ldr	r0, [r7, #8]
    d448:	f7ff fe94 	bl	d174 <MP_OBJ_IS_QSTR>
    d44c:	4603      	mov	r3, r0
    d44e:	2b00      	cmp	r3, #0
    d450:	d113      	bne.n	d47a <mp_map_lookup+0x7e>
            // Index is a qstr, so can just do ptr comparison.
        } else if (MP_OBJ_IS_TYPE(index, &mp_type_str)) {
    d452:	68b8      	ldr	r0, [r7, #8]
    d454:	f7ff fea0 	bl	d198 <MP_OBJ_IS_OBJ>
    d458:	4603      	mov	r3, r0
    d45a:	2b00      	cmp	r3, #0
    d45c:	d008      	beq.n	d470 <mp_map_lookup+0x74>
    d45e:	68bb      	ldr	r3, [r7, #8]
    d460:	681b      	ldr	r3, [r3, #0]
    d462:	4a95      	ldr	r2, [pc, #596]	; (d6b8 <mp_map_lookup+0x2bc>)
    d464:	4293      	cmp	r3, r2
    d466:	d103      	bne.n	d470 <mp_map_lookup+0x74>
            // Index is a non-interned string.
            // We can either intern the string, or force a full equality comparison.
            // We chose the latter, since interning costs time and potentially RAM,
            // and it won't necessarily benefit subsequent calls because these calls
            // most likely won't pass the newly-interned string.
            compare_only_ptrs = false;
    d468:	2300      	movs	r3, #0
    d46a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    d46e:	e004      	b.n	d47a <mp_map_lookup+0x7e>
        } else if (lookup_kind != MP_MAP_LOOKUP_ADD_IF_NOT_FOUND) {
    d470:	687b      	ldr	r3, [r7, #4]
    d472:	2b01      	cmp	r3, #1
    d474:	d001      	beq.n	d47a <mp_map_lookup+0x7e>
            // If we are not adding, then we can return straight away a failed
            // lookup because we know that the index will never be found.
            return NULL;
    d476:	2300      	movs	r3, #0
    d478:	e130      	b.n	d6dc <mp_map_lookup+0x2e0>
        }
    }

    // if the map is an ordered array then we must do a brute force linear search
    if (map->is_ordered) {
    d47a:	68fb      	ldr	r3, [r7, #12]
    d47c:	781b      	ldrb	r3, [r3, #0]
    d47e:	f003 0304 	and.w	r3, r3, #4
    d482:	b2db      	uxtb	r3, r3
    d484:	2b00      	cmp	r3, #0
    d486:	d02c      	beq.n	d4e2 <mp_map_lookup+0xe6>
        for (mp_map_elem_t *elem = &map->table[0], *top = &map->table[map->used]; elem < top; elem++) {
    d488:	68fb      	ldr	r3, [r7, #12]
    d48a:	689b      	ldr	r3, [r3, #8]
    d48c:	62bb      	str	r3, [r7, #40]	; 0x28
    d48e:	68fb      	ldr	r3, [r7, #12]
    d490:	689a      	ldr	r2, [r3, #8]
    d492:	68fb      	ldr	r3, [r7, #12]
    d494:	681b      	ldr	r3, [r3, #0]
    d496:	f3c3 03dc 	ubfx	r3, r3, #3, #29
    d49a:	00db      	lsls	r3, r3, #3
    d49c:	4413      	add	r3, r2
    d49e:	617b      	str	r3, [r7, #20]
    d4a0:	e019      	b.n	d4d6 <mp_map_lookup+0xda>
            if (elem->key == index || (!compare_only_ptrs && mp_obj_equal(elem->key, index))) {
    d4a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    d4a4:	681a      	ldr	r2, [r3, #0]
    d4a6:	68bb      	ldr	r3, [r7, #8]
    d4a8:	429a      	cmp	r2, r3
    d4aa:	d00f      	beq.n	d4cc <mp_map_lookup+0xd0>
    d4ac:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    d4b0:	f083 0301 	eor.w	r3, r3, #1
    d4b4:	b2db      	uxtb	r3, r3
    d4b6:	2b00      	cmp	r3, #0
    d4b8:	d00a      	beq.n	d4d0 <mp_map_lookup+0xd4>
    d4ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
    d4bc:	681b      	ldr	r3, [r3, #0]
    d4be:	68b9      	ldr	r1, [r7, #8]
    d4c0:	4618      	mov	r0, r3
    d4c2:	f000 fa97 	bl	d9f4 <mp_obj_equal>
    d4c6:	4603      	mov	r3, r0
    d4c8:	2b00      	cmp	r3, #0
    d4ca:	d001      	beq.n	d4d0 <mp_map_lookup+0xd4>
                    elem = &map->table[map->used];
                    elem->key = MP_OBJ_NULL;
                    elem->value = value;
                }
                #endif
                return elem;
    d4cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
    d4ce:	e105      	b.n	d6dc <mp_map_lookup+0x2e0>
        for (mp_map_elem_t *elem = &map->table[0], *top = &map->table[map->used]; elem < top; elem++) {
    d4d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
    d4d2:	3308      	adds	r3, #8
    d4d4:	62bb      	str	r3, [r7, #40]	; 0x28
    d4d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
    d4d8:	697b      	ldr	r3, [r7, #20]
    d4da:	429a      	cmp	r2, r3
    d4dc:	d3e1      	bcc.n	d4a2 <mp_map_lookup+0xa6>
        if (!MP_OBJ_IS_QSTR(index)) {
            map->all_keys_are_qstrs = 0;
        }
        return elem;
        #else
        return NULL;
    d4de:	2300      	movs	r3, #0
    d4e0:	e0fc      	b.n	d6dc <mp_map_lookup+0x2e0>
        #endif
    }

    // map is a hash table (not an ordered array), so do a hash lookup

    if (map->alloc == 0) {
    d4e2:	68fb      	ldr	r3, [r7, #12]
    d4e4:	685b      	ldr	r3, [r3, #4]
    d4e6:	2b00      	cmp	r3, #0
    d4e8:	d108      	bne.n	d4fc <mp_map_lookup+0x100>
        if (lookup_kind == MP_MAP_LOOKUP_ADD_IF_NOT_FOUND) {
    d4ea:	687b      	ldr	r3, [r7, #4]
    d4ec:	2b01      	cmp	r3, #1
    d4ee:	d103      	bne.n	d4f8 <mp_map_lookup+0xfc>
            mp_map_rehash(map);
    d4f0:	68f8      	ldr	r0, [r7, #12]
    d4f2:	f7ff ff2c 	bl	d34e <mp_map_rehash>
    d4f6:	e001      	b.n	d4fc <mp_map_lookup+0x100>
        } else {
            return NULL;
    d4f8:	2300      	movs	r3, #0
    d4fa:	e0ef      	b.n	d6dc <mp_map_lookup+0x2e0>
        }
    }

    // get hash of index, with fast path for common case of qstr
    mp_uint_t hash;
    if (MP_OBJ_IS_QSTR(index)) {
    d4fc:	68b8      	ldr	r0, [r7, #8]
    d4fe:	f7ff fe39 	bl	d174 <MP_OBJ_IS_QSTR>
    d502:	4603      	mov	r3, r0
    d504:	2b00      	cmp	r3, #0
    d506:	d006      	beq.n	d516 <mp_map_lookup+0x11a>
        hash = qstr_hash(MP_OBJ_QSTR_VALUE(index));
    d508:	68bb      	ldr	r3, [r7, #8]
    d50a:	089b      	lsrs	r3, r3, #2
    d50c:	4618      	mov	r0, r3
    d50e:	f7f3 fe45 	bl	119c <qstr_hash>
    d512:	6278      	str	r0, [r7, #36]	; 0x24
    d514:	e006      	b.n	d524 <mp_map_lookup+0x128>
    } else {
        hash = MP_OBJ_SMALL_INT_VALUE(mp_unary_op(MP_UNARY_OP_HASH, index));
    d516:	68b9      	ldr	r1, [r7, #8]
    d518:	2006      	movs	r0, #6
    d51a:	f7fe f8cb 	bl	b6b4 <mp_unary_op>
    d51e:	4603      	mov	r3, r0
    d520:	105b      	asrs	r3, r3, #1
    d522:	627b      	str	r3, [r7, #36]	; 0x24
    }

    size_t pos = hash % map->alloc;
    d524:	68fb      	ldr	r3, [r7, #12]
    d526:	685a      	ldr	r2, [r3, #4]
    d528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    d52a:	fbb3 f1f2 	udiv	r1, r3, r2
    d52e:	fb02 f201 	mul.w	r2, r2, r1
    d532:	1a9b      	subs	r3, r3, r2
    d534:	623b      	str	r3, [r7, #32]
    size_t start_pos = pos;
    d536:	6a3b      	ldr	r3, [r7, #32]
    d538:	61fb      	str	r3, [r7, #28]
    mp_map_elem_t *avail_slot = NULL;
    d53a:	2300      	movs	r3, #0
    d53c:	61bb      	str	r3, [r7, #24]
    for (;;) {
        mp_map_elem_t *slot = &map->table[pos];
    d53e:	68fb      	ldr	r3, [r7, #12]
    d540:	689a      	ldr	r2, [r3, #8]
    d542:	6a3b      	ldr	r3, [r7, #32]
    d544:	00db      	lsls	r3, r3, #3
    d546:	4413      	add	r3, r2
    d548:	613b      	str	r3, [r7, #16]
        if (slot->key == MP_OBJ_NULL) {
    d54a:	693b      	ldr	r3, [r7, #16]
    d54c:	681b      	ldr	r3, [r3, #0]
    d54e:	2b00      	cmp	r3, #0
    d550:	d12b      	bne.n	d5aa <mp_map_lookup+0x1ae>
            // found NULL slot, so index is not in table
            if (lookup_kind == MP_MAP_LOOKUP_ADD_IF_NOT_FOUND) {
    d552:	687b      	ldr	r3, [r7, #4]
    d554:	2b01      	cmp	r3, #1
    d556:	d126      	bne.n	d5a6 <mp_map_lookup+0x1aa>
                map->used += 1;
    d558:	68fb      	ldr	r3, [r7, #12]
    d55a:	681b      	ldr	r3, [r3, #0]
    d55c:	f3c3 03dc 	ubfx	r3, r3, #3, #29
    d560:	3301      	adds	r3, #1
    d562:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
    d566:	68fa      	ldr	r2, [r7, #12]
    d568:	6813      	ldr	r3, [r2, #0]
    d56a:	f361 03df 	bfi	r3, r1, #3, #29
    d56e:	6013      	str	r3, [r2, #0]
                if (avail_slot == NULL) {
    d570:	69bb      	ldr	r3, [r7, #24]
    d572:	2b00      	cmp	r3, #0
    d574:	d101      	bne.n	d57a <mp_map_lookup+0x17e>
                    avail_slot = slot;
    d576:	693b      	ldr	r3, [r7, #16]
    d578:	61bb      	str	r3, [r7, #24]
                }
                avail_slot->key = index;
    d57a:	69bb      	ldr	r3, [r7, #24]
    d57c:	68ba      	ldr	r2, [r7, #8]
    d57e:	601a      	str	r2, [r3, #0]
                avail_slot->value = MP_OBJ_NULL;
    d580:	69bb      	ldr	r3, [r7, #24]
    d582:	2200      	movs	r2, #0
    d584:	605a      	str	r2, [r3, #4]
                if (!MP_OBJ_IS_QSTR(index)) {
    d586:	68b8      	ldr	r0, [r7, #8]
    d588:	f7ff fdf4 	bl	d174 <MP_OBJ_IS_QSTR>
    d58c:	4603      	mov	r3, r0
    d58e:	f083 0301 	eor.w	r3, r3, #1
    d592:	b2db      	uxtb	r3, r3
    d594:	2b00      	cmp	r3, #0
    d596:	d004      	beq.n	d5a2 <mp_map_lookup+0x1a6>
                    map->all_keys_are_qstrs = 0;
    d598:	68fa      	ldr	r2, [r7, #12]
    d59a:	7813      	ldrb	r3, [r2, #0]
    d59c:	f36f 0300 	bfc	r3, #0, #1
    d5a0:	7013      	strb	r3, [r2, #0]
                }
                return avail_slot;
    d5a2:	69bb      	ldr	r3, [r7, #24]
    d5a4:	e09a      	b.n	d6dc <mp_map_lookup+0x2e0>
            } else {
                return NULL;
    d5a6:	2300      	movs	r3, #0
    d5a8:	e098      	b.n	d6dc <mp_map_lookup+0x2e0>
            }
        } else if (slot->key == MP_OBJ_SENTINEL) {
    d5aa:	693b      	ldr	r3, [r7, #16]
    d5ac:	681b      	ldr	r3, [r3, #0]
    d5ae:	2b08      	cmp	r3, #8
    d5b0:	d105      	bne.n	d5be <mp_map_lookup+0x1c2>
            // found deleted slot, remember for later
            if (avail_slot == NULL) {
    d5b2:	69bb      	ldr	r3, [r7, #24]
    d5b4:	2b00      	cmp	r3, #0
    d5b6:	d141      	bne.n	d63c <mp_map_lookup+0x240>
                avail_slot = slot;
    d5b8:	693b      	ldr	r3, [r7, #16]
    d5ba:	61bb      	str	r3, [r7, #24]
    d5bc:	e03e      	b.n	d63c <mp_map_lookup+0x240>
            }
        } else if (slot->key == index || (!compare_only_ptrs && mp_obj_equal(slot->key, index))) {
    d5be:	693b      	ldr	r3, [r7, #16]
    d5c0:	681a      	ldr	r2, [r3, #0]
    d5c2:	68bb      	ldr	r3, [r7, #8]
    d5c4:	429a      	cmp	r2, r3
    d5c6:	d00f      	beq.n	d5e8 <mp_map_lookup+0x1ec>
    d5c8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    d5cc:	f083 0301 	eor.w	r3, r3, #1
    d5d0:	b2db      	uxtb	r3, r3
    d5d2:	2b00      	cmp	r3, #0
    d5d4:	d032      	beq.n	d63c <mp_map_lookup+0x240>
    d5d6:	693b      	ldr	r3, [r7, #16]
    d5d8:	681b      	ldr	r3, [r3, #0]
    d5da:	68b9      	ldr	r1, [r7, #8]
    d5dc:	4618      	mov	r0, r3
    d5de:	f000 fa09 	bl	d9f4 <mp_obj_equal>
    d5e2:	4603      	mov	r3, r0
    d5e4:	2b00      	cmp	r3, #0
    d5e6:	d029      	beq.n	d63c <mp_map_lookup+0x240>
            // found index
            // Note: CPython does not replace the index; try x={True:'true'};x[1]='one';x
            if (lookup_kind == MP_MAP_LOOKUP_REMOVE_IF_FOUND) {
    d5e8:	687b      	ldr	r3, [r7, #4]
    d5ea:	2b02      	cmp	r3, #2
    d5ec:	d124      	bne.n	d638 <mp_map_lookup+0x23c>
                // delete element in this slot
                map->used--;
    d5ee:	68fb      	ldr	r3, [r7, #12]
    d5f0:	681b      	ldr	r3, [r3, #0]
    d5f2:	f3c3 03dc 	ubfx	r3, r3, #3, #29
    d5f6:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
    d5fa:	3b01      	subs	r3, #1
    d5fc:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
    d600:	68f9      	ldr	r1, [r7, #12]
    d602:	680a      	ldr	r2, [r1, #0]
    d604:	f363 02df 	bfi	r2, r3, #3, #29
    d608:	600a      	str	r2, [r1, #0]
                if (map->table[(pos + 1) % map->alloc].key == MP_OBJ_NULL) {
    d60a:	68fb      	ldr	r3, [r7, #12]
    d60c:	6899      	ldr	r1, [r3, #8]
    d60e:	6a3b      	ldr	r3, [r7, #32]
    d610:	3301      	adds	r3, #1
    d612:	68fa      	ldr	r2, [r7, #12]
    d614:	6852      	ldr	r2, [r2, #4]
    d616:	fbb3 f0f2 	udiv	r0, r3, r2
    d61a:	fb02 f200 	mul.w	r2, r2, r0
    d61e:	1a9b      	subs	r3, r3, r2
    d620:	00db      	lsls	r3, r3, #3
    d622:	440b      	add	r3, r1
    d624:	681b      	ldr	r3, [r3, #0]
    d626:	2b00      	cmp	r3, #0
    d628:	d103      	bne.n	d632 <mp_map_lookup+0x236>
                    // optimisation if next slot is empty
                    slot->key = MP_OBJ_NULL;
    d62a:	693b      	ldr	r3, [r7, #16]
    d62c:	2200      	movs	r2, #0
    d62e:	601a      	str	r2, [r3, #0]
    d630:	e002      	b.n	d638 <mp_map_lookup+0x23c>
                } else {
                    slot->key = MP_OBJ_SENTINEL;
    d632:	693b      	ldr	r3, [r7, #16]
    d634:	2208      	movs	r2, #8
    d636:	601a      	str	r2, [r3, #0]
                }
                // keep slot->value so that caller can access it if needed
            }
            return slot;
    d638:	693b      	ldr	r3, [r7, #16]
    d63a:	e04f      	b.n	d6dc <mp_map_lookup+0x2e0>
        }

        // not yet found, keep searching in this table
        pos = (pos + 1) % map->alloc;
    d63c:	6a3b      	ldr	r3, [r7, #32]
    d63e:	3301      	adds	r3, #1
    d640:	68fa      	ldr	r2, [r7, #12]
    d642:	6852      	ldr	r2, [r2, #4]
    d644:	fbb3 f1f2 	udiv	r1, r3, r2
    d648:	fb02 f201 	mul.w	r2, r2, r1
    d64c:	1a9b      	subs	r3, r3, r2
    d64e:	623b      	str	r3, [r7, #32]

        if (pos == start_pos) {
    d650:	6a3a      	ldr	r2, [r7, #32]
    d652:	69fb      	ldr	r3, [r7, #28]
    d654:	429a      	cmp	r2, r3
    d656:	f47f af72 	bne.w	d53e <mp_map_lookup+0x142>
            // search got back to starting position, so index is not in table
            if (lookup_kind == MP_MAP_LOOKUP_ADD_IF_NOT_FOUND) {
    d65a:	687b      	ldr	r3, [r7, #4]
    d65c:	2b01      	cmp	r3, #1
    d65e:	d13c      	bne.n	d6da <mp_map_lookup+0x2de>
                if (avail_slot != NULL) {
    d660:	69bb      	ldr	r3, [r7, #24]
    d662:	2b00      	cmp	r3, #0
    d664:	d02a      	beq.n	d6bc <mp_map_lookup+0x2c0>
                    // there was an available slot, so use that
                    map->used++;
    d666:	68fb      	ldr	r3, [r7, #12]
    d668:	681b      	ldr	r3, [r3, #0]
    d66a:	f3c3 03dc 	ubfx	r3, r3, #3, #29
    d66e:	1c5a      	adds	r2, r3, #1
    d670:	f022 4260 	bic.w	r2, r2, #3758096384	; 0xe0000000
    d674:	68f9      	ldr	r1, [r7, #12]
    d676:	680b      	ldr	r3, [r1, #0]
    d678:	f362 03df 	bfi	r3, r2, #3, #29
    d67c:	600b      	str	r3, [r1, #0]
                    avail_slot->key = index;
    d67e:	69bb      	ldr	r3, [r7, #24]
    d680:	68ba      	ldr	r2, [r7, #8]
    d682:	601a      	str	r2, [r3, #0]
                    avail_slot->value = MP_OBJ_NULL;
    d684:	69bb      	ldr	r3, [r7, #24]
    d686:	2200      	movs	r2, #0
    d688:	605a      	str	r2, [r3, #4]
                    if (!MP_OBJ_IS_QSTR(index)) {
    d68a:	68b8      	ldr	r0, [r7, #8]
    d68c:	f7ff fd72 	bl	d174 <MP_OBJ_IS_QSTR>
    d690:	4603      	mov	r3, r0
    d692:	f083 0301 	eor.w	r3, r3, #1
    d696:	b2db      	uxtb	r3, r3
    d698:	2b00      	cmp	r3, #0
    d69a:	d004      	beq.n	d6a6 <mp_map_lookup+0x2aa>
                        map->all_keys_are_qstrs = 0;
    d69c:	68fa      	ldr	r2, [r7, #12]
    d69e:	7813      	ldrb	r3, [r2, #0]
    d6a0:	f36f 0300 	bfc	r3, #0, #1
    d6a4:	7013      	strb	r3, [r2, #0]
                    }
                    return avail_slot;
    d6a6:	69bb      	ldr	r3, [r7, #24]
    d6a8:	e018      	b.n	d6dc <mp_map_lookup+0x2e0>
    d6aa:	bf00      	nop
    d6ac:	0001f774 	.word	0x0001f774
    d6b0:	0001f7b4 	.word	0x0001f7b4
    d6b4:	0001f7a4 	.word	0x0001f7a4
    d6b8:	00021964 	.word	0x00021964
                } else {
                    // not enough room in table, rehash it
                    mp_map_rehash(map);
    d6bc:	68f8      	ldr	r0, [r7, #12]
    d6be:	f7ff fe46 	bl	d34e <mp_map_rehash>
                    // restart the search for the new element
                    start_pos = pos = hash % map->alloc;
    d6c2:	68fb      	ldr	r3, [r7, #12]
    d6c4:	685a      	ldr	r2, [r3, #4]
    d6c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    d6c8:	fbb3 f1f2 	udiv	r1, r3, r2
    d6cc:	fb02 f201 	mul.w	r2, r2, r1
    d6d0:	1a9b      	subs	r3, r3, r2
    d6d2:	623b      	str	r3, [r7, #32]
    d6d4:	6a3b      	ldr	r3, [r7, #32]
    d6d6:	61fb      	str	r3, [r7, #28]
    d6d8:	e731      	b.n	d53e <mp_map_lookup+0x142>
                }
            } else {
                return NULL;
    d6da:	2300      	movs	r3, #0
            }
        }
    }
}
    d6dc:	4618      	mov	r0, r3
    d6de:	3730      	adds	r7, #48	; 0x30
    d6e0:	46bd      	mov	sp, r7
    d6e2:	bd80      	pop	{r7, pc}

0000d6e4 <MP_OBJ_IS_SMALL_INT>:
    { return ((((mp_int_t)(o)) & 1) != 0); }
    d6e4:	b480      	push	{r7}
    d6e6:	b083      	sub	sp, #12
    d6e8:	af00      	add	r7, sp, #0
    d6ea:	6078      	str	r0, [r7, #4]
    d6ec:	687b      	ldr	r3, [r7, #4]
    d6ee:	f003 0301 	and.w	r3, r3, #1
    d6f2:	2b00      	cmp	r3, #0
    d6f4:	bf14      	ite	ne
    d6f6:	2301      	movne	r3, #1
    d6f8:	2300      	moveq	r3, #0
    d6fa:	b2db      	uxtb	r3, r3
    d6fc:	4618      	mov	r0, r3
    d6fe:	370c      	adds	r7, #12
    d700:	46bd      	mov	sp, r7
    d702:	f85d 7b04 	ldr.w	r7, [sp], #4
    d706:	4770      	bx	lr

0000d708 <MP_OBJ_IS_QSTR>:
    { return ((((mp_int_t)(o)) & 3) == 2); }
    d708:	b480      	push	{r7}
    d70a:	b083      	sub	sp, #12
    d70c:	af00      	add	r7, sp, #0
    d70e:	6078      	str	r0, [r7, #4]
    d710:	687b      	ldr	r3, [r7, #4]
    d712:	f003 0303 	and.w	r3, r3, #3
    d716:	2b02      	cmp	r3, #2
    d718:	bf0c      	ite	eq
    d71a:	2301      	moveq	r3, #1
    d71c:	2300      	movne	r3, #0
    d71e:	b2db      	uxtb	r3, r3
    d720:	4618      	mov	r0, r3
    d722:	370c      	adds	r7, #12
    d724:	46bd      	mov	sp, r7
    d726:	f85d 7b04 	ldr.w	r7, [sp], #4
    d72a:	4770      	bx	lr

0000d72c <MP_OBJ_IS_OBJ>:
    { return ((((mp_int_t)(o)) & 3) == 0); }
    d72c:	b480      	push	{r7}
    d72e:	b083      	sub	sp, #12
    d730:	af00      	add	r7, sp, #0
    d732:	6078      	str	r0, [r7, #4]
    d734:	687b      	ldr	r3, [r7, #4]
    d736:	f003 0303 	and.w	r3, r3, #3
    d73a:	2b00      	cmp	r3, #0
    d73c:	bf0c      	ite	eq
    d73e:	2301      	moveq	r3, #1
    d740:	2300      	movne	r3, #0
    d742:	b2db      	uxtb	r3, r3
    d744:	4618      	mov	r0, r3
    d746:	370c      	adds	r7, #12
    d748:	46bd      	mov	sp, r7
    d74a:	f85d 7b04 	ldr.w	r7, [sp], #4
    d74e:	4770      	bx	lr

0000d750 <mp_obj_get_type>:
#include "py/objstr.h"
#include "py/runtime.h"
#include "py/stackctrl.h"
#include "py/stream.h" // for mp_obj_print

mp_obj_type_t *mp_obj_get_type(mp_const_obj_t o_in) {
    d750:	b580      	push	{r7, lr}
    d752:	b084      	sub	sp, #16
    d754:	af00      	add	r7, sp, #0
    d756:	6078      	str	r0, [r7, #4]
    if (MP_OBJ_IS_SMALL_INT(o_in)) {
    d758:	6878      	ldr	r0, [r7, #4]
    d75a:	f7ff ffc3 	bl	d6e4 <MP_OBJ_IS_SMALL_INT>
    d75e:	4603      	mov	r3, r0
    d760:	2b00      	cmp	r3, #0
    d762:	d001      	beq.n	d768 <mp_obj_get_type+0x18>
        return (mp_obj_type_t*)&mp_type_int;
    d764:	4b08      	ldr	r3, [pc, #32]	; (d788 <mp_obj_get_type+0x38>)
    d766:	e00b      	b.n	d780 <mp_obj_get_type+0x30>
    } else if (MP_OBJ_IS_QSTR(o_in)) {
    d768:	6878      	ldr	r0, [r7, #4]
    d76a:	f7ff ffcd 	bl	d708 <MP_OBJ_IS_QSTR>
    d76e:	4603      	mov	r3, r0
    d770:	2b00      	cmp	r3, #0
    d772:	d001      	beq.n	d778 <mp_obj_get_type+0x28>
        return (mp_obj_type_t*)&mp_type_str;
    d774:	4b05      	ldr	r3, [pc, #20]	; (d78c <mp_obj_get_type+0x3c>)
    d776:	e003      	b.n	d780 <mp_obj_get_type+0x30>
    #if MICROPY_PY_BUILTINS_FLOAT
    } else if (mp_obj_is_float(o_in)) {
        return (mp_obj_type_t*)&mp_type_float;
    #endif
    } else {
        const mp_obj_base_t *o = MP_OBJ_TO_PTR(o_in);
    d778:	687b      	ldr	r3, [r7, #4]
    d77a:	60fb      	str	r3, [r7, #12]
        return (mp_obj_type_t*)o->type;
    d77c:	68fb      	ldr	r3, [r7, #12]
    d77e:	681b      	ldr	r3, [r3, #0]
    }
}
    d780:	4618      	mov	r0, r3
    d782:	3710      	adds	r7, #16
    d784:	46bd      	mov	sp, r7
    d786:	bd80      	pop	{r7, pc}
    d788:	00020d10 	.word	0x00020d10
    d78c:	00021964 	.word	0x00021964

0000d790 <mp_obj_get_type_str>:

const char *mp_obj_get_type_str(mp_const_obj_t o_in) {
    d790:	b580      	push	{r7, lr}
    d792:	b082      	sub	sp, #8
    d794:	af00      	add	r7, sp, #0
    d796:	6078      	str	r0, [r7, #4]
    return qstr_str(mp_obj_get_type(o_in)->name);
    d798:	6878      	ldr	r0, [r7, #4]
    d79a:	f7ff ffd9 	bl	d750 <mp_obj_get_type>
    d79e:	4603      	mov	r3, r0
    d7a0:	685b      	ldr	r3, [r3, #4]
    d7a2:	4618      	mov	r0, r3
    d7a4:	f7f3 fd16 	bl	11d4 <qstr_str>
    d7a8:	4603      	mov	r3, r0
}
    d7aa:	4618      	mov	r0, r3
    d7ac:	3708      	adds	r7, #8
    d7ae:	46bd      	mov	sp, r7
    d7b0:	bd80      	pop	{r7, pc}

0000d7b2 <mp_obj_print_helper>:

void mp_obj_print_helper(const mp_print_t *print, mp_obj_t o_in, mp_print_kind_t kind) {
    d7b2:	b580      	push	{r7, lr}
    d7b4:	b086      	sub	sp, #24
    d7b6:	af00      	add	r7, sp, #0
    d7b8:	60f8      	str	r0, [r7, #12]
    d7ba:	60b9      	str	r1, [r7, #8]
    d7bc:	607a      	str	r2, [r7, #4]
    // There can be data structures nested too deep, or just recursive
    MP_STACK_CHECK();
#ifndef NDEBUG
    if (o_in == MP_OBJ_NULL) {
    d7be:	68bb      	ldr	r3, [r7, #8]
    d7c0:	2b00      	cmp	r3, #0
    d7c2:	d104      	bne.n	d7ce <mp_obj_print_helper+0x1c>
        mp_print_str(print, "(nil)");
    d7c4:	490e      	ldr	r1, [pc, #56]	; (d800 <mp_obj_print_helper+0x4e>)
    d7c6:	68f8      	ldr	r0, [r7, #12]
    d7c8:	f7f4 f842 	bl	1850 <mp_print_str>
        return;
    d7cc:	e015      	b.n	d7fa <mp_obj_print_helper+0x48>
    }
#endif
    mp_obj_type_t *type = mp_obj_get_type(o_in);
    d7ce:	68b8      	ldr	r0, [r7, #8]
    d7d0:	f7ff ffbe 	bl	d750 <mp_obj_get_type>
    d7d4:	6178      	str	r0, [r7, #20]
    if (type->print != NULL) {
    d7d6:	697b      	ldr	r3, [r7, #20]
    d7d8:	689b      	ldr	r3, [r3, #8]
    d7da:	2b00      	cmp	r3, #0
    d7dc:	d006      	beq.n	d7ec <mp_obj_print_helper+0x3a>
        type->print((mp_print_t*)print, o_in, kind);
    d7de:	697b      	ldr	r3, [r7, #20]
    d7e0:	689b      	ldr	r3, [r3, #8]
    d7e2:	687a      	ldr	r2, [r7, #4]
    d7e4:	68b9      	ldr	r1, [r7, #8]
    d7e6:	68f8      	ldr	r0, [r7, #12]
    d7e8:	4798      	blx	r3
    d7ea:	e006      	b.n	d7fa <mp_obj_print_helper+0x48>
    } else {
        mp_printf(print, "<%q>", type->name);
    d7ec:	697b      	ldr	r3, [r7, #20]
    d7ee:	685b      	ldr	r3, [r3, #4]
    d7f0:	461a      	mov	r2, r3
    d7f2:	4904      	ldr	r1, [pc, #16]	; (d804 <mp_obj_print_helper+0x52>)
    d7f4:	68f8      	ldr	r0, [r7, #12]
    d7f6:	f7f4 fb3d 	bl	1e74 <mp_printf>
    }
}
    d7fa:	3718      	adds	r7, #24
    d7fc:	46bd      	mov	sp, r7
    d7fe:	bd80      	pop	{r7, pc}
    d800:	0001f7c4 	.word	0x0001f7c4
    d804:	0001f7cc 	.word	0x0001f7cc

0000d808 <mp_obj_print>:

void mp_obj_print(mp_obj_t o_in, mp_print_kind_t kind) {
    d808:	b580      	push	{r7, lr}
    d80a:	b082      	sub	sp, #8
    d80c:	af00      	add	r7, sp, #0
    d80e:	6078      	str	r0, [r7, #4]
    d810:	6039      	str	r1, [r7, #0]
    mp_obj_print_helper(MP_PYTHON_PRINTER, o_in, kind);
    d812:	683a      	ldr	r2, [r7, #0]
    d814:	6879      	ldr	r1, [r7, #4]
    d816:	4803      	ldr	r0, [pc, #12]	; (d824 <mp_obj_print+0x1c>)
    d818:	f7ff ffcb 	bl	d7b2 <mp_obj_print_helper>
}
    d81c:	bf00      	nop
    d81e:	3708      	adds	r7, #8
    d820:	46bd      	mov	sp, r7
    d822:	bd80      	pop	{r7, pc}
    d824:	0001d5ac 	.word	0x0001d5ac

0000d828 <mp_obj_print_exception>:

// helper function to print an exception with traceback
void mp_obj_print_exception(const mp_print_t *print, mp_obj_t exc) {
    d828:	b580      	push	{r7, lr}
    d82a:	b086      	sub	sp, #24
    d82c:	af00      	add	r7, sp, #0
    d82e:	6078      	str	r0, [r7, #4]
    d830:	6039      	str	r1, [r7, #0]
    if (mp_obj_is_exception_instance(exc)) {
    d832:	6838      	ldr	r0, [r7, #0]
    d834:	f001 ff04 	bl	f640 <mp_obj_is_exception_instance>
    d838:	4603      	mov	r3, r0
    d83a:	2b00      	cmp	r3, #0
    d83c:	d047      	beq.n	d8ce <mp_obj_print_exception+0xa6>
        size_t n, *values;
        mp_obj_exception_get_traceback(exc, &n, &values);
    d83e:	f107 0208 	add.w	r2, r7, #8
    d842:	f107 030c 	add.w	r3, r7, #12
    d846:	4619      	mov	r1, r3
    d848:	6838      	ldr	r0, [r7, #0]
    d84a:	f001 ffcb 	bl	f7e4 <mp_obj_exception_get_traceback>
        if (n > 0) {
    d84e:	68fb      	ldr	r3, [r7, #12]
    d850:	2b00      	cmp	r3, #0
    d852:	d03c      	beq.n	d8ce <mp_obj_print_exception+0xa6>
            assert(n % 3 == 0);
    d854:	68f9      	ldr	r1, [r7, #12]
    d856:	4b24      	ldr	r3, [pc, #144]	; (d8e8 <mp_obj_print_exception+0xc0>)
    d858:	fba3 2301 	umull	r2, r3, r3, r1
    d85c:	085a      	lsrs	r2, r3, #1
    d85e:	4613      	mov	r3, r2
    d860:	005b      	lsls	r3, r3, #1
    d862:	4413      	add	r3, r2
    d864:	1aca      	subs	r2, r1, r3
    d866:	2a00      	cmp	r2, #0
    d868:	d005      	beq.n	d876 <mp_obj_print_exception+0x4e>
    d86a:	4b20      	ldr	r3, [pc, #128]	; (d8ec <mp_obj_print_exception+0xc4>)
    d86c:	4a20      	ldr	r2, [pc, #128]	; (d8f0 <mp_obj_print_exception+0xc8>)
    d86e:	2156      	movs	r1, #86	; 0x56
    d870:	4820      	ldr	r0, [pc, #128]	; (d8f4 <mp_obj_print_exception+0xcc>)
    d872:	f00d fca3 	bl	1b1bc <__assert_func>
            mp_print_str(print, "Traceback (most recent call last):\n");
    d876:	4920      	ldr	r1, [pc, #128]	; (d8f8 <mp_obj_print_exception+0xd0>)
    d878:	6878      	ldr	r0, [r7, #4]
    d87a:	f7f3 ffe9 	bl	1850 <mp_print_str>
            for (int i = n - 3; i >= 0; i -= 3) {
    d87e:	68fb      	ldr	r3, [r7, #12]
    d880:	3b03      	subs	r3, #3
    d882:	617b      	str	r3, [r7, #20]
    d884:	e020      	b.n	d8c8 <mp_obj_print_exception+0xa0>
#if MICROPY_ENABLE_SOURCE_LINE
                mp_printf(print, "  File \"%q\", line %d", values[i], (int)values[i + 1]);
#else
                mp_printf(print, "  File \"%q\"", values[i]);
    d886:	68ba      	ldr	r2, [r7, #8]
    d888:	697b      	ldr	r3, [r7, #20]
    d88a:	009b      	lsls	r3, r3, #2
    d88c:	4413      	add	r3, r2
    d88e:	681b      	ldr	r3, [r3, #0]
    d890:	461a      	mov	r2, r3
    d892:	491a      	ldr	r1, [pc, #104]	; (d8fc <mp_obj_print_exception+0xd4>)
    d894:	6878      	ldr	r0, [r7, #4]
    d896:	f7f4 faed 	bl	1e74 <mp_printf>
#endif
                // the block name can be NULL if it's unknown
                qstr block = values[i + 2];
    d89a:	68ba      	ldr	r2, [r7, #8]
    d89c:	697b      	ldr	r3, [r7, #20]
    d89e:	3302      	adds	r3, #2
    d8a0:	009b      	lsls	r3, r3, #2
    d8a2:	4413      	add	r3, r2
    d8a4:	681b      	ldr	r3, [r3, #0]
    d8a6:	613b      	str	r3, [r7, #16]
                if (block == MP_QSTR_NULL) {
    d8a8:	693b      	ldr	r3, [r7, #16]
    d8aa:	2b00      	cmp	r3, #0
    d8ac:	d104      	bne.n	d8b8 <mp_obj_print_exception+0x90>
                    mp_print_str(print, "\n");
    d8ae:	4914      	ldr	r1, [pc, #80]	; (d900 <mp_obj_print_exception+0xd8>)
    d8b0:	6878      	ldr	r0, [r7, #4]
    d8b2:	f7f3 ffcd 	bl	1850 <mp_print_str>
    d8b6:	e004      	b.n	d8c2 <mp_obj_print_exception+0x9a>
                } else {
                    mp_printf(print, ", in %q\n", block);
    d8b8:	693a      	ldr	r2, [r7, #16]
    d8ba:	4912      	ldr	r1, [pc, #72]	; (d904 <mp_obj_print_exception+0xdc>)
    d8bc:	6878      	ldr	r0, [r7, #4]
    d8be:	f7f4 fad9 	bl	1e74 <mp_printf>
            for (int i = n - 3; i >= 0; i -= 3) {
    d8c2:	697b      	ldr	r3, [r7, #20]
    d8c4:	3b03      	subs	r3, #3
    d8c6:	617b      	str	r3, [r7, #20]
    d8c8:	697b      	ldr	r3, [r7, #20]
    d8ca:	2b00      	cmp	r3, #0
    d8cc:	dadb      	bge.n	d886 <mp_obj_print_exception+0x5e>
                }
            }
        }
    }
    mp_obj_print_helper(print, exc, PRINT_EXC);
    d8ce:	2202      	movs	r2, #2
    d8d0:	6839      	ldr	r1, [r7, #0]
    d8d2:	6878      	ldr	r0, [r7, #4]
    d8d4:	f7ff ff6d 	bl	d7b2 <mp_obj_print_helper>
    mp_print_str(print, "\n");
    d8d8:	4909      	ldr	r1, [pc, #36]	; (d900 <mp_obj_print_exception+0xd8>)
    d8da:	6878      	ldr	r0, [r7, #4]
    d8dc:	f7f3 ffb8 	bl	1850 <mp_print_str>
}
    d8e0:	bf00      	nop
    d8e2:	3718      	adds	r7, #24
    d8e4:	46bd      	mov	sp, r7
    d8e6:	bd80      	pop	{r7, pc}
    d8e8:	aaaaaaab 	.word	0xaaaaaaab
    d8ec:	0001f7d4 	.word	0x0001f7d4
    d8f0:	0001f958 	.word	0x0001f958
    d8f4:	0001f7e0 	.word	0x0001f7e0
    d8f8:	0001f7f0 	.word	0x0001f7f0
    d8fc:	0001f814 	.word	0x0001f814
    d900:	0001f820 	.word	0x0001f820
    d904:	0001f824 	.word	0x0001f824

0000d908 <mp_obj_is_true>:

bool mp_obj_is_true(mp_obj_t arg) {
    d908:	b580      	push	{r7, lr}
    d90a:	b086      	sub	sp, #24
    d90c:	af00      	add	r7, sp, #0
    d90e:	6078      	str	r0, [r7, #4]
    if (arg == mp_const_false) {
    d910:	687b      	ldr	r3, [r7, #4]
    d912:	4a25      	ldr	r2, [pc, #148]	; (d9a8 <mp_obj_is_true+0xa0>)
    d914:	4293      	cmp	r3, r2
    d916:	d101      	bne.n	d91c <mp_obj_is_true+0x14>
        return 0;
    d918:	2300      	movs	r3, #0
    d91a:	e041      	b.n	d9a0 <mp_obj_is_true+0x98>
    } else if (arg == mp_const_true) {
    d91c:	687b      	ldr	r3, [r7, #4]
    d91e:	4a23      	ldr	r2, [pc, #140]	; (d9ac <mp_obj_is_true+0xa4>)
    d920:	4293      	cmp	r3, r2
    d922:	d101      	bne.n	d928 <mp_obj_is_true+0x20>
        return 1;
    d924:	2301      	movs	r3, #1
    d926:	e03b      	b.n	d9a0 <mp_obj_is_true+0x98>
    } else if (arg == mp_const_none) {
    d928:	687b      	ldr	r3, [r7, #4]
    d92a:	4a21      	ldr	r2, [pc, #132]	; (d9b0 <mp_obj_is_true+0xa8>)
    d92c:	4293      	cmp	r3, r2
    d92e:	d101      	bne.n	d934 <mp_obj_is_true+0x2c>
        return 0;
    d930:	2300      	movs	r3, #0
    d932:	e035      	b.n	d9a0 <mp_obj_is_true+0x98>
    } else if (MP_OBJ_IS_SMALL_INT(arg)) {
    d934:	6878      	ldr	r0, [r7, #4]
    d936:	f7ff fed5 	bl	d6e4 <MP_OBJ_IS_SMALL_INT>
    d93a:	4603      	mov	r3, r0
    d93c:	2b00      	cmp	r3, #0
    d93e:	d007      	beq.n	d950 <mp_obj_is_true+0x48>
        if (MP_OBJ_SMALL_INT_VALUE(arg) == 0) {
    d940:	687b      	ldr	r3, [r7, #4]
    d942:	105b      	asrs	r3, r3, #1
    d944:	2b00      	cmp	r3, #0
    d946:	d101      	bne.n	d94c <mp_obj_is_true+0x44>
            return 0;
    d948:	2300      	movs	r3, #0
    d94a:	e029      	b.n	d9a0 <mp_obj_is_true+0x98>
        } else {
            return 1;
    d94c:	2301      	movs	r3, #1
    d94e:	e027      	b.n	d9a0 <mp_obj_is_true+0x98>
        }
    } else {
        mp_obj_type_t *type = mp_obj_get_type(arg);
    d950:	6878      	ldr	r0, [r7, #4]
    d952:	f7ff fefd 	bl	d750 <mp_obj_get_type>
    d956:	6178      	str	r0, [r7, #20]
        if (type->unary_op != NULL) {
    d958:	697b      	ldr	r3, [r7, #20]
    d95a:	695b      	ldr	r3, [r3, #20]
    d95c:	2b00      	cmp	r3, #0
    d95e:	d010      	beq.n	d982 <mp_obj_is_true+0x7a>
            mp_obj_t result = type->unary_op(MP_UNARY_OP_BOOL, arg);
    d960:	697b      	ldr	r3, [r7, #20]
    d962:	695b      	ldr	r3, [r3, #20]
    d964:	6879      	ldr	r1, [r7, #4]
    d966:	2004      	movs	r0, #4
    d968:	4798      	blx	r3
    d96a:	6138      	str	r0, [r7, #16]
            if (result != MP_OBJ_NULL) {
    d96c:	693b      	ldr	r3, [r7, #16]
    d96e:	2b00      	cmp	r3, #0
    d970:	d007      	beq.n	d982 <mp_obj_is_true+0x7a>
                return result == mp_const_true;
    d972:	693b      	ldr	r3, [r7, #16]
    d974:	4a0d      	ldr	r2, [pc, #52]	; (d9ac <mp_obj_is_true+0xa4>)
    d976:	4293      	cmp	r3, r2
    d978:	bf0c      	ite	eq
    d97a:	2301      	moveq	r3, #1
    d97c:	2300      	movne	r3, #0
    d97e:	b2db      	uxtb	r3, r3
    d980:	e00e      	b.n	d9a0 <mp_obj_is_true+0x98>
            }
        }

        mp_obj_t len = mp_obj_len_maybe(arg);
    d982:	6878      	ldr	r0, [r7, #4]
    d984:	f000 fa36 	bl	ddf4 <mp_obj_len_maybe>
    d988:	60f8      	str	r0, [r7, #12]
        if (len != MP_OBJ_NULL) {
    d98a:	68fb      	ldr	r3, [r7, #12]
    d98c:	2b00      	cmp	r3, #0
    d98e:	d006      	beq.n	d99e <mp_obj_is_true+0x96>
            // obj has a length, truth determined if len != 0
            return len != MP_OBJ_NEW_SMALL_INT(0);
    d990:	68fb      	ldr	r3, [r7, #12]
    d992:	2b01      	cmp	r3, #1
    d994:	bf14      	ite	ne
    d996:	2301      	movne	r3, #1
    d998:	2300      	moveq	r3, #0
    d99a:	b2db      	uxtb	r3, r3
    d99c:	e000      	b.n	d9a0 <mp_obj_is_true+0x98>
        } else {
            // any other obj is true per Python semantics
            return 1;
    d99e:	2301      	movs	r3, #1
        }
    }
}
    d9a0:	4618      	mov	r0, r3
    d9a2:	3718      	adds	r7, #24
    d9a4:	46bd      	mov	sp, r7
    d9a6:	bd80      	pop	{r7, pc}
    d9a8:	0001f9bc 	.word	0x0001f9bc
    d9ac:	0001f9c4 	.word	0x0001f9c4
    d9b0:	000212b4 	.word	0x000212b4

0000d9b4 <mp_obj_is_callable>:

bool mp_obj_is_callable(mp_obj_t o_in) {
    d9b4:	b580      	push	{r7, lr}
    d9b6:	b084      	sub	sp, #16
    d9b8:	af00      	add	r7, sp, #0
    d9ba:	6078      	str	r0, [r7, #4]
    mp_call_fun_t call = mp_obj_get_type(o_in)->call;
    d9bc:	6878      	ldr	r0, [r7, #4]
    d9be:	f7ff fec7 	bl	d750 <mp_obj_get_type>
    d9c2:	4603      	mov	r3, r0
    d9c4:	691b      	ldr	r3, [r3, #16]
    d9c6:	60fb      	str	r3, [r7, #12]
    if (call != mp_obj_instance_call) {
    d9c8:	68fb      	ldr	r3, [r7, #12]
    d9ca:	4a09      	ldr	r2, [pc, #36]	; (d9f0 <mp_obj_is_callable+0x3c>)
    d9cc:	4293      	cmp	r3, r2
    d9ce:	d006      	beq.n	d9de <mp_obj_is_callable+0x2a>
        return call != NULL;
    d9d0:	68fb      	ldr	r3, [r7, #12]
    d9d2:	2b00      	cmp	r3, #0
    d9d4:	bf14      	ite	ne
    d9d6:	2301      	movne	r3, #1
    d9d8:	2300      	moveq	r3, #0
    d9da:	b2db      	uxtb	r3, r3
    d9dc:	e003      	b.n	d9e6 <mp_obj_is_callable+0x32>
    }
    return mp_obj_instance_is_callable(o_in);
    d9de:	6878      	ldr	r0, [r7, #4]
    d9e0:	f008 ff33 	bl	1684a <mp_obj_instance_is_callable>
    d9e4:	4603      	mov	r3, r0
}
    d9e6:	4618      	mov	r0, r3
    d9e8:	3710      	adds	r7, #16
    d9ea:	46bd      	mov	sp, r7
    d9ec:	bd80      	pop	{r7, pc}
    d9ee:	bf00      	nop
    d9f0:	0001687b 	.word	0x0001687b

0000d9f4 <mp_obj_equal>:
// This means that False==0 and True==1 are true expressions.
//
// Furthermore, from the v3.4.2 code for object.c: "Practical amendments: If rich
// comparison returns NotImplemented, == and != are decided by comparing the object
// pointer."
bool mp_obj_equal(mp_obj_t o1, mp_obj_t o2) {
    d9f4:	b580      	push	{r7, lr}
    d9f6:	b086      	sub	sp, #24
    d9f8:	af00      	add	r7, sp, #0
    d9fa:	6078      	str	r0, [r7, #4]
    d9fc:	6039      	str	r1, [r7, #0]
    // Float (and complex) NaN is never equal to anything, not even itself,
    // so we must have a special check here to cover those cases.
    if (o1 == o2
    d9fe:	687a      	ldr	r2, [r7, #4]
    da00:	683b      	ldr	r3, [r7, #0]
    da02:	429a      	cmp	r2, r3
    da04:	d101      	bne.n	da0a <mp_obj_equal+0x16>
        #endif
        #if MICROPY_PY_BUILTINS_COMPLEX
        && !MP_OBJ_IS_TYPE(o1, &mp_type_complex)
        #endif
        ) {
        return true;
    da06:	2301      	movs	r3, #1
    da08:	e073      	b.n	daf2 <mp_obj_equal+0xfe>
    }
    if (o1 == mp_const_none || o2 == mp_const_none) {
    da0a:	687b      	ldr	r3, [r7, #4]
    da0c:	4a3b      	ldr	r2, [pc, #236]	; (dafc <mp_obj_equal+0x108>)
    da0e:	4293      	cmp	r3, r2
    da10:	d003      	beq.n	da1a <mp_obj_equal+0x26>
    da12:	683b      	ldr	r3, [r7, #0]
    da14:	4a39      	ldr	r2, [pc, #228]	; (dafc <mp_obj_equal+0x108>)
    da16:	4293      	cmp	r3, r2
    da18:	d101      	bne.n	da1e <mp_obj_equal+0x2a>
        return false;
    da1a:	2300      	movs	r3, #0
    da1c:	e069      	b.n	daf2 <mp_obj_equal+0xfe>
    }

    // fast path for small ints
    if (MP_OBJ_IS_SMALL_INT(o1)) {
    da1e:	6878      	ldr	r0, [r7, #4]
    da20:	f7ff fe60 	bl	d6e4 <MP_OBJ_IS_SMALL_INT>
    da24:	4603      	mov	r3, r0
    da26:	2b00      	cmp	r3, #0
    da28:	d00d      	beq.n	da46 <mp_obj_equal+0x52>
        if (MP_OBJ_IS_SMALL_INT(o2)) {
    da2a:	6838      	ldr	r0, [r7, #0]
    da2c:	f7ff fe5a 	bl	d6e4 <MP_OBJ_IS_SMALL_INT>
    da30:	4603      	mov	r3, r0
    da32:	2b00      	cmp	r3, #0
    da34:	d001      	beq.n	da3a <mp_obj_equal+0x46>
            // both SMALL_INT, and not equal if we get here
            return false;
    da36:	2300      	movs	r3, #0
    da38:	e05b      	b.n	daf2 <mp_obj_equal+0xfe>
        } else {
            mp_obj_t temp = o2; o2 = o1; o1 = temp;
    da3a:	683b      	ldr	r3, [r7, #0]
    da3c:	617b      	str	r3, [r7, #20]
    da3e:	687b      	ldr	r3, [r7, #4]
    da40:	603b      	str	r3, [r7, #0]
    da42:	697b      	ldr	r3, [r7, #20]
    da44:	607b      	str	r3, [r7, #4]
            // fall through to generic op
        }
    }

    // fast path for strings
    if (MP_OBJ_IS_STR(o1)) {
    da46:	6878      	ldr	r0, [r7, #4]
    da48:	f7ff fe5e 	bl	d708 <MP_OBJ_IS_QSTR>
    da4c:	4603      	mov	r3, r0
    da4e:	2b00      	cmp	r3, #0
    da50:	d10a      	bne.n	da68 <mp_obj_equal+0x74>
    da52:	6878      	ldr	r0, [r7, #4]
    da54:	f7ff fe6a 	bl	d72c <MP_OBJ_IS_OBJ>
    da58:	4603      	mov	r3, r0
    da5a:	2b00      	cmp	r3, #0
    da5c:	d01b      	beq.n	da96 <mp_obj_equal+0xa2>
    da5e:	687b      	ldr	r3, [r7, #4]
    da60:	681b      	ldr	r3, [r3, #0]
    da62:	4a27      	ldr	r2, [pc, #156]	; (db00 <mp_obj_equal+0x10c>)
    da64:	4293      	cmp	r3, r2
    da66:	d116      	bne.n	da96 <mp_obj_equal+0xa2>
        if (MP_OBJ_IS_STR(o2)) {
    da68:	6838      	ldr	r0, [r7, #0]
    da6a:	f7ff fe4d 	bl	d708 <MP_OBJ_IS_QSTR>
    da6e:	4603      	mov	r3, r0
    da70:	2b00      	cmp	r3, #0
    da72:	d10a      	bne.n	da8a <mp_obj_equal+0x96>
    da74:	6838      	ldr	r0, [r7, #0]
    da76:	f7ff fe59 	bl	d72c <MP_OBJ_IS_OBJ>
    da7a:	4603      	mov	r3, r0
    da7c:	2b00      	cmp	r3, #0
    da7e:	d01b      	beq.n	dab8 <mp_obj_equal+0xc4>
    da80:	683b      	ldr	r3, [r7, #0]
    da82:	681b      	ldr	r3, [r3, #0]
    da84:	4a1e      	ldr	r2, [pc, #120]	; (db00 <mp_obj_equal+0x10c>)
    da86:	4293      	cmp	r3, r2
    da88:	d116      	bne.n	dab8 <mp_obj_equal+0xc4>
            // both strings, use special function
            return mp_obj_str_equal(o1, o2);
    da8a:	6839      	ldr	r1, [r7, #0]
    da8c:	6878      	ldr	r0, [r7, #4]
    da8e:	f007 fbf5 	bl	1527c <mp_obj_str_equal>
    da92:	4603      	mov	r3, r0
    da94:	e02d      	b.n	daf2 <mp_obj_equal+0xfe>
        } else {
            // a string is never equal to anything else
            goto str_cmp_err;
        }
    } else if (MP_OBJ_IS_STR(o2)) {
    da96:	6838      	ldr	r0, [r7, #0]
    da98:	f7ff fe36 	bl	d708 <MP_OBJ_IS_QSTR>
    da9c:	4603      	mov	r3, r0
    da9e:	2b00      	cmp	r3, #0
    daa0:	d10a      	bne.n	dab8 <mp_obj_equal+0xc4>
    daa2:	6838      	ldr	r0, [r7, #0]
    daa4:	f7ff fe42 	bl	d72c <MP_OBJ_IS_OBJ>
    daa8:	4603      	mov	r3, r0
    daaa:	2b00      	cmp	r3, #0
    daac:	d006      	beq.n	dabc <mp_obj_equal+0xc8>
    daae:	683b      	ldr	r3, [r7, #0]
    dab0:	681b      	ldr	r3, [r3, #0]
    dab2:	4a13      	ldr	r2, [pc, #76]	; (db00 <mp_obj_equal+0x10c>)
    dab4:	4293      	cmp	r3, r2
    dab6:	d101      	bne.n	dabc <mp_obj_equal+0xc8>
        #if MICROPY_PY_STR_BYTES_CMP_WARN
        if (MP_OBJ_IS_TYPE(o1, &mp_type_bytes) || MP_OBJ_IS_TYPE(o2, &mp_type_bytes)) {
            mp_warning("Comparison between bytes and str");
        }
        #endif
        return false;
    dab8:	2300      	movs	r3, #0
    daba:	e01a      	b.n	daf2 <mp_obj_equal+0xfe>
    }

    // generic type, call binary_op(MP_BINARY_OP_EQUAL)
    mp_obj_type_t *type = mp_obj_get_type(o1);
    dabc:	6878      	ldr	r0, [r7, #4]
    dabe:	f7ff fe47 	bl	d750 <mp_obj_get_type>
    dac2:	6138      	str	r0, [r7, #16]
    if (type->binary_op != NULL) {
    dac4:	693b      	ldr	r3, [r7, #16]
    dac6:	699b      	ldr	r3, [r3, #24]
    dac8:	2b00      	cmp	r3, #0
    daca:	d011      	beq.n	daf0 <mp_obj_equal+0xfc>
        mp_obj_t r = type->binary_op(MP_BINARY_OP_EQUAL, o1, o2);
    dacc:	693b      	ldr	r3, [r7, #16]
    dace:	699b      	ldr	r3, [r3, #24]
    dad0:	683a      	ldr	r2, [r7, #0]
    dad2:	6879      	ldr	r1, [r7, #4]
    dad4:	2002      	movs	r0, #2
    dad6:	4798      	blx	r3
    dad8:	60f8      	str	r0, [r7, #12]
        if (r != MP_OBJ_NULL) {
    dada:	68fb      	ldr	r3, [r7, #12]
    dadc:	2b00      	cmp	r3, #0
    dade:	d007      	beq.n	daf0 <mp_obj_equal+0xfc>
            return r == mp_const_true ? true : false;
    dae0:	68fb      	ldr	r3, [r7, #12]
    dae2:	4a08      	ldr	r2, [pc, #32]	; (db04 <mp_obj_equal+0x110>)
    dae4:	4293      	cmp	r3, r2
    dae6:	bf0c      	ite	eq
    dae8:	2301      	moveq	r3, #1
    daea:	2300      	movne	r3, #0
    daec:	b2db      	uxtb	r3, r3
    daee:	e000      	b.n	daf2 <mp_obj_equal+0xfe>
        }
    }

    // equality not implemented, and objects are not the same object, so
    // they are defined as not equal
    return false;
    daf0:	2300      	movs	r3, #0
}
    daf2:	4618      	mov	r0, r3
    daf4:	3718      	adds	r7, #24
    daf6:	46bd      	mov	sp, r7
    daf8:	bd80      	pop	{r7, pc}
    dafa:	bf00      	nop
    dafc:	000212b4 	.word	0x000212b4
    db00:	00021964 	.word	0x00021964
    db04:	0001f9c4 	.word	0x0001f9c4

0000db08 <mp_obj_get_int>:

mp_int_t mp_obj_get_int(mp_const_obj_t arg) {
    db08:	b580      	push	{r7, lr}
    db0a:	b082      	sub	sp, #8
    db0c:	af00      	add	r7, sp, #0
    db0e:	6078      	str	r0, [r7, #4]
    // This function essentially performs implicit type conversion to int
    // Note that Python does NOT provide implicit type conversion from
    // float to int in the core expression language, try some_list[1.0].
    if (arg == mp_const_false) {
    db10:	687b      	ldr	r3, [r7, #4]
    db12:	4a15      	ldr	r2, [pc, #84]	; (db68 <mp_obj_get_int+0x60>)
    db14:	4293      	cmp	r3, r2
    db16:	d101      	bne.n	db1c <mp_obj_get_int+0x14>
        return 0;
    db18:	2300      	movs	r3, #0
    db1a:	e021      	b.n	db60 <mp_obj_get_int+0x58>
    } else if (arg == mp_const_true) {
    db1c:	687b      	ldr	r3, [r7, #4]
    db1e:	4a13      	ldr	r2, [pc, #76]	; (db6c <mp_obj_get_int+0x64>)
    db20:	4293      	cmp	r3, r2
    db22:	d101      	bne.n	db28 <mp_obj_get_int+0x20>
        return 1;
    db24:	2301      	movs	r3, #1
    db26:	e01b      	b.n	db60 <mp_obj_get_int+0x58>
    } else if (MP_OBJ_IS_SMALL_INT(arg)) {
    db28:	6878      	ldr	r0, [r7, #4]
    db2a:	f7ff fddb 	bl	d6e4 <MP_OBJ_IS_SMALL_INT>
    db2e:	4603      	mov	r3, r0
    db30:	2b00      	cmp	r3, #0
    db32:	d002      	beq.n	db3a <mp_obj_get_int+0x32>
        return MP_OBJ_SMALL_INT_VALUE(arg);
    db34:	687b      	ldr	r3, [r7, #4]
    db36:	105b      	asrs	r3, r3, #1
    db38:	e012      	b.n	db60 <mp_obj_get_int+0x58>
    } else if (MP_OBJ_IS_TYPE(arg, &mp_type_int)) {
    db3a:	6878      	ldr	r0, [r7, #4]
    db3c:	f7ff fdf6 	bl	d72c <MP_OBJ_IS_OBJ>
    db40:	4603      	mov	r3, r0
    db42:	2b00      	cmp	r3, #0
    db44:	d009      	beq.n	db5a <mp_obj_get_int+0x52>
    db46:	687b      	ldr	r3, [r7, #4]
    db48:	681b      	ldr	r3, [r3, #0]
    db4a:	4a09      	ldr	r2, [pc, #36]	; (db70 <mp_obj_get_int+0x68>)
    db4c:	4293      	cmp	r3, r2
    db4e:	d104      	bne.n	db5a <mp_obj_get_int+0x52>
        return mp_obj_int_get_checked(arg);
    db50:	6878      	ldr	r0, [r7, #4]
    db52:	f002 fe71 	bl	10838 <mp_obj_int_get_checked>
    db56:	4603      	mov	r3, r0
    db58:	e002      	b.n	db60 <mp_obj_get_int+0x58>
    } else {
        if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
            mp_raise_TypeError("can't convert to int");
    db5a:	4806      	ldr	r0, [pc, #24]	; (db74 <mp_obj_get_int+0x6c>)
    db5c:	f7ff f9e2 	bl	cf24 <mp_raise_TypeError>
        } else {
            nlr_raise(mp_obj_new_exception_msg_varg(&mp_type_TypeError,
                "can't convert %s to int", mp_obj_get_type_str(arg)));
        }
    }
}
    db60:	4618      	mov	r0, r3
    db62:	3708      	adds	r7, #8
    db64:	46bd      	mov	sp, r7
    db66:	bd80      	pop	{r7, pc}
    db68:	0001f9bc 	.word	0x0001f9bc
    db6c:	0001f9c4 	.word	0x0001f9c4
    db70:	00020d10 	.word	0x00020d10
    db74:	0001f830 	.word	0x0001f830

0000db78 <mp_obj_get_int_truncated>:

mp_int_t mp_obj_get_int_truncated(mp_const_obj_t arg) {
    db78:	b580      	push	{r7, lr}
    db7a:	b082      	sub	sp, #8
    db7c:	af00      	add	r7, sp, #0
    db7e:	6078      	str	r0, [r7, #4]
    if (MP_OBJ_IS_INT(arg)) {
    db80:	6878      	ldr	r0, [r7, #4]
    db82:	f7ff fdaf 	bl	d6e4 <MP_OBJ_IS_SMALL_INT>
    db86:	4603      	mov	r3, r0
    db88:	2b00      	cmp	r3, #0
    db8a:	d10a      	bne.n	dba2 <mp_obj_get_int_truncated+0x2a>
    db8c:	6878      	ldr	r0, [r7, #4]
    db8e:	f7ff fdcd 	bl	d72c <MP_OBJ_IS_OBJ>
    db92:	4603      	mov	r3, r0
    db94:	2b00      	cmp	r3, #0
    db96:	d009      	beq.n	dbac <mp_obj_get_int_truncated+0x34>
    db98:	687b      	ldr	r3, [r7, #4]
    db9a:	681b      	ldr	r3, [r3, #0]
    db9c:	4a07      	ldr	r2, [pc, #28]	; (dbbc <mp_obj_get_int_truncated+0x44>)
    db9e:	4293      	cmp	r3, r2
    dba0:	d104      	bne.n	dbac <mp_obj_get_int_truncated+0x34>
        return mp_obj_int_get_truncated(arg);
    dba2:	6878      	ldr	r0, [r7, #4]
    dba4:	f002 fe3c 	bl	10820 <mp_obj_int_get_truncated>
    dba8:	4603      	mov	r3, r0
    dbaa:	e003      	b.n	dbb4 <mp_obj_get_int_truncated+0x3c>
    } else {
        return mp_obj_get_int(arg);
    dbac:	6878      	ldr	r0, [r7, #4]
    dbae:	f7ff ffab 	bl	db08 <mp_obj_get_int>
    dbb2:	4603      	mov	r3, r0
    }
}
    dbb4:	4618      	mov	r0, r3
    dbb6:	3708      	adds	r7, #8
    dbb8:	46bd      	mov	sp, r7
    dbba:	bd80      	pop	{r7, pc}
    dbbc:	00020d10 	.word	0x00020d10

0000dbc0 <mp_obj_get_int_maybe>:

// returns false if arg is not of integral type
// returns true and sets *value if it is of integral type
// can throw OverflowError if arg is of integral type, but doesn't fit in a mp_int_t
bool mp_obj_get_int_maybe(mp_const_obj_t arg, mp_int_t *value) {
    dbc0:	b580      	push	{r7, lr}
    dbc2:	b082      	sub	sp, #8
    dbc4:	af00      	add	r7, sp, #0
    dbc6:	6078      	str	r0, [r7, #4]
    dbc8:	6039      	str	r1, [r7, #0]
    if (arg == mp_const_false) {
    dbca:	687b      	ldr	r3, [r7, #4]
    dbcc:	4a19      	ldr	r2, [pc, #100]	; (dc34 <mp_obj_get_int_maybe+0x74>)
    dbce:	4293      	cmp	r3, r2
    dbd0:	d103      	bne.n	dbda <mp_obj_get_int_maybe+0x1a>
        *value = 0;
    dbd2:	683b      	ldr	r3, [r7, #0]
    dbd4:	2200      	movs	r2, #0
    dbd6:	601a      	str	r2, [r3, #0]
    dbd8:	e026      	b.n	dc28 <mp_obj_get_int_maybe+0x68>
    } else if (arg == mp_const_true) {
    dbda:	687b      	ldr	r3, [r7, #4]
    dbdc:	4a16      	ldr	r2, [pc, #88]	; (dc38 <mp_obj_get_int_maybe+0x78>)
    dbde:	4293      	cmp	r3, r2
    dbe0:	d103      	bne.n	dbea <mp_obj_get_int_maybe+0x2a>
        *value = 1;
    dbe2:	683b      	ldr	r3, [r7, #0]
    dbe4:	2201      	movs	r2, #1
    dbe6:	601a      	str	r2, [r3, #0]
    dbe8:	e01e      	b.n	dc28 <mp_obj_get_int_maybe+0x68>
    } else if (MP_OBJ_IS_SMALL_INT(arg)) {
    dbea:	6878      	ldr	r0, [r7, #4]
    dbec:	f7ff fd7a 	bl	d6e4 <MP_OBJ_IS_SMALL_INT>
    dbf0:	4603      	mov	r3, r0
    dbf2:	2b00      	cmp	r3, #0
    dbf4:	d004      	beq.n	dc00 <mp_obj_get_int_maybe+0x40>
        *value = MP_OBJ_SMALL_INT_VALUE(arg);
    dbf6:	687b      	ldr	r3, [r7, #4]
    dbf8:	105a      	asrs	r2, r3, #1
    dbfa:	683b      	ldr	r3, [r7, #0]
    dbfc:	601a      	str	r2, [r3, #0]
    dbfe:	e013      	b.n	dc28 <mp_obj_get_int_maybe+0x68>
    } else if (MP_OBJ_IS_TYPE(arg, &mp_type_int)) {
    dc00:	6878      	ldr	r0, [r7, #4]
    dc02:	f7ff fd93 	bl	d72c <MP_OBJ_IS_OBJ>
    dc06:	4603      	mov	r3, r0
    dc08:	2b00      	cmp	r3, #0
    dc0a:	d00b      	beq.n	dc24 <mp_obj_get_int_maybe+0x64>
    dc0c:	687b      	ldr	r3, [r7, #4]
    dc0e:	681b      	ldr	r3, [r3, #0]
    dc10:	4a0a      	ldr	r2, [pc, #40]	; (dc3c <mp_obj_get_int_maybe+0x7c>)
    dc12:	4293      	cmp	r3, r2
    dc14:	d106      	bne.n	dc24 <mp_obj_get_int_maybe+0x64>
        *value = mp_obj_int_get_checked(arg);
    dc16:	6878      	ldr	r0, [r7, #4]
    dc18:	f002 fe0e 	bl	10838 <mp_obj_int_get_checked>
    dc1c:	4602      	mov	r2, r0
    dc1e:	683b      	ldr	r3, [r7, #0]
    dc20:	601a      	str	r2, [r3, #0]
    dc22:	e001      	b.n	dc28 <mp_obj_get_int_maybe+0x68>
    } else {
        return false;
    dc24:	2300      	movs	r3, #0
    dc26:	e000      	b.n	dc2a <mp_obj_get_int_maybe+0x6a>
    }
    return true;
    dc28:	2301      	movs	r3, #1
}
    dc2a:	4618      	mov	r0, r3
    dc2c:	3708      	adds	r7, #8
    dc2e:	46bd      	mov	sp, r7
    dc30:	bd80      	pop	{r7, pc}
    dc32:	bf00      	nop
    dc34:	0001f9bc 	.word	0x0001f9bc
    dc38:	0001f9c4 	.word	0x0001f9c4
    dc3c:	00020d10 	.word	0x00020d10

0000dc40 <mp_obj_get_array>:
}
#endif
#endif

// note: returned value in *items may point to the interior of a GC block
void mp_obj_get_array(mp_obj_t o, size_t *len, mp_obj_t **items) {
    dc40:	b580      	push	{r7, lr}
    dc42:	b084      	sub	sp, #16
    dc44:	af00      	add	r7, sp, #0
    dc46:	60f8      	str	r0, [r7, #12]
    dc48:	60b9      	str	r1, [r7, #8]
    dc4a:	607a      	str	r2, [r7, #4]
    if (MP_OBJ_IS_TYPE(o, &mp_type_tuple)) {
    dc4c:	68f8      	ldr	r0, [r7, #12]
    dc4e:	f7ff fd6d 	bl	d72c <MP_OBJ_IS_OBJ>
    dc52:	4603      	mov	r3, r0
    dc54:	2b00      	cmp	r3, #0
    dc56:	d00a      	beq.n	dc6e <mp_obj_get_array+0x2e>
    dc58:	68fb      	ldr	r3, [r7, #12]
    dc5a:	681b      	ldr	r3, [r3, #0]
    dc5c:	4a10      	ldr	r2, [pc, #64]	; (dca0 <mp_obj_get_array+0x60>)
    dc5e:	4293      	cmp	r3, r2
    dc60:	d105      	bne.n	dc6e <mp_obj_get_array+0x2e>
        mp_obj_tuple_get(o, len, items);
    dc62:	687a      	ldr	r2, [r7, #4]
    dc64:	68b9      	ldr	r1, [r7, #8]
    dc66:	68f8      	ldr	r0, [r7, #12]
    dc68:	f007 ffd2 	bl	15c10 <mp_obj_tuple_get>
    dc6c:	e013      	b.n	dc96 <mp_obj_get_array+0x56>
    } else if (MP_OBJ_IS_TYPE(o, &mp_type_list)) {
    dc6e:	68f8      	ldr	r0, [r7, #12]
    dc70:	f7ff fd5c 	bl	d72c <MP_OBJ_IS_OBJ>
    dc74:	4603      	mov	r3, r0
    dc76:	2b00      	cmp	r3, #0
    dc78:	d00a      	beq.n	dc90 <mp_obj_get_array+0x50>
    dc7a:	68fb      	ldr	r3, [r7, #12]
    dc7c:	681b      	ldr	r3, [r3, #0]
    dc7e:	4a09      	ldr	r2, [pc, #36]	; (dca4 <mp_obj_get_array+0x64>)
    dc80:	4293      	cmp	r3, r2
    dc82:	d105      	bne.n	dc90 <mp_obj_get_array+0x50>
        mp_obj_list_get(o, len, items);
    dc84:	687a      	ldr	r2, [r7, #4]
    dc86:	68b9      	ldr	r1, [r7, #8]
    dc88:	68f8      	ldr	r0, [r7, #12]
    dc8a:	f003 fd52 	bl	11732 <mp_obj_list_get>
    dc8e:	e002      	b.n	dc96 <mp_obj_get_array+0x56>
    } else {
        if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
            mp_raise_TypeError("expected tuple/list");
    dc90:	4805      	ldr	r0, [pc, #20]	; (dca8 <mp_obj_get_array+0x68>)
    dc92:	f7ff f947 	bl	cf24 <mp_raise_TypeError>
        } else {
            nlr_raise(mp_obj_new_exception_msg_varg(&mp_type_TypeError,
                "object '%s' is not a tuple or list", mp_obj_get_type_str(o)));
        }
    }
}
    dc96:	bf00      	nop
    dc98:	3710      	adds	r7, #16
    dc9a:	46bd      	mov	sp, r7
    dc9c:	bd80      	pop	{r7, pc}
    dc9e:	bf00      	nop
    dca0:	00021be8 	.word	0x00021be8
    dca4:	00020f7c 	.word	0x00020f7c
    dca8:	0001f848 	.word	0x0001f848

0000dcac <mp_obj_get_array_fixed_n>:

// note: returned value in *items may point to the interior of a GC block
void mp_obj_get_array_fixed_n(mp_obj_t o, size_t len, mp_obj_t **items) {
    dcac:	b580      	push	{r7, lr}
    dcae:	b086      	sub	sp, #24
    dcb0:	af00      	add	r7, sp, #0
    dcb2:	60f8      	str	r0, [r7, #12]
    dcb4:	60b9      	str	r1, [r7, #8]
    dcb6:	607a      	str	r2, [r7, #4]
    size_t seq_len;
    mp_obj_get_array(o, &seq_len, items);
    dcb8:	f107 0314 	add.w	r3, r7, #20
    dcbc:	687a      	ldr	r2, [r7, #4]
    dcbe:	4619      	mov	r1, r3
    dcc0:	68f8      	ldr	r0, [r7, #12]
    dcc2:	f7ff ffbd 	bl	dc40 <mp_obj_get_array>
    if (seq_len != len) {
    dcc6:	697a      	ldr	r2, [r7, #20]
    dcc8:	68bb      	ldr	r3, [r7, #8]
    dcca:	429a      	cmp	r2, r3
    dccc:	d002      	beq.n	dcd4 <mp_obj_get_array_fixed_n+0x28>
        if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
            mp_raise_ValueError("tuple/list has wrong length");
    dcce:	4803      	ldr	r0, [pc, #12]	; (dcdc <mp_obj_get_array_fixed_n+0x30>)
    dcd0:	f7ff f91d 	bl	cf0e <mp_raise_ValueError>
        } else {
            nlr_raise(mp_obj_new_exception_msg_varg(&mp_type_ValueError,
                "requested length %d but object has length %d", (int)len, (int)seq_len));
        }
    }
}
    dcd4:	bf00      	nop
    dcd6:	3718      	adds	r7, #24
    dcd8:	46bd      	mov	sp, r7
    dcda:	bd80      	pop	{r7, pc}
    dcdc:	0001f85c 	.word	0x0001f85c

0000dce0 <mp_get_index>:

// is_slice determines whether the index is a slice index
size_t mp_get_index(const mp_obj_type_t *type, size_t len, mp_obj_t index, bool is_slice) {
    dce0:	b580      	push	{r7, lr}
    dce2:	b086      	sub	sp, #24
    dce4:	af00      	add	r7, sp, #0
    dce6:	60f8      	str	r0, [r7, #12]
    dce8:	60b9      	str	r1, [r7, #8]
    dcea:	607a      	str	r2, [r7, #4]
    dcec:	70fb      	strb	r3, [r7, #3]
    mp_int_t i;
    if (MP_OBJ_IS_SMALL_INT(index)) {
    dcee:	6878      	ldr	r0, [r7, #4]
    dcf0:	f7ff fcf8 	bl	d6e4 <MP_OBJ_IS_SMALL_INT>
    dcf4:	4603      	mov	r3, r0
    dcf6:	2b00      	cmp	r3, #0
    dcf8:	d003      	beq.n	dd02 <mp_get_index+0x22>
        i = MP_OBJ_SMALL_INT_VALUE(index);
    dcfa:	687b      	ldr	r3, [r7, #4]
    dcfc:	105b      	asrs	r3, r3, #1
    dcfe:	617b      	str	r3, [r7, #20]
    dd00:	e00e      	b.n	dd20 <mp_get_index+0x40>
    } else if (!mp_obj_get_int_maybe(index, &i)) {
    dd02:	f107 0314 	add.w	r3, r7, #20
    dd06:	4619      	mov	r1, r3
    dd08:	6878      	ldr	r0, [r7, #4]
    dd0a:	f7ff ff59 	bl	dbc0 <mp_obj_get_int_maybe>
    dd0e:	4603      	mov	r3, r0
    dd10:	f083 0301 	eor.w	r3, r3, #1
    dd14:	b2db      	uxtb	r3, r3
    dd16:	2b00      	cmp	r3, #0
    dd18:	d002      	beq.n	dd20 <mp_get_index+0x40>
        if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
            mp_raise_TypeError("indices must be integers");
    dd1a:	4816      	ldr	r0, [pc, #88]	; (dd74 <mp_get_index+0x94>)
    dd1c:	f7ff f902 	bl	cf24 <mp_raise_TypeError>
                "%q indices must be integers, not %s",
                type->name, mp_obj_get_type_str(index)));
        }
    }

    if (i < 0) {
    dd20:	697b      	ldr	r3, [r7, #20]
    dd22:	2b00      	cmp	r3, #0
    dd24:	da04      	bge.n	dd30 <mp_get_index+0x50>
        i += len;
    dd26:	697b      	ldr	r3, [r7, #20]
    dd28:	461a      	mov	r2, r3
    dd2a:	68bb      	ldr	r3, [r7, #8]
    dd2c:	4413      	add	r3, r2
    dd2e:	617b      	str	r3, [r7, #20]
    }
    if (is_slice) {
    dd30:	78fb      	ldrb	r3, [r7, #3]
    dd32:	2b00      	cmp	r3, #0
    dd34:	d00d      	beq.n	dd52 <mp_get_index+0x72>
        if (i < 0) {
    dd36:	697b      	ldr	r3, [r7, #20]
    dd38:	2b00      	cmp	r3, #0
    dd3a:	da02      	bge.n	dd42 <mp_get_index+0x62>
            i = 0;
    dd3c:	2300      	movs	r3, #0
    dd3e:	617b      	str	r3, [r7, #20]
    dd40:	e013      	b.n	dd6a <mp_get_index+0x8a>
        } else if ((mp_uint_t)i > len) {
    dd42:	697b      	ldr	r3, [r7, #20]
    dd44:	461a      	mov	r2, r3
    dd46:	68bb      	ldr	r3, [r7, #8]
    dd48:	429a      	cmp	r2, r3
    dd4a:	d90e      	bls.n	dd6a <mp_get_index+0x8a>
            i = len;
    dd4c:	68bb      	ldr	r3, [r7, #8]
    dd4e:	617b      	str	r3, [r7, #20]
    dd50:	e00b      	b.n	dd6a <mp_get_index+0x8a>
        }
    } else {
        if (i < 0 || (mp_uint_t)i >= len) {
    dd52:	697b      	ldr	r3, [r7, #20]
    dd54:	2b00      	cmp	r3, #0
    dd56:	db04      	blt.n	dd62 <mp_get_index+0x82>
    dd58:	697b      	ldr	r3, [r7, #20]
    dd5a:	461a      	mov	r2, r3
    dd5c:	68bb      	ldr	r3, [r7, #8]
    dd5e:	429a      	cmp	r2, r3
    dd60:	d303      	bcc.n	dd6a <mp_get_index+0x8a>
            if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
                mp_raise_msg(&mp_type_IndexError, "index out of range");
    dd62:	4905      	ldr	r1, [pc, #20]	; (dd78 <mp_get_index+0x98>)
    dd64:	4805      	ldr	r0, [pc, #20]	; (dd7c <mp_get_index+0x9c>)
    dd66:	f7ff f8bb 	bl	cee0 <mp_raise_msg>
            }
        }
    }

    // By this point 0 <= i <= len and so fits in a size_t
    return (size_t)i;
    dd6a:	697b      	ldr	r3, [r7, #20]
}
    dd6c:	4618      	mov	r0, r3
    dd6e:	3718      	adds	r7, #24
    dd70:	46bd      	mov	sp, r7
    dd72:	bd80      	pop	{r7, pc}
    dd74:	0001f878 	.word	0x0001f878
    dd78:	0001f894 	.word	0x0001f894
    dd7c:	000202c8 	.word	0x000202c8

0000dd80 <mp_obj_id>:

mp_obj_t mp_obj_id(mp_obj_t o_in) {
    dd80:	b580      	push	{r7, lr}
    dd82:	b084      	sub	sp, #16
    dd84:	af00      	add	r7, sp, #0
    dd86:	6078      	str	r0, [r7, #4]
    mp_int_t id = (mp_int_t)o_in;
    dd88:	687b      	ldr	r3, [r7, #4]
    dd8a:	60fb      	str	r3, [r7, #12]
    if (!MP_OBJ_IS_OBJ(o_in)) {
    dd8c:	6878      	ldr	r0, [r7, #4]
    dd8e:	f7ff fccd 	bl	d72c <MP_OBJ_IS_OBJ>
    dd92:	4603      	mov	r3, r0
    dd94:	f083 0301 	eor.w	r3, r3, #1
    dd98:	b2db      	uxtb	r3, r3
    dd9a:	2b00      	cmp	r3, #0
    dd9c:	d004      	beq.n	dda8 <mp_obj_id+0x28>
        return mp_obj_new_int(id);
    dd9e:	68f8      	ldr	r0, [r7, #12]
    dda0:	f002 fd22 	bl	107e8 <mp_obj_new_int>
    dda4:	4603      	mov	r3, r0
    dda6:	e00c      	b.n	ddc2 <mp_obj_id+0x42>
    } else if (id >= 0) {
    dda8:	68fb      	ldr	r3, [r7, #12]
    ddaa:	2b00      	cmp	r3, #0
    ddac:	db04      	blt.n	ddb8 <mp_obj_id+0x38>
        // Many OSes and CPUs have affinity for putting "user" memories
        // into low half of address space, and "system" into upper half.
        // We're going to take advantage of that and return small int
        // (signed) for such "user" addresses.
        return MP_OBJ_NEW_SMALL_INT(id);
    ddae:	68fb      	ldr	r3, [r7, #12]
    ddb0:	005b      	lsls	r3, r3, #1
    ddb2:	f043 0301 	orr.w	r3, r3, #1
    ddb6:	e004      	b.n	ddc2 <mp_obj_id+0x42>
    } else {
        // If that didn't work, well, let's return long int, just as
        // a (big) positive value, so it will never clash with the range
        // of small int returned in previous case.
        return mp_obj_new_int_from_uint((mp_uint_t)id);
    ddb8:	68fb      	ldr	r3, [r7, #12]
    ddba:	4618      	mov	r0, r3
    ddbc:	f002 fcfa 	bl	107b4 <mp_obj_new_int_from_uint>
    ddc0:	4603      	mov	r3, r0
    }
}
    ddc2:	4618      	mov	r0, r3
    ddc4:	3710      	adds	r7, #16
    ddc6:	46bd      	mov	sp, r7
    ddc8:	bd80      	pop	{r7, pc}

0000ddca <mp_obj_len>:

// will raise a TypeError if object has no length
mp_obj_t mp_obj_len(mp_obj_t o_in) {
    ddca:	b580      	push	{r7, lr}
    ddcc:	b084      	sub	sp, #16
    ddce:	af00      	add	r7, sp, #0
    ddd0:	6078      	str	r0, [r7, #4]
    mp_obj_t len = mp_obj_len_maybe(o_in);
    ddd2:	6878      	ldr	r0, [r7, #4]
    ddd4:	f000 f80e 	bl	ddf4 <mp_obj_len_maybe>
    ddd8:	60f8      	str	r0, [r7, #12]
    if (len == MP_OBJ_NULL) {
    ddda:	68fb      	ldr	r3, [r7, #12]
    dddc:	2b00      	cmp	r3, #0
    ddde:	d102      	bne.n	dde6 <mp_obj_len+0x1c>
        if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
            mp_raise_TypeError("object has no len");
    dde0:	4803      	ldr	r0, [pc, #12]	; (ddf0 <mp_obj_len+0x26>)
    dde2:	f7ff f89f 	bl	cf24 <mp_raise_TypeError>
        } else {
            nlr_raise(mp_obj_new_exception_msg_varg(&mp_type_TypeError,
                "object of type '%s' has no len()", mp_obj_get_type_str(o_in)));
        }
    } else {
        return len;
    dde6:	68fb      	ldr	r3, [r7, #12]
    }
}
    dde8:	4618      	mov	r0, r3
    ddea:	3710      	adds	r7, #16
    ddec:	46bd      	mov	sp, r7
    ddee:	bd80      	pop	{r7, pc}
    ddf0:	0001f8a8 	.word	0x0001f8a8

0000ddf4 <mp_obj_len_maybe>:

// may return MP_OBJ_NULL
mp_obj_t mp_obj_len_maybe(mp_obj_t o_in) {
    ddf4:	b580      	push	{r7, lr}
    ddf6:	b084      	sub	sp, #16
    ddf8:	af00      	add	r7, sp, #0
    ddfa:	6078      	str	r0, [r7, #4]
    if (
#if !MICROPY_PY_BUILTINS_STR_UNICODE
        // It's simple - unicode is slow, non-unicode is fast
        MP_OBJ_IS_STR(o_in) ||
    ddfc:	6878      	ldr	r0, [r7, #4]
    ddfe:	f7ff fc83 	bl	d708 <MP_OBJ_IS_QSTR>
    de02:	4603      	mov	r3, r0
    if (
    de04:	2b00      	cmp	r3, #0
    de06:	d115      	bne.n	de34 <mp_obj_len_maybe+0x40>
        MP_OBJ_IS_STR(o_in) ||
    de08:	6878      	ldr	r0, [r7, #4]
    de0a:	f7ff fc8f 	bl	d72c <MP_OBJ_IS_OBJ>
    de0e:	4603      	mov	r3, r0
    de10:	2b00      	cmp	r3, #0
    de12:	d004      	beq.n	de1e <mp_obj_len_maybe+0x2a>
    de14:	687b      	ldr	r3, [r7, #4]
    de16:	681b      	ldr	r3, [r3, #0]
    de18:	4a1b      	ldr	r2, [pc, #108]	; (de88 <mp_obj_len_maybe+0x94>)
    de1a:	4293      	cmp	r3, r2
    de1c:	d00a      	beq.n	de34 <mp_obj_len_maybe+0x40>
#endif
        MP_OBJ_IS_TYPE(o_in, &mp_type_bytes)) {
    de1e:	6878      	ldr	r0, [r7, #4]
    de20:	f7ff fc84 	bl	d72c <MP_OBJ_IS_OBJ>
    de24:	4603      	mov	r3, r0
        MP_OBJ_IS_STR(o_in) ||
    de26:	2b00      	cmp	r3, #0
    de28:	d019      	beq.n	de5e <mp_obj_len_maybe+0x6a>
        MP_OBJ_IS_TYPE(o_in, &mp_type_bytes)) {
    de2a:	687b      	ldr	r3, [r7, #4]
    de2c:	681b      	ldr	r3, [r3, #0]
    de2e:	4a17      	ldr	r2, [pc, #92]	; (de8c <mp_obj_len_maybe+0x98>)
    de30:	4293      	cmp	r3, r2
    de32:	d114      	bne.n	de5e <mp_obj_len_maybe+0x6a>
        GET_STR_LEN(o_in, l);
    de34:	6878      	ldr	r0, [r7, #4]
    de36:	f7ff fc67 	bl	d708 <MP_OBJ_IS_QSTR>
    de3a:	4603      	mov	r3, r0
    de3c:	2b00      	cmp	r3, #0
    de3e:	d006      	beq.n	de4e <mp_obj_len_maybe+0x5a>
    de40:	687b      	ldr	r3, [r7, #4]
    de42:	089b      	lsrs	r3, r3, #2
    de44:	4618      	mov	r0, r3
    de46:	f7f3 f9b6 	bl	11b6 <qstr_len>
    de4a:	60f8      	str	r0, [r7, #12]
    de4c:	e002      	b.n	de54 <mp_obj_len_maybe+0x60>
    de4e:	687b      	ldr	r3, [r7, #4]
    de50:	689b      	ldr	r3, [r3, #8]
    de52:	60fb      	str	r3, [r7, #12]
        return MP_OBJ_NEW_SMALL_INT(l);
    de54:	68fb      	ldr	r3, [r7, #12]
    de56:	005b      	lsls	r3, r3, #1
    de58:	f043 0301 	orr.w	r3, r3, #1
    de5c:	e00f      	b.n	de7e <mp_obj_len_maybe+0x8a>
    } else {
        mp_obj_type_t *type = mp_obj_get_type(o_in);
    de5e:	6878      	ldr	r0, [r7, #4]
    de60:	f7ff fc76 	bl	d750 <mp_obj_get_type>
    de64:	60b8      	str	r0, [r7, #8]
        if (type->unary_op != NULL) {
    de66:	68bb      	ldr	r3, [r7, #8]
    de68:	695b      	ldr	r3, [r3, #20]
    de6a:	2b00      	cmp	r3, #0
    de6c:	d006      	beq.n	de7c <mp_obj_len_maybe+0x88>
            return type->unary_op(MP_UNARY_OP_LEN, o_in);
    de6e:	68bb      	ldr	r3, [r7, #8]
    de70:	695b      	ldr	r3, [r3, #20]
    de72:	6879      	ldr	r1, [r7, #4]
    de74:	2005      	movs	r0, #5
    de76:	4798      	blx	r3
    de78:	4603      	mov	r3, r0
    de7a:	e000      	b.n	de7e <mp_obj_len_maybe+0x8a>
        } else {
            return MP_OBJ_NULL;
    de7c:	2300      	movs	r3, #0
        }
    }
}
    de7e:	4618      	mov	r0, r3
    de80:	3710      	adds	r7, #16
    de82:	46bd      	mov	sp, r7
    de84:	bd80      	pop	{r7, pc}
    de86:	bf00      	nop
    de88:	00021964 	.word	0x00021964
    de8c:	000219a0 	.word	0x000219a0

0000de90 <mp_obj_subscr>:

mp_obj_t mp_obj_subscr(mp_obj_t base, mp_obj_t index, mp_obj_t value) {
    de90:	b580      	push	{r7, lr}
    de92:	b086      	sub	sp, #24
    de94:	af00      	add	r7, sp, #0
    de96:	60f8      	str	r0, [r7, #12]
    de98:	60b9      	str	r1, [r7, #8]
    de9a:	607a      	str	r2, [r7, #4]
    mp_obj_type_t *type = mp_obj_get_type(base);
    de9c:	68f8      	ldr	r0, [r7, #12]
    de9e:	f7ff fc57 	bl	d750 <mp_obj_get_type>
    dea2:	6178      	str	r0, [r7, #20]
    if (type->subscr != NULL) {
    dea4:	697b      	ldr	r3, [r7, #20]
    dea6:	6a1b      	ldr	r3, [r3, #32]
    dea8:	2b00      	cmp	r3, #0
    deaa:	d00b      	beq.n	dec4 <mp_obj_subscr+0x34>
        mp_obj_t ret = type->subscr(base, index, value);
    deac:	697b      	ldr	r3, [r7, #20]
    deae:	6a1b      	ldr	r3, [r3, #32]
    deb0:	687a      	ldr	r2, [r7, #4]
    deb2:	68b9      	ldr	r1, [r7, #8]
    deb4:	68f8      	ldr	r0, [r7, #12]
    deb6:	4798      	blx	r3
    deb8:	6138      	str	r0, [r7, #16]
        if (ret != MP_OBJ_NULL) {
    deba:	693b      	ldr	r3, [r7, #16]
    debc:	2b00      	cmp	r3, #0
    debe:	d001      	beq.n	dec4 <mp_obj_subscr+0x34>
            return ret;
    dec0:	693b      	ldr	r3, [r7, #16]
    dec2:	e00e      	b.n	dee2 <mp_obj_subscr+0x52>
        }
        // TODO: call base classes here?
    }
    if (value == MP_OBJ_NULL) {
    dec4:	687b      	ldr	r3, [r7, #4]
    dec6:	2b00      	cmp	r3, #0
    dec8:	d102      	bne.n	ded0 <mp_obj_subscr+0x40>
        if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
            mp_raise_TypeError("object does not support item deletion");
    deca:	4808      	ldr	r0, [pc, #32]	; (deec <mp_obj_subscr+0x5c>)
    decc:	f7ff f82a 	bl	cf24 <mp_raise_TypeError>
        } else {
            nlr_raise(mp_obj_new_exception_msg_varg(&mp_type_TypeError,
                "'%s' object does not support item deletion", mp_obj_get_type_str(base)));
        }
    } else if (value == MP_OBJ_SENTINEL) {
    ded0:	687b      	ldr	r3, [r7, #4]
    ded2:	2b08      	cmp	r3, #8
    ded4:	d102      	bne.n	dedc <mp_obj_subscr+0x4c>
        if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
            mp_raise_TypeError("object is not subscriptable");
    ded6:	4806      	ldr	r0, [pc, #24]	; (def0 <mp_obj_subscr+0x60>)
    ded8:	f7ff f824 	bl	cf24 <mp_raise_TypeError>
            nlr_raise(mp_obj_new_exception_msg_varg(&mp_type_TypeError,
                "'%s' object is not subscriptable", mp_obj_get_type_str(base)));
        }
    } else {
        if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
            mp_raise_TypeError("object does not support item assignment");
    dedc:	4805      	ldr	r0, [pc, #20]	; (def4 <mp_obj_subscr+0x64>)
    dede:	f7ff f821 	bl	cf24 <mp_raise_TypeError>
        } else {
            nlr_raise(mp_obj_new_exception_msg_varg(&mp_type_TypeError,
                "'%s' object does not support item assignment", mp_obj_get_type_str(base)));
        }
    }
}
    dee2:	4618      	mov	r0, r3
    dee4:	3718      	adds	r7, #24
    dee6:	46bd      	mov	sp, r7
    dee8:	bd80      	pop	{r7, pc}
    deea:	bf00      	nop
    deec:	0001f8bc 	.word	0x0001f8bc
    def0:	0001f8e4 	.word	0x0001f8e4
    def4:	0001f900 	.word	0x0001f900

0000def8 <mp_identity>:

// Return input argument. Useful as .getiter for objects which are
// their own iterators, etc.
mp_obj_t mp_identity(mp_obj_t self) {
    def8:	b480      	push	{r7}
    defa:	b083      	sub	sp, #12
    defc:	af00      	add	r7, sp, #0
    defe:	6078      	str	r0, [r7, #4]
    return self;
    df00:	687b      	ldr	r3, [r7, #4]
}
    df02:	4618      	mov	r0, r3
    df04:	370c      	adds	r7, #12
    df06:	46bd      	mov	sp, r7
    df08:	f85d 7b04 	ldr.w	r7, [sp], #4
    df0c:	4770      	bx	lr

0000df0e <mp_identity_getiter>:
MP_DEFINE_CONST_FUN_OBJ_1(mp_identity_obj, mp_identity);

mp_obj_t mp_identity_getiter(mp_obj_t self, mp_obj_iter_buf_t *iter_buf) {
    df0e:	b480      	push	{r7}
    df10:	b083      	sub	sp, #12
    df12:	af00      	add	r7, sp, #0
    df14:	6078      	str	r0, [r7, #4]
    df16:	6039      	str	r1, [r7, #0]
    (void)iter_buf;
    return self;
    df18:	687b      	ldr	r3, [r7, #4]
}
    df1a:	4618      	mov	r0, r3
    df1c:	370c      	adds	r7, #12
    df1e:	46bd      	mov	sp, r7
    df20:	f85d 7b04 	ldr.w	r7, [sp], #4
    df24:	4770      	bx	lr

0000df26 <mp_get_buffer>:

bool mp_get_buffer(mp_obj_t obj, mp_buffer_info_t *bufinfo, mp_uint_t flags) {
    df26:	b580      	push	{r7, lr}
    df28:	b086      	sub	sp, #24
    df2a:	af00      	add	r7, sp, #0
    df2c:	60f8      	str	r0, [r7, #12]
    df2e:	60b9      	str	r1, [r7, #8]
    df30:	607a      	str	r2, [r7, #4]
    mp_obj_type_t *type = mp_obj_get_type(obj);
    df32:	68f8      	ldr	r0, [r7, #12]
    df34:	f7ff fc0c 	bl	d750 <mp_obj_get_type>
    df38:	6178      	str	r0, [r7, #20]
    if (type->buffer_p.get_buffer == NULL) {
    df3a:	697b      	ldr	r3, [r7, #20]
    df3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    df3e:	2b00      	cmp	r3, #0
    df40:	d101      	bne.n	df46 <mp_get_buffer+0x20>
        return false;
    df42:	2300      	movs	r3, #0
    df44:	e00c      	b.n	df60 <mp_get_buffer+0x3a>
    }
    int ret = type->buffer_p.get_buffer(obj, bufinfo, flags);
    df46:	697b      	ldr	r3, [r7, #20]
    df48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    df4a:	687a      	ldr	r2, [r7, #4]
    df4c:	68b9      	ldr	r1, [r7, #8]
    df4e:	68f8      	ldr	r0, [r7, #12]
    df50:	4798      	blx	r3
    df52:	6138      	str	r0, [r7, #16]
    if (ret != 0) {
    df54:	693b      	ldr	r3, [r7, #16]
    df56:	2b00      	cmp	r3, #0
    df58:	d001      	beq.n	df5e <mp_get_buffer+0x38>
        return false;
    df5a:	2300      	movs	r3, #0
    df5c:	e000      	b.n	df60 <mp_get_buffer+0x3a>
    }
    return true;
    df5e:	2301      	movs	r3, #1
}
    df60:	4618      	mov	r0, r3
    df62:	3718      	adds	r7, #24
    df64:	46bd      	mov	sp, r7
    df66:	bd80      	pop	{r7, pc}

0000df68 <mp_get_buffer_raise>:

void mp_get_buffer_raise(mp_obj_t obj, mp_buffer_info_t *bufinfo, mp_uint_t flags) {
    df68:	b580      	push	{r7, lr}
    df6a:	b084      	sub	sp, #16
    df6c:	af00      	add	r7, sp, #0
    df6e:	60f8      	str	r0, [r7, #12]
    df70:	60b9      	str	r1, [r7, #8]
    df72:	607a      	str	r2, [r7, #4]
    if (!mp_get_buffer(obj, bufinfo, flags)) {
    df74:	687a      	ldr	r2, [r7, #4]
    df76:	68b9      	ldr	r1, [r7, #8]
    df78:	68f8      	ldr	r0, [r7, #12]
    df7a:	f7ff ffd4 	bl	df26 <mp_get_buffer>
    df7e:	4603      	mov	r3, r0
    df80:	f083 0301 	eor.w	r3, r3, #1
    df84:	b2db      	uxtb	r3, r3
    df86:	2b00      	cmp	r3, #0
    df88:	d002      	beq.n	df90 <mp_get_buffer_raise+0x28>
        mp_raise_TypeError("object with buffer protocol required");
    df8a:	4803      	ldr	r0, [pc, #12]	; (df98 <mp_get_buffer_raise+0x30>)
    df8c:	f7fe ffca 	bl	cf24 <mp_raise_TypeError>
    }
}
    df90:	bf00      	nop
    df92:	3710      	adds	r7, #16
    df94:	46bd      	mov	sp, r7
    df96:	bd80      	pop	{r7, pc}
    df98:	0001f930 	.word	0x0001f930

0000df9c <mp_generic_unary_op>:

mp_obj_t mp_generic_unary_op(mp_unary_op_t op, mp_obj_t o_in) {
    df9c:	b480      	push	{r7}
    df9e:	b083      	sub	sp, #12
    dfa0:	af00      	add	r7, sp, #0
    dfa2:	6078      	str	r0, [r7, #4]
    dfa4:	6039      	str	r1, [r7, #0]
    switch (op) {
    dfa6:	687b      	ldr	r3, [r7, #4]
    dfa8:	2b06      	cmp	r3, #6
    dfaa:	d104      	bne.n	dfb6 <mp_generic_unary_op+0x1a>
        case MP_UNARY_OP_HASH: return MP_OBJ_NEW_SMALL_INT((mp_uint_t)o_in);
    dfac:	683b      	ldr	r3, [r7, #0]
    dfae:	005b      	lsls	r3, r3, #1
    dfb0:	f043 0301 	orr.w	r3, r3, #1
    dfb4:	e000      	b.n	dfb8 <mp_generic_unary_op+0x1c>
        default: return MP_OBJ_NULL; // op not supported
    dfb6:	2300      	movs	r3, #0
    }
}
    dfb8:	4618      	mov	r0, r3
    dfba:	370c      	adds	r7, #12
    dfbc:	46bd      	mov	sp, r7
    dfbe:	f85d 7b04 	ldr.w	r7, [sp], #4
    dfc2:	4770      	bx	lr

0000dfc4 <mp_obj_new_bool>:
static inline mp_obj_t mp_obj_new_bool(mp_int_t x) { return x ? mp_const_true : mp_const_false; }
    dfc4:	b480      	push	{r7}
    dfc6:	b083      	sub	sp, #12
    dfc8:	af00      	add	r7, sp, #0
    dfca:	6078      	str	r0, [r7, #4]
    dfcc:	687b      	ldr	r3, [r7, #4]
    dfce:	2b00      	cmp	r3, #0
    dfd0:	d001      	beq.n	dfd6 <mp_obj_new_bool+0x12>
    dfd2:	4b04      	ldr	r3, [pc, #16]	; (dfe4 <mp_obj_new_bool+0x20>)
    dfd4:	e000      	b.n	dfd8 <mp_obj_new_bool+0x14>
    dfd6:	4b04      	ldr	r3, [pc, #16]	; (dfe8 <mp_obj_new_bool+0x24>)
    dfd8:	4618      	mov	r0, r3
    dfda:	370c      	adds	r7, #12
    dfdc:	46bd      	mov	sp, r7
    dfde:	f85d 7b04 	ldr.w	r7, [sp], #4
    dfe2:	4770      	bx	lr
    dfe4:	0001f9c4 	.word	0x0001f9c4
    dfe8:	0001f9bc 	.word	0x0001f9bc

0000dfec <bool_print>:
typedef struct _mp_obj_bool_t {
    mp_obj_base_t base;
    bool value;
} mp_obj_bool_t;

STATIC void bool_print(const mp_print_t *print, mp_obj_t self_in, mp_print_kind_t kind) {
    dfec:	b580      	push	{r7, lr}
    dfee:	b086      	sub	sp, #24
    dff0:	af00      	add	r7, sp, #0
    dff2:	60f8      	str	r0, [r7, #12]
    dff4:	60b9      	str	r1, [r7, #8]
    dff6:	607a      	str	r2, [r7, #4]
    mp_obj_bool_t *self = MP_OBJ_TO_PTR(self_in);
    dff8:	68bb      	ldr	r3, [r7, #8]
    dffa:	617b      	str	r3, [r7, #20]
            mp_print_str(print, "true");
        } else {
            mp_print_str(print, "false");
        }
    } else {
        if (self->value) {
    dffc:	697b      	ldr	r3, [r7, #20]
    dffe:	791b      	ldrb	r3, [r3, #4]
    e000:	2b00      	cmp	r3, #0
    e002:	d004      	beq.n	e00e <bool_print+0x22>
            mp_print_str(print, "True");
    e004:	4906      	ldr	r1, [pc, #24]	; (e020 <bool_print+0x34>)
    e006:	68f8      	ldr	r0, [r7, #12]
    e008:	f7f3 fc22 	bl	1850 <mp_print_str>
        } else {
            mp_print_str(print, "False");
        }
    }
}
    e00c:	e003      	b.n	e016 <bool_print+0x2a>
            mp_print_str(print, "False");
    e00e:	4905      	ldr	r1, [pc, #20]	; (e024 <bool_print+0x38>)
    e010:	68f8      	ldr	r0, [r7, #12]
    e012:	f7f3 fc1d 	bl	1850 <mp_print_str>
}
    e016:	bf00      	nop
    e018:	3718      	adds	r7, #24
    e01a:	46bd      	mov	sp, r7
    e01c:	bd80      	pop	{r7, pc}
    e01e:	bf00      	nop
    e020:	0001f970 	.word	0x0001f970
    e024:	0001f978 	.word	0x0001f978

0000e028 <bool_make_new>:

STATIC mp_obj_t bool_make_new(const mp_obj_type_t *type_in, size_t n_args, size_t n_kw, const mp_obj_t *args) {
    e028:	b580      	push	{r7, lr}
    e02a:	b086      	sub	sp, #24
    e02c:	af02      	add	r7, sp, #8
    e02e:	60f8      	str	r0, [r7, #12]
    e030:	60b9      	str	r1, [r7, #8]
    e032:	607a      	str	r2, [r7, #4]
    e034:	603b      	str	r3, [r7, #0]
    (void)type_in;
    mp_arg_check_num(n_args, n_kw, 0, 1, false);
    e036:	2300      	movs	r3, #0
    e038:	9300      	str	r3, [sp, #0]
    e03a:	2301      	movs	r3, #1
    e03c:	2200      	movs	r2, #0
    e03e:	6879      	ldr	r1, [r7, #4]
    e040:	68b8      	ldr	r0, [r7, #8]
    e042:	f7fe ff95 	bl	cf70 <mp_arg_check_num>

    if (n_args == 0) {
    e046:	68bb      	ldr	r3, [r7, #8]
    e048:	2b00      	cmp	r3, #0
    e04a:	d101      	bne.n	e050 <bool_make_new+0x28>
        return mp_const_false;
    e04c:	4b07      	ldr	r3, [pc, #28]	; (e06c <bool_make_new+0x44>)
    e04e:	e009      	b.n	e064 <bool_make_new+0x3c>
    } else {
        return mp_obj_new_bool(mp_obj_is_true(args[0]));
    e050:	683b      	ldr	r3, [r7, #0]
    e052:	681b      	ldr	r3, [r3, #0]
    e054:	4618      	mov	r0, r3
    e056:	f7ff fc57 	bl	d908 <mp_obj_is_true>
    e05a:	4603      	mov	r3, r0
    e05c:	4618      	mov	r0, r3
    e05e:	f7ff ffb1 	bl	dfc4 <mp_obj_new_bool>
    e062:	4603      	mov	r3, r0
    }
}
    e064:	4618      	mov	r0, r3
    e066:	3710      	adds	r7, #16
    e068:	46bd      	mov	sp, r7
    e06a:	bd80      	pop	{r7, pc}
    e06c:	0001f9bc 	.word	0x0001f9bc

0000e070 <bool_unary_op>:

STATIC mp_obj_t bool_unary_op(mp_unary_op_t op, mp_obj_t o_in) {
    e070:	b580      	push	{r7, lr}
    e072:	b084      	sub	sp, #16
    e074:	af00      	add	r7, sp, #0
    e076:	6078      	str	r0, [r7, #4]
    e078:	6039      	str	r1, [r7, #0]
    if (op == MP_UNARY_OP_LEN) {
    e07a:	687b      	ldr	r3, [r7, #4]
    e07c:	2b05      	cmp	r3, #5
    e07e:	d101      	bne.n	e084 <bool_unary_op+0x14>
        return MP_OBJ_NULL;
    e080:	2300      	movs	r3, #0
    e082:	e00b      	b.n	e09c <bool_unary_op+0x2c>
    }
    mp_obj_bool_t *self = MP_OBJ_TO_PTR(o_in);
    e084:	683b      	ldr	r3, [r7, #0]
    e086:	60fb      	str	r3, [r7, #12]
    return mp_unary_op(op, MP_OBJ_NEW_SMALL_INT(self->value));
    e088:	68fb      	ldr	r3, [r7, #12]
    e08a:	791b      	ldrb	r3, [r3, #4]
    e08c:	005b      	lsls	r3, r3, #1
    e08e:	f043 0301 	orr.w	r3, r3, #1
    e092:	4619      	mov	r1, r3
    e094:	6878      	ldr	r0, [r7, #4]
    e096:	f7fd fb0d 	bl	b6b4 <mp_unary_op>
    e09a:	4603      	mov	r3, r0
}
    e09c:	4618      	mov	r0, r3
    e09e:	3710      	adds	r7, #16
    e0a0:	46bd      	mov	sp, r7
    e0a2:	bd80      	pop	{r7, pc}

0000e0a4 <bool_binary_op>:

STATIC mp_obj_t bool_binary_op(mp_binary_op_t op, mp_obj_t lhs_in, mp_obj_t rhs_in) {
    e0a4:	b580      	push	{r7, lr}
    e0a6:	b086      	sub	sp, #24
    e0a8:	af00      	add	r7, sp, #0
    e0aa:	60f8      	str	r0, [r7, #12]
    e0ac:	60b9      	str	r1, [r7, #8]
    e0ae:	607a      	str	r2, [r7, #4]
    mp_obj_bool_t *self = MP_OBJ_TO_PTR(lhs_in);
    e0b0:	68bb      	ldr	r3, [r7, #8]
    e0b2:	617b      	str	r3, [r7, #20]
    return mp_binary_op(op, MP_OBJ_NEW_SMALL_INT(self->value), rhs_in);
    e0b4:	697b      	ldr	r3, [r7, #20]
    e0b6:	791b      	ldrb	r3, [r3, #4]
    e0b8:	005b      	lsls	r3, r3, #1
    e0ba:	f043 0301 	orr.w	r3, r3, #1
    e0be:	687a      	ldr	r2, [r7, #4]
    e0c0:	4619      	mov	r1, r3
    e0c2:	68f8      	ldr	r0, [r7, #12]
    e0c4:	f7fd fbdc 	bl	b880 <mp_binary_op>
    e0c8:	4603      	mov	r3, r0
}
    e0ca:	4618      	mov	r0, r3
    e0cc:	3718      	adds	r7, #24
    e0ce:	46bd      	mov	sp, r7
    e0d0:	bd80      	pop	{r7, pc}
    e0d2:	bf00      	nop

0000e0d4 <mp_call_method_self_n_kw>:
    mp_obj_print_helper(print, o->meth, PRINT_REPR);
    mp_print_str(print, ">");
}
#endif

mp_obj_t mp_call_method_self_n_kw(mp_obj_t meth, mp_obj_t self, size_t n_args, size_t n_kw, const mp_obj_t *args) {
    e0d4:	b580      	push	{r7, lr}
    e0d6:	b088      	sub	sp, #32
    e0d8:	af00      	add	r7, sp, #0
    e0da:	60f8      	str	r0, [r7, #12]
    e0dc:	60b9      	str	r1, [r7, #8]
    e0de:	607a      	str	r2, [r7, #4]
    e0e0:	603b      	str	r3, [r7, #0]
    // need to insert self before all other args and then call meth
    size_t n_total = n_args + 2 * n_kw;
    e0e2:	683b      	ldr	r3, [r7, #0]
    e0e4:	005a      	lsls	r2, r3, #1
    e0e6:	687b      	ldr	r3, [r7, #4]
    e0e8:	4413      	add	r3, r2
    e0ea:	617b      	str	r3, [r7, #20]
    mp_obj_t *args2 = NULL;
    e0ec:	2300      	movs	r3, #0
    e0ee:	61fb      	str	r3, [r7, #28]
    #if MICROPY_ENABLE_PYSTACK
    args2 = mp_pystack_alloc(sizeof(mp_obj_t) * (1 + n_total));
    #else
    mp_obj_t *free_args2 = NULL;
    e0f0:	2300      	movs	r3, #0
    e0f2:	61bb      	str	r3, [r7, #24]
    if (n_total > 4) {
    e0f4:	697b      	ldr	r3, [r7, #20]
    e0f6:	2b04      	cmp	r3, #4
    e0f8:	d908      	bls.n	e10c <mp_call_method_self_n_kw+0x38>
        // try to use heap to allocate temporary args array
        args2 = m_new_maybe(mp_obj_t, 1 + n_total);
    e0fa:	697b      	ldr	r3, [r7, #20]
    e0fc:	3301      	adds	r3, #1
    e0fe:	009b      	lsls	r3, r3, #2
    e100:	4618      	mov	r0, r3
    e102:	f7f2 f922 	bl	34a <m_malloc_maybe>
    e106:	61f8      	str	r0, [r7, #28]
        free_args2 = args2;
    e108:	69fb      	ldr	r3, [r7, #28]
    e10a:	61bb      	str	r3, [r7, #24]
    }
    if (args2 == NULL) {
    e10c:	69fb      	ldr	r3, [r7, #28]
    e10e:	2b00      	cmp	r3, #0
    e110:	d10d      	bne.n	e12e <mp_call_method_self_n_kw+0x5a>
        // (fallback to) use stack to allocate temporary args array
        args2 = alloca(sizeof(mp_obj_t) * (1 + n_total));
    e112:	697b      	ldr	r3, [r7, #20]
    e114:	3301      	adds	r3, #1
    e116:	009b      	lsls	r3, r3, #2
    e118:	3307      	adds	r3, #7
    e11a:	3307      	adds	r3, #7
    e11c:	08db      	lsrs	r3, r3, #3
    e11e:	00db      	lsls	r3, r3, #3
    e120:	ebad 0d03 	sub.w	sp, sp, r3
    e124:	466b      	mov	r3, sp
    e126:	3307      	adds	r3, #7
    e128:	08db      	lsrs	r3, r3, #3
    e12a:	00db      	lsls	r3, r3, #3
    e12c:	61fb      	str	r3, [r7, #28]
    }
    #endif
    args2[0] = self;
    e12e:	69fb      	ldr	r3, [r7, #28]
    e130:	68ba      	ldr	r2, [r7, #8]
    e132:	601a      	str	r2, [r3, #0]
    memcpy(args2 + 1, args, n_total * sizeof(mp_obj_t));
    e134:	69fb      	ldr	r3, [r7, #28]
    e136:	1d18      	adds	r0, r3, #4
    e138:	697b      	ldr	r3, [r7, #20]
    e13a:	009b      	lsls	r3, r3, #2
    e13c:	461a      	mov	r2, r3
    e13e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
    e140:	f00d fc40 	bl	1b9c4 <memcpy>
    mp_obj_t res = mp_call_function_n_kw(meth, n_args + 1, n_kw, args2);
    e144:	687b      	ldr	r3, [r7, #4]
    e146:	1c59      	adds	r1, r3, #1
    e148:	69fb      	ldr	r3, [r7, #28]
    e14a:	683a      	ldr	r2, [r7, #0]
    e14c:	68f8      	ldr	r0, [r7, #12]
    e14e:	f7fd fe2a 	bl	bda6 <mp_call_function_n_kw>
    e152:	6138      	str	r0, [r7, #16]
    #if MICROPY_ENABLE_PYSTACK
    mp_pystack_free(args2);
    #else
    if (free_args2 != NULL) {
    e154:	69bb      	ldr	r3, [r7, #24]
    e156:	2b00      	cmp	r3, #0
    e158:	d002      	beq.n	e160 <mp_call_method_self_n_kw+0x8c>
        m_del(mp_obj_t, free_args2, 1 + n_total);
    e15a:	69b8      	ldr	r0, [r7, #24]
    e15c:	f7f2 f93c 	bl	3d8 <m_free>
    }
    #endif
    return res;
    e160:	693b      	ldr	r3, [r7, #16]
}
    e162:	4618      	mov	r0, r3
    e164:	3720      	adds	r7, #32
    e166:	46bd      	mov	sp, r7
    e168:	bd80      	pop	{r7, pc}

0000e16a <bound_meth_call>:

STATIC mp_obj_t bound_meth_call(mp_obj_t self_in, size_t n_args, size_t n_kw, const mp_obj_t *args) {
    e16a:	b580      	push	{r7, lr}
    e16c:	b088      	sub	sp, #32
    e16e:	af02      	add	r7, sp, #8
    e170:	60f8      	str	r0, [r7, #12]
    e172:	60b9      	str	r1, [r7, #8]
    e174:	607a      	str	r2, [r7, #4]
    e176:	603b      	str	r3, [r7, #0]
    mp_obj_bound_meth_t *self = MP_OBJ_TO_PTR(self_in);
    e178:	68fb      	ldr	r3, [r7, #12]
    e17a:	617b      	str	r3, [r7, #20]
    return mp_call_method_self_n_kw(self->meth, self->self, n_args, n_kw, args);
    e17c:	697b      	ldr	r3, [r7, #20]
    e17e:	6858      	ldr	r0, [r3, #4]
    e180:	697b      	ldr	r3, [r7, #20]
    e182:	6899      	ldr	r1, [r3, #8]
    e184:	683b      	ldr	r3, [r7, #0]
    e186:	9300      	str	r3, [sp, #0]
    e188:	687b      	ldr	r3, [r7, #4]
    e18a:	68ba      	ldr	r2, [r7, #8]
    e18c:	f7ff ffa2 	bl	e0d4 <mp_call_method_self_n_kw>
    e190:	4603      	mov	r3, r0
}
    e192:	4618      	mov	r0, r3
    e194:	3718      	adds	r7, #24
    e196:	46bd      	mov	sp, r7
    e198:	bd80      	pop	{r7, pc}

0000e19a <mp_obj_new_bound_meth>:
#if MICROPY_PY_FUNCTION_ATTRS
    .attr = bound_meth_attr,
#endif
};

mp_obj_t mp_obj_new_bound_meth(mp_obj_t meth, mp_obj_t self) {
    e19a:	b580      	push	{r7, lr}
    e19c:	b084      	sub	sp, #16
    e19e:	af00      	add	r7, sp, #0
    e1a0:	6078      	str	r0, [r7, #4]
    e1a2:	6039      	str	r1, [r7, #0]
    mp_obj_bound_meth_t *o = m_new_obj(mp_obj_bound_meth_t);
    e1a4:	200c      	movs	r0, #12
    e1a6:	f7f2 f8b9 	bl	31c <m_malloc>
    e1aa:	60f8      	str	r0, [r7, #12]
    o->base.type = &mp_type_bound_meth;
    e1ac:	68fb      	ldr	r3, [r7, #12]
    e1ae:	4a06      	ldr	r2, [pc, #24]	; (e1c8 <mp_obj_new_bound_meth+0x2e>)
    e1b0:	601a      	str	r2, [r3, #0]
    o->meth = meth;
    e1b2:	68fb      	ldr	r3, [r7, #12]
    e1b4:	687a      	ldr	r2, [r7, #4]
    e1b6:	605a      	str	r2, [r3, #4]
    o->self = self;
    e1b8:	68fb      	ldr	r3, [r7, #12]
    e1ba:	683a      	ldr	r2, [r7, #0]
    e1bc:	609a      	str	r2, [r3, #8]
    return MP_OBJ_FROM_PTR(o);
    e1be:	68fb      	ldr	r3, [r7, #12]
}
    e1c0:	4618      	mov	r0, r3
    e1c2:	3710      	adds	r7, #16
    e1c4:	46bd      	mov	sp, r7
    e1c6:	bd80      	pop	{r7, pc}
    e1c8:	0001f9cc 	.word	0x0001f9cc

0000e1cc <mp_obj_cell_get>:
typedef struct _mp_obj_cell_t {
    mp_obj_base_t base;
    mp_obj_t obj;
} mp_obj_cell_t;

mp_obj_t mp_obj_cell_get(mp_obj_t self_in) {
    e1cc:	b480      	push	{r7}
    e1ce:	b085      	sub	sp, #20
    e1d0:	af00      	add	r7, sp, #0
    e1d2:	6078      	str	r0, [r7, #4]
    mp_obj_cell_t *self = MP_OBJ_TO_PTR(self_in);
    e1d4:	687b      	ldr	r3, [r7, #4]
    e1d6:	60fb      	str	r3, [r7, #12]
    return self->obj;
    e1d8:	68fb      	ldr	r3, [r7, #12]
    e1da:	685b      	ldr	r3, [r3, #4]
}
    e1dc:	4618      	mov	r0, r3
    e1de:	3714      	adds	r7, #20
    e1e0:	46bd      	mov	sp, r7
    e1e2:	f85d 7b04 	ldr.w	r7, [sp], #4
    e1e6:	4770      	bx	lr

0000e1e8 <mp_obj_cell_set>:

void mp_obj_cell_set(mp_obj_t self_in, mp_obj_t obj) {
    e1e8:	b480      	push	{r7}
    e1ea:	b085      	sub	sp, #20
    e1ec:	af00      	add	r7, sp, #0
    e1ee:	6078      	str	r0, [r7, #4]
    e1f0:	6039      	str	r1, [r7, #0]
    mp_obj_cell_t *self = MP_OBJ_TO_PTR(self_in);
    e1f2:	687b      	ldr	r3, [r7, #4]
    e1f4:	60fb      	str	r3, [r7, #12]
    self->obj = obj;
    e1f6:	68fb      	ldr	r3, [r7, #12]
    e1f8:	683a      	ldr	r2, [r7, #0]
    e1fa:	605a      	str	r2, [r3, #4]
}
    e1fc:	bf00      	nop
    e1fe:	3714      	adds	r7, #20
    e200:	46bd      	mov	sp, r7
    e202:	f85d 7b04 	ldr.w	r7, [sp], #4
    e206:	4770      	bx	lr

0000e208 <mp_obj_new_cell>:
#if MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_DETAILED
    .print = cell_print,
#endif
};

mp_obj_t mp_obj_new_cell(mp_obj_t obj) {
    e208:	b580      	push	{r7, lr}
    e20a:	b084      	sub	sp, #16
    e20c:	af00      	add	r7, sp, #0
    e20e:	6078      	str	r0, [r7, #4]
    mp_obj_cell_t *o = m_new_obj(mp_obj_cell_t);
    e210:	2008      	movs	r0, #8
    e212:	f7f2 f883 	bl	31c <m_malloc>
    e216:	60f8      	str	r0, [r7, #12]
    o->base.type = &mp_type_cell;
    e218:	68fb      	ldr	r3, [r7, #12]
    e21a:	4a05      	ldr	r2, [pc, #20]	; (e230 <mp_obj_new_cell+0x28>)
    e21c:	601a      	str	r2, [r3, #0]
    o->obj = obj;
    e21e:	68fb      	ldr	r3, [r7, #12]
    e220:	687a      	ldr	r2, [r7, #4]
    e222:	605a      	str	r2, [r3, #4]
    return MP_OBJ_FROM_PTR(o);
    e224:	68fb      	ldr	r3, [r7, #12]
}
    e226:	4618      	mov	r0, r3
    e228:	3710      	adds	r7, #16
    e22a:	46bd      	mov	sp, r7
    e22c:	bd80      	pop	{r7, pc}
    e22e:	bf00      	nop
    e230:	0001fa08 	.word	0x0001fa08

0000e234 <closure_call>:
    mp_obj_t fun;
    size_t n_closed;
    mp_obj_t closed[];
} mp_obj_closure_t;

STATIC mp_obj_t closure_call(mp_obj_t self_in, size_t n_args, size_t n_kw, const mp_obj_t *args) {
    e234:	b580      	push	{r7, lr}
    e236:	b08e      	sub	sp, #56	; 0x38
    e238:	af00      	add	r7, sp, #0
    e23a:	60f8      	str	r0, [r7, #12]
    e23c:	60b9      	str	r1, [r7, #8]
    e23e:	607a      	str	r2, [r7, #4]
    e240:	603b      	str	r3, [r7, #0]
    mp_obj_closure_t *self = MP_OBJ_TO_PTR(self_in);
    e242:	68fb      	ldr	r3, [r7, #12]
    e244:	637b      	str	r3, [r7, #52]	; 0x34

    // need to concatenate closed-over-vars and args

    size_t n_total = self->n_closed + n_args + 2 * n_kw;
    e246:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    e248:	689a      	ldr	r2, [r3, #8]
    e24a:	68bb      	ldr	r3, [r7, #8]
    e24c:	441a      	add	r2, r3
    e24e:	687b      	ldr	r3, [r7, #4]
    e250:	005b      	lsls	r3, r3, #1
    e252:	4413      	add	r3, r2
    e254:	633b      	str	r3, [r7, #48]	; 0x30
    if (n_total <= 5) {
    e256:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    e258:	2b05      	cmp	r3, #5
    e25a:	d826      	bhi.n	e2aa <closure_call+0x76>
        // use stack to allocate temporary args array
        mp_obj_t args2[5];
        memcpy(args2, self->closed, self->n_closed * sizeof(mp_obj_t));
    e25c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    e25e:	f103 010c 	add.w	r1, r3, #12
    e262:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    e264:	689b      	ldr	r3, [r3, #8]
    e266:	009a      	lsls	r2, r3, #2
    e268:	f107 0314 	add.w	r3, r7, #20
    e26c:	4618      	mov	r0, r3
    e26e:	f00d fba9 	bl	1b9c4 <memcpy>
        memcpy(args2 + self->n_closed, args, (n_args + 2 * n_kw) * sizeof(mp_obj_t));
    e272:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    e274:	689b      	ldr	r3, [r3, #8]
    e276:	009b      	lsls	r3, r3, #2
    e278:	f107 0214 	add.w	r2, r7, #20
    e27c:	18d0      	adds	r0, r2, r3
    e27e:	687b      	ldr	r3, [r7, #4]
    e280:	005a      	lsls	r2, r3, #1
    e282:	68bb      	ldr	r3, [r7, #8]
    e284:	4413      	add	r3, r2
    e286:	009b      	lsls	r3, r3, #2
    e288:	461a      	mov	r2, r3
    e28a:	6839      	ldr	r1, [r7, #0]
    e28c:	f00d fb9a 	bl	1b9c4 <memcpy>
        return mp_call_function_n_kw(self->fun, self->n_closed + n_args, n_kw, args2);
    e290:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    e292:	6858      	ldr	r0, [r3, #4]
    e294:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    e296:	689a      	ldr	r2, [r3, #8]
    e298:	68bb      	ldr	r3, [r7, #8]
    e29a:	18d1      	adds	r1, r2, r3
    e29c:	f107 0314 	add.w	r3, r7, #20
    e2a0:	687a      	ldr	r2, [r7, #4]
    e2a2:	f7fd fd80 	bl	bda6 <mp_call_function_n_kw>
    e2a6:	4603      	mov	r3, r0
    e2a8:	e02c      	b.n	e304 <closure_call+0xd0>
    } else {
        // use heap to allocate temporary args array
        mp_obj_t *args2 = m_new(mp_obj_t, n_total);
    e2aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    e2ac:	009b      	lsls	r3, r3, #2
    e2ae:	4618      	mov	r0, r3
    e2b0:	f7f2 f834 	bl	31c <m_malloc>
    e2b4:	62f8      	str	r0, [r7, #44]	; 0x2c
        memcpy(args2, self->closed, self->n_closed * sizeof(mp_obj_t));
    e2b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    e2b8:	f103 010c 	add.w	r1, r3, #12
    e2bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    e2be:	689b      	ldr	r3, [r3, #8]
    e2c0:	009b      	lsls	r3, r3, #2
    e2c2:	461a      	mov	r2, r3
    e2c4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    e2c6:	f00d fb7d 	bl	1b9c4 <memcpy>
        memcpy(args2 + self->n_closed, args, (n_args + 2 * n_kw) * sizeof(mp_obj_t));
    e2ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    e2cc:	689b      	ldr	r3, [r3, #8]
    e2ce:	009b      	lsls	r3, r3, #2
    e2d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    e2d2:	18d0      	adds	r0, r2, r3
    e2d4:	687b      	ldr	r3, [r7, #4]
    e2d6:	005a      	lsls	r2, r3, #1
    e2d8:	68bb      	ldr	r3, [r7, #8]
    e2da:	4413      	add	r3, r2
    e2dc:	009b      	lsls	r3, r3, #2
    e2de:	461a      	mov	r2, r3
    e2e0:	6839      	ldr	r1, [r7, #0]
    e2e2:	f00d fb6f 	bl	1b9c4 <memcpy>
        mp_obj_t res = mp_call_function_n_kw(self->fun, self->n_closed + n_args, n_kw, args2);
    e2e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    e2e8:	6858      	ldr	r0, [r3, #4]
    e2ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    e2ec:	689a      	ldr	r2, [r3, #8]
    e2ee:	68bb      	ldr	r3, [r7, #8]
    e2f0:	18d1      	adds	r1, r2, r3
    e2f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    e2f4:	687a      	ldr	r2, [r7, #4]
    e2f6:	f7fd fd56 	bl	bda6 <mp_call_function_n_kw>
    e2fa:	62b8      	str	r0, [r7, #40]	; 0x28
        m_del(mp_obj_t, args2, n_total);
    e2fc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    e2fe:	f7f2 f86b 	bl	3d8 <m_free>
        return res;
    e302:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
}
    e304:	4618      	mov	r0, r3
    e306:	3738      	adds	r7, #56	; 0x38
    e308:	46bd      	mov	sp, r7
    e30a:	bd80      	pop	{r7, pc}

0000e30c <mp_obj_new_closure>:
    .print = closure_print,
#endif
    .call = closure_call,
};

mp_obj_t mp_obj_new_closure(mp_obj_t fun, size_t n_closed_over, const mp_obj_t *closed) {
    e30c:	b580      	push	{r7, lr}
    e30e:	b086      	sub	sp, #24
    e310:	af00      	add	r7, sp, #0
    e312:	60f8      	str	r0, [r7, #12]
    e314:	60b9      	str	r1, [r7, #8]
    e316:	607a      	str	r2, [r7, #4]
    mp_obj_closure_t *o = m_new_obj_var(mp_obj_closure_t, mp_obj_t, n_closed_over);
    e318:	68bb      	ldr	r3, [r7, #8]
    e31a:	3303      	adds	r3, #3
    e31c:	009b      	lsls	r3, r3, #2
    e31e:	4618      	mov	r0, r3
    e320:	f7f1 fffc 	bl	31c <m_malloc>
    e324:	6178      	str	r0, [r7, #20]
    o->base.type = &closure_type;
    e326:	697b      	ldr	r3, [r7, #20]
    e328:	4a0a      	ldr	r2, [pc, #40]	; (e354 <mp_obj_new_closure+0x48>)
    e32a:	601a      	str	r2, [r3, #0]
    o->fun = fun;
    e32c:	697b      	ldr	r3, [r7, #20]
    e32e:	68fa      	ldr	r2, [r7, #12]
    e330:	605a      	str	r2, [r3, #4]
    o->n_closed = n_closed_over;
    e332:	697b      	ldr	r3, [r7, #20]
    e334:	68ba      	ldr	r2, [r7, #8]
    e336:	609a      	str	r2, [r3, #8]
    memcpy(o->closed, closed, n_closed_over * sizeof(mp_obj_t));
    e338:	697b      	ldr	r3, [r7, #20]
    e33a:	f103 000c 	add.w	r0, r3, #12
    e33e:	68bb      	ldr	r3, [r7, #8]
    e340:	009b      	lsls	r3, r3, #2
    e342:	461a      	mov	r2, r3
    e344:	6879      	ldr	r1, [r7, #4]
    e346:	f00d fb3d 	bl	1b9c4 <memcpy>
    return MP_OBJ_FROM_PTR(o);
    e34a:	697b      	ldr	r3, [r7, #20]
}
    e34c:	4618      	mov	r0, r3
    e34e:	3718      	adds	r7, #24
    e350:	46bd      	mov	sp, r7
    e352:	bd80      	pop	{r7, pc}
    e354:	0001fa44 	.word	0x0001fa44

0000e358 <MP_OBJ_IS_OBJ>:
    { return ((((mp_int_t)(o)) & 3) == 0); }
    e358:	b480      	push	{r7}
    e35a:	b083      	sub	sp, #12
    e35c:	af00      	add	r7, sp, #0
    e35e:	6078      	str	r0, [r7, #4]
    e360:	687b      	ldr	r3, [r7, #4]
    e362:	f003 0303 	and.w	r3, r3, #3
    e366:	2b00      	cmp	r3, #0
    e368:	bf0c      	ite	eq
    e36a:	2301      	moveq	r3, #1
    e36c:	2300      	movne	r3, #0
    e36e:	b2db      	uxtb	r3, r3
    e370:	4618      	mov	r0, r3
    e372:	370c      	adds	r7, #12
    e374:	46bd      	mov	sp, r7
    e376:	f85d 7b04 	ldr.w	r7, [sp], #4
    e37a:	4770      	bx	lr

0000e37c <MP_MAP_SLOT_IS_FILLED>:
static inline bool MP_MAP_SLOT_IS_FILLED(const mp_map_t *map, size_t pos) { return ((map)->table[pos].key != MP_OBJ_NULL && (map)->table[pos].key != MP_OBJ_SENTINEL); }
    e37c:	b480      	push	{r7}
    e37e:	b083      	sub	sp, #12
    e380:	af00      	add	r7, sp, #0
    e382:	6078      	str	r0, [r7, #4]
    e384:	6039      	str	r1, [r7, #0]
    e386:	687b      	ldr	r3, [r7, #4]
    e388:	689a      	ldr	r2, [r3, #8]
    e38a:	683b      	ldr	r3, [r7, #0]
    e38c:	00db      	lsls	r3, r3, #3
    e38e:	4413      	add	r3, r2
    e390:	681b      	ldr	r3, [r3, #0]
    e392:	2b00      	cmp	r3, #0
    e394:	d009      	beq.n	e3aa <MP_MAP_SLOT_IS_FILLED+0x2e>
    e396:	687b      	ldr	r3, [r7, #4]
    e398:	689a      	ldr	r2, [r3, #8]
    e39a:	683b      	ldr	r3, [r7, #0]
    e39c:	00db      	lsls	r3, r3, #3
    e39e:	4413      	add	r3, r2
    e3a0:	681b      	ldr	r3, [r3, #0]
    e3a2:	2b08      	cmp	r3, #8
    e3a4:	d001      	beq.n	e3aa <MP_MAP_SLOT_IS_FILLED+0x2e>
    e3a6:	2301      	movs	r3, #1
    e3a8:	e000      	b.n	e3ac <MP_MAP_SLOT_IS_FILLED+0x30>
    e3aa:	2300      	movs	r3, #0
    e3ac:	f003 0301 	and.w	r3, r3, #1
    e3b0:	b2db      	uxtb	r3, r3
    e3b2:	4618      	mov	r0, r3
    e3b4:	370c      	adds	r7, #12
    e3b6:	46bd      	mov	sp, r7
    e3b8:	f85d 7b04 	ldr.w	r7, [sp], #4
    e3bc:	4770      	bx	lr

0000e3be <mp_obj_new_bool>:
static inline mp_obj_t mp_obj_new_bool(mp_int_t x) { return x ? mp_const_true : mp_const_false; }
    e3be:	b480      	push	{r7}
    e3c0:	b083      	sub	sp, #12
    e3c2:	af00      	add	r7, sp, #0
    e3c4:	6078      	str	r0, [r7, #4]
    e3c6:	687b      	ldr	r3, [r7, #4]
    e3c8:	2b00      	cmp	r3, #0
    e3ca:	d001      	beq.n	e3d0 <mp_obj_new_bool+0x12>
    e3cc:	4b04      	ldr	r3, [pc, #16]	; (e3e0 <mp_obj_new_bool+0x22>)
    e3ce:	e000      	b.n	e3d2 <mp_obj_new_bool+0x14>
    e3d0:	4b04      	ldr	r3, [pc, #16]	; (e3e4 <mp_obj_new_bool+0x26>)
    e3d2:	4618      	mov	r0, r3
    e3d4:	370c      	adds	r7, #12
    e3d6:	46bd      	mov	sp, r7
    e3d8:	f85d 7b04 	ldr.w	r7, [sp], #4
    e3dc:	4770      	bx	lr
    e3de:	bf00      	nop
    e3e0:	0001f9c4 	.word	0x0001f9c4
    e3e4:	0001f9bc 	.word	0x0001f9bc

0000e3e8 <dict_iter_next>:
STATIC mp_obj_t dict_update(size_t n_args, const mp_obj_t *args, mp_map_t *kwargs);

// This is a helper function to iterate through a dictionary.  The state of
// the iteration is held in *cur and should be initialised with zero for the
// first call.  Will return NULL when no more elements are available.
STATIC mp_map_elem_t *dict_iter_next(mp_obj_dict_t *dict, size_t *cur) {
    e3e8:	b580      	push	{r7, lr}
    e3ea:	b086      	sub	sp, #24
    e3ec:	af00      	add	r7, sp, #0
    e3ee:	6078      	str	r0, [r7, #4]
    e3f0:	6039      	str	r1, [r7, #0]
    size_t max = dict->map.alloc;
    e3f2:	687b      	ldr	r3, [r7, #4]
    e3f4:	689b      	ldr	r3, [r3, #8]
    e3f6:	613b      	str	r3, [r7, #16]
    mp_map_t *map = &dict->map;
    e3f8:	687b      	ldr	r3, [r7, #4]
    e3fa:	3304      	adds	r3, #4
    e3fc:	60fb      	str	r3, [r7, #12]

    for (size_t i = *cur; i < max; i++) {
    e3fe:	683b      	ldr	r3, [r7, #0]
    e400:	681b      	ldr	r3, [r3, #0]
    e402:	617b      	str	r3, [r7, #20]
    e404:	e013      	b.n	e42e <dict_iter_next+0x46>
        if (MP_MAP_SLOT_IS_FILLED(map, i)) {
    e406:	6979      	ldr	r1, [r7, #20]
    e408:	68f8      	ldr	r0, [r7, #12]
    e40a:	f7ff ffb7 	bl	e37c <MP_MAP_SLOT_IS_FILLED>
    e40e:	4603      	mov	r3, r0
    e410:	2b00      	cmp	r3, #0
    e412:	d009      	beq.n	e428 <dict_iter_next+0x40>
            *cur = i + 1;
    e414:	697b      	ldr	r3, [r7, #20]
    e416:	1c5a      	adds	r2, r3, #1
    e418:	683b      	ldr	r3, [r7, #0]
    e41a:	601a      	str	r2, [r3, #0]
            return &(map->table[i]);
    e41c:	68fb      	ldr	r3, [r7, #12]
    e41e:	689a      	ldr	r2, [r3, #8]
    e420:	697b      	ldr	r3, [r7, #20]
    e422:	00db      	lsls	r3, r3, #3
    e424:	4413      	add	r3, r2
    e426:	e007      	b.n	e438 <dict_iter_next+0x50>
    for (size_t i = *cur; i < max; i++) {
    e428:	697b      	ldr	r3, [r7, #20]
    e42a:	3301      	adds	r3, #1
    e42c:	617b      	str	r3, [r7, #20]
    e42e:	697a      	ldr	r2, [r7, #20]
    e430:	693b      	ldr	r3, [r7, #16]
    e432:	429a      	cmp	r2, r3
    e434:	d3e7      	bcc.n	e406 <dict_iter_next+0x1e>
        }
    }

    return NULL;
    e436:	2300      	movs	r3, #0
}
    e438:	4618      	mov	r0, r3
    e43a:	3718      	adds	r7, #24
    e43c:	46bd      	mov	sp, r7
    e43e:	bd80      	pop	{r7, pc}

0000e440 <dict_print>:

STATIC void dict_print(const mp_print_t *print, mp_obj_t self_in, mp_print_kind_t kind) {
    e440:	b580      	push	{r7, lr}
    e442:	b088      	sub	sp, #32
    e444:	af00      	add	r7, sp, #0
    e446:	60f8      	str	r0, [r7, #12]
    e448:	60b9      	str	r1, [r7, #8]
    e44a:	607a      	str	r2, [r7, #4]
    mp_obj_dict_t *self = MP_OBJ_TO_PTR(self_in);
    e44c:	68bb      	ldr	r3, [r7, #8]
    e44e:	61bb      	str	r3, [r7, #24]
    bool first = true;
    e450:	2301      	movs	r3, #1
    e452:	77fb      	strb	r3, [r7, #31]
    if (!(MICROPY_PY_UJSON && kind == PRINT_JSON)) {
        kind = PRINT_REPR;
    e454:	2301      	movs	r3, #1
    e456:	607b      	str	r3, [r7, #4]
    }
    if (MICROPY_PY_COLLECTIONS_ORDEREDDICT && self->base.type != &mp_type_dict) {
        mp_printf(print, "%q(", self->base.type->name);
    }
    mp_print_str(print, "{");
    e458:	491c      	ldr	r1, [pc, #112]	; (e4cc <dict_print+0x8c>)
    e45a:	68f8      	ldr	r0, [r7, #12]
    e45c:	f7f3 f9f8 	bl	1850 <mp_print_str>
    size_t cur = 0;
    e460:	2300      	movs	r3, #0
    e462:	613b      	str	r3, [r7, #16]
    mp_map_elem_t *next = NULL;
    e464:	2300      	movs	r3, #0
    e466:	617b      	str	r3, [r7, #20]
    while ((next = dict_iter_next(self, &cur)) != NULL) {
    e468:	e01d      	b.n	e4a6 <dict_print+0x66>
        if (!first) {
    e46a:	7ffb      	ldrb	r3, [r7, #31]
    e46c:	f083 0301 	eor.w	r3, r3, #1
    e470:	b2db      	uxtb	r3, r3
    e472:	2b00      	cmp	r3, #0
    e474:	d003      	beq.n	e47e <dict_print+0x3e>
            mp_print_str(print, ", ");
    e476:	4916      	ldr	r1, [pc, #88]	; (e4d0 <dict_print+0x90>)
    e478:	68f8      	ldr	r0, [r7, #12]
    e47a:	f7f3 f9e9 	bl	1850 <mp_print_str>
        }
        first = false;
    e47e:	2300      	movs	r3, #0
    e480:	77fb      	strb	r3, [r7, #31]
        mp_obj_print_helper(print, next->key, kind);
    e482:	697b      	ldr	r3, [r7, #20]
    e484:	681b      	ldr	r3, [r3, #0]
    e486:	687a      	ldr	r2, [r7, #4]
    e488:	4619      	mov	r1, r3
    e48a:	68f8      	ldr	r0, [r7, #12]
    e48c:	f7ff f991 	bl	d7b2 <mp_obj_print_helper>
        mp_print_str(print, ": ");
    e490:	4910      	ldr	r1, [pc, #64]	; (e4d4 <dict_print+0x94>)
    e492:	68f8      	ldr	r0, [r7, #12]
    e494:	f7f3 f9dc 	bl	1850 <mp_print_str>
        mp_obj_print_helper(print, next->value, kind);
    e498:	697b      	ldr	r3, [r7, #20]
    e49a:	685b      	ldr	r3, [r3, #4]
    e49c:	687a      	ldr	r2, [r7, #4]
    e49e:	4619      	mov	r1, r3
    e4a0:	68f8      	ldr	r0, [r7, #12]
    e4a2:	f7ff f986 	bl	d7b2 <mp_obj_print_helper>
    while ((next = dict_iter_next(self, &cur)) != NULL) {
    e4a6:	f107 0310 	add.w	r3, r7, #16
    e4aa:	4619      	mov	r1, r3
    e4ac:	69b8      	ldr	r0, [r7, #24]
    e4ae:	f7ff ff9b 	bl	e3e8 <dict_iter_next>
    e4b2:	6178      	str	r0, [r7, #20]
    e4b4:	697b      	ldr	r3, [r7, #20]
    e4b6:	2b00      	cmp	r3, #0
    e4b8:	d1d7      	bne.n	e46a <dict_print+0x2a>
    }
    mp_print_str(print, "}");
    e4ba:	4907      	ldr	r1, [pc, #28]	; (e4d8 <dict_print+0x98>)
    e4bc:	68f8      	ldr	r0, [r7, #12]
    e4be:	f7f3 f9c7 	bl	1850 <mp_print_str>
    if (MICROPY_PY_COLLECTIONS_ORDEREDDICT && self->base.type != &mp_type_dict) {
        mp_print_str(print, ")");
    }
}
    e4c2:	bf00      	nop
    e4c4:	3720      	adds	r7, #32
    e4c6:	46bd      	mov	sp, r7
    e4c8:	bd80      	pop	{r7, pc}
    e4ca:	bf00      	nop
    e4cc:	0001fa80 	.word	0x0001fa80
    e4d0:	0001fa84 	.word	0x0001fa84
    e4d4:	0001fa88 	.word	0x0001fa88
    e4d8:	0001fa8c 	.word	0x0001fa8c

0000e4dc <dict_make_new>:

STATIC mp_obj_t dict_make_new(const mp_obj_type_t *type, size_t n_args, size_t n_kw, const mp_obj_t *args) {
    e4dc:	b580      	push	{r7, lr}
    e4de:	b08c      	sub	sp, #48	; 0x30
    e4e0:	af00      	add	r7, sp, #0
    e4e2:	60f8      	str	r0, [r7, #12]
    e4e4:	60b9      	str	r1, [r7, #8]
    e4e6:	607a      	str	r2, [r7, #4]
    e4e8:	603b      	str	r3, [r7, #0]
    mp_obj_t dict_out = mp_obj_new_dict(0);
    e4ea:	2000      	movs	r0, #0
    e4ec:	f000 fd94 	bl	f018 <mp_obj_new_dict>
    e4f0:	62f8      	str	r0, [r7, #44]	; 0x2c
    mp_obj_dict_t *dict = MP_OBJ_TO_PTR(dict_out);
    e4f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    e4f4:	62bb      	str	r3, [r7, #40]	; 0x28
    dict->base.type = type;
    e4f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
    e4f8:	68fa      	ldr	r2, [r7, #12]
    e4fa:	601a      	str	r2, [r3, #0]
    #if MICROPY_PY_COLLECTIONS_ORDEREDDICT
    if (type == &mp_type_ordereddict) {
        dict->map.is_ordered = 1;
    }
    #endif
    if (n_args > 0 || n_kw > 0) {
    e4fc:	68bb      	ldr	r3, [r7, #8]
    e4fe:	2b00      	cmp	r3, #0
    e500:	d102      	bne.n	e508 <dict_make_new+0x2c>
    e502:	687b      	ldr	r3, [r7, #4]
    e504:	2b00      	cmp	r3, #0
    e506:	d017      	beq.n	e538 <dict_make_new+0x5c>
        mp_obj_t args2[2] = {dict_out, args[0]}; // args[0] is always valid, even if it's not a positional arg
    e508:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    e50a:	623b      	str	r3, [r7, #32]
    e50c:	683b      	ldr	r3, [r7, #0]
    e50e:	681b      	ldr	r3, [r3, #0]
    e510:	627b      	str	r3, [r7, #36]	; 0x24
        mp_map_t kwargs;
        mp_map_init_fixed_table(&kwargs, n_kw, args + n_args);
    e512:	68bb      	ldr	r3, [r7, #8]
    e514:	009b      	lsls	r3, r3, #2
    e516:	683a      	ldr	r2, [r7, #0]
    e518:	441a      	add	r2, r3
    e51a:	f107 0314 	add.w	r3, r7, #20
    e51e:	6879      	ldr	r1, [r7, #4]
    e520:	4618      	mov	r0, r3
    e522:	f7fe fea6 	bl	d272 <mp_map_init_fixed_table>
        dict_update(n_args + 1, args2, &kwargs); // dict_update will check that n_args + 1 == 1 or 2
    e526:	68bb      	ldr	r3, [r7, #8]
    e528:	3301      	adds	r3, #1
    e52a:	f107 0214 	add.w	r2, r7, #20
    e52e:	f107 0120 	add.w	r1, r7, #32
    e532:	4618      	mov	r0, r3
    e534:	f000 fadc 	bl	eaf0 <dict_update>
    }
    return dict_out;
    e538:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
    e53a:	4618      	mov	r0, r3
    e53c:	3730      	adds	r7, #48	; 0x30
    e53e:	46bd      	mov	sp, r7
    e540:	bd80      	pop	{r7, pc}

0000e542 <dict_unary_op>:

STATIC mp_obj_t dict_unary_op(mp_unary_op_t op, mp_obj_t self_in) {
    e542:	b580      	push	{r7, lr}
    e544:	b084      	sub	sp, #16
    e546:	af00      	add	r7, sp, #0
    e548:	6078      	str	r0, [r7, #4]
    e54a:	6039      	str	r1, [r7, #0]
    mp_obj_dict_t *self = MP_OBJ_TO_PTR(self_in);
    e54c:	683b      	ldr	r3, [r7, #0]
    e54e:	60fb      	str	r3, [r7, #12]
    switch (op) {
    e550:	687b      	ldr	r3, [r7, #4]
    e552:	2b04      	cmp	r3, #4
    e554:	d002      	beq.n	e55c <dict_unary_op+0x1a>
    e556:	2b05      	cmp	r3, #5
    e558:	d00e      	beq.n	e578 <dict_unary_op+0x36>
    e55a:	e015      	b.n	e588 <dict_unary_op+0x46>
        case MP_UNARY_OP_BOOL: return mp_obj_new_bool(self->map.used != 0);
    e55c:	68fb      	ldr	r3, [r7, #12]
    e55e:	685b      	ldr	r3, [r3, #4]
    e560:	f023 0307 	bic.w	r3, r3, #7
    e564:	2b00      	cmp	r3, #0
    e566:	bf14      	ite	ne
    e568:	2301      	movne	r3, #1
    e56a:	2300      	moveq	r3, #0
    e56c:	b2db      	uxtb	r3, r3
    e56e:	4618      	mov	r0, r3
    e570:	f7ff ff25 	bl	e3be <mp_obj_new_bool>
    e574:	4603      	mov	r3, r0
    e576:	e008      	b.n	e58a <dict_unary_op+0x48>
        case MP_UNARY_OP_LEN: return MP_OBJ_NEW_SMALL_INT(self->map.used);
    e578:	68fb      	ldr	r3, [r7, #12]
    e57a:	685b      	ldr	r3, [r3, #4]
    e57c:	f3c3 03dc 	ubfx	r3, r3, #3, #29
    e580:	005b      	lsls	r3, r3, #1
    e582:	f043 0301 	orr.w	r3, r3, #1
    e586:	e000      	b.n	e58a <dict_unary_op+0x48>
        case MP_UNARY_OP_SIZEOF: {
            size_t sz = sizeof(*self) + sizeof(*self->map.table) * self->map.alloc;
            return MP_OBJ_NEW_SMALL_INT(sz);
        }
        #endif
        default: return MP_OBJ_NULL; // op not supported
    e588:	2300      	movs	r3, #0
    }
}
    e58a:	4618      	mov	r0, r3
    e58c:	3710      	adds	r7, #16
    e58e:	46bd      	mov	sp, r7
    e590:	bd80      	pop	{r7, pc}

0000e592 <dict_binary_op>:

STATIC mp_obj_t dict_binary_op(mp_binary_op_t op, mp_obj_t lhs_in, mp_obj_t rhs_in) {
    e592:	b580      	push	{r7, lr}
    e594:	b08a      	sub	sp, #40	; 0x28
    e596:	af00      	add	r7, sp, #0
    e598:	60f8      	str	r0, [r7, #12]
    e59a:	60b9      	str	r1, [r7, #8]
    e59c:	607a      	str	r2, [r7, #4]
    mp_obj_dict_t *o = MP_OBJ_TO_PTR(lhs_in);
    e59e:	68bb      	ldr	r3, [r7, #8]
    e5a0:	627b      	str	r3, [r7, #36]	; 0x24
    switch (op) {
    e5a2:	68fb      	ldr	r3, [r7, #12]
    e5a4:	2b02      	cmp	r3, #2
    e5a6:	d014      	beq.n	e5d2 <dict_binary_op+0x40>
    e5a8:	2b22      	cmp	r3, #34	; 0x22
    e5aa:	d15a      	bne.n	e662 <dict_binary_op+0xd0>
        case MP_BINARY_OP_CONTAINS: {
            mp_map_elem_t *elem = mp_map_lookup(&o->map, rhs_in, MP_MAP_LOOKUP);
    e5ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    e5ae:	3304      	adds	r3, #4
    e5b0:	2200      	movs	r2, #0
    e5b2:	6879      	ldr	r1, [r7, #4]
    e5b4:	4618      	mov	r0, r3
    e5b6:	f7fe ff21 	bl	d3fc <mp_map_lookup>
    e5ba:	6238      	str	r0, [r7, #32]
            return mp_obj_new_bool(elem != NULL);
    e5bc:	6a3b      	ldr	r3, [r7, #32]
    e5be:	2b00      	cmp	r3, #0
    e5c0:	bf14      	ite	ne
    e5c2:	2301      	movne	r3, #1
    e5c4:	2300      	moveq	r3, #0
    e5c6:	b2db      	uxtb	r3, r3
    e5c8:	4618      	mov	r0, r3
    e5ca:	f7ff fef8 	bl	e3be <mp_obj_new_bool>
    e5ce:	4603      	mov	r3, r0
    e5d0:	e048      	b.n	e664 <dict_binary_op+0xd2>
                    }
                }
                return e1 == NULL && e2 == NULL ? mp_const_true : mp_const_false;
            } else
            #endif
            if (MP_OBJ_IS_TYPE(rhs_in, &mp_type_dict)) {
    e5d2:	6878      	ldr	r0, [r7, #4]
    e5d4:	f7ff fec0 	bl	e358 <MP_OBJ_IS_OBJ>
    e5d8:	4603      	mov	r3, r0
    e5da:	2b00      	cmp	r3, #0
    e5dc:	d03f      	beq.n	e65e <dict_binary_op+0xcc>
    e5de:	687b      	ldr	r3, [r7, #4]
    e5e0:	681b      	ldr	r3, [r3, #0]
    e5e2:	4a22      	ldr	r2, [pc, #136]	; (e66c <dict_binary_op+0xda>)
    e5e4:	4293      	cmp	r3, r2
    e5e6:	d13a      	bne.n	e65e <dict_binary_op+0xcc>
                mp_obj_dict_t *rhs = MP_OBJ_TO_PTR(rhs_in);
    e5e8:	687b      	ldr	r3, [r7, #4]
    e5ea:	61fb      	str	r3, [r7, #28]
                if (o->map.used != rhs->map.used) {
    e5ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    e5ee:	685b      	ldr	r3, [r3, #4]
    e5f0:	f3c3 02dc 	ubfx	r2, r3, #3, #29
    e5f4:	69fb      	ldr	r3, [r7, #28]
    e5f6:	685b      	ldr	r3, [r3, #4]
    e5f8:	f3c3 03dc 	ubfx	r3, r3, #3, #29
    e5fc:	429a      	cmp	r2, r3
    e5fe:	d001      	beq.n	e604 <dict_binary_op+0x72>
                    return mp_const_false;
    e600:	4b1b      	ldr	r3, [pc, #108]	; (e670 <dict_binary_op+0xde>)
    e602:	e02f      	b.n	e664 <dict_binary_op+0xd2>
                }

                size_t cur = 0;
    e604:	2300      	movs	r3, #0
    e606:	613b      	str	r3, [r7, #16]
                mp_map_elem_t *next = NULL;
    e608:	2300      	movs	r3, #0
    e60a:	61bb      	str	r3, [r7, #24]
                while ((next = dict_iter_next(o, &cur)) != NULL) {
    e60c:	e01b      	b.n	e646 <dict_binary_op+0xb4>
                    mp_map_elem_t *elem = mp_map_lookup(&rhs->map, next->key, MP_MAP_LOOKUP);
    e60e:	69fb      	ldr	r3, [r7, #28]
    e610:	1d18      	adds	r0, r3, #4
    e612:	69bb      	ldr	r3, [r7, #24]
    e614:	681b      	ldr	r3, [r3, #0]
    e616:	2200      	movs	r2, #0
    e618:	4619      	mov	r1, r3
    e61a:	f7fe feef 	bl	d3fc <mp_map_lookup>
    e61e:	6178      	str	r0, [r7, #20]
                    if (elem == NULL || !mp_obj_equal(next->value, elem->value)) {
    e620:	697b      	ldr	r3, [r7, #20]
    e622:	2b00      	cmp	r3, #0
    e624:	d00d      	beq.n	e642 <dict_binary_op+0xb0>
    e626:	69bb      	ldr	r3, [r7, #24]
    e628:	685a      	ldr	r2, [r3, #4]
    e62a:	697b      	ldr	r3, [r7, #20]
    e62c:	685b      	ldr	r3, [r3, #4]
    e62e:	4619      	mov	r1, r3
    e630:	4610      	mov	r0, r2
    e632:	f7ff f9df 	bl	d9f4 <mp_obj_equal>
    e636:	4603      	mov	r3, r0
    e638:	f083 0301 	eor.w	r3, r3, #1
    e63c:	b2db      	uxtb	r3, r3
    e63e:	2b00      	cmp	r3, #0
    e640:	d001      	beq.n	e646 <dict_binary_op+0xb4>
                        return mp_const_false;
    e642:	4b0b      	ldr	r3, [pc, #44]	; (e670 <dict_binary_op+0xde>)
    e644:	e00e      	b.n	e664 <dict_binary_op+0xd2>
                while ((next = dict_iter_next(o, &cur)) != NULL) {
    e646:	f107 0310 	add.w	r3, r7, #16
    e64a:	4619      	mov	r1, r3
    e64c:	6a78      	ldr	r0, [r7, #36]	; 0x24
    e64e:	f7ff fecb 	bl	e3e8 <dict_iter_next>
    e652:	61b8      	str	r0, [r7, #24]
    e654:	69bb      	ldr	r3, [r7, #24]
    e656:	2b00      	cmp	r3, #0
    e658:	d1d9      	bne.n	e60e <dict_binary_op+0x7c>
                    }
                }
                return mp_const_true;
    e65a:	4b06      	ldr	r3, [pc, #24]	; (e674 <dict_binary_op+0xe2>)
    e65c:	e002      	b.n	e664 <dict_binary_op+0xd2>
            } else {
                // dict is not equal to instance of any other type
                return mp_const_false;
    e65e:	4b04      	ldr	r3, [pc, #16]	; (e670 <dict_binary_op+0xde>)
    e660:	e000      	b.n	e664 <dict_binary_op+0xd2>
            }
        }
        default:
            // op not supported
            return MP_OBJ_NULL;
    e662:	2300      	movs	r3, #0
    }
}
    e664:	4618      	mov	r0, r3
    e666:	3728      	adds	r7, #40	; 0x28
    e668:	46bd      	mov	sp, r7
    e66a:	bd80      	pop	{r7, pc}
    e66c:	0001fe68 	.word	0x0001fe68
    e670:	0001f9bc 	.word	0x0001f9bc
    e674:	0001f9c4 	.word	0x0001f9c4

0000e678 <mp_obj_dict_get>:

// TODO: Make sure this is inlined in dict_subscr() below.
mp_obj_t mp_obj_dict_get(mp_obj_t self_in, mp_obj_t index) {
    e678:	b580      	push	{r7, lr}
    e67a:	b084      	sub	sp, #16
    e67c:	af00      	add	r7, sp, #0
    e67e:	6078      	str	r0, [r7, #4]
    e680:	6039      	str	r1, [r7, #0]
    mp_obj_dict_t *self = MP_OBJ_TO_PTR(self_in);
    e682:	687b      	ldr	r3, [r7, #4]
    e684:	60fb      	str	r3, [r7, #12]
    mp_map_elem_t *elem = mp_map_lookup(&self->map, index, MP_MAP_LOOKUP);
    e686:	68fb      	ldr	r3, [r7, #12]
    e688:	3304      	adds	r3, #4
    e68a:	2200      	movs	r2, #0
    e68c:	6839      	ldr	r1, [r7, #0]
    e68e:	4618      	mov	r0, r3
    e690:	f7fe feb4 	bl	d3fc <mp_map_lookup>
    e694:	60b8      	str	r0, [r7, #8]
    if (elem == NULL) {
    e696:	68bb      	ldr	r3, [r7, #8]
    e698:	2b00      	cmp	r3, #0
    e69a:	d107      	bne.n	e6ac <mp_obj_dict_get+0x34>
        nlr_raise(mp_obj_new_exception_arg1(&mp_type_KeyError, index));
    e69c:	6839      	ldr	r1, [r7, #0]
    e69e:	4806      	ldr	r0, [pc, #24]	; (e6b8 <mp_obj_dict_get+0x40>)
    e6a0:	f000 fe72 	bl	f388 <mp_obj_new_exception_arg1>
    e6a4:	4603      	mov	r3, r0
    e6a6:	4618      	mov	r0, r3
    e6a8:	f7f1 fe1a 	bl	2e0 <nlr_jump>
    } else {
        return elem->value;
    e6ac:	68bb      	ldr	r3, [r7, #8]
    e6ae:	685b      	ldr	r3, [r3, #4]
    }
}
    e6b0:	4618      	mov	r0, r3
    e6b2:	3710      	adds	r7, #16
    e6b4:	46bd      	mov	sp, r7
    e6b6:	bd80      	pop	{r7, pc}
    e6b8:	00020304 	.word	0x00020304

0000e6bc <dict_subscr>:

STATIC mp_obj_t dict_subscr(mp_obj_t self_in, mp_obj_t index, mp_obj_t value) {
    e6bc:	b580      	push	{r7, lr}
    e6be:	b086      	sub	sp, #24
    e6c0:	af00      	add	r7, sp, #0
    e6c2:	60f8      	str	r0, [r7, #12]
    e6c4:	60b9      	str	r1, [r7, #8]
    e6c6:	607a      	str	r2, [r7, #4]
    if (value == MP_OBJ_NULL) {
    e6c8:	687b      	ldr	r3, [r7, #4]
    e6ca:	2b00      	cmp	r3, #0
    e6cc:	d105      	bne.n	e6da <dict_subscr+0x1e>
        // delete
        mp_obj_dict_delete(self_in, index);
    e6ce:	68b9      	ldr	r1, [r7, #8]
    e6d0:	68f8      	ldr	r0, [r7, #12]
    e6d2:	f000 fcf7 	bl	f0c4 <mp_obj_dict_delete>
        return mp_const_none;
    e6d6:	4b13      	ldr	r3, [pc, #76]	; (e724 <dict_subscr+0x68>)
    e6d8:	e020      	b.n	e71c <dict_subscr+0x60>
    } else if (value == MP_OBJ_SENTINEL) {
    e6da:	687b      	ldr	r3, [r7, #4]
    e6dc:	2b08      	cmp	r3, #8
    e6de:	d117      	bne.n	e710 <dict_subscr+0x54>
        // load
        mp_obj_dict_t *self = MP_OBJ_TO_PTR(self_in);
    e6e0:	68fb      	ldr	r3, [r7, #12]
    e6e2:	617b      	str	r3, [r7, #20]
        mp_map_elem_t *elem = mp_map_lookup(&self->map, index, MP_MAP_LOOKUP);
    e6e4:	697b      	ldr	r3, [r7, #20]
    e6e6:	3304      	adds	r3, #4
    e6e8:	2200      	movs	r2, #0
    e6ea:	68b9      	ldr	r1, [r7, #8]
    e6ec:	4618      	mov	r0, r3
    e6ee:	f7fe fe85 	bl	d3fc <mp_map_lookup>
    e6f2:	6138      	str	r0, [r7, #16]
        if (elem == NULL) {
    e6f4:	693b      	ldr	r3, [r7, #16]
    e6f6:	2b00      	cmp	r3, #0
    e6f8:	d107      	bne.n	e70a <dict_subscr+0x4e>
            nlr_raise(mp_obj_new_exception_arg1(&mp_type_KeyError, index));
    e6fa:	68b9      	ldr	r1, [r7, #8]
    e6fc:	480a      	ldr	r0, [pc, #40]	; (e728 <dict_subscr+0x6c>)
    e6fe:	f000 fe43 	bl	f388 <mp_obj_new_exception_arg1>
    e702:	4603      	mov	r3, r0
    e704:	4618      	mov	r0, r3
    e706:	f7f1 fdeb 	bl	2e0 <nlr_jump>
        } else {
            return elem->value;
    e70a:	693b      	ldr	r3, [r7, #16]
    e70c:	685b      	ldr	r3, [r3, #4]
    e70e:	e005      	b.n	e71c <dict_subscr+0x60>
        }
    } else {
        // store
        mp_obj_dict_store(self_in, index, value);
    e710:	687a      	ldr	r2, [r7, #4]
    e712:	68b9      	ldr	r1, [r7, #8]
    e714:	68f8      	ldr	r0, [r7, #12]
    e716:	f000 fca0 	bl	f05a <mp_obj_dict_store>
        return mp_const_none;
    e71a:	4b02      	ldr	r3, [pc, #8]	; (e724 <dict_subscr+0x68>)
    }
}
    e71c:	4618      	mov	r0, r3
    e71e:	3718      	adds	r7, #24
    e720:	46bd      	mov	sp, r7
    e722:	bd80      	pop	{r7, pc}
    e724:	000212b4 	.word	0x000212b4
    e728:	00020304 	.word	0x00020304

0000e72c <mp_ensure_not_fixed>:

/******************************************************************************/
/* dict methods                                                               */

STATIC void mp_ensure_not_fixed(const mp_obj_dict_t *dict) {
    e72c:	b580      	push	{r7, lr}
    e72e:	b082      	sub	sp, #8
    e730:	af00      	add	r7, sp, #0
    e732:	6078      	str	r0, [r7, #4]
    if (dict->map.is_fixed) {
    e734:	687b      	ldr	r3, [r7, #4]
    e736:	791b      	ldrb	r3, [r3, #4]
    e738:	f003 0302 	and.w	r3, r3, #2
    e73c:	b2db      	uxtb	r3, r3
    e73e:	2b00      	cmp	r3, #0
    e740:	d002      	beq.n	e748 <mp_ensure_not_fixed+0x1c>
        mp_raise_TypeError(NULL);
    e742:	2000      	movs	r0, #0
    e744:	f7fe fbee 	bl	cf24 <mp_raise_TypeError>
    }
}
    e748:	bf00      	nop
    e74a:	3708      	adds	r7, #8
    e74c:	46bd      	mov	sp, r7
    e74e:	bd80      	pop	{r7, pc}

0000e750 <dict_clear>:

STATIC mp_obj_t dict_clear(mp_obj_t self_in) {
    e750:	b580      	push	{r7, lr}
    e752:	b084      	sub	sp, #16
    e754:	af00      	add	r7, sp, #0
    e756:	6078      	str	r0, [r7, #4]
    mp_check_self(MP_OBJ_IS_DICT_TYPE(self_in));
    e758:	6878      	ldr	r0, [r7, #4]
    e75a:	f7ff fdfd 	bl	e358 <MP_OBJ_IS_OBJ>
    e75e:	4603      	mov	r3, r0
    e760:	2b00      	cmp	r3, #0
    e762:	d005      	beq.n	e770 <dict_clear+0x20>
    e764:	687b      	ldr	r3, [r7, #4]
    e766:	681b      	ldr	r3, [r3, #0]
    e768:	68db      	ldr	r3, [r3, #12]
    e76a:	4a0c      	ldr	r2, [pc, #48]	; (e79c <dict_clear+0x4c>)
    e76c:	4293      	cmp	r3, r2
    e76e:	d005      	beq.n	e77c <dict_clear+0x2c>
    e770:	4b0b      	ldr	r3, [pc, #44]	; (e7a0 <dict_clear+0x50>)
    e772:	4a0c      	ldr	r2, [pc, #48]	; (e7a4 <dict_clear+0x54>)
    e774:	21cd      	movs	r1, #205	; 0xcd
    e776:	480c      	ldr	r0, [pc, #48]	; (e7a8 <dict_clear+0x58>)
    e778:	f00c fd20 	bl	1b1bc <__assert_func>
    mp_obj_dict_t *self = MP_OBJ_TO_PTR(self_in);
    e77c:	687b      	ldr	r3, [r7, #4]
    e77e:	60fb      	str	r3, [r7, #12]
    mp_ensure_not_fixed(self);
    e780:	68f8      	ldr	r0, [r7, #12]
    e782:	f7ff ffd3 	bl	e72c <mp_ensure_not_fixed>

    mp_map_clear(&self->map);
    e786:	68fb      	ldr	r3, [r7, #12]
    e788:	3304      	adds	r3, #4
    e78a:	4618      	mov	r0, r3
    e78c:	f7fe fdb6 	bl	d2fc <mp_map_clear>

    return mp_const_none;
    e790:	4b06      	ldr	r3, [pc, #24]	; (e7ac <dict_clear+0x5c>)
}
    e792:	4618      	mov	r0, r3
    e794:	3710      	adds	r7, #16
    e796:	46bd      	mov	sp, r7
    e798:	bd80      	pop	{r7, pc}
    e79a:	bf00      	nop
    e79c:	0000e4dd 	.word	0x0000e4dd
    e7a0:	0001fa90 	.word	0x0001fa90
    e7a4:	0001fea4 	.word	0x0001fea4
    e7a8:	0001faf0 	.word	0x0001faf0
    e7ac:	000212b4 	.word	0x000212b4

0000e7b0 <dict_copy>:
STATIC MP_DEFINE_CONST_FUN_OBJ_1(dict_clear_obj, dict_clear);

STATIC mp_obj_t dict_copy(mp_obj_t self_in) {
    e7b0:	b580      	push	{r7, lr}
    e7b2:	b086      	sub	sp, #24
    e7b4:	af00      	add	r7, sp, #0
    e7b6:	6078      	str	r0, [r7, #4]
    mp_check_self(MP_OBJ_IS_DICT_TYPE(self_in));
    e7b8:	6878      	ldr	r0, [r7, #4]
    e7ba:	f7ff fdcd 	bl	e358 <MP_OBJ_IS_OBJ>
    e7be:	4603      	mov	r3, r0
    e7c0:	2b00      	cmp	r3, #0
    e7c2:	d005      	beq.n	e7d0 <dict_copy+0x20>
    e7c4:	687b      	ldr	r3, [r7, #4]
    e7c6:	681b      	ldr	r3, [r3, #0]
    e7c8:	68db      	ldr	r3, [r3, #12]
    e7ca:	4a24      	ldr	r2, [pc, #144]	; (e85c <dict_copy+0xac>)
    e7cc:	4293      	cmp	r3, r2
    e7ce:	d005      	beq.n	e7dc <dict_copy+0x2c>
    e7d0:	4b23      	ldr	r3, [pc, #140]	; (e860 <dict_copy+0xb0>)
    e7d2:	4a24      	ldr	r2, [pc, #144]	; (e864 <dict_copy+0xb4>)
    e7d4:	21d8      	movs	r1, #216	; 0xd8
    e7d6:	4824      	ldr	r0, [pc, #144]	; (e868 <dict_copy+0xb8>)
    e7d8:	f00c fcf0 	bl	1b1bc <__assert_func>
    mp_obj_dict_t *self = MP_OBJ_TO_PTR(self_in);
    e7dc:	687b      	ldr	r3, [r7, #4]
    e7de:	617b      	str	r3, [r7, #20]
    mp_obj_t other_out = mp_obj_new_dict(self->map.alloc);
    e7e0:	697b      	ldr	r3, [r7, #20]
    e7e2:	689b      	ldr	r3, [r3, #8]
    e7e4:	4618      	mov	r0, r3
    e7e6:	f000 fc17 	bl	f018 <mp_obj_new_dict>
    e7ea:	6138      	str	r0, [r7, #16]
    mp_obj_dict_t *other = MP_OBJ_TO_PTR(other_out);
    e7ec:	693b      	ldr	r3, [r7, #16]
    e7ee:	60fb      	str	r3, [r7, #12]
    other->base.type = self->base.type;
    e7f0:	697b      	ldr	r3, [r7, #20]
    e7f2:	681a      	ldr	r2, [r3, #0]
    e7f4:	68fb      	ldr	r3, [r7, #12]
    e7f6:	601a      	str	r2, [r3, #0]
    other->map.used = self->map.used;
    e7f8:	697b      	ldr	r3, [r7, #20]
    e7fa:	685b      	ldr	r3, [r3, #4]
    e7fc:	f3c3 01dc 	ubfx	r1, r3, #3, #29
    e800:	68fa      	ldr	r2, [r7, #12]
    e802:	6853      	ldr	r3, [r2, #4]
    e804:	f361 03df 	bfi	r3, r1, #3, #29
    e808:	6053      	str	r3, [r2, #4]
    other->map.all_keys_are_qstrs = self->map.all_keys_are_qstrs;
    e80a:	697b      	ldr	r3, [r7, #20]
    e80c:	791b      	ldrb	r3, [r3, #4]
    e80e:	f3c3 0300 	ubfx	r3, r3, #0, #1
    e812:	b2d9      	uxtb	r1, r3
    e814:	68fa      	ldr	r2, [r7, #12]
    e816:	7913      	ldrb	r3, [r2, #4]
    e818:	f361 0300 	bfi	r3, r1, #0, #1
    e81c:	7113      	strb	r3, [r2, #4]
    other->map.is_fixed = 0;
    e81e:	68fa      	ldr	r2, [r7, #12]
    e820:	7913      	ldrb	r3, [r2, #4]
    e822:	f36f 0341 	bfc	r3, #1, #1
    e826:	7113      	strb	r3, [r2, #4]
    other->map.is_ordered = self->map.is_ordered;
    e828:	697b      	ldr	r3, [r7, #20]
    e82a:	791b      	ldrb	r3, [r3, #4]
    e82c:	f3c3 0380 	ubfx	r3, r3, #2, #1
    e830:	b2d9      	uxtb	r1, r3
    e832:	68fa      	ldr	r2, [r7, #12]
    e834:	7913      	ldrb	r3, [r2, #4]
    e836:	f361 0382 	bfi	r3, r1, #2, #1
    e83a:	7113      	strb	r3, [r2, #4]
    memcpy(other->map.table, self->map.table, self->map.alloc * sizeof(mp_map_elem_t));
    e83c:	68fb      	ldr	r3, [r7, #12]
    e83e:	68d8      	ldr	r0, [r3, #12]
    e840:	697b      	ldr	r3, [r7, #20]
    e842:	68d9      	ldr	r1, [r3, #12]
    e844:	697b      	ldr	r3, [r7, #20]
    e846:	689b      	ldr	r3, [r3, #8]
    e848:	00db      	lsls	r3, r3, #3
    e84a:	461a      	mov	r2, r3
    e84c:	f00d f8ba 	bl	1b9c4 <memcpy>
    return other_out;
    e850:	693b      	ldr	r3, [r7, #16]
}
    e852:	4618      	mov	r0, r3
    e854:	3718      	adds	r7, #24
    e856:	46bd      	mov	sp, r7
    e858:	bd80      	pop	{r7, pc}
    e85a:	bf00      	nop
    e85c:	0000e4dd 	.word	0x0000e4dd
    e860:	0001fa90 	.word	0x0001fa90
    e864:	0001feb0 	.word	0x0001feb0
    e868:	0001faf0 	.word	0x0001faf0

0000e86c <dict_fromkeys>:
STATIC MP_DEFINE_CONST_FUN_OBJ_1(dict_copy_obj, dict_copy);

// this is a classmethod
STATIC mp_obj_t dict_fromkeys(size_t n_args, const mp_obj_t *args) {
    e86c:	b580      	push	{r7, lr}
    e86e:	b088      	sub	sp, #32
    e870:	af00      	add	r7, sp, #0
    e872:	6078      	str	r0, [r7, #4]
    e874:	6039      	str	r1, [r7, #0]
    mp_obj_t iter = mp_getiter(args[1], NULL);
    e876:	683b      	ldr	r3, [r7, #0]
    e878:	3304      	adds	r3, #4
    e87a:	681b      	ldr	r3, [r3, #0]
    e87c:	2100      	movs	r1, #0
    e87e:	4618      	mov	r0, r3
    e880:	f7fe f802 	bl	c888 <mp_getiter>
    e884:	6178      	str	r0, [r7, #20]
    mp_obj_t value = mp_const_none;
    e886:	4b1c      	ldr	r3, [pc, #112]	; (e8f8 <dict_fromkeys+0x8c>)
    e888:	61fb      	str	r3, [r7, #28]
    mp_obj_t next = MP_OBJ_NULL;
    e88a:	2300      	movs	r3, #0
    e88c:	613b      	str	r3, [r7, #16]

    if (n_args > 2) {
    e88e:	687b      	ldr	r3, [r7, #4]
    e890:	2b02      	cmp	r3, #2
    e892:	d902      	bls.n	e89a <dict_fromkeys+0x2e>
        value = args[2];
    e894:	683b      	ldr	r3, [r7, #0]
    e896:	689b      	ldr	r3, [r3, #8]
    e898:	61fb      	str	r3, [r7, #28]
    }

    // optimisation to allocate result based on len of argument
    mp_obj_t self_out;
    mp_obj_t len = mp_obj_len_maybe(args[1]);
    e89a:	683b      	ldr	r3, [r7, #0]
    e89c:	3304      	adds	r3, #4
    e89e:	681b      	ldr	r3, [r3, #0]
    e8a0:	4618      	mov	r0, r3
    e8a2:	f7ff faa7 	bl	ddf4 <mp_obj_len_maybe>
    e8a6:	60f8      	str	r0, [r7, #12]
    if (len == MP_OBJ_NULL) {
    e8a8:	68fb      	ldr	r3, [r7, #12]
    e8aa:	2b00      	cmp	r3, #0
    e8ac:	d104      	bne.n	e8b8 <dict_fromkeys+0x4c>
        /* object's type doesn't have a __len__ slot */
        self_out = mp_obj_new_dict(0);
    e8ae:	2000      	movs	r0, #0
    e8b0:	f000 fbb2 	bl	f018 <mp_obj_new_dict>
    e8b4:	61b8      	str	r0, [r7, #24]
    e8b6:	e005      	b.n	e8c4 <dict_fromkeys+0x58>
    } else {
        self_out = mp_obj_new_dict(MP_OBJ_SMALL_INT_VALUE(len));
    e8b8:	68fb      	ldr	r3, [r7, #12]
    e8ba:	105b      	asrs	r3, r3, #1
    e8bc:	4618      	mov	r0, r3
    e8be:	f000 fbab 	bl	f018 <mp_obj_new_dict>
    e8c2:	61b8      	str	r0, [r7, #24]
    }

    mp_obj_dict_t *self = MP_OBJ_TO_PTR(self_out);
    e8c4:	69bb      	ldr	r3, [r7, #24]
    e8c6:	60bb      	str	r3, [r7, #8]
    while ((next = mp_iternext(iter)) != MP_OBJ_STOP_ITERATION) {
    e8c8:	e009      	b.n	e8de <dict_fromkeys+0x72>
        mp_map_lookup(&self->map, next, MP_MAP_LOOKUP_ADD_IF_NOT_FOUND)->value = value;
    e8ca:	68bb      	ldr	r3, [r7, #8]
    e8cc:	3304      	adds	r3, #4
    e8ce:	2201      	movs	r2, #1
    e8d0:	6939      	ldr	r1, [r7, #16]
    e8d2:	4618      	mov	r0, r3
    e8d4:	f7fe fd92 	bl	d3fc <mp_map_lookup>
    e8d8:	4602      	mov	r2, r0
    e8da:	69fb      	ldr	r3, [r7, #28]
    e8dc:	6053      	str	r3, [r2, #4]
    while ((next = mp_iternext(iter)) != MP_OBJ_STOP_ITERATION) {
    e8de:	6978      	ldr	r0, [r7, #20]
    e8e0:	f7fe f854 	bl	c98c <mp_iternext>
    e8e4:	6138      	str	r0, [r7, #16]
    e8e6:	693b      	ldr	r3, [r7, #16]
    e8e8:	2b04      	cmp	r3, #4
    e8ea:	d1ee      	bne.n	e8ca <dict_fromkeys+0x5e>
    }

    return self_out;
    e8ec:	69bb      	ldr	r3, [r7, #24]
}
    e8ee:	4618      	mov	r0, r3
    e8f0:	3720      	adds	r7, #32
    e8f2:	46bd      	mov	sp, r7
    e8f4:	bd80      	pop	{r7, pc}
    e8f6:	bf00      	nop
    e8f8:	000212b4 	.word	0x000212b4

0000e8fc <dict_get_helper>:
STATIC MP_DEFINE_CONST_FUN_OBJ_VAR_BETWEEN(dict_fromkeys_fun_obj, 2, 3, dict_fromkeys);
STATIC MP_DEFINE_CONST_CLASSMETHOD_OBJ(dict_fromkeys_obj, MP_ROM_PTR(&dict_fromkeys_fun_obj));

STATIC mp_obj_t dict_get_helper(size_t n_args, const mp_obj_t *args, mp_map_lookup_kind_t lookup_kind) {
    e8fc:	b580      	push	{r7, lr}
    e8fe:	b088      	sub	sp, #32
    e900:	af00      	add	r7, sp, #0
    e902:	60f8      	str	r0, [r7, #12]
    e904:	60b9      	str	r1, [r7, #8]
    e906:	607a      	str	r2, [r7, #4]
    mp_check_self(MP_OBJ_IS_DICT_TYPE(args[0]));
    e908:	68bb      	ldr	r3, [r7, #8]
    e90a:	681b      	ldr	r3, [r3, #0]
    e90c:	4618      	mov	r0, r3
    e90e:	f7ff fd23 	bl	e358 <MP_OBJ_IS_OBJ>
    e912:	4603      	mov	r3, r0
    e914:	2b00      	cmp	r3, #0
    e916:	d006      	beq.n	e926 <dict_get_helper+0x2a>
    e918:	68bb      	ldr	r3, [r7, #8]
    e91a:	681b      	ldr	r3, [r3, #0]
    e91c:	681b      	ldr	r3, [r3, #0]
    e91e:	68db      	ldr	r3, [r3, #12]
    e920:	4a27      	ldr	r2, [pc, #156]	; (e9c0 <dict_get_helper+0xc4>)
    e922:	4293      	cmp	r3, r2
    e924:	d006      	beq.n	e934 <dict_get_helper+0x38>
    e926:	4b27      	ldr	r3, [pc, #156]	; (e9c4 <dict_get_helper+0xc8>)
    e928:	4a27      	ldr	r2, [pc, #156]	; (e9c8 <dict_get_helper+0xcc>)
    e92a:	f240 1105 	movw	r1, #261	; 0x105
    e92e:	4827      	ldr	r0, [pc, #156]	; (e9cc <dict_get_helper+0xd0>)
    e930:	f00c fc44 	bl	1b1bc <__assert_func>
    mp_obj_dict_t *self = MP_OBJ_TO_PTR(args[0]);
    e934:	68bb      	ldr	r3, [r7, #8]
    e936:	681b      	ldr	r3, [r3, #0]
    e938:	61bb      	str	r3, [r7, #24]
    if (lookup_kind != MP_MAP_LOOKUP) {
    e93a:	687b      	ldr	r3, [r7, #4]
    e93c:	2b00      	cmp	r3, #0
    e93e:	d002      	beq.n	e946 <dict_get_helper+0x4a>
        mp_ensure_not_fixed(self);
    e940:	69b8      	ldr	r0, [r7, #24]
    e942:	f7ff fef3 	bl	e72c <mp_ensure_not_fixed>
    }
    mp_map_elem_t *elem = mp_map_lookup(&self->map, args[1], lookup_kind);
    e946:	69bb      	ldr	r3, [r7, #24]
    e948:	1d18      	adds	r0, r3, #4
    e94a:	68bb      	ldr	r3, [r7, #8]
    e94c:	3304      	adds	r3, #4
    e94e:	681b      	ldr	r3, [r3, #0]
    e950:	687a      	ldr	r2, [r7, #4]
    e952:	4619      	mov	r1, r3
    e954:	f7fe fd52 	bl	d3fc <mp_map_lookup>
    e958:	6178      	str	r0, [r7, #20]
    mp_obj_t value;
    if (elem == NULL || elem->value == MP_OBJ_NULL) {
    e95a:	697b      	ldr	r3, [r7, #20]
    e95c:	2b00      	cmp	r3, #0
    e95e:	d003      	beq.n	e968 <dict_get_helper+0x6c>
    e960:	697b      	ldr	r3, [r7, #20]
    e962:	685b      	ldr	r3, [r3, #4]
    e964:	2b00      	cmp	r3, #0
    e966:	d11d      	bne.n	e9a4 <dict_get_helper+0xa8>
        if (n_args == 2) {
    e968:	68fb      	ldr	r3, [r7, #12]
    e96a:	2b02      	cmp	r3, #2
    e96c:	d110      	bne.n	e990 <dict_get_helper+0x94>
            if (lookup_kind == MP_MAP_LOOKUP_REMOVE_IF_FOUND) {
    e96e:	687b      	ldr	r3, [r7, #4]
    e970:	2b02      	cmp	r3, #2
    e972:	d10a      	bne.n	e98a <dict_get_helper+0x8e>
                nlr_raise(mp_obj_new_exception_arg1(&mp_type_KeyError, args[1]));
    e974:	68bb      	ldr	r3, [r7, #8]
    e976:	3304      	adds	r3, #4
    e978:	681b      	ldr	r3, [r3, #0]
    e97a:	4619      	mov	r1, r3
    e97c:	4814      	ldr	r0, [pc, #80]	; (e9d0 <dict_get_helper+0xd4>)
    e97e:	f000 fd03 	bl	f388 <mp_obj_new_exception_arg1>
    e982:	4603      	mov	r3, r0
    e984:	4618      	mov	r0, r3
    e986:	f7f1 fcab 	bl	2e0 <nlr_jump>
            } else {
                value = mp_const_none;
    e98a:	4b12      	ldr	r3, [pc, #72]	; (e9d4 <dict_get_helper+0xd8>)
    e98c:	61fb      	str	r3, [r7, #28]
    e98e:	e002      	b.n	e996 <dict_get_helper+0x9a>
            }
        } else {
            value = args[2];
    e990:	68bb      	ldr	r3, [r7, #8]
    e992:	689b      	ldr	r3, [r3, #8]
    e994:	61fb      	str	r3, [r7, #28]
        }
        if (lookup_kind == MP_MAP_LOOKUP_ADD_IF_NOT_FOUND) {
    e996:	687b      	ldr	r3, [r7, #4]
    e998:	2b01      	cmp	r3, #1
    e99a:	d10c      	bne.n	e9b6 <dict_get_helper+0xba>
            elem->value = value;
    e99c:	697b      	ldr	r3, [r7, #20]
    e99e:	69fa      	ldr	r2, [r7, #28]
    e9a0:	605a      	str	r2, [r3, #4]
        if (lookup_kind == MP_MAP_LOOKUP_ADD_IF_NOT_FOUND) {
    e9a2:	e008      	b.n	e9b6 <dict_get_helper+0xba>
        }
    } else {
        value = elem->value;
    e9a4:	697b      	ldr	r3, [r7, #20]
    e9a6:	685b      	ldr	r3, [r3, #4]
    e9a8:	61fb      	str	r3, [r7, #28]
        if (lookup_kind == MP_MAP_LOOKUP_REMOVE_IF_FOUND) {
    e9aa:	687b      	ldr	r3, [r7, #4]
    e9ac:	2b02      	cmp	r3, #2
    e9ae:	d102      	bne.n	e9b6 <dict_get_helper+0xba>
            elem->value = MP_OBJ_NULL; // so that GC can collect the deleted value
    e9b0:	697b      	ldr	r3, [r7, #20]
    e9b2:	2200      	movs	r2, #0
    e9b4:	605a      	str	r2, [r3, #4]
        }
    }
    return value;
    e9b6:	69fb      	ldr	r3, [r7, #28]
}
    e9b8:	4618      	mov	r0, r3
    e9ba:	3720      	adds	r7, #32
    e9bc:	46bd      	mov	sp, r7
    e9be:	bd80      	pop	{r7, pc}
    e9c0:	0000e4dd 	.word	0x0000e4dd
    e9c4:	0001fb28 	.word	0x0001fb28
    e9c8:	0001febc 	.word	0x0001febc
    e9cc:	0001faf0 	.word	0x0001faf0
    e9d0:	00020304 	.word	0x00020304
    e9d4:	000212b4 	.word	0x000212b4

0000e9d8 <dict_get>:

STATIC mp_obj_t dict_get(size_t n_args, const mp_obj_t *args) {
    e9d8:	b580      	push	{r7, lr}
    e9da:	b082      	sub	sp, #8
    e9dc:	af00      	add	r7, sp, #0
    e9de:	6078      	str	r0, [r7, #4]
    e9e0:	6039      	str	r1, [r7, #0]
    return dict_get_helper(n_args, args, MP_MAP_LOOKUP);
    e9e2:	2200      	movs	r2, #0
    e9e4:	6839      	ldr	r1, [r7, #0]
    e9e6:	6878      	ldr	r0, [r7, #4]
    e9e8:	f7ff ff88 	bl	e8fc <dict_get_helper>
    e9ec:	4603      	mov	r3, r0
}
    e9ee:	4618      	mov	r0, r3
    e9f0:	3708      	adds	r7, #8
    e9f2:	46bd      	mov	sp, r7
    e9f4:	bd80      	pop	{r7, pc}

0000e9f6 <dict_pop>:
STATIC MP_DEFINE_CONST_FUN_OBJ_VAR_BETWEEN(dict_get_obj, 2, 3, dict_get);

STATIC mp_obj_t dict_pop(size_t n_args, const mp_obj_t *args) {
    e9f6:	b580      	push	{r7, lr}
    e9f8:	b082      	sub	sp, #8
    e9fa:	af00      	add	r7, sp, #0
    e9fc:	6078      	str	r0, [r7, #4]
    e9fe:	6039      	str	r1, [r7, #0]
    return dict_get_helper(n_args, args, MP_MAP_LOOKUP_REMOVE_IF_FOUND);
    ea00:	2202      	movs	r2, #2
    ea02:	6839      	ldr	r1, [r7, #0]
    ea04:	6878      	ldr	r0, [r7, #4]
    ea06:	f7ff ff79 	bl	e8fc <dict_get_helper>
    ea0a:	4603      	mov	r3, r0
}
    ea0c:	4618      	mov	r0, r3
    ea0e:	3708      	adds	r7, #8
    ea10:	46bd      	mov	sp, r7
    ea12:	bd80      	pop	{r7, pc}

0000ea14 <dict_setdefault>:
STATIC MP_DEFINE_CONST_FUN_OBJ_VAR_BETWEEN(dict_pop_obj, 2, 3, dict_pop);

STATIC mp_obj_t dict_setdefault(size_t n_args, const mp_obj_t *args) {
    ea14:	b580      	push	{r7, lr}
    ea16:	b082      	sub	sp, #8
    ea18:	af00      	add	r7, sp, #0
    ea1a:	6078      	str	r0, [r7, #4]
    ea1c:	6039      	str	r1, [r7, #0]
    return dict_get_helper(n_args, args, MP_MAP_LOOKUP_ADD_IF_NOT_FOUND);
    ea1e:	2201      	movs	r2, #1
    ea20:	6839      	ldr	r1, [r7, #0]
    ea22:	6878      	ldr	r0, [r7, #4]
    ea24:	f7ff ff6a 	bl	e8fc <dict_get_helper>
    ea28:	4603      	mov	r3, r0
}
    ea2a:	4618      	mov	r0, r3
    ea2c:	3708      	adds	r7, #8
    ea2e:	46bd      	mov	sp, r7
    ea30:	bd80      	pop	{r7, pc}

0000ea32 <dict_popitem>:
STATIC MP_DEFINE_CONST_FUN_OBJ_VAR_BETWEEN(dict_setdefault_obj, 2, 3, dict_setdefault);

STATIC mp_obj_t dict_popitem(mp_obj_t self_in) {
    ea32:	b580      	push	{r7, lr}
    ea34:	b088      	sub	sp, #32
    ea36:	af00      	add	r7, sp, #0
    ea38:	6078      	str	r0, [r7, #4]
    mp_check_self(MP_OBJ_IS_DICT_TYPE(self_in));
    ea3a:	6878      	ldr	r0, [r7, #4]
    ea3c:	f7ff fc8c 	bl	e358 <MP_OBJ_IS_OBJ>
    ea40:	4603      	mov	r3, r0
    ea42:	2b00      	cmp	r3, #0
    ea44:	d005      	beq.n	ea52 <dict_popitem+0x20>
    ea46:	687b      	ldr	r3, [r7, #4]
    ea48:	681b      	ldr	r3, [r3, #0]
    ea4a:	68db      	ldr	r3, [r3, #12]
    ea4c:	4a22      	ldr	r2, [pc, #136]	; (ead8 <dict_popitem+0xa6>)
    ea4e:	4293      	cmp	r3, r2
    ea50:	d006      	beq.n	ea60 <dict_popitem+0x2e>
    ea52:	4b22      	ldr	r3, [pc, #136]	; (eadc <dict_popitem+0xaa>)
    ea54:	4a22      	ldr	r2, [pc, #136]	; (eae0 <dict_popitem+0xae>)
    ea56:	f44f 7199 	mov.w	r1, #306	; 0x132
    ea5a:	4822      	ldr	r0, [pc, #136]	; (eae4 <dict_popitem+0xb2>)
    ea5c:	f00c fbae 	bl	1b1bc <__assert_func>
    mp_obj_dict_t *self = MP_OBJ_TO_PTR(self_in);
    ea60:	687b      	ldr	r3, [r7, #4]
    ea62:	61fb      	str	r3, [r7, #28]
    mp_ensure_not_fixed(self);
    ea64:	69f8      	ldr	r0, [r7, #28]
    ea66:	f7ff fe61 	bl	e72c <mp_ensure_not_fixed>
    size_t cur = 0;
    ea6a:	2300      	movs	r3, #0
    ea6c:	613b      	str	r3, [r7, #16]
    mp_map_elem_t *next = dict_iter_next(self, &cur);
    ea6e:	f107 0310 	add.w	r3, r7, #16
    ea72:	4619      	mov	r1, r3
    ea74:	69f8      	ldr	r0, [r7, #28]
    ea76:	f7ff fcb7 	bl	e3e8 <dict_iter_next>
    ea7a:	61b8      	str	r0, [r7, #24]
    if (next == NULL) {
    ea7c:	69bb      	ldr	r3, [r7, #24]
    ea7e:	2b00      	cmp	r3, #0
    ea80:	d103      	bne.n	ea8a <dict_popitem+0x58>
        mp_raise_msg(&mp_type_KeyError, "popitem(): dictionary is empty");
    ea82:	4919      	ldr	r1, [pc, #100]	; (eae8 <dict_popitem+0xb6>)
    ea84:	4819      	ldr	r0, [pc, #100]	; (eaec <dict_popitem+0xba>)
    ea86:	f7fe fa2b 	bl	cee0 <mp_raise_msg>
    }
    self->map.used--;
    ea8a:	69fb      	ldr	r3, [r7, #28]
    ea8c:	685b      	ldr	r3, [r3, #4]
    ea8e:	f3c3 03dc 	ubfx	r3, r3, #3, #29
    ea92:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
    ea96:	3b01      	subs	r3, #1
    ea98:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
    ea9c:	69f9      	ldr	r1, [r7, #28]
    ea9e:	684a      	ldr	r2, [r1, #4]
    eaa0:	f363 02df 	bfi	r2, r3, #3, #29
    eaa4:	604a      	str	r2, [r1, #4]
    mp_obj_t items[] = {next->key, next->value};
    eaa6:	69bb      	ldr	r3, [r7, #24]
    eaa8:	681b      	ldr	r3, [r3, #0]
    eaaa:	60bb      	str	r3, [r7, #8]
    eaac:	69bb      	ldr	r3, [r7, #24]
    eaae:	685b      	ldr	r3, [r3, #4]
    eab0:	60fb      	str	r3, [r7, #12]
    next->key = MP_OBJ_SENTINEL; // must mark key as sentinel to indicate that it was deleted
    eab2:	69bb      	ldr	r3, [r7, #24]
    eab4:	2208      	movs	r2, #8
    eab6:	601a      	str	r2, [r3, #0]
    next->value = MP_OBJ_NULL;
    eab8:	69bb      	ldr	r3, [r7, #24]
    eaba:	2200      	movs	r2, #0
    eabc:	605a      	str	r2, [r3, #4]
    mp_obj_t tuple = mp_obj_new_tuple(2, items);
    eabe:	f107 0308 	add.w	r3, r7, #8
    eac2:	4619      	mov	r1, r3
    eac4:	2002      	movs	r0, #2
    eac6:	f007 f86b 	bl	15ba0 <mp_obj_new_tuple>
    eaca:	6178      	str	r0, [r7, #20]

    return tuple;
    eacc:	697b      	ldr	r3, [r7, #20]
}
    eace:	4618      	mov	r0, r3
    ead0:	3720      	adds	r7, #32
    ead2:	46bd      	mov	sp, r7
    ead4:	bd80      	pop	{r7, pc}
    ead6:	bf00      	nop
    ead8:	0000e4dd 	.word	0x0000e4dd
    eadc:	0001fa90 	.word	0x0001fa90
    eae0:	0001fecc 	.word	0x0001fecc
    eae4:	0001faf0 	.word	0x0001faf0
    eae8:	0001fbac 	.word	0x0001fbac
    eaec:	00020304 	.word	0x00020304

0000eaf0 <dict_update>:
STATIC MP_DEFINE_CONST_FUN_OBJ_1(dict_popitem_obj, dict_popitem);

STATIC mp_obj_t dict_update(size_t n_args, const mp_obj_t *args, mp_map_t *kwargs) {
    eaf0:	b580      	push	{r7, lr}
    eaf2:	b090      	sub	sp, #64	; 0x40
    eaf4:	af02      	add	r7, sp, #8
    eaf6:	60f8      	str	r0, [r7, #12]
    eaf8:	60b9      	str	r1, [r7, #8]
    eafa:	607a      	str	r2, [r7, #4]
    mp_check_self(MP_OBJ_IS_DICT_TYPE(args[0]));
    eafc:	68bb      	ldr	r3, [r7, #8]
    eafe:	681b      	ldr	r3, [r3, #0]
    eb00:	4618      	mov	r0, r3
    eb02:	f7ff fc29 	bl	e358 <MP_OBJ_IS_OBJ>
    eb06:	4603      	mov	r3, r0
    eb08:	2b00      	cmp	r3, #0
    eb0a:	d006      	beq.n	eb1a <dict_update+0x2a>
    eb0c:	68bb      	ldr	r3, [r7, #8]
    eb0e:	681b      	ldr	r3, [r3, #0]
    eb10:	681b      	ldr	r3, [r3, #0]
    eb12:	68db      	ldr	r3, [r3, #12]
    eb14:	4a5c      	ldr	r2, [pc, #368]	; (ec88 <dict_update+0x198>)
    eb16:	4293      	cmp	r3, r2
    eb18:	d006      	beq.n	eb28 <dict_update+0x38>
    eb1a:	4b5c      	ldr	r3, [pc, #368]	; (ec8c <dict_update+0x19c>)
    eb1c:	4a5c      	ldr	r2, [pc, #368]	; (ec90 <dict_update+0x1a0>)
    eb1e:	f240 1145 	movw	r1, #325	; 0x145
    eb22:	485c      	ldr	r0, [pc, #368]	; (ec94 <dict_update+0x1a4>)
    eb24:	f00c fb4a 	bl	1b1bc <__assert_func>
    mp_obj_dict_t *self = MP_OBJ_TO_PTR(args[0]);
    eb28:	68bb      	ldr	r3, [r7, #8]
    eb2a:	681b      	ldr	r3, [r3, #0]
    eb2c:	633b      	str	r3, [r7, #48]	; 0x30
    mp_ensure_not_fixed(self);
    eb2e:	6b38      	ldr	r0, [r7, #48]	; 0x30
    eb30:	f7ff fdfc 	bl	e72c <mp_ensure_not_fixed>

    mp_arg_check_num(n_args, kwargs->used, 1, 2, true);
    eb34:	687b      	ldr	r3, [r7, #4]
    eb36:	681b      	ldr	r3, [r3, #0]
    eb38:	f3c3 03dc 	ubfx	r3, r3, #3, #29
    eb3c:	4619      	mov	r1, r3
    eb3e:	2301      	movs	r3, #1
    eb40:	9300      	str	r3, [sp, #0]
    eb42:	2302      	movs	r3, #2
    eb44:	2201      	movs	r2, #1
    eb46:	68f8      	ldr	r0, [r7, #12]
    eb48:	f7fe fa12 	bl	cf70 <mp_arg_check_num>

    if (n_args == 2) {
    eb4c:	68fb      	ldr	r3, [r7, #12]
    eb4e:	2b02      	cmp	r3, #2
    eb50:	d16f      	bne.n	ec32 <dict_update+0x142>
        // given a positional argument

        if (MP_OBJ_IS_DICT_TYPE(args[1])) {
    eb52:	68bb      	ldr	r3, [r7, #8]
    eb54:	3304      	adds	r3, #4
    eb56:	681b      	ldr	r3, [r3, #0]
    eb58:	4618      	mov	r0, r3
    eb5a:	f7ff fbfd 	bl	e358 <MP_OBJ_IS_OBJ>
    eb5e:	4603      	mov	r3, r0
    eb60:	2b00      	cmp	r3, #0
    eb62:	d02d      	beq.n	ebc0 <dict_update+0xd0>
    eb64:	68bb      	ldr	r3, [r7, #8]
    eb66:	3304      	adds	r3, #4
    eb68:	681b      	ldr	r3, [r3, #0]
    eb6a:	681b      	ldr	r3, [r3, #0]
    eb6c:	68db      	ldr	r3, [r3, #12]
    eb6e:	4a46      	ldr	r2, [pc, #280]	; (ec88 <dict_update+0x198>)
    eb70:	4293      	cmp	r3, r2
    eb72:	d125      	bne.n	ebc0 <dict_update+0xd0>
            // update from other dictionary (make sure other is not self)
            if (args[1] != args[0]) {
    eb74:	68bb      	ldr	r3, [r7, #8]
    eb76:	3304      	adds	r3, #4
    eb78:	681a      	ldr	r2, [r3, #0]
    eb7a:	68bb      	ldr	r3, [r7, #8]
    eb7c:	681b      	ldr	r3, [r3, #0]
    eb7e:	429a      	cmp	r2, r3
    eb80:	d057      	beq.n	ec32 <dict_update+0x142>
                size_t cur = 0;
    eb82:	2300      	movs	r3, #0
    eb84:	613b      	str	r3, [r7, #16]
                mp_map_elem_t *elem = NULL;
    eb86:	2300      	movs	r3, #0
    eb88:	62fb      	str	r3, [r7, #44]	; 0x2c
                while ((elem = dict_iter_next((mp_obj_dict_t*)MP_OBJ_TO_PTR(args[1]), &cur)) != NULL) {
    eb8a:	e00b      	b.n	eba4 <dict_update+0xb4>
                    mp_map_lookup(&self->map, elem->key, MP_MAP_LOOKUP_ADD_IF_NOT_FOUND)->value = elem->value;
    eb8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    eb8e:	1d18      	adds	r0, r3, #4
    eb90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    eb92:	681b      	ldr	r3, [r3, #0]
    eb94:	2201      	movs	r2, #1
    eb96:	4619      	mov	r1, r3
    eb98:	f7fe fc30 	bl	d3fc <mp_map_lookup>
    eb9c:	4602      	mov	r2, r0
    eb9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    eba0:	685b      	ldr	r3, [r3, #4]
    eba2:	6053      	str	r3, [r2, #4]
                while ((elem = dict_iter_next((mp_obj_dict_t*)MP_OBJ_TO_PTR(args[1]), &cur)) != NULL) {
    eba4:	68bb      	ldr	r3, [r7, #8]
    eba6:	3304      	adds	r3, #4
    eba8:	681b      	ldr	r3, [r3, #0]
    ebaa:	f107 0210 	add.w	r2, r7, #16
    ebae:	4611      	mov	r1, r2
    ebb0:	4618      	mov	r0, r3
    ebb2:	f7ff fc19 	bl	e3e8 <dict_iter_next>
    ebb6:	62f8      	str	r0, [r7, #44]	; 0x2c
    ebb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    ebba:	2b00      	cmp	r3, #0
    ebbc:	d1e6      	bne.n	eb8c <dict_update+0x9c>
            if (args[1] != args[0]) {
    ebbe:	e038      	b.n	ec32 <dict_update+0x142>
                }
            }
        } else {
            // update from a generic iterable of pairs
            mp_obj_t iter = mp_getiter(args[1], NULL);
    ebc0:	68bb      	ldr	r3, [r7, #8]
    ebc2:	3304      	adds	r3, #4
    ebc4:	681b      	ldr	r3, [r3, #0]
    ebc6:	2100      	movs	r1, #0
    ebc8:	4618      	mov	r0, r3
    ebca:	f7fd fe5d 	bl	c888 <mp_getiter>
    ebce:	62b8      	str	r0, [r7, #40]	; 0x28
            mp_obj_t next = MP_OBJ_NULL;
    ebd0:	2300      	movs	r3, #0
    ebd2:	627b      	str	r3, [r7, #36]	; 0x24
            while ((next = mp_iternext(iter)) != MP_OBJ_STOP_ITERATION) {
    ebd4:	e026      	b.n	ec24 <dict_update+0x134>
                mp_obj_t inneriter = mp_getiter(next, NULL);
    ebd6:	2100      	movs	r1, #0
    ebd8:	6a78      	ldr	r0, [r7, #36]	; 0x24
    ebda:	f7fd fe55 	bl	c888 <mp_getiter>
    ebde:	6238      	str	r0, [r7, #32]
                mp_obj_t key = mp_iternext(inneriter);
    ebe0:	6a38      	ldr	r0, [r7, #32]
    ebe2:	f7fd fed3 	bl	c98c <mp_iternext>
    ebe6:	61f8      	str	r0, [r7, #28]
                mp_obj_t value = mp_iternext(inneriter);
    ebe8:	6a38      	ldr	r0, [r7, #32]
    ebea:	f7fd fecf 	bl	c98c <mp_iternext>
    ebee:	61b8      	str	r0, [r7, #24]
                mp_obj_t stop = mp_iternext(inneriter);
    ebf0:	6a38      	ldr	r0, [r7, #32]
    ebf2:	f7fd fecb 	bl	c98c <mp_iternext>
    ebf6:	6178      	str	r0, [r7, #20]
                if (key == MP_OBJ_STOP_ITERATION
    ebf8:	69fb      	ldr	r3, [r7, #28]
    ebfa:	2b04      	cmp	r3, #4
    ebfc:	d005      	beq.n	ec0a <dict_update+0x11a>
                    || value == MP_OBJ_STOP_ITERATION
    ebfe:	69bb      	ldr	r3, [r7, #24]
    ec00:	2b04      	cmp	r3, #4
    ec02:	d002      	beq.n	ec0a <dict_update+0x11a>
                    || stop != MP_OBJ_STOP_ITERATION) {
    ec04:	697b      	ldr	r3, [r7, #20]
    ec06:	2b04      	cmp	r3, #4
    ec08:	d002      	beq.n	ec10 <dict_update+0x120>
                    mp_raise_ValueError("dict update sequence has wrong length");
    ec0a:	4823      	ldr	r0, [pc, #140]	; (ec98 <dict_update+0x1a8>)
    ec0c:	f7fe f97f 	bl	cf0e <mp_raise_ValueError>
                } else {
                    mp_map_lookup(&self->map, key, MP_MAP_LOOKUP_ADD_IF_NOT_FOUND)->value = value;
    ec10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    ec12:	3304      	adds	r3, #4
    ec14:	2201      	movs	r2, #1
    ec16:	69f9      	ldr	r1, [r7, #28]
    ec18:	4618      	mov	r0, r3
    ec1a:	f7fe fbef 	bl	d3fc <mp_map_lookup>
    ec1e:	4602      	mov	r2, r0
    ec20:	69bb      	ldr	r3, [r7, #24]
    ec22:	6053      	str	r3, [r2, #4]
            while ((next = mp_iternext(iter)) != MP_OBJ_STOP_ITERATION) {
    ec24:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    ec26:	f7fd feb1 	bl	c98c <mp_iternext>
    ec2a:	6278      	str	r0, [r7, #36]	; 0x24
    ec2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    ec2e:	2b04      	cmp	r3, #4
    ec30:	d1d1      	bne.n	ebd6 <dict_update+0xe6>
            }
        }
    }

    // update the dict with any keyword args
    for (size_t i = 0; i < kwargs->alloc; i++) {
    ec32:	2300      	movs	r3, #0
    ec34:	637b      	str	r3, [r7, #52]	; 0x34
    ec36:	e01d      	b.n	ec74 <dict_update+0x184>
        if (MP_MAP_SLOT_IS_FILLED(kwargs, i)) {
    ec38:	6b79      	ldr	r1, [r7, #52]	; 0x34
    ec3a:	6878      	ldr	r0, [r7, #4]
    ec3c:	f7ff fb9e 	bl	e37c <MP_MAP_SLOT_IS_FILLED>
    ec40:	4603      	mov	r3, r0
    ec42:	2b00      	cmp	r3, #0
    ec44:	d013      	beq.n	ec6e <dict_update+0x17e>
            mp_map_lookup(&self->map, kwargs->table[i].key, MP_MAP_LOOKUP_ADD_IF_NOT_FOUND)->value = kwargs->table[i].value;
    ec46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    ec48:	1d18      	adds	r0, r3, #4
    ec4a:	687b      	ldr	r3, [r7, #4]
    ec4c:	689a      	ldr	r2, [r3, #8]
    ec4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    ec50:	00db      	lsls	r3, r3, #3
    ec52:	4413      	add	r3, r2
    ec54:	681b      	ldr	r3, [r3, #0]
    ec56:	2201      	movs	r2, #1
    ec58:	4619      	mov	r1, r3
    ec5a:	f7fe fbcf 	bl	d3fc <mp_map_lookup>
    ec5e:	4601      	mov	r1, r0
    ec60:	687b      	ldr	r3, [r7, #4]
    ec62:	689a      	ldr	r2, [r3, #8]
    ec64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    ec66:	00db      	lsls	r3, r3, #3
    ec68:	4413      	add	r3, r2
    ec6a:	685b      	ldr	r3, [r3, #4]
    ec6c:	604b      	str	r3, [r1, #4]
    for (size_t i = 0; i < kwargs->alloc; i++) {
    ec6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    ec70:	3301      	adds	r3, #1
    ec72:	637b      	str	r3, [r7, #52]	; 0x34
    ec74:	687b      	ldr	r3, [r7, #4]
    ec76:	685a      	ldr	r2, [r3, #4]
    ec78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    ec7a:	429a      	cmp	r2, r3
    ec7c:	d8dc      	bhi.n	ec38 <dict_update+0x148>
        }
    }

    return mp_const_none;
    ec7e:	4b07      	ldr	r3, [pc, #28]	; (ec9c <dict_update+0x1ac>)
}
    ec80:	4618      	mov	r0, r3
    ec82:	3738      	adds	r7, #56	; 0x38
    ec84:	46bd      	mov	sp, r7
    ec86:	bd80      	pop	{r7, pc}
    ec88:	0000e4dd 	.word	0x0000e4dd
    ec8c:	0001fb28 	.word	0x0001fb28
    ec90:	0001fedc 	.word	0x0001fedc
    ec94:	0001faf0 	.word	0x0001faf0
    ec98:	0001fbd4 	.word	0x0001fbd4
    ec9c:	000212b4 	.word	0x000212b4

0000eca0 <dict_view_it_iternext>:
    mp_obj_base_t base;
    mp_obj_t dict;
    mp_dict_view_kind_t kind;
} mp_obj_dict_view_t;

STATIC mp_obj_t dict_view_it_iternext(mp_obj_t self_in) {
    eca0:	b580      	push	{r7, lr}
    eca2:	b086      	sub	sp, #24
    eca4:	af00      	add	r7, sp, #0
    eca6:	6078      	str	r0, [r7, #4]
    mp_check_self(MP_OBJ_IS_TYPE(self_in, &dict_view_it_type));
    eca8:	6878      	ldr	r0, [r7, #4]
    ecaa:	f7ff fb55 	bl	e358 <MP_OBJ_IS_OBJ>
    ecae:	4603      	mov	r3, r0
    ecb0:	2b00      	cmp	r3, #0
    ecb2:	d004      	beq.n	ecbe <dict_view_it_iternext+0x1e>
    ecb4:	687b      	ldr	r3, [r7, #4]
    ecb6:	681b      	ldr	r3, [r3, #0]
    ecb8:	4a1b      	ldr	r2, [pc, #108]	; (ed28 <dict_view_it_iternext+0x88>)
    ecba:	4293      	cmp	r3, r2
    ecbc:	d006      	beq.n	eccc <dict_view_it_iternext+0x2c>
    ecbe:	4b1b      	ldr	r3, [pc, #108]	; (ed2c <dict_view_it_iternext+0x8c>)
    ecc0:	4a1b      	ldr	r2, [pc, #108]	; (ed30 <dict_view_it_iternext+0x90>)
    ecc2:	f240 1193 	movw	r1, #403	; 0x193
    ecc6:	481b      	ldr	r0, [pc, #108]	; (ed34 <dict_view_it_iternext+0x94>)
    ecc8:	f00c fa78 	bl	1b1bc <__assert_func>
    mp_obj_dict_view_it_t *self = MP_OBJ_TO_PTR(self_in);
    eccc:	687b      	ldr	r3, [r7, #4]
    ecce:	617b      	str	r3, [r7, #20]
    mp_map_elem_t *next = dict_iter_next(MP_OBJ_TO_PTR(self->dict), &self->cur);
    ecd0:	697b      	ldr	r3, [r7, #20]
    ecd2:	689a      	ldr	r2, [r3, #8]
    ecd4:	697b      	ldr	r3, [r7, #20]
    ecd6:	330c      	adds	r3, #12
    ecd8:	4619      	mov	r1, r3
    ecda:	4610      	mov	r0, r2
    ecdc:	f7ff fb84 	bl	e3e8 <dict_iter_next>
    ece0:	6138      	str	r0, [r7, #16]

    if (next == NULL) {
    ece2:	693b      	ldr	r3, [r7, #16]
    ece4:	2b00      	cmp	r3, #0
    ece6:	d101      	bne.n	ecec <dict_view_it_iternext+0x4c>
        return MP_OBJ_STOP_ITERATION;
    ece8:	2304      	movs	r3, #4
    ecea:	e018      	b.n	ed1e <dict_view_it_iternext+0x7e>
    } else {
        switch (self->kind) {
    ecec:	697b      	ldr	r3, [r7, #20]
    ecee:	685b      	ldr	r3, [r3, #4]
    ecf0:	2b01      	cmp	r3, #1
    ecf2:	d00f      	beq.n	ed14 <dict_view_it_iternext+0x74>
    ecf4:	2b02      	cmp	r3, #2
    ecf6:	d010      	beq.n	ed1a <dict_view_it_iternext+0x7a>
            case MP_DICT_VIEW_ITEMS:
            default: {
                mp_obj_t items[] = {next->key, next->value};
    ecf8:	693b      	ldr	r3, [r7, #16]
    ecfa:	681b      	ldr	r3, [r3, #0]
    ecfc:	60bb      	str	r3, [r7, #8]
    ecfe:	693b      	ldr	r3, [r7, #16]
    ed00:	685b      	ldr	r3, [r3, #4]
    ed02:	60fb      	str	r3, [r7, #12]
                return mp_obj_new_tuple(2, items);
    ed04:	f107 0308 	add.w	r3, r7, #8
    ed08:	4619      	mov	r1, r3
    ed0a:	2002      	movs	r0, #2
    ed0c:	f006 ff48 	bl	15ba0 <mp_obj_new_tuple>
    ed10:	4603      	mov	r3, r0
    ed12:	e004      	b.n	ed1e <dict_view_it_iternext+0x7e>
            }
            case MP_DICT_VIEW_KEYS:
                return next->key;
    ed14:	693b      	ldr	r3, [r7, #16]
    ed16:	681b      	ldr	r3, [r3, #0]
    ed18:	e001      	b.n	ed1e <dict_view_it_iternext+0x7e>
            case MP_DICT_VIEW_VALUES:
                return next->value;
    ed1a:	693b      	ldr	r3, [r7, #16]
    ed1c:	685b      	ldr	r3, [r3, #4]
        }
    }
}
    ed1e:	4618      	mov	r0, r3
    ed20:	3718      	adds	r7, #24
    ed22:	46bd      	mov	sp, r7
    ed24:	bd80      	pop	{r7, pc}
    ed26:	bf00      	nop
    ed28:	0001fc44 	.word	0x0001fc44
    ed2c:	0001fcb0 	.word	0x0001fcb0
    ed30:	0001fee8 	.word	0x0001fee8
    ed34:	0001faf0 	.word	0x0001faf0

0000ed38 <dict_view_getiter>:
    .name = MP_QSTR_iterator,
    .getiter = mp_identity_getiter,
    .iternext = dict_view_it_iternext,
};

STATIC mp_obj_t dict_view_getiter(mp_obj_t view_in, mp_obj_iter_buf_t *iter_buf) {
    ed38:	b580      	push	{r7, lr}
    ed3a:	b084      	sub	sp, #16
    ed3c:	af00      	add	r7, sp, #0
    ed3e:	6078      	str	r0, [r7, #4]
    ed40:	6039      	str	r1, [r7, #0]
    assert(sizeof(mp_obj_dict_view_it_t) <= sizeof(mp_obj_iter_buf_t));
    mp_check_self(MP_OBJ_IS_TYPE(view_in, &dict_view_type));
    ed42:	6878      	ldr	r0, [r7, #4]
    ed44:	f7ff fb08 	bl	e358 <MP_OBJ_IS_OBJ>
    ed48:	4603      	mov	r3, r0
    ed4a:	2b00      	cmp	r3, #0
    ed4c:	d004      	beq.n	ed58 <dict_view_getiter+0x20>
    ed4e:	687b      	ldr	r3, [r7, #4]
    ed50:	681b      	ldr	r3, [r3, #0]
    ed52:	4a10      	ldr	r2, [pc, #64]	; (ed94 <dict_view_getiter+0x5c>)
    ed54:	4293      	cmp	r3, r2
    ed56:	d006      	beq.n	ed66 <dict_view_getiter+0x2e>
    ed58:	4b0f      	ldr	r3, [pc, #60]	; (ed98 <dict_view_getiter+0x60>)
    ed5a:	4a10      	ldr	r2, [pc, #64]	; (ed9c <dict_view_getiter+0x64>)
    ed5c:	f240 11b1 	movw	r1, #433	; 0x1b1
    ed60:	480f      	ldr	r0, [pc, #60]	; (eda0 <dict_view_getiter+0x68>)
    ed62:	f00c fa2b 	bl	1b1bc <__assert_func>
    mp_obj_dict_view_t *view = MP_OBJ_TO_PTR(view_in);
    ed66:	687b      	ldr	r3, [r7, #4]
    ed68:	60fb      	str	r3, [r7, #12]
    mp_obj_dict_view_it_t *o = (mp_obj_dict_view_it_t*)iter_buf;
    ed6a:	683b      	ldr	r3, [r7, #0]
    ed6c:	60bb      	str	r3, [r7, #8]
    o->base.type = &dict_view_it_type;
    ed6e:	68bb      	ldr	r3, [r7, #8]
    ed70:	4a0c      	ldr	r2, [pc, #48]	; (eda4 <dict_view_getiter+0x6c>)
    ed72:	601a      	str	r2, [r3, #0]
    o->kind = view->kind;
    ed74:	68fb      	ldr	r3, [r7, #12]
    ed76:	689a      	ldr	r2, [r3, #8]
    ed78:	68bb      	ldr	r3, [r7, #8]
    ed7a:	605a      	str	r2, [r3, #4]
    o->dict = view->dict;
    ed7c:	68fb      	ldr	r3, [r7, #12]
    ed7e:	685a      	ldr	r2, [r3, #4]
    ed80:	68bb      	ldr	r3, [r7, #8]
    ed82:	609a      	str	r2, [r3, #8]
    o->cur = 0;
    ed84:	68bb      	ldr	r3, [r7, #8]
    ed86:	2200      	movs	r2, #0
    ed88:	60da      	str	r2, [r3, #12]
    return MP_OBJ_FROM_PTR(o);
    ed8a:	68bb      	ldr	r3, [r7, #8]
}
    ed8c:	4618      	mov	r0, r3
    ed8e:	3710      	adds	r7, #16
    ed90:	46bd      	mov	sp, r7
    ed92:	bd80      	pop	{r7, pc}
    ed94:	0001fc08 	.word	0x0001fc08
    ed98:	0001fd10 	.word	0x0001fd10
    ed9c:	0001ff00 	.word	0x0001ff00
    eda0:	0001faf0 	.word	0x0001faf0
    eda4:	0001fc44 	.word	0x0001fc44

0000eda8 <dict_view_print>:

STATIC void dict_view_print(const mp_print_t *print, mp_obj_t self_in, mp_print_kind_t kind) {
    eda8:	b580      	push	{r7, lr}
    edaa:	b08c      	sub	sp, #48	; 0x30
    edac:	af00      	add	r7, sp, #0
    edae:	60f8      	str	r0, [r7, #12]
    edb0:	60b9      	str	r1, [r7, #8]
    edb2:	607a      	str	r2, [r7, #4]
    (void)kind;
    mp_check_self(MP_OBJ_IS_TYPE(self_in, &dict_view_type));
    edb4:	68b8      	ldr	r0, [r7, #8]
    edb6:	f7ff facf 	bl	e358 <MP_OBJ_IS_OBJ>
    edba:	4603      	mov	r3, r0
    edbc:	2b00      	cmp	r3, #0
    edbe:	d004      	beq.n	edca <dict_view_print+0x22>
    edc0:	68bb      	ldr	r3, [r7, #8]
    edc2:	681b      	ldr	r3, [r3, #0]
    edc4:	4a23      	ldr	r2, [pc, #140]	; (ee54 <dict_view_print+0xac>)
    edc6:	4293      	cmp	r3, r2
    edc8:	d006      	beq.n	edd8 <dict_view_print+0x30>
    edca:	4b23      	ldr	r3, [pc, #140]	; (ee58 <dict_view_print+0xb0>)
    edcc:	4a23      	ldr	r2, [pc, #140]	; (ee5c <dict_view_print+0xb4>)
    edce:	f240 11bd 	movw	r1, #445	; 0x1bd
    edd2:	4823      	ldr	r0, [pc, #140]	; (ee60 <dict_view_print+0xb8>)
    edd4:	f00c f9f2 	bl	1b1bc <__assert_func>
    mp_obj_dict_view_t *self = MP_OBJ_TO_PTR(self_in);
    edd8:	68bb      	ldr	r3, [r7, #8]
    edda:	62bb      	str	r3, [r7, #40]	; 0x28
    bool first = true;
    eddc:	2301      	movs	r3, #1
    edde:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    mp_print_str(print, mp_dict_view_names[self->kind]);
    ede2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    ede4:	689b      	ldr	r3, [r3, #8]
    ede6:	4a1f      	ldr	r2, [pc, #124]	; (ee64 <dict_view_print+0xbc>)
    ede8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    edec:	4619      	mov	r1, r3
    edee:	68f8      	ldr	r0, [r7, #12]
    edf0:	f7f2 fd2e 	bl	1850 <mp_print_str>
    mp_print_str(print, "([");
    edf4:	491c      	ldr	r1, [pc, #112]	; (ee68 <dict_view_print+0xc0>)
    edf6:	68f8      	ldr	r0, [r7, #12]
    edf8:	f7f2 fd2a 	bl	1850 <mp_print_str>
    mp_obj_iter_buf_t iter_buf;
    mp_obj_t self_iter = dict_view_getiter(self_in, &iter_buf);
    edfc:	f107 0310 	add.w	r3, r7, #16
    ee00:	4619      	mov	r1, r3
    ee02:	68b8      	ldr	r0, [r7, #8]
    ee04:	f7ff ff98 	bl	ed38 <dict_view_getiter>
    ee08:	6278      	str	r0, [r7, #36]	; 0x24
    mp_obj_t next = MP_OBJ_NULL;
    ee0a:	2300      	movs	r3, #0
    ee0c:	623b      	str	r3, [r7, #32]
    while ((next = dict_view_it_iternext(self_iter)) != MP_OBJ_STOP_ITERATION) {
    ee0e:	e012      	b.n	ee36 <dict_view_print+0x8e>
        if (!first) {
    ee10:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    ee14:	f083 0301 	eor.w	r3, r3, #1
    ee18:	b2db      	uxtb	r3, r3
    ee1a:	2b00      	cmp	r3, #0
    ee1c:	d003      	beq.n	ee26 <dict_view_print+0x7e>
            mp_print_str(print, ", ");
    ee1e:	4913      	ldr	r1, [pc, #76]	; (ee6c <dict_view_print+0xc4>)
    ee20:	68f8      	ldr	r0, [r7, #12]
    ee22:	f7f2 fd15 	bl	1850 <mp_print_str>
        }
        first = false;
    ee26:	2300      	movs	r3, #0
    ee28:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        mp_obj_print_helper(print, next, PRINT_REPR);
    ee2c:	2201      	movs	r2, #1
    ee2e:	6a39      	ldr	r1, [r7, #32]
    ee30:	68f8      	ldr	r0, [r7, #12]
    ee32:	f7fe fcbe 	bl	d7b2 <mp_obj_print_helper>
    while ((next = dict_view_it_iternext(self_iter)) != MP_OBJ_STOP_ITERATION) {
    ee36:	6a78      	ldr	r0, [r7, #36]	; 0x24
    ee38:	f7ff ff32 	bl	eca0 <dict_view_it_iternext>
    ee3c:	6238      	str	r0, [r7, #32]
    ee3e:	6a3b      	ldr	r3, [r7, #32]
    ee40:	2b04      	cmp	r3, #4
    ee42:	d1e5      	bne.n	ee10 <dict_view_print+0x68>
    }
    mp_print_str(print, "])");
    ee44:	490a      	ldr	r1, [pc, #40]	; (ee70 <dict_view_print+0xc8>)
    ee46:	68f8      	ldr	r0, [r7, #12]
    ee48:	f7f2 fd02 	bl	1850 <mp_print_str>
}
    ee4c:	bf00      	nop
    ee4e:	3730      	adds	r7, #48	; 0x30
    ee50:	46bd      	mov	sp, r7
    ee52:	bd80      	pop	{r7, pc}
    ee54:	0001fc08 	.word	0x0001fc08
    ee58:	0001fd6c 	.word	0x0001fd6c
    ee5c:	0001ff14 	.word	0x0001ff14
    ee60:	0001faf0 	.word	0x0001faf0
    ee64:	0001fca4 	.word	0x0001fca4
    ee68:	0001fdc8 	.word	0x0001fdc8
    ee6c:	0001fa84 	.word	0x0001fa84
    ee70:	0001fdcc 	.word	0x0001fdcc

0000ee74 <dict_view_binary_op>:

STATIC mp_obj_t dict_view_binary_op(mp_binary_op_t op, mp_obj_t lhs_in, mp_obj_t rhs_in) {
    ee74:	b580      	push	{r7, lr}
    ee76:	b086      	sub	sp, #24
    ee78:	af00      	add	r7, sp, #0
    ee7a:	60f8      	str	r0, [r7, #12]
    ee7c:	60b9      	str	r1, [r7, #8]
    ee7e:	607a      	str	r2, [r7, #4]
    // only supported for the 'keys' kind until sets and dicts are refactored
    mp_obj_dict_view_t *o = MP_OBJ_TO_PTR(lhs_in);
    ee80:	68bb      	ldr	r3, [r7, #8]
    ee82:	617b      	str	r3, [r7, #20]
    if (o->kind != MP_DICT_VIEW_KEYS) {
    ee84:	697b      	ldr	r3, [r7, #20]
    ee86:	689b      	ldr	r3, [r3, #8]
    ee88:	2b01      	cmp	r3, #1
    ee8a:	d001      	beq.n	ee90 <dict_view_binary_op+0x1c>
        return MP_OBJ_NULL; // op not supported
    ee8c:	2300      	movs	r3, #0
    ee8e:	e00c      	b.n	eeaa <dict_view_binary_op+0x36>
    }
    if (op != MP_BINARY_OP_CONTAINS) {
    ee90:	68fb      	ldr	r3, [r7, #12]
    ee92:	2b22      	cmp	r3, #34	; 0x22
    ee94:	d001      	beq.n	ee9a <dict_view_binary_op+0x26>
        return MP_OBJ_NULL; // op not supported
    ee96:	2300      	movs	r3, #0
    ee98:	e007      	b.n	eeaa <dict_view_binary_op+0x36>
    }
    return dict_binary_op(op, o->dict, rhs_in);
    ee9a:	697b      	ldr	r3, [r7, #20]
    ee9c:	685b      	ldr	r3, [r3, #4]
    ee9e:	687a      	ldr	r2, [r7, #4]
    eea0:	4619      	mov	r1, r3
    eea2:	68f8      	ldr	r0, [r7, #12]
    eea4:	f7ff fb75 	bl	e592 <dict_binary_op>
    eea8:	4603      	mov	r3, r0
}
    eeaa:	4618      	mov	r0, r3
    eeac:	3718      	adds	r7, #24
    eeae:	46bd      	mov	sp, r7
    eeb0:	bd80      	pop	{r7, pc}

0000eeb2 <mp_obj_new_dict_view>:
    .print = dict_view_print,
    .binary_op = dict_view_binary_op,
    .getiter = dict_view_getiter,
};

STATIC mp_obj_t mp_obj_new_dict_view(mp_obj_t dict, mp_dict_view_kind_t kind) {
    eeb2:	b580      	push	{r7, lr}
    eeb4:	b084      	sub	sp, #16
    eeb6:	af00      	add	r7, sp, #0
    eeb8:	6078      	str	r0, [r7, #4]
    eeba:	6039      	str	r1, [r7, #0]
    mp_obj_dict_view_t *o = m_new_obj(mp_obj_dict_view_t);
    eebc:	200c      	movs	r0, #12
    eebe:	f7f1 fa2d 	bl	31c <m_malloc>
    eec2:	60f8      	str	r0, [r7, #12]
    o->base.type = &dict_view_type;
    eec4:	68fb      	ldr	r3, [r7, #12]
    eec6:	4a06      	ldr	r2, [pc, #24]	; (eee0 <mp_obj_new_dict_view+0x2e>)
    eec8:	601a      	str	r2, [r3, #0]
    o->dict = dict;
    eeca:	68fb      	ldr	r3, [r7, #12]
    eecc:	687a      	ldr	r2, [r7, #4]
    eece:	605a      	str	r2, [r3, #4]
    o->kind = kind;
    eed0:	68fb      	ldr	r3, [r7, #12]
    eed2:	683a      	ldr	r2, [r7, #0]
    eed4:	609a      	str	r2, [r3, #8]
    return MP_OBJ_FROM_PTR(o);
    eed6:	68fb      	ldr	r3, [r7, #12]
}
    eed8:	4618      	mov	r0, r3
    eeda:	3710      	adds	r7, #16
    eedc:	46bd      	mov	sp, r7
    eede:	bd80      	pop	{r7, pc}
    eee0:	0001fc08 	.word	0x0001fc08

0000eee4 <dict_view>:

STATIC mp_obj_t dict_view(mp_obj_t self_in, mp_dict_view_kind_t kind) {
    eee4:	b580      	push	{r7, lr}
    eee6:	b082      	sub	sp, #8
    eee8:	af00      	add	r7, sp, #0
    eeea:	6078      	str	r0, [r7, #4]
    eeec:	6039      	str	r1, [r7, #0]
    mp_check_self(MP_OBJ_IS_DICT_TYPE(self_in));
    eeee:	6878      	ldr	r0, [r7, #4]
    eef0:	f7ff fa32 	bl	e358 <MP_OBJ_IS_OBJ>
    eef4:	4603      	mov	r3, r0
    eef6:	2b00      	cmp	r3, #0
    eef8:	d005      	beq.n	ef06 <dict_view+0x22>
    eefa:	687b      	ldr	r3, [r7, #4]
    eefc:	681b      	ldr	r3, [r3, #0]
    eefe:	68db      	ldr	r3, [r3, #12]
    ef00:	4a09      	ldr	r2, [pc, #36]	; (ef28 <dict_view+0x44>)
    ef02:	4293      	cmp	r3, r2
    ef04:	d006      	beq.n	ef14 <dict_view+0x30>
    ef06:	4b09      	ldr	r3, [pc, #36]	; (ef2c <dict_view+0x48>)
    ef08:	4a09      	ldr	r2, [pc, #36]	; (ef30 <dict_view+0x4c>)
    ef0a:	f44f 71f6 	mov.w	r1, #492	; 0x1ec
    ef0e:	4809      	ldr	r0, [pc, #36]	; (ef34 <dict_view+0x50>)
    ef10:	f00c f954 	bl	1b1bc <__assert_func>
    return mp_obj_new_dict_view(self_in, kind);
    ef14:	6839      	ldr	r1, [r7, #0]
    ef16:	6878      	ldr	r0, [r7, #4]
    ef18:	f7ff ffcb 	bl	eeb2 <mp_obj_new_dict_view>
    ef1c:	4603      	mov	r3, r0
}
    ef1e:	4618      	mov	r0, r3
    ef20:	3708      	adds	r7, #8
    ef22:	46bd      	mov	sp, r7
    ef24:	bd80      	pop	{r7, pc}
    ef26:	bf00      	nop
    ef28:	0000e4dd 	.word	0x0000e4dd
    ef2c:	0001fa90 	.word	0x0001fa90
    ef30:	0001ff24 	.word	0x0001ff24
    ef34:	0001faf0 	.word	0x0001faf0

0000ef38 <dict_items>:

STATIC mp_obj_t dict_items(mp_obj_t self_in) {
    ef38:	b580      	push	{r7, lr}
    ef3a:	b082      	sub	sp, #8
    ef3c:	af00      	add	r7, sp, #0
    ef3e:	6078      	str	r0, [r7, #4]
    return dict_view(self_in, MP_DICT_VIEW_ITEMS);
    ef40:	2100      	movs	r1, #0
    ef42:	6878      	ldr	r0, [r7, #4]
    ef44:	f7ff ffce 	bl	eee4 <dict_view>
    ef48:	4603      	mov	r3, r0
}
    ef4a:	4618      	mov	r0, r3
    ef4c:	3708      	adds	r7, #8
    ef4e:	46bd      	mov	sp, r7
    ef50:	bd80      	pop	{r7, pc}

0000ef52 <dict_keys>:
STATIC MP_DEFINE_CONST_FUN_OBJ_1(dict_items_obj, dict_items);

STATIC mp_obj_t dict_keys(mp_obj_t self_in) {
    ef52:	b580      	push	{r7, lr}
    ef54:	b082      	sub	sp, #8
    ef56:	af00      	add	r7, sp, #0
    ef58:	6078      	str	r0, [r7, #4]
    return dict_view(self_in, MP_DICT_VIEW_KEYS);
    ef5a:	2101      	movs	r1, #1
    ef5c:	6878      	ldr	r0, [r7, #4]
    ef5e:	f7ff ffc1 	bl	eee4 <dict_view>
    ef62:	4603      	mov	r3, r0
}
    ef64:	4618      	mov	r0, r3
    ef66:	3708      	adds	r7, #8
    ef68:	46bd      	mov	sp, r7
    ef6a:	bd80      	pop	{r7, pc}

0000ef6c <dict_values>:
STATIC MP_DEFINE_CONST_FUN_OBJ_1(dict_keys_obj, dict_keys);

STATIC mp_obj_t dict_values(mp_obj_t self_in) {
    ef6c:	b580      	push	{r7, lr}
    ef6e:	b082      	sub	sp, #8
    ef70:	af00      	add	r7, sp, #0
    ef72:	6078      	str	r0, [r7, #4]
    return dict_view(self_in, MP_DICT_VIEW_VALUES);
    ef74:	2102      	movs	r1, #2
    ef76:	6878      	ldr	r0, [r7, #4]
    ef78:	f7ff ffb4 	bl	eee4 <dict_view>
    ef7c:	4603      	mov	r3, r0
}
    ef7e:	4618      	mov	r0, r3
    ef80:	3708      	adds	r7, #8
    ef82:	46bd      	mov	sp, r7
    ef84:	bd80      	pop	{r7, pc}

0000ef86 <dict_getiter>:
STATIC MP_DEFINE_CONST_FUN_OBJ_1(dict_values_obj, dict_values);

/******************************************************************************/
/* dict iterator                                                              */

STATIC mp_obj_t dict_getiter(mp_obj_t self_in, mp_obj_iter_buf_t *iter_buf) {
    ef86:	b580      	push	{r7, lr}
    ef88:	b084      	sub	sp, #16
    ef8a:	af00      	add	r7, sp, #0
    ef8c:	6078      	str	r0, [r7, #4]
    ef8e:	6039      	str	r1, [r7, #0]
    assert(sizeof(mp_obj_dict_view_it_t) <= sizeof(mp_obj_iter_buf_t));
    mp_check_self(MP_OBJ_IS_DICT_TYPE(self_in));
    ef90:	6878      	ldr	r0, [r7, #4]
    ef92:	f7ff f9e1 	bl	e358 <MP_OBJ_IS_OBJ>
    ef96:	4603      	mov	r3, r0
    ef98:	2b00      	cmp	r3, #0
    ef9a:	d005      	beq.n	efa8 <dict_getiter+0x22>
    ef9c:	687b      	ldr	r3, [r7, #4]
    ef9e:	681b      	ldr	r3, [r3, #0]
    efa0:	68db      	ldr	r3, [r3, #12]
    efa2:	4a0e      	ldr	r2, [pc, #56]	; (efdc <dict_getiter+0x56>)
    efa4:	4293      	cmp	r3, r2
    efa6:	d006      	beq.n	efb6 <dict_getiter+0x30>
    efa8:	4b0d      	ldr	r3, [pc, #52]	; (efe0 <dict_getiter+0x5a>)
    efaa:	4a0e      	ldr	r2, [pc, #56]	; (efe4 <dict_getiter+0x5e>)
    efac:	f44f 7101 	mov.w	r1, #516	; 0x204
    efb0:	480d      	ldr	r0, [pc, #52]	; (efe8 <dict_getiter+0x62>)
    efb2:	f00c f903 	bl	1b1bc <__assert_func>
    mp_obj_dict_view_it_t *o = (mp_obj_dict_view_it_t*)iter_buf;
    efb6:	683b      	ldr	r3, [r7, #0]
    efb8:	60fb      	str	r3, [r7, #12]
    o->base.type = &dict_view_it_type;
    efba:	68fb      	ldr	r3, [r7, #12]
    efbc:	4a0b      	ldr	r2, [pc, #44]	; (efec <dict_getiter+0x66>)
    efbe:	601a      	str	r2, [r3, #0]
    o->kind = MP_DICT_VIEW_KEYS;
    efc0:	68fb      	ldr	r3, [r7, #12]
    efc2:	2201      	movs	r2, #1
    efc4:	605a      	str	r2, [r3, #4]
    o->dict = self_in;
    efc6:	68fb      	ldr	r3, [r7, #12]
    efc8:	687a      	ldr	r2, [r7, #4]
    efca:	609a      	str	r2, [r3, #8]
    o->cur = 0;
    efcc:	68fb      	ldr	r3, [r7, #12]
    efce:	2200      	movs	r2, #0
    efd0:	60da      	str	r2, [r3, #12]
    return MP_OBJ_FROM_PTR(o);
    efd2:	68fb      	ldr	r3, [r7, #12]
}
    efd4:	4618      	mov	r0, r3
    efd6:	3710      	adds	r7, #16
    efd8:	46bd      	mov	sp, r7
    efda:	bd80      	pop	{r7, pc}
    efdc:	0000e4dd 	.word	0x0000e4dd
    efe0:	0001fa90 	.word	0x0001fa90
    efe4:	0001ff30 	.word	0x0001ff30
    efe8:	0001faf0 	.word	0x0001faf0
    efec:	0001fc44 	.word	0x0001fc44

0000eff0 <mp_obj_dict_init>:
    .parent = &mp_type_dict,
    .locals_dict = (mp_obj_dict_t*)&dict_locals_dict,
};
#endif

void mp_obj_dict_init(mp_obj_dict_t *dict, size_t n_args) {
    eff0:	b580      	push	{r7, lr}
    eff2:	b082      	sub	sp, #8
    eff4:	af00      	add	r7, sp, #0
    eff6:	6078      	str	r0, [r7, #4]
    eff8:	6039      	str	r1, [r7, #0]
    dict->base.type = &mp_type_dict;
    effa:	687b      	ldr	r3, [r7, #4]
    effc:	4a05      	ldr	r2, [pc, #20]	; (f014 <mp_obj_dict_init+0x24>)
    effe:	601a      	str	r2, [r3, #0]
    mp_map_init(&dict->map, n_args);
    f000:	687b      	ldr	r3, [r7, #4]
    f002:	3304      	adds	r3, #4
    f004:	6839      	ldr	r1, [r7, #0]
    f006:	4618      	mov	r0, r3
    f008:	f7fe f900 	bl	d20c <mp_map_init>
}
    f00c:	bf00      	nop
    f00e:	3708      	adds	r7, #8
    f010:	46bd      	mov	sp, r7
    f012:	bd80      	pop	{r7, pc}
    f014:	0001fe68 	.word	0x0001fe68

0000f018 <mp_obj_new_dict>:

mp_obj_t mp_obj_new_dict(size_t n_args) {
    f018:	b580      	push	{r7, lr}
    f01a:	b084      	sub	sp, #16
    f01c:	af00      	add	r7, sp, #0
    f01e:	6078      	str	r0, [r7, #4]
    mp_obj_dict_t *o = m_new_obj(mp_obj_dict_t);
    f020:	2010      	movs	r0, #16
    f022:	f7f1 f97b 	bl	31c <m_malloc>
    f026:	60f8      	str	r0, [r7, #12]
    mp_obj_dict_init(o, n_args);
    f028:	6879      	ldr	r1, [r7, #4]
    f02a:	68f8      	ldr	r0, [r7, #12]
    f02c:	f7ff ffe0 	bl	eff0 <mp_obj_dict_init>
    return MP_OBJ_FROM_PTR(o);
    f030:	68fb      	ldr	r3, [r7, #12]
}
    f032:	4618      	mov	r0, r3
    f034:	3710      	adds	r7, #16
    f036:	46bd      	mov	sp, r7
    f038:	bd80      	pop	{r7, pc}

0000f03a <mp_obj_dict_len>:

size_t mp_obj_dict_len(mp_obj_t self_in) {
    f03a:	b480      	push	{r7}
    f03c:	b085      	sub	sp, #20
    f03e:	af00      	add	r7, sp, #0
    f040:	6078      	str	r0, [r7, #4]
    mp_obj_dict_t *self = MP_OBJ_TO_PTR(self_in);
    f042:	687b      	ldr	r3, [r7, #4]
    f044:	60fb      	str	r3, [r7, #12]
    return self->map.used;
    f046:	68fb      	ldr	r3, [r7, #12]
    f048:	685b      	ldr	r3, [r3, #4]
    f04a:	f3c3 03dc 	ubfx	r3, r3, #3, #29
}
    f04e:	4618      	mov	r0, r3
    f050:	3714      	adds	r7, #20
    f052:	46bd      	mov	sp, r7
    f054:	f85d 7b04 	ldr.w	r7, [sp], #4
    f058:	4770      	bx	lr

0000f05a <mp_obj_dict_store>:

mp_obj_t mp_obj_dict_store(mp_obj_t self_in, mp_obj_t key, mp_obj_t value) {
    f05a:	b580      	push	{r7, lr}
    f05c:	b086      	sub	sp, #24
    f05e:	af00      	add	r7, sp, #0
    f060:	60f8      	str	r0, [r7, #12]
    f062:	60b9      	str	r1, [r7, #8]
    f064:	607a      	str	r2, [r7, #4]
    mp_check_self(MP_OBJ_IS_DICT_TYPE(self_in));
    f066:	68f8      	ldr	r0, [r7, #12]
    f068:	f7ff f976 	bl	e358 <MP_OBJ_IS_OBJ>
    f06c:	4603      	mov	r3, r0
    f06e:	2b00      	cmp	r3, #0
    f070:	d005      	beq.n	f07e <mp_obj_dict_store+0x24>
    f072:	68fb      	ldr	r3, [r7, #12]
    f074:	681b      	ldr	r3, [r3, #0]
    f076:	68db      	ldr	r3, [r3, #12]
    f078:	4a0e      	ldr	r2, [pc, #56]	; (f0b4 <mp_obj_dict_store+0x5a>)
    f07a:	4293      	cmp	r3, r2
    f07c:	d006      	beq.n	f08c <mp_obj_dict_store+0x32>
    f07e:	4b0e      	ldr	r3, [pc, #56]	; (f0b8 <mp_obj_dict_store+0x5e>)
    f080:	4a0e      	ldr	r2, [pc, #56]	; (f0bc <mp_obj_dict_store+0x62>)
    f082:	f240 214f 	movw	r1, #591	; 0x24f
    f086:	480e      	ldr	r0, [pc, #56]	; (f0c0 <mp_obj_dict_store+0x66>)
    f088:	f00c f898 	bl	1b1bc <__assert_func>
    mp_obj_dict_t *self = MP_OBJ_TO_PTR(self_in);
    f08c:	68fb      	ldr	r3, [r7, #12]
    f08e:	617b      	str	r3, [r7, #20]
    mp_ensure_not_fixed(self);
    f090:	6978      	ldr	r0, [r7, #20]
    f092:	f7ff fb4b 	bl	e72c <mp_ensure_not_fixed>
    mp_map_lookup(&self->map, key, MP_MAP_LOOKUP_ADD_IF_NOT_FOUND)->value = value;
    f096:	697b      	ldr	r3, [r7, #20]
    f098:	3304      	adds	r3, #4
    f09a:	2201      	movs	r2, #1
    f09c:	68b9      	ldr	r1, [r7, #8]
    f09e:	4618      	mov	r0, r3
    f0a0:	f7fe f9ac 	bl	d3fc <mp_map_lookup>
    f0a4:	4602      	mov	r2, r0
    f0a6:	687b      	ldr	r3, [r7, #4]
    f0a8:	6053      	str	r3, [r2, #4]
    return self_in;
    f0aa:	68fb      	ldr	r3, [r7, #12]
}
    f0ac:	4618      	mov	r0, r3
    f0ae:	3718      	adds	r7, #24
    f0b0:	46bd      	mov	sp, r7
    f0b2:	bd80      	pop	{r7, pc}
    f0b4:	0000e4dd 	.word	0x0000e4dd
    f0b8:	0001fa90 	.word	0x0001fa90
    f0bc:	0001ff40 	.word	0x0001ff40
    f0c0:	0001faf0 	.word	0x0001faf0

0000f0c4 <mp_obj_dict_delete>:

mp_obj_t mp_obj_dict_delete(mp_obj_t self_in, mp_obj_t key) {
    f0c4:	b580      	push	{r7, lr}
    f0c6:	b084      	sub	sp, #16
    f0c8:	af00      	add	r7, sp, #0
    f0ca:	6078      	str	r0, [r7, #4]
    f0cc:	6039      	str	r1, [r7, #0]
    mp_obj_t args[2] = {self_in, key};
    f0ce:	687b      	ldr	r3, [r7, #4]
    f0d0:	60bb      	str	r3, [r7, #8]
    f0d2:	683b      	ldr	r3, [r7, #0]
    f0d4:	60fb      	str	r3, [r7, #12]
    dict_get_helper(2, args, MP_MAP_LOOKUP_REMOVE_IF_FOUND);
    f0d6:	f107 0308 	add.w	r3, r7, #8
    f0da:	2202      	movs	r2, #2
    f0dc:	4619      	mov	r1, r3
    f0de:	2002      	movs	r0, #2
    f0e0:	f7ff fc0c 	bl	e8fc <dict_get_helper>
    return self_in;
    f0e4:	687b      	ldr	r3, [r7, #4]
}
    f0e6:	4618      	mov	r0, r3
    f0e8:	3710      	adds	r7, #16
    f0ea:	46bd      	mov	sp, r7
    f0ec:	bd80      	pop	{r7, pc}

0000f0ee <mp_obj_dict_get_map>:

mp_map_t *mp_obj_dict_get_map(mp_obj_t self_in) {
    f0ee:	b580      	push	{r7, lr}
    f0f0:	b084      	sub	sp, #16
    f0f2:	af00      	add	r7, sp, #0
    f0f4:	6078      	str	r0, [r7, #4]
    mp_check_self(MP_OBJ_IS_DICT_TYPE(self_in));
    f0f6:	6878      	ldr	r0, [r7, #4]
    f0f8:	f7ff f92e 	bl	e358 <MP_OBJ_IS_OBJ>
    f0fc:	4603      	mov	r3, r0
    f0fe:	2b00      	cmp	r3, #0
    f100:	d005      	beq.n	f10e <mp_obj_dict_get_map+0x20>
    f102:	687b      	ldr	r3, [r7, #4]
    f104:	681b      	ldr	r3, [r3, #0]
    f106:	68db      	ldr	r3, [r3, #12]
    f108:	4a08      	ldr	r2, [pc, #32]	; (f12c <mp_obj_dict_get_map+0x3e>)
    f10a:	4293      	cmp	r3, r2
    f10c:	d006      	beq.n	f11c <mp_obj_dict_get_map+0x2e>
    f10e:	4b08      	ldr	r3, [pc, #32]	; (f130 <mp_obj_dict_get_map+0x42>)
    f110:	4a08      	ldr	r2, [pc, #32]	; (f134 <mp_obj_dict_get_map+0x46>)
    f112:	f240 215d 	movw	r1, #605	; 0x25d
    f116:	4808      	ldr	r0, [pc, #32]	; (f138 <mp_obj_dict_get_map+0x4a>)
    f118:	f00c f850 	bl	1b1bc <__assert_func>
    mp_obj_dict_t *self = MP_OBJ_TO_PTR(self_in);
    f11c:	687b      	ldr	r3, [r7, #4]
    f11e:	60fb      	str	r3, [r7, #12]
    return &self->map;
    f120:	68fb      	ldr	r3, [r7, #12]
    f122:	3304      	adds	r3, #4
}
    f124:	4618      	mov	r0, r3
    f126:	3710      	adds	r7, #16
    f128:	46bd      	mov	sp, r7
    f12a:	bd80      	pop	{r7, pc}
    f12c:	0000e4dd 	.word	0x0000e4dd
    f130:	0001fa90 	.word	0x0001fa90
    f134:	0001ff54 	.word	0x0001ff54
    f138:	0001faf0 	.word	0x0001faf0

0000f13c <MP_OBJ_IS_OBJ>:
    { return ((((mp_int_t)(o)) & 3) == 0); }
    f13c:	b480      	push	{r7}
    f13e:	b083      	sub	sp, #12
    f140:	af00      	add	r7, sp, #0
    f142:	6078      	str	r0, [r7, #4]
    f144:	687b      	ldr	r3, [r7, #4]
    f146:	f003 0303 	and.w	r3, r3, #3
    f14a:	2b00      	cmp	r3, #0
    f14c:	bf0c      	ite	eq
    f14e:	2301      	moveq	r3, #1
    f150:	2300      	movne	r3, #0
    f152:	b2db      	uxtb	r3, r3
    f154:	4618      	mov	r0, r3
    f156:	370c      	adds	r7, #12
    f158:	46bd      	mov	sp, r7
    f15a:	f85d 7b04 	ldr.w	r7, [sp], #4
    f15e:	4770      	bx	lr

0000f160 <mp_obj_exception_print>:
// Instance of GeneratorExit exception - needed by generator.close()
// This would belong to objgenerator.c, but to keep mp_obj_exception_t
// definition module-private so far, have it here.
const mp_obj_exception_t mp_const_GeneratorExit_obj = {{&mp_type_GeneratorExit}, 0, 0, NULL, (mp_obj_tuple_t*)&mp_const_empty_tuple_obj};

void mp_obj_exception_print(const mp_print_t *print, mp_obj_t o_in, mp_print_kind_t kind) {
    f160:	b580      	push	{r7, lr}
    f162:	b088      	sub	sp, #32
    f164:	af00      	add	r7, sp, #0
    f166:	60f8      	str	r0, [r7, #12]
    f168:	60b9      	str	r1, [r7, #8]
    f16a:	607a      	str	r2, [r7, #4]
    mp_obj_exception_t *o = MP_OBJ_TO_PTR(o_in);
    f16c:	68bb      	ldr	r3, [r7, #8]
    f16e:	61fb      	str	r3, [r7, #28]
    mp_print_kind_t k = kind & ~PRINT_EXC_SUBCLASS;
    f170:	687b      	ldr	r3, [r7, #4]
    f172:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    f176:	61bb      	str	r3, [r7, #24]
    bool is_subclass = kind & PRINT_EXC_SUBCLASS;
    f178:	687b      	ldr	r3, [r7, #4]
    f17a:	f003 0380 	and.w	r3, r3, #128	; 0x80
    f17e:	2b00      	cmp	r3, #0
    f180:	bf14      	ite	ne
    f182:	2301      	movne	r3, #1
    f184:	2300      	moveq	r3, #0
    f186:	75fb      	strb	r3, [r7, #23]
    if (!is_subclass && (k == PRINT_REPR || k == PRINT_EXC)) {
    f188:	7dfb      	ldrb	r3, [r7, #23]
    f18a:	f083 0301 	eor.w	r3, r3, #1
    f18e:	b2db      	uxtb	r3, r3
    f190:	2b00      	cmp	r3, #0
    f192:	d010      	beq.n	f1b6 <mp_obj_exception_print+0x56>
    f194:	69bb      	ldr	r3, [r7, #24]
    f196:	2b01      	cmp	r3, #1
    f198:	d002      	beq.n	f1a0 <mp_obj_exception_print+0x40>
    f19a:	69bb      	ldr	r3, [r7, #24]
    f19c:	2b02      	cmp	r3, #2
    f19e:	d10a      	bne.n	f1b6 <mp_obj_exception_print+0x56>
        mp_print_str(print, qstr_str(o->base.type->name));
    f1a0:	69fb      	ldr	r3, [r7, #28]
    f1a2:	681b      	ldr	r3, [r3, #0]
    f1a4:	685b      	ldr	r3, [r3, #4]
    f1a6:	4618      	mov	r0, r3
    f1a8:	f7f2 f814 	bl	11d4 <qstr_str>
    f1ac:	4603      	mov	r3, r0
    f1ae:	4619      	mov	r1, r3
    f1b0:	68f8      	ldr	r0, [r7, #12]
    f1b2:	f7f2 fb4d 	bl	1850 <mp_print_str>
    }

    if (k == PRINT_EXC) {
    f1b6:	69bb      	ldr	r3, [r7, #24]
    f1b8:	2b02      	cmp	r3, #2
    f1ba:	d103      	bne.n	f1c4 <mp_obj_exception_print+0x64>
        mp_print_str(print, ": ");
    f1bc:	4917      	ldr	r1, [pc, #92]	; (f21c <mp_obj_exception_print+0xbc>)
    f1be:	68f8      	ldr	r0, [r7, #12]
    f1c0:	f7f2 fb46 	bl	1850 <mp_print_str>
    }

    if (k == PRINT_STR || k == PRINT_EXC) {
    f1c4:	69bb      	ldr	r3, [r7, #24]
    f1c6:	2b00      	cmp	r3, #0
    f1c8:	d002      	beq.n	f1d0 <mp_obj_exception_print+0x70>
    f1ca:	69bb      	ldr	r3, [r7, #24]
    f1cc:	2b02      	cmp	r3, #2
    f1ce:	d11b      	bne.n	f208 <mp_obj_exception_print+0xa8>
        if (o->args == NULL || o->args->len == 0) {
    f1d0:	69fb      	ldr	r3, [r7, #28]
    f1d2:	68db      	ldr	r3, [r3, #12]
    f1d4:	2b00      	cmp	r3, #0
    f1d6:	d004      	beq.n	f1e2 <mp_obj_exception_print+0x82>
    f1d8:	69fb      	ldr	r3, [r7, #28]
    f1da:	68db      	ldr	r3, [r3, #12]
    f1dc:	685b      	ldr	r3, [r3, #4]
    f1de:	2b00      	cmp	r3, #0
    f1e0:	d104      	bne.n	f1ec <mp_obj_exception_print+0x8c>
            mp_print_str(print, "");
    f1e2:	490f      	ldr	r1, [pc, #60]	; (f220 <mp_obj_exception_print+0xc0>)
    f1e4:	68f8      	ldr	r0, [r7, #12]
    f1e6:	f7f2 fb33 	bl	1850 <mp_print_str>
            return;
    f1ea:	e014      	b.n	f216 <mp_obj_exception_print+0xb6>
        } else if (o->args->len == 1) {
    f1ec:	69fb      	ldr	r3, [r7, #28]
    f1ee:	68db      	ldr	r3, [r3, #12]
    f1f0:	685b      	ldr	r3, [r3, #4]
    f1f2:	2b01      	cmp	r3, #1
    f1f4:	d108      	bne.n	f208 <mp_obj_exception_print+0xa8>
                    mp_printf(print, "[Errno " INT_FMT "] %q", MP_OBJ_SMALL_INT_VALUE(o->args->items[0]), qst);
                    return;
                }
            }
            #endif
            mp_obj_print_helper(print, o->args->items[0], PRINT_STR);
    f1f6:	69fb      	ldr	r3, [r7, #28]
    f1f8:	68db      	ldr	r3, [r3, #12]
    f1fa:	689b      	ldr	r3, [r3, #8]
    f1fc:	2200      	movs	r2, #0
    f1fe:	4619      	mov	r1, r3
    f200:	68f8      	ldr	r0, [r7, #12]
    f202:	f7fe fad6 	bl	d7b2 <mp_obj_print_helper>
            return;
    f206:	e006      	b.n	f216 <mp_obj_exception_print+0xb6>
        }
    }
    mp_obj_tuple_print(print, MP_OBJ_FROM_PTR(o->args), kind);
    f208:	69fb      	ldr	r3, [r7, #28]
    f20a:	68db      	ldr	r3, [r3, #12]
    f20c:	687a      	ldr	r2, [r7, #4]
    f20e:	4619      	mov	r1, r3
    f210:	68f8      	ldr	r0, [r7, #12]
    f212:	f006 fa3f 	bl	15694 <mp_obj_tuple_print>
}
    f216:	3720      	adds	r7, #32
    f218:	46bd      	mov	sp, r7
    f21a:	bd80      	pop	{r7, pc}
    f21c:	0001ff78 	.word	0x0001ff78
    f220:	0001ff7c 	.word	0x0001ff7c

0000f224 <mp_obj_exception_make_new>:

mp_obj_t mp_obj_exception_make_new(const mp_obj_type_t *type, size_t n_args, size_t n_kw, const mp_obj_t *args) {
    f224:	b580      	push	{r7, lr}
    f226:	b088      	sub	sp, #32
    f228:	af02      	add	r7, sp, #8
    f22a:	60f8      	str	r0, [r7, #12]
    f22c:	60b9      	str	r1, [r7, #8]
    f22e:	607a      	str	r2, [r7, #4]
    f230:	603b      	str	r3, [r7, #0]
    mp_arg_check_num(n_args, n_kw, 0, MP_OBJ_FUN_ARGS_MAX, false);
    f232:	2300      	movs	r3, #0
    f234:	9300      	str	r3, [sp, #0]
    f236:	f64f 73ff 	movw	r3, #65535	; 0xffff
    f23a:	2200      	movs	r2, #0
    f23c:	6879      	ldr	r1, [r7, #4]
    f23e:	68b8      	ldr	r0, [r7, #8]
    f240:	f7fd fe96 	bl	cf70 <mp_arg_check_num>

    // Try to allocate memory for the exception, with fallback to emergency exception object
    mp_obj_exception_t *o_exc = m_new_obj_maybe(mp_obj_exception_t);
    f244:	2010      	movs	r0, #16
    f246:	f7f1 f880 	bl	34a <m_malloc_maybe>
    f24a:	6178      	str	r0, [r7, #20]
    if (o_exc == NULL) {
    f24c:	697b      	ldr	r3, [r7, #20]
    f24e:	2b00      	cmp	r3, #0
    f250:	d101      	bne.n	f256 <mp_obj_exception_make_new+0x32>
        o_exc = &MP_STATE_VM(mp_emergency_exception_obj);
    f252:	4b19      	ldr	r3, [pc, #100]	; (f2b8 <mp_obj_exception_make_new+0x94>)
    f254:	617b      	str	r3, [r7, #20]
    }

    // Populate the exception object
    o_exc->base.type = type;
    f256:	697b      	ldr	r3, [r7, #20]
    f258:	68fa      	ldr	r2, [r7, #12]
    f25a:	601a      	str	r2, [r3, #0]
    o_exc->traceback_data = NULL;
    f25c:	697b      	ldr	r3, [r7, #20]
    f25e:	2200      	movs	r2, #0
    f260:	609a      	str	r2, [r3, #8]

    mp_obj_tuple_t *o_tuple;
    if (n_args == 0) {
    f262:	68bb      	ldr	r3, [r7, #8]
    f264:	2b00      	cmp	r3, #0
    f266:	d102      	bne.n	f26e <mp_obj_exception_make_new+0x4a>
        // No args, can use the empty tuple straightaway
        o_tuple = (mp_obj_tuple_t*)&mp_const_empty_tuple_obj;
    f268:	4b14      	ldr	r3, [pc, #80]	; (f2bc <mp_obj_exception_make_new+0x98>)
    f26a:	613b      	str	r3, [r7, #16]
    f26c:	e01b      	b.n	f2a6 <mp_obj_exception_make_new+0x82>
    } else {
        // Try to allocate memory for the tuple containing the args
        o_tuple = m_new_obj_var_maybe(mp_obj_tuple_t, mp_obj_t, n_args);
    f26e:	68bb      	ldr	r3, [r7, #8]
    f270:	3302      	adds	r3, #2
    f272:	009b      	lsls	r3, r3, #2
    f274:	4618      	mov	r0, r3
    f276:	f7f1 f868 	bl	34a <m_malloc_maybe>
    f27a:	6138      	str	r0, [r7, #16]
            o_tuple = (mp_obj_tuple_t*)
                ((uint8_t*)MP_STATE_VM(mp_emergency_exception_buf) + EMG_TRACEBACK_ALLOC * sizeof(size_t));
        }
        #endif

        if (o_tuple == NULL) {
    f27c:	693b      	ldr	r3, [r7, #16]
    f27e:	2b00      	cmp	r3, #0
    f280:	d102      	bne.n	f288 <mp_obj_exception_make_new+0x64>
            // No memory for a tuple, fallback to an empty tuple
            o_tuple = (mp_obj_tuple_t*)&mp_const_empty_tuple_obj;
    f282:	4b0e      	ldr	r3, [pc, #56]	; (f2bc <mp_obj_exception_make_new+0x98>)
    f284:	613b      	str	r3, [r7, #16]
    f286:	e00e      	b.n	f2a6 <mp_obj_exception_make_new+0x82>
        } else {
            // Have memory for a tuple so populate it
            o_tuple->base.type = &mp_type_tuple;
    f288:	693b      	ldr	r3, [r7, #16]
    f28a:	4a0d      	ldr	r2, [pc, #52]	; (f2c0 <mp_obj_exception_make_new+0x9c>)
    f28c:	601a      	str	r2, [r3, #0]
            o_tuple->len = n_args;
    f28e:	693b      	ldr	r3, [r7, #16]
    f290:	68ba      	ldr	r2, [r7, #8]
    f292:	605a      	str	r2, [r3, #4]
            memcpy(o_tuple->items, args, n_args * sizeof(mp_obj_t));
    f294:	693b      	ldr	r3, [r7, #16]
    f296:	f103 0008 	add.w	r0, r3, #8
    f29a:	68bb      	ldr	r3, [r7, #8]
    f29c:	009b      	lsls	r3, r3, #2
    f29e:	461a      	mov	r2, r3
    f2a0:	6839      	ldr	r1, [r7, #0]
    f2a2:	f00c fb8f 	bl	1b9c4 <memcpy>
        }
    }

    // Store the tuple of args in the exception object
    o_exc->args = o_tuple;
    f2a6:	697b      	ldr	r3, [r7, #20]
    f2a8:	693a      	ldr	r2, [r7, #16]
    f2aa:	60da      	str	r2, [r3, #12]

    return MP_OBJ_FROM_PTR(o_exc);
    f2ac:	697b      	ldr	r3, [r7, #20]
}
    f2ae:	4618      	mov	r0, r3
    f2b0:	3718      	adds	r7, #24
    f2b2:	46bd      	mov	sp, r7
    f2b4:	bd80      	pop	{r7, pc}
    f2b6:	bf00      	nop
    f2b8:	20000a40 	.word	0x20000a40
    f2bc:	00021c24 	.word	0x00021c24
    f2c0:	00021be8 	.word	0x00021be8

0000f2c4 <mp_obj_exception_get_value>:

// Get exception "value" - that is, first argument, or None
mp_obj_t mp_obj_exception_get_value(mp_obj_t self_in) {
    f2c4:	b480      	push	{r7}
    f2c6:	b085      	sub	sp, #20
    f2c8:	af00      	add	r7, sp, #0
    f2ca:	6078      	str	r0, [r7, #4]
    mp_obj_exception_t *self = MP_OBJ_TO_PTR(self_in);
    f2cc:	687b      	ldr	r3, [r7, #4]
    f2ce:	60fb      	str	r3, [r7, #12]
    if (self->args->len == 0) {
    f2d0:	68fb      	ldr	r3, [r7, #12]
    f2d2:	68db      	ldr	r3, [r3, #12]
    f2d4:	685b      	ldr	r3, [r3, #4]
    f2d6:	2b00      	cmp	r3, #0
    f2d8:	d101      	bne.n	f2de <mp_obj_exception_get_value+0x1a>
        return mp_const_none;
    f2da:	4b05      	ldr	r3, [pc, #20]	; (f2f0 <mp_obj_exception_get_value+0x2c>)
    f2dc:	e002      	b.n	f2e4 <mp_obj_exception_get_value+0x20>
    } else {
        return self->args->items[0];
    f2de:	68fb      	ldr	r3, [r7, #12]
    f2e0:	68db      	ldr	r3, [r3, #12]
    f2e2:	689b      	ldr	r3, [r3, #8]
    }
}
    f2e4:	4618      	mov	r0, r3
    f2e6:	3714      	adds	r7, #20
    f2e8:	46bd      	mov	sp, r7
    f2ea:	f85d 7b04 	ldr.w	r7, [sp], #4
    f2ee:	4770      	bx	lr
    f2f0:	000212b4 	.word	0x000212b4

0000f2f4 <mp_obj_exception_attr>:

void mp_obj_exception_attr(mp_obj_t self_in, qstr attr, mp_obj_t *dest) {
    f2f4:	b580      	push	{r7, lr}
    f2f6:	b086      	sub	sp, #24
    f2f8:	af00      	add	r7, sp, #0
    f2fa:	60f8      	str	r0, [r7, #12]
    f2fc:	60b9      	str	r1, [r7, #8]
    f2fe:	607a      	str	r2, [r7, #4]
    mp_obj_exception_t *self = MP_OBJ_TO_PTR(self_in);
    f300:	68fb      	ldr	r3, [r7, #12]
    f302:	617b      	str	r3, [r7, #20]
    if (dest[0] != MP_OBJ_NULL) {
    f304:	687b      	ldr	r3, [r7, #4]
    f306:	681b      	ldr	r3, [r3, #0]
    f308:	2b00      	cmp	r3, #0
    f30a:	d00f      	beq.n	f32c <mp_obj_exception_attr+0x38>
        // store/delete attribute
        if (attr == MP_QSTR___traceback__ && dest[1] == mp_const_none) {
    f30c:	68bb      	ldr	r3, [r7, #8]
    f30e:	2b25      	cmp	r3, #37	; 0x25
    f310:	d123      	bne.n	f35a <mp_obj_exception_attr+0x66>
    f312:	687b      	ldr	r3, [r7, #4]
    f314:	3304      	adds	r3, #4
    f316:	681b      	ldr	r3, [r3, #0]
    f318:	4a12      	ldr	r2, [pc, #72]	; (f364 <mp_obj_exception_attr+0x70>)
    f31a:	4293      	cmp	r3, r2
    f31c:	d11d      	bne.n	f35a <mp_obj_exception_attr+0x66>
            // optimization of pre-allocating exception instance and raising
            // it repeatedly - this avoids memory allocation during raise.
            // However, uPy will keep adding traceback entries to such
            // exception instance, so before throwing it, traceback should
            // be cleared like above.
            self->traceback_len = 0;
    f31e:	697b      	ldr	r3, [r7, #20]
    f320:	2200      	movs	r2, #0
    f322:	80da      	strh	r2, [r3, #6]
            dest[0] = MP_OBJ_NULL; // indicate success
    f324:	687b      	ldr	r3, [r7, #4]
    f326:	2200      	movs	r2, #0
    f328:	601a      	str	r2, [r3, #0]
        }
        return;
    f32a:	e016      	b.n	f35a <mp_obj_exception_attr+0x66>
    }
    if (attr == MP_QSTR_args) {
    f32c:	68bb      	ldr	r3, [r7, #8]
    f32e:	2b57      	cmp	r3, #87	; 0x57
    f330:	d104      	bne.n	f33c <mp_obj_exception_attr+0x48>
        dest[0] = MP_OBJ_FROM_PTR(self->args);
    f332:	697b      	ldr	r3, [r7, #20]
    f334:	68da      	ldr	r2, [r3, #12]
    f336:	687b      	ldr	r3, [r7, #4]
    f338:	601a      	str	r2, [r3, #0]
    f33a:	e00f      	b.n	f35c <mp_obj_exception_attr+0x68>
    } else if (self->base.type == &mp_type_StopIteration && attr == MP_QSTR_value) {
    f33c:	697b      	ldr	r3, [r7, #20]
    f33e:	681b      	ldr	r3, [r3, #0]
    f340:	4a09      	ldr	r2, [pc, #36]	; (f368 <mp_obj_exception_attr+0x74>)
    f342:	4293      	cmp	r3, r2
    f344:	d10a      	bne.n	f35c <mp_obj_exception_attr+0x68>
    f346:	68bb      	ldr	r3, [r7, #8]
    f348:	2bc3      	cmp	r3, #195	; 0xc3
    f34a:	d107      	bne.n	f35c <mp_obj_exception_attr+0x68>
        dest[0] = mp_obj_exception_get_value(self_in);
    f34c:	68f8      	ldr	r0, [r7, #12]
    f34e:	f7ff ffb9 	bl	f2c4 <mp_obj_exception_get_value>
    f352:	4602      	mov	r2, r0
    f354:	687b      	ldr	r3, [r7, #4]
    f356:	601a      	str	r2, [r3, #0]
    f358:	e000      	b.n	f35c <mp_obj_exception_attr+0x68>
        return;
    f35a:	bf00      	nop
    }
}
    f35c:	3718      	adds	r7, #24
    f35e:	46bd      	mov	sp, r7
    f360:	bd80      	pop	{r7, pc}
    f362:	bf00      	nop
    f364:	000212b4 	.word	0x000212b4
    f368:	000200ac 	.word	0x000200ac

0000f36c <mp_obj_new_exception>:
    MP_DEFINE_EXCEPTION(UnicodeWarning, Warning)
    MP_DEFINE_EXCEPTION(BytesWarning, Warning)
    MP_DEFINE_EXCEPTION(ResourceWarning, Warning)
    */

mp_obj_t mp_obj_new_exception(const mp_obj_type_t *exc_type) {
    f36c:	b580      	push	{r7, lr}
    f36e:	b082      	sub	sp, #8
    f370:	af00      	add	r7, sp, #0
    f372:	6078      	str	r0, [r7, #4]
    return mp_obj_new_exception_args(exc_type, 0, NULL);
    f374:	2200      	movs	r2, #0
    f376:	2100      	movs	r1, #0
    f378:	6878      	ldr	r0, [r7, #4]
    f37a:	f000 f815 	bl	f3a8 <mp_obj_new_exception_args>
    f37e:	4603      	mov	r3, r0
}
    f380:	4618      	mov	r0, r3
    f382:	3708      	adds	r7, #8
    f384:	46bd      	mov	sp, r7
    f386:	bd80      	pop	{r7, pc}

0000f388 <mp_obj_new_exception_arg1>:

// "Optimized" version for common(?) case of having 1 exception arg
mp_obj_t mp_obj_new_exception_arg1(const mp_obj_type_t *exc_type, mp_obj_t arg) {
    f388:	b580      	push	{r7, lr}
    f38a:	b082      	sub	sp, #8
    f38c:	af00      	add	r7, sp, #0
    f38e:	6078      	str	r0, [r7, #4]
    f390:	6039      	str	r1, [r7, #0]
    return mp_obj_new_exception_args(exc_type, 1, &arg);
    f392:	463b      	mov	r3, r7
    f394:	461a      	mov	r2, r3
    f396:	2101      	movs	r1, #1
    f398:	6878      	ldr	r0, [r7, #4]
    f39a:	f000 f805 	bl	f3a8 <mp_obj_new_exception_args>
    f39e:	4603      	mov	r3, r0
}
    f3a0:	4618      	mov	r0, r3
    f3a2:	3708      	adds	r7, #8
    f3a4:	46bd      	mov	sp, r7
    f3a6:	bd80      	pop	{r7, pc}

0000f3a8 <mp_obj_new_exception_args>:

mp_obj_t mp_obj_new_exception_args(const mp_obj_type_t *exc_type, size_t n_args, const mp_obj_t *args) {
    f3a8:	b590      	push	{r4, r7, lr}
    f3aa:	b085      	sub	sp, #20
    f3ac:	af00      	add	r7, sp, #0
    f3ae:	60f8      	str	r0, [r7, #12]
    f3b0:	60b9      	str	r1, [r7, #8]
    f3b2:	607a      	str	r2, [r7, #4]
    assert(exc_type->make_new == mp_obj_exception_make_new);
    f3b4:	68fb      	ldr	r3, [r7, #12]
    f3b6:	68db      	ldr	r3, [r3, #12]
    f3b8:	4a0a      	ldr	r2, [pc, #40]	; (f3e4 <mp_obj_new_exception_args+0x3c>)
    f3ba:	4293      	cmp	r3, r2
    f3bc:	d006      	beq.n	f3cc <mp_obj_new_exception_args+0x24>
    f3be:	4b0a      	ldr	r3, [pc, #40]	; (f3e8 <mp_obj_new_exception_args+0x40>)
    f3c0:	4a0a      	ldr	r2, [pc, #40]	; (f3ec <mp_obj_new_exception_args+0x44>)
    f3c2:	f240 1137 	movw	r1, #311	; 0x137
    f3c6:	480a      	ldr	r0, [pc, #40]	; (f3f0 <mp_obj_new_exception_args+0x48>)
    f3c8:	f00b fef8 	bl	1b1bc <__assert_func>
    return exc_type->make_new(exc_type, n_args, 0, args);
    f3cc:	68fb      	ldr	r3, [r7, #12]
    f3ce:	68dc      	ldr	r4, [r3, #12]
    f3d0:	687b      	ldr	r3, [r7, #4]
    f3d2:	2200      	movs	r2, #0
    f3d4:	68b9      	ldr	r1, [r7, #8]
    f3d6:	68f8      	ldr	r0, [r7, #12]
    f3d8:	47a0      	blx	r4
    f3da:	4603      	mov	r3, r0
}
    f3dc:	4618      	mov	r0, r3
    f3de:	3714      	adds	r7, #20
    f3e0:	46bd      	mov	sp, r7
    f3e2:	bd90      	pop	{r4, r7, pc}
    f3e4:	0000f225 	.word	0x0000f225
    f3e8:	0002055c 	.word	0x0002055c
    f3ec:	000205d8 	.word	0x000205d8
    f3f0:	0002058c 	.word	0x0002058c

0000f3f4 <mp_obj_new_exception_msg>:

mp_obj_t mp_obj_new_exception_msg(const mp_obj_type_t *exc_type, const char *msg) {
    f3f4:	b580      	push	{r7, lr}
    f3f6:	b082      	sub	sp, #8
    f3f8:	af00      	add	r7, sp, #0
    f3fa:	6078      	str	r0, [r7, #4]
    f3fc:	6039      	str	r1, [r7, #0]
    return mp_obj_new_exception_msg_varg(exc_type, msg);
    f3fe:	6839      	ldr	r1, [r7, #0]
    f400:	6878      	ldr	r0, [r7, #4]
    f402:	f000 f857 	bl	f4b4 <mp_obj_new_exception_msg_varg>
    f406:	4603      	mov	r3, r0
}
    f408:	4618      	mov	r0, r3
    f40a:	3708      	adds	r7, #8
    f40c:	46bd      	mov	sp, r7
    f40e:	bd80      	pop	{r7, pc}

0000f410 <exc_add_strn>:
    size_t alloc;
    size_t len;
    byte *buf;
};

STATIC void exc_add_strn(void *data, const char *str, size_t len) {
    f410:	b580      	push	{r7, lr}
    f412:	b088      	sub	sp, #32
    f414:	af00      	add	r7, sp, #0
    f416:	60f8      	str	r0, [r7, #12]
    f418:	60b9      	str	r1, [r7, #8]
    f41a:	607a      	str	r2, [r7, #4]
    struct _exc_printer_t *pr = data;
    f41c:	68fb      	ldr	r3, [r7, #12]
    f41e:	61fb      	str	r3, [r7, #28]
    if (pr->len + len >= pr->alloc) {
    f420:	69fb      	ldr	r3, [r7, #28]
    f422:	689a      	ldr	r2, [r3, #8]
    f424:	687b      	ldr	r3, [r7, #4]
    f426:	441a      	add	r2, r3
    f428:	69fb      	ldr	r3, [r7, #28]
    f42a:	685b      	ldr	r3, [r3, #4]
    f42c:	429a      	cmp	r2, r3
    f42e:	d32d      	bcc.n	f48c <exc_add_strn+0x7c>
        // Not enough room for data plus a null byte so try to grow the buffer
        if (pr->allow_realloc) {
    f430:	69fb      	ldr	r3, [r7, #28]
    f432:	781b      	ldrb	r3, [r3, #0]
    f434:	2b00      	cmp	r3, #0
    f436:	d022      	beq.n	f47e <exc_add_strn+0x6e>
            size_t new_alloc = pr->alloc + len + 16;
    f438:	69fb      	ldr	r3, [r7, #28]
    f43a:	685a      	ldr	r2, [r3, #4]
    f43c:	687b      	ldr	r3, [r7, #4]
    f43e:	4413      	add	r3, r2
    f440:	3310      	adds	r3, #16
    f442:	61bb      	str	r3, [r7, #24]
            byte *new_buf = m_renew_maybe(byte, pr->buf, pr->alloc, new_alloc, true);
    f444:	69fb      	ldr	r3, [r7, #28]
    f446:	68db      	ldr	r3, [r3, #12]
    f448:	2201      	movs	r2, #1
    f44a:	69b9      	ldr	r1, [r7, #24]
    f44c:	4618      	mov	r0, r3
    f44e:	f7f0 ffb0 	bl	3b2 <m_realloc_maybe>
    f452:	6178      	str	r0, [r7, #20]
            if (new_buf == NULL) {
    f454:	697b      	ldr	r3, [r7, #20]
    f456:	2b00      	cmp	r3, #0
    f458:	d10a      	bne.n	f470 <exc_add_strn+0x60>
                pr->allow_realloc = false;
    f45a:	69fb      	ldr	r3, [r7, #28]
    f45c:	2200      	movs	r2, #0
    f45e:	701a      	strb	r2, [r3, #0]
                len = pr->alloc - pr->len - 1;
    f460:	69fb      	ldr	r3, [r7, #28]
    f462:	685a      	ldr	r2, [r3, #4]
    f464:	69fb      	ldr	r3, [r7, #28]
    f466:	689b      	ldr	r3, [r3, #8]
    f468:	1ad3      	subs	r3, r2, r3
    f46a:	3b01      	subs	r3, #1
    f46c:	607b      	str	r3, [r7, #4]
    f46e:	e00d      	b.n	f48c <exc_add_strn+0x7c>
            } else {
                pr->alloc = new_alloc;
    f470:	69fb      	ldr	r3, [r7, #28]
    f472:	69ba      	ldr	r2, [r7, #24]
    f474:	605a      	str	r2, [r3, #4]
                pr->buf = new_buf;
    f476:	69fb      	ldr	r3, [r7, #28]
    f478:	697a      	ldr	r2, [r7, #20]
    f47a:	60da      	str	r2, [r3, #12]
    f47c:	e006      	b.n	f48c <exc_add_strn+0x7c>
            }
        } else {
            len = pr->alloc - pr->len - 1;
    f47e:	69fb      	ldr	r3, [r7, #28]
    f480:	685a      	ldr	r2, [r3, #4]
    f482:	69fb      	ldr	r3, [r7, #28]
    f484:	689b      	ldr	r3, [r3, #8]
    f486:	1ad3      	subs	r3, r2, r3
    f488:	3b01      	subs	r3, #1
    f48a:	607b      	str	r3, [r7, #4]
        }
    }
    memcpy(pr->buf + pr->len, str, len);
    f48c:	69fb      	ldr	r3, [r7, #28]
    f48e:	68da      	ldr	r2, [r3, #12]
    f490:	69fb      	ldr	r3, [r7, #28]
    f492:	689b      	ldr	r3, [r3, #8]
    f494:	4413      	add	r3, r2
    f496:	687a      	ldr	r2, [r7, #4]
    f498:	68b9      	ldr	r1, [r7, #8]
    f49a:	4618      	mov	r0, r3
    f49c:	f00c fa92 	bl	1b9c4 <memcpy>
    pr->len += len;
    f4a0:	69fb      	ldr	r3, [r7, #28]
    f4a2:	689a      	ldr	r2, [r3, #8]
    f4a4:	687b      	ldr	r3, [r7, #4]
    f4a6:	441a      	add	r2, r3
    f4a8:	69fb      	ldr	r3, [r7, #28]
    f4aa:	609a      	str	r2, [r3, #8]
}
    f4ac:	bf00      	nop
    f4ae:	3720      	adds	r7, #32
    f4b0:	46bd      	mov	sp, r7
    f4b2:	bd80      	pop	{r7, pc}

0000f4b4 <mp_obj_new_exception_msg_varg>:

mp_obj_t mp_obj_new_exception_msg_varg(const mp_obj_type_t *exc_type, const char *fmt, ...) {
    f4b4:	b40e      	push	{r1, r2, r3}
    f4b6:	b580      	push	{r7, lr}
    f4b8:	b08f      	sub	sp, #60	; 0x3c
    f4ba:	af00      	add	r7, sp, #0
    f4bc:	6078      	str	r0, [r7, #4]
    assert(fmt != NULL);
    f4be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    f4c0:	2b00      	cmp	r3, #0
    f4c2:	d106      	bne.n	f4d2 <mp_obj_new_exception_msg_varg+0x1e>
    f4c4:	4b43      	ldr	r3, [pc, #268]	; (f5d4 <mp_obj_new_exception_msg_varg+0x120>)
    f4c6:	4a44      	ldr	r2, [pc, #272]	; (f5d8 <mp_obj_new_exception_msg_varg+0x124>)
    f4c8:	f240 1161 	movw	r1, #353	; 0x161
    f4cc:	4843      	ldr	r0, [pc, #268]	; (f5dc <mp_obj_new_exception_msg_varg+0x128>)
    f4ce:	f00b fe75 	bl	1b1bc <__assert_func>

    // Check that the given type is an exception type
    assert(exc_type->make_new == mp_obj_exception_make_new);
    f4d2:	687b      	ldr	r3, [r7, #4]
    f4d4:	68db      	ldr	r3, [r3, #12]
    f4d6:	4a42      	ldr	r2, [pc, #264]	; (f5e0 <mp_obj_new_exception_msg_varg+0x12c>)
    f4d8:	4293      	cmp	r3, r2
    f4da:	d006      	beq.n	f4ea <mp_obj_new_exception_msg_varg+0x36>
    f4dc:	4b41      	ldr	r3, [pc, #260]	; (f5e4 <mp_obj_new_exception_msg_varg+0x130>)
    f4de:	4a3e      	ldr	r2, [pc, #248]	; (f5d8 <mp_obj_new_exception_msg_varg+0x124>)
    f4e0:	f44f 71b2 	mov.w	r1, #356	; 0x164
    f4e4:	483d      	ldr	r0, [pc, #244]	; (f5dc <mp_obj_new_exception_msg_varg+0x128>)
    f4e6:	f00b fe69 	bl	1b1bc <__assert_func>

    // Try to allocate memory for the message
    mp_obj_str_t *o_str = m_new_obj_maybe(mp_obj_str_t);
    f4ea:	2010      	movs	r0, #16
    f4ec:	f7f0 ff2d 	bl	34a <m_malloc_maybe>
    f4f0:	6378      	str	r0, [r7, #52]	; 0x34
    size_t o_str_alloc = strlen(fmt) + 1;
    f4f2:	6c78      	ldr	r0, [r7, #68]	; 0x44
    f4f4:	f00c fb9c 	bl	1bc30 <strlen>
    f4f8:	4603      	mov	r3, r0
    f4fa:	3301      	adds	r3, #1
    f4fc:	633b      	str	r3, [r7, #48]	; 0x30
    byte *o_str_buf = m_new_maybe(byte, o_str_alloc);
    f4fe:	6b38      	ldr	r0, [r7, #48]	; 0x30
    f500:	f7f0 ff23 	bl	34a <m_malloc_maybe>
    f504:	62f8      	str	r0, [r7, #44]	; 0x2c

    bool used_emg_buf = false;
    f506:	2300      	movs	r3, #0
    f508:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        o_str_alloc = (uint8_t*)MP_STATE_VM(mp_emergency_exception_buf)
            + mp_emergency_exception_buf_size - o_str_buf;
    }
    #endif

    if (o_str == NULL) {
    f50c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    f50e:	2b00      	cmp	r3, #0
    f510:	d107      	bne.n	f522 <mp_obj_new_exception_msg_varg+0x6e>
        // No memory for the string object so create the exception with no args
        return mp_obj_exception_make_new(exc_type, 0, 0, NULL);
    f512:	2300      	movs	r3, #0
    f514:	2200      	movs	r2, #0
    f516:	2100      	movs	r1, #0
    f518:	6878      	ldr	r0, [r7, #4]
    f51a:	f7ff fe83 	bl	f224 <mp_obj_exception_make_new>
    f51e:	4603      	mov	r3, r0
    f520:	e050      	b.n	f5c4 <mp_obj_new_exception_msg_varg+0x110>
    }

    if (o_str_buf == NULL) {
    f522:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    f524:	2b00      	cmp	r3, #0
    f526:	d107      	bne.n	f538 <mp_obj_new_exception_msg_varg+0x84>
        // No memory for the string buffer: assume that the fmt string is in ROM
        // and use that data as the data of the string
        o_str->len = o_str_alloc - 1; // will be equal to strlen(fmt)
    f528:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    f52a:	1e5a      	subs	r2, r3, #1
    f52c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    f52e:	609a      	str	r2, [r3, #8]
        o_str->data = (const byte*)fmt;
    f530:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    f532:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    f534:	60da      	str	r2, [r3, #12]
    f536:	e02d      	b.n	f594 <mp_obj_new_exception_msg_varg+0xe0>
    } else {
        // We have some memory to format the string
        struct _exc_printer_t exc_pr = {!used_emg_buf, o_str_alloc, 0, o_str_buf};
    f538:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
    f53c:	2b00      	cmp	r3, #0
    f53e:	bf14      	ite	ne
    f540:	2301      	movne	r3, #1
    f542:	2300      	moveq	r3, #0
    f544:	b2db      	uxtb	r3, r3
    f546:	f083 0301 	eor.w	r3, r3, #1
    f54a:	b2db      	uxtb	r3, r3
    f54c:	f003 0301 	and.w	r3, r3, #1
    f550:	b2db      	uxtb	r3, r3
    f552:	753b      	strb	r3, [r7, #20]
    f554:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    f556:	61bb      	str	r3, [r7, #24]
    f558:	2300      	movs	r3, #0
    f55a:	61fb      	str	r3, [r7, #28]
    f55c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    f55e:	623b      	str	r3, [r7, #32]
        mp_print_t print = {&exc_pr, exc_add_strn};
    f560:	f107 0314 	add.w	r3, r7, #20
    f564:	60fb      	str	r3, [r7, #12]
    f566:	4b20      	ldr	r3, [pc, #128]	; (f5e8 <mp_obj_new_exception_msg_varg+0x134>)
    f568:	613b      	str	r3, [r7, #16]
        va_list ap;
        va_start(ap, fmt);
    f56a:	f107 0348 	add.w	r3, r7, #72	; 0x48
    f56e:	60bb      	str	r3, [r7, #8]
        mp_vprintf(&print, fmt, ap);
    f570:	f107 030c 	add.w	r3, r7, #12
    f574:	68ba      	ldr	r2, [r7, #8]
    f576:	6c79      	ldr	r1, [r7, #68]	; 0x44
    f578:	4618      	mov	r0, r3
    f57a:	f7f2 fc91 	bl	1ea0 <mp_vprintf>
        va_end(ap);
        exc_pr.buf[exc_pr.len] = '\0';
    f57e:	6a3a      	ldr	r2, [r7, #32]
    f580:	69fb      	ldr	r3, [r7, #28]
    f582:	4413      	add	r3, r2
    f584:	2200      	movs	r2, #0
    f586:	701a      	strb	r2, [r3, #0]
        o_str->len = exc_pr.len;
    f588:	69fa      	ldr	r2, [r7, #28]
    f58a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    f58c:	609a      	str	r2, [r3, #8]
        o_str->data = exc_pr.buf;
    f58e:	6a3a      	ldr	r2, [r7, #32]
    f590:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    f592:	60da      	str	r2, [r3, #12]
    }

    // Create the string object and call mp_obj_exception_make_new to create the exception
    o_str->base.type = &mp_type_str;
    f594:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    f596:	4a15      	ldr	r2, [pc, #84]	; (f5ec <mp_obj_new_exception_msg_varg+0x138>)
    f598:	601a      	str	r2, [r3, #0]
    o_str->hash = qstr_compute_hash(o_str->data, o_str->len);
    f59a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    f59c:	68da      	ldr	r2, [r3, #12]
    f59e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    f5a0:	689b      	ldr	r3, [r3, #8]
    f5a2:	4619      	mov	r1, r3
    f5a4:	4610      	mov	r0, r2
    f5a6:	f7f1 fc29 	bl	dfc <qstr_compute_hash>
    f5aa:	4602      	mov	r2, r0
    f5ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    f5ae:	605a      	str	r2, [r3, #4]
    mp_obj_t arg = MP_OBJ_FROM_PTR(o_str);
    f5b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    f5b2:	627b      	str	r3, [r7, #36]	; 0x24
    return mp_obj_exception_make_new(exc_type, 1, 0, &arg);
    f5b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
    f5b8:	2200      	movs	r2, #0
    f5ba:	2101      	movs	r1, #1
    f5bc:	6878      	ldr	r0, [r7, #4]
    f5be:	f7ff fe31 	bl	f224 <mp_obj_exception_make_new>
    f5c2:	4603      	mov	r3, r0
}
    f5c4:	4618      	mov	r0, r3
    f5c6:	373c      	adds	r7, #60	; 0x3c
    f5c8:	46bd      	mov	sp, r7
    f5ca:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
    f5ce:	b003      	add	sp, #12
    f5d0:	4770      	bx	lr
    f5d2:	bf00      	nop
    f5d4:	000205a4 	.word	0x000205a4
    f5d8:	000205f4 	.word	0x000205f4
    f5dc:	0002058c 	.word	0x0002058c
    f5e0:	0000f225 	.word	0x0000f225
    f5e4:	0002055c 	.word	0x0002055c
    f5e8:	0000f411 	.word	0x0000f411
    f5ec:	00021964 	.word	0x00021964

0000f5f0 <mp_obj_is_exception_type>:

// return true if the given object is an exception type
bool mp_obj_is_exception_type(mp_obj_t self_in) {
    f5f0:	b580      	push	{r7, lr}
    f5f2:	b084      	sub	sp, #16
    f5f4:	af00      	add	r7, sp, #0
    f5f6:	6078      	str	r0, [r7, #4]
    if (MP_OBJ_IS_TYPE(self_in, &mp_type_type)) {
    f5f8:	6878      	ldr	r0, [r7, #4]
    f5fa:	f7ff fd9f 	bl	f13c <MP_OBJ_IS_OBJ>
    f5fe:	4603      	mov	r3, r0
    f600:	2b00      	cmp	r3, #0
    f602:	d00d      	beq.n	f620 <mp_obj_is_exception_type+0x30>
    f604:	687b      	ldr	r3, [r7, #4]
    f606:	681b      	ldr	r3, [r3, #0]
    f608:	4a0a      	ldr	r2, [pc, #40]	; (f634 <mp_obj_is_exception_type+0x44>)
    f60a:	4293      	cmp	r3, r2
    f60c:	d108      	bne.n	f620 <mp_obj_is_exception_type+0x30>
        // optimisation when self_in is a builtin exception
        mp_obj_type_t *self = MP_OBJ_TO_PTR(self_in);
    f60e:	687b      	ldr	r3, [r7, #4]
    f610:	60fb      	str	r3, [r7, #12]
        if (self->make_new == mp_obj_exception_make_new) {
    f612:	68fb      	ldr	r3, [r7, #12]
    f614:	68db      	ldr	r3, [r3, #12]
    f616:	4a08      	ldr	r2, [pc, #32]	; (f638 <mp_obj_is_exception_type+0x48>)
    f618:	4293      	cmp	r3, r2
    f61a:	d101      	bne.n	f620 <mp_obj_is_exception_type+0x30>
            return true;
    f61c:	2301      	movs	r3, #1
    f61e:	e004      	b.n	f62a <mp_obj_is_exception_type+0x3a>
        }
    }
    return mp_obj_is_subclass_fast(self_in, MP_OBJ_FROM_PTR(&mp_type_BaseException));
    f620:	4906      	ldr	r1, [pc, #24]	; (f63c <mp_obj_is_exception_type+0x4c>)
    f622:	6878      	ldr	r0, [r7, #4]
    f624:	f007 fd18 	bl	17058 <mp_obj_is_subclass_fast>
    f628:	4603      	mov	r3, r0
}
    f62a:	4618      	mov	r0, r3
    f62c:	3710      	adds	r7, #16
    f62e:	46bd      	mov	sp, r7
    f630:	bd80      	pop	{r7, pc}
    f632:	bf00      	nop
    f634:	00021ee0 	.word	0x00021ee0
    f638:	0000f225 	.word	0x0000f225
    f63c:	0001ff80 	.word	0x0001ff80

0000f640 <mp_obj_is_exception_instance>:

// return true if the given object is an instance of an exception type
bool mp_obj_is_exception_instance(mp_obj_t self_in) {
    f640:	b580      	push	{r7, lr}
    f642:	b082      	sub	sp, #8
    f644:	af00      	add	r7, sp, #0
    f646:	6078      	str	r0, [r7, #4]
    return mp_obj_is_exception_type(MP_OBJ_FROM_PTR(mp_obj_get_type(self_in)));
    f648:	6878      	ldr	r0, [r7, #4]
    f64a:	f7fe f881 	bl	d750 <mp_obj_get_type>
    f64e:	4603      	mov	r3, r0
    f650:	4618      	mov	r0, r3
    f652:	f7ff ffcd 	bl	f5f0 <mp_obj_is_exception_type>
    f656:	4603      	mov	r3, r0
}
    f658:	4618      	mov	r0, r3
    f65a:	3708      	adds	r7, #8
    f65c:	46bd      	mov	sp, r7
    f65e:	bd80      	pop	{r7, pc}

0000f660 <mp_obj_exception_match>:

// Return true if exception (type or instance) is a subclass of given
// exception type.  Assumes exc_type is a subclass of BaseException, as
// defined by mp_obj_is_exception_type(exc_type).
bool mp_obj_exception_match(mp_obj_t exc, mp_const_obj_t exc_type) {
    f660:	b580      	push	{r7, lr}
    f662:	b082      	sub	sp, #8
    f664:	af00      	add	r7, sp, #0
    f666:	6078      	str	r0, [r7, #4]
    f668:	6039      	str	r1, [r7, #0]
    // if exc is an instance of an exception, then extract and use its type
    if (mp_obj_is_exception_instance(exc)) {
    f66a:	6878      	ldr	r0, [r7, #4]
    f66c:	f7ff ffe8 	bl	f640 <mp_obj_is_exception_instance>
    f670:	4603      	mov	r3, r0
    f672:	2b00      	cmp	r3, #0
    f674:	d003      	beq.n	f67e <mp_obj_exception_match+0x1e>
        exc = MP_OBJ_FROM_PTR(mp_obj_get_type(exc));
    f676:	6878      	ldr	r0, [r7, #4]
    f678:	f7fe f86a 	bl	d750 <mp_obj_get_type>
    f67c:	6078      	str	r0, [r7, #4]
    }
    return mp_obj_is_subclass_fast(exc, exc_type);
    f67e:	6839      	ldr	r1, [r7, #0]
    f680:	6878      	ldr	r0, [r7, #4]
    f682:	f007 fce9 	bl	17058 <mp_obj_is_subclass_fast>
    f686:	4603      	mov	r3, r0
}
    f688:	4618      	mov	r0, r3
    f68a:	3708      	adds	r7, #8
    f68c:	46bd      	mov	sp, r7
    f68e:	bd80      	pop	{r7, pc}

0000f690 <mp_obj_exception_clear_traceback>:
        self = MP_OBJ_TO_PTR(self_in); \
    } else { \
        self = MP_OBJ_TO_PTR(((mp_obj_instance_t*)MP_OBJ_TO_PTR(self_in))->subobj[0]); \
    }

void mp_obj_exception_clear_traceback(mp_obj_t self_in) {
    f690:	b580      	push	{r7, lr}
    f692:	b084      	sub	sp, #16
    f694:	af00      	add	r7, sp, #0
    f696:	6078      	str	r0, [r7, #4]
    GET_NATIVE_EXCEPTION(self, self_in);
    f698:	6878      	ldr	r0, [r7, #4]
    f69a:	f7ff ffd1 	bl	f640 <mp_obj_is_exception_instance>
    f69e:	4603      	mov	r3, r0
    f6a0:	2b00      	cmp	r3, #0
    f6a2:	d106      	bne.n	f6b2 <mp_obj_exception_clear_traceback+0x22>
    f6a4:	4b0d      	ldr	r3, [pc, #52]	; (f6dc <mp_obj_exception_clear_traceback+0x4c>)
    f6a6:	4a0e      	ldr	r2, [pc, #56]	; (f6e0 <mp_obj_exception_clear_traceback+0x50>)
    f6a8:	f240 11c3 	movw	r1, #451	; 0x1c3
    f6ac:	480d      	ldr	r0, [pc, #52]	; (f6e4 <mp_obj_exception_clear_traceback+0x54>)
    f6ae:	f00b fd85 	bl	1b1bc <__assert_func>
    f6b2:	6878      	ldr	r0, [r7, #4]
    f6b4:	f7fe f84c 	bl	d750 <mp_obj_get_type>
    f6b8:	4603      	mov	r3, r0
    f6ba:	68db      	ldr	r3, [r3, #12]
    f6bc:	4a0a      	ldr	r2, [pc, #40]	; (f6e8 <mp_obj_exception_clear_traceback+0x58>)
    f6be:	4293      	cmp	r3, r2
    f6c0:	d102      	bne.n	f6c8 <mp_obj_exception_clear_traceback+0x38>
    f6c2:	687b      	ldr	r3, [r7, #4]
    f6c4:	60fb      	str	r3, [r7, #12]
    f6c6:	e002      	b.n	f6ce <mp_obj_exception_clear_traceback+0x3e>
    f6c8:	687b      	ldr	r3, [r7, #4]
    f6ca:	691b      	ldr	r3, [r3, #16]
    f6cc:	60fb      	str	r3, [r7, #12]
    // just set the traceback to the null object
    // we don't want to call any memory management functions here
    self->traceback_data = NULL;
    f6ce:	68fb      	ldr	r3, [r7, #12]
    f6d0:	2200      	movs	r2, #0
    f6d2:	609a      	str	r2, [r3, #8]
}
    f6d4:	bf00      	nop
    f6d6:	3710      	adds	r7, #16
    f6d8:	46bd      	mov	sp, r7
    f6da:	bd80      	pop	{r7, pc}
    f6dc:	000205b0 	.word	0x000205b0
    f6e0:	00020614 	.word	0x00020614
    f6e4:	0002058c 	.word	0x0002058c
    f6e8:	0000f225 	.word	0x0000f225

0000f6ec <mp_obj_exception_add_traceback>:

void mp_obj_exception_add_traceback(mp_obj_t self_in, qstr file, size_t line, qstr block) {
    f6ec:	b580      	push	{r7, lr}
    f6ee:	b088      	sub	sp, #32
    f6f0:	af00      	add	r7, sp, #0
    f6f2:	60f8      	str	r0, [r7, #12]
    f6f4:	60b9      	str	r1, [r7, #8]
    f6f6:	607a      	str	r2, [r7, #4]
    f6f8:	603b      	str	r3, [r7, #0]
    GET_NATIVE_EXCEPTION(self, self_in);
    f6fa:	68f8      	ldr	r0, [r7, #12]
    f6fc:	f7ff ffa0 	bl	f640 <mp_obj_is_exception_instance>
    f700:	4603      	mov	r3, r0
    f702:	2b00      	cmp	r3, #0
    f704:	d106      	bne.n	f714 <mp_obj_exception_add_traceback+0x28>
    f706:	4b33      	ldr	r3, [pc, #204]	; (f7d4 <mp_obj_exception_add_traceback+0xe8>)
    f708:	4a33      	ldr	r2, [pc, #204]	; (f7d8 <mp_obj_exception_add_traceback+0xec>)
    f70a:	f44f 71e5 	mov.w	r1, #458	; 0x1ca
    f70e:	4833      	ldr	r0, [pc, #204]	; (f7dc <mp_obj_exception_add_traceback+0xf0>)
    f710:	f00b fd54 	bl	1b1bc <__assert_func>
    f714:	68f8      	ldr	r0, [r7, #12]
    f716:	f7fe f81b 	bl	d750 <mp_obj_get_type>
    f71a:	4603      	mov	r3, r0
    f71c:	68db      	ldr	r3, [r3, #12]
    f71e:	4a30      	ldr	r2, [pc, #192]	; (f7e0 <mp_obj_exception_add_traceback+0xf4>)
    f720:	4293      	cmp	r3, r2
    f722:	d102      	bne.n	f72a <mp_obj_exception_add_traceback+0x3e>
    f724:	68fb      	ldr	r3, [r7, #12]
    f726:	61fb      	str	r3, [r7, #28]
    f728:	e002      	b.n	f730 <mp_obj_exception_add_traceback+0x44>
    f72a:	68fb      	ldr	r3, [r7, #12]
    f72c:	691b      	ldr	r3, [r3, #16]
    f72e:	61fb      	str	r3, [r7, #28]

    // append this traceback info to traceback data
    // if memory allocation fails (eg because gc is locked), just return

    if (self->traceback_data == NULL) {
    f730:	69fb      	ldr	r3, [r7, #28]
    f732:	689b      	ldr	r3, [r3, #8]
    f734:	2b00      	cmp	r3, #0
    f736:	d110      	bne.n	f75a <mp_obj_exception_add_traceback+0x6e>
        self->traceback_data = m_new_maybe(size_t, TRACEBACK_ENTRY_LEN);
    f738:	200c      	movs	r0, #12
    f73a:	f7f0 fe06 	bl	34a <m_malloc_maybe>
    f73e:	4602      	mov	r2, r0
    f740:	69fb      	ldr	r3, [r7, #28]
    f742:	609a      	str	r2, [r3, #8]
        if (self->traceback_data == NULL) {
    f744:	69fb      	ldr	r3, [r7, #28]
    f746:	689b      	ldr	r3, [r3, #8]
    f748:	2b00      	cmp	r3, #0
    f74a:	d03d      	beq.n	f7c8 <mp_obj_exception_add_traceback+0xdc>
            // Can't allocate
            return;
            #endif
        } else {
            // Allocated the traceback data on the heap
            self->traceback_alloc = TRACEBACK_ENTRY_LEN;
    f74c:	69fb      	ldr	r3, [r7, #28]
    f74e:	2203      	movs	r2, #3
    f750:	809a      	strh	r2, [r3, #4]
        }
        self->traceback_len = 0;
    f752:	69fb      	ldr	r3, [r7, #28]
    f754:	2200      	movs	r2, #0
    f756:	80da      	strh	r2, [r3, #6]
    f758:	e01d      	b.n	f796 <mp_obj_exception_add_traceback+0xaa>
    } else if (self->traceback_len + TRACEBACK_ENTRY_LEN > self->traceback_alloc) {
    f75a:	69fb      	ldr	r3, [r7, #28]
    f75c:	88db      	ldrh	r3, [r3, #6]
    f75e:	3303      	adds	r3, #3
    f760:	69fa      	ldr	r2, [r7, #28]
    f762:	8892      	ldrh	r2, [r2, #4]
    f764:	4293      	cmp	r3, r2
    f766:	dd16      	ble.n	f796 <mp_obj_exception_add_traceback+0xaa>
            // Can't resize the emergency buffer
            return;
        }
        #endif
        // be conservative with growing traceback data
        size_t *tb_data = m_renew_maybe(size_t, self->traceback_data, self->traceback_alloc,
    f768:	69fb      	ldr	r3, [r7, #28]
    f76a:	6898      	ldr	r0, [r3, #8]
    f76c:	69fb      	ldr	r3, [r7, #28]
    f76e:	889b      	ldrh	r3, [r3, #4]
    f770:	3303      	adds	r3, #3
    f772:	009b      	lsls	r3, r3, #2
    f774:	2201      	movs	r2, #1
    f776:	4619      	mov	r1, r3
    f778:	f7f0 fe1b 	bl	3b2 <m_realloc_maybe>
    f77c:	61b8      	str	r0, [r7, #24]
            self->traceback_alloc + TRACEBACK_ENTRY_LEN, true);
        if (tb_data == NULL) {
    f77e:	69bb      	ldr	r3, [r7, #24]
    f780:	2b00      	cmp	r3, #0
    f782:	d023      	beq.n	f7cc <mp_obj_exception_add_traceback+0xe0>
            return;
        }
        self->traceback_data = tb_data;
    f784:	69fb      	ldr	r3, [r7, #28]
    f786:	69ba      	ldr	r2, [r7, #24]
    f788:	609a      	str	r2, [r3, #8]
        self->traceback_alloc += TRACEBACK_ENTRY_LEN;
    f78a:	69fb      	ldr	r3, [r7, #28]
    f78c:	889b      	ldrh	r3, [r3, #4]
    f78e:	3303      	adds	r3, #3
    f790:	b29a      	uxth	r2, r3
    f792:	69fb      	ldr	r3, [r7, #28]
    f794:	809a      	strh	r2, [r3, #4]
    }

    size_t *tb_data = &self->traceback_data[self->traceback_len];
    f796:	69fb      	ldr	r3, [r7, #28]
    f798:	689a      	ldr	r2, [r3, #8]
    f79a:	69fb      	ldr	r3, [r7, #28]
    f79c:	88db      	ldrh	r3, [r3, #6]
    f79e:	009b      	lsls	r3, r3, #2
    f7a0:	4413      	add	r3, r2
    f7a2:	617b      	str	r3, [r7, #20]
    self->traceback_len += TRACEBACK_ENTRY_LEN;
    f7a4:	69fb      	ldr	r3, [r7, #28]
    f7a6:	88db      	ldrh	r3, [r3, #6]
    f7a8:	3303      	adds	r3, #3
    f7aa:	b29a      	uxth	r2, r3
    f7ac:	69fb      	ldr	r3, [r7, #28]
    f7ae:	80da      	strh	r2, [r3, #6]
    tb_data[0] = file;
    f7b0:	697b      	ldr	r3, [r7, #20]
    f7b2:	68ba      	ldr	r2, [r7, #8]
    f7b4:	601a      	str	r2, [r3, #0]
    tb_data[1] = line;
    f7b6:	697b      	ldr	r3, [r7, #20]
    f7b8:	3304      	adds	r3, #4
    f7ba:	687a      	ldr	r2, [r7, #4]
    f7bc:	601a      	str	r2, [r3, #0]
    tb_data[2] = block;
    f7be:	697b      	ldr	r3, [r7, #20]
    f7c0:	3308      	adds	r3, #8
    f7c2:	683a      	ldr	r2, [r7, #0]
    f7c4:	601a      	str	r2, [r3, #0]
    f7c6:	e002      	b.n	f7ce <mp_obj_exception_add_traceback+0xe2>
            return;
    f7c8:	bf00      	nop
    f7ca:	e000      	b.n	f7ce <mp_obj_exception_add_traceback+0xe2>
            return;
    f7cc:	bf00      	nop
}
    f7ce:	3720      	adds	r7, #32
    f7d0:	46bd      	mov	sp, r7
    f7d2:	bd80      	pop	{r7, pc}
    f7d4:	000205b0 	.word	0x000205b0
    f7d8:	00020638 	.word	0x00020638
    f7dc:	0002058c 	.word	0x0002058c
    f7e0:	0000f225 	.word	0x0000f225

0000f7e4 <mp_obj_exception_get_traceback>:

void mp_obj_exception_get_traceback(mp_obj_t self_in, size_t *n, size_t **values) {
    f7e4:	b580      	push	{r7, lr}
    f7e6:	b086      	sub	sp, #24
    f7e8:	af00      	add	r7, sp, #0
    f7ea:	60f8      	str	r0, [r7, #12]
    f7ec:	60b9      	str	r1, [r7, #8]
    f7ee:	607a      	str	r2, [r7, #4]
    GET_NATIVE_EXCEPTION(self, self_in);
    f7f0:	68f8      	ldr	r0, [r7, #12]
    f7f2:	f7ff ff25 	bl	f640 <mp_obj_is_exception_instance>
    f7f6:	4603      	mov	r3, r0
    f7f8:	2b00      	cmp	r3, #0
    f7fa:	d106      	bne.n	f80a <mp_obj_exception_get_traceback+0x26>
    f7fc:	4b16      	ldr	r3, [pc, #88]	; (f858 <mp_obj_exception_get_traceback+0x74>)
    f7fe:	4a17      	ldr	r2, [pc, #92]	; (f85c <mp_obj_exception_get_traceback+0x78>)
    f800:	f44f 71ff 	mov.w	r1, #510	; 0x1fe
    f804:	4816      	ldr	r0, [pc, #88]	; (f860 <mp_obj_exception_get_traceback+0x7c>)
    f806:	f00b fcd9 	bl	1b1bc <__assert_func>
    f80a:	68f8      	ldr	r0, [r7, #12]
    f80c:	f7fd ffa0 	bl	d750 <mp_obj_get_type>
    f810:	4603      	mov	r3, r0
    f812:	68db      	ldr	r3, [r3, #12]
    f814:	4a13      	ldr	r2, [pc, #76]	; (f864 <mp_obj_exception_get_traceback+0x80>)
    f816:	4293      	cmp	r3, r2
    f818:	d102      	bne.n	f820 <mp_obj_exception_get_traceback+0x3c>
    f81a:	68fb      	ldr	r3, [r7, #12]
    f81c:	617b      	str	r3, [r7, #20]
    f81e:	e002      	b.n	f826 <mp_obj_exception_get_traceback+0x42>
    f820:	68fb      	ldr	r3, [r7, #12]
    f822:	691b      	ldr	r3, [r3, #16]
    f824:	617b      	str	r3, [r7, #20]

    if (self->traceback_data == NULL) {
    f826:	697b      	ldr	r3, [r7, #20]
    f828:	689b      	ldr	r3, [r3, #8]
    f82a:	2b00      	cmp	r3, #0
    f82c:	d106      	bne.n	f83c <mp_obj_exception_get_traceback+0x58>
        *n = 0;
    f82e:	68bb      	ldr	r3, [r7, #8]
    f830:	2200      	movs	r2, #0
    f832:	601a      	str	r2, [r3, #0]
        *values = NULL;
    f834:	687b      	ldr	r3, [r7, #4]
    f836:	2200      	movs	r2, #0
    f838:	601a      	str	r2, [r3, #0]
    } else {
        *n = self->traceback_len;
        *values = self->traceback_data;
    }
}
    f83a:	e008      	b.n	f84e <mp_obj_exception_get_traceback+0x6a>
        *n = self->traceback_len;
    f83c:	697b      	ldr	r3, [r7, #20]
    f83e:	88db      	ldrh	r3, [r3, #6]
    f840:	461a      	mov	r2, r3
    f842:	68bb      	ldr	r3, [r7, #8]
    f844:	601a      	str	r2, [r3, #0]
        *values = self->traceback_data;
    f846:	697b      	ldr	r3, [r7, #20]
    f848:	689a      	ldr	r2, [r3, #8]
    f84a:	687b      	ldr	r3, [r7, #4]
    f84c:	601a      	str	r2, [r3, #0]
}
    f84e:	bf00      	nop
    f850:	3718      	adds	r7, #24
    f852:	46bd      	mov	sp, r7
    f854:	bd80      	pop	{r7, pc}
    f856:	bf00      	nop
    f858:	000205b0 	.word	0x000205b0
    f85c:	00020658 	.word	0x00020658
    f860:	0002058c 	.word	0x0002058c
    f864:	0000f225 	.word	0x0000f225

0000f868 <MP_OBJ_IS_OBJ>:
    f868:	b480      	push	{r7}
    f86a:	b083      	sub	sp, #12
    f86c:	af00      	add	r7, sp, #0
    f86e:	6078      	str	r0, [r7, #4]
    f870:	687b      	ldr	r3, [r7, #4]
    f872:	f003 0303 	and.w	r3, r3, #3
    f876:	2b00      	cmp	r3, #0
    f878:	bf0c      	ite	eq
    f87a:	2301      	moveq	r3, #1
    f87c:	2300      	movne	r3, #0
    f87e:	b2db      	uxtb	r3, r3
    f880:	4618      	mov	r0, r3
    f882:	370c      	adds	r7, #12
    f884:	46bd      	mov	sp, r7
    f886:	f85d 7b04 	ldr.w	r7, [sp], #4
    f88a:	4770      	bx	lr

0000f88c <mp_globals_get>:
static inline mp_obj_dict_t *mp_globals_get(void) { return MP_STATE_THREAD(dict_globals); }
    f88c:	b480      	push	{r7}
    f88e:	af00      	add	r7, sp, #0
    f890:	4b03      	ldr	r3, [pc, #12]	; (f8a0 <mp_globals_get+0x14>)
    f892:	689b      	ldr	r3, [r3, #8]
    f894:	4618      	mov	r0, r3
    f896:	46bd      	mov	sp, r7
    f898:	f85d 7b04 	ldr.w	r7, [sp], #4
    f89c:	4770      	bx	lr
    f89e:	bf00      	nop
    f8a0:	20000a2c 	.word	0x20000a2c

0000f8a4 <mp_globals_set>:
static inline void mp_globals_set(mp_obj_dict_t *d) { MP_STATE_THREAD(dict_globals) = d; }
    f8a4:	b480      	push	{r7}
    f8a6:	b083      	sub	sp, #12
    f8a8:	af00      	add	r7, sp, #0
    f8aa:	6078      	str	r0, [r7, #4]
    f8ac:	4a04      	ldr	r2, [pc, #16]	; (f8c0 <mp_globals_set+0x1c>)
    f8ae:	687b      	ldr	r3, [r7, #4]
    f8b0:	6093      	str	r3, [r2, #8]
    f8b2:	bf00      	nop
    f8b4:	370c      	adds	r7, #12
    f8b6:	46bd      	mov	sp, r7
    f8b8:	f85d 7b04 	ldr.w	r7, [sp], #4
    f8bc:	4770      	bx	lr
    f8be:	bf00      	nop
    f8c0:	20000a2c 	.word	0x20000a2c

0000f8c4 <fun_builtin_0_call>:
// function type.

/******************************************************************************/
/* builtin functions                                                          */

STATIC mp_obj_t fun_builtin_0_call(mp_obj_t self_in, size_t n_args, size_t n_kw, const mp_obj_t *args) {
    f8c4:	b580      	push	{r7, lr}
    f8c6:	b088      	sub	sp, #32
    f8c8:	af02      	add	r7, sp, #8
    f8ca:	60f8      	str	r0, [r7, #12]
    f8cc:	60b9      	str	r1, [r7, #8]
    f8ce:	607a      	str	r2, [r7, #4]
    f8d0:	603b      	str	r3, [r7, #0]
    (void)args;
    assert(MP_OBJ_IS_TYPE(self_in, &mp_type_fun_builtin_0));
    f8d2:	68f8      	ldr	r0, [r7, #12]
    f8d4:	f7ff ffc8 	bl	f868 <MP_OBJ_IS_OBJ>
    f8d8:	4603      	mov	r3, r0
    f8da:	2b00      	cmp	r3, #0
    f8dc:	d004      	beq.n	f8e8 <fun_builtin_0_call+0x24>
    f8de:	68fb      	ldr	r3, [r7, #12]
    f8e0:	681b      	ldr	r3, [r3, #0]
    f8e2:	4a0d      	ldr	r2, [pc, #52]	; (f918 <fun_builtin_0_call+0x54>)
    f8e4:	4293      	cmp	r3, r2
    f8e6:	d005      	beq.n	f8f4 <fun_builtin_0_call+0x30>
    f8e8:	4b0c      	ldr	r3, [pc, #48]	; (f91c <fun_builtin_0_call+0x58>)
    f8ea:	4a0d      	ldr	r2, [pc, #52]	; (f920 <fun_builtin_0_call+0x5c>)
    f8ec:	2135      	movs	r1, #53	; 0x35
    f8ee:	480d      	ldr	r0, [pc, #52]	; (f924 <fun_builtin_0_call+0x60>)
    f8f0:	f00b fc64 	bl	1b1bc <__assert_func>
    mp_obj_fun_builtin_fixed_t *self = MP_OBJ_TO_PTR(self_in);
    f8f4:	68fb      	ldr	r3, [r7, #12]
    f8f6:	617b      	str	r3, [r7, #20]
    mp_arg_check_num(n_args, n_kw, 0, 0, false);
    f8f8:	2300      	movs	r3, #0
    f8fa:	9300      	str	r3, [sp, #0]
    f8fc:	2300      	movs	r3, #0
    f8fe:	2200      	movs	r2, #0
    f900:	6879      	ldr	r1, [r7, #4]
    f902:	68b8      	ldr	r0, [r7, #8]
    f904:	f7fd fb34 	bl	cf70 <mp_arg_check_num>
    return self->fun._0();
    f908:	697b      	ldr	r3, [r7, #20]
    f90a:	685b      	ldr	r3, [r3, #4]
    f90c:	4798      	blx	r3
    f90e:	4603      	mov	r3, r0
}
    f910:	4618      	mov	r0, r3
    f912:	3718      	adds	r7, #24
    f914:	46bd      	mov	sp, r7
    f916:	bd80      	pop	{r7, pc}
    f918:	000206bc 	.word	0x000206bc
    f91c:	00020678 	.word	0x00020678
    f920:	00020940 	.word	0x00020940
    f924:	000206a8 	.word	0x000206a8

0000f928 <fun_builtin_1_call>:
    .name = MP_QSTR_function,
    .call = fun_builtin_0_call,
    .unary_op = mp_generic_unary_op,
};

STATIC mp_obj_t fun_builtin_1_call(mp_obj_t self_in, size_t n_args, size_t n_kw, const mp_obj_t *args) {
    f928:	b580      	push	{r7, lr}
    f92a:	b088      	sub	sp, #32
    f92c:	af02      	add	r7, sp, #8
    f92e:	60f8      	str	r0, [r7, #12]
    f930:	60b9      	str	r1, [r7, #8]
    f932:	607a      	str	r2, [r7, #4]
    f934:	603b      	str	r3, [r7, #0]
    assert(MP_OBJ_IS_TYPE(self_in, &mp_type_fun_builtin_1));
    f936:	68f8      	ldr	r0, [r7, #12]
    f938:	f7ff ff96 	bl	f868 <MP_OBJ_IS_OBJ>
    f93c:	4603      	mov	r3, r0
    f93e:	2b00      	cmp	r3, #0
    f940:	d004      	beq.n	f94c <fun_builtin_1_call+0x24>
    f942:	68fb      	ldr	r3, [r7, #12]
    f944:	681b      	ldr	r3, [r3, #0]
    f946:	4a0f      	ldr	r2, [pc, #60]	; (f984 <fun_builtin_1_call+0x5c>)
    f948:	4293      	cmp	r3, r2
    f94a:	d005      	beq.n	f958 <fun_builtin_1_call+0x30>
    f94c:	4b0e      	ldr	r3, [pc, #56]	; (f988 <fun_builtin_1_call+0x60>)
    f94e:	4a0f      	ldr	r2, [pc, #60]	; (f98c <fun_builtin_1_call+0x64>)
    f950:	2143      	movs	r1, #67	; 0x43
    f952:	480f      	ldr	r0, [pc, #60]	; (f990 <fun_builtin_1_call+0x68>)
    f954:	f00b fc32 	bl	1b1bc <__assert_func>
    mp_obj_fun_builtin_fixed_t *self = MP_OBJ_TO_PTR(self_in);
    f958:	68fb      	ldr	r3, [r7, #12]
    f95a:	617b      	str	r3, [r7, #20]
    mp_arg_check_num(n_args, n_kw, 1, 1, false);
    f95c:	2300      	movs	r3, #0
    f95e:	9300      	str	r3, [sp, #0]
    f960:	2301      	movs	r3, #1
    f962:	2201      	movs	r2, #1
    f964:	6879      	ldr	r1, [r7, #4]
    f966:	68b8      	ldr	r0, [r7, #8]
    f968:	f7fd fb02 	bl	cf70 <mp_arg_check_num>
    return self->fun._1(args[0]);
    f96c:	697b      	ldr	r3, [r7, #20]
    f96e:	685b      	ldr	r3, [r3, #4]
    f970:	683a      	ldr	r2, [r7, #0]
    f972:	6812      	ldr	r2, [r2, #0]
    f974:	4610      	mov	r0, r2
    f976:	4798      	blx	r3
    f978:	4603      	mov	r3, r0
}
    f97a:	4618      	mov	r0, r3
    f97c:	3718      	adds	r7, #24
    f97e:	46bd      	mov	sp, r7
    f980:	bd80      	pop	{r7, pc}
    f982:	bf00      	nop
    f984:	00020728 	.word	0x00020728
    f988:	000206f8 	.word	0x000206f8
    f98c:	00020954 	.word	0x00020954
    f990:	000206a8 	.word	0x000206a8

0000f994 <fun_builtin_2_call>:
    .name = MP_QSTR_function,
    .call = fun_builtin_1_call,
    .unary_op = mp_generic_unary_op,
};

STATIC mp_obj_t fun_builtin_2_call(mp_obj_t self_in, size_t n_args, size_t n_kw, const mp_obj_t *args) {
    f994:	b580      	push	{r7, lr}
    f996:	b088      	sub	sp, #32
    f998:	af02      	add	r7, sp, #8
    f99a:	60f8      	str	r0, [r7, #12]
    f99c:	60b9      	str	r1, [r7, #8]
    f99e:	607a      	str	r2, [r7, #4]
    f9a0:	603b      	str	r3, [r7, #0]
    assert(MP_OBJ_IS_TYPE(self_in, &mp_type_fun_builtin_2));
    f9a2:	68f8      	ldr	r0, [r7, #12]
    f9a4:	f7ff ff60 	bl	f868 <MP_OBJ_IS_OBJ>
    f9a8:	4603      	mov	r3, r0
    f9aa:	2b00      	cmp	r3, #0
    f9ac:	d004      	beq.n	f9b8 <fun_builtin_2_call+0x24>
    f9ae:	68fb      	ldr	r3, [r7, #12]
    f9b0:	681b      	ldr	r3, [r3, #0]
    f9b2:	4a10      	ldr	r2, [pc, #64]	; (f9f4 <fun_builtin_2_call+0x60>)
    f9b4:	4293      	cmp	r3, r2
    f9b6:	d005      	beq.n	f9c4 <fun_builtin_2_call+0x30>
    f9b8:	4b0f      	ldr	r3, [pc, #60]	; (f9f8 <fun_builtin_2_call+0x64>)
    f9ba:	4a10      	ldr	r2, [pc, #64]	; (f9fc <fun_builtin_2_call+0x68>)
    f9bc:	2151      	movs	r1, #81	; 0x51
    f9be:	4810      	ldr	r0, [pc, #64]	; (fa00 <fun_builtin_2_call+0x6c>)
    f9c0:	f00b fbfc 	bl	1b1bc <__assert_func>
    mp_obj_fun_builtin_fixed_t *self = MP_OBJ_TO_PTR(self_in);
    f9c4:	68fb      	ldr	r3, [r7, #12]
    f9c6:	617b      	str	r3, [r7, #20]
    mp_arg_check_num(n_args, n_kw, 2, 2, false);
    f9c8:	2300      	movs	r3, #0
    f9ca:	9300      	str	r3, [sp, #0]
    f9cc:	2302      	movs	r3, #2
    f9ce:	2202      	movs	r2, #2
    f9d0:	6879      	ldr	r1, [r7, #4]
    f9d2:	68b8      	ldr	r0, [r7, #8]
    f9d4:	f7fd facc 	bl	cf70 <mp_arg_check_num>
    return self->fun._2(args[0], args[1]);
    f9d8:	697b      	ldr	r3, [r7, #20]
    f9da:	685b      	ldr	r3, [r3, #4]
    f9dc:	683a      	ldr	r2, [r7, #0]
    f9de:	6810      	ldr	r0, [r2, #0]
    f9e0:	683a      	ldr	r2, [r7, #0]
    f9e2:	3204      	adds	r2, #4
    f9e4:	6812      	ldr	r2, [r2, #0]
    f9e6:	4611      	mov	r1, r2
    f9e8:	4798      	blx	r3
    f9ea:	4603      	mov	r3, r0
}
    f9ec:	4618      	mov	r0, r3
    f9ee:	3718      	adds	r7, #24
    f9f0:	46bd      	mov	sp, r7
    f9f2:	bd80      	pop	{r7, pc}
    f9f4:	00020794 	.word	0x00020794
    f9f8:	00020764 	.word	0x00020764
    f9fc:	00020968 	.word	0x00020968
    fa00:	000206a8 	.word	0x000206a8

0000fa04 <fun_builtin_3_call>:
    .name = MP_QSTR_function,
    .call = fun_builtin_2_call,
    .unary_op = mp_generic_unary_op,
};

STATIC mp_obj_t fun_builtin_3_call(mp_obj_t self_in, size_t n_args, size_t n_kw, const mp_obj_t *args) {
    fa04:	b580      	push	{r7, lr}
    fa06:	b088      	sub	sp, #32
    fa08:	af02      	add	r7, sp, #8
    fa0a:	60f8      	str	r0, [r7, #12]
    fa0c:	60b9      	str	r1, [r7, #8]
    fa0e:	607a      	str	r2, [r7, #4]
    fa10:	603b      	str	r3, [r7, #0]
    assert(MP_OBJ_IS_TYPE(self_in, &mp_type_fun_builtin_3));
    fa12:	68f8      	ldr	r0, [r7, #12]
    fa14:	f7ff ff28 	bl	f868 <MP_OBJ_IS_OBJ>
    fa18:	4603      	mov	r3, r0
    fa1a:	2b00      	cmp	r3, #0
    fa1c:	d004      	beq.n	fa28 <fun_builtin_3_call+0x24>
    fa1e:	68fb      	ldr	r3, [r7, #12]
    fa20:	681b      	ldr	r3, [r3, #0]
    fa22:	4a11      	ldr	r2, [pc, #68]	; (fa68 <fun_builtin_3_call+0x64>)
    fa24:	4293      	cmp	r3, r2
    fa26:	d005      	beq.n	fa34 <fun_builtin_3_call+0x30>
    fa28:	4b10      	ldr	r3, [pc, #64]	; (fa6c <fun_builtin_3_call+0x68>)
    fa2a:	4a11      	ldr	r2, [pc, #68]	; (fa70 <fun_builtin_3_call+0x6c>)
    fa2c:	215f      	movs	r1, #95	; 0x5f
    fa2e:	4811      	ldr	r0, [pc, #68]	; (fa74 <fun_builtin_3_call+0x70>)
    fa30:	f00b fbc4 	bl	1b1bc <__assert_func>
    mp_obj_fun_builtin_fixed_t *self = MP_OBJ_TO_PTR(self_in);
    fa34:	68fb      	ldr	r3, [r7, #12]
    fa36:	617b      	str	r3, [r7, #20]
    mp_arg_check_num(n_args, n_kw, 3, 3, false);
    fa38:	2300      	movs	r3, #0
    fa3a:	9300      	str	r3, [sp, #0]
    fa3c:	2303      	movs	r3, #3
    fa3e:	2203      	movs	r2, #3
    fa40:	6879      	ldr	r1, [r7, #4]
    fa42:	68b8      	ldr	r0, [r7, #8]
    fa44:	f7fd fa94 	bl	cf70 <mp_arg_check_num>
    return self->fun._3(args[0], args[1], args[2]);
    fa48:	697b      	ldr	r3, [r7, #20]
    fa4a:	685b      	ldr	r3, [r3, #4]
    fa4c:	683a      	ldr	r2, [r7, #0]
    fa4e:	6810      	ldr	r0, [r2, #0]
    fa50:	683a      	ldr	r2, [r7, #0]
    fa52:	3204      	adds	r2, #4
    fa54:	6811      	ldr	r1, [r2, #0]
    fa56:	683a      	ldr	r2, [r7, #0]
    fa58:	3208      	adds	r2, #8
    fa5a:	6812      	ldr	r2, [r2, #0]
    fa5c:	4798      	blx	r3
    fa5e:	4603      	mov	r3, r0
}
    fa60:	4618      	mov	r0, r3
    fa62:	3718      	adds	r7, #24
    fa64:	46bd      	mov	sp, r7
    fa66:	bd80      	pop	{r7, pc}
    fa68:	00020800 	.word	0x00020800
    fa6c:	000207d0 	.word	0x000207d0
    fa70:	0002097c 	.word	0x0002097c
    fa74:	000206a8 	.word	0x000206a8

0000fa78 <fun_builtin_var_call>:
    .name = MP_QSTR_function,
    .call = fun_builtin_3_call,
    .unary_op = mp_generic_unary_op,
};

STATIC mp_obj_t fun_builtin_var_call(mp_obj_t self_in, size_t n_args, size_t n_kw, const mp_obj_t *args) {
    fa78:	b580      	push	{r7, lr}
    fa7a:	b08a      	sub	sp, #40	; 0x28
    fa7c:	af02      	add	r7, sp, #8
    fa7e:	60f8      	str	r0, [r7, #12]
    fa80:	60b9      	str	r1, [r7, #8]
    fa82:	607a      	str	r2, [r7, #4]
    fa84:	603b      	str	r3, [r7, #0]
    assert(MP_OBJ_IS_TYPE(self_in, &mp_type_fun_builtin_var));
    fa86:	68f8      	ldr	r0, [r7, #12]
    fa88:	f7ff feee 	bl	f868 <MP_OBJ_IS_OBJ>
    fa8c:	4603      	mov	r3, r0
    fa8e:	2b00      	cmp	r3, #0
    fa90:	d004      	beq.n	fa9c <fun_builtin_var_call+0x24>
    fa92:	68fb      	ldr	r3, [r7, #12]
    fa94:	681b      	ldr	r3, [r3, #0]
    fa96:	4a21      	ldr	r2, [pc, #132]	; (fb1c <fun_builtin_var_call+0xa4>)
    fa98:	4293      	cmp	r3, r2
    fa9a:	d005      	beq.n	faa8 <fun_builtin_var_call+0x30>
    fa9c:	4b20      	ldr	r3, [pc, #128]	; (fb20 <fun_builtin_var_call+0xa8>)
    fa9e:	4a21      	ldr	r2, [pc, #132]	; (fb24 <fun_builtin_var_call+0xac>)
    faa0:	216d      	movs	r1, #109	; 0x6d
    faa2:	4821      	ldr	r0, [pc, #132]	; (fb28 <fun_builtin_var_call+0xb0>)
    faa4:	f00b fb8a 	bl	1b1bc <__assert_func>
    mp_obj_fun_builtin_var_t *self = MP_OBJ_TO_PTR(self_in);
    faa8:	68fb      	ldr	r3, [r7, #12]
    faaa:	61fb      	str	r3, [r7, #28]

    // check number of arguments
    mp_arg_check_num(n_args, n_kw, self->n_args_min, self->n_args_max, self->is_kw);
    faac:	69fb      	ldr	r3, [r7, #28]
    faae:	889b      	ldrh	r3, [r3, #4]
    fab0:	f3c3 034e 	ubfx	r3, r3, #1, #15
    fab4:	b29b      	uxth	r3, r3
    fab6:	461a      	mov	r2, r3
    fab8:	69fb      	ldr	r3, [r7, #28]
    faba:	88db      	ldrh	r3, [r3, #6]
    fabc:	4619      	mov	r1, r3
    fabe:	69fb      	ldr	r3, [r7, #28]
    fac0:	791b      	ldrb	r3, [r3, #4]
    fac2:	f3c3 0300 	ubfx	r3, r3, #0, #1
    fac6:	b2db      	uxtb	r3, r3
    fac8:	9300      	str	r3, [sp, #0]
    faca:	460b      	mov	r3, r1
    facc:	6879      	ldr	r1, [r7, #4]
    face:	68b8      	ldr	r0, [r7, #8]
    fad0:	f7fd fa4e 	bl	cf70 <mp_arg_check_num>

    if (self->is_kw) {
    fad4:	69fb      	ldr	r3, [r7, #28]
    fad6:	791b      	ldrb	r3, [r3, #4]
    fad8:	f003 0301 	and.w	r3, r3, #1
    fadc:	b2db      	uxtb	r3, r3
    fade:	2b00      	cmp	r3, #0
    fae0:	d012      	beq.n	fb08 <fun_builtin_var_call+0x90>
        // function allows keywords

        // we create a map directly from the given args array
        mp_map_t kw_args;
        mp_map_init_fixed_table(&kw_args, n_kw, args + n_args);
    fae2:	68bb      	ldr	r3, [r7, #8]
    fae4:	009b      	lsls	r3, r3, #2
    fae6:	683a      	ldr	r2, [r7, #0]
    fae8:	441a      	add	r2, r3
    faea:	f107 0310 	add.w	r3, r7, #16
    faee:	6879      	ldr	r1, [r7, #4]
    faf0:	4618      	mov	r0, r3
    faf2:	f7fd fbbe 	bl	d272 <mp_map_init_fixed_table>

        return self->fun.kw(n_args, args, &kw_args);
    faf6:	69fb      	ldr	r3, [r7, #28]
    faf8:	689b      	ldr	r3, [r3, #8]
    fafa:	f107 0210 	add.w	r2, r7, #16
    fafe:	6839      	ldr	r1, [r7, #0]
    fb00:	68b8      	ldr	r0, [r7, #8]
    fb02:	4798      	blx	r3
    fb04:	4603      	mov	r3, r0
    fb06:	e005      	b.n	fb14 <fun_builtin_var_call+0x9c>

    } else {
        // function takes a variable number of arguments, but no keywords

        return self->fun.var(n_args, args);
    fb08:	69fb      	ldr	r3, [r7, #28]
    fb0a:	689b      	ldr	r3, [r3, #8]
    fb0c:	6839      	ldr	r1, [r7, #0]
    fb0e:	68b8      	ldr	r0, [r7, #8]
    fb10:	4798      	blx	r3
    fb12:	4603      	mov	r3, r0
    }
}
    fb14:	4618      	mov	r0, r3
    fb16:	3720      	adds	r7, #32
    fb18:	46bd      	mov	sp, r7
    fb1a:	bd80      	pop	{r7, pc}
    fb1c:	00020870 	.word	0x00020870
    fb20:	0002083c 	.word	0x0002083c
    fb24:	00020990 	.word	0x00020990
    fb28:	000206a8 	.word	0x000206a8

0000fb2c <mp_obj_code_get_name>:
};

/******************************************************************************/
/* byte code functions                                                        */

qstr mp_obj_code_get_name(const byte *code_info) {
    fb2c:	b580      	push	{r7, lr}
    fb2e:	b082      	sub	sp, #8
    fb30:	af00      	add	r7, sp, #0
    fb32:	6078      	str	r0, [r7, #4]
    code_info = mp_decode_uint_skip(code_info); // skip code_info_size entry
    fb34:	6878      	ldr	r0, [r7, #4]
    fb36:	f00a fc25 	bl	1a384 <mp_decode_uint_skip>
    fb3a:	6078      	str	r0, [r7, #4]
    #if MICROPY_PERSISTENT_CODE
    return code_info[0] | (code_info[1] << 8);
    fb3c:	687b      	ldr	r3, [r7, #4]
    fb3e:	781b      	ldrb	r3, [r3, #0]
    fb40:	461a      	mov	r2, r3
    fb42:	687b      	ldr	r3, [r7, #4]
    fb44:	3301      	adds	r3, #1
    fb46:	781b      	ldrb	r3, [r3, #0]
    fb48:	021b      	lsls	r3, r3, #8
    fb4a:	4313      	orrs	r3, r2
    #else
    return mp_decode_uint_value(code_info);
    #endif
}
    fb4c:	4618      	mov	r0, r3
    fb4e:	3708      	adds	r7, #8
    fb50:	46bd      	mov	sp, r7
    fb52:	bd80      	pop	{r7, pc}

0000fb54 <mp_obj_fun_get_name>:

#if MICROPY_EMIT_NATIVE
STATIC const mp_obj_type_t mp_type_fun_native;
#endif

qstr mp_obj_fun_get_name(mp_const_obj_t fun_in) {
    fb54:	b580      	push	{r7, lr}
    fb56:	b084      	sub	sp, #16
    fb58:	af00      	add	r7, sp, #0
    fb5a:	6078      	str	r0, [r7, #4]
    const mp_obj_fun_bc_t *fun = MP_OBJ_TO_PTR(fun_in);
    fb5c:	687b      	ldr	r3, [r7, #4]
    fb5e:	60fb      	str	r3, [r7, #12]
        // TODO native functions don't have name stored
        return MP_QSTR_;
    }
    #endif

    const byte *bc = fun->bytecode;
    fb60:	68fb      	ldr	r3, [r7, #12]
    fb62:	689b      	ldr	r3, [r3, #8]
    fb64:	60bb      	str	r3, [r7, #8]
    bc = mp_decode_uint_skip(bc); // skip n_state
    fb66:	68b8      	ldr	r0, [r7, #8]
    fb68:	f00a fc0c 	bl	1a384 <mp_decode_uint_skip>
    fb6c:	60b8      	str	r0, [r7, #8]
    bc = mp_decode_uint_skip(bc); // skip n_exc_stack
    fb6e:	68b8      	ldr	r0, [r7, #8]
    fb70:	f00a fc08 	bl	1a384 <mp_decode_uint_skip>
    fb74:	60b8      	str	r0, [r7, #8]
    bc++; // skip scope_params
    fb76:	68bb      	ldr	r3, [r7, #8]
    fb78:	3301      	adds	r3, #1
    fb7a:	60bb      	str	r3, [r7, #8]
    bc++; // skip n_pos_args
    fb7c:	68bb      	ldr	r3, [r7, #8]
    fb7e:	3301      	adds	r3, #1
    fb80:	60bb      	str	r3, [r7, #8]
    bc++; // skip n_kwonly_args
    fb82:	68bb      	ldr	r3, [r7, #8]
    fb84:	3301      	adds	r3, #1
    fb86:	60bb      	str	r3, [r7, #8]
    bc++; // skip n_def_pos_args
    fb88:	68bb      	ldr	r3, [r7, #8]
    fb8a:	3301      	adds	r3, #1
    fb8c:	60bb      	str	r3, [r7, #8]
    return mp_obj_code_get_name(bc);
    fb8e:	68b8      	ldr	r0, [r7, #8]
    fb90:	f7ff ffcc 	bl	fb2c <mp_obj_code_get_name>
    fb94:	4603      	mov	r3, r0
}
    fb96:	4618      	mov	r0, r3
    fb98:	3710      	adds	r7, #16
    fb9a:	46bd      	mov	sp, r7
    fb9c:	bd80      	pop	{r7, pc}

0000fb9e <fun_bc_call>:

    return code_state;
}
#endif

STATIC mp_obj_t fun_bc_call(mp_obj_t self_in, size_t n_args, size_t n_kw, const mp_obj_t *args) {
    fb9e:	b580      	push	{r7, lr}
    fba0:	b08c      	sub	sp, #48	; 0x30
    fba2:	af00      	add	r7, sp, #0
    fba4:	60f8      	str	r0, [r7, #12]
    fba6:	60b9      	str	r1, [r7, #8]
    fba8:	607a      	str	r2, [r7, #4]
    fbaa:	603b      	str	r3, [r7, #0]
    DEBUG_printf("Input n_args: " UINT_FMT ", n_kw: " UINT_FMT "\n", n_args, n_kw);
    DEBUG_printf("Input pos args: ");
    dump_args(args, n_args);
    DEBUG_printf("Input kw args: ");
    dump_args(args + n_args, n_kw * 2);
    mp_obj_fun_bc_t *self = MP_OBJ_TO_PTR(self_in);
    fbac:	68fb      	ldr	r3, [r7, #12]
    fbae:	623b      	str	r3, [r7, #32]
    DEBUG_printf("Func n_def_args: %d\n", self->n_def_args);

    size_t n_state, state_size;
    DECODE_CODESTATE_SIZE(self->bytecode, n_state, state_size);
    fbb0:	6a3b      	ldr	r3, [r7, #32]
    fbb2:	689b      	ldr	r3, [r3, #8]
    fbb4:	4618      	mov	r0, r3
    fbb6:	f00a fbd8 	bl	1a36a <mp_decode_uint_value>
    fbba:	61f8      	str	r0, [r7, #28]
    fbbc:	6a3b      	ldr	r3, [r7, #32]
    fbbe:	689b      	ldr	r3, [r3, #8]
    fbc0:	4618      	mov	r0, r3
    fbc2:	f00a fbdf 	bl	1a384 <mp_decode_uint_skip>
    fbc6:	4603      	mov	r3, r0
    fbc8:	4618      	mov	r0, r3
    fbca:	f00a fbce 	bl	1a36a <mp_decode_uint_value>
    fbce:	61b8      	str	r0, [r7, #24]
    fbd0:	69ba      	ldr	r2, [r7, #24]
    fbd2:	4613      	mov	r3, r2
    fbd4:	005b      	lsls	r3, r3, #1
    fbd6:	441a      	add	r2, r3
    fbd8:	69fb      	ldr	r3, [r7, #28]
    fbda:	4413      	add	r3, r2
    fbdc:	009b      	lsls	r3, r3, #2
    fbde:	62fb      	str	r3, [r7, #44]	; 0x2c

    // allocate state for locals and stack
    mp_code_state_t *code_state = NULL;
    fbe0:	2300      	movs	r3, #0
    fbe2:	62bb      	str	r3, [r7, #40]	; 0x28
    #if MICROPY_ENABLE_PYSTACK
    code_state = mp_pystack_alloc(sizeof(mp_code_state_t) + state_size);
    #else
    if (state_size > VM_MAX_STATE_ON_STACK) {
    fbe4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    fbe6:	2b2c      	cmp	r3, #44	; 0x2c
    fbe8:	d905      	bls.n	fbf6 <fun_bc_call+0x58>
        code_state = m_new_obj_var_maybe(mp_code_state_t, byte, state_size);
    fbea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    fbec:	3314      	adds	r3, #20
    fbee:	4618      	mov	r0, r3
    fbf0:	f7f0 fbab 	bl	34a <m_malloc_maybe>
    fbf4:	62b8      	str	r0, [r7, #40]	; 0x28
    }
    if (code_state == NULL) {
    fbf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
    fbf8:	2b00      	cmp	r3, #0
    fbfa:	d10e      	bne.n	fc1a <fun_bc_call+0x7c>
        code_state = alloca(sizeof(mp_code_state_t) + state_size);
    fbfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    fbfe:	3314      	adds	r3, #20
    fc00:	3307      	adds	r3, #7
    fc02:	3307      	adds	r3, #7
    fc04:	08db      	lsrs	r3, r3, #3
    fc06:	00db      	lsls	r3, r3, #3
    fc08:	ebad 0d03 	sub.w	sp, sp, r3
    fc0c:	466b      	mov	r3, sp
    fc0e:	3307      	adds	r3, #7
    fc10:	08db      	lsrs	r3, r3, #3
    fc12:	00db      	lsls	r3, r3, #3
    fc14:	62bb      	str	r3, [r7, #40]	; 0x28
        state_size = 0; // indicate that we allocated using alloca
    fc16:	2300      	movs	r3, #0
    fc18:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    #endif

    INIT_CODESTATE(code_state, self, n_args, n_kw, args);
    fc1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    fc1c:	6a3a      	ldr	r2, [r7, #32]
    fc1e:	601a      	str	r2, [r3, #0]
    fc20:	6abb      	ldr	r3, [r7, #40]	; 0x28
    fc22:	2200      	movs	r2, #0
    fc24:	605a      	str	r2, [r3, #4]
    fc26:	683b      	ldr	r3, [r7, #0]
    fc28:	687a      	ldr	r2, [r7, #4]
    fc2a:	68b9      	ldr	r1, [r7, #8]
    fc2c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    fc2e:	f00a fbc4 	bl	1a3ba <mp_setup_code_state>
    fc32:	f7ff fe2b 	bl	f88c <mp_globals_get>
    fc36:	4602      	mov	r2, r0
    fc38:	6abb      	ldr	r3, [r7, #40]	; 0x28
    fc3a:	611a      	str	r2, [r3, #16]

    // execute the byte code with the correct globals context
    mp_globals_set(self->globals);
    fc3c:	6a3b      	ldr	r3, [r7, #32]
    fc3e:	685b      	ldr	r3, [r3, #4]
    fc40:	4618      	mov	r0, r3
    fc42:	f7ff fe2f 	bl	f8a4 <mp_globals_set>
    mp_vm_return_kind_t vm_return_kind = mp_execute_bytecode(code_state, MP_OBJ_NULL);
    fc46:	2100      	movs	r1, #0
    fc48:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    fc4a:	f009 fbdf 	bl	1940c <mp_execute_bytecode>
    fc4e:	6178      	str	r0, [r7, #20]
    mp_globals_set(code_state->old_globals);
    fc50:	6abb      	ldr	r3, [r7, #40]	; 0x28
    fc52:	691b      	ldr	r3, [r3, #16]
    fc54:	4618      	mov	r0, r3
    fc56:	f7ff fe25 	bl	f8a4 <mp_globals_set>
        }
    }
#endif

    mp_obj_t result;
    if (vm_return_kind == MP_VM_RETURN_NORMAL) {
    fc5a:	697b      	ldr	r3, [r7, #20]
    fc5c:	2b00      	cmp	r3, #0
    fc5e:	d104      	bne.n	fc6a <fun_bc_call+0xcc>
        // return value is in *sp
        result = *code_state->sp;
    fc60:	6abb      	ldr	r3, [r7, #40]	; 0x28
    fc62:	689b      	ldr	r3, [r3, #8]
    fc64:	681b      	ldr	r3, [r3, #0]
    fc66:	627b      	str	r3, [r7, #36]	; 0x24
    fc68:	e011      	b.n	fc8e <fun_bc_call+0xf0>
    } else {
        // must be an exception because normal functions can't yield
        assert(vm_return_kind == MP_VM_RETURN_EXCEPTION);
    fc6a:	697b      	ldr	r3, [r7, #20]
    fc6c:	2b02      	cmp	r3, #2
    fc6e:	d006      	beq.n	fc7e <fun_bc_call+0xe0>
    fc70:	4b10      	ldr	r3, [pc, #64]	; (fcb4 <fun_bc_call+0x116>)
    fc72:	4a11      	ldr	r2, [pc, #68]	; (fcb8 <fun_bc_call+0x11a>)
    fc74:	f240 113f 	movw	r1, #319	; 0x13f
    fc78:	4810      	ldr	r0, [pc, #64]	; (fcbc <fun_bc_call+0x11e>)
    fc7a:	f00b fa9f 	bl	1b1bc <__assert_func>
        // return value is in fastn[0]==state[n_state - 1]
        result = code_state->state[n_state - 1];
    fc7e:	69fb      	ldr	r3, [r7, #28]
    fc80:	3b01      	subs	r3, #1
    fc82:	6aba      	ldr	r2, [r7, #40]	; 0x28
    fc84:	3304      	adds	r3, #4
    fc86:	009b      	lsls	r3, r3, #2
    fc88:	4413      	add	r3, r2
    fc8a:	685b      	ldr	r3, [r3, #4]
    fc8c:	627b      	str	r3, [r7, #36]	; 0x24

    #if MICROPY_ENABLE_PYSTACK
    mp_pystack_free(code_state);
    #else
    // free the state if it was allocated on the heap
    if (state_size != 0) {
    fc8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    fc90:	2b00      	cmp	r3, #0
    fc92:	d002      	beq.n	fc9a <fun_bc_call+0xfc>
        m_del_var(mp_code_state_t, byte, state_size, code_state);
    fc94:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    fc96:	f7f0 fb9f 	bl	3d8 <m_free>
    }
    #endif

    if (vm_return_kind == MP_VM_RETURN_NORMAL) {
    fc9a:	697b      	ldr	r3, [r7, #20]
    fc9c:	2b00      	cmp	r3, #0
    fc9e:	d101      	bne.n	fca4 <fun_bc_call+0x106>
        return result;
    fca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    fca2:	e002      	b.n	fcaa <fun_bc_call+0x10c>
    } else { // MP_VM_RETURN_EXCEPTION
        nlr_raise(result);
    fca4:	6a78      	ldr	r0, [r7, #36]	; 0x24
    fca6:	f7f0 fb1b 	bl	2e0 <nlr_jump>
    }
}
    fcaa:	4618      	mov	r0, r3
    fcac:	3730      	adds	r7, #48	; 0x30
    fcae:	46bd      	mov	sp, r7
    fcb0:	bd80      	pop	{r7, pc}
    fcb2:	bf00      	nop
    fcb4:	000208ac 	.word	0x000208ac
    fcb8:	000209a8 	.word	0x000209a8
    fcbc:	000206a8 	.word	0x000206a8

0000fcc0 <mp_obj_new_fun_bc>:
#if MICROPY_PY_FUNCTION_ATTRS
    .attr = fun_bc_attr,
#endif
};

mp_obj_t mp_obj_new_fun_bc(mp_obj_t def_args_in, mp_obj_t def_kw_args, const byte *code, const mp_uint_t *const_table) {
    fcc0:	b580      	push	{r7, lr}
    fcc2:	b088      	sub	sp, #32
    fcc4:	af00      	add	r7, sp, #0
    fcc6:	60f8      	str	r0, [r7, #12]
    fcc8:	60b9      	str	r1, [r7, #8]
    fcca:	607a      	str	r2, [r7, #4]
    fccc:	603b      	str	r3, [r7, #0]
    size_t n_def_args = 0;
    fcce:	2300      	movs	r3, #0
    fcd0:	61fb      	str	r3, [r7, #28]
    size_t n_extra_args = 0;
    fcd2:	2300      	movs	r3, #0
    fcd4:	61bb      	str	r3, [r7, #24]
    mp_obj_tuple_t *def_args = MP_OBJ_TO_PTR(def_args_in);
    fcd6:	68fb      	ldr	r3, [r7, #12]
    fcd8:	617b      	str	r3, [r7, #20]
    if (def_args_in != MP_OBJ_NULL) {
    fcda:	68fb      	ldr	r3, [r7, #12]
    fcdc:	2b00      	cmp	r3, #0
    fcde:	d017      	beq.n	fd10 <mp_obj_new_fun_bc+0x50>
        assert(MP_OBJ_IS_TYPE(def_args_in, &mp_type_tuple));
    fce0:	68f8      	ldr	r0, [r7, #12]
    fce2:	f7ff fdc1 	bl	f868 <MP_OBJ_IS_OBJ>
    fce6:	4603      	mov	r3, r0
    fce8:	2b00      	cmp	r3, #0
    fcea:	d004      	beq.n	fcf6 <mp_obj_new_fun_bc+0x36>
    fcec:	68fb      	ldr	r3, [r7, #12]
    fcee:	681b      	ldr	r3, [r3, #0]
    fcf0:	4a23      	ldr	r2, [pc, #140]	; (fd80 <mp_obj_new_fun_bc+0xc0>)
    fcf2:	4293      	cmp	r3, r2
    fcf4:	d006      	beq.n	fd04 <mp_obj_new_fun_bc+0x44>
    fcf6:	4b23      	ldr	r3, [pc, #140]	; (fd84 <mp_obj_new_fun_bc+0xc4>)
    fcf8:	4a23      	ldr	r2, [pc, #140]	; (fd88 <mp_obj_new_fun_bc+0xc8>)
    fcfa:	f44f 71b9 	mov.w	r1, #370	; 0x172
    fcfe:	4823      	ldr	r0, [pc, #140]	; (fd8c <mp_obj_new_fun_bc+0xcc>)
    fd00:	f00b fa5c 	bl	1b1bc <__assert_func>
        n_def_args = def_args->len;
    fd04:	697b      	ldr	r3, [r7, #20]
    fd06:	685b      	ldr	r3, [r3, #4]
    fd08:	61fb      	str	r3, [r7, #28]
        n_extra_args = def_args->len;
    fd0a:	697b      	ldr	r3, [r7, #20]
    fd0c:	685b      	ldr	r3, [r3, #4]
    fd0e:	61bb      	str	r3, [r7, #24]
    }
    if (def_kw_args != MP_OBJ_NULL) {
    fd10:	68bb      	ldr	r3, [r7, #8]
    fd12:	2b00      	cmp	r3, #0
    fd14:	d002      	beq.n	fd1c <mp_obj_new_fun_bc+0x5c>
        n_extra_args += 1;
    fd16:	69bb      	ldr	r3, [r7, #24]
    fd18:	3301      	adds	r3, #1
    fd1a:	61bb      	str	r3, [r7, #24]
    }
    mp_obj_fun_bc_t *o = m_new_obj_var(mp_obj_fun_bc_t, mp_obj_t, n_extra_args);
    fd1c:	69bb      	ldr	r3, [r7, #24]
    fd1e:	3304      	adds	r3, #4
    fd20:	009b      	lsls	r3, r3, #2
    fd22:	4618      	mov	r0, r3
    fd24:	f7f0 fafa 	bl	31c <m_malloc>
    fd28:	6138      	str	r0, [r7, #16]
    o->base.type = &mp_type_fun_bc;
    fd2a:	693b      	ldr	r3, [r7, #16]
    fd2c:	4a18      	ldr	r2, [pc, #96]	; (fd90 <mp_obj_new_fun_bc+0xd0>)
    fd2e:	601a      	str	r2, [r3, #0]
    o->globals = mp_globals_get();
    fd30:	f7ff fdac 	bl	f88c <mp_globals_get>
    fd34:	4602      	mov	r2, r0
    fd36:	693b      	ldr	r3, [r7, #16]
    fd38:	605a      	str	r2, [r3, #4]
    o->bytecode = code;
    fd3a:	693b      	ldr	r3, [r7, #16]
    fd3c:	687a      	ldr	r2, [r7, #4]
    fd3e:	609a      	str	r2, [r3, #8]
    o->const_table = const_table;
    fd40:	693b      	ldr	r3, [r7, #16]
    fd42:	683a      	ldr	r2, [r7, #0]
    fd44:	60da      	str	r2, [r3, #12]
    if (def_args != NULL) {
    fd46:	697b      	ldr	r3, [r7, #20]
    fd48:	2b00      	cmp	r3, #0
    fd4a:	d00a      	beq.n	fd62 <mp_obj_new_fun_bc+0xa2>
        memcpy(o->extra_args, def_args->items, n_def_args * sizeof(mp_obj_t));
    fd4c:	693b      	ldr	r3, [r7, #16]
    fd4e:	f103 0010 	add.w	r0, r3, #16
    fd52:	697b      	ldr	r3, [r7, #20]
    fd54:	f103 0108 	add.w	r1, r3, #8
    fd58:	69fb      	ldr	r3, [r7, #28]
    fd5a:	009b      	lsls	r3, r3, #2
    fd5c:	461a      	mov	r2, r3
    fd5e:	f00b fe31 	bl	1b9c4 <memcpy>
    }
    if (def_kw_args != MP_OBJ_NULL) {
    fd62:	68bb      	ldr	r3, [r7, #8]
    fd64:	2b00      	cmp	r3, #0
    fd66:	d005      	beq.n	fd74 <mp_obj_new_fun_bc+0xb4>
        o->extra_args[n_def_args] = def_kw_args;
    fd68:	693b      	ldr	r3, [r7, #16]
    fd6a:	69fa      	ldr	r2, [r7, #28]
    fd6c:	3204      	adds	r2, #4
    fd6e:	68b9      	ldr	r1, [r7, #8]
    fd70:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    }
    return MP_OBJ_FROM_PTR(o);
    fd74:	693b      	ldr	r3, [r7, #16]
}
    fd76:	4618      	mov	r0, r3
    fd78:	3720      	adds	r7, #32
    fd7a:	46bd      	mov	sp, r7
    fd7c:	bd80      	pop	{r7, pc}
    fd7e:	bf00      	nop
    fd80:	00021be8 	.word	0x00021be8
    fd84:	00020914 	.word	0x00020914
    fd88:	000209b4 	.word	0x000209b4
    fd8c:	000206a8 	.word	0x000206a8
    fd90:	000208d8 	.word	0x000208d8

0000fd94 <MP_OBJ_IS_OBJ>:
    fd94:	b480      	push	{r7}
    fd96:	b083      	sub	sp, #12
    fd98:	af00      	add	r7, sp, #0
    fd9a:	6078      	str	r0, [r7, #4]
    fd9c:	687b      	ldr	r3, [r7, #4]
    fd9e:	f003 0303 	and.w	r3, r3, #3
    fda2:	2b00      	cmp	r3, #0
    fda4:	bf0c      	ite	eq
    fda6:	2301      	moveq	r3, #1
    fda8:	2300      	movne	r3, #0
    fdaa:	b2db      	uxtb	r3, r3
    fdac:	4618      	mov	r0, r3
    fdae:	370c      	adds	r7, #12
    fdb0:	46bd      	mov	sp, r7
    fdb2:	f85d 7b04 	ldr.w	r7, [sp], #4
    fdb6:	4770      	bx	lr

0000fdb8 <mp_globals_get>:
static inline mp_obj_dict_t *mp_globals_get(void) { return MP_STATE_THREAD(dict_globals); }
    fdb8:	b480      	push	{r7}
    fdba:	af00      	add	r7, sp, #0
    fdbc:	4b03      	ldr	r3, [pc, #12]	; (fdcc <mp_globals_get+0x14>)
    fdbe:	689b      	ldr	r3, [r3, #8]
    fdc0:	4618      	mov	r0, r3
    fdc2:	46bd      	mov	sp, r7
    fdc4:	f85d 7b04 	ldr.w	r7, [sp], #4
    fdc8:	4770      	bx	lr
    fdca:	bf00      	nop
    fdcc:	20000a2c 	.word	0x20000a2c

0000fdd0 <mp_globals_set>:
static inline void mp_globals_set(mp_obj_dict_t *d) { MP_STATE_THREAD(dict_globals) = d; }
    fdd0:	b480      	push	{r7}
    fdd2:	b083      	sub	sp, #12
    fdd4:	af00      	add	r7, sp, #0
    fdd6:	6078      	str	r0, [r7, #4]
    fdd8:	4a04      	ldr	r2, [pc, #16]	; (fdec <mp_globals_set+0x1c>)
    fdda:	687b      	ldr	r3, [r7, #4]
    fddc:	6093      	str	r3, [r2, #8]
    fdde:	bf00      	nop
    fde0:	370c      	adds	r7, #12
    fde2:	46bd      	mov	sp, r7
    fde4:	f85d 7b04 	ldr.w	r7, [sp], #4
    fde8:	4770      	bx	lr
    fdea:	bf00      	nop
    fdec:	20000a2c 	.word	0x20000a2c

0000fdf0 <gen_wrap_call>:
    mp_obj_base_t base;
    mp_obj_dict_t *globals;
    mp_code_state_t code_state;
} mp_obj_gen_instance_t;

STATIC mp_obj_t gen_wrap_call(mp_obj_t self_in, size_t n_args, size_t n_kw, const mp_obj_t *args) {
    fdf0:	b580      	push	{r7, lr}
    fdf2:	b08a      	sub	sp, #40	; 0x28
    fdf4:	af00      	add	r7, sp, #0
    fdf6:	60f8      	str	r0, [r7, #12]
    fdf8:	60b9      	str	r1, [r7, #8]
    fdfa:	607a      	str	r2, [r7, #4]
    fdfc:	603b      	str	r3, [r7, #0]
    mp_obj_gen_wrap_t *self = MP_OBJ_TO_PTR(self_in);
    fdfe:	68fb      	ldr	r3, [r7, #12]
    fe00:	627b      	str	r3, [r7, #36]	; 0x24
    mp_obj_fun_bc_t *self_fun = (mp_obj_fun_bc_t*)self->fun;
    fe02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    fe04:	685b      	ldr	r3, [r3, #4]
    fe06:	623b      	str	r3, [r7, #32]
    assert(self_fun->base.type == &mp_type_fun_bc);
    fe08:	6a3b      	ldr	r3, [r7, #32]
    fe0a:	681b      	ldr	r3, [r3, #0]
    fe0c:	4a1f      	ldr	r2, [pc, #124]	; (fe8c <gen_wrap_call+0x9c>)
    fe0e:	4293      	cmp	r3, r2
    fe10:	d005      	beq.n	fe1e <gen_wrap_call+0x2e>
    fe12:	4b1f      	ldr	r3, [pc, #124]	; (fe90 <gen_wrap_call+0xa0>)
    fe14:	4a1f      	ldr	r2, [pc, #124]	; (fe94 <gen_wrap_call+0xa4>)
    fe16:	2136      	movs	r1, #54	; 0x36
    fe18:	481f      	ldr	r0, [pc, #124]	; (fe98 <gen_wrap_call+0xa8>)
    fe1a:	f00b f9cf 	bl	1b1bc <__assert_func>

    // bytecode prelude: get state size and exception stack size
    size_t n_state = mp_decode_uint_value(self_fun->bytecode);
    fe1e:	6a3b      	ldr	r3, [r7, #32]
    fe20:	689b      	ldr	r3, [r3, #8]
    fe22:	4618      	mov	r0, r3
    fe24:	f00a faa1 	bl	1a36a <mp_decode_uint_value>
    fe28:	61f8      	str	r0, [r7, #28]
    size_t n_exc_stack = mp_decode_uint_value(mp_decode_uint_skip(self_fun->bytecode));
    fe2a:	6a3b      	ldr	r3, [r7, #32]
    fe2c:	689b      	ldr	r3, [r3, #8]
    fe2e:	4618      	mov	r0, r3
    fe30:	f00a faa8 	bl	1a384 <mp_decode_uint_skip>
    fe34:	4603      	mov	r3, r0
    fe36:	4618      	mov	r0, r3
    fe38:	f00a fa97 	bl	1a36a <mp_decode_uint_value>
    fe3c:	61b8      	str	r0, [r7, #24]

    // allocate the generator object, with room for local stack and exception stack
    mp_obj_gen_instance_t *o = m_new_obj_var(mp_obj_gen_instance_t, byte,
    fe3e:	69ba      	ldr	r2, [r7, #24]
    fe40:	4613      	mov	r3, r2
    fe42:	005b      	lsls	r3, r3, #1
    fe44:	441a      	add	r2, r3
    fe46:	69fb      	ldr	r3, [r7, #28]
    fe48:	4413      	add	r3, r2
    fe4a:	3307      	adds	r3, #7
    fe4c:	009b      	lsls	r3, r3, #2
    fe4e:	4618      	mov	r0, r3
    fe50:	f7f0 fa64 	bl	31c <m_malloc>
    fe54:	6178      	str	r0, [r7, #20]
        n_state * sizeof(mp_obj_t) + n_exc_stack * sizeof(mp_exc_stack_t));
    o->base.type = &mp_type_gen_instance;
    fe56:	697b      	ldr	r3, [r7, #20]
    fe58:	4a10      	ldr	r2, [pc, #64]	; (fe9c <gen_wrap_call+0xac>)
    fe5a:	601a      	str	r2, [r3, #0]

    o->globals = self_fun->globals;
    fe5c:	6a3b      	ldr	r3, [r7, #32]
    fe5e:	685a      	ldr	r2, [r3, #4]
    fe60:	697b      	ldr	r3, [r7, #20]
    fe62:	605a      	str	r2, [r3, #4]
    o->code_state.fun_bc = self_fun;
    fe64:	697b      	ldr	r3, [r7, #20]
    fe66:	6a3a      	ldr	r2, [r7, #32]
    fe68:	609a      	str	r2, [r3, #8]
    o->code_state.ip = 0;
    fe6a:	697b      	ldr	r3, [r7, #20]
    fe6c:	2200      	movs	r2, #0
    fe6e:	60da      	str	r2, [r3, #12]
    mp_setup_code_state(&o->code_state, n_args, n_kw, args);
    fe70:	697b      	ldr	r3, [r7, #20]
    fe72:	f103 0008 	add.w	r0, r3, #8
    fe76:	683b      	ldr	r3, [r7, #0]
    fe78:	687a      	ldr	r2, [r7, #4]
    fe7a:	68b9      	ldr	r1, [r7, #8]
    fe7c:	f00a fa9d 	bl	1a3ba <mp_setup_code_state>
    return MP_OBJ_FROM_PTR(o);
    fe80:	697b      	ldr	r3, [r7, #20]
}
    fe82:	4618      	mov	r0, r3
    fe84:	3728      	adds	r7, #40	; 0x28
    fe86:	46bd      	mov	sp, r7
    fe88:	bd80      	pop	{r7, pc}
    fe8a:	bf00      	nop
    fe8c:	000208d8 	.word	0x000208d8
    fe90:	000209c8 	.word	0x000209c8
    fe94:	00020bf8 	.word	0x00020bf8
    fe98:	000209f0 	.word	0x000209f0
    fe9c:	00020bbc 	.word	0x00020bbc

0000fea0 <mp_obj_new_gen_wrap>:
    .name = MP_QSTR_generator,
    .call = gen_wrap_call,
    .unary_op = mp_generic_unary_op,
};

mp_obj_t mp_obj_new_gen_wrap(mp_obj_t fun) {
    fea0:	b580      	push	{r7, lr}
    fea2:	b084      	sub	sp, #16
    fea4:	af00      	add	r7, sp, #0
    fea6:	6078      	str	r0, [r7, #4]
    mp_obj_gen_wrap_t *o = m_new_obj(mp_obj_gen_wrap_t);
    fea8:	2008      	movs	r0, #8
    feaa:	f7f0 fa37 	bl	31c <m_malloc>
    feae:	60f8      	str	r0, [r7, #12]
    o->base.type = &mp_type_gen_wrap;
    feb0:	68fb      	ldr	r3, [r7, #12]
    feb2:	4a05      	ldr	r2, [pc, #20]	; (fec8 <mp_obj_new_gen_wrap+0x28>)
    feb4:	601a      	str	r2, [r3, #0]
    o->fun = MP_OBJ_TO_PTR(fun);
    feb6:	68fb      	ldr	r3, [r7, #12]
    feb8:	687a      	ldr	r2, [r7, #4]
    feba:	605a      	str	r2, [r3, #4]
    return MP_OBJ_FROM_PTR(o);
    febc:	68fb      	ldr	r3, [r7, #12]
}
    febe:	4618      	mov	r0, r3
    fec0:	3710      	adds	r7, #16
    fec2:	46bd      	mov	sp, r7
    fec4:	bd80      	pop	{r7, pc}
    fec6:	bf00      	nop
    fec8:	00020a08 	.word	0x00020a08

0000fecc <gen_instance_print>:

/******************************************************************************/
/* generator instance                                                         */

STATIC void gen_instance_print(const mp_print_t *print, mp_obj_t self_in, mp_print_kind_t kind) {
    fecc:	b580      	push	{r7, lr}
    fece:	b086      	sub	sp, #24
    fed0:	af00      	add	r7, sp, #0
    fed2:	60f8      	str	r0, [r7, #12]
    fed4:	60b9      	str	r1, [r7, #8]
    fed6:	607a      	str	r2, [r7, #4]
    (void)kind;
    mp_obj_gen_instance_t *self = MP_OBJ_TO_PTR(self_in);
    fed8:	68bb      	ldr	r3, [r7, #8]
    feda:	617b      	str	r3, [r7, #20]
    mp_printf(print, "<generator object '%q' at %p>", mp_obj_fun_get_name(MP_OBJ_FROM_PTR(self->code_state.fun_bc)), self);
    fedc:	697b      	ldr	r3, [r7, #20]
    fede:	689b      	ldr	r3, [r3, #8]
    fee0:	4618      	mov	r0, r3
    fee2:	f7ff fe37 	bl	fb54 <mp_obj_fun_get_name>
    fee6:	4602      	mov	r2, r0
    fee8:	697b      	ldr	r3, [r7, #20]
    feea:	4904      	ldr	r1, [pc, #16]	; (fefc <gen_instance_print+0x30>)
    feec:	68f8      	ldr	r0, [r7, #12]
    feee:	f7f1 ffc1 	bl	1e74 <mp_printf>
}
    fef2:	bf00      	nop
    fef4:	3718      	adds	r7, #24
    fef6:	46bd      	mov	sp, r7
    fef8:	bd80      	pop	{r7, pc}
    fefa:	bf00      	nop
    fefc:	00020a44 	.word	0x00020a44

0000ff00 <mp_obj_gen_resume>:

mp_vm_return_kind_t mp_obj_gen_resume(mp_obj_t self_in, mp_obj_t send_value, mp_obj_t throw_value, mp_obj_t *ret_val) {
    ff00:	b580      	push	{r7, lr}
    ff02:	b088      	sub	sp, #32
    ff04:	af00      	add	r7, sp, #0
    ff06:	60f8      	str	r0, [r7, #12]
    ff08:	60b9      	str	r1, [r7, #8]
    ff0a:	607a      	str	r2, [r7, #4]
    ff0c:	603b      	str	r3, [r7, #0]
    MP_STACK_CHECK();
    mp_check_self(MP_OBJ_IS_TYPE(self_in, &mp_type_gen_instance));
    ff0e:	68f8      	ldr	r0, [r7, #12]
    ff10:	f7ff ff40 	bl	fd94 <MP_OBJ_IS_OBJ>
    ff14:	4603      	mov	r3, r0
    ff16:	2b00      	cmp	r3, #0
    ff18:	d004      	beq.n	ff24 <mp_obj_gen_resume+0x24>
    ff1a:	68fb      	ldr	r3, [r7, #12]
    ff1c:	681b      	ldr	r3, [r3, #0]
    ff1e:	4a45      	ldr	r2, [pc, #276]	; (10034 <mp_obj_gen_resume+0x134>)
    ff20:	4293      	cmp	r3, r2
    ff22:	d005      	beq.n	ff30 <mp_obj_gen_resume+0x30>
    ff24:	4b44      	ldr	r3, [pc, #272]	; (10038 <mp_obj_gen_resume+0x138>)
    ff26:	4a45      	ldr	r2, [pc, #276]	; (1003c <mp_obj_gen_resume+0x13c>)
    ff28:	2161      	movs	r1, #97	; 0x61
    ff2a:	4845      	ldr	r0, [pc, #276]	; (10040 <mp_obj_gen_resume+0x140>)
    ff2c:	f00b f946 	bl	1b1bc <__assert_func>
    mp_obj_gen_instance_t *self = MP_OBJ_TO_PTR(self_in);
    ff30:	68fb      	ldr	r3, [r7, #12]
    ff32:	61fb      	str	r3, [r7, #28]
    if (self->code_state.ip == 0) {
    ff34:	69fb      	ldr	r3, [r7, #28]
    ff36:	68db      	ldr	r3, [r3, #12]
    ff38:	2b00      	cmp	r3, #0
    ff3a:	d104      	bne.n	ff46 <mp_obj_gen_resume+0x46>
        // Trying to resume already stopped generator
        *ret_val = MP_OBJ_STOP_ITERATION;
    ff3c:	683b      	ldr	r3, [r7, #0]
    ff3e:	2204      	movs	r2, #4
    ff40:	601a      	str	r2, [r3, #0]
        return MP_VM_RETURN_NORMAL;
    ff42:	2300      	movs	r3, #0
    ff44:	e072      	b.n	1002c <mp_obj_gen_resume+0x12c>
    }
    if (self->code_state.sp == self->code_state.state - 1) {
    ff46:	69fb      	ldr	r3, [r7, #28]
    ff48:	691a      	ldr	r2, [r3, #16]
    ff4a:	69fb      	ldr	r3, [r7, #28]
    ff4c:	331c      	adds	r3, #28
    ff4e:	3b04      	subs	r3, #4
    ff50:	429a      	cmp	r2, r3
    ff52:	d106      	bne.n	ff62 <mp_obj_gen_resume+0x62>
        if (send_value != mp_const_none) {
    ff54:	68bb      	ldr	r3, [r7, #8]
    ff56:	4a3b      	ldr	r2, [pc, #236]	; (10044 <mp_obj_gen_resume+0x144>)
    ff58:	4293      	cmp	r3, r2
    ff5a:	d015      	beq.n	ff88 <mp_obj_gen_resume+0x88>
            mp_raise_TypeError("can't send non-None value to a just-started generator");
    ff5c:	483a      	ldr	r0, [pc, #232]	; (10048 <mp_obj_gen_resume+0x148>)
    ff5e:	f7fc ffe1 	bl	cf24 <mp_raise_TypeError>
        }
    } else {
        #if MICROPY_PY_GENERATOR_PEND_THROW
        // If exception is pending (set using .pend_throw()), process it now.
        if (*self->code_state.sp != mp_const_none) {
    ff62:	69fb      	ldr	r3, [r7, #28]
    ff64:	691b      	ldr	r3, [r3, #16]
    ff66:	681b      	ldr	r3, [r3, #0]
    ff68:	4a36      	ldr	r2, [pc, #216]	; (10044 <mp_obj_gen_resume+0x144>)
    ff6a:	4293      	cmp	r3, r2
    ff6c:	d008      	beq.n	ff80 <mp_obj_gen_resume+0x80>
            throw_value = *self->code_state.sp;
    ff6e:	69fb      	ldr	r3, [r7, #28]
    ff70:	691b      	ldr	r3, [r3, #16]
    ff72:	681b      	ldr	r3, [r3, #0]
    ff74:	607b      	str	r3, [r7, #4]
            *self->code_state.sp = MP_OBJ_NULL;
    ff76:	69fb      	ldr	r3, [r7, #28]
    ff78:	691b      	ldr	r3, [r3, #16]
    ff7a:	2200      	movs	r2, #0
    ff7c:	601a      	str	r2, [r3, #0]
    ff7e:	e003      	b.n	ff88 <mp_obj_gen_resume+0x88>
        } else
        #endif
        {
            *self->code_state.sp = send_value;
    ff80:	69fb      	ldr	r3, [r7, #28]
    ff82:	691b      	ldr	r3, [r3, #16]
    ff84:	68ba      	ldr	r2, [r7, #8]
    ff86:	601a      	str	r2, [r3, #0]
        }
    }

    // We set self->globals=NULL while executing, for a sentinel to ensure the generator
    // cannot be reentered during execution
    if (self->globals == NULL) {
    ff88:	69fb      	ldr	r3, [r7, #28]
    ff8a:	685b      	ldr	r3, [r3, #4]
    ff8c:	2b00      	cmp	r3, #0
    ff8e:	d102      	bne.n	ff96 <mp_obj_gen_resume+0x96>
        mp_raise_ValueError("generator already executing");
    ff90:	482e      	ldr	r0, [pc, #184]	; (1004c <mp_obj_gen_resume+0x14c>)
    ff92:	f7fc ffbc 	bl	cf0e <mp_raise_ValueError>
    }

    // Set up the correct globals context for the generator and execute it
    self->code_state.old_globals = mp_globals_get();
    ff96:	f7ff ff0f 	bl	fdb8 <mp_globals_get>
    ff9a:	4602      	mov	r2, r0
    ff9c:	69fb      	ldr	r3, [r7, #28]
    ff9e:	619a      	str	r2, [r3, #24]
    mp_globals_set(self->globals);
    ffa0:	69fb      	ldr	r3, [r7, #28]
    ffa2:	685b      	ldr	r3, [r3, #4]
    ffa4:	4618      	mov	r0, r3
    ffa6:	f7ff ff13 	bl	fdd0 <mp_globals_set>
    self->globals = NULL;
    ffaa:	69fb      	ldr	r3, [r7, #28]
    ffac:	2200      	movs	r2, #0
    ffae:	605a      	str	r2, [r3, #4]
    mp_vm_return_kind_t ret_kind = mp_execute_bytecode(&self->code_state, throw_value);
    ffb0:	69fb      	ldr	r3, [r7, #28]
    ffb2:	3308      	adds	r3, #8
    ffb4:	6879      	ldr	r1, [r7, #4]
    ffb6:	4618      	mov	r0, r3
    ffb8:	f009 fa28 	bl	1940c <mp_execute_bytecode>
    ffbc:	61b8      	str	r0, [r7, #24]
    self->globals = mp_globals_get();
    ffbe:	f7ff fefb 	bl	fdb8 <mp_globals_get>
    ffc2:	4602      	mov	r2, r0
    ffc4:	69fb      	ldr	r3, [r7, #28]
    ffc6:	605a      	str	r2, [r3, #4]
    mp_globals_set(self->code_state.old_globals);
    ffc8:	69fb      	ldr	r3, [r7, #28]
    ffca:	699b      	ldr	r3, [r3, #24]
    ffcc:	4618      	mov	r0, r3
    ffce:	f7ff feff 	bl	fdd0 <mp_globals_set>

    switch (ret_kind) {
    ffd2:	69bb      	ldr	r3, [r7, #24]
    ffd4:	2b01      	cmp	r3, #1
    ffd6:	d00a      	beq.n	ffee <mp_obj_gen_resume+0xee>
    ffd8:	2b02      	cmp	r3, #2
    ffda:	d012      	beq.n	10002 <mp_obj_gen_resume+0x102>
            // Explicitly mark generator as completed. If we don't do this,
            // subsequent next() may re-execute statements after last yield
            // again and again, leading to side effects.
            // TODO: check how return with value behaves under such conditions
            // in CPython.
            self->code_state.ip = 0;
    ffdc:	69fb      	ldr	r3, [r7, #28]
    ffde:	2200      	movs	r2, #0
    ffe0:	60da      	str	r2, [r3, #12]
            *ret_val = *self->code_state.sp;
    ffe2:	69fb      	ldr	r3, [r7, #28]
    ffe4:	691b      	ldr	r3, [r3, #16]
    ffe6:	681a      	ldr	r2, [r3, #0]
    ffe8:	683b      	ldr	r3, [r7, #0]
    ffea:	601a      	str	r2, [r3, #0]
            break;
    ffec:	e01d      	b.n	1002a <mp_obj_gen_resume+0x12a>

        case MP_VM_RETURN_YIELD:
            *ret_val = *self->code_state.sp;
    ffee:	69fb      	ldr	r3, [r7, #28]
    fff0:	691b      	ldr	r3, [r3, #16]
    fff2:	681a      	ldr	r2, [r3, #0]
    fff4:	683b      	ldr	r3, [r7, #0]
    fff6:	601a      	str	r2, [r3, #0]
            #if MICROPY_PY_GENERATOR_PEND_THROW
            *self->code_state.sp = mp_const_none;
    fff8:	69fb      	ldr	r3, [r7, #28]
    fffa:	691b      	ldr	r3, [r3, #16]
    fffc:	4a11      	ldr	r2, [pc, #68]	; (10044 <mp_obj_gen_resume+0x144>)
    fffe:	601a      	str	r2, [r3, #0]
            #endif
            break;
   10000:	e013      	b.n	1002a <mp_obj_gen_resume+0x12a>

        case MP_VM_RETURN_EXCEPTION: {
            size_t n_state = mp_decode_uint_value(self->code_state.fun_bc->bytecode);
   10002:	69fb      	ldr	r3, [r7, #28]
   10004:	689b      	ldr	r3, [r3, #8]
   10006:	689b      	ldr	r3, [r3, #8]
   10008:	4618      	mov	r0, r3
   1000a:	f00a f9ae 	bl	1a36a <mp_decode_uint_value>
   1000e:	6178      	str	r0, [r7, #20]
            self->code_state.ip = 0;
   10010:	69fb      	ldr	r3, [r7, #28]
   10012:	2200      	movs	r2, #0
   10014:	60da      	str	r2, [r3, #12]
            *ret_val = self->code_state.state[n_state - 1];
   10016:	697b      	ldr	r3, [r7, #20]
   10018:	3b01      	subs	r3, #1
   1001a:	69fa      	ldr	r2, [r7, #28]
   1001c:	3306      	adds	r3, #6
   1001e:	009b      	lsls	r3, r3, #2
   10020:	4413      	add	r3, r2
   10022:	685a      	ldr	r2, [r3, #4]
   10024:	683b      	ldr	r3, [r7, #0]
   10026:	601a      	str	r2, [r3, #0]
            break;
   10028:	bf00      	nop
        }
    }

    return ret_kind;
   1002a:	69bb      	ldr	r3, [r7, #24]
}
   1002c:	4618      	mov	r0, r3
   1002e:	3720      	adds	r7, #32
   10030:	46bd      	mov	sp, r7
   10032:	bd80      	pop	{r7, pc}
   10034:	00020bbc 	.word	0x00020bbc
   10038:	00020a64 	.word	0x00020a64
   1003c:	00020c08 	.word	0x00020c08
   10040:	000209f0 	.word	0x000209f0
   10044:	000212b4 	.word	0x000212b4
   10048:	00020ac8 	.word	0x00020ac8
   1004c:	00020b00 	.word	0x00020b00

00010050 <gen_resume_and_raise>:

STATIC mp_obj_t gen_resume_and_raise(mp_obj_t self_in, mp_obj_t send_value, mp_obj_t throw_value) {
   10050:	b580      	push	{r7, lr}
   10052:	b086      	sub	sp, #24
   10054:	af00      	add	r7, sp, #0
   10056:	60f8      	str	r0, [r7, #12]
   10058:	60b9      	str	r1, [r7, #8]
   1005a:	607a      	str	r2, [r7, #4]
    mp_obj_t ret;
    switch (mp_obj_gen_resume(self_in, send_value, throw_value, &ret)) {
   1005c:	f107 0310 	add.w	r3, r7, #16
   10060:	687a      	ldr	r2, [r7, #4]
   10062:	68b9      	ldr	r1, [r7, #8]
   10064:	68f8      	ldr	r0, [r7, #12]
   10066:	f7ff ff4b 	bl	ff00 <mp_obj_gen_resume>
   1006a:	4603      	mov	r3, r0
   1006c:	2b01      	cmp	r3, #1
   1006e:	d015      	beq.n	1009c <gen_resume_and_raise+0x4c>
   10070:	2b02      	cmp	r3, #2
   10072:	d015      	beq.n	100a0 <gen_resume_and_raise+0x50>
        case MP_VM_RETURN_NORMAL:
        default:
            // Optimize return w/o value in case generator is used in for loop
            if (ret == mp_const_none || ret == MP_OBJ_STOP_ITERATION) {
   10074:	693b      	ldr	r3, [r7, #16]
   10076:	4a1a      	ldr	r2, [pc, #104]	; (100e0 <gen_resume_and_raise+0x90>)
   10078:	4293      	cmp	r3, r2
   1007a:	d002      	beq.n	10082 <gen_resume_and_raise+0x32>
   1007c:	693b      	ldr	r3, [r7, #16]
   1007e:	2b04      	cmp	r3, #4
   10080:	d101      	bne.n	10086 <gen_resume_and_raise+0x36>
                return MP_OBJ_STOP_ITERATION;
   10082:	2304      	movs	r3, #4
   10084:	e027      	b.n	100d6 <gen_resume_and_raise+0x86>
            } else {
                nlr_raise(mp_obj_new_exception_args(&mp_type_StopIteration, 1, &ret));
   10086:	f107 0310 	add.w	r3, r7, #16
   1008a:	461a      	mov	r2, r3
   1008c:	2101      	movs	r1, #1
   1008e:	4815      	ldr	r0, [pc, #84]	; (100e4 <gen_resume_and_raise+0x94>)
   10090:	f7ff f98a 	bl	f3a8 <mp_obj_new_exception_args>
   10094:	4603      	mov	r3, r0
   10096:	4618      	mov	r0, r3
   10098:	f7f0 f922 	bl	2e0 <nlr_jump>
            }

        case MP_VM_RETURN_YIELD:
            return ret;
   1009c:	693b      	ldr	r3, [r7, #16]
   1009e:	e01a      	b.n	100d6 <gen_resume_and_raise+0x86>

        case MP_VM_RETURN_EXCEPTION:
            // TODO: Optimization of returning MP_OBJ_STOP_ITERATION is really part
            // of mp_iternext() protocol, but this function is called by other methods
            // too, which may not handled MP_OBJ_STOP_ITERATION.
            if (mp_obj_is_subclass_fast(MP_OBJ_FROM_PTR(mp_obj_get_type(ret)), MP_OBJ_FROM_PTR(&mp_type_StopIteration))) {
   100a0:	693b      	ldr	r3, [r7, #16]
   100a2:	4618      	mov	r0, r3
   100a4:	f7fd fb54 	bl	d750 <mp_obj_get_type>
   100a8:	4603      	mov	r3, r0
   100aa:	490e      	ldr	r1, [pc, #56]	; (100e4 <gen_resume_and_raise+0x94>)
   100ac:	4618      	mov	r0, r3
   100ae:	f006 ffd3 	bl	17058 <mp_obj_is_subclass_fast>
   100b2:	4603      	mov	r3, r0
   100b4:	2b00      	cmp	r3, #0
   100b6:	d00a      	beq.n	100ce <gen_resume_and_raise+0x7e>
                mp_obj_t val = mp_obj_exception_get_value(ret);
   100b8:	693b      	ldr	r3, [r7, #16]
   100ba:	4618      	mov	r0, r3
   100bc:	f7ff f902 	bl	f2c4 <mp_obj_exception_get_value>
   100c0:	6178      	str	r0, [r7, #20]
                if (val == mp_const_none) {
   100c2:	697b      	ldr	r3, [r7, #20]
   100c4:	4a06      	ldr	r2, [pc, #24]	; (100e0 <gen_resume_and_raise+0x90>)
   100c6:	4293      	cmp	r3, r2
   100c8:	d101      	bne.n	100ce <gen_resume_and_raise+0x7e>
                    return MP_OBJ_STOP_ITERATION;
   100ca:	2304      	movs	r3, #4
   100cc:	e003      	b.n	100d6 <gen_resume_and_raise+0x86>
                }
            }
            nlr_raise(ret);
   100ce:	693b      	ldr	r3, [r7, #16]
   100d0:	4618      	mov	r0, r3
   100d2:	f7f0 f905 	bl	2e0 <nlr_jump>
    }
}
   100d6:	4618      	mov	r0, r3
   100d8:	3718      	adds	r7, #24
   100da:	46bd      	mov	sp, r7
   100dc:	bd80      	pop	{r7, pc}
   100de:	bf00      	nop
   100e0:	000212b4 	.word	0x000212b4
   100e4:	000200ac 	.word	0x000200ac

000100e8 <gen_instance_iternext>:

STATIC mp_obj_t gen_instance_iternext(mp_obj_t self_in) {
   100e8:	b580      	push	{r7, lr}
   100ea:	b082      	sub	sp, #8
   100ec:	af00      	add	r7, sp, #0
   100ee:	6078      	str	r0, [r7, #4]
    return gen_resume_and_raise(self_in, mp_const_none, MP_OBJ_NULL);
   100f0:	2200      	movs	r2, #0
   100f2:	4904      	ldr	r1, [pc, #16]	; (10104 <gen_instance_iternext+0x1c>)
   100f4:	6878      	ldr	r0, [r7, #4]
   100f6:	f7ff ffab 	bl	10050 <gen_resume_and_raise>
   100fa:	4603      	mov	r3, r0
}
   100fc:	4618      	mov	r0, r3
   100fe:	3708      	adds	r7, #8
   10100:	46bd      	mov	sp, r7
   10102:	bd80      	pop	{r7, pc}
   10104:	000212b4 	.word	0x000212b4

00010108 <gen_instance_send>:

STATIC mp_obj_t gen_instance_send(mp_obj_t self_in, mp_obj_t send_value) {
   10108:	b580      	push	{r7, lr}
   1010a:	b084      	sub	sp, #16
   1010c:	af00      	add	r7, sp, #0
   1010e:	6078      	str	r0, [r7, #4]
   10110:	6039      	str	r1, [r7, #0]
    mp_obj_t ret = gen_resume_and_raise(self_in, send_value, MP_OBJ_NULL);
   10112:	2200      	movs	r2, #0
   10114:	6839      	ldr	r1, [r7, #0]
   10116:	6878      	ldr	r0, [r7, #4]
   10118:	f7ff ff9a 	bl	10050 <gen_resume_and_raise>
   1011c:	60f8      	str	r0, [r7, #12]
    if (ret == MP_OBJ_STOP_ITERATION) {
   1011e:	68fb      	ldr	r3, [r7, #12]
   10120:	2b04      	cmp	r3, #4
   10122:	d106      	bne.n	10132 <gen_instance_send+0x2a>
        nlr_raise(mp_obj_new_exception(&mp_type_StopIteration));
   10124:	4805      	ldr	r0, [pc, #20]	; (1013c <gen_instance_send+0x34>)
   10126:	f7ff f921 	bl	f36c <mp_obj_new_exception>
   1012a:	4603      	mov	r3, r0
   1012c:	4618      	mov	r0, r3
   1012e:	f7f0 f8d7 	bl	2e0 <nlr_jump>
    } else {
        return ret;
   10132:	68fb      	ldr	r3, [r7, #12]
    }
}
   10134:	4618      	mov	r0, r3
   10136:	3710      	adds	r7, #16
   10138:	46bd      	mov	sp, r7
   1013a:	bd80      	pop	{r7, pc}
   1013c:	000200ac 	.word	0x000200ac

00010140 <gen_instance_throw>:

STATIC MP_DEFINE_CONST_FUN_OBJ_2(gen_instance_send_obj, gen_instance_send);

STATIC mp_obj_t gen_instance_close(mp_obj_t self_in);
STATIC mp_obj_t gen_instance_throw(size_t n_args, const mp_obj_t *args) {
   10140:	b580      	push	{r7, lr}
   10142:	b084      	sub	sp, #16
   10144:	af00      	add	r7, sp, #0
   10146:	6078      	str	r0, [r7, #4]
   10148:	6039      	str	r1, [r7, #0]
    mp_obj_t exc = (n_args == 2) ? args[1] : args[2];
   1014a:	687b      	ldr	r3, [r7, #4]
   1014c:	2b02      	cmp	r3, #2
   1014e:	d102      	bne.n	10156 <gen_instance_throw+0x16>
   10150:	683b      	ldr	r3, [r7, #0]
   10152:	685b      	ldr	r3, [r3, #4]
   10154:	e001      	b.n	1015a <gen_instance_throw+0x1a>
   10156:	683b      	ldr	r3, [r7, #0]
   10158:	689b      	ldr	r3, [r3, #8]
   1015a:	60fb      	str	r3, [r7, #12]

    mp_obj_t ret = gen_resume_and_raise(args[0], mp_const_none, exc);
   1015c:	683b      	ldr	r3, [r7, #0]
   1015e:	681b      	ldr	r3, [r3, #0]
   10160:	68fa      	ldr	r2, [r7, #12]
   10162:	490a      	ldr	r1, [pc, #40]	; (1018c <gen_instance_throw+0x4c>)
   10164:	4618      	mov	r0, r3
   10166:	f7ff ff73 	bl	10050 <gen_resume_and_raise>
   1016a:	60b8      	str	r0, [r7, #8]
    if (ret == MP_OBJ_STOP_ITERATION) {
   1016c:	68bb      	ldr	r3, [r7, #8]
   1016e:	2b04      	cmp	r3, #4
   10170:	d106      	bne.n	10180 <gen_instance_throw+0x40>
        nlr_raise(mp_obj_new_exception(&mp_type_StopIteration));
   10172:	4807      	ldr	r0, [pc, #28]	; (10190 <gen_instance_throw+0x50>)
   10174:	f7ff f8fa 	bl	f36c <mp_obj_new_exception>
   10178:	4603      	mov	r3, r0
   1017a:	4618      	mov	r0, r3
   1017c:	f7f0 f8b0 	bl	2e0 <nlr_jump>
    } else {
        return ret;
   10180:	68bb      	ldr	r3, [r7, #8]
    }
}
   10182:	4618      	mov	r0, r3
   10184:	3710      	adds	r7, #16
   10186:	46bd      	mov	sp, r7
   10188:	bd80      	pop	{r7, pc}
   1018a:	bf00      	nop
   1018c:	000212b4 	.word	0x000212b4
   10190:	000200ac 	.word	0x000200ac

00010194 <gen_instance_close>:

STATIC MP_DEFINE_CONST_FUN_OBJ_VAR_BETWEEN(gen_instance_throw_obj, 2, 4, gen_instance_throw);

STATIC mp_obj_t gen_instance_close(mp_obj_t self_in) {
   10194:	b580      	push	{r7, lr}
   10196:	b084      	sub	sp, #16
   10198:	af00      	add	r7, sp, #0
   1019a:	6078      	str	r0, [r7, #4]
    mp_obj_t ret;
    switch (mp_obj_gen_resume(self_in, mp_const_none, MP_OBJ_FROM_PTR(&mp_const_GeneratorExit_obj), &ret)) {
   1019c:	f107 030c 	add.w	r3, r7, #12
   101a0:	4a18      	ldr	r2, [pc, #96]	; (10204 <gen_instance_close+0x70>)
   101a2:	4919      	ldr	r1, [pc, #100]	; (10208 <gen_instance_close+0x74>)
   101a4:	6878      	ldr	r0, [r7, #4]
   101a6:	f7ff feab 	bl	ff00 <mp_obj_gen_resume>
   101aa:	4603      	mov	r3, r0
   101ac:	2b01      	cmp	r3, #1
   101ae:	d002      	beq.n	101b6 <gen_instance_close+0x22>
   101b0:	2b02      	cmp	r3, #2
   101b2:	d004      	beq.n	101be <gen_instance_close+0x2a>
   101b4:	e021      	b.n	101fa <gen_instance_close+0x66>
        case MP_VM_RETURN_YIELD:
            mp_raise_msg(&mp_type_RuntimeError, "generator ignored GeneratorExit");
   101b6:	4915      	ldr	r1, [pc, #84]	; (1020c <gen_instance_close+0x78>)
   101b8:	4815      	ldr	r0, [pc, #84]	; (10210 <gen_instance_close+0x7c>)
   101ba:	f7fc fe91 	bl	cee0 <mp_raise_msg>

        // Swallow StopIteration & GeneratorExit (== successful close), and re-raise any other
        case MP_VM_RETURN_EXCEPTION:
            // ret should always be an instance of an exception class
            if (mp_obj_is_subclass_fast(MP_OBJ_FROM_PTR(mp_obj_get_type(ret)), MP_OBJ_FROM_PTR(&mp_type_GeneratorExit)) ||
   101be:	68fb      	ldr	r3, [r7, #12]
   101c0:	4618      	mov	r0, r3
   101c2:	f7fd fac5 	bl	d750 <mp_obj_get_type>
   101c6:	4603      	mov	r3, r0
   101c8:	4912      	ldr	r1, [pc, #72]	; (10214 <gen_instance_close+0x80>)
   101ca:	4618      	mov	r0, r3
   101cc:	f006 ff44 	bl	17058 <mp_obj_is_subclass_fast>
   101d0:	4603      	mov	r3, r0
   101d2:	2b00      	cmp	r3, #0
   101d4:	d10b      	bne.n	101ee <gen_instance_close+0x5a>
                mp_obj_is_subclass_fast(MP_OBJ_FROM_PTR(mp_obj_get_type(ret)), MP_OBJ_FROM_PTR(&mp_type_StopIteration))) {
   101d6:	68fb      	ldr	r3, [r7, #12]
   101d8:	4618      	mov	r0, r3
   101da:	f7fd fab9 	bl	d750 <mp_obj_get_type>
   101de:	4603      	mov	r3, r0
   101e0:	490d      	ldr	r1, [pc, #52]	; (10218 <gen_instance_close+0x84>)
   101e2:	4618      	mov	r0, r3
   101e4:	f006 ff38 	bl	17058 <mp_obj_is_subclass_fast>
   101e8:	4603      	mov	r3, r0
            if (mp_obj_is_subclass_fast(MP_OBJ_FROM_PTR(mp_obj_get_type(ret)), MP_OBJ_FROM_PTR(&mp_type_GeneratorExit)) ||
   101ea:	2b00      	cmp	r3, #0
   101ec:	d001      	beq.n	101f2 <gen_instance_close+0x5e>
                return mp_const_none;
   101ee:	4b06      	ldr	r3, [pc, #24]	; (10208 <gen_instance_close+0x74>)
   101f0:	e004      	b.n	101fc <gen_instance_close+0x68>
            }
            nlr_raise(ret);
   101f2:	68fb      	ldr	r3, [r7, #12]
   101f4:	4618      	mov	r0, r3
   101f6:	f7f0 f873 	bl	2e0 <nlr_jump>

        default:
            // The only choice left is MP_VM_RETURN_NORMAL which is successful close
            return mp_const_none;
   101fa:	4b03      	ldr	r3, [pc, #12]	; (10208 <gen_instance_close+0x74>)
    }
}
   101fc:	4618      	mov	r0, r3
   101fe:	3710      	adds	r7, #16
   10200:	46bd      	mov	sp, r7
   10202:	bd80      	pop	{r7, pc}
   10204:	0001ff68 	.word	0x0001ff68
   10208:	000212b4 	.word	0x000212b4
   1020c:	00020b30 	.word	0x00020b30
   10210:	000203f4 	.word	0x000203f4
   10214:	00020034 	.word	0x00020034
   10218:	000200ac 	.word	0x000200ac

0001021c <gen_instance_pend_throw>:

STATIC MP_DEFINE_CONST_FUN_OBJ_1(gen_instance_close_obj, gen_instance_close);

STATIC mp_obj_t gen_instance_pend_throw(mp_obj_t self_in, mp_obj_t exc_in) {
   1021c:	b580      	push	{r7, lr}
   1021e:	b084      	sub	sp, #16
   10220:	af00      	add	r7, sp, #0
   10222:	6078      	str	r0, [r7, #4]
   10224:	6039      	str	r1, [r7, #0]
    mp_obj_gen_instance_t *self = MP_OBJ_TO_PTR(self_in);
   10226:	687b      	ldr	r3, [r7, #4]
   10228:	60fb      	str	r3, [r7, #12]
    if (self->code_state.sp == self->code_state.state - 1) {
   1022a:	68fb      	ldr	r3, [r7, #12]
   1022c:	691a      	ldr	r2, [r3, #16]
   1022e:	68fb      	ldr	r3, [r7, #12]
   10230:	331c      	adds	r3, #28
   10232:	3b04      	subs	r3, #4
   10234:	429a      	cmp	r2, r3
   10236:	d102      	bne.n	1023e <gen_instance_pend_throw+0x22>
        mp_raise_TypeError("can't pend throw to just-started generator");
   10238:	4807      	ldr	r0, [pc, #28]	; (10258 <gen_instance_pend_throw+0x3c>)
   1023a:	f7fc fe73 	bl	cf24 <mp_raise_TypeError>
    }
    mp_obj_t prev = *self->code_state.sp;
   1023e:	68fb      	ldr	r3, [r7, #12]
   10240:	691b      	ldr	r3, [r3, #16]
   10242:	681b      	ldr	r3, [r3, #0]
   10244:	60bb      	str	r3, [r7, #8]
    *self->code_state.sp = exc_in;
   10246:	68fb      	ldr	r3, [r7, #12]
   10248:	691b      	ldr	r3, [r3, #16]
   1024a:	683a      	ldr	r2, [r7, #0]
   1024c:	601a      	str	r2, [r3, #0]
    return prev;
   1024e:	68bb      	ldr	r3, [r7, #8]
}
   10250:	4618      	mov	r0, r3
   10252:	3710      	adds	r7, #16
   10254:	46bd      	mov	sp, r7
   10256:	bd80      	pop	{r7, pc}
   10258:	00020b58 	.word	0x00020b58

0001025c <it_iternext>:
typedef struct _mp_obj_getitem_iter_t {
    mp_obj_base_t base;
    mp_obj_t args[3];
} mp_obj_getitem_iter_t;

STATIC mp_obj_t it_iternext(mp_obj_t self_in) {
   1025c:	b580      	push	{r7, lr}
   1025e:	b092      	sub	sp, #72	; 0x48
   10260:	af00      	add	r7, sp, #0
   10262:	6078      	str	r0, [r7, #4]
    mp_obj_getitem_iter_t *self = MP_OBJ_TO_PTR(self_in);
   10264:	687b      	ldr	r3, [r7, #4]
   10266:	647b      	str	r3, [r7, #68]	; 0x44
    nlr_buf_t nlr;
    if (nlr_push(&nlr) == 0) {
   10268:	f107 030c 	add.w	r3, r7, #12
   1026c:	4618      	mov	r0, r3
   1026e:	f7f0 f825 	bl	2bc <nlr_push>
   10272:	4603      	mov	r3, r0
   10274:	2b00      	cmp	r3, #0
   10276:	d115      	bne.n	102a4 <it_iternext+0x48>
        // try to get next item
        mp_obj_t value = mp_call_method_n_kw(1, 0, self->args);
   10278:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   1027a:	3304      	adds	r3, #4
   1027c:	461a      	mov	r2, r3
   1027e:	2100      	movs	r1, #0
   10280:	2001      	movs	r0, #1
   10282:	f7fb fdb1 	bl	bde8 <mp_call_method_n_kw>
   10286:	6438      	str	r0, [r7, #64]	; 0x40
        self->args[2] = MP_OBJ_NEW_SMALL_INT(MP_OBJ_SMALL_INT_VALUE(self->args[2]) + 1);
   10288:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   1028a:	68db      	ldr	r3, [r3, #12]
   1028c:	105b      	asrs	r3, r3, #1
   1028e:	3301      	adds	r3, #1
   10290:	005b      	lsls	r3, r3, #1
   10292:	f043 0301 	orr.w	r3, r3, #1
   10296:	461a      	mov	r2, r3
   10298:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   1029a:	60da      	str	r2, [r3, #12]
        nlr_pop();
   1029c:	f7ef fffc 	bl	298 <nlr_pop>
        return value;
   102a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   102a2:	e010      	b.n	102c6 <it_iternext+0x6a>
    } else {
        // an exception was raised
        mp_obj_type_t *t = (mp_obj_type_t*)((mp_obj_base_t*)nlr.ret_val)->type;
   102a4:	693b      	ldr	r3, [r7, #16]
   102a6:	681b      	ldr	r3, [r3, #0]
   102a8:	63fb      	str	r3, [r7, #60]	; 0x3c
        if (t == &mp_type_StopIteration || t == &mp_type_IndexError) {
   102aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   102ac:	4a08      	ldr	r2, [pc, #32]	; (102d0 <it_iternext+0x74>)
   102ae:	4293      	cmp	r3, r2
   102b0:	d003      	beq.n	102ba <it_iternext+0x5e>
   102b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   102b4:	4a07      	ldr	r2, [pc, #28]	; (102d4 <it_iternext+0x78>)
   102b6:	4293      	cmp	r3, r2
   102b8:	d101      	bne.n	102be <it_iternext+0x62>
            // return MP_OBJ_STOP_ITERATION instead of raising
            return MP_OBJ_STOP_ITERATION;
   102ba:	2304      	movs	r3, #4
   102bc:	e003      	b.n	102c6 <it_iternext+0x6a>
        } else {
            // re-raise exception
            nlr_jump(nlr.ret_val);
   102be:	693b      	ldr	r3, [r7, #16]
   102c0:	4618      	mov	r0, r3
   102c2:	f7f0 f80d 	bl	2e0 <nlr_jump>
        }
    }
}
   102c6:	4618      	mov	r0, r3
   102c8:	3748      	adds	r7, #72	; 0x48
   102ca:	46bd      	mov	sp, r7
   102cc:	bd80      	pop	{r7, pc}
   102ce:	bf00      	nop
   102d0:	000200ac 	.word	0x000200ac
   102d4:	000202c8 	.word	0x000202c8

000102d8 <mp_obj_new_getitem_iter>:
    .getiter = mp_identity_getiter,
    .iternext = it_iternext,
};

// args are those returned from mp_load_method_maybe (ie either an attribute or a method)
mp_obj_t mp_obj_new_getitem_iter(mp_obj_t *args, mp_obj_iter_buf_t *iter_buf) {
   102d8:	b480      	push	{r7}
   102da:	b085      	sub	sp, #20
   102dc:	af00      	add	r7, sp, #0
   102de:	6078      	str	r0, [r7, #4]
   102e0:	6039      	str	r1, [r7, #0]
    assert(sizeof(mp_obj_getitem_iter_t) <= sizeof(mp_obj_iter_buf_t));
    mp_obj_getitem_iter_t *o = (mp_obj_getitem_iter_t*)iter_buf;
   102e2:	683b      	ldr	r3, [r7, #0]
   102e4:	60fb      	str	r3, [r7, #12]
    o->base.type = &it_type;
   102e6:	68fb      	ldr	r3, [r7, #12]
   102e8:	4a09      	ldr	r2, [pc, #36]	; (10310 <mp_obj_new_getitem_iter+0x38>)
   102ea:	601a      	str	r2, [r3, #0]
    o->args[0] = args[0];
   102ec:	687b      	ldr	r3, [r7, #4]
   102ee:	681a      	ldr	r2, [r3, #0]
   102f0:	68fb      	ldr	r3, [r7, #12]
   102f2:	605a      	str	r2, [r3, #4]
    o->args[1] = args[1];
   102f4:	687b      	ldr	r3, [r7, #4]
   102f6:	685a      	ldr	r2, [r3, #4]
   102f8:	68fb      	ldr	r3, [r7, #12]
   102fa:	609a      	str	r2, [r3, #8]
    o->args[2] = MP_OBJ_NEW_SMALL_INT(0);
   102fc:	68fb      	ldr	r3, [r7, #12]
   102fe:	2201      	movs	r2, #1
   10300:	60da      	str	r2, [r3, #12]
    return MP_OBJ_FROM_PTR(o);
   10302:	68fb      	ldr	r3, [r7, #12]
}
   10304:	4618      	mov	r0, r3
   10306:	3714      	adds	r7, #20
   10308:	46bd      	mov	sp, r7
   1030a:	f85d 7b04 	ldr.w	r7, [sp], #4
   1030e:	4770      	bx	lr
   10310:	00020c1c 	.word	0x00020c1c

00010314 <MP_OBJ_IS_SMALL_INT>:
    { return ((((mp_int_t)(o)) & 1) != 0); }
   10314:	b480      	push	{r7}
   10316:	b083      	sub	sp, #12
   10318:	af00      	add	r7, sp, #0
   1031a:	6078      	str	r0, [r7, #4]
   1031c:	687b      	ldr	r3, [r7, #4]
   1031e:	f003 0301 	and.w	r3, r3, #1
   10322:	2b00      	cmp	r3, #0
   10324:	bf14      	ite	ne
   10326:	2301      	movne	r3, #1
   10328:	2300      	moveq	r3, #0
   1032a:	b2db      	uxtb	r3, r3
   1032c:	4618      	mov	r0, r3
   1032e:	370c      	adds	r7, #12
   10330:	46bd      	mov	sp, r7
   10332:	f85d 7b04 	ldr.w	r7, [sp], #4
   10336:	4770      	bx	lr

00010338 <MP_OBJ_IS_QSTR>:
    { return ((((mp_int_t)(o)) & 3) == 2); }
   10338:	b480      	push	{r7}
   1033a:	b083      	sub	sp, #12
   1033c:	af00      	add	r7, sp, #0
   1033e:	6078      	str	r0, [r7, #4]
   10340:	687b      	ldr	r3, [r7, #4]
   10342:	f003 0303 	and.w	r3, r3, #3
   10346:	2b02      	cmp	r3, #2
   10348:	bf0c      	ite	eq
   1034a:	2301      	moveq	r3, #1
   1034c:	2300      	movne	r3, #0
   1034e:	b2db      	uxtb	r3, r3
   10350:	4618      	mov	r0, r3
   10352:	370c      	adds	r7, #12
   10354:	46bd      	mov	sp, r7
   10356:	f85d 7b04 	ldr.w	r7, [sp], #4
   1035a:	4770      	bx	lr

0001035c <MP_OBJ_IS_OBJ>:
    { return ((((mp_int_t)(o)) & 3) == 0); }
   1035c:	b480      	push	{r7}
   1035e:	b083      	sub	sp, #12
   10360:	af00      	add	r7, sp, #0
   10362:	6078      	str	r0, [r7, #4]
   10364:	687b      	ldr	r3, [r7, #4]
   10366:	f003 0303 	and.w	r3, r3, #3
   1036a:	2b00      	cmp	r3, #0
   1036c:	bf0c      	ite	eq
   1036e:	2301      	moveq	r3, #1
   10370:	2300      	movne	r3, #0
   10372:	b2db      	uxtb	r3, r3
   10374:	4618      	mov	r0, r3
   10376:	370c      	adds	r7, #12
   10378:	46bd      	mov	sp, r7
   1037a:	f85d 7b04 	ldr.w	r7, [sp], #4
   1037e:	4770      	bx	lr

00010380 <mp_obj_int_make_new>:
#if MICROPY_PY_BUILTINS_FLOAT
#include <math.h>
#endif

// This dispatcher function is expected to be independent of the implementation of long int
STATIC mp_obj_t mp_obj_int_make_new(const mp_obj_type_t *type_in, size_t n_args, size_t n_kw, const mp_obj_t *args) {
   10380:	b590      	push	{r4, r7, lr}
   10382:	b08b      	sub	sp, #44	; 0x2c
   10384:	af02      	add	r7, sp, #8
   10386:	60f8      	str	r0, [r7, #12]
   10388:	60b9      	str	r1, [r7, #8]
   1038a:	607a      	str	r2, [r7, #4]
   1038c:	603b      	str	r3, [r7, #0]
    (void)type_in;
    mp_arg_check_num(n_args, n_kw, 0, 2, false);
   1038e:	2300      	movs	r3, #0
   10390:	9300      	str	r3, [sp, #0]
   10392:	2302      	movs	r3, #2
   10394:	2200      	movs	r2, #0
   10396:	6879      	ldr	r1, [r7, #4]
   10398:	68b8      	ldr	r0, [r7, #8]
   1039a:	f7fc fde9 	bl	cf70 <mp_arg_check_num>

    switch (n_args) {
   1039e:	68bb      	ldr	r3, [r7, #8]
   103a0:	2b00      	cmp	r3, #0
   103a2:	d002      	beq.n	103aa <mp_obj_int_make_new+0x2a>
   103a4:	2b01      	cmp	r3, #1
   103a6:	d002      	beq.n	103ae <mp_obj_int_make_new+0x2e>
   103a8:	e04c      	b.n	10444 <mp_obj_int_make_new+0xc4>
        case 0:
            return MP_OBJ_NEW_SMALL_INT(0);
   103aa:	2301      	movs	r3, #1
   103ac:	e061      	b.n	10472 <mp_obj_int_make_new+0xf2>

        case 1:
            if (MP_OBJ_IS_INT(args[0])) {
   103ae:	683b      	ldr	r3, [r7, #0]
   103b0:	681b      	ldr	r3, [r3, #0]
   103b2:	4618      	mov	r0, r3
   103b4:	f7ff ffae 	bl	10314 <MP_OBJ_IS_SMALL_INT>
   103b8:	4603      	mov	r3, r0
   103ba:	2b00      	cmp	r3, #0
   103bc:	d10d      	bne.n	103da <mp_obj_int_make_new+0x5a>
   103be:	683b      	ldr	r3, [r7, #0]
   103c0:	681b      	ldr	r3, [r3, #0]
   103c2:	4618      	mov	r0, r3
   103c4:	f7ff ffca 	bl	1035c <MP_OBJ_IS_OBJ>
   103c8:	4603      	mov	r3, r0
   103ca:	2b00      	cmp	r3, #0
   103cc:	d008      	beq.n	103e0 <mp_obj_int_make_new+0x60>
   103ce:	683b      	ldr	r3, [r7, #0]
   103d0:	681b      	ldr	r3, [r3, #0]
   103d2:	681b      	ldr	r3, [r3, #0]
   103d4:	4a29      	ldr	r2, [pc, #164]	; (1047c <mp_obj_int_make_new+0xfc>)
   103d6:	4293      	cmp	r3, r2
   103d8:	d102      	bne.n	103e0 <mp_obj_int_make_new+0x60>
                // already an int (small or long), just return it
                return args[0];
   103da:	683b      	ldr	r3, [r7, #0]
   103dc:	681b      	ldr	r3, [r3, #0]
   103de:	e048      	b.n	10472 <mp_obj_int_make_new+0xf2>
            } else if (MP_OBJ_IS_STR_OR_BYTES(args[0])) {
   103e0:	683b      	ldr	r3, [r7, #0]
   103e2:	681b      	ldr	r3, [r3, #0]
   103e4:	4618      	mov	r0, r3
   103e6:	f7ff ffa7 	bl	10338 <MP_OBJ_IS_QSTR>
   103ea:	4603      	mov	r3, r0
   103ec:	2b00      	cmp	r3, #0
   103ee:	d10e      	bne.n	1040e <mp_obj_int_make_new+0x8e>
   103f0:	683b      	ldr	r3, [r7, #0]
   103f2:	681b      	ldr	r3, [r3, #0]
   103f4:	4618      	mov	r0, r3
   103f6:	f7ff ffb1 	bl	1035c <MP_OBJ_IS_OBJ>
   103fa:	4603      	mov	r3, r0
   103fc:	2b00      	cmp	r3, #0
   103fe:	d017      	beq.n	10430 <mp_obj_int_make_new+0xb0>
   10400:	683b      	ldr	r3, [r7, #0]
   10402:	681b      	ldr	r3, [r3, #0]
   10404:	681b      	ldr	r3, [r3, #0]
   10406:	699b      	ldr	r3, [r3, #24]
   10408:	4a1d      	ldr	r2, [pc, #116]	; (10480 <mp_obj_int_make_new+0x100>)
   1040a:	4293      	cmp	r3, r2
   1040c:	d110      	bne.n	10430 <mp_obj_int_make_new+0xb0>
                // a string, parse it
                size_t l;
                const char *s = mp_obj_str_get_data(args[0], &l);
   1040e:	683b      	ldr	r3, [r7, #0]
   10410:	681b      	ldr	r3, [r3, #0]
   10412:	f107 0214 	add.w	r2, r7, #20
   10416:	4611      	mov	r1, r2
   10418:	4618      	mov	r0, r3
   1041a:	f005 f825 	bl	15468 <mp_obj_str_get_data>
   1041e:	61f8      	str	r0, [r7, #28]
                return mp_parse_num_integer(s, l, 0, NULL);
   10420:	6979      	ldr	r1, [r7, #20]
   10422:	2300      	movs	r3, #0
   10424:	2200      	movs	r2, #0
   10426:	69f8      	ldr	r0, [r7, #28]
   10428:	f7fa fdb0 	bl	af8c <mp_parse_num_integer>
   1042c:	4603      	mov	r3, r0
   1042e:	e020      	b.n	10472 <mp_obj_int_make_new+0xf2>
            } else if (mp_obj_is_float(args[0])) {
                return mp_obj_new_int_from_float(mp_obj_float_get(args[0]));
#endif
            } else {
                // try to convert to small int (eg from bool)
                return MP_OBJ_NEW_SMALL_INT(mp_obj_get_int(args[0]));
   10430:	683b      	ldr	r3, [r7, #0]
   10432:	681b      	ldr	r3, [r3, #0]
   10434:	4618      	mov	r0, r3
   10436:	f7fd fb67 	bl	db08 <mp_obj_get_int>
   1043a:	4603      	mov	r3, r0
   1043c:	005b      	lsls	r3, r3, #1
   1043e:	f043 0301 	orr.w	r3, r3, #1
   10442:	e016      	b.n	10472 <mp_obj_int_make_new+0xf2>
        case 2:
        default: {
            // should be a string, parse it
            // TODO proper error checking of argument types
            size_t l;
            const char *s = mp_obj_str_get_data(args[0], &l);
   10444:	683b      	ldr	r3, [r7, #0]
   10446:	681b      	ldr	r3, [r3, #0]
   10448:	f107 0210 	add.w	r2, r7, #16
   1044c:	4611      	mov	r1, r2
   1044e:	4618      	mov	r0, r3
   10450:	f005 f80a 	bl	15468 <mp_obj_str_get_data>
   10454:	61b8      	str	r0, [r7, #24]
            return mp_parse_num_integer(s, l, mp_obj_get_int(args[1]), NULL);
   10456:	693c      	ldr	r4, [r7, #16]
   10458:	683b      	ldr	r3, [r7, #0]
   1045a:	3304      	adds	r3, #4
   1045c:	681b      	ldr	r3, [r3, #0]
   1045e:	4618      	mov	r0, r3
   10460:	f7fd fb52 	bl	db08 <mp_obj_get_int>
   10464:	4602      	mov	r2, r0
   10466:	2300      	movs	r3, #0
   10468:	4621      	mov	r1, r4
   1046a:	69b8      	ldr	r0, [r7, #24]
   1046c:	f7fa fd8e 	bl	af8c <mp_parse_num_integer>
   10470:	4603      	mov	r3, r0
        }
    }
}
   10472:	4618      	mov	r0, r3
   10474:	3724      	adds	r7, #36	; 0x24
   10476:	46bd      	mov	sp, r7
   10478:	bd90      	pop	{r4, r7, pc}
   1047a:	bf00      	nop
   1047c:	00020d10 	.word	0x00020d10
   10480:	000126c3 	.word	0x000126c3

00010484 <mp_obj_int_print>:
#else
typedef mp_int_t fmt_int_t;
typedef mp_uint_t fmt_uint_t;
#endif

void mp_obj_int_print(const mp_print_t *print, mp_obj_t self_in, mp_print_kind_t kind) {
   10484:	b580      	push	{r7, lr}
   10486:	b090      	sub	sp, #64	; 0x40
   10488:	af04      	add	r7, sp, #16
   1048a:	60f8      	str	r0, [r7, #12]
   1048c:	60b9      	str	r1, [r7, #8]
   1048e:	607a      	str	r2, [r7, #4]
    (void)kind;
    // The size of this buffer is rather arbitrary. If it's not large
    // enough, a dynamic one will be allocated.
    char stack_buf[sizeof(fmt_int_t) * 4];
    char *buf = stack_buf;
   10490:	f107 031c 	add.w	r3, r7, #28
   10494:	61bb      	str	r3, [r7, #24]
    size_t buf_size = sizeof(stack_buf);
   10496:	2310      	movs	r3, #16
   10498:	617b      	str	r3, [r7, #20]
    size_t fmt_size;

    char *str = mp_obj_int_formatted(&buf, &buf_size, &fmt_size, self_in, 10, NULL, '\0', '\0');
   1049a:	f107 0210 	add.w	r2, r7, #16
   1049e:	f107 0114 	add.w	r1, r7, #20
   104a2:	f107 0018 	add.w	r0, r7, #24
   104a6:	2300      	movs	r3, #0
   104a8:	9303      	str	r3, [sp, #12]
   104aa:	2300      	movs	r3, #0
   104ac:	9302      	str	r3, [sp, #8]
   104ae:	2300      	movs	r3, #0
   104b0:	9301      	str	r3, [sp, #4]
   104b2:	230a      	movs	r3, #10
   104b4:	9300      	str	r3, [sp, #0]
   104b6:	68bb      	ldr	r3, [r7, #8]
   104b8:	f000 f858 	bl	1056c <mp_obj_int_formatted>
   104bc:	62f8      	str	r0, [r7, #44]	; 0x2c
    mp_print_str(print, str);
   104be:	6af9      	ldr	r1, [r7, #44]	; 0x2c
   104c0:	68f8      	ldr	r0, [r7, #12]
   104c2:	f7f1 f9c5 	bl	1850 <mp_print_str>

    if (buf != stack_buf) {
   104c6:	69ba      	ldr	r2, [r7, #24]
   104c8:	f107 031c 	add.w	r3, r7, #28
   104cc:	429a      	cmp	r2, r3
   104ce:	d003      	beq.n	104d8 <mp_obj_int_print+0x54>
        m_del(char, buf, buf_size);
   104d0:	69bb      	ldr	r3, [r7, #24]
   104d2:	4618      	mov	r0, r3
   104d4:	f7ef ff80 	bl	3d8 <m_free>
    }
}
   104d8:	bf00      	nop
   104da:	3730      	adds	r7, #48	; 0x30
   104dc:	46bd      	mov	sp, r7
   104de:	bd80      	pop	{r7, pc}

000104e0 <mp_int_format_size>:
    4, 4, 4, 4,
    4, 4, 4, 5
    */
};

size_t mp_int_format_size(size_t num_bits, int base, const char *prefix, char comma) {
   104e0:	b580      	push	{r7, lr}
   104e2:	b088      	sub	sp, #32
   104e4:	af00      	add	r7, sp, #0
   104e6:	60f8      	str	r0, [r7, #12]
   104e8:	60b9      	str	r1, [r7, #8]
   104ea:	607a      	str	r2, [r7, #4]
   104ec:	70fb      	strb	r3, [r7, #3]
    assert(2 <= base && base <= 16);
   104ee:	68bb      	ldr	r3, [r7, #8]
   104f0:	2b01      	cmp	r3, #1
   104f2:	dd02      	ble.n	104fa <mp_int_format_size+0x1a>
   104f4:	68bb      	ldr	r3, [r7, #8]
   104f6:	2b10      	cmp	r3, #16
   104f8:	dd05      	ble.n	10506 <mp_int_format_size+0x26>
   104fa:	4b17      	ldr	r3, [pc, #92]	; (10558 <mp_int_format_size+0x78>)
   104fc:	4a17      	ldr	r2, [pc, #92]	; (1055c <mp_int_format_size+0x7c>)
   104fe:	21d0      	movs	r1, #208	; 0xd0
   10500:	4817      	ldr	r0, [pc, #92]	; (10560 <mp_int_format_size+0x80>)
   10502:	f00a fe5b 	bl	1b1bc <__assert_func>
    size_t num_digits = num_bits / log_base2_floor[base - 1] + 1;
   10506:	68bb      	ldr	r3, [r7, #8]
   10508:	3b01      	subs	r3, #1
   1050a:	4a16      	ldr	r2, [pc, #88]	; (10564 <mp_int_format_size+0x84>)
   1050c:	5cd3      	ldrb	r3, [r2, r3]
   1050e:	461a      	mov	r2, r3
   10510:	68fb      	ldr	r3, [r7, #12]
   10512:	fbb3 f3f2 	udiv	r3, r3, r2
   10516:	3301      	adds	r3, #1
   10518:	61fb      	str	r3, [r7, #28]
    size_t num_commas = comma ? num_digits / 3 : 0;
   1051a:	78fb      	ldrb	r3, [r7, #3]
   1051c:	2b00      	cmp	r3, #0
   1051e:	d005      	beq.n	1052c <mp_int_format_size+0x4c>
   10520:	69fb      	ldr	r3, [r7, #28]
   10522:	4a11      	ldr	r2, [pc, #68]	; (10568 <mp_int_format_size+0x88>)
   10524:	fba2 2303 	umull	r2, r3, r2, r3
   10528:	085b      	lsrs	r3, r3, #1
   1052a:	e000      	b.n	1052e <mp_int_format_size+0x4e>
   1052c:	2300      	movs	r3, #0
   1052e:	61bb      	str	r3, [r7, #24]
    size_t prefix_len = prefix ? strlen(prefix) : 0;
   10530:	687b      	ldr	r3, [r7, #4]
   10532:	2b00      	cmp	r3, #0
   10534:	d004      	beq.n	10540 <mp_int_format_size+0x60>
   10536:	6878      	ldr	r0, [r7, #4]
   10538:	f00b fb7a 	bl	1bc30 <strlen>
   1053c:	4603      	mov	r3, r0
   1053e:	e000      	b.n	10542 <mp_int_format_size+0x62>
   10540:	2300      	movs	r3, #0
   10542:	617b      	str	r3, [r7, #20]
    return num_digits + num_commas + prefix_len + 2; // +1 for sign, +1 for null byte
   10544:	69fa      	ldr	r2, [r7, #28]
   10546:	69bb      	ldr	r3, [r7, #24]
   10548:	441a      	add	r2, r3
   1054a:	697b      	ldr	r3, [r7, #20]
   1054c:	4413      	add	r3, r2
   1054e:	3302      	adds	r3, #2
}
   10550:	4618      	mov	r0, r3
   10552:	3720      	adds	r7, #32
   10554:	46bd      	mov	sp, r7
   10556:	bd80      	pop	{r7, pc}
   10558:	00020c68 	.word	0x00020c68
   1055c:	00020d4c 	.word	0x00020d4c
   10560:	00020c80 	.word	0x00020c80
   10564:	00020c58 	.word	0x00020c58
   10568:	aaaaaaab 	.word	0xaaaaaaab

0001056c <mp_obj_int_formatted>:
// is the callers responsibility to free this allocated buffer.
//
// The resulting formatted string will be returned from this function and the
// formatted size will be in *fmt_size.
char *mp_obj_int_formatted(char **buf, size_t *buf_size, size_t *fmt_size, mp_const_obj_t self_in,
                           int base, const char *prefix, char base_char, char comma) {
   1056c:	b580      	push	{r7, lr}
   1056e:	b08e      	sub	sp, #56	; 0x38
   10570:	af00      	add	r7, sp, #0
   10572:	60f8      	str	r0, [r7, #12]
   10574:	60b9      	str	r1, [r7, #8]
   10576:	607a      	str	r2, [r7, #4]
   10578:	603b      	str	r3, [r7, #0]
    fmt_int_t num;
    #if MICROPY_LONGINT_IMPL == MICROPY_LONGINT_IMPL_NONE
    // Only have small ints; get the integer value to format.
    num = MP_OBJ_SMALL_INT_VALUE(self_in);
   1057a:	683b      	ldr	r3, [r7, #0]
   1057c:	105b      	asrs	r3, r3, #1
   1057e:	637b      	str	r3, [r7, #52]	; 0x34
        return mp_obj_int_formatted_impl(buf, buf_size, fmt_size, self_in, base, prefix, base_char, comma);
        #endif
    }
    #endif

    char sign = '\0';
   10580:	2300      	movs	r3, #0
   10582:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (num < 0) {
   10586:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   10588:	2b00      	cmp	r3, #0
   1058a:	da05      	bge.n	10598 <mp_obj_int_formatted+0x2c>
        num = -num;
   1058c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1058e:	425b      	negs	r3, r3
   10590:	637b      	str	r3, [r7, #52]	; 0x34
        sign = '-';
   10592:	232d      	movs	r3, #45	; 0x2d
   10594:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    }

    size_t needed_size = mp_int_format_size(sizeof(fmt_int_t) * 8, base, prefix, comma);
   10598:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
   1059c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
   1059e:	6c39      	ldr	r1, [r7, #64]	; 0x40
   105a0:	2020      	movs	r0, #32
   105a2:	f7ff ff9d 	bl	104e0 <mp_int_format_size>
   105a6:	61f8      	str	r0, [r7, #28]
    if (needed_size > *buf_size) {
   105a8:	68bb      	ldr	r3, [r7, #8]
   105aa:	681a      	ldr	r2, [r3, #0]
   105ac:	69fb      	ldr	r3, [r7, #28]
   105ae:	429a      	cmp	r2, r3
   105b0:	d208      	bcs.n	105c4 <mp_obj_int_formatted+0x58>
        *buf = m_new(char, needed_size);
   105b2:	69f8      	ldr	r0, [r7, #28]
   105b4:	f7ef feb2 	bl	31c <m_malloc>
   105b8:	4602      	mov	r2, r0
   105ba:	68fb      	ldr	r3, [r7, #12]
   105bc:	601a      	str	r2, [r3, #0]
        *buf_size = needed_size;
   105be:	68bb      	ldr	r3, [r7, #8]
   105c0:	69fa      	ldr	r2, [r7, #28]
   105c2:	601a      	str	r2, [r3, #0]
    }
    char *str = *buf;
   105c4:	68fb      	ldr	r3, [r7, #12]
   105c6:	681b      	ldr	r3, [r3, #0]
   105c8:	61bb      	str	r3, [r7, #24]

    char *b = str + needed_size;
   105ca:	69ba      	ldr	r2, [r7, #24]
   105cc:	69fb      	ldr	r3, [r7, #28]
   105ce:	4413      	add	r3, r2
   105d0:	62fb      	str	r3, [r7, #44]	; 0x2c
    *(--b) = '\0';
   105d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   105d4:	3b01      	subs	r3, #1
   105d6:	62fb      	str	r3, [r7, #44]	; 0x2c
   105d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   105da:	2200      	movs	r2, #0
   105dc:	701a      	strb	r2, [r3, #0]
    char *last_comma = b;
   105de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   105e0:	62bb      	str	r3, [r7, #40]	; 0x28

    if (num == 0) {
   105e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   105e4:	2b00      	cmp	r3, #0
   105e6:	d106      	bne.n	105f6 <mp_obj_int_formatted+0x8a>
        *(--b) = '0';
   105e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   105ea:	3b01      	subs	r3, #1
   105ec:	62fb      	str	r3, [r7, #44]	; 0x2c
   105ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   105f0:	2230      	movs	r2, #48	; 0x30
   105f2:	701a      	strb	r2, [r3, #0]
   105f4:	e040      	b.n	10678 <mp_obj_int_formatted+0x10c>
    } else {
        do {
            // The cast to fmt_uint_t is because num is positive and we want unsigned arithmetic
            int c = (fmt_uint_t)num % base;
   105f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   105f8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   105fa:	fbb3 f1f2 	udiv	r1, r3, r2
   105fe:	fb02 f201 	mul.w	r2, r2, r1
   10602:	1a9b      	subs	r3, r3, r2
   10604:	627b      	str	r3, [r7, #36]	; 0x24
            num = (fmt_uint_t)num / base;
   10606:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   10608:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1060a:	fbb2 f3f3 	udiv	r3, r2, r3
   1060e:	637b      	str	r3, [r7, #52]	; 0x34
            if (c >= 10) {
   10610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   10612:	2b09      	cmp	r3, #9
   10614:	dd06      	ble.n	10624 <mp_obj_int_formatted+0xb8>
                c += base_char - 10;
   10616:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
   1061a:	3b0a      	subs	r3, #10
   1061c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   1061e:	4413      	add	r3, r2
   10620:	627b      	str	r3, [r7, #36]	; 0x24
   10622:	e002      	b.n	1062a <mp_obj_int_formatted+0xbe>
            } else {
                c += '0';
   10624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   10626:	3330      	adds	r3, #48	; 0x30
   10628:	627b      	str	r3, [r7, #36]	; 0x24
            }
            *(--b) = c;
   1062a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1062c:	3b01      	subs	r3, #1
   1062e:	62fb      	str	r3, [r7, #44]	; 0x2c
   10630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   10632:	b2da      	uxtb	r2, r3
   10634:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   10636:	701a      	strb	r2, [r3, #0]
            if (comma && num != 0 && b > str && (last_comma - b) == 3) {
   10638:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
   1063c:	2b00      	cmp	r3, #0
   1063e:	d014      	beq.n	1066a <mp_obj_int_formatted+0xfe>
   10640:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   10642:	2b00      	cmp	r3, #0
   10644:	d011      	beq.n	1066a <mp_obj_int_formatted+0xfe>
   10646:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   10648:	69bb      	ldr	r3, [r7, #24]
   1064a:	429a      	cmp	r2, r3
   1064c:	d90d      	bls.n	1066a <mp_obj_int_formatted+0xfe>
   1064e:	6aba      	ldr	r2, [r7, #40]	; 0x28
   10650:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   10652:	1ad3      	subs	r3, r2, r3
   10654:	2b03      	cmp	r3, #3
   10656:	d108      	bne.n	1066a <mp_obj_int_formatted+0xfe>
                *(--b) = comma;
   10658:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1065a:	3b01      	subs	r3, #1
   1065c:	62fb      	str	r3, [r7, #44]	; 0x2c
   1065e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   10660:	f897 204c 	ldrb.w	r2, [r7, #76]	; 0x4c
   10664:	701a      	strb	r2, [r3, #0]
                last_comma = b;
   10666:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   10668:	62bb      	str	r3, [r7, #40]	; 0x28
            }
        }
        while (b > str && num != 0);
   1066a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   1066c:	69bb      	ldr	r3, [r7, #24]
   1066e:	429a      	cmp	r2, r3
   10670:	d902      	bls.n	10678 <mp_obj_int_formatted+0x10c>
   10672:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   10674:	2b00      	cmp	r3, #0
   10676:	d1be      	bne.n	105f6 <mp_obj_int_formatted+0x8a>
    }
    if (prefix) {
   10678:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   1067a:	2b00      	cmp	r3, #0
   1067c:	d01b      	beq.n	106b6 <mp_obj_int_formatted+0x14a>
        size_t prefix_len = strlen(prefix);
   1067e:	6c78      	ldr	r0, [r7, #68]	; 0x44
   10680:	f00b fad6 	bl	1bc30 <strlen>
   10684:	6178      	str	r0, [r7, #20]
        char *p = b - prefix_len;
   10686:	697b      	ldr	r3, [r7, #20]
   10688:	425b      	negs	r3, r3
   1068a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   1068c:	4413      	add	r3, r2
   1068e:	623b      	str	r3, [r7, #32]
        if (p > str) {
   10690:	6a3a      	ldr	r2, [r7, #32]
   10692:	69bb      	ldr	r3, [r7, #24]
   10694:	429a      	cmp	r2, r3
   10696:	d90e      	bls.n	106b6 <mp_obj_int_formatted+0x14a>
            b = p;
   10698:	6a3b      	ldr	r3, [r7, #32]
   1069a:	62fb      	str	r3, [r7, #44]	; 0x2c
            while (*prefix) {
   1069c:	e007      	b.n	106ae <mp_obj_int_formatted+0x142>
                *p++ = *prefix++;
   1069e:	6a3b      	ldr	r3, [r7, #32]
   106a0:	1c5a      	adds	r2, r3, #1
   106a2:	623a      	str	r2, [r7, #32]
   106a4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
   106a6:	1c51      	adds	r1, r2, #1
   106a8:	6479      	str	r1, [r7, #68]	; 0x44
   106aa:	7812      	ldrb	r2, [r2, #0]
   106ac:	701a      	strb	r2, [r3, #0]
            while (*prefix) {
   106ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   106b0:	781b      	ldrb	r3, [r3, #0]
   106b2:	2b00      	cmp	r3, #0
   106b4:	d1f3      	bne.n	1069e <mp_obj_int_formatted+0x132>
            }
        }
    }
    if (sign && b > str) {
   106b6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
   106ba:	2b00      	cmp	r3, #0
   106bc:	d00a      	beq.n	106d4 <mp_obj_int_formatted+0x168>
   106be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   106c0:	69bb      	ldr	r3, [r7, #24]
   106c2:	429a      	cmp	r2, r3
   106c4:	d906      	bls.n	106d4 <mp_obj_int_formatted+0x168>
        *(--b) = sign;
   106c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   106c8:	3b01      	subs	r3, #1
   106ca:	62fb      	str	r3, [r7, #44]	; 0x2c
   106cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   106ce:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
   106d2:	701a      	strb	r2, [r3, #0]
    }
    *fmt_size = *buf + needed_size - b - 1;
   106d4:	68fb      	ldr	r3, [r7, #12]
   106d6:	681a      	ldr	r2, [r3, #0]
   106d8:	69fb      	ldr	r3, [r7, #28]
   106da:	4413      	add	r3, r2
   106dc:	461a      	mov	r2, r3
   106de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   106e0:	1ad3      	subs	r3, r2, r3
   106e2:	3b01      	subs	r3, #1
   106e4:	461a      	mov	r2, r3
   106e6:	687b      	ldr	r3, [r7, #4]
   106e8:	601a      	str	r2, [r3, #0]

    return b;
   106ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
   106ec:	4618      	mov	r0, r3
   106ee:	3738      	adds	r7, #56	; 0x38
   106f0:	46bd      	mov	sp, r7
   106f2:	bd80      	pop	{r7, pc}

000106f4 <mp_obj_int_sign>:

#if MICROPY_LONGINT_IMPL == MICROPY_LONGINT_IMPL_NONE

int mp_obj_int_sign(mp_obj_t self_in) {
   106f4:	b580      	push	{r7, lr}
   106f6:	b084      	sub	sp, #16
   106f8:	af00      	add	r7, sp, #0
   106fa:	6078      	str	r0, [r7, #4]
    mp_int_t val = mp_obj_get_int(self_in);
   106fc:	6878      	ldr	r0, [r7, #4]
   106fe:	f7fd fa03 	bl	db08 <mp_obj_get_int>
   10702:	60f8      	str	r0, [r7, #12]
    if (val < 0) {
   10704:	68fb      	ldr	r3, [r7, #12]
   10706:	2b00      	cmp	r3, #0
   10708:	da02      	bge.n	10710 <mp_obj_int_sign+0x1c>
        return -1;
   1070a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1070e:	e005      	b.n	1071c <mp_obj_int_sign+0x28>
    } else if (val > 0) {
   10710:	68fb      	ldr	r3, [r7, #12]
   10712:	2b00      	cmp	r3, #0
   10714:	dd01      	ble.n	1071a <mp_obj_int_sign+0x26>
        return 1;
   10716:	2301      	movs	r3, #1
   10718:	e000      	b.n	1071c <mp_obj_int_sign+0x28>
    } else {
        return 0;
   1071a:	2300      	movs	r3, #0
    }
}
   1071c:	4618      	mov	r0, r3
   1071e:	3710      	adds	r7, #16
   10720:	46bd      	mov	sp, r7
   10722:	bd80      	pop	{r7, pc}

00010724 <mp_obj_int_unary_op>:

// This is called for operations on SMALL_INT that are not handled by mp_unary_op
mp_obj_t mp_obj_int_unary_op(mp_unary_op_t op, mp_obj_t o_in) {
   10724:	b480      	push	{r7}
   10726:	b083      	sub	sp, #12
   10728:	af00      	add	r7, sp, #0
   1072a:	6078      	str	r0, [r7, #4]
   1072c:	6039      	str	r1, [r7, #0]
    return MP_OBJ_NULL; // op not supported
   1072e:	2300      	movs	r3, #0
}
   10730:	4618      	mov	r0, r3
   10732:	370c      	adds	r7, #12
   10734:	46bd      	mov	sp, r7
   10736:	f85d 7b04 	ldr.w	r7, [sp], #4
   1073a:	4770      	bx	lr

0001073c <mp_obj_int_binary_op>:

// This is called for operations on SMALL_INT that are not handled by mp_binary_op
mp_obj_t mp_obj_int_binary_op(mp_binary_op_t op, mp_obj_t lhs_in, mp_obj_t rhs_in) {
   1073c:	b580      	push	{r7, lr}
   1073e:	b084      	sub	sp, #16
   10740:	af00      	add	r7, sp, #0
   10742:	60f8      	str	r0, [r7, #12]
   10744:	60b9      	str	r1, [r7, #8]
   10746:	607a      	str	r2, [r7, #4]
    return mp_obj_int_binary_op_extra_cases(op, lhs_in, rhs_in);
   10748:	687a      	ldr	r2, [r7, #4]
   1074a:	68b9      	ldr	r1, [r7, #8]
   1074c:	68f8      	ldr	r0, [r7, #12]
   1074e:	f000 f87f 	bl	10850 <mp_obj_int_binary_op_extra_cases>
   10752:	4603      	mov	r3, r0
}
   10754:	4618      	mov	r0, r3
   10756:	3710      	adds	r7, #16
   10758:	46bd      	mov	sp, r7
   1075a:	bd80      	pop	{r7, pc}

0001075c <mp_obj_new_int_from_str_len>:

// This is called only with strings whose value doesn't fit in SMALL_INT
mp_obj_t mp_obj_new_int_from_str_len(const char **str, size_t len, bool neg, unsigned int base) {
   1075c:	b580      	push	{r7, lr}
   1075e:	b084      	sub	sp, #16
   10760:	af00      	add	r7, sp, #0
   10762:	60f8      	str	r0, [r7, #12]
   10764:	60b9      	str	r1, [r7, #8]
   10766:	603b      	str	r3, [r7, #0]
   10768:	4613      	mov	r3, r2
   1076a:	71fb      	strb	r3, [r7, #7]
    mp_raise_msg(&mp_type_OverflowError, "long int not supported in this build");
   1076c:	4901      	ldr	r1, [pc, #4]	; (10774 <mp_obj_new_int_from_str_len+0x18>)
   1076e:	4802      	ldr	r0, [pc, #8]	; (10778 <mp_obj_new_int_from_str_len+0x1c>)
   10770:	f7fc fbb6 	bl	cee0 <mp_raise_msg>
   10774:	00020c94 	.word	0x00020c94
   10778:	00020124 	.word	0x00020124

0001077c <mp_obj_new_int_from_ll>:
    return mp_const_none;
}

// This is called when an integer larger than a SMALL_INT is needed (although val might still fit in a SMALL_INT)
mp_obj_t mp_obj_new_int_from_ll(long long val) {
   1077c:	b580      	push	{r7, lr}
   1077e:	b082      	sub	sp, #8
   10780:	af00      	add	r7, sp, #0
   10782:	e9c7 0100 	strd	r0, r1, [r7]
    mp_raise_msg(&mp_type_OverflowError, "small int overflow");
   10786:	4902      	ldr	r1, [pc, #8]	; (10790 <mp_obj_new_int_from_ll+0x14>)
   10788:	4802      	ldr	r0, [pc, #8]	; (10794 <mp_obj_new_int_from_ll+0x18>)
   1078a:	f7fc fba9 	bl	cee0 <mp_raise_msg>
   1078e:	bf00      	nop
   10790:	00020cbc 	.word	0x00020cbc
   10794:	00020124 	.word	0x00020124

00010798 <mp_obj_new_int_from_ull>:
    return mp_const_none;
}

// This is called when an integer larger than a SMALL_INT is needed (although val might still fit in a SMALL_INT)
mp_obj_t mp_obj_new_int_from_ull(unsigned long long val) {
   10798:	b580      	push	{r7, lr}
   1079a:	b082      	sub	sp, #8
   1079c:	af00      	add	r7, sp, #0
   1079e:	e9c7 0100 	strd	r0, r1, [r7]
    mp_raise_msg(&mp_type_OverflowError, "small int overflow");
   107a2:	4902      	ldr	r1, [pc, #8]	; (107ac <mp_obj_new_int_from_ull+0x14>)
   107a4:	4802      	ldr	r0, [pc, #8]	; (107b0 <mp_obj_new_int_from_ull+0x18>)
   107a6:	f7fc fb9b 	bl	cee0 <mp_raise_msg>
   107aa:	bf00      	nop
   107ac:	00020cbc 	.word	0x00020cbc
   107b0:	00020124 	.word	0x00020124

000107b4 <mp_obj_new_int_from_uint>:
    return mp_const_none;
}

mp_obj_t mp_obj_new_int_from_uint(mp_uint_t value) {
   107b4:	b580      	push	{r7, lr}
   107b6:	b082      	sub	sp, #8
   107b8:	af00      	add	r7, sp, #0
   107ba:	6078      	str	r0, [r7, #4]
    // SMALL_INT accepts only signed numbers, so make sure the input
    // value fits completely in the small-int positive range.
    if ((value & ~MP_SMALL_INT_POSITIVE_MASK) == 0) {
   107bc:	687b      	ldr	r3, [r7, #4]
   107be:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
   107c2:	2b00      	cmp	r3, #0
   107c4:	d104      	bne.n	107d0 <mp_obj_new_int_from_uint+0x1c>
        return MP_OBJ_NEW_SMALL_INT(value);
   107c6:	687b      	ldr	r3, [r7, #4]
   107c8:	005b      	lsls	r3, r3, #1
   107ca:	f043 0301 	orr.w	r3, r3, #1
   107ce:	e003      	b.n	107d8 <mp_obj_new_int_from_uint+0x24>
    }
    mp_raise_msg(&mp_type_OverflowError, "small int overflow");
   107d0:	4903      	ldr	r1, [pc, #12]	; (107e0 <mp_obj_new_int_from_uint+0x2c>)
   107d2:	4804      	ldr	r0, [pc, #16]	; (107e4 <mp_obj_new_int_from_uint+0x30>)
   107d4:	f7fc fb84 	bl	cee0 <mp_raise_msg>
    return mp_const_none;
}
   107d8:	4618      	mov	r0, r3
   107da:	3708      	adds	r7, #8
   107dc:	46bd      	mov	sp, r7
   107de:	bd80      	pop	{r7, pc}
   107e0:	00020cbc 	.word	0x00020cbc
   107e4:	00020124 	.word	0x00020124

000107e8 <mp_obj_new_int>:

mp_obj_t mp_obj_new_int(mp_int_t value) {
   107e8:	b580      	push	{r7, lr}
   107ea:	b082      	sub	sp, #8
   107ec:	af00      	add	r7, sp, #0
   107ee:	6078      	str	r0, [r7, #4]
    if (MP_SMALL_INT_FITS(value)) {
   107f0:	687b      	ldr	r3, [r7, #4]
   107f2:	005a      	lsls	r2, r3, #1
   107f4:	687b      	ldr	r3, [r7, #4]
   107f6:	4053      	eors	r3, r2
   107f8:	2b00      	cmp	r3, #0
   107fa:	db04      	blt.n	10806 <mp_obj_new_int+0x1e>
        return MP_OBJ_NEW_SMALL_INT(value);
   107fc:	687b      	ldr	r3, [r7, #4]
   107fe:	005b      	lsls	r3, r3, #1
   10800:	f043 0301 	orr.w	r3, r3, #1
   10804:	e003      	b.n	1080e <mp_obj_new_int+0x26>
    }
    mp_raise_msg(&mp_type_OverflowError, "small int overflow");
   10806:	4904      	ldr	r1, [pc, #16]	; (10818 <mp_obj_new_int+0x30>)
   10808:	4804      	ldr	r0, [pc, #16]	; (1081c <mp_obj_new_int+0x34>)
   1080a:	f7fc fb69 	bl	cee0 <mp_raise_msg>
    return mp_const_none;
}
   1080e:	4618      	mov	r0, r3
   10810:	3708      	adds	r7, #8
   10812:	46bd      	mov	sp, r7
   10814:	bd80      	pop	{r7, pc}
   10816:	bf00      	nop
   10818:	00020cbc 	.word	0x00020cbc
   1081c:	00020124 	.word	0x00020124

00010820 <mp_obj_int_get_truncated>:

mp_int_t mp_obj_int_get_truncated(mp_const_obj_t self_in) {
   10820:	b480      	push	{r7}
   10822:	b083      	sub	sp, #12
   10824:	af00      	add	r7, sp, #0
   10826:	6078      	str	r0, [r7, #4]
    return MP_OBJ_SMALL_INT_VALUE(self_in);
   10828:	687b      	ldr	r3, [r7, #4]
   1082a:	105b      	asrs	r3, r3, #1
}
   1082c:	4618      	mov	r0, r3
   1082e:	370c      	adds	r7, #12
   10830:	46bd      	mov	sp, r7
   10832:	f85d 7b04 	ldr.w	r7, [sp], #4
   10836:	4770      	bx	lr

00010838 <mp_obj_int_get_checked>:

mp_int_t mp_obj_int_get_checked(mp_const_obj_t self_in) {
   10838:	b480      	push	{r7}
   1083a:	b083      	sub	sp, #12
   1083c:	af00      	add	r7, sp, #0
   1083e:	6078      	str	r0, [r7, #4]
    return MP_OBJ_SMALL_INT_VALUE(self_in);
   10840:	687b      	ldr	r3, [r7, #4]
   10842:	105b      	asrs	r3, r3, #1
}
   10844:	4618      	mov	r0, r3
   10846:	370c      	adds	r7, #12
   10848:	46bd      	mov	sp, r7
   1084a:	f85d 7b04 	ldr.w	r7, [sp], #4
   1084e:	4770      	bx	lr

00010850 <mp_obj_int_binary_op_extra_cases>:

#endif // MICROPY_LONGINT_IMPL == MICROPY_LONGINT_IMPL_NONE

// This dispatcher function is expected to be independent of the implementation of long int
// It handles the extra cases for integer-like arithmetic
mp_obj_t mp_obj_int_binary_op_extra_cases(mp_binary_op_t op, mp_obj_t lhs_in, mp_obj_t rhs_in) {
   10850:	b580      	push	{r7, lr}
   10852:	b084      	sub	sp, #16
   10854:	af00      	add	r7, sp, #0
   10856:	60f8      	str	r0, [r7, #12]
   10858:	60b9      	str	r1, [r7, #8]
   1085a:	607a      	str	r2, [r7, #4]
    if (rhs_in == mp_const_false) {
   1085c:	687b      	ldr	r3, [r7, #4]
   1085e:	4a26      	ldr	r2, [pc, #152]	; (108f8 <mp_obj_int_binary_op_extra_cases+0xa8>)
   10860:	4293      	cmp	r3, r2
   10862:	d106      	bne.n	10872 <mp_obj_int_binary_op_extra_cases+0x22>
        // false acts as 0
        return mp_binary_op(op, lhs_in, MP_OBJ_NEW_SMALL_INT(0));
   10864:	2201      	movs	r2, #1
   10866:	68b9      	ldr	r1, [r7, #8]
   10868:	68f8      	ldr	r0, [r7, #12]
   1086a:	f7fb f809 	bl	b880 <mp_binary_op>
   1086e:	4603      	mov	r3, r0
   10870:	e03d      	b.n	108ee <mp_obj_int_binary_op_extra_cases+0x9e>
    } else if (rhs_in == mp_const_true) {
   10872:	687b      	ldr	r3, [r7, #4]
   10874:	4a21      	ldr	r2, [pc, #132]	; (108fc <mp_obj_int_binary_op_extra_cases+0xac>)
   10876:	4293      	cmp	r3, r2
   10878:	d106      	bne.n	10888 <mp_obj_int_binary_op_extra_cases+0x38>
        // true acts as 0
        return mp_binary_op(op, lhs_in, MP_OBJ_NEW_SMALL_INT(1));
   1087a:	2203      	movs	r2, #3
   1087c:	68b9      	ldr	r1, [r7, #8]
   1087e:	68f8      	ldr	r0, [r7, #12]
   10880:	f7fa fffe 	bl	b880 <mp_binary_op>
   10884:	4603      	mov	r3, r0
   10886:	e032      	b.n	108ee <mp_obj_int_binary_op_extra_cases+0x9e>
    } else if (op == MP_BINARY_OP_MULTIPLY) {
   10888:	68fb      	ldr	r3, [r7, #12]
   1088a:	2b1c      	cmp	r3, #28
   1088c:	d12e      	bne.n	108ec <mp_obj_int_binary_op_extra_cases+0x9c>
        if (MP_OBJ_IS_STR_OR_BYTES(rhs_in) || MP_OBJ_IS_TYPE(rhs_in, &mp_type_tuple) || MP_OBJ_IS_TYPE(rhs_in, &mp_type_list)) {
   1088e:	6878      	ldr	r0, [r7, #4]
   10890:	f7ff fd52 	bl	10338 <MP_OBJ_IS_QSTR>
   10894:	4603      	mov	r3, r0
   10896:	2b00      	cmp	r3, #0
   10898:	d121      	bne.n	108de <mp_obj_int_binary_op_extra_cases+0x8e>
   1089a:	6878      	ldr	r0, [r7, #4]
   1089c:	f7ff fd5e 	bl	1035c <MP_OBJ_IS_OBJ>
   108a0:	4603      	mov	r3, r0
   108a2:	2b00      	cmp	r3, #0
   108a4:	d005      	beq.n	108b2 <mp_obj_int_binary_op_extra_cases+0x62>
   108a6:	687b      	ldr	r3, [r7, #4]
   108a8:	681b      	ldr	r3, [r3, #0]
   108aa:	699b      	ldr	r3, [r3, #24]
   108ac:	4a14      	ldr	r2, [pc, #80]	; (10900 <mp_obj_int_binary_op_extra_cases+0xb0>)
   108ae:	4293      	cmp	r3, r2
   108b0:	d015      	beq.n	108de <mp_obj_int_binary_op_extra_cases+0x8e>
   108b2:	6878      	ldr	r0, [r7, #4]
   108b4:	f7ff fd52 	bl	1035c <MP_OBJ_IS_OBJ>
   108b8:	4603      	mov	r3, r0
   108ba:	2b00      	cmp	r3, #0
   108bc:	d004      	beq.n	108c8 <mp_obj_int_binary_op_extra_cases+0x78>
   108be:	687b      	ldr	r3, [r7, #4]
   108c0:	681b      	ldr	r3, [r3, #0]
   108c2:	4a10      	ldr	r2, [pc, #64]	; (10904 <mp_obj_int_binary_op_extra_cases+0xb4>)
   108c4:	4293      	cmp	r3, r2
   108c6:	d00a      	beq.n	108de <mp_obj_int_binary_op_extra_cases+0x8e>
   108c8:	6878      	ldr	r0, [r7, #4]
   108ca:	f7ff fd47 	bl	1035c <MP_OBJ_IS_OBJ>
   108ce:	4603      	mov	r3, r0
   108d0:	2b00      	cmp	r3, #0
   108d2:	d00b      	beq.n	108ec <mp_obj_int_binary_op_extra_cases+0x9c>
   108d4:	687b      	ldr	r3, [r7, #4]
   108d6:	681b      	ldr	r3, [r3, #0]
   108d8:	4a0b      	ldr	r2, [pc, #44]	; (10908 <mp_obj_int_binary_op_extra_cases+0xb8>)
   108da:	4293      	cmp	r3, r2
   108dc:	d106      	bne.n	108ec <mp_obj_int_binary_op_extra_cases+0x9c>
            // multiply is commutative for these types, so delegate to them
            return mp_binary_op(op, rhs_in, lhs_in);
   108de:	68ba      	ldr	r2, [r7, #8]
   108e0:	6879      	ldr	r1, [r7, #4]
   108e2:	68f8      	ldr	r0, [r7, #12]
   108e4:	f7fa ffcc 	bl	b880 <mp_binary_op>
   108e8:	4603      	mov	r3, r0
   108ea:	e000      	b.n	108ee <mp_obj_int_binary_op_extra_cases+0x9e>
        }
    }
    return MP_OBJ_NULL; // op not supported
   108ec:	2300      	movs	r3, #0
}
   108ee:	4618      	mov	r0, r3
   108f0:	3710      	adds	r7, #16
   108f2:	46bd      	mov	sp, r7
   108f4:	bd80      	pop	{r7, pc}
   108f6:	bf00      	nop
   108f8:	0001f9bc 	.word	0x0001f9bc
   108fc:	0001f9c4 	.word	0x0001f9c4
   10900:	000126c3 	.word	0x000126c3
   10904:	00021be8 	.word	0x00021be8
   10908:	00020f7c 	.word	0x00020f7c

0001090c <int_from_bytes>:

// this is a classmethod
STATIC mp_obj_t int_from_bytes(size_t n_args, const mp_obj_t *args) {
   1090c:	b580      	push	{r7, lr}
   1090e:	b08a      	sub	sp, #40	; 0x28
   10910:	af00      	add	r7, sp, #0
   10912:	6078      	str	r0, [r7, #4]
   10914:	6039      	str	r1, [r7, #0]
    // TODO: Support signed param (assumes signed=False at the moment)
    (void)n_args;

    // get the buffer info
    mp_buffer_info_t bufinfo;
    mp_get_buffer_raise(args[1], &bufinfo, MP_BUFFER_READ);
   10916:	683b      	ldr	r3, [r7, #0]
   10918:	3304      	adds	r3, #4
   1091a:	681b      	ldr	r3, [r3, #0]
   1091c:	f107 010c 	add.w	r1, r7, #12
   10920:	2201      	movs	r2, #1
   10922:	4618      	mov	r0, r3
   10924:	f7fd fb20 	bl	df68 <mp_get_buffer_raise>

    const byte* buf = (const byte*)bufinfo.buf;
   10928:	68fb      	ldr	r3, [r7, #12]
   1092a:	627b      	str	r3, [r7, #36]	; 0x24
    int delta = 1;
   1092c:	2301      	movs	r3, #1
   1092e:	623b      	str	r3, [r7, #32]
    if (args[2] == MP_OBJ_NEW_QSTR(MP_QSTR_little)) {
   10930:	683b      	ldr	r3, [r7, #0]
   10932:	3308      	adds	r3, #8
   10934:	681b      	ldr	r3, [r3, #0]
   10936:	f240 2246 	movw	r2, #582	; 0x246
   1093a:	4293      	cmp	r3, r2
   1093c:	d107      	bne.n	1094e <int_from_bytes+0x42>
        buf += bufinfo.len - 1;
   1093e:	693b      	ldr	r3, [r7, #16]
   10940:	3b01      	subs	r3, #1
   10942:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   10944:	4413      	add	r3, r2
   10946:	627b      	str	r3, [r7, #36]	; 0x24
        delta = -1;
   10948:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1094c:	623b      	str	r3, [r7, #32]
    }

    mp_uint_t value = 0;
   1094e:	2300      	movs	r3, #0
   10950:	61fb      	str	r3, [r7, #28]
    size_t len = bufinfo.len;
   10952:	693b      	ldr	r3, [r7, #16]
   10954:	61bb      	str	r3, [r7, #24]
    for (; len--; buf += delta) {
   10956:	e009      	b.n	1096c <int_from_bytes+0x60>
        if (value > (MP_SMALL_INT_MAX >> 8)) {
            // Result will overflow a small-int so construct a big-int
            return mp_obj_int_from_bytes_impl(args[2] != MP_OBJ_NEW_QSTR(MP_QSTR_little), bufinfo.len, bufinfo.buf);
        }
        #endif
        value = (value << 8) | *buf;
   10958:	69fb      	ldr	r3, [r7, #28]
   1095a:	021b      	lsls	r3, r3, #8
   1095c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   1095e:	7812      	ldrb	r2, [r2, #0]
   10960:	4313      	orrs	r3, r2
   10962:	61fb      	str	r3, [r7, #28]
    for (; len--; buf += delta) {
   10964:	6a3b      	ldr	r3, [r7, #32]
   10966:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   10968:	4413      	add	r3, r2
   1096a:	627b      	str	r3, [r7, #36]	; 0x24
   1096c:	69bb      	ldr	r3, [r7, #24]
   1096e:	1e5a      	subs	r2, r3, #1
   10970:	61ba      	str	r2, [r7, #24]
   10972:	2b00      	cmp	r3, #0
   10974:	d1f0      	bne.n	10958 <int_from_bytes+0x4c>
    }
    return mp_obj_new_int_from_uint(value);
   10976:	69f8      	ldr	r0, [r7, #28]
   10978:	f7ff ff1c 	bl	107b4 <mp_obj_new_int_from_uint>
   1097c:	4603      	mov	r3, r0
}
   1097e:	4618      	mov	r0, r3
   10980:	3728      	adds	r7, #40	; 0x28
   10982:	46bd      	mov	sp, r7
   10984:	bd80      	pop	{r7, pc}

00010986 <int_to_bytes>:

STATIC MP_DEFINE_CONST_FUN_OBJ_VAR_BETWEEN(int_from_bytes_fun_obj, 3, 4, int_from_bytes);
STATIC MP_DEFINE_CONST_CLASSMETHOD_OBJ(int_from_bytes_obj, MP_ROM_PTR(&int_from_bytes_fun_obj));

STATIC mp_obj_t int_to_bytes(size_t n_args, const mp_obj_t *args) {
   10986:	b580      	push	{r7, lr}
   10988:	b08c      	sub	sp, #48	; 0x30
   1098a:	af00      	add	r7, sp, #0
   1098c:	6078      	str	r0, [r7, #4]
   1098e:	6039      	str	r1, [r7, #0]
    // TODO: Support signed param (assumes signed=False)
    (void)n_args;

    mp_int_t len = mp_obj_get_int(args[1]);
   10990:	683b      	ldr	r3, [r7, #0]
   10992:	3304      	adds	r3, #4
   10994:	681b      	ldr	r3, [r3, #0]
   10996:	4618      	mov	r0, r3
   10998:	f7fd f8b6 	bl	db08 <mp_obj_get_int>
   1099c:	62f8      	str	r0, [r7, #44]	; 0x2c
    if (len < 0) {
   1099e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   109a0:	2b00      	cmp	r3, #0
   109a2:	da02      	bge.n	109aa <int_to_bytes+0x24>
        mp_raise_ValueError(NULL);
   109a4:	2000      	movs	r0, #0
   109a6:	f7fc fab2 	bl	cf0e <mp_raise_ValueError>
    }
    bool big_endian = args[2] != MP_OBJ_NEW_QSTR(MP_QSTR_little);
   109aa:	683b      	ldr	r3, [r7, #0]
   109ac:	3308      	adds	r3, #8
   109ae:	681b      	ldr	r3, [r3, #0]
   109b0:	f240 2246 	movw	r2, #582	; 0x246
   109b4:	4293      	cmp	r3, r2
   109b6:	bf14      	ite	ne
   109b8:	2301      	movne	r3, #1
   109ba:	2300      	moveq	r3, #0
   109bc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

    vstr_t vstr;
    vstr_init_len(&vstr, len);
   109c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   109c2:	f107 030c 	add.w	r3, r7, #12
   109c6:	4611      	mov	r1, r2
   109c8:	4618      	mov	r0, r3
   109ca:	f7f0 fcaa 	bl	1322 <vstr_init_len>
    byte *data = (byte*)vstr.buf;
   109ce:	697b      	ldr	r3, [r7, #20]
   109d0:	627b      	str	r3, [r7, #36]	; 0x24
    memset(data, 0, len);
   109d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   109d4:	461a      	mov	r2, r3
   109d6:	2100      	movs	r1, #0
   109d8:	6a78      	ldr	r0, [r7, #36]	; 0x24
   109da:	f00b f88d 	bl	1baf8 <memset>
    if (!MP_OBJ_IS_SMALL_INT(args[0])) {
        mp_obj_int_to_bytes_impl(args[0], big_endian, len, data);
    } else
    #endif
    {
        mp_int_t val = MP_OBJ_SMALL_INT_VALUE(args[0]);
   109de:	683b      	ldr	r3, [r7, #0]
   109e0:	681b      	ldr	r3, [r3, #0]
   109e2:	105b      	asrs	r3, r3, #1
   109e4:	623b      	str	r3, [r7, #32]
        size_t l = MIN((size_t)len, sizeof(val));
   109e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   109e8:	2b04      	cmp	r3, #4
   109ea:	bf28      	it	cs
   109ec:	2304      	movcs	r3, #4
   109ee:	61fb      	str	r3, [r7, #28]
        mp_binary_set_int(l, big_endian, data + (big_endian ? (len - l) : 0), val);
   109f0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
   109f4:	2b00      	cmp	r3, #0
   109f6:	d003      	beq.n	10a00 <int_to_bytes+0x7a>
   109f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   109fa:	69fb      	ldr	r3, [r7, #28]
   109fc:	1ad3      	subs	r3, r2, r3
   109fe:	e000      	b.n	10a02 <int_to_bytes+0x7c>
   10a00:	2300      	movs	r3, #0
   10a02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   10a04:	441a      	add	r2, r3
   10a06:	6a3b      	ldr	r3, [r7, #32]
   10a08:	f897 102b 	ldrb.w	r1, [r7, #43]	; 0x2b
   10a0c:	69f8      	ldr	r0, [r7, #28]
   10a0e:	f007 faf8 	bl	18002 <mp_binary_set_int>
    }

    return mp_obj_new_str_from_vstr(&mp_type_bytes, &vstr);
   10a12:	f107 030c 	add.w	r3, r7, #12
   10a16:	4619      	mov	r1, r3
   10a18:	4803      	ldr	r0, [pc, #12]	; (10a28 <int_to_bytes+0xa2>)
   10a1a:	f004 fb64 	bl	150e6 <mp_obj_new_str_from_vstr>
   10a1e:	4603      	mov	r3, r0
}
   10a20:	4618      	mov	r0, r3
   10a22:	3730      	adds	r7, #48	; 0x30
   10a24:	46bd      	mov	sp, r7
   10a26:	bd80      	pop	{r7, pc}
   10a28:	000219a0 	.word	0x000219a0

00010a2c <MP_OBJ_IS_OBJ>:
   10a2c:	b480      	push	{r7}
   10a2e:	b083      	sub	sp, #12
   10a30:	af00      	add	r7, sp, #0
   10a32:	6078      	str	r0, [r7, #4]
   10a34:	687b      	ldr	r3, [r7, #4]
   10a36:	f003 0303 	and.w	r3, r3, #3
   10a3a:	2b00      	cmp	r3, #0
   10a3c:	bf0c      	ite	eq
   10a3e:	2301      	moveq	r3, #1
   10a40:	2300      	movne	r3, #0
   10a42:	b2db      	uxtb	r3, r3
   10a44:	4618      	mov	r0, r3
   10a46:	370c      	adds	r7, #12
   10a48:	46bd      	mov	sp, r7
   10a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
   10a4e:	4770      	bx	lr

00010a50 <mp_obj_new_bool>:
static inline mp_obj_t mp_obj_new_bool(mp_int_t x) { return x ? mp_const_true : mp_const_false; }
   10a50:	b480      	push	{r7}
   10a52:	b083      	sub	sp, #12
   10a54:	af00      	add	r7, sp, #0
   10a56:	6078      	str	r0, [r7, #4]
   10a58:	687b      	ldr	r3, [r7, #4]
   10a5a:	2b00      	cmp	r3, #0
   10a5c:	d001      	beq.n	10a62 <mp_obj_new_bool+0x12>
   10a5e:	4b04      	ldr	r3, [pc, #16]	; (10a70 <mp_obj_new_bool+0x20>)
   10a60:	e000      	b.n	10a64 <mp_obj_new_bool+0x14>
   10a62:	4b04      	ldr	r3, [pc, #16]	; (10a74 <mp_obj_new_bool+0x24>)
   10a64:	4618      	mov	r0, r3
   10a66:	370c      	adds	r7, #12
   10a68:	46bd      	mov	sp, r7
   10a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
   10a6e:	4770      	bx	lr
   10a70:	0001f9c4 	.word	0x0001f9c4
   10a74:	0001f9bc 	.word	0x0001f9bc

00010a78 <list_print>:
#define LIST_MIN_ALLOC 4

/******************************************************************************/
/* list                                                                       */

STATIC void list_print(const mp_print_t *print, mp_obj_t o_in, mp_print_kind_t kind) {
   10a78:	b580      	push	{r7, lr}
   10a7a:	b086      	sub	sp, #24
   10a7c:	af00      	add	r7, sp, #0
   10a7e:	60f8      	str	r0, [r7, #12]
   10a80:	60b9      	str	r1, [r7, #8]
   10a82:	607a      	str	r2, [r7, #4]
    mp_obj_list_t *o = MP_OBJ_TO_PTR(o_in);
   10a84:	68bb      	ldr	r3, [r7, #8]
   10a86:	613b      	str	r3, [r7, #16]
    if (!(MICROPY_PY_UJSON && kind == PRINT_JSON)) {
        kind = PRINT_REPR;
   10a88:	2301      	movs	r3, #1
   10a8a:	607b      	str	r3, [r7, #4]
    }
    mp_print_str(print, "[");
   10a8c:	4914      	ldr	r1, [pc, #80]	; (10ae0 <list_print+0x68>)
   10a8e:	68f8      	ldr	r0, [r7, #12]
   10a90:	f7f0 fede 	bl	1850 <mp_print_str>
    for (size_t i = 0; i < o->len; i++) {
   10a94:	2300      	movs	r3, #0
   10a96:	617b      	str	r3, [r7, #20]
   10a98:	e014      	b.n	10ac4 <list_print+0x4c>
        if (i > 0) {
   10a9a:	697b      	ldr	r3, [r7, #20]
   10a9c:	2b00      	cmp	r3, #0
   10a9e:	d003      	beq.n	10aa8 <list_print+0x30>
            mp_print_str(print, ", ");
   10aa0:	4910      	ldr	r1, [pc, #64]	; (10ae4 <list_print+0x6c>)
   10aa2:	68f8      	ldr	r0, [r7, #12]
   10aa4:	f7f0 fed4 	bl	1850 <mp_print_str>
        }
        mp_obj_print_helper(print, o->items[i], kind);
   10aa8:	693b      	ldr	r3, [r7, #16]
   10aaa:	68da      	ldr	r2, [r3, #12]
   10aac:	697b      	ldr	r3, [r7, #20]
   10aae:	009b      	lsls	r3, r3, #2
   10ab0:	4413      	add	r3, r2
   10ab2:	681b      	ldr	r3, [r3, #0]
   10ab4:	687a      	ldr	r2, [r7, #4]
   10ab6:	4619      	mov	r1, r3
   10ab8:	68f8      	ldr	r0, [r7, #12]
   10aba:	f7fc fe7a 	bl	d7b2 <mp_obj_print_helper>
    for (size_t i = 0; i < o->len; i++) {
   10abe:	697b      	ldr	r3, [r7, #20]
   10ac0:	3301      	adds	r3, #1
   10ac2:	617b      	str	r3, [r7, #20]
   10ac4:	693b      	ldr	r3, [r7, #16]
   10ac6:	689a      	ldr	r2, [r3, #8]
   10ac8:	697b      	ldr	r3, [r7, #20]
   10aca:	429a      	cmp	r2, r3
   10acc:	d8e5      	bhi.n	10a9a <list_print+0x22>
    }
    mp_print_str(print, "]");
   10ace:	4906      	ldr	r1, [pc, #24]	; (10ae8 <list_print+0x70>)
   10ad0:	68f8      	ldr	r0, [r7, #12]
   10ad2:	f7f0 febd 	bl	1850 <mp_print_str>
}
   10ad6:	bf00      	nop
   10ad8:	3718      	adds	r7, #24
   10ada:	46bd      	mov	sp, r7
   10adc:	bd80      	pop	{r7, pc}
   10ade:	bf00      	nop
   10ae0:	00020d60 	.word	0x00020d60
   10ae4:	00020d64 	.word	0x00020d64
   10ae8:	00020d68 	.word	0x00020d68

00010aec <list_extend_from_iter>:

STATIC mp_obj_t list_extend_from_iter(mp_obj_t list, mp_obj_t iterable) {
   10aec:	b580      	push	{r7, lr}
   10aee:	b084      	sub	sp, #16
   10af0:	af00      	add	r7, sp, #0
   10af2:	6078      	str	r0, [r7, #4]
   10af4:	6039      	str	r1, [r7, #0]
    mp_obj_t iter = mp_getiter(iterable, NULL);
   10af6:	2100      	movs	r1, #0
   10af8:	6838      	ldr	r0, [r7, #0]
   10afa:	f7fb fec5 	bl	c888 <mp_getiter>
   10afe:	60f8      	str	r0, [r7, #12]
    mp_obj_t item;
    while ((item = mp_iternext(iter)) != MP_OBJ_STOP_ITERATION) {
   10b00:	e003      	b.n	10b0a <list_extend_from_iter+0x1e>
        mp_obj_list_append(list, item);
   10b02:	68b9      	ldr	r1, [r7, #8]
   10b04:	6878      	ldr	r0, [r7, #4]
   10b06:	f000 f982 	bl	10e0e <mp_obj_list_append>
    while ((item = mp_iternext(iter)) != MP_OBJ_STOP_ITERATION) {
   10b0a:	68f8      	ldr	r0, [r7, #12]
   10b0c:	f7fb ff3e 	bl	c98c <mp_iternext>
   10b10:	60b8      	str	r0, [r7, #8]
   10b12:	68bb      	ldr	r3, [r7, #8]
   10b14:	2b04      	cmp	r3, #4
   10b16:	d1f4      	bne.n	10b02 <list_extend_from_iter+0x16>
    }
    return list;
   10b18:	687b      	ldr	r3, [r7, #4]
}
   10b1a:	4618      	mov	r0, r3
   10b1c:	3710      	adds	r7, #16
   10b1e:	46bd      	mov	sp, r7
   10b20:	bd80      	pop	{r7, pc}

00010b22 <list_make_new>:

STATIC mp_obj_t list_make_new(const mp_obj_type_t *type_in, size_t n_args, size_t n_kw, const mp_obj_t *args) {
   10b22:	b580      	push	{r7, lr}
   10b24:	b088      	sub	sp, #32
   10b26:	af02      	add	r7, sp, #8
   10b28:	60f8      	str	r0, [r7, #12]
   10b2a:	60b9      	str	r1, [r7, #8]
   10b2c:	607a      	str	r2, [r7, #4]
   10b2e:	603b      	str	r3, [r7, #0]
    (void)type_in;
    mp_arg_check_num(n_args, n_kw, 0, 1, false);
   10b30:	2300      	movs	r3, #0
   10b32:	9300      	str	r3, [sp, #0]
   10b34:	2301      	movs	r3, #1
   10b36:	2200      	movs	r2, #0
   10b38:	6879      	ldr	r1, [r7, #4]
   10b3a:	68b8      	ldr	r0, [r7, #8]
   10b3c:	f7fc fa18 	bl	cf70 <mp_arg_check_num>

    switch (n_args) {
   10b40:	68bb      	ldr	r3, [r7, #8]
   10b42:	2b00      	cmp	r3, #0
   10b44:	d105      	bne.n	10b52 <list_make_new+0x30>
        case 0:
            // return a new, empty list
            return mp_obj_new_list(0, NULL);
   10b46:	2100      	movs	r1, #0
   10b48:	2000      	movs	r0, #0
   10b4a:	f000 fdcc 	bl	116e6 <mp_obj_new_list>
   10b4e:	4603      	mov	r3, r0
   10b50:	e00b      	b.n	10b6a <list_make_new+0x48>

        case 1:
        default: {
            // make list from iterable
            // TODO: optimize list/tuple
            mp_obj_t list = mp_obj_new_list(0, NULL);
   10b52:	2100      	movs	r1, #0
   10b54:	2000      	movs	r0, #0
   10b56:	f000 fdc6 	bl	116e6 <mp_obj_new_list>
   10b5a:	6178      	str	r0, [r7, #20]
            return list_extend_from_iter(list, args[0]);
   10b5c:	683b      	ldr	r3, [r7, #0]
   10b5e:	681b      	ldr	r3, [r3, #0]
   10b60:	4619      	mov	r1, r3
   10b62:	6978      	ldr	r0, [r7, #20]
   10b64:	f7ff ffc2 	bl	10aec <list_extend_from_iter>
   10b68:	4603      	mov	r3, r0
        }
    }
}
   10b6a:	4618      	mov	r0, r3
   10b6c:	3718      	adds	r7, #24
   10b6e:	46bd      	mov	sp, r7
   10b70:	bd80      	pop	{r7, pc}

00010b72 <list_unary_op>:

STATIC mp_obj_t list_unary_op(mp_unary_op_t op, mp_obj_t self_in) {
   10b72:	b580      	push	{r7, lr}
   10b74:	b084      	sub	sp, #16
   10b76:	af00      	add	r7, sp, #0
   10b78:	6078      	str	r0, [r7, #4]
   10b7a:	6039      	str	r1, [r7, #0]
    mp_obj_list_t *self = MP_OBJ_TO_PTR(self_in);
   10b7c:	683b      	ldr	r3, [r7, #0]
   10b7e:	60fb      	str	r3, [r7, #12]
    switch (op) {
   10b80:	687b      	ldr	r3, [r7, #4]
   10b82:	2b04      	cmp	r3, #4
   10b84:	d002      	beq.n	10b8c <list_unary_op+0x1a>
   10b86:	2b05      	cmp	r3, #5
   10b88:	d00c      	beq.n	10ba4 <list_unary_op+0x32>
   10b8a:	e011      	b.n	10bb0 <list_unary_op+0x3e>
        case MP_UNARY_OP_BOOL: return mp_obj_new_bool(self->len != 0);
   10b8c:	68fb      	ldr	r3, [r7, #12]
   10b8e:	689b      	ldr	r3, [r3, #8]
   10b90:	2b00      	cmp	r3, #0
   10b92:	bf14      	ite	ne
   10b94:	2301      	movne	r3, #1
   10b96:	2300      	moveq	r3, #0
   10b98:	b2db      	uxtb	r3, r3
   10b9a:	4618      	mov	r0, r3
   10b9c:	f7ff ff58 	bl	10a50 <mp_obj_new_bool>
   10ba0:	4603      	mov	r3, r0
   10ba2:	e006      	b.n	10bb2 <list_unary_op+0x40>
        case MP_UNARY_OP_LEN: return MP_OBJ_NEW_SMALL_INT(self->len);
   10ba4:	68fb      	ldr	r3, [r7, #12]
   10ba6:	689b      	ldr	r3, [r3, #8]
   10ba8:	005b      	lsls	r3, r3, #1
   10baa:	f043 0301 	orr.w	r3, r3, #1
   10bae:	e000      	b.n	10bb2 <list_unary_op+0x40>
        case MP_UNARY_OP_SIZEOF: {
            size_t sz = sizeof(*self) + sizeof(mp_obj_t) * self->alloc;
            return MP_OBJ_NEW_SMALL_INT(sz);
        }
        #endif
        default: return MP_OBJ_NULL; // op not supported
   10bb0:	2300      	movs	r3, #0
    }
}
   10bb2:	4618      	mov	r0, r3
   10bb4:	3710      	adds	r7, #16
   10bb6:	46bd      	mov	sp, r7
   10bb8:	bd80      	pop	{r7, pc}

00010bba <list_binary_op>:

STATIC mp_obj_t list_binary_op(mp_binary_op_t op, mp_obj_t lhs, mp_obj_t rhs) {
   10bba:	b580      	push	{r7, lr}
   10bbc:	b08e      	sub	sp, #56	; 0x38
   10bbe:	af02      	add	r7, sp, #8
   10bc0:	60f8      	str	r0, [r7, #12]
   10bc2:	60b9      	str	r1, [r7, #8]
   10bc4:	607a      	str	r2, [r7, #4]
    mp_obj_list_t *o = MP_OBJ_TO_PTR(lhs);
   10bc6:	68bb      	ldr	r3, [r7, #8]
   10bc8:	62fb      	str	r3, [r7, #44]	; 0x2c
    switch (op) {
   10bca:	68fb      	ldr	r3, [r7, #12]
   10bcc:	2b1c      	cmp	r3, #28
   10bce:	f200 80cf 	bhi.w	10d70 <list_binary_op+0x1b6>
   10bd2:	a201      	add	r2, pc, #4	; (adr r2, 10bd8 <list_binary_op+0x1e>)
   10bd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   10bd8:	00010d19 	.word	0x00010d19
   10bdc:	00010d19 	.word	0x00010d19
   10be0:	00010d19 	.word	0x00010d19
   10be4:	00010d19 	.word	0x00010d19
   10be8:	00010d19 	.word	0x00010d19
   10bec:	00010d71 	.word	0x00010d71
   10bf0:	00010d71 	.word	0x00010d71
   10bf4:	00010d71 	.word	0x00010d71
   10bf8:	00010d71 	.word	0x00010d71
   10bfc:	00010d71 	.word	0x00010d71
   10c00:	00010d71 	.word	0x00010d71
   10c04:	00010d71 	.word	0x00010d71
   10c08:	00010d71 	.word	0x00010d71
   10c0c:	00010d71 	.word	0x00010d71
   10c10:	00010cb7 	.word	0x00010cb7
   10c14:	00010d71 	.word	0x00010d71
   10c18:	00010d71 	.word	0x00010d71
   10c1c:	00010d71 	.word	0x00010d71
   10c20:	00010d71 	.word	0x00010d71
   10c24:	00010d71 	.word	0x00010d71
   10c28:	00010d71 	.word	0x00010d71
   10c2c:	00010d71 	.word	0x00010d71
   10c30:	00010d71 	.word	0x00010d71
   10c34:	00010d71 	.word	0x00010d71
   10c38:	00010d71 	.word	0x00010d71
   10c3c:	00010d71 	.word	0x00010d71
   10c40:	00010c4d 	.word	0x00010c4d
   10c44:	00010d71 	.word	0x00010d71
   10c48:	00010cc3 	.word	0x00010cc3
        case MP_BINARY_OP_ADD: {
            if (!MP_OBJ_IS_TYPE(rhs, &mp_type_list)) {
   10c4c:	6878      	ldr	r0, [r7, #4]
   10c4e:	f7ff feed 	bl	10a2c <MP_OBJ_IS_OBJ>
   10c52:	4603      	mov	r3, r0
   10c54:	f083 0301 	eor.w	r3, r3, #1
   10c58:	b2db      	uxtb	r3, r3
   10c5a:	2b00      	cmp	r3, #0
   10c5c:	d104      	bne.n	10c68 <list_binary_op+0xae>
   10c5e:	687b      	ldr	r3, [r7, #4]
   10c60:	681b      	ldr	r3, [r3, #0]
   10c62:	4a46      	ldr	r2, [pc, #280]	; (10d7c <list_binary_op+0x1c2>)
   10c64:	4293      	cmp	r3, r2
   10c66:	d001      	beq.n	10c6c <list_binary_op+0xb2>
                return MP_OBJ_NULL; // op not supported
   10c68:	2300      	movs	r3, #0
   10c6a:	e082      	b.n	10d72 <list_binary_op+0x1b8>
            }
            mp_obj_list_t *p = MP_OBJ_TO_PTR(rhs);
   10c6c:	687b      	ldr	r3, [r7, #4]
   10c6e:	62bb      	str	r3, [r7, #40]	; 0x28
            mp_obj_list_t *s = list_new(o->len + p->len);
   10c70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   10c72:	689a      	ldr	r2, [r3, #8]
   10c74:	6abb      	ldr	r3, [r7, #40]	; 0x28
   10c76:	689b      	ldr	r3, [r3, #8]
   10c78:	4413      	add	r3, r2
   10c7a:	4618      	mov	r0, r3
   10c7c:	f000 fd22 	bl	116c4 <list_new>
   10c80:	6278      	str	r0, [r7, #36]	; 0x24
            mp_seq_cat(s->items, o->items, o->len, p->items, p->len, mp_obj_t);
   10c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   10c84:	68d8      	ldr	r0, [r3, #12]
   10c86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   10c88:	68d9      	ldr	r1, [r3, #12]
   10c8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   10c8c:	689b      	ldr	r3, [r3, #8]
   10c8e:	009b      	lsls	r3, r3, #2
   10c90:	461a      	mov	r2, r3
   10c92:	f00a fe97 	bl	1b9c4 <memcpy>
   10c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   10c98:	68da      	ldr	r2, [r3, #12]
   10c9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   10c9c:	689b      	ldr	r3, [r3, #8]
   10c9e:	009b      	lsls	r3, r3, #2
   10ca0:	18d0      	adds	r0, r2, r3
   10ca2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   10ca4:	68d9      	ldr	r1, [r3, #12]
   10ca6:	6abb      	ldr	r3, [r7, #40]	; 0x28
   10ca8:	689b      	ldr	r3, [r3, #8]
   10caa:	009b      	lsls	r3, r3, #2
   10cac:	461a      	mov	r2, r3
   10cae:	f00a fe89 	bl	1b9c4 <memcpy>
            return MP_OBJ_FROM_PTR(s);
   10cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   10cb4:	e05d      	b.n	10d72 <list_binary_op+0x1b8>
        }
        case MP_BINARY_OP_INPLACE_ADD: {
            list_extend(lhs, rhs);
   10cb6:	6879      	ldr	r1, [r7, #4]
   10cb8:	68b8      	ldr	r0, [r7, #8]
   10cba:	f000 f905 	bl	10ec8 <list_extend>
            return lhs;
   10cbe:	68bb      	ldr	r3, [r7, #8]
   10cc0:	e057      	b.n	10d72 <list_binary_op+0x1b8>
        }
        case MP_BINARY_OP_MULTIPLY: {
            mp_int_t n;
            if (!mp_obj_get_int_maybe(rhs, &n)) {
   10cc2:	f107 0314 	add.w	r3, r7, #20
   10cc6:	4619      	mov	r1, r3
   10cc8:	6878      	ldr	r0, [r7, #4]
   10cca:	f7fc ff79 	bl	dbc0 <mp_obj_get_int_maybe>
   10cce:	4603      	mov	r3, r0
   10cd0:	f083 0301 	eor.w	r3, r3, #1
   10cd4:	b2db      	uxtb	r3, r3
   10cd6:	2b00      	cmp	r3, #0
   10cd8:	d001      	beq.n	10cde <list_binary_op+0x124>
                return MP_OBJ_NULL; // op not supported
   10cda:	2300      	movs	r3, #0
   10cdc:	e049      	b.n	10d72 <list_binary_op+0x1b8>
            }
            if (n < 0) {
   10cde:	697b      	ldr	r3, [r7, #20]
   10ce0:	2b00      	cmp	r3, #0
   10ce2:	da01      	bge.n	10ce8 <list_binary_op+0x12e>
                n = 0;
   10ce4:	2300      	movs	r3, #0
   10ce6:	617b      	str	r3, [r7, #20]
            }
            mp_obj_list_t *s = list_new(o->len * n);
   10ce8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   10cea:	689b      	ldr	r3, [r3, #8]
   10cec:	697a      	ldr	r2, [r7, #20]
   10cee:	fb02 f303 	mul.w	r3, r2, r3
   10cf2:	4618      	mov	r0, r3
   10cf4:	f000 fce6 	bl	116c4 <list_new>
   10cf8:	6238      	str	r0, [r7, #32]
            mp_seq_multiply(o->items, sizeof(*o->items), o->len, n, s->items);
   10cfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   10cfc:	68d8      	ldr	r0, [r3, #12]
   10cfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   10d00:	689a      	ldr	r2, [r3, #8]
   10d02:	697b      	ldr	r3, [r7, #20]
   10d04:	4619      	mov	r1, r3
   10d06:	6a3b      	ldr	r3, [r7, #32]
   10d08:	68db      	ldr	r3, [r3, #12]
   10d0a:	9300      	str	r3, [sp, #0]
   10d0c:	460b      	mov	r3, r1
   10d0e:	2104      	movs	r1, #4
   10d10:	f006 fbdc 	bl	174cc <mp_seq_multiply>
            return MP_OBJ_FROM_PTR(s);
   10d14:	6a3b      	ldr	r3, [r7, #32]
   10d16:	e02c      	b.n	10d72 <list_binary_op+0x1b8>
        case MP_BINARY_OP_EQUAL:
        case MP_BINARY_OP_LESS:
        case MP_BINARY_OP_LESS_EQUAL:
        case MP_BINARY_OP_MORE:
        case MP_BINARY_OP_MORE_EQUAL: {
            if (!MP_OBJ_IS_TYPE(rhs, &mp_type_list)) {
   10d18:	6878      	ldr	r0, [r7, #4]
   10d1a:	f7ff fe87 	bl	10a2c <MP_OBJ_IS_OBJ>
   10d1e:	4603      	mov	r3, r0
   10d20:	f083 0301 	eor.w	r3, r3, #1
   10d24:	b2db      	uxtb	r3, r3
   10d26:	2b00      	cmp	r3, #0
   10d28:	d104      	bne.n	10d34 <list_binary_op+0x17a>
   10d2a:	687b      	ldr	r3, [r7, #4]
   10d2c:	681b      	ldr	r3, [r3, #0]
   10d2e:	4a13      	ldr	r2, [pc, #76]	; (10d7c <list_binary_op+0x1c2>)
   10d30:	4293      	cmp	r3, r2
   10d32:	d006      	beq.n	10d42 <list_binary_op+0x188>
                if (op == MP_BINARY_OP_EQUAL) {
   10d34:	68fb      	ldr	r3, [r7, #12]
   10d36:	2b02      	cmp	r3, #2
   10d38:	d101      	bne.n	10d3e <list_binary_op+0x184>
                    return mp_const_false;
   10d3a:	4b11      	ldr	r3, [pc, #68]	; (10d80 <list_binary_op+0x1c6>)
   10d3c:	e019      	b.n	10d72 <list_binary_op+0x1b8>
                }
                return MP_OBJ_NULL; // op not supported
   10d3e:	2300      	movs	r3, #0
   10d40:	e017      	b.n	10d72 <list_binary_op+0x1b8>
            }

            mp_obj_list_t *another = MP_OBJ_TO_PTR(rhs);
   10d42:	687b      	ldr	r3, [r7, #4]
   10d44:	61fb      	str	r3, [r7, #28]
            bool res = mp_seq_cmp_objs(op, o->items, o->len, another->items, another->len);
   10d46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   10d48:	68d9      	ldr	r1, [r3, #12]
   10d4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   10d4c:	689a      	ldr	r2, [r3, #8]
   10d4e:	69fb      	ldr	r3, [r7, #28]
   10d50:	68d8      	ldr	r0, [r3, #12]
   10d52:	69fb      	ldr	r3, [r7, #28]
   10d54:	689b      	ldr	r3, [r3, #8]
   10d56:	9300      	str	r3, [sp, #0]
   10d58:	4603      	mov	r3, r0
   10d5a:	68f8      	ldr	r0, [r7, #12]
   10d5c:	f006 fc77 	bl	1764e <mp_seq_cmp_objs>
   10d60:	4603      	mov	r3, r0
   10d62:	76fb      	strb	r3, [r7, #27]
            return mp_obj_new_bool(res);
   10d64:	7efb      	ldrb	r3, [r7, #27]
   10d66:	4618      	mov	r0, r3
   10d68:	f7ff fe72 	bl	10a50 <mp_obj_new_bool>
   10d6c:	4603      	mov	r3, r0
   10d6e:	e000      	b.n	10d72 <list_binary_op+0x1b8>
        }

        default:
            return MP_OBJ_NULL; // op not supported
   10d70:	2300      	movs	r3, #0
    }
}
   10d72:	4618      	mov	r0, r3
   10d74:	3730      	adds	r7, #48	; 0x30
   10d76:	46bd      	mov	sp, r7
   10d78:	bd80      	pop	{r7, pc}
   10d7a:	bf00      	nop
   10d7c:	00020f7c 	.word	0x00020f7c
   10d80:	0001f9bc 	.word	0x0001f9bc

00010d84 <list_subscr>:

STATIC mp_obj_t list_subscr(mp_obj_t self_in, mp_obj_t index, mp_obj_t value) {
   10d84:	b580      	push	{r7, lr}
   10d86:	b088      	sub	sp, #32
   10d88:	af00      	add	r7, sp, #0
   10d8a:	60f8      	str	r0, [r7, #12]
   10d8c:	60b9      	str	r1, [r7, #8]
   10d8e:	607a      	str	r2, [r7, #4]
    if (value == MP_OBJ_NULL) {
   10d90:	687b      	ldr	r3, [r7, #4]
   10d92:	2b00      	cmp	r3, #0
   10d94:	d10b      	bne.n	10dae <list_subscr+0x2a>
            mp_seq_clear(self->items, self->len + len_adj, self->len, sizeof(*self->items));
            self->len += len_adj;
            return mp_const_none;
        }
#endif
        mp_obj_t args[2] = {self_in, index};
   10d96:	68fb      	ldr	r3, [r7, #12]
   10d98:	613b      	str	r3, [r7, #16]
   10d9a:	68bb      	ldr	r3, [r7, #8]
   10d9c:	617b      	str	r3, [r7, #20]
        list_pop(2, args);
   10d9e:	f107 0310 	add.w	r3, r7, #16
   10da2:	4619      	mov	r1, r3
   10da4:	2002      	movs	r0, #2
   10da6:	f000 f913 	bl	10fd0 <list_pop>
        return mp_const_none;
   10daa:	4b10      	ldr	r3, [pc, #64]	; (10dec <list_subscr+0x68>)
   10dac:	e01a      	b.n	10de4 <list_subscr+0x60>
    } else if (value == MP_OBJ_SENTINEL) {
   10dae:	687b      	ldr	r3, [r7, #4]
   10db0:	2b08      	cmp	r3, #8
   10db2:	d111      	bne.n	10dd8 <list_subscr+0x54>
        // load
        mp_obj_list_t *self = MP_OBJ_TO_PTR(self_in);
   10db4:	68fb      	ldr	r3, [r7, #12]
   10db6:	61fb      	str	r3, [r7, #28]
            mp_obj_list_t *res = list_new(slice.stop - slice.start);
            mp_seq_copy(res->items, self->items + slice.start, res->len, mp_obj_t);
            return MP_OBJ_FROM_PTR(res);
        }
#endif
        size_t index_val = mp_get_index(self->base.type, self->len, index, false);
   10db8:	69fb      	ldr	r3, [r7, #28]
   10dba:	6818      	ldr	r0, [r3, #0]
   10dbc:	69fb      	ldr	r3, [r7, #28]
   10dbe:	6899      	ldr	r1, [r3, #8]
   10dc0:	2300      	movs	r3, #0
   10dc2:	68ba      	ldr	r2, [r7, #8]
   10dc4:	f7fc ff8c 	bl	dce0 <mp_get_index>
   10dc8:	61b8      	str	r0, [r7, #24]
        return self->items[index_val];
   10dca:	69fb      	ldr	r3, [r7, #28]
   10dcc:	68da      	ldr	r2, [r3, #12]
   10dce:	69bb      	ldr	r3, [r7, #24]
   10dd0:	009b      	lsls	r3, r3, #2
   10dd2:	4413      	add	r3, r2
   10dd4:	681b      	ldr	r3, [r3, #0]
   10dd6:	e005      	b.n	10de4 <list_subscr+0x60>
            }
            self->len += len_adj;
            return mp_const_none;
        }
#endif
        mp_obj_list_store(self_in, index, value);
   10dd8:	687a      	ldr	r2, [r7, #4]
   10dda:	68b9      	ldr	r1, [r7, #8]
   10ddc:	68f8      	ldr	r0, [r7, #12]
   10dde:	f000 fcce 	bl	1177e <mp_obj_list_store>
        return mp_const_none;
   10de2:	4b02      	ldr	r3, [pc, #8]	; (10dec <list_subscr+0x68>)
    }
}
   10de4:	4618      	mov	r0, r3
   10de6:	3720      	adds	r7, #32
   10de8:	46bd      	mov	sp, r7
   10dea:	bd80      	pop	{r7, pc}
   10dec:	000212b4 	.word	0x000212b4

00010df0 <list_getiter>:

STATIC mp_obj_t list_getiter(mp_obj_t o_in, mp_obj_iter_buf_t *iter_buf) {
   10df0:	b580      	push	{r7, lr}
   10df2:	b082      	sub	sp, #8
   10df4:	af00      	add	r7, sp, #0
   10df6:	6078      	str	r0, [r7, #4]
   10df8:	6039      	str	r1, [r7, #0]
    return mp_obj_new_list_iterator(o_in, 0, iter_buf);
   10dfa:	683a      	ldr	r2, [r7, #0]
   10dfc:	2100      	movs	r1, #0
   10dfe:	6878      	ldr	r0, [r7, #4]
   10e00:	f000 fcfe 	bl	11800 <mp_obj_new_list_iterator>
   10e04:	4603      	mov	r3, r0
}
   10e06:	4618      	mov	r0, r3
   10e08:	3708      	adds	r7, #8
   10e0a:	46bd      	mov	sp, r7
   10e0c:	bd80      	pop	{r7, pc}

00010e0e <mp_obj_list_append>:

mp_obj_t mp_obj_list_append(mp_obj_t self_in, mp_obj_t arg) {
   10e0e:	b580      	push	{r7, lr}
   10e10:	b084      	sub	sp, #16
   10e12:	af00      	add	r7, sp, #0
   10e14:	6078      	str	r0, [r7, #4]
   10e16:	6039      	str	r1, [r7, #0]
    mp_check_self(MP_OBJ_IS_TYPE(self_in, &mp_type_list));
   10e18:	6878      	ldr	r0, [r7, #4]
   10e1a:	f7ff fe07 	bl	10a2c <MP_OBJ_IS_OBJ>
   10e1e:	4603      	mov	r3, r0
   10e20:	2b00      	cmp	r3, #0
   10e22:	d004      	beq.n	10e2e <mp_obj_list_append+0x20>
   10e24:	687b      	ldr	r3, [r7, #4]
   10e26:	681b      	ldr	r3, [r3, #0]
   10e28:	4a22      	ldr	r2, [pc, #136]	; (10eb4 <mp_obj_list_append+0xa6>)
   10e2a:	4293      	cmp	r3, r2
   10e2c:	d005      	beq.n	10e3a <mp_obj_list_append+0x2c>
   10e2e:	4b22      	ldr	r3, [pc, #136]	; (10eb8 <mp_obj_list_append+0xaa>)
   10e30:	4a22      	ldr	r2, [pc, #136]	; (10ebc <mp_obj_list_append+0xae>)
   10e32:	21eb      	movs	r1, #235	; 0xeb
   10e34:	4822      	ldr	r0, [pc, #136]	; (10ec0 <mp_obj_list_append+0xb2>)
   10e36:	f00a f9c1 	bl	1b1bc <__assert_func>
    mp_obj_list_t *self = MP_OBJ_TO_PTR(self_in);
   10e3a:	687b      	ldr	r3, [r7, #4]
   10e3c:	60fb      	str	r3, [r7, #12]
    if (self->len >= self->alloc) {
   10e3e:	68fb      	ldr	r3, [r7, #12]
   10e40:	689a      	ldr	r2, [r3, #8]
   10e42:	68fb      	ldr	r3, [r7, #12]
   10e44:	685b      	ldr	r3, [r3, #4]
   10e46:	429a      	cmp	r2, r3
   10e48:	d324      	bcc.n	10e94 <mp_obj_list_append+0x86>
        self->items = m_renew(mp_obj_t, self->items, self->alloc, self->alloc * 2);
   10e4a:	68fb      	ldr	r3, [r7, #12]
   10e4c:	68da      	ldr	r2, [r3, #12]
   10e4e:	68fb      	ldr	r3, [r7, #12]
   10e50:	685b      	ldr	r3, [r3, #4]
   10e52:	00db      	lsls	r3, r3, #3
   10e54:	4619      	mov	r1, r3
   10e56:	4610      	mov	r0, r2
   10e58:	f7ef fa92 	bl	380 <m_realloc>
   10e5c:	4602      	mov	r2, r0
   10e5e:	68fb      	ldr	r3, [r7, #12]
   10e60:	60da      	str	r2, [r3, #12]
        self->alloc *= 2;
   10e62:	68fb      	ldr	r3, [r7, #12]
   10e64:	685b      	ldr	r3, [r3, #4]
   10e66:	005a      	lsls	r2, r3, #1
   10e68:	68fb      	ldr	r3, [r7, #12]
   10e6a:	605a      	str	r2, [r3, #4]
        mp_seq_clear(self->items, self->len + 1, self->alloc, sizeof(*self->items));
   10e6c:	68fb      	ldr	r3, [r7, #12]
   10e6e:	68da      	ldr	r2, [r3, #12]
   10e70:	68fb      	ldr	r3, [r7, #12]
   10e72:	689b      	ldr	r3, [r3, #8]
   10e74:	3301      	adds	r3, #1
   10e76:	009b      	lsls	r3, r3, #2
   10e78:	18d0      	adds	r0, r2, r3
   10e7a:	68fb      	ldr	r3, [r7, #12]
   10e7c:	685a      	ldr	r2, [r3, #4]
   10e7e:	68fb      	ldr	r3, [r7, #12]
   10e80:	689b      	ldr	r3, [r3, #8]
   10e82:	1ad3      	subs	r3, r2, r3
   10e84:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   10e88:	3b01      	subs	r3, #1
   10e8a:	009b      	lsls	r3, r3, #2
   10e8c:	461a      	mov	r2, r3
   10e8e:	2100      	movs	r1, #0
   10e90:	f00a fe32 	bl	1baf8 <memset>
    }
    self->items[self->len++] = arg;
   10e94:	68fb      	ldr	r3, [r7, #12]
   10e96:	68da      	ldr	r2, [r3, #12]
   10e98:	68fb      	ldr	r3, [r7, #12]
   10e9a:	689b      	ldr	r3, [r3, #8]
   10e9c:	1c58      	adds	r0, r3, #1
   10e9e:	68f9      	ldr	r1, [r7, #12]
   10ea0:	6088      	str	r0, [r1, #8]
   10ea2:	009b      	lsls	r3, r3, #2
   10ea4:	4413      	add	r3, r2
   10ea6:	683a      	ldr	r2, [r7, #0]
   10ea8:	601a      	str	r2, [r3, #0]
    return mp_const_none; // return None, as per CPython
   10eaa:	4b06      	ldr	r3, [pc, #24]	; (10ec4 <mp_obj_list_append+0xb6>)
}
   10eac:	4618      	mov	r0, r3
   10eae:	3710      	adds	r7, #16
   10eb0:	46bd      	mov	sp, r7
   10eb2:	bd80      	pop	{r7, pc}
   10eb4:	00020f7c 	.word	0x00020f7c
   10eb8:	00020d6c 	.word	0x00020d6c
   10ebc:	00020fb8 	.word	0x00020fb8
   10ec0:	00020dc8 	.word	0x00020dc8
   10ec4:	000212b4 	.word	0x000212b4

00010ec8 <list_extend>:

STATIC mp_obj_t list_extend(mp_obj_t self_in, mp_obj_t arg_in) {
   10ec8:	b580      	push	{r7, lr}
   10eca:	b084      	sub	sp, #16
   10ecc:	af00      	add	r7, sp, #0
   10ece:	6078      	str	r0, [r7, #4]
   10ed0:	6039      	str	r1, [r7, #0]
    mp_check_self(MP_OBJ_IS_TYPE(self_in, &mp_type_list));
   10ed2:	6878      	ldr	r0, [r7, #4]
   10ed4:	f7ff fdaa 	bl	10a2c <MP_OBJ_IS_OBJ>
   10ed8:	4603      	mov	r3, r0
   10eda:	2b00      	cmp	r3, #0
   10edc:	d004      	beq.n	10ee8 <list_extend+0x20>
   10ede:	687b      	ldr	r3, [r7, #4]
   10ee0:	681b      	ldr	r3, [r3, #0]
   10ee2:	4a36      	ldr	r2, [pc, #216]	; (10fbc <list_extend+0xf4>)
   10ee4:	4293      	cmp	r3, r2
   10ee6:	d005      	beq.n	10ef4 <list_extend+0x2c>
   10ee8:	4b35      	ldr	r3, [pc, #212]	; (10fc0 <list_extend+0xf8>)
   10eea:	4a36      	ldr	r2, [pc, #216]	; (10fc4 <list_extend+0xfc>)
   10eec:	21f7      	movs	r1, #247	; 0xf7
   10eee:	4836      	ldr	r0, [pc, #216]	; (10fc8 <list_extend+0x100>)
   10ef0:	f00a f964 	bl	1b1bc <__assert_func>
    if (MP_OBJ_IS_TYPE(arg_in, &mp_type_list)) {
   10ef4:	6838      	ldr	r0, [r7, #0]
   10ef6:	f7ff fd99 	bl	10a2c <MP_OBJ_IS_OBJ>
   10efa:	4603      	mov	r3, r0
   10efc:	2b00      	cmp	r3, #0
   10efe:	d054      	beq.n	10faa <list_extend+0xe2>
   10f00:	683b      	ldr	r3, [r7, #0]
   10f02:	681b      	ldr	r3, [r3, #0]
   10f04:	4a2d      	ldr	r2, [pc, #180]	; (10fbc <list_extend+0xf4>)
   10f06:	4293      	cmp	r3, r2
   10f08:	d14f      	bne.n	10faa <list_extend+0xe2>
        mp_obj_list_t *self = MP_OBJ_TO_PTR(self_in);
   10f0a:	687b      	ldr	r3, [r7, #4]
   10f0c:	60fb      	str	r3, [r7, #12]
        mp_obj_list_t *arg = MP_OBJ_TO_PTR(arg_in);
   10f0e:	683b      	ldr	r3, [r7, #0]
   10f10:	60bb      	str	r3, [r7, #8]

        if (self->len + arg->len > self->alloc) {
   10f12:	68fb      	ldr	r3, [r7, #12]
   10f14:	689a      	ldr	r2, [r3, #8]
   10f16:	68bb      	ldr	r3, [r7, #8]
   10f18:	689b      	ldr	r3, [r3, #8]
   10f1a:	441a      	add	r2, r3
   10f1c:	68fb      	ldr	r3, [r7, #12]
   10f1e:	685b      	ldr	r3, [r3, #4]
   10f20:	429a      	cmp	r2, r3
   10f22:	d92c      	bls.n	10f7e <list_extend+0xb6>
            // TODO: use alloc policy for "4"
            self->items = m_renew(mp_obj_t, self->items, self->alloc, self->len + arg->len + 4);
   10f24:	68fb      	ldr	r3, [r7, #12]
   10f26:	68d8      	ldr	r0, [r3, #12]
   10f28:	68fb      	ldr	r3, [r7, #12]
   10f2a:	689a      	ldr	r2, [r3, #8]
   10f2c:	68bb      	ldr	r3, [r7, #8]
   10f2e:	689b      	ldr	r3, [r3, #8]
   10f30:	4413      	add	r3, r2
   10f32:	3304      	adds	r3, #4
   10f34:	009b      	lsls	r3, r3, #2
   10f36:	4619      	mov	r1, r3
   10f38:	f7ef fa22 	bl	380 <m_realloc>
   10f3c:	4602      	mov	r2, r0
   10f3e:	68fb      	ldr	r3, [r7, #12]
   10f40:	60da      	str	r2, [r3, #12]
            self->alloc = self->len + arg->len + 4;
   10f42:	68fb      	ldr	r3, [r7, #12]
   10f44:	689a      	ldr	r2, [r3, #8]
   10f46:	68bb      	ldr	r3, [r7, #8]
   10f48:	689b      	ldr	r3, [r3, #8]
   10f4a:	4413      	add	r3, r2
   10f4c:	1d1a      	adds	r2, r3, #4
   10f4e:	68fb      	ldr	r3, [r7, #12]
   10f50:	605a      	str	r2, [r3, #4]
            mp_seq_clear(self->items, self->len + arg->len, self->alloc, sizeof(*self->items));
   10f52:	68fb      	ldr	r3, [r7, #12]
   10f54:	68da      	ldr	r2, [r3, #12]
   10f56:	68fb      	ldr	r3, [r7, #12]
   10f58:	6899      	ldr	r1, [r3, #8]
   10f5a:	68bb      	ldr	r3, [r7, #8]
   10f5c:	689b      	ldr	r3, [r3, #8]
   10f5e:	440b      	add	r3, r1
   10f60:	009b      	lsls	r3, r3, #2
   10f62:	18d0      	adds	r0, r2, r3
   10f64:	68fb      	ldr	r3, [r7, #12]
   10f66:	685a      	ldr	r2, [r3, #4]
   10f68:	68fb      	ldr	r3, [r7, #12]
   10f6a:	6899      	ldr	r1, [r3, #8]
   10f6c:	68bb      	ldr	r3, [r7, #8]
   10f6e:	689b      	ldr	r3, [r3, #8]
   10f70:	440b      	add	r3, r1
   10f72:	1ad3      	subs	r3, r2, r3
   10f74:	009b      	lsls	r3, r3, #2
   10f76:	461a      	mov	r2, r3
   10f78:	2100      	movs	r1, #0
   10f7a:	f00a fdbd 	bl	1baf8 <memset>
        }

        memcpy(self->items + self->len, arg->items, sizeof(mp_obj_t) * arg->len);
   10f7e:	68fb      	ldr	r3, [r7, #12]
   10f80:	68da      	ldr	r2, [r3, #12]
   10f82:	68fb      	ldr	r3, [r7, #12]
   10f84:	689b      	ldr	r3, [r3, #8]
   10f86:	009b      	lsls	r3, r3, #2
   10f88:	18d0      	adds	r0, r2, r3
   10f8a:	68bb      	ldr	r3, [r7, #8]
   10f8c:	68d9      	ldr	r1, [r3, #12]
   10f8e:	68bb      	ldr	r3, [r7, #8]
   10f90:	689b      	ldr	r3, [r3, #8]
   10f92:	009b      	lsls	r3, r3, #2
   10f94:	461a      	mov	r2, r3
   10f96:	f00a fd15 	bl	1b9c4 <memcpy>
        self->len += arg->len;
   10f9a:	68fb      	ldr	r3, [r7, #12]
   10f9c:	689a      	ldr	r2, [r3, #8]
   10f9e:	68bb      	ldr	r3, [r7, #8]
   10fa0:	689b      	ldr	r3, [r3, #8]
   10fa2:	441a      	add	r2, r3
   10fa4:	68fb      	ldr	r3, [r7, #12]
   10fa6:	609a      	str	r2, [r3, #8]
    if (MP_OBJ_IS_TYPE(arg_in, &mp_type_list)) {
   10fa8:	e003      	b.n	10fb2 <list_extend+0xea>
    } else {
        list_extend_from_iter(self_in, arg_in);
   10faa:	6839      	ldr	r1, [r7, #0]
   10fac:	6878      	ldr	r0, [r7, #4]
   10fae:	f7ff fd9d 	bl	10aec <list_extend_from_iter>
    }
    return mp_const_none; // return None, as per CPython
   10fb2:	4b06      	ldr	r3, [pc, #24]	; (10fcc <list_extend+0x104>)
}
   10fb4:	4618      	mov	r0, r3
   10fb6:	3710      	adds	r7, #16
   10fb8:	46bd      	mov	sp, r7
   10fba:	bd80      	pop	{r7, pc}
   10fbc:	00020f7c 	.word	0x00020f7c
   10fc0:	00020d6c 	.word	0x00020d6c
   10fc4:	00020fcc 	.word	0x00020fcc
   10fc8:	00020dc8 	.word	0x00020dc8
   10fcc:	000212b4 	.word	0x000212b4

00010fd0 <list_pop>:

STATIC mp_obj_t list_pop(size_t n_args, const mp_obj_t *args) {
   10fd0:	b580      	push	{r7, lr}
   10fd2:	b086      	sub	sp, #24
   10fd4:	af00      	add	r7, sp, #0
   10fd6:	6078      	str	r0, [r7, #4]
   10fd8:	6039      	str	r1, [r7, #0]
    mp_check_self(MP_OBJ_IS_TYPE(args[0], &mp_type_list));
   10fda:	683b      	ldr	r3, [r7, #0]
   10fdc:	681b      	ldr	r3, [r3, #0]
   10fde:	4618      	mov	r0, r3
   10fe0:	f7ff fd24 	bl	10a2c <MP_OBJ_IS_OBJ>
   10fe4:	4603      	mov	r3, r0
   10fe6:	2b00      	cmp	r3, #0
   10fe8:	d005      	beq.n	10ff6 <list_pop+0x26>
   10fea:	683b      	ldr	r3, [r7, #0]
   10fec:	681b      	ldr	r3, [r3, #0]
   10fee:	681b      	ldr	r3, [r3, #0]
   10ff0:	4a36      	ldr	r2, [pc, #216]	; (110cc <list_pop+0xfc>)
   10ff2:	4293      	cmp	r3, r2
   10ff4:	d006      	beq.n	11004 <list_pop+0x34>
   10ff6:	4b36      	ldr	r3, [pc, #216]	; (110d0 <list_pop+0x100>)
   10ff8:	4a36      	ldr	r2, [pc, #216]	; (110d4 <list_pop+0x104>)
   10ffa:	f44f 7186 	mov.w	r1, #268	; 0x10c
   10ffe:	4836      	ldr	r0, [pc, #216]	; (110d8 <list_pop+0x108>)
   11000:	f00a f8dc 	bl	1b1bc <__assert_func>
    mp_obj_list_t *self = MP_OBJ_TO_PTR(args[0]);
   11004:	683b      	ldr	r3, [r7, #0]
   11006:	681b      	ldr	r3, [r3, #0]
   11008:	617b      	str	r3, [r7, #20]
    if (self->len == 0) {
   1100a:	697b      	ldr	r3, [r7, #20]
   1100c:	689b      	ldr	r3, [r3, #8]
   1100e:	2b00      	cmp	r3, #0
   11010:	d103      	bne.n	1101a <list_pop+0x4a>
        mp_raise_msg(&mp_type_IndexError, "pop from empty list");
   11012:	4932      	ldr	r1, [pc, #200]	; (110dc <list_pop+0x10c>)
   11014:	4832      	ldr	r0, [pc, #200]	; (110e0 <list_pop+0x110>)
   11016:	f7fb ff63 	bl	cee0 <mp_raise_msg>
    }
    size_t index = mp_get_index(self->base.type, self->len, n_args == 1 ? MP_OBJ_NEW_SMALL_INT(-1) : args[1], false);
   1101a:	697b      	ldr	r3, [r7, #20]
   1101c:	6818      	ldr	r0, [r3, #0]
   1101e:	697b      	ldr	r3, [r7, #20]
   11020:	6899      	ldr	r1, [r3, #8]
   11022:	687b      	ldr	r3, [r7, #4]
   11024:	2b01      	cmp	r3, #1
   11026:	d002      	beq.n	1102e <list_pop+0x5e>
   11028:	683b      	ldr	r3, [r7, #0]
   1102a:	685a      	ldr	r2, [r3, #4]
   1102c:	e001      	b.n	11032 <list_pop+0x62>
   1102e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   11032:	2300      	movs	r3, #0
   11034:	f7fc fe54 	bl	dce0 <mp_get_index>
   11038:	6138      	str	r0, [r7, #16]
    mp_obj_t ret = self->items[index];
   1103a:	697b      	ldr	r3, [r7, #20]
   1103c:	68da      	ldr	r2, [r3, #12]
   1103e:	693b      	ldr	r3, [r7, #16]
   11040:	009b      	lsls	r3, r3, #2
   11042:	4413      	add	r3, r2
   11044:	681b      	ldr	r3, [r3, #0]
   11046:	60fb      	str	r3, [r7, #12]
    self->len -= 1;
   11048:	697b      	ldr	r3, [r7, #20]
   1104a:	689b      	ldr	r3, [r3, #8]
   1104c:	1e5a      	subs	r2, r3, #1
   1104e:	697b      	ldr	r3, [r7, #20]
   11050:	609a      	str	r2, [r3, #8]
    memmove(self->items + index, self->items + index + 1, (self->len - index) * sizeof(mp_obj_t));
   11052:	697b      	ldr	r3, [r7, #20]
   11054:	68da      	ldr	r2, [r3, #12]
   11056:	693b      	ldr	r3, [r7, #16]
   11058:	009b      	lsls	r3, r3, #2
   1105a:	18d0      	adds	r0, r2, r3
   1105c:	697b      	ldr	r3, [r7, #20]
   1105e:	68da      	ldr	r2, [r3, #12]
   11060:	693b      	ldr	r3, [r7, #16]
   11062:	3301      	adds	r3, #1
   11064:	009b      	lsls	r3, r3, #2
   11066:	18d1      	adds	r1, r2, r3
   11068:	697b      	ldr	r3, [r7, #20]
   1106a:	689a      	ldr	r2, [r3, #8]
   1106c:	693b      	ldr	r3, [r7, #16]
   1106e:	1ad3      	subs	r3, r2, r3
   11070:	009b      	lsls	r3, r3, #2
   11072:	461a      	mov	r2, r3
   11074:	f00a fd0b 	bl	1ba8e <memmove>
    // Clear stale pointer from slot which just got freed to prevent GC issues
    self->items[self->len] = MP_OBJ_NULL;
   11078:	697b      	ldr	r3, [r7, #20]
   1107a:	68da      	ldr	r2, [r3, #12]
   1107c:	697b      	ldr	r3, [r7, #20]
   1107e:	689b      	ldr	r3, [r3, #8]
   11080:	009b      	lsls	r3, r3, #2
   11082:	4413      	add	r3, r2
   11084:	2200      	movs	r2, #0
   11086:	601a      	str	r2, [r3, #0]
    if (self->alloc > LIST_MIN_ALLOC && self->alloc > 2 * self->len) {
   11088:	697b      	ldr	r3, [r7, #20]
   1108a:	685b      	ldr	r3, [r3, #4]
   1108c:	2b04      	cmp	r3, #4
   1108e:	d918      	bls.n	110c2 <list_pop+0xf2>
   11090:	697b      	ldr	r3, [r7, #20]
   11092:	685a      	ldr	r2, [r3, #4]
   11094:	697b      	ldr	r3, [r7, #20]
   11096:	689b      	ldr	r3, [r3, #8]
   11098:	005b      	lsls	r3, r3, #1
   1109a:	429a      	cmp	r2, r3
   1109c:	d911      	bls.n	110c2 <list_pop+0xf2>
        self->items = m_renew(mp_obj_t, self->items, self->alloc, self->alloc/2);
   1109e:	697b      	ldr	r3, [r7, #20]
   110a0:	68da      	ldr	r2, [r3, #12]
   110a2:	697b      	ldr	r3, [r7, #20]
   110a4:	685b      	ldr	r3, [r3, #4]
   110a6:	085b      	lsrs	r3, r3, #1
   110a8:	009b      	lsls	r3, r3, #2
   110aa:	4619      	mov	r1, r3
   110ac:	4610      	mov	r0, r2
   110ae:	f7ef f967 	bl	380 <m_realloc>
   110b2:	4602      	mov	r2, r0
   110b4:	697b      	ldr	r3, [r7, #20]
   110b6:	60da      	str	r2, [r3, #12]
        self->alloc /= 2;
   110b8:	697b      	ldr	r3, [r7, #20]
   110ba:	685b      	ldr	r3, [r3, #4]
   110bc:	085a      	lsrs	r2, r3, #1
   110be:	697b      	ldr	r3, [r7, #20]
   110c0:	605a      	str	r2, [r3, #4]
    }
    return ret;
   110c2:	68fb      	ldr	r3, [r7, #12]
}
   110c4:	4618      	mov	r0, r3
   110c6:	3718      	adds	r7, #24
   110c8:	46bd      	mov	sp, r7
   110ca:	bd80      	pop	{r7, pc}
   110cc:	00020f7c 	.word	0x00020f7c
   110d0:	00020ddc 	.word	0x00020ddc
   110d4:	00020fd8 	.word	0x00020fd8
   110d8:	00020dc8 	.word	0x00020dc8
   110dc:	00020e38 	.word	0x00020e38
   110e0:	000202c8 	.word	0x000202c8

000110e4 <mp_quicksort>:

STATIC void mp_quicksort(mp_obj_t *head, mp_obj_t *tail, mp_obj_t key_fn, mp_obj_t binop_less_result) {
   110e4:	b580      	push	{r7, lr}
   110e6:	b08a      	sub	sp, #40	; 0x28
   110e8:	af00      	add	r7, sp, #0
   110ea:	60f8      	str	r0, [r7, #12]
   110ec:	60b9      	str	r1, [r7, #8]
   110ee:	607a      	str	r2, [r7, #4]
   110f0:	603b      	str	r3, [r7, #0]
    MP_STACK_CHECK();
    while (head < tail) {
   110f2:	e085      	b.n	11200 <mp_quicksort+0x11c>
        mp_obj_t *h = head - 1;
   110f4:	68fb      	ldr	r3, [r7, #12]
   110f6:	3b04      	subs	r3, #4
   110f8:	627b      	str	r3, [r7, #36]	; 0x24
        mp_obj_t *t = tail;
   110fa:	68bb      	ldr	r3, [r7, #8]
   110fc:	623b      	str	r3, [r7, #32]
        mp_obj_t v = key_fn == MP_OBJ_NULL ? tail[0] : mp_call_function_1(key_fn, tail[0]); // get pivot using key_fn
   110fe:	687b      	ldr	r3, [r7, #4]
   11100:	2b00      	cmp	r3, #0
   11102:	d102      	bne.n	1110a <mp_quicksort+0x26>
   11104:	68bb      	ldr	r3, [r7, #8]
   11106:	681b      	ldr	r3, [r3, #0]
   11108:	e006      	b.n	11118 <mp_quicksort+0x34>
   1110a:	68bb      	ldr	r3, [r7, #8]
   1110c:	681b      	ldr	r3, [r3, #0]
   1110e:	4619      	mov	r1, r3
   11110:	6878      	ldr	r0, [r7, #4]
   11112:	f7fa fe22 	bl	bd5a <mp_call_function_1>
   11116:	4603      	mov	r3, r0
   11118:	61fb      	str	r3, [r7, #28]
        for (;;) {
            do ++h; while (h < t && mp_binary_op(MP_BINARY_OP_LESS, key_fn == MP_OBJ_NULL ? h[0] : mp_call_function_1(key_fn, h[0]), v) == binop_less_result);
   1111a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1111c:	3304      	adds	r3, #4
   1111e:	627b      	str	r3, [r7, #36]	; 0x24
   11120:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   11122:	6a3b      	ldr	r3, [r7, #32]
   11124:	429a      	cmp	r2, r3
   11126:	d215      	bcs.n	11154 <mp_quicksort+0x70>
   11128:	687b      	ldr	r3, [r7, #4]
   1112a:	2b00      	cmp	r3, #0
   1112c:	d102      	bne.n	11134 <mp_quicksort+0x50>
   1112e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   11130:	681b      	ldr	r3, [r3, #0]
   11132:	e006      	b.n	11142 <mp_quicksort+0x5e>
   11134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   11136:	681b      	ldr	r3, [r3, #0]
   11138:	4619      	mov	r1, r3
   1113a:	6878      	ldr	r0, [r7, #4]
   1113c:	f7fa fe0d 	bl	bd5a <mp_call_function_1>
   11140:	4603      	mov	r3, r0
   11142:	69fa      	ldr	r2, [r7, #28]
   11144:	4619      	mov	r1, r3
   11146:	2000      	movs	r0, #0
   11148:	f7fa fb9a 	bl	b880 <mp_binary_op>
   1114c:	4602      	mov	r2, r0
   1114e:	683b      	ldr	r3, [r7, #0]
   11150:	429a      	cmp	r2, r3
   11152:	d0e2      	beq.n	1111a <mp_quicksort+0x36>
            do --t; while (h < t && mp_binary_op(MP_BINARY_OP_LESS, v, key_fn == MP_OBJ_NULL ? t[0] : mp_call_function_1(key_fn, t[0])) == binop_less_result);
   11154:	6a3b      	ldr	r3, [r7, #32]
   11156:	3b04      	subs	r3, #4
   11158:	623b      	str	r3, [r7, #32]
   1115a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   1115c:	6a3b      	ldr	r3, [r7, #32]
   1115e:	429a      	cmp	r2, r3
   11160:	d215      	bcs.n	1118e <mp_quicksort+0xaa>
   11162:	687b      	ldr	r3, [r7, #4]
   11164:	2b00      	cmp	r3, #0
   11166:	d102      	bne.n	1116e <mp_quicksort+0x8a>
   11168:	6a3b      	ldr	r3, [r7, #32]
   1116a:	681b      	ldr	r3, [r3, #0]
   1116c:	e006      	b.n	1117c <mp_quicksort+0x98>
   1116e:	6a3b      	ldr	r3, [r7, #32]
   11170:	681b      	ldr	r3, [r3, #0]
   11172:	4619      	mov	r1, r3
   11174:	6878      	ldr	r0, [r7, #4]
   11176:	f7fa fdf0 	bl	bd5a <mp_call_function_1>
   1117a:	4603      	mov	r3, r0
   1117c:	461a      	mov	r2, r3
   1117e:	69f9      	ldr	r1, [r7, #28]
   11180:	2000      	movs	r0, #0
   11182:	f7fa fb7d 	bl	b880 <mp_binary_op>
   11186:	4602      	mov	r2, r0
   11188:	683b      	ldr	r3, [r7, #0]
   1118a:	429a      	cmp	r2, r3
   1118c:	d0e2      	beq.n	11154 <mp_quicksort+0x70>
            if (h >= t) break;
   1118e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   11190:	6a3b      	ldr	r3, [r7, #32]
   11192:	429a      	cmp	r2, r3
   11194:	d20a      	bcs.n	111ac <mp_quicksort+0xc8>
            mp_obj_t x = h[0];
   11196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   11198:	681b      	ldr	r3, [r3, #0]
   1119a:	61bb      	str	r3, [r7, #24]
            h[0] = t[0];
   1119c:	6a3b      	ldr	r3, [r7, #32]
   1119e:	681a      	ldr	r2, [r3, #0]
   111a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   111a2:	601a      	str	r2, [r3, #0]
            t[0] = x;
   111a4:	6a3b      	ldr	r3, [r7, #32]
   111a6:	69ba      	ldr	r2, [r7, #24]
   111a8:	601a      	str	r2, [r3, #0]
        for (;;) {
   111aa:	e7b6      	b.n	1111a <mp_quicksort+0x36>
            if (h >= t) break;
   111ac:	bf00      	nop
        }
        mp_obj_t x = h[0];
   111ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   111b0:	681b      	ldr	r3, [r3, #0]
   111b2:	617b      	str	r3, [r7, #20]
        h[0] = tail[0];
   111b4:	68bb      	ldr	r3, [r7, #8]
   111b6:	681a      	ldr	r2, [r3, #0]
   111b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   111ba:	601a      	str	r2, [r3, #0]
        tail[0] = x;
   111bc:	68bb      	ldr	r3, [r7, #8]
   111be:	697a      	ldr	r2, [r7, #20]
   111c0:	601a      	str	r2, [r3, #0]
        // do the smaller recursive call first, to keep stack within O(log(N))
        if (t - head < tail - h - 1) {
   111c2:	6a3a      	ldr	r2, [r7, #32]
   111c4:	68fb      	ldr	r3, [r7, #12]
   111c6:	1ad3      	subs	r3, r2, r3
   111c8:	109b      	asrs	r3, r3, #2
   111ca:	4619      	mov	r1, r3
   111cc:	68ba      	ldr	r2, [r7, #8]
   111ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   111d0:	1ad3      	subs	r3, r2, r3
   111d2:	109b      	asrs	r3, r3, #2
   111d4:	3b01      	subs	r3, #1
   111d6:	4299      	cmp	r1, r3
   111d8:	da09      	bge.n	111ee <mp_quicksort+0x10a>
            mp_quicksort(head, t, key_fn, binop_less_result);
   111da:	683b      	ldr	r3, [r7, #0]
   111dc:	687a      	ldr	r2, [r7, #4]
   111de:	6a39      	ldr	r1, [r7, #32]
   111e0:	68f8      	ldr	r0, [r7, #12]
   111e2:	f7ff ff7f 	bl	110e4 <mp_quicksort>
            head = h + 1;
   111e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   111e8:	3304      	adds	r3, #4
   111ea:	60fb      	str	r3, [r7, #12]
   111ec:	e008      	b.n	11200 <mp_quicksort+0x11c>
        } else {
            mp_quicksort(h + 1, tail, key_fn, binop_less_result);
   111ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   111f0:	1d18      	adds	r0, r3, #4
   111f2:	683b      	ldr	r3, [r7, #0]
   111f4:	687a      	ldr	r2, [r7, #4]
   111f6:	68b9      	ldr	r1, [r7, #8]
   111f8:	f7ff ff74 	bl	110e4 <mp_quicksort>
            tail = t;
   111fc:	6a3b      	ldr	r3, [r7, #32]
   111fe:	60bb      	str	r3, [r7, #8]
    while (head < tail) {
   11200:	68fa      	ldr	r2, [r7, #12]
   11202:	68bb      	ldr	r3, [r7, #8]
   11204:	429a      	cmp	r2, r3
   11206:	f4ff af75 	bcc.w	110f4 <mp_quicksort+0x10>
        }
    }
}
   1120a:	bf00      	nop
   1120c:	3728      	adds	r7, #40	; 0x28
   1120e:	46bd      	mov	sp, r7
   11210:	bd80      	pop	{r7, pc}

00011212 <mp_obj_list_sort>:

// TODO Python defines sort to be stable but ours is not
mp_obj_t mp_obj_list_sort(size_t n_args, const mp_obj_t *pos_args, mp_map_t *kw_args) {
   11212:	b580      	push	{r7, lr}
   11214:	b08a      	sub	sp, #40	; 0x28
   11216:	af02      	add	r7, sp, #8
   11218:	60f8      	str	r0, [r7, #12]
   1121a:	60b9      	str	r1, [r7, #8]
   1121c:	607a      	str	r2, [r7, #4]

    // parse args
    struct {
        mp_arg_val_t key, reverse;
    } args;
    mp_arg_parse_all(n_args - 1, pos_args + 1, kw_args,
   1121e:	68fb      	ldr	r3, [r7, #12]
   11220:	1e58      	subs	r0, r3, #1
   11222:	68bb      	ldr	r3, [r7, #8]
   11224:	1d19      	adds	r1, r3, #4
   11226:	f107 0314 	add.w	r3, r7, #20
   1122a:	9301      	str	r3, [sp, #4]
   1122c:	4b20      	ldr	r3, [pc, #128]	; (112b0 <mp_obj_list_sort+0x9e>)
   1122e:	9300      	str	r3, [sp, #0]
   11230:	2302      	movs	r3, #2
   11232:	687a      	ldr	r2, [r7, #4]
   11234:	f7fb fec8 	bl	cfc8 <mp_arg_parse_all>
        MP_ARRAY_SIZE(allowed_args), allowed_args, (mp_arg_val_t*)&args);

    mp_check_self(MP_OBJ_IS_TYPE(pos_args[0], &mp_type_list));
   11238:	68bb      	ldr	r3, [r7, #8]
   1123a:	681b      	ldr	r3, [r3, #0]
   1123c:	4618      	mov	r0, r3
   1123e:	f7ff fbf5 	bl	10a2c <MP_OBJ_IS_OBJ>
   11242:	4603      	mov	r3, r0
   11244:	2b00      	cmp	r3, #0
   11246:	d005      	beq.n	11254 <mp_obj_list_sort+0x42>
   11248:	68bb      	ldr	r3, [r7, #8]
   1124a:	681b      	ldr	r3, [r3, #0]
   1124c:	681b      	ldr	r3, [r3, #0]
   1124e:	4a19      	ldr	r2, [pc, #100]	; (112b4 <mp_obj_list_sort+0xa2>)
   11250:	4293      	cmp	r3, r2
   11252:	d006      	beq.n	11262 <mp_obj_list_sort+0x50>
   11254:	4b18      	ldr	r3, [pc, #96]	; (112b8 <mp_obj_list_sort+0xa6>)
   11256:	4a19      	ldr	r2, [pc, #100]	; (112bc <mp_obj_list_sort+0xaa>)
   11258:	f44f 71a4 	mov.w	r1, #328	; 0x148
   1125c:	4818      	ldr	r0, [pc, #96]	; (112c0 <mp_obj_list_sort+0xae>)
   1125e:	f009 ffad 	bl	1b1bc <__assert_func>
    mp_obj_list_t *self = MP_OBJ_TO_PTR(pos_args[0]);
   11262:	68bb      	ldr	r3, [r7, #8]
   11264:	681b      	ldr	r3, [r3, #0]
   11266:	61fb      	str	r3, [r7, #28]

    if (self->len > 1) {
   11268:	69fb      	ldr	r3, [r7, #28]
   1126a:	689b      	ldr	r3, [r3, #8]
   1126c:	2b01      	cmp	r3, #1
   1126e:	d919      	bls.n	112a4 <mp_obj_list_sort+0x92>
        mp_quicksort(self->items, self->items + self->len - 1,
   11270:	69fb      	ldr	r3, [r7, #28]
   11272:	68d8      	ldr	r0, [r3, #12]
   11274:	69fb      	ldr	r3, [r7, #28]
   11276:	68da      	ldr	r2, [r3, #12]
   11278:	69fb      	ldr	r3, [r7, #28]
   1127a:	689b      	ldr	r3, [r3, #8]
   1127c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   11280:	3b01      	subs	r3, #1
   11282:	009b      	lsls	r3, r3, #2
   11284:	18d1      	adds	r1, r2, r3
                     args.key.u_obj == mp_const_none ? MP_OBJ_NULL : args.key.u_obj,
   11286:	697b      	ldr	r3, [r7, #20]
        mp_quicksort(self->items, self->items + self->len - 1,
   11288:	4a0e      	ldr	r2, [pc, #56]	; (112c4 <mp_obj_list_sort+0xb2>)
   1128a:	4293      	cmp	r3, r2
   1128c:	d001      	beq.n	11292 <mp_obj_list_sort+0x80>
   1128e:	697a      	ldr	r2, [r7, #20]
   11290:	e000      	b.n	11294 <mp_obj_list_sort+0x82>
   11292:	2200      	movs	r2, #0
                     args.reverse.u_bool ? mp_const_false : mp_const_true);
   11294:	7e3b      	ldrb	r3, [r7, #24]
        mp_quicksort(self->items, self->items + self->len - 1,
   11296:	2b00      	cmp	r3, #0
   11298:	d001      	beq.n	1129e <mp_obj_list_sort+0x8c>
   1129a:	4b0b      	ldr	r3, [pc, #44]	; (112c8 <mp_obj_list_sort+0xb6>)
   1129c:	e000      	b.n	112a0 <mp_obj_list_sort+0x8e>
   1129e:	4b0b      	ldr	r3, [pc, #44]	; (112cc <mp_obj_list_sort+0xba>)
   112a0:	f7ff ff20 	bl	110e4 <mp_quicksort>
    }

    return mp_const_none;
   112a4:	4b07      	ldr	r3, [pc, #28]	; (112c4 <mp_obj_list_sort+0xb2>)
}
   112a6:	4618      	mov	r0, r3
   112a8:	3720      	adds	r7, #32
   112aa:	46bd      	mov	sp, r7
   112ac:	bd80      	pop	{r7, pc}
   112ae:	bf00      	nop
   112b0:	00020fe4 	.word	0x00020fe4
   112b4:	00020f7c 	.word	0x00020f7c
   112b8:	00020e4c 	.word	0x00020e4c
   112bc:	00020ff4 	.word	0x00020ff4
   112c0:	00020dc8 	.word	0x00020dc8
   112c4:	000212b4 	.word	0x000212b4
   112c8:	0001f9bc 	.word	0x0001f9bc
   112cc:	0001f9c4 	.word	0x0001f9c4

000112d0 <list_clear>:

STATIC mp_obj_t list_clear(mp_obj_t self_in) {
   112d0:	b580      	push	{r7, lr}
   112d2:	b084      	sub	sp, #16
   112d4:	af00      	add	r7, sp, #0
   112d6:	6078      	str	r0, [r7, #4]
    mp_check_self(MP_OBJ_IS_TYPE(self_in, &mp_type_list));
   112d8:	6878      	ldr	r0, [r7, #4]
   112da:	f7ff fba7 	bl	10a2c <MP_OBJ_IS_OBJ>
   112de:	4603      	mov	r3, r0
   112e0:	2b00      	cmp	r3, #0
   112e2:	d004      	beq.n	112ee <list_clear+0x1e>
   112e4:	687b      	ldr	r3, [r7, #4]
   112e6:	681b      	ldr	r3, [r3, #0]
   112e8:	4a14      	ldr	r2, [pc, #80]	; (1133c <list_clear+0x6c>)
   112ea:	4293      	cmp	r3, r2
   112ec:	d006      	beq.n	112fc <list_clear+0x2c>
   112ee:	4b14      	ldr	r3, [pc, #80]	; (11340 <list_clear+0x70>)
   112f0:	4a14      	ldr	r2, [pc, #80]	; (11344 <list_clear+0x74>)
   112f2:	f240 1155 	movw	r1, #341	; 0x155
   112f6:	4814      	ldr	r0, [pc, #80]	; (11348 <list_clear+0x78>)
   112f8:	f009 ff60 	bl	1b1bc <__assert_func>
    mp_obj_list_t *self = MP_OBJ_TO_PTR(self_in);
   112fc:	687b      	ldr	r3, [r7, #4]
   112fe:	60fb      	str	r3, [r7, #12]
    self->len = 0;
   11300:	68fb      	ldr	r3, [r7, #12]
   11302:	2200      	movs	r2, #0
   11304:	609a      	str	r2, [r3, #8]
    self->items = m_renew(mp_obj_t, self->items, self->alloc, LIST_MIN_ALLOC);
   11306:	68fb      	ldr	r3, [r7, #12]
   11308:	68db      	ldr	r3, [r3, #12]
   1130a:	2110      	movs	r1, #16
   1130c:	4618      	mov	r0, r3
   1130e:	f7ef f837 	bl	380 <m_realloc>
   11312:	4602      	mov	r2, r0
   11314:	68fb      	ldr	r3, [r7, #12]
   11316:	60da      	str	r2, [r3, #12]
    self->alloc = LIST_MIN_ALLOC;
   11318:	68fb      	ldr	r3, [r7, #12]
   1131a:	2204      	movs	r2, #4
   1131c:	605a      	str	r2, [r3, #4]
    mp_seq_clear(self->items, 0, self->alloc, sizeof(*self->items));
   1131e:	68fb      	ldr	r3, [r7, #12]
   11320:	68d8      	ldr	r0, [r3, #12]
   11322:	68fb      	ldr	r3, [r7, #12]
   11324:	685b      	ldr	r3, [r3, #4]
   11326:	009b      	lsls	r3, r3, #2
   11328:	461a      	mov	r2, r3
   1132a:	2100      	movs	r1, #0
   1132c:	f00a fbe4 	bl	1baf8 <memset>
    return mp_const_none;
   11330:	4b06      	ldr	r3, [pc, #24]	; (1134c <list_clear+0x7c>)
}
   11332:	4618      	mov	r0, r3
   11334:	3710      	adds	r7, #16
   11336:	46bd      	mov	sp, r7
   11338:	bd80      	pop	{r7, pc}
   1133a:	bf00      	nop
   1133c:	00020f7c 	.word	0x00020f7c
   11340:	00020d6c 	.word	0x00020d6c
   11344:	00021008 	.word	0x00021008
   11348:	00020dc8 	.word	0x00020dc8
   1134c:	000212b4 	.word	0x000212b4

00011350 <list_copy>:

STATIC mp_obj_t list_copy(mp_obj_t self_in) {
   11350:	b580      	push	{r7, lr}
   11352:	b084      	sub	sp, #16
   11354:	af00      	add	r7, sp, #0
   11356:	6078      	str	r0, [r7, #4]
    mp_check_self(MP_OBJ_IS_TYPE(self_in, &mp_type_list));
   11358:	6878      	ldr	r0, [r7, #4]
   1135a:	f7ff fb67 	bl	10a2c <MP_OBJ_IS_OBJ>
   1135e:	4603      	mov	r3, r0
   11360:	2b00      	cmp	r3, #0
   11362:	d004      	beq.n	1136e <list_copy+0x1e>
   11364:	687b      	ldr	r3, [r7, #4]
   11366:	681b      	ldr	r3, [r3, #0]
   11368:	4a0c      	ldr	r2, [pc, #48]	; (1139c <list_copy+0x4c>)
   1136a:	4293      	cmp	r3, r2
   1136c:	d006      	beq.n	1137c <list_copy+0x2c>
   1136e:	4b0c      	ldr	r3, [pc, #48]	; (113a0 <list_copy+0x50>)
   11370:	4a0c      	ldr	r2, [pc, #48]	; (113a4 <list_copy+0x54>)
   11372:	f240 115f 	movw	r1, #351	; 0x15f
   11376:	480c      	ldr	r0, [pc, #48]	; (113a8 <list_copy+0x58>)
   11378:	f009 ff20 	bl	1b1bc <__assert_func>
    mp_obj_list_t *self = MP_OBJ_TO_PTR(self_in);
   1137c:	687b      	ldr	r3, [r7, #4]
   1137e:	60fb      	str	r3, [r7, #12]
    return mp_obj_new_list(self->len, self->items);
   11380:	68fb      	ldr	r3, [r7, #12]
   11382:	689a      	ldr	r2, [r3, #8]
   11384:	68fb      	ldr	r3, [r7, #12]
   11386:	68db      	ldr	r3, [r3, #12]
   11388:	4619      	mov	r1, r3
   1138a:	4610      	mov	r0, r2
   1138c:	f000 f9ab 	bl	116e6 <mp_obj_new_list>
   11390:	4603      	mov	r3, r0
}
   11392:	4618      	mov	r0, r3
   11394:	3710      	adds	r7, #16
   11396:	46bd      	mov	sp, r7
   11398:	bd80      	pop	{r7, pc}
   1139a:	bf00      	nop
   1139c:	00020f7c 	.word	0x00020f7c
   113a0:	00020d6c 	.word	0x00020d6c
   113a4:	00021014 	.word	0x00021014
   113a8:	00020dc8 	.word	0x00020dc8

000113ac <list_count>:

STATIC mp_obj_t list_count(mp_obj_t self_in, mp_obj_t value) {
   113ac:	b580      	push	{r7, lr}
   113ae:	b084      	sub	sp, #16
   113b0:	af00      	add	r7, sp, #0
   113b2:	6078      	str	r0, [r7, #4]
   113b4:	6039      	str	r1, [r7, #0]
    mp_check_self(MP_OBJ_IS_TYPE(self_in, &mp_type_list));
   113b6:	6878      	ldr	r0, [r7, #4]
   113b8:	f7ff fb38 	bl	10a2c <MP_OBJ_IS_OBJ>
   113bc:	4603      	mov	r3, r0
   113be:	2b00      	cmp	r3, #0
   113c0:	d004      	beq.n	113cc <list_count+0x20>
   113c2:	687b      	ldr	r3, [r7, #4]
   113c4:	681b      	ldr	r3, [r3, #0]
   113c6:	4a0c      	ldr	r2, [pc, #48]	; (113f8 <list_count+0x4c>)
   113c8:	4293      	cmp	r3, r2
   113ca:	d006      	beq.n	113da <list_count+0x2e>
   113cc:	4b0b      	ldr	r3, [pc, #44]	; (113fc <list_count+0x50>)
   113ce:	4a0c      	ldr	r2, [pc, #48]	; (11400 <list_count+0x54>)
   113d0:	f240 1165 	movw	r1, #357	; 0x165
   113d4:	480b      	ldr	r0, [pc, #44]	; (11404 <list_count+0x58>)
   113d6:	f009 fef1 	bl	1b1bc <__assert_func>
    mp_obj_list_t *self = MP_OBJ_TO_PTR(self_in);
   113da:	687b      	ldr	r3, [r7, #4]
   113dc:	60fb      	str	r3, [r7, #12]
    return mp_seq_count_obj(self->items, self->len, value);
   113de:	68fb      	ldr	r3, [r7, #12]
   113e0:	68d8      	ldr	r0, [r3, #12]
   113e2:	68fb      	ldr	r3, [r7, #12]
   113e4:	689b      	ldr	r3, [r3, #8]
   113e6:	683a      	ldr	r2, [r7, #0]
   113e8:	4619      	mov	r1, r3
   113ea:	f006 f9fd 	bl	177e8 <mp_seq_count_obj>
   113ee:	4603      	mov	r3, r0
}
   113f0:	4618      	mov	r0, r3
   113f2:	3710      	adds	r7, #16
   113f4:	46bd      	mov	sp, r7
   113f6:	bd80      	pop	{r7, pc}
   113f8:	00020f7c 	.word	0x00020f7c
   113fc:	00020d6c 	.word	0x00020d6c
   11400:	00021020 	.word	0x00021020
   11404:	00020dc8 	.word	0x00020dc8

00011408 <list_index>:

STATIC mp_obj_t list_index(size_t n_args, const mp_obj_t *args) {
   11408:	b580      	push	{r7, lr}
   1140a:	b084      	sub	sp, #16
   1140c:	af00      	add	r7, sp, #0
   1140e:	6078      	str	r0, [r7, #4]
   11410:	6039      	str	r1, [r7, #0]
    mp_check_self(MP_OBJ_IS_TYPE(args[0], &mp_type_list));
   11412:	683b      	ldr	r3, [r7, #0]
   11414:	681b      	ldr	r3, [r3, #0]
   11416:	4618      	mov	r0, r3
   11418:	f7ff fb08 	bl	10a2c <MP_OBJ_IS_OBJ>
   1141c:	4603      	mov	r3, r0
   1141e:	2b00      	cmp	r3, #0
   11420:	d005      	beq.n	1142e <list_index+0x26>
   11422:	683b      	ldr	r3, [r7, #0]
   11424:	681b      	ldr	r3, [r3, #0]
   11426:	681b      	ldr	r3, [r3, #0]
   11428:	4a0c      	ldr	r2, [pc, #48]	; (1145c <list_index+0x54>)
   1142a:	4293      	cmp	r3, r2
   1142c:	d006      	beq.n	1143c <list_index+0x34>
   1142e:	4b0c      	ldr	r3, [pc, #48]	; (11460 <list_index+0x58>)
   11430:	4a0c      	ldr	r2, [pc, #48]	; (11464 <list_index+0x5c>)
   11432:	f240 116b 	movw	r1, #363	; 0x16b
   11436:	480c      	ldr	r0, [pc, #48]	; (11468 <list_index+0x60>)
   11438:	f009 fec0 	bl	1b1bc <__assert_func>
    mp_obj_list_t *self = MP_OBJ_TO_PTR(args[0]);
   1143c:	683b      	ldr	r3, [r7, #0]
   1143e:	681b      	ldr	r3, [r3, #0]
   11440:	60fb      	str	r3, [r7, #12]
    return mp_seq_index_obj(self->items, self->len, n_args, args);
   11442:	68fb      	ldr	r3, [r7, #12]
   11444:	68d8      	ldr	r0, [r3, #12]
   11446:	68fb      	ldr	r3, [r7, #12]
   11448:	6899      	ldr	r1, [r3, #8]
   1144a:	683b      	ldr	r3, [r7, #0]
   1144c:	687a      	ldr	r2, [r7, #4]
   1144e:	f006 f97b 	bl	17748 <mp_seq_index_obj>
   11452:	4603      	mov	r3, r0
}
   11454:	4618      	mov	r0, r3
   11456:	3710      	adds	r7, #16
   11458:	46bd      	mov	sp, r7
   1145a:	bd80      	pop	{r7, pc}
   1145c:	00020f7c 	.word	0x00020f7c
   11460:	00020ddc 	.word	0x00020ddc
   11464:	0002102c 	.word	0x0002102c
   11468:	00020dc8 	.word	0x00020dc8

0001146c <list_insert>:

STATIC mp_obj_t list_insert(mp_obj_t self_in, mp_obj_t idx, mp_obj_t obj) {
   1146c:	b580      	push	{r7, lr}
   1146e:	b088      	sub	sp, #32
   11470:	af00      	add	r7, sp, #0
   11472:	60f8      	str	r0, [r7, #12]
   11474:	60b9      	str	r1, [r7, #8]
   11476:	607a      	str	r2, [r7, #4]
    mp_check_self(MP_OBJ_IS_TYPE(self_in, &mp_type_list));
   11478:	68f8      	ldr	r0, [r7, #12]
   1147a:	f7ff fad7 	bl	10a2c <MP_OBJ_IS_OBJ>
   1147e:	4603      	mov	r3, r0
   11480:	2b00      	cmp	r3, #0
   11482:	d004      	beq.n	1148e <list_insert+0x22>
   11484:	68fb      	ldr	r3, [r7, #12]
   11486:	681b      	ldr	r3, [r3, #0]
   11488:	4a27      	ldr	r2, [pc, #156]	; (11528 <list_insert+0xbc>)
   1148a:	4293      	cmp	r3, r2
   1148c:	d006      	beq.n	1149c <list_insert+0x30>
   1148e:	4b27      	ldr	r3, [pc, #156]	; (1152c <list_insert+0xc0>)
   11490:	4a27      	ldr	r2, [pc, #156]	; (11530 <list_insert+0xc4>)
   11492:	f240 1171 	movw	r1, #369	; 0x171
   11496:	4827      	ldr	r0, [pc, #156]	; (11534 <list_insert+0xc8>)
   11498:	f009 fe90 	bl	1b1bc <__assert_func>
    mp_obj_list_t *self = MP_OBJ_TO_PTR(self_in);
   1149c:	68fb      	ldr	r3, [r7, #12]
   1149e:	617b      	str	r3, [r7, #20]
    // insert has its own strange index logic
    mp_int_t index = MP_OBJ_SMALL_INT_VALUE(idx);
   114a0:	68bb      	ldr	r3, [r7, #8]
   114a2:	105b      	asrs	r3, r3, #1
   114a4:	61fb      	str	r3, [r7, #28]
    if (index < 0) {
   114a6:	69fb      	ldr	r3, [r7, #28]
   114a8:	2b00      	cmp	r3, #0
   114aa:	da04      	bge.n	114b6 <list_insert+0x4a>
         index += self->len;
   114ac:	697b      	ldr	r3, [r7, #20]
   114ae:	689a      	ldr	r2, [r3, #8]
   114b0:	69fb      	ldr	r3, [r7, #28]
   114b2:	4413      	add	r3, r2
   114b4:	61fb      	str	r3, [r7, #28]
    }
    if (index < 0) {
   114b6:	69fb      	ldr	r3, [r7, #28]
   114b8:	2b00      	cmp	r3, #0
   114ba:	da01      	bge.n	114c0 <list_insert+0x54>
         index = 0;
   114bc:	2300      	movs	r3, #0
   114be:	61fb      	str	r3, [r7, #28]
    }
    if ((size_t)index > self->len) {
   114c0:	697b      	ldr	r3, [r7, #20]
   114c2:	689a      	ldr	r2, [r3, #8]
   114c4:	69fb      	ldr	r3, [r7, #28]
   114c6:	429a      	cmp	r2, r3
   114c8:	d202      	bcs.n	114d0 <list_insert+0x64>
         index = self->len;
   114ca:	697b      	ldr	r3, [r7, #20]
   114cc:	689b      	ldr	r3, [r3, #8]
   114ce:	61fb      	str	r3, [r7, #28]
    }

    mp_obj_list_append(self_in, mp_const_none);
   114d0:	4919      	ldr	r1, [pc, #100]	; (11538 <list_insert+0xcc>)
   114d2:	68f8      	ldr	r0, [r7, #12]
   114d4:	f7ff fc9b 	bl	10e0e <mp_obj_list_append>

    for (mp_int_t i = self->len-1; i > index; i--) {
   114d8:	697b      	ldr	r3, [r7, #20]
   114da:	689b      	ldr	r3, [r3, #8]
   114dc:	3b01      	subs	r3, #1
   114de:	61bb      	str	r3, [r7, #24]
   114e0:	e011      	b.n	11506 <list_insert+0x9a>
         self->items[i] = self->items[i-1];
   114e2:	697b      	ldr	r3, [r7, #20]
   114e4:	68da      	ldr	r2, [r3, #12]
   114e6:	69bb      	ldr	r3, [r7, #24]
   114e8:	009b      	lsls	r3, r3, #2
   114ea:	441a      	add	r2, r3
   114ec:	697b      	ldr	r3, [r7, #20]
   114ee:	68d9      	ldr	r1, [r3, #12]
   114f0:	69bb      	ldr	r3, [r7, #24]
   114f2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   114f6:	3b01      	subs	r3, #1
   114f8:	009b      	lsls	r3, r3, #2
   114fa:	440b      	add	r3, r1
   114fc:	681b      	ldr	r3, [r3, #0]
   114fe:	6013      	str	r3, [r2, #0]
    for (mp_int_t i = self->len-1; i > index; i--) {
   11500:	69bb      	ldr	r3, [r7, #24]
   11502:	3b01      	subs	r3, #1
   11504:	61bb      	str	r3, [r7, #24]
   11506:	69ba      	ldr	r2, [r7, #24]
   11508:	69fb      	ldr	r3, [r7, #28]
   1150a:	429a      	cmp	r2, r3
   1150c:	dce9      	bgt.n	114e2 <list_insert+0x76>
    }
    self->items[index] = obj;
   1150e:	697b      	ldr	r3, [r7, #20]
   11510:	68da      	ldr	r2, [r3, #12]
   11512:	69fb      	ldr	r3, [r7, #28]
   11514:	009b      	lsls	r3, r3, #2
   11516:	4413      	add	r3, r2
   11518:	687a      	ldr	r2, [r7, #4]
   1151a:	601a      	str	r2, [r3, #0]

    return mp_const_none;
   1151c:	4b06      	ldr	r3, [pc, #24]	; (11538 <list_insert+0xcc>)
}
   1151e:	4618      	mov	r0, r3
   11520:	3720      	adds	r7, #32
   11522:	46bd      	mov	sp, r7
   11524:	bd80      	pop	{r7, pc}
   11526:	bf00      	nop
   11528:	00020f7c 	.word	0x00020f7c
   1152c:	00020d6c 	.word	0x00020d6c
   11530:	00021038 	.word	0x00021038
   11534:	00020dc8 	.word	0x00020dc8
   11538:	000212b4 	.word	0x000212b4

0001153c <mp_obj_list_remove>:

mp_obj_t mp_obj_list_remove(mp_obj_t self_in, mp_obj_t value) {
   1153c:	b580      	push	{r7, lr}
   1153e:	b084      	sub	sp, #16
   11540:	af00      	add	r7, sp, #0
   11542:	6078      	str	r0, [r7, #4]
   11544:	6039      	str	r1, [r7, #0]
    mp_check_self(MP_OBJ_IS_TYPE(self_in, &mp_type_list));
   11546:	6878      	ldr	r0, [r7, #4]
   11548:	f7ff fa70 	bl	10a2c <MP_OBJ_IS_OBJ>
   1154c:	4603      	mov	r3, r0
   1154e:	2b00      	cmp	r3, #0
   11550:	d004      	beq.n	1155c <mp_obj_list_remove+0x20>
   11552:	687b      	ldr	r3, [r7, #4]
   11554:	681b      	ldr	r3, [r3, #0]
   11556:	4a10      	ldr	r2, [pc, #64]	; (11598 <mp_obj_list_remove+0x5c>)
   11558:	4293      	cmp	r3, r2
   1155a:	d006      	beq.n	1156a <mp_obj_list_remove+0x2e>
   1155c:	4b0f      	ldr	r3, [pc, #60]	; (1159c <mp_obj_list_remove+0x60>)
   1155e:	4a10      	ldr	r2, [pc, #64]	; (115a0 <mp_obj_list_remove+0x64>)
   11560:	f44f 71c5 	mov.w	r1, #394	; 0x18a
   11564:	480f      	ldr	r0, [pc, #60]	; (115a4 <mp_obj_list_remove+0x68>)
   11566:	f009 fe29 	bl	1b1bc <__assert_func>
    mp_obj_t args[] = {self_in, value};
   1156a:	687b      	ldr	r3, [r7, #4]
   1156c:	60bb      	str	r3, [r7, #8]
   1156e:	683b      	ldr	r3, [r7, #0]
   11570:	60fb      	str	r3, [r7, #12]
    args[1] = list_index(2, args);
   11572:	f107 0308 	add.w	r3, r7, #8
   11576:	4619      	mov	r1, r3
   11578:	2002      	movs	r0, #2
   1157a:	f7ff ff45 	bl	11408 <list_index>
   1157e:	4603      	mov	r3, r0
   11580:	60fb      	str	r3, [r7, #12]
    list_pop(2, args);
   11582:	f107 0308 	add.w	r3, r7, #8
   11586:	4619      	mov	r1, r3
   11588:	2002      	movs	r0, #2
   1158a:	f7ff fd21 	bl	10fd0 <list_pop>

    return mp_const_none;
   1158e:	4b06      	ldr	r3, [pc, #24]	; (115a8 <mp_obj_list_remove+0x6c>)
}
   11590:	4618      	mov	r0, r3
   11592:	3710      	adds	r7, #16
   11594:	46bd      	mov	sp, r7
   11596:	bd80      	pop	{r7, pc}
   11598:	00020f7c 	.word	0x00020f7c
   1159c:	00020d6c 	.word	0x00020d6c
   115a0:	00021044 	.word	0x00021044
   115a4:	00020dc8 	.word	0x00020dc8
   115a8:	000212b4 	.word	0x000212b4

000115ac <list_reverse>:

STATIC mp_obj_t list_reverse(mp_obj_t self_in) {
   115ac:	b580      	push	{r7, lr}
   115ae:	b086      	sub	sp, #24
   115b0:	af00      	add	r7, sp, #0
   115b2:	6078      	str	r0, [r7, #4]
    mp_check_self(MP_OBJ_IS_TYPE(self_in, &mp_type_list));
   115b4:	6878      	ldr	r0, [r7, #4]
   115b6:	f7ff fa39 	bl	10a2c <MP_OBJ_IS_OBJ>
   115ba:	4603      	mov	r3, r0
   115bc:	2b00      	cmp	r3, #0
   115be:	d004      	beq.n	115ca <list_reverse+0x1e>
   115c0:	687b      	ldr	r3, [r7, #4]
   115c2:	681b      	ldr	r3, [r3, #0]
   115c4:	4a22      	ldr	r2, [pc, #136]	; (11650 <list_reverse+0xa4>)
   115c6:	4293      	cmp	r3, r2
   115c8:	d006      	beq.n	115d8 <list_reverse+0x2c>
   115ca:	4b22      	ldr	r3, [pc, #136]	; (11654 <list_reverse+0xa8>)
   115cc:	4a22      	ldr	r2, [pc, #136]	; (11658 <list_reverse+0xac>)
   115ce:	f240 1193 	movw	r1, #403	; 0x193
   115d2:	4822      	ldr	r0, [pc, #136]	; (1165c <list_reverse+0xb0>)
   115d4:	f009 fdf2 	bl	1b1bc <__assert_func>
    mp_obj_list_t *self = MP_OBJ_TO_PTR(self_in);
   115d8:	687b      	ldr	r3, [r7, #4]
   115da:	613b      	str	r3, [r7, #16]

    mp_int_t len = self->len;
   115dc:	693b      	ldr	r3, [r7, #16]
   115de:	689b      	ldr	r3, [r3, #8]
   115e0:	60fb      	str	r3, [r7, #12]
    for (mp_int_t i = 0; i < len/2; i++) {
   115e2:	2300      	movs	r3, #0
   115e4:	617b      	str	r3, [r7, #20]
   115e6:	e026      	b.n	11636 <list_reverse+0x8a>
         mp_obj_t a = self->items[i];
   115e8:	693b      	ldr	r3, [r7, #16]
   115ea:	68da      	ldr	r2, [r3, #12]
   115ec:	697b      	ldr	r3, [r7, #20]
   115ee:	009b      	lsls	r3, r3, #2
   115f0:	4413      	add	r3, r2
   115f2:	681b      	ldr	r3, [r3, #0]
   115f4:	60bb      	str	r3, [r7, #8]
         self->items[i] = self->items[len-i-1];
   115f6:	693b      	ldr	r3, [r7, #16]
   115f8:	68da      	ldr	r2, [r3, #12]
   115fa:	697b      	ldr	r3, [r7, #20]
   115fc:	009b      	lsls	r3, r3, #2
   115fe:	441a      	add	r2, r3
   11600:	693b      	ldr	r3, [r7, #16]
   11602:	68d9      	ldr	r1, [r3, #12]
   11604:	68f8      	ldr	r0, [r7, #12]
   11606:	697b      	ldr	r3, [r7, #20]
   11608:	1ac3      	subs	r3, r0, r3
   1160a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1160e:	3b01      	subs	r3, #1
   11610:	009b      	lsls	r3, r3, #2
   11612:	440b      	add	r3, r1
   11614:	681b      	ldr	r3, [r3, #0]
   11616:	6013      	str	r3, [r2, #0]
         self->items[len-i-1] = a;
   11618:	693b      	ldr	r3, [r7, #16]
   1161a:	68da      	ldr	r2, [r3, #12]
   1161c:	68f9      	ldr	r1, [r7, #12]
   1161e:	697b      	ldr	r3, [r7, #20]
   11620:	1acb      	subs	r3, r1, r3
   11622:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   11626:	3b01      	subs	r3, #1
   11628:	009b      	lsls	r3, r3, #2
   1162a:	4413      	add	r3, r2
   1162c:	68ba      	ldr	r2, [r7, #8]
   1162e:	601a      	str	r2, [r3, #0]
    for (mp_int_t i = 0; i < len/2; i++) {
   11630:	697b      	ldr	r3, [r7, #20]
   11632:	3301      	adds	r3, #1
   11634:	617b      	str	r3, [r7, #20]
   11636:	68fb      	ldr	r3, [r7, #12]
   11638:	0fda      	lsrs	r2, r3, #31
   1163a:	4413      	add	r3, r2
   1163c:	105b      	asrs	r3, r3, #1
   1163e:	461a      	mov	r2, r3
   11640:	697b      	ldr	r3, [r7, #20]
   11642:	429a      	cmp	r2, r3
   11644:	dcd0      	bgt.n	115e8 <list_reverse+0x3c>
    }

    return mp_const_none;
   11646:	4b06      	ldr	r3, [pc, #24]	; (11660 <list_reverse+0xb4>)
}
   11648:	4618      	mov	r0, r3
   1164a:	3718      	adds	r7, #24
   1164c:	46bd      	mov	sp, r7
   1164e:	bd80      	pop	{r7, pc}
   11650:	00020f7c 	.word	0x00020f7c
   11654:	00020d6c 	.word	0x00020d6c
   11658:	00021058 	.word	0x00021058
   1165c:	00020dc8 	.word	0x00020dc8
   11660:	000212b4 	.word	0x000212b4

00011664 <mp_obj_list_init>:
    .subscr = list_subscr,
    .getiter = list_getiter,
    .locals_dict = (mp_obj_dict_t*)&list_locals_dict,
};

void mp_obj_list_init(mp_obj_list_t *o, size_t n) {
   11664:	b580      	push	{r7, lr}
   11666:	b082      	sub	sp, #8
   11668:	af00      	add	r7, sp, #0
   1166a:	6078      	str	r0, [r7, #4]
   1166c:	6039      	str	r1, [r7, #0]
    o->base.type = &mp_type_list;
   1166e:	687b      	ldr	r3, [r7, #4]
   11670:	4a13      	ldr	r2, [pc, #76]	; (116c0 <mp_obj_list_init+0x5c>)
   11672:	601a      	str	r2, [r3, #0]
    o->alloc = n < LIST_MIN_ALLOC ? LIST_MIN_ALLOC : n;
   11674:	683b      	ldr	r3, [r7, #0]
   11676:	2b04      	cmp	r3, #4
   11678:	bf38      	it	cc
   1167a:	2304      	movcc	r3, #4
   1167c:	461a      	mov	r2, r3
   1167e:	687b      	ldr	r3, [r7, #4]
   11680:	605a      	str	r2, [r3, #4]
    o->len = n;
   11682:	687b      	ldr	r3, [r7, #4]
   11684:	683a      	ldr	r2, [r7, #0]
   11686:	609a      	str	r2, [r3, #8]
    o->items = m_new(mp_obj_t, o->alloc);
   11688:	687b      	ldr	r3, [r7, #4]
   1168a:	685b      	ldr	r3, [r3, #4]
   1168c:	009b      	lsls	r3, r3, #2
   1168e:	4618      	mov	r0, r3
   11690:	f7ee fe44 	bl	31c <m_malloc>
   11694:	4602      	mov	r2, r0
   11696:	687b      	ldr	r3, [r7, #4]
   11698:	60da      	str	r2, [r3, #12]
    mp_seq_clear(o->items, n, o->alloc, sizeof(*o->items));
   1169a:	687b      	ldr	r3, [r7, #4]
   1169c:	68da      	ldr	r2, [r3, #12]
   1169e:	683b      	ldr	r3, [r7, #0]
   116a0:	009b      	lsls	r3, r3, #2
   116a2:	18d0      	adds	r0, r2, r3
   116a4:	687b      	ldr	r3, [r7, #4]
   116a6:	685a      	ldr	r2, [r3, #4]
   116a8:	683b      	ldr	r3, [r7, #0]
   116aa:	1ad3      	subs	r3, r2, r3
   116ac:	009b      	lsls	r3, r3, #2
   116ae:	461a      	mov	r2, r3
   116b0:	2100      	movs	r1, #0
   116b2:	f00a fa21 	bl	1baf8 <memset>
}
   116b6:	bf00      	nop
   116b8:	3708      	adds	r7, #8
   116ba:	46bd      	mov	sp, r7
   116bc:	bd80      	pop	{r7, pc}
   116be:	bf00      	nop
   116c0:	00020f7c 	.word	0x00020f7c

000116c4 <list_new>:

STATIC mp_obj_list_t *list_new(size_t n) {
   116c4:	b580      	push	{r7, lr}
   116c6:	b084      	sub	sp, #16
   116c8:	af00      	add	r7, sp, #0
   116ca:	6078      	str	r0, [r7, #4]
    mp_obj_list_t *o = m_new_obj(mp_obj_list_t);
   116cc:	2010      	movs	r0, #16
   116ce:	f7ee fe25 	bl	31c <m_malloc>
   116d2:	60f8      	str	r0, [r7, #12]
    mp_obj_list_init(o, n);
   116d4:	6879      	ldr	r1, [r7, #4]
   116d6:	68f8      	ldr	r0, [r7, #12]
   116d8:	f7ff ffc4 	bl	11664 <mp_obj_list_init>
    return o;
   116dc:	68fb      	ldr	r3, [r7, #12]
}
   116de:	4618      	mov	r0, r3
   116e0:	3710      	adds	r7, #16
   116e2:	46bd      	mov	sp, r7
   116e4:	bd80      	pop	{r7, pc}

000116e6 <mp_obj_new_list>:

mp_obj_t mp_obj_new_list(size_t n, mp_obj_t *items) {
   116e6:	b580      	push	{r7, lr}
   116e8:	b084      	sub	sp, #16
   116ea:	af00      	add	r7, sp, #0
   116ec:	6078      	str	r0, [r7, #4]
   116ee:	6039      	str	r1, [r7, #0]
    mp_obj_list_t *o = list_new(n);
   116f0:	6878      	ldr	r0, [r7, #4]
   116f2:	f7ff ffe7 	bl	116c4 <list_new>
   116f6:	60b8      	str	r0, [r7, #8]
    if (items != NULL) {
   116f8:	683b      	ldr	r3, [r7, #0]
   116fa:	2b00      	cmp	r3, #0
   116fc:	d014      	beq.n	11728 <mp_obj_new_list+0x42>
        for (size_t i = 0; i < n; i++) {
   116fe:	2300      	movs	r3, #0
   11700:	60fb      	str	r3, [r7, #12]
   11702:	e00d      	b.n	11720 <mp_obj_new_list+0x3a>
            o->items[i] = items[i];
   11704:	68bb      	ldr	r3, [r7, #8]
   11706:	68da      	ldr	r2, [r3, #12]
   11708:	68fb      	ldr	r3, [r7, #12]
   1170a:	009b      	lsls	r3, r3, #2
   1170c:	4413      	add	r3, r2
   1170e:	68fa      	ldr	r2, [r7, #12]
   11710:	0092      	lsls	r2, r2, #2
   11712:	6839      	ldr	r1, [r7, #0]
   11714:	440a      	add	r2, r1
   11716:	6812      	ldr	r2, [r2, #0]
   11718:	601a      	str	r2, [r3, #0]
        for (size_t i = 0; i < n; i++) {
   1171a:	68fb      	ldr	r3, [r7, #12]
   1171c:	3301      	adds	r3, #1
   1171e:	60fb      	str	r3, [r7, #12]
   11720:	68fa      	ldr	r2, [r7, #12]
   11722:	687b      	ldr	r3, [r7, #4]
   11724:	429a      	cmp	r2, r3
   11726:	d3ed      	bcc.n	11704 <mp_obj_new_list+0x1e>
        }
    }
    return MP_OBJ_FROM_PTR(o);
   11728:	68bb      	ldr	r3, [r7, #8]
}
   1172a:	4618      	mov	r0, r3
   1172c:	3710      	adds	r7, #16
   1172e:	46bd      	mov	sp, r7
   11730:	bd80      	pop	{r7, pc}

00011732 <mp_obj_list_get>:

void mp_obj_list_get(mp_obj_t self_in, size_t *len, mp_obj_t **items) {
   11732:	b480      	push	{r7}
   11734:	b087      	sub	sp, #28
   11736:	af00      	add	r7, sp, #0
   11738:	60f8      	str	r0, [r7, #12]
   1173a:	60b9      	str	r1, [r7, #8]
   1173c:	607a      	str	r2, [r7, #4]
    mp_obj_list_t *self = MP_OBJ_TO_PTR(self_in);
   1173e:	68fb      	ldr	r3, [r7, #12]
   11740:	617b      	str	r3, [r7, #20]
    *len = self->len;
   11742:	697b      	ldr	r3, [r7, #20]
   11744:	689a      	ldr	r2, [r3, #8]
   11746:	68bb      	ldr	r3, [r7, #8]
   11748:	601a      	str	r2, [r3, #0]
    *items = self->items;
   1174a:	697b      	ldr	r3, [r7, #20]
   1174c:	68da      	ldr	r2, [r3, #12]
   1174e:	687b      	ldr	r3, [r7, #4]
   11750:	601a      	str	r2, [r3, #0]
}
   11752:	bf00      	nop
   11754:	371c      	adds	r7, #28
   11756:	46bd      	mov	sp, r7
   11758:	f85d 7b04 	ldr.w	r7, [sp], #4
   1175c:	4770      	bx	lr

0001175e <mp_obj_list_set_len>:

void mp_obj_list_set_len(mp_obj_t self_in, size_t len) {
   1175e:	b480      	push	{r7}
   11760:	b085      	sub	sp, #20
   11762:	af00      	add	r7, sp, #0
   11764:	6078      	str	r0, [r7, #4]
   11766:	6039      	str	r1, [r7, #0]
    // trust that the caller knows what it's doing
    // TODO realloc if len got much smaller than alloc
    mp_obj_list_t *self = MP_OBJ_TO_PTR(self_in);
   11768:	687b      	ldr	r3, [r7, #4]
   1176a:	60fb      	str	r3, [r7, #12]
    self->len = len;
   1176c:	68fb      	ldr	r3, [r7, #12]
   1176e:	683a      	ldr	r2, [r7, #0]
   11770:	609a      	str	r2, [r3, #8]
}
   11772:	bf00      	nop
   11774:	3714      	adds	r7, #20
   11776:	46bd      	mov	sp, r7
   11778:	f85d 7b04 	ldr.w	r7, [sp], #4
   1177c:	4770      	bx	lr

0001177e <mp_obj_list_store>:

void mp_obj_list_store(mp_obj_t self_in, mp_obj_t index, mp_obj_t value) {
   1177e:	b580      	push	{r7, lr}
   11780:	b086      	sub	sp, #24
   11782:	af00      	add	r7, sp, #0
   11784:	60f8      	str	r0, [r7, #12]
   11786:	60b9      	str	r1, [r7, #8]
   11788:	607a      	str	r2, [r7, #4]
    mp_obj_list_t *self = MP_OBJ_TO_PTR(self_in);
   1178a:	68fb      	ldr	r3, [r7, #12]
   1178c:	617b      	str	r3, [r7, #20]
    size_t i = mp_get_index(self->base.type, self->len, index, false);
   1178e:	697b      	ldr	r3, [r7, #20]
   11790:	6818      	ldr	r0, [r3, #0]
   11792:	697b      	ldr	r3, [r7, #20]
   11794:	6899      	ldr	r1, [r3, #8]
   11796:	2300      	movs	r3, #0
   11798:	68ba      	ldr	r2, [r7, #8]
   1179a:	f7fc faa1 	bl	dce0 <mp_get_index>
   1179e:	6138      	str	r0, [r7, #16]
    self->items[i] = value;
   117a0:	697b      	ldr	r3, [r7, #20]
   117a2:	68da      	ldr	r2, [r3, #12]
   117a4:	693b      	ldr	r3, [r7, #16]
   117a6:	009b      	lsls	r3, r3, #2
   117a8:	4413      	add	r3, r2
   117aa:	687a      	ldr	r2, [r7, #4]
   117ac:	601a      	str	r2, [r3, #0]
}
   117ae:	bf00      	nop
   117b0:	3718      	adds	r7, #24
   117b2:	46bd      	mov	sp, r7
   117b4:	bd80      	pop	{r7, pc}

000117b6 <list_it_iternext>:
    mp_fun_1_t iternext;
    mp_obj_t list;
    size_t cur;
} mp_obj_list_it_t;

STATIC mp_obj_t list_it_iternext(mp_obj_t self_in) {
   117b6:	b480      	push	{r7}
   117b8:	b087      	sub	sp, #28
   117ba:	af00      	add	r7, sp, #0
   117bc:	6078      	str	r0, [r7, #4]
    mp_obj_list_it_t *self = MP_OBJ_TO_PTR(self_in);
   117be:	687b      	ldr	r3, [r7, #4]
   117c0:	617b      	str	r3, [r7, #20]
    mp_obj_list_t *list = MP_OBJ_TO_PTR(self->list);
   117c2:	697b      	ldr	r3, [r7, #20]
   117c4:	689b      	ldr	r3, [r3, #8]
   117c6:	613b      	str	r3, [r7, #16]
    if (self->cur < list->len) {
   117c8:	697b      	ldr	r3, [r7, #20]
   117ca:	68da      	ldr	r2, [r3, #12]
   117cc:	693b      	ldr	r3, [r7, #16]
   117ce:	689b      	ldr	r3, [r3, #8]
   117d0:	429a      	cmp	r2, r3
   117d2:	d20e      	bcs.n	117f2 <list_it_iternext+0x3c>
        mp_obj_t o_out = list->items[self->cur];
   117d4:	693b      	ldr	r3, [r7, #16]
   117d6:	68da      	ldr	r2, [r3, #12]
   117d8:	697b      	ldr	r3, [r7, #20]
   117da:	68db      	ldr	r3, [r3, #12]
   117dc:	009b      	lsls	r3, r3, #2
   117de:	4413      	add	r3, r2
   117e0:	681b      	ldr	r3, [r3, #0]
   117e2:	60fb      	str	r3, [r7, #12]
        self->cur += 1;
   117e4:	697b      	ldr	r3, [r7, #20]
   117e6:	68db      	ldr	r3, [r3, #12]
   117e8:	1c5a      	adds	r2, r3, #1
   117ea:	697b      	ldr	r3, [r7, #20]
   117ec:	60da      	str	r2, [r3, #12]
        return o_out;
   117ee:	68fb      	ldr	r3, [r7, #12]
   117f0:	e000      	b.n	117f4 <list_it_iternext+0x3e>
    } else {
        return MP_OBJ_STOP_ITERATION;
   117f2:	2304      	movs	r3, #4
    }
}
   117f4:	4618      	mov	r0, r3
   117f6:	371c      	adds	r7, #28
   117f8:	46bd      	mov	sp, r7
   117fa:	f85d 7b04 	ldr.w	r7, [sp], #4
   117fe:	4770      	bx	lr

00011800 <mp_obj_new_list_iterator>:

mp_obj_t mp_obj_new_list_iterator(mp_obj_t list, size_t cur, mp_obj_iter_buf_t *iter_buf) {
   11800:	b480      	push	{r7}
   11802:	b087      	sub	sp, #28
   11804:	af00      	add	r7, sp, #0
   11806:	60f8      	str	r0, [r7, #12]
   11808:	60b9      	str	r1, [r7, #8]
   1180a:	607a      	str	r2, [r7, #4]
    assert(sizeof(mp_obj_list_it_t) <= sizeof(mp_obj_iter_buf_t));
    mp_obj_list_it_t *o = (mp_obj_list_it_t*)iter_buf;
   1180c:	687b      	ldr	r3, [r7, #4]
   1180e:	617b      	str	r3, [r7, #20]
    o->base.type = &mp_type_polymorph_iter;
   11810:	697b      	ldr	r3, [r7, #20]
   11812:	4a09      	ldr	r2, [pc, #36]	; (11838 <mp_obj_new_list_iterator+0x38>)
   11814:	601a      	str	r2, [r3, #0]
    o->iternext = list_it_iternext;
   11816:	697b      	ldr	r3, [r7, #20]
   11818:	4a08      	ldr	r2, [pc, #32]	; (1183c <mp_obj_new_list_iterator+0x3c>)
   1181a:	605a      	str	r2, [r3, #4]
    o->list = list;
   1181c:	697b      	ldr	r3, [r7, #20]
   1181e:	68fa      	ldr	r2, [r7, #12]
   11820:	609a      	str	r2, [r3, #8]
    o->cur = cur;
   11822:	697b      	ldr	r3, [r7, #20]
   11824:	68ba      	ldr	r2, [r7, #8]
   11826:	60da      	str	r2, [r3, #12]
    return MP_OBJ_FROM_PTR(o);
   11828:	697b      	ldr	r3, [r7, #20]
}
   1182a:	4618      	mov	r0, r3
   1182c:	371c      	adds	r7, #28
   1182e:	46bd      	mov	sp, r7
   11830:	f85d 7b04 	ldr.w	r7, [sp], #4
   11834:	4770      	bx	lr
   11836:	bf00      	nop
   11838:	00021234 	.word	0x00021234
   1183c:	000117b7 	.word	0x000117b7

00011840 <MP_OBJ_IS_OBJ>:
    { return ((((mp_int_t)(o)) & 3) == 0); }
   11840:	b480      	push	{r7}
   11842:	b083      	sub	sp, #12
   11844:	af00      	add	r7, sp, #0
   11846:	6078      	str	r0, [r7, #4]
   11848:	687b      	ldr	r3, [r7, #4]
   1184a:	f003 0303 	and.w	r3, r3, #3
   1184e:	2b00      	cmp	r3, #0
   11850:	bf0c      	ite	eq
   11852:	2301      	moveq	r3, #1
   11854:	2300      	movne	r3, #0
   11856:	b2db      	uxtb	r3, r3
   11858:	4618      	mov	r0, r3
   1185a:	370c      	adds	r7, #12
   1185c:	46bd      	mov	sp, r7
   1185e:	f85d 7b04 	ldr.w	r7, [sp], #4
   11862:	4770      	bx	lr

00011864 <map_make_new>:
    size_t n_iters;
    mp_obj_t fun;
    mp_obj_t iters[];
} mp_obj_map_t;

STATIC mp_obj_t map_make_new(const mp_obj_type_t *type, size_t n_args, size_t n_kw, const mp_obj_t *args) {
   11864:	b580      	push	{r7, lr}
   11866:	b088      	sub	sp, #32
   11868:	af02      	add	r7, sp, #8
   1186a:	60f8      	str	r0, [r7, #12]
   1186c:	60b9      	str	r1, [r7, #8]
   1186e:	607a      	str	r2, [r7, #4]
   11870:	603b      	str	r3, [r7, #0]
    mp_arg_check_num(n_args, n_kw, 2, MP_OBJ_FUN_ARGS_MAX, false);
   11872:	2300      	movs	r3, #0
   11874:	9300      	str	r3, [sp, #0]
   11876:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1187a:	2202      	movs	r2, #2
   1187c:	6879      	ldr	r1, [r7, #4]
   1187e:	68b8      	ldr	r0, [r7, #8]
   11880:	f7fb fb76 	bl	cf70 <mp_arg_check_num>
    mp_obj_map_t *o = m_new_obj_var(mp_obj_map_t, mp_obj_t, n_args - 1);
   11884:	68bb      	ldr	r3, [r7, #8]
   11886:	3302      	adds	r3, #2
   11888:	009b      	lsls	r3, r3, #2
   1188a:	4618      	mov	r0, r3
   1188c:	f7ee fd46 	bl	31c <m_malloc>
   11890:	6138      	str	r0, [r7, #16]
    o->base.type = type;
   11892:	693b      	ldr	r3, [r7, #16]
   11894:	68fa      	ldr	r2, [r7, #12]
   11896:	601a      	str	r2, [r3, #0]
    o->n_iters = n_args - 1;
   11898:	68bb      	ldr	r3, [r7, #8]
   1189a:	1e5a      	subs	r2, r3, #1
   1189c:	693b      	ldr	r3, [r7, #16]
   1189e:	605a      	str	r2, [r3, #4]
    o->fun = args[0];
   118a0:	683b      	ldr	r3, [r7, #0]
   118a2:	681a      	ldr	r2, [r3, #0]
   118a4:	693b      	ldr	r3, [r7, #16]
   118a6:	609a      	str	r2, [r3, #8]
    for (size_t i = 0; i < n_args - 1; i++) {
   118a8:	2300      	movs	r3, #0
   118aa:	617b      	str	r3, [r7, #20]
   118ac:	e013      	b.n	118d6 <map_make_new+0x72>
        o->iters[i] = mp_getiter(args[i + 1], NULL);
   118ae:	697b      	ldr	r3, [r7, #20]
   118b0:	3301      	adds	r3, #1
   118b2:	009b      	lsls	r3, r3, #2
   118b4:	683a      	ldr	r2, [r7, #0]
   118b6:	4413      	add	r3, r2
   118b8:	681b      	ldr	r3, [r3, #0]
   118ba:	2100      	movs	r1, #0
   118bc:	4618      	mov	r0, r3
   118be:	f7fa ffe3 	bl	c888 <mp_getiter>
   118c2:	4601      	mov	r1, r0
   118c4:	693a      	ldr	r2, [r7, #16]
   118c6:	697b      	ldr	r3, [r7, #20]
   118c8:	3302      	adds	r3, #2
   118ca:	009b      	lsls	r3, r3, #2
   118cc:	4413      	add	r3, r2
   118ce:	6059      	str	r1, [r3, #4]
    for (size_t i = 0; i < n_args - 1; i++) {
   118d0:	697b      	ldr	r3, [r7, #20]
   118d2:	3301      	adds	r3, #1
   118d4:	617b      	str	r3, [r7, #20]
   118d6:	68bb      	ldr	r3, [r7, #8]
   118d8:	1e5a      	subs	r2, r3, #1
   118da:	697b      	ldr	r3, [r7, #20]
   118dc:	429a      	cmp	r2, r3
   118de:	d8e6      	bhi.n	118ae <map_make_new+0x4a>
    }
    return MP_OBJ_FROM_PTR(o);
   118e0:	693b      	ldr	r3, [r7, #16]
}
   118e2:	4618      	mov	r0, r3
   118e4:	3718      	adds	r7, #24
   118e6:	46bd      	mov	sp, r7
   118e8:	bd80      	pop	{r7, pc}

000118ea <map_iternext>:

STATIC mp_obj_t map_iternext(mp_obj_t self_in) {
   118ea:	b580      	push	{r7, lr}
   118ec:	b086      	sub	sp, #24
   118ee:	af00      	add	r7, sp, #0
   118f0:	6078      	str	r0, [r7, #4]
    mp_check_self(MP_OBJ_IS_TYPE(self_in, &mp_type_map));
   118f2:	6878      	ldr	r0, [r7, #4]
   118f4:	f7ff ffa4 	bl	11840 <MP_OBJ_IS_OBJ>
   118f8:	4603      	mov	r3, r0
   118fa:	2b00      	cmp	r3, #0
   118fc:	d004      	beq.n	11908 <map_iternext+0x1e>
   118fe:	687b      	ldr	r3, [r7, #4]
   11900:	681b      	ldr	r3, [r3, #0]
   11902:	4a21      	ldr	r2, [pc, #132]	; (11988 <map_iternext+0x9e>)
   11904:	4293      	cmp	r3, r2
   11906:	d005      	beq.n	11914 <map_iternext+0x2a>
   11908:	4b20      	ldr	r3, [pc, #128]	; (1198c <map_iternext+0xa2>)
   1190a:	4a21      	ldr	r2, [pc, #132]	; (11990 <map_iternext+0xa6>)
   1190c:	2134      	movs	r1, #52	; 0x34
   1190e:	4821      	ldr	r0, [pc, #132]	; (11994 <map_iternext+0xaa>)
   11910:	f009 fc54 	bl	1b1bc <__assert_func>
    mp_obj_map_t *self = MP_OBJ_TO_PTR(self_in);
   11914:	687b      	ldr	r3, [r7, #4]
   11916:	613b      	str	r3, [r7, #16]
    mp_obj_t *nextses = m_new(mp_obj_t, self->n_iters);
   11918:	693b      	ldr	r3, [r7, #16]
   1191a:	685b      	ldr	r3, [r3, #4]
   1191c:	009b      	lsls	r3, r3, #2
   1191e:	4618      	mov	r0, r3
   11920:	f7ee fcfc 	bl	31c <m_malloc>
   11924:	60f8      	str	r0, [r7, #12]

    for (size_t i = 0; i < self->n_iters; i++) {
   11926:	2300      	movs	r3, #0
   11928:	617b      	str	r3, [r7, #20]
   1192a:	e01a      	b.n	11962 <map_iternext+0x78>
        mp_obj_t next = mp_iternext(self->iters[i]);
   1192c:	693a      	ldr	r2, [r7, #16]
   1192e:	697b      	ldr	r3, [r7, #20]
   11930:	3302      	adds	r3, #2
   11932:	009b      	lsls	r3, r3, #2
   11934:	4413      	add	r3, r2
   11936:	685b      	ldr	r3, [r3, #4]
   11938:	4618      	mov	r0, r3
   1193a:	f7fb f827 	bl	c98c <mp_iternext>
   1193e:	60b8      	str	r0, [r7, #8]
        if (next == MP_OBJ_STOP_ITERATION) {
   11940:	68bb      	ldr	r3, [r7, #8]
   11942:	2b04      	cmp	r3, #4
   11944:	d104      	bne.n	11950 <map_iternext+0x66>
            m_del(mp_obj_t, nextses, self->n_iters);
   11946:	68f8      	ldr	r0, [r7, #12]
   11948:	f7ee fd46 	bl	3d8 <m_free>
            return MP_OBJ_STOP_ITERATION;
   1194c:	2304      	movs	r3, #4
   1194e:	e016      	b.n	1197e <map_iternext+0x94>
        }
        nextses[i] = next;
   11950:	697b      	ldr	r3, [r7, #20]
   11952:	009b      	lsls	r3, r3, #2
   11954:	68fa      	ldr	r2, [r7, #12]
   11956:	4413      	add	r3, r2
   11958:	68ba      	ldr	r2, [r7, #8]
   1195a:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < self->n_iters; i++) {
   1195c:	697b      	ldr	r3, [r7, #20]
   1195e:	3301      	adds	r3, #1
   11960:	617b      	str	r3, [r7, #20]
   11962:	693b      	ldr	r3, [r7, #16]
   11964:	685a      	ldr	r2, [r3, #4]
   11966:	697b      	ldr	r3, [r7, #20]
   11968:	429a      	cmp	r2, r3
   1196a:	d8df      	bhi.n	1192c <map_iternext+0x42>
    }
    return mp_call_function_n_kw(self->fun, self->n_iters, 0, nextses);
   1196c:	693b      	ldr	r3, [r7, #16]
   1196e:	6898      	ldr	r0, [r3, #8]
   11970:	693b      	ldr	r3, [r7, #16]
   11972:	6859      	ldr	r1, [r3, #4]
   11974:	68fb      	ldr	r3, [r7, #12]
   11976:	2200      	movs	r2, #0
   11978:	f7fa fa15 	bl	bda6 <mp_call_function_n_kw>
   1197c:	4603      	mov	r3, r0
}
   1197e:	4618      	mov	r0, r3
   11980:	3718      	adds	r7, #24
   11982:	46bd      	mov	sp, r7
   11984:	bd80      	pop	{r7, pc}
   11986:	bf00      	nop
   11988:	000210d8 	.word	0x000210d8
   1198c:	00021068 	.word	0x00021068
   11990:	00021114 	.word	0x00021114
   11994:	000210c4 	.word	0x000210c4

00011998 <MP_OBJ_IS_OBJ>:
   11998:	b480      	push	{r7}
   1199a:	b083      	sub	sp, #12
   1199c:	af00      	add	r7, sp, #0
   1199e:	6078      	str	r0, [r7, #4]
   119a0:	687b      	ldr	r3, [r7, #4]
   119a2:	f003 0303 	and.w	r3, r3, #3
   119a6:	2b00      	cmp	r3, #0
   119a8:	bf0c      	ite	eq
   119aa:	2301      	moveq	r3, #1
   119ac:	2300      	movne	r3, #0
   119ae:	b2db      	uxtb	r3, r3
   119b0:	4618      	mov	r0, r3
   119b2:	370c      	adds	r7, #12
   119b4:	46bd      	mov	sp, r7
   119b6:	f85d 7b04 	ldr.w	r7, [sp], #4
   119ba:	4770      	bx	lr

000119bc <mp_module_call_init>:
void mp_module_register(qstr qstr, mp_obj_t module);

#if MICROPY_MODULE_BUILTIN_INIT
void mp_module_call_init(qstr module_name, mp_obj_t module_obj);
#else
static inline void mp_module_call_init(qstr module_name, mp_obj_t module_obj) {
   119bc:	b480      	push	{r7}
   119be:	b083      	sub	sp, #12
   119c0:	af00      	add	r7, sp, #0
   119c2:	6078      	str	r0, [r7, #4]
   119c4:	6039      	str	r1, [r7, #0]
    (void)module_name;
    (void)module_obj;
}
   119c6:	bf00      	nop
   119c8:	370c      	adds	r7, #12
   119ca:	46bd      	mov	sp, r7
   119cc:	f85d 7b04 	ldr.w	r7, [sp], #4
   119d0:	4770      	bx	lr

000119d2 <module_print>:

#include "py/objmodule.h"
#include "py/runtime.h"
#include "py/builtin.h"

STATIC void module_print(const mp_print_t *print, mp_obj_t self_in, mp_print_kind_t kind) {
   119d2:	b580      	push	{r7, lr}
   119d4:	b088      	sub	sp, #32
   119d6:	af00      	add	r7, sp, #0
   119d8:	60f8      	str	r0, [r7, #12]
   119da:	60b9      	str	r1, [r7, #8]
   119dc:	607a      	str	r2, [r7, #4]
    (void)kind;
    mp_obj_module_t *self = MP_OBJ_TO_PTR(self_in);
   119de:	68bb      	ldr	r3, [r7, #8]
   119e0:	61bb      	str	r3, [r7, #24]

    const char *module_name = "";
   119e2:	4b0e      	ldr	r3, [pc, #56]	; (11a1c <module_print+0x4a>)
   119e4:	61fb      	str	r3, [r7, #28]
    mp_map_elem_t *elem = mp_map_lookup(&self->globals->map, MP_OBJ_NEW_QSTR(MP_QSTR___name__), MP_MAP_LOOKUP);
   119e6:	69bb      	ldr	r3, [r7, #24]
   119e8:	685b      	ldr	r3, [r3, #4]
   119ea:	3304      	adds	r3, #4
   119ec:	2200      	movs	r2, #0
   119ee:	216e      	movs	r1, #110	; 0x6e
   119f0:	4618      	mov	r0, r3
   119f2:	f7fb fd03 	bl	d3fc <mp_map_lookup>
   119f6:	6178      	str	r0, [r7, #20]
    if (elem != NULL) {
   119f8:	697b      	ldr	r3, [r7, #20]
   119fa:	2b00      	cmp	r3, #0
   119fc:	d005      	beq.n	11a0a <module_print+0x38>
        module_name = mp_obj_str_get_str(elem->value);
   119fe:	697b      	ldr	r3, [r7, #20]
   11a00:	685b      	ldr	r3, [r3, #4]
   11a02:	4618      	mov	r0, r3
   11a04:	f003 fcf8 	bl	153f8 <mp_obj_str_get_str>
   11a08:	61f8      	str	r0, [r7, #28]
        mp_printf(print, "<module '%s' from '%s'>", module_name, mp_obj_str_get_str(elem->value));
        return;
    }
#endif

    mp_printf(print, "<module '%s'>", module_name);
   11a0a:	69fa      	ldr	r2, [r7, #28]
   11a0c:	4904      	ldr	r1, [pc, #16]	; (11a20 <module_print+0x4e>)
   11a0e:	68f8      	ldr	r0, [r7, #12]
   11a10:	f7f0 fa30 	bl	1e74 <mp_printf>
}
   11a14:	bf00      	nop
   11a16:	3720      	adds	r7, #32
   11a18:	46bd      	mov	sp, r7
   11a1a:	bd80      	pop	{r7, pc}
   11a1c:	00021124 	.word	0x00021124
   11a20:	00021128 	.word	0x00021128

00011a24 <module_attr>:

STATIC void module_attr(mp_obj_t self_in, qstr attr, mp_obj_t *dest) {
   11a24:	b580      	push	{r7, lr}
   11a26:	b088      	sub	sp, #32
   11a28:	af00      	add	r7, sp, #0
   11a2a:	60f8      	str	r0, [r7, #12]
   11a2c:	60b9      	str	r1, [r7, #8]
   11a2e:	607a      	str	r2, [r7, #4]
    mp_obj_module_t *self = MP_OBJ_TO_PTR(self_in);
   11a30:	68fb      	ldr	r3, [r7, #12]
   11a32:	61fb      	str	r3, [r7, #28]
    if (dest[0] == MP_OBJ_NULL) {
   11a34:	687b      	ldr	r3, [r7, #4]
   11a36:	681b      	ldr	r3, [r3, #0]
   11a38:	2b00      	cmp	r3, #0
   11a3a:	d113      	bne.n	11a64 <module_attr+0x40>
        // load attribute
        mp_map_elem_t *elem = mp_map_lookup(&self->globals->map, MP_OBJ_NEW_QSTR(attr), MP_MAP_LOOKUP);
   11a3c:	69fb      	ldr	r3, [r7, #28]
   11a3e:	685b      	ldr	r3, [r3, #4]
   11a40:	1d18      	adds	r0, r3, #4
   11a42:	68bb      	ldr	r3, [r7, #8]
   11a44:	009b      	lsls	r3, r3, #2
   11a46:	f043 0302 	orr.w	r3, r3, #2
   11a4a:	2200      	movs	r2, #0
   11a4c:	4619      	mov	r1, r3
   11a4e:	f7fb fcd5 	bl	d3fc <mp_map_lookup>
   11a52:	61b8      	str	r0, [r7, #24]
        if (elem != NULL) {
   11a54:	69bb      	ldr	r3, [r7, #24]
   11a56:	2b00      	cmp	r3, #0
   11a58:	d02d      	beq.n	11ab6 <module_attr+0x92>
            dest[0] = elem->value;
   11a5a:	69bb      	ldr	r3, [r7, #24]
   11a5c:	685a      	ldr	r2, [r3, #4]
   11a5e:	687b      	ldr	r3, [r7, #4]
   11a60:	601a      	str	r2, [r3, #0]
   11a62:	e028      	b.n	11ab6 <module_attr+0x92>
        }
    } else {
        // delete/store attribute
        mp_obj_dict_t *dict = self->globals;
   11a64:	69fb      	ldr	r3, [r7, #28]
   11a66:	685b      	ldr	r3, [r3, #4]
   11a68:	617b      	str	r3, [r7, #20]
        if (dict->map.is_fixed) {
   11a6a:	697b      	ldr	r3, [r7, #20]
   11a6c:	791b      	ldrb	r3, [r3, #4]
   11a6e:	f003 0302 	and.w	r3, r3, #2
   11a72:	b2db      	uxtb	r3, r3
   11a74:	2b00      	cmp	r3, #0
   11a76:	d11d      	bne.n	11ab4 <module_attr+0x90>
            {
                // can't delete or store to fixed map
                return;
            }
        }
        if (dest[1] == MP_OBJ_NULL) {
   11a78:	687b      	ldr	r3, [r7, #4]
   11a7a:	3304      	adds	r3, #4
   11a7c:	681b      	ldr	r3, [r3, #0]
   11a7e:	2b00      	cmp	r3, #0
   11a80:	d108      	bne.n	11a94 <module_attr+0x70>
            // delete attribute
            mp_obj_dict_delete(MP_OBJ_FROM_PTR(dict), MP_OBJ_NEW_QSTR(attr));
   11a82:	68bb      	ldr	r3, [r7, #8]
   11a84:	009b      	lsls	r3, r3, #2
   11a86:	f043 0302 	orr.w	r3, r3, #2
   11a8a:	4619      	mov	r1, r3
   11a8c:	6978      	ldr	r0, [r7, #20]
   11a8e:	f7fd fb19 	bl	f0c4 <mp_obj_dict_delete>
   11a92:	e00b      	b.n	11aac <module_attr+0x88>
        } else {
            // store attribute
            // TODO CPython allows STORE_ATTR to a module, but is this the correct implementation?
            mp_obj_dict_store(MP_OBJ_FROM_PTR(dict), MP_OBJ_NEW_QSTR(attr), dest[1]);
   11a94:	68bb      	ldr	r3, [r7, #8]
   11a96:	009b      	lsls	r3, r3, #2
   11a98:	f043 0302 	orr.w	r3, r3, #2
   11a9c:	4619      	mov	r1, r3
   11a9e:	687b      	ldr	r3, [r7, #4]
   11aa0:	3304      	adds	r3, #4
   11aa2:	681b      	ldr	r3, [r3, #0]
   11aa4:	461a      	mov	r2, r3
   11aa6:	6978      	ldr	r0, [r7, #20]
   11aa8:	f7fd fad7 	bl	f05a <mp_obj_dict_store>
        }
        dest[0] = MP_OBJ_NULL; // indicate success
   11aac:	687b      	ldr	r3, [r7, #4]
   11aae:	2200      	movs	r2, #0
   11ab0:	601a      	str	r2, [r3, #0]
   11ab2:	e000      	b.n	11ab6 <module_attr+0x92>
                return;
   11ab4:	bf00      	nop
    }
}
   11ab6:	3720      	adds	r7, #32
   11ab8:	46bd      	mov	sp, r7
   11aba:	bd80      	pop	{r7, pc}

00011abc <mp_obj_new_module>:
    .name = MP_QSTR_module,
    .print = module_print,
    .attr = module_attr,
};

mp_obj_t mp_obj_new_module(qstr module_name) {
   11abc:	b580      	push	{r7, lr}
   11abe:	b086      	sub	sp, #24
   11ac0:	af00      	add	r7, sp, #0
   11ac2:	6078      	str	r0, [r7, #4]
    mp_map_t *mp_loaded_modules_map = &MP_STATE_VM(mp_loaded_modules_dict).map;
   11ac4:	4b18      	ldr	r3, [pc, #96]	; (11b28 <mp_obj_new_module+0x6c>)
   11ac6:	617b      	str	r3, [r7, #20]
    mp_map_elem_t *el = mp_map_lookup(mp_loaded_modules_map, MP_OBJ_NEW_QSTR(module_name), MP_MAP_LOOKUP_ADD_IF_NOT_FOUND);
   11ac8:	687b      	ldr	r3, [r7, #4]
   11aca:	009b      	lsls	r3, r3, #2
   11acc:	f043 0302 	orr.w	r3, r3, #2
   11ad0:	2201      	movs	r2, #1
   11ad2:	4619      	mov	r1, r3
   11ad4:	6978      	ldr	r0, [r7, #20]
   11ad6:	f7fb fc91 	bl	d3fc <mp_map_lookup>
   11ada:	6138      	str	r0, [r7, #16]
    // We could error out if module already exists, but let C extensions
    // add new members to existing modules.
    if (el->value != MP_OBJ_NULL) {
   11adc:	693b      	ldr	r3, [r7, #16]
   11ade:	685b      	ldr	r3, [r3, #4]
   11ae0:	2b00      	cmp	r3, #0
   11ae2:	d002      	beq.n	11aea <mp_obj_new_module+0x2e>
        return el->value;
   11ae4:	693b      	ldr	r3, [r7, #16]
   11ae6:	685b      	ldr	r3, [r3, #4]
   11ae8:	e01a      	b.n	11b20 <mp_obj_new_module+0x64>
    }

    // create new module object
    mp_obj_module_t *o = m_new_obj(mp_obj_module_t);
   11aea:	2008      	movs	r0, #8
   11aec:	f7ee fc16 	bl	31c <m_malloc>
   11af0:	60f8      	str	r0, [r7, #12]
    o->base.type = &mp_type_module;
   11af2:	68fb      	ldr	r3, [r7, #12]
   11af4:	4a0d      	ldr	r2, [pc, #52]	; (11b2c <mp_obj_new_module+0x70>)
   11af6:	601a      	str	r2, [r3, #0]
    o->globals = MP_OBJ_TO_PTR(mp_obj_new_dict(MICROPY_MODULE_DICT_SIZE));
   11af8:	2001      	movs	r0, #1
   11afa:	f7fd fa8d 	bl	f018 <mp_obj_new_dict>
   11afe:	4602      	mov	r2, r0
   11b00:	68fb      	ldr	r3, [r7, #12]
   11b02:	605a      	str	r2, [r3, #4]

    // store __name__ entry in the module
    mp_obj_dict_store(MP_OBJ_FROM_PTR(o->globals), MP_OBJ_NEW_QSTR(MP_QSTR___name__), MP_OBJ_NEW_QSTR(module_name));
   11b04:	68fb      	ldr	r3, [r7, #12]
   11b06:	6858      	ldr	r0, [r3, #4]
   11b08:	687b      	ldr	r3, [r7, #4]
   11b0a:	009b      	lsls	r3, r3, #2
   11b0c:	f043 0302 	orr.w	r3, r3, #2
   11b10:	461a      	mov	r2, r3
   11b12:	216e      	movs	r1, #110	; 0x6e
   11b14:	f7fd faa1 	bl	f05a <mp_obj_dict_store>

    // store the new module into the slot in the global dict holding all modules
    el->value = MP_OBJ_FROM_PTR(o);
   11b18:	693b      	ldr	r3, [r7, #16]
   11b1a:	68fa      	ldr	r2, [r7, #12]
   11b1c:	605a      	str	r2, [r3, #4]

    // return the new module
    return MP_OBJ_FROM_PTR(o);
   11b1e:	68fb      	ldr	r3, [r7, #12]
}
   11b20:	4618      	mov	r0, r3
   11b22:	3718      	adds	r7, #24
   11b24:	46bd      	mov	sp, r7
   11b26:	bd80      	pop	{r7, pc}
   11b28:	20000a54 	.word	0x20000a54
   11b2c:	00021138 	.word	0x00021138

00011b30 <mp_obj_module_get_globals>:

mp_obj_dict_t *mp_obj_module_get_globals(mp_obj_t self_in) {
   11b30:	b580      	push	{r7, lr}
   11b32:	b084      	sub	sp, #16
   11b34:	af00      	add	r7, sp, #0
   11b36:	6078      	str	r0, [r7, #4]
    assert(MP_OBJ_IS_TYPE(self_in, &mp_type_module));
   11b38:	6878      	ldr	r0, [r7, #4]
   11b3a:	f7ff ff2d 	bl	11998 <MP_OBJ_IS_OBJ>
   11b3e:	4603      	mov	r3, r0
   11b40:	2b00      	cmp	r3, #0
   11b42:	d004      	beq.n	11b4e <mp_obj_module_get_globals+0x1e>
   11b44:	687b      	ldr	r3, [r7, #4]
   11b46:	681b      	ldr	r3, [r3, #0]
   11b48:	4a08      	ldr	r2, [pc, #32]	; (11b6c <mp_obj_module_get_globals+0x3c>)
   11b4a:	4293      	cmp	r3, r2
   11b4c:	d005      	beq.n	11b5a <mp_obj_module_get_globals+0x2a>
   11b4e:	4b08      	ldr	r3, [pc, #32]	; (11b70 <mp_obj_module_get_globals+0x40>)
   11b50:	4a08      	ldr	r2, [pc, #32]	; (11b74 <mp_obj_module_get_globals+0x44>)
   11b52:	217e      	movs	r1, #126	; 0x7e
   11b54:	4808      	ldr	r0, [pc, #32]	; (11b78 <mp_obj_module_get_globals+0x48>)
   11b56:	f009 fb31 	bl	1b1bc <__assert_func>
    mp_obj_module_t *self = MP_OBJ_TO_PTR(self_in);
   11b5a:	687b      	ldr	r3, [r7, #4]
   11b5c:	60fb      	str	r3, [r7, #12]
    return self->globals;
   11b5e:	68fb      	ldr	r3, [r7, #12]
   11b60:	685b      	ldr	r3, [r3, #4]
}
   11b62:	4618      	mov	r0, r3
   11b64:	3710      	adds	r7, #16
   11b66:	46bd      	mov	sp, r7
   11b68:	bd80      	pop	{r7, pc}
   11b6a:	bf00      	nop
   11b6c:	00021138 	.word	0x00021138
   11b70:	00021174 	.word	0x00021174
   11b74:	000211dc 	.word	0x000211dc
   11b78:	000211a0 	.word	0x000211a0

00011b7c <mp_module_get>:

MP_DEFINE_CONST_MAP(mp_builtin_module_weak_links_map, mp_builtin_module_weak_links_table);
#endif

// returns MP_OBJ_NULL if not found
mp_obj_t mp_module_get(qstr module_name) {
   11b7c:	b580      	push	{r7, lr}
   11b7e:	b084      	sub	sp, #16
   11b80:	af00      	add	r7, sp, #0
   11b82:	6078      	str	r0, [r7, #4]
    mp_map_t *mp_loaded_modules_map = &MP_STATE_VM(mp_loaded_modules_dict).map;
   11b84:	4b14      	ldr	r3, [pc, #80]	; (11bd8 <mp_module_get+0x5c>)
   11b86:	60bb      	str	r3, [r7, #8]
    // lookup module
    mp_map_elem_t *el = mp_map_lookup(mp_loaded_modules_map, MP_OBJ_NEW_QSTR(module_name), MP_MAP_LOOKUP);
   11b88:	687b      	ldr	r3, [r7, #4]
   11b8a:	009b      	lsls	r3, r3, #2
   11b8c:	f043 0302 	orr.w	r3, r3, #2
   11b90:	2200      	movs	r2, #0
   11b92:	4619      	mov	r1, r3
   11b94:	68b8      	ldr	r0, [r7, #8]
   11b96:	f7fb fc31 	bl	d3fc <mp_map_lookup>
   11b9a:	60f8      	str	r0, [r7, #12]

    if (el == NULL) {
   11b9c:	68fb      	ldr	r3, [r7, #12]
   11b9e:	2b00      	cmp	r3, #0
   11ba0:	d114      	bne.n	11bcc <mp_module_get+0x50>
        // module not found, look for builtin module names
        el = mp_map_lookup((mp_map_t*)&mp_builtin_module_map, MP_OBJ_NEW_QSTR(module_name), MP_MAP_LOOKUP);
   11ba2:	687b      	ldr	r3, [r7, #4]
   11ba4:	009b      	lsls	r3, r3, #2
   11ba6:	f043 0302 	orr.w	r3, r3, #2
   11baa:	2200      	movs	r2, #0
   11bac:	4619      	mov	r1, r3
   11bae:	480b      	ldr	r0, [pc, #44]	; (11bdc <mp_module_get+0x60>)
   11bb0:	f7fb fc24 	bl	d3fc <mp_map_lookup>
   11bb4:	60f8      	str	r0, [r7, #12]
        if (el == NULL) {
   11bb6:	68fb      	ldr	r3, [r7, #12]
   11bb8:	2b00      	cmp	r3, #0
   11bba:	d101      	bne.n	11bc0 <mp_module_get+0x44>
            return MP_OBJ_NULL;
   11bbc:	2300      	movs	r3, #0
   11bbe:	e007      	b.n	11bd0 <mp_module_get+0x54>
        }
        mp_module_call_init(module_name, el->value);
   11bc0:	68fb      	ldr	r3, [r7, #12]
   11bc2:	685b      	ldr	r3, [r3, #4]
   11bc4:	4619      	mov	r1, r3
   11bc6:	6878      	ldr	r0, [r7, #4]
   11bc8:	f7ff fef8 	bl	119bc <mp_module_call_init>
    }

    // module found, return it
    return el->value;
   11bcc:	68fb      	ldr	r3, [r7, #12]
   11bce:	685b      	ldr	r3, [r3, #4]
}
   11bd0:	4618      	mov	r0, r3
   11bd2:	3710      	adds	r7, #16
   11bd4:	46bd      	mov	sp, r7
   11bd6:	bd80      	pop	{r7, pc}
   11bd8:	20000a54 	.word	0x20000a54
   11bdc:	000211d0 	.word	0x000211d0

00011be0 <mp_module_register>:

void mp_module_register(qstr qst, mp_obj_t module) {
   11be0:	b580      	push	{r7, lr}
   11be2:	b084      	sub	sp, #16
   11be4:	af00      	add	r7, sp, #0
   11be6:	6078      	str	r0, [r7, #4]
   11be8:	6039      	str	r1, [r7, #0]
    mp_map_t *mp_loaded_modules_map = &MP_STATE_VM(mp_loaded_modules_dict).map;
   11bea:	4b09      	ldr	r3, [pc, #36]	; (11c10 <mp_module_register+0x30>)
   11bec:	60fb      	str	r3, [r7, #12]
    mp_map_lookup(mp_loaded_modules_map, MP_OBJ_NEW_QSTR(qst), MP_MAP_LOOKUP_ADD_IF_NOT_FOUND)->value = module;
   11bee:	687b      	ldr	r3, [r7, #4]
   11bf0:	009b      	lsls	r3, r3, #2
   11bf2:	f043 0302 	orr.w	r3, r3, #2
   11bf6:	2201      	movs	r2, #1
   11bf8:	4619      	mov	r1, r3
   11bfa:	68f8      	ldr	r0, [r7, #12]
   11bfc:	f7fb fbfe 	bl	d3fc <mp_map_lookup>
   11c00:	4602      	mov	r2, r0
   11c02:	683b      	ldr	r3, [r7, #0]
   11c04:	6053      	str	r3, [r2, #4]
}
   11c06:	bf00      	nop
   11c08:	3710      	adds	r7, #16
   11c0a:	46bd      	mov	sp, r7
   11c0c:	bd80      	pop	{r7, pc}
   11c0e:	bf00      	nop
   11c10:	20000a54 	.word	0x20000a54

00011c14 <object_make_new>:

typedef struct _mp_obj_object_t {
    mp_obj_base_t base;
} mp_obj_object_t;

STATIC mp_obj_t object_make_new(const mp_obj_type_t *type, size_t n_args, size_t n_kw, const mp_obj_t *args) {
   11c14:	b580      	push	{r7, lr}
   11c16:	b088      	sub	sp, #32
   11c18:	af02      	add	r7, sp, #8
   11c1a:	60f8      	str	r0, [r7, #12]
   11c1c:	60b9      	str	r1, [r7, #8]
   11c1e:	607a      	str	r2, [r7, #4]
   11c20:	603b      	str	r3, [r7, #0]
    (void)args;
    mp_arg_check_num(n_args, n_kw, 0, 0, false);
   11c22:	2300      	movs	r3, #0
   11c24:	9300      	str	r3, [sp, #0]
   11c26:	2300      	movs	r3, #0
   11c28:	2200      	movs	r2, #0
   11c2a:	6879      	ldr	r1, [r7, #4]
   11c2c:	68b8      	ldr	r0, [r7, #8]
   11c2e:	f7fb f99f 	bl	cf70 <mp_arg_check_num>
    mp_obj_object_t *o = m_new_obj(mp_obj_object_t);
   11c32:	2004      	movs	r0, #4
   11c34:	f7ee fb72 	bl	31c <m_malloc>
   11c38:	6178      	str	r0, [r7, #20]
    o->base.type = type;
   11c3a:	697b      	ldr	r3, [r7, #20]
   11c3c:	68fa      	ldr	r2, [r7, #12]
   11c3e:	601a      	str	r2, [r3, #0]
    return MP_OBJ_FROM_PTR(o);
   11c40:	697b      	ldr	r3, [r7, #20]
}
   11c42:	4618      	mov	r0, r3
   11c44:	3718      	adds	r7, #24
   11c46:	46bd      	mov	sp, r7
   11c48:	bd80      	pop	{r7, pc}

00011c4a <polymorph_it_iternext>:
typedef struct _mp_obj_polymorph_iter_t {
    mp_obj_base_t base;
    mp_fun_1_t iternext;
} mp_obj_polymorph_iter_t;

STATIC mp_obj_t polymorph_it_iternext(mp_obj_t self_in) {
   11c4a:	b580      	push	{r7, lr}
   11c4c:	b084      	sub	sp, #16
   11c4e:	af00      	add	r7, sp, #0
   11c50:	6078      	str	r0, [r7, #4]
    mp_obj_polymorph_iter_t *self = MP_OBJ_TO_PTR(self_in);
   11c52:	687b      	ldr	r3, [r7, #4]
   11c54:	60fb      	str	r3, [r7, #12]
    // Redirect call to object instance's iternext method
    return self->iternext(self_in);
   11c56:	68fb      	ldr	r3, [r7, #12]
   11c58:	685b      	ldr	r3, [r3, #4]
   11c5a:	6878      	ldr	r0, [r7, #4]
   11c5c:	4798      	blx	r3
   11c5e:	4603      	mov	r3, r0
}
   11c60:	4618      	mov	r0, r3
   11c62:	3710      	adds	r7, #16
   11c64:	46bd      	mov	sp, r7
   11c66:	bd80      	pop	{r7, pc}

00011c68 <none_print>:

typedef struct _mp_obj_none_t {
    mp_obj_base_t base;
} mp_obj_none_t;

STATIC void none_print(const mp_print_t *print, mp_obj_t self_in, mp_print_kind_t kind) {
   11c68:	b580      	push	{r7, lr}
   11c6a:	b084      	sub	sp, #16
   11c6c:	af00      	add	r7, sp, #0
   11c6e:	60f8      	str	r0, [r7, #12]
   11c70:	60b9      	str	r1, [r7, #8]
   11c72:	607a      	str	r2, [r7, #4]
    (void)self_in;
    if (MICROPY_PY_UJSON && kind == PRINT_JSON) {
        mp_print_str(print, "null");
    } else {
        mp_print_str(print, "None");
   11c74:	4903      	ldr	r1, [pc, #12]	; (11c84 <none_print+0x1c>)
   11c76:	68f8      	ldr	r0, [r7, #12]
   11c78:	f7ef fdea 	bl	1850 <mp_print_str>
    }
}
   11c7c:	bf00      	nop
   11c7e:	3710      	adds	r7, #16
   11c80:	46bd      	mov	sp, r7
   11c82:	bd80      	pop	{r7, pc}
   11c84:	00021270 	.word	0x00021270

00011c88 <mp_obj_new_bool>:
static inline mp_obj_t mp_obj_new_bool(mp_int_t x) { return x ? mp_const_true : mp_const_false; }
   11c88:	b480      	push	{r7}
   11c8a:	b083      	sub	sp, #12
   11c8c:	af00      	add	r7, sp, #0
   11c8e:	6078      	str	r0, [r7, #4]
   11c90:	687b      	ldr	r3, [r7, #4]
   11c92:	2b00      	cmp	r3, #0
   11c94:	d001      	beq.n	11c9a <mp_obj_new_bool+0x12>
   11c96:	4b04      	ldr	r3, [pc, #16]	; (11ca8 <mp_obj_new_bool+0x20>)
   11c98:	e000      	b.n	11c9c <mp_obj_new_bool+0x14>
   11c9a:	4b04      	ldr	r3, [pc, #16]	; (11cac <mp_obj_new_bool+0x24>)
   11c9c:	4618      	mov	r0, r3
   11c9e:	370c      	adds	r7, #12
   11ca0:	46bd      	mov	sp, r7
   11ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
   11ca6:	4770      	bx	lr
   11ca8:	0001f9c4 	.word	0x0001f9c4
   11cac:	0001f9bc 	.word	0x0001f9bc

00011cb0 <range_it_iternext>:
    mp_int_t cur;
    mp_int_t stop;
    mp_int_t step;
} mp_obj_range_it_t;

STATIC mp_obj_t range_it_iternext(mp_obj_t o_in) {
   11cb0:	b480      	push	{r7}
   11cb2:	b085      	sub	sp, #20
   11cb4:	af00      	add	r7, sp, #0
   11cb6:	6078      	str	r0, [r7, #4]
    mp_obj_range_it_t *o = MP_OBJ_TO_PTR(o_in);
   11cb8:	687b      	ldr	r3, [r7, #4]
   11cba:	60fb      	str	r3, [r7, #12]
    if ((o->step > 0 && o->cur < o->stop) || (o->step < 0 && o->cur > o->stop)) {
   11cbc:	68fb      	ldr	r3, [r7, #12]
   11cbe:	68db      	ldr	r3, [r3, #12]
   11cc0:	2b00      	cmp	r3, #0
   11cc2:	dd05      	ble.n	11cd0 <range_it_iternext+0x20>
   11cc4:	68fb      	ldr	r3, [r7, #12]
   11cc6:	685a      	ldr	r2, [r3, #4]
   11cc8:	68fb      	ldr	r3, [r7, #12]
   11cca:	689b      	ldr	r3, [r3, #8]
   11ccc:	429a      	cmp	r2, r3
   11cce:	db09      	blt.n	11ce4 <range_it_iternext+0x34>
   11cd0:	68fb      	ldr	r3, [r7, #12]
   11cd2:	68db      	ldr	r3, [r3, #12]
   11cd4:	2b00      	cmp	r3, #0
   11cd6:	da14      	bge.n	11d02 <range_it_iternext+0x52>
   11cd8:	68fb      	ldr	r3, [r7, #12]
   11cda:	685a      	ldr	r2, [r3, #4]
   11cdc:	68fb      	ldr	r3, [r7, #12]
   11cde:	689b      	ldr	r3, [r3, #8]
   11ce0:	429a      	cmp	r2, r3
   11ce2:	dd0e      	ble.n	11d02 <range_it_iternext+0x52>
        mp_obj_t o_out = MP_OBJ_NEW_SMALL_INT(o->cur);
   11ce4:	68fb      	ldr	r3, [r7, #12]
   11ce6:	685b      	ldr	r3, [r3, #4]
   11ce8:	005b      	lsls	r3, r3, #1
   11cea:	f043 0301 	orr.w	r3, r3, #1
   11cee:	60bb      	str	r3, [r7, #8]
        o->cur += o->step;
   11cf0:	68fb      	ldr	r3, [r7, #12]
   11cf2:	685a      	ldr	r2, [r3, #4]
   11cf4:	68fb      	ldr	r3, [r7, #12]
   11cf6:	68db      	ldr	r3, [r3, #12]
   11cf8:	441a      	add	r2, r3
   11cfa:	68fb      	ldr	r3, [r7, #12]
   11cfc:	605a      	str	r2, [r3, #4]
        return o_out;
   11cfe:	68bb      	ldr	r3, [r7, #8]
   11d00:	e000      	b.n	11d04 <range_it_iternext+0x54>
    } else {
        return MP_OBJ_STOP_ITERATION;
   11d02:	2304      	movs	r3, #4
    }
}
   11d04:	4618      	mov	r0, r3
   11d06:	3714      	adds	r7, #20
   11d08:	46bd      	mov	sp, r7
   11d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
   11d0e:	4770      	bx	lr

00011d10 <mp_obj_new_range_iterator>:
    .name = MP_QSTR_iterator,
    .getiter = mp_identity_getiter,
    .iternext = range_it_iternext,
};

STATIC mp_obj_t mp_obj_new_range_iterator(mp_int_t cur, mp_int_t stop, mp_int_t step, mp_obj_iter_buf_t *iter_buf) {
   11d10:	b480      	push	{r7}
   11d12:	b087      	sub	sp, #28
   11d14:	af00      	add	r7, sp, #0
   11d16:	60f8      	str	r0, [r7, #12]
   11d18:	60b9      	str	r1, [r7, #8]
   11d1a:	607a      	str	r2, [r7, #4]
   11d1c:	603b      	str	r3, [r7, #0]
    assert(sizeof(mp_obj_range_it_t) <= sizeof(mp_obj_iter_buf_t));
    mp_obj_range_it_t *o = (mp_obj_range_it_t*)iter_buf;
   11d1e:	683b      	ldr	r3, [r7, #0]
   11d20:	617b      	str	r3, [r7, #20]
    o->base.type = &range_it_type;
   11d22:	697b      	ldr	r3, [r7, #20]
   11d24:	4a08      	ldr	r2, [pc, #32]	; (11d48 <mp_obj_new_range_iterator+0x38>)
   11d26:	601a      	str	r2, [r3, #0]
    o->cur = cur;
   11d28:	697b      	ldr	r3, [r7, #20]
   11d2a:	68fa      	ldr	r2, [r7, #12]
   11d2c:	605a      	str	r2, [r3, #4]
    o->stop = stop;
   11d2e:	697b      	ldr	r3, [r7, #20]
   11d30:	68ba      	ldr	r2, [r7, #8]
   11d32:	609a      	str	r2, [r3, #8]
    o->step = step;
   11d34:	697b      	ldr	r3, [r7, #20]
   11d36:	687a      	ldr	r2, [r7, #4]
   11d38:	60da      	str	r2, [r3, #12]
    return MP_OBJ_FROM_PTR(o);
   11d3a:	697b      	ldr	r3, [r7, #20]
}
   11d3c:	4618      	mov	r0, r3
   11d3e:	371c      	adds	r7, #28
   11d40:	46bd      	mov	sp, r7
   11d42:	f85d 7b04 	ldr.w	r7, [sp], #4
   11d46:	4770      	bx	lr
   11d48:	000212b8 	.word	0x000212b8

00011d4c <range_print>:
    mp_int_t start;
    mp_int_t stop;
    mp_int_t step;
} mp_obj_range_t;

STATIC void range_print(const mp_print_t *print, mp_obj_t self_in, mp_print_kind_t kind) {
   11d4c:	b580      	push	{r7, lr}
   11d4e:	b086      	sub	sp, #24
   11d50:	af00      	add	r7, sp, #0
   11d52:	60f8      	str	r0, [r7, #12]
   11d54:	60b9      	str	r1, [r7, #8]
   11d56:	607a      	str	r2, [r7, #4]
    (void)kind;
    mp_obj_range_t *self = MP_OBJ_TO_PTR(self_in);
   11d58:	68bb      	ldr	r3, [r7, #8]
   11d5a:	617b      	str	r3, [r7, #20]
    mp_printf(print, "range(" INT_FMT ", " INT_FMT "", self->start, self->stop);
   11d5c:	697b      	ldr	r3, [r7, #20]
   11d5e:	685a      	ldr	r2, [r3, #4]
   11d60:	697b      	ldr	r3, [r7, #20]
   11d62:	689b      	ldr	r3, [r3, #8]
   11d64:	490b      	ldr	r1, [pc, #44]	; (11d94 <range_print+0x48>)
   11d66:	68f8      	ldr	r0, [r7, #12]
   11d68:	f7f0 f884 	bl	1e74 <mp_printf>
    if (self->step == 1) {
   11d6c:	697b      	ldr	r3, [r7, #20]
   11d6e:	68db      	ldr	r3, [r3, #12]
   11d70:	2b01      	cmp	r3, #1
   11d72:	d104      	bne.n	11d7e <range_print+0x32>
        mp_print_str(print, ")");
   11d74:	4908      	ldr	r1, [pc, #32]	; (11d98 <range_print+0x4c>)
   11d76:	68f8      	ldr	r0, [r7, #12]
   11d78:	f7ef fd6a 	bl	1850 <mp_print_str>
    } else {
        mp_printf(print, ", " INT_FMT ")", self->step);
    }
}
   11d7c:	e006      	b.n	11d8c <range_print+0x40>
        mp_printf(print, ", " INT_FMT ")", self->step);
   11d7e:	697b      	ldr	r3, [r7, #20]
   11d80:	68db      	ldr	r3, [r3, #12]
   11d82:	461a      	mov	r2, r3
   11d84:	4905      	ldr	r1, [pc, #20]	; (11d9c <range_print+0x50>)
   11d86:	68f8      	ldr	r0, [r7, #12]
   11d88:	f7f0 f874 	bl	1e74 <mp_printf>
}
   11d8c:	bf00      	nop
   11d8e:	3718      	adds	r7, #24
   11d90:	46bd      	mov	sp, r7
   11d92:	bd80      	pop	{r7, pc}
   11d94:	000212f4 	.word	0x000212f4
   11d98:	00021304 	.word	0x00021304
   11d9c:	00021308 	.word	0x00021308

00011da0 <range_make_new>:

STATIC mp_obj_t range_make_new(const mp_obj_type_t *type, size_t n_args, size_t n_kw, const mp_obj_t *args) {
   11da0:	b580      	push	{r7, lr}
   11da2:	b088      	sub	sp, #32
   11da4:	af02      	add	r7, sp, #8
   11da6:	60f8      	str	r0, [r7, #12]
   11da8:	60b9      	str	r1, [r7, #8]
   11daa:	607a      	str	r2, [r7, #4]
   11dac:	603b      	str	r3, [r7, #0]
    mp_arg_check_num(n_args, n_kw, 1, 3, false);
   11dae:	2300      	movs	r3, #0
   11db0:	9300      	str	r3, [sp, #0]
   11db2:	2303      	movs	r3, #3
   11db4:	2201      	movs	r2, #1
   11db6:	6879      	ldr	r1, [r7, #4]
   11db8:	68b8      	ldr	r0, [r7, #8]
   11dba:	f7fb f8d9 	bl	cf70 <mp_arg_check_num>

    mp_obj_range_t *o = m_new_obj(mp_obj_range_t);
   11dbe:	2010      	movs	r0, #16
   11dc0:	f7ee faac 	bl	31c <m_malloc>
   11dc4:	6178      	str	r0, [r7, #20]
    o->base.type = type;
   11dc6:	697b      	ldr	r3, [r7, #20]
   11dc8:	68fa      	ldr	r2, [r7, #12]
   11dca:	601a      	str	r2, [r3, #0]
    o->start = 0;
   11dcc:	697b      	ldr	r3, [r7, #20]
   11dce:	2200      	movs	r2, #0
   11dd0:	605a      	str	r2, [r3, #4]
    o->step = 1;
   11dd2:	697b      	ldr	r3, [r7, #20]
   11dd4:	2201      	movs	r2, #1
   11dd6:	60da      	str	r2, [r3, #12]

    if (n_args == 1) {
   11dd8:	68bb      	ldr	r3, [r7, #8]
   11dda:	2b01      	cmp	r3, #1
   11ddc:	d108      	bne.n	11df0 <range_make_new+0x50>
        o->stop = mp_obj_get_int(args[0]);
   11dde:	683b      	ldr	r3, [r7, #0]
   11de0:	681b      	ldr	r3, [r3, #0]
   11de2:	4618      	mov	r0, r3
   11de4:	f7fb fe90 	bl	db08 <mp_obj_get_int>
   11de8:	4602      	mov	r2, r0
   11dea:	697b      	ldr	r3, [r7, #20]
   11dec:	609a      	str	r2, [r3, #8]
   11dee:	e023      	b.n	11e38 <range_make_new+0x98>
    } else {
        o->start = mp_obj_get_int(args[0]);
   11df0:	683b      	ldr	r3, [r7, #0]
   11df2:	681b      	ldr	r3, [r3, #0]
   11df4:	4618      	mov	r0, r3
   11df6:	f7fb fe87 	bl	db08 <mp_obj_get_int>
   11dfa:	4602      	mov	r2, r0
   11dfc:	697b      	ldr	r3, [r7, #20]
   11dfe:	605a      	str	r2, [r3, #4]
        o->stop = mp_obj_get_int(args[1]);
   11e00:	683b      	ldr	r3, [r7, #0]
   11e02:	3304      	adds	r3, #4
   11e04:	681b      	ldr	r3, [r3, #0]
   11e06:	4618      	mov	r0, r3
   11e08:	f7fb fe7e 	bl	db08 <mp_obj_get_int>
   11e0c:	4602      	mov	r2, r0
   11e0e:	697b      	ldr	r3, [r7, #20]
   11e10:	609a      	str	r2, [r3, #8]
        if (n_args == 3) {
   11e12:	68bb      	ldr	r3, [r7, #8]
   11e14:	2b03      	cmp	r3, #3
   11e16:	d10f      	bne.n	11e38 <range_make_new+0x98>
            o->step = mp_obj_get_int(args[2]);
   11e18:	683b      	ldr	r3, [r7, #0]
   11e1a:	3308      	adds	r3, #8
   11e1c:	681b      	ldr	r3, [r3, #0]
   11e1e:	4618      	mov	r0, r3
   11e20:	f7fb fe72 	bl	db08 <mp_obj_get_int>
   11e24:	4602      	mov	r2, r0
   11e26:	697b      	ldr	r3, [r7, #20]
   11e28:	60da      	str	r2, [r3, #12]
            if (o->step == 0) {
   11e2a:	697b      	ldr	r3, [r7, #20]
   11e2c:	68db      	ldr	r3, [r3, #12]
   11e2e:	2b00      	cmp	r3, #0
   11e30:	d102      	bne.n	11e38 <range_make_new+0x98>
                mp_raise_ValueError("zero step");
   11e32:	4804      	ldr	r0, [pc, #16]	; (11e44 <range_make_new+0xa4>)
   11e34:	f7fb f86b 	bl	cf0e <mp_raise_ValueError>
            }
        }
    }

    return MP_OBJ_FROM_PTR(o);
   11e38:	697b      	ldr	r3, [r7, #20]
}
   11e3a:	4618      	mov	r0, r3
   11e3c:	3718      	adds	r7, #24
   11e3e:	46bd      	mov	sp, r7
   11e40:	bd80      	pop	{r7, pc}
   11e42:	bf00      	nop
   11e44:	00021310 	.word	0x00021310

00011e48 <range_len>:

STATIC mp_int_t range_len(mp_obj_range_t *self) {
   11e48:	b480      	push	{r7}
   11e4a:	b085      	sub	sp, #20
   11e4c:	af00      	add	r7, sp, #0
   11e4e:	6078      	str	r0, [r7, #4]
    // When computing length, need to take into account step!=1 and step<0.
    mp_int_t len = self->stop - self->start + self->step;
   11e50:	687b      	ldr	r3, [r7, #4]
   11e52:	689a      	ldr	r2, [r3, #8]
   11e54:	687b      	ldr	r3, [r7, #4]
   11e56:	685b      	ldr	r3, [r3, #4]
   11e58:	1ad2      	subs	r2, r2, r3
   11e5a:	687b      	ldr	r3, [r7, #4]
   11e5c:	68db      	ldr	r3, [r3, #12]
   11e5e:	4413      	add	r3, r2
   11e60:	60fb      	str	r3, [r7, #12]
    if (self->step > 0) {
   11e62:	687b      	ldr	r3, [r7, #4]
   11e64:	68db      	ldr	r3, [r3, #12]
   11e66:	2b00      	cmp	r3, #0
   11e68:	dd03      	ble.n	11e72 <range_len+0x2a>
        len -= 1;
   11e6a:	68fb      	ldr	r3, [r7, #12]
   11e6c:	3b01      	subs	r3, #1
   11e6e:	60fb      	str	r3, [r7, #12]
   11e70:	e002      	b.n	11e78 <range_len+0x30>
    } else {
        len += 1;
   11e72:	68fb      	ldr	r3, [r7, #12]
   11e74:	3301      	adds	r3, #1
   11e76:	60fb      	str	r3, [r7, #12]
    }
    len = len / self->step;
   11e78:	687b      	ldr	r3, [r7, #4]
   11e7a:	68db      	ldr	r3, [r3, #12]
   11e7c:	68fa      	ldr	r2, [r7, #12]
   11e7e:	fb92 f3f3 	sdiv	r3, r2, r3
   11e82:	60fb      	str	r3, [r7, #12]
    if (len < 0) {
   11e84:	68fb      	ldr	r3, [r7, #12]
   11e86:	2b00      	cmp	r3, #0
   11e88:	da01      	bge.n	11e8e <range_len+0x46>
        len = 0;
   11e8a:	2300      	movs	r3, #0
   11e8c:	60fb      	str	r3, [r7, #12]
    }
    return len;
   11e8e:	68fb      	ldr	r3, [r7, #12]
}
   11e90:	4618      	mov	r0, r3
   11e92:	3714      	adds	r7, #20
   11e94:	46bd      	mov	sp, r7
   11e96:	f85d 7b04 	ldr.w	r7, [sp], #4
   11e9a:	4770      	bx	lr

00011e9c <range_unary_op>:

STATIC mp_obj_t range_unary_op(mp_unary_op_t op, mp_obj_t self_in) {
   11e9c:	b580      	push	{r7, lr}
   11e9e:	b084      	sub	sp, #16
   11ea0:	af00      	add	r7, sp, #0
   11ea2:	6078      	str	r0, [r7, #4]
   11ea4:	6039      	str	r1, [r7, #0]
    mp_obj_range_t *self = MP_OBJ_TO_PTR(self_in);
   11ea6:	683b      	ldr	r3, [r7, #0]
   11ea8:	60fb      	str	r3, [r7, #12]
    mp_int_t len = range_len(self);
   11eaa:	68f8      	ldr	r0, [r7, #12]
   11eac:	f7ff ffcc 	bl	11e48 <range_len>
   11eb0:	60b8      	str	r0, [r7, #8]
    switch (op) {
   11eb2:	687b      	ldr	r3, [r7, #4]
   11eb4:	2b04      	cmp	r3, #4
   11eb6:	d002      	beq.n	11ebe <range_unary_op+0x22>
   11eb8:	2b05      	cmp	r3, #5
   11eba:	d00b      	beq.n	11ed4 <range_unary_op+0x38>
   11ebc:	e00f      	b.n	11ede <range_unary_op+0x42>
        case MP_UNARY_OP_BOOL: return mp_obj_new_bool(len > 0);
   11ebe:	68bb      	ldr	r3, [r7, #8]
   11ec0:	2b00      	cmp	r3, #0
   11ec2:	bfcc      	ite	gt
   11ec4:	2301      	movgt	r3, #1
   11ec6:	2300      	movle	r3, #0
   11ec8:	b2db      	uxtb	r3, r3
   11eca:	4618      	mov	r0, r3
   11ecc:	f7ff fedc 	bl	11c88 <mp_obj_new_bool>
   11ed0:	4603      	mov	r3, r0
   11ed2:	e005      	b.n	11ee0 <range_unary_op+0x44>
        case MP_UNARY_OP_LEN: return MP_OBJ_NEW_SMALL_INT(len);
   11ed4:	68bb      	ldr	r3, [r7, #8]
   11ed6:	005b      	lsls	r3, r3, #1
   11ed8:	f043 0301 	orr.w	r3, r3, #1
   11edc:	e000      	b.n	11ee0 <range_unary_op+0x44>
        default: return MP_OBJ_NULL; // op not supported
   11ede:	2300      	movs	r3, #0
    }
}
   11ee0:	4618      	mov	r0, r3
   11ee2:	3710      	adds	r7, #16
   11ee4:	46bd      	mov	sp, r7
   11ee6:	bd80      	pop	{r7, pc}

00011ee8 <range_subscr>:
                && (lhs_len == 1 || lhs->step == rhs->step)))
    );
}
#endif

STATIC mp_obj_t range_subscr(mp_obj_t self_in, mp_obj_t index, mp_obj_t value) {
   11ee8:	b580      	push	{r7, lr}
   11eea:	b088      	sub	sp, #32
   11eec:	af00      	add	r7, sp, #0
   11eee:	60f8      	str	r0, [r7, #12]
   11ef0:	60b9      	str	r1, [r7, #8]
   11ef2:	607a      	str	r2, [r7, #4]
    if (value == MP_OBJ_SENTINEL) {
   11ef4:	687b      	ldr	r3, [r7, #4]
   11ef6:	2b08      	cmp	r3, #8
   11ef8:	d11b      	bne.n	11f32 <range_subscr+0x4a>
        // load
        mp_obj_range_t *self = MP_OBJ_TO_PTR(self_in);
   11efa:	68fb      	ldr	r3, [r7, #12]
   11efc:	61fb      	str	r3, [r7, #28]
        mp_int_t len = range_len(self);
   11efe:	69f8      	ldr	r0, [r7, #28]
   11f00:	f7ff ffa2 	bl	11e48 <range_len>
   11f04:	61b8      	str	r0, [r7, #24]
                o->stop -= self->step;
            }
            return MP_OBJ_FROM_PTR(o);
        }
#endif
        size_t index_val = mp_get_index(self->base.type, len, index, false);
   11f06:	69fb      	ldr	r3, [r7, #28]
   11f08:	6818      	ldr	r0, [r3, #0]
   11f0a:	69b9      	ldr	r1, [r7, #24]
   11f0c:	2300      	movs	r3, #0
   11f0e:	68ba      	ldr	r2, [r7, #8]
   11f10:	f7fb fee6 	bl	dce0 <mp_get_index>
   11f14:	6178      	str	r0, [r7, #20]
        return MP_OBJ_NEW_SMALL_INT(self->start + index_val * self->step);
   11f16:	69fb      	ldr	r3, [r7, #28]
   11f18:	685b      	ldr	r3, [r3, #4]
   11f1a:	461a      	mov	r2, r3
   11f1c:	69fb      	ldr	r3, [r7, #28]
   11f1e:	68db      	ldr	r3, [r3, #12]
   11f20:	4619      	mov	r1, r3
   11f22:	697b      	ldr	r3, [r7, #20]
   11f24:	fb03 f301 	mul.w	r3, r3, r1
   11f28:	4413      	add	r3, r2
   11f2a:	005b      	lsls	r3, r3, #1
   11f2c:	f043 0301 	orr.w	r3, r3, #1
   11f30:	e000      	b.n	11f34 <range_subscr+0x4c>
    } else {
        return MP_OBJ_NULL; // op not supported
   11f32:	2300      	movs	r3, #0
    }
}
   11f34:	4618      	mov	r0, r3
   11f36:	3720      	adds	r7, #32
   11f38:	46bd      	mov	sp, r7
   11f3a:	bd80      	pop	{r7, pc}

00011f3c <range_getiter>:

STATIC mp_obj_t range_getiter(mp_obj_t o_in, mp_obj_iter_buf_t *iter_buf) {
   11f3c:	b580      	push	{r7, lr}
   11f3e:	b084      	sub	sp, #16
   11f40:	af00      	add	r7, sp, #0
   11f42:	6078      	str	r0, [r7, #4]
   11f44:	6039      	str	r1, [r7, #0]
    mp_obj_range_t *o = MP_OBJ_TO_PTR(o_in);
   11f46:	687b      	ldr	r3, [r7, #4]
   11f48:	60fb      	str	r3, [r7, #12]
    return mp_obj_new_range_iterator(o->start, o->stop, o->step, iter_buf);
   11f4a:	68fb      	ldr	r3, [r7, #12]
   11f4c:	6858      	ldr	r0, [r3, #4]
   11f4e:	68fb      	ldr	r3, [r7, #12]
   11f50:	6899      	ldr	r1, [r3, #8]
   11f52:	68fb      	ldr	r3, [r7, #12]
   11f54:	68da      	ldr	r2, [r3, #12]
   11f56:	683b      	ldr	r3, [r7, #0]
   11f58:	f7ff feda 	bl	11d10 <mp_obj_new_range_iterator>
   11f5c:	4603      	mov	r3, r0
}
   11f5e:	4618      	mov	r0, r3
   11f60:	3710      	adds	r7, #16
   11f62:	46bd      	mov	sp, r7
   11f64:	bd80      	pop	{r7, pc}

00011f66 <range_attr>:


#if MICROPY_PY_BUILTINS_RANGE_ATTRS
STATIC void range_attr(mp_obj_t o_in, qstr attr, mp_obj_t *dest) {
   11f66:	b580      	push	{r7, lr}
   11f68:	b086      	sub	sp, #24
   11f6a:	af00      	add	r7, sp, #0
   11f6c:	60f8      	str	r0, [r7, #12]
   11f6e:	60b9      	str	r1, [r7, #8]
   11f70:	607a      	str	r2, [r7, #4]
    if (dest[0] != MP_OBJ_NULL) {
   11f72:	687b      	ldr	r3, [r7, #4]
   11f74:	681b      	ldr	r3, [r3, #0]
   11f76:	2b00      	cmp	r3, #0
   11f78:	d125      	bne.n	11fc6 <range_attr+0x60>
        // not load attribute
        return;
    }
    mp_obj_range_t *o = MP_OBJ_TO_PTR(o_in);
   11f7a:	68fb      	ldr	r3, [r7, #12]
   11f7c:	617b      	str	r3, [r7, #20]
    if (attr == MP_QSTR_start) {
   11f7e:	68bb      	ldr	r3, [r7, #8]
   11f80:	2bb4      	cmp	r3, #180	; 0xb4
   11f82:	d108      	bne.n	11f96 <range_attr+0x30>
        dest[0] = mp_obj_new_int(o->start);
   11f84:	697b      	ldr	r3, [r7, #20]
   11f86:	685b      	ldr	r3, [r3, #4]
   11f88:	4618      	mov	r0, r3
   11f8a:	f7fe fc2d 	bl	107e8 <mp_obj_new_int>
   11f8e:	4602      	mov	r2, r0
   11f90:	687b      	ldr	r3, [r7, #4]
   11f92:	601a      	str	r2, [r3, #0]
   11f94:	e018      	b.n	11fc8 <range_attr+0x62>
    } else if (attr == MP_QSTR_stop) {
   11f96:	68bb      	ldr	r3, [r7, #8]
   11f98:	2bb8      	cmp	r3, #184	; 0xb8
   11f9a:	d108      	bne.n	11fae <range_attr+0x48>
        dest[0] = mp_obj_new_int(o->stop);
   11f9c:	697b      	ldr	r3, [r7, #20]
   11f9e:	689b      	ldr	r3, [r3, #8]
   11fa0:	4618      	mov	r0, r3
   11fa2:	f7fe fc21 	bl	107e8 <mp_obj_new_int>
   11fa6:	4602      	mov	r2, r0
   11fa8:	687b      	ldr	r3, [r7, #4]
   11faa:	601a      	str	r2, [r3, #0]
   11fac:	e00c      	b.n	11fc8 <range_attr+0x62>
    } else if (attr == MP_QSTR_step) {
   11fae:	68bb      	ldr	r3, [r7, #8]
   11fb0:	2bb7      	cmp	r3, #183	; 0xb7
   11fb2:	d109      	bne.n	11fc8 <range_attr+0x62>
        dest[0] = mp_obj_new_int(o->step);
   11fb4:	697b      	ldr	r3, [r7, #20]
   11fb6:	68db      	ldr	r3, [r3, #12]
   11fb8:	4618      	mov	r0, r3
   11fba:	f7fe fc15 	bl	107e8 <mp_obj_new_int>
   11fbe:	4602      	mov	r2, r0
   11fc0:	687b      	ldr	r3, [r7, #4]
   11fc2:	601a      	str	r2, [r3, #0]
   11fc4:	e000      	b.n	11fc8 <range_attr+0x62>
        return;
   11fc6:	bf00      	nop
    }
}
   11fc8:	3718      	adds	r7, #24
   11fca:	46bd      	mov	sp, r7
   11fcc:	bd80      	pop	{r7, pc}
   11fce:	bf00      	nop

00011fd0 <singleton_print>:
typedef struct _mp_obj_singleton_t {
    mp_obj_base_t base;
    qstr name;
} mp_obj_singleton_t;

STATIC void singleton_print(const mp_print_t *print, mp_obj_t self_in, mp_print_kind_t kind) {
   11fd0:	b580      	push	{r7, lr}
   11fd2:	b086      	sub	sp, #24
   11fd4:	af00      	add	r7, sp, #0
   11fd6:	60f8      	str	r0, [r7, #12]
   11fd8:	60b9      	str	r1, [r7, #8]
   11fda:	607a      	str	r2, [r7, #4]
    (void)kind;
    mp_obj_singleton_t *self = MP_OBJ_TO_PTR(self_in);
   11fdc:	68bb      	ldr	r3, [r7, #8]
   11fde:	617b      	str	r3, [r7, #20]
    mp_printf(print, "%q", self->name);
   11fe0:	697b      	ldr	r3, [r7, #20]
   11fe2:	685b      	ldr	r3, [r3, #4]
   11fe4:	461a      	mov	r2, r3
   11fe6:	4904      	ldr	r1, [pc, #16]	; (11ff8 <singleton_print+0x28>)
   11fe8:	68f8      	ldr	r0, [r7, #12]
   11fea:	f7ef ff43 	bl	1e74 <mp_printf>
}
   11fee:	bf00      	nop
   11ff0:	3718      	adds	r7, #24
   11ff2:	46bd      	mov	sp, r7
   11ff4:	bd80      	pop	{r7, pc}
   11ff6:	bf00      	nop
   11ff8:	00021358 	.word	0x00021358

00011ffc <utf8_next_char>:
static inline const byte *utf8_next_char(const byte *s) { return s + 1; }
   11ffc:	b480      	push	{r7}
   11ffe:	b083      	sub	sp, #12
   12000:	af00      	add	r7, sp, #0
   12002:	6078      	str	r0, [r7, #4]
   12004:	687b      	ldr	r3, [r7, #4]
   12006:	3301      	adds	r3, #1
   12008:	4618      	mov	r0, r3
   1200a:	370c      	adds	r7, #12
   1200c:	46bd      	mov	sp, r7
   1200e:	f85d 7b04 	ldr.w	r7, [sp], #4
   12012:	4770      	bx	lr

00012014 <utf8_charlen>:
static inline size_t utf8_charlen(const byte *str, size_t len) { (void)str; return len; }
   12014:	b480      	push	{r7}
   12016:	b083      	sub	sp, #12
   12018:	af00      	add	r7, sp, #0
   1201a:	6078      	str	r0, [r7, #4]
   1201c:	6039      	str	r1, [r7, #0]
   1201e:	683b      	ldr	r3, [r7, #0]
   12020:	4618      	mov	r0, r3
   12022:	370c      	adds	r7, #12
   12024:	46bd      	mov	sp, r7
   12026:	f85d 7b04 	ldr.w	r7, [sp], #4
   1202a:	4770      	bx	lr

0001202c <MP_OBJ_IS_SMALL_INT>:
    { return ((((mp_int_t)(o)) & 1) != 0); }
   1202c:	b480      	push	{r7}
   1202e:	b083      	sub	sp, #12
   12030:	af00      	add	r7, sp, #0
   12032:	6078      	str	r0, [r7, #4]
   12034:	687b      	ldr	r3, [r7, #4]
   12036:	f003 0301 	and.w	r3, r3, #1
   1203a:	2b00      	cmp	r3, #0
   1203c:	bf14      	ite	ne
   1203e:	2301      	movne	r3, #1
   12040:	2300      	moveq	r3, #0
   12042:	b2db      	uxtb	r3, r3
   12044:	4618      	mov	r0, r3
   12046:	370c      	adds	r7, #12
   12048:	46bd      	mov	sp, r7
   1204a:	f85d 7b04 	ldr.w	r7, [sp], #4
   1204e:	4770      	bx	lr

00012050 <MP_OBJ_IS_QSTR>:
    { return ((((mp_int_t)(o)) & 3) == 2); }
   12050:	b480      	push	{r7}
   12052:	b083      	sub	sp, #12
   12054:	af00      	add	r7, sp, #0
   12056:	6078      	str	r0, [r7, #4]
   12058:	687b      	ldr	r3, [r7, #4]
   1205a:	f003 0303 	and.w	r3, r3, #3
   1205e:	2b02      	cmp	r3, #2
   12060:	bf0c      	ite	eq
   12062:	2301      	moveq	r3, #1
   12064:	2300      	movne	r3, #0
   12066:	b2db      	uxtb	r3, r3
   12068:	4618      	mov	r0, r3
   1206a:	370c      	adds	r7, #12
   1206c:	46bd      	mov	sp, r7
   1206e:	f85d 7b04 	ldr.w	r7, [sp], #4
   12072:	4770      	bx	lr

00012074 <MP_OBJ_IS_OBJ>:
    { return ((((mp_int_t)(o)) & 3) == 0); }
   12074:	b480      	push	{r7}
   12076:	b083      	sub	sp, #12
   12078:	af00      	add	r7, sp, #0
   1207a:	6078      	str	r0, [r7, #4]
   1207c:	687b      	ldr	r3, [r7, #4]
   1207e:	f003 0303 	and.w	r3, r3, #3
   12082:	2b00      	cmp	r3, #0
   12084:	bf0c      	ite	eq
   12086:	2301      	moveq	r3, #1
   12088:	2300      	movne	r3, #0
   1208a:	b2db      	uxtb	r3, r3
   1208c:	4618      	mov	r0, r3
   1208e:	370c      	adds	r7, #12
   12090:	46bd      	mov	sp, r7
   12092:	f85d 7b04 	ldr.w	r7, [sp], #4
   12096:	4770      	bx	lr

00012098 <mp_obj_new_bool>:
static inline mp_obj_t mp_obj_new_bool(mp_int_t x) { return x ? mp_const_true : mp_const_false; }
   12098:	b480      	push	{r7}
   1209a:	b083      	sub	sp, #12
   1209c:	af00      	add	r7, sp, #0
   1209e:	6078      	str	r0, [r7, #4]
   120a0:	687b      	ldr	r3, [r7, #4]
   120a2:	2b00      	cmp	r3, #0
   120a4:	d001      	beq.n	120aa <mp_obj_new_bool+0x12>
   120a6:	4b04      	ldr	r3, [pc, #16]	; (120b8 <mp_obj_new_bool+0x20>)
   120a8:	e000      	b.n	120ac <mp_obj_new_bool+0x14>
   120aa:	4b04      	ldr	r3, [pc, #16]	; (120bc <mp_obj_new_bool+0x24>)
   120ac:	4618      	mov	r0, r3
   120ae:	370c      	adds	r7, #12
   120b0:	46bd      	mov	sp, r7
   120b2:	f85d 7b04 	ldr.w	r7, [sp], #4
   120b6:	4770      	bx	lr
   120b8:	0001f9c4 	.word	0x0001f9c4
   120bc:	0001f9bc 	.word	0x0001f9bc

000120c0 <mp_str_print_quoted>:
STATIC NORETURN void bad_implicit_conversion(mp_obj_t self_in);

/******************************************************************************/
/* str                                                                        */

void mp_str_print_quoted(const mp_print_t *print, const byte *str_data, size_t str_len, bool is_bytes) {
   120c0:	b580      	push	{r7, lr}
   120c2:	b08a      	sub	sp, #40	; 0x28
   120c4:	af00      	add	r7, sp, #0
   120c6:	60f8      	str	r0, [r7, #12]
   120c8:	60b9      	str	r1, [r7, #8]
   120ca:	607a      	str	r2, [r7, #4]
   120cc:	70fb      	strb	r3, [r7, #3]
    // this escapes characters, but it will be very slow to print (calling print many times)
    bool has_single_quote = false;
   120ce:	2300      	movs	r3, #0
   120d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    bool has_double_quote = false;
   120d4:	2300      	movs	r3, #0
   120d6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    for (const byte *s = str_data, *top = str_data + str_len; !has_double_quote && s < top; s++) {
   120da:	68bb      	ldr	r3, [r7, #8]
   120dc:	623b      	str	r3, [r7, #32]
   120de:	68ba      	ldr	r2, [r7, #8]
   120e0:	687b      	ldr	r3, [r7, #4]
   120e2:	4413      	add	r3, r2
   120e4:	617b      	str	r3, [r7, #20]
   120e6:	e011      	b.n	1210c <mp_str_print_quoted+0x4c>
        if (*s == '\'') {
   120e8:	6a3b      	ldr	r3, [r7, #32]
   120ea:	781b      	ldrb	r3, [r3, #0]
   120ec:	2b27      	cmp	r3, #39	; 0x27
   120ee:	d103      	bne.n	120f8 <mp_str_print_quoted+0x38>
            has_single_quote = true;
   120f0:	2301      	movs	r3, #1
   120f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
   120f6:	e006      	b.n	12106 <mp_str_print_quoted+0x46>
        } else if (*s == '"') {
   120f8:	6a3b      	ldr	r3, [r7, #32]
   120fa:	781b      	ldrb	r3, [r3, #0]
   120fc:	2b22      	cmp	r3, #34	; 0x22
   120fe:	d102      	bne.n	12106 <mp_str_print_quoted+0x46>
            has_double_quote = true;
   12100:	2301      	movs	r3, #1
   12102:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    for (const byte *s = str_data, *top = str_data + str_len; !has_double_quote && s < top; s++) {
   12106:	6a3b      	ldr	r3, [r7, #32]
   12108:	3301      	adds	r3, #1
   1210a:	623b      	str	r3, [r7, #32]
   1210c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
   12110:	f083 0301 	eor.w	r3, r3, #1
   12114:	b2db      	uxtb	r3, r3
   12116:	2b00      	cmp	r3, #0
   12118:	d003      	beq.n	12122 <mp_str_print_quoted+0x62>
   1211a:	6a3a      	ldr	r2, [r7, #32]
   1211c:	697b      	ldr	r3, [r7, #20]
   1211e:	429a      	cmp	r2, r3
   12120:	d3e2      	bcc.n	120e8 <mp_str_print_quoted+0x28>
        }
    }
    int quote_char = '\'';
   12122:	2327      	movs	r3, #39	; 0x27
   12124:	61fb      	str	r3, [r7, #28]
    if (has_single_quote && !has_double_quote) {
   12126:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   1212a:	2b00      	cmp	r3, #0
   1212c:	d008      	beq.n	12140 <mp_str_print_quoted+0x80>
   1212e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
   12132:	f083 0301 	eor.w	r3, r3, #1
   12136:	b2db      	uxtb	r3, r3
   12138:	2b00      	cmp	r3, #0
   1213a:	d001      	beq.n	12140 <mp_str_print_quoted+0x80>
        quote_char = '"';
   1213c:	2322      	movs	r3, #34	; 0x22
   1213e:	61fb      	str	r3, [r7, #28]
    }
    mp_printf(print, "%c", quote_char);
   12140:	69fa      	ldr	r2, [r7, #28]
   12142:	4936      	ldr	r1, [pc, #216]	; (1221c <mp_str_print_quoted+0x15c>)
   12144:	68f8      	ldr	r0, [r7, #12]
   12146:	f7ef fe95 	bl	1e74 <mp_printf>
    for (const byte *s = str_data, *top = str_data + str_len; s < top; s++) {
   1214a:	68bb      	ldr	r3, [r7, #8]
   1214c:	61bb      	str	r3, [r7, #24]
   1214e:	68ba      	ldr	r2, [r7, #8]
   12150:	687b      	ldr	r3, [r7, #4]
   12152:	4413      	add	r3, r2
   12154:	613b      	str	r3, [r7, #16]
   12156:	e054      	b.n	12202 <mp_str_print_quoted+0x142>
        if (*s == quote_char) {
   12158:	69bb      	ldr	r3, [r7, #24]
   1215a:	781b      	ldrb	r3, [r3, #0]
   1215c:	461a      	mov	r2, r3
   1215e:	69fb      	ldr	r3, [r7, #28]
   12160:	429a      	cmp	r2, r3
   12162:	d105      	bne.n	12170 <mp_str_print_quoted+0xb0>
            mp_printf(print, "\\%c", quote_char);
   12164:	69fa      	ldr	r2, [r7, #28]
   12166:	492e      	ldr	r1, [pc, #184]	; (12220 <mp_str_print_quoted+0x160>)
   12168:	68f8      	ldr	r0, [r7, #12]
   1216a:	f7ef fe83 	bl	1e74 <mp_printf>
   1216e:	e045      	b.n	121fc <mp_str_print_quoted+0x13c>
        } else if (*s == '\\') {
   12170:	69bb      	ldr	r3, [r7, #24]
   12172:	781b      	ldrb	r3, [r3, #0]
   12174:	2b5c      	cmp	r3, #92	; 0x5c
   12176:	d104      	bne.n	12182 <mp_str_print_quoted+0xc2>
            mp_print_str(print, "\\\\");
   12178:	492a      	ldr	r1, [pc, #168]	; (12224 <mp_str_print_quoted+0x164>)
   1217a:	68f8      	ldr	r0, [r7, #12]
   1217c:	f7ef fb68 	bl	1850 <mp_print_str>
   12180:	e03c      	b.n	121fc <mp_str_print_quoted+0x13c>
        } else if (*s >= 0x20 && *s != 0x7f && (!is_bytes || *s < 0x80)) {
   12182:	69bb      	ldr	r3, [r7, #24]
   12184:	781b      	ldrb	r3, [r3, #0]
   12186:	2b1f      	cmp	r3, #31
   12188:	d916      	bls.n	121b8 <mp_str_print_quoted+0xf8>
   1218a:	69bb      	ldr	r3, [r7, #24]
   1218c:	781b      	ldrb	r3, [r3, #0]
   1218e:	2b7f      	cmp	r3, #127	; 0x7f
   12190:	d012      	beq.n	121b8 <mp_str_print_quoted+0xf8>
   12192:	78fb      	ldrb	r3, [r7, #3]
   12194:	f083 0301 	eor.w	r3, r3, #1
   12198:	b2db      	uxtb	r3, r3
   1219a:	2b00      	cmp	r3, #0
   1219c:	d104      	bne.n	121a8 <mp_str_print_quoted+0xe8>
   1219e:	69bb      	ldr	r3, [r7, #24]
   121a0:	781b      	ldrb	r3, [r3, #0]
   121a2:	b25b      	sxtb	r3, r3
   121a4:	2b00      	cmp	r3, #0
   121a6:	db07      	blt.n	121b8 <mp_str_print_quoted+0xf8>
            // In strings, anything which is not ascii control character
            // is printed as is, this includes characters in range 0x80-0xff
            // (which can be non-Latin letters, etc.)
            mp_printf(print, "%c", *s);
   121a8:	69bb      	ldr	r3, [r7, #24]
   121aa:	781b      	ldrb	r3, [r3, #0]
   121ac:	461a      	mov	r2, r3
   121ae:	491b      	ldr	r1, [pc, #108]	; (1221c <mp_str_print_quoted+0x15c>)
   121b0:	68f8      	ldr	r0, [r7, #12]
   121b2:	f7ef fe5f 	bl	1e74 <mp_printf>
   121b6:	e021      	b.n	121fc <mp_str_print_quoted+0x13c>
        } else if (*s == '\n') {
   121b8:	69bb      	ldr	r3, [r7, #24]
   121ba:	781b      	ldrb	r3, [r3, #0]
   121bc:	2b0a      	cmp	r3, #10
   121be:	d104      	bne.n	121ca <mp_str_print_quoted+0x10a>
            mp_print_str(print, "\\n");
   121c0:	4919      	ldr	r1, [pc, #100]	; (12228 <mp_str_print_quoted+0x168>)
   121c2:	68f8      	ldr	r0, [r7, #12]
   121c4:	f7ef fb44 	bl	1850 <mp_print_str>
   121c8:	e018      	b.n	121fc <mp_str_print_quoted+0x13c>
        } else if (*s == '\r') {
   121ca:	69bb      	ldr	r3, [r7, #24]
   121cc:	781b      	ldrb	r3, [r3, #0]
   121ce:	2b0d      	cmp	r3, #13
   121d0:	d104      	bne.n	121dc <mp_str_print_quoted+0x11c>
            mp_print_str(print, "\\r");
   121d2:	4916      	ldr	r1, [pc, #88]	; (1222c <mp_str_print_quoted+0x16c>)
   121d4:	68f8      	ldr	r0, [r7, #12]
   121d6:	f7ef fb3b 	bl	1850 <mp_print_str>
   121da:	e00f      	b.n	121fc <mp_str_print_quoted+0x13c>
        } else if (*s == '\t') {
   121dc:	69bb      	ldr	r3, [r7, #24]
   121de:	781b      	ldrb	r3, [r3, #0]
   121e0:	2b09      	cmp	r3, #9
   121e2:	d104      	bne.n	121ee <mp_str_print_quoted+0x12e>
            mp_print_str(print, "\\t");
   121e4:	4912      	ldr	r1, [pc, #72]	; (12230 <mp_str_print_quoted+0x170>)
   121e6:	68f8      	ldr	r0, [r7, #12]
   121e8:	f7ef fb32 	bl	1850 <mp_print_str>
   121ec:	e006      	b.n	121fc <mp_str_print_quoted+0x13c>
        } else {
            mp_printf(print, "\\x%02x", *s);
   121ee:	69bb      	ldr	r3, [r7, #24]
   121f0:	781b      	ldrb	r3, [r3, #0]
   121f2:	461a      	mov	r2, r3
   121f4:	490f      	ldr	r1, [pc, #60]	; (12234 <mp_str_print_quoted+0x174>)
   121f6:	68f8      	ldr	r0, [r7, #12]
   121f8:	f7ef fe3c 	bl	1e74 <mp_printf>
    for (const byte *s = str_data, *top = str_data + str_len; s < top; s++) {
   121fc:	69bb      	ldr	r3, [r7, #24]
   121fe:	3301      	adds	r3, #1
   12200:	61bb      	str	r3, [r7, #24]
   12202:	69ba      	ldr	r2, [r7, #24]
   12204:	693b      	ldr	r3, [r7, #16]
   12206:	429a      	cmp	r2, r3
   12208:	d3a6      	bcc.n	12158 <mp_str_print_quoted+0x98>
        }
    }
    mp_printf(print, "%c", quote_char);
   1220a:	69fa      	ldr	r2, [r7, #28]
   1220c:	4903      	ldr	r1, [pc, #12]	; (1221c <mp_str_print_quoted+0x15c>)
   1220e:	68f8      	ldr	r0, [r7, #12]
   12210:	f7ef fe30 	bl	1e74 <mp_printf>
}
   12214:	bf00      	nop
   12216:	3728      	adds	r7, #40	; 0x28
   12218:	46bd      	mov	sp, r7
   1221a:	bd80      	pop	{r7, pc}
   1221c:	000213a0 	.word	0x000213a0
   12220:	000213a4 	.word	0x000213a4
   12224:	000213a8 	.word	0x000213a8
   12228:	000213ac 	.word	0x000213ac
   1222c:	000213b0 	.word	0x000213b0
   12230:	000213b4 	.word	0x000213b4
   12234:	000213b8 	.word	0x000213b8

00012238 <str_print>:
    }
    mp_print_str(print, "\"");
}
#endif

STATIC void str_print(const mp_print_t *print, mp_obj_t self_in, mp_print_kind_t kind) {
   12238:	b580      	push	{r7, lr}
   1223a:	b088      	sub	sp, #32
   1223c:	af00      	add	r7, sp, #0
   1223e:	60f8      	str	r0, [r7, #12]
   12240:	60b9      	str	r1, [r7, #8]
   12242:	607a      	str	r2, [r7, #4]
    GET_STR_DATA_LEN(self_in, str_data, str_len);
   12244:	68b8      	ldr	r0, [r7, #8]
   12246:	f7ff ff03 	bl	12050 <MP_OBJ_IS_QSTR>
   1224a:	4603      	mov	r3, r0
   1224c:	2b00      	cmp	r3, #0
   1224e:	d009      	beq.n	12264 <str_print+0x2c>
   12250:	68bb      	ldr	r3, [r7, #8]
   12252:	089b      	lsrs	r3, r3, #2
   12254:	f107 0214 	add.w	r2, r7, #20
   12258:	4611      	mov	r1, r2
   1225a:	4618      	mov	r0, r3
   1225c:	f7ee ffc8 	bl	11f0 <qstr_data>
   12260:	61f8      	str	r0, [r7, #28]
   12262:	e005      	b.n	12270 <str_print+0x38>
   12264:	68bb      	ldr	r3, [r7, #8]
   12266:	689b      	ldr	r3, [r3, #8]
   12268:	617b      	str	r3, [r7, #20]
   1226a:	68bb      	ldr	r3, [r7, #8]
   1226c:	68db      	ldr	r3, [r3, #12]
   1226e:	61fb      	str	r3, [r7, #28]
        mp_str_print_json(print, str_data, str_len);
        return;
    }
    #endif
    #if !MICROPY_PY_BUILTINS_STR_UNICODE
    bool is_bytes = MP_OBJ_IS_TYPE(self_in, &mp_type_bytes);
   12270:	68b8      	ldr	r0, [r7, #8]
   12272:	f7ff feff 	bl	12074 <MP_OBJ_IS_OBJ>
   12276:	4603      	mov	r3, r0
   12278:	2b00      	cmp	r3, #0
   1227a:	d006      	beq.n	1228a <str_print+0x52>
   1227c:	68bb      	ldr	r3, [r7, #8]
   1227e:	681b      	ldr	r3, [r3, #0]
   12280:	4a17      	ldr	r2, [pc, #92]	; (122e0 <str_print+0xa8>)
   12282:	4293      	cmp	r3, r2
   12284:	d101      	bne.n	1228a <str_print+0x52>
   12286:	2301      	movs	r3, #1
   12288:	e000      	b.n	1228c <str_print+0x54>
   1228a:	2300      	movs	r3, #0
   1228c:	76fb      	strb	r3, [r7, #27]
   1228e:	7efb      	ldrb	r3, [r7, #27]
   12290:	f003 0301 	and.w	r3, r3, #1
   12294:	76fb      	strb	r3, [r7, #27]
    #else
    bool is_bytes = true;
    #endif
    if (kind == PRINT_RAW || (!MICROPY_PY_BUILTINS_STR_UNICODE && kind == PRINT_STR && !is_bytes)) {
   12296:	687b      	ldr	r3, [r7, #4]
   12298:	2b04      	cmp	r3, #4
   1229a:	d008      	beq.n	122ae <str_print+0x76>
   1229c:	687b      	ldr	r3, [r7, #4]
   1229e:	2b00      	cmp	r3, #0
   122a0:	d10c      	bne.n	122bc <str_print+0x84>
   122a2:	7efb      	ldrb	r3, [r7, #27]
   122a4:	f083 0301 	eor.w	r3, r3, #1
   122a8:	b2db      	uxtb	r3, r3
   122aa:	2b00      	cmp	r3, #0
   122ac:	d006      	beq.n	122bc <str_print+0x84>
        mp_printf(print, "%.*s", str_len, str_data);
   122ae:	697a      	ldr	r2, [r7, #20]
   122b0:	69fb      	ldr	r3, [r7, #28]
   122b2:	490c      	ldr	r1, [pc, #48]	; (122e4 <str_print+0xac>)
   122b4:	68f8      	ldr	r0, [r7, #12]
   122b6:	f7ef fddd 	bl	1e74 <mp_printf>
   122ba:	e00c      	b.n	122d6 <str_print+0x9e>
    } else {
        if (is_bytes) {
   122bc:	7efb      	ldrb	r3, [r7, #27]
   122be:	2b00      	cmp	r3, #0
   122c0:	d003      	beq.n	122ca <str_print+0x92>
            mp_print_str(print, "b");
   122c2:	4909      	ldr	r1, [pc, #36]	; (122e8 <str_print+0xb0>)
   122c4:	68f8      	ldr	r0, [r7, #12]
   122c6:	f7ef fac3 	bl	1850 <mp_print_str>
        }
        mp_str_print_quoted(print, str_data, str_len, is_bytes);
   122ca:	697a      	ldr	r2, [r7, #20]
   122cc:	7efb      	ldrb	r3, [r7, #27]
   122ce:	69f9      	ldr	r1, [r7, #28]
   122d0:	68f8      	ldr	r0, [r7, #12]
   122d2:	f7ff fef5 	bl	120c0 <mp_str_print_quoted>
    }
}
   122d6:	bf00      	nop
   122d8:	3720      	adds	r7, #32
   122da:	46bd      	mov	sp, r7
   122dc:	bd80      	pop	{r7, pc}
   122de:	bf00      	nop
   122e0:	000219a0 	.word	0x000219a0
   122e4:	000213c0 	.word	0x000213c0
   122e8:	000213c8 	.word	0x000213c8

000122ec <mp_obj_str_make_new>:

mp_obj_t mp_obj_str_make_new(const mp_obj_type_t *type, size_t n_args, size_t n_kw, const mp_obj_t *args) {
   122ec:	b580      	push	{r7, lr}
   122ee:	b094      	sub	sp, #80	; 0x50
   122f0:	af02      	add	r7, sp, #8
   122f2:	60f8      	str	r0, [r7, #12]
   122f4:	60b9      	str	r1, [r7, #8]
   122f6:	607a      	str	r2, [r7, #4]
   122f8:	603b      	str	r3, [r7, #0]
    if (n_kw != 0) {
        mp_arg_error_unimpl_kw();
    }
#endif

    mp_arg_check_num(n_args, n_kw, 0, 3, false);
   122fa:	2300      	movs	r3, #0
   122fc:	9300      	str	r3, [sp, #0]
   122fe:	2303      	movs	r3, #3
   12300:	2200      	movs	r2, #0
   12302:	6879      	ldr	r1, [r7, #4]
   12304:	68b8      	ldr	r0, [r7, #8]
   12306:	f7fa fe33 	bl	cf70 <mp_arg_check_num>

    switch (n_args) {
   1230a:	68bb      	ldr	r3, [r7, #8]
   1230c:	2b00      	cmp	r3, #0
   1230e:	d002      	beq.n	12316 <mp_obj_str_make_new+0x2a>
   12310:	2b01      	cmp	r3, #1
   12312:	d002      	beq.n	1231a <mp_obj_str_make_new+0x2e>
   12314:	e019      	b.n	1234a <mp_obj_str_make_new+0x5e>
        case 0:
            return MP_OBJ_NEW_QSTR(MP_QSTR_);
   12316:	2306      	movs	r3, #6
   12318:	e089      	b.n	1242e <mp_obj_str_make_new+0x142>

        case 1: {
            vstr_t vstr;
            mp_print_t print;
            vstr_init_print(&vstr, 16, &print);
   1231a:	f107 0220 	add.w	r2, r7, #32
   1231e:	f107 0328 	add.w	r3, r7, #40	; 0x28
   12322:	2110      	movs	r1, #16
   12324:	4618      	mov	r0, r3
   12326:	f7ef f828 	bl	137a <vstr_init_print>
            mp_obj_print_helper(&print, args[0], PRINT_STR);
   1232a:	683b      	ldr	r3, [r7, #0]
   1232c:	6819      	ldr	r1, [r3, #0]
   1232e:	f107 0320 	add.w	r3, r7, #32
   12332:	2200      	movs	r2, #0
   12334:	4618      	mov	r0, r3
   12336:	f7fb fa3c 	bl	d7b2 <mp_obj_print_helper>
            return mp_obj_new_str_from_vstr(type, &vstr);
   1233a:	f107 0328 	add.w	r3, r7, #40	; 0x28
   1233e:	4619      	mov	r1, r3
   12340:	68f8      	ldr	r0, [r7, #12]
   12342:	f002 fed0 	bl	150e6 <mp_obj_new_str_from_vstr>
   12346:	4603      	mov	r3, r0
   12348:	e071      	b.n	1242e <mp_obj_str_make_new+0x142>
        }

        default: // 2 or 3 args
            // TODO: validate 2nd/3rd args
            if (MP_OBJ_IS_TYPE(args[0], &mp_type_bytes)) {
   1234a:	683b      	ldr	r3, [r7, #0]
   1234c:	681b      	ldr	r3, [r3, #0]
   1234e:	4618      	mov	r0, r3
   12350:	f7ff fe90 	bl	12074 <MP_OBJ_IS_OBJ>
   12354:	4603      	mov	r3, r0
   12356:	2b00      	cmp	r3, #0
   12358:	d05a      	beq.n	12410 <mp_obj_str_make_new+0x124>
   1235a:	683b      	ldr	r3, [r7, #0]
   1235c:	681b      	ldr	r3, [r3, #0]
   1235e:	681b      	ldr	r3, [r3, #0]
   12360:	4a35      	ldr	r2, [pc, #212]	; (12438 <mp_obj_str_make_new+0x14c>)
   12362:	4293      	cmp	r3, r2
   12364:	d154      	bne.n	12410 <mp_obj_str_make_new+0x124>
                GET_STR_DATA_LEN(args[0], str_data, str_len);
   12366:	683b      	ldr	r3, [r7, #0]
   12368:	681b      	ldr	r3, [r3, #0]
   1236a:	4618      	mov	r0, r3
   1236c:	f7ff fe70 	bl	12050 <MP_OBJ_IS_QSTR>
   12370:	4603      	mov	r3, r0
   12372:	2b00      	cmp	r3, #0
   12374:	d00a      	beq.n	1238c <mp_obj_str_make_new+0xa0>
   12376:	683b      	ldr	r3, [r7, #0]
   12378:	681b      	ldr	r3, [r3, #0]
   1237a:	089b      	lsrs	r3, r3, #2
   1237c:	f107 021c 	add.w	r2, r7, #28
   12380:	4611      	mov	r1, r2
   12382:	4618      	mov	r0, r3
   12384:	f7ee ff34 	bl	11f0 <qstr_data>
   12388:	6478      	str	r0, [r7, #68]	; 0x44
   1238a:	e007      	b.n	1239c <mp_obj_str_make_new+0xb0>
   1238c:	683b      	ldr	r3, [r7, #0]
   1238e:	681b      	ldr	r3, [r3, #0]
   12390:	689b      	ldr	r3, [r3, #8]
   12392:	61fb      	str	r3, [r7, #28]
   12394:	683b      	ldr	r3, [r7, #0]
   12396:	681b      	ldr	r3, [r3, #0]
   12398:	68db      	ldr	r3, [r3, #12]
   1239a:	647b      	str	r3, [r7, #68]	; 0x44
                GET_STR_HASH(args[0], str_hash);
   1239c:	683b      	ldr	r3, [r7, #0]
   1239e:	681b      	ldr	r3, [r3, #0]
   123a0:	4618      	mov	r0, r3
   123a2:	f7ff fe55 	bl	12050 <MP_OBJ_IS_QSTR>
   123a6:	4603      	mov	r3, r0
   123a8:	2b00      	cmp	r3, #0
   123aa:	d007      	beq.n	123bc <mp_obj_str_make_new+0xd0>
   123ac:	683b      	ldr	r3, [r7, #0]
   123ae:	681b      	ldr	r3, [r3, #0]
   123b0:	089b      	lsrs	r3, r3, #2
   123b2:	4618      	mov	r0, r3
   123b4:	f7ee fef2 	bl	119c <qstr_hash>
   123b8:	6438      	str	r0, [r7, #64]	; 0x40
   123ba:	e003      	b.n	123c4 <mp_obj_str_make_new+0xd8>
   123bc:	683b      	ldr	r3, [r7, #0]
   123be:	681b      	ldr	r3, [r3, #0]
   123c0:	685b      	ldr	r3, [r3, #4]
   123c2:	643b      	str	r3, [r7, #64]	; 0x40
                if (str_hash == 0) {
   123c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   123c6:	2b00      	cmp	r3, #0
   123c8:	d105      	bne.n	123d6 <mp_obj_str_make_new+0xea>
                    str_hash = qstr_compute_hash(str_data, str_len);
   123ca:	69fb      	ldr	r3, [r7, #28]
   123cc:	4619      	mov	r1, r3
   123ce:	6c78      	ldr	r0, [r7, #68]	; 0x44
   123d0:	f7ee fd14 	bl	dfc <qstr_compute_hash>
   123d4:	6438      	str	r0, [r7, #64]	; 0x40
                    mp_raise_msg(&mp_type_UnicodeError, NULL);
                }
                #endif

                // Check if a qstr with this data already exists
                qstr q = qstr_find_strn((const char*)str_data, str_len);
   123d6:	69fb      	ldr	r3, [r7, #28]
   123d8:	4619      	mov	r1, r3
   123da:	6c78      	ldr	r0, [r7, #68]	; 0x44
   123dc:	f7ee fdbe 	bl	f5c <qstr_find_strn>
   123e0:	63f8      	str	r0, [r7, #60]	; 0x3c
                if (q != MP_QSTR_NULL) {
   123e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   123e4:	2b00      	cmp	r3, #0
   123e6:	d004      	beq.n	123f2 <mp_obj_str_make_new+0x106>
                    return MP_OBJ_NEW_QSTR(q);
   123e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   123ea:	009b      	lsls	r3, r3, #2
   123ec:	f043 0302 	orr.w	r3, r3, #2
   123f0:	e01d      	b.n	1242e <mp_obj_str_make_new+0x142>
                }

                mp_obj_str_t *o = MP_OBJ_TO_PTR(mp_obj_new_str_copy(type, NULL, str_len));
   123f2:	69fb      	ldr	r3, [r7, #28]
   123f4:	461a      	mov	r2, r3
   123f6:	2100      	movs	r1, #0
   123f8:	68f8      	ldr	r0, [r7, #12]
   123fa:	f002 fe16 	bl	1502a <mp_obj_new_str_copy>
   123fe:	63b8      	str	r0, [r7, #56]	; 0x38
                o->data = str_data;
   12400:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   12402:	6c7a      	ldr	r2, [r7, #68]	; 0x44
   12404:	60da      	str	r2, [r3, #12]
                o->hash = str_hash;
   12406:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   12408:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   1240a:	605a      	str	r2, [r3, #4]
                return MP_OBJ_FROM_PTR(o);
   1240c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1240e:	e00e      	b.n	1242e <mp_obj_str_make_new+0x142>
            } else {
                mp_buffer_info_t bufinfo;
                mp_get_buffer_raise(args[0], &bufinfo, MP_BUFFER_READ);
   12410:	683b      	ldr	r3, [r7, #0]
   12412:	681b      	ldr	r3, [r3, #0]
   12414:	f107 0110 	add.w	r1, r7, #16
   12418:	2201      	movs	r2, #1
   1241a:	4618      	mov	r0, r3
   1241c:	f7fb fda4 	bl	df68 <mp_get_buffer_raise>
                #if MICROPY_PY_BUILTINS_STR_UNICODE_CHECK
                if (!utf8_check(bufinfo.buf, bufinfo.len)) {
                    mp_raise_msg(&mp_type_UnicodeError, NULL);
                }
                #endif
                return mp_obj_new_str(bufinfo.buf, bufinfo.len);
   12420:	693b      	ldr	r3, [r7, #16]
   12422:	697a      	ldr	r2, [r7, #20]
   12424:	4611      	mov	r1, r2
   12426:	4618      	mov	r0, r3
   12428:	f002 fec0 	bl	151ac <mp_obj_new_str>
   1242c:	4603      	mov	r3, r0
            }
    }
}
   1242e:	4618      	mov	r0, r3
   12430:	3748      	adds	r7, #72	; 0x48
   12432:	46bd      	mov	sp, r7
   12434:	bd80      	pop	{r7, pc}
   12436:	bf00      	nop
   12438:	000219a0 	.word	0x000219a0

0001243c <bytes_make_new>:

STATIC mp_obj_t bytes_make_new(const mp_obj_type_t *type_in, size_t n_args, size_t n_kw, const mp_obj_t *args) {
   1243c:	b580      	push	{r7, lr}
   1243e:	b09e      	sub	sp, #120	; 0x78
   12440:	af00      	add	r7, sp, #0
   12442:	60f8      	str	r0, [r7, #12]
   12444:	60b9      	str	r1, [r7, #8]
   12446:	607a      	str	r2, [r7, #4]
   12448:	603b      	str	r3, [r7, #0]
    }
    #else
    (void)n_kw;
    #endif

    if (n_args == 0) {
   1244a:	68bb      	ldr	r3, [r7, #8]
   1244c:	2b00      	cmp	r3, #0
   1244e:	d101      	bne.n	12454 <bytes_make_new+0x18>
        return mp_const_empty_bytes;
   12450:	4b7a      	ldr	r3, [pc, #488]	; (1263c <bytes_make_new+0x200>)
   12452:	e0ee      	b.n	12632 <bytes_make_new+0x1f6>
    }

    if (MP_OBJ_IS_STR(args[0])) {
   12454:	683b      	ldr	r3, [r7, #0]
   12456:	681b      	ldr	r3, [r3, #0]
   12458:	4618      	mov	r0, r3
   1245a:	f7ff fdf9 	bl	12050 <MP_OBJ_IS_QSTR>
   1245e:	4603      	mov	r3, r0
   12460:	2b00      	cmp	r3, #0
   12462:	d10d      	bne.n	12480 <bytes_make_new+0x44>
   12464:	683b      	ldr	r3, [r7, #0]
   12466:	681b      	ldr	r3, [r3, #0]
   12468:	4618      	mov	r0, r3
   1246a:	f7ff fe03 	bl	12074 <MP_OBJ_IS_OBJ>
   1246e:	4603      	mov	r3, r0
   12470:	2b00      	cmp	r3, #0
   12472:	d054      	beq.n	1251e <bytes_make_new+0xe2>
   12474:	683b      	ldr	r3, [r7, #0]
   12476:	681b      	ldr	r3, [r3, #0]
   12478:	681b      	ldr	r3, [r3, #0]
   1247a:	4a71      	ldr	r2, [pc, #452]	; (12640 <bytes_make_new+0x204>)
   1247c:	4293      	cmp	r3, r2
   1247e:	d14e      	bne.n	1251e <bytes_make_new+0xe2>
        if (n_args < 2 || n_args > 3) {
   12480:	68bb      	ldr	r3, [r7, #8]
   12482:	2b01      	cmp	r3, #1
   12484:	f240 80d2 	bls.w	1262c <bytes_make_new+0x1f0>
   12488:	68bb      	ldr	r3, [r7, #8]
   1248a:	2b03      	cmp	r3, #3
   1248c:	f200 80ce 	bhi.w	1262c <bytes_make_new+0x1f0>
            goto wrong_args;
        }
        GET_STR_DATA_LEN(args[0], str_data, str_len);
   12490:	683b      	ldr	r3, [r7, #0]
   12492:	681b      	ldr	r3, [r3, #0]
   12494:	4618      	mov	r0, r3
   12496:	f7ff fddb 	bl	12050 <MP_OBJ_IS_QSTR>
   1249a:	4603      	mov	r3, r0
   1249c:	2b00      	cmp	r3, #0
   1249e:	d00a      	beq.n	124b6 <bytes_make_new+0x7a>
   124a0:	683b      	ldr	r3, [r7, #0]
   124a2:	681b      	ldr	r3, [r3, #0]
   124a4:	089b      	lsrs	r3, r3, #2
   124a6:	f107 0224 	add.w	r2, r7, #36	; 0x24
   124aa:	4611      	mov	r1, r2
   124ac:	4618      	mov	r0, r3
   124ae:	f7ee fe9f 	bl	11f0 <qstr_data>
   124b2:	6778      	str	r0, [r7, #116]	; 0x74
   124b4:	e007      	b.n	124c6 <bytes_make_new+0x8a>
   124b6:	683b      	ldr	r3, [r7, #0]
   124b8:	681b      	ldr	r3, [r3, #0]
   124ba:	689b      	ldr	r3, [r3, #8]
   124bc:	627b      	str	r3, [r7, #36]	; 0x24
   124be:	683b      	ldr	r3, [r7, #0]
   124c0:	681b      	ldr	r3, [r3, #0]
   124c2:	68db      	ldr	r3, [r3, #12]
   124c4:	677b      	str	r3, [r7, #116]	; 0x74
        GET_STR_HASH(args[0], str_hash);
   124c6:	683b      	ldr	r3, [r7, #0]
   124c8:	681b      	ldr	r3, [r3, #0]
   124ca:	4618      	mov	r0, r3
   124cc:	f7ff fdc0 	bl	12050 <MP_OBJ_IS_QSTR>
   124d0:	4603      	mov	r3, r0
   124d2:	2b00      	cmp	r3, #0
   124d4:	d007      	beq.n	124e6 <bytes_make_new+0xaa>
   124d6:	683b      	ldr	r3, [r7, #0]
   124d8:	681b      	ldr	r3, [r3, #0]
   124da:	089b      	lsrs	r3, r3, #2
   124dc:	4618      	mov	r0, r3
   124de:	f7ee fe5d 	bl	119c <qstr_hash>
   124e2:	6738      	str	r0, [r7, #112]	; 0x70
   124e4:	e003      	b.n	124ee <bytes_make_new+0xb2>
   124e6:	683b      	ldr	r3, [r7, #0]
   124e8:	681b      	ldr	r3, [r3, #0]
   124ea:	685b      	ldr	r3, [r3, #4]
   124ec:	673b      	str	r3, [r7, #112]	; 0x70
        if (str_hash == 0) {
   124ee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   124f0:	2b00      	cmp	r3, #0
   124f2:	d105      	bne.n	12500 <bytes_make_new+0xc4>
            str_hash = qstr_compute_hash(str_data, str_len);
   124f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   124f6:	4619      	mov	r1, r3
   124f8:	6f78      	ldr	r0, [r7, #116]	; 0x74
   124fa:	f7ee fc7f 	bl	dfc <qstr_compute_hash>
   124fe:	6738      	str	r0, [r7, #112]	; 0x70
        }
        mp_obj_str_t *o = MP_OBJ_TO_PTR(mp_obj_new_str_copy(&mp_type_bytes, NULL, str_len));
   12500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   12502:	461a      	mov	r2, r3
   12504:	2100      	movs	r1, #0
   12506:	484f      	ldr	r0, [pc, #316]	; (12644 <bytes_make_new+0x208>)
   12508:	f002 fd8f 	bl	1502a <mp_obj_new_str_copy>
   1250c:	6578      	str	r0, [r7, #84]	; 0x54
        o->data = str_data;
   1250e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   12510:	6f7a      	ldr	r2, [r7, #116]	; 0x74
   12512:	60da      	str	r2, [r3, #12]
        o->hash = str_hash;
   12514:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   12516:	6f3a      	ldr	r2, [r7, #112]	; 0x70
   12518:	605a      	str	r2, [r3, #4]
        return MP_OBJ_FROM_PTR(o);
   1251a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   1251c:	e089      	b.n	12632 <bytes_make_new+0x1f6>
    }

    if (n_args > 1) {
   1251e:	68bb      	ldr	r3, [r7, #8]
   12520:	2b01      	cmp	r3, #1
   12522:	f200 8082 	bhi.w	1262a <bytes_make_new+0x1ee>
        goto wrong_args;
    }

    if (MP_OBJ_IS_SMALL_INT(args[0])) {
   12526:	683b      	ldr	r3, [r7, #0]
   12528:	681b      	ldr	r3, [r3, #0]
   1252a:	4618      	mov	r0, r3
   1252c:	f7ff fd7e 	bl	1202c <MP_OBJ_IS_SMALL_INT>
   12530:	4603      	mov	r3, r0
   12532:	2b00      	cmp	r3, #0
   12534:	d01e      	beq.n	12574 <bytes_make_new+0x138>
        mp_int_t len = MP_OBJ_SMALL_INT_VALUE(args[0]);
   12536:	683b      	ldr	r3, [r7, #0]
   12538:	681b      	ldr	r3, [r3, #0]
   1253a:	105b      	asrs	r3, r3, #1
   1253c:	66fb      	str	r3, [r7, #108]	; 0x6c
        if (len < 0) {
   1253e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   12540:	2b00      	cmp	r3, #0
   12542:	da02      	bge.n	1254a <bytes_make_new+0x10e>
            mp_raise_ValueError(NULL);
   12544:	2000      	movs	r0, #0
   12546:	f7fa fce2 	bl	cf0e <mp_raise_ValueError>
        }
        vstr_t vstr;
        vstr_init_len(&vstr, len);
   1254a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
   1254c:	f107 0314 	add.w	r3, r7, #20
   12550:	4611      	mov	r1, r2
   12552:	4618      	mov	r0, r3
   12554:	f7ee fee5 	bl	1322 <vstr_init_len>
        memset(vstr.buf, 0, len);
   12558:	69fb      	ldr	r3, [r7, #28]
   1255a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
   1255c:	2100      	movs	r1, #0
   1255e:	4618      	mov	r0, r3
   12560:	f009 faca 	bl	1baf8 <memset>
        return mp_obj_new_str_from_vstr(&mp_type_bytes, &vstr);
   12564:	f107 0314 	add.w	r3, r7, #20
   12568:	4619      	mov	r1, r3
   1256a:	4836      	ldr	r0, [pc, #216]	; (12644 <bytes_make_new+0x208>)
   1256c:	f002 fdbb 	bl	150e6 <mp_obj_new_str_from_vstr>
   12570:	4603      	mov	r3, r0
   12572:	e05e      	b.n	12632 <bytes_make_new+0x1f6>
    }

    // check if argument has the buffer protocol
    mp_buffer_info_t bufinfo;
    if (mp_get_buffer(args[0], &bufinfo, MP_BUFFER_READ)) {
   12574:	683b      	ldr	r3, [r7, #0]
   12576:	681b      	ldr	r3, [r3, #0]
   12578:	f107 0148 	add.w	r1, r7, #72	; 0x48
   1257c:	2201      	movs	r2, #1
   1257e:	4618      	mov	r0, r3
   12580:	f7fb fcd1 	bl	df26 <mp_get_buffer>
   12584:	4603      	mov	r3, r0
   12586:	2b00      	cmp	r3, #0
   12588:	d007      	beq.n	1259a <bytes_make_new+0x15e>
        return mp_obj_new_bytes(bufinfo.buf, bufinfo.len);
   1258a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   1258c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
   1258e:	4611      	mov	r1, r2
   12590:	4618      	mov	r0, r3
   12592:	f002 fe62 	bl	1525a <mp_obj_new_bytes>
   12596:	4603      	mov	r3, r0
   12598:	e04b      	b.n	12632 <bytes_make_new+0x1f6>
    }

    vstr_t vstr;
    // Try to create array of exact len if initializer len is known
    mp_obj_t len_in = mp_obj_len_maybe(args[0]);
   1259a:	683b      	ldr	r3, [r7, #0]
   1259c:	681b      	ldr	r3, [r3, #0]
   1259e:	4618      	mov	r0, r3
   125a0:	f7fb fc28 	bl	ddf4 <mp_obj_len_maybe>
   125a4:	66b8      	str	r0, [r7, #104]	; 0x68
    if (len_in == MP_OBJ_NULL) {
   125a6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   125a8:	2b00      	cmp	r3, #0
   125aa:	d106      	bne.n	125ba <bytes_make_new+0x17e>
        vstr_init(&vstr, 16);
   125ac:	f107 0338 	add.w	r3, r7, #56	; 0x38
   125b0:	2110      	movs	r1, #16
   125b2:	4618      	mov	r0, r3
   125b4:	f7ee fe94 	bl	12e0 <vstr_init>
   125b8:	e009      	b.n	125ce <bytes_make_new+0x192>
    } else {
        mp_int_t len = MP_OBJ_SMALL_INT_VALUE(len_in);
   125ba:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   125bc:	105b      	asrs	r3, r3, #1
   125be:	667b      	str	r3, [r7, #100]	; 0x64
        vstr_init(&vstr, len);
   125c0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
   125c2:	f107 0338 	add.w	r3, r7, #56	; 0x38
   125c6:	4611      	mov	r1, r2
   125c8:	4618      	mov	r0, r3
   125ca:	f7ee fe89 	bl	12e0 <vstr_init>
    }

    mp_obj_iter_buf_t iter_buf;
    mp_obj_t iterable = mp_getiter(args[0], &iter_buf);
   125ce:	683b      	ldr	r3, [r7, #0]
   125d0:	681b      	ldr	r3, [r3, #0]
   125d2:	f107 0228 	add.w	r2, r7, #40	; 0x28
   125d6:	4611      	mov	r1, r2
   125d8:	4618      	mov	r0, r3
   125da:	f7fa f955 	bl	c888 <mp_getiter>
   125de:	6638      	str	r0, [r7, #96]	; 0x60
    mp_obj_t item;
    while ((item = mp_iternext(iterable)) != MP_OBJ_STOP_ITERATION) {
   125e0:	e014      	b.n	1260c <bytes_make_new+0x1d0>
        mp_int_t val = mp_obj_get_int(item);
   125e2:	6df8      	ldr	r0, [r7, #92]	; 0x5c
   125e4:	f7fb fa90 	bl	db08 <mp_obj_get_int>
   125e8:	65b8      	str	r0, [r7, #88]	; 0x58
        #if MICROPY_FULL_CHECKS
        if (val < 0 || val > 255) {
   125ea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   125ec:	2b00      	cmp	r3, #0
   125ee:	db02      	blt.n	125f6 <bytes_make_new+0x1ba>
   125f0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   125f2:	2bff      	cmp	r3, #255	; 0xff
   125f4:	dd02      	ble.n	125fc <bytes_make_new+0x1c0>
            mp_raise_ValueError("bytes value out of range");
   125f6:	4814      	ldr	r0, [pc, #80]	; (12648 <bytes_make_new+0x20c>)
   125f8:	f7fa fc89 	bl	cf0e <mp_raise_ValueError>
        }
        #endif
        vstr_add_byte(&vstr, val);
   125fc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   125fe:	b2da      	uxtb	r2, r3
   12600:	f107 0338 	add.w	r3, r7, #56	; 0x38
   12604:	4611      	mov	r1, r2
   12606:	4618      	mov	r0, r3
   12608:	f7ee ffbc 	bl	1584 <vstr_add_byte>
    while ((item = mp_iternext(iterable)) != MP_OBJ_STOP_ITERATION) {
   1260c:	6e38      	ldr	r0, [r7, #96]	; 0x60
   1260e:	f7fa f9bd 	bl	c98c <mp_iternext>
   12612:	65f8      	str	r0, [r7, #92]	; 0x5c
   12614:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
   12616:	2b04      	cmp	r3, #4
   12618:	d1e3      	bne.n	125e2 <bytes_make_new+0x1a6>
    }

    return mp_obj_new_str_from_vstr(&mp_type_bytes, &vstr);
   1261a:	f107 0338 	add.w	r3, r7, #56	; 0x38
   1261e:	4619      	mov	r1, r3
   12620:	4808      	ldr	r0, [pc, #32]	; (12644 <bytes_make_new+0x208>)
   12622:	f002 fd60 	bl	150e6 <mp_obj_new_str_from_vstr>
   12626:	4603      	mov	r3, r0
   12628:	e003      	b.n	12632 <bytes_make_new+0x1f6>
        goto wrong_args;
   1262a:	bf00      	nop

wrong_args:
    mp_raise_TypeError("wrong number of arguments");
   1262c:	4807      	ldr	r0, [pc, #28]	; (1264c <bytes_make_new+0x210>)
   1262e:	f7fa fc79 	bl	cf24 <mp_raise_TypeError>
}
   12632:	4618      	mov	r0, r3
   12634:	3778      	adds	r7, #120	; 0x78
   12636:	46bd      	mov	sp, r7
   12638:	bd80      	pop	{r7, pc}
   1263a:	bf00      	nop
   1263c:	000219e0 	.word	0x000219e0
   12640:	00021964 	.word	0x00021964
   12644:	000219a0 	.word	0x000219a0
   12648:	000213cc 	.word	0x000213cc
   1264c:	000213e8 	.word	0x000213e8

00012650 <find_subbytes>:

// like strstr but with specified length and allows \0 bytes
// TODO replace with something more efficient/standard
const byte *find_subbytes(const byte *haystack, size_t hlen, const byte *needle, size_t nlen, int direction) {
   12650:	b580      	push	{r7, lr}
   12652:	b086      	sub	sp, #24
   12654:	af00      	add	r7, sp, #0
   12656:	60f8      	str	r0, [r7, #12]
   12658:	60b9      	str	r1, [r7, #8]
   1265a:	607a      	str	r2, [r7, #4]
   1265c:	603b      	str	r3, [r7, #0]
    if (hlen >= nlen) {
   1265e:	68ba      	ldr	r2, [r7, #8]
   12660:	683b      	ldr	r3, [r7, #0]
   12662:	429a      	cmp	r2, r3
   12664:	d328      	bcc.n	126b8 <find_subbytes+0x68>
        size_t str_index, str_index_end;
        if (direction > 0) {
   12666:	6a3b      	ldr	r3, [r7, #32]
   12668:	2b00      	cmp	r3, #0
   1266a:	dd06      	ble.n	1267a <find_subbytes+0x2a>
            str_index = 0;
   1266c:	2300      	movs	r3, #0
   1266e:	617b      	str	r3, [r7, #20]
            str_index_end = hlen - nlen;
   12670:	68ba      	ldr	r2, [r7, #8]
   12672:	683b      	ldr	r3, [r7, #0]
   12674:	1ad3      	subs	r3, r2, r3
   12676:	613b      	str	r3, [r7, #16]
   12678:	e005      	b.n	12686 <find_subbytes+0x36>
        } else {
            str_index = hlen - nlen;
   1267a:	68ba      	ldr	r2, [r7, #8]
   1267c:	683b      	ldr	r3, [r7, #0]
   1267e:	1ad3      	subs	r3, r2, r3
   12680:	617b      	str	r3, [r7, #20]
            str_index_end = 0;
   12682:	2300      	movs	r3, #0
   12684:	613b      	str	r3, [r7, #16]
        }
        for (;;) {
            if (memcmp(&haystack[str_index], needle, nlen) == 0) {
   12686:	68fa      	ldr	r2, [r7, #12]
   12688:	697b      	ldr	r3, [r7, #20]
   1268a:	4413      	add	r3, r2
   1268c:	683a      	ldr	r2, [r7, #0]
   1268e:	6879      	ldr	r1, [r7, #4]
   12690:	4618      	mov	r0, r3
   12692:	f009 fa7c 	bl	1bb8e <memcmp>
   12696:	4603      	mov	r3, r0
   12698:	2b00      	cmp	r3, #0
   1269a:	d103      	bne.n	126a4 <find_subbytes+0x54>
                //found
                return haystack + str_index;
   1269c:	68fa      	ldr	r2, [r7, #12]
   1269e:	697b      	ldr	r3, [r7, #20]
   126a0:	4413      	add	r3, r2
   126a2:	e00a      	b.n	126ba <find_subbytes+0x6a>
            }
            if (str_index == str_index_end) {
   126a4:	697a      	ldr	r2, [r7, #20]
   126a6:	693b      	ldr	r3, [r7, #16]
   126a8:	429a      	cmp	r2, r3
   126aa:	d004      	beq.n	126b6 <find_subbytes+0x66>
                //not found
                break;
            }
            str_index += direction;
   126ac:	6a3b      	ldr	r3, [r7, #32]
   126ae:	697a      	ldr	r2, [r7, #20]
   126b0:	4413      	add	r3, r2
   126b2:	617b      	str	r3, [r7, #20]
            if (memcmp(&haystack[str_index], needle, nlen) == 0) {
   126b4:	e7e7      	b.n	12686 <find_subbytes+0x36>
                break;
   126b6:	bf00      	nop
        }
    }
    return NULL;
   126b8:	2300      	movs	r3, #0
}
   126ba:	4618      	mov	r0, r3
   126bc:	3718      	adds	r7, #24
   126be:	46bd      	mov	sp, r7
   126c0:	bd80      	pop	{r7, pc}

000126c2 <mp_obj_str_binary_op>:

// Note: this function is used to check if an object is a str or bytes, which
// works because both those types use it as their binary_op method.  Revisit
// MP_OBJ_IS_STR_OR_BYTES if this fact changes.
mp_obj_t mp_obj_str_binary_op(mp_binary_op_t op, mp_obj_t lhs_in, mp_obj_t rhs_in) {
   126c2:	b580      	push	{r7, lr}
   126c4:	b09c      	sub	sp, #112	; 0x70
   126c6:	af02      	add	r7, sp, #8
   126c8:	60f8      	str	r0, [r7, #12]
   126ca:	60b9      	str	r1, [r7, #8]
   126cc:	607a      	str	r2, [r7, #4]
    // check for modulo
    if (op == MP_BINARY_OP_MODULO) {
   126ce:	68fb      	ldr	r3, [r7, #12]
   126d0:	2b1f      	cmp	r3, #31
   126d2:	d130      	bne.n	12736 <mp_obj_str_binary_op+0x74>
        mp_obj_t *args = &rhs_in;
   126d4:	1d3b      	adds	r3, r7, #4
   126d6:	64bb      	str	r3, [r7, #72]	; 0x48
        size_t n_args = 1;
   126d8:	2301      	movs	r3, #1
   126da:	647b      	str	r3, [r7, #68]	; 0x44
        mp_obj_t dict = MP_OBJ_NULL;
   126dc:	2300      	movs	r3, #0
   126de:	667b      	str	r3, [r7, #100]	; 0x64
        if (MP_OBJ_IS_TYPE(rhs_in, &mp_type_tuple)) {
   126e0:	687b      	ldr	r3, [r7, #4]
   126e2:	4618      	mov	r0, r3
   126e4:	f7ff fcc6 	bl	12074 <MP_OBJ_IS_OBJ>
   126e8:	4603      	mov	r3, r0
   126ea:	2b00      	cmp	r3, #0
   126ec:	d00d      	beq.n	1270a <mp_obj_str_binary_op+0x48>
   126ee:	687b      	ldr	r3, [r7, #4]
   126f0:	681b      	ldr	r3, [r3, #0]
   126f2:	4aad      	ldr	r2, [pc, #692]	; (129a8 <mp_obj_str_binary_op+0x2e6>)
   126f4:	4293      	cmp	r3, r2
   126f6:	d108      	bne.n	1270a <mp_obj_str_binary_op+0x48>
            // TODO: Support tuple subclasses?
            mp_obj_tuple_get(rhs_in, &n_args, &args);
   126f8:	687b      	ldr	r3, [r7, #4]
   126fa:	f107 0248 	add.w	r2, r7, #72	; 0x48
   126fe:	f107 0144 	add.w	r1, r7, #68	; 0x44
   12702:	4618      	mov	r0, r3
   12704:	f003 fa84 	bl	15c10 <mp_obj_tuple_get>
   12708:	e00d      	b.n	12726 <mp_obj_str_binary_op+0x64>
        } else if (MP_OBJ_IS_TYPE(rhs_in, &mp_type_dict)) {
   1270a:	687b      	ldr	r3, [r7, #4]
   1270c:	4618      	mov	r0, r3
   1270e:	f7ff fcb1 	bl	12074 <MP_OBJ_IS_OBJ>
   12712:	4603      	mov	r3, r0
   12714:	2b00      	cmp	r3, #0
   12716:	d006      	beq.n	12726 <mp_obj_str_binary_op+0x64>
   12718:	687b      	ldr	r3, [r7, #4]
   1271a:	681b      	ldr	r3, [r3, #0]
   1271c:	4aa3      	ldr	r2, [pc, #652]	; (129ac <mp_obj_str_binary_op+0x2ea>)
   1271e:	4293      	cmp	r3, r2
   12720:	d101      	bne.n	12726 <mp_obj_str_binary_op+0x64>
            dict = rhs_in;
   12722:	687b      	ldr	r3, [r7, #4]
   12724:	667b      	str	r3, [r7, #100]	; 0x64
        }
        return str_modulo_format(lhs_in, n_args, args, dict);
   12726:	6c79      	ldr	r1, [r7, #68]	; 0x44
   12728:	6cba      	ldr	r2, [r7, #72]	; 0x48
   1272a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   1272c:	68b8      	ldr	r0, [r7, #8]
   1272e:	f001 fd93 	bl	14258 <str_modulo_format>
   12732:	4603      	mov	r3, r0
   12734:	e133      	b.n	1299e <mp_obj_str_binary_op+0x2dc>
    }

    // from now on we need lhs type and data, so extract them
    mp_obj_type_t *lhs_type = mp_obj_get_type(lhs_in);
   12736:	68b8      	ldr	r0, [r7, #8]
   12738:	f7fb f80a 	bl	d750 <mp_obj_get_type>
   1273c:	6538      	str	r0, [r7, #80]	; 0x50
    GET_STR_DATA_LEN(lhs_in, lhs_data, lhs_len);
   1273e:	68b8      	ldr	r0, [r7, #8]
   12740:	f7ff fc86 	bl	12050 <MP_OBJ_IS_QSTR>
   12744:	4603      	mov	r3, r0
   12746:	2b00      	cmp	r3, #0
   12748:	d009      	beq.n	1275e <mp_obj_str_binary_op+0x9c>
   1274a:	68bb      	ldr	r3, [r7, #8]
   1274c:	089b      	lsrs	r3, r3, #2
   1274e:	f107 024c 	add.w	r2, r7, #76	; 0x4c
   12752:	4611      	mov	r1, r2
   12754:	4618      	mov	r0, r3
   12756:	f7ee fd4b 	bl	11f0 <qstr_data>
   1275a:	6638      	str	r0, [r7, #96]	; 0x60
   1275c:	e005      	b.n	1276a <mp_obj_str_binary_op+0xa8>
   1275e:	68bb      	ldr	r3, [r7, #8]
   12760:	689b      	ldr	r3, [r3, #8]
   12762:	64fb      	str	r3, [r7, #76]	; 0x4c
   12764:	68bb      	ldr	r3, [r7, #8]
   12766:	68db      	ldr	r3, [r3, #12]
   12768:	663b      	str	r3, [r7, #96]	; 0x60

    // check for multiply
    if (op == MP_BINARY_OP_MULTIPLY) {
   1276a:	68fb      	ldr	r3, [r7, #12]
   1276c:	2b1c      	cmp	r3, #28
   1276e:	d135      	bne.n	127dc <mp_obj_str_binary_op+0x11a>
        mp_int_t n;
        if (!mp_obj_get_int_maybe(rhs_in, &n)) {
   12770:	687b      	ldr	r3, [r7, #4]
   12772:	f107 0240 	add.w	r2, r7, #64	; 0x40
   12776:	4611      	mov	r1, r2
   12778:	4618      	mov	r0, r3
   1277a:	f7fb fa21 	bl	dbc0 <mp_obj_get_int_maybe>
   1277e:	4603      	mov	r3, r0
   12780:	f083 0301 	eor.w	r3, r3, #1
   12784:	b2db      	uxtb	r3, r3
   12786:	2b00      	cmp	r3, #0
   12788:	d001      	beq.n	1278e <mp_obj_str_binary_op+0xcc>
            return MP_OBJ_NULL; // op not supported
   1278a:	2300      	movs	r3, #0
   1278c:	e107      	b.n	1299e <mp_obj_str_binary_op+0x2dc>
        }
        if (n <= 0) {
   1278e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   12790:	2b00      	cmp	r3, #0
   12792:	dc07      	bgt.n	127a4 <mp_obj_str_binary_op+0xe2>
            if (lhs_type == &mp_type_str) {
   12794:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   12796:	4a86      	ldr	r2, [pc, #536]	; (129b0 <mp_obj_str_binary_op+0x2ee>)
   12798:	4293      	cmp	r3, r2
   1279a:	d101      	bne.n	127a0 <mp_obj_str_binary_op+0xde>
                return MP_OBJ_NEW_QSTR(MP_QSTR_); // empty str
   1279c:	2306      	movs	r3, #6
   1279e:	e0fe      	b.n	1299e <mp_obj_str_binary_op+0x2dc>
            } else {
                return mp_const_empty_bytes;
   127a0:	4b84      	ldr	r3, [pc, #528]	; (129b4 <mp_obj_str_binary_op+0x2f2>)
   127a2:	e0fc      	b.n	1299e <mp_obj_str_binary_op+0x2dc>
            }
        }
        vstr_t vstr;
        vstr_init_len(&vstr, lhs_len * n);
   127a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   127a6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   127a8:	fb02 f203 	mul.w	r2, r2, r3
   127ac:	f107 0330 	add.w	r3, r7, #48	; 0x30
   127b0:	4611      	mov	r1, r2
   127b2:	4618      	mov	r0, r3
   127b4:	f7ee fdb5 	bl	1322 <vstr_init_len>
        mp_seq_multiply(lhs_data, sizeof(*lhs_data), lhs_len, n, vstr.buf);
   127b8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
   127ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   127bc:	4619      	mov	r1, r3
   127be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   127c0:	9300      	str	r3, [sp, #0]
   127c2:	460b      	mov	r3, r1
   127c4:	2101      	movs	r1, #1
   127c6:	6e38      	ldr	r0, [r7, #96]	; 0x60
   127c8:	f004 fe80 	bl	174cc <mp_seq_multiply>
        return mp_obj_new_str_from_vstr(lhs_type, &vstr);
   127cc:	f107 0330 	add.w	r3, r7, #48	; 0x30
   127d0:	4619      	mov	r1, r3
   127d2:	6d38      	ldr	r0, [r7, #80]	; 0x50
   127d4:	f002 fc87 	bl	150e6 <mp_obj_new_str_from_vstr>
   127d8:	4603      	mov	r3, r0
   127da:	e0e0      	b.n	1299e <mp_obj_str_binary_op+0x2dc>
    // easy to "fix" this with a bit of extra logic below, but it costs code
    // size and execution time so we don't.

    const byte *rhs_data;
    size_t rhs_len;
    if (lhs_type == mp_obj_get_type(rhs_in)) {
   127dc:	687b      	ldr	r3, [r7, #4]
   127de:	4618      	mov	r0, r3
   127e0:	f7fa ffb6 	bl	d750 <mp_obj_get_type>
   127e4:	4602      	mov	r2, r0
   127e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   127e8:	429a      	cmp	r2, r3
   127ea:	d11b      	bne.n	12824 <mp_obj_str_binary_op+0x162>
        GET_STR_DATA_LEN(rhs_in, rhs_data_, rhs_len_);
   127ec:	687b      	ldr	r3, [r7, #4]
   127ee:	4618      	mov	r0, r3
   127f0:	f7ff fc2e 	bl	12050 <MP_OBJ_IS_QSTR>
   127f4:	4603      	mov	r3, r0
   127f6:	2b00      	cmp	r3, #0
   127f8:	d009      	beq.n	1280e <mp_obj_str_binary_op+0x14c>
   127fa:	687b      	ldr	r3, [r7, #4]
   127fc:	089b      	lsrs	r3, r3, #2
   127fe:	f107 022c 	add.w	r2, r7, #44	; 0x2c
   12802:	4611      	mov	r1, r2
   12804:	4618      	mov	r0, r3
   12806:	f7ee fcf3 	bl	11f0 <qstr_data>
   1280a:	6578      	str	r0, [r7, #84]	; 0x54
   1280c:	e005      	b.n	1281a <mp_obj_str_binary_op+0x158>
   1280e:	687b      	ldr	r3, [r7, #4]
   12810:	689b      	ldr	r3, [r3, #8]
   12812:	62fb      	str	r3, [r7, #44]	; 0x2c
   12814:	687b      	ldr	r3, [r7, #4]
   12816:	68db      	ldr	r3, [r3, #12]
   12818:	657b      	str	r3, [r7, #84]	; 0x54
        rhs_data = rhs_data_;
   1281a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   1281c:	65fb      	str	r3, [r7, #92]	; 0x5c
        rhs_len = rhs_len_;
   1281e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   12820:	65bb      	str	r3, [r7, #88]	; 0x58
   12822:	e01b      	b.n	1285c <mp_obj_str_binary_op+0x19a>
    } else if (lhs_type == &mp_type_bytes) {
   12824:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   12826:	4a64      	ldr	r2, [pc, #400]	; (129b8 <mp_obj_str_binary_op+0x2f6>)
   12828:	4293      	cmp	r3, r2
   1282a:	d113      	bne.n	12854 <mp_obj_str_binary_op+0x192>
        mp_buffer_info_t bufinfo;
        if (!mp_get_buffer(rhs_in, &bufinfo, MP_BUFFER_READ)) {
   1282c:	687b      	ldr	r3, [r7, #4]
   1282e:	f107 0120 	add.w	r1, r7, #32
   12832:	2201      	movs	r2, #1
   12834:	4618      	mov	r0, r3
   12836:	f7fb fb76 	bl	df26 <mp_get_buffer>
   1283a:	4603      	mov	r3, r0
   1283c:	f083 0301 	eor.w	r3, r3, #1
   12840:	b2db      	uxtb	r3, r3
   12842:	2b00      	cmp	r3, #0
   12844:	d001      	beq.n	1284a <mp_obj_str_binary_op+0x188>
            return MP_OBJ_NULL; // op not supported
   12846:	2300      	movs	r3, #0
   12848:	e0a9      	b.n	1299e <mp_obj_str_binary_op+0x2dc>
        }
        rhs_data = bufinfo.buf;
   1284a:	6a3b      	ldr	r3, [r7, #32]
   1284c:	65fb      	str	r3, [r7, #92]	; 0x5c
        rhs_len = bufinfo.len;
   1284e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   12850:	65bb      	str	r3, [r7, #88]	; 0x58
   12852:	e003      	b.n	1285c <mp_obj_str_binary_op+0x19a>
    } else {
        // LHS is str and RHS has an incompatible type
        // (except if operation is EQUAL, but that's handled by mp_obj_equal)
        bad_implicit_conversion(rhs_in);
   12854:	687b      	ldr	r3, [r7, #4]
   12856:	4618      	mov	r0, r3
   12858:	f002 fd97 	bl	1538a <bad_implicit_conversion>
    }

    switch (op) {
   1285c:	68fb      	ldr	r3, [r7, #12]
   1285e:	2b22      	cmp	r3, #34	; 0x22
   12860:	f200 809c 	bhi.w	1299c <mp_obj_str_binary_op+0x2da>
   12864:	a201      	add	r2, pc, #4	; (adr r2, 1286c <mp_obj_str_binary_op+0x1aa>)
   12866:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1286a:	bf00      	nop
   1286c:	00012981 	.word	0x00012981
   12870:	00012981 	.word	0x00012981
   12874:	00012981 	.word	0x00012981
   12878:	00012981 	.word	0x00012981
   1287c:	00012981 	.word	0x00012981
   12880:	0001299d 	.word	0x0001299d
   12884:	0001299d 	.word	0x0001299d
   12888:	0001299d 	.word	0x0001299d
   1288c:	0001299d 	.word	0x0001299d
   12890:	0001299d 	.word	0x0001299d
   12894:	0001299d 	.word	0x0001299d
   12898:	0001299d 	.word	0x0001299d
   1289c:	0001299d 	.word	0x0001299d
   128a0:	0001299d 	.word	0x0001299d
   128a4:	000128f9 	.word	0x000128f9
   128a8:	0001299d 	.word	0x0001299d
   128ac:	0001299d 	.word	0x0001299d
   128b0:	0001299d 	.word	0x0001299d
   128b4:	0001299d 	.word	0x0001299d
   128b8:	0001299d 	.word	0x0001299d
   128bc:	0001299d 	.word	0x0001299d
   128c0:	0001299d 	.word	0x0001299d
   128c4:	0001299d 	.word	0x0001299d
   128c8:	0001299d 	.word	0x0001299d
   128cc:	0001299d 	.word	0x0001299d
   128d0:	0001299d 	.word	0x0001299d
   128d4:	000128f9 	.word	0x000128f9
   128d8:	0001299d 	.word	0x0001299d
   128dc:	0001299d 	.word	0x0001299d
   128e0:	0001299d 	.word	0x0001299d
   128e4:	0001299d 	.word	0x0001299d
   128e8:	0001299d 	.word	0x0001299d
   128ec:	0001299d 	.word	0x0001299d
   128f0:	0001299d 	.word	0x0001299d
   128f4:	0001295b 	.word	0x0001295b
        case MP_BINARY_OP_ADD:
        case MP_BINARY_OP_INPLACE_ADD: {
            if (lhs_len == 0 && mp_obj_get_type(rhs_in) == lhs_type) {
   128f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   128fa:	2b00      	cmp	r3, #0
   128fc:	d109      	bne.n	12912 <mp_obj_str_binary_op+0x250>
   128fe:	687b      	ldr	r3, [r7, #4]
   12900:	4618      	mov	r0, r3
   12902:	f7fa ff25 	bl	d750 <mp_obj_get_type>
   12906:	4602      	mov	r2, r0
   12908:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   1290a:	429a      	cmp	r2, r3
   1290c:	d101      	bne.n	12912 <mp_obj_str_binary_op+0x250>
                return rhs_in;
   1290e:	687b      	ldr	r3, [r7, #4]
   12910:	e045      	b.n	1299e <mp_obj_str_binary_op+0x2dc>
            }
            if (rhs_len == 0) {
   12912:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   12914:	2b00      	cmp	r3, #0
   12916:	d101      	bne.n	1291c <mp_obj_str_binary_op+0x25a>
                return lhs_in;
   12918:	68bb      	ldr	r3, [r7, #8]
   1291a:	e040      	b.n	1299e <mp_obj_str_binary_op+0x2dc>
            }

            vstr_t vstr;
            vstr_init_len(&vstr, lhs_len + rhs_len);
   1291c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
   1291e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   12920:	441a      	add	r2, r3
   12922:	f107 0310 	add.w	r3, r7, #16
   12926:	4611      	mov	r1, r2
   12928:	4618      	mov	r0, r3
   1292a:	f7ee fcfa 	bl	1322 <vstr_init_len>
            memcpy(vstr.buf, lhs_data, lhs_len);
   1292e:	69bb      	ldr	r3, [r7, #24]
   12930:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
   12932:	6e39      	ldr	r1, [r7, #96]	; 0x60
   12934:	4618      	mov	r0, r3
   12936:	f009 f845 	bl	1b9c4 <memcpy>
            memcpy(vstr.buf + lhs_len, rhs_data, rhs_len);
   1293a:	69ba      	ldr	r2, [r7, #24]
   1293c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   1293e:	4413      	add	r3, r2
   12940:	6dba      	ldr	r2, [r7, #88]	; 0x58
   12942:	6df9      	ldr	r1, [r7, #92]	; 0x5c
   12944:	4618      	mov	r0, r3
   12946:	f009 f83d 	bl	1b9c4 <memcpy>
            return mp_obj_new_str_from_vstr(lhs_type, &vstr);
   1294a:	f107 0310 	add.w	r3, r7, #16
   1294e:	4619      	mov	r1, r3
   12950:	6d38      	ldr	r0, [r7, #80]	; 0x50
   12952:	f002 fbc8 	bl	150e6 <mp_obj_new_str_from_vstr>
   12956:	4603      	mov	r3, r0
   12958:	e021      	b.n	1299e <mp_obj_str_binary_op+0x2dc>
        }

        case MP_BINARY_OP_CONTAINS:
            return mp_obj_new_bool(find_subbytes(lhs_data, lhs_len, rhs_data, rhs_len, 1) != NULL);
   1295a:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
   1295c:	2301      	movs	r3, #1
   1295e:	9300      	str	r3, [sp, #0]
   12960:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   12962:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
   12964:	6e38      	ldr	r0, [r7, #96]	; 0x60
   12966:	f7ff fe73 	bl	12650 <find_subbytes>
   1296a:	4603      	mov	r3, r0
   1296c:	2b00      	cmp	r3, #0
   1296e:	bf14      	ite	ne
   12970:	2301      	movne	r3, #1
   12972:	2300      	moveq	r3, #0
   12974:	b2db      	uxtb	r3, r3
   12976:	4618      	mov	r0, r3
   12978:	f7ff fb8e 	bl	12098 <mp_obj_new_bool>
   1297c:	4603      	mov	r3, r0
   1297e:	e00e      	b.n	1299e <mp_obj_str_binary_op+0x2dc>
        case MP_BINARY_OP_EQUAL: // This will be passed only for bytes, str is dealt with in mp_obj_equal()
        case MP_BINARY_OP_LESS:
        case MP_BINARY_OP_LESS_EQUAL:
        case MP_BINARY_OP_MORE:
        case MP_BINARY_OP_MORE_EQUAL:
            return mp_obj_new_bool(mp_seq_cmp_bytes(op, lhs_data, lhs_len, rhs_data, rhs_len));
   12980:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
   12982:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   12984:	9300      	str	r3, [sp, #0]
   12986:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
   12988:	6e39      	ldr	r1, [r7, #96]	; 0x60
   1298a:	68f8      	ldr	r0, [r7, #12]
   1298c:	f004 fe01 	bl	17592 <mp_seq_cmp_bytes>
   12990:	4603      	mov	r3, r0
   12992:	4618      	mov	r0, r3
   12994:	f7ff fb80 	bl	12098 <mp_obj_new_bool>
   12998:	4603      	mov	r3, r0
   1299a:	e000      	b.n	1299e <mp_obj_str_binary_op+0x2dc>

        default:
            return MP_OBJ_NULL; // op not supported
   1299c:	2300      	movs	r3, #0
    }
}
   1299e:	4618      	mov	r0, r3
   129a0:	3768      	adds	r7, #104	; 0x68
   129a2:	46bd      	mov	sp, r7
   129a4:	bd80      	pop	{r7, pc}
   129a6:	bf00      	nop
   129a8:	00021be8 	.word	0x00021be8
   129ac:	0001fe68 	.word	0x0001fe68
   129b0:	00021964 	.word	0x00021964
   129b4:	000219e0 	.word	0x000219e0
   129b8:	000219a0 	.word	0x000219a0

000129bc <str_index_to_ptr>:

#if !MICROPY_PY_BUILTINS_STR_UNICODE
// objstrunicode defines own version
const byte *str_index_to_ptr(const mp_obj_type_t *type, const byte *self_data, size_t self_len,
                             mp_obj_t index, bool is_slice) {
   129bc:	b580      	push	{r7, lr}
   129be:	b086      	sub	sp, #24
   129c0:	af00      	add	r7, sp, #0
   129c2:	60f8      	str	r0, [r7, #12]
   129c4:	60b9      	str	r1, [r7, #8]
   129c6:	607a      	str	r2, [r7, #4]
   129c8:	603b      	str	r3, [r7, #0]
    size_t index_val = mp_get_index(type, self_len, index, is_slice);
   129ca:	f897 3020 	ldrb.w	r3, [r7, #32]
   129ce:	683a      	ldr	r2, [r7, #0]
   129d0:	6879      	ldr	r1, [r7, #4]
   129d2:	68f8      	ldr	r0, [r7, #12]
   129d4:	f7fb f984 	bl	dce0 <mp_get_index>
   129d8:	6178      	str	r0, [r7, #20]
    return self_data + index_val;
   129da:	68ba      	ldr	r2, [r7, #8]
   129dc:	697b      	ldr	r3, [r7, #20]
   129de:	4413      	add	r3, r2
}
   129e0:	4618      	mov	r0, r3
   129e2:	3718      	adds	r7, #24
   129e4:	46bd      	mov	sp, r7
   129e6:	bd80      	pop	{r7, pc}

000129e8 <bytes_subscr>:
#endif

// This is used for both bytes and 8-bit strings. This is not used for unicode strings.
STATIC mp_obj_t bytes_subscr(mp_obj_t self_in, mp_obj_t index, mp_obj_t value) {
   129e8:	b580      	push	{r7, lr}
   129ea:	b088      	sub	sp, #32
   129ec:	af00      	add	r7, sp, #0
   129ee:	60f8      	str	r0, [r7, #12]
   129f0:	60b9      	str	r1, [r7, #8]
   129f2:	607a      	str	r2, [r7, #4]
    mp_obj_type_t *type = mp_obj_get_type(self_in);
   129f4:	68f8      	ldr	r0, [r7, #12]
   129f6:	f7fa feab 	bl	d750 <mp_obj_get_type>
   129fa:	61b8      	str	r0, [r7, #24]
    GET_STR_DATA_LEN(self_in, self_data, self_len);
   129fc:	68f8      	ldr	r0, [r7, #12]
   129fe:	f7ff fb27 	bl	12050 <MP_OBJ_IS_QSTR>
   12a02:	4603      	mov	r3, r0
   12a04:	2b00      	cmp	r3, #0
   12a06:	d009      	beq.n	12a1c <bytes_subscr+0x34>
   12a08:	68fb      	ldr	r3, [r7, #12]
   12a0a:	089b      	lsrs	r3, r3, #2
   12a0c:	f107 0210 	add.w	r2, r7, #16
   12a10:	4611      	mov	r1, r2
   12a12:	4618      	mov	r0, r3
   12a14:	f7ee fbec 	bl	11f0 <qstr_data>
   12a18:	61f8      	str	r0, [r7, #28]
   12a1a:	e005      	b.n	12a28 <bytes_subscr+0x40>
   12a1c:	68fb      	ldr	r3, [r7, #12]
   12a1e:	689b      	ldr	r3, [r3, #8]
   12a20:	613b      	str	r3, [r7, #16]
   12a22:	68fb      	ldr	r3, [r7, #12]
   12a24:	68db      	ldr	r3, [r3, #12]
   12a26:	61fb      	str	r3, [r7, #28]
    if (value == MP_OBJ_SENTINEL) {
   12a28:	687b      	ldr	r3, [r7, #4]
   12a2a:	2b08      	cmp	r3, #8
   12a2c:	d11b      	bne.n	12a66 <bytes_subscr+0x7e>
                mp_raise_NotImplementedError("only slices with step=1 (aka None) are supported");
            }
            return mp_obj_new_str_of_type(type, self_data + slice.start, slice.stop - slice.start);
        }
#endif
        size_t index_val = mp_get_index(type, self_len, index, false);
   12a2e:	6939      	ldr	r1, [r7, #16]
   12a30:	2300      	movs	r3, #0
   12a32:	68ba      	ldr	r2, [r7, #8]
   12a34:	69b8      	ldr	r0, [r7, #24]
   12a36:	f7fb f953 	bl	dce0 <mp_get_index>
   12a3a:	6178      	str	r0, [r7, #20]
        // If we have unicode enabled the type will always be bytes, so take the short cut.
        if (MICROPY_PY_BUILTINS_STR_UNICODE || type == &mp_type_bytes) {
   12a3c:	69bb      	ldr	r3, [r7, #24]
   12a3e:	4a0c      	ldr	r2, [pc, #48]	; (12a70 <bytes_subscr+0x88>)
   12a40:	4293      	cmp	r3, r2
   12a42:	d107      	bne.n	12a54 <bytes_subscr+0x6c>
            return MP_OBJ_NEW_SMALL_INT(self_data[index_val]);
   12a44:	69fa      	ldr	r2, [r7, #28]
   12a46:	697b      	ldr	r3, [r7, #20]
   12a48:	4413      	add	r3, r2
   12a4a:	781b      	ldrb	r3, [r3, #0]
   12a4c:	005b      	lsls	r3, r3, #1
   12a4e:	f043 0301 	orr.w	r3, r3, #1
   12a52:	e009      	b.n	12a68 <bytes_subscr+0x80>
        } else {
            return mp_obj_new_str_via_qstr((char*)&self_data[index_val], 1);
   12a54:	69fa      	ldr	r2, [r7, #28]
   12a56:	697b      	ldr	r3, [r7, #20]
   12a58:	4413      	add	r3, r2
   12a5a:	2101      	movs	r1, #1
   12a5c:	4618      	mov	r0, r3
   12a5e:	f002 fb31 	bl	150c4 <mp_obj_new_str_via_qstr>
   12a62:	4603      	mov	r3, r0
   12a64:	e000      	b.n	12a68 <bytes_subscr+0x80>
        }
    } else {
        return MP_OBJ_NULL; // op not supported
   12a66:	2300      	movs	r3, #0
    }
}
   12a68:	4618      	mov	r0, r3
   12a6a:	3720      	adds	r7, #32
   12a6c:	46bd      	mov	sp, r7
   12a6e:	bd80      	pop	{r7, pc}
   12a70:	000219a0 	.word	0x000219a0

00012a74 <str_join>:

STATIC mp_obj_t str_join(mp_obj_t self_in, mp_obj_t arg) {
   12a74:	b590      	push	{r4, r7, lr}
   12a76:	b093      	sub	sp, #76	; 0x4c
   12a78:	af00      	add	r7, sp, #0
   12a7a:	6078      	str	r0, [r7, #4]
   12a7c:	6039      	str	r1, [r7, #0]
    mp_check_self(MP_OBJ_IS_STR_OR_BYTES(self_in));
   12a7e:	6878      	ldr	r0, [r7, #4]
   12a80:	f7ff fae6 	bl	12050 <MP_OBJ_IS_QSTR>
   12a84:	4603      	mov	r3, r0
   12a86:	2b00      	cmp	r3, #0
   12a88:	d112      	bne.n	12ab0 <str_join+0x3c>
   12a8a:	6878      	ldr	r0, [r7, #4]
   12a8c:	f7ff faf2 	bl	12074 <MP_OBJ_IS_OBJ>
   12a90:	4603      	mov	r3, r0
   12a92:	2b00      	cmp	r3, #0
   12a94:	d005      	beq.n	12aa2 <str_join+0x2e>
   12a96:	687b      	ldr	r3, [r7, #4]
   12a98:	681b      	ldr	r3, [r3, #0]
   12a9a:	699b      	ldr	r3, [r3, #24]
   12a9c:	4a78      	ldr	r2, [pc, #480]	; (12c80 <str_join+0x20c>)
   12a9e:	4293      	cmp	r3, r2
   12aa0:	d006      	beq.n	12ab0 <str_join+0x3c>
   12aa2:	4b78      	ldr	r3, [pc, #480]	; (12c84 <str_join+0x210>)
   12aa4:	4a78      	ldr	r2, [pc, #480]	; (12c88 <str_join+0x214>)
   12aa6:	f240 11bb 	movw	r1, #443	; 0x1bb
   12aaa:	4878      	ldr	r0, [pc, #480]	; (12c8c <str_join+0x218>)
   12aac:	f008 fb86 	bl	1b1bc <__assert_func>
    const mp_obj_type_t *self_type = mp_obj_get_type(self_in);
   12ab0:	6878      	ldr	r0, [r7, #4]
   12ab2:	f7fa fe4d 	bl	d750 <mp_obj_get_type>
   12ab6:	62b8      	str	r0, [r7, #40]	; 0x28

    // get separation string
    GET_STR_DATA_LEN(self_in, sep_str, sep_len);
   12ab8:	6878      	ldr	r0, [r7, #4]
   12aba:	f7ff fac9 	bl	12050 <MP_OBJ_IS_QSTR>
   12abe:	4603      	mov	r3, r0
   12ac0:	2b00      	cmp	r3, #0
   12ac2:	d009      	beq.n	12ad8 <str_join+0x64>
   12ac4:	687b      	ldr	r3, [r7, #4]
   12ac6:	089b      	lsrs	r3, r3, #2
   12ac8:	f107 0224 	add.w	r2, r7, #36	; 0x24
   12acc:	4611      	mov	r1, r2
   12ace:	4618      	mov	r0, r3
   12ad0:	f7ee fb8e 	bl	11f0 <qstr_data>
   12ad4:	6478      	str	r0, [r7, #68]	; 0x44
   12ad6:	e005      	b.n	12ae4 <str_join+0x70>
   12ad8:	687b      	ldr	r3, [r7, #4]
   12ada:	689b      	ldr	r3, [r3, #8]
   12adc:	627b      	str	r3, [r7, #36]	; 0x24
   12ade:	687b      	ldr	r3, [r7, #4]
   12ae0:	68db      	ldr	r3, [r3, #12]
   12ae2:	647b      	str	r3, [r7, #68]	; 0x44

    // process args
    size_t seq_len;
    mp_obj_t *seq_items;

    if (!MP_OBJ_IS_TYPE(arg, &mp_type_list) && !MP_OBJ_IS_TYPE(arg, &mp_type_tuple)) {
   12ae4:	683b      	ldr	r3, [r7, #0]
   12ae6:	4618      	mov	r0, r3
   12ae8:	f7ff fac4 	bl	12074 <MP_OBJ_IS_OBJ>
   12aec:	4603      	mov	r3, r0
   12aee:	f083 0301 	eor.w	r3, r3, #1
   12af2:	b2db      	uxtb	r3, r3
   12af4:	2b00      	cmp	r3, #0
   12af6:	d104      	bne.n	12b02 <str_join+0x8e>
   12af8:	683b      	ldr	r3, [r7, #0]
   12afa:	681b      	ldr	r3, [r3, #0]
   12afc:	4a64      	ldr	r2, [pc, #400]	; (12c90 <str_join+0x21c>)
   12afe:	4293      	cmp	r3, r2
   12b00:	d017      	beq.n	12b32 <str_join+0xbe>
   12b02:	683b      	ldr	r3, [r7, #0]
   12b04:	4618      	mov	r0, r3
   12b06:	f7ff fab5 	bl	12074 <MP_OBJ_IS_OBJ>
   12b0a:	4603      	mov	r3, r0
   12b0c:	f083 0301 	eor.w	r3, r3, #1
   12b10:	b2db      	uxtb	r3, r3
   12b12:	2b00      	cmp	r3, #0
   12b14:	d104      	bne.n	12b20 <str_join+0xac>
   12b16:	683b      	ldr	r3, [r7, #0]
   12b18:	681b      	ldr	r3, [r3, #0]
   12b1a:	4a5e      	ldr	r2, [pc, #376]	; (12c94 <str_join+0x220>)
   12b1c:	4293      	cmp	r3, r2
   12b1e:	d008      	beq.n	12b32 <str_join+0xbe>
        // arg is not a list nor a tuple, try to convert it to a list
        // TODO: Try to optimize?
        arg = mp_type_list.make_new(&mp_type_list, 1, 0, &arg);
   12b20:	4b5b      	ldr	r3, [pc, #364]	; (12c90 <str_join+0x21c>)
   12b22:	68dc      	ldr	r4, [r3, #12]
   12b24:	463b      	mov	r3, r7
   12b26:	2200      	movs	r2, #0
   12b28:	2101      	movs	r1, #1
   12b2a:	4859      	ldr	r0, [pc, #356]	; (12c90 <str_join+0x21c>)
   12b2c:	47a0      	blx	r4
   12b2e:	4603      	mov	r3, r0
   12b30:	603b      	str	r3, [r7, #0]
    }
    mp_obj_get_array(arg, &seq_len, &seq_items);
   12b32:	683b      	ldr	r3, [r7, #0]
   12b34:	f107 021c 	add.w	r2, r7, #28
   12b38:	f107 0120 	add.w	r1, r7, #32
   12b3c:	4618      	mov	r0, r3
   12b3e:	f7fb f87f 	bl	dc40 <mp_obj_get_array>

    // count required length
    size_t required_len = 0;
   12b42:	2300      	movs	r3, #0
   12b44:	643b      	str	r3, [r7, #64]	; 0x40
    for (size_t i = 0; i < seq_len; i++) {
   12b46:	2300      	movs	r3, #0
   12b48:	63fb      	str	r3, [r7, #60]	; 0x3c
   12b4a:	e039      	b.n	12bc0 <str_join+0x14c>
        if (mp_obj_get_type(seq_items[i]) != self_type) {
   12b4c:	69fa      	ldr	r2, [r7, #28]
   12b4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   12b50:	009b      	lsls	r3, r3, #2
   12b52:	4413      	add	r3, r2
   12b54:	681b      	ldr	r3, [r3, #0]
   12b56:	4618      	mov	r0, r3
   12b58:	f7fa fdfa 	bl	d750 <mp_obj_get_type>
   12b5c:	4602      	mov	r2, r0
   12b5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   12b60:	429a      	cmp	r2, r3
   12b62:	d002      	beq.n	12b6a <str_join+0xf6>
            mp_raise_TypeError(
   12b64:	484c      	ldr	r0, [pc, #304]	; (12c98 <str_join+0x224>)
   12b66:	f7fa f9dd 	bl	cf24 <mp_raise_TypeError>
                "join expects a list of str/bytes objects consistent with self object");
        }
        if (i > 0) {
   12b6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   12b6c:	2b00      	cmp	r3, #0
   12b6e:	d003      	beq.n	12b78 <str_join+0x104>
            required_len += sep_len;
   12b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   12b72:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   12b74:	4413      	add	r3, r2
   12b76:	643b      	str	r3, [r7, #64]	; 0x40
        }
        GET_STR_LEN(seq_items[i], l);
   12b78:	69fa      	ldr	r2, [r7, #28]
   12b7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   12b7c:	009b      	lsls	r3, r3, #2
   12b7e:	4413      	add	r3, r2
   12b80:	681b      	ldr	r3, [r3, #0]
   12b82:	4618      	mov	r0, r3
   12b84:	f7ff fa64 	bl	12050 <MP_OBJ_IS_QSTR>
   12b88:	4603      	mov	r3, r0
   12b8a:	2b00      	cmp	r3, #0
   12b8c:	d00a      	beq.n	12ba4 <str_join+0x130>
   12b8e:	69fa      	ldr	r2, [r7, #28]
   12b90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   12b92:	009b      	lsls	r3, r3, #2
   12b94:	4413      	add	r3, r2
   12b96:	681b      	ldr	r3, [r3, #0]
   12b98:	089b      	lsrs	r3, r3, #2
   12b9a:	4618      	mov	r0, r3
   12b9c:	f7ee fb0b 	bl	11b6 <qstr_len>
   12ba0:	63b8      	str	r0, [r7, #56]	; 0x38
   12ba2:	e006      	b.n	12bb2 <str_join+0x13e>
   12ba4:	69fa      	ldr	r2, [r7, #28]
   12ba6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   12ba8:	009b      	lsls	r3, r3, #2
   12baa:	4413      	add	r3, r2
   12bac:	681b      	ldr	r3, [r3, #0]
   12bae:	689b      	ldr	r3, [r3, #8]
   12bb0:	63bb      	str	r3, [r7, #56]	; 0x38
        required_len += l;
   12bb2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   12bb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   12bb6:	4413      	add	r3, r2
   12bb8:	643b      	str	r3, [r7, #64]	; 0x40
    for (size_t i = 0; i < seq_len; i++) {
   12bba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   12bbc:	3301      	adds	r3, #1
   12bbe:	63fb      	str	r3, [r7, #60]	; 0x3c
   12bc0:	6a3b      	ldr	r3, [r7, #32]
   12bc2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   12bc4:	429a      	cmp	r2, r3
   12bc6:	d3c1      	bcc.n	12b4c <str_join+0xd8>
    }

    // make joined string
    vstr_t vstr;
    vstr_init_len(&vstr, required_len);
   12bc8:	f107 030c 	add.w	r3, r7, #12
   12bcc:	6c39      	ldr	r1, [r7, #64]	; 0x40
   12bce:	4618      	mov	r0, r3
   12bd0:	f7ee fba7 	bl	1322 <vstr_init_len>
    byte *data = (byte*)vstr.buf;
   12bd4:	697b      	ldr	r3, [r7, #20]
   12bd6:	637b      	str	r3, [r7, #52]	; 0x34
    for (size_t i = 0; i < seq_len; i++) {
   12bd8:	2300      	movs	r3, #0
   12bda:	633b      	str	r3, [r7, #48]	; 0x30
   12bdc:	e040      	b.n	12c60 <str_join+0x1ec>
        if (i > 0) {
   12bde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   12be0:	2b00      	cmp	r3, #0
   12be2:	d009      	beq.n	12bf8 <str_join+0x184>
            memcpy(data, sep_str, sep_len);
   12be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   12be6:	461a      	mov	r2, r3
   12be8:	6c79      	ldr	r1, [r7, #68]	; 0x44
   12bea:	6b78      	ldr	r0, [r7, #52]	; 0x34
   12bec:	f008 feea 	bl	1b9c4 <memcpy>
            data += sep_len;
   12bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   12bf2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   12bf4:	4413      	add	r3, r2
   12bf6:	637b      	str	r3, [r7, #52]	; 0x34
        }
        GET_STR_DATA_LEN(seq_items[i], s, l);
   12bf8:	69fa      	ldr	r2, [r7, #28]
   12bfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   12bfc:	009b      	lsls	r3, r3, #2
   12bfe:	4413      	add	r3, r2
   12c00:	681b      	ldr	r3, [r3, #0]
   12c02:	4618      	mov	r0, r3
   12c04:	f7ff fa24 	bl	12050 <MP_OBJ_IS_QSTR>
   12c08:	4603      	mov	r3, r0
   12c0a:	2b00      	cmp	r3, #0
   12c0c:	d00d      	beq.n	12c2a <str_join+0x1b6>
   12c0e:	69fa      	ldr	r2, [r7, #28]
   12c10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   12c12:	009b      	lsls	r3, r3, #2
   12c14:	4413      	add	r3, r2
   12c16:	681b      	ldr	r3, [r3, #0]
   12c18:	089b      	lsrs	r3, r3, #2
   12c1a:	f107 0208 	add.w	r2, r7, #8
   12c1e:	4611      	mov	r1, r2
   12c20:	4618      	mov	r0, r3
   12c22:	f7ee fae5 	bl	11f0 <qstr_data>
   12c26:	62f8      	str	r0, [r7, #44]	; 0x2c
   12c28:	e00d      	b.n	12c46 <str_join+0x1d2>
   12c2a:	69fa      	ldr	r2, [r7, #28]
   12c2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   12c2e:	009b      	lsls	r3, r3, #2
   12c30:	4413      	add	r3, r2
   12c32:	681b      	ldr	r3, [r3, #0]
   12c34:	689b      	ldr	r3, [r3, #8]
   12c36:	60bb      	str	r3, [r7, #8]
   12c38:	69fa      	ldr	r2, [r7, #28]
   12c3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   12c3c:	009b      	lsls	r3, r3, #2
   12c3e:	4413      	add	r3, r2
   12c40:	681b      	ldr	r3, [r3, #0]
   12c42:	68db      	ldr	r3, [r3, #12]
   12c44:	62fb      	str	r3, [r7, #44]	; 0x2c
        memcpy(data, s, l);
   12c46:	68bb      	ldr	r3, [r7, #8]
   12c48:	461a      	mov	r2, r3
   12c4a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
   12c4c:	6b78      	ldr	r0, [r7, #52]	; 0x34
   12c4e:	f008 feb9 	bl	1b9c4 <memcpy>
        data += l;
   12c52:	68bb      	ldr	r3, [r7, #8]
   12c54:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   12c56:	4413      	add	r3, r2
   12c58:	637b      	str	r3, [r7, #52]	; 0x34
    for (size_t i = 0; i < seq_len; i++) {
   12c5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   12c5c:	3301      	adds	r3, #1
   12c5e:	633b      	str	r3, [r7, #48]	; 0x30
   12c60:	6a3b      	ldr	r3, [r7, #32]
   12c62:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   12c64:	429a      	cmp	r2, r3
   12c66:	d3ba      	bcc.n	12bde <str_join+0x16a>
    }

    // return joined string
    return mp_obj_new_str_from_vstr(self_type, &vstr);
   12c68:	f107 030c 	add.w	r3, r7, #12
   12c6c:	4619      	mov	r1, r3
   12c6e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   12c70:	f002 fa39 	bl	150e6 <mp_obj_new_str_from_vstr>
   12c74:	4603      	mov	r3, r0
}
   12c76:	4618      	mov	r0, r3
   12c78:	374c      	adds	r7, #76	; 0x4c
   12c7a:	46bd      	mov	sp, r7
   12c7c:	bd90      	pop	{r4, r7, pc}
   12c7e:	bf00      	nop
   12c80:	000126c3 	.word	0x000126c3
   12c84:	00021404 	.word	0x00021404
   12c88:	00021a10 	.word	0x00021a10
   12c8c:	0002148c 	.word	0x0002148c
   12c90:	00020f7c 	.word	0x00020f7c
   12c94:	00021be8 	.word	0x00021be8
   12c98:	000214a0 	.word	0x000214a0

00012c9c <mp_obj_str_split>:
MP_DEFINE_CONST_FUN_OBJ_2(str_join_obj, str_join);

mp_obj_t mp_obj_str_split(size_t n_args, const mp_obj_t *args) {
   12c9c:	b580      	push	{r7, lr}
   12c9e:	b08e      	sub	sp, #56	; 0x38
   12ca0:	af00      	add	r7, sp, #0
   12ca2:	6078      	str	r0, [r7, #4]
   12ca4:	6039      	str	r1, [r7, #0]
    const mp_obj_type_t *self_type = mp_obj_get_type(args[0]);
   12ca6:	683b      	ldr	r3, [r7, #0]
   12ca8:	681b      	ldr	r3, [r3, #0]
   12caa:	4618      	mov	r0, r3
   12cac:	f7fa fd50 	bl	d750 <mp_obj_get_type>
   12cb0:	62b8      	str	r0, [r7, #40]	; 0x28
    mp_int_t splits = -1;
   12cb2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   12cb6:	637b      	str	r3, [r7, #52]	; 0x34
    mp_obj_t sep = mp_const_none;
   12cb8:	4b7b      	ldr	r3, [pc, #492]	; (12ea8 <mp_obj_str_split+0x20c>)
   12cba:	633b      	str	r3, [r7, #48]	; 0x30
    if (n_args > 1) {
   12cbc:	687b      	ldr	r3, [r7, #4]
   12cbe:	2b01      	cmp	r3, #1
   12cc0:	d90c      	bls.n	12cdc <mp_obj_str_split+0x40>
        sep = args[1];
   12cc2:	683b      	ldr	r3, [r7, #0]
   12cc4:	685b      	ldr	r3, [r3, #4]
   12cc6:	633b      	str	r3, [r7, #48]	; 0x30
        if (n_args > 2) {
   12cc8:	687b      	ldr	r3, [r7, #4]
   12cca:	2b02      	cmp	r3, #2
   12ccc:	d906      	bls.n	12cdc <mp_obj_str_split+0x40>
            splits = mp_obj_get_int(args[2]);
   12cce:	683b      	ldr	r3, [r7, #0]
   12cd0:	3308      	adds	r3, #8
   12cd2:	681b      	ldr	r3, [r3, #0]
   12cd4:	4618      	mov	r0, r3
   12cd6:	f7fa ff17 	bl	db08 <mp_obj_get_int>
   12cda:	6378      	str	r0, [r7, #52]	; 0x34
        }
    }

    mp_obj_t res = mp_obj_new_list(0, NULL);
   12cdc:	2100      	movs	r1, #0
   12cde:	2000      	movs	r0, #0
   12ce0:	f7fe fd01 	bl	116e6 <mp_obj_new_list>
   12ce4:	6278      	str	r0, [r7, #36]	; 0x24
    GET_STR_DATA_LEN(args[0], s, len);
   12ce6:	683b      	ldr	r3, [r7, #0]
   12ce8:	681b      	ldr	r3, [r3, #0]
   12cea:	4618      	mov	r0, r3
   12cec:	f7ff f9b0 	bl	12050 <MP_OBJ_IS_QSTR>
   12cf0:	4603      	mov	r3, r0
   12cf2:	2b00      	cmp	r3, #0
   12cf4:	d00a      	beq.n	12d0c <mp_obj_str_split+0x70>
   12cf6:	683b      	ldr	r3, [r7, #0]
   12cf8:	681b      	ldr	r3, [r3, #0]
   12cfa:	089b      	lsrs	r3, r3, #2
   12cfc:	f107 0210 	add.w	r2, r7, #16
   12d00:	4611      	mov	r1, r2
   12d02:	4618      	mov	r0, r3
   12d04:	f7ee fa74 	bl	11f0 <qstr_data>
   12d08:	62f8      	str	r0, [r7, #44]	; 0x2c
   12d0a:	e007      	b.n	12d1c <mp_obj_str_split+0x80>
   12d0c:	683b      	ldr	r3, [r7, #0]
   12d0e:	681b      	ldr	r3, [r3, #0]
   12d10:	689b      	ldr	r3, [r3, #8]
   12d12:	613b      	str	r3, [r7, #16]
   12d14:	683b      	ldr	r3, [r7, #0]
   12d16:	681b      	ldr	r3, [r3, #0]
   12d18:	68db      	ldr	r3, [r3, #12]
   12d1a:	62fb      	str	r3, [r7, #44]	; 0x2c
    const byte *top = s + len;
   12d1c:	693b      	ldr	r3, [r7, #16]
   12d1e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   12d20:	4413      	add	r3, r2
   12d22:	623b      	str	r3, [r7, #32]

    if (sep == mp_const_none) {
   12d24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   12d26:	4a60      	ldr	r2, [pc, #384]	; (12ea8 <mp_obj_str_split+0x20c>)
   12d28:	4293      	cmp	r3, r2
   12d2a:	d167      	bne.n	12dfc <mp_obj_str_split+0x160>
        // sep not given, so separate on whitespace

        // Initial whitespace is not counted as split, so we pre-do it
        while (s < top && unichar_isspace(*s)) s++;
   12d2c:	e002      	b.n	12d34 <mp_obj_str_split+0x98>
   12d2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   12d30:	3301      	adds	r3, #1
   12d32:	62fb      	str	r3, [r7, #44]	; 0x2c
   12d34:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   12d36:	6a3b      	ldr	r3, [r7, #32]
   12d38:	429a      	cmp	r2, r3
   12d3a:	d244      	bcs.n	12dc6 <mp_obj_str_split+0x12a>
   12d3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   12d3e:	781b      	ldrb	r3, [r3, #0]
   12d40:	4618      	mov	r0, r3
   12d42:	f7ef fb05 	bl	2350 <unichar_isspace>
   12d46:	4603      	mov	r3, r0
   12d48:	2b00      	cmp	r3, #0
   12d4a:	d1f0      	bne.n	12d2e <mp_obj_str_split+0x92>
        while (s < top && splits != 0) {
   12d4c:	e03b      	b.n	12dc6 <mp_obj_str_split+0x12a>
            const byte *start = s;
   12d4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   12d50:	61fb      	str	r3, [r7, #28]
            while (s < top && !unichar_isspace(*s)) s++;
   12d52:	e002      	b.n	12d5a <mp_obj_str_split+0xbe>
   12d54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   12d56:	3301      	adds	r3, #1
   12d58:	62fb      	str	r3, [r7, #44]	; 0x2c
   12d5a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   12d5c:	6a3b      	ldr	r3, [r7, #32]
   12d5e:	429a      	cmp	r2, r3
   12d60:	d20a      	bcs.n	12d78 <mp_obj_str_split+0xdc>
   12d62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   12d64:	781b      	ldrb	r3, [r3, #0]
   12d66:	4618      	mov	r0, r3
   12d68:	f7ef faf2 	bl	2350 <unichar_isspace>
   12d6c:	4603      	mov	r3, r0
   12d6e:	f083 0301 	eor.w	r3, r3, #1
   12d72:	b2db      	uxtb	r3, r3
   12d74:	2b00      	cmp	r3, #0
   12d76:	d1ed      	bne.n	12d54 <mp_obj_str_split+0xb8>
            mp_obj_list_append(res, mp_obj_new_str_of_type(self_type, start, s - start));
   12d78:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   12d7a:	69fb      	ldr	r3, [r7, #28]
   12d7c:	1ad3      	subs	r3, r2, r3
   12d7e:	461a      	mov	r2, r3
   12d80:	69f9      	ldr	r1, [r7, #28]
   12d82:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   12d84:	f002 f983 	bl	1508e <mp_obj_new_str_of_type>
   12d88:	4603      	mov	r3, r0
   12d8a:	4619      	mov	r1, r3
   12d8c:	6a78      	ldr	r0, [r7, #36]	; 0x24
   12d8e:	f7fe f83e 	bl	10e0e <mp_obj_list_append>
            if (s >= top) {
   12d92:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   12d94:	6a3b      	ldr	r3, [r7, #32]
   12d96:	429a      	cmp	r2, r3
   12d98:	d21d      	bcs.n	12dd6 <mp_obj_str_split+0x13a>
                break;
            }
            while (s < top && unichar_isspace(*s)) s++;
   12d9a:	e002      	b.n	12da2 <mp_obj_str_split+0x106>
   12d9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   12d9e:	3301      	adds	r3, #1
   12da0:	62fb      	str	r3, [r7, #44]	; 0x2c
   12da2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   12da4:	6a3b      	ldr	r3, [r7, #32]
   12da6:	429a      	cmp	r2, r3
   12da8:	d207      	bcs.n	12dba <mp_obj_str_split+0x11e>
   12daa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   12dac:	781b      	ldrb	r3, [r3, #0]
   12dae:	4618      	mov	r0, r3
   12db0:	f7ef face 	bl	2350 <unichar_isspace>
   12db4:	4603      	mov	r3, r0
   12db6:	2b00      	cmp	r3, #0
   12db8:	d1f0      	bne.n	12d9c <mp_obj_str_split+0x100>
            if (splits > 0) {
   12dba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   12dbc:	2b00      	cmp	r3, #0
   12dbe:	dd02      	ble.n	12dc6 <mp_obj_str_split+0x12a>
                splits--;
   12dc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   12dc2:	3b01      	subs	r3, #1
   12dc4:	637b      	str	r3, [r7, #52]	; 0x34
        while (s < top && splits != 0) {
   12dc6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   12dc8:	6a3b      	ldr	r3, [r7, #32]
   12dca:	429a      	cmp	r2, r3
   12dcc:	d204      	bcs.n	12dd8 <mp_obj_str_split+0x13c>
   12dce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   12dd0:	2b00      	cmp	r3, #0
   12dd2:	d1bc      	bne.n	12d4e <mp_obj_str_split+0xb2>
   12dd4:	e000      	b.n	12dd8 <mp_obj_str_split+0x13c>
                break;
   12dd6:	bf00      	nop
            }
        }

        if (s < top) {
   12dd8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   12dda:	6a3b      	ldr	r3, [r7, #32]
   12ddc:	429a      	cmp	r2, r3
   12dde:	d25d      	bcs.n	12e9c <mp_obj_str_split+0x200>
            mp_obj_list_append(res, mp_obj_new_str_of_type(self_type, s, top - s));
   12de0:	6a3a      	ldr	r2, [r7, #32]
   12de2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   12de4:	1ad3      	subs	r3, r2, r3
   12de6:	461a      	mov	r2, r3
   12de8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
   12dea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   12dec:	f002 f94f 	bl	1508e <mp_obj_new_str_of_type>
   12df0:	4603      	mov	r3, r0
   12df2:	4619      	mov	r1, r3
   12df4:	6a78      	ldr	r0, [r7, #36]	; 0x24
   12df6:	f7fe f80a 	bl	10e0e <mp_obj_list_append>
   12dfa:	e04f      	b.n	12e9c <mp_obj_str_split+0x200>
        }

    } else {
        // sep given
        if (mp_obj_get_type(sep) != self_type) {
   12dfc:	6b38      	ldr	r0, [r7, #48]	; 0x30
   12dfe:	f7fa fca7 	bl	d750 <mp_obj_get_type>
   12e02:	4602      	mov	r2, r0
   12e04:	6abb      	ldr	r3, [r7, #40]	; 0x28
   12e06:	429a      	cmp	r2, r3
   12e08:	d002      	beq.n	12e10 <mp_obj_str_split+0x174>
            bad_implicit_conversion(sep);
   12e0a:	6b38      	ldr	r0, [r7, #48]	; 0x30
   12e0c:	f002 fabd 	bl	1538a <bad_implicit_conversion>
        }

        size_t sep_len;
        const char *sep_str = mp_obj_str_get_data(sep, &sep_len);
   12e10:	f107 030c 	add.w	r3, r7, #12
   12e14:	4619      	mov	r1, r3
   12e16:	6b38      	ldr	r0, [r7, #48]	; 0x30
   12e18:	f002 fb26 	bl	15468 <mp_obj_str_get_data>
   12e1c:	61b8      	str	r0, [r7, #24]

        if (sep_len == 0) {
   12e1e:	68fb      	ldr	r3, [r7, #12]
   12e20:	2b00      	cmp	r3, #0
   12e22:	d102      	bne.n	12e2a <mp_obj_str_split+0x18e>
            mp_raise_ValueError("empty separator");
   12e24:	4821      	ldr	r0, [pc, #132]	; (12eac <mp_obj_str_split+0x210>)
   12e26:	f7fa f872 	bl	cf0e <mp_raise_ValueError>
        }

        for (;;) {
            const byte *start = s;
   12e2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   12e2c:	617b      	str	r3, [r7, #20]
            for (;;) {
                if (splits == 0 || s + sep_len > top) {
   12e2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   12e30:	2b00      	cmp	r3, #0
   12e32:	d005      	beq.n	12e40 <mp_obj_str_split+0x1a4>
   12e34:	68fb      	ldr	r3, [r7, #12]
   12e36:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   12e38:	441a      	add	r2, r3
   12e3a:	6a3b      	ldr	r3, [r7, #32]
   12e3c:	429a      	cmp	r2, r3
   12e3e:	d902      	bls.n	12e46 <mp_obj_str_split+0x1aa>
                    s = top;
   12e40:	6a3b      	ldr	r3, [r7, #32]
   12e42:	62fb      	str	r3, [r7, #44]	; 0x2c
                    break;
   12e44:	e00d      	b.n	12e62 <mp_obj_str_split+0x1c6>
                } else if (memcmp(s, sep_str, sep_len) == 0) {
   12e46:	68fb      	ldr	r3, [r7, #12]
   12e48:	461a      	mov	r2, r3
   12e4a:	69b9      	ldr	r1, [r7, #24]
   12e4c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   12e4e:	f008 fe9e 	bl	1bb8e <memcmp>
   12e52:	4603      	mov	r3, r0
   12e54:	2b00      	cmp	r3, #0
   12e56:	d003      	beq.n	12e60 <mp_obj_str_split+0x1c4>
                    break;
                }
                s++;
   12e58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   12e5a:	3301      	adds	r3, #1
   12e5c:	62fb      	str	r3, [r7, #44]	; 0x2c
                if (splits == 0 || s + sep_len > top) {
   12e5e:	e7e6      	b.n	12e2e <mp_obj_str_split+0x192>
                    break;
   12e60:	bf00      	nop
            }
            mp_obj_list_append(res, mp_obj_new_str_of_type(self_type, start, s - start));
   12e62:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   12e64:	697b      	ldr	r3, [r7, #20]
   12e66:	1ad3      	subs	r3, r2, r3
   12e68:	461a      	mov	r2, r3
   12e6a:	6979      	ldr	r1, [r7, #20]
   12e6c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   12e6e:	f002 f90e 	bl	1508e <mp_obj_new_str_of_type>
   12e72:	4603      	mov	r3, r0
   12e74:	4619      	mov	r1, r3
   12e76:	6a78      	ldr	r0, [r7, #36]	; 0x24
   12e78:	f7fd ffc9 	bl	10e0e <mp_obj_list_append>
            if (s >= top) {
   12e7c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   12e7e:	6a3b      	ldr	r3, [r7, #32]
   12e80:	429a      	cmp	r2, r3
   12e82:	d20a      	bcs.n	12e9a <mp_obj_str_split+0x1fe>
                break;
            }
            s += sep_len;
   12e84:	68fb      	ldr	r3, [r7, #12]
   12e86:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   12e88:	4413      	add	r3, r2
   12e8a:	62fb      	str	r3, [r7, #44]	; 0x2c
            if (splits > 0) {
   12e8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   12e8e:	2b00      	cmp	r3, #0
   12e90:	ddcb      	ble.n	12e2a <mp_obj_str_split+0x18e>
                splits--;
   12e92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   12e94:	3b01      	subs	r3, #1
   12e96:	637b      	str	r3, [r7, #52]	; 0x34
        for (;;) {
   12e98:	e7c7      	b.n	12e2a <mp_obj_str_split+0x18e>
                break;
   12e9a:	bf00      	nop
            }
        }
    }

    return res;
   12e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   12e9e:	4618      	mov	r0, r3
   12ea0:	3738      	adds	r7, #56	; 0x38
   12ea2:	46bd      	mov	sp, r7
   12ea4:	bd80      	pop	{r7, pc}
   12ea6:	bf00      	nop
   12ea8:	000212b4 	.word	0x000212b4
   12eac:	000214f0 	.word	0x000214f0

00012eb0 <str_rsplit>:
    return res;
}
MP_DEFINE_CONST_FUN_OBJ_KW(str_splitlines_obj, 1, str_splitlines);
#endif

STATIC mp_obj_t str_rsplit(size_t n_args, const mp_obj_t *args) {
   12eb0:	b590      	push	{r4, r7, lr}
   12eb2:	b091      	sub	sp, #68	; 0x44
   12eb4:	af00      	add	r7, sp, #0
   12eb6:	6078      	str	r0, [r7, #4]
   12eb8:	6039      	str	r1, [r7, #0]
    if (n_args < 3) {
   12eba:	687b      	ldr	r3, [r7, #4]
   12ebc:	2b02      	cmp	r3, #2
   12ebe:	d805      	bhi.n	12ecc <str_rsplit+0x1c>
        // If we don't have split limit, it doesn't matter from which side
        // we split.
        return mp_obj_str_split(n_args, args);
   12ec0:	6839      	ldr	r1, [r7, #0]
   12ec2:	6878      	ldr	r0, [r7, #4]
   12ec4:	f7ff feea 	bl	12c9c <mp_obj_str_split>
   12ec8:	4603      	mov	r3, r0
   12eca:	e0cc      	b.n	13066 <str_rsplit+0x1b6>
    }
    const mp_obj_type_t *self_type = mp_obj_get_type(args[0]);
   12ecc:	683b      	ldr	r3, [r7, #0]
   12ece:	681b      	ldr	r3, [r3, #0]
   12ed0:	4618      	mov	r0, r3
   12ed2:	f7fa fc3d 	bl	d750 <mp_obj_get_type>
   12ed6:	62f8      	str	r0, [r7, #44]	; 0x2c
    mp_obj_t sep = args[1];
   12ed8:	683b      	ldr	r3, [r7, #0]
   12eda:	685b      	ldr	r3, [r3, #4]
   12edc:	62bb      	str	r3, [r7, #40]	; 0x28
    GET_STR_DATA_LEN(args[0], s, len);
   12ede:	683b      	ldr	r3, [r7, #0]
   12ee0:	681b      	ldr	r3, [r3, #0]
   12ee2:	4618      	mov	r0, r3
   12ee4:	f7ff f8b4 	bl	12050 <MP_OBJ_IS_QSTR>
   12ee8:	4603      	mov	r3, r0
   12eea:	2b00      	cmp	r3, #0
   12eec:	d00a      	beq.n	12f04 <str_rsplit+0x54>
   12eee:	683b      	ldr	r3, [r7, #0]
   12ef0:	681b      	ldr	r3, [r3, #0]
   12ef2:	089b      	lsrs	r3, r3, #2
   12ef4:	f107 0210 	add.w	r2, r7, #16
   12ef8:	4611      	mov	r1, r2
   12efa:	4618      	mov	r0, r3
   12efc:	f7ee f978 	bl	11f0 <qstr_data>
   12f00:	63f8      	str	r0, [r7, #60]	; 0x3c
   12f02:	e007      	b.n	12f14 <str_rsplit+0x64>
   12f04:	683b      	ldr	r3, [r7, #0]
   12f06:	681b      	ldr	r3, [r3, #0]
   12f08:	689b      	ldr	r3, [r3, #8]
   12f0a:	613b      	str	r3, [r7, #16]
   12f0c:	683b      	ldr	r3, [r7, #0]
   12f0e:	681b      	ldr	r3, [r3, #0]
   12f10:	68db      	ldr	r3, [r3, #12]
   12f12:	63fb      	str	r3, [r7, #60]	; 0x3c

    mp_int_t splits = mp_obj_get_int(args[2]);
   12f14:	683b      	ldr	r3, [r7, #0]
   12f16:	3308      	adds	r3, #8
   12f18:	681b      	ldr	r3, [r3, #0]
   12f1a:	4618      	mov	r0, r3
   12f1c:	f7fa fdf4 	bl	db08 <mp_obj_get_int>
   12f20:	63b8      	str	r0, [r7, #56]	; 0x38
    if (splits < 0) {
   12f22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   12f24:	2b00      	cmp	r3, #0
   12f26:	da05      	bge.n	12f34 <str_rsplit+0x84>
        // Negative limit means no limit, so delegate to split().
        return mp_obj_str_split(n_args, args);
   12f28:	6839      	ldr	r1, [r7, #0]
   12f2a:	6878      	ldr	r0, [r7, #4]
   12f2c:	f7ff feb6 	bl	12c9c <mp_obj_str_split>
   12f30:	4603      	mov	r3, r0
   12f32:	e098      	b.n	13066 <str_rsplit+0x1b6>
    }

    mp_int_t org_splits = splits;
   12f34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   12f36:	627b      	str	r3, [r7, #36]	; 0x24
    // Preallocate list to the max expected # of elements, as we
    // will fill it from the end.
    mp_obj_list_t *res = MP_OBJ_TO_PTR(mp_obj_new_list(splits + 1, NULL));
   12f38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   12f3a:	3301      	adds	r3, #1
   12f3c:	2100      	movs	r1, #0
   12f3e:	4618      	mov	r0, r3
   12f40:	f7fe fbd1 	bl	116e6 <mp_obj_new_list>
   12f44:	6238      	str	r0, [r7, #32]
    mp_int_t idx = splits;
   12f46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   12f48:	637b      	str	r3, [r7, #52]	; 0x34

    if (sep == mp_const_none) {
   12f4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   12f4c:	4a48      	ldr	r2, [pc, #288]	; (13070 <str_rsplit+0x1c0>)
   12f4e:	4293      	cmp	r3, r2
   12f50:	d102      	bne.n	12f58 <str_rsplit+0xa8>
        mp_raise_NotImplementedError("rsplit(None,n)");
   12f52:	4848      	ldr	r0, [pc, #288]	; (13074 <str_rsplit+0x1c4>)
   12f54:	f7fa f802 	bl	cf5c <mp_raise_NotImplementedError>
    } else {
        size_t sep_len;
        const char *sep_str = mp_obj_str_get_data(sep, &sep_len);
   12f58:	f107 030c 	add.w	r3, r7, #12
   12f5c:	4619      	mov	r1, r3
   12f5e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   12f60:	f002 fa82 	bl	15468 <mp_obj_str_get_data>
   12f64:	61f8      	str	r0, [r7, #28]

        if (sep_len == 0) {
   12f66:	68fb      	ldr	r3, [r7, #12]
   12f68:	2b00      	cmp	r3, #0
   12f6a:	d102      	bne.n	12f72 <str_rsplit+0xc2>
            mp_raise_ValueError("empty separator");
   12f6c:	4842      	ldr	r0, [pc, #264]	; (13078 <str_rsplit+0x1c8>)
   12f6e:	f7f9 ffce 	bl	cf0e <mp_raise_ValueError>
        }

        const byte *beg = s;
   12f72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   12f74:	61bb      	str	r3, [r7, #24]
        const byte *last = s + len;
   12f76:	693b      	ldr	r3, [r7, #16]
   12f78:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   12f7a:	4413      	add	r3, r2
   12f7c:	633b      	str	r3, [r7, #48]	; 0x30
        for (;;) {
            s = last - sep_len;
   12f7e:	68fb      	ldr	r3, [r7, #12]
   12f80:	425b      	negs	r3, r3
   12f82:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   12f84:	4413      	add	r3, r2
   12f86:	63fb      	str	r3, [r7, #60]	; 0x3c
            for (;;) {
                if (splits == 0 || s < beg) {
   12f88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   12f8a:	2b00      	cmp	r3, #0
   12f8c:	d011      	beq.n	12fb2 <str_rsplit+0x102>
   12f8e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   12f90:	69bb      	ldr	r3, [r7, #24]
   12f92:	429a      	cmp	r2, r3
   12f94:	d30d      	bcc.n	12fb2 <str_rsplit+0x102>
                    break;
                } else if (memcmp(s, sep_str, sep_len) == 0) {
   12f96:	68fb      	ldr	r3, [r7, #12]
   12f98:	461a      	mov	r2, r3
   12f9a:	69f9      	ldr	r1, [r7, #28]
   12f9c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
   12f9e:	f008 fdf6 	bl	1bb8e <memcmp>
   12fa2:	4603      	mov	r3, r0
   12fa4:	2b00      	cmp	r3, #0
   12fa6:	d003      	beq.n	12fb0 <str_rsplit+0x100>
                    break;
                }
                s--;
   12fa8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   12faa:	3b01      	subs	r3, #1
   12fac:	63fb      	str	r3, [r7, #60]	; 0x3c
                if (splits == 0 || s < beg) {
   12fae:	e7eb      	b.n	12f88 <str_rsplit+0xd8>
                    break;
   12fb0:	bf00      	nop
            }
            if (s < beg || splits == 0) {
   12fb2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   12fb4:	69bb      	ldr	r3, [r7, #24]
   12fb6:	429a      	cmp	r2, r3
   12fb8:	d302      	bcc.n	12fc0 <str_rsplit+0x110>
   12fba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   12fbc:	2b00      	cmp	r3, #0
   12fbe:	d113      	bne.n	12fe8 <str_rsplit+0x138>
                res->items[idx] = mp_obj_new_str_of_type(self_type, beg, last - beg);
   12fc0:	6a3b      	ldr	r3, [r7, #32]
   12fc2:	68da      	ldr	r2, [r3, #12]
   12fc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   12fc6:	009b      	lsls	r3, r3, #2
   12fc8:	18d4      	adds	r4, r2, r3
   12fca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   12fcc:	69bb      	ldr	r3, [r7, #24]
   12fce:	1ad3      	subs	r3, r2, r3
   12fd0:	461a      	mov	r2, r3
   12fd2:	69b9      	ldr	r1, [r7, #24]
   12fd4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   12fd6:	f002 f85a 	bl	1508e <mp_obj_new_str_of_type>
   12fda:	4603      	mov	r3, r0
   12fdc:	6023      	str	r3, [r4, #0]
                break;
   12fde:	bf00      	nop
            }
            res->items[idx--] = mp_obj_new_str_of_type(self_type, s + sep_len, last - s - sep_len);
            last = s;
            splits--;
        }
        if (idx != 0) {
   12fe0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   12fe2:	2b00      	cmp	r3, #0
   12fe4:	d03e      	beq.n	13064 <str_rsplit+0x1b4>
   12fe6:	e01b      	b.n	13020 <str_rsplit+0x170>
            res->items[idx--] = mp_obj_new_str_of_type(self_type, s + sep_len, last - s - sep_len);
   12fe8:	6a3b      	ldr	r3, [r7, #32]
   12fea:	68da      	ldr	r2, [r3, #12]
   12fec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   12fee:	1e59      	subs	r1, r3, #1
   12ff0:	6379      	str	r1, [r7, #52]	; 0x34
   12ff2:	009b      	lsls	r3, r3, #2
   12ff4:	18d4      	adds	r4, r2, r3
   12ff6:	68fb      	ldr	r3, [r7, #12]
   12ff8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   12ffa:	18d1      	adds	r1, r2, r3
   12ffc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   12ffe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   13000:	1ad3      	subs	r3, r2, r3
   13002:	461a      	mov	r2, r3
   13004:	68fb      	ldr	r3, [r7, #12]
   13006:	1ad3      	subs	r3, r2, r3
   13008:	461a      	mov	r2, r3
   1300a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   1300c:	f002 f83f 	bl	1508e <mp_obj_new_str_of_type>
   13010:	4603      	mov	r3, r0
   13012:	6023      	str	r3, [r4, #0]
            last = s;
   13014:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   13016:	633b      	str	r3, [r7, #48]	; 0x30
            splits--;
   13018:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1301a:	3b01      	subs	r3, #1
   1301c:	63bb      	str	r3, [r7, #56]	; 0x38
            s = last - sep_len;
   1301e:	e7ae      	b.n	12f7e <str_rsplit+0xce>
            // We split less parts than split limit, now go cleanup surplus
            size_t used = org_splits + 1 - idx;
   13020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   13022:	1c5a      	adds	r2, r3, #1
   13024:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   13026:	1ad3      	subs	r3, r2, r3
   13028:	617b      	str	r3, [r7, #20]
            memmove(res->items, &res->items[idx], used * sizeof(mp_obj_t));
   1302a:	6a3b      	ldr	r3, [r7, #32]
   1302c:	68d8      	ldr	r0, [r3, #12]
   1302e:	6a3b      	ldr	r3, [r7, #32]
   13030:	68da      	ldr	r2, [r3, #12]
   13032:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   13034:	009b      	lsls	r3, r3, #2
   13036:	18d1      	adds	r1, r2, r3
   13038:	697b      	ldr	r3, [r7, #20]
   1303a:	009b      	lsls	r3, r3, #2
   1303c:	461a      	mov	r2, r3
   1303e:	f008 fd26 	bl	1ba8e <memmove>
            mp_seq_clear(res->items, used, res->alloc, sizeof(*res->items));
   13042:	6a3b      	ldr	r3, [r7, #32]
   13044:	68da      	ldr	r2, [r3, #12]
   13046:	697b      	ldr	r3, [r7, #20]
   13048:	009b      	lsls	r3, r3, #2
   1304a:	18d0      	adds	r0, r2, r3
   1304c:	6a3b      	ldr	r3, [r7, #32]
   1304e:	685a      	ldr	r2, [r3, #4]
   13050:	697b      	ldr	r3, [r7, #20]
   13052:	1ad3      	subs	r3, r2, r3
   13054:	009b      	lsls	r3, r3, #2
   13056:	461a      	mov	r2, r3
   13058:	2100      	movs	r1, #0
   1305a:	f008 fd4d 	bl	1baf8 <memset>
            res->len = used;
   1305e:	6a3b      	ldr	r3, [r7, #32]
   13060:	697a      	ldr	r2, [r7, #20]
   13062:	609a      	str	r2, [r3, #8]
        }
    }

    return MP_OBJ_FROM_PTR(res);
   13064:	6a3b      	ldr	r3, [r7, #32]
}
   13066:	4618      	mov	r0, r3
   13068:	3744      	adds	r7, #68	; 0x44
   1306a:	46bd      	mov	sp, r7
   1306c:	bd90      	pop	{r4, r7, pc}
   1306e:	bf00      	nop
   13070:	000212b4 	.word	0x000212b4
   13074:	0002150c 	.word	0x0002150c
   13078:	000214f0 	.word	0x000214f0

0001307c <str_finder>:
MP_DEFINE_CONST_FUN_OBJ_VAR_BETWEEN(str_rsplit_obj, 1, 3, str_rsplit);

STATIC mp_obj_t str_finder(size_t n_args, const mp_obj_t *args, int direction, bool is_index) {
   1307c:	b580      	push	{r7, lr}
   1307e:	b08e      	sub	sp, #56	; 0x38
   13080:	af02      	add	r7, sp, #8
   13082:	60f8      	str	r0, [r7, #12]
   13084:	60b9      	str	r1, [r7, #8]
   13086:	607a      	str	r2, [r7, #4]
   13088:	70fb      	strb	r3, [r7, #3]
    const mp_obj_type_t *self_type = mp_obj_get_type(args[0]);
   1308a:	68bb      	ldr	r3, [r7, #8]
   1308c:	681b      	ldr	r3, [r3, #0]
   1308e:	4618      	mov	r0, r3
   13090:	f7fa fb5e 	bl	d750 <mp_obj_get_type>
   13094:	61f8      	str	r0, [r7, #28]
    mp_check_self(MP_OBJ_IS_STR_OR_BYTES(args[0]));
   13096:	68bb      	ldr	r3, [r7, #8]
   13098:	681b      	ldr	r3, [r3, #0]
   1309a:	4618      	mov	r0, r3
   1309c:	f7fe ffd8 	bl	12050 <MP_OBJ_IS_QSTR>
   130a0:	4603      	mov	r3, r0
   130a2:	2b00      	cmp	r3, #0
   130a4:	d115      	bne.n	130d2 <str_finder+0x56>
   130a6:	68bb      	ldr	r3, [r7, #8]
   130a8:	681b      	ldr	r3, [r3, #0]
   130aa:	4618      	mov	r0, r3
   130ac:	f7fe ffe2 	bl	12074 <MP_OBJ_IS_OBJ>
   130b0:	4603      	mov	r3, r0
   130b2:	2b00      	cmp	r3, #0
   130b4:	d006      	beq.n	130c4 <str_finder+0x48>
   130b6:	68bb      	ldr	r3, [r7, #8]
   130b8:	681b      	ldr	r3, [r3, #0]
   130ba:	681b      	ldr	r3, [r3, #0]
   130bc:	699b      	ldr	r3, [r3, #24]
   130be:	4a56      	ldr	r2, [pc, #344]	; (13218 <str_finder+0x19c>)
   130c0:	4293      	cmp	r3, r2
   130c2:	d006      	beq.n	130d2 <str_finder+0x56>
   130c4:	4b55      	ldr	r3, [pc, #340]	; (1321c <str_finder+0x1a0>)
   130c6:	4a56      	ldr	r2, [pc, #344]	; (13220 <str_finder+0x1a4>)
   130c8:	f240 21ab 	movw	r1, #683	; 0x2ab
   130cc:	4855      	ldr	r0, [pc, #340]	; (13224 <str_finder+0x1a8>)
   130ce:	f008 f875 	bl	1b1bc <__assert_func>

    // check argument type
    if (mp_obj_get_type(args[1]) != self_type) {
   130d2:	68bb      	ldr	r3, [r7, #8]
   130d4:	3304      	adds	r3, #4
   130d6:	681b      	ldr	r3, [r3, #0]
   130d8:	4618      	mov	r0, r3
   130da:	f7fa fb39 	bl	d750 <mp_obj_get_type>
   130de:	4602      	mov	r2, r0
   130e0:	69fb      	ldr	r3, [r7, #28]
   130e2:	429a      	cmp	r2, r3
   130e4:	d005      	beq.n	130f2 <str_finder+0x76>
        bad_implicit_conversion(args[1]);
   130e6:	68bb      	ldr	r3, [r7, #8]
   130e8:	3304      	adds	r3, #4
   130ea:	681b      	ldr	r3, [r3, #0]
   130ec:	4618      	mov	r0, r3
   130ee:	f002 f94c 	bl	1538a <bad_implicit_conversion>
    }

    GET_STR_DATA_LEN(args[0], haystack, haystack_len);
   130f2:	68bb      	ldr	r3, [r7, #8]
   130f4:	681b      	ldr	r3, [r3, #0]
   130f6:	4618      	mov	r0, r3
   130f8:	f7fe ffaa 	bl	12050 <MP_OBJ_IS_QSTR>
   130fc:	4603      	mov	r3, r0
   130fe:	2b00      	cmp	r3, #0
   13100:	d00a      	beq.n	13118 <str_finder+0x9c>
   13102:	68bb      	ldr	r3, [r7, #8]
   13104:	681b      	ldr	r3, [r3, #0]
   13106:	089b      	lsrs	r3, r3, #2
   13108:	f107 0214 	add.w	r2, r7, #20
   1310c:	4611      	mov	r1, r2
   1310e:	4618      	mov	r0, r3
   13110:	f7ee f86e 	bl	11f0 <qstr_data>
   13114:	62f8      	str	r0, [r7, #44]	; 0x2c
   13116:	e007      	b.n	13128 <str_finder+0xac>
   13118:	68bb      	ldr	r3, [r7, #8]
   1311a:	681b      	ldr	r3, [r3, #0]
   1311c:	689b      	ldr	r3, [r3, #8]
   1311e:	617b      	str	r3, [r7, #20]
   13120:	68bb      	ldr	r3, [r7, #8]
   13122:	681b      	ldr	r3, [r3, #0]
   13124:	68db      	ldr	r3, [r3, #12]
   13126:	62fb      	str	r3, [r7, #44]	; 0x2c
    GET_STR_DATA_LEN(args[1], needle, needle_len);
   13128:	68bb      	ldr	r3, [r7, #8]
   1312a:	3304      	adds	r3, #4
   1312c:	681b      	ldr	r3, [r3, #0]
   1312e:	4618      	mov	r0, r3
   13130:	f7fe ff8e 	bl	12050 <MP_OBJ_IS_QSTR>
   13134:	4603      	mov	r3, r0
   13136:	2b00      	cmp	r3, #0
   13138:	d00b      	beq.n	13152 <str_finder+0xd6>
   1313a:	68bb      	ldr	r3, [r7, #8]
   1313c:	3304      	adds	r3, #4
   1313e:	681b      	ldr	r3, [r3, #0]
   13140:	089b      	lsrs	r3, r3, #2
   13142:	f107 0210 	add.w	r2, r7, #16
   13146:	4611      	mov	r1, r2
   13148:	4618      	mov	r0, r3
   1314a:	f7ee f851 	bl	11f0 <qstr_data>
   1314e:	62b8      	str	r0, [r7, #40]	; 0x28
   13150:	e009      	b.n	13166 <str_finder+0xea>
   13152:	68bb      	ldr	r3, [r7, #8]
   13154:	3304      	adds	r3, #4
   13156:	681b      	ldr	r3, [r3, #0]
   13158:	689b      	ldr	r3, [r3, #8]
   1315a:	613b      	str	r3, [r7, #16]
   1315c:	68bb      	ldr	r3, [r7, #8]
   1315e:	3304      	adds	r3, #4
   13160:	681b      	ldr	r3, [r3, #0]
   13162:	68db      	ldr	r3, [r3, #12]
   13164:	62bb      	str	r3, [r7, #40]	; 0x28

    const byte *start = haystack;
   13166:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   13168:	627b      	str	r3, [r7, #36]	; 0x24
    const byte *end = haystack + haystack_len;
   1316a:	697b      	ldr	r3, [r7, #20]
   1316c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   1316e:	4413      	add	r3, r2
   13170:	623b      	str	r3, [r7, #32]
    if (n_args >= 3 && args[2] != mp_const_none) {
   13172:	68fb      	ldr	r3, [r7, #12]
   13174:	2b02      	cmp	r3, #2
   13176:	d911      	bls.n	1319c <str_finder+0x120>
   13178:	68bb      	ldr	r3, [r7, #8]
   1317a:	3308      	adds	r3, #8
   1317c:	681b      	ldr	r3, [r3, #0]
   1317e:	4a2a      	ldr	r2, [pc, #168]	; (13228 <str_finder+0x1ac>)
   13180:	4293      	cmp	r3, r2
   13182:	d00b      	beq.n	1319c <str_finder+0x120>
        start = str_index_to_ptr(self_type, haystack, haystack_len, args[2], true);
   13184:	697a      	ldr	r2, [r7, #20]
   13186:	68bb      	ldr	r3, [r7, #8]
   13188:	3308      	adds	r3, #8
   1318a:	6819      	ldr	r1, [r3, #0]
   1318c:	2301      	movs	r3, #1
   1318e:	9300      	str	r3, [sp, #0]
   13190:	460b      	mov	r3, r1
   13192:	6af9      	ldr	r1, [r7, #44]	; 0x2c
   13194:	69f8      	ldr	r0, [r7, #28]
   13196:	f7ff fc11 	bl	129bc <str_index_to_ptr>
   1319a:	6278      	str	r0, [r7, #36]	; 0x24
    }
    if (n_args >= 4 && args[3] != mp_const_none) {
   1319c:	68fb      	ldr	r3, [r7, #12]
   1319e:	2b03      	cmp	r3, #3
   131a0:	d911      	bls.n	131c6 <str_finder+0x14a>
   131a2:	68bb      	ldr	r3, [r7, #8]
   131a4:	330c      	adds	r3, #12
   131a6:	681b      	ldr	r3, [r3, #0]
   131a8:	4a1f      	ldr	r2, [pc, #124]	; (13228 <str_finder+0x1ac>)
   131aa:	4293      	cmp	r3, r2
   131ac:	d00b      	beq.n	131c6 <str_finder+0x14a>
        end = str_index_to_ptr(self_type, haystack, haystack_len, args[3], true);
   131ae:	697a      	ldr	r2, [r7, #20]
   131b0:	68bb      	ldr	r3, [r7, #8]
   131b2:	330c      	adds	r3, #12
   131b4:	6819      	ldr	r1, [r3, #0]
   131b6:	2301      	movs	r3, #1
   131b8:	9300      	str	r3, [sp, #0]
   131ba:	460b      	mov	r3, r1
   131bc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
   131be:	69f8      	ldr	r0, [r7, #28]
   131c0:	f7ff fbfc 	bl	129bc <str_index_to_ptr>
   131c4:	6238      	str	r0, [r7, #32]
    }

    if (end < start) {
   131c6:	6a3a      	ldr	r2, [r7, #32]
   131c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   131ca:	429a      	cmp	r2, r3
   131cc:	d310      	bcc.n	131f0 <str_finder+0x174>
        goto out_error;
    }

    const byte *p = find_subbytes(start, end - start, needle, needle_len, direction);
   131ce:	6a3a      	ldr	r2, [r7, #32]
   131d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   131d2:	1ad3      	subs	r3, r2, r3
   131d4:	4619      	mov	r1, r3
   131d6:	693a      	ldr	r2, [r7, #16]
   131d8:	687b      	ldr	r3, [r7, #4]
   131da:	9300      	str	r3, [sp, #0]
   131dc:	4613      	mov	r3, r2
   131de:	6aba      	ldr	r2, [r7, #40]	; 0x28
   131e0:	6a78      	ldr	r0, [r7, #36]	; 0x24
   131e2:	f7ff fa35 	bl	12650 <find_subbytes>
   131e6:	61b8      	str	r0, [r7, #24]
    if (p == NULL) {
   131e8:	69bb      	ldr	r3, [r7, #24]
   131ea:	2b00      	cmp	r3, #0
   131ec:	d10a      	bne.n	13204 <str_finder+0x188>
   131ee:	e000      	b.n	131f2 <str_finder+0x176>
        goto out_error;
   131f0:	bf00      	nop
    out_error:
        // not found
        if (is_index) {
   131f2:	78fb      	ldrb	r3, [r7, #3]
   131f4:	2b00      	cmp	r3, #0
   131f6:	d002      	beq.n	131fe <str_finder+0x182>
            mp_raise_ValueError("substring not found");
   131f8:	480c      	ldr	r0, [pc, #48]	; (1322c <str_finder+0x1b0>)
   131fa:	f7f9 fe88 	bl	cf0e <mp_raise_ValueError>
        } else {
            return MP_OBJ_NEW_SMALL_INT(-1);
   131fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   13202:	e005      	b.n	13210 <str_finder+0x194>
        #if MICROPY_PY_BUILTINS_STR_UNICODE
        if (self_type == &mp_type_str) {
            return MP_OBJ_NEW_SMALL_INT(utf8_ptr_to_index(haystack, p));
        }
        #endif
        return MP_OBJ_NEW_SMALL_INT(p - haystack);
   13204:	69ba      	ldr	r2, [r7, #24]
   13206:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   13208:	1ad3      	subs	r3, r2, r3
   1320a:	005b      	lsls	r3, r3, #1
   1320c:	f043 0301 	orr.w	r3, r3, #1
    }
}
   13210:	4618      	mov	r0, r3
   13212:	3730      	adds	r7, #48	; 0x30
   13214:	46bd      	mov	sp, r7
   13216:	bd80      	pop	{r7, pc}
   13218:	000126c3 	.word	0x000126c3
   1321c:	00021528 	.word	0x00021528
   13220:	00021a1c 	.word	0x00021a1c
   13224:	0002148c 	.word	0x0002148c
   13228:	000212b4 	.word	0x000212b4
   1322c:	000215b0 	.word	0x000215b0

00013230 <str_find>:

STATIC mp_obj_t str_find(size_t n_args, const mp_obj_t *args) {
   13230:	b580      	push	{r7, lr}
   13232:	b082      	sub	sp, #8
   13234:	af00      	add	r7, sp, #0
   13236:	6078      	str	r0, [r7, #4]
   13238:	6039      	str	r1, [r7, #0]
    return str_finder(n_args, args, 1, false);
   1323a:	2300      	movs	r3, #0
   1323c:	2201      	movs	r2, #1
   1323e:	6839      	ldr	r1, [r7, #0]
   13240:	6878      	ldr	r0, [r7, #4]
   13242:	f7ff ff1b 	bl	1307c <str_finder>
   13246:	4603      	mov	r3, r0
}
   13248:	4618      	mov	r0, r3
   1324a:	3708      	adds	r7, #8
   1324c:	46bd      	mov	sp, r7
   1324e:	bd80      	pop	{r7, pc}

00013250 <str_rfind>:
MP_DEFINE_CONST_FUN_OBJ_VAR_BETWEEN(str_find_obj, 2, 4, str_find);

STATIC mp_obj_t str_rfind(size_t n_args, const mp_obj_t *args) {
   13250:	b580      	push	{r7, lr}
   13252:	b082      	sub	sp, #8
   13254:	af00      	add	r7, sp, #0
   13256:	6078      	str	r0, [r7, #4]
   13258:	6039      	str	r1, [r7, #0]
    return str_finder(n_args, args, -1, false);
   1325a:	2300      	movs	r3, #0
   1325c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   13260:	6839      	ldr	r1, [r7, #0]
   13262:	6878      	ldr	r0, [r7, #4]
   13264:	f7ff ff0a 	bl	1307c <str_finder>
   13268:	4603      	mov	r3, r0
}
   1326a:	4618      	mov	r0, r3
   1326c:	3708      	adds	r7, #8
   1326e:	46bd      	mov	sp, r7
   13270:	bd80      	pop	{r7, pc}

00013272 <str_index>:
MP_DEFINE_CONST_FUN_OBJ_VAR_BETWEEN(str_rfind_obj, 2, 4, str_rfind);

STATIC mp_obj_t str_index(size_t n_args, const mp_obj_t *args) {
   13272:	b580      	push	{r7, lr}
   13274:	b082      	sub	sp, #8
   13276:	af00      	add	r7, sp, #0
   13278:	6078      	str	r0, [r7, #4]
   1327a:	6039      	str	r1, [r7, #0]
    return str_finder(n_args, args, 1, true);
   1327c:	2301      	movs	r3, #1
   1327e:	2201      	movs	r2, #1
   13280:	6839      	ldr	r1, [r7, #0]
   13282:	6878      	ldr	r0, [r7, #4]
   13284:	f7ff fefa 	bl	1307c <str_finder>
   13288:	4603      	mov	r3, r0
}
   1328a:	4618      	mov	r0, r3
   1328c:	3708      	adds	r7, #8
   1328e:	46bd      	mov	sp, r7
   13290:	bd80      	pop	{r7, pc}

00013292 <str_rindex>:
MP_DEFINE_CONST_FUN_OBJ_VAR_BETWEEN(str_index_obj, 2, 4, str_index);

STATIC mp_obj_t str_rindex(size_t n_args, const mp_obj_t *args) {
   13292:	b580      	push	{r7, lr}
   13294:	b082      	sub	sp, #8
   13296:	af00      	add	r7, sp, #0
   13298:	6078      	str	r0, [r7, #4]
   1329a:	6039      	str	r1, [r7, #0]
    return str_finder(n_args, args, -1, true);
   1329c:	2301      	movs	r3, #1
   1329e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   132a2:	6839      	ldr	r1, [r7, #0]
   132a4:	6878      	ldr	r0, [r7, #4]
   132a6:	f7ff fee9 	bl	1307c <str_finder>
   132aa:	4603      	mov	r3, r0
}
   132ac:	4618      	mov	r0, r3
   132ae:	3708      	adds	r7, #8
   132b0:	46bd      	mov	sp, r7
   132b2:	bd80      	pop	{r7, pc}

000132b4 <str_startswith>:
MP_DEFINE_CONST_FUN_OBJ_VAR_BETWEEN(str_rindex_obj, 2, 4, str_rindex);

// TODO: (Much) more variety in args
STATIC mp_obj_t str_startswith(size_t n_args, const mp_obj_t *args) {
   132b4:	b580      	push	{r7, lr}
   132b6:	b08a      	sub	sp, #40	; 0x28
   132b8:	af02      	add	r7, sp, #8
   132ba:	6078      	str	r0, [r7, #4]
   132bc:	6039      	str	r1, [r7, #0]
    const mp_obj_type_t *self_type = mp_obj_get_type(args[0]);
   132be:	683b      	ldr	r3, [r7, #0]
   132c0:	681b      	ldr	r3, [r3, #0]
   132c2:	4618      	mov	r0, r3
   132c4:	f7fa fa44 	bl	d750 <mp_obj_get_type>
   132c8:	6178      	str	r0, [r7, #20]
    GET_STR_DATA_LEN(args[0], str, str_len);
   132ca:	683b      	ldr	r3, [r7, #0]
   132cc:	681b      	ldr	r3, [r3, #0]
   132ce:	4618      	mov	r0, r3
   132d0:	f7fe febe 	bl	12050 <MP_OBJ_IS_QSTR>
   132d4:	4603      	mov	r3, r0
   132d6:	2b00      	cmp	r3, #0
   132d8:	d00a      	beq.n	132f0 <str_startswith+0x3c>
   132da:	683b      	ldr	r3, [r7, #0]
   132dc:	681b      	ldr	r3, [r3, #0]
   132de:	089b      	lsrs	r3, r3, #2
   132e0:	f107 020c 	add.w	r2, r7, #12
   132e4:	4611      	mov	r1, r2
   132e6:	4618      	mov	r0, r3
   132e8:	f7ed ff82 	bl	11f0 <qstr_data>
   132ec:	61f8      	str	r0, [r7, #28]
   132ee:	e007      	b.n	13300 <str_startswith+0x4c>
   132f0:	683b      	ldr	r3, [r7, #0]
   132f2:	681b      	ldr	r3, [r3, #0]
   132f4:	689b      	ldr	r3, [r3, #8]
   132f6:	60fb      	str	r3, [r7, #12]
   132f8:	683b      	ldr	r3, [r7, #0]
   132fa:	681b      	ldr	r3, [r3, #0]
   132fc:	68db      	ldr	r3, [r3, #12]
   132fe:	61fb      	str	r3, [r7, #28]
    size_t prefix_len;
    const char *prefix = mp_obj_str_get_data(args[1], &prefix_len);
   13300:	683b      	ldr	r3, [r7, #0]
   13302:	3304      	adds	r3, #4
   13304:	681b      	ldr	r3, [r3, #0]
   13306:	f107 0208 	add.w	r2, r7, #8
   1330a:	4611      	mov	r1, r2
   1330c:	4618      	mov	r0, r3
   1330e:	f002 f8ab 	bl	15468 <mp_obj_str_get_data>
   13312:	6138      	str	r0, [r7, #16]
    const byte *start = str;
   13314:	69fb      	ldr	r3, [r7, #28]
   13316:	61bb      	str	r3, [r7, #24]
    if (n_args > 2) {
   13318:	687b      	ldr	r3, [r7, #4]
   1331a:	2b02      	cmp	r3, #2
   1331c:	d90b      	bls.n	13336 <str_startswith+0x82>
        start = str_index_to_ptr(self_type, str, str_len, args[2], true);
   1331e:	68fa      	ldr	r2, [r7, #12]
   13320:	683b      	ldr	r3, [r7, #0]
   13322:	3308      	adds	r3, #8
   13324:	6819      	ldr	r1, [r3, #0]
   13326:	2301      	movs	r3, #1
   13328:	9300      	str	r3, [sp, #0]
   1332a:	460b      	mov	r3, r1
   1332c:	69f9      	ldr	r1, [r7, #28]
   1332e:	6978      	ldr	r0, [r7, #20]
   13330:	f7ff fb44 	bl	129bc <str_index_to_ptr>
   13334:	61b8      	str	r0, [r7, #24]
    }
    if (prefix_len + (start - str) > str_len) {
   13336:	69ba      	ldr	r2, [r7, #24]
   13338:	69fb      	ldr	r3, [r7, #28]
   1333a:	1ad3      	subs	r3, r2, r3
   1333c:	461a      	mov	r2, r3
   1333e:	68bb      	ldr	r3, [r7, #8]
   13340:	441a      	add	r2, r3
   13342:	68fb      	ldr	r3, [r7, #12]
   13344:	429a      	cmp	r2, r3
   13346:	d901      	bls.n	1334c <str_startswith+0x98>
        return mp_const_false;
   13348:	4b0a      	ldr	r3, [pc, #40]	; (13374 <str_startswith+0xc0>)
   1334a:	e00f      	b.n	1336c <str_startswith+0xb8>
    }
    return mp_obj_new_bool(memcmp(start, prefix, prefix_len) == 0);
   1334c:	68bb      	ldr	r3, [r7, #8]
   1334e:	461a      	mov	r2, r3
   13350:	6939      	ldr	r1, [r7, #16]
   13352:	69b8      	ldr	r0, [r7, #24]
   13354:	f008 fc1b 	bl	1bb8e <memcmp>
   13358:	4603      	mov	r3, r0
   1335a:	2b00      	cmp	r3, #0
   1335c:	bf0c      	ite	eq
   1335e:	2301      	moveq	r3, #1
   13360:	2300      	movne	r3, #0
   13362:	b2db      	uxtb	r3, r3
   13364:	4618      	mov	r0, r3
   13366:	f7fe fe97 	bl	12098 <mp_obj_new_bool>
   1336a:	4603      	mov	r3, r0
}
   1336c:	4618      	mov	r0, r3
   1336e:	3720      	adds	r7, #32
   13370:	46bd      	mov	sp, r7
   13372:	bd80      	pop	{r7, pc}
   13374:	0001f9bc 	.word	0x0001f9bc

00013378 <str_endswith>:
MP_DEFINE_CONST_FUN_OBJ_VAR_BETWEEN(str_startswith_obj, 2, 3, str_startswith);

STATIC mp_obj_t str_endswith(size_t n_args, const mp_obj_t *args) {
   13378:	b580      	push	{r7, lr}
   1337a:	b086      	sub	sp, #24
   1337c:	af00      	add	r7, sp, #0
   1337e:	6078      	str	r0, [r7, #4]
   13380:	6039      	str	r1, [r7, #0]
    GET_STR_DATA_LEN(args[0], str, str_len);
   13382:	683b      	ldr	r3, [r7, #0]
   13384:	681b      	ldr	r3, [r3, #0]
   13386:	4618      	mov	r0, r3
   13388:	f7fe fe62 	bl	12050 <MP_OBJ_IS_QSTR>
   1338c:	4603      	mov	r3, r0
   1338e:	2b00      	cmp	r3, #0
   13390:	d00a      	beq.n	133a8 <str_endswith+0x30>
   13392:	683b      	ldr	r3, [r7, #0]
   13394:	681b      	ldr	r3, [r3, #0]
   13396:	089b      	lsrs	r3, r3, #2
   13398:	f107 020c 	add.w	r2, r7, #12
   1339c:	4611      	mov	r1, r2
   1339e:	4618      	mov	r0, r3
   133a0:	f7ed ff26 	bl	11f0 <qstr_data>
   133a4:	6178      	str	r0, [r7, #20]
   133a6:	e007      	b.n	133b8 <str_endswith+0x40>
   133a8:	683b      	ldr	r3, [r7, #0]
   133aa:	681b      	ldr	r3, [r3, #0]
   133ac:	689b      	ldr	r3, [r3, #8]
   133ae:	60fb      	str	r3, [r7, #12]
   133b0:	683b      	ldr	r3, [r7, #0]
   133b2:	681b      	ldr	r3, [r3, #0]
   133b4:	68db      	ldr	r3, [r3, #12]
   133b6:	617b      	str	r3, [r7, #20]
    size_t suffix_len;
    const char *suffix = mp_obj_str_get_data(args[1], &suffix_len);
   133b8:	683b      	ldr	r3, [r7, #0]
   133ba:	3304      	adds	r3, #4
   133bc:	681b      	ldr	r3, [r3, #0]
   133be:	f107 0208 	add.w	r2, r7, #8
   133c2:	4611      	mov	r1, r2
   133c4:	4618      	mov	r0, r3
   133c6:	f002 f84f 	bl	15468 <mp_obj_str_get_data>
   133ca:	6138      	str	r0, [r7, #16]
    if (n_args > 2) {
   133cc:	687b      	ldr	r3, [r7, #4]
   133ce:	2b02      	cmp	r3, #2
   133d0:	d902      	bls.n	133d8 <str_endswith+0x60>
        mp_raise_NotImplementedError("start/end indices");
   133d2:	4810      	ldr	r0, [pc, #64]	; (13414 <str_endswith+0x9c>)
   133d4:	f7f9 fdc2 	bl	cf5c <mp_raise_NotImplementedError>
    }

    if (suffix_len > str_len) {
   133d8:	68ba      	ldr	r2, [r7, #8]
   133da:	68fb      	ldr	r3, [r7, #12]
   133dc:	429a      	cmp	r2, r3
   133de:	d901      	bls.n	133e4 <str_endswith+0x6c>
        return mp_const_false;
   133e0:	4b0d      	ldr	r3, [pc, #52]	; (13418 <str_endswith+0xa0>)
   133e2:	e013      	b.n	1340c <str_endswith+0x94>
    }
    return mp_obj_new_bool(memcmp(str + (str_len - suffix_len), suffix, suffix_len) == 0);
   133e4:	68fa      	ldr	r2, [r7, #12]
   133e6:	68bb      	ldr	r3, [r7, #8]
   133e8:	1ad3      	subs	r3, r2, r3
   133ea:	697a      	ldr	r2, [r7, #20]
   133ec:	4413      	add	r3, r2
   133ee:	68ba      	ldr	r2, [r7, #8]
   133f0:	6939      	ldr	r1, [r7, #16]
   133f2:	4618      	mov	r0, r3
   133f4:	f008 fbcb 	bl	1bb8e <memcmp>
   133f8:	4603      	mov	r3, r0
   133fa:	2b00      	cmp	r3, #0
   133fc:	bf0c      	ite	eq
   133fe:	2301      	moveq	r3, #1
   13400:	2300      	movne	r3, #0
   13402:	b2db      	uxtb	r3, r3
   13404:	4618      	mov	r0, r3
   13406:	f7fe fe47 	bl	12098 <mp_obj_new_bool>
   1340a:	4603      	mov	r3, r0
}
   1340c:	4618      	mov	r0, r3
   1340e:	3718      	adds	r7, #24
   13410:	46bd      	mov	sp, r7
   13412:	bd80      	pop	{r7, pc}
   13414:	00021600 	.word	0x00021600
   13418:	0001f9bc 	.word	0x0001f9bc

0001341c <str_uni_strip>:
MP_DEFINE_CONST_FUN_OBJ_VAR_BETWEEN(str_endswith_obj, 2, 3, str_endswith);

enum { LSTRIP, RSTRIP, STRIP };

STATIC mp_obj_t str_uni_strip(int type, size_t n_args, const mp_obj_t *args) {
   1341c:	b580      	push	{r7, lr}
   1341e:	b094      	sub	sp, #80	; 0x50
   13420:	af02      	add	r7, sp, #8
   13422:	60f8      	str	r0, [r7, #12]
   13424:	60b9      	str	r1, [r7, #8]
   13426:	607a      	str	r2, [r7, #4]
    mp_check_self(MP_OBJ_IS_STR_OR_BYTES(args[0]));
   13428:	687b      	ldr	r3, [r7, #4]
   1342a:	681b      	ldr	r3, [r3, #0]
   1342c:	4618      	mov	r0, r3
   1342e:	f7fe fe0f 	bl	12050 <MP_OBJ_IS_QSTR>
   13432:	4603      	mov	r3, r0
   13434:	2b00      	cmp	r3, #0
   13436:	d115      	bne.n	13464 <str_uni_strip+0x48>
   13438:	687b      	ldr	r3, [r7, #4]
   1343a:	681b      	ldr	r3, [r3, #0]
   1343c:	4618      	mov	r0, r3
   1343e:	f7fe fe19 	bl	12074 <MP_OBJ_IS_OBJ>
   13442:	4603      	mov	r3, r0
   13444:	2b00      	cmp	r3, #0
   13446:	d006      	beq.n	13456 <str_uni_strip+0x3a>
   13448:	687b      	ldr	r3, [r7, #4]
   1344a:	681b      	ldr	r3, [r3, #0]
   1344c:	681b      	ldr	r3, [r3, #0]
   1344e:	699b      	ldr	r3, [r3, #24]
   13450:	4a76      	ldr	r2, [pc, #472]	; (1362c <str_uni_strip+0x210>)
   13452:	4293      	cmp	r3, r2
   13454:	d006      	beq.n	13464 <str_uni_strip+0x48>
   13456:	4b76      	ldr	r3, [pc, #472]	; (13630 <str_uni_strip+0x214>)
   13458:	4a76      	ldr	r2, [pc, #472]	; (13634 <str_uni_strip+0x218>)
   1345a:	f240 310d 	movw	r1, #781	; 0x30d
   1345e:	4876      	ldr	r0, [pc, #472]	; (13638 <str_uni_strip+0x21c>)
   13460:	f007 feac 	bl	1b1bc <__assert_func>
    const mp_obj_type_t *self_type = mp_obj_get_type(args[0]);
   13464:	687b      	ldr	r3, [r7, #4]
   13466:	681b      	ldr	r3, [r3, #0]
   13468:	4618      	mov	r0, r3
   1346a:	f7fa f971 	bl	d750 <mp_obj_get_type>
   1346e:	61f8      	str	r0, [r7, #28]

    const byte *chars_to_del;
    uint chars_to_del_len;
    static const byte whitespace[] = " \t\n\r\v\f";

    if (n_args == 1) {
   13470:	68bb      	ldr	r3, [r7, #8]
   13472:	2b01      	cmp	r3, #1
   13474:	d104      	bne.n	13480 <str_uni_strip+0x64>
        chars_to_del = whitespace;
   13476:	4b71      	ldr	r3, [pc, #452]	; (1363c <str_uni_strip+0x220>)
   13478:	647b      	str	r3, [r7, #68]	; 0x44
        chars_to_del_len = sizeof(whitespace) - 1;
   1347a:	2306      	movs	r3, #6
   1347c:	643b      	str	r3, [r7, #64]	; 0x40
   1347e:	e032      	b.n	134e6 <str_uni_strip+0xca>
    } else {
        if (mp_obj_get_type(args[1]) != self_type) {
   13480:	687b      	ldr	r3, [r7, #4]
   13482:	3304      	adds	r3, #4
   13484:	681b      	ldr	r3, [r3, #0]
   13486:	4618      	mov	r0, r3
   13488:	f7fa f962 	bl	d750 <mp_obj_get_type>
   1348c:	4602      	mov	r2, r0
   1348e:	69fb      	ldr	r3, [r7, #28]
   13490:	429a      	cmp	r2, r3
   13492:	d005      	beq.n	134a0 <str_uni_strip+0x84>
            bad_implicit_conversion(args[1]);
   13494:	687b      	ldr	r3, [r7, #4]
   13496:	3304      	adds	r3, #4
   13498:	681b      	ldr	r3, [r3, #0]
   1349a:	4618      	mov	r0, r3
   1349c:	f001 ff75 	bl	1538a <bad_implicit_conversion>
        }
        GET_STR_DATA_LEN(args[1], s, l);
   134a0:	687b      	ldr	r3, [r7, #4]
   134a2:	3304      	adds	r3, #4
   134a4:	681b      	ldr	r3, [r3, #0]
   134a6:	4618      	mov	r0, r3
   134a8:	f7fe fdd2 	bl	12050 <MP_OBJ_IS_QSTR>
   134ac:	4603      	mov	r3, r0
   134ae:	2b00      	cmp	r3, #0
   134b0:	d00b      	beq.n	134ca <str_uni_strip+0xae>
   134b2:	687b      	ldr	r3, [r7, #4]
   134b4:	3304      	adds	r3, #4
   134b6:	681b      	ldr	r3, [r3, #0]
   134b8:	089b      	lsrs	r3, r3, #2
   134ba:	f107 0210 	add.w	r2, r7, #16
   134be:	4611      	mov	r1, r2
   134c0:	4618      	mov	r0, r3
   134c2:	f7ed fe95 	bl	11f0 <qstr_data>
   134c6:	63f8      	str	r0, [r7, #60]	; 0x3c
   134c8:	e009      	b.n	134de <str_uni_strip+0xc2>
   134ca:	687b      	ldr	r3, [r7, #4]
   134cc:	3304      	adds	r3, #4
   134ce:	681b      	ldr	r3, [r3, #0]
   134d0:	689b      	ldr	r3, [r3, #8]
   134d2:	613b      	str	r3, [r7, #16]
   134d4:	687b      	ldr	r3, [r7, #4]
   134d6:	3304      	adds	r3, #4
   134d8:	681b      	ldr	r3, [r3, #0]
   134da:	68db      	ldr	r3, [r3, #12]
   134dc:	63fb      	str	r3, [r7, #60]	; 0x3c
        chars_to_del = s;
   134de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   134e0:	647b      	str	r3, [r7, #68]	; 0x44
        chars_to_del_len = l;
   134e2:	693b      	ldr	r3, [r7, #16]
   134e4:	643b      	str	r3, [r7, #64]	; 0x40
    }

    GET_STR_DATA_LEN(args[0], orig_str, orig_str_len);
   134e6:	687b      	ldr	r3, [r7, #4]
   134e8:	681b      	ldr	r3, [r3, #0]
   134ea:	4618      	mov	r0, r3
   134ec:	f7fe fdb0 	bl	12050 <MP_OBJ_IS_QSTR>
   134f0:	4603      	mov	r3, r0
   134f2:	2b00      	cmp	r3, #0
   134f4:	d00a      	beq.n	1350c <str_uni_strip+0xf0>
   134f6:	687b      	ldr	r3, [r7, #4]
   134f8:	681b      	ldr	r3, [r3, #0]
   134fa:	089b      	lsrs	r3, r3, #2
   134fc:	f107 0214 	add.w	r2, r7, #20
   13500:	4611      	mov	r1, r2
   13502:	4618      	mov	r0, r3
   13504:	f7ed fe74 	bl	11f0 <qstr_data>
   13508:	63b8      	str	r0, [r7, #56]	; 0x38
   1350a:	e007      	b.n	1351c <str_uni_strip+0x100>
   1350c:	687b      	ldr	r3, [r7, #4]
   1350e:	681b      	ldr	r3, [r3, #0]
   13510:	689b      	ldr	r3, [r3, #8]
   13512:	617b      	str	r3, [r7, #20]
   13514:	687b      	ldr	r3, [r7, #4]
   13516:	681b      	ldr	r3, [r3, #0]
   13518:	68db      	ldr	r3, [r3, #12]
   1351a:	63bb      	str	r3, [r7, #56]	; 0x38

    size_t first_good_char_pos = 0;
   1351c:	2300      	movs	r3, #0
   1351e:	637b      	str	r3, [r7, #52]	; 0x34
    bool first_good_char_pos_set = false;
   13520:	2300      	movs	r3, #0
   13522:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    size_t last_good_char_pos = 0;
   13526:	2300      	movs	r3, #0
   13528:	62fb      	str	r3, [r7, #44]	; 0x2c
    size_t i = 0;
   1352a:	2300      	movs	r3, #0
   1352c:	62bb      	str	r3, [r7, #40]	; 0x28
    int delta = 1;
   1352e:	2301      	movs	r3, #1
   13530:	627b      	str	r3, [r7, #36]	; 0x24
    if (type == RSTRIP) {
   13532:	68fb      	ldr	r3, [r7, #12]
   13534:	2b01      	cmp	r3, #1
   13536:	d105      	bne.n	13544 <str_uni_strip+0x128>
        i = orig_str_len - 1;
   13538:	697b      	ldr	r3, [r7, #20]
   1353a:	3b01      	subs	r3, #1
   1353c:	62bb      	str	r3, [r7, #40]	; 0x28
        delta = -1;
   1353e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   13542:	627b      	str	r3, [r7, #36]	; 0x24
    }
    for (size_t len = orig_str_len; len > 0; len--) {
   13544:	697b      	ldr	r3, [r7, #20]
   13546:	623b      	str	r3, [r7, #32]
   13548:	e030      	b.n	135ac <str_uni_strip+0x190>
        if (find_subbytes(chars_to_del, chars_to_del_len, &orig_str[i], 1, 1) == NULL) {
   1354a:	6bba      	ldr	r2, [r7, #56]	; 0x38
   1354c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1354e:	441a      	add	r2, r3
   13550:	2301      	movs	r3, #1
   13552:	9300      	str	r3, [sp, #0]
   13554:	2301      	movs	r3, #1
   13556:	6c39      	ldr	r1, [r7, #64]	; 0x40
   13558:	6c78      	ldr	r0, [r7, #68]	; 0x44
   1355a:	f7ff f879 	bl	12650 <find_subbytes>
   1355e:	4603      	mov	r3, r0
   13560:	2b00      	cmp	r3, #0
   13562:	d11c      	bne.n	1359e <str_uni_strip+0x182>
            if (!first_good_char_pos_set) {
   13564:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
   13568:	f083 0301 	eor.w	r3, r3, #1
   1356c:	b2db      	uxtb	r3, r3
   1356e:	2b00      	cmp	r3, #0
   13570:	d013      	beq.n	1359a <str_uni_strip+0x17e>
                first_good_char_pos_set = true;
   13572:	2301      	movs	r3, #1
   13574:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
                first_good_char_pos = i;
   13578:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1357a:	637b      	str	r3, [r7, #52]	; 0x34
                if (type == LSTRIP) {
   1357c:	68fb      	ldr	r3, [r7, #12]
   1357e:	2b00      	cmp	r3, #0
   13580:	d103      	bne.n	1358a <str_uni_strip+0x16e>
                    last_good_char_pos = orig_str_len - 1;
   13582:	697b      	ldr	r3, [r7, #20]
   13584:	3b01      	subs	r3, #1
   13586:	62fb      	str	r3, [r7, #44]	; 0x2c
                    break;
   13588:	e013      	b.n	135b2 <str_uni_strip+0x196>
                } else if (type == RSTRIP) {
   1358a:	68fb      	ldr	r3, [r7, #12]
   1358c:	2b01      	cmp	r3, #1
   1358e:	d104      	bne.n	1359a <str_uni_strip+0x17e>
                    first_good_char_pos = 0;
   13590:	2300      	movs	r3, #0
   13592:	637b      	str	r3, [r7, #52]	; 0x34
                    last_good_char_pos = i;
   13594:	6abb      	ldr	r3, [r7, #40]	; 0x28
   13596:	62fb      	str	r3, [r7, #44]	; 0x2c
                    break;
   13598:	e00b      	b.n	135b2 <str_uni_strip+0x196>
                }
            }
            last_good_char_pos = i;
   1359a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1359c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        i += delta;
   1359e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   135a0:	6aba      	ldr	r2, [r7, #40]	; 0x28
   135a2:	4413      	add	r3, r2
   135a4:	62bb      	str	r3, [r7, #40]	; 0x28
    for (size_t len = orig_str_len; len > 0; len--) {
   135a6:	6a3b      	ldr	r3, [r7, #32]
   135a8:	3b01      	subs	r3, #1
   135aa:	623b      	str	r3, [r7, #32]
   135ac:	6a3b      	ldr	r3, [r7, #32]
   135ae:	2b00      	cmp	r3, #0
   135b0:	d1cb      	bne.n	1354a <str_uni_strip+0x12e>
    }

    if (!first_good_char_pos_set) {
   135b2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
   135b6:	f083 0301 	eor.w	r3, r3, #1
   135ba:	b2db      	uxtb	r3, r3
   135bc:	2b00      	cmp	r3, #0
   135be:	d007      	beq.n	135d0 <str_uni_strip+0x1b4>
        // string is all whitespace, return ''
        if (self_type == &mp_type_str) {
   135c0:	69fb      	ldr	r3, [r7, #28]
   135c2:	4a1f      	ldr	r2, [pc, #124]	; (13640 <str_uni_strip+0x224>)
   135c4:	4293      	cmp	r3, r2
   135c6:	d101      	bne.n	135cc <str_uni_strip+0x1b0>
            return MP_OBJ_NEW_QSTR(MP_QSTR_);
   135c8:	2306      	movs	r3, #6
   135ca:	e02b      	b.n	13624 <str_uni_strip+0x208>
        } else {
            return mp_const_empty_bytes;
   135cc:	4b1d      	ldr	r3, [pc, #116]	; (13644 <str_uni_strip+0x228>)
   135ce:	e029      	b.n	13624 <str_uni_strip+0x208>
        }
    }

    assert(last_good_char_pos >= first_good_char_pos);
   135d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   135d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   135d4:	429a      	cmp	r2, r3
   135d6:	d206      	bcs.n	135e6 <str_uni_strip+0x1ca>
   135d8:	4b1b      	ldr	r3, [pc, #108]	; (13648 <str_uni_strip+0x22c>)
   135da:	4a16      	ldr	r2, [pc, #88]	; (13634 <str_uni_strip+0x218>)
   135dc:	f240 3147 	movw	r1, #839	; 0x347
   135e0:	4815      	ldr	r0, [pc, #84]	; (13638 <str_uni_strip+0x21c>)
   135e2:	f007 fdeb 	bl	1b1bc <__assert_func>
    //+1 to accommodate the last character
    size_t stripped_len = last_good_char_pos - first_good_char_pos + 1;
   135e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   135e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   135ea:	1ad3      	subs	r3, r2, r3
   135ec:	3301      	adds	r3, #1
   135ee:	61bb      	str	r3, [r7, #24]
    if (stripped_len == orig_str_len) {
   135f0:	697b      	ldr	r3, [r7, #20]
   135f2:	69ba      	ldr	r2, [r7, #24]
   135f4:	429a      	cmp	r2, r3
   135f6:	d10c      	bne.n	13612 <str_uni_strip+0x1f6>
        // If nothing was stripped, don't bother to dup original string
        // TODO: watch out for this case when we'll get to bytearray.strip()
        assert(first_good_char_pos == 0);
   135f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   135fa:	2b00      	cmp	r3, #0
   135fc:	d006      	beq.n	1360c <str_uni_strip+0x1f0>
   135fe:	4b13      	ldr	r3, [pc, #76]	; (1364c <str_uni_strip+0x230>)
   13600:	4a0c      	ldr	r2, [pc, #48]	; (13634 <str_uni_strip+0x218>)
   13602:	f240 314d 	movw	r1, #845	; 0x34d
   13606:	480c      	ldr	r0, [pc, #48]	; (13638 <str_uni_strip+0x21c>)
   13608:	f007 fdd8 	bl	1b1bc <__assert_func>
        return args[0];
   1360c:	687b      	ldr	r3, [r7, #4]
   1360e:	681b      	ldr	r3, [r3, #0]
   13610:	e008      	b.n	13624 <str_uni_strip+0x208>
    }
    return mp_obj_new_str_of_type(self_type, orig_str + first_good_char_pos, stripped_len);
   13612:	6bba      	ldr	r2, [r7, #56]	; 0x38
   13614:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   13616:	4413      	add	r3, r2
   13618:	69ba      	ldr	r2, [r7, #24]
   1361a:	4619      	mov	r1, r3
   1361c:	69f8      	ldr	r0, [r7, #28]
   1361e:	f001 fd36 	bl	1508e <mp_obj_new_str_of_type>
   13622:	4603      	mov	r3, r0
}
   13624:	4618      	mov	r0, r3
   13626:	3748      	adds	r7, #72	; 0x48
   13628:	46bd      	mov	sp, r7
   1362a:	bd80      	pop	{r7, pc}
   1362c:	000126c3 	.word	0x000126c3
   13630:	00021528 	.word	0x00021528
   13634:	00021a28 	.word	0x00021a28
   13638:	0002148c 	.word	0x0002148c
   1363c:	00021a38 	.word	0x00021a38
   13640:	00021964 	.word	0x00021964
   13644:	000219e0 	.word	0x000219e0
   13648:	00021620 	.word	0x00021620
   1364c:	0002164c 	.word	0x0002164c

00013650 <str_strip>:

STATIC mp_obj_t str_strip(size_t n_args, const mp_obj_t *args) {
   13650:	b580      	push	{r7, lr}
   13652:	b082      	sub	sp, #8
   13654:	af00      	add	r7, sp, #0
   13656:	6078      	str	r0, [r7, #4]
   13658:	6039      	str	r1, [r7, #0]
    return str_uni_strip(STRIP, n_args, args);
   1365a:	683a      	ldr	r2, [r7, #0]
   1365c:	6879      	ldr	r1, [r7, #4]
   1365e:	2002      	movs	r0, #2
   13660:	f7ff fedc 	bl	1341c <str_uni_strip>
   13664:	4603      	mov	r3, r0
}
   13666:	4618      	mov	r0, r3
   13668:	3708      	adds	r7, #8
   1366a:	46bd      	mov	sp, r7
   1366c:	bd80      	pop	{r7, pc}

0001366e <str_lstrip>:
MP_DEFINE_CONST_FUN_OBJ_VAR_BETWEEN(str_strip_obj, 1, 2, str_strip);

STATIC mp_obj_t str_lstrip(size_t n_args, const mp_obj_t *args) {
   1366e:	b580      	push	{r7, lr}
   13670:	b082      	sub	sp, #8
   13672:	af00      	add	r7, sp, #0
   13674:	6078      	str	r0, [r7, #4]
   13676:	6039      	str	r1, [r7, #0]
    return str_uni_strip(LSTRIP, n_args, args);
   13678:	683a      	ldr	r2, [r7, #0]
   1367a:	6879      	ldr	r1, [r7, #4]
   1367c:	2000      	movs	r0, #0
   1367e:	f7ff fecd 	bl	1341c <str_uni_strip>
   13682:	4603      	mov	r3, r0
}
   13684:	4618      	mov	r0, r3
   13686:	3708      	adds	r7, #8
   13688:	46bd      	mov	sp, r7
   1368a:	bd80      	pop	{r7, pc}

0001368c <str_rstrip>:
MP_DEFINE_CONST_FUN_OBJ_VAR_BETWEEN(str_lstrip_obj, 1, 2, str_lstrip);

STATIC mp_obj_t str_rstrip(size_t n_args, const mp_obj_t *args) {
   1368c:	b580      	push	{r7, lr}
   1368e:	b082      	sub	sp, #8
   13690:	af00      	add	r7, sp, #0
   13692:	6078      	str	r0, [r7, #4]
   13694:	6039      	str	r1, [r7, #0]
    return str_uni_strip(RSTRIP, n_args, args);
   13696:	683a      	ldr	r2, [r7, #0]
   13698:	6879      	ldr	r1, [r7, #4]
   1369a:	2001      	movs	r0, #1
   1369c:	f7ff febe 	bl	1341c <str_uni_strip>
   136a0:	4603      	mov	r3, r0
}
   136a2:	4618      	mov	r0, r3
   136a4:	3708      	adds	r7, #8
   136a6:	46bd      	mov	sp, r7
   136a8:	bd80      	pop	{r7, pc}

000136aa <str_to_int>:
MP_DEFINE_CONST_FUN_OBJ_2(str_center_obj, str_center);
#endif

// Takes an int arg, but only parses unsigned numbers, and only changes
// *num if at least one digit was parsed.
STATIC const char *str_to_int(const char *str, const char *top, int *num) {
   136aa:	b480      	push	{r7}
   136ac:	b085      	sub	sp, #20
   136ae:	af00      	add	r7, sp, #0
   136b0:	60f8      	str	r0, [r7, #12]
   136b2:	60b9      	str	r1, [r7, #8]
   136b4:	607a      	str	r2, [r7, #4]
    if (str < top && '0' <= *str && *str <= '9') {
   136b6:	68fa      	ldr	r2, [r7, #12]
   136b8:	68bb      	ldr	r3, [r7, #8]
   136ba:	429a      	cmp	r2, r3
   136bc:	d226      	bcs.n	1370c <str_to_int+0x62>
   136be:	68fb      	ldr	r3, [r7, #12]
   136c0:	781b      	ldrb	r3, [r3, #0]
   136c2:	2b2f      	cmp	r3, #47	; 0x2f
   136c4:	d922      	bls.n	1370c <str_to_int+0x62>
   136c6:	68fb      	ldr	r3, [r7, #12]
   136c8:	781b      	ldrb	r3, [r3, #0]
   136ca:	2b39      	cmp	r3, #57	; 0x39
   136cc:	d81e      	bhi.n	1370c <str_to_int+0x62>
        *num = 0;
   136ce:	687b      	ldr	r3, [r7, #4]
   136d0:	2200      	movs	r2, #0
   136d2:	601a      	str	r2, [r3, #0]
        do {
            *num = *num * 10 + (*str - '0');
   136d4:	687b      	ldr	r3, [r7, #4]
   136d6:	681a      	ldr	r2, [r3, #0]
   136d8:	4613      	mov	r3, r2
   136da:	009b      	lsls	r3, r3, #2
   136dc:	4413      	add	r3, r2
   136de:	005b      	lsls	r3, r3, #1
   136e0:	461a      	mov	r2, r3
   136e2:	68fb      	ldr	r3, [r7, #12]
   136e4:	781b      	ldrb	r3, [r3, #0]
   136e6:	3b30      	subs	r3, #48	; 0x30
   136e8:	441a      	add	r2, r3
   136ea:	687b      	ldr	r3, [r7, #4]
   136ec:	601a      	str	r2, [r3, #0]
            str++;
   136ee:	68fb      	ldr	r3, [r7, #12]
   136f0:	3301      	adds	r3, #1
   136f2:	60fb      	str	r3, [r7, #12]
        }
        while (str < top && '0' <= *str && *str <= '9');
   136f4:	68fa      	ldr	r2, [r7, #12]
   136f6:	68bb      	ldr	r3, [r7, #8]
   136f8:	429a      	cmp	r2, r3
   136fa:	d207      	bcs.n	1370c <str_to_int+0x62>
   136fc:	68fb      	ldr	r3, [r7, #12]
   136fe:	781b      	ldrb	r3, [r3, #0]
   13700:	2b2f      	cmp	r3, #47	; 0x2f
   13702:	d903      	bls.n	1370c <str_to_int+0x62>
   13704:	68fb      	ldr	r3, [r7, #12]
   13706:	781b      	ldrb	r3, [r3, #0]
   13708:	2b39      	cmp	r3, #57	; 0x39
   1370a:	d9e3      	bls.n	136d4 <str_to_int+0x2a>
    }
    return str;
   1370c:	68fb      	ldr	r3, [r7, #12]
}
   1370e:	4618      	mov	r0, r3
   13710:	3714      	adds	r7, #20
   13712:	46bd      	mov	sp, r7
   13714:	f85d 7b04 	ldr.w	r7, [sp], #4
   13718:	4770      	bx	lr

0001371a <isalignment>:

STATIC bool isalignment(char ch) {
   1371a:	b580      	push	{r7, lr}
   1371c:	b082      	sub	sp, #8
   1371e:	af00      	add	r7, sp, #0
   13720:	4603      	mov	r3, r0
   13722:	71fb      	strb	r3, [r7, #7]
    return ch && strchr("<>=^", ch) != NULL;
   13724:	79fb      	ldrb	r3, [r7, #7]
   13726:	2b00      	cmp	r3, #0
   13728:	d009      	beq.n	1373e <isalignment+0x24>
   1372a:	79fb      	ldrb	r3, [r7, #7]
   1372c:	4619      	mov	r1, r3
   1372e:	4808      	ldr	r0, [pc, #32]	; (13750 <isalignment+0x36>)
   13730:	f008 fb76 	bl	1be20 <strchr>
   13734:	4603      	mov	r3, r0
   13736:	2b00      	cmp	r3, #0
   13738:	d001      	beq.n	1373e <isalignment+0x24>
   1373a:	2301      	movs	r3, #1
   1373c:	e000      	b.n	13740 <isalignment+0x26>
   1373e:	2300      	movs	r3, #0
   13740:	f003 0301 	and.w	r3, r3, #1
   13744:	b2db      	uxtb	r3, r3
}
   13746:	4618      	mov	r0, r3
   13748:	3708      	adds	r7, #8
   1374a:	46bd      	mov	sp, r7
   1374c:	bd80      	pop	{r7, pc}
   1374e:	bf00      	nop
   13750:	0002168c 	.word	0x0002168c

00013754 <istype>:

STATIC bool istype(char ch) {
   13754:	b580      	push	{r7, lr}
   13756:	b082      	sub	sp, #8
   13758:	af00      	add	r7, sp, #0
   1375a:	4603      	mov	r3, r0
   1375c:	71fb      	strb	r3, [r7, #7]
    return ch && strchr("bcdeEfFgGnosxX%", ch) != NULL;
   1375e:	79fb      	ldrb	r3, [r7, #7]
   13760:	2b00      	cmp	r3, #0
   13762:	d009      	beq.n	13778 <istype+0x24>
   13764:	79fb      	ldrb	r3, [r7, #7]
   13766:	4619      	mov	r1, r3
   13768:	4807      	ldr	r0, [pc, #28]	; (13788 <istype+0x34>)
   1376a:	f008 fb59 	bl	1be20 <strchr>
   1376e:	4603      	mov	r3, r0
   13770:	2b00      	cmp	r3, #0
   13772:	d001      	beq.n	13778 <istype+0x24>
   13774:	2301      	movs	r3, #1
   13776:	e000      	b.n	1377a <istype+0x26>
   13778:	2300      	movs	r3, #0
   1377a:	f003 0301 	and.w	r3, r3, #1
   1377e:	b2db      	uxtb	r3, r3
}
   13780:	4618      	mov	r0, r3
   13782:	3708      	adds	r7, #8
   13784:	46bd      	mov	sp, r7
   13786:	bd80      	pop	{r7, pc}
   13788:	00021694 	.word	0x00021694

0001378c <arg_looks_integer>:

STATIC bool arg_looks_integer(mp_obj_t arg) {
   1378c:	b580      	push	{r7, lr}
   1378e:	b082      	sub	sp, #8
   13790:	af00      	add	r7, sp, #0
   13792:	6078      	str	r0, [r7, #4]
    return MP_OBJ_IS_TYPE(arg, &mp_type_bool) || MP_OBJ_IS_INT(arg);
   13794:	6878      	ldr	r0, [r7, #4]
   13796:	f7fe fc6d 	bl	12074 <MP_OBJ_IS_OBJ>
   1379a:	4603      	mov	r3, r0
   1379c:	2b00      	cmp	r3, #0
   1379e:	d004      	beq.n	137aa <arg_looks_integer+0x1e>
   137a0:	687b      	ldr	r3, [r7, #4]
   137a2:	681b      	ldr	r3, [r3, #0]
   137a4:	4a0e      	ldr	r2, [pc, #56]	; (137e0 <arg_looks_integer+0x54>)
   137a6:	4293      	cmp	r3, r2
   137a8:	d010      	beq.n	137cc <arg_looks_integer+0x40>
   137aa:	6878      	ldr	r0, [r7, #4]
   137ac:	f7fe fc3e 	bl	1202c <MP_OBJ_IS_SMALL_INT>
   137b0:	4603      	mov	r3, r0
   137b2:	2b00      	cmp	r3, #0
   137b4:	d10a      	bne.n	137cc <arg_looks_integer+0x40>
   137b6:	6878      	ldr	r0, [r7, #4]
   137b8:	f7fe fc5c 	bl	12074 <MP_OBJ_IS_OBJ>
   137bc:	4603      	mov	r3, r0
   137be:	2b00      	cmp	r3, #0
   137c0:	d006      	beq.n	137d0 <arg_looks_integer+0x44>
   137c2:	687b      	ldr	r3, [r7, #4]
   137c4:	681b      	ldr	r3, [r3, #0]
   137c6:	4a07      	ldr	r2, [pc, #28]	; (137e4 <arg_looks_integer+0x58>)
   137c8:	4293      	cmp	r3, r2
   137ca:	d101      	bne.n	137d0 <arg_looks_integer+0x44>
   137cc:	2301      	movs	r3, #1
   137ce:	e000      	b.n	137d2 <arg_looks_integer+0x46>
   137d0:	2300      	movs	r3, #0
   137d2:	f003 0301 	and.w	r3, r3, #1
   137d6:	b2db      	uxtb	r3, r3
}
   137d8:	4618      	mov	r0, r3
   137da:	3708      	adds	r7, #8
   137dc:	46bd      	mov	sp, r7
   137de:	bd80      	pop	{r7, pc}
   137e0:	0001f980 	.word	0x0001f980
   137e4:	00020d10 	.word	0x00020d10

000137e8 <arg_looks_numeric>:

STATIC bool arg_looks_numeric(mp_obj_t arg) {
   137e8:	b580      	push	{r7, lr}
   137ea:	b082      	sub	sp, #8
   137ec:	af00      	add	r7, sp, #0
   137ee:	6078      	str	r0, [r7, #4]
    return arg_looks_integer(arg)
   137f0:	6878      	ldr	r0, [r7, #4]
   137f2:	f7ff ffcb 	bl	1378c <arg_looks_integer>
   137f6:	4603      	mov	r3, r0
#if MICROPY_PY_BUILTINS_FLOAT
        || mp_obj_is_float(arg)
#endif
    ;
}
   137f8:	4618      	mov	r0, r3
   137fa:	3708      	adds	r7, #8
   137fc:	46bd      	mov	sp, r7
   137fe:	bd80      	pop	{r7, pc}

00013800 <arg_as_int>:

STATIC mp_obj_t arg_as_int(mp_obj_t arg) {
   13800:	b480      	push	{r7}
   13802:	b083      	sub	sp, #12
   13804:	af00      	add	r7, sp, #0
   13806:	6078      	str	r0, [r7, #4]
#if MICROPY_PY_BUILTINS_FLOAT
    if (mp_obj_is_float(arg)) {
        return mp_obj_new_int_from_float(mp_obj_float_get(arg));
    }
#endif
    return arg;
   13808:	687b      	ldr	r3, [r7, #4]
}
   1380a:	4618      	mov	r0, r3
   1380c:	370c      	adds	r7, #12
   1380e:	46bd      	mov	sp, r7
   13810:	f85d 7b04 	ldr.w	r7, [sp], #4
   13814:	4770      	bx	lr

00013816 <terse_str_format_value_error>:

#if MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE
STATIC NORETURN void terse_str_format_value_error(void) {
   13816:	b580      	push	{r7, lr}
   13818:	af00      	add	r7, sp, #0
    mp_raise_ValueError("bad format string");
   1381a:	4801      	ldr	r0, [pc, #4]	; (13820 <terse_str_format_value_error+0xa>)
   1381c:	f7f9 fb77 	bl	cf0e <mp_raise_ValueError>
   13820:	000216a4 	.word	0x000216a4

00013824 <mp_obj_str_format_helper>:
#else
// define to nothing to improve coverage
#define terse_str_format_value_error()
#endif

STATIC vstr_t mp_obj_str_format_helper(const char *str, const char *top, int *arg_i, size_t n_args, const mp_obj_t *args, mp_map_t *kwargs) {
   13824:	b590      	push	{r4, r7, lr}
   13826:	b0ad      	sub	sp, #180	; 0xb4
   13828:	af04      	add	r7, sp, #16
   1382a:	60f8      	str	r0, [r7, #12]
   1382c:	60b9      	str	r1, [r7, #8]
   1382e:	607a      	str	r2, [r7, #4]
   13830:	603b      	str	r3, [r7, #0]
    vstr_t vstr;
    mp_print_t print;
    vstr_init_print(&vstr, 16, &print);
   13832:	f107 024c 	add.w	r2, r7, #76	; 0x4c
   13836:	f107 0354 	add.w	r3, r7, #84	; 0x54
   1383a:	2110      	movs	r1, #16
   1383c:	4618      	mov	r0, r3
   1383e:	f7ed fd9c 	bl	137a <vstr_init_print>

    for (; str < top; str++) {
   13842:	f000 bc91 	b.w	14168 <mp_obj_str_format_helper+0x944>
        if (*str == '}') {
   13846:	68bb      	ldr	r3, [r7, #8]
   13848:	781b      	ldrb	r3, [r3, #0]
   1384a:	2b7d      	cmp	r3, #125	; 0x7d
   1384c:	d114      	bne.n	13878 <mp_obj_str_format_helper+0x54>
            str++;
   1384e:	68bb      	ldr	r3, [r7, #8]
   13850:	3301      	adds	r3, #1
   13852:	60bb      	str	r3, [r7, #8]
            if (str < top && *str == '}') {
   13854:	68ba      	ldr	r2, [r7, #8]
   13856:	687b      	ldr	r3, [r7, #4]
   13858:	429a      	cmp	r2, r3
   1385a:	d20b      	bcs.n	13874 <mp_obj_str_format_helper+0x50>
   1385c:	68bb      	ldr	r3, [r7, #8]
   1385e:	781b      	ldrb	r3, [r3, #0]
   13860:	2b7d      	cmp	r3, #125	; 0x7d
   13862:	d107      	bne.n	13874 <mp_obj_str_format_helper+0x50>
                vstr_add_byte(&vstr, '}');
   13864:	f107 0354 	add.w	r3, r7, #84	; 0x54
   13868:	217d      	movs	r1, #125	; 0x7d
   1386a:	4618      	mov	r0, r3
   1386c:	f7ed fe8a 	bl	1584 <vstr_add_byte>
                continue;
   13870:	f000 bc77 	b.w	14162 <mp_obj_str_format_helper+0x93e>
            }
            if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
                terse_str_format_value_error();
   13874:	f7ff ffcf 	bl	13816 <terse_str_format_value_error>
            } else {
                mp_raise_ValueError("single '}' encountered in format string");
            }
        }
        if (*str != '{') {
   13878:	68bb      	ldr	r3, [r7, #8]
   1387a:	781b      	ldrb	r3, [r3, #0]
   1387c:	2b7b      	cmp	r3, #123	; 0x7b
   1387e:	d009      	beq.n	13894 <mp_obj_str_format_helper+0x70>
            vstr_add_byte(&vstr, *str);
   13880:	68bb      	ldr	r3, [r7, #8]
   13882:	781a      	ldrb	r2, [r3, #0]
   13884:	f107 0354 	add.w	r3, r7, #84	; 0x54
   13888:	4611      	mov	r1, r2
   1388a:	4618      	mov	r0, r3
   1388c:	f7ed fe7a 	bl	1584 <vstr_add_byte>
            continue;
   13890:	f000 bc67 	b.w	14162 <mp_obj_str_format_helper+0x93e>
        }

        str++;
   13894:	68bb      	ldr	r3, [r7, #8]
   13896:	3301      	adds	r3, #1
   13898:	60bb      	str	r3, [r7, #8]
        if (str < top && *str == '{') {
   1389a:	68ba      	ldr	r2, [r7, #8]
   1389c:	687b      	ldr	r3, [r7, #4]
   1389e:	429a      	cmp	r2, r3
   138a0:	d20b      	bcs.n	138ba <mp_obj_str_format_helper+0x96>
   138a2:	68bb      	ldr	r3, [r7, #8]
   138a4:	781b      	ldrb	r3, [r3, #0]
   138a6:	2b7b      	cmp	r3, #123	; 0x7b
   138a8:	d107      	bne.n	138ba <mp_obj_str_format_helper+0x96>
            vstr_add_byte(&vstr, '{');
   138aa:	f107 0354 	add.w	r3, r7, #84	; 0x54
   138ae:	217b      	movs	r1, #123	; 0x7b
   138b0:	4618      	mov	r0, r3
   138b2:	f7ed fe67 	bl	1584 <vstr_add_byte>
            continue;
   138b6:	f000 bc54 	b.w	14162 <mp_obj_str_format_helper+0x93e>
        }

        // replacement_field ::=  "{" [field_name] ["!" conversion] [":" format_spec] "}"

        const char *field_name = NULL;
   138ba:	2300      	movs	r3, #0
   138bc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        const char *field_name_top = NULL;
   138c0:	2300      	movs	r3, #0
   138c2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        char conversion = '\0';
   138c6:	2300      	movs	r3, #0
   138c8:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
        const char *format_spec = NULL;
   138cc:	2300      	movs	r3, #0
   138ce:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

        if (str < top && *str != '}' && *str != '!' && *str != ':') {
   138d2:	68ba      	ldr	r2, [r7, #8]
   138d4:	687b      	ldr	r3, [r7, #4]
   138d6:	429a      	cmp	r2, r3
   138d8:	d225      	bcs.n	13926 <mp_obj_str_format_helper+0x102>
   138da:	68bb      	ldr	r3, [r7, #8]
   138dc:	781b      	ldrb	r3, [r3, #0]
   138de:	2b7d      	cmp	r3, #125	; 0x7d
   138e0:	d021      	beq.n	13926 <mp_obj_str_format_helper+0x102>
   138e2:	68bb      	ldr	r3, [r7, #8]
   138e4:	781b      	ldrb	r3, [r3, #0]
   138e6:	2b21      	cmp	r3, #33	; 0x21
   138e8:	d01d      	beq.n	13926 <mp_obj_str_format_helper+0x102>
   138ea:	68bb      	ldr	r3, [r7, #8]
   138ec:	781b      	ldrb	r3, [r3, #0]
   138ee:	2b3a      	cmp	r3, #58	; 0x3a
   138f0:	d019      	beq.n	13926 <mp_obj_str_format_helper+0x102>
            field_name = (const char *)str;
   138f2:	68bb      	ldr	r3, [r7, #8]
   138f4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
            while (str < top && *str != '}' && *str != '!' && *str != ':') {
   138f8:	e002      	b.n	13900 <mp_obj_str_format_helper+0xdc>
                ++str;
   138fa:	68bb      	ldr	r3, [r7, #8]
   138fc:	3301      	adds	r3, #1
   138fe:	60bb      	str	r3, [r7, #8]
            while (str < top && *str != '}' && *str != '!' && *str != ':') {
   13900:	68ba      	ldr	r2, [r7, #8]
   13902:	687b      	ldr	r3, [r7, #4]
   13904:	429a      	cmp	r2, r3
   13906:	d20b      	bcs.n	13920 <mp_obj_str_format_helper+0xfc>
   13908:	68bb      	ldr	r3, [r7, #8]
   1390a:	781b      	ldrb	r3, [r3, #0]
   1390c:	2b7d      	cmp	r3, #125	; 0x7d
   1390e:	d007      	beq.n	13920 <mp_obj_str_format_helper+0xfc>
   13910:	68bb      	ldr	r3, [r7, #8]
   13912:	781b      	ldrb	r3, [r3, #0]
   13914:	2b21      	cmp	r3, #33	; 0x21
   13916:	d003      	beq.n	13920 <mp_obj_str_format_helper+0xfc>
   13918:	68bb      	ldr	r3, [r7, #8]
   1391a:	781b      	ldrb	r3, [r3, #0]
   1391c:	2b3a      	cmp	r3, #58	; 0x3a
   1391e:	d1ec      	bne.n	138fa <mp_obj_str_format_helper+0xd6>
            }
            field_name_top = (const char *)str;
   13920:	68bb      	ldr	r3, [r7, #8]
   13922:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        }

        // conversion ::=  "r" | "s"

        if (str < top && *str == '!') {
   13926:	68ba      	ldr	r2, [r7, #8]
   13928:	687b      	ldr	r3, [r7, #4]
   1392a:	429a      	cmp	r2, r3
   1392c:	d21b      	bcs.n	13966 <mp_obj_str_format_helper+0x142>
   1392e:	68bb      	ldr	r3, [r7, #8]
   13930:	781b      	ldrb	r3, [r3, #0]
   13932:	2b21      	cmp	r3, #33	; 0x21
   13934:	d117      	bne.n	13966 <mp_obj_str_format_helper+0x142>
            str++;
   13936:	68bb      	ldr	r3, [r7, #8]
   13938:	3301      	adds	r3, #1
   1393a:	60bb      	str	r3, [r7, #8]
            if (str < top && (*str == 'r' || *str == 's')) {
   1393c:	68ba      	ldr	r2, [r7, #8]
   1393e:	687b      	ldr	r3, [r7, #4]
   13940:	429a      	cmp	r2, r3
   13942:	d20e      	bcs.n	13962 <mp_obj_str_format_helper+0x13e>
   13944:	68bb      	ldr	r3, [r7, #8]
   13946:	781b      	ldrb	r3, [r3, #0]
   13948:	2b72      	cmp	r3, #114	; 0x72
   1394a:	d003      	beq.n	13954 <mp_obj_str_format_helper+0x130>
   1394c:	68bb      	ldr	r3, [r7, #8]
   1394e:	781b      	ldrb	r3, [r3, #0]
   13950:	2b73      	cmp	r3, #115	; 0x73
   13952:	d106      	bne.n	13962 <mp_obj_str_format_helper+0x13e>
                conversion = *str++;
   13954:	68bb      	ldr	r3, [r7, #8]
   13956:	1c5a      	adds	r2, r3, #1
   13958:	60ba      	str	r2, [r7, #8]
   1395a:	781b      	ldrb	r3, [r3, #0]
   1395c:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
   13960:	e001      	b.n	13966 <mp_obj_str_format_helper+0x142>
            } else {
                if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
                    terse_str_format_value_error();
   13962:	f7ff ff58 	bl	13816 <terse_str_format_value_error>
                    }
                }
            }
        }

        if (str < top && *str == ':') {
   13966:	68ba      	ldr	r2, [r7, #8]
   13968:	687b      	ldr	r3, [r7, #4]
   1396a:	429a      	cmp	r2, r3
   1396c:	d231      	bcs.n	139d2 <mp_obj_str_format_helper+0x1ae>
   1396e:	68bb      	ldr	r3, [r7, #8]
   13970:	781b      	ldrb	r3, [r3, #0]
   13972:	2b3a      	cmp	r3, #58	; 0x3a
   13974:	d12d      	bne.n	139d2 <mp_obj_str_format_helper+0x1ae>
            str++;
   13976:	68bb      	ldr	r3, [r7, #8]
   13978:	3301      	adds	r3, #1
   1397a:	60bb      	str	r3, [r7, #8]
            // {:} is the same as {}, which is the same as {!s}
            // This makes a difference when passing in a True or False
            // '{}'.format(True) returns 'True'
            // '{:d}'.format(True) returns '1'
            // So we treat {:} as {} and this later gets treated to be {!s}
            if (*str != '}') {
   1397c:	68bb      	ldr	r3, [r7, #8]
   1397e:	781b      	ldrb	r3, [r3, #0]
   13980:	2b7d      	cmp	r3, #125	; 0x7d
   13982:	d026      	beq.n	139d2 <mp_obj_str_format_helper+0x1ae>
                format_spec = str;
   13984:	68bb      	ldr	r3, [r7, #8]
   13986:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
                for (int nest = 1; str < top;) {
   1398a:	2301      	movs	r3, #1
   1398c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   13990:	e019      	b.n	139c6 <mp_obj_str_format_helper+0x1a2>
                    if (*str == '{') {
   13992:	68bb      	ldr	r3, [r7, #8]
   13994:	781b      	ldrb	r3, [r3, #0]
   13996:	2b7b      	cmp	r3, #123	; 0x7b
   13998:	d105      	bne.n	139a6 <mp_obj_str_format_helper+0x182>
                        ++nest;
   1399a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
   1399e:	3301      	adds	r3, #1
   139a0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   139a4:	e00c      	b.n	139c0 <mp_obj_str_format_helper+0x19c>
                    } else if (*str == '}') {
   139a6:	68bb      	ldr	r3, [r7, #8]
   139a8:	781b      	ldrb	r3, [r3, #0]
   139aa:	2b7d      	cmp	r3, #125	; 0x7d
   139ac:	d108      	bne.n	139c0 <mp_obj_str_format_helper+0x19c>
                        if (--nest == 0) {
   139ae:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
   139b2:	3b01      	subs	r3, #1
   139b4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   139b8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
   139bc:	2b00      	cmp	r3, #0
   139be:	d007      	beq.n	139d0 <mp_obj_str_format_helper+0x1ac>
                            break;
                        }
                    }
                    ++str;
   139c0:	68bb      	ldr	r3, [r7, #8]
   139c2:	3301      	adds	r3, #1
   139c4:	60bb      	str	r3, [r7, #8]
                for (int nest = 1; str < top;) {
   139c6:	68ba      	ldr	r2, [r7, #8]
   139c8:	687b      	ldr	r3, [r7, #4]
   139ca:	429a      	cmp	r2, r3
   139cc:	d3e1      	bcc.n	13992 <mp_obj_str_format_helper+0x16e>
   139ce:	e000      	b.n	139d2 <mp_obj_str_format_helper+0x1ae>
                            break;
   139d0:	bf00      	nop
                }
            }
        }
        if (str >= top) {
   139d2:	68ba      	ldr	r2, [r7, #8]
   139d4:	687b      	ldr	r3, [r7, #4]
   139d6:	429a      	cmp	r2, r3
   139d8:	d301      	bcc.n	139de <mp_obj_str_format_helper+0x1ba>
            if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
                terse_str_format_value_error();
   139da:	f7ff ff1c 	bl	13816 <terse_str_format_value_error>
            } else {
                mp_raise_ValueError("unmatched '{' in format");
            }
        }
        if (*str != '}') {
   139de:	68bb      	ldr	r3, [r7, #8]
   139e0:	781b      	ldrb	r3, [r3, #0]
   139e2:	2b7d      	cmp	r3, #125	; 0x7d
   139e4:	d001      	beq.n	139ea <mp_obj_str_format_helper+0x1c6>
            if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
                terse_str_format_value_error();
   139e6:	f7ff ff16 	bl	13816 <terse_str_format_value_error>
            } else {
                mp_raise_ValueError("expected ':' after format specifier");
            }
        }

        mp_obj_t arg = mp_const_none;
   139ea:	4ba8      	ldr	r3, [pc, #672]	; (13c8c <mp_obj_str_format_helper+0x468>)
   139ec:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

        if (field_name) {
   139f0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
   139f4:	2b00      	cmp	r3, #0
   139f6:	d07b      	beq.n	13af0 <mp_obj_str_format_helper+0x2cc>
            int index = 0;
   139f8:	2300      	movs	r3, #0
   139fa:	643b      	str	r3, [r7, #64]	; 0x40
            if (MP_LIKELY(unichar_isdigit(*field_name))) {
   139fc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
   13a00:	781b      	ldrb	r3, [r3, #0]
   13a02:	4618      	mov	r0, r3
   13a04:	f7ee fce0 	bl	23c8 <unichar_isdigit>
   13a08:	4603      	mov	r3, r0
   13a0a:	2b00      	cmp	r3, #0
   13a0c:	d028      	beq.n	13a60 <mp_obj_str_format_helper+0x23c>
                if (*arg_i > 0) {
   13a0e:	683b      	ldr	r3, [r7, #0]
   13a10:	681b      	ldr	r3, [r3, #0]
   13a12:	2b00      	cmp	r3, #0
   13a14:	dd01      	ble.n	13a1a <mp_obj_str_format_helper+0x1f6>
                    if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
                        terse_str_format_value_error();
   13a16:	f7ff fefe 	bl	13816 <terse_str_format_value_error>
                    } else {
                        mp_raise_ValueError(
                            "can't switch from automatic field numbering to manual field specification");
                    }
                }
                field_name = str_to_int(field_name, field_name_top, &index);
   13a1a:	f107 0340 	add.w	r3, r7, #64	; 0x40
   13a1e:	461a      	mov	r2, r3
   13a20:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
   13a24:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
   13a28:	f7ff fe3f 	bl	136aa <str_to_int>
   13a2c:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
                if ((uint)index >= n_args - 1) {
   13a30:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
   13a34:	3b01      	subs	r3, #1
   13a36:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   13a38:	4293      	cmp	r3, r2
   13a3a:	d803      	bhi.n	13a44 <mp_obj_str_format_helper+0x220>
                    mp_raise_msg(&mp_type_IndexError, "tuple index out of range");
   13a3c:	4994      	ldr	r1, [pc, #592]	; (13c90 <mp_obj_str_format_helper+0x46c>)
   13a3e:	4895      	ldr	r0, [pc, #596]	; (13c94 <mp_obj_str_format_helper+0x470>)
   13a40:	f7f9 fa4e 	bl	cee0 <mp_raise_msg>
                }
                arg = args[index + 1];
   13a44:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   13a46:	3301      	adds	r3, #1
   13a48:	009b      	lsls	r3, r3, #2
   13a4a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
   13a4e:	4413      	add	r3, r2
   13a50:	681b      	ldr	r3, [r3, #0]
   13a52:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                *arg_i = -1;
   13a56:	683b      	ldr	r3, [r7, #0]
   13a58:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   13a5c:	601a      	str	r2, [r3, #0]
   13a5e:	e03e      	b.n	13ade <mp_obj_str_format_helper+0x2ba>
            } else {
                const char *lookup;
                for (lookup = field_name; lookup < field_name_top && *lookup != '.' && *lookup != '['; lookup++);
   13a60:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
   13a64:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   13a68:	e004      	b.n	13a74 <mp_obj_str_format_helper+0x250>
   13a6a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
   13a6e:	3301      	adds	r3, #1
   13a70:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   13a74:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
   13a78:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
   13a7c:	429a      	cmp	r2, r3
   13a7e:	d209      	bcs.n	13a94 <mp_obj_str_format_helper+0x270>
   13a80:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
   13a84:	781b      	ldrb	r3, [r3, #0]
   13a86:	2b2e      	cmp	r3, #46	; 0x2e
   13a88:	d004      	beq.n	13a94 <mp_obj_str_format_helper+0x270>
   13a8a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
   13a8e:	781b      	ldrb	r3, [r3, #0]
   13a90:	2b5b      	cmp	r3, #91	; 0x5b
   13a92:	d1ea      	bne.n	13a6a <mp_obj_str_format_helper+0x246>
                mp_obj_t field_q = mp_obj_new_str_via_qstr(field_name, lookup - field_name); // should it be via qstr?
   13a94:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
   13a98:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
   13a9c:	1ad3      	subs	r3, r2, r3
   13a9e:	4619      	mov	r1, r3
   13aa0:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
   13aa4:	f001 fb0e 	bl	150c4 <mp_obj_new_str_via_qstr>
   13aa8:	6738      	str	r0, [r7, #112]	; 0x70
                field_name = lookup;
   13aaa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
   13aae:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
                mp_map_elem_t *key_elem = mp_map_lookup(kwargs, field_q, MP_MAP_LOOKUP);
   13ab2:	2200      	movs	r2, #0
   13ab4:	6f39      	ldr	r1, [r7, #112]	; 0x70
   13ab6:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
   13aba:	f7f9 fc9f 	bl	d3fc <mp_map_lookup>
   13abe:	66f8      	str	r0, [r7, #108]	; 0x6c
                if (key_elem == NULL) {
   13ac0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   13ac2:	2b00      	cmp	r3, #0
   13ac4:	d107      	bne.n	13ad6 <mp_obj_str_format_helper+0x2b2>
                    nlr_raise(mp_obj_new_exception_arg1(&mp_type_KeyError, field_q));
   13ac6:	6f39      	ldr	r1, [r7, #112]	; 0x70
   13ac8:	4873      	ldr	r0, [pc, #460]	; (13c98 <mp_obj_str_format_helper+0x474>)
   13aca:	f7fb fc5d 	bl	f388 <mp_obj_new_exception_arg1>
   13ace:	4603      	mov	r3, r0
   13ad0:	4618      	mov	r0, r3
   13ad2:	f7ec fc05 	bl	2e0 <nlr_jump>
                }
                arg = key_elem->value;
   13ad6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   13ad8:	685b      	ldr	r3, [r3, #4]
   13ada:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
            }
            if (field_name < field_name_top) {
   13ade:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
   13ae2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
   13ae6:	429a      	cmp	r2, r3
   13ae8:	d223      	bcs.n	13b32 <mp_obj_str_format_helper+0x30e>
                mp_raise_NotImplementedError("attributes not supported yet");
   13aea:	486c      	ldr	r0, [pc, #432]	; (13c9c <mp_obj_str_format_helper+0x478>)
   13aec:	f7f9 fa36 	bl	cf5c <mp_raise_NotImplementedError>
            }
        } else {
            if (*arg_i < 0) {
   13af0:	683b      	ldr	r3, [r7, #0]
   13af2:	681b      	ldr	r3, [r3, #0]
   13af4:	2b00      	cmp	r3, #0
   13af6:	da01      	bge.n	13afc <mp_obj_str_format_helper+0x2d8>
                if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
                    terse_str_format_value_error();
   13af8:	f7ff fe8d 	bl	13816 <terse_str_format_value_error>
                } else {
                    mp_raise_ValueError(
                        "can't switch from manual field specification to automatic field numbering");
                }
            }
            if ((uint)*arg_i >= n_args - 1) {
   13afc:	683b      	ldr	r3, [r7, #0]
   13afe:	681b      	ldr	r3, [r3, #0]
   13b00:	461a      	mov	r2, r3
   13b02:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
   13b06:	3b01      	subs	r3, #1
   13b08:	429a      	cmp	r2, r3
   13b0a:	d303      	bcc.n	13b14 <mp_obj_str_format_helper+0x2f0>
                mp_raise_msg(&mp_type_IndexError, "tuple index out of range");
   13b0c:	4960      	ldr	r1, [pc, #384]	; (13c90 <mp_obj_str_format_helper+0x46c>)
   13b0e:	4861      	ldr	r0, [pc, #388]	; (13c94 <mp_obj_str_format_helper+0x470>)
   13b10:	f7f9 f9e6 	bl	cee0 <mp_raise_msg>
            }
            arg = args[(*arg_i) + 1];
   13b14:	683b      	ldr	r3, [r7, #0]
   13b16:	681b      	ldr	r3, [r3, #0]
   13b18:	3301      	adds	r3, #1
   13b1a:	009b      	lsls	r3, r3, #2
   13b1c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
   13b20:	4413      	add	r3, r2
   13b22:	681b      	ldr	r3, [r3, #0]
   13b24:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
            (*arg_i)++;
   13b28:	683b      	ldr	r3, [r7, #0]
   13b2a:	681b      	ldr	r3, [r3, #0]
   13b2c:	1c5a      	adds	r2, r3, #1
   13b2e:	683b      	ldr	r3, [r7, #0]
   13b30:	601a      	str	r2, [r3, #0]
        }
        if (!format_spec && !conversion) {
   13b32:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
   13b36:	2b00      	cmp	r3, #0
   13b38:	d106      	bne.n	13b48 <mp_obj_str_format_helper+0x324>
   13b3a:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
   13b3e:	2b00      	cmp	r3, #0
   13b40:	d102      	bne.n	13b48 <mp_obj_str_format_helper+0x324>
            conversion = 's';
   13b42:	2373      	movs	r3, #115	; 0x73
   13b44:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
        }
        if (conversion) {
   13b48:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
   13b4c:	2b00      	cmp	r3, #0
   13b4e:	d02e      	beq.n	13bae <mp_obj_str_format_helper+0x38a>
            mp_print_kind_t print_kind;
            if (conversion == 's') {
   13b50:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
   13b54:	2b73      	cmp	r3, #115	; 0x73
   13b56:	d103      	bne.n	13b60 <mp_obj_str_format_helper+0x33c>
                print_kind = PRINT_STR;
   13b58:	2300      	movs	r3, #0
   13b5a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   13b5e:	e00d      	b.n	13b7c <mp_obj_str_format_helper+0x358>
            } else {
                assert(conversion == 'r');
   13b60:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
   13b64:	2b72      	cmp	r3, #114	; 0x72
   13b66:	d006      	beq.n	13b76 <mp_obj_str_format_helper+0x352>
   13b68:	4b4d      	ldr	r3, [pc, #308]	; (13ca0 <mp_obj_str_format_helper+0x47c>)
   13b6a:	4a4e      	ldr	r2, [pc, #312]	; (13ca4 <mp_obj_str_format_helper+0x480>)
   13b6c:	f240 4147 	movw	r1, #1095	; 0x447
   13b70:	484d      	ldr	r0, [pc, #308]	; (13ca8 <mp_obj_str_format_helper+0x484>)
   13b72:	f007 fb23 	bl	1b1bc <__assert_func>
                print_kind = PRINT_REPR;
   13b76:	2301      	movs	r3, #1
   13b78:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
            }
            vstr_t arg_vstr;
            mp_print_t arg_print;
            vstr_init_print(&arg_vstr, 16, &arg_print);
   13b7c:	f107 0228 	add.w	r2, r7, #40	; 0x28
   13b80:	f107 0330 	add.w	r3, r7, #48	; 0x30
   13b84:	2110      	movs	r1, #16
   13b86:	4618      	mov	r0, r3
   13b88:	f7ed fbf7 	bl	137a <vstr_init_print>
            mp_obj_print_helper(&arg_print, arg, print_kind);
   13b8c:	f107 0328 	add.w	r3, r7, #40	; 0x28
   13b90:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
   13b94:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
   13b98:	4618      	mov	r0, r3
   13b9a:	f7f9 fe0a 	bl	d7b2 <mp_obj_print_helper>
            arg = mp_obj_new_str_from_vstr(&mp_type_str, &arg_vstr);
   13b9e:	f107 0330 	add.w	r3, r7, #48	; 0x30
   13ba2:	4619      	mov	r1, r3
   13ba4:	4841      	ldr	r0, [pc, #260]	; (13cac <mp_obj_str_format_helper+0x488>)
   13ba6:	f001 fa9e 	bl	150e6 <mp_obj_new_str_from_vstr>
   13baa:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
        }

        char fill = '\0';
   13bae:	2300      	movs	r3, #0
   13bb0:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
        char align = '\0';
   13bb4:	2300      	movs	r3, #0
   13bb6:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
        int width = -1;
   13bba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   13bbe:	64bb      	str	r3, [r7, #72]	; 0x48
        int precision = -1;
   13bc0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   13bc4:	647b      	str	r3, [r7, #68]	; 0x44
        char type = '\0';
   13bc6:	2300      	movs	r3, #0
   13bc8:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d
        int flags = 0;
   13bcc:	2300      	movs	r3, #0
   13bce:	67bb      	str	r3, [r7, #120]	; 0x78

        if (format_spec) {
   13bd0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
   13bd4:	2b00      	cmp	r3, #0
   13bd6:	f000 80ce 	beq.w	13d76 <mp_obj_str_format_helper+0x552>
            // precision   ::=  integer
            // type        ::=  "b" | "c" | "d" | "e" | "E" | "f" | "F" | "g" | "G" | "n" | "o" | "s" | "x" | "X" | "%"

            // recursively call the formatter to format any nested specifiers
            MP_STACK_CHECK();
            vstr_t format_spec_vstr = mp_obj_str_format_helper(format_spec, str, arg_i, n_args, args, kwargs);
   13bda:	f107 0018 	add.w	r0, r7, #24
   13bde:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
   13be2:	9302      	str	r3, [sp, #8]
   13be4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
   13be8:	9301      	str	r3, [sp, #4]
   13bea:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
   13bee:	9300      	str	r3, [sp, #0]
   13bf0:	683b      	ldr	r3, [r7, #0]
   13bf2:	68ba      	ldr	r2, [r7, #8]
   13bf4:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
   13bf8:	f7ff fe14 	bl	13824 <mp_obj_str_format_helper>
            const char *s = vstr_null_terminated_str(&format_spec_vstr);
   13bfc:	f107 0318 	add.w	r3, r7, #24
   13c00:	4618      	mov	r0, r3
   13c02:	f7ed fca4 	bl	154e <vstr_null_terminated_str>
   13c06:	6778      	str	r0, [r7, #116]	; 0x74
            const char *stop = s + format_spec_vstr.len;
   13c08:	69fb      	ldr	r3, [r7, #28]
   13c0a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
   13c0c:	4413      	add	r3, r2
   13c0e:	66bb      	str	r3, [r7, #104]	; 0x68
            if (isalignment(*s)) {
   13c10:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   13c12:	781b      	ldrb	r3, [r3, #0]
   13c14:	4618      	mov	r0, r3
   13c16:	f7ff fd80 	bl	1371a <isalignment>
   13c1a:	4603      	mov	r3, r0
   13c1c:	2b00      	cmp	r3, #0
   13c1e:	d006      	beq.n	13c2e <mp_obj_str_format_helper+0x40a>
                align = *s++;
   13c20:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   13c22:	1c5a      	adds	r2, r3, #1
   13c24:	677a      	str	r2, [r7, #116]	; 0x74
   13c26:	781b      	ldrb	r3, [r3, #0]
   13c28:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
   13c2c:	e018      	b.n	13c60 <mp_obj_str_format_helper+0x43c>
            } else if (*s && isalignment(s[1])) {
   13c2e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   13c30:	781b      	ldrb	r3, [r3, #0]
   13c32:	2b00      	cmp	r3, #0
   13c34:	d014      	beq.n	13c60 <mp_obj_str_format_helper+0x43c>
   13c36:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   13c38:	3301      	adds	r3, #1
   13c3a:	781b      	ldrb	r3, [r3, #0]
   13c3c:	4618      	mov	r0, r3
   13c3e:	f7ff fd6c 	bl	1371a <isalignment>
   13c42:	4603      	mov	r3, r0
   13c44:	2b00      	cmp	r3, #0
   13c46:	d00b      	beq.n	13c60 <mp_obj_str_format_helper+0x43c>
                fill = *s++;
   13c48:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   13c4a:	1c5a      	adds	r2, r3, #1
   13c4c:	677a      	str	r2, [r7, #116]	; 0x74
   13c4e:	781b      	ldrb	r3, [r3, #0]
   13c50:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
                align = *s++;
   13c54:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   13c56:	1c5a      	adds	r2, r3, #1
   13c58:	677a      	str	r2, [r7, #116]	; 0x74
   13c5a:	781b      	ldrb	r3, [r3, #0]
   13c5c:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
            }
            if (*s == '+' || *s == '-' || *s == ' ') {
   13c60:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   13c62:	781b      	ldrb	r3, [r3, #0]
   13c64:	2b2b      	cmp	r3, #43	; 0x2b
   13c66:	d007      	beq.n	13c78 <mp_obj_str_format_helper+0x454>
   13c68:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   13c6a:	781b      	ldrb	r3, [r3, #0]
   13c6c:	2b2d      	cmp	r3, #45	; 0x2d
   13c6e:	d003      	beq.n	13c78 <mp_obj_str_format_helper+0x454>
   13c70:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   13c72:	781b      	ldrb	r3, [r3, #0]
   13c74:	2b20      	cmp	r3, #32
   13c76:	d126      	bne.n	13cc6 <mp_obj_str_format_helper+0x4a2>
                if (*s == '+') {
   13c78:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   13c7a:	781b      	ldrb	r3, [r3, #0]
   13c7c:	2b2b      	cmp	r3, #43	; 0x2b
   13c7e:	d117      	bne.n	13cb0 <mp_obj_str_format_helper+0x48c>
                    flags |= PF_FLAG_SHOW_SIGN;
   13c80:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   13c82:	f043 0302 	orr.w	r3, r3, #2
   13c86:	67bb      	str	r3, [r7, #120]	; 0x78
   13c88:	e01a      	b.n	13cc0 <mp_obj_str_format_helper+0x49c>
   13c8a:	bf00      	nop
   13c8c:	000212b4 	.word	0x000212b4
   13c90:	000216b8 	.word	0x000216b8
   13c94:	000202c8 	.word	0x000202c8
   13c98:	00020304 	.word	0x00020304
   13c9c:	000216d4 	.word	0x000216d4
   13ca0:	000216f4 	.word	0x000216f4
   13ca4:	00021a40 	.word	0x00021a40
   13ca8:	0002148c 	.word	0x0002148c
   13cac:	00021964 	.word	0x00021964
                } else if (*s == ' ') {
   13cb0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   13cb2:	781b      	ldrb	r3, [r3, #0]
   13cb4:	2b20      	cmp	r3, #32
   13cb6:	d103      	bne.n	13cc0 <mp_obj_str_format_helper+0x49c>
                    flags |= PF_FLAG_SPACE_SIGN;
   13cb8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   13cba:	f043 0304 	orr.w	r3, r3, #4
   13cbe:	67bb      	str	r3, [r7, #120]	; 0x78
                }
                s++;
   13cc0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   13cc2:	3301      	adds	r3, #1
   13cc4:	677b      	str	r3, [r7, #116]	; 0x74
            }
            if (*s == '#') {
   13cc6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   13cc8:	781b      	ldrb	r3, [r3, #0]
   13cca:	2b23      	cmp	r3, #35	; 0x23
   13ccc:	d106      	bne.n	13cdc <mp_obj_str_format_helper+0x4b8>
                flags |= PF_FLAG_SHOW_PREFIX;
   13cce:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   13cd0:	f043 0310 	orr.w	r3, r3, #16
   13cd4:	67bb      	str	r3, [r7, #120]	; 0x78
                s++;
   13cd6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   13cd8:	3301      	adds	r3, #1
   13cda:	677b      	str	r3, [r7, #116]	; 0x74
            }
            if (*s == '0') {
   13cdc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   13cde:	781b      	ldrb	r3, [r3, #0]
   13ce0:	2b30      	cmp	r3, #48	; 0x30
   13ce2:	d10d      	bne.n	13d00 <mp_obj_str_format_helper+0x4dc>
                if (!align) {
   13ce4:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
   13ce8:	2b00      	cmp	r3, #0
   13cea:	d102      	bne.n	13cf2 <mp_obj_str_format_helper+0x4ce>
                    align = '=';
   13cec:	233d      	movs	r3, #61	; 0x3d
   13cee:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
                }
                if (!fill) {
   13cf2:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
   13cf6:	2b00      	cmp	r3, #0
   13cf8:	d102      	bne.n	13d00 <mp_obj_str_format_helper+0x4dc>
                    fill = '0';
   13cfa:	2330      	movs	r3, #48	; 0x30
   13cfc:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
                }
            }
            s = str_to_int(s, stop, &width);
   13d00:	f107 0348 	add.w	r3, r7, #72	; 0x48
   13d04:	461a      	mov	r2, r3
   13d06:	6eb9      	ldr	r1, [r7, #104]	; 0x68
   13d08:	6f78      	ldr	r0, [r7, #116]	; 0x74
   13d0a:	f7ff fcce 	bl	136aa <str_to_int>
   13d0e:	6778      	str	r0, [r7, #116]	; 0x74
            if (*s == ',') {
   13d10:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   13d12:	781b      	ldrb	r3, [r3, #0]
   13d14:	2b2c      	cmp	r3, #44	; 0x2c
   13d16:	d106      	bne.n	13d26 <mp_obj_str_format_helper+0x502>
                flags |= PF_FLAG_SHOW_COMMA;
   13d18:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   13d1a:	f043 0320 	orr.w	r3, r3, #32
   13d1e:	67bb      	str	r3, [r7, #120]	; 0x78
                s++;
   13d20:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   13d22:	3301      	adds	r3, #1
   13d24:	677b      	str	r3, [r7, #116]	; 0x74
            }
            if (*s == '.') {
   13d26:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   13d28:	781b      	ldrb	r3, [r3, #0]
   13d2a:	2b2e      	cmp	r3, #46	; 0x2e
   13d2c:	d10a      	bne.n	13d44 <mp_obj_str_format_helper+0x520>
                s++;
   13d2e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   13d30:	3301      	adds	r3, #1
   13d32:	677b      	str	r3, [r7, #116]	; 0x74
                s = str_to_int(s, stop, &precision);
   13d34:	f107 0344 	add.w	r3, r7, #68	; 0x44
   13d38:	461a      	mov	r2, r3
   13d3a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
   13d3c:	6f78      	ldr	r0, [r7, #116]	; 0x74
   13d3e:	f7ff fcb4 	bl	136aa <str_to_int>
   13d42:	6778      	str	r0, [r7, #116]	; 0x74
            }
            if (istype(*s)) {
   13d44:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   13d46:	781b      	ldrb	r3, [r3, #0]
   13d48:	4618      	mov	r0, r3
   13d4a:	f7ff fd03 	bl	13754 <istype>
   13d4e:	4603      	mov	r3, r0
   13d50:	2b00      	cmp	r3, #0
   13d52:	d005      	beq.n	13d60 <mp_obj_str_format_helper+0x53c>
                type = *s++;
   13d54:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   13d56:	1c5a      	adds	r2, r3, #1
   13d58:	677a      	str	r2, [r7, #116]	; 0x74
   13d5a:	781b      	ldrb	r3, [r3, #0]
   13d5c:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d
            }
            if (*s) {
   13d60:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   13d62:	781b      	ldrb	r3, [r3, #0]
   13d64:	2b00      	cmp	r3, #0
   13d66:	d001      	beq.n	13d6c <mp_obj_str_format_helper+0x548>
                if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
                    terse_str_format_value_error();
   13d68:	f7ff fd55 	bl	13816 <terse_str_format_value_error>
                } else {
                    mp_raise_ValueError("invalid format specifier");
                }
            }
            vstr_clear(&format_spec_vstr);
   13d6c:	f107 0318 	add.w	r3, r7, #24
   13d70:	4618      	mov	r0, r3
   13d72:	f7ed fb19 	bl	13a8 <vstr_clear>
        }
        if (!align) {
   13d76:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
   13d7a:	2b00      	cmp	r3, #0
   13d7c:	d10d      	bne.n	13d9a <mp_obj_str_format_helper+0x576>
            if (arg_looks_numeric(arg)) {
   13d7e:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
   13d82:	f7ff fd31 	bl	137e8 <arg_looks_numeric>
   13d86:	4603      	mov	r3, r0
   13d88:	2b00      	cmp	r3, #0
   13d8a:	d003      	beq.n	13d94 <mp_obj_str_format_helper+0x570>
                align = '>';
   13d8c:	233e      	movs	r3, #62	; 0x3e
   13d8e:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
   13d92:	e002      	b.n	13d9a <mp_obj_str_format_helper+0x576>
            } else {
                align = '<';
   13d94:	233c      	movs	r3, #60	; 0x3c
   13d96:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
            }
        }
        if (!fill) {
   13d9a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
   13d9e:	2b00      	cmp	r3, #0
   13da0:	d102      	bne.n	13da8 <mp_obj_str_format_helper+0x584>
            fill = ' ';
   13da2:	2320      	movs	r3, #32
   13da4:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
        }

        if (flags & (PF_FLAG_SHOW_SIGN | PF_FLAG_SPACE_SIGN)) {
   13da8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   13daa:	f003 0306 	and.w	r3, r3, #6
   13dae:	2b00      	cmp	r3, #0
   13db0:	d00b      	beq.n	13dca <mp_obj_str_format_helper+0x5a6>
            if (type == 's') {
   13db2:	f897 307d 	ldrb.w	r3, [r7, #125]	; 0x7d
   13db6:	2b73      	cmp	r3, #115	; 0x73
   13db8:	d101      	bne.n	13dbe <mp_obj_str_format_helper+0x59a>
                if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
                    terse_str_format_value_error();
   13dba:	f7ff fd2c 	bl	13816 <terse_str_format_value_error>
                } else {
                    mp_raise_ValueError("sign not allowed in string format specifier");
                }
            }
            if (type == 'c') {
   13dbe:	f897 307d 	ldrb.w	r3, [r7, #125]	; 0x7d
   13dc2:	2b63      	cmp	r3, #99	; 0x63
   13dc4:	d101      	bne.n	13dca <mp_obj_str_format_helper+0x5a6>
                if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
                    terse_str_format_value_error();
   13dc6:	f7ff fd26 	bl	13816 <terse_str_format_value_error>
                        "sign not allowed with integer format specifier 'c'");
                }
            }
        }

        switch (align) {
   13dca:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
   13dce:	2b3d      	cmp	r3, #61	; 0x3d
   13dd0:	d008      	beq.n	13de4 <mp_obj_str_format_helper+0x5c0>
   13dd2:	2b5e      	cmp	r3, #94	; 0x5e
   13dd4:	d00b      	beq.n	13dee <mp_obj_str_format_helper+0x5ca>
   13dd6:	2b3c      	cmp	r3, #60	; 0x3c
   13dd8:	d10e      	bne.n	13df8 <mp_obj_str_format_helper+0x5d4>
            case '<': flags |= PF_FLAG_LEFT_ADJUST;     break;
   13dda:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   13ddc:	f043 0301 	orr.w	r3, r3, #1
   13de0:	67bb      	str	r3, [r7, #120]	; 0x78
   13de2:	e009      	b.n	13df8 <mp_obj_str_format_helper+0x5d4>
            case '=': flags |= PF_FLAG_PAD_AFTER_SIGN;  break;
   13de4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   13de6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   13dea:	67bb      	str	r3, [r7, #120]	; 0x78
   13dec:	e004      	b.n	13df8 <mp_obj_str_format_helper+0x5d4>
            case '^': flags |= PF_FLAG_CENTER_ADJUST;   break;
   13dee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   13df0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   13df4:	67bb      	str	r3, [r7, #120]	; 0x78
   13df6:	bf00      	nop
        }

        if (arg_looks_integer(arg)) {
   13df8:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
   13dfc:	f7ff fcc6 	bl	1378c <arg_looks_integer>
   13e00:	4603      	mov	r3, r0
   13e02:	2b00      	cmp	r3, #0
   13e04:	f000 8167 	beq.w	140d6 <mp_obj_str_format_helper+0x8b2>
            switch (type) {
   13e08:	f897 307d 	ldrb.w	r3, [r7, #125]	; 0x7d
   13e0c:	2b78      	cmp	r3, #120	; 0x78
   13e0e:	f200 815f 	bhi.w	140d0 <mp_obj_str_format_helper+0x8ac>
   13e12:	a201      	add	r2, pc, #4	; (adr r2, 13e18 <mp_obj_str_format_helper+0x5f4>)
   13e14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   13e18:	0001404b 	.word	0x0001404b
   13e1c:	000140d1 	.word	0x000140d1
   13e20:	000140d1 	.word	0x000140d1
   13e24:	000140d1 	.word	0x000140d1
   13e28:	000140d1 	.word	0x000140d1
   13e2c:	000140d1 	.word	0x000140d1
   13e30:	000140d1 	.word	0x000140d1
   13e34:	000140d1 	.word	0x000140d1
   13e38:	000140d1 	.word	0x000140d1
   13e3c:	000140d1 	.word	0x000140d1
   13e40:	000140d1 	.word	0x000140d1
   13e44:	000140d1 	.word	0x000140d1
   13e48:	000140d1 	.word	0x000140d1
   13e4c:	000140d1 	.word	0x000140d1
   13e50:	000140d1 	.word	0x000140d1
   13e54:	000140d1 	.word	0x000140d1
   13e58:	000140d1 	.word	0x000140d1
   13e5c:	000140d1 	.word	0x000140d1
   13e60:	000140d1 	.word	0x000140d1
   13e64:	000140d1 	.word	0x000140d1
   13e68:	000140d1 	.word	0x000140d1
   13e6c:	000140d1 	.word	0x000140d1
   13e70:	000140d1 	.word	0x000140d1
   13e74:	000140d1 	.word	0x000140d1
   13e78:	000140d1 	.word	0x000140d1
   13e7c:	000140d1 	.word	0x000140d1
   13e80:	000140d1 	.word	0x000140d1
   13e84:	000140d1 	.word	0x000140d1
   13e88:	000140d1 	.word	0x000140d1
   13e8c:	000140d1 	.word	0x000140d1
   13e90:	000140d1 	.word	0x000140d1
   13e94:	000140d1 	.word	0x000140d1
   13e98:	000140d1 	.word	0x000140d1
   13e9c:	000140d1 	.word	0x000140d1
   13ea0:	000140d1 	.word	0x000140d1
   13ea4:	000140d1 	.word	0x000140d1
   13ea8:	000140d1 	.word	0x000140d1
   13eac:	000140d5 	.word	0x000140d5
   13eb0:	000140d1 	.word	0x000140d1
   13eb4:	000140d1 	.word	0x000140d1
   13eb8:	000140d1 	.word	0x000140d1
   13ebc:	000140d1 	.word	0x000140d1
   13ec0:	000140d1 	.word	0x000140d1
   13ec4:	000140d1 	.word	0x000140d1
   13ec8:	000140d1 	.word	0x000140d1
   13ecc:	000140d1 	.word	0x000140d1
   13ed0:	000140d1 	.word	0x000140d1
   13ed4:	000140d1 	.word	0x000140d1
   13ed8:	000140d1 	.word	0x000140d1
   13edc:	000140d1 	.word	0x000140d1
   13ee0:	000140d1 	.word	0x000140d1
   13ee4:	000140d1 	.word	0x000140d1
   13ee8:	000140d1 	.word	0x000140d1
   13eec:	000140d1 	.word	0x000140d1
   13ef0:	000140d1 	.word	0x000140d1
   13ef4:	000140d1 	.word	0x000140d1
   13ef8:	000140d1 	.word	0x000140d1
   13efc:	000140d1 	.word	0x000140d1
   13f00:	000140d1 	.word	0x000140d1
   13f04:	000140d1 	.word	0x000140d1
   13f08:	000140d1 	.word	0x000140d1
   13f0c:	000140d1 	.word	0x000140d1
   13f10:	000140d1 	.word	0x000140d1
   13f14:	000140d1 	.word	0x000140d1
   13f18:	000140d1 	.word	0x000140d1
   13f1c:	000140d1 	.word	0x000140d1
   13f20:	000140d1 	.word	0x000140d1
   13f24:	000140d1 	.word	0x000140d1
   13f28:	000140d1 	.word	0x000140d1
   13f2c:	000140d5 	.word	0x000140d5
   13f30:	000140d5 	.word	0x000140d5
   13f34:	000140d5 	.word	0x000140d5
   13f38:	000140d1 	.word	0x000140d1
   13f3c:	000140d1 	.word	0x000140d1
   13f40:	000140d1 	.word	0x000140d1
   13f44:	000140d1 	.word	0x000140d1
   13f48:	000140d1 	.word	0x000140d1
   13f4c:	000140d1 	.word	0x000140d1
   13f50:	000140d1 	.word	0x000140d1
   13f54:	000140d1 	.word	0x000140d1
   13f58:	000140d1 	.word	0x000140d1
   13f5c:	000140d1 	.word	0x000140d1
   13f60:	000140d1 	.word	0x000140d1
   13f64:	000140d1 	.word	0x000140d1
   13f68:	000140d1 	.word	0x000140d1
   13f6c:	000140d1 	.word	0x000140d1
   13f70:	000140d1 	.word	0x000140d1
   13f74:	000140d1 	.word	0x000140d1
   13f78:	000140a5 	.word	0x000140a5
   13f7c:	000140d1 	.word	0x000140d1
   13f80:	000140d1 	.word	0x000140d1
   13f84:	000140d1 	.word	0x000140d1
   13f88:	000140d1 	.word	0x000140d1
   13f8c:	000140d1 	.word	0x000140d1
   13f90:	000140d1 	.word	0x000140d1
   13f94:	000140d1 	.word	0x000140d1
   13f98:	000140d1 	.word	0x000140d1
   13f9c:	000140d1 	.word	0x000140d1
   13fa0:	00013ffd 	.word	0x00013ffd
   13fa4:	00014021 	.word	0x00014021
   13fa8:	0001404b 	.word	0x0001404b
   13fac:	000140d5 	.word	0x000140d5
   13fb0:	000140d5 	.word	0x000140d5
   13fb4:	000140d5 	.word	0x000140d5
   13fb8:	000140d1 	.word	0x000140d1
   13fbc:	000140d1 	.word	0x000140d1
   13fc0:	000140d1 	.word	0x000140d1
   13fc4:	000140d1 	.word	0x000140d1
   13fc8:	000140d1 	.word	0x000140d1
   13fcc:	000140d1 	.word	0x000140d1
   13fd0:	0001404b 	.word	0x0001404b
   13fd4:	0001406f 	.word	0x0001406f
   13fd8:	000140d1 	.word	0x000140d1
   13fdc:	000140d1 	.word	0x000140d1
   13fe0:	000140d1 	.word	0x000140d1
   13fe4:	000140d1 	.word	0x000140d1
   13fe8:	000140d1 	.word	0x000140d1
   13fec:	000140d1 	.word	0x000140d1
   13ff0:	000140d1 	.word	0x000140d1
   13ff4:	000140d1 	.word	0x000140d1
   13ff8:	000140a5 	.word	0x000140a5
                case 'b':
                    mp_print_mp_int(&print, arg, 2, 'a', flags, fill, width, 0);
   13ffc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   13ffe:	f107 004c 	add.w	r0, r7, #76	; 0x4c
   14002:	2200      	movs	r2, #0
   14004:	9203      	str	r2, [sp, #12]
   14006:	9302      	str	r3, [sp, #8]
   14008:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
   1400c:	9301      	str	r3, [sp, #4]
   1400e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   14010:	9300      	str	r3, [sp, #0]
   14012:	2361      	movs	r3, #97	; 0x61
   14014:	2202      	movs	r2, #2
   14016:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
   1401a:	f7ed fd70 	bl	1afe <mp_print_mp_int>
                    continue;
   1401e:	e0a0      	b.n	14162 <mp_obj_str_format_helper+0x93e>

                case 'c':
                {
                    char ch = mp_obj_get_int(arg);
   14020:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
   14024:	f7f9 fd70 	bl	db08 <mp_obj_get_int>
   14028:	4603      	mov	r3, r0
   1402a:	b2db      	uxtb	r3, r3
   1402c:	75fb      	strb	r3, [r7, #23]
                    mp_print_strn(&print, &ch, 1, flags, fill, width);
   1402e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   14030:	f107 0117 	add.w	r1, r7, #23
   14034:	f107 004c 	add.w	r0, r7, #76	; 0x4c
   14038:	9301      	str	r3, [sp, #4]
   1403a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
   1403e:	9300      	str	r3, [sp, #0]
   14040:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   14042:	2201      	movs	r2, #1
   14044:	f7ed fc1c 	bl	1880 <mp_print_strn>
   14048:	e08b      	b.n	14162 <mp_obj_str_format_helper+0x93e>
                }

                case '\0':  // No explicit format type implies 'd'
                case 'n':   // I don't think we support locales in uPy so use 'd'
                case 'd':
                    mp_print_mp_int(&print, arg, 10, 'a', flags, fill, width, 0);
   1404a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   1404c:	f107 004c 	add.w	r0, r7, #76	; 0x4c
   14050:	2200      	movs	r2, #0
   14052:	9203      	str	r2, [sp, #12]
   14054:	9302      	str	r3, [sp, #8]
   14056:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
   1405a:	9301      	str	r3, [sp, #4]
   1405c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   1405e:	9300      	str	r3, [sp, #0]
   14060:	2361      	movs	r3, #97	; 0x61
   14062:	220a      	movs	r2, #10
   14064:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
   14068:	f7ed fd49 	bl	1afe <mp_print_mp_int>
                    continue;
   1406c:	e079      	b.n	14162 <mp_obj_str_format_helper+0x93e>

                case 'o':
                    if (flags & PF_FLAG_SHOW_PREFIX) {
   1406e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   14070:	f003 0310 	and.w	r3, r3, #16
   14074:	2b00      	cmp	r3, #0
   14076:	d003      	beq.n	14080 <mp_obj_str_format_helper+0x85c>
                        flags |= PF_FLAG_SHOW_OCTAL_LETTER;
   14078:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   1407a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   1407e:	67bb      	str	r3, [r7, #120]	; 0x78
                    }

                    mp_print_mp_int(&print, arg, 8, 'a', flags, fill, width, 0);
   14080:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   14082:	f107 004c 	add.w	r0, r7, #76	; 0x4c
   14086:	2200      	movs	r2, #0
   14088:	9203      	str	r2, [sp, #12]
   1408a:	9302      	str	r3, [sp, #8]
   1408c:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
   14090:	9301      	str	r3, [sp, #4]
   14092:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   14094:	9300      	str	r3, [sp, #0]
   14096:	2361      	movs	r3, #97	; 0x61
   14098:	2208      	movs	r2, #8
   1409a:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
   1409e:	f7ed fd2e 	bl	1afe <mp_print_mp_int>
                    continue;
   140a2:	e05e      	b.n	14162 <mp_obj_str_format_helper+0x93e>

                case 'X':
                case 'x':
                    mp_print_mp_int(&print, arg, 16, type - ('X' - 'A'), flags, fill, width, 0);
   140a4:	f897 307d 	ldrb.w	r3, [r7, #125]	; 0x7d
   140a8:	f1a3 0117 	sub.w	r1, r3, #23
   140ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   140ae:	f107 004c 	add.w	r0, r7, #76	; 0x4c
   140b2:	2200      	movs	r2, #0
   140b4:	9203      	str	r2, [sp, #12]
   140b6:	9302      	str	r3, [sp, #8]
   140b8:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
   140bc:	9301      	str	r3, [sp, #4]
   140be:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   140c0:	9300      	str	r3, [sp, #0]
   140c2:	460b      	mov	r3, r1
   140c4:	2210      	movs	r2, #16
   140c6:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
   140ca:	f7ed fd18 	bl	1afe <mp_print_mp_int>
                    continue;
   140ce:	e048      	b.n	14162 <mp_obj_str_format_helper+0x93e>
                    // looks like an integer
                    break;

                default:
                    if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
                        terse_str_format_value_error();
   140d0:	f7ff fba1 	bl	13816 <terse_str_format_value_error>
                    break;
   140d4:	bf00      	nop
            }
        }

        // NOTE: no else here. We need the e, f, g etc formats for integer
        //       arguments (from above if) to take this if.
        if (arg_looks_numeric(arg)) {
   140d6:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
   140da:	f7ff fb85 	bl	137e8 <arg_looks_numeric>
   140de:	4603      	mov	r3, r0
   140e0:	2b00      	cmp	r3, #0
   140e2:	d00f      	beq.n	14104 <mp_obj_str_format_helper+0x8e0>
            if (!type) {
   140e4:	f897 307d 	ldrb.w	r3, [r7, #125]	; 0x7d
   140e8:	2b00      	cmp	r3, #0
   140ea:	d102      	bne.n	140f2 <mp_obj_str_format_helper+0x8ce>
                // CPython sources say:
                //   Omitted type specifier.  Behaves in the same way as repr(x)
                //   and str(x) if no precision is given, else like 'g', but with
                //   at least one digit after the decimal point. */

                type = 'g';
   140ec:	2367      	movs	r3, #103	; 0x67
   140ee:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d
            }
            if (type == 'n') {
   140f2:	f897 307d 	ldrb.w	r3, [r7, #125]	; 0x7d
   140f6:	2b6e      	cmp	r3, #110	; 0x6e
   140f8:	d102      	bne.n	14100 <mp_obj_str_format_helper+0x8dc>
                type = 'g';
   140fa:	2367      	movs	r3, #103	; 0x67
   140fc:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d
                    break;
#endif

                default:
                    if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
                        terse_str_format_value_error();
   14100:	f7ff fb89 	bl	13816 <terse_str_format_value_error>
                    }
            }
        } else {
            // arg doesn't look like a number

            if (align == '=') {
   14104:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
   14108:	2b3d      	cmp	r3, #61	; 0x3d
   1410a:	d101      	bne.n	14110 <mp_obj_str_format_helper+0x8ec>
                if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
                    terse_str_format_value_error();
   1410c:	f7ff fb83 	bl	13816 <terse_str_format_value_error>
                    mp_raise_ValueError(
                        "'=' alignment not allowed in string format specifier");
                }
            }

            switch (type) {
   14110:	f897 307d 	ldrb.w	r3, [r7, #125]	; 0x7d
   14114:	2b00      	cmp	r3, #0
   14116:	d001      	beq.n	1411c <mp_obj_str_format_helper+0x8f8>
   14118:	2b73      	cmp	r3, #115	; 0x73
   1411a:	d120      	bne.n	1415e <mp_obj_str_format_helper+0x93a>
                case '\0': // no explicit format type implies 's'
                case 's': {
                    size_t slen;
                    const char *s = mp_obj_str_get_data(arg, &slen);
   1411c:	f107 0310 	add.w	r3, r7, #16
   14120:	4619      	mov	r1, r3
   14122:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
   14126:	f001 f99f 	bl	15468 <mp_obj_str_get_data>
   1412a:	6678      	str	r0, [r7, #100]	; 0x64
                    if (precision < 0) {
   1412c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   1412e:	2b00      	cmp	r3, #0
   14130:	da01      	bge.n	14136 <mp_obj_str_format_helper+0x912>
                        precision = slen;
   14132:	693b      	ldr	r3, [r7, #16]
   14134:	647b      	str	r3, [r7, #68]	; 0x44
                    }
                    if (slen > (size_t)precision) {
   14136:	693b      	ldr	r3, [r7, #16]
   14138:	6c7a      	ldr	r2, [r7, #68]	; 0x44
   1413a:	4293      	cmp	r3, r2
   1413c:	d901      	bls.n	14142 <mp_obj_str_format_helper+0x91e>
                        slen = precision;
   1413e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   14140:	613b      	str	r3, [r7, #16]
                    }
                    mp_print_strn(&print, s, slen, flags, fill, width);
   14142:	693a      	ldr	r2, [r7, #16]
   14144:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   14146:	f107 004c 	add.w	r0, r7, #76	; 0x4c
   1414a:	9301      	str	r3, [sp, #4]
   1414c:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
   14150:	9300      	str	r3, [sp, #0]
   14152:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   14154:	6e79      	ldr	r1, [r7, #100]	; 0x64
   14156:	f7ed fb93 	bl	1880 <mp_print_strn>
                    break;
   1415a:	bf00      	nop
   1415c:	e001      	b.n	14162 <mp_obj_str_format_helper+0x93e>
                }

                default:
                    if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
                        terse_str_format_value_error();
   1415e:	f7ff fb5a 	bl	13816 <terse_str_format_value_error>
    for (; str < top; str++) {
   14162:	68bb      	ldr	r3, [r7, #8]
   14164:	3301      	adds	r3, #1
   14166:	60bb      	str	r3, [r7, #8]
   14168:	68ba      	ldr	r2, [r7, #8]
   1416a:	687b      	ldr	r3, [r7, #4]
   1416c:	429a      	cmp	r2, r3
   1416e:	f4ff ab6a 	bcc.w	13846 <mp_obj_str_format_helper+0x22>
                    }
            }
        }
    }

    return vstr;
   14172:	68fb      	ldr	r3, [r7, #12]
   14174:	461c      	mov	r4, r3
   14176:	f107 0354 	add.w	r3, r7, #84	; 0x54
   1417a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   1417c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
   14180:	68f8      	ldr	r0, [r7, #12]
   14182:	37a4      	adds	r7, #164	; 0xa4
   14184:	46bd      	mov	sp, r7
   14186:	bd90      	pop	{r4, r7, pc}

00014188 <mp_obj_str_format>:

mp_obj_t mp_obj_str_format(size_t n_args, const mp_obj_t *args, mp_map_t *kwargs) {
   14188:	b580      	push	{r7, lr}
   1418a:	b090      	sub	sp, #64	; 0x40
   1418c:	af04      	add	r7, sp, #16
   1418e:	60f8      	str	r0, [r7, #12]
   14190:	60b9      	str	r1, [r7, #8]
   14192:	607a      	str	r2, [r7, #4]
    mp_check_self(MP_OBJ_IS_STR_OR_BYTES(args[0]));
   14194:	68bb      	ldr	r3, [r7, #8]
   14196:	681b      	ldr	r3, [r3, #0]
   14198:	4618      	mov	r0, r3
   1419a:	f7fd ff59 	bl	12050 <MP_OBJ_IS_QSTR>
   1419e:	4603      	mov	r3, r0
   141a0:	2b00      	cmp	r3, #0
   141a2:	d115      	bne.n	141d0 <mp_obj_str_format+0x48>
   141a4:	68bb      	ldr	r3, [r7, #8]
   141a6:	681b      	ldr	r3, [r3, #0]
   141a8:	4618      	mov	r0, r3
   141aa:	f7fd ff63 	bl	12074 <MP_OBJ_IS_OBJ>
   141ae:	4603      	mov	r3, r0
   141b0:	2b00      	cmp	r3, #0
   141b2:	d006      	beq.n	141c2 <mp_obj_str_format+0x3a>
   141b4:	68bb      	ldr	r3, [r7, #8]
   141b6:	681b      	ldr	r3, [r3, #0]
   141b8:	681b      	ldr	r3, [r3, #0]
   141ba:	699b      	ldr	r3, [r3, #24]
   141bc:	4a21      	ldr	r2, [pc, #132]	; (14244 <mp_obj_str_format+0xbc>)
   141be:	4293      	cmp	r3, r2
   141c0:	d006      	beq.n	141d0 <mp_obj_str_format+0x48>
   141c2:	4b21      	ldr	r3, [pc, #132]	; (14248 <mp_obj_str_format+0xc0>)
   141c4:	4a21      	ldr	r2, [pc, #132]	; (1424c <mp_obj_str_format+0xc4>)
   141c6:	f240 5161 	movw	r1, #1377	; 0x561
   141ca:	4821      	ldr	r0, [pc, #132]	; (14250 <mp_obj_str_format+0xc8>)
   141cc:	f006 fff6 	bl	1b1bc <__assert_func>

    GET_STR_DATA_LEN(args[0], str, len);
   141d0:	68bb      	ldr	r3, [r7, #8]
   141d2:	681b      	ldr	r3, [r3, #0]
   141d4:	4618      	mov	r0, r3
   141d6:	f7fd ff3b 	bl	12050 <MP_OBJ_IS_QSTR>
   141da:	4603      	mov	r3, r0
   141dc:	2b00      	cmp	r3, #0
   141de:	d00a      	beq.n	141f6 <mp_obj_str_format+0x6e>
   141e0:	68bb      	ldr	r3, [r7, #8]
   141e2:	681b      	ldr	r3, [r3, #0]
   141e4:	089b      	lsrs	r3, r3, #2
   141e6:	f107 0228 	add.w	r2, r7, #40	; 0x28
   141ea:	4611      	mov	r1, r2
   141ec:	4618      	mov	r0, r3
   141ee:	f7ec ffff 	bl	11f0 <qstr_data>
   141f2:	62f8      	str	r0, [r7, #44]	; 0x2c
   141f4:	e007      	b.n	14206 <mp_obj_str_format+0x7e>
   141f6:	68bb      	ldr	r3, [r7, #8]
   141f8:	681b      	ldr	r3, [r3, #0]
   141fa:	689b      	ldr	r3, [r3, #8]
   141fc:	62bb      	str	r3, [r7, #40]	; 0x28
   141fe:	68bb      	ldr	r3, [r7, #8]
   14200:	681b      	ldr	r3, [r3, #0]
   14202:	68db      	ldr	r3, [r3, #12]
   14204:	62fb      	str	r3, [r7, #44]	; 0x2c
    int arg_i = 0;
   14206:	2300      	movs	r3, #0
   14208:	627b      	str	r3, [r7, #36]	; 0x24
    vstr_t vstr = mp_obj_str_format_helper((const char*)str, (const char*)str + len, &arg_i, n_args, args, kwargs);
   1420a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1420c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   1420e:	441a      	add	r2, r3
   14210:	f107 0014 	add.w	r0, r7, #20
   14214:	f107 0124 	add.w	r1, r7, #36	; 0x24
   14218:	687b      	ldr	r3, [r7, #4]
   1421a:	9302      	str	r3, [sp, #8]
   1421c:	68bb      	ldr	r3, [r7, #8]
   1421e:	9301      	str	r3, [sp, #4]
   14220:	68fb      	ldr	r3, [r7, #12]
   14222:	9300      	str	r3, [sp, #0]
   14224:	460b      	mov	r3, r1
   14226:	6af9      	ldr	r1, [r7, #44]	; 0x2c
   14228:	f7ff fafc 	bl	13824 <mp_obj_str_format_helper>
    return mp_obj_new_str_from_vstr(&mp_type_str, &vstr);
   1422c:	f107 0314 	add.w	r3, r7, #20
   14230:	4619      	mov	r1, r3
   14232:	4808      	ldr	r0, [pc, #32]	; (14254 <mp_obj_str_format+0xcc>)
   14234:	f000 ff57 	bl	150e6 <mp_obj_new_str_from_vstr>
   14238:	4603      	mov	r3, r0
}
   1423a:	4618      	mov	r0, r3
   1423c:	3730      	adds	r7, #48	; 0x30
   1423e:	46bd      	mov	sp, r7
   14240:	bd80      	pop	{r7, pc}
   14242:	bf00      	nop
   14244:	000126c3 	.word	0x000126c3
   14248:	00021528 	.word	0x00021528
   1424c:	00021a5c 	.word	0x00021a5c
   14250:	0002148c 	.word	0x0002148c
   14254:	00021964 	.word	0x00021964

00014258 <str_modulo_format>:
MP_DEFINE_CONST_FUN_OBJ_KW(str_format_obj, 1, mp_obj_str_format);

STATIC mp_obj_t str_modulo_format(mp_obj_t pattern, size_t n_args, const mp_obj_t *args, mp_obj_t dict) {
   14258:	b590      	push	{r4, r7, lr}
   1425a:	b0a9      	sub	sp, #164	; 0xa4
   1425c:	af04      	add	r7, sp, #16
   1425e:	60f8      	str	r0, [r7, #12]
   14260:	60b9      	str	r1, [r7, #8]
   14262:	607a      	str	r2, [r7, #4]
   14264:	603b      	str	r3, [r7, #0]
    mp_check_self(MP_OBJ_IS_STR_OR_BYTES(pattern));
   14266:	68f8      	ldr	r0, [r7, #12]
   14268:	f7fd fef2 	bl	12050 <MP_OBJ_IS_QSTR>
   1426c:	4603      	mov	r3, r0
   1426e:	2b00      	cmp	r3, #0
   14270:	d112      	bne.n	14298 <str_modulo_format+0x40>
   14272:	68f8      	ldr	r0, [r7, #12]
   14274:	f7fd fefe 	bl	12074 <MP_OBJ_IS_OBJ>
   14278:	4603      	mov	r3, r0
   1427a:	2b00      	cmp	r3, #0
   1427c:	d005      	beq.n	1428a <str_modulo_format+0x32>
   1427e:	68fb      	ldr	r3, [r7, #12]
   14280:	681b      	ldr	r3, [r3, #0]
   14282:	699b      	ldr	r3, [r3, #24]
   14284:	4ac4      	ldr	r2, [pc, #784]	; (14598 <str_modulo_format+0x340>)
   14286:	4293      	cmp	r3, r2
   14288:	d006      	beq.n	14298 <str_modulo_format+0x40>
   1428a:	4bc4      	ldr	r3, [pc, #784]	; (1459c <str_modulo_format+0x344>)
   1428c:	4ac4      	ldr	r2, [pc, #784]	; (145a0 <str_modulo_format+0x348>)
   1428e:	f240 516b 	movw	r1, #1387	; 0x56b
   14292:	48c4      	ldr	r0, [pc, #784]	; (145a4 <str_modulo_format+0x34c>)
   14294:	f006 ff92 	bl	1b1bc <__assert_func>

    GET_STR_DATA_LEN(pattern, str, len);
   14298:	68f8      	ldr	r0, [r7, #12]
   1429a:	f7fd fed9 	bl	12050 <MP_OBJ_IS_QSTR>
   1429e:	4603      	mov	r3, r0
   142a0:	2b00      	cmp	r3, #0
   142a2:	d00a      	beq.n	142ba <str_modulo_format+0x62>
   142a4:	68fb      	ldr	r3, [r7, #12]
   142a6:	089b      	lsrs	r3, r3, #2
   142a8:	f107 0254 	add.w	r2, r7, #84	; 0x54
   142ac:	4611      	mov	r1, r2
   142ae:	4618      	mov	r0, r3
   142b0:	f7ec ff9e 	bl	11f0 <qstr_data>
   142b4:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
   142b8:	e006      	b.n	142c8 <str_modulo_format+0x70>
   142ba:	68fb      	ldr	r3, [r7, #12]
   142bc:	689b      	ldr	r3, [r3, #8]
   142be:	657b      	str	r3, [r7, #84]	; 0x54
   142c0:	68fb      	ldr	r3, [r7, #12]
   142c2:	68db      	ldr	r3, [r3, #12]
   142c4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    const byte *start_str = str;
   142c8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
   142cc:	66fb      	str	r3, [r7, #108]	; 0x6c
    bool is_bytes = MP_OBJ_IS_TYPE(pattern, &mp_type_bytes);
   142ce:	68f8      	ldr	r0, [r7, #12]
   142d0:	f7fd fed0 	bl	12074 <MP_OBJ_IS_OBJ>
   142d4:	4603      	mov	r3, r0
   142d6:	2b00      	cmp	r3, #0
   142d8:	d006      	beq.n	142e8 <str_modulo_format+0x90>
   142da:	68fb      	ldr	r3, [r7, #12]
   142dc:	681b      	ldr	r3, [r3, #0]
   142de:	4ab2      	ldr	r2, [pc, #712]	; (145a8 <str_modulo_format+0x350>)
   142e0:	4293      	cmp	r3, r2
   142e2:	d101      	bne.n	142e8 <str_modulo_format+0x90>
   142e4:	2301      	movs	r3, #1
   142e6:	e000      	b.n	142ea <str_modulo_format+0x92>
   142e8:	2300      	movs	r3, #0
   142ea:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
   142ee:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
   142f2:	f003 0301 	and.w	r3, r3, #1
   142f6:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
    size_t arg_i = 0;
   142fa:	2300      	movs	r3, #0
   142fc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    vstr_t vstr;
    mp_print_t print;
    vstr_init_print(&vstr, 16, &print);
   14300:	f107 023c 	add.w	r2, r7, #60	; 0x3c
   14304:	f107 0344 	add.w	r3, r7, #68	; 0x44
   14308:	2110      	movs	r1, #16
   1430a:	4618      	mov	r0, r3
   1430c:	f7ed f835 	bl	137a <vstr_init_print>

    for (const byte *top = str + len; str < top; str++) {
   14310:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   14312:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
   14316:	4413      	add	r3, r2
   14318:	667b      	str	r3, [r7, #100]	; 0x64
   1431a:	e296      	b.n	1484a <str_modulo_format+0x5f2>
        mp_obj_t arg = MP_OBJ_NULL;
   1431c:	2300      	movs	r3, #0
   1431e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
        if (*str != '%') {
   14322:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
   14326:	781b      	ldrb	r3, [r3, #0]
   14328:	2b25      	cmp	r3, #37	; 0x25
   1432a:	d009      	beq.n	14340 <str_modulo_format+0xe8>
            vstr_add_byte(&vstr, *str);
   1432c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
   14330:	781a      	ldrb	r2, [r3, #0]
   14332:	f107 0344 	add.w	r3, r7, #68	; 0x44
   14336:	4611      	mov	r1, r2
   14338:	4618      	mov	r0, r3
   1433a:	f7ed f923 	bl	1584 <vstr_add_byte>
            continue;
   1433e:	e27f      	b.n	14840 <str_modulo_format+0x5e8>
        }
        if (++str >= top) {
   14340:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
   14344:	3301      	adds	r3, #1
   14346:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   1434a:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
   1434e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   14350:	429a      	cmp	r2, r3
   14352:	f080 810d 	bcs.w	14570 <str_modulo_format+0x318>
            goto incomplete_format;
        }
        if (*str == '%') {
   14356:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
   1435a:	781b      	ldrb	r3, [r3, #0]
   1435c:	2b25      	cmp	r3, #37	; 0x25
   1435e:	d106      	bne.n	1436e <str_modulo_format+0x116>
            vstr_add_byte(&vstr, '%');
   14360:	f107 0344 	add.w	r3, r7, #68	; 0x44
   14364:	2125      	movs	r1, #37	; 0x25
   14366:	4618      	mov	r0, r3
   14368:	f7ed f90c 	bl	1584 <vstr_add_byte>
            continue;
   1436c:	e268      	b.n	14840 <str_modulo_format+0x5e8>
        }

        // Dictionary value lookup
        if (*str == '(') {
   1436e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
   14372:	781b      	ldrb	r3, [r3, #0]
   14374:	2b28      	cmp	r3, #40	; 0x28
   14376:	d136      	bne.n	143e6 <str_modulo_format+0x18e>
            if (dict == MP_OBJ_NULL) {
   14378:	683b      	ldr	r3, [r7, #0]
   1437a:	2b00      	cmp	r3, #0
   1437c:	d102      	bne.n	14384 <str_modulo_format+0x12c>
                mp_raise_TypeError("format requires a dict");
   1437e:	488b      	ldr	r0, [pc, #556]	; (145ac <str_modulo_format+0x354>)
   14380:	f7f8 fdd0 	bl	cf24 <mp_raise_TypeError>
            }
            arg_i = 1; // we used up the single dict argument
   14384:	2301      	movs	r3, #1
   14386:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
            const byte *key = ++str;
   1438a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
   1438e:	3301      	adds	r3, #1
   14390:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   14394:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
   14398:	663b      	str	r3, [r7, #96]	; 0x60
            while (*str != ')') {
   1439a:	e00b      	b.n	143b4 <str_modulo_format+0x15c>
                if (str >= top) {
   1439c:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
   143a0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   143a2:	429a      	cmp	r2, r3
   143a4:	d301      	bcc.n	143aa <str_modulo_format+0x152>
                    if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
                        terse_str_format_value_error();
   143a6:	f7ff fa36 	bl	13816 <terse_str_format_value_error>
                    } else {
                        mp_raise_ValueError("incomplete format key");
                    }
                }
                ++str;
   143aa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
   143ae:	3301      	adds	r3, #1
   143b0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
            while (*str != ')') {
   143b4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
   143b8:	781b      	ldrb	r3, [r3, #0]
   143ba:	2b29      	cmp	r3, #41	; 0x29
   143bc:	d1ee      	bne.n	1439c <str_modulo_format+0x144>
            }
            mp_obj_t k_obj = mp_obj_new_str_via_qstr((const char*)key, str - key);
   143be:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
   143c2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   143c4:	1ad3      	subs	r3, r2, r3
   143c6:	4619      	mov	r1, r3
   143c8:	6e38      	ldr	r0, [r7, #96]	; 0x60
   143ca:	f000 fe7b 	bl	150c4 <mp_obj_new_str_via_qstr>
   143ce:	65f8      	str	r0, [r7, #92]	; 0x5c
            arg = mp_obj_dict_get(dict, k_obj);
   143d0:	6df9      	ldr	r1, [r7, #92]	; 0x5c
   143d2:	6838      	ldr	r0, [r7, #0]
   143d4:	f7fa f950 	bl	e678 <mp_obj_dict_get>
   143d8:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
            str++;
   143dc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
   143e0:	3301      	adds	r3, #1
   143e2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
        }

        int flags = 0;
   143e6:	2300      	movs	r3, #0
   143e8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
        char fill = ' ';
   143ec:	2320      	movs	r3, #32
   143ee:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
        int alt = 0;
   143f2:	2300      	movs	r3, #0
   143f4:	67bb      	str	r3, [r7, #120]	; 0x78
        while (str < top) {
   143f6:	e03e      	b.n	14476 <str_modulo_format+0x21e>
            if (*str == '-')      flags |= PF_FLAG_LEFT_ADJUST;
   143f8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
   143fc:	781b      	ldrb	r3, [r3, #0]
   143fe:	2b2d      	cmp	r3, #45	; 0x2d
   14400:	d106      	bne.n	14410 <str_modulo_format+0x1b8>
   14402:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
   14406:	f043 0301 	orr.w	r3, r3, #1
   1440a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   1440e:	e02d      	b.n	1446c <str_modulo_format+0x214>
            else if (*str == '+') flags |= PF_FLAG_SHOW_SIGN;
   14410:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
   14414:	781b      	ldrb	r3, [r3, #0]
   14416:	2b2b      	cmp	r3, #43	; 0x2b
   14418:	d106      	bne.n	14428 <str_modulo_format+0x1d0>
   1441a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
   1441e:	f043 0302 	orr.w	r3, r3, #2
   14422:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   14426:	e021      	b.n	1446c <str_modulo_format+0x214>
            else if (*str == ' ') flags |= PF_FLAG_SPACE_SIGN;
   14428:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
   1442c:	781b      	ldrb	r3, [r3, #0]
   1442e:	2b20      	cmp	r3, #32
   14430:	d106      	bne.n	14440 <str_modulo_format+0x1e8>
   14432:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
   14436:	f043 0304 	orr.w	r3, r3, #4
   1443a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   1443e:	e015      	b.n	1446c <str_modulo_format+0x214>
            else if (*str == '#') alt = PF_FLAG_SHOW_PREFIX;
   14440:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
   14444:	781b      	ldrb	r3, [r3, #0]
   14446:	2b23      	cmp	r3, #35	; 0x23
   14448:	d102      	bne.n	14450 <str_modulo_format+0x1f8>
   1444a:	2310      	movs	r3, #16
   1444c:	67bb      	str	r3, [r7, #120]	; 0x78
   1444e:	e00d      	b.n	1446c <str_modulo_format+0x214>
            else if (*str == '0') {
   14450:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
   14454:	781b      	ldrb	r3, [r3, #0]
   14456:	2b30      	cmp	r3, #48	; 0x30
   14458:	d113      	bne.n	14482 <str_modulo_format+0x22a>
                flags |= PF_FLAG_PAD_AFTER_SIGN;
   1445a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
   1445e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   14462:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                fill = '0';
   14466:	2330      	movs	r3, #48	; 0x30
   14468:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            } else break;
            str++;
   1446c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
   14470:	3301      	adds	r3, #1
   14472:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
        while (str < top) {
   14476:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
   1447a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   1447c:	429a      	cmp	r2, r3
   1447e:	d3bb      	bcc.n	143f8 <str_modulo_format+0x1a0>
   14480:	e000      	b.n	14484 <str_modulo_format+0x22c>
            } else break;
   14482:	bf00      	nop
        }
        // parse width, if it exists
        int width = 0;
   14484:	2300      	movs	r3, #0
   14486:	63bb      	str	r3, [r7, #56]	; 0x38
        if (str < top) {
   14488:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
   1448c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   1448e:	429a      	cmp	r2, r3
   14490:	d227      	bcs.n	144e2 <str_modulo_format+0x28a>
            if (*str == '*') {
   14492:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
   14496:	781b      	ldrb	r3, [r3, #0]
   14498:	2b2a      	cmp	r3, #42	; 0x2a
   1449a:	d118      	bne.n	144ce <str_modulo_format+0x276>
                if (arg_i >= n_args) {
   1449c:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
   144a0:	68bb      	ldr	r3, [r7, #8]
   144a2:	429a      	cmp	r2, r3
   144a4:	d271      	bcs.n	1458a <str_modulo_format+0x332>
                    goto not_enough_args;
                }
                width = mp_obj_get_int(args[arg_i++]);
   144a6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
   144aa:	1c5a      	adds	r2, r3, #1
   144ac:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
   144b0:	009b      	lsls	r3, r3, #2
   144b2:	687a      	ldr	r2, [r7, #4]
   144b4:	4413      	add	r3, r2
   144b6:	681b      	ldr	r3, [r3, #0]
   144b8:	4618      	mov	r0, r3
   144ba:	f7f9 fb25 	bl	db08 <mp_obj_get_int>
   144be:	4603      	mov	r3, r0
   144c0:	63bb      	str	r3, [r7, #56]	; 0x38
                str++;
   144c2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
   144c6:	3301      	adds	r3, #1
   144c8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   144cc:	e009      	b.n	144e2 <str_modulo_format+0x28a>
            } else {
                str = (const byte*)str_to_int((const char*)str, (const char*)top, &width);
   144ce:	f107 0338 	add.w	r3, r7, #56	; 0x38
   144d2:	461a      	mov	r2, r3
   144d4:	6e79      	ldr	r1, [r7, #100]	; 0x64
   144d6:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
   144da:	f7ff f8e6 	bl	136aa <str_to_int>
   144de:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
            }
        }
        int prec = -1;
   144e2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   144e6:	637b      	str	r3, [r7, #52]	; 0x34
        if (str < top && *str == '.') {
   144e8:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
   144ec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   144ee:	429a      	cmp	r2, r3
   144f0:	d238      	bcs.n	14564 <str_modulo_format+0x30c>
   144f2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
   144f6:	781b      	ldrb	r3, [r3, #0]
   144f8:	2b2e      	cmp	r3, #46	; 0x2e
   144fa:	d133      	bne.n	14564 <str_modulo_format+0x30c>
            if (++str < top) {
   144fc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
   14500:	3301      	adds	r3, #1
   14502:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   14506:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
   1450a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   1450c:	429a      	cmp	r2, r3
   1450e:	d229      	bcs.n	14564 <str_modulo_format+0x30c>
                if (*str == '*') {
   14510:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
   14514:	781b      	ldrb	r3, [r3, #0]
   14516:	2b2a      	cmp	r3, #42	; 0x2a
   14518:	d118      	bne.n	1454c <str_modulo_format+0x2f4>
                    if (arg_i >= n_args) {
   1451a:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
   1451e:	68bb      	ldr	r3, [r7, #8]
   14520:	429a      	cmp	r2, r3
   14522:	d234      	bcs.n	1458e <str_modulo_format+0x336>
                        goto not_enough_args;
                    }
                    prec = mp_obj_get_int(args[arg_i++]);
   14524:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
   14528:	1c5a      	adds	r2, r3, #1
   1452a:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
   1452e:	009b      	lsls	r3, r3, #2
   14530:	687a      	ldr	r2, [r7, #4]
   14532:	4413      	add	r3, r2
   14534:	681b      	ldr	r3, [r3, #0]
   14536:	4618      	mov	r0, r3
   14538:	f7f9 fae6 	bl	db08 <mp_obj_get_int>
   1453c:	4603      	mov	r3, r0
   1453e:	637b      	str	r3, [r7, #52]	; 0x34
                    str++;
   14540:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
   14544:	3301      	adds	r3, #1
   14546:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   1454a:	e00b      	b.n	14564 <str_modulo_format+0x30c>
                } else {
                    prec = 0;
   1454c:	2300      	movs	r3, #0
   1454e:	637b      	str	r3, [r7, #52]	; 0x34
                    str = (const byte*)str_to_int((const char*)str, (const char*)top, &prec);
   14550:	f107 0334 	add.w	r3, r7, #52	; 0x34
   14554:	461a      	mov	r2, r3
   14556:	6e79      	ldr	r1, [r7, #100]	; 0x64
   14558:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
   1455c:	f7ff f8a5 	bl	136aa <str_to_int>
   14560:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
                }
            }
        }

        if (str >= top) {
   14564:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
   14568:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   1456a:	429a      	cmp	r2, r3
   1456c:	d303      	bcc.n	14576 <str_modulo_format+0x31e>
   1456e:	e000      	b.n	14572 <str_modulo_format+0x31a>
            goto incomplete_format;
   14570:	bf00      	nop
incomplete_format:
            if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
                terse_str_format_value_error();
   14572:	f7ff f950 	bl	13816 <terse_str_format_value_error>
                mp_raise_ValueError("incomplete format");
            }
        }

        // Tuple value lookup
        if (arg == MP_OBJ_NULL) {
   14576:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
   1457a:	2b00      	cmp	r3, #0
   1457c:	d125      	bne.n	145ca <str_modulo_format+0x372>
            if (arg_i >= n_args) {
   1457e:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
   14582:	68bb      	ldr	r3, [r7, #8]
   14584:	429a      	cmp	r2, r3
   14586:	d315      	bcc.n	145b4 <str_modulo_format+0x35c>
   14588:	e002      	b.n	14590 <str_modulo_format+0x338>
                    goto not_enough_args;
   1458a:	bf00      	nop
   1458c:	e000      	b.n	14590 <str_modulo_format+0x338>
                        goto not_enough_args;
   1458e:	bf00      	nop
not_enough_args:
                mp_raise_TypeError("not enough arguments for format string");
   14590:	4807      	ldr	r0, [pc, #28]	; (145b0 <str_modulo_format+0x358>)
   14592:	f7f8 fcc7 	bl	cf24 <mp_raise_TypeError>
   14596:	bf00      	nop
   14598:	000126c3 	.word	0x000126c3
   1459c:	00021714 	.word	0x00021714
   145a0:	00021a70 	.word	0x00021a70
   145a4:	0002148c 	.word	0x0002148c
   145a8:	000219a0 	.word	0x000219a0
   145ac:	0002179c 	.word	0x0002179c
   145b0:	000217b4 	.word	0x000217b4
            }
            arg = args[arg_i++];
   145b4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
   145b8:	1c5a      	adds	r2, r3, #1
   145ba:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
   145be:	009b      	lsls	r3, r3, #2
   145c0:	687a      	ldr	r2, [r7, #4]
   145c2:	4413      	add	r3, r2
   145c4:	681b      	ldr	r3, [r3, #0]
   145c6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
        }
        switch (*str) {
   145ca:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
   145ce:	781b      	ldrb	r3, [r3, #0]
   145d0:	3b58      	subs	r3, #88	; 0x58
   145d2:	2b20      	cmp	r3, #32
   145d4:	f200 8132 	bhi.w	1483c <str_modulo_format+0x5e4>
   145d8:	a201      	add	r2, pc, #4	; (adr r2, 145e0 <str_modulo_format+0x388>)
   145da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   145de:	bf00      	nop
   145e0:	00014809 	.word	0x00014809
   145e4:	0001483d 	.word	0x0001483d
   145e8:	0001483d 	.word	0x0001483d
   145ec:	0001483d 	.word	0x0001483d
   145f0:	0001483d 	.word	0x0001483d
   145f4:	0001483d 	.word	0x0001483d
   145f8:	0001483d 	.word	0x0001483d
   145fc:	0001483d 	.word	0x0001483d
   14600:	0001483d 	.word	0x0001483d
   14604:	0001483d 	.word	0x0001483d
   14608:	0001483d 	.word	0x0001483d
   1460c:	00014665 	.word	0x00014665
   14610:	00014705 	.word	0x00014705
   14614:	0001483d 	.word	0x0001483d
   14618:	0001483d 	.word	0x0001483d
   1461c:	0001483d 	.word	0x0001483d
   14620:	0001483d 	.word	0x0001483d
   14624:	00014705 	.word	0x00014705
   14628:	0001483d 	.word	0x0001483d
   1462c:	0001483d 	.word	0x0001483d
   14630:	0001483d 	.word	0x0001483d
   14634:	0001483d 	.word	0x0001483d
   14638:	0001483d 	.word	0x0001483d
   1463c:	00014731 	.word	0x00014731
   14640:	0001483d 	.word	0x0001483d
   14644:	0001483d 	.word	0x0001483d
   14648:	00014769 	.word	0x00014769
   1464c:	00014769 	.word	0x00014769
   14650:	0001483d 	.word	0x0001483d
   14654:	00014705 	.word	0x00014705
   14658:	0001483d 	.word	0x0001483d
   1465c:	0001483d 	.word	0x0001483d
   14660:	00014809 	.word	0x00014809
            case 'c':
                if (MP_OBJ_IS_STR(arg)) {
   14664:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
   14668:	f7fd fcf2 	bl	12050 <MP_OBJ_IS_QSTR>
   1466c:	4603      	mov	r3, r0
   1466e:	2b00      	cmp	r3, #0
   14670:	d10c      	bne.n	1468c <str_modulo_format+0x434>
   14672:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
   14676:	f7fd fcfd 	bl	12074 <MP_OBJ_IS_OBJ>
   1467a:	4603      	mov	r3, r0
   1467c:	2b00      	cmp	r3, #0
   1467e:	d021      	beq.n	146c4 <str_modulo_format+0x46c>
   14680:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
   14684:	681b      	ldr	r3, [r3, #0]
   14686:	4a81      	ldr	r2, [pc, #516]	; (1488c <str_modulo_format+0x634>)
   14688:	4293      	cmp	r3, r2
   1468a:	d11b      	bne.n	146c4 <str_modulo_format+0x46c>
                    size_t slen;
                    const char *s = mp_obj_str_get_data(arg, &slen);
   1468c:	f107 0330 	add.w	r3, r7, #48	; 0x30
   14690:	4619      	mov	r1, r3
   14692:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
   14696:	f000 fee7 	bl	15468 <mp_obj_str_get_data>
   1469a:	65b8      	str	r0, [r7, #88]	; 0x58
                    if (slen != 1) {
   1469c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1469e:	2b01      	cmp	r3, #1
   146a0:	d002      	beq.n	146a8 <str_modulo_format+0x450>
                        mp_raise_TypeError("%%c requires int or char");
   146a2:	487b      	ldr	r0, [pc, #492]	; (14890 <str_modulo_format+0x638>)
   146a4:	f7f8 fc3e 	bl	cf24 <mp_raise_TypeError>
                    }
                    mp_print_strn(&print, s, 1, flags, ' ', width);
   146a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   146aa:	f107 003c 	add.w	r0, r7, #60	; 0x3c
   146ae:	9301      	str	r3, [sp, #4]
   146b0:	2320      	movs	r3, #32
   146b2:	9300      	str	r3, [sp, #0]
   146b4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
   146b8:	2201      	movs	r2, #1
   146ba:	6db9      	ldr	r1, [r7, #88]	; 0x58
   146bc:	f7ed f8e0 	bl	1880 <mp_print_strn>
                if (MP_OBJ_IS_STR(arg)) {
   146c0:	bf00      	nop
                    char ch = mp_obj_get_int(arg);
                    mp_print_strn(&print, &ch, 1, flags, ' ', width);
                } else {
                    mp_raise_TypeError("integer required");
                }
                break;
   146c2:	e0bd      	b.n	14840 <str_modulo_format+0x5e8>
                } else if (arg_looks_integer(arg)) {
   146c4:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
   146c8:	f7ff f860 	bl	1378c <arg_looks_integer>
   146cc:	4603      	mov	r3, r0
   146ce:	2b00      	cmp	r3, #0
   146d0:	d015      	beq.n	146fe <str_modulo_format+0x4a6>
                    char ch = mp_obj_get_int(arg);
   146d2:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
   146d6:	f7f9 fa17 	bl	db08 <mp_obj_get_int>
   146da:	4603      	mov	r3, r0
   146dc:	b2db      	uxtb	r3, r3
   146de:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                    mp_print_strn(&print, &ch, 1, flags, ' ', width);
   146e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   146e4:	f107 012f 	add.w	r1, r7, #47	; 0x2f
   146e8:	f107 003c 	add.w	r0, r7, #60	; 0x3c
   146ec:	9301      	str	r3, [sp, #4]
   146ee:	2320      	movs	r3, #32
   146f0:	9300      	str	r3, [sp, #0]
   146f2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
   146f6:	2201      	movs	r2, #1
   146f8:	f7ed f8c2 	bl	1880 <mp_print_strn>
                break;
   146fc:	e0a0      	b.n	14840 <str_modulo_format+0x5e8>
                    mp_raise_TypeError("integer required");
   146fe:	4865      	ldr	r0, [pc, #404]	; (14894 <str_modulo_format+0x63c>)
   14700:	f7f8 fc10 	bl	cf24 <mp_raise_TypeError>

            case 'd':
            case 'i':
            case 'u':
                mp_print_mp_int(&print, arg_as_int(arg), 10, 'a', flags, fill, width, prec);
   14704:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
   14708:	f7ff f87a 	bl	13800 <arg_as_int>
   1470c:	4601      	mov	r1, r0
   1470e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   14710:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   14712:	f107 003c 	add.w	r0, r7, #60	; 0x3c
   14716:	9203      	str	r2, [sp, #12]
   14718:	9302      	str	r3, [sp, #8]
   1471a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
   1471e:	9301      	str	r3, [sp, #4]
   14720:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
   14724:	9300      	str	r3, [sp, #0]
   14726:	2361      	movs	r3, #97	; 0x61
   14728:	220a      	movs	r2, #10
   1472a:	f7ed f9e8 	bl	1afe <mp_print_mp_int>
                break;
   1472e:	e087      	b.n	14840 <str_modulo_format+0x5e8>
                mp_print_float(&print, mp_obj_get_float(arg), *str, flags, fill, width, prec);
                break;
#endif

            case 'o':
                if (alt) {
   14730:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   14732:	2b00      	cmp	r3, #0
   14734:	d005      	beq.n	14742 <str_modulo_format+0x4ea>
                    flags |= (PF_FLAG_SHOW_PREFIX | PF_FLAG_SHOW_OCTAL_LETTER);
   14736:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
   1473a:	f443 7304 	orr.w	r3, r3, #528	; 0x210
   1473e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                }
                mp_print_mp_int(&print, arg, 8, 'a', flags, fill, width, prec);
   14742:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   14744:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   14746:	f107 003c 	add.w	r0, r7, #60	; 0x3c
   1474a:	9203      	str	r2, [sp, #12]
   1474c:	9302      	str	r3, [sp, #8]
   1474e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
   14752:	9301      	str	r3, [sp, #4]
   14754:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
   14758:	9300      	str	r3, [sp, #0]
   1475a:	2361      	movs	r3, #97	; 0x61
   1475c:	2208      	movs	r2, #8
   1475e:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
   14762:	f7ed f9cc 	bl	1afe <mp_print_mp_int>
                break;
   14766:	e06b      	b.n	14840 <str_modulo_format+0x5e8>
            case 'r':
            case 's':
            {
                vstr_t arg_vstr;
                mp_print_t arg_print;
                vstr_init_print(&arg_vstr, 16, &arg_print);
   14768:	f107 0214 	add.w	r2, r7, #20
   1476c:	f107 031c 	add.w	r3, r7, #28
   14770:	2110      	movs	r1, #16
   14772:	4618      	mov	r0, r3
   14774:	f7ec fe01 	bl	137a <vstr_init_print>
                mp_print_kind_t print_kind = (*str == 'r' ? PRINT_REPR : PRINT_STR);
   14778:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
   1477c:	781b      	ldrb	r3, [r3, #0]
   1477e:	2b72      	cmp	r3, #114	; 0x72
   14780:	bf0c      	ite	eq
   14782:	2301      	moveq	r3, #1
   14784:	2300      	movne	r3, #0
   14786:	b2db      	uxtb	r3, r3
   14788:	677b      	str	r3, [r7, #116]	; 0x74
                if (print_kind == PRINT_STR && is_bytes && MP_OBJ_IS_TYPE(arg, &mp_type_bytes)) {
   1478a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   1478c:	2b00      	cmp	r3, #0
   1478e:	d112      	bne.n	147b6 <str_modulo_format+0x55e>
   14790:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
   14794:	2b00      	cmp	r3, #0
   14796:	d00e      	beq.n	147b6 <str_modulo_format+0x55e>
   14798:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
   1479c:	f7fd fc6a 	bl	12074 <MP_OBJ_IS_OBJ>
   147a0:	4603      	mov	r3, r0
   147a2:	2b00      	cmp	r3, #0
   147a4:	d007      	beq.n	147b6 <str_modulo_format+0x55e>
   147a6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
   147aa:	681b      	ldr	r3, [r3, #0]
   147ac:	4a3a      	ldr	r2, [pc, #232]	; (14898 <str_modulo_format+0x640>)
   147ae:	4293      	cmp	r3, r2
   147b0:	d101      	bne.n	147b6 <str_modulo_format+0x55e>
                    // If we have something like b"%s" % b"1", bytes arg should be
                    // printed undecorated.
                    print_kind = PRINT_RAW;
   147b2:	2304      	movs	r3, #4
   147b4:	677b      	str	r3, [r7, #116]	; 0x74
                }
                mp_obj_print_helper(&arg_print, arg, print_kind);
   147b6:	f107 0314 	add.w	r3, r7, #20
   147ba:	6f7a      	ldr	r2, [r7, #116]	; 0x74
   147bc:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
   147c0:	4618      	mov	r0, r3
   147c2:	f7f8 fff6 	bl	d7b2 <mp_obj_print_helper>
                uint vlen = arg_vstr.len;
   147c6:	6a3b      	ldr	r3, [r7, #32]
   147c8:	673b      	str	r3, [r7, #112]	; 0x70
                if (prec < 0) {
   147ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   147cc:	2b00      	cmp	r3, #0
   147ce:	da01      	bge.n	147d4 <str_modulo_format+0x57c>
                    prec = vlen;
   147d0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   147d2:	637b      	str	r3, [r7, #52]	; 0x34
                }
                if (vlen > (uint)prec) {
   147d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   147d6:	461a      	mov	r2, r3
   147d8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   147da:	4293      	cmp	r3, r2
   147dc:	d901      	bls.n	147e2 <str_modulo_format+0x58a>
                    vlen = prec;
   147de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   147e0:	673b      	str	r3, [r7, #112]	; 0x70
                }
                mp_print_strn(&print, arg_vstr.buf, vlen, flags, ' ', width);
   147e2:	6a79      	ldr	r1, [r7, #36]	; 0x24
   147e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   147e6:	f107 003c 	add.w	r0, r7, #60	; 0x3c
   147ea:	9301      	str	r3, [sp, #4]
   147ec:	2320      	movs	r3, #32
   147ee:	9300      	str	r3, [sp, #0]
   147f0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
   147f4:	6f3a      	ldr	r2, [r7, #112]	; 0x70
   147f6:	f7ed f843 	bl	1880 <mp_print_strn>
                vstr_clear(&arg_vstr);
   147fa:	f107 031c 	add.w	r3, r7, #28
   147fe:	4618      	mov	r0, r3
   14800:	f7ec fdd2 	bl	13a8 <vstr_clear>
                break;
   14804:	bf00      	nop
   14806:	e01b      	b.n	14840 <str_modulo_format+0x5e8>
            }

            case 'X':
            case 'x':
                mp_print_mp_int(&print, arg, 16, *str - ('X' - 'A'), flags | alt, fill, width, prec);
   14808:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
   1480c:	781b      	ldrb	r3, [r3, #0]
   1480e:	f1a3 0417 	sub.w	r4, r3, #23
   14812:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
   14816:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   14818:	4313      	orrs	r3, r2
   1481a:	6bba      	ldr	r2, [r7, #56]	; 0x38
   1481c:	6b79      	ldr	r1, [r7, #52]	; 0x34
   1481e:	f107 003c 	add.w	r0, r7, #60	; 0x3c
   14822:	9103      	str	r1, [sp, #12]
   14824:	9202      	str	r2, [sp, #8]
   14826:	f897 207f 	ldrb.w	r2, [r7, #127]	; 0x7f
   1482a:	9201      	str	r2, [sp, #4]
   1482c:	9300      	str	r3, [sp, #0]
   1482e:	4623      	mov	r3, r4
   14830:	2210      	movs	r2, #16
   14832:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
   14836:	f7ed f962 	bl	1afe <mp_print_mp_int>
                break;
   1483a:	e001      	b.n	14840 <str_modulo_format+0x5e8>

            default:
                if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
                    terse_str_format_value_error();
   1483c:	f7fe ffeb 	bl	13816 <terse_str_format_value_error>
    for (const byte *top = str + len; str < top; str++) {
   14840:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
   14844:	3301      	adds	r3, #1
   14846:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   1484a:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
   1484e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   14850:	429a      	cmp	r2, r3
   14852:	f4ff ad63 	bcc.w	1431c <str_modulo_format+0xc4>
                        *str, *str, str - start_str));
                }
        }
    }

    if (arg_i != n_args) {
   14856:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
   1485a:	68bb      	ldr	r3, [r7, #8]
   1485c:	429a      	cmp	r2, r3
   1485e:	d002      	beq.n	14866 <str_modulo_format+0x60e>
        mp_raise_TypeError("not all arguments converted during string formatting");
   14860:	480e      	ldr	r0, [pc, #56]	; (1489c <str_modulo_format+0x644>)
   14862:	f7f8 fb5f 	bl	cf24 <mp_raise_TypeError>
    }

    return mp_obj_new_str_from_vstr(is_bytes ? &mp_type_bytes : &mp_type_str, &vstr);
   14866:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
   1486a:	2b00      	cmp	r3, #0
   1486c:	d001      	beq.n	14872 <str_modulo_format+0x61a>
   1486e:	4b0a      	ldr	r3, [pc, #40]	; (14898 <str_modulo_format+0x640>)
   14870:	e000      	b.n	14874 <str_modulo_format+0x61c>
   14872:	4b06      	ldr	r3, [pc, #24]	; (1488c <str_modulo_format+0x634>)
   14874:	f107 0244 	add.w	r2, r7, #68	; 0x44
   14878:	4611      	mov	r1, r2
   1487a:	4618      	mov	r0, r3
   1487c:	f000 fc33 	bl	150e6 <mp_obj_new_str_from_vstr>
   14880:	4603      	mov	r3, r0
}
   14882:	4618      	mov	r0, r3
   14884:	3794      	adds	r7, #148	; 0x94
   14886:	46bd      	mov	sp, r7
   14888:	bd90      	pop	{r4, r7, pc}
   1488a:	bf00      	nop
   1488c:	00021964 	.word	0x00021964
   14890:	000217dc 	.word	0x000217dc
   14894:	000217f8 	.word	0x000217f8
   14898:	000219a0 	.word	0x000219a0
   1489c:	0002180c 	.word	0x0002180c

000148a0 <str_replace>:

// The implementation is optimized, returning the original string if there's
// nothing to replace.
STATIC mp_obj_t str_replace(size_t n_args, const mp_obj_t *args) {
   148a0:	b580      	push	{r7, lr}
   148a2:	b096      	sub	sp, #88	; 0x58
   148a4:	af02      	add	r7, sp, #8
   148a6:	6078      	str	r0, [r7, #4]
   148a8:	6039      	str	r1, [r7, #0]
    mp_check_self(MP_OBJ_IS_STR_OR_BYTES(args[0]));
   148aa:	683b      	ldr	r3, [r7, #0]
   148ac:	681b      	ldr	r3, [r3, #0]
   148ae:	4618      	mov	r0, r3
   148b0:	f7fd fbce 	bl	12050 <MP_OBJ_IS_QSTR>
   148b4:	4603      	mov	r3, r0
   148b6:	2b00      	cmp	r3, #0
   148b8:	d115      	bne.n	148e6 <str_replace+0x46>
   148ba:	683b      	ldr	r3, [r7, #0]
   148bc:	681b      	ldr	r3, [r3, #0]
   148be:	4618      	mov	r0, r3
   148c0:	f7fd fbd8 	bl	12074 <MP_OBJ_IS_OBJ>
   148c4:	4603      	mov	r3, r0
   148c6:	2b00      	cmp	r3, #0
   148c8:	d006      	beq.n	148d8 <str_replace+0x38>
   148ca:	683b      	ldr	r3, [r7, #0]
   148cc:	681b      	ldr	r3, [r3, #0]
   148ce:	681b      	ldr	r3, [r3, #0]
   148d0:	699b      	ldr	r3, [r3, #24]
   148d2:	4aa4      	ldr	r2, [pc, #656]	; (14b64 <str_replace+0x2c4>)
   148d4:	4293      	cmp	r3, r2
   148d6:	d006      	beq.n	148e6 <str_replace+0x46>
   148d8:	4ba3      	ldr	r3, [pc, #652]	; (14b68 <str_replace+0x2c8>)
   148da:	4aa4      	ldr	r2, [pc, #656]	; (14b6c <str_replace+0x2cc>)
   148dc:	f240 6131 	movw	r1, #1585	; 0x631
   148e0:	48a3      	ldr	r0, [pc, #652]	; (14b70 <str_replace+0x2d0>)
   148e2:	f006 fc6b 	bl	1b1bc <__assert_func>

    mp_int_t max_rep = -1;
   148e6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   148ea:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (n_args == 4) {
   148ec:	687b      	ldr	r3, [r7, #4]
   148ee:	2b04      	cmp	r3, #4
   148f0:	d112      	bne.n	14918 <str_replace+0x78>
        max_rep = mp_obj_get_int(args[3]);
   148f2:	683b      	ldr	r3, [r7, #0]
   148f4:	330c      	adds	r3, #12
   148f6:	681b      	ldr	r3, [r3, #0]
   148f8:	4618      	mov	r0, r3
   148fa:	f7f9 f905 	bl	db08 <mp_obj_get_int>
   148fe:	64f8      	str	r0, [r7, #76]	; 0x4c
        if (max_rep == 0) {
   14900:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   14902:	2b00      	cmp	r3, #0
   14904:	d102      	bne.n	1490c <str_replace+0x6c>
            return args[0];
   14906:	683b      	ldr	r3, [r7, #0]
   14908:	681b      	ldr	r3, [r3, #0]
   1490a:	e127      	b.n	14b5c <str_replace+0x2bc>
        } else if (max_rep < 0) {
   1490c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   1490e:	2b00      	cmp	r3, #0
   14910:	da02      	bge.n	14918 <str_replace+0x78>
            max_rep = -1;
   14912:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   14916:	64fb      	str	r3, [r7, #76]	; 0x4c

    // if max_rep is still -1 by this point we will need to do all possible replacements

    // check argument types

    const mp_obj_type_t *self_type = mp_obj_get_type(args[0]);
   14918:	683b      	ldr	r3, [r7, #0]
   1491a:	681b      	ldr	r3, [r3, #0]
   1491c:	4618      	mov	r0, r3
   1491e:	f7f8 ff17 	bl	d750 <mp_obj_get_type>
   14922:	6278      	str	r0, [r7, #36]	; 0x24

    if (mp_obj_get_type(args[1]) != self_type) {
   14924:	683b      	ldr	r3, [r7, #0]
   14926:	3304      	adds	r3, #4
   14928:	681b      	ldr	r3, [r3, #0]
   1492a:	4618      	mov	r0, r3
   1492c:	f7f8 ff10 	bl	d750 <mp_obj_get_type>
   14930:	4602      	mov	r2, r0
   14932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   14934:	429a      	cmp	r2, r3
   14936:	d005      	beq.n	14944 <str_replace+0xa4>
        bad_implicit_conversion(args[1]);
   14938:	683b      	ldr	r3, [r7, #0]
   1493a:	3304      	adds	r3, #4
   1493c:	681b      	ldr	r3, [r3, #0]
   1493e:	4618      	mov	r0, r3
   14940:	f000 fd23 	bl	1538a <bad_implicit_conversion>
    }

    if (mp_obj_get_type(args[2]) != self_type) {
   14944:	683b      	ldr	r3, [r7, #0]
   14946:	3308      	adds	r3, #8
   14948:	681b      	ldr	r3, [r3, #0]
   1494a:	4618      	mov	r0, r3
   1494c:	f7f8 ff00 	bl	d750 <mp_obj_get_type>
   14950:	4602      	mov	r2, r0
   14952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   14954:	429a      	cmp	r2, r3
   14956:	d005      	beq.n	14964 <str_replace+0xc4>
        bad_implicit_conversion(args[2]);
   14958:	683b      	ldr	r3, [r7, #0]
   1495a:	3308      	adds	r3, #8
   1495c:	681b      	ldr	r3, [r3, #0]
   1495e:	4618      	mov	r0, r3
   14960:	f000 fd13 	bl	1538a <bad_implicit_conversion>
    }

    // extract string data

    GET_STR_DATA_LEN(args[0], str, str_len);
   14964:	683b      	ldr	r3, [r7, #0]
   14966:	681b      	ldr	r3, [r3, #0]
   14968:	4618      	mov	r0, r3
   1496a:	f7fd fb71 	bl	12050 <MP_OBJ_IS_QSTR>
   1496e:	4603      	mov	r3, r0
   14970:	2b00      	cmp	r3, #0
   14972:	d00a      	beq.n	1498a <str_replace+0xea>
   14974:	683b      	ldr	r3, [r7, #0]
   14976:	681b      	ldr	r3, [r3, #0]
   14978:	089b      	lsrs	r3, r3, #2
   1497a:	f107 0220 	add.w	r2, r7, #32
   1497e:	4611      	mov	r1, r2
   14980:	4618      	mov	r0, r3
   14982:	f7ec fc35 	bl	11f0 <qstr_data>
   14986:	64b8      	str	r0, [r7, #72]	; 0x48
   14988:	e007      	b.n	1499a <str_replace+0xfa>
   1498a:	683b      	ldr	r3, [r7, #0]
   1498c:	681b      	ldr	r3, [r3, #0]
   1498e:	689b      	ldr	r3, [r3, #8]
   14990:	623b      	str	r3, [r7, #32]
   14992:	683b      	ldr	r3, [r7, #0]
   14994:	681b      	ldr	r3, [r3, #0]
   14996:	68db      	ldr	r3, [r3, #12]
   14998:	64bb      	str	r3, [r7, #72]	; 0x48
    GET_STR_DATA_LEN(args[1], old, old_len);
   1499a:	683b      	ldr	r3, [r7, #0]
   1499c:	3304      	adds	r3, #4
   1499e:	681b      	ldr	r3, [r3, #0]
   149a0:	4618      	mov	r0, r3
   149a2:	f7fd fb55 	bl	12050 <MP_OBJ_IS_QSTR>
   149a6:	4603      	mov	r3, r0
   149a8:	2b00      	cmp	r3, #0
   149aa:	d00b      	beq.n	149c4 <str_replace+0x124>
   149ac:	683b      	ldr	r3, [r7, #0]
   149ae:	3304      	adds	r3, #4
   149b0:	681b      	ldr	r3, [r3, #0]
   149b2:	089b      	lsrs	r3, r3, #2
   149b4:	f107 021c 	add.w	r2, r7, #28
   149b8:	4611      	mov	r1, r2
   149ba:	4618      	mov	r0, r3
   149bc:	f7ec fc18 	bl	11f0 <qstr_data>
   149c0:	6478      	str	r0, [r7, #68]	; 0x44
   149c2:	e009      	b.n	149d8 <str_replace+0x138>
   149c4:	683b      	ldr	r3, [r7, #0]
   149c6:	3304      	adds	r3, #4
   149c8:	681b      	ldr	r3, [r3, #0]
   149ca:	689b      	ldr	r3, [r3, #8]
   149cc:	61fb      	str	r3, [r7, #28]
   149ce:	683b      	ldr	r3, [r7, #0]
   149d0:	3304      	adds	r3, #4
   149d2:	681b      	ldr	r3, [r3, #0]
   149d4:	68db      	ldr	r3, [r3, #12]
   149d6:	647b      	str	r3, [r7, #68]	; 0x44
    GET_STR_DATA_LEN(args[2], new, new_len);
   149d8:	683b      	ldr	r3, [r7, #0]
   149da:	3308      	adds	r3, #8
   149dc:	681b      	ldr	r3, [r3, #0]
   149de:	4618      	mov	r0, r3
   149e0:	f7fd fb36 	bl	12050 <MP_OBJ_IS_QSTR>
   149e4:	4603      	mov	r3, r0
   149e6:	2b00      	cmp	r3, #0
   149e8:	d00b      	beq.n	14a02 <str_replace+0x162>
   149ea:	683b      	ldr	r3, [r7, #0]
   149ec:	3308      	adds	r3, #8
   149ee:	681b      	ldr	r3, [r3, #0]
   149f0:	089b      	lsrs	r3, r3, #2
   149f2:	f107 0218 	add.w	r2, r7, #24
   149f6:	4611      	mov	r1, r2
   149f8:	4618      	mov	r0, r3
   149fa:	f7ec fbf9 	bl	11f0 <qstr_data>
   149fe:	6438      	str	r0, [r7, #64]	; 0x40
   14a00:	e009      	b.n	14a16 <str_replace+0x176>
   14a02:	683b      	ldr	r3, [r7, #0]
   14a04:	3308      	adds	r3, #8
   14a06:	681b      	ldr	r3, [r3, #0]
   14a08:	689b      	ldr	r3, [r3, #8]
   14a0a:	61bb      	str	r3, [r7, #24]
   14a0c:	683b      	ldr	r3, [r7, #0]
   14a0e:	3308      	adds	r3, #8
   14a10:	681b      	ldr	r3, [r3, #0]
   14a12:	68db      	ldr	r3, [r3, #12]
   14a14:	643b      	str	r3, [r7, #64]	; 0x40

    // old won't exist in str if it's longer, so nothing to replace
    if (old_len > str_len) {
   14a16:	69fa      	ldr	r2, [r7, #28]
   14a18:	6a3b      	ldr	r3, [r7, #32]
   14a1a:	429a      	cmp	r2, r3
   14a1c:	d902      	bls.n	14a24 <str_replace+0x184>
        return args[0];
   14a1e:	683b      	ldr	r3, [r7, #0]
   14a20:	681b      	ldr	r3, [r3, #0]
   14a22:	e09b      	b.n	14b5c <str_replace+0x2bc>
    }

    // data for the replaced string
    byte *data = NULL;
   14a24:	2300      	movs	r3, #0
   14a26:	63fb      	str	r3, [r7, #60]	; 0x3c

    // do 2 passes over the string:
    //   first pass computes the required length of the replaced string
    //   second pass does the replacements
    for (;;) {
        size_t replaced_str_index = 0;
   14a28:	2300      	movs	r3, #0
   14a2a:	63bb      	str	r3, [r7, #56]	; 0x38
        size_t num_replacements_done = 0;
   14a2c:	2300      	movs	r3, #0
   14a2e:	637b      	str	r3, [r7, #52]	; 0x34
        const byte *old_occurrence;
        const byte *offset_ptr = str;
   14a30:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   14a32:	62fb      	str	r3, [r7, #44]	; 0x2c
        size_t str_len_remain = str_len;
   14a34:	6a3b      	ldr	r3, [r7, #32]
   14a36:	62bb      	str	r3, [r7, #40]	; 0x28
        if (old_len == 0) {
   14a38:	69fb      	ldr	r3, [r7, #28]
   14a3a:	2b00      	cmp	r3, #0
   14a3c:	d147      	bne.n	14ace <str_replace+0x22e>
            // if old_str is empty, copy new_str to start of replaced string
            // copy the replacement string
            if (data != NULL) {
   14a3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   14a40:	2b00      	cmp	r3, #0
   14a42:	d005      	beq.n	14a50 <str_replace+0x1b0>
                memcpy(data, new, new_len);
   14a44:	69bb      	ldr	r3, [r7, #24]
   14a46:	461a      	mov	r2, r3
   14a48:	6c39      	ldr	r1, [r7, #64]	; 0x40
   14a4a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
   14a4c:	f006 ffba 	bl	1b9c4 <memcpy>
            }
            replaced_str_index += new_len;
   14a50:	69bb      	ldr	r3, [r7, #24]
   14a52:	6bba      	ldr	r2, [r7, #56]	; 0x38
   14a54:	4413      	add	r3, r2
   14a56:	63bb      	str	r3, [r7, #56]	; 0x38
            num_replacements_done++;
   14a58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   14a5a:	3301      	adds	r3, #1
   14a5c:	637b      	str	r3, [r7, #52]	; 0x34
        }
        while (num_replacements_done != (size_t)max_rep && str_len_remain > 0 && (old_occurrence = find_subbytes(offset_ptr, str_len_remain, old, old_len, 1)) != NULL) {
   14a5e:	e036      	b.n	14ace <str_replace+0x22e>
            if (old_len == 0) {
   14a60:	69fb      	ldr	r3, [r7, #28]
   14a62:	2b00      	cmp	r3, #0
   14a64:	d102      	bne.n	14a6c <str_replace+0x1cc>
                old_occurrence += 1;
   14a66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   14a68:	3301      	adds	r3, #1
   14a6a:	633b      	str	r3, [r7, #48]	; 0x30
            }
            // copy from just after end of last occurrence of to-be-replaced string to right before start of next occurrence
            if (data != NULL) {
   14a6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   14a6e:	2b00      	cmp	r3, #0
   14a70:	d009      	beq.n	14a86 <str_replace+0x1e6>
                memcpy(data + replaced_str_index, offset_ptr, old_occurrence - offset_ptr);
   14a72:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   14a74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   14a76:	18d0      	adds	r0, r2, r3
   14a78:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   14a7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   14a7c:	1ad3      	subs	r3, r2, r3
   14a7e:	461a      	mov	r2, r3
   14a80:	6af9      	ldr	r1, [r7, #44]	; 0x2c
   14a82:	f006 ff9f 	bl	1b9c4 <memcpy>
            }
            replaced_str_index += old_occurrence - offset_ptr;
   14a86:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   14a88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   14a8a:	1ad3      	subs	r3, r2, r3
   14a8c:	461a      	mov	r2, r3
   14a8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   14a90:	4413      	add	r3, r2
   14a92:	63bb      	str	r3, [r7, #56]	; 0x38
            // copy the replacement string
            if (data != NULL) {
   14a94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   14a96:	2b00      	cmp	r3, #0
   14a98:	d007      	beq.n	14aaa <str_replace+0x20a>
                memcpy(data + replaced_str_index, new, new_len);
   14a9a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   14a9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   14a9e:	4413      	add	r3, r2
   14aa0:	69ba      	ldr	r2, [r7, #24]
   14aa2:	6c39      	ldr	r1, [r7, #64]	; 0x40
   14aa4:	4618      	mov	r0, r3
   14aa6:	f006 ff8d 	bl	1b9c4 <memcpy>
            }
            replaced_str_index += new_len;
   14aaa:	69bb      	ldr	r3, [r7, #24]
   14aac:	6bba      	ldr	r2, [r7, #56]	; 0x38
   14aae:	4413      	add	r3, r2
   14ab0:	63bb      	str	r3, [r7, #56]	; 0x38
            offset_ptr = old_occurrence + old_len;
   14ab2:	69fb      	ldr	r3, [r7, #28]
   14ab4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   14ab6:	4413      	add	r3, r2
   14ab8:	62fb      	str	r3, [r7, #44]	; 0x2c
            str_len_remain = str + str_len - offset_ptr;
   14aba:	6a3b      	ldr	r3, [r7, #32]
   14abc:	6cba      	ldr	r2, [r7, #72]	; 0x48
   14abe:	4413      	add	r3, r2
   14ac0:	461a      	mov	r2, r3
   14ac2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   14ac4:	1ad3      	subs	r3, r2, r3
   14ac6:	62bb      	str	r3, [r7, #40]	; 0x28
            num_replacements_done++;
   14ac8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   14aca:	3301      	adds	r3, #1
   14acc:	637b      	str	r3, [r7, #52]	; 0x34
        while (num_replacements_done != (size_t)max_rep && str_len_remain > 0 && (old_occurrence = find_subbytes(offset_ptr, str_len_remain, old, old_len, 1)) != NULL) {
   14ace:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   14ad0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   14ad2:	429a      	cmp	r2, r3
   14ad4:	d00f      	beq.n	14af6 <str_replace+0x256>
   14ad6:	6abb      	ldr	r3, [r7, #40]	; 0x28
   14ad8:	2b00      	cmp	r3, #0
   14ada:	d00c      	beq.n	14af6 <str_replace+0x256>
   14adc:	69fa      	ldr	r2, [r7, #28]
   14ade:	2301      	movs	r3, #1
   14ae0:	9300      	str	r3, [sp, #0]
   14ae2:	4613      	mov	r3, r2
   14ae4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
   14ae6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   14ae8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   14aea:	f7fd fdb1 	bl	12650 <find_subbytes>
   14aee:	6338      	str	r0, [r7, #48]	; 0x30
   14af0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   14af2:	2b00      	cmp	r3, #0
   14af4:	d1b4      	bne.n	14a60 <str_replace+0x1c0>
        }

        // copy from just after end of last occurrence of to-be-replaced string to end of old string
        if (data != NULL) {
   14af6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   14af8:	2b00      	cmp	r3, #0
   14afa:	d007      	beq.n	14b0c <str_replace+0x26c>
            memcpy(data + replaced_str_index, offset_ptr, str_len_remain);
   14afc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   14afe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   14b00:	4413      	add	r3, r2
   14b02:	6aba      	ldr	r2, [r7, #40]	; 0x28
   14b04:	6af9      	ldr	r1, [r7, #44]	; 0x2c
   14b06:	4618      	mov	r0, r3
   14b08:	f006 ff5c 	bl	1b9c4 <memcpy>
        }
        replaced_str_index += str_len_remain;
   14b0c:	6bba      	ldr	r2, [r7, #56]	; 0x38
   14b0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   14b10:	4413      	add	r3, r2
   14b12:	63bb      	str	r3, [r7, #56]	; 0x38

        if (data == NULL) {
   14b14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   14b16:	2b00      	cmp	r3, #0
   14b18:	d118      	bne.n	14b4c <str_replace+0x2ac>
            // first pass
            if (num_replacements_done == 0) {
   14b1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   14b1c:	2b00      	cmp	r3, #0
   14b1e:	d102      	bne.n	14b26 <str_replace+0x286>
                // no substr found, return original string
                return args[0];
   14b20:	683b      	ldr	r3, [r7, #0]
   14b22:	681b      	ldr	r3, [r3, #0]
   14b24:	e01a      	b.n	14b5c <str_replace+0x2bc>
            } else {
                // substr found, allocate new string
                vstr_init_len(&vstr, replaced_str_index);
   14b26:	f107 0308 	add.w	r3, r7, #8
   14b2a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
   14b2c:	4618      	mov	r0, r3
   14b2e:	f7ec fbf8 	bl	1322 <vstr_init_len>
                data = (byte*)vstr.buf;
   14b32:	693b      	ldr	r3, [r7, #16]
   14b34:	63fb      	str	r3, [r7, #60]	; 0x3c
                assert(data != NULL);
   14b36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   14b38:	2b00      	cmp	r3, #0
   14b3a:	f47f af75 	bne.w	14a28 <str_replace+0x188>
   14b3e:	4b0d      	ldr	r3, [pc, #52]	; (14b74 <str_replace+0x2d4>)
   14b40:	4a0a      	ldr	r2, [pc, #40]	; (14b6c <str_replace+0x2cc>)
   14b42:	f240 618e 	movw	r1, #1678	; 0x68e
   14b46:	480a      	ldr	r0, [pc, #40]	; (14b70 <str_replace+0x2d0>)
   14b48:	f006 fb38 	bl	1b1bc <__assert_func>
            }
        } else {
            // second pass, we are done
            break;
   14b4c:	bf00      	nop
        }
    }

    return mp_obj_new_str_from_vstr(self_type, &vstr);
   14b4e:	f107 0308 	add.w	r3, r7, #8
   14b52:	4619      	mov	r1, r3
   14b54:	6a78      	ldr	r0, [r7, #36]	; 0x24
   14b56:	f000 fac6 	bl	150e6 <mp_obj_new_str_from_vstr>
   14b5a:	4603      	mov	r3, r0
}
   14b5c:	4618      	mov	r0, r3
   14b5e:	3750      	adds	r7, #80	; 0x50
   14b60:	46bd      	mov	sp, r7
   14b62:	bd80      	pop	{r7, pc}
   14b64:	000126c3 	.word	0x000126c3
   14b68:	00021528 	.word	0x00021528
   14b6c:	00021a84 	.word	0x00021a84
   14b70:	0002148c 	.word	0x0002148c
   14b74:	00021844 	.word	0x00021844

00014b78 <str_count>:
MP_DEFINE_CONST_FUN_OBJ_VAR_BETWEEN(str_replace_obj, 3, 4, str_replace);

STATIC mp_obj_t str_count(size_t n_args, const mp_obj_t *args) {
   14b78:	b580      	push	{r7, lr}
   14b7a:	b08e      	sub	sp, #56	; 0x38
   14b7c:	af02      	add	r7, sp, #8
   14b7e:	6078      	str	r0, [r7, #4]
   14b80:	6039      	str	r1, [r7, #0]
    const mp_obj_type_t *self_type = mp_obj_get_type(args[0]);
   14b82:	683b      	ldr	r3, [r7, #0]
   14b84:	681b      	ldr	r3, [r3, #0]
   14b86:	4618      	mov	r0, r3
   14b88:	f7f8 fde2 	bl	d750 <mp_obj_get_type>
   14b8c:	6178      	str	r0, [r7, #20]
    mp_check_self(MP_OBJ_IS_STR_OR_BYTES(args[0]));
   14b8e:	683b      	ldr	r3, [r7, #0]
   14b90:	681b      	ldr	r3, [r3, #0]
   14b92:	4618      	mov	r0, r3
   14b94:	f7fd fa5c 	bl	12050 <MP_OBJ_IS_QSTR>
   14b98:	4603      	mov	r3, r0
   14b9a:	2b00      	cmp	r3, #0
   14b9c:	d115      	bne.n	14bca <str_count+0x52>
   14b9e:	683b      	ldr	r3, [r7, #0]
   14ba0:	681b      	ldr	r3, [r3, #0]
   14ba2:	4618      	mov	r0, r3
   14ba4:	f7fd fa66 	bl	12074 <MP_OBJ_IS_OBJ>
   14ba8:	4603      	mov	r3, r0
   14baa:	2b00      	cmp	r3, #0
   14bac:	d006      	beq.n	14bbc <str_count+0x44>
   14bae:	683b      	ldr	r3, [r7, #0]
   14bb0:	681b      	ldr	r3, [r3, #0]
   14bb2:	681b      	ldr	r3, [r3, #0]
   14bb4:	699b      	ldr	r3, [r3, #24]
   14bb6:	4a5e      	ldr	r2, [pc, #376]	; (14d30 <str_count+0x1b8>)
   14bb8:	4293      	cmp	r3, r2
   14bba:	d006      	beq.n	14bca <str_count+0x52>
   14bbc:	4b5d      	ldr	r3, [pc, #372]	; (14d34 <str_count+0x1bc>)
   14bbe:	4a5e      	ldr	r2, [pc, #376]	; (14d38 <str_count+0x1c0>)
   14bc0:	f240 619c 	movw	r1, #1692	; 0x69c
   14bc4:	485d      	ldr	r0, [pc, #372]	; (14d3c <str_count+0x1c4>)
   14bc6:	f006 faf9 	bl	1b1bc <__assert_func>

    // check argument type
    if (mp_obj_get_type(args[1]) != self_type) {
   14bca:	683b      	ldr	r3, [r7, #0]
   14bcc:	3304      	adds	r3, #4
   14bce:	681b      	ldr	r3, [r3, #0]
   14bd0:	4618      	mov	r0, r3
   14bd2:	f7f8 fdbd 	bl	d750 <mp_obj_get_type>
   14bd6:	4602      	mov	r2, r0
   14bd8:	697b      	ldr	r3, [r7, #20]
   14bda:	429a      	cmp	r2, r3
   14bdc:	d005      	beq.n	14bea <str_count+0x72>
        bad_implicit_conversion(args[1]);
   14bde:	683b      	ldr	r3, [r7, #0]
   14be0:	3304      	adds	r3, #4
   14be2:	681b      	ldr	r3, [r3, #0]
   14be4:	4618      	mov	r0, r3
   14be6:	f000 fbd0 	bl	1538a <bad_implicit_conversion>
    }

    GET_STR_DATA_LEN(args[0], haystack, haystack_len);
   14bea:	683b      	ldr	r3, [r7, #0]
   14bec:	681b      	ldr	r3, [r3, #0]
   14bee:	4618      	mov	r0, r3
   14bf0:	f7fd fa2e 	bl	12050 <MP_OBJ_IS_QSTR>
   14bf4:	4603      	mov	r3, r0
   14bf6:	2b00      	cmp	r3, #0
   14bf8:	d00a      	beq.n	14c10 <str_count+0x98>
   14bfa:	683b      	ldr	r3, [r7, #0]
   14bfc:	681b      	ldr	r3, [r3, #0]
   14bfe:	089b      	lsrs	r3, r3, #2
   14c00:	f107 0210 	add.w	r2, r7, #16
   14c04:	4611      	mov	r1, r2
   14c06:	4618      	mov	r0, r3
   14c08:	f7ec faf2 	bl	11f0 <qstr_data>
   14c0c:	62f8      	str	r0, [r7, #44]	; 0x2c
   14c0e:	e007      	b.n	14c20 <str_count+0xa8>
   14c10:	683b      	ldr	r3, [r7, #0]
   14c12:	681b      	ldr	r3, [r3, #0]
   14c14:	689b      	ldr	r3, [r3, #8]
   14c16:	613b      	str	r3, [r7, #16]
   14c18:	683b      	ldr	r3, [r7, #0]
   14c1a:	681b      	ldr	r3, [r3, #0]
   14c1c:	68db      	ldr	r3, [r3, #12]
   14c1e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GET_STR_DATA_LEN(args[1], needle, needle_len);
   14c20:	683b      	ldr	r3, [r7, #0]
   14c22:	3304      	adds	r3, #4
   14c24:	681b      	ldr	r3, [r3, #0]
   14c26:	4618      	mov	r0, r3
   14c28:	f7fd fa12 	bl	12050 <MP_OBJ_IS_QSTR>
   14c2c:	4603      	mov	r3, r0
   14c2e:	2b00      	cmp	r3, #0
   14c30:	d00b      	beq.n	14c4a <str_count+0xd2>
   14c32:	683b      	ldr	r3, [r7, #0]
   14c34:	3304      	adds	r3, #4
   14c36:	681b      	ldr	r3, [r3, #0]
   14c38:	089b      	lsrs	r3, r3, #2
   14c3a:	f107 020c 	add.w	r2, r7, #12
   14c3e:	4611      	mov	r1, r2
   14c40:	4618      	mov	r0, r3
   14c42:	f7ec fad5 	bl	11f0 <qstr_data>
   14c46:	62b8      	str	r0, [r7, #40]	; 0x28
   14c48:	e009      	b.n	14c5e <str_count+0xe6>
   14c4a:	683b      	ldr	r3, [r7, #0]
   14c4c:	3304      	adds	r3, #4
   14c4e:	681b      	ldr	r3, [r3, #0]
   14c50:	689b      	ldr	r3, [r3, #8]
   14c52:	60fb      	str	r3, [r7, #12]
   14c54:	683b      	ldr	r3, [r7, #0]
   14c56:	3304      	adds	r3, #4
   14c58:	681b      	ldr	r3, [r3, #0]
   14c5a:	68db      	ldr	r3, [r3, #12]
   14c5c:	62bb      	str	r3, [r7, #40]	; 0x28

    const byte *start = haystack;
   14c5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   14c60:	627b      	str	r3, [r7, #36]	; 0x24
    const byte *end = haystack + haystack_len;
   14c62:	693b      	ldr	r3, [r7, #16]
   14c64:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   14c66:	4413      	add	r3, r2
   14c68:	623b      	str	r3, [r7, #32]
    if (n_args >= 3 && args[2] != mp_const_none) {
   14c6a:	687b      	ldr	r3, [r7, #4]
   14c6c:	2b02      	cmp	r3, #2
   14c6e:	d911      	bls.n	14c94 <str_count+0x11c>
   14c70:	683b      	ldr	r3, [r7, #0]
   14c72:	3308      	adds	r3, #8
   14c74:	681b      	ldr	r3, [r3, #0]
   14c76:	4a32      	ldr	r2, [pc, #200]	; (14d40 <str_count+0x1c8>)
   14c78:	4293      	cmp	r3, r2
   14c7a:	d00b      	beq.n	14c94 <str_count+0x11c>
        start = str_index_to_ptr(self_type, haystack, haystack_len, args[2], true);
   14c7c:	693a      	ldr	r2, [r7, #16]
   14c7e:	683b      	ldr	r3, [r7, #0]
   14c80:	3308      	adds	r3, #8
   14c82:	6819      	ldr	r1, [r3, #0]
   14c84:	2301      	movs	r3, #1
   14c86:	9300      	str	r3, [sp, #0]
   14c88:	460b      	mov	r3, r1
   14c8a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
   14c8c:	6978      	ldr	r0, [r7, #20]
   14c8e:	f7fd fe95 	bl	129bc <str_index_to_ptr>
   14c92:	6278      	str	r0, [r7, #36]	; 0x24
    }
    if (n_args >= 4 && args[3] != mp_const_none) {
   14c94:	687b      	ldr	r3, [r7, #4]
   14c96:	2b03      	cmp	r3, #3
   14c98:	d911      	bls.n	14cbe <str_count+0x146>
   14c9a:	683b      	ldr	r3, [r7, #0]
   14c9c:	330c      	adds	r3, #12
   14c9e:	681b      	ldr	r3, [r3, #0]
   14ca0:	4a27      	ldr	r2, [pc, #156]	; (14d40 <str_count+0x1c8>)
   14ca2:	4293      	cmp	r3, r2
   14ca4:	d00b      	beq.n	14cbe <str_count+0x146>
        end = str_index_to_ptr(self_type, haystack, haystack_len, args[3], true);
   14ca6:	693a      	ldr	r2, [r7, #16]
   14ca8:	683b      	ldr	r3, [r7, #0]
   14caa:	330c      	adds	r3, #12
   14cac:	6819      	ldr	r1, [r3, #0]
   14cae:	2301      	movs	r3, #1
   14cb0:	9300      	str	r3, [sp, #0]
   14cb2:	460b      	mov	r3, r1
   14cb4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
   14cb6:	6978      	ldr	r0, [r7, #20]
   14cb8:	f7fd fe80 	bl	129bc <str_index_to_ptr>
   14cbc:	6238      	str	r0, [r7, #32]
    }

    // if needle_len is zero then we count each gap between characters as an occurrence
    if (needle_len == 0) {
   14cbe:	68fb      	ldr	r3, [r7, #12]
   14cc0:	2b00      	cmp	r3, #0
   14cc2:	d10c      	bne.n	14cde <str_count+0x166>
        return MP_OBJ_NEW_SMALL_INT(utf8_charlen(start, end - start) + 1);
   14cc4:	6a3a      	ldr	r2, [r7, #32]
   14cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   14cc8:	1ad3      	subs	r3, r2, r3
   14cca:	4619      	mov	r1, r3
   14ccc:	6a78      	ldr	r0, [r7, #36]	; 0x24
   14cce:	f7fd f9a1 	bl	12014 <utf8_charlen>
   14cd2:	4603      	mov	r3, r0
   14cd4:	3301      	adds	r3, #1
   14cd6:	005b      	lsls	r3, r3, #1
   14cd8:	f043 0301 	orr.w	r3, r3, #1
   14cdc:	e023      	b.n	14d26 <str_count+0x1ae>
    }

    // count the occurrences
    mp_int_t num_occurrences = 0;
   14cde:	2300      	movs	r3, #0
   14ce0:	61fb      	str	r3, [r7, #28]
    for (const byte *haystack_ptr = start; haystack_ptr + needle_len <= end;) {
   14ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   14ce4:	61bb      	str	r3, [r7, #24]
   14ce6:	e014      	b.n	14d12 <str_count+0x19a>
        if (memcmp(haystack_ptr, needle, needle_len) == 0) {
   14ce8:	68fb      	ldr	r3, [r7, #12]
   14cea:	461a      	mov	r2, r3
   14cec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   14cee:	69b8      	ldr	r0, [r7, #24]
   14cf0:	f006 ff4d 	bl	1bb8e <memcmp>
   14cf4:	4603      	mov	r3, r0
   14cf6:	2b00      	cmp	r3, #0
   14cf8:	d107      	bne.n	14d0a <str_count+0x192>
            num_occurrences++;
   14cfa:	69fb      	ldr	r3, [r7, #28]
   14cfc:	3301      	adds	r3, #1
   14cfe:	61fb      	str	r3, [r7, #28]
            haystack_ptr += needle_len;
   14d00:	68fb      	ldr	r3, [r7, #12]
   14d02:	69ba      	ldr	r2, [r7, #24]
   14d04:	4413      	add	r3, r2
   14d06:	61bb      	str	r3, [r7, #24]
   14d08:	e003      	b.n	14d12 <str_count+0x19a>
        } else {
            haystack_ptr = utf8_next_char(haystack_ptr);
   14d0a:	69b8      	ldr	r0, [r7, #24]
   14d0c:	f7fd f976 	bl	11ffc <utf8_next_char>
   14d10:	61b8      	str	r0, [r7, #24]
    for (const byte *haystack_ptr = start; haystack_ptr + needle_len <= end;) {
   14d12:	68fb      	ldr	r3, [r7, #12]
   14d14:	69ba      	ldr	r2, [r7, #24]
   14d16:	441a      	add	r2, r3
   14d18:	6a3b      	ldr	r3, [r7, #32]
   14d1a:	429a      	cmp	r2, r3
   14d1c:	d9e4      	bls.n	14ce8 <str_count+0x170>
        }
    }

    return MP_OBJ_NEW_SMALL_INT(num_occurrences);
   14d1e:	69fb      	ldr	r3, [r7, #28]
   14d20:	005b      	lsls	r3, r3, #1
   14d22:	f043 0301 	orr.w	r3, r3, #1
}
   14d26:	4618      	mov	r0, r3
   14d28:	3730      	adds	r7, #48	; 0x30
   14d2a:	46bd      	mov	sp, r7
   14d2c:	bd80      	pop	{r7, pc}
   14d2e:	bf00      	nop
   14d30:	000126c3 	.word	0x000126c3
   14d34:	00021528 	.word	0x00021528
   14d38:	00021a90 	.word	0x00021a90
   14d3c:	0002148c 	.word	0x0002148c
   14d40:	000212b4 	.word	0x000212b4

00014d44 <str_caseconv>:
}
MP_DEFINE_CONST_FUN_OBJ_2(str_rpartition_obj, str_rpartition);
#endif

// Supposedly not too critical operations, so optimize for code size
STATIC mp_obj_t str_caseconv(unichar (*op)(unichar), mp_obj_t self_in) {
   14d44:	b590      	push	{r4, r7, lr}
   14d46:	b08b      	sub	sp, #44	; 0x2c
   14d48:	af00      	add	r7, sp, #0
   14d4a:	6078      	str	r0, [r7, #4]
   14d4c:	6039      	str	r1, [r7, #0]
    GET_STR_DATA_LEN(self_in, self_data, self_len);
   14d4e:	6838      	ldr	r0, [r7, #0]
   14d50:	f7fd f97e 	bl	12050 <MP_OBJ_IS_QSTR>
   14d54:	4603      	mov	r3, r0
   14d56:	2b00      	cmp	r3, #0
   14d58:	d009      	beq.n	14d6e <str_caseconv+0x2a>
   14d5a:	683b      	ldr	r3, [r7, #0]
   14d5c:	089b      	lsrs	r3, r3, #2
   14d5e:	f107 0218 	add.w	r2, r7, #24
   14d62:	4611      	mov	r1, r2
   14d64:	4618      	mov	r0, r3
   14d66:	f7ec fa43 	bl	11f0 <qstr_data>
   14d6a:	6278      	str	r0, [r7, #36]	; 0x24
   14d6c:	e005      	b.n	14d7a <str_caseconv+0x36>
   14d6e:	683b      	ldr	r3, [r7, #0]
   14d70:	689b      	ldr	r3, [r3, #8]
   14d72:	61bb      	str	r3, [r7, #24]
   14d74:	683b      	ldr	r3, [r7, #0]
   14d76:	68db      	ldr	r3, [r3, #12]
   14d78:	627b      	str	r3, [r7, #36]	; 0x24
    vstr_t vstr;
    vstr_init_len(&vstr, self_len);
   14d7a:	69ba      	ldr	r2, [r7, #24]
   14d7c:	f107 0308 	add.w	r3, r7, #8
   14d80:	4611      	mov	r1, r2
   14d82:	4618      	mov	r0, r3
   14d84:	f7ec facd 	bl	1322 <vstr_init_len>
    byte *data = (byte*)vstr.buf;
   14d88:	693b      	ldr	r3, [r7, #16]
   14d8a:	623b      	str	r3, [r7, #32]
    for (size_t i = 0; i < self_len; i++) {
   14d8c:	2300      	movs	r3, #0
   14d8e:	61fb      	str	r3, [r7, #28]
   14d90:	e010      	b.n	14db4 <str_caseconv+0x70>
        *data++ = op(*self_data++);
   14d92:	6a3c      	ldr	r4, [r7, #32]
   14d94:	1c63      	adds	r3, r4, #1
   14d96:	623b      	str	r3, [r7, #32]
   14d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   14d9a:	1c5a      	adds	r2, r3, #1
   14d9c:	627a      	str	r2, [r7, #36]	; 0x24
   14d9e:	781b      	ldrb	r3, [r3, #0]
   14da0:	461a      	mov	r2, r3
   14da2:	687b      	ldr	r3, [r7, #4]
   14da4:	4610      	mov	r0, r2
   14da6:	4798      	blx	r3
   14da8:	4603      	mov	r3, r0
   14daa:	b2db      	uxtb	r3, r3
   14dac:	7023      	strb	r3, [r4, #0]
    for (size_t i = 0; i < self_len; i++) {
   14dae:	69fb      	ldr	r3, [r7, #28]
   14db0:	3301      	adds	r3, #1
   14db2:	61fb      	str	r3, [r7, #28]
   14db4:	69bb      	ldr	r3, [r7, #24]
   14db6:	69fa      	ldr	r2, [r7, #28]
   14db8:	429a      	cmp	r2, r3
   14dba:	d3ea      	bcc.n	14d92 <str_caseconv+0x4e>
    }
    return mp_obj_new_str_from_vstr(mp_obj_get_type(self_in), &vstr);
   14dbc:	6838      	ldr	r0, [r7, #0]
   14dbe:	f7f8 fcc7 	bl	d750 <mp_obj_get_type>
   14dc2:	4602      	mov	r2, r0
   14dc4:	f107 0308 	add.w	r3, r7, #8
   14dc8:	4619      	mov	r1, r3
   14dca:	4610      	mov	r0, r2
   14dcc:	f000 f98b 	bl	150e6 <mp_obj_new_str_from_vstr>
   14dd0:	4603      	mov	r3, r0
}
   14dd2:	4618      	mov	r0, r3
   14dd4:	372c      	adds	r7, #44	; 0x2c
   14dd6:	46bd      	mov	sp, r7
   14dd8:	bd90      	pop	{r4, r7, pc}

00014dda <str_lower>:

STATIC mp_obj_t str_lower(mp_obj_t self_in) {
   14dda:	b580      	push	{r7, lr}
   14ddc:	b082      	sub	sp, #8
   14dde:	af00      	add	r7, sp, #0
   14de0:	6078      	str	r0, [r7, #4]
    return str_caseconv(unichar_tolower, self_in);
   14de2:	6879      	ldr	r1, [r7, #4]
   14de4:	4803      	ldr	r0, [pc, #12]	; (14df4 <str_lower+0x1a>)
   14de6:	f7ff ffad 	bl	14d44 <str_caseconv>
   14dea:	4603      	mov	r3, r0
}
   14dec:	4618      	mov	r0, r3
   14dee:	3708      	adds	r7, #8
   14df0:	46bd      	mov	sp, r7
   14df2:	bd80      	pop	{r7, pc}
   14df4:	000024f9 	.word	0x000024f9

00014df8 <str_upper>:
MP_DEFINE_CONST_FUN_OBJ_1(str_lower_obj, str_lower);

STATIC mp_obj_t str_upper(mp_obj_t self_in) {
   14df8:	b580      	push	{r7, lr}
   14dfa:	b082      	sub	sp, #8
   14dfc:	af00      	add	r7, sp, #0
   14dfe:	6078      	str	r0, [r7, #4]
    return str_caseconv(unichar_toupper, self_in);
   14e00:	6879      	ldr	r1, [r7, #4]
   14e02:	4804      	ldr	r0, [pc, #16]	; (14e14 <str_upper+0x1c>)
   14e04:	f7ff ff9e 	bl	14d44 <str_caseconv>
   14e08:	4603      	mov	r3, r0
}
   14e0a:	4618      	mov	r0, r3
   14e0c:	3708      	adds	r7, #8
   14e0e:	46bd      	mov	sp, r7
   14e10:	bd80      	pop	{r7, pc}
   14e12:	bf00      	nop
   14e14:	0000251d 	.word	0x0000251d

00014e18 <str_uni_istype>:
MP_DEFINE_CONST_FUN_OBJ_1(str_upper_obj, str_upper);

STATIC mp_obj_t str_uni_istype(bool (*f)(unichar), mp_obj_t self_in) {
   14e18:	b580      	push	{r7, lr}
   14e1a:	b088      	sub	sp, #32
   14e1c:	af00      	add	r7, sp, #0
   14e1e:	6078      	str	r0, [r7, #4]
   14e20:	6039      	str	r1, [r7, #0]
    GET_STR_DATA_LEN(self_in, self_data, self_len);
   14e22:	6838      	ldr	r0, [r7, #0]
   14e24:	f7fd f914 	bl	12050 <MP_OBJ_IS_QSTR>
   14e28:	4603      	mov	r3, r0
   14e2a:	2b00      	cmp	r3, #0
   14e2c:	d009      	beq.n	14e42 <str_uni_istype+0x2a>
   14e2e:	683b      	ldr	r3, [r7, #0]
   14e30:	089b      	lsrs	r3, r3, #2
   14e32:	f107 020c 	add.w	r2, r7, #12
   14e36:	4611      	mov	r1, r2
   14e38:	4618      	mov	r0, r3
   14e3a:	f7ec f9d9 	bl	11f0 <qstr_data>
   14e3e:	61f8      	str	r0, [r7, #28]
   14e40:	e005      	b.n	14e4e <str_uni_istype+0x36>
   14e42:	683b      	ldr	r3, [r7, #0]
   14e44:	689b      	ldr	r3, [r3, #8]
   14e46:	60fb      	str	r3, [r7, #12]
   14e48:	683b      	ldr	r3, [r7, #0]
   14e4a:	68db      	ldr	r3, [r3, #12]
   14e4c:	61fb      	str	r3, [r7, #28]

    if (self_len == 0) {
   14e4e:	68fb      	ldr	r3, [r7, #12]
   14e50:	2b00      	cmp	r3, #0
   14e52:	d101      	bne.n	14e58 <str_uni_istype+0x40>
        return mp_const_false; // default to False for empty str
   14e54:	4b2c      	ldr	r3, [pc, #176]	; (14f08 <str_uni_istype+0xf0>)
   14e56:	e052      	b.n	14efe <str_uni_istype+0xe6>
    }

    if (f != unichar_isupper && f != unichar_islower) {
   14e58:	687b      	ldr	r3, [r7, #4]
   14e5a:	4a2c      	ldr	r2, [pc, #176]	; (14f0c <str_uni_istype+0xf4>)
   14e5c:	4293      	cmp	r3, r2
   14e5e:	d01e      	beq.n	14e9e <str_uni_istype+0x86>
   14e60:	687b      	ldr	r3, [r7, #4]
   14e62:	4a2b      	ldr	r2, [pc, #172]	; (14f10 <str_uni_istype+0xf8>)
   14e64:	4293      	cmp	r3, r2
   14e66:	d01a      	beq.n	14e9e <str_uni_istype+0x86>
        for (size_t i = 0; i < self_len; i++) {
   14e68:	2300      	movs	r3, #0
   14e6a:	61bb      	str	r3, [r7, #24]
   14e6c:	e012      	b.n	14e94 <str_uni_istype+0x7c>
            if (!f(*self_data++)) {
   14e6e:	69fb      	ldr	r3, [r7, #28]
   14e70:	1c5a      	adds	r2, r3, #1
   14e72:	61fa      	str	r2, [r7, #28]
   14e74:	781b      	ldrb	r3, [r3, #0]
   14e76:	461a      	mov	r2, r3
   14e78:	687b      	ldr	r3, [r7, #4]
   14e7a:	4610      	mov	r0, r2
   14e7c:	4798      	blx	r3
   14e7e:	4603      	mov	r3, r0
   14e80:	f083 0301 	eor.w	r3, r3, #1
   14e84:	b2db      	uxtb	r3, r3
   14e86:	2b00      	cmp	r3, #0
   14e88:	d001      	beq.n	14e8e <str_uni_istype+0x76>
                return mp_const_false;
   14e8a:	4b1f      	ldr	r3, [pc, #124]	; (14f08 <str_uni_istype+0xf0>)
   14e8c:	e037      	b.n	14efe <str_uni_istype+0xe6>
        for (size_t i = 0; i < self_len; i++) {
   14e8e:	69bb      	ldr	r3, [r7, #24]
   14e90:	3301      	adds	r3, #1
   14e92:	61bb      	str	r3, [r7, #24]
   14e94:	68fb      	ldr	r3, [r7, #12]
   14e96:	69ba      	ldr	r2, [r7, #24]
   14e98:	429a      	cmp	r2, r3
   14e9a:	d3e8      	bcc.n	14e6e <str_uni_istype+0x56>
   14e9c:	e02e      	b.n	14efc <str_uni_istype+0xe4>
            }
        }
    } else {
        bool contains_alpha = false;
   14e9e:	2300      	movs	r3, #0
   14ea0:	75fb      	strb	r3, [r7, #23]

        for (size_t i = 0; i < self_len; i++) { // only check alphanumeric characters
   14ea2:	2300      	movs	r3, #0
   14ea4:	613b      	str	r3, [r7, #16]
   14ea6:	e01d      	b.n	14ee4 <str_uni_istype+0xcc>
            if (unichar_isalpha(*self_data++)) {
   14ea8:	69fb      	ldr	r3, [r7, #28]
   14eaa:	1c5a      	adds	r2, r3, #1
   14eac:	61fa      	str	r2, [r7, #28]
   14eae:	781b      	ldrb	r3, [r3, #0]
   14eb0:	4618      	mov	r0, r3
   14eb2:	f7ed fa6b 	bl	238c <unichar_isalpha>
   14eb6:	4603      	mov	r3, r0
   14eb8:	2b00      	cmp	r3, #0
   14eba:	d010      	beq.n	14ede <str_uni_istype+0xc6>
                contains_alpha = true;
   14ebc:	2301      	movs	r3, #1
   14ebe:	75fb      	strb	r3, [r7, #23]
                if (!f(*(self_data - 1))) { // -1 because we already incremented above
   14ec0:	69fb      	ldr	r3, [r7, #28]
   14ec2:	3b01      	subs	r3, #1
   14ec4:	781b      	ldrb	r3, [r3, #0]
   14ec6:	461a      	mov	r2, r3
   14ec8:	687b      	ldr	r3, [r7, #4]
   14eca:	4610      	mov	r0, r2
   14ecc:	4798      	blx	r3
   14ece:	4603      	mov	r3, r0
   14ed0:	f083 0301 	eor.w	r3, r3, #1
   14ed4:	b2db      	uxtb	r3, r3
   14ed6:	2b00      	cmp	r3, #0
   14ed8:	d001      	beq.n	14ede <str_uni_istype+0xc6>
                    return mp_const_false;
   14eda:	4b0b      	ldr	r3, [pc, #44]	; (14f08 <str_uni_istype+0xf0>)
   14edc:	e00f      	b.n	14efe <str_uni_istype+0xe6>
        for (size_t i = 0; i < self_len; i++) { // only check alphanumeric characters
   14ede:	693b      	ldr	r3, [r7, #16]
   14ee0:	3301      	adds	r3, #1
   14ee2:	613b      	str	r3, [r7, #16]
   14ee4:	68fb      	ldr	r3, [r7, #12]
   14ee6:	693a      	ldr	r2, [r7, #16]
   14ee8:	429a      	cmp	r2, r3
   14eea:	d3dd      	bcc.n	14ea8 <str_uni_istype+0x90>
                }
            }
        }

        if (!contains_alpha) {
   14eec:	7dfb      	ldrb	r3, [r7, #23]
   14eee:	f083 0301 	eor.w	r3, r3, #1
   14ef2:	b2db      	uxtb	r3, r3
   14ef4:	2b00      	cmp	r3, #0
   14ef6:	d001      	beq.n	14efc <str_uni_istype+0xe4>
            return mp_const_false;
   14ef8:	4b03      	ldr	r3, [pc, #12]	; (14f08 <str_uni_istype+0xf0>)
   14efa:	e000      	b.n	14efe <str_uni_istype+0xe6>
        }
    }

    return mp_const_true;
   14efc:	4b05      	ldr	r3, [pc, #20]	; (14f14 <str_uni_istype+0xfc>)
}
   14efe:	4618      	mov	r0, r3
   14f00:	3720      	adds	r7, #32
   14f02:	46bd      	mov	sp, r7
   14f04:	bd80      	pop	{r7, pc}
   14f06:	bf00      	nop
   14f08:	0001f9bc 	.word	0x0001f9bc
   14f0c:	00002481 	.word	0x00002481
   14f10:	000024bd 	.word	0x000024bd
   14f14:	0001f9c4 	.word	0x0001f9c4

00014f18 <str_isspace>:

STATIC mp_obj_t str_isspace(mp_obj_t self_in) {
   14f18:	b580      	push	{r7, lr}
   14f1a:	b082      	sub	sp, #8
   14f1c:	af00      	add	r7, sp, #0
   14f1e:	6078      	str	r0, [r7, #4]
    return str_uni_istype(unichar_isspace, self_in);
   14f20:	6879      	ldr	r1, [r7, #4]
   14f22:	4804      	ldr	r0, [pc, #16]	; (14f34 <str_isspace+0x1c>)
   14f24:	f7ff ff78 	bl	14e18 <str_uni_istype>
   14f28:	4603      	mov	r3, r0
}
   14f2a:	4618      	mov	r0, r3
   14f2c:	3708      	adds	r7, #8
   14f2e:	46bd      	mov	sp, r7
   14f30:	bd80      	pop	{r7, pc}
   14f32:	bf00      	nop
   14f34:	00002351 	.word	0x00002351

00014f38 <str_isalpha>:
MP_DEFINE_CONST_FUN_OBJ_1(str_isspace_obj, str_isspace);

STATIC mp_obj_t str_isalpha(mp_obj_t self_in) {
   14f38:	b580      	push	{r7, lr}
   14f3a:	b082      	sub	sp, #8
   14f3c:	af00      	add	r7, sp, #0
   14f3e:	6078      	str	r0, [r7, #4]
    return str_uni_istype(unichar_isalpha, self_in);
   14f40:	6879      	ldr	r1, [r7, #4]
   14f42:	4804      	ldr	r0, [pc, #16]	; (14f54 <str_isalpha+0x1c>)
   14f44:	f7ff ff68 	bl	14e18 <str_uni_istype>
   14f48:	4603      	mov	r3, r0
}
   14f4a:	4618      	mov	r0, r3
   14f4c:	3708      	adds	r7, #8
   14f4e:	46bd      	mov	sp, r7
   14f50:	bd80      	pop	{r7, pc}
   14f52:	bf00      	nop
   14f54:	0000238d 	.word	0x0000238d

00014f58 <str_isdigit>:
MP_DEFINE_CONST_FUN_OBJ_1(str_isalpha_obj, str_isalpha);

STATIC mp_obj_t str_isdigit(mp_obj_t self_in) {
   14f58:	b580      	push	{r7, lr}
   14f5a:	b082      	sub	sp, #8
   14f5c:	af00      	add	r7, sp, #0
   14f5e:	6078      	str	r0, [r7, #4]
    return str_uni_istype(unichar_isdigit, self_in);
   14f60:	6879      	ldr	r1, [r7, #4]
   14f62:	4804      	ldr	r0, [pc, #16]	; (14f74 <str_isdigit+0x1c>)
   14f64:	f7ff ff58 	bl	14e18 <str_uni_istype>
   14f68:	4603      	mov	r3, r0
}
   14f6a:	4618      	mov	r0, r3
   14f6c:	3708      	adds	r7, #8
   14f6e:	46bd      	mov	sp, r7
   14f70:	bd80      	pop	{r7, pc}
   14f72:	bf00      	nop
   14f74:	000023c9 	.word	0x000023c9

00014f78 <str_isupper>:
MP_DEFINE_CONST_FUN_OBJ_1(str_isdigit_obj, str_isdigit);

STATIC mp_obj_t str_isupper(mp_obj_t self_in) {
   14f78:	b580      	push	{r7, lr}
   14f7a:	b082      	sub	sp, #8
   14f7c:	af00      	add	r7, sp, #0
   14f7e:	6078      	str	r0, [r7, #4]
    return str_uni_istype(unichar_isupper, self_in);
   14f80:	6879      	ldr	r1, [r7, #4]
   14f82:	4804      	ldr	r0, [pc, #16]	; (14f94 <str_isupper+0x1c>)
   14f84:	f7ff ff48 	bl	14e18 <str_uni_istype>
   14f88:	4603      	mov	r3, r0
}
   14f8a:	4618      	mov	r0, r3
   14f8c:	3708      	adds	r7, #8
   14f8e:	46bd      	mov	sp, r7
   14f90:	bd80      	pop	{r7, pc}
   14f92:	bf00      	nop
   14f94:	00002481 	.word	0x00002481

00014f98 <str_islower>:
MP_DEFINE_CONST_FUN_OBJ_1(str_isupper_obj, str_isupper);

STATIC mp_obj_t str_islower(mp_obj_t self_in) {
   14f98:	b580      	push	{r7, lr}
   14f9a:	b082      	sub	sp, #8
   14f9c:	af00      	add	r7, sp, #0
   14f9e:	6078      	str	r0, [r7, #4]
    return str_uni_istype(unichar_islower, self_in);
   14fa0:	6879      	ldr	r1, [r7, #4]
   14fa2:	4804      	ldr	r0, [pc, #16]	; (14fb4 <str_islower+0x1c>)
   14fa4:	f7ff ff38 	bl	14e18 <str_uni_istype>
   14fa8:	4603      	mov	r3, r0
}
   14faa:	4618      	mov	r0, r3
   14fac:	3708      	adds	r7, #8
   14fae:	46bd      	mov	sp, r7
   14fb0:	bd80      	pop	{r7, pc}
   14fb2:	bf00      	nop
   14fb4:	000024bd 	.word	0x000024bd

00014fb8 <mp_obj_str_get_buffer>:
    return bytes_make_new(NULL, n_args, 0, args);
}
MP_DEFINE_CONST_FUN_OBJ_VAR_BETWEEN(str_encode_obj, 1, 3, str_encode);
#endif

mp_int_t mp_obj_str_get_buffer(mp_obj_t self_in, mp_buffer_info_t *bufinfo, mp_uint_t flags) {
   14fb8:	b580      	push	{r7, lr}
   14fba:	b086      	sub	sp, #24
   14fbc:	af00      	add	r7, sp, #0
   14fbe:	60f8      	str	r0, [r7, #12]
   14fc0:	60b9      	str	r1, [r7, #8]
   14fc2:	607a      	str	r2, [r7, #4]
    if (flags == MP_BUFFER_READ) {
   14fc4:	687b      	ldr	r3, [r7, #4]
   14fc6:	2b01      	cmp	r3, #1
   14fc8:	d120      	bne.n	1500c <mp_obj_str_get_buffer+0x54>
        GET_STR_DATA_LEN(self_in, str_data, str_len);
   14fca:	68f8      	ldr	r0, [r7, #12]
   14fcc:	f7fd f840 	bl	12050 <MP_OBJ_IS_QSTR>
   14fd0:	4603      	mov	r3, r0
   14fd2:	2b00      	cmp	r3, #0
   14fd4:	d009      	beq.n	14fea <mp_obj_str_get_buffer+0x32>
   14fd6:	68fb      	ldr	r3, [r7, #12]
   14fd8:	089b      	lsrs	r3, r3, #2
   14fda:	f107 0210 	add.w	r2, r7, #16
   14fde:	4611      	mov	r1, r2
   14fe0:	4618      	mov	r0, r3
   14fe2:	f7ec f905 	bl	11f0 <qstr_data>
   14fe6:	6178      	str	r0, [r7, #20]
   14fe8:	e005      	b.n	14ff6 <mp_obj_str_get_buffer+0x3e>
   14fea:	68fb      	ldr	r3, [r7, #12]
   14fec:	689b      	ldr	r3, [r3, #8]
   14fee:	613b      	str	r3, [r7, #16]
   14ff0:	68fb      	ldr	r3, [r7, #12]
   14ff2:	68db      	ldr	r3, [r3, #12]
   14ff4:	617b      	str	r3, [r7, #20]
        bufinfo->buf = (void*)str_data;
   14ff6:	68bb      	ldr	r3, [r7, #8]
   14ff8:	697a      	ldr	r2, [r7, #20]
   14ffa:	601a      	str	r2, [r3, #0]
        bufinfo->len = str_len;
   14ffc:	693a      	ldr	r2, [r7, #16]
   14ffe:	68bb      	ldr	r3, [r7, #8]
   15000:	605a      	str	r2, [r3, #4]
        bufinfo->typecode = 'B'; // bytes should be unsigned, so should unicode byte-access
   15002:	68bb      	ldr	r3, [r7, #8]
   15004:	2242      	movs	r2, #66	; 0x42
   15006:	609a      	str	r2, [r3, #8]
        return 0;
   15008:	2300      	movs	r3, #0
   1500a:	e00a      	b.n	15022 <mp_obj_str_get_buffer+0x6a>
    } else {
        // can't write to a string
        bufinfo->buf = NULL;
   1500c:	68bb      	ldr	r3, [r7, #8]
   1500e:	2200      	movs	r2, #0
   15010:	601a      	str	r2, [r3, #0]
        bufinfo->len = 0;
   15012:	68bb      	ldr	r3, [r7, #8]
   15014:	2200      	movs	r2, #0
   15016:	605a      	str	r2, [r3, #4]
        bufinfo->typecode = -1;
   15018:	68bb      	ldr	r3, [r7, #8]
   1501a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1501e:	609a      	str	r2, [r3, #8]
        return 1;
   15020:	2301      	movs	r3, #1
    }
}
   15022:	4618      	mov	r0, r3
   15024:	3718      	adds	r7, #24
   15026:	46bd      	mov	sp, r7
   15028:	bd80      	pop	{r7, pc}

0001502a <mp_obj_new_str_copy>:
const mp_obj_str_t mp_const_empty_bytes_obj = {{&mp_type_bytes}, 0, 0, (const byte*)""};

// Create a str/bytes object using the given data.  New memory is allocated and
// the data is copied across.  This function should only be used if the type is bytes,
// or if the type is str and the string data is known to be not interned.
mp_obj_t mp_obj_new_str_copy(const mp_obj_type_t *type, const byte* data, size_t len) {
   1502a:	b580      	push	{r7, lr}
   1502c:	b086      	sub	sp, #24
   1502e:	af00      	add	r7, sp, #0
   15030:	60f8      	str	r0, [r7, #12]
   15032:	60b9      	str	r1, [r7, #8]
   15034:	607a      	str	r2, [r7, #4]
    mp_obj_str_t *o = m_new_obj(mp_obj_str_t);
   15036:	2010      	movs	r0, #16
   15038:	f7eb f970 	bl	31c <m_malloc>
   1503c:	6178      	str	r0, [r7, #20]
    o->base.type = type;
   1503e:	697b      	ldr	r3, [r7, #20]
   15040:	68fa      	ldr	r2, [r7, #12]
   15042:	601a      	str	r2, [r3, #0]
    o->len = len;
   15044:	697b      	ldr	r3, [r7, #20]
   15046:	687a      	ldr	r2, [r7, #4]
   15048:	609a      	str	r2, [r3, #8]
    if (data) {
   1504a:	68bb      	ldr	r3, [r7, #8]
   1504c:	2b00      	cmp	r3, #0
   1504e:	d019      	beq.n	15084 <mp_obj_new_str_copy+0x5a>
        o->hash = qstr_compute_hash(data, len);
   15050:	6879      	ldr	r1, [r7, #4]
   15052:	68b8      	ldr	r0, [r7, #8]
   15054:	f7eb fed2 	bl	dfc <qstr_compute_hash>
   15058:	4602      	mov	r2, r0
   1505a:	697b      	ldr	r3, [r7, #20]
   1505c:	605a      	str	r2, [r3, #4]
        byte *p = m_new(byte, len + 1);
   1505e:	687b      	ldr	r3, [r7, #4]
   15060:	3301      	adds	r3, #1
   15062:	4618      	mov	r0, r3
   15064:	f7eb f95a 	bl	31c <m_malloc>
   15068:	6138      	str	r0, [r7, #16]
        o->data = p;
   1506a:	697b      	ldr	r3, [r7, #20]
   1506c:	693a      	ldr	r2, [r7, #16]
   1506e:	60da      	str	r2, [r3, #12]
        memcpy(p, data, len * sizeof(byte));
   15070:	687a      	ldr	r2, [r7, #4]
   15072:	68b9      	ldr	r1, [r7, #8]
   15074:	6938      	ldr	r0, [r7, #16]
   15076:	f006 fca5 	bl	1b9c4 <memcpy>
        p[len] = '\0'; // for now we add null for compatibility with C ASCIIZ strings
   1507a:	693a      	ldr	r2, [r7, #16]
   1507c:	687b      	ldr	r3, [r7, #4]
   1507e:	4413      	add	r3, r2
   15080:	2200      	movs	r2, #0
   15082:	701a      	strb	r2, [r3, #0]
    }
    return MP_OBJ_FROM_PTR(o);
   15084:	697b      	ldr	r3, [r7, #20]
}
   15086:	4618      	mov	r0, r3
   15088:	3718      	adds	r7, #24
   1508a:	46bd      	mov	sp, r7
   1508c:	bd80      	pop	{r7, pc}

0001508e <mp_obj_new_str_of_type>:

// Create a str/bytes object using the given data.  If the type is str and the string
// data is already interned, then a qstr object is returned.  Otherwise new memory is
// allocated for the object and the data is copied across.
mp_obj_t mp_obj_new_str_of_type(const mp_obj_type_t *type, const byte* data, size_t len) {
   1508e:	b580      	push	{r7, lr}
   15090:	b084      	sub	sp, #16
   15092:	af00      	add	r7, sp, #0
   15094:	60f8      	str	r0, [r7, #12]
   15096:	60b9      	str	r1, [r7, #8]
   15098:	607a      	str	r2, [r7, #4]
    if (type == &mp_type_str) {
   1509a:	68fb      	ldr	r3, [r7, #12]
   1509c:	4a08      	ldr	r2, [pc, #32]	; (150c0 <mp_obj_new_str_of_type+0x32>)
   1509e:	4293      	cmp	r3, r2
   150a0:	d105      	bne.n	150ae <mp_obj_new_str_of_type+0x20>
        return mp_obj_new_str((const char*)data, len);
   150a2:	6879      	ldr	r1, [r7, #4]
   150a4:	68b8      	ldr	r0, [r7, #8]
   150a6:	f000 f881 	bl	151ac <mp_obj_new_str>
   150aa:	4603      	mov	r3, r0
   150ac:	e004      	b.n	150b8 <mp_obj_new_str_of_type+0x2a>
    } else {
        return mp_obj_new_bytes(data, len);
   150ae:	6879      	ldr	r1, [r7, #4]
   150b0:	68b8      	ldr	r0, [r7, #8]
   150b2:	f000 f8d2 	bl	1525a <mp_obj_new_bytes>
   150b6:	4603      	mov	r3, r0
    }
}
   150b8:	4618      	mov	r0, r3
   150ba:	3710      	adds	r7, #16
   150bc:	46bd      	mov	sp, r7
   150be:	bd80      	pop	{r7, pc}
   150c0:	00021964 	.word	0x00021964

000150c4 <mp_obj_new_str_via_qstr>:

// Create a str using a qstr to store the data; may use existing or new qstr.
mp_obj_t mp_obj_new_str_via_qstr(const char* data, size_t len) {
   150c4:	b580      	push	{r7, lr}
   150c6:	b082      	sub	sp, #8
   150c8:	af00      	add	r7, sp, #0
   150ca:	6078      	str	r0, [r7, #4]
   150cc:	6039      	str	r1, [r7, #0]
    return MP_OBJ_NEW_QSTR(qstr_from_strn(data, len));
   150ce:	6839      	ldr	r1, [r7, #0]
   150d0:	6878      	ldr	r0, [r7, #4]
   150d2:	f7eb ffa6 	bl	1022 <qstr_from_strn>
   150d6:	4603      	mov	r3, r0
   150d8:	009b      	lsls	r3, r3, #2
   150da:	f043 0302 	orr.w	r3, r3, #2
}
   150de:	4618      	mov	r0, r3
   150e0:	3708      	adds	r7, #8
   150e2:	46bd      	mov	sp, r7
   150e4:	bd80      	pop	{r7, pc}

000150e6 <mp_obj_new_str_from_vstr>:

// Create a str/bytes object from the given vstr.  The vstr buffer is resized to
// the exact length required and then reused for the str/bytes object.  The vstr
// is cleared and can safely be passed to vstr_free if it was heap allocated.
mp_obj_t mp_obj_new_str_from_vstr(const mp_obj_type_t *type, vstr_t *vstr) {
   150e6:	b580      	push	{r7, lr}
   150e8:	b084      	sub	sp, #16
   150ea:	af00      	add	r7, sp, #0
   150ec:	6078      	str	r0, [r7, #4]
   150ee:	6039      	str	r1, [r7, #0]
    // if not a bytes object, look if a qstr with this data already exists
    if (type == &mp_type_str) {
   150f0:	687b      	ldr	r3, [r7, #4]
   150f2:	4a2d      	ldr	r2, [pc, #180]	; (151a8 <mp_obj_new_str_from_vstr+0xc2>)
   150f4:	4293      	cmp	r3, r2
   150f6:	d116      	bne.n	15126 <mp_obj_new_str_from_vstr+0x40>
        qstr q = qstr_find_strn(vstr->buf, vstr->len);
   150f8:	683b      	ldr	r3, [r7, #0]
   150fa:	689a      	ldr	r2, [r3, #8]
   150fc:	683b      	ldr	r3, [r7, #0]
   150fe:	685b      	ldr	r3, [r3, #4]
   15100:	4619      	mov	r1, r3
   15102:	4610      	mov	r0, r2
   15104:	f7eb ff2a 	bl	f5c <qstr_find_strn>
   15108:	60f8      	str	r0, [r7, #12]
        if (q != MP_QSTR_NULL) {
   1510a:	68fb      	ldr	r3, [r7, #12]
   1510c:	2b00      	cmp	r3, #0
   1510e:	d00a      	beq.n	15126 <mp_obj_new_str_from_vstr+0x40>
            vstr_clear(vstr);
   15110:	6838      	ldr	r0, [r7, #0]
   15112:	f7ec f949 	bl	13a8 <vstr_clear>
            vstr->alloc = 0;
   15116:	683b      	ldr	r3, [r7, #0]
   15118:	2200      	movs	r2, #0
   1511a:	601a      	str	r2, [r3, #0]
            return MP_OBJ_NEW_QSTR(q);
   1511c:	68fb      	ldr	r3, [r7, #12]
   1511e:	009b      	lsls	r3, r3, #2
   15120:	f043 0302 	orr.w	r3, r3, #2
   15124:	e03b      	b.n	1519e <mp_obj_new_str_from_vstr+0xb8>
        }
    }

    // make a new str/bytes object
    mp_obj_str_t *o = m_new_obj(mp_obj_str_t);
   15126:	2010      	movs	r0, #16
   15128:	f7eb f8f8 	bl	31c <m_malloc>
   1512c:	60b8      	str	r0, [r7, #8]
    o->base.type = type;
   1512e:	68bb      	ldr	r3, [r7, #8]
   15130:	687a      	ldr	r2, [r7, #4]
   15132:	601a      	str	r2, [r3, #0]
    o->len = vstr->len;
   15134:	683b      	ldr	r3, [r7, #0]
   15136:	685a      	ldr	r2, [r3, #4]
   15138:	68bb      	ldr	r3, [r7, #8]
   1513a:	609a      	str	r2, [r3, #8]
    o->hash = qstr_compute_hash((byte*)vstr->buf, vstr->len);
   1513c:	683b      	ldr	r3, [r7, #0]
   1513e:	689a      	ldr	r2, [r3, #8]
   15140:	683b      	ldr	r3, [r7, #0]
   15142:	685b      	ldr	r3, [r3, #4]
   15144:	4619      	mov	r1, r3
   15146:	4610      	mov	r0, r2
   15148:	f7eb fe58 	bl	dfc <qstr_compute_hash>
   1514c:	4602      	mov	r2, r0
   1514e:	68bb      	ldr	r3, [r7, #8]
   15150:	605a      	str	r2, [r3, #4]
    if (vstr->len + 1 == vstr->alloc) {
   15152:	683b      	ldr	r3, [r7, #0]
   15154:	685b      	ldr	r3, [r3, #4]
   15156:	1c5a      	adds	r2, r3, #1
   15158:	683b      	ldr	r3, [r7, #0]
   1515a:	681b      	ldr	r3, [r3, #0]
   1515c:	429a      	cmp	r2, r3
   1515e:	d104      	bne.n	1516a <mp_obj_new_str_from_vstr+0x84>
        o->data = (byte*)vstr->buf;
   15160:	683b      	ldr	r3, [r7, #0]
   15162:	689a      	ldr	r2, [r3, #8]
   15164:	68bb      	ldr	r3, [r7, #8]
   15166:	60da      	str	r2, [r3, #12]
   15168:	e00b      	b.n	15182 <mp_obj_new_str_from_vstr+0x9c>
    } else {
        o->data = (byte*)m_renew(char, vstr->buf, vstr->alloc, vstr->len + 1);
   1516a:	683b      	ldr	r3, [r7, #0]
   1516c:	689a      	ldr	r2, [r3, #8]
   1516e:	683b      	ldr	r3, [r7, #0]
   15170:	685b      	ldr	r3, [r3, #4]
   15172:	3301      	adds	r3, #1
   15174:	4619      	mov	r1, r3
   15176:	4610      	mov	r0, r2
   15178:	f7eb f902 	bl	380 <m_realloc>
   1517c:	4602      	mov	r2, r0
   1517e:	68bb      	ldr	r3, [r7, #8]
   15180:	60da      	str	r2, [r3, #12]
    }
    ((byte*)o->data)[o->len] = '\0'; // add null byte
   15182:	68bb      	ldr	r3, [r7, #8]
   15184:	68da      	ldr	r2, [r3, #12]
   15186:	68bb      	ldr	r3, [r7, #8]
   15188:	689b      	ldr	r3, [r3, #8]
   1518a:	4413      	add	r3, r2
   1518c:	2200      	movs	r2, #0
   1518e:	701a      	strb	r2, [r3, #0]
    vstr->buf = NULL;
   15190:	683b      	ldr	r3, [r7, #0]
   15192:	2200      	movs	r2, #0
   15194:	609a      	str	r2, [r3, #8]
    vstr->alloc = 0;
   15196:	683b      	ldr	r3, [r7, #0]
   15198:	2200      	movs	r2, #0
   1519a:	601a      	str	r2, [r3, #0]
    return MP_OBJ_FROM_PTR(o);
   1519c:	68bb      	ldr	r3, [r7, #8]
}
   1519e:	4618      	mov	r0, r3
   151a0:	3710      	adds	r7, #16
   151a2:	46bd      	mov	sp, r7
   151a4:	bd80      	pop	{r7, pc}
   151a6:	bf00      	nop
   151a8:	00021964 	.word	0x00021964

000151ac <mp_obj_new_str>:

mp_obj_t mp_obj_new_str(const char* data, size_t len) {
   151ac:	b580      	push	{r7, lr}
   151ae:	b084      	sub	sp, #16
   151b0:	af00      	add	r7, sp, #0
   151b2:	6078      	str	r0, [r7, #4]
   151b4:	6039      	str	r1, [r7, #0]
    qstr q = qstr_find_strn(data, len);
   151b6:	6839      	ldr	r1, [r7, #0]
   151b8:	6878      	ldr	r0, [r7, #4]
   151ba:	f7eb fecf 	bl	f5c <qstr_find_strn>
   151be:	60f8      	str	r0, [r7, #12]
    if (q != MP_QSTR_NULL) {
   151c0:	68fb      	ldr	r3, [r7, #12]
   151c2:	2b00      	cmp	r3, #0
   151c4:	d004      	beq.n	151d0 <mp_obj_new_str+0x24>
        // qstr with this data already exists
        return MP_OBJ_NEW_QSTR(q);
   151c6:	68fb      	ldr	r3, [r7, #12]
   151c8:	009b      	lsls	r3, r3, #2
   151ca:	f043 0302 	orr.w	r3, r3, #2
   151ce:	e005      	b.n	151dc <mp_obj_new_str+0x30>
    } else {
        // no existing qstr, don't make one
        return mp_obj_new_str_copy(&mp_type_str, (const byte*)data, len);
   151d0:	683a      	ldr	r2, [r7, #0]
   151d2:	6879      	ldr	r1, [r7, #4]
   151d4:	4803      	ldr	r0, [pc, #12]	; (151e4 <mp_obj_new_str+0x38>)
   151d6:	f7ff ff28 	bl	1502a <mp_obj_new_str_copy>
   151da:	4603      	mov	r3, r0
    }
}
   151dc:	4618      	mov	r0, r3
   151de:	3710      	adds	r7, #16
   151e0:	46bd      	mov	sp, r7
   151e2:	bd80      	pop	{r7, pc}
   151e4:	00021964 	.word	0x00021964

000151e8 <mp_obj_str_intern>:

mp_obj_t mp_obj_str_intern(mp_obj_t str) {
   151e8:	b580      	push	{r7, lr}
   151ea:	b084      	sub	sp, #16
   151ec:	af00      	add	r7, sp, #0
   151ee:	6078      	str	r0, [r7, #4]
    GET_STR_DATA_LEN(str, data, len);
   151f0:	6878      	ldr	r0, [r7, #4]
   151f2:	f7fc ff2d 	bl	12050 <MP_OBJ_IS_QSTR>
   151f6:	4603      	mov	r3, r0
   151f8:	2b00      	cmp	r3, #0
   151fa:	d009      	beq.n	15210 <mp_obj_str_intern+0x28>
   151fc:	687b      	ldr	r3, [r7, #4]
   151fe:	089b      	lsrs	r3, r3, #2
   15200:	f107 0208 	add.w	r2, r7, #8
   15204:	4611      	mov	r1, r2
   15206:	4618      	mov	r0, r3
   15208:	f7eb fff2 	bl	11f0 <qstr_data>
   1520c:	60f8      	str	r0, [r7, #12]
   1520e:	e005      	b.n	1521c <mp_obj_str_intern+0x34>
   15210:	687b      	ldr	r3, [r7, #4]
   15212:	689b      	ldr	r3, [r3, #8]
   15214:	60bb      	str	r3, [r7, #8]
   15216:	687b      	ldr	r3, [r7, #4]
   15218:	68db      	ldr	r3, [r3, #12]
   1521a:	60fb      	str	r3, [r7, #12]
    return mp_obj_new_str_via_qstr((const char*)data, len);
   1521c:	68bb      	ldr	r3, [r7, #8]
   1521e:	4619      	mov	r1, r3
   15220:	68f8      	ldr	r0, [r7, #12]
   15222:	f7ff ff4f 	bl	150c4 <mp_obj_new_str_via_qstr>
   15226:	4603      	mov	r3, r0
}
   15228:	4618      	mov	r0, r3
   1522a:	3710      	adds	r7, #16
   1522c:	46bd      	mov	sp, r7
   1522e:	bd80      	pop	{r7, pc}

00015230 <mp_obj_str_intern_checked>:

mp_obj_t mp_obj_str_intern_checked(mp_obj_t obj) {
   15230:	b580      	push	{r7, lr}
   15232:	b084      	sub	sp, #16
   15234:	af00      	add	r7, sp, #0
   15236:	6078      	str	r0, [r7, #4]
    size_t len;
    const char *data = mp_obj_str_get_data(obj, &len);
   15238:	f107 0308 	add.w	r3, r7, #8
   1523c:	4619      	mov	r1, r3
   1523e:	6878      	ldr	r0, [r7, #4]
   15240:	f000 f912 	bl	15468 <mp_obj_str_get_data>
   15244:	60f8      	str	r0, [r7, #12]
    return mp_obj_new_str_via_qstr((const char*)data, len);
   15246:	68bb      	ldr	r3, [r7, #8]
   15248:	4619      	mov	r1, r3
   1524a:	68f8      	ldr	r0, [r7, #12]
   1524c:	f7ff ff3a 	bl	150c4 <mp_obj_new_str_via_qstr>
   15250:	4603      	mov	r3, r0
}
   15252:	4618      	mov	r0, r3
   15254:	3710      	adds	r7, #16
   15256:	46bd      	mov	sp, r7
   15258:	bd80      	pop	{r7, pc}

0001525a <mp_obj_new_bytes>:

mp_obj_t mp_obj_new_bytes(const byte* data, size_t len) {
   1525a:	b580      	push	{r7, lr}
   1525c:	b082      	sub	sp, #8
   1525e:	af00      	add	r7, sp, #0
   15260:	6078      	str	r0, [r7, #4]
   15262:	6039      	str	r1, [r7, #0]
    return mp_obj_new_str_copy(&mp_type_bytes, data, len);
   15264:	683a      	ldr	r2, [r7, #0]
   15266:	6879      	ldr	r1, [r7, #4]
   15268:	4803      	ldr	r0, [pc, #12]	; (15278 <mp_obj_new_bytes+0x1e>)
   1526a:	f7ff fede 	bl	1502a <mp_obj_new_str_copy>
   1526e:	4603      	mov	r3, r0
}
   15270:	4618      	mov	r0, r3
   15272:	3708      	adds	r7, #8
   15274:	46bd      	mov	sp, r7
   15276:	bd80      	pop	{r7, pc}
   15278:	000219a0 	.word	0x000219a0

0001527c <mp_obj_str_equal>:

bool mp_obj_str_equal(mp_obj_t s1, mp_obj_t s2) {
   1527c:	b580      	push	{r7, lr}
   1527e:	b088      	sub	sp, #32
   15280:	af00      	add	r7, sp, #0
   15282:	6078      	str	r0, [r7, #4]
   15284:	6039      	str	r1, [r7, #0]
    if (MP_OBJ_IS_QSTR(s1) && MP_OBJ_IS_QSTR(s2)) {
   15286:	6878      	ldr	r0, [r7, #4]
   15288:	f7fc fee2 	bl	12050 <MP_OBJ_IS_QSTR>
   1528c:	4603      	mov	r3, r0
   1528e:	2b00      	cmp	r3, #0
   15290:	d00d      	beq.n	152ae <mp_obj_str_equal+0x32>
   15292:	6838      	ldr	r0, [r7, #0]
   15294:	f7fc fedc 	bl	12050 <MP_OBJ_IS_QSTR>
   15298:	4603      	mov	r3, r0
   1529a:	2b00      	cmp	r3, #0
   1529c:	d007      	beq.n	152ae <mp_obj_str_equal+0x32>
        return s1 == s2;
   1529e:	687a      	ldr	r2, [r7, #4]
   152a0:	683b      	ldr	r3, [r7, #0]
   152a2:	429a      	cmp	r2, r3
   152a4:	bf0c      	ite	eq
   152a6:	2301      	moveq	r3, #1
   152a8:	2300      	movne	r3, #0
   152aa:	b2db      	uxtb	r3, r3
   152ac:	e069      	b.n	15382 <mp_obj_str_equal+0x106>
    } else {
        GET_STR_HASH(s1, h1);
   152ae:	6878      	ldr	r0, [r7, #4]
   152b0:	f7fc fece 	bl	12050 <MP_OBJ_IS_QSTR>
   152b4:	4603      	mov	r3, r0
   152b6:	2b00      	cmp	r3, #0
   152b8:	d006      	beq.n	152c8 <mp_obj_str_equal+0x4c>
   152ba:	687b      	ldr	r3, [r7, #4]
   152bc:	089b      	lsrs	r3, r3, #2
   152be:	4618      	mov	r0, r3
   152c0:	f7eb ff6c 	bl	119c <qstr_hash>
   152c4:	61f8      	str	r0, [r7, #28]
   152c6:	e002      	b.n	152ce <mp_obj_str_equal+0x52>
   152c8:	687b      	ldr	r3, [r7, #4]
   152ca:	685b      	ldr	r3, [r3, #4]
   152cc:	61fb      	str	r3, [r7, #28]
        GET_STR_HASH(s2, h2);
   152ce:	6838      	ldr	r0, [r7, #0]
   152d0:	f7fc febe 	bl	12050 <MP_OBJ_IS_QSTR>
   152d4:	4603      	mov	r3, r0
   152d6:	2b00      	cmp	r3, #0
   152d8:	d006      	beq.n	152e8 <mp_obj_str_equal+0x6c>
   152da:	683b      	ldr	r3, [r7, #0]
   152dc:	089b      	lsrs	r3, r3, #2
   152de:	4618      	mov	r0, r3
   152e0:	f7eb ff5c 	bl	119c <qstr_hash>
   152e4:	61b8      	str	r0, [r7, #24]
   152e6:	e002      	b.n	152ee <mp_obj_str_equal+0x72>
   152e8:	683b      	ldr	r3, [r7, #0]
   152ea:	685b      	ldr	r3, [r3, #4]
   152ec:	61bb      	str	r3, [r7, #24]
        // If any of hashes is 0, it means it's not valid
        if (h1 != 0 && h2 != 0 && h1 != h2) {
   152ee:	69fb      	ldr	r3, [r7, #28]
   152f0:	2b00      	cmp	r3, #0
   152f2:	d008      	beq.n	15306 <mp_obj_str_equal+0x8a>
   152f4:	69bb      	ldr	r3, [r7, #24]
   152f6:	2b00      	cmp	r3, #0
   152f8:	d005      	beq.n	15306 <mp_obj_str_equal+0x8a>
   152fa:	69fa      	ldr	r2, [r7, #28]
   152fc:	69bb      	ldr	r3, [r7, #24]
   152fe:	429a      	cmp	r2, r3
   15300:	d001      	beq.n	15306 <mp_obj_str_equal+0x8a>
            return false;
   15302:	2300      	movs	r3, #0
   15304:	e03d      	b.n	15382 <mp_obj_str_equal+0x106>
        }
        GET_STR_DATA_LEN(s1, d1, l1);
   15306:	6878      	ldr	r0, [r7, #4]
   15308:	f7fc fea2 	bl	12050 <MP_OBJ_IS_QSTR>
   1530c:	4603      	mov	r3, r0
   1530e:	2b00      	cmp	r3, #0
   15310:	d009      	beq.n	15326 <mp_obj_str_equal+0xaa>
   15312:	687b      	ldr	r3, [r7, #4]
   15314:	089b      	lsrs	r3, r3, #2
   15316:	f107 020c 	add.w	r2, r7, #12
   1531a:	4611      	mov	r1, r2
   1531c:	4618      	mov	r0, r3
   1531e:	f7eb ff67 	bl	11f0 <qstr_data>
   15322:	6178      	str	r0, [r7, #20]
   15324:	e005      	b.n	15332 <mp_obj_str_equal+0xb6>
   15326:	687b      	ldr	r3, [r7, #4]
   15328:	689b      	ldr	r3, [r3, #8]
   1532a:	60fb      	str	r3, [r7, #12]
   1532c:	687b      	ldr	r3, [r7, #4]
   1532e:	68db      	ldr	r3, [r3, #12]
   15330:	617b      	str	r3, [r7, #20]
        GET_STR_DATA_LEN(s2, d2, l2);
   15332:	6838      	ldr	r0, [r7, #0]
   15334:	f7fc fe8c 	bl	12050 <MP_OBJ_IS_QSTR>
   15338:	4603      	mov	r3, r0
   1533a:	2b00      	cmp	r3, #0
   1533c:	d009      	beq.n	15352 <mp_obj_str_equal+0xd6>
   1533e:	683b      	ldr	r3, [r7, #0]
   15340:	089b      	lsrs	r3, r3, #2
   15342:	f107 0208 	add.w	r2, r7, #8
   15346:	4611      	mov	r1, r2
   15348:	4618      	mov	r0, r3
   1534a:	f7eb ff51 	bl	11f0 <qstr_data>
   1534e:	6138      	str	r0, [r7, #16]
   15350:	e005      	b.n	1535e <mp_obj_str_equal+0xe2>
   15352:	683b      	ldr	r3, [r7, #0]
   15354:	689b      	ldr	r3, [r3, #8]
   15356:	60bb      	str	r3, [r7, #8]
   15358:	683b      	ldr	r3, [r7, #0]
   1535a:	68db      	ldr	r3, [r3, #12]
   1535c:	613b      	str	r3, [r7, #16]
        if (l1 != l2) {
   1535e:	68fa      	ldr	r2, [r7, #12]
   15360:	68bb      	ldr	r3, [r7, #8]
   15362:	429a      	cmp	r2, r3
   15364:	d001      	beq.n	1536a <mp_obj_str_equal+0xee>
            return false;
   15366:	2300      	movs	r3, #0
   15368:	e00b      	b.n	15382 <mp_obj_str_equal+0x106>
        }
        return memcmp(d1, d2, l1) == 0;
   1536a:	68fb      	ldr	r3, [r7, #12]
   1536c:	461a      	mov	r2, r3
   1536e:	6939      	ldr	r1, [r7, #16]
   15370:	6978      	ldr	r0, [r7, #20]
   15372:	f006 fc0c 	bl	1bb8e <memcmp>
   15376:	4603      	mov	r3, r0
   15378:	2b00      	cmp	r3, #0
   1537a:	bf0c      	ite	eq
   1537c:	2301      	moveq	r3, #1
   1537e:	2300      	movne	r3, #0
   15380:	b2db      	uxtb	r3, r3
    }
}
   15382:	4618      	mov	r0, r3
   15384:	3720      	adds	r7, #32
   15386:	46bd      	mov	sp, r7
   15388:	bd80      	pop	{r7, pc}

0001538a <bad_implicit_conversion>:

STATIC NORETURN void bad_implicit_conversion(mp_obj_t self_in) {
   1538a:	b580      	push	{r7, lr}
   1538c:	b082      	sub	sp, #8
   1538e:	af00      	add	r7, sp, #0
   15390:	6078      	str	r0, [r7, #4]
    if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
        mp_raise_TypeError("can't convert to str implicitly");
   15392:	4801      	ldr	r0, [pc, #4]	; (15398 <bad_implicit_conversion+0xe>)
   15394:	f7f7 fdc6 	bl	cf24 <mp_raise_TypeError>
   15398:	000219f0 	.word	0x000219f0

0001539c <mp_obj_str_get_qstr>:
    }
}

// use this if you will anyway convert the string to a qstr
// will be more efficient for the case where it's already a qstr
qstr mp_obj_str_get_qstr(mp_obj_t self_in) {
   1539c:	b580      	push	{r7, lr}
   1539e:	b084      	sub	sp, #16
   153a0:	af00      	add	r7, sp, #0
   153a2:	6078      	str	r0, [r7, #4]
    if (MP_OBJ_IS_QSTR(self_in)) {
   153a4:	6878      	ldr	r0, [r7, #4]
   153a6:	f7fc fe53 	bl	12050 <MP_OBJ_IS_QSTR>
   153aa:	4603      	mov	r3, r0
   153ac:	2b00      	cmp	r3, #0
   153ae:	d002      	beq.n	153b6 <mp_obj_str_get_qstr+0x1a>
        return MP_OBJ_QSTR_VALUE(self_in);
   153b0:	687b      	ldr	r3, [r7, #4]
   153b2:	089b      	lsrs	r3, r3, #2
   153b4:	e019      	b.n	153ea <mp_obj_str_get_qstr+0x4e>
    } else if (MP_OBJ_IS_TYPE(self_in, &mp_type_str)) {
   153b6:	6878      	ldr	r0, [r7, #4]
   153b8:	f7fc fe5c 	bl	12074 <MP_OBJ_IS_OBJ>
   153bc:	4603      	mov	r3, r0
   153be:	2b00      	cmp	r3, #0
   153c0:	d010      	beq.n	153e4 <mp_obj_str_get_qstr+0x48>
   153c2:	687b      	ldr	r3, [r7, #4]
   153c4:	681b      	ldr	r3, [r3, #0]
   153c6:	4a0b      	ldr	r2, [pc, #44]	; (153f4 <mp_obj_str_get_qstr+0x58>)
   153c8:	4293      	cmp	r3, r2
   153ca:	d10b      	bne.n	153e4 <mp_obj_str_get_qstr+0x48>
        mp_obj_str_t *self = MP_OBJ_TO_PTR(self_in);
   153cc:	687b      	ldr	r3, [r7, #4]
   153ce:	60fb      	str	r3, [r7, #12]
        return qstr_from_strn((char*)self->data, self->len);
   153d0:	68fb      	ldr	r3, [r7, #12]
   153d2:	68da      	ldr	r2, [r3, #12]
   153d4:	68fb      	ldr	r3, [r7, #12]
   153d6:	689b      	ldr	r3, [r3, #8]
   153d8:	4619      	mov	r1, r3
   153da:	4610      	mov	r0, r2
   153dc:	f7eb fe21 	bl	1022 <qstr_from_strn>
   153e0:	4603      	mov	r3, r0
   153e2:	e002      	b.n	153ea <mp_obj_str_get_qstr+0x4e>
    } else {
        bad_implicit_conversion(self_in);
   153e4:	6878      	ldr	r0, [r7, #4]
   153e6:	f7ff ffd0 	bl	1538a <bad_implicit_conversion>
    }
}
   153ea:	4618      	mov	r0, r3
   153ec:	3710      	adds	r7, #16
   153ee:	46bd      	mov	sp, r7
   153f0:	bd80      	pop	{r7, pc}
   153f2:	bf00      	nop
   153f4:	00021964 	.word	0x00021964

000153f8 <mp_obj_str_get_str>:

// only use this function if you need the str data to be zero terminated
// at the moment all strings are zero terminated to help with C ASCIIZ compatibility
const char *mp_obj_str_get_str(mp_obj_t self_in) {
   153f8:	b580      	push	{r7, lr}
   153fa:	b084      	sub	sp, #16
   153fc:	af00      	add	r7, sp, #0
   153fe:	6078      	str	r0, [r7, #4]
    if (MP_OBJ_IS_STR_OR_BYTES(self_in)) {
   15400:	6878      	ldr	r0, [r7, #4]
   15402:	f7fc fe25 	bl	12050 <MP_OBJ_IS_QSTR>
   15406:	4603      	mov	r3, r0
   15408:	2b00      	cmp	r3, #0
   1540a:	d10b      	bne.n	15424 <mp_obj_str_get_str+0x2c>
   1540c:	6878      	ldr	r0, [r7, #4]
   1540e:	f7fc fe31 	bl	12074 <MP_OBJ_IS_OBJ>
   15412:	4603      	mov	r3, r0
   15414:	2b00      	cmp	r3, #0
   15416:	d01d      	beq.n	15454 <mp_obj_str_get_str+0x5c>
   15418:	687b      	ldr	r3, [r7, #4]
   1541a:	681b      	ldr	r3, [r3, #0]
   1541c:	699b      	ldr	r3, [r3, #24]
   1541e:	4a11      	ldr	r2, [pc, #68]	; (15464 <mp_obj_str_get_str+0x6c>)
   15420:	4293      	cmp	r3, r2
   15422:	d117      	bne.n	15454 <mp_obj_str_get_str+0x5c>
        GET_STR_DATA_LEN(self_in, s, l);
   15424:	6878      	ldr	r0, [r7, #4]
   15426:	f7fc fe13 	bl	12050 <MP_OBJ_IS_QSTR>
   1542a:	4603      	mov	r3, r0
   1542c:	2b00      	cmp	r3, #0
   1542e:	d009      	beq.n	15444 <mp_obj_str_get_str+0x4c>
   15430:	687b      	ldr	r3, [r7, #4]
   15432:	089b      	lsrs	r3, r3, #2
   15434:	f107 0208 	add.w	r2, r7, #8
   15438:	4611      	mov	r1, r2
   1543a:	4618      	mov	r0, r3
   1543c:	f7eb fed8 	bl	11f0 <qstr_data>
   15440:	60f8      	str	r0, [r7, #12]
   15442:	e005      	b.n	15450 <mp_obj_str_get_str+0x58>
   15444:	687b      	ldr	r3, [r7, #4]
   15446:	689b      	ldr	r3, [r3, #8]
   15448:	60bb      	str	r3, [r7, #8]
   1544a:	687b      	ldr	r3, [r7, #4]
   1544c:	68db      	ldr	r3, [r3, #12]
   1544e:	60fb      	str	r3, [r7, #12]
        (void)l; // len unused
        return (const char*)s;
   15450:	68fb      	ldr	r3, [r7, #12]
   15452:	e002      	b.n	1545a <mp_obj_str_get_str+0x62>
    } else {
        bad_implicit_conversion(self_in);
   15454:	6878      	ldr	r0, [r7, #4]
   15456:	f7ff ff98 	bl	1538a <bad_implicit_conversion>
    }
}
   1545a:	4618      	mov	r0, r3
   1545c:	3710      	adds	r7, #16
   1545e:	46bd      	mov	sp, r7
   15460:	bd80      	pop	{r7, pc}
   15462:	bf00      	nop
   15464:	000126c3 	.word	0x000126c3

00015468 <mp_obj_str_get_data>:

const char *mp_obj_str_get_data(mp_obj_t self_in, size_t *len) {
   15468:	b580      	push	{r7, lr}
   1546a:	b084      	sub	sp, #16
   1546c:	af00      	add	r7, sp, #0
   1546e:	6078      	str	r0, [r7, #4]
   15470:	6039      	str	r1, [r7, #0]
    if (MP_OBJ_IS_STR_OR_BYTES(self_in)) {
   15472:	6878      	ldr	r0, [r7, #4]
   15474:	f7fc fdec 	bl	12050 <MP_OBJ_IS_QSTR>
   15478:	4603      	mov	r3, r0
   1547a:	2b00      	cmp	r3, #0
   1547c:	d10b      	bne.n	15496 <mp_obj_str_get_data+0x2e>
   1547e:	6878      	ldr	r0, [r7, #4]
   15480:	f7fc fdf8 	bl	12074 <MP_OBJ_IS_OBJ>
   15484:	4603      	mov	r3, r0
   15486:	2b00      	cmp	r3, #0
   15488:	d020      	beq.n	154cc <mp_obj_str_get_data+0x64>
   1548a:	687b      	ldr	r3, [r7, #4]
   1548c:	681b      	ldr	r3, [r3, #0]
   1548e:	699b      	ldr	r3, [r3, #24]
   15490:	4a12      	ldr	r2, [pc, #72]	; (154dc <mp_obj_str_get_data+0x74>)
   15492:	4293      	cmp	r3, r2
   15494:	d11a      	bne.n	154cc <mp_obj_str_get_data+0x64>
        GET_STR_DATA_LEN(self_in, s, l);
   15496:	6878      	ldr	r0, [r7, #4]
   15498:	f7fc fdda 	bl	12050 <MP_OBJ_IS_QSTR>
   1549c:	4603      	mov	r3, r0
   1549e:	2b00      	cmp	r3, #0
   154a0:	d009      	beq.n	154b6 <mp_obj_str_get_data+0x4e>
   154a2:	687b      	ldr	r3, [r7, #4]
   154a4:	089b      	lsrs	r3, r3, #2
   154a6:	f107 0208 	add.w	r2, r7, #8
   154aa:	4611      	mov	r1, r2
   154ac:	4618      	mov	r0, r3
   154ae:	f7eb fe9f 	bl	11f0 <qstr_data>
   154b2:	60f8      	str	r0, [r7, #12]
   154b4:	e005      	b.n	154c2 <mp_obj_str_get_data+0x5a>
   154b6:	687b      	ldr	r3, [r7, #4]
   154b8:	689b      	ldr	r3, [r3, #8]
   154ba:	60bb      	str	r3, [r7, #8]
   154bc:	687b      	ldr	r3, [r7, #4]
   154be:	68db      	ldr	r3, [r3, #12]
   154c0:	60fb      	str	r3, [r7, #12]
        *len = l;
   154c2:	68ba      	ldr	r2, [r7, #8]
   154c4:	683b      	ldr	r3, [r7, #0]
   154c6:	601a      	str	r2, [r3, #0]
        return (const char*)s;
   154c8:	68fb      	ldr	r3, [r7, #12]
   154ca:	e002      	b.n	154d2 <mp_obj_str_get_data+0x6a>
    } else {
        bad_implicit_conversion(self_in);
   154cc:	6878      	ldr	r0, [r7, #4]
   154ce:	f7ff ff5c 	bl	1538a <bad_implicit_conversion>
    }
}
   154d2:	4618      	mov	r0, r3
   154d4:	3710      	adds	r7, #16
   154d6:	46bd      	mov	sp, r7
   154d8:	bd80      	pop	{r7, pc}
   154da:	bf00      	nop
   154dc:	000126c3 	.word	0x000126c3

000154e0 <str_it_iternext>:
    mp_obj_t str;
    size_t cur;
} mp_obj_str8_it_t;

#if !MICROPY_PY_BUILTINS_STR_UNICODE
STATIC mp_obj_t str_it_iternext(mp_obj_t self_in) {
   154e0:	b580      	push	{r7, lr}
   154e2:	b086      	sub	sp, #24
   154e4:	af00      	add	r7, sp, #0
   154e6:	6078      	str	r0, [r7, #4]
    mp_obj_str8_it_t *self = MP_OBJ_TO_PTR(self_in);
   154e8:	687b      	ldr	r3, [r7, #4]
   154ea:	613b      	str	r3, [r7, #16]
    GET_STR_DATA_LEN(self->str, str, len);
   154ec:	693b      	ldr	r3, [r7, #16]
   154ee:	689b      	ldr	r3, [r3, #8]
   154f0:	4618      	mov	r0, r3
   154f2:	f7fc fdad 	bl	12050 <MP_OBJ_IS_QSTR>
   154f6:	4603      	mov	r3, r0
   154f8:	2b00      	cmp	r3, #0
   154fa:	d00a      	beq.n	15512 <str_it_iternext+0x32>
   154fc:	693b      	ldr	r3, [r7, #16]
   154fe:	689b      	ldr	r3, [r3, #8]
   15500:	089b      	lsrs	r3, r3, #2
   15502:	f107 0208 	add.w	r2, r7, #8
   15506:	4611      	mov	r1, r2
   15508:	4618      	mov	r0, r3
   1550a:	f7eb fe71 	bl	11f0 <qstr_data>
   1550e:	6178      	str	r0, [r7, #20]
   15510:	e007      	b.n	15522 <str_it_iternext+0x42>
   15512:	693b      	ldr	r3, [r7, #16]
   15514:	689b      	ldr	r3, [r3, #8]
   15516:	689b      	ldr	r3, [r3, #8]
   15518:	60bb      	str	r3, [r7, #8]
   1551a:	693b      	ldr	r3, [r7, #16]
   1551c:	689b      	ldr	r3, [r3, #8]
   1551e:	68db      	ldr	r3, [r3, #12]
   15520:	617b      	str	r3, [r7, #20]
    if (self->cur < len) {
   15522:	693b      	ldr	r3, [r7, #16]
   15524:	68da      	ldr	r2, [r3, #12]
   15526:	68bb      	ldr	r3, [r7, #8]
   15528:	429a      	cmp	r2, r3
   1552a:	d20f      	bcs.n	1554c <str_it_iternext+0x6c>
        mp_obj_t o_out = mp_obj_new_str_via_qstr((const char*)str + self->cur, 1);
   1552c:	693b      	ldr	r3, [r7, #16]
   1552e:	68db      	ldr	r3, [r3, #12]
   15530:	697a      	ldr	r2, [r7, #20]
   15532:	4413      	add	r3, r2
   15534:	2101      	movs	r1, #1
   15536:	4618      	mov	r0, r3
   15538:	f7ff fdc4 	bl	150c4 <mp_obj_new_str_via_qstr>
   1553c:	60f8      	str	r0, [r7, #12]
        self->cur += 1;
   1553e:	693b      	ldr	r3, [r7, #16]
   15540:	68db      	ldr	r3, [r3, #12]
   15542:	1c5a      	adds	r2, r3, #1
   15544:	693b      	ldr	r3, [r7, #16]
   15546:	60da      	str	r2, [r3, #12]
        return o_out;
   15548:	68fb      	ldr	r3, [r7, #12]
   1554a:	e000      	b.n	1554e <str_it_iternext+0x6e>
    } else {
        return MP_OBJ_STOP_ITERATION;
   1554c:	2304      	movs	r3, #4
    }
}
   1554e:	4618      	mov	r0, r3
   15550:	3718      	adds	r7, #24
   15552:	46bd      	mov	sp, r7
   15554:	bd80      	pop	{r7, pc}

00015556 <mp_obj_new_str_iterator>:

STATIC mp_obj_t mp_obj_new_str_iterator(mp_obj_t str, mp_obj_iter_buf_t *iter_buf) {
   15556:	b480      	push	{r7}
   15558:	b085      	sub	sp, #20
   1555a:	af00      	add	r7, sp, #0
   1555c:	6078      	str	r0, [r7, #4]
   1555e:	6039      	str	r1, [r7, #0]
    assert(sizeof(mp_obj_str8_it_t) <= sizeof(mp_obj_iter_buf_t));
    mp_obj_str8_it_t *o = (mp_obj_str8_it_t*)iter_buf;
   15560:	683b      	ldr	r3, [r7, #0]
   15562:	60fb      	str	r3, [r7, #12]
    o->base.type = &mp_type_polymorph_iter;
   15564:	68fb      	ldr	r3, [r7, #12]
   15566:	4a09      	ldr	r2, [pc, #36]	; (1558c <mp_obj_new_str_iterator+0x36>)
   15568:	601a      	str	r2, [r3, #0]
    o->iternext = str_it_iternext;
   1556a:	68fb      	ldr	r3, [r7, #12]
   1556c:	4a08      	ldr	r2, [pc, #32]	; (15590 <mp_obj_new_str_iterator+0x3a>)
   1556e:	605a      	str	r2, [r3, #4]
    o->str = str;
   15570:	68fb      	ldr	r3, [r7, #12]
   15572:	687a      	ldr	r2, [r7, #4]
   15574:	609a      	str	r2, [r3, #8]
    o->cur = 0;
   15576:	68fb      	ldr	r3, [r7, #12]
   15578:	2200      	movs	r2, #0
   1557a:	60da      	str	r2, [r3, #12]
    return MP_OBJ_FROM_PTR(o);
   1557c:	68fb      	ldr	r3, [r7, #12]
}
   1557e:	4618      	mov	r0, r3
   15580:	3714      	adds	r7, #20
   15582:	46bd      	mov	sp, r7
   15584:	f85d 7b04 	ldr.w	r7, [sp], #4
   15588:	4770      	bx	lr
   1558a:	bf00      	nop
   1558c:	00021234 	.word	0x00021234
   15590:	000154e1 	.word	0x000154e1

00015594 <bytes_it_iternext>:
#endif

STATIC mp_obj_t bytes_it_iternext(mp_obj_t self_in) {
   15594:	b580      	push	{r7, lr}
   15596:	b086      	sub	sp, #24
   15598:	af00      	add	r7, sp, #0
   1559a:	6078      	str	r0, [r7, #4]
    mp_obj_str8_it_t *self = MP_OBJ_TO_PTR(self_in);
   1559c:	687b      	ldr	r3, [r7, #4]
   1559e:	613b      	str	r3, [r7, #16]
    GET_STR_DATA_LEN(self->str, str, len);
   155a0:	693b      	ldr	r3, [r7, #16]
   155a2:	689b      	ldr	r3, [r3, #8]
   155a4:	4618      	mov	r0, r3
   155a6:	f7fc fd53 	bl	12050 <MP_OBJ_IS_QSTR>
   155aa:	4603      	mov	r3, r0
   155ac:	2b00      	cmp	r3, #0
   155ae:	d00a      	beq.n	155c6 <bytes_it_iternext+0x32>
   155b0:	693b      	ldr	r3, [r7, #16]
   155b2:	689b      	ldr	r3, [r3, #8]
   155b4:	089b      	lsrs	r3, r3, #2
   155b6:	f107 0208 	add.w	r2, r7, #8
   155ba:	4611      	mov	r1, r2
   155bc:	4618      	mov	r0, r3
   155be:	f7eb fe17 	bl	11f0 <qstr_data>
   155c2:	6178      	str	r0, [r7, #20]
   155c4:	e007      	b.n	155d6 <bytes_it_iternext+0x42>
   155c6:	693b      	ldr	r3, [r7, #16]
   155c8:	689b      	ldr	r3, [r3, #8]
   155ca:	689b      	ldr	r3, [r3, #8]
   155cc:	60bb      	str	r3, [r7, #8]
   155ce:	693b      	ldr	r3, [r7, #16]
   155d0:	689b      	ldr	r3, [r3, #8]
   155d2:	68db      	ldr	r3, [r3, #12]
   155d4:	617b      	str	r3, [r7, #20]
    if (self->cur < len) {
   155d6:	693b      	ldr	r3, [r7, #16]
   155d8:	68da      	ldr	r2, [r3, #12]
   155da:	68bb      	ldr	r3, [r7, #8]
   155dc:	429a      	cmp	r2, r3
   155de:	d20f      	bcs.n	15600 <bytes_it_iternext+0x6c>
        mp_obj_t o_out = MP_OBJ_NEW_SMALL_INT(str[self->cur]);
   155e0:	693b      	ldr	r3, [r7, #16]
   155e2:	68db      	ldr	r3, [r3, #12]
   155e4:	697a      	ldr	r2, [r7, #20]
   155e6:	4413      	add	r3, r2
   155e8:	781b      	ldrb	r3, [r3, #0]
   155ea:	005b      	lsls	r3, r3, #1
   155ec:	f043 0301 	orr.w	r3, r3, #1
   155f0:	60fb      	str	r3, [r7, #12]
        self->cur += 1;
   155f2:	693b      	ldr	r3, [r7, #16]
   155f4:	68db      	ldr	r3, [r3, #12]
   155f6:	1c5a      	adds	r2, r3, #1
   155f8:	693b      	ldr	r3, [r7, #16]
   155fa:	60da      	str	r2, [r3, #12]
        return o_out;
   155fc:	68fb      	ldr	r3, [r7, #12]
   155fe:	e000      	b.n	15602 <bytes_it_iternext+0x6e>
    } else {
        return MP_OBJ_STOP_ITERATION;
   15600:	2304      	movs	r3, #4
    }
}
   15602:	4618      	mov	r0, r3
   15604:	3718      	adds	r7, #24
   15606:	46bd      	mov	sp, r7
   15608:	bd80      	pop	{r7, pc}

0001560a <mp_obj_new_bytes_iterator>:

mp_obj_t mp_obj_new_bytes_iterator(mp_obj_t str, mp_obj_iter_buf_t *iter_buf) {
   1560a:	b480      	push	{r7}
   1560c:	b085      	sub	sp, #20
   1560e:	af00      	add	r7, sp, #0
   15610:	6078      	str	r0, [r7, #4]
   15612:	6039      	str	r1, [r7, #0]
    assert(sizeof(mp_obj_str8_it_t) <= sizeof(mp_obj_iter_buf_t));
    mp_obj_str8_it_t *o = (mp_obj_str8_it_t*)iter_buf;
   15614:	683b      	ldr	r3, [r7, #0]
   15616:	60fb      	str	r3, [r7, #12]
    o->base.type = &mp_type_polymorph_iter;
   15618:	68fb      	ldr	r3, [r7, #12]
   1561a:	4a09      	ldr	r2, [pc, #36]	; (15640 <mp_obj_new_bytes_iterator+0x36>)
   1561c:	601a      	str	r2, [r3, #0]
    o->iternext = bytes_it_iternext;
   1561e:	68fb      	ldr	r3, [r7, #12]
   15620:	4a08      	ldr	r2, [pc, #32]	; (15644 <mp_obj_new_bytes_iterator+0x3a>)
   15622:	605a      	str	r2, [r3, #4]
    o->str = str;
   15624:	68fb      	ldr	r3, [r7, #12]
   15626:	687a      	ldr	r2, [r7, #4]
   15628:	609a      	str	r2, [r3, #8]
    o->cur = 0;
   1562a:	68fb      	ldr	r3, [r7, #12]
   1562c:	2200      	movs	r2, #0
   1562e:	60da      	str	r2, [r3, #12]
    return MP_OBJ_FROM_PTR(o);
   15630:	68fb      	ldr	r3, [r7, #12]
}
   15632:	4618      	mov	r0, r3
   15634:	3714      	adds	r7, #20
   15636:	46bd      	mov	sp, r7
   15638:	f85d 7b04 	ldr.w	r7, [sp], #4
   1563c:	4770      	bx	lr
   1563e:	bf00      	nop
   15640:	00021234 	.word	0x00021234
   15644:	00015595 	.word	0x00015595

00015648 <MP_OBJ_IS_OBJ>:
    { return ((((mp_int_t)(o)) & 3) == 0); }
   15648:	b480      	push	{r7}
   1564a:	b083      	sub	sp, #12
   1564c:	af00      	add	r7, sp, #0
   1564e:	6078      	str	r0, [r7, #4]
   15650:	687b      	ldr	r3, [r7, #4]
   15652:	f003 0303 	and.w	r3, r3, #3
   15656:	2b00      	cmp	r3, #0
   15658:	bf0c      	ite	eq
   1565a:	2301      	moveq	r3, #1
   1565c:	2300      	movne	r3, #0
   1565e:	b2db      	uxtb	r3, r3
   15660:	4618      	mov	r0, r3
   15662:	370c      	adds	r7, #12
   15664:	46bd      	mov	sp, r7
   15666:	f85d 7b04 	ldr.w	r7, [sp], #4
   1566a:	4770      	bx	lr

0001566c <mp_obj_new_bool>:
static inline mp_obj_t mp_obj_new_bool(mp_int_t x) { return x ? mp_const_true : mp_const_false; }
   1566c:	b480      	push	{r7}
   1566e:	b083      	sub	sp, #12
   15670:	af00      	add	r7, sp, #0
   15672:	6078      	str	r0, [r7, #4]
   15674:	687b      	ldr	r3, [r7, #4]
   15676:	2b00      	cmp	r3, #0
   15678:	d001      	beq.n	1567e <mp_obj_new_bool+0x12>
   1567a:	4b04      	ldr	r3, [pc, #16]	; (1568c <mp_obj_new_bool+0x20>)
   1567c:	e000      	b.n	15680 <mp_obj_new_bool+0x14>
   1567e:	4b04      	ldr	r3, [pc, #16]	; (15690 <mp_obj_new_bool+0x24>)
   15680:	4618      	mov	r0, r3
   15682:	370c      	adds	r7, #12
   15684:	46bd      	mov	sp, r7
   15686:	f85d 7b04 	ldr.w	r7, [sp], #4
   1568a:	4770      	bx	lr
   1568c:	0001f9c4 	.word	0x0001f9c4
   15690:	0001f9bc 	.word	0x0001f9bc

00015694 <mp_obj_tuple_print>:
#include "py/runtime.h"

/******************************************************************************/
/* tuple                                                                      */

void mp_obj_tuple_print(const mp_print_t *print, mp_obj_t o_in, mp_print_kind_t kind) {
   15694:	b580      	push	{r7, lr}
   15696:	b086      	sub	sp, #24
   15698:	af00      	add	r7, sp, #0
   1569a:	60f8      	str	r0, [r7, #12]
   1569c:	60b9      	str	r1, [r7, #8]
   1569e:	607a      	str	r2, [r7, #4]
    mp_obj_tuple_t *o = MP_OBJ_TO_PTR(o_in);
   156a0:	68bb      	ldr	r3, [r7, #8]
   156a2:	613b      	str	r3, [r7, #16]
    if (MICROPY_PY_UJSON && kind == PRINT_JSON) {
        mp_print_str(print, "[");
    } else {
        mp_print_str(print, "(");
   156a4:	4918      	ldr	r1, [pc, #96]	; (15708 <mp_obj_tuple_print+0x74>)
   156a6:	68f8      	ldr	r0, [r7, #12]
   156a8:	f7ec f8d2 	bl	1850 <mp_print_str>
        kind = PRINT_REPR;
   156ac:	2301      	movs	r3, #1
   156ae:	607b      	str	r3, [r7, #4]
    }
    for (size_t i = 0; i < o->len; i++) {
   156b0:	2300      	movs	r3, #0
   156b2:	617b      	str	r3, [r7, #20]
   156b4:	e013      	b.n	156de <mp_obj_tuple_print+0x4a>
        if (i > 0) {
   156b6:	697b      	ldr	r3, [r7, #20]
   156b8:	2b00      	cmp	r3, #0
   156ba:	d003      	beq.n	156c4 <mp_obj_tuple_print+0x30>
            mp_print_str(print, ", ");
   156bc:	4913      	ldr	r1, [pc, #76]	; (1570c <mp_obj_tuple_print+0x78>)
   156be:	68f8      	ldr	r0, [r7, #12]
   156c0:	f7ec f8c6 	bl	1850 <mp_print_str>
        }
        mp_obj_print_helper(print, o->items[i], kind);
   156c4:	693b      	ldr	r3, [r7, #16]
   156c6:	697a      	ldr	r2, [r7, #20]
   156c8:	3202      	adds	r2, #2
   156ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   156ce:	687a      	ldr	r2, [r7, #4]
   156d0:	4619      	mov	r1, r3
   156d2:	68f8      	ldr	r0, [r7, #12]
   156d4:	f7f8 f86d 	bl	d7b2 <mp_obj_print_helper>
    for (size_t i = 0; i < o->len; i++) {
   156d8:	697b      	ldr	r3, [r7, #20]
   156da:	3301      	adds	r3, #1
   156dc:	617b      	str	r3, [r7, #20]
   156de:	693b      	ldr	r3, [r7, #16]
   156e0:	685a      	ldr	r2, [r3, #4]
   156e2:	697b      	ldr	r3, [r7, #20]
   156e4:	429a      	cmp	r2, r3
   156e6:	d8e6      	bhi.n	156b6 <mp_obj_tuple_print+0x22>
    }
    if (MICROPY_PY_UJSON && kind == PRINT_JSON) {
        mp_print_str(print, "]");
    } else {
        if (o->len == 1) {
   156e8:	693b      	ldr	r3, [r7, #16]
   156ea:	685b      	ldr	r3, [r3, #4]
   156ec:	2b01      	cmp	r3, #1
   156ee:	d103      	bne.n	156f8 <mp_obj_tuple_print+0x64>
            mp_print_str(print, ",");
   156f0:	4907      	ldr	r1, [pc, #28]	; (15710 <mp_obj_tuple_print+0x7c>)
   156f2:	68f8      	ldr	r0, [r7, #12]
   156f4:	f7ec f8ac 	bl	1850 <mp_print_str>
        }
        mp_print_str(print, ")");
   156f8:	4906      	ldr	r1, [pc, #24]	; (15714 <mp_obj_tuple_print+0x80>)
   156fa:	68f8      	ldr	r0, [r7, #12]
   156fc:	f7ec f8a8 	bl	1850 <mp_print_str>
    }
}
   15700:	bf00      	nop
   15702:	3718      	adds	r7, #24
   15704:	46bd      	mov	sp, r7
   15706:	bd80      	pop	{r7, pc}
   15708:	00021a9c 	.word	0x00021a9c
   1570c:	00021aa0 	.word	0x00021aa0
   15710:	00021aa4 	.word	0x00021aa4
   15714:	00021aa8 	.word	0x00021aa8

00015718 <mp_obj_tuple_make_new>:

STATIC mp_obj_t mp_obj_tuple_make_new(const mp_obj_type_t *type_in, size_t n_args, size_t n_kw, const mp_obj_t *args) {
   15718:	b580      	push	{r7, lr}
   1571a:	b08c      	sub	sp, #48	; 0x30
   1571c:	af02      	add	r7, sp, #8
   1571e:	60f8      	str	r0, [r7, #12]
   15720:	60b9      	str	r1, [r7, #8]
   15722:	607a      	str	r2, [r7, #4]
   15724:	603b      	str	r3, [r7, #0]
    (void)type_in;

    mp_arg_check_num(n_args, n_kw, 0, 1, false);
   15726:	2300      	movs	r3, #0
   15728:	9300      	str	r3, [sp, #0]
   1572a:	2301      	movs	r3, #1
   1572c:	2200      	movs	r2, #0
   1572e:	6879      	ldr	r1, [r7, #4]
   15730:	68b8      	ldr	r0, [r7, #8]
   15732:	f7f7 fc1d 	bl	cf70 <mp_arg_check_num>

    switch (n_args) {
   15736:	68bb      	ldr	r3, [r7, #8]
   15738:	2b00      	cmp	r3, #0
   1573a:	d101      	bne.n	15740 <mp_obj_tuple_make_new+0x28>
        case 0:
            // return a empty tuple
            return mp_const_empty_tuple;
   1573c:	4b27      	ldr	r3, [pc, #156]	; (157dc <mp_obj_tuple_make_new+0xc4>)
   1573e:	e048      	b.n	157d2 <mp_obj_tuple_make_new+0xba>

        case 1:
        default: {
            // 1 argument, an iterable from which we make a new tuple
            if (MP_OBJ_IS_TYPE(args[0], &mp_type_tuple)) {
   15740:	683b      	ldr	r3, [r7, #0]
   15742:	681b      	ldr	r3, [r3, #0]
   15744:	4618      	mov	r0, r3
   15746:	f7ff ff7f 	bl	15648 <MP_OBJ_IS_OBJ>
   1574a:	4603      	mov	r3, r0
   1574c:	2b00      	cmp	r3, #0
   1574e:	d008      	beq.n	15762 <mp_obj_tuple_make_new+0x4a>
   15750:	683b      	ldr	r3, [r7, #0]
   15752:	681b      	ldr	r3, [r3, #0]
   15754:	681b      	ldr	r3, [r3, #0]
   15756:	4a22      	ldr	r2, [pc, #136]	; (157e0 <mp_obj_tuple_make_new+0xc8>)
   15758:	4293      	cmp	r3, r2
   1575a:	d102      	bne.n	15762 <mp_obj_tuple_make_new+0x4a>
                return args[0];
   1575c:	683b      	ldr	r3, [r7, #0]
   1575e:	681b      	ldr	r3, [r3, #0]
   15760:	e037      	b.n	157d2 <mp_obj_tuple_make_new+0xba>
            }

            // TODO optimise for cases where we know the length of the iterator

            size_t alloc = 4;
   15762:	2304      	movs	r3, #4
   15764:	627b      	str	r3, [r7, #36]	; 0x24
            size_t len = 0;
   15766:	2300      	movs	r3, #0
   15768:	623b      	str	r3, [r7, #32]
            mp_obj_t *items = m_new(mp_obj_t, alloc);
   1576a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1576c:	009b      	lsls	r3, r3, #2
   1576e:	4618      	mov	r0, r3
   15770:	f7ea fdd4 	bl	31c <m_malloc>
   15774:	61f8      	str	r0, [r7, #28]

            mp_obj_t iterable = mp_getiter(args[0], NULL);
   15776:	683b      	ldr	r3, [r7, #0]
   15778:	681b      	ldr	r3, [r3, #0]
   1577a:	2100      	movs	r1, #0
   1577c:	4618      	mov	r0, r3
   1577e:	f7f7 f883 	bl	c888 <mp_getiter>
   15782:	61b8      	str	r0, [r7, #24]
            mp_obj_t item;
            while ((item = mp_iternext(iterable)) != MP_OBJ_STOP_ITERATION) {
   15784:	e015      	b.n	157b2 <mp_obj_tuple_make_new+0x9a>
                if (len >= alloc) {
   15786:	6a3a      	ldr	r2, [r7, #32]
   15788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1578a:	429a      	cmp	r2, r3
   1578c:	d309      	bcc.n	157a2 <mp_obj_tuple_make_new+0x8a>
                    items = m_renew(mp_obj_t, items, alloc, alloc * 2);
   1578e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   15790:	00db      	lsls	r3, r3, #3
   15792:	4619      	mov	r1, r3
   15794:	69f8      	ldr	r0, [r7, #28]
   15796:	f7ea fdf3 	bl	380 <m_realloc>
   1579a:	61f8      	str	r0, [r7, #28]
                    alloc *= 2;
   1579c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1579e:	005b      	lsls	r3, r3, #1
   157a0:	627b      	str	r3, [r7, #36]	; 0x24
                }
                items[len++] = item;
   157a2:	6a3b      	ldr	r3, [r7, #32]
   157a4:	1c5a      	adds	r2, r3, #1
   157a6:	623a      	str	r2, [r7, #32]
   157a8:	009b      	lsls	r3, r3, #2
   157aa:	69fa      	ldr	r2, [r7, #28]
   157ac:	4413      	add	r3, r2
   157ae:	697a      	ldr	r2, [r7, #20]
   157b0:	601a      	str	r2, [r3, #0]
            while ((item = mp_iternext(iterable)) != MP_OBJ_STOP_ITERATION) {
   157b2:	69b8      	ldr	r0, [r7, #24]
   157b4:	f7f7 f8ea 	bl	c98c <mp_iternext>
   157b8:	6178      	str	r0, [r7, #20]
   157ba:	697b      	ldr	r3, [r7, #20]
   157bc:	2b04      	cmp	r3, #4
   157be:	d1e2      	bne.n	15786 <mp_obj_tuple_make_new+0x6e>
            }

            mp_obj_t tuple = mp_obj_new_tuple(len, items);
   157c0:	69f9      	ldr	r1, [r7, #28]
   157c2:	6a38      	ldr	r0, [r7, #32]
   157c4:	f000 f9ec 	bl	15ba0 <mp_obj_new_tuple>
   157c8:	6138      	str	r0, [r7, #16]
            m_del(mp_obj_t, items, alloc);
   157ca:	69f8      	ldr	r0, [r7, #28]
   157cc:	f7ea fe04 	bl	3d8 <m_free>

            return tuple;
   157d0:	693b      	ldr	r3, [r7, #16]
        }
    }
}
   157d2:	4618      	mov	r0, r3
   157d4:	3728      	adds	r7, #40	; 0x28
   157d6:	46bd      	mov	sp, r7
   157d8:	bd80      	pop	{r7, pc}
   157da:	bf00      	nop
   157dc:	00021c24 	.word	0x00021c24
   157e0:	00021be8 	.word	0x00021be8

000157e4 <tuple_cmp_helper>:

// Don't pass MP_BINARY_OP_NOT_EQUAL here
STATIC mp_obj_t tuple_cmp_helper(mp_uint_t op, mp_obj_t self_in, mp_obj_t another_in) {
   157e4:	b580      	push	{r7, lr}
   157e6:	b08a      	sub	sp, #40	; 0x28
   157e8:	af02      	add	r7, sp, #8
   157ea:	60f8      	str	r0, [r7, #12]
   157ec:	60b9      	str	r1, [r7, #8]
   157ee:	607a      	str	r2, [r7, #4]
    // type check is done on getiter method to allow tuple, namedtuple, attrtuple
    mp_check_self(mp_obj_get_type(self_in)->getiter == mp_obj_tuple_getiter);
   157f0:	68b8      	ldr	r0, [r7, #8]
   157f2:	f7f7 ffad 	bl	d750 <mp_obj_get_type>
   157f6:	4603      	mov	r3, r0
   157f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   157fa:	4a1e      	ldr	r2, [pc, #120]	; (15874 <tuple_cmp_helper+0x90>)
   157fc:	4293      	cmp	r3, r2
   157fe:	d005      	beq.n	1580c <tuple_cmp_helper+0x28>
   15800:	4b1d      	ldr	r3, [pc, #116]	; (15878 <tuple_cmp_helper+0x94>)
   15802:	4a1e      	ldr	r2, [pc, #120]	; (1587c <tuple_cmp_helper+0x98>)
   15804:	2168      	movs	r1, #104	; 0x68
   15806:	481e      	ldr	r0, [pc, #120]	; (15880 <tuple_cmp_helper+0x9c>)
   15808:	f005 fcd8 	bl	1b1bc <__assert_func>
    mp_obj_type_t *another_type = mp_obj_get_type(another_in);
   1580c:	6878      	ldr	r0, [r7, #4]
   1580e:	f7f7 ff9f 	bl	d750 <mp_obj_get_type>
   15812:	61f8      	str	r0, [r7, #28]
    mp_obj_tuple_t *self = MP_OBJ_TO_PTR(self_in);
   15814:	68bb      	ldr	r3, [r7, #8]
   15816:	61bb      	str	r3, [r7, #24]
    if (another_type->getiter != mp_obj_tuple_getiter) {
   15818:	69fb      	ldr	r3, [r7, #28]
   1581a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1581c:	4a15      	ldr	r2, [pc, #84]	; (15874 <tuple_cmp_helper+0x90>)
   1581e:	4293      	cmp	r3, r2
   15820:	d00e      	beq.n	15840 <tuple_cmp_helper+0x5c>
        // Slow path for user subclasses
        another_in = mp_instance_cast_to_native_base(another_in, MP_OBJ_FROM_PTR(&mp_type_tuple));
   15822:	4918      	ldr	r1, [pc, #96]	; (15884 <tuple_cmp_helper+0xa0>)
   15824:	6878      	ldr	r0, [r7, #4]
   15826:	f001 fd09 	bl	1723c <mp_instance_cast_to_native_base>
   1582a:	6078      	str	r0, [r7, #4]
        if (another_in == MP_OBJ_NULL) {
   1582c:	687b      	ldr	r3, [r7, #4]
   1582e:	2b00      	cmp	r3, #0
   15830:	d106      	bne.n	15840 <tuple_cmp_helper+0x5c>
            if (op == MP_BINARY_OP_EQUAL) {
   15832:	68fb      	ldr	r3, [r7, #12]
   15834:	2b02      	cmp	r3, #2
   15836:	d101      	bne.n	1583c <tuple_cmp_helper+0x58>
                return mp_const_false;
   15838:	4b13      	ldr	r3, [pc, #76]	; (15888 <tuple_cmp_helper+0xa4>)
   1583a:	e017      	b.n	1586c <tuple_cmp_helper+0x88>
            }
            return MP_OBJ_NULL;
   1583c:	2300      	movs	r3, #0
   1583e:	e015      	b.n	1586c <tuple_cmp_helper+0x88>
        }
    }
    mp_obj_tuple_t *another = MP_OBJ_TO_PTR(another_in);
   15840:	687b      	ldr	r3, [r7, #4]
   15842:	617b      	str	r3, [r7, #20]

    return mp_obj_new_bool(mp_seq_cmp_objs(op, self->items, self->len, another->items, another->len));
   15844:	69bb      	ldr	r3, [r7, #24]
   15846:	f103 0108 	add.w	r1, r3, #8
   1584a:	69bb      	ldr	r3, [r7, #24]
   1584c:	685a      	ldr	r2, [r3, #4]
   1584e:	697b      	ldr	r3, [r7, #20]
   15850:	f103 0008 	add.w	r0, r3, #8
   15854:	697b      	ldr	r3, [r7, #20]
   15856:	685b      	ldr	r3, [r3, #4]
   15858:	9300      	str	r3, [sp, #0]
   1585a:	4603      	mov	r3, r0
   1585c:	68f8      	ldr	r0, [r7, #12]
   1585e:	f001 fef6 	bl	1764e <mp_seq_cmp_objs>
   15862:	4603      	mov	r3, r0
   15864:	4618      	mov	r0, r3
   15866:	f7ff ff01 	bl	1566c <mp_obj_new_bool>
   1586a:	4603      	mov	r3, r0
}
   1586c:	4618      	mov	r0, r3
   1586e:	3720      	adds	r7, #32
   15870:	46bd      	mov	sp, r7
   15872:	bd80      	pop	{r7, pc}
   15874:	00015d03 	.word	0x00015d03
   15878:	00021aac 	.word	0x00021aac
   1587c:	00021c54 	.word	0x00021c54
   15880:	00021ae8 	.word	0x00021ae8
   15884:	00021be8 	.word	0x00021be8
   15888:	0001f9bc 	.word	0x0001f9bc

0001588c <mp_obj_tuple_unary_op>:

mp_obj_t mp_obj_tuple_unary_op(mp_unary_op_t op, mp_obj_t self_in) {
   1588c:	b580      	push	{r7, lr}
   1588e:	b086      	sub	sp, #24
   15890:	af00      	add	r7, sp, #0
   15892:	6078      	str	r0, [r7, #4]
   15894:	6039      	str	r1, [r7, #0]
    mp_obj_tuple_t *self = MP_OBJ_TO_PTR(self_in);
   15896:	683b      	ldr	r3, [r7, #0]
   15898:	60fb      	str	r3, [r7, #12]
    switch (op) {
   1589a:	687b      	ldr	r3, [r7, #4]
   1589c:	2b05      	cmp	r3, #5
   1589e:	d02f      	beq.n	15900 <mp_obj_tuple_unary_op+0x74>
   158a0:	2b06      	cmp	r3, #6
   158a2:	d00d      	beq.n	158c0 <mp_obj_tuple_unary_op+0x34>
   158a4:	2b04      	cmp	r3, #4
   158a6:	d131      	bne.n	1590c <mp_obj_tuple_unary_op+0x80>
        case MP_UNARY_OP_BOOL: return mp_obj_new_bool(self->len != 0);
   158a8:	68fb      	ldr	r3, [r7, #12]
   158aa:	685b      	ldr	r3, [r3, #4]
   158ac:	2b00      	cmp	r3, #0
   158ae:	bf14      	ite	ne
   158b0:	2301      	movne	r3, #1
   158b2:	2300      	moveq	r3, #0
   158b4:	b2db      	uxtb	r3, r3
   158b6:	4618      	mov	r0, r3
   158b8:	f7ff fed8 	bl	1566c <mp_obj_new_bool>
   158bc:	4603      	mov	r3, r0
   158be:	e026      	b.n	1590e <mp_obj_tuple_unary_op+0x82>
        case MP_UNARY_OP_HASH: {
            // start hash with pointer to empty tuple, to make it fairly unique
            mp_int_t hash = (mp_int_t)mp_const_empty_tuple;
   158c0:	4b15      	ldr	r3, [pc, #84]	; (15918 <mp_obj_tuple_unary_op+0x8c>)
   158c2:	617b      	str	r3, [r7, #20]
            for (size_t i = 0; i < self->len; i++) {
   158c4:	2300      	movs	r3, #0
   158c6:	613b      	str	r3, [r7, #16]
   158c8:	e010      	b.n	158ec <mp_obj_tuple_unary_op+0x60>
                hash += MP_OBJ_SMALL_INT_VALUE(mp_unary_op(MP_UNARY_OP_HASH, self->items[i]));
   158ca:	68fb      	ldr	r3, [r7, #12]
   158cc:	693a      	ldr	r2, [r7, #16]
   158ce:	3202      	adds	r2, #2
   158d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   158d4:	4619      	mov	r1, r3
   158d6:	2006      	movs	r0, #6
   158d8:	f7f5 feec 	bl	b6b4 <mp_unary_op>
   158dc:	4603      	mov	r3, r0
   158de:	105b      	asrs	r3, r3, #1
   158e0:	697a      	ldr	r2, [r7, #20]
   158e2:	4413      	add	r3, r2
   158e4:	617b      	str	r3, [r7, #20]
            for (size_t i = 0; i < self->len; i++) {
   158e6:	693b      	ldr	r3, [r7, #16]
   158e8:	3301      	adds	r3, #1
   158ea:	613b      	str	r3, [r7, #16]
   158ec:	68fb      	ldr	r3, [r7, #12]
   158ee:	685a      	ldr	r2, [r3, #4]
   158f0:	693b      	ldr	r3, [r7, #16]
   158f2:	429a      	cmp	r2, r3
   158f4:	d8e9      	bhi.n	158ca <mp_obj_tuple_unary_op+0x3e>
            }
            return MP_OBJ_NEW_SMALL_INT(hash);
   158f6:	697b      	ldr	r3, [r7, #20]
   158f8:	005b      	lsls	r3, r3, #1
   158fa:	f043 0301 	orr.w	r3, r3, #1
   158fe:	e006      	b.n	1590e <mp_obj_tuple_unary_op+0x82>
        }
        case MP_UNARY_OP_LEN: return MP_OBJ_NEW_SMALL_INT(self->len);
   15900:	68fb      	ldr	r3, [r7, #12]
   15902:	685b      	ldr	r3, [r3, #4]
   15904:	005b      	lsls	r3, r3, #1
   15906:	f043 0301 	orr.w	r3, r3, #1
   1590a:	e000      	b.n	1590e <mp_obj_tuple_unary_op+0x82>
        default: return MP_OBJ_NULL; // op not supported
   1590c:	2300      	movs	r3, #0
    }
}
   1590e:	4618      	mov	r0, r3
   15910:	3718      	adds	r7, #24
   15912:	46bd      	mov	sp, r7
   15914:	bd80      	pop	{r7, pc}
   15916:	bf00      	nop
   15918:	00021c24 	.word	0x00021c24

0001591c <mp_obj_tuple_binary_op>:

mp_obj_t mp_obj_tuple_binary_op(mp_binary_op_t op, mp_obj_t lhs, mp_obj_t rhs) {
   1591c:	b580      	push	{r7, lr}
   1591e:	b08c      	sub	sp, #48	; 0x30
   15920:	af02      	add	r7, sp, #8
   15922:	60f8      	str	r0, [r7, #12]
   15924:	60b9      	str	r1, [r7, #8]
   15926:	607a      	str	r2, [r7, #4]
    mp_obj_tuple_t *o = MP_OBJ_TO_PTR(lhs);
   15928:	68bb      	ldr	r3, [r7, #8]
   1592a:	627b      	str	r3, [r7, #36]	; 0x24
    switch (op) {
   1592c:	68fb      	ldr	r3, [r7, #12]
   1592e:	2b1c      	cmp	r3, #28
   15930:	f200 80ac 	bhi.w	15a8c <mp_obj_tuple_binary_op+0x170>
   15934:	a201      	add	r2, pc, #4	; (adr r2, 1593c <mp_obj_tuple_binary_op+0x20>)
   15936:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1593a:	bf00      	nop
   1593c:	00015a7f 	.word	0x00015a7f
   15940:	00015a7f 	.word	0x00015a7f
   15944:	00015a7f 	.word	0x00015a7f
   15948:	00015a7f 	.word	0x00015a7f
   1594c:	00015a7f 	.word	0x00015a7f
   15950:	00015a8d 	.word	0x00015a8d
   15954:	00015a8d 	.word	0x00015a8d
   15958:	00015a8d 	.word	0x00015a8d
   1595c:	00015a8d 	.word	0x00015a8d
   15960:	00015a8d 	.word	0x00015a8d
   15964:	00015a8d 	.word	0x00015a8d
   15968:	00015a8d 	.word	0x00015a8d
   1596c:	00015a8d 	.word	0x00015a8d
   15970:	00015a8d 	.word	0x00015a8d
   15974:	000159b1 	.word	0x000159b1
   15978:	00015a8d 	.word	0x00015a8d
   1597c:	00015a25 	.word	0x00015a25
   15980:	00015a8d 	.word	0x00015a8d
   15984:	00015a8d 	.word	0x00015a8d
   15988:	00015a8d 	.word	0x00015a8d
   1598c:	00015a8d 	.word	0x00015a8d
   15990:	00015a8d 	.word	0x00015a8d
   15994:	00015a8d 	.word	0x00015a8d
   15998:	00015a8d 	.word	0x00015a8d
   1599c:	00015a8d 	.word	0x00015a8d
   159a0:	00015a8d 	.word	0x00015a8d
   159a4:	000159b1 	.word	0x000159b1
   159a8:	00015a8d 	.word	0x00015a8d
   159ac:	00015a25 	.word	0x00015a25
        case MP_BINARY_OP_ADD:
        case MP_BINARY_OP_INPLACE_ADD: {
            if (!mp_obj_is_subclass_fast(MP_OBJ_FROM_PTR(mp_obj_get_type(rhs)), MP_OBJ_FROM_PTR(&mp_type_tuple))) {
   159b0:	6878      	ldr	r0, [r7, #4]
   159b2:	f7f7 fecd 	bl	d750 <mp_obj_get_type>
   159b6:	4603      	mov	r3, r0
   159b8:	4937      	ldr	r1, [pc, #220]	; (15a98 <mp_obj_tuple_binary_op+0x17c>)
   159ba:	4618      	mov	r0, r3
   159bc:	f001 fb4c 	bl	17058 <mp_obj_is_subclass_fast>
   159c0:	4603      	mov	r3, r0
   159c2:	f083 0301 	eor.w	r3, r3, #1
   159c6:	b2db      	uxtb	r3, r3
   159c8:	2b00      	cmp	r3, #0
   159ca:	d001      	beq.n	159d0 <mp_obj_tuple_binary_op+0xb4>
                return MP_OBJ_NULL; // op not supported
   159cc:	2300      	movs	r3, #0
   159ce:	e05e      	b.n	15a8e <mp_obj_tuple_binary_op+0x172>
            }
            mp_obj_tuple_t *p = MP_OBJ_TO_PTR(rhs);
   159d0:	687b      	ldr	r3, [r7, #4]
   159d2:	623b      	str	r3, [r7, #32]
            mp_obj_tuple_t *s = MP_OBJ_TO_PTR(mp_obj_new_tuple(o->len + p->len, NULL));
   159d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   159d6:	685a      	ldr	r2, [r3, #4]
   159d8:	6a3b      	ldr	r3, [r7, #32]
   159da:	685b      	ldr	r3, [r3, #4]
   159dc:	4413      	add	r3, r2
   159de:	2100      	movs	r1, #0
   159e0:	4618      	mov	r0, r3
   159e2:	f000 f8dd 	bl	15ba0 <mp_obj_new_tuple>
   159e6:	61f8      	str	r0, [r7, #28]
            mp_seq_cat(s->items, o->items, o->len, p->items, p->len, mp_obj_t);
   159e8:	69fb      	ldr	r3, [r7, #28]
   159ea:	f103 0008 	add.w	r0, r3, #8
   159ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   159f0:	f103 0108 	add.w	r1, r3, #8
   159f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   159f6:	685b      	ldr	r3, [r3, #4]
   159f8:	009b      	lsls	r3, r3, #2
   159fa:	461a      	mov	r2, r3
   159fc:	f005 ffe2 	bl	1b9c4 <memcpy>
   15a00:	69fb      	ldr	r3, [r7, #28]
   15a02:	f103 0208 	add.w	r2, r3, #8
   15a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   15a08:	685b      	ldr	r3, [r3, #4]
   15a0a:	009b      	lsls	r3, r3, #2
   15a0c:	18d0      	adds	r0, r2, r3
   15a0e:	6a3b      	ldr	r3, [r7, #32]
   15a10:	f103 0108 	add.w	r1, r3, #8
   15a14:	6a3b      	ldr	r3, [r7, #32]
   15a16:	685b      	ldr	r3, [r3, #4]
   15a18:	009b      	lsls	r3, r3, #2
   15a1a:	461a      	mov	r2, r3
   15a1c:	f005 ffd2 	bl	1b9c4 <memcpy>
            return MP_OBJ_FROM_PTR(s);
   15a20:	69fb      	ldr	r3, [r7, #28]
   15a22:	e034      	b.n	15a8e <mp_obj_tuple_binary_op+0x172>
        }
        case MP_BINARY_OP_MULTIPLY:
        case MP_BINARY_OP_INPLACE_MULTIPLY: {
            mp_int_t n;
            if (!mp_obj_get_int_maybe(rhs, &n)) {
   15a24:	f107 0314 	add.w	r3, r7, #20
   15a28:	4619      	mov	r1, r3
   15a2a:	6878      	ldr	r0, [r7, #4]
   15a2c:	f7f8 f8c8 	bl	dbc0 <mp_obj_get_int_maybe>
   15a30:	4603      	mov	r3, r0
   15a32:	f083 0301 	eor.w	r3, r3, #1
   15a36:	b2db      	uxtb	r3, r3
   15a38:	2b00      	cmp	r3, #0
   15a3a:	d001      	beq.n	15a40 <mp_obj_tuple_binary_op+0x124>
                return MP_OBJ_NULL; // op not supported
   15a3c:	2300      	movs	r3, #0
   15a3e:	e026      	b.n	15a8e <mp_obj_tuple_binary_op+0x172>
            }
            if (n <= 0) {
   15a40:	697b      	ldr	r3, [r7, #20]
   15a42:	2b00      	cmp	r3, #0
   15a44:	dc01      	bgt.n	15a4a <mp_obj_tuple_binary_op+0x12e>
                return mp_const_empty_tuple;
   15a46:	4b15      	ldr	r3, [pc, #84]	; (15a9c <mp_obj_tuple_binary_op+0x180>)
   15a48:	e021      	b.n	15a8e <mp_obj_tuple_binary_op+0x172>
            }
            mp_obj_tuple_t *s = MP_OBJ_TO_PTR(mp_obj_new_tuple(o->len * n, NULL));
   15a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   15a4c:	685b      	ldr	r3, [r3, #4]
   15a4e:	697a      	ldr	r2, [r7, #20]
   15a50:	fb02 f303 	mul.w	r3, r2, r3
   15a54:	2100      	movs	r1, #0
   15a56:	4618      	mov	r0, r3
   15a58:	f000 f8a2 	bl	15ba0 <mp_obj_new_tuple>
   15a5c:	61b8      	str	r0, [r7, #24]
            mp_seq_multiply(o->items, sizeof(*o->items), o->len, n, s->items);
   15a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   15a60:	f103 0008 	add.w	r0, r3, #8
   15a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   15a66:	685a      	ldr	r2, [r3, #4]
   15a68:	697b      	ldr	r3, [r7, #20]
   15a6a:	4619      	mov	r1, r3
   15a6c:	69bb      	ldr	r3, [r7, #24]
   15a6e:	3308      	adds	r3, #8
   15a70:	9300      	str	r3, [sp, #0]
   15a72:	460b      	mov	r3, r1
   15a74:	2104      	movs	r1, #4
   15a76:	f001 fd29 	bl	174cc <mp_seq_multiply>
            return MP_OBJ_FROM_PTR(s);
   15a7a:	69bb      	ldr	r3, [r7, #24]
   15a7c:	e007      	b.n	15a8e <mp_obj_tuple_binary_op+0x172>
        case MP_BINARY_OP_EQUAL:
        case MP_BINARY_OP_LESS:
        case MP_BINARY_OP_LESS_EQUAL:
        case MP_BINARY_OP_MORE:
        case MP_BINARY_OP_MORE_EQUAL:
            return tuple_cmp_helper(op, lhs, rhs);
   15a7e:	687a      	ldr	r2, [r7, #4]
   15a80:	68b9      	ldr	r1, [r7, #8]
   15a82:	68f8      	ldr	r0, [r7, #12]
   15a84:	f7ff feae 	bl	157e4 <tuple_cmp_helper>
   15a88:	4603      	mov	r3, r0
   15a8a:	e000      	b.n	15a8e <mp_obj_tuple_binary_op+0x172>

        default:
            return MP_OBJ_NULL; // op not supported
   15a8c:	2300      	movs	r3, #0
    }
}
   15a8e:	4618      	mov	r0, r3
   15a90:	3728      	adds	r7, #40	; 0x28
   15a92:	46bd      	mov	sp, r7
   15a94:	bd80      	pop	{r7, pc}
   15a96:	bf00      	nop
   15a98:	00021be8 	.word	0x00021be8
   15a9c:	00021c24 	.word	0x00021c24

00015aa0 <mp_obj_tuple_subscr>:

mp_obj_t mp_obj_tuple_subscr(mp_obj_t self_in, mp_obj_t index, mp_obj_t value) {
   15aa0:	b580      	push	{r7, lr}
   15aa2:	b086      	sub	sp, #24
   15aa4:	af00      	add	r7, sp, #0
   15aa6:	60f8      	str	r0, [r7, #12]
   15aa8:	60b9      	str	r1, [r7, #8]
   15aaa:	607a      	str	r2, [r7, #4]
    if (value == MP_OBJ_SENTINEL) {
   15aac:	687b      	ldr	r3, [r7, #4]
   15aae:	2b08      	cmp	r3, #8
   15ab0:	d110      	bne.n	15ad4 <mp_obj_tuple_subscr+0x34>
        // load
        mp_obj_tuple_t *self = MP_OBJ_TO_PTR(self_in);
   15ab2:	68fb      	ldr	r3, [r7, #12]
   15ab4:	617b      	str	r3, [r7, #20]
            mp_obj_tuple_t *res = MP_OBJ_TO_PTR(mp_obj_new_tuple(slice.stop - slice.start, NULL));
            mp_seq_copy(res->items, self->items + slice.start, res->len, mp_obj_t);
            return MP_OBJ_FROM_PTR(res);
        }
#endif
        size_t index_value = mp_get_index(self->base.type, self->len, index, false);
   15ab6:	697b      	ldr	r3, [r7, #20]
   15ab8:	6818      	ldr	r0, [r3, #0]
   15aba:	697b      	ldr	r3, [r7, #20]
   15abc:	6859      	ldr	r1, [r3, #4]
   15abe:	2300      	movs	r3, #0
   15ac0:	68ba      	ldr	r2, [r7, #8]
   15ac2:	f7f8 f90d 	bl	dce0 <mp_get_index>
   15ac6:	6138      	str	r0, [r7, #16]
        return self->items[index_value];
   15ac8:	697b      	ldr	r3, [r7, #20]
   15aca:	693a      	ldr	r2, [r7, #16]
   15acc:	3202      	adds	r2, #2
   15ace:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   15ad2:	e000      	b.n	15ad6 <mp_obj_tuple_subscr+0x36>
    } else {
        return MP_OBJ_NULL; // op not supported
   15ad4:	2300      	movs	r3, #0
    }
}
   15ad6:	4618      	mov	r0, r3
   15ad8:	3718      	adds	r7, #24
   15ada:	46bd      	mov	sp, r7
   15adc:	bd80      	pop	{r7, pc}

00015ade <tuple_count>:

STATIC mp_obj_t tuple_count(mp_obj_t self_in, mp_obj_t value) {
   15ade:	b580      	push	{r7, lr}
   15ae0:	b084      	sub	sp, #16
   15ae2:	af00      	add	r7, sp, #0
   15ae4:	6078      	str	r0, [r7, #4]
   15ae6:	6039      	str	r1, [r7, #0]
    mp_check_self(MP_OBJ_IS_TYPE(self_in, &mp_type_tuple));
   15ae8:	6878      	ldr	r0, [r7, #4]
   15aea:	f7ff fdad 	bl	15648 <MP_OBJ_IS_OBJ>
   15aee:	4603      	mov	r3, r0
   15af0:	2b00      	cmp	r3, #0
   15af2:	d004      	beq.n	15afe <tuple_count+0x20>
   15af4:	687b      	ldr	r3, [r7, #4]
   15af6:	681b      	ldr	r3, [r3, #0]
   15af8:	4a0c      	ldr	r2, [pc, #48]	; (15b2c <tuple_count+0x4e>)
   15afa:	4293      	cmp	r3, r2
   15afc:	d005      	beq.n	15b0a <tuple_count+0x2c>
   15afe:	4b0c      	ldr	r3, [pc, #48]	; (15b30 <tuple_count+0x52>)
   15b00:	4a0c      	ldr	r2, [pc, #48]	; (15b34 <tuple_count+0x56>)
   15b02:	21c8      	movs	r1, #200	; 0xc8
   15b04:	480c      	ldr	r0, [pc, #48]	; (15b38 <tuple_count+0x5a>)
   15b06:	f005 fb59 	bl	1b1bc <__assert_func>
    mp_obj_tuple_t *self = MP_OBJ_TO_PTR(self_in);
   15b0a:	687b      	ldr	r3, [r7, #4]
   15b0c:	60fb      	str	r3, [r7, #12]
    return mp_seq_count_obj(self->items, self->len, value);
   15b0e:	68fb      	ldr	r3, [r7, #12]
   15b10:	f103 0008 	add.w	r0, r3, #8
   15b14:	68fb      	ldr	r3, [r7, #12]
   15b16:	685b      	ldr	r3, [r3, #4]
   15b18:	683a      	ldr	r2, [r7, #0]
   15b1a:	4619      	mov	r1, r3
   15b1c:	f001 fe64 	bl	177e8 <mp_seq_count_obj>
   15b20:	4603      	mov	r3, r0
}
   15b22:	4618      	mov	r0, r3
   15b24:	3710      	adds	r7, #16
   15b26:	46bd      	mov	sp, r7
   15b28:	bd80      	pop	{r7, pc}
   15b2a:	bf00      	nop
   15b2c:	00021be8 	.word	0x00021be8
   15b30:	00021afc 	.word	0x00021afc
   15b34:	00021c68 	.word	0x00021c68
   15b38:	00021ae8 	.word	0x00021ae8

00015b3c <tuple_index>:
STATIC MP_DEFINE_CONST_FUN_OBJ_2(tuple_count_obj, tuple_count);

STATIC mp_obj_t tuple_index(size_t n_args, const mp_obj_t *args) {
   15b3c:	b580      	push	{r7, lr}
   15b3e:	b084      	sub	sp, #16
   15b40:	af00      	add	r7, sp, #0
   15b42:	6078      	str	r0, [r7, #4]
   15b44:	6039      	str	r1, [r7, #0]
    mp_check_self(MP_OBJ_IS_TYPE(args[0], &mp_type_tuple));
   15b46:	683b      	ldr	r3, [r7, #0]
   15b48:	681b      	ldr	r3, [r3, #0]
   15b4a:	4618      	mov	r0, r3
   15b4c:	f7ff fd7c 	bl	15648 <MP_OBJ_IS_OBJ>
   15b50:	4603      	mov	r3, r0
   15b52:	2b00      	cmp	r3, #0
   15b54:	d005      	beq.n	15b62 <tuple_index+0x26>
   15b56:	683b      	ldr	r3, [r7, #0]
   15b58:	681b      	ldr	r3, [r3, #0]
   15b5a:	681b      	ldr	r3, [r3, #0]
   15b5c:	4a0c      	ldr	r2, [pc, #48]	; (15b90 <tuple_index+0x54>)
   15b5e:	4293      	cmp	r3, r2
   15b60:	d005      	beq.n	15b6e <tuple_index+0x32>
   15b62:	4b0c      	ldr	r3, [pc, #48]	; (15b94 <tuple_index+0x58>)
   15b64:	4a0c      	ldr	r2, [pc, #48]	; (15b98 <tuple_index+0x5c>)
   15b66:	21cf      	movs	r1, #207	; 0xcf
   15b68:	480c      	ldr	r0, [pc, #48]	; (15b9c <tuple_index+0x60>)
   15b6a:	f005 fb27 	bl	1b1bc <__assert_func>
    mp_obj_tuple_t *self = MP_OBJ_TO_PTR(args[0]);
   15b6e:	683b      	ldr	r3, [r7, #0]
   15b70:	681b      	ldr	r3, [r3, #0]
   15b72:	60fb      	str	r3, [r7, #12]
    return mp_seq_index_obj(self->items, self->len, n_args, args);
   15b74:	68fb      	ldr	r3, [r7, #12]
   15b76:	f103 0008 	add.w	r0, r3, #8
   15b7a:	68fb      	ldr	r3, [r7, #12]
   15b7c:	6859      	ldr	r1, [r3, #4]
   15b7e:	683b      	ldr	r3, [r7, #0]
   15b80:	687a      	ldr	r2, [r7, #4]
   15b82:	f001 fde1 	bl	17748 <mp_seq_index_obj>
   15b86:	4603      	mov	r3, r0
}
   15b88:	4618      	mov	r0, r3
   15b8a:	3710      	adds	r7, #16
   15b8c:	46bd      	mov	sp, r7
   15b8e:	bd80      	pop	{r7, pc}
   15b90:	00021be8 	.word	0x00021be8
   15b94:	00021b60 	.word	0x00021b60
   15b98:	00021c74 	.word	0x00021c74
   15b9c:	00021ae8 	.word	0x00021ae8

00015ba0 <mp_obj_new_tuple>:
};

// the zero-length tuple
const mp_obj_tuple_t mp_const_empty_tuple_obj = {{&mp_type_tuple}, 0};

mp_obj_t mp_obj_new_tuple(size_t n, const mp_obj_t *items) {
   15ba0:	b580      	push	{r7, lr}
   15ba2:	b084      	sub	sp, #16
   15ba4:	af00      	add	r7, sp, #0
   15ba6:	6078      	str	r0, [r7, #4]
   15ba8:	6039      	str	r1, [r7, #0]
    if (n == 0) {
   15baa:	687b      	ldr	r3, [r7, #4]
   15bac:	2b00      	cmp	r3, #0
   15bae:	d101      	bne.n	15bb4 <mp_obj_new_tuple+0x14>
        return mp_const_empty_tuple;
   15bb0:	4b15      	ldr	r3, [pc, #84]	; (15c08 <mp_obj_new_tuple+0x68>)
   15bb2:	e024      	b.n	15bfe <mp_obj_new_tuple+0x5e>
    }
    mp_obj_tuple_t *o = m_new_obj_var(mp_obj_tuple_t, mp_obj_t, n);
   15bb4:	687b      	ldr	r3, [r7, #4]
   15bb6:	3302      	adds	r3, #2
   15bb8:	009b      	lsls	r3, r3, #2
   15bba:	4618      	mov	r0, r3
   15bbc:	f7ea fbae 	bl	31c <m_malloc>
   15bc0:	60b8      	str	r0, [r7, #8]
    o->base.type = &mp_type_tuple;
   15bc2:	68bb      	ldr	r3, [r7, #8]
   15bc4:	4a11      	ldr	r2, [pc, #68]	; (15c0c <mp_obj_new_tuple+0x6c>)
   15bc6:	601a      	str	r2, [r3, #0]
    o->len = n;
   15bc8:	68bb      	ldr	r3, [r7, #8]
   15bca:	687a      	ldr	r2, [r7, #4]
   15bcc:	605a      	str	r2, [r3, #4]
    if (items) {
   15bce:	683b      	ldr	r3, [r7, #0]
   15bd0:	2b00      	cmp	r3, #0
   15bd2:	d013      	beq.n	15bfc <mp_obj_new_tuple+0x5c>
        for (size_t i = 0; i < n; i++) {
   15bd4:	2300      	movs	r3, #0
   15bd6:	60fb      	str	r3, [r7, #12]
   15bd8:	e00c      	b.n	15bf4 <mp_obj_new_tuple+0x54>
            o->items[i] = items[i];
   15bda:	68fb      	ldr	r3, [r7, #12]
   15bdc:	009b      	lsls	r3, r3, #2
   15bde:	683a      	ldr	r2, [r7, #0]
   15be0:	4413      	add	r3, r2
   15be2:	6819      	ldr	r1, [r3, #0]
   15be4:	68bb      	ldr	r3, [r7, #8]
   15be6:	68fa      	ldr	r2, [r7, #12]
   15be8:	3202      	adds	r2, #2
   15bea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        for (size_t i = 0; i < n; i++) {
   15bee:	68fb      	ldr	r3, [r7, #12]
   15bf0:	3301      	adds	r3, #1
   15bf2:	60fb      	str	r3, [r7, #12]
   15bf4:	68fa      	ldr	r2, [r7, #12]
   15bf6:	687b      	ldr	r3, [r7, #4]
   15bf8:	429a      	cmp	r2, r3
   15bfa:	d3ee      	bcc.n	15bda <mp_obj_new_tuple+0x3a>
        }
    }
    return MP_OBJ_FROM_PTR(o);
   15bfc:	68bb      	ldr	r3, [r7, #8]
}
   15bfe:	4618      	mov	r0, r3
   15c00:	3710      	adds	r7, #16
   15c02:	46bd      	mov	sp, r7
   15c04:	bd80      	pop	{r7, pc}
   15c06:	bf00      	nop
   15c08:	00021c24 	.word	0x00021c24
   15c0c:	00021be8 	.word	0x00021be8

00015c10 <mp_obj_tuple_get>:

void mp_obj_tuple_get(mp_obj_t self_in, size_t *len, mp_obj_t **items) {
   15c10:	b580      	push	{r7, lr}
   15c12:	b086      	sub	sp, #24
   15c14:	af00      	add	r7, sp, #0
   15c16:	60f8      	str	r0, [r7, #12]
   15c18:	60b9      	str	r1, [r7, #8]
   15c1a:	607a      	str	r2, [r7, #4]
    assert(MP_OBJ_IS_TYPE(self_in, &mp_type_tuple));
   15c1c:	68f8      	ldr	r0, [r7, #12]
   15c1e:	f7ff fd13 	bl	15648 <MP_OBJ_IS_OBJ>
   15c22:	4603      	mov	r3, r0
   15c24:	2b00      	cmp	r3, #0
   15c26:	d004      	beq.n	15c32 <mp_obj_tuple_get+0x22>
   15c28:	68fb      	ldr	r3, [r7, #12]
   15c2a:	681b      	ldr	r3, [r3, #0]
   15c2c:	4a0b      	ldr	r2, [pc, #44]	; (15c5c <mp_obj_tuple_get+0x4c>)
   15c2e:	4293      	cmp	r3, r2
   15c30:	d005      	beq.n	15c3e <mp_obj_tuple_get+0x2e>
   15c32:	4b0b      	ldr	r3, [pc, #44]	; (15c60 <mp_obj_tuple_get+0x50>)
   15c34:	4a0b      	ldr	r2, [pc, #44]	; (15c64 <mp_obj_tuple_get+0x54>)
   15c36:	21fb      	movs	r1, #251	; 0xfb
   15c38:	480b      	ldr	r0, [pc, #44]	; (15c68 <mp_obj_tuple_get+0x58>)
   15c3a:	f005 fabf 	bl	1b1bc <__assert_func>
    mp_obj_tuple_t *self = MP_OBJ_TO_PTR(self_in);
   15c3e:	68fb      	ldr	r3, [r7, #12]
   15c40:	617b      	str	r3, [r7, #20]
    *len = self->len;
   15c42:	697b      	ldr	r3, [r7, #20]
   15c44:	685a      	ldr	r2, [r3, #4]
   15c46:	68bb      	ldr	r3, [r7, #8]
   15c48:	601a      	str	r2, [r3, #0]
    *items = &self->items[0];
   15c4a:	697b      	ldr	r3, [r7, #20]
   15c4c:	f103 0208 	add.w	r2, r3, #8
   15c50:	687b      	ldr	r3, [r7, #4]
   15c52:	601a      	str	r2, [r3, #0]
}
   15c54:	bf00      	nop
   15c56:	3718      	adds	r7, #24
   15c58:	46bd      	mov	sp, r7
   15c5a:	bd80      	pop	{r7, pc}
   15c5c:	00021be8 	.word	0x00021be8
   15c60:	00021c2c 	.word	0x00021c2c
   15c64:	00021c80 	.word	0x00021c80
   15c68:	00021ae8 	.word	0x00021ae8

00015c6c <mp_obj_tuple_del>:

void mp_obj_tuple_del(mp_obj_t self_in) {
   15c6c:	b580      	push	{r7, lr}
   15c6e:	b084      	sub	sp, #16
   15c70:	af00      	add	r7, sp, #0
   15c72:	6078      	str	r0, [r7, #4]
    assert(MP_OBJ_IS_TYPE(self_in, &mp_type_tuple));
   15c74:	6878      	ldr	r0, [r7, #4]
   15c76:	f7ff fce7 	bl	15648 <MP_OBJ_IS_OBJ>
   15c7a:	4603      	mov	r3, r0
   15c7c:	2b00      	cmp	r3, #0
   15c7e:	d004      	beq.n	15c8a <mp_obj_tuple_del+0x1e>
   15c80:	687b      	ldr	r3, [r7, #4]
   15c82:	681b      	ldr	r3, [r3, #0]
   15c84:	4a09      	ldr	r2, [pc, #36]	; (15cac <mp_obj_tuple_del+0x40>)
   15c86:	4293      	cmp	r3, r2
   15c88:	d006      	beq.n	15c98 <mp_obj_tuple_del+0x2c>
   15c8a:	4b09      	ldr	r3, [pc, #36]	; (15cb0 <mp_obj_tuple_del+0x44>)
   15c8c:	4a09      	ldr	r2, [pc, #36]	; (15cb4 <mp_obj_tuple_del+0x48>)
   15c8e:	f44f 7181 	mov.w	r1, #258	; 0x102
   15c92:	4809      	ldr	r0, [pc, #36]	; (15cb8 <mp_obj_tuple_del+0x4c>)
   15c94:	f005 fa92 	bl	1b1bc <__assert_func>
    mp_obj_tuple_t *self = MP_OBJ_TO_PTR(self_in);
   15c98:	687b      	ldr	r3, [r7, #4]
   15c9a:	60fb      	str	r3, [r7, #12]
    m_del_var(mp_obj_tuple_t, mp_obj_t, self->len, self);
   15c9c:	68f8      	ldr	r0, [r7, #12]
   15c9e:	f7ea fb9b 	bl	3d8 <m_free>
}
   15ca2:	bf00      	nop
   15ca4:	3710      	adds	r7, #16
   15ca6:	46bd      	mov	sp, r7
   15ca8:	bd80      	pop	{r7, pc}
   15caa:	bf00      	nop
   15cac:	00021be8 	.word	0x00021be8
   15cb0:	00021c2c 	.word	0x00021c2c
   15cb4:	00021c94 	.word	0x00021c94
   15cb8:	00021ae8 	.word	0x00021ae8

00015cbc <tuple_it_iternext>:
    mp_fun_1_t iternext;
    mp_obj_tuple_t *tuple;
    size_t cur;
} mp_obj_tuple_it_t;

STATIC mp_obj_t tuple_it_iternext(mp_obj_t self_in) {
   15cbc:	b480      	push	{r7}
   15cbe:	b085      	sub	sp, #20
   15cc0:	af00      	add	r7, sp, #0
   15cc2:	6078      	str	r0, [r7, #4]
    mp_obj_tuple_it_t *self = MP_OBJ_TO_PTR(self_in);
   15cc4:	687b      	ldr	r3, [r7, #4]
   15cc6:	60fb      	str	r3, [r7, #12]
    if (self->cur < self->tuple->len) {
   15cc8:	68fb      	ldr	r3, [r7, #12]
   15cca:	68da      	ldr	r2, [r3, #12]
   15ccc:	68fb      	ldr	r3, [r7, #12]
   15cce:	689b      	ldr	r3, [r3, #8]
   15cd0:	685b      	ldr	r3, [r3, #4]
   15cd2:	429a      	cmp	r2, r3
   15cd4:	d20e      	bcs.n	15cf4 <tuple_it_iternext+0x38>
        mp_obj_t o_out = self->tuple->items[self->cur];
   15cd6:	68fb      	ldr	r3, [r7, #12]
   15cd8:	689b      	ldr	r3, [r3, #8]
   15cda:	68fa      	ldr	r2, [r7, #12]
   15cdc:	68d2      	ldr	r2, [r2, #12]
   15cde:	3202      	adds	r2, #2
   15ce0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   15ce4:	60bb      	str	r3, [r7, #8]
        self->cur += 1;
   15ce6:	68fb      	ldr	r3, [r7, #12]
   15ce8:	68db      	ldr	r3, [r3, #12]
   15cea:	1c5a      	adds	r2, r3, #1
   15cec:	68fb      	ldr	r3, [r7, #12]
   15cee:	60da      	str	r2, [r3, #12]
        return o_out;
   15cf0:	68bb      	ldr	r3, [r7, #8]
   15cf2:	e000      	b.n	15cf6 <tuple_it_iternext+0x3a>
    } else {
        return MP_OBJ_STOP_ITERATION;
   15cf4:	2304      	movs	r3, #4
    }
}
   15cf6:	4618      	mov	r0, r3
   15cf8:	3714      	adds	r7, #20
   15cfa:	46bd      	mov	sp, r7
   15cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
   15d00:	4770      	bx	lr

00015d02 <mp_obj_tuple_getiter>:

mp_obj_t mp_obj_tuple_getiter(mp_obj_t o_in, mp_obj_iter_buf_t *iter_buf) {
   15d02:	b480      	push	{r7}
   15d04:	b085      	sub	sp, #20
   15d06:	af00      	add	r7, sp, #0
   15d08:	6078      	str	r0, [r7, #4]
   15d0a:	6039      	str	r1, [r7, #0]
    assert(sizeof(mp_obj_tuple_it_t) <= sizeof(mp_obj_iter_buf_t));
    mp_obj_tuple_it_t *o = (mp_obj_tuple_it_t*)iter_buf;
   15d0c:	683b      	ldr	r3, [r7, #0]
   15d0e:	60fb      	str	r3, [r7, #12]
    o->base.type = &mp_type_polymorph_iter;
   15d10:	68fb      	ldr	r3, [r7, #12]
   15d12:	4a09      	ldr	r2, [pc, #36]	; (15d38 <mp_obj_tuple_getiter+0x36>)
   15d14:	601a      	str	r2, [r3, #0]
    o->iternext = tuple_it_iternext;
   15d16:	68fb      	ldr	r3, [r7, #12]
   15d18:	4a08      	ldr	r2, [pc, #32]	; (15d3c <mp_obj_tuple_getiter+0x3a>)
   15d1a:	605a      	str	r2, [r3, #4]
    o->tuple = MP_OBJ_TO_PTR(o_in);
   15d1c:	68fb      	ldr	r3, [r7, #12]
   15d1e:	687a      	ldr	r2, [r7, #4]
   15d20:	609a      	str	r2, [r3, #8]
    o->cur = 0;
   15d22:	68fb      	ldr	r3, [r7, #12]
   15d24:	2200      	movs	r2, #0
   15d26:	60da      	str	r2, [r3, #12]
    return MP_OBJ_FROM_PTR(o);
   15d28:	68fb      	ldr	r3, [r7, #12]
}
   15d2a:	4618      	mov	r0, r3
   15d2c:	3714      	adds	r7, #20
   15d2e:	46bd      	mov	sp, r7
   15d30:	f85d 7b04 	ldr.w	r7, [sp], #4
   15d34:	4770      	bx	lr
   15d36:	bf00      	nop
   15d38:	00021234 	.word	0x00021234
   15d3c:	00015cbd 	.word	0x00015cbd

00015d40 <MP_OBJ_IS_OBJ>:
    { return ((((mp_int_t)(o)) & 3) == 0); }
   15d40:	b480      	push	{r7}
   15d42:	b083      	sub	sp, #12
   15d44:	af00      	add	r7, sp, #0
   15d46:	6078      	str	r0, [r7, #4]
   15d48:	687b      	ldr	r3, [r7, #4]
   15d4a:	f003 0303 	and.w	r3, r3, #3
   15d4e:	2b00      	cmp	r3, #0
   15d50:	bf0c      	ite	eq
   15d52:	2301      	moveq	r3, #1
   15d54:	2300      	movne	r3, #0
   15d56:	b2db      	uxtb	r3, r3
   15d58:	4618      	mov	r0, r3
   15d5a:	370c      	adds	r7, #12
   15d5c:	46bd      	mov	sp, r7
   15d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
   15d62:	4770      	bx	lr

00015d64 <instance_count_native_bases>:
STATIC mp_obj_t static_class_method_make_new(const mp_obj_type_t *self_in, size_t n_args, size_t n_kw, const mp_obj_t *args);

/******************************************************************************/
// instance object

STATIC int instance_count_native_bases(const mp_obj_type_t *type, const mp_obj_type_t **last_native_base) {
   15d64:	b580      	push	{r7, lr}
   15d66:	b088      	sub	sp, #32
   15d68:	af00      	add	r7, sp, #0
   15d6a:	6078      	str	r0, [r7, #4]
   15d6c:	6039      	str	r1, [r7, #0]
    int count = 0;
   15d6e:	2300      	movs	r3, #0
   15d70:	61fb      	str	r3, [r7, #28]
    for (;;) {
        if (type == &mp_type_object) {
   15d72:	687b      	ldr	r3, [r7, #4]
   15d74:	4a2c      	ldr	r2, [pc, #176]	; (15e28 <instance_count_native_bases+0xc4>)
   15d76:	4293      	cmp	r3, r2
   15d78:	d101      	bne.n	15d7e <instance_count_native_bases+0x1a>
            // Not a "real" type, end search here.
            return count;
   15d7a:	69fb      	ldr	r3, [r7, #28]
   15d7c:	e04f      	b.n	15e1e <instance_count_native_bases+0xba>
        } else if (mp_obj_is_native_type(type)) {
   15d7e:	687b      	ldr	r3, [r7, #4]
   15d80:	68db      	ldr	r3, [r3, #12]
   15d82:	4a2a      	ldr	r2, [pc, #168]	; (15e2c <instance_count_native_bases+0xc8>)
   15d84:	4293      	cmp	r3, r2
   15d86:	d005      	beq.n	15d94 <instance_count_native_bases+0x30>
            // Native types don't have parents (at least not from our perspective) so end.
            *last_native_base = type;
   15d88:	683b      	ldr	r3, [r7, #0]
   15d8a:	687a      	ldr	r2, [r7, #4]
   15d8c:	601a      	str	r2, [r3, #0]
            return count + 1;
   15d8e:	69fb      	ldr	r3, [r7, #28]
   15d90:	3301      	adds	r3, #1
   15d92:	e044      	b.n	15e1e <instance_count_native_bases+0xba>
        } else if (type->parent == NULL) {
   15d94:	687b      	ldr	r3, [r7, #4]
   15d96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   15d98:	2b00      	cmp	r3, #0
   15d9a:	d101      	bne.n	15da0 <instance_count_native_bases+0x3c>
            // No parents so end search here.
            return count;
   15d9c:	69fb      	ldr	r3, [r7, #28]
   15d9e:	e03e      	b.n	15e1e <instance_count_native_bases+0xba>
        #if MICROPY_MULTIPLE_INHERITANCE
        } else if (((mp_obj_base_t*)type->parent)->type == &mp_type_tuple) {
   15da0:	687b      	ldr	r3, [r7, #4]
   15da2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   15da4:	681b      	ldr	r3, [r3, #0]
   15da6:	4a22      	ldr	r2, [pc, #136]	; (15e30 <instance_count_native_bases+0xcc>)
   15da8:	4293      	cmp	r3, r2
   15daa:	d134      	bne.n	15e16 <instance_count_native_bases+0xb2>
            // Multiple parents, search through them all recursively.
            const mp_obj_tuple_t *parent_tuple = type->parent;
   15dac:	687b      	ldr	r3, [r7, #4]
   15dae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   15db0:	617b      	str	r3, [r7, #20]
            const mp_obj_t *item = parent_tuple->items;
   15db2:	697b      	ldr	r3, [r7, #20]
   15db4:	3308      	adds	r3, #8
   15db6:	61bb      	str	r3, [r7, #24]
            const mp_obj_t *top = item + parent_tuple->len;
   15db8:	697b      	ldr	r3, [r7, #20]
   15dba:	685b      	ldr	r3, [r3, #4]
   15dbc:	009b      	lsls	r3, r3, #2
   15dbe:	69ba      	ldr	r2, [r7, #24]
   15dc0:	4413      	add	r3, r2
   15dc2:	613b      	str	r3, [r7, #16]
            for (; item < top; ++item) {
   15dc4:	e021      	b.n	15e0a <instance_count_native_bases+0xa6>
                assert(MP_OBJ_IS_TYPE(*item, &mp_type_type));
   15dc6:	69bb      	ldr	r3, [r7, #24]
   15dc8:	681b      	ldr	r3, [r3, #0]
   15dca:	4618      	mov	r0, r3
   15dcc:	f7ff ffb8 	bl	15d40 <MP_OBJ_IS_OBJ>
   15dd0:	4603      	mov	r3, r0
   15dd2:	2b00      	cmp	r3, #0
   15dd4:	d005      	beq.n	15de2 <instance_count_native_bases+0x7e>
   15dd6:	69bb      	ldr	r3, [r7, #24]
   15dd8:	681b      	ldr	r3, [r3, #0]
   15dda:	681b      	ldr	r3, [r3, #0]
   15ddc:	4a15      	ldr	r2, [pc, #84]	; (15e34 <instance_count_native_bases+0xd0>)
   15dde:	4293      	cmp	r3, r2
   15de0:	d005      	beq.n	15dee <instance_count_native_bases+0x8a>
   15de2:	4b15      	ldr	r3, [pc, #84]	; (15e38 <instance_count_native_bases+0xd4>)
   15de4:	4a15      	ldr	r2, [pc, #84]	; (15e3c <instance_count_native_bases+0xd8>)
   15de6:	2145      	movs	r1, #69	; 0x45
   15de8:	4815      	ldr	r0, [pc, #84]	; (15e40 <instance_count_native_bases+0xdc>)
   15dea:	f005 f9e7 	bl	1b1bc <__assert_func>
                const mp_obj_type_t *bt = (const mp_obj_type_t *)MP_OBJ_TO_PTR(*item);
   15dee:	69bb      	ldr	r3, [r7, #24]
   15df0:	681b      	ldr	r3, [r3, #0]
   15df2:	60fb      	str	r3, [r7, #12]
                count += instance_count_native_bases(bt, last_native_base);
   15df4:	6839      	ldr	r1, [r7, #0]
   15df6:	68f8      	ldr	r0, [r7, #12]
   15df8:	f7ff ffb4 	bl	15d64 <instance_count_native_bases>
   15dfc:	4602      	mov	r2, r0
   15dfe:	69fb      	ldr	r3, [r7, #28]
   15e00:	4413      	add	r3, r2
   15e02:	61fb      	str	r3, [r7, #28]
            for (; item < top; ++item) {
   15e04:	69bb      	ldr	r3, [r7, #24]
   15e06:	3304      	adds	r3, #4
   15e08:	61bb      	str	r3, [r7, #24]
   15e0a:	69ba      	ldr	r2, [r7, #24]
   15e0c:	693b      	ldr	r3, [r7, #16]
   15e0e:	429a      	cmp	r2, r3
   15e10:	d3d9      	bcc.n	15dc6 <instance_count_native_bases+0x62>
            }
            return count;
   15e12:	69fb      	ldr	r3, [r7, #28]
   15e14:	e003      	b.n	15e1e <instance_count_native_bases+0xba>
        #endif
        } else {
            // A single parent, use iteration to continue the search.
            type = type->parent;
   15e16:	687b      	ldr	r3, [r7, #4]
   15e18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   15e1a:	607b      	str	r3, [r7, #4]
        if (type == &mp_type_object) {
   15e1c:	e7a9      	b.n	15d72 <instance_count_native_bases+0xe>
        }
    }
}
   15e1e:	4618      	mov	r0, r3
   15e20:	3720      	adds	r7, #32
   15e22:	46bd      	mov	sp, r7
   15e24:	bd80      	pop	{r7, pc}
   15e26:	bf00      	nop
   15e28:	000211f8 	.word	0x000211f8
   15e2c:	00016265 	.word	0x00016265
   15e30:	00021be8 	.word	0x00021be8
   15e34:	00021ee0 	.word	0x00021ee0
   15e38:	00021ca8 	.word	0x00021ca8
   15e3c:	00022164 	.word	0x00022164
   15e40:	00021cd0 	.word	0x00021cd0

00015e44 <native_base_init_wrapper>:

// This wrapper function is allows a subclass of a native type to call the
// __init__() method (corresponding to type->make_new) of the native type.
STATIC mp_obj_t native_base_init_wrapper(size_t n_args, const mp_obj_t *args) {
   15e44:	b590      	push	{r4, r7, lr}
   15e46:	b085      	sub	sp, #20
   15e48:	af00      	add	r7, sp, #0
   15e4a:	6078      	str	r0, [r7, #4]
   15e4c:	6039      	str	r1, [r7, #0]
    mp_obj_instance_t *self = MP_OBJ_TO_PTR(args[0]);
   15e4e:	683b      	ldr	r3, [r7, #0]
   15e50:	681b      	ldr	r3, [r3, #0]
   15e52:	60fb      	str	r3, [r7, #12]
    const mp_obj_type_t *native_base = NULL;
   15e54:	2300      	movs	r3, #0
   15e56:	60bb      	str	r3, [r7, #8]
    instance_count_native_bases(self->base.type, &native_base);
   15e58:	68fb      	ldr	r3, [r7, #12]
   15e5a:	681b      	ldr	r3, [r3, #0]
   15e5c:	f107 0208 	add.w	r2, r7, #8
   15e60:	4611      	mov	r1, r2
   15e62:	4618      	mov	r0, r3
   15e64:	f7ff ff7e 	bl	15d64 <instance_count_native_bases>
    self->subobj[0] = native_base->make_new(native_base, n_args - 1, 0, args + 1);
   15e68:	68bb      	ldr	r3, [r7, #8]
   15e6a:	68dc      	ldr	r4, [r3, #12]
   15e6c:	68b8      	ldr	r0, [r7, #8]
   15e6e:	687b      	ldr	r3, [r7, #4]
   15e70:	1e59      	subs	r1, r3, #1
   15e72:	683b      	ldr	r3, [r7, #0]
   15e74:	3304      	adds	r3, #4
   15e76:	2200      	movs	r2, #0
   15e78:	47a0      	blx	r4
   15e7a:	4602      	mov	r2, r0
   15e7c:	68fb      	ldr	r3, [r7, #12]
   15e7e:	611a      	str	r2, [r3, #16]
    return mp_const_none;
   15e80:	4b02      	ldr	r3, [pc, #8]	; (15e8c <native_base_init_wrapper+0x48>)
}
   15e82:	4618      	mov	r0, r3
   15e84:	3714      	adds	r7, #20
   15e86:	46bd      	mov	sp, r7
   15e88:	bd90      	pop	{r4, r7, pc}
   15e8a:	bf00      	nop
   15e8c:	000212b4 	.word	0x000212b4

00015e90 <mp_obj_new_instance>:
STATIC MP_DEFINE_CONST_FUN_OBJ_VAR_BETWEEN(native_base_init_wrapper_obj, 1, MP_OBJ_FUN_ARGS_MAX, native_base_init_wrapper);

#if !MICROPY_CPYTHON_COMPAT
STATIC
#endif
mp_obj_instance_t *mp_obj_new_instance(const mp_obj_type_t *class, const mp_obj_type_t **native_base) {
   15e90:	b580      	push	{r7, lr}
   15e92:	b084      	sub	sp, #16
   15e94:	af00      	add	r7, sp, #0
   15e96:	6078      	str	r0, [r7, #4]
   15e98:	6039      	str	r1, [r7, #0]
    size_t num_native_bases = instance_count_native_bases(class, native_base);
   15e9a:	6839      	ldr	r1, [r7, #0]
   15e9c:	6878      	ldr	r0, [r7, #4]
   15e9e:	f7ff ff61 	bl	15d64 <instance_count_native_bases>
   15ea2:	4603      	mov	r3, r0
   15ea4:	60fb      	str	r3, [r7, #12]
    assert(num_native_bases < 2);
   15ea6:	68fb      	ldr	r3, [r7, #12]
   15ea8:	2b01      	cmp	r3, #1
   15eaa:	d905      	bls.n	15eb8 <mp_obj_new_instance+0x28>
   15eac:	4b10      	ldr	r3, [pc, #64]	; (15ef0 <mp_obj_new_instance+0x60>)
   15eae:	4a11      	ldr	r2, [pc, #68]	; (15ef4 <mp_obj_new_instance+0x64>)
   15eb0:	2162      	movs	r1, #98	; 0x62
   15eb2:	4811      	ldr	r0, [pc, #68]	; (15ef8 <mp_obj_new_instance+0x68>)
   15eb4:	f005 f982 	bl	1b1bc <__assert_func>
    mp_obj_instance_t *o = m_new_obj_var(mp_obj_instance_t, mp_obj_t, num_native_bases);
   15eb8:	68fb      	ldr	r3, [r7, #12]
   15eba:	3304      	adds	r3, #4
   15ebc:	009b      	lsls	r3, r3, #2
   15ebe:	4618      	mov	r0, r3
   15ec0:	f7ea fa2c 	bl	31c <m_malloc>
   15ec4:	60b8      	str	r0, [r7, #8]
    o->base.type = class;
   15ec6:	68bb      	ldr	r3, [r7, #8]
   15ec8:	687a      	ldr	r2, [r7, #4]
   15eca:	601a      	str	r2, [r3, #0]
    mp_map_init(&o->members, 0);
   15ecc:	68bb      	ldr	r3, [r7, #8]
   15ece:	3304      	adds	r3, #4
   15ed0:	2100      	movs	r1, #0
   15ed2:	4618      	mov	r0, r3
   15ed4:	f7f7 f99a 	bl	d20c <mp_map_init>
    // Initialise the native base-class slot (should be 1 at most) with a valid
    // object.  It doesn't matter which object, so long as it can be uniquely
    // distinguished from a native class that is initialised.
    if (num_native_bases != 0) {
   15ed8:	68fb      	ldr	r3, [r7, #12]
   15eda:	2b00      	cmp	r3, #0
   15edc:	d002      	beq.n	15ee4 <mp_obj_new_instance+0x54>
        o->subobj[0] = MP_OBJ_FROM_PTR(&native_base_init_wrapper_obj);
   15ede:	68bb      	ldr	r3, [r7, #8]
   15ee0:	4a06      	ldr	r2, [pc, #24]	; (15efc <mp_obj_new_instance+0x6c>)
   15ee2:	611a      	str	r2, [r3, #16]
    }
    return o;
   15ee4:	68bb      	ldr	r3, [r7, #8]
}
   15ee6:	4618      	mov	r0, r3
   15ee8:	3710      	adds	r7, #16
   15eea:	46bd      	mov	sp, r7
   15eec:	bd80      	pop	{r7, pc}
   15eee:	bf00      	nop
   15ef0:	00021cf0 	.word	0x00021cf0
   15ef4:	00022180 	.word	0x00022180
   15ef8:	00021cd0 	.word	0x00021cd0
   15efc:	00021ce4 	.word	0x00021ce4

00015f00 <mp_obj_class_lookup>:
    size_t meth_offset;
    mp_obj_t *dest;
    bool is_type;
};

STATIC void mp_obj_class_lookup(struct class_lookup_data  *lookup, const mp_obj_type_t *type) {
   15f00:	b580      	push	{r7, lr}
   15f02:	b08c      	sub	sp, #48	; 0x30
   15f04:	af00      	add	r7, sp, #0
   15f06:	6078      	str	r0, [r7, #4]
   15f08:	6039      	str	r1, [r7, #0]
    assert(lookup->dest[0] == MP_OBJ_NULL);
   15f0a:	687b      	ldr	r3, [r7, #4]
   15f0c:	68db      	ldr	r3, [r3, #12]
   15f0e:	681b      	ldr	r3, [r3, #0]
   15f10:	2b00      	cmp	r3, #0
   15f12:	d005      	beq.n	15f20 <mp_obj_class_lookup+0x20>
   15f14:	4b85      	ldr	r3, [pc, #532]	; (1612c <mp_obj_class_lookup+0x22c>)
   15f16:	4a86      	ldr	r2, [pc, #536]	; (16130 <mp_obj_class_lookup+0x230>)
   15f18:	2186      	movs	r1, #134	; 0x86
   15f1a:	4886      	ldr	r0, [pc, #536]	; (16134 <mp_obj_class_lookup+0x234>)
   15f1c:	f005 f94e 	bl	1b1bc <__assert_func>
    assert(lookup->dest[1] == MP_OBJ_NULL);
   15f20:	687b      	ldr	r3, [r7, #4]
   15f22:	68db      	ldr	r3, [r3, #12]
   15f24:	3304      	adds	r3, #4
   15f26:	681b      	ldr	r3, [r3, #0]
   15f28:	2b00      	cmp	r3, #0
   15f2a:	d005      	beq.n	15f38 <mp_obj_class_lookup+0x38>
   15f2c:	4b82      	ldr	r3, [pc, #520]	; (16138 <mp_obj_class_lookup+0x238>)
   15f2e:	4a80      	ldr	r2, [pc, #512]	; (16130 <mp_obj_class_lookup+0x230>)
   15f30:	2187      	movs	r1, #135	; 0x87
   15f32:	4880      	ldr	r0, [pc, #512]	; (16134 <mp_obj_class_lookup+0x234>)
   15f34:	f005 f942 	bl	1b1bc <__assert_func>
        DEBUG_printf("mp_obj_class_lookup: Looking up %s in %s\n", qstr_str(lookup->attr), qstr_str(type->name));
        // Optimize special method lookup for native types
        // This avoids extra method_name => slot lookup. On the other hand,
        // this should not be applied to class types, as will result in extra
        // lookup either.
        if (lookup->meth_offset != 0 && mp_obj_is_native_type(type)) {
   15f38:	687b      	ldr	r3, [r7, #4]
   15f3a:	689b      	ldr	r3, [r3, #8]
   15f3c:	2b00      	cmp	r3, #0
   15f3e:	d010      	beq.n	15f62 <mp_obj_class_lookup+0x62>
   15f40:	683b      	ldr	r3, [r7, #0]
   15f42:	68db      	ldr	r3, [r3, #12]
   15f44:	4a7d      	ldr	r2, [pc, #500]	; (1613c <mp_obj_class_lookup+0x23c>)
   15f46:	4293      	cmp	r3, r2
   15f48:	d00b      	beq.n	15f62 <mp_obj_class_lookup+0x62>
            if (*(void**)((char*)type + lookup->meth_offset) != NULL) {
   15f4a:	687b      	ldr	r3, [r7, #4]
   15f4c:	689b      	ldr	r3, [r3, #8]
   15f4e:	683a      	ldr	r2, [r7, #0]
   15f50:	4413      	add	r3, r2
   15f52:	681b      	ldr	r3, [r3, #0]
   15f54:	2b00      	cmp	r3, #0
   15f56:	d004      	beq.n	15f62 <mp_obj_class_lookup+0x62>
                DEBUG_printf("mp_obj_class_lookup: Matched special meth slot (off=%d) for %s\n",
                    lookup->meth_offset, qstr_str(lookup->attr));
                lookup->dest[0] = MP_OBJ_SENTINEL;
   15f58:	687b      	ldr	r3, [r7, #4]
   15f5a:	68db      	ldr	r3, [r3, #12]
   15f5c:	2208      	movs	r2, #8
   15f5e:	601a      	str	r2, [r3, #0]
                return;
   15f60:	e0e0      	b.n	16124 <mp_obj_class_lookup+0x224>
            }
        }

        if (type->locals_dict != NULL) {
   15f62:	683b      	ldr	r3, [r7, #0]
   15f64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   15f66:	2b00      	cmp	r3, #0
   15f68:	d04b      	beq.n	16002 <mp_obj_class_lookup+0x102>
            // search locals_dict (the set of methods/attributes)
            assert(type->locals_dict->base.type == &mp_type_dict); // MicroPython restriction, for now
   15f6a:	683b      	ldr	r3, [r7, #0]
   15f6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   15f6e:	681b      	ldr	r3, [r3, #0]
   15f70:	4a73      	ldr	r2, [pc, #460]	; (16140 <mp_obj_class_lookup+0x240>)
   15f72:	4293      	cmp	r3, r2
   15f74:	d005      	beq.n	15f82 <mp_obj_class_lookup+0x82>
   15f76:	4b73      	ldr	r3, [pc, #460]	; (16144 <mp_obj_class_lookup+0x244>)
   15f78:	4a6d      	ldr	r2, [pc, #436]	; (16130 <mp_obj_class_lookup+0x230>)
   15f7a:	2199      	movs	r1, #153	; 0x99
   15f7c:	486d      	ldr	r0, [pc, #436]	; (16134 <mp_obj_class_lookup+0x234>)
   15f7e:	f005 f91d 	bl	1b1bc <__assert_func>
            mp_map_t *locals_map = &type->locals_dict->map;
   15f82:	683b      	ldr	r3, [r7, #0]
   15f84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   15f86:	3304      	adds	r3, #4
   15f88:	627b      	str	r3, [r7, #36]	; 0x24
            mp_map_elem_t *elem = mp_map_lookup(locals_map, MP_OBJ_NEW_QSTR(lookup->attr), MP_MAP_LOOKUP);
   15f8a:	687b      	ldr	r3, [r7, #4]
   15f8c:	685b      	ldr	r3, [r3, #4]
   15f8e:	009b      	lsls	r3, r3, #2
   15f90:	f043 0302 	orr.w	r3, r3, #2
   15f94:	2200      	movs	r2, #0
   15f96:	4619      	mov	r1, r3
   15f98:	6a78      	ldr	r0, [r7, #36]	; 0x24
   15f9a:	f7f7 fa2f 	bl	d3fc <mp_map_lookup>
   15f9e:	6238      	str	r0, [r7, #32]
            if (elem != NULL) {
   15fa0:	6a3b      	ldr	r3, [r7, #32]
   15fa2:	2b00      	cmp	r3, #0
   15fa4:	d02d      	beq.n	16002 <mp_obj_class_lookup+0x102>
                if (lookup->is_type) {
   15fa6:	687b      	ldr	r3, [r7, #4]
   15fa8:	7c1b      	ldrb	r3, [r3, #16]
   15faa:	2b00      	cmp	r3, #0
   15fac:	d00b      	beq.n	15fc6 <mp_obj_class_lookup+0xc6>
                    // If we look up a class method, we need to return original type for which we
                    // do a lookup, not a (base) type in which we found the class method.
                    const mp_obj_type_t *org_type = (const mp_obj_type_t*)lookup->obj;
   15fae:	687b      	ldr	r3, [r7, #4]
   15fb0:	681b      	ldr	r3, [r3, #0]
   15fb2:	61fb      	str	r3, [r7, #28]
                    mp_convert_member_lookup(MP_OBJ_NULL, org_type, elem->value, lookup->dest);
   15fb4:	6a3b      	ldr	r3, [r7, #32]
   15fb6:	685a      	ldr	r2, [r3, #4]
   15fb8:	687b      	ldr	r3, [r7, #4]
   15fba:	68db      	ldr	r3, [r3, #12]
   15fbc:	69f9      	ldr	r1, [r7, #28]
   15fbe:	2000      	movs	r0, #0
   15fc0:	f7f6 fb16 	bl	c5f0 <mp_convert_member_lookup>
                printf("mp_obj_class_lookup: Returning: ");
                mp_obj_print(lookup->dest[0], PRINT_REPR); printf(" ");
                // Don't try to repr() lookup->dest[1], as we can be called recursively
                printf("<%s @%p>\n", mp_obj_get_type_str(lookup->dest[1]), lookup->dest[1]);
#endif
                return;
   15fc4:	e0ae      	b.n	16124 <mp_obj_class_lookup+0x224>
                    mp_obj_instance_t *obj = lookup->obj;
   15fc6:	687b      	ldr	r3, [r7, #4]
   15fc8:	681b      	ldr	r3, [r3, #0]
   15fca:	61bb      	str	r3, [r7, #24]
                    if (obj != NULL && mp_obj_is_native_type(type) && type != &mp_type_object /* object is not a real type */) {
   15fcc:	69bb      	ldr	r3, [r7, #24]
   15fce:	2b00      	cmp	r3, #0
   15fd0:	d00c      	beq.n	15fec <mp_obj_class_lookup+0xec>
   15fd2:	683b      	ldr	r3, [r7, #0]
   15fd4:	68db      	ldr	r3, [r3, #12]
   15fd6:	4a59      	ldr	r2, [pc, #356]	; (1613c <mp_obj_class_lookup+0x23c>)
   15fd8:	4293      	cmp	r3, r2
   15fda:	d007      	beq.n	15fec <mp_obj_class_lookup+0xec>
   15fdc:	683b      	ldr	r3, [r7, #0]
   15fde:	4a5a      	ldr	r2, [pc, #360]	; (16148 <mp_obj_class_lookup+0x248>)
   15fe0:	4293      	cmp	r3, r2
   15fe2:	d003      	beq.n	15fec <mp_obj_class_lookup+0xec>
                        obj_obj = obj->subobj[0];
   15fe4:	69bb      	ldr	r3, [r7, #24]
   15fe6:	691b      	ldr	r3, [r3, #16]
   15fe8:	62fb      	str	r3, [r7, #44]	; 0x2c
   15fea:	e001      	b.n	15ff0 <mp_obj_class_lookup+0xf0>
                        obj_obj = MP_OBJ_FROM_PTR(obj);
   15fec:	69bb      	ldr	r3, [r7, #24]
   15fee:	62fb      	str	r3, [r7, #44]	; 0x2c
                    mp_convert_member_lookup(obj_obj, type, elem->value, lookup->dest);
   15ff0:	6a3b      	ldr	r3, [r7, #32]
   15ff2:	685a      	ldr	r2, [r3, #4]
   15ff4:	687b      	ldr	r3, [r7, #4]
   15ff6:	68db      	ldr	r3, [r3, #12]
   15ff8:	6839      	ldr	r1, [r7, #0]
   15ffa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   15ffc:	f7f6 faf8 	bl	c5f0 <mp_convert_member_lookup>
                return;
   16000:	e090      	b.n	16124 <mp_obj_class_lookup+0x224>
        }

        // Previous code block takes care about attributes defined in .locals_dict,
        // but some attributes of native types may be handled using .load_attr method,
        // so make sure we try to lookup those too.
        if (lookup->obj != NULL && !lookup->is_type && mp_obj_is_native_type(type) && type != &mp_type_object /* object is not a real type */) {
   16002:	687b      	ldr	r3, [r7, #4]
   16004:	681b      	ldr	r3, [r3, #0]
   16006:	2b00      	cmp	r3, #0
   16008:	d01e      	beq.n	16048 <mp_obj_class_lookup+0x148>
   1600a:	687b      	ldr	r3, [r7, #4]
   1600c:	7c1b      	ldrb	r3, [r3, #16]
   1600e:	f083 0301 	eor.w	r3, r3, #1
   16012:	b2db      	uxtb	r3, r3
   16014:	2b00      	cmp	r3, #0
   16016:	d017      	beq.n	16048 <mp_obj_class_lookup+0x148>
   16018:	683b      	ldr	r3, [r7, #0]
   1601a:	68db      	ldr	r3, [r3, #12]
   1601c:	4a47      	ldr	r2, [pc, #284]	; (1613c <mp_obj_class_lookup+0x23c>)
   1601e:	4293      	cmp	r3, r2
   16020:	d012      	beq.n	16048 <mp_obj_class_lookup+0x148>
   16022:	683b      	ldr	r3, [r7, #0]
   16024:	4a48      	ldr	r2, [pc, #288]	; (16148 <mp_obj_class_lookup+0x248>)
   16026:	4293      	cmp	r3, r2
   16028:	d00e      	beq.n	16048 <mp_obj_class_lookup+0x148>
            mp_load_method_maybe(lookup->obj->subobj[0], lookup->attr, lookup->dest);
   1602a:	687b      	ldr	r3, [r7, #4]
   1602c:	681b      	ldr	r3, [r3, #0]
   1602e:	6918      	ldr	r0, [r3, #16]
   16030:	687b      	ldr	r3, [r7, #4]
   16032:	6859      	ldr	r1, [r3, #4]
   16034:	687b      	ldr	r3, [r7, #4]
   16036:	68db      	ldr	r3, [r3, #12]
   16038:	461a      	mov	r2, r3
   1603a:	f7f6 fb4b 	bl	c6d4 <mp_load_method_maybe>
            if (lookup->dest[0] != MP_OBJ_NULL) {
   1603e:	687b      	ldr	r3, [r7, #4]
   16040:	68db      	ldr	r3, [r3, #12]
   16042:	681b      	ldr	r3, [r3, #0]
   16044:	2b00      	cmp	r3, #0
   16046:	d166      	bne.n	16116 <mp_obj_class_lookup+0x216>
            }
        }

        // attribute not found, keep searching base classes

        if (type->parent == NULL) {
   16048:	683b      	ldr	r3, [r7, #0]
   1604a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   1604c:	2b00      	cmp	r3, #0
   1604e:	d064      	beq.n	1611a <mp_obj_class_lookup+0x21a>
            DEBUG_printf("mp_obj_class_lookup: No more parents\n");
            return;
        #if MICROPY_MULTIPLE_INHERITANCE
        } else if (((mp_obj_base_t*)type->parent)->type == &mp_type_tuple) {
   16050:	683b      	ldr	r3, [r7, #0]
   16052:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   16054:	681b      	ldr	r3, [r3, #0]
   16056:	4a3d      	ldr	r2, [pc, #244]	; (1614c <mp_obj_class_lookup+0x24c>)
   16058:	4293      	cmp	r3, r2
   1605a:	d154      	bne.n	16106 <mp_obj_class_lookup+0x206>
            const mp_obj_tuple_t *parent_tuple = type->parent;
   1605c:	683b      	ldr	r3, [r7, #0]
   1605e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   16060:	617b      	str	r3, [r7, #20]
            const mp_obj_t *item = parent_tuple->items;
   16062:	697b      	ldr	r3, [r7, #20]
   16064:	3308      	adds	r3, #8
   16066:	62bb      	str	r3, [r7, #40]	; 0x28
            const mp_obj_t *top = item + parent_tuple->len - 1;
   16068:	697b      	ldr	r3, [r7, #20]
   1606a:	685b      	ldr	r3, [r3, #4]
   1606c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   16070:	3b01      	subs	r3, #1
   16072:	009b      	lsls	r3, r3, #2
   16074:	6aba      	ldr	r2, [r7, #40]	; 0x28
   16076:	4413      	add	r3, r2
   16078:	613b      	str	r3, [r7, #16]
            for (; item < top; ++item) {
   1607a:	e028      	b.n	160ce <mp_obj_class_lookup+0x1ce>
                assert(MP_OBJ_IS_TYPE(*item, &mp_type_type));
   1607c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1607e:	681b      	ldr	r3, [r3, #0]
   16080:	4618      	mov	r0, r3
   16082:	f7ff fe5d 	bl	15d40 <MP_OBJ_IS_OBJ>
   16086:	4603      	mov	r3, r0
   16088:	2b00      	cmp	r3, #0
   1608a:	d005      	beq.n	16098 <mp_obj_class_lookup+0x198>
   1608c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1608e:	681b      	ldr	r3, [r3, #0]
   16090:	681b      	ldr	r3, [r3, #0]
   16092:	4a2f      	ldr	r2, [pc, #188]	; (16150 <mp_obj_class_lookup+0x250>)
   16094:	4293      	cmp	r3, r2
   16096:	d005      	beq.n	160a4 <mp_obj_class_lookup+0x1a4>
   16098:	4b2e      	ldr	r3, [pc, #184]	; (16154 <mp_obj_class_lookup+0x254>)
   1609a:	4a25      	ldr	r2, [pc, #148]	; (16130 <mp_obj_class_lookup+0x230>)
   1609c:	21cc      	movs	r1, #204	; 0xcc
   1609e:	4825      	ldr	r0, [pc, #148]	; (16134 <mp_obj_class_lookup+0x234>)
   160a0:	f005 f88c 	bl	1b1bc <__assert_func>
                mp_obj_type_t *bt = (mp_obj_type_t*)MP_OBJ_TO_PTR(*item);
   160a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
   160a6:	681b      	ldr	r3, [r3, #0]
   160a8:	60fb      	str	r3, [r7, #12]
                if (bt == &mp_type_object) {
   160aa:	68fb      	ldr	r3, [r7, #12]
   160ac:	4a26      	ldr	r2, [pc, #152]	; (16148 <mp_obj_class_lookup+0x248>)
   160ae:	4293      	cmp	r3, r2
   160b0:	d009      	beq.n	160c6 <mp_obj_class_lookup+0x1c6>
                    // Not a "real" type
                    continue;
                }
                mp_obj_class_lookup(lookup, bt);
   160b2:	68f9      	ldr	r1, [r7, #12]
   160b4:	6878      	ldr	r0, [r7, #4]
   160b6:	f7ff ff23 	bl	15f00 <mp_obj_class_lookup>
                if (lookup->dest[0] != MP_OBJ_NULL) {
   160ba:	687b      	ldr	r3, [r7, #4]
   160bc:	68db      	ldr	r3, [r3, #12]
   160be:	681b      	ldr	r3, [r3, #0]
   160c0:	2b00      	cmp	r3, #0
   160c2:	d12c      	bne.n	1611e <mp_obj_class_lookup+0x21e>
   160c4:	e000      	b.n	160c8 <mp_obj_class_lookup+0x1c8>
                    continue;
   160c6:	bf00      	nop
            for (; item < top; ++item) {
   160c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
   160ca:	3304      	adds	r3, #4
   160cc:	62bb      	str	r3, [r7, #40]	; 0x28
   160ce:	6aba      	ldr	r2, [r7, #40]	; 0x28
   160d0:	693b      	ldr	r3, [r7, #16]
   160d2:	429a      	cmp	r2, r3
   160d4:	d3d2      	bcc.n	1607c <mp_obj_class_lookup+0x17c>
                    return;
                }
            }

            // search last base (simple tail recursion elimination)
            assert(MP_OBJ_IS_TYPE(*item, &mp_type_type));
   160d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
   160d8:	681b      	ldr	r3, [r3, #0]
   160da:	4618      	mov	r0, r3
   160dc:	f7ff fe30 	bl	15d40 <MP_OBJ_IS_OBJ>
   160e0:	4603      	mov	r3, r0
   160e2:	2b00      	cmp	r3, #0
   160e4:	d005      	beq.n	160f2 <mp_obj_class_lookup+0x1f2>
   160e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
   160e8:	681b      	ldr	r3, [r3, #0]
   160ea:	681b      	ldr	r3, [r3, #0]
   160ec:	4a18      	ldr	r2, [pc, #96]	; (16150 <mp_obj_class_lookup+0x250>)
   160ee:	4293      	cmp	r3, r2
   160f0:	d005      	beq.n	160fe <mp_obj_class_lookup+0x1fe>
   160f2:	4b18      	ldr	r3, [pc, #96]	; (16154 <mp_obj_class_lookup+0x254>)
   160f4:	4a0e      	ldr	r2, [pc, #56]	; (16130 <mp_obj_class_lookup+0x230>)
   160f6:	21d9      	movs	r1, #217	; 0xd9
   160f8:	480e      	ldr	r0, [pc, #56]	; (16134 <mp_obj_class_lookup+0x234>)
   160fa:	f005 f85f 	bl	1b1bc <__assert_func>
            type = (mp_obj_type_t*)MP_OBJ_TO_PTR(*item);
   160fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
   16100:	681b      	ldr	r3, [r3, #0]
   16102:	603b      	str	r3, [r7, #0]
   16104:	e002      	b.n	1610c <mp_obj_class_lookup+0x20c>
        #endif
        } else {
            type = type->parent;
   16106:	683b      	ldr	r3, [r7, #0]
   16108:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   1610a:	603b      	str	r3, [r7, #0]
        }
        if (type == &mp_type_object) {
   1610c:	683b      	ldr	r3, [r7, #0]
   1610e:	4a0e      	ldr	r2, [pc, #56]	; (16148 <mp_obj_class_lookup+0x248>)
   16110:	4293      	cmp	r3, r2
   16112:	d006      	beq.n	16122 <mp_obj_class_lookup+0x222>
        DEBUG_printf("mp_obj_class_lookup: Looking up %s in %s\n", qstr_str(lookup->attr), qstr_str(type->name));
   16114:	e710      	b.n	15f38 <mp_obj_class_lookup+0x38>
                return;
   16116:	bf00      	nop
   16118:	e004      	b.n	16124 <mp_obj_class_lookup+0x224>
            return;
   1611a:	bf00      	nop
   1611c:	e002      	b.n	16124 <mp_obj_class_lookup+0x224>
                    return;
   1611e:	bf00      	nop
   16120:	e000      	b.n	16124 <mp_obj_class_lookup+0x224>
            // Not a "real" type
            return;
   16122:	bf00      	nop
        }
    }
}
   16124:	3730      	adds	r7, #48	; 0x30
   16126:	46bd      	mov	sp, r7
   16128:	bd80      	pop	{r7, pc}
   1612a:	bf00      	nop
   1612c:	00021d08 	.word	0x00021d08
   16130:	00022194 	.word	0x00022194
   16134:	00021cd0 	.word	0x00021cd0
   16138:	00021d28 	.word	0x00021d28
   1613c:	00016265 	.word	0x00016265
   16140:	0001fe68 	.word	0x0001fe68
   16144:	00021d48 	.word	0x00021d48
   16148:	000211f8 	.word	0x000211f8
   1614c:	00021be8 	.word	0x00021be8
   16150:	00021ee0 	.word	0x00021ee0
   16154:	00021ca8 	.word	0x00021ca8

00016158 <instance_print>:

STATIC void instance_print(const mp_print_t *print, mp_obj_t self_in, mp_print_kind_t kind) {
   16158:	b580      	push	{r7, lr}
   1615a:	b08e      	sub	sp, #56	; 0x38
   1615c:	af00      	add	r7, sp, #0
   1615e:	60f8      	str	r0, [r7, #12]
   16160:	60b9      	str	r1, [r7, #8]
   16162:	607a      	str	r2, [r7, #4]
    mp_obj_instance_t *self = MP_OBJ_TO_PTR(self_in);
   16164:	68bb      	ldr	r3, [r7, #8]
   16166:	637b      	str	r3, [r7, #52]	; 0x34
    qstr meth = (kind == PRINT_STR) ? MP_QSTR___str__ : MP_QSTR___repr__;
   16168:	687b      	ldr	r3, [r7, #4]
   1616a:	2b00      	cmp	r3, #0
   1616c:	d101      	bne.n	16172 <instance_print+0x1a>
   1616e:	2323      	movs	r3, #35	; 0x23
   16170:	e000      	b.n	16174 <instance_print+0x1c>
   16172:	2321      	movs	r3, #33	; 0x21
   16174:	633b      	str	r3, [r7, #48]	; 0x30
    mp_obj_t member[2] = {MP_OBJ_NULL};
   16176:	f107 0324 	add.w	r3, r7, #36	; 0x24
   1617a:	2200      	movs	r2, #0
   1617c:	601a      	str	r2, [r3, #0]
   1617e:	605a      	str	r2, [r3, #4]
    struct class_lookup_data lookup = {
   16180:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   16182:	613b      	str	r3, [r7, #16]
   16184:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   16186:	617b      	str	r3, [r7, #20]
   16188:	2308      	movs	r3, #8
   1618a:	61bb      	str	r3, [r7, #24]
   1618c:	f107 0324 	add.w	r3, r7, #36	; 0x24
   16190:	61fb      	str	r3, [r7, #28]
   16192:	2300      	movs	r3, #0
   16194:	f887 3020 	strb.w	r3, [r7, #32]
        .attr = meth,
        .meth_offset = offsetof(mp_obj_type_t, print),
        .dest = member,
        .is_type = false,
    };
    mp_obj_class_lookup(&lookup, self->base.type);
   16198:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1619a:	681a      	ldr	r2, [r3, #0]
   1619c:	f107 0310 	add.w	r3, r7, #16
   161a0:	4611      	mov	r1, r2
   161a2:	4618      	mov	r0, r3
   161a4:	f7ff feac 	bl	15f00 <mp_obj_class_lookup>
    if (member[0] == MP_OBJ_NULL && kind == PRINT_STR) {
   161a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   161aa:	2b00      	cmp	r3, #0
   161ac:	d10e      	bne.n	161cc <instance_print+0x74>
   161ae:	687b      	ldr	r3, [r7, #4]
   161b0:	2b00      	cmp	r3, #0
   161b2:	d10b      	bne.n	161cc <instance_print+0x74>
        // If there's no __str__, fall back to __repr__
        lookup.attr = MP_QSTR___repr__;
   161b4:	2321      	movs	r3, #33	; 0x21
   161b6:	617b      	str	r3, [r7, #20]
        lookup.meth_offset = 0;
   161b8:	2300      	movs	r3, #0
   161ba:	61bb      	str	r3, [r7, #24]
        mp_obj_class_lookup(&lookup, self->base.type);
   161bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   161be:	681a      	ldr	r2, [r3, #0]
   161c0:	f107 0310 	add.w	r3, r7, #16
   161c4:	4611      	mov	r1, r2
   161c6:	4618      	mov	r0, r3
   161c8:	f7ff fe9a 	bl	15f00 <mp_obj_class_lookup>
    }

    if (member[0] == MP_OBJ_SENTINEL) {
   161cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   161ce:	2b08      	cmp	r3, #8
   161d0:	d129      	bne.n	16226 <instance_print+0xce>
        // Handle Exception subclasses specially
        if (mp_obj_is_native_exception_instance(self->subobj[0])) {
   161d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   161d4:	691b      	ldr	r3, [r3, #16]
   161d6:	4618      	mov	r0, r3
   161d8:	f7f7 faba 	bl	d750 <mp_obj_get_type>
   161dc:	4603      	mov	r3, r0
   161de:	68db      	ldr	r3, [r3, #12]
   161e0:	4a1e      	ldr	r2, [pc, #120]	; (1625c <instance_print+0x104>)
   161e2:	4293      	cmp	r3, r2
   161e4:	d117      	bne.n	16216 <instance_print+0xbe>
            if (kind != PRINT_STR) {
   161e6:	687b      	ldr	r3, [r7, #4]
   161e8:	2b00      	cmp	r3, #0
   161ea:	d00a      	beq.n	16202 <instance_print+0xaa>
                mp_print_str(print, qstr_str(self->base.type->name));
   161ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   161ee:	681b      	ldr	r3, [r3, #0]
   161f0:	685b      	ldr	r3, [r3, #4]
   161f2:	4618      	mov	r0, r3
   161f4:	f7ea ffee 	bl	11d4 <qstr_str>
   161f8:	4603      	mov	r3, r0
   161fa:	4619      	mov	r1, r3
   161fc:	68f8      	ldr	r0, [r7, #12]
   161fe:	f7eb fb27 	bl	1850 <mp_print_str>
            }
            mp_obj_print_helper(print, self->subobj[0], kind | PRINT_EXC_SUBCLASS);
   16202:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   16204:	6919      	ldr	r1, [r3, #16]
   16206:	687b      	ldr	r3, [r7, #4]
   16208:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   1620c:	461a      	mov	r2, r3
   1620e:	68f8      	ldr	r0, [r7, #12]
   16210:	f7f7 facf 	bl	d7b2 <mp_obj_print_helper>
        } else {
            mp_obj_print_helper(print, self->subobj[0], kind);
        }
        return;
   16214:	e01f      	b.n	16256 <instance_print+0xfe>
            mp_obj_print_helper(print, self->subobj[0], kind);
   16216:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   16218:	691b      	ldr	r3, [r3, #16]
   1621a:	687a      	ldr	r2, [r7, #4]
   1621c:	4619      	mov	r1, r3
   1621e:	68f8      	ldr	r0, [r7, #12]
   16220:	f7f7 fac7 	bl	d7b2 <mp_obj_print_helper>
        return;
   16224:	e017      	b.n	16256 <instance_print+0xfe>
    }

    if (member[0] != MP_OBJ_NULL) {
   16226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   16228:	2b00      	cmp	r3, #0
   1622a:	d00b      	beq.n	16244 <instance_print+0xec>
        mp_obj_t r = mp_call_function_1(member[0], self_in);
   1622c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1622e:	68b9      	ldr	r1, [r7, #8]
   16230:	4618      	mov	r0, r3
   16232:	f7f5 fd92 	bl	bd5a <mp_call_function_1>
   16236:	62f8      	str	r0, [r7, #44]	; 0x2c
        mp_obj_print_helper(print, r, PRINT_STR);
   16238:	2200      	movs	r2, #0
   1623a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
   1623c:	68f8      	ldr	r0, [r7, #12]
   1623e:	f7f7 fab8 	bl	d7b2 <mp_obj_print_helper>
        return;
   16242:	e008      	b.n	16256 <instance_print+0xfe>
    }

    // TODO: CPython prints fully-qualified type name
    mp_printf(print, "<%s object at %p>", mp_obj_get_type_str(self_in), self);
   16244:	68b8      	ldr	r0, [r7, #8]
   16246:	f7f7 faa3 	bl	d790 <mp_obj_get_type_str>
   1624a:	4602      	mov	r2, r0
   1624c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1624e:	4904      	ldr	r1, [pc, #16]	; (16260 <instance_print+0x108>)
   16250:	68f8      	ldr	r0, [r7, #12]
   16252:	f7eb fe0f 	bl	1e74 <mp_printf>
}
   16256:	3738      	adds	r7, #56	; 0x38
   16258:	46bd      	mov	sp, r7
   1625a:	bd80      	pop	{r7, pc}
   1625c:	0000f225 	.word	0x0000f225
   16260:	00021d78 	.word	0x00021d78

00016264 <mp_obj_instance_make_new>:

mp_obj_t mp_obj_instance_make_new(const mp_obj_type_t *self, size_t n_args, size_t n_kw, const mp_obj_t *args) {
   16264:	b590      	push	{r4, r7, lr}
   16266:	b093      	sub	sp, #76	; 0x4c
   16268:	af00      	add	r7, sp, #0
   1626a:	60f8      	str	r0, [r7, #12]
   1626c:	60b9      	str	r1, [r7, #8]
   1626e:	607a      	str	r2, [r7, #4]
   16270:	603b      	str	r3, [r7, #0]
    assert(mp_obj_is_instance_type(self));
   16272:	68fb      	ldr	r3, [r7, #12]
   16274:	68db      	ldr	r3, [r3, #12]
   16276:	4a6b      	ldr	r2, [pc, #428]	; (16424 <mp_obj_instance_make_new+0x1c0>)
   16278:	4293      	cmp	r3, r2
   1627a:	d006      	beq.n	1628a <mp_obj_instance_make_new+0x26>
   1627c:	4b6a      	ldr	r3, [pc, #424]	; (16428 <mp_obj_instance_make_new+0x1c4>)
   1627e:	4a6b      	ldr	r2, [pc, #428]	; (1642c <mp_obj_instance_make_new+0x1c8>)
   16280:	f240 1111 	movw	r1, #273	; 0x111
   16284:	486a      	ldr	r0, [pc, #424]	; (16430 <mp_obj_instance_make_new+0x1cc>)
   16286:	f004 ff99 	bl	1b1bc <__assert_func>

    // look for __new__ function
    mp_obj_t init_fn[2] = {MP_OBJ_NULL};
   1628a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   1628e:	2200      	movs	r2, #0
   16290:	601a      	str	r2, [r3, #0]
   16292:	605a      	str	r2, [r3, #4]
    struct class_lookup_data lookup = {
   16294:	2300      	movs	r3, #0
   16296:	61bb      	str	r3, [r7, #24]
   16298:	231c      	movs	r3, #28
   1629a:	61fb      	str	r3, [r7, #28]
   1629c:	230c      	movs	r3, #12
   1629e:	623b      	str	r3, [r7, #32]
   162a0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   162a4:	627b      	str	r3, [r7, #36]	; 0x24
   162a6:	2300      	movs	r3, #0
   162a8:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
        .attr = MP_QSTR___new__,
        .meth_offset = offsetof(mp_obj_type_t, make_new),
        .dest = init_fn,
        .is_type = false,
    };
    mp_obj_class_lookup(&lookup, self);
   162ac:	f107 0318 	add.w	r3, r7, #24
   162b0:	68f9      	ldr	r1, [r7, #12]
   162b2:	4618      	mov	r0, r3
   162b4:	f7ff fe24 	bl	15f00 <mp_obj_class_lookup>

    const mp_obj_type_t *native_base = NULL;
   162b8:	2300      	movs	r3, #0
   162ba:	617b      	str	r3, [r7, #20]
    mp_obj_instance_t *o;
    if (init_fn[0] == MP_OBJ_NULL || init_fn[0] == MP_OBJ_SENTINEL) {
   162bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   162be:	2b00      	cmp	r3, #0
   162c0:	d002      	beq.n	162c8 <mp_obj_instance_make_new+0x64>
   162c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   162c4:	2b08      	cmp	r3, #8
   162c6:	d107      	bne.n	162d8 <mp_obj_instance_make_new+0x74>
        // Either there is no __new__() method defined or there is a native
        // constructor.  In both cases create a blank instance.
        o = mp_obj_new_instance(self, &native_base);
   162c8:	f107 0314 	add.w	r3, r7, #20
   162cc:	4619      	mov	r1, r3
   162ce:	68f8      	ldr	r0, [r7, #12]
   162d0:	f7ff fdde 	bl	15e90 <mp_obj_new_instance>
   162d4:	6478      	str	r0, [r7, #68]	; 0x44
   162d6:	e03e      	b.n	16356 <mp_obj_instance_make_new+0xf2>
        // said native constructor.

    } else {
        // Call Python class __new__ function with all args to create an instance
        mp_obj_t new_ret;
        if (n_args == 0 && n_kw == 0) {
   162d8:	68bb      	ldr	r3, [r7, #8]
   162da:	2b00      	cmp	r3, #0
   162dc:	d10d      	bne.n	162fa <mp_obj_instance_make_new+0x96>
   162de:	687b      	ldr	r3, [r7, #4]
   162e0:	2b00      	cmp	r3, #0
   162e2:	d10a      	bne.n	162fa <mp_obj_instance_make_new+0x96>
            mp_obj_t args2[1] = {MP_OBJ_FROM_PTR(self)};
   162e4:	68fb      	ldr	r3, [r7, #12]
   162e6:	613b      	str	r3, [r7, #16]
            new_ret = mp_call_function_n_kw(init_fn[0], 1, 0, args2);
   162e8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   162ea:	f107 0310 	add.w	r3, r7, #16
   162ee:	2200      	movs	r2, #0
   162f0:	2101      	movs	r1, #1
   162f2:	f7f5 fd58 	bl	bda6 <mp_call_function_n_kw>
   162f6:	6438      	str	r0, [r7, #64]	; 0x40
        if (n_args == 0 && n_kw == 0) {
   162f8:	e022      	b.n	16340 <mp_obj_instance_make_new+0xdc>
        } else {
            mp_obj_t *args2 = m_new(mp_obj_t, 1 + n_args + 2 * n_kw);
   162fa:	687b      	ldr	r3, [r7, #4]
   162fc:	005a      	lsls	r2, r3, #1
   162fe:	68bb      	ldr	r3, [r7, #8]
   16300:	4413      	add	r3, r2
   16302:	3301      	adds	r3, #1
   16304:	009b      	lsls	r3, r3, #2
   16306:	4618      	mov	r0, r3
   16308:	f7ea f808 	bl	31c <m_malloc>
   1630c:	63b8      	str	r0, [r7, #56]	; 0x38
            args2[0] = MP_OBJ_FROM_PTR(self);
   1630e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   16310:	68fa      	ldr	r2, [r7, #12]
   16312:	601a      	str	r2, [r3, #0]
            memcpy(args2 + 1, args, (n_args + 2 * n_kw) * sizeof(mp_obj_t));
   16314:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   16316:	1d18      	adds	r0, r3, #4
   16318:	687b      	ldr	r3, [r7, #4]
   1631a:	005a      	lsls	r2, r3, #1
   1631c:	68bb      	ldr	r3, [r7, #8]
   1631e:	4413      	add	r3, r2
   16320:	009b      	lsls	r3, r3, #2
   16322:	461a      	mov	r2, r3
   16324:	6839      	ldr	r1, [r7, #0]
   16326:	f005 fb4d 	bl	1b9c4 <memcpy>
            new_ret = mp_call_function_n_kw(init_fn[0], n_args + 1, n_kw, args2);
   1632a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   1632c:	68bb      	ldr	r3, [r7, #8]
   1632e:	1c59      	adds	r1, r3, #1
   16330:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   16332:	687a      	ldr	r2, [r7, #4]
   16334:	f7f5 fd37 	bl	bda6 <mp_call_function_n_kw>
   16338:	6438      	str	r0, [r7, #64]	; 0x40
            m_del(mp_obj_t, args2, 1 + n_args + 2 * n_kw);
   1633a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
   1633c:	f7ea f84c 	bl	3d8 <m_free>
        }

        // https://docs.python.org/3.4/reference/datamodel.html#object.__new__
        // "If __new__() does not return an instance of cls, then the new
        // instance's __init__() method will not be invoked."
        if (mp_obj_get_type(new_ret) != self) {
   16340:	6c38      	ldr	r0, [r7, #64]	; 0x40
   16342:	f7f7 fa05 	bl	d750 <mp_obj_get_type>
   16346:	4602      	mov	r2, r0
   16348:	68fb      	ldr	r3, [r7, #12]
   1634a:	429a      	cmp	r2, r3
   1634c:	d001      	beq.n	16352 <mp_obj_instance_make_new+0xee>
            return new_ret;
   1634e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   16350:	e063      	b.n	1641a <mp_obj_instance_make_new+0x1b6>
        }

        // The instance returned by __new__() becomes the new object
        o = MP_OBJ_TO_PTR(new_ret);
   16352:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   16354:	647b      	str	r3, [r7, #68]	; 0x44
    }

    // now call Python class __init__ function with all args
    // This method has a chance to call super().__init__() to construct a
    // possible native base class.
    init_fn[0] = init_fn[1] = MP_OBJ_NULL;
   16356:	2300      	movs	r3, #0
   16358:	633b      	str	r3, [r7, #48]	; 0x30
   1635a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1635c:	62fb      	str	r3, [r7, #44]	; 0x2c
    lookup.obj = o;
   1635e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   16360:	61bb      	str	r3, [r7, #24]
    lookup.attr = MP_QSTR___init__;
   16362:	2313      	movs	r3, #19
   16364:	61fb      	str	r3, [r7, #28]
    lookup.meth_offset = 0;
   16366:	2300      	movs	r3, #0
   16368:	623b      	str	r3, [r7, #32]
    mp_obj_class_lookup(&lookup, self);
   1636a:	f107 0318 	add.w	r3, r7, #24
   1636e:	68f9      	ldr	r1, [r7, #12]
   16370:	4618      	mov	r0, r3
   16372:	f7ff fdc5 	bl	15f00 <mp_obj_class_lookup>
    if (init_fn[0] != MP_OBJ_NULL) {
   16376:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   16378:	2b00      	cmp	r3, #0
   1637a:	d03b      	beq.n	163f4 <mp_obj_instance_make_new+0x190>
        mp_obj_t init_ret;
        if (n_args == 0 && n_kw == 0) {
   1637c:	68bb      	ldr	r3, [r7, #8]
   1637e:	2b00      	cmp	r3, #0
   16380:	d10b      	bne.n	1639a <mp_obj_instance_make_new+0x136>
   16382:	687b      	ldr	r3, [r7, #4]
   16384:	2b00      	cmp	r3, #0
   16386:	d108      	bne.n	1639a <mp_obj_instance_make_new+0x136>
            init_ret = mp_call_method_n_kw(0, 0, init_fn);
   16388:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   1638c:	461a      	mov	r2, r3
   1638e:	2100      	movs	r1, #0
   16390:	2000      	movs	r0, #0
   16392:	f7f5 fd29 	bl	bde8 <mp_call_method_n_kw>
   16396:	63f8      	str	r0, [r7, #60]	; 0x3c
   16398:	e025      	b.n	163e6 <mp_obj_instance_make_new+0x182>
        } else {
            mp_obj_t *args2 = m_new(mp_obj_t, 2 + n_args + 2 * n_kw);
   1639a:	687b      	ldr	r3, [r7, #4]
   1639c:	005a      	lsls	r2, r3, #1
   1639e:	68bb      	ldr	r3, [r7, #8]
   163a0:	4413      	add	r3, r2
   163a2:	3302      	adds	r3, #2
   163a4:	009b      	lsls	r3, r3, #2
   163a6:	4618      	mov	r0, r3
   163a8:	f7e9 ffb8 	bl	31c <m_malloc>
   163ac:	6378      	str	r0, [r7, #52]	; 0x34
            args2[0] = init_fn[0];
   163ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   163b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   163b2:	601a      	str	r2, [r3, #0]
            args2[1] = init_fn[1];
   163b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   163b6:	3304      	adds	r3, #4
   163b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   163ba:	601a      	str	r2, [r3, #0]
            memcpy(args2 + 2, args, (n_args + 2 * n_kw) * sizeof(mp_obj_t));
   163bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   163be:	f103 0008 	add.w	r0, r3, #8
   163c2:	687b      	ldr	r3, [r7, #4]
   163c4:	005a      	lsls	r2, r3, #1
   163c6:	68bb      	ldr	r3, [r7, #8]
   163c8:	4413      	add	r3, r2
   163ca:	009b      	lsls	r3, r3, #2
   163cc:	461a      	mov	r2, r3
   163ce:	6839      	ldr	r1, [r7, #0]
   163d0:	f005 faf8 	bl	1b9c4 <memcpy>
            init_ret = mp_call_method_n_kw(n_args, n_kw, args2);
   163d4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   163d6:	6879      	ldr	r1, [r7, #4]
   163d8:	68b8      	ldr	r0, [r7, #8]
   163da:	f7f5 fd05 	bl	bde8 <mp_call_method_n_kw>
   163de:	63f8      	str	r0, [r7, #60]	; 0x3c
            m_del(mp_obj_t, args2, 2 + n_args + 2 * n_kw);
   163e0:	6b78      	ldr	r0, [r7, #52]	; 0x34
   163e2:	f7e9 fff9 	bl	3d8 <m_free>
        }
        if (init_ret != mp_const_none) {
   163e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   163e8:	4a12      	ldr	r2, [pc, #72]	; (16434 <mp_obj_instance_make_new+0x1d0>)
   163ea:	4293      	cmp	r3, r2
   163ec:	d002      	beq.n	163f4 <mp_obj_instance_make_new+0x190>
            if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
                mp_raise_TypeError("__init__() should return None");
   163ee:	4812      	ldr	r0, [pc, #72]	; (16438 <mp_obj_instance_make_new+0x1d4>)
   163f0:	f7f6 fd98 	bl	cf24 <mp_raise_TypeError>

    }

    // If the type had a native base that was not explicitly initialised
    // (constructed) by the Python __init__() method then construct it now.
    if (native_base != NULL && o->subobj[0] == MP_OBJ_FROM_PTR(&native_base_init_wrapper_obj)) {
   163f4:	697b      	ldr	r3, [r7, #20]
   163f6:	2b00      	cmp	r3, #0
   163f8:	d00e      	beq.n	16418 <mp_obj_instance_make_new+0x1b4>
   163fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   163fc:	691b      	ldr	r3, [r3, #16]
   163fe:	4a0f      	ldr	r2, [pc, #60]	; (1643c <mp_obj_instance_make_new+0x1d8>)
   16400:	4293      	cmp	r3, r2
   16402:	d109      	bne.n	16418 <mp_obj_instance_make_new+0x1b4>
        o->subobj[0] = native_base->make_new(native_base, n_args, n_kw, args);
   16404:	697b      	ldr	r3, [r7, #20]
   16406:	68dc      	ldr	r4, [r3, #12]
   16408:	6978      	ldr	r0, [r7, #20]
   1640a:	683b      	ldr	r3, [r7, #0]
   1640c:	687a      	ldr	r2, [r7, #4]
   1640e:	68b9      	ldr	r1, [r7, #8]
   16410:	47a0      	blx	r4
   16412:	4602      	mov	r2, r0
   16414:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   16416:	611a      	str	r2, [r3, #16]
    }

    return MP_OBJ_FROM_PTR(o);
   16418:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
   1641a:	4618      	mov	r0, r3
   1641c:	374c      	adds	r7, #76	; 0x4c
   1641e:	46bd      	mov	sp, r7
   16420:	bd90      	pop	{r4, r7, pc}
   16422:	bf00      	nop
   16424:	00016265 	.word	0x00016265
   16428:	00021d8c 	.word	0x00021d8c
   1642c:	000221a8 	.word	0x000221a8
   16430:	00021cd0 	.word	0x00021cd0
   16434:	000212b4 	.word	0x000212b4
   16438:	00021dac 	.word	0x00021dac
   1643c:	00021ce4 	.word	0x00021ce4

00016440 <instance_unary_op>:
    #if MICROPY_PY_SYS_GETSIZEOF
    [MP_UNARY_OP_SIZEOF] = MP_QSTR___sizeof__,
    #endif
};

STATIC mp_obj_t instance_unary_op(mp_unary_op_t op, mp_obj_t self_in) {
   16440:	b580      	push	{r7, lr}
   16442:	b08c      	sub	sp, #48	; 0x30
   16444:	af00      	add	r7, sp, #0
   16446:	6078      	str	r0, [r7, #4]
   16448:	6039      	str	r1, [r7, #0]
    mp_obj_instance_t *self = MP_OBJ_TO_PTR(self_in);
   1644a:	683b      	ldr	r3, [r7, #0]
   1644c:	62bb      	str	r3, [r7, #40]	; 0x28
            + sizeof(*self->members.table) * self->members.alloc;
        return MP_OBJ_NEW_SMALL_INT(sz);
    }
    #endif

    qstr op_name = mp_unary_op_method_name[op];
   1644e:	4a2c      	ldr	r2, [pc, #176]	; (16500 <instance_unary_op+0xc0>)
   16450:	687b      	ldr	r3, [r7, #4]
   16452:	4413      	add	r3, r2
   16454:	781b      	ldrb	r3, [r3, #0]
   16456:	627b      	str	r3, [r7, #36]	; 0x24
    /* Still try to lookup native slot
    if (op_name == 0) {
        return MP_OBJ_NULL;
    }
    */
    mp_obj_t member[2] = {MP_OBJ_NULL};
   16458:	f107 031c 	add.w	r3, r7, #28
   1645c:	2200      	movs	r2, #0
   1645e:	601a      	str	r2, [r3, #0]
   16460:	605a      	str	r2, [r3, #4]
    struct class_lookup_data lookup = {
   16462:	6abb      	ldr	r3, [r7, #40]	; 0x28
   16464:	60bb      	str	r3, [r7, #8]
   16466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   16468:	60fb      	str	r3, [r7, #12]
   1646a:	2314      	movs	r3, #20
   1646c:	613b      	str	r3, [r7, #16]
   1646e:	f107 031c 	add.w	r3, r7, #28
   16472:	617b      	str	r3, [r7, #20]
   16474:	2300      	movs	r3, #0
   16476:	763b      	strb	r3, [r7, #24]
        .attr = op_name,
        .meth_offset = offsetof(mp_obj_type_t, unary_op),
        .dest = member,
        .is_type = false,
    };
    mp_obj_class_lookup(&lookup, self->base.type);
   16478:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1647a:	681a      	ldr	r2, [r3, #0]
   1647c:	f107 0308 	add.w	r3, r7, #8
   16480:	4611      	mov	r1, r2
   16482:	4618      	mov	r0, r3
   16484:	f7ff fd3c 	bl	15f00 <mp_obj_class_lookup>
    if (member[0] == MP_OBJ_SENTINEL) {
   16488:	69fb      	ldr	r3, [r7, #28]
   1648a:	2b08      	cmp	r3, #8
   1648c:	d107      	bne.n	1649e <instance_unary_op+0x5e>
        return mp_unary_op(op, self->subobj[0]);
   1648e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   16490:	691b      	ldr	r3, [r3, #16]
   16492:	4619      	mov	r1, r3
   16494:	6878      	ldr	r0, [r7, #4]
   16496:	f7f5 f90d 	bl	b6b4 <mp_unary_op>
   1649a:	4603      	mov	r3, r0
   1649c:	e02b      	b.n	164f6 <instance_unary_op+0xb6>
    } else if (member[0] != MP_OBJ_NULL) {
   1649e:	69fb      	ldr	r3, [r7, #28]
   164a0:	2b00      	cmp	r3, #0
   164a2:	d012      	beq.n	164ca <instance_unary_op+0x8a>
        mp_obj_t val = mp_call_function_1(member[0], self_in);
   164a4:	69fb      	ldr	r3, [r7, #28]
   164a6:	6839      	ldr	r1, [r7, #0]
   164a8:	4618      	mov	r0, r3
   164aa:	f7f5 fc56 	bl	bd5a <mp_call_function_1>
   164ae:	62f8      	str	r0, [r7, #44]	; 0x2c
        // __hash__ must return a small int
        if (op == MP_UNARY_OP_HASH) {
   164b0:	687b      	ldr	r3, [r7, #4]
   164b2:	2b06      	cmp	r3, #6
   164b4:	d107      	bne.n	164c6 <instance_unary_op+0x86>
            val = MP_OBJ_NEW_SMALL_INT(mp_obj_get_int_truncated(val));
   164b6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   164b8:	f7f7 fb5e 	bl	db78 <mp_obj_get_int_truncated>
   164bc:	4603      	mov	r3, r0
   164be:	005b      	lsls	r3, r3, #1
   164c0:	f043 0301 	orr.w	r3, r3, #1
   164c4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        return val;
   164c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   164c8:	e015      	b.n	164f6 <instance_unary_op+0xb6>
    } else {
        if (op == MP_UNARY_OP_HASH) {
   164ca:	687b      	ldr	r3, [r7, #4]
   164cc:	2b06      	cmp	r3, #6
   164ce:	d111      	bne.n	164f4 <instance_unary_op+0xb4>
            lookup.attr = MP_QSTR___eq__;
   164d0:	230a      	movs	r3, #10
   164d2:	60fb      	str	r3, [r7, #12]
            mp_obj_class_lookup(&lookup, self->base.type);
   164d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
   164d6:	681a      	ldr	r2, [r3, #0]
   164d8:	f107 0308 	add.w	r3, r7, #8
   164dc:	4611      	mov	r1, r2
   164de:	4618      	mov	r0, r3
   164e0:	f7ff fd0e 	bl	15f00 <mp_obj_class_lookup>
            if (member[0] == MP_OBJ_NULL) {
   164e4:	69fb      	ldr	r3, [r7, #28]
   164e6:	2b00      	cmp	r3, #0
   164e8:	d104      	bne.n	164f4 <instance_unary_op+0xb4>
                // https://docs.python.org/3/reference/datamodel.html#object.__hash__
                // "User-defined classes have __eq__() and __hash__() methods by default;
                // with them, all objects compare unequal (except with themselves) and
                // x.__hash__() returns an appropriate value such that x == y implies
                // both that x is y and hash(x) == hash(y)."
                return MP_OBJ_NEW_SMALL_INT((mp_uint_t)self_in);
   164ea:	683b      	ldr	r3, [r7, #0]
   164ec:	005b      	lsls	r3, r3, #1
   164ee:	f043 0301 	orr.w	r3, r3, #1
   164f2:	e000      	b.n	164f6 <instance_unary_op+0xb6>
            }
            // "A class that overrides __eq__() and does not define __hash__() will have its __hash__() implicitly set to None.
            // When the __hash__() method of a class is None, instances of the class will raise an appropriate TypeError"
        }

        return MP_OBJ_NULL; // op not supported
   164f4:	2300      	movs	r3, #0
    }
}
   164f6:	4618      	mov	r0, r3
   164f8:	3730      	adds	r7, #48	; 0x30
   164fa:	46bd      	mov	sp, r7
   164fc:	bd80      	pop	{r7, pc}
   164fe:	bf00      	nop
   16500:	00021dcc 	.word	0x00021dcc

00016504 <instance_binary_op>:
    [MP_BINARY_OP_REVERSE_RSHIFT] = MP_QSTR___rrshift__,
    #endif
    #endif
};

STATIC mp_obj_t instance_binary_op(mp_binary_op_t op, mp_obj_t lhs_in, mp_obj_t rhs_in) {
   16504:	b580      	push	{r7, lr}
   16506:	b090      	sub	sp, #64	; 0x40
   16508:	af00      	add	r7, sp, #0
   1650a:	60f8      	str	r0, [r7, #12]
   1650c:	60b9      	str	r1, [r7, #8]
   1650e:	607a      	str	r2, [r7, #4]
    // Note: For ducktyping, CPython does not look in the instance members or use
    // __getattr__ or __getattribute__.  It only looks in the class dictionary.
    mp_obj_instance_t *lhs = MP_OBJ_TO_PTR(lhs_in);
   16510:	68bb      	ldr	r3, [r7, #8]
   16512:	63bb      	str	r3, [r7, #56]	; 0x38
retry:;
    qstr op_name = mp_binary_op_method_name[op];
   16514:	4a24      	ldr	r2, [pc, #144]	; (165a8 <instance_binary_op+0xa4>)
   16516:	68fb      	ldr	r3, [r7, #12]
   16518:	4413      	add	r3, r2
   1651a:	781b      	ldrb	r3, [r3, #0]
   1651c:	637b      	str	r3, [r7, #52]	; 0x34
    /* Still try to lookup native slot
    if (op_name == 0) {
        return MP_OBJ_NULL;
    }
    */
    mp_obj_t dest[3] = {MP_OBJ_NULL};
   1651e:	f107 0328 	add.w	r3, r7, #40	; 0x28
   16522:	2200      	movs	r2, #0
   16524:	601a      	str	r2, [r3, #0]
   16526:	605a      	str	r2, [r3, #4]
   16528:	609a      	str	r2, [r3, #8]
    struct class_lookup_data lookup = {
   1652a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1652c:	617b      	str	r3, [r7, #20]
   1652e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   16530:	61bb      	str	r3, [r7, #24]
   16532:	2318      	movs	r3, #24
   16534:	61fb      	str	r3, [r7, #28]
   16536:	f107 0328 	add.w	r3, r7, #40	; 0x28
   1653a:	623b      	str	r3, [r7, #32]
   1653c:	2300      	movs	r3, #0
   1653e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
        .attr = op_name,
        .meth_offset = offsetof(mp_obj_type_t, binary_op),
        .dest = dest,
        .is_type = false,
    };
    mp_obj_class_lookup(&lookup, lhs->base.type);
   16542:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   16544:	681a      	ldr	r2, [r3, #0]
   16546:	f107 0314 	add.w	r3, r7, #20
   1654a:	4611      	mov	r1, r2
   1654c:	4618      	mov	r0, r3
   1654e:	f7ff fcd7 	bl	15f00 <mp_obj_class_lookup>

    mp_obj_t res;
    if (dest[0] == MP_OBJ_SENTINEL) {
   16552:	6abb      	ldr	r3, [r7, #40]	; 0x28
   16554:	2b08      	cmp	r3, #8
   16556:	d108      	bne.n	1656a <instance_binary_op+0x66>
        res = mp_binary_op(op, lhs->subobj[0], rhs_in);
   16558:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1655a:	691b      	ldr	r3, [r3, #16]
   1655c:	687a      	ldr	r2, [r7, #4]
   1655e:	4619      	mov	r1, r3
   16560:	68f8      	ldr	r0, [r7, #12]
   16562:	f7f5 f98d 	bl	b880 <mp_binary_op>
   16566:	63f8      	str	r0, [r7, #60]	; 0x3c
   16568:	e019      	b.n	1659e <instance_binary_op+0x9a>
    } else if (dest[0] != MP_OBJ_NULL) {
   1656a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1656c:	2b00      	cmp	r3, #0
   1656e:	d00a      	beq.n	16586 <instance_binary_op+0x82>
        dest[2] = rhs_in;
   16570:	687b      	ldr	r3, [r7, #4]
   16572:	633b      	str	r3, [r7, #48]	; 0x30
        res = mp_call_method_n_kw(1, 0, dest);
   16574:	f107 0328 	add.w	r3, r7, #40	; 0x28
   16578:	461a      	mov	r2, r3
   1657a:	2100      	movs	r1, #0
   1657c:	2001      	movs	r0, #1
   1657e:	f7f5 fc33 	bl	bde8 <mp_call_method_n_kw>
   16582:	63f8      	str	r0, [r7, #60]	; 0x3c
   16584:	e00b      	b.n	1659e <instance_binary_op+0x9a>
    } else {
        // If this was an inplace method, fallback to normal method
        // https://docs.python.org/3/reference/datamodel.html#object.__iadd__ :
        // "If a specific method is not defined, the augmented assignment
        // falls back to the normal methods."
        if (op >= MP_BINARY_OP_INPLACE_OR && op <= MP_BINARY_OP_INPLACE_POWER) {
   16586:	68fb      	ldr	r3, [r7, #12]
   16588:	2b08      	cmp	r3, #8
   1658a:	d906      	bls.n	1659a <instance_binary_op+0x96>
   1658c:	68fb      	ldr	r3, [r7, #12]
   1658e:	2b14      	cmp	r3, #20
   16590:	d803      	bhi.n	1659a <instance_binary_op+0x96>
            op -= MP_BINARY_OP_INPLACE_OR - MP_BINARY_OP_OR;
   16592:	68fb      	ldr	r3, [r7, #12]
   16594:	330c      	adds	r3, #12
   16596:	60fb      	str	r3, [r7, #12]
            goto retry;
   16598:	e7bc      	b.n	16514 <instance_binary_op+0x10>
        }
        return MP_OBJ_NULL; // op not supported
   1659a:	2300      	movs	r3, #0
   1659c:	e000      	b.n	165a0 <instance_binary_op+0x9c>
    if (res == mp_const_notimplemented) {
        return MP_OBJ_NULL; // op not supported
    }
    #endif

    return res;
   1659e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
   165a0:	4618      	mov	r0, r3
   165a2:	3740      	adds	r7, #64	; 0x40
   165a4:	46bd      	mov	sp, r7
   165a6:	bd80      	pop	{r7, pc}
   165a8:	00021dd8 	.word	0x00021dd8

000165ac <mp_obj_instance_load_attr>:

STATIC void mp_obj_instance_load_attr(mp_obj_t self_in, qstr attr, mp_obj_t *dest) {
   165ac:	b580      	push	{r7, lr}
   165ae:	b090      	sub	sp, #64	; 0x40
   165b0:	af00      	add	r7, sp, #0
   165b2:	60f8      	str	r0, [r7, #12]
   165b4:	60b9      	str	r1, [r7, #8]
   165b6:	607a      	str	r2, [r7, #4]
    // logic: look in instance members then class locals
    assert(mp_obj_is_instance_type(mp_obj_get_type(self_in)));
   165b8:	68f8      	ldr	r0, [r7, #12]
   165ba:	f7f7 f8c9 	bl	d750 <mp_obj_get_type>
   165be:	4603      	mov	r3, r0
   165c0:	68db      	ldr	r3, [r3, #12]
   165c2:	4a2c      	ldr	r2, [pc, #176]	; (16674 <mp_obj_instance_load_attr+0xc8>)
   165c4:	4293      	cmp	r3, r2
   165c6:	d006      	beq.n	165d6 <mp_obj_instance_load_attr+0x2a>
   165c8:	4b2b      	ldr	r3, [pc, #172]	; (16678 <mp_obj_instance_load_attr+0xcc>)
   165ca:	4a2c      	ldr	r2, [pc, #176]	; (1667c <mp_obj_instance_load_attr+0xd0>)
   165cc:	f240 212f 	movw	r1, #559	; 0x22f
   165d0:	482b      	ldr	r0, [pc, #172]	; (16680 <mp_obj_instance_load_attr+0xd4>)
   165d2:	f004 fdf3 	bl	1b1bc <__assert_func>
    mp_obj_instance_t *self = MP_OBJ_TO_PTR(self_in);
   165d6:	68fb      	ldr	r3, [r7, #12]
   165d8:	63fb      	str	r3, [r7, #60]	; 0x3c

    mp_map_elem_t *elem = mp_map_lookup(&self->members, MP_OBJ_NEW_QSTR(attr), MP_MAP_LOOKUP);
   165da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   165dc:	1d18      	adds	r0, r3, #4
   165de:	68bb      	ldr	r3, [r7, #8]
   165e0:	009b      	lsls	r3, r3, #2
   165e2:	f043 0302 	orr.w	r3, r3, #2
   165e6:	2200      	movs	r2, #0
   165e8:	4619      	mov	r1, r3
   165ea:	f7f6 ff07 	bl	d3fc <mp_map_lookup>
   165ee:	63b8      	str	r0, [r7, #56]	; 0x38
    if (elem != NULL) {
   165f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   165f2:	2b00      	cmp	r3, #0
   165f4:	d004      	beq.n	16600 <mp_obj_instance_load_attr+0x54>
        // object member, always treated as a value
        dest[0] = elem->value;
   165f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   165f8:	685a      	ldr	r2, [r3, #4]
   165fa:	687b      	ldr	r3, [r7, #4]
   165fc:	601a      	str	r2, [r3, #0]
        return;
   165fe:	e036      	b.n	1666e <mp_obj_instance_load_attr+0xc2>
        }
        dest[0] = attr_dict;
        return;
    }
#endif
    struct class_lookup_data lookup = {
   16600:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   16602:	623b      	str	r3, [r7, #32]
   16604:	68bb      	ldr	r3, [r7, #8]
   16606:	627b      	str	r3, [r7, #36]	; 0x24
   16608:	2300      	movs	r3, #0
   1660a:	62bb      	str	r3, [r7, #40]	; 0x28
   1660c:	687b      	ldr	r3, [r7, #4]
   1660e:	62fb      	str	r3, [r7, #44]	; 0x2c
   16610:	2300      	movs	r3, #0
   16612:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
        .attr = attr,
        .meth_offset = 0,
        .dest = dest,
        .is_type = false,
    };
    mp_obj_class_lookup(&lookup, self->base.type);
   16616:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   16618:	681a      	ldr	r2, [r3, #0]
   1661a:	f107 0320 	add.w	r3, r7, #32
   1661e:	4611      	mov	r1, r2
   16620:	4618      	mov	r0, r3
   16622:	f7ff fc6d 	bl	15f00 <mp_obj_class_lookup>
    mp_obj_t member = dest[0];
   16626:	687b      	ldr	r3, [r7, #4]
   16628:	681b      	ldr	r3, [r3, #0]
   1662a:	637b      	str	r3, [r7, #52]	; 0x34
    if (member != MP_OBJ_NULL) {
   1662c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1662e:	2b00      	cmp	r3, #0
   16630:	d11c      	bne.n	1666c <mp_obj_instance_load_attr+0xc0>
        #endif
        return;
    }

    // try __getattr__
    if (attr != MP_QSTR___getattr__) {
   16632:	68bb      	ldr	r3, [r7, #8]
   16634:	2b0d      	cmp	r3, #13
   16636:	d01a      	beq.n	1666e <mp_obj_instance_load_attr+0xc2>
            return;
        }
        #endif

        mp_obj_t dest2[3];
        mp_load_method_maybe(self_in, MP_QSTR___getattr__, dest2);
   16638:	f107 0314 	add.w	r3, r7, #20
   1663c:	461a      	mov	r2, r3
   1663e:	210d      	movs	r1, #13
   16640:	68f8      	ldr	r0, [r7, #12]
   16642:	f7f6 f847 	bl	c6d4 <mp_load_method_maybe>
        if (dest2[0] != MP_OBJ_NULL) {
   16646:	697b      	ldr	r3, [r7, #20]
   16648:	2b00      	cmp	r3, #0
   1664a:	d010      	beq.n	1666e <mp_obj_instance_load_attr+0xc2>
            // __getattr__ exists, call it and return its result
            // XXX if this fails to load the requested attr, should we catch the attribute error and return silently?
            dest2[2] = MP_OBJ_NEW_QSTR(attr);
   1664c:	68bb      	ldr	r3, [r7, #8]
   1664e:	009b      	lsls	r3, r3, #2
   16650:	f043 0302 	orr.w	r3, r3, #2
   16654:	61fb      	str	r3, [r7, #28]
            dest[0] = mp_call_method_n_kw(1, 0, dest2);
   16656:	f107 0314 	add.w	r3, r7, #20
   1665a:	461a      	mov	r2, r3
   1665c:	2100      	movs	r1, #0
   1665e:	2001      	movs	r0, #1
   16660:	f7f5 fbc2 	bl	bde8 <mp_call_method_n_kw>
   16664:	4602      	mov	r2, r0
   16666:	687b      	ldr	r3, [r7, #4]
   16668:	601a      	str	r2, [r3, #0]
   1666a:	e000      	b.n	1666e <mp_obj_instance_load_attr+0xc2>
        return;
   1666c:	bf00      	nop
            return;
        }
    }
}
   1666e:	3740      	adds	r7, #64	; 0x40
   16670:	46bd      	mov	sp, r7
   16672:	bd80      	pop	{r7, pc}
   16674:	00016265 	.word	0x00016265
   16678:	00021dfc 	.word	0x00021dfc
   1667c:	000221c4 	.word	0x000221c4
   16680:	00021cd0 	.word	0x00021cd0

00016684 <mp_obj_instance_store_attr>:

STATIC bool mp_obj_instance_store_attr(mp_obj_t self_in, qstr attr, mp_obj_t value) {
   16684:	b580      	push	{r7, lr}
   16686:	b086      	sub	sp, #24
   16688:	af00      	add	r7, sp, #0
   1668a:	60f8      	str	r0, [r7, #12]
   1668c:	60b9      	str	r1, [r7, #8]
   1668e:	607a      	str	r2, [r7, #4]
    mp_obj_instance_t *self = MP_OBJ_TO_PTR(self_in);
   16690:	68fb      	ldr	r3, [r7, #12]
   16692:	617b      	str	r3, [r7, #20]
        }
        #endif
    }
    #endif

    if (value == MP_OBJ_NULL) {
   16694:	687b      	ldr	r3, [r7, #4]
   16696:	2b00      	cmp	r3, #0
   16698:	d111      	bne.n	166be <mp_obj_instance_store_attr+0x3a>
            mp_call_method_n_kw(1, 0, attr_delattr_method);
            return true;
        }
        #endif

        mp_map_elem_t *elem = mp_map_lookup(&self->members, MP_OBJ_NEW_QSTR(attr), MP_MAP_LOOKUP_REMOVE_IF_FOUND);
   1669a:	697b      	ldr	r3, [r7, #20]
   1669c:	1d18      	adds	r0, r3, #4
   1669e:	68bb      	ldr	r3, [r7, #8]
   166a0:	009b      	lsls	r3, r3, #2
   166a2:	f043 0302 	orr.w	r3, r3, #2
   166a6:	2202      	movs	r2, #2
   166a8:	4619      	mov	r1, r3
   166aa:	f7f6 fea7 	bl	d3fc <mp_map_lookup>
   166ae:	6138      	str	r0, [r7, #16]
        return elem != NULL;
   166b0:	693b      	ldr	r3, [r7, #16]
   166b2:	2b00      	cmp	r3, #0
   166b4:	bf14      	ite	ne
   166b6:	2301      	movne	r3, #1
   166b8:	2300      	moveq	r3, #0
   166ba:	b2db      	uxtb	r3, r3
   166bc:	e00d      	b.n	166da <mp_obj_instance_store_attr+0x56>
            mp_call_method_n_kw(2, 0, attr_setattr_method);
            return true;
        }
        #endif

        mp_map_lookup(&self->members, MP_OBJ_NEW_QSTR(attr), MP_MAP_LOOKUP_ADD_IF_NOT_FOUND)->value = value;
   166be:	697b      	ldr	r3, [r7, #20]
   166c0:	1d18      	adds	r0, r3, #4
   166c2:	68bb      	ldr	r3, [r7, #8]
   166c4:	009b      	lsls	r3, r3, #2
   166c6:	f043 0302 	orr.w	r3, r3, #2
   166ca:	2201      	movs	r2, #1
   166cc:	4619      	mov	r1, r3
   166ce:	f7f6 fe95 	bl	d3fc <mp_map_lookup>
   166d2:	4602      	mov	r2, r0
   166d4:	687b      	ldr	r3, [r7, #4]
   166d6:	6053      	str	r3, [r2, #4]
        return true;
   166d8:	2301      	movs	r3, #1
    }
}
   166da:	4618      	mov	r0, r3
   166dc:	3718      	adds	r7, #24
   166de:	46bd      	mov	sp, r7
   166e0:	bd80      	pop	{r7, pc}

000166e2 <mp_obj_instance_attr>:

void mp_obj_instance_attr(mp_obj_t self_in, qstr attr, mp_obj_t *dest) {
   166e2:	b580      	push	{r7, lr}
   166e4:	b084      	sub	sp, #16
   166e6:	af00      	add	r7, sp, #0
   166e8:	60f8      	str	r0, [r7, #12]
   166ea:	60b9      	str	r1, [r7, #8]
   166ec:	607a      	str	r2, [r7, #4]
    if (dest[0] == MP_OBJ_NULL) {
   166ee:	687b      	ldr	r3, [r7, #4]
   166f0:	681b      	ldr	r3, [r3, #0]
   166f2:	2b00      	cmp	r3, #0
   166f4:	d105      	bne.n	16702 <mp_obj_instance_attr+0x20>
        mp_obj_instance_load_attr(self_in, attr, dest);
   166f6:	687a      	ldr	r2, [r7, #4]
   166f8:	68b9      	ldr	r1, [r7, #8]
   166fa:	68f8      	ldr	r0, [r7, #12]
   166fc:	f7ff ff56 	bl	165ac <mp_obj_instance_load_attr>
    } else {
        if (mp_obj_instance_store_attr(self_in, attr, dest[1])) {
            dest[0] = MP_OBJ_NULL; // indicate success
        }
    }
}
   16700:	e00d      	b.n	1671e <mp_obj_instance_attr+0x3c>
        if (mp_obj_instance_store_attr(self_in, attr, dest[1])) {
   16702:	687b      	ldr	r3, [r7, #4]
   16704:	3304      	adds	r3, #4
   16706:	681b      	ldr	r3, [r3, #0]
   16708:	461a      	mov	r2, r3
   1670a:	68b9      	ldr	r1, [r7, #8]
   1670c:	68f8      	ldr	r0, [r7, #12]
   1670e:	f7ff ffb9 	bl	16684 <mp_obj_instance_store_attr>
   16712:	4603      	mov	r3, r0
   16714:	2b00      	cmp	r3, #0
   16716:	d002      	beq.n	1671e <mp_obj_instance_attr+0x3c>
            dest[0] = MP_OBJ_NULL; // indicate success
   16718:	687b      	ldr	r3, [r7, #4]
   1671a:	2200      	movs	r2, #0
   1671c:	601a      	str	r2, [r3, #0]
}
   1671e:	bf00      	nop
   16720:	3710      	adds	r7, #16
   16722:	46bd      	mov	sp, r7
   16724:	bd80      	pop	{r7, pc}

00016726 <instance_subscr>:

STATIC mp_obj_t instance_subscr(mp_obj_t self_in, mp_obj_t index, mp_obj_t value) {
   16726:	b580      	push	{r7, lr}
   16728:	b092      	sub	sp, #72	; 0x48
   1672a:	af00      	add	r7, sp, #0
   1672c:	60f8      	str	r0, [r7, #12]
   1672e:	60b9      	str	r1, [r7, #8]
   16730:	607a      	str	r2, [r7, #4]
    mp_obj_instance_t *self = MP_OBJ_TO_PTR(self_in);
   16732:	68fb      	ldr	r3, [r7, #12]
   16734:	643b      	str	r3, [r7, #64]	; 0x40
    mp_obj_t member[2] = {MP_OBJ_NULL};
   16736:	f107 0334 	add.w	r3, r7, #52	; 0x34
   1673a:	2200      	movs	r2, #0
   1673c:	601a      	str	r2, [r3, #0]
   1673e:	605a      	str	r2, [r3, #4]
    struct class_lookup_data lookup = {
   16740:	f107 0320 	add.w	r3, r7, #32
   16744:	2200      	movs	r2, #0
   16746:	601a      	str	r2, [r3, #0]
   16748:	605a      	str	r2, [r3, #4]
   1674a:	609a      	str	r2, [r3, #8]
   1674c:	60da      	str	r2, [r3, #12]
   1674e:	611a      	str	r2, [r3, #16]
   16750:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   16752:	623b      	str	r3, [r7, #32]
   16754:	2320      	movs	r3, #32
   16756:	62bb      	str	r3, [r7, #40]	; 0x28
   16758:	f107 0334 	add.w	r3, r7, #52	; 0x34
   1675c:	62fb      	str	r3, [r7, #44]	; 0x2c
        .meth_offset = offsetof(mp_obj_type_t, subscr),
        .dest = member,
        .is_type = false,
    };
    size_t meth_args;
    if (value == MP_OBJ_NULL) {
   1675e:	687b      	ldr	r3, [r7, #4]
   16760:	2b00      	cmp	r3, #0
   16762:	d10c      	bne.n	1677e <instance_subscr+0x58>
        // delete item
        lookup.attr = MP_QSTR___delitem__;
   16764:	2308      	movs	r3, #8
   16766:	627b      	str	r3, [r7, #36]	; 0x24
        mp_obj_class_lookup(&lookup, self->base.type);
   16768:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1676a:	681a      	ldr	r2, [r3, #0]
   1676c:	f107 0320 	add.w	r3, r7, #32
   16770:	4611      	mov	r1, r2
   16772:	4618      	mov	r0, r3
   16774:	f7ff fbc4 	bl	15f00 <mp_obj_class_lookup>
        meth_args = 2;
   16778:	2302      	movs	r3, #2
   1677a:	647b      	str	r3, [r7, #68]	; 0x44
   1677c:	e01b      	b.n	167b6 <instance_subscr+0x90>
    } else if (value == MP_OBJ_SENTINEL) {
   1677e:	687b      	ldr	r3, [r7, #4]
   16780:	2b08      	cmp	r3, #8
   16782:	d10c      	bne.n	1679e <instance_subscr+0x78>
        // load item
        lookup.attr = MP_QSTR___getitem__;
   16784:	230e      	movs	r3, #14
   16786:	627b      	str	r3, [r7, #36]	; 0x24
        mp_obj_class_lookup(&lookup, self->base.type);
   16788:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1678a:	681a      	ldr	r2, [r3, #0]
   1678c:	f107 0320 	add.w	r3, r7, #32
   16790:	4611      	mov	r1, r2
   16792:	4618      	mov	r0, r3
   16794:	f7ff fbb4 	bl	15f00 <mp_obj_class_lookup>
        meth_args = 2;
   16798:	2302      	movs	r3, #2
   1679a:	647b      	str	r3, [r7, #68]	; 0x44
   1679c:	e00b      	b.n	167b6 <instance_subscr+0x90>
    } else {
        // store item
        lookup.attr = MP_QSTR___setitem__;
   1679e:	2322      	movs	r3, #34	; 0x22
   167a0:	627b      	str	r3, [r7, #36]	; 0x24
        mp_obj_class_lookup(&lookup, self->base.type);
   167a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   167a4:	681a      	ldr	r2, [r3, #0]
   167a6:	f107 0320 	add.w	r3, r7, #32
   167aa:	4611      	mov	r1, r2
   167ac:	4618      	mov	r0, r3
   167ae:	f7ff fba7 	bl	15f00 <mp_obj_class_lookup>
        meth_args = 3;
   167b2:	2303      	movs	r3, #3
   167b4:	647b      	str	r3, [r7, #68]	; 0x44
    }
    if (member[0] == MP_OBJ_SENTINEL) {
   167b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   167b8:	2b08      	cmp	r3, #8
   167ba:	d108      	bne.n	167ce <instance_subscr+0xa8>
        return mp_obj_subscr(self->subobj[0], index, value);
   167bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   167be:	691b      	ldr	r3, [r3, #16]
   167c0:	687a      	ldr	r2, [r7, #4]
   167c2:	68b9      	ldr	r1, [r7, #8]
   167c4:	4618      	mov	r0, r3
   167c6:	f7f7 fb63 	bl	de90 <mp_obj_subscr>
   167ca:	4603      	mov	r3, r0
   167cc:	e018      	b.n	16800 <instance_subscr+0xda>
    } else if (member[0] != MP_OBJ_NULL) {
   167ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   167d0:	2b00      	cmp	r3, #0
   167d2:	d014      	beq.n	167fe <instance_subscr+0xd8>
        mp_obj_t args[3] = {self_in, index, value};
   167d4:	68fb      	ldr	r3, [r7, #12]
   167d6:	617b      	str	r3, [r7, #20]
   167d8:	68bb      	ldr	r3, [r7, #8]
   167da:	61bb      	str	r3, [r7, #24]
   167dc:	687b      	ldr	r3, [r7, #4]
   167de:	61fb      	str	r3, [r7, #28]
        // TODO probably need to call mp_convert_member_lookup, and use mp_call_method_n_kw
        mp_obj_t ret = mp_call_function_n_kw(member[0], meth_args, 0, args);
   167e0:	6b78      	ldr	r0, [r7, #52]	; 0x34
   167e2:	f107 0314 	add.w	r3, r7, #20
   167e6:	2200      	movs	r2, #0
   167e8:	6c79      	ldr	r1, [r7, #68]	; 0x44
   167ea:	f7f5 fadc 	bl	bda6 <mp_call_function_n_kw>
   167ee:	63f8      	str	r0, [r7, #60]	; 0x3c
        if (value == MP_OBJ_SENTINEL) {
   167f0:	687b      	ldr	r3, [r7, #4]
   167f2:	2b08      	cmp	r3, #8
   167f4:	d101      	bne.n	167fa <instance_subscr+0xd4>
            return ret;
   167f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   167f8:	e002      	b.n	16800 <instance_subscr+0xda>
        } else {
            return mp_const_none;
   167fa:	4b03      	ldr	r3, [pc, #12]	; (16808 <instance_subscr+0xe2>)
   167fc:	e000      	b.n	16800 <instance_subscr+0xda>
        }
    } else {
        return MP_OBJ_NULL; // op not supported
   167fe:	2300      	movs	r3, #0
    }
}
   16800:	4618      	mov	r0, r3
   16802:	3748      	adds	r7, #72	; 0x48
   16804:	46bd      	mov	sp, r7
   16806:	bd80      	pop	{r7, pc}
   16808:	000212b4 	.word	0x000212b4

0001680c <mp_obj_instance_get_call>:

STATIC mp_obj_t mp_obj_instance_get_call(mp_obj_t self_in, mp_obj_t *member) {
   1680c:	b580      	push	{r7, lr}
   1680e:	b088      	sub	sp, #32
   16810:	af00      	add	r7, sp, #0
   16812:	6078      	str	r0, [r7, #4]
   16814:	6039      	str	r1, [r7, #0]
    mp_obj_instance_t *self = MP_OBJ_TO_PTR(self_in);
   16816:	687b      	ldr	r3, [r7, #4]
   16818:	61fb      	str	r3, [r7, #28]
    struct class_lookup_data lookup = {
   1681a:	69fb      	ldr	r3, [r7, #28]
   1681c:	60bb      	str	r3, [r7, #8]
   1681e:	2305      	movs	r3, #5
   16820:	60fb      	str	r3, [r7, #12]
   16822:	2310      	movs	r3, #16
   16824:	613b      	str	r3, [r7, #16]
   16826:	683b      	ldr	r3, [r7, #0]
   16828:	617b      	str	r3, [r7, #20]
   1682a:	2300      	movs	r3, #0
   1682c:	763b      	strb	r3, [r7, #24]
        .attr = MP_QSTR___call__,
        .meth_offset = offsetof(mp_obj_type_t, call),
        .dest = member,
        .is_type = false,
    };
    mp_obj_class_lookup(&lookup, self->base.type);
   1682e:	69fb      	ldr	r3, [r7, #28]
   16830:	681a      	ldr	r2, [r3, #0]
   16832:	f107 0308 	add.w	r3, r7, #8
   16836:	4611      	mov	r1, r2
   16838:	4618      	mov	r0, r3
   1683a:	f7ff fb61 	bl	15f00 <mp_obj_class_lookup>
    return member[0];
   1683e:	683b      	ldr	r3, [r7, #0]
   16840:	681b      	ldr	r3, [r3, #0]
}
   16842:	4618      	mov	r0, r3
   16844:	3720      	adds	r7, #32
   16846:	46bd      	mov	sp, r7
   16848:	bd80      	pop	{r7, pc}

0001684a <mp_obj_instance_is_callable>:

bool mp_obj_instance_is_callable(mp_obj_t self_in) {
   1684a:	b580      	push	{r7, lr}
   1684c:	b084      	sub	sp, #16
   1684e:	af00      	add	r7, sp, #0
   16850:	6078      	str	r0, [r7, #4]
    mp_obj_t member[2] = {MP_OBJ_NULL, MP_OBJ_NULL};
   16852:	2300      	movs	r3, #0
   16854:	60bb      	str	r3, [r7, #8]
   16856:	2300      	movs	r3, #0
   16858:	60fb      	str	r3, [r7, #12]
    return mp_obj_instance_get_call(self_in, member) != MP_OBJ_NULL;
   1685a:	f107 0308 	add.w	r3, r7, #8
   1685e:	4619      	mov	r1, r3
   16860:	6878      	ldr	r0, [r7, #4]
   16862:	f7ff ffd3 	bl	1680c <mp_obj_instance_get_call>
   16866:	4603      	mov	r3, r0
   16868:	2b00      	cmp	r3, #0
   1686a:	bf14      	ite	ne
   1686c:	2301      	movne	r3, #1
   1686e:	2300      	moveq	r3, #0
   16870:	b2db      	uxtb	r3, r3
}
   16872:	4618      	mov	r0, r3
   16874:	3710      	adds	r7, #16
   16876:	46bd      	mov	sp, r7
   16878:	bd80      	pop	{r7, pc}

0001687a <mp_obj_instance_call>:

mp_obj_t mp_obj_instance_call(mp_obj_t self_in, size_t n_args, size_t n_kw, const mp_obj_t *args) {
   1687a:	b580      	push	{r7, lr}
   1687c:	b08a      	sub	sp, #40	; 0x28
   1687e:	af02      	add	r7, sp, #8
   16880:	60f8      	str	r0, [r7, #12]
   16882:	60b9      	str	r1, [r7, #8]
   16884:	607a      	str	r2, [r7, #4]
   16886:	603b      	str	r3, [r7, #0]
    mp_obj_t member[2] = {MP_OBJ_NULL, MP_OBJ_NULL};
   16888:	2300      	movs	r3, #0
   1688a:	613b      	str	r3, [r7, #16]
   1688c:	2300      	movs	r3, #0
   1688e:	617b      	str	r3, [r7, #20]
    mp_obj_t call = mp_obj_instance_get_call(self_in, member);
   16890:	f107 0310 	add.w	r3, r7, #16
   16894:	4619      	mov	r1, r3
   16896:	68f8      	ldr	r0, [r7, #12]
   16898:	f7ff ffb8 	bl	1680c <mp_obj_instance_get_call>
   1689c:	61f8      	str	r0, [r7, #28]
    if (call == MP_OBJ_NULL) {
   1689e:	69fb      	ldr	r3, [r7, #28]
   168a0:	2b00      	cmp	r3, #0
   168a2:	d102      	bne.n	168aa <mp_obj_instance_call+0x30>
        if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
            mp_raise_TypeError("object not callable");
   168a4:	480e      	ldr	r0, [pc, #56]	; (168e0 <mp_obj_instance_call+0x66>)
   168a6:	f7f6 fb3d 	bl	cf24 <mp_raise_TypeError>
        } else {
            nlr_raise(mp_obj_new_exception_msg_varg(&mp_type_TypeError,
                "'%s' object is not callable", mp_obj_get_type_str(self_in)));
        }
    }
    mp_obj_instance_t *self = MP_OBJ_TO_PTR(self_in);
   168aa:	68fb      	ldr	r3, [r7, #12]
   168ac:	61bb      	str	r3, [r7, #24]
    if (call == MP_OBJ_SENTINEL) {
   168ae:	69fb      	ldr	r3, [r7, #28]
   168b0:	2b08      	cmp	r3, #8
   168b2:	d108      	bne.n	168c6 <mp_obj_instance_call+0x4c>
        return mp_call_function_n_kw(self->subobj[0], n_args, n_kw, args);
   168b4:	69bb      	ldr	r3, [r7, #24]
   168b6:	6918      	ldr	r0, [r3, #16]
   168b8:	683b      	ldr	r3, [r7, #0]
   168ba:	687a      	ldr	r2, [r7, #4]
   168bc:	68b9      	ldr	r1, [r7, #8]
   168be:	f7f5 fa72 	bl	bda6 <mp_call_function_n_kw>
   168c2:	4603      	mov	r3, r0
   168c4:	e008      	b.n	168d8 <mp_obj_instance_call+0x5e>
    }

    return mp_call_method_self_n_kw(member[0], member[1], n_args, n_kw, args);
   168c6:	6938      	ldr	r0, [r7, #16]
   168c8:	6979      	ldr	r1, [r7, #20]
   168ca:	683b      	ldr	r3, [r7, #0]
   168cc:	9300      	str	r3, [sp, #0]
   168ce:	687b      	ldr	r3, [r7, #4]
   168d0:	68ba      	ldr	r2, [r7, #8]
   168d2:	f7f7 fbff 	bl	e0d4 <mp_call_method_self_n_kw>
   168d6:	4603      	mov	r3, r0
}
   168d8:	4618      	mov	r0, r3
   168da:	3720      	adds	r7, #32
   168dc:	46bd      	mov	sp, r7
   168de:	bd80      	pop	{r7, pc}
   168e0:	00021e30 	.word	0x00021e30

000168e4 <instance_getiter>:

STATIC mp_obj_t instance_getiter(mp_obj_t self_in, mp_obj_iter_buf_t *iter_buf) {
   168e4:	b580      	push	{r7, lr}
   168e6:	b08c      	sub	sp, #48	; 0x30
   168e8:	af00      	add	r7, sp, #0
   168ea:	6078      	str	r0, [r7, #4]
   168ec:	6039      	str	r1, [r7, #0]
    mp_obj_instance_t *self = MP_OBJ_TO_PTR(self_in);
   168ee:	687b      	ldr	r3, [r7, #4]
   168f0:	62fb      	str	r3, [r7, #44]	; 0x2c
    mp_obj_t member[2] = {MP_OBJ_NULL};
   168f2:	f107 0320 	add.w	r3, r7, #32
   168f6:	2200      	movs	r2, #0
   168f8:	601a      	str	r2, [r3, #0]
   168fa:	605a      	str	r2, [r3, #4]
    struct class_lookup_data lookup = {
   168fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   168fe:	60fb      	str	r3, [r7, #12]
   16900:	2315      	movs	r3, #21
   16902:	613b      	str	r3, [r7, #16]
   16904:	2324      	movs	r3, #36	; 0x24
   16906:	617b      	str	r3, [r7, #20]
   16908:	f107 0320 	add.w	r3, r7, #32
   1690c:	61bb      	str	r3, [r7, #24]
   1690e:	2300      	movs	r3, #0
   16910:	773b      	strb	r3, [r7, #28]
        .attr = MP_QSTR___iter__,
        .meth_offset = offsetof(mp_obj_type_t, getiter),
        .dest = member,
        .is_type = false,
    };
    mp_obj_class_lookup(&lookup, self->base.type);
   16912:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   16914:	681a      	ldr	r2, [r3, #0]
   16916:	f107 030c 	add.w	r3, r7, #12
   1691a:	4611      	mov	r1, r2
   1691c:	4618      	mov	r0, r3
   1691e:	f7ff faef 	bl	15f00 <mp_obj_class_lookup>
    if (member[0] == MP_OBJ_NULL) {
   16922:	6a3b      	ldr	r3, [r7, #32]
   16924:	2b00      	cmp	r3, #0
   16926:	d101      	bne.n	1692c <instance_getiter+0x48>
        return MP_OBJ_NULL;
   16928:	2300      	movs	r3, #0
   1692a:	e019      	b.n	16960 <instance_getiter+0x7c>
    } else if (member[0] == MP_OBJ_SENTINEL) {
   1692c:	6a3b      	ldr	r3, [r7, #32]
   1692e:	2b08      	cmp	r3, #8
   16930:	d10e      	bne.n	16950 <instance_getiter+0x6c>
        mp_obj_type_t *type = mp_obj_get_type(self->subobj[0]);
   16932:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   16934:	691b      	ldr	r3, [r3, #16]
   16936:	4618      	mov	r0, r3
   16938:	f7f6 ff0a 	bl	d750 <mp_obj_get_type>
   1693c:	62b8      	str	r0, [r7, #40]	; 0x28
        return type->getiter(self->subobj[0], iter_buf);
   1693e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   16940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   16942:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   16944:	6912      	ldr	r2, [r2, #16]
   16946:	6839      	ldr	r1, [r7, #0]
   16948:	4610      	mov	r0, r2
   1694a:	4798      	blx	r3
   1694c:	4603      	mov	r3, r0
   1694e:	e007      	b.n	16960 <instance_getiter+0x7c>
    } else {
        return mp_call_method_n_kw(0, 0, member);
   16950:	f107 0320 	add.w	r3, r7, #32
   16954:	461a      	mov	r2, r3
   16956:	2100      	movs	r1, #0
   16958:	2000      	movs	r0, #0
   1695a:	f7f5 fa45 	bl	bde8 <mp_call_method_n_kw>
   1695e:	4603      	mov	r3, r0
    }
}
   16960:	4618      	mov	r0, r3
   16962:	3730      	adds	r7, #48	; 0x30
   16964:	46bd      	mov	sp, r7
   16966:	bd80      	pop	{r7, pc}

00016968 <instance_get_buffer>:

STATIC mp_int_t instance_get_buffer(mp_obj_t self_in, mp_buffer_info_t *bufinfo, mp_uint_t flags) {
   16968:	b580      	push	{r7, lr}
   1696a:	b08e      	sub	sp, #56	; 0x38
   1696c:	af00      	add	r7, sp, #0
   1696e:	60f8      	str	r0, [r7, #12]
   16970:	60b9      	str	r1, [r7, #8]
   16972:	607a      	str	r2, [r7, #4]
    mp_obj_instance_t *self = MP_OBJ_TO_PTR(self_in);
   16974:	68fb      	ldr	r3, [r7, #12]
   16976:	637b      	str	r3, [r7, #52]	; 0x34
    mp_obj_t member[2] = {MP_OBJ_NULL};
   16978:	f107 0328 	add.w	r3, r7, #40	; 0x28
   1697c:	2200      	movs	r2, #0
   1697e:	601a      	str	r2, [r3, #0]
   16980:	605a      	str	r2, [r3, #4]
    struct class_lookup_data lookup = {
   16982:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   16984:	617b      	str	r3, [r7, #20]
   16986:	2301      	movs	r3, #1
   16988:	61bb      	str	r3, [r7, #24]
   1698a:	232c      	movs	r3, #44	; 0x2c
   1698c:	61fb      	str	r3, [r7, #28]
   1698e:	f107 0328 	add.w	r3, r7, #40	; 0x28
   16992:	623b      	str	r3, [r7, #32]
   16994:	2300      	movs	r3, #0
   16996:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
        .attr = MP_QSTR_, // don't actually look for a method
        .meth_offset = offsetof(mp_obj_type_t, buffer_p.get_buffer),
        .dest = member,
        .is_type = false,
    };
    mp_obj_class_lookup(&lookup, self->base.type);
   1699a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1699c:	681a      	ldr	r2, [r3, #0]
   1699e:	f107 0314 	add.w	r3, r7, #20
   169a2:	4611      	mov	r1, r2
   169a4:	4618      	mov	r0, r3
   169a6:	f7ff faab 	bl	15f00 <mp_obj_class_lookup>
    if (member[0] == MP_OBJ_SENTINEL) {
   169aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
   169ac:	2b08      	cmp	r3, #8
   169ae:	d10e      	bne.n	169ce <instance_get_buffer+0x66>
        mp_obj_type_t *type = mp_obj_get_type(self->subobj[0]);
   169b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   169b2:	691b      	ldr	r3, [r3, #16]
   169b4:	4618      	mov	r0, r3
   169b6:	f7f6 fecb 	bl	d750 <mp_obj_get_type>
   169ba:	6338      	str	r0, [r7, #48]	; 0x30
        return type->buffer_p.get_buffer(self->subobj[0], bufinfo, flags);
   169bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   169be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   169c0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   169c2:	6910      	ldr	r0, [r2, #16]
   169c4:	687a      	ldr	r2, [r7, #4]
   169c6:	68b9      	ldr	r1, [r7, #8]
   169c8:	4798      	blx	r3
   169ca:	4603      	mov	r3, r0
   169cc:	e000      	b.n	169d0 <instance_get_buffer+0x68>
    } else {
        return 1; // object does not support buffer protocol
   169ce:	2301      	movs	r3, #1
    }
}
   169d0:	4618      	mov	r0, r3
   169d2:	3738      	adds	r7, #56	; 0x38
   169d4:	46bd      	mov	sp, r7
   169d6:	bd80      	pop	{r7, pc}

000169d8 <type_print>:
// type object
//  - the struct is mp_obj_type_t and is defined in obj.h so const types can be made
//  - there is a constant mp_obj_type_t (called mp_type_type) for the 'type' object
//  - creating a new class (a new type) creates a new mp_obj_type_t

STATIC void type_print(const mp_print_t *print, mp_obj_t self_in, mp_print_kind_t kind) {
   169d8:	b580      	push	{r7, lr}
   169da:	b086      	sub	sp, #24
   169dc:	af00      	add	r7, sp, #0
   169de:	60f8      	str	r0, [r7, #12]
   169e0:	60b9      	str	r1, [r7, #8]
   169e2:	607a      	str	r2, [r7, #4]
    (void)kind;
    mp_obj_type_t *self = MP_OBJ_TO_PTR(self_in);
   169e4:	68bb      	ldr	r3, [r7, #8]
   169e6:	617b      	str	r3, [r7, #20]
    mp_printf(print, "<class '%q'>", self->name);
   169e8:	697b      	ldr	r3, [r7, #20]
   169ea:	685b      	ldr	r3, [r3, #4]
   169ec:	461a      	mov	r2, r3
   169ee:	4904      	ldr	r1, [pc, #16]	; (16a00 <type_print+0x28>)
   169f0:	68f8      	ldr	r0, [r7, #12]
   169f2:	f7eb fa3f 	bl	1e74 <mp_printf>
}
   169f6:	bf00      	nop
   169f8:	3718      	adds	r7, #24
   169fa:	46bd      	mov	sp, r7
   169fc:	bd80      	pop	{r7, pc}
   169fe:	bf00      	nop
   16a00:	00021e44 	.word	0x00021e44

00016a04 <type_make_new>:

STATIC mp_obj_t type_make_new(const mp_obj_type_t *type_in, size_t n_args, size_t n_kw, const mp_obj_t *args) {
   16a04:	b580      	push	{r7, lr}
   16a06:	b086      	sub	sp, #24
   16a08:	af02      	add	r7, sp, #8
   16a0a:	60f8      	str	r0, [r7, #12]
   16a0c:	60b9      	str	r1, [r7, #8]
   16a0e:	607a      	str	r2, [r7, #4]
   16a10:	603b      	str	r3, [r7, #0]
    (void)type_in;

    mp_arg_check_num(n_args, n_kw, 1, 3, false);
   16a12:	2300      	movs	r3, #0
   16a14:	9300      	str	r3, [sp, #0]
   16a16:	2303      	movs	r3, #3
   16a18:	2201      	movs	r2, #1
   16a1a:	6879      	ldr	r1, [r7, #4]
   16a1c:	68b8      	ldr	r0, [r7, #8]
   16a1e:	f7f6 faa7 	bl	cf70 <mp_arg_check_num>

    switch (n_args) {
   16a22:	68bb      	ldr	r3, [r7, #8]
   16a24:	2b01      	cmp	r3, #1
   16a26:	d002      	beq.n	16a2e <type_make_new+0x2a>
   16a28:	2b03      	cmp	r3, #3
   16a2a:	d007      	beq.n	16a3c <type_make_new+0x38>
   16a2c:	e016      	b.n	16a5c <type_make_new+0x58>
        case 1:
            return MP_OBJ_FROM_PTR(mp_obj_get_type(args[0]));
   16a2e:	683b      	ldr	r3, [r7, #0]
   16a30:	681b      	ldr	r3, [r3, #0]
   16a32:	4618      	mov	r0, r3
   16a34:	f7f6 fe8c 	bl	d750 <mp_obj_get_type>
   16a38:	4603      	mov	r3, r0
   16a3a:	e012      	b.n	16a62 <type_make_new+0x5e>

        case 3:
            // args[0] = name
            // args[1] = bases tuple
            // args[2] = locals dict
            return mp_obj_new_type(mp_obj_str_get_qstr(args[0]), args[1], args[2]);
   16a3c:	683b      	ldr	r3, [r7, #0]
   16a3e:	681b      	ldr	r3, [r3, #0]
   16a40:	4618      	mov	r0, r3
   16a42:	f7fe fcab 	bl	1539c <mp_obj_str_get_qstr>
   16a46:	683b      	ldr	r3, [r7, #0]
   16a48:	3304      	adds	r3, #4
   16a4a:	6819      	ldr	r1, [r3, #0]
   16a4c:	683b      	ldr	r3, [r7, #0]
   16a4e:	3308      	adds	r3, #8
   16a50:	681b      	ldr	r3, [r3, #0]
   16a52:	461a      	mov	r2, r3
   16a54:	f000 f8b0 	bl	16bb8 <mp_obj_new_type>
   16a58:	4603      	mov	r3, r0
   16a5a:	e002      	b.n	16a62 <type_make_new+0x5e>

        default:
            mp_raise_TypeError("type takes 1 or 3 arguments");
   16a5c:	4803      	ldr	r0, [pc, #12]	; (16a6c <type_make_new+0x68>)
   16a5e:	f7f6 fa61 	bl	cf24 <mp_raise_TypeError>
    }
}
   16a62:	4618      	mov	r0, r3
   16a64:	3710      	adds	r7, #16
   16a66:	46bd      	mov	sp, r7
   16a68:	bd80      	pop	{r7, pc}
   16a6a:	bf00      	nop
   16a6c:	00021e54 	.word	0x00021e54

00016a70 <type_call>:

STATIC mp_obj_t type_call(mp_obj_t self_in, size_t n_args, size_t n_kw, const mp_obj_t *args) {
   16a70:	b590      	push	{r4, r7, lr}
   16a72:	b087      	sub	sp, #28
   16a74:	af00      	add	r7, sp, #0
   16a76:	60f8      	str	r0, [r7, #12]
   16a78:	60b9      	str	r1, [r7, #8]
   16a7a:	607a      	str	r2, [r7, #4]
   16a7c:	603b      	str	r3, [r7, #0]
    // instantiate an instance of a class

    mp_obj_type_t *self = MP_OBJ_TO_PTR(self_in);
   16a7e:	68fb      	ldr	r3, [r7, #12]
   16a80:	617b      	str	r3, [r7, #20]

    if (self->make_new == NULL) {
   16a82:	697b      	ldr	r3, [r7, #20]
   16a84:	68db      	ldr	r3, [r3, #12]
   16a86:	2b00      	cmp	r3, #0
   16a88:	d102      	bne.n	16a90 <type_call+0x20>
        if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
            mp_raise_TypeError("cannot create instance");
   16a8a:	4808      	ldr	r0, [pc, #32]	; (16aac <type_call+0x3c>)
   16a8c:	f7f6 fa4a 	bl	cf24 <mp_raise_TypeError>
                "cannot create '%q' instances", self->name));
        }
    }

    // make new instance
    mp_obj_t o = self->make_new(self, n_args, n_kw, args);
   16a90:	697b      	ldr	r3, [r7, #20]
   16a92:	68dc      	ldr	r4, [r3, #12]
   16a94:	683b      	ldr	r3, [r7, #0]
   16a96:	687a      	ldr	r2, [r7, #4]
   16a98:	68b9      	ldr	r1, [r7, #8]
   16a9a:	6978      	ldr	r0, [r7, #20]
   16a9c:	47a0      	blx	r4
   16a9e:	6138      	str	r0, [r7, #16]

    // return new instance
    return o;
   16aa0:	693b      	ldr	r3, [r7, #16]
}
   16aa2:	4618      	mov	r0, r3
   16aa4:	371c      	adds	r7, #28
   16aa6:	46bd      	mov	sp, r7
   16aa8:	bd90      	pop	{r4, r7, pc}
   16aaa:	bf00      	nop
   16aac:	00021e70 	.word	0x00021e70

00016ab0 <type_attr>:

STATIC void type_attr(mp_obj_t self_in, qstr attr, mp_obj_t *dest) {
   16ab0:	b580      	push	{r7, lr}
   16ab2:	b08e      	sub	sp, #56	; 0x38
   16ab4:	af00      	add	r7, sp, #0
   16ab6:	60f8      	str	r0, [r7, #12]
   16ab8:	60b9      	str	r1, [r7, #8]
   16aba:	607a      	str	r2, [r7, #4]
    assert(MP_OBJ_IS_TYPE(self_in, &mp_type_type));
   16abc:	68f8      	ldr	r0, [r7, #12]
   16abe:	f7ff f93f 	bl	15d40 <MP_OBJ_IS_OBJ>
   16ac2:	4603      	mov	r3, r0
   16ac4:	2b00      	cmp	r3, #0
   16ac6:	d004      	beq.n	16ad2 <type_attr+0x22>
   16ac8:	68fb      	ldr	r3, [r7, #12]
   16aca:	681b      	ldr	r3, [r3, #0]
   16acc:	4a34      	ldr	r2, [pc, #208]	; (16ba0 <type_attr+0xf0>)
   16ace:	4293      	cmp	r3, r2
   16ad0:	d006      	beq.n	16ae0 <type_attr+0x30>
   16ad2:	4b34      	ldr	r3, [pc, #208]	; (16ba4 <type_attr+0xf4>)
   16ad4:	4a34      	ldr	r2, [pc, #208]	; (16ba8 <type_attr+0xf8>)
   16ad6:	f240 31b6 	movw	r1, #950	; 0x3b6
   16ada:	4834      	ldr	r0, [pc, #208]	; (16bac <type_attr+0xfc>)
   16adc:	f004 fb6e 	bl	1b1bc <__assert_func>
    mp_obj_type_t *self = MP_OBJ_TO_PTR(self_in);
   16ae0:	68fb      	ldr	r3, [r7, #12]
   16ae2:	637b      	str	r3, [r7, #52]	; 0x34

    if (dest[0] == MP_OBJ_NULL) {
   16ae4:	687b      	ldr	r3, [r7, #4]
   16ae6:	681b      	ldr	r3, [r3, #0]
   16ae8:	2b00      	cmp	r3, #0
   16aea:	d111      	bne.n	16b10 <type_attr+0x60>
        if (attr == MP_QSTR___name__) {
            dest[0] = MP_OBJ_NEW_QSTR(self->name);
            return;
        }
        #endif
        struct class_lookup_data lookup = {
   16aec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   16aee:	617b      	str	r3, [r7, #20]
   16af0:	68bb      	ldr	r3, [r7, #8]
   16af2:	61bb      	str	r3, [r7, #24]
   16af4:	2300      	movs	r3, #0
   16af6:	61fb      	str	r3, [r7, #28]
   16af8:	687b      	ldr	r3, [r7, #4]
   16afa:	623b      	str	r3, [r7, #32]
   16afc:	2301      	movs	r3, #1
   16afe:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
            .attr = attr,
            .meth_offset = 0,
            .dest = dest,
            .is_type = true,
        };
        mp_obj_class_lookup(&lookup, self);
   16b02:	f107 0314 	add.w	r3, r7, #20
   16b06:	6b79      	ldr	r1, [r7, #52]	; 0x34
   16b08:	4618      	mov	r0, r3
   16b0a:	f7ff f9f9 	bl	15f00 <mp_obj_class_lookup>
   16b0e:	e044      	b.n	16b9a <type_attr+0xea>
    } else {
        // delete/store attribute

        // TODO CPython allows STORE_ATTR to a class, but is this the correct implementation?

        if (self->locals_dict != NULL) {
   16b10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   16b12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   16b14:	2b00      	cmp	r3, #0
   16b16:	d040      	beq.n	16b9a <type_attr+0xea>
            assert(self->locals_dict->base.type == &mp_type_dict); // MicroPython restriction, for now
   16b18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   16b1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   16b1c:	681b      	ldr	r3, [r3, #0]
   16b1e:	4a24      	ldr	r2, [pc, #144]	; (16bb0 <type_attr+0x100>)
   16b20:	4293      	cmp	r3, r2
   16b22:	d006      	beq.n	16b32 <type_attr+0x82>
   16b24:	4b23      	ldr	r3, [pc, #140]	; (16bb4 <type_attr+0x104>)
   16b26:	4a20      	ldr	r2, [pc, #128]	; (16ba8 <type_attr+0xf8>)
   16b28:	f240 31cf 	movw	r1, #975	; 0x3cf
   16b2c:	481f      	ldr	r0, [pc, #124]	; (16bac <type_attr+0xfc>)
   16b2e:	f004 fb45 	bl	1b1bc <__assert_func>
            mp_map_t *locals_map = &self->locals_dict->map;
   16b32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   16b34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   16b36:	3304      	adds	r3, #4
   16b38:	633b      	str	r3, [r7, #48]	; 0x30
            if (locals_map->is_fixed) {
   16b3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   16b3c:	781b      	ldrb	r3, [r3, #0]
   16b3e:	f003 0302 	and.w	r3, r3, #2
   16b42:	b2db      	uxtb	r3, r3
   16b44:	2b00      	cmp	r3, #0
   16b46:	d127      	bne.n	16b98 <type_attr+0xe8>
                // can't apply delete/store to a fixed map
                return;
            }
            if (dest[1] == MP_OBJ_NULL) {
   16b48:	687b      	ldr	r3, [r7, #4]
   16b4a:	3304      	adds	r3, #4
   16b4c:	681b      	ldr	r3, [r3, #0]
   16b4e:	2b00      	cmp	r3, #0
   16b50:	d110      	bne.n	16b74 <type_attr+0xc4>
                // delete attribute
                mp_map_elem_t *elem = mp_map_lookup(locals_map, MP_OBJ_NEW_QSTR(attr), MP_MAP_LOOKUP_REMOVE_IF_FOUND);
   16b52:	68bb      	ldr	r3, [r7, #8]
   16b54:	009b      	lsls	r3, r3, #2
   16b56:	f043 0302 	orr.w	r3, r3, #2
   16b5a:	2202      	movs	r2, #2
   16b5c:	4619      	mov	r1, r3
   16b5e:	6b38      	ldr	r0, [r7, #48]	; 0x30
   16b60:	f7f6 fc4c 	bl	d3fc <mp_map_lookup>
   16b64:	62f8      	str	r0, [r7, #44]	; 0x2c
                if (elem != NULL) {
   16b66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   16b68:	2b00      	cmp	r3, #0
   16b6a:	d016      	beq.n	16b9a <type_attr+0xea>
                    dest[0] = MP_OBJ_NULL; // indicate success
   16b6c:	687b      	ldr	r3, [r7, #4]
   16b6e:	2200      	movs	r2, #0
   16b70:	601a      	str	r2, [r3, #0]
   16b72:	e012      	b.n	16b9a <type_attr+0xea>
                }
            } else {
                // store attribute
                mp_map_elem_t *elem = mp_map_lookup(locals_map, MP_OBJ_NEW_QSTR(attr), MP_MAP_LOOKUP_ADD_IF_NOT_FOUND);
   16b74:	68bb      	ldr	r3, [r7, #8]
   16b76:	009b      	lsls	r3, r3, #2
   16b78:	f043 0302 	orr.w	r3, r3, #2
   16b7c:	2201      	movs	r2, #1
   16b7e:	4619      	mov	r1, r3
   16b80:	6b38      	ldr	r0, [r7, #48]	; 0x30
   16b82:	f7f6 fc3b 	bl	d3fc <mp_map_lookup>
   16b86:	62b8      	str	r0, [r7, #40]	; 0x28
                elem->value = dest[1];
   16b88:	687b      	ldr	r3, [r7, #4]
   16b8a:	685a      	ldr	r2, [r3, #4]
   16b8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   16b8e:	605a      	str	r2, [r3, #4]
                dest[0] = MP_OBJ_NULL; // indicate success
   16b90:	687b      	ldr	r3, [r7, #4]
   16b92:	2200      	movs	r2, #0
   16b94:	601a      	str	r2, [r3, #0]
   16b96:	e000      	b.n	16b9a <type_attr+0xea>
                return;
   16b98:	bf00      	nop
            }
        }
    }
}
   16b9a:	3738      	adds	r7, #56	; 0x38
   16b9c:	46bd      	mov	sp, r7
   16b9e:	bd80      	pop	{r7, pc}
   16ba0:	00021ee0 	.word	0x00021ee0
   16ba4:	00021e88 	.word	0x00021e88
   16ba8:	000221e0 	.word	0x000221e0
   16bac:	00021cd0 	.word	0x00021cd0
   16bb0:	0001fe68 	.word	0x0001fe68
   16bb4:	00021eb0 	.word	0x00021eb0

00016bb8 <mp_obj_new_type>:
    .call = type_call,
    .unary_op = mp_generic_unary_op,
    .attr = type_attr,
};

mp_obj_t mp_obj_new_type(qstr name, mp_obj_t bases_tuple, mp_obj_t locals_dict) {
   16bb8:	b580      	push	{r7, lr}
   16bba:	b08e      	sub	sp, #56	; 0x38
   16bbc:	af00      	add	r7, sp, #0
   16bbe:	60f8      	str	r0, [r7, #12]
   16bc0:	60b9      	str	r1, [r7, #8]
   16bc2:	607a      	str	r2, [r7, #4]
    // Verify input objects have expected type
    if (!MP_OBJ_IS_TYPE(bases_tuple, &mp_type_tuple)) {
   16bc4:	68b8      	ldr	r0, [r7, #8]
   16bc6:	f7ff f8bb 	bl	15d40 <MP_OBJ_IS_OBJ>
   16bca:	4603      	mov	r3, r0
   16bcc:	f083 0301 	eor.w	r3, r3, #1
   16bd0:	b2db      	uxtb	r3, r3
   16bd2:	2b00      	cmp	r3, #0
   16bd4:	d104      	bne.n	16be0 <mp_obj_new_type+0x28>
   16bd6:	68bb      	ldr	r3, [r7, #8]
   16bd8:	681b      	ldr	r3, [r3, #0]
   16bda:	4a61      	ldr	r2, [pc, #388]	; (16d60 <mp_obj_new_type+0x1a8>)
   16bdc:	4293      	cmp	r3, r2
   16bde:	d002      	beq.n	16be6 <mp_obj_new_type+0x2e>
        mp_raise_TypeError(NULL);
   16be0:	2000      	movs	r0, #0
   16be2:	f7f6 f99f 	bl	cf24 <mp_raise_TypeError>
    }
    if (!MP_OBJ_IS_TYPE(locals_dict, &mp_type_dict)) {
   16be6:	6878      	ldr	r0, [r7, #4]
   16be8:	f7ff f8aa 	bl	15d40 <MP_OBJ_IS_OBJ>
   16bec:	4603      	mov	r3, r0
   16bee:	f083 0301 	eor.w	r3, r3, #1
   16bf2:	b2db      	uxtb	r3, r3
   16bf4:	2b00      	cmp	r3, #0
   16bf6:	d104      	bne.n	16c02 <mp_obj_new_type+0x4a>
   16bf8:	687b      	ldr	r3, [r7, #4]
   16bfa:	681b      	ldr	r3, [r3, #0]
   16bfc:	4a59      	ldr	r2, [pc, #356]	; (16d64 <mp_obj_new_type+0x1ac>)
   16bfe:	4293      	cmp	r3, r2
   16c00:	d002      	beq.n	16c08 <mp_obj_new_type+0x50>
        mp_raise_TypeError(NULL);
   16c02:	2000      	movs	r0, #0
   16c04:	f7f6 f98e 	bl	cf24 <mp_raise_TypeError>
    // TODO might need to make a copy of locals_dict; at least that's how CPython does it

    // Basic validation of base classes
    size_t bases_len;
    mp_obj_t *bases_items;
    mp_obj_tuple_get(bases_tuple, &bases_len, &bases_items);
   16c08:	f107 0218 	add.w	r2, r7, #24
   16c0c:	f107 031c 	add.w	r3, r7, #28
   16c10:	4619      	mov	r1, r3
   16c12:	68b8      	ldr	r0, [r7, #8]
   16c14:	f7fe fffc 	bl	15c10 <mp_obj_tuple_get>
    for (size_t i = 0; i < bases_len; i++) {
   16c18:	2300      	movs	r3, #0
   16c1a:	637b      	str	r3, [r7, #52]	; 0x34
   16c1c:	e029      	b.n	16c72 <mp_obj_new_type+0xba>
        if (!MP_OBJ_IS_TYPE(bases_items[i], &mp_type_type)) {
   16c1e:	69ba      	ldr	r2, [r7, #24]
   16c20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   16c22:	009b      	lsls	r3, r3, #2
   16c24:	4413      	add	r3, r2
   16c26:	681b      	ldr	r3, [r3, #0]
   16c28:	4618      	mov	r0, r3
   16c2a:	f7ff f889 	bl	15d40 <MP_OBJ_IS_OBJ>
   16c2e:	4603      	mov	r3, r0
   16c30:	f083 0301 	eor.w	r3, r3, #1
   16c34:	b2db      	uxtb	r3, r3
   16c36:	2b00      	cmp	r3, #0
   16c38:	d108      	bne.n	16c4c <mp_obj_new_type+0x94>
   16c3a:	69ba      	ldr	r2, [r7, #24]
   16c3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   16c3e:	009b      	lsls	r3, r3, #2
   16c40:	4413      	add	r3, r2
   16c42:	681b      	ldr	r3, [r3, #0]
   16c44:	681b      	ldr	r3, [r3, #0]
   16c46:	4a48      	ldr	r2, [pc, #288]	; (16d68 <mp_obj_new_type+0x1b0>)
   16c48:	4293      	cmp	r3, r2
   16c4a:	d002      	beq.n	16c52 <mp_obj_new_type+0x9a>
            mp_raise_TypeError(NULL);
   16c4c:	2000      	movs	r0, #0
   16c4e:	f7f6 f969 	bl	cf24 <mp_raise_TypeError>
        }
        mp_obj_type_t *t = MP_OBJ_TO_PTR(bases_items[i]);
   16c52:	69ba      	ldr	r2, [r7, #24]
   16c54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   16c56:	009b      	lsls	r3, r3, #2
   16c58:	4413      	add	r3, r2
   16c5a:	681b      	ldr	r3, [r3, #0]
   16c5c:	633b      	str	r3, [r7, #48]	; 0x30
        // TODO: Verify with CPy, tested on function type
        if (t->make_new == NULL) {
   16c5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   16c60:	68db      	ldr	r3, [r3, #12]
   16c62:	2b00      	cmp	r3, #0
   16c64:	d102      	bne.n	16c6c <mp_obj_new_type+0xb4>
            if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
                mp_raise_TypeError("type is not an acceptable base type");
   16c66:	4841      	ldr	r0, [pc, #260]	; (16d6c <mp_obj_new_type+0x1b4>)
   16c68:	f7f6 f95c 	bl	cf24 <mp_raise_TypeError>
    for (size_t i = 0; i < bases_len; i++) {
   16c6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   16c6e:	3301      	adds	r3, #1
   16c70:	637b      	str	r3, [r7, #52]	; 0x34
   16c72:	69fb      	ldr	r3, [r7, #28]
   16c74:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   16c76:	429a      	cmp	r2, r3
   16c78:	d3d1      	bcc.n	16c1e <mp_obj_new_type+0x66>
                    "type '%q' is not an acceptable base type", t->name));
            }
        }
    }

    mp_obj_type_t *o = m_new0(mp_obj_type_t, 1);
   16c7a:	203c      	movs	r0, #60	; 0x3c
   16c7c:	f7e9 fb73 	bl	366 <m_malloc0>
   16c80:	62f8      	str	r0, [r7, #44]	; 0x2c
    o->base.type = &mp_type_type;
   16c82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   16c84:	4a38      	ldr	r2, [pc, #224]	; (16d68 <mp_obj_new_type+0x1b0>)
   16c86:	601a      	str	r2, [r3, #0]
    o->name = name;
   16c88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   16c8a:	68fa      	ldr	r2, [r7, #12]
   16c8c:	605a      	str	r2, [r3, #4]
    o->print = instance_print;
   16c8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   16c90:	4a37      	ldr	r2, [pc, #220]	; (16d70 <mp_obj_new_type+0x1b8>)
   16c92:	609a      	str	r2, [r3, #8]
    o->make_new = mp_obj_instance_make_new;
   16c94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   16c96:	4a37      	ldr	r2, [pc, #220]	; (16d74 <mp_obj_new_type+0x1bc>)
   16c98:	60da      	str	r2, [r3, #12]
    o->call = mp_obj_instance_call;
   16c9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   16c9c:	4a36      	ldr	r2, [pc, #216]	; (16d78 <mp_obj_new_type+0x1c0>)
   16c9e:	611a      	str	r2, [r3, #16]
    o->unary_op = instance_unary_op;
   16ca0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   16ca2:	4a36      	ldr	r2, [pc, #216]	; (16d7c <mp_obj_new_type+0x1c4>)
   16ca4:	615a      	str	r2, [r3, #20]
    o->binary_op = instance_binary_op;
   16ca6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   16ca8:	4a35      	ldr	r2, [pc, #212]	; (16d80 <mp_obj_new_type+0x1c8>)
   16caa:	619a      	str	r2, [r3, #24]
    o->attr = mp_obj_instance_attr;
   16cac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   16cae:	4a35      	ldr	r2, [pc, #212]	; (16d84 <mp_obj_new_type+0x1cc>)
   16cb0:	61da      	str	r2, [r3, #28]
    o->subscr = instance_subscr;
   16cb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   16cb4:	4a34      	ldr	r2, [pc, #208]	; (16d88 <mp_obj_new_type+0x1d0>)
   16cb6:	621a      	str	r2, [r3, #32]
    o->getiter = instance_getiter;
   16cb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   16cba:	4a34      	ldr	r2, [pc, #208]	; (16d8c <mp_obj_new_type+0x1d4>)
   16cbc:	625a      	str	r2, [r3, #36]	; 0x24
    //o->iternext = ; not implemented
    o->buffer_p.get_buffer = instance_get_buffer;
   16cbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   16cc0:	4a33      	ldr	r2, [pc, #204]	; (16d90 <mp_obj_new_type+0x1d8>)
   16cc2:	62da      	str	r2, [r3, #44]	; 0x2c

    if (bases_len > 0) {
   16cc4:	69fb      	ldr	r3, [r7, #28]
   16cc6:	2b00      	cmp	r3, #0
   16cc8:	d00f      	beq.n	16cea <mp_obj_new_type+0x132>
        // Inherit protocol from a base class. This allows to define an
        // abstract base class which would translate C-level protocol to
        // Python method calls, and any subclass inheriting from it will
        // support this feature.
        o->protocol = ((mp_obj_type_t*)MP_OBJ_TO_PTR(bases_items[0]))->protocol;
   16cca:	69bb      	ldr	r3, [r7, #24]
   16ccc:	681b      	ldr	r3, [r3, #0]
   16cce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   16cd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   16cd2:	631a      	str	r2, [r3, #48]	; 0x30

        if (bases_len >= 2) {
   16cd4:	69fb      	ldr	r3, [r7, #28]
   16cd6:	2b01      	cmp	r3, #1
   16cd8:	d903      	bls.n	16ce2 <mp_obj_new_type+0x12a>
            #if MICROPY_MULTIPLE_INHERITANCE
            o->parent = MP_OBJ_TO_PTR(bases_tuple);
   16cda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   16cdc:	68ba      	ldr	r2, [r7, #8]
   16cde:	635a      	str	r2, [r3, #52]	; 0x34
   16ce0:	e003      	b.n	16cea <mp_obj_new_type+0x132>
            #else
            mp_raise_NotImplementedError("multiple inheritance not supported");
            #endif
        } else {
            o->parent = MP_OBJ_TO_PTR(bases_items[0]);
   16ce2:	69bb      	ldr	r3, [r7, #24]
   16ce4:	681a      	ldr	r2, [r3, #0]
   16ce6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   16ce8:	635a      	str	r2, [r3, #52]	; 0x34
        }
    }

    o->locals_dict = MP_OBJ_TO_PTR(locals_dict);
   16cea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   16cec:	687a      	ldr	r2, [r7, #4]
   16cee:	639a      	str	r2, [r3, #56]	; 0x38

    const mp_obj_type_t *native_base;
    size_t num_native_bases = instance_count_native_bases(o, &native_base);
   16cf0:	f107 0314 	add.w	r3, r7, #20
   16cf4:	4619      	mov	r1, r3
   16cf6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   16cf8:	f7ff f834 	bl	15d64 <instance_count_native_bases>
   16cfc:	4603      	mov	r3, r0
   16cfe:	62bb      	str	r3, [r7, #40]	; 0x28
    if (num_native_bases > 1) {
   16d00:	6abb      	ldr	r3, [r7, #40]	; 0x28
   16d02:	2b01      	cmp	r3, #1
   16d04:	d902      	bls.n	16d0c <mp_obj_new_type+0x154>
        mp_raise_TypeError("multiple bases have instance lay-out conflict");
   16d06:	4823      	ldr	r0, [pc, #140]	; (16d94 <mp_obj_new_type+0x1dc>)
   16d08:	f7f6 f90c 	bl	cf24 <mp_raise_TypeError>
    }

    mp_map_t *locals_map = &o->locals_dict->map;
   16d0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   16d0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   16d10:	3304      	adds	r3, #4
   16d12:	627b      	str	r3, [r7, #36]	; 0x24
    mp_map_elem_t *elem = mp_map_lookup(locals_map, MP_OBJ_NEW_QSTR(MP_QSTR___new__), MP_MAP_LOOKUP);
   16d14:	2200      	movs	r2, #0
   16d16:	2172      	movs	r1, #114	; 0x72
   16d18:	6a78      	ldr	r0, [r7, #36]	; 0x24
   16d1a:	f7f6 fb6f 	bl	d3fc <mp_map_lookup>
   16d1e:	6238      	str	r0, [r7, #32]
    if (elem != NULL) {
   16d20:	6a3b      	ldr	r3, [r7, #32]
   16d22:	2b00      	cmp	r3, #0
   16d24:	d017      	beq.n	16d56 <mp_obj_new_type+0x19e>
        // __new__ slot exists; check if it is a function
        if (MP_OBJ_IS_FUN(elem->value)) {
   16d26:	6a3b      	ldr	r3, [r7, #32]
   16d28:	685b      	ldr	r3, [r3, #4]
   16d2a:	4618      	mov	r0, r3
   16d2c:	f7ff f808 	bl	15d40 <MP_OBJ_IS_OBJ>
   16d30:	4603      	mov	r3, r0
   16d32:	2b00      	cmp	r3, #0
   16d34:	d00f      	beq.n	16d56 <mp_obj_new_type+0x19e>
   16d36:	6a3b      	ldr	r3, [r7, #32]
   16d38:	685b      	ldr	r3, [r3, #4]
   16d3a:	681b      	ldr	r3, [r3, #0]
   16d3c:	685b      	ldr	r3, [r3, #4]
   16d3e:	2b74      	cmp	r3, #116	; 0x74
   16d40:	d109      	bne.n	16d56 <mp_obj_new_type+0x19e>
            // __new__ is a function, wrap it in a staticmethod decorator
            elem->value = static_class_method_make_new(&mp_type_staticmethod, 1, 0, &elem->value);
   16d42:	6a3b      	ldr	r3, [r7, #32]
   16d44:	3304      	adds	r3, #4
   16d46:	2200      	movs	r2, #0
   16d48:	2101      	movs	r1, #1
   16d4a:	4813      	ldr	r0, [pc, #76]	; (16d98 <mp_obj_new_type+0x1e0>)
   16d4c:	f000 fa93 	bl	17276 <static_class_method_make_new>
   16d50:	4602      	mov	r2, r0
   16d52:	6a3b      	ldr	r3, [r7, #32]
   16d54:	605a      	str	r2, [r3, #4]
        }
    }

    return MP_OBJ_FROM_PTR(o);
   16d56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
   16d58:	4618      	mov	r0, r3
   16d5a:	3738      	adds	r7, #56	; 0x38
   16d5c:	46bd      	mov	sp, r7
   16d5e:	bd80      	pop	{r7, pc}
   16d60:	00021be8 	.word	0x00021be8
   16d64:	0001fe68 	.word	0x0001fe68
   16d68:	00021ee0 	.word	0x00021ee0
   16d6c:	00021f1c 	.word	0x00021f1c
   16d70:	00016159 	.word	0x00016159
   16d74:	00016265 	.word	0x00016265
   16d78:	0001687b 	.word	0x0001687b
   16d7c:	00016441 	.word	0x00016441
   16d80:	00016505 	.word	0x00016505
   16d84:	000166e3 	.word	0x000166e3
   16d88:	00016727 	.word	0x00016727
   16d8c:	000168e5 	.word	0x000168e5
   16d90:	00016969 	.word	0x00016969
   16d94:	00021f40 	.word	0x00021f40
   16d98:	000220ec 	.word	0x000220ec

00016d9c <super_print>:
    mp_obj_base_t base;
    mp_obj_t type;
    mp_obj_t obj;
} mp_obj_super_t;

STATIC void super_print(const mp_print_t *print, mp_obj_t self_in, mp_print_kind_t kind) {
   16d9c:	b580      	push	{r7, lr}
   16d9e:	b086      	sub	sp, #24
   16da0:	af00      	add	r7, sp, #0
   16da2:	60f8      	str	r0, [r7, #12]
   16da4:	60b9      	str	r1, [r7, #8]
   16da6:	607a      	str	r2, [r7, #4]
    (void)kind;
    mp_obj_super_t *self = MP_OBJ_TO_PTR(self_in);
   16da8:	68bb      	ldr	r3, [r7, #8]
   16daa:	617b      	str	r3, [r7, #20]
    mp_print_str(print, "<super: ");
   16dac:	490e      	ldr	r1, [pc, #56]	; (16de8 <super_print+0x4c>)
   16dae:	68f8      	ldr	r0, [r7, #12]
   16db0:	f7ea fd4e 	bl	1850 <mp_print_str>
    mp_obj_print_helper(print, self->type, PRINT_STR);
   16db4:	697b      	ldr	r3, [r7, #20]
   16db6:	685b      	ldr	r3, [r3, #4]
   16db8:	2200      	movs	r2, #0
   16dba:	4619      	mov	r1, r3
   16dbc:	68f8      	ldr	r0, [r7, #12]
   16dbe:	f7f6 fcf8 	bl	d7b2 <mp_obj_print_helper>
    mp_print_str(print, ", ");
   16dc2:	490a      	ldr	r1, [pc, #40]	; (16dec <super_print+0x50>)
   16dc4:	68f8      	ldr	r0, [r7, #12]
   16dc6:	f7ea fd43 	bl	1850 <mp_print_str>
    mp_obj_print_helper(print, self->obj, PRINT_STR);
   16dca:	697b      	ldr	r3, [r7, #20]
   16dcc:	689b      	ldr	r3, [r3, #8]
   16dce:	2200      	movs	r2, #0
   16dd0:	4619      	mov	r1, r3
   16dd2:	68f8      	ldr	r0, [r7, #12]
   16dd4:	f7f6 fced 	bl	d7b2 <mp_obj_print_helper>
    mp_print_str(print, ">");
   16dd8:	4905      	ldr	r1, [pc, #20]	; (16df0 <super_print+0x54>)
   16dda:	68f8      	ldr	r0, [r7, #12]
   16ddc:	f7ea fd38 	bl	1850 <mp_print_str>
}
   16de0:	bf00      	nop
   16de2:	3718      	adds	r7, #24
   16de4:	46bd      	mov	sp, r7
   16de6:	bd80      	pop	{r7, pc}
   16de8:	00021f70 	.word	0x00021f70
   16dec:	00021f7c 	.word	0x00021f7c
   16df0:	00021f80 	.word	0x00021f80

00016df4 <super_make_new>:

STATIC mp_obj_t super_make_new(const mp_obj_type_t *type_in, size_t n_args, size_t n_kw, const mp_obj_t *args) {
   16df4:	b580      	push	{r7, lr}
   16df6:	b088      	sub	sp, #32
   16df8:	af02      	add	r7, sp, #8
   16dfa:	60f8      	str	r0, [r7, #12]
   16dfc:	60b9      	str	r1, [r7, #8]
   16dfe:	607a      	str	r2, [r7, #4]
   16e00:	603b      	str	r3, [r7, #0]
    (void)type_in;
    // 0 arguments are turned into 2 in the compiler
    // 1 argument is not yet implemented
    mp_arg_check_num(n_args, n_kw, 2, 2, false);
   16e02:	2300      	movs	r3, #0
   16e04:	9300      	str	r3, [sp, #0]
   16e06:	2302      	movs	r3, #2
   16e08:	2202      	movs	r2, #2
   16e0a:	6879      	ldr	r1, [r7, #4]
   16e0c:	68b8      	ldr	r0, [r7, #8]
   16e0e:	f7f6 f8af 	bl	cf70 <mp_arg_check_num>
    if (!MP_OBJ_IS_TYPE(args[0], &mp_type_type)) {
   16e12:	683b      	ldr	r3, [r7, #0]
   16e14:	681b      	ldr	r3, [r3, #0]
   16e16:	4618      	mov	r0, r3
   16e18:	f7fe ff92 	bl	15d40 <MP_OBJ_IS_OBJ>
   16e1c:	4603      	mov	r3, r0
   16e1e:	f083 0301 	eor.w	r3, r3, #1
   16e22:	b2db      	uxtb	r3, r3
   16e24:	2b00      	cmp	r3, #0
   16e26:	d105      	bne.n	16e34 <super_make_new+0x40>
   16e28:	683b      	ldr	r3, [r7, #0]
   16e2a:	681b      	ldr	r3, [r3, #0]
   16e2c:	681b      	ldr	r3, [r3, #0]
   16e2e:	4a0d      	ldr	r2, [pc, #52]	; (16e64 <super_make_new+0x70>)
   16e30:	4293      	cmp	r3, r2
   16e32:	d002      	beq.n	16e3a <super_make_new+0x46>
        mp_raise_TypeError(NULL);
   16e34:	2000      	movs	r0, #0
   16e36:	f7f6 f875 	bl	cf24 <mp_raise_TypeError>
    }
    mp_obj_super_t *o = m_new_obj(mp_obj_super_t);
   16e3a:	200c      	movs	r0, #12
   16e3c:	f7e9 fa6e 	bl	31c <m_malloc>
   16e40:	6178      	str	r0, [r7, #20]
    *o = (mp_obj_super_t){{type_in}, args[0], args[1]};
   16e42:	683b      	ldr	r3, [r7, #0]
   16e44:	6819      	ldr	r1, [r3, #0]
   16e46:	683b      	ldr	r3, [r7, #0]
   16e48:	3304      	adds	r3, #4
   16e4a:	681a      	ldr	r2, [r3, #0]
   16e4c:	697b      	ldr	r3, [r7, #20]
   16e4e:	68f8      	ldr	r0, [r7, #12]
   16e50:	6018      	str	r0, [r3, #0]
   16e52:	697b      	ldr	r3, [r7, #20]
   16e54:	6059      	str	r1, [r3, #4]
   16e56:	697b      	ldr	r3, [r7, #20]
   16e58:	609a      	str	r2, [r3, #8]
    return MP_OBJ_FROM_PTR(o);
   16e5a:	697b      	ldr	r3, [r7, #20]
}
   16e5c:	4618      	mov	r0, r3
   16e5e:	3718      	adds	r7, #24
   16e60:	46bd      	mov	sp, r7
   16e62:	bd80      	pop	{r7, pc}
   16e64:	00021ee0 	.word	0x00021ee0

00016e68 <super_attr>:

STATIC void super_attr(mp_obj_t self_in, qstr attr, mp_obj_t *dest) {
   16e68:	b580      	push	{r7, lr}
   16e6a:	b090      	sub	sp, #64	; 0x40
   16e6c:	af00      	add	r7, sp, #0
   16e6e:	60f8      	str	r0, [r7, #12]
   16e70:	60b9      	str	r1, [r7, #8]
   16e72:	607a      	str	r2, [r7, #4]
    if (dest[0] != MP_OBJ_NULL) {
   16e74:	687b      	ldr	r3, [r7, #4]
   16e76:	681b      	ldr	r3, [r3, #0]
   16e78:	2b00      	cmp	r3, #0
   16e7a:	f040 80b8 	bne.w	16fee <super_attr+0x186>
        // not load attribute
        return;
    }

    assert(MP_OBJ_IS_TYPE(self_in, &mp_type_super));
   16e7e:	68f8      	ldr	r0, [r7, #12]
   16e80:	f7fe ff5e 	bl	15d40 <MP_OBJ_IS_OBJ>
   16e84:	4603      	mov	r3, r0
   16e86:	2b00      	cmp	r3, #0
   16e88:	d004      	beq.n	16e94 <super_attr+0x2c>
   16e8a:	68fb      	ldr	r3, [r7, #12]
   16e8c:	681b      	ldr	r3, [r3, #0]
   16e8e:	4a5b      	ldr	r2, [pc, #364]	; (16ffc <super_attr+0x194>)
   16e90:	4293      	cmp	r3, r2
   16e92:	d006      	beq.n	16ea2 <super_attr+0x3a>
   16e94:	4b5a      	ldr	r3, [pc, #360]	; (17000 <super_attr+0x198>)
   16e96:	4a5b      	ldr	r2, [pc, #364]	; (17004 <super_attr+0x19c>)
   16e98:	f240 4169 	movw	r1, #1129	; 0x469
   16e9c:	485a      	ldr	r0, [pc, #360]	; (17008 <super_attr+0x1a0>)
   16e9e:	f004 f98d 	bl	1b1bc <__assert_func>
    mp_obj_super_t *self = MP_OBJ_TO_PTR(self_in);
   16ea2:	68fb      	ldr	r3, [r7, #12]
   16ea4:	63bb      	str	r3, [r7, #56]	; 0x38

    assert(MP_OBJ_IS_TYPE(self->type, &mp_type_type));
   16ea6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   16ea8:	685b      	ldr	r3, [r3, #4]
   16eaa:	4618      	mov	r0, r3
   16eac:	f7fe ff48 	bl	15d40 <MP_OBJ_IS_OBJ>
   16eb0:	4603      	mov	r3, r0
   16eb2:	2b00      	cmp	r3, #0
   16eb4:	d005      	beq.n	16ec2 <super_attr+0x5a>
   16eb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   16eb8:	685b      	ldr	r3, [r3, #4]
   16eba:	681b      	ldr	r3, [r3, #0]
   16ebc:	4a53      	ldr	r2, [pc, #332]	; (1700c <super_attr+0x1a4>)
   16ebe:	4293      	cmp	r3, r2
   16ec0:	d006      	beq.n	16ed0 <super_attr+0x68>
   16ec2:	4b53      	ldr	r3, [pc, #332]	; (17010 <super_attr+0x1a8>)
   16ec4:	4a4f      	ldr	r2, [pc, #316]	; (17004 <super_attr+0x19c>)
   16ec6:	f240 416c 	movw	r1, #1132	; 0x46c
   16eca:	484f      	ldr	r0, [pc, #316]	; (17008 <super_attr+0x1a0>)
   16ecc:	f004 f976 	bl	1b1bc <__assert_func>

    mp_obj_type_t *type = MP_OBJ_TO_PTR(self->type);
   16ed0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   16ed2:	685b      	ldr	r3, [r3, #4]
   16ed4:	637b      	str	r3, [r7, #52]	; 0x34

    struct class_lookup_data lookup = {
        .obj = MP_OBJ_TO_PTR(self->obj),
   16ed6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   16ed8:	689b      	ldr	r3, [r3, #8]
    struct class_lookup_data lookup = {
   16eda:	617b      	str	r3, [r7, #20]
   16edc:	68bb      	ldr	r3, [r7, #8]
   16ede:	61bb      	str	r3, [r7, #24]
   16ee0:	2300      	movs	r3, #0
   16ee2:	61fb      	str	r3, [r7, #28]
   16ee4:	687b      	ldr	r3, [r7, #4]
   16ee6:	623b      	str	r3, [r7, #32]
   16ee8:	2300      	movs	r3, #0
   16eea:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
        .dest = dest,
        .is_type = false,
    };

    // Allow a call super().__init__() to reach any native base classes
    if (attr == MP_QSTR___init__) {
   16eee:	68bb      	ldr	r3, [r7, #8]
   16ef0:	2b13      	cmp	r3, #19
   16ef2:	d101      	bne.n	16ef8 <super_attr+0x90>
        lookup.meth_offset = offsetof(mp_obj_type_t, make_new);
   16ef4:	230c      	movs	r3, #12
   16ef6:	61fb      	str	r3, [r7, #28]
    }

    if (type->parent == NULL) {
   16ef8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   16efa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   16efc:	2b00      	cmp	r3, #0
   16efe:	d05c      	beq.n	16fba <super_attr+0x152>
        // no parents, do nothing
    #if MICROPY_MULTIPLE_INHERITANCE
    } else if (((mp_obj_base_t*)type->parent)->type == &mp_type_tuple) {
   16f00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   16f02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   16f04:	681b      	ldr	r3, [r3, #0]
   16f06:	4a43      	ldr	r2, [pc, #268]	; (17014 <super_attr+0x1ac>)
   16f08:	4293      	cmp	r3, r2
   16f0a:	d147      	bne.n	16f9c <super_attr+0x134>
        const mp_obj_tuple_t *parent_tuple = type->parent;
   16f0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   16f0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   16f10:	633b      	str	r3, [r7, #48]	; 0x30
        size_t len = parent_tuple->len;
   16f12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   16f14:	685b      	ldr	r3, [r3, #4]
   16f16:	62fb      	str	r3, [r7, #44]	; 0x2c
        const mp_obj_t *items = parent_tuple->items;
   16f18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   16f1a:	3308      	adds	r3, #8
   16f1c:	62bb      	str	r3, [r7, #40]	; 0x28
        for (size_t i = 0; i < len; i++) {
   16f1e:	2300      	movs	r3, #0
   16f20:	63fb      	str	r3, [r7, #60]	; 0x3c
   16f22:	e036      	b.n	16f92 <super_attr+0x12a>
            assert(MP_OBJ_IS_TYPE(items[i], &mp_type_type));
   16f24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   16f26:	009b      	lsls	r3, r3, #2
   16f28:	6aba      	ldr	r2, [r7, #40]	; 0x28
   16f2a:	4413      	add	r3, r2
   16f2c:	681b      	ldr	r3, [r3, #0]
   16f2e:	4618      	mov	r0, r3
   16f30:	f7fe ff06 	bl	15d40 <MP_OBJ_IS_OBJ>
   16f34:	4603      	mov	r3, r0
   16f36:	2b00      	cmp	r3, #0
   16f38:	d008      	beq.n	16f4c <super_attr+0xe4>
   16f3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   16f3c:	009b      	lsls	r3, r3, #2
   16f3e:	6aba      	ldr	r2, [r7, #40]	; 0x28
   16f40:	4413      	add	r3, r2
   16f42:	681b      	ldr	r3, [r3, #0]
   16f44:	681b      	ldr	r3, [r3, #0]
   16f46:	4a31      	ldr	r2, [pc, #196]	; (1700c <super_attr+0x1a4>)
   16f48:	4293      	cmp	r3, r2
   16f4a:	d006      	beq.n	16f5a <super_attr+0xf2>
   16f4c:	4b32      	ldr	r3, [pc, #200]	; (17018 <super_attr+0x1b0>)
   16f4e:	4a2d      	ldr	r2, [pc, #180]	; (17004 <super_attr+0x19c>)
   16f50:	f240 4185 	movw	r1, #1157	; 0x485
   16f54:	482c      	ldr	r0, [pc, #176]	; (17008 <super_attr+0x1a0>)
   16f56:	f004 f931 	bl	1b1bc <__assert_func>
            if (MP_OBJ_TO_PTR(items[i]) == &mp_type_object) {
   16f5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   16f5c:	009b      	lsls	r3, r3, #2
   16f5e:	6aba      	ldr	r2, [r7, #40]	; 0x28
   16f60:	4413      	add	r3, r2
   16f62:	681b      	ldr	r3, [r3, #0]
   16f64:	4a2d      	ldr	r2, [pc, #180]	; (1701c <super_attr+0x1b4>)
   16f66:	4293      	cmp	r3, r2
   16f68:	d00f      	beq.n	16f8a <super_attr+0x122>
                // The "object" type will be searched at the end of this function,
                // and we don't want to lookup native methods in object.
                continue;
            }
            mp_obj_class_lookup(&lookup, (mp_obj_type_t*)MP_OBJ_TO_PTR(items[i]));
   16f6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   16f6c:	009b      	lsls	r3, r3, #2
   16f6e:	6aba      	ldr	r2, [r7, #40]	; 0x28
   16f70:	4413      	add	r3, r2
   16f72:	681a      	ldr	r2, [r3, #0]
   16f74:	f107 0314 	add.w	r3, r7, #20
   16f78:	4611      	mov	r1, r2
   16f7a:	4618      	mov	r0, r3
   16f7c:	f7fe ffc0 	bl	15f00 <mp_obj_class_lookup>
            if (dest[0] != MP_OBJ_NULL) {
   16f80:	687b      	ldr	r3, [r7, #4]
   16f82:	681b      	ldr	r3, [r3, #0]
   16f84:	2b00      	cmp	r3, #0
   16f86:	d117      	bne.n	16fb8 <super_attr+0x150>
   16f88:	e000      	b.n	16f8c <super_attr+0x124>
                continue;
   16f8a:	bf00      	nop
        for (size_t i = 0; i < len; i++) {
   16f8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   16f8e:	3301      	adds	r3, #1
   16f90:	63fb      	str	r3, [r7, #60]	; 0x3c
   16f92:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   16f94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   16f96:	429a      	cmp	r2, r3
   16f98:	d3c4      	bcc.n	16f24 <super_attr+0xbc>
   16f9a:	e00e      	b.n	16fba <super_attr+0x152>
                break;
            }
        }
    #endif
    } else if (type->parent != &mp_type_object) {
   16f9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   16f9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   16fa0:	4a1e      	ldr	r2, [pc, #120]	; (1701c <super_attr+0x1b4>)
   16fa2:	4293      	cmp	r3, r2
   16fa4:	d009      	beq.n	16fba <super_attr+0x152>
        mp_obj_class_lookup(&lookup, type->parent);
   16fa6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   16fa8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   16faa:	f107 0314 	add.w	r3, r7, #20
   16fae:	4611      	mov	r1, r2
   16fb0:	4618      	mov	r0, r3
   16fb2:	f7fe ffa5 	bl	15f00 <mp_obj_class_lookup>
   16fb6:	e000      	b.n	16fba <super_attr+0x152>
                break;
   16fb8:	bf00      	nop
    }

    if (dest[0] != MP_OBJ_NULL) {
   16fba:	687b      	ldr	r3, [r7, #4]
   16fbc:	681b      	ldr	r3, [r3, #0]
   16fbe:	2b00      	cmp	r3, #0
   16fc0:	d00c      	beq.n	16fdc <super_attr+0x174>
        if (dest[0] == MP_OBJ_SENTINEL) {
   16fc2:	687b      	ldr	r3, [r7, #4]
   16fc4:	681b      	ldr	r3, [r3, #0]
   16fc6:	2b08      	cmp	r3, #8
   16fc8:	d113      	bne.n	16ff2 <super_attr+0x18a>
            // Looked up native __init__ so defer to it
            dest[0] = MP_OBJ_FROM_PTR(&native_base_init_wrapper_obj);
   16fca:	687b      	ldr	r3, [r7, #4]
   16fcc:	4a14      	ldr	r2, [pc, #80]	; (17020 <super_attr+0x1b8>)
   16fce:	601a      	str	r2, [r3, #0]
            dest[1] = self->obj;
   16fd0:	687b      	ldr	r3, [r7, #4]
   16fd2:	3304      	adds	r3, #4
   16fd4:	6bba      	ldr	r2, [r7, #56]	; 0x38
   16fd6:	6892      	ldr	r2, [r2, #8]
   16fd8:	601a      	str	r2, [r3, #0]
        }
        return;
   16fda:	e00a      	b.n	16ff2 <super_attr+0x18a>
    }

    // Reset meth_offset so we don't look up any native methods in object,
    // because object never takes up the native base-class slot.
    lookup.meth_offset = 0;
   16fdc:	2300      	movs	r3, #0
   16fde:	61fb      	str	r3, [r7, #28]

    mp_obj_class_lookup(&lookup, &mp_type_object);
   16fe0:	f107 0314 	add.w	r3, r7, #20
   16fe4:	490d      	ldr	r1, [pc, #52]	; (1701c <super_attr+0x1b4>)
   16fe6:	4618      	mov	r0, r3
   16fe8:	f7fe ff8a 	bl	15f00 <mp_obj_class_lookup>
   16fec:	e002      	b.n	16ff4 <super_attr+0x18c>
        return;
   16fee:	bf00      	nop
   16ff0:	e000      	b.n	16ff4 <super_attr+0x18c>
        return;
   16ff2:	bf00      	nop
}
   16ff4:	3740      	adds	r7, #64	; 0x40
   16ff6:	46bd      	mov	sp, r7
   16ff8:	bd80      	pop	{r7, pc}
   16ffa:	bf00      	nop
   16ffc:	00022000 	.word	0x00022000
   17000:	00021f84 	.word	0x00021f84
   17004:	000221ec 	.word	0x000221ec
   17008:	00021cd0 	.word	0x00021cd0
   1700c:	00021ee0 	.word	0x00021ee0
   17010:	00021fac 	.word	0x00021fac
   17014:	00021be8 	.word	0x00021be8
   17018:	00021fd8 	.word	0x00021fd8
   1701c:	000211f8 	.word	0x000211f8
   17020:	00021ce4 	.word	0x00021ce4

00017024 <mp_load_super_method>:
    .print = super_print,
    .make_new = super_make_new,
    .attr = super_attr,
};

void mp_load_super_method(qstr attr, mp_obj_t *dest) {
   17024:	b580      	push	{r7, lr}
   17026:	b086      	sub	sp, #24
   17028:	af00      	add	r7, sp, #0
   1702a:	6078      	str	r0, [r7, #4]
   1702c:	6039      	str	r1, [r7, #0]
    mp_obj_super_t super = {{&mp_type_super}, dest[1], dest[2]};
   1702e:	4b09      	ldr	r3, [pc, #36]	; (17054 <mp_load_super_method+0x30>)
   17030:	60fb      	str	r3, [r7, #12]
   17032:	683b      	ldr	r3, [r7, #0]
   17034:	685b      	ldr	r3, [r3, #4]
   17036:	613b      	str	r3, [r7, #16]
   17038:	683b      	ldr	r3, [r7, #0]
   1703a:	689b      	ldr	r3, [r3, #8]
   1703c:	617b      	str	r3, [r7, #20]
    mp_load_method(MP_OBJ_FROM_PTR(&super), attr, dest);
   1703e:	f107 030c 	add.w	r3, r7, #12
   17042:	683a      	ldr	r2, [r7, #0]
   17044:	6879      	ldr	r1, [r7, #4]
   17046:	4618      	mov	r0, r3
   17048:	f7f5 fba6 	bl	c798 <mp_load_method>
}
   1704c:	bf00      	nop
   1704e:	3718      	adds	r7, #24
   17050:	46bd      	mov	sp, r7
   17052:	bd80      	pop	{r7, pc}
   17054:	00022000 	.word	0x00022000

00017058 <mp_obj_is_subclass_fast>:
/******************************************************************************/
// subclassing and built-ins specific to types

// object and classinfo should be type objects
// (but the function will fail gracefully if they are not)
bool mp_obj_is_subclass_fast(mp_const_obj_t object, mp_const_obj_t classinfo) {
   17058:	b580      	push	{r7, lr}
   1705a:	b086      	sub	sp, #24
   1705c:	af00      	add	r7, sp, #0
   1705e:	6078      	str	r0, [r7, #4]
   17060:	6039      	str	r1, [r7, #0]
    for (;;) {
        if (object == classinfo) {
   17062:	687a      	ldr	r2, [r7, #4]
   17064:	683b      	ldr	r3, [r7, #0]
   17066:	429a      	cmp	r2, r3
   17068:	d101      	bne.n	1706e <mp_obj_is_subclass_fast+0x16>
            return true;
   1706a:	2301      	movs	r3, #1
   1706c:	e047      	b.n	170fe <mp_obj_is_subclass_fast+0xa6>
        }

        // not equivalent classes, keep searching base classes

        // object should always be a type object, but just return false if it's not
        if (!MP_OBJ_IS_TYPE(object, &mp_type_type)) {
   1706e:	6878      	ldr	r0, [r7, #4]
   17070:	f7fe fe66 	bl	15d40 <MP_OBJ_IS_OBJ>
   17074:	4603      	mov	r3, r0
   17076:	f083 0301 	eor.w	r3, r3, #1
   1707a:	b2db      	uxtb	r3, r3
   1707c:	2b00      	cmp	r3, #0
   1707e:	d104      	bne.n	1708a <mp_obj_is_subclass_fast+0x32>
   17080:	687b      	ldr	r3, [r7, #4]
   17082:	681b      	ldr	r3, [r3, #0]
   17084:	4a20      	ldr	r2, [pc, #128]	; (17108 <mp_obj_is_subclass_fast+0xb0>)
   17086:	4293      	cmp	r3, r2
   17088:	d001      	beq.n	1708e <mp_obj_is_subclass_fast+0x36>
            return false;
   1708a:	2300      	movs	r3, #0
   1708c:	e037      	b.n	170fe <mp_obj_is_subclass_fast+0xa6>
        }

        const mp_obj_type_t *self = MP_OBJ_TO_PTR(object);
   1708e:	687b      	ldr	r3, [r7, #4]
   17090:	613b      	str	r3, [r7, #16]

        if (self->parent == NULL) {
   17092:	693b      	ldr	r3, [r7, #16]
   17094:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   17096:	2b00      	cmp	r3, #0
   17098:	d101      	bne.n	1709e <mp_obj_is_subclass_fast+0x46>
            // type has no parents
            return false;
   1709a:	2300      	movs	r3, #0
   1709c:	e02f      	b.n	170fe <mp_obj_is_subclass_fast+0xa6>
        #if MICROPY_MULTIPLE_INHERITANCE
        } else if (((mp_obj_base_t*)self->parent)->type == &mp_type_tuple) {
   1709e:	693b      	ldr	r3, [r7, #16]
   170a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   170a2:	681b      	ldr	r3, [r3, #0]
   170a4:	4a19      	ldr	r2, [pc, #100]	; (1710c <mp_obj_is_subclass_fast+0xb4>)
   170a6:	4293      	cmp	r3, r2
   170a8:	d125      	bne.n	170f6 <mp_obj_is_subclass_fast+0x9e>
            // get the base objects (they should be type objects)
            const mp_obj_tuple_t *parent_tuple = self->parent;
   170aa:	693b      	ldr	r3, [r7, #16]
   170ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   170ae:	60fb      	str	r3, [r7, #12]
            const mp_obj_t *item = parent_tuple->items;
   170b0:	68fb      	ldr	r3, [r7, #12]
   170b2:	3308      	adds	r3, #8
   170b4:	617b      	str	r3, [r7, #20]
            const mp_obj_t *top = item + parent_tuple->len - 1;
   170b6:	68fb      	ldr	r3, [r7, #12]
   170b8:	685b      	ldr	r3, [r3, #4]
   170ba:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   170be:	3b01      	subs	r3, #1
   170c0:	009b      	lsls	r3, r3, #2
   170c2:	697a      	ldr	r2, [r7, #20]
   170c4:	4413      	add	r3, r2
   170c6:	60bb      	str	r3, [r7, #8]

            // iterate through the base objects
            for (; item < top; ++item) {
   170c8:	e00d      	b.n	170e6 <mp_obj_is_subclass_fast+0x8e>
                if (mp_obj_is_subclass_fast(*item, classinfo)) {
   170ca:	697b      	ldr	r3, [r7, #20]
   170cc:	681b      	ldr	r3, [r3, #0]
   170ce:	6839      	ldr	r1, [r7, #0]
   170d0:	4618      	mov	r0, r3
   170d2:	f7ff ffc1 	bl	17058 <mp_obj_is_subclass_fast>
   170d6:	4603      	mov	r3, r0
   170d8:	2b00      	cmp	r3, #0
   170da:	d001      	beq.n	170e0 <mp_obj_is_subclass_fast+0x88>
                    return true;
   170dc:	2301      	movs	r3, #1
   170de:	e00e      	b.n	170fe <mp_obj_is_subclass_fast+0xa6>
            for (; item < top; ++item) {
   170e0:	697b      	ldr	r3, [r7, #20]
   170e2:	3304      	adds	r3, #4
   170e4:	617b      	str	r3, [r7, #20]
   170e6:	697a      	ldr	r2, [r7, #20]
   170e8:	68bb      	ldr	r3, [r7, #8]
   170ea:	429a      	cmp	r2, r3
   170ec:	d3ed      	bcc.n	170ca <mp_obj_is_subclass_fast+0x72>
                }
            }

            // search last base (simple tail recursion elimination)
            object = *item;
   170ee:	697b      	ldr	r3, [r7, #20]
   170f0:	681b      	ldr	r3, [r3, #0]
   170f2:	607b      	str	r3, [r7, #4]
   170f4:	e7b5      	b.n	17062 <mp_obj_is_subclass_fast+0xa>
        #endif
        } else {
            // type has 1 parent
            object = MP_OBJ_FROM_PTR(self->parent);
   170f6:	693b      	ldr	r3, [r7, #16]
   170f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   170fa:	607b      	str	r3, [r7, #4]
    for (;;) {
   170fc:	e7b1      	b.n	17062 <mp_obj_is_subclass_fast+0xa>
        }
    }
}
   170fe:	4618      	mov	r0, r3
   17100:	3718      	adds	r7, #24
   17102:	46bd      	mov	sp, r7
   17104:	bd80      	pop	{r7, pc}
   17106:	bf00      	nop
   17108:	00021ee0 	.word	0x00021ee0
   1710c:	00021be8 	.word	0x00021be8

00017110 <mp_obj_is_subclass>:

STATIC mp_obj_t mp_obj_is_subclass(mp_obj_t object, mp_obj_t classinfo) {
   17110:	b580      	push	{r7, lr}
   17112:	b086      	sub	sp, #24
   17114:	af00      	add	r7, sp, #0
   17116:	6078      	str	r0, [r7, #4]
   17118:	6039      	str	r1, [r7, #0]
    size_t len;
    mp_obj_t *items;
    if (MP_OBJ_IS_TYPE(classinfo, &mp_type_type)) {
   1711a:	683b      	ldr	r3, [r7, #0]
   1711c:	4618      	mov	r0, r3
   1711e:	f7fe fe0f 	bl	15d40 <MP_OBJ_IS_OBJ>
   17122:	4603      	mov	r3, r0
   17124:	2b00      	cmp	r3, #0
   17126:	d009      	beq.n	1713c <mp_obj_is_subclass+0x2c>
   17128:	683b      	ldr	r3, [r7, #0]
   1712a:	681b      	ldr	r3, [r3, #0]
   1712c:	4a22      	ldr	r2, [pc, #136]	; (171b8 <mp_obj_is_subclass+0xa8>)
   1712e:	4293      	cmp	r3, r2
   17130:	d104      	bne.n	1713c <mp_obj_is_subclass+0x2c>
        len = 1;
   17132:	2301      	movs	r3, #1
   17134:	613b      	str	r3, [r7, #16]
        items = &classinfo;
   17136:	463b      	mov	r3, r7
   17138:	60fb      	str	r3, [r7, #12]
   1713a:	e017      	b.n	1716c <mp_obj_is_subclass+0x5c>
    } else if (MP_OBJ_IS_TYPE(classinfo, &mp_type_tuple)) {
   1713c:	683b      	ldr	r3, [r7, #0]
   1713e:	4618      	mov	r0, r3
   17140:	f7fe fdfe 	bl	15d40 <MP_OBJ_IS_OBJ>
   17144:	4603      	mov	r3, r0
   17146:	2b00      	cmp	r3, #0
   17148:	d00d      	beq.n	17166 <mp_obj_is_subclass+0x56>
   1714a:	683b      	ldr	r3, [r7, #0]
   1714c:	681b      	ldr	r3, [r3, #0]
   1714e:	4a1b      	ldr	r2, [pc, #108]	; (171bc <mp_obj_is_subclass+0xac>)
   17150:	4293      	cmp	r3, r2
   17152:	d108      	bne.n	17166 <mp_obj_is_subclass+0x56>
        mp_obj_tuple_get(classinfo, &len, &items);
   17154:	683b      	ldr	r3, [r7, #0]
   17156:	f107 020c 	add.w	r2, r7, #12
   1715a:	f107 0110 	add.w	r1, r7, #16
   1715e:	4618      	mov	r0, r3
   17160:	f7fe fd56 	bl	15c10 <mp_obj_tuple_get>
   17164:	e002      	b.n	1716c <mp_obj_is_subclass+0x5c>
    } else {
        mp_raise_TypeError("issubclass() arg 2 must be a class or a tuple of classes");
   17166:	4816      	ldr	r0, [pc, #88]	; (171c0 <mp_obj_is_subclass+0xb0>)
   17168:	f7f5 fedc 	bl	cf24 <mp_raise_TypeError>
    }

    for (size_t i = 0; i < len; i++) {
   1716c:	2300      	movs	r3, #0
   1716e:	617b      	str	r3, [r7, #20]
   17170:	e018      	b.n	171a4 <mp_obj_is_subclass+0x94>
        // We explicitly check for 'object' here since no-one explicitly derives from it
        if (items[i] == MP_OBJ_FROM_PTR(&mp_type_object) || mp_obj_is_subclass_fast(object, items[i])) {
   17172:	68fa      	ldr	r2, [r7, #12]
   17174:	697b      	ldr	r3, [r7, #20]
   17176:	009b      	lsls	r3, r3, #2
   17178:	4413      	add	r3, r2
   1717a:	681b      	ldr	r3, [r3, #0]
   1717c:	4a11      	ldr	r2, [pc, #68]	; (171c4 <mp_obj_is_subclass+0xb4>)
   1717e:	4293      	cmp	r3, r2
   17180:	d00b      	beq.n	1719a <mp_obj_is_subclass+0x8a>
   17182:	68fa      	ldr	r2, [r7, #12]
   17184:	697b      	ldr	r3, [r7, #20]
   17186:	009b      	lsls	r3, r3, #2
   17188:	4413      	add	r3, r2
   1718a:	681b      	ldr	r3, [r3, #0]
   1718c:	4619      	mov	r1, r3
   1718e:	6878      	ldr	r0, [r7, #4]
   17190:	f7ff ff62 	bl	17058 <mp_obj_is_subclass_fast>
   17194:	4603      	mov	r3, r0
   17196:	2b00      	cmp	r3, #0
   17198:	d001      	beq.n	1719e <mp_obj_is_subclass+0x8e>
            return mp_const_true;
   1719a:	4b0b      	ldr	r3, [pc, #44]	; (171c8 <mp_obj_is_subclass+0xb8>)
   1719c:	e007      	b.n	171ae <mp_obj_is_subclass+0x9e>
    for (size_t i = 0; i < len; i++) {
   1719e:	697b      	ldr	r3, [r7, #20]
   171a0:	3301      	adds	r3, #1
   171a2:	617b      	str	r3, [r7, #20]
   171a4:	693b      	ldr	r3, [r7, #16]
   171a6:	697a      	ldr	r2, [r7, #20]
   171a8:	429a      	cmp	r2, r3
   171aa:	d3e2      	bcc.n	17172 <mp_obj_is_subclass+0x62>
        }
    }
    return mp_const_false;
   171ac:	4b07      	ldr	r3, [pc, #28]	; (171cc <mp_obj_is_subclass+0xbc>)
}
   171ae:	4618      	mov	r0, r3
   171b0:	3718      	adds	r7, #24
   171b2:	46bd      	mov	sp, r7
   171b4:	bd80      	pop	{r7, pc}
   171b6:	bf00      	nop
   171b8:	00021ee0 	.word	0x00021ee0
   171bc:	00021be8 	.word	0x00021be8
   171c0:	0002203c 	.word	0x0002203c
   171c4:	000211f8 	.word	0x000211f8
   171c8:	0001f9c4 	.word	0x0001f9c4
   171cc:	0001f9bc 	.word	0x0001f9bc

000171d0 <mp_builtin_issubclass>:

STATIC mp_obj_t mp_builtin_issubclass(mp_obj_t object, mp_obj_t classinfo) {
   171d0:	b580      	push	{r7, lr}
   171d2:	b082      	sub	sp, #8
   171d4:	af00      	add	r7, sp, #0
   171d6:	6078      	str	r0, [r7, #4]
   171d8:	6039      	str	r1, [r7, #0]
    if (!MP_OBJ_IS_TYPE(object, &mp_type_type)) {
   171da:	6878      	ldr	r0, [r7, #4]
   171dc:	f7fe fdb0 	bl	15d40 <MP_OBJ_IS_OBJ>
   171e0:	4603      	mov	r3, r0
   171e2:	f083 0301 	eor.w	r3, r3, #1
   171e6:	b2db      	uxtb	r3, r3
   171e8:	2b00      	cmp	r3, #0
   171ea:	d104      	bne.n	171f6 <mp_builtin_issubclass+0x26>
   171ec:	687b      	ldr	r3, [r7, #4]
   171ee:	681b      	ldr	r3, [r3, #0]
   171f0:	4a07      	ldr	r2, [pc, #28]	; (17210 <mp_builtin_issubclass+0x40>)
   171f2:	4293      	cmp	r3, r2
   171f4:	d002      	beq.n	171fc <mp_builtin_issubclass+0x2c>
        mp_raise_TypeError("issubclass() arg 1 must be a class");
   171f6:	4807      	ldr	r0, [pc, #28]	; (17214 <mp_builtin_issubclass+0x44>)
   171f8:	f7f5 fe94 	bl	cf24 <mp_raise_TypeError>
    }
    return mp_obj_is_subclass(object, classinfo);
   171fc:	6839      	ldr	r1, [r7, #0]
   171fe:	6878      	ldr	r0, [r7, #4]
   17200:	f7ff ff86 	bl	17110 <mp_obj_is_subclass>
   17204:	4603      	mov	r3, r0
}
   17206:	4618      	mov	r0, r3
   17208:	3708      	adds	r7, #8
   1720a:	46bd      	mov	sp, r7
   1720c:	bd80      	pop	{r7, pc}
   1720e:	bf00      	nop
   17210:	00021ee0 	.word	0x00021ee0
   17214:	00022078 	.word	0x00022078

00017218 <mp_builtin_isinstance>:

MP_DEFINE_CONST_FUN_OBJ_2(mp_builtin_issubclass_obj, mp_builtin_issubclass);

STATIC mp_obj_t mp_builtin_isinstance(mp_obj_t object, mp_obj_t classinfo) {
   17218:	b580      	push	{r7, lr}
   1721a:	b082      	sub	sp, #8
   1721c:	af00      	add	r7, sp, #0
   1721e:	6078      	str	r0, [r7, #4]
   17220:	6039      	str	r1, [r7, #0]
    return mp_obj_is_subclass(MP_OBJ_FROM_PTR(mp_obj_get_type(object)), classinfo);
   17222:	6878      	ldr	r0, [r7, #4]
   17224:	f7f6 fa94 	bl	d750 <mp_obj_get_type>
   17228:	4603      	mov	r3, r0
   1722a:	6839      	ldr	r1, [r7, #0]
   1722c:	4618      	mov	r0, r3
   1722e:	f7ff ff6f 	bl	17110 <mp_obj_is_subclass>
   17232:	4603      	mov	r3, r0
}
   17234:	4618      	mov	r0, r3
   17236:	3708      	adds	r7, #8
   17238:	46bd      	mov	sp, r7
   1723a:	bd80      	pop	{r7, pc}

0001723c <mp_instance_cast_to_native_base>:

MP_DEFINE_CONST_FUN_OBJ_2(mp_builtin_isinstance_obj, mp_builtin_isinstance);

mp_obj_t mp_instance_cast_to_native_base(mp_const_obj_t self_in, mp_const_obj_t native_type) {
   1723c:	b580      	push	{r7, lr}
   1723e:	b084      	sub	sp, #16
   17240:	af00      	add	r7, sp, #0
   17242:	6078      	str	r0, [r7, #4]
   17244:	6039      	str	r1, [r7, #0]
    mp_obj_type_t *self_type = mp_obj_get_type(self_in);
   17246:	6878      	ldr	r0, [r7, #4]
   17248:	f7f6 fa82 	bl	d750 <mp_obj_get_type>
   1724c:	60f8      	str	r0, [r7, #12]
    if (!mp_obj_is_subclass_fast(MP_OBJ_FROM_PTR(self_type), native_type)) {
   1724e:	6839      	ldr	r1, [r7, #0]
   17250:	68f8      	ldr	r0, [r7, #12]
   17252:	f7ff ff01 	bl	17058 <mp_obj_is_subclass_fast>
   17256:	4603      	mov	r3, r0
   17258:	f083 0301 	eor.w	r3, r3, #1
   1725c:	b2db      	uxtb	r3, r3
   1725e:	2b00      	cmp	r3, #0
   17260:	d001      	beq.n	17266 <mp_instance_cast_to_native_base+0x2a>
        return MP_OBJ_NULL;
   17262:	2300      	movs	r3, #0
   17264:	e003      	b.n	1726e <mp_instance_cast_to_native_base+0x32>
    }
    mp_obj_instance_t *self = (mp_obj_instance_t*)MP_OBJ_TO_PTR(self_in);
   17266:	687b      	ldr	r3, [r7, #4]
   17268:	60bb      	str	r3, [r7, #8]
    return self->subobj[0];
   1726a:	68bb      	ldr	r3, [r7, #8]
   1726c:	691b      	ldr	r3, [r3, #16]
}
   1726e:	4618      	mov	r0, r3
   17270:	3710      	adds	r7, #16
   17272:	46bd      	mov	sp, r7
   17274:	bd80      	pop	{r7, pc}

00017276 <static_class_method_make_new>:

/******************************************************************************/
// staticmethod and classmethod types (probably should go in a different file)

STATIC mp_obj_t static_class_method_make_new(const mp_obj_type_t *self, size_t n_args, size_t n_kw, const mp_obj_t *args) {
   17276:	b580      	push	{r7, lr}
   17278:	b088      	sub	sp, #32
   1727a:	af02      	add	r7, sp, #8
   1727c:	60f8      	str	r0, [r7, #12]
   1727e:	60b9      	str	r1, [r7, #8]
   17280:	607a      	str	r2, [r7, #4]
   17282:	603b      	str	r3, [r7, #0]
    assert(self == &mp_type_staticmethod || self == &mp_type_classmethod);
   17284:	68fb      	ldr	r3, [r7, #12]
   17286:	4a13      	ldr	r2, [pc, #76]	; (172d4 <static_class_method_make_new+0x5e>)
   17288:	4293      	cmp	r3, r2
   1728a:	d00a      	beq.n	172a2 <static_class_method_make_new+0x2c>
   1728c:	68fb      	ldr	r3, [r7, #12]
   1728e:	4a12      	ldr	r2, [pc, #72]	; (172d8 <static_class_method_make_new+0x62>)
   17290:	4293      	cmp	r3, r2
   17292:	d006      	beq.n	172a2 <static_class_method_make_new+0x2c>
   17294:	4b11      	ldr	r3, [pc, #68]	; (172dc <static_class_method_make_new+0x66>)
   17296:	4a12      	ldr	r2, [pc, #72]	; (172e0 <static_class_method_make_new+0x6a>)
   17298:	f240 5112 	movw	r1, #1298	; 0x512
   1729c:	4811      	ldr	r0, [pc, #68]	; (172e4 <static_class_method_make_new+0x6e>)
   1729e:	f003 ff8d 	bl	1b1bc <__assert_func>

    mp_arg_check_num(n_args, n_kw, 1, 1, false);
   172a2:	2300      	movs	r3, #0
   172a4:	9300      	str	r3, [sp, #0]
   172a6:	2301      	movs	r3, #1
   172a8:	2201      	movs	r2, #1
   172aa:	6879      	ldr	r1, [r7, #4]
   172ac:	68b8      	ldr	r0, [r7, #8]
   172ae:	f7f5 fe5f 	bl	cf70 <mp_arg_check_num>

    mp_obj_static_class_method_t *o = m_new_obj(mp_obj_static_class_method_t);
   172b2:	2008      	movs	r0, #8
   172b4:	f7e9 f832 	bl	31c <m_malloc>
   172b8:	6178      	str	r0, [r7, #20]
    *o = (mp_obj_static_class_method_t){{self}, args[0]};
   172ba:	683b      	ldr	r3, [r7, #0]
   172bc:	681a      	ldr	r2, [r3, #0]
   172be:	697b      	ldr	r3, [r7, #20]
   172c0:	68f9      	ldr	r1, [r7, #12]
   172c2:	6019      	str	r1, [r3, #0]
   172c4:	697b      	ldr	r3, [r7, #20]
   172c6:	605a      	str	r2, [r3, #4]
    return MP_OBJ_FROM_PTR(o);
   172c8:	697b      	ldr	r3, [r7, #20]
}
   172ca:	4618      	mov	r0, r3
   172cc:	3718      	adds	r7, #24
   172ce:	46bd      	mov	sp, r7
   172d0:	bd80      	pop	{r7, pc}
   172d2:	bf00      	nop
   172d4:	000220ec 	.word	0x000220ec
   172d8:	00022128 	.word	0x00022128
   172dc:	000220ac 	.word	0x000220ac
   172e0:	000221f8 	.word	0x000221f8
   172e4:	00021cd0 	.word	0x00021cd0

000172e8 <MP_OBJ_IS_OBJ>:
   172e8:	b480      	push	{r7}
   172ea:	b083      	sub	sp, #12
   172ec:	af00      	add	r7, sp, #0
   172ee:	6078      	str	r0, [r7, #4]
   172f0:	687b      	ldr	r3, [r7, #4]
   172f2:	f003 0303 	and.w	r3, r3, #3
   172f6:	2b00      	cmp	r3, #0
   172f8:	bf0c      	ite	eq
   172fa:	2301      	moveq	r3, #1
   172fc:	2300      	movne	r3, #0
   172fe:	b2db      	uxtb	r3, r3
   17300:	4618      	mov	r0, r3
   17302:	370c      	adds	r7, #12
   17304:	46bd      	mov	sp, r7
   17306:	f85d 7b04 	ldr.w	r7, [sp], #4
   1730a:	4770      	bx	lr

0001730c <zip_make_new>:
    mp_obj_base_t base;
    size_t n_iters;
    mp_obj_t iters[];
} mp_obj_zip_t;

STATIC mp_obj_t zip_make_new(const mp_obj_type_t *type, size_t n_args, size_t n_kw, const mp_obj_t *args) {
   1730c:	b580      	push	{r7, lr}
   1730e:	b088      	sub	sp, #32
   17310:	af02      	add	r7, sp, #8
   17312:	60f8      	str	r0, [r7, #12]
   17314:	60b9      	str	r1, [r7, #8]
   17316:	607a      	str	r2, [r7, #4]
   17318:	603b      	str	r3, [r7, #0]
    mp_arg_check_num(n_args, n_kw, 0, MP_OBJ_FUN_ARGS_MAX, false);
   1731a:	2300      	movs	r3, #0
   1731c:	9300      	str	r3, [sp, #0]
   1731e:	f64f 73ff 	movw	r3, #65535	; 0xffff
   17322:	2200      	movs	r2, #0
   17324:	6879      	ldr	r1, [r7, #4]
   17326:	68b8      	ldr	r0, [r7, #8]
   17328:	f7f5 fe22 	bl	cf70 <mp_arg_check_num>

    mp_obj_zip_t *o = m_new_obj_var(mp_obj_zip_t, mp_obj_t, n_args);
   1732c:	68bb      	ldr	r3, [r7, #8]
   1732e:	3302      	adds	r3, #2
   17330:	009b      	lsls	r3, r3, #2
   17332:	4618      	mov	r0, r3
   17334:	f7e8 fff2 	bl	31c <m_malloc>
   17338:	6138      	str	r0, [r7, #16]
    o->base.type = type;
   1733a:	693b      	ldr	r3, [r7, #16]
   1733c:	68fa      	ldr	r2, [r7, #12]
   1733e:	601a      	str	r2, [r3, #0]
    o->n_iters = n_args;
   17340:	693b      	ldr	r3, [r7, #16]
   17342:	68ba      	ldr	r2, [r7, #8]
   17344:	605a      	str	r2, [r3, #4]
    for (size_t i = 0; i < n_args; i++) {
   17346:	2300      	movs	r3, #0
   17348:	617b      	str	r3, [r7, #20]
   1734a:	e011      	b.n	17370 <zip_make_new+0x64>
        o->iters[i] = mp_getiter(args[i], NULL);
   1734c:	697b      	ldr	r3, [r7, #20]
   1734e:	009b      	lsls	r3, r3, #2
   17350:	683a      	ldr	r2, [r7, #0]
   17352:	4413      	add	r3, r2
   17354:	681b      	ldr	r3, [r3, #0]
   17356:	2100      	movs	r1, #0
   17358:	4618      	mov	r0, r3
   1735a:	f7f5 fa95 	bl	c888 <mp_getiter>
   1735e:	4601      	mov	r1, r0
   17360:	693b      	ldr	r3, [r7, #16]
   17362:	697a      	ldr	r2, [r7, #20]
   17364:	3202      	adds	r2, #2
   17366:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (size_t i = 0; i < n_args; i++) {
   1736a:	697b      	ldr	r3, [r7, #20]
   1736c:	3301      	adds	r3, #1
   1736e:	617b      	str	r3, [r7, #20]
   17370:	697a      	ldr	r2, [r7, #20]
   17372:	68bb      	ldr	r3, [r7, #8]
   17374:	429a      	cmp	r2, r3
   17376:	d3e9      	bcc.n	1734c <zip_make_new+0x40>
    }
    return MP_OBJ_FROM_PTR(o);
   17378:	693b      	ldr	r3, [r7, #16]
}
   1737a:	4618      	mov	r0, r3
   1737c:	3718      	adds	r7, #24
   1737e:	46bd      	mov	sp, r7
   17380:	bd80      	pop	{r7, pc}

00017382 <zip_iternext>:

STATIC mp_obj_t zip_iternext(mp_obj_t self_in) {
   17382:	b580      	push	{r7, lr}
   17384:	b086      	sub	sp, #24
   17386:	af00      	add	r7, sp, #0
   17388:	6078      	str	r0, [r7, #4]
    mp_check_self(MP_OBJ_IS_TYPE(self_in, &mp_type_zip));
   1738a:	6878      	ldr	r0, [r7, #4]
   1738c:	f7ff ffac 	bl	172e8 <MP_OBJ_IS_OBJ>
   17390:	4603      	mov	r3, r0
   17392:	2b00      	cmp	r3, #0
   17394:	d004      	beq.n	173a0 <zip_iternext+0x1e>
   17396:	687b      	ldr	r3, [r7, #4]
   17398:	681b      	ldr	r3, [r3, #0]
   1739a:	4a1f      	ldr	r2, [pc, #124]	; (17418 <zip_iternext+0x96>)
   1739c:	4293      	cmp	r3, r2
   1739e:	d005      	beq.n	173ac <zip_iternext+0x2a>
   173a0:	4b1e      	ldr	r3, [pc, #120]	; (1741c <zip_iternext+0x9a>)
   173a2:	4a1f      	ldr	r2, [pc, #124]	; (17420 <zip_iternext+0x9e>)
   173a4:	2134      	movs	r1, #52	; 0x34
   173a6:	481f      	ldr	r0, [pc, #124]	; (17424 <zip_iternext+0xa2>)
   173a8:	f003 ff08 	bl	1b1bc <__assert_func>
    mp_obj_zip_t *self = MP_OBJ_TO_PTR(self_in);
   173ac:	687b      	ldr	r3, [r7, #4]
   173ae:	613b      	str	r3, [r7, #16]
    if (self->n_iters == 0) {
   173b0:	693b      	ldr	r3, [r7, #16]
   173b2:	685b      	ldr	r3, [r3, #4]
   173b4:	2b00      	cmp	r3, #0
   173b6:	d101      	bne.n	173bc <zip_iternext+0x3a>
        return MP_OBJ_STOP_ITERATION;
   173b8:	2304      	movs	r3, #4
   173ba:	e029      	b.n	17410 <zip_iternext+0x8e>
    }
    mp_obj_tuple_t *tuple = MP_OBJ_TO_PTR(mp_obj_new_tuple(self->n_iters, NULL));
   173bc:	693b      	ldr	r3, [r7, #16]
   173be:	685b      	ldr	r3, [r3, #4]
   173c0:	2100      	movs	r1, #0
   173c2:	4618      	mov	r0, r3
   173c4:	f7fe fbec 	bl	15ba0 <mp_obj_new_tuple>
   173c8:	60f8      	str	r0, [r7, #12]

    for (size_t i = 0; i < self->n_iters; i++) {
   173ca:	2300      	movs	r3, #0
   173cc:	617b      	str	r3, [r7, #20]
   173ce:	e019      	b.n	17404 <zip_iternext+0x82>
        mp_obj_t next = mp_iternext(self->iters[i]);
   173d0:	693b      	ldr	r3, [r7, #16]
   173d2:	697a      	ldr	r2, [r7, #20]
   173d4:	3202      	adds	r2, #2
   173d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   173da:	4618      	mov	r0, r3
   173dc:	f7f5 fad6 	bl	c98c <mp_iternext>
   173e0:	60b8      	str	r0, [r7, #8]
        if (next == MP_OBJ_STOP_ITERATION) {
   173e2:	68bb      	ldr	r3, [r7, #8]
   173e4:	2b04      	cmp	r3, #4
   173e6:	d104      	bne.n	173f2 <zip_iternext+0x70>
            mp_obj_tuple_del(MP_OBJ_FROM_PTR(tuple));
   173e8:	68f8      	ldr	r0, [r7, #12]
   173ea:	f7fe fc3f 	bl	15c6c <mp_obj_tuple_del>
            return MP_OBJ_STOP_ITERATION;
   173ee:	2304      	movs	r3, #4
   173f0:	e00e      	b.n	17410 <zip_iternext+0x8e>
        }
        tuple->items[i] = next;
   173f2:	68fb      	ldr	r3, [r7, #12]
   173f4:	697a      	ldr	r2, [r7, #20]
   173f6:	3202      	adds	r2, #2
   173f8:	68b9      	ldr	r1, [r7, #8]
   173fa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (size_t i = 0; i < self->n_iters; i++) {
   173fe:	697b      	ldr	r3, [r7, #20]
   17400:	3301      	adds	r3, #1
   17402:	617b      	str	r3, [r7, #20]
   17404:	693b      	ldr	r3, [r7, #16]
   17406:	685a      	ldr	r2, [r3, #4]
   17408:	697b      	ldr	r3, [r7, #20]
   1740a:	429a      	cmp	r2, r3
   1740c:	d8e0      	bhi.n	173d0 <zip_iternext+0x4e>
    }
    return MP_OBJ_FROM_PTR(tuple);
   1740e:	68fb      	ldr	r3, [r7, #12]
}
   17410:	4618      	mov	r0, r3
   17412:	3718      	adds	r7, #24
   17414:	46bd      	mov	sp, r7
   17416:	bd80      	pop	{r7, pc}
   17418:	00022288 	.word	0x00022288
   1741c:	00022218 	.word	0x00022218
   17420:	000222c4 	.word	0x000222c4
   17424:	00022274 	.word	0x00022274

00017428 <op_getitem>:
 */

#include "py/obj.h"
#include "py/builtin.h"

STATIC mp_obj_t op_getitem(mp_obj_t self_in, mp_obj_t key_in) {
   17428:	b580      	push	{r7, lr}
   1742a:	b084      	sub	sp, #16
   1742c:	af00      	add	r7, sp, #0
   1742e:	6078      	str	r0, [r7, #4]
   17430:	6039      	str	r1, [r7, #0]
    mp_obj_type_t *type = mp_obj_get_type(self_in);
   17432:	6878      	ldr	r0, [r7, #4]
   17434:	f7f6 f98c 	bl	d750 <mp_obj_get_type>
   17438:	60f8      	str	r0, [r7, #12]
    return type->subscr(self_in, key_in, MP_OBJ_SENTINEL);
   1743a:	68fb      	ldr	r3, [r7, #12]
   1743c:	6a1b      	ldr	r3, [r3, #32]
   1743e:	2208      	movs	r2, #8
   17440:	6839      	ldr	r1, [r7, #0]
   17442:	6878      	ldr	r0, [r7, #4]
   17444:	4798      	blx	r3
   17446:	4603      	mov	r3, r0
}
   17448:	4618      	mov	r0, r3
   1744a:	3710      	adds	r7, #16
   1744c:	46bd      	mov	sp, r7
   1744e:	bd80      	pop	{r7, pc}

00017450 <op_setitem>:
MP_DEFINE_CONST_FUN_OBJ_2(mp_op_getitem_obj, op_getitem);

STATIC mp_obj_t op_setitem(mp_obj_t self_in, mp_obj_t key_in, mp_obj_t value_in) {
   17450:	b580      	push	{r7, lr}
   17452:	b086      	sub	sp, #24
   17454:	af00      	add	r7, sp, #0
   17456:	60f8      	str	r0, [r7, #12]
   17458:	60b9      	str	r1, [r7, #8]
   1745a:	607a      	str	r2, [r7, #4]
    mp_obj_type_t *type = mp_obj_get_type(self_in);
   1745c:	68f8      	ldr	r0, [r7, #12]
   1745e:	f7f6 f977 	bl	d750 <mp_obj_get_type>
   17462:	6178      	str	r0, [r7, #20]
    return type->subscr(self_in, key_in, value_in);
   17464:	697b      	ldr	r3, [r7, #20]
   17466:	6a1b      	ldr	r3, [r3, #32]
   17468:	687a      	ldr	r2, [r7, #4]
   1746a:	68b9      	ldr	r1, [r7, #8]
   1746c:	68f8      	ldr	r0, [r7, #12]
   1746e:	4798      	blx	r3
   17470:	4603      	mov	r3, r0
}
   17472:	4618      	mov	r0, r3
   17474:	3718      	adds	r7, #24
   17476:	46bd      	mov	sp, r7
   17478:	bd80      	pop	{r7, pc}

0001747a <op_delitem>:
MP_DEFINE_CONST_FUN_OBJ_3(mp_op_setitem_obj, op_setitem);

STATIC mp_obj_t op_delitem(mp_obj_t self_in, mp_obj_t key_in) {
   1747a:	b580      	push	{r7, lr}
   1747c:	b084      	sub	sp, #16
   1747e:	af00      	add	r7, sp, #0
   17480:	6078      	str	r0, [r7, #4]
   17482:	6039      	str	r1, [r7, #0]
    mp_obj_type_t *type = mp_obj_get_type(self_in);
   17484:	6878      	ldr	r0, [r7, #4]
   17486:	f7f6 f963 	bl	d750 <mp_obj_get_type>
   1748a:	60f8      	str	r0, [r7, #12]
    return type->subscr(self_in, key_in, MP_OBJ_NULL);
   1748c:	68fb      	ldr	r3, [r7, #12]
   1748e:	6a1b      	ldr	r3, [r3, #32]
   17490:	2200      	movs	r2, #0
   17492:	6839      	ldr	r1, [r7, #0]
   17494:	6878      	ldr	r0, [r7, #4]
   17496:	4798      	blx	r3
   17498:	4603      	mov	r3, r0
}
   1749a:	4618      	mov	r0, r3
   1749c:	3710      	adds	r7, #16
   1749e:	46bd      	mov	sp, r7
   174a0:	bd80      	pop	{r7, pc}

000174a2 <op_contains>:
MP_DEFINE_CONST_FUN_OBJ_2(mp_op_delitem_obj, op_delitem);

STATIC mp_obj_t op_contains(mp_obj_t lhs_in, mp_obj_t rhs_in) {
   174a2:	b580      	push	{r7, lr}
   174a4:	b084      	sub	sp, #16
   174a6:	af00      	add	r7, sp, #0
   174a8:	6078      	str	r0, [r7, #4]
   174aa:	6039      	str	r1, [r7, #0]
    mp_obj_type_t *type = mp_obj_get_type(lhs_in);
   174ac:	6878      	ldr	r0, [r7, #4]
   174ae:	f7f6 f94f 	bl	d750 <mp_obj_get_type>
   174b2:	60f8      	str	r0, [r7, #12]
    return type->binary_op(MP_BINARY_OP_CONTAINS, lhs_in, rhs_in);
   174b4:	68fb      	ldr	r3, [r7, #12]
   174b6:	699b      	ldr	r3, [r3, #24]
   174b8:	683a      	ldr	r2, [r7, #0]
   174ba:	6879      	ldr	r1, [r7, #4]
   174bc:	2022      	movs	r0, #34	; 0x22
   174be:	4798      	blx	r3
   174c0:	4603      	mov	r3, r0
}
   174c2:	4618      	mov	r0, r3
   174c4:	3710      	adds	r7, #16
   174c6:	46bd      	mov	sp, r7
   174c8:	bd80      	pop	{r7, pc}
	...

000174cc <mp_seq_multiply>:

#define SWAP(type, var1, var2) { type t = var2; var2 = var1; var1 = t; }

// Implements backend of sequence * integer operation. Assumes elements are
// memory-adjacent in sequence.
void mp_seq_multiply(const void *items, size_t item_sz, size_t len, size_t times, void *dest) {
   174cc:	b580      	push	{r7, lr}
   174ce:	b086      	sub	sp, #24
   174d0:	af00      	add	r7, sp, #0
   174d2:	60f8      	str	r0, [r7, #12]
   174d4:	60b9      	str	r1, [r7, #8]
   174d6:	607a      	str	r2, [r7, #4]
   174d8:	603b      	str	r3, [r7, #0]
    for (size_t i = 0; i < times; i++) {
   174da:	2300      	movs	r3, #0
   174dc:	617b      	str	r3, [r7, #20]
   174de:	e010      	b.n	17502 <mp_seq_multiply+0x36>
        size_t copy_sz = item_sz * len;
   174e0:	68bb      	ldr	r3, [r7, #8]
   174e2:	687a      	ldr	r2, [r7, #4]
   174e4:	fb02 f303 	mul.w	r3, r2, r3
   174e8:	613b      	str	r3, [r7, #16]
        memcpy(dest, items, copy_sz);
   174ea:	693a      	ldr	r2, [r7, #16]
   174ec:	68f9      	ldr	r1, [r7, #12]
   174ee:	6a38      	ldr	r0, [r7, #32]
   174f0:	f004 fa68 	bl	1b9c4 <memcpy>
        dest = (char*)dest + copy_sz;
   174f4:	6a3a      	ldr	r2, [r7, #32]
   174f6:	693b      	ldr	r3, [r7, #16]
   174f8:	4413      	add	r3, r2
   174fa:	623b      	str	r3, [r7, #32]
    for (size_t i = 0; i < times; i++) {
   174fc:	697b      	ldr	r3, [r7, #20]
   174fe:	3301      	adds	r3, #1
   17500:	617b      	str	r3, [r7, #20]
   17502:	697a      	ldr	r2, [r7, #20]
   17504:	683b      	ldr	r3, [r7, #0]
   17506:	429a      	cmp	r2, r3
   17508:	d3ea      	bcc.n	174e0 <mp_seq_multiply+0x14>
    }
}
   1750a:	bf00      	nop
   1750c:	3718      	adds	r7, #24
   1750e:	46bd      	mov	sp, r7
   17510:	bd80      	pop	{r7, pc}

00017512 <mp_seq_extract_slice>:
    return indexes->step == 1;
}

#endif

mp_obj_t mp_seq_extract_slice(size_t len, const mp_obj_t *seq, mp_bound_slice_t *indexes) {
   17512:	b580      	push	{r7, lr}
   17514:	b088      	sub	sp, #32
   17516:	af00      	add	r7, sp, #0
   17518:	60f8      	str	r0, [r7, #12]
   1751a:	60b9      	str	r1, [r7, #8]
   1751c:	607a      	str	r2, [r7, #4]
    (void)len; // TODO can we remove len from the arg list?

    mp_int_t start = indexes->start, stop = indexes->stop;
   1751e:	687b      	ldr	r3, [r7, #4]
   17520:	681b      	ldr	r3, [r3, #0]
   17522:	61fb      	str	r3, [r7, #28]
   17524:	687b      	ldr	r3, [r7, #4]
   17526:	685b      	ldr	r3, [r3, #4]
   17528:	61bb      	str	r3, [r7, #24]
    mp_int_t step = indexes->step;
   1752a:	687b      	ldr	r3, [r7, #4]
   1752c:	689b      	ldr	r3, [r3, #8]
   1752e:	617b      	str	r3, [r7, #20]

    mp_obj_t res = mp_obj_new_list(0, NULL);
   17530:	2100      	movs	r1, #0
   17532:	2000      	movs	r0, #0
   17534:	f7fa f8d7 	bl	116e6 <mp_obj_new_list>
   17538:	6138      	str	r0, [r7, #16]

    if (step < 0) {
   1753a:	697b      	ldr	r3, [r7, #20]
   1753c:	2b00      	cmp	r3, #0
   1753e:	da1f      	bge.n	17580 <mp_seq_extract_slice+0x6e>
        while (start >= stop) {
   17540:	e00c      	b.n	1755c <mp_seq_extract_slice+0x4a>
            mp_obj_list_append(res, seq[start]);
   17542:	69fb      	ldr	r3, [r7, #28]
   17544:	009b      	lsls	r3, r3, #2
   17546:	68ba      	ldr	r2, [r7, #8]
   17548:	4413      	add	r3, r2
   1754a:	681b      	ldr	r3, [r3, #0]
   1754c:	4619      	mov	r1, r3
   1754e:	6938      	ldr	r0, [r7, #16]
   17550:	f7f9 fc5d 	bl	10e0e <mp_obj_list_append>
            start += step;
   17554:	69fa      	ldr	r2, [r7, #28]
   17556:	697b      	ldr	r3, [r7, #20]
   17558:	4413      	add	r3, r2
   1755a:	61fb      	str	r3, [r7, #28]
        while (start >= stop) {
   1755c:	69fa      	ldr	r2, [r7, #28]
   1755e:	69bb      	ldr	r3, [r7, #24]
   17560:	429a      	cmp	r2, r3
   17562:	daee      	bge.n	17542 <mp_seq_extract_slice+0x30>
   17564:	e010      	b.n	17588 <mp_seq_extract_slice+0x76>
        }
    } else {
        while (start < stop) {
            mp_obj_list_append(res, seq[start]);
   17566:	69fb      	ldr	r3, [r7, #28]
   17568:	009b      	lsls	r3, r3, #2
   1756a:	68ba      	ldr	r2, [r7, #8]
   1756c:	4413      	add	r3, r2
   1756e:	681b      	ldr	r3, [r3, #0]
   17570:	4619      	mov	r1, r3
   17572:	6938      	ldr	r0, [r7, #16]
   17574:	f7f9 fc4b 	bl	10e0e <mp_obj_list_append>
            start += step;
   17578:	69fa      	ldr	r2, [r7, #28]
   1757a:	697b      	ldr	r3, [r7, #20]
   1757c:	4413      	add	r3, r2
   1757e:	61fb      	str	r3, [r7, #28]
        while (start < stop) {
   17580:	69fa      	ldr	r2, [r7, #28]
   17582:	69bb      	ldr	r3, [r7, #24]
   17584:	429a      	cmp	r2, r3
   17586:	dbee      	blt.n	17566 <mp_seq_extract_slice+0x54>
        }
    }
    return res;
   17588:	693b      	ldr	r3, [r7, #16]
}
   1758a:	4618      	mov	r0, r3
   1758c:	3720      	adds	r7, #32
   1758e:	46bd      	mov	sp, r7
   17590:	bd80      	pop	{r7, pc}

00017592 <mp_seq_cmp_bytes>:

// Special-case comparison function for sequences of bytes
// Don't pass MP_BINARY_OP_NOT_EQUAL here
bool mp_seq_cmp_bytes(mp_uint_t op, const byte *data1, size_t len1, const byte *data2, size_t len2) {
   17592:	b580      	push	{r7, lr}
   17594:	b088      	sub	sp, #32
   17596:	af00      	add	r7, sp, #0
   17598:	60f8      	str	r0, [r7, #12]
   1759a:	60b9      	str	r1, [r7, #8]
   1759c:	607a      	str	r2, [r7, #4]
   1759e:	603b      	str	r3, [r7, #0]
    if (op == MP_BINARY_OP_EQUAL && len1 != len2) {
   175a0:	68fb      	ldr	r3, [r7, #12]
   175a2:	2b02      	cmp	r3, #2
   175a4:	d105      	bne.n	175b2 <mp_seq_cmp_bytes+0x20>
   175a6:	687a      	ldr	r2, [r7, #4]
   175a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
   175aa:	429a      	cmp	r2, r3
   175ac:	d001      	beq.n	175b2 <mp_seq_cmp_bytes+0x20>
        return false;
   175ae:	2300      	movs	r3, #0
   175b0:	e049      	b.n	17646 <mp_seq_cmp_bytes+0xb4>
    }

    // Let's deal only with > & >=
    if (op == MP_BINARY_OP_LESS || op == MP_BINARY_OP_LESS_EQUAL) {
   175b2:	68fb      	ldr	r3, [r7, #12]
   175b4:	2b00      	cmp	r3, #0
   175b6:	d002      	beq.n	175be <mp_seq_cmp_bytes+0x2c>
   175b8:	68fb      	ldr	r3, [r7, #12]
   175ba:	2b03      	cmp	r3, #3
   175bc:	d113      	bne.n	175e6 <mp_seq_cmp_bytes+0x54>
        SWAP(const byte*, data1, data2);
   175be:	683b      	ldr	r3, [r7, #0]
   175c0:	61fb      	str	r3, [r7, #28]
   175c2:	68bb      	ldr	r3, [r7, #8]
   175c4:	603b      	str	r3, [r7, #0]
   175c6:	69fb      	ldr	r3, [r7, #28]
   175c8:	60bb      	str	r3, [r7, #8]
        SWAP(size_t, len1, len2);
   175ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
   175cc:	61bb      	str	r3, [r7, #24]
   175ce:	687b      	ldr	r3, [r7, #4]
   175d0:	62bb      	str	r3, [r7, #40]	; 0x28
   175d2:	69bb      	ldr	r3, [r7, #24]
   175d4:	607b      	str	r3, [r7, #4]
        if (op == MP_BINARY_OP_LESS) {
   175d6:	68fb      	ldr	r3, [r7, #12]
   175d8:	2b00      	cmp	r3, #0
   175da:	d102      	bne.n	175e2 <mp_seq_cmp_bytes+0x50>
            op = MP_BINARY_OP_MORE;
   175dc:	2301      	movs	r3, #1
   175de:	60fb      	str	r3, [r7, #12]
   175e0:	e001      	b.n	175e6 <mp_seq_cmp_bytes+0x54>
        } else {
            op = MP_BINARY_OP_MORE_EQUAL;
   175e2:	2304      	movs	r3, #4
   175e4:	60fb      	str	r3, [r7, #12]
        }
    }
    size_t min_len = len1 < len2 ? len1 : len2;
   175e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
   175e8:	687b      	ldr	r3, [r7, #4]
   175ea:	4293      	cmp	r3, r2
   175ec:	bf28      	it	cs
   175ee:	4613      	movcs	r3, r2
   175f0:	617b      	str	r3, [r7, #20]
    int res = memcmp(data1, data2, min_len);
   175f2:	697a      	ldr	r2, [r7, #20]
   175f4:	6839      	ldr	r1, [r7, #0]
   175f6:	68b8      	ldr	r0, [r7, #8]
   175f8:	f004 fac9 	bl	1bb8e <memcmp>
   175fc:	6138      	str	r0, [r7, #16]
    if (op == MP_BINARY_OP_EQUAL) {
   175fe:	68fb      	ldr	r3, [r7, #12]
   17600:	2b02      	cmp	r3, #2
   17602:	d106      	bne.n	17612 <mp_seq_cmp_bytes+0x80>
        // If we are checking for equality, here're the answer
        return res == 0;
   17604:	693b      	ldr	r3, [r7, #16]
   17606:	2b00      	cmp	r3, #0
   17608:	bf0c      	ite	eq
   1760a:	2301      	moveq	r3, #1
   1760c:	2300      	movne	r3, #0
   1760e:	b2db      	uxtb	r3, r3
   17610:	e019      	b.n	17646 <mp_seq_cmp_bytes+0xb4>
    }
    if (res < 0) {
   17612:	693b      	ldr	r3, [r7, #16]
   17614:	2b00      	cmp	r3, #0
   17616:	da01      	bge.n	1761c <mp_seq_cmp_bytes+0x8a>
        return false;
   17618:	2300      	movs	r3, #0
   1761a:	e014      	b.n	17646 <mp_seq_cmp_bytes+0xb4>
    }
    if (res > 0) {
   1761c:	693b      	ldr	r3, [r7, #16]
   1761e:	2b00      	cmp	r3, #0
   17620:	dd01      	ble.n	17626 <mp_seq_cmp_bytes+0x94>
        return true;
   17622:	2301      	movs	r3, #1
   17624:	e00f      	b.n	17646 <mp_seq_cmp_bytes+0xb4>
    }

    // If we had tie in the last element...
    // ... and we have lists of different lengths...
    if (len1 != len2) {
   17626:	687a      	ldr	r2, [r7, #4]
   17628:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1762a:	429a      	cmp	r2, r3
   1762c:	d005      	beq.n	1763a <mp_seq_cmp_bytes+0xa8>
        if (len1 < len2) {
   1762e:	687a      	ldr	r2, [r7, #4]
   17630:	6abb      	ldr	r3, [r7, #40]	; 0x28
   17632:	429a      	cmp	r2, r3
   17634:	d206      	bcs.n	17644 <mp_seq_cmp_bytes+0xb2>
            // ... then longer list length wins (we deal only with >)
            return false;
   17636:	2300      	movs	r3, #0
   17638:	e005      	b.n	17646 <mp_seq_cmp_bytes+0xb4>
        }
    } else if (op == MP_BINARY_OP_MORE) {
   1763a:	68fb      	ldr	r3, [r7, #12]
   1763c:	2b01      	cmp	r3, #1
   1763e:	d101      	bne.n	17644 <mp_seq_cmp_bytes+0xb2>
        // Otherwise, if we have strict relation, equality means failure
        return false;
   17640:	2300      	movs	r3, #0
   17642:	e000      	b.n	17646 <mp_seq_cmp_bytes+0xb4>
    }
    return true;
   17644:	2301      	movs	r3, #1
}
   17646:	4618      	mov	r0, r3
   17648:	3720      	adds	r7, #32
   1764a:	46bd      	mov	sp, r7
   1764c:	bd80      	pop	{r7, pc}

0001764e <mp_seq_cmp_objs>:

// Special-case comparison function for sequences of mp_obj_t
// Don't pass MP_BINARY_OP_NOT_EQUAL here
bool mp_seq_cmp_objs(mp_uint_t op, const mp_obj_t *items1, size_t len1, const mp_obj_t *items2, size_t len2) {
   1764e:	b580      	push	{r7, lr}
   17650:	b088      	sub	sp, #32
   17652:	af00      	add	r7, sp, #0
   17654:	60f8      	str	r0, [r7, #12]
   17656:	60b9      	str	r1, [r7, #8]
   17658:	607a      	str	r2, [r7, #4]
   1765a:	603b      	str	r3, [r7, #0]
    if (op == MP_BINARY_OP_EQUAL && len1 != len2) {
   1765c:	68fb      	ldr	r3, [r7, #12]
   1765e:	2b02      	cmp	r3, #2
   17660:	d105      	bne.n	1766e <mp_seq_cmp_objs+0x20>
   17662:	687a      	ldr	r2, [r7, #4]
   17664:	6abb      	ldr	r3, [r7, #40]	; 0x28
   17666:	429a      	cmp	r2, r3
   17668:	d001      	beq.n	1766e <mp_seq_cmp_objs+0x20>
        return false;
   1766a:	2300      	movs	r3, #0
   1766c:	e065      	b.n	1773a <mp_seq_cmp_objs+0xec>
    }

    // Let's deal only with > & >=
    if (op == MP_BINARY_OP_LESS || op == MP_BINARY_OP_LESS_EQUAL) {
   1766e:	68fb      	ldr	r3, [r7, #12]
   17670:	2b00      	cmp	r3, #0
   17672:	d002      	beq.n	1767a <mp_seq_cmp_objs+0x2c>
   17674:	68fb      	ldr	r3, [r7, #12]
   17676:	2b03      	cmp	r3, #3
   17678:	d113      	bne.n	176a2 <mp_seq_cmp_objs+0x54>
        SWAP(const mp_obj_t *, items1, items2);
   1767a:	683b      	ldr	r3, [r7, #0]
   1767c:	61bb      	str	r3, [r7, #24]
   1767e:	68bb      	ldr	r3, [r7, #8]
   17680:	603b      	str	r3, [r7, #0]
   17682:	69bb      	ldr	r3, [r7, #24]
   17684:	60bb      	str	r3, [r7, #8]
        SWAP(size_t, len1, len2);
   17686:	6abb      	ldr	r3, [r7, #40]	; 0x28
   17688:	617b      	str	r3, [r7, #20]
   1768a:	687b      	ldr	r3, [r7, #4]
   1768c:	62bb      	str	r3, [r7, #40]	; 0x28
   1768e:	697b      	ldr	r3, [r7, #20]
   17690:	607b      	str	r3, [r7, #4]
        if (op == MP_BINARY_OP_LESS) {
   17692:	68fb      	ldr	r3, [r7, #12]
   17694:	2b00      	cmp	r3, #0
   17696:	d102      	bne.n	1769e <mp_seq_cmp_objs+0x50>
            op = MP_BINARY_OP_MORE;
   17698:	2301      	movs	r3, #1
   1769a:	60fb      	str	r3, [r7, #12]
   1769c:	e001      	b.n	176a2 <mp_seq_cmp_objs+0x54>
        } else {
            op = MP_BINARY_OP_MORE_EQUAL;
   1769e:	2304      	movs	r3, #4
   176a0:	60fb      	str	r3, [r7, #12]
        }
    }

    size_t len = len1 < len2 ? len1 : len2;
   176a2:	6aba      	ldr	r2, [r7, #40]	; 0x28
   176a4:	687b      	ldr	r3, [r7, #4]
   176a6:	4293      	cmp	r3, r2
   176a8:	bf28      	it	cs
   176aa:	4613      	movcs	r3, r2
   176ac:	613b      	str	r3, [r7, #16]
    for (size_t i = 0; i < len; i++) {
   176ae:	2300      	movs	r3, #0
   176b0:	61fb      	str	r3, [r7, #28]
   176b2:	e02e      	b.n	17712 <mp_seq_cmp_objs+0xc4>
        // If current elements equal, can't decide anything - go on
        if (mp_obj_equal(items1[i], items2[i])) {
   176b4:	69fb      	ldr	r3, [r7, #28]
   176b6:	009b      	lsls	r3, r3, #2
   176b8:	68ba      	ldr	r2, [r7, #8]
   176ba:	4413      	add	r3, r2
   176bc:	6818      	ldr	r0, [r3, #0]
   176be:	69fb      	ldr	r3, [r7, #28]
   176c0:	009b      	lsls	r3, r3, #2
   176c2:	683a      	ldr	r2, [r7, #0]
   176c4:	4413      	add	r3, r2
   176c6:	681b      	ldr	r3, [r3, #0]
   176c8:	4619      	mov	r1, r3
   176ca:	f7f6 f993 	bl	d9f4 <mp_obj_equal>
   176ce:	4603      	mov	r3, r0
   176d0:	2b00      	cmp	r3, #0
   176d2:	d003      	beq.n	176dc <mp_seq_cmp_objs+0x8e>
    for (size_t i = 0; i < len; i++) {
   176d4:	69fb      	ldr	r3, [r7, #28]
   176d6:	3301      	adds	r3, #1
   176d8:	61fb      	str	r3, [r7, #28]
   176da:	e01a      	b.n	17712 <mp_seq_cmp_objs+0xc4>
            continue;
        }

        // Othewise, if they are not equal, we can have final decision based on them
        if (op == MP_BINARY_OP_EQUAL) {
   176dc:	68fb      	ldr	r3, [r7, #12]
   176de:	2b02      	cmp	r3, #2
   176e0:	d101      	bne.n	176e6 <mp_seq_cmp_objs+0x98>
            // In particular, if we are checking for equality, here're the answer
            return false;
   176e2:	2300      	movs	r3, #0
   176e4:	e029      	b.n	1773a <mp_seq_cmp_objs+0xec>
        }

        // Otherwise, application of relation op gives the answer
        return (mp_binary_op(op, items1[i], items2[i]) == mp_const_true);
   176e6:	69fb      	ldr	r3, [r7, #28]
   176e8:	009b      	lsls	r3, r3, #2
   176ea:	68ba      	ldr	r2, [r7, #8]
   176ec:	4413      	add	r3, r2
   176ee:	6819      	ldr	r1, [r3, #0]
   176f0:	69fb      	ldr	r3, [r7, #28]
   176f2:	009b      	lsls	r3, r3, #2
   176f4:	683a      	ldr	r2, [r7, #0]
   176f6:	4413      	add	r3, r2
   176f8:	681b      	ldr	r3, [r3, #0]
   176fa:	461a      	mov	r2, r3
   176fc:	68f8      	ldr	r0, [r7, #12]
   176fe:	f7f4 f8bf 	bl	b880 <mp_binary_op>
   17702:	4602      	mov	r2, r0
   17704:	4b0f      	ldr	r3, [pc, #60]	; (17744 <mp_seq_cmp_objs+0xf6>)
   17706:	429a      	cmp	r2, r3
   17708:	bf0c      	ite	eq
   1770a:	2301      	moveq	r3, #1
   1770c:	2300      	movne	r3, #0
   1770e:	b2db      	uxtb	r3, r3
   17710:	e013      	b.n	1773a <mp_seq_cmp_objs+0xec>
    for (size_t i = 0; i < len; i++) {
   17712:	69fa      	ldr	r2, [r7, #28]
   17714:	693b      	ldr	r3, [r7, #16]
   17716:	429a      	cmp	r2, r3
   17718:	d3cc      	bcc.n	176b4 <mp_seq_cmp_objs+0x66>
    }

    // If we had tie in the last element...
    // ... and we have lists of different lengths...
    if (len1 != len2) {
   1771a:	687a      	ldr	r2, [r7, #4]
   1771c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1771e:	429a      	cmp	r2, r3
   17720:	d005      	beq.n	1772e <mp_seq_cmp_objs+0xe0>
        if (len1 < len2) {
   17722:	687a      	ldr	r2, [r7, #4]
   17724:	6abb      	ldr	r3, [r7, #40]	; 0x28
   17726:	429a      	cmp	r2, r3
   17728:	d206      	bcs.n	17738 <mp_seq_cmp_objs+0xea>
            // ... then longer list length wins (we deal only with >)
            return false;
   1772a:	2300      	movs	r3, #0
   1772c:	e005      	b.n	1773a <mp_seq_cmp_objs+0xec>
        }
    } else if (op == MP_BINARY_OP_MORE) {
   1772e:	68fb      	ldr	r3, [r7, #12]
   17730:	2b01      	cmp	r3, #1
   17732:	d101      	bne.n	17738 <mp_seq_cmp_objs+0xea>
        // Otherwise, if we have strict relation, sequence equality means failure
        return false;
   17734:	2300      	movs	r3, #0
   17736:	e000      	b.n	1773a <mp_seq_cmp_objs+0xec>
    }

    return true;
   17738:	2301      	movs	r3, #1
}
   1773a:	4618      	mov	r0, r3
   1773c:	3720      	adds	r7, #32
   1773e:	46bd      	mov	sp, r7
   17740:	bd80      	pop	{r7, pc}
   17742:	bf00      	nop
   17744:	0001f9c4 	.word	0x0001f9c4

00017748 <mp_seq_index_obj>:

// Special-case of index() which searches for mp_obj_t
mp_obj_t mp_seq_index_obj(const mp_obj_t *items, size_t len, size_t n_args, const mp_obj_t *args) {
   17748:	b580      	push	{r7, lr}
   1774a:	b08a      	sub	sp, #40	; 0x28
   1774c:	af00      	add	r7, sp, #0
   1774e:	60f8      	str	r0, [r7, #12]
   17750:	60b9      	str	r1, [r7, #8]
   17752:	607a      	str	r2, [r7, #4]
   17754:	603b      	str	r3, [r7, #0]
    mp_obj_type_t *type = mp_obj_get_type(args[0]);
   17756:	683b      	ldr	r3, [r7, #0]
   17758:	681b      	ldr	r3, [r3, #0]
   1775a:	4618      	mov	r0, r3
   1775c:	f7f5 fff8 	bl	d750 <mp_obj_get_type>
   17760:	61b8      	str	r0, [r7, #24]
    mp_obj_t value = args[1];
   17762:	683b      	ldr	r3, [r7, #0]
   17764:	685b      	ldr	r3, [r3, #4]
   17766:	617b      	str	r3, [r7, #20]
    size_t start = 0;
   17768:	2300      	movs	r3, #0
   1776a:	627b      	str	r3, [r7, #36]	; 0x24
    size_t stop = len;
   1776c:	68bb      	ldr	r3, [r7, #8]
   1776e:	623b      	str	r3, [r7, #32]

    if (n_args >= 3) {
   17770:	687b      	ldr	r3, [r7, #4]
   17772:	2b02      	cmp	r3, #2
   17774:	d914      	bls.n	177a0 <mp_seq_index_obj+0x58>
        start = mp_get_index(type, len, args[2], true);
   17776:	683b      	ldr	r3, [r7, #0]
   17778:	3308      	adds	r3, #8
   1777a:	681a      	ldr	r2, [r3, #0]
   1777c:	2301      	movs	r3, #1
   1777e:	68b9      	ldr	r1, [r7, #8]
   17780:	69b8      	ldr	r0, [r7, #24]
   17782:	f7f6 faad 	bl	dce0 <mp_get_index>
   17786:	6278      	str	r0, [r7, #36]	; 0x24
        if (n_args >= 4) {
   17788:	687b      	ldr	r3, [r7, #4]
   1778a:	2b03      	cmp	r3, #3
   1778c:	d908      	bls.n	177a0 <mp_seq_index_obj+0x58>
            stop = mp_get_index(type, len, args[3], true);
   1778e:	683b      	ldr	r3, [r7, #0]
   17790:	330c      	adds	r3, #12
   17792:	681a      	ldr	r2, [r3, #0]
   17794:	2301      	movs	r3, #1
   17796:	68b9      	ldr	r1, [r7, #8]
   17798:	69b8      	ldr	r0, [r7, #24]
   1779a:	f7f6 faa1 	bl	dce0 <mp_get_index>
   1779e:	6238      	str	r0, [r7, #32]
        }
    }

    for (size_t i = start; i < stop; i++) {
   177a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   177a2:	61fb      	str	r3, [r7, #28]
   177a4:	e013      	b.n	177ce <mp_seq_index_obj+0x86>
        if (mp_obj_equal(items[i], value)) {
   177a6:	69fb      	ldr	r3, [r7, #28]
   177a8:	009b      	lsls	r3, r3, #2
   177aa:	68fa      	ldr	r2, [r7, #12]
   177ac:	4413      	add	r3, r2
   177ae:	681b      	ldr	r3, [r3, #0]
   177b0:	6979      	ldr	r1, [r7, #20]
   177b2:	4618      	mov	r0, r3
   177b4:	f7f6 f91e 	bl	d9f4 <mp_obj_equal>
   177b8:	4603      	mov	r3, r0
   177ba:	2b00      	cmp	r3, #0
   177bc:	d004      	beq.n	177c8 <mp_seq_index_obj+0x80>
            // Common sense says this cannot overflow small int
            return MP_OBJ_NEW_SMALL_INT(i);
   177be:	69fb      	ldr	r3, [r7, #28]
   177c0:	005b      	lsls	r3, r3, #1
   177c2:	f043 0301 	orr.w	r3, r3, #1
   177c6:	e009      	b.n	177dc <mp_seq_index_obj+0x94>
    for (size_t i = start; i < stop; i++) {
   177c8:	69fb      	ldr	r3, [r7, #28]
   177ca:	3301      	adds	r3, #1
   177cc:	61fb      	str	r3, [r7, #28]
   177ce:	69fa      	ldr	r2, [r7, #28]
   177d0:	6a3b      	ldr	r3, [r7, #32]
   177d2:	429a      	cmp	r2, r3
   177d4:	d3e7      	bcc.n	177a6 <mp_seq_index_obj+0x5e>
        }
    }

    mp_raise_ValueError("object not in sequence");
   177d6:	4803      	ldr	r0, [pc, #12]	; (177e4 <mp_seq_index_obj+0x9c>)
   177d8:	f7f5 fb99 	bl	cf0e <mp_raise_ValueError>
}
   177dc:	4618      	mov	r0, r3
   177de:	3728      	adds	r7, #40	; 0x28
   177e0:	46bd      	mov	sp, r7
   177e2:	bd80      	pop	{r7, pc}
   177e4:	000222f4 	.word	0x000222f4

000177e8 <mp_seq_count_obj>:

mp_obj_t mp_seq_count_obj(const mp_obj_t *items, size_t len, mp_obj_t value) {
   177e8:	b580      	push	{r7, lr}
   177ea:	b086      	sub	sp, #24
   177ec:	af00      	add	r7, sp, #0
   177ee:	60f8      	str	r0, [r7, #12]
   177f0:	60b9      	str	r1, [r7, #8]
   177f2:	607a      	str	r2, [r7, #4]
    size_t count = 0;
   177f4:	2300      	movs	r3, #0
   177f6:	617b      	str	r3, [r7, #20]
    for (size_t i = 0; i < len; i++) {
   177f8:	2300      	movs	r3, #0
   177fa:	613b      	str	r3, [r7, #16]
   177fc:	e011      	b.n	17822 <mp_seq_count_obj+0x3a>
         if (mp_obj_equal(items[i], value)) {
   177fe:	693b      	ldr	r3, [r7, #16]
   17800:	009b      	lsls	r3, r3, #2
   17802:	68fa      	ldr	r2, [r7, #12]
   17804:	4413      	add	r3, r2
   17806:	681b      	ldr	r3, [r3, #0]
   17808:	6879      	ldr	r1, [r7, #4]
   1780a:	4618      	mov	r0, r3
   1780c:	f7f6 f8f2 	bl	d9f4 <mp_obj_equal>
   17810:	4603      	mov	r3, r0
   17812:	2b00      	cmp	r3, #0
   17814:	d002      	beq.n	1781c <mp_seq_count_obj+0x34>
              count++;
   17816:	697b      	ldr	r3, [r7, #20]
   17818:	3301      	adds	r3, #1
   1781a:	617b      	str	r3, [r7, #20]
    for (size_t i = 0; i < len; i++) {
   1781c:	693b      	ldr	r3, [r7, #16]
   1781e:	3301      	adds	r3, #1
   17820:	613b      	str	r3, [r7, #16]
   17822:	693a      	ldr	r2, [r7, #16]
   17824:	68bb      	ldr	r3, [r7, #8]
   17826:	429a      	cmp	r2, r3
   17828:	d3e9      	bcc.n	177fe <mp_seq_count_obj+0x16>
         }
    }

    // Common sense says this cannot overflow small int
    return MP_OBJ_NEW_SMALL_INT(count);
   1782a:	697b      	ldr	r3, [r7, #20]
   1782c:	005b      	lsls	r3, r3, #1
   1782e:	f043 0301 	orr.w	r3, r3, #1
}
   17832:	4618      	mov	r0, r3
   17834:	3718      	adds	r7, #24
   17836:	46bd      	mov	sp, r7
   17838:	bd80      	pop	{r7, pc}
   1783a:	bf00      	nop

0001783c <mp_binary_get_size>:

#ifndef alignof
#define alignof(type) offsetof(struct { char c; type t; }, t)
#endif

size_t mp_binary_get_size(char struct_type, char val_type, mp_uint_t *palign) {
   1783c:	b580      	push	{r7, lr}
   1783e:	b084      	sub	sp, #16
   17840:	af00      	add	r7, sp, #0
   17842:	4603      	mov	r3, r0
   17844:	603a      	str	r2, [r7, #0]
   17846:	71fb      	strb	r3, [r7, #7]
   17848:	460b      	mov	r3, r1
   1784a:	71bb      	strb	r3, [r7, #6]
    size_t size = 0;
   1784c:	2300      	movs	r3, #0
   1784e:	60fb      	str	r3, [r7, #12]
    int align = 1;
   17850:	2301      	movs	r3, #1
   17852:	60bb      	str	r3, [r7, #8]
    switch (struct_type) {
   17854:	79fb      	ldrb	r3, [r7, #7]
   17856:	2b3e      	cmp	r3, #62	; 0x3e
   17858:	d005      	beq.n	17866 <mp_binary_get_size+0x2a>
   1785a:	2b40      	cmp	r3, #64	; 0x40
   1785c:	f000 8085 	beq.w	1796a <mp_binary_get_size+0x12e>
   17860:	2b3c      	cmp	r3, #60	; 0x3c
   17862:	f040 8196 	bne.w	17b92 <mp_binary_get_size+0x356>
        case '<': case '>':
            switch (val_type) {
   17866:	79bb      	ldrb	r3, [r7, #6]
   17868:	3b42      	subs	r3, #66	; 0x42
   1786a:	2b2f      	cmp	r3, #47	; 0x2f
   1786c:	f200 8190 	bhi.w	17b90 <mp_binary_get_size+0x354>
   17870:	a201      	add	r2, pc, #4	; (adr r2, 17878 <mp_binary_get_size+0x3c>)
   17872:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   17876:	bf00      	nop
   17878:	00017939 	.word	0x00017939
   1787c:	00017b91 	.word	0x00017b91
   17880:	00017b91 	.word	0x00017b91
   17884:	00017b91 	.word	0x00017b91
   17888:	00017b91 	.word	0x00017b91
   1788c:	00017b91 	.word	0x00017b91
   17890:	0001793f 	.word	0x0001793f
   17894:	00017945 	.word	0x00017945
   17898:	00017b91 	.word	0x00017b91
   1789c:	00017b91 	.word	0x00017b91
   178a0:	0001794b 	.word	0x0001794b
   178a4:	00017b91 	.word	0x00017b91
   178a8:	00017b91 	.word	0x00017b91
   178ac:	00017957 	.word	0x00017957
   178b0:	00017957 	.word	0x00017957
   178b4:	00017951 	.word	0x00017951
   178b8:	00017b91 	.word	0x00017b91
   178bc:	00017957 	.word	0x00017957
   178c0:	00017b91 	.word	0x00017b91
   178c4:	00017b91 	.word	0x00017b91
   178c8:	00017b91 	.word	0x00017b91
   178cc:	00017b91 	.word	0x00017b91
   178d0:	00017b91 	.word	0x00017b91
   178d4:	00017b91 	.word	0x00017b91
   178d8:	00017b91 	.word	0x00017b91
   178dc:	00017b91 	.word	0x00017b91
   178e0:	00017b91 	.word	0x00017b91
   178e4:	00017b91 	.word	0x00017b91
   178e8:	00017b91 	.word	0x00017b91
   178ec:	00017b91 	.word	0x00017b91
   178f0:	00017b91 	.word	0x00017b91
   178f4:	00017b91 	.word	0x00017b91
   178f8:	00017939 	.word	0x00017939
   178fc:	00017b91 	.word	0x00017b91
   17900:	00017963 	.word	0x00017963
   17904:	00017b91 	.word	0x00017b91
   17908:	0001795d 	.word	0x0001795d
   1790c:	00017b91 	.word	0x00017b91
   17910:	0001793f 	.word	0x0001793f
   17914:	00017945 	.word	0x00017945
   17918:	00017b91 	.word	0x00017b91
   1791c:	00017b91 	.word	0x00017b91
   17920:	0001794b 	.word	0x0001794b
   17924:	00017b91 	.word	0x00017b91
   17928:	00017b91 	.word	0x00017b91
   1792c:	00017b91 	.word	0x00017b91
   17930:	00017b91 	.word	0x00017b91
   17934:	00017951 	.word	0x00017951
                case 'b': case 'B':
                    size = 1; break;
   17938:	2301      	movs	r3, #1
   1793a:	60fb      	str	r3, [r7, #12]
   1793c:	e014      	b.n	17968 <mp_binary_get_size+0x12c>
                case 'h': case 'H':
                    size = 2; break;
   1793e:	2302      	movs	r3, #2
   17940:	60fb      	str	r3, [r7, #12]
   17942:	e011      	b.n	17968 <mp_binary_get_size+0x12c>
                case 'i': case 'I':
                    size = 4; break;
   17944:	2304      	movs	r3, #4
   17946:	60fb      	str	r3, [r7, #12]
   17948:	e00e      	b.n	17968 <mp_binary_get_size+0x12c>
                case 'l': case 'L':
                    size = 4; break;
   1794a:	2304      	movs	r3, #4
   1794c:	60fb      	str	r3, [r7, #12]
   1794e:	e00b      	b.n	17968 <mp_binary_get_size+0x12c>
                case 'q': case 'Q':
                    size = 8; break;
   17950:	2308      	movs	r3, #8
   17952:	60fb      	str	r3, [r7, #12]
   17954:	e008      	b.n	17968 <mp_binary_get_size+0x12c>
                case 'P': case 'O': case 'S':
                    size = sizeof(void*); break;
   17956:	2304      	movs	r3, #4
   17958:	60fb      	str	r3, [r7, #12]
   1795a:	e005      	b.n	17968 <mp_binary_get_size+0x12c>
                case 'f':
                    size = sizeof(float); break;
   1795c:	2304      	movs	r3, #4
   1795e:	60fb      	str	r3, [r7, #12]
   17960:	e002      	b.n	17968 <mp_binary_get_size+0x12c>
                case 'd':
                    size = sizeof(double); break;
   17962:	2308      	movs	r3, #8
   17964:	60fb      	str	r3, [r7, #12]
   17966:	bf00      	nop
            }
            break;
   17968:	e112      	b.n	17b90 <mp_binary_get_size+0x354>
            // size, but that doesn't work for "bigger than int" types,
            // for example, long long may very well have long alignment
            // So, we introduce separate alignment handling, but having
            // formal support for that is different from actually supporting
            // particular (or any) ABI.
            switch (val_type) {
   1796a:	79bb      	ldrb	r3, [r7, #6]
   1796c:	3b01      	subs	r3, #1
   1796e:	2b70      	cmp	r3, #112	; 0x70
   17970:	f200 810f 	bhi.w	17b92 <mp_binary_get_size+0x356>
   17974:	a201      	add	r2, pc, #4	; (adr r2, 1797c <mp_binary_get_size+0x140>)
   17976:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1797a:	bf00      	nop
   1797c:	00017b41 	.word	0x00017b41
   17980:	00017b93 	.word	0x00017b93
   17984:	00017b93 	.word	0x00017b93
   17988:	00017b93 	.word	0x00017b93
   1798c:	00017b93 	.word	0x00017b93
   17990:	00017b93 	.word	0x00017b93
   17994:	00017b93 	.word	0x00017b93
   17998:	00017b93 	.word	0x00017b93
   1799c:	00017b93 	.word	0x00017b93
   179a0:	00017b93 	.word	0x00017b93
   179a4:	00017b93 	.word	0x00017b93
   179a8:	00017b93 	.word	0x00017b93
   179ac:	00017b93 	.word	0x00017b93
   179b0:	00017b93 	.word	0x00017b93
   179b4:	00017b93 	.word	0x00017b93
   179b8:	00017b93 	.word	0x00017b93
   179bc:	00017b93 	.word	0x00017b93
   179c0:	00017b93 	.word	0x00017b93
   179c4:	00017b93 	.word	0x00017b93
   179c8:	00017b93 	.word	0x00017b93
   179cc:	00017b93 	.word	0x00017b93
   179d0:	00017b93 	.word	0x00017b93
   179d4:	00017b93 	.word	0x00017b93
   179d8:	00017b93 	.word	0x00017b93
   179dc:	00017b93 	.word	0x00017b93
   179e0:	00017b93 	.word	0x00017b93
   179e4:	00017b93 	.word	0x00017b93
   179e8:	00017b93 	.word	0x00017b93
   179ec:	00017b93 	.word	0x00017b93
   179f0:	00017b93 	.word	0x00017b93
   179f4:	00017b93 	.word	0x00017b93
   179f8:	00017b93 	.word	0x00017b93
   179fc:	00017b93 	.word	0x00017b93
   17a00:	00017b93 	.word	0x00017b93
   17a04:	00017b93 	.word	0x00017b93
   17a08:	00017b93 	.word	0x00017b93
   17a0c:	00017b93 	.word	0x00017b93
   17a10:	00017b93 	.word	0x00017b93
   17a14:	00017b93 	.word	0x00017b93
   17a18:	00017b93 	.word	0x00017b93
   17a1c:	00017b93 	.word	0x00017b93
   17a20:	00017b93 	.word	0x00017b93
   17a24:	00017b93 	.word	0x00017b93
   17a28:	00017b93 	.word	0x00017b93
   17a2c:	00017b93 	.word	0x00017b93
   17a30:	00017b93 	.word	0x00017b93
   17a34:	00017b93 	.word	0x00017b93
   17a38:	00017b93 	.word	0x00017b93
   17a3c:	00017b93 	.word	0x00017b93
   17a40:	00017b93 	.word	0x00017b93
   17a44:	00017b93 	.word	0x00017b93
   17a48:	00017b93 	.word	0x00017b93
   17a4c:	00017b93 	.word	0x00017b93
   17a50:	00017b93 	.word	0x00017b93
   17a54:	00017b93 	.word	0x00017b93
   17a58:	00017b93 	.word	0x00017b93
   17a5c:	00017b93 	.word	0x00017b93
   17a60:	00017b93 	.word	0x00017b93
   17a64:	00017b93 	.word	0x00017b93
   17a68:	00017b93 	.word	0x00017b93
   17a6c:	00017b93 	.word	0x00017b93
   17a70:	00017b93 	.word	0x00017b93
   17a74:	00017b93 	.word	0x00017b93
   17a78:	00017b93 	.word	0x00017b93
   17a7c:	00017b93 	.word	0x00017b93
   17a80:	00017b41 	.word	0x00017b41
   17a84:	00017b93 	.word	0x00017b93
   17a88:	00017b93 	.word	0x00017b93
   17a8c:	00017b93 	.word	0x00017b93
   17a90:	00017b93 	.word	0x00017b93
   17a94:	00017b93 	.word	0x00017b93
   17a98:	00017b4b 	.word	0x00017b4b
   17a9c:	00017b55 	.word	0x00017b55
   17aa0:	00017b93 	.word	0x00017b93
   17aa4:	00017b93 	.word	0x00017b93
   17aa8:	00017b5f 	.word	0x00017b5f
   17aac:	00017b93 	.word	0x00017b93
   17ab0:	00017b93 	.word	0x00017b93
   17ab4:	00017b73 	.word	0x00017b73
   17ab8:	00017b73 	.word	0x00017b73
   17abc:	00017b69 	.word	0x00017b69
   17ac0:	00017b93 	.word	0x00017b93
   17ac4:	00017b73 	.word	0x00017b73
   17ac8:	00017b93 	.word	0x00017b93
   17acc:	00017b93 	.word	0x00017b93
   17ad0:	00017b93 	.word	0x00017b93
   17ad4:	00017b93 	.word	0x00017b93
   17ad8:	00017b93 	.word	0x00017b93
   17adc:	00017b93 	.word	0x00017b93
   17ae0:	00017b93 	.word	0x00017b93
   17ae4:	00017b93 	.word	0x00017b93
   17ae8:	00017b93 	.word	0x00017b93
   17aec:	00017b93 	.word	0x00017b93
   17af0:	00017b93 	.word	0x00017b93
   17af4:	00017b93 	.word	0x00017b93
   17af8:	00017b93 	.word	0x00017b93
   17afc:	00017b93 	.word	0x00017b93
   17b00:	00017b41 	.word	0x00017b41
   17b04:	00017b93 	.word	0x00017b93
   17b08:	00017b87 	.word	0x00017b87
   17b0c:	00017b93 	.word	0x00017b93
   17b10:	00017b7d 	.word	0x00017b7d
   17b14:	00017b93 	.word	0x00017b93
   17b18:	00017b4b 	.word	0x00017b4b
   17b1c:	00017b55 	.word	0x00017b55
   17b20:	00017b93 	.word	0x00017b93
   17b24:	00017b93 	.word	0x00017b93
   17b28:	00017b5f 	.word	0x00017b5f
   17b2c:	00017b93 	.word	0x00017b93
   17b30:	00017b93 	.word	0x00017b93
   17b34:	00017b93 	.word	0x00017b93
   17b38:	00017b93 	.word	0x00017b93
   17b3c:	00017b69 	.word	0x00017b69
                case BYTEARRAY_TYPECODE:
                case 'b': case 'B':
                    align = size = 1; break;
   17b40:	2301      	movs	r3, #1
   17b42:	60fb      	str	r3, [r7, #12]
   17b44:	2301      	movs	r3, #1
   17b46:	60bb      	str	r3, [r7, #8]
   17b48:	e023      	b.n	17b92 <mp_binary_get_size+0x356>
                case 'h': case 'H':
                    align = alignof(short);
   17b4a:	2302      	movs	r3, #2
   17b4c:	60bb      	str	r3, [r7, #8]
                    size = sizeof(short); break;
   17b4e:	2302      	movs	r3, #2
   17b50:	60fb      	str	r3, [r7, #12]
   17b52:	e01e      	b.n	17b92 <mp_binary_get_size+0x356>
                case 'i': case 'I':
                    align = alignof(int);
   17b54:	2304      	movs	r3, #4
   17b56:	60bb      	str	r3, [r7, #8]
                    size = sizeof(int); break;
   17b58:	2304      	movs	r3, #4
   17b5a:	60fb      	str	r3, [r7, #12]
   17b5c:	e019      	b.n	17b92 <mp_binary_get_size+0x356>
                case 'l': case 'L':
                    align = alignof(long);
   17b5e:	2304      	movs	r3, #4
   17b60:	60bb      	str	r3, [r7, #8]
                    size = sizeof(long); break;
   17b62:	2304      	movs	r3, #4
   17b64:	60fb      	str	r3, [r7, #12]
   17b66:	e014      	b.n	17b92 <mp_binary_get_size+0x356>
                case 'q': case 'Q':
                    align = alignof(long long);
   17b68:	2308      	movs	r3, #8
   17b6a:	60bb      	str	r3, [r7, #8]
                    size = sizeof(long long); break;
   17b6c:	2308      	movs	r3, #8
   17b6e:	60fb      	str	r3, [r7, #12]
   17b70:	e00f      	b.n	17b92 <mp_binary_get_size+0x356>
                case 'P': case 'O': case 'S':
                    align = alignof(void*);
   17b72:	2304      	movs	r3, #4
   17b74:	60bb      	str	r3, [r7, #8]
                    size = sizeof(void*); break;
   17b76:	2304      	movs	r3, #4
   17b78:	60fb      	str	r3, [r7, #12]
   17b7a:	e00a      	b.n	17b92 <mp_binary_get_size+0x356>
                case 'f':
                    align = alignof(float);
   17b7c:	2304      	movs	r3, #4
   17b7e:	60bb      	str	r3, [r7, #8]
                    size = sizeof(float); break;
   17b80:	2304      	movs	r3, #4
   17b82:	60fb      	str	r3, [r7, #12]
   17b84:	e005      	b.n	17b92 <mp_binary_get_size+0x356>
                case 'd':
                    align = alignof(double);
   17b86:	2308      	movs	r3, #8
   17b88:	60bb      	str	r3, [r7, #8]
                    size = sizeof(double); break;
   17b8a:	2308      	movs	r3, #8
   17b8c:	60fb      	str	r3, [r7, #12]
   17b8e:	e000      	b.n	17b92 <mp_binary_get_size+0x356>
            break;
   17b90:	bf00      	nop
            }
        }
    }

    if (size == 0) {
   17b92:	68fb      	ldr	r3, [r7, #12]
   17b94:	2b00      	cmp	r3, #0
   17b96:	d102      	bne.n	17b9e <mp_binary_get_size+0x362>
        mp_raise_ValueError("bad typecode");
   17b98:	4806      	ldr	r0, [pc, #24]	; (17bb4 <mp_binary_get_size+0x378>)
   17b9a:	f7f5 f9b8 	bl	cf0e <mp_raise_ValueError>
    }

    if (palign != NULL) {
   17b9e:	683b      	ldr	r3, [r7, #0]
   17ba0:	2b00      	cmp	r3, #0
   17ba2:	d002      	beq.n	17baa <mp_binary_get_size+0x36e>
        *palign = align;
   17ba4:	68ba      	ldr	r2, [r7, #8]
   17ba6:	683b      	ldr	r3, [r7, #0]
   17ba8:	601a      	str	r2, [r3, #0]
    }
    return size;
   17baa:	68fb      	ldr	r3, [r7, #12]
}
   17bac:	4618      	mov	r0, r3
   17bae:	3710      	adds	r7, #16
   17bb0:	46bd      	mov	sp, r7
   17bb2:	bd80      	pop	{r7, pc}
   17bb4:	0002230c 	.word	0x0002230c

00017bb8 <mp_binary_get_val_array>:

mp_obj_t mp_binary_get_val_array(char typecode, void *p, mp_uint_t index) {
   17bb8:	b580      	push	{r7, lr}
   17bba:	b086      	sub	sp, #24
   17bbc:	af00      	add	r7, sp, #0
   17bbe:	4603      	mov	r3, r0
   17bc0:	60b9      	str	r1, [r7, #8]
   17bc2:	607a      	str	r2, [r7, #4]
   17bc4:	73fb      	strb	r3, [r7, #15]
    mp_int_t val = 0;
   17bc6:	2300      	movs	r3, #0
   17bc8:	617b      	str	r3, [r7, #20]
    switch (typecode) {
   17bca:	7bfb      	ldrb	r3, [r7, #15]
   17bcc:	3b01      	subs	r3, #1
   17bce:	2b6b      	cmp	r3, #107	; 0x6b
   17bd0:	f200 8130 	bhi.w	17e34 <mp_binary_get_val_array+0x27c>
   17bd4:	a201      	add	r2, pc, #4	; (adr r2, 17bdc <mp_binary_get_val_array+0x24>)
   17bd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   17bda:	bf00      	nop
   17bdc:	00017d9b 	.word	0x00017d9b
   17be0:	00017e35 	.word	0x00017e35
   17be4:	00017e35 	.word	0x00017e35
   17be8:	00017e35 	.word	0x00017e35
   17bec:	00017e35 	.word	0x00017e35
   17bf0:	00017e35 	.word	0x00017e35
   17bf4:	00017e35 	.word	0x00017e35
   17bf8:	00017e35 	.word	0x00017e35
   17bfc:	00017e35 	.word	0x00017e35
   17c00:	00017e35 	.word	0x00017e35
   17c04:	00017e35 	.word	0x00017e35
   17c08:	00017e35 	.word	0x00017e35
   17c0c:	00017e35 	.word	0x00017e35
   17c10:	00017e35 	.word	0x00017e35
   17c14:	00017e35 	.word	0x00017e35
   17c18:	00017e35 	.word	0x00017e35
   17c1c:	00017e35 	.word	0x00017e35
   17c20:	00017e35 	.word	0x00017e35
   17c24:	00017e35 	.word	0x00017e35
   17c28:	00017e35 	.word	0x00017e35
   17c2c:	00017e35 	.word	0x00017e35
   17c30:	00017e35 	.word	0x00017e35
   17c34:	00017e35 	.word	0x00017e35
   17c38:	00017e35 	.word	0x00017e35
   17c3c:	00017e35 	.word	0x00017e35
   17c40:	00017e35 	.word	0x00017e35
   17c44:	00017e35 	.word	0x00017e35
   17c48:	00017e35 	.word	0x00017e35
   17c4c:	00017e35 	.word	0x00017e35
   17c50:	00017e35 	.word	0x00017e35
   17c54:	00017e35 	.word	0x00017e35
   17c58:	00017e35 	.word	0x00017e35
   17c5c:	00017e35 	.word	0x00017e35
   17c60:	00017e35 	.word	0x00017e35
   17c64:	00017e35 	.word	0x00017e35
   17c68:	00017e35 	.word	0x00017e35
   17c6c:	00017e35 	.word	0x00017e35
   17c70:	00017e35 	.word	0x00017e35
   17c74:	00017e35 	.word	0x00017e35
   17c78:	00017e35 	.word	0x00017e35
   17c7c:	00017e35 	.word	0x00017e35
   17c80:	00017e35 	.word	0x00017e35
   17c84:	00017e35 	.word	0x00017e35
   17c88:	00017e35 	.word	0x00017e35
   17c8c:	00017e35 	.word	0x00017e35
   17c90:	00017e35 	.word	0x00017e35
   17c94:	00017e35 	.word	0x00017e35
   17c98:	00017e35 	.word	0x00017e35
   17c9c:	00017e35 	.word	0x00017e35
   17ca0:	00017e35 	.word	0x00017e35
   17ca4:	00017e35 	.word	0x00017e35
   17ca8:	00017e35 	.word	0x00017e35
   17cac:	00017e35 	.word	0x00017e35
   17cb0:	00017e35 	.word	0x00017e35
   17cb4:	00017e35 	.word	0x00017e35
   17cb8:	00017e35 	.word	0x00017e35
   17cbc:	00017e35 	.word	0x00017e35
   17cc0:	00017e35 	.word	0x00017e35
   17cc4:	00017e35 	.word	0x00017e35
   17cc8:	00017e35 	.word	0x00017e35
   17ccc:	00017e35 	.word	0x00017e35
   17cd0:	00017e35 	.word	0x00017e35
   17cd4:	00017e35 	.word	0x00017e35
   17cd8:	00017e35 	.word	0x00017e35
   17cdc:	00017e35 	.word	0x00017e35
   17ce0:	00017d9b 	.word	0x00017d9b
   17ce4:	00017e35 	.word	0x00017e35
   17ce8:	00017e35 	.word	0x00017e35
   17cec:	00017e35 	.word	0x00017e35
   17cf0:	00017e35 	.word	0x00017e35
   17cf4:	00017e35 	.word	0x00017e35
   17cf8:	00017db7 	.word	0x00017db7
   17cfc:	00017dd9 	.word	0x00017dd9
   17d00:	00017e35 	.word	0x00017e35
   17d04:	00017e35 	.word	0x00017e35
   17d08:	00017e01 	.word	0x00017e01
   17d0c:	00017e35 	.word	0x00017e35
   17d10:	00017e35 	.word	0x00017e35
   17d14:	00017e15 	.word	0x00017e15
   17d18:	00017e21 	.word	0x00017e21
   17d1c:	00017e35 	.word	0x00017e35
   17d20:	00017e35 	.word	0x00017e35
   17d24:	00017e35 	.word	0x00017e35
   17d28:	00017e35 	.word	0x00017e35
   17d2c:	00017e35 	.word	0x00017e35
   17d30:	00017e35 	.word	0x00017e35
   17d34:	00017e35 	.word	0x00017e35
   17d38:	00017e35 	.word	0x00017e35
   17d3c:	00017e35 	.word	0x00017e35
   17d40:	00017e35 	.word	0x00017e35
   17d44:	00017e35 	.word	0x00017e35
   17d48:	00017e35 	.word	0x00017e35
   17d4c:	00017e35 	.word	0x00017e35
   17d50:	00017e35 	.word	0x00017e35
   17d54:	00017e35 	.word	0x00017e35
   17d58:	00017e35 	.word	0x00017e35
   17d5c:	00017e35 	.word	0x00017e35
   17d60:	00017d8d 	.word	0x00017d8d
   17d64:	00017e35 	.word	0x00017e35
   17d68:	00017e35 	.word	0x00017e35
   17d6c:	00017e35 	.word	0x00017e35
   17d70:	00017e35 	.word	0x00017e35
   17d74:	00017e35 	.word	0x00017e35
   17d78:	00017da7 	.word	0x00017da7
   17d7c:	00017dc5 	.word	0x00017dc5
   17d80:	00017e35 	.word	0x00017e35
   17d84:	00017e35 	.word	0x00017e35
   17d88:	00017ded 	.word	0x00017ded
        case 'b':
            val = ((signed char*)p)[index];
   17d8c:	68ba      	ldr	r2, [r7, #8]
   17d8e:	687b      	ldr	r3, [r7, #4]
   17d90:	4413      	add	r3, r2
   17d92:	f993 3000 	ldrsb.w	r3, [r3]
   17d96:	617b      	str	r3, [r7, #20]
            break;
   17d98:	e04c      	b.n	17e34 <mp_binary_get_val_array+0x27c>
        case BYTEARRAY_TYPECODE:
        case 'B':
            val = ((unsigned char*)p)[index];
   17d9a:	68ba      	ldr	r2, [r7, #8]
   17d9c:	687b      	ldr	r3, [r7, #4]
   17d9e:	4413      	add	r3, r2
   17da0:	781b      	ldrb	r3, [r3, #0]
   17da2:	617b      	str	r3, [r7, #20]
            break;
   17da4:	e046      	b.n	17e34 <mp_binary_get_val_array+0x27c>
        case 'h':
            val = ((short*)p)[index];
   17da6:	687b      	ldr	r3, [r7, #4]
   17da8:	005b      	lsls	r3, r3, #1
   17daa:	68ba      	ldr	r2, [r7, #8]
   17dac:	4413      	add	r3, r2
   17dae:	f9b3 3000 	ldrsh.w	r3, [r3]
   17db2:	617b      	str	r3, [r7, #20]
            break;
   17db4:	e03e      	b.n	17e34 <mp_binary_get_val_array+0x27c>
        case 'H':
            val = ((unsigned short*)p)[index];
   17db6:	687b      	ldr	r3, [r7, #4]
   17db8:	005b      	lsls	r3, r3, #1
   17dba:	68ba      	ldr	r2, [r7, #8]
   17dbc:	4413      	add	r3, r2
   17dbe:	881b      	ldrh	r3, [r3, #0]
   17dc0:	617b      	str	r3, [r7, #20]
            break;
   17dc2:	e037      	b.n	17e34 <mp_binary_get_val_array+0x27c>
        case 'i':
            return mp_obj_new_int(((int*)p)[index]);
   17dc4:	687b      	ldr	r3, [r7, #4]
   17dc6:	009b      	lsls	r3, r3, #2
   17dc8:	68ba      	ldr	r2, [r7, #8]
   17dca:	4413      	add	r3, r2
   17dcc:	681b      	ldr	r3, [r3, #0]
   17dce:	4618      	mov	r0, r3
   17dd0:	f7f8 fd0a 	bl	107e8 <mp_obj_new_int>
   17dd4:	4603      	mov	r3, r0
   17dd6:	e031      	b.n	17e3c <mp_binary_get_val_array+0x284>
        case 'I':
            return mp_obj_new_int_from_uint(((unsigned int*)p)[index]);
   17dd8:	687b      	ldr	r3, [r7, #4]
   17dda:	009b      	lsls	r3, r3, #2
   17ddc:	68ba      	ldr	r2, [r7, #8]
   17dde:	4413      	add	r3, r2
   17de0:	681b      	ldr	r3, [r3, #0]
   17de2:	4618      	mov	r0, r3
   17de4:	f7f8 fce6 	bl	107b4 <mp_obj_new_int_from_uint>
   17de8:	4603      	mov	r3, r0
   17dea:	e027      	b.n	17e3c <mp_binary_get_val_array+0x284>
        case 'l':
            return mp_obj_new_int(((long*)p)[index]);
   17dec:	687b      	ldr	r3, [r7, #4]
   17dee:	009b      	lsls	r3, r3, #2
   17df0:	68ba      	ldr	r2, [r7, #8]
   17df2:	4413      	add	r3, r2
   17df4:	681b      	ldr	r3, [r3, #0]
   17df6:	4618      	mov	r0, r3
   17df8:	f7f8 fcf6 	bl	107e8 <mp_obj_new_int>
   17dfc:	4603      	mov	r3, r0
   17dfe:	e01d      	b.n	17e3c <mp_binary_get_val_array+0x284>
        case 'L':
            return mp_obj_new_int_from_uint(((unsigned long*)p)[index]);
   17e00:	687b      	ldr	r3, [r7, #4]
   17e02:	009b      	lsls	r3, r3, #2
   17e04:	68ba      	ldr	r2, [r7, #8]
   17e06:	4413      	add	r3, r2
   17e08:	681b      	ldr	r3, [r3, #0]
   17e0a:	4618      	mov	r0, r3
   17e0c:	f7f8 fcd2 	bl	107b4 <mp_obj_new_int_from_uint>
   17e10:	4603      	mov	r3, r0
   17e12:	e013      	b.n	17e3c <mp_binary_get_val_array+0x284>
        case 'd':
            return mp_obj_new_float(((double*)p)[index]);
#endif
        // Extension to CPython: array of objects
        case 'O':
            return ((mp_obj_t*)p)[index];
   17e14:	687b      	ldr	r3, [r7, #4]
   17e16:	009b      	lsls	r3, r3, #2
   17e18:	68ba      	ldr	r2, [r7, #8]
   17e1a:	4413      	add	r3, r2
   17e1c:	681b      	ldr	r3, [r3, #0]
   17e1e:	e00d      	b.n	17e3c <mp_binary_get_val_array+0x284>
        // Extension to CPython: array of pointers
        case 'P':
            return mp_obj_new_int((mp_int_t)(uintptr_t)((void**)p)[index]);
   17e20:	687b      	ldr	r3, [r7, #4]
   17e22:	009b      	lsls	r3, r3, #2
   17e24:	68ba      	ldr	r2, [r7, #8]
   17e26:	4413      	add	r3, r2
   17e28:	681b      	ldr	r3, [r3, #0]
   17e2a:	4618      	mov	r0, r3
   17e2c:	f7f8 fcdc 	bl	107e8 <mp_obj_new_int>
   17e30:	4603      	mov	r3, r0
   17e32:	e003      	b.n	17e3c <mp_binary_get_val_array+0x284>
    }
    return MP_OBJ_NEW_SMALL_INT(val);
   17e34:	697b      	ldr	r3, [r7, #20]
   17e36:	005b      	lsls	r3, r3, #1
   17e38:	f043 0301 	orr.w	r3, r3, #1
}
   17e3c:	4618      	mov	r0, r3
   17e3e:	3718      	adds	r7, #24
   17e40:	46bd      	mov	sp, r7
   17e42:	bd80      	pop	{r7, pc}

00017e44 <mp_binary_get_int>:

// The long long type is guaranteed to hold at least 64 bits, and size is at
// most 8 (for q and Q), so we will always be able to parse the given data
// and fit it into a long long.
long long mp_binary_get_int(mp_uint_t size, bool is_signed, bool big_endian, const byte *src) {
   17e44:	b4b0      	push	{r4, r5, r7}
   17e46:	b08b      	sub	sp, #44	; 0x2c
   17e48:	af00      	add	r7, sp, #0
   17e4a:	60f8      	str	r0, [r7, #12]
   17e4c:	607b      	str	r3, [r7, #4]
   17e4e:	460b      	mov	r3, r1
   17e50:	72fb      	strb	r3, [r7, #11]
   17e52:	4613      	mov	r3, r2
   17e54:	72bb      	strb	r3, [r7, #10]
    int delta;
    if (!big_endian) {
   17e56:	7abb      	ldrb	r3, [r7, #10]
   17e58:	f083 0301 	eor.w	r3, r3, #1
   17e5c:	b2db      	uxtb	r3, r3
   17e5e:	2b00      	cmp	r3, #0
   17e60:	d008      	beq.n	17e74 <mp_binary_get_int+0x30>
        delta = -1;
   17e62:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   17e66:	627b      	str	r3, [r7, #36]	; 0x24
        src += size - 1;
   17e68:	68fb      	ldr	r3, [r7, #12]
   17e6a:	3b01      	subs	r3, #1
   17e6c:	687a      	ldr	r2, [r7, #4]
   17e6e:	4413      	add	r3, r2
   17e70:	607b      	str	r3, [r7, #4]
   17e72:	e001      	b.n	17e78 <mp_binary_get_int+0x34>
    } else {
        delta = 1;
   17e74:	2301      	movs	r3, #1
   17e76:	627b      	str	r3, [r7, #36]	; 0x24
    }

    long long val = 0;
   17e78:	f04f 0200 	mov.w	r2, #0
   17e7c:	f04f 0300 	mov.w	r3, #0
   17e80:	e9c7 2306 	strd	r2, r3, [r7, #24]
    if (is_signed && *src & 0x80) {
   17e84:	7afb      	ldrb	r3, [r7, #11]
   17e86:	2b00      	cmp	r3, #0
   17e88:	d00a      	beq.n	17ea0 <mp_binary_get_int+0x5c>
   17e8a:	687b      	ldr	r3, [r7, #4]
   17e8c:	781b      	ldrb	r3, [r3, #0]
   17e8e:	b25b      	sxtb	r3, r3
   17e90:	2b00      	cmp	r3, #0
   17e92:	da05      	bge.n	17ea0 <mp_binary_get_int+0x5c>
        val = -1;
   17e94:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   17e98:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   17e9c:	e9c7 2306 	strd	r2, r3, [r7, #24]
    }
    for (uint i = 0; i < size; i++) {
   17ea0:	2300      	movs	r3, #0
   17ea2:	617b      	str	r3, [r7, #20]
   17ea4:	e01b      	b.n	17ede <mp_binary_get_int+0x9a>
        val <<= 8;
   17ea6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
   17eaa:	021d      	lsls	r5, r3, #8
   17eac:	ea45 6512 	orr.w	r5, r5, r2, lsr #24
   17eb0:	0214      	lsls	r4, r2, #8
   17eb2:	e9c7 4506 	strd	r4, r5, [r7, #24]
        val |= *src;
   17eb6:	687b      	ldr	r3, [r7, #4]
   17eb8:	781b      	ldrb	r3, [r3, #0]
   17eba:	b2da      	uxtb	r2, r3
   17ebc:	f04f 0300 	mov.w	r3, #0
   17ec0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
   17ec4:	ea42 0200 	orr.w	r2, r2, r0
   17ec8:	ea43 0301 	orr.w	r3, r3, r1
   17ecc:	e9c7 2306 	strd	r2, r3, [r7, #24]
        src += delta;
   17ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   17ed2:	687a      	ldr	r2, [r7, #4]
   17ed4:	4413      	add	r3, r2
   17ed6:	607b      	str	r3, [r7, #4]
    for (uint i = 0; i < size; i++) {
   17ed8:	697b      	ldr	r3, [r7, #20]
   17eda:	3301      	adds	r3, #1
   17edc:	617b      	str	r3, [r7, #20]
   17ede:	697a      	ldr	r2, [r7, #20]
   17ee0:	68fb      	ldr	r3, [r7, #12]
   17ee2:	429a      	cmp	r2, r3
   17ee4:	d3df      	bcc.n	17ea6 <mp_binary_get_int+0x62>
    }

    return val;
   17ee6:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
}
   17eea:	4618      	mov	r0, r3
   17eec:	4621      	mov	r1, r4
   17eee:	372c      	adds	r7, #44	; 0x2c
   17ef0:	46bd      	mov	sp, r7
   17ef2:	bcb0      	pop	{r4, r5, r7}
   17ef4:	4770      	bx	lr

00017ef6 <mp_binary_get_val>:

#define is_signed(typecode) (typecode > 'Z')
mp_obj_t mp_binary_get_val(char struct_type, char val_type, byte **ptr) {
   17ef6:	b590      	push	{r4, r7, lr}
   17ef8:	b089      	sub	sp, #36	; 0x24
   17efa:	af00      	add	r7, sp, #0
   17efc:	4603      	mov	r3, r0
   17efe:	603a      	str	r2, [r7, #0]
   17f00:	71fb      	strb	r3, [r7, #7]
   17f02:	460b      	mov	r3, r1
   17f04:	71bb      	strb	r3, [r7, #6]
    byte *p = *ptr;
   17f06:	683b      	ldr	r3, [r7, #0]
   17f08:	681b      	ldr	r3, [r3, #0]
   17f0a:	61fb      	str	r3, [r7, #28]
    mp_uint_t align;

    size_t size = mp_binary_get_size(struct_type, val_type, &align);
   17f0c:	f107 0208 	add.w	r2, r7, #8
   17f10:	79b9      	ldrb	r1, [r7, #6]
   17f12:	79fb      	ldrb	r3, [r7, #7]
   17f14:	4618      	mov	r0, r3
   17f16:	f7ff fc91 	bl	1783c <mp_binary_get_size>
   17f1a:	61b8      	str	r0, [r7, #24]
    if (struct_type == '@') {
   17f1c:	79fb      	ldrb	r3, [r7, #7]
   17f1e:	2b40      	cmp	r3, #64	; 0x40
   17f20:	d109      	bne.n	17f36 <mp_binary_get_val+0x40>
        // Make pointer aligned
        p = (byte*)MP_ALIGN(p, (size_t)align);
   17f22:	68ba      	ldr	r2, [r7, #8]
   17f24:	69fb      	ldr	r3, [r7, #28]
   17f26:	4413      	add	r3, r2
   17f28:	1e5a      	subs	r2, r3, #1
   17f2a:	68bb      	ldr	r3, [r7, #8]
   17f2c:	425b      	negs	r3, r3
   17f2e:	4013      	ands	r3, r2
   17f30:	61fb      	str	r3, [r7, #28]
        #if MP_ENDIANNESS_LITTLE
        struct_type = '<';
   17f32:	233c      	movs	r3, #60	; 0x3c
   17f34:	71fb      	strb	r3, [r7, #7]
        #else
        struct_type = '>';
        #endif
    }
    *ptr = p + size;
   17f36:	69fa      	ldr	r2, [r7, #28]
   17f38:	69bb      	ldr	r3, [r7, #24]
   17f3a:	441a      	add	r2, r3
   17f3c:	683b      	ldr	r3, [r7, #0]
   17f3e:	601a      	str	r2, [r3, #0]

    long long val = mp_binary_get_int(size, is_signed(val_type), (struct_type == '>'), p);
   17f40:	79bb      	ldrb	r3, [r7, #6]
   17f42:	2b5a      	cmp	r3, #90	; 0x5a
   17f44:	bf8c      	ite	hi
   17f46:	2301      	movhi	r3, #1
   17f48:	2300      	movls	r3, #0
   17f4a:	b2d9      	uxtb	r1, r3
   17f4c:	79fb      	ldrb	r3, [r7, #7]
   17f4e:	2b3e      	cmp	r3, #62	; 0x3e
   17f50:	bf0c      	ite	eq
   17f52:	2301      	moveq	r3, #1
   17f54:	2300      	movne	r3, #0
   17f56:	b2da      	uxtb	r2, r3
   17f58:	69fb      	ldr	r3, [r7, #28]
   17f5a:	69b8      	ldr	r0, [r7, #24]
   17f5c:	f7ff ff72 	bl	17e44 <mp_binary_get_int>
   17f60:	e9c7 0104 	strd	r0, r1, [r7, #16]

    if (val_type == 'O') {
   17f64:	79bb      	ldrb	r3, [r7, #6]
   17f66:	2b4f      	cmp	r3, #79	; 0x4f
   17f68:	d101      	bne.n	17f6e <mp_binary_get_val+0x78>
        return (mp_obj_t)(mp_uint_t)val;
   17f6a:	693b      	ldr	r3, [r7, #16]
   17f6c:	e045      	b.n	17ffa <mp_binary_get_val+0x104>
    } else if (val_type == 'S') {
   17f6e:	79bb      	ldrb	r3, [r7, #6]
   17f70:	2b53      	cmp	r3, #83	; 0x53
   17f72:	d10b      	bne.n	17f8c <mp_binary_get_val+0x96>
        const char *s_val = (const char*)(uintptr_t)(mp_uint_t)val;
   17f74:	693b      	ldr	r3, [r7, #16]
   17f76:	60fb      	str	r3, [r7, #12]
        return mp_obj_new_str(s_val, strlen(s_val));
   17f78:	68f8      	ldr	r0, [r7, #12]
   17f7a:	f003 fe59 	bl	1bc30 <strlen>
   17f7e:	4603      	mov	r3, r0
   17f80:	4619      	mov	r1, r3
   17f82:	68f8      	ldr	r0, [r7, #12]
   17f84:	f7fd f912 	bl	151ac <mp_obj_new_str>
   17f88:	4603      	mov	r3, r0
   17f8a:	e036      	b.n	17ffa <mp_binary_get_val+0x104>
        return mp_obj_new_float(fpu.f);
    } else if (val_type == 'd') {
        union { uint64_t i; double f; } fpu = {val};
        return mp_obj_new_float(fpu.f);
#endif
    } else if (is_signed(val_type)) {
   17f8c:	79bb      	ldrb	r3, [r7, #6]
   17f8e:	2b5a      	cmp	r3, #90	; 0x5a
   17f90:	d91c      	bls.n	17fcc <mp_binary_get_val+0xd6>
        if ((long long)MP_SMALL_INT_MIN <= val && val <= (long long)MP_SMALL_INT_MAX) {
   17f92:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
   17f96:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
   17f9a:	f174 33ff 	sbcs.w	r3, r4, #4294967295	; 0xffffffff
   17f9e:	db0f      	blt.n	17fc0 <mp_binary_get_val+0xca>
   17fa0:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
   17fa4:	f06f 4140 	mvn.w	r1, #3221225472	; 0xc0000000
   17fa8:	f04f 0200 	mov.w	r2, #0
   17fac:	4299      	cmp	r1, r3
   17fae:	eb72 0304 	sbcs.w	r3, r2, r4
   17fb2:	db05      	blt.n	17fc0 <mp_binary_get_val+0xca>
            return mp_obj_new_int((mp_int_t)val);
   17fb4:	693b      	ldr	r3, [r7, #16]
   17fb6:	4618      	mov	r0, r3
   17fb8:	f7f8 fc16 	bl	107e8 <mp_obj_new_int>
   17fbc:	4603      	mov	r3, r0
   17fbe:	e01c      	b.n	17ffa <mp_binary_get_val+0x104>
        } else {
            return mp_obj_new_int_from_ll(val);
   17fc0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
   17fc4:	f7f8 fbda 	bl	1077c <mp_obj_new_int_from_ll>
   17fc8:	4603      	mov	r3, r0
   17fca:	e016      	b.n	17ffa <mp_binary_get_val+0x104>
        }
    } else {
        if ((unsigned long long)val <= (unsigned long long)MP_SMALL_INT_MAX) {
   17fcc:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
   17fd0:	f06f 4140 	mvn.w	r1, #3221225472	; 0xc0000000
   17fd4:	f04f 0200 	mov.w	r2, #0
   17fd8:	42a2      	cmp	r2, r4
   17fda:	bf08      	it	eq
   17fdc:	4299      	cmpeq	r1, r3
   17fde:	d305      	bcc.n	17fec <mp_binary_get_val+0xf6>
            return mp_obj_new_int_from_uint((mp_uint_t)val);
   17fe0:	693b      	ldr	r3, [r7, #16]
   17fe2:	4618      	mov	r0, r3
   17fe4:	f7f8 fbe6 	bl	107b4 <mp_obj_new_int_from_uint>
   17fe8:	4603      	mov	r3, r0
   17fea:	e006      	b.n	17ffa <mp_binary_get_val+0x104>
        } else {
            return mp_obj_new_int_from_ull(val);
   17fec:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
   17ff0:	4618      	mov	r0, r3
   17ff2:	4621      	mov	r1, r4
   17ff4:	f7f8 fbd0 	bl	10798 <mp_obj_new_int_from_ull>
   17ff8:	4603      	mov	r3, r0
        }
    }
}
   17ffa:	4618      	mov	r0, r3
   17ffc:	3724      	adds	r7, #36	; 0x24
   17ffe:	46bd      	mov	sp, r7
   18000:	bd90      	pop	{r4, r7, pc}

00018002 <mp_binary_set_int>:

void mp_binary_set_int(mp_uint_t val_sz, bool big_endian, byte *dest, mp_uint_t val) {
   18002:	b580      	push	{r7, lr}
   18004:	b086      	sub	sp, #24
   18006:	af00      	add	r7, sp, #0
   18008:	60f8      	str	r0, [r7, #12]
   1800a:	607a      	str	r2, [r7, #4]
   1800c:	603b      	str	r3, [r7, #0]
   1800e:	460b      	mov	r3, r1
   18010:	72fb      	strb	r3, [r7, #11]
    if (MP_ENDIANNESS_LITTLE && !big_endian) {
   18012:	7afb      	ldrb	r3, [r7, #11]
   18014:	f083 0301 	eor.w	r3, r3, #1
   18018:	b2db      	uxtb	r3, r3
   1801a:	2b00      	cmp	r3, #0
   1801c:	d006      	beq.n	1802c <mp_binary_set_int+0x2a>
        memcpy(dest, &val, val_sz);
   1801e:	463b      	mov	r3, r7
   18020:	68fa      	ldr	r2, [r7, #12]
   18022:	4619      	mov	r1, r3
   18024:	6878      	ldr	r0, [r7, #4]
   18026:	f003 fccd 	bl	1b9c4 <memcpy>
        }
        while (val_sz--) {
            *dest++ = *--src;
        }
    }
}
   1802a:	e012      	b.n	18052 <mp_binary_set_int+0x50>
            src = (const byte*)&val + val_sz;
   1802c:	463a      	mov	r2, r7
   1802e:	68fb      	ldr	r3, [r7, #12]
   18030:	4413      	add	r3, r2
   18032:	617b      	str	r3, [r7, #20]
        while (val_sz--) {
   18034:	e008      	b.n	18048 <mp_binary_set_int+0x46>
            *dest++ = *--src;
   18036:	687b      	ldr	r3, [r7, #4]
   18038:	1c5a      	adds	r2, r3, #1
   1803a:	607a      	str	r2, [r7, #4]
   1803c:	697a      	ldr	r2, [r7, #20]
   1803e:	3a01      	subs	r2, #1
   18040:	617a      	str	r2, [r7, #20]
   18042:	697a      	ldr	r2, [r7, #20]
   18044:	7812      	ldrb	r2, [r2, #0]
   18046:	701a      	strb	r2, [r3, #0]
        while (val_sz--) {
   18048:	68fb      	ldr	r3, [r7, #12]
   1804a:	1e5a      	subs	r2, r3, #1
   1804c:	60fa      	str	r2, [r7, #12]
   1804e:	2b00      	cmp	r3, #0
   18050:	d1f1      	bne.n	18036 <mp_binary_set_int+0x34>
}
   18052:	bf00      	nop
   18054:	3718      	adds	r7, #24
   18056:	46bd      	mov	sp, r7
   18058:	bd80      	pop	{r7, pc}

0001805a <mp_binary_set_val>:

void mp_binary_set_val(char struct_type, char val_type, mp_obj_t val_in, byte **ptr) {
   1805a:	b580      	push	{r7, lr}
   1805c:	b08a      	sub	sp, #40	; 0x28
   1805e:	af00      	add	r7, sp, #0
   18060:	60ba      	str	r2, [r7, #8]
   18062:	607b      	str	r3, [r7, #4]
   18064:	4603      	mov	r3, r0
   18066:	73fb      	strb	r3, [r7, #15]
   18068:	460b      	mov	r3, r1
   1806a:	73bb      	strb	r3, [r7, #14]
    byte *p = *ptr;
   1806c:	687b      	ldr	r3, [r7, #4]
   1806e:	681b      	ldr	r3, [r3, #0]
   18070:	627b      	str	r3, [r7, #36]	; 0x24
    mp_uint_t align;

    size_t size = mp_binary_get_size(struct_type, val_type, &align);
   18072:	f107 0214 	add.w	r2, r7, #20
   18076:	7bb9      	ldrb	r1, [r7, #14]
   18078:	7bfb      	ldrb	r3, [r7, #15]
   1807a:	4618      	mov	r0, r3
   1807c:	f7ff fbde 	bl	1783c <mp_binary_get_size>
   18080:	61f8      	str	r0, [r7, #28]
    if (struct_type == '@') {
   18082:	7bfb      	ldrb	r3, [r7, #15]
   18084:	2b40      	cmp	r3, #64	; 0x40
   18086:	d109      	bne.n	1809c <mp_binary_set_val+0x42>
        // Make pointer aligned
        p = (byte*)MP_ALIGN(p, (size_t)align);
   18088:	697a      	ldr	r2, [r7, #20]
   1808a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1808c:	4413      	add	r3, r2
   1808e:	1e5a      	subs	r2, r3, #1
   18090:	697b      	ldr	r3, [r7, #20]
   18092:	425b      	negs	r3, r3
   18094:	4013      	ands	r3, r2
   18096:	627b      	str	r3, [r7, #36]	; 0x24
        if (MP_ENDIANNESS_LITTLE) {
            struct_type = '<';
   18098:	233c      	movs	r3, #60	; 0x3c
   1809a:	73fb      	strb	r3, [r7, #15]
        } else {
            struct_type = '>';
        }
    }
    *ptr = p + size;
   1809c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   1809e:	69fb      	ldr	r3, [r7, #28]
   180a0:	441a      	add	r2, r3
   180a2:	687b      	ldr	r3, [r7, #4]
   180a4:	601a      	str	r2, [r3, #0]

    mp_uint_t val;
    switch (val_type) {
   180a6:	7bbb      	ldrb	r3, [r7, #14]
   180a8:	2b4f      	cmp	r3, #79	; 0x4f
   180aa:	d102      	bne.n	180b2 <mp_binary_set_val+0x58>
        case 'O':
            val = (mp_uint_t)val_in;
   180ac:	68bb      	ldr	r3, [r7, #8]
   180ae:	623b      	str	r3, [r7, #32]
            break;
   180b0:	e01e      	b.n	180f0 <mp_binary_set_val+0x96>
                mp_obj_int_to_bytes_impl(val_in, struct_type == '>', size, p);
                return;
            } else
            #endif
            {
                val = mp_obj_get_int(val_in);
   180b2:	68b8      	ldr	r0, [r7, #8]
   180b4:	f7f5 fd28 	bl	db08 <mp_obj_get_int>
   180b8:	4603      	mov	r3, r0
   180ba:	623b      	str	r3, [r7, #32]
                // zero/sign extend if needed
                if (BYTES_PER_WORD < 8 && size > sizeof(val)) {
   180bc:	69fb      	ldr	r3, [r7, #28]
   180be:	2b04      	cmp	r3, #4
   180c0:	d916      	bls.n	180f0 <mp_binary_set_val+0x96>
                    int c = (is_signed(val_type) && (mp_int_t)val < 0) ? 0xff : 0x00;
   180c2:	7bbb      	ldrb	r3, [r7, #14]
   180c4:	2b5a      	cmp	r3, #90	; 0x5a
   180c6:	d904      	bls.n	180d2 <mp_binary_set_val+0x78>
   180c8:	6a3b      	ldr	r3, [r7, #32]
   180ca:	2b00      	cmp	r3, #0
   180cc:	da01      	bge.n	180d2 <mp_binary_set_val+0x78>
   180ce:	23ff      	movs	r3, #255	; 0xff
   180d0:	e000      	b.n	180d4 <mp_binary_set_val+0x7a>
   180d2:	2300      	movs	r3, #0
   180d4:	61bb      	str	r3, [r7, #24]
                    memset(p, c, size);
   180d6:	69fa      	ldr	r2, [r7, #28]
   180d8:	69b9      	ldr	r1, [r7, #24]
   180da:	6a78      	ldr	r0, [r7, #36]	; 0x24
   180dc:	f003 fd0c 	bl	1baf8 <memset>
                    if (struct_type == '>') {
   180e0:	7bfb      	ldrb	r3, [r7, #15]
   180e2:	2b3e      	cmp	r3, #62	; 0x3e
   180e4:	d104      	bne.n	180f0 <mp_binary_set_val+0x96>
                        p += size - sizeof(val);
   180e6:	69fb      	ldr	r3, [r7, #28]
   180e8:	3b04      	subs	r3, #4
   180ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   180ec:	4413      	add	r3, r2
   180ee:	627b      	str	r3, [r7, #36]	; 0x24
                    }
                }
            }
    }

    mp_binary_set_int(MIN((size_t)size, sizeof(val)), struct_type == '>', p, val);
   180f0:	69fb      	ldr	r3, [r7, #28]
   180f2:	2b04      	cmp	r3, #4
   180f4:	bf28      	it	cs
   180f6:	2304      	movcs	r3, #4
   180f8:	4618      	mov	r0, r3
   180fa:	7bfb      	ldrb	r3, [r7, #15]
   180fc:	2b3e      	cmp	r3, #62	; 0x3e
   180fe:	bf0c      	ite	eq
   18100:	2301      	moveq	r3, #1
   18102:	2300      	movne	r3, #0
   18104:	b2d9      	uxtb	r1, r3
   18106:	6a3b      	ldr	r3, [r7, #32]
   18108:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   1810a:	f7ff ff7a 	bl	18002 <mp_binary_set_int>
}
   1810e:	bf00      	nop
   18110:	3728      	adds	r7, #40	; 0x28
   18112:	46bd      	mov	sp, r7
   18114:	bd80      	pop	{r7, pc}

00018116 <mp_binary_set_val_array>:

void mp_binary_set_val_array(char typecode, void *p, mp_uint_t index, mp_obj_t val_in) {
   18116:	b580      	push	{r7, lr}
   18118:	b084      	sub	sp, #16
   1811a:	af00      	add	r7, sp, #0
   1811c:	60b9      	str	r1, [r7, #8]
   1811e:	607a      	str	r2, [r7, #4]
   18120:	603b      	str	r3, [r7, #0]
   18122:	4603      	mov	r3, r0
   18124:	73fb      	strb	r3, [r7, #15]
    switch (typecode) {
   18126:	7bfb      	ldrb	r3, [r7, #15]
   18128:	2b4f      	cmp	r3, #79	; 0x4f
   1812a:	d106      	bne.n	1813a <mp_binary_set_val_array+0x24>
            ((double*)p)[index] = mp_obj_get_float(val_in);
            break;
#endif
        // Extension to CPython: array of objects
        case 'O':
            ((mp_obj_t*)p)[index] = val_in;
   1812c:	687b      	ldr	r3, [r7, #4]
   1812e:	009b      	lsls	r3, r3, #2
   18130:	68ba      	ldr	r2, [r7, #8]
   18132:	4413      	add	r3, r2
   18134:	683a      	ldr	r2, [r7, #0]
   18136:	601a      	str	r2, [r3, #0]
            break;
   18138:	e008      	b.n	1814c <mp_binary_set_val_array+0x36>
                mp_obj_int_to_bytes_impl(val_in, MP_ENDIANNESS_BIG,
                    size, (uint8_t*)p + index * size);
                return;
            }
            #endif
            mp_binary_set_val_array_from_int(typecode, p, index, mp_obj_get_int(val_in));
   1813a:	6838      	ldr	r0, [r7, #0]
   1813c:	f7f5 fce4 	bl	db08 <mp_obj_get_int>
   18140:	4603      	mov	r3, r0
   18142:	7bf8      	ldrb	r0, [r7, #15]
   18144:	687a      	ldr	r2, [r7, #4]
   18146:	68b9      	ldr	r1, [r7, #8]
   18148:	f000 f804 	bl	18154 <mp_binary_set_val_array_from_int>
    }
}
   1814c:	bf00      	nop
   1814e:	3710      	adds	r7, #16
   18150:	46bd      	mov	sp, r7
   18152:	bd80      	pop	{r7, pc}

00018154 <mp_binary_set_val_array_from_int>:

void mp_binary_set_val_array_from_int(char typecode, void *p, mp_uint_t index, mp_int_t val) {
   18154:	b480      	push	{r7}
   18156:	b085      	sub	sp, #20
   18158:	af00      	add	r7, sp, #0
   1815a:	60b9      	str	r1, [r7, #8]
   1815c:	607a      	str	r2, [r7, #4]
   1815e:	603b      	str	r3, [r7, #0]
   18160:	4603      	mov	r3, r0
   18162:	73fb      	strb	r3, [r7, #15]
    switch (typecode) {
   18164:	7bfb      	ldrb	r3, [r7, #15]
   18166:	2b4c      	cmp	r3, #76	; 0x4c
   18168:	d04e      	beq.n	18208 <mp_binary_set_val_array_from_int+0xb4>
   1816a:	2b4c      	cmp	r3, #76	; 0x4c
   1816c:	dc0b      	bgt.n	18186 <mp_binary_set_val_array_from_int+0x32>
   1816e:	2b42      	cmp	r3, #66	; 0x42
   18170:	d01e      	beq.n	181b0 <mp_binary_set_val_array_from_int+0x5c>
   18172:	2b42      	cmp	r3, #66	; 0x42
   18174:	dc02      	bgt.n	1817c <mp_binary_set_val_array_from_int+0x28>
   18176:	2b01      	cmp	r3, #1
   18178:	d01a      	beq.n	181b0 <mp_binary_set_val_array_from_int+0x5c>
        // Extension to CPython: array of pointers
        case 'P':
            ((void**)p)[index] = (void*)(uintptr_t)val;
            break;
    }
}
   1817a:	e053      	b.n	18224 <mp_binary_set_val_array_from_int+0xd0>
    switch (typecode) {
   1817c:	2b48      	cmp	r3, #72	; 0x48
   1817e:	d026      	beq.n	181ce <mp_binary_set_val_array_from_int+0x7a>
   18180:	2b49      	cmp	r3, #73	; 0x49
   18182:	d033      	beq.n	181ec <mp_binary_set_val_array_from_int+0x98>
}
   18184:	e04e      	b.n	18224 <mp_binary_set_val_array_from_int+0xd0>
    switch (typecode) {
   18186:	2b68      	cmp	r3, #104	; 0x68
   18188:	d019      	beq.n	181be <mp_binary_set_val_array_from_int+0x6a>
   1818a:	2b68      	cmp	r3, #104	; 0x68
   1818c:	dc04      	bgt.n	18198 <mp_binary_set_val_array_from_int+0x44>
   1818e:	2b50      	cmp	r3, #80	; 0x50
   18190:	d041      	beq.n	18216 <mp_binary_set_val_array_from_int+0xc2>
   18192:	2b62      	cmp	r3, #98	; 0x62
   18194:	d005      	beq.n	181a2 <mp_binary_set_val_array_from_int+0x4e>
}
   18196:	e045      	b.n	18224 <mp_binary_set_val_array_from_int+0xd0>
    switch (typecode) {
   18198:	2b69      	cmp	r3, #105	; 0x69
   1819a:	d020      	beq.n	181de <mp_binary_set_val_array_from_int+0x8a>
   1819c:	2b6c      	cmp	r3, #108	; 0x6c
   1819e:	d02c      	beq.n	181fa <mp_binary_set_val_array_from_int+0xa6>
}
   181a0:	e040      	b.n	18224 <mp_binary_set_val_array_from_int+0xd0>
            ((signed char*)p)[index] = val;
   181a2:	68ba      	ldr	r2, [r7, #8]
   181a4:	687b      	ldr	r3, [r7, #4]
   181a6:	4413      	add	r3, r2
   181a8:	683a      	ldr	r2, [r7, #0]
   181aa:	b252      	sxtb	r2, r2
   181ac:	701a      	strb	r2, [r3, #0]
            break;
   181ae:	e039      	b.n	18224 <mp_binary_set_val_array_from_int+0xd0>
            ((unsigned char*)p)[index] = val;
   181b0:	68ba      	ldr	r2, [r7, #8]
   181b2:	687b      	ldr	r3, [r7, #4]
   181b4:	4413      	add	r3, r2
   181b6:	683a      	ldr	r2, [r7, #0]
   181b8:	b2d2      	uxtb	r2, r2
   181ba:	701a      	strb	r2, [r3, #0]
            break;
   181bc:	e032      	b.n	18224 <mp_binary_set_val_array_from_int+0xd0>
            ((short*)p)[index] = val;
   181be:	687b      	ldr	r3, [r7, #4]
   181c0:	005b      	lsls	r3, r3, #1
   181c2:	68ba      	ldr	r2, [r7, #8]
   181c4:	4413      	add	r3, r2
   181c6:	683a      	ldr	r2, [r7, #0]
   181c8:	b212      	sxth	r2, r2
   181ca:	801a      	strh	r2, [r3, #0]
            break;
   181cc:	e02a      	b.n	18224 <mp_binary_set_val_array_from_int+0xd0>
            ((unsigned short*)p)[index] = val;
   181ce:	687b      	ldr	r3, [r7, #4]
   181d0:	005b      	lsls	r3, r3, #1
   181d2:	68ba      	ldr	r2, [r7, #8]
   181d4:	4413      	add	r3, r2
   181d6:	683a      	ldr	r2, [r7, #0]
   181d8:	b292      	uxth	r2, r2
   181da:	801a      	strh	r2, [r3, #0]
            break;
   181dc:	e022      	b.n	18224 <mp_binary_set_val_array_from_int+0xd0>
            ((int*)p)[index] = val;
   181de:	687b      	ldr	r3, [r7, #4]
   181e0:	009b      	lsls	r3, r3, #2
   181e2:	68ba      	ldr	r2, [r7, #8]
   181e4:	4413      	add	r3, r2
   181e6:	683a      	ldr	r2, [r7, #0]
   181e8:	601a      	str	r2, [r3, #0]
            break;
   181ea:	e01b      	b.n	18224 <mp_binary_set_val_array_from_int+0xd0>
            ((unsigned int*)p)[index] = val;
   181ec:	687b      	ldr	r3, [r7, #4]
   181ee:	009b      	lsls	r3, r3, #2
   181f0:	68ba      	ldr	r2, [r7, #8]
   181f2:	4413      	add	r3, r2
   181f4:	683a      	ldr	r2, [r7, #0]
   181f6:	601a      	str	r2, [r3, #0]
            break;
   181f8:	e014      	b.n	18224 <mp_binary_set_val_array_from_int+0xd0>
            ((long*)p)[index] = val;
   181fa:	687b      	ldr	r3, [r7, #4]
   181fc:	009b      	lsls	r3, r3, #2
   181fe:	68ba      	ldr	r2, [r7, #8]
   18200:	4413      	add	r3, r2
   18202:	683a      	ldr	r2, [r7, #0]
   18204:	601a      	str	r2, [r3, #0]
            break;
   18206:	e00d      	b.n	18224 <mp_binary_set_val_array_from_int+0xd0>
            ((unsigned long*)p)[index] = val;
   18208:	687b      	ldr	r3, [r7, #4]
   1820a:	009b      	lsls	r3, r3, #2
   1820c:	68ba      	ldr	r2, [r7, #8]
   1820e:	4413      	add	r3, r2
   18210:	683a      	ldr	r2, [r7, #0]
   18212:	601a      	str	r2, [r3, #0]
            break;
   18214:	e006      	b.n	18224 <mp_binary_set_val_array_from_int+0xd0>
            ((void**)p)[index] = (void*)(uintptr_t)val;
   18216:	687b      	ldr	r3, [r7, #4]
   18218:	009b      	lsls	r3, r3, #2
   1821a:	68ba      	ldr	r2, [r7, #8]
   1821c:	4413      	add	r3, r2
   1821e:	683a      	ldr	r2, [r7, #0]
   18220:	601a      	str	r2, [r3, #0]
            break;
   18222:	bf00      	nop
}
   18224:	bf00      	nop
   18226:	3714      	adds	r7, #20
   18228:	46bd      	mov	sp, r7
   1822a:	f85d 7b04 	ldr.w	r7, [sp], #4
   1822e:	4770      	bx	lr

00018230 <vstr_str>:
static inline char *vstr_str(vstr_t *vstr) { return vstr->buf; }
   18230:	b480      	push	{r7}
   18232:	b083      	sub	sp, #12
   18234:	af00      	add	r7, sp, #0
   18236:	6078      	str	r0, [r7, #4]
   18238:	687b      	ldr	r3, [r7, #4]
   1823a:	689b      	ldr	r3, [r3, #8]
   1823c:	4618      	mov	r0, r3
   1823e:	370c      	adds	r7, #12
   18240:	46bd      	mov	sp, r7
   18242:	f85d 7b04 	ldr.w	r7, [sp], #4
   18246:	4770      	bx	lr

00018248 <vstr_len>:
static inline size_t vstr_len(vstr_t *vstr) { return vstr->len; }
   18248:	b480      	push	{r7}
   1824a:	b083      	sub	sp, #12
   1824c:	af00      	add	r7, sp, #0
   1824e:	6078      	str	r0, [r7, #4]
   18250:	687b      	ldr	r3, [r7, #4]
   18252:	685b      	ldr	r3, [r3, #4]
   18254:	4618      	mov	r0, r3
   18256:	370c      	adds	r7, #12
   18258:	46bd      	mov	sp, r7
   1825a:	f85d 7b04 	ldr.w	r7, [sp], #4
   1825e:	4770      	bx	lr

00018260 <mp_local_free>:
static inline void mp_local_free(void *ptr) {
   18260:	b480      	push	{r7}
   18262:	b083      	sub	sp, #12
   18264:	af00      	add	r7, sp, #0
   18266:	6078      	str	r0, [r7, #4]
}
   18268:	bf00      	nop
   1826a:	370c      	adds	r7, #12
   1826c:	46bd      	mov	sp, r7
   1826e:	f85d 7b04 	ldr.w	r7, [sp], #4
   18272:	4770      	bx	lr

00018274 <mp_locals_get>:
static inline mp_obj_dict_t *mp_locals_get(void) { return MP_STATE_THREAD(dict_locals); }
   18274:	b480      	push	{r7}
   18276:	af00      	add	r7, sp, #0
   18278:	4b03      	ldr	r3, [pc, #12]	; (18288 <mp_locals_get+0x14>)
   1827a:	685b      	ldr	r3, [r3, #4]
   1827c:	4618      	mov	r0, r3
   1827e:	46bd      	mov	sp, r7
   18280:	f85d 7b04 	ldr.w	r7, [sp], #4
   18284:	4770      	bx	lr
   18286:	bf00      	nop
   18288:	20000a2c 	.word	0x20000a2c

0001828c <mp_locals_set>:
static inline void mp_locals_set(mp_obj_dict_t *d) { MP_STATE_THREAD(dict_locals) = d; }
   1828c:	b480      	push	{r7}
   1828e:	b083      	sub	sp, #12
   18290:	af00      	add	r7, sp, #0
   18292:	6078      	str	r0, [r7, #4]
   18294:	4a04      	ldr	r2, [pc, #16]	; (182a8 <mp_locals_set+0x1c>)
   18296:	687b      	ldr	r3, [r7, #4]
   18298:	6053      	str	r3, [r2, #4]
   1829a:	bf00      	nop
   1829c:	370c      	adds	r7, #12
   1829e:	46bd      	mov	sp, r7
   182a0:	f85d 7b04 	ldr.w	r7, [sp], #4
   182a4:	4770      	bx	lr
   182a6:	bf00      	nop
   182a8:	20000a2c 	.word	0x20000a2c

000182ac <mp_globals_get>:
static inline mp_obj_dict_t *mp_globals_get(void) { return MP_STATE_THREAD(dict_globals); }
   182ac:	b480      	push	{r7}
   182ae:	af00      	add	r7, sp, #0
   182b0:	4b03      	ldr	r3, [pc, #12]	; (182c0 <mp_globals_get+0x14>)
   182b2:	689b      	ldr	r3, [r3, #8]
   182b4:	4618      	mov	r0, r3
   182b6:	46bd      	mov	sp, r7
   182b8:	f85d 7b04 	ldr.w	r7, [sp], #4
   182bc:	4770      	bx	lr
   182be:	bf00      	nop
   182c0:	20000a2c 	.word	0x20000a2c

000182c4 <mp_globals_set>:
static inline void mp_globals_set(mp_obj_dict_t *d) { MP_STATE_THREAD(dict_globals) = d; }
   182c4:	b480      	push	{r7}
   182c6:	b083      	sub	sp, #12
   182c8:	af00      	add	r7, sp, #0
   182ca:	6078      	str	r0, [r7, #4]
   182cc:	4a04      	ldr	r2, [pc, #16]	; (182e0 <mp_globals_set+0x1c>)
   182ce:	687b      	ldr	r3, [r7, #4]
   182d0:	6093      	str	r3, [r2, #8]
   182d2:	bf00      	nop
   182d4:	370c      	adds	r7, #12
   182d6:	46bd      	mov	sp, r7
   182d8:	f85d 7b04 	ldr.w	r7, [sp], #4
   182dc:	4770      	bx	lr
   182de:	bf00      	nop
   182e0:	20000a2c 	.word	0x20000a2c

000182e4 <mp_obj_is_package>:

#if MICROPY_ENABLE_EXTERNAL_IMPORT

#define PATH_SEP_CHAR '/'

bool mp_obj_is_package(mp_obj_t module) {
   182e4:	b580      	push	{r7, lr}
   182e6:	b084      	sub	sp, #16
   182e8:	af00      	add	r7, sp, #0
   182ea:	6078      	str	r0, [r7, #4]
    mp_obj_t dest[2];
    mp_load_method_maybe(module, MP_QSTR___path__, dest);
   182ec:	f107 0308 	add.w	r3, r7, #8
   182f0:	461a      	mov	r2, r3
   182f2:	211e      	movs	r1, #30
   182f4:	6878      	ldr	r0, [r7, #4]
   182f6:	f7f4 f9ed 	bl	c6d4 <mp_load_method_maybe>
    return dest[0] != MP_OBJ_NULL;
   182fa:	68bb      	ldr	r3, [r7, #8]
   182fc:	2b00      	cmp	r3, #0
   182fe:	bf14      	ite	ne
   18300:	2301      	movne	r3, #1
   18302:	2300      	moveq	r3, #0
   18304:	b2db      	uxtb	r3, r3
}
   18306:	4618      	mov	r0, r3
   18308:	3710      	adds	r7, #16
   1830a:	46bd      	mov	sp, r7
   1830c:	bd80      	pop	{r7, pc}

0001830e <mp_import_stat_any>:

// Stat either frozen or normal module by a given path
// (whatever is available, if at all).
STATIC mp_import_stat_t mp_import_stat_any(const char *path) {
   1830e:	b580      	push	{r7, lr}
   18310:	b084      	sub	sp, #16
   18312:	af00      	add	r7, sp, #0
   18314:	6078      	str	r0, [r7, #4]
    #if MICROPY_MODULE_FROZEN
    mp_import_stat_t st = mp_frozen_stat(path);
   18316:	6878      	ldr	r0, [r7, #4]
   18318:	f002 fe6f 	bl	1affa <mp_frozen_stat>
   1831c:	60f8      	str	r0, [r7, #12]
    if (st != MP_IMPORT_STAT_NO_EXIST) {
   1831e:	68fb      	ldr	r3, [r7, #12]
   18320:	2b00      	cmp	r3, #0
   18322:	d001      	beq.n	18328 <mp_import_stat_any+0x1a>
        return st;
   18324:	68fb      	ldr	r3, [r7, #12]
   18326:	e003      	b.n	18330 <mp_import_stat_any+0x22>
    }
    #endif
    return mp_import_stat(path);
   18328:	6878      	ldr	r0, [r7, #4]
   1832a:	f002 ff22 	bl	1b172 <mp_import_stat>
   1832e:	4603      	mov	r3, r0
}
   18330:	4618      	mov	r0, r3
   18332:	3710      	adds	r7, #16
   18334:	46bd      	mov	sp, r7
   18336:	bd80      	pop	{r7, pc}

00018338 <stat_file_py_or_mpy>:

STATIC mp_import_stat_t stat_file_py_or_mpy(vstr_t *path) {
   18338:	b580      	push	{r7, lr}
   1833a:	b084      	sub	sp, #16
   1833c:	af00      	add	r7, sp, #0
   1833e:	6078      	str	r0, [r7, #4]
    mp_import_stat_t stat = mp_import_stat_any(vstr_null_terminated_str(path));
   18340:	6878      	ldr	r0, [r7, #4]
   18342:	f7e9 f904 	bl	154e <vstr_null_terminated_str>
   18346:	4603      	mov	r3, r0
   18348:	4618      	mov	r0, r3
   1834a:	f7ff ffe0 	bl	1830e <mp_import_stat_any>
   1834e:	60f8      	str	r0, [r7, #12]
    if (stat == MP_IMPORT_STAT_FILE) {
   18350:	68fb      	ldr	r3, [r7, #12]
   18352:	2b02      	cmp	r3, #2
   18354:	d101      	bne.n	1835a <stat_file_py_or_mpy+0x22>
        return stat;
   18356:	68fb      	ldr	r3, [r7, #12]
   18358:	e000      	b.n	1835c <stat_file_py_or_mpy+0x24>
    if (stat == MP_IMPORT_STAT_FILE) {
        return stat;
    }
    #endif

    return MP_IMPORT_STAT_NO_EXIST;
   1835a:	2300      	movs	r3, #0
}
   1835c:	4618      	mov	r0, r3
   1835e:	3710      	adds	r7, #16
   18360:	46bd      	mov	sp, r7
   18362:	bd80      	pop	{r7, pc}

00018364 <stat_dir_or_file>:

STATIC mp_import_stat_t stat_dir_or_file(vstr_t *path) {
   18364:	b580      	push	{r7, lr}
   18366:	b084      	sub	sp, #16
   18368:	af00      	add	r7, sp, #0
   1836a:	6078      	str	r0, [r7, #4]
    mp_import_stat_t stat = mp_import_stat_any(vstr_null_terminated_str(path));
   1836c:	6878      	ldr	r0, [r7, #4]
   1836e:	f7e9 f8ee 	bl	154e <vstr_null_terminated_str>
   18372:	4603      	mov	r3, r0
   18374:	4618      	mov	r0, r3
   18376:	f7ff ffca 	bl	1830e <mp_import_stat_any>
   1837a:	60f8      	str	r0, [r7, #12]
    DEBUG_printf("stat %s: %d\n", vstr_str(path), stat);
    if (stat == MP_IMPORT_STAT_DIR) {
   1837c:	68fb      	ldr	r3, [r7, #12]
   1837e:	2b01      	cmp	r3, #1
   18380:	d101      	bne.n	18386 <stat_dir_or_file+0x22>
        return stat;
   18382:	68fb      	ldr	r3, [r7, #12]
   18384:	e007      	b.n	18396 <stat_dir_or_file+0x32>
    }

    // not a directory, add .py and try as a file
    vstr_add_str(path, ".py");
   18386:	4906      	ldr	r1, [pc, #24]	; (183a0 <stat_dir_or_file+0x3c>)
   18388:	6878      	ldr	r0, [r7, #4]
   1838a:	f7e9 f91c 	bl	15c6 <vstr_add_str>
    return stat_file_py_or_mpy(path);
   1838e:	6878      	ldr	r0, [r7, #4]
   18390:	f7ff ffd2 	bl	18338 <stat_file_py_or_mpy>
   18394:	4603      	mov	r3, r0
}
   18396:	4618      	mov	r0, r3
   18398:	3710      	adds	r7, #16
   1839a:	46bd      	mov	sp, r7
   1839c:	bd80      	pop	{r7, pc}
   1839e:	bf00      	nop
   183a0:	0002231c 	.word	0x0002231c

000183a4 <find_file>:

STATIC mp_import_stat_t find_file(const char *file_str, uint file_len, vstr_t *dest) {
   183a4:	b580      	push	{r7, lr}
   183a6:	b084      	sub	sp, #16
   183a8:	af00      	add	r7, sp, #0
   183aa:	60f8      	str	r0, [r7, #12]
   183ac:	60b9      	str	r1, [r7, #8]
   183ae:	607a      	str	r2, [r7, #4]
    mp_obj_list_get(mp_sys_path, &path_num, &path_items);

    if (path_num == 0) {
#endif
        // mp_sys_path is empty, so just use the given file name
        vstr_add_strn(dest, file_str, file_len);
   183b0:	68ba      	ldr	r2, [r7, #8]
   183b2:	68f9      	ldr	r1, [r7, #12]
   183b4:	6878      	ldr	r0, [r7, #4]
   183b6:	f7e9 f918 	bl	15ea <vstr_add_strn>
        return stat_dir_or_file(dest);
   183ba:	6878      	ldr	r0, [r7, #4]
   183bc:	f7ff ffd2 	bl	18364 <stat_dir_or_file>
   183c0:	4603      	mov	r3, r0

        // could not find a directory or file
        return MP_IMPORT_STAT_NO_EXIST;
    }
#endif
}
   183c2:	4618      	mov	r0, r3
   183c4:	3710      	adds	r7, #16
   183c6:	46bd      	mov	sp, r7
   183c8:	bd80      	pop	{r7, pc}

000183ca <do_load_from_lexer>:

#if MICROPY_ENABLE_COMPILER
STATIC void do_load_from_lexer(mp_obj_t module_obj, mp_lexer_t *lex) {
   183ca:	b580      	push	{r7, lr}
   183cc:	b084      	sub	sp, #16
   183ce:	af00      	add	r7, sp, #0
   183d0:	6078      	str	r0, [r7, #4]
   183d2:	6039      	str	r1, [r7, #0]
    qstr source_name = lex->source_name;
    mp_store_attr(module_obj, MP_QSTR___file__, MP_OBJ_NEW_QSTR(source_name));
    #endif

    // parse, compile and execute the module in its context
    mp_obj_dict_t *mod_globals = mp_obj_module_get_globals(module_obj);
   183d4:	6878      	ldr	r0, [r7, #4]
   183d6:	f7f9 fbab 	bl	11b30 <mp_obj_module_get_globals>
   183da:	60f8      	str	r0, [r7, #12]
    mp_parse_compile_execute(lex, MP_PARSE_FILE_INPUT, mod_globals, mod_globals);
   183dc:	68fb      	ldr	r3, [r7, #12]
   183de:	68fa      	ldr	r2, [r7, #12]
   183e0:	2101      	movs	r1, #1
   183e2:	6838      	ldr	r0, [r7, #0]
   183e4:	f7f4 fd11 	bl	ce0a <mp_parse_compile_execute>
}
   183e8:	bf00      	nop
   183ea:	3710      	adds	r7, #16
   183ec:	46bd      	mov	sp, r7
   183ee:	bd80      	pop	{r7, pc}

000183f0 <do_execute_raw_code>:
#endif

#if MICROPY_PERSISTENT_CODE_LOAD || MICROPY_MODULE_FROZEN_MPY
STATIC void do_execute_raw_code(mp_obj_t module_obj, mp_raw_code_t *raw_code) {
   183f0:	b580      	push	{r7, lr}
   183f2:	b092      	sub	sp, #72	; 0x48
   183f4:	af00      	add	r7, sp, #0
   183f6:	6078      	str	r0, [r7, #4]
   183f8:	6039      	str	r1, [r7, #0]
    //qstr source_name = lex->source_name;
    //mp_store_attr(module_obj, MP_QSTR___file__, MP_OBJ_NEW_QSTR(source_name));
    #endif

    // execute the module in its context
    mp_obj_dict_t *mod_globals = mp_obj_module_get_globals(module_obj);
   183fa:	6878      	ldr	r0, [r7, #4]
   183fc:	f7f9 fb98 	bl	11b30 <mp_obj_module_get_globals>
   18400:	6478      	str	r0, [r7, #68]	; 0x44

    // save context
    mp_obj_dict_t *volatile old_globals = mp_globals_get();
   18402:	f7ff ff53 	bl	182ac <mp_globals_get>
   18406:	4603      	mov	r3, r0
   18408:	63fb      	str	r3, [r7, #60]	; 0x3c
    mp_obj_dict_t *volatile old_locals = mp_locals_get();
   1840a:	f7ff ff33 	bl	18274 <mp_locals_get>
   1840e:	4603      	mov	r3, r0
   18410:	63bb      	str	r3, [r7, #56]	; 0x38

    // set new context
    mp_globals_set(mod_globals);
   18412:	6c78      	ldr	r0, [r7, #68]	; 0x44
   18414:	f7ff ff56 	bl	182c4 <mp_globals_set>
    mp_locals_set(mod_globals);
   18418:	6c78      	ldr	r0, [r7, #68]	; 0x44
   1841a:	f7ff ff37 	bl	1828c <mp_locals_set>

    nlr_buf_t nlr;
    if (nlr_push(&nlr) == 0) {
   1841e:	f107 0308 	add.w	r3, r7, #8
   18422:	4618      	mov	r0, r3
   18424:	f7e7 ff4a 	bl	2bc <nlr_push>
   18428:	4603      	mov	r3, r0
   1842a:	2b00      	cmp	r3, #0
   1842c:	d113      	bne.n	18456 <do_execute_raw_code+0x66>
        mp_obj_t module_fun = mp_make_function_from_raw_code(raw_code, MP_OBJ_NULL, MP_OBJ_NULL);
   1842e:	2200      	movs	r2, #0
   18430:	2100      	movs	r1, #0
   18432:	6838      	ldr	r0, [r7, #0]
   18434:	f7f2 feeb 	bl	b20e <mp_make_function_from_raw_code>
   18438:	6438      	str	r0, [r7, #64]	; 0x40
        mp_call_function_0(module_fun);
   1843a:	6c38      	ldr	r0, [r7, #64]	; 0x40
   1843c:	f7f3 fc7e 	bl	bd3c <mp_call_function_0>

        // finish nlr block, restore context
        nlr_pop();
   18440:	f7e7 ff2a 	bl	298 <nlr_pop>
        mp_globals_set(old_globals);
   18444:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   18446:	4618      	mov	r0, r3
   18448:	f7ff ff3c 	bl	182c4 <mp_globals_set>
        mp_locals_set(old_locals);
   1844c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1844e:	4618      	mov	r0, r3
   18450:	f7ff ff1c 	bl	1828c <mp_locals_set>
        // exception; restore context and re-raise same exception
        mp_globals_set(old_globals);
        mp_locals_set(old_locals);
        nlr_jump(nlr.ret_val);
    }
}
   18454:	e00b      	b.n	1846e <do_execute_raw_code+0x7e>
        mp_globals_set(old_globals);
   18456:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   18458:	4618      	mov	r0, r3
   1845a:	f7ff ff33 	bl	182c4 <mp_globals_set>
        mp_locals_set(old_locals);
   1845e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   18460:	4618      	mov	r0, r3
   18462:	f7ff ff13 	bl	1828c <mp_locals_set>
        nlr_jump(nlr.ret_val);
   18466:	68fb      	ldr	r3, [r7, #12]
   18468:	4618      	mov	r0, r3
   1846a:	f7e7 ff39 	bl	2e0 <nlr_jump>
}
   1846e:	3748      	adds	r7, #72	; 0x48
   18470:	46bd      	mov	sp, r7
   18472:	bd80      	pop	{r7, pc}

00018474 <do_load>:
#endif

STATIC void do_load(mp_obj_t module_obj, vstr_t *file) {
   18474:	b580      	push	{r7, lr}
   18476:	b086      	sub	sp, #24
   18478:	af00      	add	r7, sp, #0
   1847a:	6078      	str	r0, [r7, #4]
   1847c:	6039      	str	r1, [r7, #0]
    #if MICROPY_MODULE_FROZEN || MICROPY_PERSISTENT_CODE_LOAD || MICROPY_ENABLE_COMPILER
    char *file_str = vstr_null_terminated_str(file);
   1847e:	6838      	ldr	r0, [r7, #0]
   18480:	f7e9 f865 	bl	154e <vstr_null_terminated_str>
   18484:	6178      	str	r0, [r7, #20]

    // If we support frozen modules (either as str or mpy) then try to find the
    // requested filename in the list of frozen module filenames.
    #if MICROPY_MODULE_FROZEN
    void *modref;
    int frozen_type = mp_find_frozen_module(file_str, file->len, &modref);
   18486:	683b      	ldr	r3, [r7, #0]
   18488:	685b      	ldr	r3, [r3, #4]
   1848a:	f107 0208 	add.w	r2, r7, #8
   1848e:	4619      	mov	r1, r3
   18490:	6978      	ldr	r0, [r7, #20]
   18492:	f002 fdc7 	bl	1b024 <mp_find_frozen_module>
   18496:	6138      	str	r0, [r7, #16]
    #endif

    // If we support frozen mpy modules and we found a corresponding file (and
    // its data) in the list of frozen files, execute it.
    #if MICROPY_MODULE_FROZEN_MPY
    if (frozen_type == MP_FROZEN_MPY) {
   18498:	693b      	ldr	r3, [r7, #16]
   1849a:	2b02      	cmp	r3, #2
   1849c:	d105      	bne.n	184aa <do_load+0x36>
        do_execute_raw_code(module_obj, modref);
   1849e:	68bb      	ldr	r3, [r7, #8]
   184a0:	4619      	mov	r1, r3
   184a2:	6878      	ldr	r0, [r7, #4]
   184a4:	f7ff ffa4 	bl	183f0 <do_execute_raw_code>
        return;
   184a8:	e008      	b.n	184bc <do_load+0x48>
    #endif

    // If we can compile scripts then load the file and compile and execute it.
    #if MICROPY_ENABLE_COMPILER
    {
        mp_lexer_t *lex = mp_lexer_new_from_file(file_str);
   184aa:	6978      	ldr	r0, [r7, #20]
   184ac:	f002 fe5a 	bl	1b164 <mp_lexer_new_from_file>
   184b0:	60f8      	str	r0, [r7, #12]
        do_load_from_lexer(module_obj, lex);
   184b2:	68f9      	ldr	r1, [r7, #12]
   184b4:	6878      	ldr	r0, [r7, #4]
   184b6:	f7ff ff88 	bl	183ca <do_load_from_lexer>
        return;
   184ba:	bf00      	nop
    #else

    // If we get here then the file was not frozen and we can't compile scripts.
    mp_raise_msg(&mp_type_ImportError, "script compilation not supported");
    #endif
}
   184bc:	3718      	adds	r7, #24
   184be:	46bd      	mov	sp, r7
   184c0:	bd80      	pop	{r7, pc}

000184c2 <chop_component>:

STATIC void chop_component(const char *start, const char **end) {
   184c2:	b480      	push	{r7}
   184c4:	b085      	sub	sp, #20
   184c6:	af00      	add	r7, sp, #0
   184c8:	6078      	str	r0, [r7, #4]
   184ca:	6039      	str	r1, [r7, #0]
    const char *p = *end;
   184cc:	683b      	ldr	r3, [r7, #0]
   184ce:	681b      	ldr	r3, [r3, #0]
   184d0:	60fb      	str	r3, [r7, #12]
    while (p > start) {
   184d2:	e00a      	b.n	184ea <chop_component+0x28>
        if (*--p == '.') {
   184d4:	68fb      	ldr	r3, [r7, #12]
   184d6:	3b01      	subs	r3, #1
   184d8:	60fb      	str	r3, [r7, #12]
   184da:	68fb      	ldr	r3, [r7, #12]
   184dc:	781b      	ldrb	r3, [r3, #0]
   184de:	2b2e      	cmp	r3, #46	; 0x2e
   184e0:	d103      	bne.n	184ea <chop_component+0x28>
            *end = p;
   184e2:	683b      	ldr	r3, [r7, #0]
   184e4:	68fa      	ldr	r2, [r7, #12]
   184e6:	601a      	str	r2, [r3, #0]
            return;
   184e8:	e006      	b.n	184f8 <chop_component+0x36>
    while (p > start) {
   184ea:	68fa      	ldr	r2, [r7, #12]
   184ec:	687b      	ldr	r3, [r7, #4]
   184ee:	429a      	cmp	r2, r3
   184f0:	d8f0      	bhi.n	184d4 <chop_component+0x12>
        }
    }
    *end = p;
   184f2:	683b      	ldr	r3, [r7, #0]
   184f4:	68fa      	ldr	r2, [r7, #12]
   184f6:	601a      	str	r2, [r3, #0]
}
   184f8:	3714      	adds	r7, #20
   184fa:	46bd      	mov	sp, r7
   184fc:	f85d 7b04 	ldr.w	r7, [sp], #4
   18500:	4770      	bx	lr

00018502 <mp_builtin___import__>:

mp_obj_t mp_builtin___import__(size_t n_args, const mp_obj_t *args) {
   18502:	b590      	push	{r4, r7, lr}
   18504:	b0e3      	sub	sp, #396	; 0x18c
   18506:	af00      	add	r7, sp, #0
   18508:	1d3b      	adds	r3, r7, #4
   1850a:	6018      	str	r0, [r3, #0]
   1850c:	463b      	mov	r3, r7
   1850e:	6019      	str	r1, [r3, #0]
        mp_obj_print(args[i], PRINT_REPR);
        DEBUG_printf("\n");
    }
#endif

    mp_obj_t module_name = args[0];
   18510:	463b      	mov	r3, r7
   18512:	681b      	ldr	r3, [r3, #0]
   18514:	681b      	ldr	r3, [r3, #0]
   18516:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
    mp_obj_t fromtuple = mp_const_none;
   1851a:	4bd6      	ldr	r3, [pc, #856]	; (18874 <mp_builtin___import__+0x372>)
   1851c:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
    mp_int_t level = 0;
   18520:	2300      	movs	r3, #0
   18522:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
    if (n_args >= 4) {
   18526:	1d3b      	adds	r3, r7, #4
   18528:	681b      	ldr	r3, [r3, #0]
   1852a:	2b03      	cmp	r3, #3
   1852c:	d916      	bls.n	1855c <mp_builtin___import__+0x5a>
        fromtuple = args[3];
   1852e:	463b      	mov	r3, r7
   18530:	681b      	ldr	r3, [r3, #0]
   18532:	68db      	ldr	r3, [r3, #12]
   18534:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
        if (n_args >= 5) {
   18538:	1d3b      	adds	r3, r7, #4
   1853a:	681b      	ldr	r3, [r3, #0]
   1853c:	2b04      	cmp	r3, #4
   1853e:	d90d      	bls.n	1855c <mp_builtin___import__+0x5a>
            level = MP_OBJ_SMALL_INT_VALUE(args[4]);
   18540:	463b      	mov	r3, r7
   18542:	681b      	ldr	r3, [r3, #0]
   18544:	3310      	adds	r3, #16
   18546:	681b      	ldr	r3, [r3, #0]
   18548:	105b      	asrs	r3, r3, #1
   1854a:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
            if (level < 0) {
   1854e:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
   18552:	2b00      	cmp	r3, #0
   18554:	da02      	bge.n	1855c <mp_builtin___import__+0x5a>
                mp_raise_ValueError(NULL);
   18556:	2000      	movs	r0, #0
   18558:	f7f4 fcd9 	bl	cf0e <mp_raise_ValueError>
            }
        }
    }

    size_t mod_len;
    const char *mod_str = mp_obj_str_get_data(module_name, &mod_len);
   1855c:	f507 7390 	add.w	r3, r7, #288	; 0x120
   18560:	4619      	mov	r1, r3
   18562:	f8d7 0184 	ldr.w	r0, [r7, #388]	; 0x184
   18566:	f7fc ff7f 	bl	15468 <mp_obj_str_get_data>
   1856a:	f8c7 0178 	str.w	r0, [r7, #376]	; 0x178

    if (level != 0) {
   1856e:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
   18572:	2b00      	cmp	r3, #0
   18574:	f000 80de 	beq.w	18734 <mp_builtin___import__+0x232>
        // module name, thus resolving relative import name into absolute.
        // This even appears to be correct per
        // http://legacy.python.org/dev/peps/pep-0328/#relative-imports-and-name
        // "Relative imports use a module's __name__ attribute to determine that
        // module's position in the package hierarchy."
        level--;
   18578:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
   1857c:	3b01      	subs	r3, #1
   1857e:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
        mp_obj_t this_name_q = mp_obj_dict_get(MP_OBJ_FROM_PTR(mp_globals_get()), MP_OBJ_NEW_QSTR(MP_QSTR___name__));
   18582:	f7ff fe93 	bl	182ac <mp_globals_get>
   18586:	4603      	mov	r3, r0
   18588:	216e      	movs	r1, #110	; 0x6e
   1858a:	4618      	mov	r0, r3
   1858c:	f7f6 f874 	bl	e678 <mp_obj_dict_get>
   18590:	f8c7 015c 	str.w	r0, [r7, #348]	; 0x15c
        assert(this_name_q != MP_OBJ_NULL);
   18594:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
   18598:	2b00      	cmp	r3, #0
   1859a:	d106      	bne.n	185aa <mp_builtin___import__+0xa8>
   1859c:	4bb6      	ldr	r3, [pc, #728]	; (18878 <mp_builtin___import__+0x376>)
   1859e:	4ab7      	ldr	r2, [pc, #732]	; (1887c <mp_builtin___import__+0x37a>)
   185a0:	f240 111d 	movw	r1, #285	; 0x11d
   185a4:	48b6      	ldr	r0, [pc, #728]	; (18880 <mp_builtin___import__+0x37e>)
   185a6:	f002 fe09 	bl	1b1bc <__assert_func>
        if (MP_OBJ_QSTR_VALUE(this_name_q) == MP_QSTR___main__) {
            // This is a module run by -m command-line switch, get its real name from backup attribute
            this_name_q = mp_obj_dict_get(MP_OBJ_FROM_PTR(mp_globals_get()), MP_OBJ_NEW_QSTR(MP_QSTR___main__));
        }
        #endif
        mp_map_t *globals_map = &mp_globals_get()->map;
   185aa:	f7ff fe7f 	bl	182ac <mp_globals_get>
   185ae:	4603      	mov	r3, r0
   185b0:	3304      	adds	r3, #4
   185b2:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
        mp_map_elem_t *elem = mp_map_lookup(globals_map, MP_OBJ_NEW_QSTR(MP_QSTR___path__), MP_MAP_LOOKUP);
   185b6:	2200      	movs	r2, #0
   185b8:	217a      	movs	r1, #122	; 0x7a
   185ba:	f8d7 0158 	ldr.w	r0, [r7, #344]	; 0x158
   185be:	f7f4 ff1d 	bl	d3fc <mp_map_lookup>
   185c2:	f8c7 0154 	str.w	r0, [r7, #340]	; 0x154
        bool is_pkg = (elem != NULL);
   185c6:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
   185ca:	2b00      	cmp	r3, #0
   185cc:	bf14      	ite	ne
   185ce:	2301      	movne	r3, #1
   185d0:	2300      	moveq	r3, #0
   185d2:	f887 3153 	strb.w	r3, [r7, #339]	; 0x153
        DEBUG_printf(", is_package: %d", is_pkg);
        DEBUG_printf("\n");
#endif

        size_t this_name_l;
        const char *this_name = mp_obj_str_get_data(this_name_q, &this_name_l);
   185d6:	f107 030c 	add.w	r3, r7, #12
   185da:	4619      	mov	r1, r3
   185dc:	f8d7 015c 	ldr.w	r0, [r7, #348]	; 0x15c
   185e0:	f7fc ff42 	bl	15468 <mp_obj_str_get_data>
   185e4:	f8c7 014c 	str.w	r0, [r7, #332]	; 0x14c

        const char *p = this_name + this_name_l;
   185e8:	f107 030c 	add.w	r3, r7, #12
   185ec:	681b      	ldr	r3, [r3, #0]
   185ee:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
   185f2:	441a      	add	r2, r3
   185f4:	f107 0308 	add.w	r3, r7, #8
   185f8:	601a      	str	r2, [r3, #0]
        if (!is_pkg) {
   185fa:	f897 3153 	ldrb.w	r3, [r7, #339]	; 0x153
   185fe:	f083 0301 	eor.w	r3, r3, #1
   18602:	b2db      	uxtb	r3, r3
   18604:	2b00      	cmp	r3, #0
   18606:	d00e      	beq.n	18626 <mp_builtin___import__+0x124>
            // We have module, but relative imports are anchored at package, so
            // go there.
            chop_component(this_name, &p);
   18608:	f107 0308 	add.w	r3, r7, #8
   1860c:	4619      	mov	r1, r3
   1860e:	f8d7 014c 	ldr.w	r0, [r7, #332]	; 0x14c
   18612:	f7ff ff56 	bl	184c2 <chop_component>
        }

        while (level--) {
   18616:	e006      	b.n	18626 <mp_builtin___import__+0x124>
            chop_component(this_name, &p);
   18618:	f107 0308 	add.w	r3, r7, #8
   1861c:	4619      	mov	r1, r3
   1861e:	f8d7 014c 	ldr.w	r0, [r7, #332]	; 0x14c
   18622:	f7ff ff4e 	bl	184c2 <chop_component>
        while (level--) {
   18626:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
   1862a:	1e5a      	subs	r2, r3, #1
   1862c:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
   18630:	2b00      	cmp	r3, #0
   18632:	d1f1      	bne.n	18618 <mp_builtin___import__+0x116>
        }

        // We must have some component left over to import from
        if (p == this_name) {
   18634:	f107 0308 	add.w	r3, r7, #8
   18638:	681a      	ldr	r2, [r3, #0]
   1863a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
   1863e:	429a      	cmp	r2, r3
   18640:	d102      	bne.n	18648 <mp_builtin___import__+0x146>
            mp_raise_ValueError("cannot perform relative import");
   18642:	4890      	ldr	r0, [pc, #576]	; (18884 <mp_builtin___import__+0x382>)
   18644:	f7f4 fc63 	bl	cf0e <mp_raise_ValueError>
        }

        uint new_mod_l = (mod_len == 0 ? (size_t)(p - this_name) : (size_t)(p - this_name) + 1 + mod_len);
   18648:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
   1864c:	2b00      	cmp	r3, #0
   1864e:	d107      	bne.n	18660 <mp_builtin___import__+0x15e>
   18650:	f107 0308 	add.w	r3, r7, #8
   18654:	681b      	ldr	r3, [r3, #0]
   18656:	461a      	mov	r2, r3
   18658:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
   1865c:	1ad3      	subs	r3, r2, r3
   1865e:	e00b      	b.n	18678 <mp_builtin___import__+0x176>
   18660:	f107 0308 	add.w	r3, r7, #8
   18664:	681b      	ldr	r3, [r3, #0]
   18666:	461a      	mov	r2, r3
   18668:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
   1866c:	1ad3      	subs	r3, r2, r3
   1866e:	461a      	mov	r2, r3
   18670:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
   18674:	4413      	add	r3, r2
   18676:	3301      	adds	r3, #1
   18678:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
        char *new_mod = mp_local_alloc(new_mod_l);
   1867c:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
   18680:	3307      	adds	r3, #7
   18682:	3307      	adds	r3, #7
   18684:	08db      	lsrs	r3, r3, #3
   18686:	00db      	lsls	r3, r3, #3
   18688:	ebad 0d03 	sub.w	sp, sp, r3
   1868c:	466b      	mov	r3, sp
   1868e:	3307      	adds	r3, #7
   18690:	08db      	lsrs	r3, r3, #3
   18692:	00db      	lsls	r3, r3, #3
   18694:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
        memcpy(new_mod, this_name, p - this_name);
   18698:	f107 0308 	add.w	r3, r7, #8
   1869c:	681b      	ldr	r3, [r3, #0]
   1869e:	461a      	mov	r2, r3
   186a0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
   186a4:	1ad3      	subs	r3, r2, r3
   186a6:	461a      	mov	r2, r3
   186a8:	f8d7 114c 	ldr.w	r1, [r7, #332]	; 0x14c
   186ac:	f8d7 0144 	ldr.w	r0, [r7, #324]	; 0x144
   186b0:	f003 f988 	bl	1b9c4 <memcpy>
        if (mod_len != 0) {
   186b4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
   186b8:	2b00      	cmp	r3, #0
   186ba:	d01e      	beq.n	186fa <mp_builtin___import__+0x1f8>
            new_mod[p - this_name] = '.';
   186bc:	f107 0308 	add.w	r3, r7, #8
   186c0:	681b      	ldr	r3, [r3, #0]
   186c2:	461a      	mov	r2, r3
   186c4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
   186c8:	1ad3      	subs	r3, r2, r3
   186ca:	461a      	mov	r2, r3
   186cc:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
   186d0:	4413      	add	r3, r2
   186d2:	222e      	movs	r2, #46	; 0x2e
   186d4:	701a      	strb	r2, [r3, #0]
            memcpy(new_mod + (p - this_name) + 1, mod_str, mod_len);
   186d6:	f107 0308 	add.w	r3, r7, #8
   186da:	681b      	ldr	r3, [r3, #0]
   186dc:	461a      	mov	r2, r3
   186de:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
   186e2:	1ad3      	subs	r3, r2, r3
   186e4:	3301      	adds	r3, #1
   186e6:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
   186ea:	4413      	add	r3, r2
   186ec:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
   186f0:	f8d7 1178 	ldr.w	r1, [r7, #376]	; 0x178
   186f4:	4618      	mov	r0, r3
   186f6:	f003 f965 	bl	1b9c4 <memcpy>
        }

        qstr new_mod_q = qstr_from_strn(new_mod, new_mod_l);
   186fa:	f8d7 1148 	ldr.w	r1, [r7, #328]	; 0x148
   186fe:	f8d7 0144 	ldr.w	r0, [r7, #324]	; 0x144
   18702:	f7e8 fc8e 	bl	1022 <qstr_from_strn>
   18706:	f8c7 0140 	str.w	r0, [r7, #320]	; 0x140
        mp_local_free(new_mod);
   1870a:	f8d7 0144 	ldr.w	r0, [r7, #324]	; 0x144
   1870e:	f7ff fda7 	bl	18260 <mp_local_free>
        DEBUG_printf("Resolved base name for relative import: '%s'\n", qstr_str(new_mod_q));
        module_name = MP_OBJ_NEW_QSTR(new_mod_q);
   18712:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
   18716:	009b      	lsls	r3, r3, #2
   18718:	f043 0302 	orr.w	r3, r3, #2
   1871c:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
        mod_str = qstr_str(new_mod_q);
   18720:	f8d7 0140 	ldr.w	r0, [r7, #320]	; 0x140
   18724:	f7e8 fd56 	bl	11d4 <qstr_str>
   18728:	f8c7 0178 	str.w	r0, [r7, #376]	; 0x178
        mod_len = new_mod_l;
   1872c:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
   18730:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
    }

    // check if module already exists
    qstr module_name_qstr = mp_obj_str_get_qstr(module_name);
   18734:	f8d7 0184 	ldr.w	r0, [r7, #388]	; 0x184
   18738:	f7fc fe30 	bl	1539c <mp_obj_str_get_qstr>
   1873c:	f8c7 013c 	str.w	r0, [r7, #316]	; 0x13c
    mp_obj_t module_obj = mp_module_get(module_name_qstr);
   18740:	f8d7 013c 	ldr.w	r0, [r7, #316]	; 0x13c
   18744:	f7f9 fa1a 	bl	11b7c <mp_module_get>
   18748:	f8c7 0174 	str.w	r0, [r7, #372]	; 0x174
    if (module_obj != MP_OBJ_NULL) {
   1874c:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
   18750:	2b00      	cmp	r3, #0
   18752:	d027      	beq.n	187a4 <mp_builtin___import__+0x2a2>
        DEBUG_printf("Module already loaded\n");
        // If it's not a package, return module right away
        char *p = strchr(mod_str, '.');
   18754:	212e      	movs	r1, #46	; 0x2e
   18756:	f8d7 0178 	ldr.w	r0, [r7, #376]	; 0x178
   1875a:	f003 fb61 	bl	1be20 <strchr>
   1875e:	f8c7 0138 	str.w	r0, [r7, #312]	; 0x138
        if (p == NULL) {
   18762:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
   18766:	2b00      	cmp	r3, #0
   18768:	d102      	bne.n	18770 <mp_builtin___import__+0x26e>
            return module_obj;
   1876a:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
   1876e:	e142      	b.n	189f6 <mp_builtin___import__+0x4f4>
        }
        // If fromlist is not empty, return leaf module
        if (fromtuple != mp_const_none) {
   18770:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
   18774:	4a3f      	ldr	r2, [pc, #252]	; (18874 <mp_builtin___import__+0x372>)
   18776:	4293      	cmp	r3, r2
   18778:	d002      	beq.n	18780 <mp_builtin___import__+0x27e>
            return module_obj;
   1877a:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
   1877e:	e13a      	b.n	189f6 <mp_builtin___import__+0x4f4>
        }
        // Otherwise, we need to return top-level package
        qstr pkg_name = qstr_from_strn(mod_str, p - mod_str);
   18780:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
   18784:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
   18788:	1ad3      	subs	r3, r2, r3
   1878a:	4619      	mov	r1, r3
   1878c:	f8d7 0178 	ldr.w	r0, [r7, #376]	; 0x178
   18790:	f7e8 fc47 	bl	1022 <qstr_from_strn>
   18794:	f8c7 0134 	str.w	r0, [r7, #308]	; 0x134
        return mp_module_get(pkg_name);
   18798:	f8d7 0134 	ldr.w	r0, [r7, #308]	; 0x134
   1879c:	f7f9 f9ee 	bl	11b7c <mp_module_get>
   187a0:	4603      	mov	r3, r0
   187a2:	e128      	b.n	189f6 <mp_builtin___import__+0x4f4>
    }
    DEBUG_printf("Module not yet loaded\n");

    uint last = 0;
   187a4:	2300      	movs	r3, #0
   187a6:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
    VSTR_FIXED(path, MICROPY_ALLOC_PATH_MAX)
   187aa:	f107 0210 	add.w	r2, r7, #16
   187ae:	f507 7388 	add.w	r3, r7, #272	; 0x110
   187b2:	f44f 7180 	mov.w	r1, #256	; 0x100
   187b6:	4618      	mov	r0, r3
   187b8:	f7e8 fdc5 	bl	1346 <vstr_init_fixed_buf>
    module_obj = MP_OBJ_NULL;
   187bc:	2300      	movs	r3, #0
   187be:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
    mp_obj_t top_module_obj = MP_OBJ_NULL;
   187c2:	2300      	movs	r3, #0
   187c4:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
    mp_obj_t outer_module_obj = MP_OBJ_NULL;
   187c8:	2300      	movs	r3, #0
   187ca:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
    uint i;
    for (i = 1; i <= mod_len; i++) {
   187ce:	2301      	movs	r3, #1
   187d0:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   187d4:	e0fe      	b.n	189d4 <mp_builtin___import__+0x4d2>
        if (i == mod_len || mod_str[i] == '.') {
   187d6:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
   187da:	f8d7 2164 	ldr.w	r2, [r7, #356]	; 0x164
   187de:	429a      	cmp	r2, r3
   187e0:	d008      	beq.n	187f4 <mp_builtin___import__+0x2f2>
   187e2:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
   187e6:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
   187ea:	4413      	add	r3, r2
   187ec:	781b      	ldrb	r3, [r3, #0]
   187ee:	2b2e      	cmp	r3, #46	; 0x2e
   187f0:	f040 80eb 	bne.w	189ca <mp_builtin___import__+0x4c8>
            // create a qstr for the module name up to this depth
            qstr mod_name = qstr_from_strn(mod_str, i);
   187f4:	f8d7 1164 	ldr.w	r1, [r7, #356]	; 0x164
   187f8:	f8d7 0178 	ldr.w	r0, [r7, #376]	; 0x178
   187fc:	f7e8 fc11 	bl	1022 <qstr_from_strn>
   18800:	f8c7 0130 	str.w	r0, [r7, #304]	; 0x130
            DEBUG_printf("Processing module: %s\n", qstr_str(mod_name));
            DEBUG_printf("Previous path: =%.*s=\n", vstr_len(&path), vstr_str(&path));

            // find the file corresponding to the module name
            mp_import_stat_t stat;
            if (vstr_len(&path) == 0) {
   18804:	f507 7388 	add.w	r3, r7, #272	; 0x110
   18808:	4618      	mov	r0, r3
   1880a:	f7ff fd1d 	bl	18248 <vstr_len>
   1880e:	4603      	mov	r3, r0
   18810:	2b00      	cmp	r3, #0
   18812:	d10b      	bne.n	1882c <mp_builtin___import__+0x32a>
                // first module in the dotted-name; search for a directory or file
                stat = find_file(mod_str, i, &path);
   18814:	f507 7388 	add.w	r3, r7, #272	; 0x110
   18818:	461a      	mov	r2, r3
   1881a:	f8d7 1164 	ldr.w	r1, [r7, #356]	; 0x164
   1881e:	f8d7 0178 	ldr.w	r0, [r7, #376]	; 0x178
   18822:	f7ff fdbf 	bl	183a4 <find_file>
   18826:	f8c7 0160 	str.w	r0, [r7, #352]	; 0x160
   1882a:	e01b      	b.n	18864 <mp_builtin___import__+0x362>
            } else {
                // latter module in the dotted-name; append to path
                vstr_add_char(&path, PATH_SEP_CHAR);
   1882c:	f507 7388 	add.w	r3, r7, #272	; 0x110
   18830:	212f      	movs	r1, #47	; 0x2f
   18832:	4618      	mov	r0, r3
   18834:	f7e8 feb8 	bl	15a8 <vstr_add_char>
                vstr_add_strn(&path, mod_str + last, i - last);
   18838:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
   1883c:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
   18840:	18d1      	adds	r1, r2, r3
   18842:	f8d7 2164 	ldr.w	r2, [r7, #356]	; 0x164
   18846:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
   1884a:	1ad2      	subs	r2, r2, r3
   1884c:	f507 7388 	add.w	r3, r7, #272	; 0x110
   18850:	4618      	mov	r0, r3
   18852:	f7e8 feca 	bl	15ea <vstr_add_strn>
                stat = stat_dir_or_file(&path);
   18856:	f507 7388 	add.w	r3, r7, #272	; 0x110
   1885a:	4618      	mov	r0, r3
   1885c:	f7ff fd82 	bl	18364 <stat_dir_or_file>
   18860:	f8c7 0160 	str.w	r0, [r7, #352]	; 0x160
            }
            DEBUG_printf("Current path: %.*s\n", vstr_len(&path), vstr_str(&path));

            if (stat == MP_IMPORT_STAT_NO_EXIST) {
   18864:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
   18868:	2b00      	cmp	r3, #0
   1886a:	d111      	bne.n	18890 <mp_builtin___import__+0x38e>
                #else
                {
                #endif
                    // couldn't find the file, so fail
                    if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
                        mp_raise_msg(&mp_type_ImportError, "module not found");
   1886c:	4906      	ldr	r1, [pc, #24]	; (18888 <mp_builtin___import__+0x386>)
   1886e:	4807      	ldr	r0, [pc, #28]	; (1888c <mp_builtin___import__+0x38a>)
   18870:	f7f4 fb36 	bl	cee0 <mp_raise_msg>
   18874:	000212b4 	.word	0x000212b4
   18878:	00022320 	.word	0x00022320
   1887c:	000223a4 	.word	0x000223a4
   18880:	0002233c 	.word	0x0002233c
   18884:	00022358 	.word	0x00022358
   18888:	00022378 	.word	0x00022378
   1888c:	00020250 	.word	0x00020250
                            "no module named '%q'", mod_name));
                    }
                }
            } else {
                // found the file, so get the module
                module_obj = mp_module_get(mod_name);
   18890:	f8d7 0130 	ldr.w	r0, [r7, #304]	; 0x130
   18894:	f7f9 f972 	bl	11b7c <mp_module_get>
   18898:	f8c7 0174 	str.w	r0, [r7, #372]	; 0x174
            }

            if (module_obj == MP_OBJ_NULL) {
   1889c:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
   188a0:	2b00      	cmp	r3, #0
   188a2:	d166      	bne.n	18972 <mp_builtin___import__+0x470>
                // module not already loaded, so load it!

                module_obj = mp_obj_new_module(mod_name);
   188a4:	f8d7 0130 	ldr.w	r0, [r7, #304]	; 0x130
   188a8:	f7f9 f908 	bl	11abc <mp_obj_new_module>
   188ac:	f8c7 0174 	str.w	r0, [r7, #372]	; 0x174
                // for *modules* however - packages never have their names
                // replaced, instead they're -m'ed using a special __main__
                // submodule in them. (This all apparently is done to not
                // touch package name itself, which is important for future
                // imports).
                if (i == mod_len && fromtuple == mp_const_false && stat != MP_IMPORT_STAT_DIR) {
   188b0:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
   188b4:	f8d7 2164 	ldr.w	r2, [r7, #356]	; 0x164
   188b8:	429a      	cmp	r2, r3
   188ba:	d114      	bne.n	188e6 <mp_builtin___import__+0x3e4>
   188bc:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
   188c0:	4a4f      	ldr	r2, [pc, #316]	; (18a00 <mp_builtin___import__+0x4fe>)
   188c2:	4293      	cmp	r3, r2
   188c4:	d10f      	bne.n	188e6 <mp_builtin___import__+0x3e4>
   188c6:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
   188ca:	2b01      	cmp	r3, #1
   188cc:	d00b      	beq.n	188e6 <mp_builtin___import__+0x3e4>
                    mp_obj_module_t *o = MP_OBJ_TO_PTR(module_obj);
   188ce:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
   188d2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
                    mp_obj_dict_store(MP_OBJ_FROM_PTR(o->globals), MP_OBJ_NEW_QSTR(MP_QSTR___name__), MP_OBJ_NEW_QSTR(MP_QSTR___main__));
   188d6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
   188da:	685b      	ldr	r3, [r3, #4]
   188dc:	2266      	movs	r2, #102	; 0x66
   188de:	216e      	movs	r1, #110	; 0x6e
   188e0:	4618      	mov	r0, r3
   188e2:	f7f6 fbba 	bl	f05a <mp_obj_dict_store>
                    // Store real name in "__main__" attribute. Chosen semi-randonly, to reuse existing qstr's.
                    mp_obj_dict_store(MP_OBJ_FROM_PTR(o->globals), MP_OBJ_NEW_QSTR(MP_QSTR___main__), MP_OBJ_NEW_QSTR(mod_name));
                    #endif
                }

                if (stat == MP_IMPORT_STAT_DIR) {
   188e6:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
   188ea:	2b01      	cmp	r3, #1
   188ec:	d13a      	bne.n	18964 <mp_builtin___import__+0x462>
                    DEBUG_printf("%.*s is dir\n", vstr_len(&path), vstr_str(&path));
                    // https://docs.python.org/3/reference/import.html
                    // "Specifically, any module that contains a __path__ attribute is considered a package."
                    mp_store_attr(module_obj, MP_QSTR___path__, mp_obj_new_str(vstr_str(&path), vstr_len(&path)));
   188ee:	f507 7388 	add.w	r3, r7, #272	; 0x110
   188f2:	4618      	mov	r0, r3
   188f4:	f7ff fc9c 	bl	18230 <vstr_str>
   188f8:	4604      	mov	r4, r0
   188fa:	f507 7388 	add.w	r3, r7, #272	; 0x110
   188fe:	4618      	mov	r0, r3
   18900:	f7ff fca2 	bl	18248 <vstr_len>
   18904:	4603      	mov	r3, r0
   18906:	4619      	mov	r1, r3
   18908:	4620      	mov	r0, r4
   1890a:	f7fc fc4f 	bl	151ac <mp_obj_new_str>
   1890e:	4603      	mov	r3, r0
   18910:	461a      	mov	r2, r3
   18912:	211e      	movs	r1, #30
   18914:	f8d7 0174 	ldr.w	r0, [r7, #372]	; 0x174
   18918:	f7f3 ff8e 	bl	c838 <mp_store_attr>
                    size_t orig_path_len = path.len;
   1891c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
   18920:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
                    vstr_add_char(&path, PATH_SEP_CHAR);
   18924:	f507 7388 	add.w	r3, r7, #272	; 0x110
   18928:	212f      	movs	r1, #47	; 0x2f
   1892a:	4618      	mov	r0, r3
   1892c:	f7e8 fe3c 	bl	15a8 <vstr_add_char>
                    vstr_add_str(&path, "__init__.py");
   18930:	f507 7388 	add.w	r3, r7, #272	; 0x110
   18934:	4933      	ldr	r1, [pc, #204]	; (18a04 <mp_builtin___import__+0x502>)
   18936:	4618      	mov	r0, r3
   18938:	f7e8 fe45 	bl	15c6 <vstr_add_str>
                    if (stat_file_py_or_mpy(&path) != MP_IMPORT_STAT_FILE) {
   1893c:	f507 7388 	add.w	r3, r7, #272	; 0x110
   18940:	4618      	mov	r0, r3
   18942:	f7ff fcf9 	bl	18338 <stat_file_py_or_mpy>
   18946:	4603      	mov	r3, r0
   18948:	2b02      	cmp	r3, #2
   1894a:	d106      	bne.n	1895a <mp_builtin___import__+0x458>
                        //mp_warning("%s is imported as namespace package", vstr_str(&path));
                    } else {
                        do_load(module_obj, &path);
   1894c:	f507 7388 	add.w	r3, r7, #272	; 0x110
   18950:	4619      	mov	r1, r3
   18952:	f8d7 0174 	ldr.w	r0, [r7, #372]	; 0x174
   18956:	f7ff fd8d 	bl	18474 <do_load>
                    }
                    path.len = orig_path_len;
   1895a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
   1895e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   18962:	e006      	b.n	18972 <mp_builtin___import__+0x470>
                } else { // MP_IMPORT_STAT_FILE
                    do_load(module_obj, &path);
   18964:	f507 7388 	add.w	r3, r7, #272	; 0x110
   18968:	4619      	mov	r1, r3
   1896a:	f8d7 0174 	ldr.w	r0, [r7, #372]	; 0x174
   1896e:	f7ff fd81 	bl	18474 <do_load>
                    // remaining components then it's an ImportError because the current path
                    // (the module that was just loaded) is not a package.  This will be caught
                    // on the next iteration because the file will not exist.
                }
            }
            if (outer_module_obj != MP_OBJ_NULL) {
   18972:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
   18976:	2b00      	cmp	r3, #0
   18978:	d016      	beq.n	189a8 <mp_builtin___import__+0x4a6>
                qstr s = qstr_from_strn(mod_str + last, i - last);
   1897a:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
   1897e:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
   18982:	18d0      	adds	r0, r2, r3
   18984:	f8d7 2164 	ldr.w	r2, [r7, #356]	; 0x164
   18988:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
   1898c:	1ad3      	subs	r3, r2, r3
   1898e:	4619      	mov	r1, r3
   18990:	f7e8 fb47 	bl	1022 <qstr_from_strn>
   18994:	f8c7 0124 	str.w	r0, [r7, #292]	; 0x124
                mp_store_attr(outer_module_obj, s, module_obj);
   18998:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
   1899c:	f8d7 1124 	ldr.w	r1, [r7, #292]	; 0x124
   189a0:	f8d7 0168 	ldr.w	r0, [r7, #360]	; 0x168
   189a4:	f7f3 ff48 	bl	c838 <mp_store_attr>
            }
            outer_module_obj = module_obj;
   189a8:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
   189ac:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
            if (top_module_obj == MP_OBJ_NULL) {
   189b0:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
   189b4:	2b00      	cmp	r3, #0
   189b6:	d103      	bne.n	189c0 <mp_builtin___import__+0x4be>
                top_module_obj = module_obj;
   189b8:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
   189bc:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
            }
            last = i + 1;
   189c0:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
   189c4:	3301      	adds	r3, #1
   189c6:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
    for (i = 1; i <= mod_len; i++) {
   189ca:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
   189ce:	3301      	adds	r3, #1
   189d0:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   189d4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
   189d8:	f8d7 2164 	ldr.w	r2, [r7, #356]	; 0x164
   189dc:	429a      	cmp	r2, r3
   189de:	f67f aefa 	bls.w	187d6 <mp_builtin___import__+0x2d4>
        }
    }

    // If fromlist is not empty, return leaf module
    if (fromtuple != mp_const_none) {
   189e2:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
   189e6:	4a08      	ldr	r2, [pc, #32]	; (18a08 <mp_builtin___import__+0x506>)
   189e8:	4293      	cmp	r3, r2
   189ea:	d002      	beq.n	189f2 <mp_builtin___import__+0x4f0>
        return module_obj;
   189ec:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
   189f0:	e001      	b.n	189f6 <mp_builtin___import__+0x4f4>
    }
    // Otherwise, we need to return top-level package
    return top_module_obj;
   189f2:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
}
   189f6:	4618      	mov	r0, r3
   189f8:	f507 77c6 	add.w	r7, r7, #396	; 0x18c
   189fc:	46bd      	mov	sp, r7
   189fe:	bd90      	pop	{r4, r7, pc}
   18a00:	0001f9bc 	.word	0x0001f9bc
   18a04:	0002238c 	.word	0x0002238c
   18a08:	000212b4 	.word	0x000212b4

00018a0c <MP_OBJ_IS_OBJ>:
   18a0c:	b480      	push	{r7}
   18a0e:	b083      	sub	sp, #12
   18a10:	af00      	add	r7, sp, #0
   18a12:	6078      	str	r0, [r7, #4]
   18a14:	687b      	ldr	r3, [r7, #4]
   18a16:	f003 0303 	and.w	r3, r3, #3
   18a1a:	2b00      	cmp	r3, #0
   18a1c:	bf0c      	ite	eq
   18a1e:	2301      	moveq	r3, #1
   18a20:	2300      	movne	r3, #0
   18a22:	b2db      	uxtb	r3, r3
   18a24:	4618      	mov	r0, r3
   18a26:	370c      	adds	r7, #12
   18a28:	46bd      	mov	sp, r7
   18a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
   18a2e:	4770      	bx	lr

00018a30 <mp_locals_get>:
static inline mp_obj_dict_t *mp_locals_get(void) { return MP_STATE_THREAD(dict_locals); }
   18a30:	b480      	push	{r7}
   18a32:	af00      	add	r7, sp, #0
   18a34:	4b03      	ldr	r3, [pc, #12]	; (18a44 <mp_locals_get+0x14>)
   18a36:	685b      	ldr	r3, [r3, #4]
   18a38:	4618      	mov	r0, r3
   18a3a:	46bd      	mov	sp, r7
   18a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
   18a40:	4770      	bx	lr
   18a42:	bf00      	nop
   18a44:	20000a2c 	.word	0x20000a2c

00018a48 <mp_globals_get>:
static inline mp_obj_dict_t *mp_globals_get(void) { return MP_STATE_THREAD(dict_globals); }
   18a48:	b480      	push	{r7}
   18a4a:	af00      	add	r7, sp, #0
   18a4c:	4b03      	ldr	r3, [pc, #12]	; (18a5c <mp_globals_get+0x14>)
   18a4e:	689b      	ldr	r3, [r3, #8]
   18a50:	4618      	mov	r0, r3
   18a52:	46bd      	mov	sp, r7
   18a54:	f85d 7b04 	ldr.w	r7, [sp], #4
   18a58:	4770      	bx	lr
   18a5a:	bf00      	nop
   18a5c:	20000a2c 	.word	0x20000a2c

00018a60 <eval_exec_helper>:

#endif // MICROPY_PY_BUILTINS_COMPILE

#if MICROPY_PY_BUILTINS_EVAL_EXEC

STATIC mp_obj_t eval_exec_helper(size_t n_args, const mp_obj_t *args, mp_parse_input_kind_t parse_input_kind) {
   18a60:	b580      	push	{r7, lr}
   18a62:	b08a      	sub	sp, #40	; 0x28
   18a64:	af00      	add	r7, sp, #0
   18a66:	60f8      	str	r0, [r7, #12]
   18a68:	60b9      	str	r1, [r7, #8]
   18a6a:	607a      	str	r2, [r7, #4]
    // work out the context
    mp_obj_dict_t *globals = mp_globals_get();
   18a6c:	f7ff ffec 	bl	18a48 <mp_globals_get>
   18a70:	6278      	str	r0, [r7, #36]	; 0x24
    mp_obj_dict_t *locals = mp_locals_get();
   18a72:	f7ff ffdd 	bl	18a30 <mp_locals_get>
   18a76:	6238      	str	r0, [r7, #32]
    for (size_t i = 1; i < 3 && i < n_args; ++i) {
   18a78:	2301      	movs	r3, #1
   18a7a:	61fb      	str	r3, [r7, #28]
   18a7c:	e02f      	b.n	18ade <eval_exec_helper+0x7e>
        if (args[i] != mp_const_none) {
   18a7e:	69fb      	ldr	r3, [r7, #28]
   18a80:	009b      	lsls	r3, r3, #2
   18a82:	68ba      	ldr	r2, [r7, #8]
   18a84:	4413      	add	r3, r2
   18a86:	681b      	ldr	r3, [r3, #0]
   18a88:	4a26      	ldr	r2, [pc, #152]	; (18b24 <eval_exec_helper+0xc4>)
   18a8a:	4293      	cmp	r3, r2
   18a8c:	d024      	beq.n	18ad8 <eval_exec_helper+0x78>
            if (!MP_OBJ_IS_TYPE(args[i], &mp_type_dict)) {
   18a8e:	69fb      	ldr	r3, [r7, #28]
   18a90:	009b      	lsls	r3, r3, #2
   18a92:	68ba      	ldr	r2, [r7, #8]
   18a94:	4413      	add	r3, r2
   18a96:	681b      	ldr	r3, [r3, #0]
   18a98:	4618      	mov	r0, r3
   18a9a:	f7ff ffb7 	bl	18a0c <MP_OBJ_IS_OBJ>
   18a9e:	4603      	mov	r3, r0
   18aa0:	f083 0301 	eor.w	r3, r3, #1
   18aa4:	b2db      	uxtb	r3, r3
   18aa6:	2b00      	cmp	r3, #0
   18aa8:	d108      	bne.n	18abc <eval_exec_helper+0x5c>
   18aaa:	69fb      	ldr	r3, [r7, #28]
   18aac:	009b      	lsls	r3, r3, #2
   18aae:	68ba      	ldr	r2, [r7, #8]
   18ab0:	4413      	add	r3, r2
   18ab2:	681b      	ldr	r3, [r3, #0]
   18ab4:	681b      	ldr	r3, [r3, #0]
   18ab6:	4a1c      	ldr	r2, [pc, #112]	; (18b28 <eval_exec_helper+0xc8>)
   18ab8:	4293      	cmp	r3, r2
   18aba:	d002      	beq.n	18ac2 <eval_exec_helper+0x62>
                mp_raise_TypeError(NULL);
   18abc:	2000      	movs	r0, #0
   18abe:	f7f4 fa31 	bl	cf24 <mp_raise_TypeError>
            }
            locals = MP_OBJ_TO_PTR(args[i]);
   18ac2:	69fb      	ldr	r3, [r7, #28]
   18ac4:	009b      	lsls	r3, r3, #2
   18ac6:	68ba      	ldr	r2, [r7, #8]
   18ac8:	4413      	add	r3, r2
   18aca:	681b      	ldr	r3, [r3, #0]
   18acc:	623b      	str	r3, [r7, #32]
            if (i == 1) {
   18ace:	69fb      	ldr	r3, [r7, #28]
   18ad0:	2b01      	cmp	r3, #1
   18ad2:	d101      	bne.n	18ad8 <eval_exec_helper+0x78>
                globals = locals;
   18ad4:	6a3b      	ldr	r3, [r7, #32]
   18ad6:	627b      	str	r3, [r7, #36]	; 0x24
    for (size_t i = 1; i < 3 && i < n_args; ++i) {
   18ad8:	69fb      	ldr	r3, [r7, #28]
   18ada:	3301      	adds	r3, #1
   18adc:	61fb      	str	r3, [r7, #28]
   18ade:	69fb      	ldr	r3, [r7, #28]
   18ae0:	2b02      	cmp	r3, #2
   18ae2:	d803      	bhi.n	18aec <eval_exec_helper+0x8c>
   18ae4:	69fa      	ldr	r2, [r7, #28]
   18ae6:	68fb      	ldr	r3, [r7, #12]
   18ae8:	429a      	cmp	r2, r3
   18aea:	d3c8      	bcc.n	18a7e <eval_exec_helper+0x1e>
        return code_execute(MP_OBJ_TO_PTR(args[0]), globals, locals);
    }
    #endif

    size_t str_len;
    const char *str = mp_obj_str_get_data(args[0], &str_len);
   18aec:	68bb      	ldr	r3, [r7, #8]
   18aee:	681b      	ldr	r3, [r3, #0]
   18af0:	f107 0210 	add.w	r2, r7, #16
   18af4:	4611      	mov	r1, r2
   18af6:	4618      	mov	r0, r3
   18af8:	f7fc fcb6 	bl	15468 <mp_obj_str_get_data>
   18afc:	61b8      	str	r0, [r7, #24]
    mp_lexer_t *lex;
    if (MICROPY_PY_BUILTINS_EXECFILE && parse_input_kind == MP_PARSE_SINGLE_INPUT) {
        lex = mp_lexer_new_from_file(str);
        parse_input_kind = MP_PARSE_FILE_INPUT;
    } else {
        lex = mp_lexer_new_from_str_len(MP_QSTR__lt_string_gt_, str, str_len, 0);
   18afe:	693a      	ldr	r2, [r7, #16]
   18b00:	2300      	movs	r3, #0
   18b02:	69b9      	ldr	r1, [r7, #24]
   18b04:	2035      	movs	r0, #53	; 0x35
   18b06:	f7ea fdee 	bl	36e6 <mp_lexer_new_from_str_len>
   18b0a:	6178      	str	r0, [r7, #20]
    }

    return mp_parse_compile_execute(lex, parse_input_kind, globals, locals);
   18b0c:	6a3b      	ldr	r3, [r7, #32]
   18b0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   18b10:	6879      	ldr	r1, [r7, #4]
   18b12:	6978      	ldr	r0, [r7, #20]
   18b14:	f7f4 f979 	bl	ce0a <mp_parse_compile_execute>
   18b18:	4603      	mov	r3, r0
}
   18b1a:	4618      	mov	r0, r3
   18b1c:	3728      	adds	r7, #40	; 0x28
   18b1e:	46bd      	mov	sp, r7
   18b20:	bd80      	pop	{r7, pc}
   18b22:	bf00      	nop
   18b24:	000212b4 	.word	0x000212b4
   18b28:	0001fe68 	.word	0x0001fe68

00018b2c <mp_builtin_eval>:

STATIC mp_obj_t mp_builtin_eval(size_t n_args, const mp_obj_t *args) {
   18b2c:	b580      	push	{r7, lr}
   18b2e:	b082      	sub	sp, #8
   18b30:	af00      	add	r7, sp, #0
   18b32:	6078      	str	r0, [r7, #4]
   18b34:	6039      	str	r1, [r7, #0]
    return eval_exec_helper(n_args, args, MP_PARSE_EVAL_INPUT);
   18b36:	2202      	movs	r2, #2
   18b38:	6839      	ldr	r1, [r7, #0]
   18b3a:	6878      	ldr	r0, [r7, #4]
   18b3c:	f7ff ff90 	bl	18a60 <eval_exec_helper>
   18b40:	4603      	mov	r3, r0
}
   18b42:	4618      	mov	r0, r3
   18b44:	3708      	adds	r7, #8
   18b46:	46bd      	mov	sp, r7
   18b48:	bd80      	pop	{r7, pc}

00018b4a <mp_builtin_exec>:
MP_DEFINE_CONST_FUN_OBJ_VAR_BETWEEN(mp_builtin_eval_obj, 1, 3, mp_builtin_eval);

STATIC mp_obj_t mp_builtin_exec(size_t n_args, const mp_obj_t *args) {
   18b4a:	b580      	push	{r7, lr}
   18b4c:	b082      	sub	sp, #8
   18b4e:	af00      	add	r7, sp, #0
   18b50:	6078      	str	r0, [r7, #4]
   18b52:	6039      	str	r1, [r7, #0]
    return eval_exec_helper(n_args, args, MP_PARSE_FILE_INPUT);
   18b54:	2201      	movs	r2, #1
   18b56:	6839      	ldr	r1, [r7, #0]
   18b58:	6878      	ldr	r0, [r7, #4]
   18b5a:	f7ff ff81 	bl	18a60 <eval_exec_helper>
   18b5e:	4603      	mov	r3, r0
}
   18b60:	4618      	mov	r0, r3
   18b62:	3708      	adds	r7, #8
   18b64:	46bd      	mov	sp, r7
   18b66:	bd80      	pop	{r7, pc}

00018b68 <MP_OBJ_IS_SMALL_INT>:
    { return ((((mp_int_t)(o)) & 1) != 0); }
   18b68:	b480      	push	{r7}
   18b6a:	b083      	sub	sp, #12
   18b6c:	af00      	add	r7, sp, #0
   18b6e:	6078      	str	r0, [r7, #4]
   18b70:	687b      	ldr	r3, [r7, #4]
   18b72:	f003 0301 	and.w	r3, r3, #1
   18b76:	2b00      	cmp	r3, #0
   18b78:	bf14      	ite	ne
   18b7a:	2301      	movne	r3, #1
   18b7c:	2300      	moveq	r3, #0
   18b7e:	b2db      	uxtb	r3, r3
   18b80:	4618      	mov	r0, r3
   18b82:	370c      	adds	r7, #12
   18b84:	46bd      	mov	sp, r7
   18b86:	f85d 7b04 	ldr.w	r7, [sp], #4
   18b8a:	4770      	bx	lr

00018b8c <MP_OBJ_IS_OBJ>:
    { return ((((mp_int_t)(o)) & 3) == 0); }
   18b8c:	b480      	push	{r7}
   18b8e:	b083      	sub	sp, #12
   18b90:	af00      	add	r7, sp, #0
   18b92:	6078      	str	r0, [r7, #4]
   18b94:	687b      	ldr	r3, [r7, #4]
   18b96:	f003 0303 	and.w	r3, r3, #3
   18b9a:	2b00      	cmp	r3, #0
   18b9c:	bf0c      	ite	eq
   18b9e:	2301      	moveq	r3, #1
   18ba0:	2300      	movne	r3, #0
   18ba2:	b2db      	uxtb	r3, r3
   18ba4:	4618      	mov	r0, r3
   18ba6:	370c      	adds	r7, #12
   18ba8:	46bd      	mov	sp, r7
   18baa:	f85d 7b04 	ldr.w	r7, [sp], #4
   18bae:	4770      	bx	lr

00018bb0 <MP_MAP_SLOT_IS_FILLED>:
static inline bool MP_MAP_SLOT_IS_FILLED(const mp_map_t *map, size_t pos) { return ((map)->table[pos].key != MP_OBJ_NULL && (map)->table[pos].key != MP_OBJ_SENTINEL); }
   18bb0:	b480      	push	{r7}
   18bb2:	b083      	sub	sp, #12
   18bb4:	af00      	add	r7, sp, #0
   18bb6:	6078      	str	r0, [r7, #4]
   18bb8:	6039      	str	r1, [r7, #0]
   18bba:	687b      	ldr	r3, [r7, #4]
   18bbc:	689a      	ldr	r2, [r3, #8]
   18bbe:	683b      	ldr	r3, [r7, #0]
   18bc0:	00db      	lsls	r3, r3, #3
   18bc2:	4413      	add	r3, r2
   18bc4:	681b      	ldr	r3, [r3, #0]
   18bc6:	2b00      	cmp	r3, #0
   18bc8:	d009      	beq.n	18bde <MP_MAP_SLOT_IS_FILLED+0x2e>
   18bca:	687b      	ldr	r3, [r7, #4]
   18bcc:	689a      	ldr	r2, [r3, #8]
   18bce:	683b      	ldr	r3, [r7, #0]
   18bd0:	00db      	lsls	r3, r3, #3
   18bd2:	4413      	add	r3, r2
   18bd4:	681b      	ldr	r3, [r3, #0]
   18bd6:	2b08      	cmp	r3, #8
   18bd8:	d001      	beq.n	18bde <MP_MAP_SLOT_IS_FILLED+0x2e>
   18bda:	2301      	movs	r3, #1
   18bdc:	e000      	b.n	18be0 <MP_MAP_SLOT_IS_FILLED+0x30>
   18bde:	2300      	movs	r3, #0
   18be0:	f003 0301 	and.w	r3, r3, #1
   18be4:	b2db      	uxtb	r3, r3
   18be6:	4618      	mov	r0, r3
   18be8:	370c      	adds	r7, #12
   18bea:	46bd      	mov	sp, r7
   18bec:	f85d 7b04 	ldr.w	r7, [sp], #4
   18bf0:	4770      	bx	lr

00018bf2 <mp_obj_new_bool>:
static inline mp_obj_t mp_obj_new_bool(mp_int_t x) { return x ? mp_const_true : mp_const_false; }
   18bf2:	b480      	push	{r7}
   18bf4:	b083      	sub	sp, #12
   18bf6:	af00      	add	r7, sp, #0
   18bf8:	6078      	str	r0, [r7, #4]
   18bfa:	687b      	ldr	r3, [r7, #4]
   18bfc:	2b00      	cmp	r3, #0
   18bfe:	d001      	beq.n	18c04 <mp_obj_new_bool+0x12>
   18c00:	4b04      	ldr	r3, [pc, #16]	; (18c14 <mp_obj_new_bool+0x22>)
   18c02:	e000      	b.n	18c06 <mp_obj_new_bool+0x14>
   18c04:	4b04      	ldr	r3, [pc, #16]	; (18c18 <mp_obj_new_bool+0x26>)
   18c06:	4618      	mov	r0, r3
   18c08:	370c      	adds	r7, #12
   18c0a:	46bd      	mov	sp, r7
   18c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
   18c10:	4770      	bx	lr
   18c12:	bf00      	nop
   18c14:	0001f9c4 	.word	0x0001f9c4
   18c18:	0001f9bc 	.word	0x0001f9bc

00018c1c <mp_locals_get>:
static inline mp_obj_dict_t *mp_locals_get(void) { return MP_STATE_THREAD(dict_locals); }
   18c1c:	b480      	push	{r7}
   18c1e:	af00      	add	r7, sp, #0
   18c20:	4b03      	ldr	r3, [pc, #12]	; (18c30 <mp_locals_get+0x14>)
   18c22:	685b      	ldr	r3, [r3, #4]
   18c24:	4618      	mov	r0, r3
   18c26:	46bd      	mov	sp, r7
   18c28:	f85d 7b04 	ldr.w	r7, [sp], #4
   18c2c:	4770      	bx	lr
   18c2e:	bf00      	nop
   18c30:	20000a2c 	.word	0x20000a2c

00018c34 <mp_locals_set>:
static inline void mp_locals_set(mp_obj_dict_t *d) { MP_STATE_THREAD(dict_locals) = d; }
   18c34:	b480      	push	{r7}
   18c36:	b083      	sub	sp, #12
   18c38:	af00      	add	r7, sp, #0
   18c3a:	6078      	str	r0, [r7, #4]
   18c3c:	4a04      	ldr	r2, [pc, #16]	; (18c50 <mp_locals_set+0x1c>)
   18c3e:	687b      	ldr	r3, [r7, #4]
   18c40:	6053      	str	r3, [r2, #4]
   18c42:	bf00      	nop
   18c44:	370c      	adds	r7, #12
   18c46:	46bd      	mov	sp, r7
   18c48:	f85d 7b04 	ldr.w	r7, [sp], #4
   18c4c:	4770      	bx	lr
   18c4e:	bf00      	nop
   18c50:	20000a2c 	.word	0x20000a2c

00018c54 <mp_globals_get>:
static inline mp_obj_dict_t *mp_globals_get(void) { return MP_STATE_THREAD(dict_globals); }
   18c54:	b480      	push	{r7}
   18c56:	af00      	add	r7, sp, #0
   18c58:	4b03      	ldr	r3, [pc, #12]	; (18c68 <mp_globals_get+0x14>)
   18c5a:	689b      	ldr	r3, [r3, #8]
   18c5c:	4618      	mov	r0, r3
   18c5e:	46bd      	mov	sp, r7
   18c60:	f85d 7b04 	ldr.w	r7, [sp], #4
   18c64:	4770      	bx	lr
   18c66:	bf00      	nop
   18c68:	20000a2c 	.word	0x20000a2c

00018c6c <mp_builtin___build_class__>:
#endif

// args[0] is function from class body
// args[1] is class name
// args[2:] are base objects
STATIC mp_obj_t mp_builtin___build_class__(size_t n_args, const mp_obj_t *args) {
   18c6c:	b580      	push	{r7, lr}
   18c6e:	b08a      	sub	sp, #40	; 0x28
   18c70:	af00      	add	r7, sp, #0
   18c72:	6078      	str	r0, [r7, #4]
   18c74:	6039      	str	r1, [r7, #0]
    assert(2 <= n_args);
   18c76:	687b      	ldr	r3, [r7, #4]
   18c78:	2b01      	cmp	r3, #1
   18c7a:	d805      	bhi.n	18c88 <mp_builtin___build_class__+0x1c>
   18c7c:	4b24      	ldr	r3, [pc, #144]	; (18d10 <mp_builtin___build_class__+0xa4>)
   18c7e:	4a25      	ldr	r2, [pc, #148]	; (18d14 <mp_builtin___build_class__+0xa8>)
   18c80:	2132      	movs	r1, #50	; 0x32
   18c82:	4825      	ldr	r0, [pc, #148]	; (18d18 <mp_builtin___build_class__+0xac>)
   18c84:	f002 fa9a 	bl	1b1bc <__assert_func>

    // set the new classes __locals__ object
    mp_obj_dict_t *old_locals = mp_locals_get();
   18c88:	f7ff ffc8 	bl	18c1c <mp_locals_get>
   18c8c:	6238      	str	r0, [r7, #32]
    mp_obj_t class_locals = mp_obj_new_dict(0);
   18c8e:	2000      	movs	r0, #0
   18c90:	f7f6 f9c2 	bl	f018 <mp_obj_new_dict>
   18c94:	61f8      	str	r0, [r7, #28]
    mp_locals_set(MP_OBJ_TO_PTR(class_locals));
   18c96:	69f8      	ldr	r0, [r7, #28]
   18c98:	f7ff ffcc 	bl	18c34 <mp_locals_set>

    // call the class code
    mp_obj_t cell = mp_call_function_0(args[0]);
   18c9c:	683b      	ldr	r3, [r7, #0]
   18c9e:	681b      	ldr	r3, [r3, #0]
   18ca0:	4618      	mov	r0, r3
   18ca2:	f7f3 f84b 	bl	bd3c <mp_call_function_0>
   18ca6:	61b8      	str	r0, [r7, #24]

    // restore old __locals__ object
    mp_locals_set(old_locals);
   18ca8:	6a38      	ldr	r0, [r7, #32]
   18caa:	f7ff ffc3 	bl	18c34 <mp_locals_set>

    // get the class type (meta object) from the base objects
    mp_obj_t meta;
    if (n_args == 2) {
   18cae:	687b      	ldr	r3, [r7, #4]
   18cb0:	2b02      	cmp	r3, #2
   18cb2:	d102      	bne.n	18cba <mp_builtin___build_class__+0x4e>
        // no explicit bases, so use 'type'
        meta = MP_OBJ_FROM_PTR(&mp_type_type);
   18cb4:	4b19      	ldr	r3, [pc, #100]	; (18d1c <mp_builtin___build_class__+0xb0>)
   18cb6:	627b      	str	r3, [r7, #36]	; 0x24
   18cb8:	e006      	b.n	18cc8 <mp_builtin___build_class__+0x5c>
    } else {
        // use type of first base object
        meta = MP_OBJ_FROM_PTR(mp_obj_get_type(args[2]));
   18cba:	683b      	ldr	r3, [r7, #0]
   18cbc:	3308      	adds	r3, #8
   18cbe:	681b      	ldr	r3, [r3, #0]
   18cc0:	4618      	mov	r0, r3
   18cc2:	f7f4 fd45 	bl	d750 <mp_obj_get_type>
   18cc6:	6278      	str	r0, [r7, #36]	; 0x24

    // TODO do proper metaclass resolution for multiple base objects

    // create the new class using a call to the meta object
    mp_obj_t meta_args[3];
    meta_args[0] = args[1]; // class name
   18cc8:	683b      	ldr	r3, [r7, #0]
   18cca:	685b      	ldr	r3, [r3, #4]
   18ccc:	60bb      	str	r3, [r7, #8]
    meta_args[1] = mp_obj_new_tuple(n_args - 2, args + 2); // tuple of bases
   18cce:	687b      	ldr	r3, [r7, #4]
   18cd0:	1e9a      	subs	r2, r3, #2
   18cd2:	683b      	ldr	r3, [r7, #0]
   18cd4:	3308      	adds	r3, #8
   18cd6:	4619      	mov	r1, r3
   18cd8:	4610      	mov	r0, r2
   18cda:	f7fc ff61 	bl	15ba0 <mp_obj_new_tuple>
   18cde:	4603      	mov	r3, r0
   18ce0:	60fb      	str	r3, [r7, #12]
    meta_args[2] = class_locals; // dict of members
   18ce2:	69fb      	ldr	r3, [r7, #28]
   18ce4:	613b      	str	r3, [r7, #16]
    mp_obj_t new_class = mp_call_function_n_kw(meta, 3, 0, meta_args);
   18ce6:	f107 0308 	add.w	r3, r7, #8
   18cea:	2200      	movs	r2, #0
   18cec:	2103      	movs	r1, #3
   18cee:	6a78      	ldr	r0, [r7, #36]	; 0x24
   18cf0:	f7f3 f859 	bl	bda6 <mp_call_function_n_kw>
   18cf4:	6178      	str	r0, [r7, #20]

    // store into cell if neede
    if (cell != mp_const_none) {
   18cf6:	69bb      	ldr	r3, [r7, #24]
   18cf8:	4a09      	ldr	r2, [pc, #36]	; (18d20 <mp_builtin___build_class__+0xb4>)
   18cfa:	4293      	cmp	r3, r2
   18cfc:	d003      	beq.n	18d06 <mp_builtin___build_class__+0x9a>
        mp_obj_cell_set(cell, new_class);
   18cfe:	6979      	ldr	r1, [r7, #20]
   18d00:	69b8      	ldr	r0, [r7, #24]
   18d02:	f7f5 fa71 	bl	e1e8 <mp_obj_cell_set>
    }

    return new_class;
   18d06:	697b      	ldr	r3, [r7, #20]
}
   18d08:	4618      	mov	r0, r3
   18d0a:	3728      	adds	r7, #40	; 0x28
   18d0c:	46bd      	mov	sp, r7
   18d0e:	bd80      	pop	{r7, pc}
   18d10:	000223d4 	.word	0x000223d4
   18d14:	00022800 	.word	0x00022800
   18d18:	000223e0 	.word	0x000223e0
   18d1c:	00021ee0 	.word	0x00021ee0
   18d20:	000212b4 	.word	0x000212b4

00018d24 <mp_builtin_abs>:
MP_DEFINE_CONST_FUN_OBJ_VAR(mp_builtin___build_class___obj, 2, mp_builtin___build_class__);

STATIC mp_obj_t mp_builtin_abs(mp_obj_t o_in) {
   18d24:	b580      	push	{r7, lr}
   18d26:	b082      	sub	sp, #8
   18d28:	af00      	add	r7, sp, #0
   18d2a:	6078      	str	r0, [r7, #4]
    return mp_unary_op(MP_UNARY_OP_ABS, o_in);
   18d2c:	6879      	ldr	r1, [r7, #4]
   18d2e:	2007      	movs	r0, #7
   18d30:	f7f2 fcc0 	bl	b6b4 <mp_unary_op>
   18d34:	4603      	mov	r3, r0
}
   18d36:	4618      	mov	r0, r3
   18d38:	3708      	adds	r7, #8
   18d3a:	46bd      	mov	sp, r7
   18d3c:	bd80      	pop	{r7, pc}

00018d3e <mp_builtin_all>:
MP_DEFINE_CONST_FUN_OBJ_1(mp_builtin_abs_obj, mp_builtin_abs);

STATIC mp_obj_t mp_builtin_all(mp_obj_t o_in) {
   18d3e:	b580      	push	{r7, lr}
   18d40:	b088      	sub	sp, #32
   18d42:	af00      	add	r7, sp, #0
   18d44:	6078      	str	r0, [r7, #4]
    mp_obj_iter_buf_t iter_buf;
    mp_obj_t iterable = mp_getiter(o_in, &iter_buf);
   18d46:	f107 0308 	add.w	r3, r7, #8
   18d4a:	4619      	mov	r1, r3
   18d4c:	6878      	ldr	r0, [r7, #4]
   18d4e:	f7f3 fd9b 	bl	c888 <mp_getiter>
   18d52:	61f8      	str	r0, [r7, #28]
    mp_obj_t item;
    while ((item = mp_iternext(iterable)) != MP_OBJ_STOP_ITERATION) {
   18d54:	e00a      	b.n	18d6c <mp_builtin_all+0x2e>
        if (!mp_obj_is_true(item)) {
   18d56:	69b8      	ldr	r0, [r7, #24]
   18d58:	f7f4 fdd6 	bl	d908 <mp_obj_is_true>
   18d5c:	4603      	mov	r3, r0
   18d5e:	f083 0301 	eor.w	r3, r3, #1
   18d62:	b2db      	uxtb	r3, r3
   18d64:	2b00      	cmp	r3, #0
   18d66:	d001      	beq.n	18d6c <mp_builtin_all+0x2e>
            return mp_const_false;
   18d68:	4b06      	ldr	r3, [pc, #24]	; (18d84 <mp_builtin_all+0x46>)
   18d6a:	e007      	b.n	18d7c <mp_builtin_all+0x3e>
    while ((item = mp_iternext(iterable)) != MP_OBJ_STOP_ITERATION) {
   18d6c:	69f8      	ldr	r0, [r7, #28]
   18d6e:	f7f3 fe0d 	bl	c98c <mp_iternext>
   18d72:	61b8      	str	r0, [r7, #24]
   18d74:	69bb      	ldr	r3, [r7, #24]
   18d76:	2b04      	cmp	r3, #4
   18d78:	d1ed      	bne.n	18d56 <mp_builtin_all+0x18>
        }
    }
    return mp_const_true;
   18d7a:	4b03      	ldr	r3, [pc, #12]	; (18d88 <mp_builtin_all+0x4a>)
}
   18d7c:	4618      	mov	r0, r3
   18d7e:	3720      	adds	r7, #32
   18d80:	46bd      	mov	sp, r7
   18d82:	bd80      	pop	{r7, pc}
   18d84:	0001f9bc 	.word	0x0001f9bc
   18d88:	0001f9c4 	.word	0x0001f9c4

00018d8c <mp_builtin_any>:
MP_DEFINE_CONST_FUN_OBJ_1(mp_builtin_all_obj, mp_builtin_all);

STATIC mp_obj_t mp_builtin_any(mp_obj_t o_in) {
   18d8c:	b580      	push	{r7, lr}
   18d8e:	b088      	sub	sp, #32
   18d90:	af00      	add	r7, sp, #0
   18d92:	6078      	str	r0, [r7, #4]
    mp_obj_iter_buf_t iter_buf;
    mp_obj_t iterable = mp_getiter(o_in, &iter_buf);
   18d94:	f107 0308 	add.w	r3, r7, #8
   18d98:	4619      	mov	r1, r3
   18d9a:	6878      	ldr	r0, [r7, #4]
   18d9c:	f7f3 fd74 	bl	c888 <mp_getiter>
   18da0:	61f8      	str	r0, [r7, #28]
    mp_obj_t item;
    while ((item = mp_iternext(iterable)) != MP_OBJ_STOP_ITERATION) {
   18da2:	e007      	b.n	18db4 <mp_builtin_any+0x28>
        if (mp_obj_is_true(item)) {
   18da4:	69b8      	ldr	r0, [r7, #24]
   18da6:	f7f4 fdaf 	bl	d908 <mp_obj_is_true>
   18daa:	4603      	mov	r3, r0
   18dac:	2b00      	cmp	r3, #0
   18dae:	d001      	beq.n	18db4 <mp_builtin_any+0x28>
            return mp_const_true;
   18db0:	4b06      	ldr	r3, [pc, #24]	; (18dcc <mp_builtin_any+0x40>)
   18db2:	e007      	b.n	18dc4 <mp_builtin_any+0x38>
    while ((item = mp_iternext(iterable)) != MP_OBJ_STOP_ITERATION) {
   18db4:	69f8      	ldr	r0, [r7, #28]
   18db6:	f7f3 fde9 	bl	c98c <mp_iternext>
   18dba:	61b8      	str	r0, [r7, #24]
   18dbc:	69bb      	ldr	r3, [r7, #24]
   18dbe:	2b04      	cmp	r3, #4
   18dc0:	d1f0      	bne.n	18da4 <mp_builtin_any+0x18>
        }
    }
    return mp_const_false;
   18dc2:	4b03      	ldr	r3, [pc, #12]	; (18dd0 <mp_builtin_any+0x44>)
}
   18dc4:	4618      	mov	r0, r3
   18dc6:	3720      	adds	r7, #32
   18dc8:	46bd      	mov	sp, r7
   18dca:	bd80      	pop	{r7, pc}
   18dcc:	0001f9c4 	.word	0x0001f9c4
   18dd0:	0001f9bc 	.word	0x0001f9bc

00018dd4 <mp_builtin_bin>:
MP_DEFINE_CONST_FUN_OBJ_1(mp_builtin_any_obj, mp_builtin_any);

STATIC mp_obj_t mp_builtin_bin(mp_obj_t o_in) {
   18dd4:	b580      	push	{r7, lr}
   18dd6:	b084      	sub	sp, #16
   18dd8:	af00      	add	r7, sp, #0
   18dda:	6078      	str	r0, [r7, #4]
    mp_obj_t args[] = { MP_OBJ_NEW_QSTR(MP_QSTR__brace_open__colon__hash_b_brace_close_), o_in };
   18ddc:	23ae      	movs	r3, #174	; 0xae
   18dde:	60bb      	str	r3, [r7, #8]
   18de0:	687b      	ldr	r3, [r7, #4]
   18de2:	60fb      	str	r3, [r7, #12]
    return mp_obj_str_format(MP_ARRAY_SIZE(args), args, NULL);
   18de4:	f107 0308 	add.w	r3, r7, #8
   18de8:	2200      	movs	r2, #0
   18dea:	4619      	mov	r1, r3
   18dec:	2002      	movs	r0, #2
   18dee:	f7fb f9cb 	bl	14188 <mp_obj_str_format>
   18df2:	4603      	mov	r3, r0
}
   18df4:	4618      	mov	r0, r3
   18df6:	3710      	adds	r7, #16
   18df8:	46bd      	mov	sp, r7
   18dfa:	bd80      	pop	{r7, pc}

00018dfc <mp_builtin_callable>:
MP_DEFINE_CONST_FUN_OBJ_1(mp_builtin_bin_obj, mp_builtin_bin);

STATIC mp_obj_t mp_builtin_callable(mp_obj_t o_in) {
   18dfc:	b580      	push	{r7, lr}
   18dfe:	b082      	sub	sp, #8
   18e00:	af00      	add	r7, sp, #0
   18e02:	6078      	str	r0, [r7, #4]
    if (mp_obj_is_callable(o_in)) {
   18e04:	6878      	ldr	r0, [r7, #4]
   18e06:	f7f4 fdd5 	bl	d9b4 <mp_obj_is_callable>
   18e0a:	4603      	mov	r3, r0
   18e0c:	2b00      	cmp	r3, #0
   18e0e:	d001      	beq.n	18e14 <mp_builtin_callable+0x18>
        return mp_const_true;
   18e10:	4b03      	ldr	r3, [pc, #12]	; (18e20 <mp_builtin_callable+0x24>)
   18e12:	e000      	b.n	18e16 <mp_builtin_callable+0x1a>
    } else {
        return mp_const_false;
   18e14:	4b03      	ldr	r3, [pc, #12]	; (18e24 <mp_builtin_callable+0x28>)
    }
}
   18e16:	4618      	mov	r0, r3
   18e18:	3708      	adds	r7, #8
   18e1a:	46bd      	mov	sp, r7
   18e1c:	bd80      	pop	{r7, pc}
   18e1e:	bf00      	nop
   18e20:	0001f9c4 	.word	0x0001f9c4
   18e24:	0001f9bc 	.word	0x0001f9bc

00018e28 <mp_builtin_chr>:
MP_DEFINE_CONST_FUN_OBJ_1(mp_builtin_callable_obj, mp_builtin_callable);

STATIC mp_obj_t mp_builtin_chr(mp_obj_t o_in) {
   18e28:	b580      	push	{r7, lr}
   18e2a:	b084      	sub	sp, #16
   18e2c:	af00      	add	r7, sp, #0
   18e2e:	6078      	str	r0, [r7, #4]
    } else {
        mp_raise_ValueError("chr() arg not in range(0x110000)");
    }
    return mp_obj_new_str_via_qstr((char*)str, len);
    #else
    mp_int_t ord = mp_obj_get_int(o_in);
   18e30:	6878      	ldr	r0, [r7, #4]
   18e32:	f7f4 fe69 	bl	db08 <mp_obj_get_int>
   18e36:	60f8      	str	r0, [r7, #12]
    if (0 <= ord && ord <= 0xff) {
   18e38:	68fb      	ldr	r3, [r7, #12]
   18e3a:	2b00      	cmp	r3, #0
   18e3c:	db0d      	blt.n	18e5a <mp_builtin_chr+0x32>
   18e3e:	68fb      	ldr	r3, [r7, #12]
   18e40:	2bff      	cmp	r3, #255	; 0xff
   18e42:	dc0a      	bgt.n	18e5a <mp_builtin_chr+0x32>
        uint8_t str[1] = {ord};
   18e44:	68fb      	ldr	r3, [r7, #12]
   18e46:	b2db      	uxtb	r3, r3
   18e48:	723b      	strb	r3, [r7, #8]
        return mp_obj_new_str_via_qstr((char*)str, 1);
   18e4a:	f107 0308 	add.w	r3, r7, #8
   18e4e:	2101      	movs	r1, #1
   18e50:	4618      	mov	r0, r3
   18e52:	f7fc f937 	bl	150c4 <mp_obj_new_str_via_qstr>
   18e56:	4603      	mov	r3, r0
   18e58:	e002      	b.n	18e60 <mp_builtin_chr+0x38>
    } else {
        mp_raise_ValueError("chr() arg not in range(256)");
   18e5a:	4803      	ldr	r0, [pc, #12]	; (18e68 <mp_builtin_chr+0x40>)
   18e5c:	f7f4 f857 	bl	cf0e <mp_raise_ValueError>
    }
    #endif
}
   18e60:	4618      	mov	r0, r3
   18e62:	3710      	adds	r7, #16
   18e64:	46bd      	mov	sp, r7
   18e66:	bd80      	pop	{r7, pc}
   18e68:	0002242c 	.word	0x0002242c

00018e6c <mp_builtin_dir>:
MP_DEFINE_CONST_FUN_OBJ_1(mp_builtin_chr_obj, mp_builtin_chr);

STATIC mp_obj_t mp_builtin_dir(size_t n_args, const mp_obj_t *args) {
   18e6c:	b580      	push	{r7, lr}
   18e6e:	b08a      	sub	sp, #40	; 0x28
   18e70:	af00      	add	r7, sp, #0
   18e72:	6078      	str	r0, [r7, #4]
   18e74:	6039      	str	r1, [r7, #0]
    mp_obj_t dir = mp_obj_new_list(0, NULL);
   18e76:	2100      	movs	r1, #0
   18e78:	2000      	movs	r0, #0
   18e7a:	f7f8 fc34 	bl	116e6 <mp_obj_new_list>
   18e7e:	61f8      	str	r0, [r7, #28]
    if (n_args == 0) {
   18e80:	687b      	ldr	r3, [r7, #4]
   18e82:	2b00      	cmp	r3, #0
   18e84:	d121      	bne.n	18eca <mp_builtin_dir+0x5e>
        // Make a list of names in the local namespace
        mp_obj_dict_t *dict = mp_locals_get();
   18e86:	f7ff fec9 	bl	18c1c <mp_locals_get>
   18e8a:	61b8      	str	r0, [r7, #24]
        for (size_t i = 0; i < dict->map.alloc; i++) {
   18e8c:	2300      	movs	r3, #0
   18e8e:	627b      	str	r3, [r7, #36]	; 0x24
   18e90:	e015      	b.n	18ebe <mp_builtin_dir+0x52>
            if (MP_MAP_SLOT_IS_FILLED(&dict->map, i)) {
   18e92:	69bb      	ldr	r3, [r7, #24]
   18e94:	3304      	adds	r3, #4
   18e96:	6a79      	ldr	r1, [r7, #36]	; 0x24
   18e98:	4618      	mov	r0, r3
   18e9a:	f7ff fe89 	bl	18bb0 <MP_MAP_SLOT_IS_FILLED>
   18e9e:	4603      	mov	r3, r0
   18ea0:	2b00      	cmp	r3, #0
   18ea2:	d009      	beq.n	18eb8 <mp_builtin_dir+0x4c>
                mp_obj_list_append(dir, dict->map.table[i].key);
   18ea4:	69bb      	ldr	r3, [r7, #24]
   18ea6:	68da      	ldr	r2, [r3, #12]
   18ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   18eaa:	00db      	lsls	r3, r3, #3
   18eac:	4413      	add	r3, r2
   18eae:	681b      	ldr	r3, [r3, #0]
   18eb0:	4619      	mov	r1, r3
   18eb2:	69f8      	ldr	r0, [r7, #28]
   18eb4:	f7f7 ffab 	bl	10e0e <mp_obj_list_append>
        for (size_t i = 0; i < dict->map.alloc; i++) {
   18eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   18eba:	3301      	adds	r3, #1
   18ebc:	627b      	str	r3, [r7, #36]	; 0x24
   18ebe:	69bb      	ldr	r3, [r7, #24]
   18ec0:	689a      	ldr	r2, [r3, #8]
   18ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   18ec4:	429a      	cmp	r2, r3
   18ec6:	d8e4      	bhi.n	18e92 <mp_builtin_dir+0x26>
   18ec8:	e024      	b.n	18f14 <mp_builtin_dir+0xa8>
            }
        }
    } else { // n_args == 1
        // Make a list of names in the given object
        // Implemented by probing all possible qstrs with mp_load_method_maybe
        size_t nqstr = QSTR_TOTAL();
   18eca:	4b15      	ldr	r3, [pc, #84]	; (18f20 <mp_builtin_dir+0xb4>)
   18ecc:	691b      	ldr	r3, [r3, #16]
   18ece:	685a      	ldr	r2, [r3, #4]
   18ed0:	4b13      	ldr	r3, [pc, #76]	; (18f20 <mp_builtin_dir+0xb4>)
   18ed2:	691b      	ldr	r3, [r3, #16]
   18ed4:	68db      	ldr	r3, [r3, #12]
   18ed6:	4413      	add	r3, r2
   18ed8:	617b      	str	r3, [r7, #20]
        for (size_t i = MP_QSTR_ + 1; i < nqstr; ++i) {
   18eda:	2302      	movs	r3, #2
   18edc:	623b      	str	r3, [r7, #32]
   18ede:	e015      	b.n	18f0c <mp_builtin_dir+0xa0>
            mp_obj_t dest[2];
            mp_load_method_protected(args[0], i, dest, false);
   18ee0:	683b      	ldr	r3, [r7, #0]
   18ee2:	6818      	ldr	r0, [r3, #0]
   18ee4:	f107 020c 	add.w	r2, r7, #12
   18ee8:	2300      	movs	r3, #0
   18eea:	6a39      	ldr	r1, [r7, #32]
   18eec:	f7f3 fc70 	bl	c7d0 <mp_load_method_protected>
            if (dest[0] != MP_OBJ_NULL) {
   18ef0:	68fb      	ldr	r3, [r7, #12]
   18ef2:	2b00      	cmp	r3, #0
   18ef4:	d007      	beq.n	18f06 <mp_builtin_dir+0x9a>
                // This relies on MP_QSTR__dir__ being first after MP_QSTR_
                if (i == MP_QSTR___dir__ && dest[1] != MP_OBJ_NULL) {
                    return mp_call_method_n_kw(0, 0, dest);
                }
                #endif
                mp_obj_list_append(dir, MP_OBJ_NEW_QSTR(i));
   18ef6:	6a3b      	ldr	r3, [r7, #32]
   18ef8:	009b      	lsls	r3, r3, #2
   18efa:	f043 0302 	orr.w	r3, r3, #2
   18efe:	4619      	mov	r1, r3
   18f00:	69f8      	ldr	r0, [r7, #28]
   18f02:	f7f7 ff84 	bl	10e0e <mp_obj_list_append>
        for (size_t i = MP_QSTR_ + 1; i < nqstr; ++i) {
   18f06:	6a3b      	ldr	r3, [r7, #32]
   18f08:	3301      	adds	r3, #1
   18f0a:	623b      	str	r3, [r7, #32]
   18f0c:	6a3a      	ldr	r2, [r7, #32]
   18f0e:	697b      	ldr	r3, [r7, #20]
   18f10:	429a      	cmp	r2, r3
   18f12:	d3e5      	bcc.n	18ee0 <mp_builtin_dir+0x74>
            }
        }
    }
    return dir;
   18f14:	69fb      	ldr	r3, [r7, #28]
}
   18f16:	4618      	mov	r0, r3
   18f18:	3728      	adds	r7, #40	; 0x28
   18f1a:	46bd      	mov	sp, r7
   18f1c:	bd80      	pop	{r7, pc}
   18f1e:	bf00      	nop
   18f20:	20000a2c 	.word	0x20000a2c

00018f24 <mp_builtin_divmod>:
MP_DEFINE_CONST_FUN_OBJ_VAR_BETWEEN(mp_builtin_dir_obj, 0, 1, mp_builtin_dir);

STATIC mp_obj_t mp_builtin_divmod(mp_obj_t o1_in, mp_obj_t o2_in) {
   18f24:	b580      	push	{r7, lr}
   18f26:	b082      	sub	sp, #8
   18f28:	af00      	add	r7, sp, #0
   18f2a:	6078      	str	r0, [r7, #4]
   18f2c:	6039      	str	r1, [r7, #0]
    return mp_binary_op(MP_BINARY_OP_DIVMOD, o1_in, o2_in);
   18f2e:	683a      	ldr	r2, [r7, #0]
   18f30:	6879      	ldr	r1, [r7, #4]
   18f32:	2021      	movs	r0, #33	; 0x21
   18f34:	f7f2 fca4 	bl	b880 <mp_binary_op>
   18f38:	4603      	mov	r3, r0
}
   18f3a:	4618      	mov	r0, r3
   18f3c:	3708      	adds	r7, #8
   18f3e:	46bd      	mov	sp, r7
   18f40:	bd80      	pop	{r7, pc}

00018f42 <mp_builtin_hash>:
MP_DEFINE_CONST_FUN_OBJ_2(mp_builtin_divmod_obj, mp_builtin_divmod);

STATIC mp_obj_t mp_builtin_hash(mp_obj_t o_in) {
   18f42:	b580      	push	{r7, lr}
   18f44:	b082      	sub	sp, #8
   18f46:	af00      	add	r7, sp, #0
   18f48:	6078      	str	r0, [r7, #4]
    // result is guaranteed to be a (small) int
    return mp_unary_op(MP_UNARY_OP_HASH, o_in);
   18f4a:	6879      	ldr	r1, [r7, #4]
   18f4c:	2006      	movs	r0, #6
   18f4e:	f7f2 fbb1 	bl	b6b4 <mp_unary_op>
   18f52:	4603      	mov	r3, r0
}
   18f54:	4618      	mov	r0, r3
   18f56:	3708      	adds	r7, #8
   18f58:	46bd      	mov	sp, r7
   18f5a:	bd80      	pop	{r7, pc}

00018f5c <mp_builtin_hex>:
MP_DEFINE_CONST_FUN_OBJ_1(mp_builtin_hash_obj, mp_builtin_hash);

STATIC mp_obj_t mp_builtin_hex(mp_obj_t o_in) {
   18f5c:	b580      	push	{r7, lr}
   18f5e:	b082      	sub	sp, #8
   18f60:	af00      	add	r7, sp, #0
   18f62:	6078      	str	r0, [r7, #4]
    return mp_binary_op(MP_BINARY_OP_MODULO, MP_OBJ_NEW_QSTR(MP_QSTR__percent__hash_x), o_in);
   18f64:	687a      	ldr	r2, [r7, #4]
   18f66:	21aa      	movs	r1, #170	; 0xaa
   18f68:	201f      	movs	r0, #31
   18f6a:	f7f2 fc89 	bl	b880 <mp_binary_op>
   18f6e:	4603      	mov	r3, r0
}
   18f70:	4618      	mov	r0, r3
   18f72:	3708      	adds	r7, #8
   18f74:	46bd      	mov	sp, r7
   18f76:	bd80      	pop	{r7, pc}

00018f78 <mp_builtin_iter>:
}
MP_DEFINE_CONST_FUN_OBJ_VAR_BETWEEN(mp_builtin_input_obj, 0, 1, mp_builtin_input);

#endif

STATIC mp_obj_t mp_builtin_iter(mp_obj_t o_in) {
   18f78:	b580      	push	{r7, lr}
   18f7a:	b082      	sub	sp, #8
   18f7c:	af00      	add	r7, sp, #0
   18f7e:	6078      	str	r0, [r7, #4]
    return mp_getiter(o_in, NULL);
   18f80:	2100      	movs	r1, #0
   18f82:	6878      	ldr	r0, [r7, #4]
   18f84:	f7f3 fc80 	bl	c888 <mp_getiter>
   18f88:	4603      	mov	r3, r0
}
   18f8a:	4618      	mov	r0, r3
   18f8c:	3708      	adds	r7, #8
   18f8e:	46bd      	mov	sp, r7
   18f90:	bd80      	pop	{r7, pc}

00018f92 <mp_builtin_next>:
}
MP_DEFINE_CONST_FUN_OBJ_KW(mp_builtin_min_obj, 1, mp_builtin_min);

#endif

STATIC mp_obj_t mp_builtin_next(mp_obj_t o) {
   18f92:	b580      	push	{r7, lr}
   18f94:	b084      	sub	sp, #16
   18f96:	af00      	add	r7, sp, #0
   18f98:	6078      	str	r0, [r7, #4]
    mp_obj_t ret = mp_iternext_allow_raise(o);
   18f9a:	6878      	ldr	r0, [r7, #4]
   18f9c:	f7f3 fcc8 	bl	c930 <mp_iternext_allow_raise>
   18fa0:	60f8      	str	r0, [r7, #12]
    if (ret == MP_OBJ_STOP_ITERATION) {
   18fa2:	68fb      	ldr	r3, [r7, #12]
   18fa4:	2b04      	cmp	r3, #4
   18fa6:	d106      	bne.n	18fb6 <mp_builtin_next+0x24>
        nlr_raise(mp_obj_new_exception(&mp_type_StopIteration));
   18fa8:	4805      	ldr	r0, [pc, #20]	; (18fc0 <mp_builtin_next+0x2e>)
   18faa:	f7f6 f9df 	bl	f36c <mp_obj_new_exception>
   18fae:	4603      	mov	r3, r0
   18fb0:	4618      	mov	r0, r3
   18fb2:	f7e7 f995 	bl	2e0 <nlr_jump>
    } else {
        return ret;
   18fb6:	68fb      	ldr	r3, [r7, #12]
    }
}
   18fb8:	4618      	mov	r0, r3
   18fba:	3710      	adds	r7, #16
   18fbc:	46bd      	mov	sp, r7
   18fbe:	bd80      	pop	{r7, pc}
   18fc0:	000200ac 	.word	0x000200ac

00018fc4 <mp_builtin_oct>:
MP_DEFINE_CONST_FUN_OBJ_1(mp_builtin_next_obj, mp_builtin_next);

STATIC mp_obj_t mp_builtin_oct(mp_obj_t o_in) {
   18fc4:	b580      	push	{r7, lr}
   18fc6:	b082      	sub	sp, #8
   18fc8:	af00      	add	r7, sp, #0
   18fca:	6078      	str	r0, [r7, #4]
    return mp_binary_op(MP_BINARY_OP_MODULO, MP_OBJ_NEW_QSTR(MP_QSTR__percent__hash_o), o_in);
   18fcc:	687a      	ldr	r2, [r7, #4]
   18fce:	21a6      	movs	r1, #166	; 0xa6
   18fd0:	201f      	movs	r0, #31
   18fd2:	f7f2 fc55 	bl	b880 <mp_binary_op>
   18fd6:	4603      	mov	r3, r0
}
   18fd8:	4618      	mov	r0, r3
   18fda:	3708      	adds	r7, #8
   18fdc:	46bd      	mov	sp, r7
   18fde:	bd80      	pop	{r7, pc}

00018fe0 <mp_builtin_ord>:
MP_DEFINE_CONST_FUN_OBJ_1(mp_builtin_oct_obj, mp_builtin_oct);

STATIC mp_obj_t mp_builtin_ord(mp_obj_t o_in) {
   18fe0:	b580      	push	{r7, lr}
   18fe2:	b084      	sub	sp, #16
   18fe4:	af00      	add	r7, sp, #0
   18fe6:	6078      	str	r0, [r7, #4]
    size_t len;
    const byte *str = (const byte*)mp_obj_str_get_data(o_in, &len);
   18fe8:	f107 0308 	add.w	r3, r7, #8
   18fec:	4619      	mov	r1, r3
   18fee:	6878      	ldr	r0, [r7, #4]
   18ff0:	f7fc fa3a 	bl	15468 <mp_obj_str_get_data>
   18ff4:	60f8      	str	r0, [r7, #12]
        }
    } else
    #endif
    {
        // a bytes object, or a str without unicode support (don't sign extend the char)
        if (len == 1) {
   18ff6:	68bb      	ldr	r3, [r7, #8]
   18ff8:	2b01      	cmp	r3, #1
   18ffa:	d105      	bne.n	19008 <mp_builtin_ord+0x28>
            return MP_OBJ_NEW_SMALL_INT(str[0]);
   18ffc:	68fb      	ldr	r3, [r7, #12]
   18ffe:	781b      	ldrb	r3, [r3, #0]
   19000:	005b      	lsls	r3, r3, #1
   19002:	f043 0301 	orr.w	r3, r3, #1
   19006:	e002      	b.n	1900e <mp_builtin_ord+0x2e>
        }
    }

    if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
        mp_raise_TypeError("ord expects a character");
   19008:	4803      	ldr	r0, [pc, #12]	; (19018 <mp_builtin_ord+0x38>)
   1900a:	f7f3 ff8b 	bl	cf24 <mp_raise_TypeError>
    } else {
        nlr_raise(mp_obj_new_exception_msg_varg(&mp_type_TypeError,
            "ord() expected a character, but string of length %d found", (int)len));
    }
}
   1900e:	4618      	mov	r0, r3
   19010:	3710      	adds	r7, #16
   19012:	46bd      	mov	sp, r7
   19014:	bd80      	pop	{r7, pc}
   19016:	bf00      	nop
   19018:	0002248c 	.word	0x0002248c

0001901c <mp_builtin_pow>:
MP_DEFINE_CONST_FUN_OBJ_1(mp_builtin_ord_obj, mp_builtin_ord);

STATIC mp_obj_t mp_builtin_pow(size_t n_args, const mp_obj_t *args) {
   1901c:	b580      	push	{r7, lr}
   1901e:	b082      	sub	sp, #8
   19020:	af00      	add	r7, sp, #0
   19022:	6078      	str	r0, [r7, #4]
   19024:	6039      	str	r1, [r7, #0]
    switch (n_args) {
   19026:	687b      	ldr	r3, [r7, #4]
   19028:	2b02      	cmp	r3, #2
   1902a:	d10a      	bne.n	19042 <mp_builtin_pow+0x26>
        case 2: return mp_binary_op(MP_BINARY_OP_POWER, args[0], args[1]);
   1902c:	683b      	ldr	r3, [r7, #0]
   1902e:	6819      	ldr	r1, [r3, #0]
   19030:	683b      	ldr	r3, [r7, #0]
   19032:	3304      	adds	r3, #4
   19034:	681b      	ldr	r3, [r3, #0]
   19036:	461a      	mov	r2, r3
   19038:	2020      	movs	r0, #32
   1903a:	f7f2 fc21 	bl	b880 <mp_binary_op>
   1903e:	4603      	mov	r3, r0
   19040:	e003      	b.n	1904a <mp_builtin_pow+0x2e>
        default:
#if !MICROPY_PY_BUILTINS_POW3
            mp_raise_msg(&mp_type_NotImplementedError, "3-arg pow() not supported");
   19042:	4904      	ldr	r1, [pc, #16]	; (19054 <mp_builtin_pow+0x38>)
   19044:	4804      	ldr	r0, [pc, #16]	; (19058 <mp_builtin_pow+0x3c>)
   19046:	f7f3 ff4b 	bl	cee0 <mp_raise_msg>
            return mp_binary_op(MP_BINARY_OP_MODULO, mp_binary_op(MP_BINARY_OP_POWER, args[0], args[1]), args[2]);
#else
            return mp_obj_int_pow3(args[0], args[1], args[2]);
#endif
    }
}
   1904a:	4618      	mov	r0, r3
   1904c:	3708      	adds	r7, #8
   1904e:	46bd      	mov	sp, r7
   19050:	bd80      	pop	{r7, pc}
   19052:	bf00      	nop
   19054:	000224ac 	.word	0x000224ac
   19058:	00020430 	.word	0x00020430

0001905c <mp_builtin_print>:
MP_DEFINE_CONST_FUN_OBJ_VAR_BETWEEN(mp_builtin_pow_obj, 2, 3, mp_builtin_pow);

STATIC mp_obj_t mp_builtin_print(size_t n_args, const mp_obj_t *pos_args, mp_map_t *kw_args) {
   1905c:	b580      	push	{r7, lr}
   1905e:	b08e      	sub	sp, #56	; 0x38
   19060:	af02      	add	r7, sp, #8
   19062:	60f8      	str	r0, [r7, #12]
   19064:	60b9      	str	r1, [r7, #8]
   19066:	607a      	str	r2, [r7, #4]
    // parse args (a union is used to reduce the amount of C stack that is needed)
    union {
        mp_arg_val_t args[MP_ARRAY_SIZE(allowed_args)];
        size_t len[2];
    } u;
    mp_arg_parse_all(0, NULL, kw_args, MP_ARRAY_SIZE(allowed_args), allowed_args, u.args);
   19068:	f107 0314 	add.w	r3, r7, #20
   1906c:	9301      	str	r3, [sp, #4]
   1906e:	4b25      	ldr	r3, [pc, #148]	; (19104 <mp_builtin_print+0xa8>)
   19070:	9300      	str	r3, [sp, #0]
   19072:	2302      	movs	r3, #2
   19074:	687a      	ldr	r2, [r7, #4]
   19076:	2100      	movs	r1, #0
   19078:	2000      	movs	r0, #0
   1907a:	f7f3 ffa5 	bl	cfc8 <mp_arg_parse_all>
    // TODO file may not be a concrete object (eg it could be a small-int)
    mp_print_t print = {MP_OBJ_TO_PTR(u.args[ARG_file].u_obj), mp_stream_write_adaptor};
    #endif

    // extract the objects first because we are going to use the other part of the union
    mp_obj_t sep = u.args[ARG_sep].u_obj;
   1907e:	697b      	ldr	r3, [r7, #20]
   19080:	62bb      	str	r3, [r7, #40]	; 0x28
    mp_obj_t end = u.args[ARG_end].u_obj;
   19082:	69bb      	ldr	r3, [r7, #24]
   19084:	627b      	str	r3, [r7, #36]	; 0x24
    const char *sep_data = mp_obj_str_get_data(sep, &u.len[0]);
   19086:	f107 0314 	add.w	r3, r7, #20
   1908a:	4619      	mov	r1, r3
   1908c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   1908e:	f7fc f9eb 	bl	15468 <mp_obj_str_get_data>
   19092:	6238      	str	r0, [r7, #32]
    const char *end_data = mp_obj_str_get_data(end, &u.len[1]);
   19094:	f107 0314 	add.w	r3, r7, #20
   19098:	3304      	adds	r3, #4
   1909a:	4619      	mov	r1, r3
   1909c:	6a78      	ldr	r0, [r7, #36]	; 0x24
   1909e:	f7fc f9e3 	bl	15468 <mp_obj_str_get_data>
   190a2:	61f8      	str	r0, [r7, #28]

    for (size_t i = 0; i < n_args; i++) {
   190a4:	2300      	movs	r3, #0
   190a6:	62fb      	str	r3, [r7, #44]	; 0x2c
   190a8:	e019      	b.n	190de <mp_builtin_print+0x82>
        if (i > 0) {
   190aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   190ac:	2b00      	cmp	r3, #0
   190ae:	d009      	beq.n	190c4 <mp_builtin_print+0x68>
            #if MICROPY_PY_IO && MICROPY_PY_SYS_STDFILES
            mp_stream_write_adaptor(print.data, sep_data, u.len[0]);
            #else
            mp_print_strn(&mp_plat_print, sep_data, u.len[0], 0, 0, 0);
   190b0:	697a      	ldr	r2, [r7, #20]
   190b2:	2300      	movs	r3, #0
   190b4:	9301      	str	r3, [sp, #4]
   190b6:	2300      	movs	r3, #0
   190b8:	9300      	str	r3, [sp, #0]
   190ba:	2300      	movs	r3, #0
   190bc:	6a39      	ldr	r1, [r7, #32]
   190be:	4812      	ldr	r0, [pc, #72]	; (19108 <mp_builtin_print+0xac>)
   190c0:	f7e8 fbde 	bl	1880 <mp_print_strn>
            #endif
        }
        #if MICROPY_PY_IO && MICROPY_PY_SYS_STDFILES
        mp_obj_print_helper(&print, pos_args[i], PRINT_STR);
        #else
        mp_obj_print_helper(&mp_plat_print, pos_args[i], PRINT_STR);
   190c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   190c6:	009b      	lsls	r3, r3, #2
   190c8:	68ba      	ldr	r2, [r7, #8]
   190ca:	4413      	add	r3, r2
   190cc:	681b      	ldr	r3, [r3, #0]
   190ce:	2200      	movs	r2, #0
   190d0:	4619      	mov	r1, r3
   190d2:	480d      	ldr	r0, [pc, #52]	; (19108 <mp_builtin_print+0xac>)
   190d4:	f7f4 fb6d 	bl	d7b2 <mp_obj_print_helper>
    for (size_t i = 0; i < n_args; i++) {
   190d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   190da:	3301      	adds	r3, #1
   190dc:	62fb      	str	r3, [r7, #44]	; 0x2c
   190de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   190e0:	68fb      	ldr	r3, [r7, #12]
   190e2:	429a      	cmp	r2, r3
   190e4:	d3e1      	bcc.n	190aa <mp_builtin_print+0x4e>
        #endif
    }
    #if MICROPY_PY_IO && MICROPY_PY_SYS_STDFILES
    mp_stream_write_adaptor(print.data, end_data, u.len[1]);
    #else
    mp_print_strn(&mp_plat_print, end_data, u.len[1], 0, 0, 0);
   190e6:	69ba      	ldr	r2, [r7, #24]
   190e8:	2300      	movs	r3, #0
   190ea:	9301      	str	r3, [sp, #4]
   190ec:	2300      	movs	r3, #0
   190ee:	9300      	str	r3, [sp, #0]
   190f0:	2300      	movs	r3, #0
   190f2:	69f9      	ldr	r1, [r7, #28]
   190f4:	4804      	ldr	r0, [pc, #16]	; (19108 <mp_builtin_print+0xac>)
   190f6:	f7e8 fbc3 	bl	1880 <mp_print_strn>
    #endif
    return mp_const_none;
   190fa:	4b04      	ldr	r3, [pc, #16]	; (1910c <mp_builtin_print+0xb0>)
}
   190fc:	4618      	mov	r0, r3
   190fe:	3730      	adds	r7, #48	; 0x30
   19100:	46bd      	mov	sp, r7
   19102:	bd80      	pop	{r7, pc}
   19104:	0002281c 	.word	0x0002281c
   19108:	0001d5ac 	.word	0x0001d5ac
   1910c:	000212b4 	.word	0x000212b4

00019110 <mp_builtin___repl_print__>:
MP_DEFINE_CONST_FUN_OBJ_KW(mp_builtin_print_obj, 0, mp_builtin_print);

STATIC mp_obj_t mp_builtin___repl_print__(mp_obj_t o) {
   19110:	b580      	push	{r7, lr}
   19112:	b082      	sub	sp, #8
   19114:	af00      	add	r7, sp, #0
   19116:	6078      	str	r0, [r7, #4]
    if (o != mp_const_none) {
   19118:	687b      	ldr	r3, [r7, #4]
   1911a:	4a08      	ldr	r2, [pc, #32]	; (1913c <mp_builtin___repl_print__+0x2c>)
   1911c:	4293      	cmp	r3, r2
   1911e:	d008      	beq.n	19132 <mp_builtin___repl_print__+0x22>
        mp_obj_print_helper(MP_PYTHON_PRINTER, o, PRINT_REPR);
   19120:	2201      	movs	r2, #1
   19122:	6879      	ldr	r1, [r7, #4]
   19124:	4806      	ldr	r0, [pc, #24]	; (19140 <mp_builtin___repl_print__+0x30>)
   19126:	f7f4 fb44 	bl	d7b2 <mp_obj_print_helper>
        mp_print_str(MP_PYTHON_PRINTER, "\n");
   1912a:	4906      	ldr	r1, [pc, #24]	; (19144 <mp_builtin___repl_print__+0x34>)
   1912c:	4804      	ldr	r0, [pc, #16]	; (19140 <mp_builtin___repl_print__+0x30>)
   1912e:	f7e8 fb8f 	bl	1850 <mp_print_str>
        // Set "_" special variable
        mp_obj_t dest[2] = {MP_OBJ_SENTINEL, o};
        mp_type_module.attr(MP_OBJ_FROM_PTR(&mp_module_builtins), MP_QSTR__, dest);
        #endif
    }
    return mp_const_none;
   19132:	4b02      	ldr	r3, [pc, #8]	; (1913c <mp_builtin___repl_print__+0x2c>)
}
   19134:	4618      	mov	r0, r3
   19136:	3708      	adds	r7, #8
   19138:	46bd      	mov	sp, r7
   1913a:	bd80      	pop	{r7, pc}
   1913c:	000212b4 	.word	0x000212b4
   19140:	0001d5ac 	.word	0x0001d5ac
   19144:	000224e0 	.word	0x000224e0

00019148 <mp_builtin_repr>:
MP_DEFINE_CONST_FUN_OBJ_1(mp_builtin___repl_print___obj, mp_builtin___repl_print__);

STATIC mp_obj_t mp_builtin_repr(mp_obj_t o_in) {
   19148:	b580      	push	{r7, lr}
   1914a:	b088      	sub	sp, #32
   1914c:	af00      	add	r7, sp, #0
   1914e:	6078      	str	r0, [r7, #4]
    vstr_t vstr;
    mp_print_t print;
    vstr_init_print(&vstr, 16, &print);
   19150:	f107 0208 	add.w	r2, r7, #8
   19154:	f107 0310 	add.w	r3, r7, #16
   19158:	2110      	movs	r1, #16
   1915a:	4618      	mov	r0, r3
   1915c:	f7e8 f90d 	bl	137a <vstr_init_print>
    mp_obj_print_helper(&print, o_in, PRINT_REPR);
   19160:	f107 0308 	add.w	r3, r7, #8
   19164:	2201      	movs	r2, #1
   19166:	6879      	ldr	r1, [r7, #4]
   19168:	4618      	mov	r0, r3
   1916a:	f7f4 fb22 	bl	d7b2 <mp_obj_print_helper>
    return mp_obj_new_str_from_vstr(&mp_type_str, &vstr);
   1916e:	f107 0310 	add.w	r3, r7, #16
   19172:	4619      	mov	r1, r3
   19174:	4803      	ldr	r0, [pc, #12]	; (19184 <mp_builtin_repr+0x3c>)
   19176:	f7fb ffb6 	bl	150e6 <mp_obj_new_str_from_vstr>
   1917a:	4603      	mov	r3, r0
}
   1917c:	4618      	mov	r0, r3
   1917e:	3720      	adds	r7, #32
   19180:	46bd      	mov	sp, r7
   19182:	bd80      	pop	{r7, pc}
   19184:	00021964 	.word	0x00021964

00019188 <mp_builtin_round>:
MP_DEFINE_CONST_FUN_OBJ_1(mp_builtin_repr_obj, mp_builtin_repr);

STATIC mp_obj_t mp_builtin_round(size_t n_args, const mp_obj_t *args) {
   19188:	b580      	push	{r7, lr}
   1918a:	b084      	sub	sp, #16
   1918c:	af00      	add	r7, sp, #0
   1918e:	6078      	str	r0, [r7, #4]
   19190:	6039      	str	r1, [r7, #0]
    mp_obj_t o_in = args[0];
   19192:	683b      	ldr	r3, [r7, #0]
   19194:	681b      	ldr	r3, [r3, #0]
   19196:	60fb      	str	r3, [r7, #12]
    if (MP_OBJ_IS_INT(o_in)) {
   19198:	68f8      	ldr	r0, [r7, #12]
   1919a:	f7ff fce5 	bl	18b68 <MP_OBJ_IS_SMALL_INT>
   1919e:	4603      	mov	r3, r0
   191a0:	2b00      	cmp	r3, #0
   191a2:	d10a      	bne.n	191ba <mp_builtin_round+0x32>
   191a4:	68f8      	ldr	r0, [r7, #12]
   191a6:	f7ff fcf1 	bl	18b8c <MP_OBJ_IS_OBJ>
   191aa:	4603      	mov	r3, r0
   191ac:	2b00      	cmp	r3, #0
   191ae:	d00c      	beq.n	191ca <mp_builtin_round+0x42>
   191b0:	68fb      	ldr	r3, [r7, #12]
   191b2:	681b      	ldr	r3, [r3, #0]
   191b4:	4a0b      	ldr	r2, [pc, #44]	; (191e4 <mp_builtin_round+0x5c>)
   191b6:	4293      	cmp	r3, r2
   191b8:	d107      	bne.n	191ca <mp_builtin_round+0x42>
        if (n_args <= 1) {
   191ba:	687b      	ldr	r3, [r7, #4]
   191bc:	2b01      	cmp	r3, #1
   191be:	d801      	bhi.n	191c4 <mp_builtin_round+0x3c>
            return o_in;
   191c0:	68fb      	ldr	r3, [r7, #12]
   191c2:	e00a      	b.n	191da <mp_builtin_round+0x52>
        }

        #if !MICROPY_PY_BUILTINS_ROUND_INT
        mp_raise_NotImplementedError(NULL);
   191c4:	2000      	movs	r0, #0
   191c6:	f7f3 fec9 	bl	cf5c <mp_raise_NotImplementedError>
        return mp_obj_new_float(rounded);
    }
    mp_float_t rounded = MICROPY_FLOAT_C_FUN(nearbyint)(val);
    return mp_obj_new_int_from_float(rounded);
#else
    mp_int_t r = mp_obj_get_int(o_in);
   191ca:	68f8      	ldr	r0, [r7, #12]
   191cc:	f7f4 fc9c 	bl	db08 <mp_obj_get_int>
   191d0:	60b8      	str	r0, [r7, #8]
    return mp_obj_new_int(r);
   191d2:	68b8      	ldr	r0, [r7, #8]
   191d4:	f7f7 fb08 	bl	107e8 <mp_obj_new_int>
   191d8:	4603      	mov	r3, r0
#endif
}
   191da:	4618      	mov	r0, r3
   191dc:	3710      	adds	r7, #16
   191de:	46bd      	mov	sp, r7
   191e0:	bd80      	pop	{r7, pc}
   191e2:	bf00      	nop
   191e4:	00020d10 	.word	0x00020d10

000191e8 <mp_builtin_sum>:
MP_DEFINE_CONST_FUN_OBJ_VAR_BETWEEN(mp_builtin_round_obj, 1, 2, mp_builtin_round);

STATIC mp_obj_t mp_builtin_sum(size_t n_args, const mp_obj_t *args) {
   191e8:	b580      	push	{r7, lr}
   191ea:	b08a      	sub	sp, #40	; 0x28
   191ec:	af00      	add	r7, sp, #0
   191ee:	6078      	str	r0, [r7, #4]
   191f0:	6039      	str	r1, [r7, #0]
    mp_obj_t value;
    switch (n_args) {
   191f2:	687b      	ldr	r3, [r7, #4]
   191f4:	2b01      	cmp	r3, #1
   191f6:	d102      	bne.n	191fe <mp_builtin_sum+0x16>
        case 1: value = MP_OBJ_NEW_SMALL_INT(0); break;
   191f8:	2301      	movs	r3, #1
   191fa:	627b      	str	r3, [r7, #36]	; 0x24
   191fc:	e003      	b.n	19206 <mp_builtin_sum+0x1e>
        default: value = args[1]; break;
   191fe:	683b      	ldr	r3, [r7, #0]
   19200:	685b      	ldr	r3, [r3, #4]
   19202:	627b      	str	r3, [r7, #36]	; 0x24
   19204:	bf00      	nop
    }
    mp_obj_iter_buf_t iter_buf;
    mp_obj_t iterable = mp_getiter(args[0], &iter_buf);
   19206:	683b      	ldr	r3, [r7, #0]
   19208:	681b      	ldr	r3, [r3, #0]
   1920a:	f107 020c 	add.w	r2, r7, #12
   1920e:	4611      	mov	r1, r2
   19210:	4618      	mov	r0, r3
   19212:	f7f3 fb39 	bl	c888 <mp_getiter>
   19216:	6238      	str	r0, [r7, #32]
    mp_obj_t item;
    while ((item = mp_iternext(iterable)) != MP_OBJ_STOP_ITERATION) {
   19218:	e005      	b.n	19226 <mp_builtin_sum+0x3e>
        value = mp_binary_op(MP_BINARY_OP_ADD, value, item);
   1921a:	69fa      	ldr	r2, [r7, #28]
   1921c:	6a79      	ldr	r1, [r7, #36]	; 0x24
   1921e:	201a      	movs	r0, #26
   19220:	f7f2 fb2e 	bl	b880 <mp_binary_op>
   19224:	6278      	str	r0, [r7, #36]	; 0x24
    while ((item = mp_iternext(iterable)) != MP_OBJ_STOP_ITERATION) {
   19226:	6a38      	ldr	r0, [r7, #32]
   19228:	f7f3 fbb0 	bl	c98c <mp_iternext>
   1922c:	61f8      	str	r0, [r7, #28]
   1922e:	69fb      	ldr	r3, [r7, #28]
   19230:	2b04      	cmp	r3, #4
   19232:	d1f2      	bne.n	1921a <mp_builtin_sum+0x32>
    }
    return value;
   19234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   19236:	4618      	mov	r0, r3
   19238:	3728      	adds	r7, #40	; 0x28
   1923a:	46bd      	mov	sp, r7
   1923c:	bd80      	pop	{r7, pc}

0001923e <mp_builtin_sorted>:
MP_DEFINE_CONST_FUN_OBJ_VAR_BETWEEN(mp_builtin_sum_obj, 1, 2, mp_builtin_sum);

STATIC mp_obj_t mp_builtin_sorted(size_t n_args, const mp_obj_t *args, mp_map_t *kwargs) {
   1923e:	b590      	push	{r4, r7, lr}
   19240:	b087      	sub	sp, #28
   19242:	af00      	add	r7, sp, #0
   19244:	60f8      	str	r0, [r7, #12]
   19246:	60b9      	str	r1, [r7, #8]
   19248:	607a      	str	r2, [r7, #4]
    if (n_args > 1) {
   1924a:	68fb      	ldr	r3, [r7, #12]
   1924c:	2b01      	cmp	r3, #1
   1924e:	d902      	bls.n	19256 <mp_builtin_sorted+0x18>
        mp_raise_TypeError("must use keyword argument for key function");
   19250:	480b      	ldr	r0, [pc, #44]	; (19280 <mp_builtin_sorted+0x42>)
   19252:	f7f3 fe67 	bl	cf24 <mp_raise_TypeError>
    }
    mp_obj_t self = mp_type_list.make_new(&mp_type_list, 1, 0, args);
   19256:	4b0b      	ldr	r3, [pc, #44]	; (19284 <mp_builtin_sorted+0x46>)
   19258:	68dc      	ldr	r4, [r3, #12]
   1925a:	68bb      	ldr	r3, [r7, #8]
   1925c:	2200      	movs	r2, #0
   1925e:	2101      	movs	r1, #1
   19260:	4808      	ldr	r0, [pc, #32]	; (19284 <mp_builtin_sorted+0x46>)
   19262:	47a0      	blx	r4
   19264:	4603      	mov	r3, r0
   19266:	617b      	str	r3, [r7, #20]
    mp_obj_list_sort(1, &self, kwargs);
   19268:	f107 0314 	add.w	r3, r7, #20
   1926c:	687a      	ldr	r2, [r7, #4]
   1926e:	4619      	mov	r1, r3
   19270:	2001      	movs	r0, #1
   19272:	f7f7 ffce 	bl	11212 <mp_obj_list_sort>

    return self;
   19276:	697b      	ldr	r3, [r7, #20]
}
   19278:	4618      	mov	r0, r3
   1927a:	371c      	adds	r7, #28
   1927c:	46bd      	mov	sp, r7
   1927e:	bd90      	pop	{r4, r7, pc}
   19280:	0002250c 	.word	0x0002250c
   19284:	00020f7c 	.word	0x00020f7c

00019288 <mp_load_attr_default>:
MP_DEFINE_CONST_FUN_OBJ_KW(mp_builtin_sorted_obj, 1, mp_builtin_sorted);

// See mp_load_attr() if making any changes
static inline mp_obj_t mp_load_attr_default(mp_obj_t base, qstr attr, mp_obj_t defval) {
   19288:	b580      	push	{r7, lr}
   1928a:	b086      	sub	sp, #24
   1928c:	af00      	add	r7, sp, #0
   1928e:	60f8      	str	r0, [r7, #12]
   19290:	60b9      	str	r1, [r7, #8]
   19292:	607a      	str	r2, [r7, #4]
    mp_obj_t dest[2];
    // use load_method, raising or not raising exception
    ((defval == MP_OBJ_NULL) ? mp_load_method : mp_load_method_maybe)(base, attr, dest);
   19294:	687b      	ldr	r3, [r7, #4]
   19296:	2b00      	cmp	r3, #0
   19298:	d101      	bne.n	1929e <mp_load_attr_default+0x16>
   1929a:	4b0e      	ldr	r3, [pc, #56]	; (192d4 <mp_load_attr_default+0x4c>)
   1929c:	e000      	b.n	192a0 <mp_load_attr_default+0x18>
   1929e:	4b0e      	ldr	r3, [pc, #56]	; (192d8 <mp_load_attr_default+0x50>)
   192a0:	f107 0210 	add.w	r2, r7, #16
   192a4:	68b9      	ldr	r1, [r7, #8]
   192a6:	68f8      	ldr	r0, [r7, #12]
   192a8:	4798      	blx	r3
    if (dest[0] == MP_OBJ_NULL) {
   192aa:	693b      	ldr	r3, [r7, #16]
   192ac:	2b00      	cmp	r3, #0
   192ae:	d101      	bne.n	192b4 <mp_load_attr_default+0x2c>
        return defval;
   192b0:	687b      	ldr	r3, [r7, #4]
   192b2:	e00b      	b.n	192cc <mp_load_attr_default+0x44>
    } else if (dest[1] == MP_OBJ_NULL) {
   192b4:	697b      	ldr	r3, [r7, #20]
   192b6:	2b00      	cmp	r3, #0
   192b8:	d101      	bne.n	192be <mp_load_attr_default+0x36>
        // load_method returned just a normal attribute
        return dest[0];
   192ba:	693b      	ldr	r3, [r7, #16]
   192bc:	e006      	b.n	192cc <mp_load_attr_default+0x44>
    } else {
        // load_method returned a method, so build a bound method object
        return mp_obj_new_bound_meth(dest[0], dest[1]);
   192be:	693b      	ldr	r3, [r7, #16]
   192c0:	697a      	ldr	r2, [r7, #20]
   192c2:	4611      	mov	r1, r2
   192c4:	4618      	mov	r0, r3
   192c6:	f7f4 ff68 	bl	e19a <mp_obj_new_bound_meth>
   192ca:	4603      	mov	r3, r0
    }
}
   192cc:	4618      	mov	r0, r3
   192ce:	3718      	adds	r7, #24
   192d0:	46bd      	mov	sp, r7
   192d2:	bd80      	pop	{r7, pc}
   192d4:	0000c799 	.word	0x0000c799
   192d8:	0000c6d5 	.word	0x0000c6d5

000192dc <mp_builtin_getattr>:

STATIC mp_obj_t mp_builtin_getattr(size_t n_args, const mp_obj_t *args) {
   192dc:	b590      	push	{r4, r7, lr}
   192de:	b085      	sub	sp, #20
   192e0:	af00      	add	r7, sp, #0
   192e2:	6078      	str	r0, [r7, #4]
   192e4:	6039      	str	r1, [r7, #0]
    mp_obj_t defval = MP_OBJ_NULL;
   192e6:	2300      	movs	r3, #0
   192e8:	60fb      	str	r3, [r7, #12]
    if (n_args > 2) {
   192ea:	687b      	ldr	r3, [r7, #4]
   192ec:	2b02      	cmp	r3, #2
   192ee:	d902      	bls.n	192f6 <mp_builtin_getattr+0x1a>
        defval = args[2];
   192f0:	683b      	ldr	r3, [r7, #0]
   192f2:	689b      	ldr	r3, [r3, #8]
   192f4:	60fb      	str	r3, [r7, #12]
    }
    return mp_load_attr_default(args[0], mp_obj_str_get_qstr(args[1]), defval);
   192f6:	683b      	ldr	r3, [r7, #0]
   192f8:	681c      	ldr	r4, [r3, #0]
   192fa:	683b      	ldr	r3, [r7, #0]
   192fc:	3304      	adds	r3, #4
   192fe:	681b      	ldr	r3, [r3, #0]
   19300:	4618      	mov	r0, r3
   19302:	f7fc f84b 	bl	1539c <mp_obj_str_get_qstr>
   19306:	4603      	mov	r3, r0
   19308:	68fa      	ldr	r2, [r7, #12]
   1930a:	4619      	mov	r1, r3
   1930c:	4620      	mov	r0, r4
   1930e:	f7ff ffbb 	bl	19288 <mp_load_attr_default>
   19312:	4603      	mov	r3, r0
}
   19314:	4618      	mov	r0, r3
   19316:	3714      	adds	r7, #20
   19318:	46bd      	mov	sp, r7
   1931a:	bd90      	pop	{r4, r7, pc}

0001931c <mp_builtin_setattr>:
MP_DEFINE_CONST_FUN_OBJ_VAR_BETWEEN(mp_builtin_getattr_obj, 2, 3, mp_builtin_getattr);

STATIC mp_obj_t mp_builtin_setattr(mp_obj_t base, mp_obj_t attr, mp_obj_t value) {
   1931c:	b580      	push	{r7, lr}
   1931e:	b084      	sub	sp, #16
   19320:	af00      	add	r7, sp, #0
   19322:	60f8      	str	r0, [r7, #12]
   19324:	60b9      	str	r1, [r7, #8]
   19326:	607a      	str	r2, [r7, #4]
    mp_store_attr(base, mp_obj_str_get_qstr(attr), value);
   19328:	68b8      	ldr	r0, [r7, #8]
   1932a:	f7fc f837 	bl	1539c <mp_obj_str_get_qstr>
   1932e:	4603      	mov	r3, r0
   19330:	687a      	ldr	r2, [r7, #4]
   19332:	4619      	mov	r1, r3
   19334:	68f8      	ldr	r0, [r7, #12]
   19336:	f7f3 fa7f 	bl	c838 <mp_store_attr>
    return mp_const_none;
   1933a:	4b02      	ldr	r3, [pc, #8]	; (19344 <mp_builtin_setattr+0x28>)
}
   1933c:	4618      	mov	r0, r3
   1933e:	3710      	adds	r7, #16
   19340:	46bd      	mov	sp, r7
   19342:	bd80      	pop	{r7, pc}
   19344:	000212b4 	.word	0x000212b4

00019348 <mp_builtin_hasattr>:
    return mp_builtin_setattr(base, attr, MP_OBJ_NULL);
}
MP_DEFINE_CONST_FUN_OBJ_2(mp_builtin_delattr_obj, mp_builtin_delattr);
#endif

STATIC mp_obj_t mp_builtin_hasattr(mp_obj_t object_in, mp_obj_t attr_in) {
   19348:	b580      	push	{r7, lr}
   1934a:	b086      	sub	sp, #24
   1934c:	af00      	add	r7, sp, #0
   1934e:	6078      	str	r0, [r7, #4]
   19350:	6039      	str	r1, [r7, #0]
    qstr attr = mp_obj_str_get_qstr(attr_in);
   19352:	6838      	ldr	r0, [r7, #0]
   19354:	f7fc f822 	bl	1539c <mp_obj_str_get_qstr>
   19358:	6178      	str	r0, [r7, #20]
    mp_obj_t dest[2];
    mp_load_method_protected(object_in, attr, dest, false);
   1935a:	f107 020c 	add.w	r2, r7, #12
   1935e:	2300      	movs	r3, #0
   19360:	6979      	ldr	r1, [r7, #20]
   19362:	6878      	ldr	r0, [r7, #4]
   19364:	f7f3 fa34 	bl	c7d0 <mp_load_method_protected>
    return mp_obj_new_bool(dest[0] != MP_OBJ_NULL);
   19368:	68fb      	ldr	r3, [r7, #12]
   1936a:	2b00      	cmp	r3, #0
   1936c:	bf14      	ite	ne
   1936e:	2301      	movne	r3, #1
   19370:	2300      	moveq	r3, #0
   19372:	b2db      	uxtb	r3, r3
   19374:	4618      	mov	r0, r3
   19376:	f7ff fc3c 	bl	18bf2 <mp_obj_new_bool>
   1937a:	4603      	mov	r3, r0
}
   1937c:	4618      	mov	r0, r3
   1937e:	3718      	adds	r7, #24
   19380:	46bd      	mov	sp, r7
   19382:	bd80      	pop	{r7, pc}

00019384 <mp_builtin_globals>:
MP_DEFINE_CONST_FUN_OBJ_2(mp_builtin_hasattr_obj, mp_builtin_hasattr);

STATIC mp_obj_t mp_builtin_globals(void) {
   19384:	b580      	push	{r7, lr}
   19386:	af00      	add	r7, sp, #0
    return MP_OBJ_FROM_PTR(mp_globals_get());
   19388:	f7ff fc64 	bl	18c54 <mp_globals_get>
   1938c:	4603      	mov	r3, r0
}
   1938e:	4618      	mov	r0, r3
   19390:	bd80      	pop	{r7, pc}

00019392 <mp_builtin_locals>:
MP_DEFINE_CONST_FUN_OBJ_0(mp_builtin_globals_obj, mp_builtin_globals);

STATIC mp_obj_t mp_builtin_locals(void) {
   19392:	b580      	push	{r7, lr}
   19394:	af00      	add	r7, sp, #0
    return MP_OBJ_FROM_PTR(mp_locals_get());
   19396:	f7ff fc41 	bl	18c1c <mp_locals_get>
   1939a:	4603      	mov	r3, r0
}
   1939c:	4618      	mov	r0, r3
   1939e:	bd80      	pop	{r7, pc}

000193a0 <mp_micropython_opt_level>:

// Various builtins specific to MicroPython runtime,
// living in micropython module

#if MICROPY_ENABLE_COMPILER
STATIC mp_obj_t mp_micropython_opt_level(size_t n_args, const mp_obj_t *args) {
   193a0:	b580      	push	{r7, lr}
   193a2:	b082      	sub	sp, #8
   193a4:	af00      	add	r7, sp, #0
   193a6:	6078      	str	r0, [r7, #4]
   193a8:	6039      	str	r1, [r7, #0]
    if (n_args == 0) {
   193aa:	687b      	ldr	r3, [r7, #4]
   193ac:	2b00      	cmp	r3, #0
   193ae:	d106      	bne.n	193be <mp_micropython_opt_level+0x1e>
        return MP_OBJ_NEW_SMALL_INT(MP_STATE_VM(mp_optimise_value));
   193b0:	4b0a      	ldr	r3, [pc, #40]	; (193dc <mp_micropython_opt_level+0x3c>)
   193b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   193b6:	005b      	lsls	r3, r3, #1
   193b8:	f043 0301 	orr.w	r3, r3, #1
   193bc:	e00a      	b.n	193d4 <mp_micropython_opt_level+0x34>
    } else {
        MP_STATE_VM(mp_optimise_value) = mp_obj_get_int(args[0]);
   193be:	683b      	ldr	r3, [r7, #0]
   193c0:	681b      	ldr	r3, [r3, #0]
   193c2:	4618      	mov	r0, r3
   193c4:	f7f4 fba0 	bl	db08 <mp_obj_get_int>
   193c8:	4603      	mov	r3, r0
   193ca:	461a      	mov	r2, r3
   193cc:	4b03      	ldr	r3, [pc, #12]	; (193dc <mp_micropython_opt_level+0x3c>)
   193ce:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
        return mp_const_none;
   193d2:	4b03      	ldr	r3, [pc, #12]	; (193e0 <mp_micropython_opt_level+0x40>)
    }
}
   193d4:	4618      	mov	r0, r3
   193d6:	3708      	adds	r7, #8
   193d8:	46bd      	mov	sp, r7
   193da:	bd80      	pop	{r7, pc}
   193dc:	20000a2c 	.word	0x20000a2c
   193e0:	000212b4 	.word	0x000212b4

000193e4 <mp_micropython_heap_lock>:
}
STATIC MP_DEFINE_CONST_FUN_OBJ_0(mp_micropython_pystack_use_obj, mp_micropython_pystack_use);
#endif

#if MICROPY_ENABLE_GC
STATIC mp_obj_t mp_micropython_heap_lock(void) {
   193e4:	b580      	push	{r7, lr}
   193e6:	af00      	add	r7, sp, #0
    gc_lock();
   193e8:	f7e7 f8d0 	bl	58c <gc_lock>
    return mp_const_none;
   193ec:	4b01      	ldr	r3, [pc, #4]	; (193f4 <mp_micropython_heap_lock+0x10>)
}
   193ee:	4618      	mov	r0, r3
   193f0:	bd80      	pop	{r7, pc}
   193f2:	bf00      	nop
   193f4:	000212b4 	.word	0x000212b4

000193f8 <mp_micropython_heap_unlock>:
STATIC MP_DEFINE_CONST_FUN_OBJ_0(mp_micropython_heap_lock_obj, mp_micropython_heap_lock);

STATIC mp_obj_t mp_micropython_heap_unlock(void) {
   193f8:	b580      	push	{r7, lr}
   193fa:	af00      	add	r7, sp, #0
    gc_unlock();
   193fc:	f7e7 f8d0 	bl	5a0 <gc_unlock>
    return mp_const_none;
   19400:	4b01      	ldr	r3, [pc, #4]	; (19408 <mp_micropython_heap_unlock+0x10>)
}
   19402:	4618      	mov	r0, r3
   19404:	bd80      	pop	{r7, pc}
   19406:	bf00      	nop
   19408:	000212b4 	.word	0x000212b4

0001940c <mp_execute_bytecode>:
// sp points to bottom of stack which grows up
// returns:
//  MP_VM_RETURN_NORMAL, sp valid, return value in *sp
//  MP_VM_RETURN_YIELD, ip, sp valid, yielded value in *sp
//  MP_VM_RETURN_EXCEPTION, exception in fastn[0]
mp_vm_return_kind_t mp_execute_bytecode(mp_code_state_t *code_state, volatile mp_obj_t inject_exc) {
   1940c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
#endif
    // Pointers which are constant for particular invocation of mp_execute_bytecode()
    mp_obj_t * /*const*/ fastn;
    mp_exc_stack_t * /*const*/ exc_stack;
    {
        size_t n_state = mp_decode_uint_value(code_state->fun_bc->bytecode);
   19410:	6803      	ldr	r3, [r0, #0]
                        DISPATCH();
                    } else {
                        assert(ret_kind == MP_VM_RETURN_EXCEPTION);
                        // Pop exhausted gen
                        sp--;
                        if (EXC_MATCH(ret_value, MP_OBJ_FROM_PTR(&mp_type_StopIteration))) {
   19412:	f8df b3fc 	ldr.w	fp, [pc, #1020]	; 19810 <mp_execute_bytecode+0x404>
mp_vm_return_kind_t mp_execute_bytecode(mp_code_state_t *code_state, volatile mp_obj_t inject_exc) {
   19416:	b095      	sub	sp, #84	; 0x54
   19418:	4680      	mov	r8, r0
        size_t n_state = mp_decode_uint_value(code_state->fun_bc->bytecode);
   1941a:	6898      	ldr	r0, [r3, #8]
mp_vm_return_kind_t mp_execute_bytecode(mp_code_state_t *code_state, volatile mp_obj_t inject_exc) {
   1941c:	9103      	str	r1, [sp, #12]
        size_t n_state = mp_decode_uint_value(code_state->fun_bc->bytecode);
   1941e:	f000 ffa4 	bl	1a36a <mp_decode_uint_value>
    volatile bool currently_in_except_block = MP_TAGPTR_TAG0(code_state->exc_sp); // 0 or 1, to detect nested exceptions
   19422:	f8d8 300c 	ldr.w	r3, [r8, #12]
   19426:	1d02      	adds	r2, r0, #4
   19428:	0092      	lsls	r2, r2, #2
   1942a:	f003 0101 	and.w	r1, r3, #1
        exc_stack = (mp_exc_stack_t*)(code_state->state + n_state);
   1942e:	eb08 0702 	add.w	r7, r8, r2
    mp_exc_stack_t *volatile exc_sp = MP_TAGPTR_PTR(code_state->exc_sp); // stack grows up, exc_sp points to top of stack
   19432:	f023 0303 	bic.w	r3, r3, #3
        fastn = &code_state->state[n_state - 1];
   19436:	3801      	subs	r0, #1
    volatile bool currently_in_except_block = MP_TAGPTR_TAG0(code_state->exc_sp); // 0 or 1, to detect nested exceptions
   19438:	f88d 1017 	strb.w	r1, [sp, #23]
        fastn = &code_state->state[n_state - 1];
   1943c:	9001      	str	r0, [sp, #4]
        exc_stack = (mp_exc_stack_t*)(code_state->state + n_state);
   1943e:	3704      	adds	r7, #4
        fastn = &code_state->state[n_state - 1];
   19440:	eb08 0a02 	add.w	sl, r8, r2
    mp_exc_stack_t *volatile exc_sp = MP_TAGPTR_PTR(code_state->exc_sp); // stack grows up, exc_sp points to top of stack
   19444:	9306      	str	r3, [sp, #24]
        if (nlr_push(&nlr) == 0) {
   19446:	a808      	add	r0, sp, #32
   19448:	f7e6 ff38 	bl	2bc <nlr_push>
   1944c:	2800      	cmp	r0, #0
   1944e:	f040 8094 	bne.w	1957a <mp_execute_bytecode+0x16e>
            if (inject_exc != MP_OBJ_NULL && *ip != MP_BC_YIELD_FROM) {
   19452:	9b03      	ldr	r3, [sp, #12]
            const byte *ip = code_state->ip;
   19454:	f8d8 4004 	ldr.w	r4, [r8, #4]
            mp_obj_t *sp = code_state->sp;
   19458:	f8d8 5008 	ldr.w	r5, [r8, #8]
            if (inject_exc != MP_OBJ_NULL && *ip != MP_BC_YIELD_FROM) {
   1945c:	2b00      	cmp	r3, #0
   1945e:	f000 80c0 	beq.w	195e2 <mp_execute_bytecode+0x1d6>
   19462:	7823      	ldrb	r3, [r4, #0]
   19464:	2b5e      	cmp	r3, #94	; 0x5e
   19466:	f000 80bc 	beq.w	195e2 <mp_execute_bytecode+0x1d6>
                mp_obj_t exc = inject_exc;
   1946a:	9b03      	ldr	r3, [sp, #12]
                inject_exc = MP_OBJ_NULL;
   1946c:	9003      	str	r0, [sp, #12]
                exc = mp_make_raise_obj(exc);
   1946e:	4618      	mov	r0, r3
   19470:	f7f3 fbb8 	bl	cbe4 <mp_make_raise_obj>
   19474:	4681      	mov	r9, r0
                RAISE(exc);
   19476:	f7e6 ff0f 	bl	298 <nlr_pop>
   1947a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
            #if SELECTIVE_EXC_IP
            // with selective ip, we store the ip 1 byte past the opcode, so move ptr back
            code_state->ip -= 1;
            #endif

            if (mp_obj_is_subclass_fast(MP_OBJ_FROM_PTR(((mp_obj_base_t*)nlr.ret_val)->type), MP_OBJ_FROM_PTR(&mp_type_StopIteration))) {
   1947e:	f8d9 0000 	ldr.w	r0, [r9]
   19482:	4659      	mov	r1, fp
   19484:	f7fd fde8 	bl	17058 <mp_obj_is_subclass_fast>
   19488:	b148      	cbz	r0, 1949e <mp_execute_bytecode+0x92>
                if (code_state->ip) {
   1948a:	f8d8 3004 	ldr.w	r3, [r8, #4]
   1948e:	b133      	cbz	r3, 1949e <mp_execute_bytecode+0x92>
                    // check if it's a StopIteration within a for block
                    if (*code_state->ip == MP_BC_FOR_ITER) {
   19490:	781a      	ldrb	r2, [r3, #0]
   19492:	2a43      	cmp	r2, #67	; 0x43
   19494:	f000 860a 	beq.w	1a0ac <mp_execute_bytecode+0xca0>
                        const byte *ip = code_state->ip + 1;
                        DECODE_ULABEL; // the jump offset if iteration finishes; for labels are always forward
                        code_state->ip = ip + ulab; // jump to after for-block
                        code_state->sp -= MP_OBJ_ITER_BUF_NSLOTS; // pop the exhausted iterator
                        goto outer_dispatch_loop; // continue with dispatch loop
                    } else if (*code_state->ip == MP_BC_YIELD_FROM) {
   19498:	2a5e      	cmp	r2, #94	; 0x5e
   1949a:	f000 866f 	beq.w	1a17c <mp_execute_bytecode+0xd70>
unwind_loop:
#endif
            // set file and line number that the exception occurred at
            // TODO: don't set traceback for exceptions re-raised by END_FINALLY.
            // But consider how to handle nested exceptions.
            if (nlr.ret_val != &mp_const_GeneratorExit_obj) {
   1949e:	4bd9      	ldr	r3, [pc, #868]	; (19804 <mp_execute_bytecode+0x3f8>)
   194a0:	9a09      	ldr	r2, [sp, #36]	; 0x24
   194a2:	429a      	cmp	r2, r3
   194a4:	d049      	beq.n	1953a <mp_execute_bytecode+0x12e>
                const byte *ip = code_state->fun_bc->bytecode;
   194a6:	f8d8 3000 	ldr.w	r3, [r8]
                ip = mp_decode_uint_skip(ip); // skip n_state
   194aa:	6898      	ldr	r0, [r3, #8]
   194ac:	f000 ff6a 	bl	1a384 <mp_decode_uint_skip>
                ip = mp_decode_uint_skip(ip); // skip n_exc_stack
   194b0:	f000 ff68 	bl	1a384 <mp_decode_uint_skip>
                ip++; // skip scope_params
                ip++; // skip n_pos_args
                ip++; // skip n_kwonly_args
                ip++; // skip n_def_pos_args
                size_t bc = code_state->ip - ip;
   194b4:	f8d8 3004 	ldr.w	r3, [r8, #4]
                ip++; // skip n_def_pos_args
   194b8:	1d05      	adds	r5, r0, #4
                size_t code_info_size = mp_decode_uint_value(ip);
   194ba:	4628      	mov	r0, r5
                size_t bc = code_state->ip - ip;
   194bc:	1b5c      	subs	r4, r3, r5
                size_t code_info_size = mp_decode_uint_value(ip);
   194be:	f000 ff54 	bl	1a36a <mp_decode_uint_value>
   194c2:	4606      	mov	r6, r0
                ip = mp_decode_uint_skip(ip); // skip code_info_size
   194c4:	4628      	mov	r0, r5
   194c6:	f000 ff5d 	bl	1a384 <mp_decode_uint_skip>
                bc -= code_info_size;
   194ca:	eba4 0e06 	sub.w	lr, r4, r6
                qstr source_file = mp_decode_uint_value(ip);
                ip = mp_decode_uint_skip(ip);
                #endif
                size_t source_line = 1;
                size_t c;
                while ((c = *ip)) {
   194ce:	7904      	ldrb	r4, [r0, #4]
                qstr block_name = ip[0] | (ip[1] << 8);
   194d0:	8803      	ldrh	r3, [r0, #0]
                qstr source_file = ip[2] | (ip[3] << 8);
   194d2:	8841      	ldrh	r1, [r0, #2]
                while ((c = *ip)) {
   194d4:	2201      	movs	r2, #1
                ip += 4;
   194d6:	3004      	adds	r0, #4
                while ((c = *ip)) {
   194d8:	b96c      	cbnz	r4, 194f6 <mp_execute_bytecode+0xea>
   194da:	e01b      	b.n	19514 <mp_execute_bytecode+0x108>
                    size_t b, l;
                    if ((c & 0x80) == 0) {
                        // 0b0LLBBBBB encoding
                        b = c & 0x1f;
   194dc:	f004 061f 	and.w	r6, r4, #31
                        // 0b1LLLBBBB 0bLLLLLLLL encoding (l's LSB in second byte)
                        b = c & 0xf;
                        l = ((c << 4) & 0x700) | ip[1];
                        ip += 2;
                    }
                    if (bc >= b) {
   194e0:	4576      	cmp	r6, lr
                        ip += 1;
   194e2:	f100 0001 	add.w	r0, r0, #1
                        l = c >> 5;
   194e6:	ea4f 1554 	mov.w	r5, r4, lsr #5
                    if (bc >= b) {
   194ea:	d813      	bhi.n	19514 <mp_execute_bytecode+0x108>
                while ((c = *ip)) {
   194ec:	7804      	ldrb	r4, [r0, #0]
                        bc -= b;
   194ee:	ebae 0e06 	sub.w	lr, lr, r6
                        source_line += l;
   194f2:	442a      	add	r2, r5
                while ((c = *ip)) {
   194f4:	b174      	cbz	r4, 19514 <mp_execute_bytecode+0x108>
                    if ((c & 0x80) == 0) {
   194f6:	0625      	lsls	r5, r4, #24
   194f8:	d5f0      	bpl.n	194dc <mp_execute_bytecode+0xd0>
                        l = ((c << 4) & 0x700) | ip[1];
   194fa:	f890 c001 	ldrb.w	ip, [r0, #1]
   194fe:	0125      	lsls	r5, r4, #4
                        b = c & 0xf;
   19500:	f004 060f 	and.w	r6, r4, #15
                        l = ((c << 4) & 0x700) | ip[1];
   19504:	f405 65e0 	and.w	r5, r5, #1792	; 0x700
                    if (bc >= b) {
   19508:	4576      	cmp	r6, lr
                        l = ((c << 4) & 0x700) | ip[1];
   1950a:	ea45 050c 	orr.w	r5, r5, ip
                        ip += 2;
   1950e:	f100 0002 	add.w	r0, r0, #2
                    if (bc >= b) {
   19512:	d9eb      	bls.n	194ec <mp_execute_bytecode+0xe0>
                    } else {
                        // found source line corresponding to bytecode offset
                        break;
                    }
                }
                mp_obj_exception_add_traceback(MP_OBJ_FROM_PTR(nlr.ret_val), source_file, source_line, block_name);
   19514:	9809      	ldr	r0, [sp, #36]	; 0x24
   19516:	f7f6 f8e9 	bl	f6ec <mp_obj_exception_add_traceback>
            }

            while (currently_in_except_block) {
   1951a:	f89d 3017 	ldrb.w	r3, [sp, #23]
   1951e:	b183      	cbz	r3, 19542 <mp_execute_bytecode+0x136>
                // nested exception

                assert(exc_sp >= exc_stack);
   19520:	9b06      	ldr	r3, [sp, #24]
   19522:	429f      	cmp	r7, r3
   19524:	f200 8688 	bhi.w	1a238 <mp_execute_bytecode+0xe2c>

                // TODO make a proper message for nested exception
                // at the moment we are just raising the very last exception (the one that caused the nested exception)

                // move up to previous exception handler
                POP_EXC_BLOCK();
   19528:	9b06      	ldr	r3, [sp, #24]
   1952a:	685b      	ldr	r3, [r3, #4]
   1952c:	f003 0301 	and.w	r3, r3, #1
   19530:	f88d 3017 	strb.w	r3, [sp, #23]
   19534:	9b06      	ldr	r3, [sp, #24]
   19536:	3b0c      	subs	r3, #12
   19538:	9306      	str	r3, [sp, #24]
            while (currently_in_except_block) {
   1953a:	f89d 3017 	ldrb.w	r3, [sp, #23]
   1953e:	2b00      	cmp	r3, #0
   19540:	d1ee      	bne.n	19520 <mp_execute_bytecode+0x114>
            }

            if (exc_sp >= exc_stack) {
   19542:	9b06      	ldr	r3, [sp, #24]
   19544:	429f      	cmp	r7, r3
   19546:	f200 8639 	bhi.w	1a1bc <mp_execute_bytecode+0xdb0>
                // set flag to indicate that we are now handling an exception
                currently_in_except_block = 1;
   1954a:	2301      	movs	r3, #1
   1954c:	f88d 3017 	strb.w	r3, [sp, #23]

                // catch exception and pass to byte code
                code_state->ip = exc_sp->handler;
   19550:	9a06      	ldr	r2, [sp, #24]
                mp_obj_t *sp = MP_TAGPTR_PTR(exc_sp->val_sp);
   19552:	9b06      	ldr	r3, [sp, #24]
                // save this exception in the stack so it can be used in a reraise, if needed
                exc_sp->prev_exc = nlr.ret_val;
   19554:	9906      	ldr	r1, [sp, #24]
                mp_obj_t *sp = MP_TAGPTR_PTR(exc_sp->val_sp);
   19556:	685b      	ldr	r3, [r3, #4]
                code_state->ip = exc_sp->handler;
   19558:	6810      	ldr	r0, [r2, #0]
                exc_sp->prev_exc = nlr.ret_val;
   1955a:	9a09      	ldr	r2, [sp, #36]	; 0x24
                code_state->ip = exc_sp->handler;
   1955c:	f8c8 0004 	str.w	r0, [r8, #4]
                // push exception object so it can be handled by bytecode
                PUSH(MP_OBJ_FROM_PTR(nlr.ret_val));
   19560:	f023 0303 	bic.w	r3, r3, #3
                exc_sp->prev_exc = nlr.ret_val;
   19564:	608a      	str	r2, [r1, #8]
                PUSH(MP_OBJ_FROM_PTR(nlr.ret_val));
   19566:	f843 2f04 	str.w	r2, [r3, #4]!
        if (nlr_push(&nlr) == 0) {
   1956a:	a808      	add	r0, sp, #32
                code_state->sp = sp;
   1956c:	f8c8 3008 	str.w	r3, [r8, #8]
        if (nlr_push(&nlr) == 0) {
   19570:	f7e6 fea4 	bl	2bc <nlr_push>
   19574:	2800      	cmp	r0, #0
   19576:	f43f af6c 	beq.w	19452 <mp_execute_bytecode+0x46>
   1957a:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
   1957e:	e77e      	b.n	1947e <mp_execute_bytecode+0x72>
                    if (inject_exc != MP_OBJ_NULL) {
   19580:	f8dd 900c 	ldr.w	r9, [sp, #12]
                    mp_obj_t send_value = POP();
   19584:	6829      	ldr	r1, [r5, #0]
   19586:	1f2b      	subs	r3, r5, #4
   19588:	9302      	str	r3, [sp, #8]
                    code_state->sp = sp; // Save sp because it's needed if mp_resume raises StopIteration
   1958a:	f8c8 3008 	str.w	r3, [r8, #8]
                    if (inject_exc != MP_OBJ_NULL) {
   1958e:	f1b9 0f00 	cmp.w	r9, #0
   19592:	f000 85d9 	beq.w	1a148 <mp_execute_bytecode+0xd3c>
                        t_exc = inject_exc;
   19596:	f8dd 900c 	ldr.w	r9, [sp, #12]
                        ret_kind = mp_resume(TOP(), MP_OBJ_NULL, t_exc, &ret_value);
   1959a:	f855 0c04 	ldr.w	r0, [r5, #-4]
                        inject_exc = MP_OBJ_NULL;
   1959e:	f04f 0e00 	mov.w	lr, #0
                        ret_kind = mp_resume(TOP(), MP_OBJ_NULL, t_exc, &ret_value);
   195a2:	464a      	mov	r2, r9
   195a4:	4671      	mov	r1, lr
   195a6:	ab07      	add	r3, sp, #28
                        inject_exc = MP_OBJ_NULL;
   195a8:	f8cd e00c 	str.w	lr, [sp, #12]
                        ret_kind = mp_resume(TOP(), MP_OBJ_NULL, t_exc, &ret_value);
   195ac:	f7f3 fa38 	bl	ca20 <mp_resume>
                    if (ret_kind == MP_VM_RETURN_YIELD) {
   195b0:	2801      	cmp	r0, #1
   195b2:	f000 80e1 	beq.w	19778 <mp_execute_bytecode+0x36c>
                    } else if (ret_kind == MP_VM_RETURN_NORMAL) {
   195b6:	2800      	cmp	r0, #0
   195b8:	f040 85a2 	bne.w	1a100 <mp_execute_bytecode+0xcf4>
                        if (ret_value == MP_OBJ_STOP_ITERATION) {
   195bc:	9b07      	ldr	r3, [sp, #28]
                            PUSH(mp_const_none);
   195be:	4a92      	ldr	r2, [pc, #584]	; (19808 <mp_execute_bytecode+0x3fc>)
   195c0:	2b04      	cmp	r3, #4
   195c2:	bf08      	it	eq
   195c4:	4613      	moveq	r3, r2
   195c6:	f845 3c04 	str.w	r3, [r5, #-4]
                        GENERATOR_EXIT_IF_NEEDED(t_exc);
   195ca:	f1b9 0f00 	cmp.w	r9, #0
   195ce:	d006      	beq.n	195de <mp_execute_bytecode+0x1d2>
                            GENERATOR_EXIT_IF_NEEDED(t_exc);
   195d0:	498e      	ldr	r1, [pc, #568]	; (1980c <mp_execute_bytecode+0x400>)
   195d2:	4648      	mov	r0, r9
   195d4:	f7f6 f844 	bl	f660 <mp_obj_exception_match>
   195d8:	2800      	cmp	r0, #0
   195da:	f040 84ed 	bne.w	19fb8 <mp_execute_bytecode+0xbac>
                        DISPATCH();
   195de:	9d02      	ldr	r5, [sp, #8]
                switch (*ip++) {
   195e0:	4634      	mov	r4, r6
                MARK_EXC_IP_GLOBAL();
   195e2:	f8c8 4004 	str.w	r4, [r8, #4]
                switch (*ip++) {
   195e6:	7820      	ldrb	r0, [r4, #0]
   195e8:	f1a0 0310 	sub.w	r3, r0, #16
   195ec:	1c66      	adds	r6, r4, #1
   195ee:	2b5a      	cmp	r3, #90	; 0x5a
   195f0:	f200 8512 	bhi.w	1a018 <mp_execute_bytecode+0xc0c>
   195f4:	a201      	add	r2, pc, #4	; (adr r2, 195fc <mp_execute_bytecode+0x1f0>)
   195f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   195fa:	bf00      	nop
   195fc:	00019ad3 	.word	0x00019ad3
   19600:	00019add 	.word	0x00019add
   19604:	00019a27 	.word	0x00019a27
   19608:	0001a019 	.word	0x0001a019
   1960c:	00019a03 	.word	0x00019a03
   19610:	0001a019 	.word	0x0001a019
   19614:	000199f1 	.word	0x000199f1
   19618:	000199cd 	.word	0x000199cd
   1961c:	000199c3 	.word	0x000199c3
   19620:	00019a81 	.word	0x00019a81
   19624:	00019a55 	.word	0x00019a55
   19628:	00019a43 	.word	0x00019a43
   1962c:	00019a31 	.word	0x00019a31
   19630:	00019ac3 	.word	0x00019ac3
   19634:	00019a9f 	.word	0x00019a9f
   19638:	00019ab1 	.word	0x00019ab1
   1963c:	000199b5 	.word	0x000199b5
   19640:	00019977 	.word	0x00019977
   19644:	00019955 	.word	0x00019955
   19648:	0001998f 	.word	0x0001998f
   1964c:	0001990d 	.word	0x0001990d
   19650:	00019931 	.word	0x00019931
   19654:	0001991d 	.word	0x0001991d
   19658:	00019941 	.word	0x00019941
   1965c:	000198e3 	.word	0x000198e3
   19660:	000198b1 	.word	0x000198b1
   19664:	000198a5 	.word	0x000198a5
   19668:	00019899 	.word	0x00019899
   1966c:	0001a019 	.word	0x0001a019
   19670:	0001a019 	.word	0x0001a019
   19674:	0001a019 	.word	0x0001a019
   19678:	0001a019 	.word	0x0001a019
   1967c:	0001988f 	.word	0x0001988f
   19680:	0001985b 	.word	0x0001985b
   19684:	00019773 	.word	0x00019773
   19688:	0001987f 	.word	0x0001987f
   1968c:	0001986b 	.word	0x0001986b
   19690:	00019f97 	.word	0x00019f97
   19694:	00019f7f 	.word	0x00019f7f
   19698:	00019fff 	.word	0x00019fff
   1969c:	00019e17 	.word	0x00019e17
   196a0:	00019eff 	.word	0x00019eff
   196a4:	0001a019 	.word	0x0001a019
   196a8:	0001a019 	.word	0x0001a019
   196ac:	0001a019 	.word	0x0001a019
   196b0:	00019e9d 	.word	0x00019e9d
   196b4:	00019f13 	.word	0x00019f13
   196b8:	00019cbd 	.word	0x00019cbd
   196bc:	00019cbd 	.word	0x00019cbd
   196c0:	00019769 	.word	0x00019769
   196c4:	00019fc5 	.word	0x00019fc5
   196c8:	00019fd5 	.word	0x00019fd5
   196cc:	00019d99 	.word	0x00019d99
   196d0:	00019e7f 	.word	0x00019e7f
   196d4:	00019e2f 	.word	0x00019e2f
   196d8:	00019b0f 	.word	0x00019b0f
   196dc:	0001a019 	.word	0x0001a019
   196e0:	0001a019 	.word	0x0001a019
   196e4:	0001a019 	.word	0x0001a019
   196e8:	0001a019 	.word	0x0001a019
   196ec:	0001a019 	.word	0x0001a019
   196f0:	0001a019 	.word	0x0001a019
   196f4:	0001a019 	.word	0x0001a019
   196f8:	0001a019 	.word	0x0001a019
   196fc:	00019ae7 	.word	0x00019ae7
   19700:	00019c61 	.word	0x00019c61
   19704:	0001a019 	.word	0x0001a019
   19708:	00019c29 	.word	0x00019c29
   1970c:	00019c49 	.word	0x00019c49
   19710:	0001a019 	.word	0x0001a019
   19714:	0001a019 	.word	0x0001a019
   19718:	00019bfb 	.word	0x00019bfb
   1971c:	0001a019 	.word	0x0001a019
   19720:	00019bd1 	.word	0x00019bd1
   19724:	00019ba5 	.word	0x00019ba5
   19728:	00019b61 	.word	0x00019b61
   1972c:	00019b2d 	.word	0x00019b2d
   19730:	0001977f 	.word	0x0001977f
   19734:	00019581 	.word	0x00019581
   19738:	0001a019 	.word	0x0001a019
   1973c:	00019d31 	.word	0x00019d31
   19740:	00019cf3 	.word	0x00019cf3
   19744:	00019deb 	.word	0x00019deb
   19748:	00019d5f 	.word	0x00019d5f
   1974c:	00019db7 	.word	0x00019db7
   19750:	00019c89 	.word	0x00019c89
   19754:	00019815 	.word	0x00019815
   19758:	000197cf 	.word	0x000197cf
   1975c:	000197b5 	.word	0x000197b5
   19760:	0001979f 	.word	0x0001979f
   19764:	0001984b 	.word	0x0001984b
                    if (TOP() == mp_const_none) {
   19768:	682a      	ldr	r2, [r5, #0]
   1976a:	4b27      	ldr	r3, [pc, #156]	; (19808 <mp_execute_bytecode+0x3fc>)
   1976c:	429a      	cmp	r2, r3
   1976e:	f040 845f 	bne.w	1a030 <mp_execute_bytecode+0xc24>
                        sp--;
   19772:	3d04      	subs	r5, #4
                switch (*ip++) {
   19774:	4634      	mov	r4, r6
                    DISPATCH();
   19776:	e734      	b.n	195e2 <mp_execute_bytecode+0x1d6>
                        PUSH(ret_value);
   19778:	9b07      	ldr	r3, [sp, #28]
   1977a:	602b      	str	r3, [r5, #0]
                        goto yield;
   1977c:	4626      	mov	r6, r4
                    nlr_pop();
   1977e:	f7e6 fd8b 	bl	298 <nlr_pop>
                    code_state->exc_sp = MP_TAGPTR_MAKE(exc_sp, currently_in_except_block);
   19782:	f89d 2017 	ldrb.w	r2, [sp, #23]
   19786:	9b06      	ldr	r3, [sp, #24]
                    code_state->ip = ip;
   19788:	f8c8 6004 	str.w	r6, [r8, #4]
                    code_state->exc_sp = MP_TAGPTR_MAKE(exc_sp, currently_in_except_block);
   1978c:	4313      	orrs	r3, r2
                    code_state->sp = sp;
   1978e:	f8c8 5008 	str.w	r5, [r8, #8]
                    code_state->exc_sp = MP_TAGPTR_MAKE(exc_sp, currently_in_except_block);
   19792:	f8c8 300c 	str.w	r3, [r8, #12]
                    return MP_VM_RETURN_YIELD;
   19796:	2001      	movs	r0, #1
                fastn[0] = MP_OBJ_FROM_PTR(nlr.ret_val); // must put exception here because sp is invalid
                return MP_VM_RETURN_EXCEPTION;
            }
        }
    }
}
   19798:	b015      	add	sp, #84	; 0x54
   1979a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                    mp_obj_t obj = mp_import_from(TOP(), qst);
   1979e:	462e      	mov	r6, r5
                    DECODE_QSTR;
   197a0:	f8b4 1001 	ldrh.w	r1, [r4, #1]
                    mp_obj_t obj = mp_import_from(TOP(), qst);
   197a4:	f856 0b04 	ldr.w	r0, [r6], #4
   197a8:	f7f3 fa64 	bl	cc74 <mp_import_from>
                    DECODE_QSTR;
   197ac:	3403      	adds	r4, #3
                    PUSH(obj);
   197ae:	6068      	str	r0, [r5, #4]
   197b0:	4635      	mov	r5, r6
                    DISPATCH();
   197b2:	e716      	b.n	195e2 <mp_execute_bytecode+0x1d6>
                    DECODE_QSTR;
   197b4:	f8b4 0001 	ldrh.w	r0, [r4, #1]
                    SET_TOP(mp_import_name(qst, obj, TOP()));
   197b8:	f855 2c04 	ldr.w	r2, [r5, #-4]
   197bc:	6829      	ldr	r1, [r5, #0]
   197be:	f7f3 fa39 	bl	cc34 <mp_import_name>
                    mp_obj_t obj = POP();
   197c2:	1f2b      	subs	r3, r5, #4
                    SET_TOP(mp_import_name(qst, obj, TOP()));
   197c4:	f845 0c04 	str.w	r0, [r5, #-4]
                    DECODE_QSTR;
   197c8:	3403      	adds	r4, #3
                    mp_obj_t obj = POP();
   197ca:	461d      	mov	r5, r3
                    DISPATCH();
   197cc:	e709      	b.n	195e2 <mp_execute_bytecode+0x1d6>
                switch (*ip++) {
   197ce:	4634      	mov	r4, r6
   197d0:	2100      	movs	r1, #0
                    DECODE_UINT;
   197d2:	f814 3b01 	ldrb.w	r3, [r4], #1
   197d6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
   197da:	061b      	lsls	r3, r3, #24
   197dc:	eb02 11c1 	add.w	r1, r2, r1, lsl #7
   197e0:	d4f7      	bmi.n	197d2 <mp_execute_bytecode+0x3c6>
                    sp -= (unum & 0xff) + ((unum >> 7) & 0x1fe) + 3;
   197e2:	09cb      	lsrs	r3, r1, #7
   197e4:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
   197e8:	fa53 f381 	uxtab	r3, r3, r1
   197ec:	ebc3 7383 	rsb	r3, r3, r3, lsl #30
   197f0:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   197f4:	3d0c      	subs	r5, #12
                    SET_TOP(mp_call_method_n_kw_var(true, unum, sp));
   197f6:	462a      	mov	r2, r5
   197f8:	2001      	movs	r0, #1
   197fa:	f7f2 fd46 	bl	c28a <mp_call_method_n_kw_var>
   197fe:	6028      	str	r0, [r5, #0]
                    DISPATCH();
   19800:	e6ef      	b.n	195e2 <mp_execute_bytecode+0x1d6>
   19802:	bf00      	nop
   19804:	0001ff68 	.word	0x0001ff68
   19808:	000212b4 	.word	0x000212b4
   1980c:	00020034 	.word	0x00020034
   19810:	000200ac 	.word	0x000200ac
                switch (*ip++) {
   19814:	4634      	mov	r4, r6
   19816:	2100      	movs	r1, #0
                    DECODE_UINT;
   19818:	f814 3b01 	ldrb.w	r3, [r4], #1
   1981c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
   19820:	eb02 11c1 	add.w	r1, r2, r1, lsl #7
   19824:	061a      	lsls	r2, r3, #24
   19826:	d4f7      	bmi.n	19818 <mp_execute_bytecode+0x40c>
                    sp -= (unum & 0xff) + ((unum >> 7) & 0x1fe) + 1;
   19828:	b2c8      	uxtb	r0, r1
   1982a:	09cb      	lsrs	r3, r1, #7
   1982c:	1c42      	adds	r2, r0, #1
   1982e:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
   19832:	4413      	add	r3, r2
   19834:	ebc3 7383 	rsb	r3, r3, r3, lsl #30
   19838:	eb05 0583 	add.w	r5, r5, r3, lsl #2
                    SET_TOP(mp_call_method_n_kw(unum & 0xff, (unum >> 8) & 0xff, sp));
   1983c:	f3c1 2107 	ubfx	r1, r1, #8, #8
   19840:	462a      	mov	r2, r5
   19842:	f7f2 fad1 	bl	bde8 <mp_call_method_n_kw>
   19846:	6028      	str	r0, [r5, #0]
                    DISPATCH();
   19848:	e6cb      	b.n	195e2 <mp_execute_bytecode+0x1d6>
                    mp_import_all(POP());
   1984a:	6828      	ldr	r0, [r5, #0]
   1984c:	f1a5 0904 	sub.w	r9, r5, #4
                switch (*ip++) {
   19850:	4634      	mov	r4, r6
                    mp_import_all(POP());
   19852:	f7f3 fa9f 	bl	cd94 <mp_import_all>
   19856:	464d      	mov	r5, r9
                    DISPATCH();
   19858:	e6c3      	b.n	195e2 <mp_execute_bytecode+0x1d6>
                    sp[0] = sp[-2];
   1985a:	682a      	ldr	r2, [r5, #0]
                    sp[-1] = sp[-3];
   1985c:	f855 3c04 	ldr.w	r3, [r5, #-4]
                    sp[0] = sp[-2];
   19860:	60aa      	str	r2, [r5, #8]
                    sp[-1] = sp[-3];
   19862:	606b      	str	r3, [r5, #4]
                switch (*ip++) {
   19864:	4634      	mov	r4, r6
                    sp += 2;
   19866:	3508      	adds	r5, #8
                    DISPATCH();
   19868:	e6bb      	b.n	195e2 <mp_execute_bytecode+0x1d6>
                    sp[0] = sp[-1];
   1986a:	e915 000c 	ldmdb	r5, {r2, r3}
                    mp_obj_t top = sp[0];
   1986e:	6829      	ldr	r1, [r5, #0]
                    sp[-2] = top;
   19870:	f845 1c08 	str.w	r1, [r5, #-8]
                switch (*ip++) {
   19874:	4634      	mov	r4, r6
                    sp[-1] = sp[-2];
   19876:	f845 2c04 	str.w	r2, [r5, #-4]
                    sp[0] = sp[-1];
   1987a:	602b      	str	r3, [r5, #0]
                    DISPATCH();
   1987c:	e6b1      	b.n	195e2 <mp_execute_bytecode+0x1d6>
                    mp_obj_t top = sp[0];
   1987e:	682b      	ldr	r3, [r5, #0]
                    sp[0] = sp[-1];
   19880:	f855 2c04 	ldr.w	r2, [r5, #-4]
   19884:	602a      	str	r2, [r5, #0]
                switch (*ip++) {
   19886:	4634      	mov	r4, r6
                    sp[-1] = top;
   19888:	f845 3c04 	str.w	r3, [r5, #-4]
                    DISPATCH();
   1988c:	e6a9      	b.n	195e2 <mp_execute_bytecode+0x1d6>
                    PUSH(top);
   1988e:	682b      	ldr	r3, [r5, #0]
   19890:	606b      	str	r3, [r5, #4]
                switch (*ip++) {
   19892:	4634      	mov	r4, r6
                    PUSH(top);
   19894:	3504      	adds	r5, #4
                    DISPATCH();
   19896:	e6a4      	b.n	195e2 <mp_execute_bytecode+0x1d6>
                    DECODE_QSTR;
   19898:	f8b4 0001 	ldrh.w	r0, [r4, #1]
   1989c:	3403      	adds	r4, #3
                    mp_delete_global(qst);
   1989e:	f7f1 fef6 	bl	b68e <mp_delete_global>
                    DISPATCH();
   198a2:	e69e      	b.n	195e2 <mp_execute_bytecode+0x1d6>
                    DECODE_QSTR;
   198a4:	f8b4 0001 	ldrh.w	r0, [r4, #1]
   198a8:	3403      	adds	r4, #3
                    mp_delete_name(qst);
   198aa:	f7f1 feca 	bl	b642 <mp_delete_name>
                    DISPATCH();
   198ae:	e698      	b.n	195e2 <mp_execute_bytecode+0x1d6>
                switch (*ip++) {
   198b0:	2200      	movs	r2, #0
                    DECODE_UINT;
   198b2:	f816 3b01 	ldrb.w	r3, [r6], #1
   198b6:	f003 017f 	and.w	r1, r3, #127	; 0x7f
   198ba:	061c      	lsls	r4, r3, #24
   198bc:	eb01 12c2 	add.w	r2, r1, r2, lsl #7
   198c0:	d4f7      	bmi.n	198b2 <mp_execute_bytecode+0x4a6>
                    if (mp_obj_cell_get(fastn[-unum]) == MP_OBJ_NULL) {
   198c2:	ebc2 7482 	rsb	r4, r2, r2, lsl #30
   198c6:	f85a 0024 	ldr.w	r0, [sl, r4, lsl #2]
   198ca:	f7f4 fc7f 	bl	e1cc <mp_obj_cell_get>
   198ce:	2800      	cmp	r0, #0
   198d0:	f000 848c 	beq.w	1a1ec <mp_execute_bytecode+0xde0>
                    mp_obj_cell_set(fastn[-unum], MP_OBJ_NULL);
   198d4:	f85a 0024 	ldr.w	r0, [sl, r4, lsl #2]
   198d8:	2100      	movs	r1, #0
                    DECODE_UINT;
   198da:	4634      	mov	r4, r6
                    mp_obj_cell_set(fastn[-unum], MP_OBJ_NULL);
   198dc:	f7f4 fc84 	bl	e1e8 <mp_obj_cell_set>
                    DISPATCH();
   198e0:	e67f      	b.n	195e2 <mp_execute_bytecode+0x1d6>
                switch (*ip++) {
   198e2:	2200      	movs	r2, #0
                    DECODE_UINT;
   198e4:	f816 3b01 	ldrb.w	r3, [r6], #1
   198e8:	f003 017f 	and.w	r1, r3, #127	; 0x7f
   198ec:	061b      	lsls	r3, r3, #24
   198ee:	eb01 12c2 	add.w	r2, r1, r2, lsl #7
   198f2:	d4f7      	bmi.n	198e4 <mp_execute_bytecode+0x4d8>
                    if (fastn[-unum] == MP_OBJ_NULL) {
   198f4:	ebc2 7282 	rsb	r2, r2, r2, lsl #30
   198f8:	f85a 3022 	ldr.w	r3, [sl, r2, lsl #2]
   198fc:	2b00      	cmp	r3, #0
   198fe:	f000 8475 	beq.w	1a1ec <mp_execute_bytecode+0xde0>
                    fastn[-unum] = MP_OBJ_NULL;
   19902:	2300      	movs	r3, #0
                    DECODE_UINT;
   19904:	4634      	mov	r4, r6
                    fastn[-unum] = MP_OBJ_NULL;
   19906:	f84a 3022 	str.w	r3, [sl, r2, lsl #2]
                    DISPATCH();
   1990a:	e66a      	b.n	195e2 <mp_execute_bytecode+0x1d6>
                    DECODE_QSTR;
   1990c:	f8b4 0001 	ldrh.w	r0, [r4, #1]
                    mp_store_name(qst, POP());
   19910:	6829      	ldr	r1, [r5, #0]
                    DECODE_QSTR;
   19912:	3403      	adds	r4, #3
                    mp_store_name(qst, POP());
   19914:	3d04      	subs	r5, #4
   19916:	f7f1 fe81 	bl	b61c <mp_store_name>
                    DISPATCH();
   1991a:	e662      	b.n	195e2 <mp_execute_bytecode+0x1d6>
                    DECODE_QSTR;
   1991c:	f8b4 1001 	ldrh.w	r1, [r4, #1]
                    mp_store_attr(sp[0], qst, sp[-1]);
   19920:	f855 2c04 	ldr.w	r2, [r5, #-4]
   19924:	f855 0908 	ldr.w	r0, [r5], #-8
                    DECODE_QSTR;
   19928:	3403      	adds	r4, #3
                    mp_store_attr(sp[0], qst, sp[-1]);
   1992a:	f7f2 ff85 	bl	c838 <mp_store_attr>
                    DISPATCH();
   1992e:	e658      	b.n	195e2 <mp_execute_bytecode+0x1d6>
                    DECODE_QSTR;
   19930:	f8b4 0001 	ldrh.w	r0, [r4, #1]
                    mp_store_global(qst, POP());
   19934:	6829      	ldr	r1, [r5, #0]
                    DECODE_QSTR;
   19936:	3403      	adds	r4, #3
                    mp_store_global(qst, POP());
   19938:	3d04      	subs	r5, #4
   1993a:	f7f1 fe95 	bl	b668 <mp_store_global>
                    DISPATCH();
   1993e:	e650      	b.n	195e2 <mp_execute_bytecode+0x1d6>
                    mp_obj_subscr(sp[-1], sp[0], sp[-2]);
   19940:	f855 2c08 	ldr.w	r2, [r5, #-8]
   19944:	6829      	ldr	r1, [r5, #0]
   19946:	f855 0c04 	ldr.w	r0, [r5, #-4]
                switch (*ip++) {
   1994a:	4634      	mov	r4, r6
                    mp_obj_subscr(sp[-1], sp[0], sp[-2]);
   1994c:	f7f4 faa0 	bl	de90 <mp_obj_subscr>
                    sp -= 3;
   19950:	3d0c      	subs	r5, #12
                    DISPATCH();
   19952:	e646      	b.n	195e2 <mp_execute_bytecode+0x1d6>
                switch (*ip++) {
   19954:	4634      	mov	r4, r6
   19956:	2200      	movs	r2, #0
                    DECODE_UINT;
   19958:	f814 3b01 	ldrb.w	r3, [r4], #1
   1995c:	f003 017f 	and.w	r1, r3, #127	; 0x7f
   19960:	0618      	lsls	r0, r3, #24
   19962:	eb01 12c2 	add.w	r2, r1, r2, lsl #7
   19966:	d4f7      	bmi.n	19958 <mp_execute_bytecode+0x54c>
                    fastn[-unum] = POP();
   19968:	ebc2 7282 	rsb	r2, r2, r2, lsl #30
   1996c:	682b      	ldr	r3, [r5, #0]
   1996e:	f84a 3022 	str.w	r3, [sl, r2, lsl #2]
   19972:	3d04      	subs	r5, #4
                    DISPATCH();
   19974:	e635      	b.n	195e2 <mp_execute_bytecode+0x1d6>
                    SET_TOP(mp_obj_subscr(TOP(), index, MP_OBJ_SENTINEL));
   19976:	6829      	ldr	r1, [r5, #0]
   19978:	f855 0c04 	ldr.w	r0, [r5, #-4]
   1997c:	2208      	movs	r2, #8
   1997e:	f7f4 fa87 	bl	de90 <mp_obj_subscr>
                    mp_obj_t index = POP();
   19982:	1f2b      	subs	r3, r5, #4
                    SET_TOP(mp_obj_subscr(TOP(), index, MP_OBJ_SENTINEL));
   19984:	f845 0c04 	str.w	r0, [r5, #-4]
                switch (*ip++) {
   19988:	4634      	mov	r4, r6
                    mp_obj_t index = POP();
   1998a:	461d      	mov	r5, r3
                    DISPATCH();
   1998c:	e629      	b.n	195e2 <mp_execute_bytecode+0x1d6>
                switch (*ip++) {
   1998e:	4634      	mov	r4, r6
   19990:	2200      	movs	r2, #0
                    DECODE_UINT;
   19992:	f814 3b01 	ldrb.w	r3, [r4], #1
   19996:	f003 017f 	and.w	r1, r3, #127	; 0x7f
   1999a:	eb01 12c2 	add.w	r2, r1, r2, lsl #7
   1999e:	0619      	lsls	r1, r3, #24
   199a0:	d4f7      	bmi.n	19992 <mp_execute_bytecode+0x586>
                    mp_obj_cell_set(fastn[-unum], POP());
   199a2:	ebc2 7282 	rsb	r2, r2, r2, lsl #30
   199a6:	6829      	ldr	r1, [r5, #0]
   199a8:	f85a 0022 	ldr.w	r0, [sl, r2, lsl #2]
   199ac:	3d04      	subs	r5, #4
   199ae:	f7f4 fc1b 	bl	e1e8 <mp_obj_cell_set>
                    DISPATCH();
   199b2:	e616      	b.n	195e2 <mp_execute_bytecode+0x1d6>
                    PUSH(mp_load_build_class());
   199b4:	f7f1 fe28 	bl	b608 <mp_load_build_class>
   199b8:	1d2b      	adds	r3, r5, #4
   199ba:	6068      	str	r0, [r5, #4]
                switch (*ip++) {
   199bc:	4634      	mov	r4, r6
                    PUSH(mp_load_build_class());
   199be:	461d      	mov	r5, r3
                    DISPATCH();
   199c0:	e60f      	b.n	195e2 <mp_execute_bytecode+0x1d6>
                    PUSH(MP_OBJ_NULL);
   199c2:	2300      	movs	r3, #0
   199c4:	606b      	str	r3, [r5, #4]
                switch (*ip++) {
   199c6:	4634      	mov	r4, r6
                    PUSH(MP_OBJ_NULL);
   199c8:	3504      	adds	r5, #4
                    DISPATCH();
   199ca:	e60a      	b.n	195e2 <mp_execute_bytecode+0x1d6>
                switch (*ip++) {
   199cc:	4634      	mov	r4, r6
   199ce:	2200      	movs	r2, #0
                    DECODE_OBJ;
   199d0:	f814 3b01 	ldrb.w	r3, [r4], #1
   199d4:	f003 017f 	and.w	r1, r3, #127	; 0x7f
   199d8:	eb01 12c2 	add.w	r2, r1, r2, lsl #7
   199dc:	0619      	lsls	r1, r3, #24
   199de:	d4f7      	bmi.n	199d0 <mp_execute_bytecode+0x5c4>
   199e0:	f8d8 3000 	ldr.w	r3, [r8]
   199e4:	68db      	ldr	r3, [r3, #12]
                    PUSH(obj);
   199e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   199ea:	606b      	str	r3, [r5, #4]
   199ec:	3504      	adds	r5, #4
                    DISPATCH();
   199ee:	e5f8      	b.n	195e2 <mp_execute_bytecode+0x1d6>
                    DECODE_QSTR;
   199f0:	f8b4 3001 	ldrh.w	r3, [r4, #1]
                    PUSH(MP_OBJ_NEW_QSTR(qst));
   199f4:	009b      	lsls	r3, r3, #2
   199f6:	f043 0302 	orr.w	r3, r3, #2
   199fa:	606b      	str	r3, [r5, #4]
                    DECODE_QSTR;
   199fc:	3403      	adds	r4, #3
                    PUSH(MP_OBJ_NEW_QSTR(qst));
   199fe:	3504      	adds	r5, #4
                    DISPATCH();
   19a00:	e5ef      	b.n	195e2 <mp_execute_bytecode+0x1d6>
                    if ((ip[0] & 0x40) != 0) {
   19a02:	7862      	ldrb	r2, [r4, #1]
                switch (*ip++) {
   19a04:	4634      	mov	r4, r6
                    if ((ip[0] & 0x40) != 0) {
   19a06:	f342 1280 	sbfx	r2, r2, #6, #1
                        num = (num << 7) | (*ip & 0x7f);
   19a0a:	f814 3b01 	ldrb.w	r3, [r4], #1
   19a0e:	f003 017f 	and.w	r1, r3, #127	; 0x7f
                    } while ((*ip++ & 0x80) != 0);
   19a12:	0618      	lsls	r0, r3, #24
                        num = (num << 7) | (*ip & 0x7f);
   19a14:	ea41 12c2 	orr.w	r2, r1, r2, lsl #7
                    } while ((*ip++ & 0x80) != 0);
   19a18:	d4f7      	bmi.n	19a0a <mp_execute_bytecode+0x5fe>
                    PUSH(MP_OBJ_NEW_SMALL_INT(num));
   19a1a:	0053      	lsls	r3, r2, #1
   19a1c:	f043 0301 	orr.w	r3, r3, #1
   19a20:	606b      	str	r3, [r5, #4]
   19a22:	3504      	adds	r5, #4
                    DISPATCH();
   19a24:	e5dd      	b.n	195e2 <mp_execute_bytecode+0x1d6>
                    PUSH(mp_const_true);
   19a26:	4bbf      	ldr	r3, [pc, #764]	; (19d24 <mp_execute_bytecode+0x918>)
   19a28:	606b      	str	r3, [r5, #4]
                switch (*ip++) {
   19a2a:	4634      	mov	r4, r6
                    PUSH(mp_const_true);
   19a2c:	3504      	adds	r5, #4
                    DISPATCH();
   19a2e:	e5d8      	b.n	195e2 <mp_execute_bytecode+0x1d6>
                    DECODE_QSTR;
   19a30:	f8b4 0001 	ldrh.w	r0, [r4, #1]
                    PUSH(mp_load_global(qst));
   19a34:	f7f1 fdb6 	bl	b5a4 <mp_load_global>
   19a38:	1d2b      	adds	r3, r5, #4
   19a3a:	6068      	str	r0, [r5, #4]
                    DECODE_QSTR;
   19a3c:	3403      	adds	r4, #3
                    PUSH(mp_load_global(qst));
   19a3e:	461d      	mov	r5, r3
                    DISPATCH();
   19a40:	e5cf      	b.n	195e2 <mp_execute_bytecode+0x1d6>
                    DECODE_QSTR;
   19a42:	f8b4 0001 	ldrh.w	r0, [r4, #1]
                    PUSH(mp_load_name(qst));
   19a46:	f7f1 fd86 	bl	b556 <mp_load_name>
   19a4a:	1d2b      	adds	r3, r5, #4
   19a4c:	6068      	str	r0, [r5, #4]
                    DECODE_QSTR;
   19a4e:	3403      	adds	r4, #3
                    PUSH(mp_load_name(qst));
   19a50:	461d      	mov	r5, r3
                    DISPATCH();
   19a52:	e5c6      	b.n	195e2 <mp_execute_bytecode+0x1d6>
                switch (*ip++) {
   19a54:	4634      	mov	r4, r6
   19a56:	2200      	movs	r2, #0
                    DECODE_UINT;
   19a58:	f814 3b01 	ldrb.w	r3, [r4], #1
   19a5c:	f003 017f 	and.w	r1, r3, #127	; 0x7f
   19a60:	061e      	lsls	r6, r3, #24
   19a62:	eb01 12c2 	add.w	r2, r1, r2, lsl #7
   19a66:	d4f7      	bmi.n	19a58 <mp_execute_bytecode+0x64c>
                    obj_shared = mp_obj_cell_get(fastn[-unum]);
   19a68:	ebc2 7282 	rsb	r2, r2, r2, lsl #30
   19a6c:	f85a 0022 	ldr.w	r0, [sl, r2, lsl #2]
   19a70:	f7f4 fbac 	bl	e1cc <mp_obj_cell_get>
                    if (obj_shared == MP_OBJ_NULL) {
   19a74:	2800      	cmp	r0, #0
   19a76:	f000 83b9 	beq.w	1a1ec <mp_execute_bytecode+0xde0>
                        PUSH(value); // push the next iteration value
   19a7a:	6068      	str	r0, [r5, #4]
   19a7c:	3504      	adds	r5, #4
   19a7e:	e5b0      	b.n	195e2 <mp_execute_bytecode+0x1d6>
                switch (*ip++) {
   19a80:	4634      	mov	r4, r6
   19a82:	2200      	movs	r2, #0
                    DECODE_UINT;
   19a84:	f814 3b01 	ldrb.w	r3, [r4], #1
   19a88:	f003 017f 	and.w	r1, r3, #127	; 0x7f
   19a8c:	061b      	lsls	r3, r3, #24
   19a8e:	eb01 12c2 	add.w	r2, r1, r2, lsl #7
   19a92:	d4f7      	bmi.n	19a84 <mp_execute_bytecode+0x678>
                    obj_shared = fastn[-unum];
   19a94:	ebc2 7282 	rsb	r2, r2, r2, lsl #30
   19a98:	f85a 0022 	ldr.w	r0, [sl, r2, lsl #2]
   19a9c:	e7ea      	b.n	19a74 <mp_execute_bytecode+0x668>
                    DECODE_QSTR;
   19a9e:	f8b4 1001 	ldrh.w	r1, [r4, #1]
                    mp_load_method(*sp, qst, sp);
   19aa2:	6828      	ldr	r0, [r5, #0]
   19aa4:	462a      	mov	r2, r5
                    DECODE_QSTR;
   19aa6:	3403      	adds	r4, #3
                    mp_load_method(*sp, qst, sp);
   19aa8:	f7f2 fe76 	bl	c798 <mp_load_method>
                    sp += 1;
   19aac:	3504      	adds	r5, #4
                    DISPATCH();
   19aae:	e598      	b.n	195e2 <mp_execute_bytecode+0x1d6>
                    DECODE_QSTR;
   19ab0:	f8b4 0001 	ldrh.w	r0, [r4, #1]
                    mp_load_super_method(qst, sp - 1);
   19ab4:	f1a5 0108 	sub.w	r1, r5, #8
                    DECODE_QSTR;
   19ab8:	3403      	adds	r4, #3
                    sp -= 1;
   19aba:	3d04      	subs	r5, #4
                    mp_load_super_method(qst, sp - 1);
   19abc:	f7fd fab2 	bl	17024 <mp_load_super_method>
                    DISPATCH();
   19ac0:	e58f      	b.n	195e2 <mp_execute_bytecode+0x1d6>
                    DECODE_QSTR;
   19ac2:	f8b4 1001 	ldrh.w	r1, [r4, #1]
                    SET_TOP(mp_load_attr(TOP(), qst));
   19ac6:	6828      	ldr	r0, [r5, #0]
   19ac8:	f7f2 fd76 	bl	c5b8 <mp_load_attr>
                    DECODE_QSTR;
   19acc:	3403      	adds	r4, #3
                    SET_TOP(mp_load_attr(TOP(), qst));
   19ace:	6028      	str	r0, [r5, #0]
                    DISPATCH();
   19ad0:	e587      	b.n	195e2 <mp_execute_bytecode+0x1d6>
                    PUSH(mp_const_false);
   19ad2:	4b95      	ldr	r3, [pc, #596]	; (19d28 <mp_execute_bytecode+0x91c>)
   19ad4:	606b      	str	r3, [r5, #4]
                switch (*ip++) {
   19ad6:	4634      	mov	r4, r6
                    PUSH(mp_const_false);
   19ad8:	3504      	adds	r5, #4
                    DISPATCH();
   19ada:	e582      	b.n	195e2 <mp_execute_bytecode+0x1d6>
                    PUSH(mp_const_none);
   19adc:	4b93      	ldr	r3, [pc, #588]	; (19d2c <mp_execute_bytecode+0x920>)
   19ade:	606b      	str	r3, [r5, #4]
                switch (*ip++) {
   19ae0:	4634      	mov	r4, r6
                    PUSH(mp_const_none);
   19ae2:	3504      	adds	r5, #4
                    DISPATCH();
   19ae4:	e57d      	b.n	195e2 <mp_execute_bytecode+0x1d6>
                switch (*ip++) {
   19ae6:	4634      	mov	r4, r6
   19ae8:	2000      	movs	r0, #0
                    DECODE_UINT;
   19aea:	f814 3b01 	ldrb.w	r3, [r4], #1
   19aee:	f003 027f 	and.w	r2, r3, #127	; 0x7f
   19af2:	061e      	lsls	r6, r3, #24
   19af4:	eb02 10c0 	add.w	r0, r2, r0, lsl #7
   19af8:	d4f7      	bmi.n	19aea <mp_execute_bytecode+0x6de>
                    sp -= unum - 1;
   19afa:	ebc0 7380 	rsb	r3, r0, r0, lsl #30
   19afe:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   19b02:	3504      	adds	r5, #4
                    SET_TOP(mp_obj_new_tuple(unum, sp));
   19b04:	4629      	mov	r1, r5
   19b06:	f7fc f84b 	bl	15ba0 <mp_obj_new_tuple>
   19b0a:	6028      	str	r0, [r5, #0]
                    DISPATCH();
   19b0c:	e569      	b.n	195e2 <mp_execute_bytecode+0x1d6>
                    mp_obj_t obj = TOP();
   19b0e:	46a9      	mov	r9, r5
                    obj = mp_getiter(obj, iter_buf);
   19b10:	4629      	mov	r1, r5
   19b12:	f859 0b0c 	ldr.w	r0, [r9], #12
   19b16:	f7f2 feb7 	bl	c888 <mp_getiter>
                    if (obj != MP_OBJ_FROM_PTR(iter_buf)) {
   19b1a:	4285      	cmp	r5, r0
   19b1c:	f000 831f 	beq.w	1a15e <mp_execute_bytecode+0xd52>
                        sp[-MP_OBJ_ITER_BUF_NSLOTS + 1] = MP_OBJ_NULL;
   19b20:	2300      	movs	r3, #0
                        sp[-MP_OBJ_ITER_BUF_NSLOTS + 2] = obj;
   19b22:	6068      	str	r0, [r5, #4]
                        sp[-MP_OBJ_ITER_BUF_NSLOTS + 1] = MP_OBJ_NULL;
   19b24:	602b      	str	r3, [r5, #0]
                switch (*ip++) {
   19b26:	4634      	mov	r4, r6
                    sp += MP_OBJ_ITER_BUF_NSLOTS - 1;
   19b28:	464d      	mov	r5, r9
   19b2a:	e55a      	b.n	195e2 <mp_execute_bytecode+0x1d6>
                    mp_uint_t unum = *ip;
   19b2c:	7863      	ldrb	r3, [r4, #1]
                    if (unum == 2) {
   19b2e:	2b02      	cmp	r3, #2
   19b30:	f000 82db 	beq.w	1a0ea <mp_execute_bytecode+0xcde>
                    if (unum == 0) {
   19b34:	2b00      	cmp	r3, #0
   19b36:	f040 82d9 	bne.w	1a0ec <mp_execute_bytecode+0xce0>
                        for (mp_exc_stack_t *e = exc_sp; e >= exc_stack; e--) {
   19b3a:	9b06      	ldr	r3, [sp, #24]
   19b3c:	429f      	cmp	r7, r3
   19b3e:	d904      	bls.n	19b4a <mp_execute_bytecode+0x73e>
   19b40:	e311      	b.n	1a166 <mp_execute_bytecode+0xd5a>
   19b42:	3b0c      	subs	r3, #12
   19b44:	429f      	cmp	r7, r3
   19b46:	f200 830e 	bhi.w	1a166 <mp_execute_bytecode+0xd5a>
                            if (e->prev_exc != NULL) {
   19b4a:	6898      	ldr	r0, [r3, #8]
   19b4c:	2800      	cmp	r0, #0
   19b4e:	d0f8      	beq.n	19b42 <mp_execute_bytecode+0x736>
                    obj = mp_make_raise_obj(obj);
   19b50:	f7f3 f848 	bl	cbe4 <mp_make_raise_obj>
   19b54:	4681      	mov	r9, r0
                    RAISE(obj);
   19b56:	f7e6 fb9f 	bl	298 <nlr_pop>
   19b5a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
   19b5e:	e48e      	b.n	1947e <mp_execute_bytecode+0x72>
                    if (currently_in_except_block) {
   19b60:	f89d 3017 	ldrb.w	r3, [sp, #23]
   19b64:	b173      	cbz	r3, 19b84 <mp_execute_bytecode+0x778>
                        POP_EXC_BLOCK();
   19b66:	9b06      	ldr	r3, [sp, #24]
   19b68:	685b      	ldr	r3, [r3, #4]
   19b6a:	f003 0301 	and.w	r3, r3, #1
   19b6e:	f88d 3017 	strb.w	r3, [sp, #23]
   19b72:	e004      	b.n	19b7e <mp_execute_bytecode+0x772>
                        if (MP_TAGPTR_TAG1(exc_sp->val_sp)) {
   19b74:	9b06      	ldr	r3, [sp, #24]
   19b76:	685b      	ldr	r3, [r3, #4]
   19b78:	079e      	lsls	r6, r3, #30
   19b7a:	f100 82a4 	bmi.w	1a0c6 <mp_execute_bytecode+0xcba>
                        POP_EXC_BLOCK();
   19b7e:	9b06      	ldr	r3, [sp, #24]
   19b80:	3b0c      	subs	r3, #12
   19b82:	9306      	str	r3, [sp, #24]
                    while (exc_sp >= exc_stack) {
   19b84:	9b06      	ldr	r3, [sp, #24]
   19b86:	429f      	cmp	r7, r3
   19b88:	d9f4      	bls.n	19b74 <mp_execute_bytecode+0x768>
                    nlr_pop();
   19b8a:	f7e6 fb85 	bl	298 <nlr_pop>
                    assert(exc_sp == exc_stack - 1);
   19b8e:	9b06      	ldr	r3, [sp, #24]
                    code_state->sp = sp;
   19b90:	f8c8 5008 	str.w	r5, [r8, #8]
                    assert(exc_sp == exc_stack - 1);
   19b94:	3f0c      	subs	r7, #12
   19b96:	42bb      	cmp	r3, r7
   19b98:	f040 83a9 	bne.w	1a2ee <mp_execute_bytecode+0xee2>
                    return MP_VM_RETURN_NORMAL;
   19b9c:	2000      	movs	r0, #0
}
   19b9e:	b015      	add	sp, #84	; 0x54
   19ba0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                switch (*ip++) {
   19ba4:	4634      	mov	r4, r6
   19ba6:	2600      	movs	r6, #0
                    DECODE_UINT;
   19ba8:	f814 3b01 	ldrb.w	r3, [r4], #1
   19bac:	f003 027f 	and.w	r2, r3, #127	; 0x7f
   19bb0:	eb02 16c6 	add.w	r6, r2, r6, lsl #7
   19bb4:	061a      	lsls	r2, r3, #24
   19bb6:	d4f7      	bmi.n	19ba8 <mp_execute_bytecode+0x79c>
                    mp_unpack_ex(sp[0], unum, sp);
   19bb8:	462a      	mov	r2, r5
   19bba:	4631      	mov	r1, r6
   19bbc:	6828      	ldr	r0, [r5, #0]
   19bbe:	f7f2 fc0b 	bl	c3d8 <mp_unpack_ex>
                    sp += (unum & 0xff) + ((unum >> 8) & 0xff);
   19bc2:	f3c6 2307 	ubfx	r3, r6, #8, #8
   19bc6:	fa53 f686 	uxtab	r6, r3, r6
   19bca:	eb05 0586 	add.w	r5, r5, r6, lsl #2
                    DISPATCH();
   19bce:	e508      	b.n	195e2 <mp_execute_bytecode+0x1d6>
                switch (*ip++) {
   19bd0:	4634      	mov	r4, r6
   19bd2:	2600      	movs	r6, #0
                    DECODE_UINT;
   19bd4:	f814 3b01 	ldrb.w	r3, [r4], #1
   19bd8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
   19bdc:	0619      	lsls	r1, r3, #24
   19bde:	eb02 16c6 	add.w	r6, r2, r6, lsl #7
   19be2:	d4f7      	bmi.n	19bd4 <mp_execute_bytecode+0x7c8>
                    mp_unpack_sequence(sp[0], unum, sp);
   19be4:	4631      	mov	r1, r6
                    sp += unum - 1;
   19be6:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
                    mp_unpack_sequence(sp[0], unum, sp);
   19bea:	462a      	mov	r2, r5
   19bec:	6828      	ldr	r0, [r5, #0]
                    sp += unum - 1;
   19bee:	3e01      	subs	r6, #1
                    mp_unpack_sequence(sp[0], unum, sp);
   19bf0:	f7f2 fb6c 	bl	c2cc <mp_unpack_sequence>
                    sp += unum - 1;
   19bf4:	eb05 0586 	add.w	r5, r5, r6, lsl #2
                    DISPATCH();
   19bf8:	e4f3      	b.n	195e2 <mp_execute_bytecode+0x1d6>
                switch (*ip++) {
   19bfa:	4634      	mov	r4, r6
   19bfc:	2200      	movs	r2, #0
                    DECODE_UINT;
   19bfe:	f814 3b01 	ldrb.w	r3, [r4], #1
   19c02:	f003 017f 	and.w	r1, r3, #127	; 0x7f
   19c06:	061b      	lsls	r3, r3, #24
   19c08:	eb01 12c2 	add.w	r2, r1, r2, lsl #7
   19c0c:	d4f7      	bmi.n	19bfe <mp_execute_bytecode+0x7f2>
                    mp_obj_t obj = sp[-(unum >> 2)];
   19c0e:	0893      	lsrs	r3, r2, #2
   19c10:	ebc3 7383 	rsb	r3, r3, r3, lsl #30
                    if ((unum & 3) == 0) {
   19c14:	0796      	lsls	r6, r2, #30
                    mp_obj_t obj = sp[-(unum >> 2)];
   19c16:	f855 0023 	ldr.w	r0, [r5, r3, lsl #2]
                    if ((unum & 3) == 0) {
   19c1a:	f040 821f 	bne.w	1a05c <mp_execute_bytecode+0xc50>
                        mp_obj_list_append(obj, sp[0]);
   19c1e:	f855 1904 	ldr.w	r1, [r5], #-4
   19c22:	f7f7 f8f4 	bl	10e0e <mp_obj_list_append>
   19c26:	e4dc      	b.n	195e2 <mp_execute_bytecode+0x1d6>
                switch (*ip++) {
   19c28:	4634      	mov	r4, r6
   19c2a:	2000      	movs	r0, #0
                    DECODE_UINT;
   19c2c:	f814 3b01 	ldrb.w	r3, [r4], #1
   19c30:	f003 027f 	and.w	r2, r3, #127	; 0x7f
   19c34:	eb02 10c0 	add.w	r0, r2, r0, lsl #7
   19c38:	061a      	lsls	r2, r3, #24
   19c3a:	d4f7      	bmi.n	19c2c <mp_execute_bytecode+0x820>
                    PUSH(mp_obj_new_dict(unum));
   19c3c:	f7f5 f9ec 	bl	f018 <mp_obj_new_dict>
   19c40:	1d2b      	adds	r3, r5, #4
   19c42:	6068      	str	r0, [r5, #4]
   19c44:	461d      	mov	r5, r3
                    DISPATCH();
   19c46:	e4cc      	b.n	195e2 <mp_execute_bytecode+0x1d6>
                    sp -= 2;
   19c48:	f1a5 0308 	sub.w	r3, r5, #8
                    mp_obj_dict_store(sp[0], sp[2], sp[1]);
   19c4c:	f855 2c04 	ldr.w	r2, [r5, #-4]
   19c50:	6829      	ldr	r1, [r5, #0]
   19c52:	f855 0c08 	ldr.w	r0, [r5, #-8]
                switch (*ip++) {
   19c56:	4634      	mov	r4, r6
                    sp -= 2;
   19c58:	461d      	mov	r5, r3
                    mp_obj_dict_store(sp[0], sp[2], sp[1]);
   19c5a:	f7f5 f9fe 	bl	f05a <mp_obj_dict_store>
                    DISPATCH();
   19c5e:	e4c0      	b.n	195e2 <mp_execute_bytecode+0x1d6>
                switch (*ip++) {
   19c60:	4634      	mov	r4, r6
   19c62:	2000      	movs	r0, #0
                    DECODE_UINT;
   19c64:	f814 3b01 	ldrb.w	r3, [r4], #1
   19c68:	f003 027f 	and.w	r2, r3, #127	; 0x7f
   19c6c:	0619      	lsls	r1, r3, #24
   19c6e:	eb02 10c0 	add.w	r0, r2, r0, lsl #7
   19c72:	d4f7      	bmi.n	19c64 <mp_execute_bytecode+0x858>
                    sp -= unum - 1;
   19c74:	ebc0 7380 	rsb	r3, r0, r0, lsl #30
   19c78:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   19c7c:	3504      	adds	r5, #4
                    SET_TOP(mp_obj_new_list(unum, sp));
   19c7e:	4629      	mov	r1, r5
   19c80:	f7f7 fd31 	bl	116e6 <mp_obj_new_list>
   19c84:	6028      	str	r0, [r5, #0]
                    DISPATCH();
   19c86:	e4ac      	b.n	195e2 <mp_execute_bytecode+0x1d6>
                switch (*ip++) {
   19c88:	4634      	mov	r4, r6
   19c8a:	2100      	movs	r1, #0
                    DECODE_UINT;
   19c8c:	f814 3b01 	ldrb.w	r3, [r4], #1
   19c90:	f003 027f 	and.w	r2, r3, #127	; 0x7f
   19c94:	0618      	lsls	r0, r3, #24
   19c96:	eb02 11c1 	add.w	r1, r2, r1, lsl #7
   19c9a:	d4f7      	bmi.n	19c8c <mp_execute_bytecode+0x880>
                    sp -= (unum & 0xff) + ((unum >> 7) & 0x1fe) + 2;
   19c9c:	09cb      	lsrs	r3, r1, #7
   19c9e:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
   19ca2:	fa53 f381 	uxtab	r3, r3, r1
   19ca6:	ebc3 7383 	rsb	r3, r3, r3, lsl #30
   19caa:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   19cae:	3d08      	subs	r5, #8
                    SET_TOP(mp_call_method_n_kw_var(false, unum, sp));
   19cb0:	462a      	mov	r2, r5
   19cb2:	2000      	movs	r0, #0
   19cb4:	f7f2 fae9 	bl	c28a <mp_call_method_n_kw_var>
   19cb8:	6028      	str	r0, [r5, #0]
                    DISPATCH();
   19cba:	e492      	b.n	195e2 <mp_execute_bytecode+0x1d6>
                    PUSH_EXC_BLOCK((code_state->ip[0] == MP_BC_SETUP_FINALLY) ? 1 : 0);
   19cbc:	9a06      	ldr	r2, [sp, #24]
   19cbe:	f8b4 3001 	ldrh.w	r3, [r4, #1]
   19cc2:	320c      	adds	r2, #12
   19cc4:	9206      	str	r2, [sp, #24]
   19cc6:	9a06      	ldr	r2, [sp, #24]
   19cc8:	9806      	ldr	r0, [sp, #24]
   19cca:	1ce1      	adds	r1, r4, #3
   19ccc:	440b      	add	r3, r1
   19cce:	6013      	str	r3, [r2, #0]
   19cd0:	7822      	ldrb	r2, [r4, #0]
   19cd2:	f89d 3017 	ldrb.w	r3, [sp, #23]
   19cd6:	9e06      	ldr	r6, [sp, #24]
   19cd8:	2a40      	cmp	r2, #64	; 0x40
   19cda:	bf14      	ite	ne
   19cdc:	2200      	movne	r2, #0
   19cde:	2202      	moveq	r2, #2
   19ce0:	4313      	orrs	r3, r2
   19ce2:	432b      	orrs	r3, r5
   19ce4:	2200      	movs	r2, #0
   19ce6:	6043      	str	r3, [r0, #4]
   19ce8:	460c      	mov	r4, r1
   19cea:	f88d 2017 	strb.w	r2, [sp, #23]
   19cee:	60b2      	str	r2, [r6, #8]
                    DISPATCH();
   19cf0:	e477      	b.n	195e2 <mp_execute_bytecode+0x1d6>
                switch (*ip++) {
   19cf2:	4634      	mov	r4, r6
   19cf4:	2000      	movs	r0, #0
                    DECODE_PTR;
   19cf6:	f814 3b01 	ldrb.w	r3, [r4], #1
   19cfa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
   19cfe:	061e      	lsls	r6, r3, #24
   19d00:	eb02 10c0 	add.w	r0, r2, r0, lsl #7
   19d04:	d4f7      	bmi.n	19cf6 <mp_execute_bytecode+0x8ea>
   19d06:	f8d8 3000 	ldr.w	r3, [r8]
                    SET_TOP(mp_make_function_from_raw_code(ptr, TOP(), def_dict));
   19d0a:	682a      	ldr	r2, [r5, #0]
                    DECODE_PTR;
   19d0c:	68db      	ldr	r3, [r3, #12]
                    SET_TOP(mp_make_function_from_raw_code(ptr, TOP(), def_dict));
   19d0e:	f855 1c04 	ldr.w	r1, [r5, #-4]
   19d12:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   19d16:	f7f1 fa7a 	bl	b20e <mp_make_function_from_raw_code>
                    mp_obj_t def_dict = POP();
   19d1a:	1f2b      	subs	r3, r5, #4
                    SET_TOP(mp_make_function_from_raw_code(ptr, TOP(), def_dict));
   19d1c:	f845 0c04 	str.w	r0, [r5, #-4]
                    mp_obj_t def_dict = POP();
   19d20:	461d      	mov	r5, r3
                    DISPATCH();
   19d22:	e45e      	b.n	195e2 <mp_execute_bytecode+0x1d6>
   19d24:	0001f9c4 	.word	0x0001f9c4
   19d28:	0001f9bc 	.word	0x0001f9bc
   19d2c:	000212b4 	.word	0x000212b4
                switch (*ip++) {
   19d30:	4634      	mov	r4, r6
   19d32:	2100      	movs	r1, #0
                    DECODE_PTR;
   19d34:	f814 3b01 	ldrb.w	r3, [r4], #1
   19d38:	f003 027f 	and.w	r2, r3, #127	; 0x7f
   19d3c:	061b      	lsls	r3, r3, #24
   19d3e:	eb02 11c1 	add.w	r1, r2, r1, lsl #7
   19d42:	d4f7      	bmi.n	19d34 <mp_execute_bytecode+0x928>
   19d44:	f8d8 3000 	ldr.w	r3, [r8]
   19d48:	68db      	ldr	r3, [r3, #12]
                    PUSH(mp_make_function_from_raw_code(ptr, MP_OBJ_NULL, MP_OBJ_NULL));
   19d4a:	2200      	movs	r2, #0
   19d4c:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
   19d50:	4611      	mov	r1, r2
   19d52:	f7f1 fa5c 	bl	b20e <mp_make_function_from_raw_code>
   19d56:	1d2b      	adds	r3, r5, #4
   19d58:	6068      	str	r0, [r5, #4]
   19d5a:	461d      	mov	r5, r3
                    DISPATCH();
   19d5c:	e441      	b.n	195e2 <mp_execute_bytecode+0x1d6>
                switch (*ip++) {
   19d5e:	2000      	movs	r0, #0
   19d60:	e000      	b.n	19d64 <mp_execute_bytecode+0x958>
                    DECODE_PTR;
   19d62:	461e      	mov	r6, r3
   19d64:	4633      	mov	r3, r6
   19d66:	f813 2b01 	ldrb.w	r2, [r3], #1
   19d6a:	f002 017f 	and.w	r1, r2, #127	; 0x7f
   19d6e:	0612      	lsls	r2, r2, #24
   19d70:	eb01 10c0 	add.w	r0, r1, r0, lsl #7
   19d74:	d4f5      	bmi.n	19d62 <mp_execute_bytecode+0x956>
                    size_t n_closed_over = *ip++;
   19d76:	7819      	ldrb	r1, [r3, #0]
                    DECODE_PTR;
   19d78:	f8d8 3000 	ldr.w	r3, [r8]
                    sp -= 2 + n_closed_over - 1;
   19d7c:	43ca      	mvns	r2, r1
                    DECODE_PTR;
   19d7e:	68db      	ldr	r3, [r3, #12]
                    sp -= 2 + n_closed_over - 1;
   19d80:	eb05 0582 	add.w	r5, r5, r2, lsl #2
                    SET_TOP(mp_make_closure_from_raw_code(ptr, 0x100 | n_closed_over, sp));
   19d84:	f441 7180 	orr.w	r1, r1, #256	; 0x100
   19d88:	462a      	mov	r2, r5
   19d8a:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   19d8e:	f7f1 fab3 	bl	b2f8 <mp_make_closure_from_raw_code>
                    size_t n_closed_over = *ip++;
   19d92:	1cb4      	adds	r4, r6, #2
                    SET_TOP(mp_make_closure_from_raw_code(ptr, 0x100 | n_closed_over, sp));
   19d94:	6028      	str	r0, [r5, #0]
                    DISPATCH();
   19d96:	e424      	b.n	195e2 <mp_execute_bytecode+0x1d6>
                    assert(exc_sp >= exc_stack);
   19d98:	9b06      	ldr	r3, [sp, #24]
   19d9a:	429f      	cmp	r7, r3
   19d9c:	f200 82a0 	bhi.w	1a2e0 <mp_execute_bytecode+0xed4>
                    POP_EXC_BLOCK();
   19da0:	9b06      	ldr	r3, [sp, #24]
   19da2:	685b      	ldr	r3, [r3, #4]
   19da4:	f003 0301 	and.w	r3, r3, #1
   19da8:	f88d 3017 	strb.w	r3, [sp, #23]
   19dac:	9b06      	ldr	r3, [sp, #24]
   19dae:	3b0c      	subs	r3, #12
                switch (*ip++) {
   19db0:	4634      	mov	r4, r6
                    POP_EXC_BLOCK();
   19db2:	9306      	str	r3, [sp, #24]
                    DISPATCH();
   19db4:	e415      	b.n	195e2 <mp_execute_bytecode+0x1d6>
                switch (*ip++) {
   19db6:	4634      	mov	r4, r6
   19db8:	2200      	movs	r2, #0
                    DECODE_UINT;
   19dba:	f814 3b01 	ldrb.w	r3, [r4], #1
   19dbe:	f003 017f 	and.w	r1, r3, #127	; 0x7f
   19dc2:	061e      	lsls	r6, r3, #24
   19dc4:	eb01 12c2 	add.w	r2, r1, r2, lsl #7
   19dc8:	d4f7      	bmi.n	19dba <mp_execute_bytecode+0x9ae>
                    sp -= (unum & 0xff) + ((unum >> 7) & 0x1fe);
   19dca:	09d3      	lsrs	r3, r2, #7
   19dcc:	b2d1      	uxtb	r1, r2
   19dce:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
   19dd2:	440b      	add	r3, r1
   19dd4:	eba5 0583 	sub.w	r5, r5, r3, lsl #2
                    SET_TOP(mp_call_function_n_kw(*sp, unum & 0xff, (unum >> 8) & 0xff, sp + 1));
   19dd8:	f3c2 2207 	ubfx	r2, r2, #8, #8
   19ddc:	1d2b      	adds	r3, r5, #4
   19dde:	6828      	ldr	r0, [r5, #0]
   19de0:	f7f1 ffe1 	bl	bda6 <mp_call_function_n_kw>
   19de4:	6028      	str	r0, [r5, #0]
                    DISPATCH();
   19de6:	f7ff bbfc 	b.w	195e2 <mp_execute_bytecode+0x1d6>
                switch (*ip++) {
   19dea:	2000      	movs	r0, #0
   19dec:	e000      	b.n	19df0 <mp_execute_bytecode+0x9e4>
                    DECODE_PTR;
   19dee:	461e      	mov	r6, r3
   19df0:	4633      	mov	r3, r6
   19df2:	f813 2b01 	ldrb.w	r2, [r3], #1
   19df6:	f002 017f 	and.w	r1, r2, #127	; 0x7f
   19dfa:	eb01 10c0 	add.w	r0, r1, r0, lsl #7
   19dfe:	0611      	lsls	r1, r2, #24
   19e00:	d4f5      	bmi.n	19dee <mp_execute_bytecode+0x9e2>
                    size_t n_closed_over = *ip++;
   19e02:	7819      	ldrb	r1, [r3, #0]
                    DECODE_PTR;
   19e04:	f8d8 3000 	ldr.w	r3, [r8]
                    sp -= n_closed_over - 1;
   19e08:	ebc1 7281 	rsb	r2, r1, r1, lsl #30
   19e0c:	eb05 0582 	add.w	r5, r5, r2, lsl #2
                    DECODE_PTR;
   19e10:	68db      	ldr	r3, [r3, #12]
                    sp -= n_closed_over - 1;
   19e12:	3504      	adds	r5, #4
   19e14:	e7b8      	b.n	19d88 <mp_execute_bytecode+0x97c>
                    if (mp_obj_is_true(TOP())) {
   19e16:	6828      	ldr	r0, [r5, #0]
   19e18:	f8b4 6001 	ldrh.w	r6, [r4, #1]
                    DECODE_SLABEL;
   19e1c:	3403      	adds	r4, #3
                    if (mp_obj_is_true(TOP())) {
   19e1e:	f7f3 fd73 	bl	d908 <mp_obj_is_true>
   19e22:	2800      	cmp	r0, #0
   19e24:	d073      	beq.n	19f0e <mp_execute_bytecode+0xb02>
                    DECODE_SLABEL;
   19e26:	f5a6 4600 	sub.w	r6, r6, #32768	; 0x8000
                        ip += slab;
   19e2a:	4434      	add	r4, r6
   19e2c:	e0b9      	b.n	19fa2 <mp_execute_bytecode+0xb96>
                    DECODE_SLABEL;
   19e2e:	f8b4 3001 	ldrh.w	r3, [r4, #1]
                    PUSH((mp_obj_t)(mp_uint_t)(uintptr_t)(ip + slab)); // push destination ip for jump
   19e32:	f5a3 43ff 	sub.w	r3, r3, #32640	; 0x7f80
   19e36:	3b7d      	subs	r3, #125	; 0x7d
   19e38:	4423      	add	r3, r4
   19e3a:	606b      	str	r3, [r5, #4]
                    PUSH((mp_obj_t)(mp_uint_t)(*ip)); // push number of exception handlers to unwind (0x80 bit set if we also need to pop stack)
   19e3c:	78e2      	ldrb	r2, [r4, #3]
   19e3e:	60aa      	str	r2, [r5, #8]
   19e40:	3508      	adds	r5, #8
   19e42:	e013      	b.n	19e6c <mp_execute_bytecode+0xa60>
                        assert(exc_sp >= exc_stack);
   19e44:	9b06      	ldr	r3, [sp, #24]
   19e46:	429f      	cmp	r7, r3
                        unum -= 1;
   19e48:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
                        assert(exc_sp >= exc_stack);
   19e4c:	f200 820f 	bhi.w	1a26e <mp_execute_bytecode+0xe62>
                        if (MP_TAGPTR_TAG1(exc_sp->val_sp)) {
   19e50:	9b06      	ldr	r3, [sp, #24]
   19e52:	685b      	ldr	r3, [r3, #4]
   19e54:	0798      	lsls	r0, r3, #30
   19e56:	f100 811e 	bmi.w	1a096 <mp_execute_bytecode+0xc8a>
                        POP_EXC_BLOCK();
   19e5a:	9b06      	ldr	r3, [sp, #24]
   19e5c:	685b      	ldr	r3, [r3, #4]
   19e5e:	f003 0301 	and.w	r3, r3, #1
   19e62:	f88d 3017 	strb.w	r3, [sp, #23]
   19e66:	9b06      	ldr	r3, [sp, #24]
   19e68:	3b0c      	subs	r3, #12
   19e6a:	9306      	str	r3, [sp, #24]
                    while ((unum & 0x7f) > 0) {
   19e6c:	0651      	lsls	r1, r2, #25
   19e6e:	d1e9      	bne.n	19e44 <mp_execute_bytecode+0xa38>
                    ip = (const byte*)MP_OBJ_TO_PTR(POP()); // pop destination ip for jump
   19e70:	f855 4c04 	ldr.w	r4, [r5, #-4]
                    if (unum != 0) {
   19e74:	2a00      	cmp	r2, #0
   19e76:	f040 8158 	bne.w	1a12a <mp_execute_bytecode+0xd1e>
                    ip = (const byte*)MP_OBJ_TO_PTR(POP()); // pop destination ip for jump
   19e7a:	3d08      	subs	r5, #8
   19e7c:	e091      	b.n	19fa2 <mp_execute_bytecode+0xb96>
                    assert(exc_sp >= exc_stack);
   19e7e:	9b06      	ldr	r3, [sp, #24]
   19e80:	429f      	cmp	r7, r3
   19e82:	f200 81fb 	bhi.w	1a27c <mp_execute_bytecode+0xe70>
                    assert(currently_in_except_block);
   19e86:	f89d 3017 	ldrb.w	r3, [sp, #23]
   19e8a:	2b00      	cmp	r3, #0
   19e8c:	d188      	bne.n	19da0 <mp_execute_bytecode+0x994>
   19e8e:	4bd0      	ldr	r3, [pc, #832]	; (1a1d0 <mp_execute_bytecode+0xdc4>)
   19e90:	4ad0      	ldr	r2, [pc, #832]	; (1a1d4 <mp_execute_bytecode+0xdc8>)
   19e92:	48d1      	ldr	r0, [pc, #836]	; (1a1d8 <mp_execute_bytecode+0xdcc>)
   19e94:	f240 3106 	movw	r1, #774	; 0x306
   19e98:	f001 f990 	bl	1b1bc <__assert_func>
                    mp_obj_t obj = TOP();
   19e9c:	f8d5 9000 	ldr.w	r9, [r5]
                    mp_load_method(obj, MP_QSTR___exit__, sp);
   19ea0:	462a      	mov	r2, r5
                    mp_load_method(obj, MP_QSTR___enter__, sp + 2);
   19ea2:	f105 0608 	add.w	r6, r5, #8
                    mp_load_method(obj, MP_QSTR___exit__, sp);
   19ea6:	4648      	mov	r0, r9
   19ea8:	210b      	movs	r1, #11
   19eaa:	f7f2 fc75 	bl	c798 <mp_load_method>
                    mp_load_method(obj, MP_QSTR___enter__, sp + 2);
   19eae:	4648      	mov	r0, r9
   19eb0:	4632      	mov	r2, r6
   19eb2:	2109      	movs	r1, #9
   19eb4:	f7f2 fc70 	bl	c798 <mp_load_method>
                    mp_obj_t ret = mp_call_method_n_kw(0, 0, sp + 2);
   19eb8:	2100      	movs	r1, #0
   19eba:	4632      	mov	r2, r6
   19ebc:	4608      	mov	r0, r1
   19ebe:	f7f1 ff93 	bl	bde8 <mp_call_method_n_kw>
                    PUSH_EXC_BLOCK(1);
   19ec2:	9b06      	ldr	r3, [sp, #24]
   19ec4:	f8b4 2001 	ldrh.w	r2, [r4, #1]
   19ec8:	330c      	adds	r3, #12
   19eca:	9306      	str	r3, [sp, #24]
   19ecc:	f8dd c018 	ldr.w	ip, [sp, #24]
   19ed0:	f8dd e018 	ldr.w	lr, [sp, #24]
   19ed4:	f89d 3017 	ldrb.w	r3, [sp, #23]
   19ed8:	9906      	ldr	r1, [sp, #24]
   19eda:	3403      	adds	r4, #3
   19edc:	4422      	add	r2, r4
   19ede:	f8cc 2000 	str.w	r2, [ip]
   19ee2:	f043 0302 	orr.w	r3, r3, #2
                    sp += 1;
   19ee6:	1d2a      	adds	r2, r5, #4
                    PUSH_EXC_BLOCK(1);
   19ee8:	4313      	orrs	r3, r2
   19eea:	2200      	movs	r2, #0
   19eec:	f8ce 3004 	str.w	r3, [lr, #4]
   19ef0:	f88d 2017 	strb.w	r2, [sp, #23]
   19ef4:	608a      	str	r2, [r1, #8]
                    PUSH(ret);
   19ef6:	60a8      	str	r0, [r5, #8]
   19ef8:	4635      	mov	r5, r6
                    DISPATCH();
   19efa:	f7ff bb72 	b.w	195e2 <mp_execute_bytecode+0x1d6>
                    if (mp_obj_is_true(TOP())) {
   19efe:	6828      	ldr	r0, [r5, #0]
   19f00:	f8b4 6001 	ldrh.w	r6, [r4, #1]
                    DECODE_SLABEL;
   19f04:	3403      	adds	r4, #3
                    if (mp_obj_is_true(TOP())) {
   19f06:	f7f3 fcff 	bl	d908 <mp_obj_is_true>
   19f0a:	2800      	cmp	r0, #0
   19f0c:	d08b      	beq.n	19e26 <mp_execute_bytecode+0xa1a>
                        sp--;
   19f0e:	3d04      	subs	r5, #4
   19f10:	e047      	b.n	19fa2 <mp_execute_bytecode+0xb96>
                    if (TOP() == mp_const_none) {
   19f12:	f8d5 9000 	ldr.w	r9, [r5]
   19f16:	4cb1      	ldr	r4, [pc, #708]	; (1a1dc <mp_execute_bytecode+0xdd0>)
   19f18:	45a1      	cmp	r9, r4
   19f1a:	f000 8172 	beq.w	1a202 <mp_execute_bytecode+0xdf6>
                    } else if (MP_OBJ_IS_SMALL_INT(TOP())) {
   19f1e:	f019 0301 	ands.w	r3, r9, #1
   19f22:	9302      	str	r3, [sp, #8]
   19f24:	f040 80a2 	bne.w	1a06c <mp_execute_bytecode+0xc60>
                        assert(mp_obj_is_exception_instance(TOP()));
   19f28:	4648      	mov	r0, r9
   19f2a:	f7f5 fb89 	bl	f640 <mp_obj_is_exception_instance>
   19f2e:	2800      	cmp	r0, #0
   19f30:	f000 81c8 	beq.w	1a2c4 <mp_execute_bytecode+0xeb8>
                        sp[1] = sp[0];
   19f34:	6828      	ldr	r0, [r5, #0]
   19f36:	6068      	str	r0, [r5, #4]
                        sp[0] = MP_OBJ_FROM_PTR(mp_obj_get_type(sp[0]));
   19f38:	f7f3 fc0a 	bl	d750 <mp_obj_get_type>
                        sp -= 2;
   19f3c:	f1a5 0908 	sub.w	r9, r5, #8
                        sp[0] = MP_OBJ_FROM_PTR(mp_obj_get_type(sp[0]));
   19f40:	6028      	str	r0, [r5, #0]
                        mp_obj_t ret_value = mp_call_method_n_kw(3, 0, sp);
   19f42:	9902      	ldr	r1, [sp, #8]
                        sp[2] = mp_const_none;
   19f44:	60ac      	str	r4, [r5, #8]
                        mp_obj_t ret_value = mp_call_method_n_kw(3, 0, sp);
   19f46:	464a      	mov	r2, r9
   19f48:	2003      	movs	r0, #3
   19f4a:	f7f1 ff4d 	bl	bde8 <mp_call_method_n_kw>
                        if (mp_obj_is_true(ret_value)) {
   19f4e:	f7f3 fcdb 	bl	d908 <mp_obj_is_true>
   19f52:	2800      	cmp	r0, #0
   19f54:	f000 80f1 	beq.w	1a13a <mp_execute_bytecode+0xd2e>
                            assert(exc_sp >= exc_stack);
   19f58:	9a06      	ldr	r2, [sp, #24]
                            SET_TOP(mp_const_none);
   19f5a:	f845 4c08 	str.w	r4, [r5, #-8]
                            assert(exc_sp >= exc_stack);
   19f5e:	4297      	cmp	r7, r2
   19f60:	f200 81b7 	bhi.w	1a2d2 <mp_execute_bytecode+0xec6>
                            POP_EXC_BLOCK();
   19f64:	9b06      	ldr	r3, [sp, #24]
   19f66:	685b      	ldr	r3, [r3, #4]
   19f68:	f003 0301 	and.w	r3, r3, #1
   19f6c:	f88d 3017 	strb.w	r3, [sp, #23]
   19f70:	9b06      	ldr	r3, [sp, #24]
   19f72:	3b0c      	subs	r3, #12
                        sp -= 2;
   19f74:	464d      	mov	r5, r9
                switch (*ip++) {
   19f76:	4634      	mov	r4, r6
                            POP_EXC_BLOCK();
   19f78:	9306      	str	r3, [sp, #24]
   19f7a:	f7ff bb32 	b.w	195e2 <mp_execute_bytecode+0x1d6>
                    if (mp_obj_is_true(POP())) {
   19f7e:	6828      	ldr	r0, [r5, #0]
   19f80:	f8b4 6001 	ldrh.w	r6, [r4, #1]
   19f84:	3d04      	subs	r5, #4
                    DECODE_SLABEL;
   19f86:	3403      	adds	r4, #3
                    if (mp_obj_is_true(POP())) {
   19f88:	f7f3 fcbe 	bl	d908 <mp_obj_is_true>
   19f8c:	b148      	cbz	r0, 19fa2 <mp_execute_bytecode+0xb96>
                    DECODE_SLABEL;
   19f8e:	f5a6 4600 	sub.w	r6, r6, #32768	; 0x8000
                        ip += slab;
   19f92:	4434      	add	r4, r6
   19f94:	e005      	b.n	19fa2 <mp_execute_bytecode+0xb96>
                    DECODE_SLABEL;
   19f96:	f8b4 3001 	ldrh.w	r3, [r4, #1]
   19f9a:	f5a3 43ff 	sub.w	r3, r3, #32640	; 0x7f80
   19f9e:	3b7d      	subs	r3, #125	; 0x7d
                    ip += slab;
   19fa0:	441c      	add	r4, r3
                if (MP_STATE_VM(mp_pending_exception) != MP_OBJ_NULL) {
   19fa2:	4b8f      	ldr	r3, [pc, #572]	; (1a1e0 <mp_execute_bytecode+0xdd4>)
   19fa4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   19fa6:	2b00      	cmp	r3, #0
   19fa8:	f43f ab1b 	beq.w	195e2 <mp_execute_bytecode+0x1d6>
                    mp_obj_t obj = MP_STATE_VM(mp_pending_exception);
   19fac:	4b8c      	ldr	r3, [pc, #560]	; (1a1e0 <mp_execute_bytecode+0xdd4>)
                    MP_STATE_VM(mp_pending_exception) = MP_OBJ_NULL;
   19fae:	4a8c      	ldr	r2, [pc, #560]	; (1a1e0 <mp_execute_bytecode+0xdd4>)
                    mp_obj_t obj = MP_STATE_VM(mp_pending_exception);
   19fb0:	f8d3 9034 	ldr.w	r9, [r3, #52]	; 0x34
                    MP_STATE_VM(mp_pending_exception) = MP_OBJ_NULL;
   19fb4:	2300      	movs	r3, #0
   19fb6:	6353      	str	r3, [r2, #52]	; 0x34
                    RAISE(obj);
   19fb8:	f7e6 f96e 	bl	298 <nlr_pop>
   19fbc:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
   19fc0:	f7ff ba5d 	b.w	1947e <mp_execute_bytecode+0x72>
                    SET_TOP(mp_getiter(TOP(), NULL));
   19fc4:	2100      	movs	r1, #0
   19fc6:	6828      	ldr	r0, [r5, #0]
   19fc8:	f7f2 fc5e 	bl	c888 <mp_getiter>
                switch (*ip++) {
   19fcc:	4634      	mov	r4, r6
                    SET_TOP(mp_getiter(TOP(), NULL));
   19fce:	6028      	str	r0, [r5, #0]
                    DISPATCH();
   19fd0:	f7ff bb07 	b.w	195e2 <mp_execute_bytecode+0x1d6>
   19fd4:	f8b4 6001 	ldrh.w	r6, [r4, #1]
                    code_state->sp = sp;
   19fd8:	f8c8 5008 	str.w	r5, [r8, #8]
                    if (sp[-MP_OBJ_ITER_BUF_NSLOTS + 1] == MP_OBJ_NULL) {
   19fdc:	f855 3c0c 	ldr.w	r3, [r5, #-12]
                    DECODE_ULABEL; // the jump offset if iteration finishes; for labels are always forward
   19fe0:	3403      	adds	r4, #3
                    if (sp[-MP_OBJ_ITER_BUF_NSLOTS + 1] == MP_OBJ_NULL) {
   19fe2:	2b00      	cmp	r3, #0
   19fe4:	f000 80b8 	beq.w	1a158 <mp_execute_bytecode+0xd4c>
                        obj = MP_OBJ_FROM_PTR(&sp[-MP_OBJ_ITER_BUF_NSLOTS + 1]);
   19fe8:	f1a5 000c 	sub.w	r0, r5, #12
                    mp_obj_t value = mp_iternext_allow_raise(obj);
   19fec:	f7f2 fca0 	bl	c930 <mp_iternext_allow_raise>
                    if (value == MP_OBJ_STOP_ITERATION) {
   19ff0:	2804      	cmp	r0, #4
   19ff2:	f47f ad42 	bne.w	19a7a <mp_execute_bytecode+0x66e>
                        sp -= MP_OBJ_ITER_BUF_NSLOTS; // pop the exhausted iterator
   19ff6:	3d10      	subs	r5, #16
                        ip += ulab; // jump to after for-block
   19ff8:	4434      	add	r4, r6
   19ffa:	f7ff baf2 	b.w	195e2 <mp_execute_bytecode+0x1d6>
                    if (!mp_obj_is_true(POP())) {
   19ffe:	6828      	ldr	r0, [r5, #0]
   1a000:	f8b4 6001 	ldrh.w	r6, [r4, #1]
   1a004:	3d04      	subs	r5, #4
                    DECODE_SLABEL;
   1a006:	3403      	adds	r4, #3
                    if (!mp_obj_is_true(POP())) {
   1a008:	f7f3 fc7e 	bl	d908 <mp_obj_is_true>
   1a00c:	2800      	cmp	r0, #0
   1a00e:	d1c8      	bne.n	19fa2 <mp_execute_bytecode+0xb96>
                    DECODE_SLABEL;
   1a010:	f5a6 4600 	sub.w	r6, r6, #32768	; 0x8000
                        ip += slab;
   1a014:	4434      	add	r4, r6
   1a016:	e7c4      	b.n	19fa2 <mp_execute_bytecode+0xb96>
                    if (ip[-1] < MP_BC_LOAD_CONST_SMALL_INT_MULTI + 64) {
   1a018:	28af      	cmp	r0, #175	; 0xaf
   1a01a:	d811      	bhi.n	1a040 <mp_execute_bytecode+0xc34>
                        PUSH(MP_OBJ_NEW_SMALL_INT((mp_int_t)ip[-1] - MP_BC_LOAD_CONST_SMALL_INT_MULTI - 16));
   1a01c:	f1a0 0380 	sub.w	r3, r0, #128	; 0x80
   1a020:	005b      	lsls	r3, r3, #1
   1a022:	f043 0301 	orr.w	r3, r3, #1
   1a026:	606b      	str	r3, [r5, #4]
                switch (*ip++) {
   1a028:	4634      	mov	r4, r6
                        PUSH(MP_OBJ_NEW_SMALL_INT((mp_int_t)ip[-1] - MP_BC_LOAD_CONST_SMALL_INT_MULTI - 16));
   1a02a:	3504      	adds	r5, #4
                        DISPATCH();
   1a02c:	f7ff bad9 	b.w	195e2 <mp_execute_bytecode+0x1d6>
                    } else if (MP_OBJ_IS_SMALL_INT(TOP())) {
   1a030:	07d3      	lsls	r3, r2, #31
   1a032:	f140 8108 	bpl.w	1a246 <mp_execute_bytecode+0xe3a>
                        if (cause < 0) {
   1a036:	1052      	asrs	r2, r2, #1
   1a038:	f100 80ad 	bmi.w	1a196 <mp_execute_bytecode+0xd8a>
                            PUSH((mp_obj_t)cause);
   1a03c:	602a      	str	r2, [r5, #0]
                            goto unwind_jump;
   1a03e:	e715      	b.n	19e6c <mp_execute_bytecode+0xa60>
                    } else if (ip[-1] < MP_BC_LOAD_FAST_MULTI + 16) {
   1a040:	28bf      	cmp	r0, #191	; 0xbf
   1a042:	d974      	bls.n	1a12e <mp_execute_bytecode+0xd22>
                    } else if (ip[-1] < MP_BC_STORE_FAST_MULTI + 16) {
   1a044:	28cf      	cmp	r0, #207	; 0xcf
   1a046:	f200 80a8 	bhi.w	1a19a <mp_execute_bytecode+0xd8e>
                        fastn[MP_BC_STORE_FAST_MULTI - (mp_int_t)ip[-1]] = POP();
   1a04a:	f1c0 00c0 	rsb	r0, r0, #192	; 0xc0
   1a04e:	682b      	ldr	r3, [r5, #0]
   1a050:	f84a 3020 	str.w	r3, [sl, r0, lsl #2]
                switch (*ip++) {
   1a054:	4634      	mov	r4, r6
                        fastn[MP_BC_STORE_FAST_MULTI - (mp_int_t)ip[-1]] = POP();
   1a056:	3d04      	subs	r5, #4
                        DISPATCH();
   1a058:	f7ff bac3 	b.w	195e2 <mp_execute_bytecode+0x1d6>
                        mp_obj_dict_store(obj, sp[0], sp[-1]);
   1a05c:	f855 2c04 	ldr.w	r2, [r5, #-4]
   1a060:	f855 1908 	ldr.w	r1, [r5], #-8
   1a064:	f7f4 fff9 	bl	f05a <mp_obj_dict_store>
   1a068:	f7ff babb 	b.w	195e2 <mp_execute_bytecode+0x1d6>
                        mp_obj_t data = sp[-1];
   1a06c:	f855 3c04 	ldr.w	r3, [r5, #-4]
                        sp[0] = mp_const_none;
   1a070:	602c      	str	r4, [r5, #0]
                        sp[1] = mp_const_none;
   1a072:	606c      	str	r4, [r5, #4]
                        sp[-1] = mp_const_none;
   1a074:	f845 4c04 	str.w	r4, [r5, #-4]
                        mp_call_method_n_kw(3, 0, sp - 3);
   1a078:	f1a5 020c 	sub.w	r2, r5, #12
   1a07c:	2100      	movs	r1, #0
   1a07e:	2003      	movs	r0, #3
                        mp_obj_t data = sp[-1];
   1a080:	9302      	str	r3, [sp, #8]
                        mp_call_method_n_kw(3, 0, sp - 3);
   1a082:	f7f1 feb1 	bl	bde8 <mp_call_method_n_kw>
                        sp[-3] = data;
   1a086:	9b02      	ldr	r3, [sp, #8]
   1a088:	f845 3c0c 	str.w	r3, [r5, #-12]
                switch (*ip++) {
   1a08c:	4634      	mov	r4, r6
                        sp[-2] = cause;
   1a08e:	f845 9d08 	str.w	r9, [r5, #-8]!
   1a092:	f7ff baa6 	b.w	195e2 <mp_execute_bytecode+0x1d6>
                            ip = exc_sp->handler; // get exception handler byte code address
   1a096:	9906      	ldr	r1, [sp, #24]
                            exc_sp--; // pop exception handler
   1a098:	9b06      	ldr	r3, [sp, #24]
                            PUSH(MP_OBJ_NEW_SMALL_INT(unum));
   1a09a:	0052      	lsls	r2, r2, #1
   1a09c:	f042 0201 	orr.w	r2, r2, #1
   1a0a0:	602a      	str	r2, [r5, #0]
                            exc_sp--; // pop exception handler
   1a0a2:	3b0c      	subs	r3, #12
                            ip = exc_sp->handler; // get exception handler byte code address
   1a0a4:	680c      	ldr	r4, [r1, #0]
                            exc_sp--; // pop exception handler
   1a0a6:	9306      	str	r3, [sp, #24]
                            goto dispatch_loop; // run the exception handler
   1a0a8:	f7ff ba9b 	b.w	195e2 <mp_execute_bytecode+0x1d6>
                        DECODE_ULABEL; // the jump offset if iteration finishes; for labels are always forward
   1a0ac:	f8b3 1001 	ldrh.w	r1, [r3, #1]
                        code_state->sp -= MP_OBJ_ITER_BUF_NSLOTS; // pop the exhausted iterator
   1a0b0:	f8d8 2008 	ldr.w	r2, [r8, #8]
                        DECODE_ULABEL; // the jump offset if iteration finishes; for labels are always forward
   1a0b4:	3303      	adds	r3, #3
                        code_state->ip = ip + ulab; // jump to after for-block
   1a0b6:	440b      	add	r3, r1
                        code_state->sp -= MP_OBJ_ITER_BUF_NSLOTS; // pop the exhausted iterator
   1a0b8:	3a10      	subs	r2, #16
                        code_state->ip = ip + ulab; // jump to after for-block
   1a0ba:	f8c8 3004 	str.w	r3, [r8, #4]
                        code_state->sp -= MP_OBJ_ITER_BUF_NSLOTS; // pop the exhausted iterator
   1a0be:	f8c8 2008 	str.w	r2, [r8, #8]
                        goto outer_dispatch_loop; // continue with dispatch loop
   1a0c2:	f7ff b9c0 	b.w	19446 <mp_execute_bytecode+0x3a>
                            mp_obj_t *finally_sp = MP_TAGPTR_PTR(exc_sp->val_sp);
   1a0c6:	9b06      	ldr	r3, [sp, #24]
                            ip = exc_sp->handler;
   1a0c8:	9906      	ldr	r1, [sp, #24]
                            mp_obj_t *finally_sp = MP_TAGPTR_PTR(exc_sp->val_sp);
   1a0ca:	685b      	ldr	r3, [r3, #4]
                            exc_sp--;
   1a0cc:	9a06      	ldr	r2, [sp, #24]
                            finally_sp[1] = sp[0];
   1a0ce:	6828      	ldr	r0, [r5, #0]
                            mp_obj_t *finally_sp = MP_TAGPTR_PTR(exc_sp->val_sp);
   1a0d0:	f023 0503 	bic.w	r5, r3, #3
                            exc_sp--;
   1a0d4:	f1a2 030c 	sub.w	r3, r2, #12
                            PUSH(MP_OBJ_NEW_SMALL_INT(-1));
   1a0d8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
                            finally_sp[1] = sp[0];
   1a0dc:	6068      	str	r0, [r5, #4]
                            PUSH(MP_OBJ_NEW_SMALL_INT(-1));
   1a0de:	60aa      	str	r2, [r5, #8]
                            ip = exc_sp->handler;
   1a0e0:	680c      	ldr	r4, [r1, #0]
                            exc_sp--;
   1a0e2:	9306      	str	r3, [sp, #24]
                            PUSH(MP_OBJ_NEW_SMALL_INT(-1));
   1a0e4:	3508      	adds	r5, #8
                            goto dispatch_loop;
   1a0e6:	f7ff ba7c 	b.w	195e2 <mp_execute_bytecode+0x1d6>
                        sp--;
   1a0ea:	3d04      	subs	r5, #4
                        obj = TOP();
   1a0ec:	6828      	ldr	r0, [r5, #0]
                    obj = mp_make_raise_obj(obj);
   1a0ee:	f7f2 fd79 	bl	cbe4 <mp_make_raise_obj>
   1a0f2:	4681      	mov	r9, r0
                    RAISE(obj);
   1a0f4:	f7e6 f8d0 	bl	298 <nlr_pop>
   1a0f8:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
   1a0fc:	f7ff b9bf 	b.w	1947e <mp_execute_bytecode+0x72>
                        assert(ret_kind == MP_VM_RETURN_EXCEPTION);
   1a100:	2802      	cmp	r0, #2
   1a102:	f040 80d8 	bne.w	1a2b6 <mp_execute_bytecode+0xeaa>
                        if (EXC_MATCH(ret_value, MP_OBJ_FROM_PTR(&mp_type_StopIteration))) {
   1a106:	4659      	mov	r1, fp
   1a108:	9807      	ldr	r0, [sp, #28]
   1a10a:	f7f5 faa9 	bl	f660 <mp_obj_exception_match>
   1a10e:	2800      	cmp	r0, #0
   1a110:	f000 80a5 	beq.w	1a25e <mp_execute_bytecode+0xe52>
                            PUSH(mp_obj_exception_get_value(ret_value));
   1a114:	9807      	ldr	r0, [sp, #28]
   1a116:	f7f5 f8d5 	bl	f2c4 <mp_obj_exception_get_value>
   1a11a:	f845 0c04 	str.w	r0, [r5, #-4]
                            GENERATOR_EXIT_IF_NEEDED(t_exc);
   1a11e:	f1b9 0f00 	cmp.w	r9, #0
   1a122:	f47f aa55 	bne.w	195d0 <mp_execute_bytecode+0x1c4>
   1a126:	f7ff ba5a 	b.w	195de <mp_execute_bytecode+0x1d2>
                        sp -= MP_OBJ_ITER_BUF_NSLOTS;
   1a12a:	3d18      	subs	r5, #24
   1a12c:	e739      	b.n	19fa2 <mp_execute_bytecode+0xb96>
                        obj_shared = fastn[MP_BC_LOAD_FAST_MULTI - (mp_int_t)ip[-1]];
   1a12e:	f1c0 00b0 	rsb	r0, r0, #176	; 0xb0
                switch (*ip++) {
   1a132:	4634      	mov	r4, r6
                        obj_shared = fastn[MP_BC_LOAD_FAST_MULTI - (mp_int_t)ip[-1]];
   1a134:	f85a 0020 	ldr.w	r0, [sl, r0, lsl #2]
                        goto load_check;
   1a138:	e49c      	b.n	19a74 <mp_execute_bytecode+0x668>
                            sp[0] = sp[3];
   1a13a:	686b      	ldr	r3, [r5, #4]
   1a13c:	f845 3c08 	str.w	r3, [r5, #-8]
                switch (*ip++) {
   1a140:	4634      	mov	r4, r6
                        sp -= 2;
   1a142:	464d      	mov	r5, r9
   1a144:	f7ff ba4d 	b.w	195e2 <mp_execute_bytecode+0x1d6>
                        ret_kind = mp_resume(TOP(), send_value, MP_OBJ_NULL, &ret_value);
   1a148:	ab07      	add	r3, sp, #28
   1a14a:	464a      	mov	r2, r9
   1a14c:	f855 0c04 	ldr.w	r0, [r5, #-4]
   1a150:	f7f2 fc66 	bl	ca20 <mp_resume>
   1a154:	f7ff ba2c 	b.w	195b0 <mp_execute_bytecode+0x1a4>
                        obj = sp[-MP_OBJ_ITER_BUF_NSLOTS + 2];
   1a158:	f855 0c08 	ldr.w	r0, [r5, #-8]
   1a15c:	e746      	b.n	19fec <mp_execute_bytecode+0xbe0>
                    sp += MP_OBJ_ITER_BUF_NSLOTS - 1;
   1a15e:	464d      	mov	r5, r9
                switch (*ip++) {
   1a160:	4634      	mov	r4, r6
   1a162:	f7ff ba3e 	b.w	195e2 <mp_execute_bytecode+0x1d6>
                            obj = mp_obj_new_exception_msg(&mp_type_RuntimeError, "no active exception to reraise");
   1a166:	491f      	ldr	r1, [pc, #124]	; (1a1e4 <mp_execute_bytecode+0xdd8>)
   1a168:	481f      	ldr	r0, [pc, #124]	; (1a1e8 <mp_execute_bytecode+0xddc>)
   1a16a:	f7f5 f943 	bl	f3f4 <mp_obj_new_exception_msg>
   1a16e:	4681      	mov	r9, r0
                            RAISE(obj);
   1a170:	f7e6 f892 	bl	298 <nlr_pop>
   1a174:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
   1a178:	f7ff b981 	b.w	1947e <mp_execute_bytecode+0x72>
                        *code_state->sp = mp_obj_exception_get_value(MP_OBJ_FROM_PTR(nlr.ret_val));
   1a17c:	9809      	ldr	r0, [sp, #36]	; 0x24
   1a17e:	f8d8 4008 	ldr.w	r4, [r8, #8]
   1a182:	f7f5 f89f 	bl	f2c4 <mp_obj_exception_get_value>
   1a186:	6020      	str	r0, [r4, #0]
                        code_state->ip++; // yield from is over, move to next instruction
   1a188:	f8d8 3004 	ldr.w	r3, [r8, #4]
   1a18c:	3301      	adds	r3, #1
   1a18e:	f8c8 3004 	str.w	r3, [r8, #4]
                        goto outer_dispatch_loop; // continue with dispatch loop
   1a192:	f7ff b958 	b.w	19446 <mp_execute_bytecode+0x3a>
                        mp_int_t cause = MP_OBJ_SMALL_INT_VALUE(POP());
   1a196:	3d04      	subs	r5, #4
   1a198:	e4f4      	b.n	19b84 <mp_execute_bytecode+0x778>
                    } else if (ip[-1] < MP_BC_UNARY_OP_MULTI + MP_UNARY_OP_NUM_BYTECODE) {
   1a19a:	28d3      	cmp	r0, #211	; 0xd3
   1a19c:	d944      	bls.n	1a228 <mp_execute_bytecode+0xe1c>
                    } else if (ip[-1] < MP_BC_BINARY_OP_MULTI + MP_BINARY_OP_NUM_BYTECODE) {
   1a19e:	28f7      	cmp	r0, #247	; 0xf7
   1a1a0:	d873      	bhi.n	1a28a <mp_execute_bytecode+0xe7e>
                        SET_TOP(mp_binary_op(ip[-1] - MP_BC_BINARY_OP_MULTI, lhs, rhs));
   1a1a2:	682a      	ldr	r2, [r5, #0]
   1a1a4:	f855 1c04 	ldr.w	r1, [r5, #-4]
   1a1a8:	38d7      	subs	r0, #215	; 0xd7
   1a1aa:	f7f1 fb69 	bl	b880 <mp_binary_op>
                        mp_obj_t rhs = POP();
   1a1ae:	1f2b      	subs	r3, r5, #4
                        SET_TOP(mp_binary_op(ip[-1] - MP_BC_BINARY_OP_MULTI, lhs, rhs));
   1a1b0:	f845 0c04 	str.w	r0, [r5, #-4]
                switch (*ip++) {
   1a1b4:	4634      	mov	r4, r6
                        mp_obj_t rhs = POP();
   1a1b6:	461d      	mov	r5, r3
                        DISPATCH();
   1a1b8:	f7ff ba13 	b.w	195e2 <mp_execute_bytecode+0x1d6>
                fastn[0] = MP_OBJ_FROM_PTR(nlr.ret_val); // must put exception here because sp is invalid
   1a1bc:	9b01      	ldr	r3, [sp, #4]
   1a1be:	eb08 0883 	add.w	r8, r8, r3, lsl #2
   1a1c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1a1c4:	f8c8 3014 	str.w	r3, [r8, #20]
                return MP_VM_RETURN_EXCEPTION;
   1a1c8:	2002      	movs	r0, #2
   1a1ca:	f7ff bae5 	b.w	19798 <mp_execute_bytecode+0x38c>
   1a1ce:	bf00      	nop
   1a1d0:	00022910 	.word	0x00022910
   1a1d4:	00022888 	.word	0x00022888
   1a1d8:	000228ec 	.word	0x000228ec
   1a1dc:	000212b4 	.word	0x000212b4
   1a1e0:	20000a2c 	.word	0x20000a2c
   1a1e4:	00022984 	.word	0x00022984
   1a1e8:	000203f4 	.word	0x000203f4
                            mp_obj_t obj = mp_obj_new_exception_msg(&mp_type_NameError, "local variable referenced before assignment");
   1a1ec:	4943      	ldr	r1, [pc, #268]	; (1a2fc <mp_execute_bytecode+0xef0>)
   1a1ee:	4844      	ldr	r0, [pc, #272]	; (1a300 <mp_execute_bytecode+0xef4>)
   1a1f0:	f7f5 f900 	bl	f3f4 <mp_obj_new_exception_msg>
   1a1f4:	4681      	mov	r9, r0
                            RAISE(obj);
   1a1f6:	f7e6 f84f 	bl	298 <nlr_pop>
   1a1fa:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
   1a1fe:	f7ff b93e 	b.w	1947e <mp_execute_bytecode+0x72>
                        sp -= 2;
   1a202:	f1a5 0308 	sub.w	r3, r5, #8
                        sp[1] = mp_const_none;
   1a206:	f8c5 9004 	str.w	r9, [r5, #4]
                        sp[2] = mp_const_none;
   1a20a:	f8c5 9008 	str.w	r9, [r5, #8]
                        mp_call_method_n_kw(3, 0, sp);
   1a20e:	461a      	mov	r2, r3
   1a210:	2100      	movs	r1, #0
   1a212:	2003      	movs	r0, #3
   1a214:	9302      	str	r3, [sp, #8]
   1a216:	f7f1 fde7 	bl	bde8 <mp_call_method_n_kw>
                        sp -= 2;
   1a21a:	9b02      	ldr	r3, [sp, #8]
                        SET_TOP(mp_const_none);
   1a21c:	f845 9c08 	str.w	r9, [r5, #-8]
                switch (*ip++) {
   1a220:	4634      	mov	r4, r6
                        sp -= 2;
   1a222:	461d      	mov	r5, r3
   1a224:	f7ff b9dd 	b.w	195e2 <mp_execute_bytecode+0x1d6>
                        SET_TOP(mp_unary_op(ip[-1] - MP_BC_UNARY_OP_MULTI, TOP()));
   1a228:	38d0      	subs	r0, #208	; 0xd0
   1a22a:	6829      	ldr	r1, [r5, #0]
   1a22c:	f7f1 fa42 	bl	b6b4 <mp_unary_op>
                switch (*ip++) {
   1a230:	4634      	mov	r4, r6
                        SET_TOP(mp_unary_op(ip[-1] - MP_BC_UNARY_OP_MULTI, TOP()));
   1a232:	6028      	str	r0, [r5, #0]
                        DISPATCH();
   1a234:	f7ff b9d5 	b.w	195e2 <mp_execute_bytecode+0x1d6>
                assert(exc_sp >= exc_stack);
   1a238:	4b32      	ldr	r3, [pc, #200]	; (1a304 <mp_execute_bytecode+0xef8>)
   1a23a:	4a33      	ldr	r2, [pc, #204]	; (1a308 <mp_execute_bytecode+0xefc>)
   1a23c:	4833      	ldr	r0, [pc, #204]	; (1a30c <mp_execute_bytecode+0xf00>)
   1a23e:	f240 519a 	movw	r1, #1434	; 0x59a
   1a242:	f000 ffbb 	bl	1b1bc <__assert_func>
   1a246:	4610      	mov	r0, r2
                        assert(mp_obj_is_exception_instance(TOP()));
   1a248:	f7f5 f9fa 	bl	f640 <mp_obj_is_exception_instance>
   1a24c:	b360      	cbz	r0, 1a2a8 <mp_execute_bytecode+0xe9c>
                        RAISE(TOP());
   1a24e:	f7e6 f823 	bl	298 <nlr_pop>
   1a252:	f8d5 9000 	ldr.w	r9, [r5]
   1a256:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
   1a25a:	f7ff b910 	b.w	1947e <mp_execute_bytecode+0x72>
                            RAISE(ret_value);
   1a25e:	f7e6 f81b 	bl	298 <nlr_pop>
   1a262:	f8dd 901c 	ldr.w	r9, [sp, #28]
   1a266:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
   1a26a:	f7ff b908 	b.w	1947e <mp_execute_bytecode+0x72>
                        assert(exc_sp >= exc_stack);
   1a26e:	4b25      	ldr	r3, [pc, #148]	; (1a304 <mp_execute_bytecode+0xef8>)
   1a270:	4a25      	ldr	r2, [pc, #148]	; (1a308 <mp_execute_bytecode+0xefc>)
   1a272:	4826      	ldr	r0, [pc, #152]	; (1a30c <mp_execute_bytecode+0xf00>)
   1a274:	f44f 7124 	mov.w	r1, #656	; 0x290
   1a278:	f000 ffa0 	bl	1b1bc <__assert_func>
                    assert(exc_sp >= exc_stack);
   1a27c:	4b21      	ldr	r3, [pc, #132]	; (1a304 <mp_execute_bytecode+0xef8>)
   1a27e:	4a22      	ldr	r2, [pc, #136]	; (1a308 <mp_execute_bytecode+0xefc>)
   1a280:	4822      	ldr	r0, [pc, #136]	; (1a30c <mp_execute_bytecode+0xf00>)
   1a282:	f240 3105 	movw	r1, #773	; 0x305
   1a286:	f000 ff99 	bl	1b1bc <__assert_func>
                    mp_obj_t obj = mp_obj_new_exception_msg(&mp_type_NotImplementedError, "byte code not implemented");
   1a28a:	4921      	ldr	r1, [pc, #132]	; (1a310 <mp_execute_bytecode+0xf04>)
   1a28c:	4821      	ldr	r0, [pc, #132]	; (1a314 <mp_execute_bytecode+0xf08>)
   1a28e:	f7f5 f8b1 	bl	f3f4 <mp_obj_new_exception_msg>
   1a292:	4604      	mov	r4, r0
                    nlr_pop();
   1a294:	f7e6 f800 	bl	298 <nlr_pop>
                    fastn[0] = obj;
   1a298:	9b01      	ldr	r3, [sp, #4]
   1a29a:	eb08 0883 	add.w	r8, r8, r3, lsl #2
                    return MP_VM_RETURN_EXCEPTION;
   1a29e:	2002      	movs	r0, #2
                    fastn[0] = obj;
   1a2a0:	f8c8 4014 	str.w	r4, [r8, #20]
                    return MP_VM_RETURN_EXCEPTION;
   1a2a4:	f7ff ba78 	b.w	19798 <mp_execute_bytecode+0x38c>
                        assert(mp_obj_is_exception_instance(TOP()));
   1a2a8:	4b1b      	ldr	r3, [pc, #108]	; (1a318 <mp_execute_bytecode+0xf0c>)
   1a2aa:	4a17      	ldr	r2, [pc, #92]	; (1a308 <mp_execute_bytecode+0xefc>)
   1a2ac:	4817      	ldr	r0, [pc, #92]	; (1a30c <mp_execute_bytecode+0xf00>)
   1a2ae:	f44f 7133 	mov.w	r1, #716	; 0x2cc
   1a2b2:	f000 ff83 	bl	1b1bc <__assert_func>
                        assert(ret_kind == MP_VM_RETURN_EXCEPTION);
   1a2b6:	4b19      	ldr	r3, [pc, #100]	; (1a31c <mp_execute_bytecode+0xf10>)
   1a2b8:	4a13      	ldr	r2, [pc, #76]	; (1a308 <mp_execute_bytecode+0xefc>)
   1a2ba:	4814      	ldr	r0, [pc, #80]	; (1a30c <mp_execute_bytecode+0xf00>)
   1a2bc:	f240 41ae 	movw	r1, #1198	; 0x4ae
   1a2c0:	f000 ff7c 	bl	1b1bc <__assert_func>
                        assert(mp_obj_is_exception_instance(TOP()));
   1a2c4:	4b14      	ldr	r3, [pc, #80]	; (1a318 <mp_execute_bytecode+0xf0c>)
   1a2c6:	4a10      	ldr	r2, [pc, #64]	; (1a308 <mp_execute_bytecode+0xefc>)
   1a2c8:	4810      	ldr	r0, [pc, #64]	; (1a30c <mp_execute_bytecode+0xf00>)
   1a2ca:	f240 216e 	movw	r1, #622	; 0x26e
   1a2ce:	f000 ff75 	bl	1b1bc <__assert_func>
                            assert(exc_sp >= exc_stack);
   1a2d2:	4b0c      	ldr	r3, [pc, #48]	; (1a304 <mp_execute_bytecode+0xef8>)
   1a2d4:	4a0c      	ldr	r2, [pc, #48]	; (1a308 <mp_execute_bytecode+0xefc>)
   1a2d6:	480d      	ldr	r0, [pc, #52]	; (1a30c <mp_execute_bytecode+0xf00>)
   1a2d8:	f44f 711f 	mov.w	r1, #636	; 0x27c
   1a2dc:	f000 ff6e 	bl	1b1bc <__assert_func>
                    assert(exc_sp >= exc_stack);
   1a2e0:	4b08      	ldr	r3, [pc, #32]	; (1a304 <mp_execute_bytecode+0xef8>)
   1a2e2:	4a09      	ldr	r2, [pc, #36]	; (1a308 <mp_execute_bytecode+0xefc>)
   1a2e4:	4809      	ldr	r0, [pc, #36]	; (1a30c <mp_execute_bytecode+0xf00>)
   1a2e6:	f240 21ff 	movw	r1, #767	; 0x2ff
   1a2ea:	f000 ff67 	bl	1b1bc <__assert_func>
                    assert(exc_sp == exc_stack - 1);
   1a2ee:	4b0c      	ldr	r3, [pc, #48]	; (1a320 <mp_execute_bytecode+0xf14>)
   1a2f0:	4a05      	ldr	r2, [pc, #20]	; (1a308 <mp_execute_bytecode+0xefc>)
   1a2f2:	4806      	ldr	r0, [pc, #24]	; (1a30c <mp_execute_bytecode+0xf00>)
   1a2f4:	f240 414e 	movw	r1, #1102	; 0x44e
   1a2f8:	f000 ff60 	bl	1b1bc <__assert_func>
   1a2fc:	0002289c 	.word	0x0002289c
   1a300:	0002037c 	.word	0x0002037c
   1a304:	000228fc 	.word	0x000228fc
   1a308:	00022888 	.word	0x00022888
   1a30c:	000228ec 	.word	0x000228ec
   1a310:	00022968 	.word	0x00022968
   1a314:	00020430 	.word	0x00020430
   1a318:	000228c8 	.word	0x000228c8
   1a31c:	00022944 	.word	0x00022944
   1a320:	0002292c 	.word	0x0002292c

0001a324 <mp_decode_uint>:
#else // don't print debugging info
#define DEBUG_PRINT (0)
#define DEBUG_printf(...) (void)0
#endif

mp_uint_t mp_decode_uint(const byte **ptr) {
   1a324:	b480      	push	{r7}
   1a326:	b087      	sub	sp, #28
   1a328:	af00      	add	r7, sp, #0
   1a32a:	6078      	str	r0, [r7, #4]
    mp_uint_t unum = 0;
   1a32c:	2300      	movs	r3, #0
   1a32e:	617b      	str	r3, [r7, #20]
    byte val;
    const byte *p = *ptr;
   1a330:	687b      	ldr	r3, [r7, #4]
   1a332:	681b      	ldr	r3, [r3, #0]
   1a334:	613b      	str	r3, [r7, #16]
    do {
        val = *p++;
   1a336:	693b      	ldr	r3, [r7, #16]
   1a338:	1c5a      	adds	r2, r3, #1
   1a33a:	613a      	str	r2, [r7, #16]
   1a33c:	781b      	ldrb	r3, [r3, #0]
   1a33e:	73fb      	strb	r3, [r7, #15]
        unum = (unum << 7) | (val & 0x7f);
   1a340:	697b      	ldr	r3, [r7, #20]
   1a342:	01da      	lsls	r2, r3, #7
   1a344:	7bfb      	ldrb	r3, [r7, #15]
   1a346:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1a34a:	4313      	orrs	r3, r2
   1a34c:	617b      	str	r3, [r7, #20]
    } while ((val & 0x80) != 0);
   1a34e:	f997 300f 	ldrsb.w	r3, [r7, #15]
   1a352:	2b00      	cmp	r3, #0
   1a354:	dbef      	blt.n	1a336 <mp_decode_uint+0x12>
    *ptr = p;
   1a356:	687b      	ldr	r3, [r7, #4]
   1a358:	693a      	ldr	r2, [r7, #16]
   1a35a:	601a      	str	r2, [r3, #0]
    return unum;
   1a35c:	697b      	ldr	r3, [r7, #20]
}
   1a35e:	4618      	mov	r0, r3
   1a360:	371c      	adds	r7, #28
   1a362:	46bd      	mov	sp, r7
   1a364:	f85d 7b04 	ldr.w	r7, [sp], #4
   1a368:	4770      	bx	lr

0001a36a <mp_decode_uint_value>:
// the caller doesn't need to increase the ptr argument.  If ptr is a local variable
// and the caller uses mp_decode_uint(&ptr) instead of this function, then the compiler
// must allocate a slot on the stack for ptr, and this slot cannot be reused for
// anything else in the function because the pointer may have been stored in a global
// and reused later in the function.
mp_uint_t mp_decode_uint_value(const byte *ptr) {
   1a36a:	b580      	push	{r7, lr}
   1a36c:	b082      	sub	sp, #8
   1a36e:	af00      	add	r7, sp, #0
   1a370:	6078      	str	r0, [r7, #4]
    return mp_decode_uint(&ptr);
   1a372:	1d3b      	adds	r3, r7, #4
   1a374:	4618      	mov	r0, r3
   1a376:	f7ff ffd5 	bl	1a324 <mp_decode_uint>
   1a37a:	4603      	mov	r3, r0
}
   1a37c:	4618      	mov	r0, r3
   1a37e:	3708      	adds	r7, #8
   1a380:	46bd      	mov	sp, r7
   1a382:	bd80      	pop	{r7, pc}

0001a384 <mp_decode_uint_skip>:

// This function is used to help reduce stack usage at the caller, for the case when
// the caller doesn't need the actual value and just wants to skip over it.
const byte *mp_decode_uint_skip(const byte *ptr) {
   1a384:	b480      	push	{r7}
   1a386:	b083      	sub	sp, #12
   1a388:	af00      	add	r7, sp, #0
   1a38a:	6078      	str	r0, [r7, #4]
    while ((*ptr++) & 0x80) {
   1a38c:	bf00      	nop
   1a38e:	687b      	ldr	r3, [r7, #4]
   1a390:	1c5a      	adds	r2, r3, #1
   1a392:	607a      	str	r2, [r7, #4]
   1a394:	781b      	ldrb	r3, [r3, #0]
   1a396:	b25b      	sxtb	r3, r3
   1a398:	2b00      	cmp	r3, #0
   1a39a:	dbf8      	blt.n	1a38e <mp_decode_uint_skip+0xa>
    }
    return ptr;
   1a39c:	687b      	ldr	r3, [r7, #4]
}
   1a39e:	4618      	mov	r0, r3
   1a3a0:	370c      	adds	r7, #12
   1a3a2:	46bd      	mov	sp, r7
   1a3a4:	f85d 7b04 	ldr.w	r7, [sp], #4
   1a3a8:	4770      	bx	lr

0001a3aa <fun_pos_args_mismatch>:

STATIC NORETURN void fun_pos_args_mismatch(mp_obj_fun_bc_t *f, size_t expected, size_t given) {
   1a3aa:	b580      	push	{r7, lr}
   1a3ac:	b084      	sub	sp, #16
   1a3ae:	af00      	add	r7, sp, #0
   1a3b0:	60f8      	str	r0, [r7, #12]
   1a3b2:	60b9      	str	r1, [r7, #8]
   1a3b4:	607a      	str	r2, [r7, #4]
#if MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE
    // generic message, used also for other argument issues
    (void)f;
    (void)expected;
    (void)given;
    mp_arg_error_terse_mismatch();
   1a3b6:	f7f2 fed5 	bl	d164 <mp_arg_error_terse_mismatch>

0001a3ba <mp_setup_code_state>:
// On entry code_state should be allocated somewhere (stack/heap) and
// contain the following valid entries:
//    - code_state->fun_bc should contain a pointer to the function object
//    - code_state->ip should contain the offset in bytes from the pointer
//      code_state->fun_bc->bytecode to the entry n_state (0 for bytecode, non-zero for native)
void mp_setup_code_state(mp_code_state_t *code_state, size_t n_args, size_t n_kw, const mp_obj_t *args) {
   1a3ba:	b590      	push	{r4, r7, lr}
   1a3bc:	b09b      	sub	sp, #108	; 0x6c
   1a3be:	af00      	add	r7, sp, #0
   1a3c0:	60f8      	str	r0, [r7, #12]
   1a3c2:	60b9      	str	r1, [r7, #8]
   1a3c4:	607a      	str	r2, [r7, #4]
   1a3c6:	603b      	str	r3, [r7, #0]
    // This function is pretty complicated.  It's main aim is to be efficient in speed and RAM
    // usage for the common case of positional only args.

    // get the function object that we want to set up (could be bytecode or native code)
    mp_obj_fun_bc_t *self = code_state->fun_bc;
   1a3c8:	68fb      	ldr	r3, [r7, #12]
   1a3ca:	681b      	ldr	r3, [r3, #0]
   1a3cc:	637b      	str	r3, [r7, #52]	; 0x34

    // ip comes in as an offset into bytecode, so turn it into a true pointer
    code_state->ip = self->bytecode + (size_t)code_state->ip;
   1a3ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1a3d0:	689b      	ldr	r3, [r3, #8]
   1a3d2:	68fa      	ldr	r2, [r7, #12]
   1a3d4:	6852      	ldr	r2, [r2, #4]
   1a3d6:	441a      	add	r2, r3
   1a3d8:	68fb      	ldr	r3, [r7, #12]
   1a3da:	605a      	str	r2, [r3, #4]
    #if MICROPY_STACKLESS
    code_state->prev = NULL;
    #endif

    // get params
    size_t n_state = mp_decode_uint(&code_state->ip);
   1a3dc:	68fb      	ldr	r3, [r7, #12]
   1a3de:	3304      	adds	r3, #4
   1a3e0:	4618      	mov	r0, r3
   1a3e2:	f7ff ff9f 	bl	1a324 <mp_decode_uint>
   1a3e6:	6338      	str	r0, [r7, #48]	; 0x30
    code_state->ip = mp_decode_uint_skip(code_state->ip); // skip n_exc_stack
   1a3e8:	68fb      	ldr	r3, [r7, #12]
   1a3ea:	685b      	ldr	r3, [r3, #4]
   1a3ec:	4618      	mov	r0, r3
   1a3ee:	f7ff ffc9 	bl	1a384 <mp_decode_uint_skip>
   1a3f2:	4602      	mov	r2, r0
   1a3f4:	68fb      	ldr	r3, [r7, #12]
   1a3f6:	605a      	str	r2, [r3, #4]
    size_t scope_flags = *code_state->ip++;
   1a3f8:	68fb      	ldr	r3, [r7, #12]
   1a3fa:	685b      	ldr	r3, [r3, #4]
   1a3fc:	1c59      	adds	r1, r3, #1
   1a3fe:	68fa      	ldr	r2, [r7, #12]
   1a400:	6051      	str	r1, [r2, #4]
   1a402:	781b      	ldrb	r3, [r3, #0]
   1a404:	62fb      	str	r3, [r7, #44]	; 0x2c
    size_t n_pos_args = *code_state->ip++;
   1a406:	68fb      	ldr	r3, [r7, #12]
   1a408:	685b      	ldr	r3, [r3, #4]
   1a40a:	1c59      	adds	r1, r3, #1
   1a40c:	68fa      	ldr	r2, [r7, #12]
   1a40e:	6051      	str	r1, [r2, #4]
   1a410:	781b      	ldrb	r3, [r3, #0]
   1a412:	62bb      	str	r3, [r7, #40]	; 0x28
    size_t n_kwonly_args = *code_state->ip++;
   1a414:	68fb      	ldr	r3, [r7, #12]
   1a416:	685b      	ldr	r3, [r3, #4]
   1a418:	1c59      	adds	r1, r3, #1
   1a41a:	68fa      	ldr	r2, [r7, #12]
   1a41c:	6051      	str	r1, [r2, #4]
   1a41e:	781b      	ldrb	r3, [r3, #0]
   1a420:	627b      	str	r3, [r7, #36]	; 0x24
    size_t n_def_pos_args = *code_state->ip++;
   1a422:	68fb      	ldr	r3, [r7, #12]
   1a424:	685b      	ldr	r3, [r3, #4]
   1a426:	1c59      	adds	r1, r3, #1
   1a428:	68fa      	ldr	r2, [r7, #12]
   1a42a:	6051      	str	r1, [r2, #4]
   1a42c:	781b      	ldrb	r3, [r3, #0]
   1a42e:	623b      	str	r3, [r7, #32]

    code_state->sp = &code_state->state[0] - 1;
   1a430:	68fb      	ldr	r3, [r7, #12]
   1a432:	3314      	adds	r3, #20
   1a434:	1f1a      	subs	r2, r3, #4
   1a436:	68fb      	ldr	r3, [r7, #12]
   1a438:	609a      	str	r2, [r3, #8]
    code_state->exc_sp = (mp_exc_stack_t*)(code_state->state + n_state) - 1;
   1a43a:	68fb      	ldr	r3, [r7, #12]
   1a43c:	f103 0214 	add.w	r2, r3, #20
   1a440:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1a442:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1a446:	3b03      	subs	r3, #3
   1a448:	009b      	lsls	r3, r3, #2
   1a44a:	441a      	add	r2, r3
   1a44c:	68fb      	ldr	r3, [r7, #12]
   1a44e:	60da      	str	r2, [r3, #12]

    // zero out the local stack to begin with
    memset(code_state->state, 0, n_state * sizeof(*code_state->state));
   1a450:	68fb      	ldr	r3, [r7, #12]
   1a452:	f103 0014 	add.w	r0, r3, #20
   1a456:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1a458:	009b      	lsls	r3, r3, #2
   1a45a:	461a      	mov	r2, r3
   1a45c:	2100      	movs	r1, #0
   1a45e:	f001 fb4b 	bl	1baf8 <memset>

    const mp_obj_t *kwargs = args + n_args;
   1a462:	68bb      	ldr	r3, [r7, #8]
   1a464:	009b      	lsls	r3, r3, #2
   1a466:	683a      	ldr	r2, [r7, #0]
   1a468:	4413      	add	r3, r2
   1a46a:	61fb      	str	r3, [r7, #28]

    // var_pos_kw_args points to the stack where the var-args tuple, and var-kw dict, should go (if they are needed)
    mp_obj_t *var_pos_kw_args = &code_state->state[n_state - 1 - n_pos_args - n_kwonly_args];
   1a46c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   1a46e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1a470:	1ad2      	subs	r2, r2, r3
   1a472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1a474:	1ad3      	subs	r3, r2, r3
   1a476:	3b01      	subs	r3, #1
   1a478:	3304      	adds	r3, #4
   1a47a:	009b      	lsls	r3, r3, #2
   1a47c:	68fa      	ldr	r2, [r7, #12]
   1a47e:	4413      	add	r3, r2
   1a480:	3304      	adds	r3, #4
   1a482:	667b      	str	r3, [r7, #100]	; 0x64

    // check positional arguments

    if (n_args > n_pos_args) {
   1a484:	68ba      	ldr	r2, [r7, #8]
   1a486:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1a488:	429a      	cmp	r2, r3
   1a48a:	d91b      	bls.n	1a4c4 <mp_setup_code_state+0x10a>
        // given more than enough arguments
        if ((scope_flags & MP_SCOPE_FLAG_VARARGS) == 0) {
   1a48c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1a48e:	f003 0301 	and.w	r3, r3, #1
   1a492:	2b00      	cmp	r3, #0
   1a494:	d104      	bne.n	1a4a0 <mp_setup_code_state+0xe6>
            fun_pos_args_mismatch(self, n_pos_args, n_args);
   1a496:	68ba      	ldr	r2, [r7, #8]
   1a498:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   1a49a:	6b78      	ldr	r0, [r7, #52]	; 0x34
   1a49c:	f7ff ff85 	bl	1a3aa <fun_pos_args_mismatch>
        }
        // put extra arguments in varargs tuple
        *var_pos_kw_args-- = mp_obj_new_tuple(n_args - n_pos_args, args + n_pos_args);
   1a4a0:	6e7c      	ldr	r4, [r7, #100]	; 0x64
   1a4a2:	1f23      	subs	r3, r4, #4
   1a4a4:	667b      	str	r3, [r7, #100]	; 0x64
   1a4a6:	68ba      	ldr	r2, [r7, #8]
   1a4a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1a4aa:	1ad0      	subs	r0, r2, r3
   1a4ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1a4ae:	009b      	lsls	r3, r3, #2
   1a4b0:	683a      	ldr	r2, [r7, #0]
   1a4b2:	4413      	add	r3, r2
   1a4b4:	4619      	mov	r1, r3
   1a4b6:	f7fb fb73 	bl	15ba0 <mp_obj_new_tuple>
   1a4ba:	4603      	mov	r3, r0
   1a4bc:	6023      	str	r3, [r4, #0]
        n_args = n_pos_args;
   1a4be:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1a4c0:	60bb      	str	r3, [r7, #8]
   1a4c2:	e03c      	b.n	1a53e <mp_setup_code_state+0x184>
    } else {
        if ((scope_flags & MP_SCOPE_FLAG_VARARGS) != 0) {
   1a4c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1a4c6:	f003 0301 	and.w	r3, r3, #1
   1a4ca:	2b00      	cmp	r3, #0
   1a4cc:	d004      	beq.n	1a4d8 <mp_setup_code_state+0x11e>
            DEBUG_printf("passing empty tuple as *args\n");
            *var_pos_kw_args-- = mp_const_empty_tuple;
   1a4ce:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   1a4d0:	1f1a      	subs	r2, r3, #4
   1a4d2:	667a      	str	r2, [r7, #100]	; 0x64
   1a4d4:	4aa5      	ldr	r2, [pc, #660]	; (1a76c <mp_setup_code_state+0x3b2>)
   1a4d6:	601a      	str	r2, [r3, #0]
        }
        // Apply processing and check below only if we don't have kwargs,
        // otherwise, kw handling code below has own extensive checks.
        if (n_kw == 0 && (scope_flags & MP_SCOPE_FLAG_DEFKWARGS) == 0) {
   1a4d8:	687b      	ldr	r3, [r7, #4]
   1a4da:	2b00      	cmp	r3, #0
   1a4dc:	d12f      	bne.n	1a53e <mp_setup_code_state+0x184>
   1a4de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1a4e0:	f003 0308 	and.w	r3, r3, #8
   1a4e4:	2b00      	cmp	r3, #0
   1a4e6:	d12a      	bne.n	1a53e <mp_setup_code_state+0x184>
            if (n_args >= (size_t)(n_pos_args - n_def_pos_args)) {
   1a4e8:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1a4ea:	6a3b      	ldr	r3, [r7, #32]
   1a4ec:	1ad2      	subs	r2, r2, r3
   1a4ee:	68bb      	ldr	r3, [r7, #8]
   1a4f0:	429a      	cmp	r2, r3
   1a4f2:	d81c      	bhi.n	1a52e <mp_setup_code_state+0x174>
                // given enough arguments, but may need to use some default arguments
                for (size_t i = n_args; i < n_pos_args; i++) {
   1a4f4:	68bb      	ldr	r3, [r7, #8]
   1a4f6:	663b      	str	r3, [r7, #96]	; 0x60
   1a4f8:	e014      	b.n	1a524 <mp_setup_code_state+0x16a>
                    code_state->state[n_state - 1 - i] = self->extra_args[i - (n_pos_args - n_def_pos_args)];
   1a4fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   1a4fc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   1a4fe:	1ad3      	subs	r3, r2, r3
   1a500:	3b01      	subs	r3, #1
   1a502:	6a39      	ldr	r1, [r7, #32]
   1a504:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1a506:	1a89      	subs	r1, r1, r2
   1a508:	6e3a      	ldr	r2, [r7, #96]	; 0x60
   1a50a:	4411      	add	r1, r2
   1a50c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   1a50e:	3104      	adds	r1, #4
   1a510:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
   1a514:	68f9      	ldr	r1, [r7, #12]
   1a516:	3304      	adds	r3, #4
   1a518:	009b      	lsls	r3, r3, #2
   1a51a:	440b      	add	r3, r1
   1a51c:	605a      	str	r2, [r3, #4]
                for (size_t i = n_args; i < n_pos_args; i++) {
   1a51e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   1a520:	3301      	adds	r3, #1
   1a522:	663b      	str	r3, [r7, #96]	; 0x60
   1a524:	6e3a      	ldr	r2, [r7, #96]	; 0x60
   1a526:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1a528:	429a      	cmp	r2, r3
   1a52a:	d3e6      	bcc.n	1a4fa <mp_setup_code_state+0x140>
   1a52c:	e007      	b.n	1a53e <mp_setup_code_state+0x184>
                }
            } else {
                fun_pos_args_mismatch(self, n_pos_args - n_def_pos_args, n_args);
   1a52e:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1a530:	6a3b      	ldr	r3, [r7, #32]
   1a532:	1ad3      	subs	r3, r2, r3
   1a534:	68ba      	ldr	r2, [r7, #8]
   1a536:	4619      	mov	r1, r3
   1a538:	6b78      	ldr	r0, [r7, #52]	; 0x34
   1a53a:	f7ff ff36 	bl	1a3aa <fun_pos_args_mismatch>
            }
        }
    }

    // copy positional args into state
    for (size_t i = 0; i < n_args; i++) {
   1a53e:	2300      	movs	r3, #0
   1a540:	65fb      	str	r3, [r7, #92]	; 0x5c
   1a542:	e010      	b.n	1a566 <mp_setup_code_state+0x1ac>
        code_state->state[n_state - 1 - i] = args[i];
   1a544:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   1a546:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
   1a548:	1ad3      	subs	r3, r2, r3
   1a54a:	3b01      	subs	r3, #1
   1a54c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
   1a54e:	0092      	lsls	r2, r2, #2
   1a550:	6839      	ldr	r1, [r7, #0]
   1a552:	440a      	add	r2, r1
   1a554:	6812      	ldr	r2, [r2, #0]
   1a556:	68f9      	ldr	r1, [r7, #12]
   1a558:	3304      	adds	r3, #4
   1a55a:	009b      	lsls	r3, r3, #2
   1a55c:	440b      	add	r3, r1
   1a55e:	605a      	str	r2, [r3, #4]
    for (size_t i = 0; i < n_args; i++) {
   1a560:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
   1a562:	3301      	adds	r3, #1
   1a564:	65fb      	str	r3, [r7, #92]	; 0x5c
   1a566:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
   1a568:	68bb      	ldr	r3, [r7, #8]
   1a56a:	429a      	cmp	r2, r3
   1a56c:	d3ea      	bcc.n	1a544 <mp_setup_code_state+0x18a>
    }

    // check keyword arguments

    if (n_kw != 0 || (scope_flags & MP_SCOPE_FLAG_DEFKWARGS) != 0) {
   1a56e:	687b      	ldr	r3, [r7, #4]
   1a570:	2b00      	cmp	r3, #0
   1a572:	d105      	bne.n	1a580 <mp_setup_code_state+0x1c6>
   1a574:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1a576:	f003 0308 	and.w	r3, r3, #8
   1a57a:	2b00      	cmp	r3, #0
   1a57c:	f000 8119 	beq.w	1a7b2 <mp_setup_code_state+0x3f8>
        DEBUG_printf("Initial args: ");
        dump_args(code_state->state + n_state - n_pos_args - n_kwonly_args, n_pos_args + n_kwonly_args);

        mp_obj_t dict = MP_OBJ_NULL;
   1a580:	2300      	movs	r3, #0
   1a582:	65bb      	str	r3, [r7, #88]	; 0x58
        if ((scope_flags & MP_SCOPE_FLAG_VARKEYWORDS) != 0) {
   1a584:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1a586:	f003 0302 	and.w	r3, r3, #2
   1a58a:	2b00      	cmp	r3, #0
   1a58c:	d006      	beq.n	1a59c <mp_setup_code_state+0x1e2>
            dict = mp_obj_new_dict(n_kw); // TODO: better go conservative with 0?
   1a58e:	6878      	ldr	r0, [r7, #4]
   1a590:	f7f4 fd42 	bl	f018 <mp_obj_new_dict>
   1a594:	65b8      	str	r0, [r7, #88]	; 0x58
            *var_pos_kw_args = dict;
   1a596:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   1a598:	6dba      	ldr	r2, [r7, #88]	; 0x58
   1a59a:	601a      	str	r2, [r3, #0]
        }

        // get pointer to arg_names array
        const mp_obj_t *arg_names = (const mp_obj_t*)self->const_table;
   1a59c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1a59e:	68db      	ldr	r3, [r3, #12]
   1a5a0:	61bb      	str	r3, [r7, #24]

        for (size_t i = 0; i < n_kw; i++) {
   1a5a2:	2300      	movs	r3, #0
   1a5a4:	657b      	str	r3, [r7, #84]	; 0x54
   1a5a6:	e059      	b.n	1a65c <mp_setup_code_state+0x2a2>
            // the keys in kwargs are expected to be qstr objects
            mp_obj_t wanted_arg_name = kwargs[2 * i];
   1a5a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   1a5aa:	00db      	lsls	r3, r3, #3
   1a5ac:	69fa      	ldr	r2, [r7, #28]
   1a5ae:	4413      	add	r3, r2
   1a5b0:	681b      	ldr	r3, [r3, #0]
   1a5b2:	617b      	str	r3, [r7, #20]
            for (size_t j = 0; j < n_pos_args + n_kwonly_args; j++) {
   1a5b4:	2300      	movs	r3, #0
   1a5b6:	653b      	str	r3, [r7, #80]	; 0x50
   1a5b8:	e030      	b.n	1a61c <mp_setup_code_state+0x262>
                if (wanted_arg_name == arg_names[j]) {
   1a5ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   1a5bc:	009b      	lsls	r3, r3, #2
   1a5be:	69ba      	ldr	r2, [r7, #24]
   1a5c0:	4413      	add	r3, r2
   1a5c2:	681a      	ldr	r2, [r3, #0]
   1a5c4:	697b      	ldr	r3, [r7, #20]
   1a5c6:	429a      	cmp	r2, r3
   1a5c8:	d125      	bne.n	1a616 <mp_setup_code_state+0x25c>
                    if (code_state->state[n_state - 1 - j] != MP_OBJ_NULL) {
   1a5ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   1a5cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   1a5ce:	1ad3      	subs	r3, r2, r3
   1a5d0:	3b01      	subs	r3, #1
   1a5d2:	68fa      	ldr	r2, [r7, #12]
   1a5d4:	3304      	adds	r3, #4
   1a5d6:	009b      	lsls	r3, r3, #2
   1a5d8:	4413      	add	r3, r2
   1a5da:	685b      	ldr	r3, [r3, #4]
   1a5dc:	2b00      	cmp	r3, #0
   1a5de:	d00a      	beq.n	1a5f6 <mp_setup_code_state+0x23c>
                        nlr_raise(mp_obj_new_exception_msg_varg(&mp_type_TypeError,
   1a5e0:	697b      	ldr	r3, [r7, #20]
   1a5e2:	089b      	lsrs	r3, r3, #2
   1a5e4:	461a      	mov	r2, r3
   1a5e6:	4962      	ldr	r1, [pc, #392]	; (1a770 <mp_setup_code_state+0x3b6>)
   1a5e8:	4862      	ldr	r0, [pc, #392]	; (1a774 <mp_setup_code_state+0x3ba>)
   1a5ea:	f7f4 ff63 	bl	f4b4 <mp_obj_new_exception_msg_varg>
   1a5ee:	4603      	mov	r3, r0
   1a5f0:	4618      	mov	r0, r3
   1a5f2:	f7e5 fe75 	bl	2e0 <nlr_jump>
                            "function got multiple values for argument '%q'", MP_OBJ_QSTR_VALUE(wanted_arg_name)));
                    }
                    code_state->state[n_state - 1 - j] = kwargs[2 * i + 1];
   1a5f6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   1a5f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   1a5fa:	1ad3      	subs	r3, r2, r3
   1a5fc:	3b01      	subs	r3, #1
   1a5fe:	6d7a      	ldr	r2, [r7, #84]	; 0x54
   1a600:	00d2      	lsls	r2, r2, #3
   1a602:	3204      	adds	r2, #4
   1a604:	69f9      	ldr	r1, [r7, #28]
   1a606:	440a      	add	r2, r1
   1a608:	6812      	ldr	r2, [r2, #0]
   1a60a:	68f9      	ldr	r1, [r7, #12]
   1a60c:	3304      	adds	r3, #4
   1a60e:	009b      	lsls	r3, r3, #2
   1a610:	440b      	add	r3, r1
   1a612:	605a      	str	r2, [r3, #4]
                    goto continue2;
   1a614:	e01f      	b.n	1a656 <mp_setup_code_state+0x29c>
            for (size_t j = 0; j < n_pos_args + n_kwonly_args; j++) {
   1a616:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   1a618:	3301      	adds	r3, #1
   1a61a:	653b      	str	r3, [r7, #80]	; 0x50
   1a61c:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1a61e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1a620:	441a      	add	r2, r3
   1a622:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   1a624:	429a      	cmp	r2, r3
   1a626:	d8c8      	bhi.n	1a5ba <mp_setup_code_state+0x200>
                }
            }
            // Didn't find name match with positional args
            if ((scope_flags & MP_SCOPE_FLAG_VARKEYWORDS) == 0) {
   1a628:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1a62a:	f003 0302 	and.w	r3, r3, #2
   1a62e:	2b00      	cmp	r3, #0
   1a630:	d102      	bne.n	1a638 <mp_setup_code_state+0x27e>
                if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
                    mp_raise_TypeError("unexpected keyword argument");
   1a632:	4851      	ldr	r0, [pc, #324]	; (1a778 <mp_setup_code_state+0x3be>)
   1a634:	f7f2 fc76 	bl	cf24 <mp_raise_TypeError>
                } else {
                    nlr_raise(mp_obj_new_exception_msg_varg(&mp_type_TypeError,
                        "unexpected keyword argument '%q'", MP_OBJ_QSTR_VALUE(wanted_arg_name)));
                }
            }
            mp_obj_dict_store(dict, kwargs[2 * i], kwargs[2 * i + 1]);
   1a638:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   1a63a:	00db      	lsls	r3, r3, #3
   1a63c:	69fa      	ldr	r2, [r7, #28]
   1a63e:	4413      	add	r3, r2
   1a640:	6819      	ldr	r1, [r3, #0]
   1a642:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   1a644:	00db      	lsls	r3, r3, #3
   1a646:	3304      	adds	r3, #4
   1a648:	69fa      	ldr	r2, [r7, #28]
   1a64a:	4413      	add	r3, r2
   1a64c:	681b      	ldr	r3, [r3, #0]
   1a64e:	461a      	mov	r2, r3
   1a650:	6db8      	ldr	r0, [r7, #88]	; 0x58
   1a652:	f7f4 fd02 	bl	f05a <mp_obj_dict_store>
        for (size_t i = 0; i < n_kw; i++) {
   1a656:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   1a658:	3301      	adds	r3, #1
   1a65a:	657b      	str	r3, [r7, #84]	; 0x54
   1a65c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
   1a65e:	687b      	ldr	r3, [r7, #4]
   1a660:	429a      	cmp	r2, r3
   1a662:	d3a1      	bcc.n	1a5a8 <mp_setup_code_state+0x1ee>

        DEBUG_printf("Args with kws flattened: ");
        dump_args(code_state->state + n_state - n_pos_args - n_kwonly_args, n_pos_args + n_kwonly_args);

        // fill in defaults for positional args
        mp_obj_t *d = &code_state->state[n_state - n_pos_args];
   1a664:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   1a666:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1a668:	1ad3      	subs	r3, r2, r3
   1a66a:	3304      	adds	r3, #4
   1a66c:	009b      	lsls	r3, r3, #2
   1a66e:	68fa      	ldr	r2, [r7, #12]
   1a670:	4413      	add	r3, r2
   1a672:	3304      	adds	r3, #4
   1a674:	64fb      	str	r3, [r7, #76]	; 0x4c
        mp_obj_t *s = &self->extra_args[n_def_pos_args - 1];
   1a676:	6a3b      	ldr	r3, [r7, #32]
   1a678:	3b01      	subs	r3, #1
   1a67a:	3304      	adds	r3, #4
   1a67c:	009b      	lsls	r3, r3, #2
   1a67e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   1a680:	4413      	add	r3, r2
   1a682:	64bb      	str	r3, [r7, #72]	; 0x48
        for (size_t i = n_def_pos_args; i > 0; i--, d++, s--) {
   1a684:	6a3b      	ldr	r3, [r7, #32]
   1a686:	647b      	str	r3, [r7, #68]	; 0x44
   1a688:	e010      	b.n	1a6ac <mp_setup_code_state+0x2f2>
            if (*d == MP_OBJ_NULL) {
   1a68a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   1a68c:	681b      	ldr	r3, [r3, #0]
   1a68e:	2b00      	cmp	r3, #0
   1a690:	d103      	bne.n	1a69a <mp_setup_code_state+0x2e0>
                *d = *s;
   1a692:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   1a694:	681a      	ldr	r2, [r3, #0]
   1a696:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   1a698:	601a      	str	r2, [r3, #0]
        for (size_t i = n_def_pos_args; i > 0; i--, d++, s--) {
   1a69a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   1a69c:	3b01      	subs	r3, #1
   1a69e:	647b      	str	r3, [r7, #68]	; 0x44
   1a6a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   1a6a2:	3304      	adds	r3, #4
   1a6a4:	64fb      	str	r3, [r7, #76]	; 0x4c
   1a6a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   1a6a8:	3b04      	subs	r3, #4
   1a6aa:	64bb      	str	r3, [r7, #72]	; 0x48
   1a6ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   1a6ae:	2b00      	cmp	r3, #0
   1a6b0:	d1eb      	bne.n	1a68a <mp_setup_code_state+0x2d0>

        DEBUG_printf("Args after filling default positional: ");
        dump_args(code_state->state + n_state - n_pos_args - n_kwonly_args, n_pos_args + n_kwonly_args);

        // Check that all mandatory positional args are specified
        while (d < &code_state->state[n_state]) {
   1a6b2:	e018      	b.n	1a6e6 <mp_setup_code_state+0x32c>
            if (*d++ == MP_OBJ_NULL) {
   1a6b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   1a6b6:	1d1a      	adds	r2, r3, #4
   1a6b8:	64fa      	str	r2, [r7, #76]	; 0x4c
   1a6ba:	681b      	ldr	r3, [r3, #0]
   1a6bc:	2b00      	cmp	r3, #0
   1a6be:	d112      	bne.n	1a6e6 <mp_setup_code_state+0x32c>
                nlr_raise(mp_obj_new_exception_msg_varg(&mp_type_TypeError,
   1a6c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1a6c2:	3304      	adds	r3, #4
   1a6c4:	009b      	lsls	r3, r3, #2
   1a6c6:	68fa      	ldr	r2, [r7, #12]
   1a6c8:	4413      	add	r3, r2
   1a6ca:	3304      	adds	r3, #4
   1a6cc:	461a      	mov	r2, r3
   1a6ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   1a6d0:	1ad3      	subs	r3, r2, r3
   1a6d2:	109b      	asrs	r3, r3, #2
   1a6d4:	461a      	mov	r2, r3
   1a6d6:	4929      	ldr	r1, [pc, #164]	; (1a77c <mp_setup_code_state+0x3c2>)
   1a6d8:	4826      	ldr	r0, [pc, #152]	; (1a774 <mp_setup_code_state+0x3ba>)
   1a6da:	f7f4 feeb 	bl	f4b4 <mp_obj_new_exception_msg_varg>
   1a6de:	4603      	mov	r3, r0
   1a6e0:	4618      	mov	r0, r3
   1a6e2:	f7e5 fdfd 	bl	2e0 <nlr_jump>
        while (d < &code_state->state[n_state]) {
   1a6e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1a6e8:	3304      	adds	r3, #4
   1a6ea:	009b      	lsls	r3, r3, #2
   1a6ec:	68fa      	ldr	r2, [r7, #12]
   1a6ee:	4413      	add	r3, r2
   1a6f0:	1d1a      	adds	r2, r3, #4
   1a6f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   1a6f4:	429a      	cmp	r2, r3
   1a6f6:	d8dd      	bhi.n	1a6b4 <mp_setup_code_state+0x2fa>
            }
        }

        // Check that all mandatory keyword args are specified
        // Fill in default kw args if we have them
        for (size_t i = 0; i < n_kwonly_args; i++) {
   1a6f8:	2300      	movs	r3, #0
   1a6fa:	643b      	str	r3, [r7, #64]	; 0x40
   1a6fc:	e054      	b.n	1a7a8 <mp_setup_code_state+0x3ee>
            if (code_state->state[n_state - 1 - n_pos_args - i] == MP_OBJ_NULL) {
   1a6fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   1a700:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1a702:	1ad2      	subs	r2, r2, r3
   1a704:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1a706:	1ad3      	subs	r3, r2, r3
   1a708:	3b01      	subs	r3, #1
   1a70a:	68fa      	ldr	r2, [r7, #12]
   1a70c:	3304      	adds	r3, #4
   1a70e:	009b      	lsls	r3, r3, #2
   1a710:	4413      	add	r3, r2
   1a712:	685b      	ldr	r3, [r3, #4]
   1a714:	2b00      	cmp	r3, #0
   1a716:	d144      	bne.n	1a7a2 <mp_setup_code_state+0x3e8>
                mp_map_elem_t *elem = NULL;
   1a718:	2300      	movs	r3, #0
   1a71a:	63fb      	str	r3, [r7, #60]	; 0x3c
                if ((scope_flags & MP_SCOPE_FLAG_DEFKWARGS) != 0) {
   1a71c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1a71e:	f003 0308 	and.w	r3, r3, #8
   1a722:	2b00      	cmp	r3, #0
   1a724:	d011      	beq.n	1a74a <mp_setup_code_state+0x390>
                    elem = mp_map_lookup(&((mp_obj_dict_t*)MP_OBJ_TO_PTR(self->extra_args[n_def_pos_args]))->map, arg_names[n_pos_args + i], MP_MAP_LOOKUP);
   1a726:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1a728:	6a3a      	ldr	r2, [r7, #32]
   1a72a:	3204      	adds	r2, #4
   1a72c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   1a730:	1d18      	adds	r0, r3, #4
   1a732:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1a734:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1a736:	4413      	add	r3, r2
   1a738:	009b      	lsls	r3, r3, #2
   1a73a:	69ba      	ldr	r2, [r7, #24]
   1a73c:	4413      	add	r3, r2
   1a73e:	681b      	ldr	r3, [r3, #0]
   1a740:	2200      	movs	r2, #0
   1a742:	4619      	mov	r1, r3
   1a744:	f7f2 fe5a 	bl	d3fc <mp_map_lookup>
   1a748:	63f8      	str	r0, [r7, #60]	; 0x3c
                }
                if (elem != NULL) {
   1a74a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1a74c:	2b00      	cmp	r3, #0
   1a74e:	d017      	beq.n	1a780 <mp_setup_code_state+0x3c6>
                    code_state->state[n_state - 1 - n_pos_args - i] = elem->value;
   1a750:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   1a752:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1a754:	1ad2      	subs	r2, r2, r3
   1a756:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1a758:	1ad3      	subs	r3, r2, r3
   1a75a:	3b01      	subs	r3, #1
   1a75c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   1a75e:	6852      	ldr	r2, [r2, #4]
   1a760:	68f9      	ldr	r1, [r7, #12]
   1a762:	3304      	adds	r3, #4
   1a764:	009b      	lsls	r3, r3, #2
   1a766:	440b      	add	r3, r1
   1a768:	605a      	str	r2, [r3, #4]
   1a76a:	e01a      	b.n	1a7a2 <mp_setup_code_state+0x3e8>
   1a76c:	00021c24 	.word	0x00021c24
   1a770:	000229a4 	.word	0x000229a4
   1a774:	000204e4 	.word	0x000204e4
   1a778:	000229d4 	.word	0x000229d4
   1a77c:	000229f0 	.word	0x000229f0
                } else {
                    nlr_raise(mp_obj_new_exception_msg_varg(&mp_type_TypeError,
   1a780:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1a782:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1a784:	4413      	add	r3, r2
   1a786:	009b      	lsls	r3, r3, #2
   1a788:	69ba      	ldr	r2, [r7, #24]
   1a78a:	4413      	add	r3, r2
   1a78c:	681b      	ldr	r3, [r3, #0]
   1a78e:	089b      	lsrs	r3, r3, #2
   1a790:	461a      	mov	r2, r3
   1a792:	4928      	ldr	r1, [pc, #160]	; (1a834 <mp_setup_code_state+0x47a>)
   1a794:	4828      	ldr	r0, [pc, #160]	; (1a838 <mp_setup_code_state+0x47e>)
   1a796:	f7f4 fe8d 	bl	f4b4 <mp_obj_new_exception_msg_varg>
   1a79a:	4603      	mov	r3, r0
   1a79c:	4618      	mov	r0, r3
   1a79e:	f7e5 fd9f 	bl	2e0 <nlr_jump>
        for (size_t i = 0; i < n_kwonly_args; i++) {
   1a7a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1a7a4:	3301      	adds	r3, #1
   1a7a6:	643b      	str	r3, [r7, #64]	; 0x40
   1a7a8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   1a7aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1a7ac:	429a      	cmp	r2, r3
   1a7ae:	d3a6      	bcc.n	1a6fe <mp_setup_code_state+0x344>
    if (n_kw != 0 || (scope_flags & MP_SCOPE_FLAG_DEFKWARGS) != 0) {
   1a7b0:	e010      	b.n	1a7d4 <mp_setup_code_state+0x41a>
            }
        }

    } else {
        // no keyword arguments given
        if (n_kwonly_args != 0) {
   1a7b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1a7b4:	2b00      	cmp	r3, #0
   1a7b6:	d002      	beq.n	1a7be <mp_setup_code_state+0x404>
            mp_raise_TypeError("function missing keyword-only argument");
   1a7b8:	4820      	ldr	r0, [pc, #128]	; (1a83c <mp_setup_code_state+0x482>)
   1a7ba:	f7f2 fbb3 	bl	cf24 <mp_raise_TypeError>
        }
        if ((scope_flags & MP_SCOPE_FLAG_VARKEYWORDS) != 0) {
   1a7be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1a7c0:	f003 0302 	and.w	r3, r3, #2
   1a7c4:	2b00      	cmp	r3, #0
   1a7c6:	d005      	beq.n	1a7d4 <mp_setup_code_state+0x41a>
            *var_pos_kw_args = mp_obj_new_dict(0);
   1a7c8:	2000      	movs	r0, #0
   1a7ca:	f7f4 fc25 	bl	f018 <mp_obj_new_dict>
   1a7ce:	4602      	mov	r2, r0
   1a7d0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   1a7d2:	601a      	str	r2, [r3, #0]
        }
    }

    // get the ip and skip argument names
    const byte *ip = code_state->ip;
   1a7d4:	68fb      	ldr	r3, [r7, #12]
   1a7d6:	685b      	ldr	r3, [r3, #4]
   1a7d8:	63bb      	str	r3, [r7, #56]	; 0x38

    // jump over code info (source file and line-number mapping)
    ip += mp_decode_uint_value(ip);
   1a7da:	6bb8      	ldr	r0, [r7, #56]	; 0x38
   1a7dc:	f7ff fdc5 	bl	1a36a <mp_decode_uint_value>
   1a7e0:	4602      	mov	r2, r0
   1a7e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1a7e4:	4413      	add	r3, r2
   1a7e6:	63bb      	str	r3, [r7, #56]	; 0x38

    // bytecode prelude: initialise closed over variables
    size_t local_num;
    while ((local_num = *ip++) != 255) {
   1a7e8:	e015      	b.n	1a816 <mp_setup_code_state+0x45c>
        code_state->state[n_state - 1 - local_num] =
   1a7ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   1a7ec:	693b      	ldr	r3, [r7, #16]
   1a7ee:	1ad3      	subs	r3, r2, r3
   1a7f0:	1e5c      	subs	r4, r3, #1
            mp_obj_new_cell(code_state->state[n_state - 1 - local_num]);
   1a7f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   1a7f4:	693b      	ldr	r3, [r7, #16]
   1a7f6:	1ad3      	subs	r3, r2, r3
   1a7f8:	3b01      	subs	r3, #1
   1a7fa:	68fa      	ldr	r2, [r7, #12]
   1a7fc:	3304      	adds	r3, #4
   1a7fe:	009b      	lsls	r3, r3, #2
   1a800:	4413      	add	r3, r2
   1a802:	685b      	ldr	r3, [r3, #4]
   1a804:	4618      	mov	r0, r3
   1a806:	f7f3 fcff 	bl	e208 <mp_obj_new_cell>
   1a80a:	4601      	mov	r1, r0
        code_state->state[n_state - 1 - local_num] =
   1a80c:	68fa      	ldr	r2, [r7, #12]
   1a80e:	1d23      	adds	r3, r4, #4
   1a810:	009b      	lsls	r3, r3, #2
   1a812:	4413      	add	r3, r2
   1a814:	6059      	str	r1, [r3, #4]
    while ((local_num = *ip++) != 255) {
   1a816:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1a818:	1c5a      	adds	r2, r3, #1
   1a81a:	63ba      	str	r2, [r7, #56]	; 0x38
   1a81c:	781b      	ldrb	r3, [r3, #0]
   1a81e:	613b      	str	r3, [r7, #16]
   1a820:	693b      	ldr	r3, [r7, #16]
   1a822:	2bff      	cmp	r3, #255	; 0xff
   1a824:	d1e1      	bne.n	1a7ea <mp_setup_code_state+0x430>
    }

    // now that we skipped over the prelude, set the ip for the VM
    code_state->ip = ip;
   1a826:	68fb      	ldr	r3, [r7, #12]
   1a828:	6bba      	ldr	r2, [r7, #56]	; 0x38
   1a82a:	605a      	str	r2, [r3, #4]

    DEBUG_printf("Calling: n_pos_args=%d, n_kwonly_args=%d\n", n_pos_args, n_kwonly_args);
    dump_args(code_state->state + n_state - n_pos_args - n_kwonly_args, n_pos_args + n_kwonly_args);
    dump_args(code_state->state, n_state);
}
   1a82c:	bf00      	nop
   1a82e:	376c      	adds	r7, #108	; 0x6c
   1a830:	46bd      	mov	sp, r7
   1a832:	bd90      	pop	{r4, r7, pc}
   1a834:	00022a24 	.word	0x00022a24
   1a838:	000204e4 	.word	0x000204e4
   1a83c:	00022a54 	.word	0x00022a54

0001a840 <str_startswith_word>:
#include "py/builtin.h"
#include "py/repl.h"

#if MICROPY_HELPER_REPL

STATIC bool str_startswith_word(const char *str, const char *head) {
   1a840:	b580      	push	{r7, lr}
   1a842:	b084      	sub	sp, #16
   1a844:	af00      	add	r7, sp, #0
   1a846:	6078      	str	r0, [r7, #4]
   1a848:	6039      	str	r1, [r7, #0]
    size_t i;
    for (i = 0; str[i] && head[i]; i++) {
   1a84a:	2300      	movs	r3, #0
   1a84c:	60fb      	str	r3, [r7, #12]
   1a84e:	e00e      	b.n	1a86e <str_startswith_word+0x2e>
        if (str[i] != head[i]) {
   1a850:	687a      	ldr	r2, [r7, #4]
   1a852:	68fb      	ldr	r3, [r7, #12]
   1a854:	4413      	add	r3, r2
   1a856:	781a      	ldrb	r2, [r3, #0]
   1a858:	6839      	ldr	r1, [r7, #0]
   1a85a:	68fb      	ldr	r3, [r7, #12]
   1a85c:	440b      	add	r3, r1
   1a85e:	781b      	ldrb	r3, [r3, #0]
   1a860:	429a      	cmp	r2, r3
   1a862:	d001      	beq.n	1a868 <str_startswith_word+0x28>
            return false;
   1a864:	2300      	movs	r3, #0
   1a866:	e02d      	b.n	1a8c4 <str_startswith_word+0x84>
    for (i = 0; str[i] && head[i]; i++) {
   1a868:	68fb      	ldr	r3, [r7, #12]
   1a86a:	3301      	adds	r3, #1
   1a86c:	60fb      	str	r3, [r7, #12]
   1a86e:	687a      	ldr	r2, [r7, #4]
   1a870:	68fb      	ldr	r3, [r7, #12]
   1a872:	4413      	add	r3, r2
   1a874:	781b      	ldrb	r3, [r3, #0]
   1a876:	2b00      	cmp	r3, #0
   1a878:	d005      	beq.n	1a886 <str_startswith_word+0x46>
   1a87a:	683a      	ldr	r2, [r7, #0]
   1a87c:	68fb      	ldr	r3, [r7, #12]
   1a87e:	4413      	add	r3, r2
   1a880:	781b      	ldrb	r3, [r3, #0]
   1a882:	2b00      	cmp	r3, #0
   1a884:	d1e4      	bne.n	1a850 <str_startswith_word+0x10>
        }
    }
    return head[i] == '\0' && (str[i] == '\0' || !unichar_isident(str[i]));
   1a886:	683a      	ldr	r2, [r7, #0]
   1a888:	68fb      	ldr	r3, [r7, #12]
   1a88a:	4413      	add	r3, r2
   1a88c:	781b      	ldrb	r3, [r3, #0]
   1a88e:	2b00      	cmp	r3, #0
   1a890:	d114      	bne.n	1a8bc <str_startswith_word+0x7c>
   1a892:	687a      	ldr	r2, [r7, #4]
   1a894:	68fb      	ldr	r3, [r7, #12]
   1a896:	4413      	add	r3, r2
   1a898:	781b      	ldrb	r3, [r3, #0]
   1a89a:	2b00      	cmp	r3, #0
   1a89c:	d00c      	beq.n	1a8b8 <str_startswith_word+0x78>
   1a89e:	687a      	ldr	r2, [r7, #4]
   1a8a0:	68fb      	ldr	r3, [r7, #12]
   1a8a2:	4413      	add	r3, r2
   1a8a4:	781b      	ldrb	r3, [r3, #0]
   1a8a6:	4618      	mov	r0, r3
   1a8a8:	f7e7 fdca 	bl	2440 <unichar_isident>
   1a8ac:	4603      	mov	r3, r0
   1a8ae:	f083 0301 	eor.w	r3, r3, #1
   1a8b2:	b2db      	uxtb	r3, r3
   1a8b4:	2b00      	cmp	r3, #0
   1a8b6:	d001      	beq.n	1a8bc <str_startswith_word+0x7c>
   1a8b8:	2301      	movs	r3, #1
   1a8ba:	e000      	b.n	1a8be <str_startswith_word+0x7e>
   1a8bc:	2300      	movs	r3, #0
   1a8be:	f003 0301 	and.w	r3, r3, #1
   1a8c2:	b2db      	uxtb	r3, r3
}
   1a8c4:	4618      	mov	r0, r3
   1a8c6:	3710      	adds	r7, #16
   1a8c8:	46bd      	mov	sp, r7
   1a8ca:	bd80      	pop	{r7, pc}

0001a8cc <mp_repl_continue_with_input>:

bool mp_repl_continue_with_input(const char *input) {
   1a8cc:	b580      	push	{r7, lr}
   1a8ce:	b088      	sub	sp, #32
   1a8d0:	af00      	add	r7, sp, #0
   1a8d2:	6078      	str	r0, [r7, #4]
    // check for blank input
    if (input[0] == '\0') {
   1a8d4:	687b      	ldr	r3, [r7, #4]
   1a8d6:	781b      	ldrb	r3, [r3, #0]
   1a8d8:	2b00      	cmp	r3, #0
   1a8da:	d101      	bne.n	1a8e0 <mp_repl_continue_with_input+0x14>
        return false;
   1a8dc:	2300      	movs	r3, #0
   1a8de:	e10c      	b.n	1aafa <mp_repl_continue_with_input+0x22e>
    }

    // check if input starts with a certain keyword
    bool starts_with_compound_keyword =
           input[0] == '@'
   1a8e0:	687b      	ldr	r3, [r7, #4]
   1a8e2:	781b      	ldrb	r3, [r3, #0]
        || str_startswith_word(input, "while")
        || str_startswith_word(input, "for")
        || str_startswith_word(input, "try")
        || str_startswith_word(input, "with")
        || str_startswith_word(input, "def")
        || str_startswith_word(input, "class")
   1a8e4:	2b40      	cmp	r3, #64	; 0x40
   1a8e6:	d030      	beq.n	1a94a <mp_repl_continue_with_input+0x7e>
        || str_startswith_word(input, "if")
   1a8e8:	4986      	ldr	r1, [pc, #536]	; (1ab04 <mp_repl_continue_with_input+0x238>)
   1a8ea:	6878      	ldr	r0, [r7, #4]
   1a8ec:	f7ff ffa8 	bl	1a840 <str_startswith_word>
   1a8f0:	4603      	mov	r3, r0
   1a8f2:	2b00      	cmp	r3, #0
   1a8f4:	d129      	bne.n	1a94a <mp_repl_continue_with_input+0x7e>
        || str_startswith_word(input, "while")
   1a8f6:	4984      	ldr	r1, [pc, #528]	; (1ab08 <mp_repl_continue_with_input+0x23c>)
   1a8f8:	6878      	ldr	r0, [r7, #4]
   1a8fa:	f7ff ffa1 	bl	1a840 <str_startswith_word>
   1a8fe:	4603      	mov	r3, r0
   1a900:	2b00      	cmp	r3, #0
   1a902:	d122      	bne.n	1a94a <mp_repl_continue_with_input+0x7e>
        || str_startswith_word(input, "for")
   1a904:	4981      	ldr	r1, [pc, #516]	; (1ab0c <mp_repl_continue_with_input+0x240>)
   1a906:	6878      	ldr	r0, [r7, #4]
   1a908:	f7ff ff9a 	bl	1a840 <str_startswith_word>
   1a90c:	4603      	mov	r3, r0
   1a90e:	2b00      	cmp	r3, #0
   1a910:	d11b      	bne.n	1a94a <mp_repl_continue_with_input+0x7e>
        || str_startswith_word(input, "try")
   1a912:	497f      	ldr	r1, [pc, #508]	; (1ab10 <mp_repl_continue_with_input+0x244>)
   1a914:	6878      	ldr	r0, [r7, #4]
   1a916:	f7ff ff93 	bl	1a840 <str_startswith_word>
   1a91a:	4603      	mov	r3, r0
   1a91c:	2b00      	cmp	r3, #0
   1a91e:	d114      	bne.n	1a94a <mp_repl_continue_with_input+0x7e>
        || str_startswith_word(input, "with")
   1a920:	497c      	ldr	r1, [pc, #496]	; (1ab14 <mp_repl_continue_with_input+0x248>)
   1a922:	6878      	ldr	r0, [r7, #4]
   1a924:	f7ff ff8c 	bl	1a840 <str_startswith_word>
   1a928:	4603      	mov	r3, r0
   1a92a:	2b00      	cmp	r3, #0
   1a92c:	d10d      	bne.n	1a94a <mp_repl_continue_with_input+0x7e>
        || str_startswith_word(input, "def")
   1a92e:	497a      	ldr	r1, [pc, #488]	; (1ab18 <mp_repl_continue_with_input+0x24c>)
   1a930:	6878      	ldr	r0, [r7, #4]
   1a932:	f7ff ff85 	bl	1a840 <str_startswith_word>
   1a936:	4603      	mov	r3, r0
   1a938:	2b00      	cmp	r3, #0
   1a93a:	d106      	bne.n	1a94a <mp_repl_continue_with_input+0x7e>
        || str_startswith_word(input, "class")
   1a93c:	4977      	ldr	r1, [pc, #476]	; (1ab1c <mp_repl_continue_with_input+0x250>)
   1a93e:	6878      	ldr	r0, [r7, #4]
   1a940:	f7ff ff7e 	bl	1a840 <str_startswith_word>
   1a944:	4603      	mov	r3, r0
   1a946:	2b00      	cmp	r3, #0
   1a948:	d001      	beq.n	1a94e <mp_repl_continue_with_input+0x82>
   1a94a:	2301      	movs	r3, #1
   1a94c:	e000      	b.n	1a950 <mp_repl_continue_with_input+0x84>
   1a94e:	2300      	movs	r3, #0
    bool starts_with_compound_keyword =
   1a950:	72fb      	strb	r3, [r7, #11]
   1a952:	7afb      	ldrb	r3, [r7, #11]
   1a954:	f003 0301 	and.w	r3, r3, #1
   1a958:	72fb      	strb	r3, [r7, #11]
    #define Q_NONE (0)
    #define Q_1_SINGLE (1)
    #define Q_1_DOUBLE (2)
    #define Q_3_SINGLE (3)
    #define Q_3_DOUBLE (4)
    int n_paren = 0;
   1a95a:	2300      	movs	r3, #0
   1a95c:	61fb      	str	r3, [r7, #28]
    int n_brack = 0;
   1a95e:	2300      	movs	r3, #0
   1a960:	61bb      	str	r3, [r7, #24]
    int n_brace = 0;
   1a962:	2300      	movs	r3, #0
   1a964:	617b      	str	r3, [r7, #20]
    int in_quote = Q_NONE;
   1a966:	2300      	movs	r3, #0
   1a968:	613b      	str	r3, [r7, #16]
    const char *i;
    for (i = input; *i; i++) {
   1a96a:	687b      	ldr	r3, [r7, #4]
   1a96c:	60fb      	str	r3, [r7, #12]
   1a96e:	e097      	b.n	1aaa0 <mp_repl_continue_with_input+0x1d4>
        if (*i == '\'') {
   1a970:	68fb      	ldr	r3, [r7, #12]
   1a972:	781b      	ldrb	r3, [r3, #0]
   1a974:	2b27      	cmp	r3, #39	; 0x27
   1a976:	d122      	bne.n	1a9be <mp_repl_continue_with_input+0xf2>
            if ((in_quote == Q_NONE || in_quote == Q_3_SINGLE) && i[1] == '\'' && i[2] == '\'') {
   1a978:	693b      	ldr	r3, [r7, #16]
   1a97a:	2b00      	cmp	r3, #0
   1a97c:	d002      	beq.n	1a984 <mp_repl_continue_with_input+0xb8>
   1a97e:	693b      	ldr	r3, [r7, #16]
   1a980:	2b03      	cmp	r3, #3
   1a982:	d111      	bne.n	1a9a8 <mp_repl_continue_with_input+0xdc>
   1a984:	68fb      	ldr	r3, [r7, #12]
   1a986:	3301      	adds	r3, #1
   1a988:	781b      	ldrb	r3, [r3, #0]
   1a98a:	2b27      	cmp	r3, #39	; 0x27
   1a98c:	d10c      	bne.n	1a9a8 <mp_repl_continue_with_input+0xdc>
   1a98e:	68fb      	ldr	r3, [r7, #12]
   1a990:	3302      	adds	r3, #2
   1a992:	781b      	ldrb	r3, [r3, #0]
   1a994:	2b27      	cmp	r3, #39	; 0x27
   1a996:	d107      	bne.n	1a9a8 <mp_repl_continue_with_input+0xdc>
                i += 2;
   1a998:	68fb      	ldr	r3, [r7, #12]
   1a99a:	3302      	adds	r3, #2
   1a99c:	60fb      	str	r3, [r7, #12]
                in_quote = Q_3_SINGLE - in_quote;
   1a99e:	693b      	ldr	r3, [r7, #16]
   1a9a0:	f1c3 0303 	rsb	r3, r3, #3
   1a9a4:	613b      	str	r3, [r7, #16]
   1a9a6:	e078      	b.n	1aa9a <mp_repl_continue_with_input+0x1ce>
            } else if (in_quote == Q_NONE || in_quote == Q_1_SINGLE) {
   1a9a8:	693b      	ldr	r3, [r7, #16]
   1a9aa:	2b00      	cmp	r3, #0
   1a9ac:	d002      	beq.n	1a9b4 <mp_repl_continue_with_input+0xe8>
   1a9ae:	693b      	ldr	r3, [r7, #16]
   1a9b0:	2b01      	cmp	r3, #1
   1a9b2:	d172      	bne.n	1aa9a <mp_repl_continue_with_input+0x1ce>
                in_quote = Q_1_SINGLE - in_quote;
   1a9b4:	693b      	ldr	r3, [r7, #16]
   1a9b6:	f1c3 0301 	rsb	r3, r3, #1
   1a9ba:	613b      	str	r3, [r7, #16]
   1a9bc:	e06d      	b.n	1aa9a <mp_repl_continue_with_input+0x1ce>
            }
        } else if (*i == '"') {
   1a9be:	68fb      	ldr	r3, [r7, #12]
   1a9c0:	781b      	ldrb	r3, [r3, #0]
   1a9c2:	2b22      	cmp	r3, #34	; 0x22
   1a9c4:	d122      	bne.n	1aa0c <mp_repl_continue_with_input+0x140>
            if ((in_quote == Q_NONE || in_quote == Q_3_DOUBLE) && i[1] == '"' && i[2] == '"') {
   1a9c6:	693b      	ldr	r3, [r7, #16]
   1a9c8:	2b00      	cmp	r3, #0
   1a9ca:	d002      	beq.n	1a9d2 <mp_repl_continue_with_input+0x106>
   1a9cc:	693b      	ldr	r3, [r7, #16]
   1a9ce:	2b04      	cmp	r3, #4
   1a9d0:	d111      	bne.n	1a9f6 <mp_repl_continue_with_input+0x12a>
   1a9d2:	68fb      	ldr	r3, [r7, #12]
   1a9d4:	3301      	adds	r3, #1
   1a9d6:	781b      	ldrb	r3, [r3, #0]
   1a9d8:	2b22      	cmp	r3, #34	; 0x22
   1a9da:	d10c      	bne.n	1a9f6 <mp_repl_continue_with_input+0x12a>
   1a9dc:	68fb      	ldr	r3, [r7, #12]
   1a9de:	3302      	adds	r3, #2
   1a9e0:	781b      	ldrb	r3, [r3, #0]
   1a9e2:	2b22      	cmp	r3, #34	; 0x22
   1a9e4:	d107      	bne.n	1a9f6 <mp_repl_continue_with_input+0x12a>
                i += 2;
   1a9e6:	68fb      	ldr	r3, [r7, #12]
   1a9e8:	3302      	adds	r3, #2
   1a9ea:	60fb      	str	r3, [r7, #12]
                in_quote = Q_3_DOUBLE - in_quote;
   1a9ec:	693b      	ldr	r3, [r7, #16]
   1a9ee:	f1c3 0304 	rsb	r3, r3, #4
   1a9f2:	613b      	str	r3, [r7, #16]
   1a9f4:	e051      	b.n	1aa9a <mp_repl_continue_with_input+0x1ce>
            } else if (in_quote == Q_NONE || in_quote == Q_1_DOUBLE) {
   1a9f6:	693b      	ldr	r3, [r7, #16]
   1a9f8:	2b00      	cmp	r3, #0
   1a9fa:	d002      	beq.n	1aa02 <mp_repl_continue_with_input+0x136>
   1a9fc:	693b      	ldr	r3, [r7, #16]
   1a9fe:	2b02      	cmp	r3, #2
   1aa00:	d14b      	bne.n	1aa9a <mp_repl_continue_with_input+0x1ce>
                in_quote = Q_1_DOUBLE - in_quote;
   1aa02:	693b      	ldr	r3, [r7, #16]
   1aa04:	f1c3 0302 	rsb	r3, r3, #2
   1aa08:	613b      	str	r3, [r7, #16]
   1aa0a:	e046      	b.n	1aa9a <mp_repl_continue_with_input+0x1ce>
            }
        } else if (*i == '\\' && (i[1] == '\'' || i[1] == '"' || i[1] == '\\')) {
   1aa0c:	68fb      	ldr	r3, [r7, #12]
   1aa0e:	781b      	ldrb	r3, [r3, #0]
   1aa10:	2b5c      	cmp	r3, #92	; 0x5c
   1aa12:	d115      	bne.n	1aa40 <mp_repl_continue_with_input+0x174>
   1aa14:	68fb      	ldr	r3, [r7, #12]
   1aa16:	3301      	adds	r3, #1
   1aa18:	781b      	ldrb	r3, [r3, #0]
   1aa1a:	2b27      	cmp	r3, #39	; 0x27
   1aa1c:	d009      	beq.n	1aa32 <mp_repl_continue_with_input+0x166>
   1aa1e:	68fb      	ldr	r3, [r7, #12]
   1aa20:	3301      	adds	r3, #1
   1aa22:	781b      	ldrb	r3, [r3, #0]
   1aa24:	2b22      	cmp	r3, #34	; 0x22
   1aa26:	d004      	beq.n	1aa32 <mp_repl_continue_with_input+0x166>
   1aa28:	68fb      	ldr	r3, [r7, #12]
   1aa2a:	3301      	adds	r3, #1
   1aa2c:	781b      	ldrb	r3, [r3, #0]
   1aa2e:	2b5c      	cmp	r3, #92	; 0x5c
   1aa30:	d106      	bne.n	1aa40 <mp_repl_continue_with_input+0x174>
            if (in_quote != Q_NONE) {
   1aa32:	693b      	ldr	r3, [r7, #16]
   1aa34:	2b00      	cmp	r3, #0
   1aa36:	d030      	beq.n	1aa9a <mp_repl_continue_with_input+0x1ce>
                i++;
   1aa38:	68fb      	ldr	r3, [r7, #12]
   1aa3a:	3301      	adds	r3, #1
   1aa3c:	60fb      	str	r3, [r7, #12]
            if (in_quote != Q_NONE) {
   1aa3e:	e02c      	b.n	1aa9a <mp_repl_continue_with_input+0x1ce>
            }
        } else if (in_quote == Q_NONE) {
   1aa40:	693b      	ldr	r3, [r7, #16]
   1aa42:	2b00      	cmp	r3, #0
   1aa44:	d129      	bne.n	1aa9a <mp_repl_continue_with_input+0x1ce>
            switch (*i) {
   1aa46:	68fb      	ldr	r3, [r7, #12]
   1aa48:	781b      	ldrb	r3, [r3, #0]
   1aa4a:	2b5b      	cmp	r3, #91	; 0x5b
   1aa4c:	d015      	beq.n	1aa7a <mp_repl_continue_with_input+0x1ae>
   1aa4e:	2b5b      	cmp	r3, #91	; 0x5b
   1aa50:	dc04      	bgt.n	1aa5c <mp_repl_continue_with_input+0x190>
   1aa52:	2b28      	cmp	r3, #40	; 0x28
   1aa54:	d009      	beq.n	1aa6a <mp_repl_continue_with_input+0x19e>
   1aa56:	2b29      	cmp	r3, #41	; 0x29
   1aa58:	d00b      	beq.n	1aa72 <mp_repl_continue_with_input+0x1a6>
                case ')': n_paren -= 1; break;
                case '[': n_brack += 1; break;
                case ']': n_brack -= 1; break;
                case '{': n_brace += 1; break;
                case '}': n_brace -= 1; break;
                default: break;
   1aa5a:	e01e      	b.n	1aa9a <mp_repl_continue_with_input+0x1ce>
            switch (*i) {
   1aa5c:	2b7b      	cmp	r3, #123	; 0x7b
   1aa5e:	d014      	beq.n	1aa8a <mp_repl_continue_with_input+0x1be>
   1aa60:	2b7d      	cmp	r3, #125	; 0x7d
   1aa62:	d016      	beq.n	1aa92 <mp_repl_continue_with_input+0x1c6>
   1aa64:	2b5d      	cmp	r3, #93	; 0x5d
   1aa66:	d00c      	beq.n	1aa82 <mp_repl_continue_with_input+0x1b6>
                default: break;
   1aa68:	e017      	b.n	1aa9a <mp_repl_continue_with_input+0x1ce>
                case '(': n_paren += 1; break;
   1aa6a:	69fb      	ldr	r3, [r7, #28]
   1aa6c:	3301      	adds	r3, #1
   1aa6e:	61fb      	str	r3, [r7, #28]
   1aa70:	e013      	b.n	1aa9a <mp_repl_continue_with_input+0x1ce>
                case ')': n_paren -= 1; break;
   1aa72:	69fb      	ldr	r3, [r7, #28]
   1aa74:	3b01      	subs	r3, #1
   1aa76:	61fb      	str	r3, [r7, #28]
   1aa78:	e00f      	b.n	1aa9a <mp_repl_continue_with_input+0x1ce>
                case '[': n_brack += 1; break;
   1aa7a:	69bb      	ldr	r3, [r7, #24]
   1aa7c:	3301      	adds	r3, #1
   1aa7e:	61bb      	str	r3, [r7, #24]
   1aa80:	e00b      	b.n	1aa9a <mp_repl_continue_with_input+0x1ce>
                case ']': n_brack -= 1; break;
   1aa82:	69bb      	ldr	r3, [r7, #24]
   1aa84:	3b01      	subs	r3, #1
   1aa86:	61bb      	str	r3, [r7, #24]
   1aa88:	e007      	b.n	1aa9a <mp_repl_continue_with_input+0x1ce>
                case '{': n_brace += 1; break;
   1aa8a:	697b      	ldr	r3, [r7, #20]
   1aa8c:	3301      	adds	r3, #1
   1aa8e:	617b      	str	r3, [r7, #20]
   1aa90:	e003      	b.n	1aa9a <mp_repl_continue_with_input+0x1ce>
                case '}': n_brace -= 1; break;
   1aa92:	697b      	ldr	r3, [r7, #20]
   1aa94:	3b01      	subs	r3, #1
   1aa96:	617b      	str	r3, [r7, #20]
   1aa98:	bf00      	nop
    for (i = input; *i; i++) {
   1aa9a:	68fb      	ldr	r3, [r7, #12]
   1aa9c:	3301      	adds	r3, #1
   1aa9e:	60fb      	str	r3, [r7, #12]
   1aaa0:	68fb      	ldr	r3, [r7, #12]
   1aaa2:	781b      	ldrb	r3, [r3, #0]
   1aaa4:	2b00      	cmp	r3, #0
   1aaa6:	f47f af63 	bne.w	1a970 <mp_repl_continue_with_input+0xa4>
            }
        }
    }

    // continue if unmatched 3-quotes
    if (in_quote == Q_3_SINGLE || in_quote == Q_3_DOUBLE) {
   1aaaa:	693b      	ldr	r3, [r7, #16]
   1aaac:	2b03      	cmp	r3, #3
   1aaae:	d002      	beq.n	1aab6 <mp_repl_continue_with_input+0x1ea>
   1aab0:	693b      	ldr	r3, [r7, #16]
   1aab2:	2b04      	cmp	r3, #4
   1aab4:	d101      	bne.n	1aaba <mp_repl_continue_with_input+0x1ee>
        return true;
   1aab6:	2301      	movs	r3, #1
   1aab8:	e01f      	b.n	1aafa <mp_repl_continue_with_input+0x22e>
    }

    // continue if unmatched brackets, but only if not in a 1-quote
    if ((n_paren > 0 || n_brack > 0 || n_brace > 0) && in_quote == Q_NONE) {
   1aaba:	69fb      	ldr	r3, [r7, #28]
   1aabc:	2b00      	cmp	r3, #0
   1aabe:	dc05      	bgt.n	1aacc <mp_repl_continue_with_input+0x200>
   1aac0:	69bb      	ldr	r3, [r7, #24]
   1aac2:	2b00      	cmp	r3, #0
   1aac4:	dc02      	bgt.n	1aacc <mp_repl_continue_with_input+0x200>
   1aac6:	697b      	ldr	r3, [r7, #20]
   1aac8:	2b00      	cmp	r3, #0
   1aaca:	dd04      	ble.n	1aad6 <mp_repl_continue_with_input+0x20a>
   1aacc:	693b      	ldr	r3, [r7, #16]
   1aace:	2b00      	cmp	r3, #0
   1aad0:	d101      	bne.n	1aad6 <mp_repl_continue_with_input+0x20a>
        return true;
   1aad2:	2301      	movs	r3, #1
   1aad4:	e011      	b.n	1aafa <mp_repl_continue_with_input+0x22e>
    }

    // continue if last character was backslash (for line continuation)
    if (i[-1] == '\\') {
   1aad6:	68fb      	ldr	r3, [r7, #12]
   1aad8:	3b01      	subs	r3, #1
   1aada:	781b      	ldrb	r3, [r3, #0]
   1aadc:	2b5c      	cmp	r3, #92	; 0x5c
   1aade:	d101      	bne.n	1aae4 <mp_repl_continue_with_input+0x218>
        return true;
   1aae0:	2301      	movs	r3, #1
   1aae2:	e00a      	b.n	1aafa <mp_repl_continue_with_input+0x22e>
    }

    // continue if compound keyword and last line was not empty
    if (starts_with_compound_keyword && i[-1] != '\n') {
   1aae4:	7afb      	ldrb	r3, [r7, #11]
   1aae6:	2b00      	cmp	r3, #0
   1aae8:	d006      	beq.n	1aaf8 <mp_repl_continue_with_input+0x22c>
   1aaea:	68fb      	ldr	r3, [r7, #12]
   1aaec:	3b01      	subs	r3, #1
   1aaee:	781b      	ldrb	r3, [r3, #0]
   1aaf0:	2b0a      	cmp	r3, #10
   1aaf2:	d001      	beq.n	1aaf8 <mp_repl_continue_with_input+0x22c>
        return true;
   1aaf4:	2301      	movs	r3, #1
   1aaf6:	e000      	b.n	1aafa <mp_repl_continue_with_input+0x22e>
    }

    // otherwise, don't continue
    return false;
   1aaf8:	2300      	movs	r3, #0
}
   1aafa:	4618      	mov	r0, r3
   1aafc:	3720      	adds	r7, #32
   1aafe:	46bd      	mov	sp, r7
   1ab00:	bd80      	pop	{r7, pc}
   1ab02:	bf00      	nop
   1ab04:	00022a7c 	.word	0x00022a7c
   1ab08:	00022a80 	.word	0x00022a80
   1ab0c:	00022a88 	.word	0x00022a88
   1ab10:	00022a8c 	.word	0x00022a8c
   1ab14:	00022a90 	.word	0x00022a90
   1ab18:	00022a98 	.word	0x00022a98
   1ab1c:	00022a9c 	.word	0x00022a9c

0001ab20 <mp_repl_autocomplete>:

size_t mp_repl_autocomplete(const char *str, size_t len, const mp_print_t *print, const char **compl_str) {
   1ab20:	b580      	push	{r7, lr}
   1ab22:	b09c      	sub	sp, #112	; 0x70
   1ab24:	af00      	add	r7, sp, #0
   1ab26:	60f8      	str	r0, [r7, #12]
   1ab28:	60b9      	str	r1, [r7, #8]
   1ab2a:	607a      	str	r2, [r7, #4]
   1ab2c:	603b      	str	r3, [r7, #0]
    // scan backwards to find start of "a.b.c" chain
    const char *org_str = str;
   1ab2e:	68fb      	ldr	r3, [r7, #12]
   1ab30:	63fb      	str	r3, [r7, #60]	; 0x3c
    const char *top = str + len;
   1ab32:	68fa      	ldr	r2, [r7, #12]
   1ab34:	68bb      	ldr	r3, [r7, #8]
   1ab36:	4413      	add	r3, r2
   1ab38:	63bb      	str	r3, [r7, #56]	; 0x38
    for (const char *s = top; --s >= str;) {
   1ab3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1ab3c:	66fb      	str	r3, [r7, #108]	; 0x6c
   1ab3e:	e023      	b.n	1ab88 <mp_repl_autocomplete+0x68>
        if (!(unichar_isalpha(*s) || unichar_isdigit(*s) || *s == '_' || *s == '.')) {
   1ab40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   1ab42:	781b      	ldrb	r3, [r3, #0]
   1ab44:	4618      	mov	r0, r3
   1ab46:	f7e7 fc21 	bl	238c <unichar_isalpha>
   1ab4a:	4603      	mov	r3, r0
   1ab4c:	f083 0301 	eor.w	r3, r3, #1
   1ab50:	b2db      	uxtb	r3, r3
   1ab52:	2b00      	cmp	r3, #0
   1ab54:	d018      	beq.n	1ab88 <mp_repl_autocomplete+0x68>
   1ab56:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   1ab58:	781b      	ldrb	r3, [r3, #0]
   1ab5a:	4618      	mov	r0, r3
   1ab5c:	f7e7 fc34 	bl	23c8 <unichar_isdigit>
   1ab60:	4603      	mov	r3, r0
   1ab62:	f083 0301 	eor.w	r3, r3, #1
   1ab66:	b2db      	uxtb	r3, r3
   1ab68:	2b00      	cmp	r3, #0
   1ab6a:	d00d      	beq.n	1ab88 <mp_repl_autocomplete+0x68>
   1ab6c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   1ab6e:	781b      	ldrb	r3, [r3, #0]
   1ab70:	2b5f      	cmp	r3, #95	; 0x5f
   1ab72:	d009      	beq.n	1ab88 <mp_repl_autocomplete+0x68>
   1ab74:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   1ab76:	781b      	ldrb	r3, [r3, #0]
   1ab78:	2b2e      	cmp	r3, #46	; 0x2e
   1ab7a:	d005      	beq.n	1ab88 <mp_repl_autocomplete+0x68>
            ++s;
   1ab7c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   1ab7e:	3301      	adds	r3, #1
   1ab80:	66fb      	str	r3, [r7, #108]	; 0x6c
            str = s;
   1ab82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   1ab84:	60fb      	str	r3, [r7, #12]
            break;
   1ab86:	e006      	b.n	1ab96 <mp_repl_autocomplete+0x76>
    for (const char *s = top; --s >= str;) {
   1ab88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   1ab8a:	3b01      	subs	r3, #1
   1ab8c:	66fb      	str	r3, [r7, #108]	; 0x6c
   1ab8e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
   1ab90:	68fb      	ldr	r3, [r7, #12]
   1ab92:	429a      	cmp	r2, r3
   1ab94:	d2d4      	bcs.n	1ab40 <mp_repl_autocomplete+0x20>
        }
    }

    size_t nqstr = QSTR_TOTAL();
   1ab96:	4b95      	ldr	r3, [pc, #596]	; (1adec <mp_repl_autocomplete+0x2cc>)
   1ab98:	691b      	ldr	r3, [r3, #16]
   1ab9a:	685a      	ldr	r2, [r3, #4]
   1ab9c:	4b93      	ldr	r3, [pc, #588]	; (1adec <mp_repl_autocomplete+0x2cc>)
   1ab9e:	691b      	ldr	r3, [r3, #16]
   1aba0:	68db      	ldr	r3, [r3, #12]
   1aba2:	4413      	add	r3, r2
   1aba4:	637b      	str	r3, [r7, #52]	; 0x34

    // begin search in outer global dict which is accessed from __main__
    mp_obj_t obj = MP_OBJ_FROM_PTR(&mp_module___main__);
   1aba6:	4b92      	ldr	r3, [pc, #584]	; (1adf0 <mp_repl_autocomplete+0x2d0>)
   1aba8:	66bb      	str	r3, [r7, #104]	; 0x68
    mp_obj_t dest[2];

    for (;;) {
        // get next word in string to complete
        const char *s_start = str;
   1abaa:	68fb      	ldr	r3, [r7, #12]
   1abac:	633b      	str	r3, [r7, #48]	; 0x30
        while (str < top && *str != '.') {
   1abae:	e002      	b.n	1abb6 <mp_repl_autocomplete+0x96>
            ++str;
   1abb0:	68fb      	ldr	r3, [r7, #12]
   1abb2:	3301      	adds	r3, #1
   1abb4:	60fb      	str	r3, [r7, #12]
        while (str < top && *str != '.') {
   1abb6:	68fa      	ldr	r2, [r7, #12]
   1abb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1abba:	429a      	cmp	r2, r3
   1abbc:	d203      	bcs.n	1abc6 <mp_repl_autocomplete+0xa6>
   1abbe:	68fb      	ldr	r3, [r7, #12]
   1abc0:	781b      	ldrb	r3, [r3, #0]
   1abc2:	2b2e      	cmp	r3, #46	; 0x2e
   1abc4:	d1f4      	bne.n	1abb0 <mp_repl_autocomplete+0x90>
        }
        size_t s_len = str - s_start;
   1abc6:	68fa      	ldr	r2, [r7, #12]
   1abc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1abca:	1ad3      	subs	r3, r2, r3
   1abcc:	62fb      	str	r3, [r7, #44]	; 0x2c

        if (str < top) {
   1abce:	68fa      	ldr	r2, [r7, #12]
   1abd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1abd2:	429a      	cmp	r2, r3
   1abd4:	d21b      	bcs.n	1ac0e <mp_repl_autocomplete+0xee>
            // a complete word, lookup in current object
            qstr q = qstr_find_strn(s_start, s_len);
   1abd6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
   1abd8:	6b38      	ldr	r0, [r7, #48]	; 0x30
   1abda:	f7e6 f9bf 	bl	f5c <qstr_find_strn>
   1abde:	62b8      	str	r0, [r7, #40]	; 0x28
            if (q == MP_QSTR_NULL) {
   1abe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1abe2:	2b00      	cmp	r3, #0
   1abe4:	d101      	bne.n	1abea <mp_repl_autocomplete+0xca>
                // lookup will fail
                return 0;
   1abe6:	2300      	movs	r3, #0
   1abe8:	e0fc      	b.n	1ade4 <mp_repl_autocomplete+0x2c4>
            }
            mp_load_method_protected(obj, q, dest, true);
   1abea:	f107 0218 	add.w	r2, r7, #24
   1abee:	2301      	movs	r3, #1
   1abf0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   1abf2:	6eb8      	ldr	r0, [r7, #104]	; 0x68
   1abf4:	f7f1 fdec 	bl	c7d0 <mp_load_method_protected>
            obj = dest[0]; // attribute, method, or MP_OBJ_NULL if nothing found
   1abf8:	69bb      	ldr	r3, [r7, #24]
   1abfa:	66bb      	str	r3, [r7, #104]	; 0x68

            if (obj == MP_OBJ_NULL) {
   1abfc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   1abfe:	2b00      	cmp	r3, #0
   1ac00:	d101      	bne.n	1ac06 <mp_repl_autocomplete+0xe6>
                // lookup failed
                return 0;
   1ac02:	2300      	movs	r3, #0
   1ac04:	e0ee      	b.n	1ade4 <mp_repl_autocomplete+0x2c4>
            }

            // skip '.' to move to next word
            ++str;
   1ac06:	68fb      	ldr	r3, [r7, #12]
   1ac08:	3301      	adds	r3, #1
   1ac0a:	60fb      	str	r3, [r7, #12]
   1ac0c:	e7cd      	b.n	1abaa <mp_repl_autocomplete+0x8a>

        } else {
            // end of string, do completion on this partial name

            // look for matches
            const char *match_str = NULL;
   1ac0e:	2300      	movs	r3, #0
   1ac10:	667b      	str	r3, [r7, #100]	; 0x64
            size_t match_len = 0;
   1ac12:	2300      	movs	r3, #0
   1ac14:	663b      	str	r3, [r7, #96]	; 0x60
            qstr q_first = 0, q_last = 0;
   1ac16:	2300      	movs	r3, #0
   1ac18:	65fb      	str	r3, [r7, #92]	; 0x5c
   1ac1a:	2300      	movs	r3, #0
   1ac1c:	65bb      	str	r3, [r7, #88]	; 0x58
            for (qstr q = MP_QSTR_ + 1; q < nqstr; ++q) {
   1ac1e:	2302      	movs	r3, #2
   1ac20:	657b      	str	r3, [r7, #84]	; 0x54
   1ac22:	e049      	b.n	1acb8 <mp_repl_autocomplete+0x198>
                size_t d_len;
                const char *d_str = (const char*)qstr_data(q, &d_len);
   1ac24:	f107 0314 	add.w	r3, r7, #20
   1ac28:	4619      	mov	r1, r3
   1ac2a:	6d78      	ldr	r0, [r7, #84]	; 0x54
   1ac2c:	f7e6 fae0 	bl	11f0 <qstr_data>
   1ac30:	6278      	str	r0, [r7, #36]	; 0x24
                if (s_len <= d_len && strncmp(s_start, d_str, s_len) == 0) {
   1ac32:	697b      	ldr	r3, [r7, #20]
   1ac34:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   1ac36:	429a      	cmp	r2, r3
   1ac38:	d83b      	bhi.n	1acb2 <mp_repl_autocomplete+0x192>
   1ac3a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   1ac3c:	6a79      	ldr	r1, [r7, #36]	; 0x24
   1ac3e:	6b38      	ldr	r0, [r7, #48]	; 0x30
   1ac40:	f001 f849 	bl	1bcd6 <strncmp>
   1ac44:	4603      	mov	r3, r0
   1ac46:	2b00      	cmp	r3, #0
   1ac48:	d133      	bne.n	1acb2 <mp_repl_autocomplete+0x192>
                    mp_load_method_protected(obj, q, dest, true);
   1ac4a:	f107 0218 	add.w	r2, r7, #24
   1ac4e:	2301      	movs	r3, #1
   1ac50:	6d79      	ldr	r1, [r7, #84]	; 0x54
   1ac52:	6eb8      	ldr	r0, [r7, #104]	; 0x68
   1ac54:	f7f1 fdbc 	bl	c7d0 <mp_load_method_protected>
                    if (dest[0] != MP_OBJ_NULL) {
   1ac58:	69bb      	ldr	r3, [r7, #24]
   1ac5a:	2b00      	cmp	r3, #0
   1ac5c:	d029      	beq.n	1acb2 <mp_repl_autocomplete+0x192>
                        if (match_str == NULL) {
   1ac5e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   1ac60:	2b00      	cmp	r3, #0
   1ac62:	d104      	bne.n	1ac6e <mp_repl_autocomplete+0x14e>
                            match_str = d_str;
   1ac64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1ac66:	667b      	str	r3, [r7, #100]	; 0x64
                            match_len = d_len;
   1ac68:	697b      	ldr	r3, [r7, #20]
   1ac6a:	663b      	str	r3, [r7, #96]	; 0x60
   1ac6c:	e01a      	b.n	1aca4 <mp_repl_autocomplete+0x184>
                        } else {
                            // search for longest common prefix of match_str and d_str
                            // (assumes these strings are null-terminated)
                            for (size_t j = s_len; j <= match_len && j <= d_len; ++j) {
   1ac6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1ac70:	653b      	str	r3, [r7, #80]	; 0x50
   1ac72:	e00f      	b.n	1ac94 <mp_repl_autocomplete+0x174>
                                if (match_str[j] != d_str[j]) {
   1ac74:	6e7a      	ldr	r2, [r7, #100]	; 0x64
   1ac76:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   1ac78:	4413      	add	r3, r2
   1ac7a:	781a      	ldrb	r2, [r3, #0]
   1ac7c:	6a79      	ldr	r1, [r7, #36]	; 0x24
   1ac7e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   1ac80:	440b      	add	r3, r1
   1ac82:	781b      	ldrb	r3, [r3, #0]
   1ac84:	429a      	cmp	r2, r3
   1ac86:	d002      	beq.n	1ac8e <mp_repl_autocomplete+0x16e>
                                    match_len = j;
   1ac88:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   1ac8a:	663b      	str	r3, [r7, #96]	; 0x60
                                    break;
   1ac8c:	e00a      	b.n	1aca4 <mp_repl_autocomplete+0x184>
                            for (size_t j = s_len; j <= match_len && j <= d_len; ++j) {
   1ac8e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   1ac90:	3301      	adds	r3, #1
   1ac92:	653b      	str	r3, [r7, #80]	; 0x50
   1ac94:	6d3a      	ldr	r2, [r7, #80]	; 0x50
   1ac96:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   1ac98:	429a      	cmp	r2, r3
   1ac9a:	d803      	bhi.n	1aca4 <mp_repl_autocomplete+0x184>
   1ac9c:	697b      	ldr	r3, [r7, #20]
   1ac9e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
   1aca0:	429a      	cmp	r2, r3
   1aca2:	d9e7      	bls.n	1ac74 <mp_repl_autocomplete+0x154>
                                }
                            }
                        }
                        if (q_first == 0) {
   1aca4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
   1aca6:	2b00      	cmp	r3, #0
   1aca8:	d101      	bne.n	1acae <mp_repl_autocomplete+0x18e>
                            q_first = q;
   1acaa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   1acac:	65fb      	str	r3, [r7, #92]	; 0x5c
                        }
                        q_last = q;
   1acae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   1acb0:	65bb      	str	r3, [r7, #88]	; 0x58
            for (qstr q = MP_QSTR_ + 1; q < nqstr; ++q) {
   1acb2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   1acb4:	3301      	adds	r3, #1
   1acb6:	657b      	str	r3, [r7, #84]	; 0x54
   1acb8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
   1acba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1acbc:	429a      	cmp	r2, r3
   1acbe:	d3b1      	bcc.n	1ac24 <mp_repl_autocomplete+0x104>
                    }
                }
            }

            // nothing found
            if (q_first == 0) {
   1acc0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
   1acc2:	2b00      	cmp	r3, #0
   1acc4:	d116      	bne.n	1acf4 <mp_repl_autocomplete+0x1d4>
                // If there're no better alternatives, and if it's first word
                // in the line, try to complete "import".
                if (s_start == org_str) {
   1acc6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   1acc8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1acca:	429a      	cmp	r2, r3
   1accc:	d110      	bne.n	1acf0 <mp_repl_autocomplete+0x1d0>
                    static const char import_str[] = "import ";
                    if (memcmp(s_start, import_str, s_len) == 0) {
   1acce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   1acd0:	4948      	ldr	r1, [pc, #288]	; (1adf4 <mp_repl_autocomplete+0x2d4>)
   1acd2:	6b38      	ldr	r0, [r7, #48]	; 0x30
   1acd4:	f000 ff5b 	bl	1bb8e <memcmp>
   1acd8:	4603      	mov	r3, r0
   1acda:	2b00      	cmp	r3, #0
   1acdc:	d108      	bne.n	1acf0 <mp_repl_autocomplete+0x1d0>
                        *compl_str = import_str + s_len;
   1acde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1ace0:	4a44      	ldr	r2, [pc, #272]	; (1adf4 <mp_repl_autocomplete+0x2d4>)
   1ace2:	441a      	add	r2, r3
   1ace4:	683b      	ldr	r3, [r7, #0]
   1ace6:	601a      	str	r2, [r3, #0]
                        return sizeof(import_str) - 1 - s_len;
   1ace8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1acea:	f1c3 0307 	rsb	r3, r3, #7
   1acee:	e079      	b.n	1ade4 <mp_repl_autocomplete+0x2c4>
                    }
                }

                return 0;
   1acf0:	2300      	movs	r3, #0
   1acf2:	e077      	b.n	1ade4 <mp_repl_autocomplete+0x2c4>
            }

            // 1 match found, or multiple matches with a common prefix
            if (q_first == q_last || match_len > s_len) {
   1acf4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
   1acf6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   1acf8:	429a      	cmp	r2, r3
   1acfa:	d003      	beq.n	1ad04 <mp_repl_autocomplete+0x1e4>
   1acfc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
   1acfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1ad00:	429a      	cmp	r2, r3
   1ad02:	d908      	bls.n	1ad16 <mp_repl_autocomplete+0x1f6>
                *compl_str = match_str + s_len;
   1ad04:	6e7a      	ldr	r2, [r7, #100]	; 0x64
   1ad06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1ad08:	441a      	add	r2, r3
   1ad0a:	683b      	ldr	r3, [r7, #0]
   1ad0c:	601a      	str	r2, [r3, #0]
                return match_len - s_len;
   1ad0e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
   1ad10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1ad12:	1ad3      	subs	r3, r2, r3
   1ad14:	e066      	b.n	1ade4 <mp_repl_autocomplete+0x2c4>
            // multiple matches found, print them out

            #define WORD_SLOT_LEN (16)
            #define MAX_LINE_LEN  (4 * WORD_SLOT_LEN)

            int line_len = MAX_LINE_LEN; // force a newline for first word
   1ad16:	2340      	movs	r3, #64	; 0x40
   1ad18:	64fb      	str	r3, [r7, #76]	; 0x4c
            for (qstr q = q_first; q <= q_last; ++q) {
   1ad1a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
   1ad1c:	64bb      	str	r3, [r7, #72]	; 0x48
   1ad1e:	e057      	b.n	1add0 <mp_repl_autocomplete+0x2b0>
                size_t d_len;
                const char *d_str = (const char*)qstr_data(q, &d_len);
   1ad20:	f107 0310 	add.w	r3, r7, #16
   1ad24:	4619      	mov	r1, r3
   1ad26:	6cb8      	ldr	r0, [r7, #72]	; 0x48
   1ad28:	f7e6 fa62 	bl	11f0 <qstr_data>
   1ad2c:	6238      	str	r0, [r7, #32]
                if (s_len <= d_len && strncmp(s_start, d_str, s_len) == 0) {
   1ad2e:	693b      	ldr	r3, [r7, #16]
   1ad30:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   1ad32:	429a      	cmp	r2, r3
   1ad34:	d849      	bhi.n	1adca <mp_repl_autocomplete+0x2aa>
   1ad36:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   1ad38:	6a39      	ldr	r1, [r7, #32]
   1ad3a:	6b38      	ldr	r0, [r7, #48]	; 0x30
   1ad3c:	f000 ffcb 	bl	1bcd6 <strncmp>
   1ad40:	4603      	mov	r3, r0
   1ad42:	2b00      	cmp	r3, #0
   1ad44:	d141      	bne.n	1adca <mp_repl_autocomplete+0x2aa>
                    mp_load_method_protected(obj, q, dest, true);
   1ad46:	f107 0218 	add.w	r2, r7, #24
   1ad4a:	2301      	movs	r3, #1
   1ad4c:	6cb9      	ldr	r1, [r7, #72]	; 0x48
   1ad4e:	6eb8      	ldr	r0, [r7, #104]	; 0x68
   1ad50:	f7f1 fd3e 	bl	c7d0 <mp_load_method_protected>
                    if (dest[0] != MP_OBJ_NULL) {
   1ad54:	69bb      	ldr	r3, [r7, #24]
   1ad56:	2b00      	cmp	r3, #0
   1ad58:	d037      	beq.n	1adca <mp_repl_autocomplete+0x2aa>
                        int gap = (line_len + WORD_SLOT_LEN - 1) / WORD_SLOT_LEN * WORD_SLOT_LEN - line_len;
   1ad5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   1ad5c:	330f      	adds	r3, #15
   1ad5e:	2b00      	cmp	r3, #0
   1ad60:	da00      	bge.n	1ad64 <mp_repl_autocomplete+0x244>
   1ad62:	330f      	adds	r3, #15
   1ad64:	111b      	asrs	r3, r3, #4
   1ad66:	011a      	lsls	r2, r3, #4
   1ad68:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   1ad6a:	1ad3      	subs	r3, r2, r3
   1ad6c:	647b      	str	r3, [r7, #68]	; 0x44
                        if (gap < 2) {
   1ad6e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   1ad70:	2b01      	cmp	r3, #1
   1ad72:	dc02      	bgt.n	1ad7a <mp_repl_autocomplete+0x25a>
                            gap += WORD_SLOT_LEN;
   1ad74:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   1ad76:	3310      	adds	r3, #16
   1ad78:	647b      	str	r3, [r7, #68]	; 0x44
                        }
                        if (line_len + gap + d_len <= MAX_LINE_LEN) {
   1ad7a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
   1ad7c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   1ad7e:	4413      	add	r3, r2
   1ad80:	461a      	mov	r2, r3
   1ad82:	693b      	ldr	r3, [r7, #16]
   1ad84:	4413      	add	r3, r2
   1ad86:	2b40      	cmp	r3, #64	; 0x40
   1ad88:	d818      	bhi.n	1adbc <mp_repl_autocomplete+0x29c>
                            // TODO optimise printing of gap?
                            for (int j = 0; j < gap; ++j) {
   1ad8a:	2300      	movs	r3, #0
   1ad8c:	643b      	str	r3, [r7, #64]	; 0x40
   1ad8e:	e006      	b.n	1ad9e <mp_repl_autocomplete+0x27e>
                                mp_print_str(print, " ");
   1ad90:	4919      	ldr	r1, [pc, #100]	; (1adf8 <mp_repl_autocomplete+0x2d8>)
   1ad92:	6878      	ldr	r0, [r7, #4]
   1ad94:	f7e6 fd5c 	bl	1850 <mp_print_str>
                            for (int j = 0; j < gap; ++j) {
   1ad98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1ad9a:	3301      	adds	r3, #1
   1ad9c:	643b      	str	r3, [r7, #64]	; 0x40
   1ad9e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   1ada0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   1ada2:	429a      	cmp	r2, r3
   1ada4:	dbf4      	blt.n	1ad90 <mp_repl_autocomplete+0x270>
                            }
                            mp_print_str(print, d_str);
   1ada6:	6a39      	ldr	r1, [r7, #32]
   1ada8:	6878      	ldr	r0, [r7, #4]
   1adaa:	f7e6 fd51 	bl	1850 <mp_print_str>
                            line_len += gap + d_len;
   1adae:	6c7a      	ldr	r2, [r7, #68]	; 0x44
   1adb0:	693b      	ldr	r3, [r7, #16]
   1adb2:	441a      	add	r2, r3
   1adb4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   1adb6:	4413      	add	r3, r2
   1adb8:	64fb      	str	r3, [r7, #76]	; 0x4c
   1adba:	e006      	b.n	1adca <mp_repl_autocomplete+0x2aa>
                        } else {
                            mp_printf(print, "\n%s", d_str);
   1adbc:	6a3a      	ldr	r2, [r7, #32]
   1adbe:	490f      	ldr	r1, [pc, #60]	; (1adfc <mp_repl_autocomplete+0x2dc>)
   1adc0:	6878      	ldr	r0, [r7, #4]
   1adc2:	f7e7 f857 	bl	1e74 <mp_printf>
                            line_len = d_len;
   1adc6:	693b      	ldr	r3, [r7, #16]
   1adc8:	64fb      	str	r3, [r7, #76]	; 0x4c
            for (qstr q = q_first; q <= q_last; ++q) {
   1adca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   1adcc:	3301      	adds	r3, #1
   1adce:	64bb      	str	r3, [r7, #72]	; 0x48
   1add0:	6cba      	ldr	r2, [r7, #72]	; 0x48
   1add2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   1add4:	429a      	cmp	r2, r3
   1add6:	d9a3      	bls.n	1ad20 <mp_repl_autocomplete+0x200>
                        }
                    }
                }
            }
            mp_print_str(print, "\n");
   1add8:	4909      	ldr	r1, [pc, #36]	; (1ae00 <mp_repl_autocomplete+0x2e0>)
   1adda:	6878      	ldr	r0, [r7, #4]
   1addc:	f7e6 fd38 	bl	1850 <mp_print_str>

            return (size_t)(-1); // indicate many matches
   1ade0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
        }
    }
}
   1ade4:	4618      	mov	r0, r3
   1ade6:	3770      	adds	r7, #112	; 0x70
   1ade8:	46bd      	mov	sp, r7
   1adea:	bd80      	pop	{r7, pc}
   1adec:	20000a2c 	.word	0x20000a2c
   1adf0:	0001f3bc 	.word	0x0001f3bc
   1adf4:	00022ab0 	.word	0x00022ab0
   1adf8:	00022aa4 	.word	0x00022aa4
   1adfc:	00022aa8 	.word	0x00022aa8
   1ae00:	00022aac 	.word	0x00022aac

0001ae04 <mp_small_int_mul_overflow>:
 * THE SOFTWARE.
 */

#include "py/smallint.h"

bool mp_small_int_mul_overflow(mp_int_t x, mp_int_t y) {
   1ae04:	b480      	push	{r7}
   1ae06:	b083      	sub	sp, #12
   1ae08:	af00      	add	r7, sp, #0
   1ae0a:	6078      	str	r0, [r7, #4]
   1ae0c:	6039      	str	r1, [r7, #0]
    // Check for multiply overflow; see CERT INT32-C
    if (x > 0) { // x is positive
   1ae0e:	687b      	ldr	r3, [r7, #4]
   1ae10:	2b00      	cmp	r3, #0
   1ae12:	dd16      	ble.n	1ae42 <mp_small_int_mul_overflow+0x3e>
        if (y > 0) { // x and y are positive
   1ae14:	683b      	ldr	r3, [r7, #0]
   1ae16:	2b00      	cmp	r3, #0
   1ae18:	dd09      	ble.n	1ae2e <mp_small_int_mul_overflow+0x2a>
            if (x > (MP_SMALL_INT_MAX / y)) {
   1ae1a:	f06f 4240 	mvn.w	r2, #3221225472	; 0xc0000000
   1ae1e:	683b      	ldr	r3, [r7, #0]
   1ae20:	fb92 f2f3 	sdiv	r2, r2, r3
   1ae24:	687b      	ldr	r3, [r7, #4]
   1ae26:	429a      	cmp	r2, r3
   1ae28:	da25      	bge.n	1ae76 <mp_small_int_mul_overflow+0x72>
                return true;
   1ae2a:	2301      	movs	r3, #1
   1ae2c:	e024      	b.n	1ae78 <mp_small_int_mul_overflow+0x74>
            }
        } else { // x positive, y nonpositive
            if (y < (MP_SMALL_INT_MIN / x)) {
   1ae2e:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
   1ae32:	687b      	ldr	r3, [r7, #4]
   1ae34:	fb92 f2f3 	sdiv	r2, r2, r3
   1ae38:	683b      	ldr	r3, [r7, #0]
   1ae3a:	429a      	cmp	r2, r3
   1ae3c:	dd1b      	ble.n	1ae76 <mp_small_int_mul_overflow+0x72>
                return true;
   1ae3e:	2301      	movs	r3, #1
   1ae40:	e01a      	b.n	1ae78 <mp_small_int_mul_overflow+0x74>
            }
        } // x positive, y nonpositive
    } else { // x is nonpositive
        if (y > 0) { // x is nonpositive, y is positive
   1ae42:	683b      	ldr	r3, [r7, #0]
   1ae44:	2b00      	cmp	r3, #0
   1ae46:	dd09      	ble.n	1ae5c <mp_small_int_mul_overflow+0x58>
            if (x < (MP_SMALL_INT_MIN / y)) {
   1ae48:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
   1ae4c:	683b      	ldr	r3, [r7, #0]
   1ae4e:	fb92 f2f3 	sdiv	r2, r2, r3
   1ae52:	687b      	ldr	r3, [r7, #4]
   1ae54:	429a      	cmp	r2, r3
   1ae56:	dd0e      	ble.n	1ae76 <mp_small_int_mul_overflow+0x72>
                return true;
   1ae58:	2301      	movs	r3, #1
   1ae5a:	e00d      	b.n	1ae78 <mp_small_int_mul_overflow+0x74>
            }
        } else { // x and y are nonpositive
            if (x != 0 && y < (MP_SMALL_INT_MAX / x)) {
   1ae5c:	687b      	ldr	r3, [r7, #4]
   1ae5e:	2b00      	cmp	r3, #0
   1ae60:	d009      	beq.n	1ae76 <mp_small_int_mul_overflow+0x72>
   1ae62:	f06f 4240 	mvn.w	r2, #3221225472	; 0xc0000000
   1ae66:	687b      	ldr	r3, [r7, #4]
   1ae68:	fb92 f2f3 	sdiv	r2, r2, r3
   1ae6c:	683b      	ldr	r3, [r7, #0]
   1ae6e:	429a      	cmp	r2, r3
   1ae70:	dd01      	ble.n	1ae76 <mp_small_int_mul_overflow+0x72>
                return true;
   1ae72:	2301      	movs	r3, #1
   1ae74:	e000      	b.n	1ae78 <mp_small_int_mul_overflow+0x74>
            }
        } // End if x and y are nonpositive
    } // End if x is nonpositive
    return false;
   1ae76:	2300      	movs	r3, #0
}
   1ae78:	4618      	mov	r0, r3
   1ae7a:	370c      	adds	r7, #12
   1ae7c:	46bd      	mov	sp, r7
   1ae7e:	f85d 7b04 	ldr.w	r7, [sp], #4
   1ae82:	4770      	bx	lr

0001ae84 <mp_small_int_modulo>:

mp_int_t mp_small_int_modulo(mp_int_t dividend, mp_int_t divisor) {
   1ae84:	b480      	push	{r7}
   1ae86:	b083      	sub	sp, #12
   1ae88:	af00      	add	r7, sp, #0
   1ae8a:	6078      	str	r0, [r7, #4]
   1ae8c:	6039      	str	r1, [r7, #0]
    // Python specs require that mod has same sign as second operand
    dividend %= divisor;
   1ae8e:	687b      	ldr	r3, [r7, #4]
   1ae90:	683a      	ldr	r2, [r7, #0]
   1ae92:	fb93 f2f2 	sdiv	r2, r3, r2
   1ae96:	6839      	ldr	r1, [r7, #0]
   1ae98:	fb01 f202 	mul.w	r2, r1, r2
   1ae9c:	1a9b      	subs	r3, r3, r2
   1ae9e:	607b      	str	r3, [r7, #4]
    if ((dividend < 0 && divisor > 0) || (dividend > 0 && divisor < 0)) {
   1aea0:	687b      	ldr	r3, [r7, #4]
   1aea2:	2b00      	cmp	r3, #0
   1aea4:	da02      	bge.n	1aeac <mp_small_int_modulo+0x28>
   1aea6:	683b      	ldr	r3, [r7, #0]
   1aea8:	2b00      	cmp	r3, #0
   1aeaa:	dc05      	bgt.n	1aeb8 <mp_small_int_modulo+0x34>
   1aeac:	687b      	ldr	r3, [r7, #4]
   1aeae:	2b00      	cmp	r3, #0
   1aeb0:	dd06      	ble.n	1aec0 <mp_small_int_modulo+0x3c>
   1aeb2:	683b      	ldr	r3, [r7, #0]
   1aeb4:	2b00      	cmp	r3, #0
   1aeb6:	da03      	bge.n	1aec0 <mp_small_int_modulo+0x3c>
        dividend += divisor;
   1aeb8:	687a      	ldr	r2, [r7, #4]
   1aeba:	683b      	ldr	r3, [r7, #0]
   1aebc:	4413      	add	r3, r2
   1aebe:	607b      	str	r3, [r7, #4]
    }
    return dividend;
   1aec0:	687b      	ldr	r3, [r7, #4]
}
   1aec2:	4618      	mov	r0, r3
   1aec4:	370c      	adds	r7, #12
   1aec6:	46bd      	mov	sp, r7
   1aec8:	f85d 7b04 	ldr.w	r7, [sp], #4
   1aecc:	4770      	bx	lr

0001aece <mp_small_int_floor_divide>:

mp_int_t mp_small_int_floor_divide(mp_int_t num, mp_int_t denom) {
   1aece:	b480      	push	{r7}
   1aed0:	b083      	sub	sp, #12
   1aed2:	af00      	add	r7, sp, #0
   1aed4:	6078      	str	r0, [r7, #4]
   1aed6:	6039      	str	r1, [r7, #0]
    if (num >= 0) {
   1aed8:	687b      	ldr	r3, [r7, #4]
   1aeda:	2b00      	cmp	r3, #0
   1aedc:	db08      	blt.n	1aef0 <mp_small_int_floor_divide+0x22>
        if (denom < 0) {
   1aede:	683b      	ldr	r3, [r7, #0]
   1aee0:	2b00      	cmp	r3, #0
   1aee2:	da0e      	bge.n	1af02 <mp_small_int_floor_divide+0x34>
            num += -denom - 1;
   1aee4:	683b      	ldr	r3, [r7, #0]
   1aee6:	43db      	mvns	r3, r3
   1aee8:	687a      	ldr	r2, [r7, #4]
   1aeea:	4413      	add	r3, r2
   1aeec:	607b      	str	r3, [r7, #4]
   1aeee:	e008      	b.n	1af02 <mp_small_int_floor_divide+0x34>
        }
    } else {
        if (denom >= 0) {
   1aef0:	683b      	ldr	r3, [r7, #0]
   1aef2:	2b00      	cmp	r3, #0
   1aef4:	db05      	blt.n	1af02 <mp_small_int_floor_divide+0x34>
            num += -denom + 1;
   1aef6:	683b      	ldr	r3, [r7, #0]
   1aef8:	f1c3 0301 	rsb	r3, r3, #1
   1aefc:	687a      	ldr	r2, [r7, #4]
   1aefe:	4413      	add	r3, r2
   1af00:	607b      	str	r3, [r7, #4]
        }
    }
    return num / denom;
   1af02:	687a      	ldr	r2, [r7, #4]
   1af04:	683b      	ldr	r3, [r7, #0]
   1af06:	fb92 f3f3 	sdiv	r3, r2, r3
}
   1af0a:	4618      	mov	r0, r3
   1af0c:	370c      	adds	r7, #12
   1af0e:	46bd      	mov	sp, r7
   1af10:	f85d 7b04 	ldr.w	r7, [sp], #4
   1af14:	4770      	bx	lr
	...

0001af18 <mp_find_frozen_mpy>:
#include "py/emitglue.h"

extern const char mp_frozen_mpy_names[];
extern const mp_raw_code_t *const mp_frozen_mpy_content[];

STATIC const mp_raw_code_t *mp_find_frozen_mpy(const char *str, size_t len) {
   1af18:	b580      	push	{r7, lr}
   1af1a:	b086      	sub	sp, #24
   1af1c:	af00      	add	r7, sp, #0
   1af1e:	6078      	str	r0, [r7, #4]
   1af20:	6039      	str	r1, [r7, #0]
    const char *name = mp_frozen_mpy_names;
   1af22:	4b15      	ldr	r3, [pc, #84]	; (1af78 <mp_find_frozen_mpy+0x60>)
   1af24:	617b      	str	r3, [r7, #20]
    for (size_t i = 0; *name != 0; i++) {
   1af26:	2300      	movs	r3, #0
   1af28:	613b      	str	r3, [r7, #16]
   1af2a:	e01c      	b.n	1af66 <mp_find_frozen_mpy+0x4e>
        size_t l = strlen(name);
   1af2c:	6978      	ldr	r0, [r7, #20]
   1af2e:	f000 fe7f 	bl	1bc30 <strlen>
   1af32:	60f8      	str	r0, [r7, #12]
        if (l == len && !memcmp(str, name, l)) {
   1af34:	68fa      	ldr	r2, [r7, #12]
   1af36:	683b      	ldr	r3, [r7, #0]
   1af38:	429a      	cmp	r2, r3
   1af3a:	d10c      	bne.n	1af56 <mp_find_frozen_mpy+0x3e>
   1af3c:	68fa      	ldr	r2, [r7, #12]
   1af3e:	6979      	ldr	r1, [r7, #20]
   1af40:	6878      	ldr	r0, [r7, #4]
   1af42:	f000 fe24 	bl	1bb8e <memcmp>
   1af46:	4603      	mov	r3, r0
   1af48:	2b00      	cmp	r3, #0
   1af4a:	d104      	bne.n	1af56 <mp_find_frozen_mpy+0x3e>
            return mp_frozen_mpy_content[i];
   1af4c:	4a0b      	ldr	r2, [pc, #44]	; (1af7c <mp_find_frozen_mpy+0x64>)
   1af4e:	693b      	ldr	r3, [r7, #16]
   1af50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1af54:	e00c      	b.n	1af70 <mp_find_frozen_mpy+0x58>
        }
        name += l + 1;
   1af56:	68fb      	ldr	r3, [r7, #12]
   1af58:	3301      	adds	r3, #1
   1af5a:	697a      	ldr	r2, [r7, #20]
   1af5c:	4413      	add	r3, r2
   1af5e:	617b      	str	r3, [r7, #20]
    for (size_t i = 0; *name != 0; i++) {
   1af60:	693b      	ldr	r3, [r7, #16]
   1af62:	3301      	adds	r3, #1
   1af64:	613b      	str	r3, [r7, #16]
   1af66:	697b      	ldr	r3, [r7, #20]
   1af68:	781b      	ldrb	r3, [r3, #0]
   1af6a:	2b00      	cmp	r3, #0
   1af6c:	d1de      	bne.n	1af2c <mp_find_frozen_mpy+0x14>
    }
    return NULL;
   1af6e:	2300      	movs	r3, #0
}
   1af70:	4618      	mov	r0, r3
   1af72:	3718      	adds	r7, #24
   1af74:	46bd      	mov	sp, r7
   1af76:	bd80      	pop	{r7, pc}
   1af78:	00022d9c 	.word	0x00022d9c
   1af7c:	00022dac 	.word	0x00022dac

0001af80 <mp_frozen_stat_helper>:

#endif

#if MICROPY_MODULE_FROZEN

STATIC mp_import_stat_t mp_frozen_stat_helper(const char *name, const char *str) {
   1af80:	b580      	push	{r7, lr}
   1af82:	b086      	sub	sp, #24
   1af84:	af00      	add	r7, sp, #0
   1af86:	6078      	str	r0, [r7, #4]
   1af88:	6039      	str	r1, [r7, #0]
    size_t len = strlen(str);
   1af8a:	6838      	ldr	r0, [r7, #0]
   1af8c:	f000 fe50 	bl	1bc30 <strlen>
   1af90:	6138      	str	r0, [r7, #16]

    for (int i = 0; *name != 0; i++) {
   1af92:	2300      	movs	r3, #0
   1af94:	617b      	str	r3, [r7, #20]
   1af96:	e027      	b.n	1afe8 <mp_frozen_stat_helper+0x68>
        size_t l = strlen(name);
   1af98:	6878      	ldr	r0, [r7, #4]
   1af9a:	f000 fe49 	bl	1bc30 <strlen>
   1af9e:	60f8      	str	r0, [r7, #12]
        if (l >= len && !memcmp(str, name, len)) {
   1afa0:	68fa      	ldr	r2, [r7, #12]
   1afa2:	693b      	ldr	r3, [r7, #16]
   1afa4:	429a      	cmp	r2, r3
   1afa6:	d317      	bcc.n	1afd8 <mp_frozen_stat_helper+0x58>
   1afa8:	693a      	ldr	r2, [r7, #16]
   1afaa:	6879      	ldr	r1, [r7, #4]
   1afac:	6838      	ldr	r0, [r7, #0]
   1afae:	f000 fdee 	bl	1bb8e <memcmp>
   1afb2:	4603      	mov	r3, r0
   1afb4:	2b00      	cmp	r3, #0
   1afb6:	d10f      	bne.n	1afd8 <mp_frozen_stat_helper+0x58>
            if (name[len] == 0) {
   1afb8:	687a      	ldr	r2, [r7, #4]
   1afba:	693b      	ldr	r3, [r7, #16]
   1afbc:	4413      	add	r3, r2
   1afbe:	781b      	ldrb	r3, [r3, #0]
   1afc0:	2b00      	cmp	r3, #0
   1afc2:	d101      	bne.n	1afc8 <mp_frozen_stat_helper+0x48>
                return MP_IMPORT_STAT_FILE;
   1afc4:	2302      	movs	r3, #2
   1afc6:	e014      	b.n	1aff2 <mp_frozen_stat_helper+0x72>
            } else if (name[len] == '/') {
   1afc8:	687a      	ldr	r2, [r7, #4]
   1afca:	693b      	ldr	r3, [r7, #16]
   1afcc:	4413      	add	r3, r2
   1afce:	781b      	ldrb	r3, [r3, #0]
   1afd0:	2b2f      	cmp	r3, #47	; 0x2f
   1afd2:	d101      	bne.n	1afd8 <mp_frozen_stat_helper+0x58>
                return MP_IMPORT_STAT_DIR;
   1afd4:	2301      	movs	r3, #1
   1afd6:	e00c      	b.n	1aff2 <mp_frozen_stat_helper+0x72>
            }
        }
        name += l + 1;
   1afd8:	68fb      	ldr	r3, [r7, #12]
   1afda:	3301      	adds	r3, #1
   1afdc:	687a      	ldr	r2, [r7, #4]
   1afde:	4413      	add	r3, r2
   1afe0:	607b      	str	r3, [r7, #4]
    for (int i = 0; *name != 0; i++) {
   1afe2:	697b      	ldr	r3, [r7, #20]
   1afe4:	3301      	adds	r3, #1
   1afe6:	617b      	str	r3, [r7, #20]
   1afe8:	687b      	ldr	r3, [r7, #4]
   1afea:	781b      	ldrb	r3, [r3, #0]
   1afec:	2b00      	cmp	r3, #0
   1afee:	d1d3      	bne.n	1af98 <mp_frozen_stat_helper+0x18>
    }
    return MP_IMPORT_STAT_NO_EXIST;
   1aff0:	2300      	movs	r3, #0
}
   1aff2:	4618      	mov	r0, r3
   1aff4:	3718      	adds	r7, #24
   1aff6:	46bd      	mov	sp, r7
   1aff8:	bd80      	pop	{r7, pc}

0001affa <mp_frozen_stat>:

mp_import_stat_t mp_frozen_stat(const char *str) {
   1affa:	b580      	push	{r7, lr}
   1affc:	b084      	sub	sp, #16
   1affe:	af00      	add	r7, sp, #0
   1b000:	6078      	str	r0, [r7, #4]
        return stat;
    }
    #endif

    #if MICROPY_MODULE_FROZEN_MPY
    stat = mp_frozen_stat_helper(mp_frozen_mpy_names, str);
   1b002:	6879      	ldr	r1, [r7, #4]
   1b004:	4806      	ldr	r0, [pc, #24]	; (1b020 <mp_frozen_stat+0x26>)
   1b006:	f7ff ffbb 	bl	1af80 <mp_frozen_stat_helper>
   1b00a:	60f8      	str	r0, [r7, #12]
    if (stat != MP_IMPORT_STAT_NO_EXIST) {
   1b00c:	68fb      	ldr	r3, [r7, #12]
   1b00e:	2b00      	cmp	r3, #0
   1b010:	d001      	beq.n	1b016 <mp_frozen_stat+0x1c>
        return stat;
   1b012:	68fb      	ldr	r3, [r7, #12]
   1b014:	e000      	b.n	1b018 <mp_frozen_stat+0x1e>
    }
    #endif

    return MP_IMPORT_STAT_NO_EXIST;
   1b016:	2300      	movs	r3, #0
}
   1b018:	4618      	mov	r0, r3
   1b01a:	3710      	adds	r7, #16
   1b01c:	46bd      	mov	sp, r7
   1b01e:	bd80      	pop	{r7, pc}
   1b020:	00022d9c 	.word	0x00022d9c

0001b024 <mp_find_frozen_module>:

int mp_find_frozen_module(const char *str, size_t len, void **data) {
   1b024:	b580      	push	{r7, lr}
   1b026:	b086      	sub	sp, #24
   1b028:	af00      	add	r7, sp, #0
   1b02a:	60f8      	str	r0, [r7, #12]
   1b02c:	60b9      	str	r1, [r7, #8]
   1b02e:	607a      	str	r2, [r7, #4]
        *data = lex;
        return MP_FROZEN_STR;
    }
    #endif
    #if MICROPY_MODULE_FROZEN_MPY
    const mp_raw_code_t *rc = mp_find_frozen_mpy(str, len);
   1b030:	68b9      	ldr	r1, [r7, #8]
   1b032:	68f8      	ldr	r0, [r7, #12]
   1b034:	f7ff ff70 	bl	1af18 <mp_find_frozen_mpy>
   1b038:	6178      	str	r0, [r7, #20]
    if (rc != NULL) {
   1b03a:	697b      	ldr	r3, [r7, #20]
   1b03c:	2b00      	cmp	r3, #0
   1b03e:	d004      	beq.n	1b04a <mp_find_frozen_module+0x26>
        *data = (void*)rc;
   1b040:	687b      	ldr	r3, [r7, #4]
   1b042:	697a      	ldr	r2, [r7, #20]
   1b044:	601a      	str	r2, [r3, #0]
        return MP_FROZEN_MPY;
   1b046:	2302      	movs	r3, #2
   1b048:	e000      	b.n	1b04c <mp_find_frozen_module+0x28>
    }
    #endif
    return MP_FROZEN_NONE;
   1b04a:	2300      	movs	r3, #0
}
   1b04c:	4618      	mov	r0, r3
   1b04e:	3718      	adds	r7, #24
   1b050:	46bd      	mov	sp, r7
   1b052:	bd80      	pop	{r7, pc}

0001b054 <do_str>:
#include "driverlib/ssi.h"
#include "driverlib/timer.h"
#include "driverlib/adc.h"

#if MICROPY_ENABLE_COMPILER
void do_str(const char *src, mp_parse_input_kind_t input_kind) {
   1b054:	b580      	push	{r7, lr}
   1b056:	b094      	sub	sp, #80	; 0x50
   1b058:	af00      	add	r7, sp, #0
   1b05a:	6078      	str	r0, [r7, #4]
   1b05c:	6039      	str	r1, [r7, #0]
    nlr_buf_t nlr;
    if (nlr_push(&nlr) == 0) {
   1b05e:	f107 0314 	add.w	r3, r7, #20
   1b062:	4618      	mov	r0, r3
   1b064:	f7e5 f92a 	bl	2bc <nlr_push>
   1b068:	4603      	mov	r3, r0
   1b06a:	2b00      	cmp	r3, #0
   1b06c:	d121      	bne.n	1b0b2 <do_str+0x5e>
        mp_lexer_t *lex = mp_lexer_new_from_str_len(MP_QSTR__lt_stdin_gt_, src, strlen(src), 0);
   1b06e:	6878      	ldr	r0, [r7, #4]
   1b070:	f000 fdde 	bl	1bc30 <strlen>
   1b074:	4602      	mov	r2, r0
   1b076:	2300      	movs	r3, #0
   1b078:	6879      	ldr	r1, [r7, #4]
   1b07a:	2036      	movs	r0, #54	; 0x36
   1b07c:	f7e8 fb33 	bl	36e6 <mp_lexer_new_from_str_len>
   1b080:	64f8      	str	r0, [r7, #76]	; 0x4c
        qstr source_name = lex->source_name;
   1b082:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   1b084:	681b      	ldr	r3, [r3, #0]
   1b086:	64bb      	str	r3, [r7, #72]	; 0x48
        mp_parse_tree_t parse_tree = mp_parse(lex, input_kind);
   1b088:	f107 030c 	add.w	r3, r7, #12
   1b08c:	683a      	ldr	r2, [r7, #0]
   1b08e:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
   1b090:	4618      	mov	r0, r3
   1b092:	f7e9 f921 	bl	42d8 <mp_parse>
        mp_obj_t module_fun = mp_compile(&parse_tree, source_name, MP_EMIT_OPT_NONE, true);
   1b096:	f107 000c 	add.w	r0, r7, #12
   1b09a:	2301      	movs	r3, #1
   1b09c:	2200      	movs	r2, #0
   1b09e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
   1b0a0:	f7ee fb91 	bl	97c6 <mp_compile>
   1b0a4:	6478      	str	r0, [r7, #68]	; 0x44
        mp_call_function_0(module_fun);
   1b0a6:	6c78      	ldr	r0, [r7, #68]	; 0x44
   1b0a8:	f7f0 fe48 	bl	bd3c <mp_call_function_0>
        nlr_pop();
   1b0ac:	f7e5 f8f4 	bl	298 <nlr_pop>
    } else {
        // uncaught exception
        mp_obj_print_exception(&mp_plat_print, (mp_obj_t)nlr.ret_val);
    }
}
   1b0b0:	e004      	b.n	1b0bc <do_str+0x68>
        mp_obj_print_exception(&mp_plat_print, (mp_obj_t)nlr.ret_val);
   1b0b2:	69bb      	ldr	r3, [r7, #24]
   1b0b4:	4619      	mov	r1, r3
   1b0b6:	4803      	ldr	r0, [pc, #12]	; (1b0c4 <do_str+0x70>)
   1b0b8:	f7f2 fbb6 	bl	d828 <mp_obj_print_exception>
}
   1b0bc:	bf00      	nop
   1b0be:	3750      	adds	r7, #80	; 0x50
   1b0c0:	46bd      	mov	sp, r7
   1b0c2:	bd80      	pop	{r7, pc}
   1b0c4:	0001d5ac 	.word	0x0001d5ac

0001b0c8 <main>:
static char *stack_top;
#if MICROPY_ENABLE_GC
static char heap[2048];
#endif

int main(int argc, char **argv) {
   1b0c8:	b580      	push	{r7, lr}
   1b0ca:	b084      	sub	sp, #16
   1b0cc:	af00      	add	r7, sp, #0
   1b0ce:	6078      	str	r0, [r7, #4]
   1b0d0:	6039      	str	r1, [r7, #0]
    int stack_dummy;
    stack_top = (char*)&stack_dummy;
   1b0d2:	4a11      	ldr	r2, [pc, #68]	; (1b118 <main+0x50>)
   1b0d4:	f107 030c 	add.w	r3, r7, #12
   1b0d8:	6013      	str	r3, [r2, #0]

    SysCtlClockSet(SYSCTL_SYSDIV_2_5 | SYSCTL_USE_PLL | SYSCTL_OSC_MAIN |SYSCTL_XTAL_16MHZ);
   1b0da:	4810      	ldr	r0, [pc, #64]	; (1b11c <main+0x54>)
   1b0dc:	f001 fb02 	bl	1c6e4 <SysCtlClockSet>

//Pin1: red, Pin2: Blue, Pin3: Green
    SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOF);
   1b0e0:	480f      	ldr	r0, [pc, #60]	; (1b120 <main+0x58>)
   1b0e2:	f001 fae7 	bl	1c6b4 <SysCtlPeripheralEnable>
    GPIOPinTypeGPIOOutput(GPIO_PORTF_BASE, GPIO_PIN_2);
   1b0e6:	2104      	movs	r1, #4
   1b0e8:	480e      	ldr	r0, [pc, #56]	; (1b124 <main+0x5c>)
   1b0ea:	f001 fad6 	bl	1c69a <GPIOPinTypeGPIOOutput>
    GPIOPinWrite(GPIO_PORTF_BASE, GPIO_PIN_2, GPIO_PIN_2);
   1b0ee:	2204      	movs	r2, #4
   1b0f0:	2104      	movs	r1, #4
   1b0f2:	480c      	ldr	r0, [pc, #48]	; (1b124 <main+0x5c>)
   1b0f4:	f001 face 	bl	1c694 <GPIOPinWrite>

    #if MICROPY_ENABLE_GC
    gc_init(heap, heap + sizeof(heap));
   1b0f8:	4b0b      	ldr	r3, [pc, #44]	; (1b128 <main+0x60>)
   1b0fa:	4619      	mov	r1, r3
   1b0fc:	480b      	ldr	r0, [pc, #44]	; (1b12c <main+0x64>)
   1b0fe:	f7e5 fa21 	bl	544 <gc_init>
    #endif
    mp_init();
   1b102:	f7f0 f9fb 	bl	b4fc <mp_init>
        if (pyexec_event_repl_process_char(c)) {
            break;
        }
    }
    #else
    pyexec_friendly_repl();
   1b106:	f000 fb45 	bl	1b794 <pyexec_friendly_repl>
    //do_str("print('hello world!', list(x+1 for x in range(10)), end='eol\\n')", MP_PARSE_SINGLE_INPUT);
    //do_str("for i in range(10):\r\n  print(i)", MP_PARSE_FILE_INPUT);
    #else
    pyexec_frozen_module("frozentest.py");
    #endif
    mp_deinit();
   1b10a:	f7f0 fa1d 	bl	b548 <mp_deinit>
    return 0;
   1b10e:	2300      	movs	r3, #0
}
   1b110:	4618      	mov	r0, r3
   1b112:	3710      	adds	r7, #16
   1b114:	46bd      	mov	sp, r7
   1b116:	bd80      	pop	{r7, pc}
   1b118:	20000004 	.word	0x20000004
   1b11c:	c1000540 	.word	0xc1000540
   1b120:	f0000805 	.word	0xf0000805
   1b124:	40025000 	.word	0x40025000
   1b128:	20000808 	.word	0x20000808
   1b12c:	20000008 	.word	0x20000008

0001b130 <gc_collect>:

void gc_collect(void) {
   1b130:	b580      	push	{r7, lr}
   1b132:	b082      	sub	sp, #8
   1b134:	af00      	add	r7, sp, #0
    // WARNING: This gc_collect implementation doesn't try to get root
    // pointers from CPU registers, and thus may function incorrectly.
    void *dummy;
    gc_collect_start();
   1b136:	f7e5 fa47 	bl	5c8 <gc_collect_start>
    gc_collect_root(&dummy, ((mp_uint_t)stack_top - (mp_uint_t)&dummy) / sizeof(mp_uint_t));
   1b13a:	4b09      	ldr	r3, [pc, #36]	; (1b160 <gc_collect+0x30>)
   1b13c:	681b      	ldr	r3, [r3, #0]
   1b13e:	461a      	mov	r2, r3
   1b140:	1d3b      	adds	r3, r7, #4
   1b142:	1ad3      	subs	r3, r2, r3
   1b144:	089a      	lsrs	r2, r3, #2
   1b146:	1d3b      	adds	r3, r7, #4
   1b148:	4611      	mov	r1, r2
   1b14a:	4618      	mov	r0, r3
   1b14c:	f7e5 fa78 	bl	640 <gc_collect_root>
    gc_collect_end();
   1b150:	f7e5 fab0 	bl	6b4 <gc_collect_end>
    gc_dump_info();
   1b154:	f7e5 fd72 	bl	c3c <gc_dump_info>
}
   1b158:	bf00      	nop
   1b15a:	3708      	adds	r7, #8
   1b15c:	46bd      	mov	sp, r7
   1b15e:	bd80      	pop	{r7, pc}
   1b160:	20000004 	.word	0x20000004

0001b164 <mp_lexer_new_from_file>:

mp_lexer_t *mp_lexer_new_from_file(const char *filename) {
   1b164:	b580      	push	{r7, lr}
   1b166:	b082      	sub	sp, #8
   1b168:	af00      	add	r7, sp, #0
   1b16a:	6078      	str	r0, [r7, #4]
    mp_raise_OSError(MP_ENOENT);
   1b16c:	2002      	movs	r0, #2
   1b16e:	f7f1 fee3 	bl	cf38 <mp_raise_OSError>

0001b172 <mp_import_stat>:
}

mp_import_stat_t mp_import_stat(const char *path) { // @suppress("Type cannot be resolved")
   1b172:	b480      	push	{r7}
   1b174:	b083      	sub	sp, #12
   1b176:	af00      	add	r7, sp, #0
   1b178:	6078      	str	r0, [r7, #4]
    return MP_IMPORT_STAT_NO_EXIST;
   1b17a:	2300      	movs	r3, #0
}
   1b17c:	4618      	mov	r0, r3
   1b17e:	370c      	adds	r7, #12
   1b180:	46bd      	mov	sp, r7
   1b182:	f85d 7b04 	ldr.w	r7, [sp], #4
   1b186:	4770      	bx	lr

0001b188 <mp_builtin_open>:

mp_obj_t mp_builtin_open(size_t n_args, const mp_obj_t *args, mp_map_t *kwargs) {
   1b188:	b480      	push	{r7}
   1b18a:	b085      	sub	sp, #20
   1b18c:	af00      	add	r7, sp, #0
   1b18e:	60f8      	str	r0, [r7, #12]
   1b190:	60b9      	str	r1, [r7, #8]
   1b192:	607a      	str	r2, [r7, #4]
    return mp_const_none;
   1b194:	4b03      	ldr	r3, [pc, #12]	; (1b1a4 <mp_builtin_open+0x1c>)
}
   1b196:	4618      	mov	r0, r3
   1b198:	3714      	adds	r7, #20
   1b19a:	46bd      	mov	sp, r7
   1b19c:	f85d 7b04 	ldr.w	r7, [sp], #4
   1b1a0:	4770      	bx	lr
   1b1a2:	bf00      	nop
   1b1a4:	000212b4 	.word	0x000212b4

0001b1a8 <nlr_jump_fail>:
MP_DEFINE_CONST_FUN_OBJ_KW(mp_builtin_open_obj, 1, mp_builtin_open);

void nlr_jump_fail(void *val) {
   1b1a8:	b480      	push	{r7}
   1b1aa:	b083      	sub	sp, #12
   1b1ac:	af00      	add	r7, sp, #0
   1b1ae:	6078      	str	r0, [r7, #4]
    while (1);
   1b1b0:	e7fe      	b.n	1b1b0 <nlr_jump_fail+0x8>

0001b1b2 <__fatal_error>:
}

void NORETURN __fatal_error(const char *msg) {
   1b1b2:	b480      	push	{r7}
   1b1b4:	b083      	sub	sp, #12
   1b1b6:	af00      	add	r7, sp, #0
   1b1b8:	6078      	str	r0, [r7, #4]
    while (1);
   1b1ba:	e7fe      	b.n	1b1ba <__fatal_error+0x8>

0001b1bc <__assert_func>:
}

#ifndef NDEBUG
void MP_WEAK __assert_func(const char *file, int line, const char *func, const char *expr) {
   1b1bc:	b580      	push	{r7, lr}
   1b1be:	b084      	sub	sp, #16
   1b1c0:	af00      	add	r7, sp, #0
   1b1c2:	60f8      	str	r0, [r7, #12]
   1b1c4:	60b9      	str	r1, [r7, #8]
   1b1c6:	607a      	str	r2, [r7, #4]
   1b1c8:	603b      	str	r3, [r7, #0]
    printf("Assertion '%s' failed, at file %s:%d\n", expr, file, line);
   1b1ca:	68bb      	ldr	r3, [r7, #8]
   1b1cc:	68fa      	ldr	r2, [r7, #12]
   1b1ce:	6839      	ldr	r1, [r7, #0]
   1b1d0:	4802      	ldr	r0, [pc, #8]	; (1b1dc <__assert_func+0x20>)
   1b1d2:	f000 f87f 	bl	1b2d4 <printf>
    __fatal_error("Assertion failed");
   1b1d6:	4802      	ldr	r0, [pc, #8]	; (1b1e0 <__assert_func+0x24>)
   1b1d8:	f7ff ffeb 	bl	1b1b2 <__fatal_error>
   1b1dc:	00022ac4 	.word	0x00022ac4
   1b1e0:	00022aec 	.word	0x00022aec

0001b1e4 <ResetISR>:
// application.
//
//*****************************************************************************
void
ResetISR(void)
{
   1b1e4:	b580      	push	{r7, lr}
   1b1e6:	b082      	sub	sp, #8
   1b1e8:	af00      	add	r7, sp, #0
    uint32_t *pui32Src, *pui32Dest;

    //
    // Copy the data segment initializers from flash to SRAM.
    //
    pui32Src = &_ldata;
   1b1ea:	4b13      	ldr	r3, [pc, #76]	; (1b238 <zero_loop+0x24>)
   1b1ec:	607b      	str	r3, [r7, #4]
    for(pui32Dest = &_data; pui32Dest < &_edata; )
   1b1ee:	4b13      	ldr	r3, [pc, #76]	; (1b23c <zero_loop+0x28>)
   1b1f0:	603b      	str	r3, [r7, #0]
   1b1f2:	e007      	b.n	1b204 <ResetISR+0x20>
    {
        *pui32Dest++ = *pui32Src++;
   1b1f4:	683b      	ldr	r3, [r7, #0]
   1b1f6:	1d1a      	adds	r2, r3, #4
   1b1f8:	603a      	str	r2, [r7, #0]
   1b1fa:	687a      	ldr	r2, [r7, #4]
   1b1fc:	1d11      	adds	r1, r2, #4
   1b1fe:	6079      	str	r1, [r7, #4]
   1b200:	6812      	ldr	r2, [r2, #0]
   1b202:	601a      	str	r2, [r3, #0]
    for(pui32Dest = &_data; pui32Dest < &_edata; )
   1b204:	683b      	ldr	r3, [r7, #0]
   1b206:	4a0e      	ldr	r2, [pc, #56]	; (1b240 <zero_loop+0x2c>)
   1b208:	4293      	cmp	r3, r2
   1b20a:	d3f3      	bcc.n	1b1f4 <ResetISR+0x10>
    }

    //
    // Zero fill the bss segment.
    //
    __asm("    ldr     r0, =_bss\n"
   1b20c:	4813      	ldr	r0, [pc, #76]	; (1b25c <IntDefaultHandler+0x8>)
   1b20e:	4914      	ldr	r1, [pc, #80]	; (1b260 <IntDefaultHandler+0xc>)
   1b210:	f04f 0200 	mov.w	r2, #0

0001b214 <zero_loop>:
   1b214:	4288      	cmp	r0, r1
   1b216:	bfb8      	it	lt
   1b218:	f840 2b04 	strlt.w	r2, [r0], #4
   1b21c:	dbfa      	blt.n	1b214 <zero_loop>
    // APIs must be done here prior to the floating-point unit being enabled.
    //
    // Note that this does not use DriverLib since it might not be included in
    // this project.
    //
    HWREG(NVIC_CPAC) = ((HWREG(NVIC_CPAC) &
   1b21e:	4a09      	ldr	r2, [pc, #36]	; (1b244 <zero_loop+0x30>)
   1b220:	4b08      	ldr	r3, [pc, #32]	; (1b244 <zero_loop+0x30>)
   1b222:	681b      	ldr	r3, [r3, #0]
                         ~(NVIC_CPAC_CP10_M | NVIC_CPAC_CP11_M)) |
                        NVIC_CPAC_CP10_FULL | NVIC_CPAC_CP11_FULL);
   1b224:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
    HWREG(NVIC_CPAC) = ((HWREG(NVIC_CPAC) &
   1b228:	6013      	str	r3, [r2, #0]

    //
    // Call the application's entry point.
    //
    main();
   1b22a:	f7ff ff4d 	bl	1b0c8 <main>
}
   1b22e:	bf00      	nop
   1b230:	3708      	adds	r7, #8
   1b232:	46bd      	mov	sp, r7
   1b234:	bd80      	pop	{r7, pc}
   1b236:	bf00      	nop
   1b238:	00022db0 	.word	0x00022db0
   1b23c:	20000000 	.word	0x20000000
   1b240:	20000004 	.word	0x20000004
   1b244:	e000ed88 	.word	0xe000ed88

0001b248 <NmiSR>:
// by a debugger.
//
//*****************************************************************************
static void
NmiSR(void)
{
   1b248:	b480      	push	{r7}
   1b24a:	af00      	add	r7, sp, #0
    //
    // Enter an infinite loop.
    //
    while(1)
   1b24c:	e7fe      	b.n	1b24c <NmiSR+0x4>

0001b24e <FaultISR>:
// for examination by a debugger.
//
//*****************************************************************************
static void
FaultISR(void)
{
   1b24e:	b480      	push	{r7}
   1b250:	af00      	add	r7, sp, #0
    //
    // Enter an infinite loop.
    //
    while(1)
   1b252:	e7fe      	b.n	1b252 <FaultISR+0x4>

0001b254 <IntDefaultHandler>:
// for examination by a debugger.
//
//*****************************************************************************
static void
IntDefaultHandler(void)
{
   1b254:	b480      	push	{r7}
   1b256:	af00      	add	r7, sp, #0
    //
    // Go into an infinite loop.
    //
    while(1)
   1b258:	e7fe      	b.n	1b258 <IntDefaultHandler+0x4>
   1b25a:	0000      	.short	0x0000
   1b25c:	20000004 	.word	0x20000004
   1b260:	20000be0 	.word	0x20000be0

0001b264 <mp_hal_stdin_rx_chr>:
} periph_uart_t;
#define USART1 ((periph_uart_t*)0x40011000)
#endif

// Receive single character
int mp_hal_stdin_rx_chr(void) {
   1b264:	b480      	push	{r7}
   1b266:	b083      	sub	sp, #12
   1b268:	af00      	add	r7, sp, #0
    unsigned char c = 0;
   1b26a:	2300      	movs	r3, #0
   1b26c:	71fb      	strb	r3, [r7, #7]
#if MICROPY_MIN_USE_STDOUT
    int r = read(0, &c, 1);
    (void)r;
#elif MICROPY_MIN_USE_STM32_MCU
    // wait for RXNE
    while ((USART1->SR & (1 << 5)) == 0) {
   1b26e:	bf00      	nop
   1b270:	4b07      	ldr	r3, [pc, #28]	; (1b290 <mp_hal_stdin_rx_chr+0x2c>)
   1b272:	681b      	ldr	r3, [r3, #0]
   1b274:	f003 0320 	and.w	r3, r3, #32
   1b278:	2b00      	cmp	r3, #0
   1b27a:	d0f9      	beq.n	1b270 <mp_hal_stdin_rx_chr+0xc>
    }
    c = USART1->DR;
   1b27c:	4b04      	ldr	r3, [pc, #16]	; (1b290 <mp_hal_stdin_rx_chr+0x2c>)
   1b27e:	685b      	ldr	r3, [r3, #4]
   1b280:	71fb      	strb	r3, [r7, #7]
#endif
    return c;
   1b282:	79fb      	ldrb	r3, [r7, #7]
}
   1b284:	4618      	mov	r0, r3
   1b286:	370c      	adds	r7, #12
   1b288:	46bd      	mov	sp, r7
   1b28a:	f85d 7b04 	ldr.w	r7, [sp], #4
   1b28e:	4770      	bx	lr
   1b290:	40011000 	.word	0x40011000

0001b294 <mp_hal_stdout_tx_strn>:

// Send string of given length
void mp_hal_stdout_tx_strn(const char *str, mp_uint_t len) {
   1b294:	b480      	push	{r7}
   1b296:	b083      	sub	sp, #12
   1b298:	af00      	add	r7, sp, #0
   1b29a:	6078      	str	r0, [r7, #4]
   1b29c:	6039      	str	r1, [r7, #0]
#if MICROPY_MIN_USE_STDOUT
    int r = write(1, str, len);
    (void)r;
#elif MICROPY_MIN_USE_STM32_MCU
    while (len--) {
   1b29e:	e00c      	b.n	1b2ba <mp_hal_stdout_tx_strn+0x26>
        // wait for TXE
        while ((USART1->SR & (1 << 7)) == 0) {
   1b2a0:	bf00      	nop
   1b2a2:	4b0b      	ldr	r3, [pc, #44]	; (1b2d0 <mp_hal_stdout_tx_strn+0x3c>)
   1b2a4:	681b      	ldr	r3, [r3, #0]
   1b2a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
   1b2aa:	2b00      	cmp	r3, #0
   1b2ac:	d0f9      	beq.n	1b2a2 <mp_hal_stdout_tx_strn+0xe>
        }
        USART1->DR = *str++;
   1b2ae:	4908      	ldr	r1, [pc, #32]	; (1b2d0 <mp_hal_stdout_tx_strn+0x3c>)
   1b2b0:	687b      	ldr	r3, [r7, #4]
   1b2b2:	1c5a      	adds	r2, r3, #1
   1b2b4:	607a      	str	r2, [r7, #4]
   1b2b6:	781b      	ldrb	r3, [r3, #0]
   1b2b8:	604b      	str	r3, [r1, #4]
    while (len--) {
   1b2ba:	683b      	ldr	r3, [r7, #0]
   1b2bc:	1e5a      	subs	r2, r3, #1
   1b2be:	603a      	str	r2, [r7, #0]
   1b2c0:	2b00      	cmp	r3, #0
   1b2c2:	d1ed      	bne.n	1b2a0 <mp_hal_stdout_tx_strn+0xc>
    }
#endif
}
   1b2c4:	bf00      	nop
   1b2c6:	370c      	adds	r7, #12
   1b2c8:	46bd      	mov	sp, r7
   1b2ca:	f85d 7b04 	ldr.w	r7, [sp], #4
   1b2ce:	4770      	bx	lr
   1b2d0:	40011000 	.word	0x40011000

0001b2d4 <printf>:
int putchar(int c);
int puts(const char *s);
int vsnprintf(char *str, size_t size, const char *fmt, va_list ap);
int snprintf(char *str, size_t size, const char *fmt, ...);

int printf(const char *fmt, ...) {
   1b2d4:	b40f      	push	{r0, r1, r2, r3}
   1b2d6:	b580      	push	{r7, lr}
   1b2d8:	b082      	sub	sp, #8
   1b2da:	af00      	add	r7, sp, #0
    va_list ap;
    va_start(ap, fmt);
   1b2dc:	f107 0314 	add.w	r3, r7, #20
   1b2e0:	603b      	str	r3, [r7, #0]
    int ret = mp_vprintf(&mp_plat_print, fmt, ap);
   1b2e2:	683a      	ldr	r2, [r7, #0]
   1b2e4:	6939      	ldr	r1, [r7, #16]
   1b2e6:	4806      	ldr	r0, [pc, #24]	; (1b300 <printf+0x2c>)
   1b2e8:	f7e6 fdda 	bl	1ea0 <mp_vprintf>
   1b2ec:	6078      	str	r0, [r7, #4]
    va_end(ap);
    return ret;
   1b2ee:	687b      	ldr	r3, [r7, #4]
}
   1b2f0:	4618      	mov	r0, r3
   1b2f2:	3708      	adds	r7, #8
   1b2f4:	46bd      	mov	sp, r7
   1b2f6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
   1b2fa:	b004      	add	sp, #16
   1b2fc:	4770      	bx	lr
   1b2fe:	bf00      	nop
   1b300:	0001d5ac 	.word	0x0001d5ac

0001b304 <vprintf>:

int vprintf(const char *fmt, va_list ap) {
   1b304:	b580      	push	{r7, lr}
   1b306:	b082      	sub	sp, #8
   1b308:	af00      	add	r7, sp, #0
   1b30a:	6078      	str	r0, [r7, #4]
   1b30c:	6039      	str	r1, [r7, #0]
    return mp_vprintf(&mp_plat_print, fmt, ap);
   1b30e:	683a      	ldr	r2, [r7, #0]
   1b310:	6879      	ldr	r1, [r7, #4]
   1b312:	4804      	ldr	r0, [pc, #16]	; (1b324 <vprintf+0x20>)
   1b314:	f7e6 fdc4 	bl	1ea0 <mp_vprintf>
   1b318:	4603      	mov	r3, r0
}
   1b31a:	4618      	mov	r0, r3
   1b31c:	3708      	adds	r7, #8
   1b31e:	46bd      	mov	sp, r7
   1b320:	bd80      	pop	{r7, pc}
   1b322:	bf00      	nop
   1b324:	0001d5ac 	.word	0x0001d5ac

0001b328 <putchar>:
    return ret;
}
#endif

// need this because gcc optimises printf("%c", c) -> putchar(c), and printf("a") -> putchar('a')
int putchar(int c) {
   1b328:	b580      	push	{r7, lr}
   1b32a:	b084      	sub	sp, #16
   1b32c:	af00      	add	r7, sp, #0
   1b32e:	6078      	str	r0, [r7, #4]
    char chr = c;
   1b330:	687b      	ldr	r3, [r7, #4]
   1b332:	b2db      	uxtb	r3, r3
   1b334:	73fb      	strb	r3, [r7, #15]
    mp_hal_stdout_tx_strn_cooked(&chr, 1);
   1b336:	f107 030f 	add.w	r3, r7, #15
   1b33a:	2101      	movs	r1, #1
   1b33c:	4618      	mov	r0, r3
   1b33e:	f000 f88b 	bl	1b458 <mp_hal_stdout_tx_strn_cooked>
    return chr;
   1b342:	7bfb      	ldrb	r3, [r7, #15]
}
   1b344:	4618      	mov	r0, r3
   1b346:	3710      	adds	r7, #16
   1b348:	46bd      	mov	sp, r7
   1b34a:	bd80      	pop	{r7, pc}

0001b34c <puts>:

// need this because gcc optimises printf("string\n") -> puts("string")
int puts(const char *s) {
   1b34c:	b580      	push	{r7, lr}
   1b34e:	b084      	sub	sp, #16
   1b350:	af00      	add	r7, sp, #0
   1b352:	6078      	str	r0, [r7, #4]
    mp_hal_stdout_tx_strn_cooked(s, strlen(s));
   1b354:	6878      	ldr	r0, [r7, #4]
   1b356:	f000 fc6b 	bl	1bc30 <strlen>
   1b35a:	4603      	mov	r3, r0
   1b35c:	4619      	mov	r1, r3
   1b35e:	6878      	ldr	r0, [r7, #4]
   1b360:	f000 f87a 	bl	1b458 <mp_hal_stdout_tx_strn_cooked>
    char chr = '\n';
   1b364:	230a      	movs	r3, #10
   1b366:	73fb      	strb	r3, [r7, #15]
    mp_hal_stdout_tx_strn_cooked(&chr, 1);
   1b368:	f107 030f 	add.w	r3, r7, #15
   1b36c:	2101      	movs	r1, #1
   1b36e:	4618      	mov	r0, r3
   1b370:	f000 f872 	bl	1b458 <mp_hal_stdout_tx_strn_cooked>
    return 1;
   1b374:	2301      	movs	r3, #1
}
   1b376:	4618      	mov	r0, r3
   1b378:	3710      	adds	r7, #16
   1b37a:	46bd      	mov	sp, r7
   1b37c:	bd80      	pop	{r7, pc}

0001b37e <strn_print_strn>:
typedef struct _strn_print_env_t {
    char *cur;
    size_t remain;
} strn_print_env_t;

STATIC void strn_print_strn(void *data, const char *str, size_t len) {
   1b37e:	b580      	push	{r7, lr}
   1b380:	b086      	sub	sp, #24
   1b382:	af00      	add	r7, sp, #0
   1b384:	60f8      	str	r0, [r7, #12]
   1b386:	60b9      	str	r1, [r7, #8]
   1b388:	607a      	str	r2, [r7, #4]
    strn_print_env_t *strn_print_env = data;
   1b38a:	68fb      	ldr	r3, [r7, #12]
   1b38c:	617b      	str	r3, [r7, #20]
    if (len > strn_print_env->remain) {
   1b38e:	697b      	ldr	r3, [r7, #20]
   1b390:	685a      	ldr	r2, [r3, #4]
   1b392:	687b      	ldr	r3, [r7, #4]
   1b394:	429a      	cmp	r2, r3
   1b396:	d202      	bcs.n	1b39e <strn_print_strn+0x20>
        len = strn_print_env->remain;
   1b398:	697b      	ldr	r3, [r7, #20]
   1b39a:	685b      	ldr	r3, [r3, #4]
   1b39c:	607b      	str	r3, [r7, #4]
    }
    memcpy(strn_print_env->cur, str, len);
   1b39e:	697b      	ldr	r3, [r7, #20]
   1b3a0:	681b      	ldr	r3, [r3, #0]
   1b3a2:	687a      	ldr	r2, [r7, #4]
   1b3a4:	68b9      	ldr	r1, [r7, #8]
   1b3a6:	4618      	mov	r0, r3
   1b3a8:	f000 fb0c 	bl	1b9c4 <memcpy>
    strn_print_env->cur += len;
   1b3ac:	697b      	ldr	r3, [r7, #20]
   1b3ae:	681a      	ldr	r2, [r3, #0]
   1b3b0:	687b      	ldr	r3, [r7, #4]
   1b3b2:	441a      	add	r2, r3
   1b3b4:	697b      	ldr	r3, [r7, #20]
   1b3b6:	601a      	str	r2, [r3, #0]
    strn_print_env->remain -= len;
   1b3b8:	697b      	ldr	r3, [r7, #20]
   1b3ba:	685a      	ldr	r2, [r3, #4]
   1b3bc:	687b      	ldr	r3, [r7, #4]
   1b3be:	1ad2      	subs	r2, r2, r3
   1b3c0:	697b      	ldr	r3, [r7, #20]
   1b3c2:	605a      	str	r2, [r3, #4]
}
   1b3c4:	bf00      	nop
   1b3c6:	3718      	adds	r7, #24
   1b3c8:	46bd      	mov	sp, r7
   1b3ca:	bd80      	pop	{r7, pc}

0001b3cc <vsnprintf>:
// uClibc requires this alias to be defined, or there may be link errors
// when linkings against it statically.
int __GI_vsnprintf(char *str, size_t size, const char *fmt, va_list ap) __attribute__((weak, alias ("vsnprintf")));
#endif

int vsnprintf(char *str, size_t size, const char *fmt, va_list ap) {
   1b3cc:	b580      	push	{r7, lr}
   1b3ce:	b08a      	sub	sp, #40	; 0x28
   1b3d0:	af00      	add	r7, sp, #0
   1b3d2:	60f8      	str	r0, [r7, #12]
   1b3d4:	60b9      	str	r1, [r7, #8]
   1b3d6:	607a      	str	r2, [r7, #4]
   1b3d8:	603b      	str	r3, [r7, #0]
    strn_print_env_t strn_print_env = {str, size};
   1b3da:	68fb      	ldr	r3, [r7, #12]
   1b3dc:	61fb      	str	r3, [r7, #28]
   1b3de:	68bb      	ldr	r3, [r7, #8]
   1b3e0:	623b      	str	r3, [r7, #32]
    mp_print_t print = {&strn_print_env, strn_print_strn};
   1b3e2:	f107 031c 	add.w	r3, r7, #28
   1b3e6:	617b      	str	r3, [r7, #20]
   1b3e8:	4b0e      	ldr	r3, [pc, #56]	; (1b424 <vsnprintf+0x58>)
   1b3ea:	61bb      	str	r3, [r7, #24]
    int len = mp_vprintf(&print, fmt, ap);
   1b3ec:	f107 0314 	add.w	r3, r7, #20
   1b3f0:	683a      	ldr	r2, [r7, #0]
   1b3f2:	6879      	ldr	r1, [r7, #4]
   1b3f4:	4618      	mov	r0, r3
   1b3f6:	f7e6 fd53 	bl	1ea0 <mp_vprintf>
   1b3fa:	6278      	str	r0, [r7, #36]	; 0x24
    // add terminating null byte
    if (size > 0) {
   1b3fc:	68bb      	ldr	r3, [r7, #8]
   1b3fe:	2b00      	cmp	r3, #0
   1b400:	d00a      	beq.n	1b418 <vsnprintf+0x4c>
        if (strn_print_env.remain == 0) {
   1b402:	6a3b      	ldr	r3, [r7, #32]
   1b404:	2b00      	cmp	r3, #0
   1b406:	d104      	bne.n	1b412 <vsnprintf+0x46>
            strn_print_env.cur[-1] = 0;
   1b408:	69fb      	ldr	r3, [r7, #28]
   1b40a:	3b01      	subs	r3, #1
   1b40c:	2200      	movs	r2, #0
   1b40e:	701a      	strb	r2, [r3, #0]
   1b410:	e002      	b.n	1b418 <vsnprintf+0x4c>
        } else {
            strn_print_env.cur[0] = 0;
   1b412:	69fb      	ldr	r3, [r7, #28]
   1b414:	2200      	movs	r2, #0
   1b416:	701a      	strb	r2, [r3, #0]
        }
    }
    return len;
   1b418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   1b41a:	4618      	mov	r0, r3
   1b41c:	3728      	adds	r7, #40	; 0x28
   1b41e:	46bd      	mov	sp, r7
   1b420:	bd80      	pop	{r7, pc}
   1b422:	bf00      	nop
   1b424:	0001b37f 	.word	0x0001b37f

0001b428 <snprintf>:

int snprintf(char *str, size_t size, const char *fmt, ...) {
   1b428:	b40c      	push	{r2, r3}
   1b42a:	b580      	push	{r7, lr}
   1b42c:	b084      	sub	sp, #16
   1b42e:	af00      	add	r7, sp, #0
   1b430:	6078      	str	r0, [r7, #4]
   1b432:	6039      	str	r1, [r7, #0]
    va_list ap;
    va_start(ap, fmt);
   1b434:	f107 031c 	add.w	r3, r7, #28
   1b438:	60bb      	str	r3, [r7, #8]
    int ret = vsnprintf(str, size, fmt, ap);
   1b43a:	68bb      	ldr	r3, [r7, #8]
   1b43c:	69ba      	ldr	r2, [r7, #24]
   1b43e:	6839      	ldr	r1, [r7, #0]
   1b440:	6878      	ldr	r0, [r7, #4]
   1b442:	f7ff ffc3 	bl	1b3cc <vsnprintf>
   1b446:	60f8      	str	r0, [r7, #12]
    va_end(ap);
    return ret;
   1b448:	68fb      	ldr	r3, [r7, #12]
}
   1b44a:	4618      	mov	r0, r3
   1b44c:	3710      	adds	r7, #16
   1b44e:	46bd      	mov	sp, r7
   1b450:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
   1b454:	b002      	add	sp, #8
   1b456:	4770      	bx	lr

0001b458 <mp_hal_stdout_tx_strn_cooked>:
 * implementation below can be used.
 */

// Send "cooked" string of given length, where every occurrence of
// LF character is replaced with CR LF.
void mp_hal_stdout_tx_strn_cooked(const char *str, size_t len) {
   1b458:	b580      	push	{r7, lr}
   1b45a:	b082      	sub	sp, #8
   1b45c:	af00      	add	r7, sp, #0
   1b45e:	6078      	str	r0, [r7, #4]
   1b460:	6039      	str	r1, [r7, #0]
    while (len--) {
   1b462:	e00e      	b.n	1b482 <mp_hal_stdout_tx_strn_cooked+0x2a>
        if (*str == '\n') {
   1b464:	687b      	ldr	r3, [r7, #4]
   1b466:	781b      	ldrb	r3, [r3, #0]
   1b468:	2b0a      	cmp	r3, #10
   1b46a:	d103      	bne.n	1b474 <mp_hal_stdout_tx_strn_cooked+0x1c>
            mp_hal_stdout_tx_strn("\r", 1);
   1b46c:	2101      	movs	r1, #1
   1b46e:	4809      	ldr	r0, [pc, #36]	; (1b494 <mp_hal_stdout_tx_strn_cooked+0x3c>)
   1b470:	f7ff ff10 	bl	1b294 <mp_hal_stdout_tx_strn>
        }
        mp_hal_stdout_tx_strn(str++, 1);
   1b474:	687b      	ldr	r3, [r7, #4]
   1b476:	1c5a      	adds	r2, r3, #1
   1b478:	607a      	str	r2, [r7, #4]
   1b47a:	2101      	movs	r1, #1
   1b47c:	4618      	mov	r0, r3
   1b47e:	f7ff ff09 	bl	1b294 <mp_hal_stdout_tx_strn>
    while (len--) {
   1b482:	683b      	ldr	r3, [r7, #0]
   1b484:	1e5a      	subs	r2, r3, #1
   1b486:	603a      	str	r2, [r7, #0]
   1b488:	2b00      	cmp	r3, #0
   1b48a:	d1eb      	bne.n	1b464 <mp_hal_stdout_tx_strn_cooked+0xc>
    }
}
   1b48c:	bf00      	nop
   1b48e:	3708      	adds	r7, #8
   1b490:	46bd      	mov	sp, r7
   1b492:	bd80      	pop	{r7, pc}
   1b494:	00022b00 	.word	0x00022b00

0001b498 <mp_hal_stdout_tx_str>:

// Send zero-terminated string
void mp_hal_stdout_tx_str(const char *str) {
   1b498:	b580      	push	{r7, lr}
   1b49a:	b082      	sub	sp, #8
   1b49c:	af00      	add	r7, sp, #0
   1b49e:	6078      	str	r0, [r7, #4]
    mp_hal_stdout_tx_strn(str, strlen(str));
   1b4a0:	6878      	ldr	r0, [r7, #4]
   1b4a2:	f000 fbc5 	bl	1bc30 <strlen>
   1b4a6:	4603      	mov	r3, r0
   1b4a8:	4619      	mov	r1, r3
   1b4aa:	6878      	ldr	r0, [r7, #4]
   1b4ac:	f7ff fef2 	bl	1b294 <mp_hal_stdout_tx_strn>
}
   1b4b0:	bf00      	nop
   1b4b2:	3708      	adds	r7, #8
   1b4b4:	46bd      	mov	sp, r7
   1b4b6:	bd80      	pop	{r7, pc}

0001b4b8 <vstr_reset>:
static inline void vstr_reset(vstr_t *vstr) { vstr->len = 0; }
   1b4b8:	b480      	push	{r7}
   1b4ba:	b083      	sub	sp, #12
   1b4bc:	af00      	add	r7, sp, #0
   1b4be:	6078      	str	r0, [r7, #4]
   1b4c0:	687b      	ldr	r3, [r7, #4]
   1b4c2:	2200      	movs	r2, #0
   1b4c4:	605a      	str	r2, [r3, #4]
   1b4c6:	bf00      	nop
   1b4c8:	370c      	adds	r7, #12
   1b4ca:	46bd      	mov	sp, r7
   1b4cc:	f85d 7b04 	ldr.w	r7, [sp], #4
   1b4d0:	4770      	bx	lr

0001b4d2 <vstr_len>:
static inline size_t vstr_len(vstr_t *vstr) { return vstr->len; }
   1b4d2:	b480      	push	{r7}
   1b4d4:	b083      	sub	sp, #12
   1b4d6:	af00      	add	r7, sp, #0
   1b4d8:	6078      	str	r0, [r7, #4]
   1b4da:	687b      	ldr	r3, [r7, #4]
   1b4dc:	685b      	ldr	r3, [r3, #4]
   1b4de:	4618      	mov	r0, r3
   1b4e0:	370c      	adds	r7, #12
   1b4e2:	46bd      	mov	sp, r7
   1b4e4:	f85d 7b04 	ldr.w	r7, [sp], #4
   1b4e8:	4770      	bx	lr

0001b4ea <mp_hal_ticks_ms>:
static inline mp_uint_t mp_hal_ticks_ms(void) { return 0; }
   1b4ea:	b480      	push	{r7}
   1b4ec:	af00      	add	r7, sp, #0
   1b4ee:	2300      	movs	r3, #0
   1b4f0:	4618      	mov	r0, r3
   1b4f2:	46bd      	mov	sp, r7
   1b4f4:	f85d 7b04 	ldr.w	r7, [sp], #4
   1b4f8:	4770      	bx	lr

0001b4fa <mp_hal_set_interrupt_char>:
static inline void mp_hal_set_interrupt_char(char c) {}
   1b4fa:	b480      	push	{r7}
   1b4fc:	b083      	sub	sp, #12
   1b4fe:	af00      	add	r7, sp, #0
   1b500:	4603      	mov	r3, r0
   1b502:	71fb      	strb	r3, [r7, #7]
   1b504:	bf00      	nop
   1b506:	370c      	adds	r7, #12
   1b508:	46bd      	mov	sp, r7
   1b50a:	f85d 7b04 	ldr.w	r7, [sp], #4
   1b50e:	4770      	bx	lr

0001b510 <parse_compile_execute>:
// parses, compiles and executes the code in the lexer
// frees the lexer before returning
// EXEC_FLAG_PRINT_EOF prints 2 EOF chars: 1 after normal output, 1 after exception output
// EXEC_FLAG_ALLOW_DEBUGGING allows debugging info to be printed after executing the code
// EXEC_FLAG_IS_REPL is used for REPL inputs (flag passed on to mp_compile)
STATIC int parse_compile_execute(const void *source, mp_parse_input_kind_t input_kind, int exec_flags) {
   1b510:	b580      	push	{r7, lr}
   1b512:	b0a0      	sub	sp, #128	; 0x80
   1b514:	af02      	add	r7, sp, #8
   1b516:	60f8      	str	r0, [r7, #12]
   1b518:	60b9      	str	r1, [r7, #8]
   1b51a:	607a      	str	r2, [r7, #4]
    int ret = 0;
   1b51c:	2300      	movs	r3, #0
   1b51e:	677b      	str	r3, [r7, #116]	; 0x74
    uint32_t start = 0;
   1b520:	2300      	movs	r3, #0
   1b522:	673b      	str	r3, [r7, #112]	; 0x70

    // by default a SystemExit exception returns 0
    pyexec_system_exit = 0;
   1b524:	4b60      	ldr	r3, [pc, #384]	; (1b6a8 <parse_compile_execute+0x198>)
   1b526:	2200      	movs	r2, #0
   1b528:	601a      	str	r2, [r3, #0]

    nlr_buf_t nlr;
    if (nlr_push(&nlr) == 0) {
   1b52a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   1b52e:	4618      	mov	r0, r3
   1b530:	f7e4 fec4 	bl	2bc <nlr_push>
   1b534:	4603      	mov	r3, r0
   1b536:	2b00      	cmp	r3, #0
   1b538:	d15b      	bne.n	1b5f2 <parse_compile_execute+0xe2>
        mp_obj_t module_fun;
        #if MICROPY_MODULE_FROZEN_MPY
        if (exec_flags & EXEC_FLAG_SOURCE_IS_RAW_CODE) {
   1b53a:	687b      	ldr	r3, [r7, #4]
   1b53c:	f003 0308 	and.w	r3, r3, #8
   1b540:	2b00      	cmp	r3, #0
   1b542:	d006      	beq.n	1b552 <parse_compile_execute+0x42>
            // source is a raw_code object, create the function
            module_fun = mp_make_function_from_raw_code(source, MP_OBJ_NULL, MP_OBJ_NULL);
   1b544:	2200      	movs	r2, #0
   1b546:	2100      	movs	r1, #0
   1b548:	68f8      	ldr	r0, [r7, #12]
   1b54a:	f7ef fe60 	bl	b20e <mp_make_function_from_raw_code>
   1b54e:	66f8      	str	r0, [r7, #108]	; 0x6c
   1b550:	e035      	b.n	1b5be <parse_compile_execute+0xae>
        } else
        #endif
        {
            #if MICROPY_ENABLE_COMPILER
            mp_lexer_t *lex;
            if (exec_flags & EXEC_FLAG_SOURCE_IS_VSTR) {
   1b552:	687b      	ldr	r3, [r7, #4]
   1b554:	f003 0310 	and.w	r3, r3, #16
   1b558:	2b00      	cmp	r3, #0
   1b55a:	d00b      	beq.n	1b574 <parse_compile_execute+0x64>
                const vstr_t *vstr = source;
   1b55c:	68fb      	ldr	r3, [r7, #12]
   1b55e:	667b      	str	r3, [r7, #100]	; 0x64
                lex = mp_lexer_new_from_str_len(MP_QSTR__lt_stdin_gt_, vstr->buf, vstr->len, 0);
   1b560:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   1b562:	6899      	ldr	r1, [r3, #8]
   1b564:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   1b566:	685a      	ldr	r2, [r3, #4]
   1b568:	2300      	movs	r3, #0
   1b56a:	2036      	movs	r0, #54	; 0x36
   1b56c:	f7e8 f8bb 	bl	36e6 <mp_lexer_new_from_str_len>
   1b570:	66b8      	str	r0, [r7, #104]	; 0x68
   1b572:	e00b      	b.n	1b58c <parse_compile_execute+0x7c>
            } else if (exec_flags & EXEC_FLAG_SOURCE_IS_FILENAME) {
   1b574:	687b      	ldr	r3, [r7, #4]
   1b576:	f003 0320 	and.w	r3, r3, #32
   1b57a:	2b00      	cmp	r3, #0
   1b57c:	d004      	beq.n	1b588 <parse_compile_execute+0x78>
                lex = mp_lexer_new_from_file(source);
   1b57e:	68f8      	ldr	r0, [r7, #12]
   1b580:	f7ff fdf0 	bl	1b164 <mp_lexer_new_from_file>
   1b584:	66b8      	str	r0, [r7, #104]	; 0x68
   1b586:	e001      	b.n	1b58c <parse_compile_execute+0x7c>
            } else {
                lex = (mp_lexer_t*)source;
   1b588:	68fb      	ldr	r3, [r7, #12]
   1b58a:	66bb      	str	r3, [r7, #104]	; 0x68
            }
            // source is a lexer, parse and compile the script
            qstr source_name = lex->source_name;
   1b58c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   1b58e:	681b      	ldr	r3, [r3, #0]
   1b590:	663b      	str	r3, [r7, #96]	; 0x60
            mp_parse_tree_t parse_tree = mp_parse(lex, input_kind);
   1b592:	f107 0324 	add.w	r3, r7, #36	; 0x24
   1b596:	68ba      	ldr	r2, [r7, #8]
   1b598:	6eb9      	ldr	r1, [r7, #104]	; 0x68
   1b59a:	4618      	mov	r0, r3
   1b59c:	f7e8 fe9c 	bl	42d8 <mp_parse>
            module_fun = mp_compile(&parse_tree, source_name, MP_EMIT_OPT_NONE, exec_flags & EXEC_FLAG_IS_REPL);
   1b5a0:	687b      	ldr	r3, [r7, #4]
   1b5a2:	f003 0304 	and.w	r3, r3, #4
   1b5a6:	2b00      	cmp	r3, #0
   1b5a8:	bf14      	ite	ne
   1b5aa:	2301      	movne	r3, #1
   1b5ac:	2300      	moveq	r3, #0
   1b5ae:	b2db      	uxtb	r3, r3
   1b5b0:	f107 0024 	add.w	r0, r7, #36	; 0x24
   1b5b4:	2200      	movs	r2, #0
   1b5b6:	6e39      	ldr	r1, [r7, #96]	; 0x60
   1b5b8:	f7ee f905 	bl	97c6 <mp_compile>
   1b5bc:	66f8      	str	r0, [r7, #108]	; 0x6c
            mp_raise_msg(&mp_type_RuntimeError, "script compilation not supported");
            #endif
        }

        // execute code
        mp_hal_set_interrupt_char(CHAR_CTRL_C); // allow ctrl-C to interrupt us
   1b5be:	2003      	movs	r0, #3
   1b5c0:	f7ff ff9b 	bl	1b4fa <mp_hal_set_interrupt_char>
        start = mp_hal_ticks_ms();
   1b5c4:	f7ff ff91 	bl	1b4ea <mp_hal_ticks_ms>
   1b5c8:	6738      	str	r0, [r7, #112]	; 0x70
        mp_call_function_0(module_fun);
   1b5ca:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
   1b5cc:	f7f0 fbb6 	bl	bd3c <mp_call_function_0>
        mp_hal_set_interrupt_char(-1); // disable interrupt
   1b5d0:	20ff      	movs	r0, #255	; 0xff
   1b5d2:	f7ff ff92 	bl	1b4fa <mp_hal_set_interrupt_char>
        nlr_pop();
   1b5d6:	f7e4 fe5f 	bl	298 <nlr_pop>
        ret = 1;
   1b5da:	2301      	movs	r3, #1
   1b5dc:	677b      	str	r3, [r7, #116]	; 0x74
        if (exec_flags & EXEC_FLAG_PRINT_EOF) {
   1b5de:	687b      	ldr	r3, [r7, #4]
   1b5e0:	f003 0301 	and.w	r3, r3, #1
   1b5e4:	2b00      	cmp	r3, #0
   1b5e6:	d027      	beq.n	1b638 <parse_compile_execute+0x128>
            mp_hal_stdout_tx_strn("\x04", 1);
   1b5e8:	2101      	movs	r1, #1
   1b5ea:	4830      	ldr	r0, [pc, #192]	; (1b6ac <parse_compile_execute+0x19c>)
   1b5ec:	f7ff fe52 	bl	1b294 <mp_hal_stdout_tx_strn>
   1b5f0:	e022      	b.n	1b638 <parse_compile_execute+0x128>
        }
    } else {
        // uncaught exception
        // FIXME it could be that an interrupt happens just before we disable it here
        mp_hal_set_interrupt_char(-1); // disable interrupt
   1b5f2:	20ff      	movs	r0, #255	; 0xff
   1b5f4:	f7ff ff81 	bl	1b4fa <mp_hal_set_interrupt_char>
        // print EOF after normal output
        if (exec_flags & EXEC_FLAG_PRINT_EOF) {
   1b5f8:	687b      	ldr	r3, [r7, #4]
   1b5fa:	f003 0301 	and.w	r3, r3, #1
   1b5fe:	2b00      	cmp	r3, #0
   1b600:	d003      	beq.n	1b60a <parse_compile_execute+0xfa>
            mp_hal_stdout_tx_strn("\x04", 1);
   1b602:	2101      	movs	r1, #1
   1b604:	4829      	ldr	r0, [pc, #164]	; (1b6ac <parse_compile_execute+0x19c>)
   1b606:	f7ff fe45 	bl	1b294 <mp_hal_stdout_tx_strn>
        }
        // check for SystemExit
        if (mp_obj_is_subclass_fast(mp_obj_get_type((mp_obj_t)nlr.ret_val), &mp_type_SystemExit)) {
   1b60a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1b60c:	4618      	mov	r0, r3
   1b60e:	f7f2 f89f 	bl	d750 <mp_obj_get_type>
   1b612:	4603      	mov	r3, r0
   1b614:	4926      	ldr	r1, [pc, #152]	; (1b6b0 <parse_compile_execute+0x1a0>)
   1b616:	4618      	mov	r0, r3
   1b618:	f7fb fd1e 	bl	17058 <mp_obj_is_subclass_fast>
   1b61c:	4603      	mov	r3, r0
   1b61e:	2b00      	cmp	r3, #0
   1b620:	d003      	beq.n	1b62a <parse_compile_execute+0x11a>
            // at the moment, the value of SystemExit is unused
            ret = pyexec_system_exit;
   1b622:	4b21      	ldr	r3, [pc, #132]	; (1b6a8 <parse_compile_execute+0x198>)
   1b624:	681b      	ldr	r3, [r3, #0]
   1b626:	677b      	str	r3, [r7, #116]	; 0x74
   1b628:	e006      	b.n	1b638 <parse_compile_execute+0x128>
        } else {
            mp_obj_print_exception(&mp_plat_print, (mp_obj_t)nlr.ret_val);
   1b62a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1b62c:	4619      	mov	r1, r3
   1b62e:	4821      	ldr	r0, [pc, #132]	; (1b6b4 <parse_compile_execute+0x1a4>)
   1b630:	f7f2 f8fa 	bl	d828 <mp_obj_print_exception>
            ret = 0;
   1b634:	2300      	movs	r3, #0
   1b636:	677b      	str	r3, [r7, #116]	; 0x74
        }
    }

    // display debugging info if wanted
    if ((exec_flags & EXEC_FLAG_ALLOW_DEBUGGING) && repl_display_debugging_info) {
   1b638:	687b      	ldr	r3, [r7, #4]
   1b63a:	f003 0302 	and.w	r3, r3, #2
   1b63e:	2b00      	cmp	r3, #0
   1b640:	d024      	beq.n	1b68c <parse_compile_execute+0x17c>
   1b642:	4b1d      	ldr	r3, [pc, #116]	; (1b6b8 <parse_compile_execute+0x1a8>)
   1b644:	781b      	ldrb	r3, [r3, #0]
   1b646:	2b00      	cmp	r3, #0
   1b648:	d020      	beq.n	1b68c <parse_compile_execute+0x17c>
        mp_uint_t ticks = mp_hal_ticks_ms() - start; // TODO implement a function that does this properly
   1b64a:	f7ff ff4e 	bl	1b4ea <mp_hal_ticks_ms>
   1b64e:	4602      	mov	r2, r0
   1b650:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   1b652:	1ad3      	subs	r3, r2, r3
   1b654:	65fb      	str	r3, [r7, #92]	; 0x5c
        printf("took " UINT_FMT " ms\n", ticks);
   1b656:	6df9      	ldr	r1, [r7, #92]	; 0x5c
   1b658:	4818      	ldr	r0, [pc, #96]	; (1b6bc <parse_compile_execute+0x1ac>)
   1b65a:	f7ff fe3b 	bl	1b2d4 <printf>
        // qstr info
        {
            size_t n_pool, n_qstr, n_str_data_bytes, n_total_bytes;
            qstr_pool_info(&n_pool, &n_qstr, &n_str_data_bytes, &n_total_bytes);
   1b65e:	f107 0314 	add.w	r3, r7, #20
   1b662:	f107 0218 	add.w	r2, r7, #24
   1b666:	f107 011c 	add.w	r1, r7, #28
   1b66a:	f107 0020 	add.w	r0, r7, #32
   1b66e:	f7e5 fdd4 	bl	121a <qstr_pool_info>
            printf("qstr:\n  n_pool=" UINT_FMT "\n  n_qstr=" UINT_FMT "\n  "
   1b672:	6a39      	ldr	r1, [r7, #32]
   1b674:	69fa      	ldr	r2, [r7, #28]
   1b676:	69b8      	ldr	r0, [r7, #24]
   1b678:	697b      	ldr	r3, [r7, #20]
   1b67a:	9300      	str	r3, [sp, #0]
   1b67c:	4603      	mov	r3, r0
   1b67e:	4810      	ldr	r0, [pc, #64]	; (1b6c0 <parse_compile_execute+0x1b0>)
   1b680:	f7ff fe28 	bl	1b2d4 <printf>
                   (unsigned)n_pool, (unsigned)n_qstr, (unsigned)n_str_data_bytes, (unsigned)n_total_bytes);
        }

        #if MICROPY_ENABLE_GC
        // run collection and print GC info
        gc_collect();
   1b684:	f7ff fd54 	bl	1b130 <gc_collect>
        gc_dump_info();
   1b688:	f7e5 fad8 	bl	c3c <gc_dump_info>
        #endif
    }

    if (exec_flags & EXEC_FLAG_PRINT_EOF) {
   1b68c:	687b      	ldr	r3, [r7, #4]
   1b68e:	f003 0301 	and.w	r3, r3, #1
   1b692:	2b00      	cmp	r3, #0
   1b694:	d003      	beq.n	1b69e <parse_compile_execute+0x18e>
        mp_hal_stdout_tx_strn("\x04", 1);
   1b696:	2101      	movs	r1, #1
   1b698:	4804      	ldr	r0, [pc, #16]	; (1b6ac <parse_compile_execute+0x19c>)
   1b69a:	f7ff fdfb 	bl	1b294 <mp_hal_stdout_tx_strn>
    }

    return ret;
   1b69e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
}
   1b6a0:	4618      	mov	r0, r3
   1b6a2:	3778      	adds	r7, #120	; 0x78
   1b6a4:	46bd      	mov	sp, r7
   1b6a6:	bd80      	pop	{r7, pc}
   1b6a8:	20000a08 	.word	0x20000a08
   1b6ac:	00022b04 	.word	0x00022b04
   1b6b0:	0001ffbc 	.word	0x0001ffbc
   1b6b4:	0001d5ac 	.word	0x0001d5ac
   1b6b8:	20000a0c 	.word	0x20000a0c
   1b6bc:	00022b08 	.word	0x00022b08
   1b6c0:	00022b14 	.word	0x00022b14

0001b6c4 <pyexec_raw_repl>:
    return res;
}

#else // MICROPY_REPL_EVENT_DRIVEN

int pyexec_raw_repl(void) {
   1b6c4:	b580      	push	{r7, lr}
   1b6c6:	b086      	sub	sp, #24
   1b6c8:	af00      	add	r7, sp, #0
    vstr_t line;
    vstr_init(&line, 32);
   1b6ca:	463b      	mov	r3, r7
   1b6cc:	2120      	movs	r1, #32
   1b6ce:	4618      	mov	r0, r3
   1b6d0:	f7e5 fe06 	bl	12e0 <vstr_init>

raw_repl_reset:
    mp_hal_stdout_tx_str("raw REPL; CTRL-B to exit\r\n");
   1b6d4:	482a      	ldr	r0, [pc, #168]	; (1b780 <pyexec_raw_repl+0xbc>)
   1b6d6:	f7ff fedf 	bl	1b498 <mp_hal_stdout_tx_str>

    for (;;) {
        vstr_reset(&line);
   1b6da:	463b      	mov	r3, r7
   1b6dc:	4618      	mov	r0, r3
   1b6de:	f7ff feeb 	bl	1b4b8 <vstr_reset>
        mp_hal_stdout_tx_str(">");
   1b6e2:	4828      	ldr	r0, [pc, #160]	; (1b784 <pyexec_raw_repl+0xc0>)
   1b6e4:	f7ff fed8 	bl	1b498 <mp_hal_stdout_tx_str>
        for (;;) {
            int c = mp_hal_stdin_rx_chr();
   1b6e8:	f7ff fdbc 	bl	1b264 <mp_hal_stdin_rx_chr>
   1b6ec:	6178      	str	r0, [r7, #20]
            if (c == CHAR_CTRL_A) {
   1b6ee:	697b      	ldr	r3, [r7, #20]
   1b6f0:	2b01      	cmp	r3, #1
   1b6f2:	d100      	bne.n	1b6f6 <pyexec_raw_repl+0x32>
                // reset raw REPL
                goto raw_repl_reset;
   1b6f4:	e7ee      	b.n	1b6d4 <pyexec_raw_repl+0x10>
            } else if (c == CHAR_CTRL_B) {
   1b6f6:	697b      	ldr	r3, [r7, #20]
   1b6f8:	2b02      	cmp	r3, #2
   1b6fa:	d10b      	bne.n	1b714 <pyexec_raw_repl+0x50>
                // change to friendly REPL
                mp_hal_stdout_tx_str("\r\n");
   1b6fc:	4822      	ldr	r0, [pc, #136]	; (1b788 <pyexec_raw_repl+0xc4>)
   1b6fe:	f7ff fecb 	bl	1b498 <mp_hal_stdout_tx_str>
                vstr_clear(&line);
   1b702:	463b      	mov	r3, r7
   1b704:	4618      	mov	r0, r3
   1b706:	f7e5 fe4f 	bl	13a8 <vstr_clear>
                pyexec_mode_kind = PYEXEC_MODE_FRIENDLY_REPL;
   1b70a:	4b20      	ldr	r3, [pc, #128]	; (1b78c <pyexec_raw_repl+0xc8>)
   1b70c:	2201      	movs	r2, #1
   1b70e:	601a      	str	r2, [r3, #0]
                return 0;
   1b710:	2300      	movs	r3, #0
   1b712:	e030      	b.n	1b776 <pyexec_raw_repl+0xb2>
            } else if (c == CHAR_CTRL_C) {
   1b714:	697b      	ldr	r3, [r7, #20]
   1b716:	2b03      	cmp	r3, #3
   1b718:	d104      	bne.n	1b724 <pyexec_raw_repl+0x60>
                // clear line
                vstr_reset(&line);
   1b71a:	463b      	mov	r3, r7
   1b71c:	4618      	mov	r0, r3
   1b71e:	f7ff fecb 	bl	1b4b8 <vstr_reset>
   1b722:	e7e1      	b.n	1b6e8 <pyexec_raw_repl+0x24>
            } else if (c == CHAR_CTRL_D) {
   1b724:	697b      	ldr	r3, [r7, #20]
   1b726:	2b04      	cmp	r3, #4
   1b728:	d007      	beq.n	1b73a <pyexec_raw_repl+0x76>
                // input finished
                break;
            } else {
                // let through any other raw 8-bit value
                vstr_add_byte(&line, c);
   1b72a:	697b      	ldr	r3, [r7, #20]
   1b72c:	b2da      	uxtb	r2, r3
   1b72e:	463b      	mov	r3, r7
   1b730:	4611      	mov	r1, r2
   1b732:	4618      	mov	r0, r3
   1b734:	f7e5 ff26 	bl	1584 <vstr_add_byte>
        for (;;) {
   1b738:	e7d6      	b.n	1b6e8 <pyexec_raw_repl+0x24>
                break;
   1b73a:	bf00      	nop
            }
        }

        // indicate reception of command
        mp_hal_stdout_tx_str("OK");
   1b73c:	4814      	ldr	r0, [pc, #80]	; (1b790 <pyexec_raw_repl+0xcc>)
   1b73e:	f7ff feab 	bl	1b498 <mp_hal_stdout_tx_str>

        if (line.len == 0) {
   1b742:	687b      	ldr	r3, [r7, #4]
   1b744:	2b00      	cmp	r3, #0
   1b746:	d109      	bne.n	1b75c <pyexec_raw_repl+0x98>
            // exit for a soft reset
            mp_hal_stdout_tx_str("\r\n");
   1b748:	480f      	ldr	r0, [pc, #60]	; (1b788 <pyexec_raw_repl+0xc4>)
   1b74a:	f7ff fea5 	bl	1b498 <mp_hal_stdout_tx_str>
            vstr_clear(&line);
   1b74e:	463b      	mov	r3, r7
   1b750:	4618      	mov	r0, r3
   1b752:	f7e5 fe29 	bl	13a8 <vstr_clear>
            return PYEXEC_FORCED_EXIT;
   1b756:	f44f 7380 	mov.w	r3, #256	; 0x100
   1b75a:	e00c      	b.n	1b776 <pyexec_raw_repl+0xb2>
        }

        int ret = parse_compile_execute(&line, MP_PARSE_FILE_INPUT, EXEC_FLAG_PRINT_EOF | EXEC_FLAG_SOURCE_IS_VSTR);
   1b75c:	463b      	mov	r3, r7
   1b75e:	2211      	movs	r2, #17
   1b760:	2101      	movs	r1, #1
   1b762:	4618      	mov	r0, r3
   1b764:	f7ff fed4 	bl	1b510 <parse_compile_execute>
   1b768:	6138      	str	r0, [r7, #16]
        if (ret & PYEXEC_FORCED_EXIT) {
   1b76a:	693b      	ldr	r3, [r7, #16]
   1b76c:	f403 7380 	and.w	r3, r3, #256	; 0x100
   1b770:	2b00      	cmp	r3, #0
   1b772:	d0b2      	beq.n	1b6da <pyexec_raw_repl+0x16>
            return ret;
   1b774:	693b      	ldr	r3, [r7, #16]
        }
    }
}
   1b776:	4618      	mov	r0, r3
   1b778:	3718      	adds	r7, #24
   1b77a:	46bd      	mov	sp, r7
   1b77c:	bd80      	pop	{r7, pc}
   1b77e:	bf00      	nop
   1b780:	00022b5c 	.word	0x00022b5c
   1b784:	00022b78 	.word	0x00022b78
   1b788:	00022b7c 	.word	0x00022b7c
   1b78c:	20000000 	.word	0x20000000
   1b790:	00022b80 	.word	0x00022b80

0001b794 <pyexec_friendly_repl>:

int pyexec_friendly_repl(void) {
   1b794:	b580      	push	{r7, lr}
   1b796:	b088      	sub	sp, #32
   1b798:	af00      	add	r7, sp, #0
    vstr_t line;
    vstr_init(&line, 32);
   1b79a:	f107 0308 	add.w	r3, r7, #8
   1b79e:	2120      	movs	r1, #32
   1b7a0:	4618      	mov	r0, r3
   1b7a2:	f7e5 fd9d 	bl	12e0 <vstr_init>
    mp_obj_t lcd_o = mp_call_function_0(mp_load_name(qstr_from_str("LCD")));
    mp_call_function_1(mp_load_attr(lcd_o, qstr_from_str("light")), mp_const_true);
#endif

friendly_repl_reset:
    mp_hal_stdout_tx_str("MicroPython " MICROPY_GIT_TAG " on " MICROPY_BUILD_DATE "; " MICROPY_HW_BOARD_NAME " with " MICROPY_HW_MCU_NAME "\r\n");
   1b7a6:	485a      	ldr	r0, [pc, #360]	; (1b910 <pyexec_friendly_repl+0x17c>)
   1b7a8:	f7ff fe76 	bl	1b498 <mp_hal_stdout_tx_str>
                mp_hal_stdout_tx_str("PYB: enabling IRQs\r\n");
            }
        }
        #endif

        vstr_reset(&line);
   1b7ac:	f107 0308 	add.w	r3, r7, #8
   1b7b0:	4618      	mov	r0, r3
   1b7b2:	f7ff fe81 	bl	1b4b8 <vstr_reset>
        int ret = readline(&line, ">>> ");
   1b7b6:	f107 0308 	add.w	r3, r7, #8
   1b7ba:	4956      	ldr	r1, [pc, #344]	; (1b914 <pyexec_friendly_repl+0x180>)
   1b7bc:	4618      	mov	r0, r3
   1b7be:	f000 fe81 	bl	1c4c4 <readline>
   1b7c2:	61b8      	str	r0, [r7, #24]
        mp_parse_input_kind_t parse_input_kind = MP_PARSE_SINGLE_INPUT;
   1b7c4:	2300      	movs	r3, #0
   1b7c6:	61fb      	str	r3, [r7, #28]

        if (ret == CHAR_CTRL_A) {
   1b7c8:	69bb      	ldr	r3, [r7, #24]
   1b7ca:	2b01      	cmp	r3, #1
   1b7cc:	d10c      	bne.n	1b7e8 <pyexec_friendly_repl+0x54>
            // change to raw REPL
            mp_hal_stdout_tx_str("\r\n");
   1b7ce:	4852      	ldr	r0, [pc, #328]	; (1b918 <pyexec_friendly_repl+0x184>)
   1b7d0:	f7ff fe62 	bl	1b498 <mp_hal_stdout_tx_str>
            vstr_clear(&line);
   1b7d4:	f107 0308 	add.w	r3, r7, #8
   1b7d8:	4618      	mov	r0, r3
   1b7da:	f7e5 fde5 	bl	13a8 <vstr_clear>
            pyexec_mode_kind = PYEXEC_MODE_RAW_REPL;
   1b7de:	4b4f      	ldr	r3, [pc, #316]	; (1b91c <pyexec_friendly_repl+0x188>)
   1b7e0:	2200      	movs	r2, #0
   1b7e2:	601a      	str	r2, [r3, #0]
            return 0;
   1b7e4:	2300      	movs	r3, #0
   1b7e6:	e08f      	b.n	1b908 <pyexec_friendly_repl+0x174>
        } else if (ret == CHAR_CTRL_B) {
   1b7e8:	69bb      	ldr	r3, [r7, #24]
   1b7ea:	2b02      	cmp	r3, #2
   1b7ec:	d103      	bne.n	1b7f6 <pyexec_friendly_repl+0x62>
            // reset friendly REPL
            mp_hal_stdout_tx_str("\r\n");
   1b7ee:	484a      	ldr	r0, [pc, #296]	; (1b918 <pyexec_friendly_repl+0x184>)
   1b7f0:	f7ff fe52 	bl	1b498 <mp_hal_stdout_tx_str>
            goto friendly_repl_reset;
   1b7f4:	e7d7      	b.n	1b7a6 <pyexec_friendly_repl+0x12>
        } else if (ret == CHAR_CTRL_C) {
   1b7f6:	69bb      	ldr	r3, [r7, #24]
   1b7f8:	2b03      	cmp	r3, #3
   1b7fa:	d103      	bne.n	1b804 <pyexec_friendly_repl+0x70>
            // break
            mp_hal_stdout_tx_str("\r\n");
   1b7fc:	4846      	ldr	r0, [pc, #280]	; (1b918 <pyexec_friendly_repl+0x184>)
   1b7fe:	f7ff fe4b 	bl	1b498 <mp_hal_stdout_tx_str>
            continue;
   1b802:	e080      	b.n	1b906 <pyexec_friendly_repl+0x172>
        } else if (ret == CHAR_CTRL_D) {
   1b804:	69bb      	ldr	r3, [r7, #24]
   1b806:	2b04      	cmp	r3, #4
   1b808:	d10a      	bne.n	1b820 <pyexec_friendly_repl+0x8c>
            // exit for a soft reset
            mp_hal_stdout_tx_str("\r\n");
   1b80a:	4843      	ldr	r0, [pc, #268]	; (1b918 <pyexec_friendly_repl+0x184>)
   1b80c:	f7ff fe44 	bl	1b498 <mp_hal_stdout_tx_str>
            vstr_clear(&line);
   1b810:	f107 0308 	add.w	r3, r7, #8
   1b814:	4618      	mov	r0, r3
   1b816:	f7e5 fdc7 	bl	13a8 <vstr_clear>
            return PYEXEC_FORCED_EXIT;
   1b81a:	f44f 7380 	mov.w	r3, #256	; 0x100
   1b81e:	e073      	b.n	1b908 <pyexec_friendly_repl+0x174>
        } else if (ret == CHAR_CTRL_E) {
   1b820:	69bb      	ldr	r3, [r7, #24]
   1b822:	2b05      	cmp	r3, #5
   1b824:	d130      	bne.n	1b888 <pyexec_friendly_repl+0xf4>
            // paste mode
            mp_hal_stdout_tx_str("\r\npaste mode; Ctrl-C to cancel, Ctrl-D to finish\r\n=== ");
   1b826:	483e      	ldr	r0, [pc, #248]	; (1b920 <pyexec_friendly_repl+0x18c>)
   1b828:	f7ff fe36 	bl	1b498 <mp_hal_stdout_tx_str>
            vstr_reset(&line);
   1b82c:	f107 0308 	add.w	r3, r7, #8
   1b830:	4618      	mov	r0, r3
   1b832:	f7ff fe41 	bl	1b4b8 <vstr_reset>
            for (;;) {
                char c = mp_hal_stdin_rx_chr();
   1b836:	f7ff fd15 	bl	1b264 <mp_hal_stdin_rx_chr>
   1b83a:	4603      	mov	r3, r0
   1b83c:	b2db      	uxtb	r3, r3
   1b83e:	71fb      	strb	r3, [r7, #7]
                if (c == CHAR_CTRL_C) {
   1b840:	79fb      	ldrb	r3, [r7, #7]
   1b842:	2b03      	cmp	r3, #3
   1b844:	d103      	bne.n	1b84e <pyexec_friendly_repl+0xba>
                    // cancel everything
                    mp_hal_stdout_tx_str("\r\n");
   1b846:	4834      	ldr	r0, [pc, #208]	; (1b918 <pyexec_friendly_repl+0x184>)
   1b848:	f7ff fe26 	bl	1b498 <mp_hal_stdout_tx_str>
   1b84c:	e7ae      	b.n	1b7ac <pyexec_friendly_repl+0x18>
                    goto input_restart;
                } else if (c == CHAR_CTRL_D) {
   1b84e:	79fb      	ldrb	r3, [r7, #7]
   1b850:	2b04      	cmp	r3, #4
   1b852:	d105      	bne.n	1b860 <pyexec_friendly_repl+0xcc>
                    // end of input
                    mp_hal_stdout_tx_str("\r\n");
   1b854:	4830      	ldr	r0, [pc, #192]	; (1b918 <pyexec_friendly_repl+0x184>)
   1b856:	f7ff fe1f 	bl	1b498 <mp_hal_stdout_tx_str>
                    } else {
                        mp_hal_stdout_tx_strn(&c, 1);
                    }
                }
            }
            parse_input_kind = MP_PARSE_FILE_INPUT;
   1b85a:	2301      	movs	r3, #1
   1b85c:	61fb      	str	r3, [r7, #28]
   1b85e:	e041      	b.n	1b8e4 <pyexec_friendly_repl+0x150>
                    vstr_add_byte(&line, c);
   1b860:	79fa      	ldrb	r2, [r7, #7]
   1b862:	f107 0308 	add.w	r3, r7, #8
   1b866:	4611      	mov	r1, r2
   1b868:	4618      	mov	r0, r3
   1b86a:	f7e5 fe8b 	bl	1584 <vstr_add_byte>
                    if (c == '\r') {
   1b86e:	79fb      	ldrb	r3, [r7, #7]
   1b870:	2b0d      	cmp	r3, #13
   1b872:	d103      	bne.n	1b87c <pyexec_friendly_repl+0xe8>
                        mp_hal_stdout_tx_str("\r\n=== ");
   1b874:	482b      	ldr	r0, [pc, #172]	; (1b924 <pyexec_friendly_repl+0x190>)
   1b876:	f7ff fe0f 	bl	1b498 <mp_hal_stdout_tx_str>
   1b87a:	e7dc      	b.n	1b836 <pyexec_friendly_repl+0xa2>
                        mp_hal_stdout_tx_strn(&c, 1);
   1b87c:	1dfb      	adds	r3, r7, #7
   1b87e:	2101      	movs	r1, #1
   1b880:	4618      	mov	r0, r3
   1b882:	f7ff fd07 	bl	1b294 <mp_hal_stdout_tx_strn>
            for (;;) {
   1b886:	e7d6      	b.n	1b836 <pyexec_friendly_repl+0xa2>
        } else if (vstr_len(&line) == 0) {
   1b888:	f107 0308 	add.w	r3, r7, #8
   1b88c:	4618      	mov	r0, r3
   1b88e:	f7ff fe20 	bl	1b4d2 <vstr_len>
   1b892:	4603      	mov	r3, r0
   1b894:	2b00      	cmp	r3, #0
   1b896:	d035      	beq.n	1b904 <pyexec_friendly_repl+0x170>
            continue;
        } else {
            // got a line with non-zero length, see if it needs continuing
            while (mp_repl_continue_with_input(vstr_null_terminated_str(&line))) {
   1b898:	e016      	b.n	1b8c8 <pyexec_friendly_repl+0x134>
                vstr_add_byte(&line, '\n');
   1b89a:	f107 0308 	add.w	r3, r7, #8
   1b89e:	210a      	movs	r1, #10
   1b8a0:	4618      	mov	r0, r3
   1b8a2:	f7e5 fe6f 	bl	1584 <vstr_add_byte>
                ret = readline(&line, "... ");
   1b8a6:	f107 0308 	add.w	r3, r7, #8
   1b8aa:	491f      	ldr	r1, [pc, #124]	; (1b928 <pyexec_friendly_repl+0x194>)
   1b8ac:	4618      	mov	r0, r3
   1b8ae:	f000 fe09 	bl	1c4c4 <readline>
   1b8b2:	61b8      	str	r0, [r7, #24]
                if (ret == CHAR_CTRL_C) {
   1b8b4:	69bb      	ldr	r3, [r7, #24]
   1b8b6:	2b03      	cmp	r3, #3
   1b8b8:	d103      	bne.n	1b8c2 <pyexec_friendly_repl+0x12e>
                    // cancel everything
                    mp_hal_stdout_tx_str("\r\n");
   1b8ba:	4817      	ldr	r0, [pc, #92]	; (1b918 <pyexec_friendly_repl+0x184>)
   1b8bc:	f7ff fdec 	bl	1b498 <mp_hal_stdout_tx_str>
                    goto input_restart;
   1b8c0:	e774      	b.n	1b7ac <pyexec_friendly_repl+0x18>
                } else if (ret == CHAR_CTRL_D) {
   1b8c2:	69bb      	ldr	r3, [r7, #24]
   1b8c4:	2b04      	cmp	r3, #4
   1b8c6:	d00c      	beq.n	1b8e2 <pyexec_friendly_repl+0x14e>
            while (mp_repl_continue_with_input(vstr_null_terminated_str(&line))) {
   1b8c8:	f107 0308 	add.w	r3, r7, #8
   1b8cc:	4618      	mov	r0, r3
   1b8ce:	f7e5 fe3e 	bl	154e <vstr_null_terminated_str>
   1b8d2:	4603      	mov	r3, r0
   1b8d4:	4618      	mov	r0, r3
   1b8d6:	f7fe fff9 	bl	1a8cc <mp_repl_continue_with_input>
   1b8da:	4603      	mov	r3, r0
   1b8dc:	2b00      	cmp	r3, #0
   1b8de:	d1dc      	bne.n	1b89a <pyexec_friendly_repl+0x106>
   1b8e0:	e000      	b.n	1b8e4 <pyexec_friendly_repl+0x150>
                    // stop entering compound statement
                    break;
   1b8e2:	bf00      	nop
                }
            }
        }

        ret = parse_compile_execute(&line, parse_input_kind, EXEC_FLAG_ALLOW_DEBUGGING | EXEC_FLAG_IS_REPL | EXEC_FLAG_SOURCE_IS_VSTR);
   1b8e4:	f107 0308 	add.w	r3, r7, #8
   1b8e8:	2216      	movs	r2, #22
   1b8ea:	69f9      	ldr	r1, [r7, #28]
   1b8ec:	4618      	mov	r0, r3
   1b8ee:	f7ff fe0f 	bl	1b510 <parse_compile_execute>
   1b8f2:	61b8      	str	r0, [r7, #24]
        if (ret & PYEXEC_FORCED_EXIT) {
   1b8f4:	69bb      	ldr	r3, [r7, #24]
   1b8f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
   1b8fa:	2b00      	cmp	r3, #0
   1b8fc:	f43f af56 	beq.w	1b7ac <pyexec_friendly_repl+0x18>
            return ret;
   1b900:	69bb      	ldr	r3, [r7, #24]
   1b902:	e001      	b.n	1b908 <pyexec_friendly_repl+0x174>
            continue;
   1b904:	bf00      	nop
    for (;;) {
   1b906:	e751      	b.n	1b7ac <pyexec_friendly_repl+0x18>
        }
    }
}
   1b908:	4618      	mov	r0, r3
   1b90a:	3720      	adds	r7, #32
   1b90c:	46bd      	mov	sp, r7
   1b90e:	bd80      	pop	{r7, pc}
   1b910:	00022b84 	.word	0x00022b84
   1b914:	00022bd8 	.word	0x00022bd8
   1b918:	00022b7c 	.word	0x00022b7c
   1b91c:	20000000 	.word	0x20000000
   1b920:	00022be0 	.word	0x00022be0
   1b924:	00022c18 	.word	0x00022c18
   1b928:	00022c20 	.word	0x00022c20

0001b92c <pyexec_file>:

#endif // MICROPY_REPL_EVENT_DRIVEN
#endif // MICROPY_ENABLE_COMPILER

int pyexec_file(const char *filename) {
   1b92c:	b580      	push	{r7, lr}
   1b92e:	b082      	sub	sp, #8
   1b930:	af00      	add	r7, sp, #0
   1b932:	6078      	str	r0, [r7, #4]
    return parse_compile_execute(filename, MP_PARSE_FILE_INPUT, EXEC_FLAG_SOURCE_IS_FILENAME);
   1b934:	2220      	movs	r2, #32
   1b936:	2101      	movs	r1, #1
   1b938:	6878      	ldr	r0, [r7, #4]
   1b93a:	f7ff fde9 	bl	1b510 <parse_compile_execute>
   1b93e:	4603      	mov	r3, r0
}
   1b940:	4618      	mov	r0, r3
   1b942:	3708      	adds	r7, #8
   1b944:	46bd      	mov	sp, r7
   1b946:	bd80      	pop	{r7, pc}

0001b948 <pyexec_frozen_module>:

#if MICROPY_MODULE_FROZEN
int pyexec_frozen_module(const char *name) {
   1b948:	b580      	push	{r7, lr}
   1b94a:	b084      	sub	sp, #16
   1b94c:	af00      	add	r7, sp, #0
   1b94e:	6078      	str	r0, [r7, #4]
    void *frozen_data;
    int frozen_type = mp_find_frozen_module(name, strlen(name), &frozen_data);
   1b950:	6878      	ldr	r0, [r7, #4]
   1b952:	f000 f96d 	bl	1bc30 <strlen>
   1b956:	4601      	mov	r1, r0
   1b958:	f107 0308 	add.w	r3, r7, #8
   1b95c:	461a      	mov	r2, r3
   1b95e:	6878      	ldr	r0, [r7, #4]
   1b960:	f7ff fb60 	bl	1b024 <mp_find_frozen_module>
   1b964:	60f8      	str	r0, [r7, #12]

    switch (frozen_type) {
   1b966:	68fb      	ldr	r3, [r7, #12]
   1b968:	2b02      	cmp	r3, #2
   1b96a:	d107      	bne.n	1b97c <pyexec_frozen_module+0x34>
            return parse_compile_execute(frozen_data, MP_PARSE_FILE_INPUT, 0);
        #endif

        #if MICROPY_MODULE_FROZEN_MPY
        case MP_FROZEN_MPY:
            return parse_compile_execute(frozen_data, MP_PARSE_FILE_INPUT, EXEC_FLAG_SOURCE_IS_RAW_CODE);
   1b96c:	68bb      	ldr	r3, [r7, #8]
   1b96e:	2208      	movs	r2, #8
   1b970:	2101      	movs	r1, #1
   1b972:	4618      	mov	r0, r3
   1b974:	f7ff fdcc 	bl	1b510 <parse_compile_execute>
   1b978:	4603      	mov	r3, r0
   1b97a:	e004      	b.n	1b986 <pyexec_frozen_module+0x3e>
        #endif

        default:
            printf("could not find module '%s'\n", name);
   1b97c:	6879      	ldr	r1, [r7, #4]
   1b97e:	4804      	ldr	r0, [pc, #16]	; (1b990 <pyexec_frozen_module+0x48>)
   1b980:	f7ff fca8 	bl	1b2d4 <printf>
            return false;
   1b984:	2300      	movs	r3, #0
    }
}
   1b986:	4618      	mov	r0, r3
   1b988:	3710      	adds	r7, #16
   1b98a:	46bd      	mov	sp, r7
   1b98c:	bd80      	pop	{r7, pc}
   1b98e:	bf00      	nop
   1b990:	00022c28 	.word	0x00022c28

0001b994 <pyb_set_repl_info>:
#endif

mp_obj_t pyb_set_repl_info(mp_obj_t o_value) {
   1b994:	b580      	push	{r7, lr}
   1b996:	b082      	sub	sp, #8
   1b998:	af00      	add	r7, sp, #0
   1b99a:	6078      	str	r0, [r7, #4]
    repl_display_debugging_info = mp_obj_get_int(o_value);
   1b99c:	6878      	ldr	r0, [r7, #4]
   1b99e:	f7f2 f8b3 	bl	db08 <mp_obj_get_int>
   1b9a2:	4603      	mov	r3, r0
   1b9a4:	2b00      	cmp	r3, #0
   1b9a6:	bf14      	ite	ne
   1b9a8:	2301      	movne	r3, #1
   1b9aa:	2300      	moveq	r3, #0
   1b9ac:	b2da      	uxtb	r2, r3
   1b9ae:	4b03      	ldr	r3, [pc, #12]	; (1b9bc <pyb_set_repl_info+0x28>)
   1b9b0:	701a      	strb	r2, [r3, #0]
    return mp_const_none;
   1b9b2:	4b03      	ldr	r3, [pc, #12]	; (1b9c0 <pyb_set_repl_info+0x2c>)
}
   1b9b4:	4618      	mov	r0, r3
   1b9b6:	3708      	adds	r7, #8
   1b9b8:	46bd      	mov	sp, r7
   1b9ba:	bd80      	pop	{r7, pc}
   1b9bc:	20000a0c 	.word	0x20000a0c
   1b9c0:	000212b4 	.word	0x000212b4

0001b9c4 <memcpy>:
#include <stdint.h>
#include <string.h>

#define likely(x) __builtin_expect((x), 1)

void *memcpy(void *dst, const void *src, size_t n) {
   1b9c4:	b480      	push	{r7}
   1b9c6:	b08b      	sub	sp, #44	; 0x2c
   1b9c8:	af00      	add	r7, sp, #0
   1b9ca:	60f8      	str	r0, [r7, #12]
   1b9cc:	60b9      	str	r1, [r7, #8]
   1b9ce:	607a      	str	r2, [r7, #4]
    if (likely(!(((uintptr_t)dst) & 3) && !(((uintptr_t)src) & 3))) {
   1b9d0:	68fb      	ldr	r3, [r7, #12]
   1b9d2:	f003 0303 	and.w	r3, r3, #3
   1b9d6:	2b00      	cmp	r3, #0
   1b9d8:	bf0c      	ite	eq
   1b9da:	2301      	moveq	r3, #1
   1b9dc:	2300      	movne	r3, #0
   1b9de:	b2db      	uxtb	r3, r3
   1b9e0:	2b00      	cmp	r3, #0
   1b9e2:	d038      	beq.n	1ba56 <memcpy+0x92>
   1b9e4:	68bb      	ldr	r3, [r7, #8]
   1b9e6:	f003 0303 	and.w	r3, r3, #3
   1b9ea:	2b00      	cmp	r3, #0
   1b9ec:	bf0c      	ite	eq
   1b9ee:	2301      	moveq	r3, #1
   1b9f0:	2300      	movne	r3, #0
   1b9f2:	b2db      	uxtb	r3, r3
   1b9f4:	2b00      	cmp	r3, #0
   1b9f6:	d02e      	beq.n	1ba56 <memcpy+0x92>
        // pointers aligned
        uint32_t *d = dst;
   1b9f8:	68fb      	ldr	r3, [r7, #12]
   1b9fa:	627b      	str	r3, [r7, #36]	; 0x24
        const uint32_t *s = src;
   1b9fc:	68bb      	ldr	r3, [r7, #8]
   1b9fe:	623b      	str	r3, [r7, #32]

        // copy words first
        for (size_t i = (n >> 2); i; i--) {
   1ba00:	687b      	ldr	r3, [r7, #4]
   1ba02:	089b      	lsrs	r3, r3, #2
   1ba04:	61fb      	str	r3, [r7, #28]
   1ba06:	e00a      	b.n	1ba1e <memcpy+0x5a>
            *d++ = *s++;
   1ba08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1ba0a:	1d1a      	adds	r2, r3, #4
   1ba0c:	627a      	str	r2, [r7, #36]	; 0x24
   1ba0e:	6a3a      	ldr	r2, [r7, #32]
   1ba10:	1d11      	adds	r1, r2, #4
   1ba12:	6239      	str	r1, [r7, #32]
   1ba14:	6812      	ldr	r2, [r2, #0]
   1ba16:	601a      	str	r2, [r3, #0]
        for (size_t i = (n >> 2); i; i--) {
   1ba18:	69fb      	ldr	r3, [r7, #28]
   1ba1a:	3b01      	subs	r3, #1
   1ba1c:	61fb      	str	r3, [r7, #28]
   1ba1e:	69fb      	ldr	r3, [r7, #28]
   1ba20:	2b00      	cmp	r3, #0
   1ba22:	d1f1      	bne.n	1ba08 <memcpy+0x44>
        }

        if (n & 2) {
   1ba24:	687b      	ldr	r3, [r7, #4]
   1ba26:	f003 0302 	and.w	r3, r3, #2
   1ba2a:	2b00      	cmp	r3, #0
   1ba2c:	d009      	beq.n	1ba42 <memcpy+0x7e>
            // copy half-word
            *(uint16_t*)d = *(const uint16_t*)s;
   1ba2e:	6a3b      	ldr	r3, [r7, #32]
   1ba30:	881a      	ldrh	r2, [r3, #0]
   1ba32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1ba34:	801a      	strh	r2, [r3, #0]
            d = (uint32_t*)((uint16_t*)d + 1);
   1ba36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1ba38:	3302      	adds	r3, #2
   1ba3a:	627b      	str	r3, [r7, #36]	; 0x24
            s = (const uint32_t*)((const uint16_t*)s + 1);
   1ba3c:	6a3b      	ldr	r3, [r7, #32]
   1ba3e:	3302      	adds	r3, #2
   1ba40:	623b      	str	r3, [r7, #32]
        }

        if (n & 1) {
   1ba42:	687b      	ldr	r3, [r7, #4]
   1ba44:	f003 0301 	and.w	r3, r3, #1
   1ba48:	2b00      	cmp	r3, #0
   1ba4a:	d018      	beq.n	1ba7e <memcpy+0xba>
            // copy byte
            *((uint8_t*)d) = *((const uint8_t*)s);
   1ba4c:	6a3b      	ldr	r3, [r7, #32]
   1ba4e:	781a      	ldrb	r2, [r3, #0]
   1ba50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1ba52:	701a      	strb	r2, [r3, #0]
    if (likely(!(((uintptr_t)dst) & 3) && !(((uintptr_t)src) & 3))) {
   1ba54:	e013      	b.n	1ba7e <memcpy+0xba>
        }
    } else {
        // unaligned access, copy bytes
        uint8_t *d = dst;
   1ba56:	68fb      	ldr	r3, [r7, #12]
   1ba58:	61bb      	str	r3, [r7, #24]
        const uint8_t *s = src;
   1ba5a:	68bb      	ldr	r3, [r7, #8]
   1ba5c:	617b      	str	r3, [r7, #20]

        for (; n; n--) {
   1ba5e:	e00a      	b.n	1ba76 <memcpy+0xb2>
            *d++ = *s++;
   1ba60:	69bb      	ldr	r3, [r7, #24]
   1ba62:	1c5a      	adds	r2, r3, #1
   1ba64:	61ba      	str	r2, [r7, #24]
   1ba66:	697a      	ldr	r2, [r7, #20]
   1ba68:	1c51      	adds	r1, r2, #1
   1ba6a:	6179      	str	r1, [r7, #20]
   1ba6c:	7812      	ldrb	r2, [r2, #0]
   1ba6e:	701a      	strb	r2, [r3, #0]
        for (; n; n--) {
   1ba70:	687b      	ldr	r3, [r7, #4]
   1ba72:	3b01      	subs	r3, #1
   1ba74:	607b      	str	r3, [r7, #4]
   1ba76:	687b      	ldr	r3, [r7, #4]
   1ba78:	2b00      	cmp	r3, #0
   1ba7a:	d1f1      	bne.n	1ba60 <memcpy+0x9c>
   1ba7c:	e000      	b.n	1ba80 <memcpy+0xbc>
    if (likely(!(((uintptr_t)dst) & 3) && !(((uintptr_t)src) & 3))) {
   1ba7e:	bf00      	nop
        }
    }

    return dst;
   1ba80:	68fb      	ldr	r3, [r7, #12]
}
   1ba82:	4618      	mov	r0, r3
   1ba84:	372c      	adds	r7, #44	; 0x2c
   1ba86:	46bd      	mov	sp, r7
   1ba88:	f85d 7b04 	ldr.w	r7, [sp], #4
   1ba8c:	4770      	bx	lr

0001ba8e <memmove>:

void *memmove(void *dest, const void *src, size_t n) {
   1ba8e:	b580      	push	{r7, lr}
   1ba90:	b086      	sub	sp, #24
   1ba92:	af00      	add	r7, sp, #0
   1ba94:	60f8      	str	r0, [r7, #12]
   1ba96:	60b9      	str	r1, [r7, #8]
   1ba98:	607a      	str	r2, [r7, #4]
    if (src < dest && (uint8_t*)dest < (const uint8_t*)src + n) {
   1ba9a:	68ba      	ldr	r2, [r7, #8]
   1ba9c:	68fb      	ldr	r3, [r7, #12]
   1ba9e:	429a      	cmp	r2, r3
   1baa0:	d220      	bcs.n	1bae4 <memmove+0x56>
   1baa2:	68ba      	ldr	r2, [r7, #8]
   1baa4:	687b      	ldr	r3, [r7, #4]
   1baa6:	441a      	add	r2, r3
   1baa8:	68fb      	ldr	r3, [r7, #12]
   1baaa:	429a      	cmp	r2, r3
   1baac:	d91a      	bls.n	1bae4 <memmove+0x56>
        // need to copy backwards
        uint8_t *d = (uint8_t*)dest + n - 1;
   1baae:	687b      	ldr	r3, [r7, #4]
   1bab0:	3b01      	subs	r3, #1
   1bab2:	68fa      	ldr	r2, [r7, #12]
   1bab4:	4413      	add	r3, r2
   1bab6:	617b      	str	r3, [r7, #20]
        const uint8_t *s = (const uint8_t*)src + n - 1;
   1bab8:	687b      	ldr	r3, [r7, #4]
   1baba:	3b01      	subs	r3, #1
   1babc:	68ba      	ldr	r2, [r7, #8]
   1babe:	4413      	add	r3, r2
   1bac0:	613b      	str	r3, [r7, #16]
        for (; n > 0; n--) {
   1bac2:	e00a      	b.n	1bada <memmove+0x4c>
            *d-- = *s--;
   1bac4:	697b      	ldr	r3, [r7, #20]
   1bac6:	1e5a      	subs	r2, r3, #1
   1bac8:	617a      	str	r2, [r7, #20]
   1baca:	693a      	ldr	r2, [r7, #16]
   1bacc:	1e51      	subs	r1, r2, #1
   1bace:	6139      	str	r1, [r7, #16]
   1bad0:	7812      	ldrb	r2, [r2, #0]
   1bad2:	701a      	strb	r2, [r3, #0]
        for (; n > 0; n--) {
   1bad4:	687b      	ldr	r3, [r7, #4]
   1bad6:	3b01      	subs	r3, #1
   1bad8:	607b      	str	r3, [r7, #4]
   1bada:	687b      	ldr	r3, [r7, #4]
   1badc:	2b00      	cmp	r3, #0
   1bade:	d1f1      	bne.n	1bac4 <memmove+0x36>
        }
        return dest;
   1bae0:	68fb      	ldr	r3, [r7, #12]
   1bae2:	e005      	b.n	1baf0 <memmove+0x62>
    } else {
        // can use normal memcpy
        return memcpy(dest, src, n);
   1bae4:	687a      	ldr	r2, [r7, #4]
   1bae6:	68b9      	ldr	r1, [r7, #8]
   1bae8:	68f8      	ldr	r0, [r7, #12]
   1baea:	f7ff ff6b 	bl	1b9c4 <memcpy>
   1baee:	4603      	mov	r3, r0
    }
}
   1baf0:	4618      	mov	r0, r3
   1baf2:	3718      	adds	r7, #24
   1baf4:	46bd      	mov	sp, r7
   1baf6:	bd80      	pop	{r7, pc}

0001baf8 <memset>:

void *memset(void *s, int c, size_t n) {
   1baf8:	b480      	push	{r7}
   1bafa:	b089      	sub	sp, #36	; 0x24
   1bafc:	af00      	add	r7, sp, #0
   1bafe:	60f8      	str	r0, [r7, #12]
   1bb00:	60b9      	str	r1, [r7, #8]
   1bb02:	607a      	str	r2, [r7, #4]
    if (c == 0 && ((uintptr_t)s & 3) == 0) {
   1bb04:	68bb      	ldr	r3, [r7, #8]
   1bb06:	2b00      	cmp	r3, #0
   1bb08:	d129      	bne.n	1bb5e <memset+0x66>
   1bb0a:	68fb      	ldr	r3, [r7, #12]
   1bb0c:	f003 0303 	and.w	r3, r3, #3
   1bb10:	2b00      	cmp	r3, #0
   1bb12:	d124      	bne.n	1bb5e <memset+0x66>
        // aligned store of 0
        uint32_t *s32 = s;
   1bb14:	68fb      	ldr	r3, [r7, #12]
   1bb16:	61fb      	str	r3, [r7, #28]
        for (size_t i = n >> 2; i > 0; i--) {
   1bb18:	687b      	ldr	r3, [r7, #4]
   1bb1a:	089b      	lsrs	r3, r3, #2
   1bb1c:	61bb      	str	r3, [r7, #24]
   1bb1e:	e007      	b.n	1bb30 <memset+0x38>
            *s32++ = 0;
   1bb20:	69fb      	ldr	r3, [r7, #28]
   1bb22:	1d1a      	adds	r2, r3, #4
   1bb24:	61fa      	str	r2, [r7, #28]
   1bb26:	2200      	movs	r2, #0
   1bb28:	601a      	str	r2, [r3, #0]
        for (size_t i = n >> 2; i > 0; i--) {
   1bb2a:	69bb      	ldr	r3, [r7, #24]
   1bb2c:	3b01      	subs	r3, #1
   1bb2e:	61bb      	str	r3, [r7, #24]
   1bb30:	69bb      	ldr	r3, [r7, #24]
   1bb32:	2b00      	cmp	r3, #0
   1bb34:	d1f4      	bne.n	1bb20 <memset+0x28>
        }
        if (n & 2) {
   1bb36:	687b      	ldr	r3, [r7, #4]
   1bb38:	f003 0302 	and.w	r3, r3, #2
   1bb3c:	2b00      	cmp	r3, #0
   1bb3e:	d005      	beq.n	1bb4c <memset+0x54>
            *((uint16_t*)s32) = 0;
   1bb40:	69fb      	ldr	r3, [r7, #28]
   1bb42:	2200      	movs	r2, #0
   1bb44:	801a      	strh	r2, [r3, #0]
            s32 = (uint32_t*)((uint16_t*)s32 + 1);
   1bb46:	69fb      	ldr	r3, [r7, #28]
   1bb48:	3302      	adds	r3, #2
   1bb4a:	61fb      	str	r3, [r7, #28]
        }
        if (n & 1) {
   1bb4c:	687b      	ldr	r3, [r7, #4]
   1bb4e:	f003 0301 	and.w	r3, r3, #1
   1bb52:	2b00      	cmp	r3, #0
   1bb54:	d013      	beq.n	1bb7e <memset+0x86>
            *((uint8_t*)s32) = 0;
   1bb56:	69fb      	ldr	r3, [r7, #28]
   1bb58:	2200      	movs	r2, #0
   1bb5a:	701a      	strb	r2, [r3, #0]
    if (c == 0 && ((uintptr_t)s & 3) == 0) {
   1bb5c:	e00f      	b.n	1bb7e <memset+0x86>
        }
    } else {
        uint8_t *s2 = s;
   1bb5e:	68fb      	ldr	r3, [r7, #12]
   1bb60:	617b      	str	r3, [r7, #20]
        for (; n > 0; n--) {
   1bb62:	e008      	b.n	1bb76 <memset+0x7e>
            *s2++ = c;
   1bb64:	697b      	ldr	r3, [r7, #20]
   1bb66:	1c5a      	adds	r2, r3, #1
   1bb68:	617a      	str	r2, [r7, #20]
   1bb6a:	68ba      	ldr	r2, [r7, #8]
   1bb6c:	b2d2      	uxtb	r2, r2
   1bb6e:	701a      	strb	r2, [r3, #0]
        for (; n > 0; n--) {
   1bb70:	687b      	ldr	r3, [r7, #4]
   1bb72:	3b01      	subs	r3, #1
   1bb74:	607b      	str	r3, [r7, #4]
   1bb76:	687b      	ldr	r3, [r7, #4]
   1bb78:	2b00      	cmp	r3, #0
   1bb7a:	d1f3      	bne.n	1bb64 <memset+0x6c>
   1bb7c:	e000      	b.n	1bb80 <memset+0x88>
    if (c == 0 && ((uintptr_t)s & 3) == 0) {
   1bb7e:	bf00      	nop
        }
    }
    return s;
   1bb80:	68fb      	ldr	r3, [r7, #12]
}
   1bb82:	4618      	mov	r0, r3
   1bb84:	3724      	adds	r7, #36	; 0x24
   1bb86:	46bd      	mov	sp, r7
   1bb88:	f85d 7b04 	ldr.w	r7, [sp], #4
   1bb8c:	4770      	bx	lr

0001bb8e <memcmp>:

int memcmp(const void *s1, const void *s2, size_t n) {
   1bb8e:	b480      	push	{r7}
   1bb90:	b089      	sub	sp, #36	; 0x24
   1bb92:	af00      	add	r7, sp, #0
   1bb94:	60f8      	str	r0, [r7, #12]
   1bb96:	60b9      	str	r1, [r7, #8]
   1bb98:	607a      	str	r2, [r7, #4]
    const uint8_t *s1_8 = s1;
   1bb9a:	68fb      	ldr	r3, [r7, #12]
   1bb9c:	61fb      	str	r3, [r7, #28]
    const uint8_t *s2_8 = s2;
   1bb9e:	68bb      	ldr	r3, [r7, #8]
   1bba0:	61bb      	str	r3, [r7, #24]
    while (n--) {
   1bba2:	e016      	b.n	1bbd2 <memcmp+0x44>
        char c1 = *s1_8++;
   1bba4:	69fb      	ldr	r3, [r7, #28]
   1bba6:	1c5a      	adds	r2, r3, #1
   1bba8:	61fa      	str	r2, [r7, #28]
   1bbaa:	781b      	ldrb	r3, [r3, #0]
   1bbac:	75fb      	strb	r3, [r7, #23]
        char c2 = *s2_8++;
   1bbae:	69bb      	ldr	r3, [r7, #24]
   1bbb0:	1c5a      	adds	r2, r3, #1
   1bbb2:	61ba      	str	r2, [r7, #24]
   1bbb4:	781b      	ldrb	r3, [r3, #0]
   1bbb6:	75bb      	strb	r3, [r7, #22]
        if (c1 < c2) return -1;
   1bbb8:	7dfa      	ldrb	r2, [r7, #23]
   1bbba:	7dbb      	ldrb	r3, [r7, #22]
   1bbbc:	429a      	cmp	r2, r3
   1bbbe:	d202      	bcs.n	1bbc6 <memcmp+0x38>
   1bbc0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1bbc4:	e00b      	b.n	1bbde <memcmp+0x50>
        else if (c1 > c2) return 1;
   1bbc6:	7dfa      	ldrb	r2, [r7, #23]
   1bbc8:	7dbb      	ldrb	r3, [r7, #22]
   1bbca:	429a      	cmp	r2, r3
   1bbcc:	d901      	bls.n	1bbd2 <memcmp+0x44>
   1bbce:	2301      	movs	r3, #1
   1bbd0:	e005      	b.n	1bbde <memcmp+0x50>
    while (n--) {
   1bbd2:	687b      	ldr	r3, [r7, #4]
   1bbd4:	1e5a      	subs	r2, r3, #1
   1bbd6:	607a      	str	r2, [r7, #4]
   1bbd8:	2b00      	cmp	r3, #0
   1bbda:	d1e3      	bne.n	1bba4 <memcmp+0x16>
    }
    return 0;
   1bbdc:	2300      	movs	r3, #0
}
   1bbde:	4618      	mov	r0, r3
   1bbe0:	3724      	adds	r7, #36	; 0x24
   1bbe2:	46bd      	mov	sp, r7
   1bbe4:	f85d 7b04 	ldr.w	r7, [sp], #4
   1bbe8:	4770      	bx	lr

0001bbea <memchr>:

void *memchr(const void *s, int c, size_t n) {
   1bbea:	b480      	push	{r7}
   1bbec:	b087      	sub	sp, #28
   1bbee:	af00      	add	r7, sp, #0
   1bbf0:	60f8      	str	r0, [r7, #12]
   1bbf2:	60b9      	str	r1, [r7, #8]
   1bbf4:	607a      	str	r2, [r7, #4]
    if (n != 0) {
   1bbf6:	687b      	ldr	r3, [r7, #4]
   1bbf8:	2b00      	cmp	r3, #0
   1bbfa:	d012      	beq.n	1bc22 <memchr+0x38>
        const unsigned char *p = s;
   1bbfc:	68fb      	ldr	r3, [r7, #12]
   1bbfe:	617b      	str	r3, [r7, #20]

        do {
            if (*p++ == c)
   1bc00:	697b      	ldr	r3, [r7, #20]
   1bc02:	1c5a      	adds	r2, r3, #1
   1bc04:	617a      	str	r2, [r7, #20]
   1bc06:	781b      	ldrb	r3, [r3, #0]
   1bc08:	461a      	mov	r2, r3
   1bc0a:	68bb      	ldr	r3, [r7, #8]
   1bc0c:	429a      	cmp	r2, r3
   1bc0e:	d102      	bne.n	1bc16 <memchr+0x2c>
                return ((void *)(p - 1));
   1bc10:	697b      	ldr	r3, [r7, #20]
   1bc12:	3b01      	subs	r3, #1
   1bc14:	e006      	b.n	1bc24 <memchr+0x3a>
        } while (--n != 0);
   1bc16:	687b      	ldr	r3, [r7, #4]
   1bc18:	3b01      	subs	r3, #1
   1bc1a:	607b      	str	r3, [r7, #4]
   1bc1c:	687b      	ldr	r3, [r7, #4]
   1bc1e:	2b00      	cmp	r3, #0
   1bc20:	d1ee      	bne.n	1bc00 <memchr+0x16>
    }
    return 0;
   1bc22:	2300      	movs	r3, #0
}
   1bc24:	4618      	mov	r0, r3
   1bc26:	371c      	adds	r7, #28
   1bc28:	46bd      	mov	sp, r7
   1bc2a:	f85d 7b04 	ldr.w	r7, [sp], #4
   1bc2e:	4770      	bx	lr

0001bc30 <strlen>:

size_t strlen(const char *str) {
   1bc30:	b480      	push	{r7}
   1bc32:	b085      	sub	sp, #20
   1bc34:	af00      	add	r7, sp, #0
   1bc36:	6078      	str	r0, [r7, #4]
    int len = 0;
   1bc38:	2300      	movs	r3, #0
   1bc3a:	60fb      	str	r3, [r7, #12]
    for (const char *s = str; *s; s++) {
   1bc3c:	687b      	ldr	r3, [r7, #4]
   1bc3e:	60bb      	str	r3, [r7, #8]
   1bc40:	e005      	b.n	1bc4e <strlen+0x1e>
        len += 1;
   1bc42:	68fb      	ldr	r3, [r7, #12]
   1bc44:	3301      	adds	r3, #1
   1bc46:	60fb      	str	r3, [r7, #12]
    for (const char *s = str; *s; s++) {
   1bc48:	68bb      	ldr	r3, [r7, #8]
   1bc4a:	3301      	adds	r3, #1
   1bc4c:	60bb      	str	r3, [r7, #8]
   1bc4e:	68bb      	ldr	r3, [r7, #8]
   1bc50:	781b      	ldrb	r3, [r3, #0]
   1bc52:	2b00      	cmp	r3, #0
   1bc54:	d1f5      	bne.n	1bc42 <strlen+0x12>
    }
    return len;
   1bc56:	68fb      	ldr	r3, [r7, #12]
}
   1bc58:	4618      	mov	r0, r3
   1bc5a:	3714      	adds	r7, #20
   1bc5c:	46bd      	mov	sp, r7
   1bc5e:	f85d 7b04 	ldr.w	r7, [sp], #4
   1bc62:	4770      	bx	lr

0001bc64 <strcmp>:

int strcmp(const char *s1, const char *s2) {
   1bc64:	b480      	push	{r7}
   1bc66:	b085      	sub	sp, #20
   1bc68:	af00      	add	r7, sp, #0
   1bc6a:	6078      	str	r0, [r7, #4]
   1bc6c:	6039      	str	r1, [r7, #0]
    while (*s1 && *s2) {
   1bc6e:	e016      	b.n	1bc9e <strcmp+0x3a>
        char c1 = *s1++; // XXX UTF8 get char, next char
   1bc70:	687b      	ldr	r3, [r7, #4]
   1bc72:	1c5a      	adds	r2, r3, #1
   1bc74:	607a      	str	r2, [r7, #4]
   1bc76:	781b      	ldrb	r3, [r3, #0]
   1bc78:	73fb      	strb	r3, [r7, #15]
        char c2 = *s2++; // XXX UTF8 get char, next char
   1bc7a:	683b      	ldr	r3, [r7, #0]
   1bc7c:	1c5a      	adds	r2, r3, #1
   1bc7e:	603a      	str	r2, [r7, #0]
   1bc80:	781b      	ldrb	r3, [r3, #0]
   1bc82:	73bb      	strb	r3, [r7, #14]
        if (c1 < c2) return -1;
   1bc84:	7bfa      	ldrb	r2, [r7, #15]
   1bc86:	7bbb      	ldrb	r3, [r7, #14]
   1bc88:	429a      	cmp	r2, r3
   1bc8a:	d202      	bcs.n	1bc92 <strcmp+0x2e>
   1bc8c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1bc90:	e01b      	b.n	1bcca <strcmp+0x66>
        else if (c1 > c2) return 1;
   1bc92:	7bfa      	ldrb	r2, [r7, #15]
   1bc94:	7bbb      	ldrb	r3, [r7, #14]
   1bc96:	429a      	cmp	r2, r3
   1bc98:	d901      	bls.n	1bc9e <strcmp+0x3a>
   1bc9a:	2301      	movs	r3, #1
   1bc9c:	e015      	b.n	1bcca <strcmp+0x66>
    while (*s1 && *s2) {
   1bc9e:	687b      	ldr	r3, [r7, #4]
   1bca0:	781b      	ldrb	r3, [r3, #0]
   1bca2:	2b00      	cmp	r3, #0
   1bca4:	d003      	beq.n	1bcae <strcmp+0x4a>
   1bca6:	683b      	ldr	r3, [r7, #0]
   1bca8:	781b      	ldrb	r3, [r3, #0]
   1bcaa:	2b00      	cmp	r3, #0
   1bcac:	d1e0      	bne.n	1bc70 <strcmp+0xc>
    }
    if (*s2) return -1;
   1bcae:	683b      	ldr	r3, [r7, #0]
   1bcb0:	781b      	ldrb	r3, [r3, #0]
   1bcb2:	2b00      	cmp	r3, #0
   1bcb4:	d002      	beq.n	1bcbc <strcmp+0x58>
   1bcb6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1bcba:	e006      	b.n	1bcca <strcmp+0x66>
    else if (*s1) return 1;
   1bcbc:	687b      	ldr	r3, [r7, #4]
   1bcbe:	781b      	ldrb	r3, [r3, #0]
   1bcc0:	2b00      	cmp	r3, #0
   1bcc2:	d001      	beq.n	1bcc8 <strcmp+0x64>
   1bcc4:	2301      	movs	r3, #1
   1bcc6:	e000      	b.n	1bcca <strcmp+0x66>
    else return 0;
   1bcc8:	2300      	movs	r3, #0
}
   1bcca:	4618      	mov	r0, r3
   1bccc:	3714      	adds	r7, #20
   1bcce:	46bd      	mov	sp, r7
   1bcd0:	f85d 7b04 	ldr.w	r7, [sp], #4
   1bcd4:	4770      	bx	lr

0001bcd6 <strncmp>:

int strncmp(const char *s1, const char *s2, size_t n) {
   1bcd6:	b480      	push	{r7}
   1bcd8:	b087      	sub	sp, #28
   1bcda:	af00      	add	r7, sp, #0
   1bcdc:	60f8      	str	r0, [r7, #12]
   1bcde:	60b9      	str	r1, [r7, #8]
   1bce0:	607a      	str	r2, [r7, #4]
    while (*s1 && *s2 && n > 0) {
   1bce2:	e019      	b.n	1bd18 <strncmp+0x42>
        char c1 = *s1++; // XXX UTF8 get char, next char
   1bce4:	68fb      	ldr	r3, [r7, #12]
   1bce6:	1c5a      	adds	r2, r3, #1
   1bce8:	60fa      	str	r2, [r7, #12]
   1bcea:	781b      	ldrb	r3, [r3, #0]
   1bcec:	75fb      	strb	r3, [r7, #23]
        char c2 = *s2++; // XXX UTF8 get char, next char
   1bcee:	68bb      	ldr	r3, [r7, #8]
   1bcf0:	1c5a      	adds	r2, r3, #1
   1bcf2:	60ba      	str	r2, [r7, #8]
   1bcf4:	781b      	ldrb	r3, [r3, #0]
   1bcf6:	75bb      	strb	r3, [r7, #22]
        n--;
   1bcf8:	687b      	ldr	r3, [r7, #4]
   1bcfa:	3b01      	subs	r3, #1
   1bcfc:	607b      	str	r3, [r7, #4]
        if (c1 < c2) return -1;
   1bcfe:	7dfa      	ldrb	r2, [r7, #23]
   1bd00:	7dbb      	ldrb	r3, [r7, #22]
   1bd02:	429a      	cmp	r2, r3
   1bd04:	d202      	bcs.n	1bd0c <strncmp+0x36>
   1bd06:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1bd0a:	e023      	b.n	1bd54 <strncmp+0x7e>
        else if (c1 > c2) return 1;
   1bd0c:	7dfa      	ldrb	r2, [r7, #23]
   1bd0e:	7dbb      	ldrb	r3, [r7, #22]
   1bd10:	429a      	cmp	r2, r3
   1bd12:	d901      	bls.n	1bd18 <strncmp+0x42>
   1bd14:	2301      	movs	r3, #1
   1bd16:	e01d      	b.n	1bd54 <strncmp+0x7e>
    while (*s1 && *s2 && n > 0) {
   1bd18:	68fb      	ldr	r3, [r7, #12]
   1bd1a:	781b      	ldrb	r3, [r3, #0]
   1bd1c:	2b00      	cmp	r3, #0
   1bd1e:	d006      	beq.n	1bd2e <strncmp+0x58>
   1bd20:	68bb      	ldr	r3, [r7, #8]
   1bd22:	781b      	ldrb	r3, [r3, #0]
   1bd24:	2b00      	cmp	r3, #0
   1bd26:	d002      	beq.n	1bd2e <strncmp+0x58>
   1bd28:	687b      	ldr	r3, [r7, #4]
   1bd2a:	2b00      	cmp	r3, #0
   1bd2c:	d1da      	bne.n	1bce4 <strncmp+0xe>
    }
    if (n == 0) return 0;
   1bd2e:	687b      	ldr	r3, [r7, #4]
   1bd30:	2b00      	cmp	r3, #0
   1bd32:	d101      	bne.n	1bd38 <strncmp+0x62>
   1bd34:	2300      	movs	r3, #0
   1bd36:	e00d      	b.n	1bd54 <strncmp+0x7e>
    else if (*s2) return -1;
   1bd38:	68bb      	ldr	r3, [r7, #8]
   1bd3a:	781b      	ldrb	r3, [r3, #0]
   1bd3c:	2b00      	cmp	r3, #0
   1bd3e:	d002      	beq.n	1bd46 <strncmp+0x70>
   1bd40:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1bd44:	e006      	b.n	1bd54 <strncmp+0x7e>
    else if (*s1) return 1;
   1bd46:	68fb      	ldr	r3, [r7, #12]
   1bd48:	781b      	ldrb	r3, [r3, #0]
   1bd4a:	2b00      	cmp	r3, #0
   1bd4c:	d001      	beq.n	1bd52 <strncmp+0x7c>
   1bd4e:	2301      	movs	r3, #1
   1bd50:	e000      	b.n	1bd54 <strncmp+0x7e>
    else return 0;
   1bd52:	2300      	movs	r3, #0
}
   1bd54:	4618      	mov	r0, r3
   1bd56:	371c      	adds	r7, #28
   1bd58:	46bd      	mov	sp, r7
   1bd5a:	f85d 7b04 	ldr.w	r7, [sp], #4
   1bd5e:	4770      	bx	lr

0001bd60 <strcpy>:

char *strcpy(char *dest, const char *src) {
   1bd60:	b480      	push	{r7}
   1bd62:	b085      	sub	sp, #20
   1bd64:	af00      	add	r7, sp, #0
   1bd66:	6078      	str	r0, [r7, #4]
   1bd68:	6039      	str	r1, [r7, #0]
    char *d = dest;
   1bd6a:	687b      	ldr	r3, [r7, #4]
   1bd6c:	60fb      	str	r3, [r7, #12]
    while (*src) {
   1bd6e:	e007      	b.n	1bd80 <strcpy+0x20>
        *d++ = *src++;
   1bd70:	68fb      	ldr	r3, [r7, #12]
   1bd72:	1c5a      	adds	r2, r3, #1
   1bd74:	60fa      	str	r2, [r7, #12]
   1bd76:	683a      	ldr	r2, [r7, #0]
   1bd78:	1c51      	adds	r1, r2, #1
   1bd7a:	6039      	str	r1, [r7, #0]
   1bd7c:	7812      	ldrb	r2, [r2, #0]
   1bd7e:	701a      	strb	r2, [r3, #0]
    while (*src) {
   1bd80:	683b      	ldr	r3, [r7, #0]
   1bd82:	781b      	ldrb	r3, [r3, #0]
   1bd84:	2b00      	cmp	r3, #0
   1bd86:	d1f3      	bne.n	1bd70 <strcpy+0x10>
    }
    *d = '\0';
   1bd88:	68fb      	ldr	r3, [r7, #12]
   1bd8a:	2200      	movs	r2, #0
   1bd8c:	701a      	strb	r2, [r3, #0]
    return dest;
   1bd8e:	687b      	ldr	r3, [r7, #4]
}
   1bd90:	4618      	mov	r0, r3
   1bd92:	3714      	adds	r7, #20
   1bd94:	46bd      	mov	sp, r7
   1bd96:	f85d 7b04 	ldr.w	r7, [sp], #4
   1bd9a:	4770      	bx	lr

0001bd9c <stpcpy>:

// needed because gcc optimises strcpy + strcat to this
char *stpcpy(char *dest, const char *src) {
   1bd9c:	b480      	push	{r7}
   1bd9e:	b083      	sub	sp, #12
   1bda0:	af00      	add	r7, sp, #0
   1bda2:	6078      	str	r0, [r7, #4]
   1bda4:	6039      	str	r1, [r7, #0]
    while (*src) {
   1bda6:	e007      	b.n	1bdb8 <stpcpy+0x1c>
        *dest++ = *src++;
   1bda8:	687b      	ldr	r3, [r7, #4]
   1bdaa:	1c5a      	adds	r2, r3, #1
   1bdac:	607a      	str	r2, [r7, #4]
   1bdae:	683a      	ldr	r2, [r7, #0]
   1bdb0:	1c51      	adds	r1, r2, #1
   1bdb2:	6039      	str	r1, [r7, #0]
   1bdb4:	7812      	ldrb	r2, [r2, #0]
   1bdb6:	701a      	strb	r2, [r3, #0]
    while (*src) {
   1bdb8:	683b      	ldr	r3, [r7, #0]
   1bdba:	781b      	ldrb	r3, [r3, #0]
   1bdbc:	2b00      	cmp	r3, #0
   1bdbe:	d1f3      	bne.n	1bda8 <stpcpy+0xc>
    }
    *dest = '\0';
   1bdc0:	687b      	ldr	r3, [r7, #4]
   1bdc2:	2200      	movs	r2, #0
   1bdc4:	701a      	strb	r2, [r3, #0]
    return dest;
   1bdc6:	687b      	ldr	r3, [r7, #4]
}
   1bdc8:	4618      	mov	r0, r3
   1bdca:	370c      	adds	r7, #12
   1bdcc:	46bd      	mov	sp, r7
   1bdce:	f85d 7b04 	ldr.w	r7, [sp], #4
   1bdd2:	4770      	bx	lr

0001bdd4 <strcat>:

char *strcat(char *dest, const char *src) {
   1bdd4:	b480      	push	{r7}
   1bdd6:	b085      	sub	sp, #20
   1bdd8:	af00      	add	r7, sp, #0
   1bdda:	6078      	str	r0, [r7, #4]
   1bddc:	6039      	str	r1, [r7, #0]
    char *d = dest;
   1bdde:	687b      	ldr	r3, [r7, #4]
   1bde0:	60fb      	str	r3, [r7, #12]
    while (*d) {
   1bde2:	e002      	b.n	1bdea <strcat+0x16>
        d++;
   1bde4:	68fb      	ldr	r3, [r7, #12]
   1bde6:	3301      	adds	r3, #1
   1bde8:	60fb      	str	r3, [r7, #12]
    while (*d) {
   1bdea:	68fb      	ldr	r3, [r7, #12]
   1bdec:	781b      	ldrb	r3, [r3, #0]
   1bdee:	2b00      	cmp	r3, #0
   1bdf0:	d1f8      	bne.n	1bde4 <strcat+0x10>
    }
    while (*src) {
   1bdf2:	e007      	b.n	1be04 <strcat+0x30>
        *d++ = *src++;
   1bdf4:	68fb      	ldr	r3, [r7, #12]
   1bdf6:	1c5a      	adds	r2, r3, #1
   1bdf8:	60fa      	str	r2, [r7, #12]
   1bdfa:	683a      	ldr	r2, [r7, #0]
   1bdfc:	1c51      	adds	r1, r2, #1
   1bdfe:	6039      	str	r1, [r7, #0]
   1be00:	7812      	ldrb	r2, [r2, #0]
   1be02:	701a      	strb	r2, [r3, #0]
    while (*src) {
   1be04:	683b      	ldr	r3, [r7, #0]
   1be06:	781b      	ldrb	r3, [r3, #0]
   1be08:	2b00      	cmp	r3, #0
   1be0a:	d1f3      	bne.n	1bdf4 <strcat+0x20>
    }
    *d = '\0';
   1be0c:	68fb      	ldr	r3, [r7, #12]
   1be0e:	2200      	movs	r2, #0
   1be10:	701a      	strb	r2, [r3, #0]
    return dest;
   1be12:	687b      	ldr	r3, [r7, #4]
}
   1be14:	4618      	mov	r0, r3
   1be16:	3714      	adds	r7, #20
   1be18:	46bd      	mov	sp, r7
   1be1a:	f85d 7b04 	ldr.w	r7, [sp], #4
   1be1e:	4770      	bx	lr

0001be20 <strchr>:

// Public Domain implementation of strchr from:
// http://en.wikibooks.org/wiki/C_Programming/Strings#The_strchr_function
char *strchr(const char *s, int c)
{
   1be20:	b480      	push	{r7}
   1be22:	b083      	sub	sp, #12
   1be24:	af00      	add	r7, sp, #0
   1be26:	6078      	str	r0, [r7, #4]
   1be28:	6039      	str	r1, [r7, #0]
    /* Scan s for the character.  When this loop is finished,
       s will either point to the end of the string or the
       character we were looking for.  */
    while (*s != '\0' && *s != (char)c)
   1be2a:	e002      	b.n	1be32 <strchr+0x12>
        s++;
   1be2c:	687b      	ldr	r3, [r7, #4]
   1be2e:	3301      	adds	r3, #1
   1be30:	607b      	str	r3, [r7, #4]
    while (*s != '\0' && *s != (char)c)
   1be32:	687b      	ldr	r3, [r7, #4]
   1be34:	781b      	ldrb	r3, [r3, #0]
   1be36:	2b00      	cmp	r3, #0
   1be38:	d005      	beq.n	1be46 <strchr+0x26>
   1be3a:	687b      	ldr	r3, [r7, #4]
   1be3c:	781a      	ldrb	r2, [r3, #0]
   1be3e:	683b      	ldr	r3, [r7, #0]
   1be40:	b2db      	uxtb	r3, r3
   1be42:	429a      	cmp	r2, r3
   1be44:	d1f2      	bne.n	1be2c <strchr+0xc>
    return ((*s == c) ? (char *) s : 0);
   1be46:	687b      	ldr	r3, [r7, #4]
   1be48:	781b      	ldrb	r3, [r3, #0]
   1be4a:	461a      	mov	r2, r3
   1be4c:	683b      	ldr	r3, [r7, #0]
   1be4e:	429a      	cmp	r2, r3
   1be50:	d101      	bne.n	1be56 <strchr+0x36>
   1be52:	687b      	ldr	r3, [r7, #4]
   1be54:	e000      	b.n	1be58 <strchr+0x38>
   1be56:	2300      	movs	r3, #0
}
   1be58:	4618      	mov	r0, r3
   1be5a:	370c      	adds	r7, #12
   1be5c:	46bd      	mov	sp, r7
   1be5e:	f85d 7b04 	ldr.w	r7, [sp], #4
   1be62:	4770      	bx	lr

0001be64 <strstr>:


// Public Domain implementation of strstr from:
// http://en.wikibooks.org/wiki/C_Programming/Strings#The_strstr_function
char *strstr(const char *haystack, const char *needle)
{
   1be64:	b580      	push	{r7, lr}
   1be66:	b084      	sub	sp, #16
   1be68:	af00      	add	r7, sp, #0
   1be6a:	6078      	str	r0, [r7, #4]
   1be6c:	6039      	str	r1, [r7, #0]
    size_t needlelen;
    /* Check for the null needle case.  */
    if (*needle == '\0')
   1be6e:	683b      	ldr	r3, [r7, #0]
   1be70:	781b      	ldrb	r3, [r3, #0]
   1be72:	2b00      	cmp	r3, #0
   1be74:	d101      	bne.n	1be7a <strstr+0x16>
        return (char *) haystack;
   1be76:	687b      	ldr	r3, [r7, #4]
   1be78:	e01c      	b.n	1beb4 <strstr+0x50>
    needlelen = strlen(needle);
   1be7a:	6838      	ldr	r0, [r7, #0]
   1be7c:	f7ff fed8 	bl	1bc30 <strlen>
   1be80:	60f8      	str	r0, [r7, #12]
    for (; (haystack = strchr(haystack, *needle)) != 0; haystack++)
   1be82:	e00c      	b.n	1be9e <strstr+0x3a>
        if (strncmp(haystack, needle, needlelen) == 0)
   1be84:	68fa      	ldr	r2, [r7, #12]
   1be86:	6839      	ldr	r1, [r7, #0]
   1be88:	6878      	ldr	r0, [r7, #4]
   1be8a:	f7ff ff24 	bl	1bcd6 <strncmp>
   1be8e:	4603      	mov	r3, r0
   1be90:	2b00      	cmp	r3, #0
   1be92:	d101      	bne.n	1be98 <strstr+0x34>
            return (char *) haystack;
   1be94:	687b      	ldr	r3, [r7, #4]
   1be96:	e00d      	b.n	1beb4 <strstr+0x50>
    for (; (haystack = strchr(haystack, *needle)) != 0; haystack++)
   1be98:	687b      	ldr	r3, [r7, #4]
   1be9a:	3301      	adds	r3, #1
   1be9c:	607b      	str	r3, [r7, #4]
   1be9e:	683b      	ldr	r3, [r7, #0]
   1bea0:	781b      	ldrb	r3, [r3, #0]
   1bea2:	4619      	mov	r1, r3
   1bea4:	6878      	ldr	r0, [r7, #4]
   1bea6:	f7ff ffbb 	bl	1be20 <strchr>
   1beaa:	6078      	str	r0, [r7, #4]
   1beac:	687b      	ldr	r3, [r7, #4]
   1beae:	2b00      	cmp	r3, #0
   1beb0:	d1e8      	bne.n	1be84 <strstr+0x20>
    return 0;
   1beb2:	2300      	movs	r3, #0
}
   1beb4:	4618      	mov	r0, r3
   1beb6:	3710      	adds	r7, #16
   1beb8:	46bd      	mov	sp, r7
   1beba:	bd80      	pop	{r7, pc}

0001bebc <vstr_len>:
   1bebc:	b480      	push	{r7}
   1bebe:	b083      	sub	sp, #12
   1bec0:	af00      	add	r7, sp, #0
   1bec2:	6078      	str	r0, [r7, #4]
   1bec4:	687b      	ldr	r3, [r7, #4]
   1bec6:	685b      	ldr	r3, [r3, #4]
   1bec8:	4618      	mov	r0, r3
   1beca:	370c      	adds	r7, #12
   1becc:	46bd      	mov	sp, r7
   1bece:	f85d 7b04 	ldr.w	r7, [sp], #4
   1bed2:	4770      	bx	lr

0001bed4 <readline_init0>:

#define READLINE_HIST_SIZE (MP_ARRAY_SIZE(MP_STATE_PORT(readline_hist)))

enum { ESEQ_NONE, ESEQ_ESC, ESEQ_ESC_BRACKET, ESEQ_ESC_BRACKET_DIGIT, ESEQ_ESC_O };

void readline_init0(void) {
   1bed4:	b580      	push	{r7, lr}
   1bed6:	af00      	add	r7, sp, #0
    memset(MP_STATE_PORT(readline_hist), 0, READLINE_HIST_SIZE * sizeof(const char*));
   1bed8:	2220      	movs	r2, #32
   1beda:	2100      	movs	r1, #0
   1bedc:	4802      	ldr	r0, [pc, #8]	; (1bee8 <readline_init0+0x14>)
   1bede:	f7ff fe0b 	bl	1baf8 <memset>
}
   1bee2:	bf00      	nop
   1bee4:	bd80      	pop	{r7, pc}
   1bee6:	bf00      	nop
   1bee8:	20000a94 	.word	0x20000a94

0001beec <str_dup_maybe>:

STATIC char *str_dup_maybe(const char *str) {
   1beec:	b580      	push	{r7, lr}
   1beee:	b084      	sub	sp, #16
   1bef0:	af00      	add	r7, sp, #0
   1bef2:	6078      	str	r0, [r7, #4]
    uint32_t len = strlen(str);
   1bef4:	6878      	ldr	r0, [r7, #4]
   1bef6:	f7ff fe9b 	bl	1bc30 <strlen>
   1befa:	60f8      	str	r0, [r7, #12]
    char *s2 = m_new_maybe(char, len + 1);
   1befc:	68fb      	ldr	r3, [r7, #12]
   1befe:	3301      	adds	r3, #1
   1bf00:	4618      	mov	r0, r3
   1bf02:	f7e4 fa22 	bl	34a <m_malloc_maybe>
   1bf06:	60b8      	str	r0, [r7, #8]
    if (s2 == NULL) {
   1bf08:	68bb      	ldr	r3, [r7, #8]
   1bf0a:	2b00      	cmp	r3, #0
   1bf0c:	d101      	bne.n	1bf12 <str_dup_maybe+0x26>
        return NULL;
   1bf0e:	2300      	movs	r3, #0
   1bf10:	e007      	b.n	1bf22 <str_dup_maybe+0x36>
    }
    memcpy(s2, str, len + 1);
   1bf12:	68fb      	ldr	r3, [r7, #12]
   1bf14:	3301      	adds	r3, #1
   1bf16:	461a      	mov	r2, r3
   1bf18:	6879      	ldr	r1, [r7, #4]
   1bf1a:	68b8      	ldr	r0, [r7, #8]
   1bf1c:	f7ff fd52 	bl	1b9c4 <memcpy>
    return s2;
   1bf20:	68bb      	ldr	r3, [r7, #8]
}
   1bf22:	4618      	mov	r0, r3
   1bf24:	3710      	adds	r7, #16
   1bf26:	46bd      	mov	sp, r7
   1bf28:	bd80      	pop	{r7, pc}

0001bf2a <mp_hal_move_cursor_back>:
#define MICROPY_HAL_HAS_VT100 (1)
#endif

// ...and provide the implementation using them
#if MICROPY_HAL_HAS_VT100
STATIC void mp_hal_move_cursor_back(uint pos) {
   1bf2a:	b580      	push	{r7, lr}
   1bf2c:	b086      	sub	sp, #24
   1bf2e:	af00      	add	r7, sp, #0
   1bf30:	6078      	str	r0, [r7, #4]
    if (pos <= 4) {
   1bf32:	687b      	ldr	r3, [r7, #4]
   1bf34:	2b04      	cmp	r3, #4
   1bf36:	d804      	bhi.n	1bf42 <mp_hal_move_cursor_back+0x18>
        // fast path for most common case of 1 step back
        mp_hal_stdout_tx_strn("\b\b\b\b", pos);
   1bf38:	6879      	ldr	r1, [r7, #4]
   1bf3a:	4811      	ldr	r0, [pc, #68]	; (1bf80 <mp_hal_move_cursor_back+0x56>)
   1bf3c:	f7ff f9aa 	bl	1b294 <mp_hal_stdout_tx_strn>
        if (n > 0) {
            vt100_command[n] = 'D'; // replace null char
            mp_hal_stdout_tx_strn(vt100_command, n + 1);
        }
    }
}
   1bf40:	e019      	b.n	1bf76 <mp_hal_move_cursor_back+0x4c>
        int n = snprintf(&vt100_command[0], sizeof(vt100_command), "\x1b[%u", pos);
   1bf42:	f107 000c 	add.w	r0, r7, #12
   1bf46:	687b      	ldr	r3, [r7, #4]
   1bf48:	4a0e      	ldr	r2, [pc, #56]	; (1bf84 <mp_hal_move_cursor_back+0x5a>)
   1bf4a:	2106      	movs	r1, #6
   1bf4c:	f7ff fa6c 	bl	1b428 <snprintf>
   1bf50:	6178      	str	r0, [r7, #20]
        if (n > 0) {
   1bf52:	697b      	ldr	r3, [r7, #20]
   1bf54:	2b00      	cmp	r3, #0
   1bf56:	dd0e      	ble.n	1bf76 <mp_hal_move_cursor_back+0x4c>
            vt100_command[n] = 'D'; // replace null char
   1bf58:	f107 020c 	add.w	r2, r7, #12
   1bf5c:	697b      	ldr	r3, [r7, #20]
   1bf5e:	4413      	add	r3, r2
   1bf60:	2244      	movs	r2, #68	; 0x44
   1bf62:	701a      	strb	r2, [r3, #0]
            mp_hal_stdout_tx_strn(vt100_command, n + 1);
   1bf64:	697b      	ldr	r3, [r7, #20]
   1bf66:	3301      	adds	r3, #1
   1bf68:	461a      	mov	r2, r3
   1bf6a:	f107 030c 	add.w	r3, r7, #12
   1bf6e:	4611      	mov	r1, r2
   1bf70:	4618      	mov	r0, r3
   1bf72:	f7ff f98f 	bl	1b294 <mp_hal_stdout_tx_strn>
}
   1bf76:	bf00      	nop
   1bf78:	3718      	adds	r7, #24
   1bf7a:	46bd      	mov	sp, r7
   1bf7c:	bd80      	pop	{r7, pc}
   1bf7e:	bf00      	nop
   1bf80:	00022c4c 	.word	0x00022c4c
   1bf84:	00022c54 	.word	0x00022c54

0001bf88 <mp_hal_erase_line_from_cursor>:

STATIC void mp_hal_erase_line_from_cursor(uint n_chars_to_erase) {
   1bf88:	b580      	push	{r7, lr}
   1bf8a:	b082      	sub	sp, #8
   1bf8c:	af00      	add	r7, sp, #0
   1bf8e:	6078      	str	r0, [r7, #4]
    (void)n_chars_to_erase;
    mp_hal_stdout_tx_strn("\x1b[K", 3);
   1bf90:	2103      	movs	r1, #3
   1bf92:	4803      	ldr	r0, [pc, #12]	; (1bfa0 <mp_hal_erase_line_from_cursor+0x18>)
   1bf94:	f7ff f97e 	bl	1b294 <mp_hal_stdout_tx_strn>
}
   1bf98:	bf00      	nop
   1bf9a:	3708      	adds	r7, #8
   1bf9c:	46bd      	mov	sp, r7
   1bf9e:	bd80      	pop	{r7, pc}
   1bfa0:	00022c5c 	.word	0x00022c5c

0001bfa4 <readline_process_char>:
    const char *prompt;
} readline_t;

STATIC readline_t rl;

int readline_process_char(int c) {
   1bfa4:	b580      	push	{r7, lr}
   1bfa6:	b08a      	sub	sp, #40	; 0x28
   1bfa8:	af00      	add	r7, sp, #0
   1bfaa:	6078      	str	r0, [r7, #4]
    size_t last_line_len = rl.line->len;
   1bfac:	4b99      	ldr	r3, [pc, #612]	; (1c214 <readline_process_char+0x270>)
   1bfae:	681b      	ldr	r3, [r3, #0]
   1bfb0:	685b      	ldr	r3, [r3, #4]
   1bfb2:	617b      	str	r3, [r7, #20]
    int redraw_step_back = 0;
   1bfb4:	2300      	movs	r3, #0
   1bfb6:	627b      	str	r3, [r7, #36]	; 0x24
    bool redraw_from_cursor = false;
   1bfb8:	2300      	movs	r3, #0
   1bfba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    int redraw_step_forward = 0;
   1bfbe:	2300      	movs	r3, #0
   1bfc0:	61fb      	str	r3, [r7, #28]
    if (rl.escape_seq == ESEQ_NONE) {
   1bfc2:	4b94      	ldr	r3, [pc, #592]	; (1c214 <readline_process_char+0x270>)
   1bfc4:	689b      	ldr	r3, [r3, #8]
   1bfc6:	2b00      	cmp	r3, #0
   1bfc8:	f040 80bf 	bne.w	1c14a <readline_process_char+0x1a6>
        if (CHAR_CTRL_A <= c && c <= CHAR_CTRL_E && vstr_len(rl.line) == rl.orig_line_len) {
   1bfcc:	687b      	ldr	r3, [r7, #4]
   1bfce:	2b00      	cmp	r3, #0
   1bfd0:	dd0e      	ble.n	1bff0 <readline_process_char+0x4c>
   1bfd2:	687b      	ldr	r3, [r7, #4]
   1bfd4:	2b05      	cmp	r3, #5
   1bfd6:	dc0b      	bgt.n	1bff0 <readline_process_char+0x4c>
   1bfd8:	4b8e      	ldr	r3, [pc, #568]	; (1c214 <readline_process_char+0x270>)
   1bfda:	681b      	ldr	r3, [r3, #0]
   1bfdc:	4618      	mov	r0, r3
   1bfde:	f7ff ff6d 	bl	1bebc <vstr_len>
   1bfe2:	4602      	mov	r2, r0
   1bfe4:	4b8b      	ldr	r3, [pc, #556]	; (1c214 <readline_process_char+0x270>)
   1bfe6:	685b      	ldr	r3, [r3, #4]
   1bfe8:	429a      	cmp	r2, r3
   1bfea:	d101      	bne.n	1bff0 <readline_process_char+0x4c>
            // control character with empty line
            return c;
   1bfec:	687b      	ldr	r3, [r7, #4]
   1bfee:	e220      	b.n	1c432 <readline_process_char+0x48e>
        } else if (c == CHAR_CTRL_A) {
   1bff0:	687b      	ldr	r3, [r7, #4]
   1bff2:	2b01      	cmp	r3, #1
   1bff4:	f000 817e 	beq.w	1c2f4 <readline_process_char+0x350>
        #if MICROPY_REPL_EMACS_KEYS
        } else if (c == CHAR_CTRL_B) {
            // CTRL-B with non-empty line is go-back-one-char
            goto left_arrow_key;
        #endif
        } else if (c == CHAR_CTRL_C) {
   1bff8:	687b      	ldr	r3, [r7, #4]
   1bffa:	2b03      	cmp	r3, #3
   1bffc:	d101      	bne.n	1c002 <readline_process_char+0x5e>
            // CTRL-C with non-empty line is cancel
            return c;
   1bffe:	687b      	ldr	r3, [r7, #4]
   1c000:	e217      	b.n	1c432 <readline_process_char+0x48e>
        #if MICROPY_REPL_EMACS_KEYS
        } else if (c == CHAR_CTRL_D) {
            // CTRL-D with non-empty line is delete-at-cursor
            goto delete_key;
        #endif
        } else if (c == CHAR_CTRL_E) {
   1c002:	687b      	ldr	r3, [r7, #4]
   1c004:	2b05      	cmp	r3, #5
   1c006:	f000 818a 	beq.w	1c31e <readline_process_char+0x37a>
            vstr_cut_out_bytes(rl.line, rl.orig_line_len, rl.cursor_pos - rl.orig_line_len);
            // set redraw parameters
            redraw_step_back = rl.cursor_pos - rl.orig_line_len;
            redraw_from_cursor = true;
        #endif
        } else if (c == '\r') {
   1c00a:	687b      	ldr	r3, [r7, #4]
   1c00c:	2b0d      	cmp	r3, #13
   1c00e:	d110      	bne.n	1c032 <readline_process_char+0x8e>
            // newline
            mp_hal_stdout_tx_str("\r\n");
   1c010:	4881      	ldr	r0, [pc, #516]	; (1c218 <readline_process_char+0x274>)
   1c012:	f7ff fa41 	bl	1b498 <mp_hal_stdout_tx_str>
            readline_push_history(vstr_null_terminated_str(rl.line) + rl.orig_line_len);
   1c016:	4b7f      	ldr	r3, [pc, #508]	; (1c214 <readline_process_char+0x270>)
   1c018:	681b      	ldr	r3, [r3, #0]
   1c01a:	4618      	mov	r0, r3
   1c01c:	f7e5 fa97 	bl	154e <vstr_null_terminated_str>
   1c020:	4602      	mov	r2, r0
   1c022:	4b7c      	ldr	r3, [pc, #496]	; (1c214 <readline_process_char+0x270>)
   1c024:	685b      	ldr	r3, [r3, #4]
   1c026:	4413      	add	r3, r2
   1c028:	4618      	mov	r0, r3
   1c02a:	f000 fa63 	bl	1c4f4 <readline_push_history>
            return 0;
   1c02e:	2300      	movs	r3, #0
   1c030:	e1ff      	b.n	1c432 <readline_process_char+0x48e>
        } else if (c == 27) {
   1c032:	687b      	ldr	r3, [r7, #4]
   1c034:	2b1b      	cmp	r3, #27
   1c036:	d103      	bne.n	1c040 <readline_process_char+0x9c>
            // escape sequence
            rl.escape_seq = ESEQ_ESC;
   1c038:	4b76      	ldr	r3, [pc, #472]	; (1c214 <readline_process_char+0x270>)
   1c03a:	2201      	movs	r2, #1
   1c03c:	609a      	str	r2, [r3, #8]
   1c03e:	e1a3      	b.n	1c388 <readline_process_char+0x3e4>
        } else if (c == 8 || c == 127) {
   1c040:	687b      	ldr	r3, [r7, #4]
   1c042:	2b08      	cmp	r3, #8
   1c044:	d002      	beq.n	1c04c <readline_process_char+0xa8>
   1c046:	687b      	ldr	r3, [r7, #4]
   1c048:	2b7f      	cmp	r3, #127	; 0x7f
   1c04a:	d118      	bne.n	1c07e <readline_process_char+0xda>
            // backspace/delete
            if (rl.cursor_pos > rl.orig_line_len) {
   1c04c:	4b71      	ldr	r3, [pc, #452]	; (1c214 <readline_process_char+0x270>)
   1c04e:	691a      	ldr	r2, [r3, #16]
   1c050:	4b70      	ldr	r3, [pc, #448]	; (1c214 <readline_process_char+0x270>)
   1c052:	685b      	ldr	r3, [r3, #4]
   1c054:	429a      	cmp	r2, r3
   1c056:	f240 8197 	bls.w	1c388 <readline_process_char+0x3e4>
                    nspace = 1;
                } else {
                    nspace = 4;
                }
                #else
                int nspace = 1;
   1c05a:	2301      	movs	r3, #1
   1c05c:	60fb      	str	r3, [r7, #12]
                #endif

                // do the backspace
                vstr_cut_out_bytes(rl.line, rl.cursor_pos - nspace, nspace);
   1c05e:	4b6d      	ldr	r3, [pc, #436]	; (1c214 <readline_process_char+0x270>)
   1c060:	6818      	ldr	r0, [r3, #0]
   1c062:	4b6c      	ldr	r3, [pc, #432]	; (1c214 <readline_process_char+0x270>)
   1c064:	691a      	ldr	r2, [r3, #16]
   1c066:	68fb      	ldr	r3, [r7, #12]
   1c068:	1ad3      	subs	r3, r2, r3
   1c06a:	68fa      	ldr	r2, [r7, #12]
   1c06c:	4619      	mov	r1, r3
   1c06e:	f7e5 fb5e 	bl	172e <vstr_cut_out_bytes>
                // set redraw parameters
                redraw_step_back = nspace;
   1c072:	68fb      	ldr	r3, [r7, #12]
   1c074:	627b      	str	r3, [r7, #36]	; 0x24
                redraw_from_cursor = true;
   1c076:	2301      	movs	r3, #1
   1c078:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            if (rl.cursor_pos > rl.orig_line_len) {
   1c07c:	e184      	b.n	1c388 <readline_process_char+0x3e4>
            }
        #if MICROPY_HELPER_REPL
        } else if (c == 9) {
   1c07e:	687b      	ldr	r3, [r7, #4]
   1c080:	2b09      	cmp	r3, #9
   1c082:	d14c      	bne.n	1c11e <readline_process_char+0x17a>
            // tab magic
            const char *compl_str;
            size_t compl_len = mp_repl_autocomplete(rl.line->buf + rl.orig_line_len, rl.cursor_pos - rl.orig_line_len, &mp_plat_print, &compl_str);
   1c084:	4b63      	ldr	r3, [pc, #396]	; (1c214 <readline_process_char+0x270>)
   1c086:	681b      	ldr	r3, [r3, #0]
   1c088:	689a      	ldr	r2, [r3, #8]
   1c08a:	4b62      	ldr	r3, [pc, #392]	; (1c214 <readline_process_char+0x270>)
   1c08c:	685b      	ldr	r3, [r3, #4]
   1c08e:	18d0      	adds	r0, r2, r3
   1c090:	4b60      	ldr	r3, [pc, #384]	; (1c214 <readline_process_char+0x270>)
   1c092:	691a      	ldr	r2, [r3, #16]
   1c094:	4b5f      	ldr	r3, [pc, #380]	; (1c214 <readline_process_char+0x270>)
   1c096:	685b      	ldr	r3, [r3, #4]
   1c098:	1ad1      	subs	r1, r2, r3
   1c09a:	f107 0308 	add.w	r3, r7, #8
   1c09e:	4a5f      	ldr	r2, [pc, #380]	; (1c21c <readline_process_char+0x278>)
   1c0a0:	f7fe fd3e 	bl	1ab20 <mp_repl_autocomplete>
   1c0a4:	6138      	str	r0, [r7, #16]
            if (compl_len == 0) {
   1c0a6:	693b      	ldr	r3, [r7, #16]
   1c0a8:	2b00      	cmp	r3, #0
   1c0aa:	f000 816d 	beq.w	1c388 <readline_process_char+0x3e4>
                // no match
            } else if (compl_len == (size_t)(-1)) {
   1c0ae:	693b      	ldr	r3, [r7, #16]
   1c0b0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   1c0b4:	d116      	bne.n	1c0e4 <readline_process_char+0x140>
                // many matches
                mp_hal_stdout_tx_str(rl.prompt);
   1c0b6:	4b57      	ldr	r3, [pc, #348]	; (1c214 <readline_process_char+0x270>)
   1c0b8:	699b      	ldr	r3, [r3, #24]
   1c0ba:	4618      	mov	r0, r3
   1c0bc:	f7ff f9ec 	bl	1b498 <mp_hal_stdout_tx_str>
                mp_hal_stdout_tx_strn(rl.line->buf + rl.orig_line_len, rl.cursor_pos - rl.orig_line_len);
   1c0c0:	4b54      	ldr	r3, [pc, #336]	; (1c214 <readline_process_char+0x270>)
   1c0c2:	681b      	ldr	r3, [r3, #0]
   1c0c4:	689a      	ldr	r2, [r3, #8]
   1c0c6:	4b53      	ldr	r3, [pc, #332]	; (1c214 <readline_process_char+0x270>)
   1c0c8:	685b      	ldr	r3, [r3, #4]
   1c0ca:	18d0      	adds	r0, r2, r3
   1c0cc:	4b51      	ldr	r3, [pc, #324]	; (1c214 <readline_process_char+0x270>)
   1c0ce:	691a      	ldr	r2, [r3, #16]
   1c0d0:	4b50      	ldr	r3, [pc, #320]	; (1c214 <readline_process_char+0x270>)
   1c0d2:	685b      	ldr	r3, [r3, #4]
   1c0d4:	1ad3      	subs	r3, r2, r3
   1c0d6:	4619      	mov	r1, r3
   1c0d8:	f7ff f8dc 	bl	1b294 <mp_hal_stdout_tx_strn>
                redraw_from_cursor = true;
   1c0dc:	2301      	movs	r3, #1
   1c0de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
   1c0e2:	e151      	b.n	1c388 <readline_process_char+0x3e4>
            } else {
                // one match
                for (size_t i = 0; i < compl_len; ++i) {
   1c0e4:	2300      	movs	r3, #0
   1c0e6:	61bb      	str	r3, [r7, #24]
   1c0e8:	e00f      	b.n	1c10a <readline_process_char+0x166>
                    vstr_ins_byte(rl.line, rl.cursor_pos + i, *compl_str++);
   1c0ea:	4b4a      	ldr	r3, [pc, #296]	; (1c214 <readline_process_char+0x270>)
   1c0ec:	6818      	ldr	r0, [r3, #0]
   1c0ee:	4b49      	ldr	r3, [pc, #292]	; (1c214 <readline_process_char+0x270>)
   1c0f0:	691a      	ldr	r2, [r3, #16]
   1c0f2:	69bb      	ldr	r3, [r7, #24]
   1c0f4:	18d1      	adds	r1, r2, r3
   1c0f6:	68bb      	ldr	r3, [r7, #8]
   1c0f8:	1c5a      	adds	r2, r3, #1
   1c0fa:	60ba      	str	r2, [r7, #8]
   1c0fc:	781b      	ldrb	r3, [r3, #0]
   1c0fe:	461a      	mov	r2, r3
   1c100:	f7e5 fac5 	bl	168e <vstr_ins_byte>
                for (size_t i = 0; i < compl_len; ++i) {
   1c104:	69bb      	ldr	r3, [r7, #24]
   1c106:	3301      	adds	r3, #1
   1c108:	61bb      	str	r3, [r7, #24]
   1c10a:	69ba      	ldr	r2, [r7, #24]
   1c10c:	693b      	ldr	r3, [r7, #16]
   1c10e:	429a      	cmp	r2, r3
   1c110:	d3eb      	bcc.n	1c0ea <readline_process_char+0x146>
                }
                // set redraw parameters
                redraw_from_cursor = true;
   1c112:	2301      	movs	r3, #1
   1c114:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
                redraw_step_forward = compl_len;
   1c118:	693b      	ldr	r3, [r7, #16]
   1c11a:	61fb      	str	r3, [r7, #28]
   1c11c:	e134      	b.n	1c388 <readline_process_char+0x3e4>
            }
        #endif
        } else if (32 <= c && c <= 126) {
   1c11e:	687b      	ldr	r3, [r7, #4]
   1c120:	2b1f      	cmp	r3, #31
   1c122:	f340 8131 	ble.w	1c388 <readline_process_char+0x3e4>
   1c126:	687b      	ldr	r3, [r7, #4]
   1c128:	2b7e      	cmp	r3, #126	; 0x7e
   1c12a:	f300 812d 	bgt.w	1c388 <readline_process_char+0x3e4>
            // printable character
            vstr_ins_char(rl.line, rl.cursor_pos, c);
   1c12e:	4b39      	ldr	r3, [pc, #228]	; (1c214 <readline_process_char+0x270>)
   1c130:	6818      	ldr	r0, [r3, #0]
   1c132:	4b38      	ldr	r3, [pc, #224]	; (1c214 <readline_process_char+0x270>)
   1c134:	691b      	ldr	r3, [r3, #16]
   1c136:	687a      	ldr	r2, [r7, #4]
   1c138:	4619      	mov	r1, r3
   1c13a:	f7e5 fabc 	bl	16b6 <vstr_ins_char>
            // set redraw parameters
            redraw_from_cursor = true;
   1c13e:	2301      	movs	r3, #1
   1c140:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            redraw_step_forward = 1;
   1c144:	2301      	movs	r3, #1
   1c146:	61fb      	str	r3, [r7, #28]
   1c148:	e11e      	b.n	1c388 <readline_process_char+0x3e4>
        }
    } else if (rl.escape_seq == ESEQ_ESC) {
   1c14a:	4b32      	ldr	r3, [pc, #200]	; (1c214 <readline_process_char+0x270>)
   1c14c:	689b      	ldr	r3, [r3, #8]
   1c14e:	2b01      	cmp	r3, #1
   1c150:	d110      	bne.n	1c174 <readline_process_char+0x1d0>
        switch (c) {
   1c152:	687b      	ldr	r3, [r7, #4]
   1c154:	2b4f      	cmp	r3, #79	; 0x4f
   1c156:	d005      	beq.n	1c164 <readline_process_char+0x1c0>
   1c158:	2b5b      	cmp	r3, #91	; 0x5b
   1c15a:	d107      	bne.n	1c16c <readline_process_char+0x1c8>
            case '[':
                rl.escape_seq = ESEQ_ESC_BRACKET;
   1c15c:	4b2d      	ldr	r3, [pc, #180]	; (1c214 <readline_process_char+0x270>)
   1c15e:	2202      	movs	r2, #2
   1c160:	609a      	str	r2, [r3, #8]
                break;
   1c162:	e111      	b.n	1c388 <readline_process_char+0x3e4>
            case 'O':
                rl.escape_seq = ESEQ_ESC_O;
   1c164:	4b2b      	ldr	r3, [pc, #172]	; (1c214 <readline_process_char+0x270>)
   1c166:	2204      	movs	r2, #4
   1c168:	609a      	str	r2, [r3, #8]
                break;
   1c16a:	e10d      	b.n	1c388 <readline_process_char+0x3e4>
            default:
                DEBUG_printf("(ESC %d)", c);
                rl.escape_seq = ESEQ_NONE;
   1c16c:	4b29      	ldr	r3, [pc, #164]	; (1c214 <readline_process_char+0x270>)
   1c16e:	2200      	movs	r2, #0
   1c170:	609a      	str	r2, [r3, #8]
   1c172:	e109      	b.n	1c388 <readline_process_char+0x3e4>
        }
    } else if (rl.escape_seq == ESEQ_ESC_BRACKET) {
   1c174:	4b27      	ldr	r3, [pc, #156]	; (1c214 <readline_process_char+0x270>)
   1c176:	689b      	ldr	r3, [r3, #8]
   1c178:	2b02      	cmp	r3, #2
   1c17a:	f040 80ab 	bne.w	1c2d4 <readline_process_char+0x330>
        if ('0' <= c && c <= '9') {
   1c17e:	687b      	ldr	r3, [r7, #4]
   1c180:	2b2f      	cmp	r3, #47	; 0x2f
   1c182:	dd0a      	ble.n	1c19a <readline_process_char+0x1f6>
   1c184:	687b      	ldr	r3, [r7, #4]
   1c186:	2b39      	cmp	r3, #57	; 0x39
   1c188:	dc07      	bgt.n	1c19a <readline_process_char+0x1f6>
            rl.escape_seq = ESEQ_ESC_BRACKET_DIGIT;
   1c18a:	4b22      	ldr	r3, [pc, #136]	; (1c214 <readline_process_char+0x270>)
   1c18c:	2203      	movs	r2, #3
   1c18e:	609a      	str	r2, [r3, #8]
            rl.escape_seq_buf[0] = c;
   1c190:	687b      	ldr	r3, [r7, #4]
   1c192:	b2da      	uxtb	r2, r3
   1c194:	4b1f      	ldr	r3, [pc, #124]	; (1c214 <readline_process_char+0x270>)
   1c196:	751a      	strb	r2, [r3, #20]
   1c198:	e0f6      	b.n	1c388 <readline_process_char+0x3e4>
        } else {
            rl.escape_seq = ESEQ_NONE;
   1c19a:	4b1e      	ldr	r3, [pc, #120]	; (1c214 <readline_process_char+0x270>)
   1c19c:	2200      	movs	r2, #0
   1c19e:	609a      	str	r2, [r3, #8]
            if (c == 'A') {
   1c1a0:	687b      	ldr	r3, [r7, #4]
   1c1a2:	2b41      	cmp	r3, #65	; 0x41
   1c1a4:	d13e      	bne.n	1c224 <readline_process_char+0x280>
#if MICROPY_REPL_EMACS_KEYS
up_arrow_key:
#endif
                // up arrow
                if (rl.hist_cur + 1 < (int)READLINE_HIST_SIZE && MP_STATE_PORT(readline_hist)[rl.hist_cur + 1] != NULL) {
   1c1a6:	4b1b      	ldr	r3, [pc, #108]	; (1c214 <readline_process_char+0x270>)
   1c1a8:	68db      	ldr	r3, [r3, #12]
   1c1aa:	3301      	adds	r3, #1
   1c1ac:	2b07      	cmp	r3, #7
   1c1ae:	f300 80eb 	bgt.w	1c388 <readline_process_char+0x3e4>
   1c1b2:	4b18      	ldr	r3, [pc, #96]	; (1c214 <readline_process_char+0x270>)
   1c1b4:	68db      	ldr	r3, [r3, #12]
   1c1b6:	3301      	adds	r3, #1
   1c1b8:	4a19      	ldr	r2, [pc, #100]	; (1c220 <readline_process_char+0x27c>)
   1c1ba:	331a      	adds	r3, #26
   1c1bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1c1c0:	2b00      	cmp	r3, #0
   1c1c2:	f000 80e1 	beq.w	1c388 <readline_process_char+0x3e4>
                    // increase hist num
                    rl.hist_cur += 1;
   1c1c6:	4b13      	ldr	r3, [pc, #76]	; (1c214 <readline_process_char+0x270>)
   1c1c8:	68db      	ldr	r3, [r3, #12]
   1c1ca:	3301      	adds	r3, #1
   1c1cc:	4a11      	ldr	r2, [pc, #68]	; (1c214 <readline_process_char+0x270>)
   1c1ce:	60d3      	str	r3, [r2, #12]
                    // set line to history
                    rl.line->len = rl.orig_line_len;
   1c1d0:	4b10      	ldr	r3, [pc, #64]	; (1c214 <readline_process_char+0x270>)
   1c1d2:	681b      	ldr	r3, [r3, #0]
   1c1d4:	4a0f      	ldr	r2, [pc, #60]	; (1c214 <readline_process_char+0x270>)
   1c1d6:	6852      	ldr	r2, [r2, #4]
   1c1d8:	605a      	str	r2, [r3, #4]
                    vstr_add_str(rl.line, MP_STATE_PORT(readline_hist)[rl.hist_cur]);
   1c1da:	4b0e      	ldr	r3, [pc, #56]	; (1c214 <readline_process_char+0x270>)
   1c1dc:	6818      	ldr	r0, [r3, #0]
   1c1de:	4b0d      	ldr	r3, [pc, #52]	; (1c214 <readline_process_char+0x270>)
   1c1e0:	68db      	ldr	r3, [r3, #12]
   1c1e2:	4a0f      	ldr	r2, [pc, #60]	; (1c220 <readline_process_char+0x27c>)
   1c1e4:	331a      	adds	r3, #26
   1c1e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1c1ea:	4619      	mov	r1, r3
   1c1ec:	f7e5 f9eb 	bl	15c6 <vstr_add_str>
                    // set redraw parameters
                    redraw_step_back = rl.cursor_pos - rl.orig_line_len;
   1c1f0:	4b08      	ldr	r3, [pc, #32]	; (1c214 <readline_process_char+0x270>)
   1c1f2:	691a      	ldr	r2, [r3, #16]
   1c1f4:	4b07      	ldr	r3, [pc, #28]	; (1c214 <readline_process_char+0x270>)
   1c1f6:	685b      	ldr	r3, [r3, #4]
   1c1f8:	1ad3      	subs	r3, r2, r3
   1c1fa:	627b      	str	r3, [r7, #36]	; 0x24
                    redraw_from_cursor = true;
   1c1fc:	2301      	movs	r3, #1
   1c1fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
                    redraw_step_forward = rl.line->len - rl.orig_line_len;
   1c202:	4b04      	ldr	r3, [pc, #16]	; (1c214 <readline_process_char+0x270>)
   1c204:	681b      	ldr	r3, [r3, #0]
   1c206:	685a      	ldr	r2, [r3, #4]
   1c208:	4b02      	ldr	r3, [pc, #8]	; (1c214 <readline_process_char+0x270>)
   1c20a:	685b      	ldr	r3, [r3, #4]
   1c20c:	1ad3      	subs	r3, r2, r3
   1c20e:	61fb      	str	r3, [r7, #28]
   1c210:	e0ba      	b.n	1c388 <readline_process_char+0x3e4>
   1c212:	bf00      	nop
   1c214:	20000a10 	.word	0x20000a10
   1c218:	00022c60 	.word	0x00022c60
   1c21c:	0001d5ac 	.word	0x0001d5ac
   1c220:	20000a2c 	.word	0x20000a2c
                }
            } else if (c == 'B') {
   1c224:	687b      	ldr	r3, [r7, #4]
   1c226:	2b42      	cmp	r3, #66	; 0x42
   1c228:	d134      	bne.n	1c294 <readline_process_char+0x2f0>
#if MICROPY_REPL_EMACS_KEYS
down_arrow_key:
#endif
                // down arrow
                if (rl.hist_cur >= 0) {
   1c22a:	4b84      	ldr	r3, [pc, #528]	; (1c43c <readline_process_char+0x498>)
   1c22c:	68db      	ldr	r3, [r3, #12]
   1c22e:	2b00      	cmp	r3, #0
   1c230:	f2c0 80aa 	blt.w	1c388 <readline_process_char+0x3e4>
                    // decrease hist num
                    rl.hist_cur -= 1;
   1c234:	4b81      	ldr	r3, [pc, #516]	; (1c43c <readline_process_char+0x498>)
   1c236:	68db      	ldr	r3, [r3, #12]
   1c238:	3b01      	subs	r3, #1
   1c23a:	4a80      	ldr	r2, [pc, #512]	; (1c43c <readline_process_char+0x498>)
   1c23c:	60d3      	str	r3, [r2, #12]
                    // set line to history
                    vstr_cut_tail_bytes(rl.line, rl.line->len - rl.orig_line_len);
   1c23e:	4b7f      	ldr	r3, [pc, #508]	; (1c43c <readline_process_char+0x498>)
   1c240:	6818      	ldr	r0, [r3, #0]
   1c242:	4b7e      	ldr	r3, [pc, #504]	; (1c43c <readline_process_char+0x498>)
   1c244:	681b      	ldr	r3, [r3, #0]
   1c246:	685a      	ldr	r2, [r3, #4]
   1c248:	4b7c      	ldr	r3, [pc, #496]	; (1c43c <readline_process_char+0x498>)
   1c24a:	685b      	ldr	r3, [r3, #4]
   1c24c:	1ad3      	subs	r3, r2, r3
   1c24e:	4619      	mov	r1, r3
   1c250:	f7e5 fa53 	bl	16fa <vstr_cut_tail_bytes>
                    if (rl.hist_cur >= 0) {
   1c254:	4b79      	ldr	r3, [pc, #484]	; (1c43c <readline_process_char+0x498>)
   1c256:	68db      	ldr	r3, [r3, #12]
   1c258:	2b00      	cmp	r3, #0
   1c25a:	db0a      	blt.n	1c272 <readline_process_char+0x2ce>
                        vstr_add_str(rl.line, MP_STATE_PORT(readline_hist)[rl.hist_cur]);
   1c25c:	4b77      	ldr	r3, [pc, #476]	; (1c43c <readline_process_char+0x498>)
   1c25e:	6818      	ldr	r0, [r3, #0]
   1c260:	4b76      	ldr	r3, [pc, #472]	; (1c43c <readline_process_char+0x498>)
   1c262:	68db      	ldr	r3, [r3, #12]
   1c264:	4a76      	ldr	r2, [pc, #472]	; (1c440 <readline_process_char+0x49c>)
   1c266:	331a      	adds	r3, #26
   1c268:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1c26c:	4619      	mov	r1, r3
   1c26e:	f7e5 f9aa 	bl	15c6 <vstr_add_str>
                    }
                    // set redraw parameters
                    redraw_step_back = rl.cursor_pos - rl.orig_line_len;
   1c272:	4b72      	ldr	r3, [pc, #456]	; (1c43c <readline_process_char+0x498>)
   1c274:	691a      	ldr	r2, [r3, #16]
   1c276:	4b71      	ldr	r3, [pc, #452]	; (1c43c <readline_process_char+0x498>)
   1c278:	685b      	ldr	r3, [r3, #4]
   1c27a:	1ad3      	subs	r3, r2, r3
   1c27c:	627b      	str	r3, [r7, #36]	; 0x24
                    redraw_from_cursor = true;
   1c27e:	2301      	movs	r3, #1
   1c280:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
                    redraw_step_forward = rl.line->len - rl.orig_line_len;
   1c284:	4b6d      	ldr	r3, [pc, #436]	; (1c43c <readline_process_char+0x498>)
   1c286:	681b      	ldr	r3, [r3, #0]
   1c288:	685a      	ldr	r2, [r3, #4]
   1c28a:	4b6c      	ldr	r3, [pc, #432]	; (1c43c <readline_process_char+0x498>)
   1c28c:	685b      	ldr	r3, [r3, #4]
   1c28e:	1ad3      	subs	r3, r2, r3
   1c290:	61fb      	str	r3, [r7, #28]
   1c292:	e079      	b.n	1c388 <readline_process_char+0x3e4>
                }
            } else if (c == 'C') {
   1c294:	687b      	ldr	r3, [r7, #4]
   1c296:	2b43      	cmp	r3, #67	; 0x43
   1c298:	d109      	bne.n	1c2ae <readline_process_char+0x30a>
#if MICROPY_REPL_EMACS_KEYS
right_arrow_key:
#endif
                // right arrow
                if (rl.cursor_pos < rl.line->len) {
   1c29a:	4b68      	ldr	r3, [pc, #416]	; (1c43c <readline_process_char+0x498>)
   1c29c:	691a      	ldr	r2, [r3, #16]
   1c29e:	4b67      	ldr	r3, [pc, #412]	; (1c43c <readline_process_char+0x498>)
   1c2a0:	681b      	ldr	r3, [r3, #0]
   1c2a2:	685b      	ldr	r3, [r3, #4]
   1c2a4:	429a      	cmp	r2, r3
   1c2a6:	d26f      	bcs.n	1c388 <readline_process_char+0x3e4>
                    redraw_step_forward = 1;
   1c2a8:	2301      	movs	r3, #1
   1c2aa:	61fb      	str	r3, [r7, #28]
   1c2ac:	e06c      	b.n	1c388 <readline_process_char+0x3e4>
                }
            } else if (c == 'D') {
   1c2ae:	687b      	ldr	r3, [r7, #4]
   1c2b0:	2b44      	cmp	r3, #68	; 0x44
   1c2b2:	d108      	bne.n	1c2c6 <readline_process_char+0x322>
#if MICROPY_REPL_EMACS_KEYS
left_arrow_key:
#endif
                // left arrow
                if (rl.cursor_pos > rl.orig_line_len) {
   1c2b4:	4b61      	ldr	r3, [pc, #388]	; (1c43c <readline_process_char+0x498>)
   1c2b6:	691a      	ldr	r2, [r3, #16]
   1c2b8:	4b60      	ldr	r3, [pc, #384]	; (1c43c <readline_process_char+0x498>)
   1c2ba:	685b      	ldr	r3, [r3, #4]
   1c2bc:	429a      	cmp	r2, r3
   1c2be:	d963      	bls.n	1c388 <readline_process_char+0x3e4>
                    redraw_step_back = 1;
   1c2c0:	2301      	movs	r3, #1
   1c2c2:	627b      	str	r3, [r7, #36]	; 0x24
   1c2c4:	e060      	b.n	1c388 <readline_process_char+0x3e4>
                }
            } else if (c == 'H') {
   1c2c6:	687b      	ldr	r3, [r7, #4]
   1c2c8:	2b48      	cmp	r3, #72	; 0x48
   1c2ca:	d015      	beq.n	1c2f8 <readline_process_char+0x354>
                // home
                goto home_key;
            } else if (c == 'F') {
   1c2cc:	687b      	ldr	r3, [r7, #4]
   1c2ce:	2b46      	cmp	r3, #70	; 0x46
   1c2d0:	d15a      	bne.n	1c388 <readline_process_char+0x3e4>
                // end
                goto end_key;
   1c2d2:	e027      	b.n	1c324 <readline_process_char+0x380>
            } else {
                DEBUG_printf("(ESC [ %d)", c);
            }
        }
    } else if (rl.escape_seq == ESEQ_ESC_BRACKET_DIGIT) {
   1c2d4:	4b59      	ldr	r3, [pc, #356]	; (1c43c <readline_process_char+0x498>)
   1c2d6:	689b      	ldr	r3, [r3, #8]
   1c2d8:	2b03      	cmp	r3, #3
   1c2da:	d145      	bne.n	1c368 <readline_process_char+0x3c4>
        if (c == '~') {
   1c2dc:	687b      	ldr	r3, [r7, #4]
   1c2de:	2b7e      	cmp	r3, #126	; 0x7e
   1c2e0:	d13e      	bne.n	1c360 <readline_process_char+0x3bc>
            if (rl.escape_seq_buf[0] == '1' || rl.escape_seq_buf[0] == '7') {
   1c2e2:	4b56      	ldr	r3, [pc, #344]	; (1c43c <readline_process_char+0x498>)
   1c2e4:	7d1b      	ldrb	r3, [r3, #20]
   1c2e6:	2b31      	cmp	r3, #49	; 0x31
   1c2e8:	d009      	beq.n	1c2fe <readline_process_char+0x35a>
   1c2ea:	4b54      	ldr	r3, [pc, #336]	; (1c43c <readline_process_char+0x498>)
   1c2ec:	7d1b      	ldrb	r3, [r3, #20]
   1c2ee:	2b37      	cmp	r3, #55	; 0x37
   1c2f0:	d10c      	bne.n	1c30c <readline_process_char+0x368>
   1c2f2:	e004      	b.n	1c2fe <readline_process_char+0x35a>
            goto home_key;
   1c2f4:	bf00      	nop
   1c2f6:	e002      	b.n	1c2fe <readline_process_char+0x35a>
                goto home_key;
   1c2f8:	bf00      	nop
   1c2fa:	e000      	b.n	1c2fe <readline_process_char+0x35a>
        }
        rl.escape_seq = ESEQ_NONE;
    } else if (rl.escape_seq == ESEQ_ESC_O) {
        switch (c) {
            case 'H':
                goto home_key;
   1c2fc:	bf00      	nop
                redraw_step_back = rl.cursor_pos - rl.orig_line_len;
   1c2fe:	4b4f      	ldr	r3, [pc, #316]	; (1c43c <readline_process_char+0x498>)
   1c300:	691a      	ldr	r2, [r3, #16]
   1c302:	4b4e      	ldr	r3, [pc, #312]	; (1c43c <readline_process_char+0x498>)
   1c304:	685b      	ldr	r3, [r3, #4]
   1c306:	1ad3      	subs	r3, r2, r3
   1c308:	627b      	str	r3, [r7, #36]	; 0x24
   1c30a:	e029      	b.n	1c360 <readline_process_char+0x3bc>
            } else if (rl.escape_seq_buf[0] == '4' || rl.escape_seq_buf[0] == '8') {
   1c30c:	4b4b      	ldr	r3, [pc, #300]	; (1c43c <readline_process_char+0x498>)
   1c30e:	7d1b      	ldrb	r3, [r3, #20]
   1c310:	2b34      	cmp	r3, #52	; 0x34
   1c312:	d007      	beq.n	1c324 <readline_process_char+0x380>
   1c314:	4b49      	ldr	r3, [pc, #292]	; (1c43c <readline_process_char+0x498>)
   1c316:	7d1b      	ldrb	r3, [r3, #20]
   1c318:	2b38      	cmp	r3, #56	; 0x38
   1c31a:	d10b      	bne.n	1c334 <readline_process_char+0x390>
   1c31c:	e002      	b.n	1c324 <readline_process_char+0x380>
            goto end_key;
   1c31e:	bf00      	nop
   1c320:	e000      	b.n	1c324 <readline_process_char+0x380>
            case 'F':
                goto end_key;
   1c322:	bf00      	nop
                redraw_step_forward = rl.line->len - rl.cursor_pos;
   1c324:	4b45      	ldr	r3, [pc, #276]	; (1c43c <readline_process_char+0x498>)
   1c326:	681b      	ldr	r3, [r3, #0]
   1c328:	685a      	ldr	r2, [r3, #4]
   1c32a:	4b44      	ldr	r3, [pc, #272]	; (1c43c <readline_process_char+0x498>)
   1c32c:	691b      	ldr	r3, [r3, #16]
   1c32e:	1ad3      	subs	r3, r2, r3
   1c330:	61fb      	str	r3, [r7, #28]
   1c332:	e015      	b.n	1c360 <readline_process_char+0x3bc>
            } else if (rl.escape_seq_buf[0] == '3') {
   1c334:	4b41      	ldr	r3, [pc, #260]	; (1c43c <readline_process_char+0x498>)
   1c336:	7d1b      	ldrb	r3, [r3, #20]
   1c338:	2b33      	cmp	r3, #51	; 0x33
   1c33a:	d111      	bne.n	1c360 <readline_process_char+0x3bc>
                if (rl.cursor_pos < rl.line->len) {
   1c33c:	4b3f      	ldr	r3, [pc, #252]	; (1c43c <readline_process_char+0x498>)
   1c33e:	691a      	ldr	r2, [r3, #16]
   1c340:	4b3e      	ldr	r3, [pc, #248]	; (1c43c <readline_process_char+0x498>)
   1c342:	681b      	ldr	r3, [r3, #0]
   1c344:	685b      	ldr	r3, [r3, #4]
   1c346:	429a      	cmp	r2, r3
   1c348:	d20a      	bcs.n	1c360 <readline_process_char+0x3bc>
                    vstr_cut_out_bytes(rl.line, rl.cursor_pos, 1);
   1c34a:	4b3c      	ldr	r3, [pc, #240]	; (1c43c <readline_process_char+0x498>)
   1c34c:	6818      	ldr	r0, [r3, #0]
   1c34e:	4b3b      	ldr	r3, [pc, #236]	; (1c43c <readline_process_char+0x498>)
   1c350:	691b      	ldr	r3, [r3, #16]
   1c352:	2201      	movs	r2, #1
   1c354:	4619      	mov	r1, r3
   1c356:	f7e5 f9ea 	bl	172e <vstr_cut_out_bytes>
                    redraw_from_cursor = true;
   1c35a:	2301      	movs	r3, #1
   1c35c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        rl.escape_seq = ESEQ_NONE;
   1c360:	4b36      	ldr	r3, [pc, #216]	; (1c43c <readline_process_char+0x498>)
   1c362:	2200      	movs	r2, #0
   1c364:	609a      	str	r2, [r3, #8]
   1c366:	e00f      	b.n	1c388 <readline_process_char+0x3e4>
    } else if (rl.escape_seq == ESEQ_ESC_O) {
   1c368:	4b34      	ldr	r3, [pc, #208]	; (1c43c <readline_process_char+0x498>)
   1c36a:	689b      	ldr	r3, [r3, #8]
   1c36c:	2b04      	cmp	r3, #4
   1c36e:	d108      	bne.n	1c382 <readline_process_char+0x3de>
        switch (c) {
   1c370:	687b      	ldr	r3, [r7, #4]
   1c372:	2b46      	cmp	r3, #70	; 0x46
   1c374:	d0d5      	beq.n	1c322 <readline_process_char+0x37e>
   1c376:	2b48      	cmp	r3, #72	; 0x48
   1c378:	d0c0      	beq.n	1c2fc <readline_process_char+0x358>
            default:
                DEBUG_printf("(ESC O %d)", c);
                rl.escape_seq = ESEQ_NONE;
   1c37a:	4b30      	ldr	r3, [pc, #192]	; (1c43c <readline_process_char+0x498>)
   1c37c:	2200      	movs	r2, #0
   1c37e:	609a      	str	r2, [r3, #8]
   1c380:	e002      	b.n	1c388 <readline_process_char+0x3e4>
        }
    } else {
        rl.escape_seq = ESEQ_NONE;
   1c382:	4b2e      	ldr	r3, [pc, #184]	; (1c43c <readline_process_char+0x498>)
   1c384:	2200      	movs	r2, #0
   1c386:	609a      	str	r2, [r3, #8]
    }

    // redraw command prompt, efficiently
    if (redraw_step_back > 0) {
   1c388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1c38a:	2b00      	cmp	r3, #0
   1c38c:	dd09      	ble.n	1c3a2 <readline_process_char+0x3fe>
        mp_hal_move_cursor_back(redraw_step_back);
   1c38e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1c390:	4618      	mov	r0, r3
   1c392:	f7ff fdca 	bl	1bf2a <mp_hal_move_cursor_back>
        rl.cursor_pos -= redraw_step_back;
   1c396:	4b29      	ldr	r3, [pc, #164]	; (1c43c <readline_process_char+0x498>)
   1c398:	691a      	ldr	r2, [r3, #16]
   1c39a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1c39c:	1ad3      	subs	r3, r2, r3
   1c39e:	4a27      	ldr	r2, [pc, #156]	; (1c43c <readline_process_char+0x498>)
   1c3a0:	6113      	str	r3, [r2, #16]
    }
    if (redraw_from_cursor) {
   1c3a2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
   1c3a6:	2b00      	cmp	r3, #0
   1c3a8:	d02d      	beq.n	1c406 <readline_process_char+0x462>
        if (rl.line->len < last_line_len) {
   1c3aa:	4b24      	ldr	r3, [pc, #144]	; (1c43c <readline_process_char+0x498>)
   1c3ac:	681b      	ldr	r3, [r3, #0]
   1c3ae:	685a      	ldr	r2, [r3, #4]
   1c3b0:	697b      	ldr	r3, [r7, #20]
   1c3b2:	429a      	cmp	r2, r3
   1c3b4:	d206      	bcs.n	1c3c4 <readline_process_char+0x420>
            // erase old chars
            mp_hal_erase_line_from_cursor(last_line_len - rl.cursor_pos);
   1c3b6:	4b21      	ldr	r3, [pc, #132]	; (1c43c <readline_process_char+0x498>)
   1c3b8:	691b      	ldr	r3, [r3, #16]
   1c3ba:	697a      	ldr	r2, [r7, #20]
   1c3bc:	1ad3      	subs	r3, r2, r3
   1c3be:	4618      	mov	r0, r3
   1c3c0:	f7ff fde2 	bl	1bf88 <mp_hal_erase_line_from_cursor>
        }
        // draw new chars
        mp_hal_stdout_tx_strn(rl.line->buf + rl.cursor_pos, rl.line->len - rl.cursor_pos);
   1c3c4:	4b1d      	ldr	r3, [pc, #116]	; (1c43c <readline_process_char+0x498>)
   1c3c6:	681b      	ldr	r3, [r3, #0]
   1c3c8:	689a      	ldr	r2, [r3, #8]
   1c3ca:	4b1c      	ldr	r3, [pc, #112]	; (1c43c <readline_process_char+0x498>)
   1c3cc:	691b      	ldr	r3, [r3, #16]
   1c3ce:	18d0      	adds	r0, r2, r3
   1c3d0:	4b1a      	ldr	r3, [pc, #104]	; (1c43c <readline_process_char+0x498>)
   1c3d2:	681b      	ldr	r3, [r3, #0]
   1c3d4:	685a      	ldr	r2, [r3, #4]
   1c3d6:	4b19      	ldr	r3, [pc, #100]	; (1c43c <readline_process_char+0x498>)
   1c3d8:	691b      	ldr	r3, [r3, #16]
   1c3da:	1ad3      	subs	r3, r2, r3
   1c3dc:	4619      	mov	r1, r3
   1c3de:	f7fe ff59 	bl	1b294 <mp_hal_stdout_tx_strn>
        // move cursor forward if needed (already moved forward by length of line, so move it back)
        mp_hal_move_cursor_back(rl.line->len - (rl.cursor_pos + redraw_step_forward));
   1c3e2:	4b16      	ldr	r3, [pc, #88]	; (1c43c <readline_process_char+0x498>)
   1c3e4:	681b      	ldr	r3, [r3, #0]
   1c3e6:	685a      	ldr	r2, [r3, #4]
   1c3e8:	4b14      	ldr	r3, [pc, #80]	; (1c43c <readline_process_char+0x498>)
   1c3ea:	6919      	ldr	r1, [r3, #16]
   1c3ec:	69fb      	ldr	r3, [r7, #28]
   1c3ee:	440b      	add	r3, r1
   1c3f0:	1ad3      	subs	r3, r2, r3
   1c3f2:	4618      	mov	r0, r3
   1c3f4:	f7ff fd99 	bl	1bf2a <mp_hal_move_cursor_back>
        rl.cursor_pos += redraw_step_forward;
   1c3f8:	4b10      	ldr	r3, [pc, #64]	; (1c43c <readline_process_char+0x498>)
   1c3fa:	691a      	ldr	r2, [r3, #16]
   1c3fc:	69fb      	ldr	r3, [r7, #28]
   1c3fe:	4413      	add	r3, r2
   1c400:	4a0e      	ldr	r2, [pc, #56]	; (1c43c <readline_process_char+0x498>)
   1c402:	6113      	str	r3, [r2, #16]
   1c404:	e013      	b.n	1c42e <readline_process_char+0x48a>
    } else if (redraw_step_forward > 0) {
   1c406:	69fb      	ldr	r3, [r7, #28]
   1c408:	2b00      	cmp	r3, #0
   1c40a:	dd10      	ble.n	1c42e <readline_process_char+0x48a>
        // draw over old chars to move cursor forwards
        mp_hal_stdout_tx_strn(rl.line->buf + rl.cursor_pos, redraw_step_forward);
   1c40c:	4b0b      	ldr	r3, [pc, #44]	; (1c43c <readline_process_char+0x498>)
   1c40e:	681b      	ldr	r3, [r3, #0]
   1c410:	689a      	ldr	r2, [r3, #8]
   1c412:	4b0a      	ldr	r3, [pc, #40]	; (1c43c <readline_process_char+0x498>)
   1c414:	691b      	ldr	r3, [r3, #16]
   1c416:	4413      	add	r3, r2
   1c418:	69fa      	ldr	r2, [r7, #28]
   1c41a:	4611      	mov	r1, r2
   1c41c:	4618      	mov	r0, r3
   1c41e:	f7fe ff39 	bl	1b294 <mp_hal_stdout_tx_strn>
        rl.cursor_pos += redraw_step_forward;
   1c422:	4b06      	ldr	r3, [pc, #24]	; (1c43c <readline_process_char+0x498>)
   1c424:	691a      	ldr	r2, [r3, #16]
   1c426:	69fb      	ldr	r3, [r7, #28]
   1c428:	4413      	add	r3, r2
   1c42a:	4a04      	ldr	r2, [pc, #16]	; (1c43c <readline_process_char+0x498>)
   1c42c:	6113      	str	r3, [r2, #16]
    }

    return -1;
   1c42e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
   1c432:	4618      	mov	r0, r3
   1c434:	3728      	adds	r7, #40	; 0x28
   1c436:	46bd      	mov	sp, r7
   1c438:	bd80      	pop	{r7, pc}
   1c43a:	bf00      	nop
   1c43c:	20000a10 	.word	0x20000a10
   1c440:	20000a2c 	.word	0x20000a2c

0001c444 <readline_note_newline>:
        }
    }
}
#endif

void readline_note_newline(const char *prompt) {
   1c444:	b580      	push	{r7, lr}
   1c446:	b082      	sub	sp, #8
   1c448:	af00      	add	r7, sp, #0
   1c44a:	6078      	str	r0, [r7, #4]
    rl.orig_line_len = rl.line->len;
   1c44c:	4b09      	ldr	r3, [pc, #36]	; (1c474 <readline_note_newline+0x30>)
   1c44e:	681b      	ldr	r3, [r3, #0]
   1c450:	685b      	ldr	r3, [r3, #4]
   1c452:	4a08      	ldr	r2, [pc, #32]	; (1c474 <readline_note_newline+0x30>)
   1c454:	6053      	str	r3, [r2, #4]
    rl.cursor_pos = rl.orig_line_len;
   1c456:	4b07      	ldr	r3, [pc, #28]	; (1c474 <readline_note_newline+0x30>)
   1c458:	685b      	ldr	r3, [r3, #4]
   1c45a:	4a06      	ldr	r2, [pc, #24]	; (1c474 <readline_note_newline+0x30>)
   1c45c:	6113      	str	r3, [r2, #16]
    rl.prompt = prompt;
   1c45e:	4a05      	ldr	r2, [pc, #20]	; (1c474 <readline_note_newline+0x30>)
   1c460:	687b      	ldr	r3, [r7, #4]
   1c462:	6193      	str	r3, [r2, #24]
    mp_hal_stdout_tx_str(prompt);
   1c464:	6878      	ldr	r0, [r7, #4]
   1c466:	f7ff f817 	bl	1b498 <mp_hal_stdout_tx_str>
    #if MICROPY_REPL_AUTO_INDENT
    readline_auto_indent();
    #endif
}
   1c46a:	bf00      	nop
   1c46c:	3708      	adds	r7, #8
   1c46e:	46bd      	mov	sp, r7
   1c470:	bd80      	pop	{r7, pc}
   1c472:	bf00      	nop
   1c474:	20000a10 	.word	0x20000a10

0001c478 <readline_init>:

void readline_init(vstr_t *line, const char *prompt) {
   1c478:	b580      	push	{r7, lr}
   1c47a:	b082      	sub	sp, #8
   1c47c:	af00      	add	r7, sp, #0
   1c47e:	6078      	str	r0, [r7, #4]
   1c480:	6039      	str	r1, [r7, #0]
    rl.line = line;
   1c482:	4a0f      	ldr	r2, [pc, #60]	; (1c4c0 <readline_init+0x48>)
   1c484:	687b      	ldr	r3, [r7, #4]
   1c486:	6013      	str	r3, [r2, #0]
    rl.orig_line_len = line->len;
   1c488:	687b      	ldr	r3, [r7, #4]
   1c48a:	685b      	ldr	r3, [r3, #4]
   1c48c:	4a0c      	ldr	r2, [pc, #48]	; (1c4c0 <readline_init+0x48>)
   1c48e:	6053      	str	r3, [r2, #4]
    rl.escape_seq = ESEQ_NONE;
   1c490:	4b0b      	ldr	r3, [pc, #44]	; (1c4c0 <readline_init+0x48>)
   1c492:	2200      	movs	r2, #0
   1c494:	609a      	str	r2, [r3, #8]
    rl.escape_seq_buf[0] = 0;
   1c496:	4b0a      	ldr	r3, [pc, #40]	; (1c4c0 <readline_init+0x48>)
   1c498:	2200      	movs	r2, #0
   1c49a:	751a      	strb	r2, [r3, #20]
    rl.hist_cur = -1;
   1c49c:	4b08      	ldr	r3, [pc, #32]	; (1c4c0 <readline_init+0x48>)
   1c49e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1c4a2:	60da      	str	r2, [r3, #12]
    rl.cursor_pos = rl.orig_line_len;
   1c4a4:	4b06      	ldr	r3, [pc, #24]	; (1c4c0 <readline_init+0x48>)
   1c4a6:	685b      	ldr	r3, [r3, #4]
   1c4a8:	4a05      	ldr	r2, [pc, #20]	; (1c4c0 <readline_init+0x48>)
   1c4aa:	6113      	str	r3, [r2, #16]
    rl.prompt = prompt;
   1c4ac:	4a04      	ldr	r2, [pc, #16]	; (1c4c0 <readline_init+0x48>)
   1c4ae:	683b      	ldr	r3, [r7, #0]
   1c4b0:	6193      	str	r3, [r2, #24]
    mp_hal_stdout_tx_str(prompt);
   1c4b2:	6838      	ldr	r0, [r7, #0]
   1c4b4:	f7fe fff0 	bl	1b498 <mp_hal_stdout_tx_str>
    #if MICROPY_REPL_AUTO_INDENT
    readline_auto_indent();
    #endif
}
   1c4b8:	bf00      	nop
   1c4ba:	3708      	adds	r7, #8
   1c4bc:	46bd      	mov	sp, r7
   1c4be:	bd80      	pop	{r7, pc}
   1c4c0:	20000a10 	.word	0x20000a10

0001c4c4 <readline>:

int readline(vstr_t *line, const char *prompt) {
   1c4c4:	b580      	push	{r7, lr}
   1c4c6:	b084      	sub	sp, #16
   1c4c8:	af00      	add	r7, sp, #0
   1c4ca:	6078      	str	r0, [r7, #4]
   1c4cc:	6039      	str	r1, [r7, #0]
    readline_init(line, prompt);
   1c4ce:	6839      	ldr	r1, [r7, #0]
   1c4d0:	6878      	ldr	r0, [r7, #4]
   1c4d2:	f7ff ffd1 	bl	1c478 <readline_init>
    for (;;) {
        int c = mp_hal_stdin_rx_chr();
   1c4d6:	f7fe fec5 	bl	1b264 <mp_hal_stdin_rx_chr>
   1c4da:	60f8      	str	r0, [r7, #12]
        int r = readline_process_char(c);
   1c4dc:	68f8      	ldr	r0, [r7, #12]
   1c4de:	f7ff fd61 	bl	1bfa4 <readline_process_char>
   1c4e2:	60b8      	str	r0, [r7, #8]
        if (r >= 0) {
   1c4e4:	68bb      	ldr	r3, [r7, #8]
   1c4e6:	2b00      	cmp	r3, #0
   1c4e8:	dbf5      	blt.n	1c4d6 <readline+0x12>
            return r;
   1c4ea:	68bb      	ldr	r3, [r7, #8]
        }
    }
}
   1c4ec:	4618      	mov	r0, r3
   1c4ee:	3710      	adds	r7, #16
   1c4f0:	46bd      	mov	sp, r7
   1c4f2:	bd80      	pop	{r7, pc}

0001c4f4 <readline_push_history>:

void readline_push_history(const char *line) {
   1c4f4:	b580      	push	{r7, lr}
   1c4f6:	b084      	sub	sp, #16
   1c4f8:	af00      	add	r7, sp, #0
   1c4fa:	6078      	str	r0, [r7, #4]
    if (line[0] != '\0'
   1c4fc:	687b      	ldr	r3, [r7, #4]
   1c4fe:	781b      	ldrb	r3, [r3, #0]
   1c500:	2b00      	cmp	r3, #0
   1c502:	d02a      	beq.n	1c55a <readline_push_history+0x66>
        && (MP_STATE_PORT(readline_hist)[0] == NULL
   1c504:	4b17      	ldr	r3, [pc, #92]	; (1c564 <readline_push_history+0x70>)
   1c506:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   1c508:	2b00      	cmp	r3, #0
   1c50a:	d008      	beq.n	1c51e <readline_push_history+0x2a>
            || strcmp(MP_STATE_PORT(readline_hist)[0], line) != 0)) {
   1c50c:	4b15      	ldr	r3, [pc, #84]	; (1c564 <readline_push_history+0x70>)
   1c50e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   1c510:	6879      	ldr	r1, [r7, #4]
   1c512:	4618      	mov	r0, r3
   1c514:	f7ff fba6 	bl	1bc64 <strcmp>
   1c518:	4603      	mov	r3, r0
   1c51a:	2b00      	cmp	r3, #0
   1c51c:	d01d      	beq.n	1c55a <readline_push_history+0x66>
        // a line which is not empty and different from the last one
        // so update the history
        char *most_recent_hist = str_dup_maybe(line);
   1c51e:	6878      	ldr	r0, [r7, #4]
   1c520:	f7ff fce4 	bl	1beec <str_dup_maybe>
   1c524:	60b8      	str	r0, [r7, #8]
        if (most_recent_hist != NULL) {
   1c526:	68bb      	ldr	r3, [r7, #8]
   1c528:	2b00      	cmp	r3, #0
   1c52a:	d016      	beq.n	1c55a <readline_push_history+0x66>
            for (int i = READLINE_HIST_SIZE - 1; i > 0; i--) {
   1c52c:	2307      	movs	r3, #7
   1c52e:	60fb      	str	r3, [r7, #12]
   1c530:	e00d      	b.n	1c54e <readline_push_history+0x5a>
                MP_STATE_PORT(readline_hist)[i] = MP_STATE_PORT(readline_hist)[i - 1];
   1c532:	68fb      	ldr	r3, [r7, #12]
   1c534:	3b01      	subs	r3, #1
   1c536:	4a0b      	ldr	r2, [pc, #44]	; (1c564 <readline_push_history+0x70>)
   1c538:	331a      	adds	r3, #26
   1c53a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
   1c53e:	4909      	ldr	r1, [pc, #36]	; (1c564 <readline_push_history+0x70>)
   1c540:	68fb      	ldr	r3, [r7, #12]
   1c542:	331a      	adds	r3, #26
   1c544:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            for (int i = READLINE_HIST_SIZE - 1; i > 0; i--) {
   1c548:	68fb      	ldr	r3, [r7, #12]
   1c54a:	3b01      	subs	r3, #1
   1c54c:	60fb      	str	r3, [r7, #12]
   1c54e:	68fb      	ldr	r3, [r7, #12]
   1c550:	2b00      	cmp	r3, #0
   1c552:	dcee      	bgt.n	1c532 <readline_push_history+0x3e>
            }
            MP_STATE_PORT(readline_hist)[0] = most_recent_hist;
   1c554:	4a03      	ldr	r2, [pc, #12]	; (1c564 <readline_push_history+0x70>)
   1c556:	68bb      	ldr	r3, [r7, #8]
   1c558:	6693      	str	r3, [r2, #104]	; 0x68
        }
    }
}
   1c55a:	bf00      	nop
   1c55c:	3710      	adds	r7, #16
   1c55e:	46bd      	mov	sp, r7
   1c560:	bd80      	pop	{r7, pc}
   1c562:	bf00      	nop
   1c564:	20000a2c 	.word	0x20000a2c

0001c568 <GPIODirModeSet>:
   1c568:	f8d0 3400 	ldr.w	r3, [r0, #1024]	; 0x400
   1c56c:	f012 0f01 	tst.w	r2, #1
   1c570:	bf14      	ite	ne
   1c572:	430b      	orrne	r3, r1
   1c574:	438b      	biceq	r3, r1
   1c576:	f8c0 3400 	str.w	r3, [r0, #1024]	; 0x400
   1c57a:	f8d0 3420 	ldr.w	r3, [r0, #1056]	; 0x420
   1c57e:	0792      	lsls	r2, r2, #30
   1c580:	bf4c      	ite	mi
   1c582:	4319      	orrmi	r1, r3
   1c584:	ea23 0101 	bicpl.w	r1, r3, r1
   1c588:	f8c0 1420 	str.w	r1, [r0, #1056]	; 0x420
   1c58c:	4770      	bx	lr

0001c58e <GPIOPadConfigSet>:
   1c58e:	b5f0      	push	{r4, r5, r6, r7, lr}
   1c590:	f3c2 1741 	ubfx	r7, r2, #5, #2
   1c594:	2500      	movs	r5, #0
   1c596:	f04f 0e03 	mov.w	lr, #3
   1c59a:	fa41 f405 	asr.w	r4, r1, r5
   1c59e:	07e6      	lsls	r6, r4, #31
   1c5a0:	d50f      	bpl.n	1c5c2 <GPIOPadConfigSet+0x34>
   1c5a2:	f8d0 6fc4 	ldr.w	r6, [r0, #4036]	; 0xfc4
   1c5a6:	006c      	lsls	r4, r5, #1
   1c5a8:	fa0e fc04 	lsl.w	ip, lr, r4
   1c5ac:	ea26 060c 	bic.w	r6, r6, ip
   1c5b0:	f8c0 6fc4 	str.w	r6, [r0, #4036]	; 0xfc4
   1c5b4:	f8d0 6fc4 	ldr.w	r6, [r0, #4036]	; 0xfc4
   1c5b8:	fa07 f404 	lsl.w	r4, r7, r4
   1c5bc:	4334      	orrs	r4, r6
   1c5be:	f8c0 4fc4 	str.w	r4, [r0, #4036]	; 0xfc4
   1c5c2:	3501      	adds	r5, #1
   1c5c4:	2d08      	cmp	r5, #8
   1c5c6:	d1e8      	bne.n	1c59a <GPIOPadConfigSet+0xc>
   1c5c8:	f8d0 4500 	ldr.w	r4, [r0, #1280]	; 0x500
   1c5cc:	07d5      	lsls	r5, r2, #31
   1c5ce:	bf4c      	ite	mi
   1c5d0:	430c      	orrmi	r4, r1
   1c5d2:	438c      	bicpl	r4, r1
   1c5d4:	f8c0 4500 	str.w	r4, [r0, #1280]	; 0x500
   1c5d8:	f8d0 4504 	ldr.w	r4, [r0, #1284]	; 0x504
   1c5dc:	0797      	lsls	r7, r2, #30
   1c5de:	bf4c      	ite	mi
   1c5e0:	430c      	orrmi	r4, r1
   1c5e2:	438c      	bicpl	r4, r1
   1c5e4:	f8c0 4504 	str.w	r4, [r0, #1284]	; 0x504
   1c5e8:	f8d0 4508 	ldr.w	r4, [r0, #1288]	; 0x508
   1c5ec:	0756      	lsls	r6, r2, #29
   1c5ee:	bf4c      	ite	mi
   1c5f0:	430c      	orrmi	r4, r1
   1c5f2:	438c      	bicpl	r4, r1
   1c5f4:	f8c0 4508 	str.w	r4, [r0, #1288]	; 0x508
   1c5f8:	f8d0 4518 	ldr.w	r4, [r0, #1304]	; 0x518
   1c5fc:	0715      	lsls	r5, r2, #28
   1c5fe:	bf4c      	ite	mi
   1c600:	430c      	orrmi	r4, r1
   1c602:	438c      	bicpl	r4, r1
   1c604:	f8c0 4518 	str.w	r4, [r0, #1304]	; 0x518
   1c608:	f012 0f10 	tst.w	r2, #16
   1c60c:	f8d0 253c 	ldr.w	r2, [r0, #1340]	; 0x53c
   1c610:	bf14      	ite	ne
   1c612:	430a      	orrne	r2, r1
   1c614:	438a      	biceq	r2, r1
   1c616:	f8c0 253c 	str.w	r2, [r0, #1340]	; 0x53c
   1c61a:	f8d0 250c 	ldr.w	r2, [r0, #1292]	; 0x50c
   1c61e:	07dc      	lsls	r4, r3, #31
   1c620:	bf4c      	ite	mi
   1c622:	430a      	orrmi	r2, r1
   1c624:	438a      	bicpl	r2, r1
   1c626:	f8c0 250c 	str.w	r2, [r0, #1292]	; 0x50c
   1c62a:	f8d0 2510 	ldr.w	r2, [r0, #1296]	; 0x510
   1c62e:	079f      	lsls	r7, r3, #30
   1c630:	bf4c      	ite	mi
   1c632:	430a      	orrmi	r2, r1
   1c634:	438a      	bicpl	r2, r1
   1c636:	f8c0 2510 	str.w	r2, [r0, #1296]	; 0x510
   1c63a:	f8d0 2514 	ldr.w	r2, [r0, #1300]	; 0x514
   1c63e:	075e      	lsls	r6, r3, #29
   1c640:	bf4c      	ite	mi
   1c642:	430a      	orrmi	r2, r1
   1c644:	438a      	bicpl	r2, r1
   1c646:	f8c0 2514 	str.w	r2, [r0, #1300]	; 0x514
   1c64a:	f8d0 251c 	ldr.w	r2, [r0, #1308]	; 0x51c
   1c64e:	071d      	lsls	r5, r3, #28
   1c650:	bf4c      	ite	mi
   1c652:	430a      	orrmi	r2, r1
   1c654:	438a      	bicpl	r2, r1
   1c656:	f8c0 251c 	str.w	r2, [r0, #1308]	; 0x51c
   1c65a:	f8d0 2544 	ldr.w	r2, [r0, #1348]	; 0x544
   1c65e:	059c      	lsls	r4, r3, #22
   1c660:	bf4c      	ite	mi
   1c662:	430a      	orrmi	r2, r1
   1c664:	438a      	bicpl	r2, r1
   1c666:	f8c0 2544 	str.w	r2, [r0, #1348]	; 0x544
   1c66a:	f8d0 2540 	ldr.w	r2, [r0, #1344]	; 0x540
   1c66e:	f413 7f40 	tst.w	r3, #768	; 0x300
   1c672:	bf14      	ite	ne
   1c674:	430a      	orrne	r2, r1
   1c676:	438a      	biceq	r2, r1
   1c678:	f8c0 2540 	str.w	r2, [r0, #1344]	; 0x540
   1c67c:	b92b      	cbnz	r3, 1c68a <GPIOPadConfigSet+0xfc>
   1c67e:	f8d0 3528 	ldr.w	r3, [r0, #1320]	; 0x528
   1c682:	4319      	orrs	r1, r3
   1c684:	f8c0 1528 	str.w	r1, [r0, #1320]	; 0x528
   1c688:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1c68a:	f8d0 3528 	ldr.w	r3, [r0, #1320]	; 0x528
   1c68e:	ea23 0101 	bic.w	r1, r3, r1
   1c692:	e7f7      	b.n	1c684 <GPIOPadConfigSet+0xf6>

0001c694 <GPIOPinWrite>:
   1c694:	f840 2021 	str.w	r2, [r0, r1, lsl #2]
   1c698:	4770      	bx	lr

0001c69a <GPIOPinTypeGPIOOutput>:
   1c69a:	b538      	push	{r3, r4, r5, lr}
   1c69c:	2201      	movs	r2, #1
   1c69e:	460d      	mov	r5, r1
   1c6a0:	2308      	movs	r3, #8
   1c6a2:	f7ff ff74 	bl	1c58e <GPIOPadConfigSet>
   1c6a6:	4629      	mov	r1, r5
   1c6a8:	2201      	movs	r2, #1
   1c6aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   1c6ae:	f7ff bf5b 	b.w	1c568 <GPIODirModeSet>
	...

0001c6b4 <SysCtlPeripheralEnable>:
   1c6b4:	4a07      	ldr	r2, [pc, #28]	; (1c6d4 <SysCtlPeripheralEnable+0x20>)
   1c6b6:	f3c0 2307 	ubfx	r3, r0, #8, #8
   1c6ba:	441a      	add	r2, r3
   1c6bc:	0080      	lsls	r0, r0, #2
   1c6be:	4b06      	ldr	r3, [pc, #24]	; (1c6d8 <SysCtlPeripheralEnable+0x24>)
   1c6c0:	f400 707f 	and.w	r0, r0, #1020	; 0x3fc
   1c6c4:	ea03 1342 	and.w	r3, r3, r2, lsl #5
   1c6c8:	f040 4084 	orr.w	r0, r0, #1107296256	; 0x42000000
   1c6cc:	4318      	orrs	r0, r3
   1c6ce:	2301      	movs	r3, #1
   1c6d0:	6003      	str	r3, [r0, #0]
   1c6d2:	4770      	bx	lr
   1c6d4:	400fe600 	.word	0x400fe600
   1c6d8:	01ffffe0 	.word	0x01ffffe0

0001c6dc <SysCtlDelay>:
   1c6dc:	3801      	subs	r0, #1
   1c6de:	f47f affd 	bne.w	1c6dc <SysCtlDelay>
   1c6e2:	4770      	bx	lr

0001c6e4 <SysCtlClockSet>:
   1c6e4:	493b      	ldr	r1, [pc, #236]	; (1c7d4 <SysCtlClockSet+0xf0>)
   1c6e6:	b5f0      	push	{r4, r5, r6, r7, lr}
   1c6e8:	4c3b      	ldr	r4, [pc, #236]	; (1c7d8 <SysCtlClockSet+0xf4>)
   1c6ea:	680a      	ldr	r2, [r1, #0]
   1c6ec:	6825      	ldr	r5, [r4, #0]
   1c6ee:	f422 0380 	bic.w	r3, r2, #4194304	; 0x400000
   1c6f2:	f445 6600 	orr.w	r6, r5, #2048	; 0x800
   1c6f6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   1c6fa:	f012 0f01 	tst.w	r2, #1
   1c6fe:	600b      	str	r3, [r1, #0]
   1c700:	6026      	str	r6, [r4, #0]
   1c702:	4e36      	ldr	r6, [pc, #216]	; (1c7dc <SysCtlClockSet+0xf8>)
   1c704:	d010      	beq.n	1c728 <SysCtlClockSet+0x44>
   1c706:	07c2      	lsls	r2, r0, #31
   1c708:	d40e      	bmi.n	1c728 <SysCtlClockSet+0x44>
   1c70a:	f060 0201 	orn	r2, r0, #1
   1c70e:	4013      	ands	r3, r2
   1c710:	f8df e0dc 	ldr.w	lr, [pc, #220]	; 1c7f0 <SysCtlClockSet+0x10c>
   1c714:	f44f 7280 	mov.w	r2, #256	; 0x100
   1c718:	6032      	str	r2, [r6, #0]
   1c71a:	600b      	str	r3, [r1, #0]
   1c71c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
   1c720:	f8de 7000 	ldr.w	r7, [lr]
   1c724:	05ff      	lsls	r7, r7, #23
   1c726:	d551      	bpl.n	1c7cc <SysCtlClockSet+0xe8>
   1c728:	f423 62fe 	bic.w	r2, r3, #2032	; 0x7f0
   1c72c:	f400 63fe 	and.w	r3, r0, #2032	; 0x7f0
   1c730:	4313      	orrs	r3, r2
   1c732:	f025 4500 	bic.w	r5, r5, #2147483648	; 0x80000000
   1c736:	4a2a      	ldr	r2, [pc, #168]	; (1c7e0 <SysCtlClockSet+0xfc>)
   1c738:	600b      	str	r3, [r1, #0]
   1c73a:	f025 0570 	bic.w	r5, r5, #112	; 0x70
   1c73e:	f445 6500 	orr.w	r5, r5, #2048	; 0x800
   1c742:	4002      	ands	r2, r0
   1c744:	432a      	orrs	r2, r5
   1c746:	00c5      	lsls	r5, r0, #3
   1c748:	f005 0540 	and.w	r5, r5, #64	; 0x40
   1c74c:	4315      	orrs	r5, r2
   1c74e:	6025      	str	r5, [r4, #0]
   1c750:	f400 5200 	and.w	r2, r0, #8192	; 0x2000
   1c754:	f425 5500 	bic.w	r5, r5, #8192	; 0x2000
   1c758:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
   1c75c:	4313      	orrs	r3, r2
   1c75e:	2740      	movs	r7, #64	; 0x40
   1c760:	432a      	orrs	r2, r5
   1c762:	4d20      	ldr	r5, [pc, #128]	; (1c7e4 <SysCtlClockSet+0x100>)
   1c764:	6037      	str	r7, [r6, #0]
   1c766:	bf4a      	itet	mi
   1c768:	6022      	strmi	r2, [r4, #0]
   1c76a:	600b      	strpl	r3, [r1, #0]
   1c76c:	600b      	strmi	r3, [r1, #0]
   1c76e:	f023 63f8 	bic.w	r3, r3, #130023424	; 0x7c00000
   1c772:	ea00 0505 	and.w	r5, r0, r5
   1c776:	f023 0301 	bic.w	r3, r3, #1
   1c77a:	bf58      	it	pl
   1c77c:	6022      	strpl	r2, [r4, #0]
   1c77e:	432b      	orrs	r3, r5
   1c780:	f022 55fc 	bic.w	r5, r2, #528482304	; 0x1f800000
   1c784:	f000 52fc 	and.w	r2, r0, #528482304	; 0x1f800000
   1c788:	432a      	orrs	r2, r5
   1c78a:	0045      	lsls	r5, r0, #1
   1c78c:	bf41      	itttt	mi
   1c78e:	4d16      	ldrmi	r5, [pc, #88]	; (1c7e8 <SysCtlClockSet+0x104>)
   1c790:	f422 0280 	bicmi.w	r2, r2, #4194304	; 0x400000
   1c794:	4005      	andmi	r5, r0
   1c796:	f443 0380 	orrmi.w	r3, r3, #4194304	; 0x400000
   1c79a:	bf4c      	ite	mi
   1c79c:	432a      	orrmi	r2, r5
   1c79e:	f022 4280 	bicpl.w	r2, r2, #1073741824	; 0x40000000
   1c7a2:	0507      	lsls	r7, r0, #20
   1c7a4:	d40b      	bmi.n	1c7be <SysCtlClockSet+0xda>
   1c7a6:	4d11      	ldr	r5, [pc, #68]	; (1c7ec <SysCtlClockSet+0x108>)
   1c7a8:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   1c7ac:	682e      	ldr	r6, [r5, #0]
   1c7ae:	07f6      	lsls	r6, r6, #31
   1c7b0:	d401      	bmi.n	1c7b6 <SysCtlClockSet+0xd2>
   1c7b2:	3801      	subs	r0, #1
   1c7b4:	d1fa      	bne.n	1c7ac <SysCtlClockSet+0xc8>
   1c7b6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   1c7ba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
   1c7be:	600b      	str	r3, [r1, #0]
   1c7c0:	2010      	movs	r0, #16
   1c7c2:	6022      	str	r2, [r4, #0]
   1c7c4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   1c7c8:	f7ff bf88 	b.w	1c6dc <SysCtlDelay>
   1c7cc:	3a01      	subs	r2, #1
   1c7ce:	d1a7      	bne.n	1c720 <SysCtlClockSet+0x3c>
   1c7d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1c7d2:	bf00      	nop
   1c7d4:	400fe060 	.word	0x400fe060
   1c7d8:	400fe070 	.word	0x400fe070
   1c7dc:	400fe058 	.word	0x400fe058
   1c7e0:	80000030 	.word	0x80000030
   1c7e4:	07c00001 	.word	0x07c00001
   1c7e8:	40400000 	.word	0x40400000
   1c7ec:	400fe168 	.word	0x400fe168
   1c7f0:	400fe050 	.word	0x400fe050

0001c7f4 <__func__.7677>:
   1c7f4:	665f6367 00656572                       gc_free.

0001c7fc <__func__.7694>:
   1c7fc:	725f6367 6c6c6165 0000636f 49524556     gc_realloc..VERI
   1c80c:	505f5946 70285254 00297274 2e2f2e2e     FY_PTR(ptr).../.
   1c81c:	79702f2e 2e63672f 00000063 5f425441     ./py/gc.c...ATB_
   1c82c:	5f544547 444e494b 6f6c6228 20296b63     GET_KIND(block) 
   1c83c:	41203d3d 45485f54 00004441 5f425441     == AT_HEAD..ATB_
   1c84c:	5f544547 444e494b 296c6228 203d3d20     GET_KIND(bl) == 
   1c85c:	465f5441 00454552 203a4347 61746f74     AT_FREE.GC: tota
   1c86c:	25203a6c 75202c75 3a646573 2c752520     l: %u, used: %u,
   1c87c:	65726620 25203a65 00000a75 2e6f4e20      free: %u... No.
   1c88c:	20666f20 6c622d31 736b636f 7525203a      of 1-blocks: %u
   1c89c:	2d32202c 636f6c62 203a736b 202c7525     , 2-blocks: %u, 
   1c8ac:	2078616d 206b6c62 203a7a73 202c7525     max blk sz: %u, 
   1c8bc:	2078616d 65657266 3a7a7320 0a752520     max free sz: %u.
   1c8cc:	00000000 6d204347 726f6d65 616c2079     ....GC memory la
   1c8dc:	74756f79 7266203b 25206d6f 00003a70     yout; from %p:..
   1c8ec:	0000000a 2020200a 20202020 20752528     .....       (%u 
   1c8fc:	656e696c 6c612073 7266206c 00296565     lines all free).
   1c90c:	3530250a 00203a78 00006325 00000000     .%05x: .%c......
   1c91c:	00000005 5f5f07c4 5f646461 0000005f     ......__add__...
   1c92c:	5f5f082b 6c6f6f62 00005f5f 5f5f0f42     +.__bool__..B.__
   1c93c:	6c697562 6c635f64 5f737361 0000005f     build_class__...
   1c94c:	5f5f08a7 6c6c6163 00005f5f 5f5f092b     ..__call__..+.__
   1c95c:	73616c63 005f5f73 5f5f0cc6 746e6f63     class__...__cont
   1c96c:	736e6961 00005f5f 5f5f0bfd 696c6564     ains__....__deli
   1c97c:	5f6d6574 0000005f 5f5f096d 65746e65     tem__...m.__ente
   1c98c:	005f5f72 5f5f0671 5f5f7165 00000000     r__.q.__eq__....
   1c99c:	5f5f0845 74697865 00005f5f 5f5f06a7     E.__exit__....__
   1c9ac:	5f5f6567 00000000 5f5f0b40 61746567     ge__....@.__geta
   1c9bc:	5f727474 0000005f 5f5f0b26 69746567     ttr__...&.__geti
   1c9cc:	5f6d6574 0000005f 5f5f06b6 5f5f7467     tem__.....__gt__
   1c9dc:	00000000 5f5f08f7 68736168 00005f5f     ......__hash__..
   1c9ec:	5f5f086d 64646169 00005f5f 5f5f0a38     m.__iadd__..8.__
   1c9fc:	6f706d69 5f5f7472 00000000 5f5f085f     import__...._.__
   1ca0c:	74696e69 00005f5f 5f5f0808 62757369     init__....__isub
   1ca1c:	00005f5f 5f5f08cf 72657469 00005f5f     __....__iter__..
   1ca2c:	5f5f06cc 5f5f656c 00000000 5f5f07e2     ..__le__......__
   1ca3c:	5f6e656c 0000005f 5f5f065d 5f5f746c     len__...].__lt__
   1ca4c:	00000000 5f5f088e 6e69616d 00005f5f     ......__main__..
   1ca5c:	5f5f0aff 75646f6d 5f5f656c 00000000     ..__module__....
   1ca6c:	5f5f08e2 656d616e 00005f5f 5f5f0779     ..__name__..y.__
   1ca7c:	5f77656e 0000005f 5f5f0802 7478656e     new__.....__next
   1ca8c:	00005f5f 5f5f08c8 68746170 00005f5f     __....__path__..
   1ca9c:	5f5f0c6b 6c617571 656d616e 00005f5f     k.__qualname__..
   1caac:	5f5f0e01 6c706572 6972705f 5f5f746e     ..__repl_print__
   1cabc:	00000000 5f5f0810 72706572 00005f5f     ......__repr__..
   1cacc:	5f5f0b32 69746573 5f6d6574 0000005f     2.__setitem__...
   1cadc:	5f5f07d0 5f727473 0000005f 5f5f0721     ..__str__...!.__
   1caec:	5f627573 0000005f 5f5f0d4f 63617274     sub__...O.__trac
   1cafc:	63616265 005f5f6b 002a018f 005f01fa     eback__...*..._.
   1cb0c:	002f018a 2325036c 0000006f 2325037b     ../.l.%#o...{.%#
   1cb1c:	00000078 3a7b0558 007d6223 00200185     x...X.{:#b}... .
   1cb2c:	000a01af 616d2073 756d6978 6572206d     ....s maximum re
   1cb3c:	73727563 206e6f69 74706564 78652068     cursion depth ex
   1cb4c:	64656563 00006465 6d3c08bd 6c75646f     ceeded....<modul
   1cb5c:	00003e65 6c3c0880 64626d61 00003e61     e>....<lambda>..
   1cb6c:	6c3c0ad4 63747369 3e706d6f 00000000     ..<listcomp>....
   1cb7c:	643c0acc 63746369 3e706d6f 00000000     ..<dictcomp>....
   1cb8c:	733c0954 6f637465 003e706d 673c0934     T.<setcomp>.4.<g
   1cb9c:	78656e65 003e7270 733c0852 6e697274     enexpr>.R.<strin
   1cbac:	00003e67 733c07e3 6e696474 0000003e     g>....<stdin>...
   1cbbc:	747505b7 00382d66 72410f2d 6d687469     ..utf-8.-.Arithm
   1cbcc:	63697465 6f727245 00000072 73410e97     eticError.....As
   1cbdc:	74726573 456e6f69 726f7272 00000000     sertionError....
   1cbec:	74410e21 62697274 45657475 726f7272     !.AttributeError
   1cbfc:	00000000 61420d07 78456573 74706563     ......BaseExcept
   1cc0c:	006e6f69 4f450891 72724546 0000726f     ion...EOFError..
   1cc1c:	6c4508f0 7370696c 00007369 784509f2     ..Ellipsis....Ex
   1cc2c:	74706563 006e6f69 65470d16 6172656e     ception...Genera
   1cc3c:	45726f74 00746978 6d490b20 74726f70     torExit. .Import
   1cc4c:	6f727245 00000072 6e49105c 746e6564     Error...\.Indent
   1cc5c:	6f697461 7272456e 0000726f 6e490a83     ationError....In
   1cc6c:	45786564 726f7272 00000000 654b08ea     dexError......Ke
   1cc7c:	72724579 0000726f 654b11af 616f6279     yError....Keyboa
   1cc8c:	6e496472 72726574 00747075 6f4c0bff     rdInterrupt...Lo
   1cc9c:	70756b6f 6f727245 00000072 654d0bdc     okupError.....Me
   1ccac:	79726f6d 6f727245 00000072 614e09ba     moryError.....Na
   1ccbc:	7245656d 00726f72 6f4e0817 7954656e     meError...NoneTy
   1cccc:	00006570 6f4e13c6 706d4974 656d656c     pe....NotImpleme
   1ccdc:	6465746e 6f727245 00000072 534f07a1     ntedError.....OS
   1ccec:	6f727245 00000072 764f0d81 6c667265     Error.....Overfl
   1ccfc:	7245776f 00726f72 75520c61 6d69746e     owError.a.Runtim
   1cd0c:	72724565 0000726f 74530dea 7449706f     eError....StopIt
   1cd1c:	74617265 006e6f69 79530b94 7861746e     eration...Syntax
   1cd2c:	6f727245 00000072 79530a20 6d657473     Error... .System
   1cd3c:	74697845 00000000 79540925 72456570     Exit....%.TypeEr
   1cd4c:	00726f72 61560a96 4565756c 726f7272     ror...ValueError
   1cd5c:	00000000 655a11b6 69446f72 69736976     ......ZeroDivisi
   1cd6c:	72456e6f 00726f72 62610395 00000073     onError...abs...
   1cd7c:	6c610344 0000006c 6e610313 00000079     D.all.....any...
   1cd8c:	7061066b 646e6570 00000000 726104c2     k.append......ar
   1cd9c:	00007367 696203e0 0000006e 6f6204eb     gs....bin.....bo
   1cdac:	00006c6f 6f620c97 5f646e75 6874656d     ol....bound_meth
   1cdbc:	0000646f 756208f7 69746c69 0000736e     od....builtins..
   1cdcc:	79620822 6f636574 00006564 7962055c     ".bytecode..\.by
   1cddc:	00736574 6163080d 62616c6c 0000656c     tes...callable..
   1cdec:	686303dc 00000072 6c630bb4 6d737361     ..chr.....classm
   1cdfc:	6f687465 00000064 6c63057c 00726165     ethod...|.clear.
   1ce0c:	6c630533 0065736f 6c630774 7275736f     3.close.t.closur
   1ce1c:	00000065 6f6305c0 0074736e 6f6304e0     e.....const...co
   1ce2c:	00007970 6f6305a6 00746e75 6964043f     py....count.?.di
   1ce3c:	00007463 6964092d 765f7463 00776569     ct..-.dict_view.
   1ce4c:	696403fa 00000072 696406b8 646f6d76     ..dir.....divmod
   1ce5c:	00000000 6e65030a 00000064 6e65081b     ......end.....en
   1ce6c:	69777364 00006874 7665049b 00006c61     dswith....eval..
   1ce7c:	7865041e 00006365 78650663 646e6574     ..exec..c.extend
   1ce8c:	00000000 69660401 0000646e 6f660626     ......find..&.fo
   1ce9c:	74616d72 00000000 72660a35 625f6d6f     rmat....5.from_b
   1ceac:	73657479 00000000 72660837 656b6d6f     ytes....7.fromke
   1cebc:	00007379 75660827 6974636e 00006e6f     ys..'.function..
   1cecc:	65670996 6172656e 00726f74 65670333     ..generator.3.ge
   1cedc:	00000074 656707c0 74746174 00000072     t.....getattr...
   1ceec:	6c67079d 6c61626f 00000073 6168078c     ..globals.....ha
   1cefc:	74746173 00000072 616804b7 00006873     sattr.....hash..
   1cf0c:	656809ad 6c5f7061 006b636f 65680b56     ..heap_lock.V.he
   1cf1c:	755f7061 636f6c6e 0000006b 65680370     ap_unlock...p.he
   1cf2c:	00000078 64690228 00000000 6e69057b     x...(.id....{.in
   1cf3c:	00786564 6e690612 74726573 00000000     dex...insert....
   1cf4c:	6e690316 00000074 736907eb 68706c61     ..int.....isalph
   1cf5c:	00000061 736907a8 69676964 00000074     a.....isdigit...
   1cf6c:	73690ab6 74736e69 65636e61 00000000     ..isinstance....
   1cf7c:	736907fc 65776f6c 00000072 7369075b     ..islower...[.is
   1cf8c:	63617073 00000065 73690ab5 63627573     space.....issubc
   1cf9c:	7373616c 00000000 736907dd 65707075     lass......isuppe
   1cfac:	00000072 746905e3 00736d65 7469048f     r.....items...it
   1cfbc:	00007265 74690847 74617265 0000726f     er..G.iterator..
   1cfcc:	6f6a04a7 00006e69 656b0332 00000079     ..join..2.key...
   1cfdc:	656b0401 00007379 656c0362 0000006e     ..keys..b.len...
   1cfec:	696c0427 00007473 696c0689 656c7474     '.list....little
   1cffc:	00000000 6f6c063b 736c6163 00000000     ....;.locals....
   1d00c:	6f6c05c6 00726577 736c06e5 70697274     ..lower...lstrip
   1d01c:	00000000 616d03b9 00000070 696d0b0b     ......map.....mi
   1d02c:	706f7263 6f687479 0000006e 6f6d06bf     cropython.....mo
   1d03c:	656c7564 00000000 656e0442 00007478     dule....B.next..
   1d04c:	626f0690 7463656a 00000000 636f03fd     ..object......oc
   1d05c:	00000074 706f04d1 00006e65 706f0987     t.....open....op
   1d06c:	656c5f74 006c6576 726f031c 00000064     t_level...ord...
   1d07c:	65700af3 745f646e 776f7268 00000000     ..pend_throw....
   1d08c:	6f70032a 00000070 6f7007bf 65746970     *.pop.....popite
   1d09c:	0000006d 6f70032d 00000077 72700554     m...-.pow...T.pr
   1d0ac:	00746e69 6172051a 0065676e 65720663     int...range.c.re
   1d0bc:	65766f6d 00000000 65720749 63616c70     move....I.replac
   1d0cc:	00000065 657204d0 00007270 65720725     e.....repr..%.re
   1d0dc:	73726576 00000065 667205d2 00646e69     verse.....rfind.
   1d0ec:	697206e9 7865646e 00000000 6f7205e7     ..rindex......ro
   1d0fc:	00646e75 737206a5 74696c70 00000000     und...rsplit....
   1d10c:	7372063b 70697274 00000000 657304b9     ;.rstrip......se
   1d11c:	0000646e 65730323 00000070 657307d4     nd..#.sep.....se
   1d12c:	74746174 00000072 65730a6c 66656474     tattr...l.setdef
   1d13c:	746c7561 00000000 6f7304bf 00007472     ault......sort..
   1d14c:	6f73065e 64657472 00000000 707305b7     ^.sorted......sp
   1d15c:	0074696c 74730585 00747261 74730a74     lit...start.t.st
   1d16c:	73747261 68746977 00000000 74730c62     artswith....b.st
   1d17c:	63697461 6874656d 0000646f 74730457     aticmethod..W.st
   1d18c:	00007065 7473049d 0000706f 74730350     ep....stop..P.st
   1d19c:	00000072 74730529 00706972 7573032e     r...).strip...su
   1d1ac:	0000006d 757305c4 00726570 687405b3     m.....super...th
   1d1bc:	00776f72 6f7408d8 7479625f 00007365     row...to_bytes..
   1d1cc:	757405fd 00656c70 7974049d 00006570     ..tuple...type..
   1d1dc:	707506b4 65746164 00000000 70750527     ..update....'.up
   1d1ec:	00726570 6176054e 0065756c 6176067d     per.N.value.}.va
   1d1fc:	7365756c 00000000 697a03e6 00000070     lues......zip...

0001d20c <mp_qstr_const_pool>:
	...
   1d214:	0000000a 000000c6 0001c918 0001c91c     ................
   1d224:	0001c920 0001c92c 0001c938 0001c94c      ...,...8...L...
   1d234:	0001c958 0001c964 0001c974 0001c984     X...d...t.......
   1d244:	0001c990 0001c99c 0001c9a8 0001c9b4     ................
   1d254:	0001c9c4 0001c9d4 0001c9e0 0001c9ec     ................
   1d264:	0001c9f8 0001ca08 0001ca14 0001ca20     ............ ...
   1d274:	0001ca2c 0001ca38 0001ca44 0001ca50     ,...8...D...P...
   1d284:	0001ca5c 0001ca6c 0001ca78 0001ca84     \...l...x.......
   1d294:	0001ca90 0001ca9c 0001caac 0001cac0     ................
   1d2a4:	0001cacc 0001cadc 0001cae8 0001caf4     ................
   1d2b4:	0001cb04 0001cb08 0001cb0c 0001cb10     ................
   1d2c4:	0001cb18 0001cb20 0001cb28 0001cb2c     .... ...(...,...
   1d2d4:	0001cb30 0001cb54 0001cb60 0001cb6c     0...T...`...l...
   1d2e4:	0001cb7c 0001cb8c 0001cb98 0001cba4     |...............
   1d2f4:	0001cbb0 0001cbbc 0001cbc4 0001cbd8     ................
   1d304:	0001cbec 0001cc00 0001cc10 0001cc1c     ................
   1d314:	0001cc28 0001cc34 0001cc44 0001cc54     (...4...D...T...
   1d324:	0001cc68 0001cc78 0001cc84 0001cc98     h...x...........
   1d334:	0001cca8 0001ccb8 0001ccc4 0001ccd0     ................
   1d344:	0001cce8 0001ccf4 0001cd04 0001cd14     ................
   1d354:	0001cd24 0001cd34 0001cd44 0001cd50     $...4...D...P...
   1d364:	0001cd60 0001cd74 0001cd7c 0001cd84     `...t...|.......
   1d374:	0001cd8c 0001cd98 0001cda0 0001cda8     ................
   1d384:	0001cdb0 0001cdc0 0001cdcc 0001cdd8     ................
   1d394:	0001cde0 0001cdec 0001cdf4 0001ce04     ................
   1d3a4:	0001ce0c 0001ce14 0001ce20 0001ce28     ........ ...(...
   1d3b4:	0001ce30 0001ce38 0001ce40 0001ce4c     0...8...@...L...
   1d3c4:	0001ce54 0001ce60 0001ce68 0001ce74     T...`...h...t...
   1d3d4:	0001ce7c 0001ce84 0001ce90 0001ce98     |...............
   1d3e4:	0001cea4 0001ceb4 0001cec0 0001cecc     ................
   1d3f4:	0001ced8 0001cee0 0001ceec 0001cef8     ................
   1d404:	0001cf04 0001cf0c 0001cf18 0001cf28     ............(...
   1d414:	0001cf30 0001cf38 0001cf40 0001cf4c     0...8...@...L...
   1d424:	0001cf54 0001cf60 0001cf6c 0001cf7c     T...`...l...|...
   1d434:	0001cf88 0001cf94 0001cfa4 0001cfb0     ................
   1d444:	0001cfb8 0001cfc0 0001cfcc 0001cfd4     ................
   1d454:	0001cfdc 0001cfe4 0001cfec 0001cff4     ................
   1d464:	0001d000 0001d00c 0001d014 0001d020     ............ ...
   1d474:	0001d028 0001d038 0001d044 0001d04c     (...8...D...L...
   1d484:	0001d058 0001d060 0001d068 0001d074     X...`...h...t...
   1d494:	0001d07c 0001d08c 0001d094 0001d0a0     |...............
   1d4a4:	0001d0a8 0001d0b0 0001d0b8 0001d0c4     ................
   1d4b4:	0001d0d0 0001d0d8 0001d0e4 0001d0ec     ................
   1d4c4:	0001d0f8 0001d100 0001d10c 0001d118     ................
   1d4d4:	0001d120 0001d128 0001d134 0001d144      ...(...4...D...
   1d4e4:	0001d14c 0001d158 0001d160 0001d168     L...X...`...h...
   1d4f4:	0001d178 0001d188 0001d190 0001d198     x...............
   1d504:	0001d1a0 0001d1a8 0001d1b0 0001d1b8     ................
   1d514:	0001d1c0 0001d1cc 0001d1d4 0001d1dc     ................
   1d524:	0001d1e8 0001d1f0 0001d1f8 0001d204     ................
   1d534:	206e656c 3128203c 203c3c20 2a203828     len < (1 << (8 *
   1d544:	43494d20 59504f52 5453515f 59425f52      MICROPY_QSTR_BY
   1d554:	5f534554 4c5f4e49 29294e45 00000000     TES_IN_LEN))....
   1d564:	2e2f2e2e 79702f2e 7473712f 00632e72     ../../py/qstr.c.

0001d574 <__func__.7364>:
   1d574:	72747371 6f72665f 74735f6d 00006e72     qstr_from_strn..

0001d584 <pad_spaces>:
   1d584:	20202020 20202020 20202020 20202020                     
   1d594:	00000000                                ....

0001d598 <pad_zeroes>:
   1d598:	30303030 30303030 30303030 30303030     0000000000000000
   1d5a8:	00000000                                ....

0001d5ac <mp_plat_print>:
   1d5ac:	00000000 00001835 65736162 203d3d20     ....5...base == 
   1d5bc:	7c7c2032 73616220 3d3d2065 7c203820     2 || base == 8 |
   1d5cc:	6162207c 3d206573 3031203d 207c7c20     | base == 10 || 
   1d5dc:	65736162 203d3d20 00003631 2e2f2e2e     base == 16..../.
   1d5ec:	79702f2e 70706d2f 746e6972 0000632e     ./py/mpprint.c..
   1d5fc:	00000000 65757274 00000000 736c6166     ....true....fals
   1d60c:	00000065 6c756e28 0000296c 746d662a     e...(null)..*fmt
   1d61c:	203d3d20 20272527 21207c7c 736e7522      == '%' || !"uns
   1d62c:	6f707075 64657472 746d6620 61686320     upported fmt cha
   1d63c:	00002272                                r"..

0001d640 <__func__.7827>:
   1d640:	705f706d 746e6972 5f706d5f 00746e69     mp_print_mp_int.

0001d650 <__func__.7892>:
   1d650:	765f706d 6e697270 00006674              mp_vprintf..

0001d65c <attr>:
	...
   1d664:	03030300 00000303 00000000 00000000     ................
	...
   1d67c:	01010103 01010101 01010101 01010101     ................
   1d68c:	45454545 45454545 01014545 01010101     EEEEEEEEEE......
   1d69c:	59595901 19595959 19191919 19191919     .YYYYYY.........
   1d6ac:	19191919 19191919 01191919 01010101     ................
   1d6bc:	69696901 29696969 29292929 29292929     .iiiiii)))))))))
   1d6cc:	29292929 29292929 01292929 00010101     ))))))))))).....
   1d6dc:	5d5b2928 3a2c7d7b 3c7e403b 3c633d65     ()[]{},:;@~<e=c<
   1d6ec:	653e3d65 653e633d 3d652a3d 3d652a63     e=>e=c>e=*e=c*e=
   1d6fc:	2d3d652b 3e653d65 7c3d6526 652f3d65     +e=-e=e>&e=|e=/e
   1d70c:	652f633d 3d65253d 3d3d655e 2e213d65     =c/e=%e=^e==e=!.
   1d71c:	00000000                                ....

0001d720 <tok_enc>:
   1d720:	0001d6dc                                ....

0001d724 <tok_enc_kind>:
   1d724:	45444342 49484746 363d4c4b 3858373e     BCDEFGHIKL=6>7X8
   1d734:	3157393f 2f593250 5a4f304e 553b543a     ?9W1P2Y/N0OZ:T;U
   1d744:	52345133 563c5335 0000404d 736c6146     3Q4R5S<VM@..Fals
   1d754:	00000065 656e6f4e 00000000 65757254     e...None....True
   1d764:	00000000 65645f5f 5f677562 0000005f     ....__debug__...
   1d774:	00646e61 00007361 65737361 00007472     and.as..assert..
   1d784:	61657262 0000006b 73616c63 00000073     break...class...
   1d794:	746e6f63 65756e69 00000000 00666564     continue....def.
   1d7a4:	006c6564 66696c65 00000000 65736c65     del.elif....else
   1d7b4:	00000000 65637865 00007470 616e6966     ....except..fina
   1d7c4:	00796c6c 00726f66 6d6f7266 00000000     lly.for.from....
   1d7d4:	626f6c67 00006c61 00006669 6f706d69     global..if..impo
   1d7e4:	00007472 00006e69 00007369 626d616c     rt..in..is..lamb
   1d7f4:	00006164 6c6e6f6e 6c61636f 00000000     da..nonlocal....
   1d804:	00746f6e 0000726f 73736170 00000000     not.or..pass....
   1d814:	73696172 00000065 75746572 00006e72     raise...return..
   1d824:	00797274 6c696877 00000065 68746977     try.while...with
   1d834:	00000000 6c656979 00000064              ....yield...

0001d840 <tok_kw>:
   1d840:	0001d750 0001d758 0001d760 0001d768     P...X...`...h...
   1d850:	0001d774 0001d778 0001d77c 0001d784     t...x...|.......
   1d860:	0001d78c 0001d794 0001d7a0 0001d7a4     ................
   1d870:	0001d7a8 0001d7b0 0001d7b8 0001d7c0     ................
   1d880:	0001d7c8 0001d7cc 0001d7d4 0001d7dc     ................
   1d890:	0001d7e0 0001d7e8 0001d7ec 0001d7f0     ................
   1d8a0:	0001d7f8 0001d804 0001d808 0001d80c     ................
   1d8b0:	0001d814 0001d81c 0001d824 0001d828     ........$...(...
   1d8c0:	0001d830 0001d838 63696e75 2065646f     0...8...unicode 
   1d8d0:	656d616e 63736520 73657061 00000000     name escapes....

0001d8e0 <rule_act_table>:
   1d8e0:	a8623261 22332233 22212121 24222221     a2b.3"3"!!!"!""$
   1d8f0:	26232222 24242725 a4a46232 31223131     ""#&%'$$2b..11"1
   1d900:	31313122 62313131 23236262 22232323     "111111bbb#####"
   1d910:	a5233333 12130022 32242162 13336212     33#."...b!$2.b3.
   1d920:	62232263 13332262 62222262 18621261     c"#bb"3.b""ba.b.
   1d930:	62326212 151c1212 12126262 32631362     .b2b....bb..b.c2
   1d940:	62622212 31313133 24321862 62246312     ."bb3111b.2$.c$b
   1d950:	31632332 64126262 12122412 21222219     2#c1bb.d.$...""!
   1d960:	12141212 62321113 1262121c 13336212     ......2b..b..b3.
   1d970:	12621233 33633322 62222213 a5126212     3.b."3c3.""b.b..
   1d980:	00221223                                #.".

0001d984 <rule_arg_combined_table>:
   1d984:	20373001 203c203b 10071017 303e1042     .07 ; < ....B.>0
   1d994:	303d1043 20761049 104b204f 30502006     C.=0I.v O K.. P0
   1d9a4:	10482055 20901018 10141028 102a1016     U H.... (.....*.
   1d9b4:	20343031 30581029 20651021 205b101e     104 ).X0!.e ..[ 
   1d9c4:	205d1021 2067101f 20671025 20781013     !.] ..g %.g ..x 
   1d9d4:	10203068 10492078 306a2076 102c3072     h0 .x I.v j0r0,.
   1d9e4:	10492078 30722076 2090101d 20311022     x I.v r0... ".1 
   1d9f4:	20761049 102b3072 20761049 102d206c     I.v r0+.I.v l -.
   1da04:	10492073 204d2076 3079201c 30461024     s I.v M . y0$.F0
   1da14:	20781049 30461024 207a1049 1027201d     I.x $.F0I.z . '.
   1da24:	1011207b 207b1026 207c2021 20211031     { ..&.{ ! | 1.! 
   1da34:	103b2022 103c2023 103a2024 20802025     " ;.# <.$ :.% . 
   1da44:	20812026 20822083 20832084 30872085     & . . . . . . .0
   1da54:	30862088 30891042 10441043 1045308a     . .0B..0C.D..0E.
   1da64:	30921046 10421047 10433097 20301044     F..0G.B..0C.D.0 
   1da74:	104a1045 20781007 20781048 20781048     E.J...x H.x H.x 
   1da84:	20781049 10071015 10493096 102e2076     I.x .....0I.v ..
   1da94:	100430a1 2069204e 204d1004 30392031     .0..N i ..M 1 90
   1daa4:	104c1004 302d2066 203a1004 20032033     ..L.f -0..: 3 . 
   1dab4:	2078105a 1048203f 20412040 10072042     Z.x ? H.@ A B ..
   1dac4:	30443043 30451031 10071032 10493043     C0D01.E02...C0I.
   1dad4:	104d2078 10072078 20473043 20481048     x M.x ..C0G H.H 
   1dae4:	204a2049 304b1007 304c1031 10071032     I J ..K01.L02...
   1daf4:	2078104d 20691007 2004204e 20071004     M.x ..i N . ... 
   1db04:	20572008 2010205a 20122011 20512005     . W Z . . . . Q 
   1db14:	20562052 20532054 2054104d 20062034     R V T S M.T 4 . 
   1db24:	20782020 104f104e 10511050 10541053       x N.O.P.Q.S.T.
   1db34:	10561055 10571058 10521059 200a2009     U.V.X.W.Y.R.. . 
   1db44:	200d200b 2078200c 101e3059 200e2078     . . . x Y0..x . 
   1db54:	2066200f 205f205c 10313066 2064205e     . f \ _ f01.^ d 
   1db64:	20641042 20601043 100c104a 30631007     B.d C.` J.....c0
   1db74:	30632066 10071012 10482061 10482062     f c0....a H.b H.
   1db84:	104a1007 10481007 20781048 20142013     ..J...H.H.x . . 
   1db94:	20162015 20032017 20022033 1019206b     . . . . 3 . k ..
   1dba4:	10492078 206d2076 20702071 30713072     x I.v m q p r0q0
   1dbb4:	306f101b 20761049 30632078 101c206e     ..o0I.v x c0n ..
   1dbc4:	20761049 1049101a 20742076 20781048     I.v ..I.v t H.x 
   1dbd4:	10123075 20772021 1004204e 20181005     u0..! w N ..... 
   1dbe4:	201a1006 10202019 101a201c 201b2078     ... .  .. ..x . 
   1dbf4:	201e201c 1036201f 10401038 103f103e     . . . 6.8.@.>.?.
   1dc04:	10221041 207e207d 10221026 307f1023     A.".} ~ &.".#..0
   1dc14:	10371026 102f1039 10311030 10351033     &.7.9./.0.1.3.5.
   1dc24:	20271034 102f2028 103d1030 208f2029     4.' ( /.0.=.) . 
   1dc34:	20831032 10081007 100a1009 100c100b     2.. ............
   1dc44:	100f100e 202a100d 202c202b 208a2034     ......* + , 4 . 
   1dc54:	308c208b 20782020 208d209f 308e1048     . .0  x . . H..0
   1dc64:	1048208b 202e202d 2091202f 20201048     . H.- . / . H.  
   1dc74:	20322021 209f3093 10482094 20323095     ! 2 .0. . H..02 
   1dc84:	10421048 10433097 10482098 209a2099     H.B..0C.. H.. . 
   1dc94:	1031209b 10322078 20782078 209f309c     . 1.x 2.x x .0. 
   1dca4:	104d209d 209f2078 101d20a0 10222090     . M.x . . ... ".
   1dcb4:	309e201c 207a1020 20a2309e 101e2031     . .0 .z .0. 1 ..
   1dcc4:	00002078                                x ..

0001dcc8 <rule_arg_offset_table>:
   1dcc8:	04020100 12100e0c 17161514 1e1c1a19     ................
   1dcd8:	29262422 3f3b342f 4a464443 5452504e     "$&)/4;?CDFJNPRT
   1dce8:	5c5a5856 6462605e 6d6a6866 79767370     VXZ\^`bdfhjmpsvy
   1dcf8:	827f7d7b 8c890087 9591908e 9c9a9896     {}..............
   1dd08:	a7a4a29f afadaba9 b8b6b4b2 bfbdbbba     ................
   1dd18:	cccbc9c7 ded2d0ce e9e7e5e3 f3f0edeb     ................
   1dd28:	faf8f6f4 0200fefc 0f0e0604 1c181513     ................
   1dd38:	25221f1e 2d2b2927 39373331 4846443b     .."%')+-1379;DFH
   1dd48:	514d4b49 58575653 6a68665a 72706e6c     IKMQSVWXZfhjlnpr
   1dd58:	7b797775 84817f7d 8d8b8986 9593918f     uwy{}...........
   1dd68:	009f9d9a                                ....

0001dd6c <FIRST_RULE_WITH_OFFSET_ABOVE_255>:
   1dd6c:	00000066 67726128 52202620 5f454c55     f...(arg & RULE_
   1dd7c:	5f475241 444e494b 53414d5f 3d20294b     ARG_KIND_MASK) =
   1dd8c:	5552203d 415f454c 525f4752 20454c55     = RULE_ARG_RULE 
   1dd9c:	28207c7c 20677261 55522026 415f454c     || (arg & RULE_A
   1ddac:	4b5f4752 5f444e49 4b53414d 3d3d2029     RG_KIND_MASK) ==
   1ddbc:	4c555220 52415f45 504f5f47 55525f54      RULE_ARG_OPT_RU
   1ddcc:	0000454c 2e2f2e2e 79702f2e 7261702f     LE..../../py/par
   1dddc:	632e6573 00000000 73726170 3e2d7265     se.c....parser->
   1ddec:	75736572 735f746c 6b636174 706f745f     result_stack_top
   1ddfc:	30203e20 00000000 73726170 3e2d7265      > 0....parser->
   1de0c:	75736572 735f746c 6b636174 706f745f     result_stack_top
   1de1c:	70203e20 0000736f 206b6f74 4d203d3d      > pos..tok == M
   1de2c:	4f545f50 5f4e454b 545f504f 45444c49     P_TOKEN_OP_TILDE
   1de3c:	00000000 646e696b 203d3d20 454c5552     ....kind == RULE
   1de4c:	4752415f 4c55525f 00000045 203e2069     _ARG_RULE...i > 
   1de5c:	00000030 3d3d2069 00006e20 6c757228     0...i == n..(rul
   1de6c:	63615f65 20262074 454c5552 5443415f     e_act & RULE_ACT
   1de7c:	4e494b5f 414d5f44 20294b53 52203d3d     _KIND_MASK) == R
   1de8c:	5f454c55 5f544341 5453494c 00000000     ULE_ACT_LIST....
   1de9c:	67726128 52202620 5f454c55 5f475241     (arg & RULE_ARG_
   1deac:	444e494b 53414d5f 3d20294b 5552203d     KIND_MASK) == RU
   1debc:	415f454c 525f4752 00454c55 3d3e2069     LE_ARG_RULE.i >=
   1decc:	00003120 78656e75 74636570 69206465      1..unexpected i
   1dedc:	6e65646e 00000074 6e696e75 746e6564     ndent...unindent
   1deec:	656f6420 6f6e2073 616d2074 20686374      does not match 
   1defc:	20796e61 6574756f 6e692072 746e6564     any outer indent
   1df0c:	6f697461 656c206e 006c6576 61766e69     ation level.inva
   1df1c:	2064696c 746e7973 00007861 73726170     lid syntax..pars
   1df2c:	722e7265 6c757365 74735f74 5f6b6361     er.result_stack_
   1df3c:	20706f74 31203d3d 00000000              top == 1....

0001df48 <__func__.8898>:
   1df48:	68737570 6c75725f 72665f65 615f6d6f     push_rule_from_a
   1df58:	00006772                                rg..

0001df5c <__func__.8926>:
   1df5c:	5f706f70 75736572 0000746c              pop_result..

0001df68 <__func__.8931>:
   1df68:	6b656570 7365725f 00746c75              peek_result.

0001df74 <token_to_op.8997>:
   1df74:	ff1c1b1a ff1f1dff 0019ff18              ............

0001df80 <__func__.9006>:
   1df80:	646c6f66 6e6f635f 6e617473 00007374     fold_constants..

0001df90 <__func__.9044>:
   1df90:	705f706d 65737261 00000000              mp_parse....

0001df9c <scope_simple_name_table>:
   1df9c:	3130002f 00343332 505f504d 45535241     /.01234.MP_PARSE
   1dfac:	444f4e5f 53495f45 5254535f 28544355     _NODE_IS_STRUCT(
   1dfbc:	00296e70 2e2f2e2e 79702f2e 6f63732f     pn).../../py/sco
   1dfcc:	632e6570 00000000 706f6373 703e2d65     pe.c....scope->p
   1dfdc:	6e657261 3d212074 4c554e20 0000004c     arent != NULL...
   1dfec:	703e2d73 6e657261 3d212074 4c554e20     s->parent != NUL
   1dffc:	0000004c 3e2d6469 646e696b 203d3d20     L...id->kind == 
   1e00c:	495f4449 5f4f464e 444e494b 4552465f     ID_INFO_KIND_FRE
   1e01c:	7c7c2045 2d646920 6e696b3e 3d3d2064     E || id->kind ==
   1e02c:	5f444920 4f464e49 4e494b5f 45435f44      ID_INFO_KIND_CE
   1e03c:	00004c4c                                LL..

0001e040 <__func__.6694>:
   1e040:	706f6373 656e5f65 00000077              scope_new...

0001e04c <__func__.6723>:
   1e04c:	706f6373 6c635f65 5f65736f 7265766f     scope_close_over
   1e05c:	5f6e695f 65726170 0073746e 706d6f63     _in_parents.comp
   1e06c:	75633e2d 78655f72 74706563 76656c5f     ->cur_except_lev
   1e07c:	3e206c65 00003020 2e2f2e2e 79702f2e     el > 0..../../py
   1e08c:	6d6f632f 656c6970 0000632e 505f504d     /compile.c..MP_P
   1e09c:	45535241 444f4e5f 53495f45 5254535f     ARSE_NODE_IS_STR
   1e0ac:	5f544355 444e494b 736e7028 6f6e3e2d     UCT_KIND(pns->no
   1e0bc:	5b736564 202c5d30 745f4e50 6c747365     des[0], PN_testl
   1e0cc:	5f747369 706d6f63 00000029 505f504d     ist_comp)...MP_P
   1e0dc:	45535241 444f4e5f 53495f45 5254535f     ARSE_NODE_IS_STR
   1e0ec:	28544355 31736e70 6f6e3e2d 5b736564     UCT(pns1->nodes[
   1e0fc:	202d206e 00295d31 505f504d 45535241     n - 1]).MP_PARSE
   1e10c:	444f4e5f 53495f45 2844495f 31736e70     _NODE_IS_ID(pns1
   1e11c:	6f6e3e2d 5b736564 00295d30 276e6163     ->nodes[0]).can'
   1e12c:	73612074 6e676973 206f7420 72707865     t assign to expr
   1e13c:	69737365 00006e6f 746c756d 656c7069     ession..multiple
   1e14c:	20782a20 61206e69 67697373 6e656d6e      *x in assignmen
   1e15c:	00000074 5f504d21 53524150 4f4e5f45     t...!MP_PARSE_NO
   1e16c:	495f4544 554e5f53 70284c4c 0000296e     DE_IS_NULL(pn)..
   1e17c:	505f504d 45535241 444f4e5f 53495f45     MP_PARSE_NODE_IS
   1e18c:	4c554e5f 6e70284c 3e2d3273 65646f6e     _NULL(pns2->node
   1e19c:	5d305b73 00000029 6f705f6e 65645f73     s[0])...n_pos_de
   1e1ac:	6c756166 3e207374 0030203d 776b5f6e     faults >= 0.n_kw
   1e1bc:	6665645f 746c7561 3d3e2073 00003020     _defaults >= 0..
   1e1cc:	505f504d 45535241 444f4e5f 53495f45     MP_PARSE_NODE_IS
   1e1dc:	5254535f 28544355 00296e70 6b5f6e70     _STRUCT(pn).pn_k
   1e1ec:	20646e69 50203d3d 61765f4e 67726172     ind == PN_vararg
   1e1fc:	73696c73 616e5f74 0000656d 2d6e6f6e     slist_name..non-
   1e20c:	61666564 20746c75 75677261 746e656d     default argument
   1e21c:	6c6f6620 73776f6c 66656420 746c7561      follows default
   1e22c:	67726120 6e656d75 00000074 61766e69      argument...inva
   1e23c:	2064696c 7263696d 7479706f 206e6f68     lid micropython 
   1e24c:	6f636564 6f746172 00000072 505f504d     decorator...MP_P
   1e25c:	45535241 444f4e5f 53495f45 5254535f     ARSE_NODE_IS_STR
   1e26c:	5f544355 444e494b 646f6e28 695b7365     UCT_KIND(nodes[i
   1e27c:	50202c5d 65645f4e 61726f63 29726f74     ], PN_decorator)
   1e28c:	00000000 505f504d 45535241 444f4e5f     ....MP_PARSE_NOD
   1e29c:	53495f45 2844495f 656d616e 646f6e5f     E_IS_ID(name_nod
   1e2ac:	6a5b7365 0000295d 505f504d 45535241     es[j])..MP_PARSE
   1e2bc:	444f4e5f 54535f45 54435552 4e494b5f     _NODE_STRUCT_KIN
   1e2cc:	6e702844 6f625f73 20297964 50203d3d     D(pns_body) == P
   1e2dc:	6c635f4e 64737361 00006665 505f504d     N_classdef..MP_P
   1e2ec:	45535241 444f4e5f 53495f45 5254535f     ARSE_NODE_IS_STR
   1e2fc:	5f544355 444e494b 2c6e7028 5f4e5020     UCT_KIND(pn, PN_
   1e30c:	74736574 7473696c 6d6f635f 00002970     testlist_comp)..
   1e31c:	505f504d 45535241 444f4e5f 53495f45     MP_PARSE_NODE_IS
   1e32c:	4c554e5f 6e70284c 3e2d3173 65646f6e     _NULL(pns1->node
   1e33c:	5d305b73 00000029 276e6163 65642074     s[0])...can't de
   1e34c:	6574656c 70786520 73736572 006e6f69     lete expression.
   1e35c:	65726227 20276b61 7374756f 20656469     'break' outside 
   1e36c:	706f6f6c 00000000 706d6f63 75633e2d     loop....comp->cu
   1e37c:	78655f72 74706563 76656c5f 3e206c65     r_except_level >
   1e38c:	6f63203d 3e2d706d 61657262 6f635f6b     = comp->break_co
   1e39c:	6e69746e 655f6575 70656378 656c5f74     ntinue_except_le
   1e3ac:	006c6576 6e6f6327 756e6974 6f202765     vel.'continue' o
   1e3bc:	69737475 6c206564 00706f6f 74657227     utside loop.'ret
   1e3cc:	276e7275 74756f20 65646973 6e756620     urn' outside fun
   1e3dc:	6f697463 0000006e 505f504d 45535241     ction...MP_PARSE
   1e3ec:	444f4e5f 53495f45 5254535f 5f544355     _NODE_IS_STRUCT_
   1e3fc:	444e494b 2c6e7028 5f4e5020 74746f64     KIND(pn, PN_dott
   1e40c:	6e5f6465 29656d61 00000000 5f504d21     ed_name)....!MP_
   1e41c:	53524150 4f4e5f45 495f4544 554e5f53     PARSE_NODE_IS_NU
   1e42c:	70284c4c 6d695f6e 74726f70 756f735f     LL(pn_import_sou
   1e43c:	29656372 00000000 505f504d 45535241     rce)....MP_PARSE
   1e44c:	444f4e5f 53495f45 5254535f 5f544355     _NODE_IS_STRUCT_
   1e45c:	444e494b 5f6e7028 65646f6e 5d695b73     KIND(pn_nodes[i]
   1e46c:	4e50202c 706d695f 5f74726f 6e5f7361     , PN_import_as_n
   1e47c:	29656d61 00000000 6e656469 69666974     ame)....identifi
   1e48c:	72207265 66656465 64656e69 20736120     er redefined as 
   1e49c:	626f6c67 00006c61 62206f6e 69646e69     global..no bindi
   1e4ac:	6620676e 6e20726f 6f6c6e6f 206c6163     ng for nonlocal 
   1e4bc:	6e756f66 00000064 6e656469 69666974     found...identifi
   1e4cc:	72207265 66656465 64656e69 20736120     er redefined as 
   1e4dc:	6c6e6f6e 6c61636f 00000000 276e6163     nonlocal....can'
   1e4ec:	65642074 72616c63 6f6e2065 636f6c6e     t declare nonloc
   1e4fc:	69206c61 756f206e 20726574 65646f63     al in outer code
   1e50c:	00000000 505f504d 45535241 444f4e5f     ....MP_PARSE_NOD
   1e51c:	53495f45 5254535f 5f544355 444e494b     E_IS_STRUCT_KIND
   1e52c:	5f6e7028 66696c65 2c5d695b 5f4e5020     (pn_elif[i], PN_
   1e53c:	735f6669 5f746d74 66696c65 00000029     if_stmt_elif)...
   1e54c:	505f504d 45535241 444f4e5f 53495f45     MP_PARSE_NODE_IS
   1e55c:	414d535f 495f4c4c 7028544e 74735f6e     _SMALL_INT(pn_st
   1e56c:	00297065 505f504d 45535241 444f4e5f     ep).MP_PARSE_NOD
   1e57c:	53495f45 5254535f 5f544355 444e494b     E_IS_STRUCT_KIND
   1e58c:	5f6e7028 65637865 5b737470 202c5d69     (pn_excepts[i], 
   1e59c:	745f4e50 735f7972 5f746d74 65637865     PN_try_stmt_exce
   1e5ac:	00297470 61666564 20746c75 63786527     pt).default 'exc
   1e5bc:	27747065 73756d20 65622074 73616c20     ept' must be las
   1e5cc:	00000074 505f504d 45535241 444f4e5f     t...MP_PARSE_NOD
   1e5dc:	53495f45 4c554e5f 6e70284c 736c655f     E_IS_NULL(pn_els
   1e5ec:	00002965 505f504d 45535241 444f4e5f     e)..MP_PARSE_NOD
   1e5fc:	53495f45 5254535f 28544355 2d736e70     E_IS_STRUCT(pns-
   1e60c:	646f6e3e 315b7365 0000295d 203e206e     >nodes[1])..n > 
   1e61c:	00000030 505f504d 45535241 444f4e5f     0...MP_PARSE_NOD
   1e62c:	53495f45 4b4f545f 70284e45 2d31736e     E_IS_TOKEN(pns1-
   1e63c:	646f6e3e 305b7365 0000295d 505f504d     >nodes[0])..MP_P
   1e64c:	45535241 444f4e5f 53495f45 5254535f     ARSE_NODE_IS_STR
   1e65c:	5f544355 444e494b 736e7028 6f6e3e2d     UCT_KIND(pns->no
   1e66c:	5b736564 202c5d31 745f4e50 5f747365     des[1], PN_test_
   1e67c:	655f6669 2965736c 00000000 505f504d     if_else)....MP_P
   1e68c:	45535241 444f4e5f 53495f45 5254535f     ARSE_NODE_IS_STR
   1e69c:	28544355 2d736e70 646f6e3e 695b7365     UCT(pns->nodes[i
   1e6ac:	0000295d 646e696b 203d3d20 635f4e50     ])..kind == PN_c
   1e6bc:	5f706d6f 695f706f 00000073 6d20782a     omp_op_is...*x m
   1e6cc:	20747375 61206562 67697373 6e656d6e     ust be assignmen
   1e6dc:	61742074 74656772 00000000 206b6f74     t target....tok 
   1e6ec:	4d203d3d 4f545f50 5f4e454b 445f504f     == MP_TOKEN_OP_D
   1e6fc:	4d5f4c42 0045524f 206b6f74 4d203d3d     BL_MORE.tok == M
   1e70c:	4f545f50 5f4e454b 545f504f 45444c49     P_TOKEN_OP_TILDE
   1e71c:	00000000 65707573 20292872 276e6163     ....super() can'
   1e72c:	69662074 7320646e 00666c65 276e6163     t find self.can'
   1e73c:	61682074 6d206576 69746c75 20656c70     t have multiple 
   1e74c:	0000782a 276e6163 61682074 6d206576     *x..can't have m
   1e75c:	69746c75 20656c70 00782a2a 2053484c     ultiple **x.LHS 
   1e76c:	6b20666f 6f777965 61206472 6d206772     of keyword arg m
   1e77c:	20747375 61206562 6469206e 00000000     ust be an id....
   1e78c:	2d6e6f6e 7779656b 2064726f 20677261     non-keyword arg 
   1e79c:	65746661 2f2a2072 00002a2a 2d6e6f6e     after */**..non-
   1e7ac:	7779656b 2064726f 20677261 65746661     keyword arg afte
   1e7bc:	656b2072 726f7779 72612064 00000067     r keyword arg...
   1e7cc:	505f504d 45535241 444f4e5f 54535f45     MP_PARSE_NODE_ST
   1e7dc:	54435552 4d554e5f 444f4e5f 70285345     RUCT_NUM_NODES(p
   1e7ec:	2029736e 32203d3d 00000000 505f504d     ns) == 2....MP_P
   1e7fc:	45535241 444f4e5f 53495f45 5254535f     ARSE_NODE_IS_STR
   1e80c:	5f544355 444e494b 736e7028 6f6e3e2d     UCT_KIND(pns->no
   1e81c:	5b736564 202c5d31 635f4e50 5f706d6f     des[1], PN_comp_
   1e82c:	29726f66 00000000 5f504d21 53524150     for)....!MP_PARS
   1e83c:	4f4e5f45 495f4544 554e5f53 70284c4c     E_NODE_IS_NULL(p
   1e84c:	3e2d736e 65646f6e 5d315b73 00000029     ns->nodes[1])...
   1e85c:	505f504d 45535241 444f4e5f 53495f45     MP_PARSE_NODE_IS
   1e86c:	4c554e5f 6e70284c 3e2d3373 65646f6e     _NULL(pns3->node
   1e87c:	5d305b73 00000029 61766e69 2064696c     s[0])...invalid 
   1e88c:	746e7973 00007861 505f504d 45535241     syntax..MP_PARSE
   1e89c:	444f4e5f 54535f45 54435552 4e494b5f     _NODE_STRUCT_KIN
   1e8ac:	6e702844 20293173 50203d3d 6f635f4e     D(pns1) == PN_co
   1e8bc:	665f706d 0000726f 00000030 65697927     mp_for..0...'yie
   1e8cc:	2027646c 7374756f 20656469 636e7566     ld' outside func
   1e8dc:	6e6f6974 00000000                       tion....

0001e8e4 <compile_function>:
   1e8e4:	00004eb9 00004eb9 00005c3d 00005df5     .N...N..=\...]..
   1e8f4:	00004eb9 00007689 0000503f 000060ad     .N...v..?P...`..
   1e904:	00004eb9 000060d1 00006141 000061b1     .N...`..Aa...a..
   1e914:	00006209 00006231 000064eb 00006511     .b..1b...d...e..
   1e924:	000067f9 000068b9 00006929 000069a9     .g...h..)i...i..
   1e934:	00006b61 00006e4d 00007441 00007601     ak..Mn..At...v..
   1e944:	00004eb9 0000793b 000079f5 000079f5     .N..;y...y...y..
   1e954:	00007aab 00007ac7 00007ae3 00007b0d     .z...z...z...{..
   1e964:	00007d35 00007d59 00007d75 00007d91     5}..Y}..u}...}..
   1e974:	00007dad 00007dad 00007dad 00007e99     .}...}...}...~..
   1e984:	0000810d 00007f09 00008429 00008535     ........)...5...
   1e994:	00008679 00008845 00008865 0000888f     y...E...e.......
   1e9a4:	0000503f 0000503f 000088b3 000088dd     ?P..?P..........
   1e9b4:	00008909 000089cd 505f504d 45535241     ........MP_PARSE
   1e9c4:	444f4e5f 54535f45 54435552 4e494b5f     _NODE_STRUCT_KIN
   1e9d4:	6e702844 3c202973 4e50203d 6e6f635f     D(pns) <= PN_con
   1e9e4:	6f5f7473 63656a62 00000074 505f504d     st_object...MP_P
   1e9f4:	45535241 444f4e5f 53495f45 5254535f     ARSE_NODE_IS_STR
   1ea04:	5f544355 444e494b 736e7028 6f6e3e2d     UCT_KIND(pns->no
   1ea14:	5b736564 202c5d30 745f4e50 65647066     des[0], PN_tfpde
   1ea24:	00002966 505f504d 45535241 444f4e5f     f)..MP_PARSE_NOD
   1ea34:	54535f45 54435552 4e494b5f 6e702844     E_STRUCT_KIND(pn
   1ea44:	3d202973 6e70203d 6c62645f 6174735f     s) == pn_dbl_sta
   1ea54:	00000072 656d616e 75657220 20646573     r...name reused 
   1ea64:	20726f66 75677261 746e656d 00000000     for argument....
   1ea74:	505f504d 45535241 444f4e5f 54535f45     MP_PARSE_NODE_ST
   1ea84:	54435552 4e494b5f 6d282844 61705f70     RUCT_KIND((mp_pa
   1ea94:	5f657372 65646f6e 7274735f 5f746375     rse_node_struct_
   1eaa4:	70292a74 74695f6e 20297265 50203d3d     t*)pn_iter) == P
   1eab4:	6f635f4e 665f706d 0000726f 706f6373     N_comp_for..scop
   1eac4:	6b3e2d65 20646e69 53203d3d 45504f43     e->kind == SCOPE
   1ead4:	444f4d5f 00454c55 505f504d 45535241     _MODULE.MP_PARSE
   1eae4:	444f4e5f 53495f45 5254535f 28544355     _NODE_IS_STRUCT(
   1eaf4:	706f6373 703e2d65 0000296e 505f504d     scope->pn)..MP_P
   1eb04:	45535241 444f4e5f 54535f45 54435552     ARSE_NODE_STRUCT
   1eb14:	4e494b5f 6e702844 3d202973 4e50203d     _KIND(pns) == PN
   1eb24:	6e75665f 66656463 00000000 505f504d     _funcdef....MP_P
   1eb34:	45535241 444f4e5f 54535f45 54435552     ARSE_NODE_STRUCT
   1eb44:	4d554e5f 444f4e5f 70285345 2029736e     _NUM_NODES(pns) 
   1eb54:	33203d3d 00000000 65646461 00000064     == 3....added...
   1eb64:	706f6373 6b3e2d65 20646e69 53203d3d     scope->kind == S
   1eb74:	45504f43 414c435f 00005353 505f504d     COPE_CLASS..MP_P
   1eb84:	45535241 444f4e5f 54535f45 54435552     ARSE_NODE_STRUCT
   1eb94:	4e494b5f 6e702844 3d202973 4e50203d     _KIND(pns) == PN
   1eba4:	616c635f 65647373 00000066 21206469     _classdef...id !
   1ebb4:	554e203d 00004c4c 706d6f63 75633e2d     = NULL..comp->cu
   1ebc4:	78655f72 74706563 76656c5f 3d206c65     r_except_level =
   1ebd4:	0030203d 64692821 663e2d32 7367616c     = 0.!(id2->flags
   1ebe4:	49202620 4c465f44 495f4741 41505f53      & ID_FLAG_IS_PA
   1ebf4:	294d4152 00000000                       RAM)....

0001ebfc <__func__.8540>:
   1ebfc:	706d6f63 5f656c69 72636564 65736165     compile_decrease
   1ec0c:	6378655f 5f747065 6576656c 0000006c     _except_level...

0001ec1c <__func__.8622>:
   1ec1c:	66695f63 6e6f635f 00000064              c_if_cond...

0001ec28 <__func__.8643>:
   1ec28:	73615f63 6e676973 6f74615f 78655f6d     c_assign_atom_ex
   1ec38:	00007270                                pr..

0001ec3c <__func__.8665>:
   1ec3c:	73615f63 6e676973 00000000              c_assign....

0001ec48 <__func__.8691>:
   1ec48:	736f6c63 766f5f65 765f7265 61697261     close_over_varia
   1ec58:	73656c62 6374655f 00000000              bles_etc....

0001ec64 <__func__.8708>:
   1ec64:	706d6f63 5f656c69 636e7566 5f666564     compile_funcdef_
   1ec74:	626d616c 5f666564 61726170 0000006d     lambdef_param...

0001ec84 <__func__.8753>:
   1ec84:	706d6f63 5f656c69 6f636564 65746172     compile_decorate
   1ec94:	00000064                                d...

0001ec98 <__func__.8786>:
   1ec98:	65645f63 74735f6c 0000746d              c_del_stmt..

0001eca4 <__func__.8804>:
   1eca4:	706d6f63 5f656c69 61657262 74735f6b     compile_break_st
   1ecb4:	0000746d                                mt..

0001ecb8 <__func__.8809>:
   1ecb8:	706d6f63 5f656c69 746e6f63 65756e69     compile_continue
   1ecc8:	6d74735f 00000074                       _stmt...

0001ecd0 <__func__.8833>:
   1ecd0:	695f6f64 726f706d 616e5f74 0000656d     do_import_name..

0001ece0 <__func__.8871>:
   1ece0:	706d6f63 5f656c69 6f706d69 665f7472     compile_import_f
   1ecf0:	006d6f72                                rom.

0001ecf4 <__func__.8944>:
   1ecf4:	706d6f63 5f656c69 735f6669 00746d74     compile_if_stmt.

0001ed04 <__func__.8977>:
   1ed04:	706d6f63 5f656c69 5f726f66 746d7473     compile_for_stmt
   1ed14:	74706f5f 73696d69 725f6465 65676e61     _optimised_range
   1ed24:	00000000                                ....

0001ed28 <__func__.9010>:
   1ed28:	706d6f63 5f656c69 5f797274 65637865     compile_try_exce
   1ed38:	00007470                                pt..

0001ed3c <__func__.9029>:
   1ed3c:	706d6f63 5f656c69 5f797274 616e6966     compile_try_fina
   1ed4c:	00796c6c                                lly.

0001ed50 <__func__.9034>:
   1ed50:	706d6f63 5f656c69 5f797274 746d7473     compile_try_stmt
   1ed60:	00000000                                ....

0001ed64 <__func__.9054>:
   1ed64:	706d6f63 5f656c69 68746977 6d74735f     compile_with_stm
   1ed74:	00000074                                t...

0001ed78 <__func__.9064>:
   1ed78:	706d6f63 5f656c69 72707865 6d74735f     compile_expr_stm
   1ed88:	00000074                                t...

0001ed8c <__func__.9100>:
   1ed8c:	706d6f63 5f656c69 74736574 5f66695f     compile_test_if_
   1ed9c:	72707865 00000000                       expr....

0001eda4 <__func__.9151>:
   1eda4:	706d6f63 5f656c69 706d6f63 73697261     compile_comparis
   1edb4:	00006e6f                                on..

0001edb8 <__func__.9191>:
   1edb8:	706d6f63 5f656c69 6d726574 00000000     compile_term....

0001edc8 <__func__.9205>:
   1edc8:	706d6f63 5f656c69 74636166 325f726f     compile_factor_2
   1edd8:	00000000                                ....

0001eddc <__func__.9254>:
   1eddc:	706d6f63 5f656c69 706d6f63 65686572     compile_comprehe
   1edec:	6f69736e 0000006e                       nsion...

0001edf4 <__func__.9262>:
   1edf4:	706d6f63 5f656c69 6d6f7461 7261705f     compile_atom_par
   1ee04:	00006e65                                en..

0001ee08 <__func__.9271>:
   1ee08:	706d6f63 5f656c69 6d6f7461 6172625f     compile_atom_bra
   1ee18:	74656b63 00000000                       cket....

0001ee20 <__func__.9278>:
   1ee20:	706d6f63 5f656c69 6d6f7461 6172625f     compile_atom_bra
   1ee30:	00006563                                ce..

0001ee34 <__func__.9341>:
   1ee34:	706d6f63 5f656c69 65646f6e 00000000     compile_node....

0001ee44 <__func__.9352>:
   1ee44:	706d6f63 5f656c69 706f6373 75665f65     compile_scope_fu
   1ee54:	6c5f636e 64626d61 61705f61 006d6172     nc_lambda_param.

0001ee64 <__func__.9375>:
   1ee64:	706d6f63 5f656c69 706f6373 6f635f65     compile_scope_co
   1ee74:	695f706d 00726574                       mp_iter.

0001ee7c <__func__.9386>:
   1ee7c:	706d6f63 5f656c69 706f6373 00000065     compile_scope...

0001ee8c <__func__.9425>:
   1ee8c:	706f6373 6f635f65 7475706d 68745f65     scope_compute_th
   1ee9c:	73676e69 00000000 21206469 554e203d     ings....id != NU
   1eeac:	00004c4c 2e2f2e2e 79702f2e 696d652f     LL..../../py/emi
   1eebc:	6d6f6374 2e6e6f6d 00000063 3e2d6469     tcommon.c...id->
   1eecc:	646e696b 203d3d20 495f4449 5f4f464e     kind == ID_INFO_
   1eedc:	444e494b 4c45435f 7c7c204c 2d646920     KIND_CELL || id-
   1eeec:	6e696b3e 3d3d2064 5f444920 4f464e49     >kind == ID_INFO
   1eefc:	4e494b5f 52465f44 00004545              _KIND_FREE..

0001ef08 <__func__.7297>:
   1ef08:	655f706d 5f74696d 6d6d6f63 695f6e6f     mp_emit_common_i
   1ef18:	706f5f64 00000000 74696d65 6f633e2d     d_op....emit->co
   1ef28:	695f6564 5f6f666e 7366666f 2b207465     de_info_offset +
   1ef38:	6d756e20 7479625f 745f7365 72775f6f      num_bytes_to_wr
   1ef48:	20657469 65203d3c 2d74696d 646f633e     ite <= emit->cod
   1ef58:	6e695f65 735f6f66 00657a69 2e2f2e2e     e_info_size.../.
   1ef68:	79702f2e 696d652f 2e636274 00000063     ./py/emitbc.c...
   1ef78:	74737128 203e3e20 20293631 30203d3d     (qst >> 16) == 0
   1ef88:	00000000 74696d65 79623e2d 6f636574     ....emit->byteco
   1ef98:	6f5f6564 65736666 202b2074 5f6d756e     de_offset + num_
   1efa8:	65747962 6f745f73 6972775f 3c206574     bytes_to_write <
   1efb8:	6d65203d 3e2d7469 65747962 65646f63     = emit->bytecode
   1efc8:	7a69735f 00000065 3e2d6469 61636f6c     _size...id->loca
   1efd8:	756e5f6c 203c206d 00353532 74696d65     l_num < 255.emit
   1efe8:	74733e2d 5f6b6361 657a6973 203d3d20     ->stack_size == 
   1eff8:	00000030 74696d65 61703e2d 3c207373     0...emit->pass <
   1f008:	504d203d 5341505f 54535f53 5f4b4341     = MP_PASS_STACK_
   1f018:	455a4953 207c7c20 696d6528 633e2d74     SIZE || (emit->c
   1f028:	756e5f74 626f5f6d 3d3d206a 696d6520     t_num_obj == emi
   1f038:	633e2d74 75635f74 626f5f72 0000296a     t->ct_cur_obj)..
   1f048:	5f706d28 5f746e69 6d652974 3e2d7469     (mp_int_t)emit->
   1f058:	63617473 69735f6b 2b20657a 6c656420     stack_size + del
   1f068:	3e206174 0030203d 203c206c 74696d65     ta >= 0.l < emit
   1f078:	616d3e2d 756e5f78 616c5f6d 736c6562     ->max_num_labels
   1f088:	00000000 74696d65 616c3e2d 5f6c6562     ....emit->label_
   1f098:	7366666f 5b737465 3d205d6c 6d28203d     offsets[l] == (m
   1f0a8:	69755f70 745f746e 00312d29 74696d65     p_uint_t)-1.emit
   1f0b8:	616c3e2d 5f6c6562 7366666f 5b737465     ->label_offsets[
   1f0c8:	3d205d6c 6d65203d 3e2d7469 65747962     l] == emit->byte
   1f0d8:	65646f63 66666f5f 00746573 206b6f74     code_offset.tok 
   1f0e8:	4d203d3d 4f545f50 5f4e454b 494c4c45     == MP_TOKEN_ELLI
   1f0f8:	53495350 00000000 6c635f6e 6465736f     PSIS....n_closed
   1f108:	65766f5f 3d3c2072 35353220 00000000     _over <= 255....
   1f118:	72615f6e 3c207367 0032203d              n_args <= 2.

0001f124 <mp_emit_bc_method_table_load_id_ops>:
   1f124:	0000a48d 0000a4db                       ........

0001f12c <mp_emit_bc_method_table_store_id_ops>:
   1f12c:	0000a609 0000a659                       ....Y...

0001f134 <mp_emit_bc_method_table_delete_id_ops>:
   1f134:	0000a689 0000a6b1                       ........

0001f13c <__func__.8075>:
   1f13c:	74696d65 7465675f 7275635f 5f6f745f     emit_get_cur_to_
   1f14c:	74697277 6f635f65 695f6564 006f666e     write_code_info.

0001f15c <__func__.8089>:
   1f15c:	74696d65 6972775f 635f6574 5f65646f     emit_write_code_
   1f16c:	6f666e69 7473715f 00000072              info_qstr...

0001f178 <__func__.8095>:
   1f178:	74696d65 7465675f 7275635f 5f6f745f     emit_get_cur_to_
   1f188:	74697277 79625f65 6f636574 00006564     write_bytecode..

0001f198 <__func__.8137>:
   1f198:	74696d65 6972775f 625f6574 63657479     emit_write_bytec
   1f1a8:	5f65646f 65747962 7473715f 00000072     ode_byte_qstr...

0001f1b8 <__func__.8171>:
   1f1b8:	655f706d 5f74696d 735f6362 74726174     mp_emit_bc_start
   1f1c8:	7361705f 00000073                       _pass...

0001f1d0 <__func__.8188>:
   1f1d0:	655f706d 5f74696d 655f6362 705f646e     mp_emit_bc_end_p
   1f1e0:	00737361                                ass.

0001f1e4 <__func__.8196>:
   1f1e4:	655f706d 5f74696d 615f6362 73756a64     mp_emit_bc_adjus
   1f1f4:	74735f74 5f6b6361 657a6973 00000000     t_stack_size....

0001f204 <__func__.8209>:
   1f204:	655f706d 5f74696d 6c5f6362 6c656261     mp_emit_bc_label
   1f214:	7373615f 006e6769                       _assign.

0001f21c <__func__.8224>:
   1f21c:	655f706d 5f74696d 6c5f6362 5f64616f     mp_emit_bc_load_
   1f22c:	736e6f63 6f745f74 0000006b              const_tok...

0001f238 <__func__.8403>:
   1f238:	655f706d 5f74696d 6d5f6362 5f656b61     mp_emit_bc_make_
   1f248:	736f6c63 00657275                       closure.

0001f250 <__func__.8431>:
   1f250:	655f706d 5f74696d 725f6362 65736961     mp_emit_bc_raise
   1f260:	7261765f 73677261 00000000 28746e69     _varargs....int(
   1f270:	72612029 20322067 7473756d 20656220     ) arg 2 must be 
   1f280:	32203d3e 646e6120 203d3c20 00003633     >= 2 and <= 36..
   1f290:	61766e69 2064696c 746e7973 66207861     invalid syntax f
   1f2a0:	6920726f 6765746e 00007265 69636564     or integer..deci
   1f2b0:	206c616d 626d756e 20737265 20746f6e     mal numbers not 
   1f2c0:	70707573 6574726f 00000064 21206372     supported...rc !
   1f2d0:	554e203d 00004c4c 2e2f2e2e 79702f2e     = NULL..../../py
   1f2e0:	696d652f 756c6774 00632e65 5f666564     /emitglue.c.def_
   1f2f0:	73677261 203d3d20 4f5f504d 4e5f4a42     args == MP_OBJ_N
   1f300:	204c4c55 4d207c7c 424f5f50 53495f4a     ULL || MP_OBJ_IS
   1f310:	5059545f 65642845 72615f66 202c7367     _TYPE(def_args, 
   1f320:	5f706d26 65707974 7075745f 0029656c     &mp_type_tuple).
   1f330:	5f666564 615f776b 20736772 4d203d3d     def_kw_args == M
   1f340:	424f5f50 554e5f4a 7c204c4c 504d207c     P_OBJ_NULL || MP
   1f350:	4a424f5f 5f53495f 45505954 66656428     _OBJ_IS_TYPE(def
   1f360:	5f776b5f 73677261 6d26202c 79745f70     _kw_args, &mp_ty
   1f370:	645f6570 29746369 00000000 3e2d6372     pe_dict)....rc->
   1f380:	646e696b 203d3d20 435f504d 5f45444f     kind == MP_CODE_
   1f390:	45545942 45444f43 00000000              BYTECODE....

0001f39c <__func__.7635>:
   1f39c:	6d5f706d 5f656b61 636e7566 6e6f6974     mp_make_function
   1f3ac:	6f72665f 61725f6d 6f635f77 00006564     _from_raw_code..

0001f3bc <mp_module___main__>:
   1f3bc:	00021138 20000a64 656d616e 746f6e20     8...d.. name not
   1f3cc:	66656420 64656e69 00000000 3d20706f      defined....op =
   1f3dc:	504d203d 414e555f 4f5f5952 4e495f50     = MP_UNARY_OP_IN
   1f3ec:	54524556 00000000 2e2f2e2e 79702f2e     VERT....../../py
   1f3fc:	6e75722f 656d6974 0000632e 75736e75     /runtime.c..unsu
   1f40c:	726f7070 20646574 65707974 726f6620     pported type for
   1f41c:	65706f20 6f746172 00000072 6167656e      operator...nega
   1f42c:	65766974 69687320 63207466 746e756f     tive shift count
   1f43c:	00000000 6167656e 65766974 776f7020     ....negative pow
   1f44c:	77207265 20687469 66206f6e 74616f6c     er with no float
   1f45c:	70757320 74726f70 00000000 69766964      support....divi
   1f46c:	6e6f6973 20796220 6f72657a 00000000     sion by zero....
   1f47c:	656a626f 6e207463 6320746f 616c6c61     object not calla
   1f48c:	00656c62 73677261 656c5f32 202b206e     ble.args2_len + 
   1f49c:	202a2032 2d70616d 6573753e 3d3c2064     2 * map->used <=
   1f4ac:	67726120 615f3273 636f6c6c 00000000      args2_alloc....
   1f4bc:	6e6f7277 756e2067 7265626d 20666f20     wrong number of 
   1f4cc:	756c6176 74207365 6e75206f 6b636170     values to unpack
   1f4dc:	00000000 65707974 6f6c3e2d 736c6163     ....type->locals
   1f4ec:	6369645f 623e2d74 2e657361 65707974     _dict->base.type
   1f4fc:	203d3d20 5f706d26 65707974 6369645f      == &mp_type_dic
   1f50c:	00000074 73206f6e 20686375 72747461     t...no such attr
   1f51c:	74756269 00000065 6e695f6f 00000000     ibute...o_in....
   1f52c:	656a626f 6e207463 6920746f 61726574     object not itera
   1f53c:	00656c62 656a626f 6e207463 6120746f     ble.object not a
   1f54c:	7469206e 74617265 0000726f 6e657328     n iterator..(sen
   1f55c:	61765f64 2065756c 4d203d21 424f5f50     d_value != MP_OB
   1f56c:	554e5f4a 20294c4c 7428205e 776f7268     J_NULL) ^ (throw
   1f57c:	6c61765f 21206575 504d203d 4a424f5f     _value != MP_OBJ
   1f58c:	4c554e5f 0000294c 6f726874 61765f77     _NULL)..throw_va
   1f59c:	2065756c 4d203d21 424f5f50 554e5f4a     lue != MP_OBJ_NU
   1f5ac:	00004c4c 65637865 6f697470 6d20736e     LL..exceptions m
   1f5bc:	20747375 69726564 66206576 206d6f72     ust derive from 
   1f5cc:	65736142 65637845 6f697470 0000006e     BaseException...
   1f5dc:	6e6e6163 6920746f 726f706d 616e2074     cannot import na
   1f5ec:	2520656d 00000071 6f6d656d 61207972     me %q...memory a
   1f5fc:	636f6c6c 6f697461 6166206e 64656c69     llocation failed
   1f60c:	6568202c 69207061 6f6c2073 64656b63     , heap is locked
   1f61c:	00000000 6f6d656d 61207972 636f6c6c     ....memory alloc
   1f62c:	6f697461 6166206e 64656c69 6c61202c     ation failed, al
   1f63c:	61636f6c 676e6974 20752520 65747962     locating %u byte
   1f64c:	00000073                                s...

0001f650 <__func__.8073>:
   1f650:	755f706d 7972616e 00706f5f              mp_unary_op.

0001f65c <__func__.8190>:
   1f65c:	635f706d 5f6c6c61 70657270 5f657261     mp_call_prepare_
   1f66c:	73677261 6b5f6e5f 61765f77 00000072     args_n_kw_var...

0001f67c <__func__.8278>:
   1f67c:	6c5f706d 5f64616f 6874656d 6d5f646f     mp_load_method_m
   1f68c:	65627961 00000000                       aybe....

0001f694 <__func__.8304>:
   1f694:	675f706d 74697465 00007265              mp_getiter..

0001f6a0 <__func__.8326>:
   1f6a0:	725f706d 6d757365 00000065 6c6c6128     mp_resume...(all
   1f6b0:	6465776f 2e5d695b 67616c66 20262073     owed[i].flags & 
   1f6c0:	415f504d 4b5f4752 5f444e49 4b53414d     MP_ARG_KIND_MASK
   1f6d0:	3d3d2029 5f504d20 5f475241 004a424f     ) == MP_ARG_OBJ.
   1f6e0:	2e2f2e2e 79702f2e 6772612f 63656863     ../../py/argchec
   1f6f0:	00632e6b 75677261 746e656d 6d756e20     k.c.argument num
   1f700:	7079742f 6d207365 616d7369 00686374     /types mismatch.

0001f710 <__func__.7191>:
   1f710:	615f706d 705f6772 65737261 6c6c615f     mp_arg_parse_all
   1f720:	00000000                                ....

0001f724 <mp_const_empty_map>:
   1f724:	00000006 00000000 00000000              ............

0001f730 <hash_allocation_sizes>:
   1f730:	00020000 00060004 000a0008 0011000c     ................
   1f740:	001d0017 002f0025 0049003b 007f0061     ....%./.;.I.a...
   1f750:	00df00a7 01850125 02b30209 04c70397     ....%...........
   1f760:	0871065b 12df0c9d 2a6d1c4b 5f573f91     [.q.....K.m*.?W_
   1f770:	d67b8eff 70616d21 73693e2d 7869665f     ..{.!map->is_fix
   1f780:	7c206465 6f6c207c 70756b6f 6e696b5f     ed || lookup_kin
   1f790:	3d3d2064 5f504d20 5f50414d 4b4f4f4c     d == MP_MAP_LOOK
   1f7a0:	00005055 2e2f2e2e 79702f2e 70616d2f     UP..../../py/map
   1f7b0:	0000632e                                .c..

0001f7b4 <__func__.7296>:
   1f7b4:	6d5f706d 6c5f7061 756b6f6f 00000070     mp_map_lookup...
   1f7c4:	6c696e28 00000029 3e71253c 00000000     (nil)...<%q>....
   1f7d4:	2025206e 3d3d2033 00003020 2e2f2e2e     n % 3 == 0..../.
   1f7e4:	79702f2e 6a626f2f 0000632e 63617254     ./py/obj.c..Trac
   1f7f4:	63616265 6d28206b 2074736f 65636572     eback (most rece
   1f804:	6320746e 206c6c61 7473616c 000a3a29     nt call last):..
   1f814:	69462020 2220656c 00227125 0000000a       File "%q".....
   1f824:	6e69202c 0a712520 00000000 276e6163     , in %q.....can'
   1f834:	6f632074 7265766e 6f742074 746e6920     t convert to int
   1f844:	00000000 65707865 64657463 70757420     ....expected tup
   1f854:	6c2f656c 00747369 6c707574 696c2f65     le/list.tuple/li
   1f864:	68207473 77207361 676e6f72 6e656c20     st has wrong len
   1f874:	00687467 69646e69 20736563 7473756d     gth.indices must
   1f884:	20656220 65746e69 73726567 00000000      be integers....
   1f894:	65646e69 756f2078 666f2074 6e617220     index out of ran
   1f8a4:	00006567 656a626f 68207463 6e207361     ge..object has n
   1f8b4:	656c206f 0000006e 656a626f 64207463     o len...object d
   1f8c4:	2073656f 20746f6e 70707573 2074726f     oes not support 
   1f8d4:	6d657469 6c656420 6f697465 0000006e     item deletion...
   1f8e4:	656a626f 69207463 6f6e2073 75732074     object is not su
   1f8f4:	72637362 61747069 00656c62 656a626f     bscriptable.obje
   1f904:	64207463 2073656f 20746f6e 70707573     ct does not supp
   1f914:	2074726f 6d657469 73736120 6d6e6769     ort item assignm
   1f924:	00746e65                                ent.

0001f928 <mp_identity_obj>:
   1f928:	00020728 0000def9 656a626f 77207463     (.......object w
   1f938:	20687469 66667562 70207265 6f746f72     ith buffer proto
   1f948:	206c6f63 75716572 64657269 00000000     col required....

0001f958 <__func__.7822>:
   1f958:	6f5f706d 705f6a62 746e6972 6378655f     mp_obj_print_exc
   1f968:	69747065 00006e6f 65757254 00000000     eption..True....
   1f978:	736c6146 00000065                       False...

0001f980 <mp_type_bool>:
   1f980:	00021ee0 00000059 0000dfed 0000e029     ....Y.......)...
   1f990:	00000000 0000e071 0000e0a5 00000000     ....q...........
	...

0001f9bc <mp_const_false_obj>:
   1f9bc:	0001f980 00000000                       ........

0001f9c4 <mp_const_true_obj>:
   1f9c4:	0001f980 00000001                       ........

0001f9cc <mp_type_bound_meth>:
   1f9cc:	00021ee0 0000005a 00000000 00000000     ....Z...........
   1f9dc:	0000e16b 00000000 00000000 00000000     k...............
	...

0001fa08 <mp_type_cell>:
   1fa08:	00021ee0 00000001 00000000 00000000     ................
	...

0001fa44 <closure_type>:
   1fa44:	00021ee0 00000063 00000000 00000000     ....c...........
   1fa54:	0000e235 00000000 00000000 00000000     5...............
	...
   1fa80:	0000007b 0000202c 0000203a 0000007d     {..., ..: ..}...
   1fa90:	5f504d28 5f4a424f 4f5f5349 73284a42     (MP_OBJ_IS_OBJ(s
   1faa0:	5f666c65 20296e69 28202626 5f706d28     elf_in) && ((mp_
   1fab0:	5f6a626f 65736162 292a745f 6f762828     obj_base_t*)((vo
   1fac0:	292a6469 666c6573 296e695f 743e2d29     id*)self_in))->t
   1fad0:	2d657079 6b616d3e 656e5f65 3d3d2077     ype->make_new ==
   1fae0:	63696420 616d5f74 6e5f656b 00297765      dict_make_new).
   1faf0:	2e2f2e2e 79702f2e 6a626f2f 74636964     ../../py/objdict
   1fb00:	0000632e                                .c..

0001fb04 <dict_clear_obj>:
   1fb04:	00020728 0000e751                       (...Q...

0001fb0c <dict_copy_obj>:
   1fb0c:	00020728 0000e7b1                       (.......

0001fb14 <dict_fromkeys_fun_obj>:
   1fb14:	00020870 00030004 0000e86d              p.......m...

0001fb20 <dict_fromkeys_obj>:
   1fb20:	00022128 0001fb14 5f504d28 5f4a424f     (!......(MP_OBJ_
   1fb30:	4f5f5349 61284a42 5b736772 20295d30     IS_OBJ(args[0]) 
   1fb40:	28202626 5f706d28 5f6a626f 65736162     && ((mp_obj_base
   1fb50:	292a745f 6f762828 292a6469 73677261     _t*)((void*)args
   1fb60:	295d305b 743e2d29 2d657079 6b616d3e     [0]))->type->mak
   1fb70:	656e5f65 3d3d2077 63696420 616d5f74     e_new == dict_ma
   1fb80:	6e5f656b 00297765                       ke_new).

0001fb88 <dict_get_obj>:
   1fb88:	00020870 00030004 0000e9d9              p...........

0001fb94 <dict_pop_obj>:
   1fb94:	00020870 00030004 0000e9f7              p...........

0001fba0 <dict_setdefault_obj>:
   1fba0:	00020870 00030004 0000ea15 69706f70     p...........popi
   1fbb0:	286d6574 64203a29 69746369 72616e6f     tem(): dictionar
   1fbc0:	73692079 706d6520 00007974              y is empty..

0001fbcc <dict_popitem_obj>:
   1fbcc:	00020728 0000ea33 74636964 64707520     (...3...dict upd
   1fbdc:	20657461 75716573 65636e65 73616820     ate sequence has
   1fbec:	6f727720 6c20676e 74676e65 00000068      wrong length...

0001fbfc <dict_update_obj>:
   1fbfc:	00020870 ffff0003 0000eaf1              p...........

0001fc08 <dict_view_type>:
   1fc08:	00021ee0 00000068 0000eda9 00000000     ....h...........
	...
   1fc20:	0000ee75 00000000 00000000 0000ed39     u...........9...
	...

0001fc44 <dict_view_it_type>:
   1fc44:	00021ee0 0000008b 00000000 00000000     ................
	...
   1fc68:	0000df0f 0000eca1 00000000 00000000     ................
	...
   1fc80:	74636964 6574695f 0000736d 74636964     dict_items..dict
   1fc90:	79656b5f 00000073 74636964 6c61765f     _keys...dict_val
   1fca0:	00736575                                ues.

0001fca4 <mp_dict_view_names>:
   1fca4:	0001fc80 0001fc8c 0001fc98 5f504d28     ............(MP_
   1fcb4:	5f4a424f 4f5f5349 73284a42 5f666c65     OBJ_IS_OBJ(self_
   1fcc4:	20296e69 28202626 706d2828 6a626f5f     in) && (((mp_obj
   1fcd4:	7361625f 2a745f65 76282829 2a64696f     _base_t*)((void*
   1fce4:	6c657329 6e695f66 3e2d2929 65707974     )self_in))->type
   1fcf4:	203d3d20 69642628 765f7463 5f776569      == (&dict_view_
   1fd04:	745f7469 29657079 00002929 5f504d28     it_type)))..(MP_
   1fd14:	5f4a424f 4f5f5349 76284a42 5f776569     OBJ_IS_OBJ(view_
   1fd24:	20296e69 28202626 706d2828 6a626f5f     in) && (((mp_obj
   1fd34:	7361625f 2a745f65 76282829 2a64696f     _base_t*)((void*
   1fd44:	65697629 6e695f77 3e2d2929 65707974     )view_in))->type
   1fd54:	203d3d20 69642628 765f7463 5f776569      == (&dict_view_
   1fd64:	65707974 00292929 5f504d28 5f4a424f     type))).(MP_OBJ_
   1fd74:	4f5f5349 73284a42 5f666c65 20296e69     IS_OBJ(self_in) 
   1fd84:	28202626 706d2828 6a626f5f 7361625f     && (((mp_obj_bas
   1fd94:	2a745f65 76282829 2a64696f 6c657329     e_t*)((void*)sel
   1fda4:	6e695f66 3e2d2929 65707974 203d3d20     f_in))->type == 
   1fdb4:	69642628 765f7463 5f776569 65707974     (&dict_view_type
   1fdc4:	00292929 00005b28 0000295d              ))).([..])..

0001fdd0 <dict_items_obj>:
   1fdd0:	00020728 0000ef39                       (...9...

0001fdd8 <dict_keys_obj>:
   1fdd8:	00020728 0000ef53                       (...S...

0001fde0 <dict_values_obj>:
   1fde0:	00020728 0000ef6d                       (...m...

0001fde8 <dict_locals_dict_table>:
   1fde8:	00000186 0001fb04 00000196 0001fb0c     ................
   1fdf8:	000001ce 0001fb20 000001da 0001fb88     .... ...........
   1fe08:	00000226 0001fdd0 0000023a 0001fdd8     &.......:.......
   1fe18:	0000027e 0001fb94 00000282 0001fbcc     ~...............
   1fe28:	000002c2 0001fba0 00000306 0001fbfc     ................
   1fe38:	00000312 0001fde0 0000003a 000222d4     ........:...."..
   1fe48:	0000008a 000222dc 00000022 000222e4     .....".."...."..

0001fe58 <dict_locals_dict>:
   1fe58:	0001fe68 00000077 0000000e 0001fde8     h...w...........

0001fe68 <mp_type_dict>:
   1fe68:	00021ee0 00000067 0000e441 0000e4dd     ....g...A.......
   1fe78:	00000000 0000e543 0000e593 00000000     ....C...........
   1fe88:	0000e6bd 0000ef87 00000000 00000000     ................
	...
   1fea0:	0001fe58                                X...

0001fea4 <__func__.7172>:
   1fea4:	74636964 656c635f 00007261              dict_clear..

0001feb0 <__func__.7178>:
   1feb0:	74636964 706f635f 00000079              dict_copy...

0001febc <__func__.7203>:
   1febc:	74636964 7465675f 6c65685f 00726570     dict_get_helper.

0001fecc <__func__.7225>:
   1fecc:	74636964 706f705f 6d657469 00000000     dict_popitem....

0001fedc <__func__.7237>:
   1fedc:	74636964 6470755f 00657461              dict_update.

0001fee8 <__func__.7280>:
   1fee8:	74636964 6569765f 74695f77 6574695f     dict_view_it_ite
   1fef8:	78656e72 00000074                       rnext...

0001ff00 <__func__.7293>:
   1ff00:	74636964 6569765f 65675f77 65746974     dict_view_getite
   1ff10:	00000072                                r...

0001ff14 <__func__.7301>:
   1ff14:	74636964 6569765f 72705f77 00746e69     dict_view_print.

0001ff24 <__func__.7326>:
   1ff24:	74636964 6569765f 00000077              dict_view...

0001ff30 <__func__.7343>:
   1ff30:	74636964 7465675f 72657469 00000000     dict_getiter....

0001ff40 <__func__.7365>:
   1ff40:	6f5f706d 645f6a62 5f746369 726f7473     mp_obj_dict_stor
   1ff50:	00000065                                e...

0001ff54 <__func__.7375>:
   1ff54:	6f5f706d 645f6a62 5f746369 5f746567     mp_obj_dict_get_
   1ff64:	0070616d                                map.

0001ff68 <mp_const_GeneratorExit_obj>:
   1ff68:	00020034 00000000 00000000 00021c24     4...........$...
   1ff78:	0000203a 00000000                       : ......

0001ff80 <mp_type_BaseException>:
   1ff80:	00021ee0 0000003b 0000f161 0000f225     ....;...a...%...
	...
   1ff9c:	0000f2f5 00000000 00000000 00000000     ................
	...

0001ffbc <mp_type_SystemExit>:
   1ffbc:	00021ee0 0000004f 0000f161 0000f225     ....O...a...%...
	...
   1ffd8:	0000f2f5 00000000 00000000 00000000     ................
	...
   1fff0:	0001ff80 00000000                       ........

0001fff8 <mp_type_KeyboardInterrupt>:
   1fff8:	00021ee0 00000044 0000f161 0000f225     ....D...a...%...
	...
   20014:	0000f2f5 00000000 00000000 00000000     ................
	...
   2002c:	0001ff80 00000000                       ........

00020034 <mp_type_GeneratorExit>:
   20034:	00021ee0 0000003f 0000f161 0000f225     ....?...a...%...
	...
   20050:	0000f2f5 00000000 00000000 00000000     ................
	...
   20068:	0001ff80 00000000                       ........

00020070 <mp_type_Exception>:
   20070:	00021ee0 0000003e 0000f161 0000f225     ....>...a...%...
	...
   2008c:	0000f2f5 00000000 00000000 00000000     ................
	...
   200a4:	0001ff80 00000000                       ........

000200ac <mp_type_StopIteration>:
   200ac:	00021ee0 0000004d 0000f161 0000f225     ....M...a...%...
	...
   200c8:	0000f2f5 00000000 00000000 00000000     ................
	...
   200e0:	00020070 00000000                       p.......

000200e8 <mp_type_ArithmeticError>:
   200e8:	00021ee0 00000038 0000f161 0000f225     ....8...a...%...
	...
   20104:	0000f2f5 00000000 00000000 00000000     ................
	...
   2011c:	00020070 00000000                       p.......

00020124 <mp_type_OverflowError>:
   20124:	00021ee0 0000004b 0000f161 0000f225     ....K...a...%...
	...
   20140:	0000f2f5 00000000 00000000 00000000     ................
	...
   20158:	000200e8 00000000                       ........

00020160 <mp_type_ZeroDivisionError>:
   20160:	00021ee0 00000052 0000f161 0000f225     ....R...a...%...
	...
   2017c:	0000f2f5 00000000 00000000 00000000     ................
	...
   20194:	000200e8 00000000                       ........

0002019c <mp_type_AssertionError>:
   2019c:	00021ee0 00000039 0000f161 0000f225     ....9...a...%...
	...
   201b8:	0000f2f5 00000000 00000000 00000000     ................
	...
   201d0:	00020070 00000000                       p.......

000201d8 <mp_type_AttributeError>:
   201d8:	00021ee0 0000003a 0000f161 0000f225     ....:...a...%...
	...
   201f4:	0000f2f5 00000000 00000000 00000000     ................
	...
   2020c:	00020070 00000000                       p.......

00020214 <mp_type_EOFError>:
   20214:	00021ee0 0000003c 0000f161 0000f225     ....<...a...%...
	...
   20230:	0000f2f5 00000000 00000000 00000000     ................
	...
   20248:	00020070 00000000                       p.......

00020250 <mp_type_ImportError>:
   20250:	00021ee0 00000040 0000f161 0000f225     ....@...a...%...
	...
   2026c:	0000f2f5 00000000 00000000 00000000     ................
	...
   20284:	00020070 00000000                       p.......

0002028c <mp_type_LookupError>:
   2028c:	00021ee0 00000045 0000f161 0000f225     ....E...a...%...
	...
   202a8:	0000f2f5 00000000 00000000 00000000     ................
	...
   202c0:	00020070 00000000                       p.......

000202c8 <mp_type_IndexError>:
   202c8:	00021ee0 00000042 0000f161 0000f225     ....B...a...%...
	...
   202e4:	0000f2f5 00000000 00000000 00000000     ................
	...
   202fc:	0002028c 00000000                       ........

00020304 <mp_type_KeyError>:
   20304:	00021ee0 00000043 0000f161 0000f225     ....C...a...%...
	...
   20320:	0000f2f5 00000000 00000000 00000000     ................
	...
   20338:	0002028c 00000000                       ........

00020340 <mp_type_MemoryError>:
   20340:	00021ee0 00000046 0000f161 0000f225     ....F...a...%...
	...
   2035c:	0000f2f5 00000000 00000000 00000000     ................
	...
   20374:	00020070 00000000                       p.......

0002037c <mp_type_NameError>:
   2037c:	00021ee0 00000047 0000f161 0000f225     ....G...a...%...
	...
   20398:	0000f2f5 00000000 00000000 00000000     ................
	...
   203b0:	00020070 00000000                       p.......

000203b8 <mp_type_OSError>:
   203b8:	00021ee0 0000004a 0000f161 0000f225     ....J...a...%...
	...
   203d4:	0000f2f5 00000000 00000000 00000000     ................
	...
   203ec:	00020070 00000000                       p.......

000203f4 <mp_type_RuntimeError>:
   203f4:	00021ee0 0000004c 0000f161 0000f225     ....L...a...%...
	...
   20410:	0000f2f5 00000000 00000000 00000000     ................
	...
   20428:	00020070 00000000                       p.......

00020430 <mp_type_NotImplementedError>:
   20430:	00021ee0 00000049 0000f161 0000f225     ....I...a...%...
	...
   2044c:	0000f2f5 00000000 00000000 00000000     ................
	...
   20464:	000203f4 00000000                       ........

0002046c <mp_type_SyntaxError>:
   2046c:	00021ee0 0000004e 0000f161 0000f225     ....N...a...%...
	...
   20488:	0000f2f5 00000000 00000000 00000000     ................
	...
   204a0:	00020070 00000000                       p.......

000204a8 <mp_type_IndentationError>:
   204a8:	00021ee0 00000041 0000f161 0000f225     ....A...a...%...
	...
   204c4:	0000f2f5 00000000 00000000 00000000     ................
	...
   204dc:	0002046c 00000000                       l.......

000204e4 <mp_type_TypeError>:
   204e4:	00021ee0 00000050 0000f161 0000f225     ....P...a...%...
	...
   20500:	0000f2f5 00000000 00000000 00000000     ................
	...
   20518:	00020070 00000000                       p.......

00020520 <mp_type_ValueError>:
   20520:	00021ee0 00000051 0000f161 0000f225     ....Q...a...%...
	...
   2053c:	0000f2f5 00000000 00000000 00000000     ................
	...
   20554:	00020070 00000000 5f637865 65707974     p.......exc_type
   20564:	616d3e2d 6e5f656b 3d207765 706d203d     ->make_new == mp
   20574:	6a626f5f 6378655f 69747065 6d5f6e6f     _obj_exception_m
   20584:	5f656b61 0077656e 2e2f2e2e 79702f2e     ake_new.../../py
   20594:	6a626f2f 65637865 632e7470 00000000     /objexcept.c....
   205a4:	20746d66 4e203d21 004c4c55 6f5f706d     fmt != NULL.mp_o
   205b4:	695f6a62 78655f73 74706563 5f6e6f69     bj_is_exception_
   205c4:	74736e69 65636e61 6c657328 6e695f66     instance(self_in
   205d4:	00000029                                )...

000205d8 <__func__.7740>:
   205d8:	6f5f706d 6e5f6a62 655f7765 70656378     mp_obj_new_excep
   205e8:	6e6f6974 6772615f 00000073              tion_args...

000205f4 <__func__.7762>:
   205f4:	6f5f706d 6e5f6a62 655f7765 70656378     mp_obj_new_excep
   20604:	6e6f6974 67736d5f 7261765f 00000067     tion_msg_varg...

00020614 <__func__.7785>:
   20614:	6f5f706d 655f6a62 70656378 6e6f6974     mp_obj_exception
   20624:	656c635f 745f7261 65636172 6b636162     _clear_traceback
   20634:	00000000                                ....

00020638 <__func__.7793>:
   20638:	6f5f706d 655f6a62 70656378 6e6f6974     mp_obj_exception
   20648:	6464615f 6172745f 61626563 00006b63     _add_traceback..

00020658 <__func__.7802>:
   20658:	6f5f706d 655f6a62 70656378 6e6f6974     mp_obj_exception
   20668:	7465675f 6172745f 61626563 00006b63     _get_traceback..
   20678:	4f5f504d 495f4a42 59545f53 73284550     MP_OBJ_IS_TYPE(s
   20688:	5f666c65 202c6e69 5f706d26 65707974     elf_in, &mp_type
   20698:	6e75665f 6975625f 6e69746c 0029305f     _fun_builtin_0).
   206a8:	2e2f2e2e 79702f2e 6a626f2f 2e6e7566     ../../py/objfun.
   206b8:	00000063                                c...

000206bc <mp_type_fun_builtin_0>:
   206bc:	00021ee0 00000074 00000000 00000000     ....t...........
   206cc:	0000f8c5 0000df9d 00000000 00000000     ................
	...
   206f8:	4f5f504d 495f4a42 59545f53 73284550     MP_OBJ_IS_TYPE(s
   20708:	5f666c65 202c6e69 5f706d26 65707974     elf_in, &mp_type
   20718:	6e75665f 6975625f 6e69746c 0029315f     _fun_builtin_1).

00020728 <mp_type_fun_builtin_1>:
   20728:	00021ee0 00000074 00000000 00000000     ....t...........
   20738:	0000f929 0000df9d 00000000 00000000     )...............
	...
   20764:	4f5f504d 495f4a42 59545f53 73284550     MP_OBJ_IS_TYPE(s
   20774:	5f666c65 202c6e69 5f706d26 65707974     elf_in, &mp_type
   20784:	6e75665f 6975625f 6e69746c 0029325f     _fun_builtin_2).

00020794 <mp_type_fun_builtin_2>:
   20794:	00021ee0 00000074 00000000 00000000     ....t...........
   207a4:	0000f995 0000df9d 00000000 00000000     ................
	...
   207d0:	4f5f504d 495f4a42 59545f53 73284550     MP_OBJ_IS_TYPE(s
   207e0:	5f666c65 202c6e69 5f706d26 65707974     elf_in, &mp_type
   207f0:	6e75665f 6975625f 6e69746c 0029335f     _fun_builtin_3).

00020800 <mp_type_fun_builtin_3>:
   20800:	00021ee0 00000074 00000000 00000000     ....t...........
   20810:	0000fa05 0000df9d 00000000 00000000     ................
	...
   2083c:	4f5f504d 495f4a42 59545f53 73284550     MP_OBJ_IS_TYPE(s
   2084c:	5f666c65 202c6e69 5f706d26 65707974     elf_in, &mp_type
   2085c:	6e75665f 6975625f 6e69746c 7261765f     _fun_builtin_var
   2086c:	00000029                                )...

00020870 <mp_type_fun_builtin_var>:
   20870:	00021ee0 00000074 00000000 00000000     ....t...........
   20880:	0000fa79 0000df9d 00000000 00000000     y...............
	...
   208ac:	725f6d76 72757465 696b5f6e 3d20646e     vm_return_kind =
   208bc:	504d203d 5f4d565f 55544552 455f4e52     = MP_VM_RETURN_E
   208cc:	50454358 4e4f4954 00000000              XCEPTION....

000208d8 <mp_type_fun_bc>:
   208d8:	00021ee0 00000074 00000000 00000000     ....t...........
   208e8:	0000fb9f 0000df9d 00000000 00000000     ................
	...
   20914:	4f5f504d 495f4a42 59545f53 64284550     MP_OBJ_IS_TYPE(d
   20924:	615f6665 5f736772 202c6e69 5f706d26     ef_args_in, &mp_
   20934:	65707974 7075745f 0029656c              type_tuple).

00020940 <__func__.7044>:
   20940:	5f6e7566 6c697562 5f6e6974 61635f30     fun_builtin_0_ca
   20950:	00006c6c                                ll..

00020954 <__func__.7053>:
   20954:	5f6e7566 6c697562 5f6e6974 61635f31     fun_builtin_1_ca
   20964:	00006c6c                                ll..

00020968 <__func__.7062>:
   20968:	5f6e7566 6c697562 5f6e6974 61635f32     fun_builtin_2_ca
   20978:	00006c6c                                ll..

0002097c <__func__.7071>:
   2097c:	5f6e7566 6c697562 5f6e6974 61635f33     fun_builtin_3_ca
   2098c:	00006c6c                                ll..

00020990 <__func__.7080>:
   20990:	5f6e7566 6c697562 5f6e6974 5f726176     fun_builtin_var_
   209a0:	6c6c6163 00000000                       call....

000209a8 <__func__.7105>:
   209a8:	5f6e7566 635f6362 006c6c61              fun_bc_call.

000209b4 <__func__.7116>:
   209b4:	6f5f706d 6e5f6a62 665f7765 625f6e75     mp_obj_new_fun_b
   209c4:	00000063 666c6573 6e75665f 61623e2d     c...self_fun->ba
   209d4:	742e6573 20657079 26203d3d 745f706d     se.type == &mp_t
   209e4:	5f657079 5f6e7566 00006362 2e2f2e2e     ype_fun_bc..../.
   209f4:	79702f2e 6a626f2f 656e6567 6f746172     ./py/objgenerato
   20a04:	00632e72                                r.c.

00020a08 <mp_type_gen_wrap>:
   20a08:	00021ee0 00000075 00000000 00000000     ....u...........
   20a18:	0000fdf1 0000df9d 00000000 00000000     ................
	...
   20a44:	6e65673c 74617265 6f20726f 63656a62     <generator objec
   20a54:	25272074 61202771 70252074 0000003e     t '%q' at %p>...
   20a64:	5f504d28 5f4a424f 4f5f5349 73284a42     (MP_OBJ_IS_OBJ(s
   20a74:	5f666c65 20296e69 28202626 706d2828     elf_in) && (((mp
   20a84:	6a626f5f 7361625f 2a745f65 76282829     _obj_base_t*)((v
   20a94:	2a64696f 6c657329 6e695f66 3e2d2929     oid*)self_in))->
   20aa4:	65707974 203d3d20 706d2628 7079745f     type == (&mp_typ
   20ab4:	65675f65 6e695f6e 6e617473 29296563     e_gen_instance))
   20ac4:	00000029 276e6163 65732074 6e20646e     )...can't send n
   20ad4:	4e2d6e6f 20656e6f 756c6176 6f742065     on-None value to
   20ae4:	6a206120 2d747375 72617473 20646574      a just-started 
   20af4:	656e6567 6f746172 00000072 656e6567     generator...gene
   20b04:	6f746172 6c612072 64616572 78652079     rator already ex
   20b14:	74756365 00676e69                       ecuting.

00020b1c <gen_instance_send_obj>:
   20b1c:	00020794 00010109                       ........

00020b24 <gen_instance_throw_obj>:
   20b24:	00020870 00040004 00010141 656e6567     p.......A...gene
   20b34:	6f746172 67692072 65726f6e 65472064     rator ignored Ge
   20b44:	6172656e 45726f74 00746978              neratorExit.

00020b50 <gen_instance_close_obj>:
   20b50:	00020728 00010195 276e6163 65702074     (.......can't pe
   20b60:	7420646e 776f7268 206f7420 7473756a     nd throw to just
   20b70:	6174732d 64657472 6e656720 74617265     -started generat
   20b80:	0000726f                                or..

00020b84 <gen_instance_pend_throw_obj>:
   20b84:	00020794 0001021d                       ........

00020b8c <gen_instance_locals_dict_table>:
   20b8c:	0000018a 00020b50 000002b6 00020b1c     ....P...........
   20b9c:	000002f6 00020b24 0000027a 00020b84     ....$...z.......

00020bac <gen_instance_locals_dict>:
   20bac:	0001fe68 00000027 00000004 00020b8c     h...'...........

00020bbc <mp_type_gen_instance>:
   20bbc:	00021ee0 00000075 0000fecd 00000000     ....u...........
   20bcc:	00000000 0000df9d 00000000 00000000     ................
   20bdc:	00000000 0000df0f 000100e9 00000000     ................
	...
   20bf4:	00020bac                                ....

00020bf8 <__func__.7247>:
   20bf8:	5f6e6567 70617277 6c61635f 0000006c     gen_wrap_call...

00020c08 <__func__.7268>:
   20c08:	6f5f706d 675f6a62 725f6e65 6d757365     mp_obj_gen_resum
   20c18:	00000065                                e...

00020c1c <it_type>:
   20c1c:	00021ee0 0000008b 00000000 00000000     ................
	...
   20c40:	0000df0f 0001025d 00000000 00000000     ....]...........
	...

00020c58 <log_base2_floor>:
   20c58:	02010100 03020202 03030303 04030303     ................
   20c68:	3d3c2032 73616220 26262065 73616220     2 <= base && bas
   20c78:	3d3c2065 00363120 2e2f2e2e 79702f2e     e <= 16.../../py
   20c88:	6a626f2f 2e746e69 00000063 676e6f6c     /objint.c...long
   20c98:	746e6920 746f6e20 70757320 74726f70      int not support
   20ca8:	69206465 6874206e 62207369 646c6975     ed in this build
   20cb8:	00000000 6c616d73 6e69206c 766f2074     ....small int ov
   20cc8:	6c667265 0000776f                       erflow..

00020cd0 <int_from_bytes_fun_obj>:
   20cd0:	00020870 00040006 0001090d              p...........

00020cdc <int_from_bytes_obj>:
   20cdc:	00022128 00020cd0                       (!......

00020ce4 <int_to_bytes_obj>:
   20ce4:	00020870 00040006 00010987              p...........

00020cf0 <int_locals_dict_table>:
   20cf0:	000001ca 00020cdc 000002fa 00020ce4     ................

00020d00 <int_locals_dict>:
   20d00:	0001fe68 00000017 00000002 00020cf0     h...............

00020d10 <mp_type_int>:
   20d10:	00021ee0 00000081 00010485 00010381     ................
   20d20:	00000000 00010725 0001073d 00000000     ....%...=.......
	...
   20d48:	00020d00                                ....

00020d4c <__func__.7765>:
   20d4c:	695f706d 665f746e 616d726f 69735f74     mp_int_format_si
   20d5c:	0000657a 0000005b 0000202c 0000005d     ze..[..., ..]...
   20d6c:	5f504d28 5f4a424f 4f5f5349 73284a42     (MP_OBJ_IS_OBJ(s
   20d7c:	5f666c65 20296e69 28202626 706d2828     elf_in) && (((mp
   20d8c:	6a626f5f 7361625f 2a745f65 76282829     _obj_base_t*)((v
   20d9c:	2a64696f 6c657329 6e695f66 3e2d2929     oid*)self_in))->
   20dac:	65707974 203d3d20 706d2628 7079745f     type == (&mp_typ
   20dbc:	696c5f65 29297473 00000029 2e2f2e2e     e_list)))...../.
   20dcc:	79702f2e 6a626f2f 7473696c 0000632e     ./py/objlist.c..
   20ddc:	5f504d28 5f4a424f 4f5f5349 61284a42     (MP_OBJ_IS_OBJ(a
   20dec:	5b736772 20295d30 28202626 706d2828     rgs[0]) && (((mp
   20dfc:	6a626f5f 7361625f 2a745f65 76282829     _obj_base_t*)((v
   20e0c:	2a64696f 67726129 5d305b73 3e2d2929     oid*)args[0]))->
   20e1c:	65707974 203d3d20 706d2628 7079745f     type == (&mp_typ
   20e2c:	696c5f65 29297473 00000029 20706f70     e_list)))...pop 
   20e3c:	6d6f7266 706d6520 6c207974 00747369     from empty list.
   20e4c:	5f504d28 5f4a424f 4f5f5349 70284a42     (MP_OBJ_IS_OBJ(p
   20e5c:	615f736f 5b736772 20295d30 28202626     os_args[0]) && (
   20e6c:	706d2828 6a626f5f 7361625f 2a745f65     ((mp_obj_base_t*
   20e7c:	76282829 2a64696f 736f7029 6772615f     )((void*)pos_arg
   20e8c:	5d305b73 3e2d2929 65707974 203d3d20     s[0]))->type == 
   20e9c:	706d2628 7079745f 696c5f65 29297473     (&mp_type_list))
   20eac:	00000029                                )...

00020eb0 <list_append_obj>:
   20eb0:	00020794 00010e0f                       ........

00020eb8 <list_extend_obj>:
   20eb8:	00020794 00010ec9                       ........

00020ec0 <list_clear_obj>:
   20ec0:	00020728 000112d1                       (.......

00020ec8 <list_copy_obj>:
   20ec8:	00020728 00011351                       (...Q...

00020ed0 <list_count_obj>:
   20ed0:	00020794 000113ad                       ........

00020ed8 <list_index_obj>:
   20ed8:	00020870 00040004 00011409              p...........

00020ee4 <list_insert_obj>:
   20ee4:	00020800 0001146d                       ....m...

00020eec <list_pop_obj>:
   20eec:	00020870 00020002 00010fd1              p...........

00020ef8 <list_remove_obj>:
   20ef8:	00020794 0001153d                       ....=...

00020f00 <list_reverse_obj>:
   20f00:	00020728 000115ad                       (.......

00020f08 <list_sort_obj>:
   20f08:	00020870 ffff0003 00011213              p...........

00020f14 <list_locals_dict_table>:
   20f14:	0000015a 00020eb0 00000186 00020ec0     Z...............
   20f24:	00000196 00020ec8 0000019a 00020ed0     ................
   20f34:	000001be 00020eb8 000001fe 00020ed8     ................
   20f44:	00000202 00020ee4 0000027e 00020eec     ........~.......
   20f54:	00000292 00020ef8 0000029e 00020f00     ................
   20f64:	000002c6 00020f08                       ........

00020f6c <list_locals_dict>:
   20f6c:	0001fe68 0000005f 0000000b 00020f14     h..._...........

00020f7c <mp_type_list>:
   20f7c:	00021ee0 00000090 00010a79 00010b23     ........y...#...
   20f8c:	00000000 00010b73 00010bbb 00000000     ....s...........
   20f9c:	00010d85 00010df1 00000000 00000000     ................
	...
   20fb4:	00020f6c                                l...

00020fb8 <__func__.7074>:
   20fb8:	6f5f706d 6c5f6a62 5f747369 65707061     mp_obj_list_appe
   20fc8:	0000646e                                nd..

00020fcc <__func__.7080>:
   20fcc:	7473696c 7478655f 00646e65              list_extend.

00020fd8 <__func__.7087>:
   20fd8:	7473696c 706f705f 00000000              list_pop....

00020fe4 <allowed_args.7116>:
   20fe4:	0203008d 000212b4 020100a7 00000000     ................

00020ff4 <__func__.7121>:
   20ff4:	6f5f706d 6c5f6a62 5f747369 74726f73     mp_obj_list_sort
   21004:	00000000                                ....

00021008 <__func__.7126>:
   21008:	7473696c 656c635f 00007261              list_clear..

00021014 <__func__.7131>:
   21014:	7473696c 706f635f 00000079              list_copy...

00021020 <__func__.7137>:
   21020:	7473696c 756f635f 0000746e              list_count..

0002102c <__func__.7143>:
   2102c:	7473696c 646e695f 00007865              list_index..

00021038 <__func__.7150>:
   21038:	7473696c 736e695f 00747265              list_insert.

00021044 <__func__.7161>:
   21044:	6f5f706d 6c5f6a62 5f747369 6f6d6572     mp_obj_list_remo
   21054:	00006576                                ve..

00021058 <__func__.7166>:
   21058:	7473696c 7665725f 65737265 00000000     list_reverse....
   21068:	5f504d28 5f4a424f 4f5f5349 73284a42     (MP_OBJ_IS_OBJ(s
   21078:	5f666c65 20296e69 28202626 706d2828     elf_in) && (((mp
   21088:	6a626f5f 7361625f 2a745f65 76282829     _obj_base_t*)((v
   21098:	2a64696f 6c657329 6e695f66 3e2d2929     oid*)self_in))->
   210a8:	65707974 203d3d20 706d2628 7079745f     type == (&mp_typ
   210b8:	616d5f65 29292970 00000000 2e2f2e2e     e_map)))....../.
   210c8:	79702f2e 6a626f2f 2e70616d 00000063     ./py/objmap.c...

000210d8 <mp_type_map>:
   210d8:	00021ee0 00000095 00000000 00011865     ............e...
	...
   210fc:	0000df0f 000118eb 00000000 00000000     ................
	...

00021114 <__func__.7189>:
   21114:	5f70616d 72657469 7478656e 00000000     map_iternext....
   21124:	00000000 646f6d3c 20656c75 27732527     ....<module '%s'
   21134:	0000003e                                >...

00021138 <mp_type_module>:
   21138:	00021ee0 00000097 000119d3 00000000     ................
	...
   21154:	00011a25 00000000 00000000 00000000     %...............
	...
   21174:	4f5f504d 495f4a42 59545f53 73284550     MP_OBJ_IS_TYPE(s
   21184:	5f666c65 202c6e69 5f706d26 65707974     elf_in, &mp_type
   21194:	646f6d5f 29656c75 00000000 2e2f2e2e     _module)....../.
   211a4:	79702f2e 6a626f2f 75646f6d 632e656c     ./py/objmodule.c
   211b4:	00000000                                ....

000211b8 <mp_builtin_module_table>:
   211b8:	00000066 0001f3bc 0000016e 000227f8     f.......n....'..
   211c8:	0000025a 00022880                       Z....(..

000211d0 <mp_builtin_module_map>:
   211d0:	0000001f 00000003 000211b8              ............

000211dc <__func__.7295>:
   211dc:	6f5f706d 6d5f6a62 6c75646f 65675f65     mp_obj_module_ge
   211ec:	6c675f74 6c61626f 00000073              t_globals...

000211f8 <mp_type_object>:
   211f8:	00021ee0 00000099 00000000 00011c15     ................
	...

00021234 <mp_type_polymorph_iter>:
   21234:	00021ee0 0000008b 00000000 00000000     ................
	...
   21258:	0000df0f 00011c4b 00000000 00000000     ....K...........
	...
   21270:	656e6f4e 00000000                       None....

00021278 <mp_type_NoneType>:
   21278:	00021ee0 00000048 00011c69 00000000     ....H...i.......
   21288:	00000000 0000df9d 00000000 00000000     ................
	...

000212b4 <mp_const_none_obj>:
   212b4:	00021278                                x...

000212b8 <range_it_type>:
   212b8:	00021ee0 0000008b 00000000 00000000     ................
	...
   212dc:	0000df0f 00011cb1 00000000 00000000     ................
	...
   212f4:	676e6172 64252865 6425202c 00000000     range(%d, %d....
   21304:	00000029 6425202c 00000029 6f72657a     )..., %d)...zero
   21314:	65747320 00000070                        step...

0002131c <mp_type_range>:
   2131c:	00021ee0 000000a3 00011d4d 00011da1     ........M.......
   2132c:	00000000 00011e9d 00000000 00011f67     ............g...
   2133c:	00011ee9 00011f3d 00000000 00000000     ....=...........
	...
   21358:	00007125                                %q..

0002135c <mp_type_singleton>:
   2135c:	00021ee0 00000001 00011fd1 00000000     ................
	...

00021398 <mp_const_ellipsis_obj>:
   21398:	0002135c 0000003d 00006325 0063255c     \...=...%c..\%c.
   213a8:	00005c5c 00006e5c 0000725c 0000745c     \\..\n..\r..\t..
   213b8:	3025785c 00007832 732a2e25 00000000     \x%02x..%.*s....
   213c8:	00000062 65747962 61762073 2065756c     b...bytes value 
   213d8:	2074756f 7220666f 65676e61 00000000     out of range....
   213e8:	6e6f7277 756e2067 7265626d 20666f20     wrong number of 
   213f8:	75677261 746e656d 00000073 5f504d28     arguments...(MP_
   21408:	5f4a424f 515f5349 28525453 666c6573     OBJ_IS_QSTR(self
   21418:	296e695f 207c7c20 5f504d28 5f4a424f     _in) || (MP_OBJ_
   21428:	4f5f5349 73284a42 5f666c65 20296e69     IS_OBJ(self_in) 
   21438:	28202626 5f706d28 5f6a626f 65736162     && ((mp_obj_base
   21448:	292a745f 6f762828 292a6469 666c6573     _t*)((void*)self
   21458:	296e695f 743e2d29 2d657079 6e69623e     _in))->type->bin
   21468:	5f797261 3d20706f 706d203d 6a626f5f     ary_op == mp_obj
   21478:	7274735f 6e69625f 5f797261 2929706f     _str_binary_op))
   21488:	00000000 2e2f2e2e 79702f2e 6a626f2f     ....../../py/obj
   21498:	2e727473 00000063 6e696f6a 70786520     str.c...join exp
   214a8:	73746365 6c206120 20747369 7320666f     ects a list of s
   214b8:	622f7274 73657479 6a626f20 73746365     tr/bytes objects
   214c8:	6e6f6320 74736973 20746e65 68746977      consistent with
   214d8:	6c657320 626f2066 7463656a 00000000      self object....

000214e8 <str_join_obj>:
   214e8:	00020794 00012a75 74706d65 65732079     ....u*..empty se
   214f8:	61726170 00726f74                       parator.

00021500 <str_split_obj>:
   21500:	00020870 00030002 00012c9d 6c707372     p........,..rspl
   21510:	4e287469 2c656e6f 0000296e              it(None,n)..

0002151c <str_rsplit_obj>:
   2151c:	00020870 00030002 00012eb1 5f504d28     p...........(MP_
   2152c:	5f4a424f 515f5349 28525453 73677261     OBJ_IS_QSTR(args
   2153c:	295d305b 207c7c20 5f504d28 5f4a424f     [0]) || (MP_OBJ_
   2154c:	4f5f5349 61284a42 5b736772 20295d30     IS_OBJ(args[0]) 
   2155c:	28202626 5f706d28 5f6a626f 65736162     && ((mp_obj_base
   2156c:	292a745f 6f762828 292a6469 73677261     _t*)((void*)args
   2157c:	295d305b 743e2d29 2d657079 6e69623e     [0]))->type->bin
   2158c:	5f797261 3d20706f 706d203d 6a626f5f     ary_op == mp_obj
   2159c:	7274735f 6e69625f 5f797261 2929706f     _str_binary_op))
   215ac:	00000000 73627573 6e697274 6f6e2067     ....substring no
   215bc:	6f662074 00646e75                       t found.

000215c4 <str_find_obj>:
   215c4:	00020870 00040004 00013231              p.......12..

000215d0 <str_rfind_obj>:
   215d0:	00020870 00040004 00013251              p.......Q2..

000215dc <str_index_obj>:
   215dc:	00020870 00040004 00013273              p.......s2..

000215e8 <str_rindex_obj>:
   215e8:	00020870 00040004 00013293              p........2..

000215f4 <str_startswith_obj>:
   215f4:	00020870 00030004 000132b5 72617473     p........2..star
   21604:	6e652f74 6e692064 65636964 00000073     t/end indices...

00021614 <str_endswith_obj>:
   21614:	00020870 00030004 00013379 7473616c     p.......y3..last
   21624:	6f6f675f 68635f64 705f7261 3e20736f     _good_char_pos >
   21634:	6966203d 5f747372 646f6f67 6168635f     = first_good_cha
   21644:	6f705f72 00000073 73726966 6f675f74     r_pos...first_go
   21654:	635f646f 5f726168 20736f70 30203d3d     od_char_pos == 0
   21664:	00000000                                ....

00021668 <str_strip_obj>:
   21668:	00020870 00020002 00013651              p.......Q6..

00021674 <str_lstrip_obj>:
   21674:	00020870 00020002 0001366f              p.......o6..

00021680 <str_rstrip_obj>:
   21680:	00020870 00020002 0001368d 5e3d3e3c     p........6..<>=^
   21690:	00000000 65646362 67466645 736f6e47     ....bcdeEfFgGnos
   216a0:	00255878 20646162 6d726f66 73207461     xX%.bad format s
   216b0:	6e697274 00000067 6c707574 6e692065     tring...tuple in
   216c0:	20786564 2074756f 7220666f 65676e61     dex out of range
   216d0:	00000000 72747461 74756269 6e207365     ....attributes n
   216e0:	7320746f 6f707075 64657472 74657920     ot supported yet
   216f0:	00000000 766e6f63 69737265 3d206e6f     ....conversion =
   21700:	7227203d 00000027                       = 'r'...

00021708 <str_format_obj>:
   21708:	00020870 ffff0003 00014189 5f504d28     p........A..(MP_
   21718:	5f4a424f 515f5349 28525453 74746170     OBJ_IS_QSTR(patt
   21728:	296e7265 207c7c20 5f504d28 5f4a424f     ern) || (MP_OBJ_
   21738:	4f5f5349 70284a42 65747461 20296e72     IS_OBJ(pattern) 
   21748:	28202626 5f706d28 5f6a626f 65736162     && ((mp_obj_base
   21758:	292a745f 6f762828 292a6469 74746170     _t*)((void*)patt
   21768:	296e7265 743e2d29 2d657079 6e69623e     ern))->type->bin
   21778:	5f797261 3d20706f 706d203d 6a626f5f     ary_op == mp_obj
   21788:	7274735f 6e69625f 5f797261 2929706f     _str_binary_op))
   21798:	00000000 6d726f66 72207461 69757165     ....format requi
   217a8:	20736572 69642061 00007463 20746f6e     res a dict..not 
   217b8:	756f6e65 61206867 6d756772 73746e65     enough arguments
   217c8:	726f6620 726f6620 2074616d 69727473      for format stri
   217d8:	0000676e 20632525 75716572 73657269     ng..%%c requires
   217e8:	746e6920 20726f20 72616863 00000000      int or char....
   217f8:	65746e69 20726567 75716572 64657269     integer required
   21808:	00000000 20746f6e 206c6c61 75677261     ....not all argu
   21818:	746e656d 6f632073 7265766e 20646574     ments converted 
   21828:	69727564 7320676e 6e697274 6f662067     during string fo
   21838:	74616d72 676e6974 00000000 61746164     rmatting....data
   21848:	203d2120 4c4c554e 00000000               != NULL....

00021854 <str_replace_obj>:
   21854:	00020870 00040006 000148a1              p........H..

00021860 <str_count_obj>:
   21860:	00020870 00040004 00014b79              p.......yK..

0002186c <str_lower_obj>:
   2186c:	00020728 00014ddb                       (....M..

00021874 <str_upper_obj>:
   21874:	00020728 00014df9                       (....M..

0002187c <str_isspace_obj>:
   2187c:	00020728 00014f19                       (....O..

00021884 <str_isalpha_obj>:
   21884:	00020728 00014f39                       (...9O..

0002188c <str_isdigit_obj>:
   2188c:	00020728 00014f59                       (...YO..

00021894 <str_isupper_obj>:
   21894:	00020728 00014f79                       (...yO..

0002189c <str_islower_obj>:
   2189c:	00020728 00014f99                       (....O..

000218a4 <str8_locals_dict_table>:
   218a4:	000001c2 000215c4 000002a2 000215d0     ................
   218b4:	000001fe 000215dc 000002a6 000215e8     ................
   218c4:	00000232 000214e8 000002ce 00021500     2...............
   218d4:	000002ae 0002151c 000002d6 000215f4     ................
   218e4:	000001b2 00021614 000002ea 00021668     ............h...
   218f4:	00000252 00021674 000002b2 00021680     R...t...........
   21904:	000001c6 00021708 00000296 00021854     ............T...
   21914:	0000019a 00021860 0000024e 0002186c     ....`...N...l...
   21924:	0000030a 00021874 0000021a 0002187c     ....t.......|...
   21934:	0000020a 00021884 0000020e 0002188c     ................
   21944:	00000222 00021894 00000216 0002189c     "...............

00021954 <str8_locals_dict>:
   21954:	0001fe68 000000b7 00000016 000218a4     h...............

00021964 <mp_type_str>:
   21964:	00021ee0 000000b9 00012239 000122ed     ........9"..."..
	...
   2197c:	000126c3 00000000 000129e9 00015557     .&.......)..WU..
   2198c:	00000000 00014fb9 00000000 00000000     .....O..........
   2199c:	00021954                                T...

000219a0 <mp_type_bytes>:
   219a0:	00021ee0 0000005d 00012239 0001243d     ....]...9"..=$..
	...
   219b8:	000126c3 00000000 000129e9 0001560b     .&.......)...V..
   219c8:	00000000 00014fb9 00000000 00000000     .....O..........
   219d8:	00021954 00000000                       T.......

000219e0 <mp_const_empty_bytes_obj>:
   219e0:	000219a0 00000000 00000000 000219dc     ................
   219f0:	276e6163 6f632074 7265766e 6f742074     can't convert to
   21a00:	72747320 706d6920 6963696c 00796c74      str implicitly.

00021a10 <__func__.7208>:
   21a10:	5f727473 6e696f6a 00000000              str_join....

00021a1c <__func__.7290>:
   21a1c:	5f727473 646e6966 00007265              str_finder..

00021a28 <__func__.7348>:
   21a28:	5f727473 5f696e75 69727473 00000070     str_uni_strip...

00021a38 <whitespace.7352>:
   21a38:	0d0a0920 00000c0b                        .......

00021a40 <__func__.7438>:
   21a40:	6f5f706d 735f6a62 665f7274 616d726f     mp_obj_str_forma
   21a50:	65685f74 7265706c 00000000              t_helper....

00021a5c <__func__.7487>:
   21a5c:	6f5f706d 735f6a62 665f7274 616d726f     mp_obj_str_forma
   21a6c:	00000074                                t...

00021a70 <__func__.7499>:
   21a70:	5f727473 75646f6d 665f6f6c 616d726f     str_modulo_forma
   21a80:	00000074                                t...

00021a84 <__func__.7550>:
   21a84:	5f727473 6c706572 00656361              str_replace.

00021a90 <__func__.7577>:
   21a90:	5f727473 6e756f63 00000074 00000028     str_count...(...
   21aa0:	0000202c 0000002c 00000029 6f5f706d     , ..,...)...mp_o
   21ab0:	675f6a62 745f7465 28657079 666c6573     bj_get_type(self
   21ac0:	296e695f 65673e2d 65746974 3d3d2072     _in)->getiter ==
   21ad0:	5f706d20 5f6a626f 6c707574 65675f65      mp_obj_tuple_ge
   21ae0:	65746974 00000072 2e2f2e2e 79702f2e     titer...../../py
   21af0:	6a626f2f 6c707574 00632e65 5f504d28     /objtuple.c.(MP_
   21b00:	5f4a424f 4f5f5349 73284a42 5f666c65     OBJ_IS_OBJ(self_
   21b10:	20296e69 28202626 706d2828 6a626f5f     in) && (((mp_obj
   21b20:	7361625f 2a745f65 76282829 2a64696f     _base_t*)((void*
   21b30:	6c657329 6e695f66 3e2d2929 65707974     )self_in))->type
   21b40:	203d3d20 706d2628 7079745f 75745f65      == (&mp_type_tu
   21b50:	29656c70 00002929                       ple)))..

00021b58 <tuple_count_obj>:
   21b58:	00020794 00015adf 5f504d28 5f4a424f     .....Z..(MP_OBJ_
   21b68:	4f5f5349 61284a42 5b736772 20295d30     IS_OBJ(args[0]) 
   21b78:	28202626 706d2828 6a626f5f 7361625f     && (((mp_obj_bas
   21b88:	2a745f65 76282829 2a64696f 67726129     e_t*)((void*)arg
   21b98:	5d305b73 3e2d2929 65707974 203d3d20     s[0]))->type == 
   21ba8:	706d2628 7079745f 75745f65 29656c70     (&mp_type_tuple)
   21bb8:	00002929                                ))..

00021bbc <tuple_index_obj>:
   21bbc:	00020870 00040004 00015b3d              p.......=[..

00021bc8 <tuple_locals_dict_table>:
   21bc8:	0000019a 00021b58 000001fe 00021bbc     ....X...........

00021bd8 <tuple_locals_dict>:
   21bd8:	0001fe68 00000017 00000002 00021bc8     h...............

00021be8 <mp_type_tuple>:
   21be8:	00021ee0 000000bf 00015695 00015719     .........V...W..
   21bf8:	00000000 0001588d 0001591d 00000000     .....X...Y......
   21c08:	00015aa1 00015d03 00000000 00000000     .Z...]..........
	...
   21c20:	00021bd8                                ....

00021c24 <mp_const_empty_tuple_obj>:
   21c24:	00021be8 00000000 4f5f504d 495f4a42     ........MP_OBJ_I
   21c34:	59545f53 73284550 5f666c65 202c6e69     S_TYPE(self_in, 
   21c44:	5f706d26 65707974 7075745f 0029656c     &mp_type_tuple).

00021c54 <__func__.7015>:
   21c54:	6c707574 6d635f65 65685f70 7265706c     tuple_cmp_helper
   21c64:	00000000                                ....

00021c68 <__func__.7064>:
   21c68:	6c707574 6f635f65 00746e75              tuple_count.

00021c74 <__func__.7071>:
   21c74:	6c707574 6e695f65 00786564              tuple_index.

00021c80 <__func__.7092>:
   21c80:	6f5f706d 745f6a62 656c7075 7465675f     mp_obj_tuple_get
   21c90:	00000000                                ....

00021c94 <__func__.7097>:
   21c94:	6f5f706d 745f6a62 656c7075 6c65645f     mp_obj_tuple_del
   21ca4:	00000000 4f5f504d 495f4a42 59545f53     ....MP_OBJ_IS_TY
   21cb4:	2a284550 6d657469 6d26202c 79745f70     PE(*item, &mp_ty
   21cc4:	745f6570 29657079 00000000 2e2f2e2e     pe_type)....../.
   21cd4:	79702f2e 6a626f2f 65707974 0000632e     ./py/objtype.c..

00021ce4 <native_base_init_wrapper_obj>:
   21ce4:	00020870 ffff0002 00015e45 5f6d756e     p.......E^..num_
   21cf4:	6974616e 625f6576 73657361 32203c20     native_bases < 2
   21d04:	00000000 6b6f6f6c 3e2d7075 74736564     ....lookup->dest
   21d14:	205d305b 4d203d3d 424f5f50 554e5f4a     [0] == MP_OBJ_NU
   21d24:	00004c4c 6b6f6f6c 3e2d7075 74736564     LL..lookup->dest
   21d34:	205d315b 4d203d3d 424f5f50 554e5f4a     [1] == MP_OBJ_NU
   21d44:	00004c4c 65707974 6f6c3e2d 736c6163     LL..type->locals
   21d54:	6369645f 623e2d74 2e657361 65707974     _dict->base.type
   21d64:	203d3d20 5f706d26 65707974 6369645f      == &mp_type_dic
   21d74:	00000074 2073253c 656a626f 61207463     t...<%s object a
   21d84:	70252074 0000003e 6f5f706d 695f6a62     t %p>...mp_obj_i
   21d94:	6e695f73 6e617473 745f6563 28657079     s_instance_type(
   21da4:	666c6573 00000029 6e695f5f 5f5f7469     self)...__init__
   21db4:	73202928 6c756f68 65722064 6e727574     () should return
   21dc4:	6e6f4e20 00000065                        None...

00021dcc <mp_unary_op_method_name>:
   21dcc:	00000000 00101703 00000000              ............

00021dd8 <mp_binary_op_method_name>:
   21dd8:	160a0f18 0000000c 00000000 14110000     ................
	...
   21df0:	24020000 00000000 00070000 6f5f706d     ...$........mp_o
   21e00:	695f6a62 6e695f73 6e617473 745f6563     bj_is_instance_t
   21e10:	28657079 6f5f706d 675f6a62 745f7465     ype(mp_obj_get_t
   21e20:	28657079 666c6573 296e695f 00000029     ype(self_in))...
   21e30:	656a626f 6e207463 6320746f 616c6c61     object not calla
   21e40:	00656c62 616c633c 27207373 3e277125     ble.<class '%q'>
   21e50:	00000000 65707974 6b617420 31207365     ....type takes 1
   21e60:	20726f20 72612033 656d7567 0073746e      or 3 arguments.
   21e70:	6e6e6163 6320746f 74616572 6e692065     cannot create in
   21e80:	6e617473 00006563 4f5f504d 495f4a42     stance..MP_OBJ_I
   21e90:	59545f53 73284550 5f666c65 202c6e69     S_TYPE(self_in, 
   21ea0:	5f706d26 65707974 7079745f 00002965     &mp_type_type)..
   21eb0:	666c6573 6f6c3e2d 736c6163 6369645f     self->locals_dic
   21ec0:	623e2d74 2e657361 65707974 203d3d20     t->base.type == 
   21ed0:	5f706d26 65707974 6369645f 00000074     &mp_type_dict...

00021ee0 <mp_type_type>:
   21ee0:	00021ee0 000000c0 000169d9 00016a05     .........i...j..
   21ef0:	00016a71 0000df9d 00000000 00016ab1     qj...........j..
	...
   21f1c:	65707974 20736920 20746f6e 61206e61     type is not an a
   21f2c:	70656363 6c626174 61622065 74206573     cceptable base t
   21f3c:	00657079 746c756d 656c7069 73616220     ype.multiple bas
   21f4c:	68207365 20657661 74736e69 65636e61     es have instance
   21f5c:	79616c20 74756f2d 6e6f6320 63696c66      lay-out conflic
   21f6c:	00000074 7075733c 203a7265 00000000     t...<super: ....
   21f7c:	0000202c 0000003e 4f5f504d 495f4a42     , ..>...MP_OBJ_I
   21f8c:	59545f53 73284550 5f666c65 202c6e69     S_TYPE(self_in, 
   21f9c:	5f706d26 65707974 7075735f 00297265     &mp_type_super).
   21fac:	4f5f504d 495f4a42 59545f53 73284550     MP_OBJ_IS_TYPE(s
   21fbc:	2d666c65 7079743e 26202c65 745f706d     elf->type, &mp_t
   21fcc:	5f657079 65707974 00000029 4f5f504d     ype_type)...MP_O
   21fdc:	495f4a42 59545f53 69284550 736d6574     BJ_IS_TYPE(items
   21fec:	2c5d695b 706d2620 7079745f 79745f65     [i], &mp_type_ty
   21ffc:	00296570                                pe).

00022000 <mp_type_super>:
   22000:	00021ee0 000000bc 00016d9d 00016df5     .........m...m..
	...
   2201c:	00016e69 00000000 00000000 00000000     in..............
	...
   2203c:	75737369 616c6362 29287373 67726120     issubclass() arg
   2204c:	6d203220 20747375 61206562 616c6320      2 must be a cla
   2205c:	6f207373 20612072 6c707574 666f2065     ss or a tuple of
   2206c:	616c6320 73657373 00000000 75737369      classes....issu
   2207c:	616c6362 29287373 67726120 6d203120     bclass() arg 1 m
   2208c:	20747375 61206562 616c6320 00007373     ust be a class..

0002209c <mp_builtin_issubclass_obj>:
   2209c:	00020794 000171d1                       .....q..

000220a4 <mp_builtin_isinstance_obj>:
   220a4:	00020794 00017219 666c6573 203d3d20     .....r..self == 
   220b4:	5f706d26 65707974 6174735f 6d636974     &mp_type_staticm
   220c4:	6f687465 7c7c2064 6c657320 3d3d2066     ethod || self ==
   220d4:	706d2620 7079745f 6c635f65 6d737361      &mp_type_classm
   220e4:	6f687465 00000064                       ethod...

000220ec <mp_type_staticmethod>:
   220ec:	00021ee0 000000b6 00000000 00017277     ............wr..
	...

00022128 <mp_type_classmethod>:
   22128:	00021ee0 00000060 00000000 00017277     ....`.......wr..
	...

00022164 <__func__.7555>:
   22164:	74736e69 65636e61 756f635f 6e5f746e     instance_count_n
   22174:	76697461 61625f65 00736573              ative_bases.

00022180 <__func__.7573>:
   22180:	6f5f706d 6e5f6a62 695f7765 6174736e     mp_obj_new_insta
   22190:	0065636e                                nce.

00022194 <__func__.7585>:
   22194:	6f5f706d 635f6a62 7373616c 6f6f6c5f     mp_obj_class_loo
   221a4:	0070756b                                kup.

000221a8 <__func__.7616>:
   221a8:	6f5f706d 695f6a62 6174736e 5f65636e     mp_obj_instance_
   221b8:	656b616d 77656e5f 00000000              make_new....

000221c4 <__func__.7653>:
   221c4:	6f5f706d 695f6a62 6174736e 5f65636e     mp_obj_instance_
   221d4:	64616f6c 7474615f 00000072              load_attr...

000221e0 <__func__.7746>:
   221e0:	65707974 7474615f 00000072              type_attr...

000221ec <__func__.7794>:
   221ec:	65707573 74615f72 00007274              super_attr..

000221f8 <__func__.7856>:
   221f8:	74617473 635f6369 7373616c 74656d5f     static_class_met
   22208:	5f646f68 656b616d 77656e5f 00000000     hod_make_new....
   22218:	5f504d28 5f4a424f 4f5f5349 73284a42     (MP_OBJ_IS_OBJ(s
   22228:	5f666c65 20296e69 28202626 706d2828     elf_in) && (((mp
   22238:	6a626f5f 7361625f 2a745f65 76282829     _obj_base_t*)((v
   22248:	2a64696f 6c657329 6e695f66 3e2d2929     oid*)self_in))->
   22258:	65707974 203d3d20 706d2628 7079745f     type == (&mp_typ
   22268:	697a5f65 29292970 00000000 2e2f2e2e     e_zip)))....../.
   22278:	79702f2e 6a626f2f 2e70697a 00000063     ./py/objzip.c...

00022288 <mp_type_zip>:
   22288:	00021ee0 000000c5 00000000 0001730d     .............s..
	...
   222ac:	0000df0f 00017383 00000000 00000000     .....s..........
	...

000222c4 <__func__.7188>:
   222c4:	5f70697a 72657469 7478656e 00000000     zip_iternext....

000222d4 <mp_op_getitem_obj>:
   222d4:	00020794 00017429                       ....)t..

000222dc <mp_op_setitem_obj>:
   222dc:	00020800 00017451                       ....Qt..

000222e4 <mp_op_delitem_obj>:
   222e4:	00020794 0001747b                       ....{t..

000222ec <mp_op_contains_obj>:
   222ec:	00020794 000174a3 656a626f 6e207463     .....t..object n
   222fc:	6920746f 6573206e 6e657571 00006563     ot in sequence..
   2230c:	20646162 65707974 65646f63 00000000     bad typecode....
   2231c:	0079702e 73696874 6d616e5f 20715f65     .py.this_name_q 
   2232c:	4d203d21 424f5f50 554e5f4a 00004c4c     != MP_OBJ_NULL..
   2233c:	2e2f2e2e 79702f2e 6975622f 6e69746c     ../../py/builtin
   2234c:	6f706d69 632e7472 00000000 6e6e6163     import.c....cann
   2235c:	7020746f 6f667265 72206d72 74616c65     ot perform relat
   2236c:	20657669 6f706d69 00007472 75646f6d     ive import..modu
   2237c:	6e20656c 6620746f 646e756f 00000000     le not found....
   2238c:	6e695f5f 5f5f7469 0079702e              __init__.py.

00022398 <mp_builtin___import___obj>:
   22398:	00020870 00050002 00018503              p...........

000223a4 <__func__.7966>:
   223a4:	625f706d 746c6975 5f5f6e69 706d695f     mp_builtin___imp
   223b4:	5f74726f 0000005f                       ort__...

000223bc <mp_builtin_eval_obj>:
   223bc:	00020870 00030002 00018b2d              p.......-...

000223c8 <mp_builtin_exec_obj>:
   223c8:	00020870 00030002 00018b4b 3d3c2032     p.......K...2 <=
   223d8:	615f6e20 00736772 2e2f2e2e 79702f2e      n_args.../../py
   223e8:	646f6d2f 6c697562 736e6974 0000632e     /modbuiltins.c..

000223f8 <mp_builtin___build_class___obj>:
   223f8:	00020870 ffff0004 00018c6d              p.......m...

00022404 <mp_builtin_abs_obj>:
   22404:	00020728 00018d25                       (...%...

0002240c <mp_builtin_all_obj>:
   2240c:	00020728 00018d3f                       (...?...

00022414 <mp_builtin_any_obj>:
   22414:	00020728 00018d8d                       (.......

0002241c <mp_builtin_bin_obj>:
   2241c:	00020728 00018dd5                       (.......

00022424 <mp_builtin_callable_obj>:
   22424:	00020728 00018dfd 28726863 72612029     (.......chr() ar
   22434:	6f6e2067 6e692074 6e617220 32286567     g not in range(2
   22444:	00293635                                56).

00022448 <mp_builtin_chr_obj>:
   22448:	00020728 00018e29                       (...)...

00022450 <mp_builtin_dir_obj>:
   22450:	00020870 00010000 00018e6d              p.......m...

0002245c <mp_builtin_divmod_obj>:
   2245c:	00020794 00018f25                       ....%...

00022464 <mp_builtin_hash_obj>:
   22464:	00020728 00018f43                       (...C...

0002246c <mp_builtin_hex_obj>:
   2246c:	00020728 00018f5d                       (...]...

00022474 <mp_builtin_iter_obj>:
   22474:	00020728 00018f79                       (...y...

0002247c <mp_builtin_next_obj>:
   2247c:	00020728 00018f93                       (.......

00022484 <mp_builtin_oct_obj>:
   22484:	00020728 00018fc5 2064726f 65707865     (.......ord expe
   22494:	20737463 68632061 63617261 00726574     cts a character.

000224a4 <mp_builtin_ord_obj>:
   224a4:	00020728 00018fe1 72612d33 6f702067     (.......3-arg po
   224b4:	20292877 20746f6e 70707573 6574726f     w() not supporte
   224c4:	00000064                                d...

000224c8 <mp_builtin_pow_obj>:
   224c8:	00020870 00030004 0001901d              p...........

000224d4 <mp_builtin_print_obj>:
   224d4:	00020870 ffff0001 0001905d 0000000a     p.......].......

000224e4 <mp_builtin___repl_print___obj>:
   224e4:	00020728 00019111                       (.......

000224ec <mp_builtin_repr_obj>:
   224ec:	00020728 00019149                       (...I...

000224f4 <mp_builtin_round_obj>:
   224f4:	00020870 00020002 00019189              p...........

00022500 <mp_builtin_sum_obj>:
   22500:	00020870 00020002 000191e9 7473756d     p...........must
   22510:	65737520 79656b20 64726f77 67726120      use keyword arg
   22520:	6e656d75 6f662074 656b2072 75662079     ument for key fu
   22530:	6974636e 00006e6f                       nction..

00022538 <mp_builtin_sorted_obj>:
   22538:	00020870 ffff0003 0001923f              p.......?...

00022544 <mp_builtin_getattr_obj>:
   22544:	00020870 00030004 000192dd              p...........

00022550 <mp_builtin_setattr_obj>:
   22550:	00020800 0001931d                       ........

00022558 <mp_builtin_hasattr_obj>:
   22558:	00020794 00019349                       ....I...

00022560 <mp_builtin_globals_obj>:
   22560:	000206bc 00019385                       ........

00022568 <mp_builtin_locals_obj>:
   22568:	000206bc 00019393                       ........

00022570 <mp_builtin_id_obj>:
   22570:	00020728 0000dd81                       (.......

00022578 <mp_builtin_len_obj>:
   22578:	00020728 0000ddcb                       (.......

00022580 <mp_module_builtins_globals_table>:
   22580:	0000006e 0000016e 00000012 000223f8     n...n........#..
   22590:	0000004a 00022398 00000082 000224e4     J....#.......$..
   225a0:	00000166 0001f980 00000176 000219a0     f.......v.......
   225b0:	0000019e 0001fe68 00000206 00020d10     ....h...........
   225c0:	00000242 00020f7c 00000256 000210d8     B...|...V.......
   225d0:	00000266 000211f8 0000028e 0002131c     f...............
   225e0:	000002e6 00021964 000002f2 00022000     ....d........ ..
   225f0:	000002fe 00021be8 00000302 00021ee0     ................
   22600:	00000316 00022288 00000182 00022128     ....."......(!..
   22610:	000002da 000220ec 000000f6 00021398     ..... ..........
   22620:	0000014e 00022404 00000152 0002240c     N....$..R....$..
   22630:	00000156 00022414 00000162 0002241c     V....$..b....$..
   22640:	0000017a 00022424 0000017e 00022448     z...$$..~...H$..
   22650:	000001a6 00022450 000001aa 0002245c     ....P$......\$..
   22660:	000001b6 000223bc 000001ba 000223c8     .....#.......#..
   22670:	000001de 00022544 000002be 00022550     ....D%......P%..
   22680:	000001e2 00022560 000001e6 00022558     ....`%......X%..
   22690:	000001ea 00022464 000001f6 0002246c     ....d$......l$..
   226a0:	000001fa 00022570 00000212 000220a4     ....p%....... ..
   226b0:	0000021e 0002209c 0000022a 00022474     ..... ..*...t$..
   226c0:	0000023e 00022578 0000024a 00022568     >...x%..J...h%..
   226d0:	00000262 0002247c 0000026a 00022484     b...|$..j....$..
   226e0:	00000276 000224a4 00000286 000224c8     v....$.......$..
   226f0:	0000028a 000224d4 0000029a 000224ec     .....$.......$..
   22700:	000002aa 000224f4 000002ca 00022538     .....$......8%..
   22710:	000002ee 00022500 000000ee 0001ff80     .....%..........
   22720:	000000e2 000200e8 000000e6 0002019c     ................
   22730:	000000ea 000201d8 000000f2 00020214     ................
   22740:	000000fa 00020070 000000fe 00020034     ....p.......4...
   22750:	00000102 00020250 00000106 000204a8     ....P...........
   22760:	0000010a 000202c8 00000112 0001fff8     ................
   22770:	0000010e 00020304 00000116 0002028c     ................
   22780:	0000011a 00020340 0000011e 0002037c     ....@.......|...
   22790:	00000126 00020430 0000012a 000203b8     &...0...*.......
   227a0:	0000012e 00020124 00000132 000203f4     ....$...2.......
   227b0:	00000136 000200ac 0000013a 0002046c     6.......:...l...
   227c0:	0000013e 0001ffbc 00000142 000204e4     >.......B.......
   227d0:	00000146 00020520 0000014a 00020160     F... ...J...`...
   227e0:	0000026e 00022ab8                       n....*..

000227e8 <mp_module_builtins_globals>:
   227e8:	0001fe68 0000026f 0000004d 00022580     h...o...M....%..

000227f8 <mp_module_builtins>:
   227f8:	00021138 000227e8                       8....'..

00022800 <__func__.7886>:
   22800:	625f706d 746c6975 5f5f6e69 6975625f     mp_builtin___bui
   22810:	635f646c 7373616c 00005f5f              ld_class__..

0002281c <allowed_args.7998>:
   2281c:	020300ae 000000b2 0203006b 000000b6     ........k.......

0002282c <mp_micropython_opt_level_obj>:
   2282c:	00020870 00010000 000193a1              p...........

00022838 <mp_micropython_heap_lock_obj>:
   22838:	000206bc 000193e5                       ........

00022840 <mp_micropython_heap_unlock_obj>:
   22840:	000206bc 000193f9                       ........

00022848 <mp_module_micropython_globals_table>:
   22848:	0000006e 0000025a 00000192 0001f928     n...Z.......(...
   22858:	00000272 0002282c 000001ee 00022838     r...,(......8(..
   22868:	000001f2 00022840                       ....@(..

00022870 <mp_module_micropython_globals>:
   22870:	0001fe68 0000002f 00000005 00022848     h.../.......H(..

00022880 <mp_module_micropython>:
   22880:	00021138 00022870                       8...p(..

00022888 <__func__.7750>:
   22888:	655f706d 75636578 625f6574 63657479     mp_execute_bytec
   22898:	0065646f 61636f6c 6176206c 62616972     ode.local variab
   228a8:	7220656c 72656665 65636e65 65622064     le referenced be
   228b8:	65726f66 73736120 6d6e6769 00746e65     fore assignment.
   228c8:	6f5f706d 695f6a62 78655f73 74706563     mp_obj_is_except
   228d8:	5f6e6f69 74736e69 65636e61 504f5428     ion_instance(TOP
   228e8:	00292928 2e2f2e2e 79702f2e 2e6d762f     ()).../../py/vm.
   228f8:	00000063 5f637865 3e207073 7865203d     c...exc_sp >= ex
   22908:	74735f63 006b6361 72727563 6c746e65     c_stack.currentl
   22918:	6e695f79 6378655f 5f747065 636f6c62     y_in_except_bloc
   22928:	0000006b 5f637865 3d207073 7865203d     k...exc_sp == ex
   22938:	74735f63 206b6361 0031202d 5f746572     c_stack - 1.ret_
   22948:	646e696b 203d3d20 565f504d 45525f4d     kind == MP_VM_RE
   22958:	4e525554 4358455f 49545045 00004e4f     TURN_EXCEPTION..
   22968:	65747962 646f6320 6f6e2065 6d692074     byte code not im
   22978:	6d656c70 65746e65 00000064 61206f6e     plemented...no a
   22988:	76697463 78652065 74706563 206e6f69     ctive exception 
   22998:	72206f74 69617265 00006573 636e7566     to reraise..func
   229a8:	6e6f6974 746f6720 6c756d20 6c706974     tion got multipl
   229b8:	61762065 7365756c 726f6620 67726120     e values for arg
   229c8:	6e656d75 25272074 00002771 78656e75     ument '%q'..unex
   229d8:	74636570 6b206465 6f777965 61206472     pected keyword a
   229e8:	6d756772 00746e65 636e7566 6e6f6974     rgument.function
   229f8:	73696d20 676e6973 71657220 65726975      missing require
   22a08:	6f702064 69746973 6c616e6f 67726120     d positional arg
   22a18:	6e656d75 25232074 00000064 636e7566     ument #%d...func
   22a28:	6e6f6974 73696d20 676e6973 71657220     tion missing req
   22a38:	65726975 656b2064 726f7779 72612064     uired keyword ar
   22a48:	656d7567 2720746e 00277125 636e7566     gument '%q'.func
   22a58:	6e6f6974 73696d20 676e6973 79656b20     tion missing key
   22a68:	64726f77 6c6e6f2d 72612079 656d7567     word-only argume
   22a78:	0000746e 00006669 6c696877 00000065     nt..if..while...
   22a88:	00726f66 00797274 68746977 00000000     for.try.with....
   22a98:	00666564 73616c63 00000073 00000020     def.class... ...
   22aa8:	0073250a 0000000a                       .%s.....

00022ab0 <import_str.7132>:
   22ab0:	6f706d69 00207472                       import .

00022ab8 <mp_builtin_open_obj>:
   22ab8:	00020870 ffff0003 0001b189 65737341     p...........Asse
   22ac8:	6f697472 2527206e 66202773 656c6961     rtion '%s' faile
   22ad8:	61202c64 69662074 2520656c 64253a73     d, at file %s:%d
   22ae8:	0000000a 65737341 6f697472 6166206e     ....Assertion fa
   22af8:	64656c69 00000000 0000000d 00000004     iled............
   22b08:	6b6f6f74 20752520 000a736d 72747371     took %u ms..qstr
   22b18:	20200a3a 6f705f6e 253d6c6f 20200a75     :.  n_pool=%u.  
   22b28:	73715f6e 253d7274 20200a75 74735f6e     n_qstr=%u.  n_st
   22b38:	61645f72 625f6174 73657479 0a75253d     r_data_bytes=%u.
   22b48:	5f6e2020 61746f74 79625f6c 3d736574       n_total_bytes=
   22b58:	000a7525 20776172 4c504552 5443203b     %u..raw REPL; CT
   22b68:	422d4c52 206f7420 74697865 00000a0d     RL-B to exit....
   22b78:	0000003e 00000a0d 00004b4f 7263694d     >.......OK..Micr
   22b88:	7479506f 206e6f68 392e3176 312d342e     oPython v1.9.4-1
   22b98:	672d3734 30633431 35313339 7269642d     47-g14c09315-dir
   22ba8:	6f207974 3032206e 302d3831 39312d36     ty on 2018-06-19
   22bb8:	696d203b 616d696e 6977206c 75206874     ; minimal with u
   22bc8:	6f6e6b6e 632d6e77 0a0d7570 00000000     nknown-cpu......
   22bd8:	203e3e3e 00000000 61700a0d 20657473     >>> ......paste 
   22be8:	65646f6d 7443203b 432d6c72 206f7420     mode; Ctrl-C to 
   22bf8:	636e6163 202c6c65 6c727443 7420442d     cancel, Ctrl-D t
   22c08:	6966206f 6873696e 3d3d0a0d 0000203d     o finish..=== ..
   22c18:	3d3d0a0d 0000203d 202e2e2e 00000000     ..=== ..... ....
   22c28:	6c756f63 6f6e2064 69662074 6d20646e     could not find m
   22c38:	6c75646f 25272065 000a2773              odule '%s'..

00022c44 <pyb_set_repl_info_obj>:
   22c44:	00020728 0001b995 08080808 00000000     (...............
   22c54:	75255b1b 00000000 004b5b1b 00000a0d     .[%u.....[K.....
   22c64:	72660dfe 6e657a6f 74736574 0079702e     ..frozentest.py.
   22c74:	507503f9 00000079 006901cc              ..uPy.....i.

00022c80 <mp_qstr_frozen_const_pool>:
   22c80:	0001d20c 000000c6 00000003 00000003     ................
   22c90:	00022c64 00022c74 00022c7c              d,..t,..|,..

00022c9c <bytecode_data_frozentest__lt_module_gt_>:
   22c9c:	00000003 2f0d0000 2a00c600 2b282828     ......./...*(((+
   22cac:	ff000028 1600a21b 016400c7 00a21b32     (.........d.2...
   22cbc:	01640017 00a21b32 01640117 00a21b32     ..d.2.....d.2...
   22ccc:	01640217 00a21b32 9aefba14 32016415     ..d.2........d.2
   22cdc:	800f3580 00c82430 1b00a21b 016400c8     .5..0$........d.
   22cec:	30e58132 eb36d784 5b11327f 6f6c2061     2..0..6..2.[a lo
   22cfc:	7320676e 6e697274 68742067 69207461     ng string that i
   22d0c:	6f6e2073 6e692074 6e726574 00006465     s not interned..

00022d1c <const_obj_frozentest__lt_module_gt__0>:
   22d1c:	00021964 000000f6 00000022 00022cf8     d......."....,..
   22d2c:	74732061 676e6972 61687420 61682074     a string that ha
   22d3c:	6e752073 646f6369 b1ce2065 b3ceb2ce     s unicode ......
   22d4c:	61686320 00007372                        chars..

00022d54 <const_obj_frozentest__lt_module_gt__1>:
   22d54:	00021964 000000c8 00000026 00022d2c     d.......&...,-..
   22d64:	65747962 32312073 00013433              bytes 1234..

00022d70 <const_obj_frozentest__lt_module_gt__2>:
   22d70:	000219a0 00000039 0000000b 00022d64     ....9.......d-..

00022d80 <const_table_data_frozentest__lt_module_gt_>:
   22d80:	00022d1c 00022d54 00022d70              .-..T-..p-..

00022d8c <raw_code_frozentest__lt_module_gt_>:
   22d8c:	00000002 00022c9c 00022d80 00000000     .....,...-......

00022d9c <mp_frozen_mpy_names>:
   22d9c:	7a6f7266 65746e65 702e7473 00000079     frozentest.py...

00022dac <mp_frozen_mpy_content>:
   22dac:	00022d8c                                .-..
