
uPY_TM4C123.axf:     file format elf32-littlearm


Disassembly of section .text:

00000000 <g_pfnVectors>:
       0:	c4 12 00 20 69 b8 01 00 cd b8 01 00 d5 b8 01 00     ... i...........
      10:	dd b8 01 00 dd b8 01 00 dd b8 01 00 00 00 00 00     ................
	...
      2c:	dd b8 01 00 dd b8 01 00 00 00 00 00 dd b8 01 00     ................
      3c:	dd b8 01 00 dd b8 01 00 dd b8 01 00 dd b8 01 00     ................
      4c:	dd b8 01 00 dd b8 01 00 dd b8 01 00 dd b8 01 00     ................
      5c:	dd b8 01 00 dd b8 01 00 dd b8 01 00 dd b8 01 00     ................
      6c:	dd b8 01 00 dd b8 01 00 dd b8 01 00 dd b8 01 00     ................
      7c:	dd b8 01 00 dd b8 01 00 dd b8 01 00 dd b8 01 00     ................
      8c:	dd b8 01 00 dd b8 01 00 dd b8 01 00 dd b8 01 00     ................
      9c:	dd b8 01 00 dd b8 01 00 dd b8 01 00 dd b8 01 00     ................
      ac:	dd b8 01 00 dd b8 01 00 dd b8 01 00 dd b8 01 00     ................
      bc:	dd b8 01 00 dd b8 01 00 dd b8 01 00 dd b8 01 00     ................
      cc:	dd b8 01 00 dd b8 01 00 dd b8 01 00 dd b8 01 00     ................
      dc:	dd b8 01 00 dd b8 01 00 00 00 00 00 00 00 00 00     ................
      ec:	dd b8 01 00 dd b8 01 00 dd b8 01 00 dd b8 01 00     ................
      fc:	dd b8 01 00 dd b8 01 00 dd b8 01 00 dd b8 01 00     ................
     10c:	dd b8 01 00 00 00 00 00 00 00 00 00 dd b8 01 00     ................
     11c:	dd b8 01 00 dd b8 01 00 dd b8 01 00 dd b8 01 00     ................
     12c:	dd b8 01 00 dd b8 01 00 dd b8 01 00 dd b8 01 00     ................
     13c:	dd b8 01 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     14c:	00 00 00 00 dd b8 01 00 dd b8 01 00 dd b8 01 00     ................
     15c:	dd b8 01 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     1b0:	dd b8 01 00 dd b8 01 00 dd b8 01 00 dd b8 01 00     ................
     1c0:	dd b8 01 00 dd b8 01 00 dd b8 01 00 dd b8 01 00     ................
     1d0:	dd b8 01 00 dd b8 01 00 dd b8 01 00 dd b8 01 00     ................
     1e0:	dd b8 01 00 dd b8 01 00 dd b8 01 00 00 00 00 00     ................
     1f0:	00 00 00 00 dd b8 01 00 dd b8 01 00 dd b8 01 00     ................
     200:	dd b8 01 00 dd b8 01 00 00 00 00 00 00 00 00 00     ................
     210:	dd b8 01 00 dd b8 01 00 dd b8 01 00 dd b8 01 00     ................
     220:	dd b8 01 00 dd b8 01 00 dd b8 01 00 dd b8 01 00     ................
     230:	dd b8 01 00 dd b8 01 00 dd b8 01 00 dd b8 01 00     ................
     240:	dd b8 01 00 dd b8 01 00 dd b8 01 00 dd b8 01 00     ................
     250:	dd b8 01 00 dd b8 01 00 dd b8 01 00 dd b8 01 00     ................
     260:	dd b8 01 00 dd b8 01 00 dd b8 01 00                 ............

0000026c <nlr_push_tail>:
// LTO can't see inside inline asm functions so explicitly mark nlr_push_tail as used
__attribute__((used)) unsigned int nlr_push_tail(nlr_buf_t *nlr);
#endif
#endif

unsigned int nlr_push_tail(nlr_buf_t *nlr) {
     26c:	b480      	push	{r7}
     26e:	b085      	sub	sp, #20
     270:	af00      	add	r7, sp, #0
     272:	6078      	str	r0, [r7, #4]
    nlr_buf_t **top = &MP_STATE_THREAD(nlr_top);
     274:	4b07      	ldr	r3, [pc, #28]	; (294 <nlr_push_tail+0x28>)
     276:	60fb      	str	r3, [r7, #12]
    nlr->prev = *top;
     278:	68fb      	ldr	r3, [r7, #12]
     27a:	681a      	ldr	r2, [r3, #0]
     27c:	687b      	ldr	r3, [r7, #4]
     27e:	601a      	str	r2, [r3, #0]
    MP_NLR_SAVE_PYSTACK(nlr);
    *top = nlr;
     280:	68fb      	ldr	r3, [r7, #12]
     282:	687a      	ldr	r2, [r7, #4]
     284:	601a      	str	r2, [r3, #0]
    return 0; // normal return
     286:	2300      	movs	r3, #0
}
     288:	4618      	mov	r0, r3
     28a:	3714      	adds	r7, #20
     28c:	46bd      	mov	sp, r7
     28e:	f85d 7b04 	ldr.w	r7, [sp], #4
     292:	4770      	bx	lr
     294:	200012f8 	.word	0x200012f8

00000298 <nlr_pop>:

void nlr_pop(void) {
     298:	b480      	push	{r7}
     29a:	b083      	sub	sp, #12
     29c:	af00      	add	r7, sp, #0
    nlr_buf_t **top = &MP_STATE_THREAD(nlr_top);
     29e:	4b06      	ldr	r3, [pc, #24]	; (2b8 <nlr_pop+0x20>)
     2a0:	607b      	str	r3, [r7, #4]
    *top = (*top)->prev;
     2a2:	687b      	ldr	r3, [r7, #4]
     2a4:	681b      	ldr	r3, [r3, #0]
     2a6:	681a      	ldr	r2, [r3, #0]
     2a8:	687b      	ldr	r3, [r7, #4]
     2aa:	601a      	str	r2, [r3, #0]
}
     2ac:	bf00      	nop
     2ae:	370c      	adds	r7, #12
     2b0:	46bd      	mov	sp, r7
     2b2:	f85d 7b04 	ldr.w	r7, [sp], #4
     2b6:	4770      	bx	lr
     2b8:	200012f8 	.word	0x200012f8

000002bc <nlr_push>:
// For reference, arm/thumb callee save regs are:
//      r4-r11, r13=sp

__attribute__((naked)) unsigned int nlr_push(nlr_buf_t *nlr) {

    __asm volatile (
     2bc:	60c4      	str	r4, [r0, #12]
     2be:	6105      	str	r5, [r0, #16]
     2c0:	6146      	str	r6, [r0, #20]
     2c2:	6187      	str	r7, [r0, #24]
     2c4:	f8c0 801c 	str.w	r8, [r0, #28]
     2c8:	f8c0 9020 	str.w	r9, [r0, #32]
     2cc:	f8c0 a024 	str.w	sl, [r0, #36]	; 0x24
     2d0:	f8c0 b028 	str.w	fp, [r0, #40]	; 0x28
     2d4:	f8c0 d02c 	str.w	sp, [r0, #44]	; 0x2c
     2d8:	f8c0 e008 	str.w	lr, [r0, #8]
     2dc:	f7ff bfc6 	b.w	26c <nlr_push_tail>

000002e0 <nlr_jump>:
    return 0;
    #endif
}

NORETURN void nlr_jump(void *val) {
    MP_NLR_JUMP_HEAD(val, top)
     2e0:	4a0d      	ldr	r2, [pc, #52]	; (318 <nlr_jump+0x38>)
NORETURN void nlr_jump(void *val) {
     2e2:	b508      	push	{r3, lr}
    MP_NLR_JUMP_HEAD(val, top)
     2e4:	6893      	ldr	r3, [r2, #8]
     2e6:	b90b      	cbnz	r3, 2ec <nlr_jump+0xc>
     2e8:	f01b f9e6 	bl	1b6b8 <nlr_jump_fail>
     2ec:	6819      	ldr	r1, [r3, #0]
     2ee:	6058      	str	r0, [r3, #4]
     2f0:	6091      	str	r1, [r2, #8]

    __asm volatile (
     2f2:	4618      	mov	r0, r3
     2f4:	68c4      	ldr	r4, [r0, #12]
     2f6:	6905      	ldr	r5, [r0, #16]
     2f8:	6946      	ldr	r6, [r0, #20]
     2fa:	6987      	ldr	r7, [r0, #24]
     2fc:	f8d0 801c 	ldr.w	r8, [r0, #28]
     300:	f8d0 9020 	ldr.w	r9, [r0, #32]
     304:	f8d0 a024 	ldr.w	sl, [r0, #36]	; 0x24
     308:	f8d0 b028 	ldr.w	fp, [r0, #40]	; 0x28
     30c:	f8d0 d02c 	ldr.w	sp, [r0, #44]	; 0x2c
     310:	f8d0 e008 	ldr.w	lr, [r0, #8]
     314:	2001      	movs	r0, #1
     316:	4770      	bx	lr
     318:	200012f0 	.word	0x200012f0

0000031c <m_malloc>:
        return NULL;
    }
}
#endif // MICROPY_ENABLE_GC

void *m_malloc(size_t num_bytes) {
     31c:	b580      	push	{r7, lr}
     31e:	b084      	sub	sp, #16
     320:	af00      	add	r7, sp, #0
     322:	6078      	str	r0, [r7, #4]
    void *ptr = malloc(num_bytes);
     324:	2100      	movs	r1, #0
     326:	6878      	ldr	r0, [r7, #4]
     328:	f000 fb38 	bl	99c <gc_alloc>
     32c:	60f8      	str	r0, [r7, #12]
    if (ptr == NULL && num_bytes != 0) {
     32e:	68fb      	ldr	r3, [r7, #12]
     330:	2b00      	cmp	r3, #0
     332:	d105      	bne.n	340 <m_malloc+0x24>
     334:	687b      	ldr	r3, [r7, #4]
     336:	2b00      	cmp	r3, #0
     338:	d002      	beq.n	340 <m_malloc+0x24>
        m_malloc_fail(num_bytes);
     33a:	6878      	ldr	r0, [r7, #4]
     33c:	f00c ff1c 	bl	d178 <m_malloc_fail>
    MP_STATE_MEM(total_bytes_allocated) += num_bytes;
    MP_STATE_MEM(current_bytes_allocated) += num_bytes;
    UPDATE_PEAK();
#endif
    DEBUG_printf("malloc %d : %p\n", num_bytes, ptr);
    return ptr;
     340:	68fb      	ldr	r3, [r7, #12]
}
     342:	4618      	mov	r0, r3
     344:	3710      	adds	r7, #16
     346:	46bd      	mov	sp, r7
     348:	bd80      	pop	{r7, pc}
     34a:	bf00      	nop

0000034c <m_malloc_maybe>:

void *m_malloc_maybe(size_t num_bytes) {
     34c:	b580      	push	{r7, lr}
     34e:	b084      	sub	sp, #16
     350:	af00      	add	r7, sp, #0
     352:	6078      	str	r0, [r7, #4]
    void *ptr = malloc(num_bytes);
     354:	2100      	movs	r1, #0
     356:	6878      	ldr	r0, [r7, #4]
     358:	f000 fb20 	bl	99c <gc_alloc>
     35c:	60f8      	str	r0, [r7, #12]
    MP_STATE_MEM(total_bytes_allocated) += num_bytes;
    MP_STATE_MEM(current_bytes_allocated) += num_bytes;
    UPDATE_PEAK();
#endif
    DEBUG_printf("malloc %d : %p\n", num_bytes, ptr);
    return ptr;
     35e:	68fb      	ldr	r3, [r7, #12]
}
     360:	4618      	mov	r0, r3
     362:	3710      	adds	r7, #16
     364:	46bd      	mov	sp, r7
     366:	bd80      	pop	{r7, pc}

00000368 <m_malloc_with_finaliser>:

#if MICROPY_ENABLE_FINALISER
void *m_malloc_with_finaliser(size_t num_bytes) {
     368:	b580      	push	{r7, lr}
     36a:	b084      	sub	sp, #16
     36c:	af00      	add	r7, sp, #0
     36e:	6078      	str	r0, [r7, #4]
    void *ptr = malloc_with_finaliser(num_bytes);
     370:	2101      	movs	r1, #1
     372:	6878      	ldr	r0, [r7, #4]
     374:	f000 fb12 	bl	99c <gc_alloc>
     378:	60f8      	str	r0, [r7, #12]
    if (ptr == NULL && num_bytes != 0) {
     37a:	68fb      	ldr	r3, [r7, #12]
     37c:	2b00      	cmp	r3, #0
     37e:	d105      	bne.n	38c <m_malloc_with_finaliser+0x24>
     380:	687b      	ldr	r3, [r7, #4]
     382:	2b00      	cmp	r3, #0
     384:	d002      	beq.n	38c <m_malloc_with_finaliser+0x24>
        m_malloc_fail(num_bytes);
     386:	6878      	ldr	r0, [r7, #4]
     388:	f00c fef6 	bl	d178 <m_malloc_fail>
    MP_STATE_MEM(total_bytes_allocated) += num_bytes;
    MP_STATE_MEM(current_bytes_allocated) += num_bytes;
    UPDATE_PEAK();
#endif
    DEBUG_printf("malloc %d : %p\n", num_bytes, ptr);
    return ptr;
     38c:	68fb      	ldr	r3, [r7, #12]
}
     38e:	4618      	mov	r0, r3
     390:	3710      	adds	r7, #16
     392:	46bd      	mov	sp, r7
     394:	bd80      	pop	{r7, pc}
     396:	bf00      	nop

00000398 <m_malloc0>:
#endif

void *m_malloc0(size_t num_bytes) {
     398:	b580      	push	{r7, lr}
     39a:	b084      	sub	sp, #16
     39c:	af00      	add	r7, sp, #0
     39e:	6078      	str	r0, [r7, #4]
    void *ptr = m_malloc(num_bytes);
     3a0:	6878      	ldr	r0, [r7, #4]
     3a2:	f7ff ffbb 	bl	31c <m_malloc>
     3a6:	60f8      	str	r0, [r7, #12]
    // If this config is set then the GC clears all memory, so we don't need to.
    #if !MICROPY_GC_CONSERVATIVE_CLEAR
    memset(ptr, 0, num_bytes);
    #endif
    return ptr;
     3a8:	68fb      	ldr	r3, [r7, #12]
}
     3aa:	4618      	mov	r0, r3
     3ac:	3710      	adds	r7, #16
     3ae:	46bd      	mov	sp, r7
     3b0:	bd80      	pop	{r7, pc}
     3b2:	bf00      	nop

000003b4 <m_realloc>:

#if MICROPY_MALLOC_USES_ALLOCATED_SIZE
void *m_realloc(void *ptr, size_t old_num_bytes, size_t new_num_bytes) {
#else
void *m_realloc(void *ptr, size_t new_num_bytes) {
     3b4:	b580      	push	{r7, lr}
     3b6:	b084      	sub	sp, #16
     3b8:	af00      	add	r7, sp, #0
     3ba:	6078      	str	r0, [r7, #4]
     3bc:	6039      	str	r1, [r7, #0]
#endif
    void *new_ptr = realloc(ptr, new_num_bytes);
     3be:	2201      	movs	r2, #1
     3c0:	6839      	ldr	r1, [r7, #0]
     3c2:	6878      	ldr	r0, [r7, #4]
     3c4:	f000 fbfa 	bl	bbc <gc_realloc>
     3c8:	60f8      	str	r0, [r7, #12]
    if (new_ptr == NULL && new_num_bytes != 0) {
     3ca:	68fb      	ldr	r3, [r7, #12]
     3cc:	2b00      	cmp	r3, #0
     3ce:	d105      	bne.n	3dc <m_realloc+0x28>
     3d0:	683b      	ldr	r3, [r7, #0]
     3d2:	2b00      	cmp	r3, #0
     3d4:	d002      	beq.n	3dc <m_realloc+0x28>
        m_malloc_fail(new_num_bytes);
     3d6:	6838      	ldr	r0, [r7, #0]
     3d8:	f00c fece 	bl	d178 <m_malloc_fail>
    #if MICROPY_MALLOC_USES_ALLOCATED_SIZE
    DEBUG_printf("realloc %p, %d, %d : %p\n", ptr, old_num_bytes, new_num_bytes, new_ptr);
    #else
    DEBUG_printf("realloc %p, %d : %p\n", ptr, new_num_bytes, new_ptr);
    #endif
    return new_ptr;
     3dc:	68fb      	ldr	r3, [r7, #12]
}
     3de:	4618      	mov	r0, r3
     3e0:	3710      	adds	r7, #16
     3e2:	46bd      	mov	sp, r7
     3e4:	bd80      	pop	{r7, pc}
     3e6:	bf00      	nop

000003e8 <m_realloc_maybe>:

#if MICROPY_MALLOC_USES_ALLOCATED_SIZE
void *m_realloc_maybe(void *ptr, size_t old_num_bytes, size_t new_num_bytes, bool allow_move) {
#else
void *m_realloc_maybe(void *ptr, size_t new_num_bytes, bool allow_move) {
     3e8:	b580      	push	{r7, lr}
     3ea:	b086      	sub	sp, #24
     3ec:	af00      	add	r7, sp, #0
     3ee:	60f8      	str	r0, [r7, #12]
     3f0:	60b9      	str	r1, [r7, #8]
     3f2:	4613      	mov	r3, r2
     3f4:	71fb      	strb	r3, [r7, #7]
#endif
    void *new_ptr = realloc_ext(ptr, new_num_bytes, allow_move);
     3f6:	79fb      	ldrb	r3, [r7, #7]
     3f8:	461a      	mov	r2, r3
     3fa:	68b9      	ldr	r1, [r7, #8]
     3fc:	68f8      	ldr	r0, [r7, #12]
     3fe:	f000 fbdd 	bl	bbc <gc_realloc>
     402:	6178      	str	r0, [r7, #20]
    #if MICROPY_MALLOC_USES_ALLOCATED_SIZE
    DEBUG_printf("realloc %p, %d, %d : %p\n", ptr, old_num_bytes, new_num_bytes, new_ptr);
    #else
    DEBUG_printf("realloc %p, %d, %d : %p\n", ptr, new_num_bytes, new_ptr);
    #endif
    return new_ptr;
     404:	697b      	ldr	r3, [r7, #20]
}
     406:	4618      	mov	r0, r3
     408:	3718      	adds	r7, #24
     40a:	46bd      	mov	sp, r7
     40c:	bd80      	pop	{r7, pc}
     40e:	bf00      	nop

00000410 <m_free>:

#if MICROPY_MALLOC_USES_ALLOCATED_SIZE
void m_free(void *ptr, size_t num_bytes) {
#else
void m_free(void *ptr) {
     410:	b580      	push	{r7, lr}
     412:	b082      	sub	sp, #8
     414:	af00      	add	r7, sp, #0
     416:	6078      	str	r0, [r7, #4]
#endif
    free(ptr);
     418:	6878      	ldr	r0, [r7, #4]
     41a:	f000 fb91 	bl	b40 <gc_free>
    #if MICROPY_MALLOC_USES_ALLOCATED_SIZE
    DEBUG_printf("free %p, %d\n", ptr, num_bytes);
    #else
    DEBUG_printf("free %p\n", ptr);
    #endif
}
     41e:	bf00      	nop
     420:	3708      	adds	r7, #8
     422:	46bd      	mov	sp, r7
     424:	bd80      	pop	{r7, pc}
     426:	bf00      	nop

00000428 <gc_mark_subtree>:

// Take the given block as the topmost block on the stack. Check all it's
// children: mark the unmarked child blocks and put those newly marked
// blocks on the stack. When all children have been checked, pop off the
// topmost block on the stack and repeat with that one.
STATIC void gc_mark_subtree(size_t block) {
     428:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     42c:	4c2b      	ldr	r4, [pc, #172]	; (4dc <gc_mark_subtree+0xb4>)
    // Start with the block passed in the argument.
    size_t sp = 0;
     42e:	2500      	movs	r5, #0

        // check this block's children
        void **ptrs = (void**)PTR_FROM_BLOCK(block);
        for (size_t i = n_blocks * BYTES_PER_BLOCK / sizeof(void*); i > 0; i--, ptrs++) {
            void *ptr = *ptrs;
            if (VERIFY_PTR(ptr)) {
     430:	4626      	mov	r6, r4
                // Mark and push this pointer
                size_t childblock = BLOCK_FROM_PTR(ptr);
                if (ATB_GET_KIND(childblock) == AT_HEAD) {
                    // an unmarked head, mark it, and push it on gc stack
                    TRACE_MARK(childblock, ptr);
                    ATB_HEAD_TO_MARK(childblock);
     432:	f04f 0a03 	mov.w	sl, #3
     436:	f8d4 e0b4 	ldr.w	lr, [r4, #180]	; 0xb4
        size_t n_blocks = 0;
     43a:	2100      	movs	r1, #0
            n_blocks += 1;
     43c:	3101      	adds	r1, #1
     43e:	1843      	adds	r3, r0, r1
        } while (ATB_GET_KIND(block + n_blocks) == AT_TAIL);
     440:	089a      	lsrs	r2, r3, #2
     442:	f003 0303 	and.w	r3, r3, #3
     446:	f81e 2002 	ldrb.w	r2, [lr, r2]
     44a:	005b      	lsls	r3, r3, #1
     44c:	fa42 f303 	asr.w	r3, r2, r3
     450:	f003 0303 	and.w	r3, r3, #3
     454:	2b02      	cmp	r3, #2
     456:	d0f1      	beq.n	43c <gc_mark_subtree+0x14>
        void **ptrs = (void**)PTR_FROM_BLOCK(block);
     458:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
        for (size_t i = n_blocks * BYTES_PER_BLOCK / sizeof(void*); i > 0; i--, ptrs++) {
     45c:	0109      	lsls	r1, r1, #4
     45e:	088a      	lsrs	r2, r1, #2
        void **ptrs = (void**)PTR_FROM_BLOCK(block);
     460:	eb03 1000 	add.w	r0, r3, r0, lsl #4
        for (size_t i = n_blocks * BYTES_PER_BLOCK / sizeof(void*); i > 0; i--, ptrs++) {
     464:	b301      	cbz	r1, 4a8 <gc_mark_subtree+0x80>
     466:	3804      	subs	r0, #4
            void *ptr = *ptrs;
     468:	f850 1f04 	ldr.w	r1, [r0, #4]!
            if (VERIFY_PTR(ptr)) {
     46c:	070b      	lsls	r3, r1, #28
     46e:	d119      	bne.n	4a4 <gc_mark_subtree+0x7c>
     470:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
     474:	4299      	cmp	r1, r3
     476:	d315      	bcc.n	4a4 <gc_mark_subtree+0x7c>
                size_t childblock = BLOCK_FROM_PTR(ptr);
     478:	1acb      	subs	r3, r1, r3
            if (VERIFY_PTR(ptr)) {
     47a:	f8d6 70c4 	ldr.w	r7, [r6, #196]	; 0xc4
                if (ATB_GET_KIND(childblock) == AT_HEAD) {
     47e:	ea4f 1c93 	mov.w	ip, r3, lsr #6
                size_t childblock = BLOCK_FROM_PTR(ptr);
     482:	091b      	lsrs	r3, r3, #4
                if (ATB_GET_KIND(childblock) == AT_HEAD) {
     484:	f003 0e03 	and.w	lr, r3, #3
            if (VERIFY_PTR(ptr)) {
     488:	42b9      	cmp	r1, r7
                if (ATB_GET_KIND(childblock) == AT_HEAD) {
     48a:	ea4f 0e4e 	mov.w	lr, lr, lsl #1
            if (VERIFY_PTR(ptr)) {
     48e:	d209      	bcs.n	4a4 <gc_mark_subtree+0x7c>
                if (ATB_GET_KIND(childblock) == AT_HEAD) {
     490:	f8d6 90b4 	ldr.w	r9, [r6, #180]	; 0xb4
     494:	f819 800c 	ldrb.w	r8, [r9, ip]
     498:	fa48 f10e 	asr.w	r1, r8, lr
     49c:	f001 0103 	and.w	r1, r1, #3
     4a0:	2901      	cmp	r1, #1
     4a2:	d008      	beq.n	4b6 <gc_mark_subtree+0x8e>
        for (size_t i = n_blocks * BYTES_PER_BLOCK / sizeof(void*); i > 0; i--, ptrs++) {
     4a4:	3a01      	subs	r2, #1
     4a6:	d1df      	bne.n	468 <gc_mark_subtree+0x40>
                }
            }
        }

        // Are there any blocks on the stack?
        if (sp == 0) {
     4a8:	b1ad      	cbz	r5, 4d6 <gc_mark_subtree+0xae>
            break; // No, stack is empty, we're done.
        }

        // pop the next block off the stack
        block = MP_STATE_MEM(gc_stack)[--sp];
     4aa:	3d01      	subs	r5, #1
     4ac:	eb04 0385 	add.w	r3, r4, r5, lsl #2
     4b0:	f8d3 00cc 	ldr.w	r0, [r3, #204]	; 0xcc
    }
     4b4:	e7bf      	b.n	436 <gc_mark_subtree+0xe>
                    ATB_HEAD_TO_MARK(childblock);
     4b6:	fa0a fe0e 	lsl.w	lr, sl, lr
     4ba:	ea4e 0e08 	orr.w	lr, lr, r8
                        MP_STATE_MEM(gc_stack)[sp++] = childblock;
     4be:	eb06 0885 	add.w	r8, r6, r5, lsl #2
                    if (sp < MICROPY_ALLOC_GC_STACK_SIZE) {
     4c2:	2d3f      	cmp	r5, #63	; 0x3f
                    ATB_HEAD_TO_MARK(childblock);
     4c4:	f809 e00c 	strb.w	lr, [r9, ip]
                        MP_STATE_MEM(gc_stack)[sp++] = childblock;
     4c8:	bf9a      	itte	ls
     4ca:	3501      	addls	r5, #1
     4cc:	f8c8 30cc 	strls.w	r3, [r8, #204]	; 0xcc
                        MP_STATE_MEM(gc_stack_overflow) = 1;
     4d0:	f8c6 10c8 	strhi.w	r1, [r6, #200]	; 0xc8
     4d4:	e7e6      	b.n	4a4 <gc_mark_subtree+0x7c>
     4d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     4da:	bf00      	nop
     4dc:	200012f0 	.word	0x200012f0

000004e0 <gc_free.part.0>:
}
*/

// force the freeing of a piece of memory
// TODO: freeing here does not call finaliser
void gc_free(void *ptr) {
     4e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

    if (ptr == NULL) {
        GC_EXIT();
    } else {
        // get the GC block number corresponding to this pointer
        assert(VERIFY_PTR(ptr));
     4e2:	0703      	lsls	r3, r0, #28
     4e4:	d141      	bne.n	56a <gc_free.part.0+0x8a>
     4e6:	4e28      	ldr	r6, [pc, #160]	; (588 <gc_free.part.0+0xa8>)
     4e8:	f8d6 30c0 	ldr.w	r3, [r6, #192]	; 0xc0
     4ec:	4298      	cmp	r0, r3
     4ee:	d33c      	bcc.n	56a <gc_free.part.0+0x8a>
     4f0:	f8d6 20c4 	ldr.w	r2, [r6, #196]	; 0xc4
     4f4:	4290      	cmp	r0, r2
     4f6:	d238      	bcs.n	56a <gc_free.part.0+0x8a>
        size_t block = BLOCK_FROM_PTR(ptr);
     4f8:	1ac0      	subs	r0, r0, r3
        assert(ATB_GET_KIND(block) == AT_HEAD);
     4fa:	0985      	lsrs	r5, r0, #6
     4fc:	f8d6 20b4 	ldr.w	r2, [r6, #180]	; 0xb4
        size_t block = BLOCK_FROM_PTR(ptr);
     500:	0904      	lsrs	r4, r0, #4
        assert(ATB_GET_KIND(block) == AT_HEAD);
     502:	f004 0303 	and.w	r3, r4, #3
     506:	5d52      	ldrb	r2, [r2, r5]
     508:	0059      	lsls	r1, r3, #1
     50a:	410a      	asrs	r2, r1
     50c:	f002 0203 	and.w	r2, r2, #3
     510:	2a01      	cmp	r2, #1
     512:	d131      	bne.n	578 <gc_free.part.0+0x98>

        #if MICROPY_ENABLE_FINALISER
        FTB_CLEAR(block);
     514:	09c0      	lsrs	r0, r0, #7
     516:	f8d6 70bc 	ldr.w	r7, [r6, #188]	; 0xbc
     51a:	f004 0e07 	and.w	lr, r4, #7
     51e:	5c39      	ldrb	r1, [r7, r0]
     520:	fa02 f20e 	lsl.w	r2, r2, lr
     524:	ea21 0202 	bic.w	r2, r1, r2
     528:	543a      	strb	r2, [r7, r0]
        #endif

        // set the last_free pointer to this block if it's earlier in the heap
        if (block / BLOCKS_PER_ATB < MP_STATE_MEM(gc_last_free_atb_index)) {
     52a:	f8d6 21d8 	ldr.w	r2, [r6, #472]	; 0x1d8
     52e:	4295      	cmp	r5, r2
            MP_STATE_MEM(gc_last_free_atb_index) = block / BLOCKS_PER_ATB;
     530:	bf38      	it	cc
     532:	f8c6 51d8 	strcc.w	r5, [r6, #472]	; 0x1d8
     536:	08a0      	lsrs	r0, r4, #2
     538:	f8d6 50b4 	ldr.w	r5, [r6, #180]	; 0xb4
     53c:	5c29      	ldrb	r1, [r5, r0]
        }

        // free head and all of its tail blocks
        do {
            ATB_ANY_TO_FREE(block);
     53e:	2703      	movs	r7, #3
     540:	005b      	lsls	r3, r3, #1
     542:	fa07 f303 	lsl.w	r3, r7, r3
     546:	ea21 0103 	bic.w	r1, r1, r3
     54a:	5429      	strb	r1, [r5, r0]
            block += 1;
     54c:	3401      	adds	r4, #1
        } while (ATB_GET_KIND(block) == AT_TAIL);
     54e:	f8d6 50b4 	ldr.w	r5, [r6, #180]	; 0xb4
     552:	08a0      	lsrs	r0, r4, #2
     554:	f004 0303 	and.w	r3, r4, #3
     558:	5c29      	ldrb	r1, [r5, r0]
     55a:	005a      	lsls	r2, r3, #1
     55c:	fa41 f202 	asr.w	r2, r1, r2
     560:	f002 0203 	and.w	r2, r2, #3
     564:	2a02      	cmp	r2, #2
     566:	d0eb      	beq.n	540 <gc_free.part.0+0x60>

        #if EXTENSIVE_HEAP_PROFILING
        gc_dump_alloc_table();
        #endif
    }
}
     568:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        assert(VERIFY_PTR(ptr));
     56a:	4b08      	ldr	r3, [pc, #32]	; (58c <gc_free.part.0+0xac>)
     56c:	4a08      	ldr	r2, [pc, #32]	; (590 <gc_free.part.0+0xb0>)
     56e:	4809      	ldr	r0, [pc, #36]	; (594 <gc_free.part.0+0xb4>)
     570:	f240 213d 	movw	r1, #573	; 0x23d
     574:	f01b f8ac 	bl	1b6d0 <__assert_func>
        assert(ATB_GET_KIND(block) == AT_HEAD);
     578:	4b07      	ldr	r3, [pc, #28]	; (598 <gc_free.part.0+0xb8>)
     57a:	4a05      	ldr	r2, [pc, #20]	; (590 <gc_free.part.0+0xb0>)
     57c:	4805      	ldr	r0, [pc, #20]	; (594 <gc_free.part.0+0xb4>)
     57e:	f240 213f 	movw	r1, #575	; 0x23f
     582:	f01b f8a5 	bl	1b6d0 <__assert_func>
     586:	bf00      	nop
     588:	200012f0 	.word	0x200012f0
     58c:	0001de50 	.word	0x0001de50
     590:	0001de34 	.word	0x0001de34
     594:	0001de60 	.word	0x0001de60
     598:	0001de70 	.word	0x0001de70

0000059c <gc_init>:
    end = (void*)((uintptr_t)end & (~(BYTES_PER_BLOCK - 1)));
     59c:	f021 010f 	bic.w	r1, r1, #15
void gc_init(void *start, void *end) {
     5a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    MP_STATE_MEM(gc_alloc_table_byte_len) = total_byte_len * BITS_PER_BYTE / (BITS_PER_BYTE + BITS_PER_BYTE * BLOCKS_PER_ATB / BLOCKS_PER_FTB + BITS_PER_BYTE * BLOCKS_PER_ATB * BYTES_PER_BLOCK);
     5a2:	1a0a      	subs	r2, r1, r0
     5a4:	4d1b      	ldr	r5, [pc, #108]	; (614 <gc_init+0x78>)
     5a6:	4c1c      	ldr	r4, [pc, #112]	; (618 <gc_init+0x7c>)
     5a8:	00d2      	lsls	r2, r2, #3
     5aa:	fba5 5202 	umull	r5, r2, r5, r2
     5ae:	0a52      	lsrs	r2, r2, #9
    size_t gc_finaliser_table_byte_len = (MP_STATE_MEM(gc_alloc_table_byte_len) * BLOCKS_PER_ATB + BLOCKS_PER_FTB - 1) / BLOCKS_PER_FTB;
     5b0:	0095      	lsls	r5, r2, #2
     5b2:	3507      	adds	r5, #7
    MP_STATE_MEM(gc_finaliser_table_start) = MP_STATE_MEM(gc_alloc_table_start) + MP_STATE_MEM(gc_alloc_table_byte_len);
     5b4:	1887      	adds	r7, r0, r2
    size_t gc_finaliser_table_byte_len = (MP_STATE_MEM(gc_alloc_table_byte_len) * BLOCKS_PER_ATB + BLOCKS_PER_FTB - 1) / BLOCKS_PER_FTB;
     5b6:	08ed      	lsrs	r5, r5, #3
    MP_STATE_MEM(gc_pool_start) = (byte*)end - gc_pool_block_len * BYTES_PER_BLOCK;
     5b8:	eba1 1682 	sub.w	r6, r1, r2, lsl #6
    assert(MP_STATE_MEM(gc_pool_start) >= MP_STATE_MEM(gc_finaliser_table_start) + gc_finaliser_table_byte_len);
     5bc:	eb07 0e05 	add.w	lr, r7, r5
     5c0:	4576      	cmp	r6, lr
    MP_STATE_MEM(gc_finaliser_table_start) = MP_STATE_MEM(gc_alloc_table_start) + MP_STATE_MEM(gc_alloc_table_byte_len);
     5c2:	f8c4 70bc 	str.w	r7, [r4, #188]	; 0xbc
    MP_STATE_MEM(gc_alloc_table_byte_len) = total_byte_len * BITS_PER_BYTE / (BITS_PER_BYTE + BITS_PER_BYTE * BLOCKS_PER_ATB / BLOCKS_PER_FTB + BITS_PER_BYTE * BLOCKS_PER_ATB * BYTES_PER_BLOCK);
     5c6:	f8c4 20b8 	str.w	r2, [r4, #184]	; 0xb8
    MP_STATE_MEM(gc_alloc_table_start) = (byte*)start;
     5ca:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
    MP_STATE_MEM(gc_pool_end) = end;
     5ce:	f8c4 10c4 	str.w	r1, [r4, #196]	; 0xc4
    MP_STATE_MEM(gc_pool_start) = (byte*)end - gc_pool_block_len * BYTES_PER_BLOCK;
     5d2:	f8c4 60c0 	str.w	r6, [r4, #192]	; 0xc0
    assert(MP_STATE_MEM(gc_pool_start) >= MP_STATE_MEM(gc_finaliser_table_start) + gc_finaliser_table_byte_len);
     5d6:	d317      	bcc.n	608 <gc_init+0x6c>
    memset(MP_STATE_MEM(gc_alloc_table_start), 0, MP_STATE_MEM(gc_alloc_table_byte_len));
     5d8:	2100      	movs	r1, #0
     5da:	f01c fbe9 	bl	1cdb0 <memset>
    memset(MP_STATE_MEM(gc_finaliser_table_start), 0, gc_finaliser_table_byte_len);
     5de:	462a      	mov	r2, r5
     5e0:	2100      	movs	r1, #0
     5e2:	f8d4 00bc 	ldr.w	r0, [r4, #188]	; 0xbc
     5e6:	f01c fbe3 	bl	1cdb0 <memset>
    MP_STATE_MEM(gc_last_free_atb_index) = 0;
     5ea:	2300      	movs	r3, #0
    MP_STATE_MEM(gc_auto_collect_enabled) = 1;
     5ec:	2101      	movs	r1, #1
    MP_STATE_MEM(gc_alloc_threshold) = (size_t)-1;
     5ee:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    MP_STATE_MEM(gc_last_free_atb_index) = 0;
     5f2:	f8c4 31d8 	str.w	r3, [r4, #472]	; 0x1d8
    MP_STATE_MEM(gc_lock_depth) = 0;
     5f6:	f8a4 31cc 	strh.w	r3, [r4, #460]	; 0x1cc
    MP_STATE_MEM(gc_alloc_amount) = 0;
     5fa:	f8c4 31d0 	str.w	r3, [r4, #464]	; 0x1d0
    MP_STATE_MEM(gc_auto_collect_enabled) = 1;
     5fe:	f8a4 11ce 	strh.w	r1, [r4, #462]	; 0x1ce
    MP_STATE_MEM(gc_alloc_threshold) = (size_t)-1;
     602:	f8c4 21d4 	str.w	r2, [r4, #468]	; 0x1d4
     606:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    assert(MP_STATE_MEM(gc_pool_start) >= MP_STATE_MEM(gc_finaliser_table_start) + gc_finaliser_table_byte_len);
     608:	4b04      	ldr	r3, [pc, #16]	; (61c <gc_init+0x80>)
     60a:	4a05      	ldr	r2, [pc, #20]	; (620 <gc_init+0x84>)
     60c:	4805      	ldr	r0, [pc, #20]	; (624 <gc_init+0x88>)
     60e:	2189      	movs	r1, #137	; 0x89
     610:	f01b f85e 	bl	1b6d0 <__assert_func>
     614:	fa232cf3 	.word	0xfa232cf3
     618:	200012f0 	.word	0x200012f0
     61c:	0001de90 	.word	0x0001de90
     620:	0001de3c 	.word	0x0001de3c
     624:	0001de60 	.word	0x0001de60

00000628 <gc_lock>:
    MP_STATE_MEM(gc_lock_depth)++;
     628:	4a03      	ldr	r2, [pc, #12]	; (638 <gc_lock+0x10>)
     62a:	f8b2 31cc 	ldrh.w	r3, [r2, #460]	; 0x1cc
     62e:	3301      	adds	r3, #1
     630:	f8a2 31cc 	strh.w	r3, [r2, #460]	; 0x1cc
     634:	4770      	bx	lr
     636:	bf00      	nop
     638:	200012f0 	.word	0x200012f0

0000063c <gc_unlock>:
    MP_STATE_MEM(gc_lock_depth)--;
     63c:	4a03      	ldr	r2, [pc, #12]	; (64c <gc_unlock+0x10>)
     63e:	f8b2 31cc 	ldrh.w	r3, [r2, #460]	; 0x1cc
     642:	3b01      	subs	r3, #1
     644:	f8a2 31cc 	strh.w	r3, [r2, #460]	; 0x1cc
     648:	4770      	bx	lr
     64a:	bf00      	nop
     64c:	200012f0 	.word	0x200012f0

00000650 <gc_is_locked>:
    return MP_STATE_MEM(gc_lock_depth) != 0;
     650:	4b03      	ldr	r3, [pc, #12]	; (660 <gc_is_locked+0x10>)
     652:	f8b3 01cc 	ldrh.w	r0, [r3, #460]	; 0x1cc
}
     656:	3000      	adds	r0, #0
     658:	bf18      	it	ne
     65a:	2001      	movne	r0, #1
     65c:	4770      	bx	lr
     65e:	bf00      	nop
     660:	200012f0 	.word	0x200012f0

00000664 <gc_collect_start>:
void gc_collect_start(void) {
     664:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    MP_STATE_MEM(gc_lock_depth)++;
     668:	4d1d      	ldr	r5, [pc, #116]	; (6e0 <gc_collect_start+0x7c>)
     66a:	f8b5 31cc 	ldrh.w	r3, [r5, #460]	; 0x1cc
    MP_STATE_MEM(gc_alloc_amount) = 0;
     66e:	2200      	movs	r2, #0
    MP_STATE_MEM(gc_lock_depth)++;
     670:	3301      	adds	r3, #1
     672:	f8a5 31cc 	strh.w	r3, [r5, #460]	; 0x1cc
    MP_STATE_MEM(gc_alloc_amount) = 0;
     676:	f8c5 21d0 	str.w	r2, [r5, #464]	; 0x1d0
    MP_STATE_MEM(gc_stack_overflow) = 0;
     67a:	f8c5 20c8 	str.w	r2, [r5, #200]	; 0xc8
     67e:	1f2c      	subs	r4, r5, #4
     680:	f105 06a0 	add.w	r6, r5, #160	; 0xa0
        if (VERIFY_PTR(ptr)) {
     684:	462f      	mov	r7, r5
                ATB_HEAD_TO_MARK(block);
     686:	f04f 0803 	mov.w	r8, #3
        void *ptr = ptrs[i];
     68a:	f854 3f04 	ldr.w	r3, [r4, #4]!
        if (VERIFY_PTR(ptr)) {
     68e:	071a      	lsls	r2, r3, #28
     690:	d119      	bne.n	6c6 <gc_collect_start+0x62>
     692:	f8d5 00c0 	ldr.w	r0, [r5, #192]	; 0xc0
     696:	4283      	cmp	r3, r0
     698:	d315      	bcc.n	6c6 <gc_collect_start+0x62>
            size_t block = BLOCK_FROM_PTR(ptr);
     69a:	1a18      	subs	r0, r3, r0
        if (VERIFY_PTR(ptr)) {
     69c:	f8d7 10c4 	ldr.w	r1, [r7, #196]	; 0xc4
            if (ATB_GET_KIND(block) == AT_HEAD) {
     6a0:	ea4f 1e90 	mov.w	lr, r0, lsr #6
            size_t block = BLOCK_FROM_PTR(ptr);
     6a4:	0900      	lsrs	r0, r0, #4
            if (ATB_GET_KIND(block) == AT_HEAD) {
     6a6:	f000 0203 	and.w	r2, r0, #3
        if (VERIFY_PTR(ptr)) {
     6aa:	428b      	cmp	r3, r1
            if (ATB_GET_KIND(block) == AT_HEAD) {
     6ac:	ea4f 0242 	mov.w	r2, r2, lsl #1
        if (VERIFY_PTR(ptr)) {
     6b0:	d209      	bcs.n	6c6 <gc_collect_start+0x62>
            if (ATB_GET_KIND(block) == AT_HEAD) {
     6b2:	f8d7 c0b4 	ldr.w	ip, [r7, #180]	; 0xb4
     6b6:	f81c 100e 	ldrb.w	r1, [ip, lr]
     6ba:	fa41 f302 	asr.w	r3, r1, r2
     6be:	f003 0303 	and.w	r3, r3, #3
     6c2:	2b01      	cmp	r3, #1
     6c4:	d003      	beq.n	6ce <gc_collect_start+0x6a>
    for (size_t i = 0; i < len; i++) {
     6c6:	42a6      	cmp	r6, r4
     6c8:	d1df      	bne.n	68a <gc_collect_start+0x26>
}
     6ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                ATB_HEAD_TO_MARK(block);
     6ce:	fa08 f202 	lsl.w	r2, r8, r2
     6d2:	430a      	orrs	r2, r1
     6d4:	f80c 200e 	strb.w	r2, [ip, lr]
                gc_mark_subtree(block);
     6d8:	f7ff fea6 	bl	428 <gc_mark_subtree>
     6dc:	e7f3      	b.n	6c6 <gc_collect_start+0x62>
     6de:	bf00      	nop
     6e0:	200012f0 	.word	0x200012f0

000006e4 <gc_collect_root>:
    for (size_t i = 0; i < len; i++) {
     6e4:	b399      	cbz	r1, 74e <gc_collect_root+0x6a>
void gc_collect_root(void **ptrs, size_t len) {
     6e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        if (VERIFY_PTR(ptr)) {
     6ea:	4f19      	ldr	r7, [pc, #100]	; (750 <gc_collect_root+0x6c>)
     6ec:	460e      	mov	r6, r1
     6ee:	1f05      	subs	r5, r0, #4
    for (size_t i = 0; i < len; i++) {
     6f0:	2400      	movs	r4, #0
                ATB_HEAD_TO_MARK(block);
     6f2:	f04f 0803 	mov.w	r8, #3
        void *ptr = ptrs[i];
     6f6:	f855 3f04 	ldr.w	r3, [r5, #4]!
        if (VERIFY_PTR(ptr)) {
     6fa:	071a      	lsls	r2, r3, #28
    for (size_t i = 0; i < len; i++) {
     6fc:	f104 0401 	add.w	r4, r4, #1
        if (VERIFY_PTR(ptr)) {
     700:	d119      	bne.n	736 <gc_collect_root+0x52>
     702:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
     706:	4283      	cmp	r3, r0
     708:	d315      	bcc.n	736 <gc_collect_root+0x52>
            size_t block = BLOCK_FROM_PTR(ptr);
     70a:	1a18      	subs	r0, r3, r0
        if (VERIFY_PTR(ptr)) {
     70c:	f8d7 10c4 	ldr.w	r1, [r7, #196]	; 0xc4
            if (ATB_GET_KIND(block) == AT_HEAD) {
     710:	ea4f 1e90 	mov.w	lr, r0, lsr #6
            size_t block = BLOCK_FROM_PTR(ptr);
     714:	0900      	lsrs	r0, r0, #4
            if (ATB_GET_KIND(block) == AT_HEAD) {
     716:	f000 0203 	and.w	r2, r0, #3
        if (VERIFY_PTR(ptr)) {
     71a:	428b      	cmp	r3, r1
            if (ATB_GET_KIND(block) == AT_HEAD) {
     71c:	ea4f 0242 	mov.w	r2, r2, lsl #1
        if (VERIFY_PTR(ptr)) {
     720:	d209      	bcs.n	736 <gc_collect_root+0x52>
            if (ATB_GET_KIND(block) == AT_HEAD) {
     722:	f8d7 c0b4 	ldr.w	ip, [r7, #180]	; 0xb4
     726:	f81c 100e 	ldrb.w	r1, [ip, lr]
     72a:	fa41 f302 	asr.w	r3, r1, r2
     72e:	f003 0303 	and.w	r3, r3, #3
     732:	2b01      	cmp	r3, #1
     734:	d003      	beq.n	73e <gc_collect_root+0x5a>
    for (size_t i = 0; i < len; i++) {
     736:	42a6      	cmp	r6, r4
     738:	d1dd      	bne.n	6f6 <gc_collect_root+0x12>
     73a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                ATB_HEAD_TO_MARK(block);
     73e:	fa08 f202 	lsl.w	r2, r8, r2
     742:	430a      	orrs	r2, r1
     744:	f80c 200e 	strb.w	r2, [ip, lr]
                gc_mark_subtree(block);
     748:	f7ff fe6e 	bl	428 <gc_mark_subtree>
     74c:	e7f3      	b.n	736 <gc_collect_root+0x52>
     74e:	4770      	bx	lr
     750:	200012f0 	.word	0x200012f0

00000754 <gc_collect_end>:
void gc_collect_end(void) {
     754:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     758:	4e50      	ldr	r6, [pc, #320]	; (89c <gc_collect_end+0x148>)
     75a:	f8d6 00b8 	ldr.w	r0, [r6, #184]	; 0xb8
     75e:	f8d6 30c8 	ldr.w	r3, [r6, #200]	; 0xc8
     762:	b083      	sub	sp, #12
     764:	0080      	lsls	r0, r0, #2
            if (ATB_GET_KIND(block) == AT_MARK) {
     766:	4634      	mov	r4, r6
        MP_STATE_MEM(gc_stack_overflow) = 0;
     768:	2500      	movs	r5, #0
    while (MP_STATE_MEM(gc_stack_overflow)) {
     76a:	b313      	cbz	r3, 7b2 <gc_collect_end+0x5e>
        MP_STATE_MEM(gc_stack_overflow) = 0;
     76c:	f8c6 50c8 	str.w	r5, [r6, #200]	; 0xc8
        for (size_t block = 0; block < MP_STATE_MEM(gc_alloc_table_byte_len) * BLOCKS_PER_ATB; block++) {
     770:	2800      	cmp	r0, #0
     772:	d042      	beq.n	7fa <gc_collect_end+0xa6>
     774:	2700      	movs	r7, #0
     776:	e002      	b.n	77e <gc_collect_end+0x2a>
     778:	3701      	adds	r7, #1
     77a:	4287      	cmp	r7, r0
     77c:	d215      	bcs.n	7aa <gc_collect_end+0x56>
            if (ATB_GET_KIND(block) == AT_MARK) {
     77e:	08ba      	lsrs	r2, r7, #2
     780:	f8d6 10b4 	ldr.w	r1, [r6, #180]	; 0xb4
     784:	f007 0303 	and.w	r3, r7, #3
     788:	5c8a      	ldrb	r2, [r1, r2]
     78a:	005b      	lsls	r3, r3, #1
     78c:	fa42 f303 	asr.w	r3, r2, r3
     790:	f003 0303 	and.w	r3, r3, #3
     794:	2b03      	cmp	r3, #3
     796:	d1ef      	bne.n	778 <gc_collect_end+0x24>
                gc_mark_subtree(block);
     798:	4638      	mov	r0, r7
     79a:	f7ff fe45 	bl	428 <gc_mark_subtree>
     79e:	f8d4 00b8 	ldr.w	r0, [r4, #184]	; 0xb8
        for (size_t block = 0; block < MP_STATE_MEM(gc_alloc_table_byte_len) * BLOCKS_PER_ATB; block++) {
     7a2:	3701      	adds	r7, #1
     7a4:	0080      	lsls	r0, r0, #2
     7a6:	4287      	cmp	r7, r0
     7a8:	d3e9      	bcc.n	77e <gc_collect_end+0x2a>
     7aa:	f8d6 30c8 	ldr.w	r3, [r6, #200]	; 0xc8
    while (MP_STATE_MEM(gc_stack_overflow)) {
     7ae:	2b00      	cmp	r3, #0
     7b0:	d1dc      	bne.n	76c <gc_collect_end+0x18>
    for (size_t block = 0; block < MP_STATE_MEM(gc_alloc_table_byte_len) * BLOCKS_PER_ATB; block++) {
     7b2:	b310      	cbz	r0, 7fa <gc_collect_end+0xa6>
     7b4:	469c      	mov	ip, r3
        switch (ATB_GET_KIND(block)) {
     7b6:	f8df 80e4 	ldr.w	r8, [pc, #228]	; 89c <gc_collect_end+0x148>
    for (size_t block = 0; block < MP_STATE_MEM(gc_alloc_table_byte_len) * BLOCKS_PER_ATB; block++) {
     7ba:	461d      	mov	r5, r3
                    ATB_ANY_TO_FREE(block);
     7bc:	f04f 0a03 	mov.w	sl, #3
     7c0:	e006      	b.n	7d0 <gc_collect_end+0x7c>
        switch (ATB_GET_KIND(block)) {
     7c2:	2b03      	cmp	r3, #3
     7c4:	d05d      	beq.n	882 <gc_collect_end+0x12e>
     7c6:	2b01      	cmp	r3, #1
     7c8:	d022      	beq.n	810 <gc_collect_end+0xbc>
    for (size_t block = 0; block < MP_STATE_MEM(gc_alloc_table_byte_len) * BLOCKS_PER_ATB; block++) {
     7ca:	3501      	adds	r5, #1
     7cc:	4285      	cmp	r5, r0
     7ce:	d214      	bcs.n	7fa <gc_collect_end+0xa6>
        switch (ATB_GET_KIND(block)) {
     7d0:	08af      	lsrs	r7, r5, #2
     7d2:	f8d6 20b4 	ldr.w	r2, [r6, #180]	; 0xb4
     7d6:	f005 0403 	and.w	r4, r5, #3
     7da:	5dd1      	ldrb	r1, [r2, r7]
     7dc:	0064      	lsls	r4, r4, #1
     7de:	fa41 f304 	asr.w	r3, r1, r4
     7e2:	f003 0303 	and.w	r3, r3, #3
     7e6:	2b02      	cmp	r3, #2
     7e8:	eb02 0e07 	add.w	lr, r2, r7
     7ec:	d1e9      	bne.n	7c2 <gc_collect_end+0x6e>
                if (free_tail) {
     7ee:	f1bc 0f00 	cmp.w	ip, #0
     7f2:	d13a      	bne.n	86a <gc_collect_end+0x116>
    for (size_t block = 0; block < MP_STATE_MEM(gc_alloc_table_byte_len) * BLOCKS_PER_ATB; block++) {
     7f4:	3501      	adds	r5, #1
     7f6:	4285      	cmp	r5, r0
     7f8:	d3ea      	bcc.n	7d0 <gc_collect_end+0x7c>
    MP_STATE_MEM(gc_lock_depth)--;
     7fa:	f8b6 31cc 	ldrh.w	r3, [r6, #460]	; 0x1cc
    MP_STATE_MEM(gc_last_free_atb_index) = 0;
     7fe:	2200      	movs	r2, #0
    MP_STATE_MEM(gc_lock_depth)--;
     800:	3b01      	subs	r3, #1
     802:	f8a6 31cc 	strh.w	r3, [r6, #460]	; 0x1cc
    MP_STATE_MEM(gc_last_free_atb_index) = 0;
     806:	f8c6 21d8 	str.w	r2, [r6, #472]	; 0x1d8
}
     80a:	b003      	add	sp, #12
     80c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                if (FTB_GET(block)) {
     810:	ea4f 0bd5 	mov.w	fp, r5, lsr #3
     814:	f8d8 20bc 	ldr.w	r2, [r8, #188]	; 0xbc
     818:	f812 c00b 	ldrb.w	ip, [r2, fp]
     81c:	f005 0907 	and.w	r9, r5, #7
     820:	fa4c f009 	asr.w	r0, ip, r9
     824:	07c3      	lsls	r3, r0, #31
     826:	445a      	add	r2, fp
     828:	d51f      	bpl.n	86a <gc_collect_end+0x116>
                    mp_obj_base_t *obj = (mp_obj_base_t*)PTR_FROM_BLOCK(block);
     82a:	0129      	lsls	r1, r5, #4
     82c:	f8d8 00c0 	ldr.w	r0, [r8, #192]	; 0xc0
                    if (obj->type != NULL) {
     830:	5843      	ldr	r3, [r0, r1]
                    mp_obj_base_t *obj = (mp_obj_base_t*)PTR_FROM_BLOCK(block);
     832:	4408      	add	r0, r1
                    if (obj->type != NULL) {
     834:	b16b      	cbz	r3, 852 <gc_collect_end+0xfe>
                        mp_load_method_maybe(MP_OBJ_FROM_PTR(obj), MP_QSTR___del__, dest);
     836:	466a      	mov	r2, sp
     838:	2108      	movs	r1, #8
     83a:	f00c f8af 	bl	c99c <mp_load_method_maybe>
                        if (dest[0] != MP_OBJ_NULL) {
     83e:	9800      	ldr	r0, [sp, #0]
     840:	b110      	cbz	r0, 848 <gc_collect_end+0xf4>
                            mp_call_function_1_protected(dest[0], dest[1]);
     842:	9901      	ldr	r1, [sp, #4]
     844:	f00c fcfc 	bl	d240 <mp_call_function_1_protected>
     848:	f8d6 20bc 	ldr.w	r2, [r6, #188]	; 0xbc
     84c:	f812 c00b 	ldrb.w	ip, [r2, fp]
     850:	445a      	add	r2, fp
                    FTB_CLEAR(block);
     852:	2301      	movs	r3, #1
     854:	fa03 f309 	lsl.w	r3, r3, r9
     858:	ea2c 0c03 	bic.w	ip, ip, r3
     85c:	f882 c000 	strb.w	ip, [r2]
     860:	f8d6 30b4 	ldr.w	r3, [r6, #180]	; 0xb4
     864:	5dd9      	ldrb	r1, [r3, r7]
     866:	eb03 0e07 	add.w	lr, r3, r7
                    ATB_ANY_TO_FREE(block);
     86a:	fa0a f404 	lsl.w	r4, sl, r4
     86e:	ea21 0104 	bic.w	r1, r1, r4
     872:	f88e 1000 	strb.w	r1, [lr]
     876:	f8d6 00b8 	ldr.w	r0, [r6, #184]	; 0xb8
     87a:	f04f 0c01 	mov.w	ip, #1
     87e:	0080      	lsls	r0, r0, #2
     880:	e7a3      	b.n	7ca <gc_collect_end+0x76>
                ATB_MARK_TO_HEAD(block);
     882:	2302      	movs	r3, #2
     884:	fa03 f404 	lsl.w	r4, r3, r4
     888:	ea21 0104 	bic.w	r1, r1, r4
     88c:	55d1      	strb	r1, [r2, r7]
     88e:	f8d8 00b8 	ldr.w	r0, [r8, #184]	; 0xb8
                free_tail = 0;
     892:	f04f 0c00 	mov.w	ip, #0
     896:	4098      	lsls	r0, r3
     898:	e797      	b.n	7ca <gc_collect_end+0x76>
     89a:	bf00      	nop
     89c:	200012f0 	.word	0x200012f0

000008a0 <gc_info>:
    info->total = MP_STATE_MEM(gc_pool_end) - MP_STATE_MEM(gc_pool_start);
     8a0:	4b3d      	ldr	r3, [pc, #244]	; (998 <gc_info+0xf8>)
     8a2:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
     8a6:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
void gc_info(gc_info_t *info) {
     8aa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        finish = (block == MP_STATE_MEM(gc_alloc_table_byte_len) * BLOCKS_PER_ATB);
     8ae:	f8d3 60b8 	ldr.w	r6, [r3, #184]	; 0xb8
     8b2:	f8d3 70b4 	ldr.w	r7, [r3, #180]	; 0xb4
    info->total = MP_STATE_MEM(gc_pool_end) - MP_STATE_MEM(gc_pool_start);
     8b6:	1a52      	subs	r2, r2, r1
    info->used = 0;
     8b8:	2300      	movs	r3, #0
    info->total = MP_STATE_MEM(gc_pool_end) - MP_STATE_MEM(gc_pool_start);
     8ba:	6002      	str	r2, [r0, #0]
        finish = (block == MP_STATE_MEM(gc_alloc_table_byte_len) * BLOCKS_PER_ATB);
     8bc:	461d      	mov	r5, r3
     8be:	00b6      	lsls	r6, r6, #2
    info->used = 0;
     8c0:	6043      	str	r3, [r0, #4]
    info->free = 0;
     8c2:	6083      	str	r3, [r0, #8]
    info->max_free = 0;
     8c4:	60c3      	str	r3, [r0, #12]
    info->num_1block = 0;
     8c6:	6103      	str	r3, [r0, #16]
    info->num_2block = 0;
     8c8:	6143      	str	r3, [r0, #20]
    info->max_block = 0;
     8ca:	6183      	str	r3, [r0, #24]
        finish = (block == MP_STATE_MEM(gc_alloc_table_byte_len) * BLOCKS_PER_ATB);
     8cc:	469c      	mov	ip, r3
    for (size_t block = 0, len = 0, len_free = 0; !finish;) {
     8ce:	469e      	mov	lr, r3
     8d0:	461c      	mov	r4, r3
     8d2:	461a      	mov	r2, r3
     8d4:	4699      	mov	r9, r3
     8d6:	4619      	mov	r1, r3
     8d8:	4698      	mov	r8, r3
        size_t kind = ATB_GET_KIND(block);
     8da:	f817 9009 	ldrb.w	r9, [r7, r9]
     8de:	004b      	lsls	r3, r1, #1
     8e0:	fa49 f303 	asr.w	r3, r9, r3
     8e4:	f003 0303 	and.w	r3, r3, #3
        switch (kind) {
     8e8:	2b01      	cmp	r3, #1
     8ea:	d030      	beq.n	94e <gc_info+0xae>
     8ec:	d327      	bcc.n	93e <gc_info+0x9e>
     8ee:	2b02      	cmp	r3, #2
     8f0:	d102      	bne.n	8f8 <gc_info+0x58>
                info->used += 1;
     8f2:	3501      	adds	r5, #1
     8f4:	6045      	str	r5, [r0, #4]
                len += 1;
     8f6:	3401      	adds	r4, #1
        block++;
     8f8:	3201      	adds	r2, #1
        if (!finish) {
     8fa:	42b2      	cmp	r2, r6
     8fc:	d00e      	beq.n	91c <gc_info+0x7c>
            kind = ATB_GET_KIND(block);
     8fe:	ea4f 0992 	mov.w	r9, r2, lsr #2
     902:	f002 0103 	and.w	r1, r2, #3
     906:	f817 3009 	ldrb.w	r3, [r7, r9]
     90a:	ea4f 0a41 	mov.w	sl, r1, lsl #1
     90e:	fa43 f30a 	asr.w	r3, r3, sl
        if (finish || kind == AT_FREE || kind == AT_HEAD) {
     912:	f013 0303 	ands.w	r3, r3, #3
     916:	d001      	beq.n	91c <gc_info+0x7c>
     918:	2b01      	cmp	r3, #1
     91a:	d1de      	bne.n	8da <gc_info+0x3a>
            if (len == 1) {
     91c:	2c01      	cmp	r4, #1
     91e:	d01a      	beq.n	956 <gc_info+0xb6>
            } else if (len == 2) {
     920:	2c02      	cmp	r4, #2
     922:	d02b      	beq.n	97c <gc_info+0xdc>
            if (len > info->max_block) {
     924:	6981      	ldr	r1, [r0, #24]
     926:	428c      	cmp	r4, r1
                info->max_block = len;
     928:	bf88      	it	hi
     92a:	6184      	strhi	r4, [r0, #24]
            if (finish || kind == AT_HEAD) {
     92c:	42b2      	cmp	r2, r6
     92e:	d01b      	beq.n	968 <gc_info+0xc8>
     930:	2b01      	cmp	r3, #1
     932:	d027      	beq.n	984 <gc_info+0xe4>
     934:	ea4f 0992 	mov.w	r9, r2, lsr #2
     938:	f002 0103 	and.w	r1, r2, #3
     93c:	e7cd      	b.n	8da <gc_info+0x3a>
                info->free += 1;
     93e:	f10c 0c01 	add.w	ip, ip, #1
     942:	f8c0 c008 	str.w	ip, [r0, #8]
                len_free += 1;
     946:	f10e 0e01 	add.w	lr, lr, #1
                len = 0;
     94a:	2400      	movs	r4, #0
                break;
     94c:	e7d4      	b.n	8f8 <gc_info+0x58>
                info->used += 1;
     94e:	3501      	adds	r5, #1
     950:	6045      	str	r5, [r0, #4]
                len = 1;
     952:	461c      	mov	r4, r3
                break;
     954:	e7d0      	b.n	8f8 <gc_info+0x58>
                info->num_1block += 1;
     956:	6901      	ldr	r1, [r0, #16]
     958:	3101      	adds	r1, #1
     95a:	6101      	str	r1, [r0, #16]
            if (len > info->max_block) {
     95c:	6981      	ldr	r1, [r0, #24]
     95e:	428c      	cmp	r4, r1
                info->max_block = len;
     960:	bf88      	it	hi
     962:	6184      	strhi	r4, [r0, #24]
            if (finish || kind == AT_HEAD) {
     964:	42b2      	cmp	r2, r6
     966:	d1e3      	bne.n	930 <gc_info+0x90>
                if (len_free > info->max_free) {
     968:	45c6      	cmp	lr, r8
     96a:	d90e      	bls.n	98a <gc_info+0xea>
    for (size_t block = 0, len = 0, len_free = 0; !finish;) {
     96c:	42b2      	cmp	r2, r6
                    info->max_free = len_free;
     96e:	f8c0 e00c 	str.w	lr, [r0, #12]
    for (size_t block = 0, len = 0, len_free = 0; !finish;) {
     972:	d00a      	beq.n	98a <gc_info+0xea>
     974:	46f0      	mov	r8, lr
                len_free = 0;
     976:	f04f 0e00 	mov.w	lr, #0
     97a:	e7db      	b.n	934 <gc_info+0x94>
                info->num_2block += 1;
     97c:	6941      	ldr	r1, [r0, #20]
     97e:	3101      	adds	r1, #1
     980:	6141      	str	r1, [r0, #20]
     982:	e7cf      	b.n	924 <gc_info+0x84>
                if (len_free > info->max_free) {
     984:	45f0      	cmp	r8, lr
     986:	d2f6      	bcs.n	976 <gc_info+0xd6>
     988:	e7f0      	b.n	96c <gc_info+0xcc>
    info->used *= BYTES_PER_BLOCK;
     98a:	012d      	lsls	r5, r5, #4
    info->free *= BYTES_PER_BLOCK;
     98c:	ea4f 130c 	mov.w	r3, ip, lsl #4
    info->used *= BYTES_PER_BLOCK;
     990:	6045      	str	r5, [r0, #4]
    info->free *= BYTES_PER_BLOCK;
     992:	6083      	str	r3, [r0, #8]
}
     994:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     998:	200012f0 	.word	0x200012f0

0000099c <gc_alloc>:
void *gc_alloc(size_t n_bytes, bool has_finaliser) {
     99c:	300f      	adds	r0, #15
     99e:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if (n_blocks == 0) {
     9a2:	0907      	lsrs	r7, r0, #4
     9a4:	f000 80c6 	beq.w	b34 <gc_alloc+0x198>
    if (MP_STATE_MEM(gc_lock_depth) > 0) {
     9a8:	4e64      	ldr	r6, [pc, #400]	; (b3c <gc_alloc+0x1a0>)
     9aa:	f8b6 31cc 	ldrh.w	r3, [r6, #460]	; 0x1cc
     9ae:	2b00      	cmp	r3, #0
     9b0:	f040 80c0 	bne.w	b34 <gc_alloc+0x198>
    int collected = !MP_STATE_MEM(gc_auto_collect_enabled);
     9b4:	f8b6 31ce 	ldrh.w	r3, [r6, #462]	; 0x1ce
     9b8:	2b00      	cmp	r3, #0
     9ba:	460d      	mov	r5, r1
     9bc:	bf0c      	ite	eq
     9be:	f04f 0901 	moveq.w	r9, #1
     9c2:	f04f 0900 	movne.w	r9, #0
    if (!collected && MP_STATE_MEM(gc_alloc_amount) >= MP_STATE_MEM(gc_alloc_threshold)) {
     9c6:	d149      	bne.n	a5c <gc_alloc+0xc0>
        for (i = MP_STATE_MEM(gc_last_free_atb_index); i < MP_STATE_MEM(gc_alloc_table_byte_len); i++) {
     9c8:	f8df 8170 	ldr.w	r8, [pc, #368]	; b3c <gc_alloc+0x1a0>
void *gc_alloc(size_t n_bytes, bool has_finaliser) {
     9cc:	2400      	movs	r4, #0
        for (i = MP_STATE_MEM(gc_last_free_atb_index); i < MP_STATE_MEM(gc_alloc_table_byte_len); i++) {
     9ce:	f8d6 21d8 	ldr.w	r2, [r6, #472]	; 0x1d8
     9d2:	f8d6 00b8 	ldr.w	r0, [r6, #184]	; 0xb8
     9d6:	4282      	cmp	r2, r0
     9d8:	d238      	bcs.n	a4c <gc_alloc+0xb0>
     9da:	f8d8 e0b4 	ldr.w	lr, [r8, #180]	; 0xb4
     9de:	eb0e 0102 	add.w	r1, lr, r2
     9e2:	e01a      	b.n	a1a <gc_alloc+0x7e>
            if (ATB_0_IS_FREE(a)) { if (++n_free >= n_blocks) { i = i * BLOCKS_PER_ATB + 0; goto found; } } else { n_free = 0; }
     9e4:	3401      	adds	r4, #1
     9e6:	42bc      	cmp	r4, r7
     9e8:	d241      	bcs.n	a6e <gc_alloc+0xd2>
            if (ATB_1_IS_FREE(a)) { if (++n_free >= n_blocks) { i = i * BLOCKS_PER_ATB + 1; goto found; } } else { n_free = 0; }
     9ea:	f013 0f0c 	tst.w	r3, #12
     9ee:	d11e      	bne.n	a2e <gc_alloc+0x92>
     9f0:	3401      	adds	r4, #1
     9f2:	42bc      	cmp	r4, r7
     9f4:	f080 8095 	bcs.w	b22 <gc_alloc+0x186>
            if (ATB_2_IS_FREE(a)) { if (++n_free >= n_blocks) { i = i * BLOCKS_PER_ATB + 2; goto found; } } else { n_free = 0; }
     9f8:	f013 0f30 	tst.w	r3, #48	; 0x30
     9fc:	d11c      	bne.n	a38 <gc_alloc+0x9c>
     9fe:	3401      	adds	r4, #1
     a00:	42bc      	cmp	r4, r7
     a02:	f080 8091 	bcs.w	b28 <gc_alloc+0x18c>
            if (ATB_3_IS_FREE(a)) { if (++n_free >= n_blocks) { i = i * BLOCKS_PER_ATB + 3; goto found; } } else { n_free = 0; }
     a06:	f013 0fc0 	tst.w	r3, #192	; 0xc0
     a0a:	d11a      	bne.n	a42 <gc_alloc+0xa6>
     a0c:	3401      	adds	r4, #1
     a0e:	42bc      	cmp	r4, r7
     a10:	f080 808d 	bcs.w	b2e <gc_alloc+0x192>
        for (i = MP_STATE_MEM(gc_last_free_atb_index); i < MP_STATE_MEM(gc_alloc_table_byte_len); i++) {
     a14:	3201      	adds	r2, #1
     a16:	4282      	cmp	r2, r0
     a18:	d218      	bcs.n	a4c <gc_alloc+0xb0>
            byte a = MP_STATE_MEM(gc_alloc_table_start)[i];
     a1a:	f811 3b01 	ldrb.w	r3, [r1], #1
            if (ATB_0_IS_FREE(a)) { if (++n_free >= n_blocks) { i = i * BLOCKS_PER_ATB + 0; goto found; } } else { n_free = 0; }
     a1e:	f013 0f03 	tst.w	r3, #3
     a22:	d0df      	beq.n	9e4 <gc_alloc+0x48>
            if (ATB_1_IS_FREE(a)) { if (++n_free >= n_blocks) { i = i * BLOCKS_PER_ATB + 1; goto found; } } else { n_free = 0; }
     a24:	f013 0f0c 	tst.w	r3, #12
            if (ATB_0_IS_FREE(a)) { if (++n_free >= n_blocks) { i = i * BLOCKS_PER_ATB + 0; goto found; } } else { n_free = 0; }
     a28:	f04f 0400 	mov.w	r4, #0
            if (ATB_1_IS_FREE(a)) { if (++n_free >= n_blocks) { i = i * BLOCKS_PER_ATB + 1; goto found; } } else { n_free = 0; }
     a2c:	d0e0      	beq.n	9f0 <gc_alloc+0x54>
            if (ATB_2_IS_FREE(a)) { if (++n_free >= n_blocks) { i = i * BLOCKS_PER_ATB + 2; goto found; } } else { n_free = 0; }
     a2e:	f013 0f30 	tst.w	r3, #48	; 0x30
            if (ATB_1_IS_FREE(a)) { if (++n_free >= n_blocks) { i = i * BLOCKS_PER_ATB + 1; goto found; } } else { n_free = 0; }
     a32:	f04f 0400 	mov.w	r4, #0
            if (ATB_2_IS_FREE(a)) { if (++n_free >= n_blocks) { i = i * BLOCKS_PER_ATB + 2; goto found; } } else { n_free = 0; }
     a36:	d0e2      	beq.n	9fe <gc_alloc+0x62>
            if (ATB_3_IS_FREE(a)) { if (++n_free >= n_blocks) { i = i * BLOCKS_PER_ATB + 3; goto found; } } else { n_free = 0; }
     a38:	f013 0fc0 	tst.w	r3, #192	; 0xc0
            if (ATB_2_IS_FREE(a)) { if (++n_free >= n_blocks) { i = i * BLOCKS_PER_ATB + 2; goto found; } } else { n_free = 0; }
     a3c:	f04f 0400 	mov.w	r4, #0
            if (ATB_3_IS_FREE(a)) { if (++n_free >= n_blocks) { i = i * BLOCKS_PER_ATB + 3; goto found; } } else { n_free = 0; }
     a40:	d0e4      	beq.n	a0c <gc_alloc+0x70>
        for (i = MP_STATE_MEM(gc_last_free_atb_index); i < MP_STATE_MEM(gc_alloc_table_byte_len); i++) {
     a42:	3201      	adds	r2, #1
     a44:	4282      	cmp	r2, r0
            if (ATB_3_IS_FREE(a)) { if (++n_free >= n_blocks) { i = i * BLOCKS_PER_ATB + 3; goto found; } } else { n_free = 0; }
     a46:	f04f 0400 	mov.w	r4, #0
        for (i = MP_STATE_MEM(gc_last_free_atb_index); i < MP_STATE_MEM(gc_alloc_table_byte_len); i++) {
     a4a:	d3e6      	bcc.n	a1a <gc_alloc+0x7e>
        if (collected) {
     a4c:	f1b9 0f00 	cmp.w	r9, #0
     a50:	d170      	bne.n	b34 <gc_alloc+0x198>
        gc_collect();
     a52:	f01a fdf3 	bl	1b63c <gc_collect>
        collected = 1;
     a56:	f04f 0901 	mov.w	r9, #1
    }
     a5a:	e7b8      	b.n	9ce <gc_alloc+0x32>
    if (!collected && MP_STATE_MEM(gc_alloc_amount) >= MP_STATE_MEM(gc_alloc_threshold)) {
     a5c:	f8d6 21d0 	ldr.w	r2, [r6, #464]	; 0x1d0
     a60:	f8d6 31d4 	ldr.w	r3, [r6, #468]	; 0x1d4
     a64:	429a      	cmp	r2, r3
     a66:	d3af      	bcc.n	9c8 <gc_alloc+0x2c>
        gc_collect();
     a68:	f01a fde8 	bl	1b63c <gc_collect>
     a6c:	e7ac      	b.n	9c8 <gc_alloc+0x2c>
            if (ATB_0_IS_FREE(a)) { if (++n_free >= n_blocks) { i = i * BLOCKS_PER_ATB + 0; goto found; } } else { n_free = 0; }
     a6e:	0093      	lsls	r3, r2, #2
    if (n_free == 1) {
     a70:	2c01      	cmp	r4, #1
    start_block = i - n_free + 1;
     a72:	eba3 0004 	sub.w	r0, r3, r4
        MP_STATE_MEM(gc_last_free_atb_index) = (i + 1) / BLOCKS_PER_ATB;
     a76:	f103 0c01 	add.w	ip, r3, #1
    start_block = i - n_free + 1;
     a7a:	f100 0801 	add.w	r8, r0, #1
        MP_STATE_MEM(gc_last_free_atb_index) = (i + 1) / BLOCKS_PER_ATB;
     a7e:	bf04      	itt	eq
     a80:	ea4f 029c 	moveq.w	r2, ip, lsr #2
     a84:	f8c6 21d8 	streq.w	r2, [r6, #472]	; 0x1d8
    ATB_FREE_TO_HEAD(start_block);
     a88:	ea4f 0298 	mov.w	r2, r8, lsr #2
     a8c:	f008 0103 	and.w	r1, r8, #3
     a90:	f81e 4002 	ldrb.w	r4, [lr, r2]
     a94:	ea4f 0941 	mov.w	r9, r1, lsl #1
     a98:	2101      	movs	r1, #1
     a9a:	fa01 f109 	lsl.w	r1, r1, r9
    for (size_t bl = start_block + 1; bl <= end_block; bl++) {
     a9e:	3002      	adds	r0, #2
    ATB_FREE_TO_HEAD(start_block);
     aa0:	4321      	orrs	r1, r4
    for (size_t bl = start_block + 1; bl <= end_block; bl++) {
     aa2:	4283      	cmp	r3, r0
    ATB_FREE_TO_HEAD(start_block);
     aa4:	f80e 1002 	strb.w	r1, [lr, r2]
        ATB_FREE_TO_TAIL(bl);
     aa8:	bf28      	it	cs
     aaa:	f04f 0e02 	movcs.w	lr, #2
    for (size_t bl = start_block + 1; bl <= end_block; bl++) {
     aae:	d30f      	bcc.n	ad0 <gc_alloc+0x134>
        ATB_FREE_TO_TAIL(bl);
     ab0:	0884      	lsrs	r4, r0, #2
     ab2:	f8d6 20b4 	ldr.w	r2, [r6, #180]	; 0xb4
     ab6:	f000 0103 	and.w	r1, r0, #3
     aba:	f812 9004 	ldrb.w	r9, [r2, r4]
     abe:	0049      	lsls	r1, r1, #1
     ac0:	fa0e f101 	lsl.w	r1, lr, r1
    for (size_t bl = start_block + 1; bl <= end_block; bl++) {
     ac4:	3001      	adds	r0, #1
        ATB_FREE_TO_TAIL(bl);
     ac6:	ea41 0109 	orr.w	r1, r1, r9
    for (size_t bl = start_block + 1; bl <= end_block; bl++) {
     aca:	4283      	cmp	r3, r0
        ATB_FREE_TO_TAIL(bl);
     acc:	5511      	strb	r1, [r2, r4]
    for (size_t bl = start_block + 1; bl <= end_block; bl++) {
     ace:	d2ef      	bcs.n	ab0 <gc_alloc+0x114>
    void *ret_ptr = (void*)(MP_STATE_MEM(gc_pool_start) + start_block * BYTES_PER_BLOCK);
     ad0:	f8d6 a0c0 	ldr.w	sl, [r6, #192]	; 0xc0
    MP_STATE_MEM(gc_alloc_amount) += n_blocks;
     ad4:	f8d6 31d0 	ldr.w	r3, [r6, #464]	; 0x1d0
    void *ret_ptr = (void*)(MP_STATE_MEM(gc_pool_start) + start_block * BYTES_PER_BLOCK);
     ad8:	f8df 9060 	ldr.w	r9, [pc, #96]	; b3c <gc_alloc+0x1a0>
     adc:	ea4f 1408 	mov.w	r4, r8, lsl #4
    memset((byte*)ret_ptr, 0, (end_block - start_block + 1) * BYTES_PER_BLOCK);
     ae0:	ebc8 020c 	rsb	r2, r8, ip
    void *ret_ptr = (void*)(MP_STATE_MEM(gc_pool_start) + start_block * BYTES_PER_BLOCK);
     ae4:	eb0a 0b04 	add.w	fp, sl, r4
    MP_STATE_MEM(gc_alloc_amount) += n_blocks;
     ae8:	441f      	add	r7, r3
    memset((byte*)ret_ptr, 0, (end_block - start_block + 1) * BYTES_PER_BLOCK);
     aea:	0112      	lsls	r2, r2, #4
     aec:	4658      	mov	r0, fp
     aee:	2100      	movs	r1, #0
    MP_STATE_MEM(gc_alloc_amount) += n_blocks;
     af0:	f8c6 71d0 	str.w	r7, [r6, #464]	; 0x1d0
    memset((byte*)ret_ptr, 0, (end_block - start_block + 1) * BYTES_PER_BLOCK);
     af4:	f01c f95c 	bl	1cdb0 <memset>
    if (has_finaliser) {
     af8:	b185      	cbz	r5, b1c <gc_alloc+0x180>
        ((mp_obj_base_t*)ret_ptr)->type = NULL;
     afa:	2300      	movs	r3, #0
        FTB_SET(start_block);
     afc:	f8d9 00bc 	ldr.w	r0, [r9, #188]	; 0xbc
        ((mp_obj_base_t*)ret_ptr)->type = NULL;
     b00:	f84a 3004 	str.w	r3, [sl, r4]
        FTB_SET(start_block);
     b04:	ea4f 01d8 	mov.w	r1, r8, lsr #3
     b08:	2201      	movs	r2, #1
     b0a:	5c43      	ldrb	r3, [r0, r1]
     b0c:	f008 0807 	and.w	r8, r8, #7
     b10:	fa02 f808 	lsl.w	r8, r2, r8
     b14:	ea48 0803 	orr.w	r8, r8, r3
     b18:	f800 8001 	strb.w	r8, [r0, r1]
     b1c:	4658      	mov	r0, fp
}
     b1e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
            if (ATB_1_IS_FREE(a)) { if (++n_free >= n_blocks) { i = i * BLOCKS_PER_ATB + 1; goto found; } } else { n_free = 0; }
     b22:	0092      	lsls	r2, r2, #2
     b24:	1c53      	adds	r3, r2, #1
     b26:	e7a3      	b.n	a70 <gc_alloc+0xd4>
            if (ATB_2_IS_FREE(a)) { if (++n_free >= n_blocks) { i = i * BLOCKS_PER_ATB + 2; goto found; } } else { n_free = 0; }
     b28:	0092      	lsls	r2, r2, #2
     b2a:	1c93      	adds	r3, r2, #2
     b2c:	e7a0      	b.n	a70 <gc_alloc+0xd4>
            if (ATB_3_IS_FREE(a)) { if (++n_free >= n_blocks) { i = i * BLOCKS_PER_ATB + 3; goto found; } } else { n_free = 0; }
     b2e:	0092      	lsls	r2, r2, #2
     b30:	1cd3      	adds	r3, r2, #3
     b32:	e79d      	b.n	a70 <gc_alloc+0xd4>
        return NULL;
     b34:	2000      	movs	r0, #0
     b36:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
     b3a:	bf00      	nop
     b3c:	200012f0 	.word	0x200012f0

00000b40 <gc_free>:
    if (MP_STATE_MEM(gc_lock_depth) > 0) {
     b40:	4b03      	ldr	r3, [pc, #12]	; (b50 <gc_free+0x10>)
     b42:	f8b3 31cc 	ldrh.w	r3, [r3, #460]	; 0x1cc
     b46:	b90b      	cbnz	r3, b4c <gc_free+0xc>
    if (ptr == NULL) {
     b48:	b100      	cbz	r0, b4c <gc_free+0xc>
     b4a:	e4c9      	b.n	4e0 <gc_free.part.0>
     b4c:	4770      	bx	lr
     b4e:	bf00      	nop
     b50:	200012f0 	.word	0x200012f0

00000b54 <gc_nbytes>:

size_t gc_nbytes(const void *ptr) {
     b54:	4603      	mov	r3, r0
    GC_ENTER();
    if (VERIFY_PTR(ptr)) {
     b56:	f010 000f 	ands.w	r0, r0, #15
     b5a:	d12a      	bne.n	bb2 <gc_nbytes+0x5e>
     b5c:	4a16      	ldr	r2, [pc, #88]	; (bb8 <gc_nbytes+0x64>)
     b5e:	f8d2 10c0 	ldr.w	r1, [r2, #192]	; 0xc0
     b62:	428b      	cmp	r3, r1
     b64:	d315      	bcc.n	b92 <gc_nbytes+0x3e>
size_t gc_nbytes(const void *ptr) {
     b66:	b410      	push	{r4}
    if (VERIFY_PTR(ptr)) {
     b68:	f8d2 40c4 	ldr.w	r4, [r2, #196]	; 0xc4
     b6c:	42a3      	cmp	r3, r4
     b6e:	d20e      	bcs.n	b8e <gc_nbytes+0x3a>
        size_t block = BLOCK_FROM_PTR(ptr);
     b70:	1a5b      	subs	r3, r3, r1
        if (ATB_GET_KIND(block) == AT_HEAD) {
     b72:	f8d2 40b4 	ldr.w	r4, [r2, #180]	; 0xb4
     b76:	099a      	lsrs	r2, r3, #6
        size_t block = BLOCK_FROM_PTR(ptr);
     b78:	0919      	lsrs	r1, r3, #4
        if (ATB_GET_KIND(block) == AT_HEAD) {
     b7a:	5ca2      	ldrb	r2, [r4, r2]
     b7c:	f001 0303 	and.w	r3, r1, #3
     b80:	005b      	lsls	r3, r3, #1
     b82:	fa42 f303 	asr.w	r3, r2, r3
     b86:	f003 0303 	and.w	r3, r3, #3
     b8a:	2b01      	cmp	r3, #1
     b8c:	d002      	beq.n	b94 <gc_nbytes+0x40>
    }

    // invalid pointer
    GC_EXIT();
    return 0;
}
     b8e:	f85d 4b04 	ldr.w	r4, [sp], #4
     b92:	4770      	bx	lr
                n_blocks += 1;
     b94:	3001      	adds	r0, #1
     b96:	180b      	adds	r3, r1, r0
            } while (ATB_GET_KIND(block + n_blocks) == AT_TAIL);
     b98:	089a      	lsrs	r2, r3, #2
     b9a:	f003 0303 	and.w	r3, r3, #3
     b9e:	5ca2      	ldrb	r2, [r4, r2]
     ba0:	005b      	lsls	r3, r3, #1
     ba2:	fa42 f303 	asr.w	r3, r2, r3
     ba6:	f003 0303 	and.w	r3, r3, #3
     baa:	2b02      	cmp	r3, #2
     bac:	d0f2      	beq.n	b94 <gc_nbytes+0x40>
            return n_blocks * BYTES_PER_BLOCK;
     bae:	0100      	lsls	r0, r0, #4
     bb0:	e7ed      	b.n	b8e <gc_nbytes+0x3a>
    return 0;
     bb2:	2000      	movs	r0, #0
     bb4:	4770      	bx	lr
     bb6:	bf00      	nop
     bb8:	200012f0 	.word	0x200012f0

00000bbc <gc_realloc>:
    }
}

#else // Alternative gc_realloc impl

void *gc_realloc(void *ptr_in, size_t n_bytes, bool allow_move) {
     bbc:	468c      	mov	ip, r1
    // check for pure allocation
    if (ptr_in == NULL) {
     bbe:	4601      	mov	r1, r0
     bc0:	2800      	cmp	r0, #0
     bc2:	f000 80e0 	beq.w	d86 <gc_realloc+0x1ca>
void *gc_realloc(void *ptr_in, size_t n_bytes, bool allow_move) {
     bc6:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
     bca:	4605      	mov	r5, r0
     bcc:	4690      	mov	r8, r2
        return gc_alloc(n_bytes, false);
    }

    // check for pure free
    if (n_bytes == 0) {
     bce:	f1bc 0f00 	cmp.w	ip, #0
     bd2:	d07d      	beq.n	cd0 <gc_realloc+0x114>

    void *ptr = ptr_in;

    GC_ENTER();

    if (MP_STATE_MEM(gc_lock_depth) > 0) {
     bd4:	4f78      	ldr	r7, [pc, #480]	; (db8 <gc_realloc+0x1fc>)
     bd6:	f8b7 31cc 	ldrh.w	r3, [r7, #460]	; 0x1cc
     bda:	2b00      	cmp	r3, #0
     bdc:	f040 80aa 	bne.w	d34 <gc_realloc+0x178>
        GC_EXIT();
        return NULL;
    }

    // get the GC block number corresponding to this pointer
    assert(VERIFY_PTR(ptr));
     be0:	f010 010f 	ands.w	r1, r0, #15
     be4:	f040 80d9 	bne.w	d9a <gc_realloc+0x1de>
     be8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
     bec:	4298      	cmp	r0, r3
     bee:	f0c0 80d4 	bcc.w	d9a <gc_realloc+0x1de>
     bf2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
     bf6:	4290      	cmp	r0, r2
     bf8:	f080 80cf 	bcs.w	d9a <gc_realloc+0x1de>
    size_t block = BLOCK_FROM_PTR(ptr);
     bfc:	ebc3 0900 	rsb	r9, r3, r0
    assert(ATB_GET_KIND(block) == AT_HEAD);
     c00:	ea4f 1399 	mov.w	r3, r9, lsr #6
     c04:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
    size_t block = BLOCK_FROM_PTR(ptr);
     c08:	ea4f 1019 	mov.w	r0, r9, lsr #4
    assert(ATB_GET_KIND(block) == AT_HEAD);
     c0c:	f000 0603 	and.w	r6, r0, #3
     c10:	5cd3      	ldrb	r3, [r2, r3]
     c12:	0076      	lsls	r6, r6, #1
     c14:	fa43 f606 	asr.w	r6, r3, r6
     c18:	f006 0603 	and.w	r6, r6, #3
     c1c:	2e01      	cmp	r6, #1
     c1e:	f040 80c3 	bne.w	da8 <gc_realloc+0x1ec>
    // free blocks to satisfy the realloc.  Note that we need to compute the
    // total size of the existing memory chunk so we can correctly and
    // efficiently shrink it (see below for shrinking code).
    size_t n_free   = 0;
    size_t n_blocks = 1; // counting HEAD block
    size_t max_block = MP_STATE_MEM(gc_alloc_table_byte_len) * BLOCKS_PER_ATB;
     c22:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
    for (size_t bl = block + n_blocks; bl < max_block; bl++) {
     c26:	1c44      	adds	r4, r0, #1
    size_t max_block = MP_STATE_MEM(gc_alloc_table_byte_len) * BLOCKS_PER_ATB;
     c28:	ea4f 0a83 	mov.w	sl, r3, lsl #2
    size_t new_blocks = (n_bytes + BYTES_PER_BLOCK - 1) / BYTES_PER_BLOCK;
     c2c:	f10c 0e0f 	add.w	lr, ip, #15
    for (size_t bl = block + n_blocks; bl < max_block; bl++) {
     c30:	45a2      	cmp	sl, r4
    size_t new_blocks = (n_bytes + BYTES_PER_BLOCK - 1) / BYTES_PER_BLOCK;
     c32:	ea4f 1e1e 	mov.w	lr, lr, lsr #4
    for (size_t bl = block + n_blocks; bl < max_block; bl++) {
     c36:	d911      	bls.n	c5c <gc_realloc+0xa0>
        byte block_type = ATB_GET_KIND(bl);
     c38:	ea4f 0b94 	mov.w	fp, r4, lsr #2
     c3c:	f004 0303 	and.w	r3, r4, #3
     c40:	f812 b00b 	ldrb.w	fp, [r2, fp]
     c44:	005b      	lsls	r3, r3, #1
     c46:	fa4b f303 	asr.w	r3, fp, r3
     c4a:	f003 0303 	and.w	r3, r3, #3
        if (block_type == AT_TAIL) {
     c4e:	2b02      	cmp	r3, #2
     c50:	d047      	beq.n	ce2 <gc_realloc+0x126>
            n_blocks++;
            continue;
        }
        if (block_type == AT_FREE) {
     c52:	b91b      	cbnz	r3, c5c <gc_realloc+0xa0>
            n_free++;
     c54:	3101      	adds	r1, #1
            if (n_blocks + n_free >= new_blocks) {
     c56:	198b      	adds	r3, r1, r6
     c58:	459e      	cmp	lr, r3
     c5a:	d843      	bhi.n	ce4 <gc_realloc+0x128>
        }
        break;
    }

    // return original ptr if it already has the requested number of blocks
    if (new_blocks == n_blocks) {
     c5c:	45b6      	cmp	lr, r6
     c5e:	d034      	beq.n	cca <gc_realloc+0x10e>
        GC_EXIT();
        return ptr_in;
    }

    // check if we can shrink the allocated area
    if (new_blocks < n_blocks) {
     c60:	d344      	bcc.n	cec <gc_realloc+0x130>

        return ptr_in;
    }

    // check if we can expand in place
    if (new_blocks <= n_blocks + n_free) {
     c62:	4431      	add	r1, r6
     c64:	458e      	cmp	lr, r1
     c66:	d868      	bhi.n	d3a <gc_realloc+0x17e>
        // mark few more blocks as used tail
        for (size_t bl = block + n_blocks; bl < block + new_blocks; bl++) {
     c68:	1981      	adds	r1, r0, r6
     c6a:	4470      	add	r0, lr
     c6c:	4288      	cmp	r0, r1
     c6e:	d924      	bls.n	cba <gc_realloc+0xfe>
            assert(ATB_GET_KIND(bl) == AT_FREE);
     c70:	088c      	lsrs	r4, r1, #2
     c72:	f001 0303 	and.w	r3, r1, #3
     c76:	f812 c004 	ldrb.w	ip, [r2, r4]
     c7a:	005b      	lsls	r3, r3, #1
     c7c:	fa4c f803 	asr.w	r8, ip, r3
     c80:	f018 0f03 	tst.w	r8, #3
     c84:	4414      	add	r4, r2
            ATB_FREE_TO_TAIL(bl);
     c86:	bf08      	it	eq
     c88:	2202      	moveq	r2, #2
            assert(ATB_GET_KIND(bl) == AT_FREE);
     c8a:	d00e      	beq.n	caa <gc_realloc+0xee>
     c8c:	e07e      	b.n	d8c <gc_realloc+0x1d0>
     c8e:	088c      	lsrs	r4, r1, #2
     c90:	f8d7 80b4 	ldr.w	r8, [r7, #180]	; 0xb4
     c94:	f001 0303 	and.w	r3, r1, #3
     c98:	f818 c004 	ldrb.w	ip, [r8, r4]
     c9c:	005b      	lsls	r3, r3, #1
     c9e:	fa4c f903 	asr.w	r9, ip, r3
     ca2:	f019 0f03 	tst.w	r9, #3
     ca6:	4444      	add	r4, r8
     ca8:	d170      	bne.n	d8c <gc_realloc+0x1d0>
            ATB_FREE_TO_TAIL(bl);
     caa:	fa02 f303 	lsl.w	r3, r2, r3
        for (size_t bl = block + n_blocks; bl < block + new_blocks; bl++) {
     cae:	3101      	adds	r1, #1
            ATB_FREE_TO_TAIL(bl);
     cb0:	ea43 030c 	orr.w	r3, r3, ip
        for (size_t bl = block + n_blocks; bl < block + new_blocks; bl++) {
     cb4:	4288      	cmp	r0, r1
            ATB_FREE_TO_TAIL(bl);
     cb6:	7023      	strb	r3, [r4, #0]
        for (size_t bl = block + n_blocks; bl < block + new_blocks; bl++) {
     cb8:	d8e9      	bhi.n	c8e <gc_realloc+0xd2>

        GC_EXIT();

        #if MICROPY_GC_CONSERVATIVE_CLEAR
        // be conservative and zero out all the newly allocated blocks
        memset((byte*)ptr_in + n_blocks * BYTES_PER_BLOCK, 0, (new_blocks - n_blocks) * BYTES_PER_BLOCK);
     cba:	ebc6 020e 	rsb	r2, r6, lr
     cbe:	0112      	lsls	r2, r2, #4
     cc0:	eb05 1006 	add.w	r0, r5, r6, lsl #4
     cc4:	2100      	movs	r1, #0
     cc6:	f01c f873 	bl	1cdb0 <memset>

        #if EXTENSIVE_HEAP_PROFILING
        gc_dump_alloc_table();
        #endif

        return ptr_in;
     cca:	4628      	mov	r0, r5
     ccc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (MP_STATE_MEM(gc_lock_depth) > 0) {
     cd0:	4b39      	ldr	r3, [pc, #228]	; (db8 <gc_realloc+0x1fc>)
     cd2:	f8b3 51cc 	ldrh.w	r5, [r3, #460]	; 0x1cc
     cd6:	bb6d      	cbnz	r5, d34 <gc_realloc+0x178>
     cd8:	f7ff fc02 	bl	4e0 <gc_free.part.0>
        return NULL;
     cdc:	4628      	mov	r0, r5
     cde:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
            n_blocks++;
     ce2:	3601      	adds	r6, #1
    for (size_t bl = block + n_blocks; bl < max_block; bl++) {
     ce4:	3401      	adds	r4, #1
     ce6:	45a2      	cmp	sl, r4
     ce8:	d1a6      	bne.n	c38 <gc_realloc+0x7c>
     cea:	e7b7      	b.n	c5c <gc_realloc+0xa0>
        for (size_t bl = block + new_blocks, count = n_blocks - new_blocks; count > 0; bl++, count--) {
     cec:	4486      	add	lr, r0
     cee:	4671      	mov	r1, lr
     cf0:	4430      	add	r0, r6
            ATB_ANY_TO_FREE(bl);
     cf2:	f04f 0803 	mov.w	r8, #3
     cf6:	e001      	b.n	cfc <gc_realloc+0x140>
     cf8:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
     cfc:	ea4f 0c91 	mov.w	ip, r1, lsr #2
     d00:	f001 0303 	and.w	r3, r1, #3
     d04:	f812 400c 	ldrb.w	r4, [r2, ip]
     d08:	005b      	lsls	r3, r3, #1
     d0a:	fa08 f303 	lsl.w	r3, r8, r3
        for (size_t bl = block + new_blocks, count = n_blocks - new_blocks; count > 0; bl++, count--) {
     d0e:	3101      	adds	r1, #1
            ATB_ANY_TO_FREE(bl);
     d10:	ea24 0303 	bic.w	r3, r4, r3
        for (size_t bl = block + new_blocks, count = n_blocks - new_blocks; count > 0; bl++, count--) {
     d14:	4281      	cmp	r1, r0
            ATB_ANY_TO_FREE(bl);
     d16:	f802 300c 	strb.w	r3, [r2, ip]
        for (size_t bl = block + new_blocks, count = n_blocks - new_blocks; count > 0; bl++, count--) {
     d1a:	d1ed      	bne.n	cf8 <gc_realloc+0x13c>
        if ((block + new_blocks) / BLOCKS_PER_ATB < MP_STATE_MEM(gc_last_free_atb_index)) {
     d1c:	f8d7 31d8 	ldr.w	r3, [r7, #472]	; 0x1d8
     d20:	4925      	ldr	r1, [pc, #148]	; (db8 <gc_realloc+0x1fc>)
     d22:	ea4f 029e 	mov.w	r2, lr, lsr #2
     d26:	429a      	cmp	r2, r3
     d28:	d2cf      	bcs.n	cca <gc_realloc+0x10e>
            MP_STATE_MEM(gc_last_free_atb_index) = (block + new_blocks) / BLOCKS_PER_ATB;
     d2a:	f8c1 21d8 	str.w	r2, [r1, #472]	; 0x1d8
     d2e:	4628      	mov	r0, r5
     d30:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return NULL;
     d34:	2000      	movs	r0, #0
     d36:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    }

    #if MICROPY_ENABLE_FINALISER
    bool ftb_state = FTB_GET(block);
     d3a:	ea4f 19d9 	mov.w	r9, r9, lsr #7
     d3e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
     d42:	4c1d      	ldr	r4, [pc, #116]	; (db8 <gc_realloc+0x1fc>)
     d44:	f813 1009 	ldrb.w	r1, [r3, r9]
     d48:	f000 0007 	and.w	r0, r0, #7
     d4c:	fa41 f000 	asr.w	r0, r1, r0
     d50:	f000 0101 	and.w	r1, r0, #1
    bool ftb_state = false;
    #endif

    GC_EXIT();

    if (!allow_move) {
     d54:	f1b8 0f00 	cmp.w	r8, #0
     d58:	d0ec      	beq.n	d34 <gc_realloc+0x178>
        // not allowed to move memory block so return failure
        return NULL;
    }

    // can't resize inplace; try to find a new contiguous chain
    void *ptr_out = gc_alloc(n_bytes, ftb_state);
     d5a:	4660      	mov	r0, ip
     d5c:	f7ff fe1e 	bl	99c <gc_alloc>

    // check that the alloc succeeded
    if (ptr_out == NULL) {
     d60:	4607      	mov	r7, r0
     d62:	2800      	cmp	r0, #0
     d64:	d0e6      	beq.n	d34 <gc_realloc+0x178>
        return NULL;
    }

    DEBUG_printf("gc_realloc(%p -> %p)\n", ptr_in, ptr_out);
    memcpy(ptr_out, ptr_in, n_blocks * BYTES_PER_BLOCK);
     d66:	0132      	lsls	r2, r6, #4
     d68:	4629      	mov	r1, r5
     d6a:	f01b ff85 	bl	1cc78 <memcpy>
    if (MP_STATE_MEM(gc_lock_depth) > 0) {
     d6e:	f8b4 31cc 	ldrh.w	r3, [r4, #460]	; 0x1cc
     d72:	b92b      	cbnz	r3, d80 <gc_realloc+0x1c4>
     d74:	4628      	mov	r0, r5
     d76:	f7ff fbb3 	bl	4e0 <gc_free.part.0>
     d7a:	4638      	mov	r0, r7
     d7c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
     d80:	4638      	mov	r0, r7
    gc_free(ptr_in);
    return ptr_out;
}
     d82:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return gc_alloc(n_bytes, false);
     d86:	4660      	mov	r0, ip
     d88:	f7ff be08 	b.w	99c <gc_alloc>
            assert(ATB_GET_KIND(bl) == AT_FREE);
     d8c:	4b0b      	ldr	r3, [pc, #44]	; (dbc <gc_realloc+0x200>)
     d8e:	4a0c      	ldr	r2, [pc, #48]	; (dc0 <gc_realloc+0x204>)
     d90:	480c      	ldr	r0, [pc, #48]	; (dc4 <gc_realloc+0x208>)
     d92:	f240 21df 	movw	r1, #735	; 0x2df
     d96:	f01a fc9b 	bl	1b6d0 <__assert_func>
    assert(VERIFY_PTR(ptr));
     d9a:	4b0b      	ldr	r3, [pc, #44]	; (dc8 <gc_realloc+0x20c>)
     d9c:	4a08      	ldr	r2, [pc, #32]	; (dc0 <gc_realloc+0x204>)
     d9e:	4809      	ldr	r0, [pc, #36]	; (dc4 <gc_realloc+0x208>)
     da0:	f240 219f 	movw	r1, #671	; 0x29f
     da4:	f01a fc94 	bl	1b6d0 <__assert_func>
    assert(ATB_GET_KIND(block) == AT_HEAD);
     da8:	4b08      	ldr	r3, [pc, #32]	; (dcc <gc_realloc+0x210>)
     daa:	4a05      	ldr	r2, [pc, #20]	; (dc0 <gc_realloc+0x204>)
     dac:	4805      	ldr	r0, [pc, #20]	; (dc4 <gc_realloc+0x208>)
     dae:	f240 21a1 	movw	r1, #673	; 0x2a1
     db2:	f01a fc8d 	bl	1b6d0 <__assert_func>
     db6:	bf00      	nop
     db8:	200012f0 	.word	0x200012f0
     dbc:	0001def4 	.word	0x0001def4
     dc0:	0001de44 	.word	0x0001de44
     dc4:	0001de60 	.word	0x0001de60
     dc8:	0001de50 	.word	0x0001de50
     dcc:	0001de70 	.word	0x0001de70

00000dd0 <gc_dump_info>:
#endif // Alternative gc_realloc impl

void gc_dump_info(void) {
     dd0:	b510      	push	{r4, lr}
     dd2:	b08a      	sub	sp, #40	; 0x28
    gc_info_t info;
    gc_info(&info);
     dd4:	a803      	add	r0, sp, #12
    mp_printf(&mp_plat_print, "GC: total: %u, used: %u, free: %u\n",
     dd6:	4c0b      	ldr	r4, [pc, #44]	; (e04 <gc_dump_info+0x34>)
    gc_info(&info);
     dd8:	f7ff fd62 	bl	8a0 <gc_info>
    mp_printf(&mp_plat_print, "GC: total: %u, used: %u, free: %u\n",
     ddc:	9905      	ldr	r1, [sp, #20]
     dde:	9b04      	ldr	r3, [sp, #16]
     de0:	9a03      	ldr	r2, [sp, #12]
     de2:	9100      	str	r1, [sp, #0]
     de4:	4620      	mov	r0, r4
     de6:	4908      	ldr	r1, [pc, #32]	; (e08 <gc_dump_info+0x38>)
     de8:	f001 f918 	bl	201c <mp_printf>
        (uint)info.total, (uint)info.used, (uint)info.free);
    mp_printf(&mp_plat_print, " No. of 1-blocks: %u, 2-blocks: %u, max blk sz: %u, max free sz: %u\n",
     dec:	a806      	add	r0, sp, #24
     dee:	c80d      	ldmia	r0, {r0, r2, r3}
     df0:	9909      	ldr	r1, [sp, #36]	; 0x24
     df2:	9001      	str	r0, [sp, #4]
     df4:	9100      	str	r1, [sp, #0]
     df6:	4620      	mov	r0, r4
     df8:	4904      	ldr	r1, [pc, #16]	; (e0c <gc_dump_info+0x3c>)
     dfa:	f001 f90f 	bl	201c <mp_printf>
           (uint)info.num_1block, (uint)info.num_2block, (uint)info.max_block, (uint)info.max_free);
}
     dfe:	b00a      	add	sp, #40	; 0x28
     e00:	bd10      	pop	{r4, pc}
     e02:	bf00      	nop
     e04:	0001f75c 	.word	0x0001f75c
     e08:	0001df10 	.word	0x0001df10
     e0c:	0001df34 	.word	0x0001df34

00000e10 <gc_dump_alloc_table>:

void gc_dump_alloc_table(void) {
     e10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    GC_ENTER();
    static const size_t DUMP_BYTES_PER_LINE = 64;
    #if !EXTENSIVE_HEAP_PROFILING
    // When comparing heap output we don't want to print the starting
    // pointer of the heap because it changes from run to run.
    mp_printf(&mp_plat_print, "GC memory layout; from %p:", MP_STATE_MEM(gc_pool_start));
     e14:	4f4e      	ldr	r7, [pc, #312]	; (f50 <gc_dump_alloc_table+0x140>)
     e16:	494f      	ldr	r1, [pc, #316]	; (f54 <gc_dump_alloc_table+0x144>)
     e18:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
     e1c:	484e      	ldr	r0, [pc, #312]	; (f58 <gc_dump_alloc_table+0x148>)
     e1e:	f001 f8fd 	bl	201c <mp_printf>
    #endif
    for (size_t bl = 0; bl < MP_STATE_MEM(gc_alloc_table_byte_len) * BLOCKS_PER_ATB; bl++) {
     e22:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
     e26:	0089      	lsls	r1, r1, #2
     e28:	bf18      	it	ne
     e2a:	2500      	movne	r5, #0
     e2c:	d11f      	bne.n	e6e <gc_dump_alloc_table+0x5e>
     e2e:	e078      	b.n	f22 <gc_dump_alloc_table+0x112>
     e30:	f005 0603 	and.w	r6, r5, #3
     e34:	0076      	lsls	r6, r6, #1
     e36:	ea4f 0895 	mov.w	r8, r5, lsr #2
            // (the cast to uint32_t is for 16-bit ports)
            //mp_printf(&mp_plat_print, "\n%05x: ", (uint)(PTR_FROM_BLOCK(bl) & (uint32_t)0xfffff));
            mp_printf(&mp_plat_print, "\n%05x: ", (uint)((bl * BYTES_PER_BLOCK) & (uint32_t)0xfffff));
        }
        int c = ' ';
        switch (ATB_GET_KIND(bl)) {
     e3a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
     e3e:	4a44      	ldr	r2, [pc, #272]	; (f50 <gc_dump_alloc_table+0x140>)
     e40:	f813 3008 	ldrb.w	r3, [r3, r8]
     e44:	fa43 f606 	asr.w	r6, r3, r6
     e48:	f006 0603 	and.w	r6, r6, #3
     e4c:	2e02      	cmp	r6, #2
     e4e:	d066      	beq.n	f1e <gc_dump_alloc_table+0x10e>
     e50:	2e03      	cmp	r6, #3
     e52:	d062      	beq.n	f1a <gc_dump_alloc_table+0x10a>
     e54:	2e01      	cmp	r6, #1
     e56:	d044      	beq.n	ee2 <gc_dump_alloc_table+0xd2>
            case AT_FREE: c = '.'; break;
     e58:	222e      	movs	r2, #46	; 0x2e
                break;
            }
            case AT_TAIL: c = '='; break;
            case AT_MARK: c = 'm'; break;
        }
        mp_printf(&mp_plat_print, "%c", c);
     e5a:	4940      	ldr	r1, [pc, #256]	; (f5c <gc_dump_alloc_table+0x14c>)
     e5c:	483e      	ldr	r0, [pc, #248]	; (f58 <gc_dump_alloc_table+0x148>)
     e5e:	f001 f8dd 	bl	201c <mp_printf>
    for (size_t bl = 0; bl < MP_STATE_MEM(gc_alloc_table_byte_len) * BLOCKS_PER_ATB; bl++) {
     e62:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
     e66:	3501      	adds	r5, #1
     e68:	0089      	lsls	r1, r1, #2
     e6a:	42a9      	cmp	r1, r5
     e6c:	d959      	bls.n	f22 <gc_dump_alloc_table+0x112>
        if (bl % DUMP_BYTES_PER_LINE == 0) {
     e6e:	06a8      	lsls	r0, r5, #26
     e70:	d1de      	bne.n	e30 <gc_dump_alloc_table+0x20>
                while (bl2 < MP_STATE_MEM(gc_alloc_table_byte_len) * BLOCKS_PER_ATB && ATB_GET_KIND(bl2) == AT_FREE) {
     e72:	428d      	cmp	r5, r1
     e74:	d261      	bcs.n	f3a <gc_dump_alloc_table+0x12a>
     e76:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
     e7a:	ea4f 0895 	mov.w	r8, r5, lsr #2
     e7e:	f005 0603 	and.w	r6, r5, #3
     e82:	f810 3008 	ldrb.w	r3, [r0, r8]
     e86:	0076      	lsls	r6, r6, #1
     e88:	4133      	asrs	r3, r6
     e8a:	079a      	lsls	r2, r3, #30
     e8c:	d121      	bne.n	ed2 <gc_dump_alloc_table+0xc2>
     e8e:	462c      	mov	r4, r5
     e90:	e004      	b.n	e9c <gc_dump_alloc_table+0x8c>
     e92:	5c82      	ldrb	r2, [r0, r2]
     e94:	fa42 f303 	asr.w	r3, r2, r3
     e98:	079b      	lsls	r3, r3, #30
     e9a:	d108      	bne.n	eae <gc_dump_alloc_table+0x9e>
                    bl2++;
     e9c:	3401      	adds	r4, #1
                while (bl2 < MP_STATE_MEM(gc_alloc_table_byte_len) * BLOCKS_PER_ATB && ATB_GET_KIND(bl2) == AT_FREE) {
     e9e:	f004 0303 	and.w	r3, r4, #3
     ea2:	428c      	cmp	r4, r1
     ea4:	ea4f 0294 	mov.w	r2, r4, lsr #2
     ea8:	ea4f 0343 	mov.w	r3, r3, lsl #1
     eac:	d3f1      	bcc.n	e92 <gc_dump_alloc_table+0x82>
                if (bl2 - bl >= 2 * DUMP_BYTES_PER_LINE) {
     eae:	1b62      	subs	r2, r4, r5
     eb0:	2a7f      	cmp	r2, #127	; 0x7f
     eb2:	d90e      	bls.n	ed2 <gc_dump_alloc_table+0xc2>
                    mp_printf(&mp_plat_print, "\n       (%u lines all free)", (uint)(bl2 - bl) / DUMP_BYTES_PER_LINE);
     eb4:	0992      	lsrs	r2, r2, #6
     eb6:	492a      	ldr	r1, [pc, #168]	; (f60 <gc_dump_alloc_table+0x150>)
     eb8:	4827      	ldr	r0, [pc, #156]	; (f58 <gc_dump_alloc_table+0x148>)
     eba:	f001 f8af 	bl	201c <mp_printf>
                    if (bl >= MP_STATE_MEM(gc_alloc_table_byte_len) * BLOCKS_PER_ATB) {
     ebe:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
                    bl = bl2 & (~(DUMP_BYTES_PER_LINE - 1));
     ec2:	f024 053f 	bic.w	r5, r4, #63	; 0x3f
                    if (bl >= MP_STATE_MEM(gc_alloc_table_byte_len) * BLOCKS_PER_ATB) {
     ec6:	ebb5 0f83 	cmp.w	r5, r3, lsl #2
     eca:	d22a      	bcs.n	f22 <gc_dump_alloc_table+0x112>
     ecc:	ea4f 0895 	mov.w	r8, r5, lsr #2
     ed0:	2600      	movs	r6, #0
            mp_printf(&mp_plat_print, "\n%05x: ", (uint)((bl * BYTES_PER_BLOCK) & (uint32_t)0xfffff));
     ed2:	4a24      	ldr	r2, [pc, #144]	; (f64 <gc_dump_alloc_table+0x154>)
     ed4:	4924      	ldr	r1, [pc, #144]	; (f68 <gc_dump_alloc_table+0x158>)
     ed6:	4820      	ldr	r0, [pc, #128]	; (f58 <gc_dump_alloc_table+0x148>)
     ed8:	012b      	lsls	r3, r5, #4
     eda:	401a      	ands	r2, r3
     edc:	f001 f89e 	bl	201c <mp_printf>
     ee0:	e7ab      	b.n	e3a <gc_dump_alloc_table+0x2a>
                if (*ptr == &mp_type_tuple) { c = 'T'; }
     ee2:	f8d2 10c0 	ldr.w	r1, [r2, #192]	; 0xc0
     ee6:	4a21      	ldr	r2, [pc, #132]	; (f6c <gc_dump_alloc_table+0x15c>)
     ee8:	012b      	lsls	r3, r5, #4
     eea:	58cb      	ldr	r3, [r1, r3]
     eec:	4293      	cmp	r3, r2
     eee:	d020      	beq.n	f32 <gc_dump_alloc_table+0x122>
                else if (*ptr == &mp_type_list) { c = 'L'; }
     ef0:	4a1f      	ldr	r2, [pc, #124]	; (f70 <gc_dump_alloc_table+0x160>)
     ef2:	4293      	cmp	r3, r2
     ef4:	d01f      	beq.n	f36 <gc_dump_alloc_table+0x126>
                else if (*ptr == &mp_type_dict) { c = 'D'; }
     ef6:	4a1f      	ldr	r2, [pc, #124]	; (f74 <gc_dump_alloc_table+0x164>)
     ef8:	4293      	cmp	r3, r2
     efa:	d024      	beq.n	f46 <gc_dump_alloc_table+0x136>
                else if (*ptr == &mp_type_str || *ptr == &mp_type_bytes) { c = 'S'; }
     efc:	4a1e      	ldr	r2, [pc, #120]	; (f78 <gc_dump_alloc_table+0x168>)
     efe:	4293      	cmp	r3, r2
     f00:	d015      	beq.n	f2e <gc_dump_alloc_table+0x11e>
     f02:	4a1e      	ldr	r2, [pc, #120]	; (f7c <gc_dump_alloc_table+0x16c>)
     f04:	4293      	cmp	r3, r2
     f06:	d012      	beq.n	f2e <gc_dump_alloc_table+0x11e>
                else if (*ptr == &mp_type_fun_bc) { c = 'B'; }
     f08:	4a1d      	ldr	r2, [pc, #116]	; (f80 <gc_dump_alloc_table+0x170>)
     f0a:	4293      	cmp	r3, r2
     f0c:	d01d      	beq.n	f4a <gc_dump_alloc_table+0x13a>
                else if (*ptr == &mp_type_module) { c = 'M'; }
     f0e:	4a1d      	ldr	r2, [pc, #116]	; (f84 <gc_dump_alloc_table+0x174>)
     f10:	4293      	cmp	r3, r2
     f12:	bf14      	ite	ne
     f14:	2268      	movne	r2, #104	; 0x68
     f16:	224d      	moveq	r2, #77	; 0x4d
     f18:	e79f      	b.n	e5a <gc_dump_alloc_table+0x4a>
            case AT_MARK: c = 'm'; break;
     f1a:	226d      	movs	r2, #109	; 0x6d
     f1c:	e79d      	b.n	e5a <gc_dump_alloc_table+0x4a>
            case AT_TAIL: c = '='; break;
     f1e:	223d      	movs	r2, #61	; 0x3d
     f20:	e79b      	b.n	e5a <gc_dump_alloc_table+0x4a>
    }
    mp_print_str(&mp_plat_print, "\n");
     f22:	4919      	ldr	r1, [pc, #100]	; (f88 <gc_dump_alloc_table+0x178>)
     f24:	480c      	ldr	r0, [pc, #48]	; (f58 <gc_dump_alloc_table+0x148>)
    GC_EXIT();
}
     f26:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    mp_print_str(&mp_plat_print, "\n");
     f2a:	f000 bd63 	b.w	19f4 <mp_print_str>
                else if (*ptr == &mp_type_str || *ptr == &mp_type_bytes) { c = 'S'; }
     f2e:	2253      	movs	r2, #83	; 0x53
     f30:	e793      	b.n	e5a <gc_dump_alloc_table+0x4a>
                if (*ptr == &mp_type_tuple) { c = 'T'; }
     f32:	2254      	movs	r2, #84	; 0x54
     f34:	e791      	b.n	e5a <gc_dump_alloc_table+0x4a>
                else if (*ptr == &mp_type_list) { c = 'L'; }
     f36:	224c      	movs	r2, #76	; 0x4c
     f38:	e78f      	b.n	e5a <gc_dump_alloc_table+0x4a>
     f3a:	f005 0603 	and.w	r6, r5, #3
     f3e:	0076      	lsls	r6, r6, #1
     f40:	ea4f 0895 	mov.w	r8, r5, lsr #2
     f44:	e7c5      	b.n	ed2 <gc_dump_alloc_table+0xc2>
                else if (*ptr == &mp_type_dict) { c = 'D'; }
     f46:	2244      	movs	r2, #68	; 0x44
     f48:	e787      	b.n	e5a <gc_dump_alloc_table+0x4a>
                else if (*ptr == &mp_type_fun_bc) { c = 'B'; }
     f4a:	2242      	movs	r2, #66	; 0x42
     f4c:	e785      	b.n	e5a <gc_dump_alloc_table+0x4a>
     f4e:	bf00      	nop
     f50:	200012f0 	.word	0x200012f0
     f54:	0001df7c 	.word	0x0001df7c
     f58:	0001f75c 	.word	0x0001f75c
     f5c:	0001dfc0 	.word	0x0001dfc0
     f60:	0001df9c 	.word	0x0001df9c
     f64:	000ffff0 	.word	0x000ffff0
     f68:	0001dfb8 	.word	0x0001dfb8
     f6c:	00023d90 	.word	0x00023d90
     f70:	00023114 	.word	0x00023114
     f74:	0002201c 	.word	0x0002201c
     f78:	00023b0c 	.word	0x00023b0c
     f7c:	00023b48 	.word	0x00023b48
     f80:	00022a8c 	.word	0x00022a8c
     f84:	000232d0 	.word	0x000232d0
     f88:	0001df98 	.word	0x0001df98

00000f8c <qstr_compute_hash>:
#define QSTR_ENTER()
#define QSTR_EXIT()
#endif

// this must match the equivalent function in makeqstrdata.py
mp_uint_t qstr_compute_hash(const byte *data, size_t len) {
     f8c:	b480      	push	{r7}
     f8e:	b085      	sub	sp, #20
     f90:	af00      	add	r7, sp, #0
     f92:	6078      	str	r0, [r7, #4]
     f94:	6039      	str	r1, [r7, #0]
    // djb2 algorithm; see http://www.cse.yorku.ca/~oz/hash.html
    mp_uint_t hash = 5381;
     f96:	f241 5305 	movw	r3, #5381	; 0x1505
     f9a:	60fb      	str	r3, [r7, #12]
    for (const byte *top = data + len; data < top; data++) {
     f9c:	687a      	ldr	r2, [r7, #4]
     f9e:	683b      	ldr	r3, [r7, #0]
     fa0:	4413      	add	r3, r2
     fa2:	60bb      	str	r3, [r7, #8]
     fa4:	e00a      	b.n	fbc <qstr_compute_hash+0x30>
        hash = ((hash << 5) + hash) ^ (*data); // hash * 33 ^ data
     fa6:	68fb      	ldr	r3, [r7, #12]
     fa8:	015a      	lsls	r2, r3, #5
     faa:	68fb      	ldr	r3, [r7, #12]
     fac:	4413      	add	r3, r2
     fae:	687a      	ldr	r2, [r7, #4]
     fb0:	7812      	ldrb	r2, [r2, #0]
     fb2:	4053      	eors	r3, r2
     fb4:	60fb      	str	r3, [r7, #12]
    for (const byte *top = data + len; data < top; data++) {
     fb6:	687b      	ldr	r3, [r7, #4]
     fb8:	3301      	adds	r3, #1
     fba:	607b      	str	r3, [r7, #4]
     fbc:	687a      	ldr	r2, [r7, #4]
     fbe:	68bb      	ldr	r3, [r7, #8]
     fc0:	429a      	cmp	r2, r3
     fc2:	d3f0      	bcc.n	fa6 <qstr_compute_hash+0x1a>
    }
    hash &= Q_HASH_MASK;
     fc4:	68fb      	ldr	r3, [r7, #12]
     fc6:	b2db      	uxtb	r3, r3
     fc8:	60fb      	str	r3, [r7, #12]
    // Make sure that valid hash is never zero, zero means "hash not computed"
    if (hash == 0) {
     fca:	68fb      	ldr	r3, [r7, #12]
     fcc:	2b00      	cmp	r3, #0
     fce:	d102      	bne.n	fd6 <qstr_compute_hash+0x4a>
        hash++;
     fd0:	68fb      	ldr	r3, [r7, #12]
     fd2:	3301      	adds	r3, #1
     fd4:	60fb      	str	r3, [r7, #12]
    }
    return hash;
     fd6:	68fb      	ldr	r3, [r7, #12]
}
     fd8:	4618      	mov	r0, r3
     fda:	3714      	adds	r7, #20
     fdc:	46bd      	mov	sp, r7
     fde:	f85d 7b04 	ldr.w	r7, [sp], #4
     fe2:	4770      	bx	lr

00000fe4 <qstr_init>:
#define CONST_POOL MICROPY_QSTR_EXTRA_POOL
#else
#define CONST_POOL mp_qstr_const_pool
#endif

void qstr_init(void) {
     fe4:	b480      	push	{r7}
     fe6:	af00      	add	r7, sp, #0
    MP_STATE_VM(last_pool) = (qstr_pool_t*)&CONST_POOL; // we won't modify the const_pool since it has no allocated room left
     fe8:	4b05      	ldr	r3, [pc, #20]	; (1000 <qstr_init+0x1c>)
     fea:	4a06      	ldr	r2, [pc, #24]	; (1004 <qstr_init+0x20>)
     fec:	611a      	str	r2, [r3, #16]
    MP_STATE_VM(qstr_last_chunk) = NULL;
     fee:	4b04      	ldr	r3, [pc, #16]	; (1000 <qstr_init+0x1c>)
     ff0:	2200      	movs	r2, #0
     ff2:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    #if MICROPY_PY_THREAD
    mp_thread_mutex_init(&MP_STATE_VM(qstr_mutex));
    #endif
}
     ff6:	bf00      	nop
     ff8:	46bd      	mov	sp, r7
     ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
     ffe:	4770      	bx	lr
    1000:	200012f0 	.word	0x200012f0
    1004:	00025db0 	.word	0x00025db0

00001008 <find_qstr>:

STATIC const byte *find_qstr(qstr q) {
    1008:	b480      	push	{r7}
    100a:	b085      	sub	sp, #20
    100c:	af00      	add	r7, sp, #0
    100e:	6078      	str	r0, [r7, #4]
    // search pool for this qstr
    // total_prev_len==0 in the final pool, so the loop will always terminate
    qstr_pool_t *pool = MP_STATE_VM(last_pool);
    1010:	4b0c      	ldr	r3, [pc, #48]	; (1044 <find_qstr+0x3c>)
    1012:	691b      	ldr	r3, [r3, #16]
    1014:	60fb      	str	r3, [r7, #12]
    while (q < pool->total_prev_len) {
    1016:	e002      	b.n	101e <find_qstr+0x16>
        pool = pool->prev;
    1018:	68fb      	ldr	r3, [r7, #12]
    101a:	681b      	ldr	r3, [r3, #0]
    101c:	60fb      	str	r3, [r7, #12]
    while (q < pool->total_prev_len) {
    101e:	68fb      	ldr	r3, [r7, #12]
    1020:	685a      	ldr	r2, [r3, #4]
    1022:	687b      	ldr	r3, [r7, #4]
    1024:	429a      	cmp	r2, r3
    1026:	d8f7      	bhi.n	1018 <find_qstr+0x10>
    }
    return pool->qstrs[q - pool->total_prev_len];
    1028:	68fb      	ldr	r3, [r7, #12]
    102a:	685b      	ldr	r3, [r3, #4]
    102c:	687a      	ldr	r2, [r7, #4]
    102e:	1ad2      	subs	r2, r2, r3
    1030:	68fb      	ldr	r3, [r7, #12]
    1032:	3204      	adds	r2, #4
    1034:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
}
    1038:	4618      	mov	r0, r3
    103a:	3714      	adds	r7, #20
    103c:	46bd      	mov	sp, r7
    103e:	f85d 7b04 	ldr.w	r7, [sp], #4
    1042:	4770      	bx	lr
    1044:	200012f0 	.word	0x200012f0

00001048 <qstr_add>:

// qstr_mutex must be taken while in this function
STATIC qstr qstr_add(const byte *q_ptr) {
    1048:	b580      	push	{r7, lr}
    104a:	b084      	sub	sp, #16
    104c:	af00      	add	r7, sp, #0
    104e:	6078      	str	r0, [r7, #4]
    DEBUG_printf("QSTR: add hash=%d len=%d data=%.*s\n", Q_GET_HASH(q_ptr), Q_GET_LENGTH(q_ptr), Q_GET_LENGTH(q_ptr), Q_GET_DATA(q_ptr));

    // make sure we have room in the pool for a new qstr
    if (MP_STATE_VM(last_pool)->len >= MP_STATE_VM(last_pool)->alloc) {
    1050:	4b25      	ldr	r3, [pc, #148]	; (10e8 <qstr_add+0xa0>)
    1052:	691b      	ldr	r3, [r3, #16]
    1054:	68da      	ldr	r2, [r3, #12]
    1056:	4b24      	ldr	r3, [pc, #144]	; (10e8 <qstr_add+0xa0>)
    1058:	691b      	ldr	r3, [r3, #16]
    105a:	689b      	ldr	r3, [r3, #8]
    105c:	429a      	cmp	r2, r3
    105e:	d32b      	bcc.n	10b8 <qstr_add+0x70>
        qstr_pool_t *pool = m_new_obj_var_maybe(qstr_pool_t, const char*, MP_STATE_VM(last_pool)->alloc * 2);
    1060:	4b21      	ldr	r3, [pc, #132]	; (10e8 <qstr_add+0xa0>)
    1062:	691b      	ldr	r3, [r3, #16]
    1064:	689b      	ldr	r3, [r3, #8]
    1066:	3302      	adds	r3, #2
    1068:	00db      	lsls	r3, r3, #3
    106a:	4618      	mov	r0, r3
    106c:	f7ff f96e 	bl	34c <m_malloc_maybe>
    1070:	60f8      	str	r0, [r7, #12]
        if (pool == NULL) {
    1072:	68fb      	ldr	r3, [r7, #12]
    1074:	2b00      	cmp	r3, #0
    1076:	d106      	bne.n	1086 <qstr_add+0x3e>
            QSTR_EXIT();
            m_malloc_fail(MP_STATE_VM(last_pool)->alloc * 2);
    1078:	4b1b      	ldr	r3, [pc, #108]	; (10e8 <qstr_add+0xa0>)
    107a:	691b      	ldr	r3, [r3, #16]
    107c:	689b      	ldr	r3, [r3, #8]
    107e:	005b      	lsls	r3, r3, #1
    1080:	4618      	mov	r0, r3
    1082:	f00c f879 	bl	d178 <m_malloc_fail>
        }
        pool->prev = MP_STATE_VM(last_pool);
    1086:	4b18      	ldr	r3, [pc, #96]	; (10e8 <qstr_add+0xa0>)
    1088:	691a      	ldr	r2, [r3, #16]
    108a:	68fb      	ldr	r3, [r7, #12]
    108c:	601a      	str	r2, [r3, #0]
        pool->total_prev_len = MP_STATE_VM(last_pool)->total_prev_len + MP_STATE_VM(last_pool)->len;
    108e:	4b16      	ldr	r3, [pc, #88]	; (10e8 <qstr_add+0xa0>)
    1090:	691b      	ldr	r3, [r3, #16]
    1092:	685a      	ldr	r2, [r3, #4]
    1094:	4b14      	ldr	r3, [pc, #80]	; (10e8 <qstr_add+0xa0>)
    1096:	691b      	ldr	r3, [r3, #16]
    1098:	68db      	ldr	r3, [r3, #12]
    109a:	441a      	add	r2, r3
    109c:	68fb      	ldr	r3, [r7, #12]
    109e:	605a      	str	r2, [r3, #4]
        pool->alloc = MP_STATE_VM(last_pool)->alloc * 2;
    10a0:	4b11      	ldr	r3, [pc, #68]	; (10e8 <qstr_add+0xa0>)
    10a2:	691b      	ldr	r3, [r3, #16]
    10a4:	689b      	ldr	r3, [r3, #8]
    10a6:	005a      	lsls	r2, r3, #1
    10a8:	68fb      	ldr	r3, [r7, #12]
    10aa:	609a      	str	r2, [r3, #8]
        pool->len = 0;
    10ac:	68fb      	ldr	r3, [r7, #12]
    10ae:	2200      	movs	r2, #0
    10b0:	60da      	str	r2, [r3, #12]
        MP_STATE_VM(last_pool) = pool;
    10b2:	4a0d      	ldr	r2, [pc, #52]	; (10e8 <qstr_add+0xa0>)
    10b4:	68fb      	ldr	r3, [r7, #12]
    10b6:	6113      	str	r3, [r2, #16]
        DEBUG_printf("QSTR: allocate new pool of size %d\n", MP_STATE_VM(last_pool)->alloc);
    }

    // add the new qstr
    MP_STATE_VM(last_pool)->qstrs[MP_STATE_VM(last_pool)->len++] = q_ptr;
    10b8:	4b0b      	ldr	r3, [pc, #44]	; (10e8 <qstr_add+0xa0>)
    10ba:	6919      	ldr	r1, [r3, #16]
    10bc:	4b0a      	ldr	r3, [pc, #40]	; (10e8 <qstr_add+0xa0>)
    10be:	691a      	ldr	r2, [r3, #16]
    10c0:	68d3      	ldr	r3, [r2, #12]
    10c2:	1c58      	adds	r0, r3, #1
    10c4:	60d0      	str	r0, [r2, #12]
    10c6:	3304      	adds	r3, #4
    10c8:	687a      	ldr	r2, [r7, #4]
    10ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    // return id for the newly-added qstr
    return MP_STATE_VM(last_pool)->total_prev_len + MP_STATE_VM(last_pool)->len - 1;
    10ce:	4b06      	ldr	r3, [pc, #24]	; (10e8 <qstr_add+0xa0>)
    10d0:	691b      	ldr	r3, [r3, #16]
    10d2:	685a      	ldr	r2, [r3, #4]
    10d4:	4b04      	ldr	r3, [pc, #16]	; (10e8 <qstr_add+0xa0>)
    10d6:	691b      	ldr	r3, [r3, #16]
    10d8:	68db      	ldr	r3, [r3, #12]
    10da:	4413      	add	r3, r2
    10dc:	3b01      	subs	r3, #1
}
    10de:	4618      	mov	r0, r3
    10e0:	3710      	adds	r7, #16
    10e2:	46bd      	mov	sp, r7
    10e4:	bd80      	pop	{r7, pc}
    10e6:	bf00      	nop
    10e8:	200012f0 	.word	0x200012f0

000010ec <qstr_find_strn>:

qstr qstr_find_strn(const char *str, size_t str_len) {
    10ec:	b580      	push	{r7, lr}
    10ee:	b086      	sub	sp, #24
    10f0:	af00      	add	r7, sp, #0
    10f2:	6078      	str	r0, [r7, #4]
    10f4:	6039      	str	r1, [r7, #0]
    // work out hash of str
    mp_uint_t str_hash = qstr_compute_hash((const byte*)str, str_len);
    10f6:	6839      	ldr	r1, [r7, #0]
    10f8:	6878      	ldr	r0, [r7, #4]
    10fa:	f7ff ff47 	bl	f8c <qstr_compute_hash>
    10fe:	60f8      	str	r0, [r7, #12]

    // search pools for the data
    for (qstr_pool_t *pool = MP_STATE_VM(last_pool); pool != NULL; pool = pool->prev) {
    1100:	4b22      	ldr	r3, [pc, #136]	; (118c <qstr_find_strn+0xa0>)
    1102:	691b      	ldr	r3, [r3, #16]
    1104:	617b      	str	r3, [r7, #20]
    1106:	e038      	b.n	117a <qstr_find_strn+0x8e>
        for (const byte **q = pool->qstrs, **q_top = pool->qstrs + pool->len; q < q_top; q++) {
    1108:	697b      	ldr	r3, [r7, #20]
    110a:	3310      	adds	r3, #16
    110c:	613b      	str	r3, [r7, #16]
    110e:	697b      	ldr	r3, [r7, #20]
    1110:	f103 0210 	add.w	r2, r3, #16
    1114:	697b      	ldr	r3, [r7, #20]
    1116:	68db      	ldr	r3, [r3, #12]
    1118:	009b      	lsls	r3, r3, #2
    111a:	4413      	add	r3, r2
    111c:	60bb      	str	r3, [r7, #8]
    111e:	e025      	b.n	116c <qstr_find_strn+0x80>
            if (Q_GET_HASH(*q) == str_hash && Q_GET_LENGTH(*q) == str_len && memcmp(Q_GET_DATA(*q), str, str_len) == 0) {
    1120:	693b      	ldr	r3, [r7, #16]
    1122:	681b      	ldr	r3, [r3, #0]
    1124:	781b      	ldrb	r3, [r3, #0]
    1126:	461a      	mov	r2, r3
    1128:	68fb      	ldr	r3, [r7, #12]
    112a:	429a      	cmp	r2, r3
    112c:	d11b      	bne.n	1166 <qstr_find_strn+0x7a>
    112e:	693b      	ldr	r3, [r7, #16]
    1130:	681b      	ldr	r3, [r3, #0]
    1132:	3301      	adds	r3, #1
    1134:	781b      	ldrb	r3, [r3, #0]
    1136:	461a      	mov	r2, r3
    1138:	683b      	ldr	r3, [r7, #0]
    113a:	429a      	cmp	r2, r3
    113c:	d113      	bne.n	1166 <qstr_find_strn+0x7a>
    113e:	693b      	ldr	r3, [r7, #16]
    1140:	681b      	ldr	r3, [r3, #0]
    1142:	3302      	adds	r3, #2
    1144:	683a      	ldr	r2, [r7, #0]
    1146:	6879      	ldr	r1, [r7, #4]
    1148:	4618      	mov	r0, r3
    114a:	f01b fe7d 	bl	1ce48 <memcmp>
    114e:	4603      	mov	r3, r0
    1150:	2b00      	cmp	r3, #0
    1152:	d108      	bne.n	1166 <qstr_find_strn+0x7a>
                return pool->total_prev_len + (q - pool->qstrs);
    1154:	697b      	ldr	r3, [r7, #20]
    1156:	685b      	ldr	r3, [r3, #4]
    1158:	693a      	ldr	r2, [r7, #16]
    115a:	6979      	ldr	r1, [r7, #20]
    115c:	3110      	adds	r1, #16
    115e:	1a52      	subs	r2, r2, r1
    1160:	1092      	asrs	r2, r2, #2
    1162:	4413      	add	r3, r2
    1164:	e00d      	b.n	1182 <qstr_find_strn+0x96>
        for (const byte **q = pool->qstrs, **q_top = pool->qstrs + pool->len; q < q_top; q++) {
    1166:	693b      	ldr	r3, [r7, #16]
    1168:	3304      	adds	r3, #4
    116a:	613b      	str	r3, [r7, #16]
    116c:	693a      	ldr	r2, [r7, #16]
    116e:	68bb      	ldr	r3, [r7, #8]
    1170:	429a      	cmp	r2, r3
    1172:	d3d5      	bcc.n	1120 <qstr_find_strn+0x34>
    for (qstr_pool_t *pool = MP_STATE_VM(last_pool); pool != NULL; pool = pool->prev) {
    1174:	697b      	ldr	r3, [r7, #20]
    1176:	681b      	ldr	r3, [r3, #0]
    1178:	617b      	str	r3, [r7, #20]
    117a:	697b      	ldr	r3, [r7, #20]
    117c:	2b00      	cmp	r3, #0
    117e:	d1c3      	bne.n	1108 <qstr_find_strn+0x1c>
            }
        }
    }

    // not found; return null qstr
    return 0;
    1180:	2300      	movs	r3, #0
}
    1182:	4618      	mov	r0, r3
    1184:	3718      	adds	r7, #24
    1186:	46bd      	mov	sp, r7
    1188:	bd80      	pop	{r7, pc}
    118a:	bf00      	nop
    118c:	200012f0 	.word	0x200012f0

00001190 <qstr_from_str>:

qstr qstr_from_str(const char *str) {
    1190:	b580      	push	{r7, lr}
    1192:	b082      	sub	sp, #8
    1194:	af00      	add	r7, sp, #0
    1196:	6078      	str	r0, [r7, #4]
    return qstr_from_strn(str, strlen(str));
    1198:	6878      	ldr	r0, [r7, #4]
    119a:	f01b fea7 	bl	1ceec <strlen>
    119e:	4603      	mov	r3, r0
    11a0:	4619      	mov	r1, r3
    11a2:	6878      	ldr	r0, [r7, #4]
    11a4:	f000 f806 	bl	11b4 <qstr_from_strn>
    11a8:	4603      	mov	r3, r0
}
    11aa:	4618      	mov	r0, r3
    11ac:	3708      	adds	r7, #8
    11ae:	46bd      	mov	sp, r7
    11b0:	bd80      	pop	{r7, pc}
    11b2:	bf00      	nop

000011b4 <qstr_from_strn>:

qstr qstr_from_strn(const char *str, size_t len) {
    11b4:	b580      	push	{r7, lr}
    11b6:	b088      	sub	sp, #32
    11b8:	af00      	add	r7, sp, #0
    11ba:	6078      	str	r0, [r7, #4]
    11bc:	6039      	str	r1, [r7, #0]
    assert(len < (1 << (8 * MICROPY_QSTR_BYTES_IN_LEN)));
    11be:	683b      	ldr	r3, [r7, #0]
    11c0:	2bff      	cmp	r3, #255	; 0xff
    11c2:	d905      	bls.n	11d0 <qstr_from_strn+0x1c>
    11c4:	4b56      	ldr	r3, [pc, #344]	; (1320 <qstr_from_strn+0x16c>)
    11c6:	4a57      	ldr	r2, [pc, #348]	; (1324 <qstr_from_strn+0x170>)
    11c8:	21ba      	movs	r1, #186	; 0xba
    11ca:	4857      	ldr	r0, [pc, #348]	; (1328 <qstr_from_strn+0x174>)
    11cc:	f01a fa80 	bl	1b6d0 <__assert_func>
    QSTR_ENTER();
    qstr q = qstr_find_strn(str, len);
    11d0:	6839      	ldr	r1, [r7, #0]
    11d2:	6878      	ldr	r0, [r7, #4]
    11d4:	f7ff ff8a 	bl	10ec <qstr_find_strn>
    11d8:	61f8      	str	r0, [r7, #28]
    if (q == 0) {
    11da:	69fb      	ldr	r3, [r7, #28]
    11dc:	2b00      	cmp	r3, #0
    11de:	f040 8099 	bne.w	1314 <qstr_from_strn+0x160>
        // qstr does not exist in interned pool so need to add it

        // compute number of bytes needed to intern this string
        size_t n_bytes = MICROPY_QSTR_BYTES_IN_HASH + MICROPY_QSTR_BYTES_IN_LEN + len + 1;
    11e2:	683b      	ldr	r3, [r7, #0]
    11e4:	3303      	adds	r3, #3
    11e6:	617b      	str	r3, [r7, #20]

        if (MP_STATE_VM(qstr_last_chunk) != NULL && MP_STATE_VM(qstr_last_used) + n_bytes > MP_STATE_VM(qstr_last_alloc)) {
    11e8:	4b50      	ldr	r3, [pc, #320]	; (132c <qstr_from_strn+0x178>)
    11ea:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
    11ee:	2b00      	cmp	r3, #0
    11f0:	d030      	beq.n	1254 <qstr_from_strn+0xa0>
    11f2:	4b4e      	ldr	r3, [pc, #312]	; (132c <qstr_from_strn+0x178>)
    11f4:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
    11f8:	697b      	ldr	r3, [r7, #20]
    11fa:	441a      	add	r2, r3
    11fc:	4b4b      	ldr	r3, [pc, #300]	; (132c <qstr_from_strn+0x178>)
    11fe:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
    1202:	429a      	cmp	r2, r3
    1204:	d926      	bls.n	1254 <qstr_from_strn+0xa0>
            // not enough room at end of previously interned string so try to grow
            byte *new_p = m_renew_maybe(byte, MP_STATE_VM(qstr_last_chunk), MP_STATE_VM(qstr_last_alloc), MP_STATE_VM(qstr_last_alloc) + n_bytes, false);
    1206:	4b49      	ldr	r3, [pc, #292]	; (132c <qstr_from_strn+0x178>)
    1208:	f8d3 00a4 	ldr.w	r0, [r3, #164]	; 0xa4
    120c:	4b47      	ldr	r3, [pc, #284]	; (132c <qstr_from_strn+0x178>)
    120e:	f8d3 20a8 	ldr.w	r2, [r3, #168]	; 0xa8
    1212:	697b      	ldr	r3, [r7, #20]
    1214:	4413      	add	r3, r2
    1216:	2200      	movs	r2, #0
    1218:	4619      	mov	r1, r3
    121a:	f7ff f8e5 	bl	3e8 <m_realloc_maybe>
    121e:	6138      	str	r0, [r7, #16]
            if (new_p == NULL) {
    1220:	693b      	ldr	r3, [r7, #16]
    1222:	2b00      	cmp	r3, #0
    1224:	d10e      	bne.n	1244 <qstr_from_strn+0x90>
                // could not grow existing memory; shrink it to fit previous
                (void)m_renew_maybe(byte, MP_STATE_VM(qstr_last_chunk), MP_STATE_VM(qstr_last_alloc), MP_STATE_VM(qstr_last_used), false);
    1226:	4b41      	ldr	r3, [pc, #260]	; (132c <qstr_from_strn+0x178>)
    1228:	f8d3 00a4 	ldr.w	r0, [r3, #164]	; 0xa4
    122c:	4b3f      	ldr	r3, [pc, #252]	; (132c <qstr_from_strn+0x178>)
    122e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
    1232:	2200      	movs	r2, #0
    1234:	4619      	mov	r1, r3
    1236:	f7ff f8d7 	bl	3e8 <m_realloc_maybe>
                MP_STATE_VM(qstr_last_chunk) = NULL;
    123a:	4b3c      	ldr	r3, [pc, #240]	; (132c <qstr_from_strn+0x178>)
    123c:	2200      	movs	r2, #0
    123e:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
    1242:	e007      	b.n	1254 <qstr_from_strn+0xa0>
            } else {
                // could grow existing memory
                MP_STATE_VM(qstr_last_alloc) += n_bytes;
    1244:	4b39      	ldr	r3, [pc, #228]	; (132c <qstr_from_strn+0x178>)
    1246:	f8d3 20a8 	ldr.w	r2, [r3, #168]	; 0xa8
    124a:	697b      	ldr	r3, [r7, #20]
    124c:	4413      	add	r3, r2
    124e:	4a37      	ldr	r2, [pc, #220]	; (132c <qstr_from_strn+0x178>)
    1250:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
            }
        }

        if (MP_STATE_VM(qstr_last_chunk) == NULL) {
    1254:	4b35      	ldr	r3, [pc, #212]	; (132c <qstr_from_strn+0x178>)
    1256:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
    125a:	2b00      	cmp	r3, #0
    125c:	d12b      	bne.n	12b6 <qstr_from_strn+0x102>
            // no existing memory for the interned string so allocate a new chunk
            size_t al = n_bytes;
    125e:	697b      	ldr	r3, [r7, #20]
    1260:	61bb      	str	r3, [r7, #24]
            if (al < MICROPY_ALLOC_QSTR_CHUNK_INIT) {
    1262:	69bb      	ldr	r3, [r7, #24]
    1264:	2b7f      	cmp	r3, #127	; 0x7f
    1266:	d801      	bhi.n	126c <qstr_from_strn+0xb8>
                al = MICROPY_ALLOC_QSTR_CHUNK_INIT;
    1268:	2380      	movs	r3, #128	; 0x80
    126a:	61bb      	str	r3, [r7, #24]
            }
            MP_STATE_VM(qstr_last_chunk) = m_new_maybe(byte, al);
    126c:	69b8      	ldr	r0, [r7, #24]
    126e:	f7ff f86d 	bl	34c <m_malloc_maybe>
    1272:	4602      	mov	r2, r0
    1274:	4b2d      	ldr	r3, [pc, #180]	; (132c <qstr_from_strn+0x178>)
    1276:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
            if (MP_STATE_VM(qstr_last_chunk) == NULL) {
    127a:	4b2c      	ldr	r3, [pc, #176]	; (132c <qstr_from_strn+0x178>)
    127c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
    1280:	2b00      	cmp	r3, #0
    1282:	d110      	bne.n	12a6 <qstr_from_strn+0xf2>
                // failed to allocate a large chunk so try with exact size
                MP_STATE_VM(qstr_last_chunk) = m_new_maybe(byte, n_bytes);
    1284:	6978      	ldr	r0, [r7, #20]
    1286:	f7ff f861 	bl	34c <m_malloc_maybe>
    128a:	4602      	mov	r2, r0
    128c:	4b27      	ldr	r3, [pc, #156]	; (132c <qstr_from_strn+0x178>)
    128e:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
                if (MP_STATE_VM(qstr_last_chunk) == NULL) {
    1292:	4b26      	ldr	r3, [pc, #152]	; (132c <qstr_from_strn+0x178>)
    1294:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
    1298:	2b00      	cmp	r3, #0
    129a:	d102      	bne.n	12a2 <qstr_from_strn+0xee>
                    QSTR_EXIT();
                    m_malloc_fail(n_bytes);
    129c:	6978      	ldr	r0, [r7, #20]
    129e:	f00b ff6b 	bl	d178 <m_malloc_fail>
                }
                al = n_bytes;
    12a2:	697b      	ldr	r3, [r7, #20]
    12a4:	61bb      	str	r3, [r7, #24]
            }
            MP_STATE_VM(qstr_last_alloc) = al;
    12a6:	4a21      	ldr	r2, [pc, #132]	; (132c <qstr_from_strn+0x178>)
    12a8:	69bb      	ldr	r3, [r7, #24]
    12aa:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
            MP_STATE_VM(qstr_last_used) = 0;
    12ae:	4b1f      	ldr	r3, [pc, #124]	; (132c <qstr_from_strn+0x178>)
    12b0:	2200      	movs	r2, #0
    12b2:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
        }

        // allocate memory from the chunk for this new interned string's data
        byte *q_ptr = MP_STATE_VM(qstr_last_chunk) + MP_STATE_VM(qstr_last_used);
    12b6:	4b1d      	ldr	r3, [pc, #116]	; (132c <qstr_from_strn+0x178>)
    12b8:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
    12bc:	4b1b      	ldr	r3, [pc, #108]	; (132c <qstr_from_strn+0x178>)
    12be:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
    12c2:	4413      	add	r3, r2
    12c4:	60fb      	str	r3, [r7, #12]
        MP_STATE_VM(qstr_last_used) += n_bytes;
    12c6:	4b19      	ldr	r3, [pc, #100]	; (132c <qstr_from_strn+0x178>)
    12c8:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
    12cc:	697b      	ldr	r3, [r7, #20]
    12ce:	4413      	add	r3, r2
    12d0:	4a16      	ldr	r2, [pc, #88]	; (132c <qstr_from_strn+0x178>)
    12d2:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

        // store the interned strings' data
        mp_uint_t hash = qstr_compute_hash((const byte*)str, len);
    12d6:	6839      	ldr	r1, [r7, #0]
    12d8:	6878      	ldr	r0, [r7, #4]
    12da:	f7ff fe57 	bl	f8c <qstr_compute_hash>
    12de:	60b8      	str	r0, [r7, #8]
        Q_SET_HASH(q_ptr, hash);
    12e0:	68bb      	ldr	r3, [r7, #8]
    12e2:	b2da      	uxtb	r2, r3
    12e4:	68fb      	ldr	r3, [r7, #12]
    12e6:	701a      	strb	r2, [r3, #0]
        Q_SET_LENGTH(q_ptr, len);
    12e8:	68fb      	ldr	r3, [r7, #12]
    12ea:	3301      	adds	r3, #1
    12ec:	683a      	ldr	r2, [r7, #0]
    12ee:	b2d2      	uxtb	r2, r2
    12f0:	701a      	strb	r2, [r3, #0]
        memcpy(q_ptr + MICROPY_QSTR_BYTES_IN_HASH + MICROPY_QSTR_BYTES_IN_LEN, str, len);
    12f2:	68fb      	ldr	r3, [r7, #12]
    12f4:	3302      	adds	r3, #2
    12f6:	683a      	ldr	r2, [r7, #0]
    12f8:	6879      	ldr	r1, [r7, #4]
    12fa:	4618      	mov	r0, r3
    12fc:	f01b fcbc 	bl	1cc78 <memcpy>
        q_ptr[MICROPY_QSTR_BYTES_IN_HASH + MICROPY_QSTR_BYTES_IN_LEN + len] = '\0';
    1300:	683b      	ldr	r3, [r7, #0]
    1302:	3302      	adds	r3, #2
    1304:	68fa      	ldr	r2, [r7, #12]
    1306:	4413      	add	r3, r2
    1308:	2200      	movs	r2, #0
    130a:	701a      	strb	r2, [r3, #0]
        q = qstr_add(q_ptr);
    130c:	68f8      	ldr	r0, [r7, #12]
    130e:	f7ff fe9b 	bl	1048 <qstr_add>
    1312:	61f8      	str	r0, [r7, #28]
    }
    QSTR_EXIT();
    return q;
    1314:	69fb      	ldr	r3, [r7, #28]
}
    1316:	4618      	mov	r0, r3
    1318:	3720      	adds	r7, #32
    131a:	46bd      	mov	sp, r7
    131c:	bd80      	pop	{r7, pc}
    131e:	bf00      	nop
    1320:	0001f6e4 	.word	0x0001f6e4
    1324:	0001f724 	.word	0x0001f724
    1328:	0001f714 	.word	0x0001f714
    132c:	200012f0 	.word	0x200012f0

00001330 <qstr_hash>:

mp_uint_t qstr_hash(qstr q) {
    1330:	b580      	push	{r7, lr}
    1332:	b082      	sub	sp, #8
    1334:	af00      	add	r7, sp, #0
    1336:	6078      	str	r0, [r7, #4]
    return Q_GET_HASH(find_qstr(q));
    1338:	6878      	ldr	r0, [r7, #4]
    133a:	f7ff fe65 	bl	1008 <find_qstr>
    133e:	4603      	mov	r3, r0
    1340:	781b      	ldrb	r3, [r3, #0]
}
    1342:	4618      	mov	r0, r3
    1344:	3708      	adds	r7, #8
    1346:	46bd      	mov	sp, r7
    1348:	bd80      	pop	{r7, pc}
    134a:	bf00      	nop

0000134c <qstr_len>:

size_t qstr_len(qstr q) {
    134c:	b580      	push	{r7, lr}
    134e:	b084      	sub	sp, #16
    1350:	af00      	add	r7, sp, #0
    1352:	6078      	str	r0, [r7, #4]
    const byte *qd = find_qstr(q);
    1354:	6878      	ldr	r0, [r7, #4]
    1356:	f7ff fe57 	bl	1008 <find_qstr>
    135a:	60f8      	str	r0, [r7, #12]
    return Q_GET_LENGTH(qd);
    135c:	68fb      	ldr	r3, [r7, #12]
    135e:	3301      	adds	r3, #1
    1360:	781b      	ldrb	r3, [r3, #0]
}
    1362:	4618      	mov	r0, r3
    1364:	3710      	adds	r7, #16
    1366:	46bd      	mov	sp, r7
    1368:	bd80      	pop	{r7, pc}
    136a:	bf00      	nop

0000136c <qstr_str>:

const char *qstr_str(qstr q) {
    136c:	b580      	push	{r7, lr}
    136e:	b084      	sub	sp, #16
    1370:	af00      	add	r7, sp, #0
    1372:	6078      	str	r0, [r7, #4]
    const byte *qd = find_qstr(q);
    1374:	6878      	ldr	r0, [r7, #4]
    1376:	f7ff fe47 	bl	1008 <find_qstr>
    137a:	60f8      	str	r0, [r7, #12]
    return (const char*)Q_GET_DATA(qd);
    137c:	68fb      	ldr	r3, [r7, #12]
    137e:	3302      	adds	r3, #2
}
    1380:	4618      	mov	r0, r3
    1382:	3710      	adds	r7, #16
    1384:	46bd      	mov	sp, r7
    1386:	bd80      	pop	{r7, pc}

00001388 <qstr_data>:

const byte *qstr_data(qstr q, size_t *len) {
    1388:	b580      	push	{r7, lr}
    138a:	b084      	sub	sp, #16
    138c:	af00      	add	r7, sp, #0
    138e:	6078      	str	r0, [r7, #4]
    1390:	6039      	str	r1, [r7, #0]
    const byte *qd = find_qstr(q);
    1392:	6878      	ldr	r0, [r7, #4]
    1394:	f7ff fe38 	bl	1008 <find_qstr>
    1398:	60f8      	str	r0, [r7, #12]
    *len = Q_GET_LENGTH(qd);
    139a:	68fb      	ldr	r3, [r7, #12]
    139c:	3301      	adds	r3, #1
    139e:	781b      	ldrb	r3, [r3, #0]
    13a0:	461a      	mov	r2, r3
    13a2:	683b      	ldr	r3, [r7, #0]
    13a4:	601a      	str	r2, [r3, #0]
    return Q_GET_DATA(qd);
    13a6:	68fb      	ldr	r3, [r7, #12]
    13a8:	3302      	adds	r3, #2
}
    13aa:	4618      	mov	r0, r3
    13ac:	3710      	adds	r7, #16
    13ae:	46bd      	mov	sp, r7
    13b0:	bd80      	pop	{r7, pc}
    13b2:	bf00      	nop

000013b4 <qstr_pool_info>:

void qstr_pool_info(size_t *n_pool, size_t *n_qstr, size_t *n_str_data_bytes, size_t *n_total_bytes) {
    13b4:	b580      	push	{r7, lr}
    13b6:	b088      	sub	sp, #32
    13b8:	af00      	add	r7, sp, #0
    13ba:	60f8      	str	r0, [r7, #12]
    13bc:	60b9      	str	r1, [r7, #8]
    13be:	607a      	str	r2, [r7, #4]
    13c0:	603b      	str	r3, [r7, #0]
    QSTR_ENTER();
    *n_pool = 0;
    13c2:	68fb      	ldr	r3, [r7, #12]
    13c4:	2200      	movs	r2, #0
    13c6:	601a      	str	r2, [r3, #0]
    *n_qstr = 0;
    13c8:	68bb      	ldr	r3, [r7, #8]
    13ca:	2200      	movs	r2, #0
    13cc:	601a      	str	r2, [r3, #0]
    *n_str_data_bytes = 0;
    13ce:	687b      	ldr	r3, [r7, #4]
    13d0:	2200      	movs	r2, #0
    13d2:	601a      	str	r2, [r3, #0]
    *n_total_bytes = 0;
    13d4:	683b      	ldr	r3, [r7, #0]
    13d6:	2200      	movs	r2, #0
    13d8:	601a      	str	r2, [r3, #0]
    for (qstr_pool_t *pool = MP_STATE_VM(last_pool); pool != NULL && pool != &CONST_POOL; pool = pool->prev) {
    13da:	4b25      	ldr	r3, [pc, #148]	; (1470 <qstr_pool_info+0xbc>)
    13dc:	691b      	ldr	r3, [r3, #16]
    13de:	61fb      	str	r3, [r7, #28]
    13e0:	e034      	b.n	144c <qstr_pool_info+0x98>
        *n_pool += 1;
    13e2:	68fb      	ldr	r3, [r7, #12]
    13e4:	681b      	ldr	r3, [r3, #0]
    13e6:	1c5a      	adds	r2, r3, #1
    13e8:	68fb      	ldr	r3, [r7, #12]
    13ea:	601a      	str	r2, [r3, #0]
        *n_qstr += pool->len;
    13ec:	68bb      	ldr	r3, [r7, #8]
    13ee:	681a      	ldr	r2, [r3, #0]
    13f0:	69fb      	ldr	r3, [r7, #28]
    13f2:	68db      	ldr	r3, [r3, #12]
    13f4:	441a      	add	r2, r3
    13f6:	68bb      	ldr	r3, [r7, #8]
    13f8:	601a      	str	r2, [r3, #0]
        for (const byte **q = pool->qstrs, **q_top = pool->qstrs + pool->len; q < q_top; q++) {
    13fa:	69fb      	ldr	r3, [r7, #28]
    13fc:	3310      	adds	r3, #16
    13fe:	61bb      	str	r3, [r7, #24]
    1400:	69fb      	ldr	r3, [r7, #28]
    1402:	f103 0210 	add.w	r2, r3, #16
    1406:	69fb      	ldr	r3, [r7, #28]
    1408:	68db      	ldr	r3, [r3, #12]
    140a:	009b      	lsls	r3, r3, #2
    140c:	4413      	add	r3, r2
    140e:	617b      	str	r3, [r7, #20]
    1410:	e00c      	b.n	142c <qstr_pool_info+0x78>
            *n_str_data_bytes += Q_GET_ALLOC(*q);
    1412:	687b      	ldr	r3, [r7, #4]
    1414:	681b      	ldr	r3, [r3, #0]
    1416:	69ba      	ldr	r2, [r7, #24]
    1418:	6812      	ldr	r2, [r2, #0]
    141a:	3201      	adds	r2, #1
    141c:	7812      	ldrb	r2, [r2, #0]
    141e:	4413      	add	r3, r2
    1420:	1cda      	adds	r2, r3, #3
    1422:	687b      	ldr	r3, [r7, #4]
    1424:	601a      	str	r2, [r3, #0]
        for (const byte **q = pool->qstrs, **q_top = pool->qstrs + pool->len; q < q_top; q++) {
    1426:	69bb      	ldr	r3, [r7, #24]
    1428:	3304      	adds	r3, #4
    142a:	61bb      	str	r3, [r7, #24]
    142c:	69ba      	ldr	r2, [r7, #24]
    142e:	697b      	ldr	r3, [r7, #20]
    1430:	429a      	cmp	r2, r3
    1432:	d3ee      	bcc.n	1412 <qstr_pool_info+0x5e>
        }
        #if MICROPY_ENABLE_GC
        *n_total_bytes += gc_nbytes(pool); // this counts actual bytes used in heap
    1434:	69f8      	ldr	r0, [r7, #28]
    1436:	f7ff fb8d 	bl	b54 <gc_nbytes>
    143a:	4602      	mov	r2, r0
    143c:	683b      	ldr	r3, [r7, #0]
    143e:	681b      	ldr	r3, [r3, #0]
    1440:	441a      	add	r2, r3
    1442:	683b      	ldr	r3, [r7, #0]
    1444:	601a      	str	r2, [r3, #0]
    for (qstr_pool_t *pool = MP_STATE_VM(last_pool); pool != NULL && pool != &CONST_POOL; pool = pool->prev) {
    1446:	69fb      	ldr	r3, [r7, #28]
    1448:	681b      	ldr	r3, [r3, #0]
    144a:	61fb      	str	r3, [r7, #28]
    144c:	69fb      	ldr	r3, [r7, #28]
    144e:	2b00      	cmp	r3, #0
    1450:	d003      	beq.n	145a <qstr_pool_info+0xa6>
    1452:	69fb      	ldr	r3, [r7, #28]
    1454:	4a07      	ldr	r2, [pc, #28]	; (1474 <qstr_pool_info+0xc0>)
    1456:	4293      	cmp	r3, r2
    1458:	d1c3      	bne.n	13e2 <qstr_pool_info+0x2e>
        #else
        *n_total_bytes += sizeof(qstr_pool_t) + sizeof(qstr) * pool->alloc;
        #endif
    }
    *n_total_bytes += *n_str_data_bytes;
    145a:	683b      	ldr	r3, [r7, #0]
    145c:	681a      	ldr	r2, [r3, #0]
    145e:	687b      	ldr	r3, [r7, #4]
    1460:	681b      	ldr	r3, [r3, #0]
    1462:	441a      	add	r2, r3
    1464:	683b      	ldr	r3, [r7, #0]
    1466:	601a      	str	r2, [r3, #0]
    QSTR_EXIT();
}
    1468:	bf00      	nop
    146a:	3720      	adds	r7, #32
    146c:	46bd      	mov	sp, r7
    146e:	bd80      	pop	{r7, pc}
    1470:	200012f0 	.word	0x200012f0
    1474:	00025db0 	.word	0x00025db0

00001478 <vstr_init>:

// returned value is always at least 1 greater than argument
#define ROUND_ALLOC(a) (((a) & ((~0U) - 7)) + 8)

// Init the vstr so it allocs exactly given number of bytes.  Set length to zero.
void vstr_init(vstr_t *vstr, size_t alloc) {
    1478:	b580      	push	{r7, lr}
    147a:	b082      	sub	sp, #8
    147c:	af00      	add	r7, sp, #0
    147e:	6078      	str	r0, [r7, #4]
    1480:	6039      	str	r1, [r7, #0]
    if (alloc < 1) {
    1482:	683b      	ldr	r3, [r7, #0]
    1484:	2b00      	cmp	r3, #0
    1486:	d101      	bne.n	148c <vstr_init+0x14>
        alloc = 1;
    1488:	2301      	movs	r3, #1
    148a:	603b      	str	r3, [r7, #0]
    }
    vstr->alloc = alloc;
    148c:	687b      	ldr	r3, [r7, #4]
    148e:	683a      	ldr	r2, [r7, #0]
    1490:	601a      	str	r2, [r3, #0]
    vstr->len = 0;
    1492:	687b      	ldr	r3, [r7, #4]
    1494:	2200      	movs	r2, #0
    1496:	605a      	str	r2, [r3, #4]
    vstr->buf = m_new(char, vstr->alloc);
    1498:	687b      	ldr	r3, [r7, #4]
    149a:	681b      	ldr	r3, [r3, #0]
    149c:	4618      	mov	r0, r3
    149e:	f7fe ff3d 	bl	31c <m_malloc>
    14a2:	4602      	mov	r2, r0
    14a4:	687b      	ldr	r3, [r7, #4]
    14a6:	609a      	str	r2, [r3, #8]
    vstr->fixed_buf = false;
    14a8:	687a      	ldr	r2, [r7, #4]
    14aa:	7b13      	ldrb	r3, [r2, #12]
    14ac:	f36f 0300 	bfc	r3, #0, #1
    14b0:	7313      	strb	r3, [r2, #12]
}
    14b2:	bf00      	nop
    14b4:	3708      	adds	r7, #8
    14b6:	46bd      	mov	sp, r7
    14b8:	bd80      	pop	{r7, pc}
    14ba:	bf00      	nop

000014bc <vstr_init_len>:

// Init the vstr so it allocs exactly enough ram to hold a null-terminated
// string of the given length, and set the length.
void vstr_init_len(vstr_t *vstr, size_t len) {
    14bc:	b580      	push	{r7, lr}
    14be:	b082      	sub	sp, #8
    14c0:	af00      	add	r7, sp, #0
    14c2:	6078      	str	r0, [r7, #4]
    14c4:	6039      	str	r1, [r7, #0]
    vstr_init(vstr, len + 1);
    14c6:	683b      	ldr	r3, [r7, #0]
    14c8:	3301      	adds	r3, #1
    14ca:	4619      	mov	r1, r3
    14cc:	6878      	ldr	r0, [r7, #4]
    14ce:	f7ff ffd3 	bl	1478 <vstr_init>
    vstr->len = len;
    14d2:	687b      	ldr	r3, [r7, #4]
    14d4:	683a      	ldr	r2, [r7, #0]
    14d6:	605a      	str	r2, [r3, #4]
}
    14d8:	bf00      	nop
    14da:	3708      	adds	r7, #8
    14dc:	46bd      	mov	sp, r7
    14de:	bd80      	pop	{r7, pc}

000014e0 <vstr_init_fixed_buf>:

void vstr_init_fixed_buf(vstr_t *vstr, size_t alloc, char *buf) {
    14e0:	b480      	push	{r7}
    14e2:	b085      	sub	sp, #20
    14e4:	af00      	add	r7, sp, #0
    14e6:	60f8      	str	r0, [r7, #12]
    14e8:	60b9      	str	r1, [r7, #8]
    14ea:	607a      	str	r2, [r7, #4]
    vstr->alloc = alloc;
    14ec:	68fb      	ldr	r3, [r7, #12]
    14ee:	68ba      	ldr	r2, [r7, #8]
    14f0:	601a      	str	r2, [r3, #0]
    vstr->len = 0;
    14f2:	68fb      	ldr	r3, [r7, #12]
    14f4:	2200      	movs	r2, #0
    14f6:	605a      	str	r2, [r3, #4]
    vstr->buf = buf;
    14f8:	68fb      	ldr	r3, [r7, #12]
    14fa:	687a      	ldr	r2, [r7, #4]
    14fc:	609a      	str	r2, [r3, #8]
    vstr->fixed_buf = true;
    14fe:	68fa      	ldr	r2, [r7, #12]
    1500:	7b13      	ldrb	r3, [r2, #12]
    1502:	f043 0301 	orr.w	r3, r3, #1
    1506:	7313      	strb	r3, [r2, #12]
}
    1508:	bf00      	nop
    150a:	3714      	adds	r7, #20
    150c:	46bd      	mov	sp, r7
    150e:	f85d 7b04 	ldr.w	r7, [sp], #4
    1512:	4770      	bx	lr

00001514 <vstr_init_print>:

void vstr_init_print(vstr_t *vstr, size_t alloc, mp_print_t *print) {
    1514:	b580      	push	{r7, lr}
    1516:	b084      	sub	sp, #16
    1518:	af00      	add	r7, sp, #0
    151a:	60f8      	str	r0, [r7, #12]
    151c:	60b9      	str	r1, [r7, #8]
    151e:	607a      	str	r2, [r7, #4]
    vstr_init(vstr, alloc);
    1520:	68b9      	ldr	r1, [r7, #8]
    1522:	68f8      	ldr	r0, [r7, #12]
    1524:	f7ff ffa8 	bl	1478 <vstr_init>
    print->data = vstr;
    1528:	687b      	ldr	r3, [r7, #4]
    152a:	68fa      	ldr	r2, [r7, #12]
    152c:	601a      	str	r2, [r3, #0]
    print->print_strn = (mp_print_strn_t)vstr_add_strn;
    152e:	687b      	ldr	r3, [r7, #4]
    1530:	4a02      	ldr	r2, [pc, #8]	; (153c <vstr_init_print+0x28>)
    1532:	605a      	str	r2, [r3, #4]
}
    1534:	bf00      	nop
    1536:	3710      	adds	r7, #16
    1538:	46bd      	mov	sp, r7
    153a:	bd80      	pop	{r7, pc}
    153c:	0000178d 	.word	0x0000178d

00001540 <vstr_clear>:

void vstr_clear(vstr_t *vstr) {
    1540:	b580      	push	{r7, lr}
    1542:	b082      	sub	sp, #8
    1544:	af00      	add	r7, sp, #0
    1546:	6078      	str	r0, [r7, #4]
    if (!vstr->fixed_buf) {
    1548:	687b      	ldr	r3, [r7, #4]
    154a:	7b1b      	ldrb	r3, [r3, #12]
    154c:	f3c3 0300 	ubfx	r3, r3, #0, #1
    1550:	b2db      	uxtb	r3, r3
    1552:	f083 0301 	eor.w	r3, r3, #1
    1556:	b2db      	uxtb	r3, r3
    1558:	2b00      	cmp	r3, #0
    155a:	d004      	beq.n	1566 <vstr_clear+0x26>
        m_del(char, vstr->buf, vstr->alloc);
    155c:	687b      	ldr	r3, [r7, #4]
    155e:	689b      	ldr	r3, [r3, #8]
    1560:	4618      	mov	r0, r3
    1562:	f7fe ff55 	bl	410 <m_free>
    }
    vstr->buf = NULL;
    1566:	687b      	ldr	r3, [r7, #4]
    1568:	2200      	movs	r2, #0
    156a:	609a      	str	r2, [r3, #8]
}
    156c:	bf00      	nop
    156e:	3708      	adds	r7, #8
    1570:	46bd      	mov	sp, r7
    1572:	bd80      	pop	{r7, pc}

00001574 <vstr_new>:

vstr_t *vstr_new(size_t alloc) {
    1574:	b580      	push	{r7, lr}
    1576:	b084      	sub	sp, #16
    1578:	af00      	add	r7, sp, #0
    157a:	6078      	str	r0, [r7, #4]
    vstr_t *vstr = m_new_obj(vstr_t);
    157c:	2010      	movs	r0, #16
    157e:	f7fe fecd 	bl	31c <m_malloc>
    1582:	60f8      	str	r0, [r7, #12]
    vstr_init(vstr, alloc);
    1584:	6879      	ldr	r1, [r7, #4]
    1586:	68f8      	ldr	r0, [r7, #12]
    1588:	f7ff ff76 	bl	1478 <vstr_init>
    return vstr;
    158c:	68fb      	ldr	r3, [r7, #12]
}
    158e:	4618      	mov	r0, r3
    1590:	3710      	adds	r7, #16
    1592:	46bd      	mov	sp, r7
    1594:	bd80      	pop	{r7, pc}
    1596:	bf00      	nop

00001598 <vstr_free>:

void vstr_free(vstr_t *vstr) {
    1598:	b580      	push	{r7, lr}
    159a:	b082      	sub	sp, #8
    159c:	af00      	add	r7, sp, #0
    159e:	6078      	str	r0, [r7, #4]
    if (vstr != NULL) {
    15a0:	687b      	ldr	r3, [r7, #4]
    15a2:	2b00      	cmp	r3, #0
    15a4:	d011      	beq.n	15ca <vstr_free+0x32>
        if (!vstr->fixed_buf) {
    15a6:	687b      	ldr	r3, [r7, #4]
    15a8:	7b1b      	ldrb	r3, [r3, #12]
    15aa:	f3c3 0300 	ubfx	r3, r3, #0, #1
    15ae:	b2db      	uxtb	r3, r3
    15b0:	f083 0301 	eor.w	r3, r3, #1
    15b4:	b2db      	uxtb	r3, r3
    15b6:	2b00      	cmp	r3, #0
    15b8:	d004      	beq.n	15c4 <vstr_free+0x2c>
            m_del(char, vstr->buf, vstr->alloc);
    15ba:	687b      	ldr	r3, [r7, #4]
    15bc:	689b      	ldr	r3, [r3, #8]
    15be:	4618      	mov	r0, r3
    15c0:	f7fe ff26 	bl	410 <m_free>
        }
        m_del_obj(vstr_t, vstr);
    15c4:	6878      	ldr	r0, [r7, #4]
    15c6:	f7fe ff23 	bl	410 <m_free>
    }
}
    15ca:	bf00      	nop
    15cc:	3708      	adds	r7, #8
    15ce:	46bd      	mov	sp, r7
    15d0:	bd80      	pop	{r7, pc}
    15d2:	bf00      	nop

000015d4 <vstr_extend>:

// Extend vstr strictly by requested size, return pointer to newly added chunk.
char *vstr_extend(vstr_t *vstr, size_t size) {
    15d4:	b580      	push	{r7, lr}
    15d6:	b084      	sub	sp, #16
    15d8:	af00      	add	r7, sp, #0
    15da:	6078      	str	r0, [r7, #4]
    15dc:	6039      	str	r1, [r7, #0]
    if (vstr->fixed_buf) {
    15de:	687b      	ldr	r3, [r7, #4]
    15e0:	7b1b      	ldrb	r3, [r3, #12]
    15e2:	f3c3 0300 	ubfx	r3, r3, #0, #1
    15e6:	b2db      	uxtb	r3, r3
    15e8:	2b00      	cmp	r3, #0
    15ea:	d003      	beq.n	15f4 <vstr_extend+0x20>
        // We can't reallocate, and the caller is expecting the space to
        // be there, so the only safe option is to raise an exception.
        mp_raise_msg(&mp_type_RuntimeError, NULL);
    15ec:	2100      	movs	r1, #0
    15ee:	4810      	ldr	r0, [pc, #64]	; (1630 <vstr_extend+0x5c>)
    15f0:	f00b fdde 	bl	d1b0 <mp_raise_msg>
    }
    char *new_buf = m_renew(char, vstr->buf, vstr->alloc, vstr->alloc + size);
    15f4:	687b      	ldr	r3, [r7, #4]
    15f6:	6898      	ldr	r0, [r3, #8]
    15f8:	687b      	ldr	r3, [r7, #4]
    15fa:	681a      	ldr	r2, [r3, #0]
    15fc:	683b      	ldr	r3, [r7, #0]
    15fe:	4413      	add	r3, r2
    1600:	4619      	mov	r1, r3
    1602:	f7fe fed7 	bl	3b4 <m_realloc>
    1606:	60f8      	str	r0, [r7, #12]
    char *p = new_buf + vstr->alloc;
    1608:	687b      	ldr	r3, [r7, #4]
    160a:	681b      	ldr	r3, [r3, #0]
    160c:	68fa      	ldr	r2, [r7, #12]
    160e:	4413      	add	r3, r2
    1610:	60bb      	str	r3, [r7, #8]
    vstr->alloc += size;
    1612:	687b      	ldr	r3, [r7, #4]
    1614:	681a      	ldr	r2, [r3, #0]
    1616:	683b      	ldr	r3, [r7, #0]
    1618:	441a      	add	r2, r3
    161a:	687b      	ldr	r3, [r7, #4]
    161c:	601a      	str	r2, [r3, #0]
    vstr->buf = new_buf;
    161e:	687b      	ldr	r3, [r7, #4]
    1620:	68fa      	ldr	r2, [r7, #12]
    1622:	609a      	str	r2, [r3, #8]
    return p;
    1624:	68bb      	ldr	r3, [r7, #8]
}
    1626:	4618      	mov	r0, r3
    1628:	3710      	adds	r7, #16
    162a:	46bd      	mov	sp, r7
    162c:	bd80      	pop	{r7, pc}
    162e:	bf00      	nop
    1630:	000225a8 	.word	0x000225a8

00001634 <vstr_ensure_extra>:

STATIC void vstr_ensure_extra(vstr_t *vstr, size_t size) {
    1634:	b580      	push	{r7, lr}
    1636:	b084      	sub	sp, #16
    1638:	af00      	add	r7, sp, #0
    163a:	6078      	str	r0, [r7, #4]
    163c:	6039      	str	r1, [r7, #0]
    if (vstr->len + size > vstr->alloc) {
    163e:	687b      	ldr	r3, [r7, #4]
    1640:	685a      	ldr	r2, [r3, #4]
    1642:	683b      	ldr	r3, [r7, #0]
    1644:	441a      	add	r2, r3
    1646:	687b      	ldr	r3, [r7, #4]
    1648:	681b      	ldr	r3, [r3, #0]
    164a:	429a      	cmp	r2, r3
    164c:	d920      	bls.n	1690 <vstr_ensure_extra+0x5c>
        if (vstr->fixed_buf) {
    164e:	687b      	ldr	r3, [r7, #4]
    1650:	7b1b      	ldrb	r3, [r3, #12]
    1652:	f3c3 0300 	ubfx	r3, r3, #0, #1
    1656:	b2db      	uxtb	r3, r3
    1658:	2b00      	cmp	r3, #0
    165a:	d003      	beq.n	1664 <vstr_ensure_extra+0x30>
            // We can't reallocate, and the caller is expecting the space to
            // be there, so the only safe option is to raise an exception.
            mp_raise_msg(&mp_type_RuntimeError, NULL);
    165c:	2100      	movs	r1, #0
    165e:	480e      	ldr	r0, [pc, #56]	; (1698 <vstr_ensure_extra+0x64>)
    1660:	f00b fda6 	bl	d1b0 <mp_raise_msg>
        }
        size_t new_alloc = ROUND_ALLOC((vstr->len + size) + 16);
    1664:	687b      	ldr	r3, [r7, #4]
    1666:	685a      	ldr	r2, [r3, #4]
    1668:	683b      	ldr	r3, [r7, #0]
    166a:	4413      	add	r3, r2
    166c:	3310      	adds	r3, #16
    166e:	f023 0307 	bic.w	r3, r3, #7
    1672:	3308      	adds	r3, #8
    1674:	60fb      	str	r3, [r7, #12]
        char *new_buf = m_renew(char, vstr->buf, vstr->alloc, new_alloc);
    1676:	687b      	ldr	r3, [r7, #4]
    1678:	689b      	ldr	r3, [r3, #8]
    167a:	68f9      	ldr	r1, [r7, #12]
    167c:	4618      	mov	r0, r3
    167e:	f7fe fe99 	bl	3b4 <m_realloc>
    1682:	60b8      	str	r0, [r7, #8]
        vstr->alloc = new_alloc;
    1684:	687b      	ldr	r3, [r7, #4]
    1686:	68fa      	ldr	r2, [r7, #12]
    1688:	601a      	str	r2, [r3, #0]
        vstr->buf = new_buf;
    168a:	687b      	ldr	r3, [r7, #4]
    168c:	68ba      	ldr	r2, [r7, #8]
    168e:	609a      	str	r2, [r3, #8]
    }
}
    1690:	bf00      	nop
    1692:	3710      	adds	r7, #16
    1694:	46bd      	mov	sp, r7
    1696:	bd80      	pop	{r7, pc}
    1698:	000225a8 	.word	0x000225a8

0000169c <vstr_hint_size>:

void vstr_hint_size(vstr_t *vstr, size_t size) {
    169c:	b580      	push	{r7, lr}
    169e:	b082      	sub	sp, #8
    16a0:	af00      	add	r7, sp, #0
    16a2:	6078      	str	r0, [r7, #4]
    16a4:	6039      	str	r1, [r7, #0]
    vstr_ensure_extra(vstr, size);
    16a6:	6839      	ldr	r1, [r7, #0]
    16a8:	6878      	ldr	r0, [r7, #4]
    16aa:	f7ff ffc3 	bl	1634 <vstr_ensure_extra>
}
    16ae:	bf00      	nop
    16b0:	3708      	adds	r7, #8
    16b2:	46bd      	mov	sp, r7
    16b4:	bd80      	pop	{r7, pc}
    16b6:	bf00      	nop

000016b8 <vstr_add_len>:

char *vstr_add_len(vstr_t *vstr, size_t len) {
    16b8:	b580      	push	{r7, lr}
    16ba:	b084      	sub	sp, #16
    16bc:	af00      	add	r7, sp, #0
    16be:	6078      	str	r0, [r7, #4]
    16c0:	6039      	str	r1, [r7, #0]
    vstr_ensure_extra(vstr, len);
    16c2:	6839      	ldr	r1, [r7, #0]
    16c4:	6878      	ldr	r0, [r7, #4]
    16c6:	f7ff ffb5 	bl	1634 <vstr_ensure_extra>
    char *buf = vstr->buf + vstr->len;
    16ca:	687b      	ldr	r3, [r7, #4]
    16cc:	689a      	ldr	r2, [r3, #8]
    16ce:	687b      	ldr	r3, [r7, #4]
    16d0:	685b      	ldr	r3, [r3, #4]
    16d2:	4413      	add	r3, r2
    16d4:	60fb      	str	r3, [r7, #12]
    vstr->len += len;
    16d6:	687b      	ldr	r3, [r7, #4]
    16d8:	685a      	ldr	r2, [r3, #4]
    16da:	683b      	ldr	r3, [r7, #0]
    16dc:	441a      	add	r2, r3
    16de:	687b      	ldr	r3, [r7, #4]
    16e0:	605a      	str	r2, [r3, #4]
    return buf;
    16e2:	68fb      	ldr	r3, [r7, #12]
}
    16e4:	4618      	mov	r0, r3
    16e6:	3710      	adds	r7, #16
    16e8:	46bd      	mov	sp, r7
    16ea:	bd80      	pop	{r7, pc}

000016ec <vstr_null_terminated_str>:

// Doesn't increase len, just makes sure there is a null byte at the end
char *vstr_null_terminated_str(vstr_t *vstr) {
    16ec:	b580      	push	{r7, lr}
    16ee:	b082      	sub	sp, #8
    16f0:	af00      	add	r7, sp, #0
    16f2:	6078      	str	r0, [r7, #4]
    // If there's no more room, add single byte
    if (vstr->alloc == vstr->len) {
    16f4:	687b      	ldr	r3, [r7, #4]
    16f6:	681a      	ldr	r2, [r3, #0]
    16f8:	687b      	ldr	r3, [r7, #4]
    16fa:	685b      	ldr	r3, [r3, #4]
    16fc:	429a      	cmp	r2, r3
    16fe:	d103      	bne.n	1708 <vstr_null_terminated_str+0x1c>
        vstr_extend(vstr, 1);
    1700:	2101      	movs	r1, #1
    1702:	6878      	ldr	r0, [r7, #4]
    1704:	f7ff ff66 	bl	15d4 <vstr_extend>
    }
    vstr->buf[vstr->len] = '\0';
    1708:	687b      	ldr	r3, [r7, #4]
    170a:	689a      	ldr	r2, [r3, #8]
    170c:	687b      	ldr	r3, [r7, #4]
    170e:	685b      	ldr	r3, [r3, #4]
    1710:	4413      	add	r3, r2
    1712:	2200      	movs	r2, #0
    1714:	701a      	strb	r2, [r3, #0]
    return vstr->buf;
    1716:	687b      	ldr	r3, [r7, #4]
    1718:	689b      	ldr	r3, [r3, #8]
}
    171a:	4618      	mov	r0, r3
    171c:	3708      	adds	r7, #8
    171e:	46bd      	mov	sp, r7
    1720:	bd80      	pop	{r7, pc}
    1722:	bf00      	nop

00001724 <vstr_add_byte>:

void vstr_add_byte(vstr_t *vstr, byte b) {
    1724:	b580      	push	{r7, lr}
    1726:	b084      	sub	sp, #16
    1728:	af00      	add	r7, sp, #0
    172a:	6078      	str	r0, [r7, #4]
    172c:	460b      	mov	r3, r1
    172e:	70fb      	strb	r3, [r7, #3]
    byte *buf = (byte*)vstr_add_len(vstr, 1);
    1730:	2101      	movs	r1, #1
    1732:	6878      	ldr	r0, [r7, #4]
    1734:	f7ff ffc0 	bl	16b8 <vstr_add_len>
    1738:	60f8      	str	r0, [r7, #12]
    buf[0] = b;
    173a:	68fb      	ldr	r3, [r7, #12]
    173c:	78fa      	ldrb	r2, [r7, #3]
    173e:	701a      	strb	r2, [r3, #0]
}
    1740:	bf00      	nop
    1742:	3710      	adds	r7, #16
    1744:	46bd      	mov	sp, r7
    1746:	bd80      	pop	{r7, pc}

00001748 <vstr_add_char>:

void vstr_add_char(vstr_t *vstr, unichar c) {
    1748:	b580      	push	{r7, lr}
    174a:	b082      	sub	sp, #8
    174c:	af00      	add	r7, sp, #0
    174e:	6078      	str	r0, [r7, #4]
    1750:	6039      	str	r1, [r7, #0]
        buf[1] = ((c >> 12) & 0x3F) | 0x80;
        buf[2] = ((c >> 6) & 0x3F) | 0x80;
        buf[3] = (c & 0x3F) | 0x80;
    }
#else
    vstr_add_byte(vstr, c);
    1752:	683b      	ldr	r3, [r7, #0]
    1754:	b2db      	uxtb	r3, r3
    1756:	4619      	mov	r1, r3
    1758:	6878      	ldr	r0, [r7, #4]
    175a:	f7ff ffe3 	bl	1724 <vstr_add_byte>
#endif
}
    175e:	bf00      	nop
    1760:	3708      	adds	r7, #8
    1762:	46bd      	mov	sp, r7
    1764:	bd80      	pop	{r7, pc}
    1766:	bf00      	nop

00001768 <vstr_add_str>:

void vstr_add_str(vstr_t *vstr, const char *str) {
    1768:	b580      	push	{r7, lr}
    176a:	b082      	sub	sp, #8
    176c:	af00      	add	r7, sp, #0
    176e:	6078      	str	r0, [r7, #4]
    1770:	6039      	str	r1, [r7, #0]
    vstr_add_strn(vstr, str, strlen(str));
    1772:	6838      	ldr	r0, [r7, #0]
    1774:	f01b fbba 	bl	1ceec <strlen>
    1778:	4603      	mov	r3, r0
    177a:	461a      	mov	r2, r3
    177c:	6839      	ldr	r1, [r7, #0]
    177e:	6878      	ldr	r0, [r7, #4]
    1780:	f000 f804 	bl	178c <vstr_add_strn>
}
    1784:	bf00      	nop
    1786:	3708      	adds	r7, #8
    1788:	46bd      	mov	sp, r7
    178a:	bd80      	pop	{r7, pc}

0000178c <vstr_add_strn>:

void vstr_add_strn(vstr_t *vstr, const char *str, size_t len) {
    178c:	b580      	push	{r7, lr}
    178e:	b084      	sub	sp, #16
    1790:	af00      	add	r7, sp, #0
    1792:	60f8      	str	r0, [r7, #12]
    1794:	60b9      	str	r1, [r7, #8]
    1796:	607a      	str	r2, [r7, #4]
    vstr_ensure_extra(vstr, len);
    1798:	6879      	ldr	r1, [r7, #4]
    179a:	68f8      	ldr	r0, [r7, #12]
    179c:	f7ff ff4a 	bl	1634 <vstr_ensure_extra>
    memmove(vstr->buf + vstr->len, str, len);
    17a0:	68fb      	ldr	r3, [r7, #12]
    17a2:	689a      	ldr	r2, [r3, #8]
    17a4:	68fb      	ldr	r3, [r7, #12]
    17a6:	685b      	ldr	r3, [r3, #4]
    17a8:	4413      	add	r3, r2
    17aa:	687a      	ldr	r2, [r7, #4]
    17ac:	68b9      	ldr	r1, [r7, #8]
    17ae:	4618      	mov	r0, r3
    17b0:	f01b fac8 	bl	1cd44 <memmove>
    vstr->len += len;
    17b4:	68fb      	ldr	r3, [r7, #12]
    17b6:	685a      	ldr	r2, [r3, #4]
    17b8:	687b      	ldr	r3, [r7, #4]
    17ba:	441a      	add	r2, r3
    17bc:	68fb      	ldr	r3, [r7, #12]
    17be:	605a      	str	r2, [r3, #4]
}
    17c0:	bf00      	nop
    17c2:	3710      	adds	r7, #16
    17c4:	46bd      	mov	sp, r7
    17c6:	bd80      	pop	{r7, pc}

000017c8 <vstr_ins_blank_bytes>:

STATIC char *vstr_ins_blank_bytes(vstr_t *vstr, size_t byte_pos, size_t byte_len) {
    17c8:	b580      	push	{r7, lr}
    17ca:	b086      	sub	sp, #24
    17cc:	af00      	add	r7, sp, #0
    17ce:	60f8      	str	r0, [r7, #12]
    17d0:	60b9      	str	r1, [r7, #8]
    17d2:	607a      	str	r2, [r7, #4]
    size_t l = vstr->len;
    17d4:	68fb      	ldr	r3, [r7, #12]
    17d6:	685b      	ldr	r3, [r3, #4]
    17d8:	617b      	str	r3, [r7, #20]
    if (byte_pos > l) {
    17da:	68ba      	ldr	r2, [r7, #8]
    17dc:	697b      	ldr	r3, [r7, #20]
    17de:	429a      	cmp	r2, r3
    17e0:	d901      	bls.n	17e6 <vstr_ins_blank_bytes+0x1e>
        byte_pos = l;
    17e2:	697b      	ldr	r3, [r7, #20]
    17e4:	60bb      	str	r3, [r7, #8]
    }
    if (byte_len > 0) {
    17e6:	687b      	ldr	r3, [r7, #4]
    17e8:	2b00      	cmp	r3, #0
    17ea:	d019      	beq.n	1820 <vstr_ins_blank_bytes+0x58>
        // ensure room for the new bytes
        vstr_ensure_extra(vstr, byte_len);
    17ec:	6879      	ldr	r1, [r7, #4]
    17ee:	68f8      	ldr	r0, [r7, #12]
    17f0:	f7ff ff20 	bl	1634 <vstr_ensure_extra>
        // copy up the string to make room for the new bytes
        memmove(vstr->buf + byte_pos + byte_len, vstr->buf + byte_pos, l - byte_pos);
    17f4:	68fb      	ldr	r3, [r7, #12]
    17f6:	689a      	ldr	r2, [r3, #8]
    17f8:	68b9      	ldr	r1, [r7, #8]
    17fa:	687b      	ldr	r3, [r7, #4]
    17fc:	440b      	add	r3, r1
    17fe:	18d0      	adds	r0, r2, r3
    1800:	68fb      	ldr	r3, [r7, #12]
    1802:	689a      	ldr	r2, [r3, #8]
    1804:	68bb      	ldr	r3, [r7, #8]
    1806:	18d1      	adds	r1, r2, r3
    1808:	697a      	ldr	r2, [r7, #20]
    180a:	68bb      	ldr	r3, [r7, #8]
    180c:	1ad3      	subs	r3, r2, r3
    180e:	461a      	mov	r2, r3
    1810:	f01b fa98 	bl	1cd44 <memmove>
        // increase the length
        vstr->len += byte_len;
    1814:	68fb      	ldr	r3, [r7, #12]
    1816:	685a      	ldr	r2, [r3, #4]
    1818:	687b      	ldr	r3, [r7, #4]
    181a:	441a      	add	r2, r3
    181c:	68fb      	ldr	r3, [r7, #12]
    181e:	605a      	str	r2, [r3, #4]
    }
    return vstr->buf + byte_pos;
    1820:	68fb      	ldr	r3, [r7, #12]
    1822:	689a      	ldr	r2, [r3, #8]
    1824:	68bb      	ldr	r3, [r7, #8]
    1826:	4413      	add	r3, r2
}
    1828:	4618      	mov	r0, r3
    182a:	3718      	adds	r7, #24
    182c:	46bd      	mov	sp, r7
    182e:	bd80      	pop	{r7, pc}

00001830 <vstr_ins_byte>:

void vstr_ins_byte(vstr_t *vstr, size_t byte_pos, byte b) {
    1830:	b580      	push	{r7, lr}
    1832:	b086      	sub	sp, #24
    1834:	af00      	add	r7, sp, #0
    1836:	60f8      	str	r0, [r7, #12]
    1838:	60b9      	str	r1, [r7, #8]
    183a:	4613      	mov	r3, r2
    183c:	71fb      	strb	r3, [r7, #7]
    char *s = vstr_ins_blank_bytes(vstr, byte_pos, 1);
    183e:	2201      	movs	r2, #1
    1840:	68b9      	ldr	r1, [r7, #8]
    1842:	68f8      	ldr	r0, [r7, #12]
    1844:	f7ff ffc0 	bl	17c8 <vstr_ins_blank_bytes>
    1848:	6178      	str	r0, [r7, #20]
    *s = b;
    184a:	697b      	ldr	r3, [r7, #20]
    184c:	79fa      	ldrb	r2, [r7, #7]
    184e:	701a      	strb	r2, [r3, #0]
}
    1850:	bf00      	nop
    1852:	3718      	adds	r7, #24
    1854:	46bd      	mov	sp, r7
    1856:	bd80      	pop	{r7, pc}

00001858 <vstr_ins_char>:

void vstr_ins_char(vstr_t *vstr, size_t char_pos, unichar chr) {
    1858:	b580      	push	{r7, lr}
    185a:	b086      	sub	sp, #24
    185c:	af00      	add	r7, sp, #0
    185e:	60f8      	str	r0, [r7, #12]
    1860:	60b9      	str	r1, [r7, #8]
    1862:	607a      	str	r2, [r7, #4]
    // TODO UNICODE
    char *s = vstr_ins_blank_bytes(vstr, char_pos, 1);
    1864:	2201      	movs	r2, #1
    1866:	68b9      	ldr	r1, [r7, #8]
    1868:	68f8      	ldr	r0, [r7, #12]
    186a:	f7ff ffad 	bl	17c8 <vstr_ins_blank_bytes>
    186e:	6178      	str	r0, [r7, #20]
    *s = chr;
    1870:	687b      	ldr	r3, [r7, #4]
    1872:	b2da      	uxtb	r2, r3
    1874:	697b      	ldr	r3, [r7, #20]
    1876:	701a      	strb	r2, [r3, #0]
}
    1878:	bf00      	nop
    187a:	3718      	adds	r7, #24
    187c:	46bd      	mov	sp, r7
    187e:	bd80      	pop	{r7, pc}

00001880 <vstr_cut_head_bytes>:

void vstr_cut_head_bytes(vstr_t *vstr, size_t bytes_to_cut) {
    1880:	b580      	push	{r7, lr}
    1882:	b082      	sub	sp, #8
    1884:	af00      	add	r7, sp, #0
    1886:	6078      	str	r0, [r7, #4]
    1888:	6039      	str	r1, [r7, #0]
    vstr_cut_out_bytes(vstr, 0, bytes_to_cut);
    188a:	683a      	ldr	r2, [r7, #0]
    188c:	2100      	movs	r1, #0
    188e:	6878      	ldr	r0, [r7, #4]
    1890:	f000 f81e 	bl	18d0 <vstr_cut_out_bytes>
}
    1894:	bf00      	nop
    1896:	3708      	adds	r7, #8
    1898:	46bd      	mov	sp, r7
    189a:	bd80      	pop	{r7, pc}

0000189c <vstr_cut_tail_bytes>:

void vstr_cut_tail_bytes(vstr_t *vstr, size_t len) {
    189c:	b480      	push	{r7}
    189e:	b083      	sub	sp, #12
    18a0:	af00      	add	r7, sp, #0
    18a2:	6078      	str	r0, [r7, #4]
    18a4:	6039      	str	r1, [r7, #0]
    if (len > vstr->len) {
    18a6:	687b      	ldr	r3, [r7, #4]
    18a8:	685a      	ldr	r2, [r3, #4]
    18aa:	683b      	ldr	r3, [r7, #0]
    18ac:	429a      	cmp	r2, r3
    18ae:	d203      	bcs.n	18b8 <vstr_cut_tail_bytes+0x1c>
        vstr->len = 0;
    18b0:	687b      	ldr	r3, [r7, #4]
    18b2:	2200      	movs	r2, #0
    18b4:	605a      	str	r2, [r3, #4]
    } else {
        vstr->len -= len;
    }
}
    18b6:	e005      	b.n	18c4 <vstr_cut_tail_bytes+0x28>
        vstr->len -= len;
    18b8:	687b      	ldr	r3, [r7, #4]
    18ba:	685a      	ldr	r2, [r3, #4]
    18bc:	683b      	ldr	r3, [r7, #0]
    18be:	1ad2      	subs	r2, r2, r3
    18c0:	687b      	ldr	r3, [r7, #4]
    18c2:	605a      	str	r2, [r3, #4]
}
    18c4:	bf00      	nop
    18c6:	370c      	adds	r7, #12
    18c8:	46bd      	mov	sp, r7
    18ca:	f85d 7b04 	ldr.w	r7, [sp], #4
    18ce:	4770      	bx	lr

000018d0 <vstr_cut_out_bytes>:

void vstr_cut_out_bytes(vstr_t *vstr, size_t byte_pos, size_t bytes_to_cut) {
    18d0:	b580      	push	{r7, lr}
    18d2:	b084      	sub	sp, #16
    18d4:	af00      	add	r7, sp, #0
    18d6:	60f8      	str	r0, [r7, #12]
    18d8:	60b9      	str	r1, [r7, #8]
    18da:	607a      	str	r2, [r7, #4]
    if (byte_pos >= vstr->len) {
    18dc:	68fb      	ldr	r3, [r7, #12]
    18de:	685a      	ldr	r2, [r3, #4]
    18e0:	68bb      	ldr	r3, [r7, #8]
    18e2:	429a      	cmp	r2, r3
    18e4:	d924      	bls.n	1930 <vstr_cut_out_bytes+0x60>
        return;
    } else if (byte_pos + bytes_to_cut >= vstr->len) {
    18e6:	68ba      	ldr	r2, [r7, #8]
    18e8:	687b      	ldr	r3, [r7, #4]
    18ea:	441a      	add	r2, r3
    18ec:	68fb      	ldr	r3, [r7, #12]
    18ee:	685b      	ldr	r3, [r3, #4]
    18f0:	429a      	cmp	r2, r3
    18f2:	d303      	bcc.n	18fc <vstr_cut_out_bytes+0x2c>
        vstr->len = byte_pos;
    18f4:	68fb      	ldr	r3, [r7, #12]
    18f6:	68ba      	ldr	r2, [r7, #8]
    18f8:	605a      	str	r2, [r3, #4]
    18fa:	e01a      	b.n	1932 <vstr_cut_out_bytes+0x62>
    } else {
        memmove(vstr->buf + byte_pos, vstr->buf + byte_pos + bytes_to_cut, vstr->len - byte_pos - bytes_to_cut);
    18fc:	68fb      	ldr	r3, [r7, #12]
    18fe:	689a      	ldr	r2, [r3, #8]
    1900:	68bb      	ldr	r3, [r7, #8]
    1902:	18d0      	adds	r0, r2, r3
    1904:	68fb      	ldr	r3, [r7, #12]
    1906:	689a      	ldr	r2, [r3, #8]
    1908:	68b9      	ldr	r1, [r7, #8]
    190a:	687b      	ldr	r3, [r7, #4]
    190c:	440b      	add	r3, r1
    190e:	18d1      	adds	r1, r2, r3
    1910:	68fb      	ldr	r3, [r7, #12]
    1912:	685a      	ldr	r2, [r3, #4]
    1914:	68bb      	ldr	r3, [r7, #8]
    1916:	1ad2      	subs	r2, r2, r3
    1918:	687b      	ldr	r3, [r7, #4]
    191a:	1ad3      	subs	r3, r2, r3
    191c:	461a      	mov	r2, r3
    191e:	f01b fa11 	bl	1cd44 <memmove>
        vstr->len -= bytes_to_cut;
    1922:	68fb      	ldr	r3, [r7, #12]
    1924:	685a      	ldr	r2, [r3, #4]
    1926:	687b      	ldr	r3, [r7, #4]
    1928:	1ad2      	subs	r2, r2, r3
    192a:	68fb      	ldr	r3, [r7, #12]
    192c:	605a      	str	r2, [r3, #4]
    192e:	e000      	b.n	1932 <vstr_cut_out_bytes+0x62>
        return;
    1930:	bf00      	nop
    }
}
    1932:	3710      	adds	r7, #16
    1934:	46bd      	mov	sp, r7
    1936:	bd80      	pop	{r7, pc}

00001938 <vstr_printf>:

void vstr_printf(vstr_t *vstr, const char *fmt, ...) {
    1938:	b40e      	push	{r1, r2, r3}
    193a:	b580      	push	{r7, lr}
    193c:	b085      	sub	sp, #20
    193e:	af00      	add	r7, sp, #0
    1940:	6078      	str	r0, [r7, #4]
    va_list ap;
    va_start(ap, fmt);
    1942:	f107 0320 	add.w	r3, r7, #32
    1946:	60fb      	str	r3, [r7, #12]
    vstr_vprintf(vstr, fmt, ap);
    1948:	68fa      	ldr	r2, [r7, #12]
    194a:	69f9      	ldr	r1, [r7, #28]
    194c:	6878      	ldr	r0, [r7, #4]
    194e:	f000 f807 	bl	1960 <vstr_vprintf>
    va_end(ap);
}
    1952:	bf00      	nop
    1954:	3714      	adds	r7, #20
    1956:	46bd      	mov	sp, r7
    1958:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
    195c:	b003      	add	sp, #12
    195e:	4770      	bx	lr

00001960 <vstr_vprintf>:

void vstr_vprintf(vstr_t *vstr, const char *fmt, va_list ap) {
    1960:	b580      	push	{r7, lr}
    1962:	b086      	sub	sp, #24
    1964:	af00      	add	r7, sp, #0
    1966:	60f8      	str	r0, [r7, #12]
    1968:	60b9      	str	r1, [r7, #8]
    196a:	607a      	str	r2, [r7, #4]
    mp_print_t print = {vstr, (mp_print_strn_t)vstr_add_strn};
    196c:	68fb      	ldr	r3, [r7, #12]
    196e:	613b      	str	r3, [r7, #16]
    1970:	4b06      	ldr	r3, [pc, #24]	; (198c <vstr_vprintf+0x2c>)
    1972:	617b      	str	r3, [r7, #20]
    mp_vprintf(&print, fmt, ap);
    1974:	f107 0310 	add.w	r3, r7, #16
    1978:	687a      	ldr	r2, [r7, #4]
    197a:	68b9      	ldr	r1, [r7, #8]
    197c:	4618      	mov	r0, r3
    197e:	f000 fb63 	bl	2048 <mp_vprintf>
}
    1982:	bf00      	nop
    1984:	3718      	adds	r7, #24
    1986:	46bd      	mov	sp, r7
    1988:	bd80      	pop	{r7, pc}
    198a:	bf00      	nop
    198c:	0000178d 	.word	0x0000178d

00001990 <MP_OBJ_IS_SMALL_INT>:
// unpack small ints, qstrs and full object pointers.

#if MICROPY_OBJ_REPR == MICROPY_OBJ_REPR_A

static inline bool MP_OBJ_IS_SMALL_INT(mp_const_obj_t o)
    { return ((((mp_int_t)(o)) & 1) != 0); }
    1990:	b480      	push	{r7}
    1992:	b083      	sub	sp, #12
    1994:	af00      	add	r7, sp, #0
    1996:	6078      	str	r0, [r7, #4]
    1998:	687b      	ldr	r3, [r7, #4]
    199a:	f003 0301 	and.w	r3, r3, #1
    199e:	2b00      	cmp	r3, #0
    19a0:	bf14      	ite	ne
    19a2:	2301      	movne	r3, #1
    19a4:	2300      	moveq	r3, #0
    19a6:	b2db      	uxtb	r3, r3
    19a8:	4618      	mov	r0, r3
    19aa:	370c      	adds	r7, #12
    19ac:	46bd      	mov	sp, r7
    19ae:	f85d 7b04 	ldr.w	r7, [sp], #4
    19b2:	4770      	bx	lr

000019b4 <MP_OBJ_IS_OBJ>:
mp_float_t mp_obj_float_get(mp_obj_t self_in);
mp_obj_t mp_obj_new_float(mp_float_t value);
#endif

static inline bool MP_OBJ_IS_OBJ(mp_const_obj_t o)
    { return ((((mp_int_t)(o)) & 3) == 0); }
    19b4:	b480      	push	{r7}
    19b6:	b083      	sub	sp, #12
    19b8:	af00      	add	r7, sp, #0
    19ba:	6078      	str	r0, [r7, #4]
    19bc:	687b      	ldr	r3, [r7, #4]
    19be:	f003 0303 	and.w	r3, r3, #3
    19c2:	2b00      	cmp	r3, #0
    19c4:	bf0c      	ite	eq
    19c6:	2301      	moveq	r3, #1
    19c8:	2300      	movne	r3, #0
    19ca:	b2db      	uxtb	r3, r3
    19cc:	4618      	mov	r0, r3
    19ce:	370c      	adds	r7, #12
    19d0:	46bd      	mov	sp, r7
    19d2:	f85d 7b04 	ldr.w	r7, [sp], #4
    19d6:	4770      	bx	lr

000019d8 <plat_print_strn>:
#endif

static const char pad_spaces[] = "                ";
static const char pad_zeroes[] = "0000000000000000";

STATIC void plat_print_strn(void *env, const char *str, size_t len) {
    19d8:	b580      	push	{r7, lr}
    19da:	b084      	sub	sp, #16
    19dc:	af00      	add	r7, sp, #0
    19de:	60f8      	str	r0, [r7, #12]
    19e0:	60b9      	str	r1, [r7, #8]
    19e2:	607a      	str	r2, [r7, #4]
    (void)env;
    MP_PLAT_PRINT_STRN(str, len);
    19e4:	6879      	ldr	r1, [r7, #4]
    19e6:	68b8      	ldr	r0, [r7, #8]
    19e8:	f01a fed2 	bl	1c790 <mp_hal_stdout_tx_strn_cooked>
}
    19ec:	bf00      	nop
    19ee:	3710      	adds	r7, #16
    19f0:	46bd      	mov	sp, r7
    19f2:	bd80      	pop	{r7, pc}

000019f4 <mp_print_str>:

const mp_print_t mp_plat_print = {NULL, plat_print_strn};

int mp_print_str(const mp_print_t *print, const char *str) {
    19f4:	b580      	push	{r7, lr}
    19f6:	b084      	sub	sp, #16
    19f8:	af00      	add	r7, sp, #0
    19fa:	6078      	str	r0, [r7, #4]
    19fc:	6039      	str	r1, [r7, #0]
    size_t len = strlen(str);
    19fe:	6838      	ldr	r0, [r7, #0]
    1a00:	f01b fa74 	bl	1ceec <strlen>
    1a04:	60f8      	str	r0, [r7, #12]
    if (len) {
    1a06:	68fb      	ldr	r3, [r7, #12]
    1a08:	2b00      	cmp	r3, #0
    1a0a:	d006      	beq.n	1a1a <mp_print_str+0x26>
        print->print_strn(print->data, str, len);
    1a0c:	687b      	ldr	r3, [r7, #4]
    1a0e:	685b      	ldr	r3, [r3, #4]
    1a10:	687a      	ldr	r2, [r7, #4]
    1a12:	6810      	ldr	r0, [r2, #0]
    1a14:	68fa      	ldr	r2, [r7, #12]
    1a16:	6839      	ldr	r1, [r7, #0]
    1a18:	4798      	blx	r3
    }
    return len;
    1a1a:	68fb      	ldr	r3, [r7, #12]
}
    1a1c:	4618      	mov	r0, r3
    1a1e:	3710      	adds	r7, #16
    1a20:	46bd      	mov	sp, r7
    1a22:	bd80      	pop	{r7, pc}

00001a24 <mp_print_strn>:

int mp_print_strn(const mp_print_t *print, const char *str, size_t len, int flags, char fill, int width) {
    1a24:	b580      	push	{r7, lr}
    1a26:	b08c      	sub	sp, #48	; 0x30
    1a28:	af00      	add	r7, sp, #0
    1a2a:	60f8      	str	r0, [r7, #12]
    1a2c:	60b9      	str	r1, [r7, #8]
    1a2e:	607a      	str	r2, [r7, #4]
    1a30:	603b      	str	r3, [r7, #0]
    int left_pad = 0;
    1a32:	2300      	movs	r3, #0
    1a34:	62fb      	str	r3, [r7, #44]	; 0x2c
    int right_pad = 0;
    1a36:	2300      	movs	r3, #0
    1a38:	62bb      	str	r3, [r7, #40]	; 0x28
    int pad = width - len;
    1a3a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    1a3c:	687b      	ldr	r3, [r7, #4]
    1a3e:	1ad3      	subs	r3, r2, r3
    1a40:	613b      	str	r3, [r7, #16]
    int pad_size;
    int total_chars_printed = 0;
    1a42:	2300      	movs	r3, #0
    1a44:	623b      	str	r3, [r7, #32]
    const char *pad_chars;

    if (!fill || fill == ' ') {
    1a46:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
    1a4a:	2b00      	cmp	r3, #0
    1a4c:	d003      	beq.n	1a56 <mp_print_strn+0x32>
    1a4e:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
    1a52:	2b20      	cmp	r3, #32
    1a54:	d104      	bne.n	1a60 <mp_print_strn+0x3c>
        pad_chars = pad_spaces;
    1a56:	4b3d      	ldr	r3, [pc, #244]	; (1b4c <mp_print_strn+0x128>)
    1a58:	61fb      	str	r3, [r7, #28]
        pad_size = sizeof(pad_spaces) - 1;
    1a5a:	2310      	movs	r3, #16
    1a5c:	627b      	str	r3, [r7, #36]	; 0x24
    1a5e:	e00d      	b.n	1a7c <mp_print_strn+0x58>
    } else if (fill == '0') {
    1a60:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
    1a64:	2b30      	cmp	r3, #48	; 0x30
    1a66:	d104      	bne.n	1a72 <mp_print_strn+0x4e>
        pad_chars = pad_zeroes;
    1a68:	4b39      	ldr	r3, [pc, #228]	; (1b50 <mp_print_strn+0x12c>)
    1a6a:	61fb      	str	r3, [r7, #28]
        pad_size = sizeof(pad_zeroes) - 1;
    1a6c:	2310      	movs	r3, #16
    1a6e:	627b      	str	r3, [r7, #36]	; 0x24
    1a70:	e004      	b.n	1a7c <mp_print_strn+0x58>
    } else {
        // Other pad characters are fairly unusual, so we'll take the hit
        // and output them 1 at a time.
        pad_chars = &fill;
    1a72:	f107 0338 	add.w	r3, r7, #56	; 0x38
    1a76:	61fb      	str	r3, [r7, #28]
        pad_size = 1;
    1a78:	2301      	movs	r3, #1
    1a7a:	627b      	str	r3, [r7, #36]	; 0x24
    }

    if (flags & PF_FLAG_CENTER_ADJUST) {
    1a7c:	683b      	ldr	r3, [r7, #0]
    1a7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
    1a82:	2b00      	cmp	r3, #0
    1a84:	d009      	beq.n	1a9a <mp_print_strn+0x76>
        left_pad = pad / 2;
    1a86:	693b      	ldr	r3, [r7, #16]
    1a88:	0fda      	lsrs	r2, r3, #31
    1a8a:	4413      	add	r3, r2
    1a8c:	105b      	asrs	r3, r3, #1
    1a8e:	62fb      	str	r3, [r7, #44]	; 0x2c
        right_pad = pad - left_pad;
    1a90:	693a      	ldr	r2, [r7, #16]
    1a92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1a94:	1ad3      	subs	r3, r2, r3
    1a96:	62bb      	str	r3, [r7, #40]	; 0x28
    1a98:	e009      	b.n	1aae <mp_print_strn+0x8a>
    } else if (flags & PF_FLAG_LEFT_ADJUST) {
    1a9a:	683b      	ldr	r3, [r7, #0]
    1a9c:	f003 0301 	and.w	r3, r3, #1
    1aa0:	2b00      	cmp	r3, #0
    1aa2:	d002      	beq.n	1aaa <mp_print_strn+0x86>
        right_pad = pad;
    1aa4:	693b      	ldr	r3, [r7, #16]
    1aa6:	62bb      	str	r3, [r7, #40]	; 0x28
    1aa8:	e001      	b.n	1aae <mp_print_strn+0x8a>
    } else {
        left_pad = pad;
    1aaa:	693b      	ldr	r3, [r7, #16]
    1aac:	62fb      	str	r3, [r7, #44]	; 0x2c
    }

    if (left_pad > 0) {
    1aae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1ab0:	2b00      	cmp	r3, #0
    1ab2:	dd1a      	ble.n	1aea <mp_print_strn+0xc6>
        total_chars_printed += left_pad;
    1ab4:	6a3a      	ldr	r2, [r7, #32]
    1ab6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1ab8:	4413      	add	r3, r2
    1aba:	623b      	str	r3, [r7, #32]
        while (left_pad > 0) {
    1abc:	e012      	b.n	1ae4 <mp_print_strn+0xc0>
            int p = left_pad;
    1abe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1ac0:	61bb      	str	r3, [r7, #24]
            if (p > pad_size) {
    1ac2:	69ba      	ldr	r2, [r7, #24]
    1ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1ac6:	429a      	cmp	r2, r3
    1ac8:	dd01      	ble.n	1ace <mp_print_strn+0xaa>
                p = pad_size;
    1aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1acc:	61bb      	str	r3, [r7, #24]
            }
            print->print_strn(print->data, pad_chars, p);
    1ace:	68fb      	ldr	r3, [r7, #12]
    1ad0:	685b      	ldr	r3, [r3, #4]
    1ad2:	68fa      	ldr	r2, [r7, #12]
    1ad4:	6810      	ldr	r0, [r2, #0]
    1ad6:	69ba      	ldr	r2, [r7, #24]
    1ad8:	69f9      	ldr	r1, [r7, #28]
    1ada:	4798      	blx	r3
            left_pad -= p;
    1adc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    1ade:	69bb      	ldr	r3, [r7, #24]
    1ae0:	1ad3      	subs	r3, r2, r3
    1ae2:	62fb      	str	r3, [r7, #44]	; 0x2c
        while (left_pad > 0) {
    1ae4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1ae6:	2b00      	cmp	r3, #0
    1ae8:	dce9      	bgt.n	1abe <mp_print_strn+0x9a>
        }
    }
    if (len) {
    1aea:	687b      	ldr	r3, [r7, #4]
    1aec:	2b00      	cmp	r3, #0
    1aee:	d00a      	beq.n	1b06 <mp_print_strn+0xe2>
        print->print_strn(print->data, str, len);
    1af0:	68fb      	ldr	r3, [r7, #12]
    1af2:	685b      	ldr	r3, [r3, #4]
    1af4:	68fa      	ldr	r2, [r7, #12]
    1af6:	6810      	ldr	r0, [r2, #0]
    1af8:	687a      	ldr	r2, [r7, #4]
    1afa:	68b9      	ldr	r1, [r7, #8]
    1afc:	4798      	blx	r3
        total_chars_printed += len;
    1afe:	6a3a      	ldr	r2, [r7, #32]
    1b00:	687b      	ldr	r3, [r7, #4]
    1b02:	4413      	add	r3, r2
    1b04:	623b      	str	r3, [r7, #32]
    }
    if (right_pad > 0) {
    1b06:	6abb      	ldr	r3, [r7, #40]	; 0x28
    1b08:	2b00      	cmp	r3, #0
    1b0a:	dd1a      	ble.n	1b42 <mp_print_strn+0x11e>
        total_chars_printed += right_pad;
    1b0c:	6a3a      	ldr	r2, [r7, #32]
    1b0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    1b10:	4413      	add	r3, r2
    1b12:	623b      	str	r3, [r7, #32]
        while (right_pad > 0) {
    1b14:	e012      	b.n	1b3c <mp_print_strn+0x118>
            int p = right_pad;
    1b16:	6abb      	ldr	r3, [r7, #40]	; 0x28
    1b18:	617b      	str	r3, [r7, #20]
            if (p > pad_size) {
    1b1a:	697a      	ldr	r2, [r7, #20]
    1b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1b1e:	429a      	cmp	r2, r3
    1b20:	dd01      	ble.n	1b26 <mp_print_strn+0x102>
                p = pad_size;
    1b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1b24:	617b      	str	r3, [r7, #20]
            }
            print->print_strn(print->data, pad_chars, p);
    1b26:	68fb      	ldr	r3, [r7, #12]
    1b28:	685b      	ldr	r3, [r3, #4]
    1b2a:	68fa      	ldr	r2, [r7, #12]
    1b2c:	6810      	ldr	r0, [r2, #0]
    1b2e:	697a      	ldr	r2, [r7, #20]
    1b30:	69f9      	ldr	r1, [r7, #28]
    1b32:	4798      	blx	r3
            right_pad -= p;
    1b34:	6aba      	ldr	r2, [r7, #40]	; 0x28
    1b36:	697b      	ldr	r3, [r7, #20]
    1b38:	1ad3      	subs	r3, r2, r3
    1b3a:	62bb      	str	r3, [r7, #40]	; 0x28
        while (right_pad > 0) {
    1b3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    1b3e:	2b00      	cmp	r3, #0
    1b40:	dce9      	bgt.n	1b16 <mp_print_strn+0xf2>
        }
    }
    return total_chars_printed;
    1b42:	6a3b      	ldr	r3, [r7, #32]
}
    1b44:	4618      	mov	r0, r3
    1b46:	3730      	adds	r7, #48	; 0x30
    1b48:	46bd      	mov	sp, r7
    1b4a:	bd80      	pop	{r7, pc}
    1b4c:	0001f734 	.word	0x0001f734
    1b50:	0001f748 	.word	0x0001f748

00001b54 <mp_print_int>:
// print the prefix of a non-base-10 number, so we don't need code for this.
#define SUPPORT_INT_BASE_PREFIX (0)

// This function is used exclusively by mp_vprintf to format ints.
// It needs to be a separate function to mp_print_mp_int, since converting to a mp_int looses the MSB.
STATIC int mp_print_int(const mp_print_t *print, mp_uint_t x, int sgn, int base, int base_char, int flags, char fill, int width) {
    1b54:	b580      	push	{r7, lr}
    1b56:	b08e      	sub	sp, #56	; 0x38
    1b58:	af02      	add	r7, sp, #8
    1b5a:	60f8      	str	r0, [r7, #12]
    1b5c:	60b9      	str	r1, [r7, #8]
    1b5e:	607a      	str	r2, [r7, #4]
    1b60:	603b      	str	r3, [r7, #0]
    char sign = 0;
    1b62:	2300      	movs	r3, #0
    1b64:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    if (sgn) {
    1b68:	687b      	ldr	r3, [r7, #4]
    1b6a:	2b00      	cmp	r3, #0
    1b6c:	d01a      	beq.n	1ba4 <mp_print_int+0x50>
        if ((mp_int_t)x < 0) {
    1b6e:	68bb      	ldr	r3, [r7, #8]
    1b70:	2b00      	cmp	r3, #0
    1b72:	da06      	bge.n	1b82 <mp_print_int+0x2e>
            sign = '-';
    1b74:	232d      	movs	r3, #45	; 0x2d
    1b76:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            x = -x;
    1b7a:	68bb      	ldr	r3, [r7, #8]
    1b7c:	425b      	negs	r3, r3
    1b7e:	60bb      	str	r3, [r7, #8]
    1b80:	e010      	b.n	1ba4 <mp_print_int+0x50>
        } else if (flags & PF_FLAG_SHOW_SIGN) {
    1b82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1b84:	f003 0302 	and.w	r3, r3, #2
    1b88:	2b00      	cmp	r3, #0
    1b8a:	d003      	beq.n	1b94 <mp_print_int+0x40>
            sign = '+';
    1b8c:	232b      	movs	r3, #43	; 0x2b
    1b8e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    1b92:	e007      	b.n	1ba4 <mp_print_int+0x50>
        } else if (flags & PF_FLAG_SPACE_SIGN) {
    1b94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1b96:	f003 0304 	and.w	r3, r3, #4
    1b9a:	2b00      	cmp	r3, #0
    1b9c:	d002      	beq.n	1ba4 <mp_print_int+0x50>
            sign = ' ';
    1b9e:	2320      	movs	r3, #32
    1ba0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        }
    }

    char buf[INT_BUF_SIZE];
    char *b = buf + INT_BUF_SIZE;
    1ba4:	f107 0310 	add.w	r3, r7, #16
    1ba8:	3310      	adds	r3, #16
    1baa:	62fb      	str	r3, [r7, #44]	; 0x2c

    if (x == 0) {
    1bac:	68bb      	ldr	r3, [r7, #8]
    1bae:	2b00      	cmp	r3, #0
    1bb0:	d106      	bne.n	1bc0 <mp_print_int+0x6c>
        *(--b) = '0';
    1bb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1bb4:	3b01      	subs	r3, #1
    1bb6:	62fb      	str	r3, [r7, #44]	; 0x2c
    1bb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1bba:	2230      	movs	r2, #48	; 0x30
    1bbc:	701a      	strb	r2, [r3, #0]
    1bbe:	e027      	b.n	1c10 <mp_print_int+0xbc>
    } else {
        do {
            int c = x % base;
    1bc0:	683a      	ldr	r2, [r7, #0]
    1bc2:	68bb      	ldr	r3, [r7, #8]
    1bc4:	fbb3 f1f2 	udiv	r1, r3, r2
    1bc8:	fb02 f201 	mul.w	r2, r2, r1
    1bcc:	1a9b      	subs	r3, r3, r2
    1bce:	62bb      	str	r3, [r7, #40]	; 0x28
            x /= base;
    1bd0:	683b      	ldr	r3, [r7, #0]
    1bd2:	68ba      	ldr	r2, [r7, #8]
    1bd4:	fbb2 f3f3 	udiv	r3, r2, r3
    1bd8:	60bb      	str	r3, [r7, #8]
            if (c >= 10) {
    1bda:	6abb      	ldr	r3, [r7, #40]	; 0x28
    1bdc:	2b09      	cmp	r3, #9
    1bde:	dd05      	ble.n	1bec <mp_print_int+0x98>
                c += base_char - 10;
    1be0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1be2:	3b0a      	subs	r3, #10
    1be4:	6aba      	ldr	r2, [r7, #40]	; 0x28
    1be6:	4413      	add	r3, r2
    1be8:	62bb      	str	r3, [r7, #40]	; 0x28
    1bea:	e002      	b.n	1bf2 <mp_print_int+0x9e>
            } else {
                c += '0';
    1bec:	6abb      	ldr	r3, [r7, #40]	; 0x28
    1bee:	3330      	adds	r3, #48	; 0x30
    1bf0:	62bb      	str	r3, [r7, #40]	; 0x28
            }
            *(--b) = c;
    1bf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1bf4:	3b01      	subs	r3, #1
    1bf6:	62fb      	str	r3, [r7, #44]	; 0x2c
    1bf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
    1bfa:	b2da      	uxtb	r2, r3
    1bfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1bfe:	701a      	strb	r2, [r3, #0]
        } while (b > buf && x != 0);
    1c00:	f107 0310 	add.w	r3, r7, #16
    1c04:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    1c06:	429a      	cmp	r2, r3
    1c08:	d902      	bls.n	1c10 <mp_print_int+0xbc>
    1c0a:	68bb      	ldr	r3, [r7, #8]
    1c0c:	2b00      	cmp	r3, #0
    1c0e:	d1d7      	bne.n	1bc0 <mp_print_int+0x6c>
            prefix_char = base_char + 'x' - 'a';
        }
    }
    #endif

    int len = 0;
    1c10:	2300      	movs	r3, #0
    1c12:	627b      	str	r3, [r7, #36]	; 0x24
    if (flags & PF_FLAG_PAD_AFTER_SIGN) {
    1c14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1c16:	f003 0340 	and.w	r3, r3, #64	; 0x40
    1c1a:	2b00      	cmp	r3, #0
    1c1c:	d017      	beq.n	1c4e <mp_print_int+0xfa>
        if (sign) {
    1c1e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
    1c22:	2b00      	cmp	r3, #0
    1c24:	d023      	beq.n	1c6e <mp_print_int+0x11a>
            len += mp_print_strn(print, &sign, 1, flags, fill, 1);
    1c26:	f107 0123 	add.w	r1, r7, #35	; 0x23
    1c2a:	2301      	movs	r3, #1
    1c2c:	9301      	str	r3, [sp, #4]
    1c2e:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
    1c32:	9300      	str	r3, [sp, #0]
    1c34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1c36:	2201      	movs	r2, #1
    1c38:	68f8      	ldr	r0, [r7, #12]
    1c3a:	f7ff fef3 	bl	1a24 <mp_print_strn>
    1c3e:	4602      	mov	r2, r0
    1c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1c42:	4413      	add	r3, r2
    1c44:	627b      	str	r3, [r7, #36]	; 0x24
            width--;
    1c46:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    1c48:	3b01      	subs	r3, #1
    1c4a:	647b      	str	r3, [r7, #68]	; 0x44
    1c4c:	e00f      	b.n	1c6e <mp_print_int+0x11a>
        if (prefix_char && b > &buf[1]) {
            *(--b) = prefix_char;
            *(--b) = '0';
        }
        #endif
        if (sign && b > buf) {
    1c4e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
    1c52:	2b00      	cmp	r3, #0
    1c54:	d00b      	beq.n	1c6e <mp_print_int+0x11a>
    1c56:	f107 0310 	add.w	r3, r7, #16
    1c5a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    1c5c:	429a      	cmp	r2, r3
    1c5e:	d906      	bls.n	1c6e <mp_print_int+0x11a>
            *(--b) = sign;
    1c60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1c62:	3b01      	subs	r3, #1
    1c64:	62fb      	str	r3, [r7, #44]	; 0x2c
    1c66:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
    1c6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1c6c:	701a      	strb	r2, [r3, #0]
        }
    }

    len += mp_print_strn(print, b, buf + INT_BUF_SIZE - b, flags, fill, width);
    1c6e:	f107 0310 	add.w	r3, r7, #16
    1c72:	3310      	adds	r3, #16
    1c74:	461a      	mov	r2, r3
    1c76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1c78:	1ad3      	subs	r3, r2, r3
    1c7a:	461a      	mov	r2, r3
    1c7c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    1c7e:	9301      	str	r3, [sp, #4]
    1c80:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
    1c84:	9300      	str	r3, [sp, #0]
    1c86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1c88:	6af9      	ldr	r1, [r7, #44]	; 0x2c
    1c8a:	68f8      	ldr	r0, [r7, #12]
    1c8c:	f7ff feca 	bl	1a24 <mp_print_strn>
    1c90:	4602      	mov	r2, r0
    1c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1c94:	4413      	add	r3, r2
    1c96:	627b      	str	r3, [r7, #36]	; 0x24
    return len;
    1c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
    1c9a:	4618      	mov	r0, r3
    1c9c:	3730      	adds	r7, #48	; 0x30
    1c9e:	46bd      	mov	sp, r7
    1ca0:	bd80      	pop	{r7, pc}
    1ca2:	bf00      	nop

00001ca4 <mp_print_mp_int>:

int mp_print_mp_int(const mp_print_t *print, mp_obj_t x, int base, int base_char, int flags, char fill, int width, int prec) {
    1ca4:	b590      	push	{r4, r7, lr}
    1ca6:	b09b      	sub	sp, #108	; 0x6c
    1ca8:	af04      	add	r7, sp, #16
    1caa:	60f8      	str	r0, [r7, #12]
    1cac:	60b9      	str	r1, [r7, #8]
    1cae:	607a      	str	r2, [r7, #4]
    1cb0:	603b      	str	r3, [r7, #0]
    // These are the only values for "base" that are required to be supported by this
    // function, since Python only allows the user to format integers in these bases.
    // If needed this function could be generalised to handle other values.
    assert(base == 2 || base == 8 || base == 10 || base == 16);
    1cb2:	687b      	ldr	r3, [r7, #4]
    1cb4:	2b02      	cmp	r3, #2
    1cb6:	d00e      	beq.n	1cd6 <mp_print_mp_int+0x32>
    1cb8:	687b      	ldr	r3, [r7, #4]
    1cba:	2b08      	cmp	r3, #8
    1cbc:	d00b      	beq.n	1cd6 <mp_print_mp_int+0x32>
    1cbe:	687b      	ldr	r3, [r7, #4]
    1cc0:	2b0a      	cmp	r3, #10
    1cc2:	d008      	beq.n	1cd6 <mp_print_mp_int+0x32>
    1cc4:	687b      	ldr	r3, [r7, #4]
    1cc6:	2b10      	cmp	r3, #16
    1cc8:	d005      	beq.n	1cd6 <mp_print_mp_int+0x32>
    1cca:	4b8f      	ldr	r3, [pc, #572]	; (1f08 <mp_print_mp_int+0x264>)
    1ccc:	4a8f      	ldr	r2, [pc, #572]	; (1f0c <mp_print_mp_int+0x268>)
    1cce:	21d0      	movs	r1, #208	; 0xd0
    1cd0:	488f      	ldr	r0, [pc, #572]	; (1f10 <mp_print_mp_int+0x26c>)
    1cd2:	f019 fcfd 	bl	1b6d0 <__assert_func>

    if (!MP_OBJ_IS_INT(x)) {
    1cd6:	68b8      	ldr	r0, [r7, #8]
    1cd8:	f7ff fe5a 	bl	1990 <MP_OBJ_IS_SMALL_INT>
    1cdc:	4603      	mov	r3, r0
    1cde:	f083 0301 	eor.w	r3, r3, #1
    1ce2:	b2db      	uxtb	r3, r3
    1ce4:	2b00      	cmp	r3, #0
    1ce6:	d015      	beq.n	1d14 <mp_print_mp_int+0x70>
    1ce8:	68b8      	ldr	r0, [r7, #8]
    1cea:	f7ff fe63 	bl	19b4 <MP_OBJ_IS_OBJ>
    1cee:	4603      	mov	r3, r0
    1cf0:	f083 0301 	eor.w	r3, r3, #1
    1cf4:	b2db      	uxtb	r3, r3
    1cf6:	2b00      	cmp	r3, #0
    1cf8:	d104      	bne.n	1d04 <mp_print_mp_int+0x60>
    1cfa:	68bb      	ldr	r3, [r7, #8]
    1cfc:	681b      	ldr	r3, [r3, #0]
    1cfe:	4a85      	ldr	r2, [pc, #532]	; (1f14 <mp_print_mp_int+0x270>)
    1d00:	4293      	cmp	r3, r2
    1d02:	d007      	beq.n	1d14 <mp_print_mp_int+0x70>
        // This will convert booleans to int, or raise an error for
        // non-integer types.
        x = MP_OBJ_NEW_SMALL_INT(mp_obj_get_int(x));
    1d04:	68b8      	ldr	r0, [r7, #8]
    1d06:	f00c f8b3 	bl	de70 <mp_obj_get_int>
    1d0a:	4603      	mov	r3, r0
    1d0c:	005b      	lsls	r3, r3, #1
    1d0e:	f043 0301 	orr.w	r3, r3, #1
    1d12:	60bb      	str	r3, [r7, #8]
    }

    if ((flags & (PF_FLAG_LEFT_ADJUST | PF_FLAG_CENTER_ADJUST)) == 0 && fill == '0') {
    1d14:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    1d16:	f003 0381 	and.w	r3, r3, #129	; 0x81
    1d1a:	2b00      	cmp	r3, #0
    1d1c:	d10b      	bne.n	1d36 <mp_print_mp_int+0x92>
    1d1e:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
    1d22:	2b30      	cmp	r3, #48	; 0x30
    1d24:	d107      	bne.n	1d36 <mp_print_mp_int+0x92>
        if (prec > width) {
    1d26:	6f7a      	ldr	r2, [r7, #116]	; 0x74
    1d28:	6f3b      	ldr	r3, [r7, #112]	; 0x70
    1d2a:	429a      	cmp	r2, r3
    1d2c:	dd01      	ble.n	1d32 <mp_print_mp_int+0x8e>
            width = prec;
    1d2e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    1d30:	673b      	str	r3, [r7, #112]	; 0x70
        }
        prec = 0;
    1d32:	2300      	movs	r3, #0
    1d34:	677b      	str	r3, [r7, #116]	; 0x74
    }
    char prefix_buf[4];
    char *prefix = prefix_buf;
    1d36:	f107 0334 	add.w	r3, r7, #52	; 0x34
    1d3a:	657b      	str	r3, [r7, #84]	; 0x54

    if (mp_obj_int_sign(x) >= 0) {
    1d3c:	68b8      	ldr	r0, [r7, #8]
    1d3e:	f00e fec3 	bl	10ac8 <mp_obj_int_sign>
    1d42:	4603      	mov	r3, r0
    1d44:	2b00      	cmp	r3, #0
    1d46:	db14      	blt.n	1d72 <mp_print_mp_int+0xce>
        if (flags & PF_FLAG_SHOW_SIGN) {
    1d48:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    1d4a:	f003 0302 	and.w	r3, r3, #2
    1d4e:	2b00      	cmp	r3, #0
    1d50:	d005      	beq.n	1d5e <mp_print_mp_int+0xba>
            *prefix++ = '+';
    1d52:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    1d54:	1c5a      	adds	r2, r3, #1
    1d56:	657a      	str	r2, [r7, #84]	; 0x54
    1d58:	222b      	movs	r2, #43	; 0x2b
    1d5a:	701a      	strb	r2, [r3, #0]
    1d5c:	e009      	b.n	1d72 <mp_print_mp_int+0xce>
        } else if (flags & PF_FLAG_SPACE_SIGN) {
    1d5e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    1d60:	f003 0304 	and.w	r3, r3, #4
    1d64:	2b00      	cmp	r3, #0
    1d66:	d004      	beq.n	1d72 <mp_print_mp_int+0xce>
            *prefix++ = ' ';
    1d68:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    1d6a:	1c5a      	adds	r2, r3, #1
    1d6c:	657a      	str	r2, [r7, #84]	; 0x54
    1d6e:	2220      	movs	r2, #32
    1d70:	701a      	strb	r2, [r3, #0]
        }
    }

    if (flags & PF_FLAG_SHOW_PREFIX) {
    1d72:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    1d74:	f003 0310 	and.w	r3, r3, #16
    1d78:	2b00      	cmp	r3, #0
    1d7a:	d036      	beq.n	1dea <mp_print_mp_int+0x146>
        if (base == 2) {
    1d7c:	687b      	ldr	r3, [r7, #4]
    1d7e:	2b02      	cmp	r3, #2
    1d80:	d10d      	bne.n	1d9e <mp_print_mp_int+0xfa>
            *prefix++ = '0';
    1d82:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    1d84:	1c5a      	adds	r2, r3, #1
    1d86:	657a      	str	r2, [r7, #84]	; 0x54
    1d88:	2230      	movs	r2, #48	; 0x30
    1d8a:	701a      	strb	r2, [r3, #0]
            *prefix++ = base_char + 'b' - 'a';
    1d8c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    1d8e:	1c5a      	adds	r2, r3, #1
    1d90:	657a      	str	r2, [r7, #84]	; 0x54
    1d92:	683a      	ldr	r2, [r7, #0]
    1d94:	b2d2      	uxtb	r2, r2
    1d96:	3201      	adds	r2, #1
    1d98:	b2d2      	uxtb	r2, r2
    1d9a:	701a      	strb	r2, [r3, #0]
    1d9c:	e025      	b.n	1dea <mp_print_mp_int+0x146>
        } else if (base == 8) {
    1d9e:	687b      	ldr	r3, [r7, #4]
    1da0:	2b08      	cmp	r3, #8
    1da2:	d112      	bne.n	1dca <mp_print_mp_int+0x126>
            *prefix++ = '0';
    1da4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    1da6:	1c5a      	adds	r2, r3, #1
    1da8:	657a      	str	r2, [r7, #84]	; 0x54
    1daa:	2230      	movs	r2, #48	; 0x30
    1dac:	701a      	strb	r2, [r3, #0]
            if (flags & PF_FLAG_SHOW_OCTAL_LETTER) {
    1dae:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    1db0:	f403 7300 	and.w	r3, r3, #512	; 0x200
    1db4:	2b00      	cmp	r3, #0
    1db6:	d018      	beq.n	1dea <mp_print_mp_int+0x146>
                *prefix++ = base_char + 'o' - 'a';
    1db8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    1dba:	1c5a      	adds	r2, r3, #1
    1dbc:	657a      	str	r2, [r7, #84]	; 0x54
    1dbe:	683a      	ldr	r2, [r7, #0]
    1dc0:	b2d2      	uxtb	r2, r2
    1dc2:	320e      	adds	r2, #14
    1dc4:	b2d2      	uxtb	r2, r2
    1dc6:	701a      	strb	r2, [r3, #0]
    1dc8:	e00f      	b.n	1dea <mp_print_mp_int+0x146>
            }
        } else if (base == 16) {
    1dca:	687b      	ldr	r3, [r7, #4]
    1dcc:	2b10      	cmp	r3, #16
    1dce:	d10c      	bne.n	1dea <mp_print_mp_int+0x146>
            *prefix++ = '0';
    1dd0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    1dd2:	1c5a      	adds	r2, r3, #1
    1dd4:	657a      	str	r2, [r7, #84]	; 0x54
    1dd6:	2230      	movs	r2, #48	; 0x30
    1dd8:	701a      	strb	r2, [r3, #0]
            *prefix++ = base_char + 'x' - 'a';
    1dda:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    1ddc:	1c5a      	adds	r2, r3, #1
    1dde:	657a      	str	r2, [r7, #84]	; 0x54
    1de0:	683a      	ldr	r2, [r7, #0]
    1de2:	b2d2      	uxtb	r2, r2
    1de4:	3217      	adds	r2, #23
    1de6:	b2d2      	uxtb	r2, r2
    1de8:	701a      	strb	r2, [r3, #0]
        }
    }
    *prefix = '\0';
    1dea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    1dec:	2200      	movs	r2, #0
    1dee:	701a      	strb	r2, [r3, #0]
    int prefix_len = prefix - prefix_buf;
    1df0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
    1df2:	f107 0334 	add.w	r3, r7, #52	; 0x34
    1df6:	1ad3      	subs	r3, r2, r3
    1df8:	63bb      	str	r3, [r7, #56]	; 0x38
    prefix = prefix_buf;
    1dfa:	f107 0334 	add.w	r3, r7, #52	; 0x34
    1dfe:	657b      	str	r3, [r7, #84]	; 0x54

    char comma = '\0';
    1e00:	2300      	movs	r3, #0
    1e02:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
    if (flags & PF_FLAG_SHOW_COMMA) {
    1e06:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    1e08:	f003 0320 	and.w	r3, r3, #32
    1e0c:	2b00      	cmp	r3, #0
    1e0e:	d002      	beq.n	1e16 <mp_print_mp_int+0x172>
        comma = ',';
    1e10:	232c      	movs	r3, #44	; 0x2c
    1e12:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
    }

    // The size of this buffer is rather arbitrary. If it's not large
    // enough, a dynamic one will be allocated.
    char stack_buf[sizeof(mp_int_t) * 4];
    char *buf = stack_buf;
    1e16:	f107 0324 	add.w	r3, r7, #36	; 0x24
    1e1a:	623b      	str	r3, [r7, #32]
    size_t buf_size = sizeof(stack_buf);
    1e1c:	2310      	movs	r3, #16
    1e1e:	61fb      	str	r3, [r7, #28]
    size_t fmt_size = 0;
    1e20:	2300      	movs	r3, #0
    1e22:	61bb      	str	r3, [r7, #24]
    char *str;

    if (prec > 1) {
    1e24:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    1e26:	2b01      	cmp	r3, #1
    1e28:	dd03      	ble.n	1e32 <mp_print_mp_int+0x18e>
        flags |= PF_FLAG_PAD_AFTER_SIGN;
    1e2a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    1e2c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    1e30:	66bb      	str	r3, [r7, #104]	; 0x68
    }
    char sign = '\0';
    1e32:	2300      	movs	r3, #0
    1e34:	75fb      	strb	r3, [r7, #23]
    if (flags & PF_FLAG_PAD_AFTER_SIGN) {
    1e36:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    1e38:	f003 0340 	and.w	r3, r3, #64	; 0x40
    1e3c:	2b00      	cmp	r3, #0
    1e3e:	d021      	beq.n	1e84 <mp_print_mp_int+0x1e0>
        // We add the pad in this function, so since the pad goes after
        // the sign & prefix, we format without a prefix
        str = mp_obj_int_formatted(&buf, &buf_size, &fmt_size,
    1e40:	683b      	ldr	r3, [r7, #0]
    1e42:	b2db      	uxtb	r3, r3
    1e44:	f107 0418 	add.w	r4, r7, #24
    1e48:	f107 011c 	add.w	r1, r7, #28
    1e4c:	f107 0020 	add.w	r0, r7, #32
    1e50:	f897 2053 	ldrb.w	r2, [r7, #83]	; 0x53
    1e54:	9203      	str	r2, [sp, #12]
    1e56:	9302      	str	r3, [sp, #8]
    1e58:	2300      	movs	r3, #0
    1e5a:	9301      	str	r3, [sp, #4]
    1e5c:	687b      	ldr	r3, [r7, #4]
    1e5e:	9300      	str	r3, [sp, #0]
    1e60:	68bb      	ldr	r3, [r7, #8]
    1e62:	4622      	mov	r2, r4
    1e64:	f00e fd6c 	bl	10940 <mp_obj_int_formatted>
    1e68:	64f8      	str	r0, [r7, #76]	; 0x4c
                                   x, base, NULL, base_char, comma);
        if (*str == '-') {
    1e6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    1e6c:	781b      	ldrb	r3, [r3, #0]
    1e6e:	2b2d      	cmp	r3, #45	; 0x2d
    1e70:	d11d      	bne.n	1eae <mp_print_mp_int+0x20a>
            sign = *str++;
    1e72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    1e74:	1c5a      	adds	r2, r3, #1
    1e76:	64fa      	str	r2, [r7, #76]	; 0x4c
    1e78:	781b      	ldrb	r3, [r3, #0]
    1e7a:	75fb      	strb	r3, [r7, #23]
            fmt_size--;
    1e7c:	69bb      	ldr	r3, [r7, #24]
    1e7e:	3b01      	subs	r3, #1
    1e80:	61bb      	str	r3, [r7, #24]
    1e82:	e014      	b.n	1eae <mp_print_mp_int+0x20a>
        }
    } else {
        str = mp_obj_int_formatted(&buf, &buf_size, &fmt_size,
    1e84:	683b      	ldr	r3, [r7, #0]
    1e86:	b2db      	uxtb	r3, r3
    1e88:	f107 0418 	add.w	r4, r7, #24
    1e8c:	f107 011c 	add.w	r1, r7, #28
    1e90:	f107 0020 	add.w	r0, r7, #32
    1e94:	f897 2053 	ldrb.w	r2, [r7, #83]	; 0x53
    1e98:	9203      	str	r2, [sp, #12]
    1e9a:	9302      	str	r3, [sp, #8]
    1e9c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    1e9e:	9301      	str	r3, [sp, #4]
    1ea0:	687b      	ldr	r3, [r7, #4]
    1ea2:	9300      	str	r3, [sp, #0]
    1ea4:	68bb      	ldr	r3, [r7, #8]
    1ea6:	4622      	mov	r2, r4
    1ea8:	f00e fd4a 	bl	10940 <mp_obj_int_formatted>
    1eac:	64f8      	str	r0, [r7, #76]	; 0x4c
                                   x, base, prefix, base_char, comma);
    }

    int spaces_before = 0;
    1eae:	2300      	movs	r3, #0
    1eb0:	64bb      	str	r3, [r7, #72]	; 0x48
    int spaces_after = 0;
    1eb2:	2300      	movs	r3, #0
    1eb4:	647b      	str	r3, [r7, #68]	; 0x44

    if (prec > 1) {
    1eb6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    1eb8:	2b01      	cmp	r3, #1
    1eba:	dd38      	ble.n	1f2e <mp_print_mp_int+0x28a>
        // If prec was specified, then prec specifies the width to zero-pad the
        // the number to. This zero-padded number then gets left or right
        // aligned in width characters.

        int prec_width = fmt_size;  // The digits
    1ebc:	69bb      	ldr	r3, [r7, #24]
    1ebe:	643b      	str	r3, [r7, #64]	; 0x40
        if (prec_width < prec) {
    1ec0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    1ec2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    1ec4:	429a      	cmp	r2, r3
    1ec6:	da01      	bge.n	1ecc <mp_print_mp_int+0x228>
            prec_width = prec;
    1ec8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    1eca:	643b      	str	r3, [r7, #64]	; 0x40
        }
        if (flags & PF_FLAG_PAD_AFTER_SIGN) {
    1ecc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    1ece:	f003 0340 	and.w	r3, r3, #64	; 0x40
    1ed2:	2b00      	cmp	r3, #0
    1ed4:	d009      	beq.n	1eea <mp_print_mp_int+0x246>
            if (sign) {
    1ed6:	7dfb      	ldrb	r3, [r7, #23]
    1ed8:	2b00      	cmp	r3, #0
    1eda:	d002      	beq.n	1ee2 <mp_print_mp_int+0x23e>
                prec_width++;
    1edc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    1ede:	3301      	adds	r3, #1
    1ee0:	643b      	str	r3, [r7, #64]	; 0x40
            }
            prec_width += prefix_len;
    1ee2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    1ee4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1ee6:	4413      	add	r3, r2
    1ee8:	643b      	str	r3, [r7, #64]	; 0x40
        }
        if (prec_width < width) {
    1eea:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    1eec:	6f3b      	ldr	r3, [r7, #112]	; 0x70
    1eee:	429a      	cmp	r2, r3
    1ef0:	da16      	bge.n	1f20 <mp_print_mp_int+0x27c>
            if (flags & PF_FLAG_LEFT_ADJUST) {
    1ef2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    1ef4:	f003 0301 	and.w	r3, r3, #1
    1ef8:	2b00      	cmp	r3, #0
    1efa:	d00d      	beq.n	1f18 <mp_print_mp_int+0x274>
                spaces_after = width - prec_width;
    1efc:	6f3a      	ldr	r2, [r7, #112]	; 0x70
    1efe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    1f00:	1ad3      	subs	r3, r2, r3
    1f02:	647b      	str	r3, [r7, #68]	; 0x44
    1f04:	e00c      	b.n	1f20 <mp_print_mp_int+0x27c>
    1f06:	bf00      	nop
    1f08:	0001f764 	.word	0x0001f764
    1f0c:	0001f7f0 	.word	0x0001f7f0
    1f10:	0001f798 	.word	0x0001f798
    1f14:	00022ea8 	.word	0x00022ea8
            } else {
                spaces_before = width - prec_width;
    1f18:	6f3a      	ldr	r2, [r7, #112]	; 0x70
    1f1a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    1f1c:	1ad3      	subs	r3, r2, r3
    1f1e:	64bb      	str	r3, [r7, #72]	; 0x48
            }
        }
        fill = '0';
    1f20:	2330      	movs	r3, #48	; 0x30
    1f22:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
        flags &= ~PF_FLAG_LEFT_ADJUST;
    1f26:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    1f28:	f023 0301 	bic.w	r3, r3, #1
    1f2c:	66bb      	str	r3, [r7, #104]	; 0x68
    }

    int len = 0;
    1f2e:	2300      	movs	r3, #0
    1f30:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (spaces_before) {
    1f32:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    1f34:	2b00      	cmp	r3, #0
    1f36:	d00d      	beq.n	1f54 <mp_print_mp_int+0x2b0>
        len += mp_print_strn(print, "", 0, 0, ' ', spaces_before);
    1f38:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    1f3a:	9301      	str	r3, [sp, #4]
    1f3c:	2320      	movs	r3, #32
    1f3e:	9300      	str	r3, [sp, #0]
    1f40:	2300      	movs	r3, #0
    1f42:	2200      	movs	r2, #0
    1f44:	4934      	ldr	r1, [pc, #208]	; (2018 <mp_print_mp_int+0x374>)
    1f46:	68f8      	ldr	r0, [r7, #12]
    1f48:	f7ff fd6c 	bl	1a24 <mp_print_strn>
    1f4c:	4602      	mov	r2, r0
    1f4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1f50:	4413      	add	r3, r2
    1f52:	63fb      	str	r3, [r7, #60]	; 0x3c
    }
    if (flags & PF_FLAG_PAD_AFTER_SIGN) {
    1f54:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    1f56:	f003 0340 	and.w	r3, r3, #64	; 0x40
    1f5a:	2b00      	cmp	r3, #0
    1f5c:	d029      	beq.n	1fb2 <mp_print_mp_int+0x30e>
        // pad after sign implies pad after prefix as well.
        if (sign) {
    1f5e:	7dfb      	ldrb	r3, [r7, #23]
    1f60:	2b00      	cmp	r3, #0
    1f62:	d011      	beq.n	1f88 <mp_print_mp_int+0x2e4>
            len += mp_print_strn(print, &sign, 1, 0, 0, 1);
    1f64:	f107 0117 	add.w	r1, r7, #23
    1f68:	2301      	movs	r3, #1
    1f6a:	9301      	str	r3, [sp, #4]
    1f6c:	2300      	movs	r3, #0
    1f6e:	9300      	str	r3, [sp, #0]
    1f70:	2300      	movs	r3, #0
    1f72:	2201      	movs	r2, #1
    1f74:	68f8      	ldr	r0, [r7, #12]
    1f76:	f7ff fd55 	bl	1a24 <mp_print_strn>
    1f7a:	4602      	mov	r2, r0
    1f7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1f7e:	4413      	add	r3, r2
    1f80:	63fb      	str	r3, [r7, #60]	; 0x3c
            width--;
    1f82:	6f3b      	ldr	r3, [r7, #112]	; 0x70
    1f84:	3b01      	subs	r3, #1
    1f86:	673b      	str	r3, [r7, #112]	; 0x70
        }
        if (prefix_len) {
    1f88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1f8a:	2b00      	cmp	r3, #0
    1f8c:	d011      	beq.n	1fb2 <mp_print_mp_int+0x30e>
            len += mp_print_strn(print, prefix, prefix_len, 0, 0, 1);
    1f8e:	6bba      	ldr	r2, [r7, #56]	; 0x38
    1f90:	2301      	movs	r3, #1
    1f92:	9301      	str	r3, [sp, #4]
    1f94:	2300      	movs	r3, #0
    1f96:	9300      	str	r3, [sp, #0]
    1f98:	2300      	movs	r3, #0
    1f9a:	6d79      	ldr	r1, [r7, #84]	; 0x54
    1f9c:	68f8      	ldr	r0, [r7, #12]
    1f9e:	f7ff fd41 	bl	1a24 <mp_print_strn>
    1fa2:	4602      	mov	r2, r0
    1fa4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1fa6:	4413      	add	r3, r2
    1fa8:	63fb      	str	r3, [r7, #60]	; 0x3c
            width -= prefix_len;
    1faa:	6f3a      	ldr	r2, [r7, #112]	; 0x70
    1fac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1fae:	1ad3      	subs	r3, r2, r3
    1fb0:	673b      	str	r3, [r7, #112]	; 0x70
        }
    }
    if (prec > 1) {
    1fb2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    1fb4:	2b01      	cmp	r3, #1
    1fb6:	dd01      	ble.n	1fbc <mp_print_mp_int+0x318>
        width = prec;
    1fb8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    1fba:	673b      	str	r3, [r7, #112]	; 0x70
    }

    len += mp_print_strn(print, str, fmt_size, flags, fill, width);
    1fbc:	69ba      	ldr	r2, [r7, #24]
    1fbe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
    1fc0:	9301      	str	r3, [sp, #4]
    1fc2:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
    1fc6:	9300      	str	r3, [sp, #0]
    1fc8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    1fca:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
    1fcc:	68f8      	ldr	r0, [r7, #12]
    1fce:	f7ff fd29 	bl	1a24 <mp_print_strn>
    1fd2:	4602      	mov	r2, r0
    1fd4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1fd6:	4413      	add	r3, r2
    1fd8:	63fb      	str	r3, [r7, #60]	; 0x3c

    if (spaces_after) {
    1fda:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    1fdc:	2b00      	cmp	r3, #0
    1fde:	d00d      	beq.n	1ffc <mp_print_mp_int+0x358>
        len += mp_print_strn(print, "", 0, 0, ' ', spaces_after);
    1fe0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    1fe2:	9301      	str	r3, [sp, #4]
    1fe4:	2320      	movs	r3, #32
    1fe6:	9300      	str	r3, [sp, #0]
    1fe8:	2300      	movs	r3, #0
    1fea:	2200      	movs	r2, #0
    1fec:	490a      	ldr	r1, [pc, #40]	; (2018 <mp_print_mp_int+0x374>)
    1fee:	68f8      	ldr	r0, [r7, #12]
    1ff0:	f7ff fd18 	bl	1a24 <mp_print_strn>
    1ff4:	4602      	mov	r2, r0
    1ff6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1ff8:	4413      	add	r3, r2
    1ffa:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

    if (buf != stack_buf) {
    1ffc:	6a3a      	ldr	r2, [r7, #32]
    1ffe:	f107 0324 	add.w	r3, r7, #36	; 0x24
    2002:	429a      	cmp	r2, r3
    2004:	d003      	beq.n	200e <mp_print_mp_int+0x36a>
        m_del(char, buf, buf_size);
    2006:	6a3b      	ldr	r3, [r7, #32]
    2008:	4618      	mov	r0, r3
    200a:	f7fe fa01 	bl	410 <m_free>
    }
    return len;
    200e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
    2010:	4618      	mov	r0, r3
    2012:	375c      	adds	r7, #92	; 0x5c
    2014:	46bd      	mov	sp, r7
    2016:	bd90      	pop	{r4, r7, pc}
    2018:	0001f7ac 	.word	0x0001f7ac

0000201c <mp_printf>:

    return chrs;
}
#endif

int mp_printf(const mp_print_t *print, const char *fmt, ...) {
    201c:	b40e      	push	{r1, r2, r3}
    201e:	b580      	push	{r7, lr}
    2020:	b085      	sub	sp, #20
    2022:	af00      	add	r7, sp, #0
    2024:	6078      	str	r0, [r7, #4]
    va_list ap;
    va_start(ap, fmt);
    2026:	f107 0320 	add.w	r3, r7, #32
    202a:	60bb      	str	r3, [r7, #8]
    int ret = mp_vprintf(print, fmt, ap);
    202c:	68ba      	ldr	r2, [r7, #8]
    202e:	69f9      	ldr	r1, [r7, #28]
    2030:	6878      	ldr	r0, [r7, #4]
    2032:	f000 f809 	bl	2048 <mp_vprintf>
    2036:	60f8      	str	r0, [r7, #12]
    va_end(ap);
    return ret;
    2038:	68fb      	ldr	r3, [r7, #12]
}
    203a:	4618      	mov	r0, r3
    203c:	3714      	adds	r7, #20
    203e:	46bd      	mov	sp, r7
    2040:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
    2044:	b003      	add	sp, #12
    2046:	4770      	bx	lr

00002048 <mp_vprintf>:

int mp_vprintf(const mp_print_t *print, const char *fmt, va_list args) {
    2048:	b580      	push	{r7, lr}
    204a:	b096      	sub	sp, #88	; 0x58
    204c:	af04      	add	r7, sp, #16
    204e:	60f8      	str	r0, [r7, #12]
    2050:	60b9      	str	r1, [r7, #8]
    2052:	607a      	str	r2, [r7, #4]
    int chrs = 0;
    2054:	2300      	movs	r3, #0
    2056:	647b      	str	r3, [r7, #68]	; 0x44
    for (;;) {
        {
            const char *f = fmt;
    2058:	68bb      	ldr	r3, [r7, #8]
    205a:	643b      	str	r3, [r7, #64]	; 0x40
            while (*f != '\0' && *f != '%') {
    205c:	e002      	b.n	2064 <mp_vprintf+0x1c>
                ++f; // XXX UTF8 advance char
    205e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    2060:	3301      	adds	r3, #1
    2062:	643b      	str	r3, [r7, #64]	; 0x40
            while (*f != '\0' && *f != '%') {
    2064:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    2066:	781b      	ldrb	r3, [r3, #0]
    2068:	2b00      	cmp	r3, #0
    206a:	d003      	beq.n	2074 <mp_vprintf+0x2c>
    206c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    206e:	781b      	ldrb	r3, [r3, #0]
    2070:	2b25      	cmp	r3, #37	; 0x25
    2072:	d1f4      	bne.n	205e <mp_vprintf+0x16>
            }
            if (f > fmt) {
    2074:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    2076:	68bb      	ldr	r3, [r7, #8]
    2078:	429a      	cmp	r2, r3
    207a:	d910      	bls.n	209e <mp_vprintf+0x56>
                print->print_strn(print->data, fmt, f - fmt);
    207c:	68fb      	ldr	r3, [r7, #12]
    207e:	685b      	ldr	r3, [r3, #4]
    2080:	68fa      	ldr	r2, [r7, #12]
    2082:	6810      	ldr	r0, [r2, #0]
    2084:	6c39      	ldr	r1, [r7, #64]	; 0x40
    2086:	68ba      	ldr	r2, [r7, #8]
    2088:	1a8a      	subs	r2, r1, r2
    208a:	68b9      	ldr	r1, [r7, #8]
    208c:	4798      	blx	r3
                chrs += f - fmt;
    208e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    2090:	68bb      	ldr	r3, [r7, #8]
    2092:	1ad3      	subs	r3, r2, r3
    2094:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    2096:	4413      	add	r3, r2
    2098:	647b      	str	r3, [r7, #68]	; 0x44
                fmt = f;
    209a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    209c:	60bb      	str	r3, [r7, #8]
            }
        }

        if (*fmt == '\0') {
    209e:	68bb      	ldr	r3, [r7, #8]
    20a0:	781b      	ldrb	r3, [r3, #0]
    20a2:	2b00      	cmp	r3, #0
    20a4:	f000 8214 	beq.w	24d0 <mp_vprintf+0x488>
            break;
        }

        // move past % character
        ++fmt;
    20a8:	68bb      	ldr	r3, [r7, #8]
    20aa:	3301      	adds	r3, #1
    20ac:	60bb      	str	r3, [r7, #8]

        // parse flags, if they exist
        int flags = 0;
    20ae:	2300      	movs	r3, #0
    20b0:	63fb      	str	r3, [r7, #60]	; 0x3c
        char fill = ' ';
    20b2:	2320      	movs	r3, #32
    20b4:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
        while (*fmt != '\0') {
    20b8:	e031      	b.n	211e <mp_vprintf+0xd6>
            if (*fmt == '-') flags |= PF_FLAG_LEFT_ADJUST;
    20ba:	68bb      	ldr	r3, [r7, #8]
    20bc:	781b      	ldrb	r3, [r3, #0]
    20be:	2b2d      	cmp	r3, #45	; 0x2d
    20c0:	d104      	bne.n	20cc <mp_vprintf+0x84>
    20c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    20c4:	f043 0301 	orr.w	r3, r3, #1
    20c8:	63fb      	str	r3, [r7, #60]	; 0x3c
    20ca:	e025      	b.n	2118 <mp_vprintf+0xd0>
            else if (*fmt == '+') flags |= PF_FLAG_SHOW_SIGN;
    20cc:	68bb      	ldr	r3, [r7, #8]
    20ce:	781b      	ldrb	r3, [r3, #0]
    20d0:	2b2b      	cmp	r3, #43	; 0x2b
    20d2:	d104      	bne.n	20de <mp_vprintf+0x96>
    20d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    20d6:	f043 0302 	orr.w	r3, r3, #2
    20da:	63fb      	str	r3, [r7, #60]	; 0x3c
    20dc:	e01c      	b.n	2118 <mp_vprintf+0xd0>
            else if (*fmt == ' ') flags |= PF_FLAG_SPACE_SIGN;
    20de:	68bb      	ldr	r3, [r7, #8]
    20e0:	781b      	ldrb	r3, [r3, #0]
    20e2:	2b20      	cmp	r3, #32
    20e4:	d104      	bne.n	20f0 <mp_vprintf+0xa8>
    20e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    20e8:	f043 0304 	orr.w	r3, r3, #4
    20ec:	63fb      	str	r3, [r7, #60]	; 0x3c
    20ee:	e013      	b.n	2118 <mp_vprintf+0xd0>
            else if (*fmt == '!') flags |= PF_FLAG_NO_TRAILZ;
    20f0:	68bb      	ldr	r3, [r7, #8]
    20f2:	781b      	ldrb	r3, [r3, #0]
    20f4:	2b21      	cmp	r3, #33	; 0x21
    20f6:	d104      	bne.n	2102 <mp_vprintf+0xba>
    20f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    20fa:	f043 0308 	orr.w	r3, r3, #8
    20fe:	63fb      	str	r3, [r7, #60]	; 0x3c
    2100:	e00a      	b.n	2118 <mp_vprintf+0xd0>
            else if (*fmt == '0') {
    2102:	68bb      	ldr	r3, [r7, #8]
    2104:	781b      	ldrb	r3, [r3, #0]
    2106:	2b30      	cmp	r3, #48	; 0x30
    2108:	d10e      	bne.n	2128 <mp_vprintf+0xe0>
                flags |= PF_FLAG_PAD_AFTER_SIGN;
    210a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    210c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    2110:	63fb      	str	r3, [r7, #60]	; 0x3c
                fill = '0';
    2112:	2330      	movs	r3, #48	; 0x30
    2114:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
            } else break;
            ++fmt;
    2118:	68bb      	ldr	r3, [r7, #8]
    211a:	3301      	adds	r3, #1
    211c:	60bb      	str	r3, [r7, #8]
        while (*fmt != '\0') {
    211e:	68bb      	ldr	r3, [r7, #8]
    2120:	781b      	ldrb	r3, [r3, #0]
    2122:	2b00      	cmp	r3, #0
    2124:	d1c9      	bne.n	20ba <mp_vprintf+0x72>
    2126:	e000      	b.n	212a <mp_vprintf+0xe2>
            } else break;
    2128:	bf00      	nop
        }

        // parse width, if it exists
        int width = 0;
    212a:	2300      	movs	r3, #0
    212c:	637b      	str	r3, [r7, #52]	; 0x34
        for (; '0' <= *fmt && *fmt <= '9'; ++fmt) {
    212e:	e00d      	b.n	214c <mp_vprintf+0x104>
            width = width * 10 + *fmt - '0';
    2130:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    2132:	4613      	mov	r3, r2
    2134:	009b      	lsls	r3, r3, #2
    2136:	4413      	add	r3, r2
    2138:	005b      	lsls	r3, r3, #1
    213a:	461a      	mov	r2, r3
    213c:	68bb      	ldr	r3, [r7, #8]
    213e:	781b      	ldrb	r3, [r3, #0]
    2140:	4413      	add	r3, r2
    2142:	3b30      	subs	r3, #48	; 0x30
    2144:	637b      	str	r3, [r7, #52]	; 0x34
        for (; '0' <= *fmt && *fmt <= '9'; ++fmt) {
    2146:	68bb      	ldr	r3, [r7, #8]
    2148:	3301      	adds	r3, #1
    214a:	60bb      	str	r3, [r7, #8]
    214c:	68bb      	ldr	r3, [r7, #8]
    214e:	781b      	ldrb	r3, [r3, #0]
    2150:	2b2f      	cmp	r3, #47	; 0x2f
    2152:	d903      	bls.n	215c <mp_vprintf+0x114>
    2154:	68bb      	ldr	r3, [r7, #8]
    2156:	781b      	ldrb	r3, [r3, #0]
    2158:	2b39      	cmp	r3, #57	; 0x39
    215a:	d9e9      	bls.n	2130 <mp_vprintf+0xe8>
        }

        // parse precision, if it exists
        int prec = -1;
    215c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    2160:	633b      	str	r3, [r7, #48]	; 0x30
        if (*fmt == '.') {
    2162:	68bb      	ldr	r3, [r7, #8]
    2164:	781b      	ldrb	r3, [r3, #0]
    2166:	2b2e      	cmp	r3, #46	; 0x2e
    2168:	d12d      	bne.n	21c6 <mp_vprintf+0x17e>
            ++fmt;
    216a:	68bb      	ldr	r3, [r7, #8]
    216c:	3301      	adds	r3, #1
    216e:	60bb      	str	r3, [r7, #8]
            if (*fmt == '*') {
    2170:	68bb      	ldr	r3, [r7, #8]
    2172:	781b      	ldrb	r3, [r3, #0]
    2174:	2b2a      	cmp	r3, #42	; 0x2a
    2176:	d108      	bne.n	218a <mp_vprintf+0x142>
                ++fmt;
    2178:	68bb      	ldr	r3, [r7, #8]
    217a:	3301      	adds	r3, #1
    217c:	60bb      	str	r3, [r7, #8]
                prec = va_arg(args, int);
    217e:	687b      	ldr	r3, [r7, #4]
    2180:	1d1a      	adds	r2, r3, #4
    2182:	607a      	str	r2, [r7, #4]
    2184:	681b      	ldr	r3, [r3, #0]
    2186:	633b      	str	r3, [r7, #48]	; 0x30
    2188:	e018      	b.n	21bc <mp_vprintf+0x174>
            } else {
                prec = 0;
    218a:	2300      	movs	r3, #0
    218c:	633b      	str	r3, [r7, #48]	; 0x30
                for (; '0' <= *fmt && *fmt <= '9'; ++fmt) {
    218e:	e00d      	b.n	21ac <mp_vprintf+0x164>
                    prec = prec * 10 + *fmt - '0';
    2190:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    2192:	4613      	mov	r3, r2
    2194:	009b      	lsls	r3, r3, #2
    2196:	4413      	add	r3, r2
    2198:	005b      	lsls	r3, r3, #1
    219a:	461a      	mov	r2, r3
    219c:	68bb      	ldr	r3, [r7, #8]
    219e:	781b      	ldrb	r3, [r3, #0]
    21a0:	4413      	add	r3, r2
    21a2:	3b30      	subs	r3, #48	; 0x30
    21a4:	633b      	str	r3, [r7, #48]	; 0x30
                for (; '0' <= *fmt && *fmt <= '9'; ++fmt) {
    21a6:	68bb      	ldr	r3, [r7, #8]
    21a8:	3301      	adds	r3, #1
    21aa:	60bb      	str	r3, [r7, #8]
    21ac:	68bb      	ldr	r3, [r7, #8]
    21ae:	781b      	ldrb	r3, [r3, #0]
    21b0:	2b2f      	cmp	r3, #47	; 0x2f
    21b2:	d903      	bls.n	21bc <mp_vprintf+0x174>
    21b4:	68bb      	ldr	r3, [r7, #8]
    21b6:	781b      	ldrb	r3, [r3, #0]
    21b8:	2b39      	cmp	r3, #57	; 0x39
    21ba:	d9e9      	bls.n	2190 <mp_vprintf+0x148>
                }
            }
            if (prec < 0) {
    21bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    21be:	2b00      	cmp	r3, #0
    21c0:	da01      	bge.n	21c6 <mp_vprintf+0x17e>
                prec = 0;
    21c2:	2300      	movs	r3, #0
    21c4:	633b      	str	r3, [r7, #48]	; 0x30

        // parse long specifiers (only for LP64 model where they make a difference)
        #ifndef __LP64__
        const
        #endif
        bool long_arg = false;
    21c6:	2300      	movs	r3, #0
    21c8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        if (*fmt == 'l') {
    21cc:	68bb      	ldr	r3, [r7, #8]
    21ce:	781b      	ldrb	r3, [r3, #0]
    21d0:	2b6c      	cmp	r3, #108	; 0x6c
    21d2:	d102      	bne.n	21da <mp_vprintf+0x192>
            ++fmt;
    21d4:	68bb      	ldr	r3, [r7, #8]
    21d6:	3301      	adds	r3, #1
    21d8:	60bb      	str	r3, [r7, #8]
            #ifdef __LP64__
            long_arg = true;
            #endif
        }

        if (*fmt == '\0') {
    21da:	68bb      	ldr	r3, [r7, #8]
    21dc:	781b      	ldrb	r3, [r3, #0]
    21de:	2b00      	cmp	r3, #0
    21e0:	f000 8178 	beq.w	24d4 <mp_vprintf+0x48c>
            break;
        }

        switch (*fmt) {
    21e4:	68bb      	ldr	r3, [r7, #8]
    21e6:	781b      	ldrb	r3, [r3, #0]
    21e8:	3b50      	subs	r3, #80	; 0x50
    21ea:	2b28      	cmp	r3, #40	; 0x28
    21ec:	f200 8156 	bhi.w	249c <mp_vprintf+0x454>
    21f0:	a201      	add	r2, pc, #4	; (adr r2, 21f8 <mp_vprintf+0x1b0>)
    21f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    21f6:	bf00      	nop
    21f8:	0000246f 	.word	0x0000246f
    21fc:	0000249d 	.word	0x0000249d
    2200:	0000249d 	.word	0x0000249d
    2204:	0000249d 	.word	0x0000249d
    2208:	0000249d 	.word	0x0000249d
    220c:	0000249d 	.word	0x0000249d
    2210:	0000249d 	.word	0x0000249d
    2214:	0000249d 	.word	0x0000249d
    2218:	00002421 	.word	0x00002421
    221c:	0000249d 	.word	0x0000249d
    2220:	0000249d 	.word	0x0000249d
    2224:	0000249d 	.word	0x0000249d
    2228:	0000249d 	.word	0x0000249d
    222c:	0000249d 	.word	0x0000249d
    2230:	0000249d 	.word	0x0000249d
    2234:	0000249d 	.word	0x0000249d
    2238:	0000249d 	.word	0x0000249d
    223c:	0000249d 	.word	0x0000249d
    2240:	0000229d 	.word	0x0000229d
    2244:	000022e9 	.word	0x000022e9
    2248:	000023f1 	.word	0x000023f1
    224c:	0000249d 	.word	0x0000249d
    2250:	0000249d 	.word	0x0000249d
    2254:	0000249d 	.word	0x0000249d
    2258:	0000249d 	.word	0x0000249d
    225c:	0000249d 	.word	0x0000249d
    2260:	0000249d 	.word	0x0000249d
    2264:	0000249d 	.word	0x0000249d
    2268:	0000249d 	.word	0x0000249d
    226c:	0000249d 	.word	0x0000249d
    2270:	0000249d 	.word	0x0000249d
    2274:	0000249d 	.word	0x0000249d
    2278:	0000246f 	.word	0x0000246f
    227c:	00002319 	.word	0x00002319
    2280:	0000249d 	.word	0x0000249d
    2284:	0000235d 	.word	0x0000235d
    2288:	0000249d 	.word	0x0000249d
    228c:	000023c3 	.word	0x000023c3
    2290:	0000249d 	.word	0x0000249d
    2294:	0000249d 	.word	0x0000249d
    2298:	00002421 	.word	0x00002421
            case 'b':
                if (va_arg(args, int)) {
    229c:	687b      	ldr	r3, [r7, #4]
    229e:	1d1a      	adds	r2, r3, #4
    22a0:	607a      	str	r2, [r7, #4]
    22a2:	681b      	ldr	r3, [r3, #0]
    22a4:	2b00      	cmp	r3, #0
    22a6:	d00f      	beq.n	22c8 <mp_vprintf+0x280>
                    chrs += mp_print_strn(print, "true", 4, flags, fill, width);
    22a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    22aa:	9301      	str	r3, [sp, #4]
    22ac:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
    22b0:	9300      	str	r3, [sp, #0]
    22b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    22b4:	2204      	movs	r2, #4
    22b6:	498a      	ldr	r1, [pc, #552]	; (24e0 <mp_vprintf+0x498>)
    22b8:	68f8      	ldr	r0, [r7, #12]
    22ba:	f7ff fbb3 	bl	1a24 <mp_print_strn>
    22be:	4602      	mov	r2, r0
    22c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    22c2:	4413      	add	r3, r2
    22c4:	647b      	str	r3, [r7, #68]	; 0x44
                } else {
                    chrs += mp_print_strn(print, "false", 5, flags, fill, width);
                }
                break;
    22c6:	e0ff      	b.n	24c8 <mp_vprintf+0x480>
                    chrs += mp_print_strn(print, "false", 5, flags, fill, width);
    22c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    22ca:	9301      	str	r3, [sp, #4]
    22cc:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
    22d0:	9300      	str	r3, [sp, #0]
    22d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    22d4:	2205      	movs	r2, #5
    22d6:	4983      	ldr	r1, [pc, #524]	; (24e4 <mp_vprintf+0x49c>)
    22d8:	68f8      	ldr	r0, [r7, #12]
    22da:	f7ff fba3 	bl	1a24 <mp_print_strn>
    22de:	4602      	mov	r2, r0
    22e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    22e2:	4413      	add	r3, r2
    22e4:	647b      	str	r3, [r7, #68]	; 0x44
                break;
    22e6:	e0ef      	b.n	24c8 <mp_vprintf+0x480>
            case 'c':
            {
                char str = va_arg(args, int);
    22e8:	687b      	ldr	r3, [r7, #4]
    22ea:	1d1a      	adds	r2, r3, #4
    22ec:	607a      	str	r2, [r7, #4]
    22ee:	681b      	ldr	r3, [r3, #0]
    22f0:	b2db      	uxtb	r3, r3
    22f2:	76bb      	strb	r3, [r7, #26]
                chrs += mp_print_strn(print, &str, 1, flags, fill, width);
    22f4:	f107 011a 	add.w	r1, r7, #26
    22f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    22fa:	9301      	str	r3, [sp, #4]
    22fc:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
    2300:	9300      	str	r3, [sp, #0]
    2302:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    2304:	2201      	movs	r2, #1
    2306:	68f8      	ldr	r0, [r7, #12]
    2308:	f7ff fb8c 	bl	1a24 <mp_print_strn>
    230c:	4602      	mov	r2, r0
    230e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    2310:	4413      	add	r3, r2
    2312:	647b      	str	r3, [r7, #68]	; 0x44
                break;
    2314:	bf00      	nop
    2316:	e0d7      	b.n	24c8 <mp_vprintf+0x480>
            }
            case 'q':
            {
                qstr qst = va_arg(args, qstr);
    2318:	687b      	ldr	r3, [r7, #4]
    231a:	1d1a      	adds	r2, r3, #4
    231c:	607a      	str	r2, [r7, #4]
    231e:	681b      	ldr	r3, [r3, #0]
    2320:	627b      	str	r3, [r7, #36]	; 0x24
                size_t len;
                const char *str = (const char*)qstr_data(qst, &len);
    2322:	f107 0314 	add.w	r3, r7, #20
    2326:	4619      	mov	r1, r3
    2328:	6a78      	ldr	r0, [r7, #36]	; 0x24
    232a:	f7ff f82d 	bl	1388 <qstr_data>
    232e:	6238      	str	r0, [r7, #32]
                if (prec < 0) {
    2330:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    2332:	2b00      	cmp	r3, #0
    2334:	da01      	bge.n	233a <mp_vprintf+0x2f2>
                    prec = len;
    2336:	697b      	ldr	r3, [r7, #20]
    2338:	633b      	str	r3, [r7, #48]	; 0x30
                }
                chrs += mp_print_strn(print, str, prec, flags, fill, width);
    233a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    233c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    233e:	9301      	str	r3, [sp, #4]
    2340:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
    2344:	9300      	str	r3, [sp, #0]
    2346:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    2348:	6a39      	ldr	r1, [r7, #32]
    234a:	68f8      	ldr	r0, [r7, #12]
    234c:	f7ff fb6a 	bl	1a24 <mp_print_strn>
    2350:	4602      	mov	r2, r0
    2352:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    2354:	4413      	add	r3, r2
    2356:	647b      	str	r3, [r7, #68]	; 0x44
                break;
    2358:	bf00      	nop
    235a:	e0b5      	b.n	24c8 <mp_vprintf+0x480>
            }
            case 's':
            {
                const char *str = va_arg(args, const char*);
    235c:	687b      	ldr	r3, [r7, #4]
    235e:	1d1a      	adds	r2, r3, #4
    2360:	607a      	str	r2, [r7, #4]
    2362:	681b      	ldr	r3, [r3, #0]
    2364:	61fb      	str	r3, [r7, #28]
                #ifndef NDEBUG
                // With debugging enabled, catch printing of null string pointers
                if (prec != 0 && str == NULL) {
    2366:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    2368:	2b00      	cmp	r3, #0
    236a:	d012      	beq.n	2392 <mp_vprintf+0x34a>
    236c:	69fb      	ldr	r3, [r7, #28]
    236e:	2b00      	cmp	r3, #0
    2370:	d10f      	bne.n	2392 <mp_vprintf+0x34a>
                    chrs += mp_print_strn(print, "(null)", 6, flags, fill, width);
    2372:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    2374:	9301      	str	r3, [sp, #4]
    2376:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
    237a:	9300      	str	r3, [sp, #0]
    237c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    237e:	2206      	movs	r2, #6
    2380:	4959      	ldr	r1, [pc, #356]	; (24e8 <mp_vprintf+0x4a0>)
    2382:	68f8      	ldr	r0, [r7, #12]
    2384:	f7ff fb4e 	bl	1a24 <mp_print_strn>
    2388:	4602      	mov	r2, r0
    238a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    238c:	4413      	add	r3, r2
    238e:	647b      	str	r3, [r7, #68]	; 0x44
                    break;
    2390:	e09a      	b.n	24c8 <mp_vprintf+0x480>
                }
                #endif
                if (prec < 0) {
    2392:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    2394:	2b00      	cmp	r3, #0
    2396:	da04      	bge.n	23a2 <mp_vprintf+0x35a>
                    prec = strlen(str);
    2398:	69f8      	ldr	r0, [r7, #28]
    239a:	f01a fda7 	bl	1ceec <strlen>
    239e:	4603      	mov	r3, r0
    23a0:	633b      	str	r3, [r7, #48]	; 0x30
                }
                chrs += mp_print_strn(print, str, prec, flags, fill, width);
    23a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    23a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    23a6:	9301      	str	r3, [sp, #4]
    23a8:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
    23ac:	9300      	str	r3, [sp, #0]
    23ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    23b0:	69f9      	ldr	r1, [r7, #28]
    23b2:	68f8      	ldr	r0, [r7, #12]
    23b4:	f7ff fb36 	bl	1a24 <mp_print_strn>
    23b8:	4602      	mov	r2, r0
    23ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    23bc:	4413      	add	r3, r2
    23be:	647b      	str	r3, [r7, #68]	; 0x44
                break;
    23c0:	e082      	b.n	24c8 <mp_vprintf+0x480>
            }
            case 'u':
                chrs += mp_print_int(print, va_arg(args, unsigned int), 0, 10, 'a', flags, fill, width);
    23c2:	687b      	ldr	r3, [r7, #4]
    23c4:	1d1a      	adds	r2, r3, #4
    23c6:	607a      	str	r2, [r7, #4]
    23c8:	6819      	ldr	r1, [r3, #0]
    23ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    23cc:	9303      	str	r3, [sp, #12]
    23ce:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
    23d2:	9302      	str	r3, [sp, #8]
    23d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    23d6:	9301      	str	r3, [sp, #4]
    23d8:	2361      	movs	r3, #97	; 0x61
    23da:	9300      	str	r3, [sp, #0]
    23dc:	230a      	movs	r3, #10
    23de:	2200      	movs	r2, #0
    23e0:	68f8      	ldr	r0, [r7, #12]
    23e2:	f7ff fbb7 	bl	1b54 <mp_print_int>
    23e6:	4602      	mov	r2, r0
    23e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    23ea:	4413      	add	r3, r2
    23ec:	647b      	str	r3, [r7, #68]	; 0x44
                break;
    23ee:	e06b      	b.n	24c8 <mp_vprintf+0x480>
            case 'd':
                chrs += mp_print_int(print, va_arg(args, int), 1, 10, 'a', flags, fill, width);
    23f0:	687b      	ldr	r3, [r7, #4]
    23f2:	1d1a      	adds	r2, r3, #4
    23f4:	607a      	str	r2, [r7, #4]
    23f6:	681b      	ldr	r3, [r3, #0]
    23f8:	4619      	mov	r1, r3
    23fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    23fc:	9303      	str	r3, [sp, #12]
    23fe:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
    2402:	9302      	str	r3, [sp, #8]
    2404:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    2406:	9301      	str	r3, [sp, #4]
    2408:	2361      	movs	r3, #97	; 0x61
    240a:	9300      	str	r3, [sp, #0]
    240c:	230a      	movs	r3, #10
    240e:	2201      	movs	r2, #1
    2410:	68f8      	ldr	r0, [r7, #12]
    2412:	f7ff fb9f 	bl	1b54 <mp_print_int>
    2416:	4602      	mov	r2, r0
    2418:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    241a:	4413      	add	r3, r2
    241c:	647b      	str	r3, [r7, #68]	; 0x44
                break;
    241e:	e053      	b.n	24c8 <mp_vprintf+0x480>
            case 'x':
            case 'X': {
                char fmt_c = *fmt - 'X' + 'A';
    2420:	68bb      	ldr	r3, [r7, #8]
    2422:	781b      	ldrb	r3, [r3, #0]
    2424:	3b17      	subs	r3, #23
    2426:	76fb      	strb	r3, [r7, #27]
                mp_uint_t val;
                if (long_arg) {
    2428:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
    242c:	2b00      	cmp	r3, #0
    242e:	d005      	beq.n	243c <mp_vprintf+0x3f4>
                    val = va_arg(args, unsigned long int);
    2430:	687b      	ldr	r3, [r7, #4]
    2432:	1d1a      	adds	r2, r3, #4
    2434:	607a      	str	r2, [r7, #4]
    2436:	681b      	ldr	r3, [r3, #0]
    2438:	62fb      	str	r3, [r7, #44]	; 0x2c
    243a:	e004      	b.n	2446 <mp_vprintf+0x3fe>
                } else {
                    val = va_arg(args, unsigned int);
    243c:	687b      	ldr	r3, [r7, #4]
    243e:	1d1a      	adds	r2, r3, #4
    2440:	607a      	str	r2, [r7, #4]
    2442:	681b      	ldr	r3, [r3, #0]
    2444:	62fb      	str	r3, [r7, #44]	; 0x2c
                }
                chrs += mp_print_int(print, val, 0, 16, fmt_c, flags, fill, width);
    2446:	7efb      	ldrb	r3, [r7, #27]
    2448:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    244a:	9203      	str	r2, [sp, #12]
    244c:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
    2450:	9202      	str	r2, [sp, #8]
    2452:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    2454:	9201      	str	r2, [sp, #4]
    2456:	9300      	str	r3, [sp, #0]
    2458:	2310      	movs	r3, #16
    245a:	2200      	movs	r2, #0
    245c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
    245e:	68f8      	ldr	r0, [r7, #12]
    2460:	f7ff fb78 	bl	1b54 <mp_print_int>
    2464:	4602      	mov	r2, r0
    2466:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    2468:	4413      	add	r3, r2
    246a:	647b      	str	r3, [r7, #68]	; 0x44
                break;
    246c:	e02c      	b.n	24c8 <mp_vprintf+0x480>
            }
            case 'p':
            case 'P': // don't bother to handle upcase for 'P'
                // Use unsigned long int to work on both ILP32 and LP64 systems
                chrs += mp_print_int(print, va_arg(args, unsigned long int), 0, 16, 'a', flags, fill, width);
    246e:	687b      	ldr	r3, [r7, #4]
    2470:	1d1a      	adds	r2, r3, #4
    2472:	607a      	str	r2, [r7, #4]
    2474:	6819      	ldr	r1, [r3, #0]
    2476:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    2478:	9303      	str	r3, [sp, #12]
    247a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
    247e:	9302      	str	r3, [sp, #8]
    2480:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    2482:	9301      	str	r3, [sp, #4]
    2484:	2361      	movs	r3, #97	; 0x61
    2486:	9300      	str	r3, [sp, #0]
    2488:	2310      	movs	r3, #16
    248a:	2200      	movs	r2, #0
    248c:	68f8      	ldr	r0, [r7, #12]
    248e:	f7ff fb61 	bl	1b54 <mp_print_int>
    2492:	4602      	mov	r2, r0
    2494:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    2496:	4413      	add	r3, r2
    2498:	647b      	str	r3, [r7, #68]	; 0x44
                break;
    249a:	e015      	b.n	24c8 <mp_vprintf+0x480>
                assert(!"unsupported fmt char");
            }
            #endif
            default:
                // if it's not %% then it's an unsupported format character
                assert(*fmt == '%' || !"unsupported fmt char");
    249c:	68bb      	ldr	r3, [r7, #8]
    249e:	781b      	ldrb	r3, [r3, #0]
    24a0:	2b25      	cmp	r3, #37	; 0x25
    24a2:	d006      	beq.n	24b2 <mp_vprintf+0x46a>
    24a4:	4b11      	ldr	r3, [pc, #68]	; (24ec <mp_vprintf+0x4a4>)
    24a6:	4a12      	ldr	r2, [pc, #72]	; (24f0 <mp_vprintf+0x4a8>)
    24a8:	f240 2132 	movw	r1, #562	; 0x232
    24ac:	4811      	ldr	r0, [pc, #68]	; (24f4 <mp_vprintf+0x4ac>)
    24ae:	f019 f90f 	bl	1b6d0 <__assert_func>
                print->print_strn(print->data, fmt, 1);
    24b2:	68fb      	ldr	r3, [r7, #12]
    24b4:	685b      	ldr	r3, [r3, #4]
    24b6:	68fa      	ldr	r2, [r7, #12]
    24b8:	6810      	ldr	r0, [r2, #0]
    24ba:	2201      	movs	r2, #1
    24bc:	68b9      	ldr	r1, [r7, #8]
    24be:	4798      	blx	r3
                chrs += 1;
    24c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    24c2:	3301      	adds	r3, #1
    24c4:	647b      	str	r3, [r7, #68]	; 0x44
                break;
    24c6:	bf00      	nop
        }
        ++fmt;
    24c8:	68bb      	ldr	r3, [r7, #8]
    24ca:	3301      	adds	r3, #1
    24cc:	60bb      	str	r3, [r7, #8]
    }
    24ce:	e5c3      	b.n	2058 <mp_vprintf+0x10>
            break;
    24d0:	bf00      	nop
    24d2:	e000      	b.n	24d6 <mp_vprintf+0x48e>
            break;
    24d4:	bf00      	nop
    return chrs;
    24d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
    24d8:	4618      	mov	r0, r3
    24da:	3748      	adds	r7, #72	; 0x48
    24dc:	46bd      	mov	sp, r7
    24de:	bd80      	pop	{r7, pc}
    24e0:	0001f7b0 	.word	0x0001f7b0
    24e4:	0001f7b8 	.word	0x0001f7b8
    24e8:	0001f7c0 	.word	0x0001f7c0
    24ec:	0001f7c8 	.word	0x0001f7c8
    24f0:	0001f800 	.word	0x0001f800
    24f4:	0001f798 	.word	0x0001f798

000024f8 <unichar_isspace>:
}

#endif

// Be aware: These unichar_is* functions are actually ASCII-only!
bool unichar_isspace(unichar c) {
    24f8:	b480      	push	{r7}
    24fa:	b083      	sub	sp, #12
    24fc:	af00      	add	r7, sp, #0
    24fe:	6078      	str	r0, [r7, #4]
    return c < 128 && (attr[c] & FL_SPACE) != 0;
    2500:	687b      	ldr	r3, [r7, #4]
    2502:	2b7f      	cmp	r3, #127	; 0x7f
    2504:	d809      	bhi.n	251a <unichar_isspace+0x22>
    2506:	4a0a      	ldr	r2, [pc, #40]	; (2530 <unichar_isspace+0x38>)
    2508:	687b      	ldr	r3, [r7, #4]
    250a:	4413      	add	r3, r2
    250c:	781b      	ldrb	r3, [r3, #0]
    250e:	f003 0302 	and.w	r3, r3, #2
    2512:	2b00      	cmp	r3, #0
    2514:	d001      	beq.n	251a <unichar_isspace+0x22>
    2516:	2301      	movs	r3, #1
    2518:	e000      	b.n	251c <unichar_isspace+0x24>
    251a:	2300      	movs	r3, #0
    251c:	f003 0301 	and.w	r3, r3, #1
    2520:	b2db      	uxtb	r3, r3
}
    2522:	4618      	mov	r0, r3
    2524:	370c      	adds	r7, #12
    2526:	46bd      	mov	sp, r7
    2528:	f85d 7b04 	ldr.w	r7, [sp], #4
    252c:	4770      	bx	lr
    252e:	bf00      	nop
    2530:	0001f80c 	.word	0x0001f80c

00002534 <unichar_isalpha>:

bool unichar_isalpha(unichar c) {
    2534:	b480      	push	{r7}
    2536:	b083      	sub	sp, #12
    2538:	af00      	add	r7, sp, #0
    253a:	6078      	str	r0, [r7, #4]
    return c < 128 && (attr[c] & FL_ALPHA) != 0;
    253c:	687b      	ldr	r3, [r7, #4]
    253e:	2b7f      	cmp	r3, #127	; 0x7f
    2540:	d809      	bhi.n	2556 <unichar_isalpha+0x22>
    2542:	4a0a      	ldr	r2, [pc, #40]	; (256c <unichar_isalpha+0x38>)
    2544:	687b      	ldr	r3, [r7, #4]
    2546:	4413      	add	r3, r2
    2548:	781b      	ldrb	r3, [r3, #0]
    254a:	f003 0308 	and.w	r3, r3, #8
    254e:	2b00      	cmp	r3, #0
    2550:	d001      	beq.n	2556 <unichar_isalpha+0x22>
    2552:	2301      	movs	r3, #1
    2554:	e000      	b.n	2558 <unichar_isalpha+0x24>
    2556:	2300      	movs	r3, #0
    2558:	f003 0301 	and.w	r3, r3, #1
    255c:	b2db      	uxtb	r3, r3
}
    255e:	4618      	mov	r0, r3
    2560:	370c      	adds	r7, #12
    2562:	46bd      	mov	sp, r7
    2564:	f85d 7b04 	ldr.w	r7, [sp], #4
    2568:	4770      	bx	lr
    256a:	bf00      	nop
    256c:	0001f80c 	.word	0x0001f80c

00002570 <unichar_isdigit>:
bool unichar_isprint(unichar c) {
    return c < 128 && (attr[c] & FL_PRINT) != 0;
}
*/

bool unichar_isdigit(unichar c) {
    2570:	b480      	push	{r7}
    2572:	b083      	sub	sp, #12
    2574:	af00      	add	r7, sp, #0
    2576:	6078      	str	r0, [r7, #4]
    return c < 128 && (attr[c] & FL_DIGIT) != 0;
    2578:	687b      	ldr	r3, [r7, #4]
    257a:	2b7f      	cmp	r3, #127	; 0x7f
    257c:	d809      	bhi.n	2592 <unichar_isdigit+0x22>
    257e:	4a0a      	ldr	r2, [pc, #40]	; (25a8 <unichar_isdigit+0x38>)
    2580:	687b      	ldr	r3, [r7, #4]
    2582:	4413      	add	r3, r2
    2584:	781b      	ldrb	r3, [r3, #0]
    2586:	f003 0304 	and.w	r3, r3, #4
    258a:	2b00      	cmp	r3, #0
    258c:	d001      	beq.n	2592 <unichar_isdigit+0x22>
    258e:	2301      	movs	r3, #1
    2590:	e000      	b.n	2594 <unichar_isdigit+0x24>
    2592:	2300      	movs	r3, #0
    2594:	f003 0301 	and.w	r3, r3, #1
    2598:	b2db      	uxtb	r3, r3
}
    259a:	4618      	mov	r0, r3
    259c:	370c      	adds	r7, #12
    259e:	46bd      	mov	sp, r7
    25a0:	f85d 7b04 	ldr.w	r7, [sp], #4
    25a4:	4770      	bx	lr
    25a6:	bf00      	nop
    25a8:	0001f80c 	.word	0x0001f80c

000025ac <unichar_isxdigit>:

bool unichar_isxdigit(unichar c) {
    25ac:	b480      	push	{r7}
    25ae:	b083      	sub	sp, #12
    25b0:	af00      	add	r7, sp, #0
    25b2:	6078      	str	r0, [r7, #4]
    return c < 128 && (attr[c] & FL_XDIGIT) != 0;
    25b4:	687b      	ldr	r3, [r7, #4]
    25b6:	2b7f      	cmp	r3, #127	; 0x7f
    25b8:	d809      	bhi.n	25ce <unichar_isxdigit+0x22>
    25ba:	4a0a      	ldr	r2, [pc, #40]	; (25e4 <unichar_isxdigit+0x38>)
    25bc:	687b      	ldr	r3, [r7, #4]
    25be:	4413      	add	r3, r2
    25c0:	781b      	ldrb	r3, [r3, #0]
    25c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
    25c6:	2b00      	cmp	r3, #0
    25c8:	d001      	beq.n	25ce <unichar_isxdigit+0x22>
    25ca:	2301      	movs	r3, #1
    25cc:	e000      	b.n	25d0 <unichar_isxdigit+0x24>
    25ce:	2300      	movs	r3, #0
    25d0:	f003 0301 	and.w	r3, r3, #1
    25d4:	b2db      	uxtb	r3, r3
}
    25d6:	4618      	mov	r0, r3
    25d8:	370c      	adds	r7, #12
    25da:	46bd      	mov	sp, r7
    25dc:	f85d 7b04 	ldr.w	r7, [sp], #4
    25e0:	4770      	bx	lr
    25e2:	bf00      	nop
    25e4:	0001f80c 	.word	0x0001f80c

000025e8 <unichar_isident>:

bool unichar_isident(unichar c) {
    25e8:	b480      	push	{r7}
    25ea:	b083      	sub	sp, #12
    25ec:	af00      	add	r7, sp, #0
    25ee:	6078      	str	r0, [r7, #4]
    return c < 128 && ((attr[c] & (FL_ALPHA | FL_DIGIT)) != 0 || c == '_');
    25f0:	687b      	ldr	r3, [r7, #4]
    25f2:	2b7f      	cmp	r3, #127	; 0x7f
    25f4:	d80c      	bhi.n	2610 <unichar_isident+0x28>
    25f6:	4a0b      	ldr	r2, [pc, #44]	; (2624 <unichar_isident+0x3c>)
    25f8:	687b      	ldr	r3, [r7, #4]
    25fa:	4413      	add	r3, r2
    25fc:	781b      	ldrb	r3, [r3, #0]
    25fe:	f003 030c 	and.w	r3, r3, #12
    2602:	2b00      	cmp	r3, #0
    2604:	d102      	bne.n	260c <unichar_isident+0x24>
    2606:	687b      	ldr	r3, [r7, #4]
    2608:	2b5f      	cmp	r3, #95	; 0x5f
    260a:	d101      	bne.n	2610 <unichar_isident+0x28>
    260c:	2301      	movs	r3, #1
    260e:	e000      	b.n	2612 <unichar_isident+0x2a>
    2610:	2300      	movs	r3, #0
    2612:	f003 0301 	and.w	r3, r3, #1
    2616:	b2db      	uxtb	r3, r3
}
    2618:	4618      	mov	r0, r3
    261a:	370c      	adds	r7, #12
    261c:	46bd      	mov	sp, r7
    261e:	f85d 7b04 	ldr.w	r7, [sp], #4
    2622:	4770      	bx	lr
    2624:	0001f80c 	.word	0x0001f80c

00002628 <unichar_isupper>:

bool unichar_isupper(unichar c) {
    2628:	b480      	push	{r7}
    262a:	b083      	sub	sp, #12
    262c:	af00      	add	r7, sp, #0
    262e:	6078      	str	r0, [r7, #4]
    return c < 128 && (attr[c] & FL_UPPER) != 0;
    2630:	687b      	ldr	r3, [r7, #4]
    2632:	2b7f      	cmp	r3, #127	; 0x7f
    2634:	d809      	bhi.n	264a <unichar_isupper+0x22>
    2636:	4a0a      	ldr	r2, [pc, #40]	; (2660 <unichar_isupper+0x38>)
    2638:	687b      	ldr	r3, [r7, #4]
    263a:	4413      	add	r3, r2
    263c:	781b      	ldrb	r3, [r3, #0]
    263e:	f003 0310 	and.w	r3, r3, #16
    2642:	2b00      	cmp	r3, #0
    2644:	d001      	beq.n	264a <unichar_isupper+0x22>
    2646:	2301      	movs	r3, #1
    2648:	e000      	b.n	264c <unichar_isupper+0x24>
    264a:	2300      	movs	r3, #0
    264c:	f003 0301 	and.w	r3, r3, #1
    2650:	b2db      	uxtb	r3, r3
}
    2652:	4618      	mov	r0, r3
    2654:	370c      	adds	r7, #12
    2656:	46bd      	mov	sp, r7
    2658:	f85d 7b04 	ldr.w	r7, [sp], #4
    265c:	4770      	bx	lr
    265e:	bf00      	nop
    2660:	0001f80c 	.word	0x0001f80c

00002664 <unichar_islower>:

bool unichar_islower(unichar c) {
    2664:	b480      	push	{r7}
    2666:	b083      	sub	sp, #12
    2668:	af00      	add	r7, sp, #0
    266a:	6078      	str	r0, [r7, #4]
    return c < 128 && (attr[c] & FL_LOWER) != 0;
    266c:	687b      	ldr	r3, [r7, #4]
    266e:	2b7f      	cmp	r3, #127	; 0x7f
    2670:	d809      	bhi.n	2686 <unichar_islower+0x22>
    2672:	4a0a      	ldr	r2, [pc, #40]	; (269c <unichar_islower+0x38>)
    2674:	687b      	ldr	r3, [r7, #4]
    2676:	4413      	add	r3, r2
    2678:	781b      	ldrb	r3, [r3, #0]
    267a:	f003 0320 	and.w	r3, r3, #32
    267e:	2b00      	cmp	r3, #0
    2680:	d001      	beq.n	2686 <unichar_islower+0x22>
    2682:	2301      	movs	r3, #1
    2684:	e000      	b.n	2688 <unichar_islower+0x24>
    2686:	2300      	movs	r3, #0
    2688:	f003 0301 	and.w	r3, r3, #1
    268c:	b2db      	uxtb	r3, r3
}
    268e:	4618      	mov	r0, r3
    2690:	370c      	adds	r7, #12
    2692:	46bd      	mov	sp, r7
    2694:	f85d 7b04 	ldr.w	r7, [sp], #4
    2698:	4770      	bx	lr
    269a:	bf00      	nop
    269c:	0001f80c 	.word	0x0001f80c

000026a0 <unichar_tolower>:

unichar unichar_tolower(unichar c) {
    26a0:	b580      	push	{r7, lr}
    26a2:	b082      	sub	sp, #8
    26a4:	af00      	add	r7, sp, #0
    26a6:	6078      	str	r0, [r7, #4]
    if (unichar_isupper(c)) {
    26a8:	6878      	ldr	r0, [r7, #4]
    26aa:	f7ff ffbd 	bl	2628 <unichar_isupper>
    26ae:	4603      	mov	r3, r0
    26b0:	2b00      	cmp	r3, #0
    26b2:	d002      	beq.n	26ba <unichar_tolower+0x1a>
        return c + 0x20;
    26b4:	687b      	ldr	r3, [r7, #4]
    26b6:	3320      	adds	r3, #32
    26b8:	e000      	b.n	26bc <unichar_tolower+0x1c>
    }
    return c;
    26ba:	687b      	ldr	r3, [r7, #4]
}
    26bc:	4618      	mov	r0, r3
    26be:	3708      	adds	r7, #8
    26c0:	46bd      	mov	sp, r7
    26c2:	bd80      	pop	{r7, pc}

000026c4 <unichar_toupper>:

unichar unichar_toupper(unichar c) {
    26c4:	b580      	push	{r7, lr}
    26c6:	b082      	sub	sp, #8
    26c8:	af00      	add	r7, sp, #0
    26ca:	6078      	str	r0, [r7, #4]
    if (unichar_islower(c)) {
    26cc:	6878      	ldr	r0, [r7, #4]
    26ce:	f7ff ffc9 	bl	2664 <unichar_islower>
    26d2:	4603      	mov	r3, r0
    26d4:	2b00      	cmp	r3, #0
    26d6:	d002      	beq.n	26de <unichar_toupper+0x1a>
        return c - 0x20;
    26d8:	687b      	ldr	r3, [r7, #4]
    26da:	3b20      	subs	r3, #32
    26dc:	e000      	b.n	26e0 <unichar_toupper+0x1c>
    }
    return c;
    26de:	687b      	ldr	r3, [r7, #4]
}
    26e0:	4618      	mov	r0, r3
    26e2:	3708      	adds	r7, #8
    26e4:	46bd      	mov	sp, r7
    26e6:	bd80      	pop	{r7, pc}

000026e8 <unichar_xdigit_value>:

mp_uint_t unichar_xdigit_value(unichar c) {
    26e8:	b480      	push	{r7}
    26ea:	b085      	sub	sp, #20
    26ec:	af00      	add	r7, sp, #0
    26ee:	6078      	str	r0, [r7, #4]
    // c is assumed to be hex digit
    mp_uint_t n = c - '0';
    26f0:	687b      	ldr	r3, [r7, #4]
    26f2:	3b30      	subs	r3, #48	; 0x30
    26f4:	60fb      	str	r3, [r7, #12]
    if (n > 9) {
    26f6:	68fb      	ldr	r3, [r7, #12]
    26f8:	2b09      	cmp	r3, #9
    26fa:	d906      	bls.n	270a <unichar_xdigit_value+0x22>
        n &= ~('a' - 'A');
    26fc:	68fb      	ldr	r3, [r7, #12]
    26fe:	f023 0320 	bic.w	r3, r3, #32
    2702:	60fb      	str	r3, [r7, #12]
        n -= ('A' - ('9' + 1));
    2704:	68fb      	ldr	r3, [r7, #12]
    2706:	3b07      	subs	r3, #7
    2708:	60fb      	str	r3, [r7, #12]
    }
    return n;
    270a:	68fb      	ldr	r3, [r7, #12]
}
    270c:	4618      	mov	r0, r3
    270e:	3714      	adds	r7, #20
    2710:	46bd      	mov	sp, r7
    2712:	f85d 7b04 	ldr.w	r7, [sp], #4
    2716:	4770      	bx	lr

00002718 <mp_reader_mem_readbyte>:
    const byte *beg;
    const byte *cur;
    const byte *end;
} mp_reader_mem_t;

STATIC mp_uint_t mp_reader_mem_readbyte(void *data) {
    2718:	b480      	push	{r7}
    271a:	b085      	sub	sp, #20
    271c:	af00      	add	r7, sp, #0
    271e:	6078      	str	r0, [r7, #4]
    mp_reader_mem_t *reader = (mp_reader_mem_t*)data;
    2720:	687b      	ldr	r3, [r7, #4]
    2722:	60fb      	str	r3, [r7, #12]
    if (reader->cur < reader->end) {
    2724:	68fb      	ldr	r3, [r7, #12]
    2726:	689a      	ldr	r2, [r3, #8]
    2728:	68fb      	ldr	r3, [r7, #12]
    272a:	68db      	ldr	r3, [r3, #12]
    272c:	429a      	cmp	r2, r3
    272e:	d206      	bcs.n	273e <mp_reader_mem_readbyte+0x26>
        return *reader->cur++;
    2730:	68fb      	ldr	r3, [r7, #12]
    2732:	689b      	ldr	r3, [r3, #8]
    2734:	1c59      	adds	r1, r3, #1
    2736:	68fa      	ldr	r2, [r7, #12]
    2738:	6091      	str	r1, [r2, #8]
    273a:	781b      	ldrb	r3, [r3, #0]
    273c:	e001      	b.n	2742 <mp_reader_mem_readbyte+0x2a>
    } else {
        return MP_READER_EOF;
    273e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    }
}
    2742:	4618      	mov	r0, r3
    2744:	3714      	adds	r7, #20
    2746:	46bd      	mov	sp, r7
    2748:	f85d 7b04 	ldr.w	r7, [sp], #4
    274c:	4770      	bx	lr
    274e:	bf00      	nop

00002750 <mp_reader_mem_close>:

STATIC void mp_reader_mem_close(void *data) {
    2750:	b580      	push	{r7, lr}
    2752:	b084      	sub	sp, #16
    2754:	af00      	add	r7, sp, #0
    2756:	6078      	str	r0, [r7, #4]
    mp_reader_mem_t *reader = (mp_reader_mem_t*)data;
    2758:	687b      	ldr	r3, [r7, #4]
    275a:	60fb      	str	r3, [r7, #12]
    if (reader->free_len > 0) {
    275c:	68fb      	ldr	r3, [r7, #12]
    275e:	681b      	ldr	r3, [r3, #0]
    2760:	2b00      	cmp	r3, #0
    2762:	d004      	beq.n	276e <mp_reader_mem_close+0x1e>
        m_del(char, (char*)reader->beg, reader->free_len);
    2764:	68fb      	ldr	r3, [r7, #12]
    2766:	685b      	ldr	r3, [r3, #4]
    2768:	4618      	mov	r0, r3
    276a:	f7fd fe51 	bl	410 <m_free>
    }
    m_del_obj(mp_reader_mem_t, reader);
    276e:	68f8      	ldr	r0, [r7, #12]
    2770:	f7fd fe4e 	bl	410 <m_free>
}
    2774:	bf00      	nop
    2776:	3710      	adds	r7, #16
    2778:	46bd      	mov	sp, r7
    277a:	bd80      	pop	{r7, pc}

0000277c <mp_reader_new_mem>:

void mp_reader_new_mem(mp_reader_t *reader, const byte *buf, size_t len, size_t free_len) {
    277c:	b580      	push	{r7, lr}
    277e:	b086      	sub	sp, #24
    2780:	af00      	add	r7, sp, #0
    2782:	60f8      	str	r0, [r7, #12]
    2784:	60b9      	str	r1, [r7, #8]
    2786:	607a      	str	r2, [r7, #4]
    2788:	603b      	str	r3, [r7, #0]
    mp_reader_mem_t *rm = m_new_obj(mp_reader_mem_t);
    278a:	2010      	movs	r0, #16
    278c:	f7fd fdc6 	bl	31c <m_malloc>
    2790:	6178      	str	r0, [r7, #20]
    rm->free_len = free_len;
    2792:	697b      	ldr	r3, [r7, #20]
    2794:	683a      	ldr	r2, [r7, #0]
    2796:	601a      	str	r2, [r3, #0]
    rm->beg = buf;
    2798:	697b      	ldr	r3, [r7, #20]
    279a:	68ba      	ldr	r2, [r7, #8]
    279c:	605a      	str	r2, [r3, #4]
    rm->cur = buf;
    279e:	697b      	ldr	r3, [r7, #20]
    27a0:	68ba      	ldr	r2, [r7, #8]
    27a2:	609a      	str	r2, [r3, #8]
    rm->end = buf + len;
    27a4:	68ba      	ldr	r2, [r7, #8]
    27a6:	687b      	ldr	r3, [r7, #4]
    27a8:	441a      	add	r2, r3
    27aa:	697b      	ldr	r3, [r7, #20]
    27ac:	60da      	str	r2, [r3, #12]
    reader->data = rm;
    27ae:	68fb      	ldr	r3, [r7, #12]
    27b0:	697a      	ldr	r2, [r7, #20]
    27b2:	601a      	str	r2, [r3, #0]
    reader->readbyte = mp_reader_mem_readbyte;
    27b4:	68fb      	ldr	r3, [r7, #12]
    27b6:	4a04      	ldr	r2, [pc, #16]	; (27c8 <mp_reader_new_mem+0x4c>)
    27b8:	605a      	str	r2, [r3, #4]
    reader->close = mp_reader_mem_close;
    27ba:	68fb      	ldr	r3, [r7, #12]
    27bc:	4a03      	ldr	r2, [pc, #12]	; (27cc <mp_reader_new_mem+0x50>)
    27be:	609a      	str	r2, [r3, #8]
}
    27c0:	bf00      	nop
    27c2:	3718      	adds	r7, #24
    27c4:	46bd      	mov	sp, r7
    27c6:	bd80      	pop	{r7, pc}
    27c8:	00002719 	.word	0x00002719
    27cc:	00002751 	.word	0x00002751

000027d0 <vstr_reset>:
struct _mp_print_t;
void vstr_init_print(vstr_t *vstr, size_t alloc, struct _mp_print_t *print);
void vstr_clear(vstr_t *vstr);
vstr_t *vstr_new(size_t alloc);
void vstr_free(vstr_t *vstr);
static inline void vstr_reset(vstr_t *vstr) { vstr->len = 0; }
    27d0:	b480      	push	{r7}
    27d2:	b083      	sub	sp, #12
    27d4:	af00      	add	r7, sp, #0
    27d6:	6078      	str	r0, [r7, #4]
    27d8:	687b      	ldr	r3, [r7, #4]
    27da:	2200      	movs	r2, #0
    27dc:	605a      	str	r2, [r3, #4]
    27de:	bf00      	nop
    27e0:	370c      	adds	r7, #12
    27e2:	46bd      	mov	sp, r7
    27e4:	f85d 7b04 	ldr.w	r7, [sp], #4
    27e8:	4770      	bx	lr
    27ea:	bf00      	nop

000027ec <is_end>:
// don't know if that's intentional or not, but we don't allow it

#define MP_LEXER_EOF ((unichar)MP_READER_EOF)
#define CUR_CHAR(lex) ((lex)->chr0)

STATIC bool is_end(mp_lexer_t *lex) {
    27ec:	b480      	push	{r7}
    27ee:	b083      	sub	sp, #12
    27f0:	af00      	add	r7, sp, #0
    27f2:	6078      	str	r0, [r7, #4]
    return lex->chr0 == MP_LEXER_EOF;
    27f4:	687b      	ldr	r3, [r7, #4]
    27f6:	691b      	ldr	r3, [r3, #16]
    27f8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    27fc:	bf0c      	ite	eq
    27fe:	2301      	moveq	r3, #1
    2800:	2300      	movne	r3, #0
    2802:	b2db      	uxtb	r3, r3
}
    2804:	4618      	mov	r0, r3
    2806:	370c      	adds	r7, #12
    2808:	46bd      	mov	sp, r7
    280a:	f85d 7b04 	ldr.w	r7, [sp], #4
    280e:	4770      	bx	lr

00002810 <is_physical_newline>:

STATIC bool is_physical_newline(mp_lexer_t *lex) {
    2810:	b480      	push	{r7}
    2812:	b083      	sub	sp, #12
    2814:	af00      	add	r7, sp, #0
    2816:	6078      	str	r0, [r7, #4]
    return lex->chr0 == '\n';
    2818:	687b      	ldr	r3, [r7, #4]
    281a:	691b      	ldr	r3, [r3, #16]
    281c:	2b0a      	cmp	r3, #10
    281e:	bf0c      	ite	eq
    2820:	2301      	moveq	r3, #1
    2822:	2300      	movne	r3, #0
    2824:	b2db      	uxtb	r3, r3
}
    2826:	4618      	mov	r0, r3
    2828:	370c      	adds	r7, #12
    282a:	46bd      	mov	sp, r7
    282c:	f85d 7b04 	ldr.w	r7, [sp], #4
    2830:	4770      	bx	lr
    2832:	bf00      	nop

00002834 <is_char>:

STATIC bool is_char(mp_lexer_t *lex, byte c) {
    2834:	b480      	push	{r7}
    2836:	b083      	sub	sp, #12
    2838:	af00      	add	r7, sp, #0
    283a:	6078      	str	r0, [r7, #4]
    283c:	460b      	mov	r3, r1
    283e:	70fb      	strb	r3, [r7, #3]
    return lex->chr0 == c;
    2840:	687b      	ldr	r3, [r7, #4]
    2842:	691a      	ldr	r2, [r3, #16]
    2844:	78fb      	ldrb	r3, [r7, #3]
    2846:	429a      	cmp	r2, r3
    2848:	bf0c      	ite	eq
    284a:	2301      	moveq	r3, #1
    284c:	2300      	movne	r3, #0
    284e:	b2db      	uxtb	r3, r3
}
    2850:	4618      	mov	r0, r3
    2852:	370c      	adds	r7, #12
    2854:	46bd      	mov	sp, r7
    2856:	f85d 7b04 	ldr.w	r7, [sp], #4
    285a:	4770      	bx	lr

0000285c <is_char_or>:

STATIC bool is_char_or(mp_lexer_t *lex, byte c1, byte c2) {
    285c:	b480      	push	{r7}
    285e:	b083      	sub	sp, #12
    2860:	af00      	add	r7, sp, #0
    2862:	6078      	str	r0, [r7, #4]
    2864:	460b      	mov	r3, r1
    2866:	70fb      	strb	r3, [r7, #3]
    2868:	4613      	mov	r3, r2
    286a:	70bb      	strb	r3, [r7, #2]
    return lex->chr0 == c1 || lex->chr0 == c2;
    286c:	687b      	ldr	r3, [r7, #4]
    286e:	691a      	ldr	r2, [r3, #16]
    2870:	78fb      	ldrb	r3, [r7, #3]
    2872:	429a      	cmp	r2, r3
    2874:	d004      	beq.n	2880 <is_char_or+0x24>
    2876:	687b      	ldr	r3, [r7, #4]
    2878:	691a      	ldr	r2, [r3, #16]
    287a:	78bb      	ldrb	r3, [r7, #2]
    287c:	429a      	cmp	r2, r3
    287e:	d101      	bne.n	2884 <is_char_or+0x28>
    2880:	2301      	movs	r3, #1
    2882:	e000      	b.n	2886 <is_char_or+0x2a>
    2884:	2300      	movs	r3, #0
    2886:	f003 0301 	and.w	r3, r3, #1
    288a:	b2db      	uxtb	r3, r3
}
    288c:	4618      	mov	r0, r3
    288e:	370c      	adds	r7, #12
    2890:	46bd      	mov	sp, r7
    2892:	f85d 7b04 	ldr.w	r7, [sp], #4
    2896:	4770      	bx	lr

00002898 <is_char_or3>:

STATIC bool is_char_or3(mp_lexer_t *lex, byte c1, byte c2, byte c3) {
    2898:	b480      	push	{r7}
    289a:	b083      	sub	sp, #12
    289c:	af00      	add	r7, sp, #0
    289e:	6078      	str	r0, [r7, #4]
    28a0:	4608      	mov	r0, r1
    28a2:	4611      	mov	r1, r2
    28a4:	461a      	mov	r2, r3
    28a6:	4603      	mov	r3, r0
    28a8:	70fb      	strb	r3, [r7, #3]
    28aa:	460b      	mov	r3, r1
    28ac:	70bb      	strb	r3, [r7, #2]
    28ae:	4613      	mov	r3, r2
    28b0:	707b      	strb	r3, [r7, #1]
    return lex->chr0 == c1 || lex->chr0 == c2 || lex->chr0 == c3;
    28b2:	687b      	ldr	r3, [r7, #4]
    28b4:	691a      	ldr	r2, [r3, #16]
    28b6:	78fb      	ldrb	r3, [r7, #3]
    28b8:	429a      	cmp	r2, r3
    28ba:	d009      	beq.n	28d0 <is_char_or3+0x38>
    28bc:	687b      	ldr	r3, [r7, #4]
    28be:	691a      	ldr	r2, [r3, #16]
    28c0:	78bb      	ldrb	r3, [r7, #2]
    28c2:	429a      	cmp	r2, r3
    28c4:	d004      	beq.n	28d0 <is_char_or3+0x38>
    28c6:	687b      	ldr	r3, [r7, #4]
    28c8:	691a      	ldr	r2, [r3, #16]
    28ca:	787b      	ldrb	r3, [r7, #1]
    28cc:	429a      	cmp	r2, r3
    28ce:	d101      	bne.n	28d4 <is_char_or3+0x3c>
    28d0:	2301      	movs	r3, #1
    28d2:	e000      	b.n	28d6 <is_char_or3+0x3e>
    28d4:	2300      	movs	r3, #0
    28d6:	f003 0301 	and.w	r3, r3, #1
    28da:	b2db      	uxtb	r3, r3
}
    28dc:	4618      	mov	r0, r3
    28de:	370c      	adds	r7, #12
    28e0:	46bd      	mov	sp, r7
    28e2:	f85d 7b04 	ldr.w	r7, [sp], #4
    28e6:	4770      	bx	lr

000028e8 <is_char_following>:

STATIC bool is_char_following(mp_lexer_t *lex, byte c) {
    28e8:	b480      	push	{r7}
    28ea:	b083      	sub	sp, #12
    28ec:	af00      	add	r7, sp, #0
    28ee:	6078      	str	r0, [r7, #4]
    28f0:	460b      	mov	r3, r1
    28f2:	70fb      	strb	r3, [r7, #3]
    return lex->chr1 == c;
    28f4:	687b      	ldr	r3, [r7, #4]
    28f6:	695a      	ldr	r2, [r3, #20]
    28f8:	78fb      	ldrb	r3, [r7, #3]
    28fa:	429a      	cmp	r2, r3
    28fc:	bf0c      	ite	eq
    28fe:	2301      	moveq	r3, #1
    2900:	2300      	movne	r3, #0
    2902:	b2db      	uxtb	r3, r3
}
    2904:	4618      	mov	r0, r3
    2906:	370c      	adds	r7, #12
    2908:	46bd      	mov	sp, r7
    290a:	f85d 7b04 	ldr.w	r7, [sp], #4
    290e:	4770      	bx	lr

00002910 <is_char_following_or>:

STATIC bool is_char_following_or(mp_lexer_t *lex, byte c1, byte c2) {
    2910:	b480      	push	{r7}
    2912:	b083      	sub	sp, #12
    2914:	af00      	add	r7, sp, #0
    2916:	6078      	str	r0, [r7, #4]
    2918:	460b      	mov	r3, r1
    291a:	70fb      	strb	r3, [r7, #3]
    291c:	4613      	mov	r3, r2
    291e:	70bb      	strb	r3, [r7, #2]
    return lex->chr1 == c1 || lex->chr1 == c2;
    2920:	687b      	ldr	r3, [r7, #4]
    2922:	695a      	ldr	r2, [r3, #20]
    2924:	78fb      	ldrb	r3, [r7, #3]
    2926:	429a      	cmp	r2, r3
    2928:	d004      	beq.n	2934 <is_char_following_or+0x24>
    292a:	687b      	ldr	r3, [r7, #4]
    292c:	695a      	ldr	r2, [r3, #20]
    292e:	78bb      	ldrb	r3, [r7, #2]
    2930:	429a      	cmp	r2, r3
    2932:	d101      	bne.n	2938 <is_char_following_or+0x28>
    2934:	2301      	movs	r3, #1
    2936:	e000      	b.n	293a <is_char_following_or+0x2a>
    2938:	2300      	movs	r3, #0
    293a:	f003 0301 	and.w	r3, r3, #1
    293e:	b2db      	uxtb	r3, r3
}
    2940:	4618      	mov	r0, r3
    2942:	370c      	adds	r7, #12
    2944:	46bd      	mov	sp, r7
    2946:	f85d 7b04 	ldr.w	r7, [sp], #4
    294a:	4770      	bx	lr

0000294c <is_char_following_following_or>:

STATIC bool is_char_following_following_or(mp_lexer_t *lex, byte c1, byte c2) {
    294c:	b480      	push	{r7}
    294e:	b083      	sub	sp, #12
    2950:	af00      	add	r7, sp, #0
    2952:	6078      	str	r0, [r7, #4]
    2954:	460b      	mov	r3, r1
    2956:	70fb      	strb	r3, [r7, #3]
    2958:	4613      	mov	r3, r2
    295a:	70bb      	strb	r3, [r7, #2]
    return lex->chr2 == c1 || lex->chr2 == c2;
    295c:	687b      	ldr	r3, [r7, #4]
    295e:	699a      	ldr	r2, [r3, #24]
    2960:	78fb      	ldrb	r3, [r7, #3]
    2962:	429a      	cmp	r2, r3
    2964:	d004      	beq.n	2970 <is_char_following_following_or+0x24>
    2966:	687b      	ldr	r3, [r7, #4]
    2968:	699a      	ldr	r2, [r3, #24]
    296a:	78bb      	ldrb	r3, [r7, #2]
    296c:	429a      	cmp	r2, r3
    296e:	d101      	bne.n	2974 <is_char_following_following_or+0x28>
    2970:	2301      	movs	r3, #1
    2972:	e000      	b.n	2976 <is_char_following_following_or+0x2a>
    2974:	2300      	movs	r3, #0
    2976:	f003 0301 	and.w	r3, r3, #1
    297a:	b2db      	uxtb	r3, r3
}
    297c:	4618      	mov	r0, r3
    297e:	370c      	adds	r7, #12
    2980:	46bd      	mov	sp, r7
    2982:	f85d 7b04 	ldr.w	r7, [sp], #4
    2986:	4770      	bx	lr

00002988 <is_char_and>:

STATIC bool is_char_and(mp_lexer_t *lex, byte c1, byte c2) {
    2988:	b480      	push	{r7}
    298a:	b083      	sub	sp, #12
    298c:	af00      	add	r7, sp, #0
    298e:	6078      	str	r0, [r7, #4]
    2990:	460b      	mov	r3, r1
    2992:	70fb      	strb	r3, [r7, #3]
    2994:	4613      	mov	r3, r2
    2996:	70bb      	strb	r3, [r7, #2]
    return lex->chr0 == c1 && lex->chr1 == c2;
    2998:	687b      	ldr	r3, [r7, #4]
    299a:	691a      	ldr	r2, [r3, #16]
    299c:	78fb      	ldrb	r3, [r7, #3]
    299e:	429a      	cmp	r2, r3
    29a0:	d106      	bne.n	29b0 <is_char_and+0x28>
    29a2:	687b      	ldr	r3, [r7, #4]
    29a4:	695a      	ldr	r2, [r3, #20]
    29a6:	78bb      	ldrb	r3, [r7, #2]
    29a8:	429a      	cmp	r2, r3
    29aa:	d101      	bne.n	29b0 <is_char_and+0x28>
    29ac:	2301      	movs	r3, #1
    29ae:	e000      	b.n	29b2 <is_char_and+0x2a>
    29b0:	2300      	movs	r3, #0
    29b2:	f003 0301 	and.w	r3, r3, #1
    29b6:	b2db      	uxtb	r3, r3
}
    29b8:	4618      	mov	r0, r3
    29ba:	370c      	adds	r7, #12
    29bc:	46bd      	mov	sp, r7
    29be:	f85d 7b04 	ldr.w	r7, [sp], #4
    29c2:	4770      	bx	lr

000029c4 <is_whitespace>:

STATIC bool is_whitespace(mp_lexer_t *lex) {
    29c4:	b580      	push	{r7, lr}
    29c6:	b082      	sub	sp, #8
    29c8:	af00      	add	r7, sp, #0
    29ca:	6078      	str	r0, [r7, #4]
    return unichar_isspace(lex->chr0);
    29cc:	687b      	ldr	r3, [r7, #4]
    29ce:	691b      	ldr	r3, [r3, #16]
    29d0:	4618      	mov	r0, r3
    29d2:	f7ff fd91 	bl	24f8 <unichar_isspace>
    29d6:	4603      	mov	r3, r0
}
    29d8:	4618      	mov	r0, r3
    29da:	3708      	adds	r7, #8
    29dc:	46bd      	mov	sp, r7
    29de:	bd80      	pop	{r7, pc}

000029e0 <is_letter>:

STATIC bool is_letter(mp_lexer_t *lex) {
    29e0:	b580      	push	{r7, lr}
    29e2:	b082      	sub	sp, #8
    29e4:	af00      	add	r7, sp, #0
    29e6:	6078      	str	r0, [r7, #4]
    return unichar_isalpha(lex->chr0);
    29e8:	687b      	ldr	r3, [r7, #4]
    29ea:	691b      	ldr	r3, [r3, #16]
    29ec:	4618      	mov	r0, r3
    29ee:	f7ff fda1 	bl	2534 <unichar_isalpha>
    29f2:	4603      	mov	r3, r0
}
    29f4:	4618      	mov	r0, r3
    29f6:	3708      	adds	r7, #8
    29f8:	46bd      	mov	sp, r7
    29fa:	bd80      	pop	{r7, pc}

000029fc <is_digit>:

STATIC bool is_digit(mp_lexer_t *lex) {
    29fc:	b580      	push	{r7, lr}
    29fe:	b082      	sub	sp, #8
    2a00:	af00      	add	r7, sp, #0
    2a02:	6078      	str	r0, [r7, #4]
    return unichar_isdigit(lex->chr0);
    2a04:	687b      	ldr	r3, [r7, #4]
    2a06:	691b      	ldr	r3, [r3, #16]
    2a08:	4618      	mov	r0, r3
    2a0a:	f7ff fdb1 	bl	2570 <unichar_isdigit>
    2a0e:	4603      	mov	r3, r0
}
    2a10:	4618      	mov	r0, r3
    2a12:	3708      	adds	r7, #8
    2a14:	46bd      	mov	sp, r7
    2a16:	bd80      	pop	{r7, pc}

00002a18 <is_following_digit>:

STATIC bool is_following_digit(mp_lexer_t *lex) {
    2a18:	b580      	push	{r7, lr}
    2a1a:	b082      	sub	sp, #8
    2a1c:	af00      	add	r7, sp, #0
    2a1e:	6078      	str	r0, [r7, #4]
    return unichar_isdigit(lex->chr1);
    2a20:	687b      	ldr	r3, [r7, #4]
    2a22:	695b      	ldr	r3, [r3, #20]
    2a24:	4618      	mov	r0, r3
    2a26:	f7ff fda3 	bl	2570 <unichar_isdigit>
    2a2a:	4603      	mov	r3, r0
}
    2a2c:	4618      	mov	r0, r3
    2a2e:	3708      	adds	r7, #8
    2a30:	46bd      	mov	sp, r7
    2a32:	bd80      	pop	{r7, pc}

00002a34 <is_following_base_char>:

STATIC bool is_following_base_char(mp_lexer_t *lex) {
    2a34:	b480      	push	{r7}
    2a36:	b085      	sub	sp, #20
    2a38:	af00      	add	r7, sp, #0
    2a3a:	6078      	str	r0, [r7, #4]
    const unichar chr1 = lex->chr1 | 0x20;
    2a3c:	687b      	ldr	r3, [r7, #4]
    2a3e:	695b      	ldr	r3, [r3, #20]
    2a40:	f043 0320 	orr.w	r3, r3, #32
    2a44:	60fb      	str	r3, [r7, #12]
    return chr1 == 'b' || chr1 == 'o' || chr1 == 'x';
    2a46:	68fb      	ldr	r3, [r7, #12]
    2a48:	2b62      	cmp	r3, #98	; 0x62
    2a4a:	d005      	beq.n	2a58 <is_following_base_char+0x24>
    2a4c:	68fb      	ldr	r3, [r7, #12]
    2a4e:	2b6f      	cmp	r3, #111	; 0x6f
    2a50:	d002      	beq.n	2a58 <is_following_base_char+0x24>
    2a52:	68fb      	ldr	r3, [r7, #12]
    2a54:	2b78      	cmp	r3, #120	; 0x78
    2a56:	d101      	bne.n	2a5c <is_following_base_char+0x28>
    2a58:	2301      	movs	r3, #1
    2a5a:	e000      	b.n	2a5e <is_following_base_char+0x2a>
    2a5c:	2300      	movs	r3, #0
    2a5e:	f003 0301 	and.w	r3, r3, #1
    2a62:	b2db      	uxtb	r3, r3
}
    2a64:	4618      	mov	r0, r3
    2a66:	3714      	adds	r7, #20
    2a68:	46bd      	mov	sp, r7
    2a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
    2a6e:	4770      	bx	lr

00002a70 <is_following_odigit>:

STATIC bool is_following_odigit(mp_lexer_t *lex) {
    2a70:	b480      	push	{r7}
    2a72:	b083      	sub	sp, #12
    2a74:	af00      	add	r7, sp, #0
    2a76:	6078      	str	r0, [r7, #4]
    return lex->chr1 >= '0' && lex->chr1 <= '7';
    2a78:	687b      	ldr	r3, [r7, #4]
    2a7a:	695b      	ldr	r3, [r3, #20]
    2a7c:	2b2f      	cmp	r3, #47	; 0x2f
    2a7e:	d905      	bls.n	2a8c <is_following_odigit+0x1c>
    2a80:	687b      	ldr	r3, [r7, #4]
    2a82:	695b      	ldr	r3, [r3, #20]
    2a84:	2b37      	cmp	r3, #55	; 0x37
    2a86:	d801      	bhi.n	2a8c <is_following_odigit+0x1c>
    2a88:	2301      	movs	r3, #1
    2a8a:	e000      	b.n	2a8e <is_following_odigit+0x1e>
    2a8c:	2300      	movs	r3, #0
    2a8e:	f003 0301 	and.w	r3, r3, #1
    2a92:	b2db      	uxtb	r3, r3
}
    2a94:	4618      	mov	r0, r3
    2a96:	370c      	adds	r7, #12
    2a98:	46bd      	mov	sp, r7
    2a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
    2a9e:	4770      	bx	lr

00002aa0 <is_string_or_bytes>:

STATIC bool is_string_or_bytes(mp_lexer_t *lex) {
    2aa0:	b580      	push	{r7, lr}
    2aa2:	b082      	sub	sp, #8
    2aa4:	af00      	add	r7, sp, #0
    2aa6:	6078      	str	r0, [r7, #4]
    return is_char_or(lex, '\'', '\"')
    2aa8:	2222      	movs	r2, #34	; 0x22
    2aaa:	2127      	movs	r1, #39	; 0x27
    2aac:	6878      	ldr	r0, [r7, #4]
    2aae:	f7ff fed5 	bl	285c <is_char_or>
    2ab2:	4603      	mov	r3, r0
        || (is_char_or3(lex, 'r', 'u', 'b') && is_char_following_or(lex, '\'', '\"'))
        || ((is_char_and(lex, 'r', 'b') || is_char_and(lex, 'b', 'r'))
    2ab4:	2b00      	cmp	r3, #0
    2ab6:	d128      	bne.n	2b0a <is_string_or_bytes+0x6a>
        || (is_char_or3(lex, 'r', 'u', 'b') && is_char_following_or(lex, '\'', '\"'))
    2ab8:	2362      	movs	r3, #98	; 0x62
    2aba:	2275      	movs	r2, #117	; 0x75
    2abc:	2172      	movs	r1, #114	; 0x72
    2abe:	6878      	ldr	r0, [r7, #4]
    2ac0:	f7ff feea 	bl	2898 <is_char_or3>
    2ac4:	4603      	mov	r3, r0
    2ac6:	2b00      	cmp	r3, #0
    2ac8:	d007      	beq.n	2ada <is_string_or_bytes+0x3a>
    2aca:	2222      	movs	r2, #34	; 0x22
    2acc:	2127      	movs	r1, #39	; 0x27
    2ace:	6878      	ldr	r0, [r7, #4]
    2ad0:	f7ff ff1e 	bl	2910 <is_char_following_or>
    2ad4:	4603      	mov	r3, r0
    2ad6:	2b00      	cmp	r3, #0
    2ad8:	d117      	bne.n	2b0a <is_string_or_bytes+0x6a>
        || ((is_char_and(lex, 'r', 'b') || is_char_and(lex, 'b', 'r'))
    2ada:	2262      	movs	r2, #98	; 0x62
    2adc:	2172      	movs	r1, #114	; 0x72
    2ade:	6878      	ldr	r0, [r7, #4]
    2ae0:	f7ff ff52 	bl	2988 <is_char_and>
    2ae4:	4603      	mov	r3, r0
    2ae6:	2b00      	cmp	r3, #0
    2ae8:	d107      	bne.n	2afa <is_string_or_bytes+0x5a>
    2aea:	2272      	movs	r2, #114	; 0x72
    2aec:	2162      	movs	r1, #98	; 0x62
    2aee:	6878      	ldr	r0, [r7, #4]
    2af0:	f7ff ff4a 	bl	2988 <is_char_and>
    2af4:	4603      	mov	r3, r0
    2af6:	2b00      	cmp	r3, #0
    2af8:	d009      	beq.n	2b0e <is_string_or_bytes+0x6e>
            && is_char_following_following_or(lex, '\'', '\"'));
    2afa:	2222      	movs	r2, #34	; 0x22
    2afc:	2127      	movs	r1, #39	; 0x27
    2afe:	6878      	ldr	r0, [r7, #4]
    2b00:	f7ff ff24 	bl	294c <is_char_following_following_or>
    2b04:	4603      	mov	r3, r0
    2b06:	2b00      	cmp	r3, #0
    2b08:	d001      	beq.n	2b0e <is_string_or_bytes+0x6e>
        || ((is_char_and(lex, 'r', 'b') || is_char_and(lex, 'b', 'r'))
    2b0a:	2301      	movs	r3, #1
    2b0c:	e000      	b.n	2b10 <is_string_or_bytes+0x70>
    2b0e:	2300      	movs	r3, #0
    return is_char_or(lex, '\'', '\"')
    2b10:	f003 0301 	and.w	r3, r3, #1
    2b14:	b2db      	uxtb	r3, r3
}
    2b16:	4618      	mov	r0, r3
    2b18:	3708      	adds	r7, #8
    2b1a:	46bd      	mov	sp, r7
    2b1c:	bd80      	pop	{r7, pc}
    2b1e:	bf00      	nop

00002b20 <is_head_of_identifier>:

// to easily parse utf-8 identifiers we allow any raw byte with high bit set
STATIC bool is_head_of_identifier(mp_lexer_t *lex) {
    2b20:	b580      	push	{r7, lr}
    2b22:	b082      	sub	sp, #8
    2b24:	af00      	add	r7, sp, #0
    2b26:	6078      	str	r0, [r7, #4]
    return is_letter(lex) || lex->chr0 == '_' || lex->chr0 >= 0x80;
    2b28:	6878      	ldr	r0, [r7, #4]
    2b2a:	f7ff ff59 	bl	29e0 <is_letter>
    2b2e:	4603      	mov	r3, r0
    2b30:	2b00      	cmp	r3, #0
    2b32:	d107      	bne.n	2b44 <is_head_of_identifier+0x24>
    2b34:	687b      	ldr	r3, [r7, #4]
    2b36:	691b      	ldr	r3, [r3, #16]
    2b38:	2b5f      	cmp	r3, #95	; 0x5f
    2b3a:	d003      	beq.n	2b44 <is_head_of_identifier+0x24>
    2b3c:	687b      	ldr	r3, [r7, #4]
    2b3e:	691b      	ldr	r3, [r3, #16]
    2b40:	2b7f      	cmp	r3, #127	; 0x7f
    2b42:	d901      	bls.n	2b48 <is_head_of_identifier+0x28>
    2b44:	2301      	movs	r3, #1
    2b46:	e000      	b.n	2b4a <is_head_of_identifier+0x2a>
    2b48:	2300      	movs	r3, #0
    2b4a:	f003 0301 	and.w	r3, r3, #1
    2b4e:	b2db      	uxtb	r3, r3
}
    2b50:	4618      	mov	r0, r3
    2b52:	3708      	adds	r7, #8
    2b54:	46bd      	mov	sp, r7
    2b56:	bd80      	pop	{r7, pc}

00002b58 <is_tail_of_identifier>:

STATIC bool is_tail_of_identifier(mp_lexer_t *lex) {
    2b58:	b580      	push	{r7, lr}
    2b5a:	b082      	sub	sp, #8
    2b5c:	af00      	add	r7, sp, #0
    2b5e:	6078      	str	r0, [r7, #4]
    return is_head_of_identifier(lex) || is_digit(lex);
    2b60:	6878      	ldr	r0, [r7, #4]
    2b62:	f7ff ffdd 	bl	2b20 <is_head_of_identifier>
    2b66:	4603      	mov	r3, r0
    2b68:	2b00      	cmp	r3, #0
    2b6a:	d105      	bne.n	2b78 <is_tail_of_identifier+0x20>
    2b6c:	6878      	ldr	r0, [r7, #4]
    2b6e:	f7ff ff45 	bl	29fc <is_digit>
    2b72:	4603      	mov	r3, r0
    2b74:	2b00      	cmp	r3, #0
    2b76:	d001      	beq.n	2b7c <is_tail_of_identifier+0x24>
    2b78:	2301      	movs	r3, #1
    2b7a:	e000      	b.n	2b7e <is_tail_of_identifier+0x26>
    2b7c:	2300      	movs	r3, #0
    2b7e:	f003 0301 	and.w	r3, r3, #1
    2b82:	b2db      	uxtb	r3, r3
}
    2b84:	4618      	mov	r0, r3
    2b86:	3708      	adds	r7, #8
    2b88:	46bd      	mov	sp, r7
    2b8a:	bd80      	pop	{r7, pc}

00002b8c <next_char>:

STATIC void next_char(mp_lexer_t *lex) {
    2b8c:	b580      	push	{r7, lr}
    2b8e:	b082      	sub	sp, #8
    2b90:	af00      	add	r7, sp, #0
    2b92:	6078      	str	r0, [r7, #4]
    if (lex->chr0 == '\n') {
    2b94:	687b      	ldr	r3, [r7, #4]
    2b96:	691b      	ldr	r3, [r3, #16]
    2b98:	2b0a      	cmp	r3, #10
    2b9a:	d108      	bne.n	2bae <next_char+0x22>
        // a new line
        ++lex->line;
    2b9c:	687b      	ldr	r3, [r7, #4]
    2b9e:	69db      	ldr	r3, [r3, #28]
    2ba0:	1c5a      	adds	r2, r3, #1
    2ba2:	687b      	ldr	r3, [r7, #4]
    2ba4:	61da      	str	r2, [r3, #28]
        lex->column = 1;
    2ba6:	687b      	ldr	r3, [r7, #4]
    2ba8:	2201      	movs	r2, #1
    2baa:	621a      	str	r2, [r3, #32]
    2bac:	e011      	b.n	2bd2 <next_char+0x46>
    } else if (lex->chr0 == '\t') {
    2bae:	687b      	ldr	r3, [r7, #4]
    2bb0:	691b      	ldr	r3, [r3, #16]
    2bb2:	2b09      	cmp	r3, #9
    2bb4:	d108      	bne.n	2bc8 <next_char+0x3c>
        // a tab
        lex->column = (((lex->column - 1 + TAB_SIZE) / TAB_SIZE) * TAB_SIZE) + 1;
    2bb6:	687b      	ldr	r3, [r7, #4]
    2bb8:	6a1b      	ldr	r3, [r3, #32]
    2bba:	3307      	adds	r3, #7
    2bbc:	08db      	lsrs	r3, r3, #3
    2bbe:	00db      	lsls	r3, r3, #3
    2bc0:	1c5a      	adds	r2, r3, #1
    2bc2:	687b      	ldr	r3, [r7, #4]
    2bc4:	621a      	str	r2, [r3, #32]
    2bc6:	e004      	b.n	2bd2 <next_char+0x46>
    } else {
        // a character worth one column
        ++lex->column;
    2bc8:	687b      	ldr	r3, [r7, #4]
    2bca:	6a1b      	ldr	r3, [r3, #32]
    2bcc:	1c5a      	adds	r2, r3, #1
    2bce:	687b      	ldr	r3, [r7, #4]
    2bd0:	621a      	str	r2, [r3, #32]
    }

    lex->chr0 = lex->chr1;
    2bd2:	687b      	ldr	r3, [r7, #4]
    2bd4:	695a      	ldr	r2, [r3, #20]
    2bd6:	687b      	ldr	r3, [r7, #4]
    2bd8:	611a      	str	r2, [r3, #16]
    lex->chr1 = lex->chr2;
    2bda:	687b      	ldr	r3, [r7, #4]
    2bdc:	699a      	ldr	r2, [r3, #24]
    2bde:	687b      	ldr	r3, [r7, #4]
    2be0:	615a      	str	r2, [r3, #20]
    lex->chr2 = lex->reader.readbyte(lex->reader.data);
    2be2:	687b      	ldr	r3, [r7, #4]
    2be4:	689b      	ldr	r3, [r3, #8]
    2be6:	687a      	ldr	r2, [r7, #4]
    2be8:	6852      	ldr	r2, [r2, #4]
    2bea:	4610      	mov	r0, r2
    2bec:	4798      	blx	r3
    2bee:	4602      	mov	r2, r0
    2bf0:	687b      	ldr	r3, [r7, #4]
    2bf2:	619a      	str	r2, [r3, #24]

    if (lex->chr1 == '\r') {
    2bf4:	687b      	ldr	r3, [r7, #4]
    2bf6:	695b      	ldr	r3, [r3, #20]
    2bf8:	2b0d      	cmp	r3, #13
    2bfa:	d10f      	bne.n	2c1c <next_char+0x90>
        // CR is a new line, converted to LF
        lex->chr1 = '\n';
    2bfc:	687b      	ldr	r3, [r7, #4]
    2bfe:	220a      	movs	r2, #10
    2c00:	615a      	str	r2, [r3, #20]
        if (lex->chr2 == '\n') {
    2c02:	687b      	ldr	r3, [r7, #4]
    2c04:	699b      	ldr	r3, [r3, #24]
    2c06:	2b0a      	cmp	r3, #10
    2c08:	d108      	bne.n	2c1c <next_char+0x90>
            // CR LF is a single new line, throw out the extra LF
            lex->chr2 = lex->reader.readbyte(lex->reader.data);
    2c0a:	687b      	ldr	r3, [r7, #4]
    2c0c:	689b      	ldr	r3, [r3, #8]
    2c0e:	687a      	ldr	r2, [r7, #4]
    2c10:	6852      	ldr	r2, [r2, #4]
    2c12:	4610      	mov	r0, r2
    2c14:	4798      	blx	r3
    2c16:	4602      	mov	r2, r0
    2c18:	687b      	ldr	r3, [r7, #4]
    2c1a:	619a      	str	r2, [r3, #24]
        }
    }

    // check if we need to insert a newline at end of file
    if (lex->chr2 == MP_LEXER_EOF && lex->chr1 != MP_LEXER_EOF && lex->chr1 != '\n') {
    2c1c:	687b      	ldr	r3, [r7, #4]
    2c1e:	699b      	ldr	r3, [r3, #24]
    2c20:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    2c24:	d10b      	bne.n	2c3e <next_char+0xb2>
    2c26:	687b      	ldr	r3, [r7, #4]
    2c28:	695b      	ldr	r3, [r3, #20]
    2c2a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    2c2e:	d006      	beq.n	2c3e <next_char+0xb2>
    2c30:	687b      	ldr	r3, [r7, #4]
    2c32:	695b      	ldr	r3, [r3, #20]
    2c34:	2b0a      	cmp	r3, #10
    2c36:	d002      	beq.n	2c3e <next_char+0xb2>
        lex->chr2 = '\n';
    2c38:	687b      	ldr	r3, [r7, #4]
    2c3a:	220a      	movs	r2, #10
    2c3c:	619a      	str	r2, [r3, #24]
    }
}
    2c3e:	bf00      	nop
    2c40:	3708      	adds	r7, #8
    2c42:	46bd      	mov	sp, r7
    2c44:	bd80      	pop	{r7, pc}
    2c46:	bf00      	nop

00002c48 <indent_push>:

STATIC void indent_push(mp_lexer_t *lex, size_t indent) {
    2c48:	b580      	push	{r7, lr}
    2c4a:	b082      	sub	sp, #8
    2c4c:	af00      	add	r7, sp, #0
    2c4e:	6078      	str	r0, [r7, #4]
    2c50:	6039      	str	r1, [r7, #0]
    if (lex->num_indent_level >= lex->alloc_indent_level) {
    2c52:	687b      	ldr	r3, [r7, #4]
    2c54:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    2c56:	687b      	ldr	r3, [r7, #4]
    2c58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    2c5a:	429a      	cmp	r2, r3
    2c5c:	d312      	bcc.n	2c84 <indent_push+0x3c>
        lex->indent_level = m_renew(uint16_t, lex->indent_level, lex->alloc_indent_level, lex->alloc_indent_level + MICROPY_ALLOC_LEXEL_INDENT_INC);
    2c5e:	687b      	ldr	r3, [r7, #4]
    2c60:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    2c62:	687b      	ldr	r3, [r7, #4]
    2c64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    2c66:	3308      	adds	r3, #8
    2c68:	005b      	lsls	r3, r3, #1
    2c6a:	4619      	mov	r1, r3
    2c6c:	4610      	mov	r0, r2
    2c6e:	f7fd fba1 	bl	3b4 <m_realloc>
    2c72:	4602      	mov	r2, r0
    2c74:	687b      	ldr	r3, [r7, #4]
    2c76:	635a      	str	r2, [r3, #52]	; 0x34
        lex->alloc_indent_level += MICROPY_ALLOC_LEXEL_INDENT_INC;
    2c78:	687b      	ldr	r3, [r7, #4]
    2c7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    2c7c:	f103 0208 	add.w	r2, r3, #8
    2c80:	687b      	ldr	r3, [r7, #4]
    2c82:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    lex->indent_level[lex->num_indent_level++] = indent;
    2c84:	687b      	ldr	r3, [r7, #4]
    2c86:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    2c88:	687b      	ldr	r3, [r7, #4]
    2c8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    2c8c:	1c58      	adds	r0, r3, #1
    2c8e:	6879      	ldr	r1, [r7, #4]
    2c90:	6308      	str	r0, [r1, #48]	; 0x30
    2c92:	005b      	lsls	r3, r3, #1
    2c94:	4413      	add	r3, r2
    2c96:	683a      	ldr	r2, [r7, #0]
    2c98:	b292      	uxth	r2, r2
    2c9a:	801a      	strh	r2, [r3, #0]
}
    2c9c:	bf00      	nop
    2c9e:	3708      	adds	r7, #8
    2ca0:	46bd      	mov	sp, r7
    2ca2:	bd80      	pop	{r7, pc}

00002ca4 <indent_top>:

STATIC size_t indent_top(mp_lexer_t *lex) {
    2ca4:	b480      	push	{r7}
    2ca6:	b083      	sub	sp, #12
    2ca8:	af00      	add	r7, sp, #0
    2caa:	6078      	str	r0, [r7, #4]
    return lex->indent_level[lex->num_indent_level - 1];
    2cac:	687b      	ldr	r3, [r7, #4]
    2cae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    2cb0:	687b      	ldr	r3, [r7, #4]
    2cb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    2cb4:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
    2cb8:	3b01      	subs	r3, #1
    2cba:	005b      	lsls	r3, r3, #1
    2cbc:	4413      	add	r3, r2
    2cbe:	881b      	ldrh	r3, [r3, #0]
}
    2cc0:	4618      	mov	r0, r3
    2cc2:	370c      	adds	r7, #12
    2cc4:	46bd      	mov	sp, r7
    2cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
    2cca:	4770      	bx	lr

00002ccc <indent_pop>:

STATIC void indent_pop(mp_lexer_t *lex) {
    2ccc:	b480      	push	{r7}
    2cce:	b083      	sub	sp, #12
    2cd0:	af00      	add	r7, sp, #0
    2cd2:	6078      	str	r0, [r7, #4]
    lex->num_indent_level -= 1;
    2cd4:	687b      	ldr	r3, [r7, #4]
    2cd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    2cd8:	1e5a      	subs	r2, r3, #1
    2cda:	687b      	ldr	r3, [r7, #4]
    2cdc:	631a      	str	r2, [r3, #48]	; 0x30
}
    2cde:	bf00      	nop
    2ce0:	370c      	adds	r7, #12
    2ce2:	46bd      	mov	sp, r7
    2ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
    2ce8:	4770      	bx	lr
    2cea:	bf00      	nop

00002cec <get_hex>:
};

// This is called with CUR_CHAR() before first hex digit, and should return with
// it pointing to last hex digit
// num_digits must be greater than zero
STATIC bool get_hex(mp_lexer_t *lex, size_t num_digits, mp_uint_t *result) {
    2cec:	b590      	push	{r4, r7, lr}
    2cee:	b087      	sub	sp, #28
    2cf0:	af00      	add	r7, sp, #0
    2cf2:	60f8      	str	r0, [r7, #12]
    2cf4:	60b9      	str	r1, [r7, #8]
    2cf6:	607a      	str	r2, [r7, #4]
    mp_uint_t num = 0;
    2cf8:	2300      	movs	r3, #0
    2cfa:	617b      	str	r3, [r7, #20]
    while (num_digits-- != 0) {
    2cfc:	e018      	b.n	2d30 <get_hex+0x44>
        next_char(lex);
    2cfe:	68f8      	ldr	r0, [r7, #12]
    2d00:	f7ff ff44 	bl	2b8c <next_char>
        unichar c = CUR_CHAR(lex);
    2d04:	68fb      	ldr	r3, [r7, #12]
    2d06:	691b      	ldr	r3, [r3, #16]
    2d08:	613b      	str	r3, [r7, #16]
        if (!unichar_isxdigit(c)) {
    2d0a:	6938      	ldr	r0, [r7, #16]
    2d0c:	f7ff fc4e 	bl	25ac <unichar_isxdigit>
    2d10:	4603      	mov	r3, r0
    2d12:	f083 0301 	eor.w	r3, r3, #1
    2d16:	b2db      	uxtb	r3, r3
    2d18:	2b00      	cmp	r3, #0
    2d1a:	d001      	beq.n	2d20 <get_hex+0x34>
            return false;
    2d1c:	2300      	movs	r3, #0
    2d1e:	e010      	b.n	2d42 <get_hex+0x56>
        }
        num = (num << 4) + unichar_xdigit_value(c);
    2d20:	697b      	ldr	r3, [r7, #20]
    2d22:	011c      	lsls	r4, r3, #4
    2d24:	6938      	ldr	r0, [r7, #16]
    2d26:	f7ff fcdf 	bl	26e8 <unichar_xdigit_value>
    2d2a:	4603      	mov	r3, r0
    2d2c:	4423      	add	r3, r4
    2d2e:	617b      	str	r3, [r7, #20]
    while (num_digits-- != 0) {
    2d30:	68bb      	ldr	r3, [r7, #8]
    2d32:	1e5a      	subs	r2, r3, #1
    2d34:	60ba      	str	r2, [r7, #8]
    2d36:	2b00      	cmp	r3, #0
    2d38:	d1e1      	bne.n	2cfe <get_hex+0x12>
    }
    *result = num;
    2d3a:	687b      	ldr	r3, [r7, #4]
    2d3c:	697a      	ldr	r2, [r7, #20]
    2d3e:	601a      	str	r2, [r3, #0]
    return true;
    2d40:	2301      	movs	r3, #1
}
    2d42:	4618      	mov	r0, r3
    2d44:	371c      	adds	r7, #28
    2d46:	46bd      	mov	sp, r7
    2d48:	bd90      	pop	{r4, r7, pc}
    2d4a:	bf00      	nop

00002d4c <parse_string_literal>:

STATIC void parse_string_literal(mp_lexer_t *lex, bool is_raw) {
    2d4c:	b580      	push	{r7, lr}
    2d4e:	b08a      	sub	sp, #40	; 0x28
    2d50:	af00      	add	r7, sp, #0
    2d52:	6078      	str	r0, [r7, #4]
    2d54:	460b      	mov	r3, r1
    2d56:	70fb      	strb	r3, [r7, #3]
    // get first quoting character
    char quote_char = '\'';
    2d58:	2327      	movs	r3, #39	; 0x27
    2d5a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if (is_char(lex, '\"')) {
    2d5e:	2122      	movs	r1, #34	; 0x22
    2d60:	6878      	ldr	r0, [r7, #4]
    2d62:	f7ff fd67 	bl	2834 <is_char>
    2d66:	4603      	mov	r3, r0
    2d68:	2b00      	cmp	r3, #0
    2d6a:	d002      	beq.n	2d72 <parse_string_literal+0x26>
        quote_char = '\"';
    2d6c:	2322      	movs	r3, #34	; 0x22
    2d6e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
    next_char(lex);
    2d72:	6878      	ldr	r0, [r7, #4]
    2d74:	f7ff ff0a 	bl	2b8c <next_char>

    // work out if it's a single or triple quoted literal
    size_t num_quotes;
    if (is_char_and(lex, quote_char, quote_char)) {
    2d78:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
    2d7c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    2d80:	4619      	mov	r1, r3
    2d82:	6878      	ldr	r0, [r7, #4]
    2d84:	f7ff fe00 	bl	2988 <is_char_and>
    2d88:	4603      	mov	r3, r0
    2d8a:	2b00      	cmp	r3, #0
    2d8c:	d008      	beq.n	2da0 <parse_string_literal+0x54>
        // triple quotes
        next_char(lex);
    2d8e:	6878      	ldr	r0, [r7, #4]
    2d90:	f7ff fefc 	bl	2b8c <next_char>
        next_char(lex);
    2d94:	6878      	ldr	r0, [r7, #4]
    2d96:	f7ff fef9 	bl	2b8c <next_char>
        num_quotes = 3;
    2d9a:	2303      	movs	r3, #3
    2d9c:	623b      	str	r3, [r7, #32]
    2d9e:	e001      	b.n	2da4 <parse_string_literal+0x58>
    } else {
        // single quotes
        num_quotes = 1;
    2da0:	2301      	movs	r3, #1
    2da2:	623b      	str	r3, [r7, #32]
    }

    size_t n_closing = 0;
    2da4:	2300      	movs	r3, #0
    2da6:	61fb      	str	r3, [r7, #28]
    while (!is_end(lex) && (num_quotes > 1 || !is_char(lex, '\n')) && n_closing < num_quotes) {
    2da8:	e1ac      	b.n	3104 <parse_string_literal+0x3b8>
        if (is_char(lex, quote_char)) {
    2daa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    2dae:	4619      	mov	r1, r3
    2db0:	6878      	ldr	r0, [r7, #4]
    2db2:	f7ff fd3f 	bl	2834 <is_char>
    2db6:	4603      	mov	r3, r0
    2db8:	2b00      	cmp	r3, #0
    2dba:	d00c      	beq.n	2dd6 <parse_string_literal+0x8a>
            n_closing += 1;
    2dbc:	69fb      	ldr	r3, [r7, #28]
    2dbe:	3301      	adds	r3, #1
    2dc0:	61fb      	str	r3, [r7, #28]
            vstr_add_char(&lex->vstr, CUR_CHAR(lex));
    2dc2:	687b      	ldr	r3, [r7, #4]
    2dc4:	f103 0244 	add.w	r2, r3, #68	; 0x44
    2dc8:	687b      	ldr	r3, [r7, #4]
    2dca:	691b      	ldr	r3, [r3, #16]
    2dcc:	4619      	mov	r1, r3
    2dce:	4610      	mov	r0, r2
    2dd0:	f7fe fcba 	bl	1748 <vstr_add_char>
    2dd4:	e193      	b.n	30fe <parse_string_literal+0x3b2>
        } else {
            n_closing = 0;
    2dd6:	2300      	movs	r3, #0
    2dd8:	61fb      	str	r3, [r7, #28]
            if (is_char(lex, '\\')) {
    2dda:	215c      	movs	r1, #92	; 0x5c
    2ddc:	6878      	ldr	r0, [r7, #4]
    2dde:	f7ff fd29 	bl	2834 <is_char>
    2de2:	4603      	mov	r3, r0
    2de4:	2b00      	cmp	r3, #0
    2de6:	f000 8180 	beq.w	30ea <parse_string_literal+0x39e>
                next_char(lex);
    2dea:	6878      	ldr	r0, [r7, #4]
    2dec:	f7ff fece 	bl	2b8c <next_char>
                unichar c = CUR_CHAR(lex);
    2df0:	687b      	ldr	r3, [r7, #4]
    2df2:	691b      	ldr	r3, [r3, #16]
    2df4:	61bb      	str	r3, [r7, #24]
                if (is_raw) {
    2df6:	78fb      	ldrb	r3, [r7, #3]
    2df8:	2b00      	cmp	r3, #0
    2dfa:	d006      	beq.n	2e0a <parse_string_literal+0xbe>
                    // raw strings allow escaping of quotes, but the backslash is also emitted
                    vstr_add_char(&lex->vstr, '\\');
    2dfc:	687b      	ldr	r3, [r7, #4]
    2dfe:	3344      	adds	r3, #68	; 0x44
    2e00:	215c      	movs	r1, #92	; 0x5c
    2e02:	4618      	mov	r0, r3
    2e04:	f7fe fca0 	bl	1748 <vstr_add_char>
    2e08:	e15b      	b.n	30c2 <parse_string_literal+0x376>
                } else {
                    switch (c) {
    2e0a:	69bb      	ldr	r3, [r7, #24]
    2e0c:	3b0a      	subs	r3, #10
    2e0e:	2b6e      	cmp	r3, #110	; 0x6e
    2e10:	f200 8129 	bhi.w	3066 <parse_string_literal+0x31a>
    2e14:	a201      	add	r2, pc, #4	; (adr r2, 2e1c <parse_string_literal+0xd0>)
    2e16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    2e1a:	bf00      	nop
    2e1c:	00002fd9 	.word	0x00002fd9
    2e20:	00003067 	.word	0x00003067
    2e24:	00003067 	.word	0x00003067
    2e28:	00003067 	.word	0x00003067
    2e2c:	00003067 	.word	0x00003067
    2e30:	00003067 	.word	0x00003067
    2e34:	00003067 	.word	0x00003067
    2e38:	00003067 	.word	0x00003067
    2e3c:	00003067 	.word	0x00003067
    2e40:	00003067 	.word	0x00003067
    2e44:	00003067 	.word	0x00003067
    2e48:	00003067 	.word	0x00003067
    2e4c:	00003067 	.word	0x00003067
    2e50:	00003067 	.word	0x00003067
    2e54:	00003067 	.word	0x00003067
    2e58:	00003067 	.word	0x00003067
    2e5c:	00003067 	.word	0x00003067
    2e60:	00003067 	.word	0x00003067
    2e64:	00003067 	.word	0x00003067
    2e68:	00003067 	.word	0x00003067
    2e6c:	00003067 	.word	0x00003067
    2e70:	00003067 	.word	0x00003067
    2e74:	00003067 	.word	0x00003067
    2e78:	00003067 	.word	0x00003067
    2e7c:	000030c1 	.word	0x000030c1
    2e80:	00003067 	.word	0x00003067
    2e84:	00003067 	.word	0x00003067
    2e88:	00003067 	.word	0x00003067
    2e8c:	00003067 	.word	0x00003067
    2e90:	000030c1 	.word	0x000030c1
    2e94:	00003067 	.word	0x00003067
    2e98:	00003067 	.word	0x00003067
    2e9c:	00003067 	.word	0x00003067
    2ea0:	00003067 	.word	0x00003067
    2ea4:	00003067 	.word	0x00003067
    2ea8:	00003067 	.word	0x00003067
    2eac:	00003067 	.word	0x00003067
    2eb0:	00003067 	.word	0x00003067
    2eb4:	00003067 	.word	0x00003067
    2eb8:	00003067 	.word	0x00003067
    2ebc:	00003067 	.word	0x00003067
    2ec0:	00003067 	.word	0x00003067
    2ec4:	00003067 	.word	0x00003067
    2ec8:	00003067 	.word	0x00003067
    2ecc:	00003067 	.word	0x00003067
    2ed0:	00003067 	.word	0x00003067
    2ed4:	00003067 	.word	0x00003067
    2ed8:	00003067 	.word	0x00003067
    2edc:	00003067 	.word	0x00003067
    2ee0:	00003067 	.word	0x00003067
    2ee4:	00003067 	.word	0x00003067
    2ee8:	00003067 	.word	0x00003067
    2eec:	00003067 	.word	0x00003067
    2ef0:	00003067 	.word	0x00003067
    2ef4:	00003067 	.word	0x00003067
    2ef8:	00003067 	.word	0x00003067
    2efc:	00003067 	.word	0x00003067
    2f00:	00003067 	.word	0x00003067
    2f04:	00003067 	.word	0x00003067
    2f08:	00003067 	.word	0x00003067
    2f0c:	00003067 	.word	0x00003067
    2f10:	00003067 	.word	0x00003067
    2f14:	00003067 	.word	0x00003067
    2f18:	00003067 	.word	0x00003067
    2f1c:	00003067 	.word	0x00003067
    2f20:	00003067 	.word	0x00003067
    2f24:	00003067 	.word	0x00003067
    2f28:	00003067 	.word	0x00003067
    2f2c:	00003061 	.word	0x00003061
    2f30:	00003067 	.word	0x00003067
    2f34:	00003067 	.word	0x00003067
    2f38:	00003067 	.word	0x00003067
    2f3c:	00003067 	.word	0x00003067
    2f40:	00003067 	.word	0x00003067
    2f44:	00003067 	.word	0x00003067
    2f48:	0000300b 	.word	0x0000300b
    2f4c:	00003067 	.word	0x00003067
    2f50:	00003067 	.word	0x00003067
    2f54:	00003067 	.word	0x00003067
    2f58:	00003067 	.word	0x00003067
    2f5c:	00003067 	.word	0x00003067
    2f60:	00003067 	.word	0x00003067
    2f64:	000030c1 	.word	0x000030c1
    2f68:	00003067 	.word	0x00003067
    2f6c:	00003067 	.word	0x00003067
    2f70:	00003067 	.word	0x00003067
    2f74:	00003067 	.word	0x00003067
    2f78:	00002fe1 	.word	0x00002fe1
    2f7c:	00002fe7 	.word	0x00002fe7
    2f80:	00003067 	.word	0x00003067
    2f84:	00003067 	.word	0x00003067
    2f88:	00003067 	.word	0x00003067
    2f8c:	00002fff 	.word	0x00002fff
    2f90:	00003067 	.word	0x00003067
    2f94:	00003067 	.word	0x00003067
    2f98:	00003067 	.word	0x00003067
    2f9c:	00003067 	.word	0x00003067
    2fa0:	00003067 	.word	0x00003067
    2fa4:	00003067 	.word	0x00003067
    2fa8:	00003067 	.word	0x00003067
    2fac:	00002ff3 	.word	0x00002ff3
    2fb0:	00003067 	.word	0x00003067
    2fb4:	00003067 	.word	0x00003067
    2fb8:	00003067 	.word	0x00003067
    2fbc:	00003005 	.word	0x00003005
    2fc0:	00003067 	.word	0x00003067
    2fc4:	00002fed 	.word	0x00002fed
    2fc8:	0000300b 	.word	0x0000300b
    2fcc:	00002ff9 	.word	0x00002ff9
    2fd0:	00003067 	.word	0x00003067
    2fd4:	00003021 	.word	0x00003021
                        // note: "c" can never be MP_LEXER_EOF because next_char
                        // always inserts a newline at the end of the input stream
                        case '\n': c = MP_LEXER_EOF; break; // backslash escape the newline, just ignore it
    2fd8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    2fdc:	61bb      	str	r3, [r7, #24]
    2fde:	e070      	b.n	30c2 <parse_string_literal+0x376>
                        case '\\': break;
                        case '\'': break;
                        case '"': break;
                        case 'a': c = 0x07; break;
    2fe0:	2307      	movs	r3, #7
    2fe2:	61bb      	str	r3, [r7, #24]
    2fe4:	e06d      	b.n	30c2 <parse_string_literal+0x376>
                        case 'b': c = 0x08; break;
    2fe6:	2308      	movs	r3, #8
    2fe8:	61bb      	str	r3, [r7, #24]
    2fea:	e06a      	b.n	30c2 <parse_string_literal+0x376>
                        case 't': c = 0x09; break;
    2fec:	2309      	movs	r3, #9
    2fee:	61bb      	str	r3, [r7, #24]
    2ff0:	e067      	b.n	30c2 <parse_string_literal+0x376>
                        case 'n': c = 0x0a; break;
    2ff2:	230a      	movs	r3, #10
    2ff4:	61bb      	str	r3, [r7, #24]
    2ff6:	e064      	b.n	30c2 <parse_string_literal+0x376>
                        case 'v': c = 0x0b; break;
    2ff8:	230b      	movs	r3, #11
    2ffa:	61bb      	str	r3, [r7, #24]
    2ffc:	e061      	b.n	30c2 <parse_string_literal+0x376>
                        case 'f': c = 0x0c; break;
    2ffe:	230c      	movs	r3, #12
    3000:	61bb      	str	r3, [r7, #24]
    3002:	e05e      	b.n	30c2 <parse_string_literal+0x376>
                        case 'r': c = 0x0d; break;
    3004:	230d      	movs	r3, #13
    3006:	61bb      	str	r3, [r7, #24]
    3008:	e05b      	b.n	30c2 <parse_string_literal+0x376>
                        case 'u':
                        case 'U':
                            if (lex->tok_kind == MP_TOKEN_BYTES) {
    300a:	687b      	ldr	r3, [r7, #4]
    300c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    300e:	2b0b      	cmp	r3, #11
    3010:	d106      	bne.n	3020 <parse_string_literal+0x2d4>
                                // b'\u1234' == b'\\u1234'
                                vstr_add_char(&lex->vstr, '\\');
    3012:	687b      	ldr	r3, [r7, #4]
    3014:	3344      	adds	r3, #68	; 0x44
    3016:	215c      	movs	r1, #92	; 0x5c
    3018:	4618      	mov	r0, r3
    301a:	f7fe fb95 	bl	1748 <vstr_add_char>
                                break;
    301e:	e050      	b.n	30c2 <parse_string_literal+0x376>
                            }
                            // Otherwise fall through.
                        case 'x':
                        {
                            mp_uint_t num = 0;
    3020:	2300      	movs	r3, #0
    3022:	60fb      	str	r3, [r7, #12]
                            if (!get_hex(lex, (c == 'x' ? 2 : c == 'u' ? 4 : 8), &num)) {
    3024:	69bb      	ldr	r3, [r7, #24]
    3026:	2b78      	cmp	r3, #120	; 0x78
    3028:	d006      	beq.n	3038 <parse_string_literal+0x2ec>
    302a:	69bb      	ldr	r3, [r7, #24]
    302c:	2b75      	cmp	r3, #117	; 0x75
    302e:	d101      	bne.n	3034 <parse_string_literal+0x2e8>
    3030:	2304      	movs	r3, #4
    3032:	e002      	b.n	303a <parse_string_literal+0x2ee>
    3034:	2308      	movs	r3, #8
    3036:	e000      	b.n	303a <parse_string_literal+0x2ee>
    3038:	2302      	movs	r3, #2
    303a:	f107 020c 	add.w	r2, r7, #12
    303e:	4619      	mov	r1, r3
    3040:	6878      	ldr	r0, [r7, #4]
    3042:	f7ff fe53 	bl	2cec <get_hex>
    3046:	4603      	mov	r3, r0
    3048:	f083 0301 	eor.w	r3, r3, #1
    304c:	b2db      	uxtb	r3, r3
    304e:	2b00      	cmp	r3, #0
    3050:	d002      	beq.n	3058 <parse_string_literal+0x30c>
                                // not enough hex chars for escape sequence
                                lex->tok_kind = MP_TOKEN_INVALID;
    3052:	687b      	ldr	r3, [r7, #4]
    3054:	2201      	movs	r2, #1
    3056:	641a      	str	r2, [r3, #64]	; 0x40
                            }
                            c = num;
    3058:	68fb      	ldr	r3, [r7, #12]
    305a:	61bb      	str	r3, [r7, #24]
                            break;
    305c:	bf00      	nop
    305e:	e030      	b.n	30c2 <parse_string_literal+0x376>
                            // Supporting '\N{LATIN SMALL LETTER A}' == 'a' would require keeping the
                            // entire Unicode name table in the core. As of Unicode 6.3.0, that's nearly
                            // 3MB of text; even gzip-compressed and with minimal structure, it'll take
                            // roughly half a meg of storage. This form of Unicode escape may be added
                            // later on, but it's definitely not a priority right now. -- CJA 20140607
                            mp_raise_NotImplementedError("unicode name escapes");
    3060:	483e      	ldr	r0, [pc, #248]	; (315c <parse_string_literal+0x410>)
    3062:	f00a f8e3 	bl	d22c <mp_raise_NotImplementedError>
                            break;
                        default:
                            if (c >= '0' && c <= '7') {
    3066:	69bb      	ldr	r3, [r7, #24]
    3068:	2b2f      	cmp	r3, #47	; 0x2f
    306a:	d922      	bls.n	30b2 <parse_string_literal+0x366>
    306c:	69bb      	ldr	r3, [r7, #24]
    306e:	2b37      	cmp	r3, #55	; 0x37
    3070:	d81f      	bhi.n	30b2 <parse_string_literal+0x366>
                                // Octal sequence, 1-3 chars
                                size_t digits = 3;
    3072:	2303      	movs	r3, #3
    3074:	617b      	str	r3, [r7, #20]
                                mp_uint_t num = c - '0';
    3076:	69bb      	ldr	r3, [r7, #24]
    3078:	3b30      	subs	r3, #48	; 0x30
    307a:	613b      	str	r3, [r7, #16]
                                while (is_following_odigit(lex) && --digits != 0) {
    307c:	e009      	b.n	3092 <parse_string_literal+0x346>
                                    next_char(lex);
    307e:	6878      	ldr	r0, [r7, #4]
    3080:	f7ff fd84 	bl	2b8c <next_char>
                                    num = num * 8 + (CUR_CHAR(lex) - '0');
    3084:	693b      	ldr	r3, [r7, #16]
    3086:	00da      	lsls	r2, r3, #3
    3088:	687b      	ldr	r3, [r7, #4]
    308a:	691b      	ldr	r3, [r3, #16]
    308c:	4413      	add	r3, r2
    308e:	3b30      	subs	r3, #48	; 0x30
    3090:	613b      	str	r3, [r7, #16]
                                while (is_following_odigit(lex) && --digits != 0) {
    3092:	6878      	ldr	r0, [r7, #4]
    3094:	f7ff fcec 	bl	2a70 <is_following_odigit>
    3098:	4603      	mov	r3, r0
    309a:	2b00      	cmp	r3, #0
    309c:	d005      	beq.n	30aa <parse_string_literal+0x35e>
    309e:	697b      	ldr	r3, [r7, #20]
    30a0:	3b01      	subs	r3, #1
    30a2:	617b      	str	r3, [r7, #20]
    30a4:	697b      	ldr	r3, [r7, #20]
    30a6:	2b00      	cmp	r3, #0
    30a8:	d1e9      	bne.n	307e <parse_string_literal+0x332>
                                }
                                c = num;
    30aa:	693b      	ldr	r3, [r7, #16]
    30ac:	61bb      	str	r3, [r7, #24]
                            if (c >= '0' && c <= '7') {
    30ae:	bf00      	nop
                            } else {
                                // unrecognised escape character; CPython lets this through verbatim as '\' and then the character
                                vstr_add_char(&lex->vstr, '\\');
                            }
                            break;
    30b0:	e007      	b.n	30c2 <parse_string_literal+0x376>
                                vstr_add_char(&lex->vstr, '\\');
    30b2:	687b      	ldr	r3, [r7, #4]
    30b4:	3344      	adds	r3, #68	; 0x44
    30b6:	215c      	movs	r1, #92	; 0x5c
    30b8:	4618      	mov	r0, r3
    30ba:	f7fe fb45 	bl	1748 <vstr_add_char>
                            break;
    30be:	e000      	b.n	30c2 <parse_string_literal+0x376>
                        case '"': break;
    30c0:	bf00      	nop
                    }
                }
                if (c != MP_LEXER_EOF) {
    30c2:	69bb      	ldr	r3, [r7, #24]
    30c4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    30c8:	d019      	beq.n	30fe <parse_string_literal+0x3b2>
                            // this raises a generic SyntaxError; could provide more info
                            lex->tok_kind = MP_TOKEN_INVALID;
                        }
                    } else {
                        // without unicode everything is just added as an 8-bit byte
                        if (c < 0x100) {
    30ca:	69bb      	ldr	r3, [r7, #24]
    30cc:	2bff      	cmp	r3, #255	; 0xff
    30ce:	d808      	bhi.n	30e2 <parse_string_literal+0x396>
                            vstr_add_byte(&lex->vstr, c);
    30d0:	687b      	ldr	r3, [r7, #4]
    30d2:	3344      	adds	r3, #68	; 0x44
    30d4:	69ba      	ldr	r2, [r7, #24]
    30d6:	b2d2      	uxtb	r2, r2
    30d8:	4611      	mov	r1, r2
    30da:	4618      	mov	r0, r3
    30dc:	f7fe fb22 	bl	1724 <vstr_add_byte>
    30e0:	e00d      	b.n	30fe <parse_string_literal+0x3b2>
                        } else {
                            // 8-bit character out of range
                            // this raises a generic SyntaxError; could provide more info
                            lex->tok_kind = MP_TOKEN_INVALID;
    30e2:	687b      	ldr	r3, [r7, #4]
    30e4:	2201      	movs	r2, #1
    30e6:	641a      	str	r2, [r3, #64]	; 0x40
    30e8:	e009      	b.n	30fe <parse_string_literal+0x3b2>
                    }
                }
            } else {
                // Add the "character" as a byte so that we remain 8-bit clean.
                // This way, strings are parsed correctly whether or not they contain utf-8 chars.
                vstr_add_byte(&lex->vstr, CUR_CHAR(lex));
    30ea:	687b      	ldr	r3, [r7, #4]
    30ec:	f103 0244 	add.w	r2, r3, #68	; 0x44
    30f0:	687b      	ldr	r3, [r7, #4]
    30f2:	691b      	ldr	r3, [r3, #16]
    30f4:	b2db      	uxtb	r3, r3
    30f6:	4619      	mov	r1, r3
    30f8:	4610      	mov	r0, r2
    30fa:	f7fe fb13 	bl	1724 <vstr_add_byte>
            }
        }
        next_char(lex);
    30fe:	6878      	ldr	r0, [r7, #4]
    3100:	f7ff fd44 	bl	2b8c <next_char>
    while (!is_end(lex) && (num_quotes > 1 || !is_char(lex, '\n')) && n_closing < num_quotes) {
    3104:	6878      	ldr	r0, [r7, #4]
    3106:	f7ff fb71 	bl	27ec <is_end>
    310a:	4603      	mov	r3, r0
    310c:	f083 0301 	eor.w	r3, r3, #1
    3110:	b2db      	uxtb	r3, r3
    3112:	2b00      	cmp	r3, #0
    3114:	d011      	beq.n	313a <parse_string_literal+0x3ee>
    3116:	6a3b      	ldr	r3, [r7, #32]
    3118:	2b01      	cmp	r3, #1
    311a:	d809      	bhi.n	3130 <parse_string_literal+0x3e4>
    311c:	210a      	movs	r1, #10
    311e:	6878      	ldr	r0, [r7, #4]
    3120:	f7ff fb88 	bl	2834 <is_char>
    3124:	4603      	mov	r3, r0
    3126:	f083 0301 	eor.w	r3, r3, #1
    312a:	b2db      	uxtb	r3, r3
    312c:	2b00      	cmp	r3, #0
    312e:	d004      	beq.n	313a <parse_string_literal+0x3ee>
    3130:	69fa      	ldr	r2, [r7, #28]
    3132:	6a3b      	ldr	r3, [r7, #32]
    3134:	429a      	cmp	r2, r3
    3136:	f4ff ae38 	bcc.w	2daa <parse_string_literal+0x5e>
    }

    // check we got the required end quotes
    if (n_closing < num_quotes) {
    313a:	69fa      	ldr	r2, [r7, #28]
    313c:	6a3b      	ldr	r3, [r7, #32]
    313e:	429a      	cmp	r2, r3
    3140:	d202      	bcs.n	3148 <parse_string_literal+0x3fc>
        lex->tok_kind = MP_TOKEN_LONELY_STRING_OPEN;
    3142:	687b      	ldr	r3, [r7, #4]
    3144:	2203      	movs	r2, #3
    3146:	641a      	str	r2, [r3, #64]	; 0x40
    }

    // cut off the end quotes from the token text
    vstr_cut_tail_bytes(&lex->vstr, n_closing);
    3148:	687b      	ldr	r3, [r7, #4]
    314a:	3344      	adds	r3, #68	; 0x44
    314c:	69f9      	ldr	r1, [r7, #28]
    314e:	4618      	mov	r0, r3
    3150:	f7fe fba4 	bl	189c <vstr_cut_tail_bytes>
}
    3154:	bf00      	nop
    3156:	3728      	adds	r7, #40	; 0x28
    3158:	46bd      	mov	sp, r7
    315a:	bd80      	pop	{r7, pc}
    315c:	0001fa78 	.word	0x0001fa78

00003160 <skip_whitespace>:

STATIC bool skip_whitespace(mp_lexer_t *lex, bool stop_at_newline) {
    3160:	b580      	push	{r7, lr}
    3162:	b084      	sub	sp, #16
    3164:	af00      	add	r7, sp, #0
    3166:	6078      	str	r0, [r7, #4]
    3168:	460b      	mov	r3, r1
    316a:	70fb      	strb	r3, [r7, #3]
    bool had_physical_newline = false;
    316c:	2300      	movs	r3, #0
    316e:	73fb      	strb	r3, [r7, #15]
    while (!is_end(lex)) {
    3170:	e04b      	b.n	320a <skip_whitespace+0xaa>
        if (is_physical_newline(lex)) {
    3172:	6878      	ldr	r0, [r7, #4]
    3174:	f7ff fb4c 	bl	2810 <is_physical_newline>
    3178:	4603      	mov	r3, r0
    317a:	2b00      	cmp	r3, #0
    317c:	d00c      	beq.n	3198 <skip_whitespace+0x38>
            if (stop_at_newline && lex->nested_bracket_level == 0) {
    317e:	78fb      	ldrb	r3, [r7, #3]
    3180:	2b00      	cmp	r3, #0
    3182:	d003      	beq.n	318c <skip_whitespace+0x2c>
    3184:	687b      	ldr	r3, [r7, #4]
    3186:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3188:	2b00      	cmp	r3, #0
    318a:	d048      	beq.n	321e <skip_whitespace+0xbe>
                break;
            }
            had_physical_newline = true;
    318c:	2301      	movs	r3, #1
    318e:	73fb      	strb	r3, [r7, #15]
            next_char(lex);
    3190:	6878      	ldr	r0, [r7, #4]
    3192:	f7ff fcfb 	bl	2b8c <next_char>
    3196:	e038      	b.n	320a <skip_whitespace+0xaa>
        } else if (is_whitespace(lex)) {
    3198:	6878      	ldr	r0, [r7, #4]
    319a:	f7ff fc13 	bl	29c4 <is_whitespace>
    319e:	4603      	mov	r3, r0
    31a0:	2b00      	cmp	r3, #0
    31a2:	d003      	beq.n	31ac <skip_whitespace+0x4c>
            next_char(lex);
    31a4:	6878      	ldr	r0, [r7, #4]
    31a6:	f7ff fcf1 	bl	2b8c <next_char>
    31aa:	e02e      	b.n	320a <skip_whitespace+0xaa>
        } else if (is_char(lex, '#')) {
    31ac:	2123      	movs	r1, #35	; 0x23
    31ae:	6878      	ldr	r0, [r7, #4]
    31b0:	f7ff fb40 	bl	2834 <is_char>
    31b4:	4603      	mov	r3, r0
    31b6:	2b00      	cmp	r3, #0
    31b8:	d019      	beq.n	31ee <skip_whitespace+0x8e>
            next_char(lex);
    31ba:	6878      	ldr	r0, [r7, #4]
    31bc:	f7ff fce6 	bl	2b8c <next_char>
            while (!is_end(lex) && !is_physical_newline(lex)) {
    31c0:	e002      	b.n	31c8 <skip_whitespace+0x68>
                next_char(lex);
    31c2:	6878      	ldr	r0, [r7, #4]
    31c4:	f7ff fce2 	bl	2b8c <next_char>
            while (!is_end(lex) && !is_physical_newline(lex)) {
    31c8:	6878      	ldr	r0, [r7, #4]
    31ca:	f7ff fb0f 	bl	27ec <is_end>
    31ce:	4603      	mov	r3, r0
    31d0:	f083 0301 	eor.w	r3, r3, #1
    31d4:	b2db      	uxtb	r3, r3
    31d6:	2b00      	cmp	r3, #0
    31d8:	d017      	beq.n	320a <skip_whitespace+0xaa>
    31da:	6878      	ldr	r0, [r7, #4]
    31dc:	f7ff fb18 	bl	2810 <is_physical_newline>
    31e0:	4603      	mov	r3, r0
    31e2:	f083 0301 	eor.w	r3, r3, #1
    31e6:	b2db      	uxtb	r3, r3
    31e8:	2b00      	cmp	r3, #0
    31ea:	d1ea      	bne.n	31c2 <skip_whitespace+0x62>
    31ec:	e00d      	b.n	320a <skip_whitespace+0xaa>
            }
            // had_physical_newline will be set on next loop
        } else if (is_char_and(lex, '\\', '\n')) {
    31ee:	220a      	movs	r2, #10
    31f0:	215c      	movs	r1, #92	; 0x5c
    31f2:	6878      	ldr	r0, [r7, #4]
    31f4:	f7ff fbc8 	bl	2988 <is_char_and>
    31f8:	4603      	mov	r3, r0
    31fa:	2b00      	cmp	r3, #0
    31fc:	d011      	beq.n	3222 <skip_whitespace+0xc2>
            // line-continuation, so don't set had_physical_newline
            next_char(lex);
    31fe:	6878      	ldr	r0, [r7, #4]
    3200:	f7ff fcc4 	bl	2b8c <next_char>
            next_char(lex);
    3204:	6878      	ldr	r0, [r7, #4]
    3206:	f7ff fcc1 	bl	2b8c <next_char>
    while (!is_end(lex)) {
    320a:	6878      	ldr	r0, [r7, #4]
    320c:	f7ff faee 	bl	27ec <is_end>
    3210:	4603      	mov	r3, r0
    3212:	f083 0301 	eor.w	r3, r3, #1
    3216:	b2db      	uxtb	r3, r3
    3218:	2b00      	cmp	r3, #0
    321a:	d1aa      	bne.n	3172 <skip_whitespace+0x12>
    321c:	e002      	b.n	3224 <skip_whitespace+0xc4>
                break;
    321e:	bf00      	nop
    3220:	e000      	b.n	3224 <skip_whitespace+0xc4>
        } else {
            break;
    3222:	bf00      	nop
        }
    }
    return had_physical_newline;
    3224:	7bfb      	ldrb	r3, [r7, #15]
}
    3226:	4618      	mov	r0, r3
    3228:	3710      	adds	r7, #16
    322a:	46bd      	mov	sp, r7
    322c:	bd80      	pop	{r7, pc}
    322e:	bf00      	nop

00003230 <mp_lexer_to_next>:

void mp_lexer_to_next(mp_lexer_t *lex) {
    3230:	b580      	push	{r7, lr}
    3232:	b08e      	sub	sp, #56	; 0x38
    3234:	af00      	add	r7, sp, #0
    3236:	6078      	str	r0, [r7, #4]
    // start new token text
    vstr_reset(&lex->vstr);
    3238:	687b      	ldr	r3, [r7, #4]
    323a:	3344      	adds	r3, #68	; 0x44
    323c:	4618      	mov	r0, r3
    323e:	f7ff fac7 	bl	27d0 <vstr_reset>

    // skip white space and comments
    bool had_physical_newline = skip_whitespace(lex, false);
    3242:	2100      	movs	r1, #0
    3244:	6878      	ldr	r0, [r7, #4]
    3246:	f7ff ff8b 	bl	3160 <skip_whitespace>
    324a:	4603      	mov	r3, r0
    324c:	75fb      	strb	r3, [r7, #23]

    // set token source information
    lex->tok_line = lex->line;
    324e:	687b      	ldr	r3, [r7, #4]
    3250:	69da      	ldr	r2, [r3, #28]
    3252:	687b      	ldr	r3, [r7, #4]
    3254:	639a      	str	r2, [r3, #56]	; 0x38
    lex->tok_column = lex->column;
    3256:	687b      	ldr	r3, [r7, #4]
    3258:	6a1a      	ldr	r2, [r3, #32]
    325a:	687b      	ldr	r3, [r7, #4]
    325c:	63da      	str	r2, [r3, #60]	; 0x3c

    if (lex->emit_dent < 0) {
    325e:	687b      	ldr	r3, [r7, #4]
    3260:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    3262:	2b00      	cmp	r3, #0
    3264:	da08      	bge.n	3278 <mp_lexer_to_next+0x48>
        lex->tok_kind = MP_TOKEN_DEDENT;
    3266:	687b      	ldr	r3, [r7, #4]
    3268:	2206      	movs	r2, #6
    326a:	641a      	str	r2, [r3, #64]	; 0x40
        lex->emit_dent += 1;
    326c:	687b      	ldr	r3, [r7, #4]
    326e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    3270:	1c5a      	adds	r2, r3, #1
    3272:	687b      	ldr	r3, [r7, #4]
    3274:	625a      	str	r2, [r3, #36]	; 0x24
            } else if (lex->tok_kind == MP_TOKEN_DEL_PAREN_CLOSE || lex->tok_kind == MP_TOKEN_DEL_BRACKET_CLOSE || lex->tok_kind == MP_TOKEN_DEL_BRACE_CLOSE) {
                lex->nested_bracket_level -= 1;
            }
        }
    }
}
    3276:	e2ac      	b.n	37d2 <mp_lexer_to_next+0x5a2>
    } else if (lex->emit_dent > 0) {
    3278:	687b      	ldr	r3, [r7, #4]
    327a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    327c:	2b00      	cmp	r3, #0
    327e:	dd08      	ble.n	3292 <mp_lexer_to_next+0x62>
        lex->tok_kind = MP_TOKEN_INDENT;
    3280:	687b      	ldr	r3, [r7, #4]
    3282:	2205      	movs	r2, #5
    3284:	641a      	str	r2, [r3, #64]	; 0x40
        lex->emit_dent -= 1;
    3286:	687b      	ldr	r3, [r7, #4]
    3288:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    328a:	1e5a      	subs	r2, r3, #1
    328c:	687b      	ldr	r3, [r7, #4]
    328e:	625a      	str	r2, [r3, #36]	; 0x24
}
    3290:	e29f      	b.n	37d2 <mp_lexer_to_next+0x5a2>
    } else if (had_physical_newline && lex->nested_bracket_level == 0) {
    3292:	7dfb      	ldrb	r3, [r7, #23]
    3294:	2b00      	cmp	r3, #0
    3296:	d03e      	beq.n	3316 <mp_lexer_to_next+0xe6>
    3298:	687b      	ldr	r3, [r7, #4]
    329a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    329c:	2b00      	cmp	r3, #0
    329e:	d13a      	bne.n	3316 <mp_lexer_to_next+0xe6>
        lex->tok_kind = MP_TOKEN_NEWLINE;
    32a0:	687b      	ldr	r3, [r7, #4]
    32a2:	2204      	movs	r2, #4
    32a4:	641a      	str	r2, [r3, #64]	; 0x40
        size_t num_spaces = lex->column - 1;
    32a6:	687b      	ldr	r3, [r7, #4]
    32a8:	6a1b      	ldr	r3, [r3, #32]
    32aa:	3b01      	subs	r3, #1
    32ac:	613b      	str	r3, [r7, #16]
        if (num_spaces == indent_top(lex)) {
    32ae:	6878      	ldr	r0, [r7, #4]
    32b0:	f7ff fcf8 	bl	2ca4 <indent_top>
    32b4:	4602      	mov	r2, r0
    32b6:	693b      	ldr	r3, [r7, #16]
    32b8:	429a      	cmp	r2, r3
    32ba:	f000 8281 	beq.w	37c0 <mp_lexer_to_next+0x590>
        } else if (num_spaces > indent_top(lex)) {
    32be:	6878      	ldr	r0, [r7, #4]
    32c0:	f7ff fcf0 	bl	2ca4 <indent_top>
    32c4:	4602      	mov	r2, r0
    32c6:	693b      	ldr	r3, [r7, #16]
    32c8:	429a      	cmp	r2, r3
    32ca:	d211      	bcs.n	32f0 <mp_lexer_to_next+0xc0>
            indent_push(lex, num_spaces);
    32cc:	6939      	ldr	r1, [r7, #16]
    32ce:	6878      	ldr	r0, [r7, #4]
    32d0:	f7ff fcba 	bl	2c48 <indent_push>
            lex->emit_dent += 1;
    32d4:	687b      	ldr	r3, [r7, #4]
    32d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    32d8:	1c5a      	adds	r2, r3, #1
    32da:	687b      	ldr	r3, [r7, #4]
    32dc:	625a      	str	r2, [r3, #36]	; 0x24
    } else if (had_physical_newline && lex->nested_bracket_level == 0) {
    32de:	e26f      	b.n	37c0 <mp_lexer_to_next+0x590>
                indent_pop(lex);
    32e0:	6878      	ldr	r0, [r7, #4]
    32e2:	f7ff fcf3 	bl	2ccc <indent_pop>
                lex->emit_dent -= 1;
    32e6:	687b      	ldr	r3, [r7, #4]
    32e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    32ea:	1e5a      	subs	r2, r3, #1
    32ec:	687b      	ldr	r3, [r7, #4]
    32ee:	625a      	str	r2, [r3, #36]	; 0x24
            while (num_spaces < indent_top(lex)) {
    32f0:	6878      	ldr	r0, [r7, #4]
    32f2:	f7ff fcd7 	bl	2ca4 <indent_top>
    32f6:	4602      	mov	r2, r0
    32f8:	693b      	ldr	r3, [r7, #16]
    32fa:	429a      	cmp	r2, r3
    32fc:	d8f0      	bhi.n	32e0 <mp_lexer_to_next+0xb0>
            if (num_spaces != indent_top(lex)) {
    32fe:	6878      	ldr	r0, [r7, #4]
    3300:	f7ff fcd0 	bl	2ca4 <indent_top>
    3304:	4602      	mov	r2, r0
    3306:	693b      	ldr	r3, [r7, #16]
    3308:	429a      	cmp	r2, r3
    330a:	f000 8259 	beq.w	37c0 <mp_lexer_to_next+0x590>
                lex->tok_kind = MP_TOKEN_DEDENT_MISMATCH;
    330e:	687b      	ldr	r3, [r7, #4]
    3310:	2202      	movs	r2, #2
    3312:	641a      	str	r2, [r3, #64]	; 0x40
    } else if (had_physical_newline && lex->nested_bracket_level == 0) {
    3314:	e254      	b.n	37c0 <mp_lexer_to_next+0x590>
    } else if (is_end(lex)) {
    3316:	6878      	ldr	r0, [r7, #4]
    3318:	f7ff fa68 	bl	27ec <is_end>
    331c:	4603      	mov	r3, r0
    331e:	2b00      	cmp	r3, #0
    3320:	d003      	beq.n	332a <mp_lexer_to_next+0xfa>
        lex->tok_kind = MP_TOKEN_END;
    3322:	687b      	ldr	r3, [r7, #4]
    3324:	2200      	movs	r2, #0
    3326:	641a      	str	r2, [r3, #64]	; 0x40
}
    3328:	e253      	b.n	37d2 <mp_lexer_to_next+0x5a2>
    } else if (is_string_or_bytes(lex)) {
    332a:	6878      	ldr	r0, [r7, #4]
    332c:	f7ff fbb8 	bl	2aa0 <is_string_or_bytes>
    3330:	4603      	mov	r3, r0
    3332:	2b00      	cmp	r3, #0
    3334:	d06d      	beq.n	3412 <mp_lexer_to_next+0x1e2>
        lex->tok_kind = MP_TOKEN_END;
    3336:	687b      	ldr	r3, [r7, #4]
    3338:	2200      	movs	r2, #0
    333a:	641a      	str	r2, [r3, #64]	; 0x40
            bool is_raw = false;
    333c:	2300      	movs	r3, #0
    333e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
            mp_token_kind_t kind = MP_TOKEN_STRING;
    3342:	230a      	movs	r3, #10
    3344:	633b      	str	r3, [r7, #48]	; 0x30
            int n_char = 0;
    3346:	2300      	movs	r3, #0
    3348:	62fb      	str	r3, [r7, #44]	; 0x2c
            if (is_char(lex, 'u')) {
    334a:	2175      	movs	r1, #117	; 0x75
    334c:	6878      	ldr	r0, [r7, #4]
    334e:	f7ff fa71 	bl	2834 <is_char>
    3352:	4603      	mov	r3, r0
    3354:	2b00      	cmp	r3, #0
    3356:	d002      	beq.n	335e <mp_lexer_to_next+0x12e>
                n_char = 1;
    3358:	2301      	movs	r3, #1
    335a:	62fb      	str	r3, [r7, #44]	; 0x2c
    335c:	e02e      	b.n	33bc <mp_lexer_to_next+0x18c>
            } else if (is_char(lex, 'b')) {
    335e:	2162      	movs	r1, #98	; 0x62
    3360:	6878      	ldr	r0, [r7, #4]
    3362:	f7ff fa67 	bl	2834 <is_char>
    3366:	4603      	mov	r3, r0
    3368:	2b00      	cmp	r3, #0
    336a:	d010      	beq.n	338e <mp_lexer_to_next+0x15e>
                kind = MP_TOKEN_BYTES;
    336c:	230b      	movs	r3, #11
    336e:	633b      	str	r3, [r7, #48]	; 0x30
                n_char = 1;
    3370:	2301      	movs	r3, #1
    3372:	62fb      	str	r3, [r7, #44]	; 0x2c
                if (is_char_following(lex, 'r')) {
    3374:	2172      	movs	r1, #114	; 0x72
    3376:	6878      	ldr	r0, [r7, #4]
    3378:	f7ff fab6 	bl	28e8 <is_char_following>
    337c:	4603      	mov	r3, r0
    337e:	2b00      	cmp	r3, #0
    3380:	d01c      	beq.n	33bc <mp_lexer_to_next+0x18c>
                    is_raw = true;
    3382:	2301      	movs	r3, #1
    3384:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
                    n_char = 2;
    3388:	2302      	movs	r3, #2
    338a:	62fb      	str	r3, [r7, #44]	; 0x2c
    338c:	e016      	b.n	33bc <mp_lexer_to_next+0x18c>
            } else if (is_char(lex, 'r')) {
    338e:	2172      	movs	r1, #114	; 0x72
    3390:	6878      	ldr	r0, [r7, #4]
    3392:	f7ff fa4f 	bl	2834 <is_char>
    3396:	4603      	mov	r3, r0
    3398:	2b00      	cmp	r3, #0
    339a:	d00f      	beq.n	33bc <mp_lexer_to_next+0x18c>
                is_raw = true;
    339c:	2301      	movs	r3, #1
    339e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
                n_char = 1;
    33a2:	2301      	movs	r3, #1
    33a4:	62fb      	str	r3, [r7, #44]	; 0x2c
                if (is_char_following(lex, 'b')) {
    33a6:	2162      	movs	r1, #98	; 0x62
    33a8:	6878      	ldr	r0, [r7, #4]
    33aa:	f7ff fa9d 	bl	28e8 <is_char_following>
    33ae:	4603      	mov	r3, r0
    33b0:	2b00      	cmp	r3, #0
    33b2:	d003      	beq.n	33bc <mp_lexer_to_next+0x18c>
                    kind = MP_TOKEN_BYTES;
    33b4:	230b      	movs	r3, #11
    33b6:	633b      	str	r3, [r7, #48]	; 0x30
                    n_char = 2;
    33b8:	2302      	movs	r3, #2
    33ba:	62fb      	str	r3, [r7, #44]	; 0x2c
            if (lex->tok_kind == MP_TOKEN_END) {
    33bc:	687b      	ldr	r3, [r7, #4]
    33be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    33c0:	2b00      	cmp	r3, #0
    33c2:	d103      	bne.n	33cc <mp_lexer_to_next+0x19c>
                lex->tok_kind = kind;
    33c4:	687b      	ldr	r3, [r7, #4]
    33c6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    33c8:	641a      	str	r2, [r3, #64]	; 0x40
    33ca:	e005      	b.n	33d8 <mp_lexer_to_next+0x1a8>
            } else if (lex->tok_kind != kind) {
    33cc:	687b      	ldr	r3, [r7, #4]
    33ce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    33d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    33d2:	429a      	cmp	r2, r3
    33d4:	f040 81f6 	bne.w	37c4 <mp_lexer_to_next+0x594>
            if (n_char != 0) {
    33d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    33da:	2b00      	cmp	r3, #0
    33dc:	d008      	beq.n	33f0 <mp_lexer_to_next+0x1c0>
                next_char(lex);
    33de:	6878      	ldr	r0, [r7, #4]
    33e0:	f7ff fbd4 	bl	2b8c <next_char>
                if (n_char == 2) {
    33e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    33e6:	2b02      	cmp	r3, #2
    33e8:	d102      	bne.n	33f0 <mp_lexer_to_next+0x1c0>
                    next_char(lex);
    33ea:	6878      	ldr	r0, [r7, #4]
    33ec:	f7ff fbce 	bl	2b8c <next_char>
            parse_string_literal(lex, is_raw);
    33f0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
    33f4:	4619      	mov	r1, r3
    33f6:	6878      	ldr	r0, [r7, #4]
    33f8:	f7ff fca8 	bl	2d4c <parse_string_literal>
            skip_whitespace(lex, true);
    33fc:	2101      	movs	r1, #1
    33fe:	6878      	ldr	r0, [r7, #4]
    3400:	f7ff feae 	bl	3160 <skip_whitespace>
        } while (is_string_or_bytes(lex));
    3404:	6878      	ldr	r0, [r7, #4]
    3406:	f7ff fb4b 	bl	2aa0 <is_string_or_bytes>
    340a:	4603      	mov	r3, r0
    340c:	2b00      	cmp	r3, #0
    340e:	d195      	bne.n	333c <mp_lexer_to_next+0x10c>
}
    3410:	e1df      	b.n	37d2 <mp_lexer_to_next+0x5a2>
    } else if (is_head_of_identifier(lex)) {
    3412:	6878      	ldr	r0, [r7, #4]
    3414:	f7ff fb84 	bl	2b20 <is_head_of_identifier>
    3418:	4603      	mov	r3, r0
    341a:	2b00      	cmp	r3, #0
    341c:	d061      	beq.n	34e2 <mp_lexer_to_next+0x2b2>
        lex->tok_kind = MP_TOKEN_NAME;
    341e:	687b      	ldr	r3, [r7, #4]
    3420:	2207      	movs	r2, #7
    3422:	641a      	str	r2, [r3, #64]	; 0x40
        vstr_add_byte(&lex->vstr, CUR_CHAR(lex));
    3424:	687b      	ldr	r3, [r7, #4]
    3426:	f103 0244 	add.w	r2, r3, #68	; 0x44
    342a:	687b      	ldr	r3, [r7, #4]
    342c:	691b      	ldr	r3, [r3, #16]
    342e:	b2db      	uxtb	r3, r3
    3430:	4619      	mov	r1, r3
    3432:	4610      	mov	r0, r2
    3434:	f7fe f976 	bl	1724 <vstr_add_byte>
        next_char(lex);
    3438:	6878      	ldr	r0, [r7, #4]
    343a:	f7ff fba7 	bl	2b8c <next_char>
        while (!is_end(lex) && is_tail_of_identifier(lex)) {
    343e:	e00c      	b.n	345a <mp_lexer_to_next+0x22a>
            vstr_add_byte(&lex->vstr, CUR_CHAR(lex));
    3440:	687b      	ldr	r3, [r7, #4]
    3442:	f103 0244 	add.w	r2, r3, #68	; 0x44
    3446:	687b      	ldr	r3, [r7, #4]
    3448:	691b      	ldr	r3, [r3, #16]
    344a:	b2db      	uxtb	r3, r3
    344c:	4619      	mov	r1, r3
    344e:	4610      	mov	r0, r2
    3450:	f7fe f968 	bl	1724 <vstr_add_byte>
            next_char(lex);
    3454:	6878      	ldr	r0, [r7, #4]
    3456:	f7ff fb99 	bl	2b8c <next_char>
        while (!is_end(lex) && is_tail_of_identifier(lex)) {
    345a:	6878      	ldr	r0, [r7, #4]
    345c:	f7ff f9c6 	bl	27ec <is_end>
    3460:	4603      	mov	r3, r0
    3462:	f083 0301 	eor.w	r3, r3, #1
    3466:	b2db      	uxtb	r3, r3
    3468:	2b00      	cmp	r3, #0
    346a:	d005      	beq.n	3478 <mp_lexer_to_next+0x248>
    346c:	6878      	ldr	r0, [r7, #4]
    346e:	f7ff fb73 	bl	2b58 <is_tail_of_identifier>
    3472:	4603      	mov	r3, r0
    3474:	2b00      	cmp	r3, #0
    3476:	d1e3      	bne.n	3440 <mp_lexer_to_next+0x210>
        const char *s = vstr_null_terminated_str(&lex->vstr);
    3478:	687b      	ldr	r3, [r7, #4]
    347a:	3344      	adds	r3, #68	; 0x44
    347c:	4618      	mov	r0, r3
    347e:	f7fe f935 	bl	16ec <vstr_null_terminated_str>
    3482:	60f8      	str	r0, [r7, #12]
        for (size_t i = 0; i < MP_ARRAY_SIZE(tok_kw); i++) {
    3484:	2300      	movs	r3, #0
    3486:	62bb      	str	r3, [r7, #40]	; 0x28
    3488:	e027      	b.n	34da <mp_lexer_to_next+0x2aa>
            int cmp = strcmp(s, tok_kw[i]);
    348a:	4aac      	ldr	r2, [pc, #688]	; (373c <mp_lexer_to_next+0x50c>)
    348c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    348e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    3492:	4619      	mov	r1, r3
    3494:	68f8      	ldr	r0, [r7, #12]
    3496:	f019 fd43 	bl	1cf20 <strcmp>
    349a:	60b8      	str	r0, [r7, #8]
            if (cmp == 0) {
    349c:	68bb      	ldr	r3, [r7, #8]
    349e:	2b00      	cmp	r3, #0
    34a0:	d114      	bne.n	34cc <mp_lexer_to_next+0x29c>
                lex->tok_kind = MP_TOKEN_KW_FALSE + i;
    34a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    34a4:	f103 020d 	add.w	r2, r3, #13
    34a8:	687b      	ldr	r3, [r7, #4]
    34aa:	641a      	str	r2, [r3, #64]	; 0x40
                if (lex->tok_kind == MP_TOKEN_KW___DEBUG__) {
    34ac:	687b      	ldr	r3, [r7, #4]
    34ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    34b0:	2b10      	cmp	r3, #16
    34b2:	f040 8189 	bne.w	37c8 <mp_lexer_to_next+0x598>
                    lex->tok_kind = (MP_STATE_VM(mp_optimise_value) == 0 ? MP_TOKEN_KW_TRUE : MP_TOKEN_KW_FALSE);
    34b6:	4ba2      	ldr	r3, [pc, #648]	; (3740 <mp_lexer_to_next+0x510>)
    34b8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
    34bc:	2b00      	cmp	r3, #0
    34be:	d101      	bne.n	34c4 <mp_lexer_to_next+0x294>
    34c0:	220f      	movs	r2, #15
    34c2:	e000      	b.n	34c6 <mp_lexer_to_next+0x296>
    34c4:	220d      	movs	r2, #13
    34c6:	687b      	ldr	r3, [r7, #4]
    34c8:	641a      	str	r2, [r3, #64]	; 0x40
                break;
    34ca:	e17d      	b.n	37c8 <mp_lexer_to_next+0x598>
            } else if (cmp < 0) {
    34cc:	68bb      	ldr	r3, [r7, #8]
    34ce:	2b00      	cmp	r3, #0
    34d0:	f2c0 817c 	blt.w	37cc <mp_lexer_to_next+0x59c>
        for (size_t i = 0; i < MP_ARRAY_SIZE(tok_kw); i++) {
    34d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
    34d6:	3301      	adds	r3, #1
    34d8:	62bb      	str	r3, [r7, #40]	; 0x28
    34da:	6abb      	ldr	r3, [r7, #40]	; 0x28
    34dc:	2b21      	cmp	r3, #33	; 0x21
    34de:	d9d4      	bls.n	348a <mp_lexer_to_next+0x25a>
}
    34e0:	e177      	b.n	37d2 <mp_lexer_to_next+0x5a2>
    } else if (is_digit(lex) || (is_char(lex, '.') && is_following_digit(lex))) {
    34e2:	6878      	ldr	r0, [r7, #4]
    34e4:	f7ff fa8a 	bl	29fc <is_digit>
    34e8:	4603      	mov	r3, r0
    34ea:	2b00      	cmp	r3, #0
    34ec:	d10e      	bne.n	350c <mp_lexer_to_next+0x2dc>
    34ee:	212e      	movs	r1, #46	; 0x2e
    34f0:	6878      	ldr	r0, [r7, #4]
    34f2:	f7ff f99f 	bl	2834 <is_char>
    34f6:	4603      	mov	r3, r0
    34f8:	2b00      	cmp	r3, #0
    34fa:	f000 80a1 	beq.w	3640 <mp_lexer_to_next+0x410>
    34fe:	6878      	ldr	r0, [r7, #4]
    3500:	f7ff fa8a 	bl	2a18 <is_following_digit>
    3504:	4603      	mov	r3, r0
    3506:	2b00      	cmp	r3, #0
    3508:	f000 809a 	beq.w	3640 <mp_lexer_to_next+0x410>
        bool forced_integer = false;
    350c:	2300      	movs	r3, #0
    350e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (is_char(lex, '.')) {
    3512:	212e      	movs	r1, #46	; 0x2e
    3514:	6878      	ldr	r0, [r7, #4]
    3516:	f7ff f98d 	bl	2834 <is_char>
    351a:	4603      	mov	r3, r0
    351c:	2b00      	cmp	r3, #0
    351e:	d003      	beq.n	3528 <mp_lexer_to_next+0x2f8>
            lex->tok_kind = MP_TOKEN_FLOAT_OR_IMAG;
    3520:	687b      	ldr	r3, [r7, #4]
    3522:	2209      	movs	r2, #9
    3524:	641a      	str	r2, [r3, #64]	; 0x40
    3526:	e012      	b.n	354e <mp_lexer_to_next+0x31e>
            lex->tok_kind = MP_TOKEN_INTEGER;
    3528:	687b      	ldr	r3, [r7, #4]
    352a:	2208      	movs	r2, #8
    352c:	641a      	str	r2, [r3, #64]	; 0x40
            if (is_char(lex, '0') && is_following_base_char(lex)) {
    352e:	2130      	movs	r1, #48	; 0x30
    3530:	6878      	ldr	r0, [r7, #4]
    3532:	f7ff f97f 	bl	2834 <is_char>
    3536:	4603      	mov	r3, r0
    3538:	2b00      	cmp	r3, #0
    353a:	d008      	beq.n	354e <mp_lexer_to_next+0x31e>
    353c:	6878      	ldr	r0, [r7, #4]
    353e:	f7ff fa79 	bl	2a34 <is_following_base_char>
    3542:	4603      	mov	r3, r0
    3544:	2b00      	cmp	r3, #0
    3546:	d002      	beq.n	354e <mp_lexer_to_next+0x31e>
                forced_integer = true;
    3548:	2301      	movs	r3, #1
    354a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        vstr_add_char(&lex->vstr, CUR_CHAR(lex));
    354e:	687b      	ldr	r3, [r7, #4]
    3550:	f103 0244 	add.w	r2, r3, #68	; 0x44
    3554:	687b      	ldr	r3, [r7, #4]
    3556:	691b      	ldr	r3, [r3, #16]
    3558:	4619      	mov	r1, r3
    355a:	4610      	mov	r0, r2
    355c:	f7fe f8f4 	bl	1748 <vstr_add_char>
        next_char(lex);
    3560:	6878      	ldr	r0, [r7, #4]
    3562:	f7ff fb13 	bl	2b8c <next_char>
        while (!is_end(lex)) {
    3566:	e061      	b.n	362c <mp_lexer_to_next+0x3fc>
            if (!forced_integer && is_char_or(lex, 'e', 'E')) {
    3568:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    356c:	f083 0301 	eor.w	r3, r3, #1
    3570:	b2db      	uxtb	r3, r3
    3572:	2b00      	cmp	r3, #0
    3574:	d02e      	beq.n	35d4 <mp_lexer_to_next+0x3a4>
    3576:	2245      	movs	r2, #69	; 0x45
    3578:	2165      	movs	r1, #101	; 0x65
    357a:	6878      	ldr	r0, [r7, #4]
    357c:	f7ff f96e 	bl	285c <is_char_or>
    3580:	4603      	mov	r3, r0
    3582:	2b00      	cmp	r3, #0
    3584:	d026      	beq.n	35d4 <mp_lexer_to_next+0x3a4>
                lex->tok_kind = MP_TOKEN_FLOAT_OR_IMAG;
    3586:	687b      	ldr	r3, [r7, #4]
    3588:	2209      	movs	r2, #9
    358a:	641a      	str	r2, [r3, #64]	; 0x40
                vstr_add_char(&lex->vstr, 'e');
    358c:	687b      	ldr	r3, [r7, #4]
    358e:	3344      	adds	r3, #68	; 0x44
    3590:	2165      	movs	r1, #101	; 0x65
    3592:	4618      	mov	r0, r3
    3594:	f7fe f8d8 	bl	1748 <vstr_add_char>
                next_char(lex);
    3598:	6878      	ldr	r0, [r7, #4]
    359a:	f7ff faf7 	bl	2b8c <next_char>
                if (is_char(lex, '+') || is_char(lex, '-')) {
    359e:	212b      	movs	r1, #43	; 0x2b
    35a0:	6878      	ldr	r0, [r7, #4]
    35a2:	f7ff f947 	bl	2834 <is_char>
    35a6:	4603      	mov	r3, r0
    35a8:	2b00      	cmp	r3, #0
    35aa:	d106      	bne.n	35ba <mp_lexer_to_next+0x38a>
    35ac:	212d      	movs	r1, #45	; 0x2d
    35ae:	6878      	ldr	r0, [r7, #4]
    35b0:	f7ff f940 	bl	2834 <is_char>
    35b4:	4603      	mov	r3, r0
    35b6:	2b00      	cmp	r3, #0
    35b8:	d038      	beq.n	362c <mp_lexer_to_next+0x3fc>
                    vstr_add_char(&lex->vstr, CUR_CHAR(lex));
    35ba:	687b      	ldr	r3, [r7, #4]
    35bc:	f103 0244 	add.w	r2, r3, #68	; 0x44
    35c0:	687b      	ldr	r3, [r7, #4]
    35c2:	691b      	ldr	r3, [r3, #16]
    35c4:	4619      	mov	r1, r3
    35c6:	4610      	mov	r0, r2
    35c8:	f7fe f8be 	bl	1748 <vstr_add_char>
                    next_char(lex);
    35cc:	6878      	ldr	r0, [r7, #4]
    35ce:	f7ff fadd 	bl	2b8c <next_char>
                if (is_char(lex, '+') || is_char(lex, '-')) {
    35d2:	e02b      	b.n	362c <mp_lexer_to_next+0x3fc>
            } else if (is_letter(lex) || is_digit(lex) || is_char(lex, '.')) {
    35d4:	6878      	ldr	r0, [r7, #4]
    35d6:	f7ff fa03 	bl	29e0 <is_letter>
    35da:	4603      	mov	r3, r0
    35dc:	2b00      	cmp	r3, #0
    35de:	d10d      	bne.n	35fc <mp_lexer_to_next+0x3cc>
    35e0:	6878      	ldr	r0, [r7, #4]
    35e2:	f7ff fa0b 	bl	29fc <is_digit>
    35e6:	4603      	mov	r3, r0
    35e8:	2b00      	cmp	r3, #0
    35ea:	d107      	bne.n	35fc <mp_lexer_to_next+0x3cc>
    35ec:	212e      	movs	r1, #46	; 0x2e
    35ee:	6878      	ldr	r0, [r7, #4]
    35f0:	f7ff f920 	bl	2834 <is_char>
    35f4:	4603      	mov	r3, r0
    35f6:	2b00      	cmp	r3, #0
    35f8:	f000 80ea 	beq.w	37d0 <mp_lexer_to_next+0x5a0>
                if (is_char_or3(lex, '.', 'j', 'J')) {
    35fc:	234a      	movs	r3, #74	; 0x4a
    35fe:	226a      	movs	r2, #106	; 0x6a
    3600:	212e      	movs	r1, #46	; 0x2e
    3602:	6878      	ldr	r0, [r7, #4]
    3604:	f7ff f948 	bl	2898 <is_char_or3>
    3608:	4603      	mov	r3, r0
    360a:	2b00      	cmp	r3, #0
    360c:	d002      	beq.n	3614 <mp_lexer_to_next+0x3e4>
                    lex->tok_kind = MP_TOKEN_FLOAT_OR_IMAG;
    360e:	687b      	ldr	r3, [r7, #4]
    3610:	2209      	movs	r2, #9
    3612:	641a      	str	r2, [r3, #64]	; 0x40
                vstr_add_char(&lex->vstr, CUR_CHAR(lex));
    3614:	687b      	ldr	r3, [r7, #4]
    3616:	f103 0244 	add.w	r2, r3, #68	; 0x44
    361a:	687b      	ldr	r3, [r7, #4]
    361c:	691b      	ldr	r3, [r3, #16]
    361e:	4619      	mov	r1, r3
    3620:	4610      	mov	r0, r2
    3622:	f7fe f891 	bl	1748 <vstr_add_char>
                next_char(lex);
    3626:	6878      	ldr	r0, [r7, #4]
    3628:	f7ff fab0 	bl	2b8c <next_char>
        while (!is_end(lex)) {
    362c:	6878      	ldr	r0, [r7, #4]
    362e:	f7ff f8dd 	bl	27ec <is_end>
    3632:	4603      	mov	r3, r0
    3634:	f083 0301 	eor.w	r3, r3, #1
    3638:	b2db      	uxtb	r3, r3
    363a:	2b00      	cmp	r3, #0
    363c:	d194      	bne.n	3568 <mp_lexer_to_next+0x338>
    } else if (is_digit(lex) || (is_char(lex, '.') && is_following_digit(lex))) {
    363e:	e0c7      	b.n	37d0 <mp_lexer_to_next+0x5a0>
        const char *t = tok_enc;
    3640:	4b40      	ldr	r3, [pc, #256]	; (3744 <mp_lexer_to_next+0x514>)
    3642:	623b      	str	r3, [r7, #32]
        size_t tok_enc_index = 0;
    3644:	2300      	movs	r3, #0
    3646:	61fb      	str	r3, [r7, #28]
        for (; *t != 0 && !is_char(lex, *t); t += 1) {
    3648:	e010      	b.n	366c <mp_lexer_to_next+0x43c>
            if (*t == 'e' || *t == 'c') {
    364a:	6a3b      	ldr	r3, [r7, #32]
    364c:	781b      	ldrb	r3, [r3, #0]
    364e:	2b65      	cmp	r3, #101	; 0x65
    3650:	d003      	beq.n	365a <mp_lexer_to_next+0x42a>
    3652:	6a3b      	ldr	r3, [r7, #32]
    3654:	781b      	ldrb	r3, [r3, #0]
    3656:	2b63      	cmp	r3, #99	; 0x63
    3658:	d102      	bne.n	3660 <mp_lexer_to_next+0x430>
                t += 1;
    365a:	6a3b      	ldr	r3, [r7, #32]
    365c:	3301      	adds	r3, #1
    365e:	623b      	str	r3, [r7, #32]
            tok_enc_index += 1;
    3660:	69fb      	ldr	r3, [r7, #28]
    3662:	3301      	adds	r3, #1
    3664:	61fb      	str	r3, [r7, #28]
        for (; *t != 0 && !is_char(lex, *t); t += 1) {
    3666:	6a3b      	ldr	r3, [r7, #32]
    3668:	3301      	adds	r3, #1
    366a:	623b      	str	r3, [r7, #32]
    366c:	6a3b      	ldr	r3, [r7, #32]
    366e:	781b      	ldrb	r3, [r3, #0]
    3670:	2b00      	cmp	r3, #0
    3672:	d00b      	beq.n	368c <mp_lexer_to_next+0x45c>
    3674:	6a3b      	ldr	r3, [r7, #32]
    3676:	781b      	ldrb	r3, [r3, #0]
    3678:	4619      	mov	r1, r3
    367a:	6878      	ldr	r0, [r7, #4]
    367c:	f7ff f8da 	bl	2834 <is_char>
    3680:	4603      	mov	r3, r0
    3682:	f083 0301 	eor.w	r3, r3, #1
    3686:	b2db      	uxtb	r3, r3
    3688:	2b00      	cmp	r3, #0
    368a:	d1de      	bne.n	364a <mp_lexer_to_next+0x41a>
        next_char(lex);
    368c:	6878      	ldr	r0, [r7, #4]
    368e:	f7ff fa7d 	bl	2b8c <next_char>
        if (*t == 0) {
    3692:	6a3b      	ldr	r3, [r7, #32]
    3694:	781b      	ldrb	r3, [r3, #0]
    3696:	2b00      	cmp	r3, #0
    3698:	d103      	bne.n	36a2 <mp_lexer_to_next+0x472>
            lex->tok_kind = MP_TOKEN_INVALID;
    369a:	687b      	ldr	r3, [r7, #4]
    369c:	2201      	movs	r2, #1
    369e:	641a      	str	r2, [r3, #64]	; 0x40
}
    36a0:	e097      	b.n	37d2 <mp_lexer_to_next+0x5a2>
        } else if (*t == '!') {
    36a2:	6a3b      	ldr	r3, [r7, #32]
    36a4:	781b      	ldrb	r3, [r3, #0]
    36a6:	2b21      	cmp	r3, #33	; 0x21
    36a8:	d111      	bne.n	36ce <mp_lexer_to_next+0x49e>
            if (is_char(lex, '=')) {
    36aa:	213d      	movs	r1, #61	; 0x3d
    36ac:	6878      	ldr	r0, [r7, #4]
    36ae:	f7ff f8c1 	bl	2834 <is_char>
    36b2:	4603      	mov	r3, r0
    36b4:	2b00      	cmp	r3, #0
    36b6:	d006      	beq.n	36c6 <mp_lexer_to_next+0x496>
                next_char(lex);
    36b8:	6878      	ldr	r0, [r7, #4]
    36ba:	f7ff fa67 	bl	2b8c <next_char>
                lex->tok_kind = MP_TOKEN_OP_NOT_EQUAL;
    36be:	687b      	ldr	r3, [r7, #4]
    36c0:	2241      	movs	r2, #65	; 0x41
    36c2:	641a      	str	r2, [r3, #64]	; 0x40
}
    36c4:	e085      	b.n	37d2 <mp_lexer_to_next+0x5a2>
                lex->tok_kind = MP_TOKEN_INVALID;
    36c6:	687b      	ldr	r3, [r7, #4]
    36c8:	2201      	movs	r2, #1
    36ca:	641a      	str	r2, [r3, #64]	; 0x40
}
    36cc:	e081      	b.n	37d2 <mp_lexer_to_next+0x5a2>
        } else if (*t == '.') {
    36ce:	6a3b      	ldr	r3, [r7, #32]
    36d0:	781b      	ldrb	r3, [r3, #0]
    36d2:	2b2e      	cmp	r3, #46	; 0x2e
    36d4:	d115      	bne.n	3702 <mp_lexer_to_next+0x4d2>
            if (is_char_and(lex, '.', '.')) {
    36d6:	222e      	movs	r2, #46	; 0x2e
    36d8:	212e      	movs	r1, #46	; 0x2e
    36da:	6878      	ldr	r0, [r7, #4]
    36dc:	f7ff f954 	bl	2988 <is_char_and>
    36e0:	4603      	mov	r3, r0
    36e2:	2b00      	cmp	r3, #0
    36e4:	d009      	beq.n	36fa <mp_lexer_to_next+0x4ca>
                next_char(lex);
    36e6:	6878      	ldr	r0, [r7, #4]
    36e8:	f7ff fa50 	bl	2b8c <next_char>
                next_char(lex);
    36ec:	6878      	ldr	r0, [r7, #4]
    36ee:	f7ff fa4d 	bl	2b8c <next_char>
                lex->tok_kind = MP_TOKEN_ELLIPSIS;
    36f2:	687b      	ldr	r3, [r7, #4]
    36f4:	220c      	movs	r2, #12
    36f6:	641a      	str	r2, [r3, #64]	; 0x40
}
    36f8:	e06b      	b.n	37d2 <mp_lexer_to_next+0x5a2>
                lex->tok_kind = MP_TOKEN_DEL_PERIOD;
    36fa:	687b      	ldr	r3, [r7, #4]
    36fc:	224a      	movs	r2, #74	; 0x4a
    36fe:	641a      	str	r2, [r3, #64]	; 0x40
}
    3700:	e067      	b.n	37d2 <mp_lexer_to_next+0x5a2>
            t += 1;
    3702:	6a3b      	ldr	r3, [r7, #32]
    3704:	3301      	adds	r3, #1
    3706:	623b      	str	r3, [r7, #32]
            size_t t_index = tok_enc_index;
    3708:	69fb      	ldr	r3, [r7, #28]
    370a:	61bb      	str	r3, [r7, #24]
            while (*t == 'c' || *t == 'e') {
    370c:	e023      	b.n	3756 <mp_lexer_to_next+0x526>
                t_index += 1;
    370e:	69bb      	ldr	r3, [r7, #24]
    3710:	3301      	adds	r3, #1
    3712:	61bb      	str	r3, [r7, #24]
                if (is_char(lex, t[1])) {
    3714:	6a3b      	ldr	r3, [r7, #32]
    3716:	3301      	adds	r3, #1
    3718:	781b      	ldrb	r3, [r3, #0]
    371a:	4619      	mov	r1, r3
    371c:	6878      	ldr	r0, [r7, #4]
    371e:	f7ff f889 	bl	2834 <is_char>
    3722:	4603      	mov	r3, r0
    3724:	2b00      	cmp	r3, #0
    3726:	d00f      	beq.n	3748 <mp_lexer_to_next+0x518>
                    next_char(lex);
    3728:	6878      	ldr	r0, [r7, #4]
    372a:	f7ff fa2f 	bl	2b8c <next_char>
                    tok_enc_index = t_index;
    372e:	69bb      	ldr	r3, [r7, #24]
    3730:	61fb      	str	r3, [r7, #28]
                    if (*t == 'e') {
    3732:	6a3b      	ldr	r3, [r7, #32]
    3734:	781b      	ldrb	r3, [r3, #0]
    3736:	2b65      	cmp	r3, #101	; 0x65
    3738:	d10a      	bne.n	3750 <mp_lexer_to_next+0x520>
                        break;
    373a:	e016      	b.n	376a <mp_lexer_to_next+0x53a>
    373c:	0001f9f0 	.word	0x0001f9f0
    3740:	200012f0 	.word	0x200012f0
    3744:	0001f88c 	.word	0x0001f88c
                } else if (*t == 'c') {
    3748:	6a3b      	ldr	r3, [r7, #32]
    374a:	781b      	ldrb	r3, [r3, #0]
    374c:	2b63      	cmp	r3, #99	; 0x63
    374e:	d00b      	beq.n	3768 <mp_lexer_to_next+0x538>
                t += 2;
    3750:	6a3b      	ldr	r3, [r7, #32]
    3752:	3302      	adds	r3, #2
    3754:	623b      	str	r3, [r7, #32]
            while (*t == 'c' || *t == 'e') {
    3756:	6a3b      	ldr	r3, [r7, #32]
    3758:	781b      	ldrb	r3, [r3, #0]
    375a:	2b63      	cmp	r3, #99	; 0x63
    375c:	d0d7      	beq.n	370e <mp_lexer_to_next+0x4de>
    375e:	6a3b      	ldr	r3, [r7, #32]
    3760:	781b      	ldrb	r3, [r3, #0]
    3762:	2b65      	cmp	r3, #101	; 0x65
    3764:	d0d3      	beq.n	370e <mp_lexer_to_next+0x4de>
    3766:	e000      	b.n	376a <mp_lexer_to_next+0x53a>
                    break;
    3768:	bf00      	nop
            lex->tok_kind = tok_enc_kind[tok_enc_index];
    376a:	4a1c      	ldr	r2, [pc, #112]	; (37dc <mp_lexer_to_next+0x5ac>)
    376c:	69fb      	ldr	r3, [r7, #28]
    376e:	4413      	add	r3, r2
    3770:	781b      	ldrb	r3, [r3, #0]
    3772:	461a      	mov	r2, r3
    3774:	687b      	ldr	r3, [r7, #4]
    3776:	641a      	str	r2, [r3, #64]	; 0x40
            if (lex->tok_kind == MP_TOKEN_DEL_PAREN_OPEN || lex->tok_kind == MP_TOKEN_DEL_BRACKET_OPEN || lex->tok_kind == MP_TOKEN_DEL_BRACE_OPEN) {
    3778:	687b      	ldr	r3, [r7, #4]
    377a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    377c:	2b42      	cmp	r3, #66	; 0x42
    377e:	d007      	beq.n	3790 <mp_lexer_to_next+0x560>
    3780:	687b      	ldr	r3, [r7, #4]
    3782:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    3784:	2b44      	cmp	r3, #68	; 0x44
    3786:	d003      	beq.n	3790 <mp_lexer_to_next+0x560>
    3788:	687b      	ldr	r3, [r7, #4]
    378a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    378c:	2b46      	cmp	r3, #70	; 0x46
    378e:	d105      	bne.n	379c <mp_lexer_to_next+0x56c>
                lex->nested_bracket_level += 1;
    3790:	687b      	ldr	r3, [r7, #4]
    3792:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3794:	1c5a      	adds	r2, r3, #1
    3796:	687b      	ldr	r3, [r7, #4]
    3798:	629a      	str	r2, [r3, #40]	; 0x28
    379a:	e01a      	b.n	37d2 <mp_lexer_to_next+0x5a2>
            } else if (lex->tok_kind == MP_TOKEN_DEL_PAREN_CLOSE || lex->tok_kind == MP_TOKEN_DEL_BRACKET_CLOSE || lex->tok_kind == MP_TOKEN_DEL_BRACE_CLOSE) {
    379c:	687b      	ldr	r3, [r7, #4]
    379e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    37a0:	2b43      	cmp	r3, #67	; 0x43
    37a2:	d007      	beq.n	37b4 <mp_lexer_to_next+0x584>
    37a4:	687b      	ldr	r3, [r7, #4]
    37a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    37a8:	2b45      	cmp	r3, #69	; 0x45
    37aa:	d003      	beq.n	37b4 <mp_lexer_to_next+0x584>
    37ac:	687b      	ldr	r3, [r7, #4]
    37ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    37b0:	2b47      	cmp	r3, #71	; 0x47
    37b2:	d10e      	bne.n	37d2 <mp_lexer_to_next+0x5a2>
                lex->nested_bracket_level -= 1;
    37b4:	687b      	ldr	r3, [r7, #4]
    37b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    37b8:	1e5a      	subs	r2, r3, #1
    37ba:	687b      	ldr	r3, [r7, #4]
    37bc:	629a      	str	r2, [r3, #40]	; 0x28
}
    37be:	e008      	b.n	37d2 <mp_lexer_to_next+0x5a2>
    } else if (had_physical_newline && lex->nested_bracket_level == 0) {
    37c0:	bf00      	nop
    37c2:	e006      	b.n	37d2 <mp_lexer_to_next+0x5a2>
                break;
    37c4:	bf00      	nop
    37c6:	e004      	b.n	37d2 <mp_lexer_to_next+0x5a2>
                break;
    37c8:	bf00      	nop
    37ca:	e002      	b.n	37d2 <mp_lexer_to_next+0x5a2>
                break;
    37cc:	bf00      	nop
    37ce:	e000      	b.n	37d2 <mp_lexer_to_next+0x5a2>
    } else if (is_digit(lex) || (is_char(lex, '.') && is_following_digit(lex))) {
    37d0:	bf00      	nop
}
    37d2:	bf00      	nop
    37d4:	3738      	adds	r7, #56	; 0x38
    37d6:	46bd      	mov	sp, r7
    37d8:	bd80      	pop	{r7, pc}
    37da:	bf00      	nop
    37dc:	0001f8d4 	.word	0x0001f8d4

000037e0 <mp_lexer_new>:

mp_lexer_t *mp_lexer_new(qstr src_name, mp_reader_t reader) {
    37e0:	b580      	push	{r7, lr}
    37e2:	b086      	sub	sp, #24
    37e4:	af00      	add	r7, sp, #0
    37e6:	60f8      	str	r0, [r7, #12]
    37e8:	4638      	mov	r0, r7
    37ea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    mp_lexer_t *lex = m_new_obj(mp_lexer_t);
    37ee:	2054      	movs	r0, #84	; 0x54
    37f0:	f7fc fd94 	bl	31c <m_malloc>
    37f4:	6178      	str	r0, [r7, #20]

    lex->source_name = src_name;
    37f6:	697b      	ldr	r3, [r7, #20]
    37f8:	68fa      	ldr	r2, [r7, #12]
    37fa:	601a      	str	r2, [r3, #0]
    lex->reader = reader;
    37fc:	697b      	ldr	r3, [r7, #20]
    37fe:	3304      	adds	r3, #4
    3800:	463a      	mov	r2, r7
    3802:	ca07      	ldmia	r2, {r0, r1, r2}
    3804:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    lex->line = 1;
    3808:	697b      	ldr	r3, [r7, #20]
    380a:	2201      	movs	r2, #1
    380c:	61da      	str	r2, [r3, #28]
    lex->column = (size_t)-2; // account for 3 dummy bytes
    380e:	697b      	ldr	r3, [r7, #20]
    3810:	f06f 0201 	mvn.w	r2, #1
    3814:	621a      	str	r2, [r3, #32]
    lex->emit_dent = 0;
    3816:	697b      	ldr	r3, [r7, #20]
    3818:	2200      	movs	r2, #0
    381a:	625a      	str	r2, [r3, #36]	; 0x24
    lex->nested_bracket_level = 0;
    381c:	697b      	ldr	r3, [r7, #20]
    381e:	2200      	movs	r2, #0
    3820:	629a      	str	r2, [r3, #40]	; 0x28
    lex->alloc_indent_level = MICROPY_ALLOC_LEXER_INDENT_INIT;
    3822:	697b      	ldr	r3, [r7, #20]
    3824:	220a      	movs	r2, #10
    3826:	62da      	str	r2, [r3, #44]	; 0x2c
    lex->num_indent_level = 1;
    3828:	697b      	ldr	r3, [r7, #20]
    382a:	2201      	movs	r2, #1
    382c:	631a      	str	r2, [r3, #48]	; 0x30
    lex->indent_level = m_new(uint16_t, lex->alloc_indent_level);
    382e:	697b      	ldr	r3, [r7, #20]
    3830:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    3832:	005b      	lsls	r3, r3, #1
    3834:	4618      	mov	r0, r3
    3836:	f7fc fd71 	bl	31c <m_malloc>
    383a:	4602      	mov	r2, r0
    383c:	697b      	ldr	r3, [r7, #20]
    383e:	635a      	str	r2, [r3, #52]	; 0x34
    vstr_init(&lex->vstr, 32);
    3840:	697b      	ldr	r3, [r7, #20]
    3842:	3344      	adds	r3, #68	; 0x44
    3844:	2120      	movs	r1, #32
    3846:	4618      	mov	r0, r3
    3848:	f7fd fe16 	bl	1478 <vstr_init>

    // store sentinel for first indentation level
    lex->indent_level[0] = 0;
    384c:	697b      	ldr	r3, [r7, #20]
    384e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    3850:	2200      	movs	r2, #0
    3852:	801a      	strh	r2, [r3, #0]

    // load lexer with start of file, advancing lex->column to 1
    // start with dummy bytes and use next_char() for proper EOL/EOF handling
    lex->chr0 = lex->chr1 = lex->chr2 = 0;
    3854:	697b      	ldr	r3, [r7, #20]
    3856:	2200      	movs	r2, #0
    3858:	619a      	str	r2, [r3, #24]
    385a:	697b      	ldr	r3, [r7, #20]
    385c:	699a      	ldr	r2, [r3, #24]
    385e:	697b      	ldr	r3, [r7, #20]
    3860:	615a      	str	r2, [r3, #20]
    3862:	697b      	ldr	r3, [r7, #20]
    3864:	695a      	ldr	r2, [r3, #20]
    3866:	697b      	ldr	r3, [r7, #20]
    3868:	611a      	str	r2, [r3, #16]
    next_char(lex);
    386a:	6978      	ldr	r0, [r7, #20]
    386c:	f7ff f98e 	bl	2b8c <next_char>
    next_char(lex);
    3870:	6978      	ldr	r0, [r7, #20]
    3872:	f7ff f98b 	bl	2b8c <next_char>
    next_char(lex);
    3876:	6978      	ldr	r0, [r7, #20]
    3878:	f7ff f988 	bl	2b8c <next_char>

    // preload first token
    mp_lexer_to_next(lex);
    387c:	6978      	ldr	r0, [r7, #20]
    387e:	f7ff fcd7 	bl	3230 <mp_lexer_to_next>

    // Check that the first token is in the first column.  If it's not then we
    // convert the token kind to INDENT so that the parser gives a syntax error.
    if (lex->tok_column != 1) {
    3882:	697b      	ldr	r3, [r7, #20]
    3884:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    3886:	2b01      	cmp	r3, #1
    3888:	d002      	beq.n	3890 <mp_lexer_new+0xb0>
        lex->tok_kind = MP_TOKEN_INDENT;
    388a:	697b      	ldr	r3, [r7, #20]
    388c:	2205      	movs	r2, #5
    388e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    return lex;
    3890:	697b      	ldr	r3, [r7, #20]
}
    3892:	4618      	mov	r0, r3
    3894:	3718      	adds	r7, #24
    3896:	46bd      	mov	sp, r7
    3898:	bd80      	pop	{r7, pc}
    389a:	bf00      	nop

0000389c <mp_lexer_new_from_str_len>:

mp_lexer_t *mp_lexer_new_from_str_len(qstr src_name, const char *str, size_t len, size_t free_len) {
    389c:	b580      	push	{r7, lr}
    389e:	b088      	sub	sp, #32
    38a0:	af00      	add	r7, sp, #0
    38a2:	60f8      	str	r0, [r7, #12]
    38a4:	60b9      	str	r1, [r7, #8]
    38a6:	607a      	str	r2, [r7, #4]
    38a8:	603b      	str	r3, [r7, #0]
    mp_reader_t reader;
    mp_reader_new_mem(&reader, (const byte*)str, len, free_len);
    38aa:	f107 0014 	add.w	r0, r7, #20
    38ae:	683b      	ldr	r3, [r7, #0]
    38b0:	687a      	ldr	r2, [r7, #4]
    38b2:	68b9      	ldr	r1, [r7, #8]
    38b4:	f7fe ff62 	bl	277c <mp_reader_new_mem>
    return mp_lexer_new(src_name, reader);
    38b8:	f107 0314 	add.w	r3, r7, #20
    38bc:	cb0e      	ldmia	r3, {r1, r2, r3}
    38be:	68f8      	ldr	r0, [r7, #12]
    38c0:	f7ff ff8e 	bl	37e0 <mp_lexer_new>
    38c4:	4603      	mov	r3, r0
}
    38c6:	4618      	mov	r0, r3
    38c8:	3720      	adds	r7, #32
    38ca:	46bd      	mov	sp, r7
    38cc:	bd80      	pop	{r7, pc}
    38ce:	bf00      	nop

000038d0 <mp_lexer_free>:

#endif

#endif

void mp_lexer_free(mp_lexer_t *lex) {
    38d0:	b580      	push	{r7, lr}
    38d2:	b082      	sub	sp, #8
    38d4:	af00      	add	r7, sp, #0
    38d6:	6078      	str	r0, [r7, #4]
    if (lex) {
    38d8:	687b      	ldr	r3, [r7, #4]
    38da:	2b00      	cmp	r3, #0
    38dc:	d012      	beq.n	3904 <mp_lexer_free+0x34>
        lex->reader.close(lex->reader.data);
    38de:	687b      	ldr	r3, [r7, #4]
    38e0:	68db      	ldr	r3, [r3, #12]
    38e2:	687a      	ldr	r2, [r7, #4]
    38e4:	6852      	ldr	r2, [r2, #4]
    38e6:	4610      	mov	r0, r2
    38e8:	4798      	blx	r3
        vstr_clear(&lex->vstr);
    38ea:	687b      	ldr	r3, [r7, #4]
    38ec:	3344      	adds	r3, #68	; 0x44
    38ee:	4618      	mov	r0, r3
    38f0:	f7fd fe26 	bl	1540 <vstr_clear>
        m_del(uint16_t, lex->indent_level, lex->alloc_indent_level);
    38f4:	687b      	ldr	r3, [r7, #4]
    38f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    38f8:	4618      	mov	r0, r3
    38fa:	f7fc fd89 	bl	410 <m_free>
        m_del_obj(mp_lexer_t, lex);
    38fe:	6878      	ldr	r0, [r7, #4]
    3900:	f7fc fd86 	bl	410 <m_free>
    }
}
    3904:	bf00      	nop
    3906:	3708      	adds	r7, #8
    3908:	46bd      	mov	sp, r7
    390a:	bd80      	pop	{r7, pc}

0000390c <MP_OBJ_IS_SMALL_INT>:
    { return ((((mp_int_t)(o)) & 1) != 0); }
    390c:	b480      	push	{r7}
    390e:	b083      	sub	sp, #12
    3910:	af00      	add	r7, sp, #0
    3912:	6078      	str	r0, [r7, #4]
    3914:	687b      	ldr	r3, [r7, #4]
    3916:	f003 0301 	and.w	r3, r3, #1
    391a:	2b00      	cmp	r3, #0
    391c:	bf14      	ite	ne
    391e:	2301      	movne	r3, #1
    3920:	2300      	moveq	r3, #0
    3922:	b2db      	uxtb	r3, r3
    3924:	4618      	mov	r0, r3
    3926:	370c      	adds	r7, #12
    3928:	46bd      	mov	sp, r7
    392a:	f85d 7b04 	ldr.w	r7, [sp], #4
    392e:	4770      	bx	lr

00003930 <MP_OBJ_IS_OBJ>:
    { return ((((mp_int_t)(o)) & 3) == 0); }
    3930:	b480      	push	{r7}
    3932:	b083      	sub	sp, #12
    3934:	af00      	add	r7, sp, #0
    3936:	6078      	str	r0, [r7, #4]
    3938:	687b      	ldr	r3, [r7, #4]
    393a:	f003 0303 	and.w	r3, r3, #3
    393e:	2b00      	cmp	r3, #0
    3940:	bf0c      	ite	eq
    3942:	2301      	moveq	r3, #1
    3944:	2300      	movne	r3, #0
    3946:	b2db      	uxtb	r3, r3
    3948:	4618      	mov	r0, r3
    394a:	370c      	adds	r7, #12
    394c:	46bd      	mov	sp, r7
    394e:	f85d 7b04 	ldr.w	r7, [sp], #4
    3952:	4770      	bx	lr

00003954 <mp_parse_node_new_small_int>:
#define MP_PARSE_NODE_LEAF_ARG(pn) (((uintptr_t)(pn)) >> 4)
#define MP_PARSE_NODE_LEAF_SMALL_INT(pn) (((mp_int_t)(intptr_t)(pn)) >> 1)
#define MP_PARSE_NODE_STRUCT_KIND(pns) ((pns)->kind_num_nodes & 0xff)
#define MP_PARSE_NODE_STRUCT_NUM_NODES(pns) ((pns)->kind_num_nodes >> 8)

static inline mp_parse_node_t mp_parse_node_new_small_int(mp_int_t val) {
    3954:	b480      	push	{r7}
    3956:	b083      	sub	sp, #12
    3958:	af00      	add	r7, sp, #0
    395a:	6078      	str	r0, [r7, #4]
    return (mp_parse_node_t)(MP_PARSE_NODE_SMALL_INT | ((mp_uint_t)val << 1));
    395c:	687b      	ldr	r3, [r7, #4]
    395e:	005b      	lsls	r3, r3, #1
    3960:	f043 0301 	orr.w	r3, r3, #1
}
    3964:	4618      	mov	r0, r3
    3966:	370c      	adds	r7, #12
    3968:	46bd      	mov	sp, r7
    396a:	f85d 7b04 	ldr.w	r7, [sp], #4
    396e:	4770      	bx	lr

00003970 <mp_parse_node_new_leaf>:
static inline mp_parse_node_t mp_parse_node_new_leaf(size_t kind, mp_int_t arg) {
    3970:	b480      	push	{r7}
    3972:	b083      	sub	sp, #12
    3974:	af00      	add	r7, sp, #0
    3976:	6078      	str	r0, [r7, #4]
    3978:	6039      	str	r1, [r7, #0]
    return (mp_parse_node_t)(kind | ((mp_uint_t)arg << 4));
    397a:	683b      	ldr	r3, [r7, #0]
    397c:	011a      	lsls	r2, r3, #4
    397e:	687b      	ldr	r3, [r7, #4]
    3980:	4313      	orrs	r3, r2
}
    3982:	4618      	mov	r0, r3
    3984:	370c      	adds	r7, #12
    3986:	46bd      	mov	sp, r7
    3988:	f85d 7b04 	ldr.w	r7, [sp], #4
    398c:	4770      	bx	lr
    398e:	bf00      	nop

00003990 <get_rule_arg>:
    #if MICROPY_COMP_CONST
    mp_map_t consts;
    #endif
} parser_t;

STATIC const uint16_t *get_rule_arg(uint8_t r_id) {
    3990:	b480      	push	{r7}
    3992:	b085      	sub	sp, #20
    3994:	af00      	add	r7, sp, #0
    3996:	4603      	mov	r3, r0
    3998:	71fb      	strb	r3, [r7, #7]
    size_t off = rule_arg_offset_table[r_id];
    399a:	79fb      	ldrb	r3, [r7, #7]
    399c:	4a0a      	ldr	r2, [pc, #40]	; (39c8 <get_rule_arg+0x38>)
    399e:	5cd3      	ldrb	r3, [r2, r3]
    39a0:	60fb      	str	r3, [r7, #12]
    if (r_id >= FIRST_RULE_WITH_OFFSET_ABOVE_255) {
    39a2:	79fb      	ldrb	r3, [r7, #7]
    39a4:	2266      	movs	r2, #102	; 0x66
    39a6:	4293      	cmp	r3, r2
    39a8:	d303      	bcc.n	39b2 <get_rule_arg+0x22>
        off |= 0x100;
    39aa:	68fb      	ldr	r3, [r7, #12]
    39ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    39b0:	60fb      	str	r3, [r7, #12]
    }
    return &rule_arg_combined_table[off];
    39b2:	68fb      	ldr	r3, [r7, #12]
    39b4:	005b      	lsls	r3, r3, #1
    39b6:	4a05      	ldr	r2, [pc, #20]	; (39cc <get_rule_arg+0x3c>)
    39b8:	4413      	add	r3, r2
}
    39ba:	4618      	mov	r0, r3
    39bc:	3714      	adds	r7, #20
    39be:	46bd      	mov	sp, r7
    39c0:	f85d 7b04 	ldr.w	r7, [sp], #4
    39c4:	4770      	bx	lr
    39c6:	bf00      	nop
    39c8:	0001fe78 	.word	0x0001fe78
    39cc:	0001fb34 	.word	0x0001fb34

000039d0 <parser_alloc>:

STATIC void *parser_alloc(parser_t *parser, size_t num_bytes) {
    39d0:	b580      	push	{r7, lr}
    39d2:	b086      	sub	sp, #24
    39d4:	af00      	add	r7, sp, #0
    39d6:	6078      	str	r0, [r7, #4]
    39d8:	6039      	str	r1, [r7, #0]
    // use a custom memory allocator to store parse nodes sequentially in large chunks

    mp_parse_chunk_t *chunk = parser->cur_chunk;
    39da:	687b      	ldr	r3, [r7, #4]
    39dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    39de:	617b      	str	r3, [r7, #20]

    if (chunk != NULL && chunk->union_.used + num_bytes > chunk->alloc) {
    39e0:	697b      	ldr	r3, [r7, #20]
    39e2:	2b00      	cmp	r3, #0
    39e4:	d031      	beq.n	3a4a <parser_alloc+0x7a>
    39e6:	697b      	ldr	r3, [r7, #20]
    39e8:	685a      	ldr	r2, [r3, #4]
    39ea:	683b      	ldr	r3, [r7, #0]
    39ec:	441a      	add	r2, r3
    39ee:	697b      	ldr	r3, [r7, #20]
    39f0:	681b      	ldr	r3, [r3, #0]
    39f2:	429a      	cmp	r2, r3
    39f4:	d929      	bls.n	3a4a <parser_alloc+0x7a>
        // not enough room at end of previously allocated chunk so try to grow
        mp_parse_chunk_t *new_data = (mp_parse_chunk_t*)m_renew_maybe(byte, chunk,
    39f6:	697b      	ldr	r3, [r7, #20]
    39f8:	681a      	ldr	r2, [r3, #0]
    39fa:	683b      	ldr	r3, [r7, #0]
    39fc:	4413      	add	r3, r2
    39fe:	3308      	adds	r3, #8
    3a00:	2200      	movs	r2, #0
    3a02:	4619      	mov	r1, r3
    3a04:	6978      	ldr	r0, [r7, #20]
    3a06:	f7fc fcef 	bl	3e8 <m_realloc_maybe>
    3a0a:	60f8      	str	r0, [r7, #12]
            sizeof(mp_parse_chunk_t) + chunk->alloc,
            sizeof(mp_parse_chunk_t) + chunk->alloc + num_bytes, false);
        if (new_data == NULL) {
    3a0c:	68fb      	ldr	r3, [r7, #12]
    3a0e:	2b00      	cmp	r3, #0
    3a10:	d115      	bne.n	3a3e <parser_alloc+0x6e>
            // could not grow existing memory; shrink it to fit previous
            (void)m_renew_maybe(byte, chunk, sizeof(mp_parse_chunk_t) + chunk->alloc,
    3a12:	697b      	ldr	r3, [r7, #20]
    3a14:	685b      	ldr	r3, [r3, #4]
    3a16:	3308      	adds	r3, #8
    3a18:	2200      	movs	r2, #0
    3a1a:	4619      	mov	r1, r3
    3a1c:	6978      	ldr	r0, [r7, #20]
    3a1e:	f7fc fce3 	bl	3e8 <m_realloc_maybe>
                sizeof(mp_parse_chunk_t) + chunk->union_.used, false);
            chunk->alloc = chunk->union_.used;
    3a22:	697b      	ldr	r3, [r7, #20]
    3a24:	685a      	ldr	r2, [r3, #4]
    3a26:	697b      	ldr	r3, [r7, #20]
    3a28:	601a      	str	r2, [r3, #0]
            chunk->union_.next = parser->tree.chunk;
    3a2a:	687b      	ldr	r3, [r7, #4]
    3a2c:	6a1a      	ldr	r2, [r3, #32]
    3a2e:	697b      	ldr	r3, [r7, #20]
    3a30:	605a      	str	r2, [r3, #4]
            parser->tree.chunk = chunk;
    3a32:	687b      	ldr	r3, [r7, #4]
    3a34:	697a      	ldr	r2, [r7, #20]
    3a36:	621a      	str	r2, [r3, #32]
            chunk = NULL;
    3a38:	2300      	movs	r3, #0
    3a3a:	617b      	str	r3, [r7, #20]
    3a3c:	e005      	b.n	3a4a <parser_alloc+0x7a>
        } else {
            // could grow existing memory
            chunk->alloc += num_bytes;
    3a3e:	697b      	ldr	r3, [r7, #20]
    3a40:	681a      	ldr	r2, [r3, #0]
    3a42:	683b      	ldr	r3, [r7, #0]
    3a44:	441a      	add	r2, r3
    3a46:	697b      	ldr	r3, [r7, #20]
    3a48:	601a      	str	r2, [r3, #0]
        }
    }

    if (chunk == NULL) {
    3a4a:	697b      	ldr	r3, [r7, #20]
    3a4c:	2b00      	cmp	r3, #0
    3a4e:	d116      	bne.n	3a7e <parser_alloc+0xae>
        // no previous chunk, allocate a new chunk
        size_t alloc = MICROPY_ALLOC_PARSE_CHUNK_INIT;
    3a50:	2310      	movs	r3, #16
    3a52:	613b      	str	r3, [r7, #16]
        if (alloc < num_bytes) {
    3a54:	693a      	ldr	r2, [r7, #16]
    3a56:	683b      	ldr	r3, [r7, #0]
    3a58:	429a      	cmp	r2, r3
    3a5a:	d201      	bcs.n	3a60 <parser_alloc+0x90>
            alloc = num_bytes;
    3a5c:	683b      	ldr	r3, [r7, #0]
    3a5e:	613b      	str	r3, [r7, #16]
        }
        chunk = (mp_parse_chunk_t*)m_new(byte, sizeof(mp_parse_chunk_t) + alloc);
    3a60:	693b      	ldr	r3, [r7, #16]
    3a62:	3308      	adds	r3, #8
    3a64:	4618      	mov	r0, r3
    3a66:	f7fc fc59 	bl	31c <m_malloc>
    3a6a:	6178      	str	r0, [r7, #20]
        chunk->alloc = alloc;
    3a6c:	697b      	ldr	r3, [r7, #20]
    3a6e:	693a      	ldr	r2, [r7, #16]
    3a70:	601a      	str	r2, [r3, #0]
        chunk->union_.used = 0;
    3a72:	697b      	ldr	r3, [r7, #20]
    3a74:	2200      	movs	r2, #0
    3a76:	605a      	str	r2, [r3, #4]
        parser->cur_chunk = chunk;
    3a78:	687b      	ldr	r3, [r7, #4]
    3a7a:	697a      	ldr	r2, [r7, #20]
    3a7c:	625a      	str	r2, [r3, #36]	; 0x24
    }

    byte *ret = chunk->data + chunk->union_.used;
    3a7e:	697b      	ldr	r3, [r7, #20]
    3a80:	f103 0208 	add.w	r2, r3, #8
    3a84:	697b      	ldr	r3, [r7, #20]
    3a86:	685b      	ldr	r3, [r3, #4]
    3a88:	4413      	add	r3, r2
    3a8a:	60bb      	str	r3, [r7, #8]
    chunk->union_.used += num_bytes;
    3a8c:	697b      	ldr	r3, [r7, #20]
    3a8e:	685a      	ldr	r2, [r3, #4]
    3a90:	683b      	ldr	r3, [r7, #0]
    3a92:	441a      	add	r2, r3
    3a94:	697b      	ldr	r3, [r7, #20]
    3a96:	605a      	str	r2, [r3, #4]
    return ret;
    3a98:	68bb      	ldr	r3, [r7, #8]
}
    3a9a:	4618      	mov	r0, r3
    3a9c:	3718      	adds	r7, #24
    3a9e:	46bd      	mov	sp, r7
    3aa0:	bd80      	pop	{r7, pc}
    3aa2:	bf00      	nop

00003aa4 <push_rule>:

STATIC void push_rule(parser_t *parser, size_t src_line, uint8_t rule_id, size_t arg_i) {
    3aa4:	b580      	push	{r7, lr}
    3aa6:	b086      	sub	sp, #24
    3aa8:	af00      	add	r7, sp, #0
    3aaa:	60f8      	str	r0, [r7, #12]
    3aac:	60b9      	str	r1, [r7, #8]
    3aae:	603b      	str	r3, [r7, #0]
    3ab0:	4613      	mov	r3, r2
    3ab2:	71fb      	strb	r3, [r7, #7]
    if (parser->rule_stack_top >= parser->rule_stack_alloc) {
    3ab4:	68fb      	ldr	r3, [r7, #12]
    3ab6:	685a      	ldr	r2, [r3, #4]
    3ab8:	68fb      	ldr	r3, [r7, #12]
    3aba:	681b      	ldr	r3, [r3, #0]
    3abc:	429a      	cmp	r2, r3
    3abe:	d313      	bcc.n	3ae8 <push_rule+0x44>
        rule_stack_t *rs = m_renew(rule_stack_t, parser->rule_stack, parser->rule_stack_alloc, parser->rule_stack_alloc + MICROPY_ALLOC_PARSE_RULE_INC);
    3ac0:	68fb      	ldr	r3, [r7, #12]
    3ac2:	689a      	ldr	r2, [r3, #8]
    3ac4:	68fb      	ldr	r3, [r7, #12]
    3ac6:	681b      	ldr	r3, [r3, #0]
    3ac8:	3310      	adds	r3, #16
    3aca:	00db      	lsls	r3, r3, #3
    3acc:	4619      	mov	r1, r3
    3ace:	4610      	mov	r0, r2
    3ad0:	f7fc fc70 	bl	3b4 <m_realloc>
    3ad4:	6178      	str	r0, [r7, #20]
        parser->rule_stack = rs;
    3ad6:	68fb      	ldr	r3, [r7, #12]
    3ad8:	697a      	ldr	r2, [r7, #20]
    3ada:	609a      	str	r2, [r3, #8]
        parser->rule_stack_alloc += MICROPY_ALLOC_PARSE_RULE_INC;
    3adc:	68fb      	ldr	r3, [r7, #12]
    3ade:	681b      	ldr	r3, [r3, #0]
    3ae0:	f103 0210 	add.w	r2, r3, #16
    3ae4:	68fb      	ldr	r3, [r7, #12]
    3ae6:	601a      	str	r2, [r3, #0]
    }
    rule_stack_t *rs = &parser->rule_stack[parser->rule_stack_top++];
    3ae8:	68fb      	ldr	r3, [r7, #12]
    3aea:	689a      	ldr	r2, [r3, #8]
    3aec:	68fb      	ldr	r3, [r7, #12]
    3aee:	685b      	ldr	r3, [r3, #4]
    3af0:	1c58      	adds	r0, r3, #1
    3af2:	68f9      	ldr	r1, [r7, #12]
    3af4:	6048      	str	r0, [r1, #4]
    3af6:	00db      	lsls	r3, r3, #3
    3af8:	4413      	add	r3, r2
    3afa:	613b      	str	r3, [r7, #16]
    rs->src_line = src_line;
    3afc:	68bb      	ldr	r3, [r7, #8]
    3afe:	f023 417f 	bic.w	r1, r3, #4278190080	; 0xff000000
    3b02:	693a      	ldr	r2, [r7, #16]
    3b04:	6813      	ldr	r3, [r2, #0]
    3b06:	f361 0317 	bfi	r3, r1, #0, #24
    3b0a:	6013      	str	r3, [r2, #0]
    rs->rule_id = rule_id;
    3b0c:	693b      	ldr	r3, [r7, #16]
    3b0e:	79fa      	ldrb	r2, [r7, #7]
    3b10:	70da      	strb	r2, [r3, #3]
    rs->arg_i = arg_i;
    3b12:	693b      	ldr	r3, [r7, #16]
    3b14:	683a      	ldr	r2, [r7, #0]
    3b16:	605a      	str	r2, [r3, #4]
}
    3b18:	bf00      	nop
    3b1a:	3718      	adds	r7, #24
    3b1c:	46bd      	mov	sp, r7
    3b1e:	bd80      	pop	{r7, pc}

00003b20 <push_rule_from_arg>:

STATIC void push_rule_from_arg(parser_t *parser, size_t arg) {
    3b20:	b580      	push	{r7, lr}
    3b22:	b084      	sub	sp, #16
    3b24:	af00      	add	r7, sp, #0
    3b26:	6078      	str	r0, [r7, #4]
    3b28:	6039      	str	r1, [r7, #0]
    assert((arg & RULE_ARG_KIND_MASK) == RULE_ARG_RULE || (arg & RULE_ARG_KIND_MASK) == RULE_ARG_OPT_RULE);
    3b2a:	683b      	ldr	r3, [r7, #0]
    3b2c:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
    3b30:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
    3b34:	d00c      	beq.n	3b50 <push_rule_from_arg+0x30>
    3b36:	683b      	ldr	r3, [r7, #0]
    3b38:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
    3b3c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
    3b40:	d006      	beq.n	3b50 <push_rule_from_arg+0x30>
    3b42:	4b0c      	ldr	r3, [pc, #48]	; (3b74 <push_rule_from_arg+0x54>)
    3b44:	4a0c      	ldr	r2, [pc, #48]	; (3b78 <push_rule_from_arg+0x58>)
    3b46:	f44f 7199 	mov.w	r1, #306	; 0x132
    3b4a:	480c      	ldr	r0, [pc, #48]	; (3b7c <push_rule_from_arg+0x5c>)
    3b4c:	f017 fdc0 	bl	1b6d0 <__assert_func>
    size_t rule_id = arg & RULE_ARG_ARG_MASK;
    3b50:	683b      	ldr	r3, [r7, #0]
    3b52:	f3c3 030b 	ubfx	r3, r3, #0, #12
    3b56:	60fb      	str	r3, [r7, #12]
    push_rule(parser, parser->lexer->tok_line, rule_id, 0);
    3b58:	687b      	ldr	r3, [r7, #4]
    3b5a:	699b      	ldr	r3, [r3, #24]
    3b5c:	6b99      	ldr	r1, [r3, #56]	; 0x38
    3b5e:	68fb      	ldr	r3, [r7, #12]
    3b60:	b2da      	uxtb	r2, r3
    3b62:	2300      	movs	r3, #0
    3b64:	6878      	ldr	r0, [r7, #4]
    3b66:	f7ff ff9d 	bl	3aa4 <push_rule>
}
    3b6a:	bf00      	nop
    3b6c:	3710      	adds	r7, #16
    3b6e:	46bd      	mov	sp, r7
    3b70:	bd80      	pop	{r7, pc}
    3b72:	bf00      	nop
    3b74:	0001ff20 	.word	0x0001ff20
    3b78:	000200f8 	.word	0x000200f8
    3b7c:	0001ff80 	.word	0x0001ff80

00003b80 <pop_rule>:

STATIC uint8_t pop_rule(parser_t *parser, size_t *arg_i, size_t *src_line) {
    3b80:	b480      	push	{r7}
    3b82:	b087      	sub	sp, #28
    3b84:	af00      	add	r7, sp, #0
    3b86:	60f8      	str	r0, [r7, #12]
    3b88:	60b9      	str	r1, [r7, #8]
    3b8a:	607a      	str	r2, [r7, #4]
    parser->rule_stack_top -= 1;
    3b8c:	68fb      	ldr	r3, [r7, #12]
    3b8e:	685b      	ldr	r3, [r3, #4]
    3b90:	1e5a      	subs	r2, r3, #1
    3b92:	68fb      	ldr	r3, [r7, #12]
    3b94:	605a      	str	r2, [r3, #4]
    uint8_t rule_id = parser->rule_stack[parser->rule_stack_top].rule_id;
    3b96:	68fb      	ldr	r3, [r7, #12]
    3b98:	689a      	ldr	r2, [r3, #8]
    3b9a:	68fb      	ldr	r3, [r7, #12]
    3b9c:	685b      	ldr	r3, [r3, #4]
    3b9e:	00db      	lsls	r3, r3, #3
    3ba0:	4413      	add	r3, r2
    3ba2:	78db      	ldrb	r3, [r3, #3]
    3ba4:	75fb      	strb	r3, [r7, #23]
    *arg_i = parser->rule_stack[parser->rule_stack_top].arg_i;
    3ba6:	68fb      	ldr	r3, [r7, #12]
    3ba8:	689a      	ldr	r2, [r3, #8]
    3baa:	68fb      	ldr	r3, [r7, #12]
    3bac:	685b      	ldr	r3, [r3, #4]
    3bae:	00db      	lsls	r3, r3, #3
    3bb0:	4413      	add	r3, r2
    3bb2:	685a      	ldr	r2, [r3, #4]
    3bb4:	68bb      	ldr	r3, [r7, #8]
    3bb6:	601a      	str	r2, [r3, #0]
    *src_line = parser->rule_stack[parser->rule_stack_top].src_line;
    3bb8:	68fb      	ldr	r3, [r7, #12]
    3bba:	689a      	ldr	r2, [r3, #8]
    3bbc:	68fb      	ldr	r3, [r7, #12]
    3bbe:	685b      	ldr	r3, [r3, #4]
    3bc0:	00db      	lsls	r3, r3, #3
    3bc2:	4413      	add	r3, r2
    3bc4:	681b      	ldr	r3, [r3, #0]
    3bc6:	f3c3 0317 	ubfx	r3, r3, #0, #24
    3bca:	461a      	mov	r2, r3
    3bcc:	687b      	ldr	r3, [r7, #4]
    3bce:	601a      	str	r2, [r3, #0]
    return rule_id;
    3bd0:	7dfb      	ldrb	r3, [r7, #23]
}
    3bd2:	4618      	mov	r0, r3
    3bd4:	371c      	adds	r7, #28
    3bd6:	46bd      	mov	sp, r7
    3bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
    3bdc:	4770      	bx	lr
    3bde:	bf00      	nop

00003be0 <mp_parse_node_is_const_false>:

bool mp_parse_node_is_const_false(mp_parse_node_t pn) {
    3be0:	b480      	push	{r7}
    3be2:	b083      	sub	sp, #12
    3be4:	af00      	add	r7, sp, #0
    3be6:	6078      	str	r0, [r7, #4]
    return MP_PARSE_NODE_IS_TOKEN_KIND(pn, MP_TOKEN_KW_FALSE)
        || (MP_PARSE_NODE_IS_SMALL_INT(pn) && MP_PARSE_NODE_LEAF_SMALL_INT(pn) == 0);
    3be8:	687b      	ldr	r3, [r7, #4]
    3bea:	2bde      	cmp	r3, #222	; 0xde
    3bec:	d008      	beq.n	3c00 <mp_parse_node_is_const_false+0x20>
    3bee:	687b      	ldr	r3, [r7, #4]
    3bf0:	f003 0301 	and.w	r3, r3, #1
    3bf4:	2b00      	cmp	r3, #0
    3bf6:	d005      	beq.n	3c04 <mp_parse_node_is_const_false+0x24>
    3bf8:	687b      	ldr	r3, [r7, #4]
    3bfa:	105b      	asrs	r3, r3, #1
    3bfc:	2b00      	cmp	r3, #0
    3bfe:	d101      	bne.n	3c04 <mp_parse_node_is_const_false+0x24>
    3c00:	2301      	movs	r3, #1
    3c02:	e000      	b.n	3c06 <mp_parse_node_is_const_false+0x26>
    3c04:	2300      	movs	r3, #0
    return MP_PARSE_NODE_IS_TOKEN_KIND(pn, MP_TOKEN_KW_FALSE)
    3c06:	f003 0301 	and.w	r3, r3, #1
    3c0a:	b2db      	uxtb	r3, r3
}
    3c0c:	4618      	mov	r0, r3
    3c0e:	370c      	adds	r7, #12
    3c10:	46bd      	mov	sp, r7
    3c12:	f85d 7b04 	ldr.w	r7, [sp], #4
    3c16:	4770      	bx	lr

00003c18 <mp_parse_node_is_const_true>:

bool mp_parse_node_is_const_true(mp_parse_node_t pn) {
    3c18:	b480      	push	{r7}
    3c1a:	b083      	sub	sp, #12
    3c1c:	af00      	add	r7, sp, #0
    3c1e:	6078      	str	r0, [r7, #4]
    return MP_PARSE_NODE_IS_TOKEN_KIND(pn, MP_TOKEN_KW_TRUE)
        || (MP_PARSE_NODE_IS_SMALL_INT(pn) && MP_PARSE_NODE_LEAF_SMALL_INT(pn) != 0);
    3c20:	687b      	ldr	r3, [r7, #4]
    3c22:	2bfe      	cmp	r3, #254	; 0xfe
    3c24:	d008      	beq.n	3c38 <mp_parse_node_is_const_true+0x20>
    3c26:	687b      	ldr	r3, [r7, #4]
    3c28:	f003 0301 	and.w	r3, r3, #1
    3c2c:	2b00      	cmp	r3, #0
    3c2e:	d005      	beq.n	3c3c <mp_parse_node_is_const_true+0x24>
    3c30:	687b      	ldr	r3, [r7, #4]
    3c32:	105b      	asrs	r3, r3, #1
    3c34:	2b00      	cmp	r3, #0
    3c36:	d001      	beq.n	3c3c <mp_parse_node_is_const_true+0x24>
    3c38:	2301      	movs	r3, #1
    3c3a:	e000      	b.n	3c3e <mp_parse_node_is_const_true+0x26>
    3c3c:	2300      	movs	r3, #0
    return MP_PARSE_NODE_IS_TOKEN_KIND(pn, MP_TOKEN_KW_TRUE)
    3c3e:	f003 0301 	and.w	r3, r3, #1
    3c42:	b2db      	uxtb	r3, r3
}
    3c44:	4618      	mov	r0, r3
    3c46:	370c      	adds	r7, #12
    3c48:	46bd      	mov	sp, r7
    3c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
    3c4e:	4770      	bx	lr

00003c50 <mp_parse_node_get_int_maybe>:

bool mp_parse_node_get_int_maybe(mp_parse_node_t pn, mp_obj_t *o) {
    3c50:	b580      	push	{r7, lr}
    3c52:	b084      	sub	sp, #16
    3c54:	af00      	add	r7, sp, #0
    3c56:	6078      	str	r0, [r7, #4]
    3c58:	6039      	str	r1, [r7, #0]
    if (MP_PARSE_NODE_IS_SMALL_INT(pn)) {
    3c5a:	687b      	ldr	r3, [r7, #4]
    3c5c:	f003 0301 	and.w	r3, r3, #1
    3c60:	2b00      	cmp	r3, #0
    3c62:	d007      	beq.n	3c74 <mp_parse_node_get_int_maybe+0x24>
        *o = MP_OBJ_NEW_SMALL_INT(MP_PARSE_NODE_LEAF_SMALL_INT(pn));
    3c64:	687b      	ldr	r3, [r7, #4]
    3c66:	f043 0301 	orr.w	r3, r3, #1
    3c6a:	461a      	mov	r2, r3
    3c6c:	683b      	ldr	r3, [r7, #0]
    3c6e:	601a      	str	r2, [r3, #0]
        return true;
    3c70:	2301      	movs	r3, #1
    3c72:	e031      	b.n	3cd8 <mp_parse_node_get_int_maybe+0x88>
    } else if (MP_PARSE_NODE_IS_STRUCT_KIND(pn, RULE_const_object)) {
    3c74:	687b      	ldr	r3, [r7, #4]
    3c76:	2b00      	cmp	r3, #0
    3c78:	d02d      	beq.n	3cd6 <mp_parse_node_get_int_maybe+0x86>
    3c7a:	687b      	ldr	r3, [r7, #4]
    3c7c:	f003 0303 	and.w	r3, r3, #3
    3c80:	2b00      	cmp	r3, #0
    3c82:	d128      	bne.n	3cd6 <mp_parse_node_get_int_maybe+0x86>
    3c84:	687b      	ldr	r3, [r7, #4]
    3c86:	685b      	ldr	r3, [r3, #4]
    3c88:	b2db      	uxtb	r3, r3
    3c8a:	2b35      	cmp	r3, #53	; 0x35
    3c8c:	d123      	bne.n	3cd6 <mp_parse_node_get_int_maybe+0x86>
        mp_parse_node_struct_t *pns = (mp_parse_node_struct_t*)pn;
    3c8e:	687b      	ldr	r3, [r7, #4]
    3c90:	60fb      	str	r3, [r7, #12]
        #if MICROPY_OBJ_REPR == MICROPY_OBJ_REPR_D
        // nodes are 32-bit pointers, but need to extract 64-bit object
        *o = (uint64_t)pns->nodes[0] | ((uint64_t)pns->nodes[1] << 32);
        #else
        *o = (mp_obj_t)pns->nodes[0];
    3c92:	68fb      	ldr	r3, [r7, #12]
    3c94:	689b      	ldr	r3, [r3, #8]
    3c96:	461a      	mov	r2, r3
    3c98:	683b      	ldr	r3, [r7, #0]
    3c9a:	601a      	str	r2, [r3, #0]
        #endif
        return MP_OBJ_IS_INT(*o);
    3c9c:	683b      	ldr	r3, [r7, #0]
    3c9e:	681b      	ldr	r3, [r3, #0]
    3ca0:	4618      	mov	r0, r3
    3ca2:	f7ff fe33 	bl	390c <MP_OBJ_IS_SMALL_INT>
    3ca6:	4603      	mov	r3, r0
    3ca8:	2b00      	cmp	r3, #0
    3caa:	d10d      	bne.n	3cc8 <mp_parse_node_get_int_maybe+0x78>
    3cac:	683b      	ldr	r3, [r7, #0]
    3cae:	681b      	ldr	r3, [r3, #0]
    3cb0:	4618      	mov	r0, r3
    3cb2:	f7ff fe3d 	bl	3930 <MP_OBJ_IS_OBJ>
    3cb6:	4603      	mov	r3, r0
    3cb8:	2b00      	cmp	r3, #0
    3cba:	d007      	beq.n	3ccc <mp_parse_node_get_int_maybe+0x7c>
    3cbc:	683b      	ldr	r3, [r7, #0]
    3cbe:	681b      	ldr	r3, [r3, #0]
    3cc0:	681b      	ldr	r3, [r3, #0]
    3cc2:	4a07      	ldr	r2, [pc, #28]	; (3ce0 <mp_parse_node_get_int_maybe+0x90>)
    3cc4:	4293      	cmp	r3, r2
    3cc6:	d101      	bne.n	3ccc <mp_parse_node_get_int_maybe+0x7c>
    3cc8:	2301      	movs	r3, #1
    3cca:	e000      	b.n	3cce <mp_parse_node_get_int_maybe+0x7e>
    3ccc:	2300      	movs	r3, #0
    3cce:	f003 0301 	and.w	r3, r3, #1
    3cd2:	b2db      	uxtb	r3, r3
    3cd4:	e000      	b.n	3cd8 <mp_parse_node_get_int_maybe+0x88>
    } else {
        return false;
    3cd6:	2300      	movs	r3, #0
    }
}
    3cd8:	4618      	mov	r0, r3
    3cda:	3710      	adds	r7, #16
    3cdc:	46bd      	mov	sp, r7
    3cde:	bd80      	pop	{r7, pc}
    3ce0:	00022ea8 	.word	0x00022ea8

00003ce4 <mp_parse_node_extract_list>:

int mp_parse_node_extract_list(mp_parse_node_t *pn, size_t pn_kind, mp_parse_node_t **nodes) {
    3ce4:	b480      	push	{r7}
    3ce6:	b087      	sub	sp, #28
    3ce8:	af00      	add	r7, sp, #0
    3cea:	60f8      	str	r0, [r7, #12]
    3cec:	60b9      	str	r1, [r7, #8]
    3cee:	607a      	str	r2, [r7, #4]
    if (MP_PARSE_NODE_IS_NULL(*pn)) {
    3cf0:	68fb      	ldr	r3, [r7, #12]
    3cf2:	681b      	ldr	r3, [r3, #0]
    3cf4:	2b00      	cmp	r3, #0
    3cf6:	d104      	bne.n	3d02 <mp_parse_node_extract_list+0x1e>
        *nodes = NULL;
    3cf8:	687b      	ldr	r3, [r7, #4]
    3cfa:	2200      	movs	r2, #0
    3cfc:	601a      	str	r2, [r3, #0]
        return 0;
    3cfe:	2300      	movs	r3, #0
    3d00:	e020      	b.n	3d44 <mp_parse_node_extract_list+0x60>
    } else if (MP_PARSE_NODE_IS_LEAF(*pn)) {
    3d02:	68fb      	ldr	r3, [r7, #12]
    3d04:	681b      	ldr	r3, [r3, #0]
    3d06:	f003 0303 	and.w	r3, r3, #3
    3d0a:	2b00      	cmp	r3, #0
    3d0c:	d004      	beq.n	3d18 <mp_parse_node_extract_list+0x34>
        *nodes = pn;
    3d0e:	687b      	ldr	r3, [r7, #4]
    3d10:	68fa      	ldr	r2, [r7, #12]
    3d12:	601a      	str	r2, [r3, #0]
        return 1;
    3d14:	2301      	movs	r3, #1
    3d16:	e015      	b.n	3d44 <mp_parse_node_extract_list+0x60>
    } else {
        mp_parse_node_struct_t *pns = (mp_parse_node_struct_t*)(*pn);
    3d18:	68fb      	ldr	r3, [r7, #12]
    3d1a:	681b      	ldr	r3, [r3, #0]
    3d1c:	617b      	str	r3, [r7, #20]
        if (MP_PARSE_NODE_STRUCT_KIND(pns) != pn_kind) {
    3d1e:	697b      	ldr	r3, [r7, #20]
    3d20:	685b      	ldr	r3, [r3, #4]
    3d22:	b2da      	uxtb	r2, r3
    3d24:	68bb      	ldr	r3, [r7, #8]
    3d26:	429a      	cmp	r2, r3
    3d28:	d004      	beq.n	3d34 <mp_parse_node_extract_list+0x50>
            *nodes = pn;
    3d2a:	687b      	ldr	r3, [r7, #4]
    3d2c:	68fa      	ldr	r2, [r7, #12]
    3d2e:	601a      	str	r2, [r3, #0]
            return 1;
    3d30:	2301      	movs	r3, #1
    3d32:	e007      	b.n	3d44 <mp_parse_node_extract_list+0x60>
        } else {
            *nodes = pns->nodes;
    3d34:	697b      	ldr	r3, [r7, #20]
    3d36:	f103 0208 	add.w	r2, r3, #8
    3d3a:	687b      	ldr	r3, [r7, #4]
    3d3c:	601a      	str	r2, [r3, #0]
            return MP_PARSE_NODE_STRUCT_NUM_NODES(pns);
    3d3e:	697b      	ldr	r3, [r7, #20]
    3d40:	685b      	ldr	r3, [r3, #4]
    3d42:	0a1b      	lsrs	r3, r3, #8
        }
    }
}
    3d44:	4618      	mov	r0, r3
    3d46:	371c      	adds	r7, #28
    3d48:	46bd      	mov	sp, r7
    3d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
    3d4e:	4770      	bx	lr

00003d50 <pop_result>:
        mp_parse_node_print(parser->result_stack[i], 0);
    }
}
*/

STATIC mp_parse_node_t pop_result(parser_t *parser) {
    3d50:	b580      	push	{r7, lr}
    3d52:	b082      	sub	sp, #8
    3d54:	af00      	add	r7, sp, #0
    3d56:	6078      	str	r0, [r7, #4]
    assert(parser->result_stack_top > 0);
    3d58:	687b      	ldr	r3, [r7, #4]
    3d5a:	691b      	ldr	r3, [r3, #16]
    3d5c:	2b00      	cmp	r3, #0
    3d5e:	d106      	bne.n	3d6e <pop_result+0x1e>
    3d60:	4b0b      	ldr	r3, [pc, #44]	; (3d90 <pop_result+0x40>)
    3d62:	4a0c      	ldr	r2, [pc, #48]	; (3d94 <pop_result+0x44>)
    3d64:	f240 11a9 	movw	r1, #425	; 0x1a9
    3d68:	480b      	ldr	r0, [pc, #44]	; (3d98 <pop_result+0x48>)
    3d6a:	f017 fcb1 	bl	1b6d0 <__assert_func>
    return parser->result_stack[--parser->result_stack_top];
    3d6e:	687b      	ldr	r3, [r7, #4]
    3d70:	695a      	ldr	r2, [r3, #20]
    3d72:	687b      	ldr	r3, [r7, #4]
    3d74:	691b      	ldr	r3, [r3, #16]
    3d76:	1e59      	subs	r1, r3, #1
    3d78:	687b      	ldr	r3, [r7, #4]
    3d7a:	6119      	str	r1, [r3, #16]
    3d7c:	687b      	ldr	r3, [r7, #4]
    3d7e:	691b      	ldr	r3, [r3, #16]
    3d80:	009b      	lsls	r3, r3, #2
    3d82:	4413      	add	r3, r2
    3d84:	681b      	ldr	r3, [r3, #0]
}
    3d86:	4618      	mov	r0, r3
    3d88:	3708      	adds	r7, #8
    3d8a:	46bd      	mov	sp, r7
    3d8c:	bd80      	pop	{r7, pc}
    3d8e:	bf00      	nop
    3d90:	0001ff94 	.word	0x0001ff94
    3d94:	0002010c 	.word	0x0002010c
    3d98:	0001ff80 	.word	0x0001ff80

00003d9c <peek_result>:

STATIC mp_parse_node_t peek_result(parser_t *parser, size_t pos) {
    3d9c:	b580      	push	{r7, lr}
    3d9e:	b082      	sub	sp, #8
    3da0:	af00      	add	r7, sp, #0
    3da2:	6078      	str	r0, [r7, #4]
    3da4:	6039      	str	r1, [r7, #0]
    assert(parser->result_stack_top > pos);
    3da6:	687b      	ldr	r3, [r7, #4]
    3da8:	691a      	ldr	r2, [r3, #16]
    3daa:	683b      	ldr	r3, [r7, #0]
    3dac:	429a      	cmp	r2, r3
    3dae:	d806      	bhi.n	3dbe <peek_result+0x22>
    3db0:	4b0b      	ldr	r3, [pc, #44]	; (3de0 <peek_result+0x44>)
    3db2:	4a0c      	ldr	r2, [pc, #48]	; (3de4 <peek_result+0x48>)
    3db4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
    3db8:	480b      	ldr	r0, [pc, #44]	; (3de8 <peek_result+0x4c>)
    3dba:	f017 fc89 	bl	1b6d0 <__assert_func>
    return parser->result_stack[parser->result_stack_top - 1 - pos];
    3dbe:	687b      	ldr	r3, [r7, #4]
    3dc0:	695a      	ldr	r2, [r3, #20]
    3dc2:	687b      	ldr	r3, [r7, #4]
    3dc4:	6919      	ldr	r1, [r3, #16]
    3dc6:	683b      	ldr	r3, [r7, #0]
    3dc8:	1acb      	subs	r3, r1, r3
    3dca:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    3dce:	3b01      	subs	r3, #1
    3dd0:	009b      	lsls	r3, r3, #2
    3dd2:	4413      	add	r3, r2
    3dd4:	681b      	ldr	r3, [r3, #0]
}
    3dd6:	4618      	mov	r0, r3
    3dd8:	3708      	adds	r7, #8
    3dda:	46bd      	mov	sp, r7
    3ddc:	bd80      	pop	{r7, pc}
    3dde:	bf00      	nop
    3de0:	0001ffb4 	.word	0x0001ffb4
    3de4:	00020118 	.word	0x00020118
    3de8:	0001ff80 	.word	0x0001ff80

00003dec <push_result_node>:

STATIC void push_result_node(parser_t *parser, mp_parse_node_t pn) {
    3dec:	b580      	push	{r7, lr}
    3dee:	b084      	sub	sp, #16
    3df0:	af00      	add	r7, sp, #0
    3df2:	6078      	str	r0, [r7, #4]
    3df4:	6039      	str	r1, [r7, #0]
    if (parser->result_stack_top >= parser->result_stack_alloc) {
    3df6:	687b      	ldr	r3, [r7, #4]
    3df8:	691a      	ldr	r2, [r3, #16]
    3dfa:	687b      	ldr	r3, [r7, #4]
    3dfc:	68db      	ldr	r3, [r3, #12]
    3dfe:	429a      	cmp	r2, r3
    3e00:	d313      	bcc.n	3e2a <push_result_node+0x3e>
        mp_parse_node_t *stack = m_renew(mp_parse_node_t, parser->result_stack, parser->result_stack_alloc, parser->result_stack_alloc + MICROPY_ALLOC_PARSE_RESULT_INC);
    3e02:	687b      	ldr	r3, [r7, #4]
    3e04:	695a      	ldr	r2, [r3, #20]
    3e06:	687b      	ldr	r3, [r7, #4]
    3e08:	68db      	ldr	r3, [r3, #12]
    3e0a:	3310      	adds	r3, #16
    3e0c:	009b      	lsls	r3, r3, #2
    3e0e:	4619      	mov	r1, r3
    3e10:	4610      	mov	r0, r2
    3e12:	f7fc facf 	bl	3b4 <m_realloc>
    3e16:	60f8      	str	r0, [r7, #12]
        parser->result_stack = stack;
    3e18:	687b      	ldr	r3, [r7, #4]
    3e1a:	68fa      	ldr	r2, [r7, #12]
    3e1c:	615a      	str	r2, [r3, #20]
        parser->result_stack_alloc += MICROPY_ALLOC_PARSE_RESULT_INC;
    3e1e:	687b      	ldr	r3, [r7, #4]
    3e20:	68db      	ldr	r3, [r3, #12]
    3e22:	f103 0210 	add.w	r2, r3, #16
    3e26:	687b      	ldr	r3, [r7, #4]
    3e28:	60da      	str	r2, [r3, #12]
    }
    parser->result_stack[parser->result_stack_top++] = pn;
    3e2a:	687b      	ldr	r3, [r7, #4]
    3e2c:	695a      	ldr	r2, [r3, #20]
    3e2e:	687b      	ldr	r3, [r7, #4]
    3e30:	691b      	ldr	r3, [r3, #16]
    3e32:	1c58      	adds	r0, r3, #1
    3e34:	6879      	ldr	r1, [r7, #4]
    3e36:	6108      	str	r0, [r1, #16]
    3e38:	009b      	lsls	r3, r3, #2
    3e3a:	4413      	add	r3, r2
    3e3c:	683a      	ldr	r2, [r7, #0]
    3e3e:	601a      	str	r2, [r3, #0]
}
    3e40:	bf00      	nop
    3e42:	3710      	adds	r7, #16
    3e44:	46bd      	mov	sp, r7
    3e46:	bd80      	pop	{r7, pc}

00003e48 <make_node_const_object>:

STATIC mp_parse_node_t make_node_const_object(parser_t *parser, size_t src_line, mp_obj_t obj) {
    3e48:	b580      	push	{r7, lr}
    3e4a:	b086      	sub	sp, #24
    3e4c:	af00      	add	r7, sp, #0
    3e4e:	60f8      	str	r0, [r7, #12]
    3e50:	60b9      	str	r1, [r7, #8]
    3e52:	607a      	str	r2, [r7, #4]
    mp_parse_node_struct_t *pn = parser_alloc(parser, sizeof(mp_parse_node_struct_t) + sizeof(mp_obj_t));
    3e54:	210c      	movs	r1, #12
    3e56:	68f8      	ldr	r0, [r7, #12]
    3e58:	f7ff fdba 	bl	39d0 <parser_alloc>
    3e5c:	6178      	str	r0, [r7, #20]
    pn->source_line = src_line;
    3e5e:	697b      	ldr	r3, [r7, #20]
    3e60:	68ba      	ldr	r2, [r7, #8]
    3e62:	601a      	str	r2, [r3, #0]
    // nodes are 32-bit pointers, but need to store 64-bit object
    pn->kind_num_nodes = RULE_const_object | (2 << 8);
    pn->nodes[0] = (uint64_t)obj;
    pn->nodes[1] = (uint64_t)obj >> 32;
    #else
    pn->kind_num_nodes = RULE_const_object | (1 << 8);
    3e64:	697b      	ldr	r3, [r7, #20]
    3e66:	f240 1235 	movw	r2, #309	; 0x135
    3e6a:	605a      	str	r2, [r3, #4]
    pn->nodes[0] = (uintptr_t)obj;
    3e6c:	687a      	ldr	r2, [r7, #4]
    3e6e:	697b      	ldr	r3, [r7, #20]
    3e70:	609a      	str	r2, [r3, #8]
    #endif
    return (mp_parse_node_t)pn;
    3e72:	697b      	ldr	r3, [r7, #20]
}
    3e74:	4618      	mov	r0, r3
    3e76:	3718      	adds	r7, #24
    3e78:	46bd      	mov	sp, r7
    3e7a:	bd80      	pop	{r7, pc}

00003e7c <mp_parse_node_new_small_int_checked>:

STATIC mp_parse_node_t mp_parse_node_new_small_int_checked(parser_t *parser, mp_obj_t o_val) {
    3e7c:	b580      	push	{r7, lr}
    3e7e:	b084      	sub	sp, #16
    3e80:	af00      	add	r7, sp, #0
    3e82:	6078      	str	r0, [r7, #4]
    3e84:	6039      	str	r1, [r7, #0]
    (void)parser;
    mp_int_t val = MP_OBJ_SMALL_INT_VALUE(o_val);
    3e86:	683b      	ldr	r3, [r7, #0]
    3e88:	105b      	asrs	r3, r3, #1
    3e8a:	60fb      	str	r3, [r7, #12]
    // A parse node is only 32-bits and the small-int value must fit in 31-bits
    if (((val ^ (val << 1)) & 0xffffffff80000000) != 0) {
        return make_node_const_object(parser, 0, o_val);
    }
    #endif
    return mp_parse_node_new_small_int(val);
    3e8c:	68f8      	ldr	r0, [r7, #12]
    3e8e:	f7ff fd61 	bl	3954 <mp_parse_node_new_small_int>
    3e92:	4603      	mov	r3, r0
}
    3e94:	4618      	mov	r0, r3
    3e96:	3710      	adds	r7, #16
    3e98:	46bd      	mov	sp, r7
    3e9a:	bd80      	pop	{r7, pc}

00003e9c <push_result_token>:

STATIC void push_result_token(parser_t *parser, uint8_t rule_id) {
    3e9c:	b580      	push	{r7, lr}
    3e9e:	b08c      	sub	sp, #48	; 0x30
    3ea0:	af02      	add	r7, sp, #8
    3ea2:	6078      	str	r0, [r7, #4]
    3ea4:	460b      	mov	r3, r1
    3ea6:	70fb      	strb	r3, [r7, #3]
    mp_parse_node_t pn;
    mp_lexer_t *lex = parser->lexer;
    3ea8:	687b      	ldr	r3, [r7, #4]
    3eaa:	699b      	ldr	r3, [r3, #24]
    3eac:	61fb      	str	r3, [r7, #28]
    if (lex->tok_kind == MP_TOKEN_NAME) {
    3eae:	69fb      	ldr	r3, [r7, #28]
    3eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    3eb2:	2b07      	cmp	r3, #7
    3eb4:	d10f      	bne.n	3ed6 <push_result_token+0x3a>
        qstr id = qstr_from_strn(lex->vstr.buf, lex->vstr.len);
    3eb6:	69fb      	ldr	r3, [r7, #28]
    3eb8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    3eba:	69fb      	ldr	r3, [r7, #28]
    3ebc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    3ebe:	4619      	mov	r1, r3
    3ec0:	4610      	mov	r0, r2
    3ec2:	f7fd f977 	bl	11b4 <qstr_from_strn>
    3ec6:	61b8      	str	r0, [r7, #24]
        } else {
            pn = mp_parse_node_new_leaf(MP_PARSE_NODE_ID, id);
        }
        #else
        (void)rule_id;
        pn = mp_parse_node_new_leaf(MP_PARSE_NODE_ID, id);
    3ec8:	69bb      	ldr	r3, [r7, #24]
    3eca:	4619      	mov	r1, r3
    3ecc:	2002      	movs	r0, #2
    3ece:	f7ff fd4f 	bl	3970 <mp_parse_node_new_leaf>
    3ed2:	6278      	str	r0, [r7, #36]	; 0x24
    3ed4:	e08a      	b.n	3fec <push_result_token+0x150>
        #endif
    } else if (lex->tok_kind == MP_TOKEN_INTEGER) {
    3ed6:	69fb      	ldr	r3, [r7, #28]
    3ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    3eda:	2b08      	cmp	r3, #8
    3edc:	d11d      	bne.n	3f1a <push_result_token+0x7e>
        mp_obj_t o = mp_parse_num_integer(lex->vstr.buf, lex->vstr.len, 0, lex);
    3ede:	69fb      	ldr	r3, [r7, #28]
    3ee0:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
    3ee2:	69fb      	ldr	r3, [r7, #28]
    3ee4:	6c99      	ldr	r1, [r3, #72]	; 0x48
    3ee6:	69fb      	ldr	r3, [r7, #28]
    3ee8:	2200      	movs	r2, #0
    3eea:	f007 f99f 	bl	b22c <mp_parse_num_integer>
    3eee:	6178      	str	r0, [r7, #20]
        if (MP_OBJ_IS_SMALL_INT(o)) {
    3ef0:	6978      	ldr	r0, [r7, #20]
    3ef2:	f7ff fd0b 	bl	390c <MP_OBJ_IS_SMALL_INT>
    3ef6:	4603      	mov	r3, r0
    3ef8:	2b00      	cmp	r3, #0
    3efa:	d005      	beq.n	3f08 <push_result_token+0x6c>
            pn = mp_parse_node_new_small_int_checked(parser, o);
    3efc:	6979      	ldr	r1, [r7, #20]
    3efe:	6878      	ldr	r0, [r7, #4]
    3f00:	f7ff ffbc 	bl	3e7c <mp_parse_node_new_small_int_checked>
    3f04:	6278      	str	r0, [r7, #36]	; 0x24
    3f06:	e071      	b.n	3fec <push_result_token+0x150>
        } else {
            pn = make_node_const_object(parser, lex->tok_line, o);
    3f08:	69fb      	ldr	r3, [r7, #28]
    3f0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    3f0c:	697a      	ldr	r2, [r7, #20]
    3f0e:	4619      	mov	r1, r3
    3f10:	6878      	ldr	r0, [r7, #4]
    3f12:	f7ff ff99 	bl	3e48 <make_node_const_object>
    3f16:	6278      	str	r0, [r7, #36]	; 0x24
    3f18:	e068      	b.n	3fec <push_result_token+0x150>
        }
    } else if (lex->tok_kind == MP_TOKEN_FLOAT_OR_IMAG) {
    3f1a:	69fb      	ldr	r3, [r7, #28]
    3f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    3f1e:	2b09      	cmp	r3, #9
    3f20:	d113      	bne.n	3f4a <push_result_token+0xae>
        mp_obj_t o = mp_parse_num_decimal(lex->vstr.buf, lex->vstr.len, true, false, lex);
    3f22:	69fb      	ldr	r3, [r7, #28]
    3f24:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
    3f26:	69fb      	ldr	r3, [r7, #28]
    3f28:	6c99      	ldr	r1, [r3, #72]	; 0x48
    3f2a:	69fb      	ldr	r3, [r7, #28]
    3f2c:	9300      	str	r3, [sp, #0]
    3f2e:	2300      	movs	r3, #0
    3f30:	2201      	movs	r2, #1
    3f32:	f007 fa5d 	bl	b3f0 <mp_parse_num_decimal>
    3f36:	6138      	str	r0, [r7, #16]
        pn = make_node_const_object(parser, lex->tok_line, o);
    3f38:	69fb      	ldr	r3, [r7, #28]
    3f3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    3f3c:	693a      	ldr	r2, [r7, #16]
    3f3e:	4619      	mov	r1, r3
    3f40:	6878      	ldr	r0, [r7, #4]
    3f42:	f7ff ff81 	bl	3e48 <make_node_const_object>
    3f46:	6278      	str	r0, [r7, #36]	; 0x24
    3f48:	e050      	b.n	3fec <push_result_token+0x150>
    } else if (lex->tok_kind == MP_TOKEN_STRING || lex->tok_kind == MP_TOKEN_BYTES) {
    3f4a:	69fb      	ldr	r3, [r7, #28]
    3f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    3f4e:	2b0a      	cmp	r3, #10
    3f50:	d003      	beq.n	3f5a <push_result_token+0xbe>
    3f52:	69fb      	ldr	r3, [r7, #28]
    3f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    3f56:	2b0b      	cmp	r3, #11
    3f58:	d141      	bne.n	3fde <push_result_token+0x142>
        // Don't automatically intern all strings/bytes.  doc strings (which are usually large)
        // will be discarded by the compiler, and so we shouldn't intern them.
        qstr qst = MP_QSTR_NULL;
    3f5a:	2300      	movs	r3, #0
    3f5c:	623b      	str	r3, [r7, #32]
        if (lex->vstr.len <= MICROPY_ALLOC_PARSE_INTERN_STRING_LEN) {
    3f5e:	69fb      	ldr	r3, [r7, #28]
    3f60:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    3f62:	2b0a      	cmp	r3, #10
    3f64:	d809      	bhi.n	3f7a <push_result_token+0xde>
            // intern short strings
            qst = qstr_from_strn(lex->vstr.buf, lex->vstr.len);
    3f66:	69fb      	ldr	r3, [r7, #28]
    3f68:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    3f6a:	69fb      	ldr	r3, [r7, #28]
    3f6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    3f6e:	4619      	mov	r1, r3
    3f70:	4610      	mov	r0, r2
    3f72:	f7fd f91f 	bl	11b4 <qstr_from_strn>
    3f76:	6238      	str	r0, [r7, #32]
    3f78:	e008      	b.n	3f8c <push_result_token+0xf0>
        } else {
            // check if this string is already interned
            qst = qstr_find_strn(lex->vstr.buf, lex->vstr.len);
    3f7a:	69fb      	ldr	r3, [r7, #28]
    3f7c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    3f7e:	69fb      	ldr	r3, [r7, #28]
    3f80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    3f82:	4619      	mov	r1, r3
    3f84:	4610      	mov	r0, r2
    3f86:	f7fd f8b1 	bl	10ec <qstr_find_strn>
    3f8a:	6238      	str	r0, [r7, #32]
        }
        if (qst != MP_QSTR_NULL) {
    3f8c:	6a3b      	ldr	r3, [r7, #32]
    3f8e:	2b00      	cmp	r3, #0
    3f90:	d00d      	beq.n	3fae <push_result_token+0x112>
            // qstr exists, make a leaf node
            pn = mp_parse_node_new_leaf(lex->tok_kind == MP_TOKEN_STRING ? MP_PARSE_NODE_STRING : MP_PARSE_NODE_BYTES, qst);
    3f92:	69fb      	ldr	r3, [r7, #28]
    3f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    3f96:	2b0a      	cmp	r3, #10
    3f98:	d101      	bne.n	3f9e <push_result_token+0x102>
    3f9a:	2306      	movs	r3, #6
    3f9c:	e000      	b.n	3fa0 <push_result_token+0x104>
    3f9e:	230a      	movs	r3, #10
    3fa0:	6a3a      	ldr	r2, [r7, #32]
    3fa2:	4611      	mov	r1, r2
    3fa4:	4618      	mov	r0, r3
    3fa6:	f7ff fce3 	bl	3970 <mp_parse_node_new_leaf>
    3faa:	6278      	str	r0, [r7, #36]	; 0x24
    } else if (lex->tok_kind == MP_TOKEN_STRING || lex->tok_kind == MP_TOKEN_BYTES) {
    3fac:	e01e      	b.n	3fec <push_result_token+0x150>
        } else {
            // not interned, make a node holding a pointer to the string/bytes object
            mp_obj_t o = mp_obj_new_str_copy(
                lex->tok_kind == MP_TOKEN_STRING ? &mp_type_str : &mp_type_bytes,
    3fae:	69fb      	ldr	r3, [r7, #28]
    3fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
            mp_obj_t o = mp_obj_new_str_copy(
    3fb2:	2b0a      	cmp	r3, #10
    3fb4:	d101      	bne.n	3fba <push_result_token+0x11e>
    3fb6:	4811      	ldr	r0, [pc, #68]	; (3ffc <push_result_token+0x160>)
    3fb8:	e000      	b.n	3fbc <push_result_token+0x120>
    3fba:	4811      	ldr	r0, [pc, #68]	; (4000 <push_result_token+0x164>)
                (const byte*)lex->vstr.buf, lex->vstr.len);
    3fbc:	69fb      	ldr	r3, [r7, #28]
    3fbe:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
            mp_obj_t o = mp_obj_new_str_copy(
    3fc0:	69fb      	ldr	r3, [r7, #28]
    3fc2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    3fc4:	461a      	mov	r2, r3
    3fc6:	f011 fa89 	bl	154dc <mp_obj_new_str_copy>
    3fca:	60f8      	str	r0, [r7, #12]
            pn = make_node_const_object(parser, lex->tok_line, o);
    3fcc:	69fb      	ldr	r3, [r7, #28]
    3fce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    3fd0:	68fa      	ldr	r2, [r7, #12]
    3fd2:	4619      	mov	r1, r3
    3fd4:	6878      	ldr	r0, [r7, #4]
    3fd6:	f7ff ff37 	bl	3e48 <make_node_const_object>
    3fda:	6278      	str	r0, [r7, #36]	; 0x24
    } else if (lex->tok_kind == MP_TOKEN_STRING || lex->tok_kind == MP_TOKEN_BYTES) {
    3fdc:	e006      	b.n	3fec <push_result_token+0x150>
        }
    } else {
        pn = mp_parse_node_new_leaf(MP_PARSE_NODE_TOKEN, lex->tok_kind);
    3fde:	69fb      	ldr	r3, [r7, #28]
    3fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    3fe2:	4619      	mov	r1, r3
    3fe4:	200e      	movs	r0, #14
    3fe6:	f7ff fcc3 	bl	3970 <mp_parse_node_new_leaf>
    3fea:	6278      	str	r0, [r7, #36]	; 0x24
    }
    push_result_node(parser, pn);
    3fec:	6a79      	ldr	r1, [r7, #36]	; 0x24
    3fee:	6878      	ldr	r0, [r7, #4]
    3ff0:	f7ff fefc 	bl	3dec <push_result_node>
}
    3ff4:	bf00      	nop
    3ff6:	3728      	adds	r7, #40	; 0x28
    3ff8:	46bd      	mov	sp, r7
    3ffa:	bd80      	pop	{r7, pc}
    3ffc:	00023b0c 	.word	0x00023b0c
    4000:	00023b48 	.word	0x00023b48

00004004 <fold_logical_constants>:
#endif

STATIC void push_result_rule(parser_t *parser, size_t src_line, uint8_t rule_id, size_t num_args);

#if MICROPY_COMP_CONST_FOLDING
STATIC bool fold_logical_constants(parser_t *parser, uint8_t rule_id, size_t *num_args) {
    4004:	b580      	push	{r7, lr}
    4006:	b08a      	sub	sp, #40	; 0x28
    4008:	af00      	add	r7, sp, #0
    400a:	60f8      	str	r0, [r7, #12]
    400c:	460b      	mov	r3, r1
    400e:	607a      	str	r2, [r7, #4]
    4010:	72fb      	strb	r3, [r7, #11]
    if (rule_id == RULE_or_test
    4012:	7afb      	ldrb	r3, [r7, #11]
    4014:	2b1c      	cmp	r3, #28
    4016:	d002      	beq.n	401e <fold_logical_constants+0x1a>
        || rule_id == RULE_and_test) {
    4018:	7afb      	ldrb	r3, [r7, #11]
    401a:	2b1d      	cmp	r3, #29
    401c:	d169      	bne.n	40f2 <fold_logical_constants+0xee>
        // folding for binary logical ops: or and
        size_t copy_to = *num_args;
    401e:	687b      	ldr	r3, [r7, #4]
    4020:	681b      	ldr	r3, [r3, #0]
    4022:	627b      	str	r3, [r7, #36]	; 0x24
        for (size_t i = copy_to; i > 0;) {
    4024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    4026:	623b      	str	r3, [r7, #32]
    4028:	e03c      	b.n	40a4 <fold_logical_constants+0xa0>
            mp_parse_node_t pn = peek_result(parser, --i);
    402a:	6a3b      	ldr	r3, [r7, #32]
    402c:	3b01      	subs	r3, #1
    402e:	623b      	str	r3, [r7, #32]
    4030:	6a39      	ldr	r1, [r7, #32]
    4032:	68f8      	ldr	r0, [r7, #12]
    4034:	f7ff feb2 	bl	3d9c <peek_result>
    4038:	6178      	str	r0, [r7, #20]
            parser->result_stack[parser->result_stack_top - copy_to] = pn;
    403a:	68fb      	ldr	r3, [r7, #12]
    403c:	695a      	ldr	r2, [r3, #20]
    403e:	68fb      	ldr	r3, [r7, #12]
    4040:	6919      	ldr	r1, [r3, #16]
    4042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    4044:	1acb      	subs	r3, r1, r3
    4046:	009b      	lsls	r3, r3, #2
    4048:	4413      	add	r3, r2
    404a:	697a      	ldr	r2, [r7, #20]
    404c:	601a      	str	r2, [r3, #0]
            if (i == 0) {
    404e:	6a3b      	ldr	r3, [r7, #32]
    4050:	2b00      	cmp	r3, #0
    4052:	d02b      	beq.n	40ac <fold_logical_constants+0xa8>
                // always need to keep the last value
                break;
            }
            if (rule_id == RULE_or_test) {
    4054:	7afb      	ldrb	r3, [r7, #11]
    4056:	2b1c      	cmp	r3, #28
    4058:	d112      	bne.n	4080 <fold_logical_constants+0x7c>
                if (mp_parse_node_is_const_true(pn)) {
    405a:	6978      	ldr	r0, [r7, #20]
    405c:	f7ff fddc 	bl	3c18 <mp_parse_node_is_const_true>
    4060:	4603      	mov	r3, r0
    4062:	2b00      	cmp	r3, #0
    4064:	d124      	bne.n	40b0 <fold_logical_constants+0xac>
                    //
                    break;
                } else if (!mp_parse_node_is_const_false(pn)) {
    4066:	6978      	ldr	r0, [r7, #20]
    4068:	f7ff fdba 	bl	3be0 <mp_parse_node_is_const_false>
    406c:	4603      	mov	r3, r0
    406e:	f083 0301 	eor.w	r3, r3, #1
    4072:	b2db      	uxtb	r3, r3
    4074:	2b00      	cmp	r3, #0
    4076:	d015      	beq.n	40a4 <fold_logical_constants+0xa0>
                    copy_to -= 1;
    4078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    407a:	3b01      	subs	r3, #1
    407c:	627b      	str	r3, [r7, #36]	; 0x24
    407e:	e011      	b.n	40a4 <fold_logical_constants+0xa0>
                }
            } else {
                // RULE_and_test
                if (mp_parse_node_is_const_false(pn)) {
    4080:	6978      	ldr	r0, [r7, #20]
    4082:	f7ff fdad 	bl	3be0 <mp_parse_node_is_const_false>
    4086:	4603      	mov	r3, r0
    4088:	2b00      	cmp	r3, #0
    408a:	d113      	bne.n	40b4 <fold_logical_constants+0xb0>
                    break;
                } else if (!mp_parse_node_is_const_true(pn)) {
    408c:	6978      	ldr	r0, [r7, #20]
    408e:	f7ff fdc3 	bl	3c18 <mp_parse_node_is_const_true>
    4092:	4603      	mov	r3, r0
    4094:	f083 0301 	eor.w	r3, r3, #1
    4098:	b2db      	uxtb	r3, r3
    409a:	2b00      	cmp	r3, #0
    409c:	d002      	beq.n	40a4 <fold_logical_constants+0xa0>
                    copy_to -= 1;
    409e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    40a0:	3b01      	subs	r3, #1
    40a2:	627b      	str	r3, [r7, #36]	; 0x24
        for (size_t i = copy_to; i > 0;) {
    40a4:	6a3b      	ldr	r3, [r7, #32]
    40a6:	2b00      	cmp	r3, #0
    40a8:	d1bf      	bne.n	402a <fold_logical_constants+0x26>
    40aa:	e004      	b.n	40b6 <fold_logical_constants+0xb2>
                break;
    40ac:	bf00      	nop
    40ae:	e002      	b.n	40b6 <fold_logical_constants+0xb2>
                    break;
    40b0:	bf00      	nop
    40b2:	e000      	b.n	40b6 <fold_logical_constants+0xb2>
                    break;
    40b4:	bf00      	nop
                }
            }
        }
        copy_to -= 1; // copy_to now contains number of args to pop
    40b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    40b8:	3b01      	subs	r3, #1
    40ba:	627b      	str	r3, [r7, #36]	; 0x24

        // pop and discard all the short-circuited expressions
        for (size_t i = 0; i < copy_to; ++i) {
    40bc:	2300      	movs	r3, #0
    40be:	61fb      	str	r3, [r7, #28]
    40c0:	e005      	b.n	40ce <fold_logical_constants+0xca>
            pop_result(parser);
    40c2:	68f8      	ldr	r0, [r7, #12]
    40c4:	f7ff fe44 	bl	3d50 <pop_result>
        for (size_t i = 0; i < copy_to; ++i) {
    40c8:	69fb      	ldr	r3, [r7, #28]
    40ca:	3301      	adds	r3, #1
    40cc:	61fb      	str	r3, [r7, #28]
    40ce:	69fa      	ldr	r2, [r7, #28]
    40d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    40d2:	429a      	cmp	r2, r3
    40d4:	d3f5      	bcc.n	40c2 <fold_logical_constants+0xbe>
        }
        *num_args -= copy_to;
    40d6:	687b      	ldr	r3, [r7, #4]
    40d8:	681a      	ldr	r2, [r3, #0]
    40da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    40dc:	1ad2      	subs	r2, r2, r3
    40de:	687b      	ldr	r3, [r7, #4]
    40e0:	601a      	str	r2, [r3, #0]

        // we did a complete folding if there's only 1 arg left
        return *num_args == 1;
    40e2:	687b      	ldr	r3, [r7, #4]
    40e4:	681b      	ldr	r3, [r3, #0]
    40e6:	2b01      	cmp	r3, #1
    40e8:	bf0c      	ite	eq
    40ea:	2301      	moveq	r3, #1
    40ec:	2300      	movne	r3, #0
    40ee:	b2db      	uxtb	r3, r3
    40f0:	e02b      	b.n	414a <fold_logical_constants+0x146>

    } else if (rule_id == RULE_not_test_2) {
    40f2:	7afb      	ldrb	r3, [r7, #11]
    40f4:	2b1e      	cmp	r3, #30
    40f6:	d127      	bne.n	4148 <fold_logical_constants+0x144>
        // folding for unary logical op: not
        mp_parse_node_t pn = peek_result(parser, 0);
    40f8:	2100      	movs	r1, #0
    40fa:	68f8      	ldr	r0, [r7, #12]
    40fc:	f7ff fe4e 	bl	3d9c <peek_result>
    4100:	61b8      	str	r0, [r7, #24]
        if (mp_parse_node_is_const_false(pn)) {
    4102:	69b8      	ldr	r0, [r7, #24]
    4104:	f7ff fd6c 	bl	3be0 <mp_parse_node_is_const_false>
    4108:	4603      	mov	r3, r0
    410a:	2b00      	cmp	r3, #0
    410c:	d005      	beq.n	411a <fold_logical_constants+0x116>
            pn = mp_parse_node_new_leaf(MP_PARSE_NODE_TOKEN, MP_TOKEN_KW_TRUE);
    410e:	210f      	movs	r1, #15
    4110:	200e      	movs	r0, #14
    4112:	f7ff fc2d 	bl	3970 <mp_parse_node_new_leaf>
    4116:	61b8      	str	r0, [r7, #24]
    4118:	e00d      	b.n	4136 <fold_logical_constants+0x132>
        } else if (mp_parse_node_is_const_true(pn)) {
    411a:	69b8      	ldr	r0, [r7, #24]
    411c:	f7ff fd7c 	bl	3c18 <mp_parse_node_is_const_true>
    4120:	4603      	mov	r3, r0
    4122:	2b00      	cmp	r3, #0
    4124:	d005      	beq.n	4132 <fold_logical_constants+0x12e>
            pn = mp_parse_node_new_leaf(MP_PARSE_NODE_TOKEN, MP_TOKEN_KW_FALSE);
    4126:	210d      	movs	r1, #13
    4128:	200e      	movs	r0, #14
    412a:	f7ff fc21 	bl	3970 <mp_parse_node_new_leaf>
    412e:	61b8      	str	r0, [r7, #24]
    4130:	e001      	b.n	4136 <fold_logical_constants+0x132>
        } else {
            return false;
    4132:	2300      	movs	r3, #0
    4134:	e009      	b.n	414a <fold_logical_constants+0x146>
        }
        pop_result(parser);
    4136:	68f8      	ldr	r0, [r7, #12]
    4138:	f7ff fe0a 	bl	3d50 <pop_result>
        push_result_node(parser, pn);
    413c:	69b9      	ldr	r1, [r7, #24]
    413e:	68f8      	ldr	r0, [r7, #12]
    4140:	f7ff fe54 	bl	3dec <push_result_node>
        return true;
    4144:	2301      	movs	r3, #1
    4146:	e000      	b.n	414a <fold_logical_constants+0x146>
    }

    return false;
    4148:	2300      	movs	r3, #0
}
    414a:	4618      	mov	r0, r3
    414c:	3728      	adds	r7, #40	; 0x28
    414e:	46bd      	mov	sp, r7
    4150:	bd80      	pop	{r7, pc}
    4152:	bf00      	nop

00004154 <fold_constants>:

STATIC bool fold_constants(parser_t *parser, uint8_t rule_id, size_t num_args) {
    4154:	b580      	push	{r7, lr}
    4156:	b094      	sub	sp, #80	; 0x50
    4158:	af00      	add	r7, sp, #0
    415a:	60f8      	str	r0, [r7, #12]
    415c:	460b      	mov	r3, r1
    415e:	607a      	str	r2, [r7, #4]
    4160:	72fb      	strb	r3, [r7, #11]
    // this code does folding of arbitrary integer expressions, eg 1 + 2 * 3 + 4
    // it does not do partial folding, eg 1 + 2 + x -> 3 + x

    mp_obj_t arg0;
    if (rule_id == RULE_expr
    4162:	7afb      	ldrb	r3, [r7, #11]
    4164:	2b21      	cmp	r3, #33	; 0x21
    4166:	d005      	beq.n	4174 <fold_constants+0x20>
        || rule_id == RULE_xor_expr
    4168:	7afb      	ldrb	r3, [r7, #11]
    416a:	2b22      	cmp	r3, #34	; 0x22
    416c:	d002      	beq.n	4174 <fold_constants+0x20>
        || rule_id == RULE_and_expr) {
    416e:	7afb      	ldrb	r3, [r7, #11]
    4170:	2b23      	cmp	r3, #35	; 0x23
    4172:	d149      	bne.n	4208 <fold_constants+0xb4>
        // folding for binary ops: | ^ &
        mp_parse_node_t pn = peek_result(parser, num_args - 1);
    4174:	687b      	ldr	r3, [r7, #4]
    4176:	3b01      	subs	r3, #1
    4178:	4619      	mov	r1, r3
    417a:	68f8      	ldr	r0, [r7, #12]
    417c:	f7ff fe0e 	bl	3d9c <peek_result>
    4180:	6238      	str	r0, [r7, #32]
        if (!mp_parse_node_get_int_maybe(pn, &arg0)) {
    4182:	f107 031c 	add.w	r3, r7, #28
    4186:	4619      	mov	r1, r3
    4188:	6a38      	ldr	r0, [r7, #32]
    418a:	f7ff fd61 	bl	3c50 <mp_parse_node_get_int_maybe>
    418e:	4603      	mov	r3, r0
    4190:	f083 0301 	eor.w	r3, r3, #1
    4194:	b2db      	uxtb	r3, r3
    4196:	2b00      	cmp	r3, #0
    4198:	d001      	beq.n	419e <fold_constants+0x4a>
            return false;
    419a:	2300      	movs	r3, #0
    419c:	e10a      	b.n	43b4 <fold_constants+0x260>
        }
        mp_binary_op_t op;
        if (rule_id == RULE_expr) {
    419e:	7afb      	ldrb	r3, [r7, #11]
    41a0:	2b21      	cmp	r3, #33	; 0x21
    41a2:	d102      	bne.n	41aa <fold_constants+0x56>
            op = MP_BINARY_OP_OR;
    41a4:	2315      	movs	r3, #21
    41a6:	64fb      	str	r3, [r7, #76]	; 0x4c
    41a8:	e007      	b.n	41ba <fold_constants+0x66>
        } else if (rule_id == RULE_xor_expr) {
    41aa:	7afb      	ldrb	r3, [r7, #11]
    41ac:	2b22      	cmp	r3, #34	; 0x22
    41ae:	d102      	bne.n	41b6 <fold_constants+0x62>
            op = MP_BINARY_OP_XOR;
    41b0:	2316      	movs	r3, #22
    41b2:	64fb      	str	r3, [r7, #76]	; 0x4c
    41b4:	e001      	b.n	41ba <fold_constants+0x66>
        } else {
            op = MP_BINARY_OP_AND;
    41b6:	2317      	movs	r3, #23
    41b8:	64fb      	str	r3, [r7, #76]	; 0x4c
        }
        for (ssize_t i = num_args - 2; i >= 0; --i) {
    41ba:	687b      	ldr	r3, [r7, #4]
    41bc:	3b02      	subs	r3, #2
    41be:	64bb      	str	r3, [r7, #72]	; 0x48
    41c0:	e01e      	b.n	4200 <fold_constants+0xac>
            pn = peek_result(parser, i);
    41c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    41c4:	4619      	mov	r1, r3
    41c6:	68f8      	ldr	r0, [r7, #12]
    41c8:	f7ff fde8 	bl	3d9c <peek_result>
    41cc:	6238      	str	r0, [r7, #32]
            mp_obj_t arg1;
            if (!mp_parse_node_get_int_maybe(pn, &arg1)) {
    41ce:	f107 0318 	add.w	r3, r7, #24
    41d2:	4619      	mov	r1, r3
    41d4:	6a38      	ldr	r0, [r7, #32]
    41d6:	f7ff fd3b 	bl	3c50 <mp_parse_node_get_int_maybe>
    41da:	4603      	mov	r3, r0
    41dc:	f083 0301 	eor.w	r3, r3, #1
    41e0:	b2db      	uxtb	r3, r3
    41e2:	2b00      	cmp	r3, #0
    41e4:	d001      	beq.n	41ea <fold_constants+0x96>
                return false;
    41e6:	2300      	movs	r3, #0
    41e8:	e0e4      	b.n	43b4 <fold_constants+0x260>
            }
            arg0 = mp_binary_op(op, arg0, arg1);
    41ea:	69fb      	ldr	r3, [r7, #28]
    41ec:	69ba      	ldr	r2, [r7, #24]
    41ee:	4619      	mov	r1, r3
    41f0:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
    41f2:	f007 fca3 	bl	bb3c <mp_binary_op>
    41f6:	4603      	mov	r3, r0
    41f8:	61fb      	str	r3, [r7, #28]
        for (ssize_t i = num_args - 2; i >= 0; --i) {
    41fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    41fc:	3b01      	subs	r3, #1
    41fe:	64bb      	str	r3, [r7, #72]	; 0x48
    4200:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    4202:	2b00      	cmp	r3, #0
    4204:	dadd      	bge.n	41c2 <fold_constants+0x6e>
        || rule_id == RULE_and_expr) {
    4206:	e0ab      	b.n	4360 <fold_constants+0x20c>
        }
    } else if (rule_id == RULE_shift_expr
    4208:	7afb      	ldrb	r3, [r7, #11]
    420a:	2b24      	cmp	r3, #36	; 0x24
    420c:	d005      	beq.n	421a <fold_constants+0xc6>
        || rule_id == RULE_arith_expr
    420e:	7afb      	ldrb	r3, [r7, #11]
    4210:	2b25      	cmp	r3, #37	; 0x25
    4212:	d002      	beq.n	421a <fold_constants+0xc6>
        || rule_id == RULE_term) {
    4214:	7afb      	ldrb	r3, [r7, #11]
    4216:	2b26      	cmp	r3, #38	; 0x26
    4218:	d163      	bne.n	42e2 <fold_constants+0x18e>
        // folding for binary ops: << >> + - * / % //
        mp_parse_node_t pn = peek_result(parser, num_args - 1);
    421a:	687b      	ldr	r3, [r7, #4]
    421c:	3b01      	subs	r3, #1
    421e:	4619      	mov	r1, r3
    4220:	68f8      	ldr	r0, [r7, #12]
    4222:	f7ff fdbb 	bl	3d9c <peek_result>
    4226:	6338      	str	r0, [r7, #48]	; 0x30
        if (!mp_parse_node_get_int_maybe(pn, &arg0)) {
    4228:	f107 031c 	add.w	r3, r7, #28
    422c:	4619      	mov	r1, r3
    422e:	6b38      	ldr	r0, [r7, #48]	; 0x30
    4230:	f7ff fd0e 	bl	3c50 <mp_parse_node_get_int_maybe>
    4234:	4603      	mov	r3, r0
    4236:	f083 0301 	eor.w	r3, r3, #1
    423a:	b2db      	uxtb	r3, r3
    423c:	2b00      	cmp	r3, #0
    423e:	d001      	beq.n	4244 <fold_constants+0xf0>
            return false;
    4240:	2300      	movs	r3, #0
    4242:	e0b7      	b.n	43b4 <fold_constants+0x260>
        }
        for (ssize_t i = num_args - 2; i >= 1; i -= 2) {
    4244:	687b      	ldr	r3, [r7, #4]
    4246:	3b02      	subs	r3, #2
    4248:	647b      	str	r3, [r7, #68]	; 0x44
    424a:	e046      	b.n	42da <fold_constants+0x186>
            pn = peek_result(parser, i - 1);
    424c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    424e:	3b01      	subs	r3, #1
    4250:	4619      	mov	r1, r3
    4252:	68f8      	ldr	r0, [r7, #12]
    4254:	f7ff fda2 	bl	3d9c <peek_result>
    4258:	6338      	str	r0, [r7, #48]	; 0x30
            mp_obj_t arg1;
            if (!mp_parse_node_get_int_maybe(pn, &arg1)) {
    425a:	f107 0314 	add.w	r3, r7, #20
    425e:	4619      	mov	r1, r3
    4260:	6b38      	ldr	r0, [r7, #48]	; 0x30
    4262:	f7ff fcf5 	bl	3c50 <mp_parse_node_get_int_maybe>
    4266:	4603      	mov	r3, r0
    4268:	f083 0301 	eor.w	r3, r3, #1
    426c:	b2db      	uxtb	r3, r3
    426e:	2b00      	cmp	r3, #0
    4270:	d001      	beq.n	4276 <fold_constants+0x122>
                return false;
    4272:	2300      	movs	r3, #0
    4274:	e09e      	b.n	43b4 <fold_constants+0x260>
            }
            mp_token_kind_t tok = MP_PARSE_NODE_LEAF_ARG(peek_result(parser, i));
    4276:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    4278:	4619      	mov	r1, r3
    427a:	68f8      	ldr	r0, [r7, #12]
    427c:	f7ff fd8e 	bl	3d9c <peek_result>
    4280:	4603      	mov	r3, r0
    4282:	091b      	lsrs	r3, r3, #4
    4284:	62fb      	str	r3, [r7, #44]	; 0x2c
                255,//MP_BINARY_OP_LESS
                MP_BINARY_OP_LSHIFT,
                255,//MP_BINARY_OP_MORE
                MP_BINARY_OP_RSHIFT,
            };
            mp_binary_op_t op = token_to_op[tok - MP_TOKEN_OP_PLUS];
    4286:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    4288:	3b2f      	subs	r3, #47	; 0x2f
    428a:	4a4c      	ldr	r2, [pc, #304]	; (43bc <fold_constants+0x268>)
    428c:	5cd3      	ldrb	r3, [r2, r3]
    428e:	62bb      	str	r3, [r7, #40]	; 0x28
            if (op == (mp_binary_op_t)255) {
    4290:	6abb      	ldr	r3, [r7, #40]	; 0x28
    4292:	2bff      	cmp	r3, #255	; 0xff
    4294:	d101      	bne.n	429a <fold_constants+0x146>
                return false;
    4296:	2300      	movs	r3, #0
    4298:	e08c      	b.n	43b4 <fold_constants+0x260>
            }
            int rhs_sign = mp_obj_int_sign(arg1);
    429a:	697b      	ldr	r3, [r7, #20]
    429c:	4618      	mov	r0, r3
    429e:	f00c fc13 	bl	10ac8 <mp_obj_int_sign>
    42a2:	6278      	str	r0, [r7, #36]	; 0x24
            if (op <= MP_BINARY_OP_RSHIFT) {
    42a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
    42a6:	2b19      	cmp	r3, #25
    42a8:	d804      	bhi.n	42b4 <fold_constants+0x160>
                // << and >> can't have negative rhs
                if (rhs_sign < 0) {
    42aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    42ac:	2b00      	cmp	r3, #0
    42ae:	da09      	bge.n	42c4 <fold_constants+0x170>
                    return false;
    42b0:	2300      	movs	r3, #0
    42b2:	e07f      	b.n	43b4 <fold_constants+0x260>
                }
            } else if (op >= MP_BINARY_OP_FLOOR_DIVIDE) {
    42b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
    42b6:	2b1c      	cmp	r3, #28
    42b8:	d904      	bls.n	42c4 <fold_constants+0x170>
                // % and // can't have zero rhs
                if (rhs_sign == 0) {
    42ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    42bc:	2b00      	cmp	r3, #0
    42be:	d101      	bne.n	42c4 <fold_constants+0x170>
                    return false;
    42c0:	2300      	movs	r3, #0
    42c2:	e077      	b.n	43b4 <fold_constants+0x260>
                }
            }
            arg0 = mp_binary_op(op, arg0, arg1);
    42c4:	69fb      	ldr	r3, [r7, #28]
    42c6:	697a      	ldr	r2, [r7, #20]
    42c8:	4619      	mov	r1, r3
    42ca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    42cc:	f007 fc36 	bl	bb3c <mp_binary_op>
    42d0:	4603      	mov	r3, r0
    42d2:	61fb      	str	r3, [r7, #28]
        for (ssize_t i = num_args - 2; i >= 1; i -= 2) {
    42d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    42d6:	3b02      	subs	r3, #2
    42d8:	647b      	str	r3, [r7, #68]	; 0x44
    42da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    42dc:	2b00      	cmp	r3, #0
    42de:	dcb5      	bgt.n	424c <fold_constants+0xf8>
        || rule_id == RULE_term) {
    42e0:	e03e      	b.n	4360 <fold_constants+0x20c>
        }
    } else if (rule_id == RULE_factor_2) {
    42e2:	7afb      	ldrb	r3, [r7, #11]
    42e4:	2b27      	cmp	r3, #39	; 0x27
    42e6:	d139      	bne.n	435c <fold_constants+0x208>
        // folding for unary ops: + - ~
        mp_parse_node_t pn = peek_result(parser, 0);
    42e8:	2100      	movs	r1, #0
    42ea:	68f8      	ldr	r0, [r7, #12]
    42ec:	f7ff fd56 	bl	3d9c <peek_result>
    42f0:	63b8      	str	r0, [r7, #56]	; 0x38
        if (!mp_parse_node_get_int_maybe(pn, &arg0)) {
    42f2:	f107 031c 	add.w	r3, r7, #28
    42f6:	4619      	mov	r1, r3
    42f8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
    42fa:	f7ff fca9 	bl	3c50 <mp_parse_node_get_int_maybe>
    42fe:	4603      	mov	r3, r0
    4300:	f083 0301 	eor.w	r3, r3, #1
    4304:	b2db      	uxtb	r3, r3
    4306:	2b00      	cmp	r3, #0
    4308:	d001      	beq.n	430e <fold_constants+0x1ba>
            return false;
    430a:	2300      	movs	r3, #0
    430c:	e052      	b.n	43b4 <fold_constants+0x260>
        }
        mp_token_kind_t tok = MP_PARSE_NODE_LEAF_ARG(peek_result(parser, 1));
    430e:	2101      	movs	r1, #1
    4310:	68f8      	ldr	r0, [r7, #12]
    4312:	f7ff fd43 	bl	3d9c <peek_result>
    4316:	4603      	mov	r3, r0
    4318:	091b      	lsrs	r3, r3, #4
    431a:	637b      	str	r3, [r7, #52]	; 0x34
        mp_unary_op_t op;
        if (tok == MP_TOKEN_OP_PLUS) {
    431c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    431e:	2b2f      	cmp	r3, #47	; 0x2f
    4320:	d102      	bne.n	4328 <fold_constants+0x1d4>
            op = MP_UNARY_OP_POSITIVE;
    4322:	2300      	movs	r3, #0
    4324:	643b      	str	r3, [r7, #64]	; 0x40
    4326:	e011      	b.n	434c <fold_constants+0x1f8>
        } else if (tok == MP_TOKEN_OP_MINUS) {
    4328:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    432a:	2b30      	cmp	r3, #48	; 0x30
    432c:	d102      	bne.n	4334 <fold_constants+0x1e0>
            op = MP_UNARY_OP_NEGATIVE;
    432e:	2301      	movs	r3, #1
    4330:	643b      	str	r3, [r7, #64]	; 0x40
    4332:	e00b      	b.n	434c <fold_constants+0x1f8>
        } else {
            assert(tok == MP_TOKEN_OP_TILDE); // should be
    4334:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    4336:	2b3d      	cmp	r3, #61	; 0x3d
    4338:	d006      	beq.n	4348 <fold_constants+0x1f4>
    433a:	4b21      	ldr	r3, [pc, #132]	; (43c0 <fold_constants+0x26c>)
    433c:	4a21      	ldr	r2, [pc, #132]	; (43c4 <fold_constants+0x270>)
    433e:	f240 21b3 	movw	r1, #691	; 0x2b3
    4342:	4821      	ldr	r0, [pc, #132]	; (43c8 <fold_constants+0x274>)
    4344:	f017 f9c4 	bl	1b6d0 <__assert_func>
            op = MP_UNARY_OP_INVERT;
    4348:	2302      	movs	r3, #2
    434a:	643b      	str	r3, [r7, #64]	; 0x40
        }
        arg0 = mp_unary_op(op, arg0);
    434c:	69fb      	ldr	r3, [r7, #28]
    434e:	4619      	mov	r1, r3
    4350:	6c38      	ldr	r0, [r7, #64]	; 0x40
    4352:	f007 fb0d 	bl	b970 <mp_unary_op>
    4356:	4603      	mov	r3, r0
    4358:	61fb      	str	r3, [r7, #28]
    435a:	e001      	b.n	4360 <fold_constants+0x20c>
        }
        arg0 = dest[0];
    #endif

    } else {
        return false;
    435c:	2300      	movs	r3, #0
    435e:	e029      	b.n	43b4 <fold_constants+0x260>
    }

    // success folding this rule

    for (size_t i = num_args; i > 0; i--) {
    4360:	687b      	ldr	r3, [r7, #4]
    4362:	63fb      	str	r3, [r7, #60]	; 0x3c
    4364:	e005      	b.n	4372 <fold_constants+0x21e>
        pop_result(parser);
    4366:	68f8      	ldr	r0, [r7, #12]
    4368:	f7ff fcf2 	bl	3d50 <pop_result>
    for (size_t i = num_args; i > 0; i--) {
    436c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    436e:	3b01      	subs	r3, #1
    4370:	63fb      	str	r3, [r7, #60]	; 0x3c
    4372:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    4374:	2b00      	cmp	r3, #0
    4376:	d1f6      	bne.n	4366 <fold_constants+0x212>
    }
    if (MP_OBJ_IS_SMALL_INT(arg0)) {
    4378:	69fb      	ldr	r3, [r7, #28]
    437a:	4618      	mov	r0, r3
    437c:	f7ff fac6 	bl	390c <MP_OBJ_IS_SMALL_INT>
    4380:	4603      	mov	r3, r0
    4382:	2b00      	cmp	r3, #0
    4384:	d00a      	beq.n	439c <fold_constants+0x248>
        push_result_node(parser, mp_parse_node_new_small_int_checked(parser, arg0));
    4386:	69fb      	ldr	r3, [r7, #28]
    4388:	4619      	mov	r1, r3
    438a:	68f8      	ldr	r0, [r7, #12]
    438c:	f7ff fd76 	bl	3e7c <mp_parse_node_new_small_int_checked>
    4390:	4603      	mov	r3, r0
    4392:	4619      	mov	r1, r3
    4394:	68f8      	ldr	r0, [r7, #12]
    4396:	f7ff fd29 	bl	3dec <push_result_node>
    439a:	e00a      	b.n	43b2 <fold_constants+0x25e>
    } else {
        // TODO reuse memory for parse node struct?
        push_result_node(parser, make_node_const_object(parser, 0, arg0));
    439c:	69fb      	ldr	r3, [r7, #28]
    439e:	461a      	mov	r2, r3
    43a0:	2100      	movs	r1, #0
    43a2:	68f8      	ldr	r0, [r7, #12]
    43a4:	f7ff fd50 	bl	3e48 <make_node_const_object>
    43a8:	4603      	mov	r3, r0
    43aa:	4619      	mov	r1, r3
    43ac:	68f8      	ldr	r0, [r7, #12]
    43ae:	f7ff fd1d 	bl	3dec <push_result_node>
    }

    return true;
    43b2:	2301      	movs	r3, #1
}
    43b4:	4618      	mov	r0, r3
    43b6:	3750      	adds	r7, #80	; 0x50
    43b8:	46bd      	mov	sp, r7
    43ba:	bd80      	pop	{r7, pc}
    43bc:	00020124 	.word	0x00020124
    43c0:	0001ffd4 	.word	0x0001ffd4
    43c4:	00020130 	.word	0x00020130
    43c8:	0001ff80 	.word	0x0001ff80

000043cc <push_result_rule>:
#endif

STATIC void push_result_rule(parser_t *parser, size_t src_line, uint8_t rule_id, size_t num_args) {
    43cc:	b590      	push	{r4, r7, lr}
    43ce:	b089      	sub	sp, #36	; 0x24
    43d0:	af00      	add	r7, sp, #0
    43d2:	60f8      	str	r0, [r7, #12]
    43d4:	60b9      	str	r1, [r7, #8]
    43d6:	603b      	str	r3, [r7, #0]
    43d8:	4613      	mov	r3, r2
    43da:	71fb      	strb	r3, [r7, #7]
    // optimise away parenthesis around an expression if possible
    if (rule_id == RULE_atom_paren) {
    43dc:	79fb      	ldrb	r3, [r7, #7]
    43de:	2b2a      	cmp	r3, #42	; 0x2a
    43e0:	d114      	bne.n	440c <push_result_rule+0x40>
        // there should be just 1 arg for this rule
        mp_parse_node_t pn = peek_result(parser, 0);
    43e2:	2100      	movs	r1, #0
    43e4:	68f8      	ldr	r0, [r7, #12]
    43e6:	f7ff fcd9 	bl	3d9c <peek_result>
    43ea:	61b8      	str	r0, [r7, #24]
        if (MP_PARSE_NODE_IS_NULL(pn)) {
    43ec:	69bb      	ldr	r3, [r7, #24]
    43ee:	2b00      	cmp	r3, #0
    43f0:	d00c      	beq.n	440c <push_result_rule+0x40>
            // need to keep parenthesis for ()
        } else if (MP_PARSE_NODE_IS_STRUCT_KIND(pn, RULE_testlist_comp)) {
    43f2:	69bb      	ldr	r3, [r7, #24]
    43f4:	2b00      	cmp	r3, #0
    43f6:	d045      	beq.n	4484 <push_result_rule+0xb8>
    43f8:	69bb      	ldr	r3, [r7, #24]
    43fa:	f003 0303 	and.w	r3, r3, #3
    43fe:	2b00      	cmp	r3, #0
    4400:	d140      	bne.n	4484 <push_result_rule+0xb8>
    4402:	69bb      	ldr	r3, [r7, #24]
    4404:	685b      	ldr	r3, [r3, #4]
    4406:	b2db      	uxtb	r3, r3
    4408:	2b8a      	cmp	r3, #138	; 0x8a
    440a:	d13b      	bne.n	4484 <push_result_rule+0xb8>
            return;
        }
    }

    #if MICROPY_COMP_CONST_FOLDING
    if (fold_logical_constants(parser, rule_id, &num_args)) {
    440c:	463a      	mov	r2, r7
    440e:	79fb      	ldrb	r3, [r7, #7]
    4410:	4619      	mov	r1, r3
    4412:	68f8      	ldr	r0, [r7, #12]
    4414:	f7ff fdf6 	bl	4004 <fold_logical_constants>
    4418:	4603      	mov	r3, r0
    441a:	2b00      	cmp	r3, #0
    441c:	d134      	bne.n	4488 <push_result_rule+0xbc>
        // we folded this rule so return straight away
        return;
    }
    if (fold_constants(parser, rule_id, num_args)) {
    441e:	683a      	ldr	r2, [r7, #0]
    4420:	79fb      	ldrb	r3, [r7, #7]
    4422:	4619      	mov	r1, r3
    4424:	68f8      	ldr	r0, [r7, #12]
    4426:	f7ff fe95 	bl	4154 <fold_constants>
    442a:	4603      	mov	r3, r0
    442c:	2b00      	cmp	r3, #0
    442e:	d12d      	bne.n	448c <push_result_rule+0xc0>
        // we folded this rule so return straight away
        return;
    }
    #endif

    mp_parse_node_struct_t *pn = parser_alloc(parser, sizeof(mp_parse_node_struct_t) + sizeof(mp_parse_node_t) * num_args);
    4430:	683b      	ldr	r3, [r7, #0]
    4432:	3302      	adds	r3, #2
    4434:	009b      	lsls	r3, r3, #2
    4436:	4619      	mov	r1, r3
    4438:	68f8      	ldr	r0, [r7, #12]
    443a:	f7ff fac9 	bl	39d0 <parser_alloc>
    443e:	6178      	str	r0, [r7, #20]
    pn->source_line = src_line;
    4440:	697b      	ldr	r3, [r7, #20]
    4442:	68ba      	ldr	r2, [r7, #8]
    4444:	601a      	str	r2, [r3, #0]
    pn->kind_num_nodes = (rule_id & 0xff) | (num_args << 8);
    4446:	79fa      	ldrb	r2, [r7, #7]
    4448:	683b      	ldr	r3, [r7, #0]
    444a:	021b      	lsls	r3, r3, #8
    444c:	431a      	orrs	r2, r3
    444e:	697b      	ldr	r3, [r7, #20]
    4450:	605a      	str	r2, [r3, #4]
    for (size_t i = num_args; i > 0; i--) {
    4452:	683b      	ldr	r3, [r7, #0]
    4454:	61fb      	str	r3, [r7, #28]
    4456:	e00c      	b.n	4472 <push_result_rule+0xa6>
        pn->nodes[i - 1] = pop_result(parser);
    4458:	69fb      	ldr	r3, [r7, #28]
    445a:	1e5c      	subs	r4, r3, #1
    445c:	68f8      	ldr	r0, [r7, #12]
    445e:	f7ff fc77 	bl	3d50 <pop_result>
    4462:	4601      	mov	r1, r0
    4464:	697b      	ldr	r3, [r7, #20]
    4466:	1ca2      	adds	r2, r4, #2
    4468:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (size_t i = num_args; i > 0; i--) {
    446c:	69fb      	ldr	r3, [r7, #28]
    446e:	3b01      	subs	r3, #1
    4470:	61fb      	str	r3, [r7, #28]
    4472:	69fb      	ldr	r3, [r7, #28]
    4474:	2b00      	cmp	r3, #0
    4476:	d1ef      	bne.n	4458 <push_result_rule+0x8c>
    }
    push_result_node(parser, (mp_parse_node_t)pn);
    4478:	697b      	ldr	r3, [r7, #20]
    447a:	4619      	mov	r1, r3
    447c:	68f8      	ldr	r0, [r7, #12]
    447e:	f7ff fcb5 	bl	3dec <push_result_node>
    4482:	e004      	b.n	448e <push_result_rule+0xc2>
            return;
    4484:	bf00      	nop
    4486:	e002      	b.n	448e <push_result_rule+0xc2>
        return;
    4488:	bf00      	nop
    448a:	e000      	b.n	448e <push_result_rule+0xc2>
        return;
    448c:	bf00      	nop
}
    448e:	3724      	adds	r7, #36	; 0x24
    4490:	46bd      	mov	sp, r7
    4492:	bd90      	pop	{r4, r7, pc}

00004494 <mp_parse>:

mp_parse_tree_t mp_parse(mp_lexer_t *lex, mp_parse_input_kind_t input_kind) {
    4494:	b580      	push	{r7, lr}
    4496:	b0a2      	sub	sp, #136	; 0x88
    4498:	af00      	add	r7, sp, #0
    449a:	60f8      	str	r0, [r7, #12]
    449c:	60b9      	str	r1, [r7, #8]
    449e:	607a      	str	r2, [r7, #4]

    // initialise parser and allocate memory for its stacks

    parser_t parser;

    parser.rule_stack_alloc = MICROPY_ALLOC_PARSE_RULE_INIT;
    44a0:	2340      	movs	r3, #64	; 0x40
    44a2:	61fb      	str	r3, [r7, #28]
    parser.rule_stack_top = 0;
    44a4:	2300      	movs	r3, #0
    44a6:	623b      	str	r3, [r7, #32]
    parser.rule_stack = m_new(rule_stack_t, parser.rule_stack_alloc);
    44a8:	69fb      	ldr	r3, [r7, #28]
    44aa:	00db      	lsls	r3, r3, #3
    44ac:	4618      	mov	r0, r3
    44ae:	f7fb ff35 	bl	31c <m_malloc>
    44b2:	4603      	mov	r3, r0
    44b4:	627b      	str	r3, [r7, #36]	; 0x24

    parser.result_stack_alloc = MICROPY_ALLOC_PARSE_RESULT_INIT;
    44b6:	2320      	movs	r3, #32
    44b8:	62bb      	str	r3, [r7, #40]	; 0x28
    parser.result_stack_top = 0;
    44ba:	2300      	movs	r3, #0
    44bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    parser.result_stack = m_new(mp_parse_node_t, parser.result_stack_alloc);
    44be:	6abb      	ldr	r3, [r7, #40]	; 0x28
    44c0:	009b      	lsls	r3, r3, #2
    44c2:	4618      	mov	r0, r3
    44c4:	f7fb ff2a 	bl	31c <m_malloc>
    44c8:	4603      	mov	r3, r0
    44ca:	633b      	str	r3, [r7, #48]	; 0x30

    parser.lexer = lex;
    44cc:	68bb      	ldr	r3, [r7, #8]
    44ce:	637b      	str	r3, [r7, #52]	; 0x34

    parser.tree.chunk = NULL;
    44d0:	2300      	movs	r3, #0
    44d2:	63fb      	str	r3, [r7, #60]	; 0x3c
    parser.cur_chunk = NULL;
    44d4:	2300      	movs	r3, #0
    44d6:	643b      	str	r3, [r7, #64]	; 0x40
    mp_map_init(&parser.consts, 0);
    #endif

    // work out the top-level rule to use, and push it on the stack
    size_t top_level_rule;
    switch (input_kind) {
    44d8:	687b      	ldr	r3, [r7, #4]
    44da:	2b00      	cmp	r3, #0
    44dc:	d002      	beq.n	44e4 <mp_parse+0x50>
    44de:	2b02      	cmp	r3, #2
    44e0:	d004      	beq.n	44ec <mp_parse+0x58>
    44e2:	e007      	b.n	44f4 <mp_parse+0x60>
        case MP_PARSE_SINGLE_INPUT: top_level_rule = RULE_single_input; break;
    44e4:	2336      	movs	r3, #54	; 0x36
    44e6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    44ea:	e006      	b.n	44fa <mp_parse+0x66>
        case MP_PARSE_EVAL_INPUT: top_level_rule = RULE_eval_input; break;
    44ec:	2338      	movs	r3, #56	; 0x38
    44ee:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    44f2:	e002      	b.n	44fa <mp_parse+0x66>
        default: top_level_rule = RULE_file_input;
    44f4:	2300      	movs	r3, #0
    44f6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    }
    push_rule(&parser, lex->tok_line, top_level_rule, 0);
    44fa:	68bb      	ldr	r3, [r7, #8]
    44fc:	6b99      	ldr	r1, [r3, #56]	; 0x38
    44fe:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
    4502:	b2da      	uxtb	r2, r3
    4504:	f107 001c 	add.w	r0, r7, #28
    4508:	2300      	movs	r3, #0
    450a:	f7ff facb 	bl	3aa4 <push_rule>

    // parse!

    bool backtrack = false;
    450e:	2300      	movs	r3, #0
    4510:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83

    for (;;) {
        next_rule:
        if (parser.rule_stack_top == 0) {
    4514:	6a3b      	ldr	r3, [r7, #32]
    4516:	2b00      	cmp	r3, #0
    4518:	d104      	bne.n	4524 <mp_parse+0x90>
    #if MICROPY_COMP_CONST
    mp_map_deinit(&parser.consts);
    #endif

    // truncate final chunk and link into chain of chunks
    if (parser.cur_chunk != NULL) {
    451a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    451c:	2b00      	cmp	r3, #0
    451e:	f040 8292 	bne.w	4a46 <mp_parse+0x5b2>
    4522:	e2a1      	b.n	4a68 <mp_parse+0x5d4>
        uint8_t rule_id = pop_rule(&parser, &i, &rule_src_line);
    4524:	f107 0214 	add.w	r2, r7, #20
    4528:	f107 0118 	add.w	r1, r7, #24
    452c:	f107 031c 	add.w	r3, r7, #28
    4530:	4618      	mov	r0, r3
    4532:	f7ff fb25 	bl	3b80 <pop_rule>
    4536:	4603      	mov	r3, r0
    4538:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        uint8_t rule_act = rule_act_table[rule_id];
    453c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
    4540:	4ab2      	ldr	r2, [pc, #712]	; (480c <mp_parse+0x378>)
    4542:	5cd3      	ldrb	r3, [r2, r3]
    4544:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
        const uint16_t *rule_arg = get_rule_arg(rule_id);
    4548:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
    454c:	4618      	mov	r0, r3
    454e:	f7ff fa1f 	bl	3990 <get_rule_arg>
    4552:	6638      	str	r0, [r7, #96]	; 0x60
        size_t n = rule_act & RULE_ACT_ARG_MASK;
    4554:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
    4558:	f003 030f 	and.w	r3, r3, #15
    455c:	65fb      	str	r3, [r7, #92]	; 0x5c
        switch (rule_act & RULE_ACT_KIND_MASK) {
    455e:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
    4562:	f003 0330 	and.w	r3, r3, #48	; 0x30
    4566:	2b10      	cmp	r3, #16
    4568:	d002      	beq.n	4570 <mp_parse+0xdc>
    456a:	2b20      	cmp	r3, #32
    456c:	d067      	beq.n	463e <mp_parse+0x1aa>
    456e:	e1aa      	b.n	48c6 <mp_parse+0x432>
                if (i > 0 && !backtrack) {
    4570:	69bb      	ldr	r3, [r7, #24]
    4572:	2b00      	cmp	r3, #0
    4574:	d006      	beq.n	4584 <mp_parse+0xf0>
    4576:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
    457a:	f083 0301 	eor.w	r3, r3, #1
    457e:	b2db      	uxtb	r3, r3
    4580:	2b00      	cmp	r3, #0
    4582:	d1c7      	bne.n	4514 <mp_parse+0x80>
                    backtrack = false;
    4584:	2300      	movs	r3, #0
    4586:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
                for (; i < n; ++i) {
    458a:	e050      	b.n	462e <mp_parse+0x19a>
                    uint16_t kind = rule_arg[i] & RULE_ARG_KIND_MASK;
    458c:	69bb      	ldr	r3, [r7, #24]
    458e:	005b      	lsls	r3, r3, #1
    4590:	6e3a      	ldr	r2, [r7, #96]	; 0x60
    4592:	4413      	add	r3, r2
    4594:	881b      	ldrh	r3, [r3, #0]
    4596:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
    459a:	f023 030f 	bic.w	r3, r3, #15
    459e:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
                    if (kind == RULE_ARG_TOK) {
    45a2:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
    45a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    45aa:	d116      	bne.n	45da <mp_parse+0x146>
                        if (lex->tok_kind == (rule_arg[i] & RULE_ARG_ARG_MASK)) {
    45ac:	68bb      	ldr	r3, [r7, #8]
    45ae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    45b0:	69bb      	ldr	r3, [r7, #24]
    45b2:	005b      	lsls	r3, r3, #1
    45b4:	6e39      	ldr	r1, [r7, #96]	; 0x60
    45b6:	440b      	add	r3, r1
    45b8:	881b      	ldrh	r3, [r3, #0]
    45ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
    45be:	429a      	cmp	r2, r3
    45c0:	d132      	bne.n	4628 <mp_parse+0x194>
                            push_result_token(&parser, rule_id);
    45c2:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
    45c6:	f107 031c 	add.w	r3, r7, #28
    45ca:	4611      	mov	r1, r2
    45cc:	4618      	mov	r0, r3
    45ce:	f7ff fc65 	bl	3e9c <push_result_token>
                            mp_lexer_to_next(lex);
    45d2:	68b8      	ldr	r0, [r7, #8]
    45d4:	f7fe fe2c 	bl	3230 <mp_lexer_to_next>
                            goto next_rule;
    45d8:	e79c      	b.n	4514 <mp_parse+0x80>
                        assert(kind == RULE_ARG_RULE);
    45da:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
    45de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
    45e2:	d006      	beq.n	45f2 <mp_parse+0x15e>
    45e4:	4b8a      	ldr	r3, [pc, #552]	; (4810 <mp_parse+0x37c>)
    45e6:	4a8b      	ldr	r2, [pc, #556]	; (4814 <mp_parse+0x380>)
    45e8:	f240 318b 	movw	r1, #907	; 0x38b
    45ec:	488a      	ldr	r0, [pc, #552]	; (4818 <mp_parse+0x384>)
    45ee:	f017 f86f 	bl	1b6d0 <__assert_func>
                        if (i + 1 < n) {
    45f2:	69bb      	ldr	r3, [r7, #24]
    45f4:	1c5a      	adds	r2, r3, #1
    45f6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    45f8:	429a      	cmp	r2, r3
    45fa:	d208      	bcs.n	460e <mp_parse+0x17a>
                            push_rule(&parser, rule_src_line, rule_id, i + 1); // save this or-rule
    45fc:	6979      	ldr	r1, [r7, #20]
    45fe:	69bb      	ldr	r3, [r7, #24]
    4600:	3301      	adds	r3, #1
    4602:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
    4606:	f107 001c 	add.w	r0, r7, #28
    460a:	f7ff fa4b 	bl	3aa4 <push_rule>
                        push_rule_from_arg(&parser, rule_arg[i]); // push child of or-rule
    460e:	69bb      	ldr	r3, [r7, #24]
    4610:	005b      	lsls	r3, r3, #1
    4612:	6e3a      	ldr	r2, [r7, #96]	; 0x60
    4614:	4413      	add	r3, r2
    4616:	881b      	ldrh	r3, [r3, #0]
    4618:	461a      	mov	r2, r3
    461a:	f107 031c 	add.w	r3, r7, #28
    461e:	4611      	mov	r1, r2
    4620:	4618      	mov	r0, r3
    4622:	f7ff fa7d 	bl	3b20 <push_rule_from_arg>
                        goto next_rule;
    4626:	e775      	b.n	4514 <mp_parse+0x80>
                for (; i < n; ++i) {
    4628:	69bb      	ldr	r3, [r7, #24]
    462a:	3301      	adds	r3, #1
    462c:	61bb      	str	r3, [r7, #24]
    462e:	69ba      	ldr	r2, [r7, #24]
    4630:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    4632:	429a      	cmp	r2, r3
    4634:	d3aa      	bcc.n	458c <mp_parse+0xf8>
                backtrack = true;
    4636:	2301      	movs	r3, #1
    4638:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
                break;
    463c:	e202      	b.n	4a44 <mp_parse+0x5b0>
                if (backtrack) {
    463e:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
    4642:	2b00      	cmp	r3, #0
    4644:	d06c      	beq.n	4720 <mp_parse+0x28c>
                    assert(i > 0);
    4646:	69bb      	ldr	r3, [r7, #24]
    4648:	2b00      	cmp	r3, #0
    464a:	d106      	bne.n	465a <mp_parse+0x1c6>
    464c:	4b73      	ldr	r3, [pc, #460]	; (481c <mp_parse+0x388>)
    464e:	4a71      	ldr	r2, [pc, #452]	; (4814 <mp_parse+0x380>)
    4650:	f240 319a 	movw	r1, #922	; 0x39a
    4654:	4870      	ldr	r0, [pc, #448]	; (4818 <mp_parse+0x384>)
    4656:	f017 f83b 	bl	1b6d0 <__assert_func>
                    if ((rule_arg[i - 1] & RULE_ARG_KIND_MASK) == RULE_ARG_OPT_RULE) {
    465a:	69bb      	ldr	r3, [r7, #24]
    465c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
    4660:	3b01      	subs	r3, #1
    4662:	005b      	lsls	r3, r3, #1
    4664:	6e3a      	ldr	r2, [r7, #96]	; 0x60
    4666:	4413      	add	r3, r2
    4668:	881b      	ldrh	r3, [r3, #0]
    466a:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
    466e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
    4672:	d109      	bne.n	4688 <mp_parse+0x1f4>
                        push_result_node(&parser, MP_PARSE_NODE_NULL);
    4674:	f107 031c 	add.w	r3, r7, #28
    4678:	2100      	movs	r1, #0
    467a:	4618      	mov	r0, r3
    467c:	f7ff fbb6 	bl	3dec <push_result_node>
                        backtrack = false;
    4680:	2300      	movs	r3, #0
    4682:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
    4686:	e04b      	b.n	4720 <mp_parse+0x28c>
                        if (i > 1) {
    4688:	69bb      	ldr	r3, [r7, #24]
    468a:	2b01      	cmp	r3, #1
    468c:	f200 81f4 	bhi.w	4a78 <mp_parse+0x5e4>
                            goto next_rule;
    4690:	e740      	b.n	4514 <mp_parse+0x80>
                    if ((rule_arg[i] & RULE_ARG_KIND_MASK) == RULE_ARG_TOK) {
    4692:	69bb      	ldr	r3, [r7, #24]
    4694:	005b      	lsls	r3, r3, #1
    4696:	6e3a      	ldr	r2, [r7, #96]	; 0x60
    4698:	4413      	add	r3, r2
    469a:	881b      	ldrh	r3, [r3, #0]
    469c:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
    46a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    46a4:	d123      	bne.n	46ee <mp_parse+0x25a>
                        mp_token_kind_t tok_kind = rule_arg[i] & RULE_ARG_ARG_MASK;
    46a6:	69bb      	ldr	r3, [r7, #24]
    46a8:	005b      	lsls	r3, r3, #1
    46aa:	6e3a      	ldr	r2, [r7, #96]	; 0x60
    46ac:	4413      	add	r3, r2
    46ae:	881b      	ldrh	r3, [r3, #0]
    46b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
    46b4:	657b      	str	r3, [r7, #84]	; 0x54
                        if (lex->tok_kind == tok_kind) {
    46b6:	68bb      	ldr	r3, [r7, #8]
    46b8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    46ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    46bc:	429a      	cmp	r2, r3
    46be:	d10e      	bne.n	46de <mp_parse+0x24a>
                            if (tok_kind == MP_TOKEN_NAME) {
    46c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    46c2:	2b07      	cmp	r3, #7
    46c4:	d107      	bne.n	46d6 <mp_parse+0x242>
                                push_result_token(&parser, rule_id);
    46c6:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
    46ca:	f107 031c 	add.w	r3, r7, #28
    46ce:	4611      	mov	r1, r2
    46d0:	4618      	mov	r0, r3
    46d2:	f7ff fbe3 	bl	3e9c <push_result_token>
                            mp_lexer_to_next(lex);
    46d6:	68b8      	ldr	r0, [r7, #8]
    46d8:	f7fe fdaa 	bl	3230 <mp_lexer_to_next>
    46dc:	e01d      	b.n	471a <mp_parse+0x286>
                            if (i > 0) {
    46de:	69bb      	ldr	r3, [r7, #24]
    46e0:	2b00      	cmp	r3, #0
    46e2:	f040 81cb 	bne.w	4a7c <mp_parse+0x5e8>
                                backtrack = true;
    46e6:	2301      	movs	r3, #1
    46e8:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
                                goto next_rule;
    46ec:	e712      	b.n	4514 <mp_parse+0x80>
                        push_rule(&parser, rule_src_line, rule_id, i + 1); // save this and-rule
    46ee:	6979      	ldr	r1, [r7, #20]
    46f0:	69bb      	ldr	r3, [r7, #24]
    46f2:	3301      	adds	r3, #1
    46f4:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
    46f8:	f107 001c 	add.w	r0, r7, #28
    46fc:	f7ff f9d2 	bl	3aa4 <push_rule>
                        push_rule_from_arg(&parser, rule_arg[i]); // push child of and-rule
    4700:	69bb      	ldr	r3, [r7, #24]
    4702:	005b      	lsls	r3, r3, #1
    4704:	6e3a      	ldr	r2, [r7, #96]	; 0x60
    4706:	4413      	add	r3, r2
    4708:	881b      	ldrh	r3, [r3, #0]
    470a:	461a      	mov	r2, r3
    470c:	f107 031c 	add.w	r3, r7, #28
    4710:	4611      	mov	r1, r2
    4712:	4618      	mov	r0, r3
    4714:	f7ff fa04 	bl	3b20 <push_rule_from_arg>
                        goto next_rule;
    4718:	e6fc      	b.n	4514 <mp_parse+0x80>
                for (; i < n; ++i) {
    471a:	69bb      	ldr	r3, [r7, #24]
    471c:	3301      	adds	r3, #1
    471e:	61bb      	str	r3, [r7, #24]
    4720:	69ba      	ldr	r2, [r7, #24]
    4722:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    4724:	429a      	cmp	r2, r3
    4726:	d3b4      	bcc.n	4692 <mp_parse+0x1fe>
                assert(i == n);
    4728:	69ba      	ldr	r2, [r7, #24]
    472a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    472c:	429a      	cmp	r2, r3
    472e:	d006      	beq.n	473e <mp_parse+0x2aa>
    4730:	4b3b      	ldr	r3, [pc, #236]	; (4820 <mp_parse+0x38c>)
    4732:	4a38      	ldr	r2, [pc, #224]	; (4814 <mp_parse+0x380>)
    4734:	f240 31c7 	movw	r1, #967	; 0x3c7
    4738:	4837      	ldr	r0, [pc, #220]	; (4818 <mp_parse+0x384>)
    473a:	f016 ffc9 	bl	1b6d0 <__assert_func>
                if (input_kind != MP_PARSE_SINGLE_INPUT && rule_id == RULE_expr_stmt && peek_result(&parser, 0) == MP_PARSE_NODE_NULL) {
    473e:	687b      	ldr	r3, [r7, #4]
    4740:	2b00      	cmp	r3, #0
    4742:	d03c      	beq.n	47be <mp_parse+0x32a>
    4744:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
    4748:	2b05      	cmp	r3, #5
    474a:	d138      	bne.n	47be <mp_parse+0x32a>
    474c:	f107 031c 	add.w	r3, r7, #28
    4750:	2100      	movs	r1, #0
    4752:	4618      	mov	r0, r3
    4754:	f7ff fb22 	bl	3d9c <peek_result>
    4758:	4603      	mov	r3, r0
    475a:	2b00      	cmp	r3, #0
    475c:	d12f      	bne.n	47be <mp_parse+0x32a>
                    mp_parse_node_t p = peek_result(&parser, 1);
    475e:	f107 031c 	add.w	r3, r7, #28
    4762:	2101      	movs	r1, #1
    4764:	4618      	mov	r0, r3
    4766:	f7ff fb19 	bl	3d9c <peek_result>
    476a:	6538      	str	r0, [r7, #80]	; 0x50
                    if ((MP_PARSE_NODE_IS_LEAF(p) && !MP_PARSE_NODE_IS_ID(p))
    476c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    476e:	f003 0303 	and.w	r3, r3, #3
    4772:	2b00      	cmp	r3, #0
    4774:	d004      	beq.n	4780 <mp_parse+0x2ec>
    4776:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    4778:	f003 030f 	and.w	r3, r3, #15
    477c:	2b02      	cmp	r3, #2
    477e:	d10c      	bne.n	479a <mp_parse+0x306>
                        || MP_PARSE_NODE_IS_STRUCT_KIND(p, RULE_const_object)) {
    4780:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    4782:	2b00      	cmp	r3, #0
    4784:	d01b      	beq.n	47be <mp_parse+0x32a>
    4786:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    4788:	f003 0303 	and.w	r3, r3, #3
    478c:	2b00      	cmp	r3, #0
    478e:	d116      	bne.n	47be <mp_parse+0x32a>
    4790:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    4792:	685b      	ldr	r3, [r3, #4]
    4794:	b2db      	uxtb	r3, r3
    4796:	2b35      	cmp	r3, #53	; 0x35
    4798:	d111      	bne.n	47be <mp_parse+0x32a>
                        pop_result(&parser); // MP_PARSE_NODE_NULL
    479a:	f107 031c 	add.w	r3, r7, #28
    479e:	4618      	mov	r0, r3
    47a0:	f7ff fad6 	bl	3d50 <pop_result>
                        pop_result(&parser); // const expression (leaf or RULE_const_object)
    47a4:	f107 031c 	add.w	r3, r7, #28
    47a8:	4618      	mov	r0, r3
    47aa:	f7ff fad1 	bl	3d50 <pop_result>
                        push_result_rule(&parser, rule_src_line, RULE_pass_stmt, 0);
    47ae:	6979      	ldr	r1, [r7, #20]
    47b0:	f107 001c 	add.w	r0, r7, #28
    47b4:	2300      	movs	r3, #0
    47b6:	2208      	movs	r2, #8
    47b8:	f7ff fe08 	bl	43cc <push_result_rule>
                        break;
    47bc:	e142      	b.n	4a44 <mp_parse+0x5b0>
                i = 0;
    47be:	2300      	movs	r3, #0
    47c0:	61bb      	str	r3, [r7, #24]
                size_t num_not_nil = 0;
    47c2:	2300      	movs	r3, #0
    47c4:	67fb      	str	r3, [r7, #124]	; 0x7c
                for (size_t x = n; x > 0;) {
    47c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    47c8:	67bb      	str	r3, [r7, #120]	; 0x78
    47ca:	e03b      	b.n	4844 <mp_parse+0x3b0>
                    --x;
    47cc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    47ce:	3b01      	subs	r3, #1
    47d0:	67bb      	str	r3, [r7, #120]	; 0x78
                    if ((rule_arg[x] & RULE_ARG_KIND_MASK) == RULE_ARG_TOK) {
    47d2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    47d4:	005b      	lsls	r3, r3, #1
    47d6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
    47d8:	4413      	add	r3, r2
    47da:	881b      	ldrh	r3, [r3, #0]
    47dc:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
    47e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    47e4:	d11e      	bne.n	4824 <mp_parse+0x390>
                        mp_token_kind_t tok_kind = rule_arg[x] & RULE_ARG_ARG_MASK;
    47e6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    47e8:	005b      	lsls	r3, r3, #1
    47ea:	6e3a      	ldr	r2, [r7, #96]	; 0x60
    47ec:	4413      	add	r3, r2
    47ee:	881b      	ldrh	r3, [r3, #0]
    47f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
    47f4:	64fb      	str	r3, [r7, #76]	; 0x4c
                        if (tok_kind == MP_TOKEN_NAME) {
    47f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    47f8:	2b07      	cmp	r3, #7
    47fa:	d123      	bne.n	4844 <mp_parse+0x3b0>
                            i += 1;
    47fc:	69bb      	ldr	r3, [r7, #24]
    47fe:	3301      	adds	r3, #1
    4800:	61bb      	str	r3, [r7, #24]
                            num_not_nil += 1;
    4802:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    4804:	3301      	adds	r3, #1
    4806:	67fb      	str	r3, [r7, #124]	; 0x7c
    4808:	e01c      	b.n	4844 <mp_parse+0x3b0>
    480a:	bf00      	nop
    480c:	0001fa90 	.word	0x0001fa90
    4810:	0001fff0 	.word	0x0001fff0
    4814:	00020140 	.word	0x00020140
    4818:	0001ff80 	.word	0x0001ff80
    481c:	00020008 	.word	0x00020008
    4820:	00020010 	.word	0x00020010
                        if (peek_result(&parser, i) != MP_PARSE_NODE_NULL) {
    4824:	69ba      	ldr	r2, [r7, #24]
    4826:	f107 031c 	add.w	r3, r7, #28
    482a:	4611      	mov	r1, r2
    482c:	4618      	mov	r0, r3
    482e:	f7ff fab5 	bl	3d9c <peek_result>
    4832:	4603      	mov	r3, r0
    4834:	2b00      	cmp	r3, #0
    4836:	d002      	beq.n	483e <mp_parse+0x3aa>
                            num_not_nil += 1;
    4838:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    483a:	3301      	adds	r3, #1
    483c:	67fb      	str	r3, [r7, #124]	; 0x7c
                        i += 1;
    483e:	69bb      	ldr	r3, [r7, #24]
    4840:	3301      	adds	r3, #1
    4842:	61bb      	str	r3, [r7, #24]
                for (size_t x = n; x > 0;) {
    4844:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    4846:	2b00      	cmp	r3, #0
    4848:	d1c0      	bne.n	47cc <mp_parse+0x338>
                if (num_not_nil == 1 && (rule_act & RULE_ACT_ALLOW_IDENT)) {
    484a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    484c:	2b01      	cmp	r3, #1
    484e:	d124      	bne.n	489a <mp_parse+0x406>
    4850:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
    4854:	f003 0340 	and.w	r3, r3, #64	; 0x40
    4858:	2b00      	cmp	r3, #0
    485a:	d01e      	beq.n	489a <mp_parse+0x406>
                    mp_parse_node_t pn = MP_PARSE_NODE_NULL;
    485c:	2300      	movs	r3, #0
    485e:	677b      	str	r3, [r7, #116]	; 0x74
                    for (size_t x = 0; x < i; ++x) {
    4860:	2300      	movs	r3, #0
    4862:	673b      	str	r3, [r7, #112]	; 0x70
    4864:	e00d      	b.n	4882 <mp_parse+0x3ee>
                        mp_parse_node_t pn2 = pop_result(&parser);
    4866:	f107 031c 	add.w	r3, r7, #28
    486a:	4618      	mov	r0, r3
    486c:	f7ff fa70 	bl	3d50 <pop_result>
    4870:	64b8      	str	r0, [r7, #72]	; 0x48
                        if (pn2 != MP_PARSE_NODE_NULL) {
    4872:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    4874:	2b00      	cmp	r3, #0
    4876:	d001      	beq.n	487c <mp_parse+0x3e8>
                            pn = pn2;
    4878:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    487a:	677b      	str	r3, [r7, #116]	; 0x74
                    for (size_t x = 0; x < i; ++x) {
    487c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
    487e:	3301      	adds	r3, #1
    4880:	673b      	str	r3, [r7, #112]	; 0x70
    4882:	69bb      	ldr	r3, [r7, #24]
    4884:	6f3a      	ldr	r2, [r7, #112]	; 0x70
    4886:	429a      	cmp	r2, r3
    4888:	d3ed      	bcc.n	4866 <mp_parse+0x3d2>
                    push_result_node(&parser, pn);
    488a:	f107 031c 	add.w	r3, r7, #28
    488e:	6f79      	ldr	r1, [r7, #116]	; 0x74
    4890:	4618      	mov	r0, r3
    4892:	f7ff faab 	bl	3dec <push_result_node>
                if (num_not_nil == 1 && (rule_act & RULE_ACT_ALLOW_IDENT)) {
    4896:	bf00      	nop
                break;
    4898:	e0d4      	b.n	4a44 <mp_parse+0x5b0>
                    if (rule_act & RULE_ACT_ADD_BLANK) {
    489a:	f997 3066 	ldrsb.w	r3, [r7, #102]	; 0x66
    489e:	2b00      	cmp	r3, #0
    48a0:	da08      	bge.n	48b4 <mp_parse+0x420>
                        push_result_node(&parser, MP_PARSE_NODE_NULL);
    48a2:	f107 031c 	add.w	r3, r7, #28
    48a6:	2100      	movs	r1, #0
    48a8:	4618      	mov	r0, r3
    48aa:	f7ff fa9f 	bl	3dec <push_result_node>
                        i += 1;
    48ae:	69bb      	ldr	r3, [r7, #24]
    48b0:	3301      	adds	r3, #1
    48b2:	61bb      	str	r3, [r7, #24]
                    push_result_rule(&parser, rule_src_line, rule_id, i);
    48b4:	6979      	ldr	r1, [r7, #20]
    48b6:	69bb      	ldr	r3, [r7, #24]
    48b8:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
    48bc:	f107 001c 	add.w	r0, r7, #28
    48c0:	f7ff fd84 	bl	43cc <push_result_rule>
                break;
    48c4:	e0be      	b.n	4a44 <mp_parse+0x5b0>
                assert((rule_act & RULE_ACT_KIND_MASK) == RULE_ACT_LIST);
    48c6:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
    48ca:	f003 0330 	and.w	r3, r3, #48	; 0x30
    48ce:	2b30      	cmp	r3, #48	; 0x30
    48d0:	d006      	beq.n	48e0 <mp_parse+0x44c>
    48d2:	4b90      	ldr	r3, [pc, #576]	; (4b14 <mp_parse+0x680>)
    48d4:	4a90      	ldr	r2, [pc, #576]	; (4b18 <mp_parse+0x684>)
    48d6:	f240 410a 	movw	r1, #1034	; 0x40a
    48da:	4890      	ldr	r0, [pc, #576]	; (4b1c <mp_parse+0x688>)
    48dc:	f016 fef8 	bl	1b6d0 <__assert_func>
                if (backtrack) {
    48e0:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
    48e4:	2b00      	cmp	r3, #0
    48e6:	d025      	beq.n	4934 <mp_parse+0x4a0>
                    had_trailing_sep = false;
    48e8:	2300      	movs	r3, #0
    48ea:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
                    if (n == 2) {
    48ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    48f0:	2b02      	cmp	r3, #2
    48f2:	d107      	bne.n	4904 <mp_parse+0x470>
                        if (i == 1) {
    48f4:	69bb      	ldr	r3, [r7, #24]
    48f6:	2b01      	cmp	r3, #1
    48f8:	d100      	bne.n	48fc <mp_parse+0x468>
                            goto next_rule;
    48fa:	e60b      	b.n	4514 <mp_parse+0x80>
                            backtrack = false;
    48fc:	2300      	movs	r3, #0
    48fe:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
    4902:	e068      	b.n	49d6 <mp_parse+0x542>
                        if (i == 1) {
    4904:	69bb      	ldr	r3, [r7, #24]
    4906:	2b01      	cmp	r3, #1
    4908:	d100      	bne.n	490c <mp_parse+0x478>
                            goto next_rule;
    490a:	e603      	b.n	4514 <mp_parse+0x80>
                        } else if ((i & 1) == 1) {
    490c:	69bb      	ldr	r3, [r7, #24]
    490e:	f003 0301 	and.w	r3, r3, #1
    4912:	2b00      	cmp	r3, #0
    4914:	d00a      	beq.n	492c <mp_parse+0x498>
                            if (n == 3) {
    4916:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    4918:	2b03      	cmp	r3, #3
    491a:	f040 80b1 	bne.w	4a80 <mp_parse+0x5ec>
                                had_trailing_sep = true;
    491e:	2301      	movs	r3, #1
    4920:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
                                backtrack = false;
    4924:	2300      	movs	r3, #0
    4926:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
    492a:	e054      	b.n	49d6 <mp_parse+0x542>
                            backtrack = false;
    492c:	2300      	movs	r3, #0
    492e:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
    4932:	e050      	b.n	49d6 <mp_parse+0x542>
                        size_t arg = rule_arg[i & 1 & n];
    4934:	69ba      	ldr	r2, [r7, #24]
    4936:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    4938:	4013      	ands	r3, r2
    493a:	f003 0301 	and.w	r3, r3, #1
    493e:	005b      	lsls	r3, r3, #1
    4940:	6e3a      	ldr	r2, [r7, #96]	; 0x60
    4942:	4413      	add	r3, r2
    4944:	881b      	ldrh	r3, [r3, #0]
    4946:	647b      	str	r3, [r7, #68]	; 0x44
                        if ((arg & RULE_ARG_KIND_MASK) == RULE_ARG_TOK) {
    4948:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    494a:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
    494e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    4952:	d123      	bne.n	499c <mp_parse+0x508>
                            if (lex->tok_kind == (arg & RULE_ARG_ARG_MASK)) {
    4954:	68bb      	ldr	r3, [r7, #8]
    4956:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    4958:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    495a:	f3c3 030b 	ubfx	r3, r3, #0, #12
    495e:	429a      	cmp	r2, r3
    4960:	d115      	bne.n	498e <mp_parse+0x4fa>
                                if (i & 1 & n) {
    4962:	69ba      	ldr	r2, [r7, #24]
    4964:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    4966:	4013      	ands	r3, r2
    4968:	f003 0301 	and.w	r3, r3, #1
    496c:	2b00      	cmp	r3, #0
    496e:	d107      	bne.n	4980 <mp_parse+0x4ec>
                                    push_result_token(&parser, rule_id);
    4970:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
    4974:	f107 031c 	add.w	r3, r7, #28
    4978:	4611      	mov	r1, r2
    497a:	4618      	mov	r0, r3
    497c:	f7ff fa8e 	bl	3e9c <push_result_token>
                                mp_lexer_to_next(lex);
    4980:	68b8      	ldr	r0, [r7, #8]
    4982:	f7fe fc55 	bl	3230 <mp_lexer_to_next>
                                i += 1;
    4986:	69bb      	ldr	r3, [r7, #24]
    4988:	3301      	adds	r3, #1
    498a:	61bb      	str	r3, [r7, #24]
    498c:	e7d2      	b.n	4934 <mp_parse+0x4a0>
                                i += 1;
    498e:	69bb      	ldr	r3, [r7, #24]
    4990:	3301      	adds	r3, #1
    4992:	61bb      	str	r3, [r7, #24]
                                backtrack = true;
    4994:	2301      	movs	r3, #1
    4996:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
                                goto list_backtrack;
    499a:	e7a5      	b.n	48e8 <mp_parse+0x454>
                            assert((arg & RULE_ARG_KIND_MASK) == RULE_ARG_RULE);
    499c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    499e:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
    49a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
    49a6:	d006      	beq.n	49b6 <mp_parse+0x522>
    49a8:	4b5d      	ldr	r3, [pc, #372]	; (4b20 <mp_parse+0x68c>)
    49aa:	4a5b      	ldr	r2, [pc, #364]	; (4b18 <mp_parse+0x684>)
    49ac:	f240 4142 	movw	r1, #1090	; 0x442
    49b0:	485a      	ldr	r0, [pc, #360]	; (4b1c <mp_parse+0x688>)
    49b2:	f016 fe8d 	bl	1b6d0 <__assert_func>
                            push_rule(&parser, rule_src_line, rule_id, i + 1); // save this list-rule
    49b6:	6979      	ldr	r1, [r7, #20]
    49b8:	69bb      	ldr	r3, [r7, #24]
    49ba:	3301      	adds	r3, #1
    49bc:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
    49c0:	f107 001c 	add.w	r0, r7, #28
    49c4:	f7ff f86e 	bl	3aa4 <push_rule>
                            push_rule_from_arg(&parser, arg); // push child of list-rule
    49c8:	f107 031c 	add.w	r3, r7, #28
    49cc:	6c79      	ldr	r1, [r7, #68]	; 0x44
    49ce:	4618      	mov	r0, r3
    49d0:	f7ff f8a6 	bl	3b20 <push_rule_from_arg>
                            goto next_rule;
    49d4:	e59e      	b.n	4514 <mp_parse+0x80>
                assert(i >= 1);
    49d6:	69bb      	ldr	r3, [r7, #24]
    49d8:	2b00      	cmp	r3, #0
    49da:	d106      	bne.n	49ea <mp_parse+0x556>
    49dc:	4b51      	ldr	r3, [pc, #324]	; (4b24 <mp_parse+0x690>)
    49de:	4a4e      	ldr	r2, [pc, #312]	; (4b18 <mp_parse+0x684>)
    49e0:	f240 4149 	movw	r1, #1097	; 0x449
    49e4:	484d      	ldr	r0, [pc, #308]	; (4b1c <mp_parse+0x688>)
    49e6:	f016 fe73 	bl	1b6d0 <__assert_func>
                i -= 1;
    49ea:	69bb      	ldr	r3, [r7, #24]
    49ec:	3b01      	subs	r3, #1
    49ee:	61bb      	str	r3, [r7, #24]
                if ((n & 1) && (rule_arg[1] & RULE_ARG_KIND_MASK) == RULE_ARG_TOK) {
    49f0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    49f2:	f003 0301 	and.w	r3, r3, #1
    49f6:	2b00      	cmp	r3, #0
    49f8:	d00b      	beq.n	4a12 <mp_parse+0x57e>
    49fa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    49fc:	3302      	adds	r3, #2
    49fe:	881b      	ldrh	r3, [r3, #0]
    4a00:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
    4a04:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    4a08:	d103      	bne.n	4a12 <mp_parse+0x57e>
                    i = (i + 1) / 2;
    4a0a:	69bb      	ldr	r3, [r7, #24]
    4a0c:	3301      	adds	r3, #1
    4a0e:	085b      	lsrs	r3, r3, #1
    4a10:	61bb      	str	r3, [r7, #24]
                if (i == 1) {
    4a12:	69bb      	ldr	r3, [r7, #24]
    4a14:	2b01      	cmp	r3, #1
    4a16:	d10c      	bne.n	4a32 <mp_parse+0x59e>
                    if (had_trailing_sep) {
    4a18:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
    4a1c:	2b00      	cmp	r3, #0
    4a1e:	d010      	beq.n	4a42 <mp_parse+0x5ae>
                        push_result_rule(&parser, rule_src_line, rule_id, i);
    4a20:	6979      	ldr	r1, [r7, #20]
    4a22:	69bb      	ldr	r3, [r7, #24]
    4a24:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
    4a28:	f107 001c 	add.w	r0, r7, #28
    4a2c:	f7ff fcce 	bl	43cc <push_result_rule>
                break;
    4a30:	e007      	b.n	4a42 <mp_parse+0x5ae>
                    push_result_rule(&parser, rule_src_line, rule_id, i);
    4a32:	6979      	ldr	r1, [r7, #20]
    4a34:	69bb      	ldr	r3, [r7, #24]
    4a36:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
    4a3a:	f107 001c 	add.w	r0, r7, #28
    4a3e:	f7ff fcc5 	bl	43cc <push_result_rule>
                break;
    4a42:	bf00      	nop
    }
    4a44:	e566      	b.n	4514 <mp_parse+0x80>
        (void)m_renew_maybe(byte, parser.cur_chunk,
    4a46:	6c38      	ldr	r0, [r7, #64]	; 0x40
    4a48:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    4a4a:	685b      	ldr	r3, [r3, #4]
    4a4c:	3308      	adds	r3, #8
    4a4e:	2200      	movs	r2, #0
    4a50:	4619      	mov	r1, r3
    4a52:	f7fb fcc9 	bl	3e8 <m_realloc_maybe>
            sizeof(mp_parse_chunk_t) + parser.cur_chunk->alloc,
            sizeof(mp_parse_chunk_t) + parser.cur_chunk->union_.used,
            false);
        parser.cur_chunk->alloc = parser.cur_chunk->union_.used;
    4a56:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    4a58:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    4a5a:	6852      	ldr	r2, [r2, #4]
    4a5c:	601a      	str	r2, [r3, #0]
        parser.cur_chunk->union_.next = parser.tree.chunk;
    4a5e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    4a60:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    4a62:	605a      	str	r2, [r3, #4]
        parser.tree.chunk = parser.cur_chunk;
    4a64:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    4a66:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

    if (
        lex->tok_kind != MP_TOKEN_END // check we are at the end of the token stream
    4a68:	68bb      	ldr	r3, [r7, #8]
    4a6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    if (
    4a6c:	2b00      	cmp	r3, #0
    4a6e:	d108      	bne.n	4a82 <mp_parse+0x5ee>
        || parser.result_stack_top == 0 // check that we got a node (can fail on empty input)
    4a70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    4a72:	2b00      	cmp	r3, #0
    4a74:	d129      	bne.n	4aca <mp_parse+0x636>
    4a76:	e004      	b.n	4a82 <mp_parse+0x5ee>
                            goto syntax_error;
    4a78:	bf00      	nop
    4a7a:	e002      	b.n	4a82 <mp_parse+0x5ee>
                                goto syntax_error;
    4a7c:	bf00      	nop
    4a7e:	e000      	b.n	4a82 <mp_parse+0x5ee>
                                goto syntax_error;
    4a80:	bf00      	nop
        ) {
    syntax_error:;
        mp_obj_t exc;
        if (lex->tok_kind == MP_TOKEN_INDENT) {
    4a82:	68bb      	ldr	r3, [r7, #8]
    4a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    4a86:	2b05      	cmp	r3, #5
    4a88:	d105      	bne.n	4a96 <mp_parse+0x602>
            exc = mp_obj_new_exception_msg(&mp_type_IndentationError,
    4a8a:	4927      	ldr	r1, [pc, #156]	; (4b28 <mp_parse+0x694>)
    4a8c:	4827      	ldr	r0, [pc, #156]	; (4b2c <mp_parse+0x698>)
    4a8e:	f00a fe9d 	bl	f7cc <mp_obj_new_exception_msg>
    4a92:	66b8      	str	r0, [r7, #104]	; 0x68
    4a94:	e00e      	b.n	4ab4 <mp_parse+0x620>
                "unexpected indent");
        } else if (lex->tok_kind == MP_TOKEN_DEDENT_MISMATCH) {
    4a96:	68bb      	ldr	r3, [r7, #8]
    4a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    4a9a:	2b02      	cmp	r3, #2
    4a9c:	d105      	bne.n	4aaa <mp_parse+0x616>
            exc = mp_obj_new_exception_msg(&mp_type_IndentationError,
    4a9e:	4924      	ldr	r1, [pc, #144]	; (4b30 <mp_parse+0x69c>)
    4aa0:	4822      	ldr	r0, [pc, #136]	; (4b2c <mp_parse+0x698>)
    4aa2:	f00a fe93 	bl	f7cc <mp_obj_new_exception_msg>
    4aa6:	66b8      	str	r0, [r7, #104]	; 0x68
    4aa8:	e004      	b.n	4ab4 <mp_parse+0x620>
                "unindent does not match any outer indentation level");
        } else {
            exc = mp_obj_new_exception_msg(&mp_type_SyntaxError,
    4aaa:	4922      	ldr	r1, [pc, #136]	; (4b34 <mp_parse+0x6a0>)
    4aac:	4822      	ldr	r0, [pc, #136]	; (4b38 <mp_parse+0x6a4>)
    4aae:	f00a fe8d 	bl	f7cc <mp_obj_new_exception_msg>
    4ab2:	66b8      	str	r0, [r7, #104]	; 0x68
                "invalid syntax");
        }
        // add traceback to give info about file name and location
        // we don't have a 'block' name, so just pass the NULL qstr to indicate this
        mp_obj_exception_add_traceback(exc, lex->source_name, lex->tok_line, MP_QSTR_NULL);
    4ab4:	68bb      	ldr	r3, [r7, #8]
    4ab6:	6819      	ldr	r1, [r3, #0]
    4ab8:	68bb      	ldr	r3, [r7, #8]
    4aba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    4abc:	2300      	movs	r3, #0
    4abe:	6eb8      	ldr	r0, [r7, #104]	; 0x68
    4ac0:	f00b f800 	bl	fac4 <mp_obj_exception_add_traceback>
        nlr_raise(exc);
    4ac4:	6eb8      	ldr	r0, [r7, #104]	; 0x68
    4ac6:	f7fb fc0b 	bl	2e0 <nlr_jump>
    }

    // get the root parse node that we created
    assert(parser.result_stack_top == 1);
    4aca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    4acc:	2b01      	cmp	r3, #1
    4ace:	d006      	beq.n	4ade <mp_parse+0x64a>
    4ad0:	4b1a      	ldr	r3, [pc, #104]	; (4b3c <mp_parse+0x6a8>)
    4ad2:	4a11      	ldr	r2, [pc, #68]	; (4b18 <mp_parse+0x684>)
    4ad4:	f44f 6191 	mov.w	r1, #1160	; 0x488
    4ad8:	4810      	ldr	r0, [pc, #64]	; (4b1c <mp_parse+0x688>)
    4ada:	f016 fdf9 	bl	1b6d0 <__assert_func>
    parser.tree.root = parser.result_stack[0];
    4ade:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    4ae0:	681b      	ldr	r3, [r3, #0]
    4ae2:	63bb      	str	r3, [r7, #56]	; 0x38

    // free the memory that we don't need anymore
    m_del(rule_stack_t, parser.rule_stack, parser.rule_stack_alloc);
    4ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    4ae6:	4618      	mov	r0, r3
    4ae8:	f7fb fc92 	bl	410 <m_free>
    m_del(mp_parse_node_t, parser.result_stack, parser.result_stack_alloc);
    4aec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    4aee:	4618      	mov	r0, r3
    4af0:	f7fb fc8e 	bl	410 <m_free>

    // we also free the lexer on behalf of the caller
    mp_lexer_free(lex);
    4af4:	68b8      	ldr	r0, [r7, #8]
    4af6:	f7fe feeb 	bl	38d0 <mp_lexer_free>

    return parser.tree;
    4afa:	68fb      	ldr	r3, [r7, #12]
    4afc:	461a      	mov	r2, r3
    4afe:	f107 0338 	add.w	r3, r7, #56	; 0x38
    4b02:	e893 0003 	ldmia.w	r3, {r0, r1}
    4b06:	e882 0003 	stmia.w	r2, {r0, r1}
}
    4b0a:	68f8      	ldr	r0, [r7, #12]
    4b0c:	3788      	adds	r7, #136	; 0x88
    4b0e:	46bd      	mov	sp, r7
    4b10:	bd80      	pop	{r7, pc}
    4b12:	bf00      	nop
    4b14:	00020018 	.word	0x00020018
    4b18:	00020140 	.word	0x00020140
    4b1c:	0001ff80 	.word	0x0001ff80
    4b20:	0002004c 	.word	0x0002004c
    4b24:	00020078 	.word	0x00020078
    4b28:	00020080 	.word	0x00020080
    4b2c:	0002265c 	.word	0x0002265c
    4b30:	00020094 	.word	0x00020094
    4b34:	000200c8 	.word	0x000200c8
    4b38:	00022620 	.word	0x00022620
    4b3c:	000200d8 	.word	0x000200d8

00004b40 <mp_parse_tree_clear>:

void mp_parse_tree_clear(mp_parse_tree_t *tree) {
    4b40:	b580      	push	{r7, lr}
    4b42:	b084      	sub	sp, #16
    4b44:	af00      	add	r7, sp, #0
    4b46:	6078      	str	r0, [r7, #4]
    mp_parse_chunk_t *chunk = tree->chunk;
    4b48:	687b      	ldr	r3, [r7, #4]
    4b4a:	685b      	ldr	r3, [r3, #4]
    4b4c:	60fb      	str	r3, [r7, #12]
    while (chunk != NULL) {
    4b4e:	e007      	b.n	4b60 <mp_parse_tree_clear+0x20>
        mp_parse_chunk_t *next = chunk->union_.next;
    4b50:	68fb      	ldr	r3, [r7, #12]
    4b52:	685b      	ldr	r3, [r3, #4]
    4b54:	60bb      	str	r3, [r7, #8]
        m_del(byte, chunk, sizeof(mp_parse_chunk_t) + chunk->alloc);
    4b56:	68f8      	ldr	r0, [r7, #12]
    4b58:	f7fb fc5a 	bl	410 <m_free>
        chunk = next;
    4b5c:	68bb      	ldr	r3, [r7, #8]
    4b5e:	60fb      	str	r3, [r7, #12]
    while (chunk != NULL) {
    4b60:	68fb      	ldr	r3, [r7, #12]
    4b62:	2b00      	cmp	r3, #0
    4b64:	d1f4      	bne.n	4b50 <mp_parse_tree_clear+0x10>
    }
}
    4b66:	bf00      	nop
    4b68:	3710      	adds	r7, #16
    4b6a:	46bd      	mov	sp, r7
    4b6c:	bd80      	pop	{r7, pc}
    4b6e:	bf00      	nop

00004b70 <scope_new>:
    [SCOPE_DICT_COMP] = MP_QSTR__lt_dictcomp_gt_,
    [SCOPE_SET_COMP] = MP_QSTR__lt_setcomp_gt_,
    [SCOPE_GEN_EXPR] = MP_QSTR__lt_genexpr_gt_,
};

scope_t *scope_new(scope_kind_t kind, mp_parse_node_t pn, qstr source_file, mp_uint_t emit_options) {
    4b70:	b580      	push	{r7, lr}
    4b72:	b086      	sub	sp, #24
    4b74:	af00      	add	r7, sp, #0
    4b76:	60f8      	str	r0, [r7, #12]
    4b78:	60b9      	str	r1, [r7, #8]
    4b7a:	607a      	str	r2, [r7, #4]
    4b7c:	603b      	str	r3, [r7, #0]
    scope_t *scope = m_new0(scope_t, 1);
    4b7e:	2030      	movs	r0, #48	; 0x30
    4b80:	f7fb fc0a 	bl	398 <m_malloc0>
    4b84:	6178      	str	r0, [r7, #20]
    scope->kind = kind;
    4b86:	697b      	ldr	r3, [r7, #20]
    4b88:	68fa      	ldr	r2, [r7, #12]
    4b8a:	601a      	str	r2, [r3, #0]
    scope->pn = pn;
    4b8c:	697b      	ldr	r3, [r7, #20]
    4b8e:	68ba      	ldr	r2, [r7, #8]
    4b90:	60da      	str	r2, [r3, #12]
    scope->source_file = source_file;
    4b92:	687b      	ldr	r3, [r7, #4]
    4b94:	b29a      	uxth	r2, r3
    4b96:	697b      	ldr	r3, [r7, #20]
    4b98:	821a      	strh	r2, [r3, #16]
    if (kind == SCOPE_FUNCTION || kind == SCOPE_CLASS) {
    4b9a:	68fb      	ldr	r3, [r7, #12]
    4b9c:	2b07      	cmp	r3, #7
    4b9e:	d002      	beq.n	4ba6 <scope_new+0x36>
    4ba0:	68fb      	ldr	r3, [r7, #12]
    4ba2:	2b01      	cmp	r3, #1
    4ba4:	d114      	bne.n	4bd0 <scope_new+0x60>
        assert(MP_PARSE_NODE_IS_STRUCT(pn));
    4ba6:	68bb      	ldr	r3, [r7, #8]
    4ba8:	2b00      	cmp	r3, #0
    4baa:	d004      	beq.n	4bb6 <scope_new+0x46>
    4bac:	68bb      	ldr	r3, [r7, #8]
    4bae:	f003 0303 	and.w	r3, r3, #3
    4bb2:	2b00      	cmp	r3, #0
    4bb4:	d005      	beq.n	4bc2 <scope_new+0x52>
    4bb6:	4b17      	ldr	r3, [pc, #92]	; (4c14 <scope_new+0xa4>)
    4bb8:	4a17      	ldr	r2, [pc, #92]	; (4c18 <scope_new+0xa8>)
    4bba:	2131      	movs	r1, #49	; 0x31
    4bbc:	4817      	ldr	r0, [pc, #92]	; (4c1c <scope_new+0xac>)
    4bbe:	f016 fd87 	bl	1b6d0 <__assert_func>
        scope->simple_name = MP_PARSE_NODE_LEAF_ARG(((mp_parse_node_struct_t*)pn)->nodes[0]);
    4bc2:	68bb      	ldr	r3, [r7, #8]
    4bc4:	689b      	ldr	r3, [r3, #8]
    4bc6:	091b      	lsrs	r3, r3, #4
    4bc8:	b29a      	uxth	r2, r3
    4bca:	697b      	ldr	r3, [r7, #20]
    4bcc:	825a      	strh	r2, [r3, #18]
    4bce:	e006      	b.n	4bde <scope_new+0x6e>
    } else {
        scope->simple_name = scope_simple_name_table[kind];
    4bd0:	4a13      	ldr	r2, [pc, #76]	; (4c20 <scope_new+0xb0>)
    4bd2:	68fb      	ldr	r3, [r7, #12]
    4bd4:	4413      	add	r3, r2
    4bd6:	781b      	ldrb	r3, [r3, #0]
    4bd8:	b29a      	uxth	r2, r3
    4bda:	697b      	ldr	r3, [r7, #20]
    4bdc:	825a      	strh	r2, [r3, #18]
    }
    scope->raw_code = mp_emit_glue_new_raw_code();
    4bde:	f006 fc31 	bl	b444 <mp_emit_glue_new_raw_code>
    4be2:	4602      	mov	r2, r0
    4be4:	697b      	ldr	r3, [r7, #20]
    4be6:	615a      	str	r2, [r3, #20]
    scope->emit_options = emit_options;
    4be8:	683b      	ldr	r3, [r7, #0]
    4bea:	b2da      	uxtb	r2, r3
    4bec:	697b      	ldr	r3, [r7, #20]
    4bee:	765a      	strb	r2, [r3, #25]
    scope->id_info_alloc = MICROPY_ALLOC_SCOPE_ID_INIT;
    4bf0:	697b      	ldr	r3, [r7, #20]
    4bf2:	2204      	movs	r2, #4
    4bf4:	84da      	strh	r2, [r3, #38]	; 0x26
    scope->id_info = m_new(id_info_t, scope->id_info_alloc);
    4bf6:	697b      	ldr	r3, [r7, #20]
    4bf8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
    4bfa:	00db      	lsls	r3, r3, #3
    4bfc:	4618      	mov	r0, r3
    4bfe:	f7fb fb8d 	bl	31c <m_malloc>
    4c02:	4602      	mov	r2, r0
    4c04:	697b      	ldr	r3, [r7, #20]
    4c06:	62da      	str	r2, [r3, #44]	; 0x2c

    return scope;
    4c08:	697b      	ldr	r3, [r7, #20]
}
    4c0a:	4618      	mov	r0, r3
    4c0c:	3718      	adds	r7, #24
    4c0e:	46bd      	mov	sp, r7
    4c10:	bd80      	pop	{r7, pc}
    4c12:	bf00      	nop
    4c14:	00020154 	.word	0x00020154
    4c18:	000201f0 	.word	0x000201f0
    4c1c:	00020170 	.word	0x00020170
    4c20:	0002014c 	.word	0x0002014c

00004c24 <scope_free>:

void scope_free(scope_t *scope) {
    4c24:	b580      	push	{r7, lr}
    4c26:	b082      	sub	sp, #8
    4c28:	af00      	add	r7, sp, #0
    4c2a:	6078      	str	r0, [r7, #4]
    m_del(id_info_t, scope->id_info, scope->id_info_alloc);
    4c2c:	687b      	ldr	r3, [r7, #4]
    4c2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    4c30:	4618      	mov	r0, r3
    4c32:	f7fb fbed 	bl	410 <m_free>
    m_del(scope_t, scope, 1);
    4c36:	6878      	ldr	r0, [r7, #4]
    4c38:	f7fb fbea 	bl	410 <m_free>
}
    4c3c:	bf00      	nop
    4c3e:	3708      	adds	r7, #8
    4c40:	46bd      	mov	sp, r7
    4c42:	bd80      	pop	{r7, pc}

00004c44 <scope_find_or_add_id>:

id_info_t *scope_find_or_add_id(scope_t *scope, qstr qst, bool *added) {
    4c44:	b580      	push	{r7, lr}
    4c46:	b086      	sub	sp, #24
    4c48:	af00      	add	r7, sp, #0
    4c4a:	60f8      	str	r0, [r7, #12]
    4c4c:	60b9      	str	r1, [r7, #8]
    4c4e:	607a      	str	r2, [r7, #4]
    id_info_t *id_info = scope_find(scope, qst);
    4c50:	68b9      	ldr	r1, [r7, #8]
    4c52:	68f8      	ldr	r0, [r7, #12]
    4c54:	f000 f842 	bl	4cdc <scope_find>
    4c58:	6178      	str	r0, [r7, #20]
    if (id_info != NULL) {
    4c5a:	697b      	ldr	r3, [r7, #20]
    4c5c:	2b00      	cmp	r3, #0
    4c5e:	d004      	beq.n	4c6a <scope_find_or_add_id+0x26>
        *added = false;
    4c60:	687b      	ldr	r3, [r7, #4]
    4c62:	2200      	movs	r2, #0
    4c64:	701a      	strb	r2, [r3, #0]
        return id_info;
    4c66:	697b      	ldr	r3, [r7, #20]
    4c68:	e033      	b.n	4cd2 <scope_find_or_add_id+0x8e>
    }

    // make sure we have enough memory
    if (scope->id_info_len >= scope->id_info_alloc) {
    4c6a:	68fb      	ldr	r3, [r7, #12]
    4c6c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
    4c6e:	68fb      	ldr	r3, [r7, #12]
    4c70:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
    4c72:	429a      	cmp	r2, r3
    4c74:	d312      	bcc.n	4c9c <scope_find_or_add_id+0x58>
        scope->id_info = m_renew(id_info_t, scope->id_info, scope->id_info_alloc, scope->id_info_alloc + MICROPY_ALLOC_SCOPE_ID_INC);
    4c76:	68fb      	ldr	r3, [r7, #12]
    4c78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4c7a:	68fb      	ldr	r3, [r7, #12]
    4c7c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
    4c7e:	3306      	adds	r3, #6
    4c80:	00db      	lsls	r3, r3, #3
    4c82:	4619      	mov	r1, r3
    4c84:	4610      	mov	r0, r2
    4c86:	f7fb fb95 	bl	3b4 <m_realloc>
    4c8a:	4602      	mov	r2, r0
    4c8c:	68fb      	ldr	r3, [r7, #12]
    4c8e:	62da      	str	r2, [r3, #44]	; 0x2c
        scope->id_info_alloc += MICROPY_ALLOC_SCOPE_ID_INC;
    4c90:	68fb      	ldr	r3, [r7, #12]
    4c92:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
    4c94:	3306      	adds	r3, #6
    4c96:	b29a      	uxth	r2, r3
    4c98:	68fb      	ldr	r3, [r7, #12]
    4c9a:	84da      	strh	r2, [r3, #38]	; 0x26
    }

    // add new id to end of array of all ids; this seems to match CPython
    // important thing is that function arguments are first, but that is
    // handled by the compiler because it adds arguments before compiling the body
    id_info = &scope->id_info[scope->id_info_len++];
    4c9c:	68fb      	ldr	r3, [r7, #12]
    4c9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4ca0:	68fb      	ldr	r3, [r7, #12]
    4ca2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    4ca4:	1c59      	adds	r1, r3, #1
    4ca6:	b288      	uxth	r0, r1
    4ca8:	68f9      	ldr	r1, [r7, #12]
    4caa:	8508      	strh	r0, [r1, #40]	; 0x28
    4cac:	00db      	lsls	r3, r3, #3
    4cae:	4413      	add	r3, r2
    4cb0:	617b      	str	r3, [r7, #20]

    id_info->kind = 0;
    4cb2:	697b      	ldr	r3, [r7, #20]
    4cb4:	2200      	movs	r2, #0
    4cb6:	701a      	strb	r2, [r3, #0]
    id_info->flags = 0;
    4cb8:	697b      	ldr	r3, [r7, #20]
    4cba:	2200      	movs	r2, #0
    4cbc:	705a      	strb	r2, [r3, #1]
    id_info->local_num = 0;
    4cbe:	697b      	ldr	r3, [r7, #20]
    4cc0:	2200      	movs	r2, #0
    4cc2:	805a      	strh	r2, [r3, #2]
    id_info->qst = qst;
    4cc4:	697b      	ldr	r3, [r7, #20]
    4cc6:	68ba      	ldr	r2, [r7, #8]
    4cc8:	605a      	str	r2, [r3, #4]
    *added = true;
    4cca:	687b      	ldr	r3, [r7, #4]
    4ccc:	2201      	movs	r2, #1
    4cce:	701a      	strb	r2, [r3, #0]
    return id_info;
    4cd0:	697b      	ldr	r3, [r7, #20]
}
    4cd2:	4618      	mov	r0, r3
    4cd4:	3718      	adds	r7, #24
    4cd6:	46bd      	mov	sp, r7
    4cd8:	bd80      	pop	{r7, pc}
    4cda:	bf00      	nop

00004cdc <scope_find>:

id_info_t *scope_find(scope_t *scope, qstr qst) {
    4cdc:	b480      	push	{r7}
    4cde:	b085      	sub	sp, #20
    4ce0:	af00      	add	r7, sp, #0
    4ce2:	6078      	str	r0, [r7, #4]
    4ce4:	6039      	str	r1, [r7, #0]
    for (mp_uint_t i = 0; i < scope->id_info_len; i++) {
    4ce6:	2300      	movs	r3, #0
    4ce8:	60fb      	str	r3, [r7, #12]
    4cea:	e011      	b.n	4d10 <scope_find+0x34>
        if (scope->id_info[i].qst == qst) {
    4cec:	687b      	ldr	r3, [r7, #4]
    4cee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4cf0:	68fb      	ldr	r3, [r7, #12]
    4cf2:	00db      	lsls	r3, r3, #3
    4cf4:	4413      	add	r3, r2
    4cf6:	685a      	ldr	r2, [r3, #4]
    4cf8:	683b      	ldr	r3, [r7, #0]
    4cfa:	429a      	cmp	r2, r3
    4cfc:	d105      	bne.n	4d0a <scope_find+0x2e>
            return &scope->id_info[i];
    4cfe:	687b      	ldr	r3, [r7, #4]
    4d00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4d02:	68fb      	ldr	r3, [r7, #12]
    4d04:	00db      	lsls	r3, r3, #3
    4d06:	4413      	add	r3, r2
    4d08:	e009      	b.n	4d1e <scope_find+0x42>
    for (mp_uint_t i = 0; i < scope->id_info_len; i++) {
    4d0a:	68fb      	ldr	r3, [r7, #12]
    4d0c:	3301      	adds	r3, #1
    4d0e:	60fb      	str	r3, [r7, #12]
    4d10:	687b      	ldr	r3, [r7, #4]
    4d12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    4d14:	461a      	mov	r2, r3
    4d16:	68fb      	ldr	r3, [r7, #12]
    4d18:	429a      	cmp	r2, r3
    4d1a:	d8e7      	bhi.n	4cec <scope_find+0x10>
        }
    }
    return NULL;
    4d1c:	2300      	movs	r3, #0
}
    4d1e:	4618      	mov	r0, r3
    4d20:	3714      	adds	r7, #20
    4d22:	46bd      	mov	sp, r7
    4d24:	f85d 7b04 	ldr.w	r7, [sp], #4
    4d28:	4770      	bx	lr
    4d2a:	bf00      	nop

00004d2c <scope_find_global>:

id_info_t *scope_find_global(scope_t *scope, qstr qst) {
    4d2c:	b580      	push	{r7, lr}
    4d2e:	b082      	sub	sp, #8
    4d30:	af00      	add	r7, sp, #0
    4d32:	6078      	str	r0, [r7, #4]
    4d34:	6039      	str	r1, [r7, #0]
    while (scope->parent != NULL) {
    4d36:	e002      	b.n	4d3e <scope_find_global+0x12>
        scope = scope->parent;
    4d38:	687b      	ldr	r3, [r7, #4]
    4d3a:	685b      	ldr	r3, [r3, #4]
    4d3c:	607b      	str	r3, [r7, #4]
    while (scope->parent != NULL) {
    4d3e:	687b      	ldr	r3, [r7, #4]
    4d40:	685b      	ldr	r3, [r3, #4]
    4d42:	2b00      	cmp	r3, #0
    4d44:	d1f8      	bne.n	4d38 <scope_find_global+0xc>
    }
    return scope_find(scope, qst);
    4d46:	6839      	ldr	r1, [r7, #0]
    4d48:	6878      	ldr	r0, [r7, #4]
    4d4a:	f7ff ffc7 	bl	4cdc <scope_find>
    4d4e:	4603      	mov	r3, r0
}
    4d50:	4618      	mov	r0, r3
    4d52:	3708      	adds	r7, #8
    4d54:	46bd      	mov	sp, r7
    4d56:	bd80      	pop	{r7, pc}

00004d58 <scope_close_over_in_parents>:

STATIC void scope_close_over_in_parents(scope_t *scope, qstr qst) {
    4d58:	b580      	push	{r7, lr}
    4d5a:	b086      	sub	sp, #24
    4d5c:	af00      	add	r7, sp, #0
    4d5e:	6078      	str	r0, [r7, #4]
    4d60:	6039      	str	r1, [r7, #0]
    assert(scope->parent != NULL); // we should have at least 1 parent
    4d62:	687b      	ldr	r3, [r7, #4]
    4d64:	685b      	ldr	r3, [r3, #4]
    4d66:	2b00      	cmp	r3, #0
    4d68:	d105      	bne.n	4d76 <scope_close_over_in_parents+0x1e>
    4d6a:	4b1f      	ldr	r3, [pc, #124]	; (4de8 <scope_close_over_in_parents+0x90>)
    4d6c:	4a1f      	ldr	r2, [pc, #124]	; (4dec <scope_close_over_in_parents+0x94>)
    4d6e:	216e      	movs	r1, #110	; 0x6e
    4d70:	481f      	ldr	r0, [pc, #124]	; (4df0 <scope_close_over_in_parents+0x98>)
    4d72:	f016 fcad 	bl	1b6d0 <__assert_func>
    for (scope_t *s = scope->parent;; s = s->parent) {
    4d76:	687b      	ldr	r3, [r7, #4]
    4d78:	685b      	ldr	r3, [r3, #4]
    4d7a:	617b      	str	r3, [r7, #20]
        assert(s->parent != NULL); // we should not get to the outer scope
    4d7c:	697b      	ldr	r3, [r7, #20]
    4d7e:	685b      	ldr	r3, [r3, #4]
    4d80:	2b00      	cmp	r3, #0
    4d82:	d105      	bne.n	4d90 <scope_close_over_in_parents+0x38>
    4d84:	4b1b      	ldr	r3, [pc, #108]	; (4df4 <scope_close_over_in_parents+0x9c>)
    4d86:	4a19      	ldr	r2, [pc, #100]	; (4dec <scope_close_over_in_parents+0x94>)
    4d88:	2170      	movs	r1, #112	; 0x70
    4d8a:	4819      	ldr	r0, [pc, #100]	; (4df0 <scope_close_over_in_parents+0x98>)
    4d8c:	f016 fca0 	bl	1b6d0 <__assert_func>
        bool added;
        id_info_t *id = scope_find_or_add_id(s, qst, &added);
    4d90:	f107 030f 	add.w	r3, r7, #15
    4d94:	461a      	mov	r2, r3
    4d96:	6839      	ldr	r1, [r7, #0]
    4d98:	6978      	ldr	r0, [r7, #20]
    4d9a:	f7ff ff53 	bl	4c44 <scope_find_or_add_id>
    4d9e:	6138      	str	r0, [r7, #16]
        if (added) {
    4da0:	7bfb      	ldrb	r3, [r7, #15]
    4da2:	2b00      	cmp	r3, #0
    4da4:	d006      	beq.n	4db4 <scope_close_over_in_parents+0x5c>
            // variable not previously declared in this scope, so declare it as free and keep searching parents
            id->kind = ID_INFO_KIND_FREE;
    4da6:	693b      	ldr	r3, [r7, #16]
    4da8:	2204      	movs	r2, #4
    4daa:	701a      	strb	r2, [r3, #0]
    for (scope_t *s = scope->parent;; s = s->parent) {
    4dac:	697b      	ldr	r3, [r7, #20]
    4dae:	685b      	ldr	r3, [r3, #4]
    4db0:	617b      	str	r3, [r7, #20]
                // ID_INFO_KIND_CELL: variable already closed over in this scope
                assert(id->kind == ID_INFO_KIND_FREE || id->kind == ID_INFO_KIND_CELL);
            }
            return;
        }
    }
    4db2:	e7e3      	b.n	4d7c <scope_close_over_in_parents+0x24>
            if (id->kind == ID_INFO_KIND_LOCAL) {
    4db4:	693b      	ldr	r3, [r7, #16]
    4db6:	781b      	ldrb	r3, [r3, #0]
    4db8:	2b02      	cmp	r3, #2
    4dba:	d103      	bne.n	4dc4 <scope_close_over_in_parents+0x6c>
                id->kind = ID_INFO_KIND_CELL;
    4dbc:	693b      	ldr	r3, [r7, #16]
    4dbe:	2203      	movs	r2, #3
    4dc0:	701a      	strb	r2, [r3, #0]
            return;
    4dc2:	e00d      	b.n	4de0 <scope_close_over_in_parents+0x88>
                assert(id->kind == ID_INFO_KIND_FREE || id->kind == ID_INFO_KIND_CELL);
    4dc4:	693b      	ldr	r3, [r7, #16]
    4dc6:	781b      	ldrb	r3, [r3, #0]
    4dc8:	2b04      	cmp	r3, #4
    4dca:	d009      	beq.n	4de0 <scope_close_over_in_parents+0x88>
    4dcc:	693b      	ldr	r3, [r7, #16]
    4dce:	781b      	ldrb	r3, [r3, #0]
    4dd0:	2b03      	cmp	r3, #3
    4dd2:	d005      	beq.n	4de0 <scope_close_over_in_parents+0x88>
    4dd4:	4b08      	ldr	r3, [pc, #32]	; (4df8 <scope_close_over_in_parents+0xa0>)
    4dd6:	4a05      	ldr	r2, [pc, #20]	; (4dec <scope_close_over_in_parents+0x94>)
    4dd8:	217e      	movs	r1, #126	; 0x7e
    4dda:	4805      	ldr	r0, [pc, #20]	; (4df0 <scope_close_over_in_parents+0x98>)
    4ddc:	f016 fc78 	bl	1b6d0 <__assert_func>
            return;
    4de0:	bf00      	nop
}
    4de2:	3718      	adds	r7, #24
    4de4:	46bd      	mov	sp, r7
    4de6:	bd80      	pop	{r7, pc}
    4de8:	00020184 	.word	0x00020184
    4dec:	000201fc 	.word	0x000201fc
    4df0:	00020170 	.word	0x00020170
    4df4:	0002019c 	.word	0x0002019c
    4df8:	000201b0 	.word	0x000201b0

00004dfc <scope_find_local_and_close_over>:

void scope_find_local_and_close_over(scope_t *scope, id_info_t *id, qstr qst) {
    4dfc:	b580      	push	{r7, lr}
    4dfe:	b086      	sub	sp, #24
    4e00:	af00      	add	r7, sp, #0
    4e02:	60f8      	str	r0, [r7, #12]
    4e04:	60b9      	str	r1, [r7, #8]
    4e06:	607a      	str	r2, [r7, #4]
    if (scope->parent != NULL) {
    4e08:	68fb      	ldr	r3, [r7, #12]
    4e0a:	685b      	ldr	r3, [r3, #4]
    4e0c:	2b00      	cmp	r3, #0
    4e0e:	d028      	beq.n	4e62 <scope_find_local_and_close_over+0x66>
        for (scope_t *s = scope->parent; s->parent != NULL; s = s->parent) {
    4e10:	68fb      	ldr	r3, [r7, #12]
    4e12:	685b      	ldr	r3, [r3, #4]
    4e14:	617b      	str	r3, [r7, #20]
    4e16:	e01e      	b.n	4e56 <scope_find_local_and_close_over+0x5a>
            id_info_t *id2 = scope_find(s, qst);
    4e18:	6879      	ldr	r1, [r7, #4]
    4e1a:	6978      	ldr	r0, [r7, #20]
    4e1c:	f7ff ff5e 	bl	4cdc <scope_find>
    4e20:	6138      	str	r0, [r7, #16]
            if (id2 != NULL) {
    4e22:	693b      	ldr	r3, [r7, #16]
    4e24:	2b00      	cmp	r3, #0
    4e26:	d013      	beq.n	4e50 <scope_find_local_and_close_over+0x54>
                if (id2->kind == ID_INFO_KIND_LOCAL || id2->kind == ID_INFO_KIND_CELL || id2->kind == ID_INFO_KIND_FREE) {
    4e28:	693b      	ldr	r3, [r7, #16]
    4e2a:	781b      	ldrb	r3, [r3, #0]
    4e2c:	2b02      	cmp	r3, #2
    4e2e:	d007      	beq.n	4e40 <scope_find_local_and_close_over+0x44>
    4e30:	693b      	ldr	r3, [r7, #16]
    4e32:	781b      	ldrb	r3, [r3, #0]
    4e34:	2b03      	cmp	r3, #3
    4e36:	d003      	beq.n	4e40 <scope_find_local_and_close_over+0x44>
    4e38:	693b      	ldr	r3, [r7, #16]
    4e3a:	781b      	ldrb	r3, [r3, #0]
    4e3c:	2b04      	cmp	r3, #4
    4e3e:	d10f      	bne.n	4e60 <scope_find_local_and_close_over+0x64>
                    id->kind = ID_INFO_KIND_FREE;
    4e40:	68bb      	ldr	r3, [r7, #8]
    4e42:	2204      	movs	r2, #4
    4e44:	701a      	strb	r2, [r3, #0]
                    scope_close_over_in_parents(scope, qst);
    4e46:	6879      	ldr	r1, [r7, #4]
    4e48:	68f8      	ldr	r0, [r7, #12]
    4e4a:	f7ff ff85 	bl	4d58 <scope_close_over_in_parents>
                    return;
    4e4e:	e00b      	b.n	4e68 <scope_find_local_and_close_over+0x6c>
        for (scope_t *s = scope->parent; s->parent != NULL; s = s->parent) {
    4e50:	697b      	ldr	r3, [r7, #20]
    4e52:	685b      	ldr	r3, [r3, #4]
    4e54:	617b      	str	r3, [r7, #20]
    4e56:	697b      	ldr	r3, [r7, #20]
    4e58:	685b      	ldr	r3, [r3, #4]
    4e5a:	2b00      	cmp	r3, #0
    4e5c:	d1dc      	bne.n	4e18 <scope_find_local_and_close_over+0x1c>
    4e5e:	e000      	b.n	4e62 <scope_find_local_and_close_over+0x66>
                }
                break;
    4e60:	bf00      	nop
            }
        }
    }
    id->kind = ID_INFO_KIND_GLOBAL_IMPLICIT;
    4e62:	68bb      	ldr	r3, [r7, #8]
    4e64:	2200      	movs	r2, #0
    4e66:	701a      	strb	r2, [r3, #0]
}
    4e68:	3718      	adds	r7, #24
    4e6a:	46bd      	mov	sp, r7
    4e6c:	bd80      	pop	{r7, pc}
    4e6e:	bf00      	nop

00004e70 <mp_parse_node_new_small_int>:
static inline mp_parse_node_t mp_parse_node_new_small_int(mp_int_t val) {
    4e70:	b480      	push	{r7}
    4e72:	b083      	sub	sp, #12
    4e74:	af00      	add	r7, sp, #0
    4e76:	6078      	str	r0, [r7, #4]
    return (mp_parse_node_t)(MP_PARSE_NODE_SMALL_INT | ((mp_uint_t)val << 1));
    4e78:	687b      	ldr	r3, [r7, #4]
    4e7a:	005b      	lsls	r3, r3, #1
    4e7c:	f043 0301 	orr.w	r3, r3, #1
}
    4e80:	4618      	mov	r0, r3
    4e82:	370c      	adds	r7, #12
    4e84:	46bd      	mov	sp, r7
    4e86:	f85d 7b04 	ldr.w	r7, [sp], #4
    4e8a:	4770      	bx	lr

00004e8c <mp_local_free>:

#if !MICROPY_ENABLE_PYSTACK

#define mp_local_alloc(n_bytes) alloca(n_bytes)

static inline void mp_local_free(void *ptr) {
    4e8c:	b480      	push	{r7}
    4e8e:	b083      	sub	sp, #12
    4e90:	af00      	add	r7, sp, #0
    4e92:	6078      	str	r0, [r7, #4]
    (void)ptr;
}
    4e94:	bf00      	nop
    4e96:	370c      	adds	r7, #12
    4e98:	46bd      	mov	sp, r7
    4e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
    4e9e:	4770      	bx	lr

00004ea0 <compile_error_set_line>:
    emit_inline_asm_t *emit_inline_asm;                                   // current emitter for inline asm
    const emit_inline_asm_method_table_t *emit_inline_asm_method_table;   // current emit method table for inline asm
    #endif
} compiler_t;

STATIC void compile_error_set_line(compiler_t *comp, mp_parse_node_t pn) {
    4ea0:	b480      	push	{r7}
    4ea2:	b083      	sub	sp, #12
    4ea4:	af00      	add	r7, sp, #0
    4ea6:	6078      	str	r0, [r7, #4]
    4ea8:	6039      	str	r1, [r7, #0]
    // if the line of the error is unknown then try to update it from the pn
    if (comp->compile_error_line == 0 && MP_PARSE_NODE_IS_STRUCT(pn)) {
    4eaa:	687b      	ldr	r3, [r7, #4]
    4eac:	68db      	ldr	r3, [r3, #12]
    4eae:	2b00      	cmp	r3, #0
    4eb0:	d10b      	bne.n	4eca <compile_error_set_line+0x2a>
    4eb2:	683b      	ldr	r3, [r7, #0]
    4eb4:	2b00      	cmp	r3, #0
    4eb6:	d008      	beq.n	4eca <compile_error_set_line+0x2a>
    4eb8:	683b      	ldr	r3, [r7, #0]
    4eba:	f003 0303 	and.w	r3, r3, #3
    4ebe:	2b00      	cmp	r3, #0
    4ec0:	d103      	bne.n	4eca <compile_error_set_line+0x2a>
        comp->compile_error_line = ((mp_parse_node_struct_t*)pn)->source_line;
    4ec2:	683b      	ldr	r3, [r7, #0]
    4ec4:	681a      	ldr	r2, [r3, #0]
    4ec6:	687b      	ldr	r3, [r7, #4]
    4ec8:	60da      	str	r2, [r3, #12]
    }
}
    4eca:	bf00      	nop
    4ecc:	370c      	adds	r7, #12
    4ece:	46bd      	mov	sp, r7
    4ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
    4ed4:	4770      	bx	lr
    4ed6:	bf00      	nop

00004ed8 <compile_syntax_error>:

STATIC void compile_syntax_error(compiler_t *comp, mp_parse_node_t pn, const char *msg) {
    4ed8:	b580      	push	{r7, lr}
    4eda:	b084      	sub	sp, #16
    4edc:	af00      	add	r7, sp, #0
    4ede:	60f8      	str	r0, [r7, #12]
    4ee0:	60b9      	str	r1, [r7, #8]
    4ee2:	607a      	str	r2, [r7, #4]
    // only register the error if there has been no other error
    if (comp->compile_error == MP_OBJ_NULL) {
    4ee4:	68fb      	ldr	r3, [r7, #12]
    4ee6:	689b      	ldr	r3, [r3, #8]
    4ee8:	2b00      	cmp	r3, #0
    4eea:	d10a      	bne.n	4f02 <compile_syntax_error+0x2a>
        comp->compile_error = mp_obj_new_exception_msg(&mp_type_SyntaxError, msg);
    4eec:	6879      	ldr	r1, [r7, #4]
    4eee:	4807      	ldr	r0, [pc, #28]	; (4f0c <compile_syntax_error+0x34>)
    4ef0:	f00a fc6c 	bl	f7cc <mp_obj_new_exception_msg>
    4ef4:	4602      	mov	r2, r0
    4ef6:	68fb      	ldr	r3, [r7, #12]
    4ef8:	609a      	str	r2, [r3, #8]
        compile_error_set_line(comp, pn);
    4efa:	68b9      	ldr	r1, [r7, #8]
    4efc:	68f8      	ldr	r0, [r7, #12]
    4efe:	f7ff ffcf 	bl	4ea0 <compile_error_set_line>
    }
}
    4f02:	bf00      	nop
    4f04:	3710      	adds	r7, #16
    4f06:	46bd      	mov	sp, r7
    4f08:	bd80      	pop	{r7, pc}
    4f0a:	bf00      	nop
    4f0c:	00022620 	.word	0x00022620

00004f10 <comp_next_label>:

STATIC void compile_trailer_paren_helper(compiler_t *comp, mp_parse_node_t pn_arglist, bool is_method_call, int n_positional_extra);
STATIC void compile_comprehension(compiler_t *comp, mp_parse_node_struct_t *pns, scope_kind_t kind);
STATIC void compile_node(compiler_t *comp, mp_parse_node_t pn);

STATIC uint comp_next_label(compiler_t *comp) {
    4f10:	b480      	push	{r7}
    4f12:	b083      	sub	sp, #12
    4f14:	af00      	add	r7, sp, #0
    4f16:	6078      	str	r0, [r7, #4]
    return comp->next_label++;
    4f18:	687b      	ldr	r3, [r7, #4]
    4f1a:	691b      	ldr	r3, [r3, #16]
    4f1c:	1c59      	adds	r1, r3, #1
    4f1e:	687a      	ldr	r2, [r7, #4]
    4f20:	6111      	str	r1, [r2, #16]
}
    4f22:	4618      	mov	r0, r3
    4f24:	370c      	adds	r7, #12
    4f26:	46bd      	mov	sp, r7
    4f28:	f85d 7b04 	ldr.w	r7, [sp], #4
    4f2c:	4770      	bx	lr
    4f2e:	bf00      	nop

00004f30 <compile_increase_except_level>:

STATIC void compile_increase_except_level(compiler_t *comp) {
    4f30:	b480      	push	{r7}
    4f32:	b083      	sub	sp, #12
    4f34:	af00      	add	r7, sp, #0
    4f36:	6078      	str	r0, [r7, #4]
    comp->cur_except_level += 1;
    4f38:	687b      	ldr	r3, [r7, #4]
    4f3a:	8b9b      	ldrh	r3, [r3, #28]
    4f3c:	3301      	adds	r3, #1
    4f3e:	b29a      	uxth	r2, r3
    4f40:	687b      	ldr	r3, [r7, #4]
    4f42:	839a      	strh	r2, [r3, #28]
    if (comp->cur_except_level > comp->scope_cur->exc_stack_size) {
    4f44:	687b      	ldr	r3, [r7, #4]
    4f46:	8b9a      	ldrh	r2, [r3, #28]
    4f48:	687b      	ldr	r3, [r7, #4]
    4f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    4f4c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
    4f4e:	429a      	cmp	r2, r3
    4f50:	d904      	bls.n	4f5c <compile_increase_except_level+0x2c>
        comp->scope_cur->exc_stack_size = comp->cur_except_level;
    4f52:	687b      	ldr	r3, [r7, #4]
    4f54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    4f56:	687a      	ldr	r2, [r7, #4]
    4f58:	8b92      	ldrh	r2, [r2, #28]
    4f5a:	849a      	strh	r2, [r3, #36]	; 0x24
    }
}
    4f5c:	bf00      	nop
    4f5e:	370c      	adds	r7, #12
    4f60:	46bd      	mov	sp, r7
    4f62:	f85d 7b04 	ldr.w	r7, [sp], #4
    4f66:	4770      	bx	lr

00004f68 <compile_decrease_except_level>:

STATIC void compile_decrease_except_level(compiler_t *comp) {
    4f68:	b580      	push	{r7, lr}
    4f6a:	b082      	sub	sp, #8
    4f6c:	af00      	add	r7, sp, #0
    4f6e:	6078      	str	r0, [r7, #4]
    assert(comp->cur_except_level > 0);
    4f70:	687b      	ldr	r3, [r7, #4]
    4f72:	8b9b      	ldrh	r3, [r3, #28]
    4f74:	2b00      	cmp	r3, #0
    4f76:	d105      	bne.n	4f84 <compile_decrease_except_level+0x1c>
    4f78:	4b07      	ldr	r3, [pc, #28]	; (4f98 <compile_decrease_except_level+0x30>)
    4f7a:	4a08      	ldr	r2, [pc, #32]	; (4f9c <compile_decrease_except_level+0x34>)
    4f7c:	21b5      	movs	r1, #181	; 0xb5
    4f7e:	4808      	ldr	r0, [pc, #32]	; (4fa0 <compile_decrease_except_level+0x38>)
    4f80:	f016 fba6 	bl	1b6d0 <__assert_func>
    comp->cur_except_level -= 1;
    4f84:	687b      	ldr	r3, [r7, #4]
    4f86:	8b9b      	ldrh	r3, [r3, #28]
    4f88:	3b01      	subs	r3, #1
    4f8a:	b29a      	uxth	r2, r3
    4f8c:	687b      	ldr	r3, [r7, #4]
    4f8e:	839a      	strh	r2, [r3, #28]
}
    4f90:	bf00      	nop
    4f92:	3708      	adds	r7, #8
    4f94:	46bd      	mov	sp, r7
    4f96:	bd80      	pop	{r7, pc}
    4f98:	00020218 	.word	0x00020218
    4f9c:	00020dac 	.word	0x00020dac
    4fa0:	00020234 	.word	0x00020234

00004fa4 <scope_new_and_link>:

STATIC scope_t *scope_new_and_link(compiler_t *comp, scope_kind_t kind, mp_parse_node_t pn, uint emit_options) {
    4fa4:	b580      	push	{r7, lr}
    4fa6:	b086      	sub	sp, #24
    4fa8:	af00      	add	r7, sp, #0
    4faa:	60f8      	str	r0, [r7, #12]
    4fac:	60b9      	str	r1, [r7, #8]
    4fae:	607a      	str	r2, [r7, #4]
    4fb0:	603b      	str	r3, [r7, #0]
    scope_t *scope = scope_new(kind, pn, comp->source_file, emit_options);
    4fb2:	68fb      	ldr	r3, [r7, #12]
    4fb4:	681a      	ldr	r2, [r3, #0]
    4fb6:	683b      	ldr	r3, [r7, #0]
    4fb8:	6879      	ldr	r1, [r7, #4]
    4fba:	68b8      	ldr	r0, [r7, #8]
    4fbc:	f7ff fdd8 	bl	4b70 <scope_new>
    4fc0:	6138      	str	r0, [r7, #16]
    scope->parent = comp->scope_cur;
    4fc2:	68fb      	ldr	r3, [r7, #12]
    4fc4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    4fc6:	693b      	ldr	r3, [r7, #16]
    4fc8:	605a      	str	r2, [r3, #4]
    scope->next = NULL;
    4fca:	693b      	ldr	r3, [r7, #16]
    4fcc:	2200      	movs	r2, #0
    4fce:	609a      	str	r2, [r3, #8]
    if (comp->scope_head == NULL) {
    4fd0:	68fb      	ldr	r3, [r7, #12]
    4fd2:	6a1b      	ldr	r3, [r3, #32]
    4fd4:	2b00      	cmp	r3, #0
    4fd6:	d103      	bne.n	4fe0 <scope_new_and_link+0x3c>
        comp->scope_head = scope;
    4fd8:	68fb      	ldr	r3, [r7, #12]
    4fda:	693a      	ldr	r2, [r7, #16]
    4fdc:	621a      	str	r2, [r3, #32]
    4fde:	e00d      	b.n	4ffc <scope_new_and_link+0x58>
    } else {
        scope_t *s = comp->scope_head;
    4fe0:	68fb      	ldr	r3, [r7, #12]
    4fe2:	6a1b      	ldr	r3, [r3, #32]
    4fe4:	617b      	str	r3, [r7, #20]
        while (s->next != NULL) {
    4fe6:	e002      	b.n	4fee <scope_new_and_link+0x4a>
            s = s->next;
    4fe8:	697b      	ldr	r3, [r7, #20]
    4fea:	689b      	ldr	r3, [r3, #8]
    4fec:	617b      	str	r3, [r7, #20]
        while (s->next != NULL) {
    4fee:	697b      	ldr	r3, [r7, #20]
    4ff0:	689b      	ldr	r3, [r3, #8]
    4ff2:	2b00      	cmp	r3, #0
    4ff4:	d1f8      	bne.n	4fe8 <scope_new_and_link+0x44>
        }
        s->next = scope;
    4ff6:	697b      	ldr	r3, [r7, #20]
    4ff8:	693a      	ldr	r2, [r7, #16]
    4ffa:	609a      	str	r2, [r3, #8]
    }
    return scope;
    4ffc:	693b      	ldr	r3, [r7, #16]
}
    4ffe:	4618      	mov	r0, r3
    5000:	3718      	adds	r7, #24
    5002:	46bd      	mov	sp, r7
    5004:	bd80      	pop	{r7, pc}
    5006:	bf00      	nop

00005008 <apply_to_single_or_list>:

typedef void (*apply_list_fun_t)(compiler_t *comp, mp_parse_node_t pn);

STATIC void apply_to_single_or_list(compiler_t *comp, mp_parse_node_t pn, pn_kind_t pn_list_kind, apply_list_fun_t f) {
    5008:	b580      	push	{r7, lr}
    500a:	b088      	sub	sp, #32
    500c:	af00      	add	r7, sp, #0
    500e:	60f8      	str	r0, [r7, #12]
    5010:	60b9      	str	r1, [r7, #8]
    5012:	607a      	str	r2, [r7, #4]
    5014:	603b      	str	r3, [r7, #0]
    if (MP_PARSE_NODE_IS_STRUCT_KIND(pn, pn_list_kind)) {
    5016:	68bb      	ldr	r3, [r7, #8]
    5018:	2b00      	cmp	r3, #0
    501a:	d024      	beq.n	5066 <apply_to_single_or_list+0x5e>
    501c:	68bb      	ldr	r3, [r7, #8]
    501e:	f003 0303 	and.w	r3, r3, #3
    5022:	2b00      	cmp	r3, #0
    5024:	d11f      	bne.n	5066 <apply_to_single_or_list+0x5e>
    5026:	68bb      	ldr	r3, [r7, #8]
    5028:	685b      	ldr	r3, [r3, #4]
    502a:	b2da      	uxtb	r2, r3
    502c:	687b      	ldr	r3, [r7, #4]
    502e:	429a      	cmp	r2, r3
    5030:	d119      	bne.n	5066 <apply_to_single_or_list+0x5e>
        mp_parse_node_struct_t *pns = (mp_parse_node_struct_t*)pn;
    5032:	68bb      	ldr	r3, [r7, #8]
    5034:	61bb      	str	r3, [r7, #24]
        int num_nodes = MP_PARSE_NODE_STRUCT_NUM_NODES(pns);
    5036:	69bb      	ldr	r3, [r7, #24]
    5038:	685b      	ldr	r3, [r3, #4]
    503a:	0a1b      	lsrs	r3, r3, #8
    503c:	617b      	str	r3, [r7, #20]
        for (int i = 0; i < num_nodes; i++) {
    503e:	2300      	movs	r3, #0
    5040:	61fb      	str	r3, [r7, #28]
    5042:	e00b      	b.n	505c <apply_to_single_or_list+0x54>
            f(comp, pns->nodes[i]);
    5044:	69bb      	ldr	r3, [r7, #24]
    5046:	69fa      	ldr	r2, [r7, #28]
    5048:	3202      	adds	r2, #2
    504a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    504e:	683b      	ldr	r3, [r7, #0]
    5050:	4611      	mov	r1, r2
    5052:	68f8      	ldr	r0, [r7, #12]
    5054:	4798      	blx	r3
        for (int i = 0; i < num_nodes; i++) {
    5056:	69fb      	ldr	r3, [r7, #28]
    5058:	3301      	adds	r3, #1
    505a:	61fb      	str	r3, [r7, #28]
    505c:	69fa      	ldr	r2, [r7, #28]
    505e:	697b      	ldr	r3, [r7, #20]
    5060:	429a      	cmp	r2, r3
    5062:	dbef      	blt.n	5044 <apply_to_single_or_list+0x3c>
    if (MP_PARSE_NODE_IS_STRUCT_KIND(pn, pn_list_kind)) {
    5064:	e007      	b.n	5076 <apply_to_single_or_list+0x6e>
        }
    } else if (!MP_PARSE_NODE_IS_NULL(pn)) {
    5066:	68bb      	ldr	r3, [r7, #8]
    5068:	2b00      	cmp	r3, #0
    506a:	d004      	beq.n	5076 <apply_to_single_or_list+0x6e>
        f(comp, pn);
    506c:	683b      	ldr	r3, [r7, #0]
    506e:	68b9      	ldr	r1, [r7, #8]
    5070:	68f8      	ldr	r0, [r7, #12]
    5072:	4798      	blx	r3
    }
}
    5074:	e7ff      	b.n	5076 <apply_to_single_or_list+0x6e>
    5076:	bf00      	nop
    5078:	3720      	adds	r7, #32
    507a:	46bd      	mov	sp, r7
    507c:	bd80      	pop	{r7, pc}
    507e:	bf00      	nop

00005080 <compile_generic_all_nodes>:

STATIC void compile_generic_all_nodes(compiler_t *comp, mp_parse_node_struct_t *pns) {
    5080:	b580      	push	{r7, lr}
    5082:	b084      	sub	sp, #16
    5084:	af00      	add	r7, sp, #0
    5086:	6078      	str	r0, [r7, #4]
    5088:	6039      	str	r1, [r7, #0]
    int num_nodes = MP_PARSE_NODE_STRUCT_NUM_NODES(pns);
    508a:	683b      	ldr	r3, [r7, #0]
    508c:	685b      	ldr	r3, [r3, #4]
    508e:	0a1b      	lsrs	r3, r3, #8
    5090:	60bb      	str	r3, [r7, #8]
    for (int i = 0; i < num_nodes; i++) {
    5092:	2300      	movs	r3, #0
    5094:	60fb      	str	r3, [r7, #12]
    5096:	e019      	b.n	50cc <compile_generic_all_nodes+0x4c>
        compile_node(comp, pns->nodes[i]);
    5098:	683b      	ldr	r3, [r7, #0]
    509a:	68fa      	ldr	r2, [r7, #12]
    509c:	3202      	adds	r2, #2
    509e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    50a2:	4619      	mov	r1, r3
    50a4:	6878      	ldr	r0, [r7, #4]
    50a6:	f003 fd75 	bl	8b94 <compile_node>
        if (comp->compile_error != MP_OBJ_NULL) {
    50aa:	687b      	ldr	r3, [r7, #4]
    50ac:	689b      	ldr	r3, [r3, #8]
    50ae:	2b00      	cmp	r3, #0
    50b0:	d009      	beq.n	50c6 <compile_generic_all_nodes+0x46>
            // add line info for the error in case it didn't have a line number
            compile_error_set_line(comp, pns->nodes[i]);
    50b2:	683b      	ldr	r3, [r7, #0]
    50b4:	68fa      	ldr	r2, [r7, #12]
    50b6:	3202      	adds	r2, #2
    50b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    50bc:	4619      	mov	r1, r3
    50be:	6878      	ldr	r0, [r7, #4]
    50c0:	f7ff feee 	bl	4ea0 <compile_error_set_line>
            return;
    50c4:	e006      	b.n	50d4 <compile_generic_all_nodes+0x54>
    for (int i = 0; i < num_nodes; i++) {
    50c6:	68fb      	ldr	r3, [r7, #12]
    50c8:	3301      	adds	r3, #1
    50ca:	60fb      	str	r3, [r7, #12]
    50cc:	68fa      	ldr	r2, [r7, #12]
    50ce:	68bb      	ldr	r3, [r7, #8]
    50d0:	429a      	cmp	r2, r3
    50d2:	dbe1      	blt.n	5098 <compile_generic_all_nodes+0x18>
        }
    }
}
    50d4:	3710      	adds	r7, #16
    50d6:	46bd      	mov	sp, r7
    50d8:	bd80      	pop	{r7, pc}
    50da:	bf00      	nop

000050dc <compile_load_id>:

STATIC void compile_load_id(compiler_t *comp, qstr qst) {
    50dc:	b580      	push	{r7, lr}
    50de:	b082      	sub	sp, #8
    50e0:	af00      	add	r7, sp, #0
    50e2:	6078      	str	r0, [r7, #4]
    50e4:	6039      	str	r1, [r7, #0]
    if (comp->pass == MP_PASS_SCOPE) {
    50e6:	687b      	ldr	r3, [r7, #4]
    50e8:	795b      	ldrb	r3, [r3, #5]
    50ea:	2b01      	cmp	r3, #1
    50ec:	d106      	bne.n	50fc <compile_load_id+0x20>
        mp_emit_common_get_id_for_load(comp->scope_cur, qst);
    50ee:	687b      	ldr	r3, [r7, #4]
    50f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    50f2:	6839      	ldr	r1, [r7, #0]
    50f4:	4618      	mov	r0, r3
    50f6:	f004 fc4d 	bl	9994 <mp_emit_common_get_id_for_load>
        mp_emit_common_id_op(comp->emit, &comp->emit_method_table->load_id, comp->scope_cur, qst);
        #else
        mp_emit_common_id_op(comp->emit, &mp_emit_bc_method_table_load_id_ops, comp->scope_cur, qst);
        #endif
    }
}
    50fa:	e007      	b.n	510c <compile_load_id+0x30>
        mp_emit_common_id_op(comp->emit, &mp_emit_bc_method_table_load_id_ops, comp->scope_cur, qst);
    50fc:	687b      	ldr	r3, [r7, #4]
    50fe:	6a98      	ldr	r0, [r3, #40]	; 0x28
    5100:	687b      	ldr	r3, [r7, #4]
    5102:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    5104:	683b      	ldr	r3, [r7, #0]
    5106:	4903      	ldr	r1, [pc, #12]	; (5114 <compile_load_id+0x38>)
    5108:	f004 fc8a 	bl	9a20 <mp_emit_common_id_op>
}
    510c:	bf00      	nop
    510e:	3708      	adds	r7, #8
    5110:	46bd      	mov	sp, r7
    5112:	bd80      	pop	{r7, pc}
    5114:	000212b8 	.word	0x000212b8

00005118 <compile_store_id>:

STATIC void compile_store_id(compiler_t *comp, qstr qst) {
    5118:	b580      	push	{r7, lr}
    511a:	b082      	sub	sp, #8
    511c:	af00      	add	r7, sp, #0
    511e:	6078      	str	r0, [r7, #4]
    5120:	6039      	str	r1, [r7, #0]
    if (comp->pass == MP_PASS_SCOPE) {
    5122:	687b      	ldr	r3, [r7, #4]
    5124:	795b      	ldrb	r3, [r3, #5]
    5126:	2b01      	cmp	r3, #1
    5128:	d106      	bne.n	5138 <compile_store_id+0x20>
        mp_emit_common_get_id_for_modification(comp->scope_cur, qst);
    512a:	687b      	ldr	r3, [r7, #4]
    512c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    512e:	6839      	ldr	r1, [r7, #0]
    5130:	4618      	mov	r0, r3
    5132:	f004 fc49 	bl	99c8 <mp_emit_common_get_id_for_modification>
        mp_emit_common_id_op(comp->emit, &comp->emit_method_table->store_id, comp->scope_cur, qst);
        #else
        mp_emit_common_id_op(comp->emit, &mp_emit_bc_method_table_store_id_ops, comp->scope_cur, qst);
        #endif
    }
}
    5136:	e007      	b.n	5148 <compile_store_id+0x30>
        mp_emit_common_id_op(comp->emit, &mp_emit_bc_method_table_store_id_ops, comp->scope_cur, qst);
    5138:	687b      	ldr	r3, [r7, #4]
    513a:	6a98      	ldr	r0, [r3, #40]	; 0x28
    513c:	687b      	ldr	r3, [r7, #4]
    513e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    5140:	683b      	ldr	r3, [r7, #0]
    5142:	4903      	ldr	r1, [pc, #12]	; (5150 <compile_store_id+0x38>)
    5144:	f004 fc6c 	bl	9a20 <mp_emit_common_id_op>
}
    5148:	bf00      	nop
    514a:	3708      	adds	r7, #8
    514c:	46bd      	mov	sp, r7
    514e:	bd80      	pop	{r7, pc}
    5150:	000212c8 	.word	0x000212c8

00005154 <compile_delete_id>:

STATIC void compile_delete_id(compiler_t *comp, qstr qst) {
    5154:	b580      	push	{r7, lr}
    5156:	b082      	sub	sp, #8
    5158:	af00      	add	r7, sp, #0
    515a:	6078      	str	r0, [r7, #4]
    515c:	6039      	str	r1, [r7, #0]
    if (comp->pass == MP_PASS_SCOPE) {
    515e:	687b      	ldr	r3, [r7, #4]
    5160:	795b      	ldrb	r3, [r3, #5]
    5162:	2b01      	cmp	r3, #1
    5164:	d106      	bne.n	5174 <compile_delete_id+0x20>
        mp_emit_common_get_id_for_modification(comp->scope_cur, qst);
    5166:	687b      	ldr	r3, [r7, #4]
    5168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    516a:	6839      	ldr	r1, [r7, #0]
    516c:	4618      	mov	r0, r3
    516e:	f004 fc2b 	bl	99c8 <mp_emit_common_get_id_for_modification>
        mp_emit_common_id_op(comp->emit, &comp->emit_method_table->delete_id, comp->scope_cur, qst);
        #else
        mp_emit_common_id_op(comp->emit, &mp_emit_bc_method_table_delete_id_ops, comp->scope_cur, qst);
        #endif
    }
}
    5172:	e007      	b.n	5184 <compile_delete_id+0x30>
        mp_emit_common_id_op(comp->emit, &mp_emit_bc_method_table_delete_id_ops, comp->scope_cur, qst);
    5174:	687b      	ldr	r3, [r7, #4]
    5176:	6a98      	ldr	r0, [r3, #40]	; 0x28
    5178:	687b      	ldr	r3, [r7, #4]
    517a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    517c:	683b      	ldr	r3, [r7, #0]
    517e:	4903      	ldr	r1, [pc, #12]	; (518c <compile_delete_id+0x38>)
    5180:	f004 fc4e 	bl	9a20 <mp_emit_common_id_op>
}
    5184:	bf00      	nop
    5186:	3708      	adds	r7, #8
    5188:	46bd      	mov	sp, r7
    518a:	bd80      	pop	{r7, pc}
    518c:	000212d8 	.word	0x000212d8

00005190 <c_tuple>:

STATIC void c_tuple(compiler_t *comp, mp_parse_node_t pn, mp_parse_node_struct_t *pns_list) {
    5190:	b580      	push	{r7, lr}
    5192:	b088      	sub	sp, #32
    5194:	af00      	add	r7, sp, #0
    5196:	60f8      	str	r0, [r7, #12]
    5198:	60b9      	str	r1, [r7, #8]
    519a:	607a      	str	r2, [r7, #4]
    int total = 0;
    519c:	2300      	movs	r3, #0
    519e:	61fb      	str	r3, [r7, #28]
    if (!MP_PARSE_NODE_IS_NULL(pn)) {
    51a0:	68bb      	ldr	r3, [r7, #8]
    51a2:	2b00      	cmp	r3, #0
    51a4:	d006      	beq.n	51b4 <c_tuple+0x24>
        compile_node(comp, pn);
    51a6:	68b9      	ldr	r1, [r7, #8]
    51a8:	68f8      	ldr	r0, [r7, #12]
    51aa:	f003 fcf3 	bl	8b94 <compile_node>
        total += 1;
    51ae:	69fb      	ldr	r3, [r7, #28]
    51b0:	3301      	adds	r3, #1
    51b2:	61fb      	str	r3, [r7, #28]
    }
    if (pns_list != NULL) {
    51b4:	687b      	ldr	r3, [r7, #4]
    51b6:	2b00      	cmp	r3, #0
    51b8:	d01a      	beq.n	51f0 <c_tuple+0x60>
        int n = MP_PARSE_NODE_STRUCT_NUM_NODES(pns_list);
    51ba:	687b      	ldr	r3, [r7, #4]
    51bc:	685b      	ldr	r3, [r3, #4]
    51be:	0a1b      	lsrs	r3, r3, #8
    51c0:	617b      	str	r3, [r7, #20]
        for (int i = 0; i < n; i++) {
    51c2:	2300      	movs	r3, #0
    51c4:	61bb      	str	r3, [r7, #24]
    51c6:	e00b      	b.n	51e0 <c_tuple+0x50>
            compile_node(comp, pns_list->nodes[i]);
    51c8:	687b      	ldr	r3, [r7, #4]
    51ca:	69ba      	ldr	r2, [r7, #24]
    51cc:	3202      	adds	r2, #2
    51ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    51d2:	4619      	mov	r1, r3
    51d4:	68f8      	ldr	r0, [r7, #12]
    51d6:	f003 fcdd 	bl	8b94 <compile_node>
        for (int i = 0; i < n; i++) {
    51da:	69bb      	ldr	r3, [r7, #24]
    51dc:	3301      	adds	r3, #1
    51de:	61bb      	str	r3, [r7, #24]
    51e0:	69ba      	ldr	r2, [r7, #24]
    51e2:	697b      	ldr	r3, [r7, #20]
    51e4:	429a      	cmp	r2, r3
    51e6:	dbef      	blt.n	51c8 <c_tuple+0x38>
        }
        total += n;
    51e8:	69fa      	ldr	r2, [r7, #28]
    51ea:	697b      	ldr	r3, [r7, #20]
    51ec:	4413      	add	r3, r2
    51ee:	61fb      	str	r3, [r7, #28]
    }
    EMIT_ARG(build_tuple, total);
    51f0:	68fb      	ldr	r3, [r7, #12]
    51f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    51f4:	69fa      	ldr	r2, [r7, #28]
    51f6:	4611      	mov	r1, r2
    51f8:	4618      	mov	r0, r3
    51fa:	f005 fd69 	bl	acd0 <mp_emit_bc_build_tuple>
}
    51fe:	bf00      	nop
    5200:	3720      	adds	r7, #32
    5202:	46bd      	mov	sp, r7
    5204:	bd80      	pop	{r7, pc}
    5206:	bf00      	nop

00005208 <compile_generic_tuple>:

STATIC void compile_generic_tuple(compiler_t *comp, mp_parse_node_struct_t *pns) {
    5208:	b580      	push	{r7, lr}
    520a:	b082      	sub	sp, #8
    520c:	af00      	add	r7, sp, #0
    520e:	6078      	str	r0, [r7, #4]
    5210:	6039      	str	r1, [r7, #0]
    // a simple tuple expression
    c_tuple(comp, MP_PARSE_NODE_NULL, pns);
    5212:	683a      	ldr	r2, [r7, #0]
    5214:	2100      	movs	r1, #0
    5216:	6878      	ldr	r0, [r7, #4]
    5218:	f7ff ffba 	bl	5190 <c_tuple>
}
    521c:	bf00      	nop
    521e:	3708      	adds	r7, #8
    5220:	46bd      	mov	sp, r7
    5222:	bd80      	pop	{r7, pc}

00005224 <c_if_cond>:

STATIC void c_if_cond(compiler_t *comp, mp_parse_node_t pn, bool jump_if, int label) {
    5224:	b580      	push	{r7, lr}
    5226:	b08a      	sub	sp, #40	; 0x28
    5228:	af00      	add	r7, sp, #0
    522a:	60f8      	str	r0, [r7, #12]
    522c:	60b9      	str	r1, [r7, #8]
    522e:	603b      	str	r3, [r7, #0]
    5230:	4613      	mov	r3, r2
    5232:	71fb      	strb	r3, [r7, #7]
    if (mp_parse_node_is_const_false(pn)) {
    5234:	68b8      	ldr	r0, [r7, #8]
    5236:	f7fe fcd3 	bl	3be0 <mp_parse_node_is_const_false>
    523a:	4603      	mov	r3, r0
    523c:	2b00      	cmp	r3, #0
    523e:	d00e      	beq.n	525e <c_if_cond+0x3a>
        if (jump_if == false) {
    5240:	79fb      	ldrb	r3, [r7, #7]
    5242:	f083 0301 	eor.w	r3, r3, #1
    5246:	b2db      	uxtb	r3, r3
    5248:	2b00      	cmp	r3, #0
    524a:	f000 80eb 	beq.w	5424 <c_if_cond+0x200>
            EMIT_ARG(jump, label);
    524e:	68fb      	ldr	r3, [r7, #12]
    5250:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5252:	683a      	ldr	r2, [r7, #0]
    5254:	4611      	mov	r1, r2
    5256:	4618      	mov	r0, r3
    5258:	f005 fb94 	bl	a984 <mp_emit_bc_jump>
        }
        return;
    525c:	e0e2      	b.n	5424 <c_if_cond+0x200>
    } else if (mp_parse_node_is_const_true(pn)) {
    525e:	68b8      	ldr	r0, [r7, #8]
    5260:	f7fe fcda 	bl	3c18 <mp_parse_node_is_const_true>
    5264:	4603      	mov	r3, r0
    5266:	2b00      	cmp	r3, #0
    5268:	d00b      	beq.n	5282 <c_if_cond+0x5e>
        if (jump_if == true) {
    526a:	79fb      	ldrb	r3, [r7, #7]
    526c:	2b00      	cmp	r3, #0
    526e:	f000 80db 	beq.w	5428 <c_if_cond+0x204>
            EMIT_ARG(jump, label);
    5272:	68fb      	ldr	r3, [r7, #12]
    5274:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5276:	683a      	ldr	r2, [r7, #0]
    5278:	4611      	mov	r1, r2
    527a:	4618      	mov	r0, r3
    527c:	f005 fb82 	bl	a984 <mp_emit_bc_jump>
        }
        return;
    5280:	e0d2      	b.n	5428 <c_if_cond+0x204>
    } else if (MP_PARSE_NODE_IS_STRUCT(pn)) {
    5282:	68bb      	ldr	r3, [r7, #8]
    5284:	2b00      	cmp	r3, #0
    5286:	f000 80c1 	beq.w	540c <c_if_cond+0x1e8>
    528a:	68bb      	ldr	r3, [r7, #8]
    528c:	f003 0303 	and.w	r3, r3, #3
    5290:	2b00      	cmp	r3, #0
    5292:	f040 80bb 	bne.w	540c <c_if_cond+0x1e8>
        mp_parse_node_struct_t *pns = (mp_parse_node_struct_t*)pn;
    5296:	68bb      	ldr	r3, [r7, #8]
    5298:	61fb      	str	r3, [r7, #28]
        int n = MP_PARSE_NODE_STRUCT_NUM_NODES(pns);
    529a:	69fb      	ldr	r3, [r7, #28]
    529c:	685b      	ldr	r3, [r3, #4]
    529e:	0a1b      	lsrs	r3, r3, #8
    52a0:	61bb      	str	r3, [r7, #24]
        if (MP_PARSE_NODE_STRUCT_KIND(pns) == PN_or_test) {
    52a2:	69fb      	ldr	r3, [r7, #28]
    52a4:	685b      	ldr	r3, [r3, #4]
    52a6:	b2db      	uxtb	r3, r3
    52a8:	2b1c      	cmp	r3, #28
    52aa:	d152      	bne.n	5352 <c_if_cond+0x12e>
            if (jump_if == false) {
    52ac:	79fb      	ldrb	r3, [r7, #7]
    52ae:	f083 0301 	eor.w	r3, r3, #1
    52b2:	b2db      	uxtb	r3, r3
    52b4:	2b00      	cmp	r3, #0
    52b6:	d037      	beq.n	5328 <c_if_cond+0x104>
    52b8:	e000      	b.n	52bc <c_if_cond+0x98>
            return;
        } else if (MP_PARSE_NODE_STRUCT_KIND(pns) == PN_and_test) {
            if (jump_if == false) {
                goto and_or_logic2;
            } else {
                goto and_or_logic1;
    52ba:	bf00      	nop
                uint label2 = comp_next_label(comp);
    52bc:	68f8      	ldr	r0, [r7, #12]
    52be:	f7ff fe27 	bl	4f10 <comp_next_label>
    52c2:	6178      	str	r0, [r7, #20]
                for (int i = 0; i < n - 1; i++) {
    52c4:	2300      	movs	r3, #0
    52c6:	627b      	str	r3, [r7, #36]	; 0x24
    52c8:	e017      	b.n	52fa <c_if_cond+0xd6>
                    c_if_cond(comp, pns->nodes[i], !jump_if, label2);
    52ca:	69fb      	ldr	r3, [r7, #28]
    52cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    52ce:	3202      	adds	r2, #2
    52d0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    52d4:	79fb      	ldrb	r3, [r7, #7]
    52d6:	2b00      	cmp	r3, #0
    52d8:	bf14      	ite	ne
    52da:	2301      	movne	r3, #1
    52dc:	2300      	moveq	r3, #0
    52de:	b2db      	uxtb	r3, r3
    52e0:	f083 0301 	eor.w	r3, r3, #1
    52e4:	b2db      	uxtb	r3, r3
    52e6:	f003 0301 	and.w	r3, r3, #1
    52ea:	b2da      	uxtb	r2, r3
    52ec:	697b      	ldr	r3, [r7, #20]
    52ee:	68f8      	ldr	r0, [r7, #12]
    52f0:	f7ff ff98 	bl	5224 <c_if_cond>
                for (int i = 0; i < n - 1; i++) {
    52f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    52f6:	3301      	adds	r3, #1
    52f8:	627b      	str	r3, [r7, #36]	; 0x24
    52fa:	69bb      	ldr	r3, [r7, #24]
    52fc:	1e5a      	subs	r2, r3, #1
    52fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5300:	429a      	cmp	r2, r3
    5302:	dce2      	bgt.n	52ca <c_if_cond+0xa6>
                c_if_cond(comp, pns->nodes[n - 1], jump_if, label);
    5304:	69bb      	ldr	r3, [r7, #24]
    5306:	1e5a      	subs	r2, r3, #1
    5308:	69fb      	ldr	r3, [r7, #28]
    530a:	3202      	adds	r2, #2
    530c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    5310:	79fa      	ldrb	r2, [r7, #7]
    5312:	683b      	ldr	r3, [r7, #0]
    5314:	68f8      	ldr	r0, [r7, #12]
    5316:	f7ff ff85 	bl	5224 <c_if_cond>
                EMIT_ARG(label_assign, label2);
    531a:	68fb      	ldr	r3, [r7, #12]
    531c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    531e:	6979      	ldr	r1, [r7, #20]
    5320:	4618      	mov	r0, r3
    5322:	f005 f827 	bl	a374 <mp_emit_bc_label_assign>
            return;
    5326:	e082      	b.n	542e <c_if_cond+0x20a>
                for (int i = 0; i < n; i++) {
    5328:	2300      	movs	r3, #0
    532a:	623b      	str	r3, [r7, #32]
    532c:	e00c      	b.n	5348 <c_if_cond+0x124>
                    c_if_cond(comp, pns->nodes[i], jump_if, label);
    532e:	69fb      	ldr	r3, [r7, #28]
    5330:	6a3a      	ldr	r2, [r7, #32]
    5332:	3202      	adds	r2, #2
    5334:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    5338:	79fa      	ldrb	r2, [r7, #7]
    533a:	683b      	ldr	r3, [r7, #0]
    533c:	68f8      	ldr	r0, [r7, #12]
    533e:	f7ff ff71 	bl	5224 <c_if_cond>
                for (int i = 0; i < n; i++) {
    5342:	6a3b      	ldr	r3, [r7, #32]
    5344:	3301      	adds	r3, #1
    5346:	623b      	str	r3, [r7, #32]
    5348:	6a3a      	ldr	r2, [r7, #32]
    534a:	69bb      	ldr	r3, [r7, #24]
    534c:	429a      	cmp	r2, r3
    534e:	dbee      	blt.n	532e <c_if_cond+0x10a>
            return;
    5350:	e06d      	b.n	542e <c_if_cond+0x20a>
        } else if (MP_PARSE_NODE_STRUCT_KIND(pns) == PN_and_test) {
    5352:	69fb      	ldr	r3, [r7, #28]
    5354:	685b      	ldr	r3, [r3, #4]
    5356:	b2db      	uxtb	r3, r3
    5358:	2b1d      	cmp	r3, #29
    535a:	d106      	bne.n	536a <c_if_cond+0x146>
            if (jump_if == false) {
    535c:	79fb      	ldrb	r3, [r7, #7]
    535e:	f083 0301 	eor.w	r3, r3, #1
    5362:	b2db      	uxtb	r3, r3
    5364:	2b00      	cmp	r3, #0
    5366:	d0a8      	beq.n	52ba <c_if_cond+0x96>
                goto and_or_logic2;
    5368:	e7de      	b.n	5328 <c_if_cond+0x104>
            }
        } else if (MP_PARSE_NODE_STRUCT_KIND(pns) == PN_not_test_2) {
    536a:	69fb      	ldr	r3, [r7, #28]
    536c:	685b      	ldr	r3, [r3, #4]
    536e:	b2db      	uxtb	r3, r3
    5370:	2b1e      	cmp	r3, #30
    5372:	d112      	bne.n	539a <c_if_cond+0x176>
            c_if_cond(comp, pns->nodes[0], !jump_if, label);
    5374:	69fb      	ldr	r3, [r7, #28]
    5376:	6899      	ldr	r1, [r3, #8]
    5378:	79fb      	ldrb	r3, [r7, #7]
    537a:	2b00      	cmp	r3, #0
    537c:	bf14      	ite	ne
    537e:	2301      	movne	r3, #1
    5380:	2300      	moveq	r3, #0
    5382:	b2db      	uxtb	r3, r3
    5384:	f083 0301 	eor.w	r3, r3, #1
    5388:	b2db      	uxtb	r3, r3
    538a:	f003 0301 	and.w	r3, r3, #1
    538e:	b2da      	uxtb	r2, r3
    5390:	683b      	ldr	r3, [r7, #0]
    5392:	68f8      	ldr	r0, [r7, #12]
    5394:	f7ff ff46 	bl	5224 <c_if_cond>
            return;
    5398:	e049      	b.n	542e <c_if_cond+0x20a>
        } else if (MP_PARSE_NODE_STRUCT_KIND(pns) == PN_atom_paren) {
    539a:	69fb      	ldr	r3, [r7, #28]
    539c:	685b      	ldr	r3, [r3, #4]
    539e:	b2db      	uxtb	r3, r3
    53a0:	2b2a      	cmp	r3, #42	; 0x2a
    53a2:	d133      	bne.n	540c <c_if_cond+0x1e8>
            // cond is something in parenthesis
            if (MP_PARSE_NODE_IS_NULL(pns->nodes[0])) {
    53a4:	69fb      	ldr	r3, [r7, #28]
    53a6:	689b      	ldr	r3, [r3, #8]
    53a8:	2b00      	cmp	r3, #0
    53aa:	d10d      	bne.n	53c8 <c_if_cond+0x1a4>
                // empty tuple, acts as false for the condition
                if (jump_if == false) {
    53ac:	79fb      	ldrb	r3, [r7, #7]
    53ae:	f083 0301 	eor.w	r3, r3, #1
    53b2:	b2db      	uxtb	r3, r3
    53b4:	2b00      	cmp	r3, #0
    53b6:	d039      	beq.n	542c <c_if_cond+0x208>
                    EMIT_ARG(jump, label);
    53b8:	68fb      	ldr	r3, [r7, #12]
    53ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    53bc:	683a      	ldr	r2, [r7, #0]
    53be:	4611      	mov	r1, r2
    53c0:	4618      	mov	r0, r3
    53c2:	f005 fadf 	bl	a984 <mp_emit_bc_jump>
                // non-empty tuple, acts as true for the condition
                if (jump_if == true) {
                    EMIT_ARG(jump, label);
                }
            }
            return;
    53c6:	e031      	b.n	542c <c_if_cond+0x208>
                assert(MP_PARSE_NODE_IS_STRUCT_KIND(pns->nodes[0], PN_testlist_comp));
    53c8:	69fb      	ldr	r3, [r7, #28]
    53ca:	689b      	ldr	r3, [r3, #8]
    53cc:	2b00      	cmp	r3, #0
    53ce:	d00b      	beq.n	53e8 <c_if_cond+0x1c4>
    53d0:	69fb      	ldr	r3, [r7, #28]
    53d2:	689b      	ldr	r3, [r3, #8]
    53d4:	f003 0303 	and.w	r3, r3, #3
    53d8:	2b00      	cmp	r3, #0
    53da:	d105      	bne.n	53e8 <c_if_cond+0x1c4>
    53dc:	69fb      	ldr	r3, [r7, #28]
    53de:	689b      	ldr	r3, [r3, #8]
    53e0:	685b      	ldr	r3, [r3, #4]
    53e2:	b2db      	uxtb	r3, r3
    53e4:	2b8a      	cmp	r3, #138	; 0x8a
    53e6:	d006      	beq.n	53f6 <c_if_cond+0x1d2>
    53e8:	4b12      	ldr	r3, [pc, #72]	; (5434 <c_if_cond+0x210>)
    53ea:	4a13      	ldr	r2, [pc, #76]	; (5438 <c_if_cond+0x214>)
    53ec:	f240 114b 	movw	r1, #331	; 0x14b
    53f0:	4812      	ldr	r0, [pc, #72]	; (543c <c_if_cond+0x218>)
    53f2:	f016 f96d 	bl	1b6d0 <__assert_func>
                if (jump_if == true) {
    53f6:	79fb      	ldrb	r3, [r7, #7]
    53f8:	2b00      	cmp	r3, #0
    53fa:	d017      	beq.n	542c <c_if_cond+0x208>
                    EMIT_ARG(jump, label);
    53fc:	68fb      	ldr	r3, [r7, #12]
    53fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5400:	683a      	ldr	r2, [r7, #0]
    5402:	4611      	mov	r1, r2
    5404:	4618      	mov	r0, r3
    5406:	f005 fabd 	bl	a984 <mp_emit_bc_jump>
            return;
    540a:	e00f      	b.n	542c <c_if_cond+0x208>
        }
    }

    // nothing special, fall back to default compiling for node and jump
    compile_node(comp, pn);
    540c:	68b9      	ldr	r1, [r7, #8]
    540e:	68f8      	ldr	r0, [r7, #12]
    5410:	f003 fbc0 	bl	8b94 <compile_node>
    EMIT_ARG(pop_jump_if, jump_if, label);
    5414:	68fb      	ldr	r3, [r7, #12]
    5416:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5418:	683a      	ldr	r2, [r7, #0]
    541a:	79f9      	ldrb	r1, [r7, #7]
    541c:	4618      	mov	r0, r3
    541e:	f005 fac3 	bl	a9a8 <mp_emit_bc_pop_jump_if>
    5422:	e004      	b.n	542e <c_if_cond+0x20a>
        return;
    5424:	bf00      	nop
    5426:	e002      	b.n	542e <c_if_cond+0x20a>
        return;
    5428:	bf00      	nop
    542a:	e000      	b.n	542e <c_if_cond+0x20a>
            return;
    542c:	bf00      	nop
}
    542e:	3728      	adds	r7, #40	; 0x28
    5430:	46bd      	mov	sp, r7
    5432:	bd80      	pop	{r7, pc}
    5434:	00020248 	.word	0x00020248
    5438:	00020dcc 	.word	0x00020dcc
    543c:	00020234 	.word	0x00020234

00005440 <c_assign_atom_expr>:

typedef enum { ASSIGN_STORE, ASSIGN_AUG_LOAD, ASSIGN_AUG_STORE } assign_kind_t;
STATIC void c_assign(compiler_t *comp, mp_parse_node_t pn, assign_kind_t kind);

STATIC void c_assign_atom_expr(compiler_t *comp, mp_parse_node_struct_t *pns, assign_kind_t assign_kind) {
    5440:	b580      	push	{r7, lr}
    5442:	b088      	sub	sp, #32
    5444:	af00      	add	r7, sp, #0
    5446:	60f8      	str	r0, [r7, #12]
    5448:	60b9      	str	r1, [r7, #8]
    544a:	607a      	str	r2, [r7, #4]
    if (assign_kind != ASSIGN_AUG_STORE) {
    544c:	687b      	ldr	r3, [r7, #4]
    544e:	2b02      	cmp	r3, #2
    5450:	d005      	beq.n	545e <c_assign_atom_expr+0x1e>
        compile_node(comp, pns->nodes[0]);
    5452:	68bb      	ldr	r3, [r7, #8]
    5454:	689b      	ldr	r3, [r3, #8]
    5456:	4619      	mov	r1, r3
    5458:	68f8      	ldr	r0, [r7, #12]
    545a:	f003 fb9b 	bl	8b94 <compile_node>
    }

    if (MP_PARSE_NODE_IS_STRUCT(pns->nodes[1])) {
    545e:	68bb      	ldr	r3, [r7, #8]
    5460:	68db      	ldr	r3, [r3, #12]
    5462:	2b00      	cmp	r3, #0
    5464:	f000 80ad 	beq.w	55c2 <c_assign_atom_expr+0x182>
    5468:	68bb      	ldr	r3, [r7, #8]
    546a:	68db      	ldr	r3, [r3, #12]
    546c:	f003 0303 	and.w	r3, r3, #3
    5470:	2b00      	cmp	r3, #0
    5472:	f040 80a6 	bne.w	55c2 <c_assign_atom_expr+0x182>
        mp_parse_node_struct_t *pns1 = (mp_parse_node_struct_t*)pns->nodes[1];
    5476:	68bb      	ldr	r3, [r7, #8]
    5478:	68db      	ldr	r3, [r3, #12]
    547a:	61fb      	str	r3, [r7, #28]
        if (MP_PARSE_NODE_STRUCT_KIND(pns1) == PN_atom_expr_trailers) {
    547c:	69fb      	ldr	r3, [r7, #28]
    547e:	685b      	ldr	r3, [r3, #4]
    5480:	b2db      	uxtb	r3, r3
    5482:	2b86      	cmp	r3, #134	; 0x86
    5484:	d13a      	bne.n	54fc <c_assign_atom_expr+0xbc>
            int n = MP_PARSE_NODE_STRUCT_NUM_NODES(pns1);
    5486:	69fb      	ldr	r3, [r7, #28]
    5488:	685b      	ldr	r3, [r3, #4]
    548a:	0a1b      	lsrs	r3, r3, #8
    548c:	617b      	str	r3, [r7, #20]
            if (assign_kind != ASSIGN_AUG_STORE) {
    548e:	687b      	ldr	r3, [r7, #4]
    5490:	2b02      	cmp	r3, #2
    5492:	d013      	beq.n	54bc <c_assign_atom_expr+0x7c>
                for (int i = 0; i < n - 1; i++) {
    5494:	2300      	movs	r3, #0
    5496:	61bb      	str	r3, [r7, #24]
    5498:	e00b      	b.n	54b2 <c_assign_atom_expr+0x72>
                    compile_node(comp, pns1->nodes[i]);
    549a:	69fb      	ldr	r3, [r7, #28]
    549c:	69ba      	ldr	r2, [r7, #24]
    549e:	3202      	adds	r2, #2
    54a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    54a4:	4619      	mov	r1, r3
    54a6:	68f8      	ldr	r0, [r7, #12]
    54a8:	f003 fb74 	bl	8b94 <compile_node>
                for (int i = 0; i < n - 1; i++) {
    54ac:	69bb      	ldr	r3, [r7, #24]
    54ae:	3301      	adds	r3, #1
    54b0:	61bb      	str	r3, [r7, #24]
    54b2:	697b      	ldr	r3, [r7, #20]
    54b4:	1e5a      	subs	r2, r3, #1
    54b6:	69bb      	ldr	r3, [r7, #24]
    54b8:	429a      	cmp	r2, r3
    54ba:	dcee      	bgt.n	549a <c_assign_atom_expr+0x5a>
                }
            }
            assert(MP_PARSE_NODE_IS_STRUCT(pns1->nodes[n - 1]));
    54bc:	697b      	ldr	r3, [r7, #20]
    54be:	1e5a      	subs	r2, r3, #1
    54c0:	69fb      	ldr	r3, [r7, #28]
    54c2:	3202      	adds	r2, #2
    54c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    54c8:	2b00      	cmp	r3, #0
    54ca:	d009      	beq.n	54e0 <c_assign_atom_expr+0xa0>
    54cc:	697b      	ldr	r3, [r7, #20]
    54ce:	1e5a      	subs	r2, r3, #1
    54d0:	69fb      	ldr	r3, [r7, #28]
    54d2:	3202      	adds	r2, #2
    54d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    54d8:	f003 0303 	and.w	r3, r3, #3
    54dc:	2b00      	cmp	r3, #0
    54de:	d006      	beq.n	54ee <c_assign_atom_expr+0xae>
    54e0:	4b3c      	ldr	r3, [pc, #240]	; (55d4 <c_assign_atom_expr+0x194>)
    54e2:	4a3d      	ldr	r2, [pc, #244]	; (55d8 <c_assign_atom_expr+0x198>)
    54e4:	f240 116b 	movw	r1, #363	; 0x16b
    54e8:	483c      	ldr	r0, [pc, #240]	; (55dc <c_assign_atom_expr+0x19c>)
    54ea:	f016 f8f1 	bl	1b6d0 <__assert_func>
            pns1 = (mp_parse_node_struct_t*)pns1->nodes[n - 1];
    54ee:	697b      	ldr	r3, [r7, #20]
    54f0:	1e5a      	subs	r2, r3, #1
    54f2:	69fb      	ldr	r3, [r7, #28]
    54f4:	3202      	adds	r2, #2
    54f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    54fa:	61fb      	str	r3, [r7, #28]
        }
        if (MP_PARSE_NODE_STRUCT_KIND(pns1) == PN_trailer_bracket) {
    54fc:	69fb      	ldr	r3, [r7, #28]
    54fe:	685b      	ldr	r3, [r3, #4]
    5500:	b2db      	uxtb	r3, r3
    5502:	2b2e      	cmp	r3, #46	; 0x2e
    5504:	d127      	bne.n	5556 <c_assign_atom_expr+0x116>
            if (assign_kind == ASSIGN_AUG_STORE) {
    5506:	687b      	ldr	r3, [r7, #4]
    5508:	2b02      	cmp	r3, #2
    550a:	d10a      	bne.n	5522 <c_assign_atom_expr+0xe2>
                EMIT(rot_three);
    550c:	68fb      	ldr	r3, [r7, #12]
    550e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5510:	4618      	mov	r0, r3
    5512:	f005 fa27 	bl	a964 <mp_emit_bc_rot_three>
                EMIT(store_subscr);
    5516:	68fb      	ldr	r3, [r7, #12]
    5518:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    551a:	4618      	mov	r0, r3
    551c:	f005 f964 	bl	a7e8 <mp_emit_bc_store_subscr>
                    EMIT(load_subscr);
                } else {
                    EMIT(store_subscr);
                }
            }
            return;
    5520:	e055      	b.n	55ce <c_assign_atom_expr+0x18e>
                compile_node(comp, pns1->nodes[0]);
    5522:	69fb      	ldr	r3, [r7, #28]
    5524:	689b      	ldr	r3, [r3, #8]
    5526:	4619      	mov	r1, r3
    5528:	68f8      	ldr	r0, [r7, #12]
    552a:	f003 fb33 	bl	8b94 <compile_node>
                if (assign_kind == ASSIGN_AUG_LOAD) {
    552e:	687b      	ldr	r3, [r7, #4]
    5530:	2b01      	cmp	r3, #1
    5532:	d10a      	bne.n	554a <c_assign_atom_expr+0x10a>
                    EMIT(dup_top_two);
    5534:	68fb      	ldr	r3, [r7, #12]
    5536:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5538:	4618      	mov	r0, r3
    553a:	f005 f9e1 	bl	a900 <mp_emit_bc_dup_top_two>
                    EMIT(load_subscr);
    553e:	68fb      	ldr	r3, [r7, #12]
    5540:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5542:	4618      	mov	r0, r3
    5544:	f005 f8ce 	bl	a6e4 <mp_emit_bc_load_subscr>
            return;
    5548:	e041      	b.n	55ce <c_assign_atom_expr+0x18e>
                    EMIT(store_subscr);
    554a:	68fb      	ldr	r3, [r7, #12]
    554c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    554e:	4618      	mov	r0, r3
    5550:	f005 f94a 	bl	a7e8 <mp_emit_bc_store_subscr>
            return;
    5554:	e03b      	b.n	55ce <c_assign_atom_expr+0x18e>
        } else if (MP_PARSE_NODE_STRUCT_KIND(pns1) == PN_trailer_period) {
    5556:	69fb      	ldr	r3, [r7, #28]
    5558:	685b      	ldr	r3, [r3, #4]
    555a:	b2db      	uxtb	r3, r3
    555c:	2b2f      	cmp	r3, #47	; 0x2f
    555e:	d130      	bne.n	55c2 <c_assign_atom_expr+0x182>
            assert(MP_PARSE_NODE_IS_ID(pns1->nodes[0]));
    5560:	69fb      	ldr	r3, [r7, #28]
    5562:	689b      	ldr	r3, [r3, #8]
    5564:	f003 030f 	and.w	r3, r3, #15
    5568:	2b02      	cmp	r3, #2
    556a:	d006      	beq.n	557a <c_assign_atom_expr+0x13a>
    556c:	4b1c      	ldr	r3, [pc, #112]	; (55e0 <c_assign_atom_expr+0x1a0>)
    556e:	4a1a      	ldr	r2, [pc, #104]	; (55d8 <c_assign_atom_expr+0x198>)
    5570:	f240 117d 	movw	r1, #381	; 0x17d
    5574:	4819      	ldr	r0, [pc, #100]	; (55dc <c_assign_atom_expr+0x19c>)
    5576:	f016 f8ab 	bl	1b6d0 <__assert_func>
            if (assign_kind == ASSIGN_AUG_LOAD) {
    557a:	687b      	ldr	r3, [r7, #4]
    557c:	2b01      	cmp	r3, #1
    557e:	d10e      	bne.n	559e <c_assign_atom_expr+0x15e>
                EMIT(dup_top);
    5580:	68fb      	ldr	r3, [r7, #12]
    5582:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5584:	4618      	mov	r0, r3
    5586:	f005 f9ab 	bl	a8e0 <mp_emit_bc_dup_top>
                EMIT_ARG(load_attr, MP_PARSE_NODE_LEAF_ARG(pns1->nodes[0]));
    558a:	68fb      	ldr	r3, [r7, #12]
    558c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    558e:	69fb      	ldr	r3, [r7, #28]
    5590:	689b      	ldr	r3, [r3, #8]
    5592:	091b      	lsrs	r3, r3, #4
    5594:	4619      	mov	r1, r3
    5596:	4610      	mov	r0, r2
    5598:	f005 f864 	bl	a664 <mp_emit_bc_load_attr>
                if (assign_kind == ASSIGN_AUG_STORE) {
                    EMIT(rot_two);
                }
                EMIT_ARG(store_attr, MP_PARSE_NODE_LEAF_ARG(pns1->nodes[0]));
            }
            return;
    559c:	e017      	b.n	55ce <c_assign_atom_expr+0x18e>
                if (assign_kind == ASSIGN_AUG_STORE) {
    559e:	687b      	ldr	r3, [r7, #4]
    55a0:	2b02      	cmp	r3, #2
    55a2:	d104      	bne.n	55ae <c_assign_atom_expr+0x16e>
                    EMIT(rot_two);
    55a4:	68fb      	ldr	r3, [r7, #12]
    55a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    55a8:	4618      	mov	r0, r3
    55aa:	f005 f9cb 	bl	a944 <mp_emit_bc_rot_two>
                EMIT_ARG(store_attr, MP_PARSE_NODE_LEAF_ARG(pns1->nodes[0]));
    55ae:	68fb      	ldr	r3, [r7, #12]
    55b0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    55b2:	69fb      	ldr	r3, [r7, #28]
    55b4:	689b      	ldr	r3, [r3, #8]
    55b6:	091b      	lsrs	r3, r3, #4
    55b8:	4619      	mov	r1, r3
    55ba:	4610      	mov	r0, r2
    55bc:	f005 f900 	bl	a7c0 <mp_emit_bc_store_attr>
            return;
    55c0:	e005      	b.n	55ce <c_assign_atom_expr+0x18e>
        }
    }

    compile_syntax_error(comp, (mp_parse_node_t)pns, "can't assign to expression");
    55c2:	68bb      	ldr	r3, [r7, #8]
    55c4:	4a07      	ldr	r2, [pc, #28]	; (55e4 <c_assign_atom_expr+0x1a4>)
    55c6:	4619      	mov	r1, r3
    55c8:	68f8      	ldr	r0, [r7, #12]
    55ca:	f7ff fc85 	bl	4ed8 <compile_syntax_error>
}
    55ce:	3720      	adds	r7, #32
    55d0:	46bd      	mov	sp, r7
    55d2:	bd80      	pop	{r7, pc}
    55d4:	00020288 	.word	0x00020288
    55d8:	00020dd8 	.word	0x00020dd8
    55dc:	00020234 	.word	0x00020234
    55e0:	000202b4 	.word	0x000202b4
    55e4:	000202d8 	.word	0x000202d8

000055e8 <c_assign_tuple>:

// we need to allow for a caller passing in 1 initial node (node_head) followed by an array of nodes (nodes_tail)
STATIC void c_assign_tuple(compiler_t *comp, mp_parse_node_t node_head, uint num_tail, mp_parse_node_t *nodes_tail) {
    55e8:	b580      	push	{r7, lr}
    55ea:	b088      	sub	sp, #32
    55ec:	af00      	add	r7, sp, #0
    55ee:	60f8      	str	r0, [r7, #12]
    55f0:	60b9      	str	r1, [r7, #8]
    55f2:	607a      	str	r2, [r7, #4]
    55f4:	603b      	str	r3, [r7, #0]
    uint num_head = (node_head == MP_PARSE_NODE_NULL) ? 0 : 1;
    55f6:	68bb      	ldr	r3, [r7, #8]
    55f8:	2b00      	cmp	r3, #0
    55fa:	bf14      	ite	ne
    55fc:	2301      	movne	r3, #1
    55fe:	2300      	moveq	r3, #0
    5600:	b2db      	uxtb	r3, r3
    5602:	613b      	str	r3, [r7, #16]

    // look for star expression
    uint have_star_index = -1;
    5604:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    5608:	61fb      	str	r3, [r7, #28]
    if (num_head != 0 && MP_PARSE_NODE_IS_STRUCT_KIND(node_head, PN_star_expr)) {
    560a:	693b      	ldr	r3, [r7, #16]
    560c:	2b00      	cmp	r3, #0
    560e:	d015      	beq.n	563c <c_assign_tuple+0x54>
    5610:	68bb      	ldr	r3, [r7, #8]
    5612:	2b00      	cmp	r3, #0
    5614:	d012      	beq.n	563c <c_assign_tuple+0x54>
    5616:	68bb      	ldr	r3, [r7, #8]
    5618:	f003 0303 	and.w	r3, r3, #3
    561c:	2b00      	cmp	r3, #0
    561e:	d10d      	bne.n	563c <c_assign_tuple+0x54>
    5620:	68bb      	ldr	r3, [r7, #8]
    5622:	685b      	ldr	r3, [r3, #4]
    5624:	b2db      	uxtb	r3, r3
    5626:	2b20      	cmp	r3, #32
    5628:	d108      	bne.n	563c <c_assign_tuple+0x54>
        EMIT_ARG(unpack_ex, 0, num_tail);
    562a:	68fb      	ldr	r3, [r7, #12]
    562c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    562e:	687a      	ldr	r2, [r7, #4]
    5630:	2100      	movs	r1, #0
    5632:	4618      	mov	r0, r3
    5634:	f005 fbd8 	bl	ade8 <mp_emit_bc_unpack_ex>
        have_star_index = 0;
    5638:	2300      	movs	r3, #0
    563a:	61fb      	str	r3, [r7, #28]
    }
    for (uint i = 0; i < num_tail; i++) {
    563c:	2300      	movs	r3, #0
    563e:	61bb      	str	r3, [r7, #24]
    5640:	e03b      	b.n	56ba <c_assign_tuple+0xd2>
        if (MP_PARSE_NODE_IS_STRUCT_KIND(nodes_tail[i], PN_star_expr)) {
    5642:	69bb      	ldr	r3, [r7, #24]
    5644:	009b      	lsls	r3, r3, #2
    5646:	683a      	ldr	r2, [r7, #0]
    5648:	4413      	add	r3, r2
    564a:	681b      	ldr	r3, [r3, #0]
    564c:	2b00      	cmp	r3, #0
    564e:	d031      	beq.n	56b4 <c_assign_tuple+0xcc>
    5650:	69bb      	ldr	r3, [r7, #24]
    5652:	009b      	lsls	r3, r3, #2
    5654:	683a      	ldr	r2, [r7, #0]
    5656:	4413      	add	r3, r2
    5658:	681b      	ldr	r3, [r3, #0]
    565a:	f003 0303 	and.w	r3, r3, #3
    565e:	2b00      	cmp	r3, #0
    5660:	d128      	bne.n	56b4 <c_assign_tuple+0xcc>
    5662:	69bb      	ldr	r3, [r7, #24]
    5664:	009b      	lsls	r3, r3, #2
    5666:	683a      	ldr	r2, [r7, #0]
    5668:	4413      	add	r3, r2
    566a:	681b      	ldr	r3, [r3, #0]
    566c:	685b      	ldr	r3, [r3, #4]
    566e:	b2db      	uxtb	r3, r3
    5670:	2b20      	cmp	r3, #32
    5672:	d11f      	bne.n	56b4 <c_assign_tuple+0xcc>
            if (have_star_index == (uint)-1) {
    5674:	69fb      	ldr	r3, [r7, #28]
    5676:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    567a:	d110      	bne.n	569e <c_assign_tuple+0xb6>
                EMIT_ARG(unpack_ex, num_head + i, num_tail - i - 1);
    567c:	68fb      	ldr	r3, [r7, #12]
    567e:	6a98      	ldr	r0, [r3, #40]	; 0x28
    5680:	693a      	ldr	r2, [r7, #16]
    5682:	69bb      	ldr	r3, [r7, #24]
    5684:	18d1      	adds	r1, r2, r3
    5686:	687a      	ldr	r2, [r7, #4]
    5688:	69bb      	ldr	r3, [r7, #24]
    568a:	1ad3      	subs	r3, r2, r3
    568c:	3b01      	subs	r3, #1
    568e:	461a      	mov	r2, r3
    5690:	f005 fbaa 	bl	ade8 <mp_emit_bc_unpack_ex>
                have_star_index = num_head + i;
    5694:	693a      	ldr	r2, [r7, #16]
    5696:	69bb      	ldr	r3, [r7, #24]
    5698:	4413      	add	r3, r2
    569a:	61fb      	str	r3, [r7, #28]
    569c:	e00a      	b.n	56b4 <c_assign_tuple+0xcc>
            } else {
                compile_syntax_error(comp, nodes_tail[i], "multiple *x in assignment");
    569e:	69bb      	ldr	r3, [r7, #24]
    56a0:	009b      	lsls	r3, r3, #2
    56a2:	683a      	ldr	r2, [r7, #0]
    56a4:	4413      	add	r3, r2
    56a6:	681b      	ldr	r3, [r3, #0]
    56a8:	4a2a      	ldr	r2, [pc, #168]	; (5754 <c_assign_tuple+0x16c>)
    56aa:	4619      	mov	r1, r3
    56ac:	68f8      	ldr	r0, [r7, #12]
    56ae:	f7ff fc13 	bl	4ed8 <compile_syntax_error>
                return;
    56b2:	e04b      	b.n	574c <c_assign_tuple+0x164>
    for (uint i = 0; i < num_tail; i++) {
    56b4:	69bb      	ldr	r3, [r7, #24]
    56b6:	3301      	adds	r3, #1
    56b8:	61bb      	str	r3, [r7, #24]
    56ba:	69ba      	ldr	r2, [r7, #24]
    56bc:	687b      	ldr	r3, [r7, #4]
    56be:	429a      	cmp	r2, r3
    56c0:	d3bf      	bcc.n	5642 <c_assign_tuple+0x5a>
            }
        }
    }
    if (have_star_index == (uint)-1) {
    56c2:	69fb      	ldr	r3, [r7, #28]
    56c4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    56c8:	d107      	bne.n	56da <c_assign_tuple+0xf2>
        EMIT_ARG(unpack_sequence, num_head + num_tail);
    56ca:	68fb      	ldr	r3, [r7, #12]
    56cc:	6a98      	ldr	r0, [r3, #40]	; 0x28
    56ce:	693a      	ldr	r2, [r7, #16]
    56d0:	687b      	ldr	r3, [r7, #4]
    56d2:	4413      	add	r3, r2
    56d4:	4619      	mov	r1, r3
    56d6:	f005 fb73 	bl	adc0 <mp_emit_bc_unpack_sequence>
    }
    if (num_head != 0) {
    56da:	693b      	ldr	r3, [r7, #16]
    56dc:	2b00      	cmp	r3, #0
    56de:	d00f      	beq.n	5700 <c_assign_tuple+0x118>
        if (0 == have_star_index) {
    56e0:	69fb      	ldr	r3, [r7, #28]
    56e2:	2b00      	cmp	r3, #0
    56e4:	d107      	bne.n	56f6 <c_assign_tuple+0x10e>
            c_assign(comp, ((mp_parse_node_struct_t*)node_head)->nodes[0], ASSIGN_STORE);
    56e6:	68bb      	ldr	r3, [r7, #8]
    56e8:	689b      	ldr	r3, [r3, #8]
    56ea:	2200      	movs	r2, #0
    56ec:	4619      	mov	r1, r3
    56ee:	68f8      	ldr	r0, [r7, #12]
    56f0:	f000 f832 	bl	5758 <c_assign>
    56f4:	e004      	b.n	5700 <c_assign_tuple+0x118>
        } else {
            c_assign(comp, node_head, ASSIGN_STORE);
    56f6:	2200      	movs	r2, #0
    56f8:	68b9      	ldr	r1, [r7, #8]
    56fa:	68f8      	ldr	r0, [r7, #12]
    56fc:	f000 f82c 	bl	5758 <c_assign>
        }
    }
    for (uint i = 0; i < num_tail; i++) {
    5700:	2300      	movs	r3, #0
    5702:	617b      	str	r3, [r7, #20]
    5704:	e01e      	b.n	5744 <c_assign_tuple+0x15c>
        if (num_head + i == have_star_index) {
    5706:	693a      	ldr	r2, [r7, #16]
    5708:	697b      	ldr	r3, [r7, #20]
    570a:	441a      	add	r2, r3
    570c:	69fb      	ldr	r3, [r7, #28]
    570e:	429a      	cmp	r2, r3
    5710:	d10b      	bne.n	572a <c_assign_tuple+0x142>
            c_assign(comp, ((mp_parse_node_struct_t*)nodes_tail[i])->nodes[0], ASSIGN_STORE);
    5712:	697b      	ldr	r3, [r7, #20]
    5714:	009b      	lsls	r3, r3, #2
    5716:	683a      	ldr	r2, [r7, #0]
    5718:	4413      	add	r3, r2
    571a:	681b      	ldr	r3, [r3, #0]
    571c:	689b      	ldr	r3, [r3, #8]
    571e:	2200      	movs	r2, #0
    5720:	4619      	mov	r1, r3
    5722:	68f8      	ldr	r0, [r7, #12]
    5724:	f000 f818 	bl	5758 <c_assign>
    5728:	e009      	b.n	573e <c_assign_tuple+0x156>
        } else {
            c_assign(comp, nodes_tail[i], ASSIGN_STORE);
    572a:	697b      	ldr	r3, [r7, #20]
    572c:	009b      	lsls	r3, r3, #2
    572e:	683a      	ldr	r2, [r7, #0]
    5730:	4413      	add	r3, r2
    5732:	681b      	ldr	r3, [r3, #0]
    5734:	2200      	movs	r2, #0
    5736:	4619      	mov	r1, r3
    5738:	68f8      	ldr	r0, [r7, #12]
    573a:	f000 f80d 	bl	5758 <c_assign>
    for (uint i = 0; i < num_tail; i++) {
    573e:	697b      	ldr	r3, [r7, #20]
    5740:	3301      	adds	r3, #1
    5742:	617b      	str	r3, [r7, #20]
    5744:	697a      	ldr	r2, [r7, #20]
    5746:	687b      	ldr	r3, [r7, #4]
    5748:	429a      	cmp	r2, r3
    574a:	d3dc      	bcc.n	5706 <c_assign_tuple+0x11e>
        }
    }
}
    574c:	3720      	adds	r7, #32
    574e:	46bd      	mov	sp, r7
    5750:	bd80      	pop	{r7, pc}
    5752:	bf00      	nop
    5754:	000202f4 	.word	0x000202f4

00005758 <c_assign>:

// assigns top of stack to pn
STATIC void c_assign(compiler_t *comp, mp_parse_node_t pn, assign_kind_t assign_kind) {
    5758:	b580      	push	{r7, lr}
    575a:	b088      	sub	sp, #32
    575c:	af00      	add	r7, sp, #0
    575e:	60f8      	str	r0, [r7, #12]
    5760:	60b9      	str	r1, [r7, #8]
    5762:	607a      	str	r2, [r7, #4]
    assert(!MP_PARSE_NODE_IS_NULL(pn));
    5764:	68bb      	ldr	r3, [r7, #8]
    5766:	2b00      	cmp	r3, #0
    5768:	d106      	bne.n	5778 <c_assign+0x20>
    576a:	4b7a      	ldr	r3, [pc, #488]	; (5954 <c_assign+0x1fc>)
    576c:	4a7a      	ldr	r2, [pc, #488]	; (5958 <c_assign+0x200>)
    576e:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
    5772:	487a      	ldr	r0, [pc, #488]	; (595c <c_assign+0x204>)
    5774:	f015 ffac 	bl	1b6d0 <__assert_func>
    if (MP_PARSE_NODE_IS_LEAF(pn)) {
    5778:	68bb      	ldr	r3, [r7, #8]
    577a:	f003 0303 	and.w	r3, r3, #3
    577e:	2b00      	cmp	r3, #0
    5780:	d018      	beq.n	57b4 <c_assign+0x5c>
        if (MP_PARSE_NODE_IS_ID(pn)) {
    5782:	68bb      	ldr	r3, [r7, #8]
    5784:	f003 030f 	and.w	r3, r3, #15
    5788:	2b02      	cmp	r3, #2
    578a:	f040 80cf 	bne.w	592c <c_assign+0x1d4>
            qstr arg = MP_PARSE_NODE_LEAF_ARG(pn);
    578e:	68bb      	ldr	r3, [r7, #8]
    5790:	091b      	lsrs	r3, r3, #4
    5792:	613b      	str	r3, [r7, #16]
            switch (assign_kind) {
    5794:	687b      	ldr	r3, [r7, #4]
    5796:	2b00      	cmp	r3, #0
    5798:	d001      	beq.n	579e <c_assign+0x46>
    579a:	2b02      	cmp	r3, #2
    579c:	d104      	bne.n	57a8 <c_assign+0x50>
                case ASSIGN_STORE:
                case ASSIGN_AUG_STORE:
                    compile_store_id(comp, arg);
    579e:	6939      	ldr	r1, [r7, #16]
    57a0:	68f8      	ldr	r0, [r7, #12]
    57a2:	f7ff fcb9 	bl	5118 <compile_store_id>
                    break;
    57a6:	e0c0      	b.n	592a <c_assign+0x1d2>
                case ASSIGN_AUG_LOAD:
                default:
                    compile_load_id(comp, arg);
    57a8:	6939      	ldr	r1, [r7, #16]
    57aa:	68f8      	ldr	r0, [r7, #12]
    57ac:	f7ff fc96 	bl	50dc <compile_load_id>
                    break;
    57b0:	bf00      	nop
    57b2:	e0ba      	b.n	592a <c_assign+0x1d2>
        } else {
            goto cannot_assign;
        }
    } else {
        // pn must be a struct
        mp_parse_node_struct_t *pns = (mp_parse_node_struct_t*)pn;
    57b4:	68bb      	ldr	r3, [r7, #8]
    57b6:	61fb      	str	r3, [r7, #28]
        switch (MP_PARSE_NODE_STRUCT_KIND(pns)) {
    57b8:	69fb      	ldr	r3, [r7, #28]
    57ba:	685b      	ldr	r3, [r3, #4]
    57bc:	b2db      	uxtb	r3, r3
    57be:	2b2a      	cmp	r3, #42	; 0x2a
    57c0:	d01f      	beq.n	5802 <c_assign+0xaa>
    57c2:	2b2a      	cmp	r3, #42	; 0x2a
    57c4:	d804      	bhi.n	57d0 <c_assign+0x78>
    57c6:	2b06      	cmp	r3, #6
    57c8:	d00d      	beq.n	57e6 <c_assign+0x8e>
    57ca:	2b29      	cmp	r3, #41	; 0x29
    57cc:	d005      	beq.n	57da <c_assign+0x82>
                    c_assign_tuple(comp, pns->nodes[0], 0, NULL);
                }
                break;

            default:
                goto cannot_assign;
    57ce:	e0b8      	b.n	5942 <c_assign+0x1ea>
        switch (MP_PARSE_NODE_STRUCT_KIND(pns)) {
    57d0:	2b2b      	cmp	r3, #43	; 0x2b
    57d2:	d039      	beq.n	5848 <c_assign+0xf0>
    57d4:	2b90      	cmp	r3, #144	; 0x90
    57d6:	d006      	beq.n	57e6 <c_assign+0x8e>
                goto cannot_assign;
    57d8:	e0b3      	b.n	5942 <c_assign+0x1ea>
                c_assign_atom_expr(comp, pns, assign_kind);
    57da:	687a      	ldr	r2, [r7, #4]
    57dc:	69f9      	ldr	r1, [r7, #28]
    57de:	68f8      	ldr	r0, [r7, #12]
    57e0:	f7ff fe2e 	bl	5440 <c_assign_atom_expr>
                break;
    57e4:	e05a      	b.n	589c <c_assign+0x144>
                if (assign_kind != ASSIGN_STORE) {
    57e6:	687b      	ldr	r3, [r7, #4]
    57e8:	2b00      	cmp	r3, #0
    57ea:	f040 80a1 	bne.w	5930 <c_assign+0x1d8>
                c_assign_tuple(comp, MP_PARSE_NODE_NULL, MP_PARSE_NODE_STRUCT_NUM_NODES(pns), pns->nodes);
    57ee:	69fb      	ldr	r3, [r7, #28]
    57f0:	685b      	ldr	r3, [r3, #4]
    57f2:	0a1a      	lsrs	r2, r3, #8
    57f4:	69fb      	ldr	r3, [r7, #28]
    57f6:	3308      	adds	r3, #8
    57f8:	2100      	movs	r1, #0
    57fa:	68f8      	ldr	r0, [r7, #12]
    57fc:	f7ff fef4 	bl	55e8 <c_assign_tuple>
                break;
    5800:	e04c      	b.n	589c <c_assign+0x144>
                if (MP_PARSE_NODE_IS_NULL(pns->nodes[0])) {
    5802:	69fb      	ldr	r3, [r7, #28]
    5804:	689b      	ldr	r3, [r3, #8]
    5806:	2b00      	cmp	r3, #0
    5808:	f000 8094 	beq.w	5934 <c_assign+0x1dc>
                    assert(MP_PARSE_NODE_IS_STRUCT_KIND(pns->nodes[0], PN_testlist_comp));
    580c:	69fb      	ldr	r3, [r7, #28]
    580e:	689b      	ldr	r3, [r3, #8]
    5810:	2b00      	cmp	r3, #0
    5812:	d00b      	beq.n	582c <c_assign+0xd4>
    5814:	69fb      	ldr	r3, [r7, #28]
    5816:	689b      	ldr	r3, [r3, #8]
    5818:	f003 0303 	and.w	r3, r3, #3
    581c:	2b00      	cmp	r3, #0
    581e:	d105      	bne.n	582c <c_assign+0xd4>
    5820:	69fb      	ldr	r3, [r7, #28]
    5822:	689b      	ldr	r3, [r3, #8]
    5824:	685b      	ldr	r3, [r3, #4]
    5826:	b2db      	uxtb	r3, r3
    5828:	2b8a      	cmp	r3, #138	; 0x8a
    582a:	d006      	beq.n	583a <c_assign+0xe2>
    582c:	4b4c      	ldr	r3, [pc, #304]	; (5960 <c_assign+0x208>)
    582e:	4a4a      	ldr	r2, [pc, #296]	; (5958 <c_assign+0x200>)
    5830:	f240 11e1 	movw	r1, #481	; 0x1e1
    5834:	4849      	ldr	r0, [pc, #292]	; (595c <c_assign+0x204>)
    5836:	f015 ff4b 	bl	1b6d0 <__assert_func>
                    if (assign_kind != ASSIGN_STORE) {
    583a:	687b      	ldr	r3, [r7, #4]
    583c:	2b00      	cmp	r3, #0
    583e:	d17b      	bne.n	5938 <c_assign+0x1e0>
                    pns = (mp_parse_node_struct_t*)pns->nodes[0];
    5840:	69fb      	ldr	r3, [r7, #28]
    5842:	689b      	ldr	r3, [r3, #8]
    5844:	61fb      	str	r3, [r7, #28]
                    goto testlist_comp;
    5846:	e02a      	b.n	589e <c_assign+0x146>
                if (assign_kind != ASSIGN_STORE) {
    5848:	687b      	ldr	r3, [r7, #4]
    584a:	2b00      	cmp	r3, #0
    584c:	d176      	bne.n	593c <c_assign+0x1e4>
                if (MP_PARSE_NODE_IS_NULL(pns->nodes[0])) {
    584e:	69fb      	ldr	r3, [r7, #28]
    5850:	689b      	ldr	r3, [r3, #8]
    5852:	2b00      	cmp	r3, #0
    5854:	d106      	bne.n	5864 <c_assign+0x10c>
                    c_assign_tuple(comp, MP_PARSE_NODE_NULL, 0, NULL);
    5856:	2300      	movs	r3, #0
    5858:	2200      	movs	r2, #0
    585a:	2100      	movs	r1, #0
    585c:	68f8      	ldr	r0, [r7, #12]
    585e:	f7ff fec3 	bl	55e8 <c_assign_tuple>
                break;
    5862:	e01a      	b.n	589a <c_assign+0x142>
                } else if (MP_PARSE_NODE_IS_STRUCT_KIND(pns->nodes[0], PN_testlist_comp)) {
    5864:	69fb      	ldr	r3, [r7, #28]
    5866:	689b      	ldr	r3, [r3, #8]
    5868:	2b00      	cmp	r3, #0
    586a:	d00f      	beq.n	588c <c_assign+0x134>
    586c:	69fb      	ldr	r3, [r7, #28]
    586e:	689b      	ldr	r3, [r3, #8]
    5870:	f003 0303 	and.w	r3, r3, #3
    5874:	2b00      	cmp	r3, #0
    5876:	d109      	bne.n	588c <c_assign+0x134>
    5878:	69fb      	ldr	r3, [r7, #28]
    587a:	689b      	ldr	r3, [r3, #8]
    587c:	685b      	ldr	r3, [r3, #4]
    587e:	b2db      	uxtb	r3, r3
    5880:	2b8a      	cmp	r3, #138	; 0x8a
    5882:	d103      	bne.n	588c <c_assign+0x134>
                    pns = (mp_parse_node_struct_t*)pns->nodes[0];
    5884:	69fb      	ldr	r3, [r7, #28]
    5886:	689b      	ldr	r3, [r3, #8]
    5888:	61fb      	str	r3, [r7, #28]
                    goto testlist_comp;
    588a:	e008      	b.n	589e <c_assign+0x146>
                    c_assign_tuple(comp, pns->nodes[0], 0, NULL);
    588c:	69fb      	ldr	r3, [r7, #28]
    588e:	6899      	ldr	r1, [r3, #8]
    5890:	2300      	movs	r3, #0
    5892:	2200      	movs	r2, #0
    5894:	68f8      	ldr	r0, [r7, #12]
    5896:	f7ff fea7 	bl	55e8 <c_assign_tuple>
                break;
    589a:	bf00      	nop
        }
        return;
    589c:	e056      	b.n	594c <c_assign+0x1f4>

        testlist_comp:
        // lhs is a sequence
        if (MP_PARSE_NODE_IS_STRUCT(pns->nodes[1])) {
    589e:	69fb      	ldr	r3, [r7, #28]
    58a0:	68db      	ldr	r3, [r3, #12]
    58a2:	2b00      	cmp	r3, #0
    58a4:	d038      	beq.n	5918 <c_assign+0x1c0>
    58a6:	69fb      	ldr	r3, [r7, #28]
    58a8:	68db      	ldr	r3, [r3, #12]
    58aa:	f003 0303 	and.w	r3, r3, #3
    58ae:	2b00      	cmp	r3, #0
    58b0:	d132      	bne.n	5918 <c_assign+0x1c0>
            mp_parse_node_struct_t *pns2 = (mp_parse_node_struct_t*)pns->nodes[1];
    58b2:	69fb      	ldr	r3, [r7, #28]
    58b4:	68db      	ldr	r3, [r3, #12]
    58b6:	61bb      	str	r3, [r7, #24]
            if (MP_PARSE_NODE_STRUCT_KIND(pns2) == PN_testlist_comp_3b) {
    58b8:	69bb      	ldr	r3, [r7, #24]
    58ba:	685b      	ldr	r3, [r3, #4]
    58bc:	b2db      	uxtb	r3, r3
    58be:	2b8d      	cmp	r3, #141	; 0x8d
    58c0:	d112      	bne.n	58e8 <c_assign+0x190>
                // sequence of one item, with trailing comma
                assert(MP_PARSE_NODE_IS_NULL(pns2->nodes[0]));
    58c2:	69bb      	ldr	r3, [r7, #24]
    58c4:	689b      	ldr	r3, [r3, #8]
    58c6:	2b00      	cmp	r3, #0
    58c8:	d006      	beq.n	58d8 <c_assign+0x180>
    58ca:	4b26      	ldr	r3, [pc, #152]	; (5964 <c_assign+0x20c>)
    58cc:	4a22      	ldr	r2, [pc, #136]	; (5958 <c_assign+0x200>)
    58ce:	f240 2106 	movw	r1, #518	; 0x206
    58d2:	4822      	ldr	r0, [pc, #136]	; (595c <c_assign+0x204>)
    58d4:	f015 fefc 	bl	1b6d0 <__assert_func>
                c_assign_tuple(comp, pns->nodes[0], 0, NULL);
    58d8:	69fb      	ldr	r3, [r7, #28]
    58da:	6899      	ldr	r1, [r3, #8]
    58dc:	2300      	movs	r3, #0
    58de:	2200      	movs	r2, #0
    58e0:	68f8      	ldr	r0, [r7, #12]
    58e2:	f7ff fe81 	bl	55e8 <c_assign_tuple>
        if (MP_PARSE_NODE_IS_STRUCT(pns->nodes[1])) {
    58e6:	e01f      	b.n	5928 <c_assign+0x1d0>
            } else if (MP_PARSE_NODE_STRUCT_KIND(pns2) == PN_testlist_comp_3c) {
    58e8:	69bb      	ldr	r3, [r7, #24]
    58ea:	685b      	ldr	r3, [r3, #4]
    58ec:	b2db      	uxtb	r3, r3
    58ee:	2b8e      	cmp	r3, #142	; 0x8e
    58f0:	d10c      	bne.n	590c <c_assign+0x1b4>
                // sequence of many items
                uint n = MP_PARSE_NODE_STRUCT_NUM_NODES(pns2);
    58f2:	69bb      	ldr	r3, [r7, #24]
    58f4:	685b      	ldr	r3, [r3, #4]
    58f6:	0a1b      	lsrs	r3, r3, #8
    58f8:	617b      	str	r3, [r7, #20]
                c_assign_tuple(comp, pns->nodes[0], n, pns2->nodes);
    58fa:	69fb      	ldr	r3, [r7, #28]
    58fc:	6899      	ldr	r1, [r3, #8]
    58fe:	69bb      	ldr	r3, [r7, #24]
    5900:	3308      	adds	r3, #8
    5902:	697a      	ldr	r2, [r7, #20]
    5904:	68f8      	ldr	r0, [r7, #12]
    5906:	f7ff fe6f 	bl	55e8 <c_assign_tuple>
        if (MP_PARSE_NODE_IS_STRUCT(pns->nodes[1])) {
    590a:	e00d      	b.n	5928 <c_assign+0x1d0>
            } else if (MP_PARSE_NODE_STRUCT_KIND(pns2) == PN_comp_for) {
    590c:	69bb      	ldr	r3, [r7, #24]
    590e:	685b      	ldr	r3, [r3, #4]
    5910:	b2db      	uxtb	r3, r3
    5912:	2b9f      	cmp	r3, #159	; 0x9f
    5914:	d014      	beq.n	5940 <c_assign+0x1e8>
                goto cannot_assign;
            } else {
                // sequence with 2 items
                goto sequence_with_2_items;
    5916:	bf00      	nop
            }
        } else {
            // sequence with 2 items
            sequence_with_2_items:
            c_assign_tuple(comp, MP_PARSE_NODE_NULL, 2, pns->nodes);
    5918:	69fb      	ldr	r3, [r7, #28]
    591a:	3308      	adds	r3, #8
    591c:	2202      	movs	r2, #2
    591e:	2100      	movs	r1, #0
    5920:	68f8      	ldr	r0, [r7, #12]
    5922:	f7ff fe61 	bl	55e8 <c_assign_tuple>
        }
        return;
    5926:	e011      	b.n	594c <c_assign+0x1f4>
    5928:	e010      	b.n	594c <c_assign+0x1f4>
    }
    return;
    592a:	e00f      	b.n	594c <c_assign+0x1f4>
            goto cannot_assign;
    592c:	bf00      	nop
    592e:	e008      	b.n	5942 <c_assign+0x1ea>
                    goto cannot_assign;
    5930:	bf00      	nop
    5932:	e006      	b.n	5942 <c_assign+0x1ea>
                    goto cannot_assign;
    5934:	bf00      	nop
    5936:	e004      	b.n	5942 <c_assign+0x1ea>
                        goto cannot_assign;
    5938:	bf00      	nop
    593a:	e002      	b.n	5942 <c_assign+0x1ea>
                    goto cannot_assign;
    593c:	bf00      	nop
    593e:	e000      	b.n	5942 <c_assign+0x1ea>
                goto cannot_assign;
    5940:	bf00      	nop

    cannot_assign:
    compile_syntax_error(comp, pn, "can't assign to expression");
    5942:	4a09      	ldr	r2, [pc, #36]	; (5968 <c_assign+0x210>)
    5944:	68b9      	ldr	r1, [r7, #8]
    5946:	68f8      	ldr	r0, [r7, #12]
    5948:	f7ff fac6 	bl	4ed8 <compile_syntax_error>
}
    594c:	3720      	adds	r7, #32
    594e:	46bd      	mov	sp, r7
    5950:	bd80      	pop	{r7, pc}
    5952:	bf00      	nop
    5954:	00020310 	.word	0x00020310
    5958:	00020dec 	.word	0x00020dec
    595c:	00020234 	.word	0x00020234
    5960:	00020248 	.word	0x00020248
    5964:	0002032c 	.word	0x0002032c
    5968:	000202d8 	.word	0x000202d8

0000596c <close_over_variables_etc>:

// stuff for lambda and comprehensions and generators:
//  if n_pos_defaults > 0 then there is a tuple on the stack with the positional defaults
//  if n_kw_defaults > 0 then there is a dictionary on the stack with the keyword defaults
//  if both exist, the tuple is above the dictionary (ie the first pop gets the tuple)
STATIC void close_over_variables_etc(compiler_t *comp, scope_t *this_scope, int n_pos_defaults, int n_kw_defaults) {
    596c:	b580      	push	{r7, lr}
    596e:	b08c      	sub	sp, #48	; 0x30
    5970:	af02      	add	r7, sp, #8
    5972:	60f8      	str	r0, [r7, #12]
    5974:	60b9      	str	r1, [r7, #8]
    5976:	607a      	str	r2, [r7, #4]
    5978:	603b      	str	r3, [r7, #0]
    assert(n_pos_defaults >= 0);
    597a:	687b      	ldr	r3, [r7, #4]
    597c:	2b00      	cmp	r3, #0
    597e:	da06      	bge.n	598e <close_over_variables_etc+0x22>
    5980:	4b41      	ldr	r3, [pc, #260]	; (5a88 <close_over_variables_etc+0x11c>)
    5982:	4a42      	ldr	r2, [pc, #264]	; (5a8c <close_over_variables_etc+0x120>)
    5984:	f44f 7109 	mov.w	r1, #548	; 0x224
    5988:	4841      	ldr	r0, [pc, #260]	; (5a90 <close_over_variables_etc+0x124>)
    598a:	f015 fea1 	bl	1b6d0 <__assert_func>
    assert(n_kw_defaults >= 0);
    598e:	683b      	ldr	r3, [r7, #0]
    5990:	2b00      	cmp	r3, #0
    5992:	da06      	bge.n	59a2 <close_over_variables_etc+0x36>
    5994:	4b3f      	ldr	r3, [pc, #252]	; (5a94 <close_over_variables_etc+0x128>)
    5996:	4a3d      	ldr	r2, [pc, #244]	; (5a8c <close_over_variables_etc+0x120>)
    5998:	f240 2125 	movw	r1, #549	; 0x225
    599c:	483c      	ldr	r0, [pc, #240]	; (5a90 <close_over_variables_etc+0x124>)
    599e:	f015 fe97 	bl	1b6d0 <__assert_func>

    // set flags
    if (n_kw_defaults > 0) {
    59a2:	683b      	ldr	r3, [r7, #0]
    59a4:	2b00      	cmp	r3, #0
    59a6:	dd06      	ble.n	59b6 <close_over_variables_etc+0x4a>
        this_scope->scope_flags |= MP_SCOPE_FLAG_DEFKWARGS;
    59a8:	68bb      	ldr	r3, [r7, #8]
    59aa:	7e1b      	ldrb	r3, [r3, #24]
    59ac:	f043 0308 	orr.w	r3, r3, #8
    59b0:	b2da      	uxtb	r2, r3
    59b2:	68bb      	ldr	r3, [r7, #8]
    59b4:	761a      	strb	r2, [r3, #24]
    }
    this_scope->num_def_pos_args = n_pos_defaults;
    59b6:	687b      	ldr	r3, [r7, #4]
    59b8:	b29a      	uxth	r2, r3
    59ba:	68bb      	ldr	r3, [r7, #8]
    59bc:	83da      	strh	r2, [r3, #30]

    // make closed over variables, if any
    // ensure they are closed over in the order defined in the outer scope (mainly to agree with CPython)
    int nfree = 0;
    59be:	2300      	movs	r3, #0
    59c0:	627b      	str	r3, [r7, #36]	; 0x24
    if (comp->scope_cur->kind != SCOPE_MODULE) {
    59c2:	68fb      	ldr	r3, [r7, #12]
    59c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    59c6:	681b      	ldr	r3, [r3, #0]
    59c8:	2b00      	cmp	r3, #0
    59ca:	d043      	beq.n	5a54 <close_over_variables_etc+0xe8>
        for (int i = 0; i < comp->scope_cur->id_info_len; i++) {
    59cc:	2300      	movs	r3, #0
    59ce:	623b      	str	r3, [r7, #32]
    59d0:	e039      	b.n	5a46 <close_over_variables_etc+0xda>
            id_info_t *id = &comp->scope_cur->id_info[i];
    59d2:	68fb      	ldr	r3, [r7, #12]
    59d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    59d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    59d8:	6a3b      	ldr	r3, [r7, #32]
    59da:	00db      	lsls	r3, r3, #3
    59dc:	4413      	add	r3, r2
    59de:	61bb      	str	r3, [r7, #24]
            if (id->kind == ID_INFO_KIND_CELL || id->kind == ID_INFO_KIND_FREE) {
    59e0:	69bb      	ldr	r3, [r7, #24]
    59e2:	781b      	ldrb	r3, [r3, #0]
    59e4:	2b03      	cmp	r3, #3
    59e6:	d003      	beq.n	59f0 <close_over_variables_etc+0x84>
    59e8:	69bb      	ldr	r3, [r7, #24]
    59ea:	781b      	ldrb	r3, [r3, #0]
    59ec:	2b04      	cmp	r3, #4
    59ee:	d127      	bne.n	5a40 <close_over_variables_etc+0xd4>
                for (int j = 0; j < this_scope->id_info_len; j++) {
    59f0:	2300      	movs	r3, #0
    59f2:	61fb      	str	r3, [r7, #28]
    59f4:	e01e      	b.n	5a34 <close_over_variables_etc+0xc8>
                    id_info_t *id2 = &this_scope->id_info[j];
    59f6:	68bb      	ldr	r3, [r7, #8]
    59f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    59fa:	69fb      	ldr	r3, [r7, #28]
    59fc:	00db      	lsls	r3, r3, #3
    59fe:	4413      	add	r3, r2
    5a00:	617b      	str	r3, [r7, #20]
                    if (id2->kind == ID_INFO_KIND_FREE && id->qst == id2->qst) {
    5a02:	697b      	ldr	r3, [r7, #20]
    5a04:	781b      	ldrb	r3, [r3, #0]
    5a06:	2b04      	cmp	r3, #4
    5a08:	d111      	bne.n	5a2e <close_over_variables_etc+0xc2>
    5a0a:	69bb      	ldr	r3, [r7, #24]
    5a0c:	685a      	ldr	r2, [r3, #4]
    5a0e:	697b      	ldr	r3, [r7, #20]
    5a10:	685b      	ldr	r3, [r3, #4]
    5a12:	429a      	cmp	r2, r3
    5a14:	d10b      	bne.n	5a2e <close_over_variables_etc+0xc2>
                        // in MicroPython we load closures using LOAD_FAST
                        EMIT_LOAD_FAST(id->qst, id->local_num);
    5a16:	68fb      	ldr	r3, [r7, #12]
    5a18:	6a98      	ldr	r0, [r3, #40]	; 0x28
    5a1a:	69bb      	ldr	r3, [r7, #24]
    5a1c:	6859      	ldr	r1, [r3, #4]
    5a1e:	69bb      	ldr	r3, [r7, #24]
    5a20:	885b      	ldrh	r3, [r3, #2]
    5a22:	461a      	mov	r2, r3
    5a24:	f004 fdc6 	bl	a5b4 <mp_emit_bc_load_fast>
                        nfree += 1;
    5a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5a2a:	3301      	adds	r3, #1
    5a2c:	627b      	str	r3, [r7, #36]	; 0x24
                for (int j = 0; j < this_scope->id_info_len; j++) {
    5a2e:	69fb      	ldr	r3, [r7, #28]
    5a30:	3301      	adds	r3, #1
    5a32:	61fb      	str	r3, [r7, #28]
    5a34:	68bb      	ldr	r3, [r7, #8]
    5a36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    5a38:	461a      	mov	r2, r3
    5a3a:	69fb      	ldr	r3, [r7, #28]
    5a3c:	429a      	cmp	r2, r3
    5a3e:	dcda      	bgt.n	59f6 <close_over_variables_etc+0x8a>
        for (int i = 0; i < comp->scope_cur->id_info_len; i++) {
    5a40:	6a3b      	ldr	r3, [r7, #32]
    5a42:	3301      	adds	r3, #1
    5a44:	623b      	str	r3, [r7, #32]
    5a46:	68fb      	ldr	r3, [r7, #12]
    5a48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    5a4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    5a4c:	461a      	mov	r2, r3
    5a4e:	6a3b      	ldr	r3, [r7, #32]
    5a50:	429a      	cmp	r2, r3
    5a52:	dcbe      	bgt.n	59d2 <close_over_variables_etc+0x66>
            }
        }
    }

    // make the function/closure
    if (nfree == 0) {
    5a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5a56:	2b00      	cmp	r3, #0
    5a58:	d107      	bne.n	5a6a <close_over_variables_etc+0xfe>
        EMIT_ARG(make_function, this_scope, n_pos_defaults, n_kw_defaults);
    5a5a:	68fb      	ldr	r3, [r7, #12]
    5a5c:	6a98      	ldr	r0, [r3, #40]	; 0x28
    5a5e:	687a      	ldr	r2, [r7, #4]
    5a60:	683b      	ldr	r3, [r7, #0]
    5a62:	68b9      	ldr	r1, [r7, #8]
    5a64:	f005 f9da 	bl	ae1c <mp_emit_bc_make_function>
    } else {
        EMIT_ARG(make_closure, this_scope, nfree, n_pos_defaults, n_kw_defaults);
    }
}
    5a68:	e009      	b.n	5a7e <close_over_variables_etc+0x112>
        EMIT_ARG(make_closure, this_scope, nfree, n_pos_defaults, n_kw_defaults);
    5a6a:	68fb      	ldr	r3, [r7, #12]
    5a6c:	6a98      	ldr	r0, [r3, #40]	; 0x28
    5a6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    5a70:	6879      	ldr	r1, [r7, #4]
    5a72:	683b      	ldr	r3, [r7, #0]
    5a74:	9300      	str	r3, [sp, #0]
    5a76:	460b      	mov	r3, r1
    5a78:	68b9      	ldr	r1, [r7, #8]
    5a7a:	f005 f9f9 	bl	ae70 <mp_emit_bc_make_closure>
}
    5a7e:	bf00      	nop
    5a80:	3728      	adds	r7, #40	; 0x28
    5a82:	46bd      	mov	sp, r7
    5a84:	bd80      	pop	{r7, pc}
    5a86:	bf00      	nop
    5a88:	00020354 	.word	0x00020354
    5a8c:	00020df8 	.word	0x00020df8
    5a90:	00020234 	.word	0x00020234
    5a94:	00020368 	.word	0x00020368

00005a98 <compile_funcdef_lambdef_param>:

STATIC void compile_funcdef_lambdef_param(compiler_t *comp, mp_parse_node_t pn) {
    5a98:	b580      	push	{r7, lr}
    5a9a:	b088      	sub	sp, #32
    5a9c:	af00      	add	r7, sp, #0
    5a9e:	6078      	str	r0, [r7, #4]
    5aa0:	6039      	str	r1, [r7, #0]
    // For efficiency of the code below we extract the parse-node kind here
    int pn_kind;
    if (MP_PARSE_NODE_IS_ID(pn)) {
    5aa2:	683b      	ldr	r3, [r7, #0]
    5aa4:	f003 030f 	and.w	r3, r3, #15
    5aa8:	2b02      	cmp	r3, #2
    5aaa:	d103      	bne.n	5ab4 <compile_funcdef_lambdef_param+0x1c>
        pn_kind = -1;
    5aac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    5ab0:	61fb      	str	r3, [r7, #28]
    5ab2:	e012      	b.n	5ada <compile_funcdef_lambdef_param+0x42>
    } else {
        assert(MP_PARSE_NODE_IS_STRUCT(pn));
    5ab4:	683b      	ldr	r3, [r7, #0]
    5ab6:	2b00      	cmp	r3, #0
    5ab8:	d004      	beq.n	5ac4 <compile_funcdef_lambdef_param+0x2c>
    5aba:	683b      	ldr	r3, [r7, #0]
    5abc:	f003 0303 	and.w	r3, r3, #3
    5ac0:	2b00      	cmp	r3, #0
    5ac2:	d006      	beq.n	5ad2 <compile_funcdef_lambdef_param+0x3a>
    5ac4:	4b4b      	ldr	r3, [pc, #300]	; (5bf4 <compile_funcdef_lambdef_param+0x15c>)
    5ac6:	4a4c      	ldr	r2, [pc, #304]	; (5bf8 <compile_funcdef_lambdef_param+0x160>)
    5ac8:	f240 214e 	movw	r1, #590	; 0x24e
    5acc:	484b      	ldr	r0, [pc, #300]	; (5bfc <compile_funcdef_lambdef_param+0x164>)
    5ace:	f015 fdff 	bl	1b6d0 <__assert_func>
        pn_kind = MP_PARSE_NODE_STRUCT_KIND((mp_parse_node_struct_t*)pn);
    5ad2:	683b      	ldr	r3, [r7, #0]
    5ad4:	685b      	ldr	r3, [r3, #4]
    5ad6:	b2db      	uxtb	r3, r3
    5ad8:	61fb      	str	r3, [r7, #28]
    }

    if (pn_kind == PN_typedargslist_star || pn_kind == PN_varargslist_star) {
    5ada:	69fb      	ldr	r3, [r7, #28]
    5adc:	2b41      	cmp	r3, #65	; 0x41
    5ade:	d002      	beq.n	5ae6 <compile_funcdef_lambdef_param+0x4e>
    5ae0:	69fb      	ldr	r3, [r7, #28]
    5ae2:	2b49      	cmp	r3, #73	; 0x49
    5ae4:	d103      	bne.n	5aee <compile_funcdef_lambdef_param+0x56>
        comp->have_star = true;
    5ae6:	687b      	ldr	r3, [r7, #4]
    5ae8:	2201      	movs	r2, #1
    5aea:	719a      	strb	r2, [r3, #6]
    5aec:	e07f      	b.n	5bee <compile_funcdef_lambdef_param+0x156>
        } else {
            // named star
        }
        */

    } else if (pn_kind == PN_typedargslist_dbl_star || pn_kind == PN_varargslist_dbl_star) {
    5aee:	69fb      	ldr	r3, [r7, #28]
    5af0:	2b42      	cmp	r3, #66	; 0x42
    5af2:	d07c      	beq.n	5bee <compile_funcdef_lambdef_param+0x156>
    5af4:	69fb      	ldr	r3, [r7, #28]
    5af6:	2b4a      	cmp	r3, #74	; 0x4a
    5af8:	d079      	beq.n	5bee <compile_funcdef_lambdef_param+0x156>
        // TODO do we need to do anything with this?

    } else {
        mp_parse_node_t pn_id;
        mp_parse_node_t pn_equal;
        if (pn_kind == -1) {
    5afa:	69fb      	ldr	r3, [r7, #28]
    5afc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    5b00:	d104      	bne.n	5b0c <compile_funcdef_lambdef_param+0x74>
            // this parameter is just an id

            pn_id = pn;
    5b02:	683b      	ldr	r3, [r7, #0]
    5b04:	61bb      	str	r3, [r7, #24]
            pn_equal = MP_PARSE_NODE_NULL;
    5b06:	2300      	movs	r3, #0
    5b08:	617b      	str	r3, [r7, #20]
    5b0a:	e01d      	b.n	5b48 <compile_funcdef_lambdef_param+0xb0>

        } else if (pn_kind == PN_typedargslist_name) {
    5b0c:	69fb      	ldr	r3, [r7, #28]
    5b0e:	2b40      	cmp	r3, #64	; 0x40
    5b10:	d108      	bne.n	5b24 <compile_funcdef_lambdef_param+0x8c>
            // this parameter has a colon and/or equal specifier

            mp_parse_node_struct_t *pns = (mp_parse_node_struct_t*)pn;
    5b12:	683b      	ldr	r3, [r7, #0]
    5b14:	613b      	str	r3, [r7, #16]
            pn_id = pns->nodes[0];
    5b16:	693b      	ldr	r3, [r7, #16]
    5b18:	689b      	ldr	r3, [r3, #8]
    5b1a:	61bb      	str	r3, [r7, #24]
            //pn_colon = pns->nodes[1]; // unused
            pn_equal = pns->nodes[2];
    5b1c:	693b      	ldr	r3, [r7, #16]
    5b1e:	691b      	ldr	r3, [r3, #16]
    5b20:	617b      	str	r3, [r7, #20]
    5b22:	e011      	b.n	5b48 <compile_funcdef_lambdef_param+0xb0>

        } else {
            assert(pn_kind == PN_varargslist_name); // should be
    5b24:	69fb      	ldr	r3, [r7, #28]
    5b26:	2b48      	cmp	r3, #72	; 0x48
    5b28:	d006      	beq.n	5b38 <compile_funcdef_lambdef_param+0xa0>
    5b2a:	4b35      	ldr	r3, [pc, #212]	; (5c00 <compile_funcdef_lambdef_param+0x168>)
    5b2c:	4a32      	ldr	r2, [pc, #200]	; (5bf8 <compile_funcdef_lambdef_param+0x160>)
    5b2e:	f240 2173 	movw	r1, #627	; 0x273
    5b32:	4832      	ldr	r0, [pc, #200]	; (5bfc <compile_funcdef_lambdef_param+0x164>)
    5b34:	f015 fdcc 	bl	1b6d0 <__assert_func>
            // this parameter has an equal specifier

            mp_parse_node_struct_t *pns = (mp_parse_node_struct_t*)pn;
    5b38:	683b      	ldr	r3, [r7, #0]
    5b3a:	60fb      	str	r3, [r7, #12]
            pn_id = pns->nodes[0];
    5b3c:	68fb      	ldr	r3, [r7, #12]
    5b3e:	689b      	ldr	r3, [r3, #8]
    5b40:	61bb      	str	r3, [r7, #24]
            pn_equal = pns->nodes[1];
    5b42:	68fb      	ldr	r3, [r7, #12]
    5b44:	68db      	ldr	r3, [r3, #12]
    5b46:	617b      	str	r3, [r7, #20]
        }

        if (MP_PARSE_NODE_IS_NULL(pn_equal)) {
    5b48:	697b      	ldr	r3, [r7, #20]
    5b4a:	2b00      	cmp	r3, #0
    5b4c:	d10d      	bne.n	5b6a <compile_funcdef_lambdef_param+0xd2>
            // this parameter does not have a default value

            // check for non-default parameters given after default parameters (allowed by parser, but not syntactically valid)
            if (!comp->have_star && comp->num_default_params != 0) {
    5b4e:	687b      	ldr	r3, [r7, #4]
    5b50:	799b      	ldrb	r3, [r3, #6]
    5b52:	2b00      	cmp	r3, #0
    5b54:	d14b      	bne.n	5bee <compile_funcdef_lambdef_param+0x156>
    5b56:	687b      	ldr	r3, [r7, #4]
    5b58:	8adb      	ldrh	r3, [r3, #22]
    5b5a:	2b00      	cmp	r3, #0
    5b5c:	d047      	beq.n	5bee <compile_funcdef_lambdef_param+0x156>
                compile_syntax_error(comp, pn, "non-default argument follows default argument");
    5b5e:	4a29      	ldr	r2, [pc, #164]	; (5c04 <compile_funcdef_lambdef_param+0x16c>)
    5b60:	6839      	ldr	r1, [r7, #0]
    5b62:	6878      	ldr	r0, [r7, #4]
    5b64:	f7ff f9b8 	bl	4ed8 <compile_syntax_error>
                return;
    5b68:	e041      	b.n	5bee <compile_funcdef_lambdef_param+0x156>

        } else {
            // this parameter has a default value
            // in CPython, None (and True, False?) as default parameters are loaded with LOAD_NAME; don't understandy why

            if (comp->have_star) {
    5b6a:	687b      	ldr	r3, [r7, #4]
    5b6c:	799b      	ldrb	r3, [r3, #6]
    5b6e:	2b00      	cmp	r3, #0
    5b70:	d033      	beq.n	5bda <compile_funcdef_lambdef_param+0x142>
                comp->num_dict_params += 1;
    5b72:	687b      	ldr	r3, [r7, #4]
    5b74:	8a9b      	ldrh	r3, [r3, #20]
    5b76:	3301      	adds	r3, #1
    5b78:	b29a      	uxth	r2, r3
    5b7a:	687b      	ldr	r3, [r7, #4]
    5b7c:	829a      	strh	r2, [r3, #20]
                // in MicroPython we put the default dict parameters into a dictionary using the bytecode
                if (comp->num_dict_params == 1) {
    5b7e:	687b      	ldr	r3, [r7, #4]
    5b80:	8a9b      	ldrh	r3, [r3, #20]
    5b82:	2b01      	cmp	r3, #1
    5b84:	d117      	bne.n	5bb6 <compile_funcdef_lambdef_param+0x11e>
                    // in MicroPython we put the default positional parameters into a tuple using the bytecode
                    // we need to do this here before we start building the map for the default keywords
                    if (comp->num_default_params > 0) {
    5b86:	687b      	ldr	r3, [r7, #4]
    5b88:	8adb      	ldrh	r3, [r3, #22]
    5b8a:	2b00      	cmp	r3, #0
    5b8c:	d008      	beq.n	5ba0 <compile_funcdef_lambdef_param+0x108>
                        EMIT_ARG(build_tuple, comp->num_default_params);
    5b8e:	687b      	ldr	r3, [r7, #4]
    5b90:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    5b92:	687b      	ldr	r3, [r7, #4]
    5b94:	8adb      	ldrh	r3, [r3, #22]
    5b96:	4619      	mov	r1, r3
    5b98:	4610      	mov	r0, r2
    5b9a:	f005 f899 	bl	acd0 <mp_emit_bc_build_tuple>
    5b9e:	e004      	b.n	5baa <compile_funcdef_lambdef_param+0x112>
                    } else {
                        EMIT(load_null); // sentinel indicating empty default positional args
    5ba0:	687b      	ldr	r3, [r7, #4]
    5ba2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5ba4:	4618      	mov	r0, r3
    5ba6:	f004 fcf5 	bl	a594 <mp_emit_bc_load_null>
                    }
                    // first default dict param, so make the map
                    EMIT_ARG(build_map, 0);
    5baa:	687b      	ldr	r3, [r7, #4]
    5bac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5bae:	2100      	movs	r1, #0
    5bb0:	4618      	mov	r0, r3
    5bb2:	f005 f8b9 	bl	ad28 <mp_emit_bc_build_map>
                }

                // compile value then key, then store it to the dict
                compile_node(comp, pn_equal);
    5bb6:	6979      	ldr	r1, [r7, #20]
    5bb8:	6878      	ldr	r0, [r7, #4]
    5bba:	f002 ffeb 	bl	8b94 <compile_node>
                EMIT_ARG(load_const_str, MP_PARSE_NODE_LEAF_ARG(pn_id));
    5bbe:	687b      	ldr	r3, [r7, #4]
    5bc0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    5bc2:	69bb      	ldr	r3, [r7, #24]
    5bc4:	091b      	lsrs	r3, r3, #4
    5bc6:	4619      	mov	r1, r3
    5bc8:	4610      	mov	r0, r2
    5bca:	f004 fcbf 	bl	a54c <mp_emit_bc_load_const_str>
                EMIT(store_map);
    5bce:	687b      	ldr	r3, [r7, #4]
    5bd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5bd2:	4618      	mov	r0, r3
    5bd4:	f005 f8ba 	bl	ad4c <mp_emit_bc_store_map>
    5bd8:	e009      	b.n	5bee <compile_funcdef_lambdef_param+0x156>
            } else {
                comp->num_default_params += 1;
    5bda:	687b      	ldr	r3, [r7, #4]
    5bdc:	8adb      	ldrh	r3, [r3, #22]
    5bde:	3301      	adds	r3, #1
    5be0:	b29a      	uxth	r2, r3
    5be2:	687b      	ldr	r3, [r7, #4]
    5be4:	82da      	strh	r2, [r3, #22]
                compile_node(comp, pn_equal);
    5be6:	6979      	ldr	r1, [r7, #20]
    5be8:	6878      	ldr	r0, [r7, #4]
    5bea:	f002 ffd3 	bl	8b94 <compile_node>
            }
        }
    }
}
    5bee:	3720      	adds	r7, #32
    5bf0:	46bd      	mov	sp, r7
    5bf2:	bd80      	pop	{r7, pc}
    5bf4:	0002037c 	.word	0x0002037c
    5bf8:	00020e14 	.word	0x00020e14
    5bfc:	00020234 	.word	0x00020234
    5c00:	00020398 	.word	0x00020398
    5c04:	000203b8 	.word	0x000203b8

00005c08 <compile_funcdef_lambdef>:

STATIC void compile_funcdef_lambdef(compiler_t *comp, scope_t *scope, mp_parse_node_t pn_params, pn_kind_t pn_list_kind) {
    5c08:	b580      	push	{r7, lr}
    5c0a:	b086      	sub	sp, #24
    5c0c:	af00      	add	r7, sp, #0
    5c0e:	60f8      	str	r0, [r7, #12]
    5c10:	60b9      	str	r1, [r7, #8]
    5c12:	607a      	str	r2, [r7, #4]
    5c14:	603b      	str	r3, [r7, #0]
    // When we call compile_funcdef_lambdef_param below it can compile an arbitrary
    // expression for default arguments, which may contain a lambda.  The lambda will
    // call here in a nested way, so we must save and restore the relevant state.
    bool orig_have_star = comp->have_star;
    5c16:	68fb      	ldr	r3, [r7, #12]
    5c18:	799b      	ldrb	r3, [r3, #6]
    5c1a:	2b00      	cmp	r3, #0
    5c1c:	bf14      	ite	ne
    5c1e:	2301      	movne	r3, #1
    5c20:	2300      	moveq	r3, #0
    5c22:	75fb      	strb	r3, [r7, #23]
    uint16_t orig_num_dict_params = comp->num_dict_params;
    5c24:	68fb      	ldr	r3, [r7, #12]
    5c26:	8a9b      	ldrh	r3, [r3, #20]
    5c28:	82bb      	strh	r3, [r7, #20]
    uint16_t orig_num_default_params = comp->num_default_params;
    5c2a:	68fb      	ldr	r3, [r7, #12]
    5c2c:	8adb      	ldrh	r3, [r3, #22]
    5c2e:	827b      	strh	r3, [r7, #18]

    // compile default parameters
    comp->have_star = false;
    5c30:	68fb      	ldr	r3, [r7, #12]
    5c32:	2200      	movs	r2, #0
    5c34:	719a      	strb	r2, [r3, #6]
    comp->num_dict_params = 0;
    5c36:	68fb      	ldr	r3, [r7, #12]
    5c38:	2200      	movs	r2, #0
    5c3a:	829a      	strh	r2, [r3, #20]
    comp->num_default_params = 0;
    5c3c:	68fb      	ldr	r3, [r7, #12]
    5c3e:	2200      	movs	r2, #0
    5c40:	82da      	strh	r2, [r3, #22]
    apply_to_single_or_list(comp, pn_params, pn_list_kind, compile_funcdef_lambdef_param);
    5c42:	4b1b      	ldr	r3, [pc, #108]	; (5cb0 <compile_funcdef_lambdef+0xa8>)
    5c44:	683a      	ldr	r2, [r7, #0]
    5c46:	6879      	ldr	r1, [r7, #4]
    5c48:	68f8      	ldr	r0, [r7, #12]
    5c4a:	f7ff f9dd 	bl	5008 <apply_to_single_or_list>

    if (comp->compile_error != MP_OBJ_NULL) {
    5c4e:	68fb      	ldr	r3, [r7, #12]
    5c50:	689b      	ldr	r3, [r3, #8]
    5c52:	2b00      	cmp	r3, #0
    5c54:	d127      	bne.n	5ca6 <compile_funcdef_lambdef+0x9e>
        return;
    }

    // in MicroPython we put the default positional parameters into a tuple using the bytecode
    // the default keywords args may have already made the tuple; if not, do it now
    if (comp->num_default_params > 0 && comp->num_dict_params == 0) {
    5c56:	68fb      	ldr	r3, [r7, #12]
    5c58:	8adb      	ldrh	r3, [r3, #22]
    5c5a:	2b00      	cmp	r3, #0
    5c5c:	d010      	beq.n	5c80 <compile_funcdef_lambdef+0x78>
    5c5e:	68fb      	ldr	r3, [r7, #12]
    5c60:	8a9b      	ldrh	r3, [r3, #20]
    5c62:	2b00      	cmp	r3, #0
    5c64:	d10c      	bne.n	5c80 <compile_funcdef_lambdef+0x78>
        EMIT_ARG(build_tuple, comp->num_default_params);
    5c66:	68fb      	ldr	r3, [r7, #12]
    5c68:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    5c6a:	68fb      	ldr	r3, [r7, #12]
    5c6c:	8adb      	ldrh	r3, [r3, #22]
    5c6e:	4619      	mov	r1, r3
    5c70:	4610      	mov	r0, r2
    5c72:	f005 f82d 	bl	acd0 <mp_emit_bc_build_tuple>
        EMIT(load_null); // sentinel indicating empty default keyword args
    5c76:	68fb      	ldr	r3, [r7, #12]
    5c78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5c7a:	4618      	mov	r0, r3
    5c7c:	f004 fc8a 	bl	a594 <mp_emit_bc_load_null>
    }

    // make the function
    close_over_variables_etc(comp, scope, comp->num_default_params, comp->num_dict_params);
    5c80:	68fb      	ldr	r3, [r7, #12]
    5c82:	8adb      	ldrh	r3, [r3, #22]
    5c84:	461a      	mov	r2, r3
    5c86:	68fb      	ldr	r3, [r7, #12]
    5c88:	8a9b      	ldrh	r3, [r3, #20]
    5c8a:	68b9      	ldr	r1, [r7, #8]
    5c8c:	68f8      	ldr	r0, [r7, #12]
    5c8e:	f7ff fe6d 	bl	596c <close_over_variables_etc>

    // restore state
    comp->have_star = orig_have_star;
    5c92:	7dfa      	ldrb	r2, [r7, #23]
    5c94:	68fb      	ldr	r3, [r7, #12]
    5c96:	719a      	strb	r2, [r3, #6]
    comp->num_dict_params = orig_num_dict_params;
    5c98:	68fb      	ldr	r3, [r7, #12]
    5c9a:	8aba      	ldrh	r2, [r7, #20]
    5c9c:	829a      	strh	r2, [r3, #20]
    comp->num_default_params = orig_num_default_params;
    5c9e:	68fb      	ldr	r3, [r7, #12]
    5ca0:	8a7a      	ldrh	r2, [r7, #18]
    5ca2:	82da      	strh	r2, [r3, #22]
    5ca4:	e000      	b.n	5ca8 <compile_funcdef_lambdef+0xa0>
        return;
    5ca6:	bf00      	nop
}
    5ca8:	3718      	adds	r7, #24
    5caa:	46bd      	mov	sp, r7
    5cac:	bd80      	pop	{r7, pc}
    5cae:	bf00      	nop
    5cb0:	00005a99 	.word	0x00005a99

00005cb4 <compile_funcdef_helper>:

// leaves function object on stack
// returns function name
STATIC qstr compile_funcdef_helper(compiler_t *comp, mp_parse_node_struct_t *pns, uint emit_options) {
    5cb4:	b580      	push	{r7, lr}
    5cb6:	b086      	sub	sp, #24
    5cb8:	af00      	add	r7, sp, #0
    5cba:	60f8      	str	r0, [r7, #12]
    5cbc:	60b9      	str	r1, [r7, #8]
    5cbe:	607a      	str	r2, [r7, #4]
    if (comp->pass == MP_PASS_SCOPE) {
    5cc0:	68fb      	ldr	r3, [r7, #12]
    5cc2:	795b      	ldrb	r3, [r3, #5]
    5cc4:	2b01      	cmp	r3, #1
    5cc6:	d109      	bne.n	5cdc <compile_funcdef_helper+0x28>
        // create a new scope for this function
        scope_t *s = scope_new_and_link(comp, SCOPE_FUNCTION, (mp_parse_node_t)pns, emit_options);
    5cc8:	68ba      	ldr	r2, [r7, #8]
    5cca:	687b      	ldr	r3, [r7, #4]
    5ccc:	2107      	movs	r1, #7
    5cce:	68f8      	ldr	r0, [r7, #12]
    5cd0:	f7ff f968 	bl	4fa4 <scope_new_and_link>
    5cd4:	6178      	str	r0, [r7, #20]
        // store the function scope so the compiling function can use it at each pass
        pns->nodes[4] = (mp_parse_node_t)s;
    5cd6:	697a      	ldr	r2, [r7, #20]
    5cd8:	68bb      	ldr	r3, [r7, #8]
    5cda:	619a      	str	r2, [r3, #24]
    }

    // get the scope for this function
    scope_t *fscope = (scope_t*)pns->nodes[4];
    5cdc:	68bb      	ldr	r3, [r7, #8]
    5cde:	699b      	ldr	r3, [r3, #24]
    5ce0:	613b      	str	r3, [r7, #16]

    // compile the function definition
    compile_funcdef_lambdef(comp, fscope, pns->nodes[1], PN_typedargslist);
    5ce2:	68bb      	ldr	r3, [r7, #8]
    5ce4:	68da      	ldr	r2, [r3, #12]
    5ce6:	233e      	movs	r3, #62	; 0x3e
    5ce8:	6939      	ldr	r1, [r7, #16]
    5cea:	68f8      	ldr	r0, [r7, #12]
    5cec:	f7ff ff8c 	bl	5c08 <compile_funcdef_lambdef>

    // return its name (the 'f' in "def f(...):")
    return fscope->simple_name;
    5cf0:	693b      	ldr	r3, [r7, #16]
    5cf2:	8a5b      	ldrh	r3, [r3, #18]
}
    5cf4:	4618      	mov	r0, r3
    5cf6:	3718      	adds	r7, #24
    5cf8:	46bd      	mov	sp, r7
    5cfa:	bd80      	pop	{r7, pc}

00005cfc <compile_classdef_helper>:

// leaves class object on stack
// returns class name
STATIC qstr compile_classdef_helper(compiler_t *comp, mp_parse_node_struct_t *pns, uint emit_options) {
    5cfc:	b580      	push	{r7, lr}
    5cfe:	b088      	sub	sp, #32
    5d00:	af00      	add	r7, sp, #0
    5d02:	60f8      	str	r0, [r7, #12]
    5d04:	60b9      	str	r1, [r7, #8]
    5d06:	607a      	str	r2, [r7, #4]
    if (comp->pass == MP_PASS_SCOPE) {
    5d08:	68fb      	ldr	r3, [r7, #12]
    5d0a:	795b      	ldrb	r3, [r3, #5]
    5d0c:	2b01      	cmp	r3, #1
    5d0e:	d109      	bne.n	5d24 <compile_classdef_helper+0x28>
        // create a new scope for this class
        scope_t *s = scope_new_and_link(comp, SCOPE_CLASS, (mp_parse_node_t)pns, emit_options);
    5d10:	68ba      	ldr	r2, [r7, #8]
    5d12:	687b      	ldr	r3, [r7, #4]
    5d14:	2101      	movs	r1, #1
    5d16:	68f8      	ldr	r0, [r7, #12]
    5d18:	f7ff f944 	bl	4fa4 <scope_new_and_link>
    5d1c:	61b8      	str	r0, [r7, #24]
        // store the class scope so the compiling function can use it at each pass
        pns->nodes[3] = (mp_parse_node_t)s;
    5d1e:	69ba      	ldr	r2, [r7, #24]
    5d20:	68bb      	ldr	r3, [r7, #8]
    5d22:	615a      	str	r2, [r3, #20]
    }

    EMIT(load_build_class);
    5d24:	68fb      	ldr	r3, [r7, #12]
    5d26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5d28:	4618      	mov	r0, r3
    5d2a:	f004 fccb 	bl	a6c4 <mp_emit_bc_load_build_class>

    // scope for this class
    scope_t *cscope = (scope_t*)pns->nodes[3];
    5d2e:	68bb      	ldr	r3, [r7, #8]
    5d30:	695b      	ldr	r3, [r3, #20]
    5d32:	617b      	str	r3, [r7, #20]

    // compile the class
    close_over_variables_etc(comp, cscope, 0, 0);
    5d34:	2300      	movs	r3, #0
    5d36:	2200      	movs	r2, #0
    5d38:	6979      	ldr	r1, [r7, #20]
    5d3a:	68f8      	ldr	r0, [r7, #12]
    5d3c:	f7ff fe16 	bl	596c <close_over_variables_etc>

    // get its name
    EMIT_ARG(load_const_str, cscope->simple_name);
    5d40:	68fb      	ldr	r3, [r7, #12]
    5d42:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    5d44:	697b      	ldr	r3, [r7, #20]
    5d46:	8a5b      	ldrh	r3, [r3, #18]
    5d48:	4619      	mov	r1, r3
    5d4a:	4610      	mov	r0, r2
    5d4c:	f004 fbfe 	bl	a54c <mp_emit_bc_load_const_str>

    // nodes[1] has parent classes, if any
    // empty parenthesis (eg class C():) gets here as an empty PN_classdef_2 and needs special handling
    mp_parse_node_t parents = pns->nodes[1];
    5d50:	68bb      	ldr	r3, [r7, #8]
    5d52:	68db      	ldr	r3, [r3, #12]
    5d54:	61fb      	str	r3, [r7, #28]
    if (MP_PARSE_NODE_IS_STRUCT_KIND(parents, PN_classdef_2)) {
    5d56:	69fb      	ldr	r3, [r7, #28]
    5d58:	2b00      	cmp	r3, #0
    5d5a:	d00b      	beq.n	5d74 <compile_classdef_helper+0x78>
    5d5c:	69fb      	ldr	r3, [r7, #28]
    5d5e:	f003 0303 	and.w	r3, r3, #3
    5d62:	2b00      	cmp	r3, #0
    5d64:	d106      	bne.n	5d74 <compile_classdef_helper+0x78>
    5d66:	69fb      	ldr	r3, [r7, #28]
    5d68:	685b      	ldr	r3, [r3, #4]
    5d6a:	b2db      	uxtb	r3, r3
    5d6c:	2b96      	cmp	r3, #150	; 0x96
    5d6e:	d101      	bne.n	5d74 <compile_classdef_helper+0x78>
        parents = MP_PARSE_NODE_NULL;
    5d70:	2300      	movs	r3, #0
    5d72:	61fb      	str	r3, [r7, #28]
    }
    compile_trailer_paren_helper(comp, parents, false, 2);
    5d74:	2302      	movs	r3, #2
    5d76:	2200      	movs	r2, #0
    5d78:	69f9      	ldr	r1, [r7, #28]
    5d7a:	68f8      	ldr	r0, [r7, #12]
    5d7c:	f002 fab0 	bl	82e0 <compile_trailer_paren_helper>

    // return its name (the 'C' in class C(...):")
    return cscope->simple_name;
    5d80:	697b      	ldr	r3, [r7, #20]
    5d82:	8a5b      	ldrh	r3, [r3, #18]
}
    5d84:	4618      	mov	r0, r3
    5d86:	3720      	adds	r7, #32
    5d88:	46bd      	mov	sp, r7
    5d8a:	bd80      	pop	{r7, pc}

00005d8c <compile_built_in_decorator>:

// returns true if it was a built-in decorator (even if the built-in had an error)
STATIC bool compile_built_in_decorator(compiler_t *comp, int name_len, mp_parse_node_t *name_nodes, uint *emit_options) {
    5d8c:	b580      	push	{r7, lr}
    5d8e:	b086      	sub	sp, #24
    5d90:	af00      	add	r7, sp, #0
    5d92:	60f8      	str	r0, [r7, #12]
    5d94:	60b9      	str	r1, [r7, #8]
    5d96:	607a      	str	r2, [r7, #4]
    5d98:	603b      	str	r3, [r7, #0]
    if (MP_PARSE_NODE_LEAF_ARG(name_nodes[0]) != MP_QSTR_micropython) {
    5d9a:	687b      	ldr	r3, [r7, #4]
    5d9c:	681b      	ldr	r3, [r3, #0]
    5d9e:	091b      	lsrs	r3, r3, #4
    5da0:	f240 123f 	movw	r2, #319	; 0x13f
    5da4:	4293      	cmp	r3, r2
    5da6:	d001      	beq.n	5dac <compile_built_in_decorator+0x20>
        return false;
    5da8:	2300      	movs	r3, #0
    5daa:	e020      	b.n	5dee <compile_built_in_decorator+0x62>
    }

    if (name_len != 2) {
    5dac:	68bb      	ldr	r3, [r7, #8]
    5dae:	2b02      	cmp	r3, #2
    5db0:	d008      	beq.n	5dc4 <compile_built_in_decorator+0x38>
        compile_syntax_error(comp, name_nodes[0], "invalid micropython decorator");
    5db2:	687b      	ldr	r3, [r7, #4]
    5db4:	681b      	ldr	r3, [r3, #0]
    5db6:	4a10      	ldr	r2, [pc, #64]	; (5df8 <compile_built_in_decorator+0x6c>)
    5db8:	4619      	mov	r1, r3
    5dba:	68f8      	ldr	r0, [r7, #12]
    5dbc:	f7ff f88c 	bl	4ed8 <compile_syntax_error>
        return true;
    5dc0:	2301      	movs	r3, #1
    5dc2:	e014      	b.n	5dee <compile_built_in_decorator+0x62>
    }

    qstr attr = MP_PARSE_NODE_LEAF_ARG(name_nodes[1]);
    5dc4:	687b      	ldr	r3, [r7, #4]
    5dc6:	3304      	adds	r3, #4
    5dc8:	681b      	ldr	r3, [r3, #0]
    5dca:	091b      	lsrs	r3, r3, #4
    5dcc:	617b      	str	r3, [r7, #20]
    if (attr == MP_QSTR_bytecode) {
    5dce:	697b      	ldr	r3, [r7, #20]
    5dd0:	2bf3      	cmp	r3, #243	; 0xf3
    5dd2:	d103      	bne.n	5ddc <compile_built_in_decorator+0x50>
        *emit_options = MP_EMIT_OPT_BYTECODE;
    5dd4:	683b      	ldr	r3, [r7, #0]
    5dd6:	2201      	movs	r2, #1
    5dd8:	601a      	str	r2, [r3, #0]
    5dda:	e007      	b.n	5dec <compile_built_in_decorator+0x60>
    #if MICROPY_EMIT_INLINE_ASM
    } else if (attr == ASM_DECORATOR_QSTR) {
        *emit_options = MP_EMIT_OPT_ASM;
    #endif
    } else {
        compile_syntax_error(comp, name_nodes[1], "invalid micropython decorator");
    5ddc:	687b      	ldr	r3, [r7, #4]
    5dde:	3304      	adds	r3, #4
    5de0:	681b      	ldr	r3, [r3, #0]
    5de2:	4a05      	ldr	r2, [pc, #20]	; (5df8 <compile_built_in_decorator+0x6c>)
    5de4:	4619      	mov	r1, r3
    5de6:	68f8      	ldr	r0, [r7, #12]
    5de8:	f7ff f876 	bl	4ed8 <compile_syntax_error>
    }

    return true;
    5dec:	2301      	movs	r3, #1
}
    5dee:	4618      	mov	r0, r3
    5df0:	3718      	adds	r7, #24
    5df2:	46bd      	mov	sp, r7
    5df4:	bd80      	pop	{r7, pc}
    5df6:	bf00      	nop
    5df8:	000203e8 	.word	0x000203e8

00005dfc <compile_decorated>:

STATIC void compile_decorated(compiler_t *comp, mp_parse_node_struct_t *pns) {
    5dfc:	b580      	push	{r7, lr}
    5dfe:	b08e      	sub	sp, #56	; 0x38
    5e00:	af00      	add	r7, sp, #0
    5e02:	6078      	str	r0, [r7, #4]
    5e04:	6039      	str	r1, [r7, #0]
    // get the list of decorators
    mp_parse_node_t *nodes;
    int n = mp_parse_node_extract_list(&pns->nodes[0], PN_decorators, &nodes);
    5e06:	683b      	ldr	r3, [r7, #0]
    5e08:	3308      	adds	r3, #8
    5e0a:	f107 0210 	add.w	r2, r7, #16
    5e0e:	213b      	movs	r1, #59	; 0x3b
    5e10:	4618      	mov	r0, r3
    5e12:	f7fd ff67 	bl	3ce4 <mp_parse_node_extract_list>
    5e16:	6238      	str	r0, [r7, #32]

    // inherit emit options for this function/class definition
    uint emit_options = comp->scope_cur->emit_options;
    5e18:	687b      	ldr	r3, [r7, #4]
    5e1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    5e1c:	7e5b      	ldrb	r3, [r3, #25]
    5e1e:	60fb      	str	r3, [r7, #12]

    // compile each decorator
    int num_built_in_decorators = 0;
    5e20:	2300      	movs	r3, #0
    5e22:	637b      	str	r3, [r7, #52]	; 0x34
    for (int i = 0; i < n; i++) {
    5e24:	2300      	movs	r3, #0
    5e26:	633b      	str	r3, [r7, #48]	; 0x30
    5e28:	e074      	b.n	5f14 <compile_decorated+0x118>
        assert(MP_PARSE_NODE_IS_STRUCT_KIND(nodes[i], PN_decorator)); // should be
    5e2a:	693a      	ldr	r2, [r7, #16]
    5e2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    5e2e:	009b      	lsls	r3, r3, #2
    5e30:	4413      	add	r3, r2
    5e32:	681b      	ldr	r3, [r3, #0]
    5e34:	2b00      	cmp	r3, #0
    5e36:	d011      	beq.n	5e5c <compile_decorated+0x60>
    5e38:	693a      	ldr	r2, [r7, #16]
    5e3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    5e3c:	009b      	lsls	r3, r3, #2
    5e3e:	4413      	add	r3, r2
    5e40:	681b      	ldr	r3, [r3, #0]
    5e42:	f003 0303 	and.w	r3, r3, #3
    5e46:	2b00      	cmp	r3, #0
    5e48:	d108      	bne.n	5e5c <compile_decorated+0x60>
    5e4a:	693a      	ldr	r2, [r7, #16]
    5e4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    5e4e:	009b      	lsls	r3, r3, #2
    5e50:	4413      	add	r3, r2
    5e52:	681b      	ldr	r3, [r3, #0]
    5e54:	685b      	ldr	r3, [r3, #4]
    5e56:	b2db      	uxtb	r3, r3
    5e58:	2b3a      	cmp	r3, #58	; 0x3a
    5e5a:	d006      	beq.n	5e6a <compile_decorated+0x6e>
    5e5c:	4b4f      	ldr	r3, [pc, #316]	; (5f9c <compile_decorated+0x1a0>)
    5e5e:	4a50      	ldr	r2, [pc, #320]	; (5fa0 <compile_decorated+0x1a4>)
    5e60:	f44f 7149 	mov.w	r1, #804	; 0x324
    5e64:	484f      	ldr	r0, [pc, #316]	; (5fa4 <compile_decorated+0x1a8>)
    5e66:	f015 fc33 	bl	1b6d0 <__assert_func>
        mp_parse_node_struct_t *pns_decorator = (mp_parse_node_struct_t*)nodes[i];
    5e6a:	693a      	ldr	r2, [r7, #16]
    5e6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    5e6e:	009b      	lsls	r3, r3, #2
    5e70:	4413      	add	r3, r2
    5e72:	681b      	ldr	r3, [r3, #0]
    5e74:	61fb      	str	r3, [r7, #28]

        // nodes[0] contains the decorator function, which is a dotted name
        mp_parse_node_t *name_nodes;
        int name_len = mp_parse_node_extract_list(&pns_decorator->nodes[0], PN_dotted_name, &name_nodes);
    5e76:	69fb      	ldr	r3, [r7, #28]
    5e78:	3308      	adds	r3, #8
    5e7a:	f107 0208 	add.w	r2, r7, #8
    5e7e:	2166      	movs	r1, #102	; 0x66
    5e80:	4618      	mov	r0, r3
    5e82:	f7fd ff2f 	bl	3ce4 <mp_parse_node_extract_list>
    5e86:	61b8      	str	r0, [r7, #24]

        // check for built-in decorators
        if (compile_built_in_decorator(comp, name_len, name_nodes, &emit_options)) {
    5e88:	68ba      	ldr	r2, [r7, #8]
    5e8a:	f107 030c 	add.w	r3, r7, #12
    5e8e:	69b9      	ldr	r1, [r7, #24]
    5e90:	6878      	ldr	r0, [r7, #4]
    5e92:	f7ff ff7b 	bl	5d8c <compile_built_in_decorator>
    5e96:	4603      	mov	r3, r0
    5e98:	2b00      	cmp	r3, #0
    5e9a:	d003      	beq.n	5ea4 <compile_decorated+0xa8>
            // this was a built-in
            num_built_in_decorators += 1;
    5e9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    5e9e:	3301      	adds	r3, #1
    5ea0:	637b      	str	r3, [r7, #52]	; 0x34
    5ea2:	e034      	b.n	5f0e <compile_decorated+0x112>

        } else {
            // not a built-in, compile normally

            // compile the decorator function
            compile_node(comp, name_nodes[0]);
    5ea4:	68bb      	ldr	r3, [r7, #8]
    5ea6:	681b      	ldr	r3, [r3, #0]
    5ea8:	4619      	mov	r1, r3
    5eaa:	6878      	ldr	r0, [r7, #4]
    5eac:	f002 fe72 	bl	8b94 <compile_node>
            for (int j = 1; j < name_len; j++) {
    5eb0:	2301      	movs	r3, #1
    5eb2:	62fb      	str	r3, [r7, #44]	; 0x2c
    5eb4:	e01d      	b.n	5ef2 <compile_decorated+0xf6>
                assert(MP_PARSE_NODE_IS_ID(name_nodes[j])); // should be
    5eb6:	68ba      	ldr	r2, [r7, #8]
    5eb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    5eba:	009b      	lsls	r3, r3, #2
    5ebc:	4413      	add	r3, r2
    5ebe:	681b      	ldr	r3, [r3, #0]
    5ec0:	f003 030f 	and.w	r3, r3, #15
    5ec4:	2b02      	cmp	r3, #2
    5ec6:	d006      	beq.n	5ed6 <compile_decorated+0xda>
    5ec8:	4b37      	ldr	r3, [pc, #220]	; (5fa8 <compile_decorated+0x1ac>)
    5eca:	4a35      	ldr	r2, [pc, #212]	; (5fa0 <compile_decorated+0x1a4>)
    5ecc:	f240 3136 	movw	r1, #822	; 0x336
    5ed0:	4834      	ldr	r0, [pc, #208]	; (5fa4 <compile_decorated+0x1a8>)
    5ed2:	f015 fbfd 	bl	1b6d0 <__assert_func>
                EMIT_ARG(load_attr, MP_PARSE_NODE_LEAF_ARG(name_nodes[j]));
    5ed6:	687b      	ldr	r3, [r7, #4]
    5ed8:	6a98      	ldr	r0, [r3, #40]	; 0x28
    5eda:	68ba      	ldr	r2, [r7, #8]
    5edc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    5ede:	009b      	lsls	r3, r3, #2
    5ee0:	4413      	add	r3, r2
    5ee2:	681b      	ldr	r3, [r3, #0]
    5ee4:	091b      	lsrs	r3, r3, #4
    5ee6:	4619      	mov	r1, r3
    5ee8:	f004 fbbc 	bl	a664 <mp_emit_bc_load_attr>
            for (int j = 1; j < name_len; j++) {
    5eec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    5eee:	3301      	adds	r3, #1
    5ef0:	62fb      	str	r3, [r7, #44]	; 0x2c
    5ef2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    5ef4:	69bb      	ldr	r3, [r7, #24]
    5ef6:	429a      	cmp	r2, r3
    5ef8:	dbdd      	blt.n	5eb6 <compile_decorated+0xba>
            }

            // nodes[1] contains arguments to the decorator function, if any
            if (!MP_PARSE_NODE_IS_NULL(pns_decorator->nodes[1])) {
    5efa:	69fb      	ldr	r3, [r7, #28]
    5efc:	68db      	ldr	r3, [r3, #12]
    5efe:	2b00      	cmp	r3, #0
    5f00:	d005      	beq.n	5f0e <compile_decorated+0x112>
                // call the decorator function with the arguments in nodes[1]
                compile_node(comp, pns_decorator->nodes[1]);
    5f02:	69fb      	ldr	r3, [r7, #28]
    5f04:	68db      	ldr	r3, [r3, #12]
    5f06:	4619      	mov	r1, r3
    5f08:	6878      	ldr	r0, [r7, #4]
    5f0a:	f002 fe43 	bl	8b94 <compile_node>
    for (int i = 0; i < n; i++) {
    5f0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    5f10:	3301      	adds	r3, #1
    5f12:	633b      	str	r3, [r7, #48]	; 0x30
    5f14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    5f16:	6a3b      	ldr	r3, [r7, #32]
    5f18:	429a      	cmp	r2, r3
    5f1a:	db86      	blt.n	5e2a <compile_decorated+0x2e>
            }
        }
    }

    // compile the body (funcdef, async funcdef or classdef) and get its name
    mp_parse_node_struct_t *pns_body = (mp_parse_node_struct_t*)pns->nodes[1];
    5f1c:	683b      	ldr	r3, [r7, #0]
    5f1e:	68db      	ldr	r3, [r3, #12]
    5f20:	617b      	str	r3, [r7, #20]
    qstr body_name = 0;
    5f22:	2300      	movs	r3, #0
    5f24:	62bb      	str	r3, [r7, #40]	; 0x28
    if (MP_PARSE_NODE_STRUCT_KIND(pns_body) == PN_funcdef) {
    5f26:	697b      	ldr	r3, [r7, #20]
    5f28:	685b      	ldr	r3, [r3, #4]
    5f2a:	b2db      	uxtb	r3, r3
    5f2c:	2b03      	cmp	r3, #3
    5f2e:	d107      	bne.n	5f40 <compile_decorated+0x144>
        body_name = compile_funcdef_helper(comp, pns_body, emit_options);
    5f30:	68fb      	ldr	r3, [r7, #12]
    5f32:	461a      	mov	r2, r3
    5f34:	6979      	ldr	r1, [r7, #20]
    5f36:	6878      	ldr	r0, [r7, #4]
    5f38:	f7ff febc 	bl	5cb4 <compile_funcdef_helper>
    5f3c:	62b8      	str	r0, [r7, #40]	; 0x28
    5f3e:	e012      	b.n	5f66 <compile_decorated+0x16a>
        body_name = compile_funcdef_helper(comp, pns0, emit_options);
        scope_t *fscope = (scope_t*)pns0->nodes[4];
        fscope->scope_flags |= MP_SCOPE_FLAG_GENERATOR;
    #endif
    } else {
        assert(MP_PARSE_NODE_STRUCT_KIND(pns_body) == PN_classdef); // should be
    5f40:	697b      	ldr	r3, [r7, #20]
    5f42:	685b      	ldr	r3, [r3, #4]
    5f44:	b2db      	uxtb	r3, r3
    5f46:	2b33      	cmp	r3, #51	; 0x33
    5f48:	d006      	beq.n	5f58 <compile_decorated+0x15c>
    5f4a:	4b18      	ldr	r3, [pc, #96]	; (5fac <compile_decorated+0x1b0>)
    5f4c:	4a14      	ldr	r2, [pc, #80]	; (5fa0 <compile_decorated+0x1a4>)
    5f4e:	f44f 7154 	mov.w	r1, #848	; 0x350
    5f52:	4814      	ldr	r0, [pc, #80]	; (5fa4 <compile_decorated+0x1a8>)
    5f54:	f015 fbbc 	bl	1b6d0 <__assert_func>
        body_name = compile_classdef_helper(comp, pns_body, emit_options);
    5f58:	68fb      	ldr	r3, [r7, #12]
    5f5a:	461a      	mov	r2, r3
    5f5c:	6979      	ldr	r1, [r7, #20]
    5f5e:	6878      	ldr	r0, [r7, #4]
    5f60:	f7ff fecc 	bl	5cfc <compile_classdef_helper>
    5f64:	62b8      	str	r0, [r7, #40]	; 0x28
    }

    // call each decorator
    for (int i = 0; i < n - num_built_in_decorators; i++) {
    5f66:	2300      	movs	r3, #0
    5f68:	627b      	str	r3, [r7, #36]	; 0x24
    5f6a:	e009      	b.n	5f80 <compile_decorated+0x184>
        EMIT_ARG(call_function, 1, 0, 0);
    5f6c:	687b      	ldr	r3, [r7, #4]
    5f6e:	6a98      	ldr	r0, [r3, #40]	; 0x28
    5f70:	2300      	movs	r3, #0
    5f72:	2200      	movs	r2, #0
    5f74:	2101      	movs	r1, #1
    5f76:	f004 ffff 	bl	af78 <mp_emit_bc_call_function>
    for (int i = 0; i < n - num_built_in_decorators; i++) {
    5f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5f7c:	3301      	adds	r3, #1
    5f7e:	627b      	str	r3, [r7, #36]	; 0x24
    5f80:	6a3a      	ldr	r2, [r7, #32]
    5f82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    5f84:	1ad2      	subs	r2, r2, r3
    5f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5f88:	429a      	cmp	r2, r3
    5f8a:	dcef      	bgt.n	5f6c <compile_decorated+0x170>
    }

    // store func/class object into name
    compile_store_id(comp, body_name);
    5f8c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
    5f8e:	6878      	ldr	r0, [r7, #4]
    5f90:	f7ff f8c2 	bl	5118 <compile_store_id>
}
    5f94:	bf00      	nop
    5f96:	3738      	adds	r7, #56	; 0x38
    5f98:	46bd      	mov	sp, r7
    5f9a:	bd80      	pop	{r7, pc}
    5f9c:	00020408 	.word	0x00020408
    5fa0:	00020e34 	.word	0x00020e34
    5fa4:	00020234 	.word	0x00020234
    5fa8:	00020440 	.word	0x00020440
    5fac:	00020464 	.word	0x00020464

00005fb0 <compile_funcdef>:

STATIC void compile_funcdef(compiler_t *comp, mp_parse_node_struct_t *pns) {
    5fb0:	b580      	push	{r7, lr}
    5fb2:	b084      	sub	sp, #16
    5fb4:	af00      	add	r7, sp, #0
    5fb6:	6078      	str	r0, [r7, #4]
    5fb8:	6039      	str	r1, [r7, #0]
    qstr fname = compile_funcdef_helper(comp, pns, comp->scope_cur->emit_options);
    5fba:	687b      	ldr	r3, [r7, #4]
    5fbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    5fbe:	7e5b      	ldrb	r3, [r3, #25]
    5fc0:	461a      	mov	r2, r3
    5fc2:	6839      	ldr	r1, [r7, #0]
    5fc4:	6878      	ldr	r0, [r7, #4]
    5fc6:	f7ff fe75 	bl	5cb4 <compile_funcdef_helper>
    5fca:	60f8      	str	r0, [r7, #12]
    // store function object into function name
    compile_store_id(comp, fname);
    5fcc:	68f9      	ldr	r1, [r7, #12]
    5fce:	6878      	ldr	r0, [r7, #4]
    5fd0:	f7ff f8a2 	bl	5118 <compile_store_id>
}
    5fd4:	bf00      	nop
    5fd6:	3710      	adds	r7, #16
    5fd8:	46bd      	mov	sp, r7
    5fda:	bd80      	pop	{r7, pc}

00005fdc <c_del_stmt>:

STATIC void c_del_stmt(compiler_t *comp, mp_parse_node_t pn) {
    5fdc:	b580      	push	{r7, lr}
    5fde:	b08a      	sub	sp, #40	; 0x28
    5fe0:	af00      	add	r7, sp, #0
    5fe2:	6078      	str	r0, [r7, #4]
    5fe4:	6039      	str	r1, [r7, #0]
    if (MP_PARSE_NODE_IS_ID(pn)) {
    5fe6:	683b      	ldr	r3, [r7, #0]
    5fe8:	f003 030f 	and.w	r3, r3, #15
    5fec:	2b02      	cmp	r3, #2
    5fee:	d106      	bne.n	5ffe <c_del_stmt+0x22>
        compile_delete_id(comp, MP_PARSE_NODE_LEAF_ARG(pn));
    5ff0:	683b      	ldr	r3, [r7, #0]
    5ff2:	091b      	lsrs	r3, r3, #4
    5ff4:	4619      	mov	r1, r3
    5ff6:	6878      	ldr	r0, [r7, #4]
    5ff8:	f7ff f8ac 	bl	5154 <compile_delete_id>
    } else {
        // some arbitrary statement that we can't delete (eg del 1)
        goto cannot_delete;
    }

    return;
    5ffc:	e121      	b.n	6242 <c_del_stmt+0x266>
    } else if (MP_PARSE_NODE_IS_STRUCT_KIND(pn, PN_atom_expr_normal)) {
    5ffe:	683b      	ldr	r3, [r7, #0]
    6000:	2b00      	cmp	r3, #0
    6002:	f000 808e 	beq.w	6122 <c_del_stmt+0x146>
    6006:	683b      	ldr	r3, [r7, #0]
    6008:	f003 0303 	and.w	r3, r3, #3
    600c:	2b00      	cmp	r3, #0
    600e:	f040 8088 	bne.w	6122 <c_del_stmt+0x146>
    6012:	683b      	ldr	r3, [r7, #0]
    6014:	685b      	ldr	r3, [r3, #4]
    6016:	b2db      	uxtb	r3, r3
    6018:	2b29      	cmp	r3, #41	; 0x29
    601a:	f040 8082 	bne.w	6122 <c_del_stmt+0x146>
        mp_parse_node_struct_t *pns = (mp_parse_node_struct_t*)pn;
    601e:	683b      	ldr	r3, [r7, #0]
    6020:	61bb      	str	r3, [r7, #24]
        compile_node(comp, pns->nodes[0]); // base of the atom_expr_normal node
    6022:	69bb      	ldr	r3, [r7, #24]
    6024:	689b      	ldr	r3, [r3, #8]
    6026:	4619      	mov	r1, r3
    6028:	6878      	ldr	r0, [r7, #4]
    602a:	f002 fdb3 	bl	8b94 <compile_node>
        if (MP_PARSE_NODE_IS_STRUCT(pns->nodes[1])) {
    602e:	69bb      	ldr	r3, [r7, #24]
    6030:	68db      	ldr	r3, [r3, #12]
    6032:	2b00      	cmp	r3, #0
    6034:	f000 8100 	beq.w	6238 <c_del_stmt+0x25c>
    6038:	69bb      	ldr	r3, [r7, #24]
    603a:	68db      	ldr	r3, [r3, #12]
    603c:	f003 0303 	and.w	r3, r3, #3
    6040:	2b00      	cmp	r3, #0
    6042:	f040 80f9 	bne.w	6238 <c_del_stmt+0x25c>
            mp_parse_node_struct_t *pns1 = (mp_parse_node_struct_t*)pns->nodes[1];
    6046:	69bb      	ldr	r3, [r7, #24]
    6048:	68db      	ldr	r3, [r3, #12]
    604a:	627b      	str	r3, [r7, #36]	; 0x24
            if (MP_PARSE_NODE_STRUCT_KIND(pns1) == PN_atom_expr_trailers) {
    604c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    604e:	685b      	ldr	r3, [r3, #4]
    6050:	b2db      	uxtb	r3, r3
    6052:	2b86      	cmp	r3, #134	; 0x86
    6054:	d137      	bne.n	60c6 <c_del_stmt+0xea>
                int n = MP_PARSE_NODE_STRUCT_NUM_NODES(pns1);
    6056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    6058:	685b      	ldr	r3, [r3, #4]
    605a:	0a1b      	lsrs	r3, r3, #8
    605c:	617b      	str	r3, [r7, #20]
                for (int i = 0; i < n - 1; i++) {
    605e:	2300      	movs	r3, #0
    6060:	623b      	str	r3, [r7, #32]
    6062:	e00b      	b.n	607c <c_del_stmt+0xa0>
                    compile_node(comp, pns1->nodes[i]);
    6064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    6066:	6a3a      	ldr	r2, [r7, #32]
    6068:	3202      	adds	r2, #2
    606a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    606e:	4619      	mov	r1, r3
    6070:	6878      	ldr	r0, [r7, #4]
    6072:	f002 fd8f 	bl	8b94 <compile_node>
                for (int i = 0; i < n - 1; i++) {
    6076:	6a3b      	ldr	r3, [r7, #32]
    6078:	3301      	adds	r3, #1
    607a:	623b      	str	r3, [r7, #32]
    607c:	697b      	ldr	r3, [r7, #20]
    607e:	1e5a      	subs	r2, r3, #1
    6080:	6a3b      	ldr	r3, [r7, #32]
    6082:	429a      	cmp	r2, r3
    6084:	dcee      	bgt.n	6064 <c_del_stmt+0x88>
                assert(MP_PARSE_NODE_IS_STRUCT(pns1->nodes[n - 1]));
    6086:	697b      	ldr	r3, [r7, #20]
    6088:	1e5a      	subs	r2, r3, #1
    608a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    608c:	3202      	adds	r2, #2
    608e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    6092:	2b00      	cmp	r3, #0
    6094:	d009      	beq.n	60aa <c_del_stmt+0xce>
    6096:	697b      	ldr	r3, [r7, #20]
    6098:	1e5a      	subs	r2, r3, #1
    609a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    609c:	3202      	adds	r2, #2
    609e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    60a2:	f003 0303 	and.w	r3, r3, #3
    60a6:	2b00      	cmp	r3, #0
    60a8:	d006      	beq.n	60b8 <c_del_stmt+0xdc>
    60aa:	4b67      	ldr	r3, [pc, #412]	; (6248 <c_del_stmt+0x26c>)
    60ac:	4a67      	ldr	r2, [pc, #412]	; (624c <c_del_stmt+0x270>)
    60ae:	f240 3172 	movw	r1, #882	; 0x372
    60b2:	4867      	ldr	r0, [pc, #412]	; (6250 <c_del_stmt+0x274>)
    60b4:	f015 fb0c 	bl	1b6d0 <__assert_func>
                pns1 = (mp_parse_node_struct_t*)pns1->nodes[n - 1];
    60b8:	697b      	ldr	r3, [r7, #20]
    60ba:	1e5a      	subs	r2, r3, #1
    60bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    60be:	3202      	adds	r2, #2
    60c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    60c4:	627b      	str	r3, [r7, #36]	; 0x24
            if (MP_PARSE_NODE_STRUCT_KIND(pns1) == PN_trailer_bracket) {
    60c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    60c8:	685b      	ldr	r3, [r3, #4]
    60ca:	b2db      	uxtb	r3, r3
    60cc:	2b2e      	cmp	r3, #46	; 0x2e
    60ce:	d10b      	bne.n	60e8 <c_del_stmt+0x10c>
                compile_node(comp, pns1->nodes[0]);
    60d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    60d2:	689b      	ldr	r3, [r3, #8]
    60d4:	4619      	mov	r1, r3
    60d6:	6878      	ldr	r0, [r7, #4]
    60d8:	f002 fd5c 	bl	8b94 <compile_node>
                EMIT(delete_subscr);
    60dc:	687b      	ldr	r3, [r7, #4]
    60de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    60e0:	4618      	mov	r0, r3
    60e2:	f004 fbeb 	bl	a8bc <mp_emit_bc_delete_subscr>
    } else if (MP_PARSE_NODE_IS_STRUCT_KIND(pn, PN_atom_expr_normal)) {
    60e6:	e0a1      	b.n	622c <c_del_stmt+0x250>
            } else if (MP_PARSE_NODE_STRUCT_KIND(pns1) == PN_trailer_period) {
    60e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    60ea:	685b      	ldr	r3, [r3, #4]
    60ec:	b2db      	uxtb	r3, r3
    60ee:	2b2f      	cmp	r3, #47	; 0x2f
    60f0:	f040 809d 	bne.w	622e <c_del_stmt+0x252>
                assert(MP_PARSE_NODE_IS_ID(pns1->nodes[0]));
    60f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    60f6:	689b      	ldr	r3, [r3, #8]
    60f8:	f003 030f 	and.w	r3, r3, #15
    60fc:	2b02      	cmp	r3, #2
    60fe:	d006      	beq.n	610e <c_del_stmt+0x132>
    6100:	4b54      	ldr	r3, [pc, #336]	; (6254 <c_del_stmt+0x278>)
    6102:	4a52      	ldr	r2, [pc, #328]	; (624c <c_del_stmt+0x270>)
    6104:	f240 3179 	movw	r1, #889	; 0x379
    6108:	4851      	ldr	r0, [pc, #324]	; (6250 <c_del_stmt+0x274>)
    610a:	f015 fae1 	bl	1b6d0 <__assert_func>
                EMIT_ARG(delete_attr, MP_PARSE_NODE_LEAF_ARG(pns1->nodes[0]));
    610e:	687b      	ldr	r3, [r7, #4]
    6110:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    6112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    6114:	689b      	ldr	r3, [r3, #8]
    6116:	091b      	lsrs	r3, r3, #4
    6118:	4619      	mov	r1, r3
    611a:	4610      	mov	r0, r2
    611c:	f004 fbba 	bl	a894 <mp_emit_bc_delete_attr>
    } else if (MP_PARSE_NODE_IS_STRUCT_KIND(pn, PN_atom_expr_normal)) {
    6120:	e084      	b.n	622c <c_del_stmt+0x250>
    } else if (MP_PARSE_NODE_IS_STRUCT_KIND(pn, PN_atom_paren)) {
    6122:	683b      	ldr	r3, [r7, #0]
    6124:	2b00      	cmp	r3, #0
    6126:	f000 8087 	beq.w	6238 <c_del_stmt+0x25c>
    612a:	683b      	ldr	r3, [r7, #0]
    612c:	f003 0303 	and.w	r3, r3, #3
    6130:	2b00      	cmp	r3, #0
    6132:	f040 8081 	bne.w	6238 <c_del_stmt+0x25c>
    6136:	683b      	ldr	r3, [r7, #0]
    6138:	685b      	ldr	r3, [r3, #4]
    613a:	b2db      	uxtb	r3, r3
    613c:	2b2a      	cmp	r3, #42	; 0x2a
    613e:	d17b      	bne.n	6238 <c_del_stmt+0x25c>
        pn = ((mp_parse_node_struct_t*)pn)->nodes[0];
    6140:	683b      	ldr	r3, [r7, #0]
    6142:	689b      	ldr	r3, [r3, #8]
    6144:	603b      	str	r3, [r7, #0]
        if (MP_PARSE_NODE_IS_NULL(pn)) {
    6146:	683b      	ldr	r3, [r7, #0]
    6148:	2b00      	cmp	r3, #0
    614a:	d072      	beq.n	6232 <c_del_stmt+0x256>
            assert(MP_PARSE_NODE_IS_STRUCT_KIND(pn, PN_testlist_comp));
    614c:	683b      	ldr	r3, [r7, #0]
    614e:	2b00      	cmp	r3, #0
    6150:	d009      	beq.n	6166 <c_del_stmt+0x18a>
    6152:	683b      	ldr	r3, [r7, #0]
    6154:	f003 0303 	and.w	r3, r3, #3
    6158:	2b00      	cmp	r3, #0
    615a:	d104      	bne.n	6166 <c_del_stmt+0x18a>
    615c:	683b      	ldr	r3, [r7, #0]
    615e:	685b      	ldr	r3, [r3, #4]
    6160:	b2db      	uxtb	r3, r3
    6162:	2b8a      	cmp	r3, #138	; 0x8a
    6164:	d006      	beq.n	6174 <c_del_stmt+0x198>
    6166:	4b3c      	ldr	r3, [pc, #240]	; (6258 <c_del_stmt+0x27c>)
    6168:	4a38      	ldr	r2, [pc, #224]	; (624c <c_del_stmt+0x270>)
    616a:	f240 3187 	movw	r1, #903	; 0x387
    616e:	4838      	ldr	r0, [pc, #224]	; (6250 <c_del_stmt+0x274>)
    6170:	f015 faae 	bl	1b6d0 <__assert_func>
            mp_parse_node_struct_t *pns = (mp_parse_node_struct_t*)pn;
    6174:	683b      	ldr	r3, [r7, #0]
    6176:	613b      	str	r3, [r7, #16]
            if (MP_PARSE_NODE_IS_STRUCT(pns->nodes[1])) {
    6178:	693b      	ldr	r3, [r7, #16]
    617a:	68db      	ldr	r3, [r3, #12]
    617c:	2b00      	cmp	r3, #0
    617e:	d048      	beq.n	6212 <c_del_stmt+0x236>
    6180:	693b      	ldr	r3, [r7, #16]
    6182:	68db      	ldr	r3, [r3, #12]
    6184:	f003 0303 	and.w	r3, r3, #3
    6188:	2b00      	cmp	r3, #0
    618a:	d142      	bne.n	6212 <c_del_stmt+0x236>
                mp_parse_node_struct_t *pns1 = (mp_parse_node_struct_t*)pns->nodes[1];
    618c:	693b      	ldr	r3, [r7, #16]
    618e:	68db      	ldr	r3, [r3, #12]
    6190:	60fb      	str	r3, [r7, #12]
                if (MP_PARSE_NODE_STRUCT_KIND(pns1) == PN_testlist_comp_3b) {
    6192:	68fb      	ldr	r3, [r7, #12]
    6194:	685b      	ldr	r3, [r3, #4]
    6196:	b2db      	uxtb	r3, r3
    6198:	2b8d      	cmp	r3, #141	; 0x8d
    619a:	d111      	bne.n	61c0 <c_del_stmt+0x1e4>
                    assert(MP_PARSE_NODE_IS_NULL(pns1->nodes[0]));
    619c:	68fb      	ldr	r3, [r7, #12]
    619e:	689b      	ldr	r3, [r3, #8]
    61a0:	2b00      	cmp	r3, #0
    61a2:	d006      	beq.n	61b2 <c_del_stmt+0x1d6>
    61a4:	4b2d      	ldr	r3, [pc, #180]	; (625c <c_del_stmt+0x280>)
    61a6:	4a29      	ldr	r2, [pc, #164]	; (624c <c_del_stmt+0x270>)
    61a8:	f240 318f 	movw	r1, #911	; 0x38f
    61ac:	4828      	ldr	r0, [pc, #160]	; (6250 <c_del_stmt+0x274>)
    61ae:	f015 fa8f 	bl	1b6d0 <__assert_func>
                    c_del_stmt(comp, pns->nodes[0]);
    61b2:	693b      	ldr	r3, [r7, #16]
    61b4:	689b      	ldr	r3, [r3, #8]
    61b6:	4619      	mov	r1, r3
    61b8:	6878      	ldr	r0, [r7, #4]
    61ba:	f7ff ff0f 	bl	5fdc <c_del_stmt>
            if (MP_PARSE_NODE_IS_STRUCT(pns->nodes[1])) {
    61be:	e035      	b.n	622c <c_del_stmt+0x250>
                } else if (MP_PARSE_NODE_STRUCT_KIND(pns1) == PN_testlist_comp_3c) {
    61c0:	68fb      	ldr	r3, [r7, #12]
    61c2:	685b      	ldr	r3, [r3, #4]
    61c4:	b2db      	uxtb	r3, r3
    61c6:	2b8e      	cmp	r3, #142	; 0x8e
    61c8:	d11d      	bne.n	6206 <c_del_stmt+0x22a>
                    int n = MP_PARSE_NODE_STRUCT_NUM_NODES(pns1);
    61ca:	68fb      	ldr	r3, [r7, #12]
    61cc:	685b      	ldr	r3, [r3, #4]
    61ce:	0a1b      	lsrs	r3, r3, #8
    61d0:	60bb      	str	r3, [r7, #8]
                    c_del_stmt(comp, pns->nodes[0]);
    61d2:	693b      	ldr	r3, [r7, #16]
    61d4:	689b      	ldr	r3, [r3, #8]
    61d6:	4619      	mov	r1, r3
    61d8:	6878      	ldr	r0, [r7, #4]
    61da:	f7ff feff 	bl	5fdc <c_del_stmt>
                    for (int i = 0; i < n; i++) {
    61de:	2300      	movs	r3, #0
    61e0:	61fb      	str	r3, [r7, #28]
    61e2:	e00b      	b.n	61fc <c_del_stmt+0x220>
                        c_del_stmt(comp, pns1->nodes[i]);
    61e4:	68fb      	ldr	r3, [r7, #12]
    61e6:	69fa      	ldr	r2, [r7, #28]
    61e8:	3202      	adds	r2, #2
    61ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    61ee:	4619      	mov	r1, r3
    61f0:	6878      	ldr	r0, [r7, #4]
    61f2:	f7ff fef3 	bl	5fdc <c_del_stmt>
                    for (int i = 0; i < n; i++) {
    61f6:	69fb      	ldr	r3, [r7, #28]
    61f8:	3301      	adds	r3, #1
    61fa:	61fb      	str	r3, [r7, #28]
    61fc:	69fa      	ldr	r2, [r7, #28]
    61fe:	68bb      	ldr	r3, [r7, #8]
    6200:	429a      	cmp	r2, r3
    6202:	dbef      	blt.n	61e4 <c_del_stmt+0x208>
            if (MP_PARSE_NODE_IS_STRUCT(pns->nodes[1])) {
    6204:	e012      	b.n	622c <c_del_stmt+0x250>
                } else if (MP_PARSE_NODE_STRUCT_KIND(pns1) == PN_comp_for) {
    6206:	68fb      	ldr	r3, [r7, #12]
    6208:	685b      	ldr	r3, [r3, #4]
    620a:	b2db      	uxtb	r3, r3
    620c:	2b9f      	cmp	r3, #159	; 0x9f
    620e:	d012      	beq.n	6236 <c_del_stmt+0x25a>
                    goto sequence_with_2_items;
    6210:	bf00      	nop
                c_del_stmt(comp, pns->nodes[0]);
    6212:	693b      	ldr	r3, [r7, #16]
    6214:	689b      	ldr	r3, [r3, #8]
    6216:	4619      	mov	r1, r3
    6218:	6878      	ldr	r0, [r7, #4]
    621a:	f7ff fedf 	bl	5fdc <c_del_stmt>
                c_del_stmt(comp, pns->nodes[1]);
    621e:	693b      	ldr	r3, [r7, #16]
    6220:	68db      	ldr	r3, [r3, #12]
    6222:	4619      	mov	r1, r3
    6224:	6878      	ldr	r0, [r7, #4]
    6226:	f7ff fed9 	bl	5fdc <c_del_stmt>
    return;
    622a:	e00a      	b.n	6242 <c_del_stmt+0x266>
    622c:	e009      	b.n	6242 <c_del_stmt+0x266>
                goto cannot_delete;
    622e:	bf00      	nop
    6230:	e002      	b.n	6238 <c_del_stmt+0x25c>
            goto cannot_delete;
    6232:	bf00      	nop
    6234:	e000      	b.n	6238 <c_del_stmt+0x25c>
                    goto cannot_delete;
    6236:	bf00      	nop

cannot_delete:
    compile_syntax_error(comp, (mp_parse_node_t)pn, "can't delete expression");
    6238:	4a09      	ldr	r2, [pc, #36]	; (6260 <c_del_stmt+0x284>)
    623a:	6839      	ldr	r1, [r7, #0]
    623c:	6878      	ldr	r0, [r7, #4]
    623e:	f7fe fe4b 	bl	4ed8 <compile_syntax_error>
}
    6242:	3728      	adds	r7, #40	; 0x28
    6244:	46bd      	mov	sp, r7
    6246:	bd80      	pop	{r7, pc}
    6248:	00020288 	.word	0x00020288
    624c:	00020e48 	.word	0x00020e48
    6250:	00020234 	.word	0x00020234
    6254:	000202b4 	.word	0x000202b4
    6258:	00020498 	.word	0x00020498
    625c:	000204cc 	.word	0x000204cc
    6260:	000204f4 	.word	0x000204f4

00006264 <compile_del_stmt>:

STATIC void compile_del_stmt(compiler_t *comp, mp_parse_node_struct_t *pns) {
    6264:	b580      	push	{r7, lr}
    6266:	b082      	sub	sp, #8
    6268:	af00      	add	r7, sp, #0
    626a:	6078      	str	r0, [r7, #4]
    626c:	6039      	str	r1, [r7, #0]
    apply_to_single_or_list(comp, pns->nodes[0], PN_exprlist, c_del_stmt);
    626e:	683b      	ldr	r3, [r7, #0]
    6270:	6899      	ldr	r1, [r3, #8]
    6272:	4b04      	ldr	r3, [pc, #16]	; (6284 <compile_del_stmt+0x20>)
    6274:	2290      	movs	r2, #144	; 0x90
    6276:	6878      	ldr	r0, [r7, #4]
    6278:	f7fe fec6 	bl	5008 <apply_to_single_or_list>
}
    627c:	bf00      	nop
    627e:	3708      	adds	r7, #8
    6280:	46bd      	mov	sp, r7
    6282:	bd80      	pop	{r7, pc}
    6284:	00005fdd 	.word	0x00005fdd

00006288 <compile_break_stmt>:

STATIC void compile_break_stmt(compiler_t *comp, mp_parse_node_struct_t *pns) {
    6288:	b580      	push	{r7, lr}
    628a:	b082      	sub	sp, #8
    628c:	af00      	add	r7, sp, #0
    628e:	6078      	str	r0, [r7, #4]
    6290:	6039      	str	r1, [r7, #0]
    if (comp->break_label == INVALID_LABEL) {
    6292:	687b      	ldr	r3, [r7, #4]
    6294:	8b1b      	ldrh	r3, [r3, #24]
    6296:	f64f 72ff 	movw	r2, #65535	; 0xffff
    629a:	4293      	cmp	r3, r2
    629c:	d105      	bne.n	62aa <compile_break_stmt+0x22>
        compile_syntax_error(comp, (mp_parse_node_t)pns, "'break' outside loop");
    629e:	683b      	ldr	r3, [r7, #0]
    62a0:	4a11      	ldr	r2, [pc, #68]	; (62e8 <compile_break_stmt+0x60>)
    62a2:	4619      	mov	r1, r3
    62a4:	6878      	ldr	r0, [r7, #4]
    62a6:	f7fe fe17 	bl	4ed8 <compile_syntax_error>
    }
    assert(comp->cur_except_level >= comp->break_continue_except_level);
    62aa:	687b      	ldr	r3, [r7, #4]
    62ac:	8b9a      	ldrh	r2, [r3, #28]
    62ae:	687b      	ldr	r3, [r7, #4]
    62b0:	8bdb      	ldrh	r3, [r3, #30]
    62b2:	429a      	cmp	r2, r3
    62b4:	d206      	bcs.n	62c4 <compile_break_stmt+0x3c>
    62b6:	4b0d      	ldr	r3, [pc, #52]	; (62ec <compile_break_stmt+0x64>)
    62b8:	4a0d      	ldr	r2, [pc, #52]	; (62f0 <compile_break_stmt+0x68>)
    62ba:	f44f 716e 	mov.w	r1, #952	; 0x3b8
    62be:	480d      	ldr	r0, [pc, #52]	; (62f4 <compile_break_stmt+0x6c>)
    62c0:	f015 fa06 	bl	1b6d0 <__assert_func>
    EMIT_ARG(break_loop, comp->break_label, comp->cur_except_level - comp->break_continue_except_level);
    62c4:	687b      	ldr	r3, [r7, #4]
    62c6:	6a98      	ldr	r0, [r3, #40]	; 0x28
    62c8:	687b      	ldr	r3, [r7, #4]
    62ca:	8b1b      	ldrh	r3, [r3, #24]
    62cc:	4619      	mov	r1, r3
    62ce:	687b      	ldr	r3, [r7, #4]
    62d0:	8b9b      	ldrh	r3, [r3, #28]
    62d2:	461a      	mov	r2, r3
    62d4:	687b      	ldr	r3, [r7, #4]
    62d6:	8bdb      	ldrh	r3, [r3, #30]
    62d8:	1ad3      	subs	r3, r2, r3
    62da:	461a      	mov	r2, r3
    62dc:	f004 fba0 	bl	aa20 <mp_emit_bc_unwind_jump>
}
    62e0:	bf00      	nop
    62e2:	3708      	adds	r7, #8
    62e4:	46bd      	mov	sp, r7
    62e6:	bd80      	pop	{r7, pc}
    62e8:	0002050c 	.word	0x0002050c
    62ec:	00020524 	.word	0x00020524
    62f0:	00020e54 	.word	0x00020e54
    62f4:	00020234 	.word	0x00020234

000062f8 <compile_continue_stmt>:

STATIC void compile_continue_stmt(compiler_t *comp, mp_parse_node_struct_t *pns) {
    62f8:	b580      	push	{r7, lr}
    62fa:	b082      	sub	sp, #8
    62fc:	af00      	add	r7, sp, #0
    62fe:	6078      	str	r0, [r7, #4]
    6300:	6039      	str	r1, [r7, #0]
    if (comp->continue_label == INVALID_LABEL) {
    6302:	687b      	ldr	r3, [r7, #4]
    6304:	8b5b      	ldrh	r3, [r3, #26]
    6306:	f64f 72ff 	movw	r2, #65535	; 0xffff
    630a:	4293      	cmp	r3, r2
    630c:	d105      	bne.n	631a <compile_continue_stmt+0x22>
        compile_syntax_error(comp, (mp_parse_node_t)pns, "'continue' outside loop");
    630e:	683b      	ldr	r3, [r7, #0]
    6310:	4a11      	ldr	r2, [pc, #68]	; (6358 <compile_continue_stmt+0x60>)
    6312:	4619      	mov	r1, r3
    6314:	6878      	ldr	r0, [r7, #4]
    6316:	f7fe fddf 	bl	4ed8 <compile_syntax_error>
    }
    assert(comp->cur_except_level >= comp->break_continue_except_level);
    631a:	687b      	ldr	r3, [r7, #4]
    631c:	8b9a      	ldrh	r2, [r3, #28]
    631e:	687b      	ldr	r3, [r7, #4]
    6320:	8bdb      	ldrh	r3, [r3, #30]
    6322:	429a      	cmp	r2, r3
    6324:	d206      	bcs.n	6334 <compile_continue_stmt+0x3c>
    6326:	4b0d      	ldr	r3, [pc, #52]	; (635c <compile_continue_stmt+0x64>)
    6328:	4a0d      	ldr	r2, [pc, #52]	; (6360 <compile_continue_stmt+0x68>)
    632a:	f44f 7170 	mov.w	r1, #960	; 0x3c0
    632e:	480d      	ldr	r0, [pc, #52]	; (6364 <compile_continue_stmt+0x6c>)
    6330:	f015 f9ce 	bl	1b6d0 <__assert_func>
    EMIT_ARG(continue_loop, comp->continue_label, comp->cur_except_level - comp->break_continue_except_level);
    6334:	687b      	ldr	r3, [r7, #4]
    6336:	6a98      	ldr	r0, [r3, #40]	; 0x28
    6338:	687b      	ldr	r3, [r7, #4]
    633a:	8b5b      	ldrh	r3, [r3, #26]
    633c:	4619      	mov	r1, r3
    633e:	687b      	ldr	r3, [r7, #4]
    6340:	8b9b      	ldrh	r3, [r3, #28]
    6342:	461a      	mov	r2, r3
    6344:	687b      	ldr	r3, [r7, #4]
    6346:	8bdb      	ldrh	r3, [r3, #30]
    6348:	1ad3      	subs	r3, r2, r3
    634a:	461a      	mov	r2, r3
    634c:	f004 fb68 	bl	aa20 <mp_emit_bc_unwind_jump>
}
    6350:	bf00      	nop
    6352:	3708      	adds	r7, #8
    6354:	46bd      	mov	sp, r7
    6356:	bd80      	pop	{r7, pc}
    6358:	00020560 	.word	0x00020560
    635c:	00020524 	.word	0x00020524
    6360:	00020e68 	.word	0x00020e68
    6364:	00020234 	.word	0x00020234

00006368 <compile_return_stmt>:

STATIC void compile_return_stmt(compiler_t *comp, mp_parse_node_struct_t *pns) {
    6368:	b580      	push	{r7, lr}
    636a:	b082      	sub	sp, #8
    636c:	af00      	add	r7, sp, #0
    636e:	6078      	str	r0, [r7, #4]
    6370:	6039      	str	r1, [r7, #0]
    if (comp->scope_cur->kind != SCOPE_FUNCTION) {
    6372:	687b      	ldr	r3, [r7, #4]
    6374:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    6376:	681b      	ldr	r3, [r3, #0]
    6378:	2b07      	cmp	r3, #7
    637a:	d006      	beq.n	638a <compile_return_stmt+0x22>
        compile_syntax_error(comp, (mp_parse_node_t)pns, "'return' outside function");
    637c:	683b      	ldr	r3, [r7, #0]
    637e:	4a0f      	ldr	r2, [pc, #60]	; (63bc <compile_return_stmt+0x54>)
    6380:	4619      	mov	r1, r3
    6382:	6878      	ldr	r0, [r7, #4]
    6384:	f7fe fda8 	bl	4ed8 <compile_syntax_error>
        return;
    6388:	e015      	b.n	63b6 <compile_return_stmt+0x4e>
    }
    if (MP_PARSE_NODE_IS_NULL(pns->nodes[0])) {
    638a:	683b      	ldr	r3, [r7, #0]
    638c:	689b      	ldr	r3, [r3, #8]
    638e:	2b00      	cmp	r3, #0
    6390:	d106      	bne.n	63a0 <compile_return_stmt+0x38>
        // no argument to 'return', so return None
        EMIT_ARG(load_const_tok, MP_TOKEN_KW_NONE);
    6392:	687b      	ldr	r3, [r7, #4]
    6394:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6396:	210e      	movs	r1, #14
    6398:	4618      	mov	r0, r3
    639a:	f004 f879 	bl	a490 <mp_emit_bc_load_const_tok>
    639e:	e005      	b.n	63ac <compile_return_stmt+0x44>
        compile_node(comp, pns_test_if_expr->nodes[0]); // success value
        EMIT(return_value);
        EMIT_ARG(label_assign, l_fail);
        compile_node(comp, pns_test_if_else->nodes[1]); // failure value
    } else {
        compile_node(comp, pns->nodes[0]);
    63a0:	683b      	ldr	r3, [r7, #0]
    63a2:	689b      	ldr	r3, [r3, #8]
    63a4:	4619      	mov	r1, r3
    63a6:	6878      	ldr	r0, [r7, #4]
    63a8:	f002 fbf4 	bl	8b94 <compile_node>
    }
    EMIT(return_value);
    63ac:	687b      	ldr	r3, [r7, #4]
    63ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    63b0:	4618      	mov	r0, r3
    63b2:	f004 fe0d 	bl	afd0 <mp_emit_bc_return_value>
}
    63b6:	3708      	adds	r7, #8
    63b8:	46bd      	mov	sp, r7
    63ba:	bd80      	pop	{r7, pc}
    63bc:	00020578 	.word	0x00020578

000063c0 <compile_yield_stmt>:

STATIC void compile_yield_stmt(compiler_t *comp, mp_parse_node_struct_t *pns) {
    63c0:	b580      	push	{r7, lr}
    63c2:	b082      	sub	sp, #8
    63c4:	af00      	add	r7, sp, #0
    63c6:	6078      	str	r0, [r7, #4]
    63c8:	6039      	str	r1, [r7, #0]
    compile_node(comp, pns->nodes[0]);
    63ca:	683b      	ldr	r3, [r7, #0]
    63cc:	689b      	ldr	r3, [r3, #8]
    63ce:	4619      	mov	r1, r3
    63d0:	6878      	ldr	r0, [r7, #4]
    63d2:	f002 fbdf 	bl	8b94 <compile_node>
    EMIT(pop_top);
    63d6:	687b      	ldr	r3, [r7, #4]
    63d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    63da:	4618      	mov	r0, r3
    63dc:	f004 faa0 	bl	a920 <mp_emit_bc_pop_top>
}
    63e0:	bf00      	nop
    63e2:	3708      	adds	r7, #8
    63e4:	46bd      	mov	sp, r7
    63e6:	bd80      	pop	{r7, pc}

000063e8 <compile_raise_stmt>:

STATIC void compile_raise_stmt(compiler_t *comp, mp_parse_node_struct_t *pns) {
    63e8:	b580      	push	{r7, lr}
    63ea:	b082      	sub	sp, #8
    63ec:	af00      	add	r7, sp, #0
    63ee:	6078      	str	r0, [r7, #4]
    63f0:	6039      	str	r1, [r7, #0]
    if (MP_PARSE_NODE_IS_NULL(pns->nodes[0])) {
    63f2:	683b      	ldr	r3, [r7, #0]
    63f4:	689b      	ldr	r3, [r3, #8]
    63f6:	2b00      	cmp	r3, #0
    63f8:	d106      	bne.n	6408 <compile_raise_stmt+0x20>
        // raise
        EMIT_ARG(raise_varargs, 0);
    63fa:	687b      	ldr	r3, [r7, #4]
    63fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    63fe:	2100      	movs	r1, #0
    6400:	4618      	mov	r0, r3
    6402:	f004 fdf9 	bl	aff8 <mp_emit_bc_raise_varargs>
    } else {
        // raise x
        compile_node(comp, pns->nodes[0]);
        EMIT_ARG(raise_varargs, 1);
    }
}
    6406:	e031      	b.n	646c <compile_raise_stmt+0x84>
    } else if (MP_PARSE_NODE_IS_STRUCT_KIND(pns->nodes[0], PN_raise_stmt_arg)) {
    6408:	683b      	ldr	r3, [r7, #0]
    640a:	689b      	ldr	r3, [r3, #8]
    640c:	2b00      	cmp	r3, #0
    640e:	d021      	beq.n	6454 <compile_raise_stmt+0x6c>
    6410:	683b      	ldr	r3, [r7, #0]
    6412:	689b      	ldr	r3, [r3, #8]
    6414:	f003 0303 	and.w	r3, r3, #3
    6418:	2b00      	cmp	r3, #0
    641a:	d11b      	bne.n	6454 <compile_raise_stmt+0x6c>
    641c:	683b      	ldr	r3, [r7, #0]
    641e:	689b      	ldr	r3, [r3, #8]
    6420:	685b      	ldr	r3, [r3, #4]
    6422:	b2db      	uxtb	r3, r3
    6424:	2b58      	cmp	r3, #88	; 0x58
    6426:	d115      	bne.n	6454 <compile_raise_stmt+0x6c>
        pns = (mp_parse_node_struct_t*)pns->nodes[0];
    6428:	683b      	ldr	r3, [r7, #0]
    642a:	689b      	ldr	r3, [r3, #8]
    642c:	603b      	str	r3, [r7, #0]
        compile_node(comp, pns->nodes[0]);
    642e:	683b      	ldr	r3, [r7, #0]
    6430:	689b      	ldr	r3, [r3, #8]
    6432:	4619      	mov	r1, r3
    6434:	6878      	ldr	r0, [r7, #4]
    6436:	f002 fbad 	bl	8b94 <compile_node>
        compile_node(comp, pns->nodes[1]);
    643a:	683b      	ldr	r3, [r7, #0]
    643c:	68db      	ldr	r3, [r3, #12]
    643e:	4619      	mov	r1, r3
    6440:	6878      	ldr	r0, [r7, #4]
    6442:	f002 fba7 	bl	8b94 <compile_node>
        EMIT_ARG(raise_varargs, 2);
    6446:	687b      	ldr	r3, [r7, #4]
    6448:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    644a:	2102      	movs	r1, #2
    644c:	4618      	mov	r0, r3
    644e:	f004 fdd3 	bl	aff8 <mp_emit_bc_raise_varargs>
}
    6452:	e00b      	b.n	646c <compile_raise_stmt+0x84>
        compile_node(comp, pns->nodes[0]);
    6454:	683b      	ldr	r3, [r7, #0]
    6456:	689b      	ldr	r3, [r3, #8]
    6458:	4619      	mov	r1, r3
    645a:	6878      	ldr	r0, [r7, #4]
    645c:	f002 fb9a 	bl	8b94 <compile_node>
        EMIT_ARG(raise_varargs, 1);
    6460:	687b      	ldr	r3, [r7, #4]
    6462:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6464:	2101      	movs	r1, #1
    6466:	4618      	mov	r0, r3
    6468:	f004 fdc6 	bl	aff8 <mp_emit_bc_raise_varargs>
}
    646c:	bf00      	nop
    646e:	3708      	adds	r7, #8
    6470:	46bd      	mov	sp, r7
    6472:	bd80      	pop	{r7, pc}

00006474 <do_import_name>:

// q_base holds the base of the name
// eg   a -> q_base=a
//      a.b.c -> q_base=a
STATIC void do_import_name(compiler_t *comp, mp_parse_node_t pn, qstr *q_base) {
    6474:	b580      	push	{r7, lr}
    6476:	b092      	sub	sp, #72	; 0x48
    6478:	af00      	add	r7, sp, #0
    647a:	60f8      	str	r0, [r7, #12]
    647c:	60b9      	str	r1, [r7, #8]
    647e:	607a      	str	r2, [r7, #4]
    bool is_as = false;
    6480:	2300      	movs	r3, #0
    6482:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if (MP_PARSE_NODE_IS_STRUCT_KIND(pn, PN_dotted_as_name)) {
    6486:	68bb      	ldr	r3, [r7, #8]
    6488:	2b00      	cmp	r3, #0
    648a:	d016      	beq.n	64ba <do_import_name+0x46>
    648c:	68bb      	ldr	r3, [r7, #8]
    648e:	f003 0303 	and.w	r3, r3, #3
    6492:	2b00      	cmp	r3, #0
    6494:	d111      	bne.n	64ba <do_import_name+0x46>
    6496:	68bb      	ldr	r3, [r7, #8]
    6498:	685b      	ldr	r3, [r3, #4]
    649a:	b2db      	uxtb	r3, r3
    649c:	2b62      	cmp	r3, #98	; 0x62
    649e:	d10c      	bne.n	64ba <do_import_name+0x46>
        mp_parse_node_struct_t *pns = (mp_parse_node_struct_t*)pn;
    64a0:	68bb      	ldr	r3, [r7, #8]
    64a2:	62fb      	str	r3, [r7, #44]	; 0x2c
        // a name of the form x as y; unwrap it
        *q_base = MP_PARSE_NODE_LEAF_ARG(pns->nodes[1]);
    64a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    64a6:	68db      	ldr	r3, [r3, #12]
    64a8:	091a      	lsrs	r2, r3, #4
    64aa:	687b      	ldr	r3, [r7, #4]
    64ac:	601a      	str	r2, [r3, #0]
        pn = pns->nodes[0];
    64ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    64b0:	689b      	ldr	r3, [r3, #8]
    64b2:	60bb      	str	r3, [r7, #8]
        is_as = true;
    64b4:	2301      	movs	r3, #1
    64b6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    if (MP_PARSE_NODE_IS_NULL(pn)) {
    64ba:	68bb      	ldr	r3, [r7, #8]
    64bc:	2b00      	cmp	r3, #0
    64be:	d109      	bne.n	64d4 <do_import_name+0x60>
        // empty name (eg, from . import x)
        *q_base = MP_QSTR_;
    64c0:	687b      	ldr	r3, [r7, #4]
    64c2:	2201      	movs	r2, #1
    64c4:	601a      	str	r2, [r3, #0]
        EMIT_ARG(import_name, MP_QSTR_); // import the empty string
    64c6:	68fb      	ldr	r3, [r7, #12]
    64c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    64ca:	2101      	movs	r1, #1
    64cc:	4618      	mov	r0, r3
    64ce:	f003 ffa7 	bl	a420 <mp_emit_bc_import_name>
                    EMIT_ARG(load_attr, MP_PARSE_NODE_LEAF_ARG(pns->nodes[i]));
                }
            }
        }
    }
}
    64d2:	e0b7      	b.n	6644 <do_import_name+0x1d0>
    } else if (MP_PARSE_NODE_IS_ID(pn)) {
    64d4:	68bb      	ldr	r3, [r7, #8]
    64d6:	f003 030f 	and.w	r3, r3, #15
    64da:	2b02      	cmp	r3, #2
    64dc:	d113      	bne.n	6506 <do_import_name+0x92>
        qstr q_full = MP_PARSE_NODE_LEAF_ARG(pn);
    64de:	68bb      	ldr	r3, [r7, #8]
    64e0:	091b      	lsrs	r3, r3, #4
    64e2:	62bb      	str	r3, [r7, #40]	; 0x28
        if (!is_as) {
    64e4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
    64e8:	f083 0301 	eor.w	r3, r3, #1
    64ec:	b2db      	uxtb	r3, r3
    64ee:	2b00      	cmp	r3, #0
    64f0:	d002      	beq.n	64f8 <do_import_name+0x84>
            *q_base = q_full;
    64f2:	687b      	ldr	r3, [r7, #4]
    64f4:	6aba      	ldr	r2, [r7, #40]	; 0x28
    64f6:	601a      	str	r2, [r3, #0]
        EMIT_ARG(import_name, q_full);
    64f8:	68fb      	ldr	r3, [r7, #12]
    64fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    64fc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
    64fe:	4618      	mov	r0, r3
    6500:	f003 ff8e 	bl	a420 <mp_emit_bc_import_name>
}
    6504:	e09e      	b.n	6644 <do_import_name+0x1d0>
        assert(MP_PARSE_NODE_IS_STRUCT_KIND(pn, PN_dotted_name)); // should be
    6506:	68bb      	ldr	r3, [r7, #8]
    6508:	2b00      	cmp	r3, #0
    650a:	d009      	beq.n	6520 <do_import_name+0xac>
    650c:	68bb      	ldr	r3, [r7, #8]
    650e:	f003 0303 	and.w	r3, r3, #3
    6512:	2b00      	cmp	r3, #0
    6514:	d104      	bne.n	6520 <do_import_name+0xac>
    6516:	68bb      	ldr	r3, [r7, #8]
    6518:	685b      	ldr	r3, [r3, #4]
    651a:	b2db      	uxtb	r3, r3
    651c:	2b66      	cmp	r3, #102	; 0x66
    651e:	d006      	beq.n	652e <do_import_name+0xba>
    6520:	4b4a      	ldr	r3, [pc, #296]	; (664c <do_import_name+0x1d8>)
    6522:	4a4b      	ldr	r2, [pc, #300]	; (6650 <do_import_name+0x1dc>)
    6524:	f240 410c 	movw	r1, #1036	; 0x40c
    6528:	484a      	ldr	r0, [pc, #296]	; (6654 <do_import_name+0x1e0>)
    652a:	f015 f8d1 	bl	1b6d0 <__assert_func>
        mp_parse_node_struct_t *pns = (mp_parse_node_struct_t*)pn;
    652e:	68bb      	ldr	r3, [r7, #8]
    6530:	627b      	str	r3, [r7, #36]	; 0x24
            if (!is_as) {
    6532:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
    6536:	f083 0301 	eor.w	r3, r3, #1
    653a:	b2db      	uxtb	r3, r3
    653c:	2b00      	cmp	r3, #0
    653e:	d004      	beq.n	654a <do_import_name+0xd6>
                *q_base = MP_PARSE_NODE_LEAF_ARG(pns->nodes[0]);
    6540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    6542:	689b      	ldr	r3, [r3, #8]
    6544:	091a      	lsrs	r2, r3, #4
    6546:	687b      	ldr	r3, [r7, #4]
    6548:	601a      	str	r2, [r3, #0]
            int n = MP_PARSE_NODE_STRUCT_NUM_NODES(pns);
    654a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    654c:	685b      	ldr	r3, [r3, #4]
    654e:	0a1b      	lsrs	r3, r3, #8
    6550:	623b      	str	r3, [r7, #32]
            int len = n - 1;
    6552:	6a3b      	ldr	r3, [r7, #32]
    6554:	3b01      	subs	r3, #1
    6556:	643b      	str	r3, [r7, #64]	; 0x40
            for (int i = 0; i < n; i++) {
    6558:	2300      	movs	r3, #0
    655a:	63fb      	str	r3, [r7, #60]	; 0x3c
    655c:	e00f      	b.n	657e <do_import_name+0x10a>
                len += qstr_len(MP_PARSE_NODE_LEAF_ARG(pns->nodes[i]));
    655e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    6560:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    6562:	3202      	adds	r2, #2
    6564:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    6568:	091b      	lsrs	r3, r3, #4
    656a:	4618      	mov	r0, r3
    656c:	f7fa feee 	bl	134c <qstr_len>
    6570:	4602      	mov	r2, r0
    6572:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    6574:	4413      	add	r3, r2
    6576:	643b      	str	r3, [r7, #64]	; 0x40
            for (int i = 0; i < n; i++) {
    6578:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    657a:	3301      	adds	r3, #1
    657c:	63fb      	str	r3, [r7, #60]	; 0x3c
    657e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    6580:	6a3b      	ldr	r3, [r7, #32]
    6582:	429a      	cmp	r2, r3
    6584:	dbeb      	blt.n	655e <do_import_name+0xea>
            char *q_ptr = mp_local_alloc(len);
    6586:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    6588:	3307      	adds	r3, #7
    658a:	3307      	adds	r3, #7
    658c:	08db      	lsrs	r3, r3, #3
    658e:	00db      	lsls	r3, r3, #3
    6590:	ebad 0d03 	sub.w	sp, sp, r3
    6594:	466b      	mov	r3, sp
    6596:	3307      	adds	r3, #7
    6598:	08db      	lsrs	r3, r3, #3
    659a:	00db      	lsls	r3, r3, #3
    659c:	61fb      	str	r3, [r7, #28]
            char *str_dest = q_ptr;
    659e:	69fb      	ldr	r3, [r7, #28]
    65a0:	63bb      	str	r3, [r7, #56]	; 0x38
            for (int i = 0; i < n; i++) {
    65a2:	2300      	movs	r3, #0
    65a4:	637b      	str	r3, [r7, #52]	; 0x34
    65a6:	e021      	b.n	65ec <do_import_name+0x178>
                if (i > 0) {
    65a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    65aa:	2b00      	cmp	r3, #0
    65ac:	dd04      	ble.n	65b8 <do_import_name+0x144>
                    *str_dest++ = '.';
    65ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    65b0:	1c5a      	adds	r2, r3, #1
    65b2:	63ba      	str	r2, [r7, #56]	; 0x38
    65b4:	222e      	movs	r2, #46	; 0x2e
    65b6:	701a      	strb	r2, [r3, #0]
                const byte *str_src = qstr_data(MP_PARSE_NODE_LEAF_ARG(pns->nodes[i]), &str_src_len);
    65b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    65ba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    65bc:	3202      	adds	r2, #2
    65be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    65c2:	091b      	lsrs	r3, r3, #4
    65c4:	f107 0210 	add.w	r2, r7, #16
    65c8:	4611      	mov	r1, r2
    65ca:	4618      	mov	r0, r3
    65cc:	f7fa fedc 	bl	1388 <qstr_data>
    65d0:	61b8      	str	r0, [r7, #24]
                memcpy(str_dest, str_src, str_src_len);
    65d2:	693b      	ldr	r3, [r7, #16]
    65d4:	461a      	mov	r2, r3
    65d6:	69b9      	ldr	r1, [r7, #24]
    65d8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
    65da:	f016 fb4d 	bl	1cc78 <memcpy>
                str_dest += str_src_len;
    65de:	693b      	ldr	r3, [r7, #16]
    65e0:	6bba      	ldr	r2, [r7, #56]	; 0x38
    65e2:	4413      	add	r3, r2
    65e4:	63bb      	str	r3, [r7, #56]	; 0x38
            for (int i = 0; i < n; i++) {
    65e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    65e8:	3301      	adds	r3, #1
    65ea:	637b      	str	r3, [r7, #52]	; 0x34
    65ec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    65ee:	6a3b      	ldr	r3, [r7, #32]
    65f0:	429a      	cmp	r2, r3
    65f2:	dbd9      	blt.n	65a8 <do_import_name+0x134>
            qstr q_full = qstr_from_strn(q_ptr, len);
    65f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    65f6:	4619      	mov	r1, r3
    65f8:	69f8      	ldr	r0, [r7, #28]
    65fa:	f7fa fddb 	bl	11b4 <qstr_from_strn>
    65fe:	6178      	str	r0, [r7, #20]
            mp_local_free(q_ptr);
    6600:	69f8      	ldr	r0, [r7, #28]
    6602:	f7fe fc43 	bl	4e8c <mp_local_free>
            EMIT_ARG(import_name, q_full);
    6606:	68fb      	ldr	r3, [r7, #12]
    6608:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    660a:	6979      	ldr	r1, [r7, #20]
    660c:	4618      	mov	r0, r3
    660e:	f003 ff07 	bl	a420 <mp_emit_bc_import_name>
            if (is_as) {
    6612:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
    6616:	2b00      	cmp	r3, #0
    6618:	d014      	beq.n	6644 <do_import_name+0x1d0>
                for (int i = 1; i < n; i++) {
    661a:	2301      	movs	r3, #1
    661c:	633b      	str	r3, [r7, #48]	; 0x30
    661e:	e00d      	b.n	663c <do_import_name+0x1c8>
                    EMIT_ARG(load_attr, MP_PARSE_NODE_LEAF_ARG(pns->nodes[i]));
    6620:	68fb      	ldr	r3, [r7, #12]
    6622:	6a98      	ldr	r0, [r3, #40]	; 0x28
    6624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    6626:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    6628:	3202      	adds	r2, #2
    662a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    662e:	091b      	lsrs	r3, r3, #4
    6630:	4619      	mov	r1, r3
    6632:	f004 f817 	bl	a664 <mp_emit_bc_load_attr>
                for (int i = 1; i < n; i++) {
    6636:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    6638:	3301      	adds	r3, #1
    663a:	633b      	str	r3, [r7, #48]	; 0x30
    663c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    663e:	6a3b      	ldr	r3, [r7, #32]
    6640:	429a      	cmp	r2, r3
    6642:	dbed      	blt.n	6620 <do_import_name+0x1ac>
}
    6644:	bf00      	nop
    6646:	3748      	adds	r7, #72	; 0x48
    6648:	46bd      	mov	sp, r7
    664a:	bd80      	pop	{r7, pc}
    664c:	00020594 	.word	0x00020594
    6650:	00020e80 	.word	0x00020e80
    6654:	00020234 	.word	0x00020234

00006658 <compile_dotted_as_name>:

STATIC void compile_dotted_as_name(compiler_t *comp, mp_parse_node_t pn) {
    6658:	b580      	push	{r7, lr}
    665a:	b084      	sub	sp, #16
    665c:	af00      	add	r7, sp, #0
    665e:	6078      	str	r0, [r7, #4]
    6660:	6039      	str	r1, [r7, #0]
    EMIT_ARG(load_const_small_int, 0); // level 0 import
    6662:	687b      	ldr	r3, [r7, #4]
    6664:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6666:	2100      	movs	r1, #0
    6668:	4618      	mov	r0, r3
    666a:	f003 ff4d 	bl	a508 <mp_emit_bc_load_const_small_int>
    EMIT_ARG(load_const_tok, MP_TOKEN_KW_NONE); // not importing from anything
    666e:	687b      	ldr	r3, [r7, #4]
    6670:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6672:	210e      	movs	r1, #14
    6674:	4618      	mov	r0, r3
    6676:	f003 ff0b 	bl	a490 <mp_emit_bc_load_const_tok>
    qstr q_base;
    do_import_name(comp, pn, &q_base);
    667a:	f107 030c 	add.w	r3, r7, #12
    667e:	461a      	mov	r2, r3
    6680:	6839      	ldr	r1, [r7, #0]
    6682:	6878      	ldr	r0, [r7, #4]
    6684:	f7ff fef6 	bl	6474 <do_import_name>
    compile_store_id(comp, q_base);
    6688:	68fb      	ldr	r3, [r7, #12]
    668a:	4619      	mov	r1, r3
    668c:	6878      	ldr	r0, [r7, #4]
    668e:	f7fe fd43 	bl	5118 <compile_store_id>
}
    6692:	bf00      	nop
    6694:	3710      	adds	r7, #16
    6696:	46bd      	mov	sp, r7
    6698:	bd80      	pop	{r7, pc}
    669a:	bf00      	nop

0000669c <compile_import_name>:

STATIC void compile_import_name(compiler_t *comp, mp_parse_node_struct_t *pns) {
    669c:	b580      	push	{r7, lr}
    669e:	b082      	sub	sp, #8
    66a0:	af00      	add	r7, sp, #0
    66a2:	6078      	str	r0, [r7, #4]
    66a4:	6039      	str	r1, [r7, #0]
    apply_to_single_or_list(comp, pns->nodes[0], PN_dotted_as_names, compile_dotted_as_name);
    66a6:	683b      	ldr	r3, [r7, #0]
    66a8:	6899      	ldr	r1, [r3, #8]
    66aa:	4b04      	ldr	r3, [pc, #16]	; (66bc <compile_import_name+0x20>)
    66ac:	2265      	movs	r2, #101	; 0x65
    66ae:	6878      	ldr	r0, [r7, #4]
    66b0:	f7fe fcaa 	bl	5008 <apply_to_single_or_list>
}
    66b4:	bf00      	nop
    66b6:	3708      	adds	r7, #8
    66b8:	46bd      	mov	sp, r7
    66ba:	bd80      	pop	{r7, pc}
    66bc:	00006659 	.word	0x00006659

000066c0 <compile_import_from>:

STATIC void compile_import_from(compiler_t *comp, mp_parse_node_struct_t *pns) {
    66c0:	b580      	push	{r7, lr}
    66c2:	b094      	sub	sp, #80	; 0x50
    66c4:	af00      	add	r7, sp, #0
    66c6:	6078      	str	r0, [r7, #4]
    66c8:	6039      	str	r1, [r7, #0]
    mp_parse_node_t pn_import_source = pns->nodes[0];
    66ca:	683b      	ldr	r3, [r7, #0]
    66cc:	689b      	ldr	r3, [r3, #8]
    66ce:	64fb      	str	r3, [r7, #76]	; 0x4c

    // extract the preceding .'s (if any) for a relative import, to compute the import level
    uint import_level = 0;
    66d0:	2300      	movs	r3, #0
    66d2:	64bb      	str	r3, [r7, #72]	; 0x48
    do {
        mp_parse_node_t pn_rel;
        if (MP_PARSE_NODE_IS_TOKEN(pn_import_source) || MP_PARSE_NODE_IS_STRUCT_KIND(pn_import_source, PN_one_or_more_period_or_ellipsis)) {
    66d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    66d6:	f003 030f 	and.w	r3, r3, #15
    66da:	2b0e      	cmp	r3, #14
    66dc:	d00c      	beq.n	66f8 <compile_import_from+0x38>
    66de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    66e0:	2b00      	cmp	r3, #0
    66e2:	d00e      	beq.n	6702 <compile_import_from+0x42>
    66e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    66e6:	f003 0303 	and.w	r3, r3, #3
    66ea:	2b00      	cmp	r3, #0
    66ec:	d109      	bne.n	6702 <compile_import_from+0x42>
    66ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    66f0:	685b      	ldr	r3, [r3, #4]
    66f2:	b2db      	uxtb	r3, r3
    66f4:	2b5f      	cmp	r3, #95	; 0x5f
    66f6:	d104      	bne.n	6702 <compile_import_from+0x42>
            // This covers relative imports with dots only like "from .. import"
            pn_rel = pn_import_source;
    66f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    66fa:	61fb      	str	r3, [r7, #28]
            pn_import_source = MP_PARSE_NODE_NULL;
    66fc:	2300      	movs	r3, #0
    66fe:	64fb      	str	r3, [r7, #76]	; 0x4c
    6700:	e01e      	b.n	6740 <compile_import_from+0x80>
        } else if (MP_PARSE_NODE_IS_STRUCT_KIND(pn_import_source, PN_import_from_2b)) {
    6702:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    6704:	2b00      	cmp	r3, #0
    6706:	d03e      	beq.n	6786 <compile_import_from+0xc6>
    6708:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    670a:	f003 0303 	and.w	r3, r3, #3
    670e:	2b00      	cmp	r3, #0
    6710:	d139      	bne.n	6786 <compile_import_from+0xc6>
    6712:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    6714:	685b      	ldr	r3, [r3, #4]
    6716:	b2db      	uxtb	r3, r3
    6718:	2b5c      	cmp	r3, #92	; 0x5c
    671a:	d134      	bne.n	6786 <compile_import_from+0xc6>
            // This covers relative imports starting with dot(s) like "from .foo import"
            mp_parse_node_struct_t *pns_2b = (mp_parse_node_struct_t*)pn_import_source;
    671c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    671e:	63bb      	str	r3, [r7, #56]	; 0x38
            pn_rel = pns_2b->nodes[0];
    6720:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    6722:	689b      	ldr	r3, [r3, #8]
    6724:	61fb      	str	r3, [r7, #28]
            pn_import_source = pns_2b->nodes[1];
    6726:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    6728:	68db      	ldr	r3, [r3, #12]
    672a:	64fb      	str	r3, [r7, #76]	; 0x4c
            assert(!MP_PARSE_NODE_IS_NULL(pn_import_source)); // should not be
    672c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    672e:	2b00      	cmp	r3, #0
    6730:	d106      	bne.n	6740 <compile_import_from+0x80>
    6732:	4b7d      	ldr	r3, [pc, #500]	; (6928 <compile_import_from+0x268>)
    6734:	4a7d      	ldr	r2, [pc, #500]	; (692c <compile_import_from+0x26c>)
    6736:	f240 414b 	movw	r1, #1099	; 0x44b
    673a:	487d      	ldr	r0, [pc, #500]	; (6930 <compile_import_from+0x270>)
    673c:	f014 ffc8 	bl	1b6d0 <__assert_func>
            break;
        }

        // get the list of . and/or ...'s
        mp_parse_node_t *nodes;
        int n = mp_parse_node_extract_list(&pn_rel, PN_one_or_more_period_or_ellipsis, &nodes);
    6740:	f107 0218 	add.w	r2, r7, #24
    6744:	f107 031c 	add.w	r3, r7, #28
    6748:	215f      	movs	r1, #95	; 0x5f
    674a:	4618      	mov	r0, r3
    674c:	f7fd faca 	bl	3ce4 <mp_parse_node_extract_list>
    6750:	6378      	str	r0, [r7, #52]	; 0x34

        // count the total number of .'s
        for (int i = 0; i < n; i++) {
    6752:	2300      	movs	r3, #0
    6754:	647b      	str	r3, [r7, #68]	; 0x44
    6756:	e012      	b.n	677e <compile_import_from+0xbe>
            if (MP_PARSE_NODE_IS_TOKEN_KIND(nodes[i], MP_TOKEN_DEL_PERIOD)) {
    6758:	69ba      	ldr	r2, [r7, #24]
    675a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    675c:	009b      	lsls	r3, r3, #2
    675e:	4413      	add	r3, r2
    6760:	681b      	ldr	r3, [r3, #0]
    6762:	f240 42ae 	movw	r2, #1198	; 0x4ae
    6766:	4293      	cmp	r3, r2
    6768:	d103      	bne.n	6772 <compile_import_from+0xb2>
                import_level++;
    676a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    676c:	3301      	adds	r3, #1
    676e:	64bb      	str	r3, [r7, #72]	; 0x48
    6770:	e002      	b.n	6778 <compile_import_from+0xb8>
            } else {
                // should be an MP_TOKEN_ELLIPSIS
                import_level += 3;
    6772:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    6774:	3303      	adds	r3, #3
    6776:	64bb      	str	r3, [r7, #72]	; 0x48
        for (int i = 0; i < n; i++) {
    6778:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    677a:	3301      	adds	r3, #1
    677c:	647b      	str	r3, [r7, #68]	; 0x44
    677e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    6780:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    6782:	429a      	cmp	r2, r3
    6784:	dbe8      	blt.n	6758 <compile_import_from+0x98>
            }
        }
    } while (0);

    if (MP_PARSE_NODE_IS_TOKEN_KIND(pns->nodes[1], MP_TOKEN_OP_STAR)) {
    6786:	683b      	ldr	r3, [r7, #0]
    6788:	68db      	ldr	r3, [r3, #12]
    678a:	f240 321e 	movw	r2, #798	; 0x31e
    678e:	4293      	cmp	r3, r2
    6790:	d11f      	bne.n	67d2 <compile_import_from+0x112>
        EMIT_ARG(load_const_small_int, import_level);
    6792:	687b      	ldr	r3, [r7, #4]
    6794:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6796:	6cba      	ldr	r2, [r7, #72]	; 0x48
    6798:	4611      	mov	r1, r2
    679a:	4618      	mov	r0, r3
    679c:	f003 feb4 	bl	a508 <mp_emit_bc_load_const_small_int>

        // build the "fromlist" tuple
        EMIT_ARG(load_const_str, MP_QSTR__star_);
    67a0:	687b      	ldr	r3, [r7, #4]
    67a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    67a4:	2127      	movs	r1, #39	; 0x27
    67a6:	4618      	mov	r0, r3
    67a8:	f003 fed0 	bl	a54c <mp_emit_bc_load_const_str>
        EMIT_ARG(build_tuple, 1);
    67ac:	687b      	ldr	r3, [r7, #4]
    67ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    67b0:	2101      	movs	r1, #1
    67b2:	4618      	mov	r0, r3
    67b4:	f004 fa8c 	bl	acd0 <mp_emit_bc_build_tuple>

        // do the import
        qstr dummy_q;
        do_import_name(comp, pn_import_source, &dummy_q);
    67b8:	f107 0314 	add.w	r3, r7, #20
    67bc:	461a      	mov	r2, r3
    67be:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
    67c0:	6878      	ldr	r0, [r7, #4]
    67c2:	f7ff fe57 	bl	6474 <do_import_name>
        EMIT(import_star);
    67c6:	687b      	ldr	r3, [r7, #4]
    67c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    67ca:	4618      	mov	r0, r3
    67cc:	f003 fe4e 	bl	a46c <mp_emit_bc_import_star>
                compile_store_id(comp, MP_PARSE_NODE_LEAF_ARG(pns3->nodes[1]));
            }
        }
        EMIT(pop_top);
    }
}
    67d0:	e0a6      	b.n	6920 <compile_import_from+0x260>
        EMIT_ARG(load_const_small_int, import_level);
    67d2:	687b      	ldr	r3, [r7, #4]
    67d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    67d6:	6cba      	ldr	r2, [r7, #72]	; 0x48
    67d8:	4611      	mov	r1, r2
    67da:	4618      	mov	r0, r3
    67dc:	f003 fe94 	bl	a508 <mp_emit_bc_load_const_small_int>
        int n = mp_parse_node_extract_list(&pns->nodes[1], PN_import_as_names, &pn_nodes);
    67e0:	683b      	ldr	r3, [r7, #0]
    67e2:	330c      	adds	r3, #12
    67e4:	f107 0210 	add.w	r2, r7, #16
    67e8:	2164      	movs	r1, #100	; 0x64
    67ea:	4618      	mov	r0, r3
    67ec:	f7fd fa7a 	bl	3ce4 <mp_parse_node_extract_list>
    67f0:	6338      	str	r0, [r7, #48]	; 0x30
        for (int i = 0; i < n; i++) {
    67f2:	2300      	movs	r3, #0
    67f4:	643b      	str	r3, [r7, #64]	; 0x40
    67f6:	e032      	b.n	685e <compile_import_from+0x19e>
            assert(MP_PARSE_NODE_IS_STRUCT_KIND(pn_nodes[i], PN_import_as_name));
    67f8:	693a      	ldr	r2, [r7, #16]
    67fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    67fc:	009b      	lsls	r3, r3, #2
    67fe:	4413      	add	r3, r2
    6800:	681b      	ldr	r3, [r3, #0]
    6802:	2b00      	cmp	r3, #0
    6804:	d011      	beq.n	682a <compile_import_from+0x16a>
    6806:	693a      	ldr	r2, [r7, #16]
    6808:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    680a:	009b      	lsls	r3, r3, #2
    680c:	4413      	add	r3, r2
    680e:	681b      	ldr	r3, [r3, #0]
    6810:	f003 0303 	and.w	r3, r3, #3
    6814:	2b00      	cmp	r3, #0
    6816:	d108      	bne.n	682a <compile_import_from+0x16a>
    6818:	693a      	ldr	r2, [r7, #16]
    681a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    681c:	009b      	lsls	r3, r3, #2
    681e:	4413      	add	r3, r2
    6820:	681b      	ldr	r3, [r3, #0]
    6822:	685b      	ldr	r3, [r3, #4]
    6824:	b2db      	uxtb	r3, r3
    6826:	2b61      	cmp	r3, #97	; 0x61
    6828:	d006      	beq.n	6838 <compile_import_from+0x178>
    682a:	4b42      	ldr	r3, [pc, #264]	; (6934 <compile_import_from+0x274>)
    682c:	4a3f      	ldr	r2, [pc, #252]	; (692c <compile_import_from+0x26c>)
    682e:	f240 4173 	movw	r1, #1139	; 0x473
    6832:	483f      	ldr	r0, [pc, #252]	; (6930 <compile_import_from+0x270>)
    6834:	f014 ff4c 	bl	1b6d0 <__assert_func>
            mp_parse_node_struct_t *pns3 = (mp_parse_node_struct_t*)pn_nodes[i];
    6838:	693a      	ldr	r2, [r7, #16]
    683a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    683c:	009b      	lsls	r3, r3, #2
    683e:	4413      	add	r3, r2
    6840:	681b      	ldr	r3, [r3, #0]
    6842:	62fb      	str	r3, [r7, #44]	; 0x2c
            qstr id2 = MP_PARSE_NODE_LEAF_ARG(pns3->nodes[0]); // should be id
    6844:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    6846:	689b      	ldr	r3, [r3, #8]
    6848:	091b      	lsrs	r3, r3, #4
    684a:	62bb      	str	r3, [r7, #40]	; 0x28
            EMIT_ARG(load_const_str, id2);
    684c:	687b      	ldr	r3, [r7, #4]
    684e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6850:	6ab9      	ldr	r1, [r7, #40]	; 0x28
    6852:	4618      	mov	r0, r3
    6854:	f003 fe7a 	bl	a54c <mp_emit_bc_load_const_str>
        for (int i = 0; i < n; i++) {
    6858:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    685a:	3301      	adds	r3, #1
    685c:	643b      	str	r3, [r7, #64]	; 0x40
    685e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    6860:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    6862:	429a      	cmp	r2, r3
    6864:	dbc8      	blt.n	67f8 <compile_import_from+0x138>
        EMIT_ARG(build_tuple, n);
    6866:	687b      	ldr	r3, [r7, #4]
    6868:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    686a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    686c:	4611      	mov	r1, r2
    686e:	4618      	mov	r0, r3
    6870:	f004 fa2e 	bl	acd0 <mp_emit_bc_build_tuple>
        do_import_name(comp, pn_import_source, &dummy_q);
    6874:	f107 030c 	add.w	r3, r7, #12
    6878:	461a      	mov	r2, r3
    687a:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
    687c:	6878      	ldr	r0, [r7, #4]
    687e:	f7ff fdf9 	bl	6474 <do_import_name>
        for (int i = 0; i < n; i++) {
    6882:	2300      	movs	r3, #0
    6884:	63fb      	str	r3, [r7, #60]	; 0x3c
    6886:	e042      	b.n	690e <compile_import_from+0x24e>
            assert(MP_PARSE_NODE_IS_STRUCT_KIND(pn_nodes[i], PN_import_as_name));
    6888:	693a      	ldr	r2, [r7, #16]
    688a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    688c:	009b      	lsls	r3, r3, #2
    688e:	4413      	add	r3, r2
    6890:	681b      	ldr	r3, [r3, #0]
    6892:	2b00      	cmp	r3, #0
    6894:	d011      	beq.n	68ba <compile_import_from+0x1fa>
    6896:	693a      	ldr	r2, [r7, #16]
    6898:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    689a:	009b      	lsls	r3, r3, #2
    689c:	4413      	add	r3, r2
    689e:	681b      	ldr	r3, [r3, #0]
    68a0:	f003 0303 	and.w	r3, r3, #3
    68a4:	2b00      	cmp	r3, #0
    68a6:	d108      	bne.n	68ba <compile_import_from+0x1fa>
    68a8:	693a      	ldr	r2, [r7, #16]
    68aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    68ac:	009b      	lsls	r3, r3, #2
    68ae:	4413      	add	r3, r2
    68b0:	681b      	ldr	r3, [r3, #0]
    68b2:	685b      	ldr	r3, [r3, #4]
    68b4:	b2db      	uxtb	r3, r3
    68b6:	2b61      	cmp	r3, #97	; 0x61
    68b8:	d006      	beq.n	68c8 <compile_import_from+0x208>
    68ba:	4b1e      	ldr	r3, [pc, #120]	; (6934 <compile_import_from+0x274>)
    68bc:	4a1b      	ldr	r2, [pc, #108]	; (692c <compile_import_from+0x26c>)
    68be:	f240 417e 	movw	r1, #1150	; 0x47e
    68c2:	481b      	ldr	r0, [pc, #108]	; (6930 <compile_import_from+0x270>)
    68c4:	f014 ff04 	bl	1b6d0 <__assert_func>
            mp_parse_node_struct_t *pns3 = (mp_parse_node_struct_t*)pn_nodes[i];
    68c8:	693a      	ldr	r2, [r7, #16]
    68ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    68cc:	009b      	lsls	r3, r3, #2
    68ce:	4413      	add	r3, r2
    68d0:	681b      	ldr	r3, [r3, #0]
    68d2:	627b      	str	r3, [r7, #36]	; 0x24
            qstr id2 = MP_PARSE_NODE_LEAF_ARG(pns3->nodes[0]); // should be id
    68d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    68d6:	689b      	ldr	r3, [r3, #8]
    68d8:	091b      	lsrs	r3, r3, #4
    68da:	623b      	str	r3, [r7, #32]
            EMIT_ARG(import_from, id2);
    68dc:	687b      	ldr	r3, [r7, #4]
    68de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    68e0:	6a39      	ldr	r1, [r7, #32]
    68e2:	4618      	mov	r0, r3
    68e4:	f003 fdb0 	bl	a448 <mp_emit_bc_import_from>
            if (MP_PARSE_NODE_IS_NULL(pns3->nodes[1])) {
    68e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    68ea:	68db      	ldr	r3, [r3, #12]
    68ec:	2b00      	cmp	r3, #0
    68ee:	d104      	bne.n	68fa <compile_import_from+0x23a>
                compile_store_id(comp, id2);
    68f0:	6a39      	ldr	r1, [r7, #32]
    68f2:	6878      	ldr	r0, [r7, #4]
    68f4:	f7fe fc10 	bl	5118 <compile_store_id>
    68f8:	e006      	b.n	6908 <compile_import_from+0x248>
                compile_store_id(comp, MP_PARSE_NODE_LEAF_ARG(pns3->nodes[1]));
    68fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    68fc:	68db      	ldr	r3, [r3, #12]
    68fe:	091b      	lsrs	r3, r3, #4
    6900:	4619      	mov	r1, r3
    6902:	6878      	ldr	r0, [r7, #4]
    6904:	f7fe fc08 	bl	5118 <compile_store_id>
        for (int i = 0; i < n; i++) {
    6908:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    690a:	3301      	adds	r3, #1
    690c:	63fb      	str	r3, [r7, #60]	; 0x3c
    690e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    6910:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    6912:	429a      	cmp	r2, r3
    6914:	dbb8      	blt.n	6888 <compile_import_from+0x1c8>
        EMIT(pop_top);
    6916:	687b      	ldr	r3, [r7, #4]
    6918:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    691a:	4618      	mov	r0, r3
    691c:	f004 f800 	bl	a920 <mp_emit_bc_pop_top>
}
    6920:	bf00      	nop
    6922:	3750      	adds	r7, #80	; 0x50
    6924:	46bd      	mov	sp, r7
    6926:	bd80      	pop	{r7, pc}
    6928:	000205c8 	.word	0x000205c8
    692c:	00020e90 	.word	0x00020e90
    6930:	00020234 	.word	0x00020234
    6934:	000205f4 	.word	0x000205f4

00006938 <compile_declare_global>:

STATIC void compile_declare_global(compiler_t *comp, mp_parse_node_t pn, qstr qst) {
    6938:	b580      	push	{r7, lr}
    693a:	b086      	sub	sp, #24
    693c:	af00      	add	r7, sp, #0
    693e:	60f8      	str	r0, [r7, #12]
    6940:	60b9      	str	r1, [r7, #8]
    6942:	607a      	str	r2, [r7, #4]
    bool added;
    id_info_t *id_info = scope_find_or_add_id(comp->scope_cur, qst, &added);
    6944:	68fb      	ldr	r3, [r7, #12]
    6946:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    6948:	f107 0213 	add.w	r2, r7, #19
    694c:	6879      	ldr	r1, [r7, #4]
    694e:	4618      	mov	r0, r3
    6950:	f7fe f978 	bl	4c44 <scope_find_or_add_id>
    6954:	6178      	str	r0, [r7, #20]
    if (!added && id_info->kind != ID_INFO_KIND_GLOBAL_EXPLICIT) {
    6956:	7cfb      	ldrb	r3, [r7, #19]
    6958:	f083 0301 	eor.w	r3, r3, #1
    695c:	b2db      	uxtb	r3, r3
    695e:	2b00      	cmp	r3, #0
    6960:	d009      	beq.n	6976 <compile_declare_global+0x3e>
    6962:	697b      	ldr	r3, [r7, #20]
    6964:	781b      	ldrb	r3, [r3, #0]
    6966:	2b01      	cmp	r3, #1
    6968:	d005      	beq.n	6976 <compile_declare_global+0x3e>
        compile_syntax_error(comp, pn, "identifier redefined as global");
    696a:	4a0c      	ldr	r2, [pc, #48]	; (699c <compile_declare_global+0x64>)
    696c:	68b9      	ldr	r1, [r7, #8]
    696e:	68f8      	ldr	r0, [r7, #12]
    6970:	f7fe fab2 	bl	4ed8 <compile_syntax_error>
    6974:	e00f      	b.n	6996 <compile_declare_global+0x5e>
        return;
    }
    id_info->kind = ID_INFO_KIND_GLOBAL_EXPLICIT;
    6976:	697b      	ldr	r3, [r7, #20]
    6978:	2201      	movs	r2, #1
    697a:	701a      	strb	r2, [r3, #0]

    // if the id exists in the global scope, set its kind to EXPLICIT_GLOBAL
    id_info = scope_find_global(comp->scope_cur, qst);
    697c:	68fb      	ldr	r3, [r7, #12]
    697e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    6980:	6879      	ldr	r1, [r7, #4]
    6982:	4618      	mov	r0, r3
    6984:	f7fe f9d2 	bl	4d2c <scope_find_global>
    6988:	6178      	str	r0, [r7, #20]
    if (id_info != NULL) {
    698a:	697b      	ldr	r3, [r7, #20]
    698c:	2b00      	cmp	r3, #0
    698e:	d002      	beq.n	6996 <compile_declare_global+0x5e>
        id_info->kind = ID_INFO_KIND_GLOBAL_EXPLICIT;
    6990:	697b      	ldr	r3, [r7, #20]
    6992:	2201      	movs	r2, #1
    6994:	701a      	strb	r2, [r3, #0]
    }
}
    6996:	3718      	adds	r7, #24
    6998:	46bd      	mov	sp, r7
    699a:	bd80      	pop	{r7, pc}
    699c:	00020634 	.word	0x00020634

000069a0 <compile_global_stmt>:

STATIC void compile_global_stmt(compiler_t *comp, mp_parse_node_struct_t *pns) {
    69a0:	b580      	push	{r7, lr}
    69a2:	b086      	sub	sp, #24
    69a4:	af00      	add	r7, sp, #0
    69a6:	6078      	str	r0, [r7, #4]
    69a8:	6039      	str	r1, [r7, #0]
    if (comp->pass == MP_PASS_SCOPE) {
    69aa:	687b      	ldr	r3, [r7, #4]
    69ac:	795b      	ldrb	r3, [r3, #5]
    69ae:	2b01      	cmp	r3, #1
    69b0:	d11d      	bne.n	69ee <compile_global_stmt+0x4e>
        mp_parse_node_t *nodes;
        int n = mp_parse_node_extract_list(&pns->nodes[0], PN_name_list, &nodes);
    69b2:	683b      	ldr	r3, [r7, #0]
    69b4:	3308      	adds	r3, #8
    69b6:	f107 020c 	add.w	r2, r7, #12
    69ba:	2167      	movs	r1, #103	; 0x67
    69bc:	4618      	mov	r0, r3
    69be:	f7fd f991 	bl	3ce4 <mp_parse_node_extract_list>
    69c2:	6138      	str	r0, [r7, #16]
        for (int i = 0; i < n; i++) {
    69c4:	2300      	movs	r3, #0
    69c6:	617b      	str	r3, [r7, #20]
    69c8:	e00d      	b.n	69e6 <compile_global_stmt+0x46>
            compile_declare_global(comp, (mp_parse_node_t)pns, MP_PARSE_NODE_LEAF_ARG(nodes[i]));
    69ca:	6839      	ldr	r1, [r7, #0]
    69cc:	68fa      	ldr	r2, [r7, #12]
    69ce:	697b      	ldr	r3, [r7, #20]
    69d0:	009b      	lsls	r3, r3, #2
    69d2:	4413      	add	r3, r2
    69d4:	681b      	ldr	r3, [r3, #0]
    69d6:	091b      	lsrs	r3, r3, #4
    69d8:	461a      	mov	r2, r3
    69da:	6878      	ldr	r0, [r7, #4]
    69dc:	f7ff ffac 	bl	6938 <compile_declare_global>
        for (int i = 0; i < n; i++) {
    69e0:	697b      	ldr	r3, [r7, #20]
    69e2:	3301      	adds	r3, #1
    69e4:	617b      	str	r3, [r7, #20]
    69e6:	697a      	ldr	r2, [r7, #20]
    69e8:	693b      	ldr	r3, [r7, #16]
    69ea:	429a      	cmp	r2, r3
    69ec:	dbed      	blt.n	69ca <compile_global_stmt+0x2a>
        }
    }
}
    69ee:	bf00      	nop
    69f0:	3718      	adds	r7, #24
    69f2:	46bd      	mov	sp, r7
    69f4:	bd80      	pop	{r7, pc}
    69f6:	bf00      	nop

000069f8 <compile_declare_nonlocal>:

STATIC void compile_declare_nonlocal(compiler_t *comp, mp_parse_node_t pn, qstr qst) {
    69f8:	b580      	push	{r7, lr}
    69fa:	b086      	sub	sp, #24
    69fc:	af00      	add	r7, sp, #0
    69fe:	60f8      	str	r0, [r7, #12]
    6a00:	60b9      	str	r1, [r7, #8]
    6a02:	607a      	str	r2, [r7, #4]
    bool added;
    id_info_t *id_info = scope_find_or_add_id(comp->scope_cur, qst, &added);
    6a04:	68fb      	ldr	r3, [r7, #12]
    6a06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    6a08:	f107 0213 	add.w	r2, r7, #19
    6a0c:	6879      	ldr	r1, [r7, #4]
    6a0e:	4618      	mov	r0, r3
    6a10:	f7fe f918 	bl	4c44 <scope_find_or_add_id>
    6a14:	6178      	str	r0, [r7, #20]
    if (added) {
    6a16:	7cfb      	ldrb	r3, [r7, #19]
    6a18:	2b00      	cmp	r3, #0
    6a1a:	d010      	beq.n	6a3e <compile_declare_nonlocal+0x46>
        scope_find_local_and_close_over(comp->scope_cur, id_info, qst);
    6a1c:	68fb      	ldr	r3, [r7, #12]
    6a1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    6a20:	687a      	ldr	r2, [r7, #4]
    6a22:	6979      	ldr	r1, [r7, #20]
    6a24:	4618      	mov	r0, r3
    6a26:	f7fe f9e9 	bl	4dfc <scope_find_local_and_close_over>
        if (id_info->kind == ID_INFO_KIND_GLOBAL_IMPLICIT) {
    6a2a:	697b      	ldr	r3, [r7, #20]
    6a2c:	781b      	ldrb	r3, [r3, #0]
    6a2e:	2b00      	cmp	r3, #0
    6a30:	d10e      	bne.n	6a50 <compile_declare_nonlocal+0x58>
            compile_syntax_error(comp, pn, "no binding for nonlocal found");
    6a32:	4a09      	ldr	r2, [pc, #36]	; (6a58 <compile_declare_nonlocal+0x60>)
    6a34:	68b9      	ldr	r1, [r7, #8]
    6a36:	68f8      	ldr	r0, [r7, #12]
    6a38:	f7fe fa4e 	bl	4ed8 <compile_syntax_error>
        }
    } else if (id_info->kind != ID_INFO_KIND_FREE) {
        compile_syntax_error(comp, pn, "identifier redefined as nonlocal");
    }
}
    6a3c:	e008      	b.n	6a50 <compile_declare_nonlocal+0x58>
    } else if (id_info->kind != ID_INFO_KIND_FREE) {
    6a3e:	697b      	ldr	r3, [r7, #20]
    6a40:	781b      	ldrb	r3, [r3, #0]
    6a42:	2b04      	cmp	r3, #4
    6a44:	d004      	beq.n	6a50 <compile_declare_nonlocal+0x58>
        compile_syntax_error(comp, pn, "identifier redefined as nonlocal");
    6a46:	4a05      	ldr	r2, [pc, #20]	; (6a5c <compile_declare_nonlocal+0x64>)
    6a48:	68b9      	ldr	r1, [r7, #8]
    6a4a:	68f8      	ldr	r0, [r7, #12]
    6a4c:	f7fe fa44 	bl	4ed8 <compile_syntax_error>
}
    6a50:	bf00      	nop
    6a52:	3718      	adds	r7, #24
    6a54:	46bd      	mov	sp, r7
    6a56:	bd80      	pop	{r7, pc}
    6a58:	00020654 	.word	0x00020654
    6a5c:	00020674 	.word	0x00020674

00006a60 <compile_nonlocal_stmt>:

STATIC void compile_nonlocal_stmt(compiler_t *comp, mp_parse_node_struct_t *pns) {
    6a60:	b580      	push	{r7, lr}
    6a62:	b086      	sub	sp, #24
    6a64:	af00      	add	r7, sp, #0
    6a66:	6078      	str	r0, [r7, #4]
    6a68:	6039      	str	r1, [r7, #0]
    if (comp->pass == MP_PASS_SCOPE) {
    6a6a:	687b      	ldr	r3, [r7, #4]
    6a6c:	795b      	ldrb	r3, [r3, #5]
    6a6e:	2b01      	cmp	r3, #1
    6a70:	d129      	bne.n	6ac6 <compile_nonlocal_stmt+0x66>
        if (comp->scope_cur->kind == SCOPE_MODULE) {
    6a72:	687b      	ldr	r3, [r7, #4]
    6a74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    6a76:	681b      	ldr	r3, [r3, #0]
    6a78:	2b00      	cmp	r3, #0
    6a7a:	d106      	bne.n	6a8a <compile_nonlocal_stmt+0x2a>
            compile_syntax_error(comp, (mp_parse_node_t)pns, "can't declare nonlocal in outer code");
    6a7c:	683b      	ldr	r3, [r7, #0]
    6a7e:	4a13      	ldr	r2, [pc, #76]	; (6acc <compile_nonlocal_stmt+0x6c>)
    6a80:	4619      	mov	r1, r3
    6a82:	6878      	ldr	r0, [r7, #4]
    6a84:	f7fe fa28 	bl	4ed8 <compile_syntax_error>
    6a88:	e01d      	b.n	6ac6 <compile_nonlocal_stmt+0x66>
            return;
        }
        mp_parse_node_t *nodes;
        int n = mp_parse_node_extract_list(&pns->nodes[0], PN_name_list, &nodes);
    6a8a:	683b      	ldr	r3, [r7, #0]
    6a8c:	3308      	adds	r3, #8
    6a8e:	f107 020c 	add.w	r2, r7, #12
    6a92:	2167      	movs	r1, #103	; 0x67
    6a94:	4618      	mov	r0, r3
    6a96:	f7fd f925 	bl	3ce4 <mp_parse_node_extract_list>
    6a9a:	6138      	str	r0, [r7, #16]
        for (int i = 0; i < n; i++) {
    6a9c:	2300      	movs	r3, #0
    6a9e:	617b      	str	r3, [r7, #20]
    6aa0:	e00d      	b.n	6abe <compile_nonlocal_stmt+0x5e>
            compile_declare_nonlocal(comp, (mp_parse_node_t)pns, MP_PARSE_NODE_LEAF_ARG(nodes[i]));
    6aa2:	6839      	ldr	r1, [r7, #0]
    6aa4:	68fa      	ldr	r2, [r7, #12]
    6aa6:	697b      	ldr	r3, [r7, #20]
    6aa8:	009b      	lsls	r3, r3, #2
    6aaa:	4413      	add	r3, r2
    6aac:	681b      	ldr	r3, [r3, #0]
    6aae:	091b      	lsrs	r3, r3, #4
    6ab0:	461a      	mov	r2, r3
    6ab2:	6878      	ldr	r0, [r7, #4]
    6ab4:	f7ff ffa0 	bl	69f8 <compile_declare_nonlocal>
        for (int i = 0; i < n; i++) {
    6ab8:	697b      	ldr	r3, [r7, #20]
    6aba:	3301      	adds	r3, #1
    6abc:	617b      	str	r3, [r7, #20]
    6abe:	697a      	ldr	r2, [r7, #20]
    6ac0:	693b      	ldr	r3, [r7, #16]
    6ac2:	429a      	cmp	r2, r3
    6ac4:	dbed      	blt.n	6aa2 <compile_nonlocal_stmt+0x42>
        }
    }
}
    6ac6:	3718      	adds	r7, #24
    6ac8:	46bd      	mov	sp, r7
    6aca:	bd80      	pop	{r7, pc}
    6acc:	00020698 	.word	0x00020698

00006ad0 <compile_assert_stmt>:

STATIC void compile_assert_stmt(compiler_t *comp, mp_parse_node_struct_t *pns) {
    6ad0:	b580      	push	{r7, lr}
    6ad2:	b084      	sub	sp, #16
    6ad4:	af00      	add	r7, sp, #0
    6ad6:	6078      	str	r0, [r7, #4]
    6ad8:	6039      	str	r1, [r7, #0]
    // with optimisations enabled we don't compile assertions
    if (MP_STATE_VM(mp_optimise_value) != 0) {
    6ada:	4b1c      	ldr	r3, [pc, #112]	; (6b4c <compile_assert_stmt+0x7c>)
    6adc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
    6ae0:	2b00      	cmp	r3, #0
    6ae2:	d12e      	bne.n	6b42 <compile_assert_stmt+0x72>
        return;
    }

    uint l_end = comp_next_label(comp);
    6ae4:	6878      	ldr	r0, [r7, #4]
    6ae6:	f7fe fa13 	bl	4f10 <comp_next_label>
    6aea:	60f8      	str	r0, [r7, #12]
    c_if_cond(comp, pns->nodes[0], true, l_end);
    6aec:	683b      	ldr	r3, [r7, #0]
    6aee:	6899      	ldr	r1, [r3, #8]
    6af0:	68fb      	ldr	r3, [r7, #12]
    6af2:	2201      	movs	r2, #1
    6af4:	6878      	ldr	r0, [r7, #4]
    6af6:	f7fe fb95 	bl	5224 <c_if_cond>
    EMIT_LOAD_GLOBAL(MP_QSTR_AssertionError); // we load_global instead of load_id, to be consistent with CPython
    6afa:	687b      	ldr	r3, [r7, #4]
    6afc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6afe:	21b7      	movs	r1, #183	; 0xb7
    6b00:	4618      	mov	r0, r3
    6b02:	f003 fd9d 	bl	a640 <mp_emit_bc_load_global>
    if (!MP_PARSE_NODE_IS_NULL(pns->nodes[1])) {
    6b06:	683b      	ldr	r3, [r7, #0]
    6b08:	68db      	ldr	r3, [r3, #12]
    6b0a:	2b00      	cmp	r3, #0
    6b0c:	d00c      	beq.n	6b28 <compile_assert_stmt+0x58>
        // assertion message
        compile_node(comp, pns->nodes[1]);
    6b0e:	683b      	ldr	r3, [r7, #0]
    6b10:	68db      	ldr	r3, [r3, #12]
    6b12:	4619      	mov	r1, r3
    6b14:	6878      	ldr	r0, [r7, #4]
    6b16:	f002 f83d 	bl	8b94 <compile_node>
        EMIT_ARG(call_function, 1, 0, 0);
    6b1a:	687b      	ldr	r3, [r7, #4]
    6b1c:	6a98      	ldr	r0, [r3, #40]	; 0x28
    6b1e:	2300      	movs	r3, #0
    6b20:	2200      	movs	r2, #0
    6b22:	2101      	movs	r1, #1
    6b24:	f004 fa28 	bl	af78 <mp_emit_bc_call_function>
    }
    EMIT_ARG(raise_varargs, 1);
    6b28:	687b      	ldr	r3, [r7, #4]
    6b2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6b2c:	2101      	movs	r1, #1
    6b2e:	4618      	mov	r0, r3
    6b30:	f004 fa62 	bl	aff8 <mp_emit_bc_raise_varargs>
    EMIT_ARG(label_assign, l_end);
    6b34:	687b      	ldr	r3, [r7, #4]
    6b36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6b38:	68f9      	ldr	r1, [r7, #12]
    6b3a:	4618      	mov	r0, r3
    6b3c:	f003 fc1a 	bl	a374 <mp_emit_bc_label_assign>
    6b40:	e000      	b.n	6b44 <compile_assert_stmt+0x74>
        return;
    6b42:	bf00      	nop
}
    6b44:	3710      	adds	r7, #16
    6b46:	46bd      	mov	sp, r7
    6b48:	bd80      	pop	{r7, pc}
    6b4a:	bf00      	nop
    6b4c:	200012f0 	.word	0x200012f0

00006b50 <compile_if_stmt>:

STATIC void compile_if_stmt(compiler_t *comp, mp_parse_node_struct_t *pns) {
    6b50:	b580      	push	{r7, lr}
    6b52:	b08a      	sub	sp, #40	; 0x28
    6b54:	af00      	add	r7, sp, #0
    6b56:	6078      	str	r0, [r7, #4]
    6b58:	6039      	str	r1, [r7, #0]
    uint l_end = comp_next_label(comp);
    6b5a:	6878      	ldr	r0, [r7, #4]
    6b5c:	f7fe f9d8 	bl	4f10 <comp_next_label>
    6b60:	6238      	str	r0, [r7, #32]

    // optimisation: don't emit anything when "if False"
    if (!mp_parse_node_is_const_false(pns->nodes[0])) {
    6b62:	683b      	ldr	r3, [r7, #0]
    6b64:	689b      	ldr	r3, [r3, #8]
    6b66:	4618      	mov	r0, r3
    6b68:	f7fd f83a 	bl	3be0 <mp_parse_node_is_const_false>
    6b6c:	4603      	mov	r3, r0
    6b6e:	f083 0301 	eor.w	r3, r3, #1
    6b72:	b2db      	uxtb	r3, r3
    6b74:	2b00      	cmp	r3, #0
    6b76:	d038      	beq.n	6bea <compile_if_stmt+0x9a>
        uint l_fail = comp_next_label(comp);
    6b78:	6878      	ldr	r0, [r7, #4]
    6b7a:	f7fe f9c9 	bl	4f10 <comp_next_label>
    6b7e:	61f8      	str	r0, [r7, #28]
        c_if_cond(comp, pns->nodes[0], false, l_fail); // if condition
    6b80:	683b      	ldr	r3, [r7, #0]
    6b82:	6899      	ldr	r1, [r3, #8]
    6b84:	69fb      	ldr	r3, [r7, #28]
    6b86:	2200      	movs	r2, #0
    6b88:	6878      	ldr	r0, [r7, #4]
    6b8a:	f7fe fb4b 	bl	5224 <c_if_cond>

        compile_node(comp, pns->nodes[1]); // if block
    6b8e:	683b      	ldr	r3, [r7, #0]
    6b90:	68db      	ldr	r3, [r3, #12]
    6b92:	4619      	mov	r1, r3
    6b94:	6878      	ldr	r0, [r7, #4]
    6b96:	f001 fffd 	bl	8b94 <compile_node>

        // optimisation: skip everything else when "if True"
        if (mp_parse_node_is_const_true(pns->nodes[0])) {
    6b9a:	683b      	ldr	r3, [r7, #0]
    6b9c:	689b      	ldr	r3, [r3, #8]
    6b9e:	4618      	mov	r0, r3
    6ba0:	f7fd f83a 	bl	3c18 <mp_parse_node_is_const_true>
    6ba4:	4603      	mov	r3, r0
    6ba6:	2b00      	cmp	r3, #0
    6ba8:	f040 809a 	bne.w	6ce0 <compile_if_stmt+0x190>
            goto done;
        }

        if (
            // optimisation: don't jump over non-existent elif/else blocks
            !(MP_PARSE_NODE_IS_NULL(pns->nodes[2]) && MP_PARSE_NODE_IS_NULL(pns->nodes[3]))
    6bac:	683b      	ldr	r3, [r7, #0]
    6bae:	691b      	ldr	r3, [r3, #16]
        if (
    6bb0:	2b00      	cmp	r3, #0
    6bb2:	d103      	bne.n	6bbc <compile_if_stmt+0x6c>
            !(MP_PARSE_NODE_IS_NULL(pns->nodes[2]) && MP_PARSE_NODE_IS_NULL(pns->nodes[3]))
    6bb4:	683b      	ldr	r3, [r7, #0]
    6bb6:	695b      	ldr	r3, [r3, #20]
    6bb8:	2b00      	cmp	r3, #0
    6bba:	d010      	beq.n	6bde <compile_if_stmt+0x8e>
            // optimisation: don't jump if last instruction was return
            && !EMIT(last_emit_was_return_value)
    6bbc:	687b      	ldr	r3, [r7, #4]
    6bbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6bc0:	4618      	mov	r0, r3
    6bc2:	f003 fb73 	bl	a2ac <mp_emit_bc_last_emit_was_return_value>
    6bc6:	4603      	mov	r3, r0
    6bc8:	f083 0301 	eor.w	r3, r3, #1
    6bcc:	b2db      	uxtb	r3, r3
    6bce:	2b00      	cmp	r3, #0
    6bd0:	d005      	beq.n	6bde <compile_if_stmt+0x8e>
            ) {
            // jump over elif/else blocks
            EMIT_ARG(jump, l_end);
    6bd2:	687b      	ldr	r3, [r7, #4]
    6bd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6bd6:	6a39      	ldr	r1, [r7, #32]
    6bd8:	4618      	mov	r0, r3
    6bda:	f003 fed3 	bl	a984 <mp_emit_bc_jump>
        }

        EMIT_ARG(label_assign, l_fail);
    6bde:	687b      	ldr	r3, [r7, #4]
    6be0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6be2:	69f9      	ldr	r1, [r7, #28]
    6be4:	4618      	mov	r0, r3
    6be6:	f003 fbc5 	bl	a374 <mp_emit_bc_label_assign>
    }

    // compile elif blocks (if any)
    mp_parse_node_t *pn_elif;
    int n_elif = mp_parse_node_extract_list(&pns->nodes[2], PN_if_stmt_elif_list, &pn_elif);
    6bea:	683b      	ldr	r3, [r7, #0]
    6bec:	3310      	adds	r3, #16
    6bee:	f107 020c 	add.w	r2, r7, #12
    6bf2:	216a      	movs	r1, #106	; 0x6a
    6bf4:	4618      	mov	r0, r3
    6bf6:	f7fd f875 	bl	3ce4 <mp_parse_node_extract_list>
    6bfa:	61b8      	str	r0, [r7, #24]
    for (int i = 0; i < n_elif; i++) {
    6bfc:	2300      	movs	r3, #0
    6bfe:	627b      	str	r3, [r7, #36]	; 0x24
    6c00:	e063      	b.n	6cca <compile_if_stmt+0x17a>
        assert(MP_PARSE_NODE_IS_STRUCT_KIND(pn_elif[i], PN_if_stmt_elif)); // should be
    6c02:	68fa      	ldr	r2, [r7, #12]
    6c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    6c06:	009b      	lsls	r3, r3, #2
    6c08:	4413      	add	r3, r2
    6c0a:	681b      	ldr	r3, [r3, #0]
    6c0c:	2b00      	cmp	r3, #0
    6c0e:	d011      	beq.n	6c34 <compile_if_stmt+0xe4>
    6c10:	68fa      	ldr	r2, [r7, #12]
    6c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    6c14:	009b      	lsls	r3, r3, #2
    6c16:	4413      	add	r3, r2
    6c18:	681b      	ldr	r3, [r3, #0]
    6c1a:	f003 0303 	and.w	r3, r3, #3
    6c1e:	2b00      	cmp	r3, #0
    6c20:	d108      	bne.n	6c34 <compile_if_stmt+0xe4>
    6c22:	68fa      	ldr	r2, [r7, #12]
    6c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    6c26:	009b      	lsls	r3, r3, #2
    6c28:	4413      	add	r3, r2
    6c2a:	681b      	ldr	r3, [r3, #0]
    6c2c:	685b      	ldr	r3, [r3, #4]
    6c2e:	b2db      	uxtb	r3, r3
    6c30:	2b6b      	cmp	r3, #107	; 0x6b
    6c32:	d006      	beq.n	6c42 <compile_if_stmt+0xf2>
    6c34:	4b31      	ldr	r3, [pc, #196]	; (6cfc <compile_if_stmt+0x1ac>)
    6c36:	4a32      	ldr	r2, [pc, #200]	; (6d00 <compile_if_stmt+0x1b0>)
    6c38:	f240 41f3 	movw	r1, #1267	; 0x4f3
    6c3c:	4831      	ldr	r0, [pc, #196]	; (6d04 <compile_if_stmt+0x1b4>)
    6c3e:	f014 fd47 	bl	1b6d0 <__assert_func>
        mp_parse_node_struct_t *pns_elif = (mp_parse_node_struct_t*)pn_elif[i];
    6c42:	68fa      	ldr	r2, [r7, #12]
    6c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    6c46:	009b      	lsls	r3, r3, #2
    6c48:	4413      	add	r3, r2
    6c4a:	681b      	ldr	r3, [r3, #0]
    6c4c:	617b      	str	r3, [r7, #20]

        // optimisation: don't emit anything when "if False"
        if (!mp_parse_node_is_const_false(pns_elif->nodes[0])) {
    6c4e:	697b      	ldr	r3, [r7, #20]
    6c50:	689b      	ldr	r3, [r3, #8]
    6c52:	4618      	mov	r0, r3
    6c54:	f7fc ffc4 	bl	3be0 <mp_parse_node_is_const_false>
    6c58:	4603      	mov	r3, r0
    6c5a:	f083 0301 	eor.w	r3, r3, #1
    6c5e:	b2db      	uxtb	r3, r3
    6c60:	2b00      	cmp	r3, #0
    6c62:	d02f      	beq.n	6cc4 <compile_if_stmt+0x174>
            uint l_fail = comp_next_label(comp);
    6c64:	6878      	ldr	r0, [r7, #4]
    6c66:	f7fe f953 	bl	4f10 <comp_next_label>
    6c6a:	6138      	str	r0, [r7, #16]
            c_if_cond(comp, pns_elif->nodes[0], false, l_fail); // elif condition
    6c6c:	697b      	ldr	r3, [r7, #20]
    6c6e:	6899      	ldr	r1, [r3, #8]
    6c70:	693b      	ldr	r3, [r7, #16]
    6c72:	2200      	movs	r2, #0
    6c74:	6878      	ldr	r0, [r7, #4]
    6c76:	f7fe fad5 	bl	5224 <c_if_cond>

            compile_node(comp, pns_elif->nodes[1]); // elif block
    6c7a:	697b      	ldr	r3, [r7, #20]
    6c7c:	68db      	ldr	r3, [r3, #12]
    6c7e:	4619      	mov	r1, r3
    6c80:	6878      	ldr	r0, [r7, #4]
    6c82:	f001 ff87 	bl	8b94 <compile_node>

            // optimisation: skip everything else when "elif True"
            if (mp_parse_node_is_const_true(pns_elif->nodes[0])) {
    6c86:	697b      	ldr	r3, [r7, #20]
    6c88:	689b      	ldr	r3, [r3, #8]
    6c8a:	4618      	mov	r0, r3
    6c8c:	f7fc ffc4 	bl	3c18 <mp_parse_node_is_const_true>
    6c90:	4603      	mov	r3, r0
    6c92:	2b00      	cmp	r3, #0
    6c94:	d126      	bne.n	6ce4 <compile_if_stmt+0x194>
                goto done;
            }

            // optimisation: don't jump if last instruction was return
            if (!EMIT(last_emit_was_return_value)) {
    6c96:	687b      	ldr	r3, [r7, #4]
    6c98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6c9a:	4618      	mov	r0, r3
    6c9c:	f003 fb06 	bl	a2ac <mp_emit_bc_last_emit_was_return_value>
    6ca0:	4603      	mov	r3, r0
    6ca2:	f083 0301 	eor.w	r3, r3, #1
    6ca6:	b2db      	uxtb	r3, r3
    6ca8:	2b00      	cmp	r3, #0
    6caa:	d005      	beq.n	6cb8 <compile_if_stmt+0x168>
                EMIT_ARG(jump, l_end);
    6cac:	687b      	ldr	r3, [r7, #4]
    6cae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6cb0:	6a39      	ldr	r1, [r7, #32]
    6cb2:	4618      	mov	r0, r3
    6cb4:	f003 fe66 	bl	a984 <mp_emit_bc_jump>
            }
            EMIT_ARG(label_assign, l_fail);
    6cb8:	687b      	ldr	r3, [r7, #4]
    6cba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6cbc:	6939      	ldr	r1, [r7, #16]
    6cbe:	4618      	mov	r0, r3
    6cc0:	f003 fb58 	bl	a374 <mp_emit_bc_label_assign>
    for (int i = 0; i < n_elif; i++) {
    6cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    6cc6:	3301      	adds	r3, #1
    6cc8:	627b      	str	r3, [r7, #36]	; 0x24
    6cca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    6ccc:	69bb      	ldr	r3, [r7, #24]
    6cce:	429a      	cmp	r2, r3
    6cd0:	db97      	blt.n	6c02 <compile_if_stmt+0xb2>
        }
    }

    // compile else block
    compile_node(comp, pns->nodes[3]); // can be null
    6cd2:	683b      	ldr	r3, [r7, #0]
    6cd4:	695b      	ldr	r3, [r3, #20]
    6cd6:	4619      	mov	r1, r3
    6cd8:	6878      	ldr	r0, [r7, #4]
    6cda:	f001 ff5b 	bl	8b94 <compile_node>
    6cde:	e002      	b.n	6ce6 <compile_if_stmt+0x196>
            goto done;
    6ce0:	bf00      	nop
    6ce2:	e000      	b.n	6ce6 <compile_if_stmt+0x196>
                goto done;
    6ce4:	bf00      	nop

done:
    EMIT_ARG(label_assign, l_end);
    6ce6:	687b      	ldr	r3, [r7, #4]
    6ce8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6cea:	6a39      	ldr	r1, [r7, #32]
    6cec:	4618      	mov	r0, r3
    6cee:	f003 fb41 	bl	a374 <mp_emit_bc_label_assign>
}
    6cf2:	bf00      	nop
    6cf4:	3728      	adds	r7, #40	; 0x28
    6cf6:	46bd      	mov	sp, r7
    6cf8:	bd80      	pop	{r7, pc}
    6cfa:	bf00      	nop
    6cfc:	000206c0 	.word	0x000206c0
    6d00:	00020ea4 	.word	0x00020ea4
    6d04:	00020234 	.word	0x00020234

00006d08 <compile_while_stmt>:
#define END_BREAK_CONTINUE_BLOCK \
    comp->break_label = old_break_label; \
    comp->continue_label = old_continue_label; \
    comp->break_continue_except_level = old_break_continue_except_level;

STATIC void compile_while_stmt(compiler_t *comp, mp_parse_node_struct_t *pns) {
    6d08:	b580      	push	{r7, lr}
    6d0a:	b088      	sub	sp, #32
    6d0c:	af00      	add	r7, sp, #0
    6d0e:	6078      	str	r0, [r7, #4]
    6d10:	6039      	str	r1, [r7, #0]
    START_BREAK_CONTINUE_BLOCK
    6d12:	687b      	ldr	r3, [r7, #4]
    6d14:	8b1b      	ldrh	r3, [r3, #24]
    6d16:	83fb      	strh	r3, [r7, #30]
    6d18:	687b      	ldr	r3, [r7, #4]
    6d1a:	8b5b      	ldrh	r3, [r3, #26]
    6d1c:	83bb      	strh	r3, [r7, #28]
    6d1e:	687b      	ldr	r3, [r7, #4]
    6d20:	8bdb      	ldrh	r3, [r3, #30]
    6d22:	837b      	strh	r3, [r7, #26]
    6d24:	6878      	ldr	r0, [r7, #4]
    6d26:	f7fe f8f3 	bl	4f10 <comp_next_label>
    6d2a:	6178      	str	r0, [r7, #20]
    6d2c:	6878      	ldr	r0, [r7, #4]
    6d2e:	f7fe f8ef 	bl	4f10 <comp_next_label>
    6d32:	6138      	str	r0, [r7, #16]
    6d34:	697b      	ldr	r3, [r7, #20]
    6d36:	b29a      	uxth	r2, r3
    6d38:	687b      	ldr	r3, [r7, #4]
    6d3a:	831a      	strh	r2, [r3, #24]
    6d3c:	693b      	ldr	r3, [r7, #16]
    6d3e:	b29a      	uxth	r2, r3
    6d40:	687b      	ldr	r3, [r7, #4]
    6d42:	835a      	strh	r2, [r3, #26]
    6d44:	687b      	ldr	r3, [r7, #4]
    6d46:	8b9a      	ldrh	r2, [r3, #28]
    6d48:	687b      	ldr	r3, [r7, #4]
    6d4a:	83da      	strh	r2, [r3, #30]

    if (!mp_parse_node_is_const_false(pns->nodes[0])) { // optimisation: don't emit anything for "while False"
    6d4c:	683b      	ldr	r3, [r7, #0]
    6d4e:	689b      	ldr	r3, [r3, #8]
    6d50:	4618      	mov	r0, r3
    6d52:	f7fc ff45 	bl	3be0 <mp_parse_node_is_const_false>
    6d56:	4603      	mov	r3, r0
    6d58:	f083 0301 	eor.w	r3, r3, #1
    6d5c:	b2db      	uxtb	r3, r3
    6d5e:	2b00      	cmp	r3, #0
    6d60:	d02d      	beq.n	6dbe <compile_while_stmt+0xb6>
        uint top_label = comp_next_label(comp);
    6d62:	6878      	ldr	r0, [r7, #4]
    6d64:	f7fe f8d4 	bl	4f10 <comp_next_label>
    6d68:	60f8      	str	r0, [r7, #12]
        if (!mp_parse_node_is_const_true(pns->nodes[0])) { // optimisation: don't jump to cond for "while True"
    6d6a:	683b      	ldr	r3, [r7, #0]
    6d6c:	689b      	ldr	r3, [r3, #8]
    6d6e:	4618      	mov	r0, r3
    6d70:	f7fc ff52 	bl	3c18 <mp_parse_node_is_const_true>
    6d74:	4603      	mov	r3, r0
    6d76:	f083 0301 	eor.w	r3, r3, #1
    6d7a:	b2db      	uxtb	r3, r3
    6d7c:	2b00      	cmp	r3, #0
    6d7e:	d005      	beq.n	6d8c <compile_while_stmt+0x84>
            EMIT_ARG(jump, continue_label);
    6d80:	687b      	ldr	r3, [r7, #4]
    6d82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6d84:	6939      	ldr	r1, [r7, #16]
    6d86:	4618      	mov	r0, r3
    6d88:	f003 fdfc 	bl	a984 <mp_emit_bc_jump>
        }
        EMIT_ARG(label_assign, top_label);
    6d8c:	687b      	ldr	r3, [r7, #4]
    6d8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6d90:	68f9      	ldr	r1, [r7, #12]
    6d92:	4618      	mov	r0, r3
    6d94:	f003 faee 	bl	a374 <mp_emit_bc_label_assign>
        compile_node(comp, pns->nodes[1]); // body
    6d98:	683b      	ldr	r3, [r7, #0]
    6d9a:	68db      	ldr	r3, [r3, #12]
    6d9c:	4619      	mov	r1, r3
    6d9e:	6878      	ldr	r0, [r7, #4]
    6da0:	f001 fef8 	bl	8b94 <compile_node>
        EMIT_ARG(label_assign, continue_label);
    6da4:	687b      	ldr	r3, [r7, #4]
    6da6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6da8:	6939      	ldr	r1, [r7, #16]
    6daa:	4618      	mov	r0, r3
    6dac:	f003 fae2 	bl	a374 <mp_emit_bc_label_assign>
        c_if_cond(comp, pns->nodes[0], true, top_label); // condition
    6db0:	683b      	ldr	r3, [r7, #0]
    6db2:	6899      	ldr	r1, [r3, #8]
    6db4:	68fb      	ldr	r3, [r7, #12]
    6db6:	2201      	movs	r2, #1
    6db8:	6878      	ldr	r0, [r7, #4]
    6dba:	f7fe fa33 	bl	5224 <c_if_cond>
    }

    // break/continue apply to outer loop (if any) in the else block
    END_BREAK_CONTINUE_BLOCK
    6dbe:	687b      	ldr	r3, [r7, #4]
    6dc0:	8bfa      	ldrh	r2, [r7, #30]
    6dc2:	831a      	strh	r2, [r3, #24]
    6dc4:	687b      	ldr	r3, [r7, #4]
    6dc6:	8bba      	ldrh	r2, [r7, #28]
    6dc8:	835a      	strh	r2, [r3, #26]
    6dca:	687b      	ldr	r3, [r7, #4]
    6dcc:	8b7a      	ldrh	r2, [r7, #26]
    6dce:	83da      	strh	r2, [r3, #30]

    compile_node(comp, pns->nodes[2]); // else
    6dd0:	683b      	ldr	r3, [r7, #0]
    6dd2:	691b      	ldr	r3, [r3, #16]
    6dd4:	4619      	mov	r1, r3
    6dd6:	6878      	ldr	r0, [r7, #4]
    6dd8:	f001 fedc 	bl	8b94 <compile_node>

    EMIT_ARG(label_assign, break_label);
    6ddc:	687b      	ldr	r3, [r7, #4]
    6dde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6de0:	6979      	ldr	r1, [r7, #20]
    6de2:	4618      	mov	r0, r3
    6de4:	f003 fac6 	bl	a374 <mp_emit_bc_label_assign>
}
    6de8:	bf00      	nop
    6dea:	3720      	adds	r7, #32
    6dec:	46bd      	mov	sp, r7
    6dee:	bd80      	pop	{r7, pc}

00006df0 <compile_for_stmt_optimised_range>:
//    (<step> is a constant for us, so no need to worry about it changing)
//
// If <end> is a small-int, then the stack during the for-loop contains just
// the current value of <var>.  Otherwise, the stack contains <end> then the
// current value of <var>.
STATIC void compile_for_stmt_optimised_range(compiler_t *comp, mp_parse_node_t pn_var, mp_parse_node_t pn_start, mp_parse_node_t pn_end, mp_parse_node_t pn_step, mp_parse_node_t pn_body, mp_parse_node_t pn_else) {
    6df0:	b580      	push	{r7, lr}
    6df2:	b08c      	sub	sp, #48	; 0x30
    6df4:	af00      	add	r7, sp, #0
    6df6:	60f8      	str	r0, [r7, #12]
    6df8:	60b9      	str	r1, [r7, #8]
    6dfa:	607a      	str	r2, [r7, #4]
    6dfc:	603b      	str	r3, [r7, #0]
    START_BREAK_CONTINUE_BLOCK
    6dfe:	68fb      	ldr	r3, [r7, #12]
    6e00:	8b1b      	ldrh	r3, [r3, #24]
    6e02:	857b      	strh	r3, [r7, #42]	; 0x2a
    6e04:	68fb      	ldr	r3, [r7, #12]
    6e06:	8b5b      	ldrh	r3, [r3, #26]
    6e08:	853b      	strh	r3, [r7, #40]	; 0x28
    6e0a:	68fb      	ldr	r3, [r7, #12]
    6e0c:	8bdb      	ldrh	r3, [r3, #30]
    6e0e:	84fb      	strh	r3, [r7, #38]	; 0x26
    6e10:	68f8      	ldr	r0, [r7, #12]
    6e12:	f7fe f87d 	bl	4f10 <comp_next_label>
    6e16:	6238      	str	r0, [r7, #32]
    6e18:	68f8      	ldr	r0, [r7, #12]
    6e1a:	f7fe f879 	bl	4f10 <comp_next_label>
    6e1e:	61f8      	str	r0, [r7, #28]
    6e20:	6a3b      	ldr	r3, [r7, #32]
    6e22:	b29a      	uxth	r2, r3
    6e24:	68fb      	ldr	r3, [r7, #12]
    6e26:	831a      	strh	r2, [r3, #24]
    6e28:	69fb      	ldr	r3, [r7, #28]
    6e2a:	b29a      	uxth	r2, r3
    6e2c:	68fb      	ldr	r3, [r7, #12]
    6e2e:	835a      	strh	r2, [r3, #26]
    6e30:	68fb      	ldr	r3, [r7, #12]
    6e32:	8b9a      	ldrh	r2, [r3, #28]
    6e34:	68fb      	ldr	r3, [r7, #12]
    6e36:	83da      	strh	r2, [r3, #30]

    uint top_label = comp_next_label(comp);
    6e38:	68f8      	ldr	r0, [r7, #12]
    6e3a:	f7fe f869 	bl	4f10 <comp_next_label>
    6e3e:	61b8      	str	r0, [r7, #24]
    uint entry_label = comp_next_label(comp);
    6e40:	68f8      	ldr	r0, [r7, #12]
    6e42:	f7fe f865 	bl	4f10 <comp_next_label>
    6e46:	6178      	str	r0, [r7, #20]

    // put the end value on the stack if it's not a small-int constant
    bool end_on_stack = !MP_PARSE_NODE_IS_SMALL_INT(pn_end);
    6e48:	683b      	ldr	r3, [r7, #0]
    6e4a:	f003 0301 	and.w	r3, r3, #1
    6e4e:	2b00      	cmp	r3, #0
    6e50:	bf0c      	ite	eq
    6e52:	2301      	moveq	r3, #1
    6e54:	2300      	movne	r3, #0
    6e56:	74fb      	strb	r3, [r7, #19]
    if (end_on_stack) {
    6e58:	7cfb      	ldrb	r3, [r7, #19]
    6e5a:	2b00      	cmp	r3, #0
    6e5c:	d003      	beq.n	6e66 <compile_for_stmt_optimised_range+0x76>
        compile_node(comp, pn_end);
    6e5e:	6839      	ldr	r1, [r7, #0]
    6e60:	68f8      	ldr	r0, [r7, #12]
    6e62:	f001 fe97 	bl	8b94 <compile_node>
    }

    // compile: start
    compile_node(comp, pn_start);
    6e66:	6879      	ldr	r1, [r7, #4]
    6e68:	68f8      	ldr	r0, [r7, #12]
    6e6a:	f001 fe93 	bl	8b94 <compile_node>

    EMIT_ARG(jump, entry_label);
    6e6e:	68fb      	ldr	r3, [r7, #12]
    6e70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6e72:	6979      	ldr	r1, [r7, #20]
    6e74:	4618      	mov	r0, r3
    6e76:	f003 fd85 	bl	a984 <mp_emit_bc_jump>
    EMIT_ARG(label_assign, top_label);
    6e7a:	68fb      	ldr	r3, [r7, #12]
    6e7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6e7e:	69b9      	ldr	r1, [r7, #24]
    6e80:	4618      	mov	r0, r3
    6e82:	f003 fa77 	bl	a374 <mp_emit_bc_label_assign>

    // duplicate next value and store it to var
    EMIT(dup_top);
    6e86:	68fb      	ldr	r3, [r7, #12]
    6e88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6e8a:	4618      	mov	r0, r3
    6e8c:	f003 fd28 	bl	a8e0 <mp_emit_bc_dup_top>
    c_assign(comp, pn_var, ASSIGN_STORE);
    6e90:	2200      	movs	r2, #0
    6e92:	68b9      	ldr	r1, [r7, #8]
    6e94:	68f8      	ldr	r0, [r7, #12]
    6e96:	f7fe fc5f 	bl	5758 <c_assign>

    // compile body
    compile_node(comp, pn_body);
    6e9a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
    6e9c:	68f8      	ldr	r0, [r7, #12]
    6e9e:	f001 fe79 	bl	8b94 <compile_node>

    EMIT_ARG(label_assign, continue_label);
    6ea2:	68fb      	ldr	r3, [r7, #12]
    6ea4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6ea6:	69f9      	ldr	r1, [r7, #28]
    6ea8:	4618      	mov	r0, r3
    6eaa:	f003 fa63 	bl	a374 <mp_emit_bc_label_assign>

    // compile: var + step
    compile_node(comp, pn_step);
    6eae:	6bb9      	ldr	r1, [r7, #56]	; 0x38
    6eb0:	68f8      	ldr	r0, [r7, #12]
    6eb2:	f001 fe6f 	bl	8b94 <compile_node>
    EMIT_ARG(binary_op, MP_BINARY_OP_INPLACE_ADD);
    6eb6:	68fb      	ldr	r3, [r7, #12]
    6eb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6eba:	210e      	movs	r1, #14
    6ebc:	4618      	mov	r0, r3
    6ebe:	f003 fed5 	bl	ac6c <mp_emit_bc_binary_op>

    EMIT_ARG(label_assign, entry_label);
    6ec2:	68fb      	ldr	r3, [r7, #12]
    6ec4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6ec6:	6979      	ldr	r1, [r7, #20]
    6ec8:	4618      	mov	r0, r3
    6eca:	f003 fa53 	bl	a374 <mp_emit_bc_label_assign>

    // compile: if var <cond> end: goto top
    if (end_on_stack) {
    6ece:	7cfb      	ldrb	r3, [r7, #19]
    6ed0:	2b00      	cmp	r3, #0
    6ed2:	d00a      	beq.n	6eea <compile_for_stmt_optimised_range+0xfa>
        EMIT(dup_top_two);
    6ed4:	68fb      	ldr	r3, [r7, #12]
    6ed6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6ed8:	4618      	mov	r0, r3
    6eda:	f003 fd11 	bl	a900 <mp_emit_bc_dup_top_two>
        EMIT(rot_two);
    6ede:	68fb      	ldr	r3, [r7, #12]
    6ee0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6ee2:	4618      	mov	r0, r3
    6ee4:	f003 fd2e 	bl	a944 <mp_emit_bc_rot_two>
    6ee8:	e008      	b.n	6efc <compile_for_stmt_optimised_range+0x10c>
    } else {
        EMIT(dup_top);
    6eea:	68fb      	ldr	r3, [r7, #12]
    6eec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6eee:	4618      	mov	r0, r3
    6ef0:	f003 fcf6 	bl	a8e0 <mp_emit_bc_dup_top>
        compile_node(comp, pn_end);
    6ef4:	6839      	ldr	r1, [r7, #0]
    6ef6:	68f8      	ldr	r0, [r7, #12]
    6ef8:	f001 fe4c 	bl	8b94 <compile_node>
    }
    assert(MP_PARSE_NODE_IS_SMALL_INT(pn_step));
    6efc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    6efe:	f003 0301 	and.w	r3, r3, #1
    6f02:	2b00      	cmp	r3, #0
    6f04:	d106      	bne.n	6f14 <compile_for_stmt_optimised_range+0x124>
    6f06:	4b38      	ldr	r3, [pc, #224]	; (6fe8 <compile_for_stmt_optimised_range+0x1f8>)
    6f08:	4a38      	ldr	r2, [pc, #224]	; (6fec <compile_for_stmt_optimised_range+0x1fc>)
    6f0a:	f240 516f 	movw	r1, #1391	; 0x56f
    6f0e:	4838      	ldr	r0, [pc, #224]	; (6ff0 <compile_for_stmt_optimised_range+0x200>)
    6f10:	f014 fbde 	bl	1b6d0 <__assert_func>
    if (MP_PARSE_NODE_LEAF_SMALL_INT(pn_step) >= 0) {
    6f14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    6f16:	105b      	asrs	r3, r3, #1
    6f18:	2b00      	cmp	r3, #0
    6f1a:	db06      	blt.n	6f2a <compile_for_stmt_optimised_range+0x13a>
        EMIT_ARG(binary_op, MP_BINARY_OP_LESS);
    6f1c:	68fb      	ldr	r3, [r7, #12]
    6f1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6f20:	2100      	movs	r1, #0
    6f22:	4618      	mov	r0, r3
    6f24:	f003 fea2 	bl	ac6c <mp_emit_bc_binary_op>
    6f28:	e005      	b.n	6f36 <compile_for_stmt_optimised_range+0x146>
    } else {
        EMIT_ARG(binary_op, MP_BINARY_OP_MORE);
    6f2a:	68fb      	ldr	r3, [r7, #12]
    6f2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6f2e:	2101      	movs	r1, #1
    6f30:	4618      	mov	r0, r3
    6f32:	f003 fe9b 	bl	ac6c <mp_emit_bc_binary_op>
    }
    EMIT_ARG(pop_jump_if, true, top_label);
    6f36:	68fb      	ldr	r3, [r7, #12]
    6f38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6f3a:	69ba      	ldr	r2, [r7, #24]
    6f3c:	2101      	movs	r1, #1
    6f3e:	4618      	mov	r0, r3
    6f40:	f003 fd32 	bl	a9a8 <mp_emit_bc_pop_jump_if>

    // break/continue apply to outer loop (if any) in the else block
    END_BREAK_CONTINUE_BLOCK
    6f44:	68fb      	ldr	r3, [r7, #12]
    6f46:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
    6f48:	831a      	strh	r2, [r3, #24]
    6f4a:	68fb      	ldr	r3, [r7, #12]
    6f4c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
    6f4e:	835a      	strh	r2, [r3, #26]
    6f50:	68fb      	ldr	r3, [r7, #12]
    6f52:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    6f54:	83da      	strh	r2, [r3, #30]

    // Compile the else block.  We must pop the iterator variables before
    // executing the else code because it may contain break/continue statements.
    uint end_label = 0;
    6f56:	2300      	movs	r3, #0
    6f58:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (!MP_PARSE_NODE_IS_NULL(pn_else)) {
    6f5a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    6f5c:	2b00      	cmp	r3, #0
    6f5e:	d022      	beq.n	6fa6 <compile_for_stmt_optimised_range+0x1b6>
        // discard final value of "var", and possible "end" value
        EMIT(pop_top);
    6f60:	68fb      	ldr	r3, [r7, #12]
    6f62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6f64:	4618      	mov	r0, r3
    6f66:	f003 fcdb 	bl	a920 <mp_emit_bc_pop_top>
        if (end_on_stack) {
    6f6a:	7cfb      	ldrb	r3, [r7, #19]
    6f6c:	2b00      	cmp	r3, #0
    6f6e:	d004      	beq.n	6f7a <compile_for_stmt_optimised_range+0x18a>
            EMIT(pop_top);
    6f70:	68fb      	ldr	r3, [r7, #12]
    6f72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6f74:	4618      	mov	r0, r3
    6f76:	f003 fcd3 	bl	a920 <mp_emit_bc_pop_top>
        }
        compile_node(comp, pn_else);
    6f7a:	6c39      	ldr	r1, [r7, #64]	; 0x40
    6f7c:	68f8      	ldr	r0, [r7, #12]
    6f7e:	f001 fe09 	bl	8b94 <compile_node>
        end_label = comp_next_label(comp);
    6f82:	68f8      	ldr	r0, [r7, #12]
    6f84:	f7fd ffc4 	bl	4f10 <comp_next_label>
    6f88:	62f8      	str	r0, [r7, #44]	; 0x2c
        EMIT_ARG(jump, end_label);
    6f8a:	68fb      	ldr	r3, [r7, #12]
    6f8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6f8e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
    6f90:	4618      	mov	r0, r3
    6f92:	f003 fcf7 	bl	a984 <mp_emit_bc_jump>
        EMIT_ARG(adjust_stack_size, 1 + end_on_stack);
    6f96:	68fb      	ldr	r3, [r7, #12]
    6f98:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    6f9a:	7cfb      	ldrb	r3, [r7, #19]
    6f9c:	3301      	adds	r3, #1
    6f9e:	4619      	mov	r1, r3
    6fa0:	4610      	mov	r0, r2
    6fa2:	f003 f995 	bl	a2d0 <mp_emit_bc_adjust_stack_size>
    }

    EMIT_ARG(label_assign, break_label);
    6fa6:	68fb      	ldr	r3, [r7, #12]
    6fa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6faa:	6a39      	ldr	r1, [r7, #32]
    6fac:	4618      	mov	r0, r3
    6fae:	f003 f9e1 	bl	a374 <mp_emit_bc_label_assign>

    // discard final value of var that failed the loop condition
    EMIT(pop_top);
    6fb2:	68fb      	ldr	r3, [r7, #12]
    6fb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6fb6:	4618      	mov	r0, r3
    6fb8:	f003 fcb2 	bl	a920 <mp_emit_bc_pop_top>

    // discard <end> value if it's on the stack
    if (end_on_stack) {
    6fbc:	7cfb      	ldrb	r3, [r7, #19]
    6fbe:	2b00      	cmp	r3, #0
    6fc0:	d004      	beq.n	6fcc <compile_for_stmt_optimised_range+0x1dc>
        EMIT(pop_top);
    6fc2:	68fb      	ldr	r3, [r7, #12]
    6fc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6fc6:	4618      	mov	r0, r3
    6fc8:	f003 fcaa 	bl	a920 <mp_emit_bc_pop_top>
    }

    if (!MP_PARSE_NODE_IS_NULL(pn_else)) {
    6fcc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    6fce:	2b00      	cmp	r3, #0
    6fd0:	d005      	beq.n	6fde <compile_for_stmt_optimised_range+0x1ee>
        EMIT_ARG(label_assign, end_label);
    6fd2:	68fb      	ldr	r3, [r7, #12]
    6fd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6fd6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
    6fd8:	4618      	mov	r0, r3
    6fda:	f003 f9cb 	bl	a374 <mp_emit_bc_label_assign>
    }
}
    6fde:	bf00      	nop
    6fe0:	3730      	adds	r7, #48	; 0x30
    6fe2:	46bd      	mov	sp, r7
    6fe4:	bd80      	pop	{r7, pc}
    6fe6:	bf00      	nop
    6fe8:	000206fc 	.word	0x000206fc
    6fec:	00020eb4 	.word	0x00020eb4
    6ff0:	00020234 	.word	0x00020234

00006ff4 <compile_for_stmt>:

STATIC void compile_for_stmt(compiler_t *comp, mp_parse_node_struct_t *pns) {
    6ff4:	b580      	push	{r7, lr}
    6ff6:	b096      	sub	sp, #88	; 0x58
    6ff8:	af04      	add	r7, sp, #16
    6ffa:	6078      	str	r0, [r7, #4]
    6ffc:	6039      	str	r1, [r7, #0]
    // this bit optimises: for <x> in range(...), turning it into an explicitly incremented variable
    // this is actually slower, but uses no heap memory
    // for viper it will be much, much faster
    if (/*comp->scope_cur->emit_options == MP_EMIT_OPT_VIPER &&*/ MP_PARSE_NODE_IS_ID(pns->nodes[0]) && MP_PARSE_NODE_IS_STRUCT_KIND(pns->nodes[1], PN_atom_expr_normal)) {
    6ffe:	683b      	ldr	r3, [r7, #0]
    7000:	689b      	ldr	r3, [r3, #8]
    7002:	f003 030f 	and.w	r3, r3, #15
    7006:	2b02      	cmp	r3, #2
    7008:	f040 80c3 	bne.w	7192 <compile_for_stmt+0x19e>
    700c:	683b      	ldr	r3, [r7, #0]
    700e:	68db      	ldr	r3, [r3, #12]
    7010:	2b00      	cmp	r3, #0
    7012:	f000 80be 	beq.w	7192 <compile_for_stmt+0x19e>
    7016:	683b      	ldr	r3, [r7, #0]
    7018:	68db      	ldr	r3, [r3, #12]
    701a:	f003 0303 	and.w	r3, r3, #3
    701e:	2b00      	cmp	r3, #0
    7020:	f040 80b7 	bne.w	7192 <compile_for_stmt+0x19e>
    7024:	683b      	ldr	r3, [r7, #0]
    7026:	68db      	ldr	r3, [r3, #12]
    7028:	685b      	ldr	r3, [r3, #4]
    702a:	b2db      	uxtb	r3, r3
    702c:	2b29      	cmp	r3, #41	; 0x29
    702e:	f040 80b0 	bne.w	7192 <compile_for_stmt+0x19e>
        mp_parse_node_struct_t *pns_it = (mp_parse_node_struct_t*)pns->nodes[1];
    7032:	683b      	ldr	r3, [r7, #0]
    7034:	68db      	ldr	r3, [r3, #12]
    7036:	637b      	str	r3, [r7, #52]	; 0x34
        if (MP_PARSE_NODE_IS_ID(pns_it->nodes[0])
    7038:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    703a:	689b      	ldr	r3, [r3, #8]
    703c:	f003 030f 	and.w	r3, r3, #15
    7040:	2b02      	cmp	r3, #2
    7042:	f040 80a6 	bne.w	7192 <compile_for_stmt+0x19e>
            && MP_PARSE_NODE_LEAF_ARG(pns_it->nodes[0]) == MP_QSTR_range
    7046:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    7048:	689b      	ldr	r3, [r3, #8]
    704a:	091b      	lsrs	r3, r3, #4
    704c:	f240 1253 	movw	r2, #339	; 0x153
    7050:	4293      	cmp	r3, r2
    7052:	f040 809e 	bne.w	7192 <compile_for_stmt+0x19e>
            && MP_PARSE_NODE_STRUCT_KIND((mp_parse_node_struct_t*)pns_it->nodes[1]) == PN_trailer_paren) {
    7056:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    7058:	68db      	ldr	r3, [r3, #12]
    705a:	685b      	ldr	r3, [r3, #4]
    705c:	b2db      	uxtb	r3, r3
    705e:	2b2d      	cmp	r3, #45	; 0x2d
    7060:	f040 8097 	bne.w	7192 <compile_for_stmt+0x19e>
            mp_parse_node_t pn_range_args = ((mp_parse_node_struct_t*)pns_it->nodes[1])->nodes[0];
    7064:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    7066:	68db      	ldr	r3, [r3, #12]
    7068:	689b      	ldr	r3, [r3, #8]
    706a:	613b      	str	r3, [r7, #16]
            mp_parse_node_t *args;
            int n_args = mp_parse_node_extract_list(&pn_range_args, PN_arglist, &args);
    706c:	f107 020c 	add.w	r2, r7, #12
    7070:	f107 0310 	add.w	r3, r7, #16
    7074:	2197      	movs	r1, #151	; 0x97
    7076:	4618      	mov	r0, r3
    7078:	f7fc fe34 	bl	3ce4 <mp_parse_node_extract_list>
    707c:	6338      	str	r0, [r7, #48]	; 0x30
            mp_parse_node_t pn_range_start;
            mp_parse_node_t pn_range_end;
            mp_parse_node_t pn_range_step;
            bool optimize = false;
    707e:	2300      	movs	r3, #0
    7080:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
            if (1 <= n_args && n_args <= 3) {
    7084:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    7086:	2b00      	cmp	r3, #0
    7088:	dd6f      	ble.n	716a <compile_for_stmt+0x176>
    708a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    708c:	2b03      	cmp	r3, #3
    708e:	dc6c      	bgt.n	716a <compile_for_stmt+0x176>
                optimize = true;
    7090:	2301      	movs	r3, #1
    7092:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
                if (n_args == 1) {
    7096:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    7098:	2b01      	cmp	r3, #1
    709a:	d10b      	bne.n	70b4 <compile_for_stmt+0xc0>
                    pn_range_start = mp_parse_node_new_small_int(0);
    709c:	2000      	movs	r0, #0
    709e:	f7fd fee7 	bl	4e70 <mp_parse_node_new_small_int>
    70a2:	6478      	str	r0, [r7, #68]	; 0x44
                    pn_range_end = args[0];
    70a4:	68fb      	ldr	r3, [r7, #12]
    70a6:	681b      	ldr	r3, [r3, #0]
    70a8:	643b      	str	r3, [r7, #64]	; 0x40
                    pn_range_step = mp_parse_node_new_small_int(1);
    70aa:	2001      	movs	r0, #1
    70ac:	f7fd fee0 	bl	4e70 <mp_parse_node_new_small_int>
    70b0:	63f8      	str	r0, [r7, #60]	; 0x3c
    70b2:	e022      	b.n	70fa <compile_for_stmt+0x106>
                } else if (n_args == 2) {
    70b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    70b6:	2b02      	cmp	r3, #2
    70b8:	d10a      	bne.n	70d0 <compile_for_stmt+0xdc>
                    pn_range_start = args[0];
    70ba:	68fb      	ldr	r3, [r7, #12]
    70bc:	681b      	ldr	r3, [r3, #0]
    70be:	647b      	str	r3, [r7, #68]	; 0x44
                    pn_range_end = args[1];
    70c0:	68fb      	ldr	r3, [r7, #12]
    70c2:	685b      	ldr	r3, [r3, #4]
    70c4:	643b      	str	r3, [r7, #64]	; 0x40
                    pn_range_step = mp_parse_node_new_small_int(1);
    70c6:	2001      	movs	r0, #1
    70c8:	f7fd fed2 	bl	4e70 <mp_parse_node_new_small_int>
    70cc:	63f8      	str	r0, [r7, #60]	; 0x3c
    70ce:	e014      	b.n	70fa <compile_for_stmt+0x106>
                } else {
                    pn_range_start = args[0];
    70d0:	68fb      	ldr	r3, [r7, #12]
    70d2:	681b      	ldr	r3, [r3, #0]
    70d4:	647b      	str	r3, [r7, #68]	; 0x44
                    pn_range_end = args[1];
    70d6:	68fb      	ldr	r3, [r7, #12]
    70d8:	685b      	ldr	r3, [r3, #4]
    70da:	643b      	str	r3, [r7, #64]	; 0x40
                    pn_range_step = args[2];
    70dc:	68fb      	ldr	r3, [r7, #12]
    70de:	689b      	ldr	r3, [r3, #8]
    70e0:	63fb      	str	r3, [r7, #60]	; 0x3c
                    // the step must be a non-zero constant integer to do the optimisation
                    if (!MP_PARSE_NODE_IS_SMALL_INT(pn_range_step)
    70e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    70e4:	f003 0301 	and.w	r3, r3, #1
    70e8:	2b00      	cmp	r3, #0
    70ea:	d003      	beq.n	70f4 <compile_for_stmt+0x100>
                        || MP_PARSE_NODE_LEAF_SMALL_INT(pn_range_step) == 0) {
    70ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    70ee:	105b      	asrs	r3, r3, #1
    70f0:	2b00      	cmp	r3, #0
    70f2:	d102      	bne.n	70fa <compile_for_stmt+0x106>
                        optimize = false;
    70f4:	2300      	movs	r3, #0
    70f6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
                    }
                }
                // arguments must be able to be compiled as standard expressions
                if (optimize && MP_PARSE_NODE_IS_STRUCT(pn_range_start)) {
    70fa:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
    70fe:	2b00      	cmp	r3, #0
    7100:	d017      	beq.n	7132 <compile_for_stmt+0x13e>
    7102:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    7104:	2b00      	cmp	r3, #0
    7106:	d014      	beq.n	7132 <compile_for_stmt+0x13e>
    7108:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    710a:	f003 0303 	and.w	r3, r3, #3
    710e:	2b00      	cmp	r3, #0
    7110:	d10f      	bne.n	7132 <compile_for_stmt+0x13e>
                    int k = MP_PARSE_NODE_STRUCT_KIND((mp_parse_node_struct_t*)pn_range_start);
    7112:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    7114:	685b      	ldr	r3, [r3, #4]
    7116:	b2db      	uxtb	r3, r3
    7118:	62fb      	str	r3, [r7, #44]	; 0x2c
                    if (k == PN_arglist_star || k == PN_arglist_dbl_star || k == PN_argument) {
    711a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    711c:	2b99      	cmp	r3, #153	; 0x99
    711e:	d005      	beq.n	712c <compile_for_stmt+0x138>
    7120:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    7122:	2b9a      	cmp	r3, #154	; 0x9a
    7124:	d002      	beq.n	712c <compile_for_stmt+0x138>
    7126:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    7128:	2b9b      	cmp	r3, #155	; 0x9b
    712a:	d102      	bne.n	7132 <compile_for_stmt+0x13e>
                        optimize = false;
    712c:	2300      	movs	r3, #0
    712e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
                    }
                }
                if (optimize && MP_PARSE_NODE_IS_STRUCT(pn_range_end)) {
    7132:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
    7136:	2b00      	cmp	r3, #0
    7138:	d017      	beq.n	716a <compile_for_stmt+0x176>
    713a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    713c:	2b00      	cmp	r3, #0
    713e:	d014      	beq.n	716a <compile_for_stmt+0x176>
    7140:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    7142:	f003 0303 	and.w	r3, r3, #3
    7146:	2b00      	cmp	r3, #0
    7148:	d10f      	bne.n	716a <compile_for_stmt+0x176>
                    int k = MP_PARSE_NODE_STRUCT_KIND((mp_parse_node_struct_t*)pn_range_end);
    714a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    714c:	685b      	ldr	r3, [r3, #4]
    714e:	b2db      	uxtb	r3, r3
    7150:	62bb      	str	r3, [r7, #40]	; 0x28
                    if (k == PN_arglist_star || k == PN_arglist_dbl_star || k == PN_argument) {
    7152:	6abb      	ldr	r3, [r7, #40]	; 0x28
    7154:	2b99      	cmp	r3, #153	; 0x99
    7156:	d005      	beq.n	7164 <compile_for_stmt+0x170>
    7158:	6abb      	ldr	r3, [r7, #40]	; 0x28
    715a:	2b9a      	cmp	r3, #154	; 0x9a
    715c:	d002      	beq.n	7164 <compile_for_stmt+0x170>
    715e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    7160:	2b9b      	cmp	r3, #155	; 0x9b
    7162:	d102      	bne.n	716a <compile_for_stmt+0x176>
                        optimize = false;
    7164:	2300      	movs	r3, #0
    7166:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
                    }
                }
            }
            if (optimize) {
    716a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
    716e:	2b00      	cmp	r3, #0
    7170:	d00f      	beq.n	7192 <compile_for_stmt+0x19e>
                compile_for_stmt_optimised_range(comp, pns->nodes[0], pn_range_start, pn_range_end, pn_range_step, pns->nodes[2], pns->nodes[3]);
    7172:	683b      	ldr	r3, [r7, #0]
    7174:	6899      	ldr	r1, [r3, #8]
    7176:	683b      	ldr	r3, [r7, #0]
    7178:	691b      	ldr	r3, [r3, #16]
    717a:	683a      	ldr	r2, [r7, #0]
    717c:	6952      	ldr	r2, [r2, #20]
    717e:	9202      	str	r2, [sp, #8]
    7180:	9301      	str	r3, [sp, #4]
    7182:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    7184:	9300      	str	r3, [sp, #0]
    7186:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    7188:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    718a:	6878      	ldr	r0, [r7, #4]
    718c:	f7ff fe30 	bl	6df0 <compile_for_stmt_optimised_range>
    7190:	e07f      	b.n	7292 <compile_for_stmt+0x29e>
                return;
            }
        }
    }

    START_BREAK_CONTINUE_BLOCK
    7192:	687b      	ldr	r3, [r7, #4]
    7194:	8b1b      	ldrh	r3, [r3, #24]
    7196:	84fb      	strh	r3, [r7, #38]	; 0x26
    7198:	687b      	ldr	r3, [r7, #4]
    719a:	8b5b      	ldrh	r3, [r3, #26]
    719c:	84bb      	strh	r3, [r7, #36]	; 0x24
    719e:	687b      	ldr	r3, [r7, #4]
    71a0:	8bdb      	ldrh	r3, [r3, #30]
    71a2:	847b      	strh	r3, [r7, #34]	; 0x22
    71a4:	6878      	ldr	r0, [r7, #4]
    71a6:	f7fd feb3 	bl	4f10 <comp_next_label>
    71aa:	61f8      	str	r0, [r7, #28]
    71ac:	6878      	ldr	r0, [r7, #4]
    71ae:	f7fd feaf 	bl	4f10 <comp_next_label>
    71b2:	61b8      	str	r0, [r7, #24]
    71b4:	69fb      	ldr	r3, [r7, #28]
    71b6:	b29a      	uxth	r2, r3
    71b8:	687b      	ldr	r3, [r7, #4]
    71ba:	831a      	strh	r2, [r3, #24]
    71bc:	69bb      	ldr	r3, [r7, #24]
    71be:	b29a      	uxth	r2, r3
    71c0:	687b      	ldr	r3, [r7, #4]
    71c2:	835a      	strh	r2, [r3, #26]
    71c4:	687b      	ldr	r3, [r7, #4]
    71c6:	8b9a      	ldrh	r2, [r3, #28]
    71c8:	687b      	ldr	r3, [r7, #4]
    71ca:	83da      	strh	r2, [r3, #30]
    comp->break_label |= MP_EMIT_BREAK_FROM_FOR;
    71cc:	687b      	ldr	r3, [r7, #4]
    71ce:	8b1b      	ldrh	r3, [r3, #24]
    71d0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
    71d4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
    71d8:	b29a      	uxth	r2, r3
    71da:	687b      	ldr	r3, [r7, #4]
    71dc:	831a      	strh	r2, [r3, #24]

    uint pop_label = comp_next_label(comp);
    71de:	6878      	ldr	r0, [r7, #4]
    71e0:	f7fd fe96 	bl	4f10 <comp_next_label>
    71e4:	6178      	str	r0, [r7, #20]

    compile_node(comp, pns->nodes[1]); // iterator
    71e6:	683b      	ldr	r3, [r7, #0]
    71e8:	68db      	ldr	r3, [r3, #12]
    71ea:	4619      	mov	r1, r3
    71ec:	6878      	ldr	r0, [r7, #4]
    71ee:	f001 fcd1 	bl	8b94 <compile_node>
    EMIT_ARG(get_iter, true);
    71f2:	687b      	ldr	r3, [r7, #4]
    71f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    71f6:	2101      	movs	r1, #1
    71f8:	4618      	mov	r0, r3
    71fa:	f003 fcc3 	bl	ab84 <mp_emit_bc_get_iter>
    EMIT_ARG(label_assign, continue_label);
    71fe:	687b      	ldr	r3, [r7, #4]
    7200:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7202:	69b9      	ldr	r1, [r7, #24]
    7204:	4618      	mov	r0, r3
    7206:	f003 f8b5 	bl	a374 <mp_emit_bc_label_assign>
    EMIT_ARG(for_iter, pop_label);
    720a:	687b      	ldr	r3, [r7, #4]
    720c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    720e:	6979      	ldr	r1, [r7, #20]
    7210:	4618      	mov	r0, r3
    7212:	f003 fcd5 	bl	abc0 <mp_emit_bc_for_iter>
    c_assign(comp, pns->nodes[0], ASSIGN_STORE); // variable
    7216:	683b      	ldr	r3, [r7, #0]
    7218:	689b      	ldr	r3, [r3, #8]
    721a:	2200      	movs	r2, #0
    721c:	4619      	mov	r1, r3
    721e:	6878      	ldr	r0, [r7, #4]
    7220:	f7fe fa9a 	bl	5758 <c_assign>
    compile_node(comp, pns->nodes[2]); // body
    7224:	683b      	ldr	r3, [r7, #0]
    7226:	691b      	ldr	r3, [r3, #16]
    7228:	4619      	mov	r1, r3
    722a:	6878      	ldr	r0, [r7, #4]
    722c:	f001 fcb2 	bl	8b94 <compile_node>
    if (!EMIT(last_emit_was_return_value)) {
    7230:	687b      	ldr	r3, [r7, #4]
    7232:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7234:	4618      	mov	r0, r3
    7236:	f003 f839 	bl	a2ac <mp_emit_bc_last_emit_was_return_value>
    723a:	4603      	mov	r3, r0
    723c:	f083 0301 	eor.w	r3, r3, #1
    7240:	b2db      	uxtb	r3, r3
    7242:	2b00      	cmp	r3, #0
    7244:	d005      	beq.n	7252 <compile_for_stmt+0x25e>
        EMIT_ARG(jump, continue_label);
    7246:	687b      	ldr	r3, [r7, #4]
    7248:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    724a:	69b9      	ldr	r1, [r7, #24]
    724c:	4618      	mov	r0, r3
    724e:	f003 fb99 	bl	a984 <mp_emit_bc_jump>
    }
    EMIT_ARG(label_assign, pop_label);
    7252:	687b      	ldr	r3, [r7, #4]
    7254:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7256:	6979      	ldr	r1, [r7, #20]
    7258:	4618      	mov	r0, r3
    725a:	f003 f88b 	bl	a374 <mp_emit_bc_label_assign>
    EMIT(for_iter_end);
    725e:	687b      	ldr	r3, [r7, #4]
    7260:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7262:	4618      	mov	r0, r3
    7264:	f003 fcbe 	bl	abe4 <mp_emit_bc_for_iter_end>

    // break/continue apply to outer loop (if any) in the else block
    END_BREAK_CONTINUE_BLOCK
    7268:	687b      	ldr	r3, [r7, #4]
    726a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    726c:	831a      	strh	r2, [r3, #24]
    726e:	687b      	ldr	r3, [r7, #4]
    7270:	8cba      	ldrh	r2, [r7, #36]	; 0x24
    7272:	835a      	strh	r2, [r3, #26]
    7274:	687b      	ldr	r3, [r7, #4]
    7276:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
    7278:	83da      	strh	r2, [r3, #30]

    compile_node(comp, pns->nodes[3]); // else (may be empty)
    727a:	683b      	ldr	r3, [r7, #0]
    727c:	695b      	ldr	r3, [r3, #20]
    727e:	4619      	mov	r1, r3
    7280:	6878      	ldr	r0, [r7, #4]
    7282:	f001 fc87 	bl	8b94 <compile_node>

    EMIT_ARG(label_assign, break_label);
    7286:	687b      	ldr	r3, [r7, #4]
    7288:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    728a:	69f9      	ldr	r1, [r7, #28]
    728c:	4618      	mov	r0, r3
    728e:	f003 f871 	bl	a374 <mp_emit_bc_label_assign>
}
    7292:	3748      	adds	r7, #72	; 0x48
    7294:	46bd      	mov	sp, r7
    7296:	bd80      	pop	{r7, pc}

00007298 <compile_try_except>:

STATIC void compile_try_except(compiler_t *comp, mp_parse_node_t pn_body, int n_except, mp_parse_node_t *pn_excepts, mp_parse_node_t pn_else) {
    7298:	b580      	push	{r7, lr}
    729a:	b08e      	sub	sp, #56	; 0x38
    729c:	af00      	add	r7, sp, #0
    729e:	60f8      	str	r0, [r7, #12]
    72a0:	60b9      	str	r1, [r7, #8]
    72a2:	607a      	str	r2, [r7, #4]
    72a4:	603b      	str	r3, [r7, #0]
    // setup code
    uint l1 = comp_next_label(comp);
    72a6:	68f8      	ldr	r0, [r7, #12]
    72a8:	f7fd fe32 	bl	4f10 <comp_next_label>
    72ac:	6278      	str	r0, [r7, #36]	; 0x24
    uint success_label = comp_next_label(comp);
    72ae:	68f8      	ldr	r0, [r7, #12]
    72b0:	f7fd fe2e 	bl	4f10 <comp_next_label>
    72b4:	6238      	str	r0, [r7, #32]

    EMIT_ARG(setup_except, l1);
    72b6:	68fb      	ldr	r3, [r7, #12]
    72b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    72ba:	6a79      	ldr	r1, [r7, #36]	; 0x24
    72bc:	4618      	mov	r0, r3
    72be:	f003 fc2b 	bl	ab18 <mp_emit_bc_setup_except>
    compile_increase_except_level(comp);
    72c2:	68f8      	ldr	r0, [r7, #12]
    72c4:	f7fd fe34 	bl	4f30 <compile_increase_except_level>

    compile_node(comp, pn_body); // body
    72c8:	68b9      	ldr	r1, [r7, #8]
    72ca:	68f8      	ldr	r0, [r7, #12]
    72cc:	f001 fc62 	bl	8b94 <compile_node>
    EMIT(pop_block);
    72d0:	68fb      	ldr	r3, [r7, #12]
    72d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    72d4:	4618      	mov	r0, r3
    72d6:	f003 fc93 	bl	ac00 <mp_emit_bc_pop_block>
    EMIT_ARG(jump, success_label); // jump over exception handler
    72da:	68fb      	ldr	r3, [r7, #12]
    72dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    72de:	6a39      	ldr	r1, [r7, #32]
    72e0:	4618      	mov	r0, r3
    72e2:	f003 fb4f 	bl	a984 <mp_emit_bc_jump>

    EMIT_ARG(label_assign, l1); // start of exception handler
    72e6:	68fb      	ldr	r3, [r7, #12]
    72e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    72ea:	6a79      	ldr	r1, [r7, #36]	; 0x24
    72ec:	4618      	mov	r0, r3
    72ee:	f003 f841 	bl	a374 <mp_emit_bc_label_assign>
    EMIT(start_except_handler);
    72f2:	68fb      	ldr	r3, [r7, #12]
    72f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    72f6:	4618      	mov	r0, r3
    72f8:	f003 fed8 	bl	b0ac <mp_emit_bc_start_except_handler>

    // at this point the top of the stack contains the exception instance that was raised

    uint l2 = comp_next_label(comp);
    72fc:	68f8      	ldr	r0, [r7, #12]
    72fe:	f7fd fe07 	bl	4f10 <comp_next_label>
    7302:	61f8      	str	r0, [r7, #28]

    for (int i = 0; i < n_except; i++) {
    7304:	2300      	movs	r3, #0
    7306:	637b      	str	r3, [r7, #52]	; 0x34
    7308:	e0dd      	b.n	74c6 <compile_try_except+0x22e>
        assert(MP_PARSE_NODE_IS_STRUCT_KIND(pn_excepts[i], PN_try_stmt_except)); // should be
    730a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    730c:	009b      	lsls	r3, r3, #2
    730e:	683a      	ldr	r2, [r7, #0]
    7310:	4413      	add	r3, r2
    7312:	681b      	ldr	r3, [r3, #0]
    7314:	2b00      	cmp	r3, #0
    7316:	d011      	beq.n	733c <compile_try_except+0xa4>
    7318:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    731a:	009b      	lsls	r3, r3, #2
    731c:	683a      	ldr	r2, [r7, #0]
    731e:	4413      	add	r3, r2
    7320:	681b      	ldr	r3, [r3, #0]
    7322:	f003 0303 	and.w	r3, r3, #3
    7326:	2b00      	cmp	r3, #0
    7328:	d108      	bne.n	733c <compile_try_except+0xa4>
    732a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    732c:	009b      	lsls	r3, r3, #2
    732e:	683a      	ldr	r2, [r7, #0]
    7330:	4413      	add	r3, r2
    7332:	681b      	ldr	r3, [r3, #0]
    7334:	685b      	ldr	r3, [r3, #4]
    7336:	b2db      	uxtb	r3, r3
    7338:	2b6e      	cmp	r3, #110	; 0x6e
    733a:	d006      	beq.n	734a <compile_try_except+0xb2>
    733c:	4b74      	ldr	r3, [pc, #464]	; (7510 <compile_try_except+0x278>)
    733e:	4a75      	ldr	r2, [pc, #468]	; (7514 <compile_try_except+0x27c>)
    7340:	f240 51fe 	movw	r1, #1534	; 0x5fe
    7344:	4874      	ldr	r0, [pc, #464]	; (7518 <compile_try_except+0x280>)
    7346:	f014 f9c3 	bl	1b6d0 <__assert_func>
        mp_parse_node_struct_t *pns_except = (mp_parse_node_struct_t*)pn_excepts[i];
    734a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    734c:	009b      	lsls	r3, r3, #2
    734e:	683a      	ldr	r2, [r7, #0]
    7350:	4413      	add	r3, r2
    7352:	681b      	ldr	r3, [r3, #0]
    7354:	61bb      	str	r3, [r7, #24]

        qstr qstr_exception_local = 0;
    7356:	2300      	movs	r3, #0
    7358:	633b      	str	r3, [r7, #48]	; 0x30
        uint end_finally_label = comp_next_label(comp);
    735a:	68f8      	ldr	r0, [r7, #12]
    735c:	f7fd fdd8 	bl	4f10 <comp_next_label>
    7360:	6178      	str	r0, [r7, #20]

        if (MP_PARSE_NODE_IS_NULL(pns_except->nodes[0])) {
    7362:	69bb      	ldr	r3, [r7, #24]
    7364:	689b      	ldr	r3, [r3, #8]
    7366:	2b00      	cmp	r3, #0
    7368:	d112      	bne.n	7390 <compile_try_except+0xf8>
            // this is a catch all exception handler
            if (i + 1 != n_except) {
    736a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    736c:	1c5a      	adds	r2, r3, #1
    736e:	687b      	ldr	r3, [r7, #4]
    7370:	429a      	cmp	r2, r3
    7372:	d03c      	beq.n	73ee <compile_try_except+0x156>
                compile_syntax_error(comp, pn_excepts[i], "default 'except' must be last");
    7374:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    7376:	009b      	lsls	r3, r3, #2
    7378:	683a      	ldr	r2, [r7, #0]
    737a:	4413      	add	r3, r2
    737c:	681b      	ldr	r3, [r3, #0]
    737e:	4a67      	ldr	r2, [pc, #412]	; (751c <compile_try_except+0x284>)
    7380:	4619      	mov	r1, r3
    7382:	68f8      	ldr	r0, [r7, #12]
    7384:	f7fd fda8 	bl	4ed8 <compile_syntax_error>
                compile_decrease_except_level(comp);
    7388:	68f8      	ldr	r0, [r7, #12]
    738a:	f7fd fded 	bl	4f68 <compile_decrease_except_level>
                return;
    738e:	e0bc      	b.n	750a <compile_try_except+0x272>
            }
        } else {
            // this exception handler requires a match to a certain type of exception
            mp_parse_node_t pns_exception_expr = pns_except->nodes[0];
    7390:	69bb      	ldr	r3, [r7, #24]
    7392:	689b      	ldr	r3, [r3, #8]
    7394:	62fb      	str	r3, [r7, #44]	; 0x2c
            if (MP_PARSE_NODE_IS_STRUCT(pns_exception_expr)) {
    7396:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    7398:	2b00      	cmp	r3, #0
    739a:	d012      	beq.n	73c2 <compile_try_except+0x12a>
    739c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    739e:	f003 0303 	and.w	r3, r3, #3
    73a2:	2b00      	cmp	r3, #0
    73a4:	d10d      	bne.n	73c2 <compile_try_except+0x12a>
                mp_parse_node_struct_t *pns3 = (mp_parse_node_struct_t*)pns_exception_expr;
    73a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    73a8:	613b      	str	r3, [r7, #16]
                if (MP_PARSE_NODE_STRUCT_KIND(pns3) == PN_try_stmt_as_name) {
    73aa:	693b      	ldr	r3, [r7, #16]
    73ac:	685b      	ldr	r3, [r3, #4]
    73ae:	b2db      	uxtb	r3, r3
    73b0:	2b6f      	cmp	r3, #111	; 0x6f
    73b2:	d106      	bne.n	73c2 <compile_try_except+0x12a>
                    // handler binds the exception to a local
                    pns_exception_expr = pns3->nodes[0];
    73b4:	693b      	ldr	r3, [r7, #16]
    73b6:	689b      	ldr	r3, [r3, #8]
    73b8:	62fb      	str	r3, [r7, #44]	; 0x2c
                    qstr_exception_local = MP_PARSE_NODE_LEAF_ARG(pns3->nodes[1]);
    73ba:	693b      	ldr	r3, [r7, #16]
    73bc:	68db      	ldr	r3, [r3, #12]
    73be:	091b      	lsrs	r3, r3, #4
    73c0:	633b      	str	r3, [r7, #48]	; 0x30
                }
            }
            EMIT(dup_top);
    73c2:	68fb      	ldr	r3, [r7, #12]
    73c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    73c6:	4618      	mov	r0, r3
    73c8:	f003 fa8a 	bl	a8e0 <mp_emit_bc_dup_top>
            compile_node(comp, pns_exception_expr);
    73cc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
    73ce:	68f8      	ldr	r0, [r7, #12]
    73d0:	f001 fbe0 	bl	8b94 <compile_node>
            EMIT_ARG(binary_op, MP_BINARY_OP_EXCEPTION_MATCH);
    73d4:	68fb      	ldr	r3, [r7, #12]
    73d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    73d8:	2108      	movs	r1, #8
    73da:	4618      	mov	r0, r3
    73dc:	f003 fc46 	bl	ac6c <mp_emit_bc_binary_op>
            EMIT_ARG(pop_jump_if, false, end_finally_label);
    73e0:	68fb      	ldr	r3, [r7, #12]
    73e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    73e4:	697a      	ldr	r2, [r7, #20]
    73e6:	2100      	movs	r1, #0
    73e8:	4618      	mov	r0, r3
    73ea:	f003 fadd 	bl	a9a8 <mp_emit_bc_pop_jump_if>
        }

        // either discard or store the exception instance
        if (qstr_exception_local == 0) {
    73ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    73f0:	2b00      	cmp	r3, #0
    73f2:	d105      	bne.n	7400 <compile_try_except+0x168>
            EMIT(pop_top);
    73f4:	68fb      	ldr	r3, [r7, #12]
    73f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    73f8:	4618      	mov	r0, r3
    73fa:	f003 fa91 	bl	a920 <mp_emit_bc_pop_top>
    73fe:	e003      	b.n	7408 <compile_try_except+0x170>
        } else {
            compile_store_id(comp, qstr_exception_local);
    7400:	6b39      	ldr	r1, [r7, #48]	; 0x30
    7402:	68f8      	ldr	r0, [r7, #12]
    7404:	f7fd fe88 	bl	5118 <compile_store_id>
        }

        uint l3 = 0;
    7408:	2300      	movs	r3, #0
    740a:	62bb      	str	r3, [r7, #40]	; 0x28
        if (qstr_exception_local != 0) {
    740c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    740e:	2b00      	cmp	r3, #0
    7410:	d00c      	beq.n	742c <compile_try_except+0x194>
            l3 = comp_next_label(comp);
    7412:	68f8      	ldr	r0, [r7, #12]
    7414:	f7fd fd7c 	bl	4f10 <comp_next_label>
    7418:	62b8      	str	r0, [r7, #40]	; 0x28
            EMIT_ARG(setup_finally, l3);
    741a:	68fb      	ldr	r3, [r7, #12]
    741c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    741e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
    7420:	4618      	mov	r0, r3
    7422:	f003 fb8b 	bl	ab3c <mp_emit_bc_setup_finally>
            compile_increase_except_level(comp);
    7426:	68f8      	ldr	r0, [r7, #12]
    7428:	f7fd fd82 	bl	4f30 <compile_increase_except_level>
        }
        compile_node(comp, pns_except->nodes[1]);
    742c:	69bb      	ldr	r3, [r7, #24]
    742e:	68db      	ldr	r3, [r3, #12]
    7430:	4619      	mov	r1, r3
    7432:	68f8      	ldr	r0, [r7, #12]
    7434:	f001 fbae 	bl	8b94 <compile_node>
        if (qstr_exception_local != 0) {
    7438:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    743a:	2b00      	cmp	r3, #0
    743c:	d004      	beq.n	7448 <compile_try_except+0x1b0>
            EMIT(pop_block);
    743e:	68fb      	ldr	r3, [r7, #12]
    7440:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7442:	4618      	mov	r0, r3
    7444:	f003 fbdc 	bl	ac00 <mp_emit_bc_pop_block>
        }
        EMIT(pop_except);
    7448:	68fb      	ldr	r3, [r7, #12]
    744a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    744c:	4618      	mov	r0, r3
    744e:	f003 fbe7 	bl	ac20 <mp_emit_bc_pop_except>
        if (qstr_exception_local != 0) {
    7452:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    7454:	2b00      	cmp	r3, #0
    7456:	d021      	beq.n	749c <compile_try_except+0x204>
            EMIT_ARG(load_const_tok, MP_TOKEN_KW_NONE);
    7458:	68fb      	ldr	r3, [r7, #12]
    745a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    745c:	210e      	movs	r1, #14
    745e:	4618      	mov	r0, r3
    7460:	f003 f816 	bl	a490 <mp_emit_bc_load_const_tok>
            EMIT_ARG(label_assign, l3);
    7464:	68fb      	ldr	r3, [r7, #12]
    7466:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7468:	6ab9      	ldr	r1, [r7, #40]	; 0x28
    746a:	4618      	mov	r0, r3
    746c:	f002 ff82 	bl	a374 <mp_emit_bc_label_assign>
            EMIT_ARG(load_const_tok, MP_TOKEN_KW_NONE);
    7470:	68fb      	ldr	r3, [r7, #12]
    7472:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7474:	210e      	movs	r1, #14
    7476:	4618      	mov	r0, r3
    7478:	f003 f80a 	bl	a490 <mp_emit_bc_load_const_tok>
            compile_store_id(comp, qstr_exception_local);
    747c:	6b39      	ldr	r1, [r7, #48]	; 0x30
    747e:	68f8      	ldr	r0, [r7, #12]
    7480:	f7fd fe4a 	bl	5118 <compile_store_id>
            compile_delete_id(comp, qstr_exception_local);
    7484:	6b39      	ldr	r1, [r7, #48]	; 0x30
    7486:	68f8      	ldr	r0, [r7, #12]
    7488:	f7fd fe64 	bl	5154 <compile_delete_id>

            compile_decrease_except_level(comp);
    748c:	68f8      	ldr	r0, [r7, #12]
    748e:	f7fd fd6b 	bl	4f68 <compile_decrease_except_level>
            EMIT(end_finally);
    7492:	68fb      	ldr	r3, [r7, #12]
    7494:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7496:	4618      	mov	r0, r3
    7498:	f003 fb62 	bl	ab60 <mp_emit_bc_end_finally>
        }
        EMIT_ARG(jump, l2);
    749c:	68fb      	ldr	r3, [r7, #12]
    749e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    74a0:	69f9      	ldr	r1, [r7, #28]
    74a2:	4618      	mov	r0, r3
    74a4:	f003 fa6e 	bl	a984 <mp_emit_bc_jump>
        EMIT_ARG(label_assign, end_finally_label);
    74a8:	68fb      	ldr	r3, [r7, #12]
    74aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    74ac:	6979      	ldr	r1, [r7, #20]
    74ae:	4618      	mov	r0, r3
    74b0:	f002 ff60 	bl	a374 <mp_emit_bc_label_assign>
        EMIT_ARG(adjust_stack_size, 1); // stack adjust for the exception instance
    74b4:	68fb      	ldr	r3, [r7, #12]
    74b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    74b8:	2101      	movs	r1, #1
    74ba:	4618      	mov	r0, r3
    74bc:	f002 ff08 	bl	a2d0 <mp_emit_bc_adjust_stack_size>
    for (int i = 0; i < n_except; i++) {
    74c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    74c2:	3301      	adds	r3, #1
    74c4:	637b      	str	r3, [r7, #52]	; 0x34
    74c6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    74c8:	687b      	ldr	r3, [r7, #4]
    74ca:	429a      	cmp	r2, r3
    74cc:	f6ff af1d 	blt.w	730a <compile_try_except+0x72>
    }

    compile_decrease_except_level(comp);
    74d0:	68f8      	ldr	r0, [r7, #12]
    74d2:	f7fd fd49 	bl	4f68 <compile_decrease_except_level>
    EMIT(end_finally);
    74d6:	68fb      	ldr	r3, [r7, #12]
    74d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    74da:	4618      	mov	r0, r3
    74dc:	f003 fb40 	bl	ab60 <mp_emit_bc_end_finally>
    EMIT(end_except_handler);
    74e0:	68fb      	ldr	r3, [r7, #12]
    74e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    74e4:	4618      	mov	r0, r3
    74e6:	f003 fded 	bl	b0c4 <mp_emit_bc_end_except_handler>

    EMIT_ARG(label_assign, success_label);
    74ea:	68fb      	ldr	r3, [r7, #12]
    74ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    74ee:	6a39      	ldr	r1, [r7, #32]
    74f0:	4618      	mov	r0, r3
    74f2:	f002 ff3f 	bl	a374 <mp_emit_bc_label_assign>
    compile_node(comp, pn_else); // else block, can be null
    74f6:	6c39      	ldr	r1, [r7, #64]	; 0x40
    74f8:	68f8      	ldr	r0, [r7, #12]
    74fa:	f001 fb4b 	bl	8b94 <compile_node>
    EMIT_ARG(label_assign, l2);
    74fe:	68fb      	ldr	r3, [r7, #12]
    7500:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7502:	69f9      	ldr	r1, [r7, #28]
    7504:	4618      	mov	r0, r3
    7506:	f002 ff35 	bl	a374 <mp_emit_bc_label_assign>
}
    750a:	3738      	adds	r7, #56	; 0x38
    750c:	46bd      	mov	sp, r7
    750e:	bd80      	pop	{r7, pc}
    7510:	00020720 	.word	0x00020720
    7514:	00020ed8 	.word	0x00020ed8
    7518:	00020234 	.word	0x00020234
    751c:	00020760 	.word	0x00020760

00007520 <compile_try_finally>:

STATIC void compile_try_finally(compiler_t *comp, mp_parse_node_t pn_body, int n_except, mp_parse_node_t *pn_except, mp_parse_node_t pn_else, mp_parse_node_t pn_finally) {
    7520:	b580      	push	{r7, lr}
    7522:	b088      	sub	sp, #32
    7524:	af02      	add	r7, sp, #8
    7526:	60f8      	str	r0, [r7, #12]
    7528:	60b9      	str	r1, [r7, #8]
    752a:	607a      	str	r2, [r7, #4]
    752c:	603b      	str	r3, [r7, #0]
    uint l_finally_block = comp_next_label(comp);
    752e:	68f8      	ldr	r0, [r7, #12]
    7530:	f7fd fcee 	bl	4f10 <comp_next_label>
    7534:	6178      	str	r0, [r7, #20]

    EMIT_ARG(setup_finally, l_finally_block);
    7536:	68fb      	ldr	r3, [r7, #12]
    7538:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    753a:	6979      	ldr	r1, [r7, #20]
    753c:	4618      	mov	r0, r3
    753e:	f003 fafd 	bl	ab3c <mp_emit_bc_setup_finally>
    compile_increase_except_level(comp);
    7542:	68f8      	ldr	r0, [r7, #12]
    7544:	f7fd fcf4 	bl	4f30 <compile_increase_except_level>

    if (n_except == 0) {
    7548:	687b      	ldr	r3, [r7, #4]
    754a:	2b00      	cmp	r3, #0
    754c:	d11b      	bne.n	7586 <compile_try_finally+0x66>
        assert(MP_PARSE_NODE_IS_NULL(pn_else));
    754e:	6a3b      	ldr	r3, [r7, #32]
    7550:	2b00      	cmp	r3, #0
    7552:	d006      	beq.n	7562 <compile_try_finally+0x42>
    7554:	4b20      	ldr	r3, [pc, #128]	; (75d8 <compile_try_finally+0xb8>)
    7556:	4a21      	ldr	r2, [pc, #132]	; (75dc <compile_try_finally+0xbc>)
    7558:	f240 614d 	movw	r1, #1613	; 0x64d
    755c:	4820      	ldr	r0, [pc, #128]	; (75e0 <compile_try_finally+0xc0>)
    755e:	f014 f8b7 	bl	1b6d0 <__assert_func>
        EMIT_ARG(adjust_stack_size, 3); // stack adjust for possible UNWIND_JUMP state
    7562:	68fb      	ldr	r3, [r7, #12]
    7564:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7566:	2103      	movs	r1, #3
    7568:	4618      	mov	r0, r3
    756a:	f002 feb1 	bl	a2d0 <mp_emit_bc_adjust_stack_size>
        compile_node(comp, pn_body);
    756e:	68b9      	ldr	r1, [r7, #8]
    7570:	68f8      	ldr	r0, [r7, #12]
    7572:	f001 fb0f 	bl	8b94 <compile_node>
        EMIT_ARG(adjust_stack_size, -3);
    7576:	68fb      	ldr	r3, [r7, #12]
    7578:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    757a:	f06f 0102 	mvn.w	r1, #2
    757e:	4618      	mov	r0, r3
    7580:	f002 fea6 	bl	a2d0 <mp_emit_bc_adjust_stack_size>
    7584:	e007      	b.n	7596 <compile_try_finally+0x76>
    } else {
        compile_try_except(comp, pn_body, n_except, pn_except, pn_else);
    7586:	6a3b      	ldr	r3, [r7, #32]
    7588:	9300      	str	r3, [sp, #0]
    758a:	683b      	ldr	r3, [r7, #0]
    758c:	687a      	ldr	r2, [r7, #4]
    758e:	68b9      	ldr	r1, [r7, #8]
    7590:	68f8      	ldr	r0, [r7, #12]
    7592:	f7ff fe81 	bl	7298 <compile_try_except>
    }
    EMIT(pop_block);
    7596:	68fb      	ldr	r3, [r7, #12]
    7598:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    759a:	4618      	mov	r0, r3
    759c:	f003 fb30 	bl	ac00 <mp_emit_bc_pop_block>
    EMIT_ARG(load_const_tok, MP_TOKEN_KW_NONE);
    75a0:	68fb      	ldr	r3, [r7, #12]
    75a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    75a4:	210e      	movs	r1, #14
    75a6:	4618      	mov	r0, r3
    75a8:	f002 ff72 	bl	a490 <mp_emit_bc_load_const_tok>
    EMIT_ARG(label_assign, l_finally_block);
    75ac:	68fb      	ldr	r3, [r7, #12]
    75ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    75b0:	6979      	ldr	r1, [r7, #20]
    75b2:	4618      	mov	r0, r3
    75b4:	f002 fede 	bl	a374 <mp_emit_bc_label_assign>
    compile_node(comp, pn_finally);
    75b8:	6a79      	ldr	r1, [r7, #36]	; 0x24
    75ba:	68f8      	ldr	r0, [r7, #12]
    75bc:	f001 faea 	bl	8b94 <compile_node>

    compile_decrease_except_level(comp);
    75c0:	68f8      	ldr	r0, [r7, #12]
    75c2:	f7fd fcd1 	bl	4f68 <compile_decrease_except_level>
    EMIT(end_finally);
    75c6:	68fb      	ldr	r3, [r7, #12]
    75c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    75ca:	4618      	mov	r0, r3
    75cc:	f003 fac8 	bl	ab60 <mp_emit_bc_end_finally>
}
    75d0:	bf00      	nop
    75d2:	3718      	adds	r7, #24
    75d4:	46bd      	mov	sp, r7
    75d6:	bd80      	pop	{r7, pc}
    75d8:	00020780 	.word	0x00020780
    75dc:	00020eec 	.word	0x00020eec
    75e0:	00020234 	.word	0x00020234

000075e4 <compile_try_stmt>:

STATIC void compile_try_stmt(compiler_t *comp, mp_parse_node_struct_t *pns) {
    75e4:	b580      	push	{r7, lr}
    75e6:	b08a      	sub	sp, #40	; 0x28
    75e8:	af02      	add	r7, sp, #8
    75ea:	6078      	str	r0, [r7, #4]
    75ec:	6039      	str	r1, [r7, #0]
    assert(MP_PARSE_NODE_IS_STRUCT(pns->nodes[1])); // should be
    75ee:	683b      	ldr	r3, [r7, #0]
    75f0:	68db      	ldr	r3, [r3, #12]
    75f2:	2b00      	cmp	r3, #0
    75f4:	d005      	beq.n	7602 <compile_try_stmt+0x1e>
    75f6:	683b      	ldr	r3, [r7, #0]
    75f8:	68db      	ldr	r3, [r3, #12]
    75fa:	f003 0303 	and.w	r3, r3, #3
    75fe:	2b00      	cmp	r3, #0
    7600:	d006      	beq.n	7610 <compile_try_stmt+0x2c>
    7602:	4b30      	ldr	r3, [pc, #192]	; (76c4 <compile_try_stmt+0xe0>)
    7604:	4a30      	ldr	r2, [pc, #192]	; (76c8 <compile_try_stmt+0xe4>)
    7606:	f240 615e 	movw	r1, #1630	; 0x65e
    760a:	4830      	ldr	r0, [pc, #192]	; (76cc <compile_try_stmt+0xe8>)
    760c:	f014 f860 	bl	1b6d0 <__assert_func>
    {
        mp_parse_node_struct_t *pns2 = (mp_parse_node_struct_t*)pns->nodes[1];
    7610:	683b      	ldr	r3, [r7, #0]
    7612:	68db      	ldr	r3, [r3, #12]
    7614:	61fb      	str	r3, [r7, #28]
        if (MP_PARSE_NODE_STRUCT_KIND(pns2) == PN_try_stmt_finally) {
    7616:	69fb      	ldr	r3, [r7, #28]
    7618:	685b      	ldr	r3, [r3, #4]
    761a:	b2db      	uxtb	r3, r3
    761c:	2b71      	cmp	r3, #113	; 0x71
    761e:	d10c      	bne.n	763a <compile_try_stmt+0x56>
            // just try-finally
            compile_try_finally(comp, pns->nodes[0], 0, NULL, MP_PARSE_NODE_NULL, pns2->nodes[0]);
    7620:	683b      	ldr	r3, [r7, #0]
    7622:	6899      	ldr	r1, [r3, #8]
    7624:	69fb      	ldr	r3, [r7, #28]
    7626:	689b      	ldr	r3, [r3, #8]
    7628:	9301      	str	r3, [sp, #4]
    762a:	2300      	movs	r3, #0
    762c:	9300      	str	r3, [sp, #0]
    762e:	2300      	movs	r3, #0
    7630:	2200      	movs	r2, #0
    7632:	6878      	ldr	r0, [r7, #4]
    7634:	f7ff ff74 	bl	7520 <compile_try_finally>
            mp_parse_node_t *pn_excepts;
            int n_except = mp_parse_node_extract_list(&pns->nodes[1], PN_try_stmt_except_list, &pn_excepts);
            compile_try_except(comp, pns->nodes[0], n_except, pn_excepts, MP_PARSE_NODE_NULL);
        }
    }
}
    7638:	e040      	b.n	76bc <compile_try_stmt+0xd8>
        } else if (MP_PARSE_NODE_STRUCT_KIND(pns2) == PN_try_stmt_except_and_more) {
    763a:	69fb      	ldr	r3, [r7, #28]
    763c:	685b      	ldr	r3, [r3, #4]
    763e:	b2db      	uxtb	r3, r3
    7640:	2b6d      	cmp	r3, #109	; 0x6d
    7642:	d128      	bne.n	7696 <compile_try_stmt+0xb2>
            int n_except = mp_parse_node_extract_list(&pns2->nodes[0], PN_try_stmt_except_list, &pn_excepts);
    7644:	69fb      	ldr	r3, [r7, #28]
    7646:	3308      	adds	r3, #8
    7648:	f107 0210 	add.w	r2, r7, #16
    764c:	2170      	movs	r1, #112	; 0x70
    764e:	4618      	mov	r0, r3
    7650:	f7fc fb48 	bl	3ce4 <mp_parse_node_extract_list>
    7654:	61b8      	str	r0, [r7, #24]
            if (MP_PARSE_NODE_IS_NULL(pns2->nodes[2])) {
    7656:	69fb      	ldr	r3, [r7, #28]
    7658:	691b      	ldr	r3, [r3, #16]
    765a:	2b00      	cmp	r3, #0
    765c:	d10b      	bne.n	7676 <compile_try_stmt+0x92>
                compile_try_except(comp, pns->nodes[0], n_except, pn_excepts, pns2->nodes[1]);
    765e:	683b      	ldr	r3, [r7, #0]
    7660:	6899      	ldr	r1, [r3, #8]
    7662:	693a      	ldr	r2, [r7, #16]
    7664:	69fb      	ldr	r3, [r7, #28]
    7666:	68db      	ldr	r3, [r3, #12]
    7668:	9300      	str	r3, [sp, #0]
    766a:	4613      	mov	r3, r2
    766c:	69ba      	ldr	r2, [r7, #24]
    766e:	6878      	ldr	r0, [r7, #4]
    7670:	f7ff fe12 	bl	7298 <compile_try_except>
}
    7674:	e022      	b.n	76bc <compile_try_stmt+0xd8>
                compile_try_finally(comp, pns->nodes[0], n_except, pn_excepts, pns2->nodes[1], ((mp_parse_node_struct_t*)pns2->nodes[2])->nodes[0]);
    7676:	683b      	ldr	r3, [r7, #0]
    7678:	6899      	ldr	r1, [r3, #8]
    767a:	6938      	ldr	r0, [r7, #16]
    767c:	69fb      	ldr	r3, [r7, #28]
    767e:	68db      	ldr	r3, [r3, #12]
    7680:	69fa      	ldr	r2, [r7, #28]
    7682:	6912      	ldr	r2, [r2, #16]
    7684:	6892      	ldr	r2, [r2, #8]
    7686:	9201      	str	r2, [sp, #4]
    7688:	9300      	str	r3, [sp, #0]
    768a:	4603      	mov	r3, r0
    768c:	69ba      	ldr	r2, [r7, #24]
    768e:	6878      	ldr	r0, [r7, #4]
    7690:	f7ff ff46 	bl	7520 <compile_try_finally>
}
    7694:	e012      	b.n	76bc <compile_try_stmt+0xd8>
            int n_except = mp_parse_node_extract_list(&pns->nodes[1], PN_try_stmt_except_list, &pn_excepts);
    7696:	683b      	ldr	r3, [r7, #0]
    7698:	330c      	adds	r3, #12
    769a:	f107 020c 	add.w	r2, r7, #12
    769e:	2170      	movs	r1, #112	; 0x70
    76a0:	4618      	mov	r0, r3
    76a2:	f7fc fb1f 	bl	3ce4 <mp_parse_node_extract_list>
    76a6:	6178      	str	r0, [r7, #20]
            compile_try_except(comp, pns->nodes[0], n_except, pn_excepts, MP_PARSE_NODE_NULL);
    76a8:	683b      	ldr	r3, [r7, #0]
    76aa:	6899      	ldr	r1, [r3, #8]
    76ac:	68fa      	ldr	r2, [r7, #12]
    76ae:	2300      	movs	r3, #0
    76b0:	9300      	str	r3, [sp, #0]
    76b2:	4613      	mov	r3, r2
    76b4:	697a      	ldr	r2, [r7, #20]
    76b6:	6878      	ldr	r0, [r7, #4]
    76b8:	f7ff fdee 	bl	7298 <compile_try_except>
}
    76bc:	bf00      	nop
    76be:	3720      	adds	r7, #32
    76c0:	46bd      	mov	sp, r7
    76c2:	bd80      	pop	{r7, pc}
    76c4:	000207a0 	.word	0x000207a0
    76c8:	00020f00 	.word	0x00020f00
    76cc:	00020234 	.word	0x00020234

000076d0 <compile_with_stmt_helper>:

STATIC void compile_with_stmt_helper(compiler_t *comp, int n, mp_parse_node_t *nodes, mp_parse_node_t body) {
    76d0:	b580      	push	{r7, lr}
    76d2:	b086      	sub	sp, #24
    76d4:	af00      	add	r7, sp, #0
    76d6:	60f8      	str	r0, [r7, #12]
    76d8:	60b9      	str	r1, [r7, #8]
    76da:	607a      	str	r2, [r7, #4]
    76dc:	603b      	str	r3, [r7, #0]
    if (n == 0) {
    76de:	68bb      	ldr	r3, [r7, #8]
    76e0:	2b00      	cmp	r3, #0
    76e2:	d104      	bne.n	76ee <compile_with_stmt_helper+0x1e>
        // no more pre-bits, compile the body of the with
        compile_node(comp, body);
    76e4:	6839      	ldr	r1, [r7, #0]
    76e6:	68f8      	ldr	r0, [r7, #12]
    76e8:	f001 fa54 	bl	8b94 <compile_node>
        // finish this with block
        EMIT_ARG(with_cleanup, l_end);
        compile_decrease_except_level(comp);
        EMIT(end_finally);
    }
}
    76ec:	e054      	b.n	7798 <compile_with_stmt_helper+0xc8>
        uint l_end = comp_next_label(comp);
    76ee:	68f8      	ldr	r0, [r7, #12]
    76f0:	f7fd fc0e 	bl	4f10 <comp_next_label>
    76f4:	6178      	str	r0, [r7, #20]
        if (MP_PARSE_NODE_IS_STRUCT_KIND(nodes[0], PN_with_item)) {
    76f6:	687b      	ldr	r3, [r7, #4]
    76f8:	681b      	ldr	r3, [r3, #0]
    76fa:	2b00      	cmp	r3, #0
    76fc:	d022      	beq.n	7744 <compile_with_stmt_helper+0x74>
    76fe:	687b      	ldr	r3, [r7, #4]
    7700:	681b      	ldr	r3, [r3, #0]
    7702:	f003 0303 	and.w	r3, r3, #3
    7706:	2b00      	cmp	r3, #0
    7708:	d11c      	bne.n	7744 <compile_with_stmt_helper+0x74>
    770a:	687b      	ldr	r3, [r7, #4]
    770c:	681b      	ldr	r3, [r3, #0]
    770e:	685b      	ldr	r3, [r3, #4]
    7710:	b2db      	uxtb	r3, r3
    7712:	2b74      	cmp	r3, #116	; 0x74
    7714:	d116      	bne.n	7744 <compile_with_stmt_helper+0x74>
            mp_parse_node_struct_t *pns = (mp_parse_node_struct_t*)nodes[0];
    7716:	687b      	ldr	r3, [r7, #4]
    7718:	681b      	ldr	r3, [r3, #0]
    771a:	613b      	str	r3, [r7, #16]
            compile_node(comp, pns->nodes[0]);
    771c:	693b      	ldr	r3, [r7, #16]
    771e:	689b      	ldr	r3, [r3, #8]
    7720:	4619      	mov	r1, r3
    7722:	68f8      	ldr	r0, [r7, #12]
    7724:	f001 fa36 	bl	8b94 <compile_node>
            EMIT_ARG(setup_with, l_end);
    7728:	68fb      	ldr	r3, [r7, #12]
    772a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    772c:	6979      	ldr	r1, [r7, #20]
    772e:	4618      	mov	r0, r3
    7730:	f003 f9be 	bl	aab0 <mp_emit_bc_setup_with>
            c_assign(comp, pns->nodes[1], ASSIGN_STORE);
    7734:	693b      	ldr	r3, [r7, #16]
    7736:	68db      	ldr	r3, [r3, #12]
    7738:	2200      	movs	r2, #0
    773a:	4619      	mov	r1, r3
    773c:	68f8      	ldr	r0, [r7, #12]
    773e:	f7fe f80b 	bl	5758 <c_assign>
        if (MP_PARSE_NODE_IS_STRUCT_KIND(nodes[0], PN_with_item)) {
    7742:	e010      	b.n	7766 <compile_with_stmt_helper+0x96>
            compile_node(comp, nodes[0]);
    7744:	687b      	ldr	r3, [r7, #4]
    7746:	681b      	ldr	r3, [r3, #0]
    7748:	4619      	mov	r1, r3
    774a:	68f8      	ldr	r0, [r7, #12]
    774c:	f001 fa22 	bl	8b94 <compile_node>
            EMIT_ARG(setup_with, l_end);
    7750:	68fb      	ldr	r3, [r7, #12]
    7752:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7754:	6979      	ldr	r1, [r7, #20]
    7756:	4618      	mov	r0, r3
    7758:	f003 f9aa 	bl	aab0 <mp_emit_bc_setup_with>
            EMIT(pop_top);
    775c:	68fb      	ldr	r3, [r7, #12]
    775e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7760:	4618      	mov	r0, r3
    7762:	f003 f8dd 	bl	a920 <mp_emit_bc_pop_top>
        compile_increase_except_level(comp);
    7766:	68f8      	ldr	r0, [r7, #12]
    7768:	f7fd fbe2 	bl	4f30 <compile_increase_except_level>
        compile_with_stmt_helper(comp, n - 1, nodes + 1, body);
    776c:	68bb      	ldr	r3, [r7, #8]
    776e:	1e59      	subs	r1, r3, #1
    7770:	687b      	ldr	r3, [r7, #4]
    7772:	1d1a      	adds	r2, r3, #4
    7774:	683b      	ldr	r3, [r7, #0]
    7776:	68f8      	ldr	r0, [r7, #12]
    7778:	f7ff ffaa 	bl	76d0 <compile_with_stmt_helper>
        EMIT_ARG(with_cleanup, l_end);
    777c:	68fb      	ldr	r3, [r7, #12]
    777e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7780:	6979      	ldr	r1, [r7, #20]
    7782:	4618      	mov	r0, r3
    7784:	f003 f9a6 	bl	aad4 <mp_emit_bc_with_cleanup>
        compile_decrease_except_level(comp);
    7788:	68f8      	ldr	r0, [r7, #12]
    778a:	f7fd fbed 	bl	4f68 <compile_decrease_except_level>
        EMIT(end_finally);
    778e:	68fb      	ldr	r3, [r7, #12]
    7790:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7792:	4618      	mov	r0, r3
    7794:	f003 f9e4 	bl	ab60 <mp_emit_bc_end_finally>
}
    7798:	bf00      	nop
    779a:	3718      	adds	r7, #24
    779c:	46bd      	mov	sp, r7
    779e:	bd80      	pop	{r7, pc}

000077a0 <compile_with_stmt>:

STATIC void compile_with_stmt(compiler_t *comp, mp_parse_node_struct_t *pns) {
    77a0:	b580      	push	{r7, lr}
    77a2:	b084      	sub	sp, #16
    77a4:	af00      	add	r7, sp, #0
    77a6:	6078      	str	r0, [r7, #4]
    77a8:	6039      	str	r1, [r7, #0]
    // get the nodes for the pre-bit of the with (the a as b, c as d, ... bit)
    mp_parse_node_t *nodes;
    int n = mp_parse_node_extract_list(&pns->nodes[0], PN_with_stmt_list, &nodes);
    77aa:	683b      	ldr	r3, [r7, #0]
    77ac:	3308      	adds	r3, #8
    77ae:	f107 0208 	add.w	r2, r7, #8
    77b2:	2173      	movs	r1, #115	; 0x73
    77b4:	4618      	mov	r0, r3
    77b6:	f7fc fa95 	bl	3ce4 <mp_parse_node_extract_list>
    77ba:	60f8      	str	r0, [r7, #12]
    assert(n > 0);
    77bc:	68fb      	ldr	r3, [r7, #12]
    77be:	2b00      	cmp	r3, #0
    77c0:	dc06      	bgt.n	77d0 <compile_with_stmt+0x30>
    77c2:	4b09      	ldr	r3, [pc, #36]	; (77e8 <compile_with_stmt+0x48>)
    77c4:	4a09      	ldr	r2, [pc, #36]	; (77ec <compile_with_stmt+0x4c>)
    77c6:	f240 619d 	movw	r1, #1693	; 0x69d
    77ca:	4809      	ldr	r0, [pc, #36]	; (77f0 <compile_with_stmt+0x50>)
    77cc:	f013 ff80 	bl	1b6d0 <__assert_func>

    // compile in a nested fashion
    compile_with_stmt_helper(comp, n, nodes, pns->nodes[1]);
    77d0:	68ba      	ldr	r2, [r7, #8]
    77d2:	683b      	ldr	r3, [r7, #0]
    77d4:	68db      	ldr	r3, [r3, #12]
    77d6:	68f9      	ldr	r1, [r7, #12]
    77d8:	6878      	ldr	r0, [r7, #4]
    77da:	f7ff ff79 	bl	76d0 <compile_with_stmt_helper>
}
    77de:	bf00      	nop
    77e0:	3710      	adds	r7, #16
    77e2:	46bd      	mov	sp, r7
    77e4:	bd80      	pop	{r7, pc}
    77e6:	bf00      	nop
    77e8:	000207c8 	.word	0x000207c8
    77ec:	00020f14 	.word	0x00020f14
    77f0:	00020234 	.word	0x00020234

000077f4 <compile_yield_from>:

STATIC void compile_yield_from(compiler_t *comp) {
    77f4:	b580      	push	{r7, lr}
    77f6:	b082      	sub	sp, #8
    77f8:	af00      	add	r7, sp, #0
    77fa:	6078      	str	r0, [r7, #4]
    EMIT_ARG(get_iter, false);
    77fc:	687b      	ldr	r3, [r7, #4]
    77fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7800:	2100      	movs	r1, #0
    7802:	4618      	mov	r0, r3
    7804:	f003 f9be 	bl	ab84 <mp_emit_bc_get_iter>
    EMIT_ARG(load_const_tok, MP_TOKEN_KW_NONE);
    7808:	687b      	ldr	r3, [r7, #4]
    780a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    780c:	210e      	movs	r1, #14
    780e:	4618      	mov	r0, r3
    7810:	f002 fe3e 	bl	a490 <mp_emit_bc_load_const_tok>
    EMIT(yield_from);
    7814:	687b      	ldr	r3, [r7, #4]
    7816:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7818:	4618      	mov	r0, r3
    781a:	f003 fc2d 	bl	b078 <mp_emit_bc_yield_from>
}
    781e:	bf00      	nop
    7820:	3708      	adds	r7, #8
    7822:	46bd      	mov	sp, r7
    7824:	bd80      	pop	{r7, pc}
    7826:	bf00      	nop

00007828 <compile_expr_stmt>:
        compile_async_with_stmt(comp, pns0);
    }
}
#endif

STATIC void compile_expr_stmt(compiler_t *comp, mp_parse_node_struct_t *pns) {
    7828:	b580      	push	{r7, lr}
    782a:	b088      	sub	sp, #32
    782c:	af00      	add	r7, sp, #0
    782e:	6078      	str	r0, [r7, #4]
    7830:	6039      	str	r1, [r7, #0]
    if (MP_PARSE_NODE_IS_NULL(pns->nodes[1])) {
    7832:	683b      	ldr	r3, [r7, #0]
    7834:	68db      	ldr	r3, [r3, #12]
    7836:	2b00      	cmp	r3, #0
    7838:	d149      	bne.n	78ce <compile_expr_stmt+0xa6>
        if (comp->is_repl && comp->scope_cur->kind == SCOPE_MODULE) {
    783a:	687b      	ldr	r3, [r7, #4]
    783c:	791b      	ldrb	r3, [r3, #4]
    783e:	2b00      	cmp	r3, #0
    7840:	d01b      	beq.n	787a <compile_expr_stmt+0x52>
    7842:	687b      	ldr	r3, [r7, #4]
    7844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    7846:	681b      	ldr	r3, [r3, #0]
    7848:	2b00      	cmp	r3, #0
    784a:	d116      	bne.n	787a <compile_expr_stmt+0x52>
            // for REPL, evaluate then print the expression
            compile_load_id(comp, MP_QSTR___repl_print__);
    784c:	2121      	movs	r1, #33	; 0x21
    784e:	6878      	ldr	r0, [r7, #4]
    7850:	f7fd fc44 	bl	50dc <compile_load_id>
            compile_node(comp, pns->nodes[0]);
    7854:	683b      	ldr	r3, [r7, #0]
    7856:	689b      	ldr	r3, [r3, #8]
    7858:	4619      	mov	r1, r3
    785a:	6878      	ldr	r0, [r7, #4]
    785c:	f001 f99a 	bl	8b94 <compile_node>
            EMIT_ARG(call_function, 1, 0, 0);
    7860:	687b      	ldr	r3, [r7, #4]
    7862:	6a98      	ldr	r0, [r3, #40]	; 0x28
    7864:	2300      	movs	r3, #0
    7866:	2200      	movs	r2, #0
    7868:	2101      	movs	r1, #1
    786a:	f003 fb85 	bl	af78 <mp_emit_bc_call_function>
            EMIT(pop_top);
    786e:	687b      	ldr	r3, [r7, #4]
    7870:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7872:	4618      	mov	r0, r3
    7874:	f003 f854 	bl	a920 <mp_emit_bc_pop_top>
    7878:	e0f7      	b.n	7a6a <compile_expr_stmt+0x242>

        } else {
            // for non-REPL, evaluate then discard the expression
            if ((MP_PARSE_NODE_IS_LEAF(pns->nodes[0]) && !MP_PARSE_NODE_IS_ID(pns->nodes[0]))
    787a:	683b      	ldr	r3, [r7, #0]
    787c:	689b      	ldr	r3, [r3, #8]
    787e:	f003 0303 	and.w	r3, r3, #3
    7882:	2b00      	cmp	r3, #0
    7884:	d006      	beq.n	7894 <compile_expr_stmt+0x6c>
    7886:	683b      	ldr	r3, [r7, #0]
    7888:	689b      	ldr	r3, [r3, #8]
    788a:	f003 030f 	and.w	r3, r3, #15
    788e:	2b02      	cmp	r3, #2
    7890:	f040 80eb 	bne.w	7a6a <compile_expr_stmt+0x242>
                || MP_PARSE_NODE_IS_STRUCT_KIND(pns->nodes[0], PN_const_object)) {
    7894:	683b      	ldr	r3, [r7, #0]
    7896:	689b      	ldr	r3, [r3, #8]
    7898:	2b00      	cmp	r3, #0
    789a:	d00c      	beq.n	78b6 <compile_expr_stmt+0x8e>
    789c:	683b      	ldr	r3, [r7, #0]
    789e:	689b      	ldr	r3, [r3, #8]
    78a0:	f003 0303 	and.w	r3, r3, #3
    78a4:	2b00      	cmp	r3, #0
    78a6:	d106      	bne.n	78b6 <compile_expr_stmt+0x8e>
    78a8:	683b      	ldr	r3, [r7, #0]
    78aa:	689b      	ldr	r3, [r3, #8]
    78ac:	685b      	ldr	r3, [r3, #4]
    78ae:	b2db      	uxtb	r3, r3
    78b0:	2b35      	cmp	r3, #53	; 0x35
    78b2:	f000 80da 	beq.w	7a6a <compile_expr_stmt+0x242>
                // do nothing with a lonely constant
            } else {
                compile_node(comp, pns->nodes[0]); // just an expression
    78b6:	683b      	ldr	r3, [r7, #0]
    78b8:	689b      	ldr	r3, [r3, #8]
    78ba:	4619      	mov	r1, r3
    78bc:	6878      	ldr	r0, [r7, #4]
    78be:	f001 f969 	bl	8b94 <compile_node>
                EMIT(pop_top); // discard last result since this is a statement and leaves nothing on the stack
    78c2:	687b      	ldr	r3, [r7, #4]
    78c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    78c6:	4618      	mov	r0, r3
    78c8:	f003 f82a 	bl	a920 <mp_emit_bc_pop_top>
            c_assign(comp, pns->nodes[0], ASSIGN_STORE); // lhs store
        }
    } else {
        goto plain_assign;
    }
}
    78cc:	e0cd      	b.n	7a6a <compile_expr_stmt+0x242>
    } else if (MP_PARSE_NODE_IS_STRUCT(pns->nodes[1])) {
    78ce:	683b      	ldr	r3, [r7, #0]
    78d0:	68db      	ldr	r3, [r3, #12]
    78d2:	2b00      	cmp	r3, #0
    78d4:	f000 80bb 	beq.w	7a4e <compile_expr_stmt+0x226>
    78d8:	683b      	ldr	r3, [r7, #0]
    78da:	68db      	ldr	r3, [r3, #12]
    78dc:	f003 0303 	and.w	r3, r3, #3
    78e0:	2b00      	cmp	r3, #0
    78e2:	f040 80b4 	bne.w	7a4e <compile_expr_stmt+0x226>
        mp_parse_node_struct_t *pns1 = (mp_parse_node_struct_t*)pns->nodes[1];
    78e6:	683b      	ldr	r3, [r7, #0]
    78e8:	68db      	ldr	r3, [r3, #12]
    78ea:	617b      	str	r3, [r7, #20]
        int kind = MP_PARSE_NODE_STRUCT_KIND(pns1);
    78ec:	697b      	ldr	r3, [r7, #20]
    78ee:	685b      	ldr	r3, [r3, #4]
    78f0:	b2db      	uxtb	r3, r3
    78f2:	613b      	str	r3, [r7, #16]
        if (kind == PN_expr_stmt_augassign) {
    78f4:	693b      	ldr	r3, [r7, #16]
    78f6:	2b51      	cmp	r3, #81	; 0x51
    78f8:	d16a      	bne.n	79d0 <compile_expr_stmt+0x1a8>
            c_assign(comp, pns->nodes[0], ASSIGN_AUG_LOAD); // lhs load for aug assign
    78fa:	683b      	ldr	r3, [r7, #0]
    78fc:	689b      	ldr	r3, [r3, #8]
    78fe:	2201      	movs	r2, #1
    7900:	4619      	mov	r1, r3
    7902:	6878      	ldr	r0, [r7, #4]
    7904:	f7fd ff28 	bl	5758 <c_assign>
            compile_node(comp, pns1->nodes[1]); // rhs
    7908:	697b      	ldr	r3, [r7, #20]
    790a:	68db      	ldr	r3, [r3, #12]
    790c:	4619      	mov	r1, r3
    790e:	6878      	ldr	r0, [r7, #4]
    7910:	f001 f940 	bl	8b94 <compile_node>
            assert(MP_PARSE_NODE_IS_TOKEN(pns1->nodes[0]));
    7914:	697b      	ldr	r3, [r7, #20]
    7916:	689b      	ldr	r3, [r3, #8]
    7918:	f003 030f 	and.w	r3, r3, #15
    791c:	2b0e      	cmp	r3, #14
    791e:	d006      	beq.n	792e <compile_expr_stmt+0x106>
    7920:	4b54      	ldr	r3, [pc, #336]	; (7a74 <compile_expr_stmt+0x24c>)
    7922:	4a55      	ldr	r2, [pc, #340]	; (7a78 <compile_expr_stmt+0x250>)
    7924:	f240 7171 	movw	r1, #1905	; 0x771
    7928:	4854      	ldr	r0, [pc, #336]	; (7a7c <compile_expr_stmt+0x254>)
    792a:	f013 fed1 	bl	1b6d0 <__assert_func>
            switch (MP_PARSE_NODE_LEAF_ARG(pns1->nodes[0])) {
    792e:	697b      	ldr	r3, [r7, #20]
    7930:	689b      	ldr	r3, [r3, #8]
    7932:	091b      	lsrs	r3, r3, #4
    7934:	3b4e      	subs	r3, #78	; 0x4e
    7936:	2b0a      	cmp	r3, #10
    7938:	d839      	bhi.n	79ae <compile_expr_stmt+0x186>
    793a:	a201      	add	r2, pc, #4	; (adr r2, 7940 <compile_expr_stmt+0x118>)
    793c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    7940:	0000798b 	.word	0x0000798b
    7944:	00007991 	.word	0x00007991
    7948:	00007997 	.word	0x00007997
    794c:	000079a3 	.word	0x000079a3
    7950:	0000799d 	.word	0x0000799d
    7954:	000079a9 	.word	0x000079a9
    7958:	00007979 	.word	0x00007979
    795c:	0000796d 	.word	0x0000796d
    7960:	00007973 	.word	0x00007973
    7964:	00007985 	.word	0x00007985
    7968:	0000797f 	.word	0x0000797f
                case MP_TOKEN_DEL_PIPE_EQUAL: op = MP_BINARY_OP_INPLACE_OR; break;
    796c:	2309      	movs	r3, #9
    796e:	61fb      	str	r3, [r7, #28]
    7970:	e020      	b.n	79b4 <compile_expr_stmt+0x18c>
                case MP_TOKEN_DEL_CARET_EQUAL: op = MP_BINARY_OP_INPLACE_XOR; break;
    7972:	230a      	movs	r3, #10
    7974:	61fb      	str	r3, [r7, #28]
    7976:	e01d      	b.n	79b4 <compile_expr_stmt+0x18c>
                case MP_TOKEN_DEL_AMPERSAND_EQUAL: op = MP_BINARY_OP_INPLACE_AND; break;
    7978:	230b      	movs	r3, #11
    797a:	61fb      	str	r3, [r7, #28]
    797c:	e01a      	b.n	79b4 <compile_expr_stmt+0x18c>
                case MP_TOKEN_DEL_DBL_LESS_EQUAL: op = MP_BINARY_OP_INPLACE_LSHIFT; break;
    797e:	230c      	movs	r3, #12
    7980:	61fb      	str	r3, [r7, #28]
    7982:	e017      	b.n	79b4 <compile_expr_stmt+0x18c>
                case MP_TOKEN_DEL_DBL_MORE_EQUAL: op = MP_BINARY_OP_INPLACE_RSHIFT; break;
    7984:	230d      	movs	r3, #13
    7986:	61fb      	str	r3, [r7, #28]
    7988:	e014      	b.n	79b4 <compile_expr_stmt+0x18c>
                case MP_TOKEN_DEL_PLUS_EQUAL: op = MP_BINARY_OP_INPLACE_ADD; break;
    798a:	230e      	movs	r3, #14
    798c:	61fb      	str	r3, [r7, #28]
    798e:	e011      	b.n	79b4 <compile_expr_stmt+0x18c>
                case MP_TOKEN_DEL_MINUS_EQUAL: op = MP_BINARY_OP_INPLACE_SUBTRACT; break;
    7990:	230f      	movs	r3, #15
    7992:	61fb      	str	r3, [r7, #28]
    7994:	e00e      	b.n	79b4 <compile_expr_stmt+0x18c>
                case MP_TOKEN_DEL_STAR_EQUAL: op = MP_BINARY_OP_INPLACE_MULTIPLY; break;
    7996:	2310      	movs	r3, #16
    7998:	61fb      	str	r3, [r7, #28]
    799a:	e00b      	b.n	79b4 <compile_expr_stmt+0x18c>
                case MP_TOKEN_DEL_DBL_SLASH_EQUAL: op = MP_BINARY_OP_INPLACE_FLOOR_DIVIDE; break;
    799c:	2311      	movs	r3, #17
    799e:	61fb      	str	r3, [r7, #28]
    79a0:	e008      	b.n	79b4 <compile_expr_stmt+0x18c>
                case MP_TOKEN_DEL_SLASH_EQUAL: op = MP_BINARY_OP_INPLACE_TRUE_DIVIDE; break;
    79a2:	2312      	movs	r3, #18
    79a4:	61fb      	str	r3, [r7, #28]
    79a6:	e005      	b.n	79b4 <compile_expr_stmt+0x18c>
                case MP_TOKEN_DEL_PERCENT_EQUAL: op = MP_BINARY_OP_INPLACE_MODULO; break;
    79a8:	2313      	movs	r3, #19
    79aa:	61fb      	str	r3, [r7, #28]
    79ac:	e002      	b.n	79b4 <compile_expr_stmt+0x18c>
                case MP_TOKEN_DEL_DBL_STAR_EQUAL: default: op = MP_BINARY_OP_INPLACE_POWER; break;
    79ae:	2314      	movs	r3, #20
    79b0:	61fb      	str	r3, [r7, #28]
    79b2:	bf00      	nop
            EMIT_ARG(binary_op, op);
    79b4:	687b      	ldr	r3, [r7, #4]
    79b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    79b8:	69f9      	ldr	r1, [r7, #28]
    79ba:	4618      	mov	r0, r3
    79bc:	f003 f956 	bl	ac6c <mp_emit_bc_binary_op>
            c_assign(comp, pns->nodes[0], ASSIGN_AUG_STORE); // lhs store for aug assign
    79c0:	683b      	ldr	r3, [r7, #0]
    79c2:	689b      	ldr	r3, [r3, #8]
    79c4:	2202      	movs	r2, #2
    79c6:	4619      	mov	r1, r3
    79c8:	6878      	ldr	r0, [r7, #4]
    79ca:	f7fd fec5 	bl	5758 <c_assign>
}
    79ce:	e04c      	b.n	7a6a <compile_expr_stmt+0x242>
        } else if (kind == PN_expr_stmt_assign_list) {
    79d0:	693b      	ldr	r3, [r7, #16]
    79d2:	2b52      	cmp	r3, #82	; 0x52
    79d4:	d13b      	bne.n	7a4e <compile_expr_stmt+0x226>
            int rhs = MP_PARSE_NODE_STRUCT_NUM_NODES(pns1) - 1;
    79d6:	697b      	ldr	r3, [r7, #20]
    79d8:	685b      	ldr	r3, [r3, #4]
    79da:	0a1b      	lsrs	r3, r3, #8
    79dc:	3b01      	subs	r3, #1
    79de:	60fb      	str	r3, [r7, #12]
            compile_node(comp, pns1->nodes[rhs]); // rhs
    79e0:	697b      	ldr	r3, [r7, #20]
    79e2:	68fa      	ldr	r2, [r7, #12]
    79e4:	3202      	adds	r2, #2
    79e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    79ea:	4619      	mov	r1, r3
    79ec:	6878      	ldr	r0, [r7, #4]
    79ee:	f001 f8d1 	bl	8b94 <compile_node>
            if (rhs > 0) {
    79f2:	68fb      	ldr	r3, [r7, #12]
    79f4:	2b00      	cmp	r3, #0
    79f6:	dd04      	ble.n	7a02 <compile_expr_stmt+0x1da>
                EMIT(dup_top);
    79f8:	687b      	ldr	r3, [r7, #4]
    79fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    79fc:	4618      	mov	r0, r3
    79fe:	f002 ff6f 	bl	a8e0 <mp_emit_bc_dup_top>
            c_assign(comp, pns->nodes[0], ASSIGN_STORE); // lhs store
    7a02:	683b      	ldr	r3, [r7, #0]
    7a04:	689b      	ldr	r3, [r3, #8]
    7a06:	2200      	movs	r2, #0
    7a08:	4619      	mov	r1, r3
    7a0a:	6878      	ldr	r0, [r7, #4]
    7a0c:	f7fd fea4 	bl	5758 <c_assign>
            for (int i = 0; i < rhs; i++) {
    7a10:	2300      	movs	r3, #0
    7a12:	61bb      	str	r3, [r7, #24]
    7a14:	e016      	b.n	7a44 <compile_expr_stmt+0x21c>
                if (i + 1 < rhs) {
    7a16:	69bb      	ldr	r3, [r7, #24]
    7a18:	1c5a      	adds	r2, r3, #1
    7a1a:	68fb      	ldr	r3, [r7, #12]
    7a1c:	429a      	cmp	r2, r3
    7a1e:	da04      	bge.n	7a2a <compile_expr_stmt+0x202>
                    EMIT(dup_top);
    7a20:	687b      	ldr	r3, [r7, #4]
    7a22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7a24:	4618      	mov	r0, r3
    7a26:	f002 ff5b 	bl	a8e0 <mp_emit_bc_dup_top>
                c_assign(comp, pns1->nodes[i], ASSIGN_STORE); // middle store
    7a2a:	697b      	ldr	r3, [r7, #20]
    7a2c:	69ba      	ldr	r2, [r7, #24]
    7a2e:	3202      	adds	r2, #2
    7a30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    7a34:	2200      	movs	r2, #0
    7a36:	4619      	mov	r1, r3
    7a38:	6878      	ldr	r0, [r7, #4]
    7a3a:	f7fd fe8d 	bl	5758 <c_assign>
            for (int i = 0; i < rhs; i++) {
    7a3e:	69bb      	ldr	r3, [r7, #24]
    7a40:	3301      	adds	r3, #1
    7a42:	61bb      	str	r3, [r7, #24]
    7a44:	69ba      	ldr	r2, [r7, #24]
    7a46:	68fb      	ldr	r3, [r7, #12]
    7a48:	429a      	cmp	r2, r3
    7a4a:	dbe4      	blt.n	7a16 <compile_expr_stmt+0x1ee>
}
    7a4c:	e00d      	b.n	7a6a <compile_expr_stmt+0x242>
            compile_node(comp, pns->nodes[1]); // rhs
    7a4e:	683b      	ldr	r3, [r7, #0]
    7a50:	68db      	ldr	r3, [r3, #12]
    7a52:	4619      	mov	r1, r3
    7a54:	6878      	ldr	r0, [r7, #4]
    7a56:	f001 f89d 	bl	8b94 <compile_node>
            c_assign(comp, pns->nodes[0], ASSIGN_STORE); // lhs store
    7a5a:	683b      	ldr	r3, [r7, #0]
    7a5c:	689b      	ldr	r3, [r3, #8]
    7a5e:	2200      	movs	r2, #0
    7a60:	4619      	mov	r1, r3
    7a62:	6878      	ldr	r0, [r7, #4]
    7a64:	f7fd fe78 	bl	5758 <c_assign>
}
    7a68:	e7ff      	b.n	7a6a <compile_expr_stmt+0x242>
    7a6a:	bf00      	nop
    7a6c:	3720      	adds	r7, #32
    7a6e:	46bd      	mov	sp, r7
    7a70:	bd80      	pop	{r7, pc}
    7a72:	bf00      	nop
    7a74:	000207d0 	.word	0x000207d0
    7a78:	00020f28 	.word	0x00020f28
    7a7c:	00020234 	.word	0x00020234

00007a80 <c_binary_op>:

STATIC void c_binary_op(compiler_t *comp, mp_parse_node_struct_t *pns, mp_binary_op_t binary_op) {
    7a80:	b580      	push	{r7, lr}
    7a82:	b086      	sub	sp, #24
    7a84:	af00      	add	r7, sp, #0
    7a86:	60f8      	str	r0, [r7, #12]
    7a88:	60b9      	str	r1, [r7, #8]
    7a8a:	607a      	str	r2, [r7, #4]
    int num_nodes = MP_PARSE_NODE_STRUCT_NUM_NODES(pns);
    7a8c:	68bb      	ldr	r3, [r7, #8]
    7a8e:	685b      	ldr	r3, [r3, #4]
    7a90:	0a1b      	lsrs	r3, r3, #8
    7a92:	613b      	str	r3, [r7, #16]
    compile_node(comp, pns->nodes[0]);
    7a94:	68bb      	ldr	r3, [r7, #8]
    7a96:	689b      	ldr	r3, [r3, #8]
    7a98:	4619      	mov	r1, r3
    7a9a:	68f8      	ldr	r0, [r7, #12]
    7a9c:	f001 f87a 	bl	8b94 <compile_node>
    for (int i = 1; i < num_nodes; i += 1) {
    7aa0:	2301      	movs	r3, #1
    7aa2:	617b      	str	r3, [r7, #20]
    7aa4:	e011      	b.n	7aca <c_binary_op+0x4a>
        compile_node(comp, pns->nodes[i]);
    7aa6:	68bb      	ldr	r3, [r7, #8]
    7aa8:	697a      	ldr	r2, [r7, #20]
    7aaa:	3202      	adds	r2, #2
    7aac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    7ab0:	4619      	mov	r1, r3
    7ab2:	68f8      	ldr	r0, [r7, #12]
    7ab4:	f001 f86e 	bl	8b94 <compile_node>
        EMIT_ARG(binary_op, binary_op);
    7ab8:	68fb      	ldr	r3, [r7, #12]
    7aba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7abc:	6879      	ldr	r1, [r7, #4]
    7abe:	4618      	mov	r0, r3
    7ac0:	f003 f8d4 	bl	ac6c <mp_emit_bc_binary_op>
    for (int i = 1; i < num_nodes; i += 1) {
    7ac4:	697b      	ldr	r3, [r7, #20]
    7ac6:	3301      	adds	r3, #1
    7ac8:	617b      	str	r3, [r7, #20]
    7aca:	697a      	ldr	r2, [r7, #20]
    7acc:	693b      	ldr	r3, [r7, #16]
    7ace:	429a      	cmp	r2, r3
    7ad0:	dbe9      	blt.n	7aa6 <c_binary_op+0x26>
    }
}
    7ad2:	bf00      	nop
    7ad4:	3718      	adds	r7, #24
    7ad6:	46bd      	mov	sp, r7
    7ad8:	bd80      	pop	{r7, pc}
    7ada:	bf00      	nop

00007adc <compile_test_if_expr>:

STATIC void compile_test_if_expr(compiler_t *comp, mp_parse_node_struct_t *pns) {
    7adc:	b580      	push	{r7, lr}
    7ade:	b086      	sub	sp, #24
    7ae0:	af00      	add	r7, sp, #0
    7ae2:	6078      	str	r0, [r7, #4]
    7ae4:	6039      	str	r1, [r7, #0]
    assert(MP_PARSE_NODE_IS_STRUCT_KIND(pns->nodes[1], PN_test_if_else));
    7ae6:	683b      	ldr	r3, [r7, #0]
    7ae8:	68db      	ldr	r3, [r3, #12]
    7aea:	2b00      	cmp	r3, #0
    7aec:	d00b      	beq.n	7b06 <compile_test_if_expr+0x2a>
    7aee:	683b      	ldr	r3, [r7, #0]
    7af0:	68db      	ldr	r3, [r3, #12]
    7af2:	f003 0303 	and.w	r3, r3, #3
    7af6:	2b00      	cmp	r3, #0
    7af8:	d105      	bne.n	7b06 <compile_test_if_expr+0x2a>
    7afa:	683b      	ldr	r3, [r7, #0]
    7afc:	68db      	ldr	r3, [r3, #12]
    7afe:	685b      	ldr	r3, [r3, #4]
    7b00:	b2db      	uxtb	r3, r3
    7b02:	2b79      	cmp	r3, #121	; 0x79
    7b04:	d006      	beq.n	7b14 <compile_test_if_expr+0x38>
    7b06:	4b21      	ldr	r3, [pc, #132]	; (7b8c <compile_test_if_expr+0xb0>)
    7b08:	4a21      	ldr	r2, [pc, #132]	; (7b90 <compile_test_if_expr+0xb4>)
    7b0a:	f240 71d1 	movw	r1, #2001	; 0x7d1
    7b0e:	4821      	ldr	r0, [pc, #132]	; (7b94 <compile_test_if_expr+0xb8>)
    7b10:	f013 fdde 	bl	1b6d0 <__assert_func>
    mp_parse_node_struct_t *pns_test_if_else = (mp_parse_node_struct_t*)pns->nodes[1];
    7b14:	683b      	ldr	r3, [r7, #0]
    7b16:	68db      	ldr	r3, [r3, #12]
    7b18:	617b      	str	r3, [r7, #20]

    uint l_fail = comp_next_label(comp);
    7b1a:	6878      	ldr	r0, [r7, #4]
    7b1c:	f7fd f9f8 	bl	4f10 <comp_next_label>
    7b20:	6138      	str	r0, [r7, #16]
    uint l_end = comp_next_label(comp);
    7b22:	6878      	ldr	r0, [r7, #4]
    7b24:	f7fd f9f4 	bl	4f10 <comp_next_label>
    7b28:	60f8      	str	r0, [r7, #12]
    c_if_cond(comp, pns_test_if_else->nodes[0], false, l_fail); // condition
    7b2a:	697b      	ldr	r3, [r7, #20]
    7b2c:	6899      	ldr	r1, [r3, #8]
    7b2e:	693b      	ldr	r3, [r7, #16]
    7b30:	2200      	movs	r2, #0
    7b32:	6878      	ldr	r0, [r7, #4]
    7b34:	f7fd fb76 	bl	5224 <c_if_cond>
    compile_node(comp, pns->nodes[0]); // success value
    7b38:	683b      	ldr	r3, [r7, #0]
    7b3a:	689b      	ldr	r3, [r3, #8]
    7b3c:	4619      	mov	r1, r3
    7b3e:	6878      	ldr	r0, [r7, #4]
    7b40:	f001 f828 	bl	8b94 <compile_node>
    EMIT_ARG(jump, l_end);
    7b44:	687b      	ldr	r3, [r7, #4]
    7b46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7b48:	68f9      	ldr	r1, [r7, #12]
    7b4a:	4618      	mov	r0, r3
    7b4c:	f002 ff1a 	bl	a984 <mp_emit_bc_jump>
    EMIT_ARG(label_assign, l_fail);
    7b50:	687b      	ldr	r3, [r7, #4]
    7b52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7b54:	6939      	ldr	r1, [r7, #16]
    7b56:	4618      	mov	r0, r3
    7b58:	f002 fc0c 	bl	a374 <mp_emit_bc_label_assign>
    EMIT_ARG(adjust_stack_size, -1); // adjust stack size
    7b5c:	687b      	ldr	r3, [r7, #4]
    7b5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7b60:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    7b64:	4618      	mov	r0, r3
    7b66:	f002 fbb3 	bl	a2d0 <mp_emit_bc_adjust_stack_size>
    compile_node(comp, pns_test_if_else->nodes[1]); // failure value
    7b6a:	697b      	ldr	r3, [r7, #20]
    7b6c:	68db      	ldr	r3, [r3, #12]
    7b6e:	4619      	mov	r1, r3
    7b70:	6878      	ldr	r0, [r7, #4]
    7b72:	f001 f80f 	bl	8b94 <compile_node>
    EMIT_ARG(label_assign, l_end);
    7b76:	687b      	ldr	r3, [r7, #4]
    7b78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7b7a:	68f9      	ldr	r1, [r7, #12]
    7b7c:	4618      	mov	r0, r3
    7b7e:	f002 fbf9 	bl	a374 <mp_emit_bc_label_assign>
}
    7b82:	bf00      	nop
    7b84:	3718      	adds	r7, #24
    7b86:	46bd      	mov	sp, r7
    7b88:	bd80      	pop	{r7, pc}
    7b8a:	bf00      	nop
    7b8c:	000207f8 	.word	0x000207f8
    7b90:	00020f3c 	.word	0x00020f3c
    7b94:	00020234 	.word	0x00020234

00007b98 <compile_lambdef>:

STATIC void compile_lambdef(compiler_t *comp, mp_parse_node_struct_t *pns) {
    7b98:	b580      	push	{r7, lr}
    7b9a:	b084      	sub	sp, #16
    7b9c:	af00      	add	r7, sp, #0
    7b9e:	6078      	str	r0, [r7, #4]
    7ba0:	6039      	str	r1, [r7, #0]
    if (comp->pass == MP_PASS_SCOPE) {
    7ba2:	687b      	ldr	r3, [r7, #4]
    7ba4:	795b      	ldrb	r3, [r3, #5]
    7ba6:	2b01      	cmp	r3, #1
    7ba8:	d10b      	bne.n	7bc2 <compile_lambdef+0x2a>
        // create a new scope for this lambda
        scope_t *s = scope_new_and_link(comp, SCOPE_LAMBDA, (mp_parse_node_t)pns, comp->scope_cur->emit_options);
    7baa:	683a      	ldr	r2, [r7, #0]
    7bac:	687b      	ldr	r3, [r7, #4]
    7bae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    7bb0:	7e5b      	ldrb	r3, [r3, #25]
    7bb2:	2102      	movs	r1, #2
    7bb4:	6878      	ldr	r0, [r7, #4]
    7bb6:	f7fd f9f5 	bl	4fa4 <scope_new_and_link>
    7bba:	60f8      	str	r0, [r7, #12]
        // store the lambda scope so the compiling function (this one) can use it at each pass
        pns->nodes[2] = (mp_parse_node_t)s;
    7bbc:	68fa      	ldr	r2, [r7, #12]
    7bbe:	683b      	ldr	r3, [r7, #0]
    7bc0:	611a      	str	r2, [r3, #16]
    }

    // get the scope for this lambda
    scope_t *this_scope = (scope_t*)pns->nodes[2];
    7bc2:	683b      	ldr	r3, [r7, #0]
    7bc4:	691b      	ldr	r3, [r3, #16]
    7bc6:	60bb      	str	r3, [r7, #8]

    // compile the lambda definition
    compile_funcdef_lambdef(comp, this_scope, pns->nodes[0], PN_varargslist);
    7bc8:	683b      	ldr	r3, [r7, #0]
    7bca:	689a      	ldr	r2, [r3, #8]
    7bcc:	2346      	movs	r3, #70	; 0x46
    7bce:	68b9      	ldr	r1, [r7, #8]
    7bd0:	6878      	ldr	r0, [r7, #4]
    7bd2:	f7fe f819 	bl	5c08 <compile_funcdef_lambdef>
}
    7bd6:	bf00      	nop
    7bd8:	3710      	adds	r7, #16
    7bda:	46bd      	mov	sp, r7
    7bdc:	bd80      	pop	{r7, pc}
    7bde:	bf00      	nop

00007be0 <compile_or_and_test>:

STATIC void compile_or_and_test(compiler_t *comp, mp_parse_node_struct_t *pns, bool cond) {
    7be0:	b580      	push	{r7, lr}
    7be2:	b088      	sub	sp, #32
    7be4:	af00      	add	r7, sp, #0
    7be6:	60f8      	str	r0, [r7, #12]
    7be8:	60b9      	str	r1, [r7, #8]
    7bea:	4613      	mov	r3, r2
    7bec:	71fb      	strb	r3, [r7, #7]
    uint l_end = comp_next_label(comp);
    7bee:	68f8      	ldr	r0, [r7, #12]
    7bf0:	f7fd f98e 	bl	4f10 <comp_next_label>
    7bf4:	61b8      	str	r0, [r7, #24]
    int n = MP_PARSE_NODE_STRUCT_NUM_NODES(pns);
    7bf6:	68bb      	ldr	r3, [r7, #8]
    7bf8:	685b      	ldr	r3, [r3, #4]
    7bfa:	0a1b      	lsrs	r3, r3, #8
    7bfc:	617b      	str	r3, [r7, #20]
    for (int i = 0; i < n; i += 1) {
    7bfe:	2300      	movs	r3, #0
    7c00:	61fb      	str	r3, [r7, #28]
    7c02:	e017      	b.n	7c34 <compile_or_and_test+0x54>
        compile_node(comp, pns->nodes[i]);
    7c04:	68bb      	ldr	r3, [r7, #8]
    7c06:	69fa      	ldr	r2, [r7, #28]
    7c08:	3202      	adds	r2, #2
    7c0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    7c0e:	4619      	mov	r1, r3
    7c10:	68f8      	ldr	r0, [r7, #12]
    7c12:	f000 ffbf 	bl	8b94 <compile_node>
        if (i + 1 < n) {
    7c16:	69fb      	ldr	r3, [r7, #28]
    7c18:	1c5a      	adds	r2, r3, #1
    7c1a:	697b      	ldr	r3, [r7, #20]
    7c1c:	429a      	cmp	r2, r3
    7c1e:	da06      	bge.n	7c2e <compile_or_and_test+0x4e>
            EMIT_ARG(jump_if_or_pop, cond, l_end);
    7c20:	68fb      	ldr	r3, [r7, #12]
    7c22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7c24:	79f9      	ldrb	r1, [r7, #7]
    7c26:	69ba      	ldr	r2, [r7, #24]
    7c28:	4618      	mov	r0, r3
    7c2a:	f002 fedb 	bl	a9e4 <mp_emit_bc_jump_if_or_pop>
    for (int i = 0; i < n; i += 1) {
    7c2e:	69fb      	ldr	r3, [r7, #28]
    7c30:	3301      	adds	r3, #1
    7c32:	61fb      	str	r3, [r7, #28]
    7c34:	69fa      	ldr	r2, [r7, #28]
    7c36:	697b      	ldr	r3, [r7, #20]
    7c38:	429a      	cmp	r2, r3
    7c3a:	dbe3      	blt.n	7c04 <compile_or_and_test+0x24>
        }
    }
    EMIT_ARG(label_assign, l_end);
    7c3c:	68fb      	ldr	r3, [r7, #12]
    7c3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7c40:	69b9      	ldr	r1, [r7, #24]
    7c42:	4618      	mov	r0, r3
    7c44:	f002 fb96 	bl	a374 <mp_emit_bc_label_assign>
}
    7c48:	bf00      	nop
    7c4a:	3720      	adds	r7, #32
    7c4c:	46bd      	mov	sp, r7
    7c4e:	bd80      	pop	{r7, pc}

00007c50 <compile_or_test>:

STATIC void compile_or_test(compiler_t *comp, mp_parse_node_struct_t *pns) {
    7c50:	b580      	push	{r7, lr}
    7c52:	b082      	sub	sp, #8
    7c54:	af00      	add	r7, sp, #0
    7c56:	6078      	str	r0, [r7, #4]
    7c58:	6039      	str	r1, [r7, #0]
    compile_or_and_test(comp, pns, true);
    7c5a:	2201      	movs	r2, #1
    7c5c:	6839      	ldr	r1, [r7, #0]
    7c5e:	6878      	ldr	r0, [r7, #4]
    7c60:	f7ff ffbe 	bl	7be0 <compile_or_and_test>
}
    7c64:	bf00      	nop
    7c66:	3708      	adds	r7, #8
    7c68:	46bd      	mov	sp, r7
    7c6a:	bd80      	pop	{r7, pc}

00007c6c <compile_and_test>:

STATIC void compile_and_test(compiler_t *comp, mp_parse_node_struct_t *pns) {
    7c6c:	b580      	push	{r7, lr}
    7c6e:	b082      	sub	sp, #8
    7c70:	af00      	add	r7, sp, #0
    7c72:	6078      	str	r0, [r7, #4]
    7c74:	6039      	str	r1, [r7, #0]
    compile_or_and_test(comp, pns, false);
    7c76:	2200      	movs	r2, #0
    7c78:	6839      	ldr	r1, [r7, #0]
    7c7a:	6878      	ldr	r0, [r7, #4]
    7c7c:	f7ff ffb0 	bl	7be0 <compile_or_and_test>
}
    7c80:	bf00      	nop
    7c82:	3708      	adds	r7, #8
    7c84:	46bd      	mov	sp, r7
    7c86:	bd80      	pop	{r7, pc}

00007c88 <compile_not_test_2>:

STATIC void compile_not_test_2(compiler_t *comp, mp_parse_node_struct_t *pns) {
    7c88:	b580      	push	{r7, lr}
    7c8a:	b082      	sub	sp, #8
    7c8c:	af00      	add	r7, sp, #0
    7c8e:	6078      	str	r0, [r7, #4]
    7c90:	6039      	str	r1, [r7, #0]
    compile_node(comp, pns->nodes[0]);
    7c92:	683b      	ldr	r3, [r7, #0]
    7c94:	689b      	ldr	r3, [r3, #8]
    7c96:	4619      	mov	r1, r3
    7c98:	6878      	ldr	r0, [r7, #4]
    7c9a:	f000 ff7b 	bl	8b94 <compile_node>
    EMIT_ARG(unary_op, MP_UNARY_OP_NOT);
    7c9e:	687b      	ldr	r3, [r7, #4]
    7ca0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7ca2:	2103      	movs	r1, #3
    7ca4:	4618      	mov	r0, r3
    7ca6:	f002 ffcb 	bl	ac40 <mp_emit_bc_unary_op>
}
    7caa:	bf00      	nop
    7cac:	3708      	adds	r7, #8
    7cae:	46bd      	mov	sp, r7
    7cb0:	bd80      	pop	{r7, pc}
    7cb2:	bf00      	nop

00007cb4 <compile_comparison>:

STATIC void compile_comparison(compiler_t *comp, mp_parse_node_struct_t *pns) {
    7cb4:	b580      	push	{r7, lr}
    7cb6:	b08a      	sub	sp, #40	; 0x28
    7cb8:	af00      	add	r7, sp, #0
    7cba:	6078      	str	r0, [r7, #4]
    7cbc:	6039      	str	r1, [r7, #0]
    int num_nodes = MP_PARSE_NODE_STRUCT_NUM_NODES(pns);
    7cbe:	683b      	ldr	r3, [r7, #0]
    7cc0:	685b      	ldr	r3, [r3, #4]
    7cc2:	0a1b      	lsrs	r3, r3, #8
    7cc4:	61bb      	str	r3, [r7, #24]
    compile_node(comp, pns->nodes[0]);
    7cc6:	683b      	ldr	r3, [r7, #0]
    7cc8:	689b      	ldr	r3, [r3, #8]
    7cca:	4619      	mov	r1, r3
    7ccc:	6878      	ldr	r0, [r7, #4]
    7cce:	f000 ff61 	bl	8b94 <compile_node>
    bool multi = (num_nodes > 3);
    7cd2:	69bb      	ldr	r3, [r7, #24]
    7cd4:	2b03      	cmp	r3, #3
    7cd6:	bfcc      	ite	gt
    7cd8:	2301      	movgt	r3, #1
    7cda:	2300      	movle	r3, #0
    7cdc:	75fb      	strb	r3, [r7, #23]
    uint l_fail = 0;
    7cde:	2300      	movs	r3, #0
    7ce0:	627b      	str	r3, [r7, #36]	; 0x24
    if (multi) {
    7ce2:	7dfb      	ldrb	r3, [r7, #23]
    7ce4:	2b00      	cmp	r3, #0
    7ce6:	d003      	beq.n	7cf0 <compile_comparison+0x3c>
        l_fail = comp_next_label(comp);
    7ce8:	6878      	ldr	r0, [r7, #4]
    7cea:	f7fd f911 	bl	4f10 <comp_next_label>
    7cee:	6278      	str	r0, [r7, #36]	; 0x24
    }
    for (int i = 1; i + 1 < num_nodes; i += 2) {
    7cf0:	2301      	movs	r3, #1
    7cf2:	623b      	str	r3, [r7, #32]
    7cf4:	e0b7      	b.n	7e66 <compile_comparison+0x1b2>
        compile_node(comp, pns->nodes[i + 1]);
    7cf6:	6a3b      	ldr	r3, [r7, #32]
    7cf8:	1c5a      	adds	r2, r3, #1
    7cfa:	683b      	ldr	r3, [r7, #0]
    7cfc:	3202      	adds	r2, #2
    7cfe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    7d02:	4619      	mov	r1, r3
    7d04:	6878      	ldr	r0, [r7, #4]
    7d06:	f000 ff45 	bl	8b94 <compile_node>
        if (i + 2 < num_nodes) {
    7d0a:	6a3b      	ldr	r3, [r7, #32]
    7d0c:	1c9a      	adds	r2, r3, #2
    7d0e:	69bb      	ldr	r3, [r7, #24]
    7d10:	429a      	cmp	r2, r3
    7d12:	da09      	bge.n	7d28 <compile_comparison+0x74>
            EMIT(dup_top);
    7d14:	687b      	ldr	r3, [r7, #4]
    7d16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7d18:	4618      	mov	r0, r3
    7d1a:	f002 fde1 	bl	a8e0 <mp_emit_bc_dup_top>
            EMIT(rot_three);
    7d1e:	687b      	ldr	r3, [r7, #4]
    7d20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7d22:	4618      	mov	r0, r3
    7d24:	f002 fe1e 	bl	a964 <mp_emit_bc_rot_three>
        }
        if (MP_PARSE_NODE_IS_TOKEN(pns->nodes[i])) {
    7d28:	683b      	ldr	r3, [r7, #0]
    7d2a:	6a3a      	ldr	r2, [r7, #32]
    7d2c:	3202      	adds	r2, #2
    7d2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    7d32:	f003 030f 	and.w	r3, r3, #15
    7d36:	2b0e      	cmp	r3, #14
    7d38:	d140      	bne.n	7dbc <compile_comparison+0x108>
            mp_binary_op_t op;
            switch (MP_PARSE_NODE_LEAF_ARG(pns->nodes[i])) {
    7d3a:	683b      	ldr	r3, [r7, #0]
    7d3c:	6a3a      	ldr	r2, [r7, #32]
    7d3e:	3202      	adds	r2, #2
    7d40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    7d44:	091b      	lsrs	r3, r3, #4
    7d46:	3b36      	subs	r3, #54	; 0x36
    7d48:	2b0b      	cmp	r3, #11
    7d4a:	d82d      	bhi.n	7da8 <compile_comparison+0xf4>
    7d4c:	a201      	add	r2, pc, #4	; (adr r2, 7d54 <compile_comparison+0xa0>)
    7d4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    7d52:	bf00      	nop
    7d54:	00007d85 	.word	0x00007d85
    7d58:	00007da9 	.word	0x00007da9
    7d5c:	00007d8b 	.word	0x00007d8b
    7d60:	00007da9 	.word	0x00007da9
    7d64:	00007da9 	.word	0x00007da9
    7d68:	00007da9 	.word	0x00007da9
    7d6c:	00007da9 	.word	0x00007da9
    7d70:	00007da9 	.word	0x00007da9
    7d74:	00007d97 	.word	0x00007d97
    7d78:	00007d9d 	.word	0x00007d9d
    7d7c:	00007d91 	.word	0x00007d91
    7d80:	00007da3 	.word	0x00007da3
                case MP_TOKEN_OP_LESS: op = MP_BINARY_OP_LESS; break;
    7d84:	2300      	movs	r3, #0
    7d86:	61fb      	str	r3, [r7, #28]
    7d88:	e011      	b.n	7dae <compile_comparison+0xfa>
                case MP_TOKEN_OP_MORE: op = MP_BINARY_OP_MORE; break;
    7d8a:	2301      	movs	r3, #1
    7d8c:	61fb      	str	r3, [r7, #28]
    7d8e:	e00e      	b.n	7dae <compile_comparison+0xfa>
                case MP_TOKEN_OP_DBL_EQUAL: op = MP_BINARY_OP_EQUAL; break;
    7d90:	2302      	movs	r3, #2
    7d92:	61fb      	str	r3, [r7, #28]
    7d94:	e00b      	b.n	7dae <compile_comparison+0xfa>
                case MP_TOKEN_OP_LESS_EQUAL: op = MP_BINARY_OP_LESS_EQUAL; break;
    7d96:	2303      	movs	r3, #3
    7d98:	61fb      	str	r3, [r7, #28]
    7d9a:	e008      	b.n	7dae <compile_comparison+0xfa>
                case MP_TOKEN_OP_MORE_EQUAL: op = MP_BINARY_OP_MORE_EQUAL; break;
    7d9c:	2304      	movs	r3, #4
    7d9e:	61fb      	str	r3, [r7, #28]
    7da0:	e005      	b.n	7dae <compile_comparison+0xfa>
                case MP_TOKEN_OP_NOT_EQUAL: op = MP_BINARY_OP_NOT_EQUAL; break;
    7da2:	2305      	movs	r3, #5
    7da4:	61fb      	str	r3, [r7, #28]
    7da6:	e002      	b.n	7dae <compile_comparison+0xfa>
                case MP_TOKEN_KW_IN: default: op = MP_BINARY_OP_IN; break;
    7da8:	2306      	movs	r3, #6
    7daa:	61fb      	str	r3, [r7, #28]
    7dac:	bf00      	nop
            }
            EMIT_ARG(binary_op, op);
    7dae:	687b      	ldr	r3, [r7, #4]
    7db0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7db2:	69f9      	ldr	r1, [r7, #28]
    7db4:	4618      	mov	r0, r3
    7db6:	f002 ff59 	bl	ac6c <mp_emit_bc_binary_op>
    7dba:	e045      	b.n	7e48 <compile_comparison+0x194>
        } else {
            assert(MP_PARSE_NODE_IS_STRUCT(pns->nodes[i])); // should be
    7dbc:	683b      	ldr	r3, [r7, #0]
    7dbe:	6a3a      	ldr	r2, [r7, #32]
    7dc0:	3202      	adds	r2, #2
    7dc2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    7dc6:	2b00      	cmp	r3, #0
    7dc8:	d008      	beq.n	7ddc <compile_comparison+0x128>
    7dca:	683b      	ldr	r3, [r7, #0]
    7dcc:	6a3a      	ldr	r2, [r7, #32]
    7dce:	3202      	adds	r2, #2
    7dd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    7dd4:	f003 0303 	and.w	r3, r3, #3
    7dd8:	2b00      	cmp	r3, #0
    7dda:	d006      	beq.n	7dea <compile_comparison+0x136>
    7ddc:	4b3b      	ldr	r3, [pc, #236]	; (7ecc <compile_comparison+0x218>)
    7dde:	4a3c      	ldr	r2, [pc, #240]	; (7ed0 <compile_comparison+0x21c>)
    7de0:	f640 0122 	movw	r1, #2082	; 0x822
    7de4:	483b      	ldr	r0, [pc, #236]	; (7ed4 <compile_comparison+0x220>)
    7de6:	f013 fc73 	bl	1b6d0 <__assert_func>
            mp_parse_node_struct_t *pns2 = (mp_parse_node_struct_t*)pns->nodes[i];
    7dea:	683b      	ldr	r3, [r7, #0]
    7dec:	6a3a      	ldr	r2, [r7, #32]
    7dee:	3202      	adds	r2, #2
    7df0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    7df4:	613b      	str	r3, [r7, #16]
            int kind = MP_PARSE_NODE_STRUCT_KIND(pns2);
    7df6:	693b      	ldr	r3, [r7, #16]
    7df8:	685b      	ldr	r3, [r3, #4]
    7dfa:	b2db      	uxtb	r3, r3
    7dfc:	60fb      	str	r3, [r7, #12]
            if (kind == PN_comp_op_not_in) {
    7dfe:	68fb      	ldr	r3, [r7, #12]
    7e00:	2b7d      	cmp	r3, #125	; 0x7d
    7e02:	d106      	bne.n	7e12 <compile_comparison+0x15e>
                EMIT_ARG(binary_op, MP_BINARY_OP_NOT_IN);
    7e04:	687b      	ldr	r3, [r7, #4]
    7e06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7e08:	2124      	movs	r1, #36	; 0x24
    7e0a:	4618      	mov	r0, r3
    7e0c:	f002 ff2e 	bl	ac6c <mp_emit_bc_binary_op>
    7e10:	e01a      	b.n	7e48 <compile_comparison+0x194>
            } else {
                assert(kind == PN_comp_op_is); // should be
    7e12:	68fb      	ldr	r3, [r7, #12]
    7e14:	2b7e      	cmp	r3, #126	; 0x7e
    7e16:	d006      	beq.n	7e26 <compile_comparison+0x172>
    7e18:	4b2f      	ldr	r3, [pc, #188]	; (7ed8 <compile_comparison+0x224>)
    7e1a:	4a2d      	ldr	r2, [pc, #180]	; (7ed0 <compile_comparison+0x21c>)
    7e1c:	f640 0128 	movw	r1, #2088	; 0x828
    7e20:	482c      	ldr	r0, [pc, #176]	; (7ed4 <compile_comparison+0x220>)
    7e22:	f013 fc55 	bl	1b6d0 <__assert_func>
                if (MP_PARSE_NODE_IS_NULL(pns2->nodes[0])) {
    7e26:	693b      	ldr	r3, [r7, #16]
    7e28:	689b      	ldr	r3, [r3, #8]
    7e2a:	2b00      	cmp	r3, #0
    7e2c:	d106      	bne.n	7e3c <compile_comparison+0x188>
                    EMIT_ARG(binary_op, MP_BINARY_OP_IS);
    7e2e:	687b      	ldr	r3, [r7, #4]
    7e30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7e32:	2107      	movs	r1, #7
    7e34:	4618      	mov	r0, r3
    7e36:	f002 ff19 	bl	ac6c <mp_emit_bc_binary_op>
    7e3a:	e005      	b.n	7e48 <compile_comparison+0x194>
                } else {
                    EMIT_ARG(binary_op, MP_BINARY_OP_IS_NOT);
    7e3c:	687b      	ldr	r3, [r7, #4]
    7e3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7e40:	2125      	movs	r1, #37	; 0x25
    7e42:	4618      	mov	r0, r3
    7e44:	f002 ff12 	bl	ac6c <mp_emit_bc_binary_op>
                }
            }
        }
        if (i + 2 < num_nodes) {
    7e48:	6a3b      	ldr	r3, [r7, #32]
    7e4a:	1c9a      	adds	r2, r3, #2
    7e4c:	69bb      	ldr	r3, [r7, #24]
    7e4e:	429a      	cmp	r2, r3
    7e50:	da06      	bge.n	7e60 <compile_comparison+0x1ac>
            EMIT_ARG(jump_if_or_pop, false, l_fail);
    7e52:	687b      	ldr	r3, [r7, #4]
    7e54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7e56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    7e58:	2100      	movs	r1, #0
    7e5a:	4618      	mov	r0, r3
    7e5c:	f002 fdc2 	bl	a9e4 <mp_emit_bc_jump_if_or_pop>
    for (int i = 1; i + 1 < num_nodes; i += 2) {
    7e60:	6a3b      	ldr	r3, [r7, #32]
    7e62:	3302      	adds	r3, #2
    7e64:	623b      	str	r3, [r7, #32]
    7e66:	6a3b      	ldr	r3, [r7, #32]
    7e68:	1c5a      	adds	r2, r3, #1
    7e6a:	69bb      	ldr	r3, [r7, #24]
    7e6c:	429a      	cmp	r2, r3
    7e6e:	f6ff af42 	blt.w	7cf6 <compile_comparison+0x42>
        }
    }
    if (multi) {
    7e72:	7dfb      	ldrb	r3, [r7, #23]
    7e74:	2b00      	cmp	r3, #0
    7e76:	d025      	beq.n	7ec4 <compile_comparison+0x210>
        uint l_end = comp_next_label(comp);
    7e78:	6878      	ldr	r0, [r7, #4]
    7e7a:	f7fd f849 	bl	4f10 <comp_next_label>
    7e7e:	60b8      	str	r0, [r7, #8]
        EMIT_ARG(jump, l_end);
    7e80:	687b      	ldr	r3, [r7, #4]
    7e82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7e84:	68b9      	ldr	r1, [r7, #8]
    7e86:	4618      	mov	r0, r3
    7e88:	f002 fd7c 	bl	a984 <mp_emit_bc_jump>
        EMIT_ARG(label_assign, l_fail);
    7e8c:	687b      	ldr	r3, [r7, #4]
    7e8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7e90:	6a79      	ldr	r1, [r7, #36]	; 0x24
    7e92:	4618      	mov	r0, r3
    7e94:	f002 fa6e 	bl	a374 <mp_emit_bc_label_assign>
        EMIT_ARG(adjust_stack_size, 1);
    7e98:	687b      	ldr	r3, [r7, #4]
    7e9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7e9c:	2101      	movs	r1, #1
    7e9e:	4618      	mov	r0, r3
    7ea0:	f002 fa16 	bl	a2d0 <mp_emit_bc_adjust_stack_size>
        EMIT(rot_two);
    7ea4:	687b      	ldr	r3, [r7, #4]
    7ea6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7ea8:	4618      	mov	r0, r3
    7eaa:	f002 fd4b 	bl	a944 <mp_emit_bc_rot_two>
        EMIT(pop_top);
    7eae:	687b      	ldr	r3, [r7, #4]
    7eb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7eb2:	4618      	mov	r0, r3
    7eb4:	f002 fd34 	bl	a920 <mp_emit_bc_pop_top>
        EMIT_ARG(label_assign, l_end);
    7eb8:	687b      	ldr	r3, [r7, #4]
    7eba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7ebc:	68b9      	ldr	r1, [r7, #8]
    7ebe:	4618      	mov	r0, r3
    7ec0:	f002 fa58 	bl	a374 <mp_emit_bc_label_assign>
    }
}
    7ec4:	bf00      	nop
    7ec6:	3728      	adds	r7, #40	; 0x28
    7ec8:	46bd      	mov	sp, r7
    7eca:	bd80      	pop	{r7, pc}
    7ecc:	00020838 	.word	0x00020838
    7ed0:	00020f54 	.word	0x00020f54
    7ed4:	00020234 	.word	0x00020234
    7ed8:	00020860 	.word	0x00020860

00007edc <compile_star_expr>:

STATIC void compile_star_expr(compiler_t *comp, mp_parse_node_struct_t *pns) {
    7edc:	b580      	push	{r7, lr}
    7ede:	b082      	sub	sp, #8
    7ee0:	af00      	add	r7, sp, #0
    7ee2:	6078      	str	r0, [r7, #4]
    7ee4:	6039      	str	r1, [r7, #0]
    compile_syntax_error(comp, (mp_parse_node_t)pns, "*x must be assignment target");
    7ee6:	683b      	ldr	r3, [r7, #0]
    7ee8:	4a04      	ldr	r2, [pc, #16]	; (7efc <compile_star_expr+0x20>)
    7eea:	4619      	mov	r1, r3
    7eec:	6878      	ldr	r0, [r7, #4]
    7eee:	f7fc fff3 	bl	4ed8 <compile_syntax_error>
}
    7ef2:	bf00      	nop
    7ef4:	3708      	adds	r7, #8
    7ef6:	46bd      	mov	sp, r7
    7ef8:	bd80      	pop	{r7, pc}
    7efa:	bf00      	nop
    7efc:	00020878 	.word	0x00020878

00007f00 <compile_expr>:

STATIC void compile_expr(compiler_t *comp, mp_parse_node_struct_t *pns) {
    7f00:	b580      	push	{r7, lr}
    7f02:	b082      	sub	sp, #8
    7f04:	af00      	add	r7, sp, #0
    7f06:	6078      	str	r0, [r7, #4]
    7f08:	6039      	str	r1, [r7, #0]
    c_binary_op(comp, pns, MP_BINARY_OP_OR);
    7f0a:	2215      	movs	r2, #21
    7f0c:	6839      	ldr	r1, [r7, #0]
    7f0e:	6878      	ldr	r0, [r7, #4]
    7f10:	f7ff fdb6 	bl	7a80 <c_binary_op>
}
    7f14:	bf00      	nop
    7f16:	3708      	adds	r7, #8
    7f18:	46bd      	mov	sp, r7
    7f1a:	bd80      	pop	{r7, pc}

00007f1c <compile_xor_expr>:

STATIC void compile_xor_expr(compiler_t *comp, mp_parse_node_struct_t *pns) {
    7f1c:	b580      	push	{r7, lr}
    7f1e:	b082      	sub	sp, #8
    7f20:	af00      	add	r7, sp, #0
    7f22:	6078      	str	r0, [r7, #4]
    7f24:	6039      	str	r1, [r7, #0]
    c_binary_op(comp, pns, MP_BINARY_OP_XOR);
    7f26:	2216      	movs	r2, #22
    7f28:	6839      	ldr	r1, [r7, #0]
    7f2a:	6878      	ldr	r0, [r7, #4]
    7f2c:	f7ff fda8 	bl	7a80 <c_binary_op>
}
    7f30:	bf00      	nop
    7f32:	3708      	adds	r7, #8
    7f34:	46bd      	mov	sp, r7
    7f36:	bd80      	pop	{r7, pc}

00007f38 <compile_and_expr>:

STATIC void compile_and_expr(compiler_t *comp, mp_parse_node_struct_t *pns) {
    7f38:	b580      	push	{r7, lr}
    7f3a:	b082      	sub	sp, #8
    7f3c:	af00      	add	r7, sp, #0
    7f3e:	6078      	str	r0, [r7, #4]
    7f40:	6039      	str	r1, [r7, #0]
    c_binary_op(comp, pns, MP_BINARY_OP_AND);
    7f42:	2217      	movs	r2, #23
    7f44:	6839      	ldr	r1, [r7, #0]
    7f46:	6878      	ldr	r0, [r7, #4]
    7f48:	f7ff fd9a 	bl	7a80 <c_binary_op>
}
    7f4c:	bf00      	nop
    7f4e:	3708      	adds	r7, #8
    7f50:	46bd      	mov	sp, r7
    7f52:	bd80      	pop	{r7, pc}

00007f54 <compile_term>:

STATIC void compile_term(compiler_t *comp, mp_parse_node_struct_t *pns) {
    7f54:	b580      	push	{r7, lr}
    7f56:	b086      	sub	sp, #24
    7f58:	af00      	add	r7, sp, #0
    7f5a:	6078      	str	r0, [r7, #4]
    7f5c:	6039      	str	r1, [r7, #0]
    int num_nodes = MP_PARSE_NODE_STRUCT_NUM_NODES(pns);
    7f5e:	683b      	ldr	r3, [r7, #0]
    7f60:	685b      	ldr	r3, [r3, #4]
    7f62:	0a1b      	lsrs	r3, r3, #8
    7f64:	60fb      	str	r3, [r7, #12]
    compile_node(comp, pns->nodes[0]);
    7f66:	683b      	ldr	r3, [r7, #0]
    7f68:	689b      	ldr	r3, [r3, #8]
    7f6a:	4619      	mov	r1, r3
    7f6c:	6878      	ldr	r0, [r7, #4]
    7f6e:	f000 fe11 	bl	8b94 <compile_node>
    for (int i = 1; i + 1 < num_nodes; i += 2) {
    7f72:	2301      	movs	r3, #1
    7f74:	617b      	str	r3, [r7, #20]
    7f76:	e054      	b.n	8022 <compile_term+0xce>
        compile_node(comp, pns->nodes[i + 1]);
    7f78:	697b      	ldr	r3, [r7, #20]
    7f7a:	1c5a      	adds	r2, r3, #1
    7f7c:	683b      	ldr	r3, [r7, #0]
    7f7e:	3202      	adds	r2, #2
    7f80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    7f84:	4619      	mov	r1, r3
    7f86:	6878      	ldr	r0, [r7, #4]
    7f88:	f000 fe04 	bl	8b94 <compile_node>
        mp_binary_op_t op;
        mp_token_kind_t tok = MP_PARSE_NODE_LEAF_ARG(pns->nodes[i]);
    7f8c:	683b      	ldr	r3, [r7, #0]
    7f8e:	697a      	ldr	r2, [r7, #20]
    7f90:	3202      	adds	r2, #2
    7f92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    7f96:	091b      	lsrs	r3, r3, #4
    7f98:	60bb      	str	r3, [r7, #8]
        switch (tok) {
    7f9a:	68bb      	ldr	r3, [r7, #8]
    7f9c:	3b2f      	subs	r3, #47	; 0x2f
    7f9e:	2b08      	cmp	r3, #8
    7fa0:	d829      	bhi.n	7ff6 <compile_term+0xa2>
    7fa2:	a201      	add	r2, pc, #4	; (adr r2, 7fa8 <compile_term+0x54>)
    7fa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    7fa8:	00007fcd 	.word	0x00007fcd
    7fac:	00007fd3 	.word	0x00007fd3
    7fb0:	00007fd9 	.word	0x00007fd9
    7fb4:	00007ff7 	.word	0x00007ff7
    7fb8:	00007fe5 	.word	0x00007fe5
    7fbc:	00007fdf 	.word	0x00007fdf
    7fc0:	00007feb 	.word	0x00007feb
    7fc4:	00007ff7 	.word	0x00007ff7
    7fc8:	00007ff1 	.word	0x00007ff1
            case MP_TOKEN_OP_PLUS:      op = MP_BINARY_OP_ADD; break;
    7fcc:	231a      	movs	r3, #26
    7fce:	613b      	str	r3, [r7, #16]
    7fd0:	e01e      	b.n	8010 <compile_term+0xbc>
            case MP_TOKEN_OP_MINUS:     op = MP_BINARY_OP_SUBTRACT; break;
    7fd2:	231b      	movs	r3, #27
    7fd4:	613b      	str	r3, [r7, #16]
    7fd6:	e01b      	b.n	8010 <compile_term+0xbc>
            case MP_TOKEN_OP_STAR:      op = MP_BINARY_OP_MULTIPLY; break;
    7fd8:	231c      	movs	r3, #28
    7fda:	613b      	str	r3, [r7, #16]
    7fdc:	e018      	b.n	8010 <compile_term+0xbc>
            case MP_TOKEN_OP_DBL_SLASH: op = MP_BINARY_OP_FLOOR_DIVIDE; break;
    7fde:	231d      	movs	r3, #29
    7fe0:	613b      	str	r3, [r7, #16]
    7fe2:	e015      	b.n	8010 <compile_term+0xbc>
            case MP_TOKEN_OP_SLASH:     op = MP_BINARY_OP_TRUE_DIVIDE; break;
    7fe4:	231e      	movs	r3, #30
    7fe6:	613b      	str	r3, [r7, #16]
    7fe8:	e012      	b.n	8010 <compile_term+0xbc>
            case MP_TOKEN_OP_PERCENT:   op = MP_BINARY_OP_MODULO; break;
    7fea:	231f      	movs	r3, #31
    7fec:	613b      	str	r3, [r7, #16]
    7fee:	e00f      	b.n	8010 <compile_term+0xbc>
            case MP_TOKEN_OP_DBL_LESS:  op = MP_BINARY_OP_LSHIFT; break;
    7ff0:	2318      	movs	r3, #24
    7ff2:	613b      	str	r3, [r7, #16]
    7ff4:	e00c      	b.n	8010 <compile_term+0xbc>
            default:
                assert(tok == MP_TOKEN_OP_DBL_MORE);
    7ff6:	68bb      	ldr	r3, [r7, #8]
    7ff8:	2b39      	cmp	r3, #57	; 0x39
    7ffa:	d006      	beq.n	800a <compile_term+0xb6>
    7ffc:	4b0d      	ldr	r3, [pc, #52]	; (8034 <compile_term+0xe0>)
    7ffe:	4a0e      	ldr	r2, [pc, #56]	; (8038 <compile_term+0xe4>)
    8000:	f640 015f 	movw	r1, #2143	; 0x85f
    8004:	480d      	ldr	r0, [pc, #52]	; (803c <compile_term+0xe8>)
    8006:	f013 fb63 	bl	1b6d0 <__assert_func>
                op = MP_BINARY_OP_RSHIFT;
    800a:	2319      	movs	r3, #25
    800c:	613b      	str	r3, [r7, #16]
                break;
    800e:	bf00      	nop
        }
        EMIT_ARG(binary_op, op);
    8010:	687b      	ldr	r3, [r7, #4]
    8012:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    8014:	6939      	ldr	r1, [r7, #16]
    8016:	4618      	mov	r0, r3
    8018:	f002 fe28 	bl	ac6c <mp_emit_bc_binary_op>
    for (int i = 1; i + 1 < num_nodes; i += 2) {
    801c:	697b      	ldr	r3, [r7, #20]
    801e:	3302      	adds	r3, #2
    8020:	617b      	str	r3, [r7, #20]
    8022:	697b      	ldr	r3, [r7, #20]
    8024:	1c5a      	adds	r2, r3, #1
    8026:	68fb      	ldr	r3, [r7, #12]
    8028:	429a      	cmp	r2, r3
    802a:	dba5      	blt.n	7f78 <compile_term+0x24>
    }
}
    802c:	bf00      	nop
    802e:	3718      	adds	r7, #24
    8030:	46bd      	mov	sp, r7
    8032:	bd80      	pop	{r7, pc}
    8034:	00020898 	.word	0x00020898
    8038:	00020f68 	.word	0x00020f68
    803c:	00020234 	.word	0x00020234

00008040 <compile_factor_2>:

STATIC void compile_factor_2(compiler_t *comp, mp_parse_node_struct_t *pns) {
    8040:	b580      	push	{r7, lr}
    8042:	b084      	sub	sp, #16
    8044:	af00      	add	r7, sp, #0
    8046:	6078      	str	r0, [r7, #4]
    8048:	6039      	str	r1, [r7, #0]
    compile_node(comp, pns->nodes[1]);
    804a:	683b      	ldr	r3, [r7, #0]
    804c:	68db      	ldr	r3, [r3, #12]
    804e:	4619      	mov	r1, r3
    8050:	6878      	ldr	r0, [r7, #4]
    8052:	f000 fd9f 	bl	8b94 <compile_node>
    mp_unary_op_t op;
    mp_token_kind_t tok = MP_PARSE_NODE_LEAF_ARG(pns->nodes[0]);
    8056:	683b      	ldr	r3, [r7, #0]
    8058:	689b      	ldr	r3, [r3, #8]
    805a:	091b      	lsrs	r3, r3, #4
    805c:	60bb      	str	r3, [r7, #8]
    switch (tok) {
    805e:	68bb      	ldr	r3, [r7, #8]
    8060:	2b2f      	cmp	r3, #47	; 0x2f
    8062:	d002      	beq.n	806a <compile_factor_2+0x2a>
    8064:	2b30      	cmp	r3, #48	; 0x30
    8066:	d003      	beq.n	8070 <compile_factor_2+0x30>
    8068:	e005      	b.n	8076 <compile_factor_2+0x36>
        case MP_TOKEN_OP_PLUS:  op = MP_UNARY_OP_POSITIVE; break;
    806a:	2300      	movs	r3, #0
    806c:	60fb      	str	r3, [r7, #12]
    806e:	e00f      	b.n	8090 <compile_factor_2+0x50>
        case MP_TOKEN_OP_MINUS: op = MP_UNARY_OP_NEGATIVE; break;
    8070:	2301      	movs	r3, #1
    8072:	60fb      	str	r3, [r7, #12]
    8074:	e00c      	b.n	8090 <compile_factor_2+0x50>
        default:
            assert(tok == MP_TOKEN_OP_TILDE);
    8076:	68bb      	ldr	r3, [r7, #8]
    8078:	2b3d      	cmp	r3, #61	; 0x3d
    807a:	d006      	beq.n	808a <compile_factor_2+0x4a>
    807c:	4b09      	ldr	r3, [pc, #36]	; (80a4 <compile_factor_2+0x64>)
    807e:	4a0a      	ldr	r2, [pc, #40]	; (80a8 <compile_factor_2+0x68>)
    8080:	f640 016f 	movw	r1, #2159	; 0x86f
    8084:	4809      	ldr	r0, [pc, #36]	; (80ac <compile_factor_2+0x6c>)
    8086:	f013 fb23 	bl	1b6d0 <__assert_func>
            op = MP_UNARY_OP_INVERT;
    808a:	2302      	movs	r3, #2
    808c:	60fb      	str	r3, [r7, #12]
            break;
    808e:	bf00      	nop
    }
    EMIT_ARG(unary_op, op);
    8090:	687b      	ldr	r3, [r7, #4]
    8092:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    8094:	68f9      	ldr	r1, [r7, #12]
    8096:	4618      	mov	r0, r3
    8098:	f002 fdd2 	bl	ac40 <mp_emit_bc_unary_op>
}
    809c:	bf00      	nop
    809e:	3710      	adds	r7, #16
    80a0:	46bd      	mov	sp, r7
    80a2:	bd80      	pop	{r7, pc}
    80a4:	000208b4 	.word	0x000208b4
    80a8:	00020f78 	.word	0x00020f78
    80ac:	00020234 	.word	0x00020234

000080b0 <compile_atom_expr_normal>:

STATIC void compile_atom_expr_normal(compiler_t *comp, mp_parse_node_struct_t *pns) {
    80b0:	b580      	push	{r7, lr}
    80b2:	b08c      	sub	sp, #48	; 0x30
    80b4:	af00      	add	r7, sp, #0
    80b6:	6078      	str	r0, [r7, #4]
    80b8:	6039      	str	r1, [r7, #0]
    // compile the subject of the expression
    compile_node(comp, pns->nodes[0]);
    80ba:	683b      	ldr	r3, [r7, #0]
    80bc:	689b      	ldr	r3, [r3, #8]
    80be:	4619      	mov	r1, r3
    80c0:	6878      	ldr	r0, [r7, #4]
    80c2:	f000 fd67 	bl	8b94 <compile_node>

    // compile_atom_expr_await may call us with a NULL node
    if (MP_PARSE_NODE_IS_NULL(pns->nodes[1])) {
    80c6:	683b      	ldr	r3, [r7, #0]
    80c8:	68db      	ldr	r3, [r3, #12]
    80ca:	2b00      	cmp	r3, #0
    80cc:	f000 80ee 	beq.w	82ac <compile_atom_expr_normal+0x1fc>
        return;
    }

    // get the array of trailers (known to be an array of PARSE_NODE_STRUCT)
    size_t num_trail = 1;
    80d0:	2301      	movs	r3, #1
    80d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    mp_parse_node_struct_t **pns_trail = (mp_parse_node_struct_t**)&pns->nodes[1];
    80d4:	683b      	ldr	r3, [r7, #0]
    80d6:	330c      	adds	r3, #12
    80d8:	62bb      	str	r3, [r7, #40]	; 0x28
    if (MP_PARSE_NODE_STRUCT_KIND(pns_trail[0]) == PN_atom_expr_trailers) {
    80da:	6abb      	ldr	r3, [r7, #40]	; 0x28
    80dc:	681b      	ldr	r3, [r3, #0]
    80de:	685b      	ldr	r3, [r3, #4]
    80e0:	b2db      	uxtb	r3, r3
    80e2:	2b86      	cmp	r3, #134	; 0x86
    80e4:	d108      	bne.n	80f8 <compile_atom_expr_normal+0x48>
        num_trail = MP_PARSE_NODE_STRUCT_NUM_NODES(pns_trail[0]);
    80e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
    80e8:	681b      	ldr	r3, [r3, #0]
    80ea:	685b      	ldr	r3, [r3, #4]
    80ec:	0a1b      	lsrs	r3, r3, #8
    80ee:	62fb      	str	r3, [r7, #44]	; 0x2c
        pns_trail = (mp_parse_node_struct_t**)&pns_trail[0]->nodes[0];
    80f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
    80f2:	681b      	ldr	r3, [r3, #0]
    80f4:	3308      	adds	r3, #8
    80f6:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    // the current index into the array of trailers
    size_t i = 0;
    80f8:	2300      	movs	r3, #0
    80fa:	627b      	str	r3, [r7, #36]	; 0x24

    // handle special super() call
    if (comp->scope_cur->kind == SCOPE_FUNCTION
    80fc:	687b      	ldr	r3, [r7, #4]
    80fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    8100:	681b      	ldr	r3, [r3, #0]
    8102:	2b07      	cmp	r3, #7
    8104:	f040 80cd 	bne.w	82a2 <compile_atom_expr_normal+0x1f2>
        && MP_PARSE_NODE_IS_ID(pns->nodes[0])
    8108:	683b      	ldr	r3, [r7, #0]
    810a:	689b      	ldr	r3, [r3, #8]
    810c:	f003 030f 	and.w	r3, r3, #15
    8110:	2b02      	cmp	r3, #2
    8112:	f040 80c6 	bne.w	82a2 <compile_atom_expr_normal+0x1f2>
        && MP_PARSE_NODE_LEAF_ARG(pns->nodes[0]) == MP_QSTR_super
    8116:	683b      	ldr	r3, [r7, #0]
    8118:	689b      	ldr	r3, [r3, #8]
    811a:	091b      	lsrs	r3, r3, #4
    811c:	f240 126f 	movw	r2, #367	; 0x16f
    8120:	4293      	cmp	r3, r2
    8122:	f040 80be 	bne.w	82a2 <compile_atom_expr_normal+0x1f2>
        && MP_PARSE_NODE_STRUCT_KIND(pns_trail[0]) == PN_trailer_paren
    8126:	6abb      	ldr	r3, [r7, #40]	; 0x28
    8128:	681b      	ldr	r3, [r3, #0]
    812a:	685b      	ldr	r3, [r3, #4]
    812c:	b2db      	uxtb	r3, r3
    812e:	2b2d      	cmp	r3, #45	; 0x2d
    8130:	f040 80b7 	bne.w	82a2 <compile_atom_expr_normal+0x1f2>
        && MP_PARSE_NODE_IS_NULL(pns_trail[0]->nodes[0])) {
    8134:	6abb      	ldr	r3, [r7, #40]	; 0x28
    8136:	681b      	ldr	r3, [r3, #0]
    8138:	689b      	ldr	r3, [r3, #8]
    813a:	2b00      	cmp	r3, #0
    813c:	f040 80b1 	bne.w	82a2 <compile_atom_expr_normal+0x1f2>
        // at this point we have matched "super()" within a function

        // load the class for super to search for a parent
        compile_load_id(comp, MP_QSTR___class__);
    8140:	2106      	movs	r1, #6
    8142:	6878      	ldr	r0, [r7, #4]
    8144:	f7fc ffca 	bl	50dc <compile_load_id>

        // look for first argument to function (assumes it's "self")
        bool found = false;
    8148:	2300      	movs	r3, #0
    814a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        id_info_t *id = &comp->scope_cur->id_info[0];
    814e:	687b      	ldr	r3, [r7, #4]
    8150:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    8152:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    8154:	61fb      	str	r3, [r7, #28]
        for (size_t n = comp->scope_cur->id_info_len; n > 0; --n, ++id) {
    8156:	687b      	ldr	r3, [r7, #4]
    8158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    815a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    815c:	61bb      	str	r3, [r7, #24]
    815e:	e015      	b.n	818c <compile_atom_expr_normal+0xdc>
            if (id->flags & ID_FLAG_IS_PARAM) {
    8160:	69fb      	ldr	r3, [r7, #28]
    8162:	785b      	ldrb	r3, [r3, #1]
    8164:	f003 0301 	and.w	r3, r3, #1
    8168:	2b00      	cmp	r3, #0
    816a:	d009      	beq.n	8180 <compile_atom_expr_normal+0xd0>
                // first argument found; load it
                compile_load_id(comp, id->qst);
    816c:	69fb      	ldr	r3, [r7, #28]
    816e:	685b      	ldr	r3, [r3, #4]
    8170:	4619      	mov	r1, r3
    8172:	6878      	ldr	r0, [r7, #4]
    8174:	f7fc ffb2 	bl	50dc <compile_load_id>
                found = true;
    8178:	2301      	movs	r3, #1
    817a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
                break;
    817e:	e008      	b.n	8192 <compile_atom_expr_normal+0xe2>
        for (size_t n = comp->scope_cur->id_info_len; n > 0; --n, ++id) {
    8180:	69bb      	ldr	r3, [r7, #24]
    8182:	3b01      	subs	r3, #1
    8184:	61bb      	str	r3, [r7, #24]
    8186:	69fb      	ldr	r3, [r7, #28]
    8188:	3308      	adds	r3, #8
    818a:	61fb      	str	r3, [r7, #28]
    818c:	69bb      	ldr	r3, [r7, #24]
    818e:	2b00      	cmp	r3, #0
    8190:	d1e6      	bne.n	8160 <compile_atom_expr_normal+0xb0>
            }
        }
        if (!found) {
    8192:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
    8196:	f083 0301 	eor.w	r3, r3, #1
    819a:	b2db      	uxtb	r3, r3
    819c:	2b00      	cmp	r3, #0
    819e:	d007      	beq.n	81b0 <compile_atom_expr_normal+0x100>
            compile_syntax_error(comp, (mp_parse_node_t)pns_trail[0],
    81a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
    81a2:	681b      	ldr	r3, [r3, #0]
    81a4:	4a43      	ldr	r2, [pc, #268]	; (82b4 <compile_atom_expr_normal+0x204>)
    81a6:	4619      	mov	r1, r3
    81a8:	6878      	ldr	r0, [r7, #4]
    81aa:	f7fc fe95 	bl	4ed8 <compile_syntax_error>
                "super() can't find self"); // really a TypeError
            return;
    81ae:	e07e      	b.n	82ae <compile_atom_expr_normal+0x1fe>
        }

        if (num_trail >= 3
    81b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    81b2:	2b02      	cmp	r3, #2
    81b4:	d926      	bls.n	8204 <compile_atom_expr_normal+0x154>
            && MP_PARSE_NODE_STRUCT_KIND(pns_trail[1]) == PN_trailer_period
    81b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
    81b8:	3304      	adds	r3, #4
    81ba:	681b      	ldr	r3, [r3, #0]
    81bc:	685b      	ldr	r3, [r3, #4]
    81be:	b2db      	uxtb	r3, r3
    81c0:	2b2f      	cmp	r3, #47	; 0x2f
    81c2:	d11f      	bne.n	8204 <compile_atom_expr_normal+0x154>
            && MP_PARSE_NODE_STRUCT_KIND(pns_trail[2]) == PN_trailer_paren) {
    81c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
    81c6:	3308      	adds	r3, #8
    81c8:	681b      	ldr	r3, [r3, #0]
    81ca:	685b      	ldr	r3, [r3, #4]
    81cc:	b2db      	uxtb	r3, r3
    81ce:	2b2d      	cmp	r3, #45	; 0x2d
    81d0:	d118      	bne.n	8204 <compile_atom_expr_normal+0x154>
            // optimisation for method calls super().f(...), to eliminate heap allocation
            mp_parse_node_struct_t *pns_period = pns_trail[1];
    81d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    81d4:	685b      	ldr	r3, [r3, #4]
    81d6:	617b      	str	r3, [r7, #20]
            mp_parse_node_struct_t *pns_paren = pns_trail[2];
    81d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
    81da:	689b      	ldr	r3, [r3, #8]
    81dc:	613b      	str	r3, [r7, #16]
            EMIT_ARG(load_method, MP_PARSE_NODE_LEAF_ARG(pns_period->nodes[0]), true);
    81de:	687b      	ldr	r3, [r7, #4]
    81e0:	6a98      	ldr	r0, [r3, #40]	; 0x28
    81e2:	697b      	ldr	r3, [r7, #20]
    81e4:	689b      	ldr	r3, [r3, #8]
    81e6:	091b      	lsrs	r3, r3, #4
    81e8:	2201      	movs	r2, #1
    81ea:	4619      	mov	r1, r3
    81ec:	f002 fa4c 	bl	a688 <mp_emit_bc_load_method>
            compile_trailer_paren_helper(comp, pns_paren->nodes[0], true, 0);
    81f0:	693b      	ldr	r3, [r7, #16]
    81f2:	6899      	ldr	r1, [r3, #8]
    81f4:	2300      	movs	r3, #0
    81f6:	2201      	movs	r2, #1
    81f8:	6878      	ldr	r0, [r7, #4]
    81fa:	f000 f871 	bl	82e0 <compile_trailer_paren_helper>
            i = 3;
    81fe:	2303      	movs	r3, #3
    8200:	627b      	str	r3, [r7, #36]	; 0x24
            && MP_PARSE_NODE_STRUCT_KIND(pns_trail[2]) == PN_trailer_paren) {
    8202:	e008      	b.n	8216 <compile_atom_expr_normal+0x166>
        } else {
            // a super() call
            EMIT_ARG(call_function, 2, 0, 0);
    8204:	687b      	ldr	r3, [r7, #4]
    8206:	6a98      	ldr	r0, [r3, #40]	; 0x28
    8208:	2300      	movs	r3, #0
    820a:	2200      	movs	r2, #0
    820c:	2102      	movs	r1, #2
    820e:	f002 feb3 	bl	af78 <mp_emit_bc_call_function>
            i = 1;
    8212:	2301      	movs	r3, #1
    8214:	627b      	str	r3, [r7, #36]	; 0x24
        }
    }

    // compile the remaining trailers
    for (; i < num_trail; i++) {
    8216:	e044      	b.n	82a2 <compile_atom_expr_normal+0x1f2>
        if (i + 1 < num_trail
    8218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    821a:	1c5a      	adds	r2, r3, #1
    821c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    821e:	429a      	cmp	r2, r3
    8220:	d233      	bcs.n	828a <compile_atom_expr_normal+0x1da>
            && MP_PARSE_NODE_STRUCT_KIND(pns_trail[i]) == PN_trailer_period
    8222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    8224:	009b      	lsls	r3, r3, #2
    8226:	6aba      	ldr	r2, [r7, #40]	; 0x28
    8228:	4413      	add	r3, r2
    822a:	681b      	ldr	r3, [r3, #0]
    822c:	685b      	ldr	r3, [r3, #4]
    822e:	b2db      	uxtb	r3, r3
    8230:	2b2f      	cmp	r3, #47	; 0x2f
    8232:	d12a      	bne.n	828a <compile_atom_expr_normal+0x1da>
            && MP_PARSE_NODE_STRUCT_KIND(pns_trail[i + 1]) == PN_trailer_paren) {
    8234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    8236:	3301      	adds	r3, #1
    8238:	009b      	lsls	r3, r3, #2
    823a:	6aba      	ldr	r2, [r7, #40]	; 0x28
    823c:	4413      	add	r3, r2
    823e:	681b      	ldr	r3, [r3, #0]
    8240:	685b      	ldr	r3, [r3, #4]
    8242:	b2db      	uxtb	r3, r3
    8244:	2b2d      	cmp	r3, #45	; 0x2d
    8246:	d120      	bne.n	828a <compile_atom_expr_normal+0x1da>
            // optimisation for method calls a.f(...), following PyPy
            mp_parse_node_struct_t *pns_period = pns_trail[i];
    8248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    824a:	009b      	lsls	r3, r3, #2
    824c:	6aba      	ldr	r2, [r7, #40]	; 0x28
    824e:	4413      	add	r3, r2
    8250:	681b      	ldr	r3, [r3, #0]
    8252:	60fb      	str	r3, [r7, #12]
            mp_parse_node_struct_t *pns_paren = pns_trail[i + 1];
    8254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    8256:	3301      	adds	r3, #1
    8258:	009b      	lsls	r3, r3, #2
    825a:	6aba      	ldr	r2, [r7, #40]	; 0x28
    825c:	4413      	add	r3, r2
    825e:	681b      	ldr	r3, [r3, #0]
    8260:	60bb      	str	r3, [r7, #8]
            EMIT_ARG(load_method, MP_PARSE_NODE_LEAF_ARG(pns_period->nodes[0]), false);
    8262:	687b      	ldr	r3, [r7, #4]
    8264:	6a98      	ldr	r0, [r3, #40]	; 0x28
    8266:	68fb      	ldr	r3, [r7, #12]
    8268:	689b      	ldr	r3, [r3, #8]
    826a:	091b      	lsrs	r3, r3, #4
    826c:	2200      	movs	r2, #0
    826e:	4619      	mov	r1, r3
    8270:	f002 fa0a 	bl	a688 <mp_emit_bc_load_method>
            compile_trailer_paren_helper(comp, pns_paren->nodes[0], true, 0);
    8274:	68bb      	ldr	r3, [r7, #8]
    8276:	6899      	ldr	r1, [r3, #8]
    8278:	2300      	movs	r3, #0
    827a:	2201      	movs	r2, #1
    827c:	6878      	ldr	r0, [r7, #4]
    827e:	f000 f82f 	bl	82e0 <compile_trailer_paren_helper>
            i += 1;
    8282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    8284:	3301      	adds	r3, #1
    8286:	627b      	str	r3, [r7, #36]	; 0x24
            && MP_PARSE_NODE_STRUCT_KIND(pns_trail[i + 1]) == PN_trailer_paren) {
    8288:	e008      	b.n	829c <compile_atom_expr_normal+0x1ec>
        } else {
            // node is one of: trailer_paren, trailer_bracket, trailer_period
            compile_node(comp, (mp_parse_node_t)pns_trail[i]);
    828a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    828c:	009b      	lsls	r3, r3, #2
    828e:	6aba      	ldr	r2, [r7, #40]	; 0x28
    8290:	4413      	add	r3, r2
    8292:	681b      	ldr	r3, [r3, #0]
    8294:	4619      	mov	r1, r3
    8296:	6878      	ldr	r0, [r7, #4]
    8298:	f000 fc7c 	bl	8b94 <compile_node>
    for (; i < num_trail; i++) {
    829c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    829e:	3301      	adds	r3, #1
    82a0:	627b      	str	r3, [r7, #36]	; 0x24
    82a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    82a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    82a6:	429a      	cmp	r2, r3
    82a8:	d3b6      	bcc.n	8218 <compile_atom_expr_normal+0x168>
    82aa:	e000      	b.n	82ae <compile_atom_expr_normal+0x1fe>
        return;
    82ac:	bf00      	nop
        }
    }
}
    82ae:	3730      	adds	r7, #48	; 0x30
    82b0:	46bd      	mov	sp, r7
    82b2:	bd80      	pop	{r7, pc}
    82b4:	000208d0 	.word	0x000208d0

000082b8 <compile_power>:

STATIC void compile_power(compiler_t *comp, mp_parse_node_struct_t *pns) {
    82b8:	b580      	push	{r7, lr}
    82ba:	b082      	sub	sp, #8
    82bc:	af00      	add	r7, sp, #0
    82be:	6078      	str	r0, [r7, #4]
    82c0:	6039      	str	r1, [r7, #0]
    compile_generic_all_nodes(comp, pns); // 2 nodes, arguments of power
    82c2:	6839      	ldr	r1, [r7, #0]
    82c4:	6878      	ldr	r0, [r7, #4]
    82c6:	f7fc fedb 	bl	5080 <compile_generic_all_nodes>
    EMIT_ARG(binary_op, MP_BINARY_OP_POWER);
    82ca:	687b      	ldr	r3, [r7, #4]
    82cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    82ce:	2120      	movs	r1, #32
    82d0:	4618      	mov	r0, r3
    82d2:	f002 fccb 	bl	ac6c <mp_emit_bc_binary_op>
}
    82d6:	bf00      	nop
    82d8:	3708      	adds	r7, #8
    82da:	46bd      	mov	sp, r7
    82dc:	bd80      	pop	{r7, pc}
    82de:	bf00      	nop

000082e0 <compile_trailer_paren_helper>:

STATIC void compile_trailer_paren_helper(compiler_t *comp, mp_parse_node_t pn_arglist, bool is_method_call, int n_positional_extra) {
    82e0:	b580      	push	{r7, lr}
    82e2:	b08e      	sub	sp, #56	; 0x38
    82e4:	af00      	add	r7, sp, #0
    82e6:	60f8      	str	r0, [r7, #12]
    82e8:	60b9      	str	r1, [r7, #8]
    82ea:	603b      	str	r3, [r7, #0]
    82ec:	4613      	mov	r3, r2
    82ee:	71fb      	strb	r3, [r7, #7]
    // function to call is on top of stack

    // get the list of arguments
    mp_parse_node_t *args;
    int n_args = mp_parse_node_extract_list(&pn_arglist, PN_arglist, &args);
    82f0:	f107 0214 	add.w	r2, r7, #20
    82f4:	f107 0308 	add.w	r3, r7, #8
    82f8:	2197      	movs	r1, #151	; 0x97
    82fa:	4618      	mov	r0, r3
    82fc:	f7fb fcf2 	bl	3ce4 <mp_parse_node_extract_list>
    8300:	61f8      	str	r0, [r7, #28]

    // compile the arguments
    // Rather than calling compile_node on the list, we go through the list of args
    // explicitly here so that we can count the number of arguments and give sensible
    // error messages.
    int n_positional = n_positional_extra;
    8302:	683b      	ldr	r3, [r7, #0]
    8304:	637b      	str	r3, [r7, #52]	; 0x34
    uint n_keyword = 0;
    8306:	2300      	movs	r3, #0
    8308:	633b      	str	r3, [r7, #48]	; 0x30
    uint star_flags = 0;
    830a:	2300      	movs	r3, #0
    830c:	62fb      	str	r3, [r7, #44]	; 0x2c
    mp_parse_node_struct_t *star_args_node = NULL, *dblstar_args_node = NULL;
    830e:	2300      	movs	r3, #0
    8310:	62bb      	str	r3, [r7, #40]	; 0x28
    8312:	2300      	movs	r3, #0
    8314:	627b      	str	r3, [r7, #36]	; 0x24
    for (int i = 0; i < n_args; i++) {
    8316:	2300      	movs	r3, #0
    8318:	623b      	str	r3, [r7, #32]
    831a:	e0af      	b.n	847c <compile_trailer_paren_helper+0x19c>
        if (MP_PARSE_NODE_IS_STRUCT(args[i])) {
    831c:	697a      	ldr	r2, [r7, #20]
    831e:	6a3b      	ldr	r3, [r7, #32]
    8320:	009b      	lsls	r3, r3, #2
    8322:	4413      	add	r3, r2
    8324:	681b      	ldr	r3, [r3, #0]
    8326:	2b00      	cmp	r3, #0
    8328:	d07d      	beq.n	8426 <compile_trailer_paren_helper+0x146>
    832a:	697a      	ldr	r2, [r7, #20]
    832c:	6a3b      	ldr	r3, [r7, #32]
    832e:	009b      	lsls	r3, r3, #2
    8330:	4413      	add	r3, r2
    8332:	681b      	ldr	r3, [r3, #0]
    8334:	f003 0303 	and.w	r3, r3, #3
    8338:	2b00      	cmp	r3, #0
    833a:	d174      	bne.n	8426 <compile_trailer_paren_helper+0x146>
            mp_parse_node_struct_t *pns_arg = (mp_parse_node_struct_t*)args[i];
    833c:	697a      	ldr	r2, [r7, #20]
    833e:	6a3b      	ldr	r3, [r7, #32]
    8340:	009b      	lsls	r3, r3, #2
    8342:	4413      	add	r3, r2
    8344:	681b      	ldr	r3, [r3, #0]
    8346:	61bb      	str	r3, [r7, #24]
            if (MP_PARSE_NODE_STRUCT_KIND(pns_arg) == PN_arglist_star) {
    8348:	69bb      	ldr	r3, [r7, #24]
    834a:	685b      	ldr	r3, [r3, #4]
    834c:	b2db      	uxtb	r3, r3
    834e:	2b99      	cmp	r3, #153	; 0x99
    8350:	d112      	bne.n	8378 <compile_trailer_paren_helper+0x98>
                if (star_flags & MP_EMIT_STAR_FLAG_SINGLE) {
    8352:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    8354:	f003 0301 	and.w	r3, r3, #1
    8358:	2b00      	cmp	r3, #0
    835a:	d006      	beq.n	836a <compile_trailer_paren_helper+0x8a>
                    compile_syntax_error(comp, (mp_parse_node_t)pns_arg, "can't have multiple *x");
    835c:	69bb      	ldr	r3, [r7, #24]
    835e:	4a65      	ldr	r2, [pc, #404]	; (84f4 <compile_trailer_paren_helper+0x214>)
    8360:	4619      	mov	r1, r3
    8362:	68f8      	ldr	r0, [r7, #12]
    8364:	f7fc fdb8 	bl	4ed8 <compile_syntax_error>
                    return;
    8368:	e0c0      	b.n	84ec <compile_trailer_paren_helper+0x20c>
                }
                star_flags |= MP_EMIT_STAR_FLAG_SINGLE;
    836a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    836c:	f043 0301 	orr.w	r3, r3, #1
    8370:	62fb      	str	r3, [r7, #44]	; 0x2c
                star_args_node = pns_arg;
    8372:	69bb      	ldr	r3, [r7, #24]
    8374:	62bb      	str	r3, [r7, #40]	; 0x28
        if (MP_PARSE_NODE_IS_STRUCT(args[i])) {
    8376:	e07e      	b.n	8476 <compile_trailer_paren_helper+0x196>
            } else if (MP_PARSE_NODE_STRUCT_KIND(pns_arg) == PN_arglist_dbl_star) {
    8378:	69bb      	ldr	r3, [r7, #24]
    837a:	685b      	ldr	r3, [r3, #4]
    837c:	b2db      	uxtb	r3, r3
    837e:	2b9a      	cmp	r3, #154	; 0x9a
    8380:	d112      	bne.n	83a8 <compile_trailer_paren_helper+0xc8>
                if (star_flags & MP_EMIT_STAR_FLAG_DOUBLE) {
    8382:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    8384:	f003 0302 	and.w	r3, r3, #2
    8388:	2b00      	cmp	r3, #0
    838a:	d006      	beq.n	839a <compile_trailer_paren_helper+0xba>
                    compile_syntax_error(comp, (mp_parse_node_t)pns_arg, "can't have multiple **x");
    838c:	69bb      	ldr	r3, [r7, #24]
    838e:	4a5a      	ldr	r2, [pc, #360]	; (84f8 <compile_trailer_paren_helper+0x218>)
    8390:	4619      	mov	r1, r3
    8392:	68f8      	ldr	r0, [r7, #12]
    8394:	f7fc fda0 	bl	4ed8 <compile_syntax_error>
                    return;
    8398:	e0a8      	b.n	84ec <compile_trailer_paren_helper+0x20c>
                }
                star_flags |= MP_EMIT_STAR_FLAG_DOUBLE;
    839a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    839c:	f043 0302 	orr.w	r3, r3, #2
    83a0:	62fb      	str	r3, [r7, #44]	; 0x2c
                dblstar_args_node = pns_arg;
    83a2:	69bb      	ldr	r3, [r7, #24]
    83a4:	627b      	str	r3, [r7, #36]	; 0x24
        if (MP_PARSE_NODE_IS_STRUCT(args[i])) {
    83a6:	e066      	b.n	8476 <compile_trailer_paren_helper+0x196>
            } else if (MP_PARSE_NODE_STRUCT_KIND(pns_arg) == PN_argument) {
    83a8:	69bb      	ldr	r3, [r7, #24]
    83aa:	685b      	ldr	r3, [r3, #4]
    83ac:	b2db      	uxtb	r3, r3
    83ae:	2b9b      	cmp	r3, #155	; 0x9b
    83b0:	d138      	bne.n	8424 <compile_trailer_paren_helper+0x144>
                if (!MP_PARSE_NODE_IS_STRUCT_KIND(pns_arg->nodes[1], PN_comp_for)) {
    83b2:	69bb      	ldr	r3, [r7, #24]
    83b4:	68db      	ldr	r3, [r3, #12]
    83b6:	2b00      	cmp	r3, #0
    83b8:	d00b      	beq.n	83d2 <compile_trailer_paren_helper+0xf2>
    83ba:	69bb      	ldr	r3, [r7, #24]
    83bc:	68db      	ldr	r3, [r3, #12]
    83be:	f003 0303 	and.w	r3, r3, #3
    83c2:	2b00      	cmp	r3, #0
    83c4:	d105      	bne.n	83d2 <compile_trailer_paren_helper+0xf2>
    83c6:	69bb      	ldr	r3, [r7, #24]
    83c8:	68db      	ldr	r3, [r3, #12]
    83ca:	685b      	ldr	r3, [r3, #4]
    83cc:	b2db      	uxtb	r3, r3
    83ce:	2b9f      	cmp	r3, #159	; 0x9f
    83d0:	d01f      	beq.n	8412 <compile_trailer_paren_helper+0x132>
                    if (!MP_PARSE_NODE_IS_ID(pns_arg->nodes[0])) {
    83d2:	69bb      	ldr	r3, [r7, #24]
    83d4:	689b      	ldr	r3, [r3, #8]
    83d6:	f003 030f 	and.w	r3, r3, #15
    83da:	2b02      	cmp	r3, #2
    83dc:	d006      	beq.n	83ec <compile_trailer_paren_helper+0x10c>
                        compile_syntax_error(comp, (mp_parse_node_t)pns_arg, "LHS of keyword arg must be an id");
    83de:	69bb      	ldr	r3, [r7, #24]
    83e0:	4a46      	ldr	r2, [pc, #280]	; (84fc <compile_trailer_paren_helper+0x21c>)
    83e2:	4619      	mov	r1, r3
    83e4:	68f8      	ldr	r0, [r7, #12]
    83e6:	f7fc fd77 	bl	4ed8 <compile_syntax_error>
                        return;
    83ea:	e07f      	b.n	84ec <compile_trailer_paren_helper+0x20c>
                    }
                    EMIT_ARG(load_const_str, MP_PARSE_NODE_LEAF_ARG(pns_arg->nodes[0]));
    83ec:	68fb      	ldr	r3, [r7, #12]
    83ee:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    83f0:	69bb      	ldr	r3, [r7, #24]
    83f2:	689b      	ldr	r3, [r3, #8]
    83f4:	091b      	lsrs	r3, r3, #4
    83f6:	4619      	mov	r1, r3
    83f8:	4610      	mov	r0, r2
    83fa:	f002 f8a7 	bl	a54c <mp_emit_bc_load_const_str>
                    compile_node(comp, pns_arg->nodes[1]);
    83fe:	69bb      	ldr	r3, [r7, #24]
    8400:	68db      	ldr	r3, [r3, #12]
    8402:	4619      	mov	r1, r3
    8404:	68f8      	ldr	r0, [r7, #12]
    8406:	f000 fbc5 	bl	8b94 <compile_node>
                    n_keyword += 1;
    840a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    840c:	3301      	adds	r3, #1
    840e:	633b      	str	r3, [r7, #48]	; 0x30
        if (MP_PARSE_NODE_IS_STRUCT(args[i])) {
    8410:	e031      	b.n	8476 <compile_trailer_paren_helper+0x196>
                } else {
                    compile_comprehension(comp, pns_arg, SCOPE_GEN_EXPR);
    8412:	2206      	movs	r2, #6
    8414:	69b9      	ldr	r1, [r7, #24]
    8416:	68f8      	ldr	r0, [r7, #12]
    8418:	f000 f876 	bl	8508 <compile_comprehension>
                    n_positional++;
    841c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    841e:	3301      	adds	r3, #1
    8420:	637b      	str	r3, [r7, #52]	; 0x34
        if (MP_PARSE_NODE_IS_STRUCT(args[i])) {
    8422:	e028      	b.n	8476 <compile_trailer_paren_helper+0x196>
                }
            } else {
                goto normal_argument;
    8424:	bf00      	nop
            }
        } else {
            normal_argument:
            if (star_flags) {
    8426:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    8428:	2b00      	cmp	r3, #0
    842a:	d00a      	beq.n	8442 <compile_trailer_paren_helper+0x162>
                compile_syntax_error(comp, args[i], "non-keyword arg after */**");
    842c:	697a      	ldr	r2, [r7, #20]
    842e:	6a3b      	ldr	r3, [r7, #32]
    8430:	009b      	lsls	r3, r3, #2
    8432:	4413      	add	r3, r2
    8434:	681b      	ldr	r3, [r3, #0]
    8436:	4a32      	ldr	r2, [pc, #200]	; (8500 <compile_trailer_paren_helper+0x220>)
    8438:	4619      	mov	r1, r3
    843a:	68f8      	ldr	r0, [r7, #12]
    843c:	f7fc fd4c 	bl	4ed8 <compile_syntax_error>
                return;
    8440:	e054      	b.n	84ec <compile_trailer_paren_helper+0x20c>
            }
            if (n_keyword > 0) {
    8442:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    8444:	2b00      	cmp	r3, #0
    8446:	d00a      	beq.n	845e <compile_trailer_paren_helper+0x17e>
                compile_syntax_error(comp, args[i], "non-keyword arg after keyword arg");
    8448:	697a      	ldr	r2, [r7, #20]
    844a:	6a3b      	ldr	r3, [r7, #32]
    844c:	009b      	lsls	r3, r3, #2
    844e:	4413      	add	r3, r2
    8450:	681b      	ldr	r3, [r3, #0]
    8452:	4a2c      	ldr	r2, [pc, #176]	; (8504 <compile_trailer_paren_helper+0x224>)
    8454:	4619      	mov	r1, r3
    8456:	68f8      	ldr	r0, [r7, #12]
    8458:	f7fc fd3e 	bl	4ed8 <compile_syntax_error>
                return;
    845c:	e046      	b.n	84ec <compile_trailer_paren_helper+0x20c>
            }
            compile_node(comp, args[i]);
    845e:	697a      	ldr	r2, [r7, #20]
    8460:	6a3b      	ldr	r3, [r7, #32]
    8462:	009b      	lsls	r3, r3, #2
    8464:	4413      	add	r3, r2
    8466:	681b      	ldr	r3, [r3, #0]
    8468:	4619      	mov	r1, r3
    846a:	68f8      	ldr	r0, [r7, #12]
    846c:	f000 fb92 	bl	8b94 <compile_node>
            n_positional++;
    8470:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    8472:	3301      	adds	r3, #1
    8474:	637b      	str	r3, [r7, #52]	; 0x34
    for (int i = 0; i < n_args; i++) {
    8476:	6a3b      	ldr	r3, [r7, #32]
    8478:	3301      	adds	r3, #1
    847a:	623b      	str	r3, [r7, #32]
    847c:	6a3a      	ldr	r2, [r7, #32]
    847e:	69fb      	ldr	r3, [r7, #28]
    8480:	429a      	cmp	r2, r3
    8482:	f6ff af4b 	blt.w	831c <compile_trailer_paren_helper+0x3c>
        }
    }

    // compile the star/double-star arguments if we had them
    // if we had one but not the other then we load "null" as a place holder
    if (star_flags != 0) {
    8486:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    8488:	2b00      	cmp	r3, #0
    848a:	d01d      	beq.n	84c8 <compile_trailer_paren_helper+0x1e8>
        if (star_args_node == NULL) {
    848c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    848e:	2b00      	cmp	r3, #0
    8490:	d105      	bne.n	849e <compile_trailer_paren_helper+0x1be>
            EMIT(load_null);
    8492:	68fb      	ldr	r3, [r7, #12]
    8494:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    8496:	4618      	mov	r0, r3
    8498:	f002 f87c 	bl	a594 <mp_emit_bc_load_null>
    849c:	e005      	b.n	84aa <compile_trailer_paren_helper+0x1ca>
        } else {
            compile_node(comp, star_args_node->nodes[0]);
    849e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    84a0:	689b      	ldr	r3, [r3, #8]
    84a2:	4619      	mov	r1, r3
    84a4:	68f8      	ldr	r0, [r7, #12]
    84a6:	f000 fb75 	bl	8b94 <compile_node>
        }
        if (dblstar_args_node == NULL) {
    84aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    84ac:	2b00      	cmp	r3, #0
    84ae:	d105      	bne.n	84bc <compile_trailer_paren_helper+0x1dc>
            EMIT(load_null);
    84b0:	68fb      	ldr	r3, [r7, #12]
    84b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    84b4:	4618      	mov	r0, r3
    84b6:	f002 f86d 	bl	a594 <mp_emit_bc_load_null>
    84ba:	e005      	b.n	84c8 <compile_trailer_paren_helper+0x1e8>
        } else {
            compile_node(comp, dblstar_args_node->nodes[0]);
    84bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    84be:	689b      	ldr	r3, [r3, #8]
    84c0:	4619      	mov	r1, r3
    84c2:	68f8      	ldr	r0, [r7, #12]
    84c4:	f000 fb66 	bl	8b94 <compile_node>
        }
    }

    // emit the function/method call
    if (is_method_call) {
    84c8:	79fb      	ldrb	r3, [r7, #7]
    84ca:	2b00      	cmp	r3, #0
    84cc:	d007      	beq.n	84de <compile_trailer_paren_helper+0x1fe>
        EMIT_ARG(call_method, n_positional, n_keyword, star_flags);
    84ce:	68fb      	ldr	r3, [r7, #12]
    84d0:	6a98      	ldr	r0, [r3, #40]	; 0x28
    84d2:	6b79      	ldr	r1, [r7, #52]	; 0x34
    84d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    84d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    84d8:	f002 fd64 	bl	afa4 <mp_emit_bc_call_method>
    84dc:	e006      	b.n	84ec <compile_trailer_paren_helper+0x20c>
    } else {
        EMIT_ARG(call_function, n_positional, n_keyword, star_flags);
    84de:	68fb      	ldr	r3, [r7, #12]
    84e0:	6a98      	ldr	r0, [r3, #40]	; 0x28
    84e2:	6b79      	ldr	r1, [r7, #52]	; 0x34
    84e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    84e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    84e8:	f002 fd46 	bl	af78 <mp_emit_bc_call_function>
    }
}
    84ec:	3738      	adds	r7, #56	; 0x38
    84ee:	46bd      	mov	sp, r7
    84f0:	bd80      	pop	{r7, pc}
    84f2:	bf00      	nop
    84f4:	000208e8 	.word	0x000208e8
    84f8:	00020900 	.word	0x00020900
    84fc:	00020918 	.word	0x00020918
    8500:	0002093c 	.word	0x0002093c
    8504:	00020958 	.word	0x00020958

00008508 <compile_comprehension>:

// pns needs to have 2 nodes, first is lhs of comprehension, second is PN_comp_for node
STATIC void compile_comprehension(compiler_t *comp, mp_parse_node_struct_t *pns, scope_kind_t kind) {
    8508:	b580      	push	{r7, lr}
    850a:	b088      	sub	sp, #32
    850c:	af00      	add	r7, sp, #0
    850e:	60f8      	str	r0, [r7, #12]
    8510:	60b9      	str	r1, [r7, #8]
    8512:	607a      	str	r2, [r7, #4]
    assert(MP_PARSE_NODE_STRUCT_NUM_NODES(pns) == 2);
    8514:	68bb      	ldr	r3, [r7, #8]
    8516:	685b      	ldr	r3, [r3, #4]
    8518:	0a1b      	lsrs	r3, r3, #8
    851a:	2b02      	cmp	r3, #2
    851c:	d006      	beq.n	852c <compile_comprehension+0x24>
    851e:	4b2a      	ldr	r3, [pc, #168]	; (85c8 <compile_comprehension+0xc0>)
    8520:	4a2a      	ldr	r2, [pc, #168]	; (85cc <compile_comprehension+0xc4>)
    8522:	f640 1125 	movw	r1, #2341	; 0x925
    8526:	482a      	ldr	r0, [pc, #168]	; (85d0 <compile_comprehension+0xc8>)
    8528:	f013 f8d2 	bl	1b6d0 <__assert_func>
    assert(MP_PARSE_NODE_IS_STRUCT_KIND(pns->nodes[1], PN_comp_for));
    852c:	68bb      	ldr	r3, [r7, #8]
    852e:	68db      	ldr	r3, [r3, #12]
    8530:	2b00      	cmp	r3, #0
    8532:	d00b      	beq.n	854c <compile_comprehension+0x44>
    8534:	68bb      	ldr	r3, [r7, #8]
    8536:	68db      	ldr	r3, [r3, #12]
    8538:	f003 0303 	and.w	r3, r3, #3
    853c:	2b00      	cmp	r3, #0
    853e:	d105      	bne.n	854c <compile_comprehension+0x44>
    8540:	68bb      	ldr	r3, [r7, #8]
    8542:	68db      	ldr	r3, [r3, #12]
    8544:	685b      	ldr	r3, [r3, #4]
    8546:	b2db      	uxtb	r3, r3
    8548:	2b9f      	cmp	r3, #159	; 0x9f
    854a:	d006      	beq.n	855a <compile_comprehension+0x52>
    854c:	4b21      	ldr	r3, [pc, #132]	; (85d4 <compile_comprehension+0xcc>)
    854e:	4a1f      	ldr	r2, [pc, #124]	; (85cc <compile_comprehension+0xc4>)
    8550:	f640 1126 	movw	r1, #2342	; 0x926
    8554:	481e      	ldr	r0, [pc, #120]	; (85d0 <compile_comprehension+0xc8>)
    8556:	f013 f8bb 	bl	1b6d0 <__assert_func>
    mp_parse_node_struct_t *pns_comp_for = (mp_parse_node_struct_t*)pns->nodes[1];
    855a:	68bb      	ldr	r3, [r7, #8]
    855c:	68db      	ldr	r3, [r3, #12]
    855e:	61fb      	str	r3, [r7, #28]

    if (comp->pass == MP_PASS_SCOPE) {
    8560:	68fb      	ldr	r3, [r7, #12]
    8562:	795b      	ldrb	r3, [r3, #5]
    8564:	2b01      	cmp	r3, #1
    8566:	d10b      	bne.n	8580 <compile_comprehension+0x78>
        // create a new scope for this comprehension
        scope_t *s = scope_new_and_link(comp, kind, (mp_parse_node_t)pns, comp->scope_cur->emit_options);
    8568:	68ba      	ldr	r2, [r7, #8]
    856a:	68fb      	ldr	r3, [r7, #12]
    856c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    856e:	7e5b      	ldrb	r3, [r3, #25]
    8570:	6879      	ldr	r1, [r7, #4]
    8572:	68f8      	ldr	r0, [r7, #12]
    8574:	f7fc fd16 	bl	4fa4 <scope_new_and_link>
    8578:	61b8      	str	r0, [r7, #24]
        // store the comprehension scope so the compiling function (this one) can use it at each pass
        pns_comp_for->nodes[3] = (mp_parse_node_t)s;
    857a:	69ba      	ldr	r2, [r7, #24]
    857c:	69fb      	ldr	r3, [r7, #28]
    857e:	615a      	str	r2, [r3, #20]
    }

    // get the scope for this comprehension
    scope_t *this_scope = (scope_t*)pns_comp_for->nodes[3];
    8580:	69fb      	ldr	r3, [r7, #28]
    8582:	695b      	ldr	r3, [r3, #20]
    8584:	617b      	str	r3, [r7, #20]

    // compile the comprehension
    close_over_variables_etc(comp, this_scope, 0, 0);
    8586:	2300      	movs	r3, #0
    8588:	2200      	movs	r2, #0
    858a:	6979      	ldr	r1, [r7, #20]
    858c:	68f8      	ldr	r0, [r7, #12]
    858e:	f7fd f9ed 	bl	596c <close_over_variables_etc>

    compile_node(comp, pns_comp_for->nodes[1]); // source of the iterator
    8592:	69fb      	ldr	r3, [r7, #28]
    8594:	68db      	ldr	r3, [r3, #12]
    8596:	4619      	mov	r1, r3
    8598:	68f8      	ldr	r0, [r7, #12]
    859a:	f000 fafb 	bl	8b94 <compile_node>
    if (kind == SCOPE_GEN_EXPR) {
    859e:	687b      	ldr	r3, [r7, #4]
    85a0:	2b06      	cmp	r3, #6
    85a2:	d105      	bne.n	85b0 <compile_comprehension+0xa8>
        EMIT_ARG(get_iter, false);
    85a4:	68fb      	ldr	r3, [r7, #12]
    85a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    85a8:	2100      	movs	r1, #0
    85aa:	4618      	mov	r0, r3
    85ac:	f002 faea 	bl	ab84 <mp_emit_bc_get_iter>
    }
    EMIT_ARG(call_function, 1, 0, 0);
    85b0:	68fb      	ldr	r3, [r7, #12]
    85b2:	6a98      	ldr	r0, [r3, #40]	; 0x28
    85b4:	2300      	movs	r3, #0
    85b6:	2200      	movs	r2, #0
    85b8:	2101      	movs	r1, #1
    85ba:	f002 fcdd 	bl	af78 <mp_emit_bc_call_function>
}
    85be:	bf00      	nop
    85c0:	3720      	adds	r7, #32
    85c2:	46bd      	mov	sp, r7
    85c4:	bd80      	pop	{r7, pc}
    85c6:	bf00      	nop
    85c8:	0002097c 	.word	0x0002097c
    85cc:	00020f8c 	.word	0x00020f8c
    85d0:	00020234 	.word	0x00020234
    85d4:	000209a8 	.word	0x000209a8

000085d8 <compile_atom_paren>:

STATIC void compile_atom_paren(compiler_t *comp, mp_parse_node_struct_t *pns) {
    85d8:	b580      	push	{r7, lr}
    85da:	b084      	sub	sp, #16
    85dc:	af00      	add	r7, sp, #0
    85de:	6078      	str	r0, [r7, #4]
    85e0:	6039      	str	r1, [r7, #0]
    if (MP_PARSE_NODE_IS_NULL(pns->nodes[0])) {
    85e2:	683b      	ldr	r3, [r7, #0]
    85e4:	689b      	ldr	r3, [r3, #8]
    85e6:	2b00      	cmp	r3, #0
    85e8:	d105      	bne.n	85f6 <compile_atom_paren+0x1e>
        // an empty tuple
        c_tuple(comp, MP_PARSE_NODE_NULL, NULL);
    85ea:	2200      	movs	r2, #0
    85ec:	2100      	movs	r1, #0
    85ee:	6878      	ldr	r0, [r7, #4]
    85f0:	f7fc fdce 	bl	5190 <c_tuple>
            // tuple with 2 items
            tuple_with_2_items:
            c_tuple(comp, MP_PARSE_NODE_NULL, pns);
        }
    }
}
    85f4:	e068      	b.n	86c8 <compile_atom_paren+0xf0>
        assert(MP_PARSE_NODE_IS_STRUCT_KIND(pns->nodes[0], PN_testlist_comp));
    85f6:	683b      	ldr	r3, [r7, #0]
    85f8:	689b      	ldr	r3, [r3, #8]
    85fa:	2b00      	cmp	r3, #0
    85fc:	d00b      	beq.n	8616 <compile_atom_paren+0x3e>
    85fe:	683b      	ldr	r3, [r7, #0]
    8600:	689b      	ldr	r3, [r3, #8]
    8602:	f003 0303 	and.w	r3, r3, #3
    8606:	2b00      	cmp	r3, #0
    8608:	d105      	bne.n	8616 <compile_atom_paren+0x3e>
    860a:	683b      	ldr	r3, [r7, #0]
    860c:	689b      	ldr	r3, [r3, #8]
    860e:	685b      	ldr	r3, [r3, #4]
    8610:	b2db      	uxtb	r3, r3
    8612:	2b8a      	cmp	r3, #138	; 0x8a
    8614:	d006      	beq.n	8624 <compile_atom_paren+0x4c>
    8616:	4b2e      	ldr	r3, [pc, #184]	; (86d0 <compile_atom_paren+0xf8>)
    8618:	4a2e      	ldr	r2, [pc, #184]	; (86d4 <compile_atom_paren+0xfc>)
    861a:	f640 1142 	movw	r1, #2370	; 0x942
    861e:	482e      	ldr	r0, [pc, #184]	; (86d8 <compile_atom_paren+0x100>)
    8620:	f013 f856 	bl	1b6d0 <__assert_func>
        pns = (mp_parse_node_struct_t*)pns->nodes[0];
    8624:	683b      	ldr	r3, [r7, #0]
    8626:	689b      	ldr	r3, [r3, #8]
    8628:	603b      	str	r3, [r7, #0]
        assert(!MP_PARSE_NODE_IS_NULL(pns->nodes[1]));
    862a:	683b      	ldr	r3, [r7, #0]
    862c:	68db      	ldr	r3, [r3, #12]
    862e:	2b00      	cmp	r3, #0
    8630:	d106      	bne.n	8640 <compile_atom_paren+0x68>
    8632:	4b2a      	ldr	r3, [pc, #168]	; (86dc <compile_atom_paren+0x104>)
    8634:	4a27      	ldr	r2, [pc, #156]	; (86d4 <compile_atom_paren+0xfc>)
    8636:	f640 1144 	movw	r1, #2372	; 0x944
    863a:	4827      	ldr	r0, [pc, #156]	; (86d8 <compile_atom_paren+0x100>)
    863c:	f013 f848 	bl	1b6d0 <__assert_func>
        if (MP_PARSE_NODE_IS_STRUCT(pns->nodes[1])) {
    8640:	683b      	ldr	r3, [r7, #0]
    8642:	68db      	ldr	r3, [r3, #12]
    8644:	2b00      	cmp	r3, #0
    8646:	d039      	beq.n	86bc <compile_atom_paren+0xe4>
    8648:	683b      	ldr	r3, [r7, #0]
    864a:	68db      	ldr	r3, [r3, #12]
    864c:	f003 0303 	and.w	r3, r3, #3
    8650:	2b00      	cmp	r3, #0
    8652:	d133      	bne.n	86bc <compile_atom_paren+0xe4>
            mp_parse_node_struct_t *pns2 = (mp_parse_node_struct_t*)pns->nodes[1];
    8654:	683b      	ldr	r3, [r7, #0]
    8656:	68db      	ldr	r3, [r3, #12]
    8658:	60fb      	str	r3, [r7, #12]
            if (MP_PARSE_NODE_STRUCT_KIND(pns2) == PN_testlist_comp_3b) {
    865a:	68fb      	ldr	r3, [r7, #12]
    865c:	685b      	ldr	r3, [r3, #4]
    865e:	b2db      	uxtb	r3, r3
    8660:	2b8d      	cmp	r3, #141	; 0x8d
    8662:	d112      	bne.n	868a <compile_atom_paren+0xb2>
                assert(MP_PARSE_NODE_IS_NULL(pns2->nodes[0]));
    8664:	68fb      	ldr	r3, [r7, #12]
    8666:	689b      	ldr	r3, [r3, #8]
    8668:	2b00      	cmp	r3, #0
    866a:	d006      	beq.n	867a <compile_atom_paren+0xa2>
    866c:	4b1c      	ldr	r3, [pc, #112]	; (86e0 <compile_atom_paren+0x108>)
    866e:	4a19      	ldr	r2, [pc, #100]	; (86d4 <compile_atom_paren+0xfc>)
    8670:	f640 1149 	movw	r1, #2377	; 0x949
    8674:	4818      	ldr	r0, [pc, #96]	; (86d8 <compile_atom_paren+0x100>)
    8676:	f013 f82b 	bl	1b6d0 <__assert_func>
                c_tuple(comp, pns->nodes[0], NULL);
    867a:	683b      	ldr	r3, [r7, #0]
    867c:	689b      	ldr	r3, [r3, #8]
    867e:	2200      	movs	r2, #0
    8680:	4619      	mov	r1, r3
    8682:	6878      	ldr	r0, [r7, #4]
    8684:	f7fc fd84 	bl	5190 <c_tuple>
        if (MP_PARSE_NODE_IS_STRUCT(pns->nodes[1])) {
    8688:	e01e      	b.n	86c8 <compile_atom_paren+0xf0>
            } else if (MP_PARSE_NODE_STRUCT_KIND(pns2) == PN_testlist_comp_3c) {
    868a:	68fb      	ldr	r3, [r7, #12]
    868c:	685b      	ldr	r3, [r3, #4]
    868e:	b2db      	uxtb	r3, r3
    8690:	2b8e      	cmp	r3, #142	; 0x8e
    8692:	d107      	bne.n	86a4 <compile_atom_paren+0xcc>
                c_tuple(comp, pns->nodes[0], pns2);
    8694:	683b      	ldr	r3, [r7, #0]
    8696:	689b      	ldr	r3, [r3, #8]
    8698:	68fa      	ldr	r2, [r7, #12]
    869a:	4619      	mov	r1, r3
    869c:	6878      	ldr	r0, [r7, #4]
    869e:	f7fc fd77 	bl	5190 <c_tuple>
        if (MP_PARSE_NODE_IS_STRUCT(pns->nodes[1])) {
    86a2:	e011      	b.n	86c8 <compile_atom_paren+0xf0>
            } else if (MP_PARSE_NODE_STRUCT_KIND(pns2) == PN_comp_for) {
    86a4:	68fb      	ldr	r3, [r7, #12]
    86a6:	685b      	ldr	r3, [r3, #4]
    86a8:	b2db      	uxtb	r3, r3
    86aa:	2b9f      	cmp	r3, #159	; 0x9f
    86ac:	d105      	bne.n	86ba <compile_atom_paren+0xe2>
                compile_comprehension(comp, pns, SCOPE_GEN_EXPR);
    86ae:	2206      	movs	r2, #6
    86b0:	6839      	ldr	r1, [r7, #0]
    86b2:	6878      	ldr	r0, [r7, #4]
    86b4:	f7ff ff28 	bl	8508 <compile_comprehension>
        if (MP_PARSE_NODE_IS_STRUCT(pns->nodes[1])) {
    86b8:	e006      	b.n	86c8 <compile_atom_paren+0xf0>
                goto tuple_with_2_items;
    86ba:	bf00      	nop
            c_tuple(comp, MP_PARSE_NODE_NULL, pns);
    86bc:	683a      	ldr	r2, [r7, #0]
    86be:	2100      	movs	r1, #0
    86c0:	6878      	ldr	r0, [r7, #4]
    86c2:	f7fc fd65 	bl	5190 <c_tuple>
}
    86c6:	e7ff      	b.n	86c8 <compile_atom_paren+0xf0>
    86c8:	bf00      	nop
    86ca:	3710      	adds	r7, #16
    86cc:	46bd      	mov	sp, r7
    86ce:	bd80      	pop	{r7, pc}
    86d0:	00020248 	.word	0x00020248
    86d4:	00020fa4 	.word	0x00020fa4
    86d8:	00020234 	.word	0x00020234
    86dc:	000209e4 	.word	0x000209e4
    86e0:	0002032c 	.word	0x0002032c

000086e4 <compile_atom_bracket>:

STATIC void compile_atom_bracket(compiler_t *comp, mp_parse_node_struct_t *pns) {
    86e4:	b580      	push	{r7, lr}
    86e6:	b084      	sub	sp, #16
    86e8:	af00      	add	r7, sp, #0
    86ea:	6078      	str	r0, [r7, #4]
    86ec:	6039      	str	r1, [r7, #0]
    if (MP_PARSE_NODE_IS_NULL(pns->nodes[0])) {
    86ee:	683b      	ldr	r3, [r7, #0]
    86f0:	689b      	ldr	r3, [r3, #8]
    86f2:	2b00      	cmp	r3, #0
    86f4:	d106      	bne.n	8704 <compile_atom_bracket+0x20>
        // empty list
        EMIT_ARG(build_list, 0);
    86f6:	687b      	ldr	r3, [r7, #4]
    86f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    86fa:	2100      	movs	r1, #0
    86fc:	4618      	mov	r0, r3
    86fe:	f002 fafd 	bl	acfc <mp_emit_bc_build_list>
    } else {
        // list with 1 item
        compile_node(comp, pns->nodes[0]);
        EMIT_ARG(build_list, 1);
    }
}
    8702:	e083      	b.n	880c <compile_atom_bracket+0x128>
    } else if (MP_PARSE_NODE_IS_STRUCT_KIND(pns->nodes[0], PN_testlist_comp)) {
    8704:	683b      	ldr	r3, [r7, #0]
    8706:	689b      	ldr	r3, [r3, #8]
    8708:	2b00      	cmp	r3, #0
    870a:	d072      	beq.n	87f2 <compile_atom_bracket+0x10e>
    870c:	683b      	ldr	r3, [r7, #0]
    870e:	689b      	ldr	r3, [r3, #8]
    8710:	f003 0303 	and.w	r3, r3, #3
    8714:	2b00      	cmp	r3, #0
    8716:	d16c      	bne.n	87f2 <compile_atom_bracket+0x10e>
    8718:	683b      	ldr	r3, [r7, #0]
    871a:	689b      	ldr	r3, [r3, #8]
    871c:	685b      	ldr	r3, [r3, #4]
    871e:	b2db      	uxtb	r3, r3
    8720:	2b8a      	cmp	r3, #138	; 0x8a
    8722:	d166      	bne.n	87f2 <compile_atom_bracket+0x10e>
        mp_parse_node_struct_t *pns2 = (mp_parse_node_struct_t*)pns->nodes[0];
    8724:	683b      	ldr	r3, [r7, #0]
    8726:	689b      	ldr	r3, [r3, #8]
    8728:	60fb      	str	r3, [r7, #12]
        if (MP_PARSE_NODE_IS_STRUCT(pns2->nodes[1])) {
    872a:	68fb      	ldr	r3, [r7, #12]
    872c:	68db      	ldr	r3, [r3, #12]
    872e:	2b00      	cmp	r3, #0
    8730:	d04b      	beq.n	87ca <compile_atom_bracket+0xe6>
    8732:	68fb      	ldr	r3, [r7, #12]
    8734:	68db      	ldr	r3, [r3, #12]
    8736:	f003 0303 	and.w	r3, r3, #3
    873a:	2b00      	cmp	r3, #0
    873c:	d145      	bne.n	87ca <compile_atom_bracket+0xe6>
            mp_parse_node_struct_t *pns3 = (mp_parse_node_struct_t*)pns2->nodes[1];
    873e:	68fb      	ldr	r3, [r7, #12]
    8740:	68db      	ldr	r3, [r3, #12]
    8742:	60bb      	str	r3, [r7, #8]
            if (MP_PARSE_NODE_STRUCT_KIND(pns3) == PN_testlist_comp_3b) {
    8744:	68bb      	ldr	r3, [r7, #8]
    8746:	685b      	ldr	r3, [r3, #4]
    8748:	b2db      	uxtb	r3, r3
    874a:	2b8d      	cmp	r3, #141	; 0x8d
    874c:	d117      	bne.n	877e <compile_atom_bracket+0x9a>
                assert(MP_PARSE_NODE_IS_NULL(pns3->nodes[0]));
    874e:	68bb      	ldr	r3, [r7, #8]
    8750:	689b      	ldr	r3, [r3, #8]
    8752:	2b00      	cmp	r3, #0
    8754:	d006      	beq.n	8764 <compile_atom_bracket+0x80>
    8756:	4b2f      	ldr	r3, [pc, #188]	; (8814 <compile_atom_bracket+0x130>)
    8758:	4a2f      	ldr	r2, [pc, #188]	; (8818 <compile_atom_bracket+0x134>)
    875a:	f640 1167 	movw	r1, #2407	; 0x967
    875e:	482f      	ldr	r0, [pc, #188]	; (881c <compile_atom_bracket+0x138>)
    8760:	f012 ffb6 	bl	1b6d0 <__assert_func>
                compile_node(comp, pns2->nodes[0]);
    8764:	68fb      	ldr	r3, [r7, #12]
    8766:	689b      	ldr	r3, [r3, #8]
    8768:	4619      	mov	r1, r3
    876a:	6878      	ldr	r0, [r7, #4]
    876c:	f000 fa12 	bl	8b94 <compile_node>
                EMIT_ARG(build_list, 1);
    8770:	687b      	ldr	r3, [r7, #4]
    8772:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    8774:	2101      	movs	r1, #1
    8776:	4618      	mov	r0, r3
    8778:	f002 fac0 	bl	acfc <mp_emit_bc_build_list>
        if (MP_PARSE_NODE_IS_STRUCT(pns2->nodes[1])) {
    877c:	e038      	b.n	87f0 <compile_atom_bracket+0x10c>
            } else if (MP_PARSE_NODE_STRUCT_KIND(pns3) == PN_testlist_comp_3c) {
    877e:	68bb      	ldr	r3, [r7, #8]
    8780:	685b      	ldr	r3, [r3, #4]
    8782:	b2db      	uxtb	r3, r3
    8784:	2b8e      	cmp	r3, #142	; 0x8e
    8786:	d114      	bne.n	87b2 <compile_atom_bracket+0xce>
                compile_node(comp, pns2->nodes[0]);
    8788:	68fb      	ldr	r3, [r7, #12]
    878a:	689b      	ldr	r3, [r3, #8]
    878c:	4619      	mov	r1, r3
    878e:	6878      	ldr	r0, [r7, #4]
    8790:	f000 fa00 	bl	8b94 <compile_node>
                compile_generic_all_nodes(comp, pns3);
    8794:	68b9      	ldr	r1, [r7, #8]
    8796:	6878      	ldr	r0, [r7, #4]
    8798:	f7fc fc72 	bl	5080 <compile_generic_all_nodes>
                EMIT_ARG(build_list, 1 + MP_PARSE_NODE_STRUCT_NUM_NODES(pns3));
    879c:	687b      	ldr	r3, [r7, #4]
    879e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    87a0:	68bb      	ldr	r3, [r7, #8]
    87a2:	685b      	ldr	r3, [r3, #4]
    87a4:	0a1b      	lsrs	r3, r3, #8
    87a6:	3301      	adds	r3, #1
    87a8:	4619      	mov	r1, r3
    87aa:	4610      	mov	r0, r2
    87ac:	f002 faa6 	bl	acfc <mp_emit_bc_build_list>
        if (MP_PARSE_NODE_IS_STRUCT(pns2->nodes[1])) {
    87b0:	e01e      	b.n	87f0 <compile_atom_bracket+0x10c>
            } else if (MP_PARSE_NODE_STRUCT_KIND(pns3) == PN_comp_for) {
    87b2:	68bb      	ldr	r3, [r7, #8]
    87b4:	685b      	ldr	r3, [r3, #4]
    87b6:	b2db      	uxtb	r3, r3
    87b8:	2b9f      	cmp	r3, #159	; 0x9f
    87ba:	d105      	bne.n	87c8 <compile_atom_bracket+0xe4>
                compile_comprehension(comp, pns2, SCOPE_LIST_COMP);
    87bc:	2203      	movs	r2, #3
    87be:	68f9      	ldr	r1, [r7, #12]
    87c0:	6878      	ldr	r0, [r7, #4]
    87c2:	f7ff fea1 	bl	8508 <compile_comprehension>
        if (MP_PARSE_NODE_IS_STRUCT(pns2->nodes[1])) {
    87c6:	e013      	b.n	87f0 <compile_atom_bracket+0x10c>
                goto list_with_2_items;
    87c8:	bf00      	nop
            compile_node(comp, pns2->nodes[0]);
    87ca:	68fb      	ldr	r3, [r7, #12]
    87cc:	689b      	ldr	r3, [r3, #8]
    87ce:	4619      	mov	r1, r3
    87d0:	6878      	ldr	r0, [r7, #4]
    87d2:	f000 f9df 	bl	8b94 <compile_node>
            compile_node(comp, pns2->nodes[1]);
    87d6:	68fb      	ldr	r3, [r7, #12]
    87d8:	68db      	ldr	r3, [r3, #12]
    87da:	4619      	mov	r1, r3
    87dc:	6878      	ldr	r0, [r7, #4]
    87de:	f000 f9d9 	bl	8b94 <compile_node>
            EMIT_ARG(build_list, 2);
    87e2:	687b      	ldr	r3, [r7, #4]
    87e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    87e6:	2102      	movs	r1, #2
    87e8:	4618      	mov	r0, r3
    87ea:	f002 fa87 	bl	acfc <mp_emit_bc_build_list>
    } else if (MP_PARSE_NODE_IS_STRUCT_KIND(pns->nodes[0], PN_testlist_comp)) {
    87ee:	e00d      	b.n	880c <compile_atom_bracket+0x128>
    87f0:	e00c      	b.n	880c <compile_atom_bracket+0x128>
        compile_node(comp, pns->nodes[0]);
    87f2:	683b      	ldr	r3, [r7, #0]
    87f4:	689b      	ldr	r3, [r3, #8]
    87f6:	4619      	mov	r1, r3
    87f8:	6878      	ldr	r0, [r7, #4]
    87fa:	f000 f9cb 	bl	8b94 <compile_node>
        EMIT_ARG(build_list, 1);
    87fe:	687b      	ldr	r3, [r7, #4]
    8800:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    8802:	2101      	movs	r1, #1
    8804:	4618      	mov	r0, r3
    8806:	f002 fa79 	bl	acfc <mp_emit_bc_build_list>
}
    880a:	e7ff      	b.n	880c <compile_atom_bracket+0x128>
    880c:	bf00      	nop
    880e:	3710      	adds	r7, #16
    8810:	46bd      	mov	sp, r7
    8812:	bd80      	pop	{r7, pc}
    8814:	00020a0c 	.word	0x00020a0c
    8818:	00020fb8 	.word	0x00020fb8
    881c:	00020234 	.word	0x00020234

00008820 <compile_atom_brace>:

STATIC void compile_atom_brace(compiler_t *comp, mp_parse_node_struct_t *pns) {
    8820:	b580      	push	{r7, lr}
    8822:	b08a      	sub	sp, #40	; 0x28
    8824:	af00      	add	r7, sp, #0
    8826:	6078      	str	r0, [r7, #4]
    8828:	6039      	str	r1, [r7, #0]
    mp_parse_node_t pn = pns->nodes[0];
    882a:	683b      	ldr	r3, [r7, #0]
    882c:	689b      	ldr	r3, [r3, #8]
    882e:	623b      	str	r3, [r7, #32]
    if (MP_PARSE_NODE_IS_NULL(pn)) {
    8830:	6a3b      	ldr	r3, [r7, #32]
    8832:	2b00      	cmp	r3, #0
    8834:	d106      	bne.n	8844 <compile_atom_brace+0x24>
        // empty dict
        EMIT_ARG(build_map, 0);
    8836:	687b      	ldr	r3, [r7, #4]
    8838:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    883a:	2100      	movs	r1, #0
    883c:	4618      	mov	r0, r3
    883e:	f002 fa73 	bl	ad28 <mp_emit_bc_build_map>
    8842:	e0c2      	b.n	89ca <compile_atom_brace+0x1aa>
    } else if (MP_PARSE_NODE_IS_STRUCT(pn)) {
    8844:	6a3b      	ldr	r3, [r7, #32]
    8846:	2b00      	cmp	r3, #0
    8848:	f000 80b8 	beq.w	89bc <compile_atom_brace+0x19c>
    884c:	6a3b      	ldr	r3, [r7, #32]
    884e:	f003 0303 	and.w	r3, r3, #3
    8852:	2b00      	cmp	r3, #0
    8854:	f040 80b2 	bne.w	89bc <compile_atom_brace+0x19c>
        pns = (mp_parse_node_struct_t*)pn;
    8858:	6a3b      	ldr	r3, [r7, #32]
    885a:	603b      	str	r3, [r7, #0]
        if (MP_PARSE_NODE_STRUCT_KIND(pns) == PN_dictorsetmaker_item) {
    885c:	683b      	ldr	r3, [r7, #0]
    885e:	685b      	ldr	r3, [r3, #4]
    8860:	b2db      	uxtb	r3, r3
    8862:	2b32      	cmp	r3, #50	; 0x32
    8864:	d10f      	bne.n	8886 <compile_atom_brace+0x66>
            // dict with one element
            EMIT_ARG(build_map, 1);
    8866:	687b      	ldr	r3, [r7, #4]
    8868:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    886a:	2101      	movs	r1, #1
    886c:	4618      	mov	r0, r3
    886e:	f002 fa5b 	bl	ad28 <mp_emit_bc_build_map>
            compile_node(comp, pn);
    8872:	6a39      	ldr	r1, [r7, #32]
    8874:	6878      	ldr	r0, [r7, #4]
    8876:	f000 f98d 	bl	8b94 <compile_node>
            EMIT(store_map);
    887a:	687b      	ldr	r3, [r7, #4]
    887c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    887e:	4618      	mov	r0, r3
    8880:	f002 fa64 	bl	ad4c <mp_emit_bc_store_map>
        if (MP_PARSE_NODE_STRUCT_KIND(pns) == PN_dictorsetmaker_item) {
    8884:	e0a1      	b.n	89ca <compile_atom_brace+0x1aa>
        } else if (MP_PARSE_NODE_STRUCT_KIND(pns) == PN_dictorsetmaker) {
    8886:	683b      	ldr	r3, [r7, #0]
    8888:	685b      	ldr	r3, [r3, #4]
    888a:	b2db      	uxtb	r3, r3
    888c:	2b92      	cmp	r3, #146	; 0x92
    888e:	f040 8094 	bne.w	89ba <compile_atom_brace+0x19a>
            assert(MP_PARSE_NODE_IS_STRUCT(pns->nodes[1])); // should succeed
    8892:	683b      	ldr	r3, [r7, #0]
    8894:	68db      	ldr	r3, [r3, #12]
    8896:	2b00      	cmp	r3, #0
    8898:	d005      	beq.n	88a6 <compile_atom_brace+0x86>
    889a:	683b      	ldr	r3, [r7, #0]
    889c:	68db      	ldr	r3, [r3, #12]
    889e:	f003 0303 	and.w	r3, r3, #3
    88a2:	2b00      	cmp	r3, #0
    88a4:	d006      	beq.n	88b4 <compile_atom_brace+0x94>
    88a6:	4b4a      	ldr	r3, [pc, #296]	; (89d0 <compile_atom_brace+0x1b0>)
    88a8:	4a4a      	ldr	r2, [pc, #296]	; (89d4 <compile_atom_brace+0x1b4>)
    88aa:	f640 1191 	movw	r1, #2449	; 0x991
    88ae:	484a      	ldr	r0, [pc, #296]	; (89d8 <compile_atom_brace+0x1b8>)
    88b0:	f012 ff0e 	bl	1b6d0 <__assert_func>
            mp_parse_node_struct_t *pns1 = (mp_parse_node_struct_t*)pns->nodes[1];
    88b4:	683b      	ldr	r3, [r7, #0]
    88b6:	68db      	ldr	r3, [r3, #12]
    88b8:	61fb      	str	r3, [r7, #28]
            if (MP_PARSE_NODE_STRUCT_KIND(pns1) == PN_dictorsetmaker_list) {
    88ba:	69fb      	ldr	r3, [r7, #28]
    88bc:	685b      	ldr	r3, [r3, #4]
    88be:	b2db      	uxtb	r3, r3
    88c0:	2b94      	cmp	r3, #148	; 0x94
    88c2:	d168      	bne.n	8996 <compile_atom_brace+0x176>
                // dict/set with multiple elements

                // get tail elements (2nd, 3rd, ...)
                mp_parse_node_t *nodes;
                int n = mp_parse_node_extract_list(&pns1->nodes[0], PN_dictorsetmaker_list2, &nodes);
    88c4:	69fb      	ldr	r3, [r7, #28]
    88c6:	3308      	adds	r3, #8
    88c8:	f107 0208 	add.w	r2, r7, #8
    88cc:	2195      	movs	r1, #149	; 0x95
    88ce:	4618      	mov	r0, r3
    88d0:	f7fb fa08 	bl	3ce4 <mp_parse_node_extract_list>
    88d4:	61b8      	str	r0, [r7, #24]

                // first element sets whether it's a dict or set
                bool is_dict;
                if (!MICROPY_PY_BUILTINS_SET || MP_PARSE_NODE_IS_STRUCT_KIND(pns->nodes[0], PN_dictorsetmaker_item)) {
                    // a dictionary
                    EMIT_ARG(build_map, 1 + n);
    88d6:	687b      	ldr	r3, [r7, #4]
    88d8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    88da:	69bb      	ldr	r3, [r7, #24]
    88dc:	3301      	adds	r3, #1
    88de:	4619      	mov	r1, r3
    88e0:	4610      	mov	r0, r2
    88e2:	f002 fa21 	bl	ad28 <mp_emit_bc_build_map>
                    compile_node(comp, pns->nodes[0]);
    88e6:	683b      	ldr	r3, [r7, #0]
    88e8:	689b      	ldr	r3, [r3, #8]
    88ea:	4619      	mov	r1, r3
    88ec:	6878      	ldr	r0, [r7, #4]
    88ee:	f000 f951 	bl	8b94 <compile_node>
                    EMIT(store_map);
    88f2:	687b      	ldr	r3, [r7, #4]
    88f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    88f6:	4618      	mov	r0, r3
    88f8:	f002 fa28 	bl	ad4c <mp_emit_bc_store_map>
                    is_dict = true;
    88fc:	2301      	movs	r3, #1
    88fe:	75fb      	strb	r3, [r7, #23]
                    compile_node(comp, pns->nodes[0]); // 1st value of set
                    is_dict = false;
                }

                // process rest of elements
                for (int i = 0; i < n; i++) {
    8900:	2300      	movs	r3, #0
    8902:	627b      	str	r3, [r7, #36]	; 0x24
    8904:	e042      	b.n	898c <compile_atom_brace+0x16c>
                    mp_parse_node_t pn_i = nodes[i];
    8906:	68ba      	ldr	r2, [r7, #8]
    8908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    890a:	009b      	lsls	r3, r3, #2
    890c:	4413      	add	r3, r2
    890e:	681b      	ldr	r3, [r3, #0]
    8910:	613b      	str	r3, [r7, #16]
                    bool is_key_value = MP_PARSE_NODE_IS_STRUCT_KIND(pn_i, PN_dictorsetmaker_item);
    8912:	693b      	ldr	r3, [r7, #16]
    8914:	2b00      	cmp	r3, #0
    8916:	d00b      	beq.n	8930 <compile_atom_brace+0x110>
    8918:	693b      	ldr	r3, [r7, #16]
    891a:	f003 0303 	and.w	r3, r3, #3
    891e:	2b00      	cmp	r3, #0
    8920:	d106      	bne.n	8930 <compile_atom_brace+0x110>
    8922:	693b      	ldr	r3, [r7, #16]
    8924:	685b      	ldr	r3, [r3, #4]
    8926:	b2db      	uxtb	r3, r3
    8928:	2b32      	cmp	r3, #50	; 0x32
    892a:	d101      	bne.n	8930 <compile_atom_brace+0x110>
    892c:	2301      	movs	r3, #1
    892e:	e000      	b.n	8932 <compile_atom_brace+0x112>
    8930:	2300      	movs	r3, #0
    8932:	73fb      	strb	r3, [r7, #15]
    8934:	7bfb      	ldrb	r3, [r7, #15]
    8936:	f003 0301 	and.w	r3, r3, #1
    893a:	73fb      	strb	r3, [r7, #15]
                    compile_node(comp, pn_i);
    893c:	6939      	ldr	r1, [r7, #16]
    893e:	6878      	ldr	r0, [r7, #4]
    8940:	f000 f928 	bl	8b94 <compile_node>
                    if (is_dict) {
    8944:	7dfb      	ldrb	r3, [r7, #23]
    8946:	2b00      	cmp	r3, #0
    8948:	d012      	beq.n	8970 <compile_atom_brace+0x150>
                        if (!is_key_value) {
    894a:	7bfb      	ldrb	r3, [r7, #15]
    894c:	f083 0301 	eor.w	r3, r3, #1
    8950:	b2db      	uxtb	r3, r3
    8952:	2b00      	cmp	r3, #0
    8954:	d006      	beq.n	8964 <compile_atom_brace+0x144>
                            if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
                                compile_syntax_error(comp, (mp_parse_node_t)pns, "invalid syntax");
    8956:	683b      	ldr	r3, [r7, #0]
    8958:	4a20      	ldr	r2, [pc, #128]	; (89dc <compile_atom_brace+0x1bc>)
    895a:	4619      	mov	r1, r3
    895c:	6878      	ldr	r0, [r7, #4]
    895e:	f7fc fabb 	bl	4ed8 <compile_syntax_error>
                            } else {
                                compile_syntax_error(comp, (mp_parse_node_t)pns, "expecting key:value for dict");
                            }
                            return;
    8962:	e032      	b.n	89ca <compile_atom_brace+0x1aa>
                        }
                        EMIT(store_map);
    8964:	687b      	ldr	r3, [r7, #4]
    8966:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    8968:	4618      	mov	r0, r3
    896a:	f002 f9ef 	bl	ad4c <mp_emit_bc_store_map>
    896e:	e00a      	b.n	8986 <compile_atom_brace+0x166>
                    } else {
                        if (is_key_value) {
    8970:	7bfb      	ldrb	r3, [r7, #15]
    8972:	2b00      	cmp	r3, #0
    8974:	d007      	beq.n	8986 <compile_atom_brace+0x166>
                            if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
                                compile_syntax_error(comp, (mp_parse_node_t)pns, "invalid syntax");
    8976:	683b      	ldr	r3, [r7, #0]
    8978:	4a18      	ldr	r2, [pc, #96]	; (89dc <compile_atom_brace+0x1bc>)
    897a:	4619      	mov	r1, r3
    897c:	6878      	ldr	r0, [r7, #4]
    897e:	f7fc faab 	bl	4ed8 <compile_syntax_error>
                            } else {
                                compile_syntax_error(comp, (mp_parse_node_t)pns, "expecting just a value for set");
                            }
                            return;
    8982:	bf00      	nop
    8984:	e021      	b.n	89ca <compile_atom_brace+0x1aa>
                for (int i = 0; i < n; i++) {
    8986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    8988:	3301      	adds	r3, #1
    898a:	627b      	str	r3, [r7, #36]	; 0x24
    898c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    898e:	69bb      	ldr	r3, [r7, #24]
    8990:	429a      	cmp	r2, r3
    8992:	dbb8      	blt.n	8906 <compile_atom_brace+0xe6>
        if (MP_PARSE_NODE_STRUCT_KIND(pns) == PN_dictorsetmaker_item) {
    8994:	e019      	b.n	89ca <compile_atom_brace+0x1aa>
                if (!is_dict) {
                    EMIT_ARG(build_set, 1 + n);
                }
                #endif
            } else {
                assert(MP_PARSE_NODE_STRUCT_KIND(pns1) == PN_comp_for); // should be
    8996:	69fb      	ldr	r3, [r7, #28]
    8998:	685b      	ldr	r3, [r3, #4]
    899a:	b2db      	uxtb	r3, r3
    899c:	2b9f      	cmp	r3, #159	; 0x9f
    899e:	d006      	beq.n	89ae <compile_atom_brace+0x18e>
    89a0:	4b0f      	ldr	r3, [pc, #60]	; (89e0 <compile_atom_brace+0x1c0>)
    89a2:	4a0c      	ldr	r2, [pc, #48]	; (89d4 <compile_atom_brace+0x1b4>)
    89a4:	f640 11ca 	movw	r1, #2506	; 0x9ca
    89a8:	480b      	ldr	r0, [pc, #44]	; (89d8 <compile_atom_brace+0x1b8>)
    89aa:	f012 fe91 	bl	1b6d0 <__assert_func>
                // dict/set comprehension
                if (!MICROPY_PY_BUILTINS_SET || MP_PARSE_NODE_IS_STRUCT_KIND(pns->nodes[0], PN_dictorsetmaker_item)) {
                    // a dictionary comprehension
                    compile_comprehension(comp, pns, SCOPE_DICT_COMP);
    89ae:	2204      	movs	r2, #4
    89b0:	6839      	ldr	r1, [r7, #0]
    89b2:	6878      	ldr	r0, [r7, #4]
    89b4:	f7ff fda8 	bl	8508 <compile_comprehension>
        if (MP_PARSE_NODE_STRUCT_KIND(pns) == PN_dictorsetmaker_item) {
    89b8:	e007      	b.n	89ca <compile_atom_brace+0x1aa>
                    compile_comprehension(comp, pns, SCOPE_SET_COMP);
                }
            }
        } else {
            // set with one element
            goto set_with_one_element;
    89ba:	bf00      	nop
        set_with_one_element:
        #if MICROPY_PY_BUILTINS_SET
        compile_node(comp, pn);
        EMIT_ARG(build_set, 1);
        #else
        assert(0);
    89bc:	4b09      	ldr	r3, [pc, #36]	; (89e4 <compile_atom_brace+0x1c4>)
    89be:	4a05      	ldr	r2, [pc, #20]	; (89d4 <compile_atom_brace+0x1b4>)
    89c0:	f640 11df 	movw	r1, #2527	; 0x9df
    89c4:	4804      	ldr	r0, [pc, #16]	; (89d8 <compile_atom_brace+0x1b8>)
    89c6:	f012 fe83 	bl	1b6d0 <__assert_func>
        #endif
    }
}
    89ca:	3728      	adds	r7, #40	; 0x28
    89cc:	46bd      	mov	sp, r7
    89ce:	bd80      	pop	{r7, pc}
    89d0:	000207a0 	.word	0x000207a0
    89d4:	00020fd0 	.word	0x00020fd0
    89d8:	00020234 	.word	0x00020234
    89dc:	00020a34 	.word	0x00020a34
    89e0:	00020a44 	.word	0x00020a44
    89e4:	00020a74 	.word	0x00020a74

000089e8 <compile_trailer_paren>:

STATIC void compile_trailer_paren(compiler_t *comp, mp_parse_node_struct_t *pns) {
    89e8:	b580      	push	{r7, lr}
    89ea:	b082      	sub	sp, #8
    89ec:	af00      	add	r7, sp, #0
    89ee:	6078      	str	r0, [r7, #4]
    89f0:	6039      	str	r1, [r7, #0]
    compile_trailer_paren_helper(comp, pns->nodes[0], false, 0);
    89f2:	683b      	ldr	r3, [r7, #0]
    89f4:	6899      	ldr	r1, [r3, #8]
    89f6:	2300      	movs	r3, #0
    89f8:	2200      	movs	r2, #0
    89fa:	6878      	ldr	r0, [r7, #4]
    89fc:	f7ff fc70 	bl	82e0 <compile_trailer_paren_helper>
}
    8a00:	bf00      	nop
    8a02:	3708      	adds	r7, #8
    8a04:	46bd      	mov	sp, r7
    8a06:	bd80      	pop	{r7, pc}

00008a08 <compile_trailer_bracket>:

STATIC void compile_trailer_bracket(compiler_t *comp, mp_parse_node_struct_t *pns) {
    8a08:	b580      	push	{r7, lr}
    8a0a:	b082      	sub	sp, #8
    8a0c:	af00      	add	r7, sp, #0
    8a0e:	6078      	str	r0, [r7, #4]
    8a10:	6039      	str	r1, [r7, #0]
    // object who's index we want is on top of stack
    compile_node(comp, pns->nodes[0]); // the index
    8a12:	683b      	ldr	r3, [r7, #0]
    8a14:	689b      	ldr	r3, [r3, #8]
    8a16:	4619      	mov	r1, r3
    8a18:	6878      	ldr	r0, [r7, #4]
    8a1a:	f000 f8bb 	bl	8b94 <compile_node>
    EMIT(load_subscr);
    8a1e:	687b      	ldr	r3, [r7, #4]
    8a20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    8a22:	4618      	mov	r0, r3
    8a24:	f001 fe5e 	bl	a6e4 <mp_emit_bc_load_subscr>
}
    8a28:	bf00      	nop
    8a2a:	3708      	adds	r7, #8
    8a2c:	46bd      	mov	sp, r7
    8a2e:	bd80      	pop	{r7, pc}

00008a30 <compile_trailer_period>:

STATIC void compile_trailer_period(compiler_t *comp, mp_parse_node_struct_t *pns) {
    8a30:	b580      	push	{r7, lr}
    8a32:	b082      	sub	sp, #8
    8a34:	af00      	add	r7, sp, #0
    8a36:	6078      	str	r0, [r7, #4]
    8a38:	6039      	str	r1, [r7, #0]
    // object who's attribute we want is on top of stack
    EMIT_ARG(load_attr, MP_PARSE_NODE_LEAF_ARG(pns->nodes[0])); // attribute to get
    8a3a:	687b      	ldr	r3, [r7, #4]
    8a3c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    8a3e:	683b      	ldr	r3, [r7, #0]
    8a40:	689b      	ldr	r3, [r3, #8]
    8a42:	091b      	lsrs	r3, r3, #4
    8a44:	4619      	mov	r1, r3
    8a46:	4610      	mov	r0, r2
    8a48:	f001 fe0c 	bl	a664 <mp_emit_bc_load_attr>
}
    8a4c:	bf00      	nop
    8a4e:	3708      	adds	r7, #8
    8a50:	46bd      	mov	sp, r7
    8a52:	bd80      	pop	{r7, pc}

00008a54 <compile_dictorsetmaker_item>:
    EMIT_ARG(load_const_tok, MP_TOKEN_KW_NONE);
    compile_subscript_3_helper(comp, pns);
}
#endif // MICROPY_PY_BUILTINS_SLICE

STATIC void compile_dictorsetmaker_item(compiler_t *comp, mp_parse_node_struct_t *pns) {
    8a54:	b580      	push	{r7, lr}
    8a56:	b082      	sub	sp, #8
    8a58:	af00      	add	r7, sp, #0
    8a5a:	6078      	str	r0, [r7, #4]
    8a5c:	6039      	str	r1, [r7, #0]
    // if this is called then we are compiling a dict key:value pair
    compile_node(comp, pns->nodes[1]); // value
    8a5e:	683b      	ldr	r3, [r7, #0]
    8a60:	68db      	ldr	r3, [r3, #12]
    8a62:	4619      	mov	r1, r3
    8a64:	6878      	ldr	r0, [r7, #4]
    8a66:	f000 f895 	bl	8b94 <compile_node>
    compile_node(comp, pns->nodes[0]); // key
    8a6a:	683b      	ldr	r3, [r7, #0]
    8a6c:	689b      	ldr	r3, [r3, #8]
    8a6e:	4619      	mov	r1, r3
    8a70:	6878      	ldr	r0, [r7, #4]
    8a72:	f000 f88f 	bl	8b94 <compile_node>
}
    8a76:	bf00      	nop
    8a78:	3708      	adds	r7, #8
    8a7a:	46bd      	mov	sp, r7
    8a7c:	bd80      	pop	{r7, pc}
    8a7e:	bf00      	nop

00008a80 <compile_classdef>:

STATIC void compile_classdef(compiler_t *comp, mp_parse_node_struct_t *pns) {
    8a80:	b580      	push	{r7, lr}
    8a82:	b084      	sub	sp, #16
    8a84:	af00      	add	r7, sp, #0
    8a86:	6078      	str	r0, [r7, #4]
    8a88:	6039      	str	r1, [r7, #0]
    qstr cname = compile_classdef_helper(comp, pns, comp->scope_cur->emit_options);
    8a8a:	687b      	ldr	r3, [r7, #4]
    8a8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    8a8e:	7e5b      	ldrb	r3, [r3, #25]
    8a90:	461a      	mov	r2, r3
    8a92:	6839      	ldr	r1, [r7, #0]
    8a94:	6878      	ldr	r0, [r7, #4]
    8a96:	f7fd f931 	bl	5cfc <compile_classdef_helper>
    8a9a:	60f8      	str	r0, [r7, #12]
    // store class object into class name
    compile_store_id(comp, cname);
    8a9c:	68f9      	ldr	r1, [r7, #12]
    8a9e:	6878      	ldr	r0, [r7, #4]
    8aa0:	f7fc fb3a 	bl	5118 <compile_store_id>
}
    8aa4:	bf00      	nop
    8aa6:	3710      	adds	r7, #16
    8aa8:	46bd      	mov	sp, r7
    8aaa:	bd80      	pop	{r7, pc}

00008aac <compile_yield_expr>:

STATIC void compile_yield_expr(compiler_t *comp, mp_parse_node_struct_t *pns) {
    8aac:	b580      	push	{r7, lr}
    8aae:	b082      	sub	sp, #8
    8ab0:	af00      	add	r7, sp, #0
    8ab2:	6078      	str	r0, [r7, #4]
    8ab4:	6039      	str	r1, [r7, #0]
    if (comp->scope_cur->kind != SCOPE_FUNCTION && comp->scope_cur->kind != SCOPE_LAMBDA) {
    8ab6:	687b      	ldr	r3, [r7, #4]
    8ab8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    8aba:	681b      	ldr	r3, [r3, #0]
    8abc:	2b07      	cmp	r3, #7
    8abe:	d00b      	beq.n	8ad8 <compile_yield_expr+0x2c>
    8ac0:	687b      	ldr	r3, [r7, #4]
    8ac2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    8ac4:	681b      	ldr	r3, [r3, #0]
    8ac6:	2b02      	cmp	r3, #2
    8ac8:	d006      	beq.n	8ad8 <compile_yield_expr+0x2c>
        compile_syntax_error(comp, (mp_parse_node_t)pns, "'yield' outside function");
    8aca:	683b      	ldr	r3, [r7, #0]
    8acc:	4a20      	ldr	r2, [pc, #128]	; (8b50 <compile_yield_expr+0xa4>)
    8ace:	4619      	mov	r1, r3
    8ad0:	6878      	ldr	r0, [r7, #4]
    8ad2:	f7fc fa01 	bl	4ed8 <compile_syntax_error>
        return;
    8ad6:	e037      	b.n	8b48 <compile_yield_expr+0x9c>
    }
    if (MP_PARSE_NODE_IS_NULL(pns->nodes[0])) {
    8ad8:	683b      	ldr	r3, [r7, #0]
    8ada:	689b      	ldr	r3, [r3, #8]
    8adc:	2b00      	cmp	r3, #0
    8ade:	d10b      	bne.n	8af8 <compile_yield_expr+0x4c>
        EMIT_ARG(load_const_tok, MP_TOKEN_KW_NONE);
    8ae0:	687b      	ldr	r3, [r7, #4]
    8ae2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    8ae4:	210e      	movs	r1, #14
    8ae6:	4618      	mov	r0, r3
    8ae8:	f001 fcd2 	bl	a490 <mp_emit_bc_load_const_tok>
        EMIT(yield_value);
    8aec:	687b      	ldr	r3, [r7, #4]
    8aee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    8af0:	4618      	mov	r0, r3
    8af2:	f002 faa7 	bl	b044 <mp_emit_bc_yield_value>
    8af6:	e027      	b.n	8b48 <compile_yield_expr+0x9c>
    } else if (MP_PARSE_NODE_IS_STRUCT_KIND(pns->nodes[0], PN_yield_arg_from)) {
    8af8:	683b      	ldr	r3, [r7, #0]
    8afa:	689b      	ldr	r3, [r3, #8]
    8afc:	2b00      	cmp	r3, #0
    8afe:	d018      	beq.n	8b32 <compile_yield_expr+0x86>
    8b00:	683b      	ldr	r3, [r7, #0]
    8b02:	689b      	ldr	r3, [r3, #8]
    8b04:	f003 0303 	and.w	r3, r3, #3
    8b08:	2b00      	cmp	r3, #0
    8b0a:	d112      	bne.n	8b32 <compile_yield_expr+0x86>
    8b0c:	683b      	ldr	r3, [r7, #0]
    8b0e:	689b      	ldr	r3, [r3, #8]
    8b10:	685b      	ldr	r3, [r3, #4]
    8b12:	b2db      	uxtb	r3, r3
    8b14:	2ba2      	cmp	r3, #162	; 0xa2
    8b16:	d10c      	bne.n	8b32 <compile_yield_expr+0x86>
        pns = (mp_parse_node_struct_t*)pns->nodes[0];
    8b18:	683b      	ldr	r3, [r7, #0]
    8b1a:	689b      	ldr	r3, [r3, #8]
    8b1c:	603b      	str	r3, [r7, #0]
        compile_node(comp, pns->nodes[0]);
    8b1e:	683b      	ldr	r3, [r7, #0]
    8b20:	689b      	ldr	r3, [r3, #8]
    8b22:	4619      	mov	r1, r3
    8b24:	6878      	ldr	r0, [r7, #4]
    8b26:	f000 f835 	bl	8b94 <compile_node>
        compile_yield_from(comp);
    8b2a:	6878      	ldr	r0, [r7, #4]
    8b2c:	f7fe fe62 	bl	77f4 <compile_yield_from>
    8b30:	e00a      	b.n	8b48 <compile_yield_expr+0x9c>
    } else {
        compile_node(comp, pns->nodes[0]);
    8b32:	683b      	ldr	r3, [r7, #0]
    8b34:	689b      	ldr	r3, [r3, #8]
    8b36:	4619      	mov	r1, r3
    8b38:	6878      	ldr	r0, [r7, #4]
    8b3a:	f000 f82b 	bl	8b94 <compile_node>
        EMIT(yield_value);
    8b3e:	687b      	ldr	r3, [r7, #4]
    8b40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    8b42:	4618      	mov	r0, r3
    8b44:	f002 fa7e 	bl	b044 <mp_emit_bc_yield_value>
    }
}
    8b48:	3708      	adds	r7, #8
    8b4a:	46bd      	mov	sp, r7
    8b4c:	bd80      	pop	{r7, pc}
    8b4e:	bf00      	nop
    8b50:	00020a78 	.word	0x00020a78

00008b54 <get_const_object>:
    compile_atom_expr_normal(comp, pns);
    compile_yield_from(comp);
}
#endif

STATIC mp_obj_t get_const_object(mp_parse_node_struct_t *pns) {
    8b54:	b480      	push	{r7}
    8b56:	b083      	sub	sp, #12
    8b58:	af00      	add	r7, sp, #0
    8b5a:	6078      	str	r0, [r7, #4]
    #if MICROPY_OBJ_REPR == MICROPY_OBJ_REPR_D
    // nodes are 32-bit pointers, but need to extract 64-bit object
    return (uint64_t)pns->nodes[0] | ((uint64_t)pns->nodes[1] << 32);
    #else
    return (mp_obj_t)pns->nodes[0];
    8b5c:	687b      	ldr	r3, [r7, #4]
    8b5e:	689b      	ldr	r3, [r3, #8]
    #endif
}
    8b60:	4618      	mov	r0, r3
    8b62:	370c      	adds	r7, #12
    8b64:	46bd      	mov	sp, r7
    8b66:	f85d 7b04 	ldr.w	r7, [sp], #4
    8b6a:	4770      	bx	lr

00008b6c <compile_const_object>:

STATIC void compile_const_object(compiler_t *comp, mp_parse_node_struct_t *pns) {
    8b6c:	b590      	push	{r4, r7, lr}
    8b6e:	b083      	sub	sp, #12
    8b70:	af00      	add	r7, sp, #0
    8b72:	6078      	str	r0, [r7, #4]
    8b74:	6039      	str	r1, [r7, #0]
    EMIT_ARG(load_const_obj, get_const_object(pns));
    8b76:	687b      	ldr	r3, [r7, #4]
    8b78:	6a9c      	ldr	r4, [r3, #40]	; 0x28
    8b7a:	6838      	ldr	r0, [r7, #0]
    8b7c:	f7ff ffea 	bl	8b54 <get_const_object>
    8b80:	4603      	mov	r3, r0
    8b82:	4619      	mov	r1, r3
    8b84:	4620      	mov	r0, r4
    8b86:	f001 fcf3 	bl	a570 <mp_emit_bc_load_const_obj>
}
    8b8a:	bf00      	nop
    8b8c:	370c      	adds	r7, #12
    8b8e:	46bd      	mov	sp, r7
    8b90:	bd90      	pop	{r4, r7, pc}
    8b92:	bf00      	nop

00008b94 <compile_node>:
#undef DEF_RULE
#undef DEF_RULE_NC
    compile_const_object,
};

STATIC void compile_node(compiler_t *comp, mp_parse_node_t pn) {
    8b94:	b590      	push	{r4, r7, lr}
    8b96:	b089      	sub	sp, #36	; 0x24
    8b98:	af00      	add	r7, sp, #0
    8b9a:	6078      	str	r0, [r7, #4]
    8b9c:	6039      	str	r1, [r7, #0]
    if (MP_PARSE_NODE_IS_NULL(pn)) {
    8b9e:	683b      	ldr	r3, [r7, #0]
    8ba0:	2b00      	cmp	r3, #0
    8ba2:	d078      	beq.n	8c96 <compile_node+0x102>
        // pass
    } else if (MP_PARSE_NODE_IS_SMALL_INT(pn)) {
    8ba4:	683b      	ldr	r3, [r7, #0]
    8ba6:	f003 0301 	and.w	r3, r3, #1
    8baa:	2b00      	cmp	r3, #0
    8bac:	d009      	beq.n	8bc2 <compile_node+0x2e>
        mp_int_t arg = MP_PARSE_NODE_LEAF_SMALL_INT(pn);
    8bae:	683b      	ldr	r3, [r7, #0]
    8bb0:	105b      	asrs	r3, r3, #1
    8bb2:	61fb      	str	r3, [r7, #28]
            } else {
                EMIT_ARG(load_const_obj, mp_obj_new_int_from_ll(arg));
            }
        }
        #else
        EMIT_ARG(load_const_small_int, arg);
    8bb4:	687b      	ldr	r3, [r7, #4]
    8bb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    8bb8:	69f9      	ldr	r1, [r7, #28]
    8bba:	4618      	mov	r0, r3
    8bbc:	f001 fca4 	bl	a508 <mp_emit_bc_load_const_small_int>
        EMIT_ARG(set_source_line, pns->source_line);
        assert(MP_PARSE_NODE_STRUCT_KIND(pns) <= PN_const_object);
        compile_function_t f = compile_function[MP_PARSE_NODE_STRUCT_KIND(pns)];
        f(comp, pns);
    }
}
    8bc0:	e069      	b.n	8c96 <compile_node+0x102>
    } else if (MP_PARSE_NODE_IS_LEAF(pn)) {
    8bc2:	683b      	ldr	r3, [r7, #0]
    8bc4:	f003 0303 	and.w	r3, r3, #3
    8bc8:	2b00      	cmp	r3, #0
    8bca:	d041      	beq.n	8c50 <compile_node+0xbc>
        uintptr_t arg = MP_PARSE_NODE_LEAF_ARG(pn);
    8bcc:	683b      	ldr	r3, [r7, #0]
    8bce:	091b      	lsrs	r3, r3, #4
    8bd0:	61bb      	str	r3, [r7, #24]
        switch (MP_PARSE_NODE_LEAF_KIND(pn)) {
    8bd2:	683b      	ldr	r3, [r7, #0]
    8bd4:	f003 030f 	and.w	r3, r3, #15
    8bd8:	2b06      	cmp	r3, #6
    8bda:	d008      	beq.n	8bee <compile_node+0x5a>
    8bdc:	2b0a      	cmp	r3, #10
    8bde:	d00d      	beq.n	8bfc <compile_node+0x68>
    8be0:	2b02      	cmp	r3, #2
    8be2:	d12a      	bne.n	8c3a <compile_node+0xa6>
            case MP_PARSE_NODE_ID: compile_load_id(comp, arg); break;
    8be4:	69b9      	ldr	r1, [r7, #24]
    8be6:	6878      	ldr	r0, [r7, #4]
    8be8:	f7fc fa78 	bl	50dc <compile_load_id>
    8bec:	e053      	b.n	8c96 <compile_node+0x102>
            case MP_PARSE_NODE_STRING: EMIT_ARG(load_const_str, arg); break;
    8bee:	687b      	ldr	r3, [r7, #4]
    8bf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    8bf2:	69b9      	ldr	r1, [r7, #24]
    8bf4:	4618      	mov	r0, r3
    8bf6:	f001 fca9 	bl	a54c <mp_emit_bc_load_const_str>
    8bfa:	e04c      	b.n	8c96 <compile_node+0x102>
                if (comp->pass != MP_PASS_EMIT) {
    8bfc:	687b      	ldr	r3, [r7, #4]
    8bfe:	795b      	ldrb	r3, [r3, #5]
    8c00:	2b04      	cmp	r3, #4
    8c02:	d006      	beq.n	8c12 <compile_node+0x7e>
                    EMIT_ARG(load_const_obj, mp_const_none);
    8c04:	687b      	ldr	r3, [r7, #4]
    8c06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    8c08:	4925      	ldr	r1, [pc, #148]	; (8ca0 <compile_node+0x10c>)
    8c0a:	4618      	mov	r0, r3
    8c0c:	f001 fcb0 	bl	a570 <mp_emit_bc_load_const_obj>
                break;
    8c10:	e041      	b.n	8c96 <compile_node+0x102>
                    const byte *data = qstr_data(arg, &len);
    8c12:	f107 0308 	add.w	r3, r7, #8
    8c16:	4619      	mov	r1, r3
    8c18:	69b8      	ldr	r0, [r7, #24]
    8c1a:	f7f8 fbb5 	bl	1388 <qstr_data>
    8c1e:	6178      	str	r0, [r7, #20]
                    EMIT_ARG(load_const_obj, mp_obj_new_bytes(data, len));
    8c20:	687b      	ldr	r3, [r7, #4]
    8c22:	6a9c      	ldr	r4, [r3, #40]	; 0x28
    8c24:	68bb      	ldr	r3, [r7, #8]
    8c26:	4619      	mov	r1, r3
    8c28:	6978      	ldr	r0, [r7, #20]
    8c2a:	f00c fd71 	bl	15710 <mp_obj_new_bytes>
    8c2e:	4603      	mov	r3, r0
    8c30:	4619      	mov	r1, r3
    8c32:	4620      	mov	r0, r4
    8c34:	f001 fc9c 	bl	a570 <mp_emit_bc_load_const_obj>
                break;
    8c38:	e02d      	b.n	8c96 <compile_node+0x102>
                if (arg == MP_TOKEN_NEWLINE) {
    8c3a:	69bb      	ldr	r3, [r7, #24]
    8c3c:	2b04      	cmp	r3, #4
    8c3e:	d029      	beq.n	8c94 <compile_node+0x100>
                  EMIT_ARG(load_const_tok, arg);
    8c40:	687b      	ldr	r3, [r7, #4]
    8c42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    8c44:	69b9      	ldr	r1, [r7, #24]
    8c46:	4618      	mov	r0, r3
    8c48:	f001 fc22 	bl	a490 <mp_emit_bc_load_const_tok>
                break;
    8c4c:	bf00      	nop
    8c4e:	e021      	b.n	8c94 <compile_node+0x100>
        mp_parse_node_struct_t *pns = (mp_parse_node_struct_t*)pn;
    8c50:	683b      	ldr	r3, [r7, #0]
    8c52:	613b      	str	r3, [r7, #16]
        EMIT_ARG(set_source_line, pns->source_line);
    8c54:	687b      	ldr	r3, [r7, #4]
    8c56:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    8c58:	693b      	ldr	r3, [r7, #16]
    8c5a:	681b      	ldr	r3, [r3, #0]
    8c5c:	4619      	mov	r1, r3
    8c5e:	4610      	mov	r0, r2
    8c60:	f001 fb7c 	bl	a35c <mp_emit_bc_set_source_line>
        assert(MP_PARSE_NODE_STRUCT_KIND(pns) <= PN_const_object);
    8c64:	693b      	ldr	r3, [r7, #16]
    8c66:	685b      	ldr	r3, [r3, #4]
    8c68:	b2db      	uxtb	r3, r3
    8c6a:	2b35      	cmp	r3, #53	; 0x35
    8c6c:	d906      	bls.n	8c7c <compile_node+0xe8>
    8c6e:	4b0d      	ldr	r3, [pc, #52]	; (8ca4 <compile_node+0x110>)
    8c70:	4a0d      	ldr	r2, [pc, #52]	; (8ca8 <compile_node+0x114>)
    8c72:	f640 21a2 	movw	r1, #2722	; 0xaa2
    8c76:	480d      	ldr	r0, [pc, #52]	; (8cac <compile_node+0x118>)
    8c78:	f012 fd2a 	bl	1b6d0 <__assert_func>
        compile_function_t f = compile_function[MP_PARSE_NODE_STRUCT_KIND(pns)];
    8c7c:	693b      	ldr	r3, [r7, #16]
    8c7e:	685b      	ldr	r3, [r3, #4]
    8c80:	b2db      	uxtb	r3, r3
    8c82:	4a0b      	ldr	r2, [pc, #44]	; (8cb0 <compile_node+0x11c>)
    8c84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8c88:	60fb      	str	r3, [r7, #12]
        f(comp, pns);
    8c8a:	68fb      	ldr	r3, [r7, #12]
    8c8c:	6939      	ldr	r1, [r7, #16]
    8c8e:	6878      	ldr	r0, [r7, #4]
    8c90:	4798      	blx	r3
}
    8c92:	e000      	b.n	8c96 <compile_node+0x102>
                break;
    8c94:	bf00      	nop
}
    8c96:	bf00      	nop
    8c98:	3724      	adds	r7, #36	; 0x24
    8c9a:	46bd      	mov	sp, r7
    8c9c:	bd90      	pop	{r4, r7, pc}
    8c9e:	bf00      	nop
    8ca0:	0002345c 	.word	0x0002345c
    8ca4:	00020b6c 	.word	0x00020b6c
    8ca8:	00020fe4 	.word	0x00020fe4
    8cac:	00020234 	.word	0x00020234
    8cb0:	00020a94 	.word	0x00020a94

00008cb4 <compile_scope_func_lambda_param>:

STATIC void compile_scope_func_lambda_param(compiler_t *comp, mp_parse_node_t pn, pn_kind_t pn_name, pn_kind_t pn_star, pn_kind_t pn_dbl_star) {
    8cb4:	b580      	push	{r7, lr}
    8cb6:	b08a      	sub	sp, #40	; 0x28
    8cb8:	af00      	add	r7, sp, #0
    8cba:	60f8      	str	r0, [r7, #12]
    8cbc:	60b9      	str	r1, [r7, #8]
    8cbe:	607a      	str	r2, [r7, #4]
    8cc0:	603b      	str	r3, [r7, #0]
    // check that **kw is last
    if ((comp->scope_cur->scope_flags & MP_SCOPE_FLAG_VARKEYWORDS) != 0) {
    8cc2:	68fb      	ldr	r3, [r7, #12]
    8cc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    8cc6:	7e1b      	ldrb	r3, [r3, #24]
    8cc8:	f003 0302 	and.w	r3, r3, #2
    8ccc:	2b00      	cmp	r3, #0
    8cce:	d005      	beq.n	8cdc <compile_scope_func_lambda_param+0x28>
        compile_syntax_error(comp, pn, "invalid syntax");
    8cd0:	4a75      	ldr	r2, [pc, #468]	; (8ea8 <compile_scope_func_lambda_param+0x1f4>)
    8cd2:	68b9      	ldr	r1, [r7, #8]
    8cd4:	68f8      	ldr	r0, [r7, #12]
    8cd6:	f7fc f8ff 	bl	4ed8 <compile_syntax_error>
        return;
    8cda:	e0e2      	b.n	8ea2 <compile_scope_func_lambda_param+0x1ee>
    }

    qstr param_name = MP_QSTR_NULL;
    8cdc:	2300      	movs	r3, #0
    8cde:	627b      	str	r3, [r7, #36]	; 0x24
    uint param_flag = ID_FLAG_IS_PARAM;
    8ce0:	2301      	movs	r3, #1
    8ce2:	623b      	str	r3, [r7, #32]
    if (MP_PARSE_NODE_IS_ID(pn)) {
    8ce4:	68bb      	ldr	r3, [r7, #8]
    8ce6:	f003 030f 	and.w	r3, r3, #15
    8cea:	2b02      	cmp	r3, #2
    8cec:	d118      	bne.n	8d20 <compile_scope_func_lambda_param+0x6c>
        param_name = MP_PARSE_NODE_LEAF_ARG(pn);
    8cee:	68bb      	ldr	r3, [r7, #8]
    8cf0:	091b      	lsrs	r3, r3, #4
    8cf2:	627b      	str	r3, [r7, #36]	; 0x24
        if (comp->have_star) {
    8cf4:	68fb      	ldr	r3, [r7, #12]
    8cf6:	799b      	ldrb	r3, [r3, #6]
    8cf8:	2b00      	cmp	r3, #0
    8cfa:	d008      	beq.n	8d0e <compile_scope_func_lambda_param+0x5a>
            // comes after a star, so counts as a keyword-only parameter
            comp->scope_cur->num_kwonly_args += 1;
    8cfc:	68fb      	ldr	r3, [r7, #12]
    8cfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    8d00:	68fa      	ldr	r2, [r7, #12]
    8d02:	6a52      	ldr	r2, [r2, #36]	; 0x24
    8d04:	8b92      	ldrh	r2, [r2, #28]
    8d06:	3201      	adds	r2, #1
    8d08:	b292      	uxth	r2, r2
    8d0a:	839a      	strh	r2, [r3, #28]
    8d0c:	e0aa      	b.n	8e64 <compile_scope_func_lambda_param+0x1b0>
        } else {
            // comes before a star, so counts as a positional parameter
            comp->scope_cur->num_pos_args += 1;
    8d0e:	68fb      	ldr	r3, [r7, #12]
    8d10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    8d12:	68fa      	ldr	r2, [r7, #12]
    8d14:	6a52      	ldr	r2, [r2, #36]	; 0x24
    8d16:	8b52      	ldrh	r2, [r2, #26]
    8d18:	3201      	adds	r2, #1
    8d1a:	b292      	uxth	r2, r2
    8d1c:	835a      	strh	r2, [r3, #26]
    8d1e:	e0a1      	b.n	8e64 <compile_scope_func_lambda_param+0x1b0>
        }
    } else {
        assert(MP_PARSE_NODE_IS_STRUCT(pn));
    8d20:	68bb      	ldr	r3, [r7, #8]
    8d22:	2b00      	cmp	r3, #0
    8d24:	d004      	beq.n	8d30 <compile_scope_func_lambda_param+0x7c>
    8d26:	68bb      	ldr	r3, [r7, #8]
    8d28:	f003 0303 	and.w	r3, r3, #3
    8d2c:	2b00      	cmp	r3, #0
    8d2e:	d006      	beq.n	8d3e <compile_scope_func_lambda_param+0x8a>
    8d30:	4b5e      	ldr	r3, [pc, #376]	; (8eac <compile_scope_func_lambda_param+0x1f8>)
    8d32:	4a5f      	ldr	r2, [pc, #380]	; (8eb0 <compile_scope_func_lambda_param+0x1fc>)
    8d34:	f640 21bb 	movw	r1, #2747	; 0xabb
    8d38:	485e      	ldr	r0, [pc, #376]	; (8eb4 <compile_scope_func_lambda_param+0x200>)
    8d3a:	f012 fcc9 	bl	1b6d0 <__assert_func>
        mp_parse_node_struct_t *pns = (mp_parse_node_struct_t*)pn;
    8d3e:	68bb      	ldr	r3, [r7, #8]
    8d40:	61fb      	str	r3, [r7, #28]
        if (MP_PARSE_NODE_STRUCT_KIND(pns) == pn_name) {
    8d42:	69fb      	ldr	r3, [r7, #28]
    8d44:	685b      	ldr	r3, [r3, #4]
    8d46:	b2da      	uxtb	r2, r3
    8d48:	687b      	ldr	r3, [r7, #4]
    8d4a:	429a      	cmp	r2, r3
    8d4c:	d119      	bne.n	8d82 <compile_scope_func_lambda_param+0xce>
            param_name = MP_PARSE_NODE_LEAF_ARG(pns->nodes[0]);
    8d4e:	69fb      	ldr	r3, [r7, #28]
    8d50:	689b      	ldr	r3, [r3, #8]
    8d52:	091b      	lsrs	r3, r3, #4
    8d54:	627b      	str	r3, [r7, #36]	; 0x24
            if (comp->have_star) {
    8d56:	68fb      	ldr	r3, [r7, #12]
    8d58:	799b      	ldrb	r3, [r3, #6]
    8d5a:	2b00      	cmp	r3, #0
    8d5c:	d008      	beq.n	8d70 <compile_scope_func_lambda_param+0xbc>
                // comes after a star, so counts as a keyword-only parameter
                comp->scope_cur->num_kwonly_args += 1;
    8d5e:	68fb      	ldr	r3, [r7, #12]
    8d60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    8d62:	68fa      	ldr	r2, [r7, #12]
    8d64:	6a52      	ldr	r2, [r2, #36]	; 0x24
    8d66:	8b92      	ldrh	r2, [r2, #28]
    8d68:	3201      	adds	r2, #1
    8d6a:	b292      	uxth	r2, r2
    8d6c:	839a      	strh	r2, [r3, #28]
    8d6e:	e079      	b.n	8e64 <compile_scope_func_lambda_param+0x1b0>
            } else {
                // comes before a star, so counts as a positional parameter
                comp->scope_cur->num_pos_args += 1;
    8d70:	68fb      	ldr	r3, [r7, #12]
    8d72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    8d74:	68fa      	ldr	r2, [r7, #12]
    8d76:	6a52      	ldr	r2, [r2, #36]	; 0x24
    8d78:	8b52      	ldrh	r2, [r2, #26]
    8d7a:	3201      	adds	r2, #1
    8d7c:	b292      	uxth	r2, r2
    8d7e:	835a      	strh	r2, [r3, #26]
    8d80:	e070      	b.n	8e64 <compile_scope_func_lambda_param+0x1b0>
            }
        } else if (MP_PARSE_NODE_STRUCT_KIND(pns) == pn_star) {
    8d82:	69fb      	ldr	r3, [r7, #28]
    8d84:	685b      	ldr	r3, [r3, #4]
    8d86:	b2da      	uxtb	r2, r3
    8d88:	683b      	ldr	r3, [r7, #0]
    8d8a:	429a      	cmp	r2, r3
    8d8c:	d14e      	bne.n	8e2c <compile_scope_func_lambda_param+0x178>
            if (comp->have_star) {
    8d8e:	68fb      	ldr	r3, [r7, #12]
    8d90:	799b      	ldrb	r3, [r3, #6]
    8d92:	2b00      	cmp	r3, #0
    8d94:	d005      	beq.n	8da2 <compile_scope_func_lambda_param+0xee>
                // more than one star
                compile_syntax_error(comp, pn, "invalid syntax");
    8d96:	4a44      	ldr	r2, [pc, #272]	; (8ea8 <compile_scope_func_lambda_param+0x1f4>)
    8d98:	68b9      	ldr	r1, [r7, #8]
    8d9a:	68f8      	ldr	r0, [r7, #12]
    8d9c:	f7fc f89c 	bl	4ed8 <compile_syntax_error>
                return;
    8da0:	e07f      	b.n	8ea2 <compile_scope_func_lambda_param+0x1ee>
            }
            comp->have_star = true;
    8da2:	68fb      	ldr	r3, [r7, #12]
    8da4:	2201      	movs	r2, #1
    8da6:	719a      	strb	r2, [r3, #6]
            param_flag = ID_FLAG_IS_PARAM | ID_FLAG_IS_STAR_PARAM;
    8da8:	2303      	movs	r3, #3
    8daa:	623b      	str	r3, [r7, #32]
            if (MP_PARSE_NODE_IS_NULL(pns->nodes[0])) {
    8dac:	69fb      	ldr	r3, [r7, #28]
    8dae:	689b      	ldr	r3, [r3, #8]
    8db0:	2b00      	cmp	r3, #0
    8db2:	d057      	beq.n	8e64 <compile_scope_func_lambda_param+0x1b0>
                // bare star
                // TODO see http://www.python.org/dev/peps/pep-3102/
                //assert(comp->scope_cur->num_dict_params == 0);
            } else if (MP_PARSE_NODE_IS_ID(pns->nodes[0])) {
    8db4:	69fb      	ldr	r3, [r7, #28]
    8db6:	689b      	ldr	r3, [r3, #8]
    8db8:	f003 030f 	and.w	r3, r3, #15
    8dbc:	2b02      	cmp	r3, #2
    8dbe:	d10d      	bne.n	8ddc <compile_scope_func_lambda_param+0x128>
                // named star
                comp->scope_cur->scope_flags |= MP_SCOPE_FLAG_VARARGS;
    8dc0:	68fb      	ldr	r3, [r7, #12]
    8dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    8dc4:	68fa      	ldr	r2, [r7, #12]
    8dc6:	6a52      	ldr	r2, [r2, #36]	; 0x24
    8dc8:	7e12      	ldrb	r2, [r2, #24]
    8dca:	f042 0201 	orr.w	r2, r2, #1
    8dce:	b2d2      	uxtb	r2, r2
    8dd0:	761a      	strb	r2, [r3, #24]
                param_name = MP_PARSE_NODE_LEAF_ARG(pns->nodes[0]);
    8dd2:	69fb      	ldr	r3, [r7, #28]
    8dd4:	689b      	ldr	r3, [r3, #8]
    8dd6:	091b      	lsrs	r3, r3, #4
    8dd8:	627b      	str	r3, [r7, #36]	; 0x24
    8dda:	e043      	b.n	8e64 <compile_scope_func_lambda_param+0x1b0>
            } else {
                assert(MP_PARSE_NODE_IS_STRUCT_KIND(pns->nodes[0], PN_tfpdef)); // should be
    8ddc:	69fb      	ldr	r3, [r7, #28]
    8dde:	689b      	ldr	r3, [r3, #8]
    8de0:	2b00      	cmp	r3, #0
    8de2:	d00b      	beq.n	8dfc <compile_scope_func_lambda_param+0x148>
    8de4:	69fb      	ldr	r3, [r7, #28]
    8de6:	689b      	ldr	r3, [r3, #8]
    8de8:	f003 0303 	and.w	r3, r3, #3
    8dec:	2b00      	cmp	r3, #0
    8dee:	d105      	bne.n	8dfc <compile_scope_func_lambda_param+0x148>
    8df0:	69fb      	ldr	r3, [r7, #28]
    8df2:	689b      	ldr	r3, [r3, #8]
    8df4:	685b      	ldr	r3, [r3, #4]
    8df6:	b2db      	uxtb	r3, r3
    8df8:	2b45      	cmp	r3, #69	; 0x45
    8dfa:	d006      	beq.n	8e0a <compile_scope_func_lambda_param+0x156>
    8dfc:	4b2e      	ldr	r3, [pc, #184]	; (8eb8 <compile_scope_func_lambda_param+0x204>)
    8dfe:	4a2c      	ldr	r2, [pc, #176]	; (8eb0 <compile_scope_func_lambda_param+0x1fc>)
    8e00:	f640 21d7 	movw	r1, #2775	; 0xad7
    8e04:	482b      	ldr	r0, [pc, #172]	; (8eb4 <compile_scope_func_lambda_param+0x200>)
    8e06:	f012 fc63 	bl	1b6d0 <__assert_func>
                // named star with possible annotation
                comp->scope_cur->scope_flags |= MP_SCOPE_FLAG_VARARGS;
    8e0a:	68fb      	ldr	r3, [r7, #12]
    8e0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    8e0e:	68fa      	ldr	r2, [r7, #12]
    8e10:	6a52      	ldr	r2, [r2, #36]	; 0x24
    8e12:	7e12      	ldrb	r2, [r2, #24]
    8e14:	f042 0201 	orr.w	r2, r2, #1
    8e18:	b2d2      	uxtb	r2, r2
    8e1a:	761a      	strb	r2, [r3, #24]
                pns = (mp_parse_node_struct_t*)pns->nodes[0];
    8e1c:	69fb      	ldr	r3, [r7, #28]
    8e1e:	689b      	ldr	r3, [r3, #8]
    8e20:	61fb      	str	r3, [r7, #28]
                param_name = MP_PARSE_NODE_LEAF_ARG(pns->nodes[0]);
    8e22:	69fb      	ldr	r3, [r7, #28]
    8e24:	689b      	ldr	r3, [r3, #8]
    8e26:	091b      	lsrs	r3, r3, #4
    8e28:	627b      	str	r3, [r7, #36]	; 0x24
    8e2a:	e01b      	b.n	8e64 <compile_scope_func_lambda_param+0x1b0>
            }
        } else {
            assert(MP_PARSE_NODE_STRUCT_KIND(pns) == pn_dbl_star); // should be
    8e2c:	69fb      	ldr	r3, [r7, #28]
    8e2e:	685b      	ldr	r3, [r3, #4]
    8e30:	b2da      	uxtb	r2, r3
    8e32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    8e34:	429a      	cmp	r2, r3
    8e36:	d006      	beq.n	8e46 <compile_scope_func_lambda_param+0x192>
    8e38:	4b20      	ldr	r3, [pc, #128]	; (8ebc <compile_scope_func_lambda_param+0x208>)
    8e3a:	4a1d      	ldr	r2, [pc, #116]	; (8eb0 <compile_scope_func_lambda_param+0x1fc>)
    8e3c:	f640 21de 	movw	r1, #2782	; 0xade
    8e40:	481c      	ldr	r0, [pc, #112]	; (8eb4 <compile_scope_func_lambda_param+0x200>)
    8e42:	f012 fc45 	bl	1b6d0 <__assert_func>
            param_name = MP_PARSE_NODE_LEAF_ARG(pns->nodes[0]);
    8e46:	69fb      	ldr	r3, [r7, #28]
    8e48:	689b      	ldr	r3, [r3, #8]
    8e4a:	091b      	lsrs	r3, r3, #4
    8e4c:	627b      	str	r3, [r7, #36]	; 0x24
            param_flag = ID_FLAG_IS_PARAM | ID_FLAG_IS_DBL_STAR_PARAM;
    8e4e:	2305      	movs	r3, #5
    8e50:	623b      	str	r3, [r7, #32]
            comp->scope_cur->scope_flags |= MP_SCOPE_FLAG_VARKEYWORDS;
    8e52:	68fb      	ldr	r3, [r7, #12]
    8e54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    8e56:	68fa      	ldr	r2, [r7, #12]
    8e58:	6a52      	ldr	r2, [r2, #36]	; 0x24
    8e5a:	7e12      	ldrb	r2, [r2, #24]
    8e5c:	f042 0202 	orr.w	r2, r2, #2
    8e60:	b2d2      	uxtb	r2, r2
    8e62:	761a      	strb	r2, [r3, #24]
        }
    }

    if (param_name != MP_QSTR_NULL) {
    8e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    8e66:	2b00      	cmp	r3, #0
    8e68:	d01b      	beq.n	8ea2 <compile_scope_func_lambda_param+0x1ee>
        bool added;
        id_info_t *id_info = scope_find_or_add_id(comp->scope_cur, param_name, &added);
    8e6a:	68fb      	ldr	r3, [r7, #12]
    8e6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    8e6e:	f107 0217 	add.w	r2, r7, #23
    8e72:	6a79      	ldr	r1, [r7, #36]	; 0x24
    8e74:	4618      	mov	r0, r3
    8e76:	f7fb fee5 	bl	4c44 <scope_find_or_add_id>
    8e7a:	61b8      	str	r0, [r7, #24]
        if (!added) {
    8e7c:	7dfb      	ldrb	r3, [r7, #23]
    8e7e:	f083 0301 	eor.w	r3, r3, #1
    8e82:	b2db      	uxtb	r3, r3
    8e84:	2b00      	cmp	r3, #0
    8e86:	d005      	beq.n	8e94 <compile_scope_func_lambda_param+0x1e0>
            compile_syntax_error(comp, pn, "name reused for argument");
    8e88:	4a0d      	ldr	r2, [pc, #52]	; (8ec0 <compile_scope_func_lambda_param+0x20c>)
    8e8a:	68b9      	ldr	r1, [r7, #8]
    8e8c:	68f8      	ldr	r0, [r7, #12]
    8e8e:	f7fc f823 	bl	4ed8 <compile_syntax_error>
    8e92:	e006      	b.n	8ea2 <compile_scope_func_lambda_param+0x1ee>
            return;
        }
        id_info->kind = ID_INFO_KIND_LOCAL;
    8e94:	69bb      	ldr	r3, [r7, #24]
    8e96:	2202      	movs	r2, #2
    8e98:	701a      	strb	r2, [r3, #0]
        id_info->flags = param_flag;
    8e9a:	6a3b      	ldr	r3, [r7, #32]
    8e9c:	b2da      	uxtb	r2, r3
    8e9e:	69bb      	ldr	r3, [r7, #24]
    8ea0:	705a      	strb	r2, [r3, #1]
    }
}
    8ea2:	3728      	adds	r7, #40	; 0x28
    8ea4:	46bd      	mov	sp, r7
    8ea6:	bd80      	pop	{r7, pc}
    8ea8:	00020a34 	.word	0x00020a34
    8eac:	0002037c 	.word	0x0002037c
    8eb0:	00020ff4 	.word	0x00020ff4
    8eb4:	00020234 	.word	0x00020234
    8eb8:	00020ba0 	.word	0x00020ba0
    8ebc:	00020bd8 	.word	0x00020bd8
    8ec0:	00020c08 	.word	0x00020c08

00008ec4 <compile_scope_func_param>:

STATIC void compile_scope_func_param(compiler_t *comp, mp_parse_node_t pn) {
    8ec4:	b580      	push	{r7, lr}
    8ec6:	b084      	sub	sp, #16
    8ec8:	af02      	add	r7, sp, #8
    8eca:	6078      	str	r0, [r7, #4]
    8ecc:	6039      	str	r1, [r7, #0]
    compile_scope_func_lambda_param(comp, pn, PN_typedargslist_name, PN_typedargslist_star, PN_typedargslist_dbl_star);
    8ece:	2342      	movs	r3, #66	; 0x42
    8ed0:	9300      	str	r3, [sp, #0]
    8ed2:	2341      	movs	r3, #65	; 0x41
    8ed4:	2240      	movs	r2, #64	; 0x40
    8ed6:	6839      	ldr	r1, [r7, #0]
    8ed8:	6878      	ldr	r0, [r7, #4]
    8eda:	f7ff feeb 	bl	8cb4 <compile_scope_func_lambda_param>
}
    8ede:	bf00      	nop
    8ee0:	3708      	adds	r7, #8
    8ee2:	46bd      	mov	sp, r7
    8ee4:	bd80      	pop	{r7, pc}
    8ee6:	bf00      	nop

00008ee8 <compile_scope_lambda_param>:

STATIC void compile_scope_lambda_param(compiler_t *comp, mp_parse_node_t pn) {
    8ee8:	b580      	push	{r7, lr}
    8eea:	b084      	sub	sp, #16
    8eec:	af02      	add	r7, sp, #8
    8eee:	6078      	str	r0, [r7, #4]
    8ef0:	6039      	str	r1, [r7, #0]
    compile_scope_func_lambda_param(comp, pn, PN_varargslist_name, PN_varargslist_star, PN_varargslist_dbl_star);
    8ef2:	234a      	movs	r3, #74	; 0x4a
    8ef4:	9300      	str	r3, [sp, #0]
    8ef6:	2349      	movs	r3, #73	; 0x49
    8ef8:	2248      	movs	r2, #72	; 0x48
    8efa:	6839      	ldr	r1, [r7, #0]
    8efc:	6878      	ldr	r0, [r7, #4]
    8efe:	f7ff fed9 	bl	8cb4 <compile_scope_func_lambda_param>
}
    8f02:	bf00      	nop
    8f04:	3708      	adds	r7, #8
    8f06:	46bd      	mov	sp, r7
    8f08:	bd80      	pop	{r7, pc}
    8f0a:	bf00      	nop

00008f0c <compile_scope_comp_iter>:
        }
    }
}
#endif // MICROPY_EMIT_NATIVE

STATIC void compile_scope_comp_iter(compiler_t *comp, mp_parse_node_struct_t *pns_comp_for, mp_parse_node_t pn_inner_expr, int for_depth) {
    8f0c:	b580      	push	{r7, lr}
    8f0e:	b08a      	sub	sp, #40	; 0x28
    8f10:	af00      	add	r7, sp, #0
    8f12:	60f8      	str	r0, [r7, #12]
    8f14:	60b9      	str	r1, [r7, #8]
    8f16:	607a      	str	r2, [r7, #4]
    8f18:	603b      	str	r3, [r7, #0]
    uint l_top = comp_next_label(comp);
    8f1a:	68f8      	ldr	r0, [r7, #12]
    8f1c:	f7fb fff8 	bl	4f10 <comp_next_label>
    8f20:	6238      	str	r0, [r7, #32]
    uint l_end = comp_next_label(comp);
    8f22:	68f8      	ldr	r0, [r7, #12]
    8f24:	f7fb fff4 	bl	4f10 <comp_next_label>
    8f28:	61f8      	str	r0, [r7, #28]
    EMIT_ARG(label_assign, l_top);
    8f2a:	68fb      	ldr	r3, [r7, #12]
    8f2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    8f2e:	6a39      	ldr	r1, [r7, #32]
    8f30:	4618      	mov	r0, r3
    8f32:	f001 fa1f 	bl	a374 <mp_emit_bc_label_assign>
    EMIT_ARG(for_iter, l_end);
    8f36:	68fb      	ldr	r3, [r7, #12]
    8f38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    8f3a:	69f9      	ldr	r1, [r7, #28]
    8f3c:	4618      	mov	r0, r3
    8f3e:	f001 fe3f 	bl	abc0 <mp_emit_bc_for_iter>
    c_assign(comp, pns_comp_for->nodes[0], ASSIGN_STORE);
    8f42:	68bb      	ldr	r3, [r7, #8]
    8f44:	689b      	ldr	r3, [r3, #8]
    8f46:	2200      	movs	r2, #0
    8f48:	4619      	mov	r1, r3
    8f4a:	68f8      	ldr	r0, [r7, #12]
    8f4c:	f7fc fc04 	bl	5758 <c_assign>
    mp_parse_node_t pn_iter = pns_comp_for->nodes[2];
    8f50:	68bb      	ldr	r3, [r7, #8]
    8f52:	691b      	ldr	r3, [r3, #16]
    8f54:	627b      	str	r3, [r7, #36]	; 0x24

    tail_recursion:
    if (MP_PARSE_NODE_IS_NULL(pn_iter)) {
    8f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    8f58:	2b00      	cmp	r3, #0
    8f5a:	d11f      	bne.n	8f9c <compile_scope_comp_iter+0x90>
        // no more nested if/for; compile inner expression
        compile_node(comp, pn_inner_expr);
    8f5c:	6879      	ldr	r1, [r7, #4]
    8f5e:	68f8      	ldr	r0, [r7, #12]
    8f60:	f7ff fe18 	bl	8b94 <compile_node>
        if (comp->scope_cur->kind == SCOPE_GEN_EXPR) {
    8f64:	68fb      	ldr	r3, [r7, #12]
    8f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    8f68:	681b      	ldr	r3, [r3, #0]
    8f6a:	2b06      	cmp	r3, #6
    8f6c:	d10a      	bne.n	8f84 <compile_scope_comp_iter+0x78>
            EMIT(yield_value);
    8f6e:	68fb      	ldr	r3, [r7, #12]
    8f70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    8f72:	4618      	mov	r0, r3
    8f74:	f002 f866 	bl	b044 <mp_emit_bc_yield_value>
            EMIT(pop_top);
    8f78:	68fb      	ldr	r3, [r7, #12]
    8f7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    8f7c:	4618      	mov	r0, r3
    8f7e:	f001 fccf 	bl	a920 <mp_emit_bc_pop_top>
    8f82:	e03e      	b.n	9002 <compile_scope_comp_iter+0xf6>
        } else {
            EMIT_ARG(store_comp, comp->scope_cur->kind, 4 * for_depth + 5);
    8f84:	68fb      	ldr	r3, [r7, #12]
    8f86:	6a98      	ldr	r0, [r3, #40]	; 0x28
    8f88:	68fb      	ldr	r3, [r7, #12]
    8f8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    8f8c:	6819      	ldr	r1, [r3, #0]
    8f8e:	683b      	ldr	r3, [r7, #0]
    8f90:	009b      	lsls	r3, r3, #2
    8f92:	3305      	adds	r3, #5
    8f94:	461a      	mov	r2, r3
    8f96:	f001 feeb 	bl	ad70 <mp_emit_bc_store_comp>
    8f9a:	e032      	b.n	9002 <compile_scope_comp_iter+0xf6>
        }
    } else if (MP_PARSE_NODE_STRUCT_KIND((mp_parse_node_struct_t*)pn_iter) == PN_comp_if) {
    8f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    8f9e:	685b      	ldr	r3, [r3, #4]
    8fa0:	b2db      	uxtb	r3, r3
    8fa2:	2ba0      	cmp	r3, #160	; 0xa0
    8fa4:	d10c      	bne.n	8fc0 <compile_scope_comp_iter+0xb4>
        // if condition
        mp_parse_node_struct_t *pns_comp_if = (mp_parse_node_struct_t*)pn_iter;
    8fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    8fa8:	61bb      	str	r3, [r7, #24]
        c_if_cond(comp, pns_comp_if->nodes[0], false, l_top);
    8faa:	69bb      	ldr	r3, [r7, #24]
    8fac:	6899      	ldr	r1, [r3, #8]
    8fae:	6a3b      	ldr	r3, [r7, #32]
    8fb0:	2200      	movs	r2, #0
    8fb2:	68f8      	ldr	r0, [r7, #12]
    8fb4:	f7fc f936 	bl	5224 <c_if_cond>
        pn_iter = pns_comp_if->nodes[1];
    8fb8:	69bb      	ldr	r3, [r7, #24]
    8fba:	68db      	ldr	r3, [r3, #12]
    8fbc:	627b      	str	r3, [r7, #36]	; 0x24
        goto tail_recursion;
    8fbe:	e7ca      	b.n	8f56 <compile_scope_comp_iter+0x4a>
    } else {
        assert(MP_PARSE_NODE_STRUCT_KIND((mp_parse_node_struct_t*)pn_iter) == PN_comp_for); // should be
    8fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    8fc2:	685b      	ldr	r3, [r3, #4]
    8fc4:	b2db      	uxtb	r3, r3
    8fc6:	2b9f      	cmp	r3, #159	; 0x9f
    8fc8:	d006      	beq.n	8fd8 <compile_scope_comp_iter+0xcc>
    8fca:	4b18      	ldr	r3, [pc, #96]	; (902c <compile_scope_comp_iter+0x120>)
    8fcc:	4a18      	ldr	r2, [pc, #96]	; (9030 <compile_scope_comp_iter+0x124>)
    8fce:	f640 313d 	movw	r1, #2877	; 0xb3d
    8fd2:	4818      	ldr	r0, [pc, #96]	; (9034 <compile_scope_comp_iter+0x128>)
    8fd4:	f012 fb7c 	bl	1b6d0 <__assert_func>
        // for loop
        mp_parse_node_struct_t *pns_comp_for2 = (mp_parse_node_struct_t*)pn_iter;
    8fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    8fda:	617b      	str	r3, [r7, #20]
        compile_node(comp, pns_comp_for2->nodes[1]);
    8fdc:	697b      	ldr	r3, [r7, #20]
    8fde:	68db      	ldr	r3, [r3, #12]
    8fe0:	4619      	mov	r1, r3
    8fe2:	68f8      	ldr	r0, [r7, #12]
    8fe4:	f7ff fdd6 	bl	8b94 <compile_node>
        EMIT_ARG(get_iter, true);
    8fe8:	68fb      	ldr	r3, [r7, #12]
    8fea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    8fec:	2101      	movs	r1, #1
    8fee:	4618      	mov	r0, r3
    8ff0:	f001 fdc8 	bl	ab84 <mp_emit_bc_get_iter>
        compile_scope_comp_iter(comp, pns_comp_for2, pn_inner_expr, for_depth + 1);
    8ff4:	683b      	ldr	r3, [r7, #0]
    8ff6:	3301      	adds	r3, #1
    8ff8:	687a      	ldr	r2, [r7, #4]
    8ffa:	6979      	ldr	r1, [r7, #20]
    8ffc:	68f8      	ldr	r0, [r7, #12]
    8ffe:	f7ff ff85 	bl	8f0c <compile_scope_comp_iter>
    }

    EMIT_ARG(jump, l_top);
    9002:	68fb      	ldr	r3, [r7, #12]
    9004:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    9006:	6a39      	ldr	r1, [r7, #32]
    9008:	4618      	mov	r0, r3
    900a:	f001 fcbb 	bl	a984 <mp_emit_bc_jump>
    EMIT_ARG(label_assign, l_end);
    900e:	68fb      	ldr	r3, [r7, #12]
    9010:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    9012:	69f9      	ldr	r1, [r7, #28]
    9014:	4618      	mov	r0, r3
    9016:	f001 f9ad 	bl	a374 <mp_emit_bc_label_assign>
    EMIT(for_iter_end);
    901a:	68fb      	ldr	r3, [r7, #12]
    901c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    901e:	4618      	mov	r0, r3
    9020:	f001 fde0 	bl	abe4 <mp_emit_bc_for_iter_end>
}
    9024:	bf00      	nop
    9026:	3728      	adds	r7, #40	; 0x28
    9028:	46bd      	mov	sp, r7
    902a:	bd80      	pop	{r7, pc}
    902c:	00020c24 	.word	0x00020c24
    9030:	00021014 	.word	0x00021014
    9034:	00020234 	.word	0x00020234

00009038 <check_for_doc_string>:

STATIC void check_for_doc_string(compiler_t *comp, mp_parse_node_t pn) {
    9038:	b480      	push	{r7}
    903a:	b083      	sub	sp, #12
    903c:	af00      	add	r7, sp, #0
    903e:	6078      	str	r0, [r7, #4]
    9040:	6039      	str	r1, [r7, #0]
    }
#else
    (void)comp;
    (void)pn;
#endif
}
    9042:	bf00      	nop
    9044:	370c      	adds	r7, #12
    9046:	46bd      	mov	sp, r7
    9048:	f85d 7b04 	ldr.w	r7, [sp], #4
    904c:	4770      	bx	lr
    904e:	bf00      	nop

00009050 <compile_scope>:

STATIC void compile_scope(compiler_t *comp, scope_t *scope, pass_kind_t pass) {
    9050:	b580      	push	{r7, lr}
    9052:	b090      	sub	sp, #64	; 0x40
    9054:	af00      	add	r7, sp, #0
    9056:	60f8      	str	r0, [r7, #12]
    9058:	60b9      	str	r1, [r7, #8]
    905a:	607a      	str	r2, [r7, #4]
    comp->pass = pass;
    905c:	687b      	ldr	r3, [r7, #4]
    905e:	b2da      	uxtb	r2, r3
    9060:	68fb      	ldr	r3, [r7, #12]
    9062:	715a      	strb	r2, [r3, #5]
    comp->scope_cur = scope;
    9064:	68fb      	ldr	r3, [r7, #12]
    9066:	68ba      	ldr	r2, [r7, #8]
    9068:	625a      	str	r2, [r3, #36]	; 0x24
    comp->next_label = 0;
    906a:	68fb      	ldr	r3, [r7, #12]
    906c:	2200      	movs	r2, #0
    906e:	611a      	str	r2, [r3, #16]
    EMIT_ARG(start_pass, pass, scope);
    9070:	68fb      	ldr	r3, [r7, #12]
    9072:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    9074:	68ba      	ldr	r2, [r7, #8]
    9076:	6879      	ldr	r1, [r7, #4]
    9078:	4618      	mov	r0, r3
    907a:	f000 ffc3 	bl	a004 <mp_emit_bc_start_pass>

    if (comp->pass == MP_PASS_SCOPE) {
    907e:	68fb      	ldr	r3, [r7, #12]
    9080:	795b      	ldrb	r3, [r3, #5]
    9082:	2b01      	cmp	r3, #1
    9084:	d105      	bne.n	9092 <compile_scope+0x42>
        // reset maximum stack sizes in scope
        // they will be computed in this first pass
        scope->stack_size = 0;
    9086:	68bb      	ldr	r3, [r7, #8]
    9088:	2200      	movs	r2, #0
    908a:	845a      	strh	r2, [r3, #34]	; 0x22
        scope->exc_stack_size = 0;
    908c:	68bb      	ldr	r3, [r7, #8]
    908e:	2200      	movs	r2, #0
    9090:	849a      	strh	r2, [r3, #36]	; 0x24
    }

    // compile
    if (MP_PARSE_NODE_IS_STRUCT_KIND(scope->pn, PN_eval_input)) {
    9092:	68bb      	ldr	r3, [r7, #8]
    9094:	68db      	ldr	r3, [r3, #12]
    9096:	2b00      	cmp	r3, #0
    9098:	d025      	beq.n	90e6 <compile_scope+0x96>
    909a:	68bb      	ldr	r3, [r7, #8]
    909c:	68db      	ldr	r3, [r3, #12]
    909e:	f003 0303 	and.w	r3, r3, #3
    90a2:	2b00      	cmp	r3, #0
    90a4:	d11f      	bne.n	90e6 <compile_scope+0x96>
    90a6:	68bb      	ldr	r3, [r7, #8]
    90a8:	68db      	ldr	r3, [r3, #12]
    90aa:	685b      	ldr	r3, [r3, #4]
    90ac:	b2db      	uxtb	r3, r3
    90ae:	2b38      	cmp	r3, #56	; 0x38
    90b0:	d119      	bne.n	90e6 <compile_scope+0x96>
        assert(scope->kind == SCOPE_MODULE);
    90b2:	68bb      	ldr	r3, [r7, #8]
    90b4:	681b      	ldr	r3, [r3, #0]
    90b6:	2b00      	cmp	r3, #0
    90b8:	d006      	beq.n	90c8 <compile_scope+0x78>
    90ba:	4b9c      	ldr	r3, [pc, #624]	; (932c <compile_scope+0x2dc>)
    90bc:	4a9c      	ldr	r2, [pc, #624]	; (9330 <compile_scope+0x2e0>)
    90be:	f640 3186 	movw	r1, #2950	; 0xb86
    90c2:	489c      	ldr	r0, [pc, #624]	; (9334 <compile_scope+0x2e4>)
    90c4:	f012 fb04 	bl	1b6d0 <__assert_func>
        mp_parse_node_struct_t *pns = (mp_parse_node_struct_t*)scope->pn;
    90c8:	68bb      	ldr	r3, [r7, #8]
    90ca:	68db      	ldr	r3, [r3, #12]
    90cc:	63fb      	str	r3, [r7, #60]	; 0x3c
        compile_node(comp, pns->nodes[0]); // compile the expression
    90ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    90d0:	689b      	ldr	r3, [r3, #8]
    90d2:	4619      	mov	r1, r3
    90d4:	68f8      	ldr	r0, [r7, #12]
    90d6:	f7ff fd5d 	bl	8b94 <compile_node>
        EMIT(return_value);
    90da:	68fb      	ldr	r3, [r7, #12]
    90dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    90de:	4618      	mov	r0, r3
    90e0:	f001 ff76 	bl	afd0 <mp_emit_bc_return_value>
    if (MP_PARSE_NODE_IS_STRUCT_KIND(scope->pn, PN_eval_input)) {
    90e4:	e218      	b.n	9518 <compile_scope+0x4c8>
    } else if (scope->kind == SCOPE_MODULE) {
    90e6:	68bb      	ldr	r3, [r7, #8]
    90e8:	681b      	ldr	r3, [r3, #0]
    90ea:	2b00      	cmp	r3, #0
    90ec:	d11b      	bne.n	9126 <compile_scope+0xd6>
        if (!comp->is_repl) {
    90ee:	68fb      	ldr	r3, [r7, #12]
    90f0:	791b      	ldrb	r3, [r3, #4]
    90f2:	2b00      	cmp	r3, #0
    90f4:	d105      	bne.n	9102 <compile_scope+0xb2>
            check_for_doc_string(comp, scope->pn);
    90f6:	68bb      	ldr	r3, [r7, #8]
    90f8:	68db      	ldr	r3, [r3, #12]
    90fa:	4619      	mov	r1, r3
    90fc:	68f8      	ldr	r0, [r7, #12]
    90fe:	f7ff ff9b 	bl	9038 <check_for_doc_string>
        }
        compile_node(comp, scope->pn);
    9102:	68bb      	ldr	r3, [r7, #8]
    9104:	68db      	ldr	r3, [r3, #12]
    9106:	4619      	mov	r1, r3
    9108:	68f8      	ldr	r0, [r7, #12]
    910a:	f7ff fd43 	bl	8b94 <compile_node>
        EMIT_ARG(load_const_tok, MP_TOKEN_KW_NONE);
    910e:	68fb      	ldr	r3, [r7, #12]
    9110:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    9112:	210e      	movs	r1, #14
    9114:	4618      	mov	r0, r3
    9116:	f001 f9bb 	bl	a490 <mp_emit_bc_load_const_tok>
        EMIT(return_value);
    911a:	68fb      	ldr	r3, [r7, #12]
    911c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    911e:	4618      	mov	r0, r3
    9120:	f001 ff56 	bl	afd0 <mp_emit_bc_return_value>
    9124:	e1f8      	b.n	9518 <compile_scope+0x4c8>
    } else if (scope->kind == SCOPE_FUNCTION) {
    9126:	68bb      	ldr	r3, [r7, #8]
    9128:	681b      	ldr	r3, [r3, #0]
    912a:	2b07      	cmp	r3, #7
    912c:	d14b      	bne.n	91c6 <compile_scope+0x176>
        assert(MP_PARSE_NODE_IS_STRUCT(scope->pn));
    912e:	68bb      	ldr	r3, [r7, #8]
    9130:	68db      	ldr	r3, [r3, #12]
    9132:	2b00      	cmp	r3, #0
    9134:	d005      	beq.n	9142 <compile_scope+0xf2>
    9136:	68bb      	ldr	r3, [r7, #8]
    9138:	68db      	ldr	r3, [r3, #12]
    913a:	f003 0303 	and.w	r3, r3, #3
    913e:	2b00      	cmp	r3, #0
    9140:	d006      	beq.n	9150 <compile_scope+0x100>
    9142:	4b7d      	ldr	r3, [pc, #500]	; (9338 <compile_scope+0x2e8>)
    9144:	4a7a      	ldr	r2, [pc, #488]	; (9330 <compile_scope+0x2e0>)
    9146:	f640 3192 	movw	r1, #2962	; 0xb92
    914a:	487a      	ldr	r0, [pc, #488]	; (9334 <compile_scope+0x2e4>)
    914c:	f012 fac0 	bl	1b6d0 <__assert_func>
        mp_parse_node_struct_t *pns = (mp_parse_node_struct_t*)scope->pn;
    9150:	68bb      	ldr	r3, [r7, #8]
    9152:	68db      	ldr	r3, [r3, #12]
    9154:	63bb      	str	r3, [r7, #56]	; 0x38
        assert(MP_PARSE_NODE_STRUCT_KIND(pns) == PN_funcdef);
    9156:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    9158:	685b      	ldr	r3, [r3, #4]
    915a:	b2db      	uxtb	r3, r3
    915c:	2b03      	cmp	r3, #3
    915e:	d006      	beq.n	916e <compile_scope+0x11e>
    9160:	4b76      	ldr	r3, [pc, #472]	; (933c <compile_scope+0x2ec>)
    9162:	4a73      	ldr	r2, [pc, #460]	; (9330 <compile_scope+0x2e0>)
    9164:	f640 3194 	movw	r1, #2964	; 0xb94
    9168:	4872      	ldr	r0, [pc, #456]	; (9334 <compile_scope+0x2e4>)
    916a:	f012 fab1 	bl	1b6d0 <__assert_func>

        // work out number of parameters, keywords and default parameters, and add them to the id_info array
        // must be done before compiling the body so that arguments are numbered first (for LOAD_FAST etc)
        if (comp->pass == MP_PASS_SCOPE) {
    916e:	68fb      	ldr	r3, [r7, #12]
    9170:	795b      	ldrb	r3, [r3, #5]
    9172:	2b01      	cmp	r3, #1
    9174:	d109      	bne.n	918a <compile_scope+0x13a>
            comp->have_star = false;
    9176:	68fb      	ldr	r3, [r7, #12]
    9178:	2200      	movs	r2, #0
    917a:	719a      	strb	r2, [r3, #6]
            apply_to_single_or_list(comp, pns->nodes[1], PN_typedargslist, compile_scope_func_param);
    917c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    917e:	68d9      	ldr	r1, [r3, #12]
    9180:	4b6f      	ldr	r3, [pc, #444]	; (9340 <compile_scope+0x2f0>)
    9182:	223e      	movs	r2, #62	; 0x3e
    9184:	68f8      	ldr	r0, [r7, #12]
    9186:	f7fb ff3f 	bl	5008 <apply_to_single_or_list>
                }
            }
        }
        #endif // MICROPY_EMIT_NATIVE

        compile_node(comp, pns->nodes[3]); // 3 is function body
    918a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    918c:	695b      	ldr	r3, [r3, #20]
    918e:	4619      	mov	r1, r3
    9190:	68f8      	ldr	r0, [r7, #12]
    9192:	f7ff fcff 	bl	8b94 <compile_node>
        // emit return if it wasn't the last opcode
        if (!EMIT(last_emit_was_return_value)) {
    9196:	68fb      	ldr	r3, [r7, #12]
    9198:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    919a:	4618      	mov	r0, r3
    919c:	f001 f886 	bl	a2ac <mp_emit_bc_last_emit_was_return_value>
    91a0:	4603      	mov	r3, r0
    91a2:	f083 0301 	eor.w	r3, r3, #1
    91a6:	b2db      	uxtb	r3, r3
    91a8:	2b00      	cmp	r3, #0
    91aa:	f000 81b5 	beq.w	9518 <compile_scope+0x4c8>
            EMIT_ARG(load_const_tok, MP_TOKEN_KW_NONE);
    91ae:	68fb      	ldr	r3, [r7, #12]
    91b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    91b2:	210e      	movs	r1, #14
    91b4:	4618      	mov	r0, r3
    91b6:	f001 f96b 	bl	a490 <mp_emit_bc_load_const_tok>
            EMIT(return_value);
    91ba:	68fb      	ldr	r3, [r7, #12]
    91bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    91be:	4618      	mov	r0, r3
    91c0:	f001 ff06 	bl	afd0 <mp_emit_bc_return_value>
    91c4:	e1a8      	b.n	9518 <compile_scope+0x4c8>
        }
    } else if (scope->kind == SCOPE_LAMBDA) {
    91c6:	68bb      	ldr	r3, [r7, #8]
    91c8:	681b      	ldr	r3, [r3, #0]
    91ca:	2b02      	cmp	r3, #2
    91cc:	d14a      	bne.n	9264 <compile_scope+0x214>
        assert(MP_PARSE_NODE_IS_STRUCT(scope->pn));
    91ce:	68bb      	ldr	r3, [r7, #8]
    91d0:	68db      	ldr	r3, [r3, #12]
    91d2:	2b00      	cmp	r3, #0
    91d4:	d005      	beq.n	91e2 <compile_scope+0x192>
    91d6:	68bb      	ldr	r3, [r7, #8]
    91d8:	68db      	ldr	r3, [r3, #12]
    91da:	f003 0303 	and.w	r3, r3, #3
    91de:	2b00      	cmp	r3, #0
    91e0:	d006      	beq.n	91f0 <compile_scope+0x1a0>
    91e2:	4b55      	ldr	r3, [pc, #340]	; (9338 <compile_scope+0x2e8>)
    91e4:	4a52      	ldr	r2, [pc, #328]	; (9330 <compile_scope+0x2e0>)
    91e6:	f640 31b9 	movw	r1, #3001	; 0xbb9
    91ea:	4852      	ldr	r0, [pc, #328]	; (9334 <compile_scope+0x2e4>)
    91ec:	f012 fa70 	bl	1b6d0 <__assert_func>
        mp_parse_node_struct_t *pns = (mp_parse_node_struct_t*)scope->pn;
    91f0:	68bb      	ldr	r3, [r7, #8]
    91f2:	68db      	ldr	r3, [r3, #12]
    91f4:	637b      	str	r3, [r7, #52]	; 0x34
        assert(MP_PARSE_NODE_STRUCT_NUM_NODES(pns) == 3);
    91f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    91f8:	685b      	ldr	r3, [r3, #4]
    91fa:	0a1b      	lsrs	r3, r3, #8
    91fc:	2b03      	cmp	r3, #3
    91fe:	d006      	beq.n	920e <compile_scope+0x1be>
    9200:	4b50      	ldr	r3, [pc, #320]	; (9344 <compile_scope+0x2f4>)
    9202:	4a4b      	ldr	r2, [pc, #300]	; (9330 <compile_scope+0x2e0>)
    9204:	f640 31bb 	movw	r1, #3003	; 0xbbb
    9208:	484a      	ldr	r0, [pc, #296]	; (9334 <compile_scope+0x2e4>)
    920a:	f012 fa61 	bl	1b6d0 <__assert_func>

        // work out number of parameters, keywords and default parameters, and add them to the id_info array
        // must be done before compiling the body so that arguments are numbered first (for LOAD_FAST etc)
        if (comp->pass == MP_PASS_SCOPE) {
    920e:	68fb      	ldr	r3, [r7, #12]
    9210:	795b      	ldrb	r3, [r3, #5]
    9212:	2b01      	cmp	r3, #1
    9214:	d109      	bne.n	922a <compile_scope+0x1da>
            comp->have_star = false;
    9216:	68fb      	ldr	r3, [r7, #12]
    9218:	2200      	movs	r2, #0
    921a:	719a      	strb	r2, [r3, #6]
            apply_to_single_or_list(comp, pns->nodes[0], PN_varargslist, compile_scope_lambda_param);
    921c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    921e:	6899      	ldr	r1, [r3, #8]
    9220:	4b49      	ldr	r3, [pc, #292]	; (9348 <compile_scope+0x2f8>)
    9222:	2246      	movs	r2, #70	; 0x46
    9224:	68f8      	ldr	r0, [r7, #12]
    9226:	f7fb feef 	bl	5008 <apply_to_single_or_list>
        }

        compile_node(comp, pns->nodes[1]); // 1 is lambda body
    922a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    922c:	68db      	ldr	r3, [r3, #12]
    922e:	4619      	mov	r1, r3
    9230:	68f8      	ldr	r0, [r7, #12]
    9232:	f7ff fcaf 	bl	8b94 <compile_node>

        // if the lambda is a generator, then we return None, not the result of the expression of the lambda
        if (scope->scope_flags & MP_SCOPE_FLAG_GENERATOR) {
    9236:	68bb      	ldr	r3, [r7, #8]
    9238:	7e1b      	ldrb	r3, [r3, #24]
    923a:	f003 0304 	and.w	r3, r3, #4
    923e:	2b00      	cmp	r3, #0
    9240:	d00a      	beq.n	9258 <compile_scope+0x208>
            EMIT(pop_top);
    9242:	68fb      	ldr	r3, [r7, #12]
    9244:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    9246:	4618      	mov	r0, r3
    9248:	f001 fb6a 	bl	a920 <mp_emit_bc_pop_top>
            EMIT_ARG(load_const_tok, MP_TOKEN_KW_NONE);
    924c:	68fb      	ldr	r3, [r7, #12]
    924e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    9250:	210e      	movs	r1, #14
    9252:	4618      	mov	r0, r3
    9254:	f001 f91c 	bl	a490 <mp_emit_bc_load_const_tok>
        }
        EMIT(return_value);
    9258:	68fb      	ldr	r3, [r7, #12]
    925a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    925c:	4618      	mov	r0, r3
    925e:	f001 feb7 	bl	afd0 <mp_emit_bc_return_value>
    9262:	e159      	b.n	9518 <compile_scope+0x4c8>
    } else if (scope->kind == SCOPE_LIST_COMP || scope->kind == SCOPE_DICT_COMP || scope->kind == SCOPE_SET_COMP || scope->kind == SCOPE_GEN_EXPR) {
    9264:	68bb      	ldr	r3, [r7, #8]
    9266:	681b      	ldr	r3, [r3, #0]
    9268:	2b03      	cmp	r3, #3
    926a:	d00c      	beq.n	9286 <compile_scope+0x236>
    926c:	68bb      	ldr	r3, [r7, #8]
    926e:	681b      	ldr	r3, [r3, #0]
    9270:	2b04      	cmp	r3, #4
    9272:	d008      	beq.n	9286 <compile_scope+0x236>
    9274:	68bb      	ldr	r3, [r7, #8]
    9276:	681b      	ldr	r3, [r3, #0]
    9278:	2b05      	cmp	r3, #5
    927a:	d004      	beq.n	9286 <compile_scope+0x236>
    927c:	68bb      	ldr	r3, [r7, #8]
    927e:	681b      	ldr	r3, [r3, #0]
    9280:	2b06      	cmp	r3, #6
    9282:	f040 80bd 	bne.w	9400 <compile_scope+0x3b0>
        // a bit of a hack at the moment

        assert(MP_PARSE_NODE_IS_STRUCT(scope->pn));
    9286:	68bb      	ldr	r3, [r7, #8]
    9288:	68db      	ldr	r3, [r3, #12]
    928a:	2b00      	cmp	r3, #0
    928c:	d005      	beq.n	929a <compile_scope+0x24a>
    928e:	68bb      	ldr	r3, [r7, #8]
    9290:	68db      	ldr	r3, [r3, #12]
    9292:	f003 0303 	and.w	r3, r3, #3
    9296:	2b00      	cmp	r3, #0
    9298:	d006      	beq.n	92a8 <compile_scope+0x258>
    929a:	4b27      	ldr	r3, [pc, #156]	; (9338 <compile_scope+0x2e8>)
    929c:	4a24      	ldr	r2, [pc, #144]	; (9330 <compile_scope+0x2e0>)
    929e:	f640 31cf 	movw	r1, #3023	; 0xbcf
    92a2:	4824      	ldr	r0, [pc, #144]	; (9334 <compile_scope+0x2e4>)
    92a4:	f012 fa14 	bl	1b6d0 <__assert_func>
        mp_parse_node_struct_t *pns = (mp_parse_node_struct_t*)scope->pn;
    92a8:	68bb      	ldr	r3, [r7, #8]
    92aa:	68db      	ldr	r3, [r3, #12]
    92ac:	627b      	str	r3, [r7, #36]	; 0x24
        assert(MP_PARSE_NODE_STRUCT_NUM_NODES(pns) == 2);
    92ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    92b0:	685b      	ldr	r3, [r3, #4]
    92b2:	0a1b      	lsrs	r3, r3, #8
    92b4:	2b02      	cmp	r3, #2
    92b6:	d006      	beq.n	92c6 <compile_scope+0x276>
    92b8:	4b24      	ldr	r3, [pc, #144]	; (934c <compile_scope+0x2fc>)
    92ba:	4a1d      	ldr	r2, [pc, #116]	; (9330 <compile_scope+0x2e0>)
    92bc:	f640 31d1 	movw	r1, #3025	; 0xbd1
    92c0:	481c      	ldr	r0, [pc, #112]	; (9334 <compile_scope+0x2e4>)
    92c2:	f012 fa05 	bl	1b6d0 <__assert_func>
        assert(MP_PARSE_NODE_IS_STRUCT_KIND(pns->nodes[1], PN_comp_for));
    92c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    92c8:	68db      	ldr	r3, [r3, #12]
    92ca:	2b00      	cmp	r3, #0
    92cc:	d00b      	beq.n	92e6 <compile_scope+0x296>
    92ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    92d0:	68db      	ldr	r3, [r3, #12]
    92d2:	f003 0303 	and.w	r3, r3, #3
    92d6:	2b00      	cmp	r3, #0
    92d8:	d105      	bne.n	92e6 <compile_scope+0x296>
    92da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    92dc:	68db      	ldr	r3, [r3, #12]
    92de:	685b      	ldr	r3, [r3, #4]
    92e0:	b2db      	uxtb	r3, r3
    92e2:	2b9f      	cmp	r3, #159	; 0x9f
    92e4:	d006      	beq.n	92f4 <compile_scope+0x2a4>
    92e6:	4b1a      	ldr	r3, [pc, #104]	; (9350 <compile_scope+0x300>)
    92e8:	4a11      	ldr	r2, [pc, #68]	; (9330 <compile_scope+0x2e0>)
    92ea:	f640 31d2 	movw	r1, #3026	; 0xbd2
    92ee:	4811      	ldr	r0, [pc, #68]	; (9334 <compile_scope+0x2e4>)
    92f0:	f012 f9ee 	bl	1b6d0 <__assert_func>
        mp_parse_node_struct_t *pns_comp_for = (mp_parse_node_struct_t*)pns->nodes[1];
    92f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    92f6:	68db      	ldr	r3, [r3, #12]
    92f8:	623b      	str	r3, [r7, #32]

        // We need a unique name for the comprehension argument (the iterator).
        // CPython uses .0, but we should be able to use anything that won't
        // clash with a user defined variable.  Best to use an existing qstr,
        // so we use the blank qstr.
        qstr qstr_arg = MP_QSTR_;
    92fa:	2301      	movs	r3, #1
    92fc:	61fb      	str	r3, [r7, #28]
        if (comp->pass == MP_PASS_SCOPE) {
    92fe:	68fb      	ldr	r3, [r7, #12]
    9300:	795b      	ldrb	r3, [r3, #5]
    9302:	2b01      	cmp	r3, #1
    9304:	d12e      	bne.n	9364 <compile_scope+0x314>
            bool added;
            id_info_t *id_info = scope_find_or_add_id(comp->scope_cur, qstr_arg, &added);
    9306:	68fb      	ldr	r3, [r7, #12]
    9308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    930a:	f107 0217 	add.w	r2, r7, #23
    930e:	69f9      	ldr	r1, [r7, #28]
    9310:	4618      	mov	r0, r3
    9312:	f7fb fc97 	bl	4c44 <scope_find_or_add_id>
    9316:	61b8      	str	r0, [r7, #24]
            assert(added);
    9318:	7dfb      	ldrb	r3, [r7, #23]
    931a:	2b00      	cmp	r3, #0
    931c:	d11c      	bne.n	9358 <compile_scope+0x308>
    931e:	4b0d      	ldr	r3, [pc, #52]	; (9354 <compile_scope+0x304>)
    9320:	4a03      	ldr	r2, [pc, #12]	; (9330 <compile_scope+0x2e0>)
    9322:	f640 31dd 	movw	r1, #3037	; 0xbdd
    9326:	4803      	ldr	r0, [pc, #12]	; (9334 <compile_scope+0x2e4>)
    9328:	f012 f9d2 	bl	1b6d0 <__assert_func>
    932c:	00020c70 	.word	0x00020c70
    9330:	0002102c 	.word	0x0002102c
    9334:	00020234 	.word	0x00020234
    9338:	00020c8c 	.word	0x00020c8c
    933c:	00020cb0 	.word	0x00020cb0
    9340:	00008ec5 	.word	0x00008ec5
    9344:	00020ce0 	.word	0x00020ce0
    9348:	00008ee9 	.word	0x00008ee9
    934c:	0002097c 	.word	0x0002097c
    9350:	000209a8 	.word	0x000209a8
    9354:	00020d0c 	.word	0x00020d0c
            id_info->kind = ID_INFO_KIND_LOCAL;
    9358:	69bb      	ldr	r3, [r7, #24]
    935a:	2202      	movs	r2, #2
    935c:	701a      	strb	r2, [r3, #0]
            scope->num_pos_args = 1;
    935e:	68bb      	ldr	r3, [r7, #8]
    9360:	2201      	movs	r2, #1
    9362:	835a      	strh	r2, [r3, #26]
        }

        if (scope->kind == SCOPE_LIST_COMP) {
    9364:	68bb      	ldr	r3, [r7, #8]
    9366:	681b      	ldr	r3, [r3, #0]
    9368:	2b03      	cmp	r3, #3
    936a:	d106      	bne.n	937a <compile_scope+0x32a>
            EMIT_ARG(build_list, 0);
    936c:	68fb      	ldr	r3, [r7, #12]
    936e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    9370:	2100      	movs	r1, #0
    9372:	4618      	mov	r0, r3
    9374:	f001 fcc2 	bl	acfc <mp_emit_bc_build_list>
    9378:	e009      	b.n	938e <compile_scope+0x33e>
        } else if (scope->kind == SCOPE_DICT_COMP) {
    937a:	68bb      	ldr	r3, [r7, #8]
    937c:	681b      	ldr	r3, [r3, #0]
    937e:	2b04      	cmp	r3, #4
    9380:	d105      	bne.n	938e <compile_scope+0x33e>
            EMIT_ARG(build_map, 0);
    9382:	68fb      	ldr	r3, [r7, #12]
    9384:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    9386:	2100      	movs	r1, #0
    9388:	4618      	mov	r0, r3
    938a:	f001 fccd 	bl	ad28 <mp_emit_bc_build_map>
        #endif
        }

        // There are 4 slots on the stack for the iterator, and the first one is
        // NULL to indicate that the second one points to the iterator object.
        if (scope->kind == SCOPE_GEN_EXPR) {
    938e:	68bb      	ldr	r3, [r7, #8]
    9390:	681b      	ldr	r3, [r3, #0]
    9392:	2b06      	cmp	r3, #6
    9394:	d113      	bne.n	93be <compile_scope+0x36e>
            // TODO static assert that MP_OBJ_ITER_BUF_NSLOTS == 4
            EMIT(load_null);
    9396:	68fb      	ldr	r3, [r7, #12]
    9398:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    939a:	4618      	mov	r0, r3
    939c:	f001 f8fa 	bl	a594 <mp_emit_bc_load_null>
            compile_load_id(comp, qstr_arg);
    93a0:	69f9      	ldr	r1, [r7, #28]
    93a2:	68f8      	ldr	r0, [r7, #12]
    93a4:	f7fb fe9a 	bl	50dc <compile_load_id>
            EMIT(load_null);
    93a8:	68fb      	ldr	r3, [r7, #12]
    93aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    93ac:	4618      	mov	r0, r3
    93ae:	f001 f8f1 	bl	a594 <mp_emit_bc_load_null>
            EMIT(load_null);
    93b2:	68fb      	ldr	r3, [r7, #12]
    93b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    93b6:	4618      	mov	r0, r3
    93b8:	f001 f8ec 	bl	a594 <mp_emit_bc_load_null>
    93bc:	e009      	b.n	93d2 <compile_scope+0x382>
        } else {
            compile_load_id(comp, qstr_arg);
    93be:	69f9      	ldr	r1, [r7, #28]
    93c0:	68f8      	ldr	r0, [r7, #12]
    93c2:	f7fb fe8b 	bl	50dc <compile_load_id>
            EMIT_ARG(get_iter, true);
    93c6:	68fb      	ldr	r3, [r7, #12]
    93c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    93ca:	2101      	movs	r1, #1
    93cc:	4618      	mov	r0, r3
    93ce:	f001 fbd9 	bl	ab84 <mp_emit_bc_get_iter>
        }

        compile_scope_comp_iter(comp, pns_comp_for, pns->nodes[0], 0);
    93d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    93d4:	689a      	ldr	r2, [r3, #8]
    93d6:	2300      	movs	r3, #0
    93d8:	6a39      	ldr	r1, [r7, #32]
    93da:	68f8      	ldr	r0, [r7, #12]
    93dc:	f7ff fd96 	bl	8f0c <compile_scope_comp_iter>

        if (scope->kind == SCOPE_GEN_EXPR) {
    93e0:	68bb      	ldr	r3, [r7, #8]
    93e2:	681b      	ldr	r3, [r3, #0]
    93e4:	2b06      	cmp	r3, #6
    93e6:	d105      	bne.n	93f4 <compile_scope+0x3a4>
            EMIT_ARG(load_const_tok, MP_TOKEN_KW_NONE);
    93e8:	68fb      	ldr	r3, [r7, #12]
    93ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    93ec:	210e      	movs	r1, #14
    93ee:	4618      	mov	r0, r3
    93f0:	f001 f84e 	bl	a490 <mp_emit_bc_load_const_tok>
        }
        EMIT(return_value);
    93f4:	68fb      	ldr	r3, [r7, #12]
    93f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    93f8:	4618      	mov	r0, r3
    93fa:	f001 fde9 	bl	afd0 <mp_emit_bc_return_value>
    } else if (scope->kind == SCOPE_LIST_COMP || scope->kind == SCOPE_DICT_COMP || scope->kind == SCOPE_SET_COMP || scope->kind == SCOPE_GEN_EXPR) {
    93fe:	e08b      	b.n	9518 <compile_scope+0x4c8>
    } else {
        assert(scope->kind == SCOPE_CLASS);
    9400:	68bb      	ldr	r3, [r7, #8]
    9402:	681b      	ldr	r3, [r3, #0]
    9404:	2b01      	cmp	r3, #1
    9406:	d006      	beq.n	9416 <compile_scope+0x3c6>
    9408:	4b4d      	ldr	r3, [pc, #308]	; (9540 <compile_scope+0x4f0>)
    940a:	4a4e      	ldr	r2, [pc, #312]	; (9544 <compile_scope+0x4f4>)
    940c:	f44f 6140 	mov.w	r1, #3072	; 0xc00
    9410:	484d      	ldr	r0, [pc, #308]	; (9548 <compile_scope+0x4f8>)
    9412:	f012 f95d 	bl	1b6d0 <__assert_func>
        assert(MP_PARSE_NODE_IS_STRUCT(scope->pn));
    9416:	68bb      	ldr	r3, [r7, #8]
    9418:	68db      	ldr	r3, [r3, #12]
    941a:	2b00      	cmp	r3, #0
    941c:	d005      	beq.n	942a <compile_scope+0x3da>
    941e:	68bb      	ldr	r3, [r7, #8]
    9420:	68db      	ldr	r3, [r3, #12]
    9422:	f003 0303 	and.w	r3, r3, #3
    9426:	2b00      	cmp	r3, #0
    9428:	d006      	beq.n	9438 <compile_scope+0x3e8>
    942a:	4b48      	ldr	r3, [pc, #288]	; (954c <compile_scope+0x4fc>)
    942c:	4a45      	ldr	r2, [pc, #276]	; (9544 <compile_scope+0x4f4>)
    942e:	f640 4101 	movw	r1, #3073	; 0xc01
    9432:	4845      	ldr	r0, [pc, #276]	; (9548 <compile_scope+0x4f8>)
    9434:	f012 f94c 	bl	1b6d0 <__assert_func>
        mp_parse_node_struct_t *pns = (mp_parse_node_struct_t*)scope->pn;
    9438:	68bb      	ldr	r3, [r7, #8]
    943a:	68db      	ldr	r3, [r3, #12]
    943c:	633b      	str	r3, [r7, #48]	; 0x30
        assert(MP_PARSE_NODE_STRUCT_KIND(pns) == PN_classdef);
    943e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    9440:	685b      	ldr	r3, [r3, #4]
    9442:	b2db      	uxtb	r3, r3
    9444:	2b33      	cmp	r3, #51	; 0x33
    9446:	d006      	beq.n	9456 <compile_scope+0x406>
    9448:	4b41      	ldr	r3, [pc, #260]	; (9550 <compile_scope+0x500>)
    944a:	4a3e      	ldr	r2, [pc, #248]	; (9544 <compile_scope+0x4f4>)
    944c:	f640 4103 	movw	r1, #3075	; 0xc03
    9450:	483d      	ldr	r0, [pc, #244]	; (9548 <compile_scope+0x4f8>)
    9452:	f012 f93d 	bl	1b6d0 <__assert_func>

        if (comp->pass == MP_PASS_SCOPE) {
    9456:	68fb      	ldr	r3, [r7, #12]
    9458:	795b      	ldrb	r3, [r3, #5]
    945a:	2b01      	cmp	r3, #1
    945c:	d114      	bne.n	9488 <compile_scope+0x438>
            bool added;
            id_info_t *id_info = scope_find_or_add_id(scope, MP_QSTR___class__, &added);
    945e:	f107 0316 	add.w	r3, r7, #22
    9462:	461a      	mov	r2, r3
    9464:	2106      	movs	r1, #6
    9466:	68b8      	ldr	r0, [r7, #8]
    9468:	f7fb fbec 	bl	4c44 <scope_find_or_add_id>
    946c:	62f8      	str	r0, [r7, #44]	; 0x2c
            assert(added);
    946e:	7dbb      	ldrb	r3, [r7, #22]
    9470:	2b00      	cmp	r3, #0
    9472:	d106      	bne.n	9482 <compile_scope+0x432>
    9474:	4b37      	ldr	r3, [pc, #220]	; (9554 <compile_scope+0x504>)
    9476:	4a33      	ldr	r2, [pc, #204]	; (9544 <compile_scope+0x4f4>)
    9478:	f640 4108 	movw	r1, #3080	; 0xc08
    947c:	4832      	ldr	r0, [pc, #200]	; (9548 <compile_scope+0x4f8>)
    947e:	f012 f927 	bl	1b6d0 <__assert_func>
            id_info->kind = ID_INFO_KIND_LOCAL;
    9482:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    9484:	2202      	movs	r2, #2
    9486:	701a      	strb	r2, [r3, #0]
        }

        compile_load_id(comp, MP_QSTR___name__);
    9488:	211c      	movs	r1, #28
    948a:	68f8      	ldr	r0, [r7, #12]
    948c:	f7fb fe26 	bl	50dc <compile_load_id>
        compile_store_id(comp, MP_QSTR___module__);
    9490:	211b      	movs	r1, #27
    9492:	68f8      	ldr	r0, [r7, #12]
    9494:	f7fb fe40 	bl	5118 <compile_store_id>
        EMIT_ARG(load_const_str, MP_PARSE_NODE_LEAF_ARG(pns->nodes[0])); // 0 is class name
    9498:	68fb      	ldr	r3, [r7, #12]
    949a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    949c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    949e:	689b      	ldr	r3, [r3, #8]
    94a0:	091b      	lsrs	r3, r3, #4
    94a2:	4619      	mov	r1, r3
    94a4:	4610      	mov	r0, r2
    94a6:	f001 f851 	bl	a54c <mp_emit_bc_load_const_str>
        compile_store_id(comp, MP_QSTR___qualname__);
    94aa:	2120      	movs	r1, #32
    94ac:	68f8      	ldr	r0, [r7, #12]
    94ae:	f7fb fe33 	bl	5118 <compile_store_id>

        check_for_doc_string(comp, pns->nodes[2]);
    94b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    94b4:	691b      	ldr	r3, [r3, #16]
    94b6:	4619      	mov	r1, r3
    94b8:	68f8      	ldr	r0, [r7, #12]
    94ba:	f7ff fdbd 	bl	9038 <check_for_doc_string>
        compile_node(comp, pns->nodes[2]); // 2 is class body
    94be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    94c0:	691b      	ldr	r3, [r3, #16]
    94c2:	4619      	mov	r1, r3
    94c4:	68f8      	ldr	r0, [r7, #12]
    94c6:	f7ff fb65 	bl	8b94 <compile_node>

        id_info_t *id = scope_find(scope, MP_QSTR___class__);
    94ca:	2106      	movs	r1, #6
    94cc:	68b8      	ldr	r0, [r7, #8]
    94ce:	f7fb fc05 	bl	4cdc <scope_find>
    94d2:	62b8      	str	r0, [r7, #40]	; 0x28
        assert(id != NULL);
    94d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
    94d6:	2b00      	cmp	r3, #0
    94d8:	d106      	bne.n	94e8 <compile_scope+0x498>
    94da:	4b1f      	ldr	r3, [pc, #124]	; (9558 <compile_scope+0x508>)
    94dc:	4a19      	ldr	r2, [pc, #100]	; (9544 <compile_scope+0x4f4>)
    94de:	f640 4115 	movw	r1, #3093	; 0xc15
    94e2:	4819      	ldr	r0, [pc, #100]	; (9548 <compile_scope+0x4f8>)
    94e4:	f012 f8f4 	bl	1b6d0 <__assert_func>
        if (id->kind == ID_INFO_KIND_LOCAL) {
    94e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
    94ea:	781b      	ldrb	r3, [r3, #0]
    94ec:	2b02      	cmp	r3, #2
    94ee:	d106      	bne.n	94fe <compile_scope+0x4ae>
            EMIT_ARG(load_const_tok, MP_TOKEN_KW_NONE);
    94f0:	68fb      	ldr	r3, [r7, #12]
    94f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    94f4:	210e      	movs	r1, #14
    94f6:	4618      	mov	r0, r3
    94f8:	f000 ffca 	bl	a490 <mp_emit_bc_load_const_tok>
    94fc:	e007      	b.n	950e <compile_scope+0x4be>
        } else {
            EMIT_LOAD_FAST(MP_QSTR___class__, id->local_num);
    94fe:	68fb      	ldr	r3, [r7, #12]
    9500:	6a98      	ldr	r0, [r3, #40]	; 0x28
    9502:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9504:	885b      	ldrh	r3, [r3, #2]
    9506:	461a      	mov	r2, r3
    9508:	2106      	movs	r1, #6
    950a:	f001 f853 	bl	a5b4 <mp_emit_bc_load_fast>
        }
        EMIT(return_value);
    950e:	68fb      	ldr	r3, [r7, #12]
    9510:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    9512:	4618      	mov	r0, r3
    9514:	f001 fd5c 	bl	afd0 <mp_emit_bc_return_value>
    }

    EMIT(end_pass);
    9518:	68fb      	ldr	r3, [r7, #12]
    951a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    951c:	4618      	mov	r0, r3
    951e:	f000 fe65 	bl	a1ec <mp_emit_bc_end_pass>

    // make sure we match all the exception levels
    assert(comp->cur_except_level == 0);
    9522:	68fb      	ldr	r3, [r7, #12]
    9524:	8b9b      	ldrh	r3, [r3, #28]
    9526:	2b00      	cmp	r3, #0
    9528:	d006      	beq.n	9538 <compile_scope+0x4e8>
    952a:	4b0c      	ldr	r3, [pc, #48]	; (955c <compile_scope+0x50c>)
    952c:	4a05      	ldr	r2, [pc, #20]	; (9544 <compile_scope+0x4f4>)
    952e:	f640 4121 	movw	r1, #3105	; 0xc21
    9532:	4805      	ldr	r0, [pc, #20]	; (9548 <compile_scope+0x4f8>)
    9534:	f012 f8cc 	bl	1b6d0 <__assert_func>
}
    9538:	bf00      	nop
    953a:	3740      	adds	r7, #64	; 0x40
    953c:	46bd      	mov	sp, r7
    953e:	bd80      	pop	{r7, pc}
    9540:	00020d14 	.word	0x00020d14
    9544:	0002102c 	.word	0x0002102c
    9548:	00020234 	.word	0x00020234
    954c:	00020c8c 	.word	0x00020c8c
    9550:	00020d30 	.word	0x00020d30
    9554:	00020d0c 	.word	0x00020d0c
    9558:	00020d60 	.word	0x00020d60
    955c:	00020d6c 	.word	0x00020d6c

00009560 <scope_compute_things>:
        comp->compile_error_line = pns->source_line;
    }
}
#endif

STATIC void scope_compute_things(scope_t *scope) {
    9560:	b580      	push	{r7, lr}
    9562:	b092      	sub	sp, #72	; 0x48
    9564:	af00      	add	r7, sp, #0
    9566:	6078      	str	r0, [r7, #4]
    // in MicroPython we put the *x parameter after all other parameters (except **y)
    if (scope->scope_flags & MP_SCOPE_FLAG_VARARGS) {
    9568:	687b      	ldr	r3, [r7, #4]
    956a:	7e1b      	ldrb	r3, [r3, #24]
    956c:	f003 0301 	and.w	r3, r3, #1
    9570:	2b00      	cmp	r3, #0
    9572:	d03c      	beq.n	95ee <scope_compute_things+0x8e>
        id_info_t *id_param = NULL;
    9574:	2300      	movs	r3, #0
    9576:	647b      	str	r3, [r7, #68]	; 0x44
        for (int i = scope->id_info_len - 1; i >= 0; i--) {
    9578:	687b      	ldr	r3, [r7, #4]
    957a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    957c:	3b01      	subs	r3, #1
    957e:	643b      	str	r3, [r7, #64]	; 0x40
    9580:	e030      	b.n	95e4 <scope_compute_things+0x84>
            id_info_t *id = &scope->id_info[i];
    9582:	687b      	ldr	r3, [r7, #4]
    9584:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    9586:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    9588:	00db      	lsls	r3, r3, #3
    958a:	4413      	add	r3, r2
    958c:	627b      	str	r3, [r7, #36]	; 0x24
            if (id->flags & ID_FLAG_IS_STAR_PARAM) {
    958e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    9590:	785b      	ldrb	r3, [r3, #1]
    9592:	f003 0302 	and.w	r3, r3, #2
    9596:	2b00      	cmp	r3, #0
    9598:	d018      	beq.n	95cc <scope_compute_things+0x6c>
                if (id_param != NULL) {
    959a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    959c:	2b00      	cmp	r3, #0
    959e:	d025      	beq.n	95ec <scope_compute_things+0x8c>
                    // swap star param with last param
                    id_info_t temp = *id_param; *id_param = *id; *id = temp;
    95a0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    95a2:	f107 0308 	add.w	r3, r7, #8
    95a6:	e892 0003 	ldmia.w	r2, {r0, r1}
    95aa:	e883 0003 	stmia.w	r3, {r0, r1}
    95ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    95b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    95b2:	e892 0003 	ldmia.w	r2, {r0, r1}
    95b6:	e883 0003 	stmia.w	r3, {r0, r1}
    95ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    95bc:	461a      	mov	r2, r3
    95be:	f107 0308 	add.w	r3, r7, #8
    95c2:	e893 0003 	ldmia.w	r3, {r0, r1}
    95c6:	e882 0003 	stmia.w	r2, {r0, r1}
                }
                break;
    95ca:	e00f      	b.n	95ec <scope_compute_things+0x8c>
            } else if (id_param == NULL && id->flags == ID_FLAG_IS_PARAM) {
    95cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    95ce:	2b00      	cmp	r3, #0
    95d0:	d105      	bne.n	95de <scope_compute_things+0x7e>
    95d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    95d4:	785b      	ldrb	r3, [r3, #1]
    95d6:	2b01      	cmp	r3, #1
    95d8:	d101      	bne.n	95de <scope_compute_things+0x7e>
                id_param = id;
    95da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    95dc:	647b      	str	r3, [r7, #68]	; 0x44
        for (int i = scope->id_info_len - 1; i >= 0; i--) {
    95de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    95e0:	3b01      	subs	r3, #1
    95e2:	643b      	str	r3, [r7, #64]	; 0x40
    95e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    95e6:	2b00      	cmp	r3, #0
    95e8:	dacb      	bge.n	9582 <scope_compute_things+0x22>
    95ea:	e000      	b.n	95ee <scope_compute_things+0x8e>
                break;
    95ec:	bf00      	nop
        }
    }

    // in functions, turn implicit globals into explicit globals
    // compute the index of each local
    scope->num_locals = 0;
    95ee:	687b      	ldr	r3, [r7, #4]
    95f0:	2200      	movs	r2, #0
    95f2:	841a      	strh	r2, [r3, #32]
    for (int i = 0; i < scope->id_info_len; i++) {
    95f4:	2300      	movs	r3, #0
    95f6:	63fb      	str	r3, [r7, #60]	; 0x3c
    95f8:	e02f      	b.n	965a <scope_compute_things+0xfa>
        id_info_t *id = &scope->id_info[i];
    95fa:	687b      	ldr	r3, [r7, #4]
    95fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    95fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    9600:	00db      	lsls	r3, r3, #3
    9602:	4413      	add	r3, r2
    9604:	623b      	str	r3, [r7, #32]
        if (scope->kind == SCOPE_CLASS && id->qst == MP_QSTR___class__) {
    9606:	687b      	ldr	r3, [r7, #4]
    9608:	681b      	ldr	r3, [r3, #0]
    960a:	2b01      	cmp	r3, #1
    960c:	d103      	bne.n	9616 <scope_compute_things+0xb6>
    960e:	6a3b      	ldr	r3, [r7, #32]
    9610:	685b      	ldr	r3, [r3, #4]
    9612:	2b06      	cmp	r3, #6
    9614:	d01d      	beq.n	9652 <scope_compute_things+0xf2>
            // __class__ is not counted as a local; if it's used then it becomes a ID_INFO_KIND_CELL
            continue;
        }
        if (SCOPE_IS_FUNC_LIKE(scope->kind) && id->kind == ID_INFO_KIND_GLOBAL_IMPLICIT) {
    9616:	687b      	ldr	r3, [r7, #4]
    9618:	681b      	ldr	r3, [r3, #0]
    961a:	2b01      	cmp	r3, #1
    961c:	d906      	bls.n	962c <scope_compute_things+0xcc>
    961e:	6a3b      	ldr	r3, [r7, #32]
    9620:	781b      	ldrb	r3, [r3, #0]
    9622:	2b00      	cmp	r3, #0
    9624:	d102      	bne.n	962c <scope_compute_things+0xcc>
            id->kind = ID_INFO_KIND_GLOBAL_EXPLICIT;
    9626:	6a3b      	ldr	r3, [r7, #32]
    9628:	2201      	movs	r2, #1
    962a:	701a      	strb	r2, [r3, #0]
        }
        // params always count for 1 local, even if they are a cell
        if (id->kind == ID_INFO_KIND_LOCAL || (id->flags & ID_FLAG_IS_PARAM)) {
    962c:	6a3b      	ldr	r3, [r7, #32]
    962e:	781b      	ldrb	r3, [r3, #0]
    9630:	2b02      	cmp	r3, #2
    9632:	d005      	beq.n	9640 <scope_compute_things+0xe0>
    9634:	6a3b      	ldr	r3, [r7, #32]
    9636:	785b      	ldrb	r3, [r3, #1]
    9638:	f003 0301 	and.w	r3, r3, #1
    963c:	2b00      	cmp	r3, #0
    963e:	d009      	beq.n	9654 <scope_compute_things+0xf4>
            id->local_num = scope->num_locals++;
    9640:	687b      	ldr	r3, [r7, #4]
    9642:	8c1b      	ldrh	r3, [r3, #32]
    9644:	1c5a      	adds	r2, r3, #1
    9646:	b291      	uxth	r1, r2
    9648:	687a      	ldr	r2, [r7, #4]
    964a:	8411      	strh	r1, [r2, #32]
    964c:	6a3a      	ldr	r2, [r7, #32]
    964e:	8053      	strh	r3, [r2, #2]
    9650:	e000      	b.n	9654 <scope_compute_things+0xf4>
            continue;
    9652:	bf00      	nop
    for (int i = 0; i < scope->id_info_len; i++) {
    9654:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    9656:	3301      	adds	r3, #1
    9658:	63fb      	str	r3, [r7, #60]	; 0x3c
    965a:	687b      	ldr	r3, [r7, #4]
    965c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    965e:	461a      	mov	r2, r3
    9660:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    9662:	429a      	cmp	r2, r3
    9664:	dcc9      	bgt.n	95fa <scope_compute_things+0x9a>
        }
    }

    // compute the index of cell vars
    for (int i = 0; i < scope->id_info_len; i++) {
    9666:	2300      	movs	r3, #0
    9668:	63bb      	str	r3, [r7, #56]	; 0x38
    966a:	e01c      	b.n	96a6 <scope_compute_things+0x146>
        id_info_t *id = &scope->id_info[i];
    966c:	687b      	ldr	r3, [r7, #4]
    966e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    9670:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    9672:	00db      	lsls	r3, r3, #3
    9674:	4413      	add	r3, r2
    9676:	61fb      	str	r3, [r7, #28]
        // in MicroPython the cells come right after the fast locals
        // parameters are not counted here, since they remain at the start
        // of the locals, even if they are cell vars
        if (id->kind == ID_INFO_KIND_CELL && !(id->flags & ID_FLAG_IS_PARAM)) {
    9678:	69fb      	ldr	r3, [r7, #28]
    967a:	781b      	ldrb	r3, [r3, #0]
    967c:	2b03      	cmp	r3, #3
    967e:	d10f      	bne.n	96a0 <scope_compute_things+0x140>
    9680:	69fb      	ldr	r3, [r7, #28]
    9682:	785b      	ldrb	r3, [r3, #1]
    9684:	f003 0301 	and.w	r3, r3, #1
    9688:	2b00      	cmp	r3, #0
    968a:	d109      	bne.n	96a0 <scope_compute_things+0x140>
            id->local_num = scope->num_locals;
    968c:	687b      	ldr	r3, [r7, #4]
    968e:	8c1a      	ldrh	r2, [r3, #32]
    9690:	69fb      	ldr	r3, [r7, #28]
    9692:	805a      	strh	r2, [r3, #2]
            scope->num_locals += 1;
    9694:	687b      	ldr	r3, [r7, #4]
    9696:	8c1b      	ldrh	r3, [r3, #32]
    9698:	3301      	adds	r3, #1
    969a:	b29a      	uxth	r2, r3
    969c:	687b      	ldr	r3, [r7, #4]
    969e:	841a      	strh	r2, [r3, #32]
    for (int i = 0; i < scope->id_info_len; i++) {
    96a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    96a2:	3301      	adds	r3, #1
    96a4:	63bb      	str	r3, [r7, #56]	; 0x38
    96a6:	687b      	ldr	r3, [r7, #4]
    96a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    96aa:	461a      	mov	r2, r3
    96ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    96ae:	429a      	cmp	r2, r3
    96b0:	dcdc      	bgt.n	966c <scope_compute_things+0x10c>
        }
    }

    // compute the index of free vars
    // make sure they are in the order of the parent scope
    if (scope->parent != NULL) {
    96b2:	687b      	ldr	r3, [r7, #4]
    96b4:	685b      	ldr	r3, [r3, #4]
    96b6:	2b00      	cmp	r3, #0
    96b8:	f000 8085 	beq.w	97c6 <scope_compute_things+0x266>
        int num_free = 0;
    96bc:	2300      	movs	r3, #0
    96be:	637b      	str	r3, [r7, #52]	; 0x34
        for (int i = 0; i < scope->parent->id_info_len; i++) {
    96c0:	2300      	movs	r3, #0
    96c2:	633b      	str	r3, [r7, #48]	; 0x30
    96c4:	e041      	b.n	974a <scope_compute_things+0x1ea>
            id_info_t *id = &scope->parent->id_info[i];
    96c6:	687b      	ldr	r3, [r7, #4]
    96c8:	685b      	ldr	r3, [r3, #4]
    96ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    96cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    96ce:	00db      	lsls	r3, r3, #3
    96d0:	4413      	add	r3, r2
    96d2:	61bb      	str	r3, [r7, #24]
            if (id->kind == ID_INFO_KIND_CELL || id->kind == ID_INFO_KIND_FREE) {
    96d4:	69bb      	ldr	r3, [r7, #24]
    96d6:	781b      	ldrb	r3, [r3, #0]
    96d8:	2b03      	cmp	r3, #3
    96da:	d003      	beq.n	96e4 <scope_compute_things+0x184>
    96dc:	69bb      	ldr	r3, [r7, #24]
    96de:	781b      	ldrb	r3, [r3, #0]
    96e0:	2b04      	cmp	r3, #4
    96e2:	d12f      	bne.n	9744 <scope_compute_things+0x1e4>
                for (int j = 0; j < scope->id_info_len; j++) {
    96e4:	2300      	movs	r3, #0
    96e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    96e8:	e026      	b.n	9738 <scope_compute_things+0x1d8>
                    id_info_t *id2 = &scope->id_info[j];
    96ea:	687b      	ldr	r3, [r7, #4]
    96ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    96ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    96f0:	00db      	lsls	r3, r3, #3
    96f2:	4413      	add	r3, r2
    96f4:	617b      	str	r3, [r7, #20]
                    if (id2->kind == ID_INFO_KIND_FREE && id->qst == id2->qst) {
    96f6:	697b      	ldr	r3, [r7, #20]
    96f8:	781b      	ldrb	r3, [r3, #0]
    96fa:	2b04      	cmp	r3, #4
    96fc:	d119      	bne.n	9732 <scope_compute_things+0x1d2>
    96fe:	69bb      	ldr	r3, [r7, #24]
    9700:	685a      	ldr	r2, [r3, #4]
    9702:	697b      	ldr	r3, [r7, #20]
    9704:	685b      	ldr	r3, [r3, #4]
    9706:	429a      	cmp	r2, r3
    9708:	d113      	bne.n	9732 <scope_compute_things+0x1d2>
                        assert(!(id2->flags & ID_FLAG_IS_PARAM)); // free vars should not be params
    970a:	697b      	ldr	r3, [r7, #20]
    970c:	785b      	ldrb	r3, [r3, #1]
    970e:	f003 0301 	and.w	r3, r3, #1
    9712:	2b00      	cmp	r3, #0
    9714:	d006      	beq.n	9724 <scope_compute_things+0x1c4>
    9716:	4b2e      	ldr	r3, [pc, #184]	; (97d0 <scope_compute_things+0x270>)
    9718:	4a2e      	ldr	r2, [pc, #184]	; (97d4 <scope_compute_things+0x274>)
    971a:	f640 41ff 	movw	r1, #3327	; 0xcff
    971e:	482e      	ldr	r0, [pc, #184]	; (97d8 <scope_compute_things+0x278>)
    9720:	f011 ffd6 	bl	1b6d0 <__assert_func>
                        // in MicroPython the frees come first, before the params
                        id2->local_num = num_free;
    9724:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    9726:	b29a      	uxth	r2, r3
    9728:	697b      	ldr	r3, [r7, #20]
    972a:	805a      	strh	r2, [r3, #2]
                        num_free += 1;
    972c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    972e:	3301      	adds	r3, #1
    9730:	637b      	str	r3, [r7, #52]	; 0x34
                for (int j = 0; j < scope->id_info_len; j++) {
    9732:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    9734:	3301      	adds	r3, #1
    9736:	62fb      	str	r3, [r7, #44]	; 0x2c
    9738:	687b      	ldr	r3, [r7, #4]
    973a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    973c:	461a      	mov	r2, r3
    973e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    9740:	429a      	cmp	r2, r3
    9742:	dcd2      	bgt.n	96ea <scope_compute_things+0x18a>
        for (int i = 0; i < scope->parent->id_info_len; i++) {
    9744:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    9746:	3301      	adds	r3, #1
    9748:	633b      	str	r3, [r7, #48]	; 0x30
    974a:	687b      	ldr	r3, [r7, #4]
    974c:	685b      	ldr	r3, [r3, #4]
    974e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    9750:	461a      	mov	r2, r3
    9752:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    9754:	429a      	cmp	r2, r3
    9756:	dcb6      	bgt.n	96c6 <scope_compute_things+0x166>
                    }
                }
            }
        }
        // in MicroPython shift all other locals after the free locals
        if (num_free > 0) {
    9758:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    975a:	2b00      	cmp	r3, #0
    975c:	dd33      	ble.n	97c6 <scope_compute_things+0x266>
            for (int i = 0; i < scope->id_info_len; i++) {
    975e:	2300      	movs	r3, #0
    9760:	62bb      	str	r3, [r7, #40]	; 0x28
    9762:	e01a      	b.n	979a <scope_compute_things+0x23a>
                id_info_t *id = &scope->id_info[i];
    9764:	687b      	ldr	r3, [r7, #4]
    9766:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    9768:	6abb      	ldr	r3, [r7, #40]	; 0x28
    976a:	00db      	lsls	r3, r3, #3
    976c:	4413      	add	r3, r2
    976e:	613b      	str	r3, [r7, #16]
                if (id->kind != ID_INFO_KIND_FREE || (id->flags & ID_FLAG_IS_PARAM)) {
    9770:	693b      	ldr	r3, [r7, #16]
    9772:	781b      	ldrb	r3, [r3, #0]
    9774:	2b04      	cmp	r3, #4
    9776:	d105      	bne.n	9784 <scope_compute_things+0x224>
    9778:	693b      	ldr	r3, [r7, #16]
    977a:	785b      	ldrb	r3, [r3, #1]
    977c:	f003 0301 	and.w	r3, r3, #1
    9780:	2b00      	cmp	r3, #0
    9782:	d007      	beq.n	9794 <scope_compute_things+0x234>
                    id->local_num += num_free;
    9784:	693b      	ldr	r3, [r7, #16]
    9786:	885a      	ldrh	r2, [r3, #2]
    9788:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    978a:	b29b      	uxth	r3, r3
    978c:	4413      	add	r3, r2
    978e:	b29a      	uxth	r2, r3
    9790:	693b      	ldr	r3, [r7, #16]
    9792:	805a      	strh	r2, [r3, #2]
            for (int i = 0; i < scope->id_info_len; i++) {
    9794:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9796:	3301      	adds	r3, #1
    9798:	62bb      	str	r3, [r7, #40]	; 0x28
    979a:	687b      	ldr	r3, [r7, #4]
    979c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    979e:	461a      	mov	r2, r3
    97a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
    97a2:	429a      	cmp	r2, r3
    97a4:	dcde      	bgt.n	9764 <scope_compute_things+0x204>
                }
            }
            scope->num_pos_args += num_free; // free vars are counted as params for passing them into the function
    97a6:	687b      	ldr	r3, [r7, #4]
    97a8:	8b5a      	ldrh	r2, [r3, #26]
    97aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    97ac:	b29b      	uxth	r3, r3
    97ae:	4413      	add	r3, r2
    97b0:	b29a      	uxth	r2, r3
    97b2:	687b      	ldr	r3, [r7, #4]
    97b4:	835a      	strh	r2, [r3, #26]
            scope->num_locals += num_free;
    97b6:	687b      	ldr	r3, [r7, #4]
    97b8:	8c1a      	ldrh	r2, [r3, #32]
    97ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    97bc:	b29b      	uxth	r3, r3
    97be:	4413      	add	r3, r2
    97c0:	b29a      	uxth	r2, r3
    97c2:	687b      	ldr	r3, [r7, #4]
    97c4:	841a      	strh	r2, [r3, #32]
        }
    }
}
    97c6:	bf00      	nop
    97c8:	3748      	adds	r7, #72	; 0x48
    97ca:	46bd      	mov	sp, r7
    97cc:	bd80      	pop	{r7, pc}
    97ce:	bf00      	nop
    97d0:	00020d88 	.word	0x00020d88
    97d4:	0002103c 	.word	0x0002103c
    97d8:	00020234 	.word	0x00020234

000097dc <mp_compile_to_raw_code>:

#if !MICROPY_PERSISTENT_CODE_SAVE
STATIC
#endif
mp_raw_code_t *mp_compile_to_raw_code(mp_parse_tree_t *parse_tree, qstr source_file, uint emit_opt, bool is_repl) {
    97dc:	b580      	push	{r7, lr}
    97de:	b09a      	sub	sp, #104	; 0x68
    97e0:	af00      	add	r7, sp, #0
    97e2:	60f8      	str	r0, [r7, #12]
    97e4:	60b9      	str	r1, [r7, #8]
    97e6:	607a      	str	r2, [r7, #4]
    97e8:	70fb      	strb	r3, [r7, #3]
    // put compiler state on the stack, it's relatively small
    compiler_t comp_state = {0};
    97ea:	f107 0314 	add.w	r3, r7, #20
    97ee:	222c      	movs	r2, #44	; 0x2c
    97f0:	2100      	movs	r1, #0
    97f2:	4618      	mov	r0, r3
    97f4:	f013 fadc 	bl	1cdb0 <memset>
    compiler_t *comp = &comp_state;
    97f8:	f107 0314 	add.w	r3, r7, #20
    97fc:	653b      	str	r3, [r7, #80]	; 0x50

    comp->source_file = source_file;
    97fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    9800:	68ba      	ldr	r2, [r7, #8]
    9802:	601a      	str	r2, [r3, #0]
    comp->is_repl = is_repl;
    9804:	78fa      	ldrb	r2, [r7, #3]
    9806:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    9808:	711a      	strb	r2, [r3, #4]
    comp->break_label = INVALID_LABEL;
    980a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    980c:	f64f 72ff 	movw	r2, #65535	; 0xffff
    9810:	831a      	strh	r2, [r3, #24]
    comp->continue_label = INVALID_LABEL;
    9812:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    9814:	f64f 72ff 	movw	r2, #65535	; 0xffff
    9818:	835a      	strh	r2, [r3, #26]

    // create the module scope
    scope_t *module_scope = scope_new_and_link(comp, SCOPE_MODULE, parse_tree->root, emit_opt);
    981a:	68fb      	ldr	r3, [r7, #12]
    981c:	681a      	ldr	r2, [r3, #0]
    981e:	687b      	ldr	r3, [r7, #4]
    9820:	2100      	movs	r1, #0
    9822:	6d38      	ldr	r0, [r7, #80]	; 0x50
    9824:	f7fb fbbe 	bl	4fa4 <scope_new_and_link>
    9828:	64f8      	str	r0, [r7, #76]	; 0x4c

    // create standard emitter; it's used at least for MP_PASS_SCOPE
    emit_t *emit_bc = emit_bc_new();
    982a:	f000 f94f 	bl	9acc <emit_bc_new>
    982e:	64b8      	str	r0, [r7, #72]	; 0x48

    // compile pass 1
    comp->emit = emit_bc;
    9830:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    9832:	6cba      	ldr	r2, [r7, #72]	; 0x48
    9834:	629a      	str	r2, [r3, #40]	; 0x28
    #if MICROPY_EMIT_NATIVE
    comp->emit_method_table = &emit_bc_method_table;
    #endif
    uint max_num_labels = 0;
    9836:	2300      	movs	r3, #0
    9838:	667b      	str	r3, [r7, #100]	; 0x64
    for (scope_t *s = comp->scope_head; s != NULL && comp->compile_error == MP_OBJ_NULL; s = s->next) {
    983a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    983c:	6a1b      	ldr	r3, [r3, #32]
    983e:	663b      	str	r3, [r7, #96]	; 0x60
    9840:	e00f      	b.n	9862 <mp_compile_to_raw_code+0x86>
        #if MICROPY_EMIT_INLINE_ASM
        } else if (s->emit_options == MP_EMIT_OPT_ASM) {
            compile_scope_inline_asm(comp, s, MP_PASS_SCOPE);
        #endif
        } else {
            compile_scope(comp, s, MP_PASS_SCOPE);
    9842:	2201      	movs	r2, #1
    9844:	6e39      	ldr	r1, [r7, #96]	; 0x60
    9846:	6d38      	ldr	r0, [r7, #80]	; 0x50
    9848:	f7ff fc02 	bl	9050 <compile_scope>
        }

        // update maximim number of labels needed
        if (comp->next_label > max_num_labels) {
    984c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    984e:	691a      	ldr	r2, [r3, #16]
    9850:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    9852:	429a      	cmp	r2, r3
    9854:	d902      	bls.n	985c <mp_compile_to_raw_code+0x80>
            max_num_labels = comp->next_label;
    9856:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    9858:	691b      	ldr	r3, [r3, #16]
    985a:	667b      	str	r3, [r7, #100]	; 0x64
    for (scope_t *s = comp->scope_head; s != NULL && comp->compile_error == MP_OBJ_NULL; s = s->next) {
    985c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    985e:	689b      	ldr	r3, [r3, #8]
    9860:	663b      	str	r3, [r7, #96]	; 0x60
    9862:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    9864:	2b00      	cmp	r3, #0
    9866:	d003      	beq.n	9870 <mp_compile_to_raw_code+0x94>
    9868:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    986a:	689b      	ldr	r3, [r3, #8]
    986c:	2b00      	cmp	r3, #0
    986e:	d0e8      	beq.n	9842 <mp_compile_to_raw_code+0x66>
        }
    }

    // compute some things related to scope and identifiers
    for (scope_t *s = comp->scope_head; s != NULL && comp->compile_error == MP_OBJ_NULL; s = s->next) {
    9870:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    9872:	6a1b      	ldr	r3, [r3, #32]
    9874:	65fb      	str	r3, [r7, #92]	; 0x5c
    9876:	e005      	b.n	9884 <mp_compile_to_raw_code+0xa8>
        scope_compute_things(s);
    9878:	6df8      	ldr	r0, [r7, #92]	; 0x5c
    987a:	f7ff fe71 	bl	9560 <scope_compute_things>
    for (scope_t *s = comp->scope_head; s != NULL && comp->compile_error == MP_OBJ_NULL; s = s->next) {
    987e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    9880:	689b      	ldr	r3, [r3, #8]
    9882:	65fb      	str	r3, [r7, #92]	; 0x5c
    9884:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    9886:	2b00      	cmp	r3, #0
    9888:	d003      	beq.n	9892 <mp_compile_to_raw_code+0xb6>
    988a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    988c:	689b      	ldr	r3, [r3, #8]
    988e:	2b00      	cmp	r3, #0
    9890:	d0f2      	beq.n	9878 <mp_compile_to_raw_code+0x9c>
    }

    // set max number of labels now that it's calculated
    emit_bc_set_max_num_labels(emit_bc, max_num_labels);
    9892:	6e79      	ldr	r1, [r7, #100]	; 0x64
    9894:	6cb8      	ldr	r0, [r7, #72]	; 0x48
    9896:	f000 f925 	bl	9ae4 <emit_bc_set_max_num_labels>

    // compile pass 2 and 3
#if MICROPY_EMIT_NATIVE
    emit_t *emit_native = NULL;
#endif
    for (scope_t *s = comp->scope_head; s != NULL && comp->compile_error == MP_OBJ_NULL; s = s->next) {
    989a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    989c:	6a1b      	ldr	r3, [r3, #32]
    989e:	65bb      	str	r3, [r7, #88]	; 0x58
    98a0:	e01d      	b.n	98de <mp_compile_to_raw_code+0x102>
                    EMIT_ARG(set_native_type, MP_EMIT_NATIVE_TYPE_ENABLE, s->emit_options == MP_EMIT_OPT_VIPER, 0);
                    break;
#endif // MICROPY_EMIT_NATIVE

                default:
                    comp->emit = emit_bc;
    98a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    98a4:	6cba      	ldr	r2, [r7, #72]	; 0x48
    98a6:	629a      	str	r2, [r3, #40]	; 0x28
                    #if MICROPY_EMIT_NATIVE
                    comp->emit_method_table = &emit_bc_method_table;
                    #endif
                    break;
    98a8:	bf00      	nop
            }

            // need a pass to compute stack size
            compile_scope(comp, s, MP_PASS_STACK_SIZE);
    98aa:	2202      	movs	r2, #2
    98ac:	6db9      	ldr	r1, [r7, #88]	; 0x58
    98ae:	6d38      	ldr	r0, [r7, #80]	; 0x50
    98b0:	f7ff fbce 	bl	9050 <compile_scope>

            // second last pass: compute code size
            if (comp->compile_error == MP_OBJ_NULL) {
    98b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    98b6:	689b      	ldr	r3, [r3, #8]
    98b8:	2b00      	cmp	r3, #0
    98ba:	d104      	bne.n	98c6 <mp_compile_to_raw_code+0xea>
                compile_scope(comp, s, MP_PASS_CODE_SIZE);
    98bc:	2203      	movs	r2, #3
    98be:	6db9      	ldr	r1, [r7, #88]	; 0x58
    98c0:	6d38      	ldr	r0, [r7, #80]	; 0x50
    98c2:	f7ff fbc5 	bl	9050 <compile_scope>
            }

            // final pass: emit code
            if (comp->compile_error == MP_OBJ_NULL) {
    98c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    98c8:	689b      	ldr	r3, [r3, #8]
    98ca:	2b00      	cmp	r3, #0
    98cc:	d104      	bne.n	98d8 <mp_compile_to_raw_code+0xfc>
                compile_scope(comp, s, MP_PASS_EMIT);
    98ce:	2204      	movs	r2, #4
    98d0:	6db9      	ldr	r1, [r7, #88]	; 0x58
    98d2:	6d38      	ldr	r0, [r7, #80]	; 0x50
    98d4:	f7ff fbbc 	bl	9050 <compile_scope>
    for (scope_t *s = comp->scope_head; s != NULL && comp->compile_error == MP_OBJ_NULL; s = s->next) {
    98d8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    98da:	689b      	ldr	r3, [r3, #8]
    98dc:	65bb      	str	r3, [r7, #88]	; 0x58
    98de:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    98e0:	2b00      	cmp	r3, #0
    98e2:	d003      	beq.n	98ec <mp_compile_to_raw_code+0x110>
    98e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    98e6:	689b      	ldr	r3, [r3, #8]
    98e8:	2b00      	cmp	r3, #0
    98ea:	d0da      	beq.n	98a2 <mp_compile_to_raw_code+0xc6>
            }
        }
    }

    if (comp->compile_error != MP_OBJ_NULL) {
    98ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    98ee:	689b      	ldr	r3, [r3, #8]
    98f0:	2b00      	cmp	r3, #0
    98f2:	d011      	beq.n	9918 <mp_compile_to_raw_code+0x13c>
        // if there is no line number for the error then use the line
        // number for the start of this scope
        compile_error_set_line(comp, comp->scope_cur->pn);
    98f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    98f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    98f8:	68db      	ldr	r3, [r3, #12]
    98fa:	4619      	mov	r1, r3
    98fc:	6d38      	ldr	r0, [r7, #80]	; 0x50
    98fe:	f7fb facf 	bl	4ea0 <compile_error_set_line>
        // add a traceback to the exception using relevant source info
        mp_obj_exception_add_traceback(comp->compile_error, comp->source_file,
    9902:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    9904:	6898      	ldr	r0, [r3, #8]
    9906:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    9908:	6819      	ldr	r1, [r3, #0]
    990a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    990c:	68da      	ldr	r2, [r3, #12]
            comp->compile_error_line, comp->scope_cur->simple_name);
    990e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    9910:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    9912:	8a5b      	ldrh	r3, [r3, #18]
        mp_obj_exception_add_traceback(comp->compile_error, comp->source_file,
    9914:	f006 f8d6 	bl	fac4 <mp_obj_exception_add_traceback>
    }

    // free the emitters

    emit_bc_free(emit_bc);
    9918:	6cb8      	ldr	r0, [r7, #72]	; 0x48
    991a:	f000 f8f9 	bl	9b10 <emit_bc_free>
        ASM_EMITTER(free)(comp->emit_inline_asm);
    }
    #endif

    // free the parse tree
    mp_parse_tree_clear(parse_tree);
    991e:	68f8      	ldr	r0, [r7, #12]
    9920:	f7fb f90e 	bl	4b40 <mp_parse_tree_clear>

    // free the scopes
    mp_raw_code_t *outer_raw_code = module_scope->raw_code;
    9924:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    9926:	695b      	ldr	r3, [r3, #20]
    9928:	647b      	str	r3, [r7, #68]	; 0x44
    for (scope_t *s = module_scope; s;) {
    992a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    992c:	657b      	str	r3, [r7, #84]	; 0x54
    992e:	e007      	b.n	9940 <mp_compile_to_raw_code+0x164>
        scope_t *next = s->next;
    9930:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    9932:	689b      	ldr	r3, [r3, #8]
    9934:	643b      	str	r3, [r7, #64]	; 0x40
        scope_free(s);
    9936:	6d78      	ldr	r0, [r7, #84]	; 0x54
    9938:	f7fb f974 	bl	4c24 <scope_free>
        s = next;
    993c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    993e:	657b      	str	r3, [r7, #84]	; 0x54
    for (scope_t *s = module_scope; s;) {
    9940:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    9942:	2b00      	cmp	r3, #0
    9944:	d1f4      	bne.n	9930 <mp_compile_to_raw_code+0x154>
    }

    if (comp->compile_error != MP_OBJ_NULL) {
    9946:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    9948:	689b      	ldr	r3, [r3, #8]
    994a:	2b00      	cmp	r3, #0
    994c:	d004      	beq.n	9958 <mp_compile_to_raw_code+0x17c>
        nlr_raise(comp->compile_error);
    994e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    9950:	689b      	ldr	r3, [r3, #8]
    9952:	4618      	mov	r0, r3
    9954:	f7f6 fcc4 	bl	2e0 <nlr_jump>
    } else {
        return outer_raw_code;
    9958:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    }
}
    995a:	4618      	mov	r0, r3
    995c:	3768      	adds	r7, #104	; 0x68
    995e:	46bd      	mov	sp, r7
    9960:	bd80      	pop	{r7, pc}
    9962:	bf00      	nop

00009964 <mp_compile>:

mp_obj_t mp_compile(mp_parse_tree_t *parse_tree, qstr source_file, uint emit_opt, bool is_repl) {
    9964:	b580      	push	{r7, lr}
    9966:	b086      	sub	sp, #24
    9968:	af00      	add	r7, sp, #0
    996a:	60f8      	str	r0, [r7, #12]
    996c:	60b9      	str	r1, [r7, #8]
    996e:	607a      	str	r2, [r7, #4]
    9970:	70fb      	strb	r3, [r7, #3]
    mp_raw_code_t *rc = mp_compile_to_raw_code(parse_tree, source_file, emit_opt, is_repl);
    9972:	78fb      	ldrb	r3, [r7, #3]
    9974:	687a      	ldr	r2, [r7, #4]
    9976:	68b9      	ldr	r1, [r7, #8]
    9978:	68f8      	ldr	r0, [r7, #12]
    997a:	f7ff ff2f 	bl	97dc <mp_compile_to_raw_code>
    997e:	6178      	str	r0, [r7, #20]
    // return function that executes the outer module
    return mp_make_function_from_raw_code(rc, MP_OBJ_NULL, MP_OBJ_NULL);
    9980:	2200      	movs	r2, #0
    9982:	2100      	movs	r1, #0
    9984:	6978      	ldr	r0, [r7, #20]
    9986:	f001 fd93 	bl	b4b0 <mp_make_function_from_raw_code>
    998a:	4603      	mov	r3, r0
}
    998c:	4618      	mov	r0, r3
    998e:	3718      	adds	r7, #24
    9990:	46bd      	mov	sp, r7
    9992:	bd80      	pop	{r7, pc}

00009994 <mp_emit_common_get_id_for_load>:

#include "py/emit.h"

#if MICROPY_ENABLE_COMPILER

void mp_emit_common_get_id_for_load(scope_t *scope, qstr qst) {
    9994:	b580      	push	{r7, lr}
    9996:	b084      	sub	sp, #16
    9998:	af00      	add	r7, sp, #0
    999a:	6078      	str	r0, [r7, #4]
    999c:	6039      	str	r1, [r7, #0]
    // name adding/lookup
    bool added;
    id_info_t *id = scope_find_or_add_id(scope, qst, &added);
    999e:	f107 030b 	add.w	r3, r7, #11
    99a2:	461a      	mov	r2, r3
    99a4:	6839      	ldr	r1, [r7, #0]
    99a6:	6878      	ldr	r0, [r7, #4]
    99a8:	f7fb f94c 	bl	4c44 <scope_find_or_add_id>
    99ac:	60f8      	str	r0, [r7, #12]
    if (added) {
    99ae:	7afb      	ldrb	r3, [r7, #11]
    99b0:	2b00      	cmp	r3, #0
    99b2:	d004      	beq.n	99be <mp_emit_common_get_id_for_load+0x2a>
        scope_find_local_and_close_over(scope, id, qst);
    99b4:	683a      	ldr	r2, [r7, #0]
    99b6:	68f9      	ldr	r1, [r7, #12]
    99b8:	6878      	ldr	r0, [r7, #4]
    99ba:	f7fb fa1f 	bl	4dfc <scope_find_local_and_close_over>
    }
}
    99be:	bf00      	nop
    99c0:	3710      	adds	r7, #16
    99c2:	46bd      	mov	sp, r7
    99c4:	bd80      	pop	{r7, pc}
    99c6:	bf00      	nop

000099c8 <mp_emit_common_get_id_for_modification>:

void mp_emit_common_get_id_for_modification(scope_t *scope, qstr qst) {
    99c8:	b580      	push	{r7, lr}
    99ca:	b084      	sub	sp, #16
    99cc:	af00      	add	r7, sp, #0
    99ce:	6078      	str	r0, [r7, #4]
    99d0:	6039      	str	r1, [r7, #0]
    // name adding/lookup
    bool added;
    id_info_t *id = scope_find_or_add_id(scope, qst, &added);
    99d2:	f107 030b 	add.w	r3, r7, #11
    99d6:	461a      	mov	r2, r3
    99d8:	6839      	ldr	r1, [r7, #0]
    99da:	6878      	ldr	r0, [r7, #4]
    99dc:	f7fb f932 	bl	4c44 <scope_find_or_add_id>
    99e0:	60f8      	str	r0, [r7, #12]
    if (added) {
    99e2:	7afb      	ldrb	r3, [r7, #11]
    99e4:	2b00      	cmp	r3, #0
    99e6:	d00b      	beq.n	9a00 <mp_emit_common_get_id_for_modification+0x38>
        if (SCOPE_IS_FUNC_LIKE(scope->kind)) {
    99e8:	687b      	ldr	r3, [r7, #4]
    99ea:	681b      	ldr	r3, [r3, #0]
    99ec:	2b01      	cmp	r3, #1
    99ee:	d903      	bls.n	99f8 <mp_emit_common_get_id_for_modification+0x30>
            id->kind = ID_INFO_KIND_LOCAL;
    99f0:	68fb      	ldr	r3, [r7, #12]
    99f2:	2202      	movs	r2, #2
    99f4:	701a      	strb	r2, [r3, #0]
        }
    } else if (SCOPE_IS_FUNC_LIKE(scope->kind) && id->kind == ID_INFO_KIND_GLOBAL_IMPLICIT) {
        // rebind as a local variable
        id->kind = ID_INFO_KIND_LOCAL;
    }
}
    99f6:	e00e      	b.n	9a16 <mp_emit_common_get_id_for_modification+0x4e>
            id->kind = ID_INFO_KIND_GLOBAL_IMPLICIT;
    99f8:	68fb      	ldr	r3, [r7, #12]
    99fa:	2200      	movs	r2, #0
    99fc:	701a      	strb	r2, [r3, #0]
}
    99fe:	e00a      	b.n	9a16 <mp_emit_common_get_id_for_modification+0x4e>
    } else if (SCOPE_IS_FUNC_LIKE(scope->kind) && id->kind == ID_INFO_KIND_GLOBAL_IMPLICIT) {
    9a00:	687b      	ldr	r3, [r7, #4]
    9a02:	681b      	ldr	r3, [r3, #0]
    9a04:	2b01      	cmp	r3, #1
    9a06:	d906      	bls.n	9a16 <mp_emit_common_get_id_for_modification+0x4e>
    9a08:	68fb      	ldr	r3, [r7, #12]
    9a0a:	781b      	ldrb	r3, [r3, #0]
    9a0c:	2b00      	cmp	r3, #0
    9a0e:	d102      	bne.n	9a16 <mp_emit_common_get_id_for_modification+0x4e>
        id->kind = ID_INFO_KIND_LOCAL;
    9a10:	68fb      	ldr	r3, [r7, #12]
    9a12:	2202      	movs	r2, #2
    9a14:	701a      	strb	r2, [r3, #0]
}
    9a16:	bf00      	nop
    9a18:	3710      	adds	r7, #16
    9a1a:	46bd      	mov	sp, r7
    9a1c:	bd80      	pop	{r7, pc}
    9a1e:	bf00      	nop

00009a20 <mp_emit_common_id_op>:

void mp_emit_common_id_op(emit_t *emit, const mp_emit_method_table_id_ops_t *emit_method_table, scope_t *scope, qstr qst) {
    9a20:	b580      	push	{r7, lr}
    9a22:	b086      	sub	sp, #24
    9a24:	af00      	add	r7, sp, #0
    9a26:	60f8      	str	r0, [r7, #12]
    9a28:	60b9      	str	r1, [r7, #8]
    9a2a:	607a      	str	r2, [r7, #4]
    9a2c:	603b      	str	r3, [r7, #0]
    // assumes pass is greater than 1, ie that all identifiers are defined in the scope

    id_info_t *id = scope_find(scope, qst);
    9a2e:	6839      	ldr	r1, [r7, #0]
    9a30:	6878      	ldr	r0, [r7, #4]
    9a32:	f7fb f953 	bl	4cdc <scope_find>
    9a36:	6178      	str	r0, [r7, #20]
    assert(id != NULL);
    9a38:	697b      	ldr	r3, [r7, #20]
    9a3a:	2b00      	cmp	r3, #0
    9a3c:	d105      	bne.n	9a4a <mp_emit_common_id_op+0x2a>
    9a3e:	4b1f      	ldr	r3, [pc, #124]	; (9abc <mp_emit_common_id_op+0x9c>)
    9a40:	4a1f      	ldr	r2, [pc, #124]	; (9ac0 <mp_emit_common_id_op+0xa0>)
    9a42:	213e      	movs	r1, #62	; 0x3e
    9a44:	481f      	ldr	r0, [pc, #124]	; (9ac4 <mp_emit_common_id_op+0xa4>)
    9a46:	f011 fe43 	bl	1b6d0 <__assert_func>

    // call the emit backend with the correct code
    if (id->kind == ID_INFO_KIND_GLOBAL_IMPLICIT) {
    9a4a:	697b      	ldr	r3, [r7, #20]
    9a4c:	781b      	ldrb	r3, [r3, #0]
    9a4e:	2b00      	cmp	r3, #0
    9a50:	d105      	bne.n	9a5e <mp_emit_common_id_op+0x3e>
        emit_method_table->name(emit, qst);
    9a52:	68bb      	ldr	r3, [r7, #8]
    9a54:	689b      	ldr	r3, [r3, #8]
    9a56:	6839      	ldr	r1, [r7, #0]
    9a58:	68f8      	ldr	r0, [r7, #12]
    9a5a:	4798      	blx	r3
        emit_method_table->fast(emit, qst, id->local_num);
    } else {
        assert(id->kind == ID_INFO_KIND_CELL || id->kind == ID_INFO_KIND_FREE);
        emit_method_table->deref(emit, qst, id->local_num);
    }
}
    9a5c:	e02a      	b.n	9ab4 <mp_emit_common_id_op+0x94>
    } else if (id->kind == ID_INFO_KIND_GLOBAL_EXPLICIT) {
    9a5e:	697b      	ldr	r3, [r7, #20]
    9a60:	781b      	ldrb	r3, [r3, #0]
    9a62:	2b01      	cmp	r3, #1
    9a64:	d105      	bne.n	9a72 <mp_emit_common_id_op+0x52>
        emit_method_table->global(emit, qst);
    9a66:	68bb      	ldr	r3, [r7, #8]
    9a68:	68db      	ldr	r3, [r3, #12]
    9a6a:	6839      	ldr	r1, [r7, #0]
    9a6c:	68f8      	ldr	r0, [r7, #12]
    9a6e:	4798      	blx	r3
}
    9a70:	e020      	b.n	9ab4 <mp_emit_common_id_op+0x94>
    } else if (id->kind == ID_INFO_KIND_LOCAL) {
    9a72:	697b      	ldr	r3, [r7, #20]
    9a74:	781b      	ldrb	r3, [r3, #0]
    9a76:	2b02      	cmp	r3, #2
    9a78:	d107      	bne.n	9a8a <mp_emit_common_id_op+0x6a>
        emit_method_table->fast(emit, qst, id->local_num);
    9a7a:	68bb      	ldr	r3, [r7, #8]
    9a7c:	681b      	ldr	r3, [r3, #0]
    9a7e:	697a      	ldr	r2, [r7, #20]
    9a80:	8852      	ldrh	r2, [r2, #2]
    9a82:	6839      	ldr	r1, [r7, #0]
    9a84:	68f8      	ldr	r0, [r7, #12]
    9a86:	4798      	blx	r3
}
    9a88:	e014      	b.n	9ab4 <mp_emit_common_id_op+0x94>
        assert(id->kind == ID_INFO_KIND_CELL || id->kind == ID_INFO_KIND_FREE);
    9a8a:	697b      	ldr	r3, [r7, #20]
    9a8c:	781b      	ldrb	r3, [r3, #0]
    9a8e:	2b03      	cmp	r3, #3
    9a90:	d009      	beq.n	9aa6 <mp_emit_common_id_op+0x86>
    9a92:	697b      	ldr	r3, [r7, #20]
    9a94:	781b      	ldrb	r3, [r3, #0]
    9a96:	2b04      	cmp	r3, #4
    9a98:	d005      	beq.n	9aa6 <mp_emit_common_id_op+0x86>
    9a9a:	4b0b      	ldr	r3, [pc, #44]	; (9ac8 <mp_emit_common_id_op+0xa8>)
    9a9c:	4a08      	ldr	r2, [pc, #32]	; (9ac0 <mp_emit_common_id_op+0xa0>)
    9a9e:	2148      	movs	r1, #72	; 0x48
    9aa0:	4808      	ldr	r0, [pc, #32]	; (9ac4 <mp_emit_common_id_op+0xa4>)
    9aa2:	f011 fe15 	bl	1b6d0 <__assert_func>
        emit_method_table->deref(emit, qst, id->local_num);
    9aa6:	68bb      	ldr	r3, [r7, #8]
    9aa8:	685b      	ldr	r3, [r3, #4]
    9aaa:	697a      	ldr	r2, [r7, #20]
    9aac:	8852      	ldrh	r2, [r2, #2]
    9aae:	6839      	ldr	r1, [r7, #0]
    9ab0:	68f8      	ldr	r0, [r7, #12]
    9ab2:	4798      	blx	r3
}
    9ab4:	bf00      	nop
    9ab6:	3718      	adds	r7, #24
    9ab8:	46bd      	mov	sp, r7
    9aba:	bd80      	pop	{r7, pc}
    9abc:	00021054 	.word	0x00021054
    9ac0:	000210b8 	.word	0x000210b8
    9ac4:	00021060 	.word	0x00021060
    9ac8:	00021078 	.word	0x00021078

00009acc <emit_bc_new>:
    uint16_t ct_cur_raw_code;
    #endif
    mp_uint_t *const_table;
};

emit_t *emit_bc_new(void) {
    9acc:	b580      	push	{r7, lr}
    9ace:	b082      	sub	sp, #8
    9ad0:	af00      	add	r7, sp, #0
    emit_t *emit = m_new0(emit_t, 1);
    9ad2:	2038      	movs	r0, #56	; 0x38
    9ad4:	f7f6 fc60 	bl	398 <m_malloc0>
    9ad8:	6078      	str	r0, [r7, #4]
    return emit;
    9ada:	687b      	ldr	r3, [r7, #4]
}
    9adc:	4618      	mov	r0, r3
    9ade:	3708      	adds	r7, #8
    9ae0:	46bd      	mov	sp, r7
    9ae2:	bd80      	pop	{r7, pc}

00009ae4 <emit_bc_set_max_num_labels>:

void emit_bc_set_max_num_labels(emit_t *emit, mp_uint_t max_num_labels) {
    9ae4:	b580      	push	{r7, lr}
    9ae6:	b082      	sub	sp, #8
    9ae8:	af00      	add	r7, sp, #0
    9aea:	6078      	str	r0, [r7, #4]
    9aec:	6039      	str	r1, [r7, #0]
    emit->max_num_labels = max_num_labels;
    9aee:	687b      	ldr	r3, [r7, #4]
    9af0:	683a      	ldr	r2, [r7, #0]
    9af2:	619a      	str	r2, [r3, #24]
    emit->label_offsets = m_new(mp_uint_t, emit->max_num_labels);
    9af4:	687b      	ldr	r3, [r7, #4]
    9af6:	699b      	ldr	r3, [r3, #24]
    9af8:	009b      	lsls	r3, r3, #2
    9afa:	4618      	mov	r0, r3
    9afc:	f7f6 fc0e 	bl	31c <m_malloc>
    9b00:	4602      	mov	r2, r0
    9b02:	687b      	ldr	r3, [r7, #4]
    9b04:	61da      	str	r2, [r3, #28]
}
    9b06:	bf00      	nop
    9b08:	3708      	adds	r7, #8
    9b0a:	46bd      	mov	sp, r7
    9b0c:	bd80      	pop	{r7, pc}
    9b0e:	bf00      	nop

00009b10 <emit_bc_free>:

void emit_bc_free(emit_t *emit) {
    9b10:	b580      	push	{r7, lr}
    9b12:	b082      	sub	sp, #8
    9b14:	af00      	add	r7, sp, #0
    9b16:	6078      	str	r0, [r7, #4]
    m_del(mp_uint_t, emit->label_offsets, emit->max_num_labels);
    9b18:	687b      	ldr	r3, [r7, #4]
    9b1a:	69db      	ldr	r3, [r3, #28]
    9b1c:	4618      	mov	r0, r3
    9b1e:	f7f6 fc77 	bl	410 <m_free>
    m_del_obj(emit_t, emit);
    9b22:	6878      	ldr	r0, [r7, #4]
    9b24:	f7f6 fc74 	bl	410 <m_free>
}
    9b28:	bf00      	nop
    9b2a:	3708      	adds	r7, #8
    9b2c:	46bd      	mov	sp, r7
    9b2e:	bd80      	pop	{r7, pc}

00009b30 <emit_write_uint>:

typedef byte *(*emit_allocator_t)(emit_t *emit, int nbytes);

STATIC void emit_write_uint(emit_t *emit, emit_allocator_t allocator, mp_uint_t val) {
    9b30:	b580      	push	{r7, lr}
    9b32:	b088      	sub	sp, #32
    9b34:	af00      	add	r7, sp, #0
    9b36:	60f8      	str	r0, [r7, #12]
    9b38:	60b9      	str	r1, [r7, #8]
    9b3a:	607a      	str	r2, [r7, #4]
    // We store each 7 bits in a separate byte, and that's how many bytes needed
    byte buf[BYTES_FOR_INT];
    byte *p = buf + sizeof(buf);
    9b3c:	f107 0310 	add.w	r3, r7, #16
    9b40:	3305      	adds	r3, #5
    9b42:	61fb      	str	r3, [r7, #28]
    // We encode in little-ending order, but store in big-endian, to help decoding
    do {
        *--p = val & 0x7f;
    9b44:	69fb      	ldr	r3, [r7, #28]
    9b46:	3b01      	subs	r3, #1
    9b48:	61fb      	str	r3, [r7, #28]
    9b4a:	687b      	ldr	r3, [r7, #4]
    9b4c:	b2db      	uxtb	r3, r3
    9b4e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    9b52:	b2da      	uxtb	r2, r3
    9b54:	69fb      	ldr	r3, [r7, #28]
    9b56:	701a      	strb	r2, [r3, #0]
        val >>= 7;
    9b58:	687b      	ldr	r3, [r7, #4]
    9b5a:	09db      	lsrs	r3, r3, #7
    9b5c:	607b      	str	r3, [r7, #4]
    } while (val != 0);
    9b5e:	687b      	ldr	r3, [r7, #4]
    9b60:	2b00      	cmp	r3, #0
    9b62:	d1ef      	bne.n	9b44 <emit_write_uint+0x14>
    byte *c = allocator(emit, buf + sizeof(buf) - p);
    9b64:	f107 0310 	add.w	r3, r7, #16
    9b68:	3305      	adds	r3, #5
    9b6a:	461a      	mov	r2, r3
    9b6c:	69fb      	ldr	r3, [r7, #28]
    9b6e:	1ad2      	subs	r2, r2, r3
    9b70:	68bb      	ldr	r3, [r7, #8]
    9b72:	4611      	mov	r1, r2
    9b74:	68f8      	ldr	r0, [r7, #12]
    9b76:	4798      	blx	r3
    9b78:	61b8      	str	r0, [r7, #24]
    while (p != buf + sizeof(buf) - 1) {
    9b7a:	e00a      	b.n	9b92 <emit_write_uint+0x62>
        *c++ = *p++ | 0x80;
    9b7c:	69bb      	ldr	r3, [r7, #24]
    9b7e:	1c5a      	adds	r2, r3, #1
    9b80:	61ba      	str	r2, [r7, #24]
    9b82:	69fa      	ldr	r2, [r7, #28]
    9b84:	1c51      	adds	r1, r2, #1
    9b86:	61f9      	str	r1, [r7, #28]
    9b88:	7812      	ldrb	r2, [r2, #0]
    9b8a:	f062 027f 	orn	r2, r2, #127	; 0x7f
    9b8e:	b2d2      	uxtb	r2, r2
    9b90:	701a      	strb	r2, [r3, #0]
    while (p != buf + sizeof(buf) - 1) {
    9b92:	f107 0310 	add.w	r3, r7, #16
    9b96:	3304      	adds	r3, #4
    9b98:	69fa      	ldr	r2, [r7, #28]
    9b9a:	4293      	cmp	r3, r2
    9b9c:	d1ee      	bne.n	9b7c <emit_write_uint+0x4c>
    }
    *c = *p;
    9b9e:	69fb      	ldr	r3, [r7, #28]
    9ba0:	781a      	ldrb	r2, [r3, #0]
    9ba2:	69bb      	ldr	r3, [r7, #24]
    9ba4:	701a      	strb	r2, [r3, #0]
}
    9ba6:	bf00      	nop
    9ba8:	3720      	adds	r7, #32
    9baa:	46bd      	mov	sp, r7
    9bac:	bd80      	pop	{r7, pc}
    9bae:	bf00      	nop

00009bb0 <emit_get_cur_to_write_code_info>:

// all functions must go through this one to emit code info
STATIC byte *emit_get_cur_to_write_code_info(emit_t *emit, int num_bytes_to_write) {
    9bb0:	b580      	push	{r7, lr}
    9bb2:	b084      	sub	sp, #16
    9bb4:	af00      	add	r7, sp, #0
    9bb6:	6078      	str	r0, [r7, #4]
    9bb8:	6039      	str	r1, [r7, #0]
    //printf("emit %d\n", num_bytes_to_write);
    if (emit->pass < MP_PASS_EMIT) {
    9bba:	687b      	ldr	r3, [r7, #4]
    9bbc:	795b      	ldrb	r3, [r3, #5]
    9bbe:	2b03      	cmp	r3, #3
    9bc0:	d807      	bhi.n	9bd2 <emit_get_cur_to_write_code_info+0x22>
        emit->code_info_offset += num_bytes_to_write;
    9bc2:	687b      	ldr	r3, [r7, #4]
    9bc4:	6a1a      	ldr	r2, [r3, #32]
    9bc6:	683b      	ldr	r3, [r7, #0]
    9bc8:	441a      	add	r2, r3
    9bca:	687b      	ldr	r3, [r7, #4]
    9bcc:	621a      	str	r2, [r3, #32]
        return emit->dummy_data;
    9bce:	687b      	ldr	r3, [r7, #4]
    9bd0:	e01a      	b.n	9c08 <emit_get_cur_to_write_code_info+0x58>
    } else {
        assert(emit->code_info_offset + num_bytes_to_write <= emit->code_info_size);
    9bd2:	687b      	ldr	r3, [r7, #4]
    9bd4:	6a1a      	ldr	r2, [r3, #32]
    9bd6:	683b      	ldr	r3, [r7, #0]
    9bd8:	441a      	add	r2, r3
    9bda:	687b      	ldr	r3, [r7, #4]
    9bdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    9bde:	429a      	cmp	r2, r3
    9be0:	d905      	bls.n	9bee <emit_get_cur_to_write_code_info+0x3e>
    9be2:	4b0b      	ldr	r3, [pc, #44]	; (9c10 <emit_get_cur_to_write_code_info+0x60>)
    9be4:	4a0b      	ldr	r2, [pc, #44]	; (9c14 <emit_get_cur_to_write_code_info+0x64>)
    9be6:	2173      	movs	r1, #115	; 0x73
    9be8:	480b      	ldr	r0, [pc, #44]	; (9c18 <emit_get_cur_to_write_code_info+0x68>)
    9bea:	f011 fd71 	bl	1b6d0 <__assert_func>
        byte *c = emit->code_base + emit->code_info_offset;
    9bee:	687b      	ldr	r3, [r7, #4]
    9bf0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    9bf2:	687b      	ldr	r3, [r7, #4]
    9bf4:	6a1b      	ldr	r3, [r3, #32]
    9bf6:	4413      	add	r3, r2
    9bf8:	60fb      	str	r3, [r7, #12]
        emit->code_info_offset += num_bytes_to_write;
    9bfa:	687b      	ldr	r3, [r7, #4]
    9bfc:	6a1a      	ldr	r2, [r3, #32]
    9bfe:	683b      	ldr	r3, [r7, #0]
    9c00:	441a      	add	r2, r3
    9c02:	687b      	ldr	r3, [r7, #4]
    9c04:	621a      	str	r2, [r3, #32]
        return c;
    9c06:	68fb      	ldr	r3, [r7, #12]
    }
}
    9c08:	4618      	mov	r0, r3
    9c0a:	3710      	adds	r7, #16
    9c0c:	46bd      	mov	sp, r7
    9c0e:	bd80      	pop	{r7, pc}
    9c10:	000210d0 	.word	0x000210d0
    9c14:	000212e8 	.word	0x000212e8
    9c18:	00021114 	.word	0x00021114

00009c1c <emit_write_code_info_byte>:

STATIC void emit_write_code_info_byte(emit_t* emit, byte val) {
    9c1c:	b580      	push	{r7, lr}
    9c1e:	b082      	sub	sp, #8
    9c20:	af00      	add	r7, sp, #0
    9c22:	6078      	str	r0, [r7, #4]
    9c24:	460b      	mov	r3, r1
    9c26:	70fb      	strb	r3, [r7, #3]
    *emit_get_cur_to_write_code_info(emit, 1) = val;
    9c28:	2101      	movs	r1, #1
    9c2a:	6878      	ldr	r0, [r7, #4]
    9c2c:	f7ff ffc0 	bl	9bb0 <emit_get_cur_to_write_code_info>
    9c30:	4602      	mov	r2, r0
    9c32:	78fb      	ldrb	r3, [r7, #3]
    9c34:	7013      	strb	r3, [r2, #0]
}
    9c36:	bf00      	nop
    9c38:	3708      	adds	r7, #8
    9c3a:	46bd      	mov	sp, r7
    9c3c:	bd80      	pop	{r7, pc}
    9c3e:	bf00      	nop

00009c40 <emit_write_code_info_uint>:

STATIC void emit_write_code_info_uint(emit_t* emit, mp_uint_t val) {
    9c40:	b580      	push	{r7, lr}
    9c42:	b082      	sub	sp, #8
    9c44:	af00      	add	r7, sp, #0
    9c46:	6078      	str	r0, [r7, #4]
    9c48:	6039      	str	r1, [r7, #0]
    emit_write_uint(emit, emit_get_cur_to_write_code_info, val);
    9c4a:	683a      	ldr	r2, [r7, #0]
    9c4c:	4903      	ldr	r1, [pc, #12]	; (9c5c <emit_write_code_info_uint+0x1c>)
    9c4e:	6878      	ldr	r0, [r7, #4]
    9c50:	f7ff ff6e 	bl	9b30 <emit_write_uint>
}
    9c54:	bf00      	nop
    9c56:	3708      	adds	r7, #8
    9c58:	46bd      	mov	sp, r7
    9c5a:	bd80      	pop	{r7, pc}
    9c5c:	00009bb1 	.word	0x00009bb1

00009c60 <emit_write_code_info_qstr>:

STATIC void emit_write_code_info_qstr(emit_t *emit, qstr qst) {
    9c60:	b580      	push	{r7, lr}
    9c62:	b082      	sub	sp, #8
    9c64:	af00      	add	r7, sp, #0
    9c66:	6078      	str	r0, [r7, #4]
    9c68:	6039      	str	r1, [r7, #0]
    assert((qst >> 16) == 0);
    byte *c = emit_get_cur_to_write_code_info(emit, 2);
    c[0] = qst;
    c[1] = qst >> 8;
    #else
    emit_write_uint(emit, emit_get_cur_to_write_code_info, qst);
    9c6a:	683a      	ldr	r2, [r7, #0]
    9c6c:	4903      	ldr	r1, [pc, #12]	; (9c7c <emit_write_code_info_qstr+0x1c>)
    9c6e:	6878      	ldr	r0, [r7, #4]
    9c70:	f7ff ff5e 	bl	9b30 <emit_write_uint>
    #endif
}
    9c74:	bf00      	nop
    9c76:	3708      	adds	r7, #8
    9c78:	46bd      	mov	sp, r7
    9c7a:	bd80      	pop	{r7, pc}
    9c7c:	00009bb1 	.word	0x00009bb1

00009c80 <emit_get_cur_to_write_bytecode>:
    }
}
#endif

// all functions must go through this one to emit byte code
STATIC byte *emit_get_cur_to_write_bytecode(emit_t *emit, int num_bytes_to_write) {
    9c80:	b580      	push	{r7, lr}
    9c82:	b084      	sub	sp, #16
    9c84:	af00      	add	r7, sp, #0
    9c86:	6078      	str	r0, [r7, #4]
    9c88:	6039      	str	r1, [r7, #0]
    //printf("emit %d\n", num_bytes_to_write);
    if (emit->pass < MP_PASS_EMIT) {
    9c8a:	687b      	ldr	r3, [r7, #4]
    9c8c:	795b      	ldrb	r3, [r3, #5]
    9c8e:	2b03      	cmp	r3, #3
    9c90:	d807      	bhi.n	9ca2 <emit_get_cur_to_write_bytecode+0x22>
        emit->bytecode_offset += num_bytes_to_write;
    9c92:	687b      	ldr	r3, [r7, #4]
    9c94:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    9c96:	683b      	ldr	r3, [r7, #0]
    9c98:	441a      	add	r2, r3
    9c9a:	687b      	ldr	r3, [r7, #4]
    9c9c:	629a      	str	r2, [r3, #40]	; 0x28
        return emit->dummy_data;
    9c9e:	687b      	ldr	r3, [r7, #4]
    9ca0:	e01d      	b.n	9cde <emit_get_cur_to_write_bytecode+0x5e>
    } else {
        assert(emit->bytecode_offset + num_bytes_to_write <= emit->bytecode_size);
    9ca2:	687b      	ldr	r3, [r7, #4]
    9ca4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    9ca6:	683b      	ldr	r3, [r7, #0]
    9ca8:	441a      	add	r2, r3
    9caa:	687b      	ldr	r3, [r7, #4]
    9cac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    9cae:	429a      	cmp	r2, r3
    9cb0:	d905      	bls.n	9cbe <emit_get_cur_to_write_bytecode+0x3e>
    9cb2:	4b0d      	ldr	r3, [pc, #52]	; (9ce8 <emit_get_cur_to_write_bytecode+0x68>)
    9cb4:	4a0d      	ldr	r2, [pc, #52]	; (9cec <emit_get_cur_to_write_bytecode+0x6c>)
    9cb6:	21b2      	movs	r1, #178	; 0xb2
    9cb8:	480d      	ldr	r0, [pc, #52]	; (9cf0 <emit_get_cur_to_write_bytecode+0x70>)
    9cba:	f011 fd09 	bl	1b6d0 <__assert_func>
        byte *c = emit->code_base + emit->code_info_size + emit->bytecode_offset;
    9cbe:	687b      	ldr	r3, [r7, #4]
    9cc0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    9cc2:	687b      	ldr	r3, [r7, #4]
    9cc4:	6a59      	ldr	r1, [r3, #36]	; 0x24
    9cc6:	687b      	ldr	r3, [r7, #4]
    9cc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    9cca:	440b      	add	r3, r1
    9ccc:	4413      	add	r3, r2
    9cce:	60fb      	str	r3, [r7, #12]
        emit->bytecode_offset += num_bytes_to_write;
    9cd0:	687b      	ldr	r3, [r7, #4]
    9cd2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    9cd4:	683b      	ldr	r3, [r7, #0]
    9cd6:	441a      	add	r2, r3
    9cd8:	687b      	ldr	r3, [r7, #4]
    9cda:	629a      	str	r2, [r3, #40]	; 0x28
        return c;
    9cdc:	68fb      	ldr	r3, [r7, #12]
    }
}
    9cde:	4618      	mov	r0, r3
    9ce0:	3710      	adds	r7, #16
    9ce2:	46bd      	mov	sp, r7
    9ce4:	bd80      	pop	{r7, pc}
    9ce6:	bf00      	nop
    9ce8:	00021128 	.word	0x00021128
    9cec:	00021308 	.word	0x00021308
    9cf0:	00021114 	.word	0x00021114

00009cf4 <emit_write_bytecode_byte>:

STATIC void emit_write_bytecode_byte(emit_t *emit, byte b1) {
    9cf4:	b580      	push	{r7, lr}
    9cf6:	b084      	sub	sp, #16
    9cf8:	af00      	add	r7, sp, #0
    9cfa:	6078      	str	r0, [r7, #4]
    9cfc:	460b      	mov	r3, r1
    9cfe:	70fb      	strb	r3, [r7, #3]
    byte *c = emit_get_cur_to_write_bytecode(emit, 1);
    9d00:	2101      	movs	r1, #1
    9d02:	6878      	ldr	r0, [r7, #4]
    9d04:	f7ff ffbc 	bl	9c80 <emit_get_cur_to_write_bytecode>
    9d08:	60f8      	str	r0, [r7, #12]
    c[0] = b1;
    9d0a:	68fb      	ldr	r3, [r7, #12]
    9d0c:	78fa      	ldrb	r2, [r7, #3]
    9d0e:	701a      	strb	r2, [r3, #0]
}
    9d10:	bf00      	nop
    9d12:	3710      	adds	r7, #16
    9d14:	46bd      	mov	sp, r7
    9d16:	bd80      	pop	{r7, pc}

00009d18 <emit_write_bytecode_byte_byte>:

STATIC void emit_write_bytecode_byte_byte(emit_t* emit, byte b1, byte b2) {
    9d18:	b580      	push	{r7, lr}
    9d1a:	b084      	sub	sp, #16
    9d1c:	af00      	add	r7, sp, #0
    9d1e:	6078      	str	r0, [r7, #4]
    9d20:	460b      	mov	r3, r1
    9d22:	70fb      	strb	r3, [r7, #3]
    9d24:	4613      	mov	r3, r2
    9d26:	70bb      	strb	r3, [r7, #2]
    byte *c = emit_get_cur_to_write_bytecode(emit, 2);
    9d28:	2102      	movs	r1, #2
    9d2a:	6878      	ldr	r0, [r7, #4]
    9d2c:	f7ff ffa8 	bl	9c80 <emit_get_cur_to_write_bytecode>
    9d30:	60f8      	str	r0, [r7, #12]
    c[0] = b1;
    9d32:	68fb      	ldr	r3, [r7, #12]
    9d34:	78fa      	ldrb	r2, [r7, #3]
    9d36:	701a      	strb	r2, [r3, #0]
    c[1] = b2;
    9d38:	68fb      	ldr	r3, [r7, #12]
    9d3a:	3301      	adds	r3, #1
    9d3c:	78ba      	ldrb	r2, [r7, #2]
    9d3e:	701a      	strb	r2, [r3, #0]
}
    9d40:	bf00      	nop
    9d42:	3710      	adds	r7, #16
    9d44:	46bd      	mov	sp, r7
    9d46:	bd80      	pop	{r7, pc}

00009d48 <emit_write_bytecode_byte_int>:

// Similar to emit_write_bytecode_uint(), just some extra handling to encode sign
STATIC void emit_write_bytecode_byte_int(emit_t *emit, byte b1, mp_int_t num) {
    9d48:	b580      	push	{r7, lr}
    9d4a:	b088      	sub	sp, #32
    9d4c:	af00      	add	r7, sp, #0
    9d4e:	60f8      	str	r0, [r7, #12]
    9d50:	460b      	mov	r3, r1
    9d52:	607a      	str	r2, [r7, #4]
    9d54:	72fb      	strb	r3, [r7, #11]
    emit_write_bytecode_byte(emit, b1);
    9d56:	7afb      	ldrb	r3, [r7, #11]
    9d58:	4619      	mov	r1, r3
    9d5a:	68f8      	ldr	r0, [r7, #12]
    9d5c:	f7ff ffca 	bl	9cf4 <emit_write_bytecode_byte>

    // We store each 7 bits in a separate byte, and that's how many bytes needed
    byte buf[BYTES_FOR_INT];
    byte *p = buf + sizeof(buf);
    9d60:	f107 0310 	add.w	r3, r7, #16
    9d64:	3305      	adds	r3, #5
    9d66:	61fb      	str	r3, [r7, #28]
    // We encode in little-ending order, but store in big-endian, to help decoding
    do {
        *--p = num & 0x7f;
    9d68:	69fb      	ldr	r3, [r7, #28]
    9d6a:	3b01      	subs	r3, #1
    9d6c:	61fb      	str	r3, [r7, #28]
    9d6e:	687b      	ldr	r3, [r7, #4]
    9d70:	b2db      	uxtb	r3, r3
    9d72:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    9d76:	b2da      	uxtb	r2, r3
    9d78:	69fb      	ldr	r3, [r7, #28]
    9d7a:	701a      	strb	r2, [r3, #0]
        num >>= 7;
    9d7c:	687b      	ldr	r3, [r7, #4]
    9d7e:	11db      	asrs	r3, r3, #7
    9d80:	607b      	str	r3, [r7, #4]
    } while (num != 0 && num != -1);
    9d82:	687b      	ldr	r3, [r7, #4]
    9d84:	2b00      	cmp	r3, #0
    9d86:	d003      	beq.n	9d90 <emit_write_bytecode_byte_int+0x48>
    9d88:	687b      	ldr	r3, [r7, #4]
    9d8a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    9d8e:	d1eb      	bne.n	9d68 <emit_write_bytecode_byte_int+0x20>
    // Make sure that highest bit we stored (mask 0x40) matches sign
    // of the number. If not, store extra byte just to encode sign
    if (num == -1 && (*p & 0x40) == 0) {
    9d90:	687b      	ldr	r3, [r7, #4]
    9d92:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    9d96:	d10c      	bne.n	9db2 <emit_write_bytecode_byte_int+0x6a>
    9d98:	69fb      	ldr	r3, [r7, #28]
    9d9a:	781b      	ldrb	r3, [r3, #0]
    9d9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
    9da0:	2b00      	cmp	r3, #0
    9da2:	d106      	bne.n	9db2 <emit_write_bytecode_byte_int+0x6a>
        *--p = 0x7f;
    9da4:	69fb      	ldr	r3, [r7, #28]
    9da6:	3b01      	subs	r3, #1
    9da8:	61fb      	str	r3, [r7, #28]
    9daa:	69fb      	ldr	r3, [r7, #28]
    9dac:	227f      	movs	r2, #127	; 0x7f
    9dae:	701a      	strb	r2, [r3, #0]
    9db0:	e00e      	b.n	9dd0 <emit_write_bytecode_byte_int+0x88>
    } else if (num == 0 && (*p & 0x40) != 0) {
    9db2:	687b      	ldr	r3, [r7, #4]
    9db4:	2b00      	cmp	r3, #0
    9db6:	d10b      	bne.n	9dd0 <emit_write_bytecode_byte_int+0x88>
    9db8:	69fb      	ldr	r3, [r7, #28]
    9dba:	781b      	ldrb	r3, [r3, #0]
    9dbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
    9dc0:	2b00      	cmp	r3, #0
    9dc2:	d005      	beq.n	9dd0 <emit_write_bytecode_byte_int+0x88>
        *--p = 0;
    9dc4:	69fb      	ldr	r3, [r7, #28]
    9dc6:	3b01      	subs	r3, #1
    9dc8:	61fb      	str	r3, [r7, #28]
    9dca:	69fb      	ldr	r3, [r7, #28]
    9dcc:	2200      	movs	r2, #0
    9dce:	701a      	strb	r2, [r3, #0]
    }

    byte *c = emit_get_cur_to_write_bytecode(emit, buf + sizeof(buf) - p);
    9dd0:	f107 0310 	add.w	r3, r7, #16
    9dd4:	3305      	adds	r3, #5
    9dd6:	461a      	mov	r2, r3
    9dd8:	69fb      	ldr	r3, [r7, #28]
    9dda:	1ad3      	subs	r3, r2, r3
    9ddc:	4619      	mov	r1, r3
    9dde:	68f8      	ldr	r0, [r7, #12]
    9de0:	f7ff ff4e 	bl	9c80 <emit_get_cur_to_write_bytecode>
    9de4:	61b8      	str	r0, [r7, #24]
    while (p != buf + sizeof(buf) - 1) {
    9de6:	e00a      	b.n	9dfe <emit_write_bytecode_byte_int+0xb6>
        *c++ = *p++ | 0x80;
    9de8:	69bb      	ldr	r3, [r7, #24]
    9dea:	1c5a      	adds	r2, r3, #1
    9dec:	61ba      	str	r2, [r7, #24]
    9dee:	69fa      	ldr	r2, [r7, #28]
    9df0:	1c51      	adds	r1, r2, #1
    9df2:	61f9      	str	r1, [r7, #28]
    9df4:	7812      	ldrb	r2, [r2, #0]
    9df6:	f062 027f 	orn	r2, r2, #127	; 0x7f
    9dfa:	b2d2      	uxtb	r2, r2
    9dfc:	701a      	strb	r2, [r3, #0]
    while (p != buf + sizeof(buf) - 1) {
    9dfe:	f107 0310 	add.w	r3, r7, #16
    9e02:	3304      	adds	r3, #4
    9e04:	69fa      	ldr	r2, [r7, #28]
    9e06:	4293      	cmp	r3, r2
    9e08:	d1ee      	bne.n	9de8 <emit_write_bytecode_byte_int+0xa0>
    }
    *c = *p;
    9e0a:	69fb      	ldr	r3, [r7, #28]
    9e0c:	781a      	ldrb	r2, [r3, #0]
    9e0e:	69bb      	ldr	r3, [r7, #24]
    9e10:	701a      	strb	r2, [r3, #0]
}
    9e12:	bf00      	nop
    9e14:	3720      	adds	r7, #32
    9e16:	46bd      	mov	sp, r7
    9e18:	bd80      	pop	{r7, pc}
    9e1a:	bf00      	nop

00009e1c <emit_write_bytecode_byte_uint>:

STATIC void emit_write_bytecode_byte_uint(emit_t *emit, byte b, mp_uint_t val) {
    9e1c:	b580      	push	{r7, lr}
    9e1e:	b084      	sub	sp, #16
    9e20:	af00      	add	r7, sp, #0
    9e22:	60f8      	str	r0, [r7, #12]
    9e24:	460b      	mov	r3, r1
    9e26:	607a      	str	r2, [r7, #4]
    9e28:	72fb      	strb	r3, [r7, #11]
    emit_write_bytecode_byte(emit, b);
    9e2a:	7afb      	ldrb	r3, [r7, #11]
    9e2c:	4619      	mov	r1, r3
    9e2e:	68f8      	ldr	r0, [r7, #12]
    9e30:	f7ff ff60 	bl	9cf4 <emit_write_bytecode_byte>
    emit_write_uint(emit, emit_get_cur_to_write_bytecode, val);
    9e34:	687a      	ldr	r2, [r7, #4]
    9e36:	4904      	ldr	r1, [pc, #16]	; (9e48 <emit_write_bytecode_byte_uint+0x2c>)
    9e38:	68f8      	ldr	r0, [r7, #12]
    9e3a:	f7ff fe79 	bl	9b30 <emit_write_uint>
}
    9e3e:	bf00      	nop
    9e40:	3710      	adds	r7, #16
    9e42:	46bd      	mov	sp, r7
    9e44:	bd80      	pop	{r7, pc}
    9e46:	bf00      	nop
    9e48:	00009c81 	.word	0x00009c81

00009e4c <emit_write_bytecode_byte_qstr>:
    }
    emit_write_bytecode_byte_uint(emit, b, n);
}
#endif

STATIC void emit_write_bytecode_byte_qstr(emit_t* emit, byte b, qstr qst) {
    9e4c:	b580      	push	{r7, lr}
    9e4e:	b084      	sub	sp, #16
    9e50:	af00      	add	r7, sp, #0
    9e52:	60f8      	str	r0, [r7, #12]
    9e54:	460b      	mov	r3, r1
    9e56:	607a      	str	r2, [r7, #4]
    9e58:	72fb      	strb	r3, [r7, #11]
    byte *c = emit_get_cur_to_write_bytecode(emit, 3);
    c[0] = b;
    c[1] = qst;
    c[2] = qst >> 8;
    #else
    emit_write_bytecode_byte_uint(emit, b, qst);
    9e5a:	7afb      	ldrb	r3, [r7, #11]
    9e5c:	687a      	ldr	r2, [r7, #4]
    9e5e:	4619      	mov	r1, r3
    9e60:	68f8      	ldr	r0, [r7, #12]
    9e62:	f7ff ffdb 	bl	9e1c <emit_write_bytecode_byte_uint>
    #endif
}
    9e66:	bf00      	nop
    9e68:	3710      	adds	r7, #16
    9e6a:	46bd      	mov	sp, r7
    9e6c:	bd80      	pop	{r7, pc}
    9e6e:	bf00      	nop

00009e70 <emit_write_bytecode_byte_obj>:

STATIC void emit_write_bytecode_byte_obj(emit_t *emit, byte b, mp_obj_t obj) {
    9e70:	b580      	push	{r7, lr}
    9e72:	b086      	sub	sp, #24
    9e74:	af00      	add	r7, sp, #0
    9e76:	60f8      	str	r0, [r7, #12]
    9e78:	460b      	mov	r3, r1
    9e7a:	607a      	str	r2, [r7, #4]
    9e7c:	72fb      	strb	r3, [r7, #11]
    emit_write_bytecode_byte_const(emit, b,
        emit->scope->num_pos_args + emit->scope->num_kwonly_args
        + emit->ct_cur_obj++, (mp_uint_t)obj);
    #else
    // aligns the pointer so it is friendly to GC
    emit_write_bytecode_byte(emit, b);
    9e7e:	7afb      	ldrb	r3, [r7, #11]
    9e80:	4619      	mov	r1, r3
    9e82:	68f8      	ldr	r0, [r7, #12]
    9e84:	f7ff ff36 	bl	9cf4 <emit_write_bytecode_byte>
    emit->bytecode_offset = (size_t)MP_ALIGN(emit->bytecode_offset, sizeof(mp_obj_t));
    9e88:	68fb      	ldr	r3, [r7, #12]
    9e8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    9e8c:	3303      	adds	r3, #3
    9e8e:	f023 0203 	bic.w	r2, r3, #3
    9e92:	68fb      	ldr	r3, [r7, #12]
    9e94:	629a      	str	r2, [r3, #40]	; 0x28
    mp_obj_t *c = (mp_obj_t*)emit_get_cur_to_write_bytecode(emit, sizeof(mp_obj_t));
    9e96:	2104      	movs	r1, #4
    9e98:	68f8      	ldr	r0, [r7, #12]
    9e9a:	f7ff fef1 	bl	9c80 <emit_get_cur_to_write_bytecode>
    9e9e:	6178      	str	r0, [r7, #20]
    // Verify thar c is already uint-aligned
    assert(c == MP_ALIGN(c, sizeof(mp_obj_t)));
    9ea0:	697b      	ldr	r3, [r7, #20]
    9ea2:	3303      	adds	r3, #3
    9ea4:	f023 0303 	bic.w	r3, r3, #3
    9ea8:	461a      	mov	r2, r3
    9eaa:	697b      	ldr	r3, [r7, #20]
    9eac:	429a      	cmp	r2, r3
    9eae:	d006      	beq.n	9ebe <emit_write_bytecode_byte_obj+0x4e>
    9eb0:	4b06      	ldr	r3, [pc, #24]	; (9ecc <emit_write_bytecode_byte_obj+0x5c>)
    9eb2:	4a07      	ldr	r2, [pc, #28]	; (9ed0 <emit_write_bytecode_byte_obj+0x60>)
    9eb4:	f44f 7182 	mov.w	r1, #260	; 0x104
    9eb8:	4806      	ldr	r0, [pc, #24]	; (9ed4 <emit_write_bytecode_byte_obj+0x64>)
    9eba:	f011 fc09 	bl	1b6d0 <__assert_func>
    *c = obj;
    9ebe:	697b      	ldr	r3, [r7, #20]
    9ec0:	687a      	ldr	r2, [r7, #4]
    9ec2:	601a      	str	r2, [r3, #0]
    #endif
}
    9ec4:	bf00      	nop
    9ec6:	3718      	adds	r7, #24
    9ec8:	46bd      	mov	sp, r7
    9eca:	bd80      	pop	{r7, pc}
    9ecc:	0002116c 	.word	0x0002116c
    9ed0:	00021328 	.word	0x00021328
    9ed4:	00021114 	.word	0x00021114

00009ed8 <emit_write_bytecode_byte_raw_code>:

STATIC void emit_write_bytecode_byte_raw_code(emit_t *emit, byte b, mp_raw_code_t *rc) {
    9ed8:	b580      	push	{r7, lr}
    9eda:	b086      	sub	sp, #24
    9edc:	af00      	add	r7, sp, #0
    9ede:	60f8      	str	r0, [r7, #12]
    9ee0:	460b      	mov	r3, r1
    9ee2:	607a      	str	r2, [r7, #4]
    9ee4:	72fb      	strb	r3, [r7, #11]
    emit_write_bytecode_byte_const(emit, b,
        emit->scope->num_pos_args + emit->scope->num_kwonly_args
        + emit->ct_num_obj + emit->ct_cur_raw_code++, (mp_uint_t)(uintptr_t)rc);
    #else
    // aligns the pointer so it is friendly to GC
    emit_write_bytecode_byte(emit, b);
    9ee6:	7afb      	ldrb	r3, [r7, #11]
    9ee8:	4619      	mov	r1, r3
    9eea:	68f8      	ldr	r0, [r7, #12]
    9eec:	f7ff ff02 	bl	9cf4 <emit_write_bytecode_byte>
    emit->bytecode_offset = (size_t)MP_ALIGN(emit->bytecode_offset, sizeof(void*));
    9ef0:	68fb      	ldr	r3, [r7, #12]
    9ef2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    9ef4:	3303      	adds	r3, #3
    9ef6:	f023 0203 	bic.w	r2, r3, #3
    9efa:	68fb      	ldr	r3, [r7, #12]
    9efc:	629a      	str	r2, [r3, #40]	; 0x28
    void **c = (void**)emit_get_cur_to_write_bytecode(emit, sizeof(void*));
    9efe:	2104      	movs	r1, #4
    9f00:	68f8      	ldr	r0, [r7, #12]
    9f02:	f7ff febd 	bl	9c80 <emit_get_cur_to_write_bytecode>
    9f06:	6178      	str	r0, [r7, #20]
    // Verify thar c is already uint-aligned
    assert(c == MP_ALIGN(c, sizeof(void*)));
    9f08:	697b      	ldr	r3, [r7, #20]
    9f0a:	3303      	adds	r3, #3
    9f0c:	f023 0303 	bic.w	r3, r3, #3
    9f10:	461a      	mov	r2, r3
    9f12:	697b      	ldr	r3, [r7, #20]
    9f14:	429a      	cmp	r2, r3
    9f16:	d006      	beq.n	9f26 <emit_write_bytecode_byte_raw_code+0x4e>
    9f18:	4b06      	ldr	r3, [pc, #24]	; (9f34 <emit_write_bytecode_byte_raw_code+0x5c>)
    9f1a:	4a07      	ldr	r2, [pc, #28]	; (9f38 <emit_write_bytecode_byte_raw_code+0x60>)
    9f1c:	f44f 718a 	mov.w	r1, #276	; 0x114
    9f20:	4806      	ldr	r0, [pc, #24]	; (9f3c <emit_write_bytecode_byte_raw_code+0x64>)
    9f22:	f011 fbd5 	bl	1b6d0 <__assert_func>
    *c = rc;
    9f26:	697b      	ldr	r3, [r7, #20]
    9f28:	687a      	ldr	r2, [r7, #4]
    9f2a:	601a      	str	r2, [r3, #0]
    #endif
}
    9f2c:	bf00      	nop
    9f2e:	3718      	adds	r7, #24
    9f30:	46bd      	mov	sp, r7
    9f32:	bd80      	pop	{r7, pc}
    9f34:	00021190 	.word	0x00021190
    9f38:	00021348 	.word	0x00021348
    9f3c:	00021114 	.word	0x00021114

00009f40 <emit_write_bytecode_byte_unsigned_label>:

// unsigned labels are relative to ip following this instruction, stored as 16 bits
STATIC void emit_write_bytecode_byte_unsigned_label(emit_t *emit, byte b1, mp_uint_t label) {
    9f40:	b580      	push	{r7, lr}
    9f42:	b086      	sub	sp, #24
    9f44:	af00      	add	r7, sp, #0
    9f46:	60f8      	str	r0, [r7, #12]
    9f48:	460b      	mov	r3, r1
    9f4a:	607a      	str	r2, [r7, #4]
    9f4c:	72fb      	strb	r3, [r7, #11]
    mp_uint_t bytecode_offset;
    if (emit->pass < MP_PASS_EMIT) {
    9f4e:	68fb      	ldr	r3, [r7, #12]
    9f50:	795b      	ldrb	r3, [r3, #5]
    9f52:	2b03      	cmp	r3, #3
    9f54:	d802      	bhi.n	9f5c <emit_write_bytecode_byte_unsigned_label+0x1c>
        bytecode_offset = 0;
    9f56:	2300      	movs	r3, #0
    9f58:	617b      	str	r3, [r7, #20]
    9f5a:	e00a      	b.n	9f72 <emit_write_bytecode_byte_unsigned_label+0x32>
    } else {
        bytecode_offset = emit->label_offsets[label] - emit->bytecode_offset - 3;
    9f5c:	68fb      	ldr	r3, [r7, #12]
    9f5e:	69da      	ldr	r2, [r3, #28]
    9f60:	687b      	ldr	r3, [r7, #4]
    9f62:	009b      	lsls	r3, r3, #2
    9f64:	4413      	add	r3, r2
    9f66:	681a      	ldr	r2, [r3, #0]
    9f68:	68fb      	ldr	r3, [r7, #12]
    9f6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    9f6c:	1ad3      	subs	r3, r2, r3
    9f6e:	3b03      	subs	r3, #3
    9f70:	617b      	str	r3, [r7, #20]
    }
    byte *c = emit_get_cur_to_write_bytecode(emit, 3);
    9f72:	2103      	movs	r1, #3
    9f74:	68f8      	ldr	r0, [r7, #12]
    9f76:	f7ff fe83 	bl	9c80 <emit_get_cur_to_write_bytecode>
    9f7a:	6138      	str	r0, [r7, #16]
    c[0] = b1;
    9f7c:	693b      	ldr	r3, [r7, #16]
    9f7e:	7afa      	ldrb	r2, [r7, #11]
    9f80:	701a      	strb	r2, [r3, #0]
    c[1] = bytecode_offset;
    9f82:	693b      	ldr	r3, [r7, #16]
    9f84:	3301      	adds	r3, #1
    9f86:	697a      	ldr	r2, [r7, #20]
    9f88:	b2d2      	uxtb	r2, r2
    9f8a:	701a      	strb	r2, [r3, #0]
    c[2] = bytecode_offset >> 8;
    9f8c:	693b      	ldr	r3, [r7, #16]
    9f8e:	3302      	adds	r3, #2
    9f90:	697a      	ldr	r2, [r7, #20]
    9f92:	0a12      	lsrs	r2, r2, #8
    9f94:	b2d2      	uxtb	r2, r2
    9f96:	701a      	strb	r2, [r3, #0]
}
    9f98:	bf00      	nop
    9f9a:	3718      	adds	r7, #24
    9f9c:	46bd      	mov	sp, r7
    9f9e:	bd80      	pop	{r7, pc}

00009fa0 <emit_write_bytecode_byte_signed_label>:

// signed labels are relative to ip following this instruction, stored as 16 bits, in excess
STATIC void emit_write_bytecode_byte_signed_label(emit_t *emit, byte b1, mp_uint_t label) {
    9fa0:	b580      	push	{r7, lr}
    9fa2:	b086      	sub	sp, #24
    9fa4:	af00      	add	r7, sp, #0
    9fa6:	60f8      	str	r0, [r7, #12]
    9fa8:	460b      	mov	r3, r1
    9faa:	607a      	str	r2, [r7, #4]
    9fac:	72fb      	strb	r3, [r7, #11]
    int bytecode_offset;
    if (emit->pass < MP_PASS_EMIT) {
    9fae:	68fb      	ldr	r3, [r7, #12]
    9fb0:	795b      	ldrb	r3, [r3, #5]
    9fb2:	2b03      	cmp	r3, #3
    9fb4:	d802      	bhi.n	9fbc <emit_write_bytecode_byte_signed_label+0x1c>
        bytecode_offset = 0;
    9fb6:	2300      	movs	r3, #0
    9fb8:	617b      	str	r3, [r7, #20]
    9fba:	e00c      	b.n	9fd6 <emit_write_bytecode_byte_signed_label+0x36>
    } else {
        bytecode_offset = emit->label_offsets[label] - emit->bytecode_offset - 3 + 0x8000;
    9fbc:	68fb      	ldr	r3, [r7, #12]
    9fbe:	69da      	ldr	r2, [r3, #28]
    9fc0:	687b      	ldr	r3, [r7, #4]
    9fc2:	009b      	lsls	r3, r3, #2
    9fc4:	4413      	add	r3, r2
    9fc6:	681a      	ldr	r2, [r3, #0]
    9fc8:	68fb      	ldr	r3, [r7, #12]
    9fca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    9fcc:	1ad3      	subs	r3, r2, r3
    9fce:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
    9fd2:	337d      	adds	r3, #125	; 0x7d
    9fd4:	617b      	str	r3, [r7, #20]
    }
    byte *c = emit_get_cur_to_write_bytecode(emit, 3);
    9fd6:	2103      	movs	r1, #3
    9fd8:	68f8      	ldr	r0, [r7, #12]
    9fda:	f7ff fe51 	bl	9c80 <emit_get_cur_to_write_bytecode>
    9fde:	6138      	str	r0, [r7, #16]
    c[0] = b1;
    9fe0:	693b      	ldr	r3, [r7, #16]
    9fe2:	7afa      	ldrb	r2, [r7, #11]
    9fe4:	701a      	strb	r2, [r3, #0]
    c[1] = bytecode_offset;
    9fe6:	693b      	ldr	r3, [r7, #16]
    9fe8:	3301      	adds	r3, #1
    9fea:	697a      	ldr	r2, [r7, #20]
    9fec:	b2d2      	uxtb	r2, r2
    9fee:	701a      	strb	r2, [r3, #0]
    c[2] = bytecode_offset >> 8;
    9ff0:	693b      	ldr	r3, [r7, #16]
    9ff2:	3302      	adds	r3, #2
    9ff4:	697a      	ldr	r2, [r7, #20]
    9ff6:	1212      	asrs	r2, r2, #8
    9ff8:	b2d2      	uxtb	r2, r2
    9ffa:	701a      	strb	r2, [r3, #0]
}
    9ffc:	bf00      	nop
    9ffe:	3718      	adds	r7, #24
    a000:	46bd      	mov	sp, r7
    a002:	bd80      	pop	{r7, pc}

0000a004 <mp_emit_bc_start_pass>:

void mp_emit_bc_start_pass(emit_t *emit, pass_kind_t pass, scope_t *scope) {
    a004:	b580      	push	{r7, lr}
    a006:	b08c      	sub	sp, #48	; 0x30
    a008:	af00      	add	r7, sp, #0
    a00a:	60f8      	str	r0, [r7, #12]
    a00c:	60b9      	str	r1, [r7, #8]
    a00e:	607a      	str	r2, [r7, #4]
    emit->pass = pass;
    a010:	68bb      	ldr	r3, [r7, #8]
    a012:	b2da      	uxtb	r2, r3
    a014:	68fb      	ldr	r3, [r7, #12]
    a016:	715a      	strb	r2, [r3, #5]
    emit->stack_size = 0;
    a018:	68fb      	ldr	r3, [r7, #12]
    a01a:	2200      	movs	r2, #0
    a01c:	609a      	str	r2, [r3, #8]
    emit->last_emit_was_return_value = false;
    a01e:	68fb      	ldr	r3, [r7, #12]
    a020:	2200      	movs	r2, #0
    a022:	719a      	strb	r2, [r3, #6]
    emit->scope = scope;
    a024:	68fb      	ldr	r3, [r7, #12]
    a026:	687a      	ldr	r2, [r7, #4]
    a028:	60da      	str	r2, [r3, #12]
    emit->last_source_line_offset = 0;
    a02a:	68fb      	ldr	r3, [r7, #12]
    a02c:	2200      	movs	r2, #0
    a02e:	611a      	str	r2, [r3, #16]
    emit->last_source_line = 1;
    a030:	68fb      	ldr	r3, [r7, #12]
    a032:	2201      	movs	r2, #1
    a034:	615a      	str	r2, [r3, #20]
    #ifndef NDEBUG
    // With debugging enabled labels are checked for unique assignment
    if (pass < MP_PASS_EMIT) {
    a036:	68bb      	ldr	r3, [r7, #8]
    a038:	2b03      	cmp	r3, #3
    a03a:	d809      	bhi.n	a050 <mp_emit_bc_start_pass+0x4c>
        memset(emit->label_offsets, -1, emit->max_num_labels * sizeof(mp_uint_t));
    a03c:	68fb      	ldr	r3, [r7, #12]
    a03e:	69d8      	ldr	r0, [r3, #28]
    a040:	68fb      	ldr	r3, [r7, #12]
    a042:	699b      	ldr	r3, [r3, #24]
    a044:	009b      	lsls	r3, r3, #2
    a046:	461a      	mov	r2, r3
    a048:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    a04c:	f012 feb0 	bl	1cdb0 <memset>
    }
    #endif
    emit->bytecode_offset = 0;
    a050:	68fb      	ldr	r3, [r7, #12]
    a052:	2200      	movs	r2, #0
    a054:	629a      	str	r2, [r3, #40]	; 0x28
    emit->code_info_offset = 0;
    a056:	68fb      	ldr	r3, [r7, #12]
    a058:	2200      	movs	r2, #0
    a05a:	621a      	str	r2, [r3, #32]

    // Write local state size and exception stack size.
    {
        mp_uint_t n_state = scope->num_locals + scope->stack_size;
    a05c:	687b      	ldr	r3, [r7, #4]
    a05e:	8c1b      	ldrh	r3, [r3, #32]
    a060:	461a      	mov	r2, r3
    a062:	687b      	ldr	r3, [r7, #4]
    a064:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
    a066:	4413      	add	r3, r2
    a068:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (n_state == 0) {
    a06a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    a06c:	2b00      	cmp	r3, #0
    a06e:	d101      	bne.n	a074 <mp_emit_bc_start_pass+0x70>
            // Need at least 1 entry in the state, in the case an exception is
            // propagated through this function, the exception is returned in
            // the highest slot in the state (fastn[0], see vm.c).
            n_state = 1;
    a070:	2301      	movs	r3, #1
    a072:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        emit_write_code_info_uint(emit, n_state);
    a074:	6af9      	ldr	r1, [r7, #44]	; 0x2c
    a076:	68f8      	ldr	r0, [r7, #12]
    a078:	f7ff fde2 	bl	9c40 <emit_write_code_info_uint>
        emit_write_code_info_uint(emit, scope->exc_stack_size);
    a07c:	687b      	ldr	r3, [r7, #4]
    a07e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
    a080:	4619      	mov	r1, r3
    a082:	68f8      	ldr	r0, [r7, #12]
    a084:	f7ff fddc 	bl	9c40 <emit_write_code_info_uint>
    }

    // Write scope flags and number of arguments.
    // TODO check that num args all fit in a byte
    emit_write_code_info_byte(emit, emit->scope->scope_flags);
    a088:	68fb      	ldr	r3, [r7, #12]
    a08a:	68db      	ldr	r3, [r3, #12]
    a08c:	7e1b      	ldrb	r3, [r3, #24]
    a08e:	4619      	mov	r1, r3
    a090:	68f8      	ldr	r0, [r7, #12]
    a092:	f7ff fdc3 	bl	9c1c <emit_write_code_info_byte>
    emit_write_code_info_byte(emit, emit->scope->num_pos_args);
    a096:	68fb      	ldr	r3, [r7, #12]
    a098:	68db      	ldr	r3, [r3, #12]
    a09a:	8b5b      	ldrh	r3, [r3, #26]
    a09c:	b2db      	uxtb	r3, r3
    a09e:	4619      	mov	r1, r3
    a0a0:	68f8      	ldr	r0, [r7, #12]
    a0a2:	f7ff fdbb 	bl	9c1c <emit_write_code_info_byte>
    emit_write_code_info_byte(emit, emit->scope->num_kwonly_args);
    a0a6:	68fb      	ldr	r3, [r7, #12]
    a0a8:	68db      	ldr	r3, [r3, #12]
    a0aa:	8b9b      	ldrh	r3, [r3, #28]
    a0ac:	b2db      	uxtb	r3, r3
    a0ae:	4619      	mov	r1, r3
    a0b0:	68f8      	ldr	r0, [r7, #12]
    a0b2:	f7ff fdb3 	bl	9c1c <emit_write_code_info_byte>
    emit_write_code_info_byte(emit, emit->scope->num_def_pos_args);
    a0b6:	68fb      	ldr	r3, [r7, #12]
    a0b8:	68db      	ldr	r3, [r3, #12]
    a0ba:	8bdb      	ldrh	r3, [r3, #30]
    a0bc:	b2db      	uxtb	r3, r3
    a0be:	4619      	mov	r1, r3
    a0c0:	68f8      	ldr	r0, [r7, #12]
    a0c2:	f7ff fdab 	bl	9c1c <emit_write_code_info_byte>

    // Write size of the rest of the code info.  We don't know how big this
    // variable uint will be on the MP_PASS_CODE_SIZE pass so we reserve 2 bytes
    // for it and hope that is enough!  TODO assert this or something.
    if (pass == MP_PASS_EMIT) {
    a0c6:	68bb      	ldr	r3, [r7, #8]
    a0c8:	2b04      	cmp	r3, #4
    a0ca:	d109      	bne.n	a0e0 <mp_emit_bc_start_pass+0xdc>
        emit_write_code_info_uint(emit, emit->code_info_size - emit->code_info_offset);
    a0cc:	68fb      	ldr	r3, [r7, #12]
    a0ce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    a0d0:	68fb      	ldr	r3, [r7, #12]
    a0d2:	6a1b      	ldr	r3, [r3, #32]
    a0d4:	1ad3      	subs	r3, r2, r3
    a0d6:	4619      	mov	r1, r3
    a0d8:	68f8      	ldr	r0, [r7, #12]
    a0da:	f7ff fdb1 	bl	9c40 <emit_write_code_info_uint>
    a0de:	e003      	b.n	a0e8 <mp_emit_bc_start_pass+0xe4>
    } else  {
        emit_get_cur_to_write_code_info(emit, 2);
    a0e0:	2102      	movs	r1, #2
    a0e2:	68f8      	ldr	r0, [r7, #12]
    a0e4:	f7ff fd64 	bl	9bb0 <emit_get_cur_to_write_code_info>
    }

    // Write the name and source file of this function.
    emit_write_code_info_qstr(emit, scope->simple_name);
    a0e8:	687b      	ldr	r3, [r7, #4]
    a0ea:	8a5b      	ldrh	r3, [r3, #18]
    a0ec:	4619      	mov	r1, r3
    a0ee:	68f8      	ldr	r0, [r7, #12]
    a0f0:	f7ff fdb6 	bl	9c60 <emit_write_code_info_qstr>
    emit_write_code_info_qstr(emit, scope->source_file);
    a0f4:	687b      	ldr	r3, [r7, #4]
    a0f6:	8a1b      	ldrh	r3, [r3, #16]
    a0f8:	4619      	mov	r1, r3
    a0fa:	68f8      	ldr	r0, [r7, #12]
    a0fc:	f7ff fdb0 	bl	9c60 <emit_write_code_info_qstr>

    // bytecode prelude: initialise closed over variables
    for (int i = 0; i < scope->id_info_len; i++) {
    a100:	2300      	movs	r3, #0
    a102:	62bb      	str	r3, [r7, #40]	; 0x28
    a104:	e01e      	b.n	a144 <mp_emit_bc_start_pass+0x140>
        id_info_t *id = &scope->id_info[i];
    a106:	687b      	ldr	r3, [r7, #4]
    a108:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    a10a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    a10c:	00db      	lsls	r3, r3, #3
    a10e:	4413      	add	r3, r2
    a110:	61bb      	str	r3, [r7, #24]
        if (id->kind == ID_INFO_KIND_CELL) {
    a112:	69bb      	ldr	r3, [r7, #24]
    a114:	781b      	ldrb	r3, [r3, #0]
    a116:	2b03      	cmp	r3, #3
    a118:	d111      	bne.n	a13e <mp_emit_bc_start_pass+0x13a>
            assert(id->local_num < 255);
    a11a:	69bb      	ldr	r3, [r7, #24]
    a11c:	885b      	ldrh	r3, [r3, #2]
    a11e:	2bfe      	cmp	r3, #254	; 0xfe
    a120:	d906      	bls.n	a130 <mp_emit_bc_start_pass+0x12c>
    a122:	4b2f      	ldr	r3, [pc, #188]	; (a1e0 <mp_emit_bc_start_pass+0x1dc>)
    a124:	4a2f      	ldr	r2, [pc, #188]	; (a1e4 <mp_emit_bc_start_pass+0x1e0>)
    a126:	f44f 71b5 	mov.w	r1, #362	; 0x16a
    a12a:	482f      	ldr	r0, [pc, #188]	; (a1e8 <mp_emit_bc_start_pass+0x1e4>)
    a12c:	f011 fad0 	bl	1b6d0 <__assert_func>
            emit_write_bytecode_byte(emit, id->local_num); // write the local which should be converted to a cell
    a130:	69bb      	ldr	r3, [r7, #24]
    a132:	885b      	ldrh	r3, [r3, #2]
    a134:	b2db      	uxtb	r3, r3
    a136:	4619      	mov	r1, r3
    a138:	68f8      	ldr	r0, [r7, #12]
    a13a:	f7ff fddb 	bl	9cf4 <emit_write_bytecode_byte>
    for (int i = 0; i < scope->id_info_len; i++) {
    a13e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    a140:	3301      	adds	r3, #1
    a142:	62bb      	str	r3, [r7, #40]	; 0x28
    a144:	687b      	ldr	r3, [r7, #4]
    a146:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    a148:	461a      	mov	r2, r3
    a14a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    a14c:	429a      	cmp	r2, r3
    a14e:	dcda      	bgt.n	a106 <mp_emit_bc_start_pass+0x102>
        }
    }
    emit_write_bytecode_byte(emit, 255); // end of list sentinel
    a150:	21ff      	movs	r1, #255	; 0xff
    a152:	68f8      	ldr	r0, [r7, #12]
    a154:	f7ff fdce 	bl	9cf4 <emit_write_bytecode_byte>
    #if MICROPY_PERSISTENT_CODE
    emit->ct_cur_obj = 0;
    emit->ct_cur_raw_code = 0;
    #endif

    if (pass == MP_PASS_EMIT) {
    a158:	68bb      	ldr	r3, [r7, #8]
    a15a:	2b04      	cmp	r3, #4
    a15c:	d13c      	bne.n	a1d8 <mp_emit_bc_start_pass+0x1d4>
        // parameter we use "*" as its name (since no argument can ever be named
        // "*").  We could use a blank qstr but "*" is better for debugging.
        // Note: there is some wasted RAM here for the case of storing a qstr
        // for each closed-over variable, and maybe there is a better way to do
        // it, but that would require changes to mp_setup_code_state.
        for (int i = 0; i < scope->num_pos_args + scope->num_kwonly_args; i++) {
    a15e:	2300      	movs	r3, #0
    a160:	627b      	str	r3, [r7, #36]	; 0x24
    a162:	e030      	b.n	a1c6 <mp_emit_bc_start_pass+0x1c2>
            qstr qst = MP_QSTR__star_;
    a164:	2327      	movs	r3, #39	; 0x27
    a166:	623b      	str	r3, [r7, #32]
            for (int j = 0; j < scope->id_info_len; ++j) {
    a168:	2300      	movs	r3, #0
    a16a:	61fb      	str	r3, [r7, #28]
    a16c:	e018      	b.n	a1a0 <mp_emit_bc_start_pass+0x19c>
                id_info_t *id = &scope->id_info[j];
    a16e:	687b      	ldr	r3, [r7, #4]
    a170:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    a172:	69fb      	ldr	r3, [r7, #28]
    a174:	00db      	lsls	r3, r3, #3
    a176:	4413      	add	r3, r2
    a178:	617b      	str	r3, [r7, #20]
                if ((id->flags & ID_FLAG_IS_PARAM) && id->local_num == i) {
    a17a:	697b      	ldr	r3, [r7, #20]
    a17c:	785b      	ldrb	r3, [r3, #1]
    a17e:	f003 0301 	and.w	r3, r3, #1
    a182:	2b00      	cmp	r3, #0
    a184:	d009      	beq.n	a19a <mp_emit_bc_start_pass+0x196>
    a186:	697b      	ldr	r3, [r7, #20]
    a188:	885b      	ldrh	r3, [r3, #2]
    a18a:	461a      	mov	r2, r3
    a18c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    a18e:	429a      	cmp	r2, r3
    a190:	d103      	bne.n	a19a <mp_emit_bc_start_pass+0x196>
                    qst = id->qst;
    a192:	697b      	ldr	r3, [r7, #20]
    a194:	685b      	ldr	r3, [r3, #4]
    a196:	623b      	str	r3, [r7, #32]
                    break;
    a198:	e008      	b.n	a1ac <mp_emit_bc_start_pass+0x1a8>
            for (int j = 0; j < scope->id_info_len; ++j) {
    a19a:	69fb      	ldr	r3, [r7, #28]
    a19c:	3301      	adds	r3, #1
    a19e:	61fb      	str	r3, [r7, #28]
    a1a0:	687b      	ldr	r3, [r7, #4]
    a1a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    a1a4:	461a      	mov	r2, r3
    a1a6:	69fb      	ldr	r3, [r7, #28]
    a1a8:	429a      	cmp	r2, r3
    a1aa:	dce0      	bgt.n	a16e <mp_emit_bc_start_pass+0x16a>
                }
            }
            emit->const_table[i] = (mp_uint_t)MP_OBJ_NEW_QSTR(qst);
    a1ac:	68fb      	ldr	r3, [r7, #12]
    a1ae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    a1b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    a1b2:	009b      	lsls	r3, r3, #2
    a1b4:	4413      	add	r3, r2
    a1b6:	6a3a      	ldr	r2, [r7, #32]
    a1b8:	0092      	lsls	r2, r2, #2
    a1ba:	f042 0202 	orr.w	r2, r2, #2
    a1be:	601a      	str	r2, [r3, #0]
        for (int i = 0; i < scope->num_pos_args + scope->num_kwonly_args; i++) {
    a1c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    a1c2:	3301      	adds	r3, #1
    a1c4:	627b      	str	r3, [r7, #36]	; 0x24
    a1c6:	687b      	ldr	r3, [r7, #4]
    a1c8:	8b5b      	ldrh	r3, [r3, #26]
    a1ca:	461a      	mov	r2, r3
    a1cc:	687b      	ldr	r3, [r7, #4]
    a1ce:	8b9b      	ldrh	r3, [r3, #28]
    a1d0:	441a      	add	r2, r3
    a1d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    a1d4:	429a      	cmp	r2, r3
    a1d6:	dcc5      	bgt.n	a164 <mp_emit_bc_start_pass+0x160>
        }
    }
}
    a1d8:	bf00      	nop
    a1da:	3730      	adds	r7, #48	; 0x30
    a1dc:	46bd      	mov	sp, r7
    a1de:	bd80      	pop	{r7, pc}
    a1e0:	000211b0 	.word	0x000211b0
    a1e4:	0002136c 	.word	0x0002136c
    a1e8:	00021114 	.word	0x00021114

0000a1ec <mp_emit_bc_end_pass>:

void mp_emit_bc_end_pass(emit_t *emit) {
    a1ec:	b580      	push	{r7, lr}
    a1ee:	b082      	sub	sp, #8
    a1f0:	af00      	add	r7, sp, #0
    a1f2:	6078      	str	r0, [r7, #4]
    if (emit->pass == MP_PASS_SCOPE) {
    a1f4:	687b      	ldr	r3, [r7, #4]
    a1f6:	795b      	ldrb	r3, [r3, #5]
    a1f8:	2b01      	cmp	r3, #1
    a1fa:	d04d      	beq.n	a298 <mp_emit_bc_end_pass+0xac>
        return;
    }

    // check stack is back to zero size
    assert(emit->stack_size == 0);
    a1fc:	687b      	ldr	r3, [r7, #4]
    a1fe:	689b      	ldr	r3, [r3, #8]
    a200:	2b00      	cmp	r3, #0
    a202:	d006      	beq.n	a212 <mp_emit_bc_end_pass+0x26>
    a204:	4b26      	ldr	r3, [pc, #152]	; (a2a0 <mp_emit_bc_end_pass+0xb4>)
    a206:	4a27      	ldr	r2, [pc, #156]	; (a2a4 <mp_emit_bc_end_pass+0xb8>)
    a208:	f240 1199 	movw	r1, #409	; 0x199
    a20c:	4826      	ldr	r0, [pc, #152]	; (a2a8 <mp_emit_bc_end_pass+0xbc>)
    a20e:	f011 fa5f 	bl	1b6d0 <__assert_func>

    emit_write_code_info_byte(emit, 0); // end of line number info
    a212:	2100      	movs	r1, #0
    a214:	6878      	ldr	r0, [r7, #4]
    a216:	f7ff fd01 	bl	9c1c <emit_write_code_info_byte>
    #if MICROPY_PERSISTENT_CODE
    assert(emit->pass <= MP_PASS_STACK_SIZE || (emit->ct_num_obj == emit->ct_cur_obj));
    emit->ct_num_obj = emit->ct_cur_obj;
    #endif

    if (emit->pass == MP_PASS_CODE_SIZE) {
    a21a:	687b      	ldr	r3, [r7, #4]
    a21c:	795b      	ldrb	r3, [r3, #5]
    a21e:	2b03      	cmp	r3, #3
    a220:	d129      	bne.n	a276 <mp_emit_bc_end_pass+0x8a>
        #if !MICROPY_PERSISTENT_CODE
        // so bytecode is aligned
        emit->code_info_offset = (size_t)MP_ALIGN(emit->code_info_offset, sizeof(mp_uint_t));
    a222:	687b      	ldr	r3, [r7, #4]
    a224:	6a1b      	ldr	r3, [r3, #32]
    a226:	3303      	adds	r3, #3
    a228:	f023 0203 	bic.w	r2, r3, #3
    a22c:	687b      	ldr	r3, [r7, #4]
    a22e:	621a      	str	r2, [r3, #32]
        #endif

        // calculate size of total code-info + bytecode, in bytes
        emit->code_info_size = emit->code_info_offset;
    a230:	687b      	ldr	r3, [r7, #4]
    a232:	6a1a      	ldr	r2, [r3, #32]
    a234:	687b      	ldr	r3, [r7, #4]
    a236:	625a      	str	r2, [r3, #36]	; 0x24
        emit->bytecode_size = emit->bytecode_offset;
    a238:	687b      	ldr	r3, [r7, #4]
    a23a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    a23c:	687b      	ldr	r3, [r7, #4]
    a23e:	62da      	str	r2, [r3, #44]	; 0x2c
        emit->code_base = m_new0(byte, emit->code_info_size + emit->bytecode_size);
    a240:	687b      	ldr	r3, [r7, #4]
    a242:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    a244:	687b      	ldr	r3, [r7, #4]
    a246:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    a248:	4413      	add	r3, r2
    a24a:	4618      	mov	r0, r3
    a24c:	f7f6 f8a4 	bl	398 <m_malloc0>
    a250:	4602      	mov	r2, r0
    a252:	687b      	ldr	r3, [r7, #4]
    a254:	631a      	str	r2, [r3, #48]	; 0x30
        #if MICROPY_PERSISTENT_CODE
        emit->const_table = m_new0(mp_uint_t,
            emit->scope->num_pos_args + emit->scope->num_kwonly_args
            + emit->ct_cur_obj + emit->ct_cur_raw_code);
        #else
        emit->const_table = m_new0(mp_uint_t,
    a256:	687b      	ldr	r3, [r7, #4]
    a258:	68db      	ldr	r3, [r3, #12]
    a25a:	8b5b      	ldrh	r3, [r3, #26]
    a25c:	461a      	mov	r2, r3
    a25e:	687b      	ldr	r3, [r7, #4]
    a260:	68db      	ldr	r3, [r3, #12]
    a262:	8b9b      	ldrh	r3, [r3, #28]
    a264:	4413      	add	r3, r2
    a266:	009b      	lsls	r3, r3, #2
    a268:	4618      	mov	r0, r3
    a26a:	f7f6 f895 	bl	398 <m_malloc0>
    a26e:	4602      	mov	r2, r0
    a270:	687b      	ldr	r3, [r7, #4]
    a272:	635a      	str	r2, [r3, #52]	; 0x34
    a274:	e011      	b.n	a29a <mp_emit_bc_end_pass+0xae>
            emit->scope->num_pos_args + emit->scope->num_kwonly_args);
        #endif

    } else if (emit->pass == MP_PASS_EMIT) {
    a276:	687b      	ldr	r3, [r7, #4]
    a278:	795b      	ldrb	r3, [r3, #5]
    a27a:	2b04      	cmp	r3, #4
    a27c:	d10d      	bne.n	a29a <mp_emit_bc_end_pass+0xae>
        mp_emit_glue_assign_bytecode(emit->scope->raw_code, emit->code_base,
    a27e:	687b      	ldr	r3, [r7, #4]
    a280:	68db      	ldr	r3, [r3, #12]
    a282:	6958      	ldr	r0, [r3, #20]
    a284:	687b      	ldr	r3, [r7, #4]
    a286:	6b19      	ldr	r1, [r3, #48]	; 0x30
            #if MICROPY_PERSISTENT_CODE_SAVE || MICROPY_DEBUG_PRINTERS
            emit->code_info_size + emit->bytecode_size,
            #endif
            emit->const_table,
    a288:	687b      	ldr	r3, [r7, #4]
    a28a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
            #if MICROPY_PERSISTENT_CODE_SAVE
            emit->ct_cur_obj, emit->ct_cur_raw_code,
            #endif
            emit->scope->scope_flags);
    a28c:	687b      	ldr	r3, [r7, #4]
    a28e:	68db      	ldr	r3, [r3, #12]
    a290:	7e1b      	ldrb	r3, [r3, #24]
        mp_emit_glue_assign_bytecode(emit->scope->raw_code, emit->code_base,
    a292:	f001 f8e9 	bl	b468 <mp_emit_glue_assign_bytecode>
    a296:	e000      	b.n	a29a <mp_emit_bc_end_pass+0xae>
        return;
    a298:	bf00      	nop
    }
}
    a29a:	3708      	adds	r7, #8
    a29c:	46bd      	mov	sp, r7
    a29e:	bd80      	pop	{r7, pc}
    a2a0:	000211c4 	.word	0x000211c4
    a2a4:	00021384 	.word	0x00021384
    a2a8:	00021114 	.word	0x00021114

0000a2ac <mp_emit_bc_last_emit_was_return_value>:

bool mp_emit_bc_last_emit_was_return_value(emit_t *emit) {
    a2ac:	b480      	push	{r7}
    a2ae:	b083      	sub	sp, #12
    a2b0:	af00      	add	r7, sp, #0
    a2b2:	6078      	str	r0, [r7, #4]
    return emit->last_emit_was_return_value;
    a2b4:	687b      	ldr	r3, [r7, #4]
    a2b6:	799b      	ldrb	r3, [r3, #6]
    a2b8:	2b00      	cmp	r3, #0
    a2ba:	bf14      	ite	ne
    a2bc:	2301      	movne	r3, #1
    a2be:	2300      	moveq	r3, #0
    a2c0:	b2db      	uxtb	r3, r3
}
    a2c2:	4618      	mov	r0, r3
    a2c4:	370c      	adds	r7, #12
    a2c6:	46bd      	mov	sp, r7
    a2c8:	f85d 7b04 	ldr.w	r7, [sp], #4
    a2cc:	4770      	bx	lr
    a2ce:	bf00      	nop

0000a2d0 <mp_emit_bc_adjust_stack_size>:

void mp_emit_bc_adjust_stack_size(emit_t *emit, mp_int_t delta) {
    a2d0:	b580      	push	{r7, lr}
    a2d2:	b082      	sub	sp, #8
    a2d4:	af00      	add	r7, sp, #0
    a2d6:	6078      	str	r0, [r7, #4]
    a2d8:	6039      	str	r1, [r7, #0]
    if (emit->pass == MP_PASS_SCOPE) {
    a2da:	687b      	ldr	r3, [r7, #4]
    a2dc:	795b      	ldrb	r3, [r3, #5]
    a2de:	2b01      	cmp	r3, #1
    a2e0:	d023      	beq.n	a32a <mp_emit_bc_adjust_stack_size+0x5a>
        return;
    }
    assert((mp_int_t)emit->stack_size + delta >= 0);
    a2e2:	687b      	ldr	r3, [r7, #4]
    a2e4:	689a      	ldr	r2, [r3, #8]
    a2e6:	683b      	ldr	r3, [r7, #0]
    a2e8:	4413      	add	r3, r2
    a2ea:	2b00      	cmp	r3, #0
    a2ec:	da06      	bge.n	a2fc <mp_emit_bc_adjust_stack_size+0x2c>
    a2ee:	4b11      	ldr	r3, [pc, #68]	; (a334 <mp_emit_bc_adjust_stack_size+0x64>)
    a2f0:	4a11      	ldr	r2, [pc, #68]	; (a338 <mp_emit_bc_adjust_stack_size+0x68>)
    a2f2:	f240 11cb 	movw	r1, #459	; 0x1cb
    a2f6:	4811      	ldr	r0, [pc, #68]	; (a33c <mp_emit_bc_adjust_stack_size+0x6c>)
    a2f8:	f011 f9ea 	bl	1b6d0 <__assert_func>
    emit->stack_size += delta;
    a2fc:	687b      	ldr	r3, [r7, #4]
    a2fe:	689a      	ldr	r2, [r3, #8]
    a300:	683b      	ldr	r3, [r7, #0]
    a302:	441a      	add	r2, r3
    a304:	687b      	ldr	r3, [r7, #4]
    a306:	609a      	str	r2, [r3, #8]
    if (emit->stack_size > emit->scope->stack_size) {
    a308:	687b      	ldr	r3, [r7, #4]
    a30a:	689b      	ldr	r3, [r3, #8]
    a30c:	687a      	ldr	r2, [r7, #4]
    a30e:	68d2      	ldr	r2, [r2, #12]
    a310:	8c52      	ldrh	r2, [r2, #34]	; 0x22
    a312:	4293      	cmp	r3, r2
    a314:	dd05      	ble.n	a322 <mp_emit_bc_adjust_stack_size+0x52>
        emit->scope->stack_size = emit->stack_size;
    a316:	687b      	ldr	r3, [r7, #4]
    a318:	68db      	ldr	r3, [r3, #12]
    a31a:	687a      	ldr	r2, [r7, #4]
    a31c:	6892      	ldr	r2, [r2, #8]
    a31e:	b292      	uxth	r2, r2
    a320:	845a      	strh	r2, [r3, #34]	; 0x22
    }
    emit->last_emit_was_return_value = false;
    a322:	687b      	ldr	r3, [r7, #4]
    a324:	2200      	movs	r2, #0
    a326:	719a      	strb	r2, [r3, #6]
    a328:	e000      	b.n	a32c <mp_emit_bc_adjust_stack_size+0x5c>
        return;
    a32a:	bf00      	nop
}
    a32c:	3708      	adds	r7, #8
    a32e:	46bd      	mov	sp, r7
    a330:	bd80      	pop	{r7, pc}
    a332:	bf00      	nop
    a334:	000211dc 	.word	0x000211dc
    a338:	00021398 	.word	0x00021398
    a33c:	00021114 	.word	0x00021114

0000a340 <emit_bc_pre>:

static inline void emit_bc_pre(emit_t *emit, mp_int_t stack_size_delta) {
    a340:	b580      	push	{r7, lr}
    a342:	b082      	sub	sp, #8
    a344:	af00      	add	r7, sp, #0
    a346:	6078      	str	r0, [r7, #4]
    a348:	6039      	str	r1, [r7, #0]
    mp_emit_bc_adjust_stack_size(emit, stack_size_delta);
    a34a:	6839      	ldr	r1, [r7, #0]
    a34c:	6878      	ldr	r0, [r7, #4]
    a34e:	f7ff ffbf 	bl	a2d0 <mp_emit_bc_adjust_stack_size>
}
    a352:	bf00      	nop
    a354:	3708      	adds	r7, #8
    a356:	46bd      	mov	sp, r7
    a358:	bd80      	pop	{r7, pc}
    a35a:	bf00      	nop

0000a35c <mp_emit_bc_set_source_line>:

void mp_emit_bc_set_source_line(emit_t *emit, mp_uint_t source_line) {
    a35c:	b480      	push	{r7}
    a35e:	b083      	sub	sp, #12
    a360:	af00      	add	r7, sp, #0
    a362:	6078      	str	r0, [r7, #4]
    a364:	6039      	str	r1, [r7, #0]
    }
#else
    (void)emit;
    (void)source_line;
#endif
}
    a366:	bf00      	nop
    a368:	370c      	adds	r7, #12
    a36a:	46bd      	mov	sp, r7
    a36c:	f85d 7b04 	ldr.w	r7, [sp], #4
    a370:	4770      	bx	lr
    a372:	bf00      	nop

0000a374 <mp_emit_bc_label_assign>:

void mp_emit_bc_label_assign(emit_t *emit, mp_uint_t l) {
    a374:	b580      	push	{r7, lr}
    a376:	b082      	sub	sp, #8
    a378:	af00      	add	r7, sp, #0
    a37a:	6078      	str	r0, [r7, #4]
    a37c:	6039      	str	r1, [r7, #0]
    emit_bc_pre(emit, 0);
    a37e:	2100      	movs	r1, #0
    a380:	6878      	ldr	r0, [r7, #4]
    a382:	f7ff ffdd 	bl	a340 <emit_bc_pre>
    if (emit->pass == MP_PASS_SCOPE) {
    a386:	687b      	ldr	r3, [r7, #4]
    a388:	795b      	ldrb	r3, [r3, #5]
    a38a:	2b01      	cmp	r3, #1
    a38c:	d039      	beq.n	a402 <mp_emit_bc_label_assign+0x8e>
        return;
    }
    assert(l < emit->max_num_labels);
    a38e:	687b      	ldr	r3, [r7, #4]
    a390:	699a      	ldr	r2, [r3, #24]
    a392:	683b      	ldr	r3, [r7, #0]
    a394:	429a      	cmp	r2, r3
    a396:	d806      	bhi.n	a3a6 <mp_emit_bc_label_assign+0x32>
    a398:	4b1c      	ldr	r3, [pc, #112]	; (a40c <mp_emit_bc_label_assign+0x98>)
    a39a:	4a1d      	ldr	r2, [pc, #116]	; (a410 <mp_emit_bc_label_assign+0x9c>)
    a39c:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
    a3a0:	481c      	ldr	r0, [pc, #112]	; (a414 <mp_emit_bc_label_assign+0xa0>)
    a3a2:	f011 f995 	bl	1b6d0 <__assert_func>
    if (emit->pass < MP_PASS_EMIT) {
    a3a6:	687b      	ldr	r3, [r7, #4]
    a3a8:	795b      	ldrb	r3, [r3, #5]
    a3aa:	2b03      	cmp	r3, #3
    a3ac:	d818      	bhi.n	a3e0 <mp_emit_bc_label_assign+0x6c>
        // assign label offset
        assert(emit->label_offsets[l] == (mp_uint_t)-1);
    a3ae:	687b      	ldr	r3, [r7, #4]
    a3b0:	69da      	ldr	r2, [r3, #28]
    a3b2:	683b      	ldr	r3, [r7, #0]
    a3b4:	009b      	lsls	r3, r3, #2
    a3b6:	4413      	add	r3, r2
    a3b8:	681b      	ldr	r3, [r3, #0]
    a3ba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    a3be:	d006      	beq.n	a3ce <mp_emit_bc_label_assign+0x5a>
    a3c0:	4b15      	ldr	r3, [pc, #84]	; (a418 <mp_emit_bc_label_assign+0xa4>)
    a3c2:	4a13      	ldr	r2, [pc, #76]	; (a410 <mp_emit_bc_label_assign+0x9c>)
    a3c4:	f240 11f3 	movw	r1, #499	; 0x1f3
    a3c8:	4812      	ldr	r0, [pc, #72]	; (a414 <mp_emit_bc_label_assign+0xa0>)
    a3ca:	f011 f981 	bl	1b6d0 <__assert_func>
        emit->label_offsets[l] = emit->bytecode_offset;
    a3ce:	687b      	ldr	r3, [r7, #4]
    a3d0:	69da      	ldr	r2, [r3, #28]
    a3d2:	683b      	ldr	r3, [r7, #0]
    a3d4:	009b      	lsls	r3, r3, #2
    a3d6:	4413      	add	r3, r2
    a3d8:	687a      	ldr	r2, [r7, #4]
    a3da:	6a92      	ldr	r2, [r2, #40]	; 0x28
    a3dc:	601a      	str	r2, [r3, #0]
    a3de:	e011      	b.n	a404 <mp_emit_bc_label_assign+0x90>
    } else {
        // ensure label offset has not changed from MP_PASS_CODE_SIZE to MP_PASS_EMIT
        assert(emit->label_offsets[l] == emit->bytecode_offset);
    a3e0:	687b      	ldr	r3, [r7, #4]
    a3e2:	69da      	ldr	r2, [r3, #28]
    a3e4:	683b      	ldr	r3, [r7, #0]
    a3e6:	009b      	lsls	r3, r3, #2
    a3e8:	4413      	add	r3, r2
    a3ea:	681a      	ldr	r2, [r3, #0]
    a3ec:	687b      	ldr	r3, [r7, #4]
    a3ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    a3f0:	429a      	cmp	r2, r3
    a3f2:	d007      	beq.n	a404 <mp_emit_bc_label_assign+0x90>
    a3f4:	4b09      	ldr	r3, [pc, #36]	; (a41c <mp_emit_bc_label_assign+0xa8>)
    a3f6:	4a06      	ldr	r2, [pc, #24]	; (a410 <mp_emit_bc_label_assign+0x9c>)
    a3f8:	f240 11f7 	movw	r1, #503	; 0x1f7
    a3fc:	4805      	ldr	r0, [pc, #20]	; (a414 <mp_emit_bc_label_assign+0xa0>)
    a3fe:	f011 f967 	bl	1b6d0 <__assert_func>
        return;
    a402:	bf00      	nop
    }
}
    a404:	3708      	adds	r7, #8
    a406:	46bd      	mov	sp, r7
    a408:	bd80      	pop	{r7, pc}
    a40a:	bf00      	nop
    a40c:	00021204 	.word	0x00021204
    a410:	000213b8 	.word	0x000213b8
    a414:	00021114 	.word	0x00021114
    a418:	00021220 	.word	0x00021220
    a41c:	00021248 	.word	0x00021248

0000a420 <mp_emit_bc_import_name>:

void mp_emit_bc_import_name(emit_t *emit, qstr qst) {
    a420:	b580      	push	{r7, lr}
    a422:	b082      	sub	sp, #8
    a424:	af00      	add	r7, sp, #0
    a426:	6078      	str	r0, [r7, #4]
    a428:	6039      	str	r1, [r7, #0]
    emit_bc_pre(emit, -1);
    a42a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    a42e:	6878      	ldr	r0, [r7, #4]
    a430:	f7ff ff86 	bl	a340 <emit_bc_pre>
    emit_write_bytecode_byte_qstr(emit, MP_BC_IMPORT_NAME, qst);
    a434:	683a      	ldr	r2, [r7, #0]
    a436:	2168      	movs	r1, #104	; 0x68
    a438:	6878      	ldr	r0, [r7, #4]
    a43a:	f7ff fd07 	bl	9e4c <emit_write_bytecode_byte_qstr>
}
    a43e:	bf00      	nop
    a440:	3708      	adds	r7, #8
    a442:	46bd      	mov	sp, r7
    a444:	bd80      	pop	{r7, pc}
    a446:	bf00      	nop

0000a448 <mp_emit_bc_import_from>:

void mp_emit_bc_import_from(emit_t *emit, qstr qst) {
    a448:	b580      	push	{r7, lr}
    a44a:	b082      	sub	sp, #8
    a44c:	af00      	add	r7, sp, #0
    a44e:	6078      	str	r0, [r7, #4]
    a450:	6039      	str	r1, [r7, #0]
    emit_bc_pre(emit, 1);
    a452:	2101      	movs	r1, #1
    a454:	6878      	ldr	r0, [r7, #4]
    a456:	f7ff ff73 	bl	a340 <emit_bc_pre>
    emit_write_bytecode_byte_qstr(emit, MP_BC_IMPORT_FROM, qst);
    a45a:	683a      	ldr	r2, [r7, #0]
    a45c:	2169      	movs	r1, #105	; 0x69
    a45e:	6878      	ldr	r0, [r7, #4]
    a460:	f7ff fcf4 	bl	9e4c <emit_write_bytecode_byte_qstr>
}
    a464:	bf00      	nop
    a466:	3708      	adds	r7, #8
    a468:	46bd      	mov	sp, r7
    a46a:	bd80      	pop	{r7, pc}

0000a46c <mp_emit_bc_import_star>:

void mp_emit_bc_import_star(emit_t *emit) {
    a46c:	b580      	push	{r7, lr}
    a46e:	b082      	sub	sp, #8
    a470:	af00      	add	r7, sp, #0
    a472:	6078      	str	r0, [r7, #4]
    emit_bc_pre(emit, -1);
    a474:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    a478:	6878      	ldr	r0, [r7, #4]
    a47a:	f7ff ff61 	bl	a340 <emit_bc_pre>
    emit_write_bytecode_byte(emit, MP_BC_IMPORT_STAR);
    a47e:	216a      	movs	r1, #106	; 0x6a
    a480:	6878      	ldr	r0, [r7, #4]
    a482:	f7ff fc37 	bl	9cf4 <emit_write_bytecode_byte>
}
    a486:	bf00      	nop
    a488:	3708      	adds	r7, #8
    a48a:	46bd      	mov	sp, r7
    a48c:	bd80      	pop	{r7, pc}
    a48e:	bf00      	nop

0000a490 <mp_emit_bc_load_const_tok>:

void mp_emit_bc_load_const_tok(emit_t *emit, mp_token_kind_t tok) {
    a490:	b580      	push	{r7, lr}
    a492:	b082      	sub	sp, #8
    a494:	af00      	add	r7, sp, #0
    a496:	6078      	str	r0, [r7, #4]
    a498:	6039      	str	r1, [r7, #0]
    emit_bc_pre(emit, 1);
    a49a:	2101      	movs	r1, #1
    a49c:	6878      	ldr	r0, [r7, #4]
    a49e:	f7ff ff4f 	bl	a340 <emit_bc_pre>
    switch (tok) {
    a4a2:	683b      	ldr	r3, [r7, #0]
    a4a4:	2b0e      	cmp	r3, #14
    a4a6:	d008      	beq.n	a4ba <mp_emit_bc_load_const_tok+0x2a>
    a4a8:	2b0f      	cmp	r3, #15
    a4aa:	d00b      	beq.n	a4c4 <mp_emit_bc_load_const_tok+0x34>
    a4ac:	2b0d      	cmp	r3, #13
    a4ae:	d10e      	bne.n	a4ce <mp_emit_bc_load_const_tok+0x3e>
        case MP_TOKEN_KW_FALSE: emit_write_bytecode_byte(emit, MP_BC_LOAD_CONST_FALSE); break;
    a4b0:	2110      	movs	r1, #16
    a4b2:	6878      	ldr	r0, [r7, #4]
    a4b4:	f7ff fc1e 	bl	9cf4 <emit_write_bytecode_byte>
    a4b8:	e019      	b.n	a4ee <mp_emit_bc_load_const_tok+0x5e>
        case MP_TOKEN_KW_NONE: emit_write_bytecode_byte(emit, MP_BC_LOAD_CONST_NONE); break;
    a4ba:	2111      	movs	r1, #17
    a4bc:	6878      	ldr	r0, [r7, #4]
    a4be:	f7ff fc19 	bl	9cf4 <emit_write_bytecode_byte>
    a4c2:	e014      	b.n	a4ee <mp_emit_bc_load_const_tok+0x5e>
        case MP_TOKEN_KW_TRUE: emit_write_bytecode_byte(emit, MP_BC_LOAD_CONST_TRUE); break;
    a4c4:	2112      	movs	r1, #18
    a4c6:	6878      	ldr	r0, [r7, #4]
    a4c8:	f7ff fc14 	bl	9cf4 <emit_write_bytecode_byte>
    a4cc:	e00f      	b.n	a4ee <mp_emit_bc_load_const_tok+0x5e>
        default:
            assert(tok == MP_TOKEN_ELLIPSIS);
    a4ce:	683b      	ldr	r3, [r7, #0]
    a4d0:	2b0c      	cmp	r3, #12
    a4d2:	d006      	beq.n	a4e2 <mp_emit_bc_load_const_tok+0x52>
    a4d4:	4b08      	ldr	r3, [pc, #32]	; (a4f8 <mp_emit_bc_load_const_tok+0x68>)
    a4d6:	4a09      	ldr	r2, [pc, #36]	; (a4fc <mp_emit_bc_load_const_tok+0x6c>)
    a4d8:	f240 2111 	movw	r1, #529	; 0x211
    a4dc:	4808      	ldr	r0, [pc, #32]	; (a500 <mp_emit_bc_load_const_tok+0x70>)
    a4de:	f011 f8f7 	bl	1b6d0 <__assert_func>
            emit_write_bytecode_byte_obj(emit, MP_BC_LOAD_CONST_OBJ, MP_OBJ_FROM_PTR(&mp_const_ellipsis_obj));
    a4e2:	4a08      	ldr	r2, [pc, #32]	; (a504 <mp_emit_bc_load_const_tok+0x74>)
    a4e4:	2117      	movs	r1, #23
    a4e6:	6878      	ldr	r0, [r7, #4]
    a4e8:	f7ff fcc2 	bl	9e70 <emit_write_bytecode_byte_obj>
            break;
    a4ec:	bf00      	nop
    }
}
    a4ee:	bf00      	nop
    a4f0:	3708      	adds	r7, #8
    a4f2:	46bd      	mov	sp, r7
    a4f4:	bd80      	pop	{r7, pc}
    a4f6:	bf00      	nop
    a4f8:	00021278 	.word	0x00021278
    a4fc:	000213d0 	.word	0x000213d0
    a500:	00021114 	.word	0x00021114
    a504:	00023540 	.word	0x00023540

0000a508 <mp_emit_bc_load_const_small_int>:

void mp_emit_bc_load_const_small_int(emit_t *emit, mp_int_t arg) {
    a508:	b580      	push	{r7, lr}
    a50a:	b082      	sub	sp, #8
    a50c:	af00      	add	r7, sp, #0
    a50e:	6078      	str	r0, [r7, #4]
    a510:	6039      	str	r1, [r7, #0]
    emit_bc_pre(emit, 1);
    a512:	2101      	movs	r1, #1
    a514:	6878      	ldr	r0, [r7, #4]
    a516:	f7ff ff13 	bl	a340 <emit_bc_pre>
    if (-16 <= arg && arg <= 47) {
    a51a:	683b      	ldr	r3, [r7, #0]
    a51c:	f113 0f10 	cmn.w	r3, #16
    a520:	db0b      	blt.n	a53a <mp_emit_bc_load_const_small_int+0x32>
    a522:	683b      	ldr	r3, [r7, #0]
    a524:	2b2f      	cmp	r3, #47	; 0x2f
    a526:	dc08      	bgt.n	a53a <mp_emit_bc_load_const_small_int+0x32>
        emit_write_bytecode_byte(emit, MP_BC_LOAD_CONST_SMALL_INT_MULTI + 16 + arg);
    a528:	683b      	ldr	r3, [r7, #0]
    a52a:	b2db      	uxtb	r3, r3
    a52c:	3b80      	subs	r3, #128	; 0x80
    a52e:	b2db      	uxtb	r3, r3
    a530:	4619      	mov	r1, r3
    a532:	6878      	ldr	r0, [r7, #4]
    a534:	f7ff fbde 	bl	9cf4 <emit_write_bytecode_byte>
    a538:	e004      	b.n	a544 <mp_emit_bc_load_const_small_int+0x3c>
    } else {
        emit_write_bytecode_byte_int(emit, MP_BC_LOAD_CONST_SMALL_INT, arg);
    a53a:	683a      	ldr	r2, [r7, #0]
    a53c:	2114      	movs	r1, #20
    a53e:	6878      	ldr	r0, [r7, #4]
    a540:	f7ff fc02 	bl	9d48 <emit_write_bytecode_byte_int>
    }
}
    a544:	bf00      	nop
    a546:	3708      	adds	r7, #8
    a548:	46bd      	mov	sp, r7
    a54a:	bd80      	pop	{r7, pc}

0000a54c <mp_emit_bc_load_const_str>:

void mp_emit_bc_load_const_str(emit_t *emit, qstr qst) {
    a54c:	b580      	push	{r7, lr}
    a54e:	b082      	sub	sp, #8
    a550:	af00      	add	r7, sp, #0
    a552:	6078      	str	r0, [r7, #4]
    a554:	6039      	str	r1, [r7, #0]
    emit_bc_pre(emit, 1);
    a556:	2101      	movs	r1, #1
    a558:	6878      	ldr	r0, [r7, #4]
    a55a:	f7ff fef1 	bl	a340 <emit_bc_pre>
    emit_write_bytecode_byte_qstr(emit, MP_BC_LOAD_CONST_STRING, qst);
    a55e:	683a      	ldr	r2, [r7, #0]
    a560:	2116      	movs	r1, #22
    a562:	6878      	ldr	r0, [r7, #4]
    a564:	f7ff fc72 	bl	9e4c <emit_write_bytecode_byte_qstr>
}
    a568:	bf00      	nop
    a56a:	3708      	adds	r7, #8
    a56c:	46bd      	mov	sp, r7
    a56e:	bd80      	pop	{r7, pc}

0000a570 <mp_emit_bc_load_const_obj>:

void mp_emit_bc_load_const_obj(emit_t *emit, mp_obj_t obj) {
    a570:	b580      	push	{r7, lr}
    a572:	b082      	sub	sp, #8
    a574:	af00      	add	r7, sp, #0
    a576:	6078      	str	r0, [r7, #4]
    a578:	6039      	str	r1, [r7, #0]
    emit_bc_pre(emit, 1);
    a57a:	2101      	movs	r1, #1
    a57c:	6878      	ldr	r0, [r7, #4]
    a57e:	f7ff fedf 	bl	a340 <emit_bc_pre>
    emit_write_bytecode_byte_obj(emit, MP_BC_LOAD_CONST_OBJ, obj);
    a582:	683a      	ldr	r2, [r7, #0]
    a584:	2117      	movs	r1, #23
    a586:	6878      	ldr	r0, [r7, #4]
    a588:	f7ff fc72 	bl	9e70 <emit_write_bytecode_byte_obj>
}
    a58c:	bf00      	nop
    a58e:	3708      	adds	r7, #8
    a590:	46bd      	mov	sp, r7
    a592:	bd80      	pop	{r7, pc}

0000a594 <mp_emit_bc_load_null>:

void mp_emit_bc_load_null(emit_t *emit) {
    a594:	b580      	push	{r7, lr}
    a596:	b082      	sub	sp, #8
    a598:	af00      	add	r7, sp, #0
    a59a:	6078      	str	r0, [r7, #4]
    emit_bc_pre(emit, 1);
    a59c:	2101      	movs	r1, #1
    a59e:	6878      	ldr	r0, [r7, #4]
    a5a0:	f7ff fece 	bl	a340 <emit_bc_pre>
    emit_write_bytecode_byte(emit, MP_BC_LOAD_NULL);
    a5a4:	2118      	movs	r1, #24
    a5a6:	6878      	ldr	r0, [r7, #4]
    a5a8:	f7ff fba4 	bl	9cf4 <emit_write_bytecode_byte>
}
    a5ac:	bf00      	nop
    a5ae:	3708      	adds	r7, #8
    a5b0:	46bd      	mov	sp, r7
    a5b2:	bd80      	pop	{r7, pc}

0000a5b4 <mp_emit_bc_load_fast>:

void mp_emit_bc_load_fast(emit_t *emit, qstr qst, mp_uint_t local_num) {
    a5b4:	b580      	push	{r7, lr}
    a5b6:	b084      	sub	sp, #16
    a5b8:	af00      	add	r7, sp, #0
    a5ba:	60f8      	str	r0, [r7, #12]
    a5bc:	60b9      	str	r1, [r7, #8]
    a5be:	607a      	str	r2, [r7, #4]
    (void)qst;
    emit_bc_pre(emit, 1);
    a5c0:	2101      	movs	r1, #1
    a5c2:	68f8      	ldr	r0, [r7, #12]
    a5c4:	f7ff febc 	bl	a340 <emit_bc_pre>
    if (local_num <= 15) {
    a5c8:	687b      	ldr	r3, [r7, #4]
    a5ca:	2b0f      	cmp	r3, #15
    a5cc:	d808      	bhi.n	a5e0 <mp_emit_bc_load_fast+0x2c>
        emit_write_bytecode_byte(emit, MP_BC_LOAD_FAST_MULTI + local_num);
    a5ce:	687b      	ldr	r3, [r7, #4]
    a5d0:	b2db      	uxtb	r3, r3
    a5d2:	3b50      	subs	r3, #80	; 0x50
    a5d4:	b2db      	uxtb	r3, r3
    a5d6:	4619      	mov	r1, r3
    a5d8:	68f8      	ldr	r0, [r7, #12]
    a5da:	f7ff fb8b 	bl	9cf4 <emit_write_bytecode_byte>
    } else {
        emit_write_bytecode_byte_uint(emit, MP_BC_LOAD_FAST_N, local_num);
    }
}
    a5de:	e004      	b.n	a5ea <mp_emit_bc_load_fast+0x36>
        emit_write_bytecode_byte_uint(emit, MP_BC_LOAD_FAST_N, local_num);
    a5e0:	687a      	ldr	r2, [r7, #4]
    a5e2:	2119      	movs	r1, #25
    a5e4:	68f8      	ldr	r0, [r7, #12]
    a5e6:	f7ff fc19 	bl	9e1c <emit_write_bytecode_byte_uint>
}
    a5ea:	bf00      	nop
    a5ec:	3710      	adds	r7, #16
    a5ee:	46bd      	mov	sp, r7
    a5f0:	bd80      	pop	{r7, pc}
    a5f2:	bf00      	nop

0000a5f4 <mp_emit_bc_load_deref>:

void mp_emit_bc_load_deref(emit_t *emit, qstr qst, mp_uint_t local_num) {
    a5f4:	b580      	push	{r7, lr}
    a5f6:	b084      	sub	sp, #16
    a5f8:	af00      	add	r7, sp, #0
    a5fa:	60f8      	str	r0, [r7, #12]
    a5fc:	60b9      	str	r1, [r7, #8]
    a5fe:	607a      	str	r2, [r7, #4]
    (void)qst;
    emit_bc_pre(emit, 1);
    a600:	2101      	movs	r1, #1
    a602:	68f8      	ldr	r0, [r7, #12]
    a604:	f7ff fe9c 	bl	a340 <emit_bc_pre>
    emit_write_bytecode_byte_uint(emit, MP_BC_LOAD_DEREF, local_num);
    a608:	687a      	ldr	r2, [r7, #4]
    a60a:	211a      	movs	r1, #26
    a60c:	68f8      	ldr	r0, [r7, #12]
    a60e:	f7ff fc05 	bl	9e1c <emit_write_bytecode_byte_uint>
}
    a612:	bf00      	nop
    a614:	3710      	adds	r7, #16
    a616:	46bd      	mov	sp, r7
    a618:	bd80      	pop	{r7, pc}
    a61a:	bf00      	nop

0000a61c <mp_emit_bc_load_name>:

void mp_emit_bc_load_name(emit_t *emit, qstr qst) {
    a61c:	b580      	push	{r7, lr}
    a61e:	b082      	sub	sp, #8
    a620:	af00      	add	r7, sp, #0
    a622:	6078      	str	r0, [r7, #4]
    a624:	6039      	str	r1, [r7, #0]
    (void)qst;
    emit_bc_pre(emit, 1);
    a626:	2101      	movs	r1, #1
    a628:	6878      	ldr	r0, [r7, #4]
    a62a:	f7ff fe89 	bl	a340 <emit_bc_pre>
    emit_write_bytecode_byte_qstr(emit, MP_BC_LOAD_NAME, qst);
    a62e:	683a      	ldr	r2, [r7, #0]
    a630:	211b      	movs	r1, #27
    a632:	6878      	ldr	r0, [r7, #4]
    a634:	f7ff fc0a 	bl	9e4c <emit_write_bytecode_byte_qstr>
    if (MICROPY_OPT_CACHE_MAP_LOOKUP_IN_BYTECODE_DYNAMIC) {
        emit_write_bytecode_byte(emit, 0);
    }
}
    a638:	bf00      	nop
    a63a:	3708      	adds	r7, #8
    a63c:	46bd      	mov	sp, r7
    a63e:	bd80      	pop	{r7, pc}

0000a640 <mp_emit_bc_load_global>:

void mp_emit_bc_load_global(emit_t *emit, qstr qst) {
    a640:	b580      	push	{r7, lr}
    a642:	b082      	sub	sp, #8
    a644:	af00      	add	r7, sp, #0
    a646:	6078      	str	r0, [r7, #4]
    a648:	6039      	str	r1, [r7, #0]
    (void)qst;
    emit_bc_pre(emit, 1);
    a64a:	2101      	movs	r1, #1
    a64c:	6878      	ldr	r0, [r7, #4]
    a64e:	f7ff fe77 	bl	a340 <emit_bc_pre>
    emit_write_bytecode_byte_qstr(emit, MP_BC_LOAD_GLOBAL, qst);
    a652:	683a      	ldr	r2, [r7, #0]
    a654:	211c      	movs	r1, #28
    a656:	6878      	ldr	r0, [r7, #4]
    a658:	f7ff fbf8 	bl	9e4c <emit_write_bytecode_byte_qstr>
    if (MICROPY_OPT_CACHE_MAP_LOOKUP_IN_BYTECODE_DYNAMIC) {
        emit_write_bytecode_byte(emit, 0);
    }
}
    a65c:	bf00      	nop
    a65e:	3708      	adds	r7, #8
    a660:	46bd      	mov	sp, r7
    a662:	bd80      	pop	{r7, pc}

0000a664 <mp_emit_bc_load_attr>:

void mp_emit_bc_load_attr(emit_t *emit, qstr qst) {
    a664:	b580      	push	{r7, lr}
    a666:	b082      	sub	sp, #8
    a668:	af00      	add	r7, sp, #0
    a66a:	6078      	str	r0, [r7, #4]
    a66c:	6039      	str	r1, [r7, #0]
    emit_bc_pre(emit, 0);
    a66e:	2100      	movs	r1, #0
    a670:	6878      	ldr	r0, [r7, #4]
    a672:	f7ff fe65 	bl	a340 <emit_bc_pre>
    emit_write_bytecode_byte_qstr(emit, MP_BC_LOAD_ATTR, qst);
    a676:	683a      	ldr	r2, [r7, #0]
    a678:	211d      	movs	r1, #29
    a67a:	6878      	ldr	r0, [r7, #4]
    a67c:	f7ff fbe6 	bl	9e4c <emit_write_bytecode_byte_qstr>
    if (MICROPY_OPT_CACHE_MAP_LOOKUP_IN_BYTECODE_DYNAMIC) {
        emit_write_bytecode_byte(emit, 0);
    }
}
    a680:	bf00      	nop
    a682:	3708      	adds	r7, #8
    a684:	46bd      	mov	sp, r7
    a686:	bd80      	pop	{r7, pc}

0000a688 <mp_emit_bc_load_method>:

void mp_emit_bc_load_method(emit_t *emit, qstr qst, bool is_super) {
    a688:	b580      	push	{r7, lr}
    a68a:	b084      	sub	sp, #16
    a68c:	af00      	add	r7, sp, #0
    a68e:	60f8      	str	r0, [r7, #12]
    a690:	60b9      	str	r1, [r7, #8]
    a692:	4613      	mov	r3, r2
    a694:	71fb      	strb	r3, [r7, #7]
    emit_bc_pre(emit, 1 - 2 * is_super);
    a696:	79fb      	ldrb	r3, [r7, #7]
    a698:	005b      	lsls	r3, r3, #1
    a69a:	f1c3 0301 	rsb	r3, r3, #1
    a69e:	4619      	mov	r1, r3
    a6a0:	68f8      	ldr	r0, [r7, #12]
    a6a2:	f7ff fe4d 	bl	a340 <emit_bc_pre>
    emit_write_bytecode_byte_qstr(emit, is_super ? MP_BC_LOAD_SUPER_METHOD : MP_BC_LOAD_METHOD, qst);
    a6a6:	79fb      	ldrb	r3, [r7, #7]
    a6a8:	2b00      	cmp	r3, #0
    a6aa:	d001      	beq.n	a6b0 <mp_emit_bc_load_method+0x28>
    a6ac:	231f      	movs	r3, #31
    a6ae:	e000      	b.n	a6b2 <mp_emit_bc_load_method+0x2a>
    a6b0:	231e      	movs	r3, #30
    a6b2:	68ba      	ldr	r2, [r7, #8]
    a6b4:	4619      	mov	r1, r3
    a6b6:	68f8      	ldr	r0, [r7, #12]
    a6b8:	f7ff fbc8 	bl	9e4c <emit_write_bytecode_byte_qstr>
}
    a6bc:	bf00      	nop
    a6be:	3710      	adds	r7, #16
    a6c0:	46bd      	mov	sp, r7
    a6c2:	bd80      	pop	{r7, pc}

0000a6c4 <mp_emit_bc_load_build_class>:

void mp_emit_bc_load_build_class(emit_t *emit) {
    a6c4:	b580      	push	{r7, lr}
    a6c6:	b082      	sub	sp, #8
    a6c8:	af00      	add	r7, sp, #0
    a6ca:	6078      	str	r0, [r7, #4]
    emit_bc_pre(emit, 1);
    a6cc:	2101      	movs	r1, #1
    a6ce:	6878      	ldr	r0, [r7, #4]
    a6d0:	f7ff fe36 	bl	a340 <emit_bc_pre>
    emit_write_bytecode_byte(emit, MP_BC_LOAD_BUILD_CLASS);
    a6d4:	2120      	movs	r1, #32
    a6d6:	6878      	ldr	r0, [r7, #4]
    a6d8:	f7ff fb0c 	bl	9cf4 <emit_write_bytecode_byte>
}
    a6dc:	bf00      	nop
    a6de:	3708      	adds	r7, #8
    a6e0:	46bd      	mov	sp, r7
    a6e2:	bd80      	pop	{r7, pc}

0000a6e4 <mp_emit_bc_load_subscr>:

void mp_emit_bc_load_subscr(emit_t *emit) {
    a6e4:	b580      	push	{r7, lr}
    a6e6:	b082      	sub	sp, #8
    a6e8:	af00      	add	r7, sp, #0
    a6ea:	6078      	str	r0, [r7, #4]
    emit_bc_pre(emit, -1);
    a6ec:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    a6f0:	6878      	ldr	r0, [r7, #4]
    a6f2:	f7ff fe25 	bl	a340 <emit_bc_pre>
    emit_write_bytecode_byte(emit, MP_BC_LOAD_SUBSCR);
    a6f6:	2121      	movs	r1, #33	; 0x21
    a6f8:	6878      	ldr	r0, [r7, #4]
    a6fa:	f7ff fafb 	bl	9cf4 <emit_write_bytecode_byte>
}
    a6fe:	bf00      	nop
    a700:	3708      	adds	r7, #8
    a702:	46bd      	mov	sp, r7
    a704:	bd80      	pop	{r7, pc}
    a706:	bf00      	nop

0000a708 <mp_emit_bc_store_fast>:

void mp_emit_bc_store_fast(emit_t *emit, qstr qst, mp_uint_t local_num) {
    a708:	b580      	push	{r7, lr}
    a70a:	b084      	sub	sp, #16
    a70c:	af00      	add	r7, sp, #0
    a70e:	60f8      	str	r0, [r7, #12]
    a710:	60b9      	str	r1, [r7, #8]
    a712:	607a      	str	r2, [r7, #4]
    (void)qst;
    emit_bc_pre(emit, -1);
    a714:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    a718:	68f8      	ldr	r0, [r7, #12]
    a71a:	f7ff fe11 	bl	a340 <emit_bc_pre>
    if (local_num <= 15) {
    a71e:	687b      	ldr	r3, [r7, #4]
    a720:	2b0f      	cmp	r3, #15
    a722:	d808      	bhi.n	a736 <mp_emit_bc_store_fast+0x2e>
        emit_write_bytecode_byte(emit, MP_BC_STORE_FAST_MULTI + local_num);
    a724:	687b      	ldr	r3, [r7, #4]
    a726:	b2db      	uxtb	r3, r3
    a728:	3b40      	subs	r3, #64	; 0x40
    a72a:	b2db      	uxtb	r3, r3
    a72c:	4619      	mov	r1, r3
    a72e:	68f8      	ldr	r0, [r7, #12]
    a730:	f7ff fae0 	bl	9cf4 <emit_write_bytecode_byte>
    } else {
        emit_write_bytecode_byte_uint(emit, MP_BC_STORE_FAST_N, local_num);
    }
}
    a734:	e004      	b.n	a740 <mp_emit_bc_store_fast+0x38>
        emit_write_bytecode_byte_uint(emit, MP_BC_STORE_FAST_N, local_num);
    a736:	687a      	ldr	r2, [r7, #4]
    a738:	2122      	movs	r1, #34	; 0x22
    a73a:	68f8      	ldr	r0, [r7, #12]
    a73c:	f7ff fb6e 	bl	9e1c <emit_write_bytecode_byte_uint>
}
    a740:	bf00      	nop
    a742:	3710      	adds	r7, #16
    a744:	46bd      	mov	sp, r7
    a746:	bd80      	pop	{r7, pc}

0000a748 <mp_emit_bc_store_deref>:

void mp_emit_bc_store_deref(emit_t *emit, qstr qst, mp_uint_t local_num) {
    a748:	b580      	push	{r7, lr}
    a74a:	b084      	sub	sp, #16
    a74c:	af00      	add	r7, sp, #0
    a74e:	60f8      	str	r0, [r7, #12]
    a750:	60b9      	str	r1, [r7, #8]
    a752:	607a      	str	r2, [r7, #4]
    (void)qst;
    emit_bc_pre(emit, -1);
    a754:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    a758:	68f8      	ldr	r0, [r7, #12]
    a75a:	f7ff fdf1 	bl	a340 <emit_bc_pre>
    emit_write_bytecode_byte_uint(emit, MP_BC_STORE_DEREF, local_num);
    a75e:	687a      	ldr	r2, [r7, #4]
    a760:	2123      	movs	r1, #35	; 0x23
    a762:	68f8      	ldr	r0, [r7, #12]
    a764:	f7ff fb5a 	bl	9e1c <emit_write_bytecode_byte_uint>
}
    a768:	bf00      	nop
    a76a:	3710      	adds	r7, #16
    a76c:	46bd      	mov	sp, r7
    a76e:	bd80      	pop	{r7, pc}

0000a770 <mp_emit_bc_store_name>:

void mp_emit_bc_store_name(emit_t *emit, qstr qst) {
    a770:	b580      	push	{r7, lr}
    a772:	b082      	sub	sp, #8
    a774:	af00      	add	r7, sp, #0
    a776:	6078      	str	r0, [r7, #4]
    a778:	6039      	str	r1, [r7, #0]
    emit_bc_pre(emit, -1);
    a77a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    a77e:	6878      	ldr	r0, [r7, #4]
    a780:	f7ff fdde 	bl	a340 <emit_bc_pre>
    emit_write_bytecode_byte_qstr(emit, MP_BC_STORE_NAME, qst);
    a784:	683a      	ldr	r2, [r7, #0]
    a786:	2124      	movs	r1, #36	; 0x24
    a788:	6878      	ldr	r0, [r7, #4]
    a78a:	f7ff fb5f 	bl	9e4c <emit_write_bytecode_byte_qstr>
}
    a78e:	bf00      	nop
    a790:	3708      	adds	r7, #8
    a792:	46bd      	mov	sp, r7
    a794:	bd80      	pop	{r7, pc}
    a796:	bf00      	nop

0000a798 <mp_emit_bc_store_global>:

void mp_emit_bc_store_global(emit_t *emit, qstr qst) {
    a798:	b580      	push	{r7, lr}
    a79a:	b082      	sub	sp, #8
    a79c:	af00      	add	r7, sp, #0
    a79e:	6078      	str	r0, [r7, #4]
    a7a0:	6039      	str	r1, [r7, #0]
    emit_bc_pre(emit, -1);
    a7a2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    a7a6:	6878      	ldr	r0, [r7, #4]
    a7a8:	f7ff fdca 	bl	a340 <emit_bc_pre>
    emit_write_bytecode_byte_qstr(emit, MP_BC_STORE_GLOBAL, qst);
    a7ac:	683a      	ldr	r2, [r7, #0]
    a7ae:	2125      	movs	r1, #37	; 0x25
    a7b0:	6878      	ldr	r0, [r7, #4]
    a7b2:	f7ff fb4b 	bl	9e4c <emit_write_bytecode_byte_qstr>
}
    a7b6:	bf00      	nop
    a7b8:	3708      	adds	r7, #8
    a7ba:	46bd      	mov	sp, r7
    a7bc:	bd80      	pop	{r7, pc}
    a7be:	bf00      	nop

0000a7c0 <mp_emit_bc_store_attr>:

void mp_emit_bc_store_attr(emit_t *emit, qstr qst) {
    a7c0:	b580      	push	{r7, lr}
    a7c2:	b082      	sub	sp, #8
    a7c4:	af00      	add	r7, sp, #0
    a7c6:	6078      	str	r0, [r7, #4]
    a7c8:	6039      	str	r1, [r7, #0]
    emit_bc_pre(emit, -2);
    a7ca:	f06f 0101 	mvn.w	r1, #1
    a7ce:	6878      	ldr	r0, [r7, #4]
    a7d0:	f7ff fdb6 	bl	a340 <emit_bc_pre>
    emit_write_bytecode_byte_qstr(emit, MP_BC_STORE_ATTR, qst);
    a7d4:	683a      	ldr	r2, [r7, #0]
    a7d6:	2126      	movs	r1, #38	; 0x26
    a7d8:	6878      	ldr	r0, [r7, #4]
    a7da:	f7ff fb37 	bl	9e4c <emit_write_bytecode_byte_qstr>
    if (MICROPY_OPT_CACHE_MAP_LOOKUP_IN_BYTECODE_DYNAMIC) {
        emit_write_bytecode_byte(emit, 0);
    }
}
    a7de:	bf00      	nop
    a7e0:	3708      	adds	r7, #8
    a7e2:	46bd      	mov	sp, r7
    a7e4:	bd80      	pop	{r7, pc}
    a7e6:	bf00      	nop

0000a7e8 <mp_emit_bc_store_subscr>:

void mp_emit_bc_store_subscr(emit_t *emit) {
    a7e8:	b580      	push	{r7, lr}
    a7ea:	b082      	sub	sp, #8
    a7ec:	af00      	add	r7, sp, #0
    a7ee:	6078      	str	r0, [r7, #4]
    emit_bc_pre(emit, -3);
    a7f0:	f06f 0102 	mvn.w	r1, #2
    a7f4:	6878      	ldr	r0, [r7, #4]
    a7f6:	f7ff fda3 	bl	a340 <emit_bc_pre>
    emit_write_bytecode_byte(emit, MP_BC_STORE_SUBSCR);
    a7fa:	2127      	movs	r1, #39	; 0x27
    a7fc:	6878      	ldr	r0, [r7, #4]
    a7fe:	f7ff fa79 	bl	9cf4 <emit_write_bytecode_byte>
}
    a802:	bf00      	nop
    a804:	3708      	adds	r7, #8
    a806:	46bd      	mov	sp, r7
    a808:	bd80      	pop	{r7, pc}
    a80a:	bf00      	nop

0000a80c <mp_emit_bc_delete_fast>:

void mp_emit_bc_delete_fast(emit_t *emit, qstr qst, mp_uint_t local_num) {
    a80c:	b580      	push	{r7, lr}
    a80e:	b084      	sub	sp, #16
    a810:	af00      	add	r7, sp, #0
    a812:	60f8      	str	r0, [r7, #12]
    a814:	60b9      	str	r1, [r7, #8]
    a816:	607a      	str	r2, [r7, #4]
    (void)qst;
    emit_write_bytecode_byte_uint(emit, MP_BC_DELETE_FAST, local_num);
    a818:	687a      	ldr	r2, [r7, #4]
    a81a:	2128      	movs	r1, #40	; 0x28
    a81c:	68f8      	ldr	r0, [r7, #12]
    a81e:	f7ff fafd 	bl	9e1c <emit_write_bytecode_byte_uint>
}
    a822:	bf00      	nop
    a824:	3710      	adds	r7, #16
    a826:	46bd      	mov	sp, r7
    a828:	bd80      	pop	{r7, pc}
    a82a:	bf00      	nop

0000a82c <mp_emit_bc_delete_deref>:

void mp_emit_bc_delete_deref(emit_t *emit, qstr qst, mp_uint_t local_num) {
    a82c:	b580      	push	{r7, lr}
    a82e:	b084      	sub	sp, #16
    a830:	af00      	add	r7, sp, #0
    a832:	60f8      	str	r0, [r7, #12]
    a834:	60b9      	str	r1, [r7, #8]
    a836:	607a      	str	r2, [r7, #4]
    (void)qst;
    emit_write_bytecode_byte_uint(emit, MP_BC_DELETE_DEREF, local_num);
    a838:	687a      	ldr	r2, [r7, #4]
    a83a:	2129      	movs	r1, #41	; 0x29
    a83c:	68f8      	ldr	r0, [r7, #12]
    a83e:	f7ff faed 	bl	9e1c <emit_write_bytecode_byte_uint>
}
    a842:	bf00      	nop
    a844:	3710      	adds	r7, #16
    a846:	46bd      	mov	sp, r7
    a848:	bd80      	pop	{r7, pc}
    a84a:	bf00      	nop

0000a84c <mp_emit_bc_delete_name>:

void mp_emit_bc_delete_name(emit_t *emit, qstr qst) {
    a84c:	b580      	push	{r7, lr}
    a84e:	b082      	sub	sp, #8
    a850:	af00      	add	r7, sp, #0
    a852:	6078      	str	r0, [r7, #4]
    a854:	6039      	str	r1, [r7, #0]
    emit_bc_pre(emit, 0);
    a856:	2100      	movs	r1, #0
    a858:	6878      	ldr	r0, [r7, #4]
    a85a:	f7ff fd71 	bl	a340 <emit_bc_pre>
    emit_write_bytecode_byte_qstr(emit, MP_BC_DELETE_NAME, qst);
    a85e:	683a      	ldr	r2, [r7, #0]
    a860:	212a      	movs	r1, #42	; 0x2a
    a862:	6878      	ldr	r0, [r7, #4]
    a864:	f7ff faf2 	bl	9e4c <emit_write_bytecode_byte_qstr>
}
    a868:	bf00      	nop
    a86a:	3708      	adds	r7, #8
    a86c:	46bd      	mov	sp, r7
    a86e:	bd80      	pop	{r7, pc}

0000a870 <mp_emit_bc_delete_global>:

void mp_emit_bc_delete_global(emit_t *emit, qstr qst) {
    a870:	b580      	push	{r7, lr}
    a872:	b082      	sub	sp, #8
    a874:	af00      	add	r7, sp, #0
    a876:	6078      	str	r0, [r7, #4]
    a878:	6039      	str	r1, [r7, #0]
    emit_bc_pre(emit, 0);
    a87a:	2100      	movs	r1, #0
    a87c:	6878      	ldr	r0, [r7, #4]
    a87e:	f7ff fd5f 	bl	a340 <emit_bc_pre>
    emit_write_bytecode_byte_qstr(emit, MP_BC_DELETE_GLOBAL, qst);
    a882:	683a      	ldr	r2, [r7, #0]
    a884:	212b      	movs	r1, #43	; 0x2b
    a886:	6878      	ldr	r0, [r7, #4]
    a888:	f7ff fae0 	bl	9e4c <emit_write_bytecode_byte_qstr>
}
    a88c:	bf00      	nop
    a88e:	3708      	adds	r7, #8
    a890:	46bd      	mov	sp, r7
    a892:	bd80      	pop	{r7, pc}

0000a894 <mp_emit_bc_delete_attr>:

void mp_emit_bc_delete_attr(emit_t *emit, qstr qst) {
    a894:	b580      	push	{r7, lr}
    a896:	b082      	sub	sp, #8
    a898:	af00      	add	r7, sp, #0
    a89a:	6078      	str	r0, [r7, #4]
    a89c:	6039      	str	r1, [r7, #0]
    mp_emit_bc_load_null(emit);
    a89e:	6878      	ldr	r0, [r7, #4]
    a8a0:	f7ff fe78 	bl	a594 <mp_emit_bc_load_null>
    mp_emit_bc_rot_two(emit);
    a8a4:	6878      	ldr	r0, [r7, #4]
    a8a6:	f000 f84d 	bl	a944 <mp_emit_bc_rot_two>
    mp_emit_bc_store_attr(emit, qst);
    a8aa:	6839      	ldr	r1, [r7, #0]
    a8ac:	6878      	ldr	r0, [r7, #4]
    a8ae:	f7ff ff87 	bl	a7c0 <mp_emit_bc_store_attr>
}
    a8b2:	bf00      	nop
    a8b4:	3708      	adds	r7, #8
    a8b6:	46bd      	mov	sp, r7
    a8b8:	bd80      	pop	{r7, pc}
    a8ba:	bf00      	nop

0000a8bc <mp_emit_bc_delete_subscr>:

void mp_emit_bc_delete_subscr(emit_t *emit) {
    a8bc:	b580      	push	{r7, lr}
    a8be:	b082      	sub	sp, #8
    a8c0:	af00      	add	r7, sp, #0
    a8c2:	6078      	str	r0, [r7, #4]
    mp_emit_bc_load_null(emit);
    a8c4:	6878      	ldr	r0, [r7, #4]
    a8c6:	f7ff fe65 	bl	a594 <mp_emit_bc_load_null>
    mp_emit_bc_rot_three(emit);
    a8ca:	6878      	ldr	r0, [r7, #4]
    a8cc:	f000 f84a 	bl	a964 <mp_emit_bc_rot_three>
    mp_emit_bc_store_subscr(emit);
    a8d0:	6878      	ldr	r0, [r7, #4]
    a8d2:	f7ff ff89 	bl	a7e8 <mp_emit_bc_store_subscr>
}
    a8d6:	bf00      	nop
    a8d8:	3708      	adds	r7, #8
    a8da:	46bd      	mov	sp, r7
    a8dc:	bd80      	pop	{r7, pc}
    a8de:	bf00      	nop

0000a8e0 <mp_emit_bc_dup_top>:

void mp_emit_bc_dup_top(emit_t *emit) {
    a8e0:	b580      	push	{r7, lr}
    a8e2:	b082      	sub	sp, #8
    a8e4:	af00      	add	r7, sp, #0
    a8e6:	6078      	str	r0, [r7, #4]
    emit_bc_pre(emit, 1);
    a8e8:	2101      	movs	r1, #1
    a8ea:	6878      	ldr	r0, [r7, #4]
    a8ec:	f7ff fd28 	bl	a340 <emit_bc_pre>
    emit_write_bytecode_byte(emit, MP_BC_DUP_TOP);
    a8f0:	2130      	movs	r1, #48	; 0x30
    a8f2:	6878      	ldr	r0, [r7, #4]
    a8f4:	f7ff f9fe 	bl	9cf4 <emit_write_bytecode_byte>
}
    a8f8:	bf00      	nop
    a8fa:	3708      	adds	r7, #8
    a8fc:	46bd      	mov	sp, r7
    a8fe:	bd80      	pop	{r7, pc}

0000a900 <mp_emit_bc_dup_top_two>:

void mp_emit_bc_dup_top_two(emit_t *emit) {
    a900:	b580      	push	{r7, lr}
    a902:	b082      	sub	sp, #8
    a904:	af00      	add	r7, sp, #0
    a906:	6078      	str	r0, [r7, #4]
    emit_bc_pre(emit, 2);
    a908:	2102      	movs	r1, #2
    a90a:	6878      	ldr	r0, [r7, #4]
    a90c:	f7ff fd18 	bl	a340 <emit_bc_pre>
    emit_write_bytecode_byte(emit, MP_BC_DUP_TOP_TWO);
    a910:	2131      	movs	r1, #49	; 0x31
    a912:	6878      	ldr	r0, [r7, #4]
    a914:	f7ff f9ee 	bl	9cf4 <emit_write_bytecode_byte>
}
    a918:	bf00      	nop
    a91a:	3708      	adds	r7, #8
    a91c:	46bd      	mov	sp, r7
    a91e:	bd80      	pop	{r7, pc}

0000a920 <mp_emit_bc_pop_top>:

void mp_emit_bc_pop_top(emit_t *emit) {
    a920:	b580      	push	{r7, lr}
    a922:	b082      	sub	sp, #8
    a924:	af00      	add	r7, sp, #0
    a926:	6078      	str	r0, [r7, #4]
    emit_bc_pre(emit, -1);
    a928:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    a92c:	6878      	ldr	r0, [r7, #4]
    a92e:	f7ff fd07 	bl	a340 <emit_bc_pre>
    emit_write_bytecode_byte(emit, MP_BC_POP_TOP);
    a932:	2132      	movs	r1, #50	; 0x32
    a934:	6878      	ldr	r0, [r7, #4]
    a936:	f7ff f9dd 	bl	9cf4 <emit_write_bytecode_byte>
}
    a93a:	bf00      	nop
    a93c:	3708      	adds	r7, #8
    a93e:	46bd      	mov	sp, r7
    a940:	bd80      	pop	{r7, pc}
    a942:	bf00      	nop

0000a944 <mp_emit_bc_rot_two>:

void mp_emit_bc_rot_two(emit_t *emit) {
    a944:	b580      	push	{r7, lr}
    a946:	b082      	sub	sp, #8
    a948:	af00      	add	r7, sp, #0
    a94a:	6078      	str	r0, [r7, #4]
    emit_bc_pre(emit, 0);
    a94c:	2100      	movs	r1, #0
    a94e:	6878      	ldr	r0, [r7, #4]
    a950:	f7ff fcf6 	bl	a340 <emit_bc_pre>
    emit_write_bytecode_byte(emit, MP_BC_ROT_TWO);
    a954:	2133      	movs	r1, #51	; 0x33
    a956:	6878      	ldr	r0, [r7, #4]
    a958:	f7ff f9cc 	bl	9cf4 <emit_write_bytecode_byte>
}
    a95c:	bf00      	nop
    a95e:	3708      	adds	r7, #8
    a960:	46bd      	mov	sp, r7
    a962:	bd80      	pop	{r7, pc}

0000a964 <mp_emit_bc_rot_three>:

void mp_emit_bc_rot_three(emit_t *emit) {
    a964:	b580      	push	{r7, lr}
    a966:	b082      	sub	sp, #8
    a968:	af00      	add	r7, sp, #0
    a96a:	6078      	str	r0, [r7, #4]
    emit_bc_pre(emit, 0);
    a96c:	2100      	movs	r1, #0
    a96e:	6878      	ldr	r0, [r7, #4]
    a970:	f7ff fce6 	bl	a340 <emit_bc_pre>
    emit_write_bytecode_byte(emit, MP_BC_ROT_THREE);
    a974:	2134      	movs	r1, #52	; 0x34
    a976:	6878      	ldr	r0, [r7, #4]
    a978:	f7ff f9bc 	bl	9cf4 <emit_write_bytecode_byte>
}
    a97c:	bf00      	nop
    a97e:	3708      	adds	r7, #8
    a980:	46bd      	mov	sp, r7
    a982:	bd80      	pop	{r7, pc}

0000a984 <mp_emit_bc_jump>:

void mp_emit_bc_jump(emit_t *emit, mp_uint_t label) {
    a984:	b580      	push	{r7, lr}
    a986:	b082      	sub	sp, #8
    a988:	af00      	add	r7, sp, #0
    a98a:	6078      	str	r0, [r7, #4]
    a98c:	6039      	str	r1, [r7, #0]
    emit_bc_pre(emit, 0);
    a98e:	2100      	movs	r1, #0
    a990:	6878      	ldr	r0, [r7, #4]
    a992:	f7ff fcd5 	bl	a340 <emit_bc_pre>
    emit_write_bytecode_byte_signed_label(emit, MP_BC_JUMP, label);
    a996:	683a      	ldr	r2, [r7, #0]
    a998:	2135      	movs	r1, #53	; 0x35
    a99a:	6878      	ldr	r0, [r7, #4]
    a99c:	f7ff fb00 	bl	9fa0 <emit_write_bytecode_byte_signed_label>
}
    a9a0:	bf00      	nop
    a9a2:	3708      	adds	r7, #8
    a9a4:	46bd      	mov	sp, r7
    a9a6:	bd80      	pop	{r7, pc}

0000a9a8 <mp_emit_bc_pop_jump_if>:

void mp_emit_bc_pop_jump_if(emit_t *emit, bool cond, mp_uint_t label) {
    a9a8:	b580      	push	{r7, lr}
    a9aa:	b084      	sub	sp, #16
    a9ac:	af00      	add	r7, sp, #0
    a9ae:	60f8      	str	r0, [r7, #12]
    a9b0:	460b      	mov	r3, r1
    a9b2:	607a      	str	r2, [r7, #4]
    a9b4:	72fb      	strb	r3, [r7, #11]
    emit_bc_pre(emit, -1);
    a9b6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    a9ba:	68f8      	ldr	r0, [r7, #12]
    a9bc:	f7ff fcc0 	bl	a340 <emit_bc_pre>
    if (cond) {
    a9c0:	7afb      	ldrb	r3, [r7, #11]
    a9c2:	2b00      	cmp	r3, #0
    a9c4:	d005      	beq.n	a9d2 <mp_emit_bc_pop_jump_if+0x2a>
        emit_write_bytecode_byte_signed_label(emit, MP_BC_POP_JUMP_IF_TRUE, label);
    a9c6:	687a      	ldr	r2, [r7, #4]
    a9c8:	2136      	movs	r1, #54	; 0x36
    a9ca:	68f8      	ldr	r0, [r7, #12]
    a9cc:	f7ff fae8 	bl	9fa0 <emit_write_bytecode_byte_signed_label>
    } else {
        emit_write_bytecode_byte_signed_label(emit, MP_BC_POP_JUMP_IF_FALSE, label);
    }
}
    a9d0:	e004      	b.n	a9dc <mp_emit_bc_pop_jump_if+0x34>
        emit_write_bytecode_byte_signed_label(emit, MP_BC_POP_JUMP_IF_FALSE, label);
    a9d2:	687a      	ldr	r2, [r7, #4]
    a9d4:	2137      	movs	r1, #55	; 0x37
    a9d6:	68f8      	ldr	r0, [r7, #12]
    a9d8:	f7ff fae2 	bl	9fa0 <emit_write_bytecode_byte_signed_label>
}
    a9dc:	bf00      	nop
    a9de:	3710      	adds	r7, #16
    a9e0:	46bd      	mov	sp, r7
    a9e2:	bd80      	pop	{r7, pc}

0000a9e4 <mp_emit_bc_jump_if_or_pop>:

void mp_emit_bc_jump_if_or_pop(emit_t *emit, bool cond, mp_uint_t label) {
    a9e4:	b580      	push	{r7, lr}
    a9e6:	b084      	sub	sp, #16
    a9e8:	af00      	add	r7, sp, #0
    a9ea:	60f8      	str	r0, [r7, #12]
    a9ec:	460b      	mov	r3, r1
    a9ee:	607a      	str	r2, [r7, #4]
    a9f0:	72fb      	strb	r3, [r7, #11]
    emit_bc_pre(emit, -1);
    a9f2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    a9f6:	68f8      	ldr	r0, [r7, #12]
    a9f8:	f7ff fca2 	bl	a340 <emit_bc_pre>
    if (cond) {
    a9fc:	7afb      	ldrb	r3, [r7, #11]
    a9fe:	2b00      	cmp	r3, #0
    aa00:	d005      	beq.n	aa0e <mp_emit_bc_jump_if_or_pop+0x2a>
        emit_write_bytecode_byte_signed_label(emit, MP_BC_JUMP_IF_TRUE_OR_POP, label);
    aa02:	687a      	ldr	r2, [r7, #4]
    aa04:	2138      	movs	r1, #56	; 0x38
    aa06:	68f8      	ldr	r0, [r7, #12]
    aa08:	f7ff faca 	bl	9fa0 <emit_write_bytecode_byte_signed_label>
    } else {
        emit_write_bytecode_byte_signed_label(emit, MP_BC_JUMP_IF_FALSE_OR_POP, label);
    }
}
    aa0c:	e004      	b.n	aa18 <mp_emit_bc_jump_if_or_pop+0x34>
        emit_write_bytecode_byte_signed_label(emit, MP_BC_JUMP_IF_FALSE_OR_POP, label);
    aa0e:	687a      	ldr	r2, [r7, #4]
    aa10:	2139      	movs	r1, #57	; 0x39
    aa12:	68f8      	ldr	r0, [r7, #12]
    aa14:	f7ff fac4 	bl	9fa0 <emit_write_bytecode_byte_signed_label>
}
    aa18:	bf00      	nop
    aa1a:	3710      	adds	r7, #16
    aa1c:	46bd      	mov	sp, r7
    aa1e:	bd80      	pop	{r7, pc}

0000aa20 <mp_emit_bc_unwind_jump>:

void mp_emit_bc_unwind_jump(emit_t *emit, mp_uint_t label, mp_uint_t except_depth) {
    aa20:	b580      	push	{r7, lr}
    aa22:	b086      	sub	sp, #24
    aa24:	af00      	add	r7, sp, #0
    aa26:	60f8      	str	r0, [r7, #12]
    aa28:	60b9      	str	r1, [r7, #8]
    aa2a:	607a      	str	r2, [r7, #4]
    if (except_depth == 0) {
    aa2c:	687b      	ldr	r3, [r7, #4]
    aa2e:	2b00      	cmp	r3, #0
    aa30:	d122      	bne.n	aa78 <mp_emit_bc_unwind_jump+0x58>
        emit_bc_pre(emit, 0);
    aa32:	2100      	movs	r1, #0
    aa34:	68f8      	ldr	r0, [r7, #12]
    aa36:	f7ff fc83 	bl	a340 <emit_bc_pre>
        if (label & MP_EMIT_BREAK_FROM_FOR) {
    aa3a:	68bb      	ldr	r3, [r7, #8]
    aa3c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    aa40:	2b00      	cmp	r3, #0
    aa42:	d010      	beq.n	aa66 <mp_emit_bc_unwind_jump+0x46>
            // need to pop the iterator if we are breaking out of a for loop
            emit_write_bytecode_byte(emit, MP_BC_POP_TOP);
    aa44:	2132      	movs	r1, #50	; 0x32
    aa46:	68f8      	ldr	r0, [r7, #12]
    aa48:	f7ff f954 	bl	9cf4 <emit_write_bytecode_byte>
            // also pop the iter_buf
            for (size_t i = 0; i < MP_OBJ_ITER_BUF_NSLOTS - 1; ++i) {
    aa4c:	2300      	movs	r3, #0
    aa4e:	617b      	str	r3, [r7, #20]
    aa50:	e006      	b.n	aa60 <mp_emit_bc_unwind_jump+0x40>
                emit_write_bytecode_byte(emit, MP_BC_POP_TOP);
    aa52:	2132      	movs	r1, #50	; 0x32
    aa54:	68f8      	ldr	r0, [r7, #12]
    aa56:	f7ff f94d 	bl	9cf4 <emit_write_bytecode_byte>
            for (size_t i = 0; i < MP_OBJ_ITER_BUF_NSLOTS - 1; ++i) {
    aa5a:	697b      	ldr	r3, [r7, #20]
    aa5c:	3301      	adds	r3, #1
    aa5e:	617b      	str	r3, [r7, #20]
    aa60:	697b      	ldr	r3, [r7, #20]
    aa62:	2b02      	cmp	r3, #2
    aa64:	d9f5      	bls.n	aa52 <mp_emit_bc_unwind_jump+0x32>
            }
        }
        emit_write_bytecode_byte_signed_label(emit, MP_BC_JUMP, label & ~MP_EMIT_BREAK_FROM_FOR);
    aa66:	68bb      	ldr	r3, [r7, #8]
    aa68:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    aa6c:	461a      	mov	r2, r3
    aa6e:	2135      	movs	r1, #53	; 0x35
    aa70:	68f8      	ldr	r0, [r7, #12]
    aa72:	f7ff fa95 	bl	9fa0 <emit_write_bytecode_byte_signed_label>
    } else {
        emit_write_bytecode_byte_signed_label(emit, MP_BC_UNWIND_JUMP, label & ~MP_EMIT_BREAK_FROM_FOR);
        emit_write_bytecode_byte(emit, ((label & MP_EMIT_BREAK_FROM_FOR) ? 0x80 : 0) | except_depth);
    }
}
    aa76:	e017      	b.n	aaa8 <mp_emit_bc_unwind_jump+0x88>
        emit_write_bytecode_byte_signed_label(emit, MP_BC_UNWIND_JUMP, label & ~MP_EMIT_BREAK_FROM_FOR);
    aa78:	68bb      	ldr	r3, [r7, #8]
    aa7a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    aa7e:	461a      	mov	r2, r3
    aa80:	2146      	movs	r1, #70	; 0x46
    aa82:	68f8      	ldr	r0, [r7, #12]
    aa84:	f7ff fa8c 	bl	9fa0 <emit_write_bytecode_byte_signed_label>
        emit_write_bytecode_byte(emit, ((label & MP_EMIT_BREAK_FROM_FOR) ? 0x80 : 0) | except_depth);
    aa88:	68bb      	ldr	r3, [r7, #8]
    aa8a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    aa8e:	2b00      	cmp	r3, #0
    aa90:	d001      	beq.n	aa96 <mp_emit_bc_unwind_jump+0x76>
    aa92:	2280      	movs	r2, #128	; 0x80
    aa94:	e000      	b.n	aa98 <mp_emit_bc_unwind_jump+0x78>
    aa96:	2200      	movs	r2, #0
    aa98:	687b      	ldr	r3, [r7, #4]
    aa9a:	b2db      	uxtb	r3, r3
    aa9c:	4313      	orrs	r3, r2
    aa9e:	b2db      	uxtb	r3, r3
    aaa0:	4619      	mov	r1, r3
    aaa2:	68f8      	ldr	r0, [r7, #12]
    aaa4:	f7ff f926 	bl	9cf4 <emit_write_bytecode_byte>
}
    aaa8:	bf00      	nop
    aaaa:	3718      	adds	r7, #24
    aaac:	46bd      	mov	sp, r7
    aaae:	bd80      	pop	{r7, pc}

0000aab0 <mp_emit_bc_setup_with>:

void mp_emit_bc_setup_with(emit_t *emit, mp_uint_t label) {
    aab0:	b580      	push	{r7, lr}
    aab2:	b082      	sub	sp, #8
    aab4:	af00      	add	r7, sp, #0
    aab6:	6078      	str	r0, [r7, #4]
    aab8:	6039      	str	r1, [r7, #0]
    // The SETUP_WITH opcode pops ctx_mgr from the top of the stack
    // and then pushes 3 entries: __exit__, ctx_mgr, as_value.
    emit_bc_pre(emit, 2);
    aaba:	2102      	movs	r1, #2
    aabc:	6878      	ldr	r0, [r7, #4]
    aabe:	f7ff fc3f 	bl	a340 <emit_bc_pre>
    emit_write_bytecode_byte_unsigned_label(emit, MP_BC_SETUP_WITH, label);
    aac2:	683a      	ldr	r2, [r7, #0]
    aac4:	213d      	movs	r1, #61	; 0x3d
    aac6:	6878      	ldr	r0, [r7, #4]
    aac8:	f7ff fa3a 	bl	9f40 <emit_write_bytecode_byte_unsigned_label>
}
    aacc:	bf00      	nop
    aace:	3708      	adds	r7, #8
    aad0:	46bd      	mov	sp, r7
    aad2:	bd80      	pop	{r7, pc}

0000aad4 <mp_emit_bc_with_cleanup>:

void mp_emit_bc_with_cleanup(emit_t *emit, mp_uint_t label) {
    aad4:	b580      	push	{r7, lr}
    aad6:	b082      	sub	sp, #8
    aad8:	af00      	add	r7, sp, #0
    aada:	6078      	str	r0, [r7, #4]
    aadc:	6039      	str	r1, [r7, #0]
    mp_emit_bc_pop_block(emit);
    aade:	6878      	ldr	r0, [r7, #4]
    aae0:	f000 f88e 	bl	ac00 <mp_emit_bc_pop_block>
    mp_emit_bc_load_const_tok(emit, MP_TOKEN_KW_NONE);
    aae4:	210e      	movs	r1, #14
    aae6:	6878      	ldr	r0, [r7, #4]
    aae8:	f7ff fcd2 	bl	a490 <mp_emit_bc_load_const_tok>
    mp_emit_bc_label_assign(emit, label);
    aaec:	6839      	ldr	r1, [r7, #0]
    aaee:	6878      	ldr	r0, [r7, #4]
    aaf0:	f7ff fc40 	bl	a374 <mp_emit_bc_label_assign>
    emit_bc_pre(emit, 2); // ensure we have enough stack space to call the __exit__ method
    aaf4:	2102      	movs	r1, #2
    aaf6:	6878      	ldr	r0, [r7, #4]
    aaf8:	f7ff fc22 	bl	a340 <emit_bc_pre>
    emit_write_bytecode_byte(emit, MP_BC_WITH_CLEANUP);
    aafc:	213e      	movs	r1, #62	; 0x3e
    aafe:	6878      	ldr	r0, [r7, #4]
    ab00:	f7ff f8f8 	bl	9cf4 <emit_write_bytecode_byte>
    emit_bc_pre(emit, -4); // cancel the 2 above, plus the 2 from mp_emit_bc_setup_with
    ab04:	f06f 0103 	mvn.w	r1, #3
    ab08:	6878      	ldr	r0, [r7, #4]
    ab0a:	f7ff fc19 	bl	a340 <emit_bc_pre>
}
    ab0e:	bf00      	nop
    ab10:	3708      	adds	r7, #8
    ab12:	46bd      	mov	sp, r7
    ab14:	bd80      	pop	{r7, pc}
    ab16:	bf00      	nop

0000ab18 <mp_emit_bc_setup_except>:

void mp_emit_bc_setup_except(emit_t *emit, mp_uint_t label) {
    ab18:	b580      	push	{r7, lr}
    ab1a:	b082      	sub	sp, #8
    ab1c:	af00      	add	r7, sp, #0
    ab1e:	6078      	str	r0, [r7, #4]
    ab20:	6039      	str	r1, [r7, #0]
    emit_bc_pre(emit, 0);
    ab22:	2100      	movs	r1, #0
    ab24:	6878      	ldr	r0, [r7, #4]
    ab26:	f7ff fc0b 	bl	a340 <emit_bc_pre>
    emit_write_bytecode_byte_unsigned_label(emit, MP_BC_SETUP_EXCEPT, label);
    ab2a:	683a      	ldr	r2, [r7, #0]
    ab2c:	213f      	movs	r1, #63	; 0x3f
    ab2e:	6878      	ldr	r0, [r7, #4]
    ab30:	f7ff fa06 	bl	9f40 <emit_write_bytecode_byte_unsigned_label>
}
    ab34:	bf00      	nop
    ab36:	3708      	adds	r7, #8
    ab38:	46bd      	mov	sp, r7
    ab3a:	bd80      	pop	{r7, pc}

0000ab3c <mp_emit_bc_setup_finally>:

void mp_emit_bc_setup_finally(emit_t *emit, mp_uint_t label) {
    ab3c:	b580      	push	{r7, lr}
    ab3e:	b082      	sub	sp, #8
    ab40:	af00      	add	r7, sp, #0
    ab42:	6078      	str	r0, [r7, #4]
    ab44:	6039      	str	r1, [r7, #0]
    emit_bc_pre(emit, 0);
    ab46:	2100      	movs	r1, #0
    ab48:	6878      	ldr	r0, [r7, #4]
    ab4a:	f7ff fbf9 	bl	a340 <emit_bc_pre>
    emit_write_bytecode_byte_unsigned_label(emit, MP_BC_SETUP_FINALLY, label);
    ab4e:	683a      	ldr	r2, [r7, #0]
    ab50:	2140      	movs	r1, #64	; 0x40
    ab52:	6878      	ldr	r0, [r7, #4]
    ab54:	f7ff f9f4 	bl	9f40 <emit_write_bytecode_byte_unsigned_label>
}
    ab58:	bf00      	nop
    ab5a:	3708      	adds	r7, #8
    ab5c:	46bd      	mov	sp, r7
    ab5e:	bd80      	pop	{r7, pc}

0000ab60 <mp_emit_bc_end_finally>:

void mp_emit_bc_end_finally(emit_t *emit) {
    ab60:	b580      	push	{r7, lr}
    ab62:	b082      	sub	sp, #8
    ab64:	af00      	add	r7, sp, #0
    ab66:	6078      	str	r0, [r7, #4]
    emit_bc_pre(emit, -1);
    ab68:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    ab6c:	6878      	ldr	r0, [r7, #4]
    ab6e:	f7ff fbe7 	bl	a340 <emit_bc_pre>
    emit_write_bytecode_byte(emit, MP_BC_END_FINALLY);
    ab72:	2141      	movs	r1, #65	; 0x41
    ab74:	6878      	ldr	r0, [r7, #4]
    ab76:	f7ff f8bd 	bl	9cf4 <emit_write_bytecode_byte>
}
    ab7a:	bf00      	nop
    ab7c:	3708      	adds	r7, #8
    ab7e:	46bd      	mov	sp, r7
    ab80:	bd80      	pop	{r7, pc}
    ab82:	bf00      	nop

0000ab84 <mp_emit_bc_get_iter>:

void mp_emit_bc_get_iter(emit_t *emit, bool use_stack) {
    ab84:	b580      	push	{r7, lr}
    ab86:	b082      	sub	sp, #8
    ab88:	af00      	add	r7, sp, #0
    ab8a:	6078      	str	r0, [r7, #4]
    ab8c:	460b      	mov	r3, r1
    ab8e:	70fb      	strb	r3, [r7, #3]
    emit_bc_pre(emit, use_stack ? MP_OBJ_ITER_BUF_NSLOTS - 1 : 0);
    ab90:	78fb      	ldrb	r3, [r7, #3]
    ab92:	2b00      	cmp	r3, #0
    ab94:	d001      	beq.n	ab9a <mp_emit_bc_get_iter+0x16>
    ab96:	2303      	movs	r3, #3
    ab98:	e000      	b.n	ab9c <mp_emit_bc_get_iter+0x18>
    ab9a:	2300      	movs	r3, #0
    ab9c:	4619      	mov	r1, r3
    ab9e:	6878      	ldr	r0, [r7, #4]
    aba0:	f7ff fbce 	bl	a340 <emit_bc_pre>
    emit_write_bytecode_byte(emit, use_stack ? MP_BC_GET_ITER_STACK : MP_BC_GET_ITER);
    aba4:	78fb      	ldrb	r3, [r7, #3]
    aba6:	2b00      	cmp	r3, #0
    aba8:	d001      	beq.n	abae <mp_emit_bc_get_iter+0x2a>
    abaa:	2347      	movs	r3, #71	; 0x47
    abac:	e000      	b.n	abb0 <mp_emit_bc_get_iter+0x2c>
    abae:	2342      	movs	r3, #66	; 0x42
    abb0:	4619      	mov	r1, r3
    abb2:	6878      	ldr	r0, [r7, #4]
    abb4:	f7ff f89e 	bl	9cf4 <emit_write_bytecode_byte>
}
    abb8:	bf00      	nop
    abba:	3708      	adds	r7, #8
    abbc:	46bd      	mov	sp, r7
    abbe:	bd80      	pop	{r7, pc}

0000abc0 <mp_emit_bc_for_iter>:

void mp_emit_bc_for_iter(emit_t *emit, mp_uint_t label) {
    abc0:	b580      	push	{r7, lr}
    abc2:	b082      	sub	sp, #8
    abc4:	af00      	add	r7, sp, #0
    abc6:	6078      	str	r0, [r7, #4]
    abc8:	6039      	str	r1, [r7, #0]
    emit_bc_pre(emit, 1);
    abca:	2101      	movs	r1, #1
    abcc:	6878      	ldr	r0, [r7, #4]
    abce:	f7ff fbb7 	bl	a340 <emit_bc_pre>
    emit_write_bytecode_byte_unsigned_label(emit, MP_BC_FOR_ITER, label);
    abd2:	683a      	ldr	r2, [r7, #0]
    abd4:	2143      	movs	r1, #67	; 0x43
    abd6:	6878      	ldr	r0, [r7, #4]
    abd8:	f7ff f9b2 	bl	9f40 <emit_write_bytecode_byte_unsigned_label>
}
    abdc:	bf00      	nop
    abde:	3708      	adds	r7, #8
    abe0:	46bd      	mov	sp, r7
    abe2:	bd80      	pop	{r7, pc}

0000abe4 <mp_emit_bc_for_iter_end>:

void mp_emit_bc_for_iter_end(emit_t *emit) {
    abe4:	b580      	push	{r7, lr}
    abe6:	b082      	sub	sp, #8
    abe8:	af00      	add	r7, sp, #0
    abea:	6078      	str	r0, [r7, #4]
    emit_bc_pre(emit, -MP_OBJ_ITER_BUF_NSLOTS);
    abec:	f06f 0103 	mvn.w	r1, #3
    abf0:	6878      	ldr	r0, [r7, #4]
    abf2:	f7ff fba5 	bl	a340 <emit_bc_pre>
}
    abf6:	bf00      	nop
    abf8:	3708      	adds	r7, #8
    abfa:	46bd      	mov	sp, r7
    abfc:	bd80      	pop	{r7, pc}
    abfe:	bf00      	nop

0000ac00 <mp_emit_bc_pop_block>:

void mp_emit_bc_pop_block(emit_t *emit) {
    ac00:	b580      	push	{r7, lr}
    ac02:	b082      	sub	sp, #8
    ac04:	af00      	add	r7, sp, #0
    ac06:	6078      	str	r0, [r7, #4]
    emit_bc_pre(emit, 0);
    ac08:	2100      	movs	r1, #0
    ac0a:	6878      	ldr	r0, [r7, #4]
    ac0c:	f7ff fb98 	bl	a340 <emit_bc_pre>
    emit_write_bytecode_byte(emit, MP_BC_POP_BLOCK);
    ac10:	2144      	movs	r1, #68	; 0x44
    ac12:	6878      	ldr	r0, [r7, #4]
    ac14:	f7ff f86e 	bl	9cf4 <emit_write_bytecode_byte>
}
    ac18:	bf00      	nop
    ac1a:	3708      	adds	r7, #8
    ac1c:	46bd      	mov	sp, r7
    ac1e:	bd80      	pop	{r7, pc}

0000ac20 <mp_emit_bc_pop_except>:

void mp_emit_bc_pop_except(emit_t *emit) {
    ac20:	b580      	push	{r7, lr}
    ac22:	b082      	sub	sp, #8
    ac24:	af00      	add	r7, sp, #0
    ac26:	6078      	str	r0, [r7, #4]
    emit_bc_pre(emit, 0);
    ac28:	2100      	movs	r1, #0
    ac2a:	6878      	ldr	r0, [r7, #4]
    ac2c:	f7ff fb88 	bl	a340 <emit_bc_pre>
    emit_write_bytecode_byte(emit, MP_BC_POP_EXCEPT);
    ac30:	2145      	movs	r1, #69	; 0x45
    ac32:	6878      	ldr	r0, [r7, #4]
    ac34:	f7ff f85e 	bl	9cf4 <emit_write_bytecode_byte>
}
    ac38:	bf00      	nop
    ac3a:	3708      	adds	r7, #8
    ac3c:	46bd      	mov	sp, r7
    ac3e:	bd80      	pop	{r7, pc}

0000ac40 <mp_emit_bc_unary_op>:

void mp_emit_bc_unary_op(emit_t *emit, mp_unary_op_t op) {
    ac40:	b580      	push	{r7, lr}
    ac42:	b082      	sub	sp, #8
    ac44:	af00      	add	r7, sp, #0
    ac46:	6078      	str	r0, [r7, #4]
    ac48:	6039      	str	r1, [r7, #0]
    emit_bc_pre(emit, 0);
    ac4a:	2100      	movs	r1, #0
    ac4c:	6878      	ldr	r0, [r7, #4]
    ac4e:	f7ff fb77 	bl	a340 <emit_bc_pre>
    emit_write_bytecode_byte(emit, MP_BC_UNARY_OP_MULTI + op);
    ac52:	683b      	ldr	r3, [r7, #0]
    ac54:	b2db      	uxtb	r3, r3
    ac56:	3b30      	subs	r3, #48	; 0x30
    ac58:	b2db      	uxtb	r3, r3
    ac5a:	4619      	mov	r1, r3
    ac5c:	6878      	ldr	r0, [r7, #4]
    ac5e:	f7ff f849 	bl	9cf4 <emit_write_bytecode_byte>
}
    ac62:	bf00      	nop
    ac64:	3708      	adds	r7, #8
    ac66:	46bd      	mov	sp, r7
    ac68:	bd80      	pop	{r7, pc}
    ac6a:	bf00      	nop

0000ac6c <mp_emit_bc_binary_op>:

void mp_emit_bc_binary_op(emit_t *emit, mp_binary_op_t op) {
    ac6c:	b580      	push	{r7, lr}
    ac6e:	b084      	sub	sp, #16
    ac70:	af00      	add	r7, sp, #0
    ac72:	6078      	str	r0, [r7, #4]
    ac74:	6039      	str	r1, [r7, #0]
    bool invert = false;
    ac76:	2300      	movs	r3, #0
    ac78:	73fb      	strb	r3, [r7, #15]
    if (op == MP_BINARY_OP_NOT_IN) {
    ac7a:	683b      	ldr	r3, [r7, #0]
    ac7c:	2b24      	cmp	r3, #36	; 0x24
    ac7e:	d104      	bne.n	ac8a <mp_emit_bc_binary_op+0x1e>
        invert = true;
    ac80:	2301      	movs	r3, #1
    ac82:	73fb      	strb	r3, [r7, #15]
        op = MP_BINARY_OP_IN;
    ac84:	2306      	movs	r3, #6
    ac86:	603b      	str	r3, [r7, #0]
    ac88:	e006      	b.n	ac98 <mp_emit_bc_binary_op+0x2c>
    } else if (op == MP_BINARY_OP_IS_NOT) {
    ac8a:	683b      	ldr	r3, [r7, #0]
    ac8c:	2b25      	cmp	r3, #37	; 0x25
    ac8e:	d103      	bne.n	ac98 <mp_emit_bc_binary_op+0x2c>
        invert = true;
    ac90:	2301      	movs	r3, #1
    ac92:	73fb      	strb	r3, [r7, #15]
        op = MP_BINARY_OP_IS;
    ac94:	2307      	movs	r3, #7
    ac96:	603b      	str	r3, [r7, #0]
    }
    emit_bc_pre(emit, -1);
    ac98:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    ac9c:	6878      	ldr	r0, [r7, #4]
    ac9e:	f7ff fb4f 	bl	a340 <emit_bc_pre>
    emit_write_bytecode_byte(emit, MP_BC_BINARY_OP_MULTI + op);
    aca2:	683b      	ldr	r3, [r7, #0]
    aca4:	b2db      	uxtb	r3, r3
    aca6:	3b29      	subs	r3, #41	; 0x29
    aca8:	b2db      	uxtb	r3, r3
    acaa:	4619      	mov	r1, r3
    acac:	6878      	ldr	r0, [r7, #4]
    acae:	f7ff f821 	bl	9cf4 <emit_write_bytecode_byte>
    if (invert) {
    acb2:	7bfb      	ldrb	r3, [r7, #15]
    acb4:	2b00      	cmp	r3, #0
    acb6:	d007      	beq.n	acc8 <mp_emit_bc_binary_op+0x5c>
        emit_bc_pre(emit, 0);
    acb8:	2100      	movs	r1, #0
    acba:	6878      	ldr	r0, [r7, #4]
    acbc:	f7ff fb40 	bl	a340 <emit_bc_pre>
        emit_write_bytecode_byte(emit, MP_BC_UNARY_OP_MULTI + MP_UNARY_OP_NOT);
    acc0:	21d3      	movs	r1, #211	; 0xd3
    acc2:	6878      	ldr	r0, [r7, #4]
    acc4:	f7ff f816 	bl	9cf4 <emit_write_bytecode_byte>
    }
}
    acc8:	bf00      	nop
    acca:	3710      	adds	r7, #16
    accc:	46bd      	mov	sp, r7
    acce:	bd80      	pop	{r7, pc}

0000acd0 <mp_emit_bc_build_tuple>:

void mp_emit_bc_build_tuple(emit_t *emit, mp_uint_t n_args) {
    acd0:	b580      	push	{r7, lr}
    acd2:	b082      	sub	sp, #8
    acd4:	af00      	add	r7, sp, #0
    acd6:	6078      	str	r0, [r7, #4]
    acd8:	6039      	str	r1, [r7, #0]
    emit_bc_pre(emit, 1 - n_args);
    acda:	683b      	ldr	r3, [r7, #0]
    acdc:	f1c3 0301 	rsb	r3, r3, #1
    ace0:	4619      	mov	r1, r3
    ace2:	6878      	ldr	r0, [r7, #4]
    ace4:	f7ff fb2c 	bl	a340 <emit_bc_pre>
    emit_write_bytecode_byte_uint(emit, MP_BC_BUILD_TUPLE, n_args);
    ace8:	683a      	ldr	r2, [r7, #0]
    acea:	2150      	movs	r1, #80	; 0x50
    acec:	6878      	ldr	r0, [r7, #4]
    acee:	f7ff f895 	bl	9e1c <emit_write_bytecode_byte_uint>
}
    acf2:	bf00      	nop
    acf4:	3708      	adds	r7, #8
    acf6:	46bd      	mov	sp, r7
    acf8:	bd80      	pop	{r7, pc}
    acfa:	bf00      	nop

0000acfc <mp_emit_bc_build_list>:

void mp_emit_bc_build_list(emit_t *emit, mp_uint_t n_args) {
    acfc:	b580      	push	{r7, lr}
    acfe:	b082      	sub	sp, #8
    ad00:	af00      	add	r7, sp, #0
    ad02:	6078      	str	r0, [r7, #4]
    ad04:	6039      	str	r1, [r7, #0]
    emit_bc_pre(emit, 1 - n_args);
    ad06:	683b      	ldr	r3, [r7, #0]
    ad08:	f1c3 0301 	rsb	r3, r3, #1
    ad0c:	4619      	mov	r1, r3
    ad0e:	6878      	ldr	r0, [r7, #4]
    ad10:	f7ff fb16 	bl	a340 <emit_bc_pre>
    emit_write_bytecode_byte_uint(emit, MP_BC_BUILD_LIST, n_args);
    ad14:	683a      	ldr	r2, [r7, #0]
    ad16:	2151      	movs	r1, #81	; 0x51
    ad18:	6878      	ldr	r0, [r7, #4]
    ad1a:	f7ff f87f 	bl	9e1c <emit_write_bytecode_byte_uint>
}
    ad1e:	bf00      	nop
    ad20:	3708      	adds	r7, #8
    ad22:	46bd      	mov	sp, r7
    ad24:	bd80      	pop	{r7, pc}
    ad26:	bf00      	nop

0000ad28 <mp_emit_bc_build_map>:

void mp_emit_bc_build_map(emit_t *emit, mp_uint_t n_args) {
    ad28:	b580      	push	{r7, lr}
    ad2a:	b082      	sub	sp, #8
    ad2c:	af00      	add	r7, sp, #0
    ad2e:	6078      	str	r0, [r7, #4]
    ad30:	6039      	str	r1, [r7, #0]
    emit_bc_pre(emit, 1);
    ad32:	2101      	movs	r1, #1
    ad34:	6878      	ldr	r0, [r7, #4]
    ad36:	f7ff fb03 	bl	a340 <emit_bc_pre>
    emit_write_bytecode_byte_uint(emit, MP_BC_BUILD_MAP, n_args);
    ad3a:	683a      	ldr	r2, [r7, #0]
    ad3c:	2153      	movs	r1, #83	; 0x53
    ad3e:	6878      	ldr	r0, [r7, #4]
    ad40:	f7ff f86c 	bl	9e1c <emit_write_bytecode_byte_uint>
}
    ad44:	bf00      	nop
    ad46:	3708      	adds	r7, #8
    ad48:	46bd      	mov	sp, r7
    ad4a:	bd80      	pop	{r7, pc}

0000ad4c <mp_emit_bc_store_map>:

void mp_emit_bc_store_map(emit_t *emit) {
    ad4c:	b580      	push	{r7, lr}
    ad4e:	b082      	sub	sp, #8
    ad50:	af00      	add	r7, sp, #0
    ad52:	6078      	str	r0, [r7, #4]
    emit_bc_pre(emit, -2);
    ad54:	f06f 0101 	mvn.w	r1, #1
    ad58:	6878      	ldr	r0, [r7, #4]
    ad5a:	f7ff faf1 	bl	a340 <emit_bc_pre>
    emit_write_bytecode_byte(emit, MP_BC_STORE_MAP);
    ad5e:	2154      	movs	r1, #84	; 0x54
    ad60:	6878      	ldr	r0, [r7, #4]
    ad62:	f7fe ffc7 	bl	9cf4 <emit_write_bytecode_byte>
}
    ad66:	bf00      	nop
    ad68:	3708      	adds	r7, #8
    ad6a:	46bd      	mov	sp, r7
    ad6c:	bd80      	pop	{r7, pc}
    ad6e:	bf00      	nop

0000ad70 <mp_emit_bc_store_comp>:
    emit_bc_pre(emit, 1 - n_args);
    emit_write_bytecode_byte_uint(emit, MP_BC_BUILD_SLICE, n_args);
}
#endif

void mp_emit_bc_store_comp(emit_t *emit, scope_kind_t kind, mp_uint_t collection_stack_index) {
    ad70:	b580      	push	{r7, lr}
    ad72:	b086      	sub	sp, #24
    ad74:	af00      	add	r7, sp, #0
    ad76:	60f8      	str	r0, [r7, #12]
    ad78:	60b9      	str	r1, [r7, #8]
    ad7a:	607a      	str	r2, [r7, #4]
    int t;
    int n;
    if (kind == SCOPE_LIST_COMP) {
    ad7c:	68bb      	ldr	r3, [r7, #8]
    ad7e:	2b03      	cmp	r3, #3
    ad80:	d104      	bne.n	ad8c <mp_emit_bc_store_comp+0x1c>
        n = 0;
    ad82:	2300      	movs	r3, #0
    ad84:	613b      	str	r3, [r7, #16]
        t = 0;
    ad86:	2300      	movs	r3, #0
    ad88:	617b      	str	r3, [r7, #20]
    ad8a:	e003      	b.n	ad94 <mp_emit_bc_store_comp+0x24>
    } else if (!MICROPY_PY_BUILTINS_SET || kind == SCOPE_DICT_COMP) {
        n = 1;
    ad8c:	2301      	movs	r3, #1
    ad8e:	613b      	str	r3, [r7, #16]
        t = 1;
    ad90:	2301      	movs	r3, #1
    ad92:	617b      	str	r3, [r7, #20]
    } else if (MICROPY_PY_BUILTINS_SET) {
        n = 0;
        t = 2;
    }
    emit_bc_pre(emit, -1 - n);
    ad94:	693b      	ldr	r3, [r7, #16]
    ad96:	43db      	mvns	r3, r3
    ad98:	4619      	mov	r1, r3
    ad9a:	68f8      	ldr	r0, [r7, #12]
    ad9c:	f7ff fad0 	bl	a340 <emit_bc_pre>
    // the lower 2 bits of the opcode argument indicate the collection type
    emit_write_bytecode_byte_uint(emit, MP_BC_STORE_COMP, ((collection_stack_index + n) << 2) | t);
    ada0:	693a      	ldr	r2, [r7, #16]
    ada2:	687b      	ldr	r3, [r7, #4]
    ada4:	4413      	add	r3, r2
    ada6:	009a      	lsls	r2, r3, #2
    ada8:	697b      	ldr	r3, [r7, #20]
    adaa:	4313      	orrs	r3, r2
    adac:	461a      	mov	r2, r3
    adae:	2157      	movs	r1, #87	; 0x57
    adb0:	68f8      	ldr	r0, [r7, #12]
    adb2:	f7ff f833 	bl	9e1c <emit_write_bytecode_byte_uint>
}
    adb6:	bf00      	nop
    adb8:	3718      	adds	r7, #24
    adba:	46bd      	mov	sp, r7
    adbc:	bd80      	pop	{r7, pc}
    adbe:	bf00      	nop

0000adc0 <mp_emit_bc_unpack_sequence>:

void mp_emit_bc_unpack_sequence(emit_t *emit, mp_uint_t n_args) {
    adc0:	b580      	push	{r7, lr}
    adc2:	b082      	sub	sp, #8
    adc4:	af00      	add	r7, sp, #0
    adc6:	6078      	str	r0, [r7, #4]
    adc8:	6039      	str	r1, [r7, #0]
    emit_bc_pre(emit, -1 + n_args);
    adca:	683b      	ldr	r3, [r7, #0]
    adcc:	3b01      	subs	r3, #1
    adce:	4619      	mov	r1, r3
    add0:	6878      	ldr	r0, [r7, #4]
    add2:	f7ff fab5 	bl	a340 <emit_bc_pre>
    emit_write_bytecode_byte_uint(emit, MP_BC_UNPACK_SEQUENCE, n_args);
    add6:	683a      	ldr	r2, [r7, #0]
    add8:	2159      	movs	r1, #89	; 0x59
    adda:	6878      	ldr	r0, [r7, #4]
    addc:	f7ff f81e 	bl	9e1c <emit_write_bytecode_byte_uint>
}
    ade0:	bf00      	nop
    ade2:	3708      	adds	r7, #8
    ade4:	46bd      	mov	sp, r7
    ade6:	bd80      	pop	{r7, pc}

0000ade8 <mp_emit_bc_unpack_ex>:

void mp_emit_bc_unpack_ex(emit_t *emit, mp_uint_t n_left, mp_uint_t n_right) {
    ade8:	b580      	push	{r7, lr}
    adea:	b084      	sub	sp, #16
    adec:	af00      	add	r7, sp, #0
    adee:	60f8      	str	r0, [r7, #12]
    adf0:	60b9      	str	r1, [r7, #8]
    adf2:	607a      	str	r2, [r7, #4]
    emit_bc_pre(emit, -1 + n_left + n_right + 1);
    adf4:	68ba      	ldr	r2, [r7, #8]
    adf6:	687b      	ldr	r3, [r7, #4]
    adf8:	4413      	add	r3, r2
    adfa:	4619      	mov	r1, r3
    adfc:	68f8      	ldr	r0, [r7, #12]
    adfe:	f7ff fa9f 	bl	a340 <emit_bc_pre>
    emit_write_bytecode_byte_uint(emit, MP_BC_UNPACK_EX, n_left | (n_right << 8));
    ae02:	687b      	ldr	r3, [r7, #4]
    ae04:	021a      	lsls	r2, r3, #8
    ae06:	68bb      	ldr	r3, [r7, #8]
    ae08:	4313      	orrs	r3, r2
    ae0a:	461a      	mov	r2, r3
    ae0c:	215a      	movs	r1, #90	; 0x5a
    ae0e:	68f8      	ldr	r0, [r7, #12]
    ae10:	f7ff f804 	bl	9e1c <emit_write_bytecode_byte_uint>
}
    ae14:	bf00      	nop
    ae16:	3710      	adds	r7, #16
    ae18:	46bd      	mov	sp, r7
    ae1a:	bd80      	pop	{r7, pc}

0000ae1c <mp_emit_bc_make_function>:

void mp_emit_bc_make_function(emit_t *emit, scope_t *scope, mp_uint_t n_pos_defaults, mp_uint_t n_kw_defaults) {
    ae1c:	b580      	push	{r7, lr}
    ae1e:	b084      	sub	sp, #16
    ae20:	af00      	add	r7, sp, #0
    ae22:	60f8      	str	r0, [r7, #12]
    ae24:	60b9      	str	r1, [r7, #8]
    ae26:	607a      	str	r2, [r7, #4]
    ae28:	603b      	str	r3, [r7, #0]
    if (n_pos_defaults == 0 && n_kw_defaults == 0) {
    ae2a:	687b      	ldr	r3, [r7, #4]
    ae2c:	2b00      	cmp	r3, #0
    ae2e:	d10e      	bne.n	ae4e <mp_emit_bc_make_function+0x32>
    ae30:	683b      	ldr	r3, [r7, #0]
    ae32:	2b00      	cmp	r3, #0
    ae34:	d10b      	bne.n	ae4e <mp_emit_bc_make_function+0x32>
        emit_bc_pre(emit, 1);
    ae36:	2101      	movs	r1, #1
    ae38:	68f8      	ldr	r0, [r7, #12]
    ae3a:	f7ff fa81 	bl	a340 <emit_bc_pre>
        emit_write_bytecode_byte_raw_code(emit, MP_BC_MAKE_FUNCTION, scope->raw_code);
    ae3e:	68bb      	ldr	r3, [r7, #8]
    ae40:	695b      	ldr	r3, [r3, #20]
    ae42:	461a      	mov	r2, r3
    ae44:	2160      	movs	r1, #96	; 0x60
    ae46:	68f8      	ldr	r0, [r7, #12]
    ae48:	f7ff f846 	bl	9ed8 <emit_write_bytecode_byte_raw_code>
    ae4c:	e00b      	b.n	ae66 <mp_emit_bc_make_function+0x4a>
    } else {
        emit_bc_pre(emit, -1);
    ae4e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    ae52:	68f8      	ldr	r0, [r7, #12]
    ae54:	f7ff fa74 	bl	a340 <emit_bc_pre>
        emit_write_bytecode_byte_raw_code(emit, MP_BC_MAKE_FUNCTION_DEFARGS, scope->raw_code);
    ae58:	68bb      	ldr	r3, [r7, #8]
    ae5a:	695b      	ldr	r3, [r3, #20]
    ae5c:	461a      	mov	r2, r3
    ae5e:	2161      	movs	r1, #97	; 0x61
    ae60:	68f8      	ldr	r0, [r7, #12]
    ae62:	f7ff f839 	bl	9ed8 <emit_write_bytecode_byte_raw_code>
    }
}
    ae66:	bf00      	nop
    ae68:	3710      	adds	r7, #16
    ae6a:	46bd      	mov	sp, r7
    ae6c:	bd80      	pop	{r7, pc}
    ae6e:	bf00      	nop

0000ae70 <mp_emit_bc_make_closure>:

void mp_emit_bc_make_closure(emit_t *emit, scope_t *scope, mp_uint_t n_closed_over, mp_uint_t n_pos_defaults, mp_uint_t n_kw_defaults) {
    ae70:	b580      	push	{r7, lr}
    ae72:	b084      	sub	sp, #16
    ae74:	af00      	add	r7, sp, #0
    ae76:	60f8      	str	r0, [r7, #12]
    ae78:	60b9      	str	r1, [r7, #8]
    ae7a:	607a      	str	r2, [r7, #4]
    ae7c:	603b      	str	r3, [r7, #0]
    if (n_pos_defaults == 0 && n_kw_defaults == 0) {
    ae7e:	683b      	ldr	r3, [r7, #0]
    ae80:	2b00      	cmp	r3, #0
    ae82:	d117      	bne.n	aeb4 <mp_emit_bc_make_closure+0x44>
    ae84:	69bb      	ldr	r3, [r7, #24]
    ae86:	2b00      	cmp	r3, #0
    ae88:	d114      	bne.n	aeb4 <mp_emit_bc_make_closure+0x44>
        emit_bc_pre(emit, -n_closed_over + 1);
    ae8a:	687b      	ldr	r3, [r7, #4]
    ae8c:	f1c3 0301 	rsb	r3, r3, #1
    ae90:	4619      	mov	r1, r3
    ae92:	68f8      	ldr	r0, [r7, #12]
    ae94:	f7ff fa54 	bl	a340 <emit_bc_pre>
        emit_write_bytecode_byte_raw_code(emit, MP_BC_MAKE_CLOSURE, scope->raw_code);
    ae98:	68bb      	ldr	r3, [r7, #8]
    ae9a:	695b      	ldr	r3, [r3, #20]
    ae9c:	461a      	mov	r2, r3
    ae9e:	2162      	movs	r1, #98	; 0x62
    aea0:	68f8      	ldr	r0, [r7, #12]
    aea2:	f7ff f819 	bl	9ed8 <emit_write_bytecode_byte_raw_code>
        emit_write_bytecode_byte(emit, n_closed_over);
    aea6:	687b      	ldr	r3, [r7, #4]
    aea8:	b2db      	uxtb	r3, r3
    aeaa:	4619      	mov	r1, r3
    aeac:	68f8      	ldr	r0, [r7, #12]
    aeae:	f7fe ff21 	bl	9cf4 <emit_write_bytecode_byte>
    aeb2:	e01c      	b.n	aeee <mp_emit_bc_make_closure+0x7e>
    } else {
        assert(n_closed_over <= 255);
    aeb4:	687b      	ldr	r3, [r7, #4]
    aeb6:	2bff      	cmp	r3, #255	; 0xff
    aeb8:	d906      	bls.n	aec8 <mp_emit_bc_make_closure+0x58>
    aeba:	4b0f      	ldr	r3, [pc, #60]	; (aef8 <mp_emit_bc_make_closure+0x88>)
    aebc:	4a0f      	ldr	r2, [pc, #60]	; (aefc <mp_emit_bc_make_closure+0x8c>)
    aebe:	f44f 7163 	mov.w	r1, #908	; 0x38c
    aec2:	480f      	ldr	r0, [pc, #60]	; (af00 <mp_emit_bc_make_closure+0x90>)
    aec4:	f010 fc04 	bl	1b6d0 <__assert_func>
        emit_bc_pre(emit, -2 - (mp_int_t)n_closed_over + 1);
    aec8:	687b      	ldr	r3, [r7, #4]
    aeca:	43db      	mvns	r3, r3
    aecc:	4619      	mov	r1, r3
    aece:	68f8      	ldr	r0, [r7, #12]
    aed0:	f7ff fa36 	bl	a340 <emit_bc_pre>
        emit_write_bytecode_byte_raw_code(emit, MP_BC_MAKE_CLOSURE_DEFARGS, scope->raw_code);
    aed4:	68bb      	ldr	r3, [r7, #8]
    aed6:	695b      	ldr	r3, [r3, #20]
    aed8:	461a      	mov	r2, r3
    aeda:	2163      	movs	r1, #99	; 0x63
    aedc:	68f8      	ldr	r0, [r7, #12]
    aede:	f7fe fffb 	bl	9ed8 <emit_write_bytecode_byte_raw_code>
        emit_write_bytecode_byte(emit, n_closed_over);
    aee2:	687b      	ldr	r3, [r7, #4]
    aee4:	b2db      	uxtb	r3, r3
    aee6:	4619      	mov	r1, r3
    aee8:	68f8      	ldr	r0, [r7, #12]
    aeea:	f7fe ff03 	bl	9cf4 <emit_write_bytecode_byte>
    }
}
    aeee:	bf00      	nop
    aef0:	3710      	adds	r7, #16
    aef2:	46bd      	mov	sp, r7
    aef4:	bd80      	pop	{r7, pc}
    aef6:	bf00      	nop
    aef8:	00021294 	.word	0x00021294
    aefc:	000213ec 	.word	0x000213ec
    af00:	00021114 	.word	0x00021114

0000af04 <emit_bc_call_function_method_helper>:

STATIC void emit_bc_call_function_method_helper(emit_t *emit, mp_int_t stack_adj, mp_uint_t bytecode_base, mp_uint_t n_positional, mp_uint_t n_keyword, mp_uint_t star_flags) {
    af04:	b580      	push	{r7, lr}
    af06:	b084      	sub	sp, #16
    af08:	af00      	add	r7, sp, #0
    af0a:	60f8      	str	r0, [r7, #12]
    af0c:	60b9      	str	r1, [r7, #8]
    af0e:	607a      	str	r2, [r7, #4]
    af10:	603b      	str	r3, [r7, #0]
    if (star_flags) {
    af12:	69fb      	ldr	r3, [r7, #28]
    af14:	2b00      	cmp	r3, #0
    af16:	d017      	beq.n	af48 <emit_bc_call_function_method_helper+0x44>
        emit_bc_pre(emit, stack_adj - (mp_int_t)n_positional - 2 * (mp_int_t)n_keyword - 2);
    af18:	683b      	ldr	r3, [r7, #0]
    af1a:	68ba      	ldr	r2, [r7, #8]
    af1c:	1ad2      	subs	r2, r2, r3
    af1e:	69bb      	ldr	r3, [r7, #24]
    af20:	005b      	lsls	r3, r3, #1
    af22:	1ad3      	subs	r3, r2, r3
    af24:	3b02      	subs	r3, #2
    af26:	4619      	mov	r1, r3
    af28:	68f8      	ldr	r0, [r7, #12]
    af2a:	f7ff fa09 	bl	a340 <emit_bc_pre>
        emit_write_bytecode_byte_uint(emit, bytecode_base + 1, (n_keyword << 8) | n_positional); // TODO make it 2 separate uints?
    af2e:	687b      	ldr	r3, [r7, #4]
    af30:	b2db      	uxtb	r3, r3
    af32:	3301      	adds	r3, #1
    af34:	b2d9      	uxtb	r1, r3
    af36:	69bb      	ldr	r3, [r7, #24]
    af38:	021a      	lsls	r2, r3, #8
    af3a:	683b      	ldr	r3, [r7, #0]
    af3c:	4313      	orrs	r3, r2
    af3e:	461a      	mov	r2, r3
    af40:	68f8      	ldr	r0, [r7, #12]
    af42:	f7fe ff6b 	bl	9e1c <emit_write_bytecode_byte_uint>
    } else {
        emit_bc_pre(emit, stack_adj - (mp_int_t)n_positional - 2 * (mp_int_t)n_keyword);
        emit_write_bytecode_byte_uint(emit, bytecode_base, (n_keyword << 8) | n_positional); // TODO make it 2 separate uints?
    }
}
    af46:	e013      	b.n	af70 <emit_bc_call_function_method_helper+0x6c>
        emit_bc_pre(emit, stack_adj - (mp_int_t)n_positional - 2 * (mp_int_t)n_keyword);
    af48:	683b      	ldr	r3, [r7, #0]
    af4a:	68ba      	ldr	r2, [r7, #8]
    af4c:	1ad2      	subs	r2, r2, r3
    af4e:	69bb      	ldr	r3, [r7, #24]
    af50:	005b      	lsls	r3, r3, #1
    af52:	1ad3      	subs	r3, r2, r3
    af54:	4619      	mov	r1, r3
    af56:	68f8      	ldr	r0, [r7, #12]
    af58:	f7ff f9f2 	bl	a340 <emit_bc_pre>
        emit_write_bytecode_byte_uint(emit, bytecode_base, (n_keyword << 8) | n_positional); // TODO make it 2 separate uints?
    af5c:	687b      	ldr	r3, [r7, #4]
    af5e:	b2d9      	uxtb	r1, r3
    af60:	69bb      	ldr	r3, [r7, #24]
    af62:	021a      	lsls	r2, r3, #8
    af64:	683b      	ldr	r3, [r7, #0]
    af66:	4313      	orrs	r3, r2
    af68:	461a      	mov	r2, r3
    af6a:	68f8      	ldr	r0, [r7, #12]
    af6c:	f7fe ff56 	bl	9e1c <emit_write_bytecode_byte_uint>
}
    af70:	bf00      	nop
    af72:	3710      	adds	r7, #16
    af74:	46bd      	mov	sp, r7
    af76:	bd80      	pop	{r7, pc}

0000af78 <mp_emit_bc_call_function>:

void mp_emit_bc_call_function(emit_t *emit, mp_uint_t n_positional, mp_uint_t n_keyword, mp_uint_t star_flags) {
    af78:	b580      	push	{r7, lr}
    af7a:	b086      	sub	sp, #24
    af7c:	af02      	add	r7, sp, #8
    af7e:	60f8      	str	r0, [r7, #12]
    af80:	60b9      	str	r1, [r7, #8]
    af82:	607a      	str	r2, [r7, #4]
    af84:	603b      	str	r3, [r7, #0]
    emit_bc_call_function_method_helper(emit, 0, MP_BC_CALL_FUNCTION, n_positional, n_keyword, star_flags);
    af86:	683b      	ldr	r3, [r7, #0]
    af88:	9301      	str	r3, [sp, #4]
    af8a:	687b      	ldr	r3, [r7, #4]
    af8c:	9300      	str	r3, [sp, #0]
    af8e:	68bb      	ldr	r3, [r7, #8]
    af90:	2264      	movs	r2, #100	; 0x64
    af92:	2100      	movs	r1, #0
    af94:	68f8      	ldr	r0, [r7, #12]
    af96:	f7ff ffb5 	bl	af04 <emit_bc_call_function_method_helper>
}
    af9a:	bf00      	nop
    af9c:	3710      	adds	r7, #16
    af9e:	46bd      	mov	sp, r7
    afa0:	bd80      	pop	{r7, pc}
    afa2:	bf00      	nop

0000afa4 <mp_emit_bc_call_method>:

void mp_emit_bc_call_method(emit_t *emit, mp_uint_t n_positional, mp_uint_t n_keyword, mp_uint_t star_flags) {
    afa4:	b580      	push	{r7, lr}
    afa6:	b086      	sub	sp, #24
    afa8:	af02      	add	r7, sp, #8
    afaa:	60f8      	str	r0, [r7, #12]
    afac:	60b9      	str	r1, [r7, #8]
    afae:	607a      	str	r2, [r7, #4]
    afb0:	603b      	str	r3, [r7, #0]
    emit_bc_call_function_method_helper(emit, -1, MP_BC_CALL_METHOD, n_positional, n_keyword, star_flags);
    afb2:	683b      	ldr	r3, [r7, #0]
    afb4:	9301      	str	r3, [sp, #4]
    afb6:	687b      	ldr	r3, [r7, #4]
    afb8:	9300      	str	r3, [sp, #0]
    afba:	68bb      	ldr	r3, [r7, #8]
    afbc:	2266      	movs	r2, #102	; 0x66
    afbe:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    afc2:	68f8      	ldr	r0, [r7, #12]
    afc4:	f7ff ff9e 	bl	af04 <emit_bc_call_function_method_helper>
}
    afc8:	bf00      	nop
    afca:	3710      	adds	r7, #16
    afcc:	46bd      	mov	sp, r7
    afce:	bd80      	pop	{r7, pc}

0000afd0 <mp_emit_bc_return_value>:

void mp_emit_bc_return_value(emit_t *emit) {
    afd0:	b580      	push	{r7, lr}
    afd2:	b082      	sub	sp, #8
    afd4:	af00      	add	r7, sp, #0
    afd6:	6078      	str	r0, [r7, #4]
    emit_bc_pre(emit, -1);
    afd8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    afdc:	6878      	ldr	r0, [r7, #4]
    afde:	f7ff f9af 	bl	a340 <emit_bc_pre>
    emit->last_emit_was_return_value = true;
    afe2:	687b      	ldr	r3, [r7, #4]
    afe4:	2201      	movs	r2, #1
    afe6:	719a      	strb	r2, [r3, #6]
    emit_write_bytecode_byte(emit, MP_BC_RETURN_VALUE);
    afe8:	215b      	movs	r1, #91	; 0x5b
    afea:	6878      	ldr	r0, [r7, #4]
    afec:	f7fe fe82 	bl	9cf4 <emit_write_bytecode_byte>
}
    aff0:	bf00      	nop
    aff2:	3708      	adds	r7, #8
    aff4:	46bd      	mov	sp, r7
    aff6:	bd80      	pop	{r7, pc}

0000aff8 <mp_emit_bc_raise_varargs>:

void mp_emit_bc_raise_varargs(emit_t *emit, mp_uint_t n_args) {
    aff8:	b580      	push	{r7, lr}
    affa:	b082      	sub	sp, #8
    affc:	af00      	add	r7, sp, #0
    affe:	6078      	str	r0, [r7, #4]
    b000:	6039      	str	r1, [r7, #0]
    assert(n_args <= 2);
    b002:	683b      	ldr	r3, [r7, #0]
    b004:	2b02      	cmp	r3, #2
    b006:	d906      	bls.n	b016 <mp_emit_bc_raise_varargs+0x1e>
    b008:	4b0b      	ldr	r3, [pc, #44]	; (b038 <mp_emit_bc_raise_varargs+0x40>)
    b00a:	4a0c      	ldr	r2, [pc, #48]	; (b03c <mp_emit_bc_raise_varargs+0x44>)
    b00c:	f44f 716b 	mov.w	r1, #940	; 0x3ac
    b010:	480b      	ldr	r0, [pc, #44]	; (b040 <mp_emit_bc_raise_varargs+0x48>)
    b012:	f010 fb5d 	bl	1b6d0 <__assert_func>
    emit_bc_pre(emit, -n_args);
    b016:	683b      	ldr	r3, [r7, #0]
    b018:	425b      	negs	r3, r3
    b01a:	4619      	mov	r1, r3
    b01c:	6878      	ldr	r0, [r7, #4]
    b01e:	f7ff f98f 	bl	a340 <emit_bc_pre>
    emit_write_bytecode_byte_byte(emit, MP_BC_RAISE_VARARGS, n_args);
    b022:	683b      	ldr	r3, [r7, #0]
    b024:	b2db      	uxtb	r3, r3
    b026:	461a      	mov	r2, r3
    b028:	215c      	movs	r1, #92	; 0x5c
    b02a:	6878      	ldr	r0, [r7, #4]
    b02c:	f7fe fe74 	bl	9d18 <emit_write_bytecode_byte_byte>
}
    b030:	bf00      	nop
    b032:	3708      	adds	r7, #8
    b034:	46bd      	mov	sp, r7
    b036:	bd80      	pop	{r7, pc}
    b038:	000212ac 	.word	0x000212ac
    b03c:	00021404 	.word	0x00021404
    b040:	00021114 	.word	0x00021114

0000b044 <mp_emit_bc_yield_value>:

void mp_emit_bc_yield_value(emit_t *emit) {
    b044:	b580      	push	{r7, lr}
    b046:	b082      	sub	sp, #8
    b048:	af00      	add	r7, sp, #0
    b04a:	6078      	str	r0, [r7, #4]
    emit_bc_pre(emit, 0);
    b04c:	2100      	movs	r1, #0
    b04e:	6878      	ldr	r0, [r7, #4]
    b050:	f7ff f976 	bl	a340 <emit_bc_pre>
    emit->scope->scope_flags |= MP_SCOPE_FLAG_GENERATOR;
    b054:	687b      	ldr	r3, [r7, #4]
    b056:	68db      	ldr	r3, [r3, #12]
    b058:	687a      	ldr	r2, [r7, #4]
    b05a:	68d2      	ldr	r2, [r2, #12]
    b05c:	7e12      	ldrb	r2, [r2, #24]
    b05e:	f042 0204 	orr.w	r2, r2, #4
    b062:	b2d2      	uxtb	r2, r2
    b064:	761a      	strb	r2, [r3, #24]
    emit_write_bytecode_byte(emit, MP_BC_YIELD_VALUE);
    b066:	215d      	movs	r1, #93	; 0x5d
    b068:	6878      	ldr	r0, [r7, #4]
    b06a:	f7fe fe43 	bl	9cf4 <emit_write_bytecode_byte>
}
    b06e:	bf00      	nop
    b070:	3708      	adds	r7, #8
    b072:	46bd      	mov	sp, r7
    b074:	bd80      	pop	{r7, pc}
    b076:	bf00      	nop

0000b078 <mp_emit_bc_yield_from>:

void mp_emit_bc_yield_from(emit_t *emit) {
    b078:	b580      	push	{r7, lr}
    b07a:	b082      	sub	sp, #8
    b07c:	af00      	add	r7, sp, #0
    b07e:	6078      	str	r0, [r7, #4]
    emit_bc_pre(emit, -1);
    b080:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    b084:	6878      	ldr	r0, [r7, #4]
    b086:	f7ff f95b 	bl	a340 <emit_bc_pre>
    emit->scope->scope_flags |= MP_SCOPE_FLAG_GENERATOR;
    b08a:	687b      	ldr	r3, [r7, #4]
    b08c:	68db      	ldr	r3, [r3, #12]
    b08e:	687a      	ldr	r2, [r7, #4]
    b090:	68d2      	ldr	r2, [r2, #12]
    b092:	7e12      	ldrb	r2, [r2, #24]
    b094:	f042 0204 	orr.w	r2, r2, #4
    b098:	b2d2      	uxtb	r2, r2
    b09a:	761a      	strb	r2, [r3, #24]
    emit_write_bytecode_byte(emit, MP_BC_YIELD_FROM);
    b09c:	215e      	movs	r1, #94	; 0x5e
    b09e:	6878      	ldr	r0, [r7, #4]
    b0a0:	f7fe fe28 	bl	9cf4 <emit_write_bytecode_byte>
}
    b0a4:	bf00      	nop
    b0a6:	3708      	adds	r7, #8
    b0a8:	46bd      	mov	sp, r7
    b0aa:	bd80      	pop	{r7, pc}

0000b0ac <mp_emit_bc_start_except_handler>:

void mp_emit_bc_start_except_handler(emit_t *emit) {
    b0ac:	b580      	push	{r7, lr}
    b0ae:	b082      	sub	sp, #8
    b0b0:	af00      	add	r7, sp, #0
    b0b2:	6078      	str	r0, [r7, #4]
    mp_emit_bc_adjust_stack_size(emit, 4); // stack adjust for the exception instance, +3 for possible UNWIND_JUMP state
    b0b4:	2104      	movs	r1, #4
    b0b6:	6878      	ldr	r0, [r7, #4]
    b0b8:	f7ff f90a 	bl	a2d0 <mp_emit_bc_adjust_stack_size>
}
    b0bc:	bf00      	nop
    b0be:	3708      	adds	r7, #8
    b0c0:	46bd      	mov	sp, r7
    b0c2:	bd80      	pop	{r7, pc}

0000b0c4 <mp_emit_bc_end_except_handler>:

void mp_emit_bc_end_except_handler(emit_t *emit) {
    b0c4:	b580      	push	{r7, lr}
    b0c6:	b082      	sub	sp, #8
    b0c8:	af00      	add	r7, sp, #0
    b0ca:	6078      	str	r0, [r7, #4]
    mp_emit_bc_adjust_stack_size(emit, -3); // stack adjust
    b0cc:	f06f 0102 	mvn.w	r1, #2
    b0d0:	6878      	ldr	r0, [r7, #4]
    b0d2:	f7ff f8fd 	bl	a2d0 <mp_emit_bc_adjust_stack_size>
}
    b0d6:	bf00      	nop
    b0d8:	3708      	adds	r7, #8
    b0da:	46bd      	mov	sp, r7
    b0dc:	bd80      	pop	{r7, pc}
    b0de:	bf00      	nop

0000b0e0 <mp_parse_num_base>:
#include "py/misc.h"
#include "py/parsenumbase.h"

// find real radix base, and strip preceding '0x', '0o' and '0b'
// puts base in *base, and returns number of bytes to skip the prefix
size_t mp_parse_num_base(const char *str, size_t len, int *base) {
    b0e0:	b480      	push	{r7}
    b0e2:	b087      	sub	sp, #28
    b0e4:	af00      	add	r7, sp, #0
    b0e6:	60f8      	str	r0, [r7, #12]
    b0e8:	60b9      	str	r1, [r7, #8]
    b0ea:	607a      	str	r2, [r7, #4]
    const byte *p = (const byte*)str;
    b0ec:	68fb      	ldr	r3, [r7, #12]
    b0ee:	617b      	str	r3, [r7, #20]
    if (len <= 1) {
    b0f0:	68bb      	ldr	r3, [r7, #8]
    b0f2:	2b01      	cmp	r3, #1
    b0f4:	d971      	bls.n	b1da <mp_parse_num_base+0xfa>
        goto no_prefix;
    }
    unichar c = *(p++);
    b0f6:	697b      	ldr	r3, [r7, #20]
    b0f8:	1c5a      	adds	r2, r3, #1
    b0fa:	617a      	str	r2, [r7, #20]
    b0fc:	781b      	ldrb	r3, [r3, #0]
    b0fe:	613b      	str	r3, [r7, #16]
    if ((*base == 0 || *base == 16) && c == '0') {
    b100:	687b      	ldr	r3, [r7, #4]
    b102:	681b      	ldr	r3, [r3, #0]
    b104:	2b00      	cmp	r3, #0
    b106:	d003      	beq.n	b110 <mp_parse_num_base+0x30>
    b108:	687b      	ldr	r3, [r7, #4]
    b10a:	681b      	ldr	r3, [r3, #0]
    b10c:	2b10      	cmp	r3, #16
    b10e:	d136      	bne.n	b17e <mp_parse_num_base+0x9e>
    b110:	693b      	ldr	r3, [r7, #16]
    b112:	2b30      	cmp	r3, #48	; 0x30
    b114:	d133      	bne.n	b17e <mp_parse_num_base+0x9e>
        c = *(p++);
    b116:	697b      	ldr	r3, [r7, #20]
    b118:	1c5a      	adds	r2, r3, #1
    b11a:	617a      	str	r2, [r7, #20]
    b11c:	781b      	ldrb	r3, [r3, #0]
    b11e:	613b      	str	r3, [r7, #16]
        if ((c | 32) == 'x') {
    b120:	693b      	ldr	r3, [r7, #16]
    b122:	f043 0320 	orr.w	r3, r3, #32
    b126:	2b78      	cmp	r3, #120	; 0x78
    b128:	d103      	bne.n	b132 <mp_parse_num_base+0x52>
            *base = 16;
    b12a:	687b      	ldr	r3, [r7, #4]
    b12c:	2210      	movs	r2, #16
    b12e:	601a      	str	r2, [r3, #0]
        if ((c | 32) == 'x') {
    b130:	e05b      	b.n	b1ea <mp_parse_num_base+0x10a>
        } else if (*base == 0 && (c | 32) == 'o') {
    b132:	687b      	ldr	r3, [r7, #4]
    b134:	681b      	ldr	r3, [r3, #0]
    b136:	2b00      	cmp	r3, #0
    b138:	d108      	bne.n	b14c <mp_parse_num_base+0x6c>
    b13a:	693b      	ldr	r3, [r7, #16]
    b13c:	f043 0320 	orr.w	r3, r3, #32
    b140:	2b6f      	cmp	r3, #111	; 0x6f
    b142:	d103      	bne.n	b14c <mp_parse_num_base+0x6c>
            *base = 8;
    b144:	687b      	ldr	r3, [r7, #4]
    b146:	2208      	movs	r2, #8
    b148:	601a      	str	r2, [r3, #0]
    b14a:	e017      	b.n	b17c <mp_parse_num_base+0x9c>
        } else if (*base == 0 && (c | 32) == 'b') {
    b14c:	687b      	ldr	r3, [r7, #4]
    b14e:	681b      	ldr	r3, [r3, #0]
    b150:	2b00      	cmp	r3, #0
    b152:	d108      	bne.n	b166 <mp_parse_num_base+0x86>
    b154:	693b      	ldr	r3, [r7, #16]
    b156:	f043 0320 	orr.w	r3, r3, #32
    b15a:	2b62      	cmp	r3, #98	; 0x62
    b15c:	d103      	bne.n	b166 <mp_parse_num_base+0x86>
            *base = 2;
    b15e:	687b      	ldr	r3, [r7, #4]
    b160:	2202      	movs	r2, #2
    b162:	601a      	str	r2, [r3, #0]
    b164:	e00a      	b.n	b17c <mp_parse_num_base+0x9c>
        } else {
            if (*base == 0) {
    b166:	687b      	ldr	r3, [r7, #4]
    b168:	681b      	ldr	r3, [r3, #0]
    b16a:	2b00      	cmp	r3, #0
    b16c:	d102      	bne.n	b174 <mp_parse_num_base+0x94>
                *base = 10;
    b16e:	687b      	ldr	r3, [r7, #4]
    b170:	220a      	movs	r2, #10
    b172:	601a      	str	r2, [r3, #0]
            }
            p -= 2;
    b174:	697b      	ldr	r3, [r7, #20]
    b176:	3b02      	subs	r3, #2
    b178:	617b      	str	r3, [r7, #20]
        if ((c | 32) == 'x') {
    b17a:	e036      	b.n	b1ea <mp_parse_num_base+0x10a>
    b17c:	e035      	b.n	b1ea <mp_parse_num_base+0x10a>
        }
    } else if (*base == 8 && c == '0') {
    b17e:	687b      	ldr	r3, [r7, #4]
    b180:	681b      	ldr	r3, [r3, #0]
    b182:	2b08      	cmp	r3, #8
    b184:	d110      	bne.n	b1a8 <mp_parse_num_base+0xc8>
    b186:	693b      	ldr	r3, [r7, #16]
    b188:	2b30      	cmp	r3, #48	; 0x30
    b18a:	d10d      	bne.n	b1a8 <mp_parse_num_base+0xc8>
        c = *(p++);
    b18c:	697b      	ldr	r3, [r7, #20]
    b18e:	1c5a      	adds	r2, r3, #1
    b190:	617a      	str	r2, [r7, #20]
    b192:	781b      	ldrb	r3, [r3, #0]
    b194:	613b      	str	r3, [r7, #16]
        if ((c | 32) != 'o') {
    b196:	693b      	ldr	r3, [r7, #16]
    b198:	f043 0320 	orr.w	r3, r3, #32
    b19c:	2b6f      	cmp	r3, #111	; 0x6f
    b19e:	d024      	beq.n	b1ea <mp_parse_num_base+0x10a>
            p -= 2;
    b1a0:	697b      	ldr	r3, [r7, #20]
    b1a2:	3b02      	subs	r3, #2
    b1a4:	617b      	str	r3, [r7, #20]
        if ((c | 32) != 'o') {
    b1a6:	e020      	b.n	b1ea <mp_parse_num_base+0x10a>
        }
    } else if (*base == 2 && c == '0') {
    b1a8:	687b      	ldr	r3, [r7, #4]
    b1aa:	681b      	ldr	r3, [r3, #0]
    b1ac:	2b02      	cmp	r3, #2
    b1ae:	d110      	bne.n	b1d2 <mp_parse_num_base+0xf2>
    b1b0:	693b      	ldr	r3, [r7, #16]
    b1b2:	2b30      	cmp	r3, #48	; 0x30
    b1b4:	d10d      	bne.n	b1d2 <mp_parse_num_base+0xf2>
        c = *(p++);
    b1b6:	697b      	ldr	r3, [r7, #20]
    b1b8:	1c5a      	adds	r2, r3, #1
    b1ba:	617a      	str	r2, [r7, #20]
    b1bc:	781b      	ldrb	r3, [r3, #0]
    b1be:	613b      	str	r3, [r7, #16]
        if ((c | 32) != 'b') {
    b1c0:	693b      	ldr	r3, [r7, #16]
    b1c2:	f043 0320 	orr.w	r3, r3, #32
    b1c6:	2b62      	cmp	r3, #98	; 0x62
    b1c8:	d00f      	beq.n	b1ea <mp_parse_num_base+0x10a>
            p -= 2;
    b1ca:	697b      	ldr	r3, [r7, #20]
    b1cc:	3b02      	subs	r3, #2
    b1ce:	617b      	str	r3, [r7, #20]
        if ((c | 32) != 'b') {
    b1d0:	e00b      	b.n	b1ea <mp_parse_num_base+0x10a>
        }
    } else {
        p--;
    b1d2:	697b      	ldr	r3, [r7, #20]
    b1d4:	3b01      	subs	r3, #1
    b1d6:	617b      	str	r3, [r7, #20]
    b1d8:	e000      	b.n	b1dc <mp_parse_num_base+0xfc>
        goto no_prefix;
    b1da:	bf00      	nop
    no_prefix:
        if (*base == 0) {
    b1dc:	687b      	ldr	r3, [r7, #4]
    b1de:	681b      	ldr	r3, [r3, #0]
    b1e0:	2b00      	cmp	r3, #0
    b1e2:	d102      	bne.n	b1ea <mp_parse_num_base+0x10a>
            *base = 10;
    b1e4:	687b      	ldr	r3, [r7, #4]
    b1e6:	220a      	movs	r2, #10
    b1e8:	601a      	str	r2, [r3, #0]
        }
    }
    return p - (const byte*)str;
    b1ea:	697a      	ldr	r2, [r7, #20]
    b1ec:	68fb      	ldr	r3, [r7, #12]
    b1ee:	1ad3      	subs	r3, r2, r3
}
    b1f0:	4618      	mov	r0, r3
    b1f2:	371c      	adds	r7, #28
    b1f4:	46bd      	mov	sp, r7
    b1f6:	f85d 7b04 	ldr.w	r7, [sp], #4
    b1fa:	4770      	bx	lr

0000b1fc <raise_exc>:

#if MICROPY_PY_BUILTINS_FLOAT
#include <math.h>
#endif

STATIC NORETURN void raise_exc(mp_obj_t exc, mp_lexer_t *lex) {
    b1fc:	b580      	push	{r7, lr}
    b1fe:	b082      	sub	sp, #8
    b200:	af00      	add	r7, sp, #0
    b202:	6078      	str	r0, [r7, #4]
    b204:	6039      	str	r1, [r7, #0]
    // if lex!=NULL then the parser called us and we need to convert the
    // exception's type from ValueError to SyntaxError and add traceback info
    if (lex != NULL) {
    b206:	683b      	ldr	r3, [r7, #0]
    b208:	2b00      	cmp	r3, #0
    b20a:	d00a      	beq.n	b222 <raise_exc+0x26>
        ((mp_obj_base_t*)MP_OBJ_TO_PTR(exc))->type = &mp_type_SyntaxError;
    b20c:	687b      	ldr	r3, [r7, #4]
    b20e:	4a06      	ldr	r2, [pc, #24]	; (b228 <raise_exc+0x2c>)
    b210:	601a      	str	r2, [r3, #0]
        mp_obj_exception_add_traceback(exc, lex->source_name, lex->tok_line, MP_QSTR_NULL);
    b212:	683b      	ldr	r3, [r7, #0]
    b214:	6819      	ldr	r1, [r3, #0]
    b216:	683b      	ldr	r3, [r7, #0]
    b218:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    b21a:	2300      	movs	r3, #0
    b21c:	6878      	ldr	r0, [r7, #4]
    b21e:	f004 fc51 	bl	fac4 <mp_obj_exception_add_traceback>
    }
    nlr_raise(exc);
    b222:	6878      	ldr	r0, [r7, #4]
    b224:	f7f5 f85c 	bl	2e0 <nlr_jump>
    b228:	00022620 	.word	0x00022620

0000b22c <mp_parse_num_integer>:
}

mp_obj_t mp_parse_num_integer(const char *restrict str_, size_t len, int base, mp_lexer_t *lex) {
    b22c:	b580      	push	{r7, lr}
    b22e:	b094      	sub	sp, #80	; 0x50
    b230:	af00      	add	r7, sp, #0
    b232:	60f8      	str	r0, [r7, #12]
    b234:	60b9      	str	r1, [r7, #8]
    b236:	607a      	str	r2, [r7, #4]
    b238:	603b      	str	r3, [r7, #0]
    const byte *restrict str = (const byte *)str_;
    b23a:	68fb      	ldr	r3, [r7, #12]
    b23c:	64fb      	str	r3, [r7, #76]	; 0x4c
    const byte *restrict top = str + len;
    b23e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    b240:	68bb      	ldr	r3, [r7, #8]
    b242:	4413      	add	r3, r2
    b244:	63bb      	str	r3, [r7, #56]	; 0x38
    bool neg = false;
    b246:	2300      	movs	r3, #0
    b248:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
    mp_obj_t ret_val;

    // check radix base
    if ((base != 0 && base < 2) || base > 36) {
    b24c:	687b      	ldr	r3, [r7, #4]
    b24e:	2b00      	cmp	r3, #0
    b250:	d002      	beq.n	b258 <mp_parse_num_integer+0x2c>
    b252:	687b      	ldr	r3, [r7, #4]
    b254:	2b01      	cmp	r3, #1
    b256:	dd02      	ble.n	b25e <mp_parse_num_integer+0x32>
    b258:	687b      	ldr	r3, [r7, #4]
    b25a:	2b24      	cmp	r3, #36	; 0x24
    b25c:	dd05      	ble.n	b26a <mp_parse_num_integer+0x3e>
        // this won't be reached if lex!=NULL
        mp_raise_ValueError("int() arg 2 must be >= 2 and <= 36");
    b25e:	4861      	ldr	r0, [pc, #388]	; (b3e4 <mp_parse_num_integer+0x1b8>)
    b260:	f001 ffbe 	bl	d1e0 <mp_raise_ValueError>
    }

    // skip leading space
    for (; str < top && unichar_isspace(*str); str++) {
    b264:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    b266:	3301      	adds	r3, #1
    b268:	64fb      	str	r3, [r7, #76]	; 0x4c
    b26a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    b26c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    b26e:	429a      	cmp	r2, r3
    b270:	d207      	bcs.n	b282 <mp_parse_num_integer+0x56>
    b272:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    b274:	781b      	ldrb	r3, [r3, #0]
    b276:	4618      	mov	r0, r3
    b278:	f7f7 f93e 	bl	24f8 <unichar_isspace>
    b27c:	4603      	mov	r3, r0
    b27e:	2b00      	cmp	r3, #0
    b280:	d1f0      	bne.n	b264 <mp_parse_num_integer+0x38>
    }

    // parse optional sign
    if (str < top) {
    b282:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    b284:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    b286:	429a      	cmp	r2, r3
    b288:	d211      	bcs.n	b2ae <mp_parse_num_integer+0x82>
        if (*str == '+') {
    b28a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    b28c:	781b      	ldrb	r3, [r3, #0]
    b28e:	2b2b      	cmp	r3, #43	; 0x2b
    b290:	d103      	bne.n	b29a <mp_parse_num_integer+0x6e>
            str++;
    b292:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    b294:	3301      	adds	r3, #1
    b296:	64fb      	str	r3, [r7, #76]	; 0x4c
    b298:	e009      	b.n	b2ae <mp_parse_num_integer+0x82>
        } else if (*str == '-') {
    b29a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    b29c:	781b      	ldrb	r3, [r3, #0]
    b29e:	2b2d      	cmp	r3, #45	; 0x2d
    b2a0:	d105      	bne.n	b2ae <mp_parse_num_integer+0x82>
            str++;
    b2a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    b2a4:	3301      	adds	r3, #1
    b2a6:	64fb      	str	r3, [r7, #76]	; 0x4c
            neg = true;
    b2a8:	2301      	movs	r3, #1
    b2aa:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
        }
    }

    // parse optional base prefix
    str += mp_parse_num_base((const char*)str, top - str, &base);
    b2ae:	6bba      	ldr	r2, [r7, #56]	; 0x38
    b2b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    b2b2:	1ad3      	subs	r3, r2, r3
    b2b4:	4619      	mov	r1, r3
    b2b6:	1d3b      	adds	r3, r7, #4
    b2b8:	461a      	mov	r2, r3
    b2ba:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
    b2bc:	f7ff ff10 	bl	b0e0 <mp_parse_num_base>
    b2c0:	4602      	mov	r2, r0
    b2c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    b2c4:	4413      	add	r3, r2
    b2c6:	64fb      	str	r3, [r7, #76]	; 0x4c

    // string should be an integer number
    mp_int_t int_val = 0;
    b2c8:	2300      	movs	r3, #0
    b2ca:	643b      	str	r3, [r7, #64]	; 0x40
    const byte *restrict str_val_start = str;
    b2cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    b2ce:	637b      	str	r3, [r7, #52]	; 0x34
    for (; str < top; str++) {
    b2d0:	e037      	b.n	b342 <mp_parse_num_integer+0x116>
        // get next digit as a value
        mp_uint_t dig = *str;
    b2d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    b2d4:	781b      	ldrb	r3, [r3, #0]
    b2d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        if ('0' <= dig && dig <= '9') {
    b2d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    b2da:	2b2f      	cmp	r3, #47	; 0x2f
    b2dc:	d906      	bls.n	b2ec <mp_parse_num_integer+0xc0>
    b2de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    b2e0:	2b39      	cmp	r3, #57	; 0x39
    b2e2:	d803      	bhi.n	b2ec <mp_parse_num_integer+0xc0>
            dig -= '0';
    b2e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    b2e6:	3b30      	subs	r3, #48	; 0x30
    b2e8:	63fb      	str	r3, [r7, #60]	; 0x3c
    b2ea:	e00c      	b.n	b306 <mp_parse_num_integer+0xda>
        } else {
            dig |= 0x20; // make digit lower-case
    b2ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    b2ee:	f043 0320 	orr.w	r3, r3, #32
    b2f2:	63fb      	str	r3, [r7, #60]	; 0x3c
            if ('a' <= dig && dig <= 'z') {
    b2f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    b2f6:	2b60      	cmp	r3, #96	; 0x60
    b2f8:	d929      	bls.n	b34e <mp_parse_num_integer+0x122>
    b2fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    b2fc:	2b7a      	cmp	r3, #122	; 0x7a
    b2fe:	d826      	bhi.n	b34e <mp_parse_num_integer+0x122>
                dig -= 'a' - 10;
    b300:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    b302:	3b57      	subs	r3, #87	; 0x57
    b304:	63fb      	str	r3, [r7, #60]	; 0x3c
            } else {
                // unknown character
                break;
            }
        }
        if (dig >= (mp_uint_t)base) {
    b306:	687b      	ldr	r3, [r7, #4]
    b308:	461a      	mov	r2, r3
    b30a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    b30c:	4293      	cmp	r3, r2
    b30e:	d21d      	bcs.n	b34c <mp_parse_num_integer+0x120>
            break;
        }

        // add next digi and check for overflow
        if (mp_small_int_mul_overflow(int_val, base)) {
    b310:	687b      	ldr	r3, [r7, #4]
    b312:	4619      	mov	r1, r3
    b314:	6c38      	ldr	r0, [r7, #64]	; 0x40
    b316:	f00f ffe5 	bl	1b2e4 <mp_small_int_mul_overflow>
    b31a:	4603      	mov	r3, r0
    b31c:	2b00      	cmp	r3, #0
    b31e:	d13c      	bne.n	b39a <mp_parse_num_integer+0x16e>
            goto overflow;
        }
        int_val = int_val * base + dig;
    b320:	687b      	ldr	r3, [r7, #4]
    b322:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    b324:	fb02 f303 	mul.w	r3, r2, r3
    b328:	461a      	mov	r2, r3
    b32a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    b32c:	4413      	add	r3, r2
    b32e:	643b      	str	r3, [r7, #64]	; 0x40
        if (!MP_SMALL_INT_FITS(int_val)) {
    b330:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    b332:	005a      	lsls	r2, r3, #1
    b334:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    b336:	4053      	eors	r3, r2
    b338:	2b00      	cmp	r3, #0
    b33a:	db30      	blt.n	b39e <mp_parse_num_integer+0x172>
    for (; str < top; str++) {
    b33c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    b33e:	3301      	adds	r3, #1
    b340:	64fb      	str	r3, [r7, #76]	; 0x4c
    b342:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    b344:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    b346:	429a      	cmp	r2, r3
    b348:	d3c3      	bcc.n	b2d2 <mp_parse_num_integer+0xa6>
    b34a:	e000      	b.n	b34e <mp_parse_num_integer+0x122>
            break;
    b34c:	bf00      	nop
            goto overflow;
        }
    }

    // negate value if needed
    if (neg) {
    b34e:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
    b352:	2b00      	cmp	r3, #0
    b354:	d002      	beq.n	b35c <mp_parse_num_integer+0x130>
        int_val = -int_val;
    b356:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    b358:	425b      	negs	r3, r3
    b35a:	643b      	str	r3, [r7, #64]	; 0x40
    }

    // create the small int
    ret_val = MP_OBJ_NEW_SMALL_INT(int_val);
    b35c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    b35e:	005b      	lsls	r3, r3, #1
    b360:	f043 0301 	orr.w	r3, r3, #1
    b364:	647b      	str	r3, [r7, #68]	; 0x44

have_ret_val:
    // check we parsed something
    if (str == str_val_start) {
    b366:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    b368:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    b36a:	429a      	cmp	r2, r3
    b36c:	d02a      	beq.n	b3c4 <mp_parse_num_integer+0x198>
        goto value_error;
    }

    // skip trailing space
    for (; str < top && unichar_isspace(*str); str++) {
    b36e:	e002      	b.n	b376 <mp_parse_num_integer+0x14a>
    b370:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    b372:	3301      	adds	r3, #1
    b374:	64fb      	str	r3, [r7, #76]	; 0x4c
    b376:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    b378:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    b37a:	429a      	cmp	r2, r3
    b37c:	d207      	bcs.n	b38e <mp_parse_num_integer+0x162>
    b37e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    b380:	781b      	ldrb	r3, [r3, #0]
    b382:	4618      	mov	r0, r3
    b384:	f7f7 f8b8 	bl	24f8 <unichar_isspace>
    b388:	4603      	mov	r3, r0
    b38a:	2b00      	cmp	r3, #0
    b38c:	d1f0      	bne.n	b370 <mp_parse_num_integer+0x144>
    }

    // check we reached the end of the string
    if (str != top) {
    b38e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    b390:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    b392:	429a      	cmp	r2, r3
    b394:	d118      	bne.n	b3c8 <mp_parse_num_integer+0x19c>
        goto value_error;
    }

    // return the object
    return ret_val;
    b396:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    b398:	e020      	b.n	b3dc <mp_parse_num_integer+0x1b0>
            goto overflow;
    b39a:	bf00      	nop
    b39c:	e000      	b.n	b3a0 <mp_parse_num_integer+0x174>
            goto overflow;
    b39e:	bf00      	nop

overflow:
    // reparse using long int
    {
        const char *s2 = (const char*)str_val_start;
    b3a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    b3a2:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret_val = mp_obj_new_int_from_str_len(&s2, top - str_val_start, neg, base);
    b3a4:	6bba      	ldr	r2, [r7, #56]	; 0x38
    b3a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    b3a8:	1ad3      	subs	r3, r2, r3
    b3aa:	4619      	mov	r1, r3
    b3ac:	687b      	ldr	r3, [r7, #4]
    b3ae:	f897 204b 	ldrb.w	r2, [r7, #75]	; 0x4b
    b3b2:	f107 002c 	add.w	r0, r7, #44	; 0x2c
    b3b6:	f005 fbbb 	bl	10b30 <mp_obj_new_int_from_str_len>
    b3ba:	6478      	str	r0, [r7, #68]	; 0x44
        str = (const byte*)s2;
    b3bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b3be:	64fb      	str	r3, [r7, #76]	; 0x4c
        goto have_ret_val;
    b3c0:	bf00      	nop
    b3c2:	e7d0      	b.n	b366 <mp_parse_num_integer+0x13a>
        goto value_error;
    b3c4:	bf00      	nop
    b3c6:	e000      	b.n	b3ca <mp_parse_num_integer+0x19e>
        goto value_error;
    b3c8:	bf00      	nop
    }

value_error:
    if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
        mp_obj_t exc = mp_obj_new_exception_msg(&mp_type_ValueError,
    b3ca:	4907      	ldr	r1, [pc, #28]	; (b3e8 <mp_parse_num_integer+0x1bc>)
    b3cc:	4807      	ldr	r0, [pc, #28]	; (b3ec <mp_parse_num_integer+0x1c0>)
    b3ce:	f004 f9fd 	bl	f7cc <mp_obj_new_exception_msg>
    b3d2:	6338      	str	r0, [r7, #48]	; 0x30
            "invalid syntax for integer");
        raise_exc(exc, lex);
    b3d4:	6839      	ldr	r1, [r7, #0]
    b3d6:	6b38      	ldr	r0, [r7, #48]	; 0x30
    b3d8:	f7ff ff10 	bl	b1fc <raise_exc>
        mp_str_print_quoted(&print, str_val_start, top - str_val_start, true);
        mp_obj_t exc = mp_obj_new_exception_arg1(&mp_type_ValueError,
            mp_obj_new_str_from_vstr(&mp_type_str, &vstr));
        raise_exc(exc, lex);
    }
}
    b3dc:	4618      	mov	r0, r3
    b3de:	3750      	adds	r7, #80	; 0x50
    b3e0:	46bd      	mov	sp, r7
    b3e2:	bd80      	pop	{r7, pc}
    b3e4:	00021420 	.word	0x00021420
    b3e8:	00021444 	.word	0x00021444
    b3ec:	000226d4 	.word	0x000226d4

0000b3f0 <mp_parse_num_decimal>:
    PARSE_DEC_IN_INTG,
    PARSE_DEC_IN_FRAC,
    PARSE_DEC_IN_EXP,
} parse_dec_in_t;

mp_obj_t mp_parse_num_decimal(const char *str, size_t len, bool allow_imag, bool force_complex, mp_lexer_t *lex) {
    b3f0:	b580      	push	{r7, lr}
    b3f2:	b084      	sub	sp, #16
    b3f4:	af00      	add	r7, sp, #0
    b3f6:	60f8      	str	r0, [r7, #12]
    b3f8:	60b9      	str	r1, [r7, #8]
    b3fa:	4611      	mov	r1, r2
    b3fc:	461a      	mov	r2, r3
    b3fe:	460b      	mov	r3, r1
    b400:	71fb      	strb	r3, [r7, #7]
    b402:	4613      	mov	r3, r2
    b404:	71bb      	strb	r3, [r7, #6]

value_error:
    raise_exc(mp_obj_new_exception_msg(&mp_type_ValueError, "invalid syntax for number"), lex);

#else
    raise_exc(mp_obj_new_exception_msg(&mp_type_ValueError, "decimal numbers not supported"), lex);
    b406:	4904      	ldr	r1, [pc, #16]	; (b418 <mp_parse_num_decimal+0x28>)
    b408:	4804      	ldr	r0, [pc, #16]	; (b41c <mp_parse_num_decimal+0x2c>)
    b40a:	f004 f9df 	bl	f7cc <mp_obj_new_exception_msg>
    b40e:	4603      	mov	r3, r0
    b410:	69b9      	ldr	r1, [r7, #24]
    b412:	4618      	mov	r0, r3
    b414:	f7ff fef2 	bl	b1fc <raise_exc>
    b418:	00021460 	.word	0x00021460
    b41c:	000226d4 	.word	0x000226d4

0000b420 <MP_OBJ_IS_OBJ>:
    b420:	b480      	push	{r7}
    b422:	b083      	sub	sp, #12
    b424:	af00      	add	r7, sp, #0
    b426:	6078      	str	r0, [r7, #4]
    b428:	687b      	ldr	r3, [r7, #4]
    b42a:	f003 0303 	and.w	r3, r3, #3
    b42e:	2b00      	cmp	r3, #0
    b430:	bf0c      	ite	eq
    b432:	2301      	moveq	r3, #1
    b434:	2300      	movne	r3, #0
    b436:	b2db      	uxtb	r3, r3
    b438:	4618      	mov	r0, r3
    b43a:	370c      	adds	r7, #12
    b43c:	46bd      	mov	sp, r7
    b43e:	f85d 7b04 	ldr.w	r7, [sp], #4
    b442:	4770      	bx	lr

0000b444 <mp_emit_glue_new_raw_code>:

#if MICROPY_DEBUG_PRINTERS
mp_uint_t mp_verbose_flag = 0;
#endif

mp_raw_code_t *mp_emit_glue_new_raw_code(void) {
    b444:	b580      	push	{r7, lr}
    b446:	b082      	sub	sp, #8
    b448:	af00      	add	r7, sp, #0
    mp_raw_code_t *rc = m_new0(mp_raw_code_t, 1);
    b44a:	2010      	movs	r0, #16
    b44c:	f7f4 ffa4 	bl	398 <m_malloc0>
    b450:	6078      	str	r0, [r7, #4]
    rc->kind = MP_CODE_RESERVED;
    b452:	687a      	ldr	r2, [r7, #4]
    b454:	7813      	ldrb	r3, [r2, #0]
    b456:	2101      	movs	r1, #1
    b458:	f361 0302 	bfi	r3, r1, #0, #3
    b45c:	7013      	strb	r3, [r2, #0]
    return rc;
    b45e:	687b      	ldr	r3, [r7, #4]
}
    b460:	4618      	mov	r0, r3
    b462:	3708      	adds	r7, #8
    b464:	46bd      	mov	sp, r7
    b466:	bd80      	pop	{r7, pc}

0000b468 <mp_emit_glue_assign_bytecode>:
    #endif
    const mp_uint_t *const_table,
    #if MICROPY_PERSISTENT_CODE_SAVE
    uint16_t n_obj, uint16_t n_raw_code,
    #endif
    mp_uint_t scope_flags) {
    b468:	b480      	push	{r7}
    b46a:	b085      	sub	sp, #20
    b46c:	af00      	add	r7, sp, #0
    b46e:	60f8      	str	r0, [r7, #12]
    b470:	60b9      	str	r1, [r7, #8]
    b472:	607a      	str	r2, [r7, #4]
    b474:	603b      	str	r3, [r7, #0]

    rc->kind = MP_CODE_BYTECODE;
    b476:	68fa      	ldr	r2, [r7, #12]
    b478:	7813      	ldrb	r3, [r2, #0]
    b47a:	2102      	movs	r1, #2
    b47c:	f361 0302 	bfi	r3, r1, #0, #3
    b480:	7013      	strb	r3, [r2, #0]
    rc->scope_flags = scope_flags;
    b482:	683b      	ldr	r3, [r7, #0]
    b484:	b2db      	uxtb	r3, r3
    b486:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    b48a:	b2d9      	uxtb	r1, r3
    b48c:	68fa      	ldr	r2, [r7, #12]
    b48e:	8813      	ldrh	r3, [r2, #0]
    b490:	f361 03c9 	bfi	r3, r1, #3, #7
    b494:	8013      	strh	r3, [r2, #0]
    rc->data.u_byte.bytecode = code;
    b496:	68fb      	ldr	r3, [r7, #12]
    b498:	68ba      	ldr	r2, [r7, #8]
    b49a:	605a      	str	r2, [r3, #4]
    rc->data.u_byte.const_table = const_table;
    b49c:	68fb      	ldr	r3, [r7, #12]
    b49e:	687a      	ldr	r2, [r7, #4]
    b4a0:	609a      	str	r2, [r3, #8]
#if MICROPY_DEBUG_PRINTERS
    if (mp_verbose_flag >= 2) {
        mp_bytecode_print(rc, code, len, const_table);
    }
#endif
}
    b4a2:	bf00      	nop
    b4a4:	3714      	adds	r7, #20
    b4a6:	46bd      	mov	sp, r7
    b4a8:	f85d 7b04 	ldr.w	r7, [sp], #4
    b4ac:	4770      	bx	lr
    b4ae:	bf00      	nop

0000b4b0 <mp_make_function_from_raw_code>:
    (void)fun_len;
#endif
}
#endif

mp_obj_t mp_make_function_from_raw_code(const mp_raw_code_t *rc, mp_obj_t def_args, mp_obj_t def_kw_args) {
    b4b0:	b580      	push	{r7, lr}
    b4b2:	b086      	sub	sp, #24
    b4b4:	af00      	add	r7, sp, #0
    b4b6:	60f8      	str	r0, [r7, #12]
    b4b8:	60b9      	str	r1, [r7, #8]
    b4ba:	607a      	str	r2, [r7, #4]
    DEBUG_OP_printf("make_function_from_raw_code %p\n", rc);
    assert(rc != NULL);
    b4bc:	68fb      	ldr	r3, [r7, #12]
    b4be:	2b00      	cmp	r3, #0
    b4c0:	d105      	bne.n	b4ce <mp_make_function_from_raw_code+0x1e>
    b4c2:	4b30      	ldr	r3, [pc, #192]	; (b584 <mp_make_function_from_raw_code+0xd4>)
    b4c4:	4a30      	ldr	r2, [pc, #192]	; (b588 <mp_make_function_from_raw_code+0xd8>)
    b4c6:	2179      	movs	r1, #121	; 0x79
    b4c8:	4830      	ldr	r0, [pc, #192]	; (b58c <mp_make_function_from_raw_code+0xdc>)
    b4ca:	f010 f901 	bl	1b6d0 <__assert_func>

    // def_args must be MP_OBJ_NULL or a tuple
    assert(def_args == MP_OBJ_NULL || MP_OBJ_IS_TYPE(def_args, &mp_type_tuple));
    b4ce:	68bb      	ldr	r3, [r7, #8]
    b4d0:	2b00      	cmp	r3, #0
    b4d2:	d013      	beq.n	b4fc <mp_make_function_from_raw_code+0x4c>
    b4d4:	68b8      	ldr	r0, [r7, #8]
    b4d6:	f7ff ffa3 	bl	b420 <MP_OBJ_IS_OBJ>
    b4da:	4603      	mov	r3, r0
    b4dc:	f083 0301 	eor.w	r3, r3, #1
    b4e0:	b2db      	uxtb	r3, r3
    b4e2:	2b00      	cmp	r3, #0
    b4e4:	d104      	bne.n	b4f0 <mp_make_function_from_raw_code+0x40>
    b4e6:	68bb      	ldr	r3, [r7, #8]
    b4e8:	681b      	ldr	r3, [r3, #0]
    b4ea:	4a29      	ldr	r2, [pc, #164]	; (b590 <mp_make_function_from_raw_code+0xe0>)
    b4ec:	4293      	cmp	r3, r2
    b4ee:	d005      	beq.n	b4fc <mp_make_function_from_raw_code+0x4c>
    b4f0:	4b28      	ldr	r3, [pc, #160]	; (b594 <mp_make_function_from_raw_code+0xe4>)
    b4f2:	4a25      	ldr	r2, [pc, #148]	; (b588 <mp_make_function_from_raw_code+0xd8>)
    b4f4:	217c      	movs	r1, #124	; 0x7c
    b4f6:	4825      	ldr	r0, [pc, #148]	; (b58c <mp_make_function_from_raw_code+0xdc>)
    b4f8:	f010 f8ea 	bl	1b6d0 <__assert_func>

    // def_kw_args must be MP_OBJ_NULL or a dict
    assert(def_kw_args == MP_OBJ_NULL || MP_OBJ_IS_TYPE(def_kw_args, &mp_type_dict));
    b4fc:	687b      	ldr	r3, [r7, #4]
    b4fe:	2b00      	cmp	r3, #0
    b500:	d013      	beq.n	b52a <mp_make_function_from_raw_code+0x7a>
    b502:	6878      	ldr	r0, [r7, #4]
    b504:	f7ff ff8c 	bl	b420 <MP_OBJ_IS_OBJ>
    b508:	4603      	mov	r3, r0
    b50a:	f083 0301 	eor.w	r3, r3, #1
    b50e:	b2db      	uxtb	r3, r3
    b510:	2b00      	cmp	r3, #0
    b512:	d104      	bne.n	b51e <mp_make_function_from_raw_code+0x6e>
    b514:	687b      	ldr	r3, [r7, #4]
    b516:	681b      	ldr	r3, [r3, #0]
    b518:	4a1f      	ldr	r2, [pc, #124]	; (b598 <mp_make_function_from_raw_code+0xe8>)
    b51a:	4293      	cmp	r3, r2
    b51c:	d005      	beq.n	b52a <mp_make_function_from_raw_code+0x7a>
    b51e:	4b1f      	ldr	r3, [pc, #124]	; (b59c <mp_make_function_from_raw_code+0xec>)
    b520:	4a19      	ldr	r2, [pc, #100]	; (b588 <mp_make_function_from_raw_code+0xd8>)
    b522:	217f      	movs	r1, #127	; 0x7f
    b524:	4819      	ldr	r0, [pc, #100]	; (b58c <mp_make_function_from_raw_code+0xdc>)
    b526:	f010 f8d3 	bl	1b6d0 <__assert_func>

    // make the function, depending on the raw code kind
    mp_obj_t fun;
    switch (rc->kind) {
    b52a:	68fb      	ldr	r3, [r7, #12]
    b52c:	781b      	ldrb	r3, [r3, #0]
    b52e:	f3c3 0302 	ubfx	r3, r3, #0, #3
            fun = mp_obj_new_fun_asm(rc->n_pos_args, rc->data.u_native.fun_data, rc->data.u_native.type_sig);
            break;
        #endif
        default:
            // rc->kind should always be set and BYTECODE is the only remaining case
            assert(rc->kind == MP_CODE_BYTECODE);
    b532:	68fb      	ldr	r3, [r7, #12]
    b534:	781b      	ldrb	r3, [r3, #0]
    b536:	f003 0307 	and.w	r3, r3, #7
    b53a:	b2db      	uxtb	r3, r3
    b53c:	2b02      	cmp	r3, #2
    b53e:	d005      	beq.n	b54c <mp_make_function_from_raw_code+0x9c>
    b540:	4b17      	ldr	r3, [pc, #92]	; (b5a0 <mp_make_function_from_raw_code+0xf0>)
    b542:	4a11      	ldr	r2, [pc, #68]	; (b588 <mp_make_function_from_raw_code+0xd8>)
    b544:	2193      	movs	r1, #147	; 0x93
    b546:	4811      	ldr	r0, [pc, #68]	; (b58c <mp_make_function_from_raw_code+0xdc>)
    b548:	f010 f8c2 	bl	1b6d0 <__assert_func>
            fun = mp_obj_new_fun_bc(def_args, def_kw_args, rc->data.u_byte.bytecode, rc->data.u_byte.const_table);
    b54c:	68fb      	ldr	r3, [r7, #12]
    b54e:	685a      	ldr	r2, [r3, #4]
    b550:	68fb      	ldr	r3, [r7, #12]
    b552:	689b      	ldr	r3, [r3, #8]
    b554:	6879      	ldr	r1, [r7, #4]
    b556:	68b8      	ldr	r0, [r7, #8]
    b558:	f004 fdac 	bl	100b4 <mp_obj_new_fun_bc>
    b55c:	6178      	str	r0, [r7, #20]
            break;
    b55e:	bf00      	nop
    }

    // check for generator functions and if so wrap in generator object
    if ((rc->scope_flags & MP_SCOPE_FLAG_GENERATOR) != 0) {
    b560:	68fb      	ldr	r3, [r7, #12]
    b562:	881b      	ldrh	r3, [r3, #0]
    b564:	f3c3 03c6 	ubfx	r3, r3, #3, #7
    b568:	b2db      	uxtb	r3, r3
    b56a:	f003 0304 	and.w	r3, r3, #4
    b56e:	2b00      	cmp	r3, #0
    b570:	d003      	beq.n	b57a <mp_make_function_from_raw_code+0xca>
        fun = mp_obj_new_gen_wrap(fun);
    b572:	6978      	ldr	r0, [r7, #20]
    b574:	f004 fe90 	bl	10298 <mp_obj_new_gen_wrap>
    b578:	6178      	str	r0, [r7, #20]
    }

    return fun;
    b57a:	697b      	ldr	r3, [r7, #20]
}
    b57c:	4618      	mov	r0, r3
    b57e:	3718      	adds	r7, #24
    b580:	46bd      	mov	sp, r7
    b582:	bd80      	pop	{r7, pc}
    b584:	00021480 	.word	0x00021480
    b588:	00021550 	.word	0x00021550
    b58c:	0002148c 	.word	0x0002148c
    b590:	00023d90 	.word	0x00023d90
    b594:	000214a0 	.word	0x000214a0
    b598:	0002201c 	.word	0x0002201c
    b59c:	000214e4 	.word	0x000214e4
    b5a0:	00021530 	.word	0x00021530

0000b5a4 <mp_make_closure_from_raw_code>:

mp_obj_t mp_make_closure_from_raw_code(const mp_raw_code_t *rc, mp_uint_t n_closed_over, const mp_obj_t *args) {
    b5a4:	b580      	push	{r7, lr}
    b5a6:	b086      	sub	sp, #24
    b5a8:	af00      	add	r7, sp, #0
    b5aa:	60f8      	str	r0, [r7, #12]
    b5ac:	60b9      	str	r1, [r7, #8]
    b5ae:	607a      	str	r2, [r7, #4]
    DEBUG_OP_printf("make_closure_from_raw_code %p " UINT_FMT " %p\n", rc, n_closed_over, args);
    // make function object
    mp_obj_t ffun;
    if (n_closed_over & 0x100) {
    b5b0:	68bb      	ldr	r3, [r7, #8]
    b5b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
    b5b6:	2b00      	cmp	r3, #0
    b5b8:	d00a      	beq.n	b5d0 <mp_make_closure_from_raw_code+0x2c>
        // default positional and keyword args given
        ffun = mp_make_function_from_raw_code(rc, args[0], args[1]);
    b5ba:	687b      	ldr	r3, [r7, #4]
    b5bc:	6819      	ldr	r1, [r3, #0]
    b5be:	687b      	ldr	r3, [r7, #4]
    b5c0:	3304      	adds	r3, #4
    b5c2:	681b      	ldr	r3, [r3, #0]
    b5c4:	461a      	mov	r2, r3
    b5c6:	68f8      	ldr	r0, [r7, #12]
    b5c8:	f7ff ff72 	bl	b4b0 <mp_make_function_from_raw_code>
    b5cc:	6178      	str	r0, [r7, #20]
    b5ce:	e005      	b.n	b5dc <mp_make_closure_from_raw_code+0x38>
    } else {
        // default positional and keyword args not given
        ffun = mp_make_function_from_raw_code(rc, MP_OBJ_NULL, MP_OBJ_NULL);
    b5d0:	2200      	movs	r2, #0
    b5d2:	2100      	movs	r1, #0
    b5d4:	68f8      	ldr	r0, [r7, #12]
    b5d6:	f7ff ff6b 	bl	b4b0 <mp_make_function_from_raw_code>
    b5da:	6178      	str	r0, [r7, #20]
    }
    // wrap function in closure object
    return mp_obj_new_closure(ffun, n_closed_over & 0xff, args + ((n_closed_over >> 7) & 2));
    b5dc:	68bb      	ldr	r3, [r7, #8]
    b5de:	b2d9      	uxtb	r1, r3
    b5e0:	68bb      	ldr	r3, [r7, #8]
    b5e2:	09db      	lsrs	r3, r3, #7
    b5e4:	f003 0302 	and.w	r3, r3, #2
    b5e8:	009b      	lsls	r3, r3, #2
    b5ea:	687a      	ldr	r2, [r7, #4]
    b5ec:	4413      	add	r3, r2
    b5ee:	461a      	mov	r2, r3
    b5f0:	6978      	ldr	r0, [r7, #20]
    b5f2:	f003 f845 	bl	e680 <mp_obj_new_closure>
    b5f6:	4603      	mov	r3, r0
}
    b5f8:	4618      	mov	r0, r3
    b5fa:	3718      	adds	r7, #24
    b5fc:	46bd      	mov	sp, r7
    b5fe:	bd80      	pop	{r7, pc}

0000b600 <MP_OBJ_IS_SMALL_INT>:
    { return ((((mp_int_t)(o)) & 1) != 0); }
    b600:	b480      	push	{r7}
    b602:	b083      	sub	sp, #12
    b604:	af00      	add	r7, sp, #0
    b606:	6078      	str	r0, [r7, #4]
    b608:	687b      	ldr	r3, [r7, #4]
    b60a:	f003 0301 	and.w	r3, r3, #1
    b60e:	2b00      	cmp	r3, #0
    b610:	bf14      	ite	ne
    b612:	2301      	movne	r3, #1
    b614:	2300      	moveq	r3, #0
    b616:	b2db      	uxtb	r3, r3
    b618:	4618      	mov	r0, r3
    b61a:	370c      	adds	r7, #12
    b61c:	46bd      	mov	sp, r7
    b61e:	f85d 7b04 	ldr.w	r7, [sp], #4
    b622:	4770      	bx	lr

0000b624 <MP_OBJ_IS_QSTR>:
    { return ((((mp_int_t)(o)) & 3) == 2); }
    b624:	b480      	push	{r7}
    b626:	b083      	sub	sp, #12
    b628:	af00      	add	r7, sp, #0
    b62a:	6078      	str	r0, [r7, #4]
    b62c:	687b      	ldr	r3, [r7, #4]
    b62e:	f003 0303 	and.w	r3, r3, #3
    b632:	2b02      	cmp	r3, #2
    b634:	bf0c      	ite	eq
    b636:	2301      	moveq	r3, #1
    b638:	2300      	movne	r3, #0
    b63a:	b2db      	uxtb	r3, r3
    b63c:	4618      	mov	r0, r3
    b63e:	370c      	adds	r7, #12
    b640:	46bd      	mov	sp, r7
    b642:	f85d 7b04 	ldr.w	r7, [sp], #4
    b646:	4770      	bx	lr

0000b648 <MP_OBJ_IS_OBJ>:
    { return ((((mp_int_t)(o)) & 3) == 0); }
    b648:	b480      	push	{r7}
    b64a:	b083      	sub	sp, #12
    b64c:	af00      	add	r7, sp, #0
    b64e:	6078      	str	r0, [r7, #4]
    b650:	687b      	ldr	r3, [r7, #4]
    b652:	f003 0303 	and.w	r3, r3, #3
    b656:	2b00      	cmp	r3, #0
    b658:	bf0c      	ite	eq
    b65a:	2301      	moveq	r3, #1
    b65c:	2300      	movne	r3, #0
    b65e:	b2db      	uxtb	r3, r3
    b660:	4618      	mov	r0, r3
    b662:	370c      	adds	r7, #12
    b664:	46bd      	mov	sp, r7
    b666:	f85d 7b04 	ldr.w	r7, [sp], #4
    b66a:	4770      	bx	lr

0000b66c <MP_MAP_SLOT_IS_FILLED>:
    MP_MAP_LOOKUP_ADD_IF_NOT_FOUND_OR_REMOVE_IF_FOUND = 3, // only valid for mp_set_lookup
} mp_map_lookup_kind_t;

extern const mp_map_t mp_const_empty_map;

static inline bool MP_MAP_SLOT_IS_FILLED(const mp_map_t *map, size_t pos) { return ((map)->table[pos].key != MP_OBJ_NULL && (map)->table[pos].key != MP_OBJ_SENTINEL); }
    b66c:	b480      	push	{r7}
    b66e:	b083      	sub	sp, #12
    b670:	af00      	add	r7, sp, #0
    b672:	6078      	str	r0, [r7, #4]
    b674:	6039      	str	r1, [r7, #0]
    b676:	687b      	ldr	r3, [r7, #4]
    b678:	689a      	ldr	r2, [r3, #8]
    b67a:	683b      	ldr	r3, [r7, #0]
    b67c:	00db      	lsls	r3, r3, #3
    b67e:	4413      	add	r3, r2
    b680:	681b      	ldr	r3, [r3, #0]
    b682:	2b00      	cmp	r3, #0
    b684:	d009      	beq.n	b69a <MP_MAP_SLOT_IS_FILLED+0x2e>
    b686:	687b      	ldr	r3, [r7, #4]
    b688:	689a      	ldr	r2, [r3, #8]
    b68a:	683b      	ldr	r3, [r7, #0]
    b68c:	00db      	lsls	r3, r3, #3
    b68e:	4413      	add	r3, r2
    b690:	681b      	ldr	r3, [r3, #0]
    b692:	2b08      	cmp	r3, #8
    b694:	d001      	beq.n	b69a <MP_MAP_SLOT_IS_FILLED+0x2e>
    b696:	2301      	movs	r3, #1
    b698:	e000      	b.n	b69c <MP_MAP_SLOT_IS_FILLED+0x30>
    b69a:	2300      	movs	r3, #0
    b69c:	f003 0301 	and.w	r3, r3, #1
    b6a0:	b2db      	uxtb	r3, r3
    b6a2:	4618      	mov	r0, r3
    b6a4:	370c      	adds	r7, #12
    b6a6:	46bd      	mov	sp, r7
    b6a8:	f85d 7b04 	ldr.w	r7, [sp], #4
    b6ac:	4770      	bx	lr
    b6ae:	bf00      	nop

0000b6b0 <mp_obj_new_bool>:
extern const struct _mp_obj_exception_t mp_const_GeneratorExit_obj;

// General API for objects

mp_obj_t mp_obj_new_type(qstr name, mp_obj_t bases_tuple, mp_obj_t locals_dict);
static inline mp_obj_t mp_obj_new_bool(mp_int_t x) { return x ? mp_const_true : mp_const_false; }
    b6b0:	b480      	push	{r7}
    b6b2:	b083      	sub	sp, #12
    b6b4:	af00      	add	r7, sp, #0
    b6b6:	6078      	str	r0, [r7, #4]
    b6b8:	687b      	ldr	r3, [r7, #4]
    b6ba:	2b00      	cmp	r3, #0
    b6bc:	d001      	beq.n	b6c2 <mp_obj_new_bool+0x12>
    b6be:	4b04      	ldr	r3, [pc, #16]	; (b6d0 <mp_obj_new_bool+0x20>)
    b6c0:	e000      	b.n	b6c4 <mp_obj_new_bool+0x14>
    b6c2:	4b04      	ldr	r3, [pc, #16]	; (b6d4 <mp_obj_new_bool+0x24>)
    b6c4:	4618      	mov	r0, r3
    b6c6:	370c      	adds	r7, #12
    b6c8:	46bd      	mov	sp, r7
    b6ca:	f85d 7b04 	ldr.w	r7, [sp], #4
    b6ce:	4770      	bx	lr
    b6d0:	00021b78 	.word	0x00021b78
    b6d4:	00021b70 	.word	0x00021b70

0000b6d8 <mp_local_free>:
static inline void mp_local_free(void *ptr) {
    b6d8:	b480      	push	{r7}
    b6da:	b083      	sub	sp, #12
    b6dc:	af00      	add	r7, sp, #0
    b6de:	6078      	str	r0, [r7, #4]
}
    b6e0:	bf00      	nop
    b6e2:	370c      	adds	r7, #12
    b6e4:	46bd      	mov	sp, r7
    b6e6:	f85d 7b04 	ldr.w	r7, [sp], #4
    b6ea:	4770      	bx	lr

0000b6ec <mp_nonlocal_alloc>:

static inline void *mp_nonlocal_alloc(size_t n_bytes) {
    b6ec:	b580      	push	{r7, lr}
    b6ee:	b082      	sub	sp, #8
    b6f0:	af00      	add	r7, sp, #0
    b6f2:	6078      	str	r0, [r7, #4]
    return m_new(uint8_t, n_bytes);
    b6f4:	6878      	ldr	r0, [r7, #4]
    b6f6:	f7f4 fe11 	bl	31c <m_malloc>
    b6fa:	4603      	mov	r3, r0
}
    b6fc:	4618      	mov	r0, r3
    b6fe:	3708      	adds	r7, #8
    b700:	46bd      	mov	sp, r7
    b702:	bd80      	pop	{r7, pc}

0000b704 <mp_nonlocal_realloc>:

static inline void *mp_nonlocal_realloc(void *ptr, size_t old_n_bytes, size_t new_n_bytes) {
    b704:	b580      	push	{r7, lr}
    b706:	b084      	sub	sp, #16
    b708:	af00      	add	r7, sp, #0
    b70a:	60f8      	str	r0, [r7, #12]
    b70c:	60b9      	str	r1, [r7, #8]
    b70e:	607a      	str	r2, [r7, #4]
    return m_renew(uint8_t, ptr, old_n_bytes, new_n_bytes);
    b710:	6879      	ldr	r1, [r7, #4]
    b712:	68f8      	ldr	r0, [r7, #12]
    b714:	f7f4 fe4e 	bl	3b4 <m_realloc>
    b718:	4603      	mov	r3, r0
}
    b71a:	4618      	mov	r0, r3
    b71c:	3710      	adds	r7, #16
    b71e:	46bd      	mov	sp, r7
    b720:	bd80      	pop	{r7, pc}
    b722:	bf00      	nop

0000b724 <mp_nonlocal_free>:

static inline void mp_nonlocal_free(void *ptr, size_t n_bytes) {
    b724:	b580      	push	{r7, lr}
    b726:	b082      	sub	sp, #8
    b728:	af00      	add	r7, sp, #0
    b72a:	6078      	str	r0, [r7, #4]
    b72c:	6039      	str	r1, [r7, #0]
    m_del(uint8_t, ptr, n_bytes);
    b72e:	6878      	ldr	r0, [r7, #4]
    b730:	f7f4 fe6e 	bl	410 <m_free>
}
    b734:	bf00      	nop
    b736:	3708      	adds	r7, #8
    b738:	46bd      	mov	sp, r7
    b73a:	bd80      	pop	{r7, pc}

0000b73c <mp_locals_get>:
void mp_arg_parse_all(size_t n_pos, const mp_obj_t *pos, mp_map_t *kws, size_t n_allowed, const mp_arg_t *allowed, mp_arg_val_t *out_vals);
void mp_arg_parse_all_kw_array(size_t n_pos, size_t n_kw, const mp_obj_t *args, size_t n_allowed, const mp_arg_t *allowed, mp_arg_val_t *out_vals);
NORETURN void mp_arg_error_terse_mismatch(void);
NORETURN void mp_arg_error_unimpl_kw(void);

static inline mp_obj_dict_t *mp_locals_get(void) { return MP_STATE_THREAD(dict_locals); }
    b73c:	b480      	push	{r7}
    b73e:	af00      	add	r7, sp, #0
    b740:	4b03      	ldr	r3, [pc, #12]	; (b750 <mp_locals_get+0x14>)
    b742:	681b      	ldr	r3, [r3, #0]
    b744:	4618      	mov	r0, r3
    b746:	46bd      	mov	sp, r7
    b748:	f85d 7b04 	ldr.w	r7, [sp], #4
    b74c:	4770      	bx	lr
    b74e:	bf00      	nop
    b750:	200012f0 	.word	0x200012f0

0000b754 <mp_locals_set>:
static inline void mp_locals_set(mp_obj_dict_t *d) { MP_STATE_THREAD(dict_locals) = d; }
    b754:	b480      	push	{r7}
    b756:	b083      	sub	sp, #12
    b758:	af00      	add	r7, sp, #0
    b75a:	6078      	str	r0, [r7, #4]
    b75c:	4a04      	ldr	r2, [pc, #16]	; (b770 <mp_locals_set+0x1c>)
    b75e:	687b      	ldr	r3, [r7, #4]
    b760:	6013      	str	r3, [r2, #0]
    b762:	bf00      	nop
    b764:	370c      	adds	r7, #12
    b766:	46bd      	mov	sp, r7
    b768:	f85d 7b04 	ldr.w	r7, [sp], #4
    b76c:	4770      	bx	lr
    b76e:	bf00      	nop
    b770:	200012f0 	.word	0x200012f0

0000b774 <mp_globals_get>:
static inline mp_obj_dict_t *mp_globals_get(void) { return MP_STATE_THREAD(dict_globals); }
    b774:	b480      	push	{r7}
    b776:	af00      	add	r7, sp, #0
    b778:	4b03      	ldr	r3, [pc, #12]	; (b788 <mp_globals_get+0x14>)
    b77a:	685b      	ldr	r3, [r3, #4]
    b77c:	4618      	mov	r0, r3
    b77e:	46bd      	mov	sp, r7
    b780:	f85d 7b04 	ldr.w	r7, [sp], #4
    b784:	4770      	bx	lr
    b786:	bf00      	nop
    b788:	200012f0 	.word	0x200012f0

0000b78c <mp_globals_set>:
static inline void mp_globals_set(mp_obj_dict_t *d) { MP_STATE_THREAD(dict_globals) = d; }
    b78c:	b480      	push	{r7}
    b78e:	b083      	sub	sp, #12
    b790:	af00      	add	r7, sp, #0
    b792:	6078      	str	r0, [r7, #4]
    b794:	4a04      	ldr	r2, [pc, #16]	; (b7a8 <mp_globals_set+0x1c>)
    b796:	687b      	ldr	r3, [r7, #4]
    b798:	6053      	str	r3, [r2, #4]
    b79a:	bf00      	nop
    b79c:	370c      	adds	r7, #12
    b79e:	46bd      	mov	sp, r7
    b7a0:	f85d 7b04 	ldr.w	r7, [sp], #4
    b7a4:	4770      	bx	lr
    b7a6:	bf00      	nop
    b7a8:	200012f0 	.word	0x200012f0

0000b7ac <mp_init>:
const mp_obj_module_t mp_module___main__ = {
    .base = { &mp_type_module },
    .globals = (mp_obj_dict_t*)&MP_STATE_VM(dict_main),
};

void mp_init(void) {
    b7ac:	b580      	push	{r7, lr}
    b7ae:	af00      	add	r7, sp, #0
    qstr_init();
    b7b0:	f7f5 fc18 	bl	fe4 <qstr_init>

    // no pending exceptions to start with
    MP_STATE_VM(mp_pending_exception) = MP_OBJ_NULL;
    b7b4:	4b0d      	ldr	r3, [pc, #52]	; (b7ec <mp_init+0x40>)
    b7b6:	2200      	movs	r2, #0
    b7b8:	635a      	str	r2, [r3, #52]	; 0x34
    MICROPY_PORT_INIT_FUNC;
#endif

    #if MICROPY_ENABLE_COMPILER
    // optimization disabled by default
    MP_STATE_VM(mp_optimise_value) = 0;
    b7ba:	4b0c      	ldr	r3, [pc, #48]	; (b7ec <mp_init+0x40>)
    b7bc:	2200      	movs	r2, #0
    b7be:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
    #endif

    // init global module dict
    mp_obj_dict_init(&MP_STATE_VM(mp_loaded_modules_dict), 3);
    b7c2:	2103      	movs	r1, #3
    b7c4:	480a      	ldr	r0, [pc, #40]	; (b7f0 <mp_init+0x44>)
    b7c6:	f003 fdf5 	bl	f3b4 <mp_obj_dict_init>

    // initialise the __main__ module
    mp_obj_dict_init(&MP_STATE_VM(dict_main), 1);
    b7ca:	2101      	movs	r1, #1
    b7cc:	4809      	ldr	r0, [pc, #36]	; (b7f4 <mp_init+0x48>)
    b7ce:	f003 fdf1 	bl	f3b4 <mp_obj_dict_init>
    mp_obj_dict_store(MP_OBJ_FROM_PTR(&MP_STATE_VM(dict_main)), MP_OBJ_NEW_QSTR(MP_QSTR___name__), MP_OBJ_NEW_QSTR(MP_QSTR___main__));
    b7d2:	226a      	movs	r2, #106	; 0x6a
    b7d4:	2172      	movs	r1, #114	; 0x72
    b7d6:	4807      	ldr	r0, [pc, #28]	; (b7f4 <mp_init+0x48>)
    b7d8:	f003 fe22 	bl	f420 <mp_obj_dict_store>

    // locals = globals for outer module (see Objects/frameobject.c/PyFrame_New())
    mp_locals_set(&MP_STATE_VM(dict_main));
    b7dc:	4805      	ldr	r0, [pc, #20]	; (b7f4 <mp_init+0x48>)
    b7de:	f7ff ffb9 	bl	b754 <mp_locals_set>
    mp_globals_set(&MP_STATE_VM(dict_main));
    b7e2:	4804      	ldr	r0, [pc, #16]	; (b7f4 <mp_init+0x48>)
    b7e4:	f7ff ffd2 	bl	b78c <mp_globals_set>
    #if MICROPY_PY_THREAD_GIL
    mp_thread_mutex_init(&MP_STATE_VM(gil_mutex));
    #endif

    MP_THREAD_GIL_ENTER();
}
    b7e8:	bf00      	nop
    b7ea:	bd80      	pop	{r7, pc}
    b7ec:	200012f0 	.word	0x200012f0
    b7f0:	20001314 	.word	0x20001314
    b7f4:	20001328 	.word	0x20001328

0000b7f8 <mp_deinit>:

void mp_deinit(void) {
    b7f8:	b480      	push	{r7}
    b7fa:	af00      	add	r7, sp, #0

    // call port specific deinitialization if any
#ifdef MICROPY_PORT_INIT_FUNC
    MICROPY_PORT_DEINIT_FUNC;
#endif
}
    b7fc:	bf00      	nop
    b7fe:	46bd      	mov	sp, r7
    b800:	f85d 7b04 	ldr.w	r7, [sp], #4
    b804:	4770      	bx	lr
    b806:	bf00      	nop

0000b808 <mp_load_name>:

mp_obj_t mp_load_name(qstr qst) {
    b808:	b590      	push	{r4, r7, lr}
    b80a:	b085      	sub	sp, #20
    b80c:	af00      	add	r7, sp, #0
    b80e:	6078      	str	r0, [r7, #4]
    // logic: search locals, globals, builtins
    DEBUG_OP_printf("load name %s\n", qstr_str(qst));
    // If we're at the outer scope (locals == globals), dispatch to load_global right away
    if (mp_locals_get() != mp_globals_get()) {
    b810:	f7ff ff94 	bl	b73c <mp_locals_get>
    b814:	4604      	mov	r4, r0
    b816:	f7ff ffad 	bl	b774 <mp_globals_get>
    b81a:	4603      	mov	r3, r0
    b81c:	429c      	cmp	r4, r3
    b81e:	d012      	beq.n	b846 <mp_load_name+0x3e>
        mp_map_elem_t *elem = mp_map_lookup(&mp_locals_get()->map, MP_OBJ_NEW_QSTR(qst), MP_MAP_LOOKUP);
    b820:	f7ff ff8c 	bl	b73c <mp_locals_get>
    b824:	4603      	mov	r3, r0
    b826:	1d18      	adds	r0, r3, #4
    b828:	687b      	ldr	r3, [r7, #4]
    b82a:	009b      	lsls	r3, r3, #2
    b82c:	f043 0302 	orr.w	r3, r3, #2
    b830:	2200      	movs	r2, #0
    b832:	4619      	mov	r1, r3
    b834:	f001 ff94 	bl	d760 <mp_map_lookup>
    b838:	60f8      	str	r0, [r7, #12]
        if (elem != NULL) {
    b83a:	68fb      	ldr	r3, [r7, #12]
    b83c:	2b00      	cmp	r3, #0
    b83e:	d002      	beq.n	b846 <mp_load_name+0x3e>
            return elem->value;
    b840:	68fb      	ldr	r3, [r7, #12]
    b842:	685b      	ldr	r3, [r3, #4]
    b844:	e003      	b.n	b84e <mp_load_name+0x46>
        }
    }
    return mp_load_global(qst);
    b846:	6878      	ldr	r0, [r7, #4]
    b848:	f000 f806 	bl	b858 <mp_load_global>
    b84c:	4603      	mov	r3, r0
}
    b84e:	4618      	mov	r0, r3
    b850:	3714      	adds	r7, #20
    b852:	46bd      	mov	sp, r7
    b854:	bd90      	pop	{r4, r7, pc}
    b856:	bf00      	nop

0000b858 <mp_load_global>:

mp_obj_t mp_load_global(qstr qst) {
    b858:	b580      	push	{r7, lr}
    b85a:	b084      	sub	sp, #16
    b85c:	af00      	add	r7, sp, #0
    b85e:	6078      	str	r0, [r7, #4]
    // logic: search globals, builtins
    DEBUG_OP_printf("load global %s\n", qstr_str(qst));
    mp_map_elem_t *elem = mp_map_lookup(&mp_globals_get()->map, MP_OBJ_NEW_QSTR(qst), MP_MAP_LOOKUP);
    b860:	f7ff ff88 	bl	b774 <mp_globals_get>
    b864:	4603      	mov	r3, r0
    b866:	1d18      	adds	r0, r3, #4
    b868:	687b      	ldr	r3, [r7, #4]
    b86a:	009b      	lsls	r3, r3, #2
    b86c:	f043 0302 	orr.w	r3, r3, #2
    b870:	2200      	movs	r2, #0
    b872:	4619      	mov	r1, r3
    b874:	f001 ff74 	bl	d760 <mp_map_lookup>
    b878:	60f8      	str	r0, [r7, #12]
    if (elem == NULL) {
    b87a:	68fb      	ldr	r3, [r7, #12]
    b87c:	2b00      	cmp	r3, #0
    b87e:	d110      	bne.n	b8a2 <mp_load_global+0x4a>
            if (elem != NULL) {
                return elem->value;
            }
        }
        #endif
        elem = mp_map_lookup((mp_map_t*)&mp_module_builtins_globals.map, MP_OBJ_NEW_QSTR(qst), MP_MAP_LOOKUP);
    b880:	687b      	ldr	r3, [r7, #4]
    b882:	009b      	lsls	r3, r3, #2
    b884:	f043 0302 	orr.w	r3, r3, #2
    b888:	2200      	movs	r2, #0
    b88a:	4619      	mov	r1, r3
    b88c:	4808      	ldr	r0, [pc, #32]	; (b8b0 <mp_load_global+0x58>)
    b88e:	f001 ff67 	bl	d760 <mp_map_lookup>
    b892:	60f8      	str	r0, [r7, #12]
        if (elem == NULL) {
    b894:	68fb      	ldr	r3, [r7, #12]
    b896:	2b00      	cmp	r3, #0
    b898:	d103      	bne.n	b8a2 <mp_load_global+0x4a>
            if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
                mp_raise_msg(&mp_type_NameError, "name not defined");
    b89a:	4906      	ldr	r1, [pc, #24]	; (b8b4 <mp_load_global+0x5c>)
    b89c:	4806      	ldr	r0, [pc, #24]	; (b8b8 <mp_load_global+0x60>)
    b89e:	f001 fc87 	bl	d1b0 <mp_raise_msg>
                nlr_raise(mp_obj_new_exception_msg_varg(&mp_type_NameError,
                    "name '%q' is not defined", qst));
            }
        }
    }
    return elem->value;
    b8a2:	68fb      	ldr	r3, [r7, #12]
    b8a4:	685b      	ldr	r3, [r3, #4]
}
    b8a6:	4618      	mov	r0, r3
    b8a8:	3710      	adds	r7, #16
    b8aa:	46bd      	mov	sp, r7
    b8ac:	bd80      	pop	{r7, pc}
    b8ae:	bf00      	nop
    b8b0:	00024a24 	.word	0x00024a24
    b8b4:	00021578 	.word	0x00021578
    b8b8:	00022530 	.word	0x00022530

0000b8bc <mp_load_build_class>:

mp_obj_t mp_load_build_class(void) {
    b8bc:	b480      	push	{r7}
    b8be:	af00      	add	r7, sp, #0
        if (elem != NULL) {
            return elem->value;
        }
    }
    #endif
    return MP_OBJ_FROM_PTR(&mp_builtin___build_class___obj);
    b8c0:	4b02      	ldr	r3, [pc, #8]	; (b8cc <mp_load_build_class+0x10>)
}
    b8c2:	4618      	mov	r0, r3
    b8c4:	46bd      	mov	sp, r7
    b8c6:	f85d 7b04 	ldr.w	r7, [sp], #4
    b8ca:	4770      	bx	lr
    b8cc:	00024638 	.word	0x00024638

0000b8d0 <mp_store_name>:

void mp_store_name(qstr qst, mp_obj_t obj) {
    b8d0:	b580      	push	{r7, lr}
    b8d2:	b082      	sub	sp, #8
    b8d4:	af00      	add	r7, sp, #0
    b8d6:	6078      	str	r0, [r7, #4]
    b8d8:	6039      	str	r1, [r7, #0]
    DEBUG_OP_printf("store name %s <- %p\n", qstr_str(qst), obj);
    mp_obj_dict_store(MP_OBJ_FROM_PTR(mp_locals_get()), MP_OBJ_NEW_QSTR(qst), obj);
    b8da:	f7ff ff2f 	bl	b73c <mp_locals_get>
    b8de:	687b      	ldr	r3, [r7, #4]
    b8e0:	009b      	lsls	r3, r3, #2
    b8e2:	f043 0302 	orr.w	r3, r3, #2
    b8e6:	683a      	ldr	r2, [r7, #0]
    b8e8:	4619      	mov	r1, r3
    b8ea:	f003 fd99 	bl	f420 <mp_obj_dict_store>
}
    b8ee:	bf00      	nop
    b8f0:	3708      	adds	r7, #8
    b8f2:	46bd      	mov	sp, r7
    b8f4:	bd80      	pop	{r7, pc}
    b8f6:	bf00      	nop

0000b8f8 <mp_delete_name>:

void mp_delete_name(qstr qst) {
    b8f8:	b580      	push	{r7, lr}
    b8fa:	b082      	sub	sp, #8
    b8fc:	af00      	add	r7, sp, #0
    b8fe:	6078      	str	r0, [r7, #4]
    DEBUG_OP_printf("delete name %s\n", qstr_str(qst));
    // TODO convert KeyError to NameError if qst not found
    mp_obj_dict_delete(MP_OBJ_FROM_PTR(mp_locals_get()), MP_OBJ_NEW_QSTR(qst));
    b900:	f7ff ff1c 	bl	b73c <mp_locals_get>
    b904:	4602      	mov	r2, r0
    b906:	687b      	ldr	r3, [r7, #4]
    b908:	009b      	lsls	r3, r3, #2
    b90a:	f043 0302 	orr.w	r3, r3, #2
    b90e:	4619      	mov	r1, r3
    b910:	4610      	mov	r0, r2
    b912:	f003 fdbd 	bl	f490 <mp_obj_dict_delete>
}
    b916:	bf00      	nop
    b918:	3708      	adds	r7, #8
    b91a:	46bd      	mov	sp, r7
    b91c:	bd80      	pop	{r7, pc}
    b91e:	bf00      	nop

0000b920 <mp_store_global>:

void mp_store_global(qstr qst, mp_obj_t obj) {
    b920:	b580      	push	{r7, lr}
    b922:	b082      	sub	sp, #8
    b924:	af00      	add	r7, sp, #0
    b926:	6078      	str	r0, [r7, #4]
    b928:	6039      	str	r1, [r7, #0]
    DEBUG_OP_printf("store global %s <- %p\n", qstr_str(qst), obj);
    mp_obj_dict_store(MP_OBJ_FROM_PTR(mp_globals_get()), MP_OBJ_NEW_QSTR(qst), obj);
    b92a:	f7ff ff23 	bl	b774 <mp_globals_get>
    b92e:	687b      	ldr	r3, [r7, #4]
    b930:	009b      	lsls	r3, r3, #2
    b932:	f043 0302 	orr.w	r3, r3, #2
    b936:	683a      	ldr	r2, [r7, #0]
    b938:	4619      	mov	r1, r3
    b93a:	f003 fd71 	bl	f420 <mp_obj_dict_store>
}
    b93e:	bf00      	nop
    b940:	3708      	adds	r7, #8
    b942:	46bd      	mov	sp, r7
    b944:	bd80      	pop	{r7, pc}
    b946:	bf00      	nop

0000b948 <mp_delete_global>:

void mp_delete_global(qstr qst) {
    b948:	b580      	push	{r7, lr}
    b94a:	b082      	sub	sp, #8
    b94c:	af00      	add	r7, sp, #0
    b94e:	6078      	str	r0, [r7, #4]
    DEBUG_OP_printf("delete global %s\n", qstr_str(qst));
    // TODO convert KeyError to NameError if qst not found
    mp_obj_dict_delete(MP_OBJ_FROM_PTR(mp_globals_get()), MP_OBJ_NEW_QSTR(qst));
    b950:	f7ff ff10 	bl	b774 <mp_globals_get>
    b954:	4602      	mov	r2, r0
    b956:	687b      	ldr	r3, [r7, #4]
    b958:	009b      	lsls	r3, r3, #2
    b95a:	f043 0302 	orr.w	r3, r3, #2
    b95e:	4619      	mov	r1, r3
    b960:	4610      	mov	r0, r2
    b962:	f003 fd95 	bl	f490 <mp_obj_dict_delete>
}
    b966:	bf00      	nop
    b968:	3708      	adds	r7, #8
    b96a:	46bd      	mov	sp, r7
    b96c:	bd80      	pop	{r7, pc}
    b96e:	bf00      	nop

0000b970 <mp_unary_op>:

mp_obj_t mp_unary_op(mp_unary_op_t op, mp_obj_t arg) {
    b970:	b580      	push	{r7, lr}
    b972:	b088      	sub	sp, #32
    b974:	af00      	add	r7, sp, #0
    b976:	6078      	str	r0, [r7, #4]
    b978:	6039      	str	r1, [r7, #0]
    DEBUG_OP_printf("unary " UINT_FMT " %q %p\n", op, mp_unary_op_method_name[op], arg);

    if (op == MP_UNARY_OP_NOT) {
    b97a:	687b      	ldr	r3, [r7, #4]
    b97c:	2b03      	cmp	r3, #3
    b97e:	d10b      	bne.n	b998 <mp_unary_op+0x28>
        // "not x" is the negative of whether "x" is true per Python semantics
        return mp_obj_new_bool(mp_obj_is_true(arg) == 0);
    b980:	6838      	ldr	r0, [r7, #0]
    b982:	f002 f975 	bl	dc70 <mp_obj_is_true>
    b986:	4603      	mov	r3, r0
    b988:	f083 0301 	eor.w	r3, r3, #1
    b98c:	b2db      	uxtb	r3, r3
    b98e:	4618      	mov	r0, r3
    b990:	f7ff fe8e 	bl	b6b0 <mp_obj_new_bool>
    b994:	4603      	mov	r3, r0
    b996:	e0c3      	b.n	bb20 <mp_unary_op+0x1b0>
    } else if (MP_OBJ_IS_SMALL_INT(arg)) {
    b998:	6838      	ldr	r0, [r7, #0]
    b99a:	f7ff fe31 	bl	b600 <MP_OBJ_IS_SMALL_INT>
    b99e:	4603      	mov	r3, r0
    b9a0:	2b00      	cmp	r3, #0
    b9a2:	d05e      	beq.n	ba62 <mp_unary_op+0xf2>
        mp_int_t val = MP_OBJ_SMALL_INT_VALUE(arg);
    b9a4:	683b      	ldr	r3, [r7, #0]
    b9a6:	105b      	asrs	r3, r3, #1
    b9a8:	617b      	str	r3, [r7, #20]
        switch (op) {
    b9aa:	687b      	ldr	r3, [r7, #4]
    b9ac:	2b07      	cmp	r3, #7
    b9ae:	d849      	bhi.n	ba44 <mp_unary_op+0xd4>
    b9b0:	a201      	add	r2, pc, #4	; (adr r2, b9b8 <mp_unary_op+0x48>)
    b9b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    b9b6:	bf00      	nop
    b9b8:	0000b9f3 	.word	0x0000b9f3
    b9bc:	0000b9f7 	.word	0x0000b9f7
    b9c0:	0000ba45 	.word	0x0000ba45
    b9c4:	0000ba45 	.word	0x0000ba45
    b9c8:	0000b9d9 	.word	0x0000b9d9
    b9cc:	0000ba45 	.word	0x0000ba45
    b9d0:	0000b9ef 	.word	0x0000b9ef
    b9d4:	0000ba19 	.word	0x0000ba19
            case MP_UNARY_OP_BOOL:
                return mp_obj_new_bool(val != 0);
    b9d8:	697b      	ldr	r3, [r7, #20]
    b9da:	2b00      	cmp	r3, #0
    b9dc:	bf14      	ite	ne
    b9de:	2301      	movne	r3, #1
    b9e0:	2300      	moveq	r3, #0
    b9e2:	b2db      	uxtb	r3, r3
    b9e4:	4618      	mov	r0, r3
    b9e6:	f7ff fe63 	bl	b6b0 <mp_obj_new_bool>
    b9ea:	4603      	mov	r3, r0
    b9ec:	e098      	b.n	bb20 <mp_unary_op+0x1b0>
            case MP_UNARY_OP_HASH:
                return arg;
    b9ee:	683b      	ldr	r3, [r7, #0]
    b9f0:	e096      	b.n	bb20 <mp_unary_op+0x1b0>
            case MP_UNARY_OP_POSITIVE:
                return arg;
    b9f2:	683b      	ldr	r3, [r7, #0]
    b9f4:	e094      	b.n	bb20 <mp_unary_op+0x1b0>
            case MP_UNARY_OP_NEGATIVE:
                // check for overflow
                if (val == MP_SMALL_INT_MIN) {
    b9f6:	697b      	ldr	r3, [r7, #20]
    b9f8:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
    b9fc:	d106      	bne.n	ba0c <mp_unary_op+0x9c>
                    return mp_obj_new_int(-val);
    b9fe:	697b      	ldr	r3, [r7, #20]
    ba00:	425b      	negs	r3, r3
    ba02:	4618      	mov	r0, r3
    ba04:	f005 f8da 	bl	10bbc <mp_obj_new_int>
    ba08:	4603      	mov	r3, r0
    ba0a:	e089      	b.n	bb20 <mp_unary_op+0x1b0>
                } else {
                    return MP_OBJ_NEW_SMALL_INT(-val);
    ba0c:	697b      	ldr	r3, [r7, #20]
    ba0e:	425b      	negs	r3, r3
    ba10:	005b      	lsls	r3, r3, #1
    ba12:	f043 0301 	orr.w	r3, r3, #1
    ba16:	e083      	b.n	bb20 <mp_unary_op+0x1b0>
                }
            case MP_UNARY_OP_ABS:
                if (val >= 0) {
    ba18:	697b      	ldr	r3, [r7, #20]
    ba1a:	2b00      	cmp	r3, #0
    ba1c:	db01      	blt.n	ba22 <mp_unary_op+0xb2>
                    return arg;
    ba1e:	683b      	ldr	r3, [r7, #0]
    ba20:	e07e      	b.n	bb20 <mp_unary_op+0x1b0>
                } else if (val == MP_SMALL_INT_MIN) {
    ba22:	697b      	ldr	r3, [r7, #20]
    ba24:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
    ba28:	d106      	bne.n	ba38 <mp_unary_op+0xc8>
                    // check for overflow
                    return mp_obj_new_int(-val);
    ba2a:	697b      	ldr	r3, [r7, #20]
    ba2c:	425b      	negs	r3, r3
    ba2e:	4618      	mov	r0, r3
    ba30:	f005 f8c4 	bl	10bbc <mp_obj_new_int>
    ba34:	4603      	mov	r3, r0
    ba36:	e073      	b.n	bb20 <mp_unary_op+0x1b0>
                } else {
                    return MP_OBJ_NEW_SMALL_INT(-val);
    ba38:	697b      	ldr	r3, [r7, #20]
    ba3a:	425b      	negs	r3, r3
    ba3c:	005b      	lsls	r3, r3, #1
    ba3e:	f043 0301 	orr.w	r3, r3, #1
    ba42:	e06d      	b.n	bb20 <mp_unary_op+0x1b0>
                }
            default:
                assert(op == MP_UNARY_OP_INVERT);
    ba44:	687b      	ldr	r3, [r7, #4]
    ba46:	2b02      	cmp	r3, #2
    ba48:	d005      	beq.n	ba56 <mp_unary_op+0xe6>
    ba4a:	4b37      	ldr	r3, [pc, #220]	; (bb28 <mp_unary_op+0x1b8>)
    ba4c:	4a37      	ldr	r2, [pc, #220]	; (bb2c <mp_unary_op+0x1bc>)
    ba4e:	21fa      	movs	r1, #250	; 0xfa
    ba50:	4837      	ldr	r0, [pc, #220]	; (bb30 <mp_unary_op+0x1c0>)
    ba52:	f00f fe3d 	bl	1b6d0 <__assert_func>
                return MP_OBJ_NEW_SMALL_INT(~val);
    ba56:	697b      	ldr	r3, [r7, #20]
    ba58:	43db      	mvns	r3, r3
    ba5a:	005b      	lsls	r3, r3, #1
    ba5c:	f043 0301 	orr.w	r3, r3, #1
    ba60:	e05e      	b.n	bb20 <mp_unary_op+0x1b0>
        }
    } else if (op == MP_UNARY_OP_HASH && MP_OBJ_IS_STR_OR_BYTES(arg)) {
    ba62:	687b      	ldr	r3, [r7, #4]
    ba64:	2b06      	cmp	r3, #6
    ba66:	d145      	bne.n	baf4 <mp_unary_op+0x184>
    ba68:	6838      	ldr	r0, [r7, #0]
    ba6a:	f7ff fddb 	bl	b624 <MP_OBJ_IS_QSTR>
    ba6e:	4603      	mov	r3, r0
    ba70:	2b00      	cmp	r3, #0
    ba72:	d10b      	bne.n	ba8c <mp_unary_op+0x11c>
    ba74:	6838      	ldr	r0, [r7, #0]
    ba76:	f7ff fde7 	bl	b648 <MP_OBJ_IS_OBJ>
    ba7a:	4603      	mov	r3, r0
    ba7c:	2b00      	cmp	r3, #0
    ba7e:	d039      	beq.n	baf4 <mp_unary_op+0x184>
    ba80:	683b      	ldr	r3, [r7, #0]
    ba82:	681b      	ldr	r3, [r3, #0]
    ba84:	699b      	ldr	r3, [r3, #24]
    ba86:	4a2b      	ldr	r2, [pc, #172]	; (bb34 <mp_unary_op+0x1c4>)
    ba88:	4293      	cmp	r3, r2
    ba8a:	d133      	bne.n	baf4 <mp_unary_op+0x184>
        // fast path for hashing str/bytes
        GET_STR_HASH(arg, h);
    ba8c:	6838      	ldr	r0, [r7, #0]
    ba8e:	f7ff fdc9 	bl	b624 <MP_OBJ_IS_QSTR>
    ba92:	4603      	mov	r3, r0
    ba94:	2b00      	cmp	r3, #0
    ba96:	d006      	beq.n	baa6 <mp_unary_op+0x136>
    ba98:	683b      	ldr	r3, [r7, #0]
    ba9a:	089b      	lsrs	r3, r3, #2
    ba9c:	4618      	mov	r0, r3
    ba9e:	f7f5 fc47 	bl	1330 <qstr_hash>
    baa2:	61f8      	str	r0, [r7, #28]
    baa4:	e002      	b.n	baac <mp_unary_op+0x13c>
    baa6:	683b      	ldr	r3, [r7, #0]
    baa8:	685b      	ldr	r3, [r3, #4]
    baaa:	61fb      	str	r3, [r7, #28]
        if (h == 0) {
    baac:	69fb      	ldr	r3, [r7, #28]
    baae:	2b00      	cmp	r3, #0
    bab0:	d11b      	bne.n	baea <mp_unary_op+0x17a>
            GET_STR_DATA_LEN(arg, data, len);
    bab2:	6838      	ldr	r0, [r7, #0]
    bab4:	f7ff fdb6 	bl	b624 <MP_OBJ_IS_QSTR>
    bab8:	4603      	mov	r3, r0
    baba:	2b00      	cmp	r3, #0
    babc:	d009      	beq.n	bad2 <mp_unary_op+0x162>
    babe:	683b      	ldr	r3, [r7, #0]
    bac0:	089b      	lsrs	r3, r3, #2
    bac2:	f107 0208 	add.w	r2, r7, #8
    bac6:	4611      	mov	r1, r2
    bac8:	4618      	mov	r0, r3
    baca:	f7f5 fc5d 	bl	1388 <qstr_data>
    bace:	61b8      	str	r0, [r7, #24]
    bad0:	e005      	b.n	bade <mp_unary_op+0x16e>
    bad2:	683b      	ldr	r3, [r7, #0]
    bad4:	689b      	ldr	r3, [r3, #8]
    bad6:	60bb      	str	r3, [r7, #8]
    bad8:	683b      	ldr	r3, [r7, #0]
    bada:	68db      	ldr	r3, [r3, #12]
    badc:	61bb      	str	r3, [r7, #24]
            h = qstr_compute_hash(data, len);
    bade:	68bb      	ldr	r3, [r7, #8]
    bae0:	4619      	mov	r1, r3
    bae2:	69b8      	ldr	r0, [r7, #24]
    bae4:	f7f5 fa52 	bl	f8c <qstr_compute_hash>
    bae8:	61f8      	str	r0, [r7, #28]
        }
        return MP_OBJ_NEW_SMALL_INT(h);
    baea:	69fb      	ldr	r3, [r7, #28]
    baec:	005b      	lsls	r3, r3, #1
    baee:	f043 0301 	orr.w	r3, r3, #1
    baf2:	e015      	b.n	bb20 <mp_unary_op+0x1b0>
    } else {
        mp_obj_type_t *type = mp_obj_get_type(arg);
    baf4:	6838      	ldr	r0, [r7, #0]
    baf6:	f001 ffdd 	bl	dab4 <mp_obj_get_type>
    bafa:	6138      	str	r0, [r7, #16]
        if (type->unary_op != NULL) {
    bafc:	693b      	ldr	r3, [r7, #16]
    bafe:	695b      	ldr	r3, [r3, #20]
    bb00:	2b00      	cmp	r3, #0
    bb02:	d00a      	beq.n	bb1a <mp_unary_op+0x1aa>
            mp_obj_t result = type->unary_op(op, arg);
    bb04:	693b      	ldr	r3, [r7, #16]
    bb06:	695b      	ldr	r3, [r3, #20]
    bb08:	6839      	ldr	r1, [r7, #0]
    bb0a:	6878      	ldr	r0, [r7, #4]
    bb0c:	4798      	blx	r3
    bb0e:	60f8      	str	r0, [r7, #12]
            if (result != MP_OBJ_NULL) {
    bb10:	68fb      	ldr	r3, [r7, #12]
    bb12:	2b00      	cmp	r3, #0
    bb14:	d001      	beq.n	bb1a <mp_unary_op+0x1aa>
                return result;
    bb16:	68fb      	ldr	r3, [r7, #12]
    bb18:	e002      	b.n	bb20 <mp_unary_op+0x1b0>
            }
        }
        if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
            mp_raise_TypeError("unsupported type for operator");
    bb1a:	4807      	ldr	r0, [pc, #28]	; (bb38 <mp_unary_op+0x1c8>)
    bb1c:	f001 fb6a 	bl	d1f4 <mp_raise_TypeError>
            nlr_raise(mp_obj_new_exception_msg_varg(&mp_type_TypeError,
                "unsupported type for %q: '%s'",
                mp_unary_op_method_name[op], mp_obj_get_type_str(arg)));
        }
    }
}
    bb20:	4618      	mov	r0, r3
    bb22:	3720      	adds	r7, #32
    bb24:	46bd      	mov	sp, r7
    bb26:	bd80      	pop	{r7, pc}
    bb28:	0002158c 	.word	0x0002158c
    bb2c:	00021804 	.word	0x00021804
    bb30:	000215a8 	.word	0x000215a8
    bb34:	00012b11 	.word	0x00012b11
    bb38:	000215bc 	.word	0x000215bc

0000bb3c <mp_binary_op>:

mp_obj_t mp_binary_op(mp_binary_op_t op, mp_obj_t lhs, mp_obj_t rhs) {
    bb3c:	b590      	push	{r4, r7, lr}
    bb3e:	b095      	sub	sp, #84	; 0x54
    bb40:	af00      	add	r7, sp, #0
    bb42:	60f8      	str	r0, [r7, #12]
    bb44:	60b9      	str	r1, [r7, #8]
    bb46:	607a      	str	r2, [r7, #4]
    //   then check for implemented seq.concat
    //   then fail
    // note that list does not implement + or +=, so that inplace_concat is reached first for +=

    // deal with is
    if (op == MP_BINARY_OP_IS) {
    bb48:	68fb      	ldr	r3, [r7, #12]
    bb4a:	2b07      	cmp	r3, #7
    bb4c:	d10b      	bne.n	bb66 <mp_binary_op+0x2a>
        return mp_obj_new_bool(lhs == rhs);
    bb4e:	68ba      	ldr	r2, [r7, #8]
    bb50:	687b      	ldr	r3, [r7, #4]
    bb52:	429a      	cmp	r2, r3
    bb54:	bf0c      	ite	eq
    bb56:	2301      	moveq	r3, #1
    bb58:	2300      	movne	r3, #0
    bb5a:	b2db      	uxtb	r3, r3
    bb5c:	4618      	mov	r0, r3
    bb5e:	f7ff fda7 	bl	b6b0 <mp_obj_new_bool>
    bb62:	4603      	mov	r3, r0
    bb64:	e239      	b.n	bfda <mp_binary_op+0x49e>
    }

    // deal with == and != for all types
    if (op == MP_BINARY_OP_EQUAL || op == MP_BINARY_OP_NOT_EQUAL) {
    bb66:	68fb      	ldr	r3, [r7, #12]
    bb68:	2b02      	cmp	r3, #2
    bb6a:	d002      	beq.n	bb72 <mp_binary_op+0x36>
    bb6c:	68fb      	ldr	r3, [r7, #12]
    bb6e:	2b05      	cmp	r3, #5
    bb70:	d114      	bne.n	bb9c <mp_binary_op+0x60>
        if (mp_obj_equal(lhs, rhs)) {
    bb72:	6879      	ldr	r1, [r7, #4]
    bb74:	68b8      	ldr	r0, [r7, #8]
    bb76:	f002 f8f1 	bl	dd5c <mp_obj_equal>
    bb7a:	4603      	mov	r3, r0
    bb7c:	2b00      	cmp	r3, #0
    bb7e:	d006      	beq.n	bb8e <mp_binary_op+0x52>
            if (op == MP_BINARY_OP_EQUAL) {
    bb80:	68fb      	ldr	r3, [r7, #12]
    bb82:	2b02      	cmp	r3, #2
    bb84:	d101      	bne.n	bb8a <mp_binary_op+0x4e>
                return mp_const_true;
    bb86:	4bb0      	ldr	r3, [pc, #704]	; (be48 <mp_binary_op+0x30c>)
    bb88:	e227      	b.n	bfda <mp_binary_op+0x49e>
            } else {
                return mp_const_false;
    bb8a:	4bb0      	ldr	r3, [pc, #704]	; (be4c <mp_binary_op+0x310>)
    bb8c:	e225      	b.n	bfda <mp_binary_op+0x49e>
            }
        } else {
            if (op == MP_BINARY_OP_EQUAL) {
    bb8e:	68fb      	ldr	r3, [r7, #12]
    bb90:	2b02      	cmp	r3, #2
    bb92:	d101      	bne.n	bb98 <mp_binary_op+0x5c>
                return mp_const_false;
    bb94:	4bad      	ldr	r3, [pc, #692]	; (be4c <mp_binary_op+0x310>)
    bb96:	e220      	b.n	bfda <mp_binary_op+0x49e>
            } else {
                return mp_const_true;
    bb98:	4bab      	ldr	r3, [pc, #684]	; (be48 <mp_binary_op+0x30c>)
    bb9a:	e21e      	b.n	bfda <mp_binary_op+0x49e>
            }
        }
    }

    // deal with exception_match for all types
    if (op == MP_BINARY_OP_EXCEPTION_MATCH) {
    bb9c:	68fb      	ldr	r3, [r7, #12]
    bb9e:	2b08      	cmp	r3, #8
    bba0:	d145      	bne.n	bc2e <mp_binary_op+0xf2>
        // rhs must be issubclass(rhs, BaseException)
        if (mp_obj_is_exception_type(rhs)) {
    bba2:	6878      	ldr	r0, [r7, #4]
    bba4:	f003 ff10 	bl	f9c8 <mp_obj_is_exception_type>
    bba8:	4603      	mov	r3, r0
    bbaa:	2b00      	cmp	r3, #0
    bbac:	d00a      	beq.n	bbc4 <mp_binary_op+0x88>
            if (mp_obj_exception_match(lhs, rhs)) {
    bbae:	6879      	ldr	r1, [r7, #4]
    bbb0:	68b8      	ldr	r0, [r7, #8]
    bbb2:	f003 ff41 	bl	fa38 <mp_obj_exception_match>
    bbb6:	4603      	mov	r3, r0
    bbb8:	2b00      	cmp	r3, #0
    bbba:	d001      	beq.n	bbc0 <mp_binary_op+0x84>
                return mp_const_true;
    bbbc:	4ba2      	ldr	r3, [pc, #648]	; (be48 <mp_binary_op+0x30c>)
    bbbe:	e20c      	b.n	bfda <mp_binary_op+0x49e>
            } else {
                return mp_const_false;
    bbc0:	4ba2      	ldr	r3, [pc, #648]	; (be4c <mp_binary_op+0x310>)
    bbc2:	e20a      	b.n	bfda <mp_binary_op+0x49e>
            }
        } else if (MP_OBJ_IS_TYPE(rhs, &mp_type_tuple)) {
    bbc4:	6878      	ldr	r0, [r7, #4]
    bbc6:	f7ff fd3f 	bl	b648 <MP_OBJ_IS_OBJ>
    bbca:	4603      	mov	r3, r0
    bbcc:	2b00      	cmp	r3, #0
    bbce:	f000 81f3 	beq.w	bfb8 <mp_binary_op+0x47c>
    bbd2:	687b      	ldr	r3, [r7, #4]
    bbd4:	681b      	ldr	r3, [r3, #0]
    bbd6:	4a9e      	ldr	r2, [pc, #632]	; (be50 <mp_binary_op+0x314>)
    bbd8:	4293      	cmp	r3, r2
    bbda:	f040 81ed 	bne.w	bfb8 <mp_binary_op+0x47c>
            mp_obj_tuple_t *tuple = MP_OBJ_TO_PTR(rhs);
    bbde:	687b      	ldr	r3, [r7, #4]
    bbe0:	63fb      	str	r3, [r7, #60]	; 0x3c
            for (size_t i = 0; i < tuple->len; i++) {
    bbe2:	2300      	movs	r3, #0
    bbe4:	64fb      	str	r3, [r7, #76]	; 0x4c
    bbe6:	e01b      	b.n	bc20 <mp_binary_op+0xe4>
                rhs = tuple->items[i];
    bbe8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    bbea:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    bbec:	3202      	adds	r2, #2
    bbee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    bbf2:	607b      	str	r3, [r7, #4]
                if (!mp_obj_is_exception_type(rhs)) {
    bbf4:	6878      	ldr	r0, [r7, #4]
    bbf6:	f003 fee7 	bl	f9c8 <mp_obj_is_exception_type>
    bbfa:	4603      	mov	r3, r0
    bbfc:	f083 0301 	eor.w	r3, r3, #1
    bc00:	b2db      	uxtb	r3, r3
    bc02:	2b00      	cmp	r3, #0
    bc04:	f040 81da 	bne.w	bfbc <mp_binary_op+0x480>
                    goto unsupported_op;
                }
                if (mp_obj_exception_match(lhs, rhs)) {
    bc08:	6879      	ldr	r1, [r7, #4]
    bc0a:	68b8      	ldr	r0, [r7, #8]
    bc0c:	f003 ff14 	bl	fa38 <mp_obj_exception_match>
    bc10:	4603      	mov	r3, r0
    bc12:	2b00      	cmp	r3, #0
    bc14:	d001      	beq.n	bc1a <mp_binary_op+0xde>
                    return mp_const_true;
    bc16:	4b8c      	ldr	r3, [pc, #560]	; (be48 <mp_binary_op+0x30c>)
    bc18:	e1df      	b.n	bfda <mp_binary_op+0x49e>
            for (size_t i = 0; i < tuple->len; i++) {
    bc1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    bc1c:	3301      	adds	r3, #1
    bc1e:	64fb      	str	r3, [r7, #76]	; 0x4c
    bc20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    bc22:	685a      	ldr	r2, [r3, #4]
    bc24:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    bc26:	429a      	cmp	r2, r3
    bc28:	d8de      	bhi.n	bbe8 <mp_binary_op+0xac>
                }
            }
            return mp_const_false;
    bc2a:	4b88      	ldr	r3, [pc, #544]	; (be4c <mp_binary_op+0x310>)
    bc2c:	e1d5      	b.n	bfda <mp_binary_op+0x49e>
        }
        goto unsupported_op;
    }

    if (MP_OBJ_IS_SMALL_INT(lhs)) {
    bc2e:	68b8      	ldr	r0, [r7, #8]
    bc30:	f7ff fce6 	bl	b600 <MP_OBJ_IS_SMALL_INT>
    bc34:	4603      	mov	r3, r0
    bc36:	2b00      	cmp	r3, #0
    bc38:	f000 8182 	beq.w	bf40 <mp_binary_op+0x404>
        mp_int_t lhs_val = MP_OBJ_SMALL_INT_VALUE(lhs);
    bc3c:	68bb      	ldr	r3, [r7, #8]
    bc3e:	105b      	asrs	r3, r3, #1
    bc40:	64bb      	str	r3, [r7, #72]	; 0x48
        if (MP_OBJ_IS_SMALL_INT(rhs)) {
    bc42:	6878      	ldr	r0, [r7, #4]
    bc44:	f7ff fcdc 	bl	b600 <MP_OBJ_IS_SMALL_INT>
    bc48:	4603      	mov	r3, r0
    bc4a:	2b00      	cmp	r3, #0
    bc4c:	f000 8178 	beq.w	bf40 <mp_binary_op+0x404>
            mp_int_t rhs_val = MP_OBJ_SMALL_INT_VALUE(rhs);
    bc50:	687b      	ldr	r3, [r7, #4]
    bc52:	105b      	asrs	r3, r3, #1
    bc54:	647b      	str	r3, [r7, #68]	; 0x44
            //      -       result always fits in mp_int_t, then handled by SMALL_INT check
            //      *       checked explicitly
            //      /       if lhs=MIN and rhs=-1; result always fits in mp_int_t, then handled by SMALL_INT check
            //      %       if lhs=MIN and rhs=-1; result always fits in mp_int_t, then handled by SMALL_INT check
            //      <<      checked explicitly
            switch (op) {
    bc56:	68fb      	ldr	r3, [r7, #12]
    bc58:	2b21      	cmp	r3, #33	; 0x21
    bc5a:	f200 81b1 	bhi.w	bfc0 <mp_binary_op+0x484>
    bc5e:	a201      	add	r2, pc, #4	; (adr r2, bc64 <mp_binary_op+0x128>)
    bc60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    bc64:	0000bec1 	.word	0x0000bec1
    bc68:	0000bed9 	.word	0x0000bed9
    bc6c:	0000bfc1 	.word	0x0000bfc1
    bc70:	0000bef1 	.word	0x0000bef1
    bc74:	0000bf09 	.word	0x0000bf09
    bc78:	0000bfc1 	.word	0x0000bfc1
    bc7c:	0000bfc1 	.word	0x0000bfc1
    bc80:	0000bfc1 	.word	0x0000bfc1
    bc84:	0000bfc1 	.word	0x0000bfc1
    bc88:	0000bced 	.word	0x0000bced
    bc8c:	0000bcf7 	.word	0x0000bcf7
    bc90:	0000bd01 	.word	0x0000bd01
    bc94:	0000bd0b 	.word	0x0000bd0b
    bc98:	0000bd57 	.word	0x0000bd57
    bc9c:	0000bd79 	.word	0x0000bd79
    bca0:	0000bd83 	.word	0x0000bd83
    bca4:	0000bd8d 	.word	0x0000bd8d
    bca8:	0000bdbd 	.word	0x0000bdbd
    bcac:	0000bfc1 	.word	0x0000bfc1
    bcb0:	0000bdd1 	.word	0x0000bdd1
    bcb4:	0000bde5 	.word	0x0000bde5
    bcb8:	0000bced 	.word	0x0000bced
    bcbc:	0000bcf7 	.word	0x0000bcf7
    bcc0:	0000bd01 	.word	0x0000bd01
    bcc4:	0000bd0b 	.word	0x0000bd0b
    bcc8:	0000bd57 	.word	0x0000bd57
    bccc:	0000bd79 	.word	0x0000bd79
    bcd0:	0000bd83 	.word	0x0000bd83
    bcd4:	0000bd8d 	.word	0x0000bd8d
    bcd8:	0000bdbd 	.word	0x0000bdbd
    bcdc:	0000bfc1 	.word	0x0000bfc1
    bce0:	0000bdd1 	.word	0x0000bdd1
    bce4:	0000bde5 	.word	0x0000bde5
    bce8:	0000be7f 	.word	0x0000be7f
                case MP_BINARY_OP_OR:
                case MP_BINARY_OP_INPLACE_OR: lhs_val |= rhs_val; break;
    bcec:	6cba      	ldr	r2, [r7, #72]	; 0x48
    bcee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    bcf0:	4313      	orrs	r3, r2
    bcf2:	64bb      	str	r3, [r7, #72]	; 0x48
    bcf4:	e114      	b.n	bf20 <mp_binary_op+0x3e4>
                case MP_BINARY_OP_XOR:
                case MP_BINARY_OP_INPLACE_XOR: lhs_val ^= rhs_val; break;
    bcf6:	6cba      	ldr	r2, [r7, #72]	; 0x48
    bcf8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    bcfa:	4053      	eors	r3, r2
    bcfc:	64bb      	str	r3, [r7, #72]	; 0x48
    bcfe:	e10f      	b.n	bf20 <mp_binary_op+0x3e4>
                case MP_BINARY_OP_AND:
                case MP_BINARY_OP_INPLACE_AND: lhs_val &= rhs_val; break;
    bd00:	6cba      	ldr	r2, [r7, #72]	; 0x48
    bd02:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    bd04:	4013      	ands	r3, r2
    bd06:	64bb      	str	r3, [r7, #72]	; 0x48
    bd08:	e10a      	b.n	bf20 <mp_binary_op+0x3e4>
                case MP_BINARY_OP_LSHIFT:
                case MP_BINARY_OP_INPLACE_LSHIFT: {
                    if (rhs_val < 0) {
    bd0a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    bd0c:	2b00      	cmp	r3, #0
    bd0e:	da02      	bge.n	bd16 <mp_binary_op+0x1da>
                        // negative shift not allowed
                        mp_raise_ValueError("negative shift count");
    bd10:	4850      	ldr	r0, [pc, #320]	; (be54 <mp_binary_op+0x318>)
    bd12:	f001 fa65 	bl	d1e0 <mp_raise_ValueError>
                    } else if (rhs_val >= (mp_int_t)BITS_PER_WORD || lhs_val > (MP_SMALL_INT_MAX >> rhs_val) || lhs_val < (MP_SMALL_INT_MIN >> rhs_val)) {
    bd16:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    bd18:	2b1f      	cmp	r3, #31
    bd1a:	dc0d      	bgt.n	bd38 <mp_binary_op+0x1fc>
    bd1c:	f06f 4240 	mvn.w	r2, #3221225472	; 0xc0000000
    bd20:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    bd22:	411a      	asrs	r2, r3
    bd24:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    bd26:	429a      	cmp	r2, r3
    bd28:	db06      	blt.n	bd38 <mp_binary_op+0x1fc>
    bd2a:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
    bd2e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    bd30:	411a      	asrs	r2, r3
    bd32:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    bd34:	429a      	cmp	r2, r3
    bd36:	dd08      	ble.n	bd4a <mp_binary_op+0x20e>
                        // left-shift will overflow, so use higher precision integer
                        lhs = mp_obj_new_int_from_ll(lhs_val);
    bd38:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    bd3a:	ea4f 74e3 	mov.w	r4, r3, asr #31
    bd3e:	4618      	mov	r0, r3
    bd40:	4621      	mov	r1, r4
    bd42:	f004 ff05 	bl	10b50 <mp_obj_new_int_from_ll>
    bd46:	60b8      	str	r0, [r7, #8]
                        goto generic_binary_op;
    bd48:	e105      	b.n	bf56 <mp_binary_op+0x41a>
                    } else {
                        // use standard precision
                        lhs_val <<= rhs_val;
    bd4a:	6cba      	ldr	r2, [r7, #72]	; 0x48
    bd4c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    bd4e:	fa02 f303 	lsl.w	r3, r2, r3
    bd52:	64bb      	str	r3, [r7, #72]	; 0x48
                    }
                    break;
    bd54:	e0e4      	b.n	bf20 <mp_binary_op+0x3e4>
                }
                case MP_BINARY_OP_RSHIFT:
                case MP_BINARY_OP_INPLACE_RSHIFT:
                    if (rhs_val < 0) {
    bd56:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    bd58:	2b00      	cmp	r3, #0
    bd5a:	da02      	bge.n	bd62 <mp_binary_op+0x226>
                        // negative shift not allowed
                        mp_raise_ValueError("negative shift count");
    bd5c:	483d      	ldr	r0, [pc, #244]	; (be54 <mp_binary_op+0x318>)
    bd5e:	f001 fa3f 	bl	d1e0 <mp_raise_ValueError>
                    } else {
                        // standard precision is enough for right-shift
                        if (rhs_val >= (mp_int_t)BITS_PER_WORD) {
    bd62:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    bd64:	2b1f      	cmp	r3, #31
    bd66:	dd01      	ble.n	bd6c <mp_binary_op+0x230>
                            // Shifting to big amounts is underfined behavior
                            // in C and is CPU-dependent; propagate sign bit.
                            rhs_val = BITS_PER_WORD - 1;
    bd68:	231f      	movs	r3, #31
    bd6a:	647b      	str	r3, [r7, #68]	; 0x44
                        }
                        lhs_val >>= rhs_val;
    bd6c:	6cba      	ldr	r2, [r7, #72]	; 0x48
    bd6e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    bd70:	fa42 f303 	asr.w	r3, r2, r3
    bd74:	64bb      	str	r3, [r7, #72]	; 0x48
                    }
                    break;
    bd76:	e0d3      	b.n	bf20 <mp_binary_op+0x3e4>
                case MP_BINARY_OP_ADD:
                case MP_BINARY_OP_INPLACE_ADD: lhs_val += rhs_val; break;
    bd78:	6cba      	ldr	r2, [r7, #72]	; 0x48
    bd7a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    bd7c:	4413      	add	r3, r2
    bd7e:	64bb      	str	r3, [r7, #72]	; 0x48
    bd80:	e0ce      	b.n	bf20 <mp_binary_op+0x3e4>
                case MP_BINARY_OP_SUBTRACT:
                case MP_BINARY_OP_INPLACE_SUBTRACT: lhs_val -= rhs_val; break;
    bd82:	6cba      	ldr	r2, [r7, #72]	; 0x48
    bd84:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    bd86:	1ad3      	subs	r3, r2, r3
    bd88:	64bb      	str	r3, [r7, #72]	; 0x48
    bd8a:	e0c9      	b.n	bf20 <mp_binary_op+0x3e4>
                        // use standard precision
                        lhs_val = (mp_int_t)res;
                    }
                    #endif

                    if (mp_small_int_mul_overflow(lhs_val, rhs_val)) {
    bd8c:	6c79      	ldr	r1, [r7, #68]	; 0x44
    bd8e:	6cb8      	ldr	r0, [r7, #72]	; 0x48
    bd90:	f00f faa8 	bl	1b2e4 <mp_small_int_mul_overflow>
    bd94:	4603      	mov	r3, r0
    bd96:	2b00      	cmp	r3, #0
    bd98:	d008      	beq.n	bdac <mp_binary_op+0x270>
                        // use higher precision
                        lhs = mp_obj_new_int_from_ll(lhs_val);
    bd9a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    bd9c:	ea4f 74e3 	mov.w	r4, r3, asr #31
    bda0:	4618      	mov	r0, r3
    bda2:	4621      	mov	r1, r4
    bda4:	f004 fed4 	bl	10b50 <mp_obj_new_int_from_ll>
    bda8:	60b8      	str	r0, [r7, #8]
                        goto generic_binary_op;
    bdaa:	e0d4      	b.n	bf56 <mp_binary_op+0x41a>
                    } else {
                        // use standard precision
                        return MP_OBJ_NEW_SMALL_INT(lhs_val * rhs_val);
    bdac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    bdae:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    bdb0:	fb02 f303 	mul.w	r3, r2, r3
    bdb4:	005b      	lsls	r3, r3, #1
    bdb6:	f043 0301 	orr.w	r3, r3, #1
    bdba:	e10e      	b.n	bfda <mp_binary_op+0x49e>
                    }
                }
                case MP_BINARY_OP_FLOOR_DIVIDE:
                case MP_BINARY_OP_INPLACE_FLOOR_DIVIDE:
                    if (rhs_val == 0) {
    bdbc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    bdbe:	2b00      	cmp	r3, #0
    bdc0:	f000 8102 	beq.w	bfc8 <mp_binary_op+0x48c>
                        goto zero_division;
                    }
                    lhs_val = mp_small_int_floor_divide(lhs_val, rhs_val);
    bdc4:	6c79      	ldr	r1, [r7, #68]	; 0x44
    bdc6:	6cb8      	ldr	r0, [r7, #72]	; 0x48
    bdc8:	f00f faf2 	bl	1b3b0 <mp_small_int_floor_divide>
    bdcc:	64b8      	str	r0, [r7, #72]	; 0x48
                    break;
    bdce:	e0a7      	b.n	bf20 <mp_binary_op+0x3e4>
                    return mp_obj_new_float((mp_float_t)lhs_val / (mp_float_t)rhs_val);
                #endif

                case MP_BINARY_OP_MODULO:
                case MP_BINARY_OP_INPLACE_MODULO: {
                    if (rhs_val == 0) {
    bdd0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    bdd2:	2b00      	cmp	r3, #0
    bdd4:	f000 80fa 	beq.w	bfcc <mp_binary_op+0x490>
                        goto zero_division;
                    }
                    lhs_val = mp_small_int_modulo(lhs_val, rhs_val);
    bdd8:	6c79      	ldr	r1, [r7, #68]	; 0x44
    bdda:	6cb8      	ldr	r0, [r7, #72]	; 0x48
    bddc:	f00f fac2 	bl	1b364 <mp_small_int_modulo>
    bde0:	64b8      	str	r0, [r7, #72]	; 0x48
                    break;
    bde2:	e09d      	b.n	bf20 <mp_binary_op+0x3e4>
                }

                case MP_BINARY_OP_POWER:
                case MP_BINARY_OP_INPLACE_POWER:
                    if (rhs_val < 0) {
    bde4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    bde6:	2b00      	cmp	r3, #0
    bde8:	da02      	bge.n	bdf0 <mp_binary_op+0x2b4>
                        #if MICROPY_PY_BUILTINS_FLOAT
                        lhs = mp_obj_new_float(lhs_val);
                        goto generic_binary_op;
                        #else
                        mp_raise_ValueError("negative power with no float support");
    bdea:	481b      	ldr	r0, [pc, #108]	; (be58 <mp_binary_op+0x31c>)
    bdec:	f001 f9f8 	bl	d1e0 <mp_raise_ValueError>
                        #endif
                    } else {
                        mp_int_t ans = 1;
    bdf0:	2301      	movs	r3, #1
    bdf2:	643b      	str	r3, [r7, #64]	; 0x40
                        while (rhs_val > 0) {
    bdf4:	e024      	b.n	be40 <mp_binary_op+0x304>
                            if (rhs_val & 1) {
    bdf6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    bdf8:	f003 0301 	and.w	r3, r3, #1
    bdfc:	2b00      	cmp	r3, #0
    bdfe:	d00b      	beq.n	be18 <mp_binary_op+0x2dc>
                                if (mp_small_int_mul_overflow(ans, lhs_val)) {
    be00:	6cb9      	ldr	r1, [r7, #72]	; 0x48
    be02:	6c38      	ldr	r0, [r7, #64]	; 0x40
    be04:	f00f fa6e 	bl	1b2e4 <mp_small_int_mul_overflow>
    be08:	4603      	mov	r3, r0
    be0a:	2b00      	cmp	r3, #0
    be0c:	d12a      	bne.n	be64 <mp_binary_op+0x328>
                                    goto power_overflow;
                                }
                                ans *= lhs_val;
    be0e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    be10:	6cba      	ldr	r2, [r7, #72]	; 0x48
    be12:	fb02 f303 	mul.w	r3, r2, r3
    be16:	643b      	str	r3, [r7, #64]	; 0x40
                            }
                            if (rhs_val == 1) {
    be18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    be1a:	2b01      	cmp	r3, #1
    be1c:	d01e      	beq.n	be5c <mp_binary_op+0x320>
                                break;
                            }
                            rhs_val /= 2;
    be1e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    be20:	0fda      	lsrs	r2, r3, #31
    be22:	4413      	add	r3, r2
    be24:	105b      	asrs	r3, r3, #1
    be26:	647b      	str	r3, [r7, #68]	; 0x44
                            if (mp_small_int_mul_overflow(lhs_val, lhs_val)) {
    be28:	6cb9      	ldr	r1, [r7, #72]	; 0x48
    be2a:	6cb8      	ldr	r0, [r7, #72]	; 0x48
    be2c:	f00f fa5a 	bl	1b2e4 <mp_small_int_mul_overflow>
    be30:	4603      	mov	r3, r0
    be32:	2b00      	cmp	r3, #0
    be34:	d118      	bne.n	be68 <mp_binary_op+0x32c>
                                goto power_overflow;
                            }
                            lhs_val *= lhs_val;
    be36:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    be38:	6cba      	ldr	r2, [r7, #72]	; 0x48
    be3a:	fb02 f303 	mul.w	r3, r2, r3
    be3e:	64bb      	str	r3, [r7, #72]	; 0x48
                        while (rhs_val > 0) {
    be40:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    be42:	2b00      	cmp	r3, #0
    be44:	dcd7      	bgt.n	bdf6 <mp_binary_op+0x2ba>
    be46:	e00a      	b.n	be5e <mp_binary_op+0x322>
    be48:	00021b78 	.word	0x00021b78
    be4c:	00021b70 	.word	0x00021b70
    be50:	00023d90 	.word	0x00023d90
    be54:	000215dc 	.word	0x000215dc
    be58:	000215f4 	.word	0x000215f4
                                break;
    be5c:	bf00      	nop
                        }
                        lhs_val = ans;
    be5e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    be60:	64bb      	str	r3, [r7, #72]	; 0x48
                    }
                    break;
    be62:	e05d      	b.n	bf20 <mp_binary_op+0x3e4>
                                    goto power_overflow;
    be64:	bf00      	nop
    be66:	e000      	b.n	be6a <mp_binary_op+0x32e>
                                goto power_overflow;
    be68:	bf00      	nop

                power_overflow:
                    // use higher precision
                    lhs = mp_obj_new_int_from_ll(MP_OBJ_SMALL_INT_VALUE(lhs));
    be6a:	68bb      	ldr	r3, [r7, #8]
    be6c:	105b      	asrs	r3, r3, #1
    be6e:	ea4f 74e3 	mov.w	r4, r3, asr #31
    be72:	4618      	mov	r0, r3
    be74:	4621      	mov	r1, r4
    be76:	f004 fe6b 	bl	10b50 <mp_obj_new_int_from_ll>
    be7a:	60b8      	str	r0, [r7, #8]
                    goto generic_binary_op;
    be7c:	e06b      	b.n	bf56 <mp_binary_op+0x41a>

                case MP_BINARY_OP_DIVMOD: {
                    if (rhs_val == 0) {
    be7e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    be80:	2b00      	cmp	r3, #0
    be82:	f000 80a5 	beq.w	bfd0 <mp_binary_op+0x494>
                        goto zero_division;
                    }
                    // to reduce stack usage we don't pass a temp array of the 2 items
                    mp_obj_tuple_t *tuple = MP_OBJ_TO_PTR(mp_obj_new_tuple(2, NULL));
    be86:	2100      	movs	r1, #0
    be88:	2002      	movs	r0, #2
    be8a:	f00a f8ef 	bl	1606c <mp_obj_new_tuple>
    be8e:	63b8      	str	r0, [r7, #56]	; 0x38
                    tuple->items[0] = MP_OBJ_NEW_SMALL_INT(mp_small_int_floor_divide(lhs_val, rhs_val));
    be90:	6c79      	ldr	r1, [r7, #68]	; 0x44
    be92:	6cb8      	ldr	r0, [r7, #72]	; 0x48
    be94:	f00f fa8c 	bl	1b3b0 <mp_small_int_floor_divide>
    be98:	4603      	mov	r3, r0
    be9a:	005b      	lsls	r3, r3, #1
    be9c:	f043 0301 	orr.w	r3, r3, #1
    bea0:	461a      	mov	r2, r3
    bea2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    bea4:	609a      	str	r2, [r3, #8]
                    tuple->items[1] = MP_OBJ_NEW_SMALL_INT(mp_small_int_modulo(lhs_val, rhs_val));
    bea6:	6c79      	ldr	r1, [r7, #68]	; 0x44
    bea8:	6cb8      	ldr	r0, [r7, #72]	; 0x48
    beaa:	f00f fa5b 	bl	1b364 <mp_small_int_modulo>
    beae:	4603      	mov	r3, r0
    beb0:	005b      	lsls	r3, r3, #1
    beb2:	f043 0301 	orr.w	r3, r3, #1
    beb6:	461a      	mov	r2, r3
    beb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    beba:	60da      	str	r2, [r3, #12]
                    return MP_OBJ_FROM_PTR(tuple);
    bebc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    bebe:	e08c      	b.n	bfda <mp_binary_op+0x49e>
                }

                case MP_BINARY_OP_LESS: return mp_obj_new_bool(lhs_val < rhs_val);
    bec0:	6cba      	ldr	r2, [r7, #72]	; 0x48
    bec2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    bec4:	429a      	cmp	r2, r3
    bec6:	bfb4      	ite	lt
    bec8:	2301      	movlt	r3, #1
    beca:	2300      	movge	r3, #0
    becc:	b2db      	uxtb	r3, r3
    bece:	4618      	mov	r0, r3
    bed0:	f7ff fbee 	bl	b6b0 <mp_obj_new_bool>
    bed4:	4603      	mov	r3, r0
    bed6:	e080      	b.n	bfda <mp_binary_op+0x49e>
                case MP_BINARY_OP_MORE: return mp_obj_new_bool(lhs_val > rhs_val);
    bed8:	6cba      	ldr	r2, [r7, #72]	; 0x48
    beda:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    bedc:	429a      	cmp	r2, r3
    bede:	bfcc      	ite	gt
    bee0:	2301      	movgt	r3, #1
    bee2:	2300      	movle	r3, #0
    bee4:	b2db      	uxtb	r3, r3
    bee6:	4618      	mov	r0, r3
    bee8:	f7ff fbe2 	bl	b6b0 <mp_obj_new_bool>
    beec:	4603      	mov	r3, r0
    beee:	e074      	b.n	bfda <mp_binary_op+0x49e>
                case MP_BINARY_OP_LESS_EQUAL: return mp_obj_new_bool(lhs_val <= rhs_val);
    bef0:	6cba      	ldr	r2, [r7, #72]	; 0x48
    bef2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    bef4:	429a      	cmp	r2, r3
    bef6:	bfd4      	ite	le
    bef8:	2301      	movle	r3, #1
    befa:	2300      	movgt	r3, #0
    befc:	b2db      	uxtb	r3, r3
    befe:	4618      	mov	r0, r3
    bf00:	f7ff fbd6 	bl	b6b0 <mp_obj_new_bool>
    bf04:	4603      	mov	r3, r0
    bf06:	e068      	b.n	bfda <mp_binary_op+0x49e>
                case MP_BINARY_OP_MORE_EQUAL: return mp_obj_new_bool(lhs_val >= rhs_val);
    bf08:	6cba      	ldr	r2, [r7, #72]	; 0x48
    bf0a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    bf0c:	429a      	cmp	r2, r3
    bf0e:	bfac      	ite	ge
    bf10:	2301      	movge	r3, #1
    bf12:	2300      	movlt	r3, #0
    bf14:	b2db      	uxtb	r3, r3
    bf16:	4618      	mov	r0, r3
    bf18:	f7ff fbca 	bl	b6b0 <mp_obj_new_bool>
    bf1c:	4603      	mov	r3, r0
    bf1e:	e05c      	b.n	bfda <mp_binary_op+0x49e>

                default:
                    goto unsupported_op;
            }
            // TODO: We just should make mp_obj_new_int() inline and use that
            if (MP_SMALL_INT_FITS(lhs_val)) {
    bf20:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    bf22:	005a      	lsls	r2, r3, #1
    bf24:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    bf26:	4053      	eors	r3, r2
    bf28:	2b00      	cmp	r3, #0
    bf2a:	db04      	blt.n	bf36 <mp_binary_op+0x3fa>
                return MP_OBJ_NEW_SMALL_INT(lhs_val);
    bf2c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    bf2e:	005b      	lsls	r3, r3, #1
    bf30:	f043 0301 	orr.w	r3, r3, #1
    bf34:	e051      	b.n	bfda <mp_binary_op+0x49e>
            } else {
                return mp_obj_new_int(lhs_val);
    bf36:	6cb8      	ldr	r0, [r7, #72]	; 0x48
    bf38:	f004 fe40 	bl	10bbc <mp_obj_new_int>
    bf3c:	4603      	mov	r3, r0
    bf3e:	e04c      	b.n	bfda <mp_binary_op+0x49e>
#endif
        }
    }

    // Convert MP_BINARY_OP_IN to MP_BINARY_OP_CONTAINS with swapped args.
    if (op == MP_BINARY_OP_IN) {
    bf40:	68fb      	ldr	r3, [r7, #12]
    bf42:	2b06      	cmp	r3, #6
    bf44:	d107      	bne.n	bf56 <mp_binary_op+0x41a>
        op = MP_BINARY_OP_CONTAINS;
    bf46:	2322      	movs	r3, #34	; 0x22
    bf48:	60fb      	str	r3, [r7, #12]
        mp_obj_t temp = lhs;
    bf4a:	68bb      	ldr	r3, [r7, #8]
    bf4c:	637b      	str	r3, [r7, #52]	; 0x34
        lhs = rhs;
    bf4e:	687b      	ldr	r3, [r7, #4]
    bf50:	60bb      	str	r3, [r7, #8]
        rhs = temp;
    bf52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    bf54:	607b      	str	r3, [r7, #4]
    }

    // generic binary_op supplied by type
    mp_obj_type_t *type;
generic_binary_op:
    type = mp_obj_get_type(lhs);
    bf56:	68b8      	ldr	r0, [r7, #8]
    bf58:	f001 fdac 	bl	dab4 <mp_obj_get_type>
    bf5c:	6338      	str	r0, [r7, #48]	; 0x30
    if (type->binary_op != NULL) {
    bf5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    bf60:	699b      	ldr	r3, [r3, #24]
    bf62:	2b00      	cmp	r3, #0
    bf64:	d00b      	beq.n	bf7e <mp_binary_op+0x442>
        mp_obj_t result = type->binary_op(op, lhs, rhs);
    bf66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    bf68:	699b      	ldr	r3, [r3, #24]
    bf6a:	687a      	ldr	r2, [r7, #4]
    bf6c:	68b9      	ldr	r1, [r7, #8]
    bf6e:	68f8      	ldr	r0, [r7, #12]
    bf70:	4798      	blx	r3
    bf72:	62f8      	str	r0, [r7, #44]	; 0x2c
        if (result != MP_OBJ_NULL) {
    bf74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    bf76:	2b00      	cmp	r3, #0
    bf78:	d001      	beq.n	bf7e <mp_binary_op+0x442>
            return result;
    bf7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    bf7c:	e02d      	b.n	bfda <mp_binary_op+0x49e>
        // Convert __rop__ back to __op__ for error message
        op -= MP_BINARY_OP_REVERSE_OR - MP_BINARY_OP_OR;
    }
#endif

    if (op == MP_BINARY_OP_CONTAINS) {
    bf7e:	68fb      	ldr	r3, [r7, #12]
    bf80:	2b22      	cmp	r3, #34	; 0x22
    bf82:	d11e      	bne.n	bfc2 <mp_binary_op+0x486>
        // If type didn't support containment then explicitly walk the iterator.
        // mp_getiter will raise the appropriate exception if lhs is not iterable.
        mp_obj_iter_buf_t iter_buf;
        mp_obj_t iter = mp_getiter(lhs, &iter_buf);
    bf84:	f107 0314 	add.w	r3, r7, #20
    bf88:	4619      	mov	r1, r3
    bf8a:	68b8      	ldr	r0, [r7, #8]
    bf8c:	f000 fde0 	bl	cb50 <mp_getiter>
    bf90:	62b8      	str	r0, [r7, #40]	; 0x28
        mp_obj_t next;
        while ((next = mp_iternext(iter)) != MP_OBJ_STOP_ITERATION) {
    bf92:	e008      	b.n	bfa6 <mp_binary_op+0x46a>
            if (mp_obj_equal(next, rhs)) {
    bf94:	6879      	ldr	r1, [r7, #4]
    bf96:	6a78      	ldr	r0, [r7, #36]	; 0x24
    bf98:	f001 fee0 	bl	dd5c <mp_obj_equal>
    bf9c:	4603      	mov	r3, r0
    bf9e:	2b00      	cmp	r3, #0
    bfa0:	d001      	beq.n	bfa6 <mp_binary_op+0x46a>
                return mp_const_true;
    bfa2:	4b10      	ldr	r3, [pc, #64]	; (bfe4 <mp_binary_op+0x4a8>)
    bfa4:	e019      	b.n	bfda <mp_binary_op+0x49e>
        while ((next = mp_iternext(iter)) != MP_OBJ_STOP_ITERATION) {
    bfa6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    bfa8:	f000 fe54 	bl	cc54 <mp_iternext>
    bfac:	6278      	str	r0, [r7, #36]	; 0x24
    bfae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    bfb0:	2b04      	cmp	r3, #4
    bfb2:	d1ef      	bne.n	bf94 <mp_binary_op+0x458>
            }
        }
        return mp_const_false;
    bfb4:	4b0c      	ldr	r3, [pc, #48]	; (bfe8 <mp_binary_op+0x4ac>)
    bfb6:	e010      	b.n	bfda <mp_binary_op+0x49e>
        goto unsupported_op;
    bfb8:	bf00      	nop
    bfba:	e002      	b.n	bfc2 <mp_binary_op+0x486>
                    goto unsupported_op;
    bfbc:	bf00      	nop
    bfbe:	e000      	b.n	bfc2 <mp_binary_op+0x486>
                    goto unsupported_op;
    bfc0:	bf00      	nop
    }

unsupported_op:
    if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
        mp_raise_TypeError("unsupported type for operator");
    bfc2:	480a      	ldr	r0, [pc, #40]	; (bfec <mp_binary_op+0x4b0>)
    bfc4:	f001 f916 	bl	d1f4 <mp_raise_TypeError>
                        goto zero_division;
    bfc8:	bf00      	nop
    bfca:	e002      	b.n	bfd2 <mp_binary_op+0x496>
                        goto zero_division;
    bfcc:	bf00      	nop
    bfce:	e000      	b.n	bfd2 <mp_binary_op+0x496>
                        goto zero_division;
    bfd0:	bf00      	nop
            "unsupported types for %q: '%s', '%s'",
            mp_binary_op_method_name[op], mp_obj_get_type_str(lhs), mp_obj_get_type_str(rhs)));
    }

zero_division:
    mp_raise_msg(&mp_type_ZeroDivisionError, "division by zero");
    bfd2:	4907      	ldr	r1, [pc, #28]	; (bff0 <mp_binary_op+0x4b4>)
    bfd4:	4807      	ldr	r0, [pc, #28]	; (bff4 <mp_binary_op+0x4b8>)
    bfd6:	f001 f8eb 	bl	d1b0 <mp_raise_msg>
}
    bfda:	4618      	mov	r0, r3
    bfdc:	3754      	adds	r7, #84	; 0x54
    bfde:	46bd      	mov	sp, r7
    bfe0:	bd90      	pop	{r4, r7, pc}
    bfe2:	bf00      	nop
    bfe4:	00021b78 	.word	0x00021b78
    bfe8:	00021b70 	.word	0x00021b70
    bfec:	000215bc 	.word	0x000215bc
    bff0:	0002161c 	.word	0x0002161c
    bff4:	00022314 	.word	0x00022314

0000bff8 <mp_call_function_0>:

mp_obj_t mp_call_function_0(mp_obj_t fun) {
    bff8:	b580      	push	{r7, lr}
    bffa:	b082      	sub	sp, #8
    bffc:	af00      	add	r7, sp, #0
    bffe:	6078      	str	r0, [r7, #4]
    return mp_call_function_n_kw(fun, 0, 0, NULL);
    c000:	2300      	movs	r3, #0
    c002:	2200      	movs	r2, #0
    c004:	2100      	movs	r1, #0
    c006:	6878      	ldr	r0, [r7, #4]
    c008:	f000 f82c 	bl	c064 <mp_call_function_n_kw>
    c00c:	4603      	mov	r3, r0
}
    c00e:	4618      	mov	r0, r3
    c010:	3708      	adds	r7, #8
    c012:	46bd      	mov	sp, r7
    c014:	bd80      	pop	{r7, pc}
    c016:	bf00      	nop

0000c018 <mp_call_function_1>:

mp_obj_t mp_call_function_1(mp_obj_t fun, mp_obj_t arg) {
    c018:	b580      	push	{r7, lr}
    c01a:	b082      	sub	sp, #8
    c01c:	af00      	add	r7, sp, #0
    c01e:	6078      	str	r0, [r7, #4]
    c020:	6039      	str	r1, [r7, #0]
    return mp_call_function_n_kw(fun, 1, 0, &arg);
    c022:	463b      	mov	r3, r7
    c024:	2200      	movs	r2, #0
    c026:	2101      	movs	r1, #1
    c028:	6878      	ldr	r0, [r7, #4]
    c02a:	f000 f81b 	bl	c064 <mp_call_function_n_kw>
    c02e:	4603      	mov	r3, r0
}
    c030:	4618      	mov	r0, r3
    c032:	3708      	adds	r7, #8
    c034:	46bd      	mov	sp, r7
    c036:	bd80      	pop	{r7, pc}

0000c038 <mp_call_function_2>:

mp_obj_t mp_call_function_2(mp_obj_t fun, mp_obj_t arg1, mp_obj_t arg2) {
    c038:	b580      	push	{r7, lr}
    c03a:	b086      	sub	sp, #24
    c03c:	af00      	add	r7, sp, #0
    c03e:	60f8      	str	r0, [r7, #12]
    c040:	60b9      	str	r1, [r7, #8]
    c042:	607a      	str	r2, [r7, #4]
    mp_obj_t args[2];
    args[0] = arg1;
    c044:	68bb      	ldr	r3, [r7, #8]
    c046:	613b      	str	r3, [r7, #16]
    args[1] = arg2;
    c048:	687b      	ldr	r3, [r7, #4]
    c04a:	617b      	str	r3, [r7, #20]
    return mp_call_function_n_kw(fun, 2, 0, args);
    c04c:	f107 0310 	add.w	r3, r7, #16
    c050:	2200      	movs	r2, #0
    c052:	2102      	movs	r1, #2
    c054:	68f8      	ldr	r0, [r7, #12]
    c056:	f000 f805 	bl	c064 <mp_call_function_n_kw>
    c05a:	4603      	mov	r3, r0
}
    c05c:	4618      	mov	r0, r3
    c05e:	3718      	adds	r7, #24
    c060:	46bd      	mov	sp, r7
    c062:	bd80      	pop	{r7, pc}

0000c064 <mp_call_function_n_kw>:

// args contains, eg: arg0  arg1  key0  value0  key1  value1
mp_obj_t mp_call_function_n_kw(mp_obj_t fun_in, size_t n_args, size_t n_kw, const mp_obj_t *args) {
    c064:	b590      	push	{r4, r7, lr}
    c066:	b087      	sub	sp, #28
    c068:	af00      	add	r7, sp, #0
    c06a:	60f8      	str	r0, [r7, #12]
    c06c:	60b9      	str	r1, [r7, #8]
    c06e:	607a      	str	r2, [r7, #4]
    c070:	603b      	str	r3, [r7, #0]
    // passing to the function arrays of fixed and keyword arguments

    DEBUG_OP_printf("calling function %p(n_args=" UINT_FMT ", n_kw=" UINT_FMT ", args=%p)\n", fun_in, n_args, n_kw, args);

    // get the type
    mp_obj_type_t *type = mp_obj_get_type(fun_in);
    c072:	68f8      	ldr	r0, [r7, #12]
    c074:	f001 fd1e 	bl	dab4 <mp_obj_get_type>
    c078:	6178      	str	r0, [r7, #20]

    // do the call
    if (type->call != NULL) {
    c07a:	697b      	ldr	r3, [r7, #20]
    c07c:	691b      	ldr	r3, [r3, #16]
    c07e:	2b00      	cmp	r3, #0
    c080:	d008      	beq.n	c094 <mp_call_function_n_kw+0x30>
        return type->call(fun_in, n_args, n_kw, args);
    c082:	697b      	ldr	r3, [r7, #20]
    c084:	691c      	ldr	r4, [r3, #16]
    c086:	683b      	ldr	r3, [r7, #0]
    c088:	687a      	ldr	r2, [r7, #4]
    c08a:	68b9      	ldr	r1, [r7, #8]
    c08c:	68f8      	ldr	r0, [r7, #12]
    c08e:	47a0      	blx	r4
    c090:	4603      	mov	r3, r0
    c092:	e002      	b.n	c09a <mp_call_function_n_kw+0x36>
    }

    if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
        mp_raise_TypeError("object not callable");
    c094:	4803      	ldr	r0, [pc, #12]	; (c0a4 <mp_call_function_n_kw+0x40>)
    c096:	f001 f8ad 	bl	d1f4 <mp_raise_TypeError>
    } else {
        nlr_raise(mp_obj_new_exception_msg_varg(&mp_type_TypeError,
            "'%s' object is not callable", mp_obj_get_type_str(fun_in)));
    }
}
    c09a:	4618      	mov	r0, r3
    c09c:	371c      	adds	r7, #28
    c09e:	46bd      	mov	sp, r7
    c0a0:	bd90      	pop	{r4, r7, pc}
    c0a2:	bf00      	nop
    c0a4:	00021630 	.word	0x00021630

0000c0a8 <mp_call_method_n_kw>:

// args contains: fun  self/NULL  arg(0)  ...  arg(n_args-2)  arg(n_args-1)  kw_key(0)  kw_val(0)  ... kw_key(n_kw-1)  kw_val(n_kw-1)
// if n_args==0 and n_kw==0 then there are only fun and self/NULL
mp_obj_t mp_call_method_n_kw(size_t n_args, size_t n_kw, const mp_obj_t *args) {
    c0a8:	b580      	push	{r7, lr}
    c0aa:	b086      	sub	sp, #24
    c0ac:	af00      	add	r7, sp, #0
    c0ae:	60f8      	str	r0, [r7, #12]
    c0b0:	60b9      	str	r1, [r7, #8]
    c0b2:	607a      	str	r2, [r7, #4]
    DEBUG_OP_printf("call method (fun=%p, self=%p, n_args=" UINT_FMT ", n_kw=" UINT_FMT ", args=%p)\n", args[0], args[1], n_args, n_kw, args);
    int adjust = (args[1] == MP_OBJ_NULL) ? 0 : 1;
    c0b4:	687b      	ldr	r3, [r7, #4]
    c0b6:	3304      	adds	r3, #4
    c0b8:	681b      	ldr	r3, [r3, #0]
    c0ba:	2b00      	cmp	r3, #0
    c0bc:	bf14      	ite	ne
    c0be:	2301      	movne	r3, #1
    c0c0:	2300      	moveq	r3, #0
    c0c2:	b2db      	uxtb	r3, r3
    c0c4:	617b      	str	r3, [r7, #20]
    return mp_call_function_n_kw(args[0], n_args + adjust, n_kw, args + 2 - adjust);
    c0c6:	687b      	ldr	r3, [r7, #4]
    c0c8:	6818      	ldr	r0, [r3, #0]
    c0ca:	697a      	ldr	r2, [r7, #20]
    c0cc:	68fb      	ldr	r3, [r7, #12]
    c0ce:	18d1      	adds	r1, r2, r3
    c0d0:	697a      	ldr	r2, [r7, #20]
    c0d2:	4613      	mov	r3, r2
    c0d4:	079b      	lsls	r3, r3, #30
    c0d6:	1a9b      	subs	r3, r3, r2
    c0d8:	009b      	lsls	r3, r3, #2
    c0da:	3308      	adds	r3, #8
    c0dc:	687a      	ldr	r2, [r7, #4]
    c0de:	4413      	add	r3, r2
    c0e0:	68ba      	ldr	r2, [r7, #8]
    c0e2:	f7ff ffbf 	bl	c064 <mp_call_function_n_kw>
    c0e6:	4603      	mov	r3, r0
}
    c0e8:	4618      	mov	r0, r3
    c0ea:	3718      	adds	r7, #24
    c0ec:	46bd      	mov	sp, r7
    c0ee:	bd80      	pop	{r7, pc}

0000c0f0 <mp_call_prepare_args_n_kw_var>:

// This function only needs to be exposed externally when in stackless mode.
#if !MICROPY_STACKLESS
STATIC
#endif
void mp_call_prepare_args_n_kw_var(bool have_self, size_t n_args_n_kw, const mp_obj_t *args, mp_call_args_t *out_args) {
    c0f0:	b580      	push	{r7, lr}
    c0f2:	b0a2      	sub	sp, #136	; 0x88
    c0f4:	af00      	add	r7, sp, #0
    c0f6:	60b9      	str	r1, [r7, #8]
    c0f8:	607a      	str	r2, [r7, #4]
    c0fa:	603b      	str	r3, [r7, #0]
    c0fc:	4603      	mov	r3, r0
    c0fe:	73fb      	strb	r3, [r7, #15]
    mp_obj_t fun = *args++;
    c100:	687b      	ldr	r3, [r7, #4]
    c102:	1d1a      	adds	r2, r3, #4
    c104:	607a      	str	r2, [r7, #4]
    c106:	681b      	ldr	r3, [r3, #0]
    c108:	663b      	str	r3, [r7, #96]	; 0x60
    mp_obj_t self = MP_OBJ_NULL;
    c10a:	2300      	movs	r3, #0
    c10c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (have_self) {
    c110:	7bfb      	ldrb	r3, [r7, #15]
    c112:	2b00      	cmp	r3, #0
    c114:	d005      	beq.n	c122 <mp_call_prepare_args_n_kw_var+0x32>
        self = *args++; // may be MP_OBJ_NULL
    c116:	687b      	ldr	r3, [r7, #4]
    c118:	1d1a      	adds	r2, r3, #4
    c11a:	607a      	str	r2, [r7, #4]
    c11c:	681b      	ldr	r3, [r3, #0]
    c11e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    }
    uint n_args = n_args_n_kw & 0xff;
    c122:	68bb      	ldr	r3, [r7, #8]
    c124:	b2db      	uxtb	r3, r3
    c126:	65fb      	str	r3, [r7, #92]	; 0x5c
    uint n_kw = (n_args_n_kw >> 8) & 0xff;
    c128:	68bb      	ldr	r3, [r7, #8]
    c12a:	0a1b      	lsrs	r3, r3, #8
    c12c:	b2db      	uxtb	r3, r3
    c12e:	65bb      	str	r3, [r7, #88]	; 0x58
    mp_obj_t pos_seq = args[n_args + 2 * n_kw]; // may be MP_OBJ_NULL
    c130:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    c132:	005a      	lsls	r2, r3, #1
    c134:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    c136:	4413      	add	r3, r2
    c138:	009b      	lsls	r3, r3, #2
    c13a:	687a      	ldr	r2, [r7, #4]
    c13c:	4413      	add	r3, r2
    c13e:	681b      	ldr	r3, [r3, #0]
    c140:	657b      	str	r3, [r7, #84]	; 0x54
    mp_obj_t kw_dict = args[n_args + 2 * n_kw + 1]; // may be MP_OBJ_NULL
    c142:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    c144:	005a      	lsls	r2, r3, #1
    c146:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    c148:	4413      	add	r3, r2
    c14a:	3301      	adds	r3, #1
    c14c:	009b      	lsls	r3, r3, #2
    c14e:	687a      	ldr	r2, [r7, #4]
    c150:	4413      	add	r3, r2
    c152:	681b      	ldr	r3, [r3, #0]
    c154:	653b      	str	r3, [r7, #80]	; 0x50
    // TODO: optimize one day to avoid constructing new arg array? Will be hard.

    // The new args array
    mp_obj_t *args2;
    uint args2_alloc;
    uint args2_len = 0;
    c156:	2300      	movs	r3, #0
    c158:	67bb      	str	r3, [r7, #120]	; 0x78

    // Try to get a hint for the size of the kw_dict
    uint kw_dict_len = 0;
    c15a:	2300      	movs	r3, #0
    c15c:	677b      	str	r3, [r7, #116]	; 0x74
    if (kw_dict != MP_OBJ_NULL && MP_OBJ_IS_TYPE(kw_dict, &mp_type_dict)) {
    c15e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    c160:	2b00      	cmp	r3, #0
    c162:	d00e      	beq.n	c182 <mp_call_prepare_args_n_kw_var+0x92>
    c164:	6d38      	ldr	r0, [r7, #80]	; 0x50
    c166:	f7ff fa6f 	bl	b648 <MP_OBJ_IS_OBJ>
    c16a:	4603      	mov	r3, r0
    c16c:	2b00      	cmp	r3, #0
    c16e:	d008      	beq.n	c182 <mp_call_prepare_args_n_kw_var+0x92>
    c170:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    c172:	681b      	ldr	r3, [r3, #0]
    c174:	4ab0      	ldr	r2, [pc, #704]	; (c438 <mp_call_prepare_args_n_kw_var+0x348>)
    c176:	4293      	cmp	r3, r2
    c178:	d103      	bne.n	c182 <mp_call_prepare_args_n_kw_var+0x92>
        kw_dict_len = mp_obj_dict_len(kw_dict);
    c17a:	6d38      	ldr	r0, [r7, #80]	; 0x50
    c17c:	f003 f940 	bl	f400 <mp_obj_dict_len>
    c180:	6778      	str	r0, [r7, #116]	; 0x74
    }

    // Extract the pos_seq sequence to the new args array.
    // Note that it can be arbitrary iterator.
    if (pos_seq == MP_OBJ_NULL) {
    c182:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    c184:	2b00      	cmp	r3, #0
    c186:	d12c      	bne.n	c1e2 <mp_call_prepare_args_n_kw_var+0xf2>
        // no sequence

        // allocate memory for the new array of args
        args2_alloc = 1 + n_args + 2 * (n_kw + kw_dict_len);
    c188:	6dba      	ldr	r2, [r7, #88]	; 0x58
    c18a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    c18c:	4413      	add	r3, r2
    c18e:	005a      	lsls	r2, r3, #1
    c190:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    c192:	4413      	add	r3, r2
    c194:	3301      	adds	r3, #1
    c196:	67fb      	str	r3, [r7, #124]	; 0x7c
        args2 = mp_nonlocal_alloc(args2_alloc * sizeof(mp_obj_t));
    c198:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    c19a:	009b      	lsls	r3, r3, #2
    c19c:	4618      	mov	r0, r3
    c19e:	f7ff faa5 	bl	b6ec <mp_nonlocal_alloc>
    c1a2:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80

        // copy the self
        if (self != MP_OBJ_NULL) {
    c1a6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
    c1aa:	2b00      	cmp	r3, #0
    c1ac:	d009      	beq.n	c1c2 <mp_call_prepare_args_n_kw_var+0xd2>
            args2[args2_len++] = self;
    c1ae:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    c1b0:	1c5a      	adds	r2, r3, #1
    c1b2:	67ba      	str	r2, [r7, #120]	; 0x78
    c1b4:	009b      	lsls	r3, r3, #2
    c1b6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
    c1ba:	4413      	add	r3, r2
    c1bc:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
    c1c0:	601a      	str	r2, [r3, #0]
        }

        // copy the fixed pos args
        mp_seq_copy(args2 + args2_len, args, n_args, mp_obj_t);
    c1c2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    c1c4:	009b      	lsls	r3, r3, #2
    c1c6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
    c1ca:	18d0      	adds	r0, r2, r3
    c1cc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    c1ce:	009b      	lsls	r3, r3, #2
    c1d0:	461a      	mov	r2, r3
    c1d2:	6879      	ldr	r1, [r7, #4]
    c1d4:	f010 fd50 	bl	1cc78 <memcpy>
        args2_len += n_args;
    c1d8:	6fba      	ldr	r2, [r7, #120]	; 0x78
    c1da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    c1dc:	4413      	add	r3, r2
    c1de:	67bb      	str	r3, [r7, #120]	; 0x78
    c1e0:	e0b1      	b.n	c346 <mp_call_prepare_args_n_kw_var+0x256>

    } else if (MP_OBJ_IS_TYPE(pos_seq, &mp_type_tuple) || MP_OBJ_IS_TYPE(pos_seq, &mp_type_list)) {
    c1e2:	6d78      	ldr	r0, [r7, #84]	; 0x54
    c1e4:	f7ff fa30 	bl	b648 <MP_OBJ_IS_OBJ>
    c1e8:	4603      	mov	r3, r0
    c1ea:	2b00      	cmp	r3, #0
    c1ec:	d004      	beq.n	c1f8 <mp_call_prepare_args_n_kw_var+0x108>
    c1ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    c1f0:	681b      	ldr	r3, [r3, #0]
    c1f2:	4a92      	ldr	r2, [pc, #584]	; (c43c <mp_call_prepare_args_n_kw_var+0x34c>)
    c1f4:	4293      	cmp	r3, r2
    c1f6:	d00a      	beq.n	c20e <mp_call_prepare_args_n_kw_var+0x11e>
    c1f8:	6d78      	ldr	r0, [r7, #84]	; 0x54
    c1fa:	f7ff fa25 	bl	b648 <MP_OBJ_IS_OBJ>
    c1fe:	4603      	mov	r3, r0
    c200:	2b00      	cmp	r3, #0
    c202:	d04a      	beq.n	c29a <mp_call_prepare_args_n_kw_var+0x1aa>
    c204:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    c206:	681b      	ldr	r3, [r3, #0]
    c208:	4a8d      	ldr	r2, [pc, #564]	; (c440 <mp_call_prepare_args_n_kw_var+0x350>)
    c20a:	4293      	cmp	r3, r2
    c20c:	d145      	bne.n	c29a <mp_call_prepare_args_n_kw_var+0x1aa>
        // optimise the case of a tuple and list

        // get the items
        size_t len;
        mp_obj_t *items;
        mp_obj_get_array(pos_seq, &len, &items);
    c20e:	f107 0230 	add.w	r2, r7, #48	; 0x30
    c212:	f107 0334 	add.w	r3, r7, #52	; 0x34
    c216:	4619      	mov	r1, r3
    c218:	6d78      	ldr	r0, [r7, #84]	; 0x54
    c21a:	f001 fec5 	bl	dfa8 <mp_obj_get_array>

        // allocate memory for the new array of args
        args2_alloc = 1 + n_args + len + 2 * (n_kw + kw_dict_len);
    c21e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    c220:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    c222:	441a      	add	r2, r3
    c224:	6db9      	ldr	r1, [r7, #88]	; 0x58
    c226:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    c228:	440b      	add	r3, r1
    c22a:	005b      	lsls	r3, r3, #1
    c22c:	4413      	add	r3, r2
    c22e:	3301      	adds	r3, #1
    c230:	67fb      	str	r3, [r7, #124]	; 0x7c
        args2 = mp_nonlocal_alloc(args2_alloc * sizeof(mp_obj_t));
    c232:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    c234:	009b      	lsls	r3, r3, #2
    c236:	4618      	mov	r0, r3
    c238:	f7ff fa58 	bl	b6ec <mp_nonlocal_alloc>
    c23c:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80

        // copy the self
        if (self != MP_OBJ_NULL) {
    c240:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
    c244:	2b00      	cmp	r3, #0
    c246:	d009      	beq.n	c25c <mp_call_prepare_args_n_kw_var+0x16c>
            args2[args2_len++] = self;
    c248:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    c24a:	1c5a      	adds	r2, r3, #1
    c24c:	67ba      	str	r2, [r7, #120]	; 0x78
    c24e:	009b      	lsls	r3, r3, #2
    c250:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
    c254:	4413      	add	r3, r2
    c256:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
    c25a:	601a      	str	r2, [r3, #0]
        }

        // copy the fixed and variable position args
        mp_seq_cat(args2 + args2_len, args, n_args, items, len, mp_obj_t);
    c25c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    c25e:	009b      	lsls	r3, r3, #2
    c260:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
    c264:	18d0      	adds	r0, r2, r3
    c266:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    c268:	009b      	lsls	r3, r3, #2
    c26a:	461a      	mov	r2, r3
    c26c:	6879      	ldr	r1, [r7, #4]
    c26e:	f010 fd03 	bl	1cc78 <memcpy>
    c272:	6fba      	ldr	r2, [r7, #120]	; 0x78
    c274:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    c276:	4413      	add	r3, r2
    c278:	009b      	lsls	r3, r3, #2
    c27a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
    c27e:	18d0      	adds	r0, r2, r3
    c280:	6b39      	ldr	r1, [r7, #48]	; 0x30
    c282:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    c284:	009b      	lsls	r3, r3, #2
    c286:	461a      	mov	r2, r3
    c288:	f010 fcf6 	bl	1cc78 <memcpy>
        args2_len += n_args + len;
    c28c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    c28e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    c290:	4413      	add	r3, r2
    c292:	6fba      	ldr	r2, [r7, #120]	; 0x78
    c294:	4413      	add	r3, r2
    c296:	67bb      	str	r3, [r7, #120]	; 0x78
    } else if (MP_OBJ_IS_TYPE(pos_seq, &mp_type_tuple) || MP_OBJ_IS_TYPE(pos_seq, &mp_type_list)) {
    c298:	e055      	b.n	c346 <mp_call_prepare_args_n_kw_var+0x256>

    } else {
        // generic iterator

        // allocate memory for the new array of args
        args2_alloc = 1 + n_args + 2 * (n_kw + kw_dict_len) + 3;
    c29a:	6dba      	ldr	r2, [r7, #88]	; 0x58
    c29c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    c29e:	4413      	add	r3, r2
    c2a0:	005a      	lsls	r2, r3, #1
    c2a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    c2a4:	4413      	add	r3, r2
    c2a6:	3304      	adds	r3, #4
    c2a8:	67fb      	str	r3, [r7, #124]	; 0x7c
        args2 = mp_nonlocal_alloc(args2_alloc * sizeof(mp_obj_t));
    c2aa:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    c2ac:	009b      	lsls	r3, r3, #2
    c2ae:	4618      	mov	r0, r3
    c2b0:	f7ff fa1c 	bl	b6ec <mp_nonlocal_alloc>
    c2b4:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80

        // copy the self
        if (self != MP_OBJ_NULL) {
    c2b8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
    c2bc:	2b00      	cmp	r3, #0
    c2be:	d009      	beq.n	c2d4 <mp_call_prepare_args_n_kw_var+0x1e4>
            args2[args2_len++] = self;
    c2c0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    c2c2:	1c5a      	adds	r2, r3, #1
    c2c4:	67ba      	str	r2, [r7, #120]	; 0x78
    c2c6:	009b      	lsls	r3, r3, #2
    c2c8:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
    c2cc:	4413      	add	r3, r2
    c2ce:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
    c2d2:	601a      	str	r2, [r3, #0]
        }

        // copy the fixed position args
        mp_seq_copy(args2 + args2_len, args, n_args, mp_obj_t);
    c2d4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    c2d6:	009b      	lsls	r3, r3, #2
    c2d8:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
    c2dc:	18d0      	adds	r0, r2, r3
    c2de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    c2e0:	009b      	lsls	r3, r3, #2
    c2e2:	461a      	mov	r2, r3
    c2e4:	6879      	ldr	r1, [r7, #4]
    c2e6:	f010 fcc7 	bl	1cc78 <memcpy>
        args2_len += n_args;
    c2ea:	6fba      	ldr	r2, [r7, #120]	; 0x78
    c2ec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    c2ee:	4413      	add	r3, r2
    c2f0:	67bb      	str	r3, [r7, #120]	; 0x78

        // extract the variable position args from the iterator
        mp_obj_iter_buf_t iter_buf;
        mp_obj_t iterable = mp_getiter(pos_seq, &iter_buf);
    c2f2:	f107 0320 	add.w	r3, r7, #32
    c2f6:	4619      	mov	r1, r3
    c2f8:	6d78      	ldr	r0, [r7, #84]	; 0x54
    c2fa:	f000 fc29 	bl	cb50 <mp_getiter>
    c2fe:	64f8      	str	r0, [r7, #76]	; 0x4c
        mp_obj_t item;
        while ((item = mp_iternext(iterable)) != MP_OBJ_STOP_ITERATION) {
    c300:	e01a      	b.n	c338 <mp_call_prepare_args_n_kw_var+0x248>
            if (args2_len >= args2_alloc) {
    c302:	6fba      	ldr	r2, [r7, #120]	; 0x78
    c304:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    c306:	429a      	cmp	r2, r3
    c308:	d30d      	bcc.n	c326 <mp_call_prepare_args_n_kw_var+0x236>
                args2 = mp_nonlocal_realloc(args2, args2_alloc * sizeof(mp_obj_t), args2_alloc * 2 * sizeof(mp_obj_t));
    c30a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    c30c:	0099      	lsls	r1, r3, #2
    c30e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    c310:	00db      	lsls	r3, r3, #3
    c312:	461a      	mov	r2, r3
    c314:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
    c318:	f7ff f9f4 	bl	b704 <mp_nonlocal_realloc>
    c31c:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
                args2_alloc *= 2;
    c320:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    c322:	005b      	lsls	r3, r3, #1
    c324:	67fb      	str	r3, [r7, #124]	; 0x7c
            }
            args2[args2_len++] = item;
    c326:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    c328:	1c5a      	adds	r2, r3, #1
    c32a:	67ba      	str	r2, [r7, #120]	; 0x78
    c32c:	009b      	lsls	r3, r3, #2
    c32e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
    c332:	4413      	add	r3, r2
    c334:	6cba      	ldr	r2, [r7, #72]	; 0x48
    c336:	601a      	str	r2, [r3, #0]
        while ((item = mp_iternext(iterable)) != MP_OBJ_STOP_ITERATION) {
    c338:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
    c33a:	f000 fc8b 	bl	cc54 <mp_iternext>
    c33e:	64b8      	str	r0, [r7, #72]	; 0x48
    c340:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    c342:	2b04      	cmp	r3, #4
    c344:	d1dd      	bne.n	c302 <mp_call_prepare_args_n_kw_var+0x212>
        }
    }

    // The size of the args2 array now is the number of positional args.
    uint pos_args_len = args2_len;
    c346:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    c348:	647b      	str	r3, [r7, #68]	; 0x44

    // Copy the fixed kw args.
    mp_seq_copy(args2 + args2_len, args + n_args, 2 * n_kw, mp_obj_t);
    c34a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    c34c:	009b      	lsls	r3, r3, #2
    c34e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
    c352:	18d0      	adds	r0, r2, r3
    c354:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    c356:	009b      	lsls	r3, r3, #2
    c358:	687a      	ldr	r2, [r7, #4]
    c35a:	18d1      	adds	r1, r2, r3
    c35c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    c35e:	00db      	lsls	r3, r3, #3
    c360:	461a      	mov	r2, r3
    c362:	f010 fc89 	bl	1cc78 <memcpy>
    args2_len += 2 * n_kw;
    c366:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    c368:	005b      	lsls	r3, r3, #1
    c36a:	6fba      	ldr	r2, [r7, #120]	; 0x78
    c36c:	4413      	add	r3, r2
    c36e:	67bb      	str	r3, [r7, #120]	; 0x78

    // Extract (key,value) pairs from kw_dict dictionary and append to args2.
    // Note that it can be arbitrary iterator.
    if (kw_dict == MP_OBJ_NULL) {
    c370:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    c372:	2b00      	cmp	r3, #0
    c374:	f000 80d3 	beq.w	c51e <mp_call_prepare_args_n_kw_var+0x42e>
        // pass
    } else if (MP_OBJ_IS_TYPE(kw_dict, &mp_type_dict)) {
    c378:	6d38      	ldr	r0, [r7, #80]	; 0x50
    c37a:	f7ff f965 	bl	b648 <MP_OBJ_IS_OBJ>
    c37e:	4603      	mov	r3, r0
    c380:	2b00      	cmp	r3, #0
    c382:	d065      	beq.n	c450 <mp_call_prepare_args_n_kw_var+0x360>
    c384:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    c386:	681b      	ldr	r3, [r3, #0]
    c388:	4a2b      	ldr	r2, [pc, #172]	; (c438 <mp_call_prepare_args_n_kw_var+0x348>)
    c38a:	4293      	cmp	r3, r2
    c38c:	d160      	bne.n	c450 <mp_call_prepare_args_n_kw_var+0x360>
        // dictionary
        mp_map_t *map = mp_obj_dict_get_map(kw_dict);
    c38e:	6d38      	ldr	r0, [r7, #80]	; 0x50
    c390:	f003 f894 	bl	f4bc <mp_obj_dict_get_map>
    c394:	6438      	str	r0, [r7, #64]	; 0x40
        assert(args2_len + 2 * map->used <= args2_alloc); // should have enough, since kw_dict_len is in this case hinted correctly above
    c396:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    c398:	681b      	ldr	r3, [r3, #0]
    c39a:	f3c3 03dc 	ubfx	r3, r3, #3, #29
    c39e:	005b      	lsls	r3, r3, #1
    c3a0:	461a      	mov	r2, r3
    c3a2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    c3a4:	441a      	add	r2, r3
    c3a6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    c3a8:	429a      	cmp	r2, r3
    c3aa:	d906      	bls.n	c3ba <mp_call_prepare_args_n_kw_var+0x2ca>
    c3ac:	4b25      	ldr	r3, [pc, #148]	; (c444 <mp_call_prepare_args_n_kw_var+0x354>)
    c3ae:	4a26      	ldr	r2, [pc, #152]	; (c448 <mp_call_prepare_args_n_kw_var+0x358>)
    c3b0:	f44f 713b 	mov.w	r1, #748	; 0x2ec
    c3b4:	4825      	ldr	r0, [pc, #148]	; (c44c <mp_call_prepare_args_n_kw_var+0x35c>)
    c3b6:	f00f f98b 	bl	1b6d0 <__assert_func>
        for (size_t i = 0; i < map->alloc; i++) {
    c3ba:	2300      	movs	r3, #0
    c3bc:	673b      	str	r3, [r7, #112]	; 0x70
    c3be:	e034      	b.n	c42a <mp_call_prepare_args_n_kw_var+0x33a>
            if (MP_MAP_SLOT_IS_FILLED(map, i)) {
    c3c0:	6f39      	ldr	r1, [r7, #112]	; 0x70
    c3c2:	6c38      	ldr	r0, [r7, #64]	; 0x40
    c3c4:	f7ff f952 	bl	b66c <MP_MAP_SLOT_IS_FILLED>
    c3c8:	4603      	mov	r3, r0
    c3ca:	2b00      	cmp	r3, #0
    c3cc:	d02a      	beq.n	c424 <mp_call_prepare_args_n_kw_var+0x334>
                // the key must be a qstr, so intern it if it's a string
                mp_obj_t key = map->table[i].key;
    c3ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    c3d0:	689a      	ldr	r2, [r3, #8]
    c3d2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
    c3d4:	00db      	lsls	r3, r3, #3
    c3d6:	4413      	add	r3, r2
    c3d8:	681b      	ldr	r3, [r3, #0]
    c3da:	66fb      	str	r3, [r7, #108]	; 0x6c
                if (!MP_OBJ_IS_QSTR(key)) {
    c3dc:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
    c3de:	f7ff f921 	bl	b624 <MP_OBJ_IS_QSTR>
    c3e2:	4603      	mov	r3, r0
    c3e4:	f083 0301 	eor.w	r3, r3, #1
    c3e8:	b2db      	uxtb	r3, r3
    c3ea:	2b00      	cmp	r3, #0
    c3ec:	d003      	beq.n	c3f6 <mp_call_prepare_args_n_kw_var+0x306>
                    key = mp_obj_str_intern_checked(key);
    c3ee:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
    c3f0:	f009 f978 	bl	156e4 <mp_obj_str_intern_checked>
    c3f4:	66f8      	str	r0, [r7, #108]	; 0x6c
                }
                args2[args2_len++] = key;
    c3f6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    c3f8:	1c5a      	adds	r2, r3, #1
    c3fa:	67ba      	str	r2, [r7, #120]	; 0x78
    c3fc:	009b      	lsls	r3, r3, #2
    c3fe:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
    c402:	4413      	add	r3, r2
    c404:	6efa      	ldr	r2, [r7, #108]	; 0x6c
    c406:	601a      	str	r2, [r3, #0]
                args2[args2_len++] = map->table[i].value;
    c408:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    c40a:	1c5a      	adds	r2, r3, #1
    c40c:	67ba      	str	r2, [r7, #120]	; 0x78
    c40e:	009b      	lsls	r3, r3, #2
    c410:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
    c414:	4413      	add	r3, r2
    c416:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    c418:	6891      	ldr	r1, [r2, #8]
    c41a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
    c41c:	00d2      	lsls	r2, r2, #3
    c41e:	440a      	add	r2, r1
    c420:	6852      	ldr	r2, [r2, #4]
    c422:	601a      	str	r2, [r3, #0]
        for (size_t i = 0; i < map->alloc; i++) {
    c424:	6f3b      	ldr	r3, [r7, #112]	; 0x70
    c426:	3301      	adds	r3, #1
    c428:	673b      	str	r3, [r7, #112]	; 0x70
    c42a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    c42c:	685a      	ldr	r2, [r3, #4]
    c42e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
    c430:	429a      	cmp	r2, r3
    c432:	d8c5      	bhi.n	c3c0 <mp_call_prepare_args_n_kw_var+0x2d0>
    } else if (MP_OBJ_IS_TYPE(kw_dict, &mp_type_dict)) {
    c434:	e073      	b.n	c51e <mp_call_prepare_args_n_kw_var+0x42e>
    c436:	bf00      	nop
    c438:	0002201c 	.word	0x0002201c
    c43c:	00023d90 	.word	0x00023d90
    c440:	00023114 	.word	0x00023114
    c444:	00021644 	.word	0x00021644
    c448:	00021810 	.word	0x00021810
    c44c:	000215a8 	.word	0x000215a8
        // - call keys() to get an iterable of all keys in the mapping
        // - call __getitem__ for each key to get the corresponding value

        // get the keys iterable
        mp_obj_t dest[3];
        mp_load_method(kw_dict, MP_QSTR_keys, dest);
    c450:	f107 0314 	add.w	r3, r7, #20
    c454:	461a      	mov	r2, r3
    c456:	f240 1133 	movw	r1, #307	; 0x133
    c45a:	6d38      	ldr	r0, [r7, #80]	; 0x50
    c45c:	f000 fb00 	bl	ca60 <mp_load_method>
        mp_obj_t iterable = mp_getiter(mp_call_method_n_kw(0, 0, dest), NULL);
    c460:	f107 0314 	add.w	r3, r7, #20
    c464:	461a      	mov	r2, r3
    c466:	2100      	movs	r1, #0
    c468:	2000      	movs	r0, #0
    c46a:	f7ff fe1d 	bl	c0a8 <mp_call_method_n_kw>
    c46e:	4603      	mov	r3, r0
    c470:	2100      	movs	r1, #0
    c472:	4618      	mov	r0, r3
    c474:	f000 fb6c 	bl	cb50 <mp_getiter>
    c478:	63f8      	str	r0, [r7, #60]	; 0x3c

        mp_obj_t key;
        while ((key = mp_iternext(iterable)) != MP_OBJ_STOP_ITERATION) {
    c47a:	e049      	b.n	c510 <mp_call_prepare_args_n_kw_var+0x420>
            // expand size of args array if needed
            if (args2_len + 1 >= args2_alloc) {
    c47c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    c47e:	1c5a      	adds	r2, r3, #1
    c480:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    c482:	429a      	cmp	r2, r3
    c484:	d314      	bcc.n	c4b0 <mp_call_prepare_args_n_kw_var+0x3c0>
                uint new_alloc = args2_alloc * 2;
    c486:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    c488:	005b      	lsls	r3, r3, #1
    c48a:	667b      	str	r3, [r7, #100]	; 0x64
                if (new_alloc < 4) {
    c48c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    c48e:	2b03      	cmp	r3, #3
    c490:	d801      	bhi.n	c496 <mp_call_prepare_args_n_kw_var+0x3a6>
                    new_alloc = 4;
    c492:	2304      	movs	r3, #4
    c494:	667b      	str	r3, [r7, #100]	; 0x64
                }
                args2 = mp_nonlocal_realloc(args2, args2_alloc * sizeof(mp_obj_t), new_alloc * sizeof(mp_obj_t));
    c496:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    c498:	0099      	lsls	r1, r3, #2
    c49a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    c49c:	009b      	lsls	r3, r3, #2
    c49e:	461a      	mov	r2, r3
    c4a0:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
    c4a4:	f7ff f92e 	bl	b704 <mp_nonlocal_realloc>
    c4a8:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
                args2_alloc = new_alloc;
    c4ac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    c4ae:	67fb      	str	r3, [r7, #124]	; 0x7c
            }

            // the key must be a qstr, so intern it if it's a string
            if (!MP_OBJ_IS_QSTR(key)) {
    c4b0:	6eb8      	ldr	r0, [r7, #104]	; 0x68
    c4b2:	f7ff f8b7 	bl	b624 <MP_OBJ_IS_QSTR>
    c4b6:	4603      	mov	r3, r0
    c4b8:	f083 0301 	eor.w	r3, r3, #1
    c4bc:	b2db      	uxtb	r3, r3
    c4be:	2b00      	cmp	r3, #0
    c4c0:	d003      	beq.n	c4ca <mp_call_prepare_args_n_kw_var+0x3da>
                key = mp_obj_str_intern_checked(key);
    c4c2:	6eb8      	ldr	r0, [r7, #104]	; 0x68
    c4c4:	f009 f90e 	bl	156e4 <mp_obj_str_intern_checked>
    c4c8:	66b8      	str	r0, [r7, #104]	; 0x68
            }

            // get the value corresponding to the key
            mp_load_method(kw_dict, MP_QSTR___getitem__, dest);
    c4ca:	f107 0314 	add.w	r3, r7, #20
    c4ce:	461a      	mov	r2, r3
    c4d0:	210f      	movs	r1, #15
    c4d2:	6d38      	ldr	r0, [r7, #80]	; 0x50
    c4d4:	f000 fac4 	bl	ca60 <mp_load_method>
            dest[2] = key;
    c4d8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    c4da:	61fb      	str	r3, [r7, #28]
            mp_obj_t value = mp_call_method_n_kw(1, 0, dest);
    c4dc:	f107 0314 	add.w	r3, r7, #20
    c4e0:	461a      	mov	r2, r3
    c4e2:	2100      	movs	r1, #0
    c4e4:	2001      	movs	r0, #1
    c4e6:	f7ff fddf 	bl	c0a8 <mp_call_method_n_kw>
    c4ea:	63b8      	str	r0, [r7, #56]	; 0x38

            // store the key/value pair in the argument array
            args2[args2_len++] = key;
    c4ec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    c4ee:	1c5a      	adds	r2, r3, #1
    c4f0:	67ba      	str	r2, [r7, #120]	; 0x78
    c4f2:	009b      	lsls	r3, r3, #2
    c4f4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
    c4f8:	4413      	add	r3, r2
    c4fa:	6eba      	ldr	r2, [r7, #104]	; 0x68
    c4fc:	601a      	str	r2, [r3, #0]
            args2[args2_len++] = value;
    c4fe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    c500:	1c5a      	adds	r2, r3, #1
    c502:	67ba      	str	r2, [r7, #120]	; 0x78
    c504:	009b      	lsls	r3, r3, #2
    c506:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
    c50a:	4413      	add	r3, r2
    c50c:	6bba      	ldr	r2, [r7, #56]	; 0x38
    c50e:	601a      	str	r2, [r3, #0]
        while ((key = mp_iternext(iterable)) != MP_OBJ_STOP_ITERATION) {
    c510:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
    c512:	f000 fb9f 	bl	cc54 <mp_iternext>
    c516:	66b8      	str	r0, [r7, #104]	; 0x68
    c518:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    c51a:	2b04      	cmp	r3, #4
    c51c:	d1ae      	bne.n	c47c <mp_call_prepare_args_n_kw_var+0x38c>
        }
    }

    out_args->fun = fun;
    c51e:	683b      	ldr	r3, [r7, #0]
    c520:	6e3a      	ldr	r2, [r7, #96]	; 0x60
    c522:	601a      	str	r2, [r3, #0]
    out_args->args = args2;
    c524:	683b      	ldr	r3, [r7, #0]
    c526:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
    c52a:	611a      	str	r2, [r3, #16]
    out_args->n_args = pos_args_len;
    c52c:	683b      	ldr	r3, [r7, #0]
    c52e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    c530:	605a      	str	r2, [r3, #4]
    out_args->n_kw = (args2_len - pos_args_len) / 2;
    c532:	6fba      	ldr	r2, [r7, #120]	; 0x78
    c534:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    c536:	1ad3      	subs	r3, r2, r3
    c538:	085a      	lsrs	r2, r3, #1
    c53a:	683b      	ldr	r3, [r7, #0]
    c53c:	609a      	str	r2, [r3, #8]
    out_args->n_alloc = args2_alloc;
    c53e:	683b      	ldr	r3, [r7, #0]
    c540:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
    c542:	60da      	str	r2, [r3, #12]
}
    c544:	bf00      	nop
    c546:	3788      	adds	r7, #136	; 0x88
    c548:	46bd      	mov	sp, r7
    c54a:	bd80      	pop	{r7, pc}

0000c54c <mp_call_method_n_kw_var>:

mp_obj_t mp_call_method_n_kw_var(bool have_self, size_t n_args_n_kw, const mp_obj_t *args) {
    c54c:	b580      	push	{r7, lr}
    c54e:	b08a      	sub	sp, #40	; 0x28
    c550:	af00      	add	r7, sp, #0
    c552:	4603      	mov	r3, r0
    c554:	60b9      	str	r1, [r7, #8]
    c556:	607a      	str	r2, [r7, #4]
    c558:	73fb      	strb	r3, [r7, #15]
    mp_call_args_t out_args;
    mp_call_prepare_args_n_kw_var(have_self, n_args_n_kw, args, &out_args);
    c55a:	f107 0310 	add.w	r3, r7, #16
    c55e:	7bf8      	ldrb	r0, [r7, #15]
    c560:	687a      	ldr	r2, [r7, #4]
    c562:	68b9      	ldr	r1, [r7, #8]
    c564:	f7ff fdc4 	bl	c0f0 <mp_call_prepare_args_n_kw_var>

    mp_obj_t res = mp_call_function_n_kw(out_args.fun, out_args.n_args, out_args.n_kw, out_args.args);
    c568:	6938      	ldr	r0, [r7, #16]
    c56a:	6979      	ldr	r1, [r7, #20]
    c56c:	69ba      	ldr	r2, [r7, #24]
    c56e:	6a3b      	ldr	r3, [r7, #32]
    c570:	f7ff fd78 	bl	c064 <mp_call_function_n_kw>
    c574:	6278      	str	r0, [r7, #36]	; 0x24
    mp_nonlocal_free(out_args.args, out_args.n_alloc * sizeof(mp_obj_t));
    c576:	6a3a      	ldr	r2, [r7, #32]
    c578:	69fb      	ldr	r3, [r7, #28]
    c57a:	009b      	lsls	r3, r3, #2
    c57c:	4619      	mov	r1, r3
    c57e:	4610      	mov	r0, r2
    c580:	f7ff f8d0 	bl	b724 <mp_nonlocal_free>

    return res;
    c584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
    c586:	4618      	mov	r0, r3
    c588:	3728      	adds	r7, #40	; 0x28
    c58a:	46bd      	mov	sp, r7
    c58c:	bd80      	pop	{r7, pc}
    c58e:	bf00      	nop

0000c590 <mp_unpack_sequence>:

// unpacked items are stored in reverse order into the array pointed to by items
void mp_unpack_sequence(mp_obj_t seq_in, size_t num, mp_obj_t *items) {
    c590:	b580      	push	{r7, lr}
    c592:	b08e      	sub	sp, #56	; 0x38
    c594:	af00      	add	r7, sp, #0
    c596:	60f8      	str	r0, [r7, #12]
    c598:	60b9      	str	r1, [r7, #8]
    c59a:	607a      	str	r2, [r7, #4]
    size_t seq_len;
    if (MP_OBJ_IS_TYPE(seq_in, &mp_type_tuple) || MP_OBJ_IS_TYPE(seq_in, &mp_type_list)) {
    c59c:	68f8      	ldr	r0, [r7, #12]
    c59e:	f7ff f853 	bl	b648 <MP_OBJ_IS_OBJ>
    c5a2:	4603      	mov	r3, r0
    c5a4:	2b00      	cmp	r3, #0
    c5a6:	d004      	beq.n	c5b2 <mp_unpack_sequence+0x22>
    c5a8:	68fb      	ldr	r3, [r7, #12]
    c5aa:	681b      	ldr	r3, [r3, #0]
    c5ac:	4a38      	ldr	r2, [pc, #224]	; (c690 <mp_unpack_sequence+0x100>)
    c5ae:	4293      	cmp	r3, r2
    c5b0:	d00a      	beq.n	c5c8 <mp_unpack_sequence+0x38>
    c5b2:	68f8      	ldr	r0, [r7, #12]
    c5b4:	f7ff f848 	bl	b648 <MP_OBJ_IS_OBJ>
    c5b8:	4603      	mov	r3, r0
    c5ba:	2b00      	cmp	r3, #0
    c5bc:	d02e      	beq.n	c61c <mp_unpack_sequence+0x8c>
    c5be:	68fb      	ldr	r3, [r7, #12]
    c5c0:	681b      	ldr	r3, [r3, #0]
    c5c2:	4a34      	ldr	r2, [pc, #208]	; (c694 <mp_unpack_sequence+0x104>)
    c5c4:	4293      	cmp	r3, r2
    c5c6:	d129      	bne.n	c61c <mp_unpack_sequence+0x8c>
        mp_obj_t *seq_items;
        mp_obj_get_array(seq_in, &seq_len, &seq_items);
    c5c8:	f107 0224 	add.w	r2, r7, #36	; 0x24
    c5cc:	f107 0328 	add.w	r3, r7, #40	; 0x28
    c5d0:	4619      	mov	r1, r3
    c5d2:	68f8      	ldr	r0, [r7, #12]
    c5d4:	f001 fce8 	bl	dfa8 <mp_obj_get_array>
        if (seq_len < num) {
    c5d8:	6aba      	ldr	r2, [r7, #40]	; 0x28
    c5da:	68bb      	ldr	r3, [r7, #8]
    c5dc:	429a      	cmp	r2, r3
    c5de:	d348      	bcc.n	c672 <mp_unpack_sequence+0xe2>
            goto too_short;
        } else if (seq_len > num) {
    c5e0:	6aba      	ldr	r2, [r7, #40]	; 0x28
    c5e2:	68bb      	ldr	r3, [r7, #8]
    c5e4:	429a      	cmp	r2, r3
    c5e6:	d84a      	bhi.n	c67e <mp_unpack_sequence+0xee>
            goto too_long;
        }
        for (size_t i = 0; i < num; i++) {
    c5e8:	2300      	movs	r3, #0
    c5ea:	637b      	str	r3, [r7, #52]	; 0x34
    c5ec:	e011      	b.n	c612 <mp_unpack_sequence+0x82>
            items[i] = seq_items[num - 1 - i];
    c5ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    c5f0:	009b      	lsls	r3, r3, #2
    c5f2:	687a      	ldr	r2, [r7, #4]
    c5f4:	441a      	add	r2, r3
    c5f6:	6a79      	ldr	r1, [r7, #36]	; 0x24
    c5f8:	68b8      	ldr	r0, [r7, #8]
    c5fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    c5fc:	1ac3      	subs	r3, r0, r3
    c5fe:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    c602:	3b01      	subs	r3, #1
    c604:	009b      	lsls	r3, r3, #2
    c606:	440b      	add	r3, r1
    c608:	681b      	ldr	r3, [r3, #0]
    c60a:	6013      	str	r3, [r2, #0]
        for (size_t i = 0; i < num; i++) {
    c60c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    c60e:	3301      	adds	r3, #1
    c610:	637b      	str	r3, [r7, #52]	; 0x34
    c612:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    c614:	68bb      	ldr	r3, [r7, #8]
    c616:	429a      	cmp	r2, r3
    c618:	d3e9      	bcc.n	c5ee <mp_unpack_sequence+0x5e>
    if (MP_OBJ_IS_TYPE(seq_in, &mp_type_tuple) || MP_OBJ_IS_TYPE(seq_in, &mp_type_list)) {
    c61a:	e029      	b.n	c670 <mp_unpack_sequence+0xe0>
        }
    } else {
        mp_obj_iter_buf_t iter_buf;
        mp_obj_t iterable = mp_getiter(seq_in, &iter_buf);
    c61c:	f107 0314 	add.w	r3, r7, #20
    c620:	4619      	mov	r1, r3
    c622:	68f8      	ldr	r0, [r7, #12]
    c624:	f000 fa94 	bl	cb50 <mp_getiter>
    c628:	6338      	str	r0, [r7, #48]	; 0x30

        for (seq_len = 0; seq_len < num; seq_len++) {
    c62a:	2300      	movs	r3, #0
    c62c:	62bb      	str	r3, [r7, #40]	; 0x28
    c62e:	e014      	b.n	c65a <mp_unpack_sequence+0xca>
            mp_obj_t el = mp_iternext(iterable);
    c630:	6b38      	ldr	r0, [r7, #48]	; 0x30
    c632:	f000 fb0f 	bl	cc54 <mp_iternext>
    c636:	62f8      	str	r0, [r7, #44]	; 0x2c
            if (el == MP_OBJ_STOP_ITERATION) {
    c638:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c63a:	2b04      	cmp	r3, #4
    c63c:	d01b      	beq.n	c676 <mp_unpack_sequence+0xe6>
                goto too_short;
            }
            items[num - 1 - seq_len] = el;
    c63e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    c640:	68ba      	ldr	r2, [r7, #8]
    c642:	1ad3      	subs	r3, r2, r3
    c644:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    c648:	3b01      	subs	r3, #1
    c64a:	009b      	lsls	r3, r3, #2
    c64c:	687a      	ldr	r2, [r7, #4]
    c64e:	4413      	add	r3, r2
    c650:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    c652:	601a      	str	r2, [r3, #0]
        for (seq_len = 0; seq_len < num; seq_len++) {
    c654:	6abb      	ldr	r3, [r7, #40]	; 0x28
    c656:	3301      	adds	r3, #1
    c658:	62bb      	str	r3, [r7, #40]	; 0x28
    c65a:	6aba      	ldr	r2, [r7, #40]	; 0x28
    c65c:	68bb      	ldr	r3, [r7, #8]
    c65e:	429a      	cmp	r2, r3
    c660:	d3e6      	bcc.n	c630 <mp_unpack_sequence+0xa0>
        }
        if (mp_iternext(iterable) != MP_OBJ_STOP_ITERATION) {
    c662:	6b38      	ldr	r0, [r7, #48]	; 0x30
    c664:	f000 faf6 	bl	cc54 <mp_iternext>
    c668:	4603      	mov	r3, r0
    c66a:	2b04      	cmp	r3, #4
    c66c:	d00b      	beq.n	c686 <mp_unpack_sequence+0xf6>
            goto too_long;
    c66e:	e007      	b.n	c680 <mp_unpack_sequence+0xf0>
        }
    }
    return;
    c670:	e009      	b.n	c686 <mp_unpack_sequence+0xf6>
            goto too_short;
    c672:	bf00      	nop
    c674:	e000      	b.n	c678 <mp_unpack_sequence+0xe8>
                goto too_short;
    c676:	bf00      	nop

too_short:
    if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
        mp_raise_ValueError("wrong number of values to unpack");
    c678:	4807      	ldr	r0, [pc, #28]	; (c698 <mp_unpack_sequence+0x108>)
    c67a:	f000 fdb1 	bl	d1e0 <mp_raise_ValueError>
            goto too_long;
    c67e:	bf00      	nop
        nlr_raise(mp_obj_new_exception_msg_varg(&mp_type_ValueError,
            "need more than %d values to unpack", (int)seq_len));
    }
too_long:
    if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
        mp_raise_ValueError("wrong number of values to unpack");
    c680:	4805      	ldr	r0, [pc, #20]	; (c698 <mp_unpack_sequence+0x108>)
    c682:	f000 fdad 	bl	d1e0 <mp_raise_ValueError>
    return;
    c686:	bf00      	nop
    } else {
        nlr_raise(mp_obj_new_exception_msg_varg(&mp_type_ValueError,
            "too many values to unpack (expected %d)", (int)num));
    }
}
    c688:	3738      	adds	r7, #56	; 0x38
    c68a:	46bd      	mov	sp, r7
    c68c:	bd80      	pop	{r7, pc}
    c68e:	bf00      	nop
    c690:	00023d90 	.word	0x00023d90
    c694:	00023114 	.word	0x00023114
    c698:	00021670 	.word	0x00021670

0000c69c <mp_unpack_ex>:

// unpacked items are stored in reverse order into the array pointed to by items
void mp_unpack_ex(mp_obj_t seq_in, size_t num_in, mp_obj_t *items) {
    c69c:	b590      	push	{r4, r7, lr}
    c69e:	b08f      	sub	sp, #60	; 0x3c
    c6a0:	af00      	add	r7, sp, #0
    c6a2:	60f8      	str	r0, [r7, #12]
    c6a4:	60b9      	str	r1, [r7, #8]
    c6a6:	607a      	str	r2, [r7, #4]
    size_t num_left = num_in & 0xff;
    c6a8:	68bb      	ldr	r3, [r7, #8]
    c6aa:	b2db      	uxtb	r3, r3
    c6ac:	62bb      	str	r3, [r7, #40]	; 0x28
    size_t num_right = (num_in >> 8) & 0xff;
    c6ae:	68bb      	ldr	r3, [r7, #8]
    c6b0:	0a1b      	lsrs	r3, r3, #8
    c6b2:	b2db      	uxtb	r3, r3
    c6b4:	627b      	str	r3, [r7, #36]	; 0x24
    DEBUG_OP_printf("unpack ex " UINT_FMT " " UINT_FMT "\n", num_left, num_right);
    size_t seq_len;
    if (MP_OBJ_IS_TYPE(seq_in, &mp_type_tuple) || MP_OBJ_IS_TYPE(seq_in, &mp_type_list)) {
    c6b6:	68f8      	ldr	r0, [r7, #12]
    c6b8:	f7fe ffc6 	bl	b648 <MP_OBJ_IS_OBJ>
    c6bc:	4603      	mov	r3, r0
    c6be:	2b00      	cmp	r3, #0
    c6c0:	d004      	beq.n	c6cc <mp_unpack_ex+0x30>
    c6c2:	68fb      	ldr	r3, [r7, #12]
    c6c4:	681b      	ldr	r3, [r3, #0]
    c6c6:	4a6a      	ldr	r2, [pc, #424]	; (c870 <mp_unpack_ex+0x1d4>)
    c6c8:	4293      	cmp	r3, r2
    c6ca:	d00a      	beq.n	c6e2 <mp_unpack_ex+0x46>
    c6cc:	68f8      	ldr	r0, [r7, #12]
    c6ce:	f7fe ffbb 	bl	b648 <MP_OBJ_IS_OBJ>
    c6d2:	4603      	mov	r3, r0
    c6d4:	2b00      	cmp	r3, #0
    c6d6:	d05b      	beq.n	c790 <mp_unpack_ex+0xf4>
    c6d8:	68fb      	ldr	r3, [r7, #12]
    c6da:	681b      	ldr	r3, [r3, #0]
    c6dc:	4a65      	ldr	r2, [pc, #404]	; (c874 <mp_unpack_ex+0x1d8>)
    c6de:	4293      	cmp	r3, r2
    c6e0:	d156      	bne.n	c790 <mp_unpack_ex+0xf4>
        mp_obj_t *seq_items;
        mp_obj_get_array(seq_in, &seq_len, &seq_items);
    c6e2:	f107 0210 	add.w	r2, r7, #16
    c6e6:	f107 0314 	add.w	r3, r7, #20
    c6ea:	4619      	mov	r1, r3
    c6ec:	68f8      	ldr	r0, [r7, #12]
    c6ee:	f001 fc5b 	bl	dfa8 <mp_obj_get_array>
        if (seq_len < num_left + num_right) {
    c6f2:	6aba      	ldr	r2, [r7, #40]	; 0x28
    c6f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    c6f6:	441a      	add	r2, r3
    c6f8:	697b      	ldr	r3, [r7, #20]
    c6fa:	429a      	cmp	r2, r3
    c6fc:	f200 80ad 	bhi.w	c85a <mp_unpack_ex+0x1be>
            goto too_short;
        }
        for (size_t i = 0; i < num_right; i++) {
    c700:	2300      	movs	r3, #0
    c702:	637b      	str	r3, [r7, #52]	; 0x34
    c704:	e011      	b.n	c72a <mp_unpack_ex+0x8e>
            items[i] = seq_items[seq_len - 1 - i];
    c706:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    c708:	009b      	lsls	r3, r3, #2
    c70a:	687a      	ldr	r2, [r7, #4]
    c70c:	441a      	add	r2, r3
    c70e:	6939      	ldr	r1, [r7, #16]
    c710:	6978      	ldr	r0, [r7, #20]
    c712:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    c714:	1ac3      	subs	r3, r0, r3
    c716:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    c71a:	3b01      	subs	r3, #1
    c71c:	009b      	lsls	r3, r3, #2
    c71e:	440b      	add	r3, r1
    c720:	681b      	ldr	r3, [r3, #0]
    c722:	6013      	str	r3, [r2, #0]
        for (size_t i = 0; i < num_right; i++) {
    c724:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    c726:	3301      	adds	r3, #1
    c728:	637b      	str	r3, [r7, #52]	; 0x34
    c72a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    c72c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    c72e:	429a      	cmp	r2, r3
    c730:	d3e9      	bcc.n	c706 <mp_unpack_ex+0x6a>
        }
        items[num_right] = mp_obj_new_list(seq_len - num_left - num_right, seq_items + num_left);
    c732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    c734:	009b      	lsls	r3, r3, #2
    c736:	687a      	ldr	r2, [r7, #4]
    c738:	18d4      	adds	r4, r2, r3
    c73a:	697a      	ldr	r2, [r7, #20]
    c73c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    c73e:	1ad2      	subs	r2, r2, r3
    c740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    c742:	1ad0      	subs	r0, r2, r3
    c744:	693a      	ldr	r2, [r7, #16]
    c746:	6abb      	ldr	r3, [r7, #40]	; 0x28
    c748:	009b      	lsls	r3, r3, #2
    c74a:	4413      	add	r3, r2
    c74c:	4619      	mov	r1, r3
    c74e:	f005 f9df 	bl	11b10 <mp_obj_new_list>
    c752:	4603      	mov	r3, r0
    c754:	6023      	str	r3, [r4, #0]
        for (size_t i = 0; i < num_left; i++) {
    c756:	2300      	movs	r3, #0
    c758:	633b      	str	r3, [r7, #48]	; 0x30
    c75a:	e014      	b.n	c786 <mp_unpack_ex+0xea>
            items[num_right + 1 + i] = seq_items[num_left - 1 - i];
    c75c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    c75e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    c760:	4413      	add	r3, r2
    c762:	3301      	adds	r3, #1
    c764:	009b      	lsls	r3, r3, #2
    c766:	687a      	ldr	r2, [r7, #4]
    c768:	441a      	add	r2, r3
    c76a:	6939      	ldr	r1, [r7, #16]
    c76c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    c76e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    c770:	1ac3      	subs	r3, r0, r3
    c772:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    c776:	3b01      	subs	r3, #1
    c778:	009b      	lsls	r3, r3, #2
    c77a:	440b      	add	r3, r1
    c77c:	681b      	ldr	r3, [r3, #0]
    c77e:	6013      	str	r3, [r2, #0]
        for (size_t i = 0; i < num_left; i++) {
    c780:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    c782:	3301      	adds	r3, #1
    c784:	633b      	str	r3, [r7, #48]	; 0x30
    c786:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    c788:	6abb      	ldr	r3, [r7, #40]	; 0x28
    c78a:	429a      	cmp	r2, r3
    c78c:	d3e6      	bcc.n	c75c <mp_unpack_ex+0xc0>
    if (MP_OBJ_IS_TYPE(seq_in, &mp_type_tuple) || MP_OBJ_IS_TYPE(seq_in, &mp_type_list)) {
    c78e:	e063      	b.n	c858 <mp_unpack_ex+0x1bc>
    } else {
        // Generic iterable; this gets a bit messy: we unpack known left length to the
        // items destination array, then the rest to a dynamically created list.  Once the
        // iterable is exhausted, we take from this list for the right part of the items.
        // TODO Improve to waste less memory in the dynamically created list.
        mp_obj_t iterable = mp_getiter(seq_in, NULL);
    c790:	2100      	movs	r1, #0
    c792:	68f8      	ldr	r0, [r7, #12]
    c794:	f000 f9dc 	bl	cb50 <mp_getiter>
    c798:	6238      	str	r0, [r7, #32]
        mp_obj_t item;
        for (seq_len = 0; seq_len < num_left; seq_len++) {
    c79a:	2300      	movs	r3, #0
    c79c:	617b      	str	r3, [r7, #20]
    c79e:	e013      	b.n	c7c8 <mp_unpack_ex+0x12c>
            item = mp_iternext(iterable);
    c7a0:	6a38      	ldr	r0, [r7, #32]
    c7a2:	f000 fa57 	bl	cc54 <mp_iternext>
    c7a6:	61f8      	str	r0, [r7, #28]
            if (item == MP_OBJ_STOP_ITERATION) {
    c7a8:	69fb      	ldr	r3, [r7, #28]
    c7aa:	2b04      	cmp	r3, #4
    c7ac:	d057      	beq.n	c85e <mp_unpack_ex+0x1c2>
                goto too_short;
            }
            items[num_left + num_right + 1 - 1 - seq_len] = item;
    c7ae:	6aba      	ldr	r2, [r7, #40]	; 0x28
    c7b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    c7b2:	441a      	add	r2, r3
    c7b4:	697b      	ldr	r3, [r7, #20]
    c7b6:	1ad3      	subs	r3, r2, r3
    c7b8:	009b      	lsls	r3, r3, #2
    c7ba:	687a      	ldr	r2, [r7, #4]
    c7bc:	4413      	add	r3, r2
    c7be:	69fa      	ldr	r2, [r7, #28]
    c7c0:	601a      	str	r2, [r3, #0]
        for (seq_len = 0; seq_len < num_left; seq_len++) {
    c7c2:	697b      	ldr	r3, [r7, #20]
    c7c4:	3301      	adds	r3, #1
    c7c6:	617b      	str	r3, [r7, #20]
    c7c8:	697a      	ldr	r2, [r7, #20]
    c7ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
    c7cc:	429a      	cmp	r2, r3
    c7ce:	d3e7      	bcc.n	c7a0 <mp_unpack_ex+0x104>
        }
        mp_obj_list_t *rest = MP_OBJ_TO_PTR(mp_obj_new_list(0, NULL));
    c7d0:	2100      	movs	r1, #0
    c7d2:	2000      	movs	r0, #0
    c7d4:	f005 f99c 	bl	11b10 <mp_obj_new_list>
    c7d8:	61b8      	str	r0, [r7, #24]
        while ((item = mp_iternext(iterable)) != MP_OBJ_STOP_ITERATION) {
    c7da:	e003      	b.n	c7e4 <mp_unpack_ex+0x148>
            mp_obj_list_append(MP_OBJ_FROM_PTR(rest), item);
    c7dc:	69f9      	ldr	r1, [r7, #28]
    c7de:	69b8      	ldr	r0, [r7, #24]
    c7e0:	f004 fd04 	bl	111ec <mp_obj_list_append>
        while ((item = mp_iternext(iterable)) != MP_OBJ_STOP_ITERATION) {
    c7e4:	6a38      	ldr	r0, [r7, #32]
    c7e6:	f000 fa35 	bl	cc54 <mp_iternext>
    c7ea:	61f8      	str	r0, [r7, #28]
    c7ec:	69fb      	ldr	r3, [r7, #28]
    c7ee:	2b04      	cmp	r3, #4
    c7f0:	d1f4      	bne.n	c7dc <mp_unpack_ex+0x140>
        }
        if (rest->len < num_right) {
    c7f2:	69bb      	ldr	r3, [r7, #24]
    c7f4:	689a      	ldr	r2, [r3, #8]
    c7f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    c7f8:	429a      	cmp	r2, r3
    c7fa:	d332      	bcc.n	c862 <mp_unpack_ex+0x1c6>
            goto too_short;
        }
        items[num_right] = MP_OBJ_FROM_PTR(rest);
    c7fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    c7fe:	009b      	lsls	r3, r3, #2
    c800:	687a      	ldr	r2, [r7, #4]
    c802:	4413      	add	r3, r2
    c804:	69ba      	ldr	r2, [r7, #24]
    c806:	601a      	str	r2, [r3, #0]
        for (size_t i = 0; i < num_right; i++) {
    c808:	2300      	movs	r3, #0
    c80a:	62fb      	str	r3, [r7, #44]	; 0x2c
    c80c:	e017      	b.n	c83e <mp_unpack_ex+0x1a2>
            items[num_right - 1 - i] = rest->items[rest->len - num_right + i];
    c80e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    c810:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c812:	1ad3      	subs	r3, r2, r3
    c814:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    c818:	3b01      	subs	r3, #1
    c81a:	009b      	lsls	r3, r3, #2
    c81c:	687a      	ldr	r2, [r7, #4]
    c81e:	4413      	add	r3, r2
    c820:	69ba      	ldr	r2, [r7, #24]
    c822:	68d1      	ldr	r1, [r2, #12]
    c824:	69ba      	ldr	r2, [r7, #24]
    c826:	6890      	ldr	r0, [r2, #8]
    c828:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    c82a:	1a80      	subs	r0, r0, r2
    c82c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    c82e:	4402      	add	r2, r0
    c830:	0092      	lsls	r2, r2, #2
    c832:	440a      	add	r2, r1
    c834:	6812      	ldr	r2, [r2, #0]
    c836:	601a      	str	r2, [r3, #0]
        for (size_t i = 0; i < num_right; i++) {
    c838:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c83a:	3301      	adds	r3, #1
    c83c:	62fb      	str	r3, [r7, #44]	; 0x2c
    c83e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    c840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    c842:	429a      	cmp	r2, r3
    c844:	d3e3      	bcc.n	c80e <mp_unpack_ex+0x172>
        }
        mp_obj_list_set_len(MP_OBJ_FROM_PTR(rest), rest->len - num_right);
    c846:	69bb      	ldr	r3, [r7, #24]
    c848:	689a      	ldr	r2, [r3, #8]
    c84a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    c84c:	1ad3      	subs	r3, r2, r3
    c84e:	4619      	mov	r1, r3
    c850:	69b8      	ldr	r0, [r7, #24]
    c852:	f005 f999 	bl	11b88 <mp_obj_list_set_len>
    }
    return;
    c856:	e008      	b.n	c86a <mp_unpack_ex+0x1ce>
    c858:	e007      	b.n	c86a <mp_unpack_ex+0x1ce>
            goto too_short;
    c85a:	bf00      	nop
    c85c:	e002      	b.n	c864 <mp_unpack_ex+0x1c8>
                goto too_short;
    c85e:	bf00      	nop
    c860:	e000      	b.n	c864 <mp_unpack_ex+0x1c8>
            goto too_short;
    c862:	bf00      	nop

too_short:
    if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
        mp_raise_ValueError("wrong number of values to unpack");
    c864:	4804      	ldr	r0, [pc, #16]	; (c878 <mp_unpack_ex+0x1dc>)
    c866:	f000 fcbb 	bl	d1e0 <mp_raise_ValueError>
    } else {
        nlr_raise(mp_obj_new_exception_msg_varg(&mp_type_ValueError,
            "need more than %d values to unpack", (int)seq_len));
    }
}
    c86a:	373c      	adds	r7, #60	; 0x3c
    c86c:	46bd      	mov	sp, r7
    c86e:	bd90      	pop	{r4, r7, pc}
    c870:	00023d90 	.word	0x00023d90
    c874:	00023114 	.word	0x00023114
    c878:	00021670 	.word	0x00021670

0000c87c <mp_load_attr>:

mp_obj_t mp_load_attr(mp_obj_t base, qstr attr) {
    c87c:	b580      	push	{r7, lr}
    c87e:	b084      	sub	sp, #16
    c880:	af00      	add	r7, sp, #0
    c882:	6078      	str	r0, [r7, #4]
    c884:	6039      	str	r1, [r7, #0]
    DEBUG_OP_printf("load attr %p.%s\n", base, qstr_str(attr));
    // use load_method
    mp_obj_t dest[2];
    mp_load_method(base, attr, dest);
    c886:	f107 0308 	add.w	r3, r7, #8
    c88a:	461a      	mov	r2, r3
    c88c:	6839      	ldr	r1, [r7, #0]
    c88e:	6878      	ldr	r0, [r7, #4]
    c890:	f000 f8e6 	bl	ca60 <mp_load_method>
    if (dest[1] == MP_OBJ_NULL) {
    c894:	68fb      	ldr	r3, [r7, #12]
    c896:	2b00      	cmp	r3, #0
    c898:	d101      	bne.n	c89e <mp_load_attr+0x22>
        // load_method returned just a normal attribute
        return dest[0];
    c89a:	68bb      	ldr	r3, [r7, #8]
    c89c:	e006      	b.n	c8ac <mp_load_attr+0x30>
    } else {
        // load_method returned a method, so build a bound method object
        return mp_obj_new_bound_meth(dest[0], dest[1]);
    c89e:	68bb      	ldr	r3, [r7, #8]
    c8a0:	68fa      	ldr	r2, [r7, #12]
    c8a2:	4611      	mov	r1, r2
    c8a4:	4618      	mov	r0, r3
    c8a6:	f001 fe31 	bl	e50c <mp_obj_new_bound_meth>
    c8aa:	4603      	mov	r3, r0
    }
}
    c8ac:	4618      	mov	r0, r3
    c8ae:	3710      	adds	r7, #16
    c8b0:	46bd      	mov	sp, r7
    c8b2:	bd80      	pop	{r7, pc}

0000c8b4 <mp_convert_member_lookup>:

// Given a member that was extracted from an instance, convert it correctly
// and put the result in the dest[] array for a possible method call.
// Conversion means dealing with static/class methods, callables, and values.
// see http://docs.python.org/3/howto/descriptor.html
void mp_convert_member_lookup(mp_obj_t self, const mp_obj_type_t *type, mp_obj_t member, mp_obj_t *dest) {
    c8b4:	b580      	push	{r7, lr}
    c8b6:	b084      	sub	sp, #16
    c8b8:	af00      	add	r7, sp, #0
    c8ba:	60f8      	str	r0, [r7, #12]
    c8bc:	60b9      	str	r1, [r7, #8]
    c8be:	607a      	str	r2, [r7, #4]
    c8c0:	603b      	str	r3, [r7, #0]
    if (MP_OBJ_IS_TYPE(member, &mp_type_staticmethod)) {
    c8c2:	6878      	ldr	r0, [r7, #4]
    c8c4:	f7fe fec0 	bl	b648 <MP_OBJ_IS_OBJ>
    c8c8:	4603      	mov	r3, r0
    c8ca:	2b00      	cmp	r3, #0
    c8cc:	d009      	beq.n	c8e2 <mp_convert_member_lookup+0x2e>
    c8ce:	687b      	ldr	r3, [r7, #4]
    c8d0:	681b      	ldr	r3, [r3, #0]
    c8d2:	4a2f      	ldr	r2, [pc, #188]	; (c990 <mp_convert_member_lookup+0xdc>)
    c8d4:	4293      	cmp	r3, r2
    c8d6:	d104      	bne.n	c8e2 <mp_convert_member_lookup+0x2e>
        // return just the function
        dest[0] = ((mp_obj_static_class_method_t*)MP_OBJ_TO_PTR(member))->fun;
    c8d8:	687b      	ldr	r3, [r7, #4]
    c8da:	685a      	ldr	r2, [r3, #4]
    c8dc:	683b      	ldr	r3, [r7, #0]
    c8de:	601a      	str	r2, [r3, #0]
    c8e0:	e051      	b.n	c986 <mp_convert_member_lookup+0xd2>
    } else if (MP_OBJ_IS_TYPE(member, &mp_type_classmethod)) {
    c8e2:	6878      	ldr	r0, [r7, #4]
    c8e4:	f7fe feb0 	bl	b648 <MP_OBJ_IS_OBJ>
    c8e8:	4603      	mov	r3, r0
    c8ea:	2b00      	cmp	r3, #0
    c8ec:	d014      	beq.n	c918 <mp_convert_member_lookup+0x64>
    c8ee:	687b      	ldr	r3, [r7, #4]
    c8f0:	681b      	ldr	r3, [r3, #0]
    c8f2:	4a28      	ldr	r2, [pc, #160]	; (c994 <mp_convert_member_lookup+0xe0>)
    c8f4:	4293      	cmp	r3, r2
    c8f6:	d10f      	bne.n	c918 <mp_convert_member_lookup+0x64>
        // return a bound method, with self being the type of this object
        // this type should be the type of the original instance, not the base
        // type (which is what is passed in the 'type' argument to this function)
        if (self != MP_OBJ_NULL) {
    c8f8:	68fb      	ldr	r3, [r7, #12]
    c8fa:	2b00      	cmp	r3, #0
    c8fc:	d003      	beq.n	c906 <mp_convert_member_lookup+0x52>
            type = mp_obj_get_type(self);
    c8fe:	68f8      	ldr	r0, [r7, #12]
    c900:	f001 f8d8 	bl	dab4 <mp_obj_get_type>
    c904:	60b8      	str	r0, [r7, #8]
        }
        dest[0] = ((mp_obj_static_class_method_t*)MP_OBJ_TO_PTR(member))->fun;
    c906:	687b      	ldr	r3, [r7, #4]
    c908:	685a      	ldr	r2, [r3, #4]
    c90a:	683b      	ldr	r3, [r7, #0]
    c90c:	601a      	str	r2, [r3, #0]
        dest[1] = MP_OBJ_FROM_PTR(type);
    c90e:	683b      	ldr	r3, [r7, #0]
    c910:	3304      	adds	r3, #4
    c912:	68ba      	ldr	r2, [r7, #8]
    c914:	601a      	str	r2, [r3, #0]
    c916:	e036      	b.n	c986 <mp_convert_member_lookup+0xd2>
    } else if (MP_OBJ_IS_TYPE(member, &mp_type_type)) {
    c918:	6878      	ldr	r0, [r7, #4]
    c91a:	f7fe fe95 	bl	b648 <MP_OBJ_IS_OBJ>
    c91e:	4603      	mov	r3, r0
    c920:	2b00      	cmp	r3, #0
    c922:	d008      	beq.n	c936 <mp_convert_member_lookup+0x82>
    c924:	687b      	ldr	r3, [r7, #4]
    c926:	681b      	ldr	r3, [r3, #0]
    c928:	4a1b      	ldr	r2, [pc, #108]	; (c998 <mp_convert_member_lookup+0xe4>)
    c92a:	4293      	cmp	r3, r2
    c92c:	d103      	bne.n	c936 <mp_convert_member_lookup+0x82>
        // Don't try to bind types (even though they're callable)
        dest[0] = member;
    c92e:	683b      	ldr	r3, [r7, #0]
    c930:	687a      	ldr	r2, [r7, #4]
    c932:	601a      	str	r2, [r3, #0]
    c934:	e027      	b.n	c986 <mp_convert_member_lookup+0xd2>
    } else if (MP_OBJ_IS_FUN(member)
    c936:	6878      	ldr	r0, [r7, #4]
    c938:	f7fe fe86 	bl	b648 <MP_OBJ_IS_OBJ>
    c93c:	4603      	mov	r3, r0
    c93e:	2b00      	cmp	r3, #0
    c940:	d005      	beq.n	c94e <mp_convert_member_lookup+0x9a>
    c942:	687b      	ldr	r3, [r7, #4]
    c944:	681b      	ldr	r3, [r3, #0]
    c946:	685b      	ldr	r3, [r3, #4]
    c948:	f5b3 7f89 	cmp.w	r3, #274	; 0x112
    c94c:	d010      	beq.n	c970 <mp_convert_member_lookup+0xbc>
        || (MP_OBJ_IS_OBJ(member)
    c94e:	6878      	ldr	r0, [r7, #4]
    c950:	f7fe fe7a 	bl	b648 <MP_OBJ_IS_OBJ>
    c954:	4603      	mov	r3, r0
    c956:	2b00      	cmp	r3, #0
    c958:	d012      	beq.n	c980 <mp_convert_member_lookup+0xcc>
            && (((mp_obj_base_t*)MP_OBJ_TO_PTR(member))->type->name == MP_QSTR_closure
    c95a:	687b      	ldr	r3, [r7, #4]
    c95c:	681b      	ldr	r3, [r3, #0]
    c95e:	685b      	ldr	r3, [r3, #4]
    c960:	2bfa      	cmp	r3, #250	; 0xfa
    c962:	d005      	beq.n	c970 <mp_convert_member_lookup+0xbc>
                || ((mp_obj_base_t*)MP_OBJ_TO_PTR(member))->type->name == MP_QSTR_generator))) {
    c964:	687b      	ldr	r3, [r7, #4]
    c966:	681b      	ldr	r3, [r3, #0]
    c968:	685b      	ldr	r3, [r3, #4]
    c96a:	f5b3 7f8a 	cmp.w	r3, #276	; 0x114
    c96e:	d107      	bne.n	c980 <mp_convert_member_lookup+0xcc>
            dest[0] = mp_obj_new_checked_fun(type, member);
        } else
        #endif
        {
            // return a bound method, with self being this object
            dest[0] = member;
    c970:	683b      	ldr	r3, [r7, #0]
    c972:	687a      	ldr	r2, [r7, #4]
    c974:	601a      	str	r2, [r3, #0]
            dest[1] = self;
    c976:	683b      	ldr	r3, [r7, #0]
    c978:	3304      	adds	r3, #4
    c97a:	68fa      	ldr	r2, [r7, #12]
    c97c:	601a      	str	r2, [r3, #0]
    c97e:	e002      	b.n	c986 <mp_convert_member_lookup+0xd2>
        }
    } else {
        // class member is a value, so just return that value
        dest[0] = member;
    c980:	683b      	ldr	r3, [r7, #0]
    c982:	687a      	ldr	r2, [r7, #4]
    c984:	601a      	str	r2, [r3, #0]
    }
}
    c986:	bf00      	nop
    c988:	3710      	adds	r7, #16
    c98a:	46bd      	mov	sp, r7
    c98c:	bd80      	pop	{r7, pc}
    c98e:	bf00      	nop
    c990:	0002431c 	.word	0x0002431c
    c994:	00024358 	.word	0x00024358
    c998:	00024088 	.word	0x00024088

0000c99c <mp_load_method_maybe>:

// no attribute found, returns:     dest[0] == MP_OBJ_NULL, dest[1] == MP_OBJ_NULL
// normal attribute found, returns: dest[0] == <attribute>, dest[1] == MP_OBJ_NULL
// method attribute found, returns: dest[0] == <method>,    dest[1] == <self>
void mp_load_method_maybe(mp_obj_t obj, qstr attr, mp_obj_t *dest) {
    c99c:	b580      	push	{r7, lr}
    c99e:	b088      	sub	sp, #32
    c9a0:	af00      	add	r7, sp, #0
    c9a2:	60f8      	str	r0, [r7, #12]
    c9a4:	60b9      	str	r1, [r7, #8]
    c9a6:	607a      	str	r2, [r7, #4]
    // clear output to indicate no attribute/method found yet
    dest[0] = MP_OBJ_NULL;
    c9a8:	687b      	ldr	r3, [r7, #4]
    c9aa:	2200      	movs	r2, #0
    c9ac:	601a      	str	r2, [r3, #0]
    dest[1] = MP_OBJ_NULL;
    c9ae:	687b      	ldr	r3, [r7, #4]
    c9b0:	3304      	adds	r3, #4
    c9b2:	2200      	movs	r2, #0
    c9b4:	601a      	str	r2, [r3, #0]

    // get the type
    mp_obj_type_t *type = mp_obj_get_type(obj);
    c9b6:	68f8      	ldr	r0, [r7, #12]
    c9b8:	f001 f87c 	bl	dab4 <mp_obj_get_type>
    c9bc:	61f8      	str	r0, [r7, #28]
    } else if (attr == MP_QSTR___class__) {
        // a.__class__ is equivalent to type(a)
        dest[0] = MP_OBJ_FROM_PTR(type);
#endif

    } else if (attr == MP_QSTR___next__ && type->iternext != NULL) {
    c9be:	68bb      	ldr	r3, [r7, #8]
    c9c0:	2b1e      	cmp	r3, #30
    c9c2:	d10b      	bne.n	c9dc <mp_load_method_maybe+0x40>
    c9c4:	69fb      	ldr	r3, [r7, #28]
    c9c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    c9c8:	2b00      	cmp	r3, #0
    c9ca:	d007      	beq.n	c9dc <mp_load_method_maybe+0x40>
        dest[0] = MP_OBJ_FROM_PTR(&mp_builtin_next_obj);
    c9cc:	687b      	ldr	r3, [r7, #4]
    c9ce:	4a1f      	ldr	r2, [pc, #124]	; (ca4c <mp_load_method_maybe+0xb0>)
    c9d0:	601a      	str	r2, [r3, #0]
        dest[1] = obj;
    c9d2:	687b      	ldr	r3, [r7, #4]
    c9d4:	3304      	adds	r3, #4
    c9d6:	68fa      	ldr	r2, [r7, #12]
    c9d8:	601a      	str	r2, [r3, #0]
        mp_map_elem_t *elem = mp_map_lookup(locals_map, MP_OBJ_NEW_QSTR(attr), MP_MAP_LOOKUP);
        if (elem != NULL) {
            mp_convert_member_lookup(obj, type, elem->value, dest);
        }
    }
}
    c9da:	e033      	b.n	ca44 <mp_load_method_maybe+0xa8>
    } else if (type->attr != NULL) {
    c9dc:	69fb      	ldr	r3, [r7, #28]
    c9de:	69db      	ldr	r3, [r3, #28]
    c9e0:	2b00      	cmp	r3, #0
    c9e2:	d006      	beq.n	c9f2 <mp_load_method_maybe+0x56>
        type->attr(obj, attr, dest);
    c9e4:	69fb      	ldr	r3, [r7, #28]
    c9e6:	69db      	ldr	r3, [r3, #28]
    c9e8:	687a      	ldr	r2, [r7, #4]
    c9ea:	68b9      	ldr	r1, [r7, #8]
    c9ec:	68f8      	ldr	r0, [r7, #12]
    c9ee:	4798      	blx	r3
}
    c9f0:	e028      	b.n	ca44 <mp_load_method_maybe+0xa8>
    } else if (type->locals_dict != NULL) {
    c9f2:	69fb      	ldr	r3, [r7, #28]
    c9f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    c9f6:	2b00      	cmp	r3, #0
    c9f8:	d024      	beq.n	ca44 <mp_load_method_maybe+0xa8>
        assert(type->locals_dict->base.type == &mp_type_dict); // MicroPython restriction, for now
    c9fa:	69fb      	ldr	r3, [r7, #28]
    c9fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    c9fe:	681b      	ldr	r3, [r3, #0]
    ca00:	4a13      	ldr	r2, [pc, #76]	; (ca50 <mp_load_method_maybe+0xb4>)
    ca02:	4293      	cmp	r3, r2
    ca04:	d006      	beq.n	ca14 <mp_load_method_maybe+0x78>
    ca06:	4b13      	ldr	r3, [pc, #76]	; (ca54 <mp_load_method_maybe+0xb8>)
    ca08:	4a13      	ldr	r2, [pc, #76]	; (ca58 <mp_load_method_maybe+0xbc>)
    ca0a:	f44f 6184 	mov.w	r1, #1056	; 0x420
    ca0e:	4813      	ldr	r0, [pc, #76]	; (ca5c <mp_load_method_maybe+0xc0>)
    ca10:	f00e fe5e 	bl	1b6d0 <__assert_func>
        mp_map_t *locals_map = &type->locals_dict->map;
    ca14:	69fb      	ldr	r3, [r7, #28]
    ca16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    ca18:	3304      	adds	r3, #4
    ca1a:	61bb      	str	r3, [r7, #24]
        mp_map_elem_t *elem = mp_map_lookup(locals_map, MP_OBJ_NEW_QSTR(attr), MP_MAP_LOOKUP);
    ca1c:	68bb      	ldr	r3, [r7, #8]
    ca1e:	009b      	lsls	r3, r3, #2
    ca20:	f043 0302 	orr.w	r3, r3, #2
    ca24:	2200      	movs	r2, #0
    ca26:	4619      	mov	r1, r3
    ca28:	69b8      	ldr	r0, [r7, #24]
    ca2a:	f000 fe99 	bl	d760 <mp_map_lookup>
    ca2e:	6178      	str	r0, [r7, #20]
        if (elem != NULL) {
    ca30:	697b      	ldr	r3, [r7, #20]
    ca32:	2b00      	cmp	r3, #0
    ca34:	d006      	beq.n	ca44 <mp_load_method_maybe+0xa8>
            mp_convert_member_lookup(obj, type, elem->value, dest);
    ca36:	697b      	ldr	r3, [r7, #20]
    ca38:	685a      	ldr	r2, [r3, #4]
    ca3a:	687b      	ldr	r3, [r7, #4]
    ca3c:	69f9      	ldr	r1, [r7, #28]
    ca3e:	68f8      	ldr	r0, [r7, #12]
    ca40:	f7ff ff38 	bl	c8b4 <mp_convert_member_lookup>
}
    ca44:	bf00      	nop
    ca46:	3720      	adds	r7, #32
    ca48:	46bd      	mov	sp, r7
    ca4a:	bd80      	pop	{r7, pc}
    ca4c:	000246bc 	.word	0x000246bc
    ca50:	0002201c 	.word	0x0002201c
    ca54:	00021694 	.word	0x00021694
    ca58:	00021830 	.word	0x00021830
    ca5c:	000215a8 	.word	0x000215a8

0000ca60 <mp_load_method>:

void mp_load_method(mp_obj_t base, qstr attr, mp_obj_t *dest) {
    ca60:	b580      	push	{r7, lr}
    ca62:	b084      	sub	sp, #16
    ca64:	af00      	add	r7, sp, #0
    ca66:	60f8      	str	r0, [r7, #12]
    ca68:	60b9      	str	r1, [r7, #8]
    ca6a:	607a      	str	r2, [r7, #4]
    DEBUG_OP_printf("load method %p.%s\n", base, qstr_str(attr));

    mp_load_method_maybe(base, attr, dest);
    ca6c:	687a      	ldr	r2, [r7, #4]
    ca6e:	68b9      	ldr	r1, [r7, #8]
    ca70:	68f8      	ldr	r0, [r7, #12]
    ca72:	f7ff ff93 	bl	c99c <mp_load_method_maybe>

    if (dest[0] == MP_OBJ_NULL) {
    ca76:	687b      	ldr	r3, [r7, #4]
    ca78:	681b      	ldr	r3, [r3, #0]
    ca7a:	2b00      	cmp	r3, #0
    ca7c:	d103      	bne.n	ca86 <mp_load_method+0x26>
        // no attribute/method called attr
        if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
            mp_raise_msg(&mp_type_AttributeError, "no such attribute");
    ca7e:	4904      	ldr	r1, [pc, #16]	; (ca90 <mp_load_method+0x30>)
    ca80:	4804      	ldr	r0, [pc, #16]	; (ca94 <mp_load_method+0x34>)
    ca82:	f000 fb95 	bl	d1b0 <mp_raise_msg>
                    "'%s' object has no attribute '%q'",
                    mp_obj_get_type_str(base), attr));
            }
        }
    }
}
    ca86:	bf00      	nop
    ca88:	3710      	adds	r7, #16
    ca8a:	46bd      	mov	sp, r7
    ca8c:	bd80      	pop	{r7, pc}
    ca8e:	bf00      	nop
    ca90:	000216c4 	.word	0x000216c4
    ca94:	0002238c 	.word	0x0002238c

0000ca98 <mp_load_method_protected>:

// Acts like mp_load_method_maybe but catches AttributeError, and all other exceptions if requested
void mp_load_method_protected(mp_obj_t obj, qstr attr, mp_obj_t *dest, bool catch_all_exc) {
    ca98:	b580      	push	{r7, lr}
    ca9a:	b090      	sub	sp, #64	; 0x40
    ca9c:	af00      	add	r7, sp, #0
    ca9e:	60f8      	str	r0, [r7, #12]
    caa0:	60b9      	str	r1, [r7, #8]
    caa2:	607a      	str	r2, [r7, #4]
    caa4:	70fb      	strb	r3, [r7, #3]
    nlr_buf_t nlr;
    if (nlr_push(&nlr) == 0) {
    caa6:	f107 0310 	add.w	r3, r7, #16
    caaa:	4618      	mov	r0, r3
    caac:	f7f3 fc06 	bl	2bc <nlr_push>
    cab0:	4603      	mov	r3, r0
    cab2:	2b00      	cmp	r3, #0
    cab4:	d107      	bne.n	cac6 <mp_load_method_protected+0x2e>
        mp_load_method_maybe(obj, attr, dest);
    cab6:	687a      	ldr	r2, [r7, #4]
    cab8:	68b9      	ldr	r1, [r7, #8]
    caba:	68f8      	ldr	r0, [r7, #12]
    cabc:	f7ff ff6e 	bl	c99c <mp_load_method_maybe>
        nlr_pop();
    cac0:	f7f3 fbea 	bl	298 <nlr_pop>
                MP_OBJ_FROM_PTR(&mp_type_AttributeError))) {
            // Re-raise the exception
            nlr_raise(MP_OBJ_FROM_PTR(nlr.ret_val));
        }
    }
}
    cac4:	e015      	b.n	caf2 <mp_load_method_protected+0x5a>
        if (!catch_all_exc
    cac6:	78fb      	ldrb	r3, [r7, #3]
    cac8:	f083 0301 	eor.w	r3, r3, #1
    cacc:	b2db      	uxtb	r3, r3
    cace:	2b00      	cmp	r3, #0
    cad0:	d00f      	beq.n	caf2 <mp_load_method_protected+0x5a>
            && !mp_obj_is_subclass_fast(MP_OBJ_FROM_PTR(((mp_obj_base_t*)nlr.ret_val)->type),
    cad2:	697b      	ldr	r3, [r7, #20]
    cad4:	681b      	ldr	r3, [r3, #0]
    cad6:	4909      	ldr	r1, [pc, #36]	; (cafc <mp_load_method_protected+0x64>)
    cad8:	4618      	mov	r0, r3
    cada:	f00a fd43 	bl	17564 <mp_obj_is_subclass_fast>
    cade:	4603      	mov	r3, r0
    cae0:	f083 0301 	eor.w	r3, r3, #1
    cae4:	b2db      	uxtb	r3, r3
    cae6:	2b00      	cmp	r3, #0
    cae8:	d003      	beq.n	caf2 <mp_load_method_protected+0x5a>
            nlr_raise(MP_OBJ_FROM_PTR(nlr.ret_val));
    caea:	697b      	ldr	r3, [r7, #20]
    caec:	4618      	mov	r0, r3
    caee:	f7f3 fbf7 	bl	2e0 <nlr_jump>
}
    caf2:	bf00      	nop
    caf4:	3740      	adds	r7, #64	; 0x40
    caf6:	46bd      	mov	sp, r7
    caf8:	bd80      	pop	{r7, pc}
    cafa:	bf00      	nop
    cafc:	0002238c 	.word	0x0002238c

0000cb00 <mp_store_attr>:

void mp_store_attr(mp_obj_t base, qstr attr, mp_obj_t value) {
    cb00:	b580      	push	{r7, lr}
    cb02:	b088      	sub	sp, #32
    cb04:	af00      	add	r7, sp, #0
    cb06:	60f8      	str	r0, [r7, #12]
    cb08:	60b9      	str	r1, [r7, #8]
    cb0a:	607a      	str	r2, [r7, #4]
    DEBUG_OP_printf("store attr %p.%s <- %p\n", base, qstr_str(attr), value);
    mp_obj_type_t *type = mp_obj_get_type(base);
    cb0c:	68f8      	ldr	r0, [r7, #12]
    cb0e:	f000 ffd1 	bl	dab4 <mp_obj_get_type>
    cb12:	61f8      	str	r0, [r7, #28]
    if (type->attr != NULL) {
    cb14:	69fb      	ldr	r3, [r7, #28]
    cb16:	69db      	ldr	r3, [r3, #28]
    cb18:	2b00      	cmp	r3, #0
    cb1a:	d00d      	beq.n	cb38 <mp_store_attr+0x38>
        mp_obj_t dest[2] = {MP_OBJ_SENTINEL, value};
    cb1c:	2308      	movs	r3, #8
    cb1e:	617b      	str	r3, [r7, #20]
    cb20:	687b      	ldr	r3, [r7, #4]
    cb22:	61bb      	str	r3, [r7, #24]
        type->attr(base, attr, dest);
    cb24:	69fb      	ldr	r3, [r7, #28]
    cb26:	69db      	ldr	r3, [r3, #28]
    cb28:	f107 0214 	add.w	r2, r7, #20
    cb2c:	68b9      	ldr	r1, [r7, #8]
    cb2e:	68f8      	ldr	r0, [r7, #12]
    cb30:	4798      	blx	r3
        if (dest[0] == MP_OBJ_NULL) {
    cb32:	697b      	ldr	r3, [r7, #20]
    cb34:	2b00      	cmp	r3, #0
    cb36:	d003      	beq.n	cb40 <mp_store_attr+0x40>
            // success
            return;
        }
    }
    if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
        mp_raise_msg(&mp_type_AttributeError, "no such attribute");
    cb38:	4903      	ldr	r1, [pc, #12]	; (cb48 <mp_store_attr+0x48>)
    cb3a:	4804      	ldr	r0, [pc, #16]	; (cb4c <mp_store_attr+0x4c>)
    cb3c:	f000 fb38 	bl	d1b0 <mp_raise_msg>
            return;
    cb40:	bf00      	nop
    } else {
        nlr_raise(mp_obj_new_exception_msg_varg(&mp_type_AttributeError,
            "'%s' object has no attribute '%q'",
            mp_obj_get_type_str(base), attr));
    }
}
    cb42:	3720      	adds	r7, #32
    cb44:	46bd      	mov	sp, r7
    cb46:	bd80      	pop	{r7, pc}
    cb48:	000216c4 	.word	0x000216c4
    cb4c:	0002238c 	.word	0x0002238c

0000cb50 <mp_getiter>:

mp_obj_t mp_getiter(mp_obj_t o_in, mp_obj_iter_buf_t *iter_buf) {
    cb50:	b580      	push	{r7, lr}
    cb52:	b086      	sub	sp, #24
    cb54:	af00      	add	r7, sp, #0
    cb56:	6078      	str	r0, [r7, #4]
    cb58:	6039      	str	r1, [r7, #0]
    assert(o_in);
    cb5a:	687b      	ldr	r3, [r7, #4]
    cb5c:	2b00      	cmp	r3, #0
    cb5e:	d106      	bne.n	cb6e <mp_getiter+0x1e>
    cb60:	4b20      	ldr	r3, [pc, #128]	; (cbe4 <mp_getiter+0x94>)
    cb62:	4a21      	ldr	r2, [pc, #132]	; (cbe8 <mp_getiter+0x98>)
    cb64:	f240 4166 	movw	r1, #1126	; 0x466
    cb68:	4820      	ldr	r0, [pc, #128]	; (cbec <mp_getiter+0x9c>)
    cb6a:	f00e fdb1 	bl	1b6d0 <__assert_func>
    mp_obj_type_t *type = mp_obj_get_type(o_in);
    cb6e:	6878      	ldr	r0, [r7, #4]
    cb70:	f000 ffa0 	bl	dab4 <mp_obj_get_type>
    cb74:	6178      	str	r0, [r7, #20]

    // Check for native getiter which is the identity.  We handle this case explicitly
    // so we don't unnecessarily allocate any RAM for the iter_buf, which won't be used.
    if (type->getiter == mp_identity_getiter) {
    cb76:	697b      	ldr	r3, [r7, #20]
    cb78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    cb7a:	4a1d      	ldr	r2, [pc, #116]	; (cbf0 <mp_getiter+0xa0>)
    cb7c:	4293      	cmp	r3, r2
    cb7e:	d101      	bne.n	cb84 <mp_getiter+0x34>
        return o_in;
    cb80:	687b      	ldr	r3, [r7, #4]
    cb82:	e02a      	b.n	cbda <mp_getiter+0x8a>
    }

    // if caller did not provide a buffer then allocate one on the heap
    if (iter_buf == NULL) {
    cb84:	683b      	ldr	r3, [r7, #0]
    cb86:	2b00      	cmp	r3, #0
    cb88:	d103      	bne.n	cb92 <mp_getiter+0x42>
        iter_buf = m_new_obj(mp_obj_iter_buf_t);
    cb8a:	2010      	movs	r0, #16
    cb8c:	f7f3 fbc6 	bl	31c <m_malloc>
    cb90:	6038      	str	r0, [r7, #0]
    }

    // check for native getiter (corresponds to __iter__)
    if (type->getiter != NULL) {
    cb92:	697b      	ldr	r3, [r7, #20]
    cb94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    cb96:	2b00      	cmp	r3, #0
    cb98:	d00a      	beq.n	cbb0 <mp_getiter+0x60>
        mp_obj_t iter = type->getiter(o_in, iter_buf);
    cb9a:	697b      	ldr	r3, [r7, #20]
    cb9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    cb9e:	6839      	ldr	r1, [r7, #0]
    cba0:	6878      	ldr	r0, [r7, #4]
    cba2:	4798      	blx	r3
    cba4:	6138      	str	r0, [r7, #16]
        if (iter != MP_OBJ_NULL) {
    cba6:	693b      	ldr	r3, [r7, #16]
    cba8:	2b00      	cmp	r3, #0
    cbaa:	d001      	beq.n	cbb0 <mp_getiter+0x60>
            return iter;
    cbac:	693b      	ldr	r3, [r7, #16]
    cbae:	e014      	b.n	cbda <mp_getiter+0x8a>
        }
    }

    // check for __getitem__
    mp_obj_t dest[2];
    mp_load_method_maybe(o_in, MP_QSTR___getitem__, dest);
    cbb0:	f107 0308 	add.w	r3, r7, #8
    cbb4:	461a      	mov	r2, r3
    cbb6:	210f      	movs	r1, #15
    cbb8:	6878      	ldr	r0, [r7, #4]
    cbba:	f7ff feef 	bl	c99c <mp_load_method_maybe>
    if (dest[0] != MP_OBJ_NULL) {
    cbbe:	68bb      	ldr	r3, [r7, #8]
    cbc0:	2b00      	cmp	r3, #0
    cbc2:	d007      	beq.n	cbd4 <mp_getiter+0x84>
        // __getitem__ exists, create and return an iterator
        return mp_obj_new_getitem_iter(dest, iter_buf);
    cbc4:	f107 0308 	add.w	r3, r7, #8
    cbc8:	6839      	ldr	r1, [r7, #0]
    cbca:	4618      	mov	r0, r3
    cbcc:	f003 fd6e 	bl	106ac <mp_obj_new_getitem_iter>
    cbd0:	4603      	mov	r3, r0
    cbd2:	e002      	b.n	cbda <mp_getiter+0x8a>
    }

    // object not iterable
    if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
        mp_raise_TypeError("object not iterable");
    cbd4:	4807      	ldr	r0, [pc, #28]	; (cbf4 <mp_getiter+0xa4>)
    cbd6:	f000 fb0d 	bl	d1f4 <mp_raise_TypeError>
    } else {
        nlr_raise(mp_obj_new_exception_msg_varg(&mp_type_TypeError,
            "'%s' object is not iterable", mp_obj_get_type_str(o_in)));
    }
}
    cbda:	4618      	mov	r0, r3
    cbdc:	3718      	adds	r7, #24
    cbde:	46bd      	mov	sp, r7
    cbe0:	bd80      	pop	{r7, pc}
    cbe2:	bf00      	nop
    cbe4:	000216d8 	.word	0x000216d8
    cbe8:	00021848 	.word	0x00021848
    cbec:	000215a8 	.word	0x000215a8
    cbf0:	0000e27d 	.word	0x0000e27d
    cbf4:	000216e0 	.word	0x000216e0

0000cbf8 <mp_iternext_allow_raise>:

// may return MP_OBJ_STOP_ITERATION as an optimisation instead of raise StopIteration()
// may also raise StopIteration()
mp_obj_t mp_iternext_allow_raise(mp_obj_t o_in) {
    cbf8:	b580      	push	{r7, lr}
    cbfa:	b086      	sub	sp, #24
    cbfc:	af00      	add	r7, sp, #0
    cbfe:	6078      	str	r0, [r7, #4]
    mp_obj_type_t *type = mp_obj_get_type(o_in);
    cc00:	6878      	ldr	r0, [r7, #4]
    cc02:	f000 ff57 	bl	dab4 <mp_obj_get_type>
    cc06:	6178      	str	r0, [r7, #20]
    if (type->iternext != NULL) {
    cc08:	697b      	ldr	r3, [r7, #20]
    cc0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    cc0c:	2b00      	cmp	r3, #0
    cc0e:	d005      	beq.n	cc1c <mp_iternext_allow_raise+0x24>
        return type->iternext(o_in);
    cc10:	697b      	ldr	r3, [r7, #20]
    cc12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    cc14:	6878      	ldr	r0, [r7, #4]
    cc16:	4798      	blx	r3
    cc18:	4603      	mov	r3, r0
    cc1a:	e015      	b.n	cc48 <mp_iternext_allow_raise+0x50>
    } else {
        // check for __next__ method
        mp_obj_t dest[2];
        mp_load_method_maybe(o_in, MP_QSTR___next__, dest);
    cc1c:	f107 030c 	add.w	r3, r7, #12
    cc20:	461a      	mov	r2, r3
    cc22:	211e      	movs	r1, #30
    cc24:	6878      	ldr	r0, [r7, #4]
    cc26:	f7ff feb9 	bl	c99c <mp_load_method_maybe>
        if (dest[0] != MP_OBJ_NULL) {
    cc2a:	68fb      	ldr	r3, [r7, #12]
    cc2c:	2b00      	cmp	r3, #0
    cc2e:	d008      	beq.n	cc42 <mp_iternext_allow_raise+0x4a>
            // __next__ exists, call it and return its result
            return mp_call_method_n_kw(0, 0, dest);
    cc30:	f107 030c 	add.w	r3, r7, #12
    cc34:	461a      	mov	r2, r3
    cc36:	2100      	movs	r1, #0
    cc38:	2000      	movs	r0, #0
    cc3a:	f7ff fa35 	bl	c0a8 <mp_call_method_n_kw>
    cc3e:	4603      	mov	r3, r0
    cc40:	e002      	b.n	cc48 <mp_iternext_allow_raise+0x50>
        } else {
            if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
                mp_raise_TypeError("object not an iterator");
    cc42:	4803      	ldr	r0, [pc, #12]	; (cc50 <mp_iternext_allow_raise+0x58>)
    cc44:	f000 fad6 	bl	d1f4 <mp_raise_TypeError>
                nlr_raise(mp_obj_new_exception_msg_varg(&mp_type_TypeError,
                    "'%s' object is not an iterator", mp_obj_get_type_str(o_in)));
            }
        }
    }
}
    cc48:	4618      	mov	r0, r3
    cc4a:	3718      	adds	r7, #24
    cc4c:	46bd      	mov	sp, r7
    cc4e:	bd80      	pop	{r7, pc}
    cc50:	000216f4 	.word	0x000216f4

0000cc54 <mp_iternext>:

// will always return MP_OBJ_STOP_ITERATION instead of raising StopIteration() (or any subclass thereof)
// may raise other exceptions
mp_obj_t mp_iternext(mp_obj_t o_in) {
    cc54:	b580      	push	{r7, lr}
    cc56:	b092      	sub	sp, #72	; 0x48
    cc58:	af00      	add	r7, sp, #0
    cc5a:	6078      	str	r0, [r7, #4]
    MP_STACK_CHECK(); // enumerate, filter, map and zip can recursively call mp_iternext
    mp_obj_type_t *type = mp_obj_get_type(o_in);
    cc5c:	6878      	ldr	r0, [r7, #4]
    cc5e:	f000 ff29 	bl	dab4 <mp_obj_get_type>
    cc62:	6478      	str	r0, [r7, #68]	; 0x44
    if (type->iternext != NULL) {
    cc64:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    cc66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    cc68:	2b00      	cmp	r3, #0
    cc6a:	d005      	beq.n	cc78 <mp_iternext+0x24>
        return type->iternext(o_in);
    cc6c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    cc6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    cc70:	6878      	ldr	r0, [r7, #4]
    cc72:	4798      	blx	r3
    cc74:	4603      	mov	r3, r0
    cc76:	e02f      	b.n	ccd8 <mp_iternext+0x84>
    } else {
        // check for __next__ method
        mp_obj_t dest[2];
        mp_load_method_maybe(o_in, MP_QSTR___next__, dest);
    cc78:	f107 0338 	add.w	r3, r7, #56	; 0x38
    cc7c:	461a      	mov	r2, r3
    cc7e:	211e      	movs	r1, #30
    cc80:	6878      	ldr	r0, [r7, #4]
    cc82:	f7ff fe8b 	bl	c99c <mp_load_method_maybe>
        if (dest[0] != MP_OBJ_NULL) {
    cc86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    cc88:	2b00      	cmp	r3, #0
    cc8a:	d022      	beq.n	ccd2 <mp_iternext+0x7e>
            // __next__ exists, call it and return its result
            nlr_buf_t nlr;
            if (nlr_push(&nlr) == 0) {
    cc8c:	f107 0308 	add.w	r3, r7, #8
    cc90:	4618      	mov	r0, r3
    cc92:	f7f3 fb13 	bl	2bc <nlr_push>
    cc96:	4603      	mov	r3, r0
    cc98:	2b00      	cmp	r3, #0
    cc9a:	d10b      	bne.n	ccb4 <mp_iternext+0x60>
                mp_obj_t ret = mp_call_method_n_kw(0, 0, dest);
    cc9c:	f107 0338 	add.w	r3, r7, #56	; 0x38
    cca0:	461a      	mov	r2, r3
    cca2:	2100      	movs	r1, #0
    cca4:	2000      	movs	r0, #0
    cca6:	f7ff f9ff 	bl	c0a8 <mp_call_method_n_kw>
    ccaa:	6438      	str	r0, [r7, #64]	; 0x40
                nlr_pop();
    ccac:	f7f3 faf4 	bl	298 <nlr_pop>
                return ret;
    ccb0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    ccb2:	e011      	b.n	ccd8 <mp_iternext+0x84>
            } else {
                if (mp_obj_is_subclass_fast(MP_OBJ_FROM_PTR(((mp_obj_base_t*)nlr.ret_val)->type), MP_OBJ_FROM_PTR(&mp_type_StopIteration))) {
    ccb4:	68fb      	ldr	r3, [r7, #12]
    ccb6:	681b      	ldr	r3, [r3, #0]
    ccb8:	4909      	ldr	r1, [pc, #36]	; (cce0 <mp_iternext+0x8c>)
    ccba:	4618      	mov	r0, r3
    ccbc:	f00a fc52 	bl	17564 <mp_obj_is_subclass_fast>
    ccc0:	4603      	mov	r3, r0
    ccc2:	2b00      	cmp	r3, #0
    ccc4:	d001      	beq.n	ccca <mp_iternext+0x76>
                    return MP_OBJ_STOP_ITERATION;
    ccc6:	2304      	movs	r3, #4
    ccc8:	e006      	b.n	ccd8 <mp_iternext+0x84>
                } else {
                    nlr_jump(nlr.ret_val);
    ccca:	68fb      	ldr	r3, [r7, #12]
    cccc:	4618      	mov	r0, r3
    ccce:	f7f3 fb07 	bl	2e0 <nlr_jump>
                }
            }
        } else {
            if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
                mp_raise_TypeError("object not an iterator");
    ccd2:	4804      	ldr	r0, [pc, #16]	; (cce4 <mp_iternext+0x90>)
    ccd4:	f000 fa8e 	bl	d1f4 <mp_raise_TypeError>
                nlr_raise(mp_obj_new_exception_msg_varg(&mp_type_TypeError,
                    "'%s' object is not an iterator", mp_obj_get_type_str(o_in)));
            }
        }
    }
}
    ccd8:	4618      	mov	r0, r3
    ccda:	3748      	adds	r7, #72	; 0x48
    ccdc:	46bd      	mov	sp, r7
    ccde:	bd80      	pop	{r7, pc}
    cce0:	00022260 	.word	0x00022260
    cce4:	000216f4 	.word	0x000216f4

0000cce8 <mp_resume>:

// TODO: Unclear what to do with StopIterarion exception here.
mp_vm_return_kind_t mp_resume(mp_obj_t self_in, mp_obj_t send_value, mp_obj_t throw_value, mp_obj_t *ret_val) {
    cce8:	b580      	push	{r7, lr}
    ccea:	b096      	sub	sp, #88	; 0x58
    ccec:	af00      	add	r7, sp, #0
    ccee:	60f8      	str	r0, [r7, #12]
    ccf0:	60b9      	str	r1, [r7, #8]
    ccf2:	607a      	str	r2, [r7, #4]
    ccf4:	603b      	str	r3, [r7, #0]
    assert((send_value != MP_OBJ_NULL) ^ (throw_value != MP_OBJ_NULL));
    ccf6:	68bb      	ldr	r3, [r7, #8]
    ccf8:	2b00      	cmp	r3, #0
    ccfa:	bf14      	ite	ne
    ccfc:	2301      	movne	r3, #1
    ccfe:	2300      	moveq	r3, #0
    cd00:	b2da      	uxtb	r2, r3
    cd02:	687b      	ldr	r3, [r7, #4]
    cd04:	2b00      	cmp	r3, #0
    cd06:	bf14      	ite	ne
    cd08:	2301      	movne	r3, #1
    cd0a:	2300      	moveq	r3, #0
    cd0c:	b2db      	uxtb	r3, r3
    cd0e:	4053      	eors	r3, r2
    cd10:	b2db      	uxtb	r3, r3
    cd12:	2b00      	cmp	r3, #0
    cd14:	d106      	bne.n	cd24 <mp_resume+0x3c>
    cd16:	4b5f      	ldr	r3, [pc, #380]	; (ce94 <mp_resume+0x1ac>)
    cd18:	4a5f      	ldr	r2, [pc, #380]	; (ce98 <mp_resume+0x1b0>)
    cd1a:	f240 41cb 	movw	r1, #1227	; 0x4cb
    cd1e:	485f      	ldr	r0, [pc, #380]	; (ce9c <mp_resume+0x1b4>)
    cd20:	f00e fcd6 	bl	1b6d0 <__assert_func>
    mp_obj_type_t *type = mp_obj_get_type(self_in);
    cd24:	68f8      	ldr	r0, [r7, #12]
    cd26:	f000 fec5 	bl	dab4 <mp_obj_get_type>
    cd2a:	6578      	str	r0, [r7, #84]	; 0x54

    if (type == &mp_type_gen_instance) {
    cd2c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    cd2e:	4a5c      	ldr	r2, [pc, #368]	; (cea0 <mp_resume+0x1b8>)
    cd30:	4293      	cmp	r3, r2
    cd32:	d107      	bne.n	cd44 <mp_resume+0x5c>
        return mp_obj_gen_resume(self_in, send_value, throw_value, ret_val);
    cd34:	683b      	ldr	r3, [r7, #0]
    cd36:	687a      	ldr	r2, [r7, #4]
    cd38:	68b9      	ldr	r1, [r7, #8]
    cd3a:	68f8      	ldr	r0, [r7, #12]
    cd3c:	f003 fadc 	bl	102f8 <mp_obj_gen_resume>
    cd40:	4603      	mov	r3, r0
    cd42:	e0a3      	b.n	ce8c <mp_resume+0x1a4>
    }

    if (type->iternext != NULL && send_value == mp_const_none) {
    cd44:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    cd46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    cd48:	2b00      	cmp	r3, #0
    cd4a:	d012      	beq.n	cd72 <mp_resume+0x8a>
    cd4c:	68bb      	ldr	r3, [r7, #8]
    cd4e:	4a55      	ldr	r2, [pc, #340]	; (cea4 <mp_resume+0x1bc>)
    cd50:	4293      	cmp	r3, r2
    cd52:	d10e      	bne.n	cd72 <mp_resume+0x8a>
        mp_obj_t ret = type->iternext(self_in);
    cd54:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    cd56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    cd58:	68f8      	ldr	r0, [r7, #12]
    cd5a:	4798      	blx	r3
    cd5c:	6538      	str	r0, [r7, #80]	; 0x50
        *ret_val = ret;
    cd5e:	683b      	ldr	r3, [r7, #0]
    cd60:	6d3a      	ldr	r2, [r7, #80]	; 0x50
    cd62:	601a      	str	r2, [r3, #0]
        if (ret != MP_OBJ_STOP_ITERATION) {
    cd64:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    cd66:	2b04      	cmp	r3, #4
    cd68:	d001      	beq.n	cd6e <mp_resume+0x86>
            return MP_VM_RETURN_YIELD;
    cd6a:	2301      	movs	r3, #1
    cd6c:	e08e      	b.n	ce8c <mp_resume+0x1a4>
        } else {
            // Emulate raise StopIteration()
            // Special case, handled in vm.c
            return MP_VM_RETURN_NORMAL;
    cd6e:	2300      	movs	r3, #0
    cd70:	e08c      	b.n	ce8c <mp_resume+0x1a4>
    }

    mp_obj_t dest[3]; // Reserve slot for send() arg

    // Python instance iterator protocol
    if (send_value == mp_const_none) {
    cd72:	68bb      	ldr	r3, [r7, #8]
    cd74:	4a4b      	ldr	r2, [pc, #300]	; (cea4 <mp_resume+0x1bc>)
    cd76:	4293      	cmp	r3, r2
    cd78:	d124      	bne.n	cdc4 <mp_resume+0xdc>
        mp_load_method_maybe(self_in, MP_QSTR___next__, dest);
    cd7a:	f107 0344 	add.w	r3, r7, #68	; 0x44
    cd7e:	461a      	mov	r2, r3
    cd80:	211e      	movs	r1, #30
    cd82:	68f8      	ldr	r0, [r7, #12]
    cd84:	f7ff fe0a 	bl	c99c <mp_load_method_maybe>
        if (dest[0] != MP_OBJ_NULL) {
    cd88:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    cd8a:	2b00      	cmp	r3, #0
    cd8c:	d01a      	beq.n	cdc4 <mp_resume+0xdc>
            nlr_buf_t nlr;
            if (nlr_push(&nlr) == 0) {
    cd8e:	f107 0314 	add.w	r3, r7, #20
    cd92:	4618      	mov	r0, r3
    cd94:	f7f3 fa92 	bl	2bc <nlr_push>
    cd98:	4603      	mov	r3, r0
    cd9a:	2b00      	cmp	r3, #0
    cd9c:	d10d      	bne.n	cdba <mp_resume+0xd2>
                *ret_val = mp_call_method_n_kw(0, 0, dest);
    cd9e:	f107 0344 	add.w	r3, r7, #68	; 0x44
    cda2:	461a      	mov	r2, r3
    cda4:	2100      	movs	r1, #0
    cda6:	2000      	movs	r0, #0
    cda8:	f7ff f97e 	bl	c0a8 <mp_call_method_n_kw>
    cdac:	4602      	mov	r2, r0
    cdae:	683b      	ldr	r3, [r7, #0]
    cdb0:	601a      	str	r2, [r3, #0]
                nlr_pop();
    cdb2:	f7f3 fa71 	bl	298 <nlr_pop>
                return MP_VM_RETURN_YIELD;
    cdb6:	2301      	movs	r3, #1
    cdb8:	e068      	b.n	ce8c <mp_resume+0x1a4>
            } else {
                *ret_val = MP_OBJ_FROM_PTR(nlr.ret_val);
    cdba:	69ba      	ldr	r2, [r7, #24]
    cdbc:	683b      	ldr	r3, [r7, #0]
    cdbe:	601a      	str	r2, [r3, #0]
                return MP_VM_RETURN_EXCEPTION;
    cdc0:	2302      	movs	r3, #2
    cdc2:	e063      	b.n	ce8c <mp_resume+0x1a4>
        }
    }

    // Either python instance generator protocol, or native object
    // generator protocol.
    if (send_value != MP_OBJ_NULL) {
    cdc4:	68bb      	ldr	r3, [r7, #8]
    cdc6:	2b00      	cmp	r3, #0
    cdc8:	d015      	beq.n	cdf6 <mp_resume+0x10e>
        mp_load_method(self_in, MP_QSTR_send, dest);
    cdca:	f107 0344 	add.w	r3, r7, #68	; 0x44
    cdce:	461a      	mov	r2, r3
    cdd0:	f240 115f 	movw	r1, #351	; 0x15f
    cdd4:	68f8      	ldr	r0, [r7, #12]
    cdd6:	f7ff fe43 	bl	ca60 <mp_load_method>
        dest[2] = send_value;
    cdda:	68bb      	ldr	r3, [r7, #8]
    cddc:	64fb      	str	r3, [r7, #76]	; 0x4c
        // TODO: This should have exception wrapping like __next__ case
        // above. Not done right away to think how to optimize native
        // generators better, see:
        // https://github.com/micropython/micropython/issues/2628
        *ret_val = mp_call_method_n_kw(1, 0, dest);
    cdde:	f107 0344 	add.w	r3, r7, #68	; 0x44
    cde2:	461a      	mov	r2, r3
    cde4:	2100      	movs	r1, #0
    cde6:	2001      	movs	r0, #1
    cde8:	f7ff f95e 	bl	c0a8 <mp_call_method_n_kw>
    cdec:	4602      	mov	r2, r0
    cdee:	683b      	ldr	r3, [r7, #0]
    cdf0:	601a      	str	r2, [r3, #0]
        return MP_VM_RETURN_YIELD;
    cdf2:	2301      	movs	r3, #1
    cdf4:	e04a      	b.n	ce8c <mp_resume+0x1a4>
    }

    assert(throw_value != MP_OBJ_NULL);
    cdf6:	687b      	ldr	r3, [r7, #4]
    cdf8:	2b00      	cmp	r3, #0
    cdfa:	d106      	bne.n	ce0a <mp_resume+0x122>
    cdfc:	4b2a      	ldr	r3, [pc, #168]	; (cea8 <mp_resume+0x1c0>)
    cdfe:	4a26      	ldr	r2, [pc, #152]	; (ce98 <mp_resume+0x1b0>)
    ce00:	f240 41fd 	movw	r1, #1277	; 0x4fd
    ce04:	4825      	ldr	r0, [pc, #148]	; (ce9c <mp_resume+0x1b4>)
    ce06:	f00e fc63 	bl	1b6d0 <__assert_func>
    {
        if (mp_obj_is_subclass_fast(MP_OBJ_FROM_PTR(mp_obj_get_type(throw_value)), MP_OBJ_FROM_PTR(&mp_type_GeneratorExit))) {
    ce0a:	6878      	ldr	r0, [r7, #4]
    ce0c:	f000 fe52 	bl	dab4 <mp_obj_get_type>
    ce10:	4603      	mov	r3, r0
    ce12:	4926      	ldr	r1, [pc, #152]	; (ceac <mp_resume+0x1c4>)
    ce14:	4618      	mov	r0, r3
    ce16:	f00a fba5 	bl	17564 <mp_obj_is_subclass_fast>
    ce1a:	4603      	mov	r3, r0
    ce1c:	2b00      	cmp	r3, #0
    ce1e:	d015      	beq.n	ce4c <mp_resume+0x164>
            mp_load_method_maybe(self_in, MP_QSTR_close, dest);
    ce20:	f107 0344 	add.w	r3, r7, #68	; 0x44
    ce24:	461a      	mov	r2, r3
    ce26:	21f9      	movs	r1, #249	; 0xf9
    ce28:	68f8      	ldr	r0, [r7, #12]
    ce2a:	f7ff fdb7 	bl	c99c <mp_load_method_maybe>
            if (dest[0] != MP_OBJ_NULL) {
    ce2e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    ce30:	2b00      	cmp	r3, #0
    ce32:	d024      	beq.n	ce7e <mp_resume+0x196>
                // TODO: Exceptions raised in close() are not propagated,
                // printed to sys.stderr
                *ret_val = mp_call_method_n_kw(0, 0, dest);
    ce34:	f107 0344 	add.w	r3, r7, #68	; 0x44
    ce38:	461a      	mov	r2, r3
    ce3a:	2100      	movs	r1, #0
    ce3c:	2000      	movs	r0, #0
    ce3e:	f7ff f933 	bl	c0a8 <mp_call_method_n_kw>
    ce42:	4602      	mov	r2, r0
    ce44:	683b      	ldr	r3, [r7, #0]
    ce46:	601a      	str	r2, [r3, #0]
                // We assume one can't "yield" from close()
                return MP_VM_RETURN_NORMAL;
    ce48:	2300      	movs	r3, #0
    ce4a:	e01f      	b.n	ce8c <mp_resume+0x1a4>
            }
        } else {
            mp_load_method_maybe(self_in, MP_QSTR_throw, dest);
    ce4c:	f107 0344 	add.w	r3, r7, #68	; 0x44
    ce50:	461a      	mov	r2, r3
    ce52:	f240 1171 	movw	r1, #369	; 0x171
    ce56:	68f8      	ldr	r0, [r7, #12]
    ce58:	f7ff fda0 	bl	c99c <mp_load_method_maybe>
            if (dest[0] != MP_OBJ_NULL) {
    ce5c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    ce5e:	2b00      	cmp	r3, #0
    ce60:	d00d      	beq.n	ce7e <mp_resume+0x196>
                dest[2] = throw_value;
    ce62:	687b      	ldr	r3, [r7, #4]
    ce64:	64fb      	str	r3, [r7, #76]	; 0x4c
                *ret_val = mp_call_method_n_kw(1, 0, dest);
    ce66:	f107 0344 	add.w	r3, r7, #68	; 0x44
    ce6a:	461a      	mov	r2, r3
    ce6c:	2100      	movs	r1, #0
    ce6e:	2001      	movs	r0, #1
    ce70:	f7ff f91a 	bl	c0a8 <mp_call_method_n_kw>
    ce74:	4602      	mov	r2, r0
    ce76:	683b      	ldr	r3, [r7, #0]
    ce78:	601a      	str	r2, [r3, #0]
                // If .throw() method returned, we assume it's value to yield
                // - any exception would be thrown with nlr_raise().
                return MP_VM_RETURN_YIELD;
    ce7a:	2301      	movs	r3, #1
    ce7c:	e006      	b.n	ce8c <mp_resume+0x1a4>
        // If there's nowhere to throw exception into, then we assume that object
        // is just incapable to handle it, so any exception thrown into it
        // will be propagated up. This behavior is approved by test_pep380.py
        // test_delegation_of_close_to_non_generator(),
        //  test_delegating_throw_to_non_generator()
        *ret_val = mp_make_raise_obj(throw_value);
    ce7e:	6878      	ldr	r0, [r7, #4]
    ce80:	f000 f816 	bl	ceb0 <mp_make_raise_obj>
    ce84:	4602      	mov	r2, r0
    ce86:	683b      	ldr	r3, [r7, #0]
    ce88:	601a      	str	r2, [r3, #0]
        return MP_VM_RETURN_EXCEPTION;
    ce8a:	2302      	movs	r3, #2
    }
}
    ce8c:	4618      	mov	r0, r3
    ce8e:	3758      	adds	r7, #88	; 0x58
    ce90:	46bd      	mov	sp, r7
    ce92:	bd80      	pop	{r7, pc}
    ce94:	0002170c 	.word	0x0002170c
    ce98:	00021854 	.word	0x00021854
    ce9c:	000215a8 	.word	0x000215a8
    cea0:	00022d54 	.word	0x00022d54
    cea4:	0002345c 	.word	0x0002345c
    cea8:	00021748 	.word	0x00021748
    ceac:	000221e8 	.word	0x000221e8

0000ceb0 <mp_make_raise_obj>:

mp_obj_t mp_make_raise_obj(mp_obj_t o) {
    ceb0:	b580      	push	{r7, lr}
    ceb2:	b082      	sub	sp, #8
    ceb4:	af00      	add	r7, sp, #0
    ceb6:	6078      	str	r0, [r7, #4]
    DEBUG_printf("raise %p\n", o);
    if (mp_obj_is_exception_type(o)) {
    ceb8:	6878      	ldr	r0, [r7, #4]
    ceba:	f002 fd85 	bl	f9c8 <mp_obj_is_exception_type>
    cebe:	4603      	mov	r3, r0
    cec0:	2b00      	cmp	r3, #0
    cec2:	d007      	beq.n	ced4 <mp_make_raise_obj+0x24>
        // o is an exception type (it is derived from BaseException (or is BaseException))
        // create and return a new exception instance by calling o
        // TODO could have an option to disable traceback, then builtin exceptions (eg TypeError)
        // could have const instances in ROM which we return here instead
        return mp_call_function_n_kw(o, 0, 0, NULL);
    cec4:	2300      	movs	r3, #0
    cec6:	2200      	movs	r2, #0
    cec8:	2100      	movs	r1, #0
    ceca:	6878      	ldr	r0, [r7, #4]
    cecc:	f7ff f8ca 	bl	c064 <mp_call_function_n_kw>
    ced0:	4603      	mov	r3, r0
    ced2:	e00c      	b.n	ceee <mp_make_raise_obj+0x3e>
    } else if (mp_obj_is_exception_instance(o)) {
    ced4:	6878      	ldr	r0, [r7, #4]
    ced6:	f002 fd9f 	bl	fa18 <mp_obj_is_exception_instance>
    ceda:	4603      	mov	r3, r0
    cedc:	2b00      	cmp	r3, #0
    cede:	d001      	beq.n	cee4 <mp_make_raise_obj+0x34>
        // o is an instance of an exception, so use it as the exception
        return o;
    cee0:	687b      	ldr	r3, [r7, #4]
    cee2:	e004      	b.n	ceee <mp_make_raise_obj+0x3e>
    } else {
        // o cannot be used as an exception, so return a type error (which will be raised by the caller)
        return mp_obj_new_exception_msg(&mp_type_TypeError, "exceptions must derive from BaseException");
    cee4:	4904      	ldr	r1, [pc, #16]	; (cef8 <mp_make_raise_obj+0x48>)
    cee6:	4805      	ldr	r0, [pc, #20]	; (cefc <mp_make_raise_obj+0x4c>)
    cee8:	f002 fc70 	bl	f7cc <mp_obj_new_exception_msg>
    ceec:	4603      	mov	r3, r0
    }
}
    ceee:	4618      	mov	r0, r3
    cef0:	3708      	adds	r7, #8
    cef2:	46bd      	mov	sp, r7
    cef4:	bd80      	pop	{r7, pc}
    cef6:	bf00      	nop
    cef8:	00021764 	.word	0x00021764
    cefc:	00022698 	.word	0x00022698

0000cf00 <mp_import_name>:

mp_obj_t mp_import_name(qstr name, mp_obj_t fromlist, mp_obj_t level) {
    cf00:	b580      	push	{r7, lr}
    cf02:	b08a      	sub	sp, #40	; 0x28
    cf04:	af00      	add	r7, sp, #0
    cf06:	60f8      	str	r0, [r7, #12]
    cf08:	60b9      	str	r1, [r7, #8]
    cf0a:	607a      	str	r2, [r7, #4]
    DEBUG_printf("import name '%s' level=%d\n", qstr_str(name), MP_OBJ_SMALL_INT_VALUE(level));

    // build args array
    mp_obj_t args[5];
    args[0] = MP_OBJ_NEW_QSTR(name);
    cf0c:	68fb      	ldr	r3, [r7, #12]
    cf0e:	009b      	lsls	r3, r3, #2
    cf10:	f043 0302 	orr.w	r3, r3, #2
    cf14:	617b      	str	r3, [r7, #20]
    args[1] = mp_const_none; // TODO should be globals
    cf16:	4b09      	ldr	r3, [pc, #36]	; (cf3c <mp_import_name+0x3c>)
    cf18:	61bb      	str	r3, [r7, #24]
    args[2] = mp_const_none; // TODO should be locals
    cf1a:	4b08      	ldr	r3, [pc, #32]	; (cf3c <mp_import_name+0x3c>)
    cf1c:	61fb      	str	r3, [r7, #28]
    args[3] = fromlist;
    cf1e:	68bb      	ldr	r3, [r7, #8]
    cf20:	623b      	str	r3, [r7, #32]
    args[4] = level; // must be 0; we don't yet support other values
    cf22:	687b      	ldr	r3, [r7, #4]
    cf24:	627b      	str	r3, [r7, #36]	; 0x24

    // TODO lookup __import__ and call that instead of going straight to builtin implementation
    return mp_builtin___import__(5, args);
    cf26:	f107 0314 	add.w	r3, r7, #20
    cf2a:	4619      	mov	r1, r3
    cf2c:	2005      	movs	r0, #5
    cf2e:	f00b fcef 	bl	18910 <mp_builtin___import__>
    cf32:	4603      	mov	r3, r0
}
    cf34:	4618      	mov	r0, r3
    cf36:	3728      	adds	r7, #40	; 0x28
    cf38:	46bd      	mov	sp, r7
    cf3a:	bd80      	pop	{r7, pc}
    cf3c:	0002345c 	.word	0x0002345c

0000cf40 <mp_import_from>:

mp_obj_t mp_import_from(mp_obj_t module, qstr name) {
    cf40:	b5b0      	push	{r4, r5, r7, lr}
    cf42:	b08e      	sub	sp, #56	; 0x38
    cf44:	af00      	add	r7, sp, #0
    cf46:	6078      	str	r0, [r7, #4]
    cf48:	6039      	str	r1, [r7, #0]
    DEBUG_printf("import from %p %s\n", module, qstr_str(name));

    mp_obj_t dest[2];

    mp_load_method_maybe(module, name, dest);
    cf4a:	f107 0320 	add.w	r3, r7, #32
    cf4e:	461a      	mov	r2, r3
    cf50:	6839      	ldr	r1, [r7, #0]
    cf52:	6878      	ldr	r0, [r7, #4]
    cf54:	f7ff fd22 	bl	c99c <mp_load_method_maybe>

    if (dest[1] != MP_OBJ_NULL) {
    cf58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    cf5a:	2b00      	cmp	r3, #0
    cf5c:	d00a      	beq.n	cf74 <mp_import_from+0x34>
    cf5e:	e000      	b.n	cf62 <mp_import_from+0x22>

    #if MICROPY_ENABLE_EXTERNAL_IMPORT

    // See if it's a package, then can try FS import
    if (!mp_obj_is_package(module)) {
        goto import_error;
    cf60:	bf00      	nop
        nlr_raise(mp_obj_new_exception_msg_varg(&mp_type_ImportError, "cannot import name %q", name));
    cf62:	683a      	ldr	r2, [r7, #0]
    cf64:	493a      	ldr	r1, [pc, #232]	; (d050 <mp_import_from+0x110>)
    cf66:	483b      	ldr	r0, [pc, #236]	; (d054 <mp_import_from+0x114>)
    cf68:	f002 fc90 	bl	f88c <mp_obj_new_exception_msg_varg>
    cf6c:	4603      	mov	r3, r0
    cf6e:	4618      	mov	r0, r3
    cf70:	f7f3 f9b6 	bl	2e0 <nlr_jump>
    if (dest[0] != MP_OBJ_NULL) {
    cf74:	6a3b      	ldr	r3, [r7, #32]
    cf76:	2b00      	cmp	r3, #0
    cf78:	d001      	beq.n	cf7e <mp_import_from+0x3e>
        return dest[0];
    cf7a:	6a3b      	ldr	r3, [r7, #32]
    cf7c:	e063      	b.n	d046 <mp_import_from+0x106>
    if (!mp_obj_is_package(module)) {
    cf7e:	6878      	ldr	r0, [r7, #4]
    cf80:	f00b fc10 	bl	187a4 <mp_obj_is_package>
    cf84:	4603      	mov	r3, r0
    cf86:	f083 0301 	eor.w	r3, r3, #1
    cf8a:	b2db      	uxtb	r3, r3
    cf8c:	2b00      	cmp	r3, #0
    cf8e:	d1e7      	bne.n	cf60 <mp_import_from+0x20>
    }

    mp_load_method_maybe(module, MP_QSTR___name__, dest);
    cf90:	f107 0320 	add.w	r3, r7, #32
    cf94:	461a      	mov	r2, r3
    cf96:	211c      	movs	r1, #28
    cf98:	6878      	ldr	r0, [r7, #4]
    cf9a:	f7ff fcff 	bl	c99c <mp_load_method_maybe>
    size_t pkg_name_len;
    const char *pkg_name = mp_obj_str_get_data(dest[0], &pkg_name_len);
    cf9e:	6a3b      	ldr	r3, [r7, #32]
    cfa0:	f107 021c 	add.w	r2, r7, #28
    cfa4:	4611      	mov	r1, r2
    cfa6:	4618      	mov	r0, r3
    cfa8:	f008 fcbc 	bl	15924 <mp_obj_str_get_data>
    cfac:	6378      	str	r0, [r7, #52]	; 0x34

    const uint dot_name_len = pkg_name_len + 1 + qstr_len(name);
    cfae:	6838      	ldr	r0, [r7, #0]
    cfb0:	f7f4 f9cc 	bl	134c <qstr_len>
    cfb4:	4602      	mov	r2, r0
    cfb6:	69fb      	ldr	r3, [r7, #28]
    cfb8:	4413      	add	r3, r2
    cfba:	3301      	adds	r3, #1
    cfbc:	633b      	str	r3, [r7, #48]	; 0x30
    char *dot_name = mp_local_alloc(dot_name_len);
    cfbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    cfc0:	3307      	adds	r3, #7
    cfc2:	3307      	adds	r3, #7
    cfc4:	08db      	lsrs	r3, r3, #3
    cfc6:	00db      	lsls	r3, r3, #3
    cfc8:	ebad 0d03 	sub.w	sp, sp, r3
    cfcc:	466b      	mov	r3, sp
    cfce:	3307      	adds	r3, #7
    cfd0:	08db      	lsrs	r3, r3, #3
    cfd2:	00db      	lsls	r3, r3, #3
    cfd4:	62fb      	str	r3, [r7, #44]	; 0x2c
    memcpy(dot_name, pkg_name, pkg_name_len);
    cfd6:	69fb      	ldr	r3, [r7, #28]
    cfd8:	461a      	mov	r2, r3
    cfda:	6b79      	ldr	r1, [r7, #52]	; 0x34
    cfdc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    cfde:	f00f fe4b 	bl	1cc78 <memcpy>
    dot_name[pkg_name_len] = '.';
    cfe2:	69fb      	ldr	r3, [r7, #28]
    cfe4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    cfe6:	4413      	add	r3, r2
    cfe8:	222e      	movs	r2, #46	; 0x2e
    cfea:	701a      	strb	r2, [r3, #0]
    memcpy(dot_name + pkg_name_len + 1, qstr_str(name), qstr_len(name));
    cfec:	69fb      	ldr	r3, [r7, #28]
    cfee:	3301      	adds	r3, #1
    cff0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    cff2:	18d4      	adds	r4, r2, r3
    cff4:	6838      	ldr	r0, [r7, #0]
    cff6:	f7f4 f9b9 	bl	136c <qstr_str>
    cffa:	4605      	mov	r5, r0
    cffc:	6838      	ldr	r0, [r7, #0]
    cffe:	f7f4 f9a5 	bl	134c <qstr_len>
    d002:	4603      	mov	r3, r0
    d004:	461a      	mov	r2, r3
    d006:	4629      	mov	r1, r5
    d008:	4620      	mov	r0, r4
    d00a:	f00f fe35 	bl	1cc78 <memcpy>
    qstr dot_name_q = qstr_from_strn(dot_name, dot_name_len);
    d00e:	6b39      	ldr	r1, [r7, #48]	; 0x30
    d010:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    d012:	f7f4 f8cf 	bl	11b4 <qstr_from_strn>
    d016:	62b8      	str	r0, [r7, #40]	; 0x28
    mp_local_free(dot_name);
    d018:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    d01a:	f7fe fb5d 	bl	b6d8 <mp_local_free>

    mp_obj_t args[5];
    args[0] = MP_OBJ_NEW_QSTR(dot_name_q);
    d01e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    d020:	009b      	lsls	r3, r3, #2
    d022:	f043 0302 	orr.w	r3, r3, #2
    d026:	60bb      	str	r3, [r7, #8]
    args[1] = mp_const_none; // TODO should be globals
    d028:	4b0b      	ldr	r3, [pc, #44]	; (d058 <mp_import_from+0x118>)
    d02a:	60fb      	str	r3, [r7, #12]
    args[2] = mp_const_none; // TODO should be locals
    d02c:	4b0a      	ldr	r3, [pc, #40]	; (d058 <mp_import_from+0x118>)
    d02e:	613b      	str	r3, [r7, #16]
    args[3] = mp_const_true; // Pass sentinel "non empty" value to force returning of leaf module
    d030:	4b0a      	ldr	r3, [pc, #40]	; (d05c <mp_import_from+0x11c>)
    d032:	617b      	str	r3, [r7, #20]
    args[4] = MP_OBJ_NEW_SMALL_INT(0);
    d034:	2301      	movs	r3, #1
    d036:	61bb      	str	r3, [r7, #24]

    // TODO lookup __import__ and call that instead of going straight to builtin implementation
    return mp_builtin___import__(5, args);
    d038:	f107 0308 	add.w	r3, r7, #8
    d03c:	4619      	mov	r1, r3
    d03e:	2005      	movs	r0, #5
    d040:	f00b fc66 	bl	18910 <mp_builtin___import__>
    d044:	4603      	mov	r3, r0

    // Package import not supported with external imports disabled
    goto import_error;

    #endif
}
    d046:	4618      	mov	r0, r3
    d048:	3738      	adds	r7, #56	; 0x38
    d04a:	46bd      	mov	sp, r7
    d04c:	bdb0      	pop	{r4, r5, r7, pc}
    d04e:	bf00      	nop
    d050:	00021790 	.word	0x00021790
    d054:	00022404 	.word	0x00022404
    d058:	0002345c 	.word	0x0002345c
    d05c:	00021b78 	.word	0x00021b78

0000d060 <mp_import_all>:

void mp_import_all(mp_obj_t module) {
    d060:	b580      	push	{r7, lr}
    d062:	b086      	sub	sp, #24
    d064:	af00      	add	r7, sp, #0
    d066:	6078      	str	r0, [r7, #4]
    DEBUG_printf("import all %p\n", module);

    // TODO: Support __all__
    mp_map_t *map = mp_obj_dict_get_map(MP_OBJ_FROM_PTR(mp_obj_module_get_globals(module)));
    d068:	6878      	ldr	r0, [r7, #4]
    d06a:	f004 ff7d 	bl	11f68 <mp_obj_module_get_globals>
    d06e:	4603      	mov	r3, r0
    d070:	4618      	mov	r0, r3
    d072:	f002 fa23 	bl	f4bc <mp_obj_dict_get_map>
    d076:	6138      	str	r0, [r7, #16]
    for (size_t i = 0; i < map->alloc; i++) {
    d078:	2300      	movs	r3, #0
    d07a:	617b      	str	r3, [r7, #20]
    d07c:	e022      	b.n	d0c4 <mp_import_all+0x64>
        if (MP_MAP_SLOT_IS_FILLED(map, i)) {
    d07e:	6979      	ldr	r1, [r7, #20]
    d080:	6938      	ldr	r0, [r7, #16]
    d082:	f7fe faf3 	bl	b66c <MP_MAP_SLOT_IS_FILLED>
    d086:	4603      	mov	r3, r0
    d088:	2b00      	cmp	r3, #0
    d08a:	d018      	beq.n	d0be <mp_import_all+0x5e>
            qstr name = MP_OBJ_QSTR_VALUE(map->table[i].key);
    d08c:	693b      	ldr	r3, [r7, #16]
    d08e:	689a      	ldr	r2, [r3, #8]
    d090:	697b      	ldr	r3, [r7, #20]
    d092:	00db      	lsls	r3, r3, #3
    d094:	4413      	add	r3, r2
    d096:	681b      	ldr	r3, [r3, #0]
    d098:	089b      	lsrs	r3, r3, #2
    d09a:	60fb      	str	r3, [r7, #12]
            if (*qstr_str(name) != '_') {
    d09c:	68f8      	ldr	r0, [r7, #12]
    d09e:	f7f4 f965 	bl	136c <qstr_str>
    d0a2:	4603      	mov	r3, r0
    d0a4:	781b      	ldrb	r3, [r3, #0]
    d0a6:	2b5f      	cmp	r3, #95	; 0x5f
    d0a8:	d009      	beq.n	d0be <mp_import_all+0x5e>
                mp_store_name(name, map->table[i].value);
    d0aa:	693b      	ldr	r3, [r7, #16]
    d0ac:	689a      	ldr	r2, [r3, #8]
    d0ae:	697b      	ldr	r3, [r7, #20]
    d0b0:	00db      	lsls	r3, r3, #3
    d0b2:	4413      	add	r3, r2
    d0b4:	685b      	ldr	r3, [r3, #4]
    d0b6:	4619      	mov	r1, r3
    d0b8:	68f8      	ldr	r0, [r7, #12]
    d0ba:	f7fe fc09 	bl	b8d0 <mp_store_name>
    for (size_t i = 0; i < map->alloc; i++) {
    d0be:	697b      	ldr	r3, [r7, #20]
    d0c0:	3301      	adds	r3, #1
    d0c2:	617b      	str	r3, [r7, #20]
    d0c4:	693b      	ldr	r3, [r7, #16]
    d0c6:	685a      	ldr	r2, [r3, #4]
    d0c8:	697b      	ldr	r3, [r7, #20]
    d0ca:	429a      	cmp	r2, r3
    d0cc:	d8d7      	bhi.n	d07e <mp_import_all+0x1e>
            }
        }
    }
}
    d0ce:	bf00      	nop
    d0d0:	3718      	adds	r7, #24
    d0d2:	46bd      	mov	sp, r7
    d0d4:	bd80      	pop	{r7, pc}
    d0d6:	bf00      	nop

0000d0d8 <mp_parse_compile_execute>:

#if MICROPY_ENABLE_COMPILER

// this is implemented in this file so it can optimise access to locals/globals
mp_obj_t mp_parse_compile_execute(mp_lexer_t *lex, mp_parse_input_kind_t parse_input_kind, mp_obj_dict_t *globals, mp_obj_dict_t *locals) {
    d0d8:	b580      	push	{r7, lr}
    d0da:	b098      	sub	sp, #96	; 0x60
    d0dc:	af00      	add	r7, sp, #0
    d0de:	60f8      	str	r0, [r7, #12]
    d0e0:	60b9      	str	r1, [r7, #8]
    d0e2:	607a      	str	r2, [r7, #4]
    d0e4:	603b      	str	r3, [r7, #0]
    // save context
    mp_obj_dict_t *volatile old_globals = mp_globals_get();
    d0e6:	f7fe fb45 	bl	b774 <mp_globals_get>
    d0ea:	4603      	mov	r3, r0
    d0ec:	653b      	str	r3, [r7, #80]	; 0x50
    mp_obj_dict_t *volatile old_locals = mp_locals_get();
    d0ee:	f7fe fb25 	bl	b73c <mp_locals_get>
    d0f2:	4603      	mov	r3, r0
    d0f4:	64fb      	str	r3, [r7, #76]	; 0x4c

    // set new context
    mp_globals_set(globals);
    d0f6:	6878      	ldr	r0, [r7, #4]
    d0f8:	f7fe fb48 	bl	b78c <mp_globals_set>
    mp_locals_set(locals);
    d0fc:	6838      	ldr	r0, [r7, #0]
    d0fe:	f7fe fb29 	bl	b754 <mp_locals_set>

    nlr_buf_t nlr;
    if (nlr_push(&nlr) == 0) {
    d102:	f107 031c 	add.w	r3, r7, #28
    d106:	4618      	mov	r0, r3
    d108:	f7f3 f8d8 	bl	2bc <nlr_push>
    d10c:	4603      	mov	r3, r0
    d10e:	2b00      	cmp	r3, #0
    d110:	d121      	bne.n	d156 <mp_parse_compile_execute+0x7e>
        qstr source_name = lex->source_name;
    d112:	68fb      	ldr	r3, [r7, #12]
    d114:	681b      	ldr	r3, [r3, #0]
    d116:	65fb      	str	r3, [r7, #92]	; 0x5c
        mp_parse_tree_t parse_tree = mp_parse(lex, parse_input_kind);
    d118:	f107 0314 	add.w	r3, r7, #20
    d11c:	68ba      	ldr	r2, [r7, #8]
    d11e:	68f9      	ldr	r1, [r7, #12]
    d120:	4618      	mov	r0, r3
    d122:	f7f7 f9b7 	bl	4494 <mp_parse>
        mp_obj_t module_fun = mp_compile(&parse_tree, source_name, MP_EMIT_OPT_NONE, false);
    d126:	f107 0014 	add.w	r0, r7, #20
    d12a:	2300      	movs	r3, #0
    d12c:	2200      	movs	r2, #0
    d12e:	6df9      	ldr	r1, [r7, #92]	; 0x5c
    d130:	f7fc fc18 	bl	9964 <mp_compile>
    d134:	65b8      	str	r0, [r7, #88]	; 0x58
        if (MICROPY_PY_BUILTINS_COMPILE && globals == NULL) {
            // for compile only, return value is the module function
            ret = module_fun;
        } else {
            // execute module function and get return value
            ret = mp_call_function_0(module_fun);
    d136:	6db8      	ldr	r0, [r7, #88]	; 0x58
    d138:	f7fe ff5e 	bl	bff8 <mp_call_function_0>
    d13c:	6578      	str	r0, [r7, #84]	; 0x54
        }

        // finish nlr block, restore context and return value
        nlr_pop();
    d13e:	f7f3 f8ab 	bl	298 <nlr_pop>
        mp_globals_set(old_globals);
    d142:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    d144:	4618      	mov	r0, r3
    d146:	f7fe fb21 	bl	b78c <mp_globals_set>
        mp_locals_set(old_locals);
    d14a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    d14c:	4618      	mov	r0, r3
    d14e:	f7fe fb01 	bl	b754 <mp_locals_set>
        return ret;
    d152:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    d154:	e00b      	b.n	d16e <mp_parse_compile_execute+0x96>
    } else {
        // exception; restore context and re-raise same exception
        mp_globals_set(old_globals);
    d156:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    d158:	4618      	mov	r0, r3
    d15a:	f7fe fb17 	bl	b78c <mp_globals_set>
        mp_locals_set(old_locals);
    d15e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    d160:	4618      	mov	r0, r3
    d162:	f7fe faf7 	bl	b754 <mp_locals_set>
        nlr_jump(nlr.ret_val);
    d166:	6a3b      	ldr	r3, [r7, #32]
    d168:	4618      	mov	r0, r3
    d16a:	f7f3 f8b9 	bl	2e0 <nlr_jump>
    }
}
    d16e:	4618      	mov	r0, r3
    d170:	3760      	adds	r7, #96	; 0x60
    d172:	46bd      	mov	sp, r7
    d174:	bd80      	pop	{r7, pc}
    d176:	bf00      	nop

0000d178 <m_malloc_fail>:

#endif // MICROPY_ENABLE_COMPILER

NORETURN void m_malloc_fail(size_t num_bytes) {
    d178:	b580      	push	{r7, lr}
    d17a:	b082      	sub	sp, #8
    d17c:	af00      	add	r7, sp, #0
    d17e:	6078      	str	r0, [r7, #4]
    DEBUG_printf("memory allocation failed, allocating %u bytes\n", (uint)num_bytes);
    #if MICROPY_ENABLE_GC
    if (gc_is_locked()) {
    d180:	f7f3 fa66 	bl	650 <gc_is_locked>
    d184:	4603      	mov	r3, r0
    d186:	2b00      	cmp	r3, #0
    d188:	d003      	beq.n	d192 <m_malloc_fail+0x1a>
        mp_raise_msg(&mp_type_MemoryError, "memory allocation failed, heap is locked");
    d18a:	4906      	ldr	r1, [pc, #24]	; (d1a4 <m_malloc_fail+0x2c>)
    d18c:	4806      	ldr	r0, [pc, #24]	; (d1a8 <m_malloc_fail+0x30>)
    d18e:	f000 f80f 	bl	d1b0 <mp_raise_msg>
    }
    #endif
    nlr_raise(mp_obj_new_exception_msg_varg(&mp_type_MemoryError,
    d192:	687a      	ldr	r2, [r7, #4]
    d194:	4905      	ldr	r1, [pc, #20]	; (d1ac <m_malloc_fail+0x34>)
    d196:	4804      	ldr	r0, [pc, #16]	; (d1a8 <m_malloc_fail+0x30>)
    d198:	f002 fb78 	bl	f88c <mp_obj_new_exception_msg_varg>
    d19c:	4603      	mov	r3, r0
    d19e:	4618      	mov	r0, r3
    d1a0:	f7f3 f89e 	bl	2e0 <nlr_jump>
    d1a4:	000217a8 	.word	0x000217a8
    d1a8:	000224f4 	.word	0x000224f4
    d1ac:	000217d4 	.word	0x000217d4

0000d1b0 <mp_raise_msg>:
        "memory allocation failed, allocating %u bytes", (uint)num_bytes));
}

NORETURN void mp_raise_msg(const mp_obj_type_t *exc_type, const char *msg) {
    d1b0:	b580      	push	{r7, lr}
    d1b2:	b082      	sub	sp, #8
    d1b4:	af00      	add	r7, sp, #0
    d1b6:	6078      	str	r0, [r7, #4]
    d1b8:	6039      	str	r1, [r7, #0]
    if (msg == NULL) {
    d1ba:	683b      	ldr	r3, [r7, #0]
    d1bc:	2b00      	cmp	r3, #0
    d1be:	d106      	bne.n	d1ce <mp_raise_msg+0x1e>
        nlr_raise(mp_obj_new_exception(exc_type));
    d1c0:	6878      	ldr	r0, [r7, #4]
    d1c2:	f002 fabf 	bl	f744 <mp_obj_new_exception>
    d1c6:	4603      	mov	r3, r0
    d1c8:	4618      	mov	r0, r3
    d1ca:	f7f3 f889 	bl	2e0 <nlr_jump>
    } else {
        nlr_raise(mp_obj_new_exception_msg(exc_type, msg));
    d1ce:	6839      	ldr	r1, [r7, #0]
    d1d0:	6878      	ldr	r0, [r7, #4]
    d1d2:	f002 fafb 	bl	f7cc <mp_obj_new_exception_msg>
    d1d6:	4603      	mov	r3, r0
    d1d8:	4618      	mov	r0, r3
    d1da:	f7f3 f881 	bl	2e0 <nlr_jump>
    d1de:	bf00      	nop

0000d1e0 <mp_raise_ValueError>:
    }
}

NORETURN void mp_raise_ValueError(const char *msg) {
    d1e0:	b580      	push	{r7, lr}
    d1e2:	b082      	sub	sp, #8
    d1e4:	af00      	add	r7, sp, #0
    d1e6:	6078      	str	r0, [r7, #4]
    mp_raise_msg(&mp_type_ValueError, msg);
    d1e8:	6879      	ldr	r1, [r7, #4]
    d1ea:	4801      	ldr	r0, [pc, #4]	; (d1f0 <mp_raise_ValueError+0x10>)
    d1ec:	f7ff ffe0 	bl	d1b0 <mp_raise_msg>
    d1f0:	000226d4 	.word	0x000226d4

0000d1f4 <mp_raise_TypeError>:
}

NORETURN void mp_raise_TypeError(const char *msg) {
    d1f4:	b580      	push	{r7, lr}
    d1f6:	b082      	sub	sp, #8
    d1f8:	af00      	add	r7, sp, #0
    d1fa:	6078      	str	r0, [r7, #4]
    mp_raise_msg(&mp_type_TypeError, msg);
    d1fc:	6879      	ldr	r1, [r7, #4]
    d1fe:	4801      	ldr	r0, [pc, #4]	; (d204 <mp_raise_TypeError+0x10>)
    d200:	f7ff ffd6 	bl	d1b0 <mp_raise_msg>
    d204:	00022698 	.word	0x00022698

0000d208 <mp_raise_OSError>:
}

NORETURN void mp_raise_OSError(int errno_) {
    d208:	b580      	push	{r7, lr}
    d20a:	b082      	sub	sp, #8
    d20c:	af00      	add	r7, sp, #0
    d20e:	6078      	str	r0, [r7, #4]
    nlr_raise(mp_obj_new_exception_arg1(&mp_type_OSError, MP_OBJ_NEW_SMALL_INT(errno_)));
    d210:	687b      	ldr	r3, [r7, #4]
    d212:	005b      	lsls	r3, r3, #1
    d214:	f043 0301 	orr.w	r3, r3, #1
    d218:	4619      	mov	r1, r3
    d21a:	4803      	ldr	r0, [pc, #12]	; (d228 <mp_raise_OSError+0x20>)
    d21c:	f002 faa0 	bl	f760 <mp_obj_new_exception_arg1>
    d220:	4603      	mov	r3, r0
    d222:	4618      	mov	r0, r3
    d224:	f7f3 f85c 	bl	2e0 <nlr_jump>
    d228:	0002256c 	.word	0x0002256c

0000d22c <mp_raise_NotImplementedError>:
}

NORETURN void mp_raise_NotImplementedError(const char *msg) {
    d22c:	b580      	push	{r7, lr}
    d22e:	b082      	sub	sp, #8
    d230:	af00      	add	r7, sp, #0
    d232:	6078      	str	r0, [r7, #4]
    mp_raise_msg(&mp_type_NotImplementedError, msg);
    d234:	6879      	ldr	r1, [r7, #4]
    d236:	4801      	ldr	r0, [pc, #4]	; (d23c <mp_raise_NotImplementedError+0x10>)
    d238:	f7ff ffba 	bl	d1b0 <mp_raise_msg>
    d23c:	000225e4 	.word	0x000225e4

0000d240 <mp_call_function_1_protected>:
 * THE SOFTWARE.
 */

#include "py/runtime.h"

mp_obj_t mp_call_function_1_protected(mp_obj_t fun, mp_obj_t arg) {
    d240:	b580      	push	{r7, lr}
    d242:	b090      	sub	sp, #64	; 0x40
    d244:	af00      	add	r7, sp, #0
    d246:	6078      	str	r0, [r7, #4]
    d248:	6039      	str	r1, [r7, #0]
    nlr_buf_t nlr;
    if (nlr_push(&nlr) == 0) {
    d24a:	f107 030c 	add.w	r3, r7, #12
    d24e:	4618      	mov	r0, r3
    d250:	f7f3 f834 	bl	2bc <nlr_push>
    d254:	4603      	mov	r3, r0
    d256:	2b00      	cmp	r3, #0
    d258:	d108      	bne.n	d26c <mp_call_function_1_protected+0x2c>
        mp_obj_t ret = mp_call_function_1(fun, arg);
    d25a:	6839      	ldr	r1, [r7, #0]
    d25c:	6878      	ldr	r0, [r7, #4]
    d25e:	f7fe fedb 	bl	c018 <mp_call_function_1>
    d262:	63f8      	str	r0, [r7, #60]	; 0x3c
        nlr_pop();
    d264:	f7f3 f818 	bl	298 <nlr_pop>
        return ret;
    d268:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    d26a:	e005      	b.n	d278 <mp_call_function_1_protected+0x38>
    } else {
        mp_obj_print_exception(&mp_plat_print, MP_OBJ_FROM_PTR(nlr.ret_val));
    d26c:	693b      	ldr	r3, [r7, #16]
    d26e:	4619      	mov	r1, r3
    d270:	4803      	ldr	r0, [pc, #12]	; (d280 <mp_call_function_1_protected+0x40>)
    d272:	f000 fc8d 	bl	db90 <mp_obj_print_exception>
        return MP_OBJ_NULL;
    d276:	2300      	movs	r3, #0
    }
}
    d278:	4618      	mov	r0, r3
    d27a:	3740      	adds	r7, #64	; 0x40
    d27c:	46bd      	mov	sp, r7
    d27e:	bd80      	pop	{r7, pc}
    d280:	0001f75c 	.word	0x0001f75c

0000d284 <mp_call_function_2_protected>:

mp_obj_t mp_call_function_2_protected(mp_obj_t fun, mp_obj_t arg1, mp_obj_t arg2) {
    d284:	b580      	push	{r7, lr}
    d286:	b092      	sub	sp, #72	; 0x48
    d288:	af00      	add	r7, sp, #0
    d28a:	60f8      	str	r0, [r7, #12]
    d28c:	60b9      	str	r1, [r7, #8]
    d28e:	607a      	str	r2, [r7, #4]
    nlr_buf_t nlr;
    if (nlr_push(&nlr) == 0) {
    d290:	f107 0314 	add.w	r3, r7, #20
    d294:	4618      	mov	r0, r3
    d296:	f7f3 f811 	bl	2bc <nlr_push>
    d29a:	4603      	mov	r3, r0
    d29c:	2b00      	cmp	r3, #0
    d29e:	d109      	bne.n	d2b4 <mp_call_function_2_protected+0x30>
        mp_obj_t ret = mp_call_function_2(fun, arg1, arg2);
    d2a0:	687a      	ldr	r2, [r7, #4]
    d2a2:	68b9      	ldr	r1, [r7, #8]
    d2a4:	68f8      	ldr	r0, [r7, #12]
    d2a6:	f7fe fec7 	bl	c038 <mp_call_function_2>
    d2aa:	6478      	str	r0, [r7, #68]	; 0x44
        nlr_pop();
    d2ac:	f7f2 fff4 	bl	298 <nlr_pop>
        return ret;
    d2b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    d2b2:	e005      	b.n	d2c0 <mp_call_function_2_protected+0x3c>
    } else {
        mp_obj_print_exception(&mp_plat_print, MP_OBJ_FROM_PTR(nlr.ret_val));
    d2b4:	69bb      	ldr	r3, [r7, #24]
    d2b6:	4619      	mov	r1, r3
    d2b8:	4803      	ldr	r0, [pc, #12]	; (d2c8 <mp_call_function_2_protected+0x44>)
    d2ba:	f000 fc69 	bl	db90 <mp_obj_print_exception>
        return MP_OBJ_NULL;
    d2be:	2300      	movs	r3, #0
    }
}
    d2c0:	4618      	mov	r0, r3
    d2c2:	3748      	adds	r7, #72	; 0x48
    d2c4:	46bd      	mov	sp, r7
    d2c6:	bd80      	pop	{r7, pc}
    d2c8:	0001f75c 	.word	0x0001f75c

0000d2cc <mp_arg_check_num>:
#include <stdlib.h>
#include <assert.h>

#include "py/runtime.h"

void mp_arg_check_num(size_t n_args, size_t n_kw, size_t n_args_min, size_t n_args_max, bool takes_kw) {
    d2cc:	b580      	push	{r7, lr}
    d2ce:	b084      	sub	sp, #16
    d2d0:	af00      	add	r7, sp, #0
    d2d2:	60f8      	str	r0, [r7, #12]
    d2d4:	60b9      	str	r1, [r7, #8]
    d2d6:	607a      	str	r2, [r7, #4]
    d2d8:	603b      	str	r3, [r7, #0]
    // TODO maybe take the function name as an argument so we can print nicer error messages

    if (n_kw && !takes_kw) {
    d2da:	68bb      	ldr	r3, [r7, #8]
    d2dc:	2b00      	cmp	r3, #0
    d2de:	d007      	beq.n	d2f0 <mp_arg_check_num+0x24>
    d2e0:	7e3b      	ldrb	r3, [r7, #24]
    d2e2:	f083 0301 	eor.w	r3, r3, #1
    d2e6:	b2db      	uxtb	r3, r3
    d2e8:	2b00      	cmp	r3, #0
    d2ea:	d001      	beq.n	d2f0 <mp_arg_check_num+0x24>
        if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
            mp_arg_error_terse_mismatch();
    d2ec:	f000 f8e8 	bl	d4c0 <mp_arg_error_terse_mismatch>
        } else {
            mp_raise_TypeError("function does not take keyword arguments");
        }
    }

    if (n_args_min == n_args_max) {
    d2f0:	687a      	ldr	r2, [r7, #4]
    d2f2:	683b      	ldr	r3, [r7, #0]
    d2f4:	429a      	cmp	r2, r3
    d2f6:	d105      	bne.n	d304 <mp_arg_check_num+0x38>
        if (n_args != n_args_min) {
    d2f8:	68fa      	ldr	r2, [r7, #12]
    d2fa:	687b      	ldr	r3, [r7, #4]
    d2fc:	429a      	cmp	r2, r3
    d2fe:	d00d      	beq.n	d31c <mp_arg_check_num+0x50>
            if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
                mp_arg_error_terse_mismatch();
    d300:	f000 f8de 	bl	d4c0 <mp_arg_error_terse_mismatch>
                    "function takes %d positional arguments but %d were given",
                    n_args_min, n_args));
            }
        }
    } else {
        if (n_args < n_args_min) {
    d304:	68fa      	ldr	r2, [r7, #12]
    d306:	687b      	ldr	r3, [r7, #4]
    d308:	429a      	cmp	r2, r3
    d30a:	d201      	bcs.n	d310 <mp_arg_check_num+0x44>
            if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
                mp_arg_error_terse_mismatch();
    d30c:	f000 f8d8 	bl	d4c0 <mp_arg_error_terse_mismatch>
            } else {
                nlr_raise(mp_obj_new_exception_msg_varg(&mp_type_TypeError,
                    "function missing %d required positional arguments",
                    n_args_min - n_args));
            }
        } else if (n_args > n_args_max) {
    d310:	68fa      	ldr	r2, [r7, #12]
    d312:	683b      	ldr	r3, [r7, #0]
    d314:	429a      	cmp	r2, r3
    d316:	d901      	bls.n	d31c <mp_arg_check_num+0x50>
            if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
                mp_arg_error_terse_mismatch();
    d318:	f000 f8d2 	bl	d4c0 <mp_arg_error_terse_mismatch>
                    "function expected at most %d arguments, got %d",
                    n_args_max, n_args));
            }
        }
    }
}
    d31c:	bf00      	nop
    d31e:	3710      	adds	r7, #16
    d320:	46bd      	mov	sp, r7
    d322:	bd80      	pop	{r7, pc}

0000d324 <mp_arg_parse_all>:

void mp_arg_parse_all(size_t n_pos, const mp_obj_t *pos, mp_map_t *kws, size_t n_allowed, const mp_arg_t *allowed, mp_arg_val_t *out_vals) {
    d324:	b590      	push	{r4, r7, lr}
    d326:	b08b      	sub	sp, #44	; 0x2c
    d328:	af00      	add	r7, sp, #0
    d32a:	60f8      	str	r0, [r7, #12]
    d32c:	60b9      	str	r1, [r7, #8]
    d32e:	607a      	str	r2, [r7, #4]
    d330:	603b      	str	r3, [r7, #0]
    size_t pos_found = 0, kws_found = 0;
    d332:	2300      	movs	r3, #0
    d334:	627b      	str	r3, [r7, #36]	; 0x24
    d336:	2300      	movs	r3, #0
    d338:	623b      	str	r3, [r7, #32]
    for (size_t i = 0; i < n_allowed; i++) {
    d33a:	2300      	movs	r3, #0
    d33c:	61fb      	str	r3, [r7, #28]
    d33e:	e07e      	b.n	d43e <mp_arg_parse_all+0x11a>
        mp_obj_t given_arg;
        if (i < n_pos) {
    d340:	69fa      	ldr	r2, [r7, #28]
    d342:	68fb      	ldr	r3, [r7, #12]
    d344:	429a      	cmp	r2, r3
    d346:	d212      	bcs.n	d36e <mp_arg_parse_all+0x4a>
            if (allowed[i].flags & MP_ARG_KW_ONLY) {
    d348:	69fb      	ldr	r3, [r7, #28]
    d34a:	00db      	lsls	r3, r3, #3
    d34c:	6bba      	ldr	r2, [r7, #56]	; 0x38
    d34e:	4413      	add	r3, r2
    d350:	885b      	ldrh	r3, [r3, #2]
    d352:	f403 7300 	and.w	r3, r3, #512	; 0x200
    d356:	2b00      	cmp	r3, #0
    d358:	d17b      	bne.n	d452 <mp_arg_parse_all+0x12e>
                goto extra_positional;
            }
            pos_found++;
    d35a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    d35c:	3301      	adds	r3, #1
    d35e:	627b      	str	r3, [r7, #36]	; 0x24
            given_arg = pos[i];
    d360:	69fb      	ldr	r3, [r7, #28]
    d362:	009b      	lsls	r3, r3, #2
    d364:	68ba      	ldr	r2, [r7, #8]
    d366:	4413      	add	r3, r2
    d368:	681b      	ldr	r3, [r3, #0]
    d36a:	61bb      	str	r3, [r7, #24]
    d36c:	e02c      	b.n	d3c8 <mp_arg_parse_all+0xa4>
        } else {
            mp_map_elem_t *kw = mp_map_lookup(kws, MP_OBJ_NEW_QSTR(allowed[i].qst), MP_MAP_LOOKUP);
    d36e:	69fb      	ldr	r3, [r7, #28]
    d370:	00db      	lsls	r3, r3, #3
    d372:	6bba      	ldr	r2, [r7, #56]	; 0x38
    d374:	4413      	add	r3, r2
    d376:	881b      	ldrh	r3, [r3, #0]
    d378:	009b      	lsls	r3, r3, #2
    d37a:	f043 0302 	orr.w	r3, r3, #2
    d37e:	2200      	movs	r2, #0
    d380:	4619      	mov	r1, r3
    d382:	6878      	ldr	r0, [r7, #4]
    d384:	f000 f9ec 	bl	d760 <mp_map_lookup>
    d388:	6178      	str	r0, [r7, #20]
            if (kw == NULL) {
    d38a:	697b      	ldr	r3, [r7, #20]
    d38c:	2b00      	cmp	r3, #0
    d38e:	d115      	bne.n	d3bc <mp_arg_parse_all+0x98>
                if (allowed[i].flags & MP_ARG_REQUIRED) {
    d390:	69fb      	ldr	r3, [r7, #28]
    d392:	00db      	lsls	r3, r3, #3
    d394:	6bba      	ldr	r2, [r7, #56]	; 0x38
    d396:	4413      	add	r3, r2
    d398:	885b      	ldrh	r3, [r3, #2]
    d39a:	f403 7380 	and.w	r3, r3, #256	; 0x100
    d39e:	2b00      	cmp	r3, #0
    d3a0:	d001      	beq.n	d3a6 <mp_arg_parse_all+0x82>
                    if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
                        mp_arg_error_terse_mismatch();
    d3a2:	f000 f88d 	bl	d4c0 <mp_arg_error_terse_mismatch>
                    } else {
                        nlr_raise(mp_obj_new_exception_msg_varg(&mp_type_TypeError,
                            "'%q' argument required", allowed[i].qst));
                    }
                }
                out_vals[i] = allowed[i].defval;
    d3a6:	69fb      	ldr	r3, [r7, #28]
    d3a8:	009b      	lsls	r3, r3, #2
    d3aa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    d3ac:	4413      	add	r3, r2
    d3ae:	69fa      	ldr	r2, [r7, #28]
    d3b0:	00d2      	lsls	r2, r2, #3
    d3b2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
    d3b4:	440a      	add	r2, r1
    d3b6:	6852      	ldr	r2, [r2, #4]
    d3b8:	601a      	str	r2, [r3, #0]
                continue;
    d3ba:	e03d      	b.n	d438 <mp_arg_parse_all+0x114>
            } else {
                kws_found++;
    d3bc:	6a3b      	ldr	r3, [r7, #32]
    d3be:	3301      	adds	r3, #1
    d3c0:	623b      	str	r3, [r7, #32]
                given_arg = kw->value;
    d3c2:	697b      	ldr	r3, [r7, #20]
    d3c4:	685b      	ldr	r3, [r3, #4]
    d3c6:	61bb      	str	r3, [r7, #24]
            }
        }
        if ((allowed[i].flags & MP_ARG_KIND_MASK) == MP_ARG_BOOL) {
    d3c8:	69fb      	ldr	r3, [r7, #28]
    d3ca:	00db      	lsls	r3, r3, #3
    d3cc:	6bba      	ldr	r2, [r7, #56]	; 0x38
    d3ce:	4413      	add	r3, r2
    d3d0:	885b      	ldrh	r3, [r3, #2]
    d3d2:	b2db      	uxtb	r3, r3
    d3d4:	2b01      	cmp	r3, #1
    d3d6:	d109      	bne.n	d3ec <mp_arg_parse_all+0xc8>
            out_vals[i].u_bool = mp_obj_is_true(given_arg);
    d3d8:	69fb      	ldr	r3, [r7, #28]
    d3da:	009b      	lsls	r3, r3, #2
    d3dc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    d3de:	18d4      	adds	r4, r2, r3
    d3e0:	69b8      	ldr	r0, [r7, #24]
    d3e2:	f000 fc45 	bl	dc70 <mp_obj_is_true>
    d3e6:	4603      	mov	r3, r0
    d3e8:	7023      	strb	r3, [r4, #0]
    d3ea:	e025      	b.n	d438 <mp_arg_parse_all+0x114>
        } else if ((allowed[i].flags & MP_ARG_KIND_MASK) == MP_ARG_INT) {
    d3ec:	69fb      	ldr	r3, [r7, #28]
    d3ee:	00db      	lsls	r3, r3, #3
    d3f0:	6bba      	ldr	r2, [r7, #56]	; 0x38
    d3f2:	4413      	add	r3, r2
    d3f4:	885b      	ldrh	r3, [r3, #2]
    d3f6:	b2db      	uxtb	r3, r3
    d3f8:	2b02      	cmp	r3, #2
    d3fa:	d109      	bne.n	d410 <mp_arg_parse_all+0xec>
            out_vals[i].u_int = mp_obj_get_int(given_arg);
    d3fc:	69fb      	ldr	r3, [r7, #28]
    d3fe:	009b      	lsls	r3, r3, #2
    d400:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    d402:	18d4      	adds	r4, r2, r3
    d404:	69b8      	ldr	r0, [r7, #24]
    d406:	f000 fd33 	bl	de70 <mp_obj_get_int>
    d40a:	4603      	mov	r3, r0
    d40c:	6023      	str	r3, [r4, #0]
    d40e:	e013      	b.n	d438 <mp_arg_parse_all+0x114>
        } else {
            assert((allowed[i].flags & MP_ARG_KIND_MASK) == MP_ARG_OBJ);
    d410:	69fb      	ldr	r3, [r7, #28]
    d412:	00db      	lsls	r3, r3, #3
    d414:	6bba      	ldr	r2, [r7, #56]	; 0x38
    d416:	4413      	add	r3, r2
    d418:	885b      	ldrh	r3, [r3, #2]
    d41a:	b2db      	uxtb	r3, r3
    d41c:	2b03      	cmp	r3, #3
    d41e:	d005      	beq.n	d42c <mp_arg_parse_all+0x108>
    d420:	4b14      	ldr	r3, [pc, #80]	; (d474 <mp_arg_parse_all+0x150>)
    d422:	4a15      	ldr	r2, [pc, #84]	; (d478 <mp_arg_parse_all+0x154>)
    d424:	216b      	movs	r1, #107	; 0x6b
    d426:	4815      	ldr	r0, [pc, #84]	; (d47c <mp_arg_parse_all+0x158>)
    d428:	f00e f952 	bl	1b6d0 <__assert_func>
            out_vals[i].u_obj = given_arg;
    d42c:	69fb      	ldr	r3, [r7, #28]
    d42e:	009b      	lsls	r3, r3, #2
    d430:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    d432:	4413      	add	r3, r2
    d434:	69ba      	ldr	r2, [r7, #24]
    d436:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < n_allowed; i++) {
    d438:	69fb      	ldr	r3, [r7, #28]
    d43a:	3301      	adds	r3, #1
    d43c:	61fb      	str	r3, [r7, #28]
    d43e:	69fa      	ldr	r2, [r7, #28]
    d440:	683b      	ldr	r3, [r7, #0]
    d442:	429a      	cmp	r2, r3
    d444:	f4ff af7c 	bcc.w	d340 <mp_arg_parse_all+0x1c>
        }
    }
    if (pos_found < n_pos) {
    d448:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    d44a:	68fb      	ldr	r3, [r7, #12]
    d44c:	429a      	cmp	r2, r3
    d44e:	d203      	bcs.n	d458 <mp_arg_parse_all+0x134>
    d450:	e000      	b.n	d454 <mp_arg_parse_all+0x130>
                goto extra_positional;
    d452:	bf00      	nop
        extra_positional:
        if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
            mp_arg_error_terse_mismatch();
    d454:	f000 f834 	bl	d4c0 <mp_arg_error_terse_mismatch>
        } else {
            // TODO better error message
            mp_raise_TypeError("extra positional arguments given");
        }
    }
    if (kws_found < kws->used) {
    d458:	687b      	ldr	r3, [r7, #4]
    d45a:	681b      	ldr	r3, [r3, #0]
    d45c:	f3c3 03dc 	ubfx	r3, r3, #3, #29
    d460:	461a      	mov	r2, r3
    d462:	6a3b      	ldr	r3, [r7, #32]
    d464:	429a      	cmp	r2, r3
    d466:	d901      	bls.n	d46c <mp_arg_parse_all+0x148>
        if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
            mp_arg_error_terse_mismatch();
    d468:	f000 f82a 	bl	d4c0 <mp_arg_error_terse_mismatch>
        } else {
            // TODO better error message
            mp_raise_TypeError("extra keyword arguments given");
        }
    }
}
    d46c:	bf00      	nop
    d46e:	372c      	adds	r7, #44	; 0x2c
    d470:	46bd      	mov	sp, r7
    d472:	bd90      	pop	{r4, r7, pc}
    d474:	00021860 	.word	0x00021860
    d478:	000218c4 	.word	0x000218c4
    d47c:	00021894 	.word	0x00021894

0000d480 <mp_arg_parse_all_kw_array>:

void mp_arg_parse_all_kw_array(size_t n_pos, size_t n_kw, const mp_obj_t *args, size_t n_allowed, const mp_arg_t *allowed, mp_arg_val_t *out_vals) {
    d480:	b580      	push	{r7, lr}
    d482:	b08a      	sub	sp, #40	; 0x28
    d484:	af02      	add	r7, sp, #8
    d486:	60f8      	str	r0, [r7, #12]
    d488:	60b9      	str	r1, [r7, #8]
    d48a:	607a      	str	r2, [r7, #4]
    d48c:	603b      	str	r3, [r7, #0]
    mp_map_t kw_args;
    mp_map_init_fixed_table(&kw_args, n_kw, args + n_pos);
    d48e:	68fb      	ldr	r3, [r7, #12]
    d490:	009b      	lsls	r3, r3, #2
    d492:	687a      	ldr	r2, [r7, #4]
    d494:	441a      	add	r2, r3
    d496:	f107 0314 	add.w	r3, r7, #20
    d49a:	68b9      	ldr	r1, [r7, #8]
    d49c:	4618      	mov	r0, r3
    d49e:	f000 f897 	bl	d5d0 <mp_map_init_fixed_table>
    mp_arg_parse_all(n_pos, args, &kw_args, n_allowed, allowed, out_vals);
    d4a2:	f107 0214 	add.w	r2, r7, #20
    d4a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    d4a8:	9301      	str	r3, [sp, #4]
    d4aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
    d4ac:	9300      	str	r3, [sp, #0]
    d4ae:	683b      	ldr	r3, [r7, #0]
    d4b0:	6879      	ldr	r1, [r7, #4]
    d4b2:	68f8      	ldr	r0, [r7, #12]
    d4b4:	f7ff ff36 	bl	d324 <mp_arg_parse_all>
}
    d4b8:	bf00      	nop
    d4ba:	3720      	adds	r7, #32
    d4bc:	46bd      	mov	sp, r7
    d4be:	bd80      	pop	{r7, pc}

0000d4c0 <mp_arg_error_terse_mismatch>:

NORETURN void mp_arg_error_terse_mismatch(void) {
    d4c0:	b580      	push	{r7, lr}
    d4c2:	af00      	add	r7, sp, #0
    mp_raise_TypeError("argument num/types mismatch");
    d4c4:	4801      	ldr	r0, [pc, #4]	; (d4cc <mp_arg_error_terse_mismatch+0xc>)
    d4c6:	f7ff fe95 	bl	d1f4 <mp_raise_TypeError>
    d4ca:	bf00      	nop
    d4cc:	000218a8 	.word	0x000218a8

0000d4d0 <MP_OBJ_IS_QSTR>:
    { return ((((mp_int_t)(o)) & 3) == 2); }
    d4d0:	b480      	push	{r7}
    d4d2:	b083      	sub	sp, #12
    d4d4:	af00      	add	r7, sp, #0
    d4d6:	6078      	str	r0, [r7, #4]
    d4d8:	687b      	ldr	r3, [r7, #4]
    d4da:	f003 0303 	and.w	r3, r3, #3
    d4de:	2b02      	cmp	r3, #2
    d4e0:	bf0c      	ite	eq
    d4e2:	2301      	moveq	r3, #1
    d4e4:	2300      	movne	r3, #0
    d4e6:	b2db      	uxtb	r3, r3
    d4e8:	4618      	mov	r0, r3
    d4ea:	370c      	adds	r7, #12
    d4ec:	46bd      	mov	sp, r7
    d4ee:	f85d 7b04 	ldr.w	r7, [sp], #4
    d4f2:	4770      	bx	lr

0000d4f4 <MP_OBJ_IS_OBJ>:
    { return ((((mp_int_t)(o)) & 3) == 0); }
    d4f4:	b480      	push	{r7}
    d4f6:	b083      	sub	sp, #12
    d4f8:	af00      	add	r7, sp, #0
    d4fa:	6078      	str	r0, [r7, #4]
    d4fc:	687b      	ldr	r3, [r7, #4]
    d4fe:	f003 0303 	and.w	r3, r3, #3
    d502:	2b00      	cmp	r3, #0
    d504:	bf0c      	ite	eq
    d506:	2301      	moveq	r3, #1
    d508:	2300      	movne	r3, #0
    d50a:	b2db      	uxtb	r3, r3
    d50c:	4618      	mov	r0, r3
    d50e:	370c      	adds	r7, #12
    d510:	46bd      	mov	sp, r7
    d512:	f85d 7b04 	ldr.w	r7, [sp], #4
    d516:	4770      	bx	lr

0000d518 <get_hash_alloc_greater_or_equal_to>:
    17, 23, 29, 37, 47, 59, 73, // *1.25
    97, 127, 167, 223, 293, 389, 521, 691, 919, 1223, 1627, 2161, // *1.33
    3229, 4831, 7243, 10861, 16273, 24407, 36607, 54907, // *1.5
};

STATIC size_t get_hash_alloc_greater_or_equal_to(size_t x) {
    d518:	b480      	push	{r7}
    d51a:	b085      	sub	sp, #20
    d51c:	af00      	add	r7, sp, #0
    d51e:	6078      	str	r0, [r7, #4]
    for (size_t i = 0; i < MP_ARRAY_SIZE(hash_allocation_sizes); i++) {
    d520:	2300      	movs	r3, #0
    d522:	60fb      	str	r3, [r7, #12]
    d524:	e00f      	b.n	d546 <get_hash_alloc_greater_or_equal_to+0x2e>
        if (hash_allocation_sizes[i] >= x) {
    d526:	4a0f      	ldr	r2, [pc, #60]	; (d564 <get_hash_alloc_greater_or_equal_to+0x4c>)
    d528:	68fb      	ldr	r3, [r7, #12]
    d52a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
    d52e:	461a      	mov	r2, r3
    d530:	687b      	ldr	r3, [r7, #4]
    d532:	429a      	cmp	r2, r3
    d534:	d304      	bcc.n	d540 <get_hash_alloc_greater_or_equal_to+0x28>
            return hash_allocation_sizes[i];
    d536:	4a0b      	ldr	r2, [pc, #44]	; (d564 <get_hash_alloc_greater_or_equal_to+0x4c>)
    d538:	68fb      	ldr	r3, [r7, #12]
    d53a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
    d53e:	e00b      	b.n	d558 <get_hash_alloc_greater_or_equal_to+0x40>
    for (size_t i = 0; i < MP_ARRAY_SIZE(hash_allocation_sizes); i++) {
    d540:	68fb      	ldr	r3, [r7, #12]
    d542:	3301      	adds	r3, #1
    d544:	60fb      	str	r3, [r7, #12]
    d546:	68fb      	ldr	r3, [r7, #12]
    d548:	2b21      	cmp	r3, #33	; 0x21
    d54a:	d9ec      	bls.n	d526 <get_hash_alloc_greater_or_equal_to+0xe>
        }
    }
    // ran out of primes in the table!
    // return something sensible, at least make it odd
    return (x + x / 2) | 1;
    d54c:	687b      	ldr	r3, [r7, #4]
    d54e:	085a      	lsrs	r2, r3, #1
    d550:	687b      	ldr	r3, [r7, #4]
    d552:	4413      	add	r3, r2
    d554:	f043 0301 	orr.w	r3, r3, #1
}
    d558:	4618      	mov	r0, r3
    d55a:	3714      	adds	r7, #20
    d55c:	46bd      	mov	sp, r7
    d55e:	f85d 7b04 	ldr.w	r7, [sp], #4
    d562:	4770      	bx	lr
    d564:	000218e4 	.word	0x000218e4

0000d568 <mp_map_init>:

/******************************************************************************/
/* map                                                                        */

void mp_map_init(mp_map_t *map, size_t n) {
    d568:	b580      	push	{r7, lr}
    d56a:	b082      	sub	sp, #8
    d56c:	af00      	add	r7, sp, #0
    d56e:	6078      	str	r0, [r7, #4]
    d570:	6039      	str	r1, [r7, #0]
    if (n == 0) {
    d572:	683b      	ldr	r3, [r7, #0]
    d574:	2b00      	cmp	r3, #0
    d576:	d106      	bne.n	d586 <mp_map_init+0x1e>
        map->alloc = 0;
    d578:	687b      	ldr	r3, [r7, #4]
    d57a:	2200      	movs	r2, #0
    d57c:	605a      	str	r2, [r3, #4]
        map->table = NULL;
    d57e:	687b      	ldr	r3, [r7, #4]
    d580:	2200      	movs	r2, #0
    d582:	609a      	str	r2, [r3, #8]
    d584:	e00b      	b.n	d59e <mp_map_init+0x36>
    } else {
        map->alloc = n;
    d586:	687b      	ldr	r3, [r7, #4]
    d588:	683a      	ldr	r2, [r7, #0]
    d58a:	605a      	str	r2, [r3, #4]
        map->table = m_new0(mp_map_elem_t, map->alloc);
    d58c:	687b      	ldr	r3, [r7, #4]
    d58e:	685b      	ldr	r3, [r3, #4]
    d590:	00db      	lsls	r3, r3, #3
    d592:	4618      	mov	r0, r3
    d594:	f7f2 ff00 	bl	398 <m_malloc0>
    d598:	4602      	mov	r2, r0
    d59a:	687b      	ldr	r3, [r7, #4]
    d59c:	609a      	str	r2, [r3, #8]
    }
    map->used = 0;
    d59e:	687a      	ldr	r2, [r7, #4]
    d5a0:	6813      	ldr	r3, [r2, #0]
    d5a2:	f36f 03df 	bfc	r3, #3, #29
    d5a6:	6013      	str	r3, [r2, #0]
    map->all_keys_are_qstrs = 1;
    d5a8:	687a      	ldr	r2, [r7, #4]
    d5aa:	7813      	ldrb	r3, [r2, #0]
    d5ac:	f043 0301 	orr.w	r3, r3, #1
    d5b0:	7013      	strb	r3, [r2, #0]
    map->is_fixed = 0;
    d5b2:	687a      	ldr	r2, [r7, #4]
    d5b4:	7813      	ldrb	r3, [r2, #0]
    d5b6:	f36f 0341 	bfc	r3, #1, #1
    d5ba:	7013      	strb	r3, [r2, #0]
    map->is_ordered = 0;
    d5bc:	687a      	ldr	r2, [r7, #4]
    d5be:	7813      	ldrb	r3, [r2, #0]
    d5c0:	f36f 0382 	bfc	r3, #2, #1
    d5c4:	7013      	strb	r3, [r2, #0]
}
    d5c6:	bf00      	nop
    d5c8:	3708      	adds	r7, #8
    d5ca:	46bd      	mov	sp, r7
    d5cc:	bd80      	pop	{r7, pc}
    d5ce:	bf00      	nop

0000d5d0 <mp_map_init_fixed_table>:

void mp_map_init_fixed_table(mp_map_t *map, size_t n, const mp_obj_t *table) {
    d5d0:	b480      	push	{r7}
    d5d2:	b085      	sub	sp, #20
    d5d4:	af00      	add	r7, sp, #0
    d5d6:	60f8      	str	r0, [r7, #12]
    d5d8:	60b9      	str	r1, [r7, #8]
    d5da:	607a      	str	r2, [r7, #4]
    map->alloc = n;
    d5dc:	68fb      	ldr	r3, [r7, #12]
    d5de:	68ba      	ldr	r2, [r7, #8]
    d5e0:	605a      	str	r2, [r3, #4]
    map->used = n;
    d5e2:	68bb      	ldr	r3, [r7, #8]
    d5e4:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
    d5e8:	68fa      	ldr	r2, [r7, #12]
    d5ea:	6813      	ldr	r3, [r2, #0]
    d5ec:	f361 03df 	bfi	r3, r1, #3, #29
    d5f0:	6013      	str	r3, [r2, #0]
    map->all_keys_are_qstrs = 1;
    d5f2:	68fa      	ldr	r2, [r7, #12]
    d5f4:	7813      	ldrb	r3, [r2, #0]
    d5f6:	f043 0301 	orr.w	r3, r3, #1
    d5fa:	7013      	strb	r3, [r2, #0]
    map->is_fixed = 1;
    d5fc:	68fa      	ldr	r2, [r7, #12]
    d5fe:	7813      	ldrb	r3, [r2, #0]
    d600:	f043 0302 	orr.w	r3, r3, #2
    d604:	7013      	strb	r3, [r2, #0]
    map->is_ordered = 1;
    d606:	68fa      	ldr	r2, [r7, #12]
    d608:	7813      	ldrb	r3, [r2, #0]
    d60a:	f043 0304 	orr.w	r3, r3, #4
    d60e:	7013      	strb	r3, [r2, #0]
    map->table = (mp_map_elem_t*)table;
    d610:	68fb      	ldr	r3, [r7, #12]
    d612:	687a      	ldr	r2, [r7, #4]
    d614:	609a      	str	r2, [r3, #8]
}
    d616:	bf00      	nop
    d618:	3714      	adds	r7, #20
    d61a:	46bd      	mov	sp, r7
    d61c:	f85d 7b04 	ldr.w	r7, [sp], #4
    d620:	4770      	bx	lr
    d622:	bf00      	nop

0000d624 <mp_map_deinit>:

// Differentiate from mp_map_clear() - semantics is different
void mp_map_deinit(mp_map_t *map) {
    d624:	b580      	push	{r7, lr}
    d626:	b082      	sub	sp, #8
    d628:	af00      	add	r7, sp, #0
    d62a:	6078      	str	r0, [r7, #4]
    if (!map->is_fixed) {
    d62c:	687b      	ldr	r3, [r7, #4]
    d62e:	781b      	ldrb	r3, [r3, #0]
    d630:	f003 0302 	and.w	r3, r3, #2
    d634:	b2db      	uxtb	r3, r3
    d636:	2b00      	cmp	r3, #0
    d638:	d104      	bne.n	d644 <mp_map_deinit+0x20>
        m_del(mp_map_elem_t, map->table, map->alloc);
    d63a:	687b      	ldr	r3, [r7, #4]
    d63c:	689b      	ldr	r3, [r3, #8]
    d63e:	4618      	mov	r0, r3
    d640:	f7f2 fee6 	bl	410 <m_free>
    }
    map->used = map->alloc = 0;
    d644:	687b      	ldr	r3, [r7, #4]
    d646:	2200      	movs	r2, #0
    d648:	605a      	str	r2, [r3, #4]
    d64a:	687a      	ldr	r2, [r7, #4]
    d64c:	6813      	ldr	r3, [r2, #0]
    d64e:	f36f 03df 	bfc	r3, #3, #29
    d652:	6013      	str	r3, [r2, #0]
}
    d654:	bf00      	nop
    d656:	3708      	adds	r7, #8
    d658:	46bd      	mov	sp, r7
    d65a:	bd80      	pop	{r7, pc}

0000d65c <mp_map_clear>:

void mp_map_clear(mp_map_t *map) {
    d65c:	b580      	push	{r7, lr}
    d65e:	b082      	sub	sp, #8
    d660:	af00      	add	r7, sp, #0
    d662:	6078      	str	r0, [r7, #4]
    if (!map->is_fixed) {
    d664:	687b      	ldr	r3, [r7, #4]
    d666:	781b      	ldrb	r3, [r3, #0]
    d668:	f003 0302 	and.w	r3, r3, #2
    d66c:	b2db      	uxtb	r3, r3
    d66e:	2b00      	cmp	r3, #0
    d670:	d104      	bne.n	d67c <mp_map_clear+0x20>
        m_del(mp_map_elem_t, map->table, map->alloc);
    d672:	687b      	ldr	r3, [r7, #4]
    d674:	689b      	ldr	r3, [r3, #8]
    d676:	4618      	mov	r0, r3
    d678:	f7f2 feca 	bl	410 <m_free>
    }
    map->alloc = 0;
    d67c:	687b      	ldr	r3, [r7, #4]
    d67e:	2200      	movs	r2, #0
    d680:	605a      	str	r2, [r3, #4]
    map->used = 0;
    d682:	687a      	ldr	r2, [r7, #4]
    d684:	6813      	ldr	r3, [r2, #0]
    d686:	f36f 03df 	bfc	r3, #3, #29
    d68a:	6013      	str	r3, [r2, #0]
    map->all_keys_are_qstrs = 1;
    d68c:	687a      	ldr	r2, [r7, #4]
    d68e:	7813      	ldrb	r3, [r2, #0]
    d690:	f043 0301 	orr.w	r3, r3, #1
    d694:	7013      	strb	r3, [r2, #0]
    map->is_fixed = 0;
    d696:	687a      	ldr	r2, [r7, #4]
    d698:	7813      	ldrb	r3, [r2, #0]
    d69a:	f36f 0341 	bfc	r3, #1, #1
    d69e:	7013      	strb	r3, [r2, #0]
    map->table = NULL;
    d6a0:	687b      	ldr	r3, [r7, #4]
    d6a2:	2200      	movs	r2, #0
    d6a4:	609a      	str	r2, [r3, #8]
}
    d6a6:	bf00      	nop
    d6a8:	3708      	adds	r7, #8
    d6aa:	46bd      	mov	sp, r7
    d6ac:	bd80      	pop	{r7, pc}
    d6ae:	bf00      	nop

0000d6b0 <mp_map_rehash>:

STATIC void mp_map_rehash(mp_map_t *map) {
    d6b0:	b580      	push	{r7, lr}
    d6b2:	b088      	sub	sp, #32
    d6b4:	af00      	add	r7, sp, #0
    d6b6:	6078      	str	r0, [r7, #4]
    size_t old_alloc = map->alloc;
    d6b8:	687b      	ldr	r3, [r7, #4]
    d6ba:	685b      	ldr	r3, [r3, #4]
    d6bc:	61bb      	str	r3, [r7, #24]
    size_t new_alloc = get_hash_alloc_greater_or_equal_to(map->alloc + 1);
    d6be:	687b      	ldr	r3, [r7, #4]
    d6c0:	685b      	ldr	r3, [r3, #4]
    d6c2:	3301      	adds	r3, #1
    d6c4:	4618      	mov	r0, r3
    d6c6:	f7ff ff27 	bl	d518 <get_hash_alloc_greater_or_equal_to>
    d6ca:	6178      	str	r0, [r7, #20]
    DEBUG_printf("mp_map_rehash(%p): " UINT_FMT " -> " UINT_FMT "\n", map, old_alloc, new_alloc);
    mp_map_elem_t *old_table = map->table;
    d6cc:	687b      	ldr	r3, [r7, #4]
    d6ce:	689b      	ldr	r3, [r3, #8]
    d6d0:	613b      	str	r3, [r7, #16]
    mp_map_elem_t *new_table = m_new0(mp_map_elem_t, new_alloc);
    d6d2:	697b      	ldr	r3, [r7, #20]
    d6d4:	00db      	lsls	r3, r3, #3
    d6d6:	4618      	mov	r0, r3
    d6d8:	f7f2 fe5e 	bl	398 <m_malloc0>
    d6dc:	60f8      	str	r0, [r7, #12]
    // If we reach this point, table resizing succeeded, now we can edit the old map.
    map->alloc = new_alloc;
    d6de:	687b      	ldr	r3, [r7, #4]
    d6e0:	697a      	ldr	r2, [r7, #20]
    d6e2:	605a      	str	r2, [r3, #4]
    map->used = 0;
    d6e4:	687a      	ldr	r2, [r7, #4]
    d6e6:	6813      	ldr	r3, [r2, #0]
    d6e8:	f36f 03df 	bfc	r3, #3, #29
    d6ec:	6013      	str	r3, [r2, #0]
    map->all_keys_are_qstrs = 1;
    d6ee:	687a      	ldr	r2, [r7, #4]
    d6f0:	7813      	ldrb	r3, [r2, #0]
    d6f2:	f043 0301 	orr.w	r3, r3, #1
    d6f6:	7013      	strb	r3, [r2, #0]
    map->table = new_table;
    d6f8:	687b      	ldr	r3, [r7, #4]
    d6fa:	68fa      	ldr	r2, [r7, #12]
    d6fc:	609a      	str	r2, [r3, #8]
    for (size_t i = 0; i < old_alloc; i++) {
    d6fe:	2300      	movs	r3, #0
    d700:	61fb      	str	r3, [r7, #28]
    d702:	e021      	b.n	d748 <mp_map_rehash+0x98>
        if (old_table[i].key != MP_OBJ_NULL && old_table[i].key != MP_OBJ_SENTINEL) {
    d704:	69fb      	ldr	r3, [r7, #28]
    d706:	00db      	lsls	r3, r3, #3
    d708:	693a      	ldr	r2, [r7, #16]
    d70a:	4413      	add	r3, r2
    d70c:	681b      	ldr	r3, [r3, #0]
    d70e:	2b00      	cmp	r3, #0
    d710:	d017      	beq.n	d742 <mp_map_rehash+0x92>
    d712:	69fb      	ldr	r3, [r7, #28]
    d714:	00db      	lsls	r3, r3, #3
    d716:	693a      	ldr	r2, [r7, #16]
    d718:	4413      	add	r3, r2
    d71a:	681b      	ldr	r3, [r3, #0]
    d71c:	2b08      	cmp	r3, #8
    d71e:	d010      	beq.n	d742 <mp_map_rehash+0x92>
            mp_map_lookup(map, old_table[i].key, MP_MAP_LOOKUP_ADD_IF_NOT_FOUND)->value = old_table[i].value;
    d720:	69fb      	ldr	r3, [r7, #28]
    d722:	00db      	lsls	r3, r3, #3
    d724:	693a      	ldr	r2, [r7, #16]
    d726:	4413      	add	r3, r2
    d728:	681b      	ldr	r3, [r3, #0]
    d72a:	2201      	movs	r2, #1
    d72c:	4619      	mov	r1, r3
    d72e:	6878      	ldr	r0, [r7, #4]
    d730:	f000 f816 	bl	d760 <mp_map_lookup>
    d734:	4601      	mov	r1, r0
    d736:	69fb      	ldr	r3, [r7, #28]
    d738:	00db      	lsls	r3, r3, #3
    d73a:	693a      	ldr	r2, [r7, #16]
    d73c:	4413      	add	r3, r2
    d73e:	685b      	ldr	r3, [r3, #4]
    d740:	604b      	str	r3, [r1, #4]
    for (size_t i = 0; i < old_alloc; i++) {
    d742:	69fb      	ldr	r3, [r7, #28]
    d744:	3301      	adds	r3, #1
    d746:	61fb      	str	r3, [r7, #28]
    d748:	69fa      	ldr	r2, [r7, #28]
    d74a:	69bb      	ldr	r3, [r7, #24]
    d74c:	429a      	cmp	r2, r3
    d74e:	d3d9      	bcc.n	d704 <mp_map_rehash+0x54>
        }
    }
    m_del(mp_map_elem_t, old_table, old_alloc);
    d750:	6938      	ldr	r0, [r7, #16]
    d752:	f7f2 fe5d 	bl	410 <m_free>
}
    d756:	bf00      	nop
    d758:	3720      	adds	r7, #32
    d75a:	46bd      	mov	sp, r7
    d75c:	bd80      	pop	{r7, pc}
    d75e:	bf00      	nop

0000d760 <mp_map_lookup>:
//  - returns NULL if not found, else the slot it was found in with key,value non-null
// MP_MAP_LOOKUP_ADD_IF_NOT_FOUND behaviour:
//  - returns slot, with key non-null and value=MP_OBJ_NULL if it was added
// MP_MAP_LOOKUP_REMOVE_IF_FOUND behaviour:
//  - returns NULL if not found, else the slot if was found in with key null and value non-null
mp_map_elem_t *mp_map_lookup(mp_map_t *map, mp_obj_t index, mp_map_lookup_kind_t lookup_kind) {
    d760:	b580      	push	{r7, lr}
    d762:	b08c      	sub	sp, #48	; 0x30
    d764:	af00      	add	r7, sp, #0
    d766:	60f8      	str	r0, [r7, #12]
    d768:	60b9      	str	r1, [r7, #8]
    d76a:	607a      	str	r2, [r7, #4]
    // If the map is a fixed array then we must only be called for a lookup
    assert(!map->is_fixed || lookup_kind == MP_MAP_LOOKUP);
    d76c:	68fb      	ldr	r3, [r7, #12]
    d76e:	781b      	ldrb	r3, [r3, #0]
    d770:	f003 0302 	and.w	r3, r3, #2
    d774:	b2db      	uxtb	r3, r3
    d776:	2b00      	cmp	r3, #0
    d778:	d008      	beq.n	d78c <mp_map_lookup+0x2c>
    d77a:	687b      	ldr	r3, [r7, #4]
    d77c:	2b00      	cmp	r3, #0
    d77e:	d005      	beq.n	d78c <mp_map_lookup+0x2c>
    d780:	4ba3      	ldr	r3, [pc, #652]	; (da10 <mp_map_lookup+0x2b0>)
    d782:	4aa4      	ldr	r2, [pc, #656]	; (da14 <mp_map_lookup+0x2b4>)
    d784:	2194      	movs	r1, #148	; 0x94
    d786:	48a4      	ldr	r0, [pc, #656]	; (da18 <mp_map_lookup+0x2b8>)
    d788:	f00d ffa2 	bl	1b6d0 <__assert_func>

    // Work out if we can compare just pointers
    bool compare_only_ptrs = map->all_keys_are_qstrs;
    d78c:	68fb      	ldr	r3, [r7, #12]
    d78e:	781b      	ldrb	r3, [r3, #0]
    d790:	f3c3 0300 	ubfx	r3, r3, #0, #1
    d794:	b2db      	uxtb	r3, r3
    d796:	2b00      	cmp	r3, #0
    d798:	bf14      	ite	ne
    d79a:	2301      	movne	r3, #1
    d79c:	2300      	moveq	r3, #0
    d79e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (compare_only_ptrs) {
    d7a2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    d7a6:	2b00      	cmp	r3, #0
    d7a8:	d019      	beq.n	d7de <mp_map_lookup+0x7e>
        if (MP_OBJ_IS_QSTR(index)) {
    d7aa:	68b8      	ldr	r0, [r7, #8]
    d7ac:	f7ff fe90 	bl	d4d0 <MP_OBJ_IS_QSTR>
    d7b0:	4603      	mov	r3, r0
    d7b2:	2b00      	cmp	r3, #0
    d7b4:	d113      	bne.n	d7de <mp_map_lookup+0x7e>
            // Index is a qstr, so can just do ptr comparison.
        } else if (MP_OBJ_IS_TYPE(index, &mp_type_str)) {
    d7b6:	68b8      	ldr	r0, [r7, #8]
    d7b8:	f7ff fe9c 	bl	d4f4 <MP_OBJ_IS_OBJ>
    d7bc:	4603      	mov	r3, r0
    d7be:	2b00      	cmp	r3, #0
    d7c0:	d008      	beq.n	d7d4 <mp_map_lookup+0x74>
    d7c2:	68bb      	ldr	r3, [r7, #8]
    d7c4:	681b      	ldr	r3, [r3, #0]
    d7c6:	4a95      	ldr	r2, [pc, #596]	; (da1c <mp_map_lookup+0x2bc>)
    d7c8:	4293      	cmp	r3, r2
    d7ca:	d103      	bne.n	d7d4 <mp_map_lookup+0x74>
            // Index is a non-interned string.
            // We can either intern the string, or force a full equality comparison.
            // We chose the latter, since interning costs time and potentially RAM,
            // and it won't necessarily benefit subsequent calls because these calls
            // most likely won't pass the newly-interned string.
            compare_only_ptrs = false;
    d7cc:	2300      	movs	r3, #0
    d7ce:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    d7d2:	e004      	b.n	d7de <mp_map_lookup+0x7e>
        } else if (lookup_kind != MP_MAP_LOOKUP_ADD_IF_NOT_FOUND) {
    d7d4:	687b      	ldr	r3, [r7, #4]
    d7d6:	2b01      	cmp	r3, #1
    d7d8:	d001      	beq.n	d7de <mp_map_lookup+0x7e>
            // If we are not adding, then we can return straight away a failed
            // lookup because we know that the index will never be found.
            return NULL;
    d7da:	2300      	movs	r3, #0
    d7dc:	e130      	b.n	da40 <mp_map_lookup+0x2e0>
        }
    }

    // if the map is an ordered array then we must do a brute force linear search
    if (map->is_ordered) {
    d7de:	68fb      	ldr	r3, [r7, #12]
    d7e0:	781b      	ldrb	r3, [r3, #0]
    d7e2:	f003 0304 	and.w	r3, r3, #4
    d7e6:	b2db      	uxtb	r3, r3
    d7e8:	2b00      	cmp	r3, #0
    d7ea:	d02c      	beq.n	d846 <mp_map_lookup+0xe6>
        for (mp_map_elem_t *elem = &map->table[0], *top = &map->table[map->used]; elem < top; elem++) {
    d7ec:	68fb      	ldr	r3, [r7, #12]
    d7ee:	689b      	ldr	r3, [r3, #8]
    d7f0:	62bb      	str	r3, [r7, #40]	; 0x28
    d7f2:	68fb      	ldr	r3, [r7, #12]
    d7f4:	689a      	ldr	r2, [r3, #8]
    d7f6:	68fb      	ldr	r3, [r7, #12]
    d7f8:	681b      	ldr	r3, [r3, #0]
    d7fa:	f3c3 03dc 	ubfx	r3, r3, #3, #29
    d7fe:	00db      	lsls	r3, r3, #3
    d800:	4413      	add	r3, r2
    d802:	617b      	str	r3, [r7, #20]
    d804:	e019      	b.n	d83a <mp_map_lookup+0xda>
            if (elem->key == index || (!compare_only_ptrs && mp_obj_equal(elem->key, index))) {
    d806:	6abb      	ldr	r3, [r7, #40]	; 0x28
    d808:	681a      	ldr	r2, [r3, #0]
    d80a:	68bb      	ldr	r3, [r7, #8]
    d80c:	429a      	cmp	r2, r3
    d80e:	d00f      	beq.n	d830 <mp_map_lookup+0xd0>
    d810:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    d814:	f083 0301 	eor.w	r3, r3, #1
    d818:	b2db      	uxtb	r3, r3
    d81a:	2b00      	cmp	r3, #0
    d81c:	d00a      	beq.n	d834 <mp_map_lookup+0xd4>
    d81e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    d820:	681b      	ldr	r3, [r3, #0]
    d822:	68b9      	ldr	r1, [r7, #8]
    d824:	4618      	mov	r0, r3
    d826:	f000 fa99 	bl	dd5c <mp_obj_equal>
    d82a:	4603      	mov	r3, r0
    d82c:	2b00      	cmp	r3, #0
    d82e:	d001      	beq.n	d834 <mp_map_lookup+0xd4>
                    elem = &map->table[map->used];
                    elem->key = MP_OBJ_NULL;
                    elem->value = value;
                }
                #endif
                return elem;
    d830:	6abb      	ldr	r3, [r7, #40]	; 0x28
    d832:	e105      	b.n	da40 <mp_map_lookup+0x2e0>
        for (mp_map_elem_t *elem = &map->table[0], *top = &map->table[map->used]; elem < top; elem++) {
    d834:	6abb      	ldr	r3, [r7, #40]	; 0x28
    d836:	3308      	adds	r3, #8
    d838:	62bb      	str	r3, [r7, #40]	; 0x28
    d83a:	6aba      	ldr	r2, [r7, #40]	; 0x28
    d83c:	697b      	ldr	r3, [r7, #20]
    d83e:	429a      	cmp	r2, r3
    d840:	d3e1      	bcc.n	d806 <mp_map_lookup+0xa6>
        if (!MP_OBJ_IS_QSTR(index)) {
            map->all_keys_are_qstrs = 0;
        }
        return elem;
        #else
        return NULL;
    d842:	2300      	movs	r3, #0
    d844:	e0fc      	b.n	da40 <mp_map_lookup+0x2e0>
        #endif
    }

    // map is a hash table (not an ordered array), so do a hash lookup

    if (map->alloc == 0) {
    d846:	68fb      	ldr	r3, [r7, #12]
    d848:	685b      	ldr	r3, [r3, #4]
    d84a:	2b00      	cmp	r3, #0
    d84c:	d108      	bne.n	d860 <mp_map_lookup+0x100>
        if (lookup_kind == MP_MAP_LOOKUP_ADD_IF_NOT_FOUND) {
    d84e:	687b      	ldr	r3, [r7, #4]
    d850:	2b01      	cmp	r3, #1
    d852:	d103      	bne.n	d85c <mp_map_lookup+0xfc>
            mp_map_rehash(map);
    d854:	68f8      	ldr	r0, [r7, #12]
    d856:	f7ff ff2b 	bl	d6b0 <mp_map_rehash>
    d85a:	e001      	b.n	d860 <mp_map_lookup+0x100>
        } else {
            return NULL;
    d85c:	2300      	movs	r3, #0
    d85e:	e0ef      	b.n	da40 <mp_map_lookup+0x2e0>
        }
    }

    // get hash of index, with fast path for common case of qstr
    mp_uint_t hash;
    if (MP_OBJ_IS_QSTR(index)) {
    d860:	68b8      	ldr	r0, [r7, #8]
    d862:	f7ff fe35 	bl	d4d0 <MP_OBJ_IS_QSTR>
    d866:	4603      	mov	r3, r0
    d868:	2b00      	cmp	r3, #0
    d86a:	d006      	beq.n	d87a <mp_map_lookup+0x11a>
        hash = qstr_hash(MP_OBJ_QSTR_VALUE(index));
    d86c:	68bb      	ldr	r3, [r7, #8]
    d86e:	089b      	lsrs	r3, r3, #2
    d870:	4618      	mov	r0, r3
    d872:	f7f3 fd5d 	bl	1330 <qstr_hash>
    d876:	6278      	str	r0, [r7, #36]	; 0x24
    d878:	e006      	b.n	d888 <mp_map_lookup+0x128>
    } else {
        hash = MP_OBJ_SMALL_INT_VALUE(mp_unary_op(MP_UNARY_OP_HASH, index));
    d87a:	68b9      	ldr	r1, [r7, #8]
    d87c:	2006      	movs	r0, #6
    d87e:	f7fe f877 	bl	b970 <mp_unary_op>
    d882:	4603      	mov	r3, r0
    d884:	105b      	asrs	r3, r3, #1
    d886:	627b      	str	r3, [r7, #36]	; 0x24
    }

    size_t pos = hash % map->alloc;
    d888:	68fb      	ldr	r3, [r7, #12]
    d88a:	685a      	ldr	r2, [r3, #4]
    d88c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    d88e:	fbb3 f1f2 	udiv	r1, r3, r2
    d892:	fb02 f201 	mul.w	r2, r2, r1
    d896:	1a9b      	subs	r3, r3, r2
    d898:	623b      	str	r3, [r7, #32]
    size_t start_pos = pos;
    d89a:	6a3b      	ldr	r3, [r7, #32]
    d89c:	61fb      	str	r3, [r7, #28]
    mp_map_elem_t *avail_slot = NULL;
    d89e:	2300      	movs	r3, #0
    d8a0:	61bb      	str	r3, [r7, #24]
    for (;;) {
        mp_map_elem_t *slot = &map->table[pos];
    d8a2:	68fb      	ldr	r3, [r7, #12]
    d8a4:	689a      	ldr	r2, [r3, #8]
    d8a6:	6a3b      	ldr	r3, [r7, #32]
    d8a8:	00db      	lsls	r3, r3, #3
    d8aa:	4413      	add	r3, r2
    d8ac:	613b      	str	r3, [r7, #16]
        if (slot->key == MP_OBJ_NULL) {
    d8ae:	693b      	ldr	r3, [r7, #16]
    d8b0:	681b      	ldr	r3, [r3, #0]
    d8b2:	2b00      	cmp	r3, #0
    d8b4:	d12b      	bne.n	d90e <mp_map_lookup+0x1ae>
            // found NULL slot, so index is not in table
            if (lookup_kind == MP_MAP_LOOKUP_ADD_IF_NOT_FOUND) {
    d8b6:	687b      	ldr	r3, [r7, #4]
    d8b8:	2b01      	cmp	r3, #1
    d8ba:	d126      	bne.n	d90a <mp_map_lookup+0x1aa>
                map->used += 1;
    d8bc:	68fb      	ldr	r3, [r7, #12]
    d8be:	681b      	ldr	r3, [r3, #0]
    d8c0:	f3c3 03dc 	ubfx	r3, r3, #3, #29
    d8c4:	3301      	adds	r3, #1
    d8c6:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
    d8ca:	68fa      	ldr	r2, [r7, #12]
    d8cc:	6813      	ldr	r3, [r2, #0]
    d8ce:	f361 03df 	bfi	r3, r1, #3, #29
    d8d2:	6013      	str	r3, [r2, #0]
                if (avail_slot == NULL) {
    d8d4:	69bb      	ldr	r3, [r7, #24]
    d8d6:	2b00      	cmp	r3, #0
    d8d8:	d101      	bne.n	d8de <mp_map_lookup+0x17e>
                    avail_slot = slot;
    d8da:	693b      	ldr	r3, [r7, #16]
    d8dc:	61bb      	str	r3, [r7, #24]
                }
                avail_slot->key = index;
    d8de:	69bb      	ldr	r3, [r7, #24]
    d8e0:	68ba      	ldr	r2, [r7, #8]
    d8e2:	601a      	str	r2, [r3, #0]
                avail_slot->value = MP_OBJ_NULL;
    d8e4:	69bb      	ldr	r3, [r7, #24]
    d8e6:	2200      	movs	r2, #0
    d8e8:	605a      	str	r2, [r3, #4]
                if (!MP_OBJ_IS_QSTR(index)) {
    d8ea:	68b8      	ldr	r0, [r7, #8]
    d8ec:	f7ff fdf0 	bl	d4d0 <MP_OBJ_IS_QSTR>
    d8f0:	4603      	mov	r3, r0
    d8f2:	f083 0301 	eor.w	r3, r3, #1
    d8f6:	b2db      	uxtb	r3, r3
    d8f8:	2b00      	cmp	r3, #0
    d8fa:	d004      	beq.n	d906 <mp_map_lookup+0x1a6>
                    map->all_keys_are_qstrs = 0;
    d8fc:	68fa      	ldr	r2, [r7, #12]
    d8fe:	7813      	ldrb	r3, [r2, #0]
    d900:	f36f 0300 	bfc	r3, #0, #1
    d904:	7013      	strb	r3, [r2, #0]
                }
                return avail_slot;
    d906:	69bb      	ldr	r3, [r7, #24]
    d908:	e09a      	b.n	da40 <mp_map_lookup+0x2e0>
            } else {
                return NULL;
    d90a:	2300      	movs	r3, #0
    d90c:	e098      	b.n	da40 <mp_map_lookup+0x2e0>
            }
        } else if (slot->key == MP_OBJ_SENTINEL) {
    d90e:	693b      	ldr	r3, [r7, #16]
    d910:	681b      	ldr	r3, [r3, #0]
    d912:	2b08      	cmp	r3, #8
    d914:	d105      	bne.n	d922 <mp_map_lookup+0x1c2>
            // found deleted slot, remember for later
            if (avail_slot == NULL) {
    d916:	69bb      	ldr	r3, [r7, #24]
    d918:	2b00      	cmp	r3, #0
    d91a:	d141      	bne.n	d9a0 <mp_map_lookup+0x240>
                avail_slot = slot;
    d91c:	693b      	ldr	r3, [r7, #16]
    d91e:	61bb      	str	r3, [r7, #24]
    d920:	e03e      	b.n	d9a0 <mp_map_lookup+0x240>
            }
        } else if (slot->key == index || (!compare_only_ptrs && mp_obj_equal(slot->key, index))) {
    d922:	693b      	ldr	r3, [r7, #16]
    d924:	681a      	ldr	r2, [r3, #0]
    d926:	68bb      	ldr	r3, [r7, #8]
    d928:	429a      	cmp	r2, r3
    d92a:	d00f      	beq.n	d94c <mp_map_lookup+0x1ec>
    d92c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    d930:	f083 0301 	eor.w	r3, r3, #1
    d934:	b2db      	uxtb	r3, r3
    d936:	2b00      	cmp	r3, #0
    d938:	d032      	beq.n	d9a0 <mp_map_lookup+0x240>
    d93a:	693b      	ldr	r3, [r7, #16]
    d93c:	681b      	ldr	r3, [r3, #0]
    d93e:	68b9      	ldr	r1, [r7, #8]
    d940:	4618      	mov	r0, r3
    d942:	f000 fa0b 	bl	dd5c <mp_obj_equal>
    d946:	4603      	mov	r3, r0
    d948:	2b00      	cmp	r3, #0
    d94a:	d029      	beq.n	d9a0 <mp_map_lookup+0x240>
            // found index
            // Note: CPython does not replace the index; try x={True:'true'};x[1]='one';x
            if (lookup_kind == MP_MAP_LOOKUP_REMOVE_IF_FOUND) {
    d94c:	687b      	ldr	r3, [r7, #4]
    d94e:	2b02      	cmp	r3, #2
    d950:	d124      	bne.n	d99c <mp_map_lookup+0x23c>
                // delete element in this slot
                map->used--;
    d952:	68fb      	ldr	r3, [r7, #12]
    d954:	681b      	ldr	r3, [r3, #0]
    d956:	f3c3 03dc 	ubfx	r3, r3, #3, #29
    d95a:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
    d95e:	3b01      	subs	r3, #1
    d960:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
    d964:	68f9      	ldr	r1, [r7, #12]
    d966:	680a      	ldr	r2, [r1, #0]
    d968:	f363 02df 	bfi	r2, r3, #3, #29
    d96c:	600a      	str	r2, [r1, #0]
                if (map->table[(pos + 1) % map->alloc].key == MP_OBJ_NULL) {
    d96e:	68fb      	ldr	r3, [r7, #12]
    d970:	6899      	ldr	r1, [r3, #8]
    d972:	6a3b      	ldr	r3, [r7, #32]
    d974:	3301      	adds	r3, #1
    d976:	68fa      	ldr	r2, [r7, #12]
    d978:	6852      	ldr	r2, [r2, #4]
    d97a:	fbb3 f0f2 	udiv	r0, r3, r2
    d97e:	fb02 f200 	mul.w	r2, r2, r0
    d982:	1a9b      	subs	r3, r3, r2
    d984:	00db      	lsls	r3, r3, #3
    d986:	440b      	add	r3, r1
    d988:	681b      	ldr	r3, [r3, #0]
    d98a:	2b00      	cmp	r3, #0
    d98c:	d103      	bne.n	d996 <mp_map_lookup+0x236>
                    // optimisation if next slot is empty
                    slot->key = MP_OBJ_NULL;
    d98e:	693b      	ldr	r3, [r7, #16]
    d990:	2200      	movs	r2, #0
    d992:	601a      	str	r2, [r3, #0]
    d994:	e002      	b.n	d99c <mp_map_lookup+0x23c>
                } else {
                    slot->key = MP_OBJ_SENTINEL;
    d996:	693b      	ldr	r3, [r7, #16]
    d998:	2208      	movs	r2, #8
    d99a:	601a      	str	r2, [r3, #0]
                }
                // keep slot->value so that caller can access it if needed
            }
            return slot;
    d99c:	693b      	ldr	r3, [r7, #16]
    d99e:	e04f      	b.n	da40 <mp_map_lookup+0x2e0>
        }

        // not yet found, keep searching in this table
        pos = (pos + 1) % map->alloc;
    d9a0:	6a3b      	ldr	r3, [r7, #32]
    d9a2:	3301      	adds	r3, #1
    d9a4:	68fa      	ldr	r2, [r7, #12]
    d9a6:	6852      	ldr	r2, [r2, #4]
    d9a8:	fbb3 f1f2 	udiv	r1, r3, r2
    d9ac:	fb02 f201 	mul.w	r2, r2, r1
    d9b0:	1a9b      	subs	r3, r3, r2
    d9b2:	623b      	str	r3, [r7, #32]

        if (pos == start_pos) {
    d9b4:	6a3a      	ldr	r2, [r7, #32]
    d9b6:	69fb      	ldr	r3, [r7, #28]
    d9b8:	429a      	cmp	r2, r3
    d9ba:	f47f af72 	bne.w	d8a2 <mp_map_lookup+0x142>
            // search got back to starting position, so index is not in table
            if (lookup_kind == MP_MAP_LOOKUP_ADD_IF_NOT_FOUND) {
    d9be:	687b      	ldr	r3, [r7, #4]
    d9c0:	2b01      	cmp	r3, #1
    d9c2:	d13c      	bne.n	da3e <mp_map_lookup+0x2de>
                if (avail_slot != NULL) {
    d9c4:	69bb      	ldr	r3, [r7, #24]
    d9c6:	2b00      	cmp	r3, #0
    d9c8:	d02a      	beq.n	da20 <mp_map_lookup+0x2c0>
                    // there was an available slot, so use that
                    map->used++;
    d9ca:	68fb      	ldr	r3, [r7, #12]
    d9cc:	681b      	ldr	r3, [r3, #0]
    d9ce:	f3c3 03dc 	ubfx	r3, r3, #3, #29
    d9d2:	1c5a      	adds	r2, r3, #1
    d9d4:	f022 4260 	bic.w	r2, r2, #3758096384	; 0xe0000000
    d9d8:	68f9      	ldr	r1, [r7, #12]
    d9da:	680b      	ldr	r3, [r1, #0]
    d9dc:	f362 03df 	bfi	r3, r2, #3, #29
    d9e0:	600b      	str	r3, [r1, #0]
                    avail_slot->key = index;
    d9e2:	69bb      	ldr	r3, [r7, #24]
    d9e4:	68ba      	ldr	r2, [r7, #8]
    d9e6:	601a      	str	r2, [r3, #0]
                    avail_slot->value = MP_OBJ_NULL;
    d9e8:	69bb      	ldr	r3, [r7, #24]
    d9ea:	2200      	movs	r2, #0
    d9ec:	605a      	str	r2, [r3, #4]
                    if (!MP_OBJ_IS_QSTR(index)) {
    d9ee:	68b8      	ldr	r0, [r7, #8]
    d9f0:	f7ff fd6e 	bl	d4d0 <MP_OBJ_IS_QSTR>
    d9f4:	4603      	mov	r3, r0
    d9f6:	f083 0301 	eor.w	r3, r3, #1
    d9fa:	b2db      	uxtb	r3, r3
    d9fc:	2b00      	cmp	r3, #0
    d9fe:	d004      	beq.n	da0a <mp_map_lookup+0x2aa>
                        map->all_keys_are_qstrs = 0;
    da00:	68fa      	ldr	r2, [r7, #12]
    da02:	7813      	ldrb	r3, [r2, #0]
    da04:	f36f 0300 	bfc	r3, #0, #1
    da08:	7013      	strb	r3, [r2, #0]
                    }
                    return avail_slot;
    da0a:	69bb      	ldr	r3, [r7, #24]
    da0c:	e018      	b.n	da40 <mp_map_lookup+0x2e0>
    da0e:	bf00      	nop
    da10:	00021928 	.word	0x00021928
    da14:	00021968 	.word	0x00021968
    da18:	00021958 	.word	0x00021958
    da1c:	00023b0c 	.word	0x00023b0c
                } else {
                    // not enough room in table, rehash it
                    mp_map_rehash(map);
    da20:	68f8      	ldr	r0, [r7, #12]
    da22:	f7ff fe45 	bl	d6b0 <mp_map_rehash>
                    // restart the search for the new element
                    start_pos = pos = hash % map->alloc;
    da26:	68fb      	ldr	r3, [r7, #12]
    da28:	685a      	ldr	r2, [r3, #4]
    da2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    da2c:	fbb3 f1f2 	udiv	r1, r3, r2
    da30:	fb02 f201 	mul.w	r2, r2, r1
    da34:	1a9b      	subs	r3, r3, r2
    da36:	623b      	str	r3, [r7, #32]
    da38:	6a3b      	ldr	r3, [r7, #32]
    da3a:	61fb      	str	r3, [r7, #28]
    da3c:	e731      	b.n	d8a2 <mp_map_lookup+0x142>
                }
            } else {
                return NULL;
    da3e:	2300      	movs	r3, #0
            }
        }
    }
}
    da40:	4618      	mov	r0, r3
    da42:	3730      	adds	r7, #48	; 0x30
    da44:	46bd      	mov	sp, r7
    da46:	bd80      	pop	{r7, pc}

0000da48 <MP_OBJ_IS_SMALL_INT>:
    { return ((((mp_int_t)(o)) & 1) != 0); }
    da48:	b480      	push	{r7}
    da4a:	b083      	sub	sp, #12
    da4c:	af00      	add	r7, sp, #0
    da4e:	6078      	str	r0, [r7, #4]
    da50:	687b      	ldr	r3, [r7, #4]
    da52:	f003 0301 	and.w	r3, r3, #1
    da56:	2b00      	cmp	r3, #0
    da58:	bf14      	ite	ne
    da5a:	2301      	movne	r3, #1
    da5c:	2300      	moveq	r3, #0
    da5e:	b2db      	uxtb	r3, r3
    da60:	4618      	mov	r0, r3
    da62:	370c      	adds	r7, #12
    da64:	46bd      	mov	sp, r7
    da66:	f85d 7b04 	ldr.w	r7, [sp], #4
    da6a:	4770      	bx	lr

0000da6c <MP_OBJ_IS_QSTR>:
    { return ((((mp_int_t)(o)) & 3) == 2); }
    da6c:	b480      	push	{r7}
    da6e:	b083      	sub	sp, #12
    da70:	af00      	add	r7, sp, #0
    da72:	6078      	str	r0, [r7, #4]
    da74:	687b      	ldr	r3, [r7, #4]
    da76:	f003 0303 	and.w	r3, r3, #3
    da7a:	2b02      	cmp	r3, #2
    da7c:	bf0c      	ite	eq
    da7e:	2301      	moveq	r3, #1
    da80:	2300      	movne	r3, #0
    da82:	b2db      	uxtb	r3, r3
    da84:	4618      	mov	r0, r3
    da86:	370c      	adds	r7, #12
    da88:	46bd      	mov	sp, r7
    da8a:	f85d 7b04 	ldr.w	r7, [sp], #4
    da8e:	4770      	bx	lr

0000da90 <MP_OBJ_IS_OBJ>:
    { return ((((mp_int_t)(o)) & 3) == 0); }
    da90:	b480      	push	{r7}
    da92:	b083      	sub	sp, #12
    da94:	af00      	add	r7, sp, #0
    da96:	6078      	str	r0, [r7, #4]
    da98:	687b      	ldr	r3, [r7, #4]
    da9a:	f003 0303 	and.w	r3, r3, #3
    da9e:	2b00      	cmp	r3, #0
    daa0:	bf0c      	ite	eq
    daa2:	2301      	moveq	r3, #1
    daa4:	2300      	movne	r3, #0
    daa6:	b2db      	uxtb	r3, r3
    daa8:	4618      	mov	r0, r3
    daaa:	370c      	adds	r7, #12
    daac:	46bd      	mov	sp, r7
    daae:	f85d 7b04 	ldr.w	r7, [sp], #4
    dab2:	4770      	bx	lr

0000dab4 <mp_obj_get_type>:
#include "py/objstr.h"
#include "py/runtime.h"
#include "py/stackctrl.h"
#include "py/stream.h" // for mp_obj_print

mp_obj_type_t *mp_obj_get_type(mp_const_obj_t o_in) {
    dab4:	b580      	push	{r7, lr}
    dab6:	b084      	sub	sp, #16
    dab8:	af00      	add	r7, sp, #0
    daba:	6078      	str	r0, [r7, #4]
    if (MP_OBJ_IS_SMALL_INT(o_in)) {
    dabc:	6878      	ldr	r0, [r7, #4]
    dabe:	f7ff ffc3 	bl	da48 <MP_OBJ_IS_SMALL_INT>
    dac2:	4603      	mov	r3, r0
    dac4:	2b00      	cmp	r3, #0
    dac6:	d001      	beq.n	dacc <mp_obj_get_type+0x18>
        return (mp_obj_type_t*)&mp_type_int;
    dac8:	4b08      	ldr	r3, [pc, #32]	; (daec <mp_obj_get_type+0x38>)
    daca:	e00b      	b.n	dae4 <mp_obj_get_type+0x30>
    } else if (MP_OBJ_IS_QSTR(o_in)) {
    dacc:	6878      	ldr	r0, [r7, #4]
    dace:	f7ff ffcd 	bl	da6c <MP_OBJ_IS_QSTR>
    dad2:	4603      	mov	r3, r0
    dad4:	2b00      	cmp	r3, #0
    dad6:	d001      	beq.n	dadc <mp_obj_get_type+0x28>
        return (mp_obj_type_t*)&mp_type_str;
    dad8:	4b05      	ldr	r3, [pc, #20]	; (daf0 <mp_obj_get_type+0x3c>)
    dada:	e003      	b.n	dae4 <mp_obj_get_type+0x30>
    #if MICROPY_PY_BUILTINS_FLOAT
    } else if (mp_obj_is_float(o_in)) {
        return (mp_obj_type_t*)&mp_type_float;
    #endif
    } else {
        const mp_obj_base_t *o = MP_OBJ_TO_PTR(o_in);
    dadc:	687b      	ldr	r3, [r7, #4]
    dade:	60fb      	str	r3, [r7, #12]
        return (mp_obj_type_t*)o->type;
    dae0:	68fb      	ldr	r3, [r7, #12]
    dae2:	681b      	ldr	r3, [r3, #0]
    }
}
    dae4:	4618      	mov	r0, r3
    dae6:	3710      	adds	r7, #16
    dae8:	46bd      	mov	sp, r7
    daea:	bd80      	pop	{r7, pc}
    daec:	00022ea8 	.word	0x00022ea8
    daf0:	00023b0c 	.word	0x00023b0c

0000daf4 <mp_obj_get_type_str>:

const char *mp_obj_get_type_str(mp_const_obj_t o_in) {
    daf4:	b580      	push	{r7, lr}
    daf6:	b082      	sub	sp, #8
    daf8:	af00      	add	r7, sp, #0
    dafa:	6078      	str	r0, [r7, #4]
    return qstr_str(mp_obj_get_type(o_in)->name);
    dafc:	6878      	ldr	r0, [r7, #4]
    dafe:	f7ff ffd9 	bl	dab4 <mp_obj_get_type>
    db02:	4603      	mov	r3, r0
    db04:	685b      	ldr	r3, [r3, #4]
    db06:	4618      	mov	r0, r3
    db08:	f7f3 fc30 	bl	136c <qstr_str>
    db0c:	4603      	mov	r3, r0
}
    db0e:	4618      	mov	r0, r3
    db10:	3708      	adds	r7, #8
    db12:	46bd      	mov	sp, r7
    db14:	bd80      	pop	{r7, pc}
    db16:	bf00      	nop

0000db18 <mp_obj_print_helper>:

void mp_obj_print_helper(const mp_print_t *print, mp_obj_t o_in, mp_print_kind_t kind) {
    db18:	b580      	push	{r7, lr}
    db1a:	b086      	sub	sp, #24
    db1c:	af00      	add	r7, sp, #0
    db1e:	60f8      	str	r0, [r7, #12]
    db20:	60b9      	str	r1, [r7, #8]
    db22:	607a      	str	r2, [r7, #4]
    // There can be data structures nested too deep, or just recursive
    MP_STACK_CHECK();
#ifndef NDEBUG
    if (o_in == MP_OBJ_NULL) {
    db24:	68bb      	ldr	r3, [r7, #8]
    db26:	2b00      	cmp	r3, #0
    db28:	d104      	bne.n	db34 <mp_obj_print_helper+0x1c>
        mp_print_str(print, "(nil)");
    db2a:	490f      	ldr	r1, [pc, #60]	; (db68 <mp_obj_print_helper+0x50>)
    db2c:	68f8      	ldr	r0, [r7, #12]
    db2e:	f7f3 ff61 	bl	19f4 <mp_print_str>
        return;
    db32:	e015      	b.n	db60 <mp_obj_print_helper+0x48>
    }
#endif
    mp_obj_type_t *type = mp_obj_get_type(o_in);
    db34:	68b8      	ldr	r0, [r7, #8]
    db36:	f7ff ffbd 	bl	dab4 <mp_obj_get_type>
    db3a:	6178      	str	r0, [r7, #20]
    if (type->print != NULL) {
    db3c:	697b      	ldr	r3, [r7, #20]
    db3e:	689b      	ldr	r3, [r3, #8]
    db40:	2b00      	cmp	r3, #0
    db42:	d006      	beq.n	db52 <mp_obj_print_helper+0x3a>
        type->print((mp_print_t*)print, o_in, kind);
    db44:	697b      	ldr	r3, [r7, #20]
    db46:	689b      	ldr	r3, [r3, #8]
    db48:	687a      	ldr	r2, [r7, #4]
    db4a:	68b9      	ldr	r1, [r7, #8]
    db4c:	68f8      	ldr	r0, [r7, #12]
    db4e:	4798      	blx	r3
    db50:	e006      	b.n	db60 <mp_obj_print_helper+0x48>
    } else {
        mp_printf(print, "<%q>", type->name);
    db52:	697b      	ldr	r3, [r7, #20]
    db54:	685b      	ldr	r3, [r3, #4]
    db56:	461a      	mov	r2, r3
    db58:	4904      	ldr	r1, [pc, #16]	; (db6c <mp_obj_print_helper+0x54>)
    db5a:	68f8      	ldr	r0, [r7, #12]
    db5c:	f7f4 fa5e 	bl	201c <mp_printf>
    }
}
    db60:	3718      	adds	r7, #24
    db62:	46bd      	mov	sp, r7
    db64:	bd80      	pop	{r7, pc}
    db66:	bf00      	nop
    db68:	00021978 	.word	0x00021978
    db6c:	00021980 	.word	0x00021980

0000db70 <mp_obj_print>:

void mp_obj_print(mp_obj_t o_in, mp_print_kind_t kind) {
    db70:	b580      	push	{r7, lr}
    db72:	b082      	sub	sp, #8
    db74:	af00      	add	r7, sp, #0
    db76:	6078      	str	r0, [r7, #4]
    db78:	6039      	str	r1, [r7, #0]
    mp_obj_print_helper(MP_PYTHON_PRINTER, o_in, kind);
    db7a:	683a      	ldr	r2, [r7, #0]
    db7c:	6879      	ldr	r1, [r7, #4]
    db7e:	4803      	ldr	r0, [pc, #12]	; (db8c <mp_obj_print+0x1c>)
    db80:	f7ff ffca 	bl	db18 <mp_obj_print_helper>
}
    db84:	bf00      	nop
    db86:	3708      	adds	r7, #8
    db88:	46bd      	mov	sp, r7
    db8a:	bd80      	pop	{r7, pc}
    db8c:	0001f75c 	.word	0x0001f75c

0000db90 <mp_obj_print_exception>:

// helper function to print an exception with traceback
void mp_obj_print_exception(const mp_print_t *print, mp_obj_t exc) {
    db90:	b580      	push	{r7, lr}
    db92:	b086      	sub	sp, #24
    db94:	af00      	add	r7, sp, #0
    db96:	6078      	str	r0, [r7, #4]
    db98:	6039      	str	r1, [r7, #0]
    if (mp_obj_is_exception_instance(exc)) {
    db9a:	6838      	ldr	r0, [r7, #0]
    db9c:	f001 ff3c 	bl	fa18 <mp_obj_is_exception_instance>
    dba0:	4603      	mov	r3, r0
    dba2:	2b00      	cmp	r3, #0
    dba4:	d047      	beq.n	dc36 <mp_obj_print_exception+0xa6>
        size_t n, *values;
        mp_obj_exception_get_traceback(exc, &n, &values);
    dba6:	f107 0208 	add.w	r2, r7, #8
    dbaa:	f107 030c 	add.w	r3, r7, #12
    dbae:	4619      	mov	r1, r3
    dbb0:	6838      	ldr	r0, [r7, #0]
    dbb2:	f002 f803 	bl	fbbc <mp_obj_exception_get_traceback>
        if (n > 0) {
    dbb6:	68fb      	ldr	r3, [r7, #12]
    dbb8:	2b00      	cmp	r3, #0
    dbba:	d03c      	beq.n	dc36 <mp_obj_print_exception+0xa6>
            assert(n % 3 == 0);
    dbbc:	68f9      	ldr	r1, [r7, #12]
    dbbe:	4b24      	ldr	r3, [pc, #144]	; (dc50 <mp_obj_print_exception+0xc0>)
    dbc0:	fba3 2301 	umull	r2, r3, r3, r1
    dbc4:	085a      	lsrs	r2, r3, #1
    dbc6:	4613      	mov	r3, r2
    dbc8:	005b      	lsls	r3, r3, #1
    dbca:	4413      	add	r3, r2
    dbcc:	1aca      	subs	r2, r1, r3
    dbce:	2a00      	cmp	r2, #0
    dbd0:	d005      	beq.n	dbde <mp_obj_print_exception+0x4e>
    dbd2:	4b20      	ldr	r3, [pc, #128]	; (dc54 <mp_obj_print_exception+0xc4>)
    dbd4:	4a20      	ldr	r2, [pc, #128]	; (dc58 <mp_obj_print_exception+0xc8>)
    dbd6:	2156      	movs	r1, #86	; 0x56
    dbd8:	4820      	ldr	r0, [pc, #128]	; (dc5c <mp_obj_print_exception+0xcc>)
    dbda:	f00d fd79 	bl	1b6d0 <__assert_func>
            mp_print_str(print, "Traceback (most recent call last):\n");
    dbde:	4920      	ldr	r1, [pc, #128]	; (dc60 <mp_obj_print_exception+0xd0>)
    dbe0:	6878      	ldr	r0, [r7, #4]
    dbe2:	f7f3 ff07 	bl	19f4 <mp_print_str>
            for (int i = n - 3; i >= 0; i -= 3) {
    dbe6:	68fb      	ldr	r3, [r7, #12]
    dbe8:	3b03      	subs	r3, #3
    dbea:	617b      	str	r3, [r7, #20]
    dbec:	e020      	b.n	dc30 <mp_obj_print_exception+0xa0>
#if MICROPY_ENABLE_SOURCE_LINE
                mp_printf(print, "  File \"%q\", line %d", values[i], (int)values[i + 1]);
#else
                mp_printf(print, "  File \"%q\"", values[i]);
    dbee:	68ba      	ldr	r2, [r7, #8]
    dbf0:	697b      	ldr	r3, [r7, #20]
    dbf2:	009b      	lsls	r3, r3, #2
    dbf4:	4413      	add	r3, r2
    dbf6:	681b      	ldr	r3, [r3, #0]
    dbf8:	461a      	mov	r2, r3
    dbfa:	491a      	ldr	r1, [pc, #104]	; (dc64 <mp_obj_print_exception+0xd4>)
    dbfc:	6878      	ldr	r0, [r7, #4]
    dbfe:	f7f4 fa0d 	bl	201c <mp_printf>
#endif
                // the block name can be NULL if it's unknown
                qstr block = values[i + 2];
    dc02:	68ba      	ldr	r2, [r7, #8]
    dc04:	697b      	ldr	r3, [r7, #20]
    dc06:	3302      	adds	r3, #2
    dc08:	009b      	lsls	r3, r3, #2
    dc0a:	4413      	add	r3, r2
    dc0c:	681b      	ldr	r3, [r3, #0]
    dc0e:	613b      	str	r3, [r7, #16]
                if (block == MP_QSTR_NULL) {
    dc10:	693b      	ldr	r3, [r7, #16]
    dc12:	2b00      	cmp	r3, #0
    dc14:	d104      	bne.n	dc20 <mp_obj_print_exception+0x90>
                    mp_print_str(print, "\n");
    dc16:	4914      	ldr	r1, [pc, #80]	; (dc68 <mp_obj_print_exception+0xd8>)
    dc18:	6878      	ldr	r0, [r7, #4]
    dc1a:	f7f3 feeb 	bl	19f4 <mp_print_str>
    dc1e:	e004      	b.n	dc2a <mp_obj_print_exception+0x9a>
                } else {
                    mp_printf(print, ", in %q\n", block);
    dc20:	693a      	ldr	r2, [r7, #16]
    dc22:	4912      	ldr	r1, [pc, #72]	; (dc6c <mp_obj_print_exception+0xdc>)
    dc24:	6878      	ldr	r0, [r7, #4]
    dc26:	f7f4 f9f9 	bl	201c <mp_printf>
            for (int i = n - 3; i >= 0; i -= 3) {
    dc2a:	697b      	ldr	r3, [r7, #20]
    dc2c:	3b03      	subs	r3, #3
    dc2e:	617b      	str	r3, [r7, #20]
    dc30:	697b      	ldr	r3, [r7, #20]
    dc32:	2b00      	cmp	r3, #0
    dc34:	dadb      	bge.n	dbee <mp_obj_print_exception+0x5e>
                }
            }
        }
    }
    mp_obj_print_helper(print, exc, PRINT_EXC);
    dc36:	2202      	movs	r2, #2
    dc38:	6839      	ldr	r1, [r7, #0]
    dc3a:	6878      	ldr	r0, [r7, #4]
    dc3c:	f7ff ff6c 	bl	db18 <mp_obj_print_helper>
    mp_print_str(print, "\n");
    dc40:	4909      	ldr	r1, [pc, #36]	; (dc68 <mp_obj_print_exception+0xd8>)
    dc42:	6878      	ldr	r0, [r7, #4]
    dc44:	f7f3 fed6 	bl	19f4 <mp_print_str>
}
    dc48:	bf00      	nop
    dc4a:	3718      	adds	r7, #24
    dc4c:	46bd      	mov	sp, r7
    dc4e:	bd80      	pop	{r7, pc}
    dc50:	aaaaaaab 	.word	0xaaaaaaab
    dc54:	00021988 	.word	0x00021988
    dc58:	00021b0c 	.word	0x00021b0c
    dc5c:	00021994 	.word	0x00021994
    dc60:	000219a4 	.word	0x000219a4
    dc64:	000219c8 	.word	0x000219c8
    dc68:	000219d4 	.word	0x000219d4
    dc6c:	000219d8 	.word	0x000219d8

0000dc70 <mp_obj_is_true>:

bool mp_obj_is_true(mp_obj_t arg) {
    dc70:	b580      	push	{r7, lr}
    dc72:	b086      	sub	sp, #24
    dc74:	af00      	add	r7, sp, #0
    dc76:	6078      	str	r0, [r7, #4]
    if (arg == mp_const_false) {
    dc78:	687b      	ldr	r3, [r7, #4]
    dc7a:	4a25      	ldr	r2, [pc, #148]	; (dd10 <mp_obj_is_true+0xa0>)
    dc7c:	4293      	cmp	r3, r2
    dc7e:	d101      	bne.n	dc84 <mp_obj_is_true+0x14>
        return 0;
    dc80:	2300      	movs	r3, #0
    dc82:	e041      	b.n	dd08 <mp_obj_is_true+0x98>
    } else if (arg == mp_const_true) {
    dc84:	687b      	ldr	r3, [r7, #4]
    dc86:	4a23      	ldr	r2, [pc, #140]	; (dd14 <mp_obj_is_true+0xa4>)
    dc88:	4293      	cmp	r3, r2
    dc8a:	d101      	bne.n	dc90 <mp_obj_is_true+0x20>
        return 1;
    dc8c:	2301      	movs	r3, #1
    dc8e:	e03b      	b.n	dd08 <mp_obj_is_true+0x98>
    } else if (arg == mp_const_none) {
    dc90:	687b      	ldr	r3, [r7, #4]
    dc92:	4a21      	ldr	r2, [pc, #132]	; (dd18 <mp_obj_is_true+0xa8>)
    dc94:	4293      	cmp	r3, r2
    dc96:	d101      	bne.n	dc9c <mp_obj_is_true+0x2c>
        return 0;
    dc98:	2300      	movs	r3, #0
    dc9a:	e035      	b.n	dd08 <mp_obj_is_true+0x98>
    } else if (MP_OBJ_IS_SMALL_INT(arg)) {
    dc9c:	6878      	ldr	r0, [r7, #4]
    dc9e:	f7ff fed3 	bl	da48 <MP_OBJ_IS_SMALL_INT>
    dca2:	4603      	mov	r3, r0
    dca4:	2b00      	cmp	r3, #0
    dca6:	d007      	beq.n	dcb8 <mp_obj_is_true+0x48>
        if (MP_OBJ_SMALL_INT_VALUE(arg) == 0) {
    dca8:	687b      	ldr	r3, [r7, #4]
    dcaa:	105b      	asrs	r3, r3, #1
    dcac:	2b00      	cmp	r3, #0
    dcae:	d101      	bne.n	dcb4 <mp_obj_is_true+0x44>
            return 0;
    dcb0:	2300      	movs	r3, #0
    dcb2:	e029      	b.n	dd08 <mp_obj_is_true+0x98>
        } else {
            return 1;
    dcb4:	2301      	movs	r3, #1
    dcb6:	e027      	b.n	dd08 <mp_obj_is_true+0x98>
        }
    } else {
        mp_obj_type_t *type = mp_obj_get_type(arg);
    dcb8:	6878      	ldr	r0, [r7, #4]
    dcba:	f7ff fefb 	bl	dab4 <mp_obj_get_type>
    dcbe:	6178      	str	r0, [r7, #20]
        if (type->unary_op != NULL) {
    dcc0:	697b      	ldr	r3, [r7, #20]
    dcc2:	695b      	ldr	r3, [r3, #20]
    dcc4:	2b00      	cmp	r3, #0
    dcc6:	d010      	beq.n	dcea <mp_obj_is_true+0x7a>
            mp_obj_t result = type->unary_op(MP_UNARY_OP_BOOL, arg);
    dcc8:	697b      	ldr	r3, [r7, #20]
    dcca:	695b      	ldr	r3, [r3, #20]
    dccc:	6879      	ldr	r1, [r7, #4]
    dcce:	2004      	movs	r0, #4
    dcd0:	4798      	blx	r3
    dcd2:	6138      	str	r0, [r7, #16]
            if (result != MP_OBJ_NULL) {
    dcd4:	693b      	ldr	r3, [r7, #16]
    dcd6:	2b00      	cmp	r3, #0
    dcd8:	d007      	beq.n	dcea <mp_obj_is_true+0x7a>
                return result == mp_const_true;
    dcda:	693b      	ldr	r3, [r7, #16]
    dcdc:	4a0d      	ldr	r2, [pc, #52]	; (dd14 <mp_obj_is_true+0xa4>)
    dcde:	4293      	cmp	r3, r2
    dce0:	bf0c      	ite	eq
    dce2:	2301      	moveq	r3, #1
    dce4:	2300      	movne	r3, #0
    dce6:	b2db      	uxtb	r3, r3
    dce8:	e00e      	b.n	dd08 <mp_obj_is_true+0x98>
            }
        }

        mp_obj_t len = mp_obj_len_maybe(arg);
    dcea:	6878      	ldr	r0, [r7, #4]
    dcec:	f000 fa38 	bl	e160 <mp_obj_len_maybe>
    dcf0:	60f8      	str	r0, [r7, #12]
        if (len != MP_OBJ_NULL) {
    dcf2:	68fb      	ldr	r3, [r7, #12]
    dcf4:	2b00      	cmp	r3, #0
    dcf6:	d006      	beq.n	dd06 <mp_obj_is_true+0x96>
            // obj has a length, truth determined if len != 0
            return len != MP_OBJ_NEW_SMALL_INT(0);
    dcf8:	68fb      	ldr	r3, [r7, #12]
    dcfa:	2b01      	cmp	r3, #1
    dcfc:	bf14      	ite	ne
    dcfe:	2301      	movne	r3, #1
    dd00:	2300      	moveq	r3, #0
    dd02:	b2db      	uxtb	r3, r3
    dd04:	e000      	b.n	dd08 <mp_obj_is_true+0x98>
        } else {
            // any other obj is true per Python semantics
            return 1;
    dd06:	2301      	movs	r3, #1
        }
    }
}
    dd08:	4618      	mov	r0, r3
    dd0a:	3718      	adds	r7, #24
    dd0c:	46bd      	mov	sp, r7
    dd0e:	bd80      	pop	{r7, pc}
    dd10:	00021b70 	.word	0x00021b70
    dd14:	00021b78 	.word	0x00021b78
    dd18:	0002345c 	.word	0x0002345c

0000dd1c <mp_obj_is_callable>:

bool mp_obj_is_callable(mp_obj_t o_in) {
    dd1c:	b580      	push	{r7, lr}
    dd1e:	b084      	sub	sp, #16
    dd20:	af00      	add	r7, sp, #0
    dd22:	6078      	str	r0, [r7, #4]
    mp_call_fun_t call = mp_obj_get_type(o_in)->call;
    dd24:	6878      	ldr	r0, [r7, #4]
    dd26:	f7ff fec5 	bl	dab4 <mp_obj_get_type>
    dd2a:	4603      	mov	r3, r0
    dd2c:	691b      	ldr	r3, [r3, #16]
    dd2e:	60fb      	str	r3, [r7, #12]
    if (call != mp_obj_instance_call) {
    dd30:	68fb      	ldr	r3, [r7, #12]
    dd32:	4a09      	ldr	r2, [pc, #36]	; (dd58 <mp_obj_is_callable+0x3c>)
    dd34:	4293      	cmp	r3, r2
    dd36:	d006      	beq.n	dd46 <mp_obj_is_callable+0x2a>
        return call != NULL;
    dd38:	68fb      	ldr	r3, [r7, #12]
    dd3a:	2b00      	cmp	r3, #0
    dd3c:	bf14      	ite	ne
    dd3e:	2301      	movne	r3, #1
    dd40:	2300      	moveq	r3, #0
    dd42:	b2db      	uxtb	r3, r3
    dd44:	e003      	b.n	dd4e <mp_obj_is_callable+0x32>
    }
    return mp_obj_instance_is_callable(o_in);
    dd46:	6878      	ldr	r0, [r7, #4]
    dd48:	f008 fff6 	bl	16d38 <mp_obj_instance_is_callable>
    dd4c:	4603      	mov	r3, r0
}
    dd4e:	4618      	mov	r0, r3
    dd50:	3710      	adds	r7, #16
    dd52:	46bd      	mov	sp, r7
    dd54:	bd80      	pop	{r7, pc}
    dd56:	bf00      	nop
    dd58:	00016d69 	.word	0x00016d69

0000dd5c <mp_obj_equal>:
// This means that False==0 and True==1 are true expressions.
//
// Furthermore, from the v3.4.2 code for object.c: "Practical amendments: If rich
// comparison returns NotImplemented, == and != are decided by comparing the object
// pointer."
bool mp_obj_equal(mp_obj_t o1, mp_obj_t o2) {
    dd5c:	b580      	push	{r7, lr}
    dd5e:	b086      	sub	sp, #24
    dd60:	af00      	add	r7, sp, #0
    dd62:	6078      	str	r0, [r7, #4]
    dd64:	6039      	str	r1, [r7, #0]
    // Float (and complex) NaN is never equal to anything, not even itself,
    // so we must have a special check here to cover those cases.
    if (o1 == o2
    dd66:	687a      	ldr	r2, [r7, #4]
    dd68:	683b      	ldr	r3, [r7, #0]
    dd6a:	429a      	cmp	r2, r3
    dd6c:	d101      	bne.n	dd72 <mp_obj_equal+0x16>
        #endif
        #if MICROPY_PY_BUILTINS_COMPLEX
        && !MP_OBJ_IS_TYPE(o1, &mp_type_complex)
        #endif
        ) {
        return true;
    dd6e:	2301      	movs	r3, #1
    dd70:	e073      	b.n	de5a <mp_obj_equal+0xfe>
    }
    if (o1 == mp_const_none || o2 == mp_const_none) {
    dd72:	687b      	ldr	r3, [r7, #4]
    dd74:	4a3b      	ldr	r2, [pc, #236]	; (de64 <mp_obj_equal+0x108>)
    dd76:	4293      	cmp	r3, r2
    dd78:	d003      	beq.n	dd82 <mp_obj_equal+0x26>
    dd7a:	683b      	ldr	r3, [r7, #0]
    dd7c:	4a39      	ldr	r2, [pc, #228]	; (de64 <mp_obj_equal+0x108>)
    dd7e:	4293      	cmp	r3, r2
    dd80:	d101      	bne.n	dd86 <mp_obj_equal+0x2a>
        return false;
    dd82:	2300      	movs	r3, #0
    dd84:	e069      	b.n	de5a <mp_obj_equal+0xfe>
    }

    // fast path for small ints
    if (MP_OBJ_IS_SMALL_INT(o1)) {
    dd86:	6878      	ldr	r0, [r7, #4]
    dd88:	f7ff fe5e 	bl	da48 <MP_OBJ_IS_SMALL_INT>
    dd8c:	4603      	mov	r3, r0
    dd8e:	2b00      	cmp	r3, #0
    dd90:	d00d      	beq.n	ddae <mp_obj_equal+0x52>
        if (MP_OBJ_IS_SMALL_INT(o2)) {
    dd92:	6838      	ldr	r0, [r7, #0]
    dd94:	f7ff fe58 	bl	da48 <MP_OBJ_IS_SMALL_INT>
    dd98:	4603      	mov	r3, r0
    dd9a:	2b00      	cmp	r3, #0
    dd9c:	d001      	beq.n	dda2 <mp_obj_equal+0x46>
            // both SMALL_INT, and not equal if we get here
            return false;
    dd9e:	2300      	movs	r3, #0
    dda0:	e05b      	b.n	de5a <mp_obj_equal+0xfe>
        } else {
            mp_obj_t temp = o2; o2 = o1; o1 = temp;
    dda2:	683b      	ldr	r3, [r7, #0]
    dda4:	617b      	str	r3, [r7, #20]
    dda6:	687b      	ldr	r3, [r7, #4]
    dda8:	603b      	str	r3, [r7, #0]
    ddaa:	697b      	ldr	r3, [r7, #20]
    ddac:	607b      	str	r3, [r7, #4]
            // fall through to generic op
        }
    }

    // fast path for strings
    if (MP_OBJ_IS_STR(o1)) {
    ddae:	6878      	ldr	r0, [r7, #4]
    ddb0:	f7ff fe5c 	bl	da6c <MP_OBJ_IS_QSTR>
    ddb4:	4603      	mov	r3, r0
    ddb6:	2b00      	cmp	r3, #0
    ddb8:	d10a      	bne.n	ddd0 <mp_obj_equal+0x74>
    ddba:	6878      	ldr	r0, [r7, #4]
    ddbc:	f7ff fe68 	bl	da90 <MP_OBJ_IS_OBJ>
    ddc0:	4603      	mov	r3, r0
    ddc2:	2b00      	cmp	r3, #0
    ddc4:	d01b      	beq.n	ddfe <mp_obj_equal+0xa2>
    ddc6:	687b      	ldr	r3, [r7, #4]
    ddc8:	681b      	ldr	r3, [r3, #0]
    ddca:	4a27      	ldr	r2, [pc, #156]	; (de68 <mp_obj_equal+0x10c>)
    ddcc:	4293      	cmp	r3, r2
    ddce:	d116      	bne.n	ddfe <mp_obj_equal+0xa2>
        if (MP_OBJ_IS_STR(o2)) {
    ddd0:	6838      	ldr	r0, [r7, #0]
    ddd2:	f7ff fe4b 	bl	da6c <MP_OBJ_IS_QSTR>
    ddd6:	4603      	mov	r3, r0
    ddd8:	2b00      	cmp	r3, #0
    ddda:	d10a      	bne.n	ddf2 <mp_obj_equal+0x96>
    dddc:	6838      	ldr	r0, [r7, #0]
    ddde:	f7ff fe57 	bl	da90 <MP_OBJ_IS_OBJ>
    dde2:	4603      	mov	r3, r0
    dde4:	2b00      	cmp	r3, #0
    dde6:	d01b      	beq.n	de20 <mp_obj_equal+0xc4>
    dde8:	683b      	ldr	r3, [r7, #0]
    ddea:	681b      	ldr	r3, [r3, #0]
    ddec:	4a1e      	ldr	r2, [pc, #120]	; (de68 <mp_obj_equal+0x10c>)
    ddee:	4293      	cmp	r3, r2
    ddf0:	d116      	bne.n	de20 <mp_obj_equal+0xc4>
            // both strings, use special function
            return mp_obj_str_equal(o1, o2);
    ddf2:	6839      	ldr	r1, [r7, #0]
    ddf4:	6878      	ldr	r0, [r7, #4]
    ddf6:	f007 fc9d 	bl	15734 <mp_obj_str_equal>
    ddfa:	4603      	mov	r3, r0
    ddfc:	e02d      	b.n	de5a <mp_obj_equal+0xfe>
        } else {
            // a string is never equal to anything else
            goto str_cmp_err;
        }
    } else if (MP_OBJ_IS_STR(o2)) {
    ddfe:	6838      	ldr	r0, [r7, #0]
    de00:	f7ff fe34 	bl	da6c <MP_OBJ_IS_QSTR>
    de04:	4603      	mov	r3, r0
    de06:	2b00      	cmp	r3, #0
    de08:	d10a      	bne.n	de20 <mp_obj_equal+0xc4>
    de0a:	6838      	ldr	r0, [r7, #0]
    de0c:	f7ff fe40 	bl	da90 <MP_OBJ_IS_OBJ>
    de10:	4603      	mov	r3, r0
    de12:	2b00      	cmp	r3, #0
    de14:	d006      	beq.n	de24 <mp_obj_equal+0xc8>
    de16:	683b      	ldr	r3, [r7, #0]
    de18:	681b      	ldr	r3, [r3, #0]
    de1a:	4a13      	ldr	r2, [pc, #76]	; (de68 <mp_obj_equal+0x10c>)
    de1c:	4293      	cmp	r3, r2
    de1e:	d101      	bne.n	de24 <mp_obj_equal+0xc8>
        #if MICROPY_PY_STR_BYTES_CMP_WARN
        if (MP_OBJ_IS_TYPE(o1, &mp_type_bytes) || MP_OBJ_IS_TYPE(o2, &mp_type_bytes)) {
            mp_warning("Comparison between bytes and str");
        }
        #endif
        return false;
    de20:	2300      	movs	r3, #0
    de22:	e01a      	b.n	de5a <mp_obj_equal+0xfe>
    }

    // generic type, call binary_op(MP_BINARY_OP_EQUAL)
    mp_obj_type_t *type = mp_obj_get_type(o1);
    de24:	6878      	ldr	r0, [r7, #4]
    de26:	f7ff fe45 	bl	dab4 <mp_obj_get_type>
    de2a:	6138      	str	r0, [r7, #16]
    if (type->binary_op != NULL) {
    de2c:	693b      	ldr	r3, [r7, #16]
    de2e:	699b      	ldr	r3, [r3, #24]
    de30:	2b00      	cmp	r3, #0
    de32:	d011      	beq.n	de58 <mp_obj_equal+0xfc>
        mp_obj_t r = type->binary_op(MP_BINARY_OP_EQUAL, o1, o2);
    de34:	693b      	ldr	r3, [r7, #16]
    de36:	699b      	ldr	r3, [r3, #24]
    de38:	683a      	ldr	r2, [r7, #0]
    de3a:	6879      	ldr	r1, [r7, #4]
    de3c:	2002      	movs	r0, #2
    de3e:	4798      	blx	r3
    de40:	60f8      	str	r0, [r7, #12]
        if (r != MP_OBJ_NULL) {
    de42:	68fb      	ldr	r3, [r7, #12]
    de44:	2b00      	cmp	r3, #0
    de46:	d007      	beq.n	de58 <mp_obj_equal+0xfc>
            return r == mp_const_true ? true : false;
    de48:	68fb      	ldr	r3, [r7, #12]
    de4a:	4a08      	ldr	r2, [pc, #32]	; (de6c <mp_obj_equal+0x110>)
    de4c:	4293      	cmp	r3, r2
    de4e:	bf0c      	ite	eq
    de50:	2301      	moveq	r3, #1
    de52:	2300      	movne	r3, #0
    de54:	b2db      	uxtb	r3, r3
    de56:	e000      	b.n	de5a <mp_obj_equal+0xfe>
        }
    }

    // equality not implemented, and objects are not the same object, so
    // they are defined as not equal
    return false;
    de58:	2300      	movs	r3, #0
}
    de5a:	4618      	mov	r0, r3
    de5c:	3718      	adds	r7, #24
    de5e:	46bd      	mov	sp, r7
    de60:	bd80      	pop	{r7, pc}
    de62:	bf00      	nop
    de64:	0002345c 	.word	0x0002345c
    de68:	00023b0c 	.word	0x00023b0c
    de6c:	00021b78 	.word	0x00021b78

0000de70 <mp_obj_get_int>:

mp_int_t mp_obj_get_int(mp_const_obj_t arg) {
    de70:	b580      	push	{r7, lr}
    de72:	b082      	sub	sp, #8
    de74:	af00      	add	r7, sp, #0
    de76:	6078      	str	r0, [r7, #4]
    // This function essentially performs implicit type conversion to int
    // Note that Python does NOT provide implicit type conversion from
    // float to int in the core expression language, try some_list[1.0].
    if (arg == mp_const_false) {
    de78:	687b      	ldr	r3, [r7, #4]
    de7a:	4a15      	ldr	r2, [pc, #84]	; (ded0 <mp_obj_get_int+0x60>)
    de7c:	4293      	cmp	r3, r2
    de7e:	d101      	bne.n	de84 <mp_obj_get_int+0x14>
        return 0;
    de80:	2300      	movs	r3, #0
    de82:	e021      	b.n	dec8 <mp_obj_get_int+0x58>
    } else if (arg == mp_const_true) {
    de84:	687b      	ldr	r3, [r7, #4]
    de86:	4a13      	ldr	r2, [pc, #76]	; (ded4 <mp_obj_get_int+0x64>)
    de88:	4293      	cmp	r3, r2
    de8a:	d101      	bne.n	de90 <mp_obj_get_int+0x20>
        return 1;
    de8c:	2301      	movs	r3, #1
    de8e:	e01b      	b.n	dec8 <mp_obj_get_int+0x58>
    } else if (MP_OBJ_IS_SMALL_INT(arg)) {
    de90:	6878      	ldr	r0, [r7, #4]
    de92:	f7ff fdd9 	bl	da48 <MP_OBJ_IS_SMALL_INT>
    de96:	4603      	mov	r3, r0
    de98:	2b00      	cmp	r3, #0
    de9a:	d002      	beq.n	dea2 <mp_obj_get_int+0x32>
        return MP_OBJ_SMALL_INT_VALUE(arg);
    de9c:	687b      	ldr	r3, [r7, #4]
    de9e:	105b      	asrs	r3, r3, #1
    dea0:	e012      	b.n	dec8 <mp_obj_get_int+0x58>
    } else if (MP_OBJ_IS_TYPE(arg, &mp_type_int)) {
    dea2:	6878      	ldr	r0, [r7, #4]
    dea4:	f7ff fdf4 	bl	da90 <MP_OBJ_IS_OBJ>
    dea8:	4603      	mov	r3, r0
    deaa:	2b00      	cmp	r3, #0
    deac:	d009      	beq.n	dec2 <mp_obj_get_int+0x52>
    deae:	687b      	ldr	r3, [r7, #4]
    deb0:	681b      	ldr	r3, [r3, #0]
    deb2:	4a09      	ldr	r2, [pc, #36]	; (ded8 <mp_obj_get_int+0x68>)
    deb4:	4293      	cmp	r3, r2
    deb6:	d104      	bne.n	dec2 <mp_obj_get_int+0x52>
        return mp_obj_int_get_checked(arg);
    deb8:	6878      	ldr	r0, [r7, #4]
    deba:	f002 fea7 	bl	10c0c <mp_obj_int_get_checked>
    debe:	4603      	mov	r3, r0
    dec0:	e002      	b.n	dec8 <mp_obj_get_int+0x58>
    } else {
        if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
            mp_raise_TypeError("can't convert to int");
    dec2:	4806      	ldr	r0, [pc, #24]	; (dedc <mp_obj_get_int+0x6c>)
    dec4:	f7ff f996 	bl	d1f4 <mp_raise_TypeError>
        } else {
            nlr_raise(mp_obj_new_exception_msg_varg(&mp_type_TypeError,
                "can't convert %s to int", mp_obj_get_type_str(arg)));
        }
    }
}
    dec8:	4618      	mov	r0, r3
    deca:	3708      	adds	r7, #8
    decc:	46bd      	mov	sp, r7
    dece:	bd80      	pop	{r7, pc}
    ded0:	00021b70 	.word	0x00021b70
    ded4:	00021b78 	.word	0x00021b78
    ded8:	00022ea8 	.word	0x00022ea8
    dedc:	000219e4 	.word	0x000219e4

0000dee0 <mp_obj_get_int_truncated>:

mp_int_t mp_obj_get_int_truncated(mp_const_obj_t arg) {
    dee0:	b580      	push	{r7, lr}
    dee2:	b082      	sub	sp, #8
    dee4:	af00      	add	r7, sp, #0
    dee6:	6078      	str	r0, [r7, #4]
    if (MP_OBJ_IS_INT(arg)) {
    dee8:	6878      	ldr	r0, [r7, #4]
    deea:	f7ff fdad 	bl	da48 <MP_OBJ_IS_SMALL_INT>
    deee:	4603      	mov	r3, r0
    def0:	2b00      	cmp	r3, #0
    def2:	d10a      	bne.n	df0a <mp_obj_get_int_truncated+0x2a>
    def4:	6878      	ldr	r0, [r7, #4]
    def6:	f7ff fdcb 	bl	da90 <MP_OBJ_IS_OBJ>
    defa:	4603      	mov	r3, r0
    defc:	2b00      	cmp	r3, #0
    defe:	d009      	beq.n	df14 <mp_obj_get_int_truncated+0x34>
    df00:	687b      	ldr	r3, [r7, #4]
    df02:	681b      	ldr	r3, [r3, #0]
    df04:	4a07      	ldr	r2, [pc, #28]	; (df24 <mp_obj_get_int_truncated+0x44>)
    df06:	4293      	cmp	r3, r2
    df08:	d104      	bne.n	df14 <mp_obj_get_int_truncated+0x34>
        return mp_obj_int_get_truncated(arg);
    df0a:	6878      	ldr	r0, [r7, #4]
    df0c:	f002 fe72 	bl	10bf4 <mp_obj_int_get_truncated>
    df10:	4603      	mov	r3, r0
    df12:	e003      	b.n	df1c <mp_obj_get_int_truncated+0x3c>
    } else {
        return mp_obj_get_int(arg);
    df14:	6878      	ldr	r0, [r7, #4]
    df16:	f7ff ffab 	bl	de70 <mp_obj_get_int>
    df1a:	4603      	mov	r3, r0
    }
}
    df1c:	4618      	mov	r0, r3
    df1e:	3708      	adds	r7, #8
    df20:	46bd      	mov	sp, r7
    df22:	bd80      	pop	{r7, pc}
    df24:	00022ea8 	.word	0x00022ea8

0000df28 <mp_obj_get_int_maybe>:

// returns false if arg is not of integral type
// returns true and sets *value if it is of integral type
// can throw OverflowError if arg is of integral type, but doesn't fit in a mp_int_t
bool mp_obj_get_int_maybe(mp_const_obj_t arg, mp_int_t *value) {
    df28:	b580      	push	{r7, lr}
    df2a:	b082      	sub	sp, #8
    df2c:	af00      	add	r7, sp, #0
    df2e:	6078      	str	r0, [r7, #4]
    df30:	6039      	str	r1, [r7, #0]
    if (arg == mp_const_false) {
    df32:	687b      	ldr	r3, [r7, #4]
    df34:	4a19      	ldr	r2, [pc, #100]	; (df9c <mp_obj_get_int_maybe+0x74>)
    df36:	4293      	cmp	r3, r2
    df38:	d103      	bne.n	df42 <mp_obj_get_int_maybe+0x1a>
        *value = 0;
    df3a:	683b      	ldr	r3, [r7, #0]
    df3c:	2200      	movs	r2, #0
    df3e:	601a      	str	r2, [r3, #0]
    df40:	e026      	b.n	df90 <mp_obj_get_int_maybe+0x68>
    } else if (arg == mp_const_true) {
    df42:	687b      	ldr	r3, [r7, #4]
    df44:	4a16      	ldr	r2, [pc, #88]	; (dfa0 <mp_obj_get_int_maybe+0x78>)
    df46:	4293      	cmp	r3, r2
    df48:	d103      	bne.n	df52 <mp_obj_get_int_maybe+0x2a>
        *value = 1;
    df4a:	683b      	ldr	r3, [r7, #0]
    df4c:	2201      	movs	r2, #1
    df4e:	601a      	str	r2, [r3, #0]
    df50:	e01e      	b.n	df90 <mp_obj_get_int_maybe+0x68>
    } else if (MP_OBJ_IS_SMALL_INT(arg)) {
    df52:	6878      	ldr	r0, [r7, #4]
    df54:	f7ff fd78 	bl	da48 <MP_OBJ_IS_SMALL_INT>
    df58:	4603      	mov	r3, r0
    df5a:	2b00      	cmp	r3, #0
    df5c:	d004      	beq.n	df68 <mp_obj_get_int_maybe+0x40>
        *value = MP_OBJ_SMALL_INT_VALUE(arg);
    df5e:	687b      	ldr	r3, [r7, #4]
    df60:	105a      	asrs	r2, r3, #1
    df62:	683b      	ldr	r3, [r7, #0]
    df64:	601a      	str	r2, [r3, #0]
    df66:	e013      	b.n	df90 <mp_obj_get_int_maybe+0x68>
    } else if (MP_OBJ_IS_TYPE(arg, &mp_type_int)) {
    df68:	6878      	ldr	r0, [r7, #4]
    df6a:	f7ff fd91 	bl	da90 <MP_OBJ_IS_OBJ>
    df6e:	4603      	mov	r3, r0
    df70:	2b00      	cmp	r3, #0
    df72:	d00b      	beq.n	df8c <mp_obj_get_int_maybe+0x64>
    df74:	687b      	ldr	r3, [r7, #4]
    df76:	681b      	ldr	r3, [r3, #0]
    df78:	4a0a      	ldr	r2, [pc, #40]	; (dfa4 <mp_obj_get_int_maybe+0x7c>)
    df7a:	4293      	cmp	r3, r2
    df7c:	d106      	bne.n	df8c <mp_obj_get_int_maybe+0x64>
        *value = mp_obj_int_get_checked(arg);
    df7e:	6878      	ldr	r0, [r7, #4]
    df80:	f002 fe44 	bl	10c0c <mp_obj_int_get_checked>
    df84:	4602      	mov	r2, r0
    df86:	683b      	ldr	r3, [r7, #0]
    df88:	601a      	str	r2, [r3, #0]
    df8a:	e001      	b.n	df90 <mp_obj_get_int_maybe+0x68>
    } else {
        return false;
    df8c:	2300      	movs	r3, #0
    df8e:	e000      	b.n	df92 <mp_obj_get_int_maybe+0x6a>
    }
    return true;
    df90:	2301      	movs	r3, #1
}
    df92:	4618      	mov	r0, r3
    df94:	3708      	adds	r7, #8
    df96:	46bd      	mov	sp, r7
    df98:	bd80      	pop	{r7, pc}
    df9a:	bf00      	nop
    df9c:	00021b70 	.word	0x00021b70
    dfa0:	00021b78 	.word	0x00021b78
    dfa4:	00022ea8 	.word	0x00022ea8

0000dfa8 <mp_obj_get_array>:
}
#endif
#endif

// note: returned value in *items may point to the interior of a GC block
void mp_obj_get_array(mp_obj_t o, size_t *len, mp_obj_t **items) {
    dfa8:	b580      	push	{r7, lr}
    dfaa:	b084      	sub	sp, #16
    dfac:	af00      	add	r7, sp, #0
    dfae:	60f8      	str	r0, [r7, #12]
    dfb0:	60b9      	str	r1, [r7, #8]
    dfb2:	607a      	str	r2, [r7, #4]
    if (MP_OBJ_IS_TYPE(o, &mp_type_tuple)) {
    dfb4:	68f8      	ldr	r0, [r7, #12]
    dfb6:	f7ff fd6b 	bl	da90 <MP_OBJ_IS_OBJ>
    dfba:	4603      	mov	r3, r0
    dfbc:	2b00      	cmp	r3, #0
    dfbe:	d00a      	beq.n	dfd6 <mp_obj_get_array+0x2e>
    dfc0:	68fb      	ldr	r3, [r7, #12]
    dfc2:	681b      	ldr	r3, [r3, #0]
    dfc4:	4a10      	ldr	r2, [pc, #64]	; (e008 <mp_obj_get_array+0x60>)
    dfc6:	4293      	cmp	r3, r2
    dfc8:	d105      	bne.n	dfd6 <mp_obj_get_array+0x2e>
        mp_obj_tuple_get(o, len, items);
    dfca:	687a      	ldr	r2, [r7, #4]
    dfcc:	68b9      	ldr	r1, [r7, #8]
    dfce:	68f8      	ldr	r0, [r7, #12]
    dfd0:	f008 f884 	bl	160dc <mp_obj_tuple_get>
    dfd4:	e013      	b.n	dffe <mp_obj_get_array+0x56>
    } else if (MP_OBJ_IS_TYPE(o, &mp_type_list)) {
    dfd6:	68f8      	ldr	r0, [r7, #12]
    dfd8:	f7ff fd5a 	bl	da90 <MP_OBJ_IS_OBJ>
    dfdc:	4603      	mov	r3, r0
    dfde:	2b00      	cmp	r3, #0
    dfe0:	d00a      	beq.n	dff8 <mp_obj_get_array+0x50>
    dfe2:	68fb      	ldr	r3, [r7, #12]
    dfe4:	681b      	ldr	r3, [r3, #0]
    dfe6:	4a09      	ldr	r2, [pc, #36]	; (e00c <mp_obj_get_array+0x64>)
    dfe8:	4293      	cmp	r3, r2
    dfea:	d105      	bne.n	dff8 <mp_obj_get_array+0x50>
        mp_obj_list_get(o, len, items);
    dfec:	687a      	ldr	r2, [r7, #4]
    dfee:	68b9      	ldr	r1, [r7, #8]
    dff0:	68f8      	ldr	r0, [r7, #12]
    dff2:	f003 fdb3 	bl	11b5c <mp_obj_list_get>
    dff6:	e002      	b.n	dffe <mp_obj_get_array+0x56>
    } else {
        if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
            mp_raise_TypeError("expected tuple/list");
    dff8:	4805      	ldr	r0, [pc, #20]	; (e010 <mp_obj_get_array+0x68>)
    dffa:	f7ff f8fb 	bl	d1f4 <mp_raise_TypeError>
        } else {
            nlr_raise(mp_obj_new_exception_msg_varg(&mp_type_TypeError,
                "object '%s' is not a tuple or list", mp_obj_get_type_str(o)));
        }
    }
}
    dffe:	bf00      	nop
    e000:	3710      	adds	r7, #16
    e002:	46bd      	mov	sp, r7
    e004:	bd80      	pop	{r7, pc}
    e006:	bf00      	nop
    e008:	00023d90 	.word	0x00023d90
    e00c:	00023114 	.word	0x00023114
    e010:	000219fc 	.word	0x000219fc

0000e014 <mp_obj_get_array_fixed_n>:

// note: returned value in *items may point to the interior of a GC block
void mp_obj_get_array_fixed_n(mp_obj_t o, size_t len, mp_obj_t **items) {
    e014:	b580      	push	{r7, lr}
    e016:	b086      	sub	sp, #24
    e018:	af00      	add	r7, sp, #0
    e01a:	60f8      	str	r0, [r7, #12]
    e01c:	60b9      	str	r1, [r7, #8]
    e01e:	607a      	str	r2, [r7, #4]
    size_t seq_len;
    mp_obj_get_array(o, &seq_len, items);
    e020:	f107 0314 	add.w	r3, r7, #20
    e024:	687a      	ldr	r2, [r7, #4]
    e026:	4619      	mov	r1, r3
    e028:	68f8      	ldr	r0, [r7, #12]
    e02a:	f7ff ffbd 	bl	dfa8 <mp_obj_get_array>
    if (seq_len != len) {
    e02e:	697a      	ldr	r2, [r7, #20]
    e030:	68bb      	ldr	r3, [r7, #8]
    e032:	429a      	cmp	r2, r3
    e034:	d002      	beq.n	e03c <mp_obj_get_array_fixed_n+0x28>
        if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
            mp_raise_ValueError("tuple/list has wrong length");
    e036:	4803      	ldr	r0, [pc, #12]	; (e044 <mp_obj_get_array_fixed_n+0x30>)
    e038:	f7ff f8d2 	bl	d1e0 <mp_raise_ValueError>
        } else {
            nlr_raise(mp_obj_new_exception_msg_varg(&mp_type_ValueError,
                "requested length %d but object has length %d", (int)len, (int)seq_len));
        }
    }
}
    e03c:	bf00      	nop
    e03e:	3718      	adds	r7, #24
    e040:	46bd      	mov	sp, r7
    e042:	bd80      	pop	{r7, pc}
    e044:	00021a10 	.word	0x00021a10

0000e048 <mp_get_index>:

// is_slice determines whether the index is a slice index
size_t mp_get_index(const mp_obj_type_t *type, size_t len, mp_obj_t index, bool is_slice) {
    e048:	b580      	push	{r7, lr}
    e04a:	b086      	sub	sp, #24
    e04c:	af00      	add	r7, sp, #0
    e04e:	60f8      	str	r0, [r7, #12]
    e050:	60b9      	str	r1, [r7, #8]
    e052:	607a      	str	r2, [r7, #4]
    e054:	70fb      	strb	r3, [r7, #3]
    mp_int_t i;
    if (MP_OBJ_IS_SMALL_INT(index)) {
    e056:	6878      	ldr	r0, [r7, #4]
    e058:	f7ff fcf6 	bl	da48 <MP_OBJ_IS_SMALL_INT>
    e05c:	4603      	mov	r3, r0
    e05e:	2b00      	cmp	r3, #0
    e060:	d003      	beq.n	e06a <mp_get_index+0x22>
        i = MP_OBJ_SMALL_INT_VALUE(index);
    e062:	687b      	ldr	r3, [r7, #4]
    e064:	105b      	asrs	r3, r3, #1
    e066:	617b      	str	r3, [r7, #20]
    e068:	e00e      	b.n	e088 <mp_get_index+0x40>
    } else if (!mp_obj_get_int_maybe(index, &i)) {
    e06a:	f107 0314 	add.w	r3, r7, #20
    e06e:	4619      	mov	r1, r3
    e070:	6878      	ldr	r0, [r7, #4]
    e072:	f7ff ff59 	bl	df28 <mp_obj_get_int_maybe>
    e076:	4603      	mov	r3, r0
    e078:	f083 0301 	eor.w	r3, r3, #1
    e07c:	b2db      	uxtb	r3, r3
    e07e:	2b00      	cmp	r3, #0
    e080:	d002      	beq.n	e088 <mp_get_index+0x40>
        if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
            mp_raise_TypeError("indices must be integers");
    e082:	4816      	ldr	r0, [pc, #88]	; (e0dc <mp_get_index+0x94>)
    e084:	f7ff f8b6 	bl	d1f4 <mp_raise_TypeError>
                "%q indices must be integers, not %s",
                type->name, mp_obj_get_type_str(index)));
        }
    }

    if (i < 0) {
    e088:	697b      	ldr	r3, [r7, #20]
    e08a:	2b00      	cmp	r3, #0
    e08c:	da04      	bge.n	e098 <mp_get_index+0x50>
        i += len;
    e08e:	697b      	ldr	r3, [r7, #20]
    e090:	461a      	mov	r2, r3
    e092:	68bb      	ldr	r3, [r7, #8]
    e094:	4413      	add	r3, r2
    e096:	617b      	str	r3, [r7, #20]
    }
    if (is_slice) {
    e098:	78fb      	ldrb	r3, [r7, #3]
    e09a:	2b00      	cmp	r3, #0
    e09c:	d00d      	beq.n	e0ba <mp_get_index+0x72>
        if (i < 0) {
    e09e:	697b      	ldr	r3, [r7, #20]
    e0a0:	2b00      	cmp	r3, #0
    e0a2:	da02      	bge.n	e0aa <mp_get_index+0x62>
            i = 0;
    e0a4:	2300      	movs	r3, #0
    e0a6:	617b      	str	r3, [r7, #20]
    e0a8:	e013      	b.n	e0d2 <mp_get_index+0x8a>
        } else if ((mp_uint_t)i > len) {
    e0aa:	697b      	ldr	r3, [r7, #20]
    e0ac:	461a      	mov	r2, r3
    e0ae:	68bb      	ldr	r3, [r7, #8]
    e0b0:	429a      	cmp	r2, r3
    e0b2:	d90e      	bls.n	e0d2 <mp_get_index+0x8a>
            i = len;
    e0b4:	68bb      	ldr	r3, [r7, #8]
    e0b6:	617b      	str	r3, [r7, #20]
    e0b8:	e00b      	b.n	e0d2 <mp_get_index+0x8a>
        }
    } else {
        if (i < 0 || (mp_uint_t)i >= len) {
    e0ba:	697b      	ldr	r3, [r7, #20]
    e0bc:	2b00      	cmp	r3, #0
    e0be:	db04      	blt.n	e0ca <mp_get_index+0x82>
    e0c0:	697b      	ldr	r3, [r7, #20]
    e0c2:	461a      	mov	r2, r3
    e0c4:	68bb      	ldr	r3, [r7, #8]
    e0c6:	429a      	cmp	r2, r3
    e0c8:	d303      	bcc.n	e0d2 <mp_get_index+0x8a>
            if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
                mp_raise_msg(&mp_type_IndexError, "index out of range");
    e0ca:	4905      	ldr	r1, [pc, #20]	; (e0e0 <mp_get_index+0x98>)
    e0cc:	4805      	ldr	r0, [pc, #20]	; (e0e4 <mp_get_index+0x9c>)
    e0ce:	f7ff f86f 	bl	d1b0 <mp_raise_msg>
            }
        }
    }

    // By this point 0 <= i <= len and so fits in a size_t
    return (size_t)i;
    e0d2:	697b      	ldr	r3, [r7, #20]
}
    e0d4:	4618      	mov	r0, r3
    e0d6:	3718      	adds	r7, #24
    e0d8:	46bd      	mov	sp, r7
    e0da:	bd80      	pop	{r7, pc}
    e0dc:	00021a2c 	.word	0x00021a2c
    e0e0:	00021a48 	.word	0x00021a48
    e0e4:	0002247c 	.word	0x0002247c

0000e0e8 <mp_obj_id>:

mp_obj_t mp_obj_id(mp_obj_t o_in) {
    e0e8:	b580      	push	{r7, lr}
    e0ea:	b084      	sub	sp, #16
    e0ec:	af00      	add	r7, sp, #0
    e0ee:	6078      	str	r0, [r7, #4]
    mp_int_t id = (mp_int_t)o_in;
    e0f0:	687b      	ldr	r3, [r7, #4]
    e0f2:	60fb      	str	r3, [r7, #12]
    if (!MP_OBJ_IS_OBJ(o_in)) {
    e0f4:	6878      	ldr	r0, [r7, #4]
    e0f6:	f7ff fccb 	bl	da90 <MP_OBJ_IS_OBJ>
    e0fa:	4603      	mov	r3, r0
    e0fc:	f083 0301 	eor.w	r3, r3, #1
    e100:	b2db      	uxtb	r3, r3
    e102:	2b00      	cmp	r3, #0
    e104:	d004      	beq.n	e110 <mp_obj_id+0x28>
        return mp_obj_new_int(id);
    e106:	68f8      	ldr	r0, [r7, #12]
    e108:	f002 fd58 	bl	10bbc <mp_obj_new_int>
    e10c:	4603      	mov	r3, r0
    e10e:	e00c      	b.n	e12a <mp_obj_id+0x42>
    } else if (id >= 0) {
    e110:	68fb      	ldr	r3, [r7, #12]
    e112:	2b00      	cmp	r3, #0
    e114:	db04      	blt.n	e120 <mp_obj_id+0x38>
        // Many OSes and CPUs have affinity for putting "user" memories
        // into low half of address space, and "system" into upper half.
        // We're going to take advantage of that and return small int
        // (signed) for such "user" addresses.
        return MP_OBJ_NEW_SMALL_INT(id);
    e116:	68fb      	ldr	r3, [r7, #12]
    e118:	005b      	lsls	r3, r3, #1
    e11a:	f043 0301 	orr.w	r3, r3, #1
    e11e:	e004      	b.n	e12a <mp_obj_id+0x42>
    } else {
        // If that didn't work, well, let's return long int, just as
        // a (big) positive value, so it will never clash with the range
        // of small int returned in previous case.
        return mp_obj_new_int_from_uint((mp_uint_t)id);
    e120:	68fb      	ldr	r3, [r7, #12]
    e122:	4618      	mov	r0, r3
    e124:	f002 fd30 	bl	10b88 <mp_obj_new_int_from_uint>
    e128:	4603      	mov	r3, r0
    }
}
    e12a:	4618      	mov	r0, r3
    e12c:	3710      	adds	r7, #16
    e12e:	46bd      	mov	sp, r7
    e130:	bd80      	pop	{r7, pc}
    e132:	bf00      	nop

0000e134 <mp_obj_len>:

// will raise a TypeError if object has no length
mp_obj_t mp_obj_len(mp_obj_t o_in) {
    e134:	b580      	push	{r7, lr}
    e136:	b084      	sub	sp, #16
    e138:	af00      	add	r7, sp, #0
    e13a:	6078      	str	r0, [r7, #4]
    mp_obj_t len = mp_obj_len_maybe(o_in);
    e13c:	6878      	ldr	r0, [r7, #4]
    e13e:	f000 f80f 	bl	e160 <mp_obj_len_maybe>
    e142:	60f8      	str	r0, [r7, #12]
    if (len == MP_OBJ_NULL) {
    e144:	68fb      	ldr	r3, [r7, #12]
    e146:	2b00      	cmp	r3, #0
    e148:	d102      	bne.n	e150 <mp_obj_len+0x1c>
        if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
            mp_raise_TypeError("object has no len");
    e14a:	4804      	ldr	r0, [pc, #16]	; (e15c <mp_obj_len+0x28>)
    e14c:	f7ff f852 	bl	d1f4 <mp_raise_TypeError>
        } else {
            nlr_raise(mp_obj_new_exception_msg_varg(&mp_type_TypeError,
                "object of type '%s' has no len()", mp_obj_get_type_str(o_in)));
        }
    } else {
        return len;
    e150:	68fb      	ldr	r3, [r7, #12]
    }
}
    e152:	4618      	mov	r0, r3
    e154:	3710      	adds	r7, #16
    e156:	46bd      	mov	sp, r7
    e158:	bd80      	pop	{r7, pc}
    e15a:	bf00      	nop
    e15c:	00021a5c 	.word	0x00021a5c

0000e160 <mp_obj_len_maybe>:

// may return MP_OBJ_NULL
mp_obj_t mp_obj_len_maybe(mp_obj_t o_in) {
    e160:	b580      	push	{r7, lr}
    e162:	b084      	sub	sp, #16
    e164:	af00      	add	r7, sp, #0
    e166:	6078      	str	r0, [r7, #4]
    if (
#if !MICROPY_PY_BUILTINS_STR_UNICODE
        // It's simple - unicode is slow, non-unicode is fast
        MP_OBJ_IS_STR(o_in) ||
    e168:	6878      	ldr	r0, [r7, #4]
    e16a:	f7ff fc7f 	bl	da6c <MP_OBJ_IS_QSTR>
    e16e:	4603      	mov	r3, r0
    if (
    e170:	2b00      	cmp	r3, #0
    e172:	d115      	bne.n	e1a0 <mp_obj_len_maybe+0x40>
        MP_OBJ_IS_STR(o_in) ||
    e174:	6878      	ldr	r0, [r7, #4]
    e176:	f7ff fc8b 	bl	da90 <MP_OBJ_IS_OBJ>
    e17a:	4603      	mov	r3, r0
    e17c:	2b00      	cmp	r3, #0
    e17e:	d004      	beq.n	e18a <mp_obj_len_maybe+0x2a>
    e180:	687b      	ldr	r3, [r7, #4]
    e182:	681b      	ldr	r3, [r3, #0]
    e184:	4a1b      	ldr	r2, [pc, #108]	; (e1f4 <mp_obj_len_maybe+0x94>)
    e186:	4293      	cmp	r3, r2
    e188:	d00a      	beq.n	e1a0 <mp_obj_len_maybe+0x40>
#endif
        MP_OBJ_IS_TYPE(o_in, &mp_type_bytes)) {
    e18a:	6878      	ldr	r0, [r7, #4]
    e18c:	f7ff fc80 	bl	da90 <MP_OBJ_IS_OBJ>
    e190:	4603      	mov	r3, r0
        MP_OBJ_IS_STR(o_in) ||
    e192:	2b00      	cmp	r3, #0
    e194:	d019      	beq.n	e1ca <mp_obj_len_maybe+0x6a>
        MP_OBJ_IS_TYPE(o_in, &mp_type_bytes)) {
    e196:	687b      	ldr	r3, [r7, #4]
    e198:	681b      	ldr	r3, [r3, #0]
    e19a:	4a17      	ldr	r2, [pc, #92]	; (e1f8 <mp_obj_len_maybe+0x98>)
    e19c:	4293      	cmp	r3, r2
    e19e:	d114      	bne.n	e1ca <mp_obj_len_maybe+0x6a>
        GET_STR_LEN(o_in, l);
    e1a0:	6878      	ldr	r0, [r7, #4]
    e1a2:	f7ff fc63 	bl	da6c <MP_OBJ_IS_QSTR>
    e1a6:	4603      	mov	r3, r0
    e1a8:	2b00      	cmp	r3, #0
    e1aa:	d006      	beq.n	e1ba <mp_obj_len_maybe+0x5a>
    e1ac:	687b      	ldr	r3, [r7, #4]
    e1ae:	089b      	lsrs	r3, r3, #2
    e1b0:	4618      	mov	r0, r3
    e1b2:	f7f3 f8cb 	bl	134c <qstr_len>
    e1b6:	60f8      	str	r0, [r7, #12]
    e1b8:	e002      	b.n	e1c0 <mp_obj_len_maybe+0x60>
    e1ba:	687b      	ldr	r3, [r7, #4]
    e1bc:	689b      	ldr	r3, [r3, #8]
    e1be:	60fb      	str	r3, [r7, #12]
        return MP_OBJ_NEW_SMALL_INT(l);
    e1c0:	68fb      	ldr	r3, [r7, #12]
    e1c2:	005b      	lsls	r3, r3, #1
    e1c4:	f043 0301 	orr.w	r3, r3, #1
    e1c8:	e00f      	b.n	e1ea <mp_obj_len_maybe+0x8a>
    } else {
        mp_obj_type_t *type = mp_obj_get_type(o_in);
    e1ca:	6878      	ldr	r0, [r7, #4]
    e1cc:	f7ff fc72 	bl	dab4 <mp_obj_get_type>
    e1d0:	60b8      	str	r0, [r7, #8]
        if (type->unary_op != NULL) {
    e1d2:	68bb      	ldr	r3, [r7, #8]
    e1d4:	695b      	ldr	r3, [r3, #20]
    e1d6:	2b00      	cmp	r3, #0
    e1d8:	d006      	beq.n	e1e8 <mp_obj_len_maybe+0x88>
            return type->unary_op(MP_UNARY_OP_LEN, o_in);
    e1da:	68bb      	ldr	r3, [r7, #8]
    e1dc:	695b      	ldr	r3, [r3, #20]
    e1de:	6879      	ldr	r1, [r7, #4]
    e1e0:	2005      	movs	r0, #5
    e1e2:	4798      	blx	r3
    e1e4:	4603      	mov	r3, r0
    e1e6:	e000      	b.n	e1ea <mp_obj_len_maybe+0x8a>
        } else {
            return MP_OBJ_NULL;
    e1e8:	2300      	movs	r3, #0
        }
    }
}
    e1ea:	4618      	mov	r0, r3
    e1ec:	3710      	adds	r7, #16
    e1ee:	46bd      	mov	sp, r7
    e1f0:	bd80      	pop	{r7, pc}
    e1f2:	bf00      	nop
    e1f4:	00023b0c 	.word	0x00023b0c
    e1f8:	00023b48 	.word	0x00023b48

0000e1fc <mp_obj_subscr>:

mp_obj_t mp_obj_subscr(mp_obj_t base, mp_obj_t index, mp_obj_t value) {
    e1fc:	b580      	push	{r7, lr}
    e1fe:	b086      	sub	sp, #24
    e200:	af00      	add	r7, sp, #0
    e202:	60f8      	str	r0, [r7, #12]
    e204:	60b9      	str	r1, [r7, #8]
    e206:	607a      	str	r2, [r7, #4]
    mp_obj_type_t *type = mp_obj_get_type(base);
    e208:	68f8      	ldr	r0, [r7, #12]
    e20a:	f7ff fc53 	bl	dab4 <mp_obj_get_type>
    e20e:	6178      	str	r0, [r7, #20]
    if (type->subscr != NULL) {
    e210:	697b      	ldr	r3, [r7, #20]
    e212:	6a1b      	ldr	r3, [r3, #32]
    e214:	2b00      	cmp	r3, #0
    e216:	d00b      	beq.n	e230 <mp_obj_subscr+0x34>
        mp_obj_t ret = type->subscr(base, index, value);
    e218:	697b      	ldr	r3, [r7, #20]
    e21a:	6a1b      	ldr	r3, [r3, #32]
    e21c:	687a      	ldr	r2, [r7, #4]
    e21e:	68b9      	ldr	r1, [r7, #8]
    e220:	68f8      	ldr	r0, [r7, #12]
    e222:	4798      	blx	r3
    e224:	6138      	str	r0, [r7, #16]
        if (ret != MP_OBJ_NULL) {
    e226:	693b      	ldr	r3, [r7, #16]
    e228:	2b00      	cmp	r3, #0
    e22a:	d001      	beq.n	e230 <mp_obj_subscr+0x34>
            return ret;
    e22c:	693b      	ldr	r3, [r7, #16]
    e22e:	e00e      	b.n	e24e <mp_obj_subscr+0x52>
        }
        // TODO: call base classes here?
    }
    if (value == MP_OBJ_NULL) {
    e230:	687b      	ldr	r3, [r7, #4]
    e232:	2b00      	cmp	r3, #0
    e234:	d102      	bne.n	e23c <mp_obj_subscr+0x40>
        if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
            mp_raise_TypeError("object does not support item deletion");
    e236:	4808      	ldr	r0, [pc, #32]	; (e258 <mp_obj_subscr+0x5c>)
    e238:	f7fe ffdc 	bl	d1f4 <mp_raise_TypeError>
        } else {
            nlr_raise(mp_obj_new_exception_msg_varg(&mp_type_TypeError,
                "'%s' object does not support item deletion", mp_obj_get_type_str(base)));
        }
    } else if (value == MP_OBJ_SENTINEL) {
    e23c:	687b      	ldr	r3, [r7, #4]
    e23e:	2b08      	cmp	r3, #8
    e240:	d102      	bne.n	e248 <mp_obj_subscr+0x4c>
        if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
            mp_raise_TypeError("object is not subscriptable");
    e242:	4806      	ldr	r0, [pc, #24]	; (e25c <mp_obj_subscr+0x60>)
    e244:	f7fe ffd6 	bl	d1f4 <mp_raise_TypeError>
            nlr_raise(mp_obj_new_exception_msg_varg(&mp_type_TypeError,
                "'%s' object is not subscriptable", mp_obj_get_type_str(base)));
        }
    } else {
        if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
            mp_raise_TypeError("object does not support item assignment");
    e248:	4805      	ldr	r0, [pc, #20]	; (e260 <mp_obj_subscr+0x64>)
    e24a:	f7fe ffd3 	bl	d1f4 <mp_raise_TypeError>
        } else {
            nlr_raise(mp_obj_new_exception_msg_varg(&mp_type_TypeError,
                "'%s' object does not support item assignment", mp_obj_get_type_str(base)));
        }
    }
}
    e24e:	4618      	mov	r0, r3
    e250:	3718      	adds	r7, #24
    e252:	46bd      	mov	sp, r7
    e254:	bd80      	pop	{r7, pc}
    e256:	bf00      	nop
    e258:	00021a70 	.word	0x00021a70
    e25c:	00021a98 	.word	0x00021a98
    e260:	00021ab4 	.word	0x00021ab4

0000e264 <mp_identity>:

// Return input argument. Useful as .getiter for objects which are
// their own iterators, etc.
mp_obj_t mp_identity(mp_obj_t self) {
    e264:	b480      	push	{r7}
    e266:	b083      	sub	sp, #12
    e268:	af00      	add	r7, sp, #0
    e26a:	6078      	str	r0, [r7, #4]
    return self;
    e26c:	687b      	ldr	r3, [r7, #4]
}
    e26e:	4618      	mov	r0, r3
    e270:	370c      	adds	r7, #12
    e272:	46bd      	mov	sp, r7
    e274:	f85d 7b04 	ldr.w	r7, [sp], #4
    e278:	4770      	bx	lr
    e27a:	bf00      	nop

0000e27c <mp_identity_getiter>:
MP_DEFINE_CONST_FUN_OBJ_1(mp_identity_obj, mp_identity);

mp_obj_t mp_identity_getiter(mp_obj_t self, mp_obj_iter_buf_t *iter_buf) {
    e27c:	b480      	push	{r7}
    e27e:	b083      	sub	sp, #12
    e280:	af00      	add	r7, sp, #0
    e282:	6078      	str	r0, [r7, #4]
    e284:	6039      	str	r1, [r7, #0]
    (void)iter_buf;
    return self;
    e286:	687b      	ldr	r3, [r7, #4]
}
    e288:	4618      	mov	r0, r3
    e28a:	370c      	adds	r7, #12
    e28c:	46bd      	mov	sp, r7
    e28e:	f85d 7b04 	ldr.w	r7, [sp], #4
    e292:	4770      	bx	lr

0000e294 <mp_get_buffer>:

bool mp_get_buffer(mp_obj_t obj, mp_buffer_info_t *bufinfo, mp_uint_t flags) {
    e294:	b580      	push	{r7, lr}
    e296:	b086      	sub	sp, #24
    e298:	af00      	add	r7, sp, #0
    e29a:	60f8      	str	r0, [r7, #12]
    e29c:	60b9      	str	r1, [r7, #8]
    e29e:	607a      	str	r2, [r7, #4]
    mp_obj_type_t *type = mp_obj_get_type(obj);
    e2a0:	68f8      	ldr	r0, [r7, #12]
    e2a2:	f7ff fc07 	bl	dab4 <mp_obj_get_type>
    e2a6:	6178      	str	r0, [r7, #20]
    if (type->buffer_p.get_buffer == NULL) {
    e2a8:	697b      	ldr	r3, [r7, #20]
    e2aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    e2ac:	2b00      	cmp	r3, #0
    e2ae:	d101      	bne.n	e2b4 <mp_get_buffer+0x20>
        return false;
    e2b0:	2300      	movs	r3, #0
    e2b2:	e00c      	b.n	e2ce <mp_get_buffer+0x3a>
    }
    int ret = type->buffer_p.get_buffer(obj, bufinfo, flags);
    e2b4:	697b      	ldr	r3, [r7, #20]
    e2b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    e2b8:	687a      	ldr	r2, [r7, #4]
    e2ba:	68b9      	ldr	r1, [r7, #8]
    e2bc:	68f8      	ldr	r0, [r7, #12]
    e2be:	4798      	blx	r3
    e2c0:	6138      	str	r0, [r7, #16]
    if (ret != 0) {
    e2c2:	693b      	ldr	r3, [r7, #16]
    e2c4:	2b00      	cmp	r3, #0
    e2c6:	d001      	beq.n	e2cc <mp_get_buffer+0x38>
        return false;
    e2c8:	2300      	movs	r3, #0
    e2ca:	e000      	b.n	e2ce <mp_get_buffer+0x3a>
    }
    return true;
    e2cc:	2301      	movs	r3, #1
}
    e2ce:	4618      	mov	r0, r3
    e2d0:	3718      	adds	r7, #24
    e2d2:	46bd      	mov	sp, r7
    e2d4:	bd80      	pop	{r7, pc}
    e2d6:	bf00      	nop

0000e2d8 <mp_get_buffer_raise>:

void mp_get_buffer_raise(mp_obj_t obj, mp_buffer_info_t *bufinfo, mp_uint_t flags) {
    e2d8:	b580      	push	{r7, lr}
    e2da:	b084      	sub	sp, #16
    e2dc:	af00      	add	r7, sp, #0
    e2de:	60f8      	str	r0, [r7, #12]
    e2e0:	60b9      	str	r1, [r7, #8]
    e2e2:	607a      	str	r2, [r7, #4]
    if (!mp_get_buffer(obj, bufinfo, flags)) {
    e2e4:	687a      	ldr	r2, [r7, #4]
    e2e6:	68b9      	ldr	r1, [r7, #8]
    e2e8:	68f8      	ldr	r0, [r7, #12]
    e2ea:	f7ff ffd3 	bl	e294 <mp_get_buffer>
    e2ee:	4603      	mov	r3, r0
    e2f0:	f083 0301 	eor.w	r3, r3, #1
    e2f4:	b2db      	uxtb	r3, r3
    e2f6:	2b00      	cmp	r3, #0
    e2f8:	d002      	beq.n	e300 <mp_get_buffer_raise+0x28>
        mp_raise_TypeError("object with buffer protocol required");
    e2fa:	4803      	ldr	r0, [pc, #12]	; (e308 <mp_get_buffer_raise+0x30>)
    e2fc:	f7fe ff7a 	bl	d1f4 <mp_raise_TypeError>
    }
}
    e300:	bf00      	nop
    e302:	3710      	adds	r7, #16
    e304:	46bd      	mov	sp, r7
    e306:	bd80      	pop	{r7, pc}
    e308:	00021ae4 	.word	0x00021ae4

0000e30c <mp_generic_unary_op>:

mp_obj_t mp_generic_unary_op(mp_unary_op_t op, mp_obj_t o_in) {
    e30c:	b480      	push	{r7}
    e30e:	b083      	sub	sp, #12
    e310:	af00      	add	r7, sp, #0
    e312:	6078      	str	r0, [r7, #4]
    e314:	6039      	str	r1, [r7, #0]
    switch (op) {
    e316:	687b      	ldr	r3, [r7, #4]
    e318:	2b06      	cmp	r3, #6
    e31a:	d104      	bne.n	e326 <mp_generic_unary_op+0x1a>
        case MP_UNARY_OP_HASH: return MP_OBJ_NEW_SMALL_INT((mp_uint_t)o_in);
    e31c:	683b      	ldr	r3, [r7, #0]
    e31e:	005b      	lsls	r3, r3, #1
    e320:	f043 0301 	orr.w	r3, r3, #1
    e324:	e000      	b.n	e328 <mp_generic_unary_op+0x1c>
        default: return MP_OBJ_NULL; // op not supported
    e326:	2300      	movs	r3, #0
    }
}
    e328:	4618      	mov	r0, r3
    e32a:	370c      	adds	r7, #12
    e32c:	46bd      	mov	sp, r7
    e32e:	f85d 7b04 	ldr.w	r7, [sp], #4
    e332:	4770      	bx	lr

0000e334 <mp_obj_new_bool>:
static inline mp_obj_t mp_obj_new_bool(mp_int_t x) { return x ? mp_const_true : mp_const_false; }
    e334:	b480      	push	{r7}
    e336:	b083      	sub	sp, #12
    e338:	af00      	add	r7, sp, #0
    e33a:	6078      	str	r0, [r7, #4]
    e33c:	687b      	ldr	r3, [r7, #4]
    e33e:	2b00      	cmp	r3, #0
    e340:	d001      	beq.n	e346 <mp_obj_new_bool+0x12>
    e342:	4b04      	ldr	r3, [pc, #16]	; (e354 <mp_obj_new_bool+0x20>)
    e344:	e000      	b.n	e348 <mp_obj_new_bool+0x14>
    e346:	4b04      	ldr	r3, [pc, #16]	; (e358 <mp_obj_new_bool+0x24>)
    e348:	4618      	mov	r0, r3
    e34a:	370c      	adds	r7, #12
    e34c:	46bd      	mov	sp, r7
    e34e:	f85d 7b04 	ldr.w	r7, [sp], #4
    e352:	4770      	bx	lr
    e354:	00021b78 	.word	0x00021b78
    e358:	00021b70 	.word	0x00021b70

0000e35c <bool_print>:
typedef struct _mp_obj_bool_t {
    mp_obj_base_t base;
    bool value;
} mp_obj_bool_t;

STATIC void bool_print(const mp_print_t *print, mp_obj_t self_in, mp_print_kind_t kind) {
    e35c:	b580      	push	{r7, lr}
    e35e:	b086      	sub	sp, #24
    e360:	af00      	add	r7, sp, #0
    e362:	60f8      	str	r0, [r7, #12]
    e364:	60b9      	str	r1, [r7, #8]
    e366:	607a      	str	r2, [r7, #4]
    mp_obj_bool_t *self = MP_OBJ_TO_PTR(self_in);
    e368:	68bb      	ldr	r3, [r7, #8]
    e36a:	617b      	str	r3, [r7, #20]
            mp_print_str(print, "true");
        } else {
            mp_print_str(print, "false");
        }
    } else {
        if (self->value) {
    e36c:	697b      	ldr	r3, [r7, #20]
    e36e:	791b      	ldrb	r3, [r3, #4]
    e370:	2b00      	cmp	r3, #0
    e372:	d004      	beq.n	e37e <bool_print+0x22>
            mp_print_str(print, "True");
    e374:	4906      	ldr	r1, [pc, #24]	; (e390 <bool_print+0x34>)
    e376:	68f8      	ldr	r0, [r7, #12]
    e378:	f7f3 fb3c 	bl	19f4 <mp_print_str>
        } else {
            mp_print_str(print, "False");
        }
    }
}
    e37c:	e003      	b.n	e386 <bool_print+0x2a>
            mp_print_str(print, "False");
    e37e:	4905      	ldr	r1, [pc, #20]	; (e394 <bool_print+0x38>)
    e380:	68f8      	ldr	r0, [r7, #12]
    e382:	f7f3 fb37 	bl	19f4 <mp_print_str>
}
    e386:	bf00      	nop
    e388:	3718      	adds	r7, #24
    e38a:	46bd      	mov	sp, r7
    e38c:	bd80      	pop	{r7, pc}
    e38e:	bf00      	nop
    e390:	00021b24 	.word	0x00021b24
    e394:	00021b2c 	.word	0x00021b2c

0000e398 <bool_make_new>:

STATIC mp_obj_t bool_make_new(const mp_obj_type_t *type_in, size_t n_args, size_t n_kw, const mp_obj_t *args) {
    e398:	b580      	push	{r7, lr}
    e39a:	b086      	sub	sp, #24
    e39c:	af02      	add	r7, sp, #8
    e39e:	60f8      	str	r0, [r7, #12]
    e3a0:	60b9      	str	r1, [r7, #8]
    e3a2:	607a      	str	r2, [r7, #4]
    e3a4:	603b      	str	r3, [r7, #0]
    (void)type_in;
    mp_arg_check_num(n_args, n_kw, 0, 1, false);
    e3a6:	2300      	movs	r3, #0
    e3a8:	9300      	str	r3, [sp, #0]
    e3aa:	2301      	movs	r3, #1
    e3ac:	2200      	movs	r2, #0
    e3ae:	6879      	ldr	r1, [r7, #4]
    e3b0:	68b8      	ldr	r0, [r7, #8]
    e3b2:	f7fe ff8b 	bl	d2cc <mp_arg_check_num>

    if (n_args == 0) {
    e3b6:	68bb      	ldr	r3, [r7, #8]
    e3b8:	2b00      	cmp	r3, #0
    e3ba:	d101      	bne.n	e3c0 <bool_make_new+0x28>
        return mp_const_false;
    e3bc:	4b07      	ldr	r3, [pc, #28]	; (e3dc <bool_make_new+0x44>)
    e3be:	e009      	b.n	e3d4 <bool_make_new+0x3c>
    } else {
        return mp_obj_new_bool(mp_obj_is_true(args[0]));
    e3c0:	683b      	ldr	r3, [r7, #0]
    e3c2:	681b      	ldr	r3, [r3, #0]
    e3c4:	4618      	mov	r0, r3
    e3c6:	f7ff fc53 	bl	dc70 <mp_obj_is_true>
    e3ca:	4603      	mov	r3, r0
    e3cc:	4618      	mov	r0, r3
    e3ce:	f7ff ffb1 	bl	e334 <mp_obj_new_bool>
    e3d2:	4603      	mov	r3, r0
    }
}
    e3d4:	4618      	mov	r0, r3
    e3d6:	3710      	adds	r7, #16
    e3d8:	46bd      	mov	sp, r7
    e3da:	bd80      	pop	{r7, pc}
    e3dc:	00021b70 	.word	0x00021b70

0000e3e0 <bool_unary_op>:

STATIC mp_obj_t bool_unary_op(mp_unary_op_t op, mp_obj_t o_in) {
    e3e0:	b580      	push	{r7, lr}
    e3e2:	b084      	sub	sp, #16
    e3e4:	af00      	add	r7, sp, #0
    e3e6:	6078      	str	r0, [r7, #4]
    e3e8:	6039      	str	r1, [r7, #0]
    if (op == MP_UNARY_OP_LEN) {
    e3ea:	687b      	ldr	r3, [r7, #4]
    e3ec:	2b05      	cmp	r3, #5
    e3ee:	d101      	bne.n	e3f4 <bool_unary_op+0x14>
        return MP_OBJ_NULL;
    e3f0:	2300      	movs	r3, #0
    e3f2:	e00b      	b.n	e40c <bool_unary_op+0x2c>
    }
    mp_obj_bool_t *self = MP_OBJ_TO_PTR(o_in);
    e3f4:	683b      	ldr	r3, [r7, #0]
    e3f6:	60fb      	str	r3, [r7, #12]
    return mp_unary_op(op, MP_OBJ_NEW_SMALL_INT(self->value));
    e3f8:	68fb      	ldr	r3, [r7, #12]
    e3fa:	791b      	ldrb	r3, [r3, #4]
    e3fc:	005b      	lsls	r3, r3, #1
    e3fe:	f043 0301 	orr.w	r3, r3, #1
    e402:	4619      	mov	r1, r3
    e404:	6878      	ldr	r0, [r7, #4]
    e406:	f7fd fab3 	bl	b970 <mp_unary_op>
    e40a:	4603      	mov	r3, r0
}
    e40c:	4618      	mov	r0, r3
    e40e:	3710      	adds	r7, #16
    e410:	46bd      	mov	sp, r7
    e412:	bd80      	pop	{r7, pc}

0000e414 <bool_binary_op>:

STATIC mp_obj_t bool_binary_op(mp_binary_op_t op, mp_obj_t lhs_in, mp_obj_t rhs_in) {
    e414:	b580      	push	{r7, lr}
    e416:	b086      	sub	sp, #24
    e418:	af00      	add	r7, sp, #0
    e41a:	60f8      	str	r0, [r7, #12]
    e41c:	60b9      	str	r1, [r7, #8]
    e41e:	607a      	str	r2, [r7, #4]
    mp_obj_bool_t *self = MP_OBJ_TO_PTR(lhs_in);
    e420:	68bb      	ldr	r3, [r7, #8]
    e422:	617b      	str	r3, [r7, #20]
    return mp_binary_op(op, MP_OBJ_NEW_SMALL_INT(self->value), rhs_in);
    e424:	697b      	ldr	r3, [r7, #20]
    e426:	791b      	ldrb	r3, [r3, #4]
    e428:	005b      	lsls	r3, r3, #1
    e42a:	f043 0301 	orr.w	r3, r3, #1
    e42e:	687a      	ldr	r2, [r7, #4]
    e430:	4619      	mov	r1, r3
    e432:	68f8      	ldr	r0, [r7, #12]
    e434:	f7fd fb82 	bl	bb3c <mp_binary_op>
    e438:	4603      	mov	r3, r0
}
    e43a:	4618      	mov	r0, r3
    e43c:	3718      	adds	r7, #24
    e43e:	46bd      	mov	sp, r7
    e440:	bd80      	pop	{r7, pc}
    e442:	bf00      	nop

0000e444 <mp_call_method_self_n_kw>:
    mp_obj_print_helper(print, o->meth, PRINT_REPR);
    mp_print_str(print, ">");
}
#endif

mp_obj_t mp_call_method_self_n_kw(mp_obj_t meth, mp_obj_t self, size_t n_args, size_t n_kw, const mp_obj_t *args) {
    e444:	b580      	push	{r7, lr}
    e446:	b088      	sub	sp, #32
    e448:	af00      	add	r7, sp, #0
    e44a:	60f8      	str	r0, [r7, #12]
    e44c:	60b9      	str	r1, [r7, #8]
    e44e:	607a      	str	r2, [r7, #4]
    e450:	603b      	str	r3, [r7, #0]
    // need to insert self before all other args and then call meth
    size_t n_total = n_args + 2 * n_kw;
    e452:	683b      	ldr	r3, [r7, #0]
    e454:	005a      	lsls	r2, r3, #1
    e456:	687b      	ldr	r3, [r7, #4]
    e458:	4413      	add	r3, r2
    e45a:	617b      	str	r3, [r7, #20]
    mp_obj_t *args2 = NULL;
    e45c:	2300      	movs	r3, #0
    e45e:	61fb      	str	r3, [r7, #28]
    #if MICROPY_ENABLE_PYSTACK
    args2 = mp_pystack_alloc(sizeof(mp_obj_t) * (1 + n_total));
    #else
    mp_obj_t *free_args2 = NULL;
    e460:	2300      	movs	r3, #0
    e462:	61bb      	str	r3, [r7, #24]
    if (n_total > 4) {
    e464:	697b      	ldr	r3, [r7, #20]
    e466:	2b04      	cmp	r3, #4
    e468:	d908      	bls.n	e47c <mp_call_method_self_n_kw+0x38>
        // try to use heap to allocate temporary args array
        args2 = m_new_maybe(mp_obj_t, 1 + n_total);
    e46a:	697b      	ldr	r3, [r7, #20]
    e46c:	3301      	adds	r3, #1
    e46e:	009b      	lsls	r3, r3, #2
    e470:	4618      	mov	r0, r3
    e472:	f7f1 ff6b 	bl	34c <m_malloc_maybe>
    e476:	61f8      	str	r0, [r7, #28]
        free_args2 = args2;
    e478:	69fb      	ldr	r3, [r7, #28]
    e47a:	61bb      	str	r3, [r7, #24]
    }
    if (args2 == NULL) {
    e47c:	69fb      	ldr	r3, [r7, #28]
    e47e:	2b00      	cmp	r3, #0
    e480:	d10d      	bne.n	e49e <mp_call_method_self_n_kw+0x5a>
        // (fallback to) use stack to allocate temporary args array
        args2 = alloca(sizeof(mp_obj_t) * (1 + n_total));
    e482:	697b      	ldr	r3, [r7, #20]
    e484:	3301      	adds	r3, #1
    e486:	009b      	lsls	r3, r3, #2
    e488:	3307      	adds	r3, #7
    e48a:	3307      	adds	r3, #7
    e48c:	08db      	lsrs	r3, r3, #3
    e48e:	00db      	lsls	r3, r3, #3
    e490:	ebad 0d03 	sub.w	sp, sp, r3
    e494:	466b      	mov	r3, sp
    e496:	3307      	adds	r3, #7
    e498:	08db      	lsrs	r3, r3, #3
    e49a:	00db      	lsls	r3, r3, #3
    e49c:	61fb      	str	r3, [r7, #28]
    }
    #endif
    args2[0] = self;
    e49e:	69fb      	ldr	r3, [r7, #28]
    e4a0:	68ba      	ldr	r2, [r7, #8]
    e4a2:	601a      	str	r2, [r3, #0]
    memcpy(args2 + 1, args, n_total * sizeof(mp_obj_t));
    e4a4:	69fb      	ldr	r3, [r7, #28]
    e4a6:	1d18      	adds	r0, r3, #4
    e4a8:	697b      	ldr	r3, [r7, #20]
    e4aa:	009b      	lsls	r3, r3, #2
    e4ac:	461a      	mov	r2, r3
    e4ae:	6ab9      	ldr	r1, [r7, #40]	; 0x28
    e4b0:	f00e fbe2 	bl	1cc78 <memcpy>
    mp_obj_t res = mp_call_function_n_kw(meth, n_args + 1, n_kw, args2);
    e4b4:	687b      	ldr	r3, [r7, #4]
    e4b6:	1c59      	adds	r1, r3, #1
    e4b8:	69fb      	ldr	r3, [r7, #28]
    e4ba:	683a      	ldr	r2, [r7, #0]
    e4bc:	68f8      	ldr	r0, [r7, #12]
    e4be:	f7fd fdd1 	bl	c064 <mp_call_function_n_kw>
    e4c2:	6138      	str	r0, [r7, #16]
    #if MICROPY_ENABLE_PYSTACK
    mp_pystack_free(args2);
    #else
    if (free_args2 != NULL) {
    e4c4:	69bb      	ldr	r3, [r7, #24]
    e4c6:	2b00      	cmp	r3, #0
    e4c8:	d002      	beq.n	e4d0 <mp_call_method_self_n_kw+0x8c>
        m_del(mp_obj_t, free_args2, 1 + n_total);
    e4ca:	69b8      	ldr	r0, [r7, #24]
    e4cc:	f7f1 ffa0 	bl	410 <m_free>
    }
    #endif
    return res;
    e4d0:	693b      	ldr	r3, [r7, #16]
}
    e4d2:	4618      	mov	r0, r3
    e4d4:	3720      	adds	r7, #32
    e4d6:	46bd      	mov	sp, r7
    e4d8:	bd80      	pop	{r7, pc}
    e4da:	bf00      	nop

0000e4dc <bound_meth_call>:

STATIC mp_obj_t bound_meth_call(mp_obj_t self_in, size_t n_args, size_t n_kw, const mp_obj_t *args) {
    e4dc:	b580      	push	{r7, lr}
    e4de:	b088      	sub	sp, #32
    e4e0:	af02      	add	r7, sp, #8
    e4e2:	60f8      	str	r0, [r7, #12]
    e4e4:	60b9      	str	r1, [r7, #8]
    e4e6:	607a      	str	r2, [r7, #4]
    e4e8:	603b      	str	r3, [r7, #0]
    mp_obj_bound_meth_t *self = MP_OBJ_TO_PTR(self_in);
    e4ea:	68fb      	ldr	r3, [r7, #12]
    e4ec:	617b      	str	r3, [r7, #20]
    return mp_call_method_self_n_kw(self->meth, self->self, n_args, n_kw, args);
    e4ee:	697b      	ldr	r3, [r7, #20]
    e4f0:	6858      	ldr	r0, [r3, #4]
    e4f2:	697b      	ldr	r3, [r7, #20]
    e4f4:	6899      	ldr	r1, [r3, #8]
    e4f6:	683b      	ldr	r3, [r7, #0]
    e4f8:	9300      	str	r3, [sp, #0]
    e4fa:	687b      	ldr	r3, [r7, #4]
    e4fc:	68ba      	ldr	r2, [r7, #8]
    e4fe:	f7ff ffa1 	bl	e444 <mp_call_method_self_n_kw>
    e502:	4603      	mov	r3, r0
}
    e504:	4618      	mov	r0, r3
    e506:	3718      	adds	r7, #24
    e508:	46bd      	mov	sp, r7
    e50a:	bd80      	pop	{r7, pc}

0000e50c <mp_obj_new_bound_meth>:
#if MICROPY_PY_FUNCTION_ATTRS
    .attr = bound_meth_attr,
#endif
};

mp_obj_t mp_obj_new_bound_meth(mp_obj_t meth, mp_obj_t self) {
    e50c:	b580      	push	{r7, lr}
    e50e:	b084      	sub	sp, #16
    e510:	af00      	add	r7, sp, #0
    e512:	6078      	str	r0, [r7, #4]
    e514:	6039      	str	r1, [r7, #0]
    mp_obj_bound_meth_t *o = m_new_obj(mp_obj_bound_meth_t);
    e516:	200c      	movs	r0, #12
    e518:	f7f1 ff00 	bl	31c <m_malloc>
    e51c:	60f8      	str	r0, [r7, #12]
    o->base.type = &mp_type_bound_meth;
    e51e:	68fb      	ldr	r3, [r7, #12]
    e520:	4a06      	ldr	r2, [pc, #24]	; (e53c <mp_obj_new_bound_meth+0x30>)
    e522:	601a      	str	r2, [r3, #0]
    o->meth = meth;
    e524:	68fb      	ldr	r3, [r7, #12]
    e526:	687a      	ldr	r2, [r7, #4]
    e528:	605a      	str	r2, [r3, #4]
    o->self = self;
    e52a:	68fb      	ldr	r3, [r7, #12]
    e52c:	683a      	ldr	r2, [r7, #0]
    e52e:	609a      	str	r2, [r3, #8]
    return MP_OBJ_FROM_PTR(o);
    e530:	68fb      	ldr	r3, [r7, #12]
}
    e532:	4618      	mov	r0, r3
    e534:	3710      	adds	r7, #16
    e536:	46bd      	mov	sp, r7
    e538:	bd80      	pop	{r7, pc}
    e53a:	bf00      	nop
    e53c:	00021b80 	.word	0x00021b80

0000e540 <mp_obj_cell_get>:
typedef struct _mp_obj_cell_t {
    mp_obj_base_t base;
    mp_obj_t obj;
} mp_obj_cell_t;

mp_obj_t mp_obj_cell_get(mp_obj_t self_in) {
    e540:	b480      	push	{r7}
    e542:	b085      	sub	sp, #20
    e544:	af00      	add	r7, sp, #0
    e546:	6078      	str	r0, [r7, #4]
    mp_obj_cell_t *self = MP_OBJ_TO_PTR(self_in);
    e548:	687b      	ldr	r3, [r7, #4]
    e54a:	60fb      	str	r3, [r7, #12]
    return self->obj;
    e54c:	68fb      	ldr	r3, [r7, #12]
    e54e:	685b      	ldr	r3, [r3, #4]
}
    e550:	4618      	mov	r0, r3
    e552:	3714      	adds	r7, #20
    e554:	46bd      	mov	sp, r7
    e556:	f85d 7b04 	ldr.w	r7, [sp], #4
    e55a:	4770      	bx	lr

0000e55c <mp_obj_cell_set>:

void mp_obj_cell_set(mp_obj_t self_in, mp_obj_t obj) {
    e55c:	b480      	push	{r7}
    e55e:	b085      	sub	sp, #20
    e560:	af00      	add	r7, sp, #0
    e562:	6078      	str	r0, [r7, #4]
    e564:	6039      	str	r1, [r7, #0]
    mp_obj_cell_t *self = MP_OBJ_TO_PTR(self_in);
    e566:	687b      	ldr	r3, [r7, #4]
    e568:	60fb      	str	r3, [r7, #12]
    self->obj = obj;
    e56a:	68fb      	ldr	r3, [r7, #12]
    e56c:	683a      	ldr	r2, [r7, #0]
    e56e:	605a      	str	r2, [r3, #4]
}
    e570:	bf00      	nop
    e572:	3714      	adds	r7, #20
    e574:	46bd      	mov	sp, r7
    e576:	f85d 7b04 	ldr.w	r7, [sp], #4
    e57a:	4770      	bx	lr

0000e57c <mp_obj_new_cell>:
#if MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_DETAILED
    .print = cell_print,
#endif
};

mp_obj_t mp_obj_new_cell(mp_obj_t obj) {
    e57c:	b580      	push	{r7, lr}
    e57e:	b084      	sub	sp, #16
    e580:	af00      	add	r7, sp, #0
    e582:	6078      	str	r0, [r7, #4]
    mp_obj_cell_t *o = m_new_obj(mp_obj_cell_t);
    e584:	2008      	movs	r0, #8
    e586:	f7f1 fec9 	bl	31c <m_malloc>
    e58a:	60f8      	str	r0, [r7, #12]
    o->base.type = &mp_type_cell;
    e58c:	68fb      	ldr	r3, [r7, #12]
    e58e:	4a05      	ldr	r2, [pc, #20]	; (e5a4 <mp_obj_new_cell+0x28>)
    e590:	601a      	str	r2, [r3, #0]
    o->obj = obj;
    e592:	68fb      	ldr	r3, [r7, #12]
    e594:	687a      	ldr	r2, [r7, #4]
    e596:	605a      	str	r2, [r3, #4]
    return MP_OBJ_FROM_PTR(o);
    e598:	68fb      	ldr	r3, [r7, #12]
}
    e59a:	4618      	mov	r0, r3
    e59c:	3710      	adds	r7, #16
    e59e:	46bd      	mov	sp, r7
    e5a0:	bd80      	pop	{r7, pc}
    e5a2:	bf00      	nop
    e5a4:	00021bbc 	.word	0x00021bbc

0000e5a8 <closure_call>:
    mp_obj_t fun;
    size_t n_closed;
    mp_obj_t closed[];
} mp_obj_closure_t;

STATIC mp_obj_t closure_call(mp_obj_t self_in, size_t n_args, size_t n_kw, const mp_obj_t *args) {
    e5a8:	b580      	push	{r7, lr}
    e5aa:	b08e      	sub	sp, #56	; 0x38
    e5ac:	af00      	add	r7, sp, #0
    e5ae:	60f8      	str	r0, [r7, #12]
    e5b0:	60b9      	str	r1, [r7, #8]
    e5b2:	607a      	str	r2, [r7, #4]
    e5b4:	603b      	str	r3, [r7, #0]
    mp_obj_closure_t *self = MP_OBJ_TO_PTR(self_in);
    e5b6:	68fb      	ldr	r3, [r7, #12]
    e5b8:	637b      	str	r3, [r7, #52]	; 0x34

    // need to concatenate closed-over-vars and args

    size_t n_total = self->n_closed + n_args + 2 * n_kw;
    e5ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    e5bc:	689a      	ldr	r2, [r3, #8]
    e5be:	68bb      	ldr	r3, [r7, #8]
    e5c0:	441a      	add	r2, r3
    e5c2:	687b      	ldr	r3, [r7, #4]
    e5c4:	005b      	lsls	r3, r3, #1
    e5c6:	4413      	add	r3, r2
    e5c8:	633b      	str	r3, [r7, #48]	; 0x30
    if (n_total <= 5) {
    e5ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    e5cc:	2b05      	cmp	r3, #5
    e5ce:	d826      	bhi.n	e61e <closure_call+0x76>
        // use stack to allocate temporary args array
        mp_obj_t args2[5];
        memcpy(args2, self->closed, self->n_closed * sizeof(mp_obj_t));
    e5d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    e5d2:	f103 010c 	add.w	r1, r3, #12
    e5d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    e5d8:	689b      	ldr	r3, [r3, #8]
    e5da:	009a      	lsls	r2, r3, #2
    e5dc:	f107 0314 	add.w	r3, r7, #20
    e5e0:	4618      	mov	r0, r3
    e5e2:	f00e fb49 	bl	1cc78 <memcpy>
        memcpy(args2 + self->n_closed, args, (n_args + 2 * n_kw) * sizeof(mp_obj_t));
    e5e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    e5e8:	689b      	ldr	r3, [r3, #8]
    e5ea:	009b      	lsls	r3, r3, #2
    e5ec:	f107 0214 	add.w	r2, r7, #20
    e5f0:	18d0      	adds	r0, r2, r3
    e5f2:	687b      	ldr	r3, [r7, #4]
    e5f4:	005a      	lsls	r2, r3, #1
    e5f6:	68bb      	ldr	r3, [r7, #8]
    e5f8:	4413      	add	r3, r2
    e5fa:	009b      	lsls	r3, r3, #2
    e5fc:	461a      	mov	r2, r3
    e5fe:	6839      	ldr	r1, [r7, #0]
    e600:	f00e fb3a 	bl	1cc78 <memcpy>
        return mp_call_function_n_kw(self->fun, self->n_closed + n_args, n_kw, args2);
    e604:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    e606:	6858      	ldr	r0, [r3, #4]
    e608:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    e60a:	689a      	ldr	r2, [r3, #8]
    e60c:	68bb      	ldr	r3, [r7, #8]
    e60e:	18d1      	adds	r1, r2, r3
    e610:	f107 0314 	add.w	r3, r7, #20
    e614:	687a      	ldr	r2, [r7, #4]
    e616:	f7fd fd25 	bl	c064 <mp_call_function_n_kw>
    e61a:	4603      	mov	r3, r0
    e61c:	e02c      	b.n	e678 <closure_call+0xd0>
    } else {
        // use heap to allocate temporary args array
        mp_obj_t *args2 = m_new(mp_obj_t, n_total);
    e61e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    e620:	009b      	lsls	r3, r3, #2
    e622:	4618      	mov	r0, r3
    e624:	f7f1 fe7a 	bl	31c <m_malloc>
    e628:	62f8      	str	r0, [r7, #44]	; 0x2c
        memcpy(args2, self->closed, self->n_closed * sizeof(mp_obj_t));
    e62a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    e62c:	f103 010c 	add.w	r1, r3, #12
    e630:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    e632:	689b      	ldr	r3, [r3, #8]
    e634:	009b      	lsls	r3, r3, #2
    e636:	461a      	mov	r2, r3
    e638:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    e63a:	f00e fb1d 	bl	1cc78 <memcpy>
        memcpy(args2 + self->n_closed, args, (n_args + 2 * n_kw) * sizeof(mp_obj_t));
    e63e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    e640:	689b      	ldr	r3, [r3, #8]
    e642:	009b      	lsls	r3, r3, #2
    e644:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    e646:	18d0      	adds	r0, r2, r3
    e648:	687b      	ldr	r3, [r7, #4]
    e64a:	005a      	lsls	r2, r3, #1
    e64c:	68bb      	ldr	r3, [r7, #8]
    e64e:	4413      	add	r3, r2
    e650:	009b      	lsls	r3, r3, #2
    e652:	461a      	mov	r2, r3
    e654:	6839      	ldr	r1, [r7, #0]
    e656:	f00e fb0f 	bl	1cc78 <memcpy>
        mp_obj_t res = mp_call_function_n_kw(self->fun, self->n_closed + n_args, n_kw, args2);
    e65a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    e65c:	6858      	ldr	r0, [r3, #4]
    e65e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    e660:	689a      	ldr	r2, [r3, #8]
    e662:	68bb      	ldr	r3, [r7, #8]
    e664:	18d1      	adds	r1, r2, r3
    e666:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    e668:	687a      	ldr	r2, [r7, #4]
    e66a:	f7fd fcfb 	bl	c064 <mp_call_function_n_kw>
    e66e:	62b8      	str	r0, [r7, #40]	; 0x28
        m_del(mp_obj_t, args2, n_total);
    e670:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    e672:	f7f1 fecd 	bl	410 <m_free>
        return res;
    e676:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
}
    e678:	4618      	mov	r0, r3
    e67a:	3738      	adds	r7, #56	; 0x38
    e67c:	46bd      	mov	sp, r7
    e67e:	bd80      	pop	{r7, pc}

0000e680 <mp_obj_new_closure>:
    .print = closure_print,
#endif
    .call = closure_call,
};

mp_obj_t mp_obj_new_closure(mp_obj_t fun, size_t n_closed_over, const mp_obj_t *closed) {
    e680:	b580      	push	{r7, lr}
    e682:	b086      	sub	sp, #24
    e684:	af00      	add	r7, sp, #0
    e686:	60f8      	str	r0, [r7, #12]
    e688:	60b9      	str	r1, [r7, #8]
    e68a:	607a      	str	r2, [r7, #4]
    mp_obj_closure_t *o = m_new_obj_var(mp_obj_closure_t, mp_obj_t, n_closed_over);
    e68c:	68bb      	ldr	r3, [r7, #8]
    e68e:	3303      	adds	r3, #3
    e690:	009b      	lsls	r3, r3, #2
    e692:	4618      	mov	r0, r3
    e694:	f7f1 fe42 	bl	31c <m_malloc>
    e698:	6178      	str	r0, [r7, #20]
    o->base.type = &closure_type;
    e69a:	697b      	ldr	r3, [r7, #20]
    e69c:	4a0a      	ldr	r2, [pc, #40]	; (e6c8 <mp_obj_new_closure+0x48>)
    e69e:	601a      	str	r2, [r3, #0]
    o->fun = fun;
    e6a0:	697b      	ldr	r3, [r7, #20]
    e6a2:	68fa      	ldr	r2, [r7, #12]
    e6a4:	605a      	str	r2, [r3, #4]
    o->n_closed = n_closed_over;
    e6a6:	697b      	ldr	r3, [r7, #20]
    e6a8:	68ba      	ldr	r2, [r7, #8]
    e6aa:	609a      	str	r2, [r3, #8]
    memcpy(o->closed, closed, n_closed_over * sizeof(mp_obj_t));
    e6ac:	697b      	ldr	r3, [r7, #20]
    e6ae:	f103 000c 	add.w	r0, r3, #12
    e6b2:	68bb      	ldr	r3, [r7, #8]
    e6b4:	009b      	lsls	r3, r3, #2
    e6b6:	461a      	mov	r2, r3
    e6b8:	6879      	ldr	r1, [r7, #4]
    e6ba:	f00e fadd 	bl	1cc78 <memcpy>
    return MP_OBJ_FROM_PTR(o);
    e6be:	697b      	ldr	r3, [r7, #20]
}
    e6c0:	4618      	mov	r0, r3
    e6c2:	3718      	adds	r7, #24
    e6c4:	46bd      	mov	sp, r7
    e6c6:	bd80      	pop	{r7, pc}
    e6c8:	00021bf8 	.word	0x00021bf8

0000e6cc <MP_OBJ_IS_OBJ>:
    { return ((((mp_int_t)(o)) & 3) == 0); }
    e6cc:	b480      	push	{r7}
    e6ce:	b083      	sub	sp, #12
    e6d0:	af00      	add	r7, sp, #0
    e6d2:	6078      	str	r0, [r7, #4]
    e6d4:	687b      	ldr	r3, [r7, #4]
    e6d6:	f003 0303 	and.w	r3, r3, #3
    e6da:	2b00      	cmp	r3, #0
    e6dc:	bf0c      	ite	eq
    e6de:	2301      	moveq	r3, #1
    e6e0:	2300      	movne	r3, #0
    e6e2:	b2db      	uxtb	r3, r3
    e6e4:	4618      	mov	r0, r3
    e6e6:	370c      	adds	r7, #12
    e6e8:	46bd      	mov	sp, r7
    e6ea:	f85d 7b04 	ldr.w	r7, [sp], #4
    e6ee:	4770      	bx	lr

0000e6f0 <MP_MAP_SLOT_IS_FILLED>:
static inline bool MP_MAP_SLOT_IS_FILLED(const mp_map_t *map, size_t pos) { return ((map)->table[pos].key != MP_OBJ_NULL && (map)->table[pos].key != MP_OBJ_SENTINEL); }
    e6f0:	b480      	push	{r7}
    e6f2:	b083      	sub	sp, #12
    e6f4:	af00      	add	r7, sp, #0
    e6f6:	6078      	str	r0, [r7, #4]
    e6f8:	6039      	str	r1, [r7, #0]
    e6fa:	687b      	ldr	r3, [r7, #4]
    e6fc:	689a      	ldr	r2, [r3, #8]
    e6fe:	683b      	ldr	r3, [r7, #0]
    e700:	00db      	lsls	r3, r3, #3
    e702:	4413      	add	r3, r2
    e704:	681b      	ldr	r3, [r3, #0]
    e706:	2b00      	cmp	r3, #0
    e708:	d009      	beq.n	e71e <MP_MAP_SLOT_IS_FILLED+0x2e>
    e70a:	687b      	ldr	r3, [r7, #4]
    e70c:	689a      	ldr	r2, [r3, #8]
    e70e:	683b      	ldr	r3, [r7, #0]
    e710:	00db      	lsls	r3, r3, #3
    e712:	4413      	add	r3, r2
    e714:	681b      	ldr	r3, [r3, #0]
    e716:	2b08      	cmp	r3, #8
    e718:	d001      	beq.n	e71e <MP_MAP_SLOT_IS_FILLED+0x2e>
    e71a:	2301      	movs	r3, #1
    e71c:	e000      	b.n	e720 <MP_MAP_SLOT_IS_FILLED+0x30>
    e71e:	2300      	movs	r3, #0
    e720:	f003 0301 	and.w	r3, r3, #1
    e724:	b2db      	uxtb	r3, r3
    e726:	4618      	mov	r0, r3
    e728:	370c      	adds	r7, #12
    e72a:	46bd      	mov	sp, r7
    e72c:	f85d 7b04 	ldr.w	r7, [sp], #4
    e730:	4770      	bx	lr
    e732:	bf00      	nop

0000e734 <mp_obj_new_bool>:
static inline mp_obj_t mp_obj_new_bool(mp_int_t x) { return x ? mp_const_true : mp_const_false; }
    e734:	b480      	push	{r7}
    e736:	b083      	sub	sp, #12
    e738:	af00      	add	r7, sp, #0
    e73a:	6078      	str	r0, [r7, #4]
    e73c:	687b      	ldr	r3, [r7, #4]
    e73e:	2b00      	cmp	r3, #0
    e740:	d001      	beq.n	e746 <mp_obj_new_bool+0x12>
    e742:	4b04      	ldr	r3, [pc, #16]	; (e754 <mp_obj_new_bool+0x20>)
    e744:	e000      	b.n	e748 <mp_obj_new_bool+0x14>
    e746:	4b04      	ldr	r3, [pc, #16]	; (e758 <mp_obj_new_bool+0x24>)
    e748:	4618      	mov	r0, r3
    e74a:	370c      	adds	r7, #12
    e74c:	46bd      	mov	sp, r7
    e74e:	f85d 7b04 	ldr.w	r7, [sp], #4
    e752:	4770      	bx	lr
    e754:	00021b78 	.word	0x00021b78
    e758:	00021b70 	.word	0x00021b70

0000e75c <dict_iter_next>:
STATIC mp_obj_t dict_update(size_t n_args, const mp_obj_t *args, mp_map_t *kwargs);

// This is a helper function to iterate through a dictionary.  The state of
// the iteration is held in *cur and should be initialised with zero for the
// first call.  Will return NULL when no more elements are available.
STATIC mp_map_elem_t *dict_iter_next(mp_obj_dict_t *dict, size_t *cur) {
    e75c:	b580      	push	{r7, lr}
    e75e:	b086      	sub	sp, #24
    e760:	af00      	add	r7, sp, #0
    e762:	6078      	str	r0, [r7, #4]
    e764:	6039      	str	r1, [r7, #0]
    size_t max = dict->map.alloc;
    e766:	687b      	ldr	r3, [r7, #4]
    e768:	689b      	ldr	r3, [r3, #8]
    e76a:	613b      	str	r3, [r7, #16]
    mp_map_t *map = &dict->map;
    e76c:	687b      	ldr	r3, [r7, #4]
    e76e:	3304      	adds	r3, #4
    e770:	60fb      	str	r3, [r7, #12]

    for (size_t i = *cur; i < max; i++) {
    e772:	683b      	ldr	r3, [r7, #0]
    e774:	681b      	ldr	r3, [r3, #0]
    e776:	617b      	str	r3, [r7, #20]
    e778:	e013      	b.n	e7a2 <dict_iter_next+0x46>
        if (MP_MAP_SLOT_IS_FILLED(map, i)) {
    e77a:	6979      	ldr	r1, [r7, #20]
    e77c:	68f8      	ldr	r0, [r7, #12]
    e77e:	f7ff ffb7 	bl	e6f0 <MP_MAP_SLOT_IS_FILLED>
    e782:	4603      	mov	r3, r0
    e784:	2b00      	cmp	r3, #0
    e786:	d009      	beq.n	e79c <dict_iter_next+0x40>
            *cur = i + 1;
    e788:	697b      	ldr	r3, [r7, #20]
    e78a:	1c5a      	adds	r2, r3, #1
    e78c:	683b      	ldr	r3, [r7, #0]
    e78e:	601a      	str	r2, [r3, #0]
            return &(map->table[i]);
    e790:	68fb      	ldr	r3, [r7, #12]
    e792:	689a      	ldr	r2, [r3, #8]
    e794:	697b      	ldr	r3, [r7, #20]
    e796:	00db      	lsls	r3, r3, #3
    e798:	4413      	add	r3, r2
    e79a:	e007      	b.n	e7ac <dict_iter_next+0x50>
    for (size_t i = *cur; i < max; i++) {
    e79c:	697b      	ldr	r3, [r7, #20]
    e79e:	3301      	adds	r3, #1
    e7a0:	617b      	str	r3, [r7, #20]
    e7a2:	697a      	ldr	r2, [r7, #20]
    e7a4:	693b      	ldr	r3, [r7, #16]
    e7a6:	429a      	cmp	r2, r3
    e7a8:	d3e7      	bcc.n	e77a <dict_iter_next+0x1e>
        }
    }

    return NULL;
    e7aa:	2300      	movs	r3, #0
}
    e7ac:	4618      	mov	r0, r3
    e7ae:	3718      	adds	r7, #24
    e7b0:	46bd      	mov	sp, r7
    e7b2:	bd80      	pop	{r7, pc}

0000e7b4 <dict_print>:

STATIC void dict_print(const mp_print_t *print, mp_obj_t self_in, mp_print_kind_t kind) {
    e7b4:	b580      	push	{r7, lr}
    e7b6:	b088      	sub	sp, #32
    e7b8:	af00      	add	r7, sp, #0
    e7ba:	60f8      	str	r0, [r7, #12]
    e7bc:	60b9      	str	r1, [r7, #8]
    e7be:	607a      	str	r2, [r7, #4]
    mp_obj_dict_t *self = MP_OBJ_TO_PTR(self_in);
    e7c0:	68bb      	ldr	r3, [r7, #8]
    e7c2:	61bb      	str	r3, [r7, #24]
    bool first = true;
    e7c4:	2301      	movs	r3, #1
    e7c6:	77fb      	strb	r3, [r7, #31]
    if (!(MICROPY_PY_UJSON && kind == PRINT_JSON)) {
        kind = PRINT_REPR;
    e7c8:	2301      	movs	r3, #1
    e7ca:	607b      	str	r3, [r7, #4]
    }
    if (MICROPY_PY_COLLECTIONS_ORDEREDDICT && self->base.type != &mp_type_dict) {
        mp_printf(print, "%q(", self->base.type->name);
    }
    mp_print_str(print, "{");
    e7cc:	491c      	ldr	r1, [pc, #112]	; (e840 <dict_print+0x8c>)
    e7ce:	68f8      	ldr	r0, [r7, #12]
    e7d0:	f7f3 f910 	bl	19f4 <mp_print_str>
    size_t cur = 0;
    e7d4:	2300      	movs	r3, #0
    e7d6:	613b      	str	r3, [r7, #16]
    mp_map_elem_t *next = NULL;
    e7d8:	2300      	movs	r3, #0
    e7da:	617b      	str	r3, [r7, #20]
    while ((next = dict_iter_next(self, &cur)) != NULL) {
    e7dc:	e01d      	b.n	e81a <dict_print+0x66>
        if (!first) {
    e7de:	7ffb      	ldrb	r3, [r7, #31]
    e7e0:	f083 0301 	eor.w	r3, r3, #1
    e7e4:	b2db      	uxtb	r3, r3
    e7e6:	2b00      	cmp	r3, #0
    e7e8:	d003      	beq.n	e7f2 <dict_print+0x3e>
            mp_print_str(print, ", ");
    e7ea:	4916      	ldr	r1, [pc, #88]	; (e844 <dict_print+0x90>)
    e7ec:	68f8      	ldr	r0, [r7, #12]
    e7ee:	f7f3 f901 	bl	19f4 <mp_print_str>
        }
        first = false;
    e7f2:	2300      	movs	r3, #0
    e7f4:	77fb      	strb	r3, [r7, #31]
        mp_obj_print_helper(print, next->key, kind);
    e7f6:	697b      	ldr	r3, [r7, #20]
    e7f8:	681b      	ldr	r3, [r3, #0]
    e7fa:	687a      	ldr	r2, [r7, #4]
    e7fc:	4619      	mov	r1, r3
    e7fe:	68f8      	ldr	r0, [r7, #12]
    e800:	f7ff f98a 	bl	db18 <mp_obj_print_helper>
        mp_print_str(print, ": ");
    e804:	4910      	ldr	r1, [pc, #64]	; (e848 <dict_print+0x94>)
    e806:	68f8      	ldr	r0, [r7, #12]
    e808:	f7f3 f8f4 	bl	19f4 <mp_print_str>
        mp_obj_print_helper(print, next->value, kind);
    e80c:	697b      	ldr	r3, [r7, #20]
    e80e:	685b      	ldr	r3, [r3, #4]
    e810:	687a      	ldr	r2, [r7, #4]
    e812:	4619      	mov	r1, r3
    e814:	68f8      	ldr	r0, [r7, #12]
    e816:	f7ff f97f 	bl	db18 <mp_obj_print_helper>
    while ((next = dict_iter_next(self, &cur)) != NULL) {
    e81a:	f107 0310 	add.w	r3, r7, #16
    e81e:	4619      	mov	r1, r3
    e820:	69b8      	ldr	r0, [r7, #24]
    e822:	f7ff ff9b 	bl	e75c <dict_iter_next>
    e826:	6178      	str	r0, [r7, #20]
    e828:	697b      	ldr	r3, [r7, #20]
    e82a:	2b00      	cmp	r3, #0
    e82c:	d1d7      	bne.n	e7de <dict_print+0x2a>
    }
    mp_print_str(print, "}");
    e82e:	4907      	ldr	r1, [pc, #28]	; (e84c <dict_print+0x98>)
    e830:	68f8      	ldr	r0, [r7, #12]
    e832:	f7f3 f8df 	bl	19f4 <mp_print_str>
    if (MICROPY_PY_COLLECTIONS_ORDEREDDICT && self->base.type != &mp_type_dict) {
        mp_print_str(print, ")");
    }
}
    e836:	bf00      	nop
    e838:	3720      	adds	r7, #32
    e83a:	46bd      	mov	sp, r7
    e83c:	bd80      	pop	{r7, pc}
    e83e:	bf00      	nop
    e840:	00021c34 	.word	0x00021c34
    e844:	00021c38 	.word	0x00021c38
    e848:	00021c3c 	.word	0x00021c3c
    e84c:	00021c40 	.word	0x00021c40

0000e850 <dict_make_new>:

STATIC mp_obj_t dict_make_new(const mp_obj_type_t *type, size_t n_args, size_t n_kw, const mp_obj_t *args) {
    e850:	b580      	push	{r7, lr}
    e852:	b08c      	sub	sp, #48	; 0x30
    e854:	af00      	add	r7, sp, #0
    e856:	60f8      	str	r0, [r7, #12]
    e858:	60b9      	str	r1, [r7, #8]
    e85a:	607a      	str	r2, [r7, #4]
    e85c:	603b      	str	r3, [r7, #0]
    mp_obj_t dict_out = mp_obj_new_dict(0);
    e85e:	2000      	movs	r0, #0
    e860:	f000 fdbc 	bl	f3dc <mp_obj_new_dict>
    e864:	62f8      	str	r0, [r7, #44]	; 0x2c
    mp_obj_dict_t *dict = MP_OBJ_TO_PTR(dict_out);
    e866:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    e868:	62bb      	str	r3, [r7, #40]	; 0x28
    dict->base.type = type;
    e86a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    e86c:	68fa      	ldr	r2, [r7, #12]
    e86e:	601a      	str	r2, [r3, #0]
    #if MICROPY_PY_COLLECTIONS_ORDEREDDICT
    if (type == &mp_type_ordereddict) {
        dict->map.is_ordered = 1;
    }
    #endif
    if (n_args > 0 || n_kw > 0) {
    e870:	68bb      	ldr	r3, [r7, #8]
    e872:	2b00      	cmp	r3, #0
    e874:	d102      	bne.n	e87c <dict_make_new+0x2c>
    e876:	687b      	ldr	r3, [r7, #4]
    e878:	2b00      	cmp	r3, #0
    e87a:	d017      	beq.n	e8ac <dict_make_new+0x5c>
        mp_obj_t args2[2] = {dict_out, args[0]}; // args[0] is always valid, even if it's not a positional arg
    e87c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    e87e:	623b      	str	r3, [r7, #32]
    e880:	683b      	ldr	r3, [r7, #0]
    e882:	681b      	ldr	r3, [r3, #0]
    e884:	627b      	str	r3, [r7, #36]	; 0x24
        mp_map_t kwargs;
        mp_map_init_fixed_table(&kwargs, n_kw, args + n_args);
    e886:	68bb      	ldr	r3, [r7, #8]
    e888:	009b      	lsls	r3, r3, #2
    e88a:	683a      	ldr	r2, [r7, #0]
    e88c:	441a      	add	r2, r3
    e88e:	f107 0314 	add.w	r3, r7, #20
    e892:	6879      	ldr	r1, [r7, #4]
    e894:	4618      	mov	r0, r3
    e896:	f7fe fe9b 	bl	d5d0 <mp_map_init_fixed_table>
        dict_update(n_args + 1, args2, &kwargs); // dict_update will check that n_args + 1 == 1 or 2
    e89a:	68bb      	ldr	r3, [r7, #8]
    e89c:	3301      	adds	r3, #1
    e89e:	f107 0214 	add.w	r2, r7, #20
    e8a2:	f107 0120 	add.w	r1, r7, #32
    e8a6:	4618      	mov	r0, r3
    e8a8:	f000 faec 	bl	ee84 <dict_update>
    }
    return dict_out;
    e8ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
    e8ae:	4618      	mov	r0, r3
    e8b0:	3730      	adds	r7, #48	; 0x30
    e8b2:	46bd      	mov	sp, r7
    e8b4:	bd80      	pop	{r7, pc}
    e8b6:	bf00      	nop

0000e8b8 <dict_unary_op>:

STATIC mp_obj_t dict_unary_op(mp_unary_op_t op, mp_obj_t self_in) {
    e8b8:	b580      	push	{r7, lr}
    e8ba:	b084      	sub	sp, #16
    e8bc:	af00      	add	r7, sp, #0
    e8be:	6078      	str	r0, [r7, #4]
    e8c0:	6039      	str	r1, [r7, #0]
    mp_obj_dict_t *self = MP_OBJ_TO_PTR(self_in);
    e8c2:	683b      	ldr	r3, [r7, #0]
    e8c4:	60fb      	str	r3, [r7, #12]
    switch (op) {
    e8c6:	687b      	ldr	r3, [r7, #4]
    e8c8:	2b04      	cmp	r3, #4
    e8ca:	d002      	beq.n	e8d2 <dict_unary_op+0x1a>
    e8cc:	2b05      	cmp	r3, #5
    e8ce:	d00e      	beq.n	e8ee <dict_unary_op+0x36>
    e8d0:	e015      	b.n	e8fe <dict_unary_op+0x46>
        case MP_UNARY_OP_BOOL: return mp_obj_new_bool(self->map.used != 0);
    e8d2:	68fb      	ldr	r3, [r7, #12]
    e8d4:	685b      	ldr	r3, [r3, #4]
    e8d6:	f023 0307 	bic.w	r3, r3, #7
    e8da:	2b00      	cmp	r3, #0
    e8dc:	bf14      	ite	ne
    e8de:	2301      	movne	r3, #1
    e8e0:	2300      	moveq	r3, #0
    e8e2:	b2db      	uxtb	r3, r3
    e8e4:	4618      	mov	r0, r3
    e8e6:	f7ff ff25 	bl	e734 <mp_obj_new_bool>
    e8ea:	4603      	mov	r3, r0
    e8ec:	e008      	b.n	e900 <dict_unary_op+0x48>
        case MP_UNARY_OP_LEN: return MP_OBJ_NEW_SMALL_INT(self->map.used);
    e8ee:	68fb      	ldr	r3, [r7, #12]
    e8f0:	685b      	ldr	r3, [r3, #4]
    e8f2:	f3c3 03dc 	ubfx	r3, r3, #3, #29
    e8f6:	005b      	lsls	r3, r3, #1
    e8f8:	f043 0301 	orr.w	r3, r3, #1
    e8fc:	e000      	b.n	e900 <dict_unary_op+0x48>
        case MP_UNARY_OP_SIZEOF: {
            size_t sz = sizeof(*self) + sizeof(*self->map.table) * self->map.alloc;
            return MP_OBJ_NEW_SMALL_INT(sz);
        }
        #endif
        default: return MP_OBJ_NULL; // op not supported
    e8fe:	2300      	movs	r3, #0
    }
}
    e900:	4618      	mov	r0, r3
    e902:	3710      	adds	r7, #16
    e904:	46bd      	mov	sp, r7
    e906:	bd80      	pop	{r7, pc}

0000e908 <dict_binary_op>:

STATIC mp_obj_t dict_binary_op(mp_binary_op_t op, mp_obj_t lhs_in, mp_obj_t rhs_in) {
    e908:	b580      	push	{r7, lr}
    e90a:	b08a      	sub	sp, #40	; 0x28
    e90c:	af00      	add	r7, sp, #0
    e90e:	60f8      	str	r0, [r7, #12]
    e910:	60b9      	str	r1, [r7, #8]
    e912:	607a      	str	r2, [r7, #4]
    mp_obj_dict_t *o = MP_OBJ_TO_PTR(lhs_in);
    e914:	68bb      	ldr	r3, [r7, #8]
    e916:	627b      	str	r3, [r7, #36]	; 0x24
    switch (op) {
    e918:	68fb      	ldr	r3, [r7, #12]
    e91a:	2b02      	cmp	r3, #2
    e91c:	d014      	beq.n	e948 <dict_binary_op+0x40>
    e91e:	2b22      	cmp	r3, #34	; 0x22
    e920:	d15a      	bne.n	e9d8 <dict_binary_op+0xd0>
        case MP_BINARY_OP_CONTAINS: {
            mp_map_elem_t *elem = mp_map_lookup(&o->map, rhs_in, MP_MAP_LOOKUP);
    e922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    e924:	3304      	adds	r3, #4
    e926:	2200      	movs	r2, #0
    e928:	6879      	ldr	r1, [r7, #4]
    e92a:	4618      	mov	r0, r3
    e92c:	f7fe ff18 	bl	d760 <mp_map_lookup>
    e930:	6238      	str	r0, [r7, #32]
            return mp_obj_new_bool(elem != NULL);
    e932:	6a3b      	ldr	r3, [r7, #32]
    e934:	2b00      	cmp	r3, #0
    e936:	bf14      	ite	ne
    e938:	2301      	movne	r3, #1
    e93a:	2300      	moveq	r3, #0
    e93c:	b2db      	uxtb	r3, r3
    e93e:	4618      	mov	r0, r3
    e940:	f7ff fef8 	bl	e734 <mp_obj_new_bool>
    e944:	4603      	mov	r3, r0
    e946:	e048      	b.n	e9da <dict_binary_op+0xd2>
                    }
                }
                return e1 == NULL && e2 == NULL ? mp_const_true : mp_const_false;
            } else
            #endif
            if (MP_OBJ_IS_TYPE(rhs_in, &mp_type_dict)) {
    e948:	6878      	ldr	r0, [r7, #4]
    e94a:	f7ff febf 	bl	e6cc <MP_OBJ_IS_OBJ>
    e94e:	4603      	mov	r3, r0
    e950:	2b00      	cmp	r3, #0
    e952:	d03f      	beq.n	e9d4 <dict_binary_op+0xcc>
    e954:	687b      	ldr	r3, [r7, #4]
    e956:	681b      	ldr	r3, [r3, #0]
    e958:	4a22      	ldr	r2, [pc, #136]	; (e9e4 <dict_binary_op+0xdc>)
    e95a:	4293      	cmp	r3, r2
    e95c:	d13a      	bne.n	e9d4 <dict_binary_op+0xcc>
                mp_obj_dict_t *rhs = MP_OBJ_TO_PTR(rhs_in);
    e95e:	687b      	ldr	r3, [r7, #4]
    e960:	61fb      	str	r3, [r7, #28]
                if (o->map.used != rhs->map.used) {
    e962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    e964:	685b      	ldr	r3, [r3, #4]
    e966:	f3c3 02dc 	ubfx	r2, r3, #3, #29
    e96a:	69fb      	ldr	r3, [r7, #28]
    e96c:	685b      	ldr	r3, [r3, #4]
    e96e:	f3c3 03dc 	ubfx	r3, r3, #3, #29
    e972:	429a      	cmp	r2, r3
    e974:	d001      	beq.n	e97a <dict_binary_op+0x72>
                    return mp_const_false;
    e976:	4b1c      	ldr	r3, [pc, #112]	; (e9e8 <dict_binary_op+0xe0>)
    e978:	e02f      	b.n	e9da <dict_binary_op+0xd2>
                }

                size_t cur = 0;
    e97a:	2300      	movs	r3, #0
    e97c:	613b      	str	r3, [r7, #16]
                mp_map_elem_t *next = NULL;
    e97e:	2300      	movs	r3, #0
    e980:	61bb      	str	r3, [r7, #24]
                while ((next = dict_iter_next(o, &cur)) != NULL) {
    e982:	e01b      	b.n	e9bc <dict_binary_op+0xb4>
                    mp_map_elem_t *elem = mp_map_lookup(&rhs->map, next->key, MP_MAP_LOOKUP);
    e984:	69fb      	ldr	r3, [r7, #28]
    e986:	1d18      	adds	r0, r3, #4
    e988:	69bb      	ldr	r3, [r7, #24]
    e98a:	681b      	ldr	r3, [r3, #0]
    e98c:	2200      	movs	r2, #0
    e98e:	4619      	mov	r1, r3
    e990:	f7fe fee6 	bl	d760 <mp_map_lookup>
    e994:	6178      	str	r0, [r7, #20]
                    if (elem == NULL || !mp_obj_equal(next->value, elem->value)) {
    e996:	697b      	ldr	r3, [r7, #20]
    e998:	2b00      	cmp	r3, #0
    e99a:	d00d      	beq.n	e9b8 <dict_binary_op+0xb0>
    e99c:	69bb      	ldr	r3, [r7, #24]
    e99e:	685a      	ldr	r2, [r3, #4]
    e9a0:	697b      	ldr	r3, [r7, #20]
    e9a2:	685b      	ldr	r3, [r3, #4]
    e9a4:	4619      	mov	r1, r3
    e9a6:	4610      	mov	r0, r2
    e9a8:	f7ff f9d8 	bl	dd5c <mp_obj_equal>
    e9ac:	4603      	mov	r3, r0
    e9ae:	f083 0301 	eor.w	r3, r3, #1
    e9b2:	b2db      	uxtb	r3, r3
    e9b4:	2b00      	cmp	r3, #0
    e9b6:	d001      	beq.n	e9bc <dict_binary_op+0xb4>
                        return mp_const_false;
    e9b8:	4b0b      	ldr	r3, [pc, #44]	; (e9e8 <dict_binary_op+0xe0>)
    e9ba:	e00e      	b.n	e9da <dict_binary_op+0xd2>
                while ((next = dict_iter_next(o, &cur)) != NULL) {
    e9bc:	f107 0310 	add.w	r3, r7, #16
    e9c0:	4619      	mov	r1, r3
    e9c2:	6a78      	ldr	r0, [r7, #36]	; 0x24
    e9c4:	f7ff feca 	bl	e75c <dict_iter_next>
    e9c8:	61b8      	str	r0, [r7, #24]
    e9ca:	69bb      	ldr	r3, [r7, #24]
    e9cc:	2b00      	cmp	r3, #0
    e9ce:	d1d9      	bne.n	e984 <dict_binary_op+0x7c>
                    }
                }
                return mp_const_true;
    e9d0:	4b06      	ldr	r3, [pc, #24]	; (e9ec <dict_binary_op+0xe4>)
    e9d2:	e002      	b.n	e9da <dict_binary_op+0xd2>
            } else {
                // dict is not equal to instance of any other type
                return mp_const_false;
    e9d4:	4b04      	ldr	r3, [pc, #16]	; (e9e8 <dict_binary_op+0xe0>)
    e9d6:	e000      	b.n	e9da <dict_binary_op+0xd2>
            }
        }
        default:
            // op not supported
            return MP_OBJ_NULL;
    e9d8:	2300      	movs	r3, #0
    }
}
    e9da:	4618      	mov	r0, r3
    e9dc:	3728      	adds	r7, #40	; 0x28
    e9de:	46bd      	mov	sp, r7
    e9e0:	bd80      	pop	{r7, pc}
    e9e2:	bf00      	nop
    e9e4:	0002201c 	.word	0x0002201c
    e9e8:	00021b70 	.word	0x00021b70
    e9ec:	00021b78 	.word	0x00021b78

0000e9f0 <mp_obj_dict_get>:

// TODO: Make sure this is inlined in dict_subscr() below.
mp_obj_t mp_obj_dict_get(mp_obj_t self_in, mp_obj_t index) {
    e9f0:	b580      	push	{r7, lr}
    e9f2:	b084      	sub	sp, #16
    e9f4:	af00      	add	r7, sp, #0
    e9f6:	6078      	str	r0, [r7, #4]
    e9f8:	6039      	str	r1, [r7, #0]
    mp_obj_dict_t *self = MP_OBJ_TO_PTR(self_in);
    e9fa:	687b      	ldr	r3, [r7, #4]
    e9fc:	60fb      	str	r3, [r7, #12]
    mp_map_elem_t *elem = mp_map_lookup(&self->map, index, MP_MAP_LOOKUP);
    e9fe:	68fb      	ldr	r3, [r7, #12]
    ea00:	3304      	adds	r3, #4
    ea02:	2200      	movs	r2, #0
    ea04:	6839      	ldr	r1, [r7, #0]
    ea06:	4618      	mov	r0, r3
    ea08:	f7fe feaa 	bl	d760 <mp_map_lookup>
    ea0c:	60b8      	str	r0, [r7, #8]
    if (elem == NULL) {
    ea0e:	68bb      	ldr	r3, [r7, #8]
    ea10:	2b00      	cmp	r3, #0
    ea12:	d107      	bne.n	ea24 <mp_obj_dict_get+0x34>
        nlr_raise(mp_obj_new_exception_arg1(&mp_type_KeyError, index));
    ea14:	6839      	ldr	r1, [r7, #0]
    ea16:	4806      	ldr	r0, [pc, #24]	; (ea30 <mp_obj_dict_get+0x40>)
    ea18:	f000 fea2 	bl	f760 <mp_obj_new_exception_arg1>
    ea1c:	4603      	mov	r3, r0
    ea1e:	4618      	mov	r0, r3
    ea20:	f7f1 fc5e 	bl	2e0 <nlr_jump>
    } else {
        return elem->value;
    ea24:	68bb      	ldr	r3, [r7, #8]
    ea26:	685b      	ldr	r3, [r3, #4]
    }
}
    ea28:	4618      	mov	r0, r3
    ea2a:	3710      	adds	r7, #16
    ea2c:	46bd      	mov	sp, r7
    ea2e:	bd80      	pop	{r7, pc}
    ea30:	000224b8 	.word	0x000224b8

0000ea34 <dict_subscr>:

STATIC mp_obj_t dict_subscr(mp_obj_t self_in, mp_obj_t index, mp_obj_t value) {
    ea34:	b580      	push	{r7, lr}
    ea36:	b086      	sub	sp, #24
    ea38:	af00      	add	r7, sp, #0
    ea3a:	60f8      	str	r0, [r7, #12]
    ea3c:	60b9      	str	r1, [r7, #8]
    ea3e:	607a      	str	r2, [r7, #4]
    if (value == MP_OBJ_NULL) {
    ea40:	687b      	ldr	r3, [r7, #4]
    ea42:	2b00      	cmp	r3, #0
    ea44:	d105      	bne.n	ea52 <dict_subscr+0x1e>
        // delete
        mp_obj_dict_delete(self_in, index);
    ea46:	68b9      	ldr	r1, [r7, #8]
    ea48:	68f8      	ldr	r0, [r7, #12]
    ea4a:	f000 fd21 	bl	f490 <mp_obj_dict_delete>
        return mp_const_none;
    ea4e:	4b13      	ldr	r3, [pc, #76]	; (ea9c <dict_subscr+0x68>)
    ea50:	e020      	b.n	ea94 <dict_subscr+0x60>
    } else if (value == MP_OBJ_SENTINEL) {
    ea52:	687b      	ldr	r3, [r7, #4]
    ea54:	2b08      	cmp	r3, #8
    ea56:	d117      	bne.n	ea88 <dict_subscr+0x54>
        // load
        mp_obj_dict_t *self = MP_OBJ_TO_PTR(self_in);
    ea58:	68fb      	ldr	r3, [r7, #12]
    ea5a:	617b      	str	r3, [r7, #20]
        mp_map_elem_t *elem = mp_map_lookup(&self->map, index, MP_MAP_LOOKUP);
    ea5c:	697b      	ldr	r3, [r7, #20]
    ea5e:	3304      	adds	r3, #4
    ea60:	2200      	movs	r2, #0
    ea62:	68b9      	ldr	r1, [r7, #8]
    ea64:	4618      	mov	r0, r3
    ea66:	f7fe fe7b 	bl	d760 <mp_map_lookup>
    ea6a:	6138      	str	r0, [r7, #16]
        if (elem == NULL) {
    ea6c:	693b      	ldr	r3, [r7, #16]
    ea6e:	2b00      	cmp	r3, #0
    ea70:	d107      	bne.n	ea82 <dict_subscr+0x4e>
            nlr_raise(mp_obj_new_exception_arg1(&mp_type_KeyError, index));
    ea72:	68b9      	ldr	r1, [r7, #8]
    ea74:	480a      	ldr	r0, [pc, #40]	; (eaa0 <dict_subscr+0x6c>)
    ea76:	f000 fe73 	bl	f760 <mp_obj_new_exception_arg1>
    ea7a:	4603      	mov	r3, r0
    ea7c:	4618      	mov	r0, r3
    ea7e:	f7f1 fc2f 	bl	2e0 <nlr_jump>
        } else {
            return elem->value;
    ea82:	693b      	ldr	r3, [r7, #16]
    ea84:	685b      	ldr	r3, [r3, #4]
    ea86:	e005      	b.n	ea94 <dict_subscr+0x60>
        }
    } else {
        // store
        mp_obj_dict_store(self_in, index, value);
    ea88:	687a      	ldr	r2, [r7, #4]
    ea8a:	68b9      	ldr	r1, [r7, #8]
    ea8c:	68f8      	ldr	r0, [r7, #12]
    ea8e:	f000 fcc7 	bl	f420 <mp_obj_dict_store>
        return mp_const_none;
    ea92:	4b02      	ldr	r3, [pc, #8]	; (ea9c <dict_subscr+0x68>)
    }
}
    ea94:	4618      	mov	r0, r3
    ea96:	3718      	adds	r7, #24
    ea98:	46bd      	mov	sp, r7
    ea9a:	bd80      	pop	{r7, pc}
    ea9c:	0002345c 	.word	0x0002345c
    eaa0:	000224b8 	.word	0x000224b8

0000eaa4 <mp_ensure_not_fixed>:

/******************************************************************************/
/* dict methods                                                               */

STATIC void mp_ensure_not_fixed(const mp_obj_dict_t *dict) {
    eaa4:	b580      	push	{r7, lr}
    eaa6:	b082      	sub	sp, #8
    eaa8:	af00      	add	r7, sp, #0
    eaaa:	6078      	str	r0, [r7, #4]
    if (dict->map.is_fixed) {
    eaac:	687b      	ldr	r3, [r7, #4]
    eaae:	791b      	ldrb	r3, [r3, #4]
    eab0:	f003 0302 	and.w	r3, r3, #2
    eab4:	b2db      	uxtb	r3, r3
    eab6:	2b00      	cmp	r3, #0
    eab8:	d002      	beq.n	eac0 <mp_ensure_not_fixed+0x1c>
        mp_raise_TypeError(NULL);
    eaba:	2000      	movs	r0, #0
    eabc:	f7fe fb9a 	bl	d1f4 <mp_raise_TypeError>
    }
}
    eac0:	bf00      	nop
    eac2:	3708      	adds	r7, #8
    eac4:	46bd      	mov	sp, r7
    eac6:	bd80      	pop	{r7, pc}

0000eac8 <dict_clear>:

STATIC mp_obj_t dict_clear(mp_obj_t self_in) {
    eac8:	b580      	push	{r7, lr}
    eaca:	b084      	sub	sp, #16
    eacc:	af00      	add	r7, sp, #0
    eace:	6078      	str	r0, [r7, #4]
    mp_check_self(MP_OBJ_IS_DICT_TYPE(self_in));
    ead0:	6878      	ldr	r0, [r7, #4]
    ead2:	f7ff fdfb 	bl	e6cc <MP_OBJ_IS_OBJ>
    ead6:	4603      	mov	r3, r0
    ead8:	f083 0301 	eor.w	r3, r3, #1
    eadc:	b2db      	uxtb	r3, r3
    eade:	2b00      	cmp	r3, #0
    eae0:	d105      	bne.n	eaee <dict_clear+0x26>
    eae2:	687b      	ldr	r3, [r7, #4]
    eae4:	681b      	ldr	r3, [r3, #0]
    eae6:	68db      	ldr	r3, [r3, #12]
    eae8:	4a0b      	ldr	r2, [pc, #44]	; (eb18 <dict_clear+0x50>)
    eaea:	4293      	cmp	r3, r2
    eaec:	d005      	beq.n	eafa <dict_clear+0x32>
    eaee:	4b0b      	ldr	r3, [pc, #44]	; (eb1c <dict_clear+0x54>)
    eaf0:	4a0b      	ldr	r2, [pc, #44]	; (eb20 <dict_clear+0x58>)
    eaf2:	21cd      	movs	r1, #205	; 0xcd
    eaf4:	480b      	ldr	r0, [pc, #44]	; (eb24 <dict_clear+0x5c>)
    eaf6:	f00c fdeb 	bl	1b6d0 <__assert_func>
    mp_obj_dict_t *self = MP_OBJ_TO_PTR(self_in);
    eafa:	687b      	ldr	r3, [r7, #4]
    eafc:	60fb      	str	r3, [r7, #12]
    mp_ensure_not_fixed(self);
    eafe:	68f8      	ldr	r0, [r7, #12]
    eb00:	f7ff ffd0 	bl	eaa4 <mp_ensure_not_fixed>

    mp_map_clear(&self->map);
    eb04:	68fb      	ldr	r3, [r7, #12]
    eb06:	3304      	adds	r3, #4
    eb08:	4618      	mov	r0, r3
    eb0a:	f7fe fda7 	bl	d65c <mp_map_clear>

    return mp_const_none;
    eb0e:	4b06      	ldr	r3, [pc, #24]	; (eb28 <dict_clear+0x60>)
}
    eb10:	4618      	mov	r0, r3
    eb12:	3710      	adds	r7, #16
    eb14:	46bd      	mov	sp, r7
    eb16:	bd80      	pop	{r7, pc}
    eb18:	0000e851 	.word	0x0000e851
    eb1c:	00021c44 	.word	0x00021c44
    eb20:	00022058 	.word	0x00022058
    eb24:	00021ca4 	.word	0x00021ca4
    eb28:	0002345c 	.word	0x0002345c

0000eb2c <dict_copy>:
STATIC MP_DEFINE_CONST_FUN_OBJ_1(dict_clear_obj, dict_clear);

STATIC mp_obj_t dict_copy(mp_obj_t self_in) {
    eb2c:	b580      	push	{r7, lr}
    eb2e:	b086      	sub	sp, #24
    eb30:	af00      	add	r7, sp, #0
    eb32:	6078      	str	r0, [r7, #4]
    mp_check_self(MP_OBJ_IS_DICT_TYPE(self_in));
    eb34:	6878      	ldr	r0, [r7, #4]
    eb36:	f7ff fdc9 	bl	e6cc <MP_OBJ_IS_OBJ>
    eb3a:	4603      	mov	r3, r0
    eb3c:	f083 0301 	eor.w	r3, r3, #1
    eb40:	b2db      	uxtb	r3, r3
    eb42:	2b00      	cmp	r3, #0
    eb44:	d105      	bne.n	eb52 <dict_copy+0x26>
    eb46:	687b      	ldr	r3, [r7, #4]
    eb48:	681b      	ldr	r3, [r3, #0]
    eb4a:	68db      	ldr	r3, [r3, #12]
    eb4c:	4a23      	ldr	r2, [pc, #140]	; (ebdc <dict_copy+0xb0>)
    eb4e:	4293      	cmp	r3, r2
    eb50:	d005      	beq.n	eb5e <dict_copy+0x32>
    eb52:	4b23      	ldr	r3, [pc, #140]	; (ebe0 <dict_copy+0xb4>)
    eb54:	4a23      	ldr	r2, [pc, #140]	; (ebe4 <dict_copy+0xb8>)
    eb56:	21d8      	movs	r1, #216	; 0xd8
    eb58:	4823      	ldr	r0, [pc, #140]	; (ebe8 <dict_copy+0xbc>)
    eb5a:	f00c fdb9 	bl	1b6d0 <__assert_func>
    mp_obj_dict_t *self = MP_OBJ_TO_PTR(self_in);
    eb5e:	687b      	ldr	r3, [r7, #4]
    eb60:	617b      	str	r3, [r7, #20]
    mp_obj_t other_out = mp_obj_new_dict(self->map.alloc);
    eb62:	697b      	ldr	r3, [r7, #20]
    eb64:	689b      	ldr	r3, [r3, #8]
    eb66:	4618      	mov	r0, r3
    eb68:	f000 fc38 	bl	f3dc <mp_obj_new_dict>
    eb6c:	6138      	str	r0, [r7, #16]
    mp_obj_dict_t *other = MP_OBJ_TO_PTR(other_out);
    eb6e:	693b      	ldr	r3, [r7, #16]
    eb70:	60fb      	str	r3, [r7, #12]
    other->base.type = self->base.type;
    eb72:	697b      	ldr	r3, [r7, #20]
    eb74:	681a      	ldr	r2, [r3, #0]
    eb76:	68fb      	ldr	r3, [r7, #12]
    eb78:	601a      	str	r2, [r3, #0]
    other->map.used = self->map.used;
    eb7a:	697b      	ldr	r3, [r7, #20]
    eb7c:	685b      	ldr	r3, [r3, #4]
    eb7e:	f3c3 01dc 	ubfx	r1, r3, #3, #29
    eb82:	68fa      	ldr	r2, [r7, #12]
    eb84:	6853      	ldr	r3, [r2, #4]
    eb86:	f361 03df 	bfi	r3, r1, #3, #29
    eb8a:	6053      	str	r3, [r2, #4]
    other->map.all_keys_are_qstrs = self->map.all_keys_are_qstrs;
    eb8c:	697b      	ldr	r3, [r7, #20]
    eb8e:	791b      	ldrb	r3, [r3, #4]
    eb90:	f3c3 0300 	ubfx	r3, r3, #0, #1
    eb94:	b2d9      	uxtb	r1, r3
    eb96:	68fa      	ldr	r2, [r7, #12]
    eb98:	7913      	ldrb	r3, [r2, #4]
    eb9a:	f361 0300 	bfi	r3, r1, #0, #1
    eb9e:	7113      	strb	r3, [r2, #4]
    other->map.is_fixed = 0;
    eba0:	68fa      	ldr	r2, [r7, #12]
    eba2:	7913      	ldrb	r3, [r2, #4]
    eba4:	f36f 0341 	bfc	r3, #1, #1
    eba8:	7113      	strb	r3, [r2, #4]
    other->map.is_ordered = self->map.is_ordered;
    ebaa:	697b      	ldr	r3, [r7, #20]
    ebac:	791b      	ldrb	r3, [r3, #4]
    ebae:	f3c3 0380 	ubfx	r3, r3, #2, #1
    ebb2:	b2d9      	uxtb	r1, r3
    ebb4:	68fa      	ldr	r2, [r7, #12]
    ebb6:	7913      	ldrb	r3, [r2, #4]
    ebb8:	f361 0382 	bfi	r3, r1, #2, #1
    ebbc:	7113      	strb	r3, [r2, #4]
    memcpy(other->map.table, self->map.table, self->map.alloc * sizeof(mp_map_elem_t));
    ebbe:	68fb      	ldr	r3, [r7, #12]
    ebc0:	68d8      	ldr	r0, [r3, #12]
    ebc2:	697b      	ldr	r3, [r7, #20]
    ebc4:	68d9      	ldr	r1, [r3, #12]
    ebc6:	697b      	ldr	r3, [r7, #20]
    ebc8:	689b      	ldr	r3, [r3, #8]
    ebca:	00db      	lsls	r3, r3, #3
    ebcc:	461a      	mov	r2, r3
    ebce:	f00e f853 	bl	1cc78 <memcpy>
    return other_out;
    ebd2:	693b      	ldr	r3, [r7, #16]
}
    ebd4:	4618      	mov	r0, r3
    ebd6:	3718      	adds	r7, #24
    ebd8:	46bd      	mov	sp, r7
    ebda:	bd80      	pop	{r7, pc}
    ebdc:	0000e851 	.word	0x0000e851
    ebe0:	00021c44 	.word	0x00021c44
    ebe4:	00022064 	.word	0x00022064
    ebe8:	00021ca4 	.word	0x00021ca4

0000ebec <dict_fromkeys>:
STATIC MP_DEFINE_CONST_FUN_OBJ_1(dict_copy_obj, dict_copy);

// this is a classmethod
STATIC mp_obj_t dict_fromkeys(size_t n_args, const mp_obj_t *args) {
    ebec:	b580      	push	{r7, lr}
    ebee:	b088      	sub	sp, #32
    ebf0:	af00      	add	r7, sp, #0
    ebf2:	6078      	str	r0, [r7, #4]
    ebf4:	6039      	str	r1, [r7, #0]
    mp_obj_t iter = mp_getiter(args[1], NULL);
    ebf6:	683b      	ldr	r3, [r7, #0]
    ebf8:	3304      	adds	r3, #4
    ebfa:	681b      	ldr	r3, [r3, #0]
    ebfc:	2100      	movs	r1, #0
    ebfe:	4618      	mov	r0, r3
    ec00:	f7fd ffa6 	bl	cb50 <mp_getiter>
    ec04:	6178      	str	r0, [r7, #20]
    mp_obj_t value = mp_const_none;
    ec06:	4b1c      	ldr	r3, [pc, #112]	; (ec78 <dict_fromkeys+0x8c>)
    ec08:	61fb      	str	r3, [r7, #28]
    mp_obj_t next = MP_OBJ_NULL;
    ec0a:	2300      	movs	r3, #0
    ec0c:	613b      	str	r3, [r7, #16]

    if (n_args > 2) {
    ec0e:	687b      	ldr	r3, [r7, #4]
    ec10:	2b02      	cmp	r3, #2
    ec12:	d902      	bls.n	ec1a <dict_fromkeys+0x2e>
        value = args[2];
    ec14:	683b      	ldr	r3, [r7, #0]
    ec16:	689b      	ldr	r3, [r3, #8]
    ec18:	61fb      	str	r3, [r7, #28]
    }

    // optimisation to allocate result based on len of argument
    mp_obj_t self_out;
    mp_obj_t len = mp_obj_len_maybe(args[1]);
    ec1a:	683b      	ldr	r3, [r7, #0]
    ec1c:	3304      	adds	r3, #4
    ec1e:	681b      	ldr	r3, [r3, #0]
    ec20:	4618      	mov	r0, r3
    ec22:	f7ff fa9d 	bl	e160 <mp_obj_len_maybe>
    ec26:	60f8      	str	r0, [r7, #12]
    if (len == MP_OBJ_NULL) {
    ec28:	68fb      	ldr	r3, [r7, #12]
    ec2a:	2b00      	cmp	r3, #0
    ec2c:	d104      	bne.n	ec38 <dict_fromkeys+0x4c>
        /* object's type doesn't have a __len__ slot */
        self_out = mp_obj_new_dict(0);
    ec2e:	2000      	movs	r0, #0
    ec30:	f000 fbd4 	bl	f3dc <mp_obj_new_dict>
    ec34:	61b8      	str	r0, [r7, #24]
    ec36:	e005      	b.n	ec44 <dict_fromkeys+0x58>
    } else {
        self_out = mp_obj_new_dict(MP_OBJ_SMALL_INT_VALUE(len));
    ec38:	68fb      	ldr	r3, [r7, #12]
    ec3a:	105b      	asrs	r3, r3, #1
    ec3c:	4618      	mov	r0, r3
    ec3e:	f000 fbcd 	bl	f3dc <mp_obj_new_dict>
    ec42:	61b8      	str	r0, [r7, #24]
    }

    mp_obj_dict_t *self = MP_OBJ_TO_PTR(self_out);
    ec44:	69bb      	ldr	r3, [r7, #24]
    ec46:	60bb      	str	r3, [r7, #8]
    while ((next = mp_iternext(iter)) != MP_OBJ_STOP_ITERATION) {
    ec48:	e009      	b.n	ec5e <dict_fromkeys+0x72>
        mp_map_lookup(&self->map, next, MP_MAP_LOOKUP_ADD_IF_NOT_FOUND)->value = value;
    ec4a:	68bb      	ldr	r3, [r7, #8]
    ec4c:	3304      	adds	r3, #4
    ec4e:	2201      	movs	r2, #1
    ec50:	6939      	ldr	r1, [r7, #16]
    ec52:	4618      	mov	r0, r3
    ec54:	f7fe fd84 	bl	d760 <mp_map_lookup>
    ec58:	4602      	mov	r2, r0
    ec5a:	69fb      	ldr	r3, [r7, #28]
    ec5c:	6053      	str	r3, [r2, #4]
    while ((next = mp_iternext(iter)) != MP_OBJ_STOP_ITERATION) {
    ec5e:	6978      	ldr	r0, [r7, #20]
    ec60:	f7fd fff8 	bl	cc54 <mp_iternext>
    ec64:	6138      	str	r0, [r7, #16]
    ec66:	693b      	ldr	r3, [r7, #16]
    ec68:	2b04      	cmp	r3, #4
    ec6a:	d1ee      	bne.n	ec4a <dict_fromkeys+0x5e>
    }

    return self_out;
    ec6c:	69bb      	ldr	r3, [r7, #24]
}
    ec6e:	4618      	mov	r0, r3
    ec70:	3720      	adds	r7, #32
    ec72:	46bd      	mov	sp, r7
    ec74:	bd80      	pop	{r7, pc}
    ec76:	bf00      	nop
    ec78:	0002345c 	.word	0x0002345c

0000ec7c <dict_get_helper>:
STATIC MP_DEFINE_CONST_FUN_OBJ_VAR_BETWEEN(dict_fromkeys_fun_obj, 2, 3, dict_fromkeys);
STATIC MP_DEFINE_CONST_CLASSMETHOD_OBJ(dict_fromkeys_obj, MP_ROM_PTR(&dict_fromkeys_fun_obj));

STATIC mp_obj_t dict_get_helper(size_t n_args, const mp_obj_t *args, mp_map_lookup_kind_t lookup_kind) {
    ec7c:	b580      	push	{r7, lr}
    ec7e:	b088      	sub	sp, #32
    ec80:	af00      	add	r7, sp, #0
    ec82:	60f8      	str	r0, [r7, #12]
    ec84:	60b9      	str	r1, [r7, #8]
    ec86:	607a      	str	r2, [r7, #4]
    mp_check_self(MP_OBJ_IS_DICT_TYPE(args[0]));
    ec88:	68bb      	ldr	r3, [r7, #8]
    ec8a:	681b      	ldr	r3, [r3, #0]
    ec8c:	4618      	mov	r0, r3
    ec8e:	f7ff fd1d 	bl	e6cc <MP_OBJ_IS_OBJ>
    ec92:	4603      	mov	r3, r0
    ec94:	f083 0301 	eor.w	r3, r3, #1
    ec98:	b2db      	uxtb	r3, r3
    ec9a:	2b00      	cmp	r3, #0
    ec9c:	d106      	bne.n	ecac <dict_get_helper+0x30>
    ec9e:	68bb      	ldr	r3, [r7, #8]
    eca0:	681b      	ldr	r3, [r3, #0]
    eca2:	681b      	ldr	r3, [r3, #0]
    eca4:	68db      	ldr	r3, [r3, #12]
    eca6:	4a28      	ldr	r2, [pc, #160]	; (ed48 <dict_get_helper+0xcc>)
    eca8:	4293      	cmp	r3, r2
    ecaa:	d006      	beq.n	ecba <dict_get_helper+0x3e>
    ecac:	4b27      	ldr	r3, [pc, #156]	; (ed4c <dict_get_helper+0xd0>)
    ecae:	4a28      	ldr	r2, [pc, #160]	; (ed50 <dict_get_helper+0xd4>)
    ecb0:	f240 1105 	movw	r1, #261	; 0x105
    ecb4:	4827      	ldr	r0, [pc, #156]	; (ed54 <dict_get_helper+0xd8>)
    ecb6:	f00c fd0b 	bl	1b6d0 <__assert_func>
    mp_obj_dict_t *self = MP_OBJ_TO_PTR(args[0]);
    ecba:	68bb      	ldr	r3, [r7, #8]
    ecbc:	681b      	ldr	r3, [r3, #0]
    ecbe:	61bb      	str	r3, [r7, #24]
    if (lookup_kind != MP_MAP_LOOKUP) {
    ecc0:	687b      	ldr	r3, [r7, #4]
    ecc2:	2b00      	cmp	r3, #0
    ecc4:	d002      	beq.n	eccc <dict_get_helper+0x50>
        mp_ensure_not_fixed(self);
    ecc6:	69b8      	ldr	r0, [r7, #24]
    ecc8:	f7ff feec 	bl	eaa4 <mp_ensure_not_fixed>
    }
    mp_map_elem_t *elem = mp_map_lookup(&self->map, args[1], lookup_kind);
    eccc:	69bb      	ldr	r3, [r7, #24]
    ecce:	1d18      	adds	r0, r3, #4
    ecd0:	68bb      	ldr	r3, [r7, #8]
    ecd2:	3304      	adds	r3, #4
    ecd4:	681b      	ldr	r3, [r3, #0]
    ecd6:	687a      	ldr	r2, [r7, #4]
    ecd8:	4619      	mov	r1, r3
    ecda:	f7fe fd41 	bl	d760 <mp_map_lookup>
    ecde:	6178      	str	r0, [r7, #20]
    mp_obj_t value;
    if (elem == NULL || elem->value == MP_OBJ_NULL) {
    ece0:	697b      	ldr	r3, [r7, #20]
    ece2:	2b00      	cmp	r3, #0
    ece4:	d003      	beq.n	ecee <dict_get_helper+0x72>
    ece6:	697b      	ldr	r3, [r7, #20]
    ece8:	685b      	ldr	r3, [r3, #4]
    ecea:	2b00      	cmp	r3, #0
    ecec:	d11d      	bne.n	ed2a <dict_get_helper+0xae>
        if (n_args == 2) {
    ecee:	68fb      	ldr	r3, [r7, #12]
    ecf0:	2b02      	cmp	r3, #2
    ecf2:	d110      	bne.n	ed16 <dict_get_helper+0x9a>
            if (lookup_kind == MP_MAP_LOOKUP_REMOVE_IF_FOUND) {
    ecf4:	687b      	ldr	r3, [r7, #4]
    ecf6:	2b02      	cmp	r3, #2
    ecf8:	d10a      	bne.n	ed10 <dict_get_helper+0x94>
                nlr_raise(mp_obj_new_exception_arg1(&mp_type_KeyError, args[1]));
    ecfa:	68bb      	ldr	r3, [r7, #8]
    ecfc:	3304      	adds	r3, #4
    ecfe:	681b      	ldr	r3, [r3, #0]
    ed00:	4619      	mov	r1, r3
    ed02:	4815      	ldr	r0, [pc, #84]	; (ed58 <dict_get_helper+0xdc>)
    ed04:	f000 fd2c 	bl	f760 <mp_obj_new_exception_arg1>
    ed08:	4603      	mov	r3, r0
    ed0a:	4618      	mov	r0, r3
    ed0c:	f7f1 fae8 	bl	2e0 <nlr_jump>
            } else {
                value = mp_const_none;
    ed10:	4b12      	ldr	r3, [pc, #72]	; (ed5c <dict_get_helper+0xe0>)
    ed12:	61fb      	str	r3, [r7, #28]
    ed14:	e002      	b.n	ed1c <dict_get_helper+0xa0>
            }
        } else {
            value = args[2];
    ed16:	68bb      	ldr	r3, [r7, #8]
    ed18:	689b      	ldr	r3, [r3, #8]
    ed1a:	61fb      	str	r3, [r7, #28]
        }
        if (lookup_kind == MP_MAP_LOOKUP_ADD_IF_NOT_FOUND) {
    ed1c:	687b      	ldr	r3, [r7, #4]
    ed1e:	2b01      	cmp	r3, #1
    ed20:	d10c      	bne.n	ed3c <dict_get_helper+0xc0>
            elem->value = value;
    ed22:	697b      	ldr	r3, [r7, #20]
    ed24:	69fa      	ldr	r2, [r7, #28]
    ed26:	605a      	str	r2, [r3, #4]
        if (lookup_kind == MP_MAP_LOOKUP_ADD_IF_NOT_FOUND) {
    ed28:	e008      	b.n	ed3c <dict_get_helper+0xc0>
        }
    } else {
        value = elem->value;
    ed2a:	697b      	ldr	r3, [r7, #20]
    ed2c:	685b      	ldr	r3, [r3, #4]
    ed2e:	61fb      	str	r3, [r7, #28]
        if (lookup_kind == MP_MAP_LOOKUP_REMOVE_IF_FOUND) {
    ed30:	687b      	ldr	r3, [r7, #4]
    ed32:	2b02      	cmp	r3, #2
    ed34:	d102      	bne.n	ed3c <dict_get_helper+0xc0>
            elem->value = MP_OBJ_NULL; // so that GC can collect the deleted value
    ed36:	697b      	ldr	r3, [r7, #20]
    ed38:	2200      	movs	r2, #0
    ed3a:	605a      	str	r2, [r3, #4]
        }
    }
    return value;
    ed3c:	69fb      	ldr	r3, [r7, #28]
}
    ed3e:	4618      	mov	r0, r3
    ed40:	3720      	adds	r7, #32
    ed42:	46bd      	mov	sp, r7
    ed44:	bd80      	pop	{r7, pc}
    ed46:	bf00      	nop
    ed48:	0000e851 	.word	0x0000e851
    ed4c:	00021cdc 	.word	0x00021cdc
    ed50:	00022070 	.word	0x00022070
    ed54:	00021ca4 	.word	0x00021ca4
    ed58:	000224b8 	.word	0x000224b8
    ed5c:	0002345c 	.word	0x0002345c

0000ed60 <dict_get>:

STATIC mp_obj_t dict_get(size_t n_args, const mp_obj_t *args) {
    ed60:	b580      	push	{r7, lr}
    ed62:	b082      	sub	sp, #8
    ed64:	af00      	add	r7, sp, #0
    ed66:	6078      	str	r0, [r7, #4]
    ed68:	6039      	str	r1, [r7, #0]
    return dict_get_helper(n_args, args, MP_MAP_LOOKUP);
    ed6a:	2200      	movs	r2, #0
    ed6c:	6839      	ldr	r1, [r7, #0]
    ed6e:	6878      	ldr	r0, [r7, #4]
    ed70:	f7ff ff84 	bl	ec7c <dict_get_helper>
    ed74:	4603      	mov	r3, r0
}
    ed76:	4618      	mov	r0, r3
    ed78:	3708      	adds	r7, #8
    ed7a:	46bd      	mov	sp, r7
    ed7c:	bd80      	pop	{r7, pc}
    ed7e:	bf00      	nop

0000ed80 <dict_pop>:
STATIC MP_DEFINE_CONST_FUN_OBJ_VAR_BETWEEN(dict_get_obj, 2, 3, dict_get);

STATIC mp_obj_t dict_pop(size_t n_args, const mp_obj_t *args) {
    ed80:	b580      	push	{r7, lr}
    ed82:	b082      	sub	sp, #8
    ed84:	af00      	add	r7, sp, #0
    ed86:	6078      	str	r0, [r7, #4]
    ed88:	6039      	str	r1, [r7, #0]
    return dict_get_helper(n_args, args, MP_MAP_LOOKUP_REMOVE_IF_FOUND);
    ed8a:	2202      	movs	r2, #2
    ed8c:	6839      	ldr	r1, [r7, #0]
    ed8e:	6878      	ldr	r0, [r7, #4]
    ed90:	f7ff ff74 	bl	ec7c <dict_get_helper>
    ed94:	4603      	mov	r3, r0
}
    ed96:	4618      	mov	r0, r3
    ed98:	3708      	adds	r7, #8
    ed9a:	46bd      	mov	sp, r7
    ed9c:	bd80      	pop	{r7, pc}
    ed9e:	bf00      	nop

0000eda0 <dict_setdefault>:
STATIC MP_DEFINE_CONST_FUN_OBJ_VAR_BETWEEN(dict_pop_obj, 2, 3, dict_pop);

STATIC mp_obj_t dict_setdefault(size_t n_args, const mp_obj_t *args) {
    eda0:	b580      	push	{r7, lr}
    eda2:	b082      	sub	sp, #8
    eda4:	af00      	add	r7, sp, #0
    eda6:	6078      	str	r0, [r7, #4]
    eda8:	6039      	str	r1, [r7, #0]
    return dict_get_helper(n_args, args, MP_MAP_LOOKUP_ADD_IF_NOT_FOUND);
    edaa:	2201      	movs	r2, #1
    edac:	6839      	ldr	r1, [r7, #0]
    edae:	6878      	ldr	r0, [r7, #4]
    edb0:	f7ff ff64 	bl	ec7c <dict_get_helper>
    edb4:	4603      	mov	r3, r0
}
    edb6:	4618      	mov	r0, r3
    edb8:	3708      	adds	r7, #8
    edba:	46bd      	mov	sp, r7
    edbc:	bd80      	pop	{r7, pc}
    edbe:	bf00      	nop

0000edc0 <dict_popitem>:
STATIC MP_DEFINE_CONST_FUN_OBJ_VAR_BETWEEN(dict_setdefault_obj, 2, 3, dict_setdefault);

STATIC mp_obj_t dict_popitem(mp_obj_t self_in) {
    edc0:	b580      	push	{r7, lr}
    edc2:	b088      	sub	sp, #32
    edc4:	af00      	add	r7, sp, #0
    edc6:	6078      	str	r0, [r7, #4]
    mp_check_self(MP_OBJ_IS_DICT_TYPE(self_in));
    edc8:	6878      	ldr	r0, [r7, #4]
    edca:	f7ff fc7f 	bl	e6cc <MP_OBJ_IS_OBJ>
    edce:	4603      	mov	r3, r0
    edd0:	f083 0301 	eor.w	r3, r3, #1
    edd4:	b2db      	uxtb	r3, r3
    edd6:	2b00      	cmp	r3, #0
    edd8:	d105      	bne.n	ede6 <dict_popitem+0x26>
    edda:	687b      	ldr	r3, [r7, #4]
    eddc:	681b      	ldr	r3, [r3, #0]
    edde:	68db      	ldr	r3, [r3, #12]
    ede0:	4a22      	ldr	r2, [pc, #136]	; (ee6c <dict_popitem+0xac>)
    ede2:	4293      	cmp	r3, r2
    ede4:	d006      	beq.n	edf4 <dict_popitem+0x34>
    ede6:	4b22      	ldr	r3, [pc, #136]	; (ee70 <dict_popitem+0xb0>)
    ede8:	4a22      	ldr	r2, [pc, #136]	; (ee74 <dict_popitem+0xb4>)
    edea:	f44f 7199 	mov.w	r1, #306	; 0x132
    edee:	4822      	ldr	r0, [pc, #136]	; (ee78 <dict_popitem+0xb8>)
    edf0:	f00c fc6e 	bl	1b6d0 <__assert_func>
    mp_obj_dict_t *self = MP_OBJ_TO_PTR(self_in);
    edf4:	687b      	ldr	r3, [r7, #4]
    edf6:	61fb      	str	r3, [r7, #28]
    mp_ensure_not_fixed(self);
    edf8:	69f8      	ldr	r0, [r7, #28]
    edfa:	f7ff fe53 	bl	eaa4 <mp_ensure_not_fixed>
    size_t cur = 0;
    edfe:	2300      	movs	r3, #0
    ee00:	613b      	str	r3, [r7, #16]
    mp_map_elem_t *next = dict_iter_next(self, &cur);
    ee02:	f107 0310 	add.w	r3, r7, #16
    ee06:	4619      	mov	r1, r3
    ee08:	69f8      	ldr	r0, [r7, #28]
    ee0a:	f7ff fca7 	bl	e75c <dict_iter_next>
    ee0e:	61b8      	str	r0, [r7, #24]
    if (next == NULL) {
    ee10:	69bb      	ldr	r3, [r7, #24]
    ee12:	2b00      	cmp	r3, #0
    ee14:	d103      	bne.n	ee1e <dict_popitem+0x5e>
        mp_raise_msg(&mp_type_KeyError, "popitem(): dictionary is empty");
    ee16:	4919      	ldr	r1, [pc, #100]	; (ee7c <dict_popitem+0xbc>)
    ee18:	4819      	ldr	r0, [pc, #100]	; (ee80 <dict_popitem+0xc0>)
    ee1a:	f7fe f9c9 	bl	d1b0 <mp_raise_msg>
    }
    self->map.used--;
    ee1e:	69fb      	ldr	r3, [r7, #28]
    ee20:	685b      	ldr	r3, [r3, #4]
    ee22:	f3c3 03dc 	ubfx	r3, r3, #3, #29
    ee26:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
    ee2a:	3b01      	subs	r3, #1
    ee2c:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
    ee30:	69f9      	ldr	r1, [r7, #28]
    ee32:	684a      	ldr	r2, [r1, #4]
    ee34:	f363 02df 	bfi	r2, r3, #3, #29
    ee38:	604a      	str	r2, [r1, #4]
    mp_obj_t items[] = {next->key, next->value};
    ee3a:	69bb      	ldr	r3, [r7, #24]
    ee3c:	681b      	ldr	r3, [r3, #0]
    ee3e:	60bb      	str	r3, [r7, #8]
    ee40:	69bb      	ldr	r3, [r7, #24]
    ee42:	685b      	ldr	r3, [r3, #4]
    ee44:	60fb      	str	r3, [r7, #12]
    next->key = MP_OBJ_SENTINEL; // must mark key as sentinel to indicate that it was deleted
    ee46:	69bb      	ldr	r3, [r7, #24]
    ee48:	2208      	movs	r2, #8
    ee4a:	601a      	str	r2, [r3, #0]
    next->value = MP_OBJ_NULL;
    ee4c:	69bb      	ldr	r3, [r7, #24]
    ee4e:	2200      	movs	r2, #0
    ee50:	605a      	str	r2, [r3, #4]
    mp_obj_t tuple = mp_obj_new_tuple(2, items);
    ee52:	f107 0308 	add.w	r3, r7, #8
    ee56:	4619      	mov	r1, r3
    ee58:	2002      	movs	r0, #2
    ee5a:	f007 f907 	bl	1606c <mp_obj_new_tuple>
    ee5e:	6178      	str	r0, [r7, #20]

    return tuple;
    ee60:	697b      	ldr	r3, [r7, #20]
}
    ee62:	4618      	mov	r0, r3
    ee64:	3720      	adds	r7, #32
    ee66:	46bd      	mov	sp, r7
    ee68:	bd80      	pop	{r7, pc}
    ee6a:	bf00      	nop
    ee6c:	0000e851 	.word	0x0000e851
    ee70:	00021c44 	.word	0x00021c44
    ee74:	00022080 	.word	0x00022080
    ee78:	00021ca4 	.word	0x00021ca4
    ee7c:	00021d60 	.word	0x00021d60
    ee80:	000224b8 	.word	0x000224b8

0000ee84 <dict_update>:
STATIC MP_DEFINE_CONST_FUN_OBJ_1(dict_popitem_obj, dict_popitem);

STATIC mp_obj_t dict_update(size_t n_args, const mp_obj_t *args, mp_map_t *kwargs) {
    ee84:	b580      	push	{r7, lr}
    ee86:	b090      	sub	sp, #64	; 0x40
    ee88:	af02      	add	r7, sp, #8
    ee8a:	60f8      	str	r0, [r7, #12]
    ee8c:	60b9      	str	r1, [r7, #8]
    ee8e:	607a      	str	r2, [r7, #4]
    mp_check_self(MP_OBJ_IS_DICT_TYPE(args[0]));
    ee90:	68bb      	ldr	r3, [r7, #8]
    ee92:	681b      	ldr	r3, [r3, #0]
    ee94:	4618      	mov	r0, r3
    ee96:	f7ff fc19 	bl	e6cc <MP_OBJ_IS_OBJ>
    ee9a:	4603      	mov	r3, r0
    ee9c:	f083 0301 	eor.w	r3, r3, #1
    eea0:	b2db      	uxtb	r3, r3
    eea2:	2b00      	cmp	r3, #0
    eea4:	d106      	bne.n	eeb4 <dict_update+0x30>
    eea6:	68bb      	ldr	r3, [r7, #8]
    eea8:	681b      	ldr	r3, [r3, #0]
    eeaa:	681b      	ldr	r3, [r3, #0]
    eeac:	68db      	ldr	r3, [r3, #12]
    eeae:	4a5d      	ldr	r2, [pc, #372]	; (f024 <dict_update+0x1a0>)
    eeb0:	4293      	cmp	r3, r2
    eeb2:	d006      	beq.n	eec2 <dict_update+0x3e>
    eeb4:	4b5c      	ldr	r3, [pc, #368]	; (f028 <dict_update+0x1a4>)
    eeb6:	4a5d      	ldr	r2, [pc, #372]	; (f02c <dict_update+0x1a8>)
    eeb8:	f240 1145 	movw	r1, #325	; 0x145
    eebc:	485c      	ldr	r0, [pc, #368]	; (f030 <dict_update+0x1ac>)
    eebe:	f00c fc07 	bl	1b6d0 <__assert_func>
    mp_obj_dict_t *self = MP_OBJ_TO_PTR(args[0]);
    eec2:	68bb      	ldr	r3, [r7, #8]
    eec4:	681b      	ldr	r3, [r3, #0]
    eec6:	633b      	str	r3, [r7, #48]	; 0x30
    mp_ensure_not_fixed(self);
    eec8:	6b38      	ldr	r0, [r7, #48]	; 0x30
    eeca:	f7ff fdeb 	bl	eaa4 <mp_ensure_not_fixed>

    mp_arg_check_num(n_args, kwargs->used, 1, 2, true);
    eece:	687b      	ldr	r3, [r7, #4]
    eed0:	681b      	ldr	r3, [r3, #0]
    eed2:	f3c3 03dc 	ubfx	r3, r3, #3, #29
    eed6:	4619      	mov	r1, r3
    eed8:	2301      	movs	r3, #1
    eeda:	9300      	str	r3, [sp, #0]
    eedc:	2302      	movs	r3, #2
    eede:	2201      	movs	r2, #1
    eee0:	68f8      	ldr	r0, [r7, #12]
    eee2:	f7fe f9f3 	bl	d2cc <mp_arg_check_num>

    if (n_args == 2) {
    eee6:	68fb      	ldr	r3, [r7, #12]
    eee8:	2b02      	cmp	r3, #2
    eeea:	d16f      	bne.n	efcc <dict_update+0x148>
        // given a positional argument

        if (MP_OBJ_IS_DICT_TYPE(args[1])) {
    eeec:	68bb      	ldr	r3, [r7, #8]
    eeee:	3304      	adds	r3, #4
    eef0:	681b      	ldr	r3, [r3, #0]
    eef2:	4618      	mov	r0, r3
    eef4:	f7ff fbea 	bl	e6cc <MP_OBJ_IS_OBJ>
    eef8:	4603      	mov	r3, r0
    eefa:	2b00      	cmp	r3, #0
    eefc:	d02d      	beq.n	ef5a <dict_update+0xd6>
    eefe:	68bb      	ldr	r3, [r7, #8]
    ef00:	3304      	adds	r3, #4
    ef02:	681b      	ldr	r3, [r3, #0]
    ef04:	681b      	ldr	r3, [r3, #0]
    ef06:	68db      	ldr	r3, [r3, #12]
    ef08:	4a46      	ldr	r2, [pc, #280]	; (f024 <dict_update+0x1a0>)
    ef0a:	4293      	cmp	r3, r2
    ef0c:	d125      	bne.n	ef5a <dict_update+0xd6>
            // update from other dictionary (make sure other is not self)
            if (args[1] != args[0]) {
    ef0e:	68bb      	ldr	r3, [r7, #8]
    ef10:	3304      	adds	r3, #4
    ef12:	681a      	ldr	r2, [r3, #0]
    ef14:	68bb      	ldr	r3, [r7, #8]
    ef16:	681b      	ldr	r3, [r3, #0]
    ef18:	429a      	cmp	r2, r3
    ef1a:	d057      	beq.n	efcc <dict_update+0x148>
                size_t cur = 0;
    ef1c:	2300      	movs	r3, #0
    ef1e:	613b      	str	r3, [r7, #16]
                mp_map_elem_t *elem = NULL;
    ef20:	2300      	movs	r3, #0
    ef22:	62fb      	str	r3, [r7, #44]	; 0x2c
                while ((elem = dict_iter_next((mp_obj_dict_t*)MP_OBJ_TO_PTR(args[1]), &cur)) != NULL) {
    ef24:	e00b      	b.n	ef3e <dict_update+0xba>
                    mp_map_lookup(&self->map, elem->key, MP_MAP_LOOKUP_ADD_IF_NOT_FOUND)->value = elem->value;
    ef26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    ef28:	1d18      	adds	r0, r3, #4
    ef2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    ef2c:	681b      	ldr	r3, [r3, #0]
    ef2e:	2201      	movs	r2, #1
    ef30:	4619      	mov	r1, r3
    ef32:	f7fe fc15 	bl	d760 <mp_map_lookup>
    ef36:	4602      	mov	r2, r0
    ef38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    ef3a:	685b      	ldr	r3, [r3, #4]
    ef3c:	6053      	str	r3, [r2, #4]
                while ((elem = dict_iter_next((mp_obj_dict_t*)MP_OBJ_TO_PTR(args[1]), &cur)) != NULL) {
    ef3e:	68bb      	ldr	r3, [r7, #8]
    ef40:	3304      	adds	r3, #4
    ef42:	681b      	ldr	r3, [r3, #0]
    ef44:	f107 0210 	add.w	r2, r7, #16
    ef48:	4611      	mov	r1, r2
    ef4a:	4618      	mov	r0, r3
    ef4c:	f7ff fc06 	bl	e75c <dict_iter_next>
    ef50:	62f8      	str	r0, [r7, #44]	; 0x2c
    ef52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    ef54:	2b00      	cmp	r3, #0
    ef56:	d1e6      	bne.n	ef26 <dict_update+0xa2>
            if (args[1] != args[0]) {
    ef58:	e038      	b.n	efcc <dict_update+0x148>
                }
            }
        } else {
            // update from a generic iterable of pairs
            mp_obj_t iter = mp_getiter(args[1], NULL);
    ef5a:	68bb      	ldr	r3, [r7, #8]
    ef5c:	3304      	adds	r3, #4
    ef5e:	681b      	ldr	r3, [r3, #0]
    ef60:	2100      	movs	r1, #0
    ef62:	4618      	mov	r0, r3
    ef64:	f7fd fdf4 	bl	cb50 <mp_getiter>
    ef68:	62b8      	str	r0, [r7, #40]	; 0x28
            mp_obj_t next = MP_OBJ_NULL;
    ef6a:	2300      	movs	r3, #0
    ef6c:	627b      	str	r3, [r7, #36]	; 0x24
            while ((next = mp_iternext(iter)) != MP_OBJ_STOP_ITERATION) {
    ef6e:	e026      	b.n	efbe <dict_update+0x13a>
                mp_obj_t inneriter = mp_getiter(next, NULL);
    ef70:	2100      	movs	r1, #0
    ef72:	6a78      	ldr	r0, [r7, #36]	; 0x24
    ef74:	f7fd fdec 	bl	cb50 <mp_getiter>
    ef78:	6238      	str	r0, [r7, #32]
                mp_obj_t key = mp_iternext(inneriter);
    ef7a:	6a38      	ldr	r0, [r7, #32]
    ef7c:	f7fd fe6a 	bl	cc54 <mp_iternext>
    ef80:	61f8      	str	r0, [r7, #28]
                mp_obj_t value = mp_iternext(inneriter);
    ef82:	6a38      	ldr	r0, [r7, #32]
    ef84:	f7fd fe66 	bl	cc54 <mp_iternext>
    ef88:	61b8      	str	r0, [r7, #24]
                mp_obj_t stop = mp_iternext(inneriter);
    ef8a:	6a38      	ldr	r0, [r7, #32]
    ef8c:	f7fd fe62 	bl	cc54 <mp_iternext>
    ef90:	6178      	str	r0, [r7, #20]
                if (key == MP_OBJ_STOP_ITERATION
    ef92:	69fb      	ldr	r3, [r7, #28]
    ef94:	2b04      	cmp	r3, #4
    ef96:	d005      	beq.n	efa4 <dict_update+0x120>
                    || value == MP_OBJ_STOP_ITERATION
    ef98:	69bb      	ldr	r3, [r7, #24]
    ef9a:	2b04      	cmp	r3, #4
    ef9c:	d002      	beq.n	efa4 <dict_update+0x120>
                    || stop != MP_OBJ_STOP_ITERATION) {
    ef9e:	697b      	ldr	r3, [r7, #20]
    efa0:	2b04      	cmp	r3, #4
    efa2:	d002      	beq.n	efaa <dict_update+0x126>
                    mp_raise_ValueError("dict update sequence has wrong length");
    efa4:	4823      	ldr	r0, [pc, #140]	; (f034 <dict_update+0x1b0>)
    efa6:	f7fe f91b 	bl	d1e0 <mp_raise_ValueError>
                } else {
                    mp_map_lookup(&self->map, key, MP_MAP_LOOKUP_ADD_IF_NOT_FOUND)->value = value;
    efaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    efac:	3304      	adds	r3, #4
    efae:	2201      	movs	r2, #1
    efb0:	69f9      	ldr	r1, [r7, #28]
    efb2:	4618      	mov	r0, r3
    efb4:	f7fe fbd4 	bl	d760 <mp_map_lookup>
    efb8:	4602      	mov	r2, r0
    efba:	69bb      	ldr	r3, [r7, #24]
    efbc:	6053      	str	r3, [r2, #4]
            while ((next = mp_iternext(iter)) != MP_OBJ_STOP_ITERATION) {
    efbe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    efc0:	f7fd fe48 	bl	cc54 <mp_iternext>
    efc4:	6278      	str	r0, [r7, #36]	; 0x24
    efc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    efc8:	2b04      	cmp	r3, #4
    efca:	d1d1      	bne.n	ef70 <dict_update+0xec>
            }
        }
    }

    // update the dict with any keyword args
    for (size_t i = 0; i < kwargs->alloc; i++) {
    efcc:	2300      	movs	r3, #0
    efce:	637b      	str	r3, [r7, #52]	; 0x34
    efd0:	e01d      	b.n	f00e <dict_update+0x18a>
        if (MP_MAP_SLOT_IS_FILLED(kwargs, i)) {
    efd2:	6b79      	ldr	r1, [r7, #52]	; 0x34
    efd4:	6878      	ldr	r0, [r7, #4]
    efd6:	f7ff fb8b 	bl	e6f0 <MP_MAP_SLOT_IS_FILLED>
    efda:	4603      	mov	r3, r0
    efdc:	2b00      	cmp	r3, #0
    efde:	d013      	beq.n	f008 <dict_update+0x184>
            mp_map_lookup(&self->map, kwargs->table[i].key, MP_MAP_LOOKUP_ADD_IF_NOT_FOUND)->value = kwargs->table[i].value;
    efe0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    efe2:	1d18      	adds	r0, r3, #4
    efe4:	687b      	ldr	r3, [r7, #4]
    efe6:	689a      	ldr	r2, [r3, #8]
    efe8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    efea:	00db      	lsls	r3, r3, #3
    efec:	4413      	add	r3, r2
    efee:	681b      	ldr	r3, [r3, #0]
    eff0:	2201      	movs	r2, #1
    eff2:	4619      	mov	r1, r3
    eff4:	f7fe fbb4 	bl	d760 <mp_map_lookup>
    eff8:	4601      	mov	r1, r0
    effa:	687b      	ldr	r3, [r7, #4]
    effc:	689a      	ldr	r2, [r3, #8]
    effe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    f000:	00db      	lsls	r3, r3, #3
    f002:	4413      	add	r3, r2
    f004:	685b      	ldr	r3, [r3, #4]
    f006:	604b      	str	r3, [r1, #4]
    for (size_t i = 0; i < kwargs->alloc; i++) {
    f008:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    f00a:	3301      	adds	r3, #1
    f00c:	637b      	str	r3, [r7, #52]	; 0x34
    f00e:	687b      	ldr	r3, [r7, #4]
    f010:	685a      	ldr	r2, [r3, #4]
    f012:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    f014:	429a      	cmp	r2, r3
    f016:	d8dc      	bhi.n	efd2 <dict_update+0x14e>
        }
    }

    return mp_const_none;
    f018:	4b07      	ldr	r3, [pc, #28]	; (f038 <dict_update+0x1b4>)
}
    f01a:	4618      	mov	r0, r3
    f01c:	3738      	adds	r7, #56	; 0x38
    f01e:	46bd      	mov	sp, r7
    f020:	bd80      	pop	{r7, pc}
    f022:	bf00      	nop
    f024:	0000e851 	.word	0x0000e851
    f028:	00021cdc 	.word	0x00021cdc
    f02c:	00022090 	.word	0x00022090
    f030:	00021ca4 	.word	0x00021ca4
    f034:	00021d88 	.word	0x00021d88
    f038:	0002345c 	.word	0x0002345c

0000f03c <dict_view_it_iternext>:
    mp_obj_base_t base;
    mp_obj_t dict;
    mp_dict_view_kind_t kind;
} mp_obj_dict_view_t;

STATIC mp_obj_t dict_view_it_iternext(mp_obj_t self_in) {
    f03c:	b580      	push	{r7, lr}
    f03e:	b086      	sub	sp, #24
    f040:	af00      	add	r7, sp, #0
    f042:	6078      	str	r0, [r7, #4]
    mp_check_self(MP_OBJ_IS_TYPE(self_in, &dict_view_it_type));
    f044:	6878      	ldr	r0, [r7, #4]
    f046:	f7ff fb41 	bl	e6cc <MP_OBJ_IS_OBJ>
    f04a:	4603      	mov	r3, r0
    f04c:	f083 0301 	eor.w	r3, r3, #1
    f050:	b2db      	uxtb	r3, r3
    f052:	2b00      	cmp	r3, #0
    f054:	d104      	bne.n	f060 <dict_view_it_iternext+0x24>
    f056:	687b      	ldr	r3, [r7, #4]
    f058:	681b      	ldr	r3, [r3, #0]
    f05a:	4a1b      	ldr	r2, [pc, #108]	; (f0c8 <dict_view_it_iternext+0x8c>)
    f05c:	4293      	cmp	r3, r2
    f05e:	d006      	beq.n	f06e <dict_view_it_iternext+0x32>
    f060:	4b1a      	ldr	r3, [pc, #104]	; (f0cc <dict_view_it_iternext+0x90>)
    f062:	4a1b      	ldr	r2, [pc, #108]	; (f0d0 <dict_view_it_iternext+0x94>)
    f064:	f240 1193 	movw	r1, #403	; 0x193
    f068:	481a      	ldr	r0, [pc, #104]	; (f0d4 <dict_view_it_iternext+0x98>)
    f06a:	f00c fb31 	bl	1b6d0 <__assert_func>
    mp_obj_dict_view_it_t *self = MP_OBJ_TO_PTR(self_in);
    f06e:	687b      	ldr	r3, [r7, #4]
    f070:	617b      	str	r3, [r7, #20]
    mp_map_elem_t *next = dict_iter_next(MP_OBJ_TO_PTR(self->dict), &self->cur);
    f072:	697b      	ldr	r3, [r7, #20]
    f074:	689a      	ldr	r2, [r3, #8]
    f076:	697b      	ldr	r3, [r7, #20]
    f078:	330c      	adds	r3, #12
    f07a:	4619      	mov	r1, r3
    f07c:	4610      	mov	r0, r2
    f07e:	f7ff fb6d 	bl	e75c <dict_iter_next>
    f082:	6138      	str	r0, [r7, #16]

    if (next == NULL) {
    f084:	693b      	ldr	r3, [r7, #16]
    f086:	2b00      	cmp	r3, #0
    f088:	d101      	bne.n	f08e <dict_view_it_iternext+0x52>
        return MP_OBJ_STOP_ITERATION;
    f08a:	2304      	movs	r3, #4
    f08c:	e018      	b.n	f0c0 <dict_view_it_iternext+0x84>
    } else {
        switch (self->kind) {
    f08e:	697b      	ldr	r3, [r7, #20]
    f090:	685b      	ldr	r3, [r3, #4]
    f092:	2b01      	cmp	r3, #1
    f094:	d00f      	beq.n	f0b6 <dict_view_it_iternext+0x7a>
    f096:	2b02      	cmp	r3, #2
    f098:	d010      	beq.n	f0bc <dict_view_it_iternext+0x80>
            case MP_DICT_VIEW_ITEMS:
            default: {
                mp_obj_t items[] = {next->key, next->value};
    f09a:	693b      	ldr	r3, [r7, #16]
    f09c:	681b      	ldr	r3, [r3, #0]
    f09e:	60bb      	str	r3, [r7, #8]
    f0a0:	693b      	ldr	r3, [r7, #16]
    f0a2:	685b      	ldr	r3, [r3, #4]
    f0a4:	60fb      	str	r3, [r7, #12]
                return mp_obj_new_tuple(2, items);
    f0a6:	f107 0308 	add.w	r3, r7, #8
    f0aa:	4619      	mov	r1, r3
    f0ac:	2002      	movs	r0, #2
    f0ae:	f006 ffdd 	bl	1606c <mp_obj_new_tuple>
    f0b2:	4603      	mov	r3, r0
    f0b4:	e004      	b.n	f0c0 <dict_view_it_iternext+0x84>
            }
            case MP_DICT_VIEW_KEYS:
                return next->key;
    f0b6:	693b      	ldr	r3, [r7, #16]
    f0b8:	681b      	ldr	r3, [r3, #0]
    f0ba:	e001      	b.n	f0c0 <dict_view_it_iternext+0x84>
            case MP_DICT_VIEW_VALUES:
                return next->value;
    f0bc:	693b      	ldr	r3, [r7, #16]
    f0be:	685b      	ldr	r3, [r3, #4]
        }
    }
}
    f0c0:	4618      	mov	r0, r3
    f0c2:	3718      	adds	r7, #24
    f0c4:	46bd      	mov	sp, r7
    f0c6:	bd80      	pop	{r7, pc}
    f0c8:	00021df8 	.word	0x00021df8
    f0cc:	00021e64 	.word	0x00021e64
    f0d0:	0002209c 	.word	0x0002209c
    f0d4:	00021ca4 	.word	0x00021ca4

0000f0d8 <dict_view_getiter>:
    .name = MP_QSTR_iterator,
    .getiter = mp_identity_getiter,
    .iternext = dict_view_it_iternext,
};

STATIC mp_obj_t dict_view_getiter(mp_obj_t view_in, mp_obj_iter_buf_t *iter_buf) {
    f0d8:	b580      	push	{r7, lr}
    f0da:	b084      	sub	sp, #16
    f0dc:	af00      	add	r7, sp, #0
    f0de:	6078      	str	r0, [r7, #4]
    f0e0:	6039      	str	r1, [r7, #0]
    assert(sizeof(mp_obj_dict_view_it_t) <= sizeof(mp_obj_iter_buf_t));
    mp_check_self(MP_OBJ_IS_TYPE(view_in, &dict_view_type));
    f0e2:	6878      	ldr	r0, [r7, #4]
    f0e4:	f7ff faf2 	bl	e6cc <MP_OBJ_IS_OBJ>
    f0e8:	4603      	mov	r3, r0
    f0ea:	f083 0301 	eor.w	r3, r3, #1
    f0ee:	b2db      	uxtb	r3, r3
    f0f0:	2b00      	cmp	r3, #0
    f0f2:	d104      	bne.n	f0fe <dict_view_getiter+0x26>
    f0f4:	687b      	ldr	r3, [r7, #4]
    f0f6:	681b      	ldr	r3, [r3, #0]
    f0f8:	4a10      	ldr	r2, [pc, #64]	; (f13c <dict_view_getiter+0x64>)
    f0fa:	4293      	cmp	r3, r2
    f0fc:	d006      	beq.n	f10c <dict_view_getiter+0x34>
    f0fe:	4b10      	ldr	r3, [pc, #64]	; (f140 <dict_view_getiter+0x68>)
    f100:	4a10      	ldr	r2, [pc, #64]	; (f144 <dict_view_getiter+0x6c>)
    f102:	f240 11b1 	movw	r1, #433	; 0x1b1
    f106:	4810      	ldr	r0, [pc, #64]	; (f148 <dict_view_getiter+0x70>)
    f108:	f00c fae2 	bl	1b6d0 <__assert_func>
    mp_obj_dict_view_t *view = MP_OBJ_TO_PTR(view_in);
    f10c:	687b      	ldr	r3, [r7, #4]
    f10e:	60fb      	str	r3, [r7, #12]
    mp_obj_dict_view_it_t *o = (mp_obj_dict_view_it_t*)iter_buf;
    f110:	683b      	ldr	r3, [r7, #0]
    f112:	60bb      	str	r3, [r7, #8]
    o->base.type = &dict_view_it_type;
    f114:	68bb      	ldr	r3, [r7, #8]
    f116:	4a0d      	ldr	r2, [pc, #52]	; (f14c <dict_view_getiter+0x74>)
    f118:	601a      	str	r2, [r3, #0]
    o->kind = view->kind;
    f11a:	68fb      	ldr	r3, [r7, #12]
    f11c:	689a      	ldr	r2, [r3, #8]
    f11e:	68bb      	ldr	r3, [r7, #8]
    f120:	605a      	str	r2, [r3, #4]
    o->dict = view->dict;
    f122:	68fb      	ldr	r3, [r7, #12]
    f124:	685a      	ldr	r2, [r3, #4]
    f126:	68bb      	ldr	r3, [r7, #8]
    f128:	609a      	str	r2, [r3, #8]
    o->cur = 0;
    f12a:	68bb      	ldr	r3, [r7, #8]
    f12c:	2200      	movs	r2, #0
    f12e:	60da      	str	r2, [r3, #12]
    return MP_OBJ_FROM_PTR(o);
    f130:	68bb      	ldr	r3, [r7, #8]
}
    f132:	4618      	mov	r0, r3
    f134:	3710      	adds	r7, #16
    f136:	46bd      	mov	sp, r7
    f138:	bd80      	pop	{r7, pc}
    f13a:	bf00      	nop
    f13c:	00021dbc 	.word	0x00021dbc
    f140:	00021ec4 	.word	0x00021ec4
    f144:	000220b4 	.word	0x000220b4
    f148:	00021ca4 	.word	0x00021ca4
    f14c:	00021df8 	.word	0x00021df8

0000f150 <dict_view_print>:

STATIC void dict_view_print(const mp_print_t *print, mp_obj_t self_in, mp_print_kind_t kind) {
    f150:	b580      	push	{r7, lr}
    f152:	b08c      	sub	sp, #48	; 0x30
    f154:	af00      	add	r7, sp, #0
    f156:	60f8      	str	r0, [r7, #12]
    f158:	60b9      	str	r1, [r7, #8]
    f15a:	607a      	str	r2, [r7, #4]
    (void)kind;
    mp_check_self(MP_OBJ_IS_TYPE(self_in, &dict_view_type));
    f15c:	68b8      	ldr	r0, [r7, #8]
    f15e:	f7ff fab5 	bl	e6cc <MP_OBJ_IS_OBJ>
    f162:	4603      	mov	r3, r0
    f164:	f083 0301 	eor.w	r3, r3, #1
    f168:	b2db      	uxtb	r3, r3
    f16a:	2b00      	cmp	r3, #0
    f16c:	d104      	bne.n	f178 <dict_view_print+0x28>
    f16e:	68bb      	ldr	r3, [r7, #8]
    f170:	681b      	ldr	r3, [r3, #0]
    f172:	4a24      	ldr	r2, [pc, #144]	; (f204 <dict_view_print+0xb4>)
    f174:	4293      	cmp	r3, r2
    f176:	d006      	beq.n	f186 <dict_view_print+0x36>
    f178:	4b23      	ldr	r3, [pc, #140]	; (f208 <dict_view_print+0xb8>)
    f17a:	4a24      	ldr	r2, [pc, #144]	; (f20c <dict_view_print+0xbc>)
    f17c:	f240 11bd 	movw	r1, #445	; 0x1bd
    f180:	4823      	ldr	r0, [pc, #140]	; (f210 <dict_view_print+0xc0>)
    f182:	f00c faa5 	bl	1b6d0 <__assert_func>
    mp_obj_dict_view_t *self = MP_OBJ_TO_PTR(self_in);
    f186:	68bb      	ldr	r3, [r7, #8]
    f188:	62bb      	str	r3, [r7, #40]	; 0x28
    bool first = true;
    f18a:	2301      	movs	r3, #1
    f18c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    mp_print_str(print, mp_dict_view_names[self->kind]);
    f190:	6abb      	ldr	r3, [r7, #40]	; 0x28
    f192:	689b      	ldr	r3, [r3, #8]
    f194:	4a1f      	ldr	r2, [pc, #124]	; (f214 <dict_view_print+0xc4>)
    f196:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f19a:	4619      	mov	r1, r3
    f19c:	68f8      	ldr	r0, [r7, #12]
    f19e:	f7f2 fc29 	bl	19f4 <mp_print_str>
    mp_print_str(print, "([");
    f1a2:	491d      	ldr	r1, [pc, #116]	; (f218 <dict_view_print+0xc8>)
    f1a4:	68f8      	ldr	r0, [r7, #12]
    f1a6:	f7f2 fc25 	bl	19f4 <mp_print_str>
    mp_obj_iter_buf_t iter_buf;
    mp_obj_t self_iter = dict_view_getiter(self_in, &iter_buf);
    f1aa:	f107 0310 	add.w	r3, r7, #16
    f1ae:	4619      	mov	r1, r3
    f1b0:	68b8      	ldr	r0, [r7, #8]
    f1b2:	f7ff ff91 	bl	f0d8 <dict_view_getiter>
    f1b6:	6278      	str	r0, [r7, #36]	; 0x24
    mp_obj_t next = MP_OBJ_NULL;
    f1b8:	2300      	movs	r3, #0
    f1ba:	623b      	str	r3, [r7, #32]
    while ((next = dict_view_it_iternext(self_iter)) != MP_OBJ_STOP_ITERATION) {
    f1bc:	e012      	b.n	f1e4 <dict_view_print+0x94>
        if (!first) {
    f1be:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    f1c2:	f083 0301 	eor.w	r3, r3, #1
    f1c6:	b2db      	uxtb	r3, r3
    f1c8:	2b00      	cmp	r3, #0
    f1ca:	d003      	beq.n	f1d4 <dict_view_print+0x84>
            mp_print_str(print, ", ");
    f1cc:	4913      	ldr	r1, [pc, #76]	; (f21c <dict_view_print+0xcc>)
    f1ce:	68f8      	ldr	r0, [r7, #12]
    f1d0:	f7f2 fc10 	bl	19f4 <mp_print_str>
        }
        first = false;
    f1d4:	2300      	movs	r3, #0
    f1d6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        mp_obj_print_helper(print, next, PRINT_REPR);
    f1da:	2201      	movs	r2, #1
    f1dc:	6a39      	ldr	r1, [r7, #32]
    f1de:	68f8      	ldr	r0, [r7, #12]
    f1e0:	f7fe fc9a 	bl	db18 <mp_obj_print_helper>
    while ((next = dict_view_it_iternext(self_iter)) != MP_OBJ_STOP_ITERATION) {
    f1e4:	6a78      	ldr	r0, [r7, #36]	; 0x24
    f1e6:	f7ff ff29 	bl	f03c <dict_view_it_iternext>
    f1ea:	6238      	str	r0, [r7, #32]
    f1ec:	6a3b      	ldr	r3, [r7, #32]
    f1ee:	2b04      	cmp	r3, #4
    f1f0:	d1e5      	bne.n	f1be <dict_view_print+0x6e>
    }
    mp_print_str(print, "])");
    f1f2:	490b      	ldr	r1, [pc, #44]	; (f220 <dict_view_print+0xd0>)
    f1f4:	68f8      	ldr	r0, [r7, #12]
    f1f6:	f7f2 fbfd 	bl	19f4 <mp_print_str>
}
    f1fa:	bf00      	nop
    f1fc:	3730      	adds	r7, #48	; 0x30
    f1fe:	46bd      	mov	sp, r7
    f200:	bd80      	pop	{r7, pc}
    f202:	bf00      	nop
    f204:	00021dbc 	.word	0x00021dbc
    f208:	00021f20 	.word	0x00021f20
    f20c:	000220c8 	.word	0x000220c8
    f210:	00021ca4 	.word	0x00021ca4
    f214:	00021e58 	.word	0x00021e58
    f218:	00021f7c 	.word	0x00021f7c
    f21c:	00021c38 	.word	0x00021c38
    f220:	00021f80 	.word	0x00021f80

0000f224 <dict_view_binary_op>:

STATIC mp_obj_t dict_view_binary_op(mp_binary_op_t op, mp_obj_t lhs_in, mp_obj_t rhs_in) {
    f224:	b580      	push	{r7, lr}
    f226:	b086      	sub	sp, #24
    f228:	af00      	add	r7, sp, #0
    f22a:	60f8      	str	r0, [r7, #12]
    f22c:	60b9      	str	r1, [r7, #8]
    f22e:	607a      	str	r2, [r7, #4]
    // only supported for the 'keys' kind until sets and dicts are refactored
    mp_obj_dict_view_t *o = MP_OBJ_TO_PTR(lhs_in);
    f230:	68bb      	ldr	r3, [r7, #8]
    f232:	617b      	str	r3, [r7, #20]
    if (o->kind != MP_DICT_VIEW_KEYS) {
    f234:	697b      	ldr	r3, [r7, #20]
    f236:	689b      	ldr	r3, [r3, #8]
    f238:	2b01      	cmp	r3, #1
    f23a:	d001      	beq.n	f240 <dict_view_binary_op+0x1c>
        return MP_OBJ_NULL; // op not supported
    f23c:	2300      	movs	r3, #0
    f23e:	e00c      	b.n	f25a <dict_view_binary_op+0x36>
    }
    if (op != MP_BINARY_OP_CONTAINS) {
    f240:	68fb      	ldr	r3, [r7, #12]
    f242:	2b22      	cmp	r3, #34	; 0x22
    f244:	d001      	beq.n	f24a <dict_view_binary_op+0x26>
        return MP_OBJ_NULL; // op not supported
    f246:	2300      	movs	r3, #0
    f248:	e007      	b.n	f25a <dict_view_binary_op+0x36>
    }
    return dict_binary_op(op, o->dict, rhs_in);
    f24a:	697b      	ldr	r3, [r7, #20]
    f24c:	685b      	ldr	r3, [r3, #4]
    f24e:	687a      	ldr	r2, [r7, #4]
    f250:	4619      	mov	r1, r3
    f252:	68f8      	ldr	r0, [r7, #12]
    f254:	f7ff fb58 	bl	e908 <dict_binary_op>
    f258:	4603      	mov	r3, r0
}
    f25a:	4618      	mov	r0, r3
    f25c:	3718      	adds	r7, #24
    f25e:	46bd      	mov	sp, r7
    f260:	bd80      	pop	{r7, pc}
    f262:	bf00      	nop

0000f264 <mp_obj_new_dict_view>:
    .print = dict_view_print,
    .binary_op = dict_view_binary_op,
    .getiter = dict_view_getiter,
};

STATIC mp_obj_t mp_obj_new_dict_view(mp_obj_t dict, mp_dict_view_kind_t kind) {
    f264:	b580      	push	{r7, lr}
    f266:	b084      	sub	sp, #16
    f268:	af00      	add	r7, sp, #0
    f26a:	6078      	str	r0, [r7, #4]
    f26c:	6039      	str	r1, [r7, #0]
    mp_obj_dict_view_t *o = m_new_obj(mp_obj_dict_view_t);
    f26e:	200c      	movs	r0, #12
    f270:	f7f1 f854 	bl	31c <m_malloc>
    f274:	60f8      	str	r0, [r7, #12]
    o->base.type = &dict_view_type;
    f276:	68fb      	ldr	r3, [r7, #12]
    f278:	4a06      	ldr	r2, [pc, #24]	; (f294 <mp_obj_new_dict_view+0x30>)
    f27a:	601a      	str	r2, [r3, #0]
    o->dict = dict;
    f27c:	68fb      	ldr	r3, [r7, #12]
    f27e:	687a      	ldr	r2, [r7, #4]
    f280:	605a      	str	r2, [r3, #4]
    o->kind = kind;
    f282:	68fb      	ldr	r3, [r7, #12]
    f284:	683a      	ldr	r2, [r7, #0]
    f286:	609a      	str	r2, [r3, #8]
    return MP_OBJ_FROM_PTR(o);
    f288:	68fb      	ldr	r3, [r7, #12]
}
    f28a:	4618      	mov	r0, r3
    f28c:	3710      	adds	r7, #16
    f28e:	46bd      	mov	sp, r7
    f290:	bd80      	pop	{r7, pc}
    f292:	bf00      	nop
    f294:	00021dbc 	.word	0x00021dbc

0000f298 <dict_view>:

STATIC mp_obj_t dict_view(mp_obj_t self_in, mp_dict_view_kind_t kind) {
    f298:	b580      	push	{r7, lr}
    f29a:	b082      	sub	sp, #8
    f29c:	af00      	add	r7, sp, #0
    f29e:	6078      	str	r0, [r7, #4]
    f2a0:	6039      	str	r1, [r7, #0]
    mp_check_self(MP_OBJ_IS_DICT_TYPE(self_in));
    f2a2:	6878      	ldr	r0, [r7, #4]
    f2a4:	f7ff fa12 	bl	e6cc <MP_OBJ_IS_OBJ>
    f2a8:	4603      	mov	r3, r0
    f2aa:	f083 0301 	eor.w	r3, r3, #1
    f2ae:	b2db      	uxtb	r3, r3
    f2b0:	2b00      	cmp	r3, #0
    f2b2:	d105      	bne.n	f2c0 <dict_view+0x28>
    f2b4:	687b      	ldr	r3, [r7, #4]
    f2b6:	681b      	ldr	r3, [r3, #0]
    f2b8:	68db      	ldr	r3, [r3, #12]
    f2ba:	4a09      	ldr	r2, [pc, #36]	; (f2e0 <dict_view+0x48>)
    f2bc:	4293      	cmp	r3, r2
    f2be:	d006      	beq.n	f2ce <dict_view+0x36>
    f2c0:	4b08      	ldr	r3, [pc, #32]	; (f2e4 <dict_view+0x4c>)
    f2c2:	4a09      	ldr	r2, [pc, #36]	; (f2e8 <dict_view+0x50>)
    f2c4:	f44f 71f6 	mov.w	r1, #492	; 0x1ec
    f2c8:	4808      	ldr	r0, [pc, #32]	; (f2ec <dict_view+0x54>)
    f2ca:	f00c fa01 	bl	1b6d0 <__assert_func>
    return mp_obj_new_dict_view(self_in, kind);
    f2ce:	6839      	ldr	r1, [r7, #0]
    f2d0:	6878      	ldr	r0, [r7, #4]
    f2d2:	f7ff ffc7 	bl	f264 <mp_obj_new_dict_view>
    f2d6:	4603      	mov	r3, r0
}
    f2d8:	4618      	mov	r0, r3
    f2da:	3708      	adds	r7, #8
    f2dc:	46bd      	mov	sp, r7
    f2de:	bd80      	pop	{r7, pc}
    f2e0:	0000e851 	.word	0x0000e851
    f2e4:	00021c44 	.word	0x00021c44
    f2e8:	000220d8 	.word	0x000220d8
    f2ec:	00021ca4 	.word	0x00021ca4

0000f2f0 <dict_items>:

STATIC mp_obj_t dict_items(mp_obj_t self_in) {
    f2f0:	b580      	push	{r7, lr}
    f2f2:	b082      	sub	sp, #8
    f2f4:	af00      	add	r7, sp, #0
    f2f6:	6078      	str	r0, [r7, #4]
    return dict_view(self_in, MP_DICT_VIEW_ITEMS);
    f2f8:	2100      	movs	r1, #0
    f2fa:	6878      	ldr	r0, [r7, #4]
    f2fc:	f7ff ffcc 	bl	f298 <dict_view>
    f300:	4603      	mov	r3, r0
}
    f302:	4618      	mov	r0, r3
    f304:	3708      	adds	r7, #8
    f306:	46bd      	mov	sp, r7
    f308:	bd80      	pop	{r7, pc}
    f30a:	bf00      	nop

0000f30c <dict_keys>:
STATIC MP_DEFINE_CONST_FUN_OBJ_1(dict_items_obj, dict_items);

STATIC mp_obj_t dict_keys(mp_obj_t self_in) {
    f30c:	b580      	push	{r7, lr}
    f30e:	b082      	sub	sp, #8
    f310:	af00      	add	r7, sp, #0
    f312:	6078      	str	r0, [r7, #4]
    return dict_view(self_in, MP_DICT_VIEW_KEYS);
    f314:	2101      	movs	r1, #1
    f316:	6878      	ldr	r0, [r7, #4]
    f318:	f7ff ffbe 	bl	f298 <dict_view>
    f31c:	4603      	mov	r3, r0
}
    f31e:	4618      	mov	r0, r3
    f320:	3708      	adds	r7, #8
    f322:	46bd      	mov	sp, r7
    f324:	bd80      	pop	{r7, pc}
    f326:	bf00      	nop

0000f328 <dict_values>:
STATIC MP_DEFINE_CONST_FUN_OBJ_1(dict_keys_obj, dict_keys);

STATIC mp_obj_t dict_values(mp_obj_t self_in) {
    f328:	b580      	push	{r7, lr}
    f32a:	b082      	sub	sp, #8
    f32c:	af00      	add	r7, sp, #0
    f32e:	6078      	str	r0, [r7, #4]
    return dict_view(self_in, MP_DICT_VIEW_VALUES);
    f330:	2102      	movs	r1, #2
    f332:	6878      	ldr	r0, [r7, #4]
    f334:	f7ff ffb0 	bl	f298 <dict_view>
    f338:	4603      	mov	r3, r0
}
    f33a:	4618      	mov	r0, r3
    f33c:	3708      	adds	r7, #8
    f33e:	46bd      	mov	sp, r7
    f340:	bd80      	pop	{r7, pc}
    f342:	bf00      	nop

0000f344 <dict_getiter>:
STATIC MP_DEFINE_CONST_FUN_OBJ_1(dict_values_obj, dict_values);

/******************************************************************************/
/* dict iterator                                                              */

STATIC mp_obj_t dict_getiter(mp_obj_t self_in, mp_obj_iter_buf_t *iter_buf) {
    f344:	b580      	push	{r7, lr}
    f346:	b084      	sub	sp, #16
    f348:	af00      	add	r7, sp, #0
    f34a:	6078      	str	r0, [r7, #4]
    f34c:	6039      	str	r1, [r7, #0]
    assert(sizeof(mp_obj_dict_view_it_t) <= sizeof(mp_obj_iter_buf_t));
    mp_check_self(MP_OBJ_IS_DICT_TYPE(self_in));
    f34e:	6878      	ldr	r0, [r7, #4]
    f350:	f7ff f9bc 	bl	e6cc <MP_OBJ_IS_OBJ>
    f354:	4603      	mov	r3, r0
    f356:	f083 0301 	eor.w	r3, r3, #1
    f35a:	b2db      	uxtb	r3, r3
    f35c:	2b00      	cmp	r3, #0
    f35e:	d105      	bne.n	f36c <dict_getiter+0x28>
    f360:	687b      	ldr	r3, [r7, #4]
    f362:	681b      	ldr	r3, [r3, #0]
    f364:	68db      	ldr	r3, [r3, #12]
    f366:	4a0e      	ldr	r2, [pc, #56]	; (f3a0 <dict_getiter+0x5c>)
    f368:	4293      	cmp	r3, r2
    f36a:	d006      	beq.n	f37a <dict_getiter+0x36>
    f36c:	4b0d      	ldr	r3, [pc, #52]	; (f3a4 <dict_getiter+0x60>)
    f36e:	4a0e      	ldr	r2, [pc, #56]	; (f3a8 <dict_getiter+0x64>)
    f370:	f44f 7101 	mov.w	r1, #516	; 0x204
    f374:	480d      	ldr	r0, [pc, #52]	; (f3ac <dict_getiter+0x68>)
    f376:	f00c f9ab 	bl	1b6d0 <__assert_func>
    mp_obj_dict_view_it_t *o = (mp_obj_dict_view_it_t*)iter_buf;
    f37a:	683b      	ldr	r3, [r7, #0]
    f37c:	60fb      	str	r3, [r7, #12]
    o->base.type = &dict_view_it_type;
    f37e:	68fb      	ldr	r3, [r7, #12]
    f380:	4a0b      	ldr	r2, [pc, #44]	; (f3b0 <dict_getiter+0x6c>)
    f382:	601a      	str	r2, [r3, #0]
    o->kind = MP_DICT_VIEW_KEYS;
    f384:	68fb      	ldr	r3, [r7, #12]
    f386:	2201      	movs	r2, #1
    f388:	605a      	str	r2, [r3, #4]
    o->dict = self_in;
    f38a:	68fb      	ldr	r3, [r7, #12]
    f38c:	687a      	ldr	r2, [r7, #4]
    f38e:	609a      	str	r2, [r3, #8]
    o->cur = 0;
    f390:	68fb      	ldr	r3, [r7, #12]
    f392:	2200      	movs	r2, #0
    f394:	60da      	str	r2, [r3, #12]
    return MP_OBJ_FROM_PTR(o);
    f396:	68fb      	ldr	r3, [r7, #12]
}
    f398:	4618      	mov	r0, r3
    f39a:	3710      	adds	r7, #16
    f39c:	46bd      	mov	sp, r7
    f39e:	bd80      	pop	{r7, pc}
    f3a0:	0000e851 	.word	0x0000e851
    f3a4:	00021c44 	.word	0x00021c44
    f3a8:	000220e4 	.word	0x000220e4
    f3ac:	00021ca4 	.word	0x00021ca4
    f3b0:	00021df8 	.word	0x00021df8

0000f3b4 <mp_obj_dict_init>:
    .parent = &mp_type_dict,
    .locals_dict = (mp_obj_dict_t*)&dict_locals_dict,
};
#endif

void mp_obj_dict_init(mp_obj_dict_t *dict, size_t n_args) {
    f3b4:	b580      	push	{r7, lr}
    f3b6:	b082      	sub	sp, #8
    f3b8:	af00      	add	r7, sp, #0
    f3ba:	6078      	str	r0, [r7, #4]
    f3bc:	6039      	str	r1, [r7, #0]
    dict->base.type = &mp_type_dict;
    f3be:	687b      	ldr	r3, [r7, #4]
    f3c0:	4a05      	ldr	r2, [pc, #20]	; (f3d8 <mp_obj_dict_init+0x24>)
    f3c2:	601a      	str	r2, [r3, #0]
    mp_map_init(&dict->map, n_args);
    f3c4:	687b      	ldr	r3, [r7, #4]
    f3c6:	3304      	adds	r3, #4
    f3c8:	6839      	ldr	r1, [r7, #0]
    f3ca:	4618      	mov	r0, r3
    f3cc:	f7fe f8cc 	bl	d568 <mp_map_init>
}
    f3d0:	bf00      	nop
    f3d2:	3708      	adds	r7, #8
    f3d4:	46bd      	mov	sp, r7
    f3d6:	bd80      	pop	{r7, pc}
    f3d8:	0002201c 	.word	0x0002201c

0000f3dc <mp_obj_new_dict>:

mp_obj_t mp_obj_new_dict(size_t n_args) {
    f3dc:	b580      	push	{r7, lr}
    f3de:	b084      	sub	sp, #16
    f3e0:	af00      	add	r7, sp, #0
    f3e2:	6078      	str	r0, [r7, #4]
    mp_obj_dict_t *o = m_new_obj(mp_obj_dict_t);
    f3e4:	2010      	movs	r0, #16
    f3e6:	f7f0 ff99 	bl	31c <m_malloc>
    f3ea:	60f8      	str	r0, [r7, #12]
    mp_obj_dict_init(o, n_args);
    f3ec:	6879      	ldr	r1, [r7, #4]
    f3ee:	68f8      	ldr	r0, [r7, #12]
    f3f0:	f7ff ffe0 	bl	f3b4 <mp_obj_dict_init>
    return MP_OBJ_FROM_PTR(o);
    f3f4:	68fb      	ldr	r3, [r7, #12]
}
    f3f6:	4618      	mov	r0, r3
    f3f8:	3710      	adds	r7, #16
    f3fa:	46bd      	mov	sp, r7
    f3fc:	bd80      	pop	{r7, pc}
    f3fe:	bf00      	nop

0000f400 <mp_obj_dict_len>:

size_t mp_obj_dict_len(mp_obj_t self_in) {
    f400:	b480      	push	{r7}
    f402:	b085      	sub	sp, #20
    f404:	af00      	add	r7, sp, #0
    f406:	6078      	str	r0, [r7, #4]
    mp_obj_dict_t *self = MP_OBJ_TO_PTR(self_in);
    f408:	687b      	ldr	r3, [r7, #4]
    f40a:	60fb      	str	r3, [r7, #12]
    return self->map.used;
    f40c:	68fb      	ldr	r3, [r7, #12]
    f40e:	685b      	ldr	r3, [r3, #4]
    f410:	f3c3 03dc 	ubfx	r3, r3, #3, #29
}
    f414:	4618      	mov	r0, r3
    f416:	3714      	adds	r7, #20
    f418:	46bd      	mov	sp, r7
    f41a:	f85d 7b04 	ldr.w	r7, [sp], #4
    f41e:	4770      	bx	lr

0000f420 <mp_obj_dict_store>:

mp_obj_t mp_obj_dict_store(mp_obj_t self_in, mp_obj_t key, mp_obj_t value) {
    f420:	b580      	push	{r7, lr}
    f422:	b086      	sub	sp, #24
    f424:	af00      	add	r7, sp, #0
    f426:	60f8      	str	r0, [r7, #12]
    f428:	60b9      	str	r1, [r7, #8]
    f42a:	607a      	str	r2, [r7, #4]
    mp_check_self(MP_OBJ_IS_DICT_TYPE(self_in));
    f42c:	68f8      	ldr	r0, [r7, #12]
    f42e:	f7ff f94d 	bl	e6cc <MP_OBJ_IS_OBJ>
    f432:	4603      	mov	r3, r0
    f434:	f083 0301 	eor.w	r3, r3, #1
    f438:	b2db      	uxtb	r3, r3
    f43a:	2b00      	cmp	r3, #0
    f43c:	d105      	bne.n	f44a <mp_obj_dict_store+0x2a>
    f43e:	68fb      	ldr	r3, [r7, #12]
    f440:	681b      	ldr	r3, [r3, #0]
    f442:	68db      	ldr	r3, [r3, #12]
    f444:	4a0e      	ldr	r2, [pc, #56]	; (f480 <mp_obj_dict_store+0x60>)
    f446:	4293      	cmp	r3, r2
    f448:	d006      	beq.n	f458 <mp_obj_dict_store+0x38>
    f44a:	4b0e      	ldr	r3, [pc, #56]	; (f484 <mp_obj_dict_store+0x64>)
    f44c:	4a0e      	ldr	r2, [pc, #56]	; (f488 <mp_obj_dict_store+0x68>)
    f44e:	f240 214f 	movw	r1, #591	; 0x24f
    f452:	480e      	ldr	r0, [pc, #56]	; (f48c <mp_obj_dict_store+0x6c>)
    f454:	f00c f93c 	bl	1b6d0 <__assert_func>
    mp_obj_dict_t *self = MP_OBJ_TO_PTR(self_in);
    f458:	68fb      	ldr	r3, [r7, #12]
    f45a:	617b      	str	r3, [r7, #20]
    mp_ensure_not_fixed(self);
    f45c:	6978      	ldr	r0, [r7, #20]
    f45e:	f7ff fb21 	bl	eaa4 <mp_ensure_not_fixed>
    mp_map_lookup(&self->map, key, MP_MAP_LOOKUP_ADD_IF_NOT_FOUND)->value = value;
    f462:	697b      	ldr	r3, [r7, #20]
    f464:	3304      	adds	r3, #4
    f466:	2201      	movs	r2, #1
    f468:	68b9      	ldr	r1, [r7, #8]
    f46a:	4618      	mov	r0, r3
    f46c:	f7fe f978 	bl	d760 <mp_map_lookup>
    f470:	4602      	mov	r2, r0
    f472:	687b      	ldr	r3, [r7, #4]
    f474:	6053      	str	r3, [r2, #4]
    return self_in;
    f476:	68fb      	ldr	r3, [r7, #12]
}
    f478:	4618      	mov	r0, r3
    f47a:	3718      	adds	r7, #24
    f47c:	46bd      	mov	sp, r7
    f47e:	bd80      	pop	{r7, pc}
    f480:	0000e851 	.word	0x0000e851
    f484:	00021c44 	.word	0x00021c44
    f488:	000220f4 	.word	0x000220f4
    f48c:	00021ca4 	.word	0x00021ca4

0000f490 <mp_obj_dict_delete>:

mp_obj_t mp_obj_dict_delete(mp_obj_t self_in, mp_obj_t key) {
    f490:	b580      	push	{r7, lr}
    f492:	b084      	sub	sp, #16
    f494:	af00      	add	r7, sp, #0
    f496:	6078      	str	r0, [r7, #4]
    f498:	6039      	str	r1, [r7, #0]
    mp_obj_t args[2] = {self_in, key};
    f49a:	687b      	ldr	r3, [r7, #4]
    f49c:	60bb      	str	r3, [r7, #8]
    f49e:	683b      	ldr	r3, [r7, #0]
    f4a0:	60fb      	str	r3, [r7, #12]
    dict_get_helper(2, args, MP_MAP_LOOKUP_REMOVE_IF_FOUND);
    f4a2:	f107 0308 	add.w	r3, r7, #8
    f4a6:	2202      	movs	r2, #2
    f4a8:	4619      	mov	r1, r3
    f4aa:	2002      	movs	r0, #2
    f4ac:	f7ff fbe6 	bl	ec7c <dict_get_helper>
    return self_in;
    f4b0:	687b      	ldr	r3, [r7, #4]
}
    f4b2:	4618      	mov	r0, r3
    f4b4:	3710      	adds	r7, #16
    f4b6:	46bd      	mov	sp, r7
    f4b8:	bd80      	pop	{r7, pc}
    f4ba:	bf00      	nop

0000f4bc <mp_obj_dict_get_map>:

mp_map_t *mp_obj_dict_get_map(mp_obj_t self_in) {
    f4bc:	b580      	push	{r7, lr}
    f4be:	b084      	sub	sp, #16
    f4c0:	af00      	add	r7, sp, #0
    f4c2:	6078      	str	r0, [r7, #4]
    mp_check_self(MP_OBJ_IS_DICT_TYPE(self_in));
    f4c4:	6878      	ldr	r0, [r7, #4]
    f4c6:	f7ff f901 	bl	e6cc <MP_OBJ_IS_OBJ>
    f4ca:	4603      	mov	r3, r0
    f4cc:	f083 0301 	eor.w	r3, r3, #1
    f4d0:	b2db      	uxtb	r3, r3
    f4d2:	2b00      	cmp	r3, #0
    f4d4:	d105      	bne.n	f4e2 <mp_obj_dict_get_map+0x26>
    f4d6:	687b      	ldr	r3, [r7, #4]
    f4d8:	681b      	ldr	r3, [r3, #0]
    f4da:	68db      	ldr	r3, [r3, #12]
    f4dc:	4a08      	ldr	r2, [pc, #32]	; (f500 <mp_obj_dict_get_map+0x44>)
    f4de:	4293      	cmp	r3, r2
    f4e0:	d006      	beq.n	f4f0 <mp_obj_dict_get_map+0x34>
    f4e2:	4b08      	ldr	r3, [pc, #32]	; (f504 <mp_obj_dict_get_map+0x48>)
    f4e4:	4a08      	ldr	r2, [pc, #32]	; (f508 <mp_obj_dict_get_map+0x4c>)
    f4e6:	f240 215d 	movw	r1, #605	; 0x25d
    f4ea:	4808      	ldr	r0, [pc, #32]	; (f50c <mp_obj_dict_get_map+0x50>)
    f4ec:	f00c f8f0 	bl	1b6d0 <__assert_func>
    mp_obj_dict_t *self = MP_OBJ_TO_PTR(self_in);
    f4f0:	687b      	ldr	r3, [r7, #4]
    f4f2:	60fb      	str	r3, [r7, #12]
    return &self->map;
    f4f4:	68fb      	ldr	r3, [r7, #12]
    f4f6:	3304      	adds	r3, #4
}
    f4f8:	4618      	mov	r0, r3
    f4fa:	3710      	adds	r7, #16
    f4fc:	46bd      	mov	sp, r7
    f4fe:	bd80      	pop	{r7, pc}
    f500:	0000e851 	.word	0x0000e851
    f504:	00021c44 	.word	0x00021c44
    f508:	00022108 	.word	0x00022108
    f50c:	00021ca4 	.word	0x00021ca4

0000f510 <MP_OBJ_IS_OBJ>:
    { return ((((mp_int_t)(o)) & 3) == 0); }
    f510:	b480      	push	{r7}
    f512:	b083      	sub	sp, #12
    f514:	af00      	add	r7, sp, #0
    f516:	6078      	str	r0, [r7, #4]
    f518:	687b      	ldr	r3, [r7, #4]
    f51a:	f003 0303 	and.w	r3, r3, #3
    f51e:	2b00      	cmp	r3, #0
    f520:	bf0c      	ite	eq
    f522:	2301      	moveq	r3, #1
    f524:	2300      	movne	r3, #0
    f526:	b2db      	uxtb	r3, r3
    f528:	4618      	mov	r0, r3
    f52a:	370c      	adds	r7, #12
    f52c:	46bd      	mov	sp, r7
    f52e:	f85d 7b04 	ldr.w	r7, [sp], #4
    f532:	4770      	bx	lr

0000f534 <mp_obj_exception_print>:
// Instance of GeneratorExit exception - needed by generator.close()
// This would belong to objgenerator.c, but to keep mp_obj_exception_t
// definition module-private so far, have it here.
const mp_obj_exception_t mp_const_GeneratorExit_obj = {{&mp_type_GeneratorExit}, 0, 0, NULL, (mp_obj_tuple_t*)&mp_const_empty_tuple_obj};

void mp_obj_exception_print(const mp_print_t *print, mp_obj_t o_in, mp_print_kind_t kind) {
    f534:	b580      	push	{r7, lr}
    f536:	b088      	sub	sp, #32
    f538:	af00      	add	r7, sp, #0
    f53a:	60f8      	str	r0, [r7, #12]
    f53c:	60b9      	str	r1, [r7, #8]
    f53e:	607a      	str	r2, [r7, #4]
    mp_obj_exception_t *o = MP_OBJ_TO_PTR(o_in);
    f540:	68bb      	ldr	r3, [r7, #8]
    f542:	61fb      	str	r3, [r7, #28]
    mp_print_kind_t k = kind & ~PRINT_EXC_SUBCLASS;
    f544:	687b      	ldr	r3, [r7, #4]
    f546:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    f54a:	61bb      	str	r3, [r7, #24]
    bool is_subclass = kind & PRINT_EXC_SUBCLASS;
    f54c:	687b      	ldr	r3, [r7, #4]
    f54e:	f003 0380 	and.w	r3, r3, #128	; 0x80
    f552:	2b00      	cmp	r3, #0
    f554:	bf14      	ite	ne
    f556:	2301      	movne	r3, #1
    f558:	2300      	moveq	r3, #0
    f55a:	75fb      	strb	r3, [r7, #23]
    if (!is_subclass && (k == PRINT_REPR || k == PRINT_EXC)) {
    f55c:	7dfb      	ldrb	r3, [r7, #23]
    f55e:	f083 0301 	eor.w	r3, r3, #1
    f562:	b2db      	uxtb	r3, r3
    f564:	2b00      	cmp	r3, #0
    f566:	d010      	beq.n	f58a <mp_obj_exception_print+0x56>
    f568:	69bb      	ldr	r3, [r7, #24]
    f56a:	2b01      	cmp	r3, #1
    f56c:	d002      	beq.n	f574 <mp_obj_exception_print+0x40>
    f56e:	69bb      	ldr	r3, [r7, #24]
    f570:	2b02      	cmp	r3, #2
    f572:	d10a      	bne.n	f58a <mp_obj_exception_print+0x56>
        mp_print_str(print, qstr_str(o->base.type->name));
    f574:	69fb      	ldr	r3, [r7, #28]
    f576:	681b      	ldr	r3, [r3, #0]
    f578:	685b      	ldr	r3, [r3, #4]
    f57a:	4618      	mov	r0, r3
    f57c:	f7f1 fef6 	bl	136c <qstr_str>
    f580:	4603      	mov	r3, r0
    f582:	4619      	mov	r1, r3
    f584:	68f8      	ldr	r0, [r7, #12]
    f586:	f7f2 fa35 	bl	19f4 <mp_print_str>
    }

    if (k == PRINT_EXC) {
    f58a:	69bb      	ldr	r3, [r7, #24]
    f58c:	2b02      	cmp	r3, #2
    f58e:	d103      	bne.n	f598 <mp_obj_exception_print+0x64>
        mp_print_str(print, ": ");
    f590:	4917      	ldr	r1, [pc, #92]	; (f5f0 <mp_obj_exception_print+0xbc>)
    f592:	68f8      	ldr	r0, [r7, #12]
    f594:	f7f2 fa2e 	bl	19f4 <mp_print_str>
    }

    if (k == PRINT_STR || k == PRINT_EXC) {
    f598:	69bb      	ldr	r3, [r7, #24]
    f59a:	2b00      	cmp	r3, #0
    f59c:	d002      	beq.n	f5a4 <mp_obj_exception_print+0x70>
    f59e:	69bb      	ldr	r3, [r7, #24]
    f5a0:	2b02      	cmp	r3, #2
    f5a2:	d11b      	bne.n	f5dc <mp_obj_exception_print+0xa8>
        if (o->args == NULL || o->args->len == 0) {
    f5a4:	69fb      	ldr	r3, [r7, #28]
    f5a6:	68db      	ldr	r3, [r3, #12]
    f5a8:	2b00      	cmp	r3, #0
    f5aa:	d004      	beq.n	f5b6 <mp_obj_exception_print+0x82>
    f5ac:	69fb      	ldr	r3, [r7, #28]
    f5ae:	68db      	ldr	r3, [r3, #12]
    f5b0:	685b      	ldr	r3, [r3, #4]
    f5b2:	2b00      	cmp	r3, #0
    f5b4:	d104      	bne.n	f5c0 <mp_obj_exception_print+0x8c>
            mp_print_str(print, "");
    f5b6:	490f      	ldr	r1, [pc, #60]	; (f5f4 <mp_obj_exception_print+0xc0>)
    f5b8:	68f8      	ldr	r0, [r7, #12]
    f5ba:	f7f2 fa1b 	bl	19f4 <mp_print_str>
            return;
    f5be:	e014      	b.n	f5ea <mp_obj_exception_print+0xb6>
        } else if (o->args->len == 1) {
    f5c0:	69fb      	ldr	r3, [r7, #28]
    f5c2:	68db      	ldr	r3, [r3, #12]
    f5c4:	685b      	ldr	r3, [r3, #4]
    f5c6:	2b01      	cmp	r3, #1
    f5c8:	d108      	bne.n	f5dc <mp_obj_exception_print+0xa8>
                    mp_printf(print, "[Errno " INT_FMT "] %q", MP_OBJ_SMALL_INT_VALUE(o->args->items[0]), qst);
                    return;
                }
            }
            #endif
            mp_obj_print_helper(print, o->args->items[0], PRINT_STR);
    f5ca:	69fb      	ldr	r3, [r7, #28]
    f5cc:	68db      	ldr	r3, [r3, #12]
    f5ce:	689b      	ldr	r3, [r3, #8]
    f5d0:	2200      	movs	r2, #0
    f5d2:	4619      	mov	r1, r3
    f5d4:	68f8      	ldr	r0, [r7, #12]
    f5d6:	f7fe fa9f 	bl	db18 <mp_obj_print_helper>
            return;
    f5da:	e006      	b.n	f5ea <mp_obj_exception_print+0xb6>
        }
    }
    mp_obj_tuple_print(print, MP_OBJ_FROM_PTR(o->args), kind);
    f5dc:	69fb      	ldr	r3, [r7, #28]
    f5de:	68db      	ldr	r3, [r3, #12]
    f5e0:	687a      	ldr	r2, [r7, #4]
    f5e2:	4619      	mov	r1, r3
    f5e4:	68f8      	ldr	r0, [r7, #12]
    f5e6:	f006 fab3 	bl	15b50 <mp_obj_tuple_print>
}
    f5ea:	3720      	adds	r7, #32
    f5ec:	46bd      	mov	sp, r7
    f5ee:	bd80      	pop	{r7, pc}
    f5f0:	0002212c 	.word	0x0002212c
    f5f4:	00022130 	.word	0x00022130

0000f5f8 <mp_obj_exception_make_new>:

mp_obj_t mp_obj_exception_make_new(const mp_obj_type_t *type, size_t n_args, size_t n_kw, const mp_obj_t *args) {
    f5f8:	b580      	push	{r7, lr}
    f5fa:	b088      	sub	sp, #32
    f5fc:	af02      	add	r7, sp, #8
    f5fe:	60f8      	str	r0, [r7, #12]
    f600:	60b9      	str	r1, [r7, #8]
    f602:	607a      	str	r2, [r7, #4]
    f604:	603b      	str	r3, [r7, #0]
    mp_arg_check_num(n_args, n_kw, 0, MP_OBJ_FUN_ARGS_MAX, false);
    f606:	2300      	movs	r3, #0
    f608:	9300      	str	r3, [sp, #0]
    f60a:	f64f 73ff 	movw	r3, #65535	; 0xffff
    f60e:	2200      	movs	r2, #0
    f610:	6879      	ldr	r1, [r7, #4]
    f612:	68b8      	ldr	r0, [r7, #8]
    f614:	f7fd fe5a 	bl	d2cc <mp_arg_check_num>

    // Try to allocate memory for the exception, with fallback to emergency exception object
    mp_obj_exception_t *o_exc = m_new_obj_maybe(mp_obj_exception_t);
    f618:	2010      	movs	r0, #16
    f61a:	f7f0 fe97 	bl	34c <m_malloc_maybe>
    f61e:	6178      	str	r0, [r7, #20]
    if (o_exc == NULL) {
    f620:	697b      	ldr	r3, [r7, #20]
    f622:	2b00      	cmp	r3, #0
    f624:	d101      	bne.n	f62a <mp_obj_exception_make_new+0x32>
        o_exc = &MP_STATE_VM(mp_emergency_exception_obj);
    f626:	4b19      	ldr	r3, [pc, #100]	; (f68c <mp_obj_exception_make_new+0x94>)
    f628:	617b      	str	r3, [r7, #20]
    }

    // Populate the exception object
    o_exc->base.type = type;
    f62a:	697b      	ldr	r3, [r7, #20]
    f62c:	68fa      	ldr	r2, [r7, #12]
    f62e:	601a      	str	r2, [r3, #0]
    o_exc->traceback_data = NULL;
    f630:	697b      	ldr	r3, [r7, #20]
    f632:	2200      	movs	r2, #0
    f634:	609a      	str	r2, [r3, #8]

    mp_obj_tuple_t *o_tuple;
    if (n_args == 0) {
    f636:	68bb      	ldr	r3, [r7, #8]
    f638:	2b00      	cmp	r3, #0
    f63a:	d102      	bne.n	f642 <mp_obj_exception_make_new+0x4a>
        // No args, can use the empty tuple straightaway
        o_tuple = (mp_obj_tuple_t*)&mp_const_empty_tuple_obj;
    f63c:	4b14      	ldr	r3, [pc, #80]	; (f690 <mp_obj_exception_make_new+0x98>)
    f63e:	613b      	str	r3, [r7, #16]
    f640:	e01b      	b.n	f67a <mp_obj_exception_make_new+0x82>
    } else {
        // Try to allocate memory for the tuple containing the args
        o_tuple = m_new_obj_var_maybe(mp_obj_tuple_t, mp_obj_t, n_args);
    f642:	68bb      	ldr	r3, [r7, #8]
    f644:	3302      	adds	r3, #2
    f646:	009b      	lsls	r3, r3, #2
    f648:	4618      	mov	r0, r3
    f64a:	f7f0 fe7f 	bl	34c <m_malloc_maybe>
    f64e:	6138      	str	r0, [r7, #16]
            o_tuple = (mp_obj_tuple_t*)
                ((uint8_t*)MP_STATE_VM(mp_emergency_exception_buf) + EMG_TRACEBACK_ALLOC * sizeof(size_t));
        }
        #endif

        if (o_tuple == NULL) {
    f650:	693b      	ldr	r3, [r7, #16]
    f652:	2b00      	cmp	r3, #0
    f654:	d102      	bne.n	f65c <mp_obj_exception_make_new+0x64>
            // No memory for a tuple, fallback to an empty tuple
            o_tuple = (mp_obj_tuple_t*)&mp_const_empty_tuple_obj;
    f656:	4b0e      	ldr	r3, [pc, #56]	; (f690 <mp_obj_exception_make_new+0x98>)
    f658:	613b      	str	r3, [r7, #16]
    f65a:	e00e      	b.n	f67a <mp_obj_exception_make_new+0x82>
        } else {
            // Have memory for a tuple so populate it
            o_tuple->base.type = &mp_type_tuple;
    f65c:	693b      	ldr	r3, [r7, #16]
    f65e:	4a0d      	ldr	r2, [pc, #52]	; (f694 <mp_obj_exception_make_new+0x9c>)
    f660:	601a      	str	r2, [r3, #0]
            o_tuple->len = n_args;
    f662:	693b      	ldr	r3, [r7, #16]
    f664:	68ba      	ldr	r2, [r7, #8]
    f666:	605a      	str	r2, [r3, #4]
            memcpy(o_tuple->items, args, n_args * sizeof(mp_obj_t));
    f668:	693b      	ldr	r3, [r7, #16]
    f66a:	f103 0008 	add.w	r0, r3, #8
    f66e:	68bb      	ldr	r3, [r7, #8]
    f670:	009b      	lsls	r3, r3, #2
    f672:	461a      	mov	r2, r3
    f674:	6839      	ldr	r1, [r7, #0]
    f676:	f00d faff 	bl	1cc78 <memcpy>
        }
    }

    // Store the tuple of args in the exception object
    o_exc->args = o_tuple;
    f67a:	697b      	ldr	r3, [r7, #20]
    f67c:	693a      	ldr	r2, [r7, #16]
    f67e:	60da      	str	r2, [r3, #12]

    return MP_OBJ_FROM_PTR(o_exc);
    f680:	697b      	ldr	r3, [r7, #20]
}
    f682:	4618      	mov	r0, r3
    f684:	3718      	adds	r7, #24
    f686:	46bd      	mov	sp, r7
    f688:	bd80      	pop	{r7, pc}
    f68a:	bf00      	nop
    f68c:	20001304 	.word	0x20001304
    f690:	00023dcc 	.word	0x00023dcc
    f694:	00023d90 	.word	0x00023d90

0000f698 <mp_obj_exception_get_value>:

// Get exception "value" - that is, first argument, or None
mp_obj_t mp_obj_exception_get_value(mp_obj_t self_in) {
    f698:	b480      	push	{r7}
    f69a:	b085      	sub	sp, #20
    f69c:	af00      	add	r7, sp, #0
    f69e:	6078      	str	r0, [r7, #4]
    mp_obj_exception_t *self = MP_OBJ_TO_PTR(self_in);
    f6a0:	687b      	ldr	r3, [r7, #4]
    f6a2:	60fb      	str	r3, [r7, #12]
    if (self->args->len == 0) {
    f6a4:	68fb      	ldr	r3, [r7, #12]
    f6a6:	68db      	ldr	r3, [r3, #12]
    f6a8:	685b      	ldr	r3, [r3, #4]
    f6aa:	2b00      	cmp	r3, #0
    f6ac:	d101      	bne.n	f6b2 <mp_obj_exception_get_value+0x1a>
        return mp_const_none;
    f6ae:	4b05      	ldr	r3, [pc, #20]	; (f6c4 <mp_obj_exception_get_value+0x2c>)
    f6b0:	e002      	b.n	f6b8 <mp_obj_exception_get_value+0x20>
    } else {
        return self->args->items[0];
    f6b2:	68fb      	ldr	r3, [r7, #12]
    f6b4:	68db      	ldr	r3, [r3, #12]
    f6b6:	689b      	ldr	r3, [r3, #8]
    }
}
    f6b8:	4618      	mov	r0, r3
    f6ba:	3714      	adds	r7, #20
    f6bc:	46bd      	mov	sp, r7
    f6be:	f85d 7b04 	ldr.w	r7, [sp], #4
    f6c2:	4770      	bx	lr
    f6c4:	0002345c 	.word	0x0002345c

0000f6c8 <mp_obj_exception_attr>:

void mp_obj_exception_attr(mp_obj_t self_in, qstr attr, mp_obj_t *dest) {
    f6c8:	b580      	push	{r7, lr}
    f6ca:	b086      	sub	sp, #24
    f6cc:	af00      	add	r7, sp, #0
    f6ce:	60f8      	str	r0, [r7, #12]
    f6d0:	60b9      	str	r1, [r7, #8]
    f6d2:	607a      	str	r2, [r7, #4]
    mp_obj_exception_t *self = MP_OBJ_TO_PTR(self_in);
    f6d4:	68fb      	ldr	r3, [r7, #12]
    f6d6:	617b      	str	r3, [r7, #20]
    if (dest[0] != MP_OBJ_NULL) {
    f6d8:	687b      	ldr	r3, [r7, #4]
    f6da:	681b      	ldr	r3, [r3, #0]
    f6dc:	2b00      	cmp	r3, #0
    f6de:	d00f      	beq.n	f700 <mp_obj_exception_attr+0x38>
        // store/delete attribute
        if (attr == MP_QSTR___traceback__ && dest[1] == mp_const_none) {
    f6e0:	68bb      	ldr	r3, [r7, #8]
    f6e2:	2b26      	cmp	r3, #38	; 0x26
    f6e4:	d125      	bne.n	f732 <mp_obj_exception_attr+0x6a>
    f6e6:	687b      	ldr	r3, [r7, #4]
    f6e8:	3304      	adds	r3, #4
    f6ea:	681b      	ldr	r3, [r3, #0]
    f6ec:	4a13      	ldr	r2, [pc, #76]	; (f73c <mp_obj_exception_attr+0x74>)
    f6ee:	4293      	cmp	r3, r2
    f6f0:	d11f      	bne.n	f732 <mp_obj_exception_attr+0x6a>
            // optimization of pre-allocating exception instance and raising
            // it repeatedly - this avoids memory allocation during raise.
            // However, uPy will keep adding traceback entries to such
            // exception instance, so before throwing it, traceback should
            // be cleared like above.
            self->traceback_len = 0;
    f6f2:	697b      	ldr	r3, [r7, #20]
    f6f4:	2200      	movs	r2, #0
    f6f6:	80da      	strh	r2, [r3, #6]
            dest[0] = MP_OBJ_NULL; // indicate success
    f6f8:	687b      	ldr	r3, [r7, #4]
    f6fa:	2200      	movs	r2, #0
    f6fc:	601a      	str	r2, [r3, #0]
        }
        return;
    f6fe:	e018      	b.n	f732 <mp_obj_exception_attr+0x6a>
    }
    if (attr == MP_QSTR_args) {
    f700:	68bb      	ldr	r3, [r7, #8]
    f702:	2bec      	cmp	r3, #236	; 0xec
    f704:	d104      	bne.n	f710 <mp_obj_exception_attr+0x48>
        dest[0] = MP_OBJ_FROM_PTR(self->args);
    f706:	697b      	ldr	r3, [r7, #20]
    f708:	68da      	ldr	r2, [r3, #12]
    f70a:	687b      	ldr	r3, [r7, #4]
    f70c:	601a      	str	r2, [r3, #0]
    f70e:	e011      	b.n	f734 <mp_obj_exception_attr+0x6c>
    } else if (self->base.type == &mp_type_StopIteration && attr == MP_QSTR_value) {
    f710:	697b      	ldr	r3, [r7, #20]
    f712:	681b      	ldr	r3, [r3, #0]
    f714:	4a0a      	ldr	r2, [pc, #40]	; (f740 <mp_obj_exception_attr+0x78>)
    f716:	4293      	cmp	r3, r2
    f718:	d10c      	bne.n	f734 <mp_obj_exception_attr+0x6c>
    f71a:	68bb      	ldr	r3, [r7, #8]
    f71c:	f240 1279 	movw	r2, #377	; 0x179
    f720:	4293      	cmp	r3, r2
    f722:	d107      	bne.n	f734 <mp_obj_exception_attr+0x6c>
        dest[0] = mp_obj_exception_get_value(self_in);
    f724:	68f8      	ldr	r0, [r7, #12]
    f726:	f7ff ffb7 	bl	f698 <mp_obj_exception_get_value>
    f72a:	4602      	mov	r2, r0
    f72c:	687b      	ldr	r3, [r7, #4]
    f72e:	601a      	str	r2, [r3, #0]
    f730:	e000      	b.n	f734 <mp_obj_exception_attr+0x6c>
        return;
    f732:	bf00      	nop
    }
}
    f734:	3718      	adds	r7, #24
    f736:	46bd      	mov	sp, r7
    f738:	bd80      	pop	{r7, pc}
    f73a:	bf00      	nop
    f73c:	0002345c 	.word	0x0002345c
    f740:	00022260 	.word	0x00022260

0000f744 <mp_obj_new_exception>:
    MP_DEFINE_EXCEPTION(UnicodeWarning, Warning)
    MP_DEFINE_EXCEPTION(BytesWarning, Warning)
    MP_DEFINE_EXCEPTION(ResourceWarning, Warning)
    */

mp_obj_t mp_obj_new_exception(const mp_obj_type_t *exc_type) {
    f744:	b580      	push	{r7, lr}
    f746:	b082      	sub	sp, #8
    f748:	af00      	add	r7, sp, #0
    f74a:	6078      	str	r0, [r7, #4]
    return mp_obj_new_exception_args(exc_type, 0, NULL);
    f74c:	2200      	movs	r2, #0
    f74e:	2100      	movs	r1, #0
    f750:	6878      	ldr	r0, [r7, #4]
    f752:	f000 f815 	bl	f780 <mp_obj_new_exception_args>
    f756:	4603      	mov	r3, r0
}
    f758:	4618      	mov	r0, r3
    f75a:	3708      	adds	r7, #8
    f75c:	46bd      	mov	sp, r7
    f75e:	bd80      	pop	{r7, pc}

0000f760 <mp_obj_new_exception_arg1>:

// "Optimized" version for common(?) case of having 1 exception arg
mp_obj_t mp_obj_new_exception_arg1(const mp_obj_type_t *exc_type, mp_obj_t arg) {
    f760:	b580      	push	{r7, lr}
    f762:	b082      	sub	sp, #8
    f764:	af00      	add	r7, sp, #0
    f766:	6078      	str	r0, [r7, #4]
    f768:	6039      	str	r1, [r7, #0]
    return mp_obj_new_exception_args(exc_type, 1, &arg);
    f76a:	463b      	mov	r3, r7
    f76c:	461a      	mov	r2, r3
    f76e:	2101      	movs	r1, #1
    f770:	6878      	ldr	r0, [r7, #4]
    f772:	f000 f805 	bl	f780 <mp_obj_new_exception_args>
    f776:	4603      	mov	r3, r0
}
    f778:	4618      	mov	r0, r3
    f77a:	3708      	adds	r7, #8
    f77c:	46bd      	mov	sp, r7
    f77e:	bd80      	pop	{r7, pc}

0000f780 <mp_obj_new_exception_args>:

mp_obj_t mp_obj_new_exception_args(const mp_obj_type_t *exc_type, size_t n_args, const mp_obj_t *args) {
    f780:	b590      	push	{r4, r7, lr}
    f782:	b085      	sub	sp, #20
    f784:	af00      	add	r7, sp, #0
    f786:	60f8      	str	r0, [r7, #12]
    f788:	60b9      	str	r1, [r7, #8]
    f78a:	607a      	str	r2, [r7, #4]
    assert(exc_type->make_new == mp_obj_exception_make_new);
    f78c:	68fb      	ldr	r3, [r7, #12]
    f78e:	68db      	ldr	r3, [r3, #12]
    f790:	4a0a      	ldr	r2, [pc, #40]	; (f7bc <mp_obj_new_exception_args+0x3c>)
    f792:	4293      	cmp	r3, r2
    f794:	d006      	beq.n	f7a4 <mp_obj_new_exception_args+0x24>
    f796:	4b0a      	ldr	r3, [pc, #40]	; (f7c0 <mp_obj_new_exception_args+0x40>)
    f798:	4a0a      	ldr	r2, [pc, #40]	; (f7c4 <mp_obj_new_exception_args+0x44>)
    f79a:	f240 1137 	movw	r1, #311	; 0x137
    f79e:	480a      	ldr	r0, [pc, #40]	; (f7c8 <mp_obj_new_exception_args+0x48>)
    f7a0:	f00b ff96 	bl	1b6d0 <__assert_func>
    return exc_type->make_new(exc_type, n_args, 0, args);
    f7a4:	68fb      	ldr	r3, [r7, #12]
    f7a6:	68dc      	ldr	r4, [r3, #12]
    f7a8:	687b      	ldr	r3, [r7, #4]
    f7aa:	2200      	movs	r2, #0
    f7ac:	68b9      	ldr	r1, [r7, #8]
    f7ae:	68f8      	ldr	r0, [r7, #12]
    f7b0:	47a0      	blx	r4
    f7b2:	4603      	mov	r3, r0
}
    f7b4:	4618      	mov	r0, r3
    f7b6:	3714      	adds	r7, #20
    f7b8:	46bd      	mov	sp, r7
    f7ba:	bd90      	pop	{r4, r7, pc}
    f7bc:	0000f5f9 	.word	0x0000f5f9
    f7c0:	00022710 	.word	0x00022710
    f7c4:	0002278c 	.word	0x0002278c
    f7c8:	00022740 	.word	0x00022740

0000f7cc <mp_obj_new_exception_msg>:

mp_obj_t mp_obj_new_exception_msg(const mp_obj_type_t *exc_type, const char *msg) {
    f7cc:	b580      	push	{r7, lr}
    f7ce:	b082      	sub	sp, #8
    f7d0:	af00      	add	r7, sp, #0
    f7d2:	6078      	str	r0, [r7, #4]
    f7d4:	6039      	str	r1, [r7, #0]
    return mp_obj_new_exception_msg_varg(exc_type, msg);
    f7d6:	6839      	ldr	r1, [r7, #0]
    f7d8:	6878      	ldr	r0, [r7, #4]
    f7da:	f000 f857 	bl	f88c <mp_obj_new_exception_msg_varg>
    f7de:	4603      	mov	r3, r0
}
    f7e0:	4618      	mov	r0, r3
    f7e2:	3708      	adds	r7, #8
    f7e4:	46bd      	mov	sp, r7
    f7e6:	bd80      	pop	{r7, pc}

0000f7e8 <exc_add_strn>:
    size_t alloc;
    size_t len;
    byte *buf;
};

STATIC void exc_add_strn(void *data, const char *str, size_t len) {
    f7e8:	b580      	push	{r7, lr}
    f7ea:	b088      	sub	sp, #32
    f7ec:	af00      	add	r7, sp, #0
    f7ee:	60f8      	str	r0, [r7, #12]
    f7f0:	60b9      	str	r1, [r7, #8]
    f7f2:	607a      	str	r2, [r7, #4]
    struct _exc_printer_t *pr = data;
    f7f4:	68fb      	ldr	r3, [r7, #12]
    f7f6:	61fb      	str	r3, [r7, #28]
    if (pr->len + len >= pr->alloc) {
    f7f8:	69fb      	ldr	r3, [r7, #28]
    f7fa:	689a      	ldr	r2, [r3, #8]
    f7fc:	687b      	ldr	r3, [r7, #4]
    f7fe:	441a      	add	r2, r3
    f800:	69fb      	ldr	r3, [r7, #28]
    f802:	685b      	ldr	r3, [r3, #4]
    f804:	429a      	cmp	r2, r3
    f806:	d32d      	bcc.n	f864 <exc_add_strn+0x7c>
        // Not enough room for data plus a null byte so try to grow the buffer
        if (pr->allow_realloc) {
    f808:	69fb      	ldr	r3, [r7, #28]
    f80a:	781b      	ldrb	r3, [r3, #0]
    f80c:	2b00      	cmp	r3, #0
    f80e:	d022      	beq.n	f856 <exc_add_strn+0x6e>
            size_t new_alloc = pr->alloc + len + 16;
    f810:	69fb      	ldr	r3, [r7, #28]
    f812:	685a      	ldr	r2, [r3, #4]
    f814:	687b      	ldr	r3, [r7, #4]
    f816:	4413      	add	r3, r2
    f818:	3310      	adds	r3, #16
    f81a:	61bb      	str	r3, [r7, #24]
            byte *new_buf = m_renew_maybe(byte, pr->buf, pr->alloc, new_alloc, true);
    f81c:	69fb      	ldr	r3, [r7, #28]
    f81e:	68db      	ldr	r3, [r3, #12]
    f820:	2201      	movs	r2, #1
    f822:	69b9      	ldr	r1, [r7, #24]
    f824:	4618      	mov	r0, r3
    f826:	f7f0 fddf 	bl	3e8 <m_realloc_maybe>
    f82a:	6178      	str	r0, [r7, #20]
            if (new_buf == NULL) {
    f82c:	697b      	ldr	r3, [r7, #20]
    f82e:	2b00      	cmp	r3, #0
    f830:	d10a      	bne.n	f848 <exc_add_strn+0x60>
                pr->allow_realloc = false;
    f832:	69fb      	ldr	r3, [r7, #28]
    f834:	2200      	movs	r2, #0
    f836:	701a      	strb	r2, [r3, #0]
                len = pr->alloc - pr->len - 1;
    f838:	69fb      	ldr	r3, [r7, #28]
    f83a:	685a      	ldr	r2, [r3, #4]
    f83c:	69fb      	ldr	r3, [r7, #28]
    f83e:	689b      	ldr	r3, [r3, #8]
    f840:	1ad3      	subs	r3, r2, r3
    f842:	3b01      	subs	r3, #1
    f844:	607b      	str	r3, [r7, #4]
    f846:	e00d      	b.n	f864 <exc_add_strn+0x7c>
            } else {
                pr->alloc = new_alloc;
    f848:	69fb      	ldr	r3, [r7, #28]
    f84a:	69ba      	ldr	r2, [r7, #24]
    f84c:	605a      	str	r2, [r3, #4]
                pr->buf = new_buf;
    f84e:	69fb      	ldr	r3, [r7, #28]
    f850:	697a      	ldr	r2, [r7, #20]
    f852:	60da      	str	r2, [r3, #12]
    f854:	e006      	b.n	f864 <exc_add_strn+0x7c>
            }
        } else {
            len = pr->alloc - pr->len - 1;
    f856:	69fb      	ldr	r3, [r7, #28]
    f858:	685a      	ldr	r2, [r3, #4]
    f85a:	69fb      	ldr	r3, [r7, #28]
    f85c:	689b      	ldr	r3, [r3, #8]
    f85e:	1ad3      	subs	r3, r2, r3
    f860:	3b01      	subs	r3, #1
    f862:	607b      	str	r3, [r7, #4]
        }
    }
    memcpy(pr->buf + pr->len, str, len);
    f864:	69fb      	ldr	r3, [r7, #28]
    f866:	68da      	ldr	r2, [r3, #12]
    f868:	69fb      	ldr	r3, [r7, #28]
    f86a:	689b      	ldr	r3, [r3, #8]
    f86c:	4413      	add	r3, r2
    f86e:	687a      	ldr	r2, [r7, #4]
    f870:	68b9      	ldr	r1, [r7, #8]
    f872:	4618      	mov	r0, r3
    f874:	f00d fa00 	bl	1cc78 <memcpy>
    pr->len += len;
    f878:	69fb      	ldr	r3, [r7, #28]
    f87a:	689a      	ldr	r2, [r3, #8]
    f87c:	687b      	ldr	r3, [r7, #4]
    f87e:	441a      	add	r2, r3
    f880:	69fb      	ldr	r3, [r7, #28]
    f882:	609a      	str	r2, [r3, #8]
}
    f884:	bf00      	nop
    f886:	3720      	adds	r7, #32
    f888:	46bd      	mov	sp, r7
    f88a:	bd80      	pop	{r7, pc}

0000f88c <mp_obj_new_exception_msg_varg>:

mp_obj_t mp_obj_new_exception_msg_varg(const mp_obj_type_t *exc_type, const char *fmt, ...) {
    f88c:	b40e      	push	{r1, r2, r3}
    f88e:	b580      	push	{r7, lr}
    f890:	b08f      	sub	sp, #60	; 0x3c
    f892:	af00      	add	r7, sp, #0
    f894:	6078      	str	r0, [r7, #4]
    assert(fmt != NULL);
    f896:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    f898:	2b00      	cmp	r3, #0
    f89a:	d106      	bne.n	f8aa <mp_obj_new_exception_msg_varg+0x1e>
    f89c:	4b43      	ldr	r3, [pc, #268]	; (f9ac <mp_obj_new_exception_msg_varg+0x120>)
    f89e:	4a44      	ldr	r2, [pc, #272]	; (f9b0 <mp_obj_new_exception_msg_varg+0x124>)
    f8a0:	f240 1161 	movw	r1, #353	; 0x161
    f8a4:	4843      	ldr	r0, [pc, #268]	; (f9b4 <mp_obj_new_exception_msg_varg+0x128>)
    f8a6:	f00b ff13 	bl	1b6d0 <__assert_func>

    // Check that the given type is an exception type
    assert(exc_type->make_new == mp_obj_exception_make_new);
    f8aa:	687b      	ldr	r3, [r7, #4]
    f8ac:	68db      	ldr	r3, [r3, #12]
    f8ae:	4a42      	ldr	r2, [pc, #264]	; (f9b8 <mp_obj_new_exception_msg_varg+0x12c>)
    f8b0:	4293      	cmp	r3, r2
    f8b2:	d006      	beq.n	f8c2 <mp_obj_new_exception_msg_varg+0x36>
    f8b4:	4b41      	ldr	r3, [pc, #260]	; (f9bc <mp_obj_new_exception_msg_varg+0x130>)
    f8b6:	4a3e      	ldr	r2, [pc, #248]	; (f9b0 <mp_obj_new_exception_msg_varg+0x124>)
    f8b8:	f44f 71b2 	mov.w	r1, #356	; 0x164
    f8bc:	483d      	ldr	r0, [pc, #244]	; (f9b4 <mp_obj_new_exception_msg_varg+0x128>)
    f8be:	f00b ff07 	bl	1b6d0 <__assert_func>

    // Try to allocate memory for the message
    mp_obj_str_t *o_str = m_new_obj_maybe(mp_obj_str_t);
    f8c2:	2010      	movs	r0, #16
    f8c4:	f7f0 fd42 	bl	34c <m_malloc_maybe>
    f8c8:	6378      	str	r0, [r7, #52]	; 0x34
    size_t o_str_alloc = strlen(fmt) + 1;
    f8ca:	6c78      	ldr	r0, [r7, #68]	; 0x44
    f8cc:	f00d fb0e 	bl	1ceec <strlen>
    f8d0:	4603      	mov	r3, r0
    f8d2:	3301      	adds	r3, #1
    f8d4:	633b      	str	r3, [r7, #48]	; 0x30
    byte *o_str_buf = m_new_maybe(byte, o_str_alloc);
    f8d6:	6b38      	ldr	r0, [r7, #48]	; 0x30
    f8d8:	f7f0 fd38 	bl	34c <m_malloc_maybe>
    f8dc:	62f8      	str	r0, [r7, #44]	; 0x2c

    bool used_emg_buf = false;
    f8de:	2300      	movs	r3, #0
    f8e0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        o_str_alloc = (uint8_t*)MP_STATE_VM(mp_emergency_exception_buf)
            + mp_emergency_exception_buf_size - o_str_buf;
    }
    #endif

    if (o_str == NULL) {
    f8e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    f8e6:	2b00      	cmp	r3, #0
    f8e8:	d107      	bne.n	f8fa <mp_obj_new_exception_msg_varg+0x6e>
        // No memory for the string object so create the exception with no args
        return mp_obj_exception_make_new(exc_type, 0, 0, NULL);
    f8ea:	2300      	movs	r3, #0
    f8ec:	2200      	movs	r2, #0
    f8ee:	2100      	movs	r1, #0
    f8f0:	6878      	ldr	r0, [r7, #4]
    f8f2:	f7ff fe81 	bl	f5f8 <mp_obj_exception_make_new>
    f8f6:	4603      	mov	r3, r0
    f8f8:	e050      	b.n	f99c <mp_obj_new_exception_msg_varg+0x110>
    }

    if (o_str_buf == NULL) {
    f8fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    f8fc:	2b00      	cmp	r3, #0
    f8fe:	d107      	bne.n	f910 <mp_obj_new_exception_msg_varg+0x84>
        // No memory for the string buffer: assume that the fmt string is in ROM
        // and use that data as the data of the string
        o_str->len = o_str_alloc - 1; // will be equal to strlen(fmt)
    f900:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    f902:	1e5a      	subs	r2, r3, #1
    f904:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    f906:	609a      	str	r2, [r3, #8]
        o_str->data = (const byte*)fmt;
    f908:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    f90a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    f90c:	60da      	str	r2, [r3, #12]
    f90e:	e02d      	b.n	f96c <mp_obj_new_exception_msg_varg+0xe0>
    } else {
        // We have some memory to format the string
        struct _exc_printer_t exc_pr = {!used_emg_buf, o_str_alloc, 0, o_str_buf};
    f910:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
    f914:	2b00      	cmp	r3, #0
    f916:	bf14      	ite	ne
    f918:	2301      	movne	r3, #1
    f91a:	2300      	moveq	r3, #0
    f91c:	b2db      	uxtb	r3, r3
    f91e:	f083 0301 	eor.w	r3, r3, #1
    f922:	b2db      	uxtb	r3, r3
    f924:	f003 0301 	and.w	r3, r3, #1
    f928:	b2db      	uxtb	r3, r3
    f92a:	753b      	strb	r3, [r7, #20]
    f92c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    f92e:	61bb      	str	r3, [r7, #24]
    f930:	2300      	movs	r3, #0
    f932:	61fb      	str	r3, [r7, #28]
    f934:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    f936:	623b      	str	r3, [r7, #32]
        mp_print_t print = {&exc_pr, exc_add_strn};
    f938:	f107 0314 	add.w	r3, r7, #20
    f93c:	60fb      	str	r3, [r7, #12]
    f93e:	4b20      	ldr	r3, [pc, #128]	; (f9c0 <mp_obj_new_exception_msg_varg+0x134>)
    f940:	613b      	str	r3, [r7, #16]
        va_list ap;
        va_start(ap, fmt);
    f942:	f107 0348 	add.w	r3, r7, #72	; 0x48
    f946:	60bb      	str	r3, [r7, #8]
        mp_vprintf(&print, fmt, ap);
    f948:	f107 030c 	add.w	r3, r7, #12
    f94c:	68ba      	ldr	r2, [r7, #8]
    f94e:	6c79      	ldr	r1, [r7, #68]	; 0x44
    f950:	4618      	mov	r0, r3
    f952:	f7f2 fb79 	bl	2048 <mp_vprintf>
        va_end(ap);
        exc_pr.buf[exc_pr.len] = '\0';
    f956:	6a3a      	ldr	r2, [r7, #32]
    f958:	69fb      	ldr	r3, [r7, #28]
    f95a:	4413      	add	r3, r2
    f95c:	2200      	movs	r2, #0
    f95e:	701a      	strb	r2, [r3, #0]
        o_str->len = exc_pr.len;
    f960:	69fa      	ldr	r2, [r7, #28]
    f962:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    f964:	609a      	str	r2, [r3, #8]
        o_str->data = exc_pr.buf;
    f966:	6a3a      	ldr	r2, [r7, #32]
    f968:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    f96a:	60da      	str	r2, [r3, #12]
    }

    // Create the string object and call mp_obj_exception_make_new to create the exception
    o_str->base.type = &mp_type_str;
    f96c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    f96e:	4a15      	ldr	r2, [pc, #84]	; (f9c4 <mp_obj_new_exception_msg_varg+0x138>)
    f970:	601a      	str	r2, [r3, #0]
    o_str->hash = qstr_compute_hash(o_str->data, o_str->len);
    f972:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    f974:	68da      	ldr	r2, [r3, #12]
    f976:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    f978:	689b      	ldr	r3, [r3, #8]
    f97a:	4619      	mov	r1, r3
    f97c:	4610      	mov	r0, r2
    f97e:	f7f1 fb05 	bl	f8c <qstr_compute_hash>
    f982:	4602      	mov	r2, r0
    f984:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    f986:	605a      	str	r2, [r3, #4]
    mp_obj_t arg = MP_OBJ_FROM_PTR(o_str);
    f988:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    f98a:	627b      	str	r3, [r7, #36]	; 0x24
    return mp_obj_exception_make_new(exc_type, 1, 0, &arg);
    f98c:	f107 0324 	add.w	r3, r7, #36	; 0x24
    f990:	2200      	movs	r2, #0
    f992:	2101      	movs	r1, #1
    f994:	6878      	ldr	r0, [r7, #4]
    f996:	f7ff fe2f 	bl	f5f8 <mp_obj_exception_make_new>
    f99a:	4603      	mov	r3, r0
}
    f99c:	4618      	mov	r0, r3
    f99e:	373c      	adds	r7, #60	; 0x3c
    f9a0:	46bd      	mov	sp, r7
    f9a2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
    f9a6:	b003      	add	sp, #12
    f9a8:	4770      	bx	lr
    f9aa:	bf00      	nop
    f9ac:	00022758 	.word	0x00022758
    f9b0:	000227a8 	.word	0x000227a8
    f9b4:	00022740 	.word	0x00022740
    f9b8:	0000f5f9 	.word	0x0000f5f9
    f9bc:	00022710 	.word	0x00022710
    f9c0:	0000f7e9 	.word	0x0000f7e9
    f9c4:	00023b0c 	.word	0x00023b0c

0000f9c8 <mp_obj_is_exception_type>:

// return true if the given object is an exception type
bool mp_obj_is_exception_type(mp_obj_t self_in) {
    f9c8:	b580      	push	{r7, lr}
    f9ca:	b084      	sub	sp, #16
    f9cc:	af00      	add	r7, sp, #0
    f9ce:	6078      	str	r0, [r7, #4]
    if (MP_OBJ_IS_TYPE(self_in, &mp_type_type)) {
    f9d0:	6878      	ldr	r0, [r7, #4]
    f9d2:	f7ff fd9d 	bl	f510 <MP_OBJ_IS_OBJ>
    f9d6:	4603      	mov	r3, r0
    f9d8:	2b00      	cmp	r3, #0
    f9da:	d00d      	beq.n	f9f8 <mp_obj_is_exception_type+0x30>
    f9dc:	687b      	ldr	r3, [r7, #4]
    f9de:	681b      	ldr	r3, [r3, #0]
    f9e0:	4a0a      	ldr	r2, [pc, #40]	; (fa0c <mp_obj_is_exception_type+0x44>)
    f9e2:	4293      	cmp	r3, r2
    f9e4:	d108      	bne.n	f9f8 <mp_obj_is_exception_type+0x30>
        // optimisation when self_in is a builtin exception
        mp_obj_type_t *self = MP_OBJ_TO_PTR(self_in);
    f9e6:	687b      	ldr	r3, [r7, #4]
    f9e8:	60fb      	str	r3, [r7, #12]
        if (self->make_new == mp_obj_exception_make_new) {
    f9ea:	68fb      	ldr	r3, [r7, #12]
    f9ec:	68db      	ldr	r3, [r3, #12]
    f9ee:	4a08      	ldr	r2, [pc, #32]	; (fa10 <mp_obj_is_exception_type+0x48>)
    f9f0:	4293      	cmp	r3, r2
    f9f2:	d101      	bne.n	f9f8 <mp_obj_is_exception_type+0x30>
            return true;
    f9f4:	2301      	movs	r3, #1
    f9f6:	e004      	b.n	fa02 <mp_obj_is_exception_type+0x3a>
        }
    }
    return mp_obj_is_subclass_fast(self_in, MP_OBJ_FROM_PTR(&mp_type_BaseException));
    f9f8:	4906      	ldr	r1, [pc, #24]	; (fa14 <mp_obj_is_exception_type+0x4c>)
    f9fa:	6878      	ldr	r0, [r7, #4]
    f9fc:	f007 fdb2 	bl	17564 <mp_obj_is_subclass_fast>
    fa00:	4603      	mov	r3, r0
}
    fa02:	4618      	mov	r0, r3
    fa04:	3710      	adds	r7, #16
    fa06:	46bd      	mov	sp, r7
    fa08:	bd80      	pop	{r7, pc}
    fa0a:	bf00      	nop
    fa0c:	00024088 	.word	0x00024088
    fa10:	0000f5f9 	.word	0x0000f5f9
    fa14:	00022134 	.word	0x00022134

0000fa18 <mp_obj_is_exception_instance>:

// return true if the given object is an instance of an exception type
bool mp_obj_is_exception_instance(mp_obj_t self_in) {
    fa18:	b580      	push	{r7, lr}
    fa1a:	b082      	sub	sp, #8
    fa1c:	af00      	add	r7, sp, #0
    fa1e:	6078      	str	r0, [r7, #4]
    return mp_obj_is_exception_type(MP_OBJ_FROM_PTR(mp_obj_get_type(self_in)));
    fa20:	6878      	ldr	r0, [r7, #4]
    fa22:	f7fe f847 	bl	dab4 <mp_obj_get_type>
    fa26:	4603      	mov	r3, r0
    fa28:	4618      	mov	r0, r3
    fa2a:	f7ff ffcd 	bl	f9c8 <mp_obj_is_exception_type>
    fa2e:	4603      	mov	r3, r0
}
    fa30:	4618      	mov	r0, r3
    fa32:	3708      	adds	r7, #8
    fa34:	46bd      	mov	sp, r7
    fa36:	bd80      	pop	{r7, pc}

0000fa38 <mp_obj_exception_match>:

// Return true if exception (type or instance) is a subclass of given
// exception type.  Assumes exc_type is a subclass of BaseException, as
// defined by mp_obj_is_exception_type(exc_type).
bool mp_obj_exception_match(mp_obj_t exc, mp_const_obj_t exc_type) {
    fa38:	b580      	push	{r7, lr}
    fa3a:	b082      	sub	sp, #8
    fa3c:	af00      	add	r7, sp, #0
    fa3e:	6078      	str	r0, [r7, #4]
    fa40:	6039      	str	r1, [r7, #0]
    // if exc is an instance of an exception, then extract and use its type
    if (mp_obj_is_exception_instance(exc)) {
    fa42:	6878      	ldr	r0, [r7, #4]
    fa44:	f7ff ffe8 	bl	fa18 <mp_obj_is_exception_instance>
    fa48:	4603      	mov	r3, r0
    fa4a:	2b00      	cmp	r3, #0
    fa4c:	d003      	beq.n	fa56 <mp_obj_exception_match+0x1e>
        exc = MP_OBJ_FROM_PTR(mp_obj_get_type(exc));
    fa4e:	6878      	ldr	r0, [r7, #4]
    fa50:	f7fe f830 	bl	dab4 <mp_obj_get_type>
    fa54:	6078      	str	r0, [r7, #4]
    }
    return mp_obj_is_subclass_fast(exc, exc_type);
    fa56:	6839      	ldr	r1, [r7, #0]
    fa58:	6878      	ldr	r0, [r7, #4]
    fa5a:	f007 fd83 	bl	17564 <mp_obj_is_subclass_fast>
    fa5e:	4603      	mov	r3, r0
}
    fa60:	4618      	mov	r0, r3
    fa62:	3708      	adds	r7, #8
    fa64:	46bd      	mov	sp, r7
    fa66:	bd80      	pop	{r7, pc}

0000fa68 <mp_obj_exception_clear_traceback>:
        self = MP_OBJ_TO_PTR(self_in); \
    } else { \
        self = MP_OBJ_TO_PTR(((mp_obj_instance_t*)MP_OBJ_TO_PTR(self_in))->subobj[0]); \
    }

void mp_obj_exception_clear_traceback(mp_obj_t self_in) {
    fa68:	b580      	push	{r7, lr}
    fa6a:	b084      	sub	sp, #16
    fa6c:	af00      	add	r7, sp, #0
    fa6e:	6078      	str	r0, [r7, #4]
    GET_NATIVE_EXCEPTION(self, self_in);
    fa70:	6878      	ldr	r0, [r7, #4]
    fa72:	f7ff ffd1 	bl	fa18 <mp_obj_is_exception_instance>
    fa76:	4603      	mov	r3, r0
    fa78:	2b00      	cmp	r3, #0
    fa7a:	d106      	bne.n	fa8a <mp_obj_exception_clear_traceback+0x22>
    fa7c:	4b0d      	ldr	r3, [pc, #52]	; (fab4 <mp_obj_exception_clear_traceback+0x4c>)
    fa7e:	4a0e      	ldr	r2, [pc, #56]	; (fab8 <mp_obj_exception_clear_traceback+0x50>)
    fa80:	f240 11c3 	movw	r1, #451	; 0x1c3
    fa84:	480d      	ldr	r0, [pc, #52]	; (fabc <mp_obj_exception_clear_traceback+0x54>)
    fa86:	f00b fe23 	bl	1b6d0 <__assert_func>
    fa8a:	6878      	ldr	r0, [r7, #4]
    fa8c:	f7fe f812 	bl	dab4 <mp_obj_get_type>
    fa90:	4603      	mov	r3, r0
    fa92:	68db      	ldr	r3, [r3, #12]
    fa94:	4a0a      	ldr	r2, [pc, #40]	; (fac0 <mp_obj_exception_clear_traceback+0x58>)
    fa96:	4293      	cmp	r3, r2
    fa98:	d102      	bne.n	faa0 <mp_obj_exception_clear_traceback+0x38>
    fa9a:	687b      	ldr	r3, [r7, #4]
    fa9c:	60fb      	str	r3, [r7, #12]
    fa9e:	e002      	b.n	faa6 <mp_obj_exception_clear_traceback+0x3e>
    faa0:	687b      	ldr	r3, [r7, #4]
    faa2:	691b      	ldr	r3, [r3, #16]
    faa4:	60fb      	str	r3, [r7, #12]
    // just set the traceback to the null object
    // we don't want to call any memory management functions here
    self->traceback_data = NULL;
    faa6:	68fb      	ldr	r3, [r7, #12]
    faa8:	2200      	movs	r2, #0
    faaa:	609a      	str	r2, [r3, #8]
}
    faac:	bf00      	nop
    faae:	3710      	adds	r7, #16
    fab0:	46bd      	mov	sp, r7
    fab2:	bd80      	pop	{r7, pc}
    fab4:	00022764 	.word	0x00022764
    fab8:	000227c8 	.word	0x000227c8
    fabc:	00022740 	.word	0x00022740
    fac0:	0000f5f9 	.word	0x0000f5f9

0000fac4 <mp_obj_exception_add_traceback>:

void mp_obj_exception_add_traceback(mp_obj_t self_in, qstr file, size_t line, qstr block) {
    fac4:	b580      	push	{r7, lr}
    fac6:	b088      	sub	sp, #32
    fac8:	af00      	add	r7, sp, #0
    faca:	60f8      	str	r0, [r7, #12]
    facc:	60b9      	str	r1, [r7, #8]
    face:	607a      	str	r2, [r7, #4]
    fad0:	603b      	str	r3, [r7, #0]
    GET_NATIVE_EXCEPTION(self, self_in);
    fad2:	68f8      	ldr	r0, [r7, #12]
    fad4:	f7ff ffa0 	bl	fa18 <mp_obj_is_exception_instance>
    fad8:	4603      	mov	r3, r0
    fada:	2b00      	cmp	r3, #0
    fadc:	d106      	bne.n	faec <mp_obj_exception_add_traceback+0x28>
    fade:	4b33      	ldr	r3, [pc, #204]	; (fbac <mp_obj_exception_add_traceback+0xe8>)
    fae0:	4a33      	ldr	r2, [pc, #204]	; (fbb0 <mp_obj_exception_add_traceback+0xec>)
    fae2:	f44f 71e5 	mov.w	r1, #458	; 0x1ca
    fae6:	4833      	ldr	r0, [pc, #204]	; (fbb4 <mp_obj_exception_add_traceback+0xf0>)
    fae8:	f00b fdf2 	bl	1b6d0 <__assert_func>
    faec:	68f8      	ldr	r0, [r7, #12]
    faee:	f7fd ffe1 	bl	dab4 <mp_obj_get_type>
    faf2:	4603      	mov	r3, r0
    faf4:	68db      	ldr	r3, [r3, #12]
    faf6:	4a30      	ldr	r2, [pc, #192]	; (fbb8 <mp_obj_exception_add_traceback+0xf4>)
    faf8:	4293      	cmp	r3, r2
    fafa:	d102      	bne.n	fb02 <mp_obj_exception_add_traceback+0x3e>
    fafc:	68fb      	ldr	r3, [r7, #12]
    fafe:	61fb      	str	r3, [r7, #28]
    fb00:	e002      	b.n	fb08 <mp_obj_exception_add_traceback+0x44>
    fb02:	68fb      	ldr	r3, [r7, #12]
    fb04:	691b      	ldr	r3, [r3, #16]
    fb06:	61fb      	str	r3, [r7, #28]

    // append this traceback info to traceback data
    // if memory allocation fails (eg because gc is locked), just return

    if (self->traceback_data == NULL) {
    fb08:	69fb      	ldr	r3, [r7, #28]
    fb0a:	689b      	ldr	r3, [r3, #8]
    fb0c:	2b00      	cmp	r3, #0
    fb0e:	d110      	bne.n	fb32 <mp_obj_exception_add_traceback+0x6e>
        self->traceback_data = m_new_maybe(size_t, TRACEBACK_ENTRY_LEN);
    fb10:	200c      	movs	r0, #12
    fb12:	f7f0 fc1b 	bl	34c <m_malloc_maybe>
    fb16:	4602      	mov	r2, r0
    fb18:	69fb      	ldr	r3, [r7, #28]
    fb1a:	609a      	str	r2, [r3, #8]
        if (self->traceback_data == NULL) {
    fb1c:	69fb      	ldr	r3, [r7, #28]
    fb1e:	689b      	ldr	r3, [r3, #8]
    fb20:	2b00      	cmp	r3, #0
    fb22:	d03d      	beq.n	fba0 <mp_obj_exception_add_traceback+0xdc>
            // Can't allocate
            return;
            #endif
        } else {
            // Allocated the traceback data on the heap
            self->traceback_alloc = TRACEBACK_ENTRY_LEN;
    fb24:	69fb      	ldr	r3, [r7, #28]
    fb26:	2203      	movs	r2, #3
    fb28:	809a      	strh	r2, [r3, #4]
        }
        self->traceback_len = 0;
    fb2a:	69fb      	ldr	r3, [r7, #28]
    fb2c:	2200      	movs	r2, #0
    fb2e:	80da      	strh	r2, [r3, #6]
    fb30:	e01d      	b.n	fb6e <mp_obj_exception_add_traceback+0xaa>
    } else if (self->traceback_len + TRACEBACK_ENTRY_LEN > self->traceback_alloc) {
    fb32:	69fb      	ldr	r3, [r7, #28]
    fb34:	88db      	ldrh	r3, [r3, #6]
    fb36:	3303      	adds	r3, #3
    fb38:	69fa      	ldr	r2, [r7, #28]
    fb3a:	8892      	ldrh	r2, [r2, #4]
    fb3c:	4293      	cmp	r3, r2
    fb3e:	dd16      	ble.n	fb6e <mp_obj_exception_add_traceback+0xaa>
            // Can't resize the emergency buffer
            return;
        }
        #endif
        // be conservative with growing traceback data
        size_t *tb_data = m_renew_maybe(size_t, self->traceback_data, self->traceback_alloc,
    fb40:	69fb      	ldr	r3, [r7, #28]
    fb42:	6898      	ldr	r0, [r3, #8]
    fb44:	69fb      	ldr	r3, [r7, #28]
    fb46:	889b      	ldrh	r3, [r3, #4]
    fb48:	3303      	adds	r3, #3
    fb4a:	009b      	lsls	r3, r3, #2
    fb4c:	2201      	movs	r2, #1
    fb4e:	4619      	mov	r1, r3
    fb50:	f7f0 fc4a 	bl	3e8 <m_realloc_maybe>
    fb54:	61b8      	str	r0, [r7, #24]
            self->traceback_alloc + TRACEBACK_ENTRY_LEN, true);
        if (tb_data == NULL) {
    fb56:	69bb      	ldr	r3, [r7, #24]
    fb58:	2b00      	cmp	r3, #0
    fb5a:	d023      	beq.n	fba4 <mp_obj_exception_add_traceback+0xe0>
            return;
        }
        self->traceback_data = tb_data;
    fb5c:	69fb      	ldr	r3, [r7, #28]
    fb5e:	69ba      	ldr	r2, [r7, #24]
    fb60:	609a      	str	r2, [r3, #8]
        self->traceback_alloc += TRACEBACK_ENTRY_LEN;
    fb62:	69fb      	ldr	r3, [r7, #28]
    fb64:	889b      	ldrh	r3, [r3, #4]
    fb66:	3303      	adds	r3, #3
    fb68:	b29a      	uxth	r2, r3
    fb6a:	69fb      	ldr	r3, [r7, #28]
    fb6c:	809a      	strh	r2, [r3, #4]
    }

    size_t *tb_data = &self->traceback_data[self->traceback_len];
    fb6e:	69fb      	ldr	r3, [r7, #28]
    fb70:	689a      	ldr	r2, [r3, #8]
    fb72:	69fb      	ldr	r3, [r7, #28]
    fb74:	88db      	ldrh	r3, [r3, #6]
    fb76:	009b      	lsls	r3, r3, #2
    fb78:	4413      	add	r3, r2
    fb7a:	617b      	str	r3, [r7, #20]
    self->traceback_len += TRACEBACK_ENTRY_LEN;
    fb7c:	69fb      	ldr	r3, [r7, #28]
    fb7e:	88db      	ldrh	r3, [r3, #6]
    fb80:	3303      	adds	r3, #3
    fb82:	b29a      	uxth	r2, r3
    fb84:	69fb      	ldr	r3, [r7, #28]
    fb86:	80da      	strh	r2, [r3, #6]
    tb_data[0] = file;
    fb88:	697b      	ldr	r3, [r7, #20]
    fb8a:	68ba      	ldr	r2, [r7, #8]
    fb8c:	601a      	str	r2, [r3, #0]
    tb_data[1] = line;
    fb8e:	697b      	ldr	r3, [r7, #20]
    fb90:	3304      	adds	r3, #4
    fb92:	687a      	ldr	r2, [r7, #4]
    fb94:	601a      	str	r2, [r3, #0]
    tb_data[2] = block;
    fb96:	697b      	ldr	r3, [r7, #20]
    fb98:	3308      	adds	r3, #8
    fb9a:	683a      	ldr	r2, [r7, #0]
    fb9c:	601a      	str	r2, [r3, #0]
    fb9e:	e002      	b.n	fba6 <mp_obj_exception_add_traceback+0xe2>
            return;
    fba0:	bf00      	nop
    fba2:	e000      	b.n	fba6 <mp_obj_exception_add_traceback+0xe2>
            return;
    fba4:	bf00      	nop
}
    fba6:	3720      	adds	r7, #32
    fba8:	46bd      	mov	sp, r7
    fbaa:	bd80      	pop	{r7, pc}
    fbac:	00022764 	.word	0x00022764
    fbb0:	000227ec 	.word	0x000227ec
    fbb4:	00022740 	.word	0x00022740
    fbb8:	0000f5f9 	.word	0x0000f5f9

0000fbbc <mp_obj_exception_get_traceback>:

void mp_obj_exception_get_traceback(mp_obj_t self_in, size_t *n, size_t **values) {
    fbbc:	b580      	push	{r7, lr}
    fbbe:	b086      	sub	sp, #24
    fbc0:	af00      	add	r7, sp, #0
    fbc2:	60f8      	str	r0, [r7, #12]
    fbc4:	60b9      	str	r1, [r7, #8]
    fbc6:	607a      	str	r2, [r7, #4]
    GET_NATIVE_EXCEPTION(self, self_in);
    fbc8:	68f8      	ldr	r0, [r7, #12]
    fbca:	f7ff ff25 	bl	fa18 <mp_obj_is_exception_instance>
    fbce:	4603      	mov	r3, r0
    fbd0:	2b00      	cmp	r3, #0
    fbd2:	d106      	bne.n	fbe2 <mp_obj_exception_get_traceback+0x26>
    fbd4:	4b16      	ldr	r3, [pc, #88]	; (fc30 <mp_obj_exception_get_traceback+0x74>)
    fbd6:	4a17      	ldr	r2, [pc, #92]	; (fc34 <mp_obj_exception_get_traceback+0x78>)
    fbd8:	f44f 71ff 	mov.w	r1, #510	; 0x1fe
    fbdc:	4816      	ldr	r0, [pc, #88]	; (fc38 <mp_obj_exception_get_traceback+0x7c>)
    fbde:	f00b fd77 	bl	1b6d0 <__assert_func>
    fbe2:	68f8      	ldr	r0, [r7, #12]
    fbe4:	f7fd ff66 	bl	dab4 <mp_obj_get_type>
    fbe8:	4603      	mov	r3, r0
    fbea:	68db      	ldr	r3, [r3, #12]
    fbec:	4a13      	ldr	r2, [pc, #76]	; (fc3c <mp_obj_exception_get_traceback+0x80>)
    fbee:	4293      	cmp	r3, r2
    fbf0:	d102      	bne.n	fbf8 <mp_obj_exception_get_traceback+0x3c>
    fbf2:	68fb      	ldr	r3, [r7, #12]
    fbf4:	617b      	str	r3, [r7, #20]
    fbf6:	e002      	b.n	fbfe <mp_obj_exception_get_traceback+0x42>
    fbf8:	68fb      	ldr	r3, [r7, #12]
    fbfa:	691b      	ldr	r3, [r3, #16]
    fbfc:	617b      	str	r3, [r7, #20]

    if (self->traceback_data == NULL) {
    fbfe:	697b      	ldr	r3, [r7, #20]
    fc00:	689b      	ldr	r3, [r3, #8]
    fc02:	2b00      	cmp	r3, #0
    fc04:	d106      	bne.n	fc14 <mp_obj_exception_get_traceback+0x58>
        *n = 0;
    fc06:	68bb      	ldr	r3, [r7, #8]
    fc08:	2200      	movs	r2, #0
    fc0a:	601a      	str	r2, [r3, #0]
        *values = NULL;
    fc0c:	687b      	ldr	r3, [r7, #4]
    fc0e:	2200      	movs	r2, #0
    fc10:	601a      	str	r2, [r3, #0]
    } else {
        *n = self->traceback_len;
        *values = self->traceback_data;
    }
}
    fc12:	e008      	b.n	fc26 <mp_obj_exception_get_traceback+0x6a>
        *n = self->traceback_len;
    fc14:	697b      	ldr	r3, [r7, #20]
    fc16:	88db      	ldrh	r3, [r3, #6]
    fc18:	461a      	mov	r2, r3
    fc1a:	68bb      	ldr	r3, [r7, #8]
    fc1c:	601a      	str	r2, [r3, #0]
        *values = self->traceback_data;
    fc1e:	697b      	ldr	r3, [r7, #20]
    fc20:	689a      	ldr	r2, [r3, #8]
    fc22:	687b      	ldr	r3, [r7, #4]
    fc24:	601a      	str	r2, [r3, #0]
}
    fc26:	bf00      	nop
    fc28:	3718      	adds	r7, #24
    fc2a:	46bd      	mov	sp, r7
    fc2c:	bd80      	pop	{r7, pc}
    fc2e:	bf00      	nop
    fc30:	00022764 	.word	0x00022764
    fc34:	0002280c 	.word	0x0002280c
    fc38:	00022740 	.word	0x00022740
    fc3c:	0000f5f9 	.word	0x0000f5f9

0000fc40 <MP_OBJ_IS_OBJ>:
    fc40:	b480      	push	{r7}
    fc42:	b083      	sub	sp, #12
    fc44:	af00      	add	r7, sp, #0
    fc46:	6078      	str	r0, [r7, #4]
    fc48:	687b      	ldr	r3, [r7, #4]
    fc4a:	f003 0303 	and.w	r3, r3, #3
    fc4e:	2b00      	cmp	r3, #0
    fc50:	bf0c      	ite	eq
    fc52:	2301      	moveq	r3, #1
    fc54:	2300      	movne	r3, #0
    fc56:	b2db      	uxtb	r3, r3
    fc58:	4618      	mov	r0, r3
    fc5a:	370c      	adds	r7, #12
    fc5c:	46bd      	mov	sp, r7
    fc5e:	f85d 7b04 	ldr.w	r7, [sp], #4
    fc62:	4770      	bx	lr

0000fc64 <mp_globals_get>:
static inline mp_obj_dict_t *mp_globals_get(void) { return MP_STATE_THREAD(dict_globals); }
    fc64:	b480      	push	{r7}
    fc66:	af00      	add	r7, sp, #0
    fc68:	4b03      	ldr	r3, [pc, #12]	; (fc78 <mp_globals_get+0x14>)
    fc6a:	685b      	ldr	r3, [r3, #4]
    fc6c:	4618      	mov	r0, r3
    fc6e:	46bd      	mov	sp, r7
    fc70:	f85d 7b04 	ldr.w	r7, [sp], #4
    fc74:	4770      	bx	lr
    fc76:	bf00      	nop
    fc78:	200012f0 	.word	0x200012f0

0000fc7c <mp_globals_set>:
static inline void mp_globals_set(mp_obj_dict_t *d) { MP_STATE_THREAD(dict_globals) = d; }
    fc7c:	b480      	push	{r7}
    fc7e:	b083      	sub	sp, #12
    fc80:	af00      	add	r7, sp, #0
    fc82:	6078      	str	r0, [r7, #4]
    fc84:	4a04      	ldr	r2, [pc, #16]	; (fc98 <mp_globals_set+0x1c>)
    fc86:	687b      	ldr	r3, [r7, #4]
    fc88:	6053      	str	r3, [r2, #4]
    fc8a:	bf00      	nop
    fc8c:	370c      	adds	r7, #12
    fc8e:	46bd      	mov	sp, r7
    fc90:	f85d 7b04 	ldr.w	r7, [sp], #4
    fc94:	4770      	bx	lr
    fc96:	bf00      	nop
    fc98:	200012f0 	.word	0x200012f0

0000fc9c <fun_builtin_0_call>:
// function type.

/******************************************************************************/
/* builtin functions                                                          */

STATIC mp_obj_t fun_builtin_0_call(mp_obj_t self_in, size_t n_args, size_t n_kw, const mp_obj_t *args) {
    fc9c:	b580      	push	{r7, lr}
    fc9e:	b088      	sub	sp, #32
    fca0:	af02      	add	r7, sp, #8
    fca2:	60f8      	str	r0, [r7, #12]
    fca4:	60b9      	str	r1, [r7, #8]
    fca6:	607a      	str	r2, [r7, #4]
    fca8:	603b      	str	r3, [r7, #0]
    (void)args;
    assert(MP_OBJ_IS_TYPE(self_in, &mp_type_fun_builtin_0));
    fcaa:	68f8      	ldr	r0, [r7, #12]
    fcac:	f7ff ffc8 	bl	fc40 <MP_OBJ_IS_OBJ>
    fcb0:	4603      	mov	r3, r0
    fcb2:	f083 0301 	eor.w	r3, r3, #1
    fcb6:	b2db      	uxtb	r3, r3
    fcb8:	2b00      	cmp	r3, #0
    fcba:	d104      	bne.n	fcc6 <fun_builtin_0_call+0x2a>
    fcbc:	68fb      	ldr	r3, [r7, #12]
    fcbe:	681b      	ldr	r3, [r3, #0]
    fcc0:	4a0d      	ldr	r2, [pc, #52]	; (fcf8 <fun_builtin_0_call+0x5c>)
    fcc2:	4293      	cmp	r3, r2
    fcc4:	d005      	beq.n	fcd2 <fun_builtin_0_call+0x36>
    fcc6:	4b0d      	ldr	r3, [pc, #52]	; (fcfc <fun_builtin_0_call+0x60>)
    fcc8:	4a0d      	ldr	r2, [pc, #52]	; (fd00 <fun_builtin_0_call+0x64>)
    fcca:	2135      	movs	r1, #53	; 0x35
    fccc:	480d      	ldr	r0, [pc, #52]	; (fd04 <fun_builtin_0_call+0x68>)
    fcce:	f00b fcff 	bl	1b6d0 <__assert_func>
    mp_obj_fun_builtin_fixed_t *self = MP_OBJ_TO_PTR(self_in);
    fcd2:	68fb      	ldr	r3, [r7, #12]
    fcd4:	617b      	str	r3, [r7, #20]
    mp_arg_check_num(n_args, n_kw, 0, 0, false);
    fcd6:	2300      	movs	r3, #0
    fcd8:	9300      	str	r3, [sp, #0]
    fcda:	2300      	movs	r3, #0
    fcdc:	2200      	movs	r2, #0
    fcde:	6879      	ldr	r1, [r7, #4]
    fce0:	68b8      	ldr	r0, [r7, #8]
    fce2:	f7fd faf3 	bl	d2cc <mp_arg_check_num>
    return self->fun._0();
    fce6:	697b      	ldr	r3, [r7, #20]
    fce8:	685b      	ldr	r3, [r3, #4]
    fcea:	4798      	blx	r3
    fcec:	4603      	mov	r3, r0
}
    fcee:	4618      	mov	r0, r3
    fcf0:	3718      	adds	r7, #24
    fcf2:	46bd      	mov	sp, r7
    fcf4:	bd80      	pop	{r7, pc}
    fcf6:	bf00      	nop
    fcf8:	00022870 	.word	0x00022870
    fcfc:	0002282c 	.word	0x0002282c
    fd00:	00022af4 	.word	0x00022af4
    fd04:	0002285c 	.word	0x0002285c

0000fd08 <fun_builtin_1_call>:
    .name = MP_QSTR_function,
    .call = fun_builtin_0_call,
    .unary_op = mp_generic_unary_op,
};

STATIC mp_obj_t fun_builtin_1_call(mp_obj_t self_in, size_t n_args, size_t n_kw, const mp_obj_t *args) {
    fd08:	b580      	push	{r7, lr}
    fd0a:	b088      	sub	sp, #32
    fd0c:	af02      	add	r7, sp, #8
    fd0e:	60f8      	str	r0, [r7, #12]
    fd10:	60b9      	str	r1, [r7, #8]
    fd12:	607a      	str	r2, [r7, #4]
    fd14:	603b      	str	r3, [r7, #0]
    assert(MP_OBJ_IS_TYPE(self_in, &mp_type_fun_builtin_1));
    fd16:	68f8      	ldr	r0, [r7, #12]
    fd18:	f7ff ff92 	bl	fc40 <MP_OBJ_IS_OBJ>
    fd1c:	4603      	mov	r3, r0
    fd1e:	f083 0301 	eor.w	r3, r3, #1
    fd22:	b2db      	uxtb	r3, r3
    fd24:	2b00      	cmp	r3, #0
    fd26:	d104      	bne.n	fd32 <fun_builtin_1_call+0x2a>
    fd28:	68fb      	ldr	r3, [r7, #12]
    fd2a:	681b      	ldr	r3, [r3, #0]
    fd2c:	4a0e      	ldr	r2, [pc, #56]	; (fd68 <fun_builtin_1_call+0x60>)
    fd2e:	4293      	cmp	r3, r2
    fd30:	d005      	beq.n	fd3e <fun_builtin_1_call+0x36>
    fd32:	4b0e      	ldr	r3, [pc, #56]	; (fd6c <fun_builtin_1_call+0x64>)
    fd34:	4a0e      	ldr	r2, [pc, #56]	; (fd70 <fun_builtin_1_call+0x68>)
    fd36:	2143      	movs	r1, #67	; 0x43
    fd38:	480e      	ldr	r0, [pc, #56]	; (fd74 <fun_builtin_1_call+0x6c>)
    fd3a:	f00b fcc9 	bl	1b6d0 <__assert_func>
    mp_obj_fun_builtin_fixed_t *self = MP_OBJ_TO_PTR(self_in);
    fd3e:	68fb      	ldr	r3, [r7, #12]
    fd40:	617b      	str	r3, [r7, #20]
    mp_arg_check_num(n_args, n_kw, 1, 1, false);
    fd42:	2300      	movs	r3, #0
    fd44:	9300      	str	r3, [sp, #0]
    fd46:	2301      	movs	r3, #1
    fd48:	2201      	movs	r2, #1
    fd4a:	6879      	ldr	r1, [r7, #4]
    fd4c:	68b8      	ldr	r0, [r7, #8]
    fd4e:	f7fd fabd 	bl	d2cc <mp_arg_check_num>
    return self->fun._1(args[0]);
    fd52:	697b      	ldr	r3, [r7, #20]
    fd54:	685b      	ldr	r3, [r3, #4]
    fd56:	683a      	ldr	r2, [r7, #0]
    fd58:	6812      	ldr	r2, [r2, #0]
    fd5a:	4610      	mov	r0, r2
    fd5c:	4798      	blx	r3
    fd5e:	4603      	mov	r3, r0
}
    fd60:	4618      	mov	r0, r3
    fd62:	3718      	adds	r7, #24
    fd64:	46bd      	mov	sp, r7
    fd66:	bd80      	pop	{r7, pc}
    fd68:	000228dc 	.word	0x000228dc
    fd6c:	000228ac 	.word	0x000228ac
    fd70:	00022b08 	.word	0x00022b08
    fd74:	0002285c 	.word	0x0002285c

0000fd78 <fun_builtin_2_call>:
    .name = MP_QSTR_function,
    .call = fun_builtin_1_call,
    .unary_op = mp_generic_unary_op,
};

STATIC mp_obj_t fun_builtin_2_call(mp_obj_t self_in, size_t n_args, size_t n_kw, const mp_obj_t *args) {
    fd78:	b580      	push	{r7, lr}
    fd7a:	b088      	sub	sp, #32
    fd7c:	af02      	add	r7, sp, #8
    fd7e:	60f8      	str	r0, [r7, #12]
    fd80:	60b9      	str	r1, [r7, #8]
    fd82:	607a      	str	r2, [r7, #4]
    fd84:	603b      	str	r3, [r7, #0]
    assert(MP_OBJ_IS_TYPE(self_in, &mp_type_fun_builtin_2));
    fd86:	68f8      	ldr	r0, [r7, #12]
    fd88:	f7ff ff5a 	bl	fc40 <MP_OBJ_IS_OBJ>
    fd8c:	4603      	mov	r3, r0
    fd8e:	f083 0301 	eor.w	r3, r3, #1
    fd92:	b2db      	uxtb	r3, r3
    fd94:	2b00      	cmp	r3, #0
    fd96:	d104      	bne.n	fda2 <fun_builtin_2_call+0x2a>
    fd98:	68fb      	ldr	r3, [r7, #12]
    fd9a:	681b      	ldr	r3, [r3, #0]
    fd9c:	4a10      	ldr	r2, [pc, #64]	; (fde0 <fun_builtin_2_call+0x68>)
    fd9e:	4293      	cmp	r3, r2
    fda0:	d005      	beq.n	fdae <fun_builtin_2_call+0x36>
    fda2:	4b10      	ldr	r3, [pc, #64]	; (fde4 <fun_builtin_2_call+0x6c>)
    fda4:	4a10      	ldr	r2, [pc, #64]	; (fde8 <fun_builtin_2_call+0x70>)
    fda6:	2151      	movs	r1, #81	; 0x51
    fda8:	4810      	ldr	r0, [pc, #64]	; (fdec <fun_builtin_2_call+0x74>)
    fdaa:	f00b fc91 	bl	1b6d0 <__assert_func>
    mp_obj_fun_builtin_fixed_t *self = MP_OBJ_TO_PTR(self_in);
    fdae:	68fb      	ldr	r3, [r7, #12]
    fdb0:	617b      	str	r3, [r7, #20]
    mp_arg_check_num(n_args, n_kw, 2, 2, false);
    fdb2:	2300      	movs	r3, #0
    fdb4:	9300      	str	r3, [sp, #0]
    fdb6:	2302      	movs	r3, #2
    fdb8:	2202      	movs	r2, #2
    fdba:	6879      	ldr	r1, [r7, #4]
    fdbc:	68b8      	ldr	r0, [r7, #8]
    fdbe:	f7fd fa85 	bl	d2cc <mp_arg_check_num>
    return self->fun._2(args[0], args[1]);
    fdc2:	697b      	ldr	r3, [r7, #20]
    fdc4:	685b      	ldr	r3, [r3, #4]
    fdc6:	683a      	ldr	r2, [r7, #0]
    fdc8:	6810      	ldr	r0, [r2, #0]
    fdca:	683a      	ldr	r2, [r7, #0]
    fdcc:	3204      	adds	r2, #4
    fdce:	6812      	ldr	r2, [r2, #0]
    fdd0:	4611      	mov	r1, r2
    fdd2:	4798      	blx	r3
    fdd4:	4603      	mov	r3, r0
}
    fdd6:	4618      	mov	r0, r3
    fdd8:	3718      	adds	r7, #24
    fdda:	46bd      	mov	sp, r7
    fddc:	bd80      	pop	{r7, pc}
    fdde:	bf00      	nop
    fde0:	00022948 	.word	0x00022948
    fde4:	00022918 	.word	0x00022918
    fde8:	00022b1c 	.word	0x00022b1c
    fdec:	0002285c 	.word	0x0002285c

0000fdf0 <fun_builtin_3_call>:
    .name = MP_QSTR_function,
    .call = fun_builtin_2_call,
    .unary_op = mp_generic_unary_op,
};

STATIC mp_obj_t fun_builtin_3_call(mp_obj_t self_in, size_t n_args, size_t n_kw, const mp_obj_t *args) {
    fdf0:	b580      	push	{r7, lr}
    fdf2:	b088      	sub	sp, #32
    fdf4:	af02      	add	r7, sp, #8
    fdf6:	60f8      	str	r0, [r7, #12]
    fdf8:	60b9      	str	r1, [r7, #8]
    fdfa:	607a      	str	r2, [r7, #4]
    fdfc:	603b      	str	r3, [r7, #0]
    assert(MP_OBJ_IS_TYPE(self_in, &mp_type_fun_builtin_3));
    fdfe:	68f8      	ldr	r0, [r7, #12]
    fe00:	f7ff ff1e 	bl	fc40 <MP_OBJ_IS_OBJ>
    fe04:	4603      	mov	r3, r0
    fe06:	f083 0301 	eor.w	r3, r3, #1
    fe0a:	b2db      	uxtb	r3, r3
    fe0c:	2b00      	cmp	r3, #0
    fe0e:	d104      	bne.n	fe1a <fun_builtin_3_call+0x2a>
    fe10:	68fb      	ldr	r3, [r7, #12]
    fe12:	681b      	ldr	r3, [r3, #0]
    fe14:	4a11      	ldr	r2, [pc, #68]	; (fe5c <fun_builtin_3_call+0x6c>)
    fe16:	4293      	cmp	r3, r2
    fe18:	d005      	beq.n	fe26 <fun_builtin_3_call+0x36>
    fe1a:	4b11      	ldr	r3, [pc, #68]	; (fe60 <fun_builtin_3_call+0x70>)
    fe1c:	4a11      	ldr	r2, [pc, #68]	; (fe64 <fun_builtin_3_call+0x74>)
    fe1e:	215f      	movs	r1, #95	; 0x5f
    fe20:	4811      	ldr	r0, [pc, #68]	; (fe68 <fun_builtin_3_call+0x78>)
    fe22:	f00b fc55 	bl	1b6d0 <__assert_func>
    mp_obj_fun_builtin_fixed_t *self = MP_OBJ_TO_PTR(self_in);
    fe26:	68fb      	ldr	r3, [r7, #12]
    fe28:	617b      	str	r3, [r7, #20]
    mp_arg_check_num(n_args, n_kw, 3, 3, false);
    fe2a:	2300      	movs	r3, #0
    fe2c:	9300      	str	r3, [sp, #0]
    fe2e:	2303      	movs	r3, #3
    fe30:	2203      	movs	r2, #3
    fe32:	6879      	ldr	r1, [r7, #4]
    fe34:	68b8      	ldr	r0, [r7, #8]
    fe36:	f7fd fa49 	bl	d2cc <mp_arg_check_num>
    return self->fun._3(args[0], args[1], args[2]);
    fe3a:	697b      	ldr	r3, [r7, #20]
    fe3c:	685b      	ldr	r3, [r3, #4]
    fe3e:	683a      	ldr	r2, [r7, #0]
    fe40:	6810      	ldr	r0, [r2, #0]
    fe42:	683a      	ldr	r2, [r7, #0]
    fe44:	3204      	adds	r2, #4
    fe46:	6811      	ldr	r1, [r2, #0]
    fe48:	683a      	ldr	r2, [r7, #0]
    fe4a:	3208      	adds	r2, #8
    fe4c:	6812      	ldr	r2, [r2, #0]
    fe4e:	4798      	blx	r3
    fe50:	4603      	mov	r3, r0
}
    fe52:	4618      	mov	r0, r3
    fe54:	3718      	adds	r7, #24
    fe56:	46bd      	mov	sp, r7
    fe58:	bd80      	pop	{r7, pc}
    fe5a:	bf00      	nop
    fe5c:	000229b4 	.word	0x000229b4
    fe60:	00022984 	.word	0x00022984
    fe64:	00022b30 	.word	0x00022b30
    fe68:	0002285c 	.word	0x0002285c

0000fe6c <fun_builtin_var_call>:
    .name = MP_QSTR_function,
    .call = fun_builtin_3_call,
    .unary_op = mp_generic_unary_op,
};

STATIC mp_obj_t fun_builtin_var_call(mp_obj_t self_in, size_t n_args, size_t n_kw, const mp_obj_t *args) {
    fe6c:	b580      	push	{r7, lr}
    fe6e:	b08a      	sub	sp, #40	; 0x28
    fe70:	af02      	add	r7, sp, #8
    fe72:	60f8      	str	r0, [r7, #12]
    fe74:	60b9      	str	r1, [r7, #8]
    fe76:	607a      	str	r2, [r7, #4]
    fe78:	603b      	str	r3, [r7, #0]
    assert(MP_OBJ_IS_TYPE(self_in, &mp_type_fun_builtin_var));
    fe7a:	68f8      	ldr	r0, [r7, #12]
    fe7c:	f7ff fee0 	bl	fc40 <MP_OBJ_IS_OBJ>
    fe80:	4603      	mov	r3, r0
    fe82:	f083 0301 	eor.w	r3, r3, #1
    fe86:	b2db      	uxtb	r3, r3
    fe88:	2b00      	cmp	r3, #0
    fe8a:	d104      	bne.n	fe96 <fun_builtin_var_call+0x2a>
    fe8c:	68fb      	ldr	r3, [r7, #12]
    fe8e:	681b      	ldr	r3, [r3, #0]
    fe90:	4a21      	ldr	r2, [pc, #132]	; (ff18 <fun_builtin_var_call+0xac>)
    fe92:	4293      	cmp	r3, r2
    fe94:	d005      	beq.n	fea2 <fun_builtin_var_call+0x36>
    fe96:	4b21      	ldr	r3, [pc, #132]	; (ff1c <fun_builtin_var_call+0xb0>)
    fe98:	4a21      	ldr	r2, [pc, #132]	; (ff20 <fun_builtin_var_call+0xb4>)
    fe9a:	216d      	movs	r1, #109	; 0x6d
    fe9c:	4821      	ldr	r0, [pc, #132]	; (ff24 <fun_builtin_var_call+0xb8>)
    fe9e:	f00b fc17 	bl	1b6d0 <__assert_func>
    mp_obj_fun_builtin_var_t *self = MP_OBJ_TO_PTR(self_in);
    fea2:	68fb      	ldr	r3, [r7, #12]
    fea4:	61fb      	str	r3, [r7, #28]

    // check number of arguments
    mp_arg_check_num(n_args, n_kw, self->n_args_min, self->n_args_max, self->is_kw);
    fea6:	69fb      	ldr	r3, [r7, #28]
    fea8:	889b      	ldrh	r3, [r3, #4]
    feaa:	f3c3 034e 	ubfx	r3, r3, #1, #15
    feae:	b29b      	uxth	r3, r3
    feb0:	461a      	mov	r2, r3
    feb2:	69fb      	ldr	r3, [r7, #28]
    feb4:	88db      	ldrh	r3, [r3, #6]
    feb6:	4619      	mov	r1, r3
    feb8:	69fb      	ldr	r3, [r7, #28]
    feba:	791b      	ldrb	r3, [r3, #4]
    febc:	f3c3 0300 	ubfx	r3, r3, #0, #1
    fec0:	b2db      	uxtb	r3, r3
    fec2:	9300      	str	r3, [sp, #0]
    fec4:	460b      	mov	r3, r1
    fec6:	6879      	ldr	r1, [r7, #4]
    fec8:	68b8      	ldr	r0, [r7, #8]
    feca:	f7fd f9ff 	bl	d2cc <mp_arg_check_num>

    if (self->is_kw) {
    fece:	69fb      	ldr	r3, [r7, #28]
    fed0:	791b      	ldrb	r3, [r3, #4]
    fed2:	f3c3 0300 	ubfx	r3, r3, #0, #1
    fed6:	b2db      	uxtb	r3, r3
    fed8:	2b00      	cmp	r3, #0
    feda:	d012      	beq.n	ff02 <fun_builtin_var_call+0x96>
        // function allows keywords

        // we create a map directly from the given args array
        mp_map_t kw_args;
        mp_map_init_fixed_table(&kw_args, n_kw, args + n_args);
    fedc:	68bb      	ldr	r3, [r7, #8]
    fede:	009b      	lsls	r3, r3, #2
    fee0:	683a      	ldr	r2, [r7, #0]
    fee2:	441a      	add	r2, r3
    fee4:	f107 0310 	add.w	r3, r7, #16
    fee8:	6879      	ldr	r1, [r7, #4]
    feea:	4618      	mov	r0, r3
    feec:	f7fd fb70 	bl	d5d0 <mp_map_init_fixed_table>

        return self->fun.kw(n_args, args, &kw_args);
    fef0:	69fb      	ldr	r3, [r7, #28]
    fef2:	689b      	ldr	r3, [r3, #8]
    fef4:	f107 0210 	add.w	r2, r7, #16
    fef8:	6839      	ldr	r1, [r7, #0]
    fefa:	68b8      	ldr	r0, [r7, #8]
    fefc:	4798      	blx	r3
    fefe:	4603      	mov	r3, r0
    ff00:	e005      	b.n	ff0e <fun_builtin_var_call+0xa2>

    } else {
        // function takes a variable number of arguments, but no keywords

        return self->fun.var(n_args, args);
    ff02:	69fb      	ldr	r3, [r7, #28]
    ff04:	689b      	ldr	r3, [r3, #8]
    ff06:	6839      	ldr	r1, [r7, #0]
    ff08:	68b8      	ldr	r0, [r7, #8]
    ff0a:	4798      	blx	r3
    ff0c:	4603      	mov	r3, r0
    }
}
    ff0e:	4618      	mov	r0, r3
    ff10:	3720      	adds	r7, #32
    ff12:	46bd      	mov	sp, r7
    ff14:	bd80      	pop	{r7, pc}
    ff16:	bf00      	nop
    ff18:	00022a24 	.word	0x00022a24
    ff1c:	000229f0 	.word	0x000229f0
    ff20:	00022b44 	.word	0x00022b44
    ff24:	0002285c 	.word	0x0002285c

0000ff28 <mp_obj_code_get_name>:
};

/******************************************************************************/
/* byte code functions                                                        */

qstr mp_obj_code_get_name(const byte *code_info) {
    ff28:	b580      	push	{r7, lr}
    ff2a:	b082      	sub	sp, #8
    ff2c:	af00      	add	r7, sp, #0
    ff2e:	6078      	str	r0, [r7, #4]
    code_info = mp_decode_uint_skip(code_info); // skip code_info_size entry
    ff30:	6878      	ldr	r0, [r7, #4]
    ff32:	f00a fc9b 	bl	1a86c <mp_decode_uint_skip>
    ff36:	6078      	str	r0, [r7, #4]
    #if MICROPY_PERSISTENT_CODE
    return code_info[0] | (code_info[1] << 8);
    #else
    return mp_decode_uint_value(code_info);
    ff38:	6878      	ldr	r0, [r7, #4]
    ff3a:	f00a fc89 	bl	1a850 <mp_decode_uint_value>
    ff3e:	4603      	mov	r3, r0
    #endif
}
    ff40:	4618      	mov	r0, r3
    ff42:	3708      	adds	r7, #8
    ff44:	46bd      	mov	sp, r7
    ff46:	bd80      	pop	{r7, pc}

0000ff48 <mp_obj_fun_get_name>:

#if MICROPY_EMIT_NATIVE
STATIC const mp_obj_type_t mp_type_fun_native;
#endif

qstr mp_obj_fun_get_name(mp_const_obj_t fun_in) {
    ff48:	b580      	push	{r7, lr}
    ff4a:	b084      	sub	sp, #16
    ff4c:	af00      	add	r7, sp, #0
    ff4e:	6078      	str	r0, [r7, #4]
    const mp_obj_fun_bc_t *fun = MP_OBJ_TO_PTR(fun_in);
    ff50:	687b      	ldr	r3, [r7, #4]
    ff52:	60fb      	str	r3, [r7, #12]
        // TODO native functions don't have name stored
        return MP_QSTR_;
    }
    #endif

    const byte *bc = fun->bytecode;
    ff54:	68fb      	ldr	r3, [r7, #12]
    ff56:	689b      	ldr	r3, [r3, #8]
    ff58:	60bb      	str	r3, [r7, #8]
    bc = mp_decode_uint_skip(bc); // skip n_state
    ff5a:	68b8      	ldr	r0, [r7, #8]
    ff5c:	f00a fc86 	bl	1a86c <mp_decode_uint_skip>
    ff60:	60b8      	str	r0, [r7, #8]
    bc = mp_decode_uint_skip(bc); // skip n_exc_stack
    ff62:	68b8      	ldr	r0, [r7, #8]
    ff64:	f00a fc82 	bl	1a86c <mp_decode_uint_skip>
    ff68:	60b8      	str	r0, [r7, #8]
    bc++; // skip scope_params
    ff6a:	68bb      	ldr	r3, [r7, #8]
    ff6c:	3301      	adds	r3, #1
    ff6e:	60bb      	str	r3, [r7, #8]
    bc++; // skip n_pos_args
    ff70:	68bb      	ldr	r3, [r7, #8]
    ff72:	3301      	adds	r3, #1
    ff74:	60bb      	str	r3, [r7, #8]
    bc++; // skip n_kwonly_args
    ff76:	68bb      	ldr	r3, [r7, #8]
    ff78:	3301      	adds	r3, #1
    ff7a:	60bb      	str	r3, [r7, #8]
    bc++; // skip n_def_pos_args
    ff7c:	68bb      	ldr	r3, [r7, #8]
    ff7e:	3301      	adds	r3, #1
    ff80:	60bb      	str	r3, [r7, #8]
    return mp_obj_code_get_name(bc);
    ff82:	68b8      	ldr	r0, [r7, #8]
    ff84:	f7ff ffd0 	bl	ff28 <mp_obj_code_get_name>
    ff88:	4603      	mov	r3, r0
}
    ff8a:	4618      	mov	r0, r3
    ff8c:	3710      	adds	r7, #16
    ff8e:	46bd      	mov	sp, r7
    ff90:	bd80      	pop	{r7, pc}
    ff92:	bf00      	nop

0000ff94 <fun_bc_call>:

    return code_state;
}
#endif

STATIC mp_obj_t fun_bc_call(mp_obj_t self_in, size_t n_args, size_t n_kw, const mp_obj_t *args) {
    ff94:	b580      	push	{r7, lr}
    ff96:	b08c      	sub	sp, #48	; 0x30
    ff98:	af00      	add	r7, sp, #0
    ff9a:	60f8      	str	r0, [r7, #12]
    ff9c:	60b9      	str	r1, [r7, #8]
    ff9e:	607a      	str	r2, [r7, #4]
    ffa0:	603b      	str	r3, [r7, #0]
    DEBUG_printf("Input n_args: " UINT_FMT ", n_kw: " UINT_FMT "\n", n_args, n_kw);
    DEBUG_printf("Input pos args: ");
    dump_args(args, n_args);
    DEBUG_printf("Input kw args: ");
    dump_args(args + n_args, n_kw * 2);
    mp_obj_fun_bc_t *self = MP_OBJ_TO_PTR(self_in);
    ffa2:	68fb      	ldr	r3, [r7, #12]
    ffa4:	623b      	str	r3, [r7, #32]
    DEBUG_printf("Func n_def_args: %d\n", self->n_def_args);

    size_t n_state, state_size;
    DECODE_CODESTATE_SIZE(self->bytecode, n_state, state_size);
    ffa6:	6a3b      	ldr	r3, [r7, #32]
    ffa8:	689b      	ldr	r3, [r3, #8]
    ffaa:	4618      	mov	r0, r3
    ffac:	f00a fc50 	bl	1a850 <mp_decode_uint_value>
    ffb0:	61f8      	str	r0, [r7, #28]
    ffb2:	6a3b      	ldr	r3, [r7, #32]
    ffb4:	689b      	ldr	r3, [r3, #8]
    ffb6:	4618      	mov	r0, r3
    ffb8:	f00a fc58 	bl	1a86c <mp_decode_uint_skip>
    ffbc:	4603      	mov	r3, r0
    ffbe:	4618      	mov	r0, r3
    ffc0:	f00a fc46 	bl	1a850 <mp_decode_uint_value>
    ffc4:	61b8      	str	r0, [r7, #24]
    ffc6:	69ba      	ldr	r2, [r7, #24]
    ffc8:	4613      	mov	r3, r2
    ffca:	005b      	lsls	r3, r3, #1
    ffcc:	441a      	add	r2, r3
    ffce:	69fb      	ldr	r3, [r7, #28]
    ffd0:	4413      	add	r3, r2
    ffd2:	009b      	lsls	r3, r3, #2
    ffd4:	62fb      	str	r3, [r7, #44]	; 0x2c

    // allocate state for locals and stack
    mp_code_state_t *code_state = NULL;
    ffd6:	2300      	movs	r3, #0
    ffd8:	62bb      	str	r3, [r7, #40]	; 0x28
    #if MICROPY_ENABLE_PYSTACK
    code_state = mp_pystack_alloc(sizeof(mp_code_state_t) + state_size);
    #else
    if (state_size > VM_MAX_STATE_ON_STACK) {
    ffda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    ffdc:	2b2c      	cmp	r3, #44	; 0x2c
    ffde:	d905      	bls.n	ffec <fun_bc_call+0x58>
        code_state = m_new_obj_var_maybe(mp_code_state_t, byte, state_size);
    ffe0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    ffe2:	3314      	adds	r3, #20
    ffe4:	4618      	mov	r0, r3
    ffe6:	f7f0 f9b1 	bl	34c <m_malloc_maybe>
    ffea:	62b8      	str	r0, [r7, #40]	; 0x28
    }
    if (code_state == NULL) {
    ffec:	6abb      	ldr	r3, [r7, #40]	; 0x28
    ffee:	2b00      	cmp	r3, #0
    fff0:	d10e      	bne.n	10010 <fun_bc_call+0x7c>
        code_state = alloca(sizeof(mp_code_state_t) + state_size);
    fff2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    fff4:	3314      	adds	r3, #20
    fff6:	3307      	adds	r3, #7
    fff8:	3307      	adds	r3, #7
    fffa:	08db      	lsrs	r3, r3, #3
    fffc:	00db      	lsls	r3, r3, #3
    fffe:	ebad 0d03 	sub.w	sp, sp, r3
   10002:	466b      	mov	r3, sp
   10004:	3307      	adds	r3, #7
   10006:	08db      	lsrs	r3, r3, #3
   10008:	00db      	lsls	r3, r3, #3
   1000a:	62bb      	str	r3, [r7, #40]	; 0x28
        state_size = 0; // indicate that we allocated using alloca
   1000c:	2300      	movs	r3, #0
   1000e:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    #endif

    INIT_CODESTATE(code_state, self, n_args, n_kw, args);
   10010:	6abb      	ldr	r3, [r7, #40]	; 0x28
   10012:	6a3a      	ldr	r2, [r7, #32]
   10014:	601a      	str	r2, [r3, #0]
   10016:	6abb      	ldr	r3, [r7, #40]	; 0x28
   10018:	2200      	movs	r2, #0
   1001a:	605a      	str	r2, [r3, #4]
   1001c:	683b      	ldr	r3, [r7, #0]
   1001e:	687a      	ldr	r2, [r7, #4]
   10020:	68b9      	ldr	r1, [r7, #8]
   10022:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   10024:	f00a fc3e 	bl	1a8a4 <mp_setup_code_state>
   10028:	f7ff fe1c 	bl	fc64 <mp_globals_get>
   1002c:	4602      	mov	r2, r0
   1002e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   10030:	611a      	str	r2, [r3, #16]

    // execute the byte code with the correct globals context
    mp_globals_set(self->globals);
   10032:	6a3b      	ldr	r3, [r7, #32]
   10034:	685b      	ldr	r3, [r3, #4]
   10036:	4618      	mov	r0, r3
   10038:	f7ff fe20 	bl	fc7c <mp_globals_set>
    mp_vm_return_kind_t vm_return_kind = mp_execute_bytecode(code_state, MP_OBJ_NULL);
   1003c:	2100      	movs	r1, #0
   1003e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   10040:	f009 fc96 	bl	19970 <mp_execute_bytecode>
   10044:	6178      	str	r0, [r7, #20]
    mp_globals_set(code_state->old_globals);
   10046:	6abb      	ldr	r3, [r7, #40]	; 0x28
   10048:	691b      	ldr	r3, [r3, #16]
   1004a:	4618      	mov	r0, r3
   1004c:	f7ff fe16 	bl	fc7c <mp_globals_set>
        }
    }
#endif

    mp_obj_t result;
    if (vm_return_kind == MP_VM_RETURN_NORMAL) {
   10050:	697b      	ldr	r3, [r7, #20]
   10052:	2b00      	cmp	r3, #0
   10054:	d104      	bne.n	10060 <fun_bc_call+0xcc>
        // return value is in *sp
        result = *code_state->sp;
   10056:	6abb      	ldr	r3, [r7, #40]	; 0x28
   10058:	689b      	ldr	r3, [r3, #8]
   1005a:	681b      	ldr	r3, [r3, #0]
   1005c:	627b      	str	r3, [r7, #36]	; 0x24
   1005e:	e011      	b.n	10084 <fun_bc_call+0xf0>
    } else {
        // must be an exception because normal functions can't yield
        assert(vm_return_kind == MP_VM_RETURN_EXCEPTION);
   10060:	697b      	ldr	r3, [r7, #20]
   10062:	2b02      	cmp	r3, #2
   10064:	d006      	beq.n	10074 <fun_bc_call+0xe0>
   10066:	4b10      	ldr	r3, [pc, #64]	; (100a8 <fun_bc_call+0x114>)
   10068:	4a10      	ldr	r2, [pc, #64]	; (100ac <fun_bc_call+0x118>)
   1006a:	f44f 719f 	mov.w	r1, #318	; 0x13e
   1006e:	4810      	ldr	r0, [pc, #64]	; (100b0 <fun_bc_call+0x11c>)
   10070:	f00b fb2e 	bl	1b6d0 <__assert_func>
        // return value is in fastn[0]==state[n_state - 1]
        result = code_state->state[n_state - 1];
   10074:	69fb      	ldr	r3, [r7, #28]
   10076:	3b01      	subs	r3, #1
   10078:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1007a:	3304      	adds	r3, #4
   1007c:	009b      	lsls	r3, r3, #2
   1007e:	4413      	add	r3, r2
   10080:	685b      	ldr	r3, [r3, #4]
   10082:	627b      	str	r3, [r7, #36]	; 0x24

    #if MICROPY_ENABLE_PYSTACK
    mp_pystack_free(code_state);
    #else
    // free the state if it was allocated on the heap
    if (state_size != 0) {
   10084:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   10086:	2b00      	cmp	r3, #0
   10088:	d002      	beq.n	10090 <fun_bc_call+0xfc>
        m_del_var(mp_code_state_t, byte, state_size, code_state);
   1008a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   1008c:	f7f0 f9c0 	bl	410 <m_free>
    }
    #endif

    if (vm_return_kind == MP_VM_RETURN_NORMAL) {
   10090:	697b      	ldr	r3, [r7, #20]
   10092:	2b00      	cmp	r3, #0
   10094:	d101      	bne.n	1009a <fun_bc_call+0x106>
        return result;
   10096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   10098:	e002      	b.n	100a0 <fun_bc_call+0x10c>
    } else { // MP_VM_RETURN_EXCEPTION
        nlr_raise(result);
   1009a:	6a78      	ldr	r0, [r7, #36]	; 0x24
   1009c:	f7f0 f920 	bl	2e0 <nlr_jump>
    }
}
   100a0:	4618      	mov	r0, r3
   100a2:	3730      	adds	r7, #48	; 0x30
   100a4:	46bd      	mov	sp, r7
   100a6:	bd80      	pop	{r7, pc}
   100a8:	00022a60 	.word	0x00022a60
   100ac:	00022b5c 	.word	0x00022b5c
   100b0:	0002285c 	.word	0x0002285c

000100b4 <mp_obj_new_fun_bc>:
#if MICROPY_PY_FUNCTION_ATTRS
    .attr = fun_bc_attr,
#endif
};

mp_obj_t mp_obj_new_fun_bc(mp_obj_t def_args_in, mp_obj_t def_kw_args, const byte *code, const mp_uint_t *const_table) {
   100b4:	b580      	push	{r7, lr}
   100b6:	b088      	sub	sp, #32
   100b8:	af00      	add	r7, sp, #0
   100ba:	60f8      	str	r0, [r7, #12]
   100bc:	60b9      	str	r1, [r7, #8]
   100be:	607a      	str	r2, [r7, #4]
   100c0:	603b      	str	r3, [r7, #0]
    size_t n_def_args = 0;
   100c2:	2300      	movs	r3, #0
   100c4:	61fb      	str	r3, [r7, #28]
    size_t n_extra_args = 0;
   100c6:	2300      	movs	r3, #0
   100c8:	61bb      	str	r3, [r7, #24]
    mp_obj_tuple_t *def_args = MP_OBJ_TO_PTR(def_args_in);
   100ca:	68fb      	ldr	r3, [r7, #12]
   100cc:	617b      	str	r3, [r7, #20]
    if (def_args_in != MP_OBJ_NULL) {
   100ce:	68fb      	ldr	r3, [r7, #12]
   100d0:	2b00      	cmp	r3, #0
   100d2:	d01a      	beq.n	1010a <mp_obj_new_fun_bc+0x56>
        assert(MP_OBJ_IS_TYPE(def_args_in, &mp_type_tuple));
   100d4:	68f8      	ldr	r0, [r7, #12]
   100d6:	f7ff fdb3 	bl	fc40 <MP_OBJ_IS_OBJ>
   100da:	4603      	mov	r3, r0
   100dc:	f083 0301 	eor.w	r3, r3, #1
   100e0:	b2db      	uxtb	r3, r3
   100e2:	2b00      	cmp	r3, #0
   100e4:	d104      	bne.n	100f0 <mp_obj_new_fun_bc+0x3c>
   100e6:	68fb      	ldr	r3, [r7, #12]
   100e8:	681b      	ldr	r3, [r3, #0]
   100ea:	4a23      	ldr	r2, [pc, #140]	; (10178 <mp_obj_new_fun_bc+0xc4>)
   100ec:	4293      	cmp	r3, r2
   100ee:	d006      	beq.n	100fe <mp_obj_new_fun_bc+0x4a>
   100f0:	4b22      	ldr	r3, [pc, #136]	; (1017c <mp_obj_new_fun_bc+0xc8>)
   100f2:	4a23      	ldr	r2, [pc, #140]	; (10180 <mp_obj_new_fun_bc+0xcc>)
   100f4:	f240 1171 	movw	r1, #369	; 0x171
   100f8:	4822      	ldr	r0, [pc, #136]	; (10184 <mp_obj_new_fun_bc+0xd0>)
   100fa:	f00b fae9 	bl	1b6d0 <__assert_func>
        n_def_args = def_args->len;
   100fe:	697b      	ldr	r3, [r7, #20]
   10100:	685b      	ldr	r3, [r3, #4]
   10102:	61fb      	str	r3, [r7, #28]
        n_extra_args = def_args->len;
   10104:	697b      	ldr	r3, [r7, #20]
   10106:	685b      	ldr	r3, [r3, #4]
   10108:	61bb      	str	r3, [r7, #24]
    }
    if (def_kw_args != MP_OBJ_NULL) {
   1010a:	68bb      	ldr	r3, [r7, #8]
   1010c:	2b00      	cmp	r3, #0
   1010e:	d002      	beq.n	10116 <mp_obj_new_fun_bc+0x62>
        n_extra_args += 1;
   10110:	69bb      	ldr	r3, [r7, #24]
   10112:	3301      	adds	r3, #1
   10114:	61bb      	str	r3, [r7, #24]
    }
    mp_obj_fun_bc_t *o = m_new_obj_var(mp_obj_fun_bc_t, mp_obj_t, n_extra_args);
   10116:	69bb      	ldr	r3, [r7, #24]
   10118:	3304      	adds	r3, #4
   1011a:	009b      	lsls	r3, r3, #2
   1011c:	4618      	mov	r0, r3
   1011e:	f7f0 f8fd 	bl	31c <m_malloc>
   10122:	6138      	str	r0, [r7, #16]
    o->base.type = &mp_type_fun_bc;
   10124:	693b      	ldr	r3, [r7, #16]
   10126:	4a18      	ldr	r2, [pc, #96]	; (10188 <mp_obj_new_fun_bc+0xd4>)
   10128:	601a      	str	r2, [r3, #0]
    o->globals = mp_globals_get();
   1012a:	f7ff fd9b 	bl	fc64 <mp_globals_get>
   1012e:	4602      	mov	r2, r0
   10130:	693b      	ldr	r3, [r7, #16]
   10132:	605a      	str	r2, [r3, #4]
    o->bytecode = code;
   10134:	693b      	ldr	r3, [r7, #16]
   10136:	687a      	ldr	r2, [r7, #4]
   10138:	609a      	str	r2, [r3, #8]
    o->const_table = const_table;
   1013a:	693b      	ldr	r3, [r7, #16]
   1013c:	683a      	ldr	r2, [r7, #0]
   1013e:	60da      	str	r2, [r3, #12]
    if (def_args != NULL) {
   10140:	697b      	ldr	r3, [r7, #20]
   10142:	2b00      	cmp	r3, #0
   10144:	d00a      	beq.n	1015c <mp_obj_new_fun_bc+0xa8>
        memcpy(o->extra_args, def_args->items, n_def_args * sizeof(mp_obj_t));
   10146:	693b      	ldr	r3, [r7, #16]
   10148:	f103 0010 	add.w	r0, r3, #16
   1014c:	697b      	ldr	r3, [r7, #20]
   1014e:	f103 0108 	add.w	r1, r3, #8
   10152:	69fb      	ldr	r3, [r7, #28]
   10154:	009b      	lsls	r3, r3, #2
   10156:	461a      	mov	r2, r3
   10158:	f00c fd8e 	bl	1cc78 <memcpy>
    }
    if (def_kw_args != MP_OBJ_NULL) {
   1015c:	68bb      	ldr	r3, [r7, #8]
   1015e:	2b00      	cmp	r3, #0
   10160:	d005      	beq.n	1016e <mp_obj_new_fun_bc+0xba>
        o->extra_args[n_def_args] = def_kw_args;
   10162:	693b      	ldr	r3, [r7, #16]
   10164:	69fa      	ldr	r2, [r7, #28]
   10166:	3204      	adds	r2, #4
   10168:	68b9      	ldr	r1, [r7, #8]
   1016a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    }
    return MP_OBJ_FROM_PTR(o);
   1016e:	693b      	ldr	r3, [r7, #16]
}
   10170:	4618      	mov	r0, r3
   10172:	3720      	adds	r7, #32
   10174:	46bd      	mov	sp, r7
   10176:	bd80      	pop	{r7, pc}
   10178:	00023d90 	.word	0x00023d90
   1017c:	00022ac8 	.word	0x00022ac8
   10180:	00022b68 	.word	0x00022b68
   10184:	0002285c 	.word	0x0002285c
   10188:	00022a8c 	.word	0x00022a8c

0001018c <MP_OBJ_IS_OBJ>:
   1018c:	b480      	push	{r7}
   1018e:	b083      	sub	sp, #12
   10190:	af00      	add	r7, sp, #0
   10192:	6078      	str	r0, [r7, #4]
   10194:	687b      	ldr	r3, [r7, #4]
   10196:	f003 0303 	and.w	r3, r3, #3
   1019a:	2b00      	cmp	r3, #0
   1019c:	bf0c      	ite	eq
   1019e:	2301      	moveq	r3, #1
   101a0:	2300      	movne	r3, #0
   101a2:	b2db      	uxtb	r3, r3
   101a4:	4618      	mov	r0, r3
   101a6:	370c      	adds	r7, #12
   101a8:	46bd      	mov	sp, r7
   101aa:	f85d 7b04 	ldr.w	r7, [sp], #4
   101ae:	4770      	bx	lr

000101b0 <mp_globals_get>:
static inline mp_obj_dict_t *mp_globals_get(void) { return MP_STATE_THREAD(dict_globals); }
   101b0:	b480      	push	{r7}
   101b2:	af00      	add	r7, sp, #0
   101b4:	4b03      	ldr	r3, [pc, #12]	; (101c4 <mp_globals_get+0x14>)
   101b6:	685b      	ldr	r3, [r3, #4]
   101b8:	4618      	mov	r0, r3
   101ba:	46bd      	mov	sp, r7
   101bc:	f85d 7b04 	ldr.w	r7, [sp], #4
   101c0:	4770      	bx	lr
   101c2:	bf00      	nop
   101c4:	200012f0 	.word	0x200012f0

000101c8 <mp_globals_set>:
static inline void mp_globals_set(mp_obj_dict_t *d) { MP_STATE_THREAD(dict_globals) = d; }
   101c8:	b480      	push	{r7}
   101ca:	b083      	sub	sp, #12
   101cc:	af00      	add	r7, sp, #0
   101ce:	6078      	str	r0, [r7, #4]
   101d0:	4a04      	ldr	r2, [pc, #16]	; (101e4 <mp_globals_set+0x1c>)
   101d2:	687b      	ldr	r3, [r7, #4]
   101d4:	6053      	str	r3, [r2, #4]
   101d6:	bf00      	nop
   101d8:	370c      	adds	r7, #12
   101da:	46bd      	mov	sp, r7
   101dc:	f85d 7b04 	ldr.w	r7, [sp], #4
   101e0:	4770      	bx	lr
   101e2:	bf00      	nop
   101e4:	200012f0 	.word	0x200012f0

000101e8 <gen_wrap_call>:
    mp_obj_base_t base;
    mp_obj_dict_t *globals;
    mp_code_state_t code_state;
} mp_obj_gen_instance_t;

STATIC mp_obj_t gen_wrap_call(mp_obj_t self_in, size_t n_args, size_t n_kw, const mp_obj_t *args) {
   101e8:	b580      	push	{r7, lr}
   101ea:	b08a      	sub	sp, #40	; 0x28
   101ec:	af00      	add	r7, sp, #0
   101ee:	60f8      	str	r0, [r7, #12]
   101f0:	60b9      	str	r1, [r7, #8]
   101f2:	607a      	str	r2, [r7, #4]
   101f4:	603b      	str	r3, [r7, #0]
    mp_obj_gen_wrap_t *self = MP_OBJ_TO_PTR(self_in);
   101f6:	68fb      	ldr	r3, [r7, #12]
   101f8:	627b      	str	r3, [r7, #36]	; 0x24
    mp_obj_fun_bc_t *self_fun = (mp_obj_fun_bc_t*)self->fun;
   101fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   101fc:	685b      	ldr	r3, [r3, #4]
   101fe:	623b      	str	r3, [r7, #32]
    assert(self_fun->base.type == &mp_type_fun_bc);
   10200:	6a3b      	ldr	r3, [r7, #32]
   10202:	681b      	ldr	r3, [r3, #0]
   10204:	4a1f      	ldr	r2, [pc, #124]	; (10284 <gen_wrap_call+0x9c>)
   10206:	4293      	cmp	r3, r2
   10208:	d005      	beq.n	10216 <gen_wrap_call+0x2e>
   1020a:	4b1f      	ldr	r3, [pc, #124]	; (10288 <gen_wrap_call+0xa0>)
   1020c:	4a1f      	ldr	r2, [pc, #124]	; (1028c <gen_wrap_call+0xa4>)
   1020e:	2136      	movs	r1, #54	; 0x36
   10210:	481f      	ldr	r0, [pc, #124]	; (10290 <gen_wrap_call+0xa8>)
   10212:	f00b fa5d 	bl	1b6d0 <__assert_func>

    // bytecode prelude: get state size and exception stack size
    size_t n_state = mp_decode_uint_value(self_fun->bytecode);
   10216:	6a3b      	ldr	r3, [r7, #32]
   10218:	689b      	ldr	r3, [r3, #8]
   1021a:	4618      	mov	r0, r3
   1021c:	f00a fb18 	bl	1a850 <mp_decode_uint_value>
   10220:	61f8      	str	r0, [r7, #28]
    size_t n_exc_stack = mp_decode_uint_value(mp_decode_uint_skip(self_fun->bytecode));
   10222:	6a3b      	ldr	r3, [r7, #32]
   10224:	689b      	ldr	r3, [r3, #8]
   10226:	4618      	mov	r0, r3
   10228:	f00a fb20 	bl	1a86c <mp_decode_uint_skip>
   1022c:	4603      	mov	r3, r0
   1022e:	4618      	mov	r0, r3
   10230:	f00a fb0e 	bl	1a850 <mp_decode_uint_value>
   10234:	61b8      	str	r0, [r7, #24]

    // allocate the generator object, with room for local stack and exception stack
    mp_obj_gen_instance_t *o = m_new_obj_var(mp_obj_gen_instance_t, byte,
   10236:	69ba      	ldr	r2, [r7, #24]
   10238:	4613      	mov	r3, r2
   1023a:	005b      	lsls	r3, r3, #1
   1023c:	441a      	add	r2, r3
   1023e:	69fb      	ldr	r3, [r7, #28]
   10240:	4413      	add	r3, r2
   10242:	3307      	adds	r3, #7
   10244:	009b      	lsls	r3, r3, #2
   10246:	4618      	mov	r0, r3
   10248:	f7f0 f868 	bl	31c <m_malloc>
   1024c:	6178      	str	r0, [r7, #20]
        n_state * sizeof(mp_obj_t) + n_exc_stack * sizeof(mp_exc_stack_t));
    o->base.type = &mp_type_gen_instance;
   1024e:	697b      	ldr	r3, [r7, #20]
   10250:	4a10      	ldr	r2, [pc, #64]	; (10294 <gen_wrap_call+0xac>)
   10252:	601a      	str	r2, [r3, #0]

    o->globals = self_fun->globals;
   10254:	6a3b      	ldr	r3, [r7, #32]
   10256:	685a      	ldr	r2, [r3, #4]
   10258:	697b      	ldr	r3, [r7, #20]
   1025a:	605a      	str	r2, [r3, #4]
    o->code_state.fun_bc = self_fun;
   1025c:	697b      	ldr	r3, [r7, #20]
   1025e:	6a3a      	ldr	r2, [r7, #32]
   10260:	609a      	str	r2, [r3, #8]
    o->code_state.ip = 0;
   10262:	697b      	ldr	r3, [r7, #20]
   10264:	2200      	movs	r2, #0
   10266:	60da      	str	r2, [r3, #12]
    mp_setup_code_state(&o->code_state, n_args, n_kw, args);
   10268:	697b      	ldr	r3, [r7, #20]
   1026a:	f103 0008 	add.w	r0, r3, #8
   1026e:	683b      	ldr	r3, [r7, #0]
   10270:	687a      	ldr	r2, [r7, #4]
   10272:	68b9      	ldr	r1, [r7, #8]
   10274:	f00a fb16 	bl	1a8a4 <mp_setup_code_state>
    return MP_OBJ_FROM_PTR(o);
   10278:	697b      	ldr	r3, [r7, #20]
}
   1027a:	4618      	mov	r0, r3
   1027c:	3728      	adds	r7, #40	; 0x28
   1027e:	46bd      	mov	sp, r7
   10280:	bd80      	pop	{r7, pc}
   10282:	bf00      	nop
   10284:	00022a8c 	.word	0x00022a8c
   10288:	00022b7c 	.word	0x00022b7c
   1028c:	00022d90 	.word	0x00022d90
   10290:	00022ba4 	.word	0x00022ba4
   10294:	00022d54 	.word	0x00022d54

00010298 <mp_obj_new_gen_wrap>:
    .name = MP_QSTR_generator,
    .call = gen_wrap_call,
    .unary_op = mp_generic_unary_op,
};

mp_obj_t mp_obj_new_gen_wrap(mp_obj_t fun) {
   10298:	b580      	push	{r7, lr}
   1029a:	b084      	sub	sp, #16
   1029c:	af00      	add	r7, sp, #0
   1029e:	6078      	str	r0, [r7, #4]
    mp_obj_gen_wrap_t *o = m_new_obj(mp_obj_gen_wrap_t);
   102a0:	2008      	movs	r0, #8
   102a2:	f7f0 f83b 	bl	31c <m_malloc>
   102a6:	60f8      	str	r0, [r7, #12]
    o->base.type = &mp_type_gen_wrap;
   102a8:	68fb      	ldr	r3, [r7, #12]
   102aa:	4a05      	ldr	r2, [pc, #20]	; (102c0 <mp_obj_new_gen_wrap+0x28>)
   102ac:	601a      	str	r2, [r3, #0]
    o->fun = MP_OBJ_TO_PTR(fun);
   102ae:	68fb      	ldr	r3, [r7, #12]
   102b0:	687a      	ldr	r2, [r7, #4]
   102b2:	605a      	str	r2, [r3, #4]
    return MP_OBJ_FROM_PTR(o);
   102b4:	68fb      	ldr	r3, [r7, #12]
}
   102b6:	4618      	mov	r0, r3
   102b8:	3710      	adds	r7, #16
   102ba:	46bd      	mov	sp, r7
   102bc:	bd80      	pop	{r7, pc}
   102be:	bf00      	nop
   102c0:	00022bbc 	.word	0x00022bbc

000102c4 <gen_instance_print>:

/******************************************************************************/
/* generator instance                                                         */

STATIC void gen_instance_print(const mp_print_t *print, mp_obj_t self_in, mp_print_kind_t kind) {
   102c4:	b580      	push	{r7, lr}
   102c6:	b086      	sub	sp, #24
   102c8:	af00      	add	r7, sp, #0
   102ca:	60f8      	str	r0, [r7, #12]
   102cc:	60b9      	str	r1, [r7, #8]
   102ce:	607a      	str	r2, [r7, #4]
    (void)kind;
    mp_obj_gen_instance_t *self = MP_OBJ_TO_PTR(self_in);
   102d0:	68bb      	ldr	r3, [r7, #8]
   102d2:	617b      	str	r3, [r7, #20]
    mp_printf(print, "<generator object '%q' at %p>", mp_obj_fun_get_name(MP_OBJ_FROM_PTR(self->code_state.fun_bc)), self);
   102d4:	697b      	ldr	r3, [r7, #20]
   102d6:	689b      	ldr	r3, [r3, #8]
   102d8:	4618      	mov	r0, r3
   102da:	f7ff fe35 	bl	ff48 <mp_obj_fun_get_name>
   102de:	4602      	mov	r2, r0
   102e0:	697b      	ldr	r3, [r7, #20]
   102e2:	4904      	ldr	r1, [pc, #16]	; (102f4 <gen_instance_print+0x30>)
   102e4:	68f8      	ldr	r0, [r7, #12]
   102e6:	f7f1 fe99 	bl	201c <mp_printf>
}
   102ea:	bf00      	nop
   102ec:	3718      	adds	r7, #24
   102ee:	46bd      	mov	sp, r7
   102f0:	bd80      	pop	{r7, pc}
   102f2:	bf00      	nop
   102f4:	00022bf8 	.word	0x00022bf8

000102f8 <mp_obj_gen_resume>:

mp_vm_return_kind_t mp_obj_gen_resume(mp_obj_t self_in, mp_obj_t send_value, mp_obj_t throw_value, mp_obj_t *ret_val) {
   102f8:	b580      	push	{r7, lr}
   102fa:	b088      	sub	sp, #32
   102fc:	af00      	add	r7, sp, #0
   102fe:	60f8      	str	r0, [r7, #12]
   10300:	60b9      	str	r1, [r7, #8]
   10302:	607a      	str	r2, [r7, #4]
   10304:	603b      	str	r3, [r7, #0]
    MP_STACK_CHECK();
    mp_check_self(MP_OBJ_IS_TYPE(self_in, &mp_type_gen_instance));
   10306:	68f8      	ldr	r0, [r7, #12]
   10308:	f7ff ff40 	bl	1018c <MP_OBJ_IS_OBJ>
   1030c:	4603      	mov	r3, r0
   1030e:	f083 0301 	eor.w	r3, r3, #1
   10312:	b2db      	uxtb	r3, r3
   10314:	2b00      	cmp	r3, #0
   10316:	d104      	bne.n	10322 <mp_obj_gen_resume+0x2a>
   10318:	68fb      	ldr	r3, [r7, #12]
   1031a:	681b      	ldr	r3, [r3, #0]
   1031c:	4a3b      	ldr	r2, [pc, #236]	; (1040c <mp_obj_gen_resume+0x114>)
   1031e:	4293      	cmp	r3, r2
   10320:	d005      	beq.n	1032e <mp_obj_gen_resume+0x36>
   10322:	4b3b      	ldr	r3, [pc, #236]	; (10410 <mp_obj_gen_resume+0x118>)
   10324:	4a3b      	ldr	r2, [pc, #236]	; (10414 <mp_obj_gen_resume+0x11c>)
   10326:	2161      	movs	r1, #97	; 0x61
   10328:	483b      	ldr	r0, [pc, #236]	; (10418 <mp_obj_gen_resume+0x120>)
   1032a:	f00b f9d1 	bl	1b6d0 <__assert_func>
    mp_obj_gen_instance_t *self = MP_OBJ_TO_PTR(self_in);
   1032e:	68fb      	ldr	r3, [r7, #12]
   10330:	61fb      	str	r3, [r7, #28]
    if (self->code_state.ip == 0) {
   10332:	69fb      	ldr	r3, [r7, #28]
   10334:	68db      	ldr	r3, [r3, #12]
   10336:	2b00      	cmp	r3, #0
   10338:	d104      	bne.n	10344 <mp_obj_gen_resume+0x4c>
        // Trying to resume already stopped generator
        *ret_val = MP_OBJ_STOP_ITERATION;
   1033a:	683b      	ldr	r3, [r7, #0]
   1033c:	2204      	movs	r2, #4
   1033e:	601a      	str	r2, [r3, #0]
        return MP_VM_RETURN_NORMAL;
   10340:	2300      	movs	r3, #0
   10342:	e05f      	b.n	10404 <mp_obj_gen_resume+0x10c>
    }
    if (self->code_state.sp == self->code_state.state - 1) {
   10344:	69fb      	ldr	r3, [r7, #28]
   10346:	691a      	ldr	r2, [r3, #16]
   10348:	69fb      	ldr	r3, [r7, #28]
   1034a:	331c      	adds	r3, #28
   1034c:	3b04      	subs	r3, #4
   1034e:	429a      	cmp	r2, r3
   10350:	d106      	bne.n	10360 <mp_obj_gen_resume+0x68>
        if (send_value != mp_const_none) {
   10352:	68bb      	ldr	r3, [r7, #8]
   10354:	4a31      	ldr	r2, [pc, #196]	; (1041c <mp_obj_gen_resume+0x124>)
   10356:	4293      	cmp	r3, r2
   10358:	d015      	beq.n	10386 <mp_obj_gen_resume+0x8e>
            mp_raise_TypeError("can't send non-None value to a just-started generator");
   1035a:	4831      	ldr	r0, [pc, #196]	; (10420 <mp_obj_gen_resume+0x128>)
   1035c:	f7fc ff4a 	bl	d1f4 <mp_raise_TypeError>
        }
    } else {
        #if MICROPY_PY_GENERATOR_PEND_THROW
        // If exception is pending (set using .pend_throw()), process it now.
        if (*self->code_state.sp != mp_const_none) {
   10360:	69fb      	ldr	r3, [r7, #28]
   10362:	691b      	ldr	r3, [r3, #16]
   10364:	681b      	ldr	r3, [r3, #0]
   10366:	4a2d      	ldr	r2, [pc, #180]	; (1041c <mp_obj_gen_resume+0x124>)
   10368:	4293      	cmp	r3, r2
   1036a:	d008      	beq.n	1037e <mp_obj_gen_resume+0x86>
            throw_value = *self->code_state.sp;
   1036c:	69fb      	ldr	r3, [r7, #28]
   1036e:	691b      	ldr	r3, [r3, #16]
   10370:	681b      	ldr	r3, [r3, #0]
   10372:	607b      	str	r3, [r7, #4]
            *self->code_state.sp = MP_OBJ_NULL;
   10374:	69fb      	ldr	r3, [r7, #28]
   10376:	691b      	ldr	r3, [r3, #16]
   10378:	2200      	movs	r2, #0
   1037a:	601a      	str	r2, [r3, #0]
   1037c:	e003      	b.n	10386 <mp_obj_gen_resume+0x8e>
        } else
        #endif
        {
            *self->code_state.sp = send_value;
   1037e:	69fb      	ldr	r3, [r7, #28]
   10380:	691b      	ldr	r3, [r3, #16]
   10382:	68ba      	ldr	r2, [r7, #8]
   10384:	601a      	str	r2, [r3, #0]
        }
    }
    mp_obj_dict_t *old_globals = mp_globals_get();
   10386:	f7ff ff13 	bl	101b0 <mp_globals_get>
   1038a:	61b8      	str	r0, [r7, #24]
    mp_globals_set(self->globals);
   1038c:	69fb      	ldr	r3, [r7, #28]
   1038e:	685b      	ldr	r3, [r3, #4]
   10390:	4618      	mov	r0, r3
   10392:	f7ff ff19 	bl	101c8 <mp_globals_set>
    mp_vm_return_kind_t ret_kind = mp_execute_bytecode(&self->code_state, throw_value);
   10396:	69fb      	ldr	r3, [r7, #28]
   10398:	3308      	adds	r3, #8
   1039a:	6879      	ldr	r1, [r7, #4]
   1039c:	4618      	mov	r0, r3
   1039e:	f009 fae7 	bl	19970 <mp_execute_bytecode>
   103a2:	6178      	str	r0, [r7, #20]
    mp_globals_set(old_globals);
   103a4:	69b8      	ldr	r0, [r7, #24]
   103a6:	f7ff ff0f 	bl	101c8 <mp_globals_set>

    switch (ret_kind) {
   103aa:	697b      	ldr	r3, [r7, #20]
   103ac:	2b01      	cmp	r3, #1
   103ae:	d00a      	beq.n	103c6 <mp_obj_gen_resume+0xce>
   103b0:	2b02      	cmp	r3, #2
   103b2:	d012      	beq.n	103da <mp_obj_gen_resume+0xe2>
            // Explicitly mark generator as completed. If we don't do this,
            // subsequent next() may re-execute statements after last yield
            // again and again, leading to side effects.
            // TODO: check how return with value behaves under such conditions
            // in CPython.
            self->code_state.ip = 0;
   103b4:	69fb      	ldr	r3, [r7, #28]
   103b6:	2200      	movs	r2, #0
   103b8:	60da      	str	r2, [r3, #12]
            *ret_val = *self->code_state.sp;
   103ba:	69fb      	ldr	r3, [r7, #28]
   103bc:	691b      	ldr	r3, [r3, #16]
   103be:	681a      	ldr	r2, [r3, #0]
   103c0:	683b      	ldr	r3, [r7, #0]
   103c2:	601a      	str	r2, [r3, #0]
            break;
   103c4:	e01d      	b.n	10402 <mp_obj_gen_resume+0x10a>

        case MP_VM_RETURN_YIELD:
            *ret_val = *self->code_state.sp;
   103c6:	69fb      	ldr	r3, [r7, #28]
   103c8:	691b      	ldr	r3, [r3, #16]
   103ca:	681a      	ldr	r2, [r3, #0]
   103cc:	683b      	ldr	r3, [r7, #0]
   103ce:	601a      	str	r2, [r3, #0]
            #if MICROPY_PY_GENERATOR_PEND_THROW
            *self->code_state.sp = mp_const_none;
   103d0:	69fb      	ldr	r3, [r7, #28]
   103d2:	691b      	ldr	r3, [r3, #16]
   103d4:	4a11      	ldr	r2, [pc, #68]	; (1041c <mp_obj_gen_resume+0x124>)
   103d6:	601a      	str	r2, [r3, #0]
            #endif
            break;
   103d8:	e013      	b.n	10402 <mp_obj_gen_resume+0x10a>

        case MP_VM_RETURN_EXCEPTION: {
            size_t n_state = mp_decode_uint_value(self->code_state.fun_bc->bytecode);
   103da:	69fb      	ldr	r3, [r7, #28]
   103dc:	689b      	ldr	r3, [r3, #8]
   103de:	689b      	ldr	r3, [r3, #8]
   103e0:	4618      	mov	r0, r3
   103e2:	f00a fa35 	bl	1a850 <mp_decode_uint_value>
   103e6:	6138      	str	r0, [r7, #16]
            self->code_state.ip = 0;
   103e8:	69fb      	ldr	r3, [r7, #28]
   103ea:	2200      	movs	r2, #0
   103ec:	60da      	str	r2, [r3, #12]
            *ret_val = self->code_state.state[n_state - 1];
   103ee:	693b      	ldr	r3, [r7, #16]
   103f0:	3b01      	subs	r3, #1
   103f2:	69fa      	ldr	r2, [r7, #28]
   103f4:	3306      	adds	r3, #6
   103f6:	009b      	lsls	r3, r3, #2
   103f8:	4413      	add	r3, r2
   103fa:	685a      	ldr	r2, [r3, #4]
   103fc:	683b      	ldr	r3, [r7, #0]
   103fe:	601a      	str	r2, [r3, #0]
            break;
   10400:	bf00      	nop
        }
    }

    return ret_kind;
   10402:	697b      	ldr	r3, [r7, #20]
}
   10404:	4618      	mov	r0, r3
   10406:	3720      	adds	r7, #32
   10408:	46bd      	mov	sp, r7
   1040a:	bd80      	pop	{r7, pc}
   1040c:	00022d54 	.word	0x00022d54
   10410:	00022c18 	.word	0x00022c18
   10414:	00022da0 	.word	0x00022da0
   10418:	00022ba4 	.word	0x00022ba4
   1041c:	0002345c 	.word	0x0002345c
   10420:	00022c7c 	.word	0x00022c7c

00010424 <gen_resume_and_raise>:

STATIC mp_obj_t gen_resume_and_raise(mp_obj_t self_in, mp_obj_t send_value, mp_obj_t throw_value) {
   10424:	b580      	push	{r7, lr}
   10426:	b086      	sub	sp, #24
   10428:	af00      	add	r7, sp, #0
   1042a:	60f8      	str	r0, [r7, #12]
   1042c:	60b9      	str	r1, [r7, #8]
   1042e:	607a      	str	r2, [r7, #4]
    mp_obj_t ret;
    switch (mp_obj_gen_resume(self_in, send_value, throw_value, &ret)) {
   10430:	f107 0310 	add.w	r3, r7, #16
   10434:	687a      	ldr	r2, [r7, #4]
   10436:	68b9      	ldr	r1, [r7, #8]
   10438:	68f8      	ldr	r0, [r7, #12]
   1043a:	f7ff ff5d 	bl	102f8 <mp_obj_gen_resume>
   1043e:	4603      	mov	r3, r0
   10440:	2b01      	cmp	r3, #1
   10442:	d015      	beq.n	10470 <gen_resume_and_raise+0x4c>
   10444:	2b02      	cmp	r3, #2
   10446:	d015      	beq.n	10474 <gen_resume_and_raise+0x50>
        case MP_VM_RETURN_NORMAL:
        default:
            // Optimize return w/o value in case generator is used in for loop
            if (ret == mp_const_none || ret == MP_OBJ_STOP_ITERATION) {
   10448:	693b      	ldr	r3, [r7, #16]
   1044a:	4a1a      	ldr	r2, [pc, #104]	; (104b4 <gen_resume_and_raise+0x90>)
   1044c:	4293      	cmp	r3, r2
   1044e:	d002      	beq.n	10456 <gen_resume_and_raise+0x32>
   10450:	693b      	ldr	r3, [r7, #16]
   10452:	2b04      	cmp	r3, #4
   10454:	d101      	bne.n	1045a <gen_resume_and_raise+0x36>
                return MP_OBJ_STOP_ITERATION;
   10456:	2304      	movs	r3, #4
   10458:	e027      	b.n	104aa <gen_resume_and_raise+0x86>
            } else {
                nlr_raise(mp_obj_new_exception_args(&mp_type_StopIteration, 1, &ret));
   1045a:	f107 0310 	add.w	r3, r7, #16
   1045e:	461a      	mov	r2, r3
   10460:	2101      	movs	r1, #1
   10462:	4815      	ldr	r0, [pc, #84]	; (104b8 <gen_resume_and_raise+0x94>)
   10464:	f7ff f98c 	bl	f780 <mp_obj_new_exception_args>
   10468:	4603      	mov	r3, r0
   1046a:	4618      	mov	r0, r3
   1046c:	f7ef ff38 	bl	2e0 <nlr_jump>
            }

        case MP_VM_RETURN_YIELD:
            return ret;
   10470:	693b      	ldr	r3, [r7, #16]
   10472:	e01a      	b.n	104aa <gen_resume_and_raise+0x86>

        case MP_VM_RETURN_EXCEPTION:
            // TODO: Optimization of returning MP_OBJ_STOP_ITERATION is really part
            // of mp_iternext() protocol, but this function is called by other methods
            // too, which may not handled MP_OBJ_STOP_ITERATION.
            if (mp_obj_is_subclass_fast(MP_OBJ_FROM_PTR(mp_obj_get_type(ret)), MP_OBJ_FROM_PTR(&mp_type_StopIteration))) {
   10474:	693b      	ldr	r3, [r7, #16]
   10476:	4618      	mov	r0, r3
   10478:	f7fd fb1c 	bl	dab4 <mp_obj_get_type>
   1047c:	4603      	mov	r3, r0
   1047e:	490e      	ldr	r1, [pc, #56]	; (104b8 <gen_resume_and_raise+0x94>)
   10480:	4618      	mov	r0, r3
   10482:	f007 f86f 	bl	17564 <mp_obj_is_subclass_fast>
   10486:	4603      	mov	r3, r0
   10488:	2b00      	cmp	r3, #0
   1048a:	d00a      	beq.n	104a2 <gen_resume_and_raise+0x7e>
                mp_obj_t val = mp_obj_exception_get_value(ret);
   1048c:	693b      	ldr	r3, [r7, #16]
   1048e:	4618      	mov	r0, r3
   10490:	f7ff f902 	bl	f698 <mp_obj_exception_get_value>
   10494:	6178      	str	r0, [r7, #20]
                if (val == mp_const_none) {
   10496:	697b      	ldr	r3, [r7, #20]
   10498:	4a06      	ldr	r2, [pc, #24]	; (104b4 <gen_resume_and_raise+0x90>)
   1049a:	4293      	cmp	r3, r2
   1049c:	d101      	bne.n	104a2 <gen_resume_and_raise+0x7e>
                    return MP_OBJ_STOP_ITERATION;
   1049e:	2304      	movs	r3, #4
   104a0:	e003      	b.n	104aa <gen_resume_and_raise+0x86>
                }
            }
            nlr_raise(ret);
   104a2:	693b      	ldr	r3, [r7, #16]
   104a4:	4618      	mov	r0, r3
   104a6:	f7ef ff1b 	bl	2e0 <nlr_jump>
    }
}
   104aa:	4618      	mov	r0, r3
   104ac:	3718      	adds	r7, #24
   104ae:	46bd      	mov	sp, r7
   104b0:	bd80      	pop	{r7, pc}
   104b2:	bf00      	nop
   104b4:	0002345c 	.word	0x0002345c
   104b8:	00022260 	.word	0x00022260

000104bc <gen_instance_iternext>:

STATIC mp_obj_t gen_instance_iternext(mp_obj_t self_in) {
   104bc:	b580      	push	{r7, lr}
   104be:	b082      	sub	sp, #8
   104c0:	af00      	add	r7, sp, #0
   104c2:	6078      	str	r0, [r7, #4]
    return gen_resume_and_raise(self_in, mp_const_none, MP_OBJ_NULL);
   104c4:	2200      	movs	r2, #0
   104c6:	4904      	ldr	r1, [pc, #16]	; (104d8 <gen_instance_iternext+0x1c>)
   104c8:	6878      	ldr	r0, [r7, #4]
   104ca:	f7ff ffab 	bl	10424 <gen_resume_and_raise>
   104ce:	4603      	mov	r3, r0
}
   104d0:	4618      	mov	r0, r3
   104d2:	3708      	adds	r7, #8
   104d4:	46bd      	mov	sp, r7
   104d6:	bd80      	pop	{r7, pc}
   104d8:	0002345c 	.word	0x0002345c

000104dc <gen_instance_send>:

STATIC mp_obj_t gen_instance_send(mp_obj_t self_in, mp_obj_t send_value) {
   104dc:	b580      	push	{r7, lr}
   104de:	b084      	sub	sp, #16
   104e0:	af00      	add	r7, sp, #0
   104e2:	6078      	str	r0, [r7, #4]
   104e4:	6039      	str	r1, [r7, #0]
    mp_obj_t ret = gen_resume_and_raise(self_in, send_value, MP_OBJ_NULL);
   104e6:	2200      	movs	r2, #0
   104e8:	6839      	ldr	r1, [r7, #0]
   104ea:	6878      	ldr	r0, [r7, #4]
   104ec:	f7ff ff9a 	bl	10424 <gen_resume_and_raise>
   104f0:	60f8      	str	r0, [r7, #12]
    if (ret == MP_OBJ_STOP_ITERATION) {
   104f2:	68fb      	ldr	r3, [r7, #12]
   104f4:	2b04      	cmp	r3, #4
   104f6:	d106      	bne.n	10506 <gen_instance_send+0x2a>
        nlr_raise(mp_obj_new_exception(&mp_type_StopIteration));
   104f8:	4805      	ldr	r0, [pc, #20]	; (10510 <gen_instance_send+0x34>)
   104fa:	f7ff f923 	bl	f744 <mp_obj_new_exception>
   104fe:	4603      	mov	r3, r0
   10500:	4618      	mov	r0, r3
   10502:	f7ef feed 	bl	2e0 <nlr_jump>
    } else {
        return ret;
   10506:	68fb      	ldr	r3, [r7, #12]
    }
}
   10508:	4618      	mov	r0, r3
   1050a:	3710      	adds	r7, #16
   1050c:	46bd      	mov	sp, r7
   1050e:	bd80      	pop	{r7, pc}
   10510:	00022260 	.word	0x00022260

00010514 <gen_instance_throw>:

STATIC MP_DEFINE_CONST_FUN_OBJ_2(gen_instance_send_obj, gen_instance_send);

STATIC mp_obj_t gen_instance_close(mp_obj_t self_in);
STATIC mp_obj_t gen_instance_throw(size_t n_args, const mp_obj_t *args) {
   10514:	b580      	push	{r7, lr}
   10516:	b084      	sub	sp, #16
   10518:	af00      	add	r7, sp, #0
   1051a:	6078      	str	r0, [r7, #4]
   1051c:	6039      	str	r1, [r7, #0]
    mp_obj_t exc = (n_args == 2) ? args[1] : args[2];
   1051e:	687b      	ldr	r3, [r7, #4]
   10520:	2b02      	cmp	r3, #2
   10522:	d102      	bne.n	1052a <gen_instance_throw+0x16>
   10524:	683b      	ldr	r3, [r7, #0]
   10526:	685b      	ldr	r3, [r3, #4]
   10528:	e001      	b.n	1052e <gen_instance_throw+0x1a>
   1052a:	683b      	ldr	r3, [r7, #0]
   1052c:	689b      	ldr	r3, [r3, #8]
   1052e:	60fb      	str	r3, [r7, #12]

    mp_obj_t ret = gen_resume_and_raise(args[0], mp_const_none, exc);
   10530:	683b      	ldr	r3, [r7, #0]
   10532:	681b      	ldr	r3, [r3, #0]
   10534:	68fa      	ldr	r2, [r7, #12]
   10536:	490a      	ldr	r1, [pc, #40]	; (10560 <gen_instance_throw+0x4c>)
   10538:	4618      	mov	r0, r3
   1053a:	f7ff ff73 	bl	10424 <gen_resume_and_raise>
   1053e:	60b8      	str	r0, [r7, #8]
    if (ret == MP_OBJ_STOP_ITERATION) {
   10540:	68bb      	ldr	r3, [r7, #8]
   10542:	2b04      	cmp	r3, #4
   10544:	d106      	bne.n	10554 <gen_instance_throw+0x40>
        nlr_raise(mp_obj_new_exception(&mp_type_StopIteration));
   10546:	4807      	ldr	r0, [pc, #28]	; (10564 <gen_instance_throw+0x50>)
   10548:	f7ff f8fc 	bl	f744 <mp_obj_new_exception>
   1054c:	4603      	mov	r3, r0
   1054e:	4618      	mov	r0, r3
   10550:	f7ef fec6 	bl	2e0 <nlr_jump>
    } else {
        return ret;
   10554:	68bb      	ldr	r3, [r7, #8]
    }
}
   10556:	4618      	mov	r0, r3
   10558:	3710      	adds	r7, #16
   1055a:	46bd      	mov	sp, r7
   1055c:	bd80      	pop	{r7, pc}
   1055e:	bf00      	nop
   10560:	0002345c 	.word	0x0002345c
   10564:	00022260 	.word	0x00022260

00010568 <gen_instance_close>:

STATIC MP_DEFINE_CONST_FUN_OBJ_VAR_BETWEEN(gen_instance_throw_obj, 2, 4, gen_instance_throw);

STATIC mp_obj_t gen_instance_close(mp_obj_t self_in) {
   10568:	b580      	push	{r7, lr}
   1056a:	b084      	sub	sp, #16
   1056c:	af00      	add	r7, sp, #0
   1056e:	6078      	str	r0, [r7, #4]
    mp_obj_t ret;
    switch (mp_obj_gen_resume(self_in, mp_const_none, MP_OBJ_FROM_PTR(&mp_const_GeneratorExit_obj), &ret)) {
   10570:	f107 030c 	add.w	r3, r7, #12
   10574:	4a18      	ldr	r2, [pc, #96]	; (105d8 <gen_instance_close+0x70>)
   10576:	4919      	ldr	r1, [pc, #100]	; (105dc <gen_instance_close+0x74>)
   10578:	6878      	ldr	r0, [r7, #4]
   1057a:	f7ff febd 	bl	102f8 <mp_obj_gen_resume>
   1057e:	4603      	mov	r3, r0
   10580:	2b01      	cmp	r3, #1
   10582:	d002      	beq.n	1058a <gen_instance_close+0x22>
   10584:	2b02      	cmp	r3, #2
   10586:	d004      	beq.n	10592 <gen_instance_close+0x2a>
   10588:	e021      	b.n	105ce <gen_instance_close+0x66>
        case MP_VM_RETURN_YIELD:
            mp_raise_msg(&mp_type_RuntimeError, "generator ignored GeneratorExit");
   1058a:	4915      	ldr	r1, [pc, #84]	; (105e0 <gen_instance_close+0x78>)
   1058c:	4815      	ldr	r0, [pc, #84]	; (105e4 <gen_instance_close+0x7c>)
   1058e:	f7fc fe0f 	bl	d1b0 <mp_raise_msg>

        // Swallow StopIteration & GeneratorExit (== successful close), and re-raise any other
        case MP_VM_RETURN_EXCEPTION:
            // ret should always be an instance of an exception class
            if (mp_obj_is_subclass_fast(MP_OBJ_FROM_PTR(mp_obj_get_type(ret)), MP_OBJ_FROM_PTR(&mp_type_GeneratorExit)) ||
   10592:	68fb      	ldr	r3, [r7, #12]
   10594:	4618      	mov	r0, r3
   10596:	f7fd fa8d 	bl	dab4 <mp_obj_get_type>
   1059a:	4603      	mov	r3, r0
   1059c:	4912      	ldr	r1, [pc, #72]	; (105e8 <gen_instance_close+0x80>)
   1059e:	4618      	mov	r0, r3
   105a0:	f006 ffe0 	bl	17564 <mp_obj_is_subclass_fast>
   105a4:	4603      	mov	r3, r0
   105a6:	2b00      	cmp	r3, #0
   105a8:	d10b      	bne.n	105c2 <gen_instance_close+0x5a>
                mp_obj_is_subclass_fast(MP_OBJ_FROM_PTR(mp_obj_get_type(ret)), MP_OBJ_FROM_PTR(&mp_type_StopIteration))) {
   105aa:	68fb      	ldr	r3, [r7, #12]
   105ac:	4618      	mov	r0, r3
   105ae:	f7fd fa81 	bl	dab4 <mp_obj_get_type>
   105b2:	4603      	mov	r3, r0
   105b4:	490d      	ldr	r1, [pc, #52]	; (105ec <gen_instance_close+0x84>)
   105b6:	4618      	mov	r0, r3
   105b8:	f006 ffd4 	bl	17564 <mp_obj_is_subclass_fast>
   105bc:	4603      	mov	r3, r0
            if (mp_obj_is_subclass_fast(MP_OBJ_FROM_PTR(mp_obj_get_type(ret)), MP_OBJ_FROM_PTR(&mp_type_GeneratorExit)) ||
   105be:	2b00      	cmp	r3, #0
   105c0:	d001      	beq.n	105c6 <gen_instance_close+0x5e>
                return mp_const_none;
   105c2:	4b06      	ldr	r3, [pc, #24]	; (105dc <gen_instance_close+0x74>)
   105c4:	e004      	b.n	105d0 <gen_instance_close+0x68>
            }
            nlr_raise(ret);
   105c6:	68fb      	ldr	r3, [r7, #12]
   105c8:	4618      	mov	r0, r3
   105ca:	f7ef fe89 	bl	2e0 <nlr_jump>

        default:
            // The only choice left is MP_VM_RETURN_NORMAL which is successful close
            return mp_const_none;
   105ce:	4b03      	ldr	r3, [pc, #12]	; (105dc <gen_instance_close+0x74>)
    }
}
   105d0:	4618      	mov	r0, r3
   105d2:	3710      	adds	r7, #16
   105d4:	46bd      	mov	sp, r7
   105d6:	bd80      	pop	{r7, pc}
   105d8:	0002211c 	.word	0x0002211c
   105dc:	0002345c 	.word	0x0002345c
   105e0:	00022cc8 	.word	0x00022cc8
   105e4:	000225a8 	.word	0x000225a8
   105e8:	000221e8 	.word	0x000221e8
   105ec:	00022260 	.word	0x00022260

000105f0 <gen_instance_pend_throw>:

STATIC MP_DEFINE_CONST_FUN_OBJ_1(gen_instance_close_obj, gen_instance_close);

STATIC mp_obj_t gen_instance_pend_throw(mp_obj_t self_in, mp_obj_t exc_in) {
   105f0:	b580      	push	{r7, lr}
   105f2:	b084      	sub	sp, #16
   105f4:	af00      	add	r7, sp, #0
   105f6:	6078      	str	r0, [r7, #4]
   105f8:	6039      	str	r1, [r7, #0]
    mp_obj_gen_instance_t *self = MP_OBJ_TO_PTR(self_in);
   105fa:	687b      	ldr	r3, [r7, #4]
   105fc:	60fb      	str	r3, [r7, #12]
    if (self->code_state.sp == self->code_state.state - 1) {
   105fe:	68fb      	ldr	r3, [r7, #12]
   10600:	691a      	ldr	r2, [r3, #16]
   10602:	68fb      	ldr	r3, [r7, #12]
   10604:	331c      	adds	r3, #28
   10606:	3b04      	subs	r3, #4
   10608:	429a      	cmp	r2, r3
   1060a:	d102      	bne.n	10612 <gen_instance_pend_throw+0x22>
        mp_raise_TypeError("can't pend throw to just-started generator");
   1060c:	4807      	ldr	r0, [pc, #28]	; (1062c <gen_instance_pend_throw+0x3c>)
   1060e:	f7fc fdf1 	bl	d1f4 <mp_raise_TypeError>
    }
    mp_obj_t prev = *self->code_state.sp;
   10612:	68fb      	ldr	r3, [r7, #12]
   10614:	691b      	ldr	r3, [r3, #16]
   10616:	681b      	ldr	r3, [r3, #0]
   10618:	60bb      	str	r3, [r7, #8]
    *self->code_state.sp = exc_in;
   1061a:	68fb      	ldr	r3, [r7, #12]
   1061c:	691b      	ldr	r3, [r3, #16]
   1061e:	683a      	ldr	r2, [r7, #0]
   10620:	601a      	str	r2, [r3, #0]
    return prev;
   10622:	68bb      	ldr	r3, [r7, #8]
}
   10624:	4618      	mov	r0, r3
   10626:	3710      	adds	r7, #16
   10628:	46bd      	mov	sp, r7
   1062a:	bd80      	pop	{r7, pc}
   1062c:	00022cf0 	.word	0x00022cf0

00010630 <it_iternext>:
typedef struct _mp_obj_getitem_iter_t {
    mp_obj_base_t base;
    mp_obj_t args[3];
} mp_obj_getitem_iter_t;

STATIC mp_obj_t it_iternext(mp_obj_t self_in) {
   10630:	b580      	push	{r7, lr}
   10632:	b092      	sub	sp, #72	; 0x48
   10634:	af00      	add	r7, sp, #0
   10636:	6078      	str	r0, [r7, #4]
    mp_obj_getitem_iter_t *self = MP_OBJ_TO_PTR(self_in);
   10638:	687b      	ldr	r3, [r7, #4]
   1063a:	647b      	str	r3, [r7, #68]	; 0x44
    nlr_buf_t nlr;
    if (nlr_push(&nlr) == 0) {
   1063c:	f107 030c 	add.w	r3, r7, #12
   10640:	4618      	mov	r0, r3
   10642:	f7ef fe3b 	bl	2bc <nlr_push>
   10646:	4603      	mov	r3, r0
   10648:	2b00      	cmp	r3, #0
   1064a:	d115      	bne.n	10678 <it_iternext+0x48>
        // try to get next item
        mp_obj_t value = mp_call_method_n_kw(1, 0, self->args);
   1064c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   1064e:	3304      	adds	r3, #4
   10650:	461a      	mov	r2, r3
   10652:	2100      	movs	r1, #0
   10654:	2001      	movs	r0, #1
   10656:	f7fb fd27 	bl	c0a8 <mp_call_method_n_kw>
   1065a:	6438      	str	r0, [r7, #64]	; 0x40
        self->args[2] = MP_OBJ_NEW_SMALL_INT(MP_OBJ_SMALL_INT_VALUE(self->args[2]) + 1);
   1065c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   1065e:	68db      	ldr	r3, [r3, #12]
   10660:	105b      	asrs	r3, r3, #1
   10662:	3301      	adds	r3, #1
   10664:	005b      	lsls	r3, r3, #1
   10666:	f043 0301 	orr.w	r3, r3, #1
   1066a:	461a      	mov	r2, r3
   1066c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   1066e:	60da      	str	r2, [r3, #12]
        nlr_pop();
   10670:	f7ef fe12 	bl	298 <nlr_pop>
        return value;
   10674:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   10676:	e010      	b.n	1069a <it_iternext+0x6a>
    } else {
        // an exception was raised
        mp_obj_type_t *t = (mp_obj_type_t*)((mp_obj_base_t*)nlr.ret_val)->type;
   10678:	693b      	ldr	r3, [r7, #16]
   1067a:	681b      	ldr	r3, [r3, #0]
   1067c:	63fb      	str	r3, [r7, #60]	; 0x3c
        if (t == &mp_type_StopIteration || t == &mp_type_IndexError) {
   1067e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   10680:	4a08      	ldr	r2, [pc, #32]	; (106a4 <it_iternext+0x74>)
   10682:	4293      	cmp	r3, r2
   10684:	d003      	beq.n	1068e <it_iternext+0x5e>
   10686:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   10688:	4a07      	ldr	r2, [pc, #28]	; (106a8 <it_iternext+0x78>)
   1068a:	4293      	cmp	r3, r2
   1068c:	d101      	bne.n	10692 <it_iternext+0x62>
            // return MP_OBJ_STOP_ITERATION instead of raising
            return MP_OBJ_STOP_ITERATION;
   1068e:	2304      	movs	r3, #4
   10690:	e003      	b.n	1069a <it_iternext+0x6a>
        } else {
            // re-raise exception
            nlr_jump(nlr.ret_val);
   10692:	693b      	ldr	r3, [r7, #16]
   10694:	4618      	mov	r0, r3
   10696:	f7ef fe23 	bl	2e0 <nlr_jump>
        }
    }
}
   1069a:	4618      	mov	r0, r3
   1069c:	3748      	adds	r7, #72	; 0x48
   1069e:	46bd      	mov	sp, r7
   106a0:	bd80      	pop	{r7, pc}
   106a2:	bf00      	nop
   106a4:	00022260 	.word	0x00022260
   106a8:	0002247c 	.word	0x0002247c

000106ac <mp_obj_new_getitem_iter>:
    .getiter = mp_identity_getiter,
    .iternext = it_iternext,
};

// args are those returned from mp_load_method_maybe (ie either an attribute or a method)
mp_obj_t mp_obj_new_getitem_iter(mp_obj_t *args, mp_obj_iter_buf_t *iter_buf) {
   106ac:	b480      	push	{r7}
   106ae:	b085      	sub	sp, #20
   106b0:	af00      	add	r7, sp, #0
   106b2:	6078      	str	r0, [r7, #4]
   106b4:	6039      	str	r1, [r7, #0]
    assert(sizeof(mp_obj_getitem_iter_t) <= sizeof(mp_obj_iter_buf_t));
    mp_obj_getitem_iter_t *o = (mp_obj_getitem_iter_t*)iter_buf;
   106b6:	683b      	ldr	r3, [r7, #0]
   106b8:	60fb      	str	r3, [r7, #12]
    o->base.type = &it_type;
   106ba:	68fb      	ldr	r3, [r7, #12]
   106bc:	4a09      	ldr	r2, [pc, #36]	; (106e4 <mp_obj_new_getitem_iter+0x38>)
   106be:	601a      	str	r2, [r3, #0]
    o->args[0] = args[0];
   106c0:	687b      	ldr	r3, [r7, #4]
   106c2:	681a      	ldr	r2, [r3, #0]
   106c4:	68fb      	ldr	r3, [r7, #12]
   106c6:	605a      	str	r2, [r3, #4]
    o->args[1] = args[1];
   106c8:	687b      	ldr	r3, [r7, #4]
   106ca:	685a      	ldr	r2, [r3, #4]
   106cc:	68fb      	ldr	r3, [r7, #12]
   106ce:	609a      	str	r2, [r3, #8]
    o->args[2] = MP_OBJ_NEW_SMALL_INT(0);
   106d0:	68fb      	ldr	r3, [r7, #12]
   106d2:	2201      	movs	r2, #1
   106d4:	60da      	str	r2, [r3, #12]
    return MP_OBJ_FROM_PTR(o);
   106d6:	68fb      	ldr	r3, [r7, #12]
}
   106d8:	4618      	mov	r0, r3
   106da:	3714      	adds	r7, #20
   106dc:	46bd      	mov	sp, r7
   106de:	f85d 7b04 	ldr.w	r7, [sp], #4
   106e2:	4770      	bx	lr
   106e4:	00022db4 	.word	0x00022db4

000106e8 <MP_OBJ_IS_SMALL_INT>:
    { return ((((mp_int_t)(o)) & 1) != 0); }
   106e8:	b480      	push	{r7}
   106ea:	b083      	sub	sp, #12
   106ec:	af00      	add	r7, sp, #0
   106ee:	6078      	str	r0, [r7, #4]
   106f0:	687b      	ldr	r3, [r7, #4]
   106f2:	f003 0301 	and.w	r3, r3, #1
   106f6:	2b00      	cmp	r3, #0
   106f8:	bf14      	ite	ne
   106fa:	2301      	movne	r3, #1
   106fc:	2300      	moveq	r3, #0
   106fe:	b2db      	uxtb	r3, r3
   10700:	4618      	mov	r0, r3
   10702:	370c      	adds	r7, #12
   10704:	46bd      	mov	sp, r7
   10706:	f85d 7b04 	ldr.w	r7, [sp], #4
   1070a:	4770      	bx	lr

0001070c <MP_OBJ_IS_QSTR>:
    { return ((((mp_int_t)(o)) & 3) == 2); }
   1070c:	b480      	push	{r7}
   1070e:	b083      	sub	sp, #12
   10710:	af00      	add	r7, sp, #0
   10712:	6078      	str	r0, [r7, #4]
   10714:	687b      	ldr	r3, [r7, #4]
   10716:	f003 0303 	and.w	r3, r3, #3
   1071a:	2b02      	cmp	r3, #2
   1071c:	bf0c      	ite	eq
   1071e:	2301      	moveq	r3, #1
   10720:	2300      	movne	r3, #0
   10722:	b2db      	uxtb	r3, r3
   10724:	4618      	mov	r0, r3
   10726:	370c      	adds	r7, #12
   10728:	46bd      	mov	sp, r7
   1072a:	f85d 7b04 	ldr.w	r7, [sp], #4
   1072e:	4770      	bx	lr

00010730 <MP_OBJ_IS_OBJ>:
    { return ((((mp_int_t)(o)) & 3) == 0); }
   10730:	b480      	push	{r7}
   10732:	b083      	sub	sp, #12
   10734:	af00      	add	r7, sp, #0
   10736:	6078      	str	r0, [r7, #4]
   10738:	687b      	ldr	r3, [r7, #4]
   1073a:	f003 0303 	and.w	r3, r3, #3
   1073e:	2b00      	cmp	r3, #0
   10740:	bf0c      	ite	eq
   10742:	2301      	moveq	r3, #1
   10744:	2300      	movne	r3, #0
   10746:	b2db      	uxtb	r3, r3
   10748:	4618      	mov	r0, r3
   1074a:	370c      	adds	r7, #12
   1074c:	46bd      	mov	sp, r7
   1074e:	f85d 7b04 	ldr.w	r7, [sp], #4
   10752:	4770      	bx	lr

00010754 <mp_obj_int_make_new>:
#if MICROPY_PY_BUILTINS_FLOAT
#include <math.h>
#endif

// This dispatcher function is expected to be independent of the implementation of long int
STATIC mp_obj_t mp_obj_int_make_new(const mp_obj_type_t *type_in, size_t n_args, size_t n_kw, const mp_obj_t *args) {
   10754:	b590      	push	{r4, r7, lr}
   10756:	b08b      	sub	sp, #44	; 0x2c
   10758:	af02      	add	r7, sp, #8
   1075a:	60f8      	str	r0, [r7, #12]
   1075c:	60b9      	str	r1, [r7, #8]
   1075e:	607a      	str	r2, [r7, #4]
   10760:	603b      	str	r3, [r7, #0]
    (void)type_in;
    mp_arg_check_num(n_args, n_kw, 0, 2, false);
   10762:	2300      	movs	r3, #0
   10764:	9300      	str	r3, [sp, #0]
   10766:	2302      	movs	r3, #2
   10768:	2200      	movs	r2, #0
   1076a:	6879      	ldr	r1, [r7, #4]
   1076c:	68b8      	ldr	r0, [r7, #8]
   1076e:	f7fc fdad 	bl	d2cc <mp_arg_check_num>

    switch (n_args) {
   10772:	68bb      	ldr	r3, [r7, #8]
   10774:	2b00      	cmp	r3, #0
   10776:	d002      	beq.n	1077e <mp_obj_int_make_new+0x2a>
   10778:	2b01      	cmp	r3, #1
   1077a:	d002      	beq.n	10782 <mp_obj_int_make_new+0x2e>
   1077c:	e04c      	b.n	10818 <mp_obj_int_make_new+0xc4>
        case 0:
            return MP_OBJ_NEW_SMALL_INT(0);
   1077e:	2301      	movs	r3, #1
   10780:	e061      	b.n	10846 <mp_obj_int_make_new+0xf2>

        case 1:
            if (MP_OBJ_IS_INT(args[0])) {
   10782:	683b      	ldr	r3, [r7, #0]
   10784:	681b      	ldr	r3, [r3, #0]
   10786:	4618      	mov	r0, r3
   10788:	f7ff ffae 	bl	106e8 <MP_OBJ_IS_SMALL_INT>
   1078c:	4603      	mov	r3, r0
   1078e:	2b00      	cmp	r3, #0
   10790:	d10d      	bne.n	107ae <mp_obj_int_make_new+0x5a>
   10792:	683b      	ldr	r3, [r7, #0]
   10794:	681b      	ldr	r3, [r3, #0]
   10796:	4618      	mov	r0, r3
   10798:	f7ff ffca 	bl	10730 <MP_OBJ_IS_OBJ>
   1079c:	4603      	mov	r3, r0
   1079e:	2b00      	cmp	r3, #0
   107a0:	d008      	beq.n	107b4 <mp_obj_int_make_new+0x60>
   107a2:	683b      	ldr	r3, [r7, #0]
   107a4:	681b      	ldr	r3, [r3, #0]
   107a6:	681b      	ldr	r3, [r3, #0]
   107a8:	4a29      	ldr	r2, [pc, #164]	; (10850 <mp_obj_int_make_new+0xfc>)
   107aa:	4293      	cmp	r3, r2
   107ac:	d102      	bne.n	107b4 <mp_obj_int_make_new+0x60>
                // already an int (small or long), just return it
                return args[0];
   107ae:	683b      	ldr	r3, [r7, #0]
   107b0:	681b      	ldr	r3, [r3, #0]
   107b2:	e048      	b.n	10846 <mp_obj_int_make_new+0xf2>
            } else if (MP_OBJ_IS_STR_OR_BYTES(args[0])) {
   107b4:	683b      	ldr	r3, [r7, #0]
   107b6:	681b      	ldr	r3, [r3, #0]
   107b8:	4618      	mov	r0, r3
   107ba:	f7ff ffa7 	bl	1070c <MP_OBJ_IS_QSTR>
   107be:	4603      	mov	r3, r0
   107c0:	2b00      	cmp	r3, #0
   107c2:	d10e      	bne.n	107e2 <mp_obj_int_make_new+0x8e>
   107c4:	683b      	ldr	r3, [r7, #0]
   107c6:	681b      	ldr	r3, [r3, #0]
   107c8:	4618      	mov	r0, r3
   107ca:	f7ff ffb1 	bl	10730 <MP_OBJ_IS_OBJ>
   107ce:	4603      	mov	r3, r0
   107d0:	2b00      	cmp	r3, #0
   107d2:	d017      	beq.n	10804 <mp_obj_int_make_new+0xb0>
   107d4:	683b      	ldr	r3, [r7, #0]
   107d6:	681b      	ldr	r3, [r3, #0]
   107d8:	681b      	ldr	r3, [r3, #0]
   107da:	699b      	ldr	r3, [r3, #24]
   107dc:	4a1d      	ldr	r2, [pc, #116]	; (10854 <mp_obj_int_make_new+0x100>)
   107de:	4293      	cmp	r3, r2
   107e0:	d110      	bne.n	10804 <mp_obj_int_make_new+0xb0>
                // a string, parse it
                size_t l;
                const char *s = mp_obj_str_get_data(args[0], &l);
   107e2:	683b      	ldr	r3, [r7, #0]
   107e4:	681b      	ldr	r3, [r3, #0]
   107e6:	f107 0214 	add.w	r2, r7, #20
   107ea:	4611      	mov	r1, r2
   107ec:	4618      	mov	r0, r3
   107ee:	f005 f899 	bl	15924 <mp_obj_str_get_data>
   107f2:	61f8      	str	r0, [r7, #28]
                return mp_parse_num_integer(s, l, 0, NULL);
   107f4:	6979      	ldr	r1, [r7, #20]
   107f6:	2300      	movs	r3, #0
   107f8:	2200      	movs	r2, #0
   107fa:	69f8      	ldr	r0, [r7, #28]
   107fc:	f7fa fd16 	bl	b22c <mp_parse_num_integer>
   10800:	4603      	mov	r3, r0
   10802:	e020      	b.n	10846 <mp_obj_int_make_new+0xf2>
            } else if (mp_obj_is_float(args[0])) {
                return mp_obj_new_int_from_float(mp_obj_float_get(args[0]));
#endif
            } else {
                // try to convert to small int (eg from bool)
                return MP_OBJ_NEW_SMALL_INT(mp_obj_get_int(args[0]));
   10804:	683b      	ldr	r3, [r7, #0]
   10806:	681b      	ldr	r3, [r3, #0]
   10808:	4618      	mov	r0, r3
   1080a:	f7fd fb31 	bl	de70 <mp_obj_get_int>
   1080e:	4603      	mov	r3, r0
   10810:	005b      	lsls	r3, r3, #1
   10812:	f043 0301 	orr.w	r3, r3, #1
   10816:	e016      	b.n	10846 <mp_obj_int_make_new+0xf2>
        case 2:
        default: {
            // should be a string, parse it
            // TODO proper error checking of argument types
            size_t l;
            const char *s = mp_obj_str_get_data(args[0], &l);
   10818:	683b      	ldr	r3, [r7, #0]
   1081a:	681b      	ldr	r3, [r3, #0]
   1081c:	f107 0210 	add.w	r2, r7, #16
   10820:	4611      	mov	r1, r2
   10822:	4618      	mov	r0, r3
   10824:	f005 f87e 	bl	15924 <mp_obj_str_get_data>
   10828:	61b8      	str	r0, [r7, #24]
            return mp_parse_num_integer(s, l, mp_obj_get_int(args[1]), NULL);
   1082a:	693c      	ldr	r4, [r7, #16]
   1082c:	683b      	ldr	r3, [r7, #0]
   1082e:	3304      	adds	r3, #4
   10830:	681b      	ldr	r3, [r3, #0]
   10832:	4618      	mov	r0, r3
   10834:	f7fd fb1c 	bl	de70 <mp_obj_get_int>
   10838:	4602      	mov	r2, r0
   1083a:	2300      	movs	r3, #0
   1083c:	4621      	mov	r1, r4
   1083e:	69b8      	ldr	r0, [r7, #24]
   10840:	f7fa fcf4 	bl	b22c <mp_parse_num_integer>
   10844:	4603      	mov	r3, r0
        }
    }
}
   10846:	4618      	mov	r0, r3
   10848:	3724      	adds	r7, #36	; 0x24
   1084a:	46bd      	mov	sp, r7
   1084c:	bd90      	pop	{r4, r7, pc}
   1084e:	bf00      	nop
   10850:	00022ea8 	.word	0x00022ea8
   10854:	00012b11 	.word	0x00012b11

00010858 <mp_obj_int_print>:
#else
typedef mp_int_t fmt_int_t;
typedef mp_uint_t fmt_uint_t;
#endif

void mp_obj_int_print(const mp_print_t *print, mp_obj_t self_in, mp_print_kind_t kind) {
   10858:	b580      	push	{r7, lr}
   1085a:	b090      	sub	sp, #64	; 0x40
   1085c:	af04      	add	r7, sp, #16
   1085e:	60f8      	str	r0, [r7, #12]
   10860:	60b9      	str	r1, [r7, #8]
   10862:	607a      	str	r2, [r7, #4]
    (void)kind;
    // The size of this buffer is rather arbitrary. If it's not large
    // enough, a dynamic one will be allocated.
    char stack_buf[sizeof(fmt_int_t) * 4];
    char *buf = stack_buf;
   10864:	f107 031c 	add.w	r3, r7, #28
   10868:	61bb      	str	r3, [r7, #24]
    size_t buf_size = sizeof(stack_buf);
   1086a:	2310      	movs	r3, #16
   1086c:	617b      	str	r3, [r7, #20]
    size_t fmt_size;

    char *str = mp_obj_int_formatted(&buf, &buf_size, &fmt_size, self_in, 10, NULL, '\0', '\0');
   1086e:	f107 0210 	add.w	r2, r7, #16
   10872:	f107 0114 	add.w	r1, r7, #20
   10876:	f107 0018 	add.w	r0, r7, #24
   1087a:	2300      	movs	r3, #0
   1087c:	9303      	str	r3, [sp, #12]
   1087e:	2300      	movs	r3, #0
   10880:	9302      	str	r3, [sp, #8]
   10882:	2300      	movs	r3, #0
   10884:	9301      	str	r3, [sp, #4]
   10886:	230a      	movs	r3, #10
   10888:	9300      	str	r3, [sp, #0]
   1088a:	68bb      	ldr	r3, [r7, #8]
   1088c:	f000 f858 	bl	10940 <mp_obj_int_formatted>
   10890:	62f8      	str	r0, [r7, #44]	; 0x2c
    mp_print_str(print, str);
   10892:	6af9      	ldr	r1, [r7, #44]	; 0x2c
   10894:	68f8      	ldr	r0, [r7, #12]
   10896:	f7f1 f8ad 	bl	19f4 <mp_print_str>

    if (buf != stack_buf) {
   1089a:	69ba      	ldr	r2, [r7, #24]
   1089c:	f107 031c 	add.w	r3, r7, #28
   108a0:	429a      	cmp	r2, r3
   108a2:	d003      	beq.n	108ac <mp_obj_int_print+0x54>
        m_del(char, buf, buf_size);
   108a4:	69bb      	ldr	r3, [r7, #24]
   108a6:	4618      	mov	r0, r3
   108a8:	f7ef fdb2 	bl	410 <m_free>
    }
}
   108ac:	bf00      	nop
   108ae:	3730      	adds	r7, #48	; 0x30
   108b0:	46bd      	mov	sp, r7
   108b2:	bd80      	pop	{r7, pc}

000108b4 <mp_int_format_size>:
    4, 4, 4, 4,
    4, 4, 4, 5
    */
};

size_t mp_int_format_size(size_t num_bits, int base, const char *prefix, char comma) {
   108b4:	b580      	push	{r7, lr}
   108b6:	b088      	sub	sp, #32
   108b8:	af00      	add	r7, sp, #0
   108ba:	60f8      	str	r0, [r7, #12]
   108bc:	60b9      	str	r1, [r7, #8]
   108be:	607a      	str	r2, [r7, #4]
   108c0:	70fb      	strb	r3, [r7, #3]
    assert(2 <= base && base <= 16);
   108c2:	68bb      	ldr	r3, [r7, #8]
   108c4:	2b01      	cmp	r3, #1
   108c6:	dd02      	ble.n	108ce <mp_int_format_size+0x1a>
   108c8:	68bb      	ldr	r3, [r7, #8]
   108ca:	2b10      	cmp	r3, #16
   108cc:	dd05      	ble.n	108da <mp_int_format_size+0x26>
   108ce:	4b17      	ldr	r3, [pc, #92]	; (1092c <mp_int_format_size+0x78>)
   108d0:	4a17      	ldr	r2, [pc, #92]	; (10930 <mp_int_format_size+0x7c>)
   108d2:	21d0      	movs	r1, #208	; 0xd0
   108d4:	4817      	ldr	r0, [pc, #92]	; (10934 <mp_int_format_size+0x80>)
   108d6:	f00a fefb 	bl	1b6d0 <__assert_func>
    size_t num_digits = num_bits / log_base2_floor[base - 1] + 1;
   108da:	68bb      	ldr	r3, [r7, #8]
   108dc:	3b01      	subs	r3, #1
   108de:	4a16      	ldr	r2, [pc, #88]	; (10938 <mp_int_format_size+0x84>)
   108e0:	5cd3      	ldrb	r3, [r2, r3]
   108e2:	461a      	mov	r2, r3
   108e4:	68fb      	ldr	r3, [r7, #12]
   108e6:	fbb3 f3f2 	udiv	r3, r3, r2
   108ea:	3301      	adds	r3, #1
   108ec:	61fb      	str	r3, [r7, #28]
    size_t num_commas = comma ? num_digits / 3 : 0;
   108ee:	78fb      	ldrb	r3, [r7, #3]
   108f0:	2b00      	cmp	r3, #0
   108f2:	d005      	beq.n	10900 <mp_int_format_size+0x4c>
   108f4:	69fb      	ldr	r3, [r7, #28]
   108f6:	4a11      	ldr	r2, [pc, #68]	; (1093c <mp_int_format_size+0x88>)
   108f8:	fba2 2303 	umull	r2, r3, r2, r3
   108fc:	085b      	lsrs	r3, r3, #1
   108fe:	e000      	b.n	10902 <mp_int_format_size+0x4e>
   10900:	2300      	movs	r3, #0
   10902:	61bb      	str	r3, [r7, #24]
    size_t prefix_len = prefix ? strlen(prefix) : 0;
   10904:	687b      	ldr	r3, [r7, #4]
   10906:	2b00      	cmp	r3, #0
   10908:	d004      	beq.n	10914 <mp_int_format_size+0x60>
   1090a:	6878      	ldr	r0, [r7, #4]
   1090c:	f00c faee 	bl	1ceec <strlen>
   10910:	4603      	mov	r3, r0
   10912:	e000      	b.n	10916 <mp_int_format_size+0x62>
   10914:	2300      	movs	r3, #0
   10916:	617b      	str	r3, [r7, #20]
    return num_digits + num_commas + prefix_len + 2; // +1 for sign, +1 for null byte
   10918:	69fa      	ldr	r2, [r7, #28]
   1091a:	69bb      	ldr	r3, [r7, #24]
   1091c:	441a      	add	r2, r3
   1091e:	697b      	ldr	r3, [r7, #20]
   10920:	4413      	add	r3, r2
   10922:	3302      	adds	r3, #2
}
   10924:	4618      	mov	r0, r3
   10926:	3720      	adds	r7, #32
   10928:	46bd      	mov	sp, r7
   1092a:	bd80      	pop	{r7, pc}
   1092c:	00022e00 	.word	0x00022e00
   10930:	00022ee4 	.word	0x00022ee4
   10934:	00022e18 	.word	0x00022e18
   10938:	00022df0 	.word	0x00022df0
   1093c:	aaaaaaab 	.word	0xaaaaaaab

00010940 <mp_obj_int_formatted>:
// is the callers responsibility to free this allocated buffer.
//
// The resulting formatted string will be returned from this function and the
// formatted size will be in *fmt_size.
char *mp_obj_int_formatted(char **buf, size_t *buf_size, size_t *fmt_size, mp_const_obj_t self_in,
                           int base, const char *prefix, char base_char, char comma) {
   10940:	b580      	push	{r7, lr}
   10942:	b08e      	sub	sp, #56	; 0x38
   10944:	af00      	add	r7, sp, #0
   10946:	60f8      	str	r0, [r7, #12]
   10948:	60b9      	str	r1, [r7, #8]
   1094a:	607a      	str	r2, [r7, #4]
   1094c:	603b      	str	r3, [r7, #0]
    fmt_int_t num;
    #if MICROPY_LONGINT_IMPL == MICROPY_LONGINT_IMPL_NONE
    // Only have small ints; get the integer value to format.
    num = MP_OBJ_SMALL_INT_VALUE(self_in);
   1094e:	683b      	ldr	r3, [r7, #0]
   10950:	105b      	asrs	r3, r3, #1
   10952:	637b      	str	r3, [r7, #52]	; 0x34
        return mp_obj_int_formatted_impl(buf, buf_size, fmt_size, self_in, base, prefix, base_char, comma);
        #endif
    }
    #endif

    char sign = '\0';
   10954:	2300      	movs	r3, #0
   10956:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (num < 0) {
   1095a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1095c:	2b00      	cmp	r3, #0
   1095e:	da05      	bge.n	1096c <mp_obj_int_formatted+0x2c>
        num = -num;
   10960:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   10962:	425b      	negs	r3, r3
   10964:	637b      	str	r3, [r7, #52]	; 0x34
        sign = '-';
   10966:	232d      	movs	r3, #45	; 0x2d
   10968:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    }

    size_t needed_size = mp_int_format_size(sizeof(fmt_int_t) * 8, base, prefix, comma);
   1096c:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
   10970:	6c7a      	ldr	r2, [r7, #68]	; 0x44
   10972:	6c39      	ldr	r1, [r7, #64]	; 0x40
   10974:	2020      	movs	r0, #32
   10976:	f7ff ff9d 	bl	108b4 <mp_int_format_size>
   1097a:	61f8      	str	r0, [r7, #28]
    if (needed_size > *buf_size) {
   1097c:	68bb      	ldr	r3, [r7, #8]
   1097e:	681a      	ldr	r2, [r3, #0]
   10980:	69fb      	ldr	r3, [r7, #28]
   10982:	429a      	cmp	r2, r3
   10984:	d208      	bcs.n	10998 <mp_obj_int_formatted+0x58>
        *buf = m_new(char, needed_size);
   10986:	69f8      	ldr	r0, [r7, #28]
   10988:	f7ef fcc8 	bl	31c <m_malloc>
   1098c:	4602      	mov	r2, r0
   1098e:	68fb      	ldr	r3, [r7, #12]
   10990:	601a      	str	r2, [r3, #0]
        *buf_size = needed_size;
   10992:	68bb      	ldr	r3, [r7, #8]
   10994:	69fa      	ldr	r2, [r7, #28]
   10996:	601a      	str	r2, [r3, #0]
    }
    char *str = *buf;
   10998:	68fb      	ldr	r3, [r7, #12]
   1099a:	681b      	ldr	r3, [r3, #0]
   1099c:	61bb      	str	r3, [r7, #24]

    char *b = str + needed_size;
   1099e:	69ba      	ldr	r2, [r7, #24]
   109a0:	69fb      	ldr	r3, [r7, #28]
   109a2:	4413      	add	r3, r2
   109a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    *(--b) = '\0';
   109a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   109a8:	3b01      	subs	r3, #1
   109aa:	62fb      	str	r3, [r7, #44]	; 0x2c
   109ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   109ae:	2200      	movs	r2, #0
   109b0:	701a      	strb	r2, [r3, #0]
    char *last_comma = b;
   109b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   109b4:	62bb      	str	r3, [r7, #40]	; 0x28

    if (num == 0) {
   109b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   109b8:	2b00      	cmp	r3, #0
   109ba:	d106      	bne.n	109ca <mp_obj_int_formatted+0x8a>
        *(--b) = '0';
   109bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   109be:	3b01      	subs	r3, #1
   109c0:	62fb      	str	r3, [r7, #44]	; 0x2c
   109c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   109c4:	2230      	movs	r2, #48	; 0x30
   109c6:	701a      	strb	r2, [r3, #0]
   109c8:	e040      	b.n	10a4c <mp_obj_int_formatted+0x10c>
    } else {
        do {
            // The cast to fmt_uint_t is because num is positive and we want unsigned arithmetic
            int c = (fmt_uint_t)num % base;
   109ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   109cc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   109ce:	fbb3 f1f2 	udiv	r1, r3, r2
   109d2:	fb02 f201 	mul.w	r2, r2, r1
   109d6:	1a9b      	subs	r3, r3, r2
   109d8:	627b      	str	r3, [r7, #36]	; 0x24
            num = (fmt_uint_t)num / base;
   109da:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   109dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   109de:	fbb2 f3f3 	udiv	r3, r2, r3
   109e2:	637b      	str	r3, [r7, #52]	; 0x34
            if (c >= 10) {
   109e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   109e6:	2b09      	cmp	r3, #9
   109e8:	dd06      	ble.n	109f8 <mp_obj_int_formatted+0xb8>
                c += base_char - 10;
   109ea:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
   109ee:	3b0a      	subs	r3, #10
   109f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   109f2:	4413      	add	r3, r2
   109f4:	627b      	str	r3, [r7, #36]	; 0x24
   109f6:	e002      	b.n	109fe <mp_obj_int_formatted+0xbe>
            } else {
                c += '0';
   109f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   109fa:	3330      	adds	r3, #48	; 0x30
   109fc:	627b      	str	r3, [r7, #36]	; 0x24
            }
            *(--b) = c;
   109fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   10a00:	3b01      	subs	r3, #1
   10a02:	62fb      	str	r3, [r7, #44]	; 0x2c
   10a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   10a06:	b2da      	uxtb	r2, r3
   10a08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   10a0a:	701a      	strb	r2, [r3, #0]
            if (comma && num != 0 && b > str && (last_comma - b) == 3) {
   10a0c:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
   10a10:	2b00      	cmp	r3, #0
   10a12:	d014      	beq.n	10a3e <mp_obj_int_formatted+0xfe>
   10a14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   10a16:	2b00      	cmp	r3, #0
   10a18:	d011      	beq.n	10a3e <mp_obj_int_formatted+0xfe>
   10a1a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   10a1c:	69bb      	ldr	r3, [r7, #24]
   10a1e:	429a      	cmp	r2, r3
   10a20:	d90d      	bls.n	10a3e <mp_obj_int_formatted+0xfe>
   10a22:	6aba      	ldr	r2, [r7, #40]	; 0x28
   10a24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   10a26:	1ad3      	subs	r3, r2, r3
   10a28:	2b03      	cmp	r3, #3
   10a2a:	d108      	bne.n	10a3e <mp_obj_int_formatted+0xfe>
                *(--b) = comma;
   10a2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   10a2e:	3b01      	subs	r3, #1
   10a30:	62fb      	str	r3, [r7, #44]	; 0x2c
   10a32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   10a34:	f897 204c 	ldrb.w	r2, [r7, #76]	; 0x4c
   10a38:	701a      	strb	r2, [r3, #0]
                last_comma = b;
   10a3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   10a3c:	62bb      	str	r3, [r7, #40]	; 0x28
            }
        }
        while (b > str && num != 0);
   10a3e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   10a40:	69bb      	ldr	r3, [r7, #24]
   10a42:	429a      	cmp	r2, r3
   10a44:	d902      	bls.n	10a4c <mp_obj_int_formatted+0x10c>
   10a46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   10a48:	2b00      	cmp	r3, #0
   10a4a:	d1be      	bne.n	109ca <mp_obj_int_formatted+0x8a>
    }
    if (prefix) {
   10a4c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   10a4e:	2b00      	cmp	r3, #0
   10a50:	d01b      	beq.n	10a8a <mp_obj_int_formatted+0x14a>
        size_t prefix_len = strlen(prefix);
   10a52:	6c78      	ldr	r0, [r7, #68]	; 0x44
   10a54:	f00c fa4a 	bl	1ceec <strlen>
   10a58:	6178      	str	r0, [r7, #20]
        char *p = b - prefix_len;
   10a5a:	697b      	ldr	r3, [r7, #20]
   10a5c:	425b      	negs	r3, r3
   10a5e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   10a60:	4413      	add	r3, r2
   10a62:	623b      	str	r3, [r7, #32]
        if (p > str) {
   10a64:	6a3a      	ldr	r2, [r7, #32]
   10a66:	69bb      	ldr	r3, [r7, #24]
   10a68:	429a      	cmp	r2, r3
   10a6a:	d90e      	bls.n	10a8a <mp_obj_int_formatted+0x14a>
            b = p;
   10a6c:	6a3b      	ldr	r3, [r7, #32]
   10a6e:	62fb      	str	r3, [r7, #44]	; 0x2c
            while (*prefix) {
   10a70:	e007      	b.n	10a82 <mp_obj_int_formatted+0x142>
                *p++ = *prefix++;
   10a72:	6a3b      	ldr	r3, [r7, #32]
   10a74:	1c5a      	adds	r2, r3, #1
   10a76:	623a      	str	r2, [r7, #32]
   10a78:	6c7a      	ldr	r2, [r7, #68]	; 0x44
   10a7a:	1c51      	adds	r1, r2, #1
   10a7c:	6479      	str	r1, [r7, #68]	; 0x44
   10a7e:	7812      	ldrb	r2, [r2, #0]
   10a80:	701a      	strb	r2, [r3, #0]
            while (*prefix) {
   10a82:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   10a84:	781b      	ldrb	r3, [r3, #0]
   10a86:	2b00      	cmp	r3, #0
   10a88:	d1f3      	bne.n	10a72 <mp_obj_int_formatted+0x132>
            }
        }
    }
    if (sign && b > str) {
   10a8a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
   10a8e:	2b00      	cmp	r3, #0
   10a90:	d00a      	beq.n	10aa8 <mp_obj_int_formatted+0x168>
   10a92:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   10a94:	69bb      	ldr	r3, [r7, #24]
   10a96:	429a      	cmp	r2, r3
   10a98:	d906      	bls.n	10aa8 <mp_obj_int_formatted+0x168>
        *(--b) = sign;
   10a9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   10a9c:	3b01      	subs	r3, #1
   10a9e:	62fb      	str	r3, [r7, #44]	; 0x2c
   10aa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   10aa2:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
   10aa6:	701a      	strb	r2, [r3, #0]
    }
    *fmt_size = *buf + needed_size - b - 1;
   10aa8:	68fb      	ldr	r3, [r7, #12]
   10aaa:	681a      	ldr	r2, [r3, #0]
   10aac:	69fb      	ldr	r3, [r7, #28]
   10aae:	4413      	add	r3, r2
   10ab0:	461a      	mov	r2, r3
   10ab2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   10ab4:	1ad3      	subs	r3, r2, r3
   10ab6:	3b01      	subs	r3, #1
   10ab8:	461a      	mov	r2, r3
   10aba:	687b      	ldr	r3, [r7, #4]
   10abc:	601a      	str	r2, [r3, #0]

    return b;
   10abe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
   10ac0:	4618      	mov	r0, r3
   10ac2:	3738      	adds	r7, #56	; 0x38
   10ac4:	46bd      	mov	sp, r7
   10ac6:	bd80      	pop	{r7, pc}

00010ac8 <mp_obj_int_sign>:

#if MICROPY_LONGINT_IMPL == MICROPY_LONGINT_IMPL_NONE

int mp_obj_int_sign(mp_obj_t self_in) {
   10ac8:	b580      	push	{r7, lr}
   10aca:	b084      	sub	sp, #16
   10acc:	af00      	add	r7, sp, #0
   10ace:	6078      	str	r0, [r7, #4]
    mp_int_t val = mp_obj_get_int(self_in);
   10ad0:	6878      	ldr	r0, [r7, #4]
   10ad2:	f7fd f9cd 	bl	de70 <mp_obj_get_int>
   10ad6:	60f8      	str	r0, [r7, #12]
    if (val < 0) {
   10ad8:	68fb      	ldr	r3, [r7, #12]
   10ada:	2b00      	cmp	r3, #0
   10adc:	da02      	bge.n	10ae4 <mp_obj_int_sign+0x1c>
        return -1;
   10ade:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   10ae2:	e005      	b.n	10af0 <mp_obj_int_sign+0x28>
    } else if (val > 0) {
   10ae4:	68fb      	ldr	r3, [r7, #12]
   10ae6:	2b00      	cmp	r3, #0
   10ae8:	dd01      	ble.n	10aee <mp_obj_int_sign+0x26>
        return 1;
   10aea:	2301      	movs	r3, #1
   10aec:	e000      	b.n	10af0 <mp_obj_int_sign+0x28>
    } else {
        return 0;
   10aee:	2300      	movs	r3, #0
    }
}
   10af0:	4618      	mov	r0, r3
   10af2:	3710      	adds	r7, #16
   10af4:	46bd      	mov	sp, r7
   10af6:	bd80      	pop	{r7, pc}

00010af8 <mp_obj_int_unary_op>:

// This is called for operations on SMALL_INT that are not handled by mp_unary_op
mp_obj_t mp_obj_int_unary_op(mp_unary_op_t op, mp_obj_t o_in) {
   10af8:	b480      	push	{r7}
   10afa:	b083      	sub	sp, #12
   10afc:	af00      	add	r7, sp, #0
   10afe:	6078      	str	r0, [r7, #4]
   10b00:	6039      	str	r1, [r7, #0]
    return MP_OBJ_NULL; // op not supported
   10b02:	2300      	movs	r3, #0
}
   10b04:	4618      	mov	r0, r3
   10b06:	370c      	adds	r7, #12
   10b08:	46bd      	mov	sp, r7
   10b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
   10b0e:	4770      	bx	lr

00010b10 <mp_obj_int_binary_op>:

// This is called for operations on SMALL_INT that are not handled by mp_binary_op
mp_obj_t mp_obj_int_binary_op(mp_binary_op_t op, mp_obj_t lhs_in, mp_obj_t rhs_in) {
   10b10:	b580      	push	{r7, lr}
   10b12:	b084      	sub	sp, #16
   10b14:	af00      	add	r7, sp, #0
   10b16:	60f8      	str	r0, [r7, #12]
   10b18:	60b9      	str	r1, [r7, #8]
   10b1a:	607a      	str	r2, [r7, #4]
    return mp_obj_int_binary_op_extra_cases(op, lhs_in, rhs_in);
   10b1c:	687a      	ldr	r2, [r7, #4]
   10b1e:	68b9      	ldr	r1, [r7, #8]
   10b20:	68f8      	ldr	r0, [r7, #12]
   10b22:	f000 f87f 	bl	10c24 <mp_obj_int_binary_op_extra_cases>
   10b26:	4603      	mov	r3, r0
}
   10b28:	4618      	mov	r0, r3
   10b2a:	3710      	adds	r7, #16
   10b2c:	46bd      	mov	sp, r7
   10b2e:	bd80      	pop	{r7, pc}

00010b30 <mp_obj_new_int_from_str_len>:

// This is called only with strings whose value doesn't fit in SMALL_INT
mp_obj_t mp_obj_new_int_from_str_len(const char **str, size_t len, bool neg, unsigned int base) {
   10b30:	b580      	push	{r7, lr}
   10b32:	b084      	sub	sp, #16
   10b34:	af00      	add	r7, sp, #0
   10b36:	60f8      	str	r0, [r7, #12]
   10b38:	60b9      	str	r1, [r7, #8]
   10b3a:	603b      	str	r3, [r7, #0]
   10b3c:	4613      	mov	r3, r2
   10b3e:	71fb      	strb	r3, [r7, #7]
    mp_raise_msg(&mp_type_OverflowError, "long int not supported in this build");
   10b40:	4901      	ldr	r1, [pc, #4]	; (10b48 <mp_obj_new_int_from_str_len+0x18>)
   10b42:	4802      	ldr	r0, [pc, #8]	; (10b4c <mp_obj_new_int_from_str_len+0x1c>)
   10b44:	f7fc fb34 	bl	d1b0 <mp_raise_msg>
   10b48:	00022e2c 	.word	0x00022e2c
   10b4c:	000222d8 	.word	0x000222d8

00010b50 <mp_obj_new_int_from_ll>:
    return mp_const_none;
}

// This is called when an integer larger than a SMALL_INT is needed (although val might still fit in a SMALL_INT)
mp_obj_t mp_obj_new_int_from_ll(long long val) {
   10b50:	b580      	push	{r7, lr}
   10b52:	b082      	sub	sp, #8
   10b54:	af00      	add	r7, sp, #0
   10b56:	e9c7 0100 	strd	r0, r1, [r7]
    mp_raise_msg(&mp_type_OverflowError, "small int overflow");
   10b5a:	4902      	ldr	r1, [pc, #8]	; (10b64 <mp_obj_new_int_from_ll+0x14>)
   10b5c:	4802      	ldr	r0, [pc, #8]	; (10b68 <mp_obj_new_int_from_ll+0x18>)
   10b5e:	f7fc fb27 	bl	d1b0 <mp_raise_msg>
   10b62:	bf00      	nop
   10b64:	00022e54 	.word	0x00022e54
   10b68:	000222d8 	.word	0x000222d8

00010b6c <mp_obj_new_int_from_ull>:
    return mp_const_none;
}

// This is called when an integer larger than a SMALL_INT is needed (although val might still fit in a SMALL_INT)
mp_obj_t mp_obj_new_int_from_ull(unsigned long long val) {
   10b6c:	b580      	push	{r7, lr}
   10b6e:	b082      	sub	sp, #8
   10b70:	af00      	add	r7, sp, #0
   10b72:	e9c7 0100 	strd	r0, r1, [r7]
    mp_raise_msg(&mp_type_OverflowError, "small int overflow");
   10b76:	4902      	ldr	r1, [pc, #8]	; (10b80 <mp_obj_new_int_from_ull+0x14>)
   10b78:	4802      	ldr	r0, [pc, #8]	; (10b84 <mp_obj_new_int_from_ull+0x18>)
   10b7a:	f7fc fb19 	bl	d1b0 <mp_raise_msg>
   10b7e:	bf00      	nop
   10b80:	00022e54 	.word	0x00022e54
   10b84:	000222d8 	.word	0x000222d8

00010b88 <mp_obj_new_int_from_uint>:
    return mp_const_none;
}

mp_obj_t mp_obj_new_int_from_uint(mp_uint_t value) {
   10b88:	b580      	push	{r7, lr}
   10b8a:	b082      	sub	sp, #8
   10b8c:	af00      	add	r7, sp, #0
   10b8e:	6078      	str	r0, [r7, #4]
    // SMALL_INT accepts only signed numbers, so make sure the input
    // value fits completely in the small-int positive range.
    if ((value & ~MP_SMALL_INT_POSITIVE_MASK) == 0) {
   10b90:	687b      	ldr	r3, [r7, #4]
   10b92:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
   10b96:	2b00      	cmp	r3, #0
   10b98:	d104      	bne.n	10ba4 <mp_obj_new_int_from_uint+0x1c>
        return MP_OBJ_NEW_SMALL_INT(value);
   10b9a:	687b      	ldr	r3, [r7, #4]
   10b9c:	005b      	lsls	r3, r3, #1
   10b9e:	f043 0301 	orr.w	r3, r3, #1
   10ba2:	e003      	b.n	10bac <mp_obj_new_int_from_uint+0x24>
    }
    mp_raise_msg(&mp_type_OverflowError, "small int overflow");
   10ba4:	4903      	ldr	r1, [pc, #12]	; (10bb4 <mp_obj_new_int_from_uint+0x2c>)
   10ba6:	4804      	ldr	r0, [pc, #16]	; (10bb8 <mp_obj_new_int_from_uint+0x30>)
   10ba8:	f7fc fb02 	bl	d1b0 <mp_raise_msg>
    return mp_const_none;
}
   10bac:	4618      	mov	r0, r3
   10bae:	3708      	adds	r7, #8
   10bb0:	46bd      	mov	sp, r7
   10bb2:	bd80      	pop	{r7, pc}
   10bb4:	00022e54 	.word	0x00022e54
   10bb8:	000222d8 	.word	0x000222d8

00010bbc <mp_obj_new_int>:

mp_obj_t mp_obj_new_int(mp_int_t value) {
   10bbc:	b580      	push	{r7, lr}
   10bbe:	b082      	sub	sp, #8
   10bc0:	af00      	add	r7, sp, #0
   10bc2:	6078      	str	r0, [r7, #4]
    if (MP_SMALL_INT_FITS(value)) {
   10bc4:	687b      	ldr	r3, [r7, #4]
   10bc6:	005a      	lsls	r2, r3, #1
   10bc8:	687b      	ldr	r3, [r7, #4]
   10bca:	4053      	eors	r3, r2
   10bcc:	2b00      	cmp	r3, #0
   10bce:	db04      	blt.n	10bda <mp_obj_new_int+0x1e>
        return MP_OBJ_NEW_SMALL_INT(value);
   10bd0:	687b      	ldr	r3, [r7, #4]
   10bd2:	005b      	lsls	r3, r3, #1
   10bd4:	f043 0301 	orr.w	r3, r3, #1
   10bd8:	e003      	b.n	10be2 <mp_obj_new_int+0x26>
    }
    mp_raise_msg(&mp_type_OverflowError, "small int overflow");
   10bda:	4904      	ldr	r1, [pc, #16]	; (10bec <mp_obj_new_int+0x30>)
   10bdc:	4804      	ldr	r0, [pc, #16]	; (10bf0 <mp_obj_new_int+0x34>)
   10bde:	f7fc fae7 	bl	d1b0 <mp_raise_msg>
    return mp_const_none;
}
   10be2:	4618      	mov	r0, r3
   10be4:	3708      	adds	r7, #8
   10be6:	46bd      	mov	sp, r7
   10be8:	bd80      	pop	{r7, pc}
   10bea:	bf00      	nop
   10bec:	00022e54 	.word	0x00022e54
   10bf0:	000222d8 	.word	0x000222d8

00010bf4 <mp_obj_int_get_truncated>:

mp_int_t mp_obj_int_get_truncated(mp_const_obj_t self_in) {
   10bf4:	b480      	push	{r7}
   10bf6:	b083      	sub	sp, #12
   10bf8:	af00      	add	r7, sp, #0
   10bfa:	6078      	str	r0, [r7, #4]
    return MP_OBJ_SMALL_INT_VALUE(self_in);
   10bfc:	687b      	ldr	r3, [r7, #4]
   10bfe:	105b      	asrs	r3, r3, #1
}
   10c00:	4618      	mov	r0, r3
   10c02:	370c      	adds	r7, #12
   10c04:	46bd      	mov	sp, r7
   10c06:	f85d 7b04 	ldr.w	r7, [sp], #4
   10c0a:	4770      	bx	lr

00010c0c <mp_obj_int_get_checked>:

mp_int_t mp_obj_int_get_checked(mp_const_obj_t self_in) {
   10c0c:	b480      	push	{r7}
   10c0e:	b083      	sub	sp, #12
   10c10:	af00      	add	r7, sp, #0
   10c12:	6078      	str	r0, [r7, #4]
    return MP_OBJ_SMALL_INT_VALUE(self_in);
   10c14:	687b      	ldr	r3, [r7, #4]
   10c16:	105b      	asrs	r3, r3, #1
}
   10c18:	4618      	mov	r0, r3
   10c1a:	370c      	adds	r7, #12
   10c1c:	46bd      	mov	sp, r7
   10c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
   10c22:	4770      	bx	lr

00010c24 <mp_obj_int_binary_op_extra_cases>:

#endif // MICROPY_LONGINT_IMPL == MICROPY_LONGINT_IMPL_NONE

// This dispatcher function is expected to be independent of the implementation of long int
// It handles the extra cases for integer-like arithmetic
mp_obj_t mp_obj_int_binary_op_extra_cases(mp_binary_op_t op, mp_obj_t lhs_in, mp_obj_t rhs_in) {
   10c24:	b580      	push	{r7, lr}
   10c26:	b084      	sub	sp, #16
   10c28:	af00      	add	r7, sp, #0
   10c2a:	60f8      	str	r0, [r7, #12]
   10c2c:	60b9      	str	r1, [r7, #8]
   10c2e:	607a      	str	r2, [r7, #4]
    if (rhs_in == mp_const_false) {
   10c30:	687b      	ldr	r3, [r7, #4]
   10c32:	4a26      	ldr	r2, [pc, #152]	; (10ccc <mp_obj_int_binary_op_extra_cases+0xa8>)
   10c34:	4293      	cmp	r3, r2
   10c36:	d106      	bne.n	10c46 <mp_obj_int_binary_op_extra_cases+0x22>
        // false acts as 0
        return mp_binary_op(op, lhs_in, MP_OBJ_NEW_SMALL_INT(0));
   10c38:	2201      	movs	r2, #1
   10c3a:	68b9      	ldr	r1, [r7, #8]
   10c3c:	68f8      	ldr	r0, [r7, #12]
   10c3e:	f7fa ff7d 	bl	bb3c <mp_binary_op>
   10c42:	4603      	mov	r3, r0
   10c44:	e03d      	b.n	10cc2 <mp_obj_int_binary_op_extra_cases+0x9e>
    } else if (rhs_in == mp_const_true) {
   10c46:	687b      	ldr	r3, [r7, #4]
   10c48:	4a21      	ldr	r2, [pc, #132]	; (10cd0 <mp_obj_int_binary_op_extra_cases+0xac>)
   10c4a:	4293      	cmp	r3, r2
   10c4c:	d106      	bne.n	10c5c <mp_obj_int_binary_op_extra_cases+0x38>
        // true acts as 0
        return mp_binary_op(op, lhs_in, MP_OBJ_NEW_SMALL_INT(1));
   10c4e:	2203      	movs	r2, #3
   10c50:	68b9      	ldr	r1, [r7, #8]
   10c52:	68f8      	ldr	r0, [r7, #12]
   10c54:	f7fa ff72 	bl	bb3c <mp_binary_op>
   10c58:	4603      	mov	r3, r0
   10c5a:	e032      	b.n	10cc2 <mp_obj_int_binary_op_extra_cases+0x9e>
    } else if (op == MP_BINARY_OP_MULTIPLY) {
   10c5c:	68fb      	ldr	r3, [r7, #12]
   10c5e:	2b1c      	cmp	r3, #28
   10c60:	d12e      	bne.n	10cc0 <mp_obj_int_binary_op_extra_cases+0x9c>
        if (MP_OBJ_IS_STR_OR_BYTES(rhs_in) || MP_OBJ_IS_TYPE(rhs_in, &mp_type_tuple) || MP_OBJ_IS_TYPE(rhs_in, &mp_type_list)) {
   10c62:	6878      	ldr	r0, [r7, #4]
   10c64:	f7ff fd52 	bl	1070c <MP_OBJ_IS_QSTR>
   10c68:	4603      	mov	r3, r0
   10c6a:	2b00      	cmp	r3, #0
   10c6c:	d121      	bne.n	10cb2 <mp_obj_int_binary_op_extra_cases+0x8e>
   10c6e:	6878      	ldr	r0, [r7, #4]
   10c70:	f7ff fd5e 	bl	10730 <MP_OBJ_IS_OBJ>
   10c74:	4603      	mov	r3, r0
   10c76:	2b00      	cmp	r3, #0
   10c78:	d005      	beq.n	10c86 <mp_obj_int_binary_op_extra_cases+0x62>
   10c7a:	687b      	ldr	r3, [r7, #4]
   10c7c:	681b      	ldr	r3, [r3, #0]
   10c7e:	699b      	ldr	r3, [r3, #24]
   10c80:	4a14      	ldr	r2, [pc, #80]	; (10cd4 <mp_obj_int_binary_op_extra_cases+0xb0>)
   10c82:	4293      	cmp	r3, r2
   10c84:	d015      	beq.n	10cb2 <mp_obj_int_binary_op_extra_cases+0x8e>
   10c86:	6878      	ldr	r0, [r7, #4]
   10c88:	f7ff fd52 	bl	10730 <MP_OBJ_IS_OBJ>
   10c8c:	4603      	mov	r3, r0
   10c8e:	2b00      	cmp	r3, #0
   10c90:	d004      	beq.n	10c9c <mp_obj_int_binary_op_extra_cases+0x78>
   10c92:	687b      	ldr	r3, [r7, #4]
   10c94:	681b      	ldr	r3, [r3, #0]
   10c96:	4a10      	ldr	r2, [pc, #64]	; (10cd8 <mp_obj_int_binary_op_extra_cases+0xb4>)
   10c98:	4293      	cmp	r3, r2
   10c9a:	d00a      	beq.n	10cb2 <mp_obj_int_binary_op_extra_cases+0x8e>
   10c9c:	6878      	ldr	r0, [r7, #4]
   10c9e:	f7ff fd47 	bl	10730 <MP_OBJ_IS_OBJ>
   10ca2:	4603      	mov	r3, r0
   10ca4:	2b00      	cmp	r3, #0
   10ca6:	d00b      	beq.n	10cc0 <mp_obj_int_binary_op_extra_cases+0x9c>
   10ca8:	687b      	ldr	r3, [r7, #4]
   10caa:	681b      	ldr	r3, [r3, #0]
   10cac:	4a0b      	ldr	r2, [pc, #44]	; (10cdc <mp_obj_int_binary_op_extra_cases+0xb8>)
   10cae:	4293      	cmp	r3, r2
   10cb0:	d106      	bne.n	10cc0 <mp_obj_int_binary_op_extra_cases+0x9c>
            // multiply is commutative for these types, so delegate to them
            return mp_binary_op(op, rhs_in, lhs_in);
   10cb2:	68ba      	ldr	r2, [r7, #8]
   10cb4:	6879      	ldr	r1, [r7, #4]
   10cb6:	68f8      	ldr	r0, [r7, #12]
   10cb8:	f7fa ff40 	bl	bb3c <mp_binary_op>
   10cbc:	4603      	mov	r3, r0
   10cbe:	e000      	b.n	10cc2 <mp_obj_int_binary_op_extra_cases+0x9e>
        }
    }
    return MP_OBJ_NULL; // op not supported
   10cc0:	2300      	movs	r3, #0
}
   10cc2:	4618      	mov	r0, r3
   10cc4:	3710      	adds	r7, #16
   10cc6:	46bd      	mov	sp, r7
   10cc8:	bd80      	pop	{r7, pc}
   10cca:	bf00      	nop
   10ccc:	00021b70 	.word	0x00021b70
   10cd0:	00021b78 	.word	0x00021b78
   10cd4:	00012b11 	.word	0x00012b11
   10cd8:	00023d90 	.word	0x00023d90
   10cdc:	00023114 	.word	0x00023114

00010ce0 <int_from_bytes>:

// this is a classmethod
STATIC mp_obj_t int_from_bytes(size_t n_args, const mp_obj_t *args) {
   10ce0:	b580      	push	{r7, lr}
   10ce2:	b08a      	sub	sp, #40	; 0x28
   10ce4:	af00      	add	r7, sp, #0
   10ce6:	6078      	str	r0, [r7, #4]
   10ce8:	6039      	str	r1, [r7, #0]
    // TODO: Support signed param (assumes signed=False at the moment)
    (void)n_args;

    // get the buffer info
    mp_buffer_info_t bufinfo;
    mp_get_buffer_raise(args[1], &bufinfo, MP_BUFFER_READ);
   10cea:	683b      	ldr	r3, [r7, #0]
   10cec:	3304      	adds	r3, #4
   10cee:	681b      	ldr	r3, [r3, #0]
   10cf0:	f107 010c 	add.w	r1, r7, #12
   10cf4:	2201      	movs	r2, #1
   10cf6:	4618      	mov	r0, r3
   10cf8:	f7fd faee 	bl	e2d8 <mp_get_buffer_raise>

    const byte* buf = (const byte*)bufinfo.buf;
   10cfc:	68fb      	ldr	r3, [r7, #12]
   10cfe:	627b      	str	r3, [r7, #36]	; 0x24
    int delta = 1;
   10d00:	2301      	movs	r3, #1
   10d02:	623b      	str	r3, [r7, #32]
    if (args[2] == MP_OBJ_NEW_QSTR(MP_QSTR_little)) {
   10d04:	683b      	ldr	r3, [r7, #0]
   10d06:	3308      	adds	r3, #8
   10d08:	681b      	ldr	r3, [r3, #0]
   10d0a:	f240 42da 	movw	r2, #1242	; 0x4da
   10d0e:	4293      	cmp	r3, r2
   10d10:	d107      	bne.n	10d22 <int_from_bytes+0x42>
        buf += bufinfo.len - 1;
   10d12:	693b      	ldr	r3, [r7, #16]
   10d14:	3b01      	subs	r3, #1
   10d16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   10d18:	4413      	add	r3, r2
   10d1a:	627b      	str	r3, [r7, #36]	; 0x24
        delta = -1;
   10d1c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   10d20:	623b      	str	r3, [r7, #32]
    }

    mp_uint_t value = 0;
   10d22:	2300      	movs	r3, #0
   10d24:	61fb      	str	r3, [r7, #28]
    size_t len = bufinfo.len;
   10d26:	693b      	ldr	r3, [r7, #16]
   10d28:	61bb      	str	r3, [r7, #24]
    for (; len--; buf += delta) {
   10d2a:	e009      	b.n	10d40 <int_from_bytes+0x60>
        if (value > (MP_SMALL_INT_MAX >> 8)) {
            // Result will overflow a small-int so construct a big-int
            return mp_obj_int_from_bytes_impl(args[2] != MP_OBJ_NEW_QSTR(MP_QSTR_little), bufinfo.len, bufinfo.buf);
        }
        #endif
        value = (value << 8) | *buf;
   10d2c:	69fb      	ldr	r3, [r7, #28]
   10d2e:	021b      	lsls	r3, r3, #8
   10d30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   10d32:	7812      	ldrb	r2, [r2, #0]
   10d34:	4313      	orrs	r3, r2
   10d36:	61fb      	str	r3, [r7, #28]
    for (; len--; buf += delta) {
   10d38:	6a3b      	ldr	r3, [r7, #32]
   10d3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   10d3c:	4413      	add	r3, r2
   10d3e:	627b      	str	r3, [r7, #36]	; 0x24
   10d40:	69bb      	ldr	r3, [r7, #24]
   10d42:	1e5a      	subs	r2, r3, #1
   10d44:	61ba      	str	r2, [r7, #24]
   10d46:	2b00      	cmp	r3, #0
   10d48:	d1f0      	bne.n	10d2c <int_from_bytes+0x4c>
    }
    return mp_obj_new_int_from_uint(value);
   10d4a:	69f8      	ldr	r0, [r7, #28]
   10d4c:	f7ff ff1c 	bl	10b88 <mp_obj_new_int_from_uint>
   10d50:	4603      	mov	r3, r0
}
   10d52:	4618      	mov	r0, r3
   10d54:	3728      	adds	r7, #40	; 0x28
   10d56:	46bd      	mov	sp, r7
   10d58:	bd80      	pop	{r7, pc}
   10d5a:	bf00      	nop

00010d5c <int_to_bytes>:

STATIC MP_DEFINE_CONST_FUN_OBJ_VAR_BETWEEN(int_from_bytes_fun_obj, 3, 4, int_from_bytes);
STATIC MP_DEFINE_CONST_CLASSMETHOD_OBJ(int_from_bytes_obj, MP_ROM_PTR(&int_from_bytes_fun_obj));

STATIC mp_obj_t int_to_bytes(size_t n_args, const mp_obj_t *args) {
   10d5c:	b580      	push	{r7, lr}
   10d5e:	b08c      	sub	sp, #48	; 0x30
   10d60:	af00      	add	r7, sp, #0
   10d62:	6078      	str	r0, [r7, #4]
   10d64:	6039      	str	r1, [r7, #0]
    // TODO: Support signed param (assumes signed=False)
    (void)n_args;

    mp_int_t len = mp_obj_get_int(args[1]);
   10d66:	683b      	ldr	r3, [r7, #0]
   10d68:	3304      	adds	r3, #4
   10d6a:	681b      	ldr	r3, [r3, #0]
   10d6c:	4618      	mov	r0, r3
   10d6e:	f7fd f87f 	bl	de70 <mp_obj_get_int>
   10d72:	62f8      	str	r0, [r7, #44]	; 0x2c
    if (len < 0) {
   10d74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   10d76:	2b00      	cmp	r3, #0
   10d78:	da02      	bge.n	10d80 <int_to_bytes+0x24>
        mp_raise_ValueError(NULL);
   10d7a:	2000      	movs	r0, #0
   10d7c:	f7fc fa30 	bl	d1e0 <mp_raise_ValueError>
    }
    bool big_endian = args[2] != MP_OBJ_NEW_QSTR(MP_QSTR_little);
   10d80:	683b      	ldr	r3, [r7, #0]
   10d82:	3308      	adds	r3, #8
   10d84:	681b      	ldr	r3, [r3, #0]
   10d86:	f240 42da 	movw	r2, #1242	; 0x4da
   10d8a:	4293      	cmp	r3, r2
   10d8c:	bf14      	ite	ne
   10d8e:	2301      	movne	r3, #1
   10d90:	2300      	moveq	r3, #0
   10d92:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

    vstr_t vstr;
    vstr_init_len(&vstr, len);
   10d96:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   10d98:	f107 030c 	add.w	r3, r7, #12
   10d9c:	4611      	mov	r1, r2
   10d9e:	4618      	mov	r0, r3
   10da0:	f7f0 fb8c 	bl	14bc <vstr_init_len>
    byte *data = (byte*)vstr.buf;
   10da4:	697b      	ldr	r3, [r7, #20]
   10da6:	627b      	str	r3, [r7, #36]	; 0x24
    memset(data, 0, len);
   10da8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   10daa:	461a      	mov	r2, r3
   10dac:	2100      	movs	r1, #0
   10dae:	6a78      	ldr	r0, [r7, #36]	; 0x24
   10db0:	f00b fffe 	bl	1cdb0 <memset>
    if (!MP_OBJ_IS_SMALL_INT(args[0])) {
        mp_obj_int_to_bytes_impl(args[0], big_endian, len, data);
    } else
    #endif
    {
        mp_int_t val = MP_OBJ_SMALL_INT_VALUE(args[0]);
   10db4:	683b      	ldr	r3, [r7, #0]
   10db6:	681b      	ldr	r3, [r3, #0]
   10db8:	105b      	asrs	r3, r3, #1
   10dba:	623b      	str	r3, [r7, #32]
        size_t l = MIN((size_t)len, sizeof(val));
   10dbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   10dbe:	2b04      	cmp	r3, #4
   10dc0:	bf28      	it	cs
   10dc2:	2304      	movcs	r3, #4
   10dc4:	61fb      	str	r3, [r7, #28]
        mp_binary_set_int(l, big_endian, data + (big_endian ? (len - l) : 0), val);
   10dc6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
   10dca:	2b00      	cmp	r3, #0
   10dcc:	d003      	beq.n	10dd6 <int_to_bytes+0x7a>
   10dce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   10dd0:	69fb      	ldr	r3, [r7, #28]
   10dd2:	1ad3      	subs	r3, r2, r3
   10dd4:	e000      	b.n	10dd8 <int_to_bytes+0x7c>
   10dd6:	2300      	movs	r3, #0
   10dd8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   10dda:	441a      	add	r2, r3
   10ddc:	6a3b      	ldr	r3, [r7, #32]
   10dde:	f897 102b 	ldrb.w	r1, [r7, #43]	; 0x2b
   10de2:	69f8      	ldr	r0, [r7, #28]
   10de4:	f007 fb98 	bl	18518 <mp_binary_set_int>
    }

    return mp_obj_new_str_from_vstr(&mp_type_bytes, &vstr);
   10de8:	f107 030c 	add.w	r3, r7, #12
   10dec:	4619      	mov	r1, r3
   10dee:	4804      	ldr	r0, [pc, #16]	; (10e00 <int_to_bytes+0xa4>)
   10df0:	f004 fbd4 	bl	1559c <mp_obj_new_str_from_vstr>
   10df4:	4603      	mov	r3, r0
}
   10df6:	4618      	mov	r0, r3
   10df8:	3730      	adds	r7, #48	; 0x30
   10dfa:	46bd      	mov	sp, r7
   10dfc:	bd80      	pop	{r7, pc}
   10dfe:	bf00      	nop
   10e00:	00023b48 	.word	0x00023b48

00010e04 <MP_OBJ_IS_OBJ>:
   10e04:	b480      	push	{r7}
   10e06:	b083      	sub	sp, #12
   10e08:	af00      	add	r7, sp, #0
   10e0a:	6078      	str	r0, [r7, #4]
   10e0c:	687b      	ldr	r3, [r7, #4]
   10e0e:	f003 0303 	and.w	r3, r3, #3
   10e12:	2b00      	cmp	r3, #0
   10e14:	bf0c      	ite	eq
   10e16:	2301      	moveq	r3, #1
   10e18:	2300      	movne	r3, #0
   10e1a:	b2db      	uxtb	r3, r3
   10e1c:	4618      	mov	r0, r3
   10e1e:	370c      	adds	r7, #12
   10e20:	46bd      	mov	sp, r7
   10e22:	f85d 7b04 	ldr.w	r7, [sp], #4
   10e26:	4770      	bx	lr

00010e28 <mp_obj_new_bool>:
static inline mp_obj_t mp_obj_new_bool(mp_int_t x) { return x ? mp_const_true : mp_const_false; }
   10e28:	b480      	push	{r7}
   10e2a:	b083      	sub	sp, #12
   10e2c:	af00      	add	r7, sp, #0
   10e2e:	6078      	str	r0, [r7, #4]
   10e30:	687b      	ldr	r3, [r7, #4]
   10e32:	2b00      	cmp	r3, #0
   10e34:	d001      	beq.n	10e3a <mp_obj_new_bool+0x12>
   10e36:	4b04      	ldr	r3, [pc, #16]	; (10e48 <mp_obj_new_bool+0x20>)
   10e38:	e000      	b.n	10e3c <mp_obj_new_bool+0x14>
   10e3a:	4b04      	ldr	r3, [pc, #16]	; (10e4c <mp_obj_new_bool+0x24>)
   10e3c:	4618      	mov	r0, r3
   10e3e:	370c      	adds	r7, #12
   10e40:	46bd      	mov	sp, r7
   10e42:	f85d 7b04 	ldr.w	r7, [sp], #4
   10e46:	4770      	bx	lr
   10e48:	00021b78 	.word	0x00021b78
   10e4c:	00021b70 	.word	0x00021b70

00010e50 <list_print>:
#define LIST_MIN_ALLOC 4

/******************************************************************************/
/* list                                                                       */

STATIC void list_print(const mp_print_t *print, mp_obj_t o_in, mp_print_kind_t kind) {
   10e50:	b580      	push	{r7, lr}
   10e52:	b086      	sub	sp, #24
   10e54:	af00      	add	r7, sp, #0
   10e56:	60f8      	str	r0, [r7, #12]
   10e58:	60b9      	str	r1, [r7, #8]
   10e5a:	607a      	str	r2, [r7, #4]
    mp_obj_list_t *o = MP_OBJ_TO_PTR(o_in);
   10e5c:	68bb      	ldr	r3, [r7, #8]
   10e5e:	613b      	str	r3, [r7, #16]
    if (!(MICROPY_PY_UJSON && kind == PRINT_JSON)) {
        kind = PRINT_REPR;
   10e60:	2301      	movs	r3, #1
   10e62:	607b      	str	r3, [r7, #4]
    }
    mp_print_str(print, "[");
   10e64:	4914      	ldr	r1, [pc, #80]	; (10eb8 <list_print+0x68>)
   10e66:	68f8      	ldr	r0, [r7, #12]
   10e68:	f7f0 fdc4 	bl	19f4 <mp_print_str>
    for (size_t i = 0; i < o->len; i++) {
   10e6c:	2300      	movs	r3, #0
   10e6e:	617b      	str	r3, [r7, #20]
   10e70:	e014      	b.n	10e9c <list_print+0x4c>
        if (i > 0) {
   10e72:	697b      	ldr	r3, [r7, #20]
   10e74:	2b00      	cmp	r3, #0
   10e76:	d003      	beq.n	10e80 <list_print+0x30>
            mp_print_str(print, ", ");
   10e78:	4910      	ldr	r1, [pc, #64]	; (10ebc <list_print+0x6c>)
   10e7a:	68f8      	ldr	r0, [r7, #12]
   10e7c:	f7f0 fdba 	bl	19f4 <mp_print_str>
        }
        mp_obj_print_helper(print, o->items[i], kind);
   10e80:	693b      	ldr	r3, [r7, #16]
   10e82:	68da      	ldr	r2, [r3, #12]
   10e84:	697b      	ldr	r3, [r7, #20]
   10e86:	009b      	lsls	r3, r3, #2
   10e88:	4413      	add	r3, r2
   10e8a:	681b      	ldr	r3, [r3, #0]
   10e8c:	687a      	ldr	r2, [r7, #4]
   10e8e:	4619      	mov	r1, r3
   10e90:	68f8      	ldr	r0, [r7, #12]
   10e92:	f7fc fe41 	bl	db18 <mp_obj_print_helper>
    for (size_t i = 0; i < o->len; i++) {
   10e96:	697b      	ldr	r3, [r7, #20]
   10e98:	3301      	adds	r3, #1
   10e9a:	617b      	str	r3, [r7, #20]
   10e9c:	693b      	ldr	r3, [r7, #16]
   10e9e:	689a      	ldr	r2, [r3, #8]
   10ea0:	697b      	ldr	r3, [r7, #20]
   10ea2:	429a      	cmp	r2, r3
   10ea4:	d8e5      	bhi.n	10e72 <list_print+0x22>
    }
    mp_print_str(print, "]");
   10ea6:	4906      	ldr	r1, [pc, #24]	; (10ec0 <list_print+0x70>)
   10ea8:	68f8      	ldr	r0, [r7, #12]
   10eaa:	f7f0 fda3 	bl	19f4 <mp_print_str>
}
   10eae:	bf00      	nop
   10eb0:	3718      	adds	r7, #24
   10eb2:	46bd      	mov	sp, r7
   10eb4:	bd80      	pop	{r7, pc}
   10eb6:	bf00      	nop
   10eb8:	00022ef8 	.word	0x00022ef8
   10ebc:	00022efc 	.word	0x00022efc
   10ec0:	00022f00 	.word	0x00022f00

00010ec4 <list_extend_from_iter>:

STATIC mp_obj_t list_extend_from_iter(mp_obj_t list, mp_obj_t iterable) {
   10ec4:	b580      	push	{r7, lr}
   10ec6:	b084      	sub	sp, #16
   10ec8:	af00      	add	r7, sp, #0
   10eca:	6078      	str	r0, [r7, #4]
   10ecc:	6039      	str	r1, [r7, #0]
    mp_obj_t iter = mp_getiter(iterable, NULL);
   10ece:	2100      	movs	r1, #0
   10ed0:	6838      	ldr	r0, [r7, #0]
   10ed2:	f7fb fe3d 	bl	cb50 <mp_getiter>
   10ed6:	60f8      	str	r0, [r7, #12]
    mp_obj_t item;
    while ((item = mp_iternext(iter)) != MP_OBJ_STOP_ITERATION) {
   10ed8:	e003      	b.n	10ee2 <list_extend_from_iter+0x1e>
        mp_obj_list_append(list, item);
   10eda:	68b9      	ldr	r1, [r7, #8]
   10edc:	6878      	ldr	r0, [r7, #4]
   10ede:	f000 f985 	bl	111ec <mp_obj_list_append>
    while ((item = mp_iternext(iter)) != MP_OBJ_STOP_ITERATION) {
   10ee2:	68f8      	ldr	r0, [r7, #12]
   10ee4:	f7fb feb6 	bl	cc54 <mp_iternext>
   10ee8:	60b8      	str	r0, [r7, #8]
   10eea:	68bb      	ldr	r3, [r7, #8]
   10eec:	2b04      	cmp	r3, #4
   10eee:	d1f4      	bne.n	10eda <list_extend_from_iter+0x16>
    }
    return list;
   10ef0:	687b      	ldr	r3, [r7, #4]
}
   10ef2:	4618      	mov	r0, r3
   10ef4:	3710      	adds	r7, #16
   10ef6:	46bd      	mov	sp, r7
   10ef8:	bd80      	pop	{r7, pc}
   10efa:	bf00      	nop

00010efc <list_make_new>:

STATIC mp_obj_t list_make_new(const mp_obj_type_t *type_in, size_t n_args, size_t n_kw, const mp_obj_t *args) {
   10efc:	b580      	push	{r7, lr}
   10efe:	b088      	sub	sp, #32
   10f00:	af02      	add	r7, sp, #8
   10f02:	60f8      	str	r0, [r7, #12]
   10f04:	60b9      	str	r1, [r7, #8]
   10f06:	607a      	str	r2, [r7, #4]
   10f08:	603b      	str	r3, [r7, #0]
    (void)type_in;
    mp_arg_check_num(n_args, n_kw, 0, 1, false);
   10f0a:	2300      	movs	r3, #0
   10f0c:	9300      	str	r3, [sp, #0]
   10f0e:	2301      	movs	r3, #1
   10f10:	2200      	movs	r2, #0
   10f12:	6879      	ldr	r1, [r7, #4]
   10f14:	68b8      	ldr	r0, [r7, #8]
   10f16:	f7fc f9d9 	bl	d2cc <mp_arg_check_num>

    switch (n_args) {
   10f1a:	68bb      	ldr	r3, [r7, #8]
   10f1c:	2b00      	cmp	r3, #0
   10f1e:	d105      	bne.n	10f2c <list_make_new+0x30>
        case 0:
            // return a new, empty list
            return mp_obj_new_list(0, NULL);
   10f20:	2100      	movs	r1, #0
   10f22:	2000      	movs	r0, #0
   10f24:	f000 fdf4 	bl	11b10 <mp_obj_new_list>
   10f28:	4603      	mov	r3, r0
   10f2a:	e00b      	b.n	10f44 <list_make_new+0x48>

        case 1:
        default: {
            // make list from iterable
            // TODO: optimize list/tuple
            mp_obj_t list = mp_obj_new_list(0, NULL);
   10f2c:	2100      	movs	r1, #0
   10f2e:	2000      	movs	r0, #0
   10f30:	f000 fdee 	bl	11b10 <mp_obj_new_list>
   10f34:	6178      	str	r0, [r7, #20]
            return list_extend_from_iter(list, args[0]);
   10f36:	683b      	ldr	r3, [r7, #0]
   10f38:	681b      	ldr	r3, [r3, #0]
   10f3a:	4619      	mov	r1, r3
   10f3c:	6978      	ldr	r0, [r7, #20]
   10f3e:	f7ff ffc1 	bl	10ec4 <list_extend_from_iter>
   10f42:	4603      	mov	r3, r0
        }
    }
}
   10f44:	4618      	mov	r0, r3
   10f46:	3718      	adds	r7, #24
   10f48:	46bd      	mov	sp, r7
   10f4a:	bd80      	pop	{r7, pc}

00010f4c <list_unary_op>:

STATIC mp_obj_t list_unary_op(mp_unary_op_t op, mp_obj_t self_in) {
   10f4c:	b580      	push	{r7, lr}
   10f4e:	b084      	sub	sp, #16
   10f50:	af00      	add	r7, sp, #0
   10f52:	6078      	str	r0, [r7, #4]
   10f54:	6039      	str	r1, [r7, #0]
    mp_obj_list_t *self = MP_OBJ_TO_PTR(self_in);
   10f56:	683b      	ldr	r3, [r7, #0]
   10f58:	60fb      	str	r3, [r7, #12]
    switch (op) {
   10f5a:	687b      	ldr	r3, [r7, #4]
   10f5c:	2b04      	cmp	r3, #4
   10f5e:	d002      	beq.n	10f66 <list_unary_op+0x1a>
   10f60:	2b05      	cmp	r3, #5
   10f62:	d00c      	beq.n	10f7e <list_unary_op+0x32>
   10f64:	e011      	b.n	10f8a <list_unary_op+0x3e>
        case MP_UNARY_OP_BOOL: return mp_obj_new_bool(self->len != 0);
   10f66:	68fb      	ldr	r3, [r7, #12]
   10f68:	689b      	ldr	r3, [r3, #8]
   10f6a:	2b00      	cmp	r3, #0
   10f6c:	bf14      	ite	ne
   10f6e:	2301      	movne	r3, #1
   10f70:	2300      	moveq	r3, #0
   10f72:	b2db      	uxtb	r3, r3
   10f74:	4618      	mov	r0, r3
   10f76:	f7ff ff57 	bl	10e28 <mp_obj_new_bool>
   10f7a:	4603      	mov	r3, r0
   10f7c:	e006      	b.n	10f8c <list_unary_op+0x40>
        case MP_UNARY_OP_LEN: return MP_OBJ_NEW_SMALL_INT(self->len);
   10f7e:	68fb      	ldr	r3, [r7, #12]
   10f80:	689b      	ldr	r3, [r3, #8]
   10f82:	005b      	lsls	r3, r3, #1
   10f84:	f043 0301 	orr.w	r3, r3, #1
   10f88:	e000      	b.n	10f8c <list_unary_op+0x40>
        case MP_UNARY_OP_SIZEOF: {
            size_t sz = sizeof(*self) + sizeof(mp_obj_t) * self->alloc;
            return MP_OBJ_NEW_SMALL_INT(sz);
        }
        #endif
        default: return MP_OBJ_NULL; // op not supported
   10f8a:	2300      	movs	r3, #0
    }
}
   10f8c:	4618      	mov	r0, r3
   10f8e:	3710      	adds	r7, #16
   10f90:	46bd      	mov	sp, r7
   10f92:	bd80      	pop	{r7, pc}

00010f94 <list_binary_op>:

STATIC mp_obj_t list_binary_op(mp_binary_op_t op, mp_obj_t lhs, mp_obj_t rhs) {
   10f94:	b580      	push	{r7, lr}
   10f96:	b08e      	sub	sp, #56	; 0x38
   10f98:	af02      	add	r7, sp, #8
   10f9a:	60f8      	str	r0, [r7, #12]
   10f9c:	60b9      	str	r1, [r7, #8]
   10f9e:	607a      	str	r2, [r7, #4]
    mp_obj_list_t *o = MP_OBJ_TO_PTR(lhs);
   10fa0:	68bb      	ldr	r3, [r7, #8]
   10fa2:	62fb      	str	r3, [r7, #44]	; 0x2c
    switch (op) {
   10fa4:	68fb      	ldr	r3, [r7, #12]
   10fa6:	2b1c      	cmp	r3, #28
   10fa8:	f200 80d0 	bhi.w	1114c <list_binary_op+0x1b8>
   10fac:	a201      	add	r2, pc, #4	; (adr r2, 10fb4 <list_binary_op+0x20>)
   10fae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   10fb2:	bf00      	nop
   10fb4:	000110f5 	.word	0x000110f5
   10fb8:	000110f5 	.word	0x000110f5
   10fbc:	000110f5 	.word	0x000110f5
   10fc0:	000110f5 	.word	0x000110f5
   10fc4:	000110f5 	.word	0x000110f5
   10fc8:	0001114d 	.word	0x0001114d
   10fcc:	0001114d 	.word	0x0001114d
   10fd0:	0001114d 	.word	0x0001114d
   10fd4:	0001114d 	.word	0x0001114d
   10fd8:	0001114d 	.word	0x0001114d
   10fdc:	0001114d 	.word	0x0001114d
   10fe0:	0001114d 	.word	0x0001114d
   10fe4:	0001114d 	.word	0x0001114d
   10fe8:	0001114d 	.word	0x0001114d
   10fec:	00011093 	.word	0x00011093
   10ff0:	0001114d 	.word	0x0001114d
   10ff4:	0001114d 	.word	0x0001114d
   10ff8:	0001114d 	.word	0x0001114d
   10ffc:	0001114d 	.word	0x0001114d
   11000:	0001114d 	.word	0x0001114d
   11004:	0001114d 	.word	0x0001114d
   11008:	0001114d 	.word	0x0001114d
   1100c:	0001114d 	.word	0x0001114d
   11010:	0001114d 	.word	0x0001114d
   11014:	0001114d 	.word	0x0001114d
   11018:	0001114d 	.word	0x0001114d
   1101c:	00011029 	.word	0x00011029
   11020:	0001114d 	.word	0x0001114d
   11024:	0001109f 	.word	0x0001109f
        case MP_BINARY_OP_ADD: {
            if (!MP_OBJ_IS_TYPE(rhs, &mp_type_list)) {
   11028:	6878      	ldr	r0, [r7, #4]
   1102a:	f7ff feeb 	bl	10e04 <MP_OBJ_IS_OBJ>
   1102e:	4603      	mov	r3, r0
   11030:	f083 0301 	eor.w	r3, r3, #1
   11034:	b2db      	uxtb	r3, r3
   11036:	2b00      	cmp	r3, #0
   11038:	d104      	bne.n	11044 <list_binary_op+0xb0>
   1103a:	687b      	ldr	r3, [r7, #4]
   1103c:	681b      	ldr	r3, [r3, #0]
   1103e:	4a46      	ldr	r2, [pc, #280]	; (11158 <list_binary_op+0x1c4>)
   11040:	4293      	cmp	r3, r2
   11042:	d001      	beq.n	11048 <list_binary_op+0xb4>
                return MP_OBJ_NULL; // op not supported
   11044:	2300      	movs	r3, #0
   11046:	e082      	b.n	1114e <list_binary_op+0x1ba>
            }
            mp_obj_list_t *p = MP_OBJ_TO_PTR(rhs);
   11048:	687b      	ldr	r3, [r7, #4]
   1104a:	62bb      	str	r3, [r7, #40]	; 0x28
            mp_obj_list_t *s = list_new(o->len + p->len);
   1104c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1104e:	689a      	ldr	r2, [r3, #8]
   11050:	6abb      	ldr	r3, [r7, #40]	; 0x28
   11052:	689b      	ldr	r3, [r3, #8]
   11054:	4413      	add	r3, r2
   11056:	4618      	mov	r0, r3
   11058:	f000 fd48 	bl	11aec <list_new>
   1105c:	6278      	str	r0, [r7, #36]	; 0x24
            mp_seq_cat(s->items, o->items, o->len, p->items, p->len, mp_obj_t);
   1105e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   11060:	68d8      	ldr	r0, [r3, #12]
   11062:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   11064:	68d9      	ldr	r1, [r3, #12]
   11066:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   11068:	689b      	ldr	r3, [r3, #8]
   1106a:	009b      	lsls	r3, r3, #2
   1106c:	461a      	mov	r2, r3
   1106e:	f00b fe03 	bl	1cc78 <memcpy>
   11072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   11074:	68da      	ldr	r2, [r3, #12]
   11076:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   11078:	689b      	ldr	r3, [r3, #8]
   1107a:	009b      	lsls	r3, r3, #2
   1107c:	18d0      	adds	r0, r2, r3
   1107e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   11080:	68d9      	ldr	r1, [r3, #12]
   11082:	6abb      	ldr	r3, [r7, #40]	; 0x28
   11084:	689b      	ldr	r3, [r3, #8]
   11086:	009b      	lsls	r3, r3, #2
   11088:	461a      	mov	r2, r3
   1108a:	f00b fdf5 	bl	1cc78 <memcpy>
            return MP_OBJ_FROM_PTR(s);
   1108e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   11090:	e05d      	b.n	1114e <list_binary_op+0x1ba>
        }
        case MP_BINARY_OP_INPLACE_ADD: {
            list_extend(lhs, rhs);
   11092:	6879      	ldr	r1, [r7, #4]
   11094:	68b8      	ldr	r0, [r7, #8]
   11096:	f000 f909 	bl	112ac <list_extend>
            return lhs;
   1109a:	68bb      	ldr	r3, [r7, #8]
   1109c:	e057      	b.n	1114e <list_binary_op+0x1ba>
        }
        case MP_BINARY_OP_MULTIPLY: {
            mp_int_t n;
            if (!mp_obj_get_int_maybe(rhs, &n)) {
   1109e:	f107 0314 	add.w	r3, r7, #20
   110a2:	4619      	mov	r1, r3
   110a4:	6878      	ldr	r0, [r7, #4]
   110a6:	f7fc ff3f 	bl	df28 <mp_obj_get_int_maybe>
   110aa:	4603      	mov	r3, r0
   110ac:	f083 0301 	eor.w	r3, r3, #1
   110b0:	b2db      	uxtb	r3, r3
   110b2:	2b00      	cmp	r3, #0
   110b4:	d001      	beq.n	110ba <list_binary_op+0x126>
                return MP_OBJ_NULL; // op not supported
   110b6:	2300      	movs	r3, #0
   110b8:	e049      	b.n	1114e <list_binary_op+0x1ba>
            }
            if (n < 0) {
   110ba:	697b      	ldr	r3, [r7, #20]
   110bc:	2b00      	cmp	r3, #0
   110be:	da01      	bge.n	110c4 <list_binary_op+0x130>
                n = 0;
   110c0:	2300      	movs	r3, #0
   110c2:	617b      	str	r3, [r7, #20]
            }
            mp_obj_list_t *s = list_new(o->len * n);
   110c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   110c6:	689b      	ldr	r3, [r3, #8]
   110c8:	697a      	ldr	r2, [r7, #20]
   110ca:	fb02 f303 	mul.w	r3, r2, r3
   110ce:	4618      	mov	r0, r3
   110d0:	f000 fd0c 	bl	11aec <list_new>
   110d4:	6238      	str	r0, [r7, #32]
            mp_seq_multiply(o->items, sizeof(*o->items), o->len, n, s->items);
   110d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   110d8:	68d8      	ldr	r0, [r3, #12]
   110da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   110dc:	689a      	ldr	r2, [r3, #8]
   110de:	697b      	ldr	r3, [r7, #20]
   110e0:	4619      	mov	r1, r3
   110e2:	6a3b      	ldr	r3, [r7, #32]
   110e4:	68db      	ldr	r3, [r3, #12]
   110e6:	9300      	str	r3, [sp, #0]
   110e8:	460b      	mov	r3, r1
   110ea:	2104      	movs	r1, #4
   110ec:	f006 fc78 	bl	179e0 <mp_seq_multiply>
            return MP_OBJ_FROM_PTR(s);
   110f0:	6a3b      	ldr	r3, [r7, #32]
   110f2:	e02c      	b.n	1114e <list_binary_op+0x1ba>
        case MP_BINARY_OP_EQUAL:
        case MP_BINARY_OP_LESS:
        case MP_BINARY_OP_LESS_EQUAL:
        case MP_BINARY_OP_MORE:
        case MP_BINARY_OP_MORE_EQUAL: {
            if (!MP_OBJ_IS_TYPE(rhs, &mp_type_list)) {
   110f4:	6878      	ldr	r0, [r7, #4]
   110f6:	f7ff fe85 	bl	10e04 <MP_OBJ_IS_OBJ>
   110fa:	4603      	mov	r3, r0
   110fc:	f083 0301 	eor.w	r3, r3, #1
   11100:	b2db      	uxtb	r3, r3
   11102:	2b00      	cmp	r3, #0
   11104:	d104      	bne.n	11110 <list_binary_op+0x17c>
   11106:	687b      	ldr	r3, [r7, #4]
   11108:	681b      	ldr	r3, [r3, #0]
   1110a:	4a13      	ldr	r2, [pc, #76]	; (11158 <list_binary_op+0x1c4>)
   1110c:	4293      	cmp	r3, r2
   1110e:	d006      	beq.n	1111e <list_binary_op+0x18a>
                if (op == MP_BINARY_OP_EQUAL) {
   11110:	68fb      	ldr	r3, [r7, #12]
   11112:	2b02      	cmp	r3, #2
   11114:	d101      	bne.n	1111a <list_binary_op+0x186>
                    return mp_const_false;
   11116:	4b11      	ldr	r3, [pc, #68]	; (1115c <list_binary_op+0x1c8>)
   11118:	e019      	b.n	1114e <list_binary_op+0x1ba>
                }
                return MP_OBJ_NULL; // op not supported
   1111a:	2300      	movs	r3, #0
   1111c:	e017      	b.n	1114e <list_binary_op+0x1ba>
            }

            mp_obj_list_t *another = MP_OBJ_TO_PTR(rhs);
   1111e:	687b      	ldr	r3, [r7, #4]
   11120:	61fb      	str	r3, [r7, #28]
            bool res = mp_seq_cmp_objs(op, o->items, o->len, another->items, another->len);
   11122:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   11124:	68d9      	ldr	r1, [r3, #12]
   11126:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   11128:	689a      	ldr	r2, [r3, #8]
   1112a:	69fb      	ldr	r3, [r7, #28]
   1112c:	68d8      	ldr	r0, [r3, #12]
   1112e:	69fb      	ldr	r3, [r7, #28]
   11130:	689b      	ldr	r3, [r3, #8]
   11132:	9300      	str	r3, [sp, #0]
   11134:	4603      	mov	r3, r0
   11136:	68f8      	ldr	r0, [r7, #12]
   11138:	f006 fd14 	bl	17b64 <mp_seq_cmp_objs>
   1113c:	4603      	mov	r3, r0
   1113e:	76fb      	strb	r3, [r7, #27]
            return mp_obj_new_bool(res);
   11140:	7efb      	ldrb	r3, [r7, #27]
   11142:	4618      	mov	r0, r3
   11144:	f7ff fe70 	bl	10e28 <mp_obj_new_bool>
   11148:	4603      	mov	r3, r0
   1114a:	e000      	b.n	1114e <list_binary_op+0x1ba>
        }

        default:
            return MP_OBJ_NULL; // op not supported
   1114c:	2300      	movs	r3, #0
    }
}
   1114e:	4618      	mov	r0, r3
   11150:	3730      	adds	r7, #48	; 0x30
   11152:	46bd      	mov	sp, r7
   11154:	bd80      	pop	{r7, pc}
   11156:	bf00      	nop
   11158:	00023114 	.word	0x00023114
   1115c:	00021b70 	.word	0x00021b70

00011160 <list_subscr>:

STATIC mp_obj_t list_subscr(mp_obj_t self_in, mp_obj_t index, mp_obj_t value) {
   11160:	b580      	push	{r7, lr}
   11162:	b088      	sub	sp, #32
   11164:	af00      	add	r7, sp, #0
   11166:	60f8      	str	r0, [r7, #12]
   11168:	60b9      	str	r1, [r7, #8]
   1116a:	607a      	str	r2, [r7, #4]
    if (value == MP_OBJ_NULL) {
   1116c:	687b      	ldr	r3, [r7, #4]
   1116e:	2b00      	cmp	r3, #0
   11170:	d10b      	bne.n	1118a <list_subscr+0x2a>
            mp_seq_clear(self->items, self->len + len_adj, self->len, sizeof(*self->items));
            self->len += len_adj;
            return mp_const_none;
        }
#endif
        mp_obj_t args[2] = {self_in, index};
   11172:	68fb      	ldr	r3, [r7, #12]
   11174:	613b      	str	r3, [r7, #16]
   11176:	68bb      	ldr	r3, [r7, #8]
   11178:	617b      	str	r3, [r7, #20]
        list_pop(2, args);
   1117a:	f107 0310 	add.w	r3, r7, #16
   1117e:	4619      	mov	r1, r3
   11180:	2002      	movs	r0, #2
   11182:	f000 f91b 	bl	113bc <list_pop>
        return mp_const_none;
   11186:	4b10      	ldr	r3, [pc, #64]	; (111c8 <list_subscr+0x68>)
   11188:	e01a      	b.n	111c0 <list_subscr+0x60>
    } else if (value == MP_OBJ_SENTINEL) {
   1118a:	687b      	ldr	r3, [r7, #4]
   1118c:	2b08      	cmp	r3, #8
   1118e:	d111      	bne.n	111b4 <list_subscr+0x54>
        // load
        mp_obj_list_t *self = MP_OBJ_TO_PTR(self_in);
   11190:	68fb      	ldr	r3, [r7, #12]
   11192:	61fb      	str	r3, [r7, #28]
            mp_obj_list_t *res = list_new(slice.stop - slice.start);
            mp_seq_copy(res->items, self->items + slice.start, res->len, mp_obj_t);
            return MP_OBJ_FROM_PTR(res);
        }
#endif
        size_t index_val = mp_get_index(self->base.type, self->len, index, false);
   11194:	69fb      	ldr	r3, [r7, #28]
   11196:	6818      	ldr	r0, [r3, #0]
   11198:	69fb      	ldr	r3, [r7, #28]
   1119a:	6899      	ldr	r1, [r3, #8]
   1119c:	2300      	movs	r3, #0
   1119e:	68ba      	ldr	r2, [r7, #8]
   111a0:	f7fc ff52 	bl	e048 <mp_get_index>
   111a4:	61b8      	str	r0, [r7, #24]
        return self->items[index_val];
   111a6:	69fb      	ldr	r3, [r7, #28]
   111a8:	68da      	ldr	r2, [r3, #12]
   111aa:	69bb      	ldr	r3, [r7, #24]
   111ac:	009b      	lsls	r3, r3, #2
   111ae:	4413      	add	r3, r2
   111b0:	681b      	ldr	r3, [r3, #0]
   111b2:	e005      	b.n	111c0 <list_subscr+0x60>
            }
            self->len += len_adj;
            return mp_const_none;
        }
#endif
        mp_obj_list_store(self_in, index, value);
   111b4:	687a      	ldr	r2, [r7, #4]
   111b6:	68b9      	ldr	r1, [r7, #8]
   111b8:	68f8      	ldr	r0, [r7, #12]
   111ba:	f000 fcf5 	bl	11ba8 <mp_obj_list_store>
        return mp_const_none;
   111be:	4b02      	ldr	r3, [pc, #8]	; (111c8 <list_subscr+0x68>)
    }
}
   111c0:	4618      	mov	r0, r3
   111c2:	3720      	adds	r7, #32
   111c4:	46bd      	mov	sp, r7
   111c6:	bd80      	pop	{r7, pc}
   111c8:	0002345c 	.word	0x0002345c

000111cc <list_getiter>:

STATIC mp_obj_t list_getiter(mp_obj_t o_in, mp_obj_iter_buf_t *iter_buf) {
   111cc:	b580      	push	{r7, lr}
   111ce:	b082      	sub	sp, #8
   111d0:	af00      	add	r7, sp, #0
   111d2:	6078      	str	r0, [r7, #4]
   111d4:	6039      	str	r1, [r7, #0]
    return mp_obj_new_list_iterator(o_in, 0, iter_buf);
   111d6:	683a      	ldr	r2, [r7, #0]
   111d8:	2100      	movs	r1, #0
   111da:	6878      	ldr	r0, [r7, #4]
   111dc:	f000 fd26 	bl	11c2c <mp_obj_new_list_iterator>
   111e0:	4603      	mov	r3, r0
}
   111e2:	4618      	mov	r0, r3
   111e4:	3708      	adds	r7, #8
   111e6:	46bd      	mov	sp, r7
   111e8:	bd80      	pop	{r7, pc}
   111ea:	bf00      	nop

000111ec <mp_obj_list_append>:

mp_obj_t mp_obj_list_append(mp_obj_t self_in, mp_obj_t arg) {
   111ec:	b580      	push	{r7, lr}
   111ee:	b084      	sub	sp, #16
   111f0:	af00      	add	r7, sp, #0
   111f2:	6078      	str	r0, [r7, #4]
   111f4:	6039      	str	r1, [r7, #0]
    mp_check_self(MP_OBJ_IS_TYPE(self_in, &mp_type_list));
   111f6:	6878      	ldr	r0, [r7, #4]
   111f8:	f7ff fe04 	bl	10e04 <MP_OBJ_IS_OBJ>
   111fc:	4603      	mov	r3, r0
   111fe:	f083 0301 	eor.w	r3, r3, #1
   11202:	b2db      	uxtb	r3, r3
   11204:	2b00      	cmp	r3, #0
   11206:	d104      	bne.n	11212 <mp_obj_list_append+0x26>
   11208:	687b      	ldr	r3, [r7, #4]
   1120a:	681b      	ldr	r3, [r3, #0]
   1120c:	4a22      	ldr	r2, [pc, #136]	; (11298 <mp_obj_list_append+0xac>)
   1120e:	4293      	cmp	r3, r2
   11210:	d005      	beq.n	1121e <mp_obj_list_append+0x32>
   11212:	4b22      	ldr	r3, [pc, #136]	; (1129c <mp_obj_list_append+0xb0>)
   11214:	4a22      	ldr	r2, [pc, #136]	; (112a0 <mp_obj_list_append+0xb4>)
   11216:	21eb      	movs	r1, #235	; 0xeb
   11218:	4822      	ldr	r0, [pc, #136]	; (112a4 <mp_obj_list_append+0xb8>)
   1121a:	f00a fa59 	bl	1b6d0 <__assert_func>
    mp_obj_list_t *self = MP_OBJ_TO_PTR(self_in);
   1121e:	687b      	ldr	r3, [r7, #4]
   11220:	60fb      	str	r3, [r7, #12]
    if (self->len >= self->alloc) {
   11222:	68fb      	ldr	r3, [r7, #12]
   11224:	689a      	ldr	r2, [r3, #8]
   11226:	68fb      	ldr	r3, [r7, #12]
   11228:	685b      	ldr	r3, [r3, #4]
   1122a:	429a      	cmp	r2, r3
   1122c:	d324      	bcc.n	11278 <mp_obj_list_append+0x8c>
        self->items = m_renew(mp_obj_t, self->items, self->alloc, self->alloc * 2);
   1122e:	68fb      	ldr	r3, [r7, #12]
   11230:	68da      	ldr	r2, [r3, #12]
   11232:	68fb      	ldr	r3, [r7, #12]
   11234:	685b      	ldr	r3, [r3, #4]
   11236:	00db      	lsls	r3, r3, #3
   11238:	4619      	mov	r1, r3
   1123a:	4610      	mov	r0, r2
   1123c:	f7ef f8ba 	bl	3b4 <m_realloc>
   11240:	4602      	mov	r2, r0
   11242:	68fb      	ldr	r3, [r7, #12]
   11244:	60da      	str	r2, [r3, #12]
        self->alloc *= 2;
   11246:	68fb      	ldr	r3, [r7, #12]
   11248:	685b      	ldr	r3, [r3, #4]
   1124a:	005a      	lsls	r2, r3, #1
   1124c:	68fb      	ldr	r3, [r7, #12]
   1124e:	605a      	str	r2, [r3, #4]
        mp_seq_clear(self->items, self->len + 1, self->alloc, sizeof(*self->items));
   11250:	68fb      	ldr	r3, [r7, #12]
   11252:	68da      	ldr	r2, [r3, #12]
   11254:	68fb      	ldr	r3, [r7, #12]
   11256:	689b      	ldr	r3, [r3, #8]
   11258:	3301      	adds	r3, #1
   1125a:	009b      	lsls	r3, r3, #2
   1125c:	18d0      	adds	r0, r2, r3
   1125e:	68fb      	ldr	r3, [r7, #12]
   11260:	685a      	ldr	r2, [r3, #4]
   11262:	68fb      	ldr	r3, [r7, #12]
   11264:	689b      	ldr	r3, [r3, #8]
   11266:	1ad3      	subs	r3, r2, r3
   11268:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1126c:	3b01      	subs	r3, #1
   1126e:	009b      	lsls	r3, r3, #2
   11270:	461a      	mov	r2, r3
   11272:	2100      	movs	r1, #0
   11274:	f00b fd9c 	bl	1cdb0 <memset>
    }
    self->items[self->len++] = arg;
   11278:	68fb      	ldr	r3, [r7, #12]
   1127a:	68da      	ldr	r2, [r3, #12]
   1127c:	68fb      	ldr	r3, [r7, #12]
   1127e:	689b      	ldr	r3, [r3, #8]
   11280:	1c58      	adds	r0, r3, #1
   11282:	68f9      	ldr	r1, [r7, #12]
   11284:	6088      	str	r0, [r1, #8]
   11286:	009b      	lsls	r3, r3, #2
   11288:	4413      	add	r3, r2
   1128a:	683a      	ldr	r2, [r7, #0]
   1128c:	601a      	str	r2, [r3, #0]
    return mp_const_none; // return None, as per CPython
   1128e:	4b06      	ldr	r3, [pc, #24]	; (112a8 <mp_obj_list_append+0xbc>)
}
   11290:	4618      	mov	r0, r3
   11292:	3710      	adds	r7, #16
   11294:	46bd      	mov	sp, r7
   11296:	bd80      	pop	{r7, pc}
   11298:	00023114 	.word	0x00023114
   1129c:	00022f04 	.word	0x00022f04
   112a0:	00023150 	.word	0x00023150
   112a4:	00022f60 	.word	0x00022f60
   112a8:	0002345c 	.word	0x0002345c

000112ac <list_extend>:

STATIC mp_obj_t list_extend(mp_obj_t self_in, mp_obj_t arg_in) {
   112ac:	b580      	push	{r7, lr}
   112ae:	b084      	sub	sp, #16
   112b0:	af00      	add	r7, sp, #0
   112b2:	6078      	str	r0, [r7, #4]
   112b4:	6039      	str	r1, [r7, #0]
    mp_check_self(MP_OBJ_IS_TYPE(self_in, &mp_type_list));
   112b6:	6878      	ldr	r0, [r7, #4]
   112b8:	f7ff fda4 	bl	10e04 <MP_OBJ_IS_OBJ>
   112bc:	4603      	mov	r3, r0
   112be:	f083 0301 	eor.w	r3, r3, #1
   112c2:	b2db      	uxtb	r3, r3
   112c4:	2b00      	cmp	r3, #0
   112c6:	d104      	bne.n	112d2 <list_extend+0x26>
   112c8:	687b      	ldr	r3, [r7, #4]
   112ca:	681b      	ldr	r3, [r3, #0]
   112cc:	4a36      	ldr	r2, [pc, #216]	; (113a8 <list_extend+0xfc>)
   112ce:	4293      	cmp	r3, r2
   112d0:	d005      	beq.n	112de <list_extend+0x32>
   112d2:	4b36      	ldr	r3, [pc, #216]	; (113ac <list_extend+0x100>)
   112d4:	4a36      	ldr	r2, [pc, #216]	; (113b0 <list_extend+0x104>)
   112d6:	21f7      	movs	r1, #247	; 0xf7
   112d8:	4836      	ldr	r0, [pc, #216]	; (113b4 <list_extend+0x108>)
   112da:	f00a f9f9 	bl	1b6d0 <__assert_func>
    if (MP_OBJ_IS_TYPE(arg_in, &mp_type_list)) {
   112de:	6838      	ldr	r0, [r7, #0]
   112e0:	f7ff fd90 	bl	10e04 <MP_OBJ_IS_OBJ>
   112e4:	4603      	mov	r3, r0
   112e6:	2b00      	cmp	r3, #0
   112e8:	d054      	beq.n	11394 <list_extend+0xe8>
   112ea:	683b      	ldr	r3, [r7, #0]
   112ec:	681b      	ldr	r3, [r3, #0]
   112ee:	4a2e      	ldr	r2, [pc, #184]	; (113a8 <list_extend+0xfc>)
   112f0:	4293      	cmp	r3, r2
   112f2:	d14f      	bne.n	11394 <list_extend+0xe8>
        mp_obj_list_t *self = MP_OBJ_TO_PTR(self_in);
   112f4:	687b      	ldr	r3, [r7, #4]
   112f6:	60fb      	str	r3, [r7, #12]
        mp_obj_list_t *arg = MP_OBJ_TO_PTR(arg_in);
   112f8:	683b      	ldr	r3, [r7, #0]
   112fa:	60bb      	str	r3, [r7, #8]

        if (self->len + arg->len > self->alloc) {
   112fc:	68fb      	ldr	r3, [r7, #12]
   112fe:	689a      	ldr	r2, [r3, #8]
   11300:	68bb      	ldr	r3, [r7, #8]
   11302:	689b      	ldr	r3, [r3, #8]
   11304:	441a      	add	r2, r3
   11306:	68fb      	ldr	r3, [r7, #12]
   11308:	685b      	ldr	r3, [r3, #4]
   1130a:	429a      	cmp	r2, r3
   1130c:	d92c      	bls.n	11368 <list_extend+0xbc>
            // TODO: use alloc policy for "4"
            self->items = m_renew(mp_obj_t, self->items, self->alloc, self->len + arg->len + 4);
   1130e:	68fb      	ldr	r3, [r7, #12]
   11310:	68d8      	ldr	r0, [r3, #12]
   11312:	68fb      	ldr	r3, [r7, #12]
   11314:	689a      	ldr	r2, [r3, #8]
   11316:	68bb      	ldr	r3, [r7, #8]
   11318:	689b      	ldr	r3, [r3, #8]
   1131a:	4413      	add	r3, r2
   1131c:	3304      	adds	r3, #4
   1131e:	009b      	lsls	r3, r3, #2
   11320:	4619      	mov	r1, r3
   11322:	f7ef f847 	bl	3b4 <m_realloc>
   11326:	4602      	mov	r2, r0
   11328:	68fb      	ldr	r3, [r7, #12]
   1132a:	60da      	str	r2, [r3, #12]
            self->alloc = self->len + arg->len + 4;
   1132c:	68fb      	ldr	r3, [r7, #12]
   1132e:	689a      	ldr	r2, [r3, #8]
   11330:	68bb      	ldr	r3, [r7, #8]
   11332:	689b      	ldr	r3, [r3, #8]
   11334:	4413      	add	r3, r2
   11336:	1d1a      	adds	r2, r3, #4
   11338:	68fb      	ldr	r3, [r7, #12]
   1133a:	605a      	str	r2, [r3, #4]
            mp_seq_clear(self->items, self->len + arg->len, self->alloc, sizeof(*self->items));
   1133c:	68fb      	ldr	r3, [r7, #12]
   1133e:	68da      	ldr	r2, [r3, #12]
   11340:	68fb      	ldr	r3, [r7, #12]
   11342:	6899      	ldr	r1, [r3, #8]
   11344:	68bb      	ldr	r3, [r7, #8]
   11346:	689b      	ldr	r3, [r3, #8]
   11348:	440b      	add	r3, r1
   1134a:	009b      	lsls	r3, r3, #2
   1134c:	18d0      	adds	r0, r2, r3
   1134e:	68fb      	ldr	r3, [r7, #12]
   11350:	685a      	ldr	r2, [r3, #4]
   11352:	68fb      	ldr	r3, [r7, #12]
   11354:	6899      	ldr	r1, [r3, #8]
   11356:	68bb      	ldr	r3, [r7, #8]
   11358:	689b      	ldr	r3, [r3, #8]
   1135a:	440b      	add	r3, r1
   1135c:	1ad3      	subs	r3, r2, r3
   1135e:	009b      	lsls	r3, r3, #2
   11360:	461a      	mov	r2, r3
   11362:	2100      	movs	r1, #0
   11364:	f00b fd24 	bl	1cdb0 <memset>
        }

        memcpy(self->items + self->len, arg->items, sizeof(mp_obj_t) * arg->len);
   11368:	68fb      	ldr	r3, [r7, #12]
   1136a:	68da      	ldr	r2, [r3, #12]
   1136c:	68fb      	ldr	r3, [r7, #12]
   1136e:	689b      	ldr	r3, [r3, #8]
   11370:	009b      	lsls	r3, r3, #2
   11372:	18d0      	adds	r0, r2, r3
   11374:	68bb      	ldr	r3, [r7, #8]
   11376:	68d9      	ldr	r1, [r3, #12]
   11378:	68bb      	ldr	r3, [r7, #8]
   1137a:	689b      	ldr	r3, [r3, #8]
   1137c:	009b      	lsls	r3, r3, #2
   1137e:	461a      	mov	r2, r3
   11380:	f00b fc7a 	bl	1cc78 <memcpy>
        self->len += arg->len;
   11384:	68fb      	ldr	r3, [r7, #12]
   11386:	689a      	ldr	r2, [r3, #8]
   11388:	68bb      	ldr	r3, [r7, #8]
   1138a:	689b      	ldr	r3, [r3, #8]
   1138c:	441a      	add	r2, r3
   1138e:	68fb      	ldr	r3, [r7, #12]
   11390:	609a      	str	r2, [r3, #8]
    if (MP_OBJ_IS_TYPE(arg_in, &mp_type_list)) {
   11392:	e003      	b.n	1139c <list_extend+0xf0>
    } else {
        list_extend_from_iter(self_in, arg_in);
   11394:	6839      	ldr	r1, [r7, #0]
   11396:	6878      	ldr	r0, [r7, #4]
   11398:	f7ff fd94 	bl	10ec4 <list_extend_from_iter>
    }
    return mp_const_none; // return None, as per CPython
   1139c:	4b06      	ldr	r3, [pc, #24]	; (113b8 <list_extend+0x10c>)
}
   1139e:	4618      	mov	r0, r3
   113a0:	3710      	adds	r7, #16
   113a2:	46bd      	mov	sp, r7
   113a4:	bd80      	pop	{r7, pc}
   113a6:	bf00      	nop
   113a8:	00023114 	.word	0x00023114
   113ac:	00022f04 	.word	0x00022f04
   113b0:	00023164 	.word	0x00023164
   113b4:	00022f60 	.word	0x00022f60
   113b8:	0002345c 	.word	0x0002345c

000113bc <list_pop>:

STATIC mp_obj_t list_pop(size_t n_args, const mp_obj_t *args) {
   113bc:	b580      	push	{r7, lr}
   113be:	b086      	sub	sp, #24
   113c0:	af00      	add	r7, sp, #0
   113c2:	6078      	str	r0, [r7, #4]
   113c4:	6039      	str	r1, [r7, #0]
    mp_check_self(MP_OBJ_IS_TYPE(args[0], &mp_type_list));
   113c6:	683b      	ldr	r3, [r7, #0]
   113c8:	681b      	ldr	r3, [r3, #0]
   113ca:	4618      	mov	r0, r3
   113cc:	f7ff fd1a 	bl	10e04 <MP_OBJ_IS_OBJ>
   113d0:	4603      	mov	r3, r0
   113d2:	f083 0301 	eor.w	r3, r3, #1
   113d6:	b2db      	uxtb	r3, r3
   113d8:	2b00      	cmp	r3, #0
   113da:	d105      	bne.n	113e8 <list_pop+0x2c>
   113dc:	683b      	ldr	r3, [r7, #0]
   113de:	681b      	ldr	r3, [r3, #0]
   113e0:	681b      	ldr	r3, [r3, #0]
   113e2:	4a37      	ldr	r2, [pc, #220]	; (114c0 <list_pop+0x104>)
   113e4:	4293      	cmp	r3, r2
   113e6:	d006      	beq.n	113f6 <list_pop+0x3a>
   113e8:	4b36      	ldr	r3, [pc, #216]	; (114c4 <list_pop+0x108>)
   113ea:	4a37      	ldr	r2, [pc, #220]	; (114c8 <list_pop+0x10c>)
   113ec:	f44f 7186 	mov.w	r1, #268	; 0x10c
   113f0:	4836      	ldr	r0, [pc, #216]	; (114cc <list_pop+0x110>)
   113f2:	f00a f96d 	bl	1b6d0 <__assert_func>
    mp_obj_list_t *self = MP_OBJ_TO_PTR(args[0]);
   113f6:	683b      	ldr	r3, [r7, #0]
   113f8:	681b      	ldr	r3, [r3, #0]
   113fa:	617b      	str	r3, [r7, #20]
    if (self->len == 0) {
   113fc:	697b      	ldr	r3, [r7, #20]
   113fe:	689b      	ldr	r3, [r3, #8]
   11400:	2b00      	cmp	r3, #0
   11402:	d103      	bne.n	1140c <list_pop+0x50>
        mp_raise_msg(&mp_type_IndexError, "pop from empty list");
   11404:	4932      	ldr	r1, [pc, #200]	; (114d0 <list_pop+0x114>)
   11406:	4833      	ldr	r0, [pc, #204]	; (114d4 <list_pop+0x118>)
   11408:	f7fb fed2 	bl	d1b0 <mp_raise_msg>
    }
    size_t index = mp_get_index(self->base.type, self->len, n_args == 1 ? MP_OBJ_NEW_SMALL_INT(-1) : args[1], false);
   1140c:	697b      	ldr	r3, [r7, #20]
   1140e:	6818      	ldr	r0, [r3, #0]
   11410:	697b      	ldr	r3, [r7, #20]
   11412:	6899      	ldr	r1, [r3, #8]
   11414:	687b      	ldr	r3, [r7, #4]
   11416:	2b01      	cmp	r3, #1
   11418:	d002      	beq.n	11420 <list_pop+0x64>
   1141a:	683b      	ldr	r3, [r7, #0]
   1141c:	685a      	ldr	r2, [r3, #4]
   1141e:	e001      	b.n	11424 <list_pop+0x68>
   11420:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   11424:	2300      	movs	r3, #0
   11426:	f7fc fe0f 	bl	e048 <mp_get_index>
   1142a:	6138      	str	r0, [r7, #16]
    mp_obj_t ret = self->items[index];
   1142c:	697b      	ldr	r3, [r7, #20]
   1142e:	68da      	ldr	r2, [r3, #12]
   11430:	693b      	ldr	r3, [r7, #16]
   11432:	009b      	lsls	r3, r3, #2
   11434:	4413      	add	r3, r2
   11436:	681b      	ldr	r3, [r3, #0]
   11438:	60fb      	str	r3, [r7, #12]
    self->len -= 1;
   1143a:	697b      	ldr	r3, [r7, #20]
   1143c:	689b      	ldr	r3, [r3, #8]
   1143e:	1e5a      	subs	r2, r3, #1
   11440:	697b      	ldr	r3, [r7, #20]
   11442:	609a      	str	r2, [r3, #8]
    memmove(self->items + index, self->items + index + 1, (self->len - index) * sizeof(mp_obj_t));
   11444:	697b      	ldr	r3, [r7, #20]
   11446:	68da      	ldr	r2, [r3, #12]
   11448:	693b      	ldr	r3, [r7, #16]
   1144a:	009b      	lsls	r3, r3, #2
   1144c:	18d0      	adds	r0, r2, r3
   1144e:	697b      	ldr	r3, [r7, #20]
   11450:	68da      	ldr	r2, [r3, #12]
   11452:	693b      	ldr	r3, [r7, #16]
   11454:	3301      	adds	r3, #1
   11456:	009b      	lsls	r3, r3, #2
   11458:	18d1      	adds	r1, r2, r3
   1145a:	697b      	ldr	r3, [r7, #20]
   1145c:	689a      	ldr	r2, [r3, #8]
   1145e:	693b      	ldr	r3, [r7, #16]
   11460:	1ad3      	subs	r3, r2, r3
   11462:	009b      	lsls	r3, r3, #2
   11464:	461a      	mov	r2, r3
   11466:	f00b fc6d 	bl	1cd44 <memmove>
    // Clear stale pointer from slot which just got freed to prevent GC issues
    self->items[self->len] = MP_OBJ_NULL;
   1146a:	697b      	ldr	r3, [r7, #20]
   1146c:	68da      	ldr	r2, [r3, #12]
   1146e:	697b      	ldr	r3, [r7, #20]
   11470:	689b      	ldr	r3, [r3, #8]
   11472:	009b      	lsls	r3, r3, #2
   11474:	4413      	add	r3, r2
   11476:	2200      	movs	r2, #0
   11478:	601a      	str	r2, [r3, #0]
    if (self->alloc > LIST_MIN_ALLOC && self->alloc > 2 * self->len) {
   1147a:	697b      	ldr	r3, [r7, #20]
   1147c:	685b      	ldr	r3, [r3, #4]
   1147e:	2b04      	cmp	r3, #4
   11480:	d918      	bls.n	114b4 <list_pop+0xf8>
   11482:	697b      	ldr	r3, [r7, #20]
   11484:	685a      	ldr	r2, [r3, #4]
   11486:	697b      	ldr	r3, [r7, #20]
   11488:	689b      	ldr	r3, [r3, #8]
   1148a:	005b      	lsls	r3, r3, #1
   1148c:	429a      	cmp	r2, r3
   1148e:	d911      	bls.n	114b4 <list_pop+0xf8>
        self->items = m_renew(mp_obj_t, self->items, self->alloc, self->alloc/2);
   11490:	697b      	ldr	r3, [r7, #20]
   11492:	68da      	ldr	r2, [r3, #12]
   11494:	697b      	ldr	r3, [r7, #20]
   11496:	685b      	ldr	r3, [r3, #4]
   11498:	085b      	lsrs	r3, r3, #1
   1149a:	009b      	lsls	r3, r3, #2
   1149c:	4619      	mov	r1, r3
   1149e:	4610      	mov	r0, r2
   114a0:	f7ee ff88 	bl	3b4 <m_realloc>
   114a4:	4602      	mov	r2, r0
   114a6:	697b      	ldr	r3, [r7, #20]
   114a8:	60da      	str	r2, [r3, #12]
        self->alloc /= 2;
   114aa:	697b      	ldr	r3, [r7, #20]
   114ac:	685b      	ldr	r3, [r3, #4]
   114ae:	085a      	lsrs	r2, r3, #1
   114b0:	697b      	ldr	r3, [r7, #20]
   114b2:	605a      	str	r2, [r3, #4]
    }
    return ret;
   114b4:	68fb      	ldr	r3, [r7, #12]
}
   114b6:	4618      	mov	r0, r3
   114b8:	3718      	adds	r7, #24
   114ba:	46bd      	mov	sp, r7
   114bc:	bd80      	pop	{r7, pc}
   114be:	bf00      	nop
   114c0:	00023114 	.word	0x00023114
   114c4:	00022f74 	.word	0x00022f74
   114c8:	00023170 	.word	0x00023170
   114cc:	00022f60 	.word	0x00022f60
   114d0:	00022fd0 	.word	0x00022fd0
   114d4:	0002247c 	.word	0x0002247c

000114d8 <mp_quicksort>:

STATIC void mp_quicksort(mp_obj_t *head, mp_obj_t *tail, mp_obj_t key_fn, mp_obj_t binop_less_result) {
   114d8:	b580      	push	{r7, lr}
   114da:	b08a      	sub	sp, #40	; 0x28
   114dc:	af00      	add	r7, sp, #0
   114de:	60f8      	str	r0, [r7, #12]
   114e0:	60b9      	str	r1, [r7, #8]
   114e2:	607a      	str	r2, [r7, #4]
   114e4:	603b      	str	r3, [r7, #0]
    MP_STACK_CHECK();
    while (head < tail) {
   114e6:	e085      	b.n	115f4 <mp_quicksort+0x11c>
        mp_obj_t *h = head - 1;
   114e8:	68fb      	ldr	r3, [r7, #12]
   114ea:	3b04      	subs	r3, #4
   114ec:	627b      	str	r3, [r7, #36]	; 0x24
        mp_obj_t *t = tail;
   114ee:	68bb      	ldr	r3, [r7, #8]
   114f0:	623b      	str	r3, [r7, #32]
        mp_obj_t v = key_fn == MP_OBJ_NULL ? tail[0] : mp_call_function_1(key_fn, tail[0]); // get pivot using key_fn
   114f2:	687b      	ldr	r3, [r7, #4]
   114f4:	2b00      	cmp	r3, #0
   114f6:	d102      	bne.n	114fe <mp_quicksort+0x26>
   114f8:	68bb      	ldr	r3, [r7, #8]
   114fa:	681b      	ldr	r3, [r3, #0]
   114fc:	e006      	b.n	1150c <mp_quicksort+0x34>
   114fe:	68bb      	ldr	r3, [r7, #8]
   11500:	681b      	ldr	r3, [r3, #0]
   11502:	4619      	mov	r1, r3
   11504:	6878      	ldr	r0, [r7, #4]
   11506:	f7fa fd87 	bl	c018 <mp_call_function_1>
   1150a:	4603      	mov	r3, r0
   1150c:	61fb      	str	r3, [r7, #28]
        for (;;) {
            do ++h; while (h < t && mp_binary_op(MP_BINARY_OP_LESS, key_fn == MP_OBJ_NULL ? h[0] : mp_call_function_1(key_fn, h[0]), v) == binop_less_result);
   1150e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   11510:	3304      	adds	r3, #4
   11512:	627b      	str	r3, [r7, #36]	; 0x24
   11514:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   11516:	6a3b      	ldr	r3, [r7, #32]
   11518:	429a      	cmp	r2, r3
   1151a:	d215      	bcs.n	11548 <mp_quicksort+0x70>
   1151c:	687b      	ldr	r3, [r7, #4]
   1151e:	2b00      	cmp	r3, #0
   11520:	d102      	bne.n	11528 <mp_quicksort+0x50>
   11522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   11524:	681b      	ldr	r3, [r3, #0]
   11526:	e006      	b.n	11536 <mp_quicksort+0x5e>
   11528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1152a:	681b      	ldr	r3, [r3, #0]
   1152c:	4619      	mov	r1, r3
   1152e:	6878      	ldr	r0, [r7, #4]
   11530:	f7fa fd72 	bl	c018 <mp_call_function_1>
   11534:	4603      	mov	r3, r0
   11536:	69fa      	ldr	r2, [r7, #28]
   11538:	4619      	mov	r1, r3
   1153a:	2000      	movs	r0, #0
   1153c:	f7fa fafe 	bl	bb3c <mp_binary_op>
   11540:	4602      	mov	r2, r0
   11542:	683b      	ldr	r3, [r7, #0]
   11544:	429a      	cmp	r2, r3
   11546:	d0e2      	beq.n	1150e <mp_quicksort+0x36>
            do --t; while (h < t && mp_binary_op(MP_BINARY_OP_LESS, v, key_fn == MP_OBJ_NULL ? t[0] : mp_call_function_1(key_fn, t[0])) == binop_less_result);
   11548:	6a3b      	ldr	r3, [r7, #32]
   1154a:	3b04      	subs	r3, #4
   1154c:	623b      	str	r3, [r7, #32]
   1154e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   11550:	6a3b      	ldr	r3, [r7, #32]
   11552:	429a      	cmp	r2, r3
   11554:	d215      	bcs.n	11582 <mp_quicksort+0xaa>
   11556:	687b      	ldr	r3, [r7, #4]
   11558:	2b00      	cmp	r3, #0
   1155a:	d102      	bne.n	11562 <mp_quicksort+0x8a>
   1155c:	6a3b      	ldr	r3, [r7, #32]
   1155e:	681b      	ldr	r3, [r3, #0]
   11560:	e006      	b.n	11570 <mp_quicksort+0x98>
   11562:	6a3b      	ldr	r3, [r7, #32]
   11564:	681b      	ldr	r3, [r3, #0]
   11566:	4619      	mov	r1, r3
   11568:	6878      	ldr	r0, [r7, #4]
   1156a:	f7fa fd55 	bl	c018 <mp_call_function_1>
   1156e:	4603      	mov	r3, r0
   11570:	461a      	mov	r2, r3
   11572:	69f9      	ldr	r1, [r7, #28]
   11574:	2000      	movs	r0, #0
   11576:	f7fa fae1 	bl	bb3c <mp_binary_op>
   1157a:	4602      	mov	r2, r0
   1157c:	683b      	ldr	r3, [r7, #0]
   1157e:	429a      	cmp	r2, r3
   11580:	d0e2      	beq.n	11548 <mp_quicksort+0x70>
            if (h >= t) break;
   11582:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   11584:	6a3b      	ldr	r3, [r7, #32]
   11586:	429a      	cmp	r2, r3
   11588:	d20a      	bcs.n	115a0 <mp_quicksort+0xc8>
            mp_obj_t x = h[0];
   1158a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1158c:	681b      	ldr	r3, [r3, #0]
   1158e:	61bb      	str	r3, [r7, #24]
            h[0] = t[0];
   11590:	6a3b      	ldr	r3, [r7, #32]
   11592:	681a      	ldr	r2, [r3, #0]
   11594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   11596:	601a      	str	r2, [r3, #0]
            t[0] = x;
   11598:	6a3b      	ldr	r3, [r7, #32]
   1159a:	69ba      	ldr	r2, [r7, #24]
   1159c:	601a      	str	r2, [r3, #0]
        }
   1159e:	e7b6      	b.n	1150e <mp_quicksort+0x36>
            if (h >= t) break;
   115a0:	bf00      	nop
        mp_obj_t x = h[0];
   115a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   115a4:	681b      	ldr	r3, [r3, #0]
   115a6:	617b      	str	r3, [r7, #20]
        h[0] = tail[0];
   115a8:	68bb      	ldr	r3, [r7, #8]
   115aa:	681a      	ldr	r2, [r3, #0]
   115ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   115ae:	601a      	str	r2, [r3, #0]
        tail[0] = x;
   115b0:	68bb      	ldr	r3, [r7, #8]
   115b2:	697a      	ldr	r2, [r7, #20]
   115b4:	601a      	str	r2, [r3, #0]
        // do the smaller recursive call first, to keep stack within O(log(N))
        if (t - head < tail - h - 1) {
   115b6:	6a3a      	ldr	r2, [r7, #32]
   115b8:	68fb      	ldr	r3, [r7, #12]
   115ba:	1ad3      	subs	r3, r2, r3
   115bc:	109b      	asrs	r3, r3, #2
   115be:	4619      	mov	r1, r3
   115c0:	68ba      	ldr	r2, [r7, #8]
   115c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   115c4:	1ad3      	subs	r3, r2, r3
   115c6:	109b      	asrs	r3, r3, #2
   115c8:	3b01      	subs	r3, #1
   115ca:	4299      	cmp	r1, r3
   115cc:	da09      	bge.n	115e2 <mp_quicksort+0x10a>
            mp_quicksort(head, t, key_fn, binop_less_result);
   115ce:	683b      	ldr	r3, [r7, #0]
   115d0:	687a      	ldr	r2, [r7, #4]
   115d2:	6a39      	ldr	r1, [r7, #32]
   115d4:	68f8      	ldr	r0, [r7, #12]
   115d6:	f7ff ff7f 	bl	114d8 <mp_quicksort>
            head = h + 1;
   115da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   115dc:	3304      	adds	r3, #4
   115de:	60fb      	str	r3, [r7, #12]
   115e0:	e008      	b.n	115f4 <mp_quicksort+0x11c>
        } else {
            mp_quicksort(h + 1, tail, key_fn, binop_less_result);
   115e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   115e4:	1d18      	adds	r0, r3, #4
   115e6:	683b      	ldr	r3, [r7, #0]
   115e8:	687a      	ldr	r2, [r7, #4]
   115ea:	68b9      	ldr	r1, [r7, #8]
   115ec:	f7ff ff74 	bl	114d8 <mp_quicksort>
            tail = t;
   115f0:	6a3b      	ldr	r3, [r7, #32]
   115f2:	60bb      	str	r3, [r7, #8]
    while (head < tail) {
   115f4:	68fa      	ldr	r2, [r7, #12]
   115f6:	68bb      	ldr	r3, [r7, #8]
   115f8:	429a      	cmp	r2, r3
   115fa:	f4ff af75 	bcc.w	114e8 <mp_quicksort+0x10>
        }
    }
}
   115fe:	bf00      	nop
   11600:	3728      	adds	r7, #40	; 0x28
   11602:	46bd      	mov	sp, r7
   11604:	bd80      	pop	{r7, pc}
   11606:	bf00      	nop

00011608 <mp_obj_list_sort>:

// TODO Python defines sort to be stable but ours is not
mp_obj_t mp_obj_list_sort(size_t n_args, const mp_obj_t *pos_args, mp_map_t *kw_args) {
   11608:	b580      	push	{r7, lr}
   1160a:	b08a      	sub	sp, #40	; 0x28
   1160c:	af02      	add	r7, sp, #8
   1160e:	60f8      	str	r0, [r7, #12]
   11610:	60b9      	str	r1, [r7, #8]
   11612:	607a      	str	r2, [r7, #4]

    // parse args
    struct {
        mp_arg_val_t key, reverse;
    } args;
    mp_arg_parse_all(n_args - 1, pos_args + 1, kw_args,
   11614:	68fb      	ldr	r3, [r7, #12]
   11616:	1e58      	subs	r0, r3, #1
   11618:	68bb      	ldr	r3, [r7, #8]
   1161a:	1d19      	adds	r1, r3, #4
   1161c:	f107 0314 	add.w	r3, r7, #20
   11620:	9301      	str	r3, [sp, #4]
   11622:	4b22      	ldr	r3, [pc, #136]	; (116ac <mp_obj_list_sort+0xa4>)
   11624:	9300      	str	r3, [sp, #0]
   11626:	2302      	movs	r3, #2
   11628:	687a      	ldr	r2, [r7, #4]
   1162a:	f7fb fe7b 	bl	d324 <mp_arg_parse_all>
        MP_ARRAY_SIZE(allowed_args), allowed_args, (mp_arg_val_t*)&args);

    mp_check_self(MP_OBJ_IS_TYPE(pos_args[0], &mp_type_list));
   1162e:	68bb      	ldr	r3, [r7, #8]
   11630:	681b      	ldr	r3, [r3, #0]
   11632:	4618      	mov	r0, r3
   11634:	f7ff fbe6 	bl	10e04 <MP_OBJ_IS_OBJ>
   11638:	4603      	mov	r3, r0
   1163a:	f083 0301 	eor.w	r3, r3, #1
   1163e:	b2db      	uxtb	r3, r3
   11640:	2b00      	cmp	r3, #0
   11642:	d105      	bne.n	11650 <mp_obj_list_sort+0x48>
   11644:	68bb      	ldr	r3, [r7, #8]
   11646:	681b      	ldr	r3, [r3, #0]
   11648:	681b      	ldr	r3, [r3, #0]
   1164a:	4a19      	ldr	r2, [pc, #100]	; (116b0 <mp_obj_list_sort+0xa8>)
   1164c:	4293      	cmp	r3, r2
   1164e:	d006      	beq.n	1165e <mp_obj_list_sort+0x56>
   11650:	4b18      	ldr	r3, [pc, #96]	; (116b4 <mp_obj_list_sort+0xac>)
   11652:	4a19      	ldr	r2, [pc, #100]	; (116b8 <mp_obj_list_sort+0xb0>)
   11654:	f44f 71a4 	mov.w	r1, #328	; 0x148
   11658:	4818      	ldr	r0, [pc, #96]	; (116bc <mp_obj_list_sort+0xb4>)
   1165a:	f00a f839 	bl	1b6d0 <__assert_func>
    mp_obj_list_t *self = MP_OBJ_TO_PTR(pos_args[0]);
   1165e:	68bb      	ldr	r3, [r7, #8]
   11660:	681b      	ldr	r3, [r3, #0]
   11662:	61fb      	str	r3, [r7, #28]

    if (self->len > 1) {
   11664:	69fb      	ldr	r3, [r7, #28]
   11666:	689b      	ldr	r3, [r3, #8]
   11668:	2b01      	cmp	r3, #1
   1166a:	d919      	bls.n	116a0 <mp_obj_list_sort+0x98>
        mp_quicksort(self->items, self->items + self->len - 1,
   1166c:	69fb      	ldr	r3, [r7, #28]
   1166e:	68d8      	ldr	r0, [r3, #12]
   11670:	69fb      	ldr	r3, [r7, #28]
   11672:	68da      	ldr	r2, [r3, #12]
   11674:	69fb      	ldr	r3, [r7, #28]
   11676:	689b      	ldr	r3, [r3, #8]
   11678:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1167c:	3b01      	subs	r3, #1
   1167e:	009b      	lsls	r3, r3, #2
   11680:	18d1      	adds	r1, r2, r3
                     args.key.u_obj == mp_const_none ? MP_OBJ_NULL : args.key.u_obj,
   11682:	697b      	ldr	r3, [r7, #20]
        mp_quicksort(self->items, self->items + self->len - 1,
   11684:	4a0e      	ldr	r2, [pc, #56]	; (116c0 <mp_obj_list_sort+0xb8>)
   11686:	4293      	cmp	r3, r2
   11688:	d001      	beq.n	1168e <mp_obj_list_sort+0x86>
   1168a:	697a      	ldr	r2, [r7, #20]
   1168c:	e000      	b.n	11690 <mp_obj_list_sort+0x88>
   1168e:	2200      	movs	r2, #0
                     args.reverse.u_bool ? mp_const_false : mp_const_true);
   11690:	7e3b      	ldrb	r3, [r7, #24]
        mp_quicksort(self->items, self->items + self->len - 1,
   11692:	2b00      	cmp	r3, #0
   11694:	d001      	beq.n	1169a <mp_obj_list_sort+0x92>
   11696:	4b0b      	ldr	r3, [pc, #44]	; (116c4 <mp_obj_list_sort+0xbc>)
   11698:	e000      	b.n	1169c <mp_obj_list_sort+0x94>
   1169a:	4b0b      	ldr	r3, [pc, #44]	; (116c8 <mp_obj_list_sort+0xc0>)
   1169c:	f7ff ff1c 	bl	114d8 <mp_quicksort>
    }

    return mp_const_none;
   116a0:	4b07      	ldr	r3, [pc, #28]	; (116c0 <mp_obj_list_sort+0xb8>)
}
   116a2:	4618      	mov	r0, r3
   116a4:	3720      	adds	r7, #32
   116a6:	46bd      	mov	sp, r7
   116a8:	bd80      	pop	{r7, pc}
   116aa:	bf00      	nop
   116ac:	0002317c 	.word	0x0002317c
   116b0:	00023114 	.word	0x00023114
   116b4:	00022fe4 	.word	0x00022fe4
   116b8:	0002318c 	.word	0x0002318c
   116bc:	00022f60 	.word	0x00022f60
   116c0:	0002345c 	.word	0x0002345c
   116c4:	00021b70 	.word	0x00021b70
   116c8:	00021b78 	.word	0x00021b78

000116cc <list_clear>:

STATIC mp_obj_t list_clear(mp_obj_t self_in) {
   116cc:	b580      	push	{r7, lr}
   116ce:	b084      	sub	sp, #16
   116d0:	af00      	add	r7, sp, #0
   116d2:	6078      	str	r0, [r7, #4]
    mp_check_self(MP_OBJ_IS_TYPE(self_in, &mp_type_list));
   116d4:	6878      	ldr	r0, [r7, #4]
   116d6:	f7ff fb95 	bl	10e04 <MP_OBJ_IS_OBJ>
   116da:	4603      	mov	r3, r0
   116dc:	f083 0301 	eor.w	r3, r3, #1
   116e0:	b2db      	uxtb	r3, r3
   116e2:	2b00      	cmp	r3, #0
   116e4:	d104      	bne.n	116f0 <list_clear+0x24>
   116e6:	687b      	ldr	r3, [r7, #4]
   116e8:	681b      	ldr	r3, [r3, #0]
   116ea:	4a14      	ldr	r2, [pc, #80]	; (1173c <list_clear+0x70>)
   116ec:	4293      	cmp	r3, r2
   116ee:	d006      	beq.n	116fe <list_clear+0x32>
   116f0:	4b13      	ldr	r3, [pc, #76]	; (11740 <list_clear+0x74>)
   116f2:	4a14      	ldr	r2, [pc, #80]	; (11744 <list_clear+0x78>)
   116f4:	f240 1155 	movw	r1, #341	; 0x155
   116f8:	4813      	ldr	r0, [pc, #76]	; (11748 <list_clear+0x7c>)
   116fa:	f009 ffe9 	bl	1b6d0 <__assert_func>
    mp_obj_list_t *self = MP_OBJ_TO_PTR(self_in);
   116fe:	687b      	ldr	r3, [r7, #4]
   11700:	60fb      	str	r3, [r7, #12]
    self->len = 0;
   11702:	68fb      	ldr	r3, [r7, #12]
   11704:	2200      	movs	r2, #0
   11706:	609a      	str	r2, [r3, #8]
    self->items = m_renew(mp_obj_t, self->items, self->alloc, LIST_MIN_ALLOC);
   11708:	68fb      	ldr	r3, [r7, #12]
   1170a:	68db      	ldr	r3, [r3, #12]
   1170c:	2110      	movs	r1, #16
   1170e:	4618      	mov	r0, r3
   11710:	f7ee fe50 	bl	3b4 <m_realloc>
   11714:	4602      	mov	r2, r0
   11716:	68fb      	ldr	r3, [r7, #12]
   11718:	60da      	str	r2, [r3, #12]
    self->alloc = LIST_MIN_ALLOC;
   1171a:	68fb      	ldr	r3, [r7, #12]
   1171c:	2204      	movs	r2, #4
   1171e:	605a      	str	r2, [r3, #4]
    mp_seq_clear(self->items, 0, self->alloc, sizeof(*self->items));
   11720:	68fb      	ldr	r3, [r7, #12]
   11722:	68d8      	ldr	r0, [r3, #12]
   11724:	68fb      	ldr	r3, [r7, #12]
   11726:	685b      	ldr	r3, [r3, #4]
   11728:	009b      	lsls	r3, r3, #2
   1172a:	461a      	mov	r2, r3
   1172c:	2100      	movs	r1, #0
   1172e:	f00b fb3f 	bl	1cdb0 <memset>
    return mp_const_none;
   11732:	4b06      	ldr	r3, [pc, #24]	; (1174c <list_clear+0x80>)
}
   11734:	4618      	mov	r0, r3
   11736:	3710      	adds	r7, #16
   11738:	46bd      	mov	sp, r7
   1173a:	bd80      	pop	{r7, pc}
   1173c:	00023114 	.word	0x00023114
   11740:	00022f04 	.word	0x00022f04
   11744:	000231a0 	.word	0x000231a0
   11748:	00022f60 	.word	0x00022f60
   1174c:	0002345c 	.word	0x0002345c

00011750 <list_copy>:

STATIC mp_obj_t list_copy(mp_obj_t self_in) {
   11750:	b580      	push	{r7, lr}
   11752:	b084      	sub	sp, #16
   11754:	af00      	add	r7, sp, #0
   11756:	6078      	str	r0, [r7, #4]
    mp_check_self(MP_OBJ_IS_TYPE(self_in, &mp_type_list));
   11758:	6878      	ldr	r0, [r7, #4]
   1175a:	f7ff fb53 	bl	10e04 <MP_OBJ_IS_OBJ>
   1175e:	4603      	mov	r3, r0
   11760:	f083 0301 	eor.w	r3, r3, #1
   11764:	b2db      	uxtb	r3, r3
   11766:	2b00      	cmp	r3, #0
   11768:	d104      	bne.n	11774 <list_copy+0x24>
   1176a:	687b      	ldr	r3, [r7, #4]
   1176c:	681b      	ldr	r3, [r3, #0]
   1176e:	4a0c      	ldr	r2, [pc, #48]	; (117a0 <list_copy+0x50>)
   11770:	4293      	cmp	r3, r2
   11772:	d006      	beq.n	11782 <list_copy+0x32>
   11774:	4b0b      	ldr	r3, [pc, #44]	; (117a4 <list_copy+0x54>)
   11776:	4a0c      	ldr	r2, [pc, #48]	; (117a8 <list_copy+0x58>)
   11778:	f240 115f 	movw	r1, #351	; 0x15f
   1177c:	480b      	ldr	r0, [pc, #44]	; (117ac <list_copy+0x5c>)
   1177e:	f009 ffa7 	bl	1b6d0 <__assert_func>
    mp_obj_list_t *self = MP_OBJ_TO_PTR(self_in);
   11782:	687b      	ldr	r3, [r7, #4]
   11784:	60fb      	str	r3, [r7, #12]
    return mp_obj_new_list(self->len, self->items);
   11786:	68fb      	ldr	r3, [r7, #12]
   11788:	689a      	ldr	r2, [r3, #8]
   1178a:	68fb      	ldr	r3, [r7, #12]
   1178c:	68db      	ldr	r3, [r3, #12]
   1178e:	4619      	mov	r1, r3
   11790:	4610      	mov	r0, r2
   11792:	f000 f9bd 	bl	11b10 <mp_obj_new_list>
   11796:	4603      	mov	r3, r0
}
   11798:	4618      	mov	r0, r3
   1179a:	3710      	adds	r7, #16
   1179c:	46bd      	mov	sp, r7
   1179e:	bd80      	pop	{r7, pc}
   117a0:	00023114 	.word	0x00023114
   117a4:	00022f04 	.word	0x00022f04
   117a8:	000231ac 	.word	0x000231ac
   117ac:	00022f60 	.word	0x00022f60

000117b0 <list_count>:

STATIC mp_obj_t list_count(mp_obj_t self_in, mp_obj_t value) {
   117b0:	b580      	push	{r7, lr}
   117b2:	b084      	sub	sp, #16
   117b4:	af00      	add	r7, sp, #0
   117b6:	6078      	str	r0, [r7, #4]
   117b8:	6039      	str	r1, [r7, #0]
    mp_check_self(MP_OBJ_IS_TYPE(self_in, &mp_type_list));
   117ba:	6878      	ldr	r0, [r7, #4]
   117bc:	f7ff fb22 	bl	10e04 <MP_OBJ_IS_OBJ>
   117c0:	4603      	mov	r3, r0
   117c2:	f083 0301 	eor.w	r3, r3, #1
   117c6:	b2db      	uxtb	r3, r3
   117c8:	2b00      	cmp	r3, #0
   117ca:	d104      	bne.n	117d6 <list_count+0x26>
   117cc:	687b      	ldr	r3, [r7, #4]
   117ce:	681b      	ldr	r3, [r3, #0]
   117d0:	4a0c      	ldr	r2, [pc, #48]	; (11804 <list_count+0x54>)
   117d2:	4293      	cmp	r3, r2
   117d4:	d006      	beq.n	117e4 <list_count+0x34>
   117d6:	4b0c      	ldr	r3, [pc, #48]	; (11808 <list_count+0x58>)
   117d8:	4a0c      	ldr	r2, [pc, #48]	; (1180c <list_count+0x5c>)
   117da:	f240 1165 	movw	r1, #357	; 0x165
   117de:	480c      	ldr	r0, [pc, #48]	; (11810 <list_count+0x60>)
   117e0:	f009 ff76 	bl	1b6d0 <__assert_func>
    mp_obj_list_t *self = MP_OBJ_TO_PTR(self_in);
   117e4:	687b      	ldr	r3, [r7, #4]
   117e6:	60fb      	str	r3, [r7, #12]
    return mp_seq_count_obj(self->items, self->len, value);
   117e8:	68fb      	ldr	r3, [r7, #12]
   117ea:	68d8      	ldr	r0, [r3, #12]
   117ec:	68fb      	ldr	r3, [r7, #12]
   117ee:	689b      	ldr	r3, [r3, #8]
   117f0:	683a      	ldr	r2, [r7, #0]
   117f2:	4619      	mov	r1, r3
   117f4:	f006 fa82 	bl	17cfc <mp_seq_count_obj>
   117f8:	4603      	mov	r3, r0
}
   117fa:	4618      	mov	r0, r3
   117fc:	3710      	adds	r7, #16
   117fe:	46bd      	mov	sp, r7
   11800:	bd80      	pop	{r7, pc}
   11802:	bf00      	nop
   11804:	00023114 	.word	0x00023114
   11808:	00022f04 	.word	0x00022f04
   1180c:	000231b8 	.word	0x000231b8
   11810:	00022f60 	.word	0x00022f60

00011814 <list_index>:

STATIC mp_obj_t list_index(size_t n_args, const mp_obj_t *args) {
   11814:	b580      	push	{r7, lr}
   11816:	b084      	sub	sp, #16
   11818:	af00      	add	r7, sp, #0
   1181a:	6078      	str	r0, [r7, #4]
   1181c:	6039      	str	r1, [r7, #0]
    mp_check_self(MP_OBJ_IS_TYPE(args[0], &mp_type_list));
   1181e:	683b      	ldr	r3, [r7, #0]
   11820:	681b      	ldr	r3, [r3, #0]
   11822:	4618      	mov	r0, r3
   11824:	f7ff faee 	bl	10e04 <MP_OBJ_IS_OBJ>
   11828:	4603      	mov	r3, r0
   1182a:	f083 0301 	eor.w	r3, r3, #1
   1182e:	b2db      	uxtb	r3, r3
   11830:	2b00      	cmp	r3, #0
   11832:	d105      	bne.n	11840 <list_index+0x2c>
   11834:	683b      	ldr	r3, [r7, #0]
   11836:	681b      	ldr	r3, [r3, #0]
   11838:	681b      	ldr	r3, [r3, #0]
   1183a:	4a0d      	ldr	r2, [pc, #52]	; (11870 <list_index+0x5c>)
   1183c:	4293      	cmp	r3, r2
   1183e:	d006      	beq.n	1184e <list_index+0x3a>
   11840:	4b0c      	ldr	r3, [pc, #48]	; (11874 <list_index+0x60>)
   11842:	4a0d      	ldr	r2, [pc, #52]	; (11878 <list_index+0x64>)
   11844:	f240 116b 	movw	r1, #363	; 0x16b
   11848:	480c      	ldr	r0, [pc, #48]	; (1187c <list_index+0x68>)
   1184a:	f009 ff41 	bl	1b6d0 <__assert_func>
    mp_obj_list_t *self = MP_OBJ_TO_PTR(args[0]);
   1184e:	683b      	ldr	r3, [r7, #0]
   11850:	681b      	ldr	r3, [r3, #0]
   11852:	60fb      	str	r3, [r7, #12]
    return mp_seq_index_obj(self->items, self->len, n_args, args);
   11854:	68fb      	ldr	r3, [r7, #12]
   11856:	68d8      	ldr	r0, [r3, #12]
   11858:	68fb      	ldr	r3, [r7, #12]
   1185a:	6899      	ldr	r1, [r3, #8]
   1185c:	683b      	ldr	r3, [r7, #0]
   1185e:	687a      	ldr	r2, [r7, #4]
   11860:	f006 f9fc 	bl	17c5c <mp_seq_index_obj>
   11864:	4603      	mov	r3, r0
}
   11866:	4618      	mov	r0, r3
   11868:	3710      	adds	r7, #16
   1186a:	46bd      	mov	sp, r7
   1186c:	bd80      	pop	{r7, pc}
   1186e:	bf00      	nop
   11870:	00023114 	.word	0x00023114
   11874:	00022f74 	.word	0x00022f74
   11878:	000231c4 	.word	0x000231c4
   1187c:	00022f60 	.word	0x00022f60

00011880 <list_insert>:

STATIC mp_obj_t list_insert(mp_obj_t self_in, mp_obj_t idx, mp_obj_t obj) {
   11880:	b580      	push	{r7, lr}
   11882:	b088      	sub	sp, #32
   11884:	af00      	add	r7, sp, #0
   11886:	60f8      	str	r0, [r7, #12]
   11888:	60b9      	str	r1, [r7, #8]
   1188a:	607a      	str	r2, [r7, #4]
    mp_check_self(MP_OBJ_IS_TYPE(self_in, &mp_type_list));
   1188c:	68f8      	ldr	r0, [r7, #12]
   1188e:	f7ff fab9 	bl	10e04 <MP_OBJ_IS_OBJ>
   11892:	4603      	mov	r3, r0
   11894:	f083 0301 	eor.w	r3, r3, #1
   11898:	b2db      	uxtb	r3, r3
   1189a:	2b00      	cmp	r3, #0
   1189c:	d104      	bne.n	118a8 <list_insert+0x28>
   1189e:	68fb      	ldr	r3, [r7, #12]
   118a0:	681b      	ldr	r3, [r3, #0]
   118a2:	4a27      	ldr	r2, [pc, #156]	; (11940 <list_insert+0xc0>)
   118a4:	4293      	cmp	r3, r2
   118a6:	d006      	beq.n	118b6 <list_insert+0x36>
   118a8:	4b26      	ldr	r3, [pc, #152]	; (11944 <list_insert+0xc4>)
   118aa:	4a27      	ldr	r2, [pc, #156]	; (11948 <list_insert+0xc8>)
   118ac:	f240 1171 	movw	r1, #369	; 0x171
   118b0:	4826      	ldr	r0, [pc, #152]	; (1194c <list_insert+0xcc>)
   118b2:	f009 ff0d 	bl	1b6d0 <__assert_func>
    mp_obj_list_t *self = MP_OBJ_TO_PTR(self_in);
   118b6:	68fb      	ldr	r3, [r7, #12]
   118b8:	617b      	str	r3, [r7, #20]
    // insert has its own strange index logic
    mp_int_t index = MP_OBJ_SMALL_INT_VALUE(idx);
   118ba:	68bb      	ldr	r3, [r7, #8]
   118bc:	105b      	asrs	r3, r3, #1
   118be:	61fb      	str	r3, [r7, #28]
    if (index < 0) {
   118c0:	69fb      	ldr	r3, [r7, #28]
   118c2:	2b00      	cmp	r3, #0
   118c4:	da04      	bge.n	118d0 <list_insert+0x50>
         index += self->len;
   118c6:	697b      	ldr	r3, [r7, #20]
   118c8:	689a      	ldr	r2, [r3, #8]
   118ca:	69fb      	ldr	r3, [r7, #28]
   118cc:	4413      	add	r3, r2
   118ce:	61fb      	str	r3, [r7, #28]
    }
    if (index < 0) {
   118d0:	69fb      	ldr	r3, [r7, #28]
   118d2:	2b00      	cmp	r3, #0
   118d4:	da01      	bge.n	118da <list_insert+0x5a>
         index = 0;
   118d6:	2300      	movs	r3, #0
   118d8:	61fb      	str	r3, [r7, #28]
    }
    if ((size_t)index > self->len) {
   118da:	697b      	ldr	r3, [r7, #20]
   118dc:	689a      	ldr	r2, [r3, #8]
   118de:	69fb      	ldr	r3, [r7, #28]
   118e0:	429a      	cmp	r2, r3
   118e2:	d202      	bcs.n	118ea <list_insert+0x6a>
         index = self->len;
   118e4:	697b      	ldr	r3, [r7, #20]
   118e6:	689b      	ldr	r3, [r3, #8]
   118e8:	61fb      	str	r3, [r7, #28]
    }

    mp_obj_list_append(self_in, mp_const_none);
   118ea:	4919      	ldr	r1, [pc, #100]	; (11950 <list_insert+0xd0>)
   118ec:	68f8      	ldr	r0, [r7, #12]
   118ee:	f7ff fc7d 	bl	111ec <mp_obj_list_append>

    for (mp_int_t i = self->len-1; i > index; i--) {
   118f2:	697b      	ldr	r3, [r7, #20]
   118f4:	689b      	ldr	r3, [r3, #8]
   118f6:	3b01      	subs	r3, #1
   118f8:	61bb      	str	r3, [r7, #24]
   118fa:	e011      	b.n	11920 <list_insert+0xa0>
         self->items[i] = self->items[i-1];
   118fc:	697b      	ldr	r3, [r7, #20]
   118fe:	68da      	ldr	r2, [r3, #12]
   11900:	69bb      	ldr	r3, [r7, #24]
   11902:	009b      	lsls	r3, r3, #2
   11904:	441a      	add	r2, r3
   11906:	697b      	ldr	r3, [r7, #20]
   11908:	68d9      	ldr	r1, [r3, #12]
   1190a:	69bb      	ldr	r3, [r7, #24]
   1190c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   11910:	3b01      	subs	r3, #1
   11912:	009b      	lsls	r3, r3, #2
   11914:	440b      	add	r3, r1
   11916:	681b      	ldr	r3, [r3, #0]
   11918:	6013      	str	r3, [r2, #0]
    for (mp_int_t i = self->len-1; i > index; i--) {
   1191a:	69bb      	ldr	r3, [r7, #24]
   1191c:	3b01      	subs	r3, #1
   1191e:	61bb      	str	r3, [r7, #24]
   11920:	69ba      	ldr	r2, [r7, #24]
   11922:	69fb      	ldr	r3, [r7, #28]
   11924:	429a      	cmp	r2, r3
   11926:	dce9      	bgt.n	118fc <list_insert+0x7c>
    }
    self->items[index] = obj;
   11928:	697b      	ldr	r3, [r7, #20]
   1192a:	68da      	ldr	r2, [r3, #12]
   1192c:	69fb      	ldr	r3, [r7, #28]
   1192e:	009b      	lsls	r3, r3, #2
   11930:	4413      	add	r3, r2
   11932:	687a      	ldr	r2, [r7, #4]
   11934:	601a      	str	r2, [r3, #0]

    return mp_const_none;
   11936:	4b06      	ldr	r3, [pc, #24]	; (11950 <list_insert+0xd0>)
}
   11938:	4618      	mov	r0, r3
   1193a:	3720      	adds	r7, #32
   1193c:	46bd      	mov	sp, r7
   1193e:	bd80      	pop	{r7, pc}
   11940:	00023114 	.word	0x00023114
   11944:	00022f04 	.word	0x00022f04
   11948:	000231d0 	.word	0x000231d0
   1194c:	00022f60 	.word	0x00022f60
   11950:	0002345c 	.word	0x0002345c

00011954 <mp_obj_list_remove>:

mp_obj_t mp_obj_list_remove(mp_obj_t self_in, mp_obj_t value) {
   11954:	b580      	push	{r7, lr}
   11956:	b084      	sub	sp, #16
   11958:	af00      	add	r7, sp, #0
   1195a:	6078      	str	r0, [r7, #4]
   1195c:	6039      	str	r1, [r7, #0]
    mp_check_self(MP_OBJ_IS_TYPE(self_in, &mp_type_list));
   1195e:	6878      	ldr	r0, [r7, #4]
   11960:	f7ff fa50 	bl	10e04 <MP_OBJ_IS_OBJ>
   11964:	4603      	mov	r3, r0
   11966:	f083 0301 	eor.w	r3, r3, #1
   1196a:	b2db      	uxtb	r3, r3
   1196c:	2b00      	cmp	r3, #0
   1196e:	d104      	bne.n	1197a <mp_obj_list_remove+0x26>
   11970:	687b      	ldr	r3, [r7, #4]
   11972:	681b      	ldr	r3, [r3, #0]
   11974:	4a10      	ldr	r2, [pc, #64]	; (119b8 <mp_obj_list_remove+0x64>)
   11976:	4293      	cmp	r3, r2
   11978:	d006      	beq.n	11988 <mp_obj_list_remove+0x34>
   1197a:	4b10      	ldr	r3, [pc, #64]	; (119bc <mp_obj_list_remove+0x68>)
   1197c:	4a10      	ldr	r2, [pc, #64]	; (119c0 <mp_obj_list_remove+0x6c>)
   1197e:	f44f 71c5 	mov.w	r1, #394	; 0x18a
   11982:	4810      	ldr	r0, [pc, #64]	; (119c4 <mp_obj_list_remove+0x70>)
   11984:	f009 fea4 	bl	1b6d0 <__assert_func>
    mp_obj_t args[] = {self_in, value};
   11988:	687b      	ldr	r3, [r7, #4]
   1198a:	60bb      	str	r3, [r7, #8]
   1198c:	683b      	ldr	r3, [r7, #0]
   1198e:	60fb      	str	r3, [r7, #12]
    args[1] = list_index(2, args);
   11990:	f107 0308 	add.w	r3, r7, #8
   11994:	4619      	mov	r1, r3
   11996:	2002      	movs	r0, #2
   11998:	f7ff ff3c 	bl	11814 <list_index>
   1199c:	4603      	mov	r3, r0
   1199e:	60fb      	str	r3, [r7, #12]
    list_pop(2, args);
   119a0:	f107 0308 	add.w	r3, r7, #8
   119a4:	4619      	mov	r1, r3
   119a6:	2002      	movs	r0, #2
   119a8:	f7ff fd08 	bl	113bc <list_pop>

    return mp_const_none;
   119ac:	4b06      	ldr	r3, [pc, #24]	; (119c8 <mp_obj_list_remove+0x74>)
}
   119ae:	4618      	mov	r0, r3
   119b0:	3710      	adds	r7, #16
   119b2:	46bd      	mov	sp, r7
   119b4:	bd80      	pop	{r7, pc}
   119b6:	bf00      	nop
   119b8:	00023114 	.word	0x00023114
   119bc:	00022f04 	.word	0x00022f04
   119c0:	000231dc 	.word	0x000231dc
   119c4:	00022f60 	.word	0x00022f60
   119c8:	0002345c 	.word	0x0002345c

000119cc <list_reverse>:

STATIC mp_obj_t list_reverse(mp_obj_t self_in) {
   119cc:	b580      	push	{r7, lr}
   119ce:	b086      	sub	sp, #24
   119d0:	af00      	add	r7, sp, #0
   119d2:	6078      	str	r0, [r7, #4]
    mp_check_self(MP_OBJ_IS_TYPE(self_in, &mp_type_list));
   119d4:	6878      	ldr	r0, [r7, #4]
   119d6:	f7ff fa15 	bl	10e04 <MP_OBJ_IS_OBJ>
   119da:	4603      	mov	r3, r0
   119dc:	f083 0301 	eor.w	r3, r3, #1
   119e0:	b2db      	uxtb	r3, r3
   119e2:	2b00      	cmp	r3, #0
   119e4:	d104      	bne.n	119f0 <list_reverse+0x24>
   119e6:	687b      	ldr	r3, [r7, #4]
   119e8:	681b      	ldr	r3, [r3, #0]
   119ea:	4a23      	ldr	r2, [pc, #140]	; (11a78 <list_reverse+0xac>)
   119ec:	4293      	cmp	r3, r2
   119ee:	d006      	beq.n	119fe <list_reverse+0x32>
   119f0:	4b22      	ldr	r3, [pc, #136]	; (11a7c <list_reverse+0xb0>)
   119f2:	4a23      	ldr	r2, [pc, #140]	; (11a80 <list_reverse+0xb4>)
   119f4:	f240 1193 	movw	r1, #403	; 0x193
   119f8:	4822      	ldr	r0, [pc, #136]	; (11a84 <list_reverse+0xb8>)
   119fa:	f009 fe69 	bl	1b6d0 <__assert_func>
    mp_obj_list_t *self = MP_OBJ_TO_PTR(self_in);
   119fe:	687b      	ldr	r3, [r7, #4]
   11a00:	613b      	str	r3, [r7, #16]

    mp_int_t len = self->len;
   11a02:	693b      	ldr	r3, [r7, #16]
   11a04:	689b      	ldr	r3, [r3, #8]
   11a06:	60fb      	str	r3, [r7, #12]
    for (mp_int_t i = 0; i < len/2; i++) {
   11a08:	2300      	movs	r3, #0
   11a0a:	617b      	str	r3, [r7, #20]
   11a0c:	e026      	b.n	11a5c <list_reverse+0x90>
         mp_obj_t a = self->items[i];
   11a0e:	693b      	ldr	r3, [r7, #16]
   11a10:	68da      	ldr	r2, [r3, #12]
   11a12:	697b      	ldr	r3, [r7, #20]
   11a14:	009b      	lsls	r3, r3, #2
   11a16:	4413      	add	r3, r2
   11a18:	681b      	ldr	r3, [r3, #0]
   11a1a:	60bb      	str	r3, [r7, #8]
         self->items[i] = self->items[len-i-1];
   11a1c:	693b      	ldr	r3, [r7, #16]
   11a1e:	68da      	ldr	r2, [r3, #12]
   11a20:	697b      	ldr	r3, [r7, #20]
   11a22:	009b      	lsls	r3, r3, #2
   11a24:	441a      	add	r2, r3
   11a26:	693b      	ldr	r3, [r7, #16]
   11a28:	68d9      	ldr	r1, [r3, #12]
   11a2a:	68f8      	ldr	r0, [r7, #12]
   11a2c:	697b      	ldr	r3, [r7, #20]
   11a2e:	1ac3      	subs	r3, r0, r3
   11a30:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   11a34:	3b01      	subs	r3, #1
   11a36:	009b      	lsls	r3, r3, #2
   11a38:	440b      	add	r3, r1
   11a3a:	681b      	ldr	r3, [r3, #0]
   11a3c:	6013      	str	r3, [r2, #0]
         self->items[len-i-1] = a;
   11a3e:	693b      	ldr	r3, [r7, #16]
   11a40:	68da      	ldr	r2, [r3, #12]
   11a42:	68f9      	ldr	r1, [r7, #12]
   11a44:	697b      	ldr	r3, [r7, #20]
   11a46:	1acb      	subs	r3, r1, r3
   11a48:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   11a4c:	3b01      	subs	r3, #1
   11a4e:	009b      	lsls	r3, r3, #2
   11a50:	4413      	add	r3, r2
   11a52:	68ba      	ldr	r2, [r7, #8]
   11a54:	601a      	str	r2, [r3, #0]
    for (mp_int_t i = 0; i < len/2; i++) {
   11a56:	697b      	ldr	r3, [r7, #20]
   11a58:	3301      	adds	r3, #1
   11a5a:	617b      	str	r3, [r7, #20]
   11a5c:	68fb      	ldr	r3, [r7, #12]
   11a5e:	0fda      	lsrs	r2, r3, #31
   11a60:	4413      	add	r3, r2
   11a62:	105b      	asrs	r3, r3, #1
   11a64:	461a      	mov	r2, r3
   11a66:	697b      	ldr	r3, [r7, #20]
   11a68:	429a      	cmp	r2, r3
   11a6a:	dcd0      	bgt.n	11a0e <list_reverse+0x42>
    }

    return mp_const_none;
   11a6c:	4b06      	ldr	r3, [pc, #24]	; (11a88 <list_reverse+0xbc>)
}
   11a6e:	4618      	mov	r0, r3
   11a70:	3718      	adds	r7, #24
   11a72:	46bd      	mov	sp, r7
   11a74:	bd80      	pop	{r7, pc}
   11a76:	bf00      	nop
   11a78:	00023114 	.word	0x00023114
   11a7c:	00022f04 	.word	0x00022f04
   11a80:	000231f0 	.word	0x000231f0
   11a84:	00022f60 	.word	0x00022f60
   11a88:	0002345c 	.word	0x0002345c

00011a8c <mp_obj_list_init>:
    .subscr = list_subscr,
    .getiter = list_getiter,
    .locals_dict = (mp_obj_dict_t*)&list_locals_dict,
};

void mp_obj_list_init(mp_obj_list_t *o, size_t n) {
   11a8c:	b580      	push	{r7, lr}
   11a8e:	b082      	sub	sp, #8
   11a90:	af00      	add	r7, sp, #0
   11a92:	6078      	str	r0, [r7, #4]
   11a94:	6039      	str	r1, [r7, #0]
    o->base.type = &mp_type_list;
   11a96:	687b      	ldr	r3, [r7, #4]
   11a98:	4a13      	ldr	r2, [pc, #76]	; (11ae8 <mp_obj_list_init+0x5c>)
   11a9a:	601a      	str	r2, [r3, #0]
    o->alloc = n < LIST_MIN_ALLOC ? LIST_MIN_ALLOC : n;
   11a9c:	683b      	ldr	r3, [r7, #0]
   11a9e:	2b04      	cmp	r3, #4
   11aa0:	bf38      	it	cc
   11aa2:	2304      	movcc	r3, #4
   11aa4:	461a      	mov	r2, r3
   11aa6:	687b      	ldr	r3, [r7, #4]
   11aa8:	605a      	str	r2, [r3, #4]
    o->len = n;
   11aaa:	687b      	ldr	r3, [r7, #4]
   11aac:	683a      	ldr	r2, [r7, #0]
   11aae:	609a      	str	r2, [r3, #8]
    o->items = m_new(mp_obj_t, o->alloc);
   11ab0:	687b      	ldr	r3, [r7, #4]
   11ab2:	685b      	ldr	r3, [r3, #4]
   11ab4:	009b      	lsls	r3, r3, #2
   11ab6:	4618      	mov	r0, r3
   11ab8:	f7ee fc30 	bl	31c <m_malloc>
   11abc:	4602      	mov	r2, r0
   11abe:	687b      	ldr	r3, [r7, #4]
   11ac0:	60da      	str	r2, [r3, #12]
    mp_seq_clear(o->items, n, o->alloc, sizeof(*o->items));
   11ac2:	687b      	ldr	r3, [r7, #4]
   11ac4:	68da      	ldr	r2, [r3, #12]
   11ac6:	683b      	ldr	r3, [r7, #0]
   11ac8:	009b      	lsls	r3, r3, #2
   11aca:	18d0      	adds	r0, r2, r3
   11acc:	687b      	ldr	r3, [r7, #4]
   11ace:	685a      	ldr	r2, [r3, #4]
   11ad0:	683b      	ldr	r3, [r7, #0]
   11ad2:	1ad3      	subs	r3, r2, r3
   11ad4:	009b      	lsls	r3, r3, #2
   11ad6:	461a      	mov	r2, r3
   11ad8:	2100      	movs	r1, #0
   11ada:	f00b f969 	bl	1cdb0 <memset>
}
   11ade:	bf00      	nop
   11ae0:	3708      	adds	r7, #8
   11ae2:	46bd      	mov	sp, r7
   11ae4:	bd80      	pop	{r7, pc}
   11ae6:	bf00      	nop
   11ae8:	00023114 	.word	0x00023114

00011aec <list_new>:

STATIC mp_obj_list_t *list_new(size_t n) {
   11aec:	b580      	push	{r7, lr}
   11aee:	b084      	sub	sp, #16
   11af0:	af00      	add	r7, sp, #0
   11af2:	6078      	str	r0, [r7, #4]
    mp_obj_list_t *o = m_new_obj(mp_obj_list_t);
   11af4:	2010      	movs	r0, #16
   11af6:	f7ee fc11 	bl	31c <m_malloc>
   11afa:	60f8      	str	r0, [r7, #12]
    mp_obj_list_init(o, n);
   11afc:	6879      	ldr	r1, [r7, #4]
   11afe:	68f8      	ldr	r0, [r7, #12]
   11b00:	f7ff ffc4 	bl	11a8c <mp_obj_list_init>
    return o;
   11b04:	68fb      	ldr	r3, [r7, #12]
}
   11b06:	4618      	mov	r0, r3
   11b08:	3710      	adds	r7, #16
   11b0a:	46bd      	mov	sp, r7
   11b0c:	bd80      	pop	{r7, pc}
   11b0e:	bf00      	nop

00011b10 <mp_obj_new_list>:

mp_obj_t mp_obj_new_list(size_t n, mp_obj_t *items) {
   11b10:	b580      	push	{r7, lr}
   11b12:	b084      	sub	sp, #16
   11b14:	af00      	add	r7, sp, #0
   11b16:	6078      	str	r0, [r7, #4]
   11b18:	6039      	str	r1, [r7, #0]
    mp_obj_list_t *o = list_new(n);
   11b1a:	6878      	ldr	r0, [r7, #4]
   11b1c:	f7ff ffe6 	bl	11aec <list_new>
   11b20:	60b8      	str	r0, [r7, #8]
    if (items != NULL) {
   11b22:	683b      	ldr	r3, [r7, #0]
   11b24:	2b00      	cmp	r3, #0
   11b26:	d014      	beq.n	11b52 <mp_obj_new_list+0x42>
        for (size_t i = 0; i < n; i++) {
   11b28:	2300      	movs	r3, #0
   11b2a:	60fb      	str	r3, [r7, #12]
   11b2c:	e00d      	b.n	11b4a <mp_obj_new_list+0x3a>
            o->items[i] = items[i];
   11b2e:	68bb      	ldr	r3, [r7, #8]
   11b30:	68da      	ldr	r2, [r3, #12]
   11b32:	68fb      	ldr	r3, [r7, #12]
   11b34:	009b      	lsls	r3, r3, #2
   11b36:	4413      	add	r3, r2
   11b38:	68fa      	ldr	r2, [r7, #12]
   11b3a:	0092      	lsls	r2, r2, #2
   11b3c:	6839      	ldr	r1, [r7, #0]
   11b3e:	440a      	add	r2, r1
   11b40:	6812      	ldr	r2, [r2, #0]
   11b42:	601a      	str	r2, [r3, #0]
        for (size_t i = 0; i < n; i++) {
   11b44:	68fb      	ldr	r3, [r7, #12]
   11b46:	3301      	adds	r3, #1
   11b48:	60fb      	str	r3, [r7, #12]
   11b4a:	68fa      	ldr	r2, [r7, #12]
   11b4c:	687b      	ldr	r3, [r7, #4]
   11b4e:	429a      	cmp	r2, r3
   11b50:	d3ed      	bcc.n	11b2e <mp_obj_new_list+0x1e>
        }
    }
    return MP_OBJ_FROM_PTR(o);
   11b52:	68bb      	ldr	r3, [r7, #8]
}
   11b54:	4618      	mov	r0, r3
   11b56:	3710      	adds	r7, #16
   11b58:	46bd      	mov	sp, r7
   11b5a:	bd80      	pop	{r7, pc}

00011b5c <mp_obj_list_get>:

void mp_obj_list_get(mp_obj_t self_in, size_t *len, mp_obj_t **items) {
   11b5c:	b480      	push	{r7}
   11b5e:	b087      	sub	sp, #28
   11b60:	af00      	add	r7, sp, #0
   11b62:	60f8      	str	r0, [r7, #12]
   11b64:	60b9      	str	r1, [r7, #8]
   11b66:	607a      	str	r2, [r7, #4]
    mp_obj_list_t *self = MP_OBJ_TO_PTR(self_in);
   11b68:	68fb      	ldr	r3, [r7, #12]
   11b6a:	617b      	str	r3, [r7, #20]
    *len = self->len;
   11b6c:	697b      	ldr	r3, [r7, #20]
   11b6e:	689a      	ldr	r2, [r3, #8]
   11b70:	68bb      	ldr	r3, [r7, #8]
   11b72:	601a      	str	r2, [r3, #0]
    *items = self->items;
   11b74:	697b      	ldr	r3, [r7, #20]
   11b76:	68da      	ldr	r2, [r3, #12]
   11b78:	687b      	ldr	r3, [r7, #4]
   11b7a:	601a      	str	r2, [r3, #0]
}
   11b7c:	bf00      	nop
   11b7e:	371c      	adds	r7, #28
   11b80:	46bd      	mov	sp, r7
   11b82:	f85d 7b04 	ldr.w	r7, [sp], #4
   11b86:	4770      	bx	lr

00011b88 <mp_obj_list_set_len>:

void mp_obj_list_set_len(mp_obj_t self_in, size_t len) {
   11b88:	b480      	push	{r7}
   11b8a:	b085      	sub	sp, #20
   11b8c:	af00      	add	r7, sp, #0
   11b8e:	6078      	str	r0, [r7, #4]
   11b90:	6039      	str	r1, [r7, #0]
    // trust that the caller knows what it's doing
    // TODO realloc if len got much smaller than alloc
    mp_obj_list_t *self = MP_OBJ_TO_PTR(self_in);
   11b92:	687b      	ldr	r3, [r7, #4]
   11b94:	60fb      	str	r3, [r7, #12]
    self->len = len;
   11b96:	68fb      	ldr	r3, [r7, #12]
   11b98:	683a      	ldr	r2, [r7, #0]
   11b9a:	609a      	str	r2, [r3, #8]
}
   11b9c:	bf00      	nop
   11b9e:	3714      	adds	r7, #20
   11ba0:	46bd      	mov	sp, r7
   11ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
   11ba6:	4770      	bx	lr

00011ba8 <mp_obj_list_store>:

void mp_obj_list_store(mp_obj_t self_in, mp_obj_t index, mp_obj_t value) {
   11ba8:	b580      	push	{r7, lr}
   11baa:	b086      	sub	sp, #24
   11bac:	af00      	add	r7, sp, #0
   11bae:	60f8      	str	r0, [r7, #12]
   11bb0:	60b9      	str	r1, [r7, #8]
   11bb2:	607a      	str	r2, [r7, #4]
    mp_obj_list_t *self = MP_OBJ_TO_PTR(self_in);
   11bb4:	68fb      	ldr	r3, [r7, #12]
   11bb6:	617b      	str	r3, [r7, #20]
    size_t i = mp_get_index(self->base.type, self->len, index, false);
   11bb8:	697b      	ldr	r3, [r7, #20]
   11bba:	6818      	ldr	r0, [r3, #0]
   11bbc:	697b      	ldr	r3, [r7, #20]
   11bbe:	6899      	ldr	r1, [r3, #8]
   11bc0:	2300      	movs	r3, #0
   11bc2:	68ba      	ldr	r2, [r7, #8]
   11bc4:	f7fc fa40 	bl	e048 <mp_get_index>
   11bc8:	6138      	str	r0, [r7, #16]
    self->items[i] = value;
   11bca:	697b      	ldr	r3, [r7, #20]
   11bcc:	68da      	ldr	r2, [r3, #12]
   11bce:	693b      	ldr	r3, [r7, #16]
   11bd0:	009b      	lsls	r3, r3, #2
   11bd2:	4413      	add	r3, r2
   11bd4:	687a      	ldr	r2, [r7, #4]
   11bd6:	601a      	str	r2, [r3, #0]
}
   11bd8:	bf00      	nop
   11bda:	3718      	adds	r7, #24
   11bdc:	46bd      	mov	sp, r7
   11bde:	bd80      	pop	{r7, pc}

00011be0 <list_it_iternext>:
    mp_fun_1_t iternext;
    mp_obj_t list;
    size_t cur;
} mp_obj_list_it_t;

STATIC mp_obj_t list_it_iternext(mp_obj_t self_in) {
   11be0:	b480      	push	{r7}
   11be2:	b087      	sub	sp, #28
   11be4:	af00      	add	r7, sp, #0
   11be6:	6078      	str	r0, [r7, #4]
    mp_obj_list_it_t *self = MP_OBJ_TO_PTR(self_in);
   11be8:	687b      	ldr	r3, [r7, #4]
   11bea:	617b      	str	r3, [r7, #20]
    mp_obj_list_t *list = MP_OBJ_TO_PTR(self->list);
   11bec:	697b      	ldr	r3, [r7, #20]
   11bee:	689b      	ldr	r3, [r3, #8]
   11bf0:	613b      	str	r3, [r7, #16]
    if (self->cur < list->len) {
   11bf2:	697b      	ldr	r3, [r7, #20]
   11bf4:	68da      	ldr	r2, [r3, #12]
   11bf6:	693b      	ldr	r3, [r7, #16]
   11bf8:	689b      	ldr	r3, [r3, #8]
   11bfa:	429a      	cmp	r2, r3
   11bfc:	d20e      	bcs.n	11c1c <list_it_iternext+0x3c>
        mp_obj_t o_out = list->items[self->cur];
   11bfe:	693b      	ldr	r3, [r7, #16]
   11c00:	68da      	ldr	r2, [r3, #12]
   11c02:	697b      	ldr	r3, [r7, #20]
   11c04:	68db      	ldr	r3, [r3, #12]
   11c06:	009b      	lsls	r3, r3, #2
   11c08:	4413      	add	r3, r2
   11c0a:	681b      	ldr	r3, [r3, #0]
   11c0c:	60fb      	str	r3, [r7, #12]
        self->cur += 1;
   11c0e:	697b      	ldr	r3, [r7, #20]
   11c10:	68db      	ldr	r3, [r3, #12]
   11c12:	1c5a      	adds	r2, r3, #1
   11c14:	697b      	ldr	r3, [r7, #20]
   11c16:	60da      	str	r2, [r3, #12]
        return o_out;
   11c18:	68fb      	ldr	r3, [r7, #12]
   11c1a:	e000      	b.n	11c1e <list_it_iternext+0x3e>
    } else {
        return MP_OBJ_STOP_ITERATION;
   11c1c:	2304      	movs	r3, #4
    }
}
   11c1e:	4618      	mov	r0, r3
   11c20:	371c      	adds	r7, #28
   11c22:	46bd      	mov	sp, r7
   11c24:	f85d 7b04 	ldr.w	r7, [sp], #4
   11c28:	4770      	bx	lr
   11c2a:	bf00      	nop

00011c2c <mp_obj_new_list_iterator>:

mp_obj_t mp_obj_new_list_iterator(mp_obj_t list, size_t cur, mp_obj_iter_buf_t *iter_buf) {
   11c2c:	b480      	push	{r7}
   11c2e:	b087      	sub	sp, #28
   11c30:	af00      	add	r7, sp, #0
   11c32:	60f8      	str	r0, [r7, #12]
   11c34:	60b9      	str	r1, [r7, #8]
   11c36:	607a      	str	r2, [r7, #4]
    assert(sizeof(mp_obj_list_it_t) <= sizeof(mp_obj_iter_buf_t));
    mp_obj_list_it_t *o = (mp_obj_list_it_t*)iter_buf;
   11c38:	687b      	ldr	r3, [r7, #4]
   11c3a:	617b      	str	r3, [r7, #20]
    o->base.type = &mp_type_polymorph_iter;
   11c3c:	697b      	ldr	r3, [r7, #20]
   11c3e:	4a09      	ldr	r2, [pc, #36]	; (11c64 <mp_obj_new_list_iterator+0x38>)
   11c40:	601a      	str	r2, [r3, #0]
    o->iternext = list_it_iternext;
   11c42:	697b      	ldr	r3, [r7, #20]
   11c44:	4a08      	ldr	r2, [pc, #32]	; (11c68 <mp_obj_new_list_iterator+0x3c>)
   11c46:	605a      	str	r2, [r3, #4]
    o->list = list;
   11c48:	697b      	ldr	r3, [r7, #20]
   11c4a:	68fa      	ldr	r2, [r7, #12]
   11c4c:	609a      	str	r2, [r3, #8]
    o->cur = cur;
   11c4e:	697b      	ldr	r3, [r7, #20]
   11c50:	68ba      	ldr	r2, [r7, #8]
   11c52:	60da      	str	r2, [r3, #12]
    return MP_OBJ_FROM_PTR(o);
   11c54:	697b      	ldr	r3, [r7, #20]
}
   11c56:	4618      	mov	r0, r3
   11c58:	371c      	adds	r7, #28
   11c5a:	46bd      	mov	sp, r7
   11c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
   11c60:	4770      	bx	lr
   11c62:	bf00      	nop
   11c64:	000233dc 	.word	0x000233dc
   11c68:	00011be1 	.word	0x00011be1

00011c6c <MP_OBJ_IS_OBJ>:
    { return ((((mp_int_t)(o)) & 3) == 0); }
   11c6c:	b480      	push	{r7}
   11c6e:	b083      	sub	sp, #12
   11c70:	af00      	add	r7, sp, #0
   11c72:	6078      	str	r0, [r7, #4]
   11c74:	687b      	ldr	r3, [r7, #4]
   11c76:	f003 0303 	and.w	r3, r3, #3
   11c7a:	2b00      	cmp	r3, #0
   11c7c:	bf0c      	ite	eq
   11c7e:	2301      	moveq	r3, #1
   11c80:	2300      	movne	r3, #0
   11c82:	b2db      	uxtb	r3, r3
   11c84:	4618      	mov	r0, r3
   11c86:	370c      	adds	r7, #12
   11c88:	46bd      	mov	sp, r7
   11c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
   11c8e:	4770      	bx	lr

00011c90 <map_make_new>:
    size_t n_iters;
    mp_obj_t fun;
    mp_obj_t iters[];
} mp_obj_map_t;

STATIC mp_obj_t map_make_new(const mp_obj_type_t *type, size_t n_args, size_t n_kw, const mp_obj_t *args) {
   11c90:	b580      	push	{r7, lr}
   11c92:	b088      	sub	sp, #32
   11c94:	af02      	add	r7, sp, #8
   11c96:	60f8      	str	r0, [r7, #12]
   11c98:	60b9      	str	r1, [r7, #8]
   11c9a:	607a      	str	r2, [r7, #4]
   11c9c:	603b      	str	r3, [r7, #0]
    mp_arg_check_num(n_args, n_kw, 2, MP_OBJ_FUN_ARGS_MAX, false);
   11c9e:	2300      	movs	r3, #0
   11ca0:	9300      	str	r3, [sp, #0]
   11ca2:	f64f 73ff 	movw	r3, #65535	; 0xffff
   11ca6:	2202      	movs	r2, #2
   11ca8:	6879      	ldr	r1, [r7, #4]
   11caa:	68b8      	ldr	r0, [r7, #8]
   11cac:	f7fb fb0e 	bl	d2cc <mp_arg_check_num>
    mp_obj_map_t *o = m_new_obj_var(mp_obj_map_t, mp_obj_t, n_args - 1);
   11cb0:	68bb      	ldr	r3, [r7, #8]
   11cb2:	3302      	adds	r3, #2
   11cb4:	009b      	lsls	r3, r3, #2
   11cb6:	4618      	mov	r0, r3
   11cb8:	f7ee fb30 	bl	31c <m_malloc>
   11cbc:	6138      	str	r0, [r7, #16]
    o->base.type = type;
   11cbe:	693b      	ldr	r3, [r7, #16]
   11cc0:	68fa      	ldr	r2, [r7, #12]
   11cc2:	601a      	str	r2, [r3, #0]
    o->n_iters = n_args - 1;
   11cc4:	68bb      	ldr	r3, [r7, #8]
   11cc6:	1e5a      	subs	r2, r3, #1
   11cc8:	693b      	ldr	r3, [r7, #16]
   11cca:	605a      	str	r2, [r3, #4]
    o->fun = args[0];
   11ccc:	683b      	ldr	r3, [r7, #0]
   11cce:	681a      	ldr	r2, [r3, #0]
   11cd0:	693b      	ldr	r3, [r7, #16]
   11cd2:	609a      	str	r2, [r3, #8]
    for (size_t i = 0; i < n_args - 1; i++) {
   11cd4:	2300      	movs	r3, #0
   11cd6:	617b      	str	r3, [r7, #20]
   11cd8:	e013      	b.n	11d02 <map_make_new+0x72>
        o->iters[i] = mp_getiter(args[i + 1], NULL);
   11cda:	697b      	ldr	r3, [r7, #20]
   11cdc:	3301      	adds	r3, #1
   11cde:	009b      	lsls	r3, r3, #2
   11ce0:	683a      	ldr	r2, [r7, #0]
   11ce2:	4413      	add	r3, r2
   11ce4:	681b      	ldr	r3, [r3, #0]
   11ce6:	2100      	movs	r1, #0
   11ce8:	4618      	mov	r0, r3
   11cea:	f7fa ff31 	bl	cb50 <mp_getiter>
   11cee:	4601      	mov	r1, r0
   11cf0:	693a      	ldr	r2, [r7, #16]
   11cf2:	697b      	ldr	r3, [r7, #20]
   11cf4:	3302      	adds	r3, #2
   11cf6:	009b      	lsls	r3, r3, #2
   11cf8:	4413      	add	r3, r2
   11cfa:	6059      	str	r1, [r3, #4]
    for (size_t i = 0; i < n_args - 1; i++) {
   11cfc:	697b      	ldr	r3, [r7, #20]
   11cfe:	3301      	adds	r3, #1
   11d00:	617b      	str	r3, [r7, #20]
   11d02:	68bb      	ldr	r3, [r7, #8]
   11d04:	1e5a      	subs	r2, r3, #1
   11d06:	697b      	ldr	r3, [r7, #20]
   11d08:	429a      	cmp	r2, r3
   11d0a:	d8e6      	bhi.n	11cda <map_make_new+0x4a>
    }
    return MP_OBJ_FROM_PTR(o);
   11d0c:	693b      	ldr	r3, [r7, #16]
}
   11d0e:	4618      	mov	r0, r3
   11d10:	3718      	adds	r7, #24
   11d12:	46bd      	mov	sp, r7
   11d14:	bd80      	pop	{r7, pc}
   11d16:	bf00      	nop

00011d18 <map_iternext>:

STATIC mp_obj_t map_iternext(mp_obj_t self_in) {
   11d18:	b580      	push	{r7, lr}
   11d1a:	b086      	sub	sp, #24
   11d1c:	af00      	add	r7, sp, #0
   11d1e:	6078      	str	r0, [r7, #4]
    mp_check_self(MP_OBJ_IS_TYPE(self_in, &mp_type_map));
   11d20:	6878      	ldr	r0, [r7, #4]
   11d22:	f7ff ffa3 	bl	11c6c <MP_OBJ_IS_OBJ>
   11d26:	4603      	mov	r3, r0
   11d28:	f083 0301 	eor.w	r3, r3, #1
   11d2c:	b2db      	uxtb	r3, r3
   11d2e:	2b00      	cmp	r3, #0
   11d30:	d104      	bne.n	11d3c <map_iternext+0x24>
   11d32:	687b      	ldr	r3, [r7, #4]
   11d34:	681b      	ldr	r3, [r3, #0]
   11d36:	4a21      	ldr	r2, [pc, #132]	; (11dbc <map_iternext+0xa4>)
   11d38:	4293      	cmp	r3, r2
   11d3a:	d005      	beq.n	11d48 <map_iternext+0x30>
   11d3c:	4b20      	ldr	r3, [pc, #128]	; (11dc0 <map_iternext+0xa8>)
   11d3e:	4a21      	ldr	r2, [pc, #132]	; (11dc4 <map_iternext+0xac>)
   11d40:	2134      	movs	r1, #52	; 0x34
   11d42:	4821      	ldr	r0, [pc, #132]	; (11dc8 <map_iternext+0xb0>)
   11d44:	f009 fcc4 	bl	1b6d0 <__assert_func>
    mp_obj_map_t *self = MP_OBJ_TO_PTR(self_in);
   11d48:	687b      	ldr	r3, [r7, #4]
   11d4a:	613b      	str	r3, [r7, #16]
    mp_obj_t *nextses = m_new(mp_obj_t, self->n_iters);
   11d4c:	693b      	ldr	r3, [r7, #16]
   11d4e:	685b      	ldr	r3, [r3, #4]
   11d50:	009b      	lsls	r3, r3, #2
   11d52:	4618      	mov	r0, r3
   11d54:	f7ee fae2 	bl	31c <m_malloc>
   11d58:	60f8      	str	r0, [r7, #12]

    for (size_t i = 0; i < self->n_iters; i++) {
   11d5a:	2300      	movs	r3, #0
   11d5c:	617b      	str	r3, [r7, #20]
   11d5e:	e01a      	b.n	11d96 <map_iternext+0x7e>
        mp_obj_t next = mp_iternext(self->iters[i]);
   11d60:	693a      	ldr	r2, [r7, #16]
   11d62:	697b      	ldr	r3, [r7, #20]
   11d64:	3302      	adds	r3, #2
   11d66:	009b      	lsls	r3, r3, #2
   11d68:	4413      	add	r3, r2
   11d6a:	685b      	ldr	r3, [r3, #4]
   11d6c:	4618      	mov	r0, r3
   11d6e:	f7fa ff71 	bl	cc54 <mp_iternext>
   11d72:	60b8      	str	r0, [r7, #8]
        if (next == MP_OBJ_STOP_ITERATION) {
   11d74:	68bb      	ldr	r3, [r7, #8]
   11d76:	2b04      	cmp	r3, #4
   11d78:	d104      	bne.n	11d84 <map_iternext+0x6c>
            m_del(mp_obj_t, nextses, self->n_iters);
   11d7a:	68f8      	ldr	r0, [r7, #12]
   11d7c:	f7ee fb48 	bl	410 <m_free>
            return MP_OBJ_STOP_ITERATION;
   11d80:	2304      	movs	r3, #4
   11d82:	e016      	b.n	11db2 <map_iternext+0x9a>
        }
        nextses[i] = next;
   11d84:	697b      	ldr	r3, [r7, #20]
   11d86:	009b      	lsls	r3, r3, #2
   11d88:	68fa      	ldr	r2, [r7, #12]
   11d8a:	4413      	add	r3, r2
   11d8c:	68ba      	ldr	r2, [r7, #8]
   11d8e:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < self->n_iters; i++) {
   11d90:	697b      	ldr	r3, [r7, #20]
   11d92:	3301      	adds	r3, #1
   11d94:	617b      	str	r3, [r7, #20]
   11d96:	693b      	ldr	r3, [r7, #16]
   11d98:	685a      	ldr	r2, [r3, #4]
   11d9a:	697b      	ldr	r3, [r7, #20]
   11d9c:	429a      	cmp	r2, r3
   11d9e:	d8df      	bhi.n	11d60 <map_iternext+0x48>
    }
    return mp_call_function_n_kw(self->fun, self->n_iters, 0, nextses);
   11da0:	693b      	ldr	r3, [r7, #16]
   11da2:	6898      	ldr	r0, [r3, #8]
   11da4:	693b      	ldr	r3, [r7, #16]
   11da6:	6859      	ldr	r1, [r3, #4]
   11da8:	68fb      	ldr	r3, [r7, #12]
   11daa:	2200      	movs	r2, #0
   11dac:	f7fa f95a 	bl	c064 <mp_call_function_n_kw>
   11db0:	4603      	mov	r3, r0
}
   11db2:	4618      	mov	r0, r3
   11db4:	3718      	adds	r7, #24
   11db6:	46bd      	mov	sp, r7
   11db8:	bd80      	pop	{r7, pc}
   11dba:	bf00      	nop
   11dbc:	00023270 	.word	0x00023270
   11dc0:	00023200 	.word	0x00023200
   11dc4:	000232ac 	.word	0x000232ac
   11dc8:	0002325c 	.word	0x0002325c

00011dcc <MP_OBJ_IS_OBJ>:
   11dcc:	b480      	push	{r7}
   11dce:	b083      	sub	sp, #12
   11dd0:	af00      	add	r7, sp, #0
   11dd2:	6078      	str	r0, [r7, #4]
   11dd4:	687b      	ldr	r3, [r7, #4]
   11dd6:	f003 0303 	and.w	r3, r3, #3
   11dda:	2b00      	cmp	r3, #0
   11ddc:	bf0c      	ite	eq
   11dde:	2301      	moveq	r3, #1
   11de0:	2300      	movne	r3, #0
   11de2:	b2db      	uxtb	r3, r3
   11de4:	4618      	mov	r0, r3
   11de6:	370c      	adds	r7, #12
   11de8:	46bd      	mov	sp, r7
   11dea:	f85d 7b04 	ldr.w	r7, [sp], #4
   11dee:	4770      	bx	lr

00011df0 <mp_module_call_init>:
void mp_module_register(qstr qstr, mp_obj_t module);

#if MICROPY_MODULE_BUILTIN_INIT
void mp_module_call_init(qstr module_name, mp_obj_t module_obj);
#else
static inline void mp_module_call_init(qstr module_name, mp_obj_t module_obj) {
   11df0:	b480      	push	{r7}
   11df2:	b083      	sub	sp, #12
   11df4:	af00      	add	r7, sp, #0
   11df6:	6078      	str	r0, [r7, #4]
   11df8:	6039      	str	r1, [r7, #0]
    (void)module_name;
    (void)module_obj;
}
   11dfa:	bf00      	nop
   11dfc:	370c      	adds	r7, #12
   11dfe:	46bd      	mov	sp, r7
   11e00:	f85d 7b04 	ldr.w	r7, [sp], #4
   11e04:	4770      	bx	lr
   11e06:	bf00      	nop

00011e08 <module_print>:

#include "py/objmodule.h"
#include "py/runtime.h"
#include "py/builtin.h"

STATIC void module_print(const mp_print_t *print, mp_obj_t self_in, mp_print_kind_t kind) {
   11e08:	b580      	push	{r7, lr}
   11e0a:	b088      	sub	sp, #32
   11e0c:	af00      	add	r7, sp, #0
   11e0e:	60f8      	str	r0, [r7, #12]
   11e10:	60b9      	str	r1, [r7, #8]
   11e12:	607a      	str	r2, [r7, #4]
    (void)kind;
    mp_obj_module_t *self = MP_OBJ_TO_PTR(self_in);
   11e14:	68bb      	ldr	r3, [r7, #8]
   11e16:	61bb      	str	r3, [r7, #24]

    const char *module_name = "";
   11e18:	4b0e      	ldr	r3, [pc, #56]	; (11e54 <module_print+0x4c>)
   11e1a:	61fb      	str	r3, [r7, #28]
    mp_map_elem_t *elem = mp_map_lookup(&self->globals->map, MP_OBJ_NEW_QSTR(MP_QSTR___name__), MP_MAP_LOOKUP);
   11e1c:	69bb      	ldr	r3, [r7, #24]
   11e1e:	685b      	ldr	r3, [r3, #4]
   11e20:	3304      	adds	r3, #4
   11e22:	2200      	movs	r2, #0
   11e24:	2172      	movs	r1, #114	; 0x72
   11e26:	4618      	mov	r0, r3
   11e28:	f7fb fc9a 	bl	d760 <mp_map_lookup>
   11e2c:	6178      	str	r0, [r7, #20]
    if (elem != NULL) {
   11e2e:	697b      	ldr	r3, [r7, #20]
   11e30:	2b00      	cmp	r3, #0
   11e32:	d005      	beq.n	11e40 <module_print+0x38>
        module_name = mp_obj_str_get_str(elem->value);
   11e34:	697b      	ldr	r3, [r7, #20]
   11e36:	685b      	ldr	r3, [r3, #4]
   11e38:	4618      	mov	r0, r3
   11e3a:	f003 fd3b 	bl	158b4 <mp_obj_str_get_str>
   11e3e:	61f8      	str	r0, [r7, #28]
        mp_printf(print, "<module '%s' from '%s'>", module_name, mp_obj_str_get_str(elem->value));
        return;
    }
#endif

    mp_printf(print, "<module '%s'>", module_name);
   11e40:	69fa      	ldr	r2, [r7, #28]
   11e42:	4905      	ldr	r1, [pc, #20]	; (11e58 <module_print+0x50>)
   11e44:	68f8      	ldr	r0, [r7, #12]
   11e46:	f7f0 f8e9 	bl	201c <mp_printf>
}
   11e4a:	bf00      	nop
   11e4c:	3720      	adds	r7, #32
   11e4e:	46bd      	mov	sp, r7
   11e50:	bd80      	pop	{r7, pc}
   11e52:	bf00      	nop
   11e54:	000232bc 	.word	0x000232bc
   11e58:	000232c0 	.word	0x000232c0

00011e5c <module_attr>:

STATIC void module_attr(mp_obj_t self_in, qstr attr, mp_obj_t *dest) {
   11e5c:	b580      	push	{r7, lr}
   11e5e:	b088      	sub	sp, #32
   11e60:	af00      	add	r7, sp, #0
   11e62:	60f8      	str	r0, [r7, #12]
   11e64:	60b9      	str	r1, [r7, #8]
   11e66:	607a      	str	r2, [r7, #4]
    mp_obj_module_t *self = MP_OBJ_TO_PTR(self_in);
   11e68:	68fb      	ldr	r3, [r7, #12]
   11e6a:	61fb      	str	r3, [r7, #28]
    if (dest[0] == MP_OBJ_NULL) {
   11e6c:	687b      	ldr	r3, [r7, #4]
   11e6e:	681b      	ldr	r3, [r3, #0]
   11e70:	2b00      	cmp	r3, #0
   11e72:	d113      	bne.n	11e9c <module_attr+0x40>
        // load attribute
        mp_map_elem_t *elem = mp_map_lookup(&self->globals->map, MP_OBJ_NEW_QSTR(attr), MP_MAP_LOOKUP);
   11e74:	69fb      	ldr	r3, [r7, #28]
   11e76:	685b      	ldr	r3, [r3, #4]
   11e78:	1d18      	adds	r0, r3, #4
   11e7a:	68bb      	ldr	r3, [r7, #8]
   11e7c:	009b      	lsls	r3, r3, #2
   11e7e:	f043 0302 	orr.w	r3, r3, #2
   11e82:	2200      	movs	r2, #0
   11e84:	4619      	mov	r1, r3
   11e86:	f7fb fc6b 	bl	d760 <mp_map_lookup>
   11e8a:	61b8      	str	r0, [r7, #24]
        if (elem != NULL) {
   11e8c:	69bb      	ldr	r3, [r7, #24]
   11e8e:	2b00      	cmp	r3, #0
   11e90:	d02d      	beq.n	11eee <module_attr+0x92>
            dest[0] = elem->value;
   11e92:	69bb      	ldr	r3, [r7, #24]
   11e94:	685a      	ldr	r2, [r3, #4]
   11e96:	687b      	ldr	r3, [r7, #4]
   11e98:	601a      	str	r2, [r3, #0]
   11e9a:	e028      	b.n	11eee <module_attr+0x92>
        }
    } else {
        // delete/store attribute
        mp_obj_dict_t *dict = self->globals;
   11e9c:	69fb      	ldr	r3, [r7, #28]
   11e9e:	685b      	ldr	r3, [r3, #4]
   11ea0:	617b      	str	r3, [r7, #20]
        if (dict->map.is_fixed) {
   11ea2:	697b      	ldr	r3, [r7, #20]
   11ea4:	791b      	ldrb	r3, [r3, #4]
   11ea6:	f003 0302 	and.w	r3, r3, #2
   11eaa:	b2db      	uxtb	r3, r3
   11eac:	2b00      	cmp	r3, #0
   11eae:	d11d      	bne.n	11eec <module_attr+0x90>
            {
                // can't delete or store to fixed map
                return;
            }
        }
        if (dest[1] == MP_OBJ_NULL) {
   11eb0:	687b      	ldr	r3, [r7, #4]
   11eb2:	3304      	adds	r3, #4
   11eb4:	681b      	ldr	r3, [r3, #0]
   11eb6:	2b00      	cmp	r3, #0
   11eb8:	d108      	bne.n	11ecc <module_attr+0x70>
            // delete attribute
            mp_obj_dict_delete(MP_OBJ_FROM_PTR(dict), MP_OBJ_NEW_QSTR(attr));
   11eba:	68bb      	ldr	r3, [r7, #8]
   11ebc:	009b      	lsls	r3, r3, #2
   11ebe:	f043 0302 	orr.w	r3, r3, #2
   11ec2:	4619      	mov	r1, r3
   11ec4:	6978      	ldr	r0, [r7, #20]
   11ec6:	f7fd fae3 	bl	f490 <mp_obj_dict_delete>
   11eca:	e00b      	b.n	11ee4 <module_attr+0x88>
        } else {
            // store attribute
            // TODO CPython allows STORE_ATTR to a module, but is this the correct implementation?
            mp_obj_dict_store(MP_OBJ_FROM_PTR(dict), MP_OBJ_NEW_QSTR(attr), dest[1]);
   11ecc:	68bb      	ldr	r3, [r7, #8]
   11ece:	009b      	lsls	r3, r3, #2
   11ed0:	f043 0302 	orr.w	r3, r3, #2
   11ed4:	4619      	mov	r1, r3
   11ed6:	687b      	ldr	r3, [r7, #4]
   11ed8:	3304      	adds	r3, #4
   11eda:	681b      	ldr	r3, [r3, #0]
   11edc:	461a      	mov	r2, r3
   11ede:	6978      	ldr	r0, [r7, #20]
   11ee0:	f7fd fa9e 	bl	f420 <mp_obj_dict_store>
        }
        dest[0] = MP_OBJ_NULL; // indicate success
   11ee4:	687b      	ldr	r3, [r7, #4]
   11ee6:	2200      	movs	r2, #0
   11ee8:	601a      	str	r2, [r3, #0]
   11eea:	e000      	b.n	11eee <module_attr+0x92>
                return;
   11eec:	bf00      	nop
    }
}
   11eee:	3720      	adds	r7, #32
   11ef0:	46bd      	mov	sp, r7
   11ef2:	bd80      	pop	{r7, pc}

00011ef4 <mp_obj_new_module>:
    .name = MP_QSTR_module,
    .print = module_print,
    .attr = module_attr,
};

mp_obj_t mp_obj_new_module(qstr module_name) {
   11ef4:	b580      	push	{r7, lr}
   11ef6:	b086      	sub	sp, #24
   11ef8:	af00      	add	r7, sp, #0
   11efa:	6078      	str	r0, [r7, #4]
    mp_map_t *mp_loaded_modules_map = &MP_STATE_VM(mp_loaded_modules_dict).map;
   11efc:	4b18      	ldr	r3, [pc, #96]	; (11f60 <mp_obj_new_module+0x6c>)
   11efe:	617b      	str	r3, [r7, #20]
    mp_map_elem_t *el = mp_map_lookup(mp_loaded_modules_map, MP_OBJ_NEW_QSTR(module_name), MP_MAP_LOOKUP_ADD_IF_NOT_FOUND);
   11f00:	687b      	ldr	r3, [r7, #4]
   11f02:	009b      	lsls	r3, r3, #2
   11f04:	f043 0302 	orr.w	r3, r3, #2
   11f08:	2201      	movs	r2, #1
   11f0a:	4619      	mov	r1, r3
   11f0c:	6978      	ldr	r0, [r7, #20]
   11f0e:	f7fb fc27 	bl	d760 <mp_map_lookup>
   11f12:	6138      	str	r0, [r7, #16]
    // We could error out if module already exists, but let C extensions
    // add new members to existing modules.
    if (el->value != MP_OBJ_NULL) {
   11f14:	693b      	ldr	r3, [r7, #16]
   11f16:	685b      	ldr	r3, [r3, #4]
   11f18:	2b00      	cmp	r3, #0
   11f1a:	d002      	beq.n	11f22 <mp_obj_new_module+0x2e>
        return el->value;
   11f1c:	693b      	ldr	r3, [r7, #16]
   11f1e:	685b      	ldr	r3, [r3, #4]
   11f20:	e01a      	b.n	11f58 <mp_obj_new_module+0x64>
    }

    // create new module object
    mp_obj_module_t *o = m_new_obj(mp_obj_module_t);
   11f22:	2008      	movs	r0, #8
   11f24:	f7ee f9fa 	bl	31c <m_malloc>
   11f28:	60f8      	str	r0, [r7, #12]
    o->base.type = &mp_type_module;
   11f2a:	68fb      	ldr	r3, [r7, #12]
   11f2c:	4a0d      	ldr	r2, [pc, #52]	; (11f64 <mp_obj_new_module+0x70>)
   11f2e:	601a      	str	r2, [r3, #0]
    o->globals = MP_OBJ_TO_PTR(mp_obj_new_dict(MICROPY_MODULE_DICT_SIZE));
   11f30:	2001      	movs	r0, #1
   11f32:	f7fd fa53 	bl	f3dc <mp_obj_new_dict>
   11f36:	4602      	mov	r2, r0
   11f38:	68fb      	ldr	r3, [r7, #12]
   11f3a:	605a      	str	r2, [r3, #4]

    // store __name__ entry in the module
    mp_obj_dict_store(MP_OBJ_FROM_PTR(o->globals), MP_OBJ_NEW_QSTR(MP_QSTR___name__), MP_OBJ_NEW_QSTR(module_name));
   11f3c:	68fb      	ldr	r3, [r7, #12]
   11f3e:	6858      	ldr	r0, [r3, #4]
   11f40:	687b      	ldr	r3, [r7, #4]
   11f42:	009b      	lsls	r3, r3, #2
   11f44:	f043 0302 	orr.w	r3, r3, #2
   11f48:	461a      	mov	r2, r3
   11f4a:	2172      	movs	r1, #114	; 0x72
   11f4c:	f7fd fa68 	bl	f420 <mp_obj_dict_store>

    // store the new module into the slot in the global dict holding all modules
    el->value = MP_OBJ_FROM_PTR(o);
   11f50:	693b      	ldr	r3, [r7, #16]
   11f52:	68fa      	ldr	r2, [r7, #12]
   11f54:	605a      	str	r2, [r3, #4]

    // return the new module
    return MP_OBJ_FROM_PTR(o);
   11f56:	68fb      	ldr	r3, [r7, #12]
}
   11f58:	4618      	mov	r0, r3
   11f5a:	3718      	adds	r7, #24
   11f5c:	46bd      	mov	sp, r7
   11f5e:	bd80      	pop	{r7, pc}
   11f60:	20001318 	.word	0x20001318
   11f64:	000232d0 	.word	0x000232d0

00011f68 <mp_obj_module_get_globals>:

mp_obj_dict_t *mp_obj_module_get_globals(mp_obj_t self_in) {
   11f68:	b580      	push	{r7, lr}
   11f6a:	b084      	sub	sp, #16
   11f6c:	af00      	add	r7, sp, #0
   11f6e:	6078      	str	r0, [r7, #4]
    assert(MP_OBJ_IS_TYPE(self_in, &mp_type_module));
   11f70:	6878      	ldr	r0, [r7, #4]
   11f72:	f7ff ff2b 	bl	11dcc <MP_OBJ_IS_OBJ>
   11f76:	4603      	mov	r3, r0
   11f78:	f083 0301 	eor.w	r3, r3, #1
   11f7c:	b2db      	uxtb	r3, r3
   11f7e:	2b00      	cmp	r3, #0
   11f80:	d104      	bne.n	11f8c <mp_obj_module_get_globals+0x24>
   11f82:	687b      	ldr	r3, [r7, #4]
   11f84:	681b      	ldr	r3, [r3, #0]
   11f86:	4a08      	ldr	r2, [pc, #32]	; (11fa8 <mp_obj_module_get_globals+0x40>)
   11f88:	4293      	cmp	r3, r2
   11f8a:	d005      	beq.n	11f98 <mp_obj_module_get_globals+0x30>
   11f8c:	4b07      	ldr	r3, [pc, #28]	; (11fac <mp_obj_module_get_globals+0x44>)
   11f8e:	4a08      	ldr	r2, [pc, #32]	; (11fb0 <mp_obj_module_get_globals+0x48>)
   11f90:	217e      	movs	r1, #126	; 0x7e
   11f92:	4808      	ldr	r0, [pc, #32]	; (11fb4 <mp_obj_module_get_globals+0x4c>)
   11f94:	f009 fb9c 	bl	1b6d0 <__assert_func>
    mp_obj_module_t *self = MP_OBJ_TO_PTR(self_in);
   11f98:	687b      	ldr	r3, [r7, #4]
   11f9a:	60fb      	str	r3, [r7, #12]
    return self->globals;
   11f9c:	68fb      	ldr	r3, [r7, #12]
   11f9e:	685b      	ldr	r3, [r3, #4]
}
   11fa0:	4618      	mov	r0, r3
   11fa2:	3710      	adds	r7, #16
   11fa4:	46bd      	mov	sp, r7
   11fa6:	bd80      	pop	{r7, pc}
   11fa8:	000232d0 	.word	0x000232d0
   11fac:	0002330c 	.word	0x0002330c
   11fb0:	00023384 	.word	0x00023384
   11fb4:	00023338 	.word	0x00023338

00011fb8 <mp_module_get>:

MP_DEFINE_CONST_MAP(mp_builtin_module_weak_links_map, mp_builtin_module_weak_links_table);
#endif

// returns MP_OBJ_NULL if not found
mp_obj_t mp_module_get(qstr module_name) {
   11fb8:	b580      	push	{r7, lr}
   11fba:	b084      	sub	sp, #16
   11fbc:	af00      	add	r7, sp, #0
   11fbe:	6078      	str	r0, [r7, #4]
    mp_map_t *mp_loaded_modules_map = &MP_STATE_VM(mp_loaded_modules_dict).map;
   11fc0:	4b14      	ldr	r3, [pc, #80]	; (12014 <mp_module_get+0x5c>)
   11fc2:	60bb      	str	r3, [r7, #8]
    // lookup module
    mp_map_elem_t *el = mp_map_lookup(mp_loaded_modules_map, MP_OBJ_NEW_QSTR(module_name), MP_MAP_LOOKUP);
   11fc4:	687b      	ldr	r3, [r7, #4]
   11fc6:	009b      	lsls	r3, r3, #2
   11fc8:	f043 0302 	orr.w	r3, r3, #2
   11fcc:	2200      	movs	r2, #0
   11fce:	4619      	mov	r1, r3
   11fd0:	68b8      	ldr	r0, [r7, #8]
   11fd2:	f7fb fbc5 	bl	d760 <mp_map_lookup>
   11fd6:	60f8      	str	r0, [r7, #12]

    if (el == NULL) {
   11fd8:	68fb      	ldr	r3, [r7, #12]
   11fda:	2b00      	cmp	r3, #0
   11fdc:	d114      	bne.n	12008 <mp_module_get+0x50>
        // module not found, look for builtin module names
        el = mp_map_lookup((mp_map_t*)&mp_builtin_module_map, MP_OBJ_NEW_QSTR(module_name), MP_MAP_LOOKUP);
   11fde:	687b      	ldr	r3, [r7, #4]
   11fe0:	009b      	lsls	r3, r3, #2
   11fe2:	f043 0302 	orr.w	r3, r3, #2
   11fe6:	2200      	movs	r2, #0
   11fe8:	4619      	mov	r1, r3
   11fea:	480b      	ldr	r0, [pc, #44]	; (12018 <mp_module_get+0x60>)
   11fec:	f7fb fbb8 	bl	d760 <mp_map_lookup>
   11ff0:	60f8      	str	r0, [r7, #12]
        if (el == NULL) {
   11ff2:	68fb      	ldr	r3, [r7, #12]
   11ff4:	2b00      	cmp	r3, #0
   11ff6:	d101      	bne.n	11ffc <mp_module_get+0x44>
            return MP_OBJ_NULL;
   11ff8:	2300      	movs	r3, #0
   11ffa:	e007      	b.n	1200c <mp_module_get+0x54>
        }
        mp_module_call_init(module_name, el->value);
   11ffc:	68fb      	ldr	r3, [r7, #12]
   11ffe:	685b      	ldr	r3, [r3, #4]
   12000:	4619      	mov	r1, r3
   12002:	6878      	ldr	r0, [r7, #4]
   12004:	f7ff fef4 	bl	11df0 <mp_module_call_init>
    }

    // module found, return it
    return el->value;
   12008:	68fb      	ldr	r3, [r7, #12]
   1200a:	685b      	ldr	r3, [r3, #4]
}
   1200c:	4618      	mov	r0, r3
   1200e:	3710      	adds	r7, #16
   12010:	46bd      	mov	sp, r7
   12012:	bd80      	pop	{r7, pc}
   12014:	20001318 	.word	0x20001318
   12018:	00023378 	.word	0x00023378

0001201c <mp_module_register>:

void mp_module_register(qstr qst, mp_obj_t module) {
   1201c:	b580      	push	{r7, lr}
   1201e:	b084      	sub	sp, #16
   12020:	af00      	add	r7, sp, #0
   12022:	6078      	str	r0, [r7, #4]
   12024:	6039      	str	r1, [r7, #0]
    mp_map_t *mp_loaded_modules_map = &MP_STATE_VM(mp_loaded_modules_dict).map;
   12026:	4b09      	ldr	r3, [pc, #36]	; (1204c <mp_module_register+0x30>)
   12028:	60fb      	str	r3, [r7, #12]
    mp_map_lookup(mp_loaded_modules_map, MP_OBJ_NEW_QSTR(qst), MP_MAP_LOOKUP_ADD_IF_NOT_FOUND)->value = module;
   1202a:	687b      	ldr	r3, [r7, #4]
   1202c:	009b      	lsls	r3, r3, #2
   1202e:	f043 0302 	orr.w	r3, r3, #2
   12032:	2201      	movs	r2, #1
   12034:	4619      	mov	r1, r3
   12036:	68f8      	ldr	r0, [r7, #12]
   12038:	f7fb fb92 	bl	d760 <mp_map_lookup>
   1203c:	4602      	mov	r2, r0
   1203e:	683b      	ldr	r3, [r7, #0]
   12040:	6053      	str	r3, [r2, #4]
}
   12042:	bf00      	nop
   12044:	3710      	adds	r7, #16
   12046:	46bd      	mov	sp, r7
   12048:	bd80      	pop	{r7, pc}
   1204a:	bf00      	nop
   1204c:	20001318 	.word	0x20001318

00012050 <object_make_new>:

typedef struct _mp_obj_object_t {
    mp_obj_base_t base;
} mp_obj_object_t;

STATIC mp_obj_t object_make_new(const mp_obj_type_t *type, size_t n_args, size_t n_kw, const mp_obj_t *args) {
   12050:	b580      	push	{r7, lr}
   12052:	b088      	sub	sp, #32
   12054:	af02      	add	r7, sp, #8
   12056:	60f8      	str	r0, [r7, #12]
   12058:	60b9      	str	r1, [r7, #8]
   1205a:	607a      	str	r2, [r7, #4]
   1205c:	603b      	str	r3, [r7, #0]
    (void)args;
    mp_arg_check_num(n_args, n_kw, 0, 0, false);
   1205e:	2300      	movs	r3, #0
   12060:	9300      	str	r3, [sp, #0]
   12062:	2300      	movs	r3, #0
   12064:	2200      	movs	r2, #0
   12066:	6879      	ldr	r1, [r7, #4]
   12068:	68b8      	ldr	r0, [r7, #8]
   1206a:	f7fb f92f 	bl	d2cc <mp_arg_check_num>
    mp_obj_object_t *o = m_new_obj(mp_obj_object_t);
   1206e:	2004      	movs	r0, #4
   12070:	f7ee f954 	bl	31c <m_malloc>
   12074:	6178      	str	r0, [r7, #20]
    o->base.type = type;
   12076:	697b      	ldr	r3, [r7, #20]
   12078:	68fa      	ldr	r2, [r7, #12]
   1207a:	601a      	str	r2, [r3, #0]
    return MP_OBJ_FROM_PTR(o);
   1207c:	697b      	ldr	r3, [r7, #20]
}
   1207e:	4618      	mov	r0, r3
   12080:	3718      	adds	r7, #24
   12082:	46bd      	mov	sp, r7
   12084:	bd80      	pop	{r7, pc}
   12086:	bf00      	nop

00012088 <polymorph_it_iternext>:
typedef struct _mp_obj_polymorph_iter_t {
    mp_obj_base_t base;
    mp_fun_1_t iternext;
} mp_obj_polymorph_iter_t;

STATIC mp_obj_t polymorph_it_iternext(mp_obj_t self_in) {
   12088:	b580      	push	{r7, lr}
   1208a:	b084      	sub	sp, #16
   1208c:	af00      	add	r7, sp, #0
   1208e:	6078      	str	r0, [r7, #4]
    mp_obj_polymorph_iter_t *self = MP_OBJ_TO_PTR(self_in);
   12090:	687b      	ldr	r3, [r7, #4]
   12092:	60fb      	str	r3, [r7, #12]
    // Redirect call to object instance's iternext method
    return self->iternext(self_in);
   12094:	68fb      	ldr	r3, [r7, #12]
   12096:	685b      	ldr	r3, [r3, #4]
   12098:	6878      	ldr	r0, [r7, #4]
   1209a:	4798      	blx	r3
   1209c:	4603      	mov	r3, r0
}
   1209e:	4618      	mov	r0, r3
   120a0:	3710      	adds	r7, #16
   120a2:	46bd      	mov	sp, r7
   120a4:	bd80      	pop	{r7, pc}
   120a6:	bf00      	nop

000120a8 <none_print>:

typedef struct _mp_obj_none_t {
    mp_obj_base_t base;
} mp_obj_none_t;

STATIC void none_print(const mp_print_t *print, mp_obj_t self_in, mp_print_kind_t kind) {
   120a8:	b580      	push	{r7, lr}
   120aa:	b084      	sub	sp, #16
   120ac:	af00      	add	r7, sp, #0
   120ae:	60f8      	str	r0, [r7, #12]
   120b0:	60b9      	str	r1, [r7, #8]
   120b2:	607a      	str	r2, [r7, #4]
    (void)self_in;
    if (MICROPY_PY_UJSON && kind == PRINT_JSON) {
        mp_print_str(print, "null");
    } else {
        mp_print_str(print, "None");
   120b4:	4903      	ldr	r1, [pc, #12]	; (120c4 <none_print+0x1c>)
   120b6:	68f8      	ldr	r0, [r7, #12]
   120b8:	f7ef fc9c 	bl	19f4 <mp_print_str>
    }
}
   120bc:	bf00      	nop
   120be:	3710      	adds	r7, #16
   120c0:	46bd      	mov	sp, r7
   120c2:	bd80      	pop	{r7, pc}
   120c4:	00023418 	.word	0x00023418

000120c8 <mp_obj_new_bool>:
static inline mp_obj_t mp_obj_new_bool(mp_int_t x) { return x ? mp_const_true : mp_const_false; }
   120c8:	b480      	push	{r7}
   120ca:	b083      	sub	sp, #12
   120cc:	af00      	add	r7, sp, #0
   120ce:	6078      	str	r0, [r7, #4]
   120d0:	687b      	ldr	r3, [r7, #4]
   120d2:	2b00      	cmp	r3, #0
   120d4:	d001      	beq.n	120da <mp_obj_new_bool+0x12>
   120d6:	4b04      	ldr	r3, [pc, #16]	; (120e8 <mp_obj_new_bool+0x20>)
   120d8:	e000      	b.n	120dc <mp_obj_new_bool+0x14>
   120da:	4b04      	ldr	r3, [pc, #16]	; (120ec <mp_obj_new_bool+0x24>)
   120dc:	4618      	mov	r0, r3
   120de:	370c      	adds	r7, #12
   120e0:	46bd      	mov	sp, r7
   120e2:	f85d 7b04 	ldr.w	r7, [sp], #4
   120e6:	4770      	bx	lr
   120e8:	00021b78 	.word	0x00021b78
   120ec:	00021b70 	.word	0x00021b70

000120f0 <range_it_iternext>:
    mp_int_t cur;
    mp_int_t stop;
    mp_int_t step;
} mp_obj_range_it_t;

STATIC mp_obj_t range_it_iternext(mp_obj_t o_in) {
   120f0:	b480      	push	{r7}
   120f2:	b085      	sub	sp, #20
   120f4:	af00      	add	r7, sp, #0
   120f6:	6078      	str	r0, [r7, #4]
    mp_obj_range_it_t *o = MP_OBJ_TO_PTR(o_in);
   120f8:	687b      	ldr	r3, [r7, #4]
   120fa:	60fb      	str	r3, [r7, #12]
    if ((o->step > 0 && o->cur < o->stop) || (o->step < 0 && o->cur > o->stop)) {
   120fc:	68fb      	ldr	r3, [r7, #12]
   120fe:	68db      	ldr	r3, [r3, #12]
   12100:	2b00      	cmp	r3, #0
   12102:	dd05      	ble.n	12110 <range_it_iternext+0x20>
   12104:	68fb      	ldr	r3, [r7, #12]
   12106:	685a      	ldr	r2, [r3, #4]
   12108:	68fb      	ldr	r3, [r7, #12]
   1210a:	689b      	ldr	r3, [r3, #8]
   1210c:	429a      	cmp	r2, r3
   1210e:	db09      	blt.n	12124 <range_it_iternext+0x34>
   12110:	68fb      	ldr	r3, [r7, #12]
   12112:	68db      	ldr	r3, [r3, #12]
   12114:	2b00      	cmp	r3, #0
   12116:	da14      	bge.n	12142 <range_it_iternext+0x52>
   12118:	68fb      	ldr	r3, [r7, #12]
   1211a:	685a      	ldr	r2, [r3, #4]
   1211c:	68fb      	ldr	r3, [r7, #12]
   1211e:	689b      	ldr	r3, [r3, #8]
   12120:	429a      	cmp	r2, r3
   12122:	dd0e      	ble.n	12142 <range_it_iternext+0x52>
        mp_obj_t o_out = MP_OBJ_NEW_SMALL_INT(o->cur);
   12124:	68fb      	ldr	r3, [r7, #12]
   12126:	685b      	ldr	r3, [r3, #4]
   12128:	005b      	lsls	r3, r3, #1
   1212a:	f043 0301 	orr.w	r3, r3, #1
   1212e:	60bb      	str	r3, [r7, #8]
        o->cur += o->step;
   12130:	68fb      	ldr	r3, [r7, #12]
   12132:	685a      	ldr	r2, [r3, #4]
   12134:	68fb      	ldr	r3, [r7, #12]
   12136:	68db      	ldr	r3, [r3, #12]
   12138:	441a      	add	r2, r3
   1213a:	68fb      	ldr	r3, [r7, #12]
   1213c:	605a      	str	r2, [r3, #4]
        return o_out;
   1213e:	68bb      	ldr	r3, [r7, #8]
   12140:	e000      	b.n	12144 <range_it_iternext+0x54>
    } else {
        return MP_OBJ_STOP_ITERATION;
   12142:	2304      	movs	r3, #4
    }
}
   12144:	4618      	mov	r0, r3
   12146:	3714      	adds	r7, #20
   12148:	46bd      	mov	sp, r7
   1214a:	f85d 7b04 	ldr.w	r7, [sp], #4
   1214e:	4770      	bx	lr

00012150 <mp_obj_new_range_iterator>:
    .name = MP_QSTR_iterator,
    .getiter = mp_identity_getiter,
    .iternext = range_it_iternext,
};

STATIC mp_obj_t mp_obj_new_range_iterator(mp_int_t cur, mp_int_t stop, mp_int_t step, mp_obj_iter_buf_t *iter_buf) {
   12150:	b480      	push	{r7}
   12152:	b087      	sub	sp, #28
   12154:	af00      	add	r7, sp, #0
   12156:	60f8      	str	r0, [r7, #12]
   12158:	60b9      	str	r1, [r7, #8]
   1215a:	607a      	str	r2, [r7, #4]
   1215c:	603b      	str	r3, [r7, #0]
    assert(sizeof(mp_obj_range_it_t) <= sizeof(mp_obj_iter_buf_t));
    mp_obj_range_it_t *o = (mp_obj_range_it_t*)iter_buf;
   1215e:	683b      	ldr	r3, [r7, #0]
   12160:	617b      	str	r3, [r7, #20]
    o->base.type = &range_it_type;
   12162:	697b      	ldr	r3, [r7, #20]
   12164:	4a08      	ldr	r2, [pc, #32]	; (12188 <mp_obj_new_range_iterator+0x38>)
   12166:	601a      	str	r2, [r3, #0]
    o->cur = cur;
   12168:	697b      	ldr	r3, [r7, #20]
   1216a:	68fa      	ldr	r2, [r7, #12]
   1216c:	605a      	str	r2, [r3, #4]
    o->stop = stop;
   1216e:	697b      	ldr	r3, [r7, #20]
   12170:	68ba      	ldr	r2, [r7, #8]
   12172:	609a      	str	r2, [r3, #8]
    o->step = step;
   12174:	697b      	ldr	r3, [r7, #20]
   12176:	687a      	ldr	r2, [r7, #4]
   12178:	60da      	str	r2, [r3, #12]
    return MP_OBJ_FROM_PTR(o);
   1217a:	697b      	ldr	r3, [r7, #20]
}
   1217c:	4618      	mov	r0, r3
   1217e:	371c      	adds	r7, #28
   12180:	46bd      	mov	sp, r7
   12182:	f85d 7b04 	ldr.w	r7, [sp], #4
   12186:	4770      	bx	lr
   12188:	00023460 	.word	0x00023460

0001218c <range_print>:
    mp_int_t start;
    mp_int_t stop;
    mp_int_t step;
} mp_obj_range_t;

STATIC void range_print(const mp_print_t *print, mp_obj_t self_in, mp_print_kind_t kind) {
   1218c:	b580      	push	{r7, lr}
   1218e:	b086      	sub	sp, #24
   12190:	af00      	add	r7, sp, #0
   12192:	60f8      	str	r0, [r7, #12]
   12194:	60b9      	str	r1, [r7, #8]
   12196:	607a      	str	r2, [r7, #4]
    (void)kind;
    mp_obj_range_t *self = MP_OBJ_TO_PTR(self_in);
   12198:	68bb      	ldr	r3, [r7, #8]
   1219a:	617b      	str	r3, [r7, #20]
    mp_printf(print, "range(" INT_FMT ", " INT_FMT "", self->start, self->stop);
   1219c:	697b      	ldr	r3, [r7, #20]
   1219e:	685a      	ldr	r2, [r3, #4]
   121a0:	697b      	ldr	r3, [r7, #20]
   121a2:	689b      	ldr	r3, [r3, #8]
   121a4:	490b      	ldr	r1, [pc, #44]	; (121d4 <range_print+0x48>)
   121a6:	68f8      	ldr	r0, [r7, #12]
   121a8:	f7ef ff38 	bl	201c <mp_printf>
    if (self->step == 1) {
   121ac:	697b      	ldr	r3, [r7, #20]
   121ae:	68db      	ldr	r3, [r3, #12]
   121b0:	2b01      	cmp	r3, #1
   121b2:	d104      	bne.n	121be <range_print+0x32>
        mp_print_str(print, ")");
   121b4:	4908      	ldr	r1, [pc, #32]	; (121d8 <range_print+0x4c>)
   121b6:	68f8      	ldr	r0, [r7, #12]
   121b8:	f7ef fc1c 	bl	19f4 <mp_print_str>
    } else {
        mp_printf(print, ", " INT_FMT ")", self->step);
    }
}
   121bc:	e006      	b.n	121cc <range_print+0x40>
        mp_printf(print, ", " INT_FMT ")", self->step);
   121be:	697b      	ldr	r3, [r7, #20]
   121c0:	68db      	ldr	r3, [r3, #12]
   121c2:	461a      	mov	r2, r3
   121c4:	4905      	ldr	r1, [pc, #20]	; (121dc <range_print+0x50>)
   121c6:	68f8      	ldr	r0, [r7, #12]
   121c8:	f7ef ff28 	bl	201c <mp_printf>
}
   121cc:	bf00      	nop
   121ce:	3718      	adds	r7, #24
   121d0:	46bd      	mov	sp, r7
   121d2:	bd80      	pop	{r7, pc}
   121d4:	0002349c 	.word	0x0002349c
   121d8:	000234ac 	.word	0x000234ac
   121dc:	000234b0 	.word	0x000234b0

000121e0 <range_make_new>:

STATIC mp_obj_t range_make_new(const mp_obj_type_t *type, size_t n_args, size_t n_kw, const mp_obj_t *args) {
   121e0:	b580      	push	{r7, lr}
   121e2:	b088      	sub	sp, #32
   121e4:	af02      	add	r7, sp, #8
   121e6:	60f8      	str	r0, [r7, #12]
   121e8:	60b9      	str	r1, [r7, #8]
   121ea:	607a      	str	r2, [r7, #4]
   121ec:	603b      	str	r3, [r7, #0]
    mp_arg_check_num(n_args, n_kw, 1, 3, false);
   121ee:	2300      	movs	r3, #0
   121f0:	9300      	str	r3, [sp, #0]
   121f2:	2303      	movs	r3, #3
   121f4:	2201      	movs	r2, #1
   121f6:	6879      	ldr	r1, [r7, #4]
   121f8:	68b8      	ldr	r0, [r7, #8]
   121fa:	f7fb f867 	bl	d2cc <mp_arg_check_num>

    mp_obj_range_t *o = m_new_obj(mp_obj_range_t);
   121fe:	2010      	movs	r0, #16
   12200:	f7ee f88c 	bl	31c <m_malloc>
   12204:	6178      	str	r0, [r7, #20]
    o->base.type = type;
   12206:	697b      	ldr	r3, [r7, #20]
   12208:	68fa      	ldr	r2, [r7, #12]
   1220a:	601a      	str	r2, [r3, #0]
    o->start = 0;
   1220c:	697b      	ldr	r3, [r7, #20]
   1220e:	2200      	movs	r2, #0
   12210:	605a      	str	r2, [r3, #4]
    o->step = 1;
   12212:	697b      	ldr	r3, [r7, #20]
   12214:	2201      	movs	r2, #1
   12216:	60da      	str	r2, [r3, #12]

    if (n_args == 1) {
   12218:	68bb      	ldr	r3, [r7, #8]
   1221a:	2b01      	cmp	r3, #1
   1221c:	d108      	bne.n	12230 <range_make_new+0x50>
        o->stop = mp_obj_get_int(args[0]);
   1221e:	683b      	ldr	r3, [r7, #0]
   12220:	681b      	ldr	r3, [r3, #0]
   12222:	4618      	mov	r0, r3
   12224:	f7fb fe24 	bl	de70 <mp_obj_get_int>
   12228:	4602      	mov	r2, r0
   1222a:	697b      	ldr	r3, [r7, #20]
   1222c:	609a      	str	r2, [r3, #8]
   1222e:	e023      	b.n	12278 <range_make_new+0x98>
    } else {
        o->start = mp_obj_get_int(args[0]);
   12230:	683b      	ldr	r3, [r7, #0]
   12232:	681b      	ldr	r3, [r3, #0]
   12234:	4618      	mov	r0, r3
   12236:	f7fb fe1b 	bl	de70 <mp_obj_get_int>
   1223a:	4602      	mov	r2, r0
   1223c:	697b      	ldr	r3, [r7, #20]
   1223e:	605a      	str	r2, [r3, #4]
        o->stop = mp_obj_get_int(args[1]);
   12240:	683b      	ldr	r3, [r7, #0]
   12242:	3304      	adds	r3, #4
   12244:	681b      	ldr	r3, [r3, #0]
   12246:	4618      	mov	r0, r3
   12248:	f7fb fe12 	bl	de70 <mp_obj_get_int>
   1224c:	4602      	mov	r2, r0
   1224e:	697b      	ldr	r3, [r7, #20]
   12250:	609a      	str	r2, [r3, #8]
        if (n_args == 3) {
   12252:	68bb      	ldr	r3, [r7, #8]
   12254:	2b03      	cmp	r3, #3
   12256:	d10f      	bne.n	12278 <range_make_new+0x98>
            o->step = mp_obj_get_int(args[2]);
   12258:	683b      	ldr	r3, [r7, #0]
   1225a:	3308      	adds	r3, #8
   1225c:	681b      	ldr	r3, [r3, #0]
   1225e:	4618      	mov	r0, r3
   12260:	f7fb fe06 	bl	de70 <mp_obj_get_int>
   12264:	4602      	mov	r2, r0
   12266:	697b      	ldr	r3, [r7, #20]
   12268:	60da      	str	r2, [r3, #12]
            if (o->step == 0) {
   1226a:	697b      	ldr	r3, [r7, #20]
   1226c:	68db      	ldr	r3, [r3, #12]
   1226e:	2b00      	cmp	r3, #0
   12270:	d102      	bne.n	12278 <range_make_new+0x98>
                mp_raise_ValueError("zero step");
   12272:	4804      	ldr	r0, [pc, #16]	; (12284 <range_make_new+0xa4>)
   12274:	f7fa ffb4 	bl	d1e0 <mp_raise_ValueError>
            }
        }
    }

    return MP_OBJ_FROM_PTR(o);
   12278:	697b      	ldr	r3, [r7, #20]
}
   1227a:	4618      	mov	r0, r3
   1227c:	3718      	adds	r7, #24
   1227e:	46bd      	mov	sp, r7
   12280:	bd80      	pop	{r7, pc}
   12282:	bf00      	nop
   12284:	000234b8 	.word	0x000234b8

00012288 <range_len>:

STATIC mp_int_t range_len(mp_obj_range_t *self) {
   12288:	b480      	push	{r7}
   1228a:	b085      	sub	sp, #20
   1228c:	af00      	add	r7, sp, #0
   1228e:	6078      	str	r0, [r7, #4]
    // When computing length, need to take into account step!=1 and step<0.
    mp_int_t len = self->stop - self->start + self->step;
   12290:	687b      	ldr	r3, [r7, #4]
   12292:	689a      	ldr	r2, [r3, #8]
   12294:	687b      	ldr	r3, [r7, #4]
   12296:	685b      	ldr	r3, [r3, #4]
   12298:	1ad2      	subs	r2, r2, r3
   1229a:	687b      	ldr	r3, [r7, #4]
   1229c:	68db      	ldr	r3, [r3, #12]
   1229e:	4413      	add	r3, r2
   122a0:	60fb      	str	r3, [r7, #12]
    if (self->step > 0) {
   122a2:	687b      	ldr	r3, [r7, #4]
   122a4:	68db      	ldr	r3, [r3, #12]
   122a6:	2b00      	cmp	r3, #0
   122a8:	dd03      	ble.n	122b2 <range_len+0x2a>
        len -= 1;
   122aa:	68fb      	ldr	r3, [r7, #12]
   122ac:	3b01      	subs	r3, #1
   122ae:	60fb      	str	r3, [r7, #12]
   122b0:	e002      	b.n	122b8 <range_len+0x30>
    } else {
        len += 1;
   122b2:	68fb      	ldr	r3, [r7, #12]
   122b4:	3301      	adds	r3, #1
   122b6:	60fb      	str	r3, [r7, #12]
    }
    len = len / self->step;
   122b8:	687b      	ldr	r3, [r7, #4]
   122ba:	68db      	ldr	r3, [r3, #12]
   122bc:	68fa      	ldr	r2, [r7, #12]
   122be:	fb92 f3f3 	sdiv	r3, r2, r3
   122c2:	60fb      	str	r3, [r7, #12]
    if (len < 0) {
   122c4:	68fb      	ldr	r3, [r7, #12]
   122c6:	2b00      	cmp	r3, #0
   122c8:	da01      	bge.n	122ce <range_len+0x46>
        len = 0;
   122ca:	2300      	movs	r3, #0
   122cc:	60fb      	str	r3, [r7, #12]
    }
    return len;
   122ce:	68fb      	ldr	r3, [r7, #12]
}
   122d0:	4618      	mov	r0, r3
   122d2:	3714      	adds	r7, #20
   122d4:	46bd      	mov	sp, r7
   122d6:	f85d 7b04 	ldr.w	r7, [sp], #4
   122da:	4770      	bx	lr

000122dc <range_unary_op>:

STATIC mp_obj_t range_unary_op(mp_unary_op_t op, mp_obj_t self_in) {
   122dc:	b580      	push	{r7, lr}
   122de:	b084      	sub	sp, #16
   122e0:	af00      	add	r7, sp, #0
   122e2:	6078      	str	r0, [r7, #4]
   122e4:	6039      	str	r1, [r7, #0]
    mp_obj_range_t *self = MP_OBJ_TO_PTR(self_in);
   122e6:	683b      	ldr	r3, [r7, #0]
   122e8:	60fb      	str	r3, [r7, #12]
    mp_int_t len = range_len(self);
   122ea:	68f8      	ldr	r0, [r7, #12]
   122ec:	f7ff ffcc 	bl	12288 <range_len>
   122f0:	60b8      	str	r0, [r7, #8]
    switch (op) {
   122f2:	687b      	ldr	r3, [r7, #4]
   122f4:	2b04      	cmp	r3, #4
   122f6:	d002      	beq.n	122fe <range_unary_op+0x22>
   122f8:	2b05      	cmp	r3, #5
   122fa:	d00b      	beq.n	12314 <range_unary_op+0x38>
   122fc:	e00f      	b.n	1231e <range_unary_op+0x42>
        case MP_UNARY_OP_BOOL: return mp_obj_new_bool(len > 0);
   122fe:	68bb      	ldr	r3, [r7, #8]
   12300:	2b00      	cmp	r3, #0
   12302:	bfcc      	ite	gt
   12304:	2301      	movgt	r3, #1
   12306:	2300      	movle	r3, #0
   12308:	b2db      	uxtb	r3, r3
   1230a:	4618      	mov	r0, r3
   1230c:	f7ff fedc 	bl	120c8 <mp_obj_new_bool>
   12310:	4603      	mov	r3, r0
   12312:	e005      	b.n	12320 <range_unary_op+0x44>
        case MP_UNARY_OP_LEN: return MP_OBJ_NEW_SMALL_INT(len);
   12314:	68bb      	ldr	r3, [r7, #8]
   12316:	005b      	lsls	r3, r3, #1
   12318:	f043 0301 	orr.w	r3, r3, #1
   1231c:	e000      	b.n	12320 <range_unary_op+0x44>
        default: return MP_OBJ_NULL; // op not supported
   1231e:	2300      	movs	r3, #0
    }
}
   12320:	4618      	mov	r0, r3
   12322:	3710      	adds	r7, #16
   12324:	46bd      	mov	sp, r7
   12326:	bd80      	pop	{r7, pc}

00012328 <range_subscr>:
                && (lhs_len == 1 || lhs->step == rhs->step)))
    );
}
#endif

STATIC mp_obj_t range_subscr(mp_obj_t self_in, mp_obj_t index, mp_obj_t value) {
   12328:	b580      	push	{r7, lr}
   1232a:	b088      	sub	sp, #32
   1232c:	af00      	add	r7, sp, #0
   1232e:	60f8      	str	r0, [r7, #12]
   12330:	60b9      	str	r1, [r7, #8]
   12332:	607a      	str	r2, [r7, #4]
    if (value == MP_OBJ_SENTINEL) {
   12334:	687b      	ldr	r3, [r7, #4]
   12336:	2b08      	cmp	r3, #8
   12338:	d11b      	bne.n	12372 <range_subscr+0x4a>
        // load
        mp_obj_range_t *self = MP_OBJ_TO_PTR(self_in);
   1233a:	68fb      	ldr	r3, [r7, #12]
   1233c:	61fb      	str	r3, [r7, #28]
        mp_int_t len = range_len(self);
   1233e:	69f8      	ldr	r0, [r7, #28]
   12340:	f7ff ffa2 	bl	12288 <range_len>
   12344:	61b8      	str	r0, [r7, #24]
                o->stop -= self->step;
            }
            return MP_OBJ_FROM_PTR(o);
        }
#endif
        size_t index_val = mp_get_index(self->base.type, len, index, false);
   12346:	69fb      	ldr	r3, [r7, #28]
   12348:	6818      	ldr	r0, [r3, #0]
   1234a:	69b9      	ldr	r1, [r7, #24]
   1234c:	2300      	movs	r3, #0
   1234e:	68ba      	ldr	r2, [r7, #8]
   12350:	f7fb fe7a 	bl	e048 <mp_get_index>
   12354:	6178      	str	r0, [r7, #20]
        return MP_OBJ_NEW_SMALL_INT(self->start + index_val * self->step);
   12356:	69fb      	ldr	r3, [r7, #28]
   12358:	685b      	ldr	r3, [r3, #4]
   1235a:	461a      	mov	r2, r3
   1235c:	69fb      	ldr	r3, [r7, #28]
   1235e:	68db      	ldr	r3, [r3, #12]
   12360:	4619      	mov	r1, r3
   12362:	697b      	ldr	r3, [r7, #20]
   12364:	fb03 f301 	mul.w	r3, r3, r1
   12368:	4413      	add	r3, r2
   1236a:	005b      	lsls	r3, r3, #1
   1236c:	f043 0301 	orr.w	r3, r3, #1
   12370:	e000      	b.n	12374 <range_subscr+0x4c>
    } else {
        return MP_OBJ_NULL; // op not supported
   12372:	2300      	movs	r3, #0
    }
}
   12374:	4618      	mov	r0, r3
   12376:	3720      	adds	r7, #32
   12378:	46bd      	mov	sp, r7
   1237a:	bd80      	pop	{r7, pc}

0001237c <range_getiter>:

STATIC mp_obj_t range_getiter(mp_obj_t o_in, mp_obj_iter_buf_t *iter_buf) {
   1237c:	b580      	push	{r7, lr}
   1237e:	b084      	sub	sp, #16
   12380:	af00      	add	r7, sp, #0
   12382:	6078      	str	r0, [r7, #4]
   12384:	6039      	str	r1, [r7, #0]
    mp_obj_range_t *o = MP_OBJ_TO_PTR(o_in);
   12386:	687b      	ldr	r3, [r7, #4]
   12388:	60fb      	str	r3, [r7, #12]
    return mp_obj_new_range_iterator(o->start, o->stop, o->step, iter_buf);
   1238a:	68fb      	ldr	r3, [r7, #12]
   1238c:	6858      	ldr	r0, [r3, #4]
   1238e:	68fb      	ldr	r3, [r7, #12]
   12390:	6899      	ldr	r1, [r3, #8]
   12392:	68fb      	ldr	r3, [r7, #12]
   12394:	68da      	ldr	r2, [r3, #12]
   12396:	683b      	ldr	r3, [r7, #0]
   12398:	f7ff feda 	bl	12150 <mp_obj_new_range_iterator>
   1239c:	4603      	mov	r3, r0
}
   1239e:	4618      	mov	r0, r3
   123a0:	3710      	adds	r7, #16
   123a2:	46bd      	mov	sp, r7
   123a4:	bd80      	pop	{r7, pc}
   123a6:	bf00      	nop

000123a8 <range_attr>:


#if MICROPY_PY_BUILTINS_RANGE_ATTRS
STATIC void range_attr(mp_obj_t o_in, qstr attr, mp_obj_t *dest) {
   123a8:	b580      	push	{r7, lr}
   123aa:	b086      	sub	sp, #24
   123ac:	af00      	add	r7, sp, #0
   123ae:	60f8      	str	r0, [r7, #12]
   123b0:	60b9      	str	r1, [r7, #8]
   123b2:	607a      	str	r2, [r7, #4]
    if (dest[0] != MP_OBJ_NULL) {
   123b4:	687b      	ldr	r3, [r7, #4]
   123b6:	681b      	ldr	r3, [r3, #0]
   123b8:	2b00      	cmp	r3, #0
   123ba:	d12a      	bne.n	12412 <range_attr+0x6a>
        // not load attribute
        return;
    }
    mp_obj_range_t *o = MP_OBJ_TO_PTR(o_in);
   123bc:	68fb      	ldr	r3, [r7, #12]
   123be:	617b      	str	r3, [r7, #20]
    if (attr == MP_QSTR_start) {
   123c0:	68bb      	ldr	r3, [r7, #8]
   123c2:	f240 1267 	movw	r2, #359	; 0x167
   123c6:	4293      	cmp	r3, r2
   123c8:	d108      	bne.n	123dc <range_attr+0x34>
        dest[0] = mp_obj_new_int(o->start);
   123ca:	697b      	ldr	r3, [r7, #20]
   123cc:	685b      	ldr	r3, [r3, #4]
   123ce:	4618      	mov	r0, r3
   123d0:	f7fe fbf4 	bl	10bbc <mp_obj_new_int>
   123d4:	4602      	mov	r2, r0
   123d6:	687b      	ldr	r3, [r7, #4]
   123d8:	601a      	str	r2, [r3, #0]
   123da:	e01b      	b.n	12414 <range_attr+0x6c>
    } else if (attr == MP_QSTR_stop) {
   123dc:	68bb      	ldr	r3, [r7, #8]
   123de:	f240 126b 	movw	r2, #363	; 0x16b
   123e2:	4293      	cmp	r3, r2
   123e4:	d108      	bne.n	123f8 <range_attr+0x50>
        dest[0] = mp_obj_new_int(o->stop);
   123e6:	697b      	ldr	r3, [r7, #20]
   123e8:	689b      	ldr	r3, [r3, #8]
   123ea:	4618      	mov	r0, r3
   123ec:	f7fe fbe6 	bl	10bbc <mp_obj_new_int>
   123f0:	4602      	mov	r2, r0
   123f2:	687b      	ldr	r3, [r7, #4]
   123f4:	601a      	str	r2, [r3, #0]
   123f6:	e00d      	b.n	12414 <range_attr+0x6c>
    } else if (attr == MP_QSTR_step) {
   123f8:	68bb      	ldr	r3, [r7, #8]
   123fa:	f5b3 7fb5 	cmp.w	r3, #362	; 0x16a
   123fe:	d109      	bne.n	12414 <range_attr+0x6c>
        dest[0] = mp_obj_new_int(o->step);
   12400:	697b      	ldr	r3, [r7, #20]
   12402:	68db      	ldr	r3, [r3, #12]
   12404:	4618      	mov	r0, r3
   12406:	f7fe fbd9 	bl	10bbc <mp_obj_new_int>
   1240a:	4602      	mov	r2, r0
   1240c:	687b      	ldr	r3, [r7, #4]
   1240e:	601a      	str	r2, [r3, #0]
   12410:	e000      	b.n	12414 <range_attr+0x6c>
        return;
   12412:	bf00      	nop
    }
}
   12414:	3718      	adds	r7, #24
   12416:	46bd      	mov	sp, r7
   12418:	bd80      	pop	{r7, pc}
   1241a:	bf00      	nop

0001241c <singleton_print>:
typedef struct _mp_obj_singleton_t {
    mp_obj_base_t base;
    qstr name;
} mp_obj_singleton_t;

STATIC void singleton_print(const mp_print_t *print, mp_obj_t self_in, mp_print_kind_t kind) {
   1241c:	b580      	push	{r7, lr}
   1241e:	b086      	sub	sp, #24
   12420:	af00      	add	r7, sp, #0
   12422:	60f8      	str	r0, [r7, #12]
   12424:	60b9      	str	r1, [r7, #8]
   12426:	607a      	str	r2, [r7, #4]
    (void)kind;
    mp_obj_singleton_t *self = MP_OBJ_TO_PTR(self_in);
   12428:	68bb      	ldr	r3, [r7, #8]
   1242a:	617b      	str	r3, [r7, #20]
    mp_printf(print, "%q", self->name);
   1242c:	697b      	ldr	r3, [r7, #20]
   1242e:	685b      	ldr	r3, [r3, #4]
   12430:	461a      	mov	r2, r3
   12432:	4904      	ldr	r1, [pc, #16]	; (12444 <singleton_print+0x28>)
   12434:	68f8      	ldr	r0, [r7, #12]
   12436:	f7ef fdf1 	bl	201c <mp_printf>
}
   1243a:	bf00      	nop
   1243c:	3718      	adds	r7, #24
   1243e:	46bd      	mov	sp, r7
   12440:	bd80      	pop	{r7, pc}
   12442:	bf00      	nop
   12444:	00023500 	.word	0x00023500

00012448 <utf8_next_char>:
static inline const byte *utf8_next_char(const byte *s) { return s + 1; }
   12448:	b480      	push	{r7}
   1244a:	b083      	sub	sp, #12
   1244c:	af00      	add	r7, sp, #0
   1244e:	6078      	str	r0, [r7, #4]
   12450:	687b      	ldr	r3, [r7, #4]
   12452:	3301      	adds	r3, #1
   12454:	4618      	mov	r0, r3
   12456:	370c      	adds	r7, #12
   12458:	46bd      	mov	sp, r7
   1245a:	f85d 7b04 	ldr.w	r7, [sp], #4
   1245e:	4770      	bx	lr

00012460 <utf8_charlen>:
static inline size_t utf8_charlen(const byte *str, size_t len) { (void)str; return len; }
   12460:	b480      	push	{r7}
   12462:	b083      	sub	sp, #12
   12464:	af00      	add	r7, sp, #0
   12466:	6078      	str	r0, [r7, #4]
   12468:	6039      	str	r1, [r7, #0]
   1246a:	683b      	ldr	r3, [r7, #0]
   1246c:	4618      	mov	r0, r3
   1246e:	370c      	adds	r7, #12
   12470:	46bd      	mov	sp, r7
   12472:	f85d 7b04 	ldr.w	r7, [sp], #4
   12476:	4770      	bx	lr

00012478 <MP_OBJ_IS_SMALL_INT>:
    { return ((((mp_int_t)(o)) & 1) != 0); }
   12478:	b480      	push	{r7}
   1247a:	b083      	sub	sp, #12
   1247c:	af00      	add	r7, sp, #0
   1247e:	6078      	str	r0, [r7, #4]
   12480:	687b      	ldr	r3, [r7, #4]
   12482:	f003 0301 	and.w	r3, r3, #1
   12486:	2b00      	cmp	r3, #0
   12488:	bf14      	ite	ne
   1248a:	2301      	movne	r3, #1
   1248c:	2300      	moveq	r3, #0
   1248e:	b2db      	uxtb	r3, r3
   12490:	4618      	mov	r0, r3
   12492:	370c      	adds	r7, #12
   12494:	46bd      	mov	sp, r7
   12496:	f85d 7b04 	ldr.w	r7, [sp], #4
   1249a:	4770      	bx	lr

0001249c <MP_OBJ_IS_QSTR>:
    { return ((((mp_int_t)(o)) & 3) == 2); }
   1249c:	b480      	push	{r7}
   1249e:	b083      	sub	sp, #12
   124a0:	af00      	add	r7, sp, #0
   124a2:	6078      	str	r0, [r7, #4]
   124a4:	687b      	ldr	r3, [r7, #4]
   124a6:	f003 0303 	and.w	r3, r3, #3
   124aa:	2b02      	cmp	r3, #2
   124ac:	bf0c      	ite	eq
   124ae:	2301      	moveq	r3, #1
   124b0:	2300      	movne	r3, #0
   124b2:	b2db      	uxtb	r3, r3
   124b4:	4618      	mov	r0, r3
   124b6:	370c      	adds	r7, #12
   124b8:	46bd      	mov	sp, r7
   124ba:	f85d 7b04 	ldr.w	r7, [sp], #4
   124be:	4770      	bx	lr

000124c0 <MP_OBJ_IS_OBJ>:
    { return ((((mp_int_t)(o)) & 3) == 0); }
   124c0:	b480      	push	{r7}
   124c2:	b083      	sub	sp, #12
   124c4:	af00      	add	r7, sp, #0
   124c6:	6078      	str	r0, [r7, #4]
   124c8:	687b      	ldr	r3, [r7, #4]
   124ca:	f003 0303 	and.w	r3, r3, #3
   124ce:	2b00      	cmp	r3, #0
   124d0:	bf0c      	ite	eq
   124d2:	2301      	moveq	r3, #1
   124d4:	2300      	movne	r3, #0
   124d6:	b2db      	uxtb	r3, r3
   124d8:	4618      	mov	r0, r3
   124da:	370c      	adds	r7, #12
   124dc:	46bd      	mov	sp, r7
   124de:	f85d 7b04 	ldr.w	r7, [sp], #4
   124e2:	4770      	bx	lr

000124e4 <mp_obj_new_bool>:
static inline mp_obj_t mp_obj_new_bool(mp_int_t x) { return x ? mp_const_true : mp_const_false; }
   124e4:	b480      	push	{r7}
   124e6:	b083      	sub	sp, #12
   124e8:	af00      	add	r7, sp, #0
   124ea:	6078      	str	r0, [r7, #4]
   124ec:	687b      	ldr	r3, [r7, #4]
   124ee:	2b00      	cmp	r3, #0
   124f0:	d001      	beq.n	124f6 <mp_obj_new_bool+0x12>
   124f2:	4b04      	ldr	r3, [pc, #16]	; (12504 <mp_obj_new_bool+0x20>)
   124f4:	e000      	b.n	124f8 <mp_obj_new_bool+0x14>
   124f6:	4b04      	ldr	r3, [pc, #16]	; (12508 <mp_obj_new_bool+0x24>)
   124f8:	4618      	mov	r0, r3
   124fa:	370c      	adds	r7, #12
   124fc:	46bd      	mov	sp, r7
   124fe:	f85d 7b04 	ldr.w	r7, [sp], #4
   12502:	4770      	bx	lr
   12504:	00021b78 	.word	0x00021b78
   12508:	00021b70 	.word	0x00021b70

0001250c <mp_str_print_quoted>:
STATIC NORETURN void bad_implicit_conversion(mp_obj_t self_in);

/******************************************************************************/
/* str                                                                        */

void mp_str_print_quoted(const mp_print_t *print, const byte *str_data, size_t str_len, bool is_bytes) {
   1250c:	b580      	push	{r7, lr}
   1250e:	b08a      	sub	sp, #40	; 0x28
   12510:	af00      	add	r7, sp, #0
   12512:	60f8      	str	r0, [r7, #12]
   12514:	60b9      	str	r1, [r7, #8]
   12516:	607a      	str	r2, [r7, #4]
   12518:	70fb      	strb	r3, [r7, #3]
    // this escapes characters, but it will be very slow to print (calling print many times)
    bool has_single_quote = false;
   1251a:	2300      	movs	r3, #0
   1251c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    bool has_double_quote = false;
   12520:	2300      	movs	r3, #0
   12522:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    for (const byte *s = str_data, *top = str_data + str_len; !has_double_quote && s < top; s++) {
   12526:	68bb      	ldr	r3, [r7, #8]
   12528:	623b      	str	r3, [r7, #32]
   1252a:	68ba      	ldr	r2, [r7, #8]
   1252c:	687b      	ldr	r3, [r7, #4]
   1252e:	4413      	add	r3, r2
   12530:	617b      	str	r3, [r7, #20]
   12532:	e011      	b.n	12558 <mp_str_print_quoted+0x4c>
        if (*s == '\'') {
   12534:	6a3b      	ldr	r3, [r7, #32]
   12536:	781b      	ldrb	r3, [r3, #0]
   12538:	2b27      	cmp	r3, #39	; 0x27
   1253a:	d103      	bne.n	12544 <mp_str_print_quoted+0x38>
            has_single_quote = true;
   1253c:	2301      	movs	r3, #1
   1253e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
   12542:	e006      	b.n	12552 <mp_str_print_quoted+0x46>
        } else if (*s == '"') {
   12544:	6a3b      	ldr	r3, [r7, #32]
   12546:	781b      	ldrb	r3, [r3, #0]
   12548:	2b22      	cmp	r3, #34	; 0x22
   1254a:	d102      	bne.n	12552 <mp_str_print_quoted+0x46>
            has_double_quote = true;
   1254c:	2301      	movs	r3, #1
   1254e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    for (const byte *s = str_data, *top = str_data + str_len; !has_double_quote && s < top; s++) {
   12552:	6a3b      	ldr	r3, [r7, #32]
   12554:	3301      	adds	r3, #1
   12556:	623b      	str	r3, [r7, #32]
   12558:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
   1255c:	f083 0301 	eor.w	r3, r3, #1
   12560:	b2db      	uxtb	r3, r3
   12562:	2b00      	cmp	r3, #0
   12564:	d003      	beq.n	1256e <mp_str_print_quoted+0x62>
   12566:	6a3a      	ldr	r2, [r7, #32]
   12568:	697b      	ldr	r3, [r7, #20]
   1256a:	429a      	cmp	r2, r3
   1256c:	d3e2      	bcc.n	12534 <mp_str_print_quoted+0x28>
        }
    }
    int quote_char = '\'';
   1256e:	2327      	movs	r3, #39	; 0x27
   12570:	61fb      	str	r3, [r7, #28]
    if (has_single_quote && !has_double_quote) {
   12572:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   12576:	2b00      	cmp	r3, #0
   12578:	d008      	beq.n	1258c <mp_str_print_quoted+0x80>
   1257a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
   1257e:	f083 0301 	eor.w	r3, r3, #1
   12582:	b2db      	uxtb	r3, r3
   12584:	2b00      	cmp	r3, #0
   12586:	d001      	beq.n	1258c <mp_str_print_quoted+0x80>
        quote_char = '"';
   12588:	2322      	movs	r3, #34	; 0x22
   1258a:	61fb      	str	r3, [r7, #28]
    }
    mp_printf(print, "%c", quote_char);
   1258c:	69fa      	ldr	r2, [r7, #28]
   1258e:	4936      	ldr	r1, [pc, #216]	; (12668 <mp_str_print_quoted+0x15c>)
   12590:	68f8      	ldr	r0, [r7, #12]
   12592:	f7ef fd43 	bl	201c <mp_printf>
    for (const byte *s = str_data, *top = str_data + str_len; s < top; s++) {
   12596:	68bb      	ldr	r3, [r7, #8]
   12598:	61bb      	str	r3, [r7, #24]
   1259a:	68ba      	ldr	r2, [r7, #8]
   1259c:	687b      	ldr	r3, [r7, #4]
   1259e:	4413      	add	r3, r2
   125a0:	613b      	str	r3, [r7, #16]
   125a2:	e054      	b.n	1264e <mp_str_print_quoted+0x142>
        if (*s == quote_char) {
   125a4:	69bb      	ldr	r3, [r7, #24]
   125a6:	781b      	ldrb	r3, [r3, #0]
   125a8:	461a      	mov	r2, r3
   125aa:	69fb      	ldr	r3, [r7, #28]
   125ac:	429a      	cmp	r2, r3
   125ae:	d105      	bne.n	125bc <mp_str_print_quoted+0xb0>
            mp_printf(print, "\\%c", quote_char);
   125b0:	69fa      	ldr	r2, [r7, #28]
   125b2:	492e      	ldr	r1, [pc, #184]	; (1266c <mp_str_print_quoted+0x160>)
   125b4:	68f8      	ldr	r0, [r7, #12]
   125b6:	f7ef fd31 	bl	201c <mp_printf>
   125ba:	e045      	b.n	12648 <mp_str_print_quoted+0x13c>
        } else if (*s == '\\') {
   125bc:	69bb      	ldr	r3, [r7, #24]
   125be:	781b      	ldrb	r3, [r3, #0]
   125c0:	2b5c      	cmp	r3, #92	; 0x5c
   125c2:	d104      	bne.n	125ce <mp_str_print_quoted+0xc2>
            mp_print_str(print, "\\\\");
   125c4:	492a      	ldr	r1, [pc, #168]	; (12670 <mp_str_print_quoted+0x164>)
   125c6:	68f8      	ldr	r0, [r7, #12]
   125c8:	f7ef fa14 	bl	19f4 <mp_print_str>
   125cc:	e03c      	b.n	12648 <mp_str_print_quoted+0x13c>
        } else if (*s >= 0x20 && *s != 0x7f && (!is_bytes || *s < 0x80)) {
   125ce:	69bb      	ldr	r3, [r7, #24]
   125d0:	781b      	ldrb	r3, [r3, #0]
   125d2:	2b1f      	cmp	r3, #31
   125d4:	d916      	bls.n	12604 <mp_str_print_quoted+0xf8>
   125d6:	69bb      	ldr	r3, [r7, #24]
   125d8:	781b      	ldrb	r3, [r3, #0]
   125da:	2b7f      	cmp	r3, #127	; 0x7f
   125dc:	d012      	beq.n	12604 <mp_str_print_quoted+0xf8>
   125de:	78fb      	ldrb	r3, [r7, #3]
   125e0:	f083 0301 	eor.w	r3, r3, #1
   125e4:	b2db      	uxtb	r3, r3
   125e6:	2b00      	cmp	r3, #0
   125e8:	d104      	bne.n	125f4 <mp_str_print_quoted+0xe8>
   125ea:	69bb      	ldr	r3, [r7, #24]
   125ec:	781b      	ldrb	r3, [r3, #0]
   125ee:	b25b      	sxtb	r3, r3
   125f0:	2b00      	cmp	r3, #0
   125f2:	db07      	blt.n	12604 <mp_str_print_quoted+0xf8>
            // In strings, anything which is not ascii control character
            // is printed as is, this includes characters in range 0x80-0xff
            // (which can be non-Latin letters, etc.)
            mp_printf(print, "%c", *s);
   125f4:	69bb      	ldr	r3, [r7, #24]
   125f6:	781b      	ldrb	r3, [r3, #0]
   125f8:	461a      	mov	r2, r3
   125fa:	491b      	ldr	r1, [pc, #108]	; (12668 <mp_str_print_quoted+0x15c>)
   125fc:	68f8      	ldr	r0, [r7, #12]
   125fe:	f7ef fd0d 	bl	201c <mp_printf>
   12602:	e021      	b.n	12648 <mp_str_print_quoted+0x13c>
        } else if (*s == '\n') {
   12604:	69bb      	ldr	r3, [r7, #24]
   12606:	781b      	ldrb	r3, [r3, #0]
   12608:	2b0a      	cmp	r3, #10
   1260a:	d104      	bne.n	12616 <mp_str_print_quoted+0x10a>
            mp_print_str(print, "\\n");
   1260c:	4919      	ldr	r1, [pc, #100]	; (12674 <mp_str_print_quoted+0x168>)
   1260e:	68f8      	ldr	r0, [r7, #12]
   12610:	f7ef f9f0 	bl	19f4 <mp_print_str>
   12614:	e018      	b.n	12648 <mp_str_print_quoted+0x13c>
        } else if (*s == '\r') {
   12616:	69bb      	ldr	r3, [r7, #24]
   12618:	781b      	ldrb	r3, [r3, #0]
   1261a:	2b0d      	cmp	r3, #13
   1261c:	d104      	bne.n	12628 <mp_str_print_quoted+0x11c>
            mp_print_str(print, "\\r");
   1261e:	4916      	ldr	r1, [pc, #88]	; (12678 <mp_str_print_quoted+0x16c>)
   12620:	68f8      	ldr	r0, [r7, #12]
   12622:	f7ef f9e7 	bl	19f4 <mp_print_str>
   12626:	e00f      	b.n	12648 <mp_str_print_quoted+0x13c>
        } else if (*s == '\t') {
   12628:	69bb      	ldr	r3, [r7, #24]
   1262a:	781b      	ldrb	r3, [r3, #0]
   1262c:	2b09      	cmp	r3, #9
   1262e:	d104      	bne.n	1263a <mp_str_print_quoted+0x12e>
            mp_print_str(print, "\\t");
   12630:	4912      	ldr	r1, [pc, #72]	; (1267c <mp_str_print_quoted+0x170>)
   12632:	68f8      	ldr	r0, [r7, #12]
   12634:	f7ef f9de 	bl	19f4 <mp_print_str>
   12638:	e006      	b.n	12648 <mp_str_print_quoted+0x13c>
        } else {
            mp_printf(print, "\\x%02x", *s);
   1263a:	69bb      	ldr	r3, [r7, #24]
   1263c:	781b      	ldrb	r3, [r3, #0]
   1263e:	461a      	mov	r2, r3
   12640:	490f      	ldr	r1, [pc, #60]	; (12680 <mp_str_print_quoted+0x174>)
   12642:	68f8      	ldr	r0, [r7, #12]
   12644:	f7ef fcea 	bl	201c <mp_printf>
    for (const byte *s = str_data, *top = str_data + str_len; s < top; s++) {
   12648:	69bb      	ldr	r3, [r7, #24]
   1264a:	3301      	adds	r3, #1
   1264c:	61bb      	str	r3, [r7, #24]
   1264e:	69ba      	ldr	r2, [r7, #24]
   12650:	693b      	ldr	r3, [r7, #16]
   12652:	429a      	cmp	r2, r3
   12654:	d3a6      	bcc.n	125a4 <mp_str_print_quoted+0x98>
        }
    }
    mp_printf(print, "%c", quote_char);
   12656:	69fa      	ldr	r2, [r7, #28]
   12658:	4903      	ldr	r1, [pc, #12]	; (12668 <mp_str_print_quoted+0x15c>)
   1265a:	68f8      	ldr	r0, [r7, #12]
   1265c:	f7ef fcde 	bl	201c <mp_printf>
}
   12660:	bf00      	nop
   12662:	3728      	adds	r7, #40	; 0x28
   12664:	46bd      	mov	sp, r7
   12666:	bd80      	pop	{r7, pc}
   12668:	00023548 	.word	0x00023548
   1266c:	0002354c 	.word	0x0002354c
   12670:	00023550 	.word	0x00023550
   12674:	00023554 	.word	0x00023554
   12678:	00023558 	.word	0x00023558
   1267c:	0002355c 	.word	0x0002355c
   12680:	00023560 	.word	0x00023560

00012684 <str_print>:
    }
    mp_print_str(print, "\"");
}
#endif

STATIC void str_print(const mp_print_t *print, mp_obj_t self_in, mp_print_kind_t kind) {
   12684:	b580      	push	{r7, lr}
   12686:	b088      	sub	sp, #32
   12688:	af00      	add	r7, sp, #0
   1268a:	60f8      	str	r0, [r7, #12]
   1268c:	60b9      	str	r1, [r7, #8]
   1268e:	607a      	str	r2, [r7, #4]
    GET_STR_DATA_LEN(self_in, str_data, str_len);
   12690:	68b8      	ldr	r0, [r7, #8]
   12692:	f7ff ff03 	bl	1249c <MP_OBJ_IS_QSTR>
   12696:	4603      	mov	r3, r0
   12698:	2b00      	cmp	r3, #0
   1269a:	d009      	beq.n	126b0 <str_print+0x2c>
   1269c:	68bb      	ldr	r3, [r7, #8]
   1269e:	089b      	lsrs	r3, r3, #2
   126a0:	f107 0214 	add.w	r2, r7, #20
   126a4:	4611      	mov	r1, r2
   126a6:	4618      	mov	r0, r3
   126a8:	f7ee fe6e 	bl	1388 <qstr_data>
   126ac:	61f8      	str	r0, [r7, #28]
   126ae:	e005      	b.n	126bc <str_print+0x38>
   126b0:	68bb      	ldr	r3, [r7, #8]
   126b2:	689b      	ldr	r3, [r3, #8]
   126b4:	617b      	str	r3, [r7, #20]
   126b6:	68bb      	ldr	r3, [r7, #8]
   126b8:	68db      	ldr	r3, [r3, #12]
   126ba:	61fb      	str	r3, [r7, #28]
        mp_str_print_json(print, str_data, str_len);
        return;
    }
    #endif
    #if !MICROPY_PY_BUILTINS_STR_UNICODE
    bool is_bytes = MP_OBJ_IS_TYPE(self_in, &mp_type_bytes);
   126bc:	68b8      	ldr	r0, [r7, #8]
   126be:	f7ff feff 	bl	124c0 <MP_OBJ_IS_OBJ>
   126c2:	4603      	mov	r3, r0
   126c4:	2b00      	cmp	r3, #0
   126c6:	d006      	beq.n	126d6 <str_print+0x52>
   126c8:	68bb      	ldr	r3, [r7, #8]
   126ca:	681b      	ldr	r3, [r3, #0]
   126cc:	4a17      	ldr	r2, [pc, #92]	; (1272c <str_print+0xa8>)
   126ce:	4293      	cmp	r3, r2
   126d0:	d101      	bne.n	126d6 <str_print+0x52>
   126d2:	2301      	movs	r3, #1
   126d4:	e000      	b.n	126d8 <str_print+0x54>
   126d6:	2300      	movs	r3, #0
   126d8:	76fb      	strb	r3, [r7, #27]
   126da:	7efb      	ldrb	r3, [r7, #27]
   126dc:	f003 0301 	and.w	r3, r3, #1
   126e0:	76fb      	strb	r3, [r7, #27]
    #else
    bool is_bytes = true;
    #endif
    if (kind == PRINT_RAW || (!MICROPY_PY_BUILTINS_STR_UNICODE && kind == PRINT_STR && !is_bytes)) {
   126e2:	687b      	ldr	r3, [r7, #4]
   126e4:	2b04      	cmp	r3, #4
   126e6:	d008      	beq.n	126fa <str_print+0x76>
   126e8:	687b      	ldr	r3, [r7, #4]
   126ea:	2b00      	cmp	r3, #0
   126ec:	d10c      	bne.n	12708 <str_print+0x84>
   126ee:	7efb      	ldrb	r3, [r7, #27]
   126f0:	f083 0301 	eor.w	r3, r3, #1
   126f4:	b2db      	uxtb	r3, r3
   126f6:	2b00      	cmp	r3, #0
   126f8:	d006      	beq.n	12708 <str_print+0x84>
        mp_printf(print, "%.*s", str_len, str_data);
   126fa:	697a      	ldr	r2, [r7, #20]
   126fc:	69fb      	ldr	r3, [r7, #28]
   126fe:	490c      	ldr	r1, [pc, #48]	; (12730 <str_print+0xac>)
   12700:	68f8      	ldr	r0, [r7, #12]
   12702:	f7ef fc8b 	bl	201c <mp_printf>
   12706:	e00c      	b.n	12722 <str_print+0x9e>
    } else {
        if (is_bytes) {
   12708:	7efb      	ldrb	r3, [r7, #27]
   1270a:	2b00      	cmp	r3, #0
   1270c:	d003      	beq.n	12716 <str_print+0x92>
            mp_print_str(print, "b");
   1270e:	4909      	ldr	r1, [pc, #36]	; (12734 <str_print+0xb0>)
   12710:	68f8      	ldr	r0, [r7, #12]
   12712:	f7ef f96f 	bl	19f4 <mp_print_str>
        }
        mp_str_print_quoted(print, str_data, str_len, is_bytes);
   12716:	697a      	ldr	r2, [r7, #20]
   12718:	7efb      	ldrb	r3, [r7, #27]
   1271a:	69f9      	ldr	r1, [r7, #28]
   1271c:	68f8      	ldr	r0, [r7, #12]
   1271e:	f7ff fef5 	bl	1250c <mp_str_print_quoted>
    }
}
   12722:	bf00      	nop
   12724:	3720      	adds	r7, #32
   12726:	46bd      	mov	sp, r7
   12728:	bd80      	pop	{r7, pc}
   1272a:	bf00      	nop
   1272c:	00023b48 	.word	0x00023b48
   12730:	00023568 	.word	0x00023568
   12734:	00023570 	.word	0x00023570

00012738 <mp_obj_str_make_new>:

mp_obj_t mp_obj_str_make_new(const mp_obj_type_t *type, size_t n_args, size_t n_kw, const mp_obj_t *args) {
   12738:	b580      	push	{r7, lr}
   1273a:	b094      	sub	sp, #80	; 0x50
   1273c:	af02      	add	r7, sp, #8
   1273e:	60f8      	str	r0, [r7, #12]
   12740:	60b9      	str	r1, [r7, #8]
   12742:	607a      	str	r2, [r7, #4]
   12744:	603b      	str	r3, [r7, #0]
    if (n_kw != 0) {
        mp_arg_error_unimpl_kw();
    }
#endif

    mp_arg_check_num(n_args, n_kw, 0, 3, false);
   12746:	2300      	movs	r3, #0
   12748:	9300      	str	r3, [sp, #0]
   1274a:	2303      	movs	r3, #3
   1274c:	2200      	movs	r2, #0
   1274e:	6879      	ldr	r1, [r7, #4]
   12750:	68b8      	ldr	r0, [r7, #8]
   12752:	f7fa fdbb 	bl	d2cc <mp_arg_check_num>

    switch (n_args) {
   12756:	68bb      	ldr	r3, [r7, #8]
   12758:	2b00      	cmp	r3, #0
   1275a:	d002      	beq.n	12762 <mp_obj_str_make_new+0x2a>
   1275c:	2b01      	cmp	r3, #1
   1275e:	d002      	beq.n	12766 <mp_obj_str_make_new+0x2e>
   12760:	e019      	b.n	12796 <mp_obj_str_make_new+0x5e>
        case 0:
            return MP_OBJ_NEW_QSTR(MP_QSTR_);
   12762:	2306      	movs	r3, #6
   12764:	e089      	b.n	1287a <mp_obj_str_make_new+0x142>

        case 1: {
            vstr_t vstr;
            mp_print_t print;
            vstr_init_print(&vstr, 16, &print);
   12766:	f107 0220 	add.w	r2, r7, #32
   1276a:	f107 0328 	add.w	r3, r7, #40	; 0x28
   1276e:	2110      	movs	r1, #16
   12770:	4618      	mov	r0, r3
   12772:	f7ee fecf 	bl	1514 <vstr_init_print>
            mp_obj_print_helper(&print, args[0], PRINT_STR);
   12776:	683b      	ldr	r3, [r7, #0]
   12778:	6819      	ldr	r1, [r3, #0]
   1277a:	f107 0320 	add.w	r3, r7, #32
   1277e:	2200      	movs	r2, #0
   12780:	4618      	mov	r0, r3
   12782:	f7fb f9c9 	bl	db18 <mp_obj_print_helper>
            return mp_obj_new_str_from_vstr(type, &vstr);
   12786:	f107 0328 	add.w	r3, r7, #40	; 0x28
   1278a:	4619      	mov	r1, r3
   1278c:	68f8      	ldr	r0, [r7, #12]
   1278e:	f002 ff05 	bl	1559c <mp_obj_new_str_from_vstr>
   12792:	4603      	mov	r3, r0
   12794:	e071      	b.n	1287a <mp_obj_str_make_new+0x142>
        }

        default: // 2 or 3 args
            // TODO: validate 2nd/3rd args
            if (MP_OBJ_IS_TYPE(args[0], &mp_type_bytes)) {
   12796:	683b      	ldr	r3, [r7, #0]
   12798:	681b      	ldr	r3, [r3, #0]
   1279a:	4618      	mov	r0, r3
   1279c:	f7ff fe90 	bl	124c0 <MP_OBJ_IS_OBJ>
   127a0:	4603      	mov	r3, r0
   127a2:	2b00      	cmp	r3, #0
   127a4:	d05a      	beq.n	1285c <mp_obj_str_make_new+0x124>
   127a6:	683b      	ldr	r3, [r7, #0]
   127a8:	681b      	ldr	r3, [r3, #0]
   127aa:	681b      	ldr	r3, [r3, #0]
   127ac:	4a35      	ldr	r2, [pc, #212]	; (12884 <mp_obj_str_make_new+0x14c>)
   127ae:	4293      	cmp	r3, r2
   127b0:	d154      	bne.n	1285c <mp_obj_str_make_new+0x124>
                GET_STR_DATA_LEN(args[0], str_data, str_len);
   127b2:	683b      	ldr	r3, [r7, #0]
   127b4:	681b      	ldr	r3, [r3, #0]
   127b6:	4618      	mov	r0, r3
   127b8:	f7ff fe70 	bl	1249c <MP_OBJ_IS_QSTR>
   127bc:	4603      	mov	r3, r0
   127be:	2b00      	cmp	r3, #0
   127c0:	d00a      	beq.n	127d8 <mp_obj_str_make_new+0xa0>
   127c2:	683b      	ldr	r3, [r7, #0]
   127c4:	681b      	ldr	r3, [r3, #0]
   127c6:	089b      	lsrs	r3, r3, #2
   127c8:	f107 021c 	add.w	r2, r7, #28
   127cc:	4611      	mov	r1, r2
   127ce:	4618      	mov	r0, r3
   127d0:	f7ee fdda 	bl	1388 <qstr_data>
   127d4:	6478      	str	r0, [r7, #68]	; 0x44
   127d6:	e007      	b.n	127e8 <mp_obj_str_make_new+0xb0>
   127d8:	683b      	ldr	r3, [r7, #0]
   127da:	681b      	ldr	r3, [r3, #0]
   127dc:	689b      	ldr	r3, [r3, #8]
   127de:	61fb      	str	r3, [r7, #28]
   127e0:	683b      	ldr	r3, [r7, #0]
   127e2:	681b      	ldr	r3, [r3, #0]
   127e4:	68db      	ldr	r3, [r3, #12]
   127e6:	647b      	str	r3, [r7, #68]	; 0x44
                GET_STR_HASH(args[0], str_hash);
   127e8:	683b      	ldr	r3, [r7, #0]
   127ea:	681b      	ldr	r3, [r3, #0]
   127ec:	4618      	mov	r0, r3
   127ee:	f7ff fe55 	bl	1249c <MP_OBJ_IS_QSTR>
   127f2:	4603      	mov	r3, r0
   127f4:	2b00      	cmp	r3, #0
   127f6:	d007      	beq.n	12808 <mp_obj_str_make_new+0xd0>
   127f8:	683b      	ldr	r3, [r7, #0]
   127fa:	681b      	ldr	r3, [r3, #0]
   127fc:	089b      	lsrs	r3, r3, #2
   127fe:	4618      	mov	r0, r3
   12800:	f7ee fd96 	bl	1330 <qstr_hash>
   12804:	6438      	str	r0, [r7, #64]	; 0x40
   12806:	e003      	b.n	12810 <mp_obj_str_make_new+0xd8>
   12808:	683b      	ldr	r3, [r7, #0]
   1280a:	681b      	ldr	r3, [r3, #0]
   1280c:	685b      	ldr	r3, [r3, #4]
   1280e:	643b      	str	r3, [r7, #64]	; 0x40
                if (str_hash == 0) {
   12810:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   12812:	2b00      	cmp	r3, #0
   12814:	d105      	bne.n	12822 <mp_obj_str_make_new+0xea>
                    str_hash = qstr_compute_hash(str_data, str_len);
   12816:	69fb      	ldr	r3, [r7, #28]
   12818:	4619      	mov	r1, r3
   1281a:	6c78      	ldr	r0, [r7, #68]	; 0x44
   1281c:	f7ee fbb6 	bl	f8c <qstr_compute_hash>
   12820:	6438      	str	r0, [r7, #64]	; 0x40
                    mp_raise_msg(&mp_type_UnicodeError, NULL);
                }
                #endif

                // Check if a qstr with this data already exists
                qstr q = qstr_find_strn((const char*)str_data, str_len);
   12822:	69fb      	ldr	r3, [r7, #28]
   12824:	4619      	mov	r1, r3
   12826:	6c78      	ldr	r0, [r7, #68]	; 0x44
   12828:	f7ee fc60 	bl	10ec <qstr_find_strn>
   1282c:	63f8      	str	r0, [r7, #60]	; 0x3c
                if (q != MP_QSTR_NULL) {
   1282e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   12830:	2b00      	cmp	r3, #0
   12832:	d004      	beq.n	1283e <mp_obj_str_make_new+0x106>
                    return MP_OBJ_NEW_QSTR(q);
   12834:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   12836:	009b      	lsls	r3, r3, #2
   12838:	f043 0302 	orr.w	r3, r3, #2
   1283c:	e01d      	b.n	1287a <mp_obj_str_make_new+0x142>
                }

                mp_obj_str_t *o = MP_OBJ_TO_PTR(mp_obj_new_str_copy(type, NULL, str_len));
   1283e:	69fb      	ldr	r3, [r7, #28]
   12840:	461a      	mov	r2, r3
   12842:	2100      	movs	r1, #0
   12844:	68f8      	ldr	r0, [r7, #12]
   12846:	f002 fe49 	bl	154dc <mp_obj_new_str_copy>
   1284a:	63b8      	str	r0, [r7, #56]	; 0x38
                o->data = str_data;
   1284c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1284e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
   12850:	60da      	str	r2, [r3, #12]
                o->hash = str_hash;
   12852:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   12854:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   12856:	605a      	str	r2, [r3, #4]
                return MP_OBJ_FROM_PTR(o);
   12858:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1285a:	e00e      	b.n	1287a <mp_obj_str_make_new+0x142>
            } else {
                mp_buffer_info_t bufinfo;
                mp_get_buffer_raise(args[0], &bufinfo, MP_BUFFER_READ);
   1285c:	683b      	ldr	r3, [r7, #0]
   1285e:	681b      	ldr	r3, [r3, #0]
   12860:	f107 0110 	add.w	r1, r7, #16
   12864:	2201      	movs	r2, #1
   12866:	4618      	mov	r0, r3
   12868:	f7fb fd36 	bl	e2d8 <mp_get_buffer_raise>
                #if MICROPY_PY_BUILTINS_STR_UNICODE_CHECK
                if (!utf8_check(bufinfo.buf, bufinfo.len)) {
                    mp_raise_msg(&mp_type_UnicodeError, NULL);
                }
                #endif
                return mp_obj_new_str(bufinfo.buf, bufinfo.len);
   1286c:	693b      	ldr	r3, [r7, #16]
   1286e:	697a      	ldr	r2, [r7, #20]
   12870:	4611      	mov	r1, r2
   12872:	4618      	mov	r0, r3
   12874:	f002 fef4 	bl	15660 <mp_obj_new_str>
   12878:	4603      	mov	r3, r0
            }
    }
}
   1287a:	4618      	mov	r0, r3
   1287c:	3748      	adds	r7, #72	; 0x48
   1287e:	46bd      	mov	sp, r7
   12880:	bd80      	pop	{r7, pc}
   12882:	bf00      	nop
   12884:	00023b48 	.word	0x00023b48

00012888 <bytes_make_new>:

STATIC mp_obj_t bytes_make_new(const mp_obj_type_t *type_in, size_t n_args, size_t n_kw, const mp_obj_t *args) {
   12888:	b580      	push	{r7, lr}
   1288a:	b09e      	sub	sp, #120	; 0x78
   1288c:	af00      	add	r7, sp, #0
   1288e:	60f8      	str	r0, [r7, #12]
   12890:	60b9      	str	r1, [r7, #8]
   12892:	607a      	str	r2, [r7, #4]
   12894:	603b      	str	r3, [r7, #0]
    }
    #else
    (void)n_kw;
    #endif

    if (n_args == 0) {
   12896:	68bb      	ldr	r3, [r7, #8]
   12898:	2b00      	cmp	r3, #0
   1289a:	d101      	bne.n	128a0 <bytes_make_new+0x18>
        return mp_const_empty_bytes;
   1289c:	4b7a      	ldr	r3, [pc, #488]	; (12a88 <bytes_make_new+0x200>)
   1289e:	e0ee      	b.n	12a7e <bytes_make_new+0x1f6>
    }

    if (MP_OBJ_IS_STR(args[0])) {
   128a0:	683b      	ldr	r3, [r7, #0]
   128a2:	681b      	ldr	r3, [r3, #0]
   128a4:	4618      	mov	r0, r3
   128a6:	f7ff fdf9 	bl	1249c <MP_OBJ_IS_QSTR>
   128aa:	4603      	mov	r3, r0
   128ac:	2b00      	cmp	r3, #0
   128ae:	d10d      	bne.n	128cc <bytes_make_new+0x44>
   128b0:	683b      	ldr	r3, [r7, #0]
   128b2:	681b      	ldr	r3, [r3, #0]
   128b4:	4618      	mov	r0, r3
   128b6:	f7ff fe03 	bl	124c0 <MP_OBJ_IS_OBJ>
   128ba:	4603      	mov	r3, r0
   128bc:	2b00      	cmp	r3, #0
   128be:	d054      	beq.n	1296a <bytes_make_new+0xe2>
   128c0:	683b      	ldr	r3, [r7, #0]
   128c2:	681b      	ldr	r3, [r3, #0]
   128c4:	681b      	ldr	r3, [r3, #0]
   128c6:	4a71      	ldr	r2, [pc, #452]	; (12a8c <bytes_make_new+0x204>)
   128c8:	4293      	cmp	r3, r2
   128ca:	d14e      	bne.n	1296a <bytes_make_new+0xe2>
        if (n_args < 2 || n_args > 3) {
   128cc:	68bb      	ldr	r3, [r7, #8]
   128ce:	2b01      	cmp	r3, #1
   128d0:	f240 80d2 	bls.w	12a78 <bytes_make_new+0x1f0>
   128d4:	68bb      	ldr	r3, [r7, #8]
   128d6:	2b03      	cmp	r3, #3
   128d8:	f200 80ce 	bhi.w	12a78 <bytes_make_new+0x1f0>
            goto wrong_args;
        }
        GET_STR_DATA_LEN(args[0], str_data, str_len);
   128dc:	683b      	ldr	r3, [r7, #0]
   128de:	681b      	ldr	r3, [r3, #0]
   128e0:	4618      	mov	r0, r3
   128e2:	f7ff fddb 	bl	1249c <MP_OBJ_IS_QSTR>
   128e6:	4603      	mov	r3, r0
   128e8:	2b00      	cmp	r3, #0
   128ea:	d00a      	beq.n	12902 <bytes_make_new+0x7a>
   128ec:	683b      	ldr	r3, [r7, #0]
   128ee:	681b      	ldr	r3, [r3, #0]
   128f0:	089b      	lsrs	r3, r3, #2
   128f2:	f107 0224 	add.w	r2, r7, #36	; 0x24
   128f6:	4611      	mov	r1, r2
   128f8:	4618      	mov	r0, r3
   128fa:	f7ee fd45 	bl	1388 <qstr_data>
   128fe:	6778      	str	r0, [r7, #116]	; 0x74
   12900:	e007      	b.n	12912 <bytes_make_new+0x8a>
   12902:	683b      	ldr	r3, [r7, #0]
   12904:	681b      	ldr	r3, [r3, #0]
   12906:	689b      	ldr	r3, [r3, #8]
   12908:	627b      	str	r3, [r7, #36]	; 0x24
   1290a:	683b      	ldr	r3, [r7, #0]
   1290c:	681b      	ldr	r3, [r3, #0]
   1290e:	68db      	ldr	r3, [r3, #12]
   12910:	677b      	str	r3, [r7, #116]	; 0x74
        GET_STR_HASH(args[0], str_hash);
   12912:	683b      	ldr	r3, [r7, #0]
   12914:	681b      	ldr	r3, [r3, #0]
   12916:	4618      	mov	r0, r3
   12918:	f7ff fdc0 	bl	1249c <MP_OBJ_IS_QSTR>
   1291c:	4603      	mov	r3, r0
   1291e:	2b00      	cmp	r3, #0
   12920:	d007      	beq.n	12932 <bytes_make_new+0xaa>
   12922:	683b      	ldr	r3, [r7, #0]
   12924:	681b      	ldr	r3, [r3, #0]
   12926:	089b      	lsrs	r3, r3, #2
   12928:	4618      	mov	r0, r3
   1292a:	f7ee fd01 	bl	1330 <qstr_hash>
   1292e:	6738      	str	r0, [r7, #112]	; 0x70
   12930:	e003      	b.n	1293a <bytes_make_new+0xb2>
   12932:	683b      	ldr	r3, [r7, #0]
   12934:	681b      	ldr	r3, [r3, #0]
   12936:	685b      	ldr	r3, [r3, #4]
   12938:	673b      	str	r3, [r7, #112]	; 0x70
        if (str_hash == 0) {
   1293a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   1293c:	2b00      	cmp	r3, #0
   1293e:	d105      	bne.n	1294c <bytes_make_new+0xc4>
            str_hash = qstr_compute_hash(str_data, str_len);
   12940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   12942:	4619      	mov	r1, r3
   12944:	6f78      	ldr	r0, [r7, #116]	; 0x74
   12946:	f7ee fb21 	bl	f8c <qstr_compute_hash>
   1294a:	6738      	str	r0, [r7, #112]	; 0x70
        }
        mp_obj_str_t *o = MP_OBJ_TO_PTR(mp_obj_new_str_copy(&mp_type_bytes, NULL, str_len));
   1294c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1294e:	461a      	mov	r2, r3
   12950:	2100      	movs	r1, #0
   12952:	484f      	ldr	r0, [pc, #316]	; (12a90 <bytes_make_new+0x208>)
   12954:	f002 fdc2 	bl	154dc <mp_obj_new_str_copy>
   12958:	6578      	str	r0, [r7, #84]	; 0x54
        o->data = str_data;
   1295a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   1295c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
   1295e:	60da      	str	r2, [r3, #12]
        o->hash = str_hash;
   12960:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   12962:	6f3a      	ldr	r2, [r7, #112]	; 0x70
   12964:	605a      	str	r2, [r3, #4]
        return MP_OBJ_FROM_PTR(o);
   12966:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   12968:	e089      	b.n	12a7e <bytes_make_new+0x1f6>
    }

    if (n_args > 1) {
   1296a:	68bb      	ldr	r3, [r7, #8]
   1296c:	2b01      	cmp	r3, #1
   1296e:	f200 8082 	bhi.w	12a76 <bytes_make_new+0x1ee>
        goto wrong_args;
    }

    if (MP_OBJ_IS_SMALL_INT(args[0])) {
   12972:	683b      	ldr	r3, [r7, #0]
   12974:	681b      	ldr	r3, [r3, #0]
   12976:	4618      	mov	r0, r3
   12978:	f7ff fd7e 	bl	12478 <MP_OBJ_IS_SMALL_INT>
   1297c:	4603      	mov	r3, r0
   1297e:	2b00      	cmp	r3, #0
   12980:	d01e      	beq.n	129c0 <bytes_make_new+0x138>
        mp_int_t len = MP_OBJ_SMALL_INT_VALUE(args[0]);
   12982:	683b      	ldr	r3, [r7, #0]
   12984:	681b      	ldr	r3, [r3, #0]
   12986:	105b      	asrs	r3, r3, #1
   12988:	66fb      	str	r3, [r7, #108]	; 0x6c
        if (len < 0) {
   1298a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   1298c:	2b00      	cmp	r3, #0
   1298e:	da02      	bge.n	12996 <bytes_make_new+0x10e>
            mp_raise_ValueError(NULL);
   12990:	2000      	movs	r0, #0
   12992:	f7fa fc25 	bl	d1e0 <mp_raise_ValueError>
        }
        vstr_t vstr;
        vstr_init_len(&vstr, len);
   12996:	6efa      	ldr	r2, [r7, #108]	; 0x6c
   12998:	f107 0314 	add.w	r3, r7, #20
   1299c:	4611      	mov	r1, r2
   1299e:	4618      	mov	r0, r3
   129a0:	f7ee fd8c 	bl	14bc <vstr_init_len>
        memset(vstr.buf, 0, len);
   129a4:	69fb      	ldr	r3, [r7, #28]
   129a6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
   129a8:	2100      	movs	r1, #0
   129aa:	4618      	mov	r0, r3
   129ac:	f00a fa00 	bl	1cdb0 <memset>
        return mp_obj_new_str_from_vstr(&mp_type_bytes, &vstr);
   129b0:	f107 0314 	add.w	r3, r7, #20
   129b4:	4619      	mov	r1, r3
   129b6:	4836      	ldr	r0, [pc, #216]	; (12a90 <bytes_make_new+0x208>)
   129b8:	f002 fdf0 	bl	1559c <mp_obj_new_str_from_vstr>
   129bc:	4603      	mov	r3, r0
   129be:	e05e      	b.n	12a7e <bytes_make_new+0x1f6>
    }

    // check if argument has the buffer protocol
    mp_buffer_info_t bufinfo;
    if (mp_get_buffer(args[0], &bufinfo, MP_BUFFER_READ)) {
   129c0:	683b      	ldr	r3, [r7, #0]
   129c2:	681b      	ldr	r3, [r3, #0]
   129c4:	f107 0148 	add.w	r1, r7, #72	; 0x48
   129c8:	2201      	movs	r2, #1
   129ca:	4618      	mov	r0, r3
   129cc:	f7fb fc62 	bl	e294 <mp_get_buffer>
   129d0:	4603      	mov	r3, r0
   129d2:	2b00      	cmp	r3, #0
   129d4:	d007      	beq.n	129e6 <bytes_make_new+0x15e>
        return mp_obj_new_bytes(bufinfo.buf, bufinfo.len);
   129d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   129d8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
   129da:	4611      	mov	r1, r2
   129dc:	4618      	mov	r0, r3
   129de:	f002 fe97 	bl	15710 <mp_obj_new_bytes>
   129e2:	4603      	mov	r3, r0
   129e4:	e04b      	b.n	12a7e <bytes_make_new+0x1f6>
    }

    vstr_t vstr;
    // Try to create array of exact len if initializer len is known
    mp_obj_t len_in = mp_obj_len_maybe(args[0]);
   129e6:	683b      	ldr	r3, [r7, #0]
   129e8:	681b      	ldr	r3, [r3, #0]
   129ea:	4618      	mov	r0, r3
   129ec:	f7fb fbb8 	bl	e160 <mp_obj_len_maybe>
   129f0:	66b8      	str	r0, [r7, #104]	; 0x68
    if (len_in == MP_OBJ_NULL) {
   129f2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   129f4:	2b00      	cmp	r3, #0
   129f6:	d106      	bne.n	12a06 <bytes_make_new+0x17e>
        vstr_init(&vstr, 16);
   129f8:	f107 0338 	add.w	r3, r7, #56	; 0x38
   129fc:	2110      	movs	r1, #16
   129fe:	4618      	mov	r0, r3
   12a00:	f7ee fd3a 	bl	1478 <vstr_init>
   12a04:	e009      	b.n	12a1a <bytes_make_new+0x192>
    } else {
        mp_int_t len = MP_OBJ_SMALL_INT_VALUE(len_in);
   12a06:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   12a08:	105b      	asrs	r3, r3, #1
   12a0a:	667b      	str	r3, [r7, #100]	; 0x64
        vstr_init(&vstr, len);
   12a0c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
   12a0e:	f107 0338 	add.w	r3, r7, #56	; 0x38
   12a12:	4611      	mov	r1, r2
   12a14:	4618      	mov	r0, r3
   12a16:	f7ee fd2f 	bl	1478 <vstr_init>
    }

    mp_obj_iter_buf_t iter_buf;
    mp_obj_t iterable = mp_getiter(args[0], &iter_buf);
   12a1a:	683b      	ldr	r3, [r7, #0]
   12a1c:	681b      	ldr	r3, [r3, #0]
   12a1e:	f107 0228 	add.w	r2, r7, #40	; 0x28
   12a22:	4611      	mov	r1, r2
   12a24:	4618      	mov	r0, r3
   12a26:	f7fa f893 	bl	cb50 <mp_getiter>
   12a2a:	6638      	str	r0, [r7, #96]	; 0x60
    mp_obj_t item;
    while ((item = mp_iternext(iterable)) != MP_OBJ_STOP_ITERATION) {
   12a2c:	e014      	b.n	12a58 <bytes_make_new+0x1d0>
        mp_int_t val = mp_obj_get_int(item);
   12a2e:	6df8      	ldr	r0, [r7, #92]	; 0x5c
   12a30:	f7fb fa1e 	bl	de70 <mp_obj_get_int>
   12a34:	65b8      	str	r0, [r7, #88]	; 0x58
        #if MICROPY_FULL_CHECKS
        if (val < 0 || val > 255) {
   12a36:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   12a38:	2b00      	cmp	r3, #0
   12a3a:	db02      	blt.n	12a42 <bytes_make_new+0x1ba>
   12a3c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   12a3e:	2bff      	cmp	r3, #255	; 0xff
   12a40:	dd02      	ble.n	12a48 <bytes_make_new+0x1c0>
            mp_raise_ValueError("bytes value out of range");
   12a42:	4814      	ldr	r0, [pc, #80]	; (12a94 <bytes_make_new+0x20c>)
   12a44:	f7fa fbcc 	bl	d1e0 <mp_raise_ValueError>
        }
        #endif
        vstr_add_byte(&vstr, val);
   12a48:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   12a4a:	b2da      	uxtb	r2, r3
   12a4c:	f107 0338 	add.w	r3, r7, #56	; 0x38
   12a50:	4611      	mov	r1, r2
   12a52:	4618      	mov	r0, r3
   12a54:	f7ee fe66 	bl	1724 <vstr_add_byte>
    while ((item = mp_iternext(iterable)) != MP_OBJ_STOP_ITERATION) {
   12a58:	6e38      	ldr	r0, [r7, #96]	; 0x60
   12a5a:	f7fa f8fb 	bl	cc54 <mp_iternext>
   12a5e:	65f8      	str	r0, [r7, #92]	; 0x5c
   12a60:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
   12a62:	2b04      	cmp	r3, #4
   12a64:	d1e3      	bne.n	12a2e <bytes_make_new+0x1a6>
    }

    return mp_obj_new_str_from_vstr(&mp_type_bytes, &vstr);
   12a66:	f107 0338 	add.w	r3, r7, #56	; 0x38
   12a6a:	4619      	mov	r1, r3
   12a6c:	4808      	ldr	r0, [pc, #32]	; (12a90 <bytes_make_new+0x208>)
   12a6e:	f002 fd95 	bl	1559c <mp_obj_new_str_from_vstr>
   12a72:	4603      	mov	r3, r0
   12a74:	e003      	b.n	12a7e <bytes_make_new+0x1f6>
        goto wrong_args;
   12a76:	bf00      	nop

wrong_args:
    mp_raise_TypeError("wrong number of arguments");
   12a78:	4807      	ldr	r0, [pc, #28]	; (12a98 <bytes_make_new+0x210>)
   12a7a:	f7fa fbbb 	bl	d1f4 <mp_raise_TypeError>
}
   12a7e:	4618      	mov	r0, r3
   12a80:	3778      	adds	r7, #120	; 0x78
   12a82:	46bd      	mov	sp, r7
   12a84:	bd80      	pop	{r7, pc}
   12a86:	bf00      	nop
   12a88:	00023b88 	.word	0x00023b88
   12a8c:	00023b0c 	.word	0x00023b0c
   12a90:	00023b48 	.word	0x00023b48
   12a94:	00023574 	.word	0x00023574
   12a98:	00023590 	.word	0x00023590

00012a9c <find_subbytes>:

// like strstr but with specified length and allows \0 bytes
// TODO replace with something more efficient/standard
const byte *find_subbytes(const byte *haystack, size_t hlen, const byte *needle, size_t nlen, int direction) {
   12a9c:	b580      	push	{r7, lr}
   12a9e:	b086      	sub	sp, #24
   12aa0:	af00      	add	r7, sp, #0
   12aa2:	60f8      	str	r0, [r7, #12]
   12aa4:	60b9      	str	r1, [r7, #8]
   12aa6:	607a      	str	r2, [r7, #4]
   12aa8:	603b      	str	r3, [r7, #0]
    if (hlen >= nlen) {
   12aaa:	68ba      	ldr	r2, [r7, #8]
   12aac:	683b      	ldr	r3, [r7, #0]
   12aae:	429a      	cmp	r2, r3
   12ab0:	d328      	bcc.n	12b04 <find_subbytes+0x68>
        size_t str_index, str_index_end;
        if (direction > 0) {
   12ab2:	6a3b      	ldr	r3, [r7, #32]
   12ab4:	2b00      	cmp	r3, #0
   12ab6:	dd06      	ble.n	12ac6 <find_subbytes+0x2a>
            str_index = 0;
   12ab8:	2300      	movs	r3, #0
   12aba:	617b      	str	r3, [r7, #20]
            str_index_end = hlen - nlen;
   12abc:	68ba      	ldr	r2, [r7, #8]
   12abe:	683b      	ldr	r3, [r7, #0]
   12ac0:	1ad3      	subs	r3, r2, r3
   12ac2:	613b      	str	r3, [r7, #16]
   12ac4:	e005      	b.n	12ad2 <find_subbytes+0x36>
        } else {
            str_index = hlen - nlen;
   12ac6:	68ba      	ldr	r2, [r7, #8]
   12ac8:	683b      	ldr	r3, [r7, #0]
   12aca:	1ad3      	subs	r3, r2, r3
   12acc:	617b      	str	r3, [r7, #20]
            str_index_end = 0;
   12ace:	2300      	movs	r3, #0
   12ad0:	613b      	str	r3, [r7, #16]
        }
        for (;;) {
            if (memcmp(&haystack[str_index], needle, nlen) == 0) {
   12ad2:	68fa      	ldr	r2, [r7, #12]
   12ad4:	697b      	ldr	r3, [r7, #20]
   12ad6:	4413      	add	r3, r2
   12ad8:	683a      	ldr	r2, [r7, #0]
   12ada:	6879      	ldr	r1, [r7, #4]
   12adc:	4618      	mov	r0, r3
   12ade:	f00a f9b3 	bl	1ce48 <memcmp>
   12ae2:	4603      	mov	r3, r0
   12ae4:	2b00      	cmp	r3, #0
   12ae6:	d103      	bne.n	12af0 <find_subbytes+0x54>
                //found
                return haystack + str_index;
   12ae8:	68fa      	ldr	r2, [r7, #12]
   12aea:	697b      	ldr	r3, [r7, #20]
   12aec:	4413      	add	r3, r2
   12aee:	e00a      	b.n	12b06 <find_subbytes+0x6a>
            }
            if (str_index == str_index_end) {
   12af0:	697a      	ldr	r2, [r7, #20]
   12af2:	693b      	ldr	r3, [r7, #16]
   12af4:	429a      	cmp	r2, r3
   12af6:	d004      	beq.n	12b02 <find_subbytes+0x66>
                //not found
                break;
            }
            str_index += direction;
   12af8:	6a3b      	ldr	r3, [r7, #32]
   12afa:	697a      	ldr	r2, [r7, #20]
   12afc:	4413      	add	r3, r2
   12afe:	617b      	str	r3, [r7, #20]
        }
   12b00:	e7e7      	b.n	12ad2 <find_subbytes+0x36>
                break;
   12b02:	bf00      	nop
    }
    return NULL;
   12b04:	2300      	movs	r3, #0
}
   12b06:	4618      	mov	r0, r3
   12b08:	3718      	adds	r7, #24
   12b0a:	46bd      	mov	sp, r7
   12b0c:	bd80      	pop	{r7, pc}
   12b0e:	bf00      	nop

00012b10 <mp_obj_str_binary_op>:

// Note: this function is used to check if an object is a str or bytes, which
// works because both those types use it as their binary_op method.  Revisit
// MP_OBJ_IS_STR_OR_BYTES if this fact changes.
mp_obj_t mp_obj_str_binary_op(mp_binary_op_t op, mp_obj_t lhs_in, mp_obj_t rhs_in) {
   12b10:	b580      	push	{r7, lr}
   12b12:	b09c      	sub	sp, #112	; 0x70
   12b14:	af02      	add	r7, sp, #8
   12b16:	60f8      	str	r0, [r7, #12]
   12b18:	60b9      	str	r1, [r7, #8]
   12b1a:	607a      	str	r2, [r7, #4]
    // check for modulo
    if (op == MP_BINARY_OP_MODULO) {
   12b1c:	68fb      	ldr	r3, [r7, #12]
   12b1e:	2b1f      	cmp	r3, #31
   12b20:	d130      	bne.n	12b84 <mp_obj_str_binary_op+0x74>
        mp_obj_t *args = &rhs_in;
   12b22:	1d3b      	adds	r3, r7, #4
   12b24:	64bb      	str	r3, [r7, #72]	; 0x48
        size_t n_args = 1;
   12b26:	2301      	movs	r3, #1
   12b28:	647b      	str	r3, [r7, #68]	; 0x44
        mp_obj_t dict = MP_OBJ_NULL;
   12b2a:	2300      	movs	r3, #0
   12b2c:	667b      	str	r3, [r7, #100]	; 0x64
        if (MP_OBJ_IS_TYPE(rhs_in, &mp_type_tuple)) {
   12b2e:	687b      	ldr	r3, [r7, #4]
   12b30:	4618      	mov	r0, r3
   12b32:	f7ff fcc5 	bl	124c0 <MP_OBJ_IS_OBJ>
   12b36:	4603      	mov	r3, r0
   12b38:	2b00      	cmp	r3, #0
   12b3a:	d00d      	beq.n	12b58 <mp_obj_str_binary_op+0x48>
   12b3c:	687b      	ldr	r3, [r7, #4]
   12b3e:	681b      	ldr	r3, [r3, #0]
   12b40:	4aac      	ldr	r2, [pc, #688]	; (12df4 <mp_obj_str_binary_op+0x2e4>)
   12b42:	4293      	cmp	r3, r2
   12b44:	d108      	bne.n	12b58 <mp_obj_str_binary_op+0x48>
            // TODO: Support tuple subclasses?
            mp_obj_tuple_get(rhs_in, &n_args, &args);
   12b46:	687b      	ldr	r3, [r7, #4]
   12b48:	f107 0248 	add.w	r2, r7, #72	; 0x48
   12b4c:	f107 0144 	add.w	r1, r7, #68	; 0x44
   12b50:	4618      	mov	r0, r3
   12b52:	f003 fac3 	bl	160dc <mp_obj_tuple_get>
   12b56:	e00d      	b.n	12b74 <mp_obj_str_binary_op+0x64>
        } else if (MP_OBJ_IS_TYPE(rhs_in, &mp_type_dict)) {
   12b58:	687b      	ldr	r3, [r7, #4]
   12b5a:	4618      	mov	r0, r3
   12b5c:	f7ff fcb0 	bl	124c0 <MP_OBJ_IS_OBJ>
   12b60:	4603      	mov	r3, r0
   12b62:	2b00      	cmp	r3, #0
   12b64:	d006      	beq.n	12b74 <mp_obj_str_binary_op+0x64>
   12b66:	687b      	ldr	r3, [r7, #4]
   12b68:	681b      	ldr	r3, [r3, #0]
   12b6a:	4aa3      	ldr	r2, [pc, #652]	; (12df8 <mp_obj_str_binary_op+0x2e8>)
   12b6c:	4293      	cmp	r3, r2
   12b6e:	d101      	bne.n	12b74 <mp_obj_str_binary_op+0x64>
            dict = rhs_in;
   12b70:	687b      	ldr	r3, [r7, #4]
   12b72:	667b      	str	r3, [r7, #100]	; 0x64
        }
        return str_modulo_format(lhs_in, n_args, args, dict);
   12b74:	6c79      	ldr	r1, [r7, #68]	; 0x44
   12b76:	6cba      	ldr	r2, [r7, #72]	; 0x48
   12b78:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   12b7a:	68b8      	ldr	r0, [r7, #8]
   12b7c:	f001 fdb0 	bl	146e0 <str_modulo_format>
   12b80:	4603      	mov	r3, r0
   12b82:	e132      	b.n	12dea <mp_obj_str_binary_op+0x2da>
    }

    // from now on we need lhs type and data, so extract them
    mp_obj_type_t *lhs_type = mp_obj_get_type(lhs_in);
   12b84:	68b8      	ldr	r0, [r7, #8]
   12b86:	f7fa ff95 	bl	dab4 <mp_obj_get_type>
   12b8a:	6538      	str	r0, [r7, #80]	; 0x50
    GET_STR_DATA_LEN(lhs_in, lhs_data, lhs_len);
   12b8c:	68b8      	ldr	r0, [r7, #8]
   12b8e:	f7ff fc85 	bl	1249c <MP_OBJ_IS_QSTR>
   12b92:	4603      	mov	r3, r0
   12b94:	2b00      	cmp	r3, #0
   12b96:	d009      	beq.n	12bac <mp_obj_str_binary_op+0x9c>
   12b98:	68bb      	ldr	r3, [r7, #8]
   12b9a:	089b      	lsrs	r3, r3, #2
   12b9c:	f107 024c 	add.w	r2, r7, #76	; 0x4c
   12ba0:	4611      	mov	r1, r2
   12ba2:	4618      	mov	r0, r3
   12ba4:	f7ee fbf0 	bl	1388 <qstr_data>
   12ba8:	6638      	str	r0, [r7, #96]	; 0x60
   12baa:	e005      	b.n	12bb8 <mp_obj_str_binary_op+0xa8>
   12bac:	68bb      	ldr	r3, [r7, #8]
   12bae:	689b      	ldr	r3, [r3, #8]
   12bb0:	64fb      	str	r3, [r7, #76]	; 0x4c
   12bb2:	68bb      	ldr	r3, [r7, #8]
   12bb4:	68db      	ldr	r3, [r3, #12]
   12bb6:	663b      	str	r3, [r7, #96]	; 0x60

    // check for multiply
    if (op == MP_BINARY_OP_MULTIPLY) {
   12bb8:	68fb      	ldr	r3, [r7, #12]
   12bba:	2b1c      	cmp	r3, #28
   12bbc:	d135      	bne.n	12c2a <mp_obj_str_binary_op+0x11a>
        mp_int_t n;
        if (!mp_obj_get_int_maybe(rhs_in, &n)) {
   12bbe:	687b      	ldr	r3, [r7, #4]
   12bc0:	f107 0240 	add.w	r2, r7, #64	; 0x40
   12bc4:	4611      	mov	r1, r2
   12bc6:	4618      	mov	r0, r3
   12bc8:	f7fb f9ae 	bl	df28 <mp_obj_get_int_maybe>
   12bcc:	4603      	mov	r3, r0
   12bce:	f083 0301 	eor.w	r3, r3, #1
   12bd2:	b2db      	uxtb	r3, r3
   12bd4:	2b00      	cmp	r3, #0
   12bd6:	d001      	beq.n	12bdc <mp_obj_str_binary_op+0xcc>
            return MP_OBJ_NULL; // op not supported
   12bd8:	2300      	movs	r3, #0
   12bda:	e106      	b.n	12dea <mp_obj_str_binary_op+0x2da>
        }
        if (n <= 0) {
   12bdc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   12bde:	2b00      	cmp	r3, #0
   12be0:	dc07      	bgt.n	12bf2 <mp_obj_str_binary_op+0xe2>
            if (lhs_type == &mp_type_str) {
   12be2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   12be4:	4a85      	ldr	r2, [pc, #532]	; (12dfc <mp_obj_str_binary_op+0x2ec>)
   12be6:	4293      	cmp	r3, r2
   12be8:	d101      	bne.n	12bee <mp_obj_str_binary_op+0xde>
                return MP_OBJ_NEW_QSTR(MP_QSTR_); // empty str
   12bea:	2306      	movs	r3, #6
   12bec:	e0fd      	b.n	12dea <mp_obj_str_binary_op+0x2da>
            } else {
                return mp_const_empty_bytes;
   12bee:	4b84      	ldr	r3, [pc, #528]	; (12e00 <mp_obj_str_binary_op+0x2f0>)
   12bf0:	e0fb      	b.n	12dea <mp_obj_str_binary_op+0x2da>
            }
        }
        vstr_t vstr;
        vstr_init_len(&vstr, lhs_len * n);
   12bf2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   12bf4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   12bf6:	fb02 f203 	mul.w	r2, r2, r3
   12bfa:	f107 0330 	add.w	r3, r7, #48	; 0x30
   12bfe:	4611      	mov	r1, r2
   12c00:	4618      	mov	r0, r3
   12c02:	f7ee fc5b 	bl	14bc <vstr_init_len>
        mp_seq_multiply(lhs_data, sizeof(*lhs_data), lhs_len, n, vstr.buf);
   12c06:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
   12c08:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   12c0a:	4619      	mov	r1, r3
   12c0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   12c0e:	9300      	str	r3, [sp, #0]
   12c10:	460b      	mov	r3, r1
   12c12:	2101      	movs	r1, #1
   12c14:	6e38      	ldr	r0, [r7, #96]	; 0x60
   12c16:	f004 fee3 	bl	179e0 <mp_seq_multiply>
        return mp_obj_new_str_from_vstr(lhs_type, &vstr);
   12c1a:	f107 0330 	add.w	r3, r7, #48	; 0x30
   12c1e:	4619      	mov	r1, r3
   12c20:	6d38      	ldr	r0, [r7, #80]	; 0x50
   12c22:	f002 fcbb 	bl	1559c <mp_obj_new_str_from_vstr>
   12c26:	4603      	mov	r3, r0
   12c28:	e0df      	b.n	12dea <mp_obj_str_binary_op+0x2da>
    // easy to "fix" this with a bit of extra logic below, but it costs code
    // size and execution time so we don't.

    const byte *rhs_data;
    size_t rhs_len;
    if (lhs_type == mp_obj_get_type(rhs_in)) {
   12c2a:	687b      	ldr	r3, [r7, #4]
   12c2c:	4618      	mov	r0, r3
   12c2e:	f7fa ff41 	bl	dab4 <mp_obj_get_type>
   12c32:	4602      	mov	r2, r0
   12c34:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   12c36:	429a      	cmp	r2, r3
   12c38:	d11b      	bne.n	12c72 <mp_obj_str_binary_op+0x162>
        GET_STR_DATA_LEN(rhs_in, rhs_data_, rhs_len_);
   12c3a:	687b      	ldr	r3, [r7, #4]
   12c3c:	4618      	mov	r0, r3
   12c3e:	f7ff fc2d 	bl	1249c <MP_OBJ_IS_QSTR>
   12c42:	4603      	mov	r3, r0
   12c44:	2b00      	cmp	r3, #0
   12c46:	d009      	beq.n	12c5c <mp_obj_str_binary_op+0x14c>
   12c48:	687b      	ldr	r3, [r7, #4]
   12c4a:	089b      	lsrs	r3, r3, #2
   12c4c:	f107 022c 	add.w	r2, r7, #44	; 0x2c
   12c50:	4611      	mov	r1, r2
   12c52:	4618      	mov	r0, r3
   12c54:	f7ee fb98 	bl	1388 <qstr_data>
   12c58:	6578      	str	r0, [r7, #84]	; 0x54
   12c5a:	e005      	b.n	12c68 <mp_obj_str_binary_op+0x158>
   12c5c:	687b      	ldr	r3, [r7, #4]
   12c5e:	689b      	ldr	r3, [r3, #8]
   12c60:	62fb      	str	r3, [r7, #44]	; 0x2c
   12c62:	687b      	ldr	r3, [r7, #4]
   12c64:	68db      	ldr	r3, [r3, #12]
   12c66:	657b      	str	r3, [r7, #84]	; 0x54
        rhs_data = rhs_data_;
   12c68:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   12c6a:	65fb      	str	r3, [r7, #92]	; 0x5c
        rhs_len = rhs_len_;
   12c6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   12c6e:	65bb      	str	r3, [r7, #88]	; 0x58
   12c70:	e01b      	b.n	12caa <mp_obj_str_binary_op+0x19a>
    } else if (lhs_type == &mp_type_bytes) {
   12c72:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   12c74:	4a63      	ldr	r2, [pc, #396]	; (12e04 <mp_obj_str_binary_op+0x2f4>)
   12c76:	4293      	cmp	r3, r2
   12c78:	d113      	bne.n	12ca2 <mp_obj_str_binary_op+0x192>
        mp_buffer_info_t bufinfo;
        if (!mp_get_buffer(rhs_in, &bufinfo, MP_BUFFER_READ)) {
   12c7a:	687b      	ldr	r3, [r7, #4]
   12c7c:	f107 0120 	add.w	r1, r7, #32
   12c80:	2201      	movs	r2, #1
   12c82:	4618      	mov	r0, r3
   12c84:	f7fb fb06 	bl	e294 <mp_get_buffer>
   12c88:	4603      	mov	r3, r0
   12c8a:	f083 0301 	eor.w	r3, r3, #1
   12c8e:	b2db      	uxtb	r3, r3
   12c90:	2b00      	cmp	r3, #0
   12c92:	d001      	beq.n	12c98 <mp_obj_str_binary_op+0x188>
            return MP_OBJ_NULL; // op not supported
   12c94:	2300      	movs	r3, #0
   12c96:	e0a8      	b.n	12dea <mp_obj_str_binary_op+0x2da>
        }
        rhs_data = bufinfo.buf;
   12c98:	6a3b      	ldr	r3, [r7, #32]
   12c9a:	65fb      	str	r3, [r7, #92]	; 0x5c
        rhs_len = bufinfo.len;
   12c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   12c9e:	65bb      	str	r3, [r7, #88]	; 0x58
   12ca0:	e003      	b.n	12caa <mp_obj_str_binary_op+0x19a>
    } else {
        // LHS is str and RHS has an incompatible type
        // (except if operation is EQUAL, but that's handled by mp_obj_equal)
        bad_implicit_conversion(rhs_in);
   12ca2:	687b      	ldr	r3, [r7, #4]
   12ca4:	4618      	mov	r0, r3
   12ca6:	f002 fdcd 	bl	15844 <bad_implicit_conversion>
    }

    switch (op) {
   12caa:	68fb      	ldr	r3, [r7, #12]
   12cac:	2b22      	cmp	r3, #34	; 0x22
   12cae:	f200 809b 	bhi.w	12de8 <mp_obj_str_binary_op+0x2d8>
   12cb2:	a201      	add	r2, pc, #4	; (adr r2, 12cb8 <mp_obj_str_binary_op+0x1a8>)
   12cb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   12cb8:	00012dcd 	.word	0x00012dcd
   12cbc:	00012dcd 	.word	0x00012dcd
   12cc0:	00012dcd 	.word	0x00012dcd
   12cc4:	00012dcd 	.word	0x00012dcd
   12cc8:	00012dcd 	.word	0x00012dcd
   12ccc:	00012de9 	.word	0x00012de9
   12cd0:	00012de9 	.word	0x00012de9
   12cd4:	00012de9 	.word	0x00012de9
   12cd8:	00012de9 	.word	0x00012de9
   12cdc:	00012de9 	.word	0x00012de9
   12ce0:	00012de9 	.word	0x00012de9
   12ce4:	00012de9 	.word	0x00012de9
   12ce8:	00012de9 	.word	0x00012de9
   12cec:	00012de9 	.word	0x00012de9
   12cf0:	00012d45 	.word	0x00012d45
   12cf4:	00012de9 	.word	0x00012de9
   12cf8:	00012de9 	.word	0x00012de9
   12cfc:	00012de9 	.word	0x00012de9
   12d00:	00012de9 	.word	0x00012de9
   12d04:	00012de9 	.word	0x00012de9
   12d08:	00012de9 	.word	0x00012de9
   12d0c:	00012de9 	.word	0x00012de9
   12d10:	00012de9 	.word	0x00012de9
   12d14:	00012de9 	.word	0x00012de9
   12d18:	00012de9 	.word	0x00012de9
   12d1c:	00012de9 	.word	0x00012de9
   12d20:	00012d45 	.word	0x00012d45
   12d24:	00012de9 	.word	0x00012de9
   12d28:	00012de9 	.word	0x00012de9
   12d2c:	00012de9 	.word	0x00012de9
   12d30:	00012de9 	.word	0x00012de9
   12d34:	00012de9 	.word	0x00012de9
   12d38:	00012de9 	.word	0x00012de9
   12d3c:	00012de9 	.word	0x00012de9
   12d40:	00012da7 	.word	0x00012da7
        case MP_BINARY_OP_ADD:
        case MP_BINARY_OP_INPLACE_ADD: {
            if (lhs_len == 0 && mp_obj_get_type(rhs_in) == lhs_type) {
   12d44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   12d46:	2b00      	cmp	r3, #0
   12d48:	d109      	bne.n	12d5e <mp_obj_str_binary_op+0x24e>
   12d4a:	687b      	ldr	r3, [r7, #4]
   12d4c:	4618      	mov	r0, r3
   12d4e:	f7fa feb1 	bl	dab4 <mp_obj_get_type>
   12d52:	4602      	mov	r2, r0
   12d54:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   12d56:	429a      	cmp	r2, r3
   12d58:	d101      	bne.n	12d5e <mp_obj_str_binary_op+0x24e>
                return rhs_in;
   12d5a:	687b      	ldr	r3, [r7, #4]
   12d5c:	e045      	b.n	12dea <mp_obj_str_binary_op+0x2da>
            }
            if (rhs_len == 0) {
   12d5e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   12d60:	2b00      	cmp	r3, #0
   12d62:	d101      	bne.n	12d68 <mp_obj_str_binary_op+0x258>
                return lhs_in;
   12d64:	68bb      	ldr	r3, [r7, #8]
   12d66:	e040      	b.n	12dea <mp_obj_str_binary_op+0x2da>
            }

            vstr_t vstr;
            vstr_init_len(&vstr, lhs_len + rhs_len);
   12d68:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
   12d6a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   12d6c:	441a      	add	r2, r3
   12d6e:	f107 0310 	add.w	r3, r7, #16
   12d72:	4611      	mov	r1, r2
   12d74:	4618      	mov	r0, r3
   12d76:	f7ee fba1 	bl	14bc <vstr_init_len>
            memcpy(vstr.buf, lhs_data, lhs_len);
   12d7a:	69bb      	ldr	r3, [r7, #24]
   12d7c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
   12d7e:	6e39      	ldr	r1, [r7, #96]	; 0x60
   12d80:	4618      	mov	r0, r3
   12d82:	f009 ff79 	bl	1cc78 <memcpy>
            memcpy(vstr.buf + lhs_len, rhs_data, rhs_len);
   12d86:	69ba      	ldr	r2, [r7, #24]
   12d88:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   12d8a:	4413      	add	r3, r2
   12d8c:	6dba      	ldr	r2, [r7, #88]	; 0x58
   12d8e:	6df9      	ldr	r1, [r7, #92]	; 0x5c
   12d90:	4618      	mov	r0, r3
   12d92:	f009 ff71 	bl	1cc78 <memcpy>
            return mp_obj_new_str_from_vstr(lhs_type, &vstr);
   12d96:	f107 0310 	add.w	r3, r7, #16
   12d9a:	4619      	mov	r1, r3
   12d9c:	6d38      	ldr	r0, [r7, #80]	; 0x50
   12d9e:	f002 fbfd 	bl	1559c <mp_obj_new_str_from_vstr>
   12da2:	4603      	mov	r3, r0
   12da4:	e021      	b.n	12dea <mp_obj_str_binary_op+0x2da>
        }

        case MP_BINARY_OP_CONTAINS:
            return mp_obj_new_bool(find_subbytes(lhs_data, lhs_len, rhs_data, rhs_len, 1) != NULL);
   12da6:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
   12da8:	2301      	movs	r3, #1
   12daa:	9300      	str	r3, [sp, #0]
   12dac:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   12dae:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
   12db0:	6e38      	ldr	r0, [r7, #96]	; 0x60
   12db2:	f7ff fe73 	bl	12a9c <find_subbytes>
   12db6:	4603      	mov	r3, r0
   12db8:	2b00      	cmp	r3, #0
   12dba:	bf14      	ite	ne
   12dbc:	2301      	movne	r3, #1
   12dbe:	2300      	moveq	r3, #0
   12dc0:	b2db      	uxtb	r3, r3
   12dc2:	4618      	mov	r0, r3
   12dc4:	f7ff fb8e 	bl	124e4 <mp_obj_new_bool>
   12dc8:	4603      	mov	r3, r0
   12dca:	e00e      	b.n	12dea <mp_obj_str_binary_op+0x2da>
        case MP_BINARY_OP_EQUAL: // This will be passed only for bytes, str is dealt with in mp_obj_equal()
        case MP_BINARY_OP_LESS:
        case MP_BINARY_OP_LESS_EQUAL:
        case MP_BINARY_OP_MORE:
        case MP_BINARY_OP_MORE_EQUAL:
            return mp_obj_new_bool(mp_seq_cmp_bytes(op, lhs_data, lhs_len, rhs_data, rhs_len));
   12dcc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
   12dce:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   12dd0:	9300      	str	r3, [sp, #0]
   12dd2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
   12dd4:	6e39      	ldr	r1, [r7, #96]	; 0x60
   12dd6:	68f8      	ldr	r0, [r7, #12]
   12dd8:	f004 fe66 	bl	17aa8 <mp_seq_cmp_bytes>
   12ddc:	4603      	mov	r3, r0
   12dde:	4618      	mov	r0, r3
   12de0:	f7ff fb80 	bl	124e4 <mp_obj_new_bool>
   12de4:	4603      	mov	r3, r0
   12de6:	e000      	b.n	12dea <mp_obj_str_binary_op+0x2da>

        default:
            return MP_OBJ_NULL; // op not supported
   12de8:	2300      	movs	r3, #0
    }
}
   12dea:	4618      	mov	r0, r3
   12dec:	3768      	adds	r7, #104	; 0x68
   12dee:	46bd      	mov	sp, r7
   12df0:	bd80      	pop	{r7, pc}
   12df2:	bf00      	nop
   12df4:	00023d90 	.word	0x00023d90
   12df8:	0002201c 	.word	0x0002201c
   12dfc:	00023b0c 	.word	0x00023b0c
   12e00:	00023b88 	.word	0x00023b88
   12e04:	00023b48 	.word	0x00023b48

00012e08 <str_index_to_ptr>:

#if !MICROPY_PY_BUILTINS_STR_UNICODE
// objstrunicode defines own version
const byte *str_index_to_ptr(const mp_obj_type_t *type, const byte *self_data, size_t self_len,
                             mp_obj_t index, bool is_slice) {
   12e08:	b580      	push	{r7, lr}
   12e0a:	b086      	sub	sp, #24
   12e0c:	af00      	add	r7, sp, #0
   12e0e:	60f8      	str	r0, [r7, #12]
   12e10:	60b9      	str	r1, [r7, #8]
   12e12:	607a      	str	r2, [r7, #4]
   12e14:	603b      	str	r3, [r7, #0]
    size_t index_val = mp_get_index(type, self_len, index, is_slice);
   12e16:	f897 3020 	ldrb.w	r3, [r7, #32]
   12e1a:	683a      	ldr	r2, [r7, #0]
   12e1c:	6879      	ldr	r1, [r7, #4]
   12e1e:	68f8      	ldr	r0, [r7, #12]
   12e20:	f7fb f912 	bl	e048 <mp_get_index>
   12e24:	6178      	str	r0, [r7, #20]
    return self_data + index_val;
   12e26:	68ba      	ldr	r2, [r7, #8]
   12e28:	697b      	ldr	r3, [r7, #20]
   12e2a:	4413      	add	r3, r2
}
   12e2c:	4618      	mov	r0, r3
   12e2e:	3718      	adds	r7, #24
   12e30:	46bd      	mov	sp, r7
   12e32:	bd80      	pop	{r7, pc}

00012e34 <bytes_subscr>:
#endif

// This is used for both bytes and 8-bit strings. This is not used for unicode strings.
STATIC mp_obj_t bytes_subscr(mp_obj_t self_in, mp_obj_t index, mp_obj_t value) {
   12e34:	b580      	push	{r7, lr}
   12e36:	b088      	sub	sp, #32
   12e38:	af00      	add	r7, sp, #0
   12e3a:	60f8      	str	r0, [r7, #12]
   12e3c:	60b9      	str	r1, [r7, #8]
   12e3e:	607a      	str	r2, [r7, #4]
    mp_obj_type_t *type = mp_obj_get_type(self_in);
   12e40:	68f8      	ldr	r0, [r7, #12]
   12e42:	f7fa fe37 	bl	dab4 <mp_obj_get_type>
   12e46:	61b8      	str	r0, [r7, #24]
    GET_STR_DATA_LEN(self_in, self_data, self_len);
   12e48:	68f8      	ldr	r0, [r7, #12]
   12e4a:	f7ff fb27 	bl	1249c <MP_OBJ_IS_QSTR>
   12e4e:	4603      	mov	r3, r0
   12e50:	2b00      	cmp	r3, #0
   12e52:	d009      	beq.n	12e68 <bytes_subscr+0x34>
   12e54:	68fb      	ldr	r3, [r7, #12]
   12e56:	089b      	lsrs	r3, r3, #2
   12e58:	f107 0210 	add.w	r2, r7, #16
   12e5c:	4611      	mov	r1, r2
   12e5e:	4618      	mov	r0, r3
   12e60:	f7ee fa92 	bl	1388 <qstr_data>
   12e64:	61f8      	str	r0, [r7, #28]
   12e66:	e005      	b.n	12e74 <bytes_subscr+0x40>
   12e68:	68fb      	ldr	r3, [r7, #12]
   12e6a:	689b      	ldr	r3, [r3, #8]
   12e6c:	613b      	str	r3, [r7, #16]
   12e6e:	68fb      	ldr	r3, [r7, #12]
   12e70:	68db      	ldr	r3, [r3, #12]
   12e72:	61fb      	str	r3, [r7, #28]
    if (value == MP_OBJ_SENTINEL) {
   12e74:	687b      	ldr	r3, [r7, #4]
   12e76:	2b08      	cmp	r3, #8
   12e78:	d11b      	bne.n	12eb2 <bytes_subscr+0x7e>
                mp_raise_NotImplementedError("only slices with step=1 (aka None) are supported");
            }
            return mp_obj_new_str_of_type(type, self_data + slice.start, slice.stop - slice.start);
        }
#endif
        size_t index_val = mp_get_index(type, self_len, index, false);
   12e7a:	6939      	ldr	r1, [r7, #16]
   12e7c:	2300      	movs	r3, #0
   12e7e:	68ba      	ldr	r2, [r7, #8]
   12e80:	69b8      	ldr	r0, [r7, #24]
   12e82:	f7fb f8e1 	bl	e048 <mp_get_index>
   12e86:	6178      	str	r0, [r7, #20]
        // If we have unicode enabled the type will always be bytes, so take the short cut.
        if (MICROPY_PY_BUILTINS_STR_UNICODE || type == &mp_type_bytes) {
   12e88:	69bb      	ldr	r3, [r7, #24]
   12e8a:	4a0c      	ldr	r2, [pc, #48]	; (12ebc <bytes_subscr+0x88>)
   12e8c:	4293      	cmp	r3, r2
   12e8e:	d107      	bne.n	12ea0 <bytes_subscr+0x6c>
            return MP_OBJ_NEW_SMALL_INT(self_data[index_val]);
   12e90:	69fa      	ldr	r2, [r7, #28]
   12e92:	697b      	ldr	r3, [r7, #20]
   12e94:	4413      	add	r3, r2
   12e96:	781b      	ldrb	r3, [r3, #0]
   12e98:	005b      	lsls	r3, r3, #1
   12e9a:	f043 0301 	orr.w	r3, r3, #1
   12e9e:	e009      	b.n	12eb4 <bytes_subscr+0x80>
        } else {
            return mp_obj_new_str_via_qstr((char*)&self_data[index_val], 1);
   12ea0:	69fa      	ldr	r2, [r7, #28]
   12ea2:	697b      	ldr	r3, [r7, #20]
   12ea4:	4413      	add	r3, r2
   12ea6:	2101      	movs	r1, #1
   12ea8:	4618      	mov	r0, r3
   12eaa:	f002 fb65 	bl	15578 <mp_obj_new_str_via_qstr>
   12eae:	4603      	mov	r3, r0
   12eb0:	e000      	b.n	12eb4 <bytes_subscr+0x80>
        }
    } else {
        return MP_OBJ_NULL; // op not supported
   12eb2:	2300      	movs	r3, #0
    }
}
   12eb4:	4618      	mov	r0, r3
   12eb6:	3720      	adds	r7, #32
   12eb8:	46bd      	mov	sp, r7
   12eba:	bd80      	pop	{r7, pc}
   12ebc:	00023b48 	.word	0x00023b48

00012ec0 <str_join>:

STATIC mp_obj_t str_join(mp_obj_t self_in, mp_obj_t arg) {
   12ec0:	b590      	push	{r4, r7, lr}
   12ec2:	b093      	sub	sp, #76	; 0x4c
   12ec4:	af00      	add	r7, sp, #0
   12ec6:	6078      	str	r0, [r7, #4]
   12ec8:	6039      	str	r1, [r7, #0]
    mp_check_self(MP_OBJ_IS_STR_OR_BYTES(self_in));
   12eca:	6878      	ldr	r0, [r7, #4]
   12ecc:	f7ff fae6 	bl	1249c <MP_OBJ_IS_QSTR>
   12ed0:	4603      	mov	r3, r0
   12ed2:	f083 0301 	eor.w	r3, r3, #1
   12ed6:	b2db      	uxtb	r3, r3
   12ed8:	2b00      	cmp	r3, #0
   12eda:	d015      	beq.n	12f08 <str_join+0x48>
   12edc:	6878      	ldr	r0, [r7, #4]
   12ede:	f7ff faef 	bl	124c0 <MP_OBJ_IS_OBJ>
   12ee2:	4603      	mov	r3, r0
   12ee4:	f083 0301 	eor.w	r3, r3, #1
   12ee8:	b2db      	uxtb	r3, r3
   12eea:	2b00      	cmp	r3, #0
   12eec:	d105      	bne.n	12efa <str_join+0x3a>
   12eee:	687b      	ldr	r3, [r7, #4]
   12ef0:	681b      	ldr	r3, [r3, #0]
   12ef2:	699b      	ldr	r3, [r3, #24]
   12ef4:	4a78      	ldr	r2, [pc, #480]	; (130d8 <str_join+0x218>)
   12ef6:	4293      	cmp	r3, r2
   12ef8:	d006      	beq.n	12f08 <str_join+0x48>
   12efa:	4b78      	ldr	r3, [pc, #480]	; (130dc <str_join+0x21c>)
   12efc:	4a78      	ldr	r2, [pc, #480]	; (130e0 <str_join+0x220>)
   12efe:	f240 11bb 	movw	r1, #443	; 0x1bb
   12f02:	4878      	ldr	r0, [pc, #480]	; (130e4 <str_join+0x224>)
   12f04:	f008 fbe4 	bl	1b6d0 <__assert_func>
    const mp_obj_type_t *self_type = mp_obj_get_type(self_in);
   12f08:	6878      	ldr	r0, [r7, #4]
   12f0a:	f7fa fdd3 	bl	dab4 <mp_obj_get_type>
   12f0e:	62b8      	str	r0, [r7, #40]	; 0x28

    // get separation string
    GET_STR_DATA_LEN(self_in, sep_str, sep_len);
   12f10:	6878      	ldr	r0, [r7, #4]
   12f12:	f7ff fac3 	bl	1249c <MP_OBJ_IS_QSTR>
   12f16:	4603      	mov	r3, r0
   12f18:	2b00      	cmp	r3, #0
   12f1a:	d009      	beq.n	12f30 <str_join+0x70>
   12f1c:	687b      	ldr	r3, [r7, #4]
   12f1e:	089b      	lsrs	r3, r3, #2
   12f20:	f107 0224 	add.w	r2, r7, #36	; 0x24
   12f24:	4611      	mov	r1, r2
   12f26:	4618      	mov	r0, r3
   12f28:	f7ee fa2e 	bl	1388 <qstr_data>
   12f2c:	6478      	str	r0, [r7, #68]	; 0x44
   12f2e:	e005      	b.n	12f3c <str_join+0x7c>
   12f30:	687b      	ldr	r3, [r7, #4]
   12f32:	689b      	ldr	r3, [r3, #8]
   12f34:	627b      	str	r3, [r7, #36]	; 0x24
   12f36:	687b      	ldr	r3, [r7, #4]
   12f38:	68db      	ldr	r3, [r3, #12]
   12f3a:	647b      	str	r3, [r7, #68]	; 0x44

    // process args
    size_t seq_len;
    mp_obj_t *seq_items;

    if (!MP_OBJ_IS_TYPE(arg, &mp_type_list) && !MP_OBJ_IS_TYPE(arg, &mp_type_tuple)) {
   12f3c:	683b      	ldr	r3, [r7, #0]
   12f3e:	4618      	mov	r0, r3
   12f40:	f7ff fabe 	bl	124c0 <MP_OBJ_IS_OBJ>
   12f44:	4603      	mov	r3, r0
   12f46:	f083 0301 	eor.w	r3, r3, #1
   12f4a:	b2db      	uxtb	r3, r3
   12f4c:	2b00      	cmp	r3, #0
   12f4e:	d104      	bne.n	12f5a <str_join+0x9a>
   12f50:	683b      	ldr	r3, [r7, #0]
   12f52:	681b      	ldr	r3, [r3, #0]
   12f54:	4a64      	ldr	r2, [pc, #400]	; (130e8 <str_join+0x228>)
   12f56:	4293      	cmp	r3, r2
   12f58:	d017      	beq.n	12f8a <str_join+0xca>
   12f5a:	683b      	ldr	r3, [r7, #0]
   12f5c:	4618      	mov	r0, r3
   12f5e:	f7ff faaf 	bl	124c0 <MP_OBJ_IS_OBJ>
   12f62:	4603      	mov	r3, r0
   12f64:	f083 0301 	eor.w	r3, r3, #1
   12f68:	b2db      	uxtb	r3, r3
   12f6a:	2b00      	cmp	r3, #0
   12f6c:	d104      	bne.n	12f78 <str_join+0xb8>
   12f6e:	683b      	ldr	r3, [r7, #0]
   12f70:	681b      	ldr	r3, [r3, #0]
   12f72:	4a5e      	ldr	r2, [pc, #376]	; (130ec <str_join+0x22c>)
   12f74:	4293      	cmp	r3, r2
   12f76:	d008      	beq.n	12f8a <str_join+0xca>
        // arg is not a list nor a tuple, try to convert it to a list
        // TODO: Try to optimize?
        arg = mp_type_list.make_new(&mp_type_list, 1, 0, &arg);
   12f78:	4b5b      	ldr	r3, [pc, #364]	; (130e8 <str_join+0x228>)
   12f7a:	68dc      	ldr	r4, [r3, #12]
   12f7c:	463b      	mov	r3, r7
   12f7e:	2200      	movs	r2, #0
   12f80:	2101      	movs	r1, #1
   12f82:	4859      	ldr	r0, [pc, #356]	; (130e8 <str_join+0x228>)
   12f84:	47a0      	blx	r4
   12f86:	4603      	mov	r3, r0
   12f88:	603b      	str	r3, [r7, #0]
    }
    mp_obj_get_array(arg, &seq_len, &seq_items);
   12f8a:	683b      	ldr	r3, [r7, #0]
   12f8c:	f107 021c 	add.w	r2, r7, #28
   12f90:	f107 0120 	add.w	r1, r7, #32
   12f94:	4618      	mov	r0, r3
   12f96:	f7fb f807 	bl	dfa8 <mp_obj_get_array>

    // count required length
    size_t required_len = 0;
   12f9a:	2300      	movs	r3, #0
   12f9c:	643b      	str	r3, [r7, #64]	; 0x40
    for (size_t i = 0; i < seq_len; i++) {
   12f9e:	2300      	movs	r3, #0
   12fa0:	63fb      	str	r3, [r7, #60]	; 0x3c
   12fa2:	e039      	b.n	13018 <str_join+0x158>
        if (mp_obj_get_type(seq_items[i]) != self_type) {
   12fa4:	69fa      	ldr	r2, [r7, #28]
   12fa6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   12fa8:	009b      	lsls	r3, r3, #2
   12faa:	4413      	add	r3, r2
   12fac:	681b      	ldr	r3, [r3, #0]
   12fae:	4618      	mov	r0, r3
   12fb0:	f7fa fd80 	bl	dab4 <mp_obj_get_type>
   12fb4:	4602      	mov	r2, r0
   12fb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
   12fb8:	429a      	cmp	r2, r3
   12fba:	d002      	beq.n	12fc2 <str_join+0x102>
            mp_raise_TypeError(
   12fbc:	484c      	ldr	r0, [pc, #304]	; (130f0 <str_join+0x230>)
   12fbe:	f7fa f919 	bl	d1f4 <mp_raise_TypeError>
                "join expects a list of str/bytes objects consistent with self object");
        }
        if (i > 0) {
   12fc2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   12fc4:	2b00      	cmp	r3, #0
   12fc6:	d003      	beq.n	12fd0 <str_join+0x110>
            required_len += sep_len;
   12fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   12fca:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   12fcc:	4413      	add	r3, r2
   12fce:	643b      	str	r3, [r7, #64]	; 0x40
        }
        GET_STR_LEN(seq_items[i], l);
   12fd0:	69fa      	ldr	r2, [r7, #28]
   12fd2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   12fd4:	009b      	lsls	r3, r3, #2
   12fd6:	4413      	add	r3, r2
   12fd8:	681b      	ldr	r3, [r3, #0]
   12fda:	4618      	mov	r0, r3
   12fdc:	f7ff fa5e 	bl	1249c <MP_OBJ_IS_QSTR>
   12fe0:	4603      	mov	r3, r0
   12fe2:	2b00      	cmp	r3, #0
   12fe4:	d00a      	beq.n	12ffc <str_join+0x13c>
   12fe6:	69fa      	ldr	r2, [r7, #28]
   12fe8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   12fea:	009b      	lsls	r3, r3, #2
   12fec:	4413      	add	r3, r2
   12fee:	681b      	ldr	r3, [r3, #0]
   12ff0:	089b      	lsrs	r3, r3, #2
   12ff2:	4618      	mov	r0, r3
   12ff4:	f7ee f9aa 	bl	134c <qstr_len>
   12ff8:	63b8      	str	r0, [r7, #56]	; 0x38
   12ffa:	e006      	b.n	1300a <str_join+0x14a>
   12ffc:	69fa      	ldr	r2, [r7, #28]
   12ffe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   13000:	009b      	lsls	r3, r3, #2
   13002:	4413      	add	r3, r2
   13004:	681b      	ldr	r3, [r3, #0]
   13006:	689b      	ldr	r3, [r3, #8]
   13008:	63bb      	str	r3, [r7, #56]	; 0x38
        required_len += l;
   1300a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   1300c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1300e:	4413      	add	r3, r2
   13010:	643b      	str	r3, [r7, #64]	; 0x40
    for (size_t i = 0; i < seq_len; i++) {
   13012:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   13014:	3301      	adds	r3, #1
   13016:	63fb      	str	r3, [r7, #60]	; 0x3c
   13018:	6a3b      	ldr	r3, [r7, #32]
   1301a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   1301c:	429a      	cmp	r2, r3
   1301e:	d3c1      	bcc.n	12fa4 <str_join+0xe4>
    }

    // make joined string
    vstr_t vstr;
    vstr_init_len(&vstr, required_len);
   13020:	f107 030c 	add.w	r3, r7, #12
   13024:	6c39      	ldr	r1, [r7, #64]	; 0x40
   13026:	4618      	mov	r0, r3
   13028:	f7ee fa48 	bl	14bc <vstr_init_len>
    byte *data = (byte*)vstr.buf;
   1302c:	697b      	ldr	r3, [r7, #20]
   1302e:	637b      	str	r3, [r7, #52]	; 0x34
    for (size_t i = 0; i < seq_len; i++) {
   13030:	2300      	movs	r3, #0
   13032:	633b      	str	r3, [r7, #48]	; 0x30
   13034:	e040      	b.n	130b8 <str_join+0x1f8>
        if (i > 0) {
   13036:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   13038:	2b00      	cmp	r3, #0
   1303a:	d009      	beq.n	13050 <str_join+0x190>
            memcpy(data, sep_str, sep_len);
   1303c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1303e:	461a      	mov	r2, r3
   13040:	6c79      	ldr	r1, [r7, #68]	; 0x44
   13042:	6b78      	ldr	r0, [r7, #52]	; 0x34
   13044:	f009 fe18 	bl	1cc78 <memcpy>
            data += sep_len;
   13048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1304a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   1304c:	4413      	add	r3, r2
   1304e:	637b      	str	r3, [r7, #52]	; 0x34
        }
        GET_STR_DATA_LEN(seq_items[i], s, l);
   13050:	69fa      	ldr	r2, [r7, #28]
   13052:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   13054:	009b      	lsls	r3, r3, #2
   13056:	4413      	add	r3, r2
   13058:	681b      	ldr	r3, [r3, #0]
   1305a:	4618      	mov	r0, r3
   1305c:	f7ff fa1e 	bl	1249c <MP_OBJ_IS_QSTR>
   13060:	4603      	mov	r3, r0
   13062:	2b00      	cmp	r3, #0
   13064:	d00d      	beq.n	13082 <str_join+0x1c2>
   13066:	69fa      	ldr	r2, [r7, #28]
   13068:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1306a:	009b      	lsls	r3, r3, #2
   1306c:	4413      	add	r3, r2
   1306e:	681b      	ldr	r3, [r3, #0]
   13070:	089b      	lsrs	r3, r3, #2
   13072:	f107 0208 	add.w	r2, r7, #8
   13076:	4611      	mov	r1, r2
   13078:	4618      	mov	r0, r3
   1307a:	f7ee f985 	bl	1388 <qstr_data>
   1307e:	62f8      	str	r0, [r7, #44]	; 0x2c
   13080:	e00d      	b.n	1309e <str_join+0x1de>
   13082:	69fa      	ldr	r2, [r7, #28]
   13084:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   13086:	009b      	lsls	r3, r3, #2
   13088:	4413      	add	r3, r2
   1308a:	681b      	ldr	r3, [r3, #0]
   1308c:	689b      	ldr	r3, [r3, #8]
   1308e:	60bb      	str	r3, [r7, #8]
   13090:	69fa      	ldr	r2, [r7, #28]
   13092:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   13094:	009b      	lsls	r3, r3, #2
   13096:	4413      	add	r3, r2
   13098:	681b      	ldr	r3, [r3, #0]
   1309a:	68db      	ldr	r3, [r3, #12]
   1309c:	62fb      	str	r3, [r7, #44]	; 0x2c
        memcpy(data, s, l);
   1309e:	68bb      	ldr	r3, [r7, #8]
   130a0:	461a      	mov	r2, r3
   130a2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
   130a4:	6b78      	ldr	r0, [r7, #52]	; 0x34
   130a6:	f009 fde7 	bl	1cc78 <memcpy>
        data += l;
   130aa:	68bb      	ldr	r3, [r7, #8]
   130ac:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   130ae:	4413      	add	r3, r2
   130b0:	637b      	str	r3, [r7, #52]	; 0x34
    for (size_t i = 0; i < seq_len; i++) {
   130b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   130b4:	3301      	adds	r3, #1
   130b6:	633b      	str	r3, [r7, #48]	; 0x30
   130b8:	6a3b      	ldr	r3, [r7, #32]
   130ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   130bc:	429a      	cmp	r2, r3
   130be:	d3ba      	bcc.n	13036 <str_join+0x176>
    }

    // return joined string
    return mp_obj_new_str_from_vstr(self_type, &vstr);
   130c0:	f107 030c 	add.w	r3, r7, #12
   130c4:	4619      	mov	r1, r3
   130c6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   130c8:	f002 fa68 	bl	1559c <mp_obj_new_str_from_vstr>
   130cc:	4603      	mov	r3, r0
}
   130ce:	4618      	mov	r0, r3
   130d0:	374c      	adds	r7, #76	; 0x4c
   130d2:	46bd      	mov	sp, r7
   130d4:	bd90      	pop	{r4, r7, pc}
   130d6:	bf00      	nop
   130d8:	00012b11 	.word	0x00012b11
   130dc:	000235ac 	.word	0x000235ac
   130e0:	00023bb8 	.word	0x00023bb8
   130e4:	00023634 	.word	0x00023634
   130e8:	00023114 	.word	0x00023114
   130ec:	00023d90 	.word	0x00023d90
   130f0:	00023648 	.word	0x00023648

000130f4 <mp_obj_str_split>:
MP_DEFINE_CONST_FUN_OBJ_2(str_join_obj, str_join);

mp_obj_t mp_obj_str_split(size_t n_args, const mp_obj_t *args) {
   130f4:	b580      	push	{r7, lr}
   130f6:	b08e      	sub	sp, #56	; 0x38
   130f8:	af00      	add	r7, sp, #0
   130fa:	6078      	str	r0, [r7, #4]
   130fc:	6039      	str	r1, [r7, #0]
    const mp_obj_type_t *self_type = mp_obj_get_type(args[0]);
   130fe:	683b      	ldr	r3, [r7, #0]
   13100:	681b      	ldr	r3, [r3, #0]
   13102:	4618      	mov	r0, r3
   13104:	f7fa fcd6 	bl	dab4 <mp_obj_get_type>
   13108:	62b8      	str	r0, [r7, #40]	; 0x28
    mp_int_t splits = -1;
   1310a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1310e:	637b      	str	r3, [r7, #52]	; 0x34
    mp_obj_t sep = mp_const_none;
   13110:	4b7b      	ldr	r3, [pc, #492]	; (13300 <mp_obj_str_split+0x20c>)
   13112:	633b      	str	r3, [r7, #48]	; 0x30
    if (n_args > 1) {
   13114:	687b      	ldr	r3, [r7, #4]
   13116:	2b01      	cmp	r3, #1
   13118:	d90c      	bls.n	13134 <mp_obj_str_split+0x40>
        sep = args[1];
   1311a:	683b      	ldr	r3, [r7, #0]
   1311c:	685b      	ldr	r3, [r3, #4]
   1311e:	633b      	str	r3, [r7, #48]	; 0x30
        if (n_args > 2) {
   13120:	687b      	ldr	r3, [r7, #4]
   13122:	2b02      	cmp	r3, #2
   13124:	d906      	bls.n	13134 <mp_obj_str_split+0x40>
            splits = mp_obj_get_int(args[2]);
   13126:	683b      	ldr	r3, [r7, #0]
   13128:	3308      	adds	r3, #8
   1312a:	681b      	ldr	r3, [r3, #0]
   1312c:	4618      	mov	r0, r3
   1312e:	f7fa fe9f 	bl	de70 <mp_obj_get_int>
   13132:	6378      	str	r0, [r7, #52]	; 0x34
        }
    }

    mp_obj_t res = mp_obj_new_list(0, NULL);
   13134:	2100      	movs	r1, #0
   13136:	2000      	movs	r0, #0
   13138:	f7fe fcea 	bl	11b10 <mp_obj_new_list>
   1313c:	6278      	str	r0, [r7, #36]	; 0x24
    GET_STR_DATA_LEN(args[0], s, len);
   1313e:	683b      	ldr	r3, [r7, #0]
   13140:	681b      	ldr	r3, [r3, #0]
   13142:	4618      	mov	r0, r3
   13144:	f7ff f9aa 	bl	1249c <MP_OBJ_IS_QSTR>
   13148:	4603      	mov	r3, r0
   1314a:	2b00      	cmp	r3, #0
   1314c:	d00a      	beq.n	13164 <mp_obj_str_split+0x70>
   1314e:	683b      	ldr	r3, [r7, #0]
   13150:	681b      	ldr	r3, [r3, #0]
   13152:	089b      	lsrs	r3, r3, #2
   13154:	f107 0210 	add.w	r2, r7, #16
   13158:	4611      	mov	r1, r2
   1315a:	4618      	mov	r0, r3
   1315c:	f7ee f914 	bl	1388 <qstr_data>
   13160:	62f8      	str	r0, [r7, #44]	; 0x2c
   13162:	e007      	b.n	13174 <mp_obj_str_split+0x80>
   13164:	683b      	ldr	r3, [r7, #0]
   13166:	681b      	ldr	r3, [r3, #0]
   13168:	689b      	ldr	r3, [r3, #8]
   1316a:	613b      	str	r3, [r7, #16]
   1316c:	683b      	ldr	r3, [r7, #0]
   1316e:	681b      	ldr	r3, [r3, #0]
   13170:	68db      	ldr	r3, [r3, #12]
   13172:	62fb      	str	r3, [r7, #44]	; 0x2c
    const byte *top = s + len;
   13174:	693b      	ldr	r3, [r7, #16]
   13176:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   13178:	4413      	add	r3, r2
   1317a:	623b      	str	r3, [r7, #32]

    if (sep == mp_const_none) {
   1317c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1317e:	4a60      	ldr	r2, [pc, #384]	; (13300 <mp_obj_str_split+0x20c>)
   13180:	4293      	cmp	r3, r2
   13182:	d167      	bne.n	13254 <mp_obj_str_split+0x160>
        // sep not given, so separate on whitespace

        // Initial whitespace is not counted as split, so we pre-do it
        while (s < top && unichar_isspace(*s)) s++;
   13184:	e002      	b.n	1318c <mp_obj_str_split+0x98>
   13186:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   13188:	3301      	adds	r3, #1
   1318a:	62fb      	str	r3, [r7, #44]	; 0x2c
   1318c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   1318e:	6a3b      	ldr	r3, [r7, #32]
   13190:	429a      	cmp	r2, r3
   13192:	d244      	bcs.n	1321e <mp_obj_str_split+0x12a>
   13194:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   13196:	781b      	ldrb	r3, [r3, #0]
   13198:	4618      	mov	r0, r3
   1319a:	f7ef f9ad 	bl	24f8 <unichar_isspace>
   1319e:	4603      	mov	r3, r0
   131a0:	2b00      	cmp	r3, #0
   131a2:	d1f0      	bne.n	13186 <mp_obj_str_split+0x92>
        while (s < top && splits != 0) {
   131a4:	e03b      	b.n	1321e <mp_obj_str_split+0x12a>
            const byte *start = s;
   131a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   131a8:	61fb      	str	r3, [r7, #28]
            while (s < top && !unichar_isspace(*s)) s++;
   131aa:	e002      	b.n	131b2 <mp_obj_str_split+0xbe>
   131ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   131ae:	3301      	adds	r3, #1
   131b0:	62fb      	str	r3, [r7, #44]	; 0x2c
   131b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   131b4:	6a3b      	ldr	r3, [r7, #32]
   131b6:	429a      	cmp	r2, r3
   131b8:	d20a      	bcs.n	131d0 <mp_obj_str_split+0xdc>
   131ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   131bc:	781b      	ldrb	r3, [r3, #0]
   131be:	4618      	mov	r0, r3
   131c0:	f7ef f99a 	bl	24f8 <unichar_isspace>
   131c4:	4603      	mov	r3, r0
   131c6:	f083 0301 	eor.w	r3, r3, #1
   131ca:	b2db      	uxtb	r3, r3
   131cc:	2b00      	cmp	r3, #0
   131ce:	d1ed      	bne.n	131ac <mp_obj_str_split+0xb8>
            mp_obj_list_append(res, mp_obj_new_str_of_type(self_type, start, s - start));
   131d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   131d2:	69fb      	ldr	r3, [r7, #28]
   131d4:	1ad3      	subs	r3, r2, r3
   131d6:	461a      	mov	r2, r3
   131d8:	69f9      	ldr	r1, [r7, #28]
   131da:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   131dc:	f002 f9b0 	bl	15540 <mp_obj_new_str_of_type>
   131e0:	4603      	mov	r3, r0
   131e2:	4619      	mov	r1, r3
   131e4:	6a78      	ldr	r0, [r7, #36]	; 0x24
   131e6:	f7fe f801 	bl	111ec <mp_obj_list_append>
            if (s >= top) {
   131ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   131ec:	6a3b      	ldr	r3, [r7, #32]
   131ee:	429a      	cmp	r2, r3
   131f0:	d21d      	bcs.n	1322e <mp_obj_str_split+0x13a>
                break;
            }
            while (s < top && unichar_isspace(*s)) s++;
   131f2:	e002      	b.n	131fa <mp_obj_str_split+0x106>
   131f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   131f6:	3301      	adds	r3, #1
   131f8:	62fb      	str	r3, [r7, #44]	; 0x2c
   131fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   131fc:	6a3b      	ldr	r3, [r7, #32]
   131fe:	429a      	cmp	r2, r3
   13200:	d207      	bcs.n	13212 <mp_obj_str_split+0x11e>
   13202:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   13204:	781b      	ldrb	r3, [r3, #0]
   13206:	4618      	mov	r0, r3
   13208:	f7ef f976 	bl	24f8 <unichar_isspace>
   1320c:	4603      	mov	r3, r0
   1320e:	2b00      	cmp	r3, #0
   13210:	d1f0      	bne.n	131f4 <mp_obj_str_split+0x100>
            if (splits > 0) {
   13212:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   13214:	2b00      	cmp	r3, #0
   13216:	dd02      	ble.n	1321e <mp_obj_str_split+0x12a>
                splits--;
   13218:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1321a:	3b01      	subs	r3, #1
   1321c:	637b      	str	r3, [r7, #52]	; 0x34
        while (s < top && splits != 0) {
   1321e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   13220:	6a3b      	ldr	r3, [r7, #32]
   13222:	429a      	cmp	r2, r3
   13224:	d204      	bcs.n	13230 <mp_obj_str_split+0x13c>
   13226:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   13228:	2b00      	cmp	r3, #0
   1322a:	d1bc      	bne.n	131a6 <mp_obj_str_split+0xb2>
   1322c:	e000      	b.n	13230 <mp_obj_str_split+0x13c>
                break;
   1322e:	bf00      	nop
            }
        }

        if (s < top) {
   13230:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   13232:	6a3b      	ldr	r3, [r7, #32]
   13234:	429a      	cmp	r2, r3
   13236:	d25d      	bcs.n	132f4 <mp_obj_str_split+0x200>
            mp_obj_list_append(res, mp_obj_new_str_of_type(self_type, s, top - s));
   13238:	6a3a      	ldr	r2, [r7, #32]
   1323a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1323c:	1ad3      	subs	r3, r2, r3
   1323e:	461a      	mov	r2, r3
   13240:	6af9      	ldr	r1, [r7, #44]	; 0x2c
   13242:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   13244:	f002 f97c 	bl	15540 <mp_obj_new_str_of_type>
   13248:	4603      	mov	r3, r0
   1324a:	4619      	mov	r1, r3
   1324c:	6a78      	ldr	r0, [r7, #36]	; 0x24
   1324e:	f7fd ffcd 	bl	111ec <mp_obj_list_append>
   13252:	e04f      	b.n	132f4 <mp_obj_str_split+0x200>
        }

    } else {
        // sep given
        if (mp_obj_get_type(sep) != self_type) {
   13254:	6b38      	ldr	r0, [r7, #48]	; 0x30
   13256:	f7fa fc2d 	bl	dab4 <mp_obj_get_type>
   1325a:	4602      	mov	r2, r0
   1325c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1325e:	429a      	cmp	r2, r3
   13260:	d002      	beq.n	13268 <mp_obj_str_split+0x174>
            bad_implicit_conversion(sep);
   13262:	6b38      	ldr	r0, [r7, #48]	; 0x30
   13264:	f002 faee 	bl	15844 <bad_implicit_conversion>
        }

        size_t sep_len;
        const char *sep_str = mp_obj_str_get_data(sep, &sep_len);
   13268:	f107 030c 	add.w	r3, r7, #12
   1326c:	4619      	mov	r1, r3
   1326e:	6b38      	ldr	r0, [r7, #48]	; 0x30
   13270:	f002 fb58 	bl	15924 <mp_obj_str_get_data>
   13274:	61b8      	str	r0, [r7, #24]

        if (sep_len == 0) {
   13276:	68fb      	ldr	r3, [r7, #12]
   13278:	2b00      	cmp	r3, #0
   1327a:	d102      	bne.n	13282 <mp_obj_str_split+0x18e>
            mp_raise_ValueError("empty separator");
   1327c:	4821      	ldr	r0, [pc, #132]	; (13304 <mp_obj_str_split+0x210>)
   1327e:	f7f9 ffaf 	bl	d1e0 <mp_raise_ValueError>
        }

        for (;;) {
            const byte *start = s;
   13282:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   13284:	617b      	str	r3, [r7, #20]
            for (;;) {
                if (splits == 0 || s + sep_len > top) {
   13286:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   13288:	2b00      	cmp	r3, #0
   1328a:	d005      	beq.n	13298 <mp_obj_str_split+0x1a4>
   1328c:	68fb      	ldr	r3, [r7, #12]
   1328e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   13290:	441a      	add	r2, r3
   13292:	6a3b      	ldr	r3, [r7, #32]
   13294:	429a      	cmp	r2, r3
   13296:	d902      	bls.n	1329e <mp_obj_str_split+0x1aa>
                    s = top;
   13298:	6a3b      	ldr	r3, [r7, #32]
   1329a:	62fb      	str	r3, [r7, #44]	; 0x2c
                    break;
   1329c:	e00d      	b.n	132ba <mp_obj_str_split+0x1c6>
                } else if (memcmp(s, sep_str, sep_len) == 0) {
   1329e:	68fb      	ldr	r3, [r7, #12]
   132a0:	461a      	mov	r2, r3
   132a2:	69b9      	ldr	r1, [r7, #24]
   132a4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   132a6:	f009 fdcf 	bl	1ce48 <memcmp>
   132aa:	4603      	mov	r3, r0
   132ac:	2b00      	cmp	r3, #0
   132ae:	d003      	beq.n	132b8 <mp_obj_str_split+0x1c4>
                    break;
                }
                s++;
   132b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   132b2:	3301      	adds	r3, #1
   132b4:	62fb      	str	r3, [r7, #44]	; 0x2c
            }
   132b6:	e7e6      	b.n	13286 <mp_obj_str_split+0x192>
                    break;
   132b8:	bf00      	nop
            mp_obj_list_append(res, mp_obj_new_str_of_type(self_type, start, s - start));
   132ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   132bc:	697b      	ldr	r3, [r7, #20]
   132be:	1ad3      	subs	r3, r2, r3
   132c0:	461a      	mov	r2, r3
   132c2:	6979      	ldr	r1, [r7, #20]
   132c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   132c6:	f002 f93b 	bl	15540 <mp_obj_new_str_of_type>
   132ca:	4603      	mov	r3, r0
   132cc:	4619      	mov	r1, r3
   132ce:	6a78      	ldr	r0, [r7, #36]	; 0x24
   132d0:	f7fd ff8c 	bl	111ec <mp_obj_list_append>
            if (s >= top) {
   132d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   132d6:	6a3b      	ldr	r3, [r7, #32]
   132d8:	429a      	cmp	r2, r3
   132da:	d20a      	bcs.n	132f2 <mp_obj_str_split+0x1fe>
                break;
            }
            s += sep_len;
   132dc:	68fb      	ldr	r3, [r7, #12]
   132de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   132e0:	4413      	add	r3, r2
   132e2:	62fb      	str	r3, [r7, #44]	; 0x2c
            if (splits > 0) {
   132e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   132e6:	2b00      	cmp	r3, #0
   132e8:	ddcb      	ble.n	13282 <mp_obj_str_split+0x18e>
                splits--;
   132ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   132ec:	3b01      	subs	r3, #1
   132ee:	637b      	str	r3, [r7, #52]	; 0x34
            }
        }
   132f0:	e7c7      	b.n	13282 <mp_obj_str_split+0x18e>
                break;
   132f2:	bf00      	nop
    }

    return res;
   132f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   132f6:	4618      	mov	r0, r3
   132f8:	3738      	adds	r7, #56	; 0x38
   132fa:	46bd      	mov	sp, r7
   132fc:	bd80      	pop	{r7, pc}
   132fe:	bf00      	nop
   13300:	0002345c 	.word	0x0002345c
   13304:	00023698 	.word	0x00023698

00013308 <str_rsplit>:
    return res;
}
MP_DEFINE_CONST_FUN_OBJ_KW(str_splitlines_obj, 1, str_splitlines);
#endif

STATIC mp_obj_t str_rsplit(size_t n_args, const mp_obj_t *args) {
   13308:	b590      	push	{r4, r7, lr}
   1330a:	b091      	sub	sp, #68	; 0x44
   1330c:	af00      	add	r7, sp, #0
   1330e:	6078      	str	r0, [r7, #4]
   13310:	6039      	str	r1, [r7, #0]
    if (n_args < 3) {
   13312:	687b      	ldr	r3, [r7, #4]
   13314:	2b02      	cmp	r3, #2
   13316:	d805      	bhi.n	13324 <str_rsplit+0x1c>
        // If we don't have split limit, it doesn't matter from which side
        // we split.
        return mp_obj_str_split(n_args, args);
   13318:	6839      	ldr	r1, [r7, #0]
   1331a:	6878      	ldr	r0, [r7, #4]
   1331c:	f7ff feea 	bl	130f4 <mp_obj_str_split>
   13320:	4603      	mov	r3, r0
   13322:	e0cc      	b.n	134be <str_rsplit+0x1b6>
    }
    const mp_obj_type_t *self_type = mp_obj_get_type(args[0]);
   13324:	683b      	ldr	r3, [r7, #0]
   13326:	681b      	ldr	r3, [r3, #0]
   13328:	4618      	mov	r0, r3
   1332a:	f7fa fbc3 	bl	dab4 <mp_obj_get_type>
   1332e:	62f8      	str	r0, [r7, #44]	; 0x2c
    mp_obj_t sep = args[1];
   13330:	683b      	ldr	r3, [r7, #0]
   13332:	685b      	ldr	r3, [r3, #4]
   13334:	62bb      	str	r3, [r7, #40]	; 0x28
    GET_STR_DATA_LEN(args[0], s, len);
   13336:	683b      	ldr	r3, [r7, #0]
   13338:	681b      	ldr	r3, [r3, #0]
   1333a:	4618      	mov	r0, r3
   1333c:	f7ff f8ae 	bl	1249c <MP_OBJ_IS_QSTR>
   13340:	4603      	mov	r3, r0
   13342:	2b00      	cmp	r3, #0
   13344:	d00a      	beq.n	1335c <str_rsplit+0x54>
   13346:	683b      	ldr	r3, [r7, #0]
   13348:	681b      	ldr	r3, [r3, #0]
   1334a:	089b      	lsrs	r3, r3, #2
   1334c:	f107 0210 	add.w	r2, r7, #16
   13350:	4611      	mov	r1, r2
   13352:	4618      	mov	r0, r3
   13354:	f7ee f818 	bl	1388 <qstr_data>
   13358:	63f8      	str	r0, [r7, #60]	; 0x3c
   1335a:	e007      	b.n	1336c <str_rsplit+0x64>
   1335c:	683b      	ldr	r3, [r7, #0]
   1335e:	681b      	ldr	r3, [r3, #0]
   13360:	689b      	ldr	r3, [r3, #8]
   13362:	613b      	str	r3, [r7, #16]
   13364:	683b      	ldr	r3, [r7, #0]
   13366:	681b      	ldr	r3, [r3, #0]
   13368:	68db      	ldr	r3, [r3, #12]
   1336a:	63fb      	str	r3, [r7, #60]	; 0x3c

    mp_int_t splits = mp_obj_get_int(args[2]);
   1336c:	683b      	ldr	r3, [r7, #0]
   1336e:	3308      	adds	r3, #8
   13370:	681b      	ldr	r3, [r3, #0]
   13372:	4618      	mov	r0, r3
   13374:	f7fa fd7c 	bl	de70 <mp_obj_get_int>
   13378:	63b8      	str	r0, [r7, #56]	; 0x38
    if (splits < 0) {
   1337a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1337c:	2b00      	cmp	r3, #0
   1337e:	da05      	bge.n	1338c <str_rsplit+0x84>
        // Negative limit means no limit, so delegate to split().
        return mp_obj_str_split(n_args, args);
   13380:	6839      	ldr	r1, [r7, #0]
   13382:	6878      	ldr	r0, [r7, #4]
   13384:	f7ff feb6 	bl	130f4 <mp_obj_str_split>
   13388:	4603      	mov	r3, r0
   1338a:	e098      	b.n	134be <str_rsplit+0x1b6>
    }

    mp_int_t org_splits = splits;
   1338c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1338e:	627b      	str	r3, [r7, #36]	; 0x24
    // Preallocate list to the max expected # of elements, as we
    // will fill it from the end.
    mp_obj_list_t *res = MP_OBJ_TO_PTR(mp_obj_new_list(splits + 1, NULL));
   13390:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   13392:	3301      	adds	r3, #1
   13394:	2100      	movs	r1, #0
   13396:	4618      	mov	r0, r3
   13398:	f7fe fbba 	bl	11b10 <mp_obj_new_list>
   1339c:	6238      	str	r0, [r7, #32]
    mp_int_t idx = splits;
   1339e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   133a0:	637b      	str	r3, [r7, #52]	; 0x34

    if (sep == mp_const_none) {
   133a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   133a4:	4a48      	ldr	r2, [pc, #288]	; (134c8 <str_rsplit+0x1c0>)
   133a6:	4293      	cmp	r3, r2
   133a8:	d102      	bne.n	133b0 <str_rsplit+0xa8>
        mp_raise_NotImplementedError("rsplit(None,n)");
   133aa:	4848      	ldr	r0, [pc, #288]	; (134cc <str_rsplit+0x1c4>)
   133ac:	f7f9 ff3e 	bl	d22c <mp_raise_NotImplementedError>
    } else {
        size_t sep_len;
        const char *sep_str = mp_obj_str_get_data(sep, &sep_len);
   133b0:	f107 030c 	add.w	r3, r7, #12
   133b4:	4619      	mov	r1, r3
   133b6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   133b8:	f002 fab4 	bl	15924 <mp_obj_str_get_data>
   133bc:	61f8      	str	r0, [r7, #28]

        if (sep_len == 0) {
   133be:	68fb      	ldr	r3, [r7, #12]
   133c0:	2b00      	cmp	r3, #0
   133c2:	d102      	bne.n	133ca <str_rsplit+0xc2>
            mp_raise_ValueError("empty separator");
   133c4:	4842      	ldr	r0, [pc, #264]	; (134d0 <str_rsplit+0x1c8>)
   133c6:	f7f9 ff0b 	bl	d1e0 <mp_raise_ValueError>
        }

        const byte *beg = s;
   133ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   133cc:	61bb      	str	r3, [r7, #24]
        const byte *last = s + len;
   133ce:	693b      	ldr	r3, [r7, #16]
   133d0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   133d2:	4413      	add	r3, r2
   133d4:	633b      	str	r3, [r7, #48]	; 0x30
        for (;;) {
            s = last - sep_len;
   133d6:	68fb      	ldr	r3, [r7, #12]
   133d8:	425b      	negs	r3, r3
   133da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   133dc:	4413      	add	r3, r2
   133de:	63fb      	str	r3, [r7, #60]	; 0x3c
            for (;;) {
                if (splits == 0 || s < beg) {
   133e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   133e2:	2b00      	cmp	r3, #0
   133e4:	d011      	beq.n	1340a <str_rsplit+0x102>
   133e6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   133e8:	69bb      	ldr	r3, [r7, #24]
   133ea:	429a      	cmp	r2, r3
   133ec:	d30d      	bcc.n	1340a <str_rsplit+0x102>
                    break;
                } else if (memcmp(s, sep_str, sep_len) == 0) {
   133ee:	68fb      	ldr	r3, [r7, #12]
   133f0:	461a      	mov	r2, r3
   133f2:	69f9      	ldr	r1, [r7, #28]
   133f4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
   133f6:	f009 fd27 	bl	1ce48 <memcmp>
   133fa:	4603      	mov	r3, r0
   133fc:	2b00      	cmp	r3, #0
   133fe:	d003      	beq.n	13408 <str_rsplit+0x100>
                    break;
                }
                s--;
   13400:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   13402:	3b01      	subs	r3, #1
   13404:	63fb      	str	r3, [r7, #60]	; 0x3c
            }
   13406:	e7eb      	b.n	133e0 <str_rsplit+0xd8>
                    break;
   13408:	bf00      	nop
            if (s < beg || splits == 0) {
   1340a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   1340c:	69bb      	ldr	r3, [r7, #24]
   1340e:	429a      	cmp	r2, r3
   13410:	d302      	bcc.n	13418 <str_rsplit+0x110>
   13412:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   13414:	2b00      	cmp	r3, #0
   13416:	d113      	bne.n	13440 <str_rsplit+0x138>
                res->items[idx] = mp_obj_new_str_of_type(self_type, beg, last - beg);
   13418:	6a3b      	ldr	r3, [r7, #32]
   1341a:	68da      	ldr	r2, [r3, #12]
   1341c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1341e:	009b      	lsls	r3, r3, #2
   13420:	18d4      	adds	r4, r2, r3
   13422:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   13424:	69bb      	ldr	r3, [r7, #24]
   13426:	1ad3      	subs	r3, r2, r3
   13428:	461a      	mov	r2, r3
   1342a:	69b9      	ldr	r1, [r7, #24]
   1342c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   1342e:	f002 f887 	bl	15540 <mp_obj_new_str_of_type>
   13432:	4603      	mov	r3, r0
   13434:	6023      	str	r3, [r4, #0]
                break;
   13436:	bf00      	nop
            }
            res->items[idx--] = mp_obj_new_str_of_type(self_type, s + sep_len, last - s - sep_len);
            last = s;
            splits--;
        }
        if (idx != 0) {
   13438:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1343a:	2b00      	cmp	r3, #0
   1343c:	d03e      	beq.n	134bc <str_rsplit+0x1b4>
   1343e:	e01b      	b.n	13478 <str_rsplit+0x170>
            res->items[idx--] = mp_obj_new_str_of_type(self_type, s + sep_len, last - s - sep_len);
   13440:	6a3b      	ldr	r3, [r7, #32]
   13442:	68da      	ldr	r2, [r3, #12]
   13444:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   13446:	1e59      	subs	r1, r3, #1
   13448:	6379      	str	r1, [r7, #52]	; 0x34
   1344a:	009b      	lsls	r3, r3, #2
   1344c:	18d4      	adds	r4, r2, r3
   1344e:	68fb      	ldr	r3, [r7, #12]
   13450:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   13452:	18d1      	adds	r1, r2, r3
   13454:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   13456:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   13458:	1ad3      	subs	r3, r2, r3
   1345a:	461a      	mov	r2, r3
   1345c:	68fb      	ldr	r3, [r7, #12]
   1345e:	1ad3      	subs	r3, r2, r3
   13460:	461a      	mov	r2, r3
   13462:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   13464:	f002 f86c 	bl	15540 <mp_obj_new_str_of_type>
   13468:	4603      	mov	r3, r0
   1346a:	6023      	str	r3, [r4, #0]
            last = s;
   1346c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1346e:	633b      	str	r3, [r7, #48]	; 0x30
            splits--;
   13470:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   13472:	3b01      	subs	r3, #1
   13474:	63bb      	str	r3, [r7, #56]	; 0x38
        }
   13476:	e7ae      	b.n	133d6 <str_rsplit+0xce>
            // We split less parts than split limit, now go cleanup surplus
            size_t used = org_splits + 1 - idx;
   13478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1347a:	1c5a      	adds	r2, r3, #1
   1347c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1347e:	1ad3      	subs	r3, r2, r3
   13480:	617b      	str	r3, [r7, #20]
            memmove(res->items, &res->items[idx], used * sizeof(mp_obj_t));
   13482:	6a3b      	ldr	r3, [r7, #32]
   13484:	68d8      	ldr	r0, [r3, #12]
   13486:	6a3b      	ldr	r3, [r7, #32]
   13488:	68da      	ldr	r2, [r3, #12]
   1348a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1348c:	009b      	lsls	r3, r3, #2
   1348e:	18d1      	adds	r1, r2, r3
   13490:	697b      	ldr	r3, [r7, #20]
   13492:	009b      	lsls	r3, r3, #2
   13494:	461a      	mov	r2, r3
   13496:	f009 fc55 	bl	1cd44 <memmove>
            mp_seq_clear(res->items, used, res->alloc, sizeof(*res->items));
   1349a:	6a3b      	ldr	r3, [r7, #32]
   1349c:	68da      	ldr	r2, [r3, #12]
   1349e:	697b      	ldr	r3, [r7, #20]
   134a0:	009b      	lsls	r3, r3, #2
   134a2:	18d0      	adds	r0, r2, r3
   134a4:	6a3b      	ldr	r3, [r7, #32]
   134a6:	685a      	ldr	r2, [r3, #4]
   134a8:	697b      	ldr	r3, [r7, #20]
   134aa:	1ad3      	subs	r3, r2, r3
   134ac:	009b      	lsls	r3, r3, #2
   134ae:	461a      	mov	r2, r3
   134b0:	2100      	movs	r1, #0
   134b2:	f009 fc7d 	bl	1cdb0 <memset>
            res->len = used;
   134b6:	6a3b      	ldr	r3, [r7, #32]
   134b8:	697a      	ldr	r2, [r7, #20]
   134ba:	609a      	str	r2, [r3, #8]
        }
    }

    return MP_OBJ_FROM_PTR(res);
   134bc:	6a3b      	ldr	r3, [r7, #32]
}
   134be:	4618      	mov	r0, r3
   134c0:	3744      	adds	r7, #68	; 0x44
   134c2:	46bd      	mov	sp, r7
   134c4:	bd90      	pop	{r4, r7, pc}
   134c6:	bf00      	nop
   134c8:	0002345c 	.word	0x0002345c
   134cc:	000236b4 	.word	0x000236b4
   134d0:	00023698 	.word	0x00023698

000134d4 <str_finder>:
MP_DEFINE_CONST_FUN_OBJ_VAR_BETWEEN(str_rsplit_obj, 1, 3, str_rsplit);

STATIC mp_obj_t str_finder(size_t n_args, const mp_obj_t *args, int direction, bool is_index) {
   134d4:	b580      	push	{r7, lr}
   134d6:	b08e      	sub	sp, #56	; 0x38
   134d8:	af02      	add	r7, sp, #8
   134da:	60f8      	str	r0, [r7, #12]
   134dc:	60b9      	str	r1, [r7, #8]
   134de:	607a      	str	r2, [r7, #4]
   134e0:	70fb      	strb	r3, [r7, #3]
    const mp_obj_type_t *self_type = mp_obj_get_type(args[0]);
   134e2:	68bb      	ldr	r3, [r7, #8]
   134e4:	681b      	ldr	r3, [r3, #0]
   134e6:	4618      	mov	r0, r3
   134e8:	f7fa fae4 	bl	dab4 <mp_obj_get_type>
   134ec:	61f8      	str	r0, [r7, #28]
    mp_check_self(MP_OBJ_IS_STR_OR_BYTES(args[0]));
   134ee:	68bb      	ldr	r3, [r7, #8]
   134f0:	681b      	ldr	r3, [r3, #0]
   134f2:	4618      	mov	r0, r3
   134f4:	f7fe ffd2 	bl	1249c <MP_OBJ_IS_QSTR>
   134f8:	4603      	mov	r3, r0
   134fa:	f083 0301 	eor.w	r3, r3, #1
   134fe:	b2db      	uxtb	r3, r3
   13500:	2b00      	cmp	r3, #0
   13502:	d018      	beq.n	13536 <str_finder+0x62>
   13504:	68bb      	ldr	r3, [r7, #8]
   13506:	681b      	ldr	r3, [r3, #0]
   13508:	4618      	mov	r0, r3
   1350a:	f7fe ffd9 	bl	124c0 <MP_OBJ_IS_OBJ>
   1350e:	4603      	mov	r3, r0
   13510:	f083 0301 	eor.w	r3, r3, #1
   13514:	b2db      	uxtb	r3, r3
   13516:	2b00      	cmp	r3, #0
   13518:	d106      	bne.n	13528 <str_finder+0x54>
   1351a:	68bb      	ldr	r3, [r7, #8]
   1351c:	681b      	ldr	r3, [r3, #0]
   1351e:	681b      	ldr	r3, [r3, #0]
   13520:	699b      	ldr	r3, [r3, #24]
   13522:	4a56      	ldr	r2, [pc, #344]	; (1367c <str_finder+0x1a8>)
   13524:	4293      	cmp	r3, r2
   13526:	d006      	beq.n	13536 <str_finder+0x62>
   13528:	4b55      	ldr	r3, [pc, #340]	; (13680 <str_finder+0x1ac>)
   1352a:	4a56      	ldr	r2, [pc, #344]	; (13684 <str_finder+0x1b0>)
   1352c:	f240 21ab 	movw	r1, #683	; 0x2ab
   13530:	4855      	ldr	r0, [pc, #340]	; (13688 <str_finder+0x1b4>)
   13532:	f008 f8cd 	bl	1b6d0 <__assert_func>

    // check argument type
    if (mp_obj_get_type(args[1]) != self_type) {
   13536:	68bb      	ldr	r3, [r7, #8]
   13538:	3304      	adds	r3, #4
   1353a:	681b      	ldr	r3, [r3, #0]
   1353c:	4618      	mov	r0, r3
   1353e:	f7fa fab9 	bl	dab4 <mp_obj_get_type>
   13542:	4602      	mov	r2, r0
   13544:	69fb      	ldr	r3, [r7, #28]
   13546:	429a      	cmp	r2, r3
   13548:	d005      	beq.n	13556 <str_finder+0x82>
        bad_implicit_conversion(args[1]);
   1354a:	68bb      	ldr	r3, [r7, #8]
   1354c:	3304      	adds	r3, #4
   1354e:	681b      	ldr	r3, [r3, #0]
   13550:	4618      	mov	r0, r3
   13552:	f002 f977 	bl	15844 <bad_implicit_conversion>
    }

    GET_STR_DATA_LEN(args[0], haystack, haystack_len);
   13556:	68bb      	ldr	r3, [r7, #8]
   13558:	681b      	ldr	r3, [r3, #0]
   1355a:	4618      	mov	r0, r3
   1355c:	f7fe ff9e 	bl	1249c <MP_OBJ_IS_QSTR>
   13560:	4603      	mov	r3, r0
   13562:	2b00      	cmp	r3, #0
   13564:	d00a      	beq.n	1357c <str_finder+0xa8>
   13566:	68bb      	ldr	r3, [r7, #8]
   13568:	681b      	ldr	r3, [r3, #0]
   1356a:	089b      	lsrs	r3, r3, #2
   1356c:	f107 0214 	add.w	r2, r7, #20
   13570:	4611      	mov	r1, r2
   13572:	4618      	mov	r0, r3
   13574:	f7ed ff08 	bl	1388 <qstr_data>
   13578:	62f8      	str	r0, [r7, #44]	; 0x2c
   1357a:	e007      	b.n	1358c <str_finder+0xb8>
   1357c:	68bb      	ldr	r3, [r7, #8]
   1357e:	681b      	ldr	r3, [r3, #0]
   13580:	689b      	ldr	r3, [r3, #8]
   13582:	617b      	str	r3, [r7, #20]
   13584:	68bb      	ldr	r3, [r7, #8]
   13586:	681b      	ldr	r3, [r3, #0]
   13588:	68db      	ldr	r3, [r3, #12]
   1358a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GET_STR_DATA_LEN(args[1], needle, needle_len);
   1358c:	68bb      	ldr	r3, [r7, #8]
   1358e:	3304      	adds	r3, #4
   13590:	681b      	ldr	r3, [r3, #0]
   13592:	4618      	mov	r0, r3
   13594:	f7fe ff82 	bl	1249c <MP_OBJ_IS_QSTR>
   13598:	4603      	mov	r3, r0
   1359a:	2b00      	cmp	r3, #0
   1359c:	d00b      	beq.n	135b6 <str_finder+0xe2>
   1359e:	68bb      	ldr	r3, [r7, #8]
   135a0:	3304      	adds	r3, #4
   135a2:	681b      	ldr	r3, [r3, #0]
   135a4:	089b      	lsrs	r3, r3, #2
   135a6:	f107 0210 	add.w	r2, r7, #16
   135aa:	4611      	mov	r1, r2
   135ac:	4618      	mov	r0, r3
   135ae:	f7ed feeb 	bl	1388 <qstr_data>
   135b2:	62b8      	str	r0, [r7, #40]	; 0x28
   135b4:	e009      	b.n	135ca <str_finder+0xf6>
   135b6:	68bb      	ldr	r3, [r7, #8]
   135b8:	3304      	adds	r3, #4
   135ba:	681b      	ldr	r3, [r3, #0]
   135bc:	689b      	ldr	r3, [r3, #8]
   135be:	613b      	str	r3, [r7, #16]
   135c0:	68bb      	ldr	r3, [r7, #8]
   135c2:	3304      	adds	r3, #4
   135c4:	681b      	ldr	r3, [r3, #0]
   135c6:	68db      	ldr	r3, [r3, #12]
   135c8:	62bb      	str	r3, [r7, #40]	; 0x28

    const byte *start = haystack;
   135ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   135cc:	627b      	str	r3, [r7, #36]	; 0x24
    const byte *end = haystack + haystack_len;
   135ce:	697b      	ldr	r3, [r7, #20]
   135d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   135d2:	4413      	add	r3, r2
   135d4:	623b      	str	r3, [r7, #32]
    if (n_args >= 3 && args[2] != mp_const_none) {
   135d6:	68fb      	ldr	r3, [r7, #12]
   135d8:	2b02      	cmp	r3, #2
   135da:	d911      	bls.n	13600 <str_finder+0x12c>
   135dc:	68bb      	ldr	r3, [r7, #8]
   135de:	3308      	adds	r3, #8
   135e0:	681b      	ldr	r3, [r3, #0]
   135e2:	4a2a      	ldr	r2, [pc, #168]	; (1368c <str_finder+0x1b8>)
   135e4:	4293      	cmp	r3, r2
   135e6:	d00b      	beq.n	13600 <str_finder+0x12c>
        start = str_index_to_ptr(self_type, haystack, haystack_len, args[2], true);
   135e8:	697a      	ldr	r2, [r7, #20]
   135ea:	68bb      	ldr	r3, [r7, #8]
   135ec:	3308      	adds	r3, #8
   135ee:	6819      	ldr	r1, [r3, #0]
   135f0:	2301      	movs	r3, #1
   135f2:	9300      	str	r3, [sp, #0]
   135f4:	460b      	mov	r3, r1
   135f6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
   135f8:	69f8      	ldr	r0, [r7, #28]
   135fa:	f7ff fc05 	bl	12e08 <str_index_to_ptr>
   135fe:	6278      	str	r0, [r7, #36]	; 0x24
    }
    if (n_args >= 4 && args[3] != mp_const_none) {
   13600:	68fb      	ldr	r3, [r7, #12]
   13602:	2b03      	cmp	r3, #3
   13604:	d911      	bls.n	1362a <str_finder+0x156>
   13606:	68bb      	ldr	r3, [r7, #8]
   13608:	330c      	adds	r3, #12
   1360a:	681b      	ldr	r3, [r3, #0]
   1360c:	4a1f      	ldr	r2, [pc, #124]	; (1368c <str_finder+0x1b8>)
   1360e:	4293      	cmp	r3, r2
   13610:	d00b      	beq.n	1362a <str_finder+0x156>
        end = str_index_to_ptr(self_type, haystack, haystack_len, args[3], true);
   13612:	697a      	ldr	r2, [r7, #20]
   13614:	68bb      	ldr	r3, [r7, #8]
   13616:	330c      	adds	r3, #12
   13618:	6819      	ldr	r1, [r3, #0]
   1361a:	2301      	movs	r3, #1
   1361c:	9300      	str	r3, [sp, #0]
   1361e:	460b      	mov	r3, r1
   13620:	6af9      	ldr	r1, [r7, #44]	; 0x2c
   13622:	69f8      	ldr	r0, [r7, #28]
   13624:	f7ff fbf0 	bl	12e08 <str_index_to_ptr>
   13628:	6238      	str	r0, [r7, #32]
    }

    if (end < start) {
   1362a:	6a3a      	ldr	r2, [r7, #32]
   1362c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1362e:	429a      	cmp	r2, r3
   13630:	d310      	bcc.n	13654 <str_finder+0x180>
        goto out_error;
    }

    const byte *p = find_subbytes(start, end - start, needle, needle_len, direction);
   13632:	6a3a      	ldr	r2, [r7, #32]
   13634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   13636:	1ad3      	subs	r3, r2, r3
   13638:	4619      	mov	r1, r3
   1363a:	693a      	ldr	r2, [r7, #16]
   1363c:	687b      	ldr	r3, [r7, #4]
   1363e:	9300      	str	r3, [sp, #0]
   13640:	4613      	mov	r3, r2
   13642:	6aba      	ldr	r2, [r7, #40]	; 0x28
   13644:	6a78      	ldr	r0, [r7, #36]	; 0x24
   13646:	f7ff fa29 	bl	12a9c <find_subbytes>
   1364a:	61b8      	str	r0, [r7, #24]
    if (p == NULL) {
   1364c:	69bb      	ldr	r3, [r7, #24]
   1364e:	2b00      	cmp	r3, #0
   13650:	d10a      	bne.n	13668 <str_finder+0x194>
   13652:	e000      	b.n	13656 <str_finder+0x182>
        goto out_error;
   13654:	bf00      	nop
    out_error:
        // not found
        if (is_index) {
   13656:	78fb      	ldrb	r3, [r7, #3]
   13658:	2b00      	cmp	r3, #0
   1365a:	d002      	beq.n	13662 <str_finder+0x18e>
            mp_raise_ValueError("substring not found");
   1365c:	480c      	ldr	r0, [pc, #48]	; (13690 <str_finder+0x1bc>)
   1365e:	f7f9 fdbf 	bl	d1e0 <mp_raise_ValueError>
        } else {
            return MP_OBJ_NEW_SMALL_INT(-1);
   13662:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   13666:	e005      	b.n	13674 <str_finder+0x1a0>
        #if MICROPY_PY_BUILTINS_STR_UNICODE
        if (self_type == &mp_type_str) {
            return MP_OBJ_NEW_SMALL_INT(utf8_ptr_to_index(haystack, p));
        }
        #endif
        return MP_OBJ_NEW_SMALL_INT(p - haystack);
   13668:	69ba      	ldr	r2, [r7, #24]
   1366a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1366c:	1ad3      	subs	r3, r2, r3
   1366e:	005b      	lsls	r3, r3, #1
   13670:	f043 0301 	orr.w	r3, r3, #1
    }
}
   13674:	4618      	mov	r0, r3
   13676:	3730      	adds	r7, #48	; 0x30
   13678:	46bd      	mov	sp, r7
   1367a:	bd80      	pop	{r7, pc}
   1367c:	00012b11 	.word	0x00012b11
   13680:	000236d0 	.word	0x000236d0
   13684:	00023bc4 	.word	0x00023bc4
   13688:	00023634 	.word	0x00023634
   1368c:	0002345c 	.word	0x0002345c
   13690:	00023758 	.word	0x00023758

00013694 <str_find>:

STATIC mp_obj_t str_find(size_t n_args, const mp_obj_t *args) {
   13694:	b580      	push	{r7, lr}
   13696:	b082      	sub	sp, #8
   13698:	af00      	add	r7, sp, #0
   1369a:	6078      	str	r0, [r7, #4]
   1369c:	6039      	str	r1, [r7, #0]
    return str_finder(n_args, args, 1, false);
   1369e:	2300      	movs	r3, #0
   136a0:	2201      	movs	r2, #1
   136a2:	6839      	ldr	r1, [r7, #0]
   136a4:	6878      	ldr	r0, [r7, #4]
   136a6:	f7ff ff15 	bl	134d4 <str_finder>
   136aa:	4603      	mov	r3, r0
}
   136ac:	4618      	mov	r0, r3
   136ae:	3708      	adds	r7, #8
   136b0:	46bd      	mov	sp, r7
   136b2:	bd80      	pop	{r7, pc}

000136b4 <str_rfind>:
MP_DEFINE_CONST_FUN_OBJ_VAR_BETWEEN(str_find_obj, 2, 4, str_find);

STATIC mp_obj_t str_rfind(size_t n_args, const mp_obj_t *args) {
   136b4:	b580      	push	{r7, lr}
   136b6:	b082      	sub	sp, #8
   136b8:	af00      	add	r7, sp, #0
   136ba:	6078      	str	r0, [r7, #4]
   136bc:	6039      	str	r1, [r7, #0]
    return str_finder(n_args, args, -1, false);
   136be:	2300      	movs	r3, #0
   136c0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   136c4:	6839      	ldr	r1, [r7, #0]
   136c6:	6878      	ldr	r0, [r7, #4]
   136c8:	f7ff ff04 	bl	134d4 <str_finder>
   136cc:	4603      	mov	r3, r0
}
   136ce:	4618      	mov	r0, r3
   136d0:	3708      	adds	r7, #8
   136d2:	46bd      	mov	sp, r7
   136d4:	bd80      	pop	{r7, pc}
   136d6:	bf00      	nop

000136d8 <str_index>:
MP_DEFINE_CONST_FUN_OBJ_VAR_BETWEEN(str_rfind_obj, 2, 4, str_rfind);

STATIC mp_obj_t str_index(size_t n_args, const mp_obj_t *args) {
   136d8:	b580      	push	{r7, lr}
   136da:	b082      	sub	sp, #8
   136dc:	af00      	add	r7, sp, #0
   136de:	6078      	str	r0, [r7, #4]
   136e0:	6039      	str	r1, [r7, #0]
    return str_finder(n_args, args, 1, true);
   136e2:	2301      	movs	r3, #1
   136e4:	2201      	movs	r2, #1
   136e6:	6839      	ldr	r1, [r7, #0]
   136e8:	6878      	ldr	r0, [r7, #4]
   136ea:	f7ff fef3 	bl	134d4 <str_finder>
   136ee:	4603      	mov	r3, r0
}
   136f0:	4618      	mov	r0, r3
   136f2:	3708      	adds	r7, #8
   136f4:	46bd      	mov	sp, r7
   136f6:	bd80      	pop	{r7, pc}

000136f8 <str_rindex>:
MP_DEFINE_CONST_FUN_OBJ_VAR_BETWEEN(str_index_obj, 2, 4, str_index);

STATIC mp_obj_t str_rindex(size_t n_args, const mp_obj_t *args) {
   136f8:	b580      	push	{r7, lr}
   136fa:	b082      	sub	sp, #8
   136fc:	af00      	add	r7, sp, #0
   136fe:	6078      	str	r0, [r7, #4]
   13700:	6039      	str	r1, [r7, #0]
    return str_finder(n_args, args, -1, true);
   13702:	2301      	movs	r3, #1
   13704:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   13708:	6839      	ldr	r1, [r7, #0]
   1370a:	6878      	ldr	r0, [r7, #4]
   1370c:	f7ff fee2 	bl	134d4 <str_finder>
   13710:	4603      	mov	r3, r0
}
   13712:	4618      	mov	r0, r3
   13714:	3708      	adds	r7, #8
   13716:	46bd      	mov	sp, r7
   13718:	bd80      	pop	{r7, pc}
   1371a:	bf00      	nop

0001371c <str_startswith>:
MP_DEFINE_CONST_FUN_OBJ_VAR_BETWEEN(str_rindex_obj, 2, 4, str_rindex);

// TODO: (Much) more variety in args
STATIC mp_obj_t str_startswith(size_t n_args, const mp_obj_t *args) {
   1371c:	b580      	push	{r7, lr}
   1371e:	b08a      	sub	sp, #40	; 0x28
   13720:	af02      	add	r7, sp, #8
   13722:	6078      	str	r0, [r7, #4]
   13724:	6039      	str	r1, [r7, #0]
    const mp_obj_type_t *self_type = mp_obj_get_type(args[0]);
   13726:	683b      	ldr	r3, [r7, #0]
   13728:	681b      	ldr	r3, [r3, #0]
   1372a:	4618      	mov	r0, r3
   1372c:	f7fa f9c2 	bl	dab4 <mp_obj_get_type>
   13730:	6178      	str	r0, [r7, #20]
    GET_STR_DATA_LEN(args[0], str, str_len);
   13732:	683b      	ldr	r3, [r7, #0]
   13734:	681b      	ldr	r3, [r3, #0]
   13736:	4618      	mov	r0, r3
   13738:	f7fe feb0 	bl	1249c <MP_OBJ_IS_QSTR>
   1373c:	4603      	mov	r3, r0
   1373e:	2b00      	cmp	r3, #0
   13740:	d00a      	beq.n	13758 <str_startswith+0x3c>
   13742:	683b      	ldr	r3, [r7, #0]
   13744:	681b      	ldr	r3, [r3, #0]
   13746:	089b      	lsrs	r3, r3, #2
   13748:	f107 020c 	add.w	r2, r7, #12
   1374c:	4611      	mov	r1, r2
   1374e:	4618      	mov	r0, r3
   13750:	f7ed fe1a 	bl	1388 <qstr_data>
   13754:	61f8      	str	r0, [r7, #28]
   13756:	e007      	b.n	13768 <str_startswith+0x4c>
   13758:	683b      	ldr	r3, [r7, #0]
   1375a:	681b      	ldr	r3, [r3, #0]
   1375c:	689b      	ldr	r3, [r3, #8]
   1375e:	60fb      	str	r3, [r7, #12]
   13760:	683b      	ldr	r3, [r7, #0]
   13762:	681b      	ldr	r3, [r3, #0]
   13764:	68db      	ldr	r3, [r3, #12]
   13766:	61fb      	str	r3, [r7, #28]
    size_t prefix_len;
    const char *prefix = mp_obj_str_get_data(args[1], &prefix_len);
   13768:	683b      	ldr	r3, [r7, #0]
   1376a:	3304      	adds	r3, #4
   1376c:	681b      	ldr	r3, [r3, #0]
   1376e:	f107 0208 	add.w	r2, r7, #8
   13772:	4611      	mov	r1, r2
   13774:	4618      	mov	r0, r3
   13776:	f002 f8d5 	bl	15924 <mp_obj_str_get_data>
   1377a:	6138      	str	r0, [r7, #16]
    const byte *start = str;
   1377c:	69fb      	ldr	r3, [r7, #28]
   1377e:	61bb      	str	r3, [r7, #24]
    if (n_args > 2) {
   13780:	687b      	ldr	r3, [r7, #4]
   13782:	2b02      	cmp	r3, #2
   13784:	d90b      	bls.n	1379e <str_startswith+0x82>
        start = str_index_to_ptr(self_type, str, str_len, args[2], true);
   13786:	68fa      	ldr	r2, [r7, #12]
   13788:	683b      	ldr	r3, [r7, #0]
   1378a:	3308      	adds	r3, #8
   1378c:	6819      	ldr	r1, [r3, #0]
   1378e:	2301      	movs	r3, #1
   13790:	9300      	str	r3, [sp, #0]
   13792:	460b      	mov	r3, r1
   13794:	69f9      	ldr	r1, [r7, #28]
   13796:	6978      	ldr	r0, [r7, #20]
   13798:	f7ff fb36 	bl	12e08 <str_index_to_ptr>
   1379c:	61b8      	str	r0, [r7, #24]
    }
    if (prefix_len + (start - str) > str_len) {
   1379e:	69ba      	ldr	r2, [r7, #24]
   137a0:	69fb      	ldr	r3, [r7, #28]
   137a2:	1ad3      	subs	r3, r2, r3
   137a4:	461a      	mov	r2, r3
   137a6:	68bb      	ldr	r3, [r7, #8]
   137a8:	441a      	add	r2, r3
   137aa:	68fb      	ldr	r3, [r7, #12]
   137ac:	429a      	cmp	r2, r3
   137ae:	d901      	bls.n	137b4 <str_startswith+0x98>
        return mp_const_false;
   137b0:	4b0a      	ldr	r3, [pc, #40]	; (137dc <str_startswith+0xc0>)
   137b2:	e00f      	b.n	137d4 <str_startswith+0xb8>
    }
    return mp_obj_new_bool(memcmp(start, prefix, prefix_len) == 0);
   137b4:	68bb      	ldr	r3, [r7, #8]
   137b6:	461a      	mov	r2, r3
   137b8:	6939      	ldr	r1, [r7, #16]
   137ba:	69b8      	ldr	r0, [r7, #24]
   137bc:	f009 fb44 	bl	1ce48 <memcmp>
   137c0:	4603      	mov	r3, r0
   137c2:	2b00      	cmp	r3, #0
   137c4:	bf0c      	ite	eq
   137c6:	2301      	moveq	r3, #1
   137c8:	2300      	movne	r3, #0
   137ca:	b2db      	uxtb	r3, r3
   137cc:	4618      	mov	r0, r3
   137ce:	f7fe fe89 	bl	124e4 <mp_obj_new_bool>
   137d2:	4603      	mov	r3, r0
}
   137d4:	4618      	mov	r0, r3
   137d6:	3720      	adds	r7, #32
   137d8:	46bd      	mov	sp, r7
   137da:	bd80      	pop	{r7, pc}
   137dc:	00021b70 	.word	0x00021b70

000137e0 <str_endswith>:
MP_DEFINE_CONST_FUN_OBJ_VAR_BETWEEN(str_startswith_obj, 2, 3, str_startswith);

STATIC mp_obj_t str_endswith(size_t n_args, const mp_obj_t *args) {
   137e0:	b580      	push	{r7, lr}
   137e2:	b086      	sub	sp, #24
   137e4:	af00      	add	r7, sp, #0
   137e6:	6078      	str	r0, [r7, #4]
   137e8:	6039      	str	r1, [r7, #0]
    GET_STR_DATA_LEN(args[0], str, str_len);
   137ea:	683b      	ldr	r3, [r7, #0]
   137ec:	681b      	ldr	r3, [r3, #0]
   137ee:	4618      	mov	r0, r3
   137f0:	f7fe fe54 	bl	1249c <MP_OBJ_IS_QSTR>
   137f4:	4603      	mov	r3, r0
   137f6:	2b00      	cmp	r3, #0
   137f8:	d00a      	beq.n	13810 <str_endswith+0x30>
   137fa:	683b      	ldr	r3, [r7, #0]
   137fc:	681b      	ldr	r3, [r3, #0]
   137fe:	089b      	lsrs	r3, r3, #2
   13800:	f107 020c 	add.w	r2, r7, #12
   13804:	4611      	mov	r1, r2
   13806:	4618      	mov	r0, r3
   13808:	f7ed fdbe 	bl	1388 <qstr_data>
   1380c:	6178      	str	r0, [r7, #20]
   1380e:	e007      	b.n	13820 <str_endswith+0x40>
   13810:	683b      	ldr	r3, [r7, #0]
   13812:	681b      	ldr	r3, [r3, #0]
   13814:	689b      	ldr	r3, [r3, #8]
   13816:	60fb      	str	r3, [r7, #12]
   13818:	683b      	ldr	r3, [r7, #0]
   1381a:	681b      	ldr	r3, [r3, #0]
   1381c:	68db      	ldr	r3, [r3, #12]
   1381e:	617b      	str	r3, [r7, #20]
    size_t suffix_len;
    const char *suffix = mp_obj_str_get_data(args[1], &suffix_len);
   13820:	683b      	ldr	r3, [r7, #0]
   13822:	3304      	adds	r3, #4
   13824:	681b      	ldr	r3, [r3, #0]
   13826:	f107 0208 	add.w	r2, r7, #8
   1382a:	4611      	mov	r1, r2
   1382c:	4618      	mov	r0, r3
   1382e:	f002 f879 	bl	15924 <mp_obj_str_get_data>
   13832:	6138      	str	r0, [r7, #16]
    if (n_args > 2) {
   13834:	687b      	ldr	r3, [r7, #4]
   13836:	2b02      	cmp	r3, #2
   13838:	d902      	bls.n	13840 <str_endswith+0x60>
        mp_raise_NotImplementedError("start/end indices");
   1383a:	4810      	ldr	r0, [pc, #64]	; (1387c <str_endswith+0x9c>)
   1383c:	f7f9 fcf6 	bl	d22c <mp_raise_NotImplementedError>
    }

    if (suffix_len > str_len) {
   13840:	68ba      	ldr	r2, [r7, #8]
   13842:	68fb      	ldr	r3, [r7, #12]
   13844:	429a      	cmp	r2, r3
   13846:	d901      	bls.n	1384c <str_endswith+0x6c>
        return mp_const_false;
   13848:	4b0d      	ldr	r3, [pc, #52]	; (13880 <str_endswith+0xa0>)
   1384a:	e013      	b.n	13874 <str_endswith+0x94>
    }
    return mp_obj_new_bool(memcmp(str + (str_len - suffix_len), suffix, suffix_len) == 0);
   1384c:	68fa      	ldr	r2, [r7, #12]
   1384e:	68bb      	ldr	r3, [r7, #8]
   13850:	1ad3      	subs	r3, r2, r3
   13852:	697a      	ldr	r2, [r7, #20]
   13854:	4413      	add	r3, r2
   13856:	68ba      	ldr	r2, [r7, #8]
   13858:	6939      	ldr	r1, [r7, #16]
   1385a:	4618      	mov	r0, r3
   1385c:	f009 faf4 	bl	1ce48 <memcmp>
   13860:	4603      	mov	r3, r0
   13862:	2b00      	cmp	r3, #0
   13864:	bf0c      	ite	eq
   13866:	2301      	moveq	r3, #1
   13868:	2300      	movne	r3, #0
   1386a:	b2db      	uxtb	r3, r3
   1386c:	4618      	mov	r0, r3
   1386e:	f7fe fe39 	bl	124e4 <mp_obj_new_bool>
   13872:	4603      	mov	r3, r0
}
   13874:	4618      	mov	r0, r3
   13876:	3718      	adds	r7, #24
   13878:	46bd      	mov	sp, r7
   1387a:	bd80      	pop	{r7, pc}
   1387c:	000237a8 	.word	0x000237a8
   13880:	00021b70 	.word	0x00021b70

00013884 <str_uni_strip>:
MP_DEFINE_CONST_FUN_OBJ_VAR_BETWEEN(str_endswith_obj, 2, 3, str_endswith);

enum { LSTRIP, RSTRIP, STRIP };

STATIC mp_obj_t str_uni_strip(int type, size_t n_args, const mp_obj_t *args) {
   13884:	b580      	push	{r7, lr}
   13886:	b094      	sub	sp, #80	; 0x50
   13888:	af02      	add	r7, sp, #8
   1388a:	60f8      	str	r0, [r7, #12]
   1388c:	60b9      	str	r1, [r7, #8]
   1388e:	607a      	str	r2, [r7, #4]
    mp_check_self(MP_OBJ_IS_STR_OR_BYTES(args[0]));
   13890:	687b      	ldr	r3, [r7, #4]
   13892:	681b      	ldr	r3, [r3, #0]
   13894:	4618      	mov	r0, r3
   13896:	f7fe fe01 	bl	1249c <MP_OBJ_IS_QSTR>
   1389a:	4603      	mov	r3, r0
   1389c:	f083 0301 	eor.w	r3, r3, #1
   138a0:	b2db      	uxtb	r3, r3
   138a2:	2b00      	cmp	r3, #0
   138a4:	d018      	beq.n	138d8 <str_uni_strip+0x54>
   138a6:	687b      	ldr	r3, [r7, #4]
   138a8:	681b      	ldr	r3, [r3, #0]
   138aa:	4618      	mov	r0, r3
   138ac:	f7fe fe08 	bl	124c0 <MP_OBJ_IS_OBJ>
   138b0:	4603      	mov	r3, r0
   138b2:	f083 0301 	eor.w	r3, r3, #1
   138b6:	b2db      	uxtb	r3, r3
   138b8:	2b00      	cmp	r3, #0
   138ba:	d106      	bne.n	138ca <str_uni_strip+0x46>
   138bc:	687b      	ldr	r3, [r7, #4]
   138be:	681b      	ldr	r3, [r3, #0]
   138c0:	681b      	ldr	r3, [r3, #0]
   138c2:	699b      	ldr	r3, [r3, #24]
   138c4:	4a76      	ldr	r2, [pc, #472]	; (13aa0 <str_uni_strip+0x21c>)
   138c6:	4293      	cmp	r3, r2
   138c8:	d006      	beq.n	138d8 <str_uni_strip+0x54>
   138ca:	4b76      	ldr	r3, [pc, #472]	; (13aa4 <str_uni_strip+0x220>)
   138cc:	4a76      	ldr	r2, [pc, #472]	; (13aa8 <str_uni_strip+0x224>)
   138ce:	f240 310d 	movw	r1, #781	; 0x30d
   138d2:	4876      	ldr	r0, [pc, #472]	; (13aac <str_uni_strip+0x228>)
   138d4:	f007 fefc 	bl	1b6d0 <__assert_func>
    const mp_obj_type_t *self_type = mp_obj_get_type(args[0]);
   138d8:	687b      	ldr	r3, [r7, #4]
   138da:	681b      	ldr	r3, [r3, #0]
   138dc:	4618      	mov	r0, r3
   138de:	f7fa f8e9 	bl	dab4 <mp_obj_get_type>
   138e2:	61f8      	str	r0, [r7, #28]

    const byte *chars_to_del;
    uint chars_to_del_len;
    static const byte whitespace[] = " \t\n\r\v\f";

    if (n_args == 1) {
   138e4:	68bb      	ldr	r3, [r7, #8]
   138e6:	2b01      	cmp	r3, #1
   138e8:	d104      	bne.n	138f4 <str_uni_strip+0x70>
        chars_to_del = whitespace;
   138ea:	4b71      	ldr	r3, [pc, #452]	; (13ab0 <str_uni_strip+0x22c>)
   138ec:	647b      	str	r3, [r7, #68]	; 0x44
        chars_to_del_len = sizeof(whitespace) - 1;
   138ee:	2306      	movs	r3, #6
   138f0:	643b      	str	r3, [r7, #64]	; 0x40
   138f2:	e032      	b.n	1395a <str_uni_strip+0xd6>
    } else {
        if (mp_obj_get_type(args[1]) != self_type) {
   138f4:	687b      	ldr	r3, [r7, #4]
   138f6:	3304      	adds	r3, #4
   138f8:	681b      	ldr	r3, [r3, #0]
   138fa:	4618      	mov	r0, r3
   138fc:	f7fa f8da 	bl	dab4 <mp_obj_get_type>
   13900:	4602      	mov	r2, r0
   13902:	69fb      	ldr	r3, [r7, #28]
   13904:	429a      	cmp	r2, r3
   13906:	d005      	beq.n	13914 <str_uni_strip+0x90>
            bad_implicit_conversion(args[1]);
   13908:	687b      	ldr	r3, [r7, #4]
   1390a:	3304      	adds	r3, #4
   1390c:	681b      	ldr	r3, [r3, #0]
   1390e:	4618      	mov	r0, r3
   13910:	f001 ff98 	bl	15844 <bad_implicit_conversion>
        }
        GET_STR_DATA_LEN(args[1], s, l);
   13914:	687b      	ldr	r3, [r7, #4]
   13916:	3304      	adds	r3, #4
   13918:	681b      	ldr	r3, [r3, #0]
   1391a:	4618      	mov	r0, r3
   1391c:	f7fe fdbe 	bl	1249c <MP_OBJ_IS_QSTR>
   13920:	4603      	mov	r3, r0
   13922:	2b00      	cmp	r3, #0
   13924:	d00b      	beq.n	1393e <str_uni_strip+0xba>
   13926:	687b      	ldr	r3, [r7, #4]
   13928:	3304      	adds	r3, #4
   1392a:	681b      	ldr	r3, [r3, #0]
   1392c:	089b      	lsrs	r3, r3, #2
   1392e:	f107 0210 	add.w	r2, r7, #16
   13932:	4611      	mov	r1, r2
   13934:	4618      	mov	r0, r3
   13936:	f7ed fd27 	bl	1388 <qstr_data>
   1393a:	63f8      	str	r0, [r7, #60]	; 0x3c
   1393c:	e009      	b.n	13952 <str_uni_strip+0xce>
   1393e:	687b      	ldr	r3, [r7, #4]
   13940:	3304      	adds	r3, #4
   13942:	681b      	ldr	r3, [r3, #0]
   13944:	689b      	ldr	r3, [r3, #8]
   13946:	613b      	str	r3, [r7, #16]
   13948:	687b      	ldr	r3, [r7, #4]
   1394a:	3304      	adds	r3, #4
   1394c:	681b      	ldr	r3, [r3, #0]
   1394e:	68db      	ldr	r3, [r3, #12]
   13950:	63fb      	str	r3, [r7, #60]	; 0x3c
        chars_to_del = s;
   13952:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   13954:	647b      	str	r3, [r7, #68]	; 0x44
        chars_to_del_len = l;
   13956:	693b      	ldr	r3, [r7, #16]
   13958:	643b      	str	r3, [r7, #64]	; 0x40
    }

    GET_STR_DATA_LEN(args[0], orig_str, orig_str_len);
   1395a:	687b      	ldr	r3, [r7, #4]
   1395c:	681b      	ldr	r3, [r3, #0]
   1395e:	4618      	mov	r0, r3
   13960:	f7fe fd9c 	bl	1249c <MP_OBJ_IS_QSTR>
   13964:	4603      	mov	r3, r0
   13966:	2b00      	cmp	r3, #0
   13968:	d00a      	beq.n	13980 <str_uni_strip+0xfc>
   1396a:	687b      	ldr	r3, [r7, #4]
   1396c:	681b      	ldr	r3, [r3, #0]
   1396e:	089b      	lsrs	r3, r3, #2
   13970:	f107 0214 	add.w	r2, r7, #20
   13974:	4611      	mov	r1, r2
   13976:	4618      	mov	r0, r3
   13978:	f7ed fd06 	bl	1388 <qstr_data>
   1397c:	63b8      	str	r0, [r7, #56]	; 0x38
   1397e:	e007      	b.n	13990 <str_uni_strip+0x10c>
   13980:	687b      	ldr	r3, [r7, #4]
   13982:	681b      	ldr	r3, [r3, #0]
   13984:	689b      	ldr	r3, [r3, #8]
   13986:	617b      	str	r3, [r7, #20]
   13988:	687b      	ldr	r3, [r7, #4]
   1398a:	681b      	ldr	r3, [r3, #0]
   1398c:	68db      	ldr	r3, [r3, #12]
   1398e:	63bb      	str	r3, [r7, #56]	; 0x38

    size_t first_good_char_pos = 0;
   13990:	2300      	movs	r3, #0
   13992:	637b      	str	r3, [r7, #52]	; 0x34
    bool first_good_char_pos_set = false;
   13994:	2300      	movs	r3, #0
   13996:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    size_t last_good_char_pos = 0;
   1399a:	2300      	movs	r3, #0
   1399c:	62fb      	str	r3, [r7, #44]	; 0x2c
    size_t i = 0;
   1399e:	2300      	movs	r3, #0
   139a0:	62bb      	str	r3, [r7, #40]	; 0x28
    int delta = 1;
   139a2:	2301      	movs	r3, #1
   139a4:	627b      	str	r3, [r7, #36]	; 0x24
    if (type == RSTRIP) {
   139a6:	68fb      	ldr	r3, [r7, #12]
   139a8:	2b01      	cmp	r3, #1
   139aa:	d105      	bne.n	139b8 <str_uni_strip+0x134>
        i = orig_str_len - 1;
   139ac:	697b      	ldr	r3, [r7, #20]
   139ae:	3b01      	subs	r3, #1
   139b0:	62bb      	str	r3, [r7, #40]	; 0x28
        delta = -1;
   139b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   139b6:	627b      	str	r3, [r7, #36]	; 0x24
    }
    for (size_t len = orig_str_len; len > 0; len--) {
   139b8:	697b      	ldr	r3, [r7, #20]
   139ba:	623b      	str	r3, [r7, #32]
   139bc:	e030      	b.n	13a20 <str_uni_strip+0x19c>
        if (find_subbytes(chars_to_del, chars_to_del_len, &orig_str[i], 1, 1) == NULL) {
   139be:	6bba      	ldr	r2, [r7, #56]	; 0x38
   139c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
   139c2:	441a      	add	r2, r3
   139c4:	2301      	movs	r3, #1
   139c6:	9300      	str	r3, [sp, #0]
   139c8:	2301      	movs	r3, #1
   139ca:	6c39      	ldr	r1, [r7, #64]	; 0x40
   139cc:	6c78      	ldr	r0, [r7, #68]	; 0x44
   139ce:	f7ff f865 	bl	12a9c <find_subbytes>
   139d2:	4603      	mov	r3, r0
   139d4:	2b00      	cmp	r3, #0
   139d6:	d11c      	bne.n	13a12 <str_uni_strip+0x18e>
            if (!first_good_char_pos_set) {
   139d8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
   139dc:	f083 0301 	eor.w	r3, r3, #1
   139e0:	b2db      	uxtb	r3, r3
   139e2:	2b00      	cmp	r3, #0
   139e4:	d013      	beq.n	13a0e <str_uni_strip+0x18a>
                first_good_char_pos_set = true;
   139e6:	2301      	movs	r3, #1
   139e8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
                first_good_char_pos = i;
   139ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
   139ee:	637b      	str	r3, [r7, #52]	; 0x34
                if (type == LSTRIP) {
   139f0:	68fb      	ldr	r3, [r7, #12]
   139f2:	2b00      	cmp	r3, #0
   139f4:	d103      	bne.n	139fe <str_uni_strip+0x17a>
                    last_good_char_pos = orig_str_len - 1;
   139f6:	697b      	ldr	r3, [r7, #20]
   139f8:	3b01      	subs	r3, #1
   139fa:	62fb      	str	r3, [r7, #44]	; 0x2c
                    break;
   139fc:	e013      	b.n	13a26 <str_uni_strip+0x1a2>
                } else if (type == RSTRIP) {
   139fe:	68fb      	ldr	r3, [r7, #12]
   13a00:	2b01      	cmp	r3, #1
   13a02:	d104      	bne.n	13a0e <str_uni_strip+0x18a>
                    first_good_char_pos = 0;
   13a04:	2300      	movs	r3, #0
   13a06:	637b      	str	r3, [r7, #52]	; 0x34
                    last_good_char_pos = i;
   13a08:	6abb      	ldr	r3, [r7, #40]	; 0x28
   13a0a:	62fb      	str	r3, [r7, #44]	; 0x2c
                    break;
   13a0c:	e00b      	b.n	13a26 <str_uni_strip+0x1a2>
                }
            }
            last_good_char_pos = i;
   13a0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   13a10:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        i += delta;
   13a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   13a14:	6aba      	ldr	r2, [r7, #40]	; 0x28
   13a16:	4413      	add	r3, r2
   13a18:	62bb      	str	r3, [r7, #40]	; 0x28
    for (size_t len = orig_str_len; len > 0; len--) {
   13a1a:	6a3b      	ldr	r3, [r7, #32]
   13a1c:	3b01      	subs	r3, #1
   13a1e:	623b      	str	r3, [r7, #32]
   13a20:	6a3b      	ldr	r3, [r7, #32]
   13a22:	2b00      	cmp	r3, #0
   13a24:	d1cb      	bne.n	139be <str_uni_strip+0x13a>
    }

    if (!first_good_char_pos_set) {
   13a26:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
   13a2a:	f083 0301 	eor.w	r3, r3, #1
   13a2e:	b2db      	uxtb	r3, r3
   13a30:	2b00      	cmp	r3, #0
   13a32:	d007      	beq.n	13a44 <str_uni_strip+0x1c0>
        // string is all whitespace, return ''
        if (self_type == &mp_type_str) {
   13a34:	69fb      	ldr	r3, [r7, #28]
   13a36:	4a1f      	ldr	r2, [pc, #124]	; (13ab4 <str_uni_strip+0x230>)
   13a38:	4293      	cmp	r3, r2
   13a3a:	d101      	bne.n	13a40 <str_uni_strip+0x1bc>
            return MP_OBJ_NEW_QSTR(MP_QSTR_);
   13a3c:	2306      	movs	r3, #6
   13a3e:	e02b      	b.n	13a98 <str_uni_strip+0x214>
        } else {
            return mp_const_empty_bytes;
   13a40:	4b1d      	ldr	r3, [pc, #116]	; (13ab8 <str_uni_strip+0x234>)
   13a42:	e029      	b.n	13a98 <str_uni_strip+0x214>
        }
    }

    assert(last_good_char_pos >= first_good_char_pos);
   13a44:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   13a46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   13a48:	429a      	cmp	r2, r3
   13a4a:	d206      	bcs.n	13a5a <str_uni_strip+0x1d6>
   13a4c:	4b1b      	ldr	r3, [pc, #108]	; (13abc <str_uni_strip+0x238>)
   13a4e:	4a16      	ldr	r2, [pc, #88]	; (13aa8 <str_uni_strip+0x224>)
   13a50:	f240 3147 	movw	r1, #839	; 0x347
   13a54:	4815      	ldr	r0, [pc, #84]	; (13aac <str_uni_strip+0x228>)
   13a56:	f007 fe3b 	bl	1b6d0 <__assert_func>
    //+1 to accommodate the last character
    size_t stripped_len = last_good_char_pos - first_good_char_pos + 1;
   13a5a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   13a5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   13a5e:	1ad3      	subs	r3, r2, r3
   13a60:	3301      	adds	r3, #1
   13a62:	61bb      	str	r3, [r7, #24]
    if (stripped_len == orig_str_len) {
   13a64:	697b      	ldr	r3, [r7, #20]
   13a66:	69ba      	ldr	r2, [r7, #24]
   13a68:	429a      	cmp	r2, r3
   13a6a:	d10c      	bne.n	13a86 <str_uni_strip+0x202>
        // If nothing was stripped, don't bother to dup original string
        // TODO: watch out for this case when we'll get to bytearray.strip()
        assert(first_good_char_pos == 0);
   13a6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   13a6e:	2b00      	cmp	r3, #0
   13a70:	d006      	beq.n	13a80 <str_uni_strip+0x1fc>
   13a72:	4b13      	ldr	r3, [pc, #76]	; (13ac0 <str_uni_strip+0x23c>)
   13a74:	4a0c      	ldr	r2, [pc, #48]	; (13aa8 <str_uni_strip+0x224>)
   13a76:	f240 314d 	movw	r1, #845	; 0x34d
   13a7a:	480c      	ldr	r0, [pc, #48]	; (13aac <str_uni_strip+0x228>)
   13a7c:	f007 fe28 	bl	1b6d0 <__assert_func>
        return args[0];
   13a80:	687b      	ldr	r3, [r7, #4]
   13a82:	681b      	ldr	r3, [r3, #0]
   13a84:	e008      	b.n	13a98 <str_uni_strip+0x214>
    }
    return mp_obj_new_str_of_type(self_type, orig_str + first_good_char_pos, stripped_len);
   13a86:	6bba      	ldr	r2, [r7, #56]	; 0x38
   13a88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   13a8a:	4413      	add	r3, r2
   13a8c:	69ba      	ldr	r2, [r7, #24]
   13a8e:	4619      	mov	r1, r3
   13a90:	69f8      	ldr	r0, [r7, #28]
   13a92:	f001 fd55 	bl	15540 <mp_obj_new_str_of_type>
   13a96:	4603      	mov	r3, r0
}
   13a98:	4618      	mov	r0, r3
   13a9a:	3748      	adds	r7, #72	; 0x48
   13a9c:	46bd      	mov	sp, r7
   13a9e:	bd80      	pop	{r7, pc}
   13aa0:	00012b11 	.word	0x00012b11
   13aa4:	000236d0 	.word	0x000236d0
   13aa8:	00023bd0 	.word	0x00023bd0
   13aac:	00023634 	.word	0x00023634
   13ab0:	00023be0 	.word	0x00023be0
   13ab4:	00023b0c 	.word	0x00023b0c
   13ab8:	00023b88 	.word	0x00023b88
   13abc:	000237c8 	.word	0x000237c8
   13ac0:	000237f4 	.word	0x000237f4

00013ac4 <str_strip>:

STATIC mp_obj_t str_strip(size_t n_args, const mp_obj_t *args) {
   13ac4:	b580      	push	{r7, lr}
   13ac6:	b082      	sub	sp, #8
   13ac8:	af00      	add	r7, sp, #0
   13aca:	6078      	str	r0, [r7, #4]
   13acc:	6039      	str	r1, [r7, #0]
    return str_uni_strip(STRIP, n_args, args);
   13ace:	683a      	ldr	r2, [r7, #0]
   13ad0:	6879      	ldr	r1, [r7, #4]
   13ad2:	2002      	movs	r0, #2
   13ad4:	f7ff fed6 	bl	13884 <str_uni_strip>
   13ad8:	4603      	mov	r3, r0
}
   13ada:	4618      	mov	r0, r3
   13adc:	3708      	adds	r7, #8
   13ade:	46bd      	mov	sp, r7
   13ae0:	bd80      	pop	{r7, pc}
   13ae2:	bf00      	nop

00013ae4 <str_lstrip>:
MP_DEFINE_CONST_FUN_OBJ_VAR_BETWEEN(str_strip_obj, 1, 2, str_strip);

STATIC mp_obj_t str_lstrip(size_t n_args, const mp_obj_t *args) {
   13ae4:	b580      	push	{r7, lr}
   13ae6:	b082      	sub	sp, #8
   13ae8:	af00      	add	r7, sp, #0
   13aea:	6078      	str	r0, [r7, #4]
   13aec:	6039      	str	r1, [r7, #0]
    return str_uni_strip(LSTRIP, n_args, args);
   13aee:	683a      	ldr	r2, [r7, #0]
   13af0:	6879      	ldr	r1, [r7, #4]
   13af2:	2000      	movs	r0, #0
   13af4:	f7ff fec6 	bl	13884 <str_uni_strip>
   13af8:	4603      	mov	r3, r0
}
   13afa:	4618      	mov	r0, r3
   13afc:	3708      	adds	r7, #8
   13afe:	46bd      	mov	sp, r7
   13b00:	bd80      	pop	{r7, pc}
   13b02:	bf00      	nop

00013b04 <str_rstrip>:
MP_DEFINE_CONST_FUN_OBJ_VAR_BETWEEN(str_lstrip_obj, 1, 2, str_lstrip);

STATIC mp_obj_t str_rstrip(size_t n_args, const mp_obj_t *args) {
   13b04:	b580      	push	{r7, lr}
   13b06:	b082      	sub	sp, #8
   13b08:	af00      	add	r7, sp, #0
   13b0a:	6078      	str	r0, [r7, #4]
   13b0c:	6039      	str	r1, [r7, #0]
    return str_uni_strip(RSTRIP, n_args, args);
   13b0e:	683a      	ldr	r2, [r7, #0]
   13b10:	6879      	ldr	r1, [r7, #4]
   13b12:	2001      	movs	r0, #1
   13b14:	f7ff feb6 	bl	13884 <str_uni_strip>
   13b18:	4603      	mov	r3, r0
}
   13b1a:	4618      	mov	r0, r3
   13b1c:	3708      	adds	r7, #8
   13b1e:	46bd      	mov	sp, r7
   13b20:	bd80      	pop	{r7, pc}
   13b22:	bf00      	nop

00013b24 <str_to_int>:
MP_DEFINE_CONST_FUN_OBJ_2(str_center_obj, str_center);
#endif

// Takes an int arg, but only parses unsigned numbers, and only changes
// *num if at least one digit was parsed.
STATIC const char *str_to_int(const char *str, const char *top, int *num) {
   13b24:	b480      	push	{r7}
   13b26:	b085      	sub	sp, #20
   13b28:	af00      	add	r7, sp, #0
   13b2a:	60f8      	str	r0, [r7, #12]
   13b2c:	60b9      	str	r1, [r7, #8]
   13b2e:	607a      	str	r2, [r7, #4]
    if (str < top && '0' <= *str && *str <= '9') {
   13b30:	68fa      	ldr	r2, [r7, #12]
   13b32:	68bb      	ldr	r3, [r7, #8]
   13b34:	429a      	cmp	r2, r3
   13b36:	d226      	bcs.n	13b86 <str_to_int+0x62>
   13b38:	68fb      	ldr	r3, [r7, #12]
   13b3a:	781b      	ldrb	r3, [r3, #0]
   13b3c:	2b2f      	cmp	r3, #47	; 0x2f
   13b3e:	d922      	bls.n	13b86 <str_to_int+0x62>
   13b40:	68fb      	ldr	r3, [r7, #12]
   13b42:	781b      	ldrb	r3, [r3, #0]
   13b44:	2b39      	cmp	r3, #57	; 0x39
   13b46:	d81e      	bhi.n	13b86 <str_to_int+0x62>
        *num = 0;
   13b48:	687b      	ldr	r3, [r7, #4]
   13b4a:	2200      	movs	r2, #0
   13b4c:	601a      	str	r2, [r3, #0]
        do {
            *num = *num * 10 + (*str - '0');
   13b4e:	687b      	ldr	r3, [r7, #4]
   13b50:	681a      	ldr	r2, [r3, #0]
   13b52:	4613      	mov	r3, r2
   13b54:	009b      	lsls	r3, r3, #2
   13b56:	4413      	add	r3, r2
   13b58:	005b      	lsls	r3, r3, #1
   13b5a:	461a      	mov	r2, r3
   13b5c:	68fb      	ldr	r3, [r7, #12]
   13b5e:	781b      	ldrb	r3, [r3, #0]
   13b60:	3b30      	subs	r3, #48	; 0x30
   13b62:	441a      	add	r2, r3
   13b64:	687b      	ldr	r3, [r7, #4]
   13b66:	601a      	str	r2, [r3, #0]
            str++;
   13b68:	68fb      	ldr	r3, [r7, #12]
   13b6a:	3301      	adds	r3, #1
   13b6c:	60fb      	str	r3, [r7, #12]
        }
        while (str < top && '0' <= *str && *str <= '9');
   13b6e:	68fa      	ldr	r2, [r7, #12]
   13b70:	68bb      	ldr	r3, [r7, #8]
   13b72:	429a      	cmp	r2, r3
   13b74:	d207      	bcs.n	13b86 <str_to_int+0x62>
   13b76:	68fb      	ldr	r3, [r7, #12]
   13b78:	781b      	ldrb	r3, [r3, #0]
   13b7a:	2b2f      	cmp	r3, #47	; 0x2f
   13b7c:	d903      	bls.n	13b86 <str_to_int+0x62>
   13b7e:	68fb      	ldr	r3, [r7, #12]
   13b80:	781b      	ldrb	r3, [r3, #0]
   13b82:	2b39      	cmp	r3, #57	; 0x39
   13b84:	d9e3      	bls.n	13b4e <str_to_int+0x2a>
    }
    return str;
   13b86:	68fb      	ldr	r3, [r7, #12]
}
   13b88:	4618      	mov	r0, r3
   13b8a:	3714      	adds	r7, #20
   13b8c:	46bd      	mov	sp, r7
   13b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
   13b92:	4770      	bx	lr

00013b94 <isalignment>:

STATIC bool isalignment(char ch) {
   13b94:	b580      	push	{r7, lr}
   13b96:	b082      	sub	sp, #8
   13b98:	af00      	add	r7, sp, #0
   13b9a:	4603      	mov	r3, r0
   13b9c:	71fb      	strb	r3, [r7, #7]
    return ch && strchr("<>=^", ch) != NULL;
   13b9e:	79fb      	ldrb	r3, [r7, #7]
   13ba0:	2b00      	cmp	r3, #0
   13ba2:	d009      	beq.n	13bb8 <isalignment+0x24>
   13ba4:	79fb      	ldrb	r3, [r7, #7]
   13ba6:	4619      	mov	r1, r3
   13ba8:	4807      	ldr	r0, [pc, #28]	; (13bc8 <isalignment+0x34>)
   13baa:	f009 fa99 	bl	1d0e0 <strchr>
   13bae:	4603      	mov	r3, r0
   13bb0:	2b00      	cmp	r3, #0
   13bb2:	d001      	beq.n	13bb8 <isalignment+0x24>
   13bb4:	2301      	movs	r3, #1
   13bb6:	e000      	b.n	13bba <isalignment+0x26>
   13bb8:	2300      	movs	r3, #0
   13bba:	f003 0301 	and.w	r3, r3, #1
   13bbe:	b2db      	uxtb	r3, r3
}
   13bc0:	4618      	mov	r0, r3
   13bc2:	3708      	adds	r7, #8
   13bc4:	46bd      	mov	sp, r7
   13bc6:	bd80      	pop	{r7, pc}
   13bc8:	00023834 	.word	0x00023834

00013bcc <istype>:

STATIC bool istype(char ch) {
   13bcc:	b580      	push	{r7, lr}
   13bce:	b082      	sub	sp, #8
   13bd0:	af00      	add	r7, sp, #0
   13bd2:	4603      	mov	r3, r0
   13bd4:	71fb      	strb	r3, [r7, #7]
    return ch && strchr("bcdeEfFgGnosxX%", ch) != NULL;
   13bd6:	79fb      	ldrb	r3, [r7, #7]
   13bd8:	2b00      	cmp	r3, #0
   13bda:	d009      	beq.n	13bf0 <istype+0x24>
   13bdc:	79fb      	ldrb	r3, [r7, #7]
   13bde:	4619      	mov	r1, r3
   13be0:	4807      	ldr	r0, [pc, #28]	; (13c00 <istype+0x34>)
   13be2:	f009 fa7d 	bl	1d0e0 <strchr>
   13be6:	4603      	mov	r3, r0
   13be8:	2b00      	cmp	r3, #0
   13bea:	d001      	beq.n	13bf0 <istype+0x24>
   13bec:	2301      	movs	r3, #1
   13bee:	e000      	b.n	13bf2 <istype+0x26>
   13bf0:	2300      	movs	r3, #0
   13bf2:	f003 0301 	and.w	r3, r3, #1
   13bf6:	b2db      	uxtb	r3, r3
}
   13bf8:	4618      	mov	r0, r3
   13bfa:	3708      	adds	r7, #8
   13bfc:	46bd      	mov	sp, r7
   13bfe:	bd80      	pop	{r7, pc}
   13c00:	0002383c 	.word	0x0002383c

00013c04 <arg_looks_integer>:

STATIC bool arg_looks_integer(mp_obj_t arg) {
   13c04:	b580      	push	{r7, lr}
   13c06:	b082      	sub	sp, #8
   13c08:	af00      	add	r7, sp, #0
   13c0a:	6078      	str	r0, [r7, #4]
    return MP_OBJ_IS_TYPE(arg, &mp_type_bool) || MP_OBJ_IS_INT(arg);
   13c0c:	6878      	ldr	r0, [r7, #4]
   13c0e:	f7fe fc57 	bl	124c0 <MP_OBJ_IS_OBJ>
   13c12:	4603      	mov	r3, r0
   13c14:	2b00      	cmp	r3, #0
   13c16:	d004      	beq.n	13c22 <arg_looks_integer+0x1e>
   13c18:	687b      	ldr	r3, [r7, #4]
   13c1a:	681b      	ldr	r3, [r3, #0]
   13c1c:	4a0e      	ldr	r2, [pc, #56]	; (13c58 <arg_looks_integer+0x54>)
   13c1e:	4293      	cmp	r3, r2
   13c20:	d010      	beq.n	13c44 <arg_looks_integer+0x40>
   13c22:	6878      	ldr	r0, [r7, #4]
   13c24:	f7fe fc28 	bl	12478 <MP_OBJ_IS_SMALL_INT>
   13c28:	4603      	mov	r3, r0
   13c2a:	2b00      	cmp	r3, #0
   13c2c:	d10a      	bne.n	13c44 <arg_looks_integer+0x40>
   13c2e:	6878      	ldr	r0, [r7, #4]
   13c30:	f7fe fc46 	bl	124c0 <MP_OBJ_IS_OBJ>
   13c34:	4603      	mov	r3, r0
   13c36:	2b00      	cmp	r3, #0
   13c38:	d006      	beq.n	13c48 <arg_looks_integer+0x44>
   13c3a:	687b      	ldr	r3, [r7, #4]
   13c3c:	681b      	ldr	r3, [r3, #0]
   13c3e:	4a07      	ldr	r2, [pc, #28]	; (13c5c <arg_looks_integer+0x58>)
   13c40:	4293      	cmp	r3, r2
   13c42:	d101      	bne.n	13c48 <arg_looks_integer+0x44>
   13c44:	2301      	movs	r3, #1
   13c46:	e000      	b.n	13c4a <arg_looks_integer+0x46>
   13c48:	2300      	movs	r3, #0
   13c4a:	f003 0301 	and.w	r3, r3, #1
   13c4e:	b2db      	uxtb	r3, r3
}
   13c50:	4618      	mov	r0, r3
   13c52:	3708      	adds	r7, #8
   13c54:	46bd      	mov	sp, r7
   13c56:	bd80      	pop	{r7, pc}
   13c58:	00021b34 	.word	0x00021b34
   13c5c:	00022ea8 	.word	0x00022ea8

00013c60 <arg_looks_numeric>:

STATIC bool arg_looks_numeric(mp_obj_t arg) {
   13c60:	b580      	push	{r7, lr}
   13c62:	b082      	sub	sp, #8
   13c64:	af00      	add	r7, sp, #0
   13c66:	6078      	str	r0, [r7, #4]
    return arg_looks_integer(arg)
   13c68:	6878      	ldr	r0, [r7, #4]
   13c6a:	f7ff ffcb 	bl	13c04 <arg_looks_integer>
   13c6e:	4603      	mov	r3, r0
#if MICROPY_PY_BUILTINS_FLOAT
        || mp_obj_is_float(arg)
#endif
    ;
}
   13c70:	4618      	mov	r0, r3
   13c72:	3708      	adds	r7, #8
   13c74:	46bd      	mov	sp, r7
   13c76:	bd80      	pop	{r7, pc}

00013c78 <arg_as_int>:

STATIC mp_obj_t arg_as_int(mp_obj_t arg) {
   13c78:	b480      	push	{r7}
   13c7a:	b083      	sub	sp, #12
   13c7c:	af00      	add	r7, sp, #0
   13c7e:	6078      	str	r0, [r7, #4]
#if MICROPY_PY_BUILTINS_FLOAT
    if (mp_obj_is_float(arg)) {
        return mp_obj_new_int_from_float(mp_obj_float_get(arg));
    }
#endif
    return arg;
   13c80:	687b      	ldr	r3, [r7, #4]
}
   13c82:	4618      	mov	r0, r3
   13c84:	370c      	adds	r7, #12
   13c86:	46bd      	mov	sp, r7
   13c88:	f85d 7b04 	ldr.w	r7, [sp], #4
   13c8c:	4770      	bx	lr
   13c8e:	bf00      	nop

00013c90 <terse_str_format_value_error>:

#if MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE
STATIC NORETURN void terse_str_format_value_error(void) {
   13c90:	b580      	push	{r7, lr}
   13c92:	af00      	add	r7, sp, #0
    mp_raise_ValueError("bad format string");
   13c94:	4801      	ldr	r0, [pc, #4]	; (13c9c <terse_str_format_value_error+0xc>)
   13c96:	f7f9 faa3 	bl	d1e0 <mp_raise_ValueError>
   13c9a:	bf00      	nop
   13c9c:	0002384c 	.word	0x0002384c

00013ca0 <mp_obj_str_format_helper>:
#else
// define to nothing to improve coverage
#define terse_str_format_value_error()
#endif

STATIC vstr_t mp_obj_str_format_helper(const char *str, const char *top, int *arg_i, size_t n_args, const mp_obj_t *args, mp_map_t *kwargs) {
   13ca0:	b590      	push	{r4, r7, lr}
   13ca2:	b0ad      	sub	sp, #180	; 0xb4
   13ca4:	af04      	add	r7, sp, #16
   13ca6:	60f8      	str	r0, [r7, #12]
   13ca8:	60b9      	str	r1, [r7, #8]
   13caa:	607a      	str	r2, [r7, #4]
   13cac:	603b      	str	r3, [r7, #0]
    vstr_t vstr;
    mp_print_t print;
    vstr_init_print(&vstr, 16, &print);
   13cae:	f107 024c 	add.w	r2, r7, #76	; 0x4c
   13cb2:	f107 0354 	add.w	r3, r7, #84	; 0x54
   13cb6:	2110      	movs	r1, #16
   13cb8:	4618      	mov	r0, r3
   13cba:	f7ed fc2b 	bl	1514 <vstr_init_print>

    for (; str < top; str++) {
   13cbe:	f000 bc91 	b.w	145e4 <mp_obj_str_format_helper+0x944>
        if (*str == '}') {
   13cc2:	68bb      	ldr	r3, [r7, #8]
   13cc4:	781b      	ldrb	r3, [r3, #0]
   13cc6:	2b7d      	cmp	r3, #125	; 0x7d
   13cc8:	d114      	bne.n	13cf4 <mp_obj_str_format_helper+0x54>
            str++;
   13cca:	68bb      	ldr	r3, [r7, #8]
   13ccc:	3301      	adds	r3, #1
   13cce:	60bb      	str	r3, [r7, #8]
            if (str < top && *str == '}') {
   13cd0:	68ba      	ldr	r2, [r7, #8]
   13cd2:	687b      	ldr	r3, [r7, #4]
   13cd4:	429a      	cmp	r2, r3
   13cd6:	d20b      	bcs.n	13cf0 <mp_obj_str_format_helper+0x50>
   13cd8:	68bb      	ldr	r3, [r7, #8]
   13cda:	781b      	ldrb	r3, [r3, #0]
   13cdc:	2b7d      	cmp	r3, #125	; 0x7d
   13cde:	d107      	bne.n	13cf0 <mp_obj_str_format_helper+0x50>
                vstr_add_byte(&vstr, '}');
   13ce0:	f107 0354 	add.w	r3, r7, #84	; 0x54
   13ce4:	217d      	movs	r1, #125	; 0x7d
   13ce6:	4618      	mov	r0, r3
   13ce8:	f7ed fd1c 	bl	1724 <vstr_add_byte>
                continue;
   13cec:	f000 bc77 	b.w	145de <mp_obj_str_format_helper+0x93e>
            }
            if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
                terse_str_format_value_error();
   13cf0:	f7ff ffce 	bl	13c90 <terse_str_format_value_error>
            } else {
                mp_raise_ValueError("single '}' encountered in format string");
            }
        }
        if (*str != '{') {
   13cf4:	68bb      	ldr	r3, [r7, #8]
   13cf6:	781b      	ldrb	r3, [r3, #0]
   13cf8:	2b7b      	cmp	r3, #123	; 0x7b
   13cfa:	d009      	beq.n	13d10 <mp_obj_str_format_helper+0x70>
            vstr_add_byte(&vstr, *str);
   13cfc:	68bb      	ldr	r3, [r7, #8]
   13cfe:	781a      	ldrb	r2, [r3, #0]
   13d00:	f107 0354 	add.w	r3, r7, #84	; 0x54
   13d04:	4611      	mov	r1, r2
   13d06:	4618      	mov	r0, r3
   13d08:	f7ed fd0c 	bl	1724 <vstr_add_byte>
            continue;
   13d0c:	f000 bc67 	b.w	145de <mp_obj_str_format_helper+0x93e>
        }

        str++;
   13d10:	68bb      	ldr	r3, [r7, #8]
   13d12:	3301      	adds	r3, #1
   13d14:	60bb      	str	r3, [r7, #8]
        if (str < top && *str == '{') {
   13d16:	68ba      	ldr	r2, [r7, #8]
   13d18:	687b      	ldr	r3, [r7, #4]
   13d1a:	429a      	cmp	r2, r3
   13d1c:	d20b      	bcs.n	13d36 <mp_obj_str_format_helper+0x96>
   13d1e:	68bb      	ldr	r3, [r7, #8]
   13d20:	781b      	ldrb	r3, [r3, #0]
   13d22:	2b7b      	cmp	r3, #123	; 0x7b
   13d24:	d107      	bne.n	13d36 <mp_obj_str_format_helper+0x96>
            vstr_add_byte(&vstr, '{');
   13d26:	f107 0354 	add.w	r3, r7, #84	; 0x54
   13d2a:	217b      	movs	r1, #123	; 0x7b
   13d2c:	4618      	mov	r0, r3
   13d2e:	f7ed fcf9 	bl	1724 <vstr_add_byte>
            continue;
   13d32:	f000 bc54 	b.w	145de <mp_obj_str_format_helper+0x93e>
        }

        // replacement_field ::=  "{" [field_name] ["!" conversion] [":" format_spec] "}"

        const char *field_name = NULL;
   13d36:	2300      	movs	r3, #0
   13d38:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        const char *field_name_top = NULL;
   13d3c:	2300      	movs	r3, #0
   13d3e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        char conversion = '\0';
   13d42:	2300      	movs	r3, #0
   13d44:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
        const char *format_spec = NULL;
   13d48:	2300      	movs	r3, #0
   13d4a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

        if (str < top && *str != '}' && *str != '!' && *str != ':') {
   13d4e:	68ba      	ldr	r2, [r7, #8]
   13d50:	687b      	ldr	r3, [r7, #4]
   13d52:	429a      	cmp	r2, r3
   13d54:	d225      	bcs.n	13da2 <mp_obj_str_format_helper+0x102>
   13d56:	68bb      	ldr	r3, [r7, #8]
   13d58:	781b      	ldrb	r3, [r3, #0]
   13d5a:	2b7d      	cmp	r3, #125	; 0x7d
   13d5c:	d021      	beq.n	13da2 <mp_obj_str_format_helper+0x102>
   13d5e:	68bb      	ldr	r3, [r7, #8]
   13d60:	781b      	ldrb	r3, [r3, #0]
   13d62:	2b21      	cmp	r3, #33	; 0x21
   13d64:	d01d      	beq.n	13da2 <mp_obj_str_format_helper+0x102>
   13d66:	68bb      	ldr	r3, [r7, #8]
   13d68:	781b      	ldrb	r3, [r3, #0]
   13d6a:	2b3a      	cmp	r3, #58	; 0x3a
   13d6c:	d019      	beq.n	13da2 <mp_obj_str_format_helper+0x102>
            field_name = (const char *)str;
   13d6e:	68bb      	ldr	r3, [r7, #8]
   13d70:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
            while (str < top && *str != '}' && *str != '!' && *str != ':') {
   13d74:	e002      	b.n	13d7c <mp_obj_str_format_helper+0xdc>
                ++str;
   13d76:	68bb      	ldr	r3, [r7, #8]
   13d78:	3301      	adds	r3, #1
   13d7a:	60bb      	str	r3, [r7, #8]
            while (str < top && *str != '}' && *str != '!' && *str != ':') {
   13d7c:	68ba      	ldr	r2, [r7, #8]
   13d7e:	687b      	ldr	r3, [r7, #4]
   13d80:	429a      	cmp	r2, r3
   13d82:	d20b      	bcs.n	13d9c <mp_obj_str_format_helper+0xfc>
   13d84:	68bb      	ldr	r3, [r7, #8]
   13d86:	781b      	ldrb	r3, [r3, #0]
   13d88:	2b7d      	cmp	r3, #125	; 0x7d
   13d8a:	d007      	beq.n	13d9c <mp_obj_str_format_helper+0xfc>
   13d8c:	68bb      	ldr	r3, [r7, #8]
   13d8e:	781b      	ldrb	r3, [r3, #0]
   13d90:	2b21      	cmp	r3, #33	; 0x21
   13d92:	d003      	beq.n	13d9c <mp_obj_str_format_helper+0xfc>
   13d94:	68bb      	ldr	r3, [r7, #8]
   13d96:	781b      	ldrb	r3, [r3, #0]
   13d98:	2b3a      	cmp	r3, #58	; 0x3a
   13d9a:	d1ec      	bne.n	13d76 <mp_obj_str_format_helper+0xd6>
            }
            field_name_top = (const char *)str;
   13d9c:	68bb      	ldr	r3, [r7, #8]
   13d9e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        }

        // conversion ::=  "r" | "s"

        if (str < top && *str == '!') {
   13da2:	68ba      	ldr	r2, [r7, #8]
   13da4:	687b      	ldr	r3, [r7, #4]
   13da6:	429a      	cmp	r2, r3
   13da8:	d21b      	bcs.n	13de2 <mp_obj_str_format_helper+0x142>
   13daa:	68bb      	ldr	r3, [r7, #8]
   13dac:	781b      	ldrb	r3, [r3, #0]
   13dae:	2b21      	cmp	r3, #33	; 0x21
   13db0:	d117      	bne.n	13de2 <mp_obj_str_format_helper+0x142>
            str++;
   13db2:	68bb      	ldr	r3, [r7, #8]
   13db4:	3301      	adds	r3, #1
   13db6:	60bb      	str	r3, [r7, #8]
            if (str < top && (*str == 'r' || *str == 's')) {
   13db8:	68ba      	ldr	r2, [r7, #8]
   13dba:	687b      	ldr	r3, [r7, #4]
   13dbc:	429a      	cmp	r2, r3
   13dbe:	d20e      	bcs.n	13dde <mp_obj_str_format_helper+0x13e>
   13dc0:	68bb      	ldr	r3, [r7, #8]
   13dc2:	781b      	ldrb	r3, [r3, #0]
   13dc4:	2b72      	cmp	r3, #114	; 0x72
   13dc6:	d003      	beq.n	13dd0 <mp_obj_str_format_helper+0x130>
   13dc8:	68bb      	ldr	r3, [r7, #8]
   13dca:	781b      	ldrb	r3, [r3, #0]
   13dcc:	2b73      	cmp	r3, #115	; 0x73
   13dce:	d106      	bne.n	13dde <mp_obj_str_format_helper+0x13e>
                conversion = *str++;
   13dd0:	68bb      	ldr	r3, [r7, #8]
   13dd2:	1c5a      	adds	r2, r3, #1
   13dd4:	60ba      	str	r2, [r7, #8]
   13dd6:	781b      	ldrb	r3, [r3, #0]
   13dd8:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
   13ddc:	e001      	b.n	13de2 <mp_obj_str_format_helper+0x142>
            } else {
                if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
                    terse_str_format_value_error();
   13dde:	f7ff ff57 	bl	13c90 <terse_str_format_value_error>
                    }
                }
            }
        }

        if (str < top && *str == ':') {
   13de2:	68ba      	ldr	r2, [r7, #8]
   13de4:	687b      	ldr	r3, [r7, #4]
   13de6:	429a      	cmp	r2, r3
   13de8:	d231      	bcs.n	13e4e <mp_obj_str_format_helper+0x1ae>
   13dea:	68bb      	ldr	r3, [r7, #8]
   13dec:	781b      	ldrb	r3, [r3, #0]
   13dee:	2b3a      	cmp	r3, #58	; 0x3a
   13df0:	d12d      	bne.n	13e4e <mp_obj_str_format_helper+0x1ae>
            str++;
   13df2:	68bb      	ldr	r3, [r7, #8]
   13df4:	3301      	adds	r3, #1
   13df6:	60bb      	str	r3, [r7, #8]
            // {:} is the same as {}, which is the same as {!s}
            // This makes a difference when passing in a True or False
            // '{}'.format(True) returns 'True'
            // '{:d}'.format(True) returns '1'
            // So we treat {:} as {} and this later gets treated to be {!s}
            if (*str != '}') {
   13df8:	68bb      	ldr	r3, [r7, #8]
   13dfa:	781b      	ldrb	r3, [r3, #0]
   13dfc:	2b7d      	cmp	r3, #125	; 0x7d
   13dfe:	d026      	beq.n	13e4e <mp_obj_str_format_helper+0x1ae>
                format_spec = str;
   13e00:	68bb      	ldr	r3, [r7, #8]
   13e02:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
                for (int nest = 1; str < top;) {
   13e06:	2301      	movs	r3, #1
   13e08:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   13e0c:	e019      	b.n	13e42 <mp_obj_str_format_helper+0x1a2>
                    if (*str == '{') {
   13e0e:	68bb      	ldr	r3, [r7, #8]
   13e10:	781b      	ldrb	r3, [r3, #0]
   13e12:	2b7b      	cmp	r3, #123	; 0x7b
   13e14:	d105      	bne.n	13e22 <mp_obj_str_format_helper+0x182>
                        ++nest;
   13e16:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
   13e1a:	3301      	adds	r3, #1
   13e1c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   13e20:	e00c      	b.n	13e3c <mp_obj_str_format_helper+0x19c>
                    } else if (*str == '}') {
   13e22:	68bb      	ldr	r3, [r7, #8]
   13e24:	781b      	ldrb	r3, [r3, #0]
   13e26:	2b7d      	cmp	r3, #125	; 0x7d
   13e28:	d108      	bne.n	13e3c <mp_obj_str_format_helper+0x19c>
                        if (--nest == 0) {
   13e2a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
   13e2e:	3b01      	subs	r3, #1
   13e30:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   13e34:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
   13e38:	2b00      	cmp	r3, #0
   13e3a:	d007      	beq.n	13e4c <mp_obj_str_format_helper+0x1ac>
                            break;
                        }
                    }
                    ++str;
   13e3c:	68bb      	ldr	r3, [r7, #8]
   13e3e:	3301      	adds	r3, #1
   13e40:	60bb      	str	r3, [r7, #8]
                for (int nest = 1; str < top;) {
   13e42:	68ba      	ldr	r2, [r7, #8]
   13e44:	687b      	ldr	r3, [r7, #4]
   13e46:	429a      	cmp	r2, r3
   13e48:	d3e1      	bcc.n	13e0e <mp_obj_str_format_helper+0x16e>
   13e4a:	e000      	b.n	13e4e <mp_obj_str_format_helper+0x1ae>
                            break;
   13e4c:	bf00      	nop
                }
            }
        }
        if (str >= top) {
   13e4e:	68ba      	ldr	r2, [r7, #8]
   13e50:	687b      	ldr	r3, [r7, #4]
   13e52:	429a      	cmp	r2, r3
   13e54:	d301      	bcc.n	13e5a <mp_obj_str_format_helper+0x1ba>
            if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
                terse_str_format_value_error();
   13e56:	f7ff ff1b 	bl	13c90 <terse_str_format_value_error>
            } else {
                mp_raise_ValueError("unmatched '{' in format");
            }
        }
        if (*str != '}') {
   13e5a:	68bb      	ldr	r3, [r7, #8]
   13e5c:	781b      	ldrb	r3, [r3, #0]
   13e5e:	2b7d      	cmp	r3, #125	; 0x7d
   13e60:	d001      	beq.n	13e66 <mp_obj_str_format_helper+0x1c6>
            if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
                terse_str_format_value_error();
   13e62:	f7ff ff15 	bl	13c90 <terse_str_format_value_error>
            } else {
                mp_raise_ValueError("expected ':' after format specifier");
            }
        }

        mp_obj_t arg = mp_const_none;
   13e66:	4ba8      	ldr	r3, [pc, #672]	; (14108 <mp_obj_str_format_helper+0x468>)
   13e68:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

        if (field_name) {
   13e6c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
   13e70:	2b00      	cmp	r3, #0
   13e72:	d07b      	beq.n	13f6c <mp_obj_str_format_helper+0x2cc>
            int index = 0;
   13e74:	2300      	movs	r3, #0
   13e76:	643b      	str	r3, [r7, #64]	; 0x40
            if (MP_LIKELY(unichar_isdigit(*field_name))) {
   13e78:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
   13e7c:	781b      	ldrb	r3, [r3, #0]
   13e7e:	4618      	mov	r0, r3
   13e80:	f7ee fb76 	bl	2570 <unichar_isdigit>
   13e84:	4603      	mov	r3, r0
   13e86:	2b00      	cmp	r3, #0
   13e88:	d028      	beq.n	13edc <mp_obj_str_format_helper+0x23c>
                if (*arg_i > 0) {
   13e8a:	683b      	ldr	r3, [r7, #0]
   13e8c:	681b      	ldr	r3, [r3, #0]
   13e8e:	2b00      	cmp	r3, #0
   13e90:	dd01      	ble.n	13e96 <mp_obj_str_format_helper+0x1f6>
                    if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
                        terse_str_format_value_error();
   13e92:	f7ff fefd 	bl	13c90 <terse_str_format_value_error>
                    } else {
                        mp_raise_ValueError(
                            "can't switch from automatic field numbering to manual field specification");
                    }
                }
                field_name = str_to_int(field_name, field_name_top, &index);
   13e96:	f107 0340 	add.w	r3, r7, #64	; 0x40
   13e9a:	461a      	mov	r2, r3
   13e9c:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
   13ea0:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
   13ea4:	f7ff fe3e 	bl	13b24 <str_to_int>
   13ea8:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
                if ((uint)index >= n_args - 1) {
   13eac:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
   13eb0:	3b01      	subs	r3, #1
   13eb2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   13eb4:	4293      	cmp	r3, r2
   13eb6:	d803      	bhi.n	13ec0 <mp_obj_str_format_helper+0x220>
                    mp_raise_msg(&mp_type_IndexError, "tuple index out of range");
   13eb8:	4994      	ldr	r1, [pc, #592]	; (1410c <mp_obj_str_format_helper+0x46c>)
   13eba:	4895      	ldr	r0, [pc, #596]	; (14110 <mp_obj_str_format_helper+0x470>)
   13ebc:	f7f9 f978 	bl	d1b0 <mp_raise_msg>
                }
                arg = args[index + 1];
   13ec0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   13ec2:	3301      	adds	r3, #1
   13ec4:	009b      	lsls	r3, r3, #2
   13ec6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
   13eca:	4413      	add	r3, r2
   13ecc:	681b      	ldr	r3, [r3, #0]
   13ece:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                *arg_i = -1;
   13ed2:	683b      	ldr	r3, [r7, #0]
   13ed4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   13ed8:	601a      	str	r2, [r3, #0]
   13eda:	e03e      	b.n	13f5a <mp_obj_str_format_helper+0x2ba>
            } else {
                const char *lookup;
                for (lookup = field_name; lookup < field_name_top && *lookup != '.' && *lookup != '['; lookup++);
   13edc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
   13ee0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   13ee4:	e004      	b.n	13ef0 <mp_obj_str_format_helper+0x250>
   13ee6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
   13eea:	3301      	adds	r3, #1
   13eec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   13ef0:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
   13ef4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
   13ef8:	429a      	cmp	r2, r3
   13efa:	d209      	bcs.n	13f10 <mp_obj_str_format_helper+0x270>
   13efc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
   13f00:	781b      	ldrb	r3, [r3, #0]
   13f02:	2b2e      	cmp	r3, #46	; 0x2e
   13f04:	d004      	beq.n	13f10 <mp_obj_str_format_helper+0x270>
   13f06:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
   13f0a:	781b      	ldrb	r3, [r3, #0]
   13f0c:	2b5b      	cmp	r3, #91	; 0x5b
   13f0e:	d1ea      	bne.n	13ee6 <mp_obj_str_format_helper+0x246>
                mp_obj_t field_q = mp_obj_new_str_via_qstr(field_name, lookup - field_name); // should it be via qstr?
   13f10:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
   13f14:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
   13f18:	1ad3      	subs	r3, r2, r3
   13f1a:	4619      	mov	r1, r3
   13f1c:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
   13f20:	f001 fb2a 	bl	15578 <mp_obj_new_str_via_qstr>
   13f24:	6738      	str	r0, [r7, #112]	; 0x70
                field_name = lookup;
   13f26:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
   13f2a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
                mp_map_elem_t *key_elem = mp_map_lookup(kwargs, field_q, MP_MAP_LOOKUP);
   13f2e:	2200      	movs	r2, #0
   13f30:	6f39      	ldr	r1, [r7, #112]	; 0x70
   13f32:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
   13f36:	f7f9 fc13 	bl	d760 <mp_map_lookup>
   13f3a:	66f8      	str	r0, [r7, #108]	; 0x6c
                if (key_elem == NULL) {
   13f3c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   13f3e:	2b00      	cmp	r3, #0
   13f40:	d107      	bne.n	13f52 <mp_obj_str_format_helper+0x2b2>
                    nlr_raise(mp_obj_new_exception_arg1(&mp_type_KeyError, field_q));
   13f42:	6f39      	ldr	r1, [r7, #112]	; 0x70
   13f44:	4873      	ldr	r0, [pc, #460]	; (14114 <mp_obj_str_format_helper+0x474>)
   13f46:	f7fb fc0b 	bl	f760 <mp_obj_new_exception_arg1>
   13f4a:	4603      	mov	r3, r0
   13f4c:	4618      	mov	r0, r3
   13f4e:	f7ec f9c7 	bl	2e0 <nlr_jump>
                }
                arg = key_elem->value;
   13f52:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   13f54:	685b      	ldr	r3, [r3, #4]
   13f56:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
            }
            if (field_name < field_name_top) {
   13f5a:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
   13f5e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
   13f62:	429a      	cmp	r2, r3
   13f64:	d223      	bcs.n	13fae <mp_obj_str_format_helper+0x30e>
                mp_raise_NotImplementedError("attributes not supported yet");
   13f66:	486c      	ldr	r0, [pc, #432]	; (14118 <mp_obj_str_format_helper+0x478>)
   13f68:	f7f9 f960 	bl	d22c <mp_raise_NotImplementedError>
            }
        } else {
            if (*arg_i < 0) {
   13f6c:	683b      	ldr	r3, [r7, #0]
   13f6e:	681b      	ldr	r3, [r3, #0]
   13f70:	2b00      	cmp	r3, #0
   13f72:	da01      	bge.n	13f78 <mp_obj_str_format_helper+0x2d8>
                if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
                    terse_str_format_value_error();
   13f74:	f7ff fe8c 	bl	13c90 <terse_str_format_value_error>
                } else {
                    mp_raise_ValueError(
                        "can't switch from manual field specification to automatic field numbering");
                }
            }
            if ((uint)*arg_i >= n_args - 1) {
   13f78:	683b      	ldr	r3, [r7, #0]
   13f7a:	681b      	ldr	r3, [r3, #0]
   13f7c:	461a      	mov	r2, r3
   13f7e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
   13f82:	3b01      	subs	r3, #1
   13f84:	429a      	cmp	r2, r3
   13f86:	d303      	bcc.n	13f90 <mp_obj_str_format_helper+0x2f0>
                mp_raise_msg(&mp_type_IndexError, "tuple index out of range");
   13f88:	4960      	ldr	r1, [pc, #384]	; (1410c <mp_obj_str_format_helper+0x46c>)
   13f8a:	4861      	ldr	r0, [pc, #388]	; (14110 <mp_obj_str_format_helper+0x470>)
   13f8c:	f7f9 f910 	bl	d1b0 <mp_raise_msg>
            }
            arg = args[(*arg_i) + 1];
   13f90:	683b      	ldr	r3, [r7, #0]
   13f92:	681b      	ldr	r3, [r3, #0]
   13f94:	3301      	adds	r3, #1
   13f96:	009b      	lsls	r3, r3, #2
   13f98:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
   13f9c:	4413      	add	r3, r2
   13f9e:	681b      	ldr	r3, [r3, #0]
   13fa0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
            (*arg_i)++;
   13fa4:	683b      	ldr	r3, [r7, #0]
   13fa6:	681b      	ldr	r3, [r3, #0]
   13fa8:	1c5a      	adds	r2, r3, #1
   13faa:	683b      	ldr	r3, [r7, #0]
   13fac:	601a      	str	r2, [r3, #0]
        }
        if (!format_spec && !conversion) {
   13fae:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
   13fb2:	2b00      	cmp	r3, #0
   13fb4:	d106      	bne.n	13fc4 <mp_obj_str_format_helper+0x324>
   13fb6:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
   13fba:	2b00      	cmp	r3, #0
   13fbc:	d102      	bne.n	13fc4 <mp_obj_str_format_helper+0x324>
            conversion = 's';
   13fbe:	2373      	movs	r3, #115	; 0x73
   13fc0:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
        }
        if (conversion) {
   13fc4:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
   13fc8:	2b00      	cmp	r3, #0
   13fca:	d02e      	beq.n	1402a <mp_obj_str_format_helper+0x38a>
            mp_print_kind_t print_kind;
            if (conversion == 's') {
   13fcc:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
   13fd0:	2b73      	cmp	r3, #115	; 0x73
   13fd2:	d103      	bne.n	13fdc <mp_obj_str_format_helper+0x33c>
                print_kind = PRINT_STR;
   13fd4:	2300      	movs	r3, #0
   13fd6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   13fda:	e00d      	b.n	13ff8 <mp_obj_str_format_helper+0x358>
            } else {
                assert(conversion == 'r');
   13fdc:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
   13fe0:	2b72      	cmp	r3, #114	; 0x72
   13fe2:	d006      	beq.n	13ff2 <mp_obj_str_format_helper+0x352>
   13fe4:	4b4d      	ldr	r3, [pc, #308]	; (1411c <mp_obj_str_format_helper+0x47c>)
   13fe6:	4a4e      	ldr	r2, [pc, #312]	; (14120 <mp_obj_str_format_helper+0x480>)
   13fe8:	f240 4147 	movw	r1, #1095	; 0x447
   13fec:	484d      	ldr	r0, [pc, #308]	; (14124 <mp_obj_str_format_helper+0x484>)
   13fee:	f007 fb6f 	bl	1b6d0 <__assert_func>
                print_kind = PRINT_REPR;
   13ff2:	2301      	movs	r3, #1
   13ff4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
            }
            vstr_t arg_vstr;
            mp_print_t arg_print;
            vstr_init_print(&arg_vstr, 16, &arg_print);
   13ff8:	f107 0228 	add.w	r2, r7, #40	; 0x28
   13ffc:	f107 0330 	add.w	r3, r7, #48	; 0x30
   14000:	2110      	movs	r1, #16
   14002:	4618      	mov	r0, r3
   14004:	f7ed fa86 	bl	1514 <vstr_init_print>
            mp_obj_print_helper(&arg_print, arg, print_kind);
   14008:	f107 0328 	add.w	r3, r7, #40	; 0x28
   1400c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
   14010:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
   14014:	4618      	mov	r0, r3
   14016:	f7f9 fd7f 	bl	db18 <mp_obj_print_helper>
            arg = mp_obj_new_str_from_vstr(&mp_type_str, &arg_vstr);
   1401a:	f107 0330 	add.w	r3, r7, #48	; 0x30
   1401e:	4619      	mov	r1, r3
   14020:	4841      	ldr	r0, [pc, #260]	; (14128 <mp_obj_str_format_helper+0x488>)
   14022:	f001 fabb 	bl	1559c <mp_obj_new_str_from_vstr>
   14026:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
        }

        char fill = '\0';
   1402a:	2300      	movs	r3, #0
   1402c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
        char align = '\0';
   14030:	2300      	movs	r3, #0
   14032:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
        int width = -1;
   14036:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1403a:	64bb      	str	r3, [r7, #72]	; 0x48
        int precision = -1;
   1403c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   14040:	647b      	str	r3, [r7, #68]	; 0x44
        char type = '\0';
   14042:	2300      	movs	r3, #0
   14044:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d
        int flags = 0;
   14048:	2300      	movs	r3, #0
   1404a:	67bb      	str	r3, [r7, #120]	; 0x78

        if (format_spec) {
   1404c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
   14050:	2b00      	cmp	r3, #0
   14052:	f000 80ce 	beq.w	141f2 <mp_obj_str_format_helper+0x552>
            // precision   ::=  integer
            // type        ::=  "b" | "c" | "d" | "e" | "E" | "f" | "F" | "g" | "G" | "n" | "o" | "s" | "x" | "X" | "%"

            // recursively call the formatter to format any nested specifiers
            MP_STACK_CHECK();
            vstr_t format_spec_vstr = mp_obj_str_format_helper(format_spec, str, arg_i, n_args, args, kwargs);
   14056:	f107 0018 	add.w	r0, r7, #24
   1405a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
   1405e:	9302      	str	r3, [sp, #8]
   14060:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
   14064:	9301      	str	r3, [sp, #4]
   14066:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
   1406a:	9300      	str	r3, [sp, #0]
   1406c:	683b      	ldr	r3, [r7, #0]
   1406e:	68ba      	ldr	r2, [r7, #8]
   14070:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
   14074:	f7ff fe14 	bl	13ca0 <mp_obj_str_format_helper>
            const char *s = vstr_null_terminated_str(&format_spec_vstr);
   14078:	f107 0318 	add.w	r3, r7, #24
   1407c:	4618      	mov	r0, r3
   1407e:	f7ed fb35 	bl	16ec <vstr_null_terminated_str>
   14082:	6778      	str	r0, [r7, #116]	; 0x74
            const char *stop = s + format_spec_vstr.len;
   14084:	69fb      	ldr	r3, [r7, #28]
   14086:	6f7a      	ldr	r2, [r7, #116]	; 0x74
   14088:	4413      	add	r3, r2
   1408a:	66bb      	str	r3, [r7, #104]	; 0x68
            if (isalignment(*s)) {
   1408c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   1408e:	781b      	ldrb	r3, [r3, #0]
   14090:	4618      	mov	r0, r3
   14092:	f7ff fd7f 	bl	13b94 <isalignment>
   14096:	4603      	mov	r3, r0
   14098:	2b00      	cmp	r3, #0
   1409a:	d006      	beq.n	140aa <mp_obj_str_format_helper+0x40a>
                align = *s++;
   1409c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   1409e:	1c5a      	adds	r2, r3, #1
   140a0:	677a      	str	r2, [r7, #116]	; 0x74
   140a2:	781b      	ldrb	r3, [r3, #0]
   140a4:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
   140a8:	e018      	b.n	140dc <mp_obj_str_format_helper+0x43c>
            } else if (*s && isalignment(s[1])) {
   140aa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   140ac:	781b      	ldrb	r3, [r3, #0]
   140ae:	2b00      	cmp	r3, #0
   140b0:	d014      	beq.n	140dc <mp_obj_str_format_helper+0x43c>
   140b2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   140b4:	3301      	adds	r3, #1
   140b6:	781b      	ldrb	r3, [r3, #0]
   140b8:	4618      	mov	r0, r3
   140ba:	f7ff fd6b 	bl	13b94 <isalignment>
   140be:	4603      	mov	r3, r0
   140c0:	2b00      	cmp	r3, #0
   140c2:	d00b      	beq.n	140dc <mp_obj_str_format_helper+0x43c>
                fill = *s++;
   140c4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   140c6:	1c5a      	adds	r2, r3, #1
   140c8:	677a      	str	r2, [r7, #116]	; 0x74
   140ca:	781b      	ldrb	r3, [r3, #0]
   140cc:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
                align = *s++;
   140d0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   140d2:	1c5a      	adds	r2, r3, #1
   140d4:	677a      	str	r2, [r7, #116]	; 0x74
   140d6:	781b      	ldrb	r3, [r3, #0]
   140d8:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
            }
            if (*s == '+' || *s == '-' || *s == ' ') {
   140dc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   140de:	781b      	ldrb	r3, [r3, #0]
   140e0:	2b2b      	cmp	r3, #43	; 0x2b
   140e2:	d007      	beq.n	140f4 <mp_obj_str_format_helper+0x454>
   140e4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   140e6:	781b      	ldrb	r3, [r3, #0]
   140e8:	2b2d      	cmp	r3, #45	; 0x2d
   140ea:	d003      	beq.n	140f4 <mp_obj_str_format_helper+0x454>
   140ec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   140ee:	781b      	ldrb	r3, [r3, #0]
   140f0:	2b20      	cmp	r3, #32
   140f2:	d126      	bne.n	14142 <mp_obj_str_format_helper+0x4a2>
                if (*s == '+') {
   140f4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   140f6:	781b      	ldrb	r3, [r3, #0]
   140f8:	2b2b      	cmp	r3, #43	; 0x2b
   140fa:	d117      	bne.n	1412c <mp_obj_str_format_helper+0x48c>
                    flags |= PF_FLAG_SHOW_SIGN;
   140fc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   140fe:	f043 0302 	orr.w	r3, r3, #2
   14102:	67bb      	str	r3, [r7, #120]	; 0x78
   14104:	e01a      	b.n	1413c <mp_obj_str_format_helper+0x49c>
   14106:	bf00      	nop
   14108:	0002345c 	.word	0x0002345c
   1410c:	00023860 	.word	0x00023860
   14110:	0002247c 	.word	0x0002247c
   14114:	000224b8 	.word	0x000224b8
   14118:	0002387c 	.word	0x0002387c
   1411c:	0002389c 	.word	0x0002389c
   14120:	00023be8 	.word	0x00023be8
   14124:	00023634 	.word	0x00023634
   14128:	00023b0c 	.word	0x00023b0c
                } else if (*s == ' ') {
   1412c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   1412e:	781b      	ldrb	r3, [r3, #0]
   14130:	2b20      	cmp	r3, #32
   14132:	d103      	bne.n	1413c <mp_obj_str_format_helper+0x49c>
                    flags |= PF_FLAG_SPACE_SIGN;
   14134:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   14136:	f043 0304 	orr.w	r3, r3, #4
   1413a:	67bb      	str	r3, [r7, #120]	; 0x78
                }
                s++;
   1413c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   1413e:	3301      	adds	r3, #1
   14140:	677b      	str	r3, [r7, #116]	; 0x74
            }
            if (*s == '#') {
   14142:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   14144:	781b      	ldrb	r3, [r3, #0]
   14146:	2b23      	cmp	r3, #35	; 0x23
   14148:	d106      	bne.n	14158 <mp_obj_str_format_helper+0x4b8>
                flags |= PF_FLAG_SHOW_PREFIX;
   1414a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   1414c:	f043 0310 	orr.w	r3, r3, #16
   14150:	67bb      	str	r3, [r7, #120]	; 0x78
                s++;
   14152:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   14154:	3301      	adds	r3, #1
   14156:	677b      	str	r3, [r7, #116]	; 0x74
            }
            if (*s == '0') {
   14158:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   1415a:	781b      	ldrb	r3, [r3, #0]
   1415c:	2b30      	cmp	r3, #48	; 0x30
   1415e:	d10d      	bne.n	1417c <mp_obj_str_format_helper+0x4dc>
                if (!align) {
   14160:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
   14164:	2b00      	cmp	r3, #0
   14166:	d102      	bne.n	1416e <mp_obj_str_format_helper+0x4ce>
                    align = '=';
   14168:	233d      	movs	r3, #61	; 0x3d
   1416a:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
                }
                if (!fill) {
   1416e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
   14172:	2b00      	cmp	r3, #0
   14174:	d102      	bne.n	1417c <mp_obj_str_format_helper+0x4dc>
                    fill = '0';
   14176:	2330      	movs	r3, #48	; 0x30
   14178:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
                }
            }
            s = str_to_int(s, stop, &width);
   1417c:	f107 0348 	add.w	r3, r7, #72	; 0x48
   14180:	461a      	mov	r2, r3
   14182:	6eb9      	ldr	r1, [r7, #104]	; 0x68
   14184:	6f78      	ldr	r0, [r7, #116]	; 0x74
   14186:	f7ff fccd 	bl	13b24 <str_to_int>
   1418a:	6778      	str	r0, [r7, #116]	; 0x74
            if (*s == ',') {
   1418c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   1418e:	781b      	ldrb	r3, [r3, #0]
   14190:	2b2c      	cmp	r3, #44	; 0x2c
   14192:	d106      	bne.n	141a2 <mp_obj_str_format_helper+0x502>
                flags |= PF_FLAG_SHOW_COMMA;
   14194:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   14196:	f043 0320 	orr.w	r3, r3, #32
   1419a:	67bb      	str	r3, [r7, #120]	; 0x78
                s++;
   1419c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   1419e:	3301      	adds	r3, #1
   141a0:	677b      	str	r3, [r7, #116]	; 0x74
            }
            if (*s == '.') {
   141a2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   141a4:	781b      	ldrb	r3, [r3, #0]
   141a6:	2b2e      	cmp	r3, #46	; 0x2e
   141a8:	d10a      	bne.n	141c0 <mp_obj_str_format_helper+0x520>
                s++;
   141aa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   141ac:	3301      	adds	r3, #1
   141ae:	677b      	str	r3, [r7, #116]	; 0x74
                s = str_to_int(s, stop, &precision);
   141b0:	f107 0344 	add.w	r3, r7, #68	; 0x44
   141b4:	461a      	mov	r2, r3
   141b6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
   141b8:	6f78      	ldr	r0, [r7, #116]	; 0x74
   141ba:	f7ff fcb3 	bl	13b24 <str_to_int>
   141be:	6778      	str	r0, [r7, #116]	; 0x74
            }
            if (istype(*s)) {
   141c0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   141c2:	781b      	ldrb	r3, [r3, #0]
   141c4:	4618      	mov	r0, r3
   141c6:	f7ff fd01 	bl	13bcc <istype>
   141ca:	4603      	mov	r3, r0
   141cc:	2b00      	cmp	r3, #0
   141ce:	d005      	beq.n	141dc <mp_obj_str_format_helper+0x53c>
                type = *s++;
   141d0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   141d2:	1c5a      	adds	r2, r3, #1
   141d4:	677a      	str	r2, [r7, #116]	; 0x74
   141d6:	781b      	ldrb	r3, [r3, #0]
   141d8:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d
            }
            if (*s) {
   141dc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   141de:	781b      	ldrb	r3, [r3, #0]
   141e0:	2b00      	cmp	r3, #0
   141e2:	d001      	beq.n	141e8 <mp_obj_str_format_helper+0x548>
                if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
                    terse_str_format_value_error();
   141e4:	f7ff fd54 	bl	13c90 <terse_str_format_value_error>
                } else {
                    mp_raise_ValueError("invalid format specifier");
                }
            }
            vstr_clear(&format_spec_vstr);
   141e8:	f107 0318 	add.w	r3, r7, #24
   141ec:	4618      	mov	r0, r3
   141ee:	f7ed f9a7 	bl	1540 <vstr_clear>
        }
        if (!align) {
   141f2:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
   141f6:	2b00      	cmp	r3, #0
   141f8:	d10d      	bne.n	14216 <mp_obj_str_format_helper+0x576>
            if (arg_looks_numeric(arg)) {
   141fa:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
   141fe:	f7ff fd2f 	bl	13c60 <arg_looks_numeric>
   14202:	4603      	mov	r3, r0
   14204:	2b00      	cmp	r3, #0
   14206:	d003      	beq.n	14210 <mp_obj_str_format_helper+0x570>
                align = '>';
   14208:	233e      	movs	r3, #62	; 0x3e
   1420a:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
   1420e:	e002      	b.n	14216 <mp_obj_str_format_helper+0x576>
            } else {
                align = '<';
   14210:	233c      	movs	r3, #60	; 0x3c
   14212:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
            }
        }
        if (!fill) {
   14216:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
   1421a:	2b00      	cmp	r3, #0
   1421c:	d102      	bne.n	14224 <mp_obj_str_format_helper+0x584>
            fill = ' ';
   1421e:	2320      	movs	r3, #32
   14220:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
        }

        if (flags & (PF_FLAG_SHOW_SIGN | PF_FLAG_SPACE_SIGN)) {
   14224:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   14226:	f003 0306 	and.w	r3, r3, #6
   1422a:	2b00      	cmp	r3, #0
   1422c:	d00b      	beq.n	14246 <mp_obj_str_format_helper+0x5a6>
            if (type == 's') {
   1422e:	f897 307d 	ldrb.w	r3, [r7, #125]	; 0x7d
   14232:	2b73      	cmp	r3, #115	; 0x73
   14234:	d101      	bne.n	1423a <mp_obj_str_format_helper+0x59a>
                if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
                    terse_str_format_value_error();
   14236:	f7ff fd2b 	bl	13c90 <terse_str_format_value_error>
                } else {
                    mp_raise_ValueError("sign not allowed in string format specifier");
                }
            }
            if (type == 'c') {
   1423a:	f897 307d 	ldrb.w	r3, [r7, #125]	; 0x7d
   1423e:	2b63      	cmp	r3, #99	; 0x63
   14240:	d101      	bne.n	14246 <mp_obj_str_format_helper+0x5a6>
                if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
                    terse_str_format_value_error();
   14242:	f7ff fd25 	bl	13c90 <terse_str_format_value_error>
                        "sign not allowed with integer format specifier 'c'");
                }
            }
        }

        switch (align) {
   14246:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
   1424a:	2b3d      	cmp	r3, #61	; 0x3d
   1424c:	d008      	beq.n	14260 <mp_obj_str_format_helper+0x5c0>
   1424e:	2b5e      	cmp	r3, #94	; 0x5e
   14250:	d00b      	beq.n	1426a <mp_obj_str_format_helper+0x5ca>
   14252:	2b3c      	cmp	r3, #60	; 0x3c
   14254:	d10e      	bne.n	14274 <mp_obj_str_format_helper+0x5d4>
            case '<': flags |= PF_FLAG_LEFT_ADJUST;     break;
   14256:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   14258:	f043 0301 	orr.w	r3, r3, #1
   1425c:	67bb      	str	r3, [r7, #120]	; 0x78
   1425e:	e009      	b.n	14274 <mp_obj_str_format_helper+0x5d4>
            case '=': flags |= PF_FLAG_PAD_AFTER_SIGN;  break;
   14260:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   14262:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   14266:	67bb      	str	r3, [r7, #120]	; 0x78
   14268:	e004      	b.n	14274 <mp_obj_str_format_helper+0x5d4>
            case '^': flags |= PF_FLAG_CENTER_ADJUST;   break;
   1426a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   1426c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   14270:	67bb      	str	r3, [r7, #120]	; 0x78
   14272:	bf00      	nop
        }

        if (arg_looks_integer(arg)) {
   14274:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
   14278:	f7ff fcc4 	bl	13c04 <arg_looks_integer>
   1427c:	4603      	mov	r3, r0
   1427e:	2b00      	cmp	r3, #0
   14280:	f000 8167 	beq.w	14552 <mp_obj_str_format_helper+0x8b2>
            switch (type) {
   14284:	f897 307d 	ldrb.w	r3, [r7, #125]	; 0x7d
   14288:	2b78      	cmp	r3, #120	; 0x78
   1428a:	f200 815f 	bhi.w	1454c <mp_obj_str_format_helper+0x8ac>
   1428e:	a201      	add	r2, pc, #4	; (adr r2, 14294 <mp_obj_str_format_helper+0x5f4>)
   14290:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   14294:	000144c7 	.word	0x000144c7
   14298:	0001454d 	.word	0x0001454d
   1429c:	0001454d 	.word	0x0001454d
   142a0:	0001454d 	.word	0x0001454d
   142a4:	0001454d 	.word	0x0001454d
   142a8:	0001454d 	.word	0x0001454d
   142ac:	0001454d 	.word	0x0001454d
   142b0:	0001454d 	.word	0x0001454d
   142b4:	0001454d 	.word	0x0001454d
   142b8:	0001454d 	.word	0x0001454d
   142bc:	0001454d 	.word	0x0001454d
   142c0:	0001454d 	.word	0x0001454d
   142c4:	0001454d 	.word	0x0001454d
   142c8:	0001454d 	.word	0x0001454d
   142cc:	0001454d 	.word	0x0001454d
   142d0:	0001454d 	.word	0x0001454d
   142d4:	0001454d 	.word	0x0001454d
   142d8:	0001454d 	.word	0x0001454d
   142dc:	0001454d 	.word	0x0001454d
   142e0:	0001454d 	.word	0x0001454d
   142e4:	0001454d 	.word	0x0001454d
   142e8:	0001454d 	.word	0x0001454d
   142ec:	0001454d 	.word	0x0001454d
   142f0:	0001454d 	.word	0x0001454d
   142f4:	0001454d 	.word	0x0001454d
   142f8:	0001454d 	.word	0x0001454d
   142fc:	0001454d 	.word	0x0001454d
   14300:	0001454d 	.word	0x0001454d
   14304:	0001454d 	.word	0x0001454d
   14308:	0001454d 	.word	0x0001454d
   1430c:	0001454d 	.word	0x0001454d
   14310:	0001454d 	.word	0x0001454d
   14314:	0001454d 	.word	0x0001454d
   14318:	0001454d 	.word	0x0001454d
   1431c:	0001454d 	.word	0x0001454d
   14320:	0001454d 	.word	0x0001454d
   14324:	0001454d 	.word	0x0001454d
   14328:	00014551 	.word	0x00014551
   1432c:	0001454d 	.word	0x0001454d
   14330:	0001454d 	.word	0x0001454d
   14334:	0001454d 	.word	0x0001454d
   14338:	0001454d 	.word	0x0001454d
   1433c:	0001454d 	.word	0x0001454d
   14340:	0001454d 	.word	0x0001454d
   14344:	0001454d 	.word	0x0001454d
   14348:	0001454d 	.word	0x0001454d
   1434c:	0001454d 	.word	0x0001454d
   14350:	0001454d 	.word	0x0001454d
   14354:	0001454d 	.word	0x0001454d
   14358:	0001454d 	.word	0x0001454d
   1435c:	0001454d 	.word	0x0001454d
   14360:	0001454d 	.word	0x0001454d
   14364:	0001454d 	.word	0x0001454d
   14368:	0001454d 	.word	0x0001454d
   1436c:	0001454d 	.word	0x0001454d
   14370:	0001454d 	.word	0x0001454d
   14374:	0001454d 	.word	0x0001454d
   14378:	0001454d 	.word	0x0001454d
   1437c:	0001454d 	.word	0x0001454d
   14380:	0001454d 	.word	0x0001454d
   14384:	0001454d 	.word	0x0001454d
   14388:	0001454d 	.word	0x0001454d
   1438c:	0001454d 	.word	0x0001454d
   14390:	0001454d 	.word	0x0001454d
   14394:	0001454d 	.word	0x0001454d
   14398:	0001454d 	.word	0x0001454d
   1439c:	0001454d 	.word	0x0001454d
   143a0:	0001454d 	.word	0x0001454d
   143a4:	0001454d 	.word	0x0001454d
   143a8:	00014551 	.word	0x00014551
   143ac:	00014551 	.word	0x00014551
   143b0:	00014551 	.word	0x00014551
   143b4:	0001454d 	.word	0x0001454d
   143b8:	0001454d 	.word	0x0001454d
   143bc:	0001454d 	.word	0x0001454d
   143c0:	0001454d 	.word	0x0001454d
   143c4:	0001454d 	.word	0x0001454d
   143c8:	0001454d 	.word	0x0001454d
   143cc:	0001454d 	.word	0x0001454d
   143d0:	0001454d 	.word	0x0001454d
   143d4:	0001454d 	.word	0x0001454d
   143d8:	0001454d 	.word	0x0001454d
   143dc:	0001454d 	.word	0x0001454d
   143e0:	0001454d 	.word	0x0001454d
   143e4:	0001454d 	.word	0x0001454d
   143e8:	0001454d 	.word	0x0001454d
   143ec:	0001454d 	.word	0x0001454d
   143f0:	0001454d 	.word	0x0001454d
   143f4:	00014521 	.word	0x00014521
   143f8:	0001454d 	.word	0x0001454d
   143fc:	0001454d 	.word	0x0001454d
   14400:	0001454d 	.word	0x0001454d
   14404:	0001454d 	.word	0x0001454d
   14408:	0001454d 	.word	0x0001454d
   1440c:	0001454d 	.word	0x0001454d
   14410:	0001454d 	.word	0x0001454d
   14414:	0001454d 	.word	0x0001454d
   14418:	0001454d 	.word	0x0001454d
   1441c:	00014479 	.word	0x00014479
   14420:	0001449d 	.word	0x0001449d
   14424:	000144c7 	.word	0x000144c7
   14428:	00014551 	.word	0x00014551
   1442c:	00014551 	.word	0x00014551
   14430:	00014551 	.word	0x00014551
   14434:	0001454d 	.word	0x0001454d
   14438:	0001454d 	.word	0x0001454d
   1443c:	0001454d 	.word	0x0001454d
   14440:	0001454d 	.word	0x0001454d
   14444:	0001454d 	.word	0x0001454d
   14448:	0001454d 	.word	0x0001454d
   1444c:	000144c7 	.word	0x000144c7
   14450:	000144eb 	.word	0x000144eb
   14454:	0001454d 	.word	0x0001454d
   14458:	0001454d 	.word	0x0001454d
   1445c:	0001454d 	.word	0x0001454d
   14460:	0001454d 	.word	0x0001454d
   14464:	0001454d 	.word	0x0001454d
   14468:	0001454d 	.word	0x0001454d
   1446c:	0001454d 	.word	0x0001454d
   14470:	0001454d 	.word	0x0001454d
   14474:	00014521 	.word	0x00014521
                case 'b':
                    mp_print_mp_int(&print, arg, 2, 'a', flags, fill, width, 0);
   14478:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   1447a:	f107 004c 	add.w	r0, r7, #76	; 0x4c
   1447e:	2200      	movs	r2, #0
   14480:	9203      	str	r2, [sp, #12]
   14482:	9302      	str	r3, [sp, #8]
   14484:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
   14488:	9301      	str	r3, [sp, #4]
   1448a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   1448c:	9300      	str	r3, [sp, #0]
   1448e:	2361      	movs	r3, #97	; 0x61
   14490:	2202      	movs	r2, #2
   14492:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
   14496:	f7ed fc05 	bl	1ca4 <mp_print_mp_int>
                    continue;
   1449a:	e0a0      	b.n	145de <mp_obj_str_format_helper+0x93e>

                case 'c':
                {
                    char ch = mp_obj_get_int(arg);
   1449c:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
   144a0:	f7f9 fce6 	bl	de70 <mp_obj_get_int>
   144a4:	4603      	mov	r3, r0
   144a6:	b2db      	uxtb	r3, r3
   144a8:	75fb      	strb	r3, [r7, #23]
                    mp_print_strn(&print, &ch, 1, flags, fill, width);
   144aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   144ac:	f107 0117 	add.w	r1, r7, #23
   144b0:	f107 004c 	add.w	r0, r7, #76	; 0x4c
   144b4:	9301      	str	r3, [sp, #4]
   144b6:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
   144ba:	9300      	str	r3, [sp, #0]
   144bc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   144be:	2201      	movs	r2, #1
   144c0:	f7ed fab0 	bl	1a24 <mp_print_strn>
   144c4:	e08b      	b.n	145de <mp_obj_str_format_helper+0x93e>
                }

                case '\0':  // No explicit format type implies 'd'
                case 'n':   // I don't think we support locales in uPy so use 'd'
                case 'd':
                    mp_print_mp_int(&print, arg, 10, 'a', flags, fill, width, 0);
   144c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   144c8:	f107 004c 	add.w	r0, r7, #76	; 0x4c
   144cc:	2200      	movs	r2, #0
   144ce:	9203      	str	r2, [sp, #12]
   144d0:	9302      	str	r3, [sp, #8]
   144d2:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
   144d6:	9301      	str	r3, [sp, #4]
   144d8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   144da:	9300      	str	r3, [sp, #0]
   144dc:	2361      	movs	r3, #97	; 0x61
   144de:	220a      	movs	r2, #10
   144e0:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
   144e4:	f7ed fbde 	bl	1ca4 <mp_print_mp_int>
                    continue;
   144e8:	e079      	b.n	145de <mp_obj_str_format_helper+0x93e>

                case 'o':
                    if (flags & PF_FLAG_SHOW_PREFIX) {
   144ea:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   144ec:	f003 0310 	and.w	r3, r3, #16
   144f0:	2b00      	cmp	r3, #0
   144f2:	d003      	beq.n	144fc <mp_obj_str_format_helper+0x85c>
                        flags |= PF_FLAG_SHOW_OCTAL_LETTER;
   144f4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   144f6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   144fa:	67bb      	str	r3, [r7, #120]	; 0x78
                    }

                    mp_print_mp_int(&print, arg, 8, 'a', flags, fill, width, 0);
   144fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   144fe:	f107 004c 	add.w	r0, r7, #76	; 0x4c
   14502:	2200      	movs	r2, #0
   14504:	9203      	str	r2, [sp, #12]
   14506:	9302      	str	r3, [sp, #8]
   14508:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
   1450c:	9301      	str	r3, [sp, #4]
   1450e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   14510:	9300      	str	r3, [sp, #0]
   14512:	2361      	movs	r3, #97	; 0x61
   14514:	2208      	movs	r2, #8
   14516:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
   1451a:	f7ed fbc3 	bl	1ca4 <mp_print_mp_int>
                    continue;
   1451e:	e05e      	b.n	145de <mp_obj_str_format_helper+0x93e>

                case 'X':
                case 'x':
                    mp_print_mp_int(&print, arg, 16, type - ('X' - 'A'), flags, fill, width, 0);
   14520:	f897 307d 	ldrb.w	r3, [r7, #125]	; 0x7d
   14524:	f1a3 0117 	sub.w	r1, r3, #23
   14528:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   1452a:	f107 004c 	add.w	r0, r7, #76	; 0x4c
   1452e:	2200      	movs	r2, #0
   14530:	9203      	str	r2, [sp, #12]
   14532:	9302      	str	r3, [sp, #8]
   14534:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
   14538:	9301      	str	r3, [sp, #4]
   1453a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   1453c:	9300      	str	r3, [sp, #0]
   1453e:	460b      	mov	r3, r1
   14540:	2210      	movs	r2, #16
   14542:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
   14546:	f7ed fbad 	bl	1ca4 <mp_print_mp_int>
                    continue;
   1454a:	e048      	b.n	145de <mp_obj_str_format_helper+0x93e>
                    // looks like an integer
                    break;

                default:
                    if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
                        terse_str_format_value_error();
   1454c:	f7ff fba0 	bl	13c90 <terse_str_format_value_error>
                    break;
   14550:	bf00      	nop
            }
        }

        // NOTE: no else here. We need the e, f, g etc formats for integer
        //       arguments (from above if) to take this if.
        if (arg_looks_numeric(arg)) {
   14552:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
   14556:	f7ff fb83 	bl	13c60 <arg_looks_numeric>
   1455a:	4603      	mov	r3, r0
   1455c:	2b00      	cmp	r3, #0
   1455e:	d00f      	beq.n	14580 <mp_obj_str_format_helper+0x8e0>
            if (!type) {
   14560:	f897 307d 	ldrb.w	r3, [r7, #125]	; 0x7d
   14564:	2b00      	cmp	r3, #0
   14566:	d102      	bne.n	1456e <mp_obj_str_format_helper+0x8ce>
                // CPython sources say:
                //   Omitted type specifier.  Behaves in the same way as repr(x)
                //   and str(x) if no precision is given, else like 'g', but with
                //   at least one digit after the decimal point. */

                type = 'g';
   14568:	2367      	movs	r3, #103	; 0x67
   1456a:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d
            }
            if (type == 'n') {
   1456e:	f897 307d 	ldrb.w	r3, [r7, #125]	; 0x7d
   14572:	2b6e      	cmp	r3, #110	; 0x6e
   14574:	d102      	bne.n	1457c <mp_obj_str_format_helper+0x8dc>
                type = 'g';
   14576:	2367      	movs	r3, #103	; 0x67
   14578:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d
                    break;
#endif

                default:
                    if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
                        terse_str_format_value_error();
   1457c:	f7ff fb88 	bl	13c90 <terse_str_format_value_error>
                    }
            }
        } else {
            // arg doesn't look like a number

            if (align == '=') {
   14580:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
   14584:	2b3d      	cmp	r3, #61	; 0x3d
   14586:	d101      	bne.n	1458c <mp_obj_str_format_helper+0x8ec>
                if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
                    terse_str_format_value_error();
   14588:	f7ff fb82 	bl	13c90 <terse_str_format_value_error>
                    mp_raise_ValueError(
                        "'=' alignment not allowed in string format specifier");
                }
            }

            switch (type) {
   1458c:	f897 307d 	ldrb.w	r3, [r7, #125]	; 0x7d
   14590:	2b00      	cmp	r3, #0
   14592:	d001      	beq.n	14598 <mp_obj_str_format_helper+0x8f8>
   14594:	2b73      	cmp	r3, #115	; 0x73
   14596:	d120      	bne.n	145da <mp_obj_str_format_helper+0x93a>
                case '\0': // no explicit format type implies 's'
                case 's': {
                    size_t slen;
                    const char *s = mp_obj_str_get_data(arg, &slen);
   14598:	f107 0310 	add.w	r3, r7, #16
   1459c:	4619      	mov	r1, r3
   1459e:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
   145a2:	f001 f9bf 	bl	15924 <mp_obj_str_get_data>
   145a6:	6678      	str	r0, [r7, #100]	; 0x64
                    if (precision < 0) {
   145a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   145aa:	2b00      	cmp	r3, #0
   145ac:	da01      	bge.n	145b2 <mp_obj_str_format_helper+0x912>
                        precision = slen;
   145ae:	693b      	ldr	r3, [r7, #16]
   145b0:	647b      	str	r3, [r7, #68]	; 0x44
                    }
                    if (slen > (size_t)precision) {
   145b2:	693b      	ldr	r3, [r7, #16]
   145b4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
   145b6:	4293      	cmp	r3, r2
   145b8:	d901      	bls.n	145be <mp_obj_str_format_helper+0x91e>
                        slen = precision;
   145ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   145bc:	613b      	str	r3, [r7, #16]
                    }
                    mp_print_strn(&print, s, slen, flags, fill, width);
   145be:	693a      	ldr	r2, [r7, #16]
   145c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   145c2:	f107 004c 	add.w	r0, r7, #76	; 0x4c
   145c6:	9301      	str	r3, [sp, #4]
   145c8:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
   145cc:	9300      	str	r3, [sp, #0]
   145ce:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   145d0:	6e79      	ldr	r1, [r7, #100]	; 0x64
   145d2:	f7ed fa27 	bl	1a24 <mp_print_strn>
                    break;
   145d6:	bf00      	nop
   145d8:	e001      	b.n	145de <mp_obj_str_format_helper+0x93e>
                }

                default:
                    if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
                        terse_str_format_value_error();
   145da:	f7ff fb59 	bl	13c90 <terse_str_format_value_error>
    for (; str < top; str++) {
   145de:	68bb      	ldr	r3, [r7, #8]
   145e0:	3301      	adds	r3, #1
   145e2:	60bb      	str	r3, [r7, #8]
   145e4:	68ba      	ldr	r2, [r7, #8]
   145e6:	687b      	ldr	r3, [r7, #4]
   145e8:	429a      	cmp	r2, r3
   145ea:	f4ff ab6a 	bcc.w	13cc2 <mp_obj_str_format_helper+0x22>
                    }
            }
        }
    }

    return vstr;
   145ee:	68fb      	ldr	r3, [r7, #12]
   145f0:	461c      	mov	r4, r3
   145f2:	f107 0354 	add.w	r3, r7, #84	; 0x54
   145f6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   145f8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
   145fc:	68f8      	ldr	r0, [r7, #12]
   145fe:	37a4      	adds	r7, #164	; 0xa4
   14600:	46bd      	mov	sp, r7
   14602:	bd90      	pop	{r4, r7, pc}

00014604 <mp_obj_str_format>:

mp_obj_t mp_obj_str_format(size_t n_args, const mp_obj_t *args, mp_map_t *kwargs) {
   14604:	b580      	push	{r7, lr}
   14606:	b090      	sub	sp, #64	; 0x40
   14608:	af04      	add	r7, sp, #16
   1460a:	60f8      	str	r0, [r7, #12]
   1460c:	60b9      	str	r1, [r7, #8]
   1460e:	607a      	str	r2, [r7, #4]
    mp_check_self(MP_OBJ_IS_STR_OR_BYTES(args[0]));
   14610:	68bb      	ldr	r3, [r7, #8]
   14612:	681b      	ldr	r3, [r3, #0]
   14614:	4618      	mov	r0, r3
   14616:	f7fd ff41 	bl	1249c <MP_OBJ_IS_QSTR>
   1461a:	4603      	mov	r3, r0
   1461c:	f083 0301 	eor.w	r3, r3, #1
   14620:	b2db      	uxtb	r3, r3
   14622:	2b00      	cmp	r3, #0
   14624:	d018      	beq.n	14658 <mp_obj_str_format+0x54>
   14626:	68bb      	ldr	r3, [r7, #8]
   14628:	681b      	ldr	r3, [r3, #0]
   1462a:	4618      	mov	r0, r3
   1462c:	f7fd ff48 	bl	124c0 <MP_OBJ_IS_OBJ>
   14630:	4603      	mov	r3, r0
   14632:	f083 0301 	eor.w	r3, r3, #1
   14636:	b2db      	uxtb	r3, r3
   14638:	2b00      	cmp	r3, #0
   1463a:	d106      	bne.n	1464a <mp_obj_str_format+0x46>
   1463c:	68bb      	ldr	r3, [r7, #8]
   1463e:	681b      	ldr	r3, [r3, #0]
   14640:	681b      	ldr	r3, [r3, #0]
   14642:	699b      	ldr	r3, [r3, #24]
   14644:	4a21      	ldr	r2, [pc, #132]	; (146cc <mp_obj_str_format+0xc8>)
   14646:	4293      	cmp	r3, r2
   14648:	d006      	beq.n	14658 <mp_obj_str_format+0x54>
   1464a:	4b21      	ldr	r3, [pc, #132]	; (146d0 <mp_obj_str_format+0xcc>)
   1464c:	4a21      	ldr	r2, [pc, #132]	; (146d4 <mp_obj_str_format+0xd0>)
   1464e:	f240 5161 	movw	r1, #1377	; 0x561
   14652:	4821      	ldr	r0, [pc, #132]	; (146d8 <mp_obj_str_format+0xd4>)
   14654:	f007 f83c 	bl	1b6d0 <__assert_func>

    GET_STR_DATA_LEN(args[0], str, len);
   14658:	68bb      	ldr	r3, [r7, #8]
   1465a:	681b      	ldr	r3, [r3, #0]
   1465c:	4618      	mov	r0, r3
   1465e:	f7fd ff1d 	bl	1249c <MP_OBJ_IS_QSTR>
   14662:	4603      	mov	r3, r0
   14664:	2b00      	cmp	r3, #0
   14666:	d00a      	beq.n	1467e <mp_obj_str_format+0x7a>
   14668:	68bb      	ldr	r3, [r7, #8]
   1466a:	681b      	ldr	r3, [r3, #0]
   1466c:	089b      	lsrs	r3, r3, #2
   1466e:	f107 0228 	add.w	r2, r7, #40	; 0x28
   14672:	4611      	mov	r1, r2
   14674:	4618      	mov	r0, r3
   14676:	f7ec fe87 	bl	1388 <qstr_data>
   1467a:	62f8      	str	r0, [r7, #44]	; 0x2c
   1467c:	e007      	b.n	1468e <mp_obj_str_format+0x8a>
   1467e:	68bb      	ldr	r3, [r7, #8]
   14680:	681b      	ldr	r3, [r3, #0]
   14682:	689b      	ldr	r3, [r3, #8]
   14684:	62bb      	str	r3, [r7, #40]	; 0x28
   14686:	68bb      	ldr	r3, [r7, #8]
   14688:	681b      	ldr	r3, [r3, #0]
   1468a:	68db      	ldr	r3, [r3, #12]
   1468c:	62fb      	str	r3, [r7, #44]	; 0x2c
    int arg_i = 0;
   1468e:	2300      	movs	r3, #0
   14690:	627b      	str	r3, [r7, #36]	; 0x24
    vstr_t vstr = mp_obj_str_format_helper((const char*)str, (const char*)str + len, &arg_i, n_args, args, kwargs);
   14692:	6abb      	ldr	r3, [r7, #40]	; 0x28
   14694:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   14696:	441a      	add	r2, r3
   14698:	f107 0014 	add.w	r0, r7, #20
   1469c:	f107 0124 	add.w	r1, r7, #36	; 0x24
   146a0:	687b      	ldr	r3, [r7, #4]
   146a2:	9302      	str	r3, [sp, #8]
   146a4:	68bb      	ldr	r3, [r7, #8]
   146a6:	9301      	str	r3, [sp, #4]
   146a8:	68fb      	ldr	r3, [r7, #12]
   146aa:	9300      	str	r3, [sp, #0]
   146ac:	460b      	mov	r3, r1
   146ae:	6af9      	ldr	r1, [r7, #44]	; 0x2c
   146b0:	f7ff faf6 	bl	13ca0 <mp_obj_str_format_helper>
    return mp_obj_new_str_from_vstr(&mp_type_str, &vstr);
   146b4:	f107 0314 	add.w	r3, r7, #20
   146b8:	4619      	mov	r1, r3
   146ba:	4808      	ldr	r0, [pc, #32]	; (146dc <mp_obj_str_format+0xd8>)
   146bc:	f000 ff6e 	bl	1559c <mp_obj_new_str_from_vstr>
   146c0:	4603      	mov	r3, r0
}
   146c2:	4618      	mov	r0, r3
   146c4:	3730      	adds	r7, #48	; 0x30
   146c6:	46bd      	mov	sp, r7
   146c8:	bd80      	pop	{r7, pc}
   146ca:	bf00      	nop
   146cc:	00012b11 	.word	0x00012b11
   146d0:	000236d0 	.word	0x000236d0
   146d4:	00023c04 	.word	0x00023c04
   146d8:	00023634 	.word	0x00023634
   146dc:	00023b0c 	.word	0x00023b0c

000146e0 <str_modulo_format>:
MP_DEFINE_CONST_FUN_OBJ_KW(str_format_obj, 1, mp_obj_str_format);

STATIC mp_obj_t str_modulo_format(mp_obj_t pattern, size_t n_args, const mp_obj_t *args, mp_obj_t dict) {
   146e0:	b590      	push	{r4, r7, lr}
   146e2:	b0a9      	sub	sp, #164	; 0xa4
   146e4:	af04      	add	r7, sp, #16
   146e6:	60f8      	str	r0, [r7, #12]
   146e8:	60b9      	str	r1, [r7, #8]
   146ea:	607a      	str	r2, [r7, #4]
   146ec:	603b      	str	r3, [r7, #0]
    mp_check_self(MP_OBJ_IS_STR_OR_BYTES(pattern));
   146ee:	68f8      	ldr	r0, [r7, #12]
   146f0:	f7fd fed4 	bl	1249c <MP_OBJ_IS_QSTR>
   146f4:	4603      	mov	r3, r0
   146f6:	f083 0301 	eor.w	r3, r3, #1
   146fa:	b2db      	uxtb	r3, r3
   146fc:	2b00      	cmp	r3, #0
   146fe:	d015      	beq.n	1472c <str_modulo_format+0x4c>
   14700:	68f8      	ldr	r0, [r7, #12]
   14702:	f7fd fedd 	bl	124c0 <MP_OBJ_IS_OBJ>
   14706:	4603      	mov	r3, r0
   14708:	f083 0301 	eor.w	r3, r3, #1
   1470c:	b2db      	uxtb	r3, r3
   1470e:	2b00      	cmp	r3, #0
   14710:	d105      	bne.n	1471e <str_modulo_format+0x3e>
   14712:	68fb      	ldr	r3, [r7, #12]
   14714:	681b      	ldr	r3, [r3, #0]
   14716:	699b      	ldr	r3, [r3, #24]
   14718:	4ac4      	ldr	r2, [pc, #784]	; (14a2c <str_modulo_format+0x34c>)
   1471a:	4293      	cmp	r3, r2
   1471c:	d006      	beq.n	1472c <str_modulo_format+0x4c>
   1471e:	4bc4      	ldr	r3, [pc, #784]	; (14a30 <str_modulo_format+0x350>)
   14720:	4ac4      	ldr	r2, [pc, #784]	; (14a34 <str_modulo_format+0x354>)
   14722:	f240 516b 	movw	r1, #1387	; 0x56b
   14726:	48c4      	ldr	r0, [pc, #784]	; (14a38 <str_modulo_format+0x358>)
   14728:	f006 ffd2 	bl	1b6d0 <__assert_func>

    GET_STR_DATA_LEN(pattern, str, len);
   1472c:	68f8      	ldr	r0, [r7, #12]
   1472e:	f7fd feb5 	bl	1249c <MP_OBJ_IS_QSTR>
   14732:	4603      	mov	r3, r0
   14734:	2b00      	cmp	r3, #0
   14736:	d00a      	beq.n	1474e <str_modulo_format+0x6e>
   14738:	68fb      	ldr	r3, [r7, #12]
   1473a:	089b      	lsrs	r3, r3, #2
   1473c:	f107 0254 	add.w	r2, r7, #84	; 0x54
   14740:	4611      	mov	r1, r2
   14742:	4618      	mov	r0, r3
   14744:	f7ec fe20 	bl	1388 <qstr_data>
   14748:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
   1474c:	e006      	b.n	1475c <str_modulo_format+0x7c>
   1474e:	68fb      	ldr	r3, [r7, #12]
   14750:	689b      	ldr	r3, [r3, #8]
   14752:	657b      	str	r3, [r7, #84]	; 0x54
   14754:	68fb      	ldr	r3, [r7, #12]
   14756:	68db      	ldr	r3, [r3, #12]
   14758:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    const byte *start_str = str;
   1475c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
   14760:	66fb      	str	r3, [r7, #108]	; 0x6c
    bool is_bytes = MP_OBJ_IS_TYPE(pattern, &mp_type_bytes);
   14762:	68f8      	ldr	r0, [r7, #12]
   14764:	f7fd feac 	bl	124c0 <MP_OBJ_IS_OBJ>
   14768:	4603      	mov	r3, r0
   1476a:	2b00      	cmp	r3, #0
   1476c:	d006      	beq.n	1477c <str_modulo_format+0x9c>
   1476e:	68fb      	ldr	r3, [r7, #12]
   14770:	681b      	ldr	r3, [r3, #0]
   14772:	4ab2      	ldr	r2, [pc, #712]	; (14a3c <str_modulo_format+0x35c>)
   14774:	4293      	cmp	r3, r2
   14776:	d101      	bne.n	1477c <str_modulo_format+0x9c>
   14778:	2301      	movs	r3, #1
   1477a:	e000      	b.n	1477e <str_modulo_format+0x9e>
   1477c:	2300      	movs	r3, #0
   1477e:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
   14782:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
   14786:	f003 0301 	and.w	r3, r3, #1
   1478a:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
    size_t arg_i = 0;
   1478e:	2300      	movs	r3, #0
   14790:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    vstr_t vstr;
    mp_print_t print;
    vstr_init_print(&vstr, 16, &print);
   14794:	f107 023c 	add.w	r2, r7, #60	; 0x3c
   14798:	f107 0344 	add.w	r3, r7, #68	; 0x44
   1479c:	2110      	movs	r1, #16
   1479e:	4618      	mov	r0, r3
   147a0:	f7ec feb8 	bl	1514 <vstr_init_print>

    for (const byte *top = str + len; str < top; str++) {
   147a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   147a6:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
   147aa:	4413      	add	r3, r2
   147ac:	667b      	str	r3, [r7, #100]	; 0x64
   147ae:	e296      	b.n	14cde <str_modulo_format+0x5fe>
        mp_obj_t arg = MP_OBJ_NULL;
   147b0:	2300      	movs	r3, #0
   147b2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
        if (*str != '%') {
   147b6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
   147ba:	781b      	ldrb	r3, [r3, #0]
   147bc:	2b25      	cmp	r3, #37	; 0x25
   147be:	d009      	beq.n	147d4 <str_modulo_format+0xf4>
            vstr_add_byte(&vstr, *str);
   147c0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
   147c4:	781a      	ldrb	r2, [r3, #0]
   147c6:	f107 0344 	add.w	r3, r7, #68	; 0x44
   147ca:	4611      	mov	r1, r2
   147cc:	4618      	mov	r0, r3
   147ce:	f7ec ffa9 	bl	1724 <vstr_add_byte>
            continue;
   147d2:	e27f      	b.n	14cd4 <str_modulo_format+0x5f4>
        }
        if (++str >= top) {
   147d4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
   147d8:	3301      	adds	r3, #1
   147da:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   147de:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
   147e2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   147e4:	429a      	cmp	r2, r3
   147e6:	f080 810d 	bcs.w	14a04 <str_modulo_format+0x324>
            goto incomplete_format;
        }
        if (*str == '%') {
   147ea:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
   147ee:	781b      	ldrb	r3, [r3, #0]
   147f0:	2b25      	cmp	r3, #37	; 0x25
   147f2:	d106      	bne.n	14802 <str_modulo_format+0x122>
            vstr_add_byte(&vstr, '%');
   147f4:	f107 0344 	add.w	r3, r7, #68	; 0x44
   147f8:	2125      	movs	r1, #37	; 0x25
   147fa:	4618      	mov	r0, r3
   147fc:	f7ec ff92 	bl	1724 <vstr_add_byte>
            continue;
   14800:	e268      	b.n	14cd4 <str_modulo_format+0x5f4>
        }

        // Dictionary value lookup
        if (*str == '(') {
   14802:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
   14806:	781b      	ldrb	r3, [r3, #0]
   14808:	2b28      	cmp	r3, #40	; 0x28
   1480a:	d136      	bne.n	1487a <str_modulo_format+0x19a>
            if (dict == MP_OBJ_NULL) {
   1480c:	683b      	ldr	r3, [r7, #0]
   1480e:	2b00      	cmp	r3, #0
   14810:	d102      	bne.n	14818 <str_modulo_format+0x138>
                mp_raise_TypeError("format requires a dict");
   14812:	488b      	ldr	r0, [pc, #556]	; (14a40 <str_modulo_format+0x360>)
   14814:	f7f8 fcee 	bl	d1f4 <mp_raise_TypeError>
            }
            arg_i = 1; // we used up the single dict argument
   14818:	2301      	movs	r3, #1
   1481a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
            const byte *key = ++str;
   1481e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
   14822:	3301      	adds	r3, #1
   14824:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   14828:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
   1482c:	663b      	str	r3, [r7, #96]	; 0x60
            while (*str != ')') {
   1482e:	e00b      	b.n	14848 <str_modulo_format+0x168>
                if (str >= top) {
   14830:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
   14834:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   14836:	429a      	cmp	r2, r3
   14838:	d301      	bcc.n	1483e <str_modulo_format+0x15e>
                    if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
                        terse_str_format_value_error();
   1483a:	f7ff fa29 	bl	13c90 <terse_str_format_value_error>
                    } else {
                        mp_raise_ValueError("incomplete format key");
                    }
                }
                ++str;
   1483e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
   14842:	3301      	adds	r3, #1
   14844:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
            while (*str != ')') {
   14848:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
   1484c:	781b      	ldrb	r3, [r3, #0]
   1484e:	2b29      	cmp	r3, #41	; 0x29
   14850:	d1ee      	bne.n	14830 <str_modulo_format+0x150>
            }
            mp_obj_t k_obj = mp_obj_new_str_via_qstr((const char*)key, str - key);
   14852:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
   14856:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   14858:	1ad3      	subs	r3, r2, r3
   1485a:	4619      	mov	r1, r3
   1485c:	6e38      	ldr	r0, [r7, #96]	; 0x60
   1485e:	f000 fe8b 	bl	15578 <mp_obj_new_str_via_qstr>
   14862:	65f8      	str	r0, [r7, #92]	; 0x5c
            arg = mp_obj_dict_get(dict, k_obj);
   14864:	6df9      	ldr	r1, [r7, #92]	; 0x5c
   14866:	6838      	ldr	r0, [r7, #0]
   14868:	f7fa f8c2 	bl	e9f0 <mp_obj_dict_get>
   1486c:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
            str++;
   14870:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
   14874:	3301      	adds	r3, #1
   14876:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
        }

        int flags = 0;
   1487a:	2300      	movs	r3, #0
   1487c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
        char fill = ' ';
   14880:	2320      	movs	r3, #32
   14882:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
        int alt = 0;
   14886:	2300      	movs	r3, #0
   14888:	67bb      	str	r3, [r7, #120]	; 0x78
        while (str < top) {
   1488a:	e03e      	b.n	1490a <str_modulo_format+0x22a>
            if (*str == '-')      flags |= PF_FLAG_LEFT_ADJUST;
   1488c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
   14890:	781b      	ldrb	r3, [r3, #0]
   14892:	2b2d      	cmp	r3, #45	; 0x2d
   14894:	d106      	bne.n	148a4 <str_modulo_format+0x1c4>
   14896:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
   1489a:	f043 0301 	orr.w	r3, r3, #1
   1489e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   148a2:	e02d      	b.n	14900 <str_modulo_format+0x220>
            else if (*str == '+') flags |= PF_FLAG_SHOW_SIGN;
   148a4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
   148a8:	781b      	ldrb	r3, [r3, #0]
   148aa:	2b2b      	cmp	r3, #43	; 0x2b
   148ac:	d106      	bne.n	148bc <str_modulo_format+0x1dc>
   148ae:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
   148b2:	f043 0302 	orr.w	r3, r3, #2
   148b6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   148ba:	e021      	b.n	14900 <str_modulo_format+0x220>
            else if (*str == ' ') flags |= PF_FLAG_SPACE_SIGN;
   148bc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
   148c0:	781b      	ldrb	r3, [r3, #0]
   148c2:	2b20      	cmp	r3, #32
   148c4:	d106      	bne.n	148d4 <str_modulo_format+0x1f4>
   148c6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
   148ca:	f043 0304 	orr.w	r3, r3, #4
   148ce:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   148d2:	e015      	b.n	14900 <str_modulo_format+0x220>
            else if (*str == '#') alt = PF_FLAG_SHOW_PREFIX;
   148d4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
   148d8:	781b      	ldrb	r3, [r3, #0]
   148da:	2b23      	cmp	r3, #35	; 0x23
   148dc:	d102      	bne.n	148e4 <str_modulo_format+0x204>
   148de:	2310      	movs	r3, #16
   148e0:	67bb      	str	r3, [r7, #120]	; 0x78
   148e2:	e00d      	b.n	14900 <str_modulo_format+0x220>
            else if (*str == '0') {
   148e4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
   148e8:	781b      	ldrb	r3, [r3, #0]
   148ea:	2b30      	cmp	r3, #48	; 0x30
   148ec:	d113      	bne.n	14916 <str_modulo_format+0x236>
                flags |= PF_FLAG_PAD_AFTER_SIGN;
   148ee:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
   148f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   148f6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                fill = '0';
   148fa:	2330      	movs	r3, #48	; 0x30
   148fc:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            } else break;
            str++;
   14900:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
   14904:	3301      	adds	r3, #1
   14906:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
        while (str < top) {
   1490a:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
   1490e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   14910:	429a      	cmp	r2, r3
   14912:	d3bb      	bcc.n	1488c <str_modulo_format+0x1ac>
   14914:	e000      	b.n	14918 <str_modulo_format+0x238>
            } else break;
   14916:	bf00      	nop
        }
        // parse width, if it exists
        int width = 0;
   14918:	2300      	movs	r3, #0
   1491a:	63bb      	str	r3, [r7, #56]	; 0x38
        if (str < top) {
   1491c:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
   14920:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   14922:	429a      	cmp	r2, r3
   14924:	d227      	bcs.n	14976 <str_modulo_format+0x296>
            if (*str == '*') {
   14926:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
   1492a:	781b      	ldrb	r3, [r3, #0]
   1492c:	2b2a      	cmp	r3, #42	; 0x2a
   1492e:	d118      	bne.n	14962 <str_modulo_format+0x282>
                if (arg_i >= n_args) {
   14930:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
   14934:	68bb      	ldr	r3, [r7, #8]
   14936:	429a      	cmp	r2, r3
   14938:	d271      	bcs.n	14a1e <str_modulo_format+0x33e>
                    goto not_enough_args;
                }
                width = mp_obj_get_int(args[arg_i++]);
   1493a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
   1493e:	1c5a      	adds	r2, r3, #1
   14940:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
   14944:	009b      	lsls	r3, r3, #2
   14946:	687a      	ldr	r2, [r7, #4]
   14948:	4413      	add	r3, r2
   1494a:	681b      	ldr	r3, [r3, #0]
   1494c:	4618      	mov	r0, r3
   1494e:	f7f9 fa8f 	bl	de70 <mp_obj_get_int>
   14952:	4603      	mov	r3, r0
   14954:	63bb      	str	r3, [r7, #56]	; 0x38
                str++;
   14956:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
   1495a:	3301      	adds	r3, #1
   1495c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   14960:	e009      	b.n	14976 <str_modulo_format+0x296>
            } else {
                str = (const byte*)str_to_int((const char*)str, (const char*)top, &width);
   14962:	f107 0338 	add.w	r3, r7, #56	; 0x38
   14966:	461a      	mov	r2, r3
   14968:	6e79      	ldr	r1, [r7, #100]	; 0x64
   1496a:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
   1496e:	f7ff f8d9 	bl	13b24 <str_to_int>
   14972:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
            }
        }
        int prec = -1;
   14976:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1497a:	637b      	str	r3, [r7, #52]	; 0x34
        if (str < top && *str == '.') {
   1497c:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
   14980:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   14982:	429a      	cmp	r2, r3
   14984:	d238      	bcs.n	149f8 <str_modulo_format+0x318>
   14986:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
   1498a:	781b      	ldrb	r3, [r3, #0]
   1498c:	2b2e      	cmp	r3, #46	; 0x2e
   1498e:	d133      	bne.n	149f8 <str_modulo_format+0x318>
            if (++str < top) {
   14990:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
   14994:	3301      	adds	r3, #1
   14996:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   1499a:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
   1499e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   149a0:	429a      	cmp	r2, r3
   149a2:	d229      	bcs.n	149f8 <str_modulo_format+0x318>
                if (*str == '*') {
   149a4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
   149a8:	781b      	ldrb	r3, [r3, #0]
   149aa:	2b2a      	cmp	r3, #42	; 0x2a
   149ac:	d118      	bne.n	149e0 <str_modulo_format+0x300>
                    if (arg_i >= n_args) {
   149ae:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
   149b2:	68bb      	ldr	r3, [r7, #8]
   149b4:	429a      	cmp	r2, r3
   149b6:	d234      	bcs.n	14a22 <str_modulo_format+0x342>
                        goto not_enough_args;
                    }
                    prec = mp_obj_get_int(args[arg_i++]);
   149b8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
   149bc:	1c5a      	adds	r2, r3, #1
   149be:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
   149c2:	009b      	lsls	r3, r3, #2
   149c4:	687a      	ldr	r2, [r7, #4]
   149c6:	4413      	add	r3, r2
   149c8:	681b      	ldr	r3, [r3, #0]
   149ca:	4618      	mov	r0, r3
   149cc:	f7f9 fa50 	bl	de70 <mp_obj_get_int>
   149d0:	4603      	mov	r3, r0
   149d2:	637b      	str	r3, [r7, #52]	; 0x34
                    str++;
   149d4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
   149d8:	3301      	adds	r3, #1
   149da:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   149de:	e00b      	b.n	149f8 <str_modulo_format+0x318>
                } else {
                    prec = 0;
   149e0:	2300      	movs	r3, #0
   149e2:	637b      	str	r3, [r7, #52]	; 0x34
                    str = (const byte*)str_to_int((const char*)str, (const char*)top, &prec);
   149e4:	f107 0334 	add.w	r3, r7, #52	; 0x34
   149e8:	461a      	mov	r2, r3
   149ea:	6e79      	ldr	r1, [r7, #100]	; 0x64
   149ec:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
   149f0:	f7ff f898 	bl	13b24 <str_to_int>
   149f4:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
                }
            }
        }

        if (str >= top) {
   149f8:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
   149fc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   149fe:	429a      	cmp	r2, r3
   14a00:	d303      	bcc.n	14a0a <str_modulo_format+0x32a>
   14a02:	e000      	b.n	14a06 <str_modulo_format+0x326>
            goto incomplete_format;
   14a04:	bf00      	nop
incomplete_format:
            if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
                terse_str_format_value_error();
   14a06:	f7ff f943 	bl	13c90 <terse_str_format_value_error>
                mp_raise_ValueError("incomplete format");
            }
        }

        // Tuple value lookup
        if (arg == MP_OBJ_NULL) {
   14a0a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
   14a0e:	2b00      	cmp	r3, #0
   14a10:	d125      	bne.n	14a5e <str_modulo_format+0x37e>
            if (arg_i >= n_args) {
   14a12:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
   14a16:	68bb      	ldr	r3, [r7, #8]
   14a18:	429a      	cmp	r2, r3
   14a1a:	d315      	bcc.n	14a48 <str_modulo_format+0x368>
   14a1c:	e002      	b.n	14a24 <str_modulo_format+0x344>
                    goto not_enough_args;
   14a1e:	bf00      	nop
   14a20:	e000      	b.n	14a24 <str_modulo_format+0x344>
                        goto not_enough_args;
   14a22:	bf00      	nop
not_enough_args:
                mp_raise_TypeError("not enough arguments for format string");
   14a24:	4807      	ldr	r0, [pc, #28]	; (14a44 <str_modulo_format+0x364>)
   14a26:	f7f8 fbe5 	bl	d1f4 <mp_raise_TypeError>
   14a2a:	bf00      	nop
   14a2c:	00012b11 	.word	0x00012b11
   14a30:	000238bc 	.word	0x000238bc
   14a34:	00023c18 	.word	0x00023c18
   14a38:	00023634 	.word	0x00023634
   14a3c:	00023b48 	.word	0x00023b48
   14a40:	00023944 	.word	0x00023944
   14a44:	0002395c 	.word	0x0002395c
            }
            arg = args[arg_i++];
   14a48:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
   14a4c:	1c5a      	adds	r2, r3, #1
   14a4e:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
   14a52:	009b      	lsls	r3, r3, #2
   14a54:	687a      	ldr	r2, [r7, #4]
   14a56:	4413      	add	r3, r2
   14a58:	681b      	ldr	r3, [r3, #0]
   14a5a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
        }
        switch (*str) {
   14a5e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
   14a62:	781b      	ldrb	r3, [r3, #0]
   14a64:	3b58      	subs	r3, #88	; 0x58
   14a66:	2b20      	cmp	r3, #32
   14a68:	f200 8132 	bhi.w	14cd0 <str_modulo_format+0x5f0>
   14a6c:	a201      	add	r2, pc, #4	; (adr r2, 14a74 <str_modulo_format+0x394>)
   14a6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   14a72:	bf00      	nop
   14a74:	00014c9d 	.word	0x00014c9d
   14a78:	00014cd1 	.word	0x00014cd1
   14a7c:	00014cd1 	.word	0x00014cd1
   14a80:	00014cd1 	.word	0x00014cd1
   14a84:	00014cd1 	.word	0x00014cd1
   14a88:	00014cd1 	.word	0x00014cd1
   14a8c:	00014cd1 	.word	0x00014cd1
   14a90:	00014cd1 	.word	0x00014cd1
   14a94:	00014cd1 	.word	0x00014cd1
   14a98:	00014cd1 	.word	0x00014cd1
   14a9c:	00014cd1 	.word	0x00014cd1
   14aa0:	00014af9 	.word	0x00014af9
   14aa4:	00014b99 	.word	0x00014b99
   14aa8:	00014cd1 	.word	0x00014cd1
   14aac:	00014cd1 	.word	0x00014cd1
   14ab0:	00014cd1 	.word	0x00014cd1
   14ab4:	00014cd1 	.word	0x00014cd1
   14ab8:	00014b99 	.word	0x00014b99
   14abc:	00014cd1 	.word	0x00014cd1
   14ac0:	00014cd1 	.word	0x00014cd1
   14ac4:	00014cd1 	.word	0x00014cd1
   14ac8:	00014cd1 	.word	0x00014cd1
   14acc:	00014cd1 	.word	0x00014cd1
   14ad0:	00014bc5 	.word	0x00014bc5
   14ad4:	00014cd1 	.word	0x00014cd1
   14ad8:	00014cd1 	.word	0x00014cd1
   14adc:	00014bfd 	.word	0x00014bfd
   14ae0:	00014bfd 	.word	0x00014bfd
   14ae4:	00014cd1 	.word	0x00014cd1
   14ae8:	00014b99 	.word	0x00014b99
   14aec:	00014cd1 	.word	0x00014cd1
   14af0:	00014cd1 	.word	0x00014cd1
   14af4:	00014c9d 	.word	0x00014c9d
            case 'c':
                if (MP_OBJ_IS_STR(arg)) {
   14af8:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
   14afc:	f7fd fcce 	bl	1249c <MP_OBJ_IS_QSTR>
   14b00:	4603      	mov	r3, r0
   14b02:	2b00      	cmp	r3, #0
   14b04:	d10c      	bne.n	14b20 <str_modulo_format+0x440>
   14b06:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
   14b0a:	f7fd fcd9 	bl	124c0 <MP_OBJ_IS_OBJ>
   14b0e:	4603      	mov	r3, r0
   14b10:	2b00      	cmp	r3, #0
   14b12:	d021      	beq.n	14b58 <str_modulo_format+0x478>
   14b14:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
   14b18:	681b      	ldr	r3, [r3, #0]
   14b1a:	4a81      	ldr	r2, [pc, #516]	; (14d20 <str_modulo_format+0x640>)
   14b1c:	4293      	cmp	r3, r2
   14b1e:	d11b      	bne.n	14b58 <str_modulo_format+0x478>
                    size_t slen;
                    const char *s = mp_obj_str_get_data(arg, &slen);
   14b20:	f107 0330 	add.w	r3, r7, #48	; 0x30
   14b24:	4619      	mov	r1, r3
   14b26:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
   14b2a:	f000 fefb 	bl	15924 <mp_obj_str_get_data>
   14b2e:	65b8      	str	r0, [r7, #88]	; 0x58
                    if (slen != 1) {
   14b30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   14b32:	2b01      	cmp	r3, #1
   14b34:	d002      	beq.n	14b3c <str_modulo_format+0x45c>
                        mp_raise_TypeError("%%c requires int or char");
   14b36:	487b      	ldr	r0, [pc, #492]	; (14d24 <str_modulo_format+0x644>)
   14b38:	f7f8 fb5c 	bl	d1f4 <mp_raise_TypeError>
                    }
                    mp_print_strn(&print, s, 1, flags, ' ', width);
   14b3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   14b3e:	f107 003c 	add.w	r0, r7, #60	; 0x3c
   14b42:	9301      	str	r3, [sp, #4]
   14b44:	2320      	movs	r3, #32
   14b46:	9300      	str	r3, [sp, #0]
   14b48:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
   14b4c:	2201      	movs	r2, #1
   14b4e:	6db9      	ldr	r1, [r7, #88]	; 0x58
   14b50:	f7ec ff68 	bl	1a24 <mp_print_strn>
                if (MP_OBJ_IS_STR(arg)) {
   14b54:	bf00      	nop
                    char ch = mp_obj_get_int(arg);
                    mp_print_strn(&print, &ch, 1, flags, ' ', width);
                } else {
                    mp_raise_TypeError("integer required");
                }
                break;
   14b56:	e0bd      	b.n	14cd4 <str_modulo_format+0x5f4>
                } else if (arg_looks_integer(arg)) {
   14b58:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
   14b5c:	f7ff f852 	bl	13c04 <arg_looks_integer>
   14b60:	4603      	mov	r3, r0
   14b62:	2b00      	cmp	r3, #0
   14b64:	d015      	beq.n	14b92 <str_modulo_format+0x4b2>
                    char ch = mp_obj_get_int(arg);
   14b66:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
   14b6a:	f7f9 f981 	bl	de70 <mp_obj_get_int>
   14b6e:	4603      	mov	r3, r0
   14b70:	b2db      	uxtb	r3, r3
   14b72:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                    mp_print_strn(&print, &ch, 1, flags, ' ', width);
   14b76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   14b78:	f107 012f 	add.w	r1, r7, #47	; 0x2f
   14b7c:	f107 003c 	add.w	r0, r7, #60	; 0x3c
   14b80:	9301      	str	r3, [sp, #4]
   14b82:	2320      	movs	r3, #32
   14b84:	9300      	str	r3, [sp, #0]
   14b86:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
   14b8a:	2201      	movs	r2, #1
   14b8c:	f7ec ff4a 	bl	1a24 <mp_print_strn>
                break;
   14b90:	e0a0      	b.n	14cd4 <str_modulo_format+0x5f4>
                    mp_raise_TypeError("integer required");
   14b92:	4865      	ldr	r0, [pc, #404]	; (14d28 <str_modulo_format+0x648>)
   14b94:	f7f8 fb2e 	bl	d1f4 <mp_raise_TypeError>

            case 'd':
            case 'i':
            case 'u':
                mp_print_mp_int(&print, arg_as_int(arg), 10, 'a', flags, fill, width, prec);
   14b98:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
   14b9c:	f7ff f86c 	bl	13c78 <arg_as_int>
   14ba0:	4601      	mov	r1, r0
   14ba2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   14ba4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   14ba6:	f107 003c 	add.w	r0, r7, #60	; 0x3c
   14baa:	9203      	str	r2, [sp, #12]
   14bac:	9302      	str	r3, [sp, #8]
   14bae:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
   14bb2:	9301      	str	r3, [sp, #4]
   14bb4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
   14bb8:	9300      	str	r3, [sp, #0]
   14bba:	2361      	movs	r3, #97	; 0x61
   14bbc:	220a      	movs	r2, #10
   14bbe:	f7ed f871 	bl	1ca4 <mp_print_mp_int>
                break;
   14bc2:	e087      	b.n	14cd4 <str_modulo_format+0x5f4>
                mp_print_float(&print, mp_obj_get_float(arg), *str, flags, fill, width, prec);
                break;
#endif

            case 'o':
                if (alt) {
   14bc4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   14bc6:	2b00      	cmp	r3, #0
   14bc8:	d005      	beq.n	14bd6 <str_modulo_format+0x4f6>
                    flags |= (PF_FLAG_SHOW_PREFIX | PF_FLAG_SHOW_OCTAL_LETTER);
   14bca:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
   14bce:	f443 7304 	orr.w	r3, r3, #528	; 0x210
   14bd2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                }
                mp_print_mp_int(&print, arg, 8, 'a', flags, fill, width, prec);
   14bd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   14bd8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   14bda:	f107 003c 	add.w	r0, r7, #60	; 0x3c
   14bde:	9203      	str	r2, [sp, #12]
   14be0:	9302      	str	r3, [sp, #8]
   14be2:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
   14be6:	9301      	str	r3, [sp, #4]
   14be8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
   14bec:	9300      	str	r3, [sp, #0]
   14bee:	2361      	movs	r3, #97	; 0x61
   14bf0:	2208      	movs	r2, #8
   14bf2:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
   14bf6:	f7ed f855 	bl	1ca4 <mp_print_mp_int>
                break;
   14bfa:	e06b      	b.n	14cd4 <str_modulo_format+0x5f4>
            case 'r':
            case 's':
            {
                vstr_t arg_vstr;
                mp_print_t arg_print;
                vstr_init_print(&arg_vstr, 16, &arg_print);
   14bfc:	f107 0214 	add.w	r2, r7, #20
   14c00:	f107 031c 	add.w	r3, r7, #28
   14c04:	2110      	movs	r1, #16
   14c06:	4618      	mov	r0, r3
   14c08:	f7ec fc84 	bl	1514 <vstr_init_print>
                mp_print_kind_t print_kind = (*str == 'r' ? PRINT_REPR : PRINT_STR);
   14c0c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
   14c10:	781b      	ldrb	r3, [r3, #0]
   14c12:	2b72      	cmp	r3, #114	; 0x72
   14c14:	bf0c      	ite	eq
   14c16:	2301      	moveq	r3, #1
   14c18:	2300      	movne	r3, #0
   14c1a:	b2db      	uxtb	r3, r3
   14c1c:	677b      	str	r3, [r7, #116]	; 0x74
                if (print_kind == PRINT_STR && is_bytes && MP_OBJ_IS_TYPE(arg, &mp_type_bytes)) {
   14c1e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   14c20:	2b00      	cmp	r3, #0
   14c22:	d112      	bne.n	14c4a <str_modulo_format+0x56a>
   14c24:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
   14c28:	2b00      	cmp	r3, #0
   14c2a:	d00e      	beq.n	14c4a <str_modulo_format+0x56a>
   14c2c:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
   14c30:	f7fd fc46 	bl	124c0 <MP_OBJ_IS_OBJ>
   14c34:	4603      	mov	r3, r0
   14c36:	2b00      	cmp	r3, #0
   14c38:	d007      	beq.n	14c4a <str_modulo_format+0x56a>
   14c3a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
   14c3e:	681b      	ldr	r3, [r3, #0]
   14c40:	4a3a      	ldr	r2, [pc, #232]	; (14d2c <str_modulo_format+0x64c>)
   14c42:	4293      	cmp	r3, r2
   14c44:	d101      	bne.n	14c4a <str_modulo_format+0x56a>
                    // If we have something like b"%s" % b"1", bytes arg should be
                    // printed undecorated.
                    print_kind = PRINT_RAW;
   14c46:	2304      	movs	r3, #4
   14c48:	677b      	str	r3, [r7, #116]	; 0x74
                }
                mp_obj_print_helper(&arg_print, arg, print_kind);
   14c4a:	f107 0314 	add.w	r3, r7, #20
   14c4e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
   14c50:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
   14c54:	4618      	mov	r0, r3
   14c56:	f7f8 ff5f 	bl	db18 <mp_obj_print_helper>
                uint vlen = arg_vstr.len;
   14c5a:	6a3b      	ldr	r3, [r7, #32]
   14c5c:	673b      	str	r3, [r7, #112]	; 0x70
                if (prec < 0) {
   14c5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   14c60:	2b00      	cmp	r3, #0
   14c62:	da01      	bge.n	14c68 <str_modulo_format+0x588>
                    prec = vlen;
   14c64:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   14c66:	637b      	str	r3, [r7, #52]	; 0x34
                }
                if (vlen > (uint)prec) {
   14c68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   14c6a:	461a      	mov	r2, r3
   14c6c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   14c6e:	4293      	cmp	r3, r2
   14c70:	d901      	bls.n	14c76 <str_modulo_format+0x596>
                    vlen = prec;
   14c72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   14c74:	673b      	str	r3, [r7, #112]	; 0x70
                }
                mp_print_strn(&print, arg_vstr.buf, vlen, flags, ' ', width);
   14c76:	6a79      	ldr	r1, [r7, #36]	; 0x24
   14c78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   14c7a:	f107 003c 	add.w	r0, r7, #60	; 0x3c
   14c7e:	9301      	str	r3, [sp, #4]
   14c80:	2320      	movs	r3, #32
   14c82:	9300      	str	r3, [sp, #0]
   14c84:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
   14c88:	6f3a      	ldr	r2, [r7, #112]	; 0x70
   14c8a:	f7ec fecb 	bl	1a24 <mp_print_strn>
                vstr_clear(&arg_vstr);
   14c8e:	f107 031c 	add.w	r3, r7, #28
   14c92:	4618      	mov	r0, r3
   14c94:	f7ec fc54 	bl	1540 <vstr_clear>
                break;
   14c98:	bf00      	nop
   14c9a:	e01b      	b.n	14cd4 <str_modulo_format+0x5f4>
            }

            case 'X':
            case 'x':
                mp_print_mp_int(&print, arg, 16, *str - ('X' - 'A'), flags | alt, fill, width, prec);
   14c9c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
   14ca0:	781b      	ldrb	r3, [r3, #0]
   14ca2:	f1a3 0417 	sub.w	r4, r3, #23
   14ca6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
   14caa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   14cac:	4313      	orrs	r3, r2
   14cae:	6bba      	ldr	r2, [r7, #56]	; 0x38
   14cb0:	6b79      	ldr	r1, [r7, #52]	; 0x34
   14cb2:	f107 003c 	add.w	r0, r7, #60	; 0x3c
   14cb6:	9103      	str	r1, [sp, #12]
   14cb8:	9202      	str	r2, [sp, #8]
   14cba:	f897 207f 	ldrb.w	r2, [r7, #127]	; 0x7f
   14cbe:	9201      	str	r2, [sp, #4]
   14cc0:	9300      	str	r3, [sp, #0]
   14cc2:	4623      	mov	r3, r4
   14cc4:	2210      	movs	r2, #16
   14cc6:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
   14cca:	f7ec ffeb 	bl	1ca4 <mp_print_mp_int>
                break;
   14cce:	e001      	b.n	14cd4 <str_modulo_format+0x5f4>

            default:
                if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
                    terse_str_format_value_error();
   14cd0:	f7fe ffde 	bl	13c90 <terse_str_format_value_error>
    for (const byte *top = str + len; str < top; str++) {
   14cd4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
   14cd8:	3301      	adds	r3, #1
   14cda:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   14cde:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
   14ce2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   14ce4:	429a      	cmp	r2, r3
   14ce6:	f4ff ad63 	bcc.w	147b0 <str_modulo_format+0xd0>
                        *str, *str, str - start_str));
                }
        }
    }

    if (arg_i != n_args) {
   14cea:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
   14cee:	68bb      	ldr	r3, [r7, #8]
   14cf0:	429a      	cmp	r2, r3
   14cf2:	d002      	beq.n	14cfa <str_modulo_format+0x61a>
        mp_raise_TypeError("not all arguments converted during string formatting");
   14cf4:	480e      	ldr	r0, [pc, #56]	; (14d30 <str_modulo_format+0x650>)
   14cf6:	f7f8 fa7d 	bl	d1f4 <mp_raise_TypeError>
    }

    return mp_obj_new_str_from_vstr(is_bytes ? &mp_type_bytes : &mp_type_str, &vstr);
   14cfa:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
   14cfe:	2b00      	cmp	r3, #0
   14d00:	d001      	beq.n	14d06 <str_modulo_format+0x626>
   14d02:	4b0a      	ldr	r3, [pc, #40]	; (14d2c <str_modulo_format+0x64c>)
   14d04:	e000      	b.n	14d08 <str_modulo_format+0x628>
   14d06:	4b06      	ldr	r3, [pc, #24]	; (14d20 <str_modulo_format+0x640>)
   14d08:	f107 0244 	add.w	r2, r7, #68	; 0x44
   14d0c:	4611      	mov	r1, r2
   14d0e:	4618      	mov	r0, r3
   14d10:	f000 fc44 	bl	1559c <mp_obj_new_str_from_vstr>
   14d14:	4603      	mov	r3, r0
}
   14d16:	4618      	mov	r0, r3
   14d18:	3794      	adds	r7, #148	; 0x94
   14d1a:	46bd      	mov	sp, r7
   14d1c:	bd90      	pop	{r4, r7, pc}
   14d1e:	bf00      	nop
   14d20:	00023b0c 	.word	0x00023b0c
   14d24:	00023984 	.word	0x00023984
   14d28:	000239a0 	.word	0x000239a0
   14d2c:	00023b48 	.word	0x00023b48
   14d30:	000239b4 	.word	0x000239b4

00014d34 <str_replace>:

// The implementation is optimized, returning the original string if there's
// nothing to replace.
STATIC mp_obj_t str_replace(size_t n_args, const mp_obj_t *args) {
   14d34:	b580      	push	{r7, lr}
   14d36:	b096      	sub	sp, #88	; 0x58
   14d38:	af02      	add	r7, sp, #8
   14d3a:	6078      	str	r0, [r7, #4]
   14d3c:	6039      	str	r1, [r7, #0]
    mp_check_self(MP_OBJ_IS_STR_OR_BYTES(args[0]));
   14d3e:	683b      	ldr	r3, [r7, #0]
   14d40:	681b      	ldr	r3, [r3, #0]
   14d42:	4618      	mov	r0, r3
   14d44:	f7fd fbaa 	bl	1249c <MP_OBJ_IS_QSTR>
   14d48:	4603      	mov	r3, r0
   14d4a:	f083 0301 	eor.w	r3, r3, #1
   14d4e:	b2db      	uxtb	r3, r3
   14d50:	2b00      	cmp	r3, #0
   14d52:	d018      	beq.n	14d86 <str_replace+0x52>
   14d54:	683b      	ldr	r3, [r7, #0]
   14d56:	681b      	ldr	r3, [r3, #0]
   14d58:	4618      	mov	r0, r3
   14d5a:	f7fd fbb1 	bl	124c0 <MP_OBJ_IS_OBJ>
   14d5e:	4603      	mov	r3, r0
   14d60:	f083 0301 	eor.w	r3, r3, #1
   14d64:	b2db      	uxtb	r3, r3
   14d66:	2b00      	cmp	r3, #0
   14d68:	d106      	bne.n	14d78 <str_replace+0x44>
   14d6a:	683b      	ldr	r3, [r7, #0]
   14d6c:	681b      	ldr	r3, [r3, #0]
   14d6e:	681b      	ldr	r3, [r3, #0]
   14d70:	699b      	ldr	r3, [r3, #24]
   14d72:	4aa4      	ldr	r2, [pc, #656]	; (15004 <str_replace+0x2d0>)
   14d74:	4293      	cmp	r3, r2
   14d76:	d006      	beq.n	14d86 <str_replace+0x52>
   14d78:	4ba3      	ldr	r3, [pc, #652]	; (15008 <str_replace+0x2d4>)
   14d7a:	4aa4      	ldr	r2, [pc, #656]	; (1500c <str_replace+0x2d8>)
   14d7c:	f240 6131 	movw	r1, #1585	; 0x631
   14d80:	48a3      	ldr	r0, [pc, #652]	; (15010 <str_replace+0x2dc>)
   14d82:	f006 fca5 	bl	1b6d0 <__assert_func>

    mp_int_t max_rep = -1;
   14d86:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   14d8a:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (n_args == 4) {
   14d8c:	687b      	ldr	r3, [r7, #4]
   14d8e:	2b04      	cmp	r3, #4
   14d90:	d112      	bne.n	14db8 <str_replace+0x84>
        max_rep = mp_obj_get_int(args[3]);
   14d92:	683b      	ldr	r3, [r7, #0]
   14d94:	330c      	adds	r3, #12
   14d96:	681b      	ldr	r3, [r3, #0]
   14d98:	4618      	mov	r0, r3
   14d9a:	f7f9 f869 	bl	de70 <mp_obj_get_int>
   14d9e:	64f8      	str	r0, [r7, #76]	; 0x4c
        if (max_rep == 0) {
   14da0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   14da2:	2b00      	cmp	r3, #0
   14da4:	d102      	bne.n	14dac <str_replace+0x78>
            return args[0];
   14da6:	683b      	ldr	r3, [r7, #0]
   14da8:	681b      	ldr	r3, [r3, #0]
   14daa:	e127      	b.n	14ffc <str_replace+0x2c8>
        } else if (max_rep < 0) {
   14dac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   14dae:	2b00      	cmp	r3, #0
   14db0:	da02      	bge.n	14db8 <str_replace+0x84>
            max_rep = -1;
   14db2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   14db6:	64fb      	str	r3, [r7, #76]	; 0x4c

    // if max_rep is still -1 by this point we will need to do all possible replacements

    // check argument types

    const mp_obj_type_t *self_type = mp_obj_get_type(args[0]);
   14db8:	683b      	ldr	r3, [r7, #0]
   14dba:	681b      	ldr	r3, [r3, #0]
   14dbc:	4618      	mov	r0, r3
   14dbe:	f7f8 fe79 	bl	dab4 <mp_obj_get_type>
   14dc2:	6278      	str	r0, [r7, #36]	; 0x24

    if (mp_obj_get_type(args[1]) != self_type) {
   14dc4:	683b      	ldr	r3, [r7, #0]
   14dc6:	3304      	adds	r3, #4
   14dc8:	681b      	ldr	r3, [r3, #0]
   14dca:	4618      	mov	r0, r3
   14dcc:	f7f8 fe72 	bl	dab4 <mp_obj_get_type>
   14dd0:	4602      	mov	r2, r0
   14dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   14dd4:	429a      	cmp	r2, r3
   14dd6:	d005      	beq.n	14de4 <str_replace+0xb0>
        bad_implicit_conversion(args[1]);
   14dd8:	683b      	ldr	r3, [r7, #0]
   14dda:	3304      	adds	r3, #4
   14ddc:	681b      	ldr	r3, [r3, #0]
   14dde:	4618      	mov	r0, r3
   14de0:	f000 fd30 	bl	15844 <bad_implicit_conversion>
    }

    if (mp_obj_get_type(args[2]) != self_type) {
   14de4:	683b      	ldr	r3, [r7, #0]
   14de6:	3308      	adds	r3, #8
   14de8:	681b      	ldr	r3, [r3, #0]
   14dea:	4618      	mov	r0, r3
   14dec:	f7f8 fe62 	bl	dab4 <mp_obj_get_type>
   14df0:	4602      	mov	r2, r0
   14df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   14df4:	429a      	cmp	r2, r3
   14df6:	d005      	beq.n	14e04 <str_replace+0xd0>
        bad_implicit_conversion(args[2]);
   14df8:	683b      	ldr	r3, [r7, #0]
   14dfa:	3308      	adds	r3, #8
   14dfc:	681b      	ldr	r3, [r3, #0]
   14dfe:	4618      	mov	r0, r3
   14e00:	f000 fd20 	bl	15844 <bad_implicit_conversion>
    }

    // extract string data

    GET_STR_DATA_LEN(args[0], str, str_len);
   14e04:	683b      	ldr	r3, [r7, #0]
   14e06:	681b      	ldr	r3, [r3, #0]
   14e08:	4618      	mov	r0, r3
   14e0a:	f7fd fb47 	bl	1249c <MP_OBJ_IS_QSTR>
   14e0e:	4603      	mov	r3, r0
   14e10:	2b00      	cmp	r3, #0
   14e12:	d00a      	beq.n	14e2a <str_replace+0xf6>
   14e14:	683b      	ldr	r3, [r7, #0]
   14e16:	681b      	ldr	r3, [r3, #0]
   14e18:	089b      	lsrs	r3, r3, #2
   14e1a:	f107 0220 	add.w	r2, r7, #32
   14e1e:	4611      	mov	r1, r2
   14e20:	4618      	mov	r0, r3
   14e22:	f7ec fab1 	bl	1388 <qstr_data>
   14e26:	64b8      	str	r0, [r7, #72]	; 0x48
   14e28:	e007      	b.n	14e3a <str_replace+0x106>
   14e2a:	683b      	ldr	r3, [r7, #0]
   14e2c:	681b      	ldr	r3, [r3, #0]
   14e2e:	689b      	ldr	r3, [r3, #8]
   14e30:	623b      	str	r3, [r7, #32]
   14e32:	683b      	ldr	r3, [r7, #0]
   14e34:	681b      	ldr	r3, [r3, #0]
   14e36:	68db      	ldr	r3, [r3, #12]
   14e38:	64bb      	str	r3, [r7, #72]	; 0x48
    GET_STR_DATA_LEN(args[1], old, old_len);
   14e3a:	683b      	ldr	r3, [r7, #0]
   14e3c:	3304      	adds	r3, #4
   14e3e:	681b      	ldr	r3, [r3, #0]
   14e40:	4618      	mov	r0, r3
   14e42:	f7fd fb2b 	bl	1249c <MP_OBJ_IS_QSTR>
   14e46:	4603      	mov	r3, r0
   14e48:	2b00      	cmp	r3, #0
   14e4a:	d00b      	beq.n	14e64 <str_replace+0x130>
   14e4c:	683b      	ldr	r3, [r7, #0]
   14e4e:	3304      	adds	r3, #4
   14e50:	681b      	ldr	r3, [r3, #0]
   14e52:	089b      	lsrs	r3, r3, #2
   14e54:	f107 021c 	add.w	r2, r7, #28
   14e58:	4611      	mov	r1, r2
   14e5a:	4618      	mov	r0, r3
   14e5c:	f7ec fa94 	bl	1388 <qstr_data>
   14e60:	6478      	str	r0, [r7, #68]	; 0x44
   14e62:	e009      	b.n	14e78 <str_replace+0x144>
   14e64:	683b      	ldr	r3, [r7, #0]
   14e66:	3304      	adds	r3, #4
   14e68:	681b      	ldr	r3, [r3, #0]
   14e6a:	689b      	ldr	r3, [r3, #8]
   14e6c:	61fb      	str	r3, [r7, #28]
   14e6e:	683b      	ldr	r3, [r7, #0]
   14e70:	3304      	adds	r3, #4
   14e72:	681b      	ldr	r3, [r3, #0]
   14e74:	68db      	ldr	r3, [r3, #12]
   14e76:	647b      	str	r3, [r7, #68]	; 0x44
    GET_STR_DATA_LEN(args[2], new, new_len);
   14e78:	683b      	ldr	r3, [r7, #0]
   14e7a:	3308      	adds	r3, #8
   14e7c:	681b      	ldr	r3, [r3, #0]
   14e7e:	4618      	mov	r0, r3
   14e80:	f7fd fb0c 	bl	1249c <MP_OBJ_IS_QSTR>
   14e84:	4603      	mov	r3, r0
   14e86:	2b00      	cmp	r3, #0
   14e88:	d00b      	beq.n	14ea2 <str_replace+0x16e>
   14e8a:	683b      	ldr	r3, [r7, #0]
   14e8c:	3308      	adds	r3, #8
   14e8e:	681b      	ldr	r3, [r3, #0]
   14e90:	089b      	lsrs	r3, r3, #2
   14e92:	f107 0218 	add.w	r2, r7, #24
   14e96:	4611      	mov	r1, r2
   14e98:	4618      	mov	r0, r3
   14e9a:	f7ec fa75 	bl	1388 <qstr_data>
   14e9e:	6438      	str	r0, [r7, #64]	; 0x40
   14ea0:	e009      	b.n	14eb6 <str_replace+0x182>
   14ea2:	683b      	ldr	r3, [r7, #0]
   14ea4:	3308      	adds	r3, #8
   14ea6:	681b      	ldr	r3, [r3, #0]
   14ea8:	689b      	ldr	r3, [r3, #8]
   14eaa:	61bb      	str	r3, [r7, #24]
   14eac:	683b      	ldr	r3, [r7, #0]
   14eae:	3308      	adds	r3, #8
   14eb0:	681b      	ldr	r3, [r3, #0]
   14eb2:	68db      	ldr	r3, [r3, #12]
   14eb4:	643b      	str	r3, [r7, #64]	; 0x40

    // old won't exist in str if it's longer, so nothing to replace
    if (old_len > str_len) {
   14eb6:	69fa      	ldr	r2, [r7, #28]
   14eb8:	6a3b      	ldr	r3, [r7, #32]
   14eba:	429a      	cmp	r2, r3
   14ebc:	d902      	bls.n	14ec4 <str_replace+0x190>
        return args[0];
   14ebe:	683b      	ldr	r3, [r7, #0]
   14ec0:	681b      	ldr	r3, [r3, #0]
   14ec2:	e09b      	b.n	14ffc <str_replace+0x2c8>
    }

    // data for the replaced string
    byte *data = NULL;
   14ec4:	2300      	movs	r3, #0
   14ec6:	63fb      	str	r3, [r7, #60]	; 0x3c

    // do 2 passes over the string:
    //   first pass computes the required length of the replaced string
    //   second pass does the replacements
    for (;;) {
        size_t replaced_str_index = 0;
   14ec8:	2300      	movs	r3, #0
   14eca:	63bb      	str	r3, [r7, #56]	; 0x38
        size_t num_replacements_done = 0;
   14ecc:	2300      	movs	r3, #0
   14ece:	637b      	str	r3, [r7, #52]	; 0x34
        const byte *old_occurrence;
        const byte *offset_ptr = str;
   14ed0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   14ed2:	62fb      	str	r3, [r7, #44]	; 0x2c
        size_t str_len_remain = str_len;
   14ed4:	6a3b      	ldr	r3, [r7, #32]
   14ed6:	62bb      	str	r3, [r7, #40]	; 0x28
        if (old_len == 0) {
   14ed8:	69fb      	ldr	r3, [r7, #28]
   14eda:	2b00      	cmp	r3, #0
   14edc:	d147      	bne.n	14f6e <str_replace+0x23a>
            // if old_str is empty, copy new_str to start of replaced string
            // copy the replacement string
            if (data != NULL) {
   14ede:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   14ee0:	2b00      	cmp	r3, #0
   14ee2:	d005      	beq.n	14ef0 <str_replace+0x1bc>
                memcpy(data, new, new_len);
   14ee4:	69bb      	ldr	r3, [r7, #24]
   14ee6:	461a      	mov	r2, r3
   14ee8:	6c39      	ldr	r1, [r7, #64]	; 0x40
   14eea:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
   14eec:	f007 fec4 	bl	1cc78 <memcpy>
            }
            replaced_str_index += new_len;
   14ef0:	69bb      	ldr	r3, [r7, #24]
   14ef2:	6bba      	ldr	r2, [r7, #56]	; 0x38
   14ef4:	4413      	add	r3, r2
   14ef6:	63bb      	str	r3, [r7, #56]	; 0x38
            num_replacements_done++;
   14ef8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   14efa:	3301      	adds	r3, #1
   14efc:	637b      	str	r3, [r7, #52]	; 0x34
        }
        while (num_replacements_done != (size_t)max_rep && str_len_remain > 0 && (old_occurrence = find_subbytes(offset_ptr, str_len_remain, old, old_len, 1)) != NULL) {
   14efe:	e036      	b.n	14f6e <str_replace+0x23a>
            if (old_len == 0) {
   14f00:	69fb      	ldr	r3, [r7, #28]
   14f02:	2b00      	cmp	r3, #0
   14f04:	d102      	bne.n	14f0c <str_replace+0x1d8>
                old_occurrence += 1;
   14f06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   14f08:	3301      	adds	r3, #1
   14f0a:	633b      	str	r3, [r7, #48]	; 0x30
            }
            // copy from just after end of last occurrence of to-be-replaced string to right before start of next occurrence
            if (data != NULL) {
   14f0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   14f0e:	2b00      	cmp	r3, #0
   14f10:	d009      	beq.n	14f26 <str_replace+0x1f2>
                memcpy(data + replaced_str_index, offset_ptr, old_occurrence - offset_ptr);
   14f12:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   14f14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   14f16:	18d0      	adds	r0, r2, r3
   14f18:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   14f1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   14f1c:	1ad3      	subs	r3, r2, r3
   14f1e:	461a      	mov	r2, r3
   14f20:	6af9      	ldr	r1, [r7, #44]	; 0x2c
   14f22:	f007 fea9 	bl	1cc78 <memcpy>
            }
            replaced_str_index += old_occurrence - offset_ptr;
   14f26:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   14f28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   14f2a:	1ad3      	subs	r3, r2, r3
   14f2c:	461a      	mov	r2, r3
   14f2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   14f30:	4413      	add	r3, r2
   14f32:	63bb      	str	r3, [r7, #56]	; 0x38
            // copy the replacement string
            if (data != NULL) {
   14f34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   14f36:	2b00      	cmp	r3, #0
   14f38:	d007      	beq.n	14f4a <str_replace+0x216>
                memcpy(data + replaced_str_index, new, new_len);
   14f3a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   14f3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   14f3e:	4413      	add	r3, r2
   14f40:	69ba      	ldr	r2, [r7, #24]
   14f42:	6c39      	ldr	r1, [r7, #64]	; 0x40
   14f44:	4618      	mov	r0, r3
   14f46:	f007 fe97 	bl	1cc78 <memcpy>
            }
            replaced_str_index += new_len;
   14f4a:	69bb      	ldr	r3, [r7, #24]
   14f4c:	6bba      	ldr	r2, [r7, #56]	; 0x38
   14f4e:	4413      	add	r3, r2
   14f50:	63bb      	str	r3, [r7, #56]	; 0x38
            offset_ptr = old_occurrence + old_len;
   14f52:	69fb      	ldr	r3, [r7, #28]
   14f54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   14f56:	4413      	add	r3, r2
   14f58:	62fb      	str	r3, [r7, #44]	; 0x2c
            str_len_remain = str + str_len - offset_ptr;
   14f5a:	6a3b      	ldr	r3, [r7, #32]
   14f5c:	6cba      	ldr	r2, [r7, #72]	; 0x48
   14f5e:	4413      	add	r3, r2
   14f60:	461a      	mov	r2, r3
   14f62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   14f64:	1ad3      	subs	r3, r2, r3
   14f66:	62bb      	str	r3, [r7, #40]	; 0x28
            num_replacements_done++;
   14f68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   14f6a:	3301      	adds	r3, #1
   14f6c:	637b      	str	r3, [r7, #52]	; 0x34
        while (num_replacements_done != (size_t)max_rep && str_len_remain > 0 && (old_occurrence = find_subbytes(offset_ptr, str_len_remain, old, old_len, 1)) != NULL) {
   14f6e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   14f70:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   14f72:	429a      	cmp	r2, r3
   14f74:	d00f      	beq.n	14f96 <str_replace+0x262>
   14f76:	6abb      	ldr	r3, [r7, #40]	; 0x28
   14f78:	2b00      	cmp	r3, #0
   14f7a:	d00c      	beq.n	14f96 <str_replace+0x262>
   14f7c:	69fa      	ldr	r2, [r7, #28]
   14f7e:	2301      	movs	r3, #1
   14f80:	9300      	str	r3, [sp, #0]
   14f82:	4613      	mov	r3, r2
   14f84:	6c7a      	ldr	r2, [r7, #68]	; 0x44
   14f86:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   14f88:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   14f8a:	f7fd fd87 	bl	12a9c <find_subbytes>
   14f8e:	6338      	str	r0, [r7, #48]	; 0x30
   14f90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   14f92:	2b00      	cmp	r3, #0
   14f94:	d1b4      	bne.n	14f00 <str_replace+0x1cc>
        }

        // copy from just after end of last occurrence of to-be-replaced string to end of old string
        if (data != NULL) {
   14f96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   14f98:	2b00      	cmp	r3, #0
   14f9a:	d007      	beq.n	14fac <str_replace+0x278>
            memcpy(data + replaced_str_index, offset_ptr, str_len_remain);
   14f9c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   14f9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   14fa0:	4413      	add	r3, r2
   14fa2:	6aba      	ldr	r2, [r7, #40]	; 0x28
   14fa4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
   14fa6:	4618      	mov	r0, r3
   14fa8:	f007 fe66 	bl	1cc78 <memcpy>
        }
        replaced_str_index += str_len_remain;
   14fac:	6bba      	ldr	r2, [r7, #56]	; 0x38
   14fae:	6abb      	ldr	r3, [r7, #40]	; 0x28
   14fb0:	4413      	add	r3, r2
   14fb2:	63bb      	str	r3, [r7, #56]	; 0x38

        if (data == NULL) {
   14fb4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   14fb6:	2b00      	cmp	r3, #0
   14fb8:	d118      	bne.n	14fec <str_replace+0x2b8>
            // first pass
            if (num_replacements_done == 0) {
   14fba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   14fbc:	2b00      	cmp	r3, #0
   14fbe:	d102      	bne.n	14fc6 <str_replace+0x292>
                // no substr found, return original string
                return args[0];
   14fc0:	683b      	ldr	r3, [r7, #0]
   14fc2:	681b      	ldr	r3, [r3, #0]
   14fc4:	e01a      	b.n	14ffc <str_replace+0x2c8>
            } else {
                // substr found, allocate new string
                vstr_init_len(&vstr, replaced_str_index);
   14fc6:	f107 0308 	add.w	r3, r7, #8
   14fca:	6bb9      	ldr	r1, [r7, #56]	; 0x38
   14fcc:	4618      	mov	r0, r3
   14fce:	f7ec fa75 	bl	14bc <vstr_init_len>
                data = (byte*)vstr.buf;
   14fd2:	693b      	ldr	r3, [r7, #16]
   14fd4:	63fb      	str	r3, [r7, #60]	; 0x3c
                assert(data != NULL);
   14fd6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   14fd8:	2b00      	cmp	r3, #0
   14fda:	f47f af75 	bne.w	14ec8 <str_replace+0x194>
   14fde:	4b0d      	ldr	r3, [pc, #52]	; (15014 <str_replace+0x2e0>)
   14fe0:	4a0a      	ldr	r2, [pc, #40]	; (1500c <str_replace+0x2d8>)
   14fe2:	f240 618e 	movw	r1, #1678	; 0x68e
   14fe6:	480a      	ldr	r0, [pc, #40]	; (15010 <str_replace+0x2dc>)
   14fe8:	f006 fb72 	bl	1b6d0 <__assert_func>
            }
        } else {
            // second pass, we are done
            break;
   14fec:	bf00      	nop
        }
    }

    return mp_obj_new_str_from_vstr(self_type, &vstr);
   14fee:	f107 0308 	add.w	r3, r7, #8
   14ff2:	4619      	mov	r1, r3
   14ff4:	6a78      	ldr	r0, [r7, #36]	; 0x24
   14ff6:	f000 fad1 	bl	1559c <mp_obj_new_str_from_vstr>
   14ffa:	4603      	mov	r3, r0
}
   14ffc:	4618      	mov	r0, r3
   14ffe:	3750      	adds	r7, #80	; 0x50
   15000:	46bd      	mov	sp, r7
   15002:	bd80      	pop	{r7, pc}
   15004:	00012b11 	.word	0x00012b11
   15008:	000236d0 	.word	0x000236d0
   1500c:	00023c2c 	.word	0x00023c2c
   15010:	00023634 	.word	0x00023634
   15014:	000239ec 	.word	0x000239ec

00015018 <str_count>:
MP_DEFINE_CONST_FUN_OBJ_VAR_BETWEEN(str_replace_obj, 3, 4, str_replace);

STATIC mp_obj_t str_count(size_t n_args, const mp_obj_t *args) {
   15018:	b580      	push	{r7, lr}
   1501a:	b08e      	sub	sp, #56	; 0x38
   1501c:	af02      	add	r7, sp, #8
   1501e:	6078      	str	r0, [r7, #4]
   15020:	6039      	str	r1, [r7, #0]
    const mp_obj_type_t *self_type = mp_obj_get_type(args[0]);
   15022:	683b      	ldr	r3, [r7, #0]
   15024:	681b      	ldr	r3, [r3, #0]
   15026:	4618      	mov	r0, r3
   15028:	f7f8 fd44 	bl	dab4 <mp_obj_get_type>
   1502c:	6178      	str	r0, [r7, #20]
    mp_check_self(MP_OBJ_IS_STR_OR_BYTES(args[0]));
   1502e:	683b      	ldr	r3, [r7, #0]
   15030:	681b      	ldr	r3, [r3, #0]
   15032:	4618      	mov	r0, r3
   15034:	f7fd fa32 	bl	1249c <MP_OBJ_IS_QSTR>
   15038:	4603      	mov	r3, r0
   1503a:	f083 0301 	eor.w	r3, r3, #1
   1503e:	b2db      	uxtb	r3, r3
   15040:	2b00      	cmp	r3, #0
   15042:	d018      	beq.n	15076 <str_count+0x5e>
   15044:	683b      	ldr	r3, [r7, #0]
   15046:	681b      	ldr	r3, [r3, #0]
   15048:	4618      	mov	r0, r3
   1504a:	f7fd fa39 	bl	124c0 <MP_OBJ_IS_OBJ>
   1504e:	4603      	mov	r3, r0
   15050:	f083 0301 	eor.w	r3, r3, #1
   15054:	b2db      	uxtb	r3, r3
   15056:	2b00      	cmp	r3, #0
   15058:	d106      	bne.n	15068 <str_count+0x50>
   1505a:	683b      	ldr	r3, [r7, #0]
   1505c:	681b      	ldr	r3, [r3, #0]
   1505e:	681b      	ldr	r3, [r3, #0]
   15060:	699b      	ldr	r3, [r3, #24]
   15062:	4a5e      	ldr	r2, [pc, #376]	; (151dc <str_count+0x1c4>)
   15064:	4293      	cmp	r3, r2
   15066:	d006      	beq.n	15076 <str_count+0x5e>
   15068:	4b5d      	ldr	r3, [pc, #372]	; (151e0 <str_count+0x1c8>)
   1506a:	4a5e      	ldr	r2, [pc, #376]	; (151e4 <str_count+0x1cc>)
   1506c:	f240 619c 	movw	r1, #1692	; 0x69c
   15070:	485d      	ldr	r0, [pc, #372]	; (151e8 <str_count+0x1d0>)
   15072:	f006 fb2d 	bl	1b6d0 <__assert_func>

    // check argument type
    if (mp_obj_get_type(args[1]) != self_type) {
   15076:	683b      	ldr	r3, [r7, #0]
   15078:	3304      	adds	r3, #4
   1507a:	681b      	ldr	r3, [r3, #0]
   1507c:	4618      	mov	r0, r3
   1507e:	f7f8 fd19 	bl	dab4 <mp_obj_get_type>
   15082:	4602      	mov	r2, r0
   15084:	697b      	ldr	r3, [r7, #20]
   15086:	429a      	cmp	r2, r3
   15088:	d005      	beq.n	15096 <str_count+0x7e>
        bad_implicit_conversion(args[1]);
   1508a:	683b      	ldr	r3, [r7, #0]
   1508c:	3304      	adds	r3, #4
   1508e:	681b      	ldr	r3, [r3, #0]
   15090:	4618      	mov	r0, r3
   15092:	f000 fbd7 	bl	15844 <bad_implicit_conversion>
    }

    GET_STR_DATA_LEN(args[0], haystack, haystack_len);
   15096:	683b      	ldr	r3, [r7, #0]
   15098:	681b      	ldr	r3, [r3, #0]
   1509a:	4618      	mov	r0, r3
   1509c:	f7fd f9fe 	bl	1249c <MP_OBJ_IS_QSTR>
   150a0:	4603      	mov	r3, r0
   150a2:	2b00      	cmp	r3, #0
   150a4:	d00a      	beq.n	150bc <str_count+0xa4>
   150a6:	683b      	ldr	r3, [r7, #0]
   150a8:	681b      	ldr	r3, [r3, #0]
   150aa:	089b      	lsrs	r3, r3, #2
   150ac:	f107 0210 	add.w	r2, r7, #16
   150b0:	4611      	mov	r1, r2
   150b2:	4618      	mov	r0, r3
   150b4:	f7ec f968 	bl	1388 <qstr_data>
   150b8:	62f8      	str	r0, [r7, #44]	; 0x2c
   150ba:	e007      	b.n	150cc <str_count+0xb4>
   150bc:	683b      	ldr	r3, [r7, #0]
   150be:	681b      	ldr	r3, [r3, #0]
   150c0:	689b      	ldr	r3, [r3, #8]
   150c2:	613b      	str	r3, [r7, #16]
   150c4:	683b      	ldr	r3, [r7, #0]
   150c6:	681b      	ldr	r3, [r3, #0]
   150c8:	68db      	ldr	r3, [r3, #12]
   150ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    GET_STR_DATA_LEN(args[1], needle, needle_len);
   150cc:	683b      	ldr	r3, [r7, #0]
   150ce:	3304      	adds	r3, #4
   150d0:	681b      	ldr	r3, [r3, #0]
   150d2:	4618      	mov	r0, r3
   150d4:	f7fd f9e2 	bl	1249c <MP_OBJ_IS_QSTR>
   150d8:	4603      	mov	r3, r0
   150da:	2b00      	cmp	r3, #0
   150dc:	d00b      	beq.n	150f6 <str_count+0xde>
   150de:	683b      	ldr	r3, [r7, #0]
   150e0:	3304      	adds	r3, #4
   150e2:	681b      	ldr	r3, [r3, #0]
   150e4:	089b      	lsrs	r3, r3, #2
   150e6:	f107 020c 	add.w	r2, r7, #12
   150ea:	4611      	mov	r1, r2
   150ec:	4618      	mov	r0, r3
   150ee:	f7ec f94b 	bl	1388 <qstr_data>
   150f2:	62b8      	str	r0, [r7, #40]	; 0x28
   150f4:	e009      	b.n	1510a <str_count+0xf2>
   150f6:	683b      	ldr	r3, [r7, #0]
   150f8:	3304      	adds	r3, #4
   150fa:	681b      	ldr	r3, [r3, #0]
   150fc:	689b      	ldr	r3, [r3, #8]
   150fe:	60fb      	str	r3, [r7, #12]
   15100:	683b      	ldr	r3, [r7, #0]
   15102:	3304      	adds	r3, #4
   15104:	681b      	ldr	r3, [r3, #0]
   15106:	68db      	ldr	r3, [r3, #12]
   15108:	62bb      	str	r3, [r7, #40]	; 0x28

    const byte *start = haystack;
   1510a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1510c:	627b      	str	r3, [r7, #36]	; 0x24
    const byte *end = haystack + haystack_len;
   1510e:	693b      	ldr	r3, [r7, #16]
   15110:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   15112:	4413      	add	r3, r2
   15114:	623b      	str	r3, [r7, #32]
    if (n_args >= 3 && args[2] != mp_const_none) {
   15116:	687b      	ldr	r3, [r7, #4]
   15118:	2b02      	cmp	r3, #2
   1511a:	d911      	bls.n	15140 <str_count+0x128>
   1511c:	683b      	ldr	r3, [r7, #0]
   1511e:	3308      	adds	r3, #8
   15120:	681b      	ldr	r3, [r3, #0]
   15122:	4a32      	ldr	r2, [pc, #200]	; (151ec <str_count+0x1d4>)
   15124:	4293      	cmp	r3, r2
   15126:	d00b      	beq.n	15140 <str_count+0x128>
        start = str_index_to_ptr(self_type, haystack, haystack_len, args[2], true);
   15128:	693a      	ldr	r2, [r7, #16]
   1512a:	683b      	ldr	r3, [r7, #0]
   1512c:	3308      	adds	r3, #8
   1512e:	6819      	ldr	r1, [r3, #0]
   15130:	2301      	movs	r3, #1
   15132:	9300      	str	r3, [sp, #0]
   15134:	460b      	mov	r3, r1
   15136:	6af9      	ldr	r1, [r7, #44]	; 0x2c
   15138:	6978      	ldr	r0, [r7, #20]
   1513a:	f7fd fe65 	bl	12e08 <str_index_to_ptr>
   1513e:	6278      	str	r0, [r7, #36]	; 0x24
    }
    if (n_args >= 4 && args[3] != mp_const_none) {
   15140:	687b      	ldr	r3, [r7, #4]
   15142:	2b03      	cmp	r3, #3
   15144:	d911      	bls.n	1516a <str_count+0x152>
   15146:	683b      	ldr	r3, [r7, #0]
   15148:	330c      	adds	r3, #12
   1514a:	681b      	ldr	r3, [r3, #0]
   1514c:	4a27      	ldr	r2, [pc, #156]	; (151ec <str_count+0x1d4>)
   1514e:	4293      	cmp	r3, r2
   15150:	d00b      	beq.n	1516a <str_count+0x152>
        end = str_index_to_ptr(self_type, haystack, haystack_len, args[3], true);
   15152:	693a      	ldr	r2, [r7, #16]
   15154:	683b      	ldr	r3, [r7, #0]
   15156:	330c      	adds	r3, #12
   15158:	6819      	ldr	r1, [r3, #0]
   1515a:	2301      	movs	r3, #1
   1515c:	9300      	str	r3, [sp, #0]
   1515e:	460b      	mov	r3, r1
   15160:	6af9      	ldr	r1, [r7, #44]	; 0x2c
   15162:	6978      	ldr	r0, [r7, #20]
   15164:	f7fd fe50 	bl	12e08 <str_index_to_ptr>
   15168:	6238      	str	r0, [r7, #32]
    }

    // if needle_len is zero then we count each gap between characters as an occurrence
    if (needle_len == 0) {
   1516a:	68fb      	ldr	r3, [r7, #12]
   1516c:	2b00      	cmp	r3, #0
   1516e:	d10c      	bne.n	1518a <str_count+0x172>
        return MP_OBJ_NEW_SMALL_INT(utf8_charlen(start, end - start) + 1);
   15170:	6a3a      	ldr	r2, [r7, #32]
   15172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   15174:	1ad3      	subs	r3, r2, r3
   15176:	4619      	mov	r1, r3
   15178:	6a78      	ldr	r0, [r7, #36]	; 0x24
   1517a:	f7fd f971 	bl	12460 <utf8_charlen>
   1517e:	4603      	mov	r3, r0
   15180:	3301      	adds	r3, #1
   15182:	005b      	lsls	r3, r3, #1
   15184:	f043 0301 	orr.w	r3, r3, #1
   15188:	e023      	b.n	151d2 <str_count+0x1ba>
    }

    // count the occurrences
    mp_int_t num_occurrences = 0;
   1518a:	2300      	movs	r3, #0
   1518c:	61fb      	str	r3, [r7, #28]
    for (const byte *haystack_ptr = start; haystack_ptr + needle_len <= end;) {
   1518e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   15190:	61bb      	str	r3, [r7, #24]
   15192:	e014      	b.n	151be <str_count+0x1a6>
        if (memcmp(haystack_ptr, needle, needle_len) == 0) {
   15194:	68fb      	ldr	r3, [r7, #12]
   15196:	461a      	mov	r2, r3
   15198:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   1519a:	69b8      	ldr	r0, [r7, #24]
   1519c:	f007 fe54 	bl	1ce48 <memcmp>
   151a0:	4603      	mov	r3, r0
   151a2:	2b00      	cmp	r3, #0
   151a4:	d107      	bne.n	151b6 <str_count+0x19e>
            num_occurrences++;
   151a6:	69fb      	ldr	r3, [r7, #28]
   151a8:	3301      	adds	r3, #1
   151aa:	61fb      	str	r3, [r7, #28]
            haystack_ptr += needle_len;
   151ac:	68fb      	ldr	r3, [r7, #12]
   151ae:	69ba      	ldr	r2, [r7, #24]
   151b0:	4413      	add	r3, r2
   151b2:	61bb      	str	r3, [r7, #24]
   151b4:	e003      	b.n	151be <str_count+0x1a6>
        } else {
            haystack_ptr = utf8_next_char(haystack_ptr);
   151b6:	69b8      	ldr	r0, [r7, #24]
   151b8:	f7fd f946 	bl	12448 <utf8_next_char>
   151bc:	61b8      	str	r0, [r7, #24]
    for (const byte *haystack_ptr = start; haystack_ptr + needle_len <= end;) {
   151be:	68fb      	ldr	r3, [r7, #12]
   151c0:	69ba      	ldr	r2, [r7, #24]
   151c2:	441a      	add	r2, r3
   151c4:	6a3b      	ldr	r3, [r7, #32]
   151c6:	429a      	cmp	r2, r3
   151c8:	d9e4      	bls.n	15194 <str_count+0x17c>
        }
    }

    return MP_OBJ_NEW_SMALL_INT(num_occurrences);
   151ca:	69fb      	ldr	r3, [r7, #28]
   151cc:	005b      	lsls	r3, r3, #1
   151ce:	f043 0301 	orr.w	r3, r3, #1
}
   151d2:	4618      	mov	r0, r3
   151d4:	3730      	adds	r7, #48	; 0x30
   151d6:	46bd      	mov	sp, r7
   151d8:	bd80      	pop	{r7, pc}
   151da:	bf00      	nop
   151dc:	00012b11 	.word	0x00012b11
   151e0:	000236d0 	.word	0x000236d0
   151e4:	00023c38 	.word	0x00023c38
   151e8:	00023634 	.word	0x00023634
   151ec:	0002345c 	.word	0x0002345c

000151f0 <str_caseconv>:
}
MP_DEFINE_CONST_FUN_OBJ_2(str_rpartition_obj, str_rpartition);
#endif

// Supposedly not too critical operations, so optimize for code size
STATIC mp_obj_t str_caseconv(unichar (*op)(unichar), mp_obj_t self_in) {
   151f0:	b590      	push	{r4, r7, lr}
   151f2:	b08b      	sub	sp, #44	; 0x2c
   151f4:	af00      	add	r7, sp, #0
   151f6:	6078      	str	r0, [r7, #4]
   151f8:	6039      	str	r1, [r7, #0]
    GET_STR_DATA_LEN(self_in, self_data, self_len);
   151fa:	6838      	ldr	r0, [r7, #0]
   151fc:	f7fd f94e 	bl	1249c <MP_OBJ_IS_QSTR>
   15200:	4603      	mov	r3, r0
   15202:	2b00      	cmp	r3, #0
   15204:	d009      	beq.n	1521a <str_caseconv+0x2a>
   15206:	683b      	ldr	r3, [r7, #0]
   15208:	089b      	lsrs	r3, r3, #2
   1520a:	f107 0218 	add.w	r2, r7, #24
   1520e:	4611      	mov	r1, r2
   15210:	4618      	mov	r0, r3
   15212:	f7ec f8b9 	bl	1388 <qstr_data>
   15216:	6278      	str	r0, [r7, #36]	; 0x24
   15218:	e005      	b.n	15226 <str_caseconv+0x36>
   1521a:	683b      	ldr	r3, [r7, #0]
   1521c:	689b      	ldr	r3, [r3, #8]
   1521e:	61bb      	str	r3, [r7, #24]
   15220:	683b      	ldr	r3, [r7, #0]
   15222:	68db      	ldr	r3, [r3, #12]
   15224:	627b      	str	r3, [r7, #36]	; 0x24
    vstr_t vstr;
    vstr_init_len(&vstr, self_len);
   15226:	69ba      	ldr	r2, [r7, #24]
   15228:	f107 0308 	add.w	r3, r7, #8
   1522c:	4611      	mov	r1, r2
   1522e:	4618      	mov	r0, r3
   15230:	f7ec f944 	bl	14bc <vstr_init_len>
    byte *data = (byte*)vstr.buf;
   15234:	693b      	ldr	r3, [r7, #16]
   15236:	623b      	str	r3, [r7, #32]
    for (size_t i = 0; i < self_len; i++) {
   15238:	2300      	movs	r3, #0
   1523a:	61fb      	str	r3, [r7, #28]
   1523c:	e010      	b.n	15260 <str_caseconv+0x70>
        *data++ = op(*self_data++);
   1523e:	6a3c      	ldr	r4, [r7, #32]
   15240:	1c63      	adds	r3, r4, #1
   15242:	623b      	str	r3, [r7, #32]
   15244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   15246:	1c5a      	adds	r2, r3, #1
   15248:	627a      	str	r2, [r7, #36]	; 0x24
   1524a:	781b      	ldrb	r3, [r3, #0]
   1524c:	461a      	mov	r2, r3
   1524e:	687b      	ldr	r3, [r7, #4]
   15250:	4610      	mov	r0, r2
   15252:	4798      	blx	r3
   15254:	4603      	mov	r3, r0
   15256:	b2db      	uxtb	r3, r3
   15258:	7023      	strb	r3, [r4, #0]
    for (size_t i = 0; i < self_len; i++) {
   1525a:	69fb      	ldr	r3, [r7, #28]
   1525c:	3301      	adds	r3, #1
   1525e:	61fb      	str	r3, [r7, #28]
   15260:	69bb      	ldr	r3, [r7, #24]
   15262:	69fa      	ldr	r2, [r7, #28]
   15264:	429a      	cmp	r2, r3
   15266:	d3ea      	bcc.n	1523e <str_caseconv+0x4e>
    }
    return mp_obj_new_str_from_vstr(mp_obj_get_type(self_in), &vstr);
   15268:	6838      	ldr	r0, [r7, #0]
   1526a:	f7f8 fc23 	bl	dab4 <mp_obj_get_type>
   1526e:	4602      	mov	r2, r0
   15270:	f107 0308 	add.w	r3, r7, #8
   15274:	4619      	mov	r1, r3
   15276:	4610      	mov	r0, r2
   15278:	f000 f990 	bl	1559c <mp_obj_new_str_from_vstr>
   1527c:	4603      	mov	r3, r0
}
   1527e:	4618      	mov	r0, r3
   15280:	372c      	adds	r7, #44	; 0x2c
   15282:	46bd      	mov	sp, r7
   15284:	bd90      	pop	{r4, r7, pc}
   15286:	bf00      	nop

00015288 <str_lower>:

STATIC mp_obj_t str_lower(mp_obj_t self_in) {
   15288:	b580      	push	{r7, lr}
   1528a:	b082      	sub	sp, #8
   1528c:	af00      	add	r7, sp, #0
   1528e:	6078      	str	r0, [r7, #4]
    return str_caseconv(unichar_tolower, self_in);
   15290:	6879      	ldr	r1, [r7, #4]
   15292:	4804      	ldr	r0, [pc, #16]	; (152a4 <str_lower+0x1c>)
   15294:	f7ff ffac 	bl	151f0 <str_caseconv>
   15298:	4603      	mov	r3, r0
}
   1529a:	4618      	mov	r0, r3
   1529c:	3708      	adds	r7, #8
   1529e:	46bd      	mov	sp, r7
   152a0:	bd80      	pop	{r7, pc}
   152a2:	bf00      	nop
   152a4:	000026a1 	.word	0x000026a1

000152a8 <str_upper>:
MP_DEFINE_CONST_FUN_OBJ_1(str_lower_obj, str_lower);

STATIC mp_obj_t str_upper(mp_obj_t self_in) {
   152a8:	b580      	push	{r7, lr}
   152aa:	b082      	sub	sp, #8
   152ac:	af00      	add	r7, sp, #0
   152ae:	6078      	str	r0, [r7, #4]
    return str_caseconv(unichar_toupper, self_in);
   152b0:	6879      	ldr	r1, [r7, #4]
   152b2:	4804      	ldr	r0, [pc, #16]	; (152c4 <str_upper+0x1c>)
   152b4:	f7ff ff9c 	bl	151f0 <str_caseconv>
   152b8:	4603      	mov	r3, r0
}
   152ba:	4618      	mov	r0, r3
   152bc:	3708      	adds	r7, #8
   152be:	46bd      	mov	sp, r7
   152c0:	bd80      	pop	{r7, pc}
   152c2:	bf00      	nop
   152c4:	000026c5 	.word	0x000026c5

000152c8 <str_uni_istype>:
MP_DEFINE_CONST_FUN_OBJ_1(str_upper_obj, str_upper);

STATIC mp_obj_t str_uni_istype(bool (*f)(unichar), mp_obj_t self_in) {
   152c8:	b580      	push	{r7, lr}
   152ca:	b088      	sub	sp, #32
   152cc:	af00      	add	r7, sp, #0
   152ce:	6078      	str	r0, [r7, #4]
   152d0:	6039      	str	r1, [r7, #0]
    GET_STR_DATA_LEN(self_in, self_data, self_len);
   152d2:	6838      	ldr	r0, [r7, #0]
   152d4:	f7fd f8e2 	bl	1249c <MP_OBJ_IS_QSTR>
   152d8:	4603      	mov	r3, r0
   152da:	2b00      	cmp	r3, #0
   152dc:	d009      	beq.n	152f2 <str_uni_istype+0x2a>
   152de:	683b      	ldr	r3, [r7, #0]
   152e0:	089b      	lsrs	r3, r3, #2
   152e2:	f107 020c 	add.w	r2, r7, #12
   152e6:	4611      	mov	r1, r2
   152e8:	4618      	mov	r0, r3
   152ea:	f7ec f84d 	bl	1388 <qstr_data>
   152ee:	61f8      	str	r0, [r7, #28]
   152f0:	e005      	b.n	152fe <str_uni_istype+0x36>
   152f2:	683b      	ldr	r3, [r7, #0]
   152f4:	689b      	ldr	r3, [r3, #8]
   152f6:	60fb      	str	r3, [r7, #12]
   152f8:	683b      	ldr	r3, [r7, #0]
   152fa:	68db      	ldr	r3, [r3, #12]
   152fc:	61fb      	str	r3, [r7, #28]

    if (self_len == 0) {
   152fe:	68fb      	ldr	r3, [r7, #12]
   15300:	2b00      	cmp	r3, #0
   15302:	d101      	bne.n	15308 <str_uni_istype+0x40>
        return mp_const_false; // default to False for empty str
   15304:	4b2c      	ldr	r3, [pc, #176]	; (153b8 <str_uni_istype+0xf0>)
   15306:	e052      	b.n	153ae <str_uni_istype+0xe6>
    }

    if (f != unichar_isupper && f != unichar_islower) {
   15308:	687b      	ldr	r3, [r7, #4]
   1530a:	4a2c      	ldr	r2, [pc, #176]	; (153bc <str_uni_istype+0xf4>)
   1530c:	4293      	cmp	r3, r2
   1530e:	d01e      	beq.n	1534e <str_uni_istype+0x86>
   15310:	687b      	ldr	r3, [r7, #4]
   15312:	4a2b      	ldr	r2, [pc, #172]	; (153c0 <str_uni_istype+0xf8>)
   15314:	4293      	cmp	r3, r2
   15316:	d01a      	beq.n	1534e <str_uni_istype+0x86>
        for (size_t i = 0; i < self_len; i++) {
   15318:	2300      	movs	r3, #0
   1531a:	61bb      	str	r3, [r7, #24]
   1531c:	e012      	b.n	15344 <str_uni_istype+0x7c>
            if (!f(*self_data++)) {
   1531e:	69fb      	ldr	r3, [r7, #28]
   15320:	1c5a      	adds	r2, r3, #1
   15322:	61fa      	str	r2, [r7, #28]
   15324:	781b      	ldrb	r3, [r3, #0]
   15326:	461a      	mov	r2, r3
   15328:	687b      	ldr	r3, [r7, #4]
   1532a:	4610      	mov	r0, r2
   1532c:	4798      	blx	r3
   1532e:	4603      	mov	r3, r0
   15330:	f083 0301 	eor.w	r3, r3, #1
   15334:	b2db      	uxtb	r3, r3
   15336:	2b00      	cmp	r3, #0
   15338:	d001      	beq.n	1533e <str_uni_istype+0x76>
                return mp_const_false;
   1533a:	4b1f      	ldr	r3, [pc, #124]	; (153b8 <str_uni_istype+0xf0>)
   1533c:	e037      	b.n	153ae <str_uni_istype+0xe6>
        for (size_t i = 0; i < self_len; i++) {
   1533e:	69bb      	ldr	r3, [r7, #24]
   15340:	3301      	adds	r3, #1
   15342:	61bb      	str	r3, [r7, #24]
   15344:	68fb      	ldr	r3, [r7, #12]
   15346:	69ba      	ldr	r2, [r7, #24]
   15348:	429a      	cmp	r2, r3
   1534a:	d3e8      	bcc.n	1531e <str_uni_istype+0x56>
   1534c:	e02e      	b.n	153ac <str_uni_istype+0xe4>
            }
        }
    } else {
        bool contains_alpha = false;
   1534e:	2300      	movs	r3, #0
   15350:	75fb      	strb	r3, [r7, #23]

        for (size_t i = 0; i < self_len; i++) { // only check alphanumeric characters
   15352:	2300      	movs	r3, #0
   15354:	613b      	str	r3, [r7, #16]
   15356:	e01d      	b.n	15394 <str_uni_istype+0xcc>
            if (unichar_isalpha(*self_data++)) {
   15358:	69fb      	ldr	r3, [r7, #28]
   1535a:	1c5a      	adds	r2, r3, #1
   1535c:	61fa      	str	r2, [r7, #28]
   1535e:	781b      	ldrb	r3, [r3, #0]
   15360:	4618      	mov	r0, r3
   15362:	f7ed f8e7 	bl	2534 <unichar_isalpha>
   15366:	4603      	mov	r3, r0
   15368:	2b00      	cmp	r3, #0
   1536a:	d010      	beq.n	1538e <str_uni_istype+0xc6>
                contains_alpha = true;
   1536c:	2301      	movs	r3, #1
   1536e:	75fb      	strb	r3, [r7, #23]
                if (!f(*(self_data - 1))) { // -1 because we already incremented above
   15370:	69fb      	ldr	r3, [r7, #28]
   15372:	3b01      	subs	r3, #1
   15374:	781b      	ldrb	r3, [r3, #0]
   15376:	461a      	mov	r2, r3
   15378:	687b      	ldr	r3, [r7, #4]
   1537a:	4610      	mov	r0, r2
   1537c:	4798      	blx	r3
   1537e:	4603      	mov	r3, r0
   15380:	f083 0301 	eor.w	r3, r3, #1
   15384:	b2db      	uxtb	r3, r3
   15386:	2b00      	cmp	r3, #0
   15388:	d001      	beq.n	1538e <str_uni_istype+0xc6>
                    return mp_const_false;
   1538a:	4b0b      	ldr	r3, [pc, #44]	; (153b8 <str_uni_istype+0xf0>)
   1538c:	e00f      	b.n	153ae <str_uni_istype+0xe6>
        for (size_t i = 0; i < self_len; i++) { // only check alphanumeric characters
   1538e:	693b      	ldr	r3, [r7, #16]
   15390:	3301      	adds	r3, #1
   15392:	613b      	str	r3, [r7, #16]
   15394:	68fb      	ldr	r3, [r7, #12]
   15396:	693a      	ldr	r2, [r7, #16]
   15398:	429a      	cmp	r2, r3
   1539a:	d3dd      	bcc.n	15358 <str_uni_istype+0x90>
                }
            }
        }

        if (!contains_alpha) {
   1539c:	7dfb      	ldrb	r3, [r7, #23]
   1539e:	f083 0301 	eor.w	r3, r3, #1
   153a2:	b2db      	uxtb	r3, r3
   153a4:	2b00      	cmp	r3, #0
   153a6:	d001      	beq.n	153ac <str_uni_istype+0xe4>
            return mp_const_false;
   153a8:	4b03      	ldr	r3, [pc, #12]	; (153b8 <str_uni_istype+0xf0>)
   153aa:	e000      	b.n	153ae <str_uni_istype+0xe6>
        }
    }

    return mp_const_true;
   153ac:	4b05      	ldr	r3, [pc, #20]	; (153c4 <str_uni_istype+0xfc>)
}
   153ae:	4618      	mov	r0, r3
   153b0:	3720      	adds	r7, #32
   153b2:	46bd      	mov	sp, r7
   153b4:	bd80      	pop	{r7, pc}
   153b6:	bf00      	nop
   153b8:	00021b70 	.word	0x00021b70
   153bc:	00002629 	.word	0x00002629
   153c0:	00002665 	.word	0x00002665
   153c4:	00021b78 	.word	0x00021b78

000153c8 <str_isspace>:

STATIC mp_obj_t str_isspace(mp_obj_t self_in) {
   153c8:	b580      	push	{r7, lr}
   153ca:	b082      	sub	sp, #8
   153cc:	af00      	add	r7, sp, #0
   153ce:	6078      	str	r0, [r7, #4]
    return str_uni_istype(unichar_isspace, self_in);
   153d0:	6879      	ldr	r1, [r7, #4]
   153d2:	4804      	ldr	r0, [pc, #16]	; (153e4 <str_isspace+0x1c>)
   153d4:	f7ff ff78 	bl	152c8 <str_uni_istype>
   153d8:	4603      	mov	r3, r0
}
   153da:	4618      	mov	r0, r3
   153dc:	3708      	adds	r7, #8
   153de:	46bd      	mov	sp, r7
   153e0:	bd80      	pop	{r7, pc}
   153e2:	bf00      	nop
   153e4:	000024f9 	.word	0x000024f9

000153e8 <str_isalpha>:
MP_DEFINE_CONST_FUN_OBJ_1(str_isspace_obj, str_isspace);

STATIC mp_obj_t str_isalpha(mp_obj_t self_in) {
   153e8:	b580      	push	{r7, lr}
   153ea:	b082      	sub	sp, #8
   153ec:	af00      	add	r7, sp, #0
   153ee:	6078      	str	r0, [r7, #4]
    return str_uni_istype(unichar_isalpha, self_in);
   153f0:	6879      	ldr	r1, [r7, #4]
   153f2:	4804      	ldr	r0, [pc, #16]	; (15404 <str_isalpha+0x1c>)
   153f4:	f7ff ff68 	bl	152c8 <str_uni_istype>
   153f8:	4603      	mov	r3, r0
}
   153fa:	4618      	mov	r0, r3
   153fc:	3708      	adds	r7, #8
   153fe:	46bd      	mov	sp, r7
   15400:	bd80      	pop	{r7, pc}
   15402:	bf00      	nop
   15404:	00002535 	.word	0x00002535

00015408 <str_isdigit>:
MP_DEFINE_CONST_FUN_OBJ_1(str_isalpha_obj, str_isalpha);

STATIC mp_obj_t str_isdigit(mp_obj_t self_in) {
   15408:	b580      	push	{r7, lr}
   1540a:	b082      	sub	sp, #8
   1540c:	af00      	add	r7, sp, #0
   1540e:	6078      	str	r0, [r7, #4]
    return str_uni_istype(unichar_isdigit, self_in);
   15410:	6879      	ldr	r1, [r7, #4]
   15412:	4804      	ldr	r0, [pc, #16]	; (15424 <str_isdigit+0x1c>)
   15414:	f7ff ff58 	bl	152c8 <str_uni_istype>
   15418:	4603      	mov	r3, r0
}
   1541a:	4618      	mov	r0, r3
   1541c:	3708      	adds	r7, #8
   1541e:	46bd      	mov	sp, r7
   15420:	bd80      	pop	{r7, pc}
   15422:	bf00      	nop
   15424:	00002571 	.word	0x00002571

00015428 <str_isupper>:
MP_DEFINE_CONST_FUN_OBJ_1(str_isdigit_obj, str_isdigit);

STATIC mp_obj_t str_isupper(mp_obj_t self_in) {
   15428:	b580      	push	{r7, lr}
   1542a:	b082      	sub	sp, #8
   1542c:	af00      	add	r7, sp, #0
   1542e:	6078      	str	r0, [r7, #4]
    return str_uni_istype(unichar_isupper, self_in);
   15430:	6879      	ldr	r1, [r7, #4]
   15432:	4804      	ldr	r0, [pc, #16]	; (15444 <str_isupper+0x1c>)
   15434:	f7ff ff48 	bl	152c8 <str_uni_istype>
   15438:	4603      	mov	r3, r0
}
   1543a:	4618      	mov	r0, r3
   1543c:	3708      	adds	r7, #8
   1543e:	46bd      	mov	sp, r7
   15440:	bd80      	pop	{r7, pc}
   15442:	bf00      	nop
   15444:	00002629 	.word	0x00002629

00015448 <str_islower>:
MP_DEFINE_CONST_FUN_OBJ_1(str_isupper_obj, str_isupper);

STATIC mp_obj_t str_islower(mp_obj_t self_in) {
   15448:	b580      	push	{r7, lr}
   1544a:	b082      	sub	sp, #8
   1544c:	af00      	add	r7, sp, #0
   1544e:	6078      	str	r0, [r7, #4]
    return str_uni_istype(unichar_islower, self_in);
   15450:	6879      	ldr	r1, [r7, #4]
   15452:	4804      	ldr	r0, [pc, #16]	; (15464 <str_islower+0x1c>)
   15454:	f7ff ff38 	bl	152c8 <str_uni_istype>
   15458:	4603      	mov	r3, r0
}
   1545a:	4618      	mov	r0, r3
   1545c:	3708      	adds	r7, #8
   1545e:	46bd      	mov	sp, r7
   15460:	bd80      	pop	{r7, pc}
   15462:	bf00      	nop
   15464:	00002665 	.word	0x00002665

00015468 <mp_obj_str_get_buffer>:
    return bytes_make_new(NULL, n_args, 0, args);
}
MP_DEFINE_CONST_FUN_OBJ_VAR_BETWEEN(str_encode_obj, 1, 3, str_encode);
#endif

mp_int_t mp_obj_str_get_buffer(mp_obj_t self_in, mp_buffer_info_t *bufinfo, mp_uint_t flags) {
   15468:	b580      	push	{r7, lr}
   1546a:	b086      	sub	sp, #24
   1546c:	af00      	add	r7, sp, #0
   1546e:	60f8      	str	r0, [r7, #12]
   15470:	60b9      	str	r1, [r7, #8]
   15472:	607a      	str	r2, [r7, #4]
    if (flags == MP_BUFFER_READ) {
   15474:	687b      	ldr	r3, [r7, #4]
   15476:	2b01      	cmp	r3, #1
   15478:	d120      	bne.n	154bc <mp_obj_str_get_buffer+0x54>
        GET_STR_DATA_LEN(self_in, str_data, str_len);
   1547a:	68f8      	ldr	r0, [r7, #12]
   1547c:	f7fd f80e 	bl	1249c <MP_OBJ_IS_QSTR>
   15480:	4603      	mov	r3, r0
   15482:	2b00      	cmp	r3, #0
   15484:	d009      	beq.n	1549a <mp_obj_str_get_buffer+0x32>
   15486:	68fb      	ldr	r3, [r7, #12]
   15488:	089b      	lsrs	r3, r3, #2
   1548a:	f107 0210 	add.w	r2, r7, #16
   1548e:	4611      	mov	r1, r2
   15490:	4618      	mov	r0, r3
   15492:	f7eb ff79 	bl	1388 <qstr_data>
   15496:	6178      	str	r0, [r7, #20]
   15498:	e005      	b.n	154a6 <mp_obj_str_get_buffer+0x3e>
   1549a:	68fb      	ldr	r3, [r7, #12]
   1549c:	689b      	ldr	r3, [r3, #8]
   1549e:	613b      	str	r3, [r7, #16]
   154a0:	68fb      	ldr	r3, [r7, #12]
   154a2:	68db      	ldr	r3, [r3, #12]
   154a4:	617b      	str	r3, [r7, #20]
        bufinfo->buf = (void*)str_data;
   154a6:	68bb      	ldr	r3, [r7, #8]
   154a8:	697a      	ldr	r2, [r7, #20]
   154aa:	601a      	str	r2, [r3, #0]
        bufinfo->len = str_len;
   154ac:	693a      	ldr	r2, [r7, #16]
   154ae:	68bb      	ldr	r3, [r7, #8]
   154b0:	605a      	str	r2, [r3, #4]
        bufinfo->typecode = 'B'; // bytes should be unsigned, so should unicode byte-access
   154b2:	68bb      	ldr	r3, [r7, #8]
   154b4:	2242      	movs	r2, #66	; 0x42
   154b6:	609a      	str	r2, [r3, #8]
        return 0;
   154b8:	2300      	movs	r3, #0
   154ba:	e00a      	b.n	154d2 <mp_obj_str_get_buffer+0x6a>
    } else {
        // can't write to a string
        bufinfo->buf = NULL;
   154bc:	68bb      	ldr	r3, [r7, #8]
   154be:	2200      	movs	r2, #0
   154c0:	601a      	str	r2, [r3, #0]
        bufinfo->len = 0;
   154c2:	68bb      	ldr	r3, [r7, #8]
   154c4:	2200      	movs	r2, #0
   154c6:	605a      	str	r2, [r3, #4]
        bufinfo->typecode = -1;
   154c8:	68bb      	ldr	r3, [r7, #8]
   154ca:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   154ce:	609a      	str	r2, [r3, #8]
        return 1;
   154d0:	2301      	movs	r3, #1
    }
}
   154d2:	4618      	mov	r0, r3
   154d4:	3718      	adds	r7, #24
   154d6:	46bd      	mov	sp, r7
   154d8:	bd80      	pop	{r7, pc}
   154da:	bf00      	nop

000154dc <mp_obj_new_str_copy>:
const mp_obj_str_t mp_const_empty_bytes_obj = {{&mp_type_bytes}, 0, 0, (const byte*)""};

// Create a str/bytes object using the given data.  New memory is allocated and
// the data is copied across.  This function should only be used if the type is bytes,
// or if the type is str and the string data is known to be not interned.
mp_obj_t mp_obj_new_str_copy(const mp_obj_type_t *type, const byte* data, size_t len) {
   154dc:	b580      	push	{r7, lr}
   154de:	b086      	sub	sp, #24
   154e0:	af00      	add	r7, sp, #0
   154e2:	60f8      	str	r0, [r7, #12]
   154e4:	60b9      	str	r1, [r7, #8]
   154e6:	607a      	str	r2, [r7, #4]
    mp_obj_str_t *o = m_new_obj(mp_obj_str_t);
   154e8:	2010      	movs	r0, #16
   154ea:	f7ea ff17 	bl	31c <m_malloc>
   154ee:	6178      	str	r0, [r7, #20]
    o->base.type = type;
   154f0:	697b      	ldr	r3, [r7, #20]
   154f2:	68fa      	ldr	r2, [r7, #12]
   154f4:	601a      	str	r2, [r3, #0]
    o->len = len;
   154f6:	697b      	ldr	r3, [r7, #20]
   154f8:	687a      	ldr	r2, [r7, #4]
   154fa:	609a      	str	r2, [r3, #8]
    if (data) {
   154fc:	68bb      	ldr	r3, [r7, #8]
   154fe:	2b00      	cmp	r3, #0
   15500:	d019      	beq.n	15536 <mp_obj_new_str_copy+0x5a>
        o->hash = qstr_compute_hash(data, len);
   15502:	6879      	ldr	r1, [r7, #4]
   15504:	68b8      	ldr	r0, [r7, #8]
   15506:	f7eb fd41 	bl	f8c <qstr_compute_hash>
   1550a:	4602      	mov	r2, r0
   1550c:	697b      	ldr	r3, [r7, #20]
   1550e:	605a      	str	r2, [r3, #4]
        byte *p = m_new(byte, len + 1);
   15510:	687b      	ldr	r3, [r7, #4]
   15512:	3301      	adds	r3, #1
   15514:	4618      	mov	r0, r3
   15516:	f7ea ff01 	bl	31c <m_malloc>
   1551a:	6138      	str	r0, [r7, #16]
        o->data = p;
   1551c:	697b      	ldr	r3, [r7, #20]
   1551e:	693a      	ldr	r2, [r7, #16]
   15520:	60da      	str	r2, [r3, #12]
        memcpy(p, data, len * sizeof(byte));
   15522:	687a      	ldr	r2, [r7, #4]
   15524:	68b9      	ldr	r1, [r7, #8]
   15526:	6938      	ldr	r0, [r7, #16]
   15528:	f007 fba6 	bl	1cc78 <memcpy>
        p[len] = '\0'; // for now we add null for compatibility with C ASCIIZ strings
   1552c:	693a      	ldr	r2, [r7, #16]
   1552e:	687b      	ldr	r3, [r7, #4]
   15530:	4413      	add	r3, r2
   15532:	2200      	movs	r2, #0
   15534:	701a      	strb	r2, [r3, #0]
    }
    return MP_OBJ_FROM_PTR(o);
   15536:	697b      	ldr	r3, [r7, #20]
}
   15538:	4618      	mov	r0, r3
   1553a:	3718      	adds	r7, #24
   1553c:	46bd      	mov	sp, r7
   1553e:	bd80      	pop	{r7, pc}

00015540 <mp_obj_new_str_of_type>:

// Create a str/bytes object using the given data.  If the type is str and the string
// data is already interned, then a qstr object is returned.  Otherwise new memory is
// allocated for the object and the data is copied across.
mp_obj_t mp_obj_new_str_of_type(const mp_obj_type_t *type, const byte* data, size_t len) {
   15540:	b580      	push	{r7, lr}
   15542:	b084      	sub	sp, #16
   15544:	af00      	add	r7, sp, #0
   15546:	60f8      	str	r0, [r7, #12]
   15548:	60b9      	str	r1, [r7, #8]
   1554a:	607a      	str	r2, [r7, #4]
    if (type == &mp_type_str) {
   1554c:	68fb      	ldr	r3, [r7, #12]
   1554e:	4a09      	ldr	r2, [pc, #36]	; (15574 <mp_obj_new_str_of_type+0x34>)
   15550:	4293      	cmp	r3, r2
   15552:	d105      	bne.n	15560 <mp_obj_new_str_of_type+0x20>
        return mp_obj_new_str((const char*)data, len);
   15554:	6879      	ldr	r1, [r7, #4]
   15556:	68b8      	ldr	r0, [r7, #8]
   15558:	f000 f882 	bl	15660 <mp_obj_new_str>
   1555c:	4603      	mov	r3, r0
   1555e:	e004      	b.n	1556a <mp_obj_new_str_of_type+0x2a>
    } else {
        return mp_obj_new_bytes(data, len);
   15560:	6879      	ldr	r1, [r7, #4]
   15562:	68b8      	ldr	r0, [r7, #8]
   15564:	f000 f8d4 	bl	15710 <mp_obj_new_bytes>
   15568:	4603      	mov	r3, r0
    }
}
   1556a:	4618      	mov	r0, r3
   1556c:	3710      	adds	r7, #16
   1556e:	46bd      	mov	sp, r7
   15570:	bd80      	pop	{r7, pc}
   15572:	bf00      	nop
   15574:	00023b0c 	.word	0x00023b0c

00015578 <mp_obj_new_str_via_qstr>:

// Create a str using a qstr to store the data; may use existing or new qstr.
mp_obj_t mp_obj_new_str_via_qstr(const char* data, size_t len) {
   15578:	b580      	push	{r7, lr}
   1557a:	b082      	sub	sp, #8
   1557c:	af00      	add	r7, sp, #0
   1557e:	6078      	str	r0, [r7, #4]
   15580:	6039      	str	r1, [r7, #0]
    return MP_OBJ_NEW_QSTR(qstr_from_strn(data, len));
   15582:	6839      	ldr	r1, [r7, #0]
   15584:	6878      	ldr	r0, [r7, #4]
   15586:	f7eb fe15 	bl	11b4 <qstr_from_strn>
   1558a:	4603      	mov	r3, r0
   1558c:	009b      	lsls	r3, r3, #2
   1558e:	f043 0302 	orr.w	r3, r3, #2
}
   15592:	4618      	mov	r0, r3
   15594:	3708      	adds	r7, #8
   15596:	46bd      	mov	sp, r7
   15598:	bd80      	pop	{r7, pc}
   1559a:	bf00      	nop

0001559c <mp_obj_new_str_from_vstr>:

// Create a str/bytes object from the given vstr.  The vstr buffer is resized to
// the exact length required and then reused for the str/bytes object.  The vstr
// is cleared and can safely be passed to vstr_free if it was heap allocated.
mp_obj_t mp_obj_new_str_from_vstr(const mp_obj_type_t *type, vstr_t *vstr) {
   1559c:	b580      	push	{r7, lr}
   1559e:	b084      	sub	sp, #16
   155a0:	af00      	add	r7, sp, #0
   155a2:	6078      	str	r0, [r7, #4]
   155a4:	6039      	str	r1, [r7, #0]
    // if not a bytes object, look if a qstr with this data already exists
    if (type == &mp_type_str) {
   155a6:	687b      	ldr	r3, [r7, #4]
   155a8:	4a2c      	ldr	r2, [pc, #176]	; (1565c <mp_obj_new_str_from_vstr+0xc0>)
   155aa:	4293      	cmp	r3, r2
   155ac:	d116      	bne.n	155dc <mp_obj_new_str_from_vstr+0x40>
        qstr q = qstr_find_strn(vstr->buf, vstr->len);
   155ae:	683b      	ldr	r3, [r7, #0]
   155b0:	689a      	ldr	r2, [r3, #8]
   155b2:	683b      	ldr	r3, [r7, #0]
   155b4:	685b      	ldr	r3, [r3, #4]
   155b6:	4619      	mov	r1, r3
   155b8:	4610      	mov	r0, r2
   155ba:	f7eb fd97 	bl	10ec <qstr_find_strn>
   155be:	60f8      	str	r0, [r7, #12]
        if (q != MP_QSTR_NULL) {
   155c0:	68fb      	ldr	r3, [r7, #12]
   155c2:	2b00      	cmp	r3, #0
   155c4:	d00a      	beq.n	155dc <mp_obj_new_str_from_vstr+0x40>
            vstr_clear(vstr);
   155c6:	6838      	ldr	r0, [r7, #0]
   155c8:	f7eb ffba 	bl	1540 <vstr_clear>
            vstr->alloc = 0;
   155cc:	683b      	ldr	r3, [r7, #0]
   155ce:	2200      	movs	r2, #0
   155d0:	601a      	str	r2, [r3, #0]
            return MP_OBJ_NEW_QSTR(q);
   155d2:	68fb      	ldr	r3, [r7, #12]
   155d4:	009b      	lsls	r3, r3, #2
   155d6:	f043 0302 	orr.w	r3, r3, #2
   155da:	e03b      	b.n	15654 <mp_obj_new_str_from_vstr+0xb8>
        }
    }

    // make a new str/bytes object
    mp_obj_str_t *o = m_new_obj(mp_obj_str_t);
   155dc:	2010      	movs	r0, #16
   155de:	f7ea fe9d 	bl	31c <m_malloc>
   155e2:	60b8      	str	r0, [r7, #8]
    o->base.type = type;
   155e4:	68bb      	ldr	r3, [r7, #8]
   155e6:	687a      	ldr	r2, [r7, #4]
   155e8:	601a      	str	r2, [r3, #0]
    o->len = vstr->len;
   155ea:	683b      	ldr	r3, [r7, #0]
   155ec:	685a      	ldr	r2, [r3, #4]
   155ee:	68bb      	ldr	r3, [r7, #8]
   155f0:	609a      	str	r2, [r3, #8]
    o->hash = qstr_compute_hash((byte*)vstr->buf, vstr->len);
   155f2:	683b      	ldr	r3, [r7, #0]
   155f4:	689a      	ldr	r2, [r3, #8]
   155f6:	683b      	ldr	r3, [r7, #0]
   155f8:	685b      	ldr	r3, [r3, #4]
   155fa:	4619      	mov	r1, r3
   155fc:	4610      	mov	r0, r2
   155fe:	f7eb fcc5 	bl	f8c <qstr_compute_hash>
   15602:	4602      	mov	r2, r0
   15604:	68bb      	ldr	r3, [r7, #8]
   15606:	605a      	str	r2, [r3, #4]
    if (vstr->len + 1 == vstr->alloc) {
   15608:	683b      	ldr	r3, [r7, #0]
   1560a:	685b      	ldr	r3, [r3, #4]
   1560c:	1c5a      	adds	r2, r3, #1
   1560e:	683b      	ldr	r3, [r7, #0]
   15610:	681b      	ldr	r3, [r3, #0]
   15612:	429a      	cmp	r2, r3
   15614:	d104      	bne.n	15620 <mp_obj_new_str_from_vstr+0x84>
        o->data = (byte*)vstr->buf;
   15616:	683b      	ldr	r3, [r7, #0]
   15618:	689a      	ldr	r2, [r3, #8]
   1561a:	68bb      	ldr	r3, [r7, #8]
   1561c:	60da      	str	r2, [r3, #12]
   1561e:	e00b      	b.n	15638 <mp_obj_new_str_from_vstr+0x9c>
    } else {
        o->data = (byte*)m_renew(char, vstr->buf, vstr->alloc, vstr->len + 1);
   15620:	683b      	ldr	r3, [r7, #0]
   15622:	689a      	ldr	r2, [r3, #8]
   15624:	683b      	ldr	r3, [r7, #0]
   15626:	685b      	ldr	r3, [r3, #4]
   15628:	3301      	adds	r3, #1
   1562a:	4619      	mov	r1, r3
   1562c:	4610      	mov	r0, r2
   1562e:	f7ea fec1 	bl	3b4 <m_realloc>
   15632:	4602      	mov	r2, r0
   15634:	68bb      	ldr	r3, [r7, #8]
   15636:	60da      	str	r2, [r3, #12]
    }
    ((byte*)o->data)[o->len] = '\0'; // add null byte
   15638:	68bb      	ldr	r3, [r7, #8]
   1563a:	68da      	ldr	r2, [r3, #12]
   1563c:	68bb      	ldr	r3, [r7, #8]
   1563e:	689b      	ldr	r3, [r3, #8]
   15640:	4413      	add	r3, r2
   15642:	2200      	movs	r2, #0
   15644:	701a      	strb	r2, [r3, #0]
    vstr->buf = NULL;
   15646:	683b      	ldr	r3, [r7, #0]
   15648:	2200      	movs	r2, #0
   1564a:	609a      	str	r2, [r3, #8]
    vstr->alloc = 0;
   1564c:	683b      	ldr	r3, [r7, #0]
   1564e:	2200      	movs	r2, #0
   15650:	601a      	str	r2, [r3, #0]
    return MP_OBJ_FROM_PTR(o);
   15652:	68bb      	ldr	r3, [r7, #8]
}
   15654:	4618      	mov	r0, r3
   15656:	3710      	adds	r7, #16
   15658:	46bd      	mov	sp, r7
   1565a:	bd80      	pop	{r7, pc}
   1565c:	00023b0c 	.word	0x00023b0c

00015660 <mp_obj_new_str>:

mp_obj_t mp_obj_new_str(const char* data, size_t len) {
   15660:	b580      	push	{r7, lr}
   15662:	b084      	sub	sp, #16
   15664:	af00      	add	r7, sp, #0
   15666:	6078      	str	r0, [r7, #4]
   15668:	6039      	str	r1, [r7, #0]
    qstr q = qstr_find_strn(data, len);
   1566a:	6839      	ldr	r1, [r7, #0]
   1566c:	6878      	ldr	r0, [r7, #4]
   1566e:	f7eb fd3d 	bl	10ec <qstr_find_strn>
   15672:	60f8      	str	r0, [r7, #12]
    if (q != MP_QSTR_NULL) {
   15674:	68fb      	ldr	r3, [r7, #12]
   15676:	2b00      	cmp	r3, #0
   15678:	d004      	beq.n	15684 <mp_obj_new_str+0x24>
        // qstr with this data already exists
        return MP_OBJ_NEW_QSTR(q);
   1567a:	68fb      	ldr	r3, [r7, #12]
   1567c:	009b      	lsls	r3, r3, #2
   1567e:	f043 0302 	orr.w	r3, r3, #2
   15682:	e005      	b.n	15690 <mp_obj_new_str+0x30>
    } else {
        // no existing qstr, don't make one
        return mp_obj_new_str_copy(&mp_type_str, (const byte*)data, len);
   15684:	683a      	ldr	r2, [r7, #0]
   15686:	6879      	ldr	r1, [r7, #4]
   15688:	4803      	ldr	r0, [pc, #12]	; (15698 <mp_obj_new_str+0x38>)
   1568a:	f7ff ff27 	bl	154dc <mp_obj_new_str_copy>
   1568e:	4603      	mov	r3, r0
    }
}
   15690:	4618      	mov	r0, r3
   15692:	3710      	adds	r7, #16
   15694:	46bd      	mov	sp, r7
   15696:	bd80      	pop	{r7, pc}
   15698:	00023b0c 	.word	0x00023b0c

0001569c <mp_obj_str_intern>:

mp_obj_t mp_obj_str_intern(mp_obj_t str) {
   1569c:	b580      	push	{r7, lr}
   1569e:	b084      	sub	sp, #16
   156a0:	af00      	add	r7, sp, #0
   156a2:	6078      	str	r0, [r7, #4]
    GET_STR_DATA_LEN(str, data, len);
   156a4:	6878      	ldr	r0, [r7, #4]
   156a6:	f7fc fef9 	bl	1249c <MP_OBJ_IS_QSTR>
   156aa:	4603      	mov	r3, r0
   156ac:	2b00      	cmp	r3, #0
   156ae:	d009      	beq.n	156c4 <mp_obj_str_intern+0x28>
   156b0:	687b      	ldr	r3, [r7, #4]
   156b2:	089b      	lsrs	r3, r3, #2
   156b4:	f107 0208 	add.w	r2, r7, #8
   156b8:	4611      	mov	r1, r2
   156ba:	4618      	mov	r0, r3
   156bc:	f7eb fe64 	bl	1388 <qstr_data>
   156c0:	60f8      	str	r0, [r7, #12]
   156c2:	e005      	b.n	156d0 <mp_obj_str_intern+0x34>
   156c4:	687b      	ldr	r3, [r7, #4]
   156c6:	689b      	ldr	r3, [r3, #8]
   156c8:	60bb      	str	r3, [r7, #8]
   156ca:	687b      	ldr	r3, [r7, #4]
   156cc:	68db      	ldr	r3, [r3, #12]
   156ce:	60fb      	str	r3, [r7, #12]
    return mp_obj_new_str_via_qstr((const char*)data, len);
   156d0:	68bb      	ldr	r3, [r7, #8]
   156d2:	4619      	mov	r1, r3
   156d4:	68f8      	ldr	r0, [r7, #12]
   156d6:	f7ff ff4f 	bl	15578 <mp_obj_new_str_via_qstr>
   156da:	4603      	mov	r3, r0
}
   156dc:	4618      	mov	r0, r3
   156de:	3710      	adds	r7, #16
   156e0:	46bd      	mov	sp, r7
   156e2:	bd80      	pop	{r7, pc}

000156e4 <mp_obj_str_intern_checked>:

mp_obj_t mp_obj_str_intern_checked(mp_obj_t obj) {
   156e4:	b580      	push	{r7, lr}
   156e6:	b084      	sub	sp, #16
   156e8:	af00      	add	r7, sp, #0
   156ea:	6078      	str	r0, [r7, #4]
    size_t len;
    const char *data = mp_obj_str_get_data(obj, &len);
   156ec:	f107 0308 	add.w	r3, r7, #8
   156f0:	4619      	mov	r1, r3
   156f2:	6878      	ldr	r0, [r7, #4]
   156f4:	f000 f916 	bl	15924 <mp_obj_str_get_data>
   156f8:	60f8      	str	r0, [r7, #12]
    return mp_obj_new_str_via_qstr((const char*)data, len);
   156fa:	68bb      	ldr	r3, [r7, #8]
   156fc:	4619      	mov	r1, r3
   156fe:	68f8      	ldr	r0, [r7, #12]
   15700:	f7ff ff3a 	bl	15578 <mp_obj_new_str_via_qstr>
   15704:	4603      	mov	r3, r0
}
   15706:	4618      	mov	r0, r3
   15708:	3710      	adds	r7, #16
   1570a:	46bd      	mov	sp, r7
   1570c:	bd80      	pop	{r7, pc}
   1570e:	bf00      	nop

00015710 <mp_obj_new_bytes>:

mp_obj_t mp_obj_new_bytes(const byte* data, size_t len) {
   15710:	b580      	push	{r7, lr}
   15712:	b082      	sub	sp, #8
   15714:	af00      	add	r7, sp, #0
   15716:	6078      	str	r0, [r7, #4]
   15718:	6039      	str	r1, [r7, #0]
    return mp_obj_new_str_copy(&mp_type_bytes, data, len);
   1571a:	683a      	ldr	r2, [r7, #0]
   1571c:	6879      	ldr	r1, [r7, #4]
   1571e:	4804      	ldr	r0, [pc, #16]	; (15730 <mp_obj_new_bytes+0x20>)
   15720:	f7ff fedc 	bl	154dc <mp_obj_new_str_copy>
   15724:	4603      	mov	r3, r0
}
   15726:	4618      	mov	r0, r3
   15728:	3708      	adds	r7, #8
   1572a:	46bd      	mov	sp, r7
   1572c:	bd80      	pop	{r7, pc}
   1572e:	bf00      	nop
   15730:	00023b48 	.word	0x00023b48

00015734 <mp_obj_str_equal>:

bool mp_obj_str_equal(mp_obj_t s1, mp_obj_t s2) {
   15734:	b580      	push	{r7, lr}
   15736:	b088      	sub	sp, #32
   15738:	af00      	add	r7, sp, #0
   1573a:	6078      	str	r0, [r7, #4]
   1573c:	6039      	str	r1, [r7, #0]
    if (MP_OBJ_IS_QSTR(s1) && MP_OBJ_IS_QSTR(s2)) {
   1573e:	6878      	ldr	r0, [r7, #4]
   15740:	f7fc feac 	bl	1249c <MP_OBJ_IS_QSTR>
   15744:	4603      	mov	r3, r0
   15746:	2b00      	cmp	r3, #0
   15748:	d00d      	beq.n	15766 <mp_obj_str_equal+0x32>
   1574a:	6838      	ldr	r0, [r7, #0]
   1574c:	f7fc fea6 	bl	1249c <MP_OBJ_IS_QSTR>
   15750:	4603      	mov	r3, r0
   15752:	2b00      	cmp	r3, #0
   15754:	d007      	beq.n	15766 <mp_obj_str_equal+0x32>
        return s1 == s2;
   15756:	687a      	ldr	r2, [r7, #4]
   15758:	683b      	ldr	r3, [r7, #0]
   1575a:	429a      	cmp	r2, r3
   1575c:	bf0c      	ite	eq
   1575e:	2301      	moveq	r3, #1
   15760:	2300      	movne	r3, #0
   15762:	b2db      	uxtb	r3, r3
   15764:	e069      	b.n	1583a <mp_obj_str_equal+0x106>
    } else {
        GET_STR_HASH(s1, h1);
   15766:	6878      	ldr	r0, [r7, #4]
   15768:	f7fc fe98 	bl	1249c <MP_OBJ_IS_QSTR>
   1576c:	4603      	mov	r3, r0
   1576e:	2b00      	cmp	r3, #0
   15770:	d006      	beq.n	15780 <mp_obj_str_equal+0x4c>
   15772:	687b      	ldr	r3, [r7, #4]
   15774:	089b      	lsrs	r3, r3, #2
   15776:	4618      	mov	r0, r3
   15778:	f7eb fdda 	bl	1330 <qstr_hash>
   1577c:	61f8      	str	r0, [r7, #28]
   1577e:	e002      	b.n	15786 <mp_obj_str_equal+0x52>
   15780:	687b      	ldr	r3, [r7, #4]
   15782:	685b      	ldr	r3, [r3, #4]
   15784:	61fb      	str	r3, [r7, #28]
        GET_STR_HASH(s2, h2);
   15786:	6838      	ldr	r0, [r7, #0]
   15788:	f7fc fe88 	bl	1249c <MP_OBJ_IS_QSTR>
   1578c:	4603      	mov	r3, r0
   1578e:	2b00      	cmp	r3, #0
   15790:	d006      	beq.n	157a0 <mp_obj_str_equal+0x6c>
   15792:	683b      	ldr	r3, [r7, #0]
   15794:	089b      	lsrs	r3, r3, #2
   15796:	4618      	mov	r0, r3
   15798:	f7eb fdca 	bl	1330 <qstr_hash>
   1579c:	61b8      	str	r0, [r7, #24]
   1579e:	e002      	b.n	157a6 <mp_obj_str_equal+0x72>
   157a0:	683b      	ldr	r3, [r7, #0]
   157a2:	685b      	ldr	r3, [r3, #4]
   157a4:	61bb      	str	r3, [r7, #24]
        // If any of hashes is 0, it means it's not valid
        if (h1 != 0 && h2 != 0 && h1 != h2) {
   157a6:	69fb      	ldr	r3, [r7, #28]
   157a8:	2b00      	cmp	r3, #0
   157aa:	d008      	beq.n	157be <mp_obj_str_equal+0x8a>
   157ac:	69bb      	ldr	r3, [r7, #24]
   157ae:	2b00      	cmp	r3, #0
   157b0:	d005      	beq.n	157be <mp_obj_str_equal+0x8a>
   157b2:	69fa      	ldr	r2, [r7, #28]
   157b4:	69bb      	ldr	r3, [r7, #24]
   157b6:	429a      	cmp	r2, r3
   157b8:	d001      	beq.n	157be <mp_obj_str_equal+0x8a>
            return false;
   157ba:	2300      	movs	r3, #0
   157bc:	e03d      	b.n	1583a <mp_obj_str_equal+0x106>
        }
        GET_STR_DATA_LEN(s1, d1, l1);
   157be:	6878      	ldr	r0, [r7, #4]
   157c0:	f7fc fe6c 	bl	1249c <MP_OBJ_IS_QSTR>
   157c4:	4603      	mov	r3, r0
   157c6:	2b00      	cmp	r3, #0
   157c8:	d009      	beq.n	157de <mp_obj_str_equal+0xaa>
   157ca:	687b      	ldr	r3, [r7, #4]
   157cc:	089b      	lsrs	r3, r3, #2
   157ce:	f107 020c 	add.w	r2, r7, #12
   157d2:	4611      	mov	r1, r2
   157d4:	4618      	mov	r0, r3
   157d6:	f7eb fdd7 	bl	1388 <qstr_data>
   157da:	6178      	str	r0, [r7, #20]
   157dc:	e005      	b.n	157ea <mp_obj_str_equal+0xb6>
   157de:	687b      	ldr	r3, [r7, #4]
   157e0:	689b      	ldr	r3, [r3, #8]
   157e2:	60fb      	str	r3, [r7, #12]
   157e4:	687b      	ldr	r3, [r7, #4]
   157e6:	68db      	ldr	r3, [r3, #12]
   157e8:	617b      	str	r3, [r7, #20]
        GET_STR_DATA_LEN(s2, d2, l2);
   157ea:	6838      	ldr	r0, [r7, #0]
   157ec:	f7fc fe56 	bl	1249c <MP_OBJ_IS_QSTR>
   157f0:	4603      	mov	r3, r0
   157f2:	2b00      	cmp	r3, #0
   157f4:	d009      	beq.n	1580a <mp_obj_str_equal+0xd6>
   157f6:	683b      	ldr	r3, [r7, #0]
   157f8:	089b      	lsrs	r3, r3, #2
   157fa:	f107 0208 	add.w	r2, r7, #8
   157fe:	4611      	mov	r1, r2
   15800:	4618      	mov	r0, r3
   15802:	f7eb fdc1 	bl	1388 <qstr_data>
   15806:	6138      	str	r0, [r7, #16]
   15808:	e005      	b.n	15816 <mp_obj_str_equal+0xe2>
   1580a:	683b      	ldr	r3, [r7, #0]
   1580c:	689b      	ldr	r3, [r3, #8]
   1580e:	60bb      	str	r3, [r7, #8]
   15810:	683b      	ldr	r3, [r7, #0]
   15812:	68db      	ldr	r3, [r3, #12]
   15814:	613b      	str	r3, [r7, #16]
        if (l1 != l2) {
   15816:	68fa      	ldr	r2, [r7, #12]
   15818:	68bb      	ldr	r3, [r7, #8]
   1581a:	429a      	cmp	r2, r3
   1581c:	d001      	beq.n	15822 <mp_obj_str_equal+0xee>
            return false;
   1581e:	2300      	movs	r3, #0
   15820:	e00b      	b.n	1583a <mp_obj_str_equal+0x106>
        }
        return memcmp(d1, d2, l1) == 0;
   15822:	68fb      	ldr	r3, [r7, #12]
   15824:	461a      	mov	r2, r3
   15826:	6939      	ldr	r1, [r7, #16]
   15828:	6978      	ldr	r0, [r7, #20]
   1582a:	f007 fb0d 	bl	1ce48 <memcmp>
   1582e:	4603      	mov	r3, r0
   15830:	2b00      	cmp	r3, #0
   15832:	bf0c      	ite	eq
   15834:	2301      	moveq	r3, #1
   15836:	2300      	movne	r3, #0
   15838:	b2db      	uxtb	r3, r3
    }
}
   1583a:	4618      	mov	r0, r3
   1583c:	3720      	adds	r7, #32
   1583e:	46bd      	mov	sp, r7
   15840:	bd80      	pop	{r7, pc}
   15842:	bf00      	nop

00015844 <bad_implicit_conversion>:

STATIC NORETURN void bad_implicit_conversion(mp_obj_t self_in) {
   15844:	b580      	push	{r7, lr}
   15846:	b082      	sub	sp, #8
   15848:	af00      	add	r7, sp, #0
   1584a:	6078      	str	r0, [r7, #4]
    if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
        mp_raise_TypeError("can't convert to str implicitly");
   1584c:	4801      	ldr	r0, [pc, #4]	; (15854 <bad_implicit_conversion+0x10>)
   1584e:	f7f7 fcd1 	bl	d1f4 <mp_raise_TypeError>
   15852:	bf00      	nop
   15854:	00023b98 	.word	0x00023b98

00015858 <mp_obj_str_get_qstr>:
    }
}

// use this if you will anyway convert the string to a qstr
// will be more efficient for the case where it's already a qstr
qstr mp_obj_str_get_qstr(mp_obj_t self_in) {
   15858:	b580      	push	{r7, lr}
   1585a:	b084      	sub	sp, #16
   1585c:	af00      	add	r7, sp, #0
   1585e:	6078      	str	r0, [r7, #4]
    if (MP_OBJ_IS_QSTR(self_in)) {
   15860:	6878      	ldr	r0, [r7, #4]
   15862:	f7fc fe1b 	bl	1249c <MP_OBJ_IS_QSTR>
   15866:	4603      	mov	r3, r0
   15868:	2b00      	cmp	r3, #0
   1586a:	d002      	beq.n	15872 <mp_obj_str_get_qstr+0x1a>
        return MP_OBJ_QSTR_VALUE(self_in);
   1586c:	687b      	ldr	r3, [r7, #4]
   1586e:	089b      	lsrs	r3, r3, #2
   15870:	e019      	b.n	158a6 <mp_obj_str_get_qstr+0x4e>
    } else if (MP_OBJ_IS_TYPE(self_in, &mp_type_str)) {
   15872:	6878      	ldr	r0, [r7, #4]
   15874:	f7fc fe24 	bl	124c0 <MP_OBJ_IS_OBJ>
   15878:	4603      	mov	r3, r0
   1587a:	2b00      	cmp	r3, #0
   1587c:	d010      	beq.n	158a0 <mp_obj_str_get_qstr+0x48>
   1587e:	687b      	ldr	r3, [r7, #4]
   15880:	681b      	ldr	r3, [r3, #0]
   15882:	4a0b      	ldr	r2, [pc, #44]	; (158b0 <mp_obj_str_get_qstr+0x58>)
   15884:	4293      	cmp	r3, r2
   15886:	d10b      	bne.n	158a0 <mp_obj_str_get_qstr+0x48>
        mp_obj_str_t *self = MP_OBJ_TO_PTR(self_in);
   15888:	687b      	ldr	r3, [r7, #4]
   1588a:	60fb      	str	r3, [r7, #12]
        return qstr_from_strn((char*)self->data, self->len);
   1588c:	68fb      	ldr	r3, [r7, #12]
   1588e:	68da      	ldr	r2, [r3, #12]
   15890:	68fb      	ldr	r3, [r7, #12]
   15892:	689b      	ldr	r3, [r3, #8]
   15894:	4619      	mov	r1, r3
   15896:	4610      	mov	r0, r2
   15898:	f7eb fc8c 	bl	11b4 <qstr_from_strn>
   1589c:	4603      	mov	r3, r0
   1589e:	e002      	b.n	158a6 <mp_obj_str_get_qstr+0x4e>
    } else {
        bad_implicit_conversion(self_in);
   158a0:	6878      	ldr	r0, [r7, #4]
   158a2:	f7ff ffcf 	bl	15844 <bad_implicit_conversion>
    }
}
   158a6:	4618      	mov	r0, r3
   158a8:	3710      	adds	r7, #16
   158aa:	46bd      	mov	sp, r7
   158ac:	bd80      	pop	{r7, pc}
   158ae:	bf00      	nop
   158b0:	00023b0c 	.word	0x00023b0c

000158b4 <mp_obj_str_get_str>:

// only use this function if you need the str data to be zero terminated
// at the moment all strings are zero terminated to help with C ASCIIZ compatibility
const char *mp_obj_str_get_str(mp_obj_t self_in) {
   158b4:	b580      	push	{r7, lr}
   158b6:	b084      	sub	sp, #16
   158b8:	af00      	add	r7, sp, #0
   158ba:	6078      	str	r0, [r7, #4]
    if (MP_OBJ_IS_STR_OR_BYTES(self_in)) {
   158bc:	6878      	ldr	r0, [r7, #4]
   158be:	f7fc fded 	bl	1249c <MP_OBJ_IS_QSTR>
   158c2:	4603      	mov	r3, r0
   158c4:	2b00      	cmp	r3, #0
   158c6:	d10b      	bne.n	158e0 <mp_obj_str_get_str+0x2c>
   158c8:	6878      	ldr	r0, [r7, #4]
   158ca:	f7fc fdf9 	bl	124c0 <MP_OBJ_IS_OBJ>
   158ce:	4603      	mov	r3, r0
   158d0:	2b00      	cmp	r3, #0
   158d2:	d01d      	beq.n	15910 <mp_obj_str_get_str+0x5c>
   158d4:	687b      	ldr	r3, [r7, #4]
   158d6:	681b      	ldr	r3, [r3, #0]
   158d8:	699b      	ldr	r3, [r3, #24]
   158da:	4a11      	ldr	r2, [pc, #68]	; (15920 <mp_obj_str_get_str+0x6c>)
   158dc:	4293      	cmp	r3, r2
   158de:	d117      	bne.n	15910 <mp_obj_str_get_str+0x5c>
        GET_STR_DATA_LEN(self_in, s, l);
   158e0:	6878      	ldr	r0, [r7, #4]
   158e2:	f7fc fddb 	bl	1249c <MP_OBJ_IS_QSTR>
   158e6:	4603      	mov	r3, r0
   158e8:	2b00      	cmp	r3, #0
   158ea:	d009      	beq.n	15900 <mp_obj_str_get_str+0x4c>
   158ec:	687b      	ldr	r3, [r7, #4]
   158ee:	089b      	lsrs	r3, r3, #2
   158f0:	f107 0208 	add.w	r2, r7, #8
   158f4:	4611      	mov	r1, r2
   158f6:	4618      	mov	r0, r3
   158f8:	f7eb fd46 	bl	1388 <qstr_data>
   158fc:	60f8      	str	r0, [r7, #12]
   158fe:	e005      	b.n	1590c <mp_obj_str_get_str+0x58>
   15900:	687b      	ldr	r3, [r7, #4]
   15902:	689b      	ldr	r3, [r3, #8]
   15904:	60bb      	str	r3, [r7, #8]
   15906:	687b      	ldr	r3, [r7, #4]
   15908:	68db      	ldr	r3, [r3, #12]
   1590a:	60fb      	str	r3, [r7, #12]
        (void)l; // len unused
        return (const char*)s;
   1590c:	68fb      	ldr	r3, [r7, #12]
   1590e:	e002      	b.n	15916 <mp_obj_str_get_str+0x62>
    } else {
        bad_implicit_conversion(self_in);
   15910:	6878      	ldr	r0, [r7, #4]
   15912:	f7ff ff97 	bl	15844 <bad_implicit_conversion>
    }
}
   15916:	4618      	mov	r0, r3
   15918:	3710      	adds	r7, #16
   1591a:	46bd      	mov	sp, r7
   1591c:	bd80      	pop	{r7, pc}
   1591e:	bf00      	nop
   15920:	00012b11 	.word	0x00012b11

00015924 <mp_obj_str_get_data>:

const char *mp_obj_str_get_data(mp_obj_t self_in, size_t *len) {
   15924:	b580      	push	{r7, lr}
   15926:	b084      	sub	sp, #16
   15928:	af00      	add	r7, sp, #0
   1592a:	6078      	str	r0, [r7, #4]
   1592c:	6039      	str	r1, [r7, #0]
    if (MP_OBJ_IS_STR_OR_BYTES(self_in)) {
   1592e:	6878      	ldr	r0, [r7, #4]
   15930:	f7fc fdb4 	bl	1249c <MP_OBJ_IS_QSTR>
   15934:	4603      	mov	r3, r0
   15936:	2b00      	cmp	r3, #0
   15938:	d10b      	bne.n	15952 <mp_obj_str_get_data+0x2e>
   1593a:	6878      	ldr	r0, [r7, #4]
   1593c:	f7fc fdc0 	bl	124c0 <MP_OBJ_IS_OBJ>
   15940:	4603      	mov	r3, r0
   15942:	2b00      	cmp	r3, #0
   15944:	d020      	beq.n	15988 <mp_obj_str_get_data+0x64>
   15946:	687b      	ldr	r3, [r7, #4]
   15948:	681b      	ldr	r3, [r3, #0]
   1594a:	699b      	ldr	r3, [r3, #24]
   1594c:	4a12      	ldr	r2, [pc, #72]	; (15998 <mp_obj_str_get_data+0x74>)
   1594e:	4293      	cmp	r3, r2
   15950:	d11a      	bne.n	15988 <mp_obj_str_get_data+0x64>
        GET_STR_DATA_LEN(self_in, s, l);
   15952:	6878      	ldr	r0, [r7, #4]
   15954:	f7fc fda2 	bl	1249c <MP_OBJ_IS_QSTR>
   15958:	4603      	mov	r3, r0
   1595a:	2b00      	cmp	r3, #0
   1595c:	d009      	beq.n	15972 <mp_obj_str_get_data+0x4e>
   1595e:	687b      	ldr	r3, [r7, #4]
   15960:	089b      	lsrs	r3, r3, #2
   15962:	f107 0208 	add.w	r2, r7, #8
   15966:	4611      	mov	r1, r2
   15968:	4618      	mov	r0, r3
   1596a:	f7eb fd0d 	bl	1388 <qstr_data>
   1596e:	60f8      	str	r0, [r7, #12]
   15970:	e005      	b.n	1597e <mp_obj_str_get_data+0x5a>
   15972:	687b      	ldr	r3, [r7, #4]
   15974:	689b      	ldr	r3, [r3, #8]
   15976:	60bb      	str	r3, [r7, #8]
   15978:	687b      	ldr	r3, [r7, #4]
   1597a:	68db      	ldr	r3, [r3, #12]
   1597c:	60fb      	str	r3, [r7, #12]
        *len = l;
   1597e:	68ba      	ldr	r2, [r7, #8]
   15980:	683b      	ldr	r3, [r7, #0]
   15982:	601a      	str	r2, [r3, #0]
        return (const char*)s;
   15984:	68fb      	ldr	r3, [r7, #12]
   15986:	e002      	b.n	1598e <mp_obj_str_get_data+0x6a>
    } else {
        bad_implicit_conversion(self_in);
   15988:	6878      	ldr	r0, [r7, #4]
   1598a:	f7ff ff5b 	bl	15844 <bad_implicit_conversion>
    }
}
   1598e:	4618      	mov	r0, r3
   15990:	3710      	adds	r7, #16
   15992:	46bd      	mov	sp, r7
   15994:	bd80      	pop	{r7, pc}
   15996:	bf00      	nop
   15998:	00012b11 	.word	0x00012b11

0001599c <str_it_iternext>:
    mp_obj_t str;
    size_t cur;
} mp_obj_str8_it_t;

#if !MICROPY_PY_BUILTINS_STR_UNICODE
STATIC mp_obj_t str_it_iternext(mp_obj_t self_in) {
   1599c:	b580      	push	{r7, lr}
   1599e:	b086      	sub	sp, #24
   159a0:	af00      	add	r7, sp, #0
   159a2:	6078      	str	r0, [r7, #4]
    mp_obj_str8_it_t *self = MP_OBJ_TO_PTR(self_in);
   159a4:	687b      	ldr	r3, [r7, #4]
   159a6:	613b      	str	r3, [r7, #16]
    GET_STR_DATA_LEN(self->str, str, len);
   159a8:	693b      	ldr	r3, [r7, #16]
   159aa:	689b      	ldr	r3, [r3, #8]
   159ac:	4618      	mov	r0, r3
   159ae:	f7fc fd75 	bl	1249c <MP_OBJ_IS_QSTR>
   159b2:	4603      	mov	r3, r0
   159b4:	2b00      	cmp	r3, #0
   159b6:	d00a      	beq.n	159ce <str_it_iternext+0x32>
   159b8:	693b      	ldr	r3, [r7, #16]
   159ba:	689b      	ldr	r3, [r3, #8]
   159bc:	089b      	lsrs	r3, r3, #2
   159be:	f107 0208 	add.w	r2, r7, #8
   159c2:	4611      	mov	r1, r2
   159c4:	4618      	mov	r0, r3
   159c6:	f7eb fcdf 	bl	1388 <qstr_data>
   159ca:	6178      	str	r0, [r7, #20]
   159cc:	e007      	b.n	159de <str_it_iternext+0x42>
   159ce:	693b      	ldr	r3, [r7, #16]
   159d0:	689b      	ldr	r3, [r3, #8]
   159d2:	689b      	ldr	r3, [r3, #8]
   159d4:	60bb      	str	r3, [r7, #8]
   159d6:	693b      	ldr	r3, [r7, #16]
   159d8:	689b      	ldr	r3, [r3, #8]
   159da:	68db      	ldr	r3, [r3, #12]
   159dc:	617b      	str	r3, [r7, #20]
    if (self->cur < len) {
   159de:	693b      	ldr	r3, [r7, #16]
   159e0:	68da      	ldr	r2, [r3, #12]
   159e2:	68bb      	ldr	r3, [r7, #8]
   159e4:	429a      	cmp	r2, r3
   159e6:	d20f      	bcs.n	15a08 <str_it_iternext+0x6c>
        mp_obj_t o_out = mp_obj_new_str_via_qstr((const char*)str + self->cur, 1);
   159e8:	693b      	ldr	r3, [r7, #16]
   159ea:	68db      	ldr	r3, [r3, #12]
   159ec:	697a      	ldr	r2, [r7, #20]
   159ee:	4413      	add	r3, r2
   159f0:	2101      	movs	r1, #1
   159f2:	4618      	mov	r0, r3
   159f4:	f7ff fdc0 	bl	15578 <mp_obj_new_str_via_qstr>
   159f8:	60f8      	str	r0, [r7, #12]
        self->cur += 1;
   159fa:	693b      	ldr	r3, [r7, #16]
   159fc:	68db      	ldr	r3, [r3, #12]
   159fe:	1c5a      	adds	r2, r3, #1
   15a00:	693b      	ldr	r3, [r7, #16]
   15a02:	60da      	str	r2, [r3, #12]
        return o_out;
   15a04:	68fb      	ldr	r3, [r7, #12]
   15a06:	e000      	b.n	15a0a <str_it_iternext+0x6e>
    } else {
        return MP_OBJ_STOP_ITERATION;
   15a08:	2304      	movs	r3, #4
    }
}
   15a0a:	4618      	mov	r0, r3
   15a0c:	3718      	adds	r7, #24
   15a0e:	46bd      	mov	sp, r7
   15a10:	bd80      	pop	{r7, pc}
   15a12:	bf00      	nop

00015a14 <mp_obj_new_str_iterator>:

STATIC mp_obj_t mp_obj_new_str_iterator(mp_obj_t str, mp_obj_iter_buf_t *iter_buf) {
   15a14:	b480      	push	{r7}
   15a16:	b085      	sub	sp, #20
   15a18:	af00      	add	r7, sp, #0
   15a1a:	6078      	str	r0, [r7, #4]
   15a1c:	6039      	str	r1, [r7, #0]
    assert(sizeof(mp_obj_str8_it_t) <= sizeof(mp_obj_iter_buf_t));
    mp_obj_str8_it_t *o = (mp_obj_str8_it_t*)iter_buf;
   15a1e:	683b      	ldr	r3, [r7, #0]
   15a20:	60fb      	str	r3, [r7, #12]
    o->base.type = &mp_type_polymorph_iter;
   15a22:	68fb      	ldr	r3, [r7, #12]
   15a24:	4a08      	ldr	r2, [pc, #32]	; (15a48 <mp_obj_new_str_iterator+0x34>)
   15a26:	601a      	str	r2, [r3, #0]
    o->iternext = str_it_iternext;
   15a28:	68fb      	ldr	r3, [r7, #12]
   15a2a:	4a08      	ldr	r2, [pc, #32]	; (15a4c <mp_obj_new_str_iterator+0x38>)
   15a2c:	605a      	str	r2, [r3, #4]
    o->str = str;
   15a2e:	68fb      	ldr	r3, [r7, #12]
   15a30:	687a      	ldr	r2, [r7, #4]
   15a32:	609a      	str	r2, [r3, #8]
    o->cur = 0;
   15a34:	68fb      	ldr	r3, [r7, #12]
   15a36:	2200      	movs	r2, #0
   15a38:	60da      	str	r2, [r3, #12]
    return MP_OBJ_FROM_PTR(o);
   15a3a:	68fb      	ldr	r3, [r7, #12]
}
   15a3c:	4618      	mov	r0, r3
   15a3e:	3714      	adds	r7, #20
   15a40:	46bd      	mov	sp, r7
   15a42:	f85d 7b04 	ldr.w	r7, [sp], #4
   15a46:	4770      	bx	lr
   15a48:	000233dc 	.word	0x000233dc
   15a4c:	0001599d 	.word	0x0001599d

00015a50 <bytes_it_iternext>:
#endif

STATIC mp_obj_t bytes_it_iternext(mp_obj_t self_in) {
   15a50:	b580      	push	{r7, lr}
   15a52:	b086      	sub	sp, #24
   15a54:	af00      	add	r7, sp, #0
   15a56:	6078      	str	r0, [r7, #4]
    mp_obj_str8_it_t *self = MP_OBJ_TO_PTR(self_in);
   15a58:	687b      	ldr	r3, [r7, #4]
   15a5a:	613b      	str	r3, [r7, #16]
    GET_STR_DATA_LEN(self->str, str, len);
   15a5c:	693b      	ldr	r3, [r7, #16]
   15a5e:	689b      	ldr	r3, [r3, #8]
   15a60:	4618      	mov	r0, r3
   15a62:	f7fc fd1b 	bl	1249c <MP_OBJ_IS_QSTR>
   15a66:	4603      	mov	r3, r0
   15a68:	2b00      	cmp	r3, #0
   15a6a:	d00a      	beq.n	15a82 <bytes_it_iternext+0x32>
   15a6c:	693b      	ldr	r3, [r7, #16]
   15a6e:	689b      	ldr	r3, [r3, #8]
   15a70:	089b      	lsrs	r3, r3, #2
   15a72:	f107 0208 	add.w	r2, r7, #8
   15a76:	4611      	mov	r1, r2
   15a78:	4618      	mov	r0, r3
   15a7a:	f7eb fc85 	bl	1388 <qstr_data>
   15a7e:	6178      	str	r0, [r7, #20]
   15a80:	e007      	b.n	15a92 <bytes_it_iternext+0x42>
   15a82:	693b      	ldr	r3, [r7, #16]
   15a84:	689b      	ldr	r3, [r3, #8]
   15a86:	689b      	ldr	r3, [r3, #8]
   15a88:	60bb      	str	r3, [r7, #8]
   15a8a:	693b      	ldr	r3, [r7, #16]
   15a8c:	689b      	ldr	r3, [r3, #8]
   15a8e:	68db      	ldr	r3, [r3, #12]
   15a90:	617b      	str	r3, [r7, #20]
    if (self->cur < len) {
   15a92:	693b      	ldr	r3, [r7, #16]
   15a94:	68da      	ldr	r2, [r3, #12]
   15a96:	68bb      	ldr	r3, [r7, #8]
   15a98:	429a      	cmp	r2, r3
   15a9a:	d20f      	bcs.n	15abc <bytes_it_iternext+0x6c>
        mp_obj_t o_out = MP_OBJ_NEW_SMALL_INT(str[self->cur]);
   15a9c:	693b      	ldr	r3, [r7, #16]
   15a9e:	68db      	ldr	r3, [r3, #12]
   15aa0:	697a      	ldr	r2, [r7, #20]
   15aa2:	4413      	add	r3, r2
   15aa4:	781b      	ldrb	r3, [r3, #0]
   15aa6:	005b      	lsls	r3, r3, #1
   15aa8:	f043 0301 	orr.w	r3, r3, #1
   15aac:	60fb      	str	r3, [r7, #12]
        self->cur += 1;
   15aae:	693b      	ldr	r3, [r7, #16]
   15ab0:	68db      	ldr	r3, [r3, #12]
   15ab2:	1c5a      	adds	r2, r3, #1
   15ab4:	693b      	ldr	r3, [r7, #16]
   15ab6:	60da      	str	r2, [r3, #12]
        return o_out;
   15ab8:	68fb      	ldr	r3, [r7, #12]
   15aba:	e000      	b.n	15abe <bytes_it_iternext+0x6e>
    } else {
        return MP_OBJ_STOP_ITERATION;
   15abc:	2304      	movs	r3, #4
    }
}
   15abe:	4618      	mov	r0, r3
   15ac0:	3718      	adds	r7, #24
   15ac2:	46bd      	mov	sp, r7
   15ac4:	bd80      	pop	{r7, pc}
   15ac6:	bf00      	nop

00015ac8 <mp_obj_new_bytes_iterator>:

mp_obj_t mp_obj_new_bytes_iterator(mp_obj_t str, mp_obj_iter_buf_t *iter_buf) {
   15ac8:	b480      	push	{r7}
   15aca:	b085      	sub	sp, #20
   15acc:	af00      	add	r7, sp, #0
   15ace:	6078      	str	r0, [r7, #4]
   15ad0:	6039      	str	r1, [r7, #0]
    assert(sizeof(mp_obj_str8_it_t) <= sizeof(mp_obj_iter_buf_t));
    mp_obj_str8_it_t *o = (mp_obj_str8_it_t*)iter_buf;
   15ad2:	683b      	ldr	r3, [r7, #0]
   15ad4:	60fb      	str	r3, [r7, #12]
    o->base.type = &mp_type_polymorph_iter;
   15ad6:	68fb      	ldr	r3, [r7, #12]
   15ad8:	4a08      	ldr	r2, [pc, #32]	; (15afc <mp_obj_new_bytes_iterator+0x34>)
   15ada:	601a      	str	r2, [r3, #0]
    o->iternext = bytes_it_iternext;
   15adc:	68fb      	ldr	r3, [r7, #12]
   15ade:	4a08      	ldr	r2, [pc, #32]	; (15b00 <mp_obj_new_bytes_iterator+0x38>)
   15ae0:	605a      	str	r2, [r3, #4]
    o->str = str;
   15ae2:	68fb      	ldr	r3, [r7, #12]
   15ae4:	687a      	ldr	r2, [r7, #4]
   15ae6:	609a      	str	r2, [r3, #8]
    o->cur = 0;
   15ae8:	68fb      	ldr	r3, [r7, #12]
   15aea:	2200      	movs	r2, #0
   15aec:	60da      	str	r2, [r3, #12]
    return MP_OBJ_FROM_PTR(o);
   15aee:	68fb      	ldr	r3, [r7, #12]
}
   15af0:	4618      	mov	r0, r3
   15af2:	3714      	adds	r7, #20
   15af4:	46bd      	mov	sp, r7
   15af6:	f85d 7b04 	ldr.w	r7, [sp], #4
   15afa:	4770      	bx	lr
   15afc:	000233dc 	.word	0x000233dc
   15b00:	00015a51 	.word	0x00015a51

00015b04 <MP_OBJ_IS_OBJ>:
    { return ((((mp_int_t)(o)) & 3) == 0); }
   15b04:	b480      	push	{r7}
   15b06:	b083      	sub	sp, #12
   15b08:	af00      	add	r7, sp, #0
   15b0a:	6078      	str	r0, [r7, #4]
   15b0c:	687b      	ldr	r3, [r7, #4]
   15b0e:	f003 0303 	and.w	r3, r3, #3
   15b12:	2b00      	cmp	r3, #0
   15b14:	bf0c      	ite	eq
   15b16:	2301      	moveq	r3, #1
   15b18:	2300      	movne	r3, #0
   15b1a:	b2db      	uxtb	r3, r3
   15b1c:	4618      	mov	r0, r3
   15b1e:	370c      	adds	r7, #12
   15b20:	46bd      	mov	sp, r7
   15b22:	f85d 7b04 	ldr.w	r7, [sp], #4
   15b26:	4770      	bx	lr

00015b28 <mp_obj_new_bool>:
static inline mp_obj_t mp_obj_new_bool(mp_int_t x) { return x ? mp_const_true : mp_const_false; }
   15b28:	b480      	push	{r7}
   15b2a:	b083      	sub	sp, #12
   15b2c:	af00      	add	r7, sp, #0
   15b2e:	6078      	str	r0, [r7, #4]
   15b30:	687b      	ldr	r3, [r7, #4]
   15b32:	2b00      	cmp	r3, #0
   15b34:	d001      	beq.n	15b3a <mp_obj_new_bool+0x12>
   15b36:	4b04      	ldr	r3, [pc, #16]	; (15b48 <mp_obj_new_bool+0x20>)
   15b38:	e000      	b.n	15b3c <mp_obj_new_bool+0x14>
   15b3a:	4b04      	ldr	r3, [pc, #16]	; (15b4c <mp_obj_new_bool+0x24>)
   15b3c:	4618      	mov	r0, r3
   15b3e:	370c      	adds	r7, #12
   15b40:	46bd      	mov	sp, r7
   15b42:	f85d 7b04 	ldr.w	r7, [sp], #4
   15b46:	4770      	bx	lr
   15b48:	00021b78 	.word	0x00021b78
   15b4c:	00021b70 	.word	0x00021b70

00015b50 <mp_obj_tuple_print>:
#include "py/runtime.h"

/******************************************************************************/
/* tuple                                                                      */

void mp_obj_tuple_print(const mp_print_t *print, mp_obj_t o_in, mp_print_kind_t kind) {
   15b50:	b580      	push	{r7, lr}
   15b52:	b086      	sub	sp, #24
   15b54:	af00      	add	r7, sp, #0
   15b56:	60f8      	str	r0, [r7, #12]
   15b58:	60b9      	str	r1, [r7, #8]
   15b5a:	607a      	str	r2, [r7, #4]
    mp_obj_tuple_t *o = MP_OBJ_TO_PTR(o_in);
   15b5c:	68bb      	ldr	r3, [r7, #8]
   15b5e:	613b      	str	r3, [r7, #16]
    if (MICROPY_PY_UJSON && kind == PRINT_JSON) {
        mp_print_str(print, "[");
    } else {
        mp_print_str(print, "(");
   15b60:	4918      	ldr	r1, [pc, #96]	; (15bc4 <mp_obj_tuple_print+0x74>)
   15b62:	68f8      	ldr	r0, [r7, #12]
   15b64:	f7eb ff46 	bl	19f4 <mp_print_str>
        kind = PRINT_REPR;
   15b68:	2301      	movs	r3, #1
   15b6a:	607b      	str	r3, [r7, #4]
    }
    for (size_t i = 0; i < o->len; i++) {
   15b6c:	2300      	movs	r3, #0
   15b6e:	617b      	str	r3, [r7, #20]
   15b70:	e013      	b.n	15b9a <mp_obj_tuple_print+0x4a>
        if (i > 0) {
   15b72:	697b      	ldr	r3, [r7, #20]
   15b74:	2b00      	cmp	r3, #0
   15b76:	d003      	beq.n	15b80 <mp_obj_tuple_print+0x30>
            mp_print_str(print, ", ");
   15b78:	4913      	ldr	r1, [pc, #76]	; (15bc8 <mp_obj_tuple_print+0x78>)
   15b7a:	68f8      	ldr	r0, [r7, #12]
   15b7c:	f7eb ff3a 	bl	19f4 <mp_print_str>
        }
        mp_obj_print_helper(print, o->items[i], kind);
   15b80:	693b      	ldr	r3, [r7, #16]
   15b82:	697a      	ldr	r2, [r7, #20]
   15b84:	3202      	adds	r2, #2
   15b86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   15b8a:	687a      	ldr	r2, [r7, #4]
   15b8c:	4619      	mov	r1, r3
   15b8e:	68f8      	ldr	r0, [r7, #12]
   15b90:	f7f7 ffc2 	bl	db18 <mp_obj_print_helper>
    for (size_t i = 0; i < o->len; i++) {
   15b94:	697b      	ldr	r3, [r7, #20]
   15b96:	3301      	adds	r3, #1
   15b98:	617b      	str	r3, [r7, #20]
   15b9a:	693b      	ldr	r3, [r7, #16]
   15b9c:	685a      	ldr	r2, [r3, #4]
   15b9e:	697b      	ldr	r3, [r7, #20]
   15ba0:	429a      	cmp	r2, r3
   15ba2:	d8e6      	bhi.n	15b72 <mp_obj_tuple_print+0x22>
    }
    if (MICROPY_PY_UJSON && kind == PRINT_JSON) {
        mp_print_str(print, "]");
    } else {
        if (o->len == 1) {
   15ba4:	693b      	ldr	r3, [r7, #16]
   15ba6:	685b      	ldr	r3, [r3, #4]
   15ba8:	2b01      	cmp	r3, #1
   15baa:	d103      	bne.n	15bb4 <mp_obj_tuple_print+0x64>
            mp_print_str(print, ",");
   15bac:	4907      	ldr	r1, [pc, #28]	; (15bcc <mp_obj_tuple_print+0x7c>)
   15bae:	68f8      	ldr	r0, [r7, #12]
   15bb0:	f7eb ff20 	bl	19f4 <mp_print_str>
        }
        mp_print_str(print, ")");
   15bb4:	4906      	ldr	r1, [pc, #24]	; (15bd0 <mp_obj_tuple_print+0x80>)
   15bb6:	68f8      	ldr	r0, [r7, #12]
   15bb8:	f7eb ff1c 	bl	19f4 <mp_print_str>
    }
}
   15bbc:	bf00      	nop
   15bbe:	3718      	adds	r7, #24
   15bc0:	46bd      	mov	sp, r7
   15bc2:	bd80      	pop	{r7, pc}
   15bc4:	00023c44 	.word	0x00023c44
   15bc8:	00023c48 	.word	0x00023c48
   15bcc:	00023c4c 	.word	0x00023c4c
   15bd0:	00023c50 	.word	0x00023c50

00015bd4 <mp_obj_tuple_make_new>:

STATIC mp_obj_t mp_obj_tuple_make_new(const mp_obj_type_t *type_in, size_t n_args, size_t n_kw, const mp_obj_t *args) {
   15bd4:	b580      	push	{r7, lr}
   15bd6:	b08c      	sub	sp, #48	; 0x30
   15bd8:	af02      	add	r7, sp, #8
   15bda:	60f8      	str	r0, [r7, #12]
   15bdc:	60b9      	str	r1, [r7, #8]
   15bde:	607a      	str	r2, [r7, #4]
   15be0:	603b      	str	r3, [r7, #0]
    (void)type_in;

    mp_arg_check_num(n_args, n_kw, 0, 1, false);
   15be2:	2300      	movs	r3, #0
   15be4:	9300      	str	r3, [sp, #0]
   15be6:	2301      	movs	r3, #1
   15be8:	2200      	movs	r2, #0
   15bea:	6879      	ldr	r1, [r7, #4]
   15bec:	68b8      	ldr	r0, [r7, #8]
   15bee:	f7f7 fb6d 	bl	d2cc <mp_arg_check_num>

    switch (n_args) {
   15bf2:	68bb      	ldr	r3, [r7, #8]
   15bf4:	2b00      	cmp	r3, #0
   15bf6:	d101      	bne.n	15bfc <mp_obj_tuple_make_new+0x28>
        case 0:
            // return a empty tuple
            return mp_const_empty_tuple;
   15bf8:	4b27      	ldr	r3, [pc, #156]	; (15c98 <mp_obj_tuple_make_new+0xc4>)
   15bfa:	e048      	b.n	15c8e <mp_obj_tuple_make_new+0xba>

        case 1:
        default: {
            // 1 argument, an iterable from which we make a new tuple
            if (MP_OBJ_IS_TYPE(args[0], &mp_type_tuple)) {
   15bfc:	683b      	ldr	r3, [r7, #0]
   15bfe:	681b      	ldr	r3, [r3, #0]
   15c00:	4618      	mov	r0, r3
   15c02:	f7ff ff7f 	bl	15b04 <MP_OBJ_IS_OBJ>
   15c06:	4603      	mov	r3, r0
   15c08:	2b00      	cmp	r3, #0
   15c0a:	d008      	beq.n	15c1e <mp_obj_tuple_make_new+0x4a>
   15c0c:	683b      	ldr	r3, [r7, #0]
   15c0e:	681b      	ldr	r3, [r3, #0]
   15c10:	681b      	ldr	r3, [r3, #0]
   15c12:	4a22      	ldr	r2, [pc, #136]	; (15c9c <mp_obj_tuple_make_new+0xc8>)
   15c14:	4293      	cmp	r3, r2
   15c16:	d102      	bne.n	15c1e <mp_obj_tuple_make_new+0x4a>
                return args[0];
   15c18:	683b      	ldr	r3, [r7, #0]
   15c1a:	681b      	ldr	r3, [r3, #0]
   15c1c:	e037      	b.n	15c8e <mp_obj_tuple_make_new+0xba>
            }

            // TODO optimise for cases where we know the length of the iterator

            size_t alloc = 4;
   15c1e:	2304      	movs	r3, #4
   15c20:	627b      	str	r3, [r7, #36]	; 0x24
            size_t len = 0;
   15c22:	2300      	movs	r3, #0
   15c24:	623b      	str	r3, [r7, #32]
            mp_obj_t *items = m_new(mp_obj_t, alloc);
   15c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   15c28:	009b      	lsls	r3, r3, #2
   15c2a:	4618      	mov	r0, r3
   15c2c:	f7ea fb76 	bl	31c <m_malloc>
   15c30:	61f8      	str	r0, [r7, #28]

            mp_obj_t iterable = mp_getiter(args[0], NULL);
   15c32:	683b      	ldr	r3, [r7, #0]
   15c34:	681b      	ldr	r3, [r3, #0]
   15c36:	2100      	movs	r1, #0
   15c38:	4618      	mov	r0, r3
   15c3a:	f7f6 ff89 	bl	cb50 <mp_getiter>
   15c3e:	61b8      	str	r0, [r7, #24]
            mp_obj_t item;
            while ((item = mp_iternext(iterable)) != MP_OBJ_STOP_ITERATION) {
   15c40:	e015      	b.n	15c6e <mp_obj_tuple_make_new+0x9a>
                if (len >= alloc) {
   15c42:	6a3a      	ldr	r2, [r7, #32]
   15c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   15c46:	429a      	cmp	r2, r3
   15c48:	d309      	bcc.n	15c5e <mp_obj_tuple_make_new+0x8a>
                    items = m_renew(mp_obj_t, items, alloc, alloc * 2);
   15c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   15c4c:	00db      	lsls	r3, r3, #3
   15c4e:	4619      	mov	r1, r3
   15c50:	69f8      	ldr	r0, [r7, #28]
   15c52:	f7ea fbaf 	bl	3b4 <m_realloc>
   15c56:	61f8      	str	r0, [r7, #28]
                    alloc *= 2;
   15c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   15c5a:	005b      	lsls	r3, r3, #1
   15c5c:	627b      	str	r3, [r7, #36]	; 0x24
                }
                items[len++] = item;
   15c5e:	6a3b      	ldr	r3, [r7, #32]
   15c60:	1c5a      	adds	r2, r3, #1
   15c62:	623a      	str	r2, [r7, #32]
   15c64:	009b      	lsls	r3, r3, #2
   15c66:	69fa      	ldr	r2, [r7, #28]
   15c68:	4413      	add	r3, r2
   15c6a:	697a      	ldr	r2, [r7, #20]
   15c6c:	601a      	str	r2, [r3, #0]
            while ((item = mp_iternext(iterable)) != MP_OBJ_STOP_ITERATION) {
   15c6e:	69b8      	ldr	r0, [r7, #24]
   15c70:	f7f6 fff0 	bl	cc54 <mp_iternext>
   15c74:	6178      	str	r0, [r7, #20]
   15c76:	697b      	ldr	r3, [r7, #20]
   15c78:	2b04      	cmp	r3, #4
   15c7a:	d1e2      	bne.n	15c42 <mp_obj_tuple_make_new+0x6e>
            }

            mp_obj_t tuple = mp_obj_new_tuple(len, items);
   15c7c:	69f9      	ldr	r1, [r7, #28]
   15c7e:	6a38      	ldr	r0, [r7, #32]
   15c80:	f000 f9f4 	bl	1606c <mp_obj_new_tuple>
   15c84:	6138      	str	r0, [r7, #16]
            m_del(mp_obj_t, items, alloc);
   15c86:	69f8      	ldr	r0, [r7, #28]
   15c88:	f7ea fbc2 	bl	410 <m_free>

            return tuple;
   15c8c:	693b      	ldr	r3, [r7, #16]
        }
    }
}
   15c8e:	4618      	mov	r0, r3
   15c90:	3728      	adds	r7, #40	; 0x28
   15c92:	46bd      	mov	sp, r7
   15c94:	bd80      	pop	{r7, pc}
   15c96:	bf00      	nop
   15c98:	00023dcc 	.word	0x00023dcc
   15c9c:	00023d90 	.word	0x00023d90

00015ca0 <tuple_cmp_helper>:

// Don't pass MP_BINARY_OP_NOT_EQUAL here
STATIC mp_obj_t tuple_cmp_helper(mp_uint_t op, mp_obj_t self_in, mp_obj_t another_in) {
   15ca0:	b580      	push	{r7, lr}
   15ca2:	b08a      	sub	sp, #40	; 0x28
   15ca4:	af02      	add	r7, sp, #8
   15ca6:	60f8      	str	r0, [r7, #12]
   15ca8:	60b9      	str	r1, [r7, #8]
   15caa:	607a      	str	r2, [r7, #4]
    // type check is done on getiter method to allow tuple, namedtuple, attrtuple
    mp_check_self(mp_obj_get_type(self_in)->getiter == mp_obj_tuple_getiter);
   15cac:	68b8      	ldr	r0, [r7, #8]
   15cae:	f7f7 ff01 	bl	dab4 <mp_obj_get_type>
   15cb2:	4603      	mov	r3, r0
   15cb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   15cb6:	4a1e      	ldr	r2, [pc, #120]	; (15d30 <tuple_cmp_helper+0x90>)
   15cb8:	4293      	cmp	r3, r2
   15cba:	d005      	beq.n	15cc8 <tuple_cmp_helper+0x28>
   15cbc:	4b1d      	ldr	r3, [pc, #116]	; (15d34 <tuple_cmp_helper+0x94>)
   15cbe:	4a1e      	ldr	r2, [pc, #120]	; (15d38 <tuple_cmp_helper+0x98>)
   15cc0:	2168      	movs	r1, #104	; 0x68
   15cc2:	481e      	ldr	r0, [pc, #120]	; (15d3c <tuple_cmp_helper+0x9c>)
   15cc4:	f005 fd04 	bl	1b6d0 <__assert_func>
    mp_obj_type_t *another_type = mp_obj_get_type(another_in);
   15cc8:	6878      	ldr	r0, [r7, #4]
   15cca:	f7f7 fef3 	bl	dab4 <mp_obj_get_type>
   15cce:	61f8      	str	r0, [r7, #28]
    mp_obj_tuple_t *self = MP_OBJ_TO_PTR(self_in);
   15cd0:	68bb      	ldr	r3, [r7, #8]
   15cd2:	61bb      	str	r3, [r7, #24]
    if (another_type->getiter != mp_obj_tuple_getiter) {
   15cd4:	69fb      	ldr	r3, [r7, #28]
   15cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   15cd8:	4a15      	ldr	r2, [pc, #84]	; (15d30 <tuple_cmp_helper+0x90>)
   15cda:	4293      	cmp	r3, r2
   15cdc:	d00e      	beq.n	15cfc <tuple_cmp_helper+0x5c>
        // Slow path for user subclasses
        another_in = mp_instance_cast_to_native_base(another_in, MP_OBJ_FROM_PTR(&mp_type_tuple));
   15cde:	4918      	ldr	r1, [pc, #96]	; (15d40 <tuple_cmp_helper+0xa0>)
   15ce0:	6878      	ldr	r0, [r7, #4]
   15ce2:	f001 fd31 	bl	17748 <mp_instance_cast_to_native_base>
   15ce6:	6078      	str	r0, [r7, #4]
        if (another_in == MP_OBJ_NULL) {
   15ce8:	687b      	ldr	r3, [r7, #4]
   15cea:	2b00      	cmp	r3, #0
   15cec:	d106      	bne.n	15cfc <tuple_cmp_helper+0x5c>
            if (op == MP_BINARY_OP_EQUAL) {
   15cee:	68fb      	ldr	r3, [r7, #12]
   15cf0:	2b02      	cmp	r3, #2
   15cf2:	d101      	bne.n	15cf8 <tuple_cmp_helper+0x58>
                return mp_const_false;
   15cf4:	4b13      	ldr	r3, [pc, #76]	; (15d44 <tuple_cmp_helper+0xa4>)
   15cf6:	e017      	b.n	15d28 <tuple_cmp_helper+0x88>
            }
            return MP_OBJ_NULL;
   15cf8:	2300      	movs	r3, #0
   15cfa:	e015      	b.n	15d28 <tuple_cmp_helper+0x88>
        }
    }
    mp_obj_tuple_t *another = MP_OBJ_TO_PTR(another_in);
   15cfc:	687b      	ldr	r3, [r7, #4]
   15cfe:	617b      	str	r3, [r7, #20]

    return mp_obj_new_bool(mp_seq_cmp_objs(op, self->items, self->len, another->items, another->len));
   15d00:	69bb      	ldr	r3, [r7, #24]
   15d02:	f103 0108 	add.w	r1, r3, #8
   15d06:	69bb      	ldr	r3, [r7, #24]
   15d08:	685a      	ldr	r2, [r3, #4]
   15d0a:	697b      	ldr	r3, [r7, #20]
   15d0c:	f103 0008 	add.w	r0, r3, #8
   15d10:	697b      	ldr	r3, [r7, #20]
   15d12:	685b      	ldr	r3, [r3, #4]
   15d14:	9300      	str	r3, [sp, #0]
   15d16:	4603      	mov	r3, r0
   15d18:	68f8      	ldr	r0, [r7, #12]
   15d1a:	f001 ff23 	bl	17b64 <mp_seq_cmp_objs>
   15d1e:	4603      	mov	r3, r0
   15d20:	4618      	mov	r0, r3
   15d22:	f7ff ff01 	bl	15b28 <mp_obj_new_bool>
   15d26:	4603      	mov	r3, r0
}
   15d28:	4618      	mov	r0, r3
   15d2a:	3720      	adds	r7, #32
   15d2c:	46bd      	mov	sp, r7
   15d2e:	bd80      	pop	{r7, pc}
   15d30:	000161dd 	.word	0x000161dd
   15d34:	00023c54 	.word	0x00023c54
   15d38:	00023dfc 	.word	0x00023dfc
   15d3c:	00023c90 	.word	0x00023c90
   15d40:	00023d90 	.word	0x00023d90
   15d44:	00021b70 	.word	0x00021b70

00015d48 <mp_obj_tuple_unary_op>:

mp_obj_t mp_obj_tuple_unary_op(mp_unary_op_t op, mp_obj_t self_in) {
   15d48:	b580      	push	{r7, lr}
   15d4a:	b086      	sub	sp, #24
   15d4c:	af00      	add	r7, sp, #0
   15d4e:	6078      	str	r0, [r7, #4]
   15d50:	6039      	str	r1, [r7, #0]
    mp_obj_tuple_t *self = MP_OBJ_TO_PTR(self_in);
   15d52:	683b      	ldr	r3, [r7, #0]
   15d54:	60fb      	str	r3, [r7, #12]
    switch (op) {
   15d56:	687b      	ldr	r3, [r7, #4]
   15d58:	2b05      	cmp	r3, #5
   15d5a:	d02f      	beq.n	15dbc <mp_obj_tuple_unary_op+0x74>
   15d5c:	2b06      	cmp	r3, #6
   15d5e:	d00d      	beq.n	15d7c <mp_obj_tuple_unary_op+0x34>
   15d60:	2b04      	cmp	r3, #4
   15d62:	d131      	bne.n	15dc8 <mp_obj_tuple_unary_op+0x80>
        case MP_UNARY_OP_BOOL: return mp_obj_new_bool(self->len != 0);
   15d64:	68fb      	ldr	r3, [r7, #12]
   15d66:	685b      	ldr	r3, [r3, #4]
   15d68:	2b00      	cmp	r3, #0
   15d6a:	bf14      	ite	ne
   15d6c:	2301      	movne	r3, #1
   15d6e:	2300      	moveq	r3, #0
   15d70:	b2db      	uxtb	r3, r3
   15d72:	4618      	mov	r0, r3
   15d74:	f7ff fed8 	bl	15b28 <mp_obj_new_bool>
   15d78:	4603      	mov	r3, r0
   15d7a:	e026      	b.n	15dca <mp_obj_tuple_unary_op+0x82>
        case MP_UNARY_OP_HASH: {
            // start hash with pointer to empty tuple, to make it fairly unique
            mp_int_t hash = (mp_int_t)mp_const_empty_tuple;
   15d7c:	4b15      	ldr	r3, [pc, #84]	; (15dd4 <mp_obj_tuple_unary_op+0x8c>)
   15d7e:	617b      	str	r3, [r7, #20]
            for (size_t i = 0; i < self->len; i++) {
   15d80:	2300      	movs	r3, #0
   15d82:	613b      	str	r3, [r7, #16]
   15d84:	e010      	b.n	15da8 <mp_obj_tuple_unary_op+0x60>
                hash += MP_OBJ_SMALL_INT_VALUE(mp_unary_op(MP_UNARY_OP_HASH, self->items[i]));
   15d86:	68fb      	ldr	r3, [r7, #12]
   15d88:	693a      	ldr	r2, [r7, #16]
   15d8a:	3202      	adds	r2, #2
   15d8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   15d90:	4619      	mov	r1, r3
   15d92:	2006      	movs	r0, #6
   15d94:	f7f5 fdec 	bl	b970 <mp_unary_op>
   15d98:	4603      	mov	r3, r0
   15d9a:	105b      	asrs	r3, r3, #1
   15d9c:	697a      	ldr	r2, [r7, #20]
   15d9e:	4413      	add	r3, r2
   15da0:	617b      	str	r3, [r7, #20]
            for (size_t i = 0; i < self->len; i++) {
   15da2:	693b      	ldr	r3, [r7, #16]
   15da4:	3301      	adds	r3, #1
   15da6:	613b      	str	r3, [r7, #16]
   15da8:	68fb      	ldr	r3, [r7, #12]
   15daa:	685a      	ldr	r2, [r3, #4]
   15dac:	693b      	ldr	r3, [r7, #16]
   15dae:	429a      	cmp	r2, r3
   15db0:	d8e9      	bhi.n	15d86 <mp_obj_tuple_unary_op+0x3e>
            }
            return MP_OBJ_NEW_SMALL_INT(hash);
   15db2:	697b      	ldr	r3, [r7, #20]
   15db4:	005b      	lsls	r3, r3, #1
   15db6:	f043 0301 	orr.w	r3, r3, #1
   15dba:	e006      	b.n	15dca <mp_obj_tuple_unary_op+0x82>
        }
        case MP_UNARY_OP_LEN: return MP_OBJ_NEW_SMALL_INT(self->len);
   15dbc:	68fb      	ldr	r3, [r7, #12]
   15dbe:	685b      	ldr	r3, [r3, #4]
   15dc0:	005b      	lsls	r3, r3, #1
   15dc2:	f043 0301 	orr.w	r3, r3, #1
   15dc6:	e000      	b.n	15dca <mp_obj_tuple_unary_op+0x82>
        default: return MP_OBJ_NULL; // op not supported
   15dc8:	2300      	movs	r3, #0
    }
}
   15dca:	4618      	mov	r0, r3
   15dcc:	3718      	adds	r7, #24
   15dce:	46bd      	mov	sp, r7
   15dd0:	bd80      	pop	{r7, pc}
   15dd2:	bf00      	nop
   15dd4:	00023dcc 	.word	0x00023dcc

00015dd8 <mp_obj_tuple_binary_op>:

mp_obj_t mp_obj_tuple_binary_op(mp_binary_op_t op, mp_obj_t lhs, mp_obj_t rhs) {
   15dd8:	b580      	push	{r7, lr}
   15dda:	b08c      	sub	sp, #48	; 0x30
   15ddc:	af02      	add	r7, sp, #8
   15dde:	60f8      	str	r0, [r7, #12]
   15de0:	60b9      	str	r1, [r7, #8]
   15de2:	607a      	str	r2, [r7, #4]
    mp_obj_tuple_t *o = MP_OBJ_TO_PTR(lhs);
   15de4:	68bb      	ldr	r3, [r7, #8]
   15de6:	627b      	str	r3, [r7, #36]	; 0x24
    switch (op) {
   15de8:	68fb      	ldr	r3, [r7, #12]
   15dea:	2b1c      	cmp	r3, #28
   15dec:	f200 80ac 	bhi.w	15f48 <mp_obj_tuple_binary_op+0x170>
   15df0:	a201      	add	r2, pc, #4	; (adr r2, 15df8 <mp_obj_tuple_binary_op+0x20>)
   15df2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   15df6:	bf00      	nop
   15df8:	00015f3b 	.word	0x00015f3b
   15dfc:	00015f3b 	.word	0x00015f3b
   15e00:	00015f3b 	.word	0x00015f3b
   15e04:	00015f3b 	.word	0x00015f3b
   15e08:	00015f3b 	.word	0x00015f3b
   15e0c:	00015f49 	.word	0x00015f49
   15e10:	00015f49 	.word	0x00015f49
   15e14:	00015f49 	.word	0x00015f49
   15e18:	00015f49 	.word	0x00015f49
   15e1c:	00015f49 	.word	0x00015f49
   15e20:	00015f49 	.word	0x00015f49
   15e24:	00015f49 	.word	0x00015f49
   15e28:	00015f49 	.word	0x00015f49
   15e2c:	00015f49 	.word	0x00015f49
   15e30:	00015e6d 	.word	0x00015e6d
   15e34:	00015f49 	.word	0x00015f49
   15e38:	00015ee1 	.word	0x00015ee1
   15e3c:	00015f49 	.word	0x00015f49
   15e40:	00015f49 	.word	0x00015f49
   15e44:	00015f49 	.word	0x00015f49
   15e48:	00015f49 	.word	0x00015f49
   15e4c:	00015f49 	.word	0x00015f49
   15e50:	00015f49 	.word	0x00015f49
   15e54:	00015f49 	.word	0x00015f49
   15e58:	00015f49 	.word	0x00015f49
   15e5c:	00015f49 	.word	0x00015f49
   15e60:	00015e6d 	.word	0x00015e6d
   15e64:	00015f49 	.word	0x00015f49
   15e68:	00015ee1 	.word	0x00015ee1
        case MP_BINARY_OP_ADD:
        case MP_BINARY_OP_INPLACE_ADD: {
            if (!mp_obj_is_subclass_fast(MP_OBJ_FROM_PTR(mp_obj_get_type(rhs)), MP_OBJ_FROM_PTR(&mp_type_tuple))) {
   15e6c:	6878      	ldr	r0, [r7, #4]
   15e6e:	f7f7 fe21 	bl	dab4 <mp_obj_get_type>
   15e72:	4603      	mov	r3, r0
   15e74:	4937      	ldr	r1, [pc, #220]	; (15f54 <mp_obj_tuple_binary_op+0x17c>)
   15e76:	4618      	mov	r0, r3
   15e78:	f001 fb74 	bl	17564 <mp_obj_is_subclass_fast>
   15e7c:	4603      	mov	r3, r0
   15e7e:	f083 0301 	eor.w	r3, r3, #1
   15e82:	b2db      	uxtb	r3, r3
   15e84:	2b00      	cmp	r3, #0
   15e86:	d001      	beq.n	15e8c <mp_obj_tuple_binary_op+0xb4>
                return MP_OBJ_NULL; // op not supported
   15e88:	2300      	movs	r3, #0
   15e8a:	e05e      	b.n	15f4a <mp_obj_tuple_binary_op+0x172>
            }
            mp_obj_tuple_t *p = MP_OBJ_TO_PTR(rhs);
   15e8c:	687b      	ldr	r3, [r7, #4]
   15e8e:	623b      	str	r3, [r7, #32]
            mp_obj_tuple_t *s = MP_OBJ_TO_PTR(mp_obj_new_tuple(o->len + p->len, NULL));
   15e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   15e92:	685a      	ldr	r2, [r3, #4]
   15e94:	6a3b      	ldr	r3, [r7, #32]
   15e96:	685b      	ldr	r3, [r3, #4]
   15e98:	4413      	add	r3, r2
   15e9a:	2100      	movs	r1, #0
   15e9c:	4618      	mov	r0, r3
   15e9e:	f000 f8e5 	bl	1606c <mp_obj_new_tuple>
   15ea2:	61f8      	str	r0, [r7, #28]
            mp_seq_cat(s->items, o->items, o->len, p->items, p->len, mp_obj_t);
   15ea4:	69fb      	ldr	r3, [r7, #28]
   15ea6:	f103 0008 	add.w	r0, r3, #8
   15eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   15eac:	f103 0108 	add.w	r1, r3, #8
   15eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   15eb2:	685b      	ldr	r3, [r3, #4]
   15eb4:	009b      	lsls	r3, r3, #2
   15eb6:	461a      	mov	r2, r3
   15eb8:	f006 fede 	bl	1cc78 <memcpy>
   15ebc:	69fb      	ldr	r3, [r7, #28]
   15ebe:	f103 0208 	add.w	r2, r3, #8
   15ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   15ec4:	685b      	ldr	r3, [r3, #4]
   15ec6:	009b      	lsls	r3, r3, #2
   15ec8:	18d0      	adds	r0, r2, r3
   15eca:	6a3b      	ldr	r3, [r7, #32]
   15ecc:	f103 0108 	add.w	r1, r3, #8
   15ed0:	6a3b      	ldr	r3, [r7, #32]
   15ed2:	685b      	ldr	r3, [r3, #4]
   15ed4:	009b      	lsls	r3, r3, #2
   15ed6:	461a      	mov	r2, r3
   15ed8:	f006 fece 	bl	1cc78 <memcpy>
            return MP_OBJ_FROM_PTR(s);
   15edc:	69fb      	ldr	r3, [r7, #28]
   15ede:	e034      	b.n	15f4a <mp_obj_tuple_binary_op+0x172>
        }
        case MP_BINARY_OP_MULTIPLY:
        case MP_BINARY_OP_INPLACE_MULTIPLY: {
            mp_int_t n;
            if (!mp_obj_get_int_maybe(rhs, &n)) {
   15ee0:	f107 0314 	add.w	r3, r7, #20
   15ee4:	4619      	mov	r1, r3
   15ee6:	6878      	ldr	r0, [r7, #4]
   15ee8:	f7f8 f81e 	bl	df28 <mp_obj_get_int_maybe>
   15eec:	4603      	mov	r3, r0
   15eee:	f083 0301 	eor.w	r3, r3, #1
   15ef2:	b2db      	uxtb	r3, r3
   15ef4:	2b00      	cmp	r3, #0
   15ef6:	d001      	beq.n	15efc <mp_obj_tuple_binary_op+0x124>
                return MP_OBJ_NULL; // op not supported
   15ef8:	2300      	movs	r3, #0
   15efa:	e026      	b.n	15f4a <mp_obj_tuple_binary_op+0x172>
            }
            if (n <= 0) {
   15efc:	697b      	ldr	r3, [r7, #20]
   15efe:	2b00      	cmp	r3, #0
   15f00:	dc01      	bgt.n	15f06 <mp_obj_tuple_binary_op+0x12e>
                return mp_const_empty_tuple;
   15f02:	4b15      	ldr	r3, [pc, #84]	; (15f58 <mp_obj_tuple_binary_op+0x180>)
   15f04:	e021      	b.n	15f4a <mp_obj_tuple_binary_op+0x172>
            }
            mp_obj_tuple_t *s = MP_OBJ_TO_PTR(mp_obj_new_tuple(o->len * n, NULL));
   15f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   15f08:	685b      	ldr	r3, [r3, #4]
   15f0a:	697a      	ldr	r2, [r7, #20]
   15f0c:	fb02 f303 	mul.w	r3, r2, r3
   15f10:	2100      	movs	r1, #0
   15f12:	4618      	mov	r0, r3
   15f14:	f000 f8aa 	bl	1606c <mp_obj_new_tuple>
   15f18:	61b8      	str	r0, [r7, #24]
            mp_seq_multiply(o->items, sizeof(*o->items), o->len, n, s->items);
   15f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   15f1c:	f103 0008 	add.w	r0, r3, #8
   15f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   15f22:	685a      	ldr	r2, [r3, #4]
   15f24:	697b      	ldr	r3, [r7, #20]
   15f26:	4619      	mov	r1, r3
   15f28:	69bb      	ldr	r3, [r7, #24]
   15f2a:	3308      	adds	r3, #8
   15f2c:	9300      	str	r3, [sp, #0]
   15f2e:	460b      	mov	r3, r1
   15f30:	2104      	movs	r1, #4
   15f32:	f001 fd55 	bl	179e0 <mp_seq_multiply>
            return MP_OBJ_FROM_PTR(s);
   15f36:	69bb      	ldr	r3, [r7, #24]
   15f38:	e007      	b.n	15f4a <mp_obj_tuple_binary_op+0x172>
        case MP_BINARY_OP_EQUAL:
        case MP_BINARY_OP_LESS:
        case MP_BINARY_OP_LESS_EQUAL:
        case MP_BINARY_OP_MORE:
        case MP_BINARY_OP_MORE_EQUAL:
            return tuple_cmp_helper(op, lhs, rhs);
   15f3a:	687a      	ldr	r2, [r7, #4]
   15f3c:	68b9      	ldr	r1, [r7, #8]
   15f3e:	68f8      	ldr	r0, [r7, #12]
   15f40:	f7ff feae 	bl	15ca0 <tuple_cmp_helper>
   15f44:	4603      	mov	r3, r0
   15f46:	e000      	b.n	15f4a <mp_obj_tuple_binary_op+0x172>

        default:
            return MP_OBJ_NULL; // op not supported
   15f48:	2300      	movs	r3, #0
    }
}
   15f4a:	4618      	mov	r0, r3
   15f4c:	3728      	adds	r7, #40	; 0x28
   15f4e:	46bd      	mov	sp, r7
   15f50:	bd80      	pop	{r7, pc}
   15f52:	bf00      	nop
   15f54:	00023d90 	.word	0x00023d90
   15f58:	00023dcc 	.word	0x00023dcc

00015f5c <mp_obj_tuple_subscr>:

mp_obj_t mp_obj_tuple_subscr(mp_obj_t self_in, mp_obj_t index, mp_obj_t value) {
   15f5c:	b580      	push	{r7, lr}
   15f5e:	b086      	sub	sp, #24
   15f60:	af00      	add	r7, sp, #0
   15f62:	60f8      	str	r0, [r7, #12]
   15f64:	60b9      	str	r1, [r7, #8]
   15f66:	607a      	str	r2, [r7, #4]
    if (value == MP_OBJ_SENTINEL) {
   15f68:	687b      	ldr	r3, [r7, #4]
   15f6a:	2b08      	cmp	r3, #8
   15f6c:	d110      	bne.n	15f90 <mp_obj_tuple_subscr+0x34>
        // load
        mp_obj_tuple_t *self = MP_OBJ_TO_PTR(self_in);
   15f6e:	68fb      	ldr	r3, [r7, #12]
   15f70:	617b      	str	r3, [r7, #20]
            mp_obj_tuple_t *res = MP_OBJ_TO_PTR(mp_obj_new_tuple(slice.stop - slice.start, NULL));
            mp_seq_copy(res->items, self->items + slice.start, res->len, mp_obj_t);
            return MP_OBJ_FROM_PTR(res);
        }
#endif
        size_t index_value = mp_get_index(self->base.type, self->len, index, false);
   15f72:	697b      	ldr	r3, [r7, #20]
   15f74:	6818      	ldr	r0, [r3, #0]
   15f76:	697b      	ldr	r3, [r7, #20]
   15f78:	6859      	ldr	r1, [r3, #4]
   15f7a:	2300      	movs	r3, #0
   15f7c:	68ba      	ldr	r2, [r7, #8]
   15f7e:	f7f8 f863 	bl	e048 <mp_get_index>
   15f82:	6138      	str	r0, [r7, #16]
        return self->items[index_value];
   15f84:	697b      	ldr	r3, [r7, #20]
   15f86:	693a      	ldr	r2, [r7, #16]
   15f88:	3202      	adds	r2, #2
   15f8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   15f8e:	e000      	b.n	15f92 <mp_obj_tuple_subscr+0x36>
    } else {
        return MP_OBJ_NULL; // op not supported
   15f90:	2300      	movs	r3, #0
    }
}
   15f92:	4618      	mov	r0, r3
   15f94:	3718      	adds	r7, #24
   15f96:	46bd      	mov	sp, r7
   15f98:	bd80      	pop	{r7, pc}
   15f9a:	bf00      	nop

00015f9c <tuple_count>:

STATIC mp_obj_t tuple_count(mp_obj_t self_in, mp_obj_t value) {
   15f9c:	b580      	push	{r7, lr}
   15f9e:	b084      	sub	sp, #16
   15fa0:	af00      	add	r7, sp, #0
   15fa2:	6078      	str	r0, [r7, #4]
   15fa4:	6039      	str	r1, [r7, #0]
    mp_check_self(MP_OBJ_IS_TYPE(self_in, &mp_type_tuple));
   15fa6:	6878      	ldr	r0, [r7, #4]
   15fa8:	f7ff fdac 	bl	15b04 <MP_OBJ_IS_OBJ>
   15fac:	4603      	mov	r3, r0
   15fae:	f083 0301 	eor.w	r3, r3, #1
   15fb2:	b2db      	uxtb	r3, r3
   15fb4:	2b00      	cmp	r3, #0
   15fb6:	d104      	bne.n	15fc2 <tuple_count+0x26>
   15fb8:	687b      	ldr	r3, [r7, #4]
   15fba:	681b      	ldr	r3, [r3, #0]
   15fbc:	4a0c      	ldr	r2, [pc, #48]	; (15ff0 <tuple_count+0x54>)
   15fbe:	4293      	cmp	r3, r2
   15fc0:	d005      	beq.n	15fce <tuple_count+0x32>
   15fc2:	4b0c      	ldr	r3, [pc, #48]	; (15ff4 <tuple_count+0x58>)
   15fc4:	4a0c      	ldr	r2, [pc, #48]	; (15ff8 <tuple_count+0x5c>)
   15fc6:	21c8      	movs	r1, #200	; 0xc8
   15fc8:	480c      	ldr	r0, [pc, #48]	; (15ffc <tuple_count+0x60>)
   15fca:	f005 fb81 	bl	1b6d0 <__assert_func>
    mp_obj_tuple_t *self = MP_OBJ_TO_PTR(self_in);
   15fce:	687b      	ldr	r3, [r7, #4]
   15fd0:	60fb      	str	r3, [r7, #12]
    return mp_seq_count_obj(self->items, self->len, value);
   15fd2:	68fb      	ldr	r3, [r7, #12]
   15fd4:	f103 0008 	add.w	r0, r3, #8
   15fd8:	68fb      	ldr	r3, [r7, #12]
   15fda:	685b      	ldr	r3, [r3, #4]
   15fdc:	683a      	ldr	r2, [r7, #0]
   15fde:	4619      	mov	r1, r3
   15fe0:	f001 fe8c 	bl	17cfc <mp_seq_count_obj>
   15fe4:	4603      	mov	r3, r0
}
   15fe6:	4618      	mov	r0, r3
   15fe8:	3710      	adds	r7, #16
   15fea:	46bd      	mov	sp, r7
   15fec:	bd80      	pop	{r7, pc}
   15fee:	bf00      	nop
   15ff0:	00023d90 	.word	0x00023d90
   15ff4:	00023ca4 	.word	0x00023ca4
   15ff8:	00023e10 	.word	0x00023e10
   15ffc:	00023c90 	.word	0x00023c90

00016000 <tuple_index>:
STATIC MP_DEFINE_CONST_FUN_OBJ_2(tuple_count_obj, tuple_count);

STATIC mp_obj_t tuple_index(size_t n_args, const mp_obj_t *args) {
   16000:	b580      	push	{r7, lr}
   16002:	b084      	sub	sp, #16
   16004:	af00      	add	r7, sp, #0
   16006:	6078      	str	r0, [r7, #4]
   16008:	6039      	str	r1, [r7, #0]
    mp_check_self(MP_OBJ_IS_TYPE(args[0], &mp_type_tuple));
   1600a:	683b      	ldr	r3, [r7, #0]
   1600c:	681b      	ldr	r3, [r3, #0]
   1600e:	4618      	mov	r0, r3
   16010:	f7ff fd78 	bl	15b04 <MP_OBJ_IS_OBJ>
   16014:	4603      	mov	r3, r0
   16016:	f083 0301 	eor.w	r3, r3, #1
   1601a:	b2db      	uxtb	r3, r3
   1601c:	2b00      	cmp	r3, #0
   1601e:	d105      	bne.n	1602c <tuple_index+0x2c>
   16020:	683b      	ldr	r3, [r7, #0]
   16022:	681b      	ldr	r3, [r3, #0]
   16024:	681b      	ldr	r3, [r3, #0]
   16026:	4a0d      	ldr	r2, [pc, #52]	; (1605c <tuple_index+0x5c>)
   16028:	4293      	cmp	r3, r2
   1602a:	d005      	beq.n	16038 <tuple_index+0x38>
   1602c:	4b0c      	ldr	r3, [pc, #48]	; (16060 <tuple_index+0x60>)
   1602e:	4a0d      	ldr	r2, [pc, #52]	; (16064 <tuple_index+0x64>)
   16030:	21cf      	movs	r1, #207	; 0xcf
   16032:	480d      	ldr	r0, [pc, #52]	; (16068 <tuple_index+0x68>)
   16034:	f005 fb4c 	bl	1b6d0 <__assert_func>
    mp_obj_tuple_t *self = MP_OBJ_TO_PTR(args[0]);
   16038:	683b      	ldr	r3, [r7, #0]
   1603a:	681b      	ldr	r3, [r3, #0]
   1603c:	60fb      	str	r3, [r7, #12]
    return mp_seq_index_obj(self->items, self->len, n_args, args);
   1603e:	68fb      	ldr	r3, [r7, #12]
   16040:	f103 0008 	add.w	r0, r3, #8
   16044:	68fb      	ldr	r3, [r7, #12]
   16046:	6859      	ldr	r1, [r3, #4]
   16048:	683b      	ldr	r3, [r7, #0]
   1604a:	687a      	ldr	r2, [r7, #4]
   1604c:	f001 fe06 	bl	17c5c <mp_seq_index_obj>
   16050:	4603      	mov	r3, r0
}
   16052:	4618      	mov	r0, r3
   16054:	3710      	adds	r7, #16
   16056:	46bd      	mov	sp, r7
   16058:	bd80      	pop	{r7, pc}
   1605a:	bf00      	nop
   1605c:	00023d90 	.word	0x00023d90
   16060:	00023d08 	.word	0x00023d08
   16064:	00023e1c 	.word	0x00023e1c
   16068:	00023c90 	.word	0x00023c90

0001606c <mp_obj_new_tuple>:
};

// the zero-length tuple
const mp_obj_tuple_t mp_const_empty_tuple_obj = {{&mp_type_tuple}, 0};

mp_obj_t mp_obj_new_tuple(size_t n, const mp_obj_t *items) {
   1606c:	b580      	push	{r7, lr}
   1606e:	b084      	sub	sp, #16
   16070:	af00      	add	r7, sp, #0
   16072:	6078      	str	r0, [r7, #4]
   16074:	6039      	str	r1, [r7, #0]
    if (n == 0) {
   16076:	687b      	ldr	r3, [r7, #4]
   16078:	2b00      	cmp	r3, #0
   1607a:	d101      	bne.n	16080 <mp_obj_new_tuple+0x14>
        return mp_const_empty_tuple;
   1607c:	4b15      	ldr	r3, [pc, #84]	; (160d4 <mp_obj_new_tuple+0x68>)
   1607e:	e024      	b.n	160ca <mp_obj_new_tuple+0x5e>
    }
    mp_obj_tuple_t *o = m_new_obj_var(mp_obj_tuple_t, mp_obj_t, n);
   16080:	687b      	ldr	r3, [r7, #4]
   16082:	3302      	adds	r3, #2
   16084:	009b      	lsls	r3, r3, #2
   16086:	4618      	mov	r0, r3
   16088:	f7ea f948 	bl	31c <m_malloc>
   1608c:	60b8      	str	r0, [r7, #8]
    o->base.type = &mp_type_tuple;
   1608e:	68bb      	ldr	r3, [r7, #8]
   16090:	4a11      	ldr	r2, [pc, #68]	; (160d8 <mp_obj_new_tuple+0x6c>)
   16092:	601a      	str	r2, [r3, #0]
    o->len = n;
   16094:	68bb      	ldr	r3, [r7, #8]
   16096:	687a      	ldr	r2, [r7, #4]
   16098:	605a      	str	r2, [r3, #4]
    if (items) {
   1609a:	683b      	ldr	r3, [r7, #0]
   1609c:	2b00      	cmp	r3, #0
   1609e:	d013      	beq.n	160c8 <mp_obj_new_tuple+0x5c>
        for (size_t i = 0; i < n; i++) {
   160a0:	2300      	movs	r3, #0
   160a2:	60fb      	str	r3, [r7, #12]
   160a4:	e00c      	b.n	160c0 <mp_obj_new_tuple+0x54>
            o->items[i] = items[i];
   160a6:	68fb      	ldr	r3, [r7, #12]
   160a8:	009b      	lsls	r3, r3, #2
   160aa:	683a      	ldr	r2, [r7, #0]
   160ac:	4413      	add	r3, r2
   160ae:	6819      	ldr	r1, [r3, #0]
   160b0:	68bb      	ldr	r3, [r7, #8]
   160b2:	68fa      	ldr	r2, [r7, #12]
   160b4:	3202      	adds	r2, #2
   160b6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        for (size_t i = 0; i < n; i++) {
   160ba:	68fb      	ldr	r3, [r7, #12]
   160bc:	3301      	adds	r3, #1
   160be:	60fb      	str	r3, [r7, #12]
   160c0:	68fa      	ldr	r2, [r7, #12]
   160c2:	687b      	ldr	r3, [r7, #4]
   160c4:	429a      	cmp	r2, r3
   160c6:	d3ee      	bcc.n	160a6 <mp_obj_new_tuple+0x3a>
        }
    }
    return MP_OBJ_FROM_PTR(o);
   160c8:	68bb      	ldr	r3, [r7, #8]
}
   160ca:	4618      	mov	r0, r3
   160cc:	3710      	adds	r7, #16
   160ce:	46bd      	mov	sp, r7
   160d0:	bd80      	pop	{r7, pc}
   160d2:	bf00      	nop
   160d4:	00023dcc 	.word	0x00023dcc
   160d8:	00023d90 	.word	0x00023d90

000160dc <mp_obj_tuple_get>:

void mp_obj_tuple_get(mp_obj_t self_in, size_t *len, mp_obj_t **items) {
   160dc:	b580      	push	{r7, lr}
   160de:	b086      	sub	sp, #24
   160e0:	af00      	add	r7, sp, #0
   160e2:	60f8      	str	r0, [r7, #12]
   160e4:	60b9      	str	r1, [r7, #8]
   160e6:	607a      	str	r2, [r7, #4]
    assert(MP_OBJ_IS_TYPE(self_in, &mp_type_tuple));
   160e8:	68f8      	ldr	r0, [r7, #12]
   160ea:	f7ff fd0b 	bl	15b04 <MP_OBJ_IS_OBJ>
   160ee:	4603      	mov	r3, r0
   160f0:	f083 0301 	eor.w	r3, r3, #1
   160f4:	b2db      	uxtb	r3, r3
   160f6:	2b00      	cmp	r3, #0
   160f8:	d104      	bne.n	16104 <mp_obj_tuple_get+0x28>
   160fa:	68fb      	ldr	r3, [r7, #12]
   160fc:	681b      	ldr	r3, [r3, #0]
   160fe:	4a0c      	ldr	r2, [pc, #48]	; (16130 <mp_obj_tuple_get+0x54>)
   16100:	4293      	cmp	r3, r2
   16102:	d005      	beq.n	16110 <mp_obj_tuple_get+0x34>
   16104:	4b0b      	ldr	r3, [pc, #44]	; (16134 <mp_obj_tuple_get+0x58>)
   16106:	4a0c      	ldr	r2, [pc, #48]	; (16138 <mp_obj_tuple_get+0x5c>)
   16108:	21fb      	movs	r1, #251	; 0xfb
   1610a:	480c      	ldr	r0, [pc, #48]	; (1613c <mp_obj_tuple_get+0x60>)
   1610c:	f005 fae0 	bl	1b6d0 <__assert_func>
    mp_obj_tuple_t *self = MP_OBJ_TO_PTR(self_in);
   16110:	68fb      	ldr	r3, [r7, #12]
   16112:	617b      	str	r3, [r7, #20]
    *len = self->len;
   16114:	697b      	ldr	r3, [r7, #20]
   16116:	685a      	ldr	r2, [r3, #4]
   16118:	68bb      	ldr	r3, [r7, #8]
   1611a:	601a      	str	r2, [r3, #0]
    *items = &self->items[0];
   1611c:	697b      	ldr	r3, [r7, #20]
   1611e:	f103 0208 	add.w	r2, r3, #8
   16122:	687b      	ldr	r3, [r7, #4]
   16124:	601a      	str	r2, [r3, #0]
}
   16126:	bf00      	nop
   16128:	3718      	adds	r7, #24
   1612a:	46bd      	mov	sp, r7
   1612c:	bd80      	pop	{r7, pc}
   1612e:	bf00      	nop
   16130:	00023d90 	.word	0x00023d90
   16134:	00023dd4 	.word	0x00023dd4
   16138:	00023e28 	.word	0x00023e28
   1613c:	00023c90 	.word	0x00023c90

00016140 <mp_obj_tuple_del>:

void mp_obj_tuple_del(mp_obj_t self_in) {
   16140:	b580      	push	{r7, lr}
   16142:	b084      	sub	sp, #16
   16144:	af00      	add	r7, sp, #0
   16146:	6078      	str	r0, [r7, #4]
    assert(MP_OBJ_IS_TYPE(self_in, &mp_type_tuple));
   16148:	6878      	ldr	r0, [r7, #4]
   1614a:	f7ff fcdb 	bl	15b04 <MP_OBJ_IS_OBJ>
   1614e:	4603      	mov	r3, r0
   16150:	f083 0301 	eor.w	r3, r3, #1
   16154:	b2db      	uxtb	r3, r3
   16156:	2b00      	cmp	r3, #0
   16158:	d104      	bne.n	16164 <mp_obj_tuple_del+0x24>
   1615a:	687b      	ldr	r3, [r7, #4]
   1615c:	681b      	ldr	r3, [r3, #0]
   1615e:	4a09      	ldr	r2, [pc, #36]	; (16184 <mp_obj_tuple_del+0x44>)
   16160:	4293      	cmp	r3, r2
   16162:	d006      	beq.n	16172 <mp_obj_tuple_del+0x32>
   16164:	4b08      	ldr	r3, [pc, #32]	; (16188 <mp_obj_tuple_del+0x48>)
   16166:	4a09      	ldr	r2, [pc, #36]	; (1618c <mp_obj_tuple_del+0x4c>)
   16168:	f44f 7181 	mov.w	r1, #258	; 0x102
   1616c:	4808      	ldr	r0, [pc, #32]	; (16190 <mp_obj_tuple_del+0x50>)
   1616e:	f005 faaf 	bl	1b6d0 <__assert_func>
    mp_obj_tuple_t *self = MP_OBJ_TO_PTR(self_in);
   16172:	687b      	ldr	r3, [r7, #4]
   16174:	60fb      	str	r3, [r7, #12]
    m_del_var(mp_obj_tuple_t, mp_obj_t, self->len, self);
   16176:	68f8      	ldr	r0, [r7, #12]
   16178:	f7ea f94a 	bl	410 <m_free>
}
   1617c:	bf00      	nop
   1617e:	3710      	adds	r7, #16
   16180:	46bd      	mov	sp, r7
   16182:	bd80      	pop	{r7, pc}
   16184:	00023d90 	.word	0x00023d90
   16188:	00023dd4 	.word	0x00023dd4
   1618c:	00023e3c 	.word	0x00023e3c
   16190:	00023c90 	.word	0x00023c90

00016194 <tuple_it_iternext>:
    mp_fun_1_t iternext;
    mp_obj_tuple_t *tuple;
    size_t cur;
} mp_obj_tuple_it_t;

STATIC mp_obj_t tuple_it_iternext(mp_obj_t self_in) {
   16194:	b480      	push	{r7}
   16196:	b085      	sub	sp, #20
   16198:	af00      	add	r7, sp, #0
   1619a:	6078      	str	r0, [r7, #4]
    mp_obj_tuple_it_t *self = MP_OBJ_TO_PTR(self_in);
   1619c:	687b      	ldr	r3, [r7, #4]
   1619e:	60fb      	str	r3, [r7, #12]
    if (self->cur < self->tuple->len) {
   161a0:	68fb      	ldr	r3, [r7, #12]
   161a2:	68da      	ldr	r2, [r3, #12]
   161a4:	68fb      	ldr	r3, [r7, #12]
   161a6:	689b      	ldr	r3, [r3, #8]
   161a8:	685b      	ldr	r3, [r3, #4]
   161aa:	429a      	cmp	r2, r3
   161ac:	d20e      	bcs.n	161cc <tuple_it_iternext+0x38>
        mp_obj_t o_out = self->tuple->items[self->cur];
   161ae:	68fb      	ldr	r3, [r7, #12]
   161b0:	689b      	ldr	r3, [r3, #8]
   161b2:	68fa      	ldr	r2, [r7, #12]
   161b4:	68d2      	ldr	r2, [r2, #12]
   161b6:	3202      	adds	r2, #2
   161b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   161bc:	60bb      	str	r3, [r7, #8]
        self->cur += 1;
   161be:	68fb      	ldr	r3, [r7, #12]
   161c0:	68db      	ldr	r3, [r3, #12]
   161c2:	1c5a      	adds	r2, r3, #1
   161c4:	68fb      	ldr	r3, [r7, #12]
   161c6:	60da      	str	r2, [r3, #12]
        return o_out;
   161c8:	68bb      	ldr	r3, [r7, #8]
   161ca:	e000      	b.n	161ce <tuple_it_iternext+0x3a>
    } else {
        return MP_OBJ_STOP_ITERATION;
   161cc:	2304      	movs	r3, #4
    }
}
   161ce:	4618      	mov	r0, r3
   161d0:	3714      	adds	r7, #20
   161d2:	46bd      	mov	sp, r7
   161d4:	f85d 7b04 	ldr.w	r7, [sp], #4
   161d8:	4770      	bx	lr
   161da:	bf00      	nop

000161dc <mp_obj_tuple_getiter>:

mp_obj_t mp_obj_tuple_getiter(mp_obj_t o_in, mp_obj_iter_buf_t *iter_buf) {
   161dc:	b480      	push	{r7}
   161de:	b085      	sub	sp, #20
   161e0:	af00      	add	r7, sp, #0
   161e2:	6078      	str	r0, [r7, #4]
   161e4:	6039      	str	r1, [r7, #0]
    assert(sizeof(mp_obj_tuple_it_t) <= sizeof(mp_obj_iter_buf_t));
    mp_obj_tuple_it_t *o = (mp_obj_tuple_it_t*)iter_buf;
   161e6:	683b      	ldr	r3, [r7, #0]
   161e8:	60fb      	str	r3, [r7, #12]
    o->base.type = &mp_type_polymorph_iter;
   161ea:	68fb      	ldr	r3, [r7, #12]
   161ec:	4a08      	ldr	r2, [pc, #32]	; (16210 <mp_obj_tuple_getiter+0x34>)
   161ee:	601a      	str	r2, [r3, #0]
    o->iternext = tuple_it_iternext;
   161f0:	68fb      	ldr	r3, [r7, #12]
   161f2:	4a08      	ldr	r2, [pc, #32]	; (16214 <mp_obj_tuple_getiter+0x38>)
   161f4:	605a      	str	r2, [r3, #4]
    o->tuple = MP_OBJ_TO_PTR(o_in);
   161f6:	68fb      	ldr	r3, [r7, #12]
   161f8:	687a      	ldr	r2, [r7, #4]
   161fa:	609a      	str	r2, [r3, #8]
    o->cur = 0;
   161fc:	68fb      	ldr	r3, [r7, #12]
   161fe:	2200      	movs	r2, #0
   16200:	60da      	str	r2, [r3, #12]
    return MP_OBJ_FROM_PTR(o);
   16202:	68fb      	ldr	r3, [r7, #12]
}
   16204:	4618      	mov	r0, r3
   16206:	3714      	adds	r7, #20
   16208:	46bd      	mov	sp, r7
   1620a:	f85d 7b04 	ldr.w	r7, [sp], #4
   1620e:	4770      	bx	lr
   16210:	000233dc 	.word	0x000233dc
   16214:	00016195 	.word	0x00016195

00016218 <MP_OBJ_IS_OBJ>:
    { return ((((mp_int_t)(o)) & 3) == 0); }
   16218:	b480      	push	{r7}
   1621a:	b083      	sub	sp, #12
   1621c:	af00      	add	r7, sp, #0
   1621e:	6078      	str	r0, [r7, #4]
   16220:	687b      	ldr	r3, [r7, #4]
   16222:	f003 0303 	and.w	r3, r3, #3
   16226:	2b00      	cmp	r3, #0
   16228:	bf0c      	ite	eq
   1622a:	2301      	moveq	r3, #1
   1622c:	2300      	movne	r3, #0
   1622e:	b2db      	uxtb	r3, r3
   16230:	4618      	mov	r0, r3
   16232:	370c      	adds	r7, #12
   16234:	46bd      	mov	sp, r7
   16236:	f85d 7b04 	ldr.w	r7, [sp], #4
   1623a:	4770      	bx	lr

0001623c <instance_count_native_bases>:
STATIC mp_obj_t static_class_method_make_new(const mp_obj_type_t *self_in, size_t n_args, size_t n_kw, const mp_obj_t *args);

/******************************************************************************/
// instance object

STATIC int instance_count_native_bases(const mp_obj_type_t *type, const mp_obj_type_t **last_native_base) {
   1623c:	b580      	push	{r7, lr}
   1623e:	b088      	sub	sp, #32
   16240:	af00      	add	r7, sp, #0
   16242:	6078      	str	r0, [r7, #4]
   16244:	6039      	str	r1, [r7, #0]
    int count = 0;
   16246:	2300      	movs	r3, #0
   16248:	61fb      	str	r3, [r7, #28]
    for (;;) {
        if (type == &mp_type_object) {
   1624a:	687b      	ldr	r3, [r7, #4]
   1624c:	4a2d      	ldr	r2, [pc, #180]	; (16304 <instance_count_native_bases+0xc8>)
   1624e:	4293      	cmp	r3, r2
   16250:	d101      	bne.n	16256 <instance_count_native_bases+0x1a>
            // Not a "real" type, end search here.
            return count;
   16252:	69fb      	ldr	r3, [r7, #28]
   16254:	e052      	b.n	162fc <instance_count_native_bases+0xc0>
        } else if (mp_obj_is_native_type(type)) {
   16256:	687b      	ldr	r3, [r7, #4]
   16258:	68db      	ldr	r3, [r3, #12]
   1625a:	4a2b      	ldr	r2, [pc, #172]	; (16308 <instance_count_native_bases+0xcc>)
   1625c:	4293      	cmp	r3, r2
   1625e:	d005      	beq.n	1626c <instance_count_native_bases+0x30>
            // Native types don't have parents (at least not from our perspective) so end.
            *last_native_base = type;
   16260:	683b      	ldr	r3, [r7, #0]
   16262:	687a      	ldr	r2, [r7, #4]
   16264:	601a      	str	r2, [r3, #0]
            return count + 1;
   16266:	69fb      	ldr	r3, [r7, #28]
   16268:	3301      	adds	r3, #1
   1626a:	e047      	b.n	162fc <instance_count_native_bases+0xc0>
        } else if (type->parent == NULL) {
   1626c:	687b      	ldr	r3, [r7, #4]
   1626e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   16270:	2b00      	cmp	r3, #0
   16272:	d101      	bne.n	16278 <instance_count_native_bases+0x3c>
            // No parents so end search here.
            return count;
   16274:	69fb      	ldr	r3, [r7, #28]
   16276:	e041      	b.n	162fc <instance_count_native_bases+0xc0>
        #if MICROPY_MULTIPLE_INHERITANCE
        } else if (((mp_obj_base_t*)type->parent)->type == &mp_type_tuple) {
   16278:	687b      	ldr	r3, [r7, #4]
   1627a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   1627c:	681b      	ldr	r3, [r3, #0]
   1627e:	4a23      	ldr	r2, [pc, #140]	; (1630c <instance_count_native_bases+0xd0>)
   16280:	4293      	cmp	r3, r2
   16282:	d137      	bne.n	162f4 <instance_count_native_bases+0xb8>
            // Multiple parents, search through them all recursively.
            const mp_obj_tuple_t *parent_tuple = type->parent;
   16284:	687b      	ldr	r3, [r7, #4]
   16286:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   16288:	617b      	str	r3, [r7, #20]
            const mp_obj_t *item = parent_tuple->items;
   1628a:	697b      	ldr	r3, [r7, #20]
   1628c:	3308      	adds	r3, #8
   1628e:	61bb      	str	r3, [r7, #24]
            const mp_obj_t *top = item + parent_tuple->len;
   16290:	697b      	ldr	r3, [r7, #20]
   16292:	685b      	ldr	r3, [r3, #4]
   16294:	009b      	lsls	r3, r3, #2
   16296:	69ba      	ldr	r2, [r7, #24]
   16298:	4413      	add	r3, r2
   1629a:	613b      	str	r3, [r7, #16]
            for (; item < top; ++item) {
   1629c:	e024      	b.n	162e8 <instance_count_native_bases+0xac>
                assert(MP_OBJ_IS_TYPE(*item, &mp_type_type));
   1629e:	69bb      	ldr	r3, [r7, #24]
   162a0:	681b      	ldr	r3, [r3, #0]
   162a2:	4618      	mov	r0, r3
   162a4:	f7ff ffb8 	bl	16218 <MP_OBJ_IS_OBJ>
   162a8:	4603      	mov	r3, r0
   162aa:	f083 0301 	eor.w	r3, r3, #1
   162ae:	b2db      	uxtb	r3, r3
   162b0:	2b00      	cmp	r3, #0
   162b2:	d105      	bne.n	162c0 <instance_count_native_bases+0x84>
   162b4:	69bb      	ldr	r3, [r7, #24]
   162b6:	681b      	ldr	r3, [r3, #0]
   162b8:	681b      	ldr	r3, [r3, #0]
   162ba:	4a15      	ldr	r2, [pc, #84]	; (16310 <instance_count_native_bases+0xd4>)
   162bc:	4293      	cmp	r3, r2
   162be:	d005      	beq.n	162cc <instance_count_native_bases+0x90>
   162c0:	4b14      	ldr	r3, [pc, #80]	; (16314 <instance_count_native_bases+0xd8>)
   162c2:	4a15      	ldr	r2, [pc, #84]	; (16318 <instance_count_native_bases+0xdc>)
   162c4:	2145      	movs	r1, #69	; 0x45
   162c6:	4815      	ldr	r0, [pc, #84]	; (1631c <instance_count_native_bases+0xe0>)
   162c8:	f005 fa02 	bl	1b6d0 <__assert_func>
                const mp_obj_type_t *bt = (const mp_obj_type_t *)MP_OBJ_TO_PTR(*item);
   162cc:	69bb      	ldr	r3, [r7, #24]
   162ce:	681b      	ldr	r3, [r3, #0]
   162d0:	60fb      	str	r3, [r7, #12]
                count += instance_count_native_bases(bt, last_native_base);
   162d2:	6839      	ldr	r1, [r7, #0]
   162d4:	68f8      	ldr	r0, [r7, #12]
   162d6:	f7ff ffb1 	bl	1623c <instance_count_native_bases>
   162da:	4602      	mov	r2, r0
   162dc:	69fb      	ldr	r3, [r7, #28]
   162de:	4413      	add	r3, r2
   162e0:	61fb      	str	r3, [r7, #28]
            for (; item < top; ++item) {
   162e2:	69bb      	ldr	r3, [r7, #24]
   162e4:	3304      	adds	r3, #4
   162e6:	61bb      	str	r3, [r7, #24]
   162e8:	69ba      	ldr	r2, [r7, #24]
   162ea:	693b      	ldr	r3, [r7, #16]
   162ec:	429a      	cmp	r2, r3
   162ee:	d3d6      	bcc.n	1629e <instance_count_native_bases+0x62>
            }
            return count;
   162f0:	69fb      	ldr	r3, [r7, #28]
   162f2:	e003      	b.n	162fc <instance_count_native_bases+0xc0>
        #endif
        } else {
            // A single parent, use iteration to continue the search.
            type = type->parent;
   162f4:	687b      	ldr	r3, [r7, #4]
   162f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   162f8:	607b      	str	r3, [r7, #4]
        }
    }
   162fa:	e7a6      	b.n	1624a <instance_count_native_bases+0xe>
}
   162fc:	4618      	mov	r0, r3
   162fe:	3720      	adds	r7, #32
   16300:	46bd      	mov	sp, r7
   16302:	bd80      	pop	{r7, pc}
   16304:	000233a0 	.word	0x000233a0
   16308:	0001674d 	.word	0x0001674d
   1630c:	00023d90 	.word	0x00023d90
   16310:	00024088 	.word	0x00024088
   16314:	00023e50 	.word	0x00023e50
   16318:	00024394 	.word	0x00024394
   1631c:	00023e78 	.word	0x00023e78

00016320 <native_base_init_wrapper>:

// This wrapper function is allows a subclass of a native type to call the
// __init__() method (corresponding to type->make_new) of the native type.
STATIC mp_obj_t native_base_init_wrapper(size_t n_args, const mp_obj_t *args) {
   16320:	b590      	push	{r4, r7, lr}
   16322:	b085      	sub	sp, #20
   16324:	af00      	add	r7, sp, #0
   16326:	6078      	str	r0, [r7, #4]
   16328:	6039      	str	r1, [r7, #0]
    mp_obj_instance_t *self = MP_OBJ_TO_PTR(args[0]);
   1632a:	683b      	ldr	r3, [r7, #0]
   1632c:	681b      	ldr	r3, [r3, #0]
   1632e:	60fb      	str	r3, [r7, #12]
    const mp_obj_type_t *native_base = NULL;
   16330:	2300      	movs	r3, #0
   16332:	60bb      	str	r3, [r7, #8]
    instance_count_native_bases(self->base.type, &native_base);
   16334:	68fb      	ldr	r3, [r7, #12]
   16336:	681b      	ldr	r3, [r3, #0]
   16338:	f107 0208 	add.w	r2, r7, #8
   1633c:	4611      	mov	r1, r2
   1633e:	4618      	mov	r0, r3
   16340:	f7ff ff7c 	bl	1623c <instance_count_native_bases>
    self->subobj[0] = native_base->make_new(native_base, n_args - 1, 0, args + 1);
   16344:	68bb      	ldr	r3, [r7, #8]
   16346:	68dc      	ldr	r4, [r3, #12]
   16348:	68b8      	ldr	r0, [r7, #8]
   1634a:	687b      	ldr	r3, [r7, #4]
   1634c:	1e59      	subs	r1, r3, #1
   1634e:	683b      	ldr	r3, [r7, #0]
   16350:	3304      	adds	r3, #4
   16352:	2200      	movs	r2, #0
   16354:	47a0      	blx	r4
   16356:	4602      	mov	r2, r0
   16358:	68fb      	ldr	r3, [r7, #12]
   1635a:	611a      	str	r2, [r3, #16]
    return mp_const_none;
   1635c:	4b02      	ldr	r3, [pc, #8]	; (16368 <native_base_init_wrapper+0x48>)
}
   1635e:	4618      	mov	r0, r3
   16360:	3714      	adds	r7, #20
   16362:	46bd      	mov	sp, r7
   16364:	bd90      	pop	{r4, r7, pc}
   16366:	bf00      	nop
   16368:	0002345c 	.word	0x0002345c

0001636c <mp_obj_new_instance>:
STATIC MP_DEFINE_CONST_FUN_OBJ_VAR_BETWEEN(native_base_init_wrapper_obj, 1, MP_OBJ_FUN_ARGS_MAX, native_base_init_wrapper);

#if !MICROPY_CPYTHON_COMPAT
STATIC
#endif
mp_obj_instance_t *mp_obj_new_instance(const mp_obj_type_t *class, const mp_obj_type_t **native_base) {
   1636c:	b580      	push	{r7, lr}
   1636e:	b084      	sub	sp, #16
   16370:	af00      	add	r7, sp, #0
   16372:	6078      	str	r0, [r7, #4]
   16374:	6039      	str	r1, [r7, #0]
    size_t num_native_bases = instance_count_native_bases(class, native_base);
   16376:	6839      	ldr	r1, [r7, #0]
   16378:	6878      	ldr	r0, [r7, #4]
   1637a:	f7ff ff5f 	bl	1623c <instance_count_native_bases>
   1637e:	4603      	mov	r3, r0
   16380:	60fb      	str	r3, [r7, #12]
    assert(num_native_bases < 2);
   16382:	68fb      	ldr	r3, [r7, #12]
   16384:	2b01      	cmp	r3, #1
   16386:	d905      	bls.n	16394 <mp_obj_new_instance+0x28>
   16388:	4b10      	ldr	r3, [pc, #64]	; (163cc <mp_obj_new_instance+0x60>)
   1638a:	4a11      	ldr	r2, [pc, #68]	; (163d0 <mp_obj_new_instance+0x64>)
   1638c:	2162      	movs	r1, #98	; 0x62
   1638e:	4811      	ldr	r0, [pc, #68]	; (163d4 <mp_obj_new_instance+0x68>)
   16390:	f005 f99e 	bl	1b6d0 <__assert_func>
    mp_obj_instance_t *o = m_new_obj_var(mp_obj_instance_t, mp_obj_t, num_native_bases);
   16394:	68fb      	ldr	r3, [r7, #12]
   16396:	3304      	adds	r3, #4
   16398:	009b      	lsls	r3, r3, #2
   1639a:	4618      	mov	r0, r3
   1639c:	f7e9 ffbe 	bl	31c <m_malloc>
   163a0:	60b8      	str	r0, [r7, #8]
    o->base.type = class;
   163a2:	68bb      	ldr	r3, [r7, #8]
   163a4:	687a      	ldr	r2, [r7, #4]
   163a6:	601a      	str	r2, [r3, #0]
    mp_map_init(&o->members, 0);
   163a8:	68bb      	ldr	r3, [r7, #8]
   163aa:	3304      	adds	r3, #4
   163ac:	2100      	movs	r1, #0
   163ae:	4618      	mov	r0, r3
   163b0:	f7f7 f8da 	bl	d568 <mp_map_init>
    // Initialise the native base-class slot (should be 1 at most) with a valid
    // object.  It doesn't matter which object, so long as it can be uniquely
    // distinguished from a native class that is initialised.
    if (num_native_bases != 0) {
   163b4:	68fb      	ldr	r3, [r7, #12]
   163b6:	2b00      	cmp	r3, #0
   163b8:	d002      	beq.n	163c0 <mp_obj_new_instance+0x54>
        o->subobj[0] = MP_OBJ_FROM_PTR(&native_base_init_wrapper_obj);
   163ba:	68bb      	ldr	r3, [r7, #8]
   163bc:	4a06      	ldr	r2, [pc, #24]	; (163d8 <mp_obj_new_instance+0x6c>)
   163be:	611a      	str	r2, [r3, #16]
    }
    return o;
   163c0:	68bb      	ldr	r3, [r7, #8]
}
   163c2:	4618      	mov	r0, r3
   163c4:	3710      	adds	r7, #16
   163c6:	46bd      	mov	sp, r7
   163c8:	bd80      	pop	{r7, pc}
   163ca:	bf00      	nop
   163cc:	00023e98 	.word	0x00023e98
   163d0:	000243b0 	.word	0x000243b0
   163d4:	00023e78 	.word	0x00023e78
   163d8:	00023e8c 	.word	0x00023e8c

000163dc <mp_obj_class_lookup>:
    size_t meth_offset;
    mp_obj_t *dest;
    bool is_type;
};

STATIC void mp_obj_class_lookup(struct class_lookup_data  *lookup, const mp_obj_type_t *type) {
   163dc:	b580      	push	{r7, lr}
   163de:	b08c      	sub	sp, #48	; 0x30
   163e0:	af00      	add	r7, sp, #0
   163e2:	6078      	str	r0, [r7, #4]
   163e4:	6039      	str	r1, [r7, #0]
    assert(lookup->dest[0] == MP_OBJ_NULL);
   163e6:	687b      	ldr	r3, [r7, #4]
   163e8:	68db      	ldr	r3, [r3, #12]
   163ea:	681b      	ldr	r3, [r3, #0]
   163ec:	2b00      	cmp	r3, #0
   163ee:	d005      	beq.n	163fc <mp_obj_class_lookup+0x20>
   163f0:	4b88      	ldr	r3, [pc, #544]	; (16614 <mp_obj_class_lookup+0x238>)
   163f2:	4a89      	ldr	r2, [pc, #548]	; (16618 <mp_obj_class_lookup+0x23c>)
   163f4:	2186      	movs	r1, #134	; 0x86
   163f6:	4889      	ldr	r0, [pc, #548]	; (1661c <mp_obj_class_lookup+0x240>)
   163f8:	f005 f96a 	bl	1b6d0 <__assert_func>
    assert(lookup->dest[1] == MP_OBJ_NULL);
   163fc:	687b      	ldr	r3, [r7, #4]
   163fe:	68db      	ldr	r3, [r3, #12]
   16400:	3304      	adds	r3, #4
   16402:	681b      	ldr	r3, [r3, #0]
   16404:	2b00      	cmp	r3, #0
   16406:	d005      	beq.n	16414 <mp_obj_class_lookup+0x38>
   16408:	4b85      	ldr	r3, [pc, #532]	; (16620 <mp_obj_class_lookup+0x244>)
   1640a:	4a83      	ldr	r2, [pc, #524]	; (16618 <mp_obj_class_lookup+0x23c>)
   1640c:	2187      	movs	r1, #135	; 0x87
   1640e:	4883      	ldr	r0, [pc, #524]	; (1661c <mp_obj_class_lookup+0x240>)
   16410:	f005 f95e 	bl	1b6d0 <__assert_func>
        DEBUG_printf("mp_obj_class_lookup: Looking up %s in %s\n", qstr_str(lookup->attr), qstr_str(type->name));
        // Optimize special method lookup for native types
        // This avoids extra method_name => slot lookup. On the other hand,
        // this should not be applied to class types, as will result in extra
        // lookup either.
        if (lookup->meth_offset != 0 && mp_obj_is_native_type(type)) {
   16414:	687b      	ldr	r3, [r7, #4]
   16416:	689b      	ldr	r3, [r3, #8]
   16418:	2b00      	cmp	r3, #0
   1641a:	d010      	beq.n	1643e <mp_obj_class_lookup+0x62>
   1641c:	683b      	ldr	r3, [r7, #0]
   1641e:	68db      	ldr	r3, [r3, #12]
   16420:	4a80      	ldr	r2, [pc, #512]	; (16624 <mp_obj_class_lookup+0x248>)
   16422:	4293      	cmp	r3, r2
   16424:	d00b      	beq.n	1643e <mp_obj_class_lookup+0x62>
            if (*(void**)((char*)type + lookup->meth_offset) != NULL) {
   16426:	687b      	ldr	r3, [r7, #4]
   16428:	689b      	ldr	r3, [r3, #8]
   1642a:	683a      	ldr	r2, [r7, #0]
   1642c:	4413      	add	r3, r2
   1642e:	681b      	ldr	r3, [r3, #0]
   16430:	2b00      	cmp	r3, #0
   16432:	d004      	beq.n	1643e <mp_obj_class_lookup+0x62>
                DEBUG_printf("mp_obj_class_lookup: Matched special meth slot (off=%d) for %s\n",
                    lookup->meth_offset, qstr_str(lookup->attr));
                lookup->dest[0] = MP_OBJ_SENTINEL;
   16434:	687b      	ldr	r3, [r7, #4]
   16436:	68db      	ldr	r3, [r3, #12]
   16438:	2208      	movs	r2, #8
   1643a:	601a      	str	r2, [r3, #0]
                return;
   1643c:	e0e6      	b.n	1660c <mp_obj_class_lookup+0x230>
            }
        }

        if (type->locals_dict != NULL) {
   1643e:	683b      	ldr	r3, [r7, #0]
   16440:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   16442:	2b00      	cmp	r3, #0
   16444:	d04b      	beq.n	164de <mp_obj_class_lookup+0x102>
            // search locals_dict (the set of methods/attributes)
            assert(type->locals_dict->base.type == &mp_type_dict); // MicroPython restriction, for now
   16446:	683b      	ldr	r3, [r7, #0]
   16448:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1644a:	681b      	ldr	r3, [r3, #0]
   1644c:	4a76      	ldr	r2, [pc, #472]	; (16628 <mp_obj_class_lookup+0x24c>)
   1644e:	4293      	cmp	r3, r2
   16450:	d005      	beq.n	1645e <mp_obj_class_lookup+0x82>
   16452:	4b76      	ldr	r3, [pc, #472]	; (1662c <mp_obj_class_lookup+0x250>)
   16454:	4a70      	ldr	r2, [pc, #448]	; (16618 <mp_obj_class_lookup+0x23c>)
   16456:	2199      	movs	r1, #153	; 0x99
   16458:	4870      	ldr	r0, [pc, #448]	; (1661c <mp_obj_class_lookup+0x240>)
   1645a:	f005 f939 	bl	1b6d0 <__assert_func>
            mp_map_t *locals_map = &type->locals_dict->map;
   1645e:	683b      	ldr	r3, [r7, #0]
   16460:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   16462:	3304      	adds	r3, #4
   16464:	627b      	str	r3, [r7, #36]	; 0x24
            mp_map_elem_t *elem = mp_map_lookup(locals_map, MP_OBJ_NEW_QSTR(lookup->attr), MP_MAP_LOOKUP);
   16466:	687b      	ldr	r3, [r7, #4]
   16468:	685b      	ldr	r3, [r3, #4]
   1646a:	009b      	lsls	r3, r3, #2
   1646c:	f043 0302 	orr.w	r3, r3, #2
   16470:	2200      	movs	r2, #0
   16472:	4619      	mov	r1, r3
   16474:	6a78      	ldr	r0, [r7, #36]	; 0x24
   16476:	f7f7 f973 	bl	d760 <mp_map_lookup>
   1647a:	6238      	str	r0, [r7, #32]
            if (elem != NULL) {
   1647c:	6a3b      	ldr	r3, [r7, #32]
   1647e:	2b00      	cmp	r3, #0
   16480:	d02d      	beq.n	164de <mp_obj_class_lookup+0x102>
                if (lookup->is_type) {
   16482:	687b      	ldr	r3, [r7, #4]
   16484:	7c1b      	ldrb	r3, [r3, #16]
   16486:	2b00      	cmp	r3, #0
   16488:	d00b      	beq.n	164a2 <mp_obj_class_lookup+0xc6>
                    // If we look up a class method, we need to return original type for which we
                    // do a lookup, not a (base) type in which we found the class method.
                    const mp_obj_type_t *org_type = (const mp_obj_type_t*)lookup->obj;
   1648a:	687b      	ldr	r3, [r7, #4]
   1648c:	681b      	ldr	r3, [r3, #0]
   1648e:	61fb      	str	r3, [r7, #28]
                    mp_convert_member_lookup(MP_OBJ_NULL, org_type, elem->value, lookup->dest);
   16490:	6a3b      	ldr	r3, [r7, #32]
   16492:	685a      	ldr	r2, [r3, #4]
   16494:	687b      	ldr	r3, [r7, #4]
   16496:	68db      	ldr	r3, [r3, #12]
   16498:	69f9      	ldr	r1, [r7, #28]
   1649a:	2000      	movs	r0, #0
   1649c:	f7f6 fa0a 	bl	c8b4 <mp_convert_member_lookup>
                printf("mp_obj_class_lookup: Returning: ");
                mp_obj_print(lookup->dest[0], PRINT_REPR); printf(" ");
                // Don't try to repr() lookup->dest[1], as we can be called recursively
                printf("<%s @%p>\n", mp_obj_get_type_str(lookup->dest[1]), lookup->dest[1]);
#endif
                return;
   164a0:	e0b4      	b.n	1660c <mp_obj_class_lookup+0x230>
                    mp_obj_instance_t *obj = lookup->obj;
   164a2:	687b      	ldr	r3, [r7, #4]
   164a4:	681b      	ldr	r3, [r3, #0]
   164a6:	61bb      	str	r3, [r7, #24]
                    if (obj != NULL && mp_obj_is_native_type(type) && type != &mp_type_object /* object is not a real type */) {
   164a8:	69bb      	ldr	r3, [r7, #24]
   164aa:	2b00      	cmp	r3, #0
   164ac:	d00c      	beq.n	164c8 <mp_obj_class_lookup+0xec>
   164ae:	683b      	ldr	r3, [r7, #0]
   164b0:	68db      	ldr	r3, [r3, #12]
   164b2:	4a5c      	ldr	r2, [pc, #368]	; (16624 <mp_obj_class_lookup+0x248>)
   164b4:	4293      	cmp	r3, r2
   164b6:	d007      	beq.n	164c8 <mp_obj_class_lookup+0xec>
   164b8:	683b      	ldr	r3, [r7, #0]
   164ba:	4a5d      	ldr	r2, [pc, #372]	; (16630 <mp_obj_class_lookup+0x254>)
   164bc:	4293      	cmp	r3, r2
   164be:	d003      	beq.n	164c8 <mp_obj_class_lookup+0xec>
                        obj_obj = obj->subobj[0];
   164c0:	69bb      	ldr	r3, [r7, #24]
   164c2:	691b      	ldr	r3, [r3, #16]
   164c4:	62fb      	str	r3, [r7, #44]	; 0x2c
   164c6:	e001      	b.n	164cc <mp_obj_class_lookup+0xf0>
                        obj_obj = MP_OBJ_FROM_PTR(obj);
   164c8:	69bb      	ldr	r3, [r7, #24]
   164ca:	62fb      	str	r3, [r7, #44]	; 0x2c
                    mp_convert_member_lookup(obj_obj, type, elem->value, lookup->dest);
   164cc:	6a3b      	ldr	r3, [r7, #32]
   164ce:	685a      	ldr	r2, [r3, #4]
   164d0:	687b      	ldr	r3, [r7, #4]
   164d2:	68db      	ldr	r3, [r3, #12]
   164d4:	6839      	ldr	r1, [r7, #0]
   164d6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   164d8:	f7f6 f9ec 	bl	c8b4 <mp_convert_member_lookup>
                return;
   164dc:	e096      	b.n	1660c <mp_obj_class_lookup+0x230>
        }

        // Previous code block takes care about attributes defined in .locals_dict,
        // but some attributes of native types may be handled using .load_attr method,
        // so make sure we try to lookup those too.
        if (lookup->obj != NULL && !lookup->is_type && mp_obj_is_native_type(type) && type != &mp_type_object /* object is not a real type */) {
   164de:	687b      	ldr	r3, [r7, #4]
   164e0:	681b      	ldr	r3, [r3, #0]
   164e2:	2b00      	cmp	r3, #0
   164e4:	d01e      	beq.n	16524 <mp_obj_class_lookup+0x148>
   164e6:	687b      	ldr	r3, [r7, #4]
   164e8:	7c1b      	ldrb	r3, [r3, #16]
   164ea:	f083 0301 	eor.w	r3, r3, #1
   164ee:	b2db      	uxtb	r3, r3
   164f0:	2b00      	cmp	r3, #0
   164f2:	d017      	beq.n	16524 <mp_obj_class_lookup+0x148>
   164f4:	683b      	ldr	r3, [r7, #0]
   164f6:	68db      	ldr	r3, [r3, #12]
   164f8:	4a4a      	ldr	r2, [pc, #296]	; (16624 <mp_obj_class_lookup+0x248>)
   164fa:	4293      	cmp	r3, r2
   164fc:	d012      	beq.n	16524 <mp_obj_class_lookup+0x148>
   164fe:	683b      	ldr	r3, [r7, #0]
   16500:	4a4b      	ldr	r2, [pc, #300]	; (16630 <mp_obj_class_lookup+0x254>)
   16502:	4293      	cmp	r3, r2
   16504:	d00e      	beq.n	16524 <mp_obj_class_lookup+0x148>
            mp_load_method_maybe(lookup->obj->subobj[0], lookup->attr, lookup->dest);
   16506:	687b      	ldr	r3, [r7, #4]
   16508:	681b      	ldr	r3, [r3, #0]
   1650a:	6918      	ldr	r0, [r3, #16]
   1650c:	687b      	ldr	r3, [r7, #4]
   1650e:	6859      	ldr	r1, [r3, #4]
   16510:	687b      	ldr	r3, [r7, #4]
   16512:	68db      	ldr	r3, [r3, #12]
   16514:	461a      	mov	r2, r3
   16516:	f7f6 fa41 	bl	c99c <mp_load_method_maybe>
            if (lookup->dest[0] != MP_OBJ_NULL) {
   1651a:	687b      	ldr	r3, [r7, #4]
   1651c:	68db      	ldr	r3, [r3, #12]
   1651e:	681b      	ldr	r3, [r3, #0]
   16520:	2b00      	cmp	r3, #0
   16522:	d16c      	bne.n	165fe <mp_obj_class_lookup+0x222>
            }
        }

        // attribute not found, keep searching base classes

        if (type->parent == NULL) {
   16524:	683b      	ldr	r3, [r7, #0]
   16526:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   16528:	2b00      	cmp	r3, #0
   1652a:	d06a      	beq.n	16602 <mp_obj_class_lookup+0x226>
            DEBUG_printf("mp_obj_class_lookup: No more parents\n");
            return;
        #if MICROPY_MULTIPLE_INHERITANCE
        } else if (((mp_obj_base_t*)type->parent)->type == &mp_type_tuple) {
   1652c:	683b      	ldr	r3, [r7, #0]
   1652e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   16530:	681b      	ldr	r3, [r3, #0]
   16532:	4a40      	ldr	r2, [pc, #256]	; (16634 <mp_obj_class_lookup+0x258>)
   16534:	4293      	cmp	r3, r2
   16536:	d15a      	bne.n	165ee <mp_obj_class_lookup+0x212>
            const mp_obj_tuple_t *parent_tuple = type->parent;
   16538:	683b      	ldr	r3, [r7, #0]
   1653a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   1653c:	617b      	str	r3, [r7, #20]
            const mp_obj_t *item = parent_tuple->items;
   1653e:	697b      	ldr	r3, [r7, #20]
   16540:	3308      	adds	r3, #8
   16542:	62bb      	str	r3, [r7, #40]	; 0x28
            const mp_obj_t *top = item + parent_tuple->len - 1;
   16544:	697b      	ldr	r3, [r7, #20]
   16546:	685b      	ldr	r3, [r3, #4]
   16548:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1654c:	3b01      	subs	r3, #1
   1654e:	009b      	lsls	r3, r3, #2
   16550:	6aba      	ldr	r2, [r7, #40]	; 0x28
   16552:	4413      	add	r3, r2
   16554:	613b      	str	r3, [r7, #16]
            for (; item < top; ++item) {
   16556:	e02b      	b.n	165b0 <mp_obj_class_lookup+0x1d4>
                assert(MP_OBJ_IS_TYPE(*item, &mp_type_type));
   16558:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1655a:	681b      	ldr	r3, [r3, #0]
   1655c:	4618      	mov	r0, r3
   1655e:	f7ff fe5b 	bl	16218 <MP_OBJ_IS_OBJ>
   16562:	4603      	mov	r3, r0
   16564:	f083 0301 	eor.w	r3, r3, #1
   16568:	b2db      	uxtb	r3, r3
   1656a:	2b00      	cmp	r3, #0
   1656c:	d105      	bne.n	1657a <mp_obj_class_lookup+0x19e>
   1656e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   16570:	681b      	ldr	r3, [r3, #0]
   16572:	681b      	ldr	r3, [r3, #0]
   16574:	4a30      	ldr	r2, [pc, #192]	; (16638 <mp_obj_class_lookup+0x25c>)
   16576:	4293      	cmp	r3, r2
   16578:	d005      	beq.n	16586 <mp_obj_class_lookup+0x1aa>
   1657a:	4b30      	ldr	r3, [pc, #192]	; (1663c <mp_obj_class_lookup+0x260>)
   1657c:	4a26      	ldr	r2, [pc, #152]	; (16618 <mp_obj_class_lookup+0x23c>)
   1657e:	21cc      	movs	r1, #204	; 0xcc
   16580:	4826      	ldr	r0, [pc, #152]	; (1661c <mp_obj_class_lookup+0x240>)
   16582:	f005 f8a5 	bl	1b6d0 <__assert_func>
                mp_obj_type_t *bt = (mp_obj_type_t*)MP_OBJ_TO_PTR(*item);
   16586:	6abb      	ldr	r3, [r7, #40]	; 0x28
   16588:	681b      	ldr	r3, [r3, #0]
   1658a:	60fb      	str	r3, [r7, #12]
                if (bt == &mp_type_object) {
   1658c:	68fb      	ldr	r3, [r7, #12]
   1658e:	4a28      	ldr	r2, [pc, #160]	; (16630 <mp_obj_class_lookup+0x254>)
   16590:	4293      	cmp	r3, r2
   16592:	d009      	beq.n	165a8 <mp_obj_class_lookup+0x1cc>
                    // Not a "real" type
                    continue;
                }
                mp_obj_class_lookup(lookup, bt);
   16594:	68f9      	ldr	r1, [r7, #12]
   16596:	6878      	ldr	r0, [r7, #4]
   16598:	f7ff ff20 	bl	163dc <mp_obj_class_lookup>
                if (lookup->dest[0] != MP_OBJ_NULL) {
   1659c:	687b      	ldr	r3, [r7, #4]
   1659e:	68db      	ldr	r3, [r3, #12]
   165a0:	681b      	ldr	r3, [r3, #0]
   165a2:	2b00      	cmp	r3, #0
   165a4:	d12f      	bne.n	16606 <mp_obj_class_lookup+0x22a>
   165a6:	e000      	b.n	165aa <mp_obj_class_lookup+0x1ce>
                    continue;
   165a8:	bf00      	nop
            for (; item < top; ++item) {
   165aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
   165ac:	3304      	adds	r3, #4
   165ae:	62bb      	str	r3, [r7, #40]	; 0x28
   165b0:	6aba      	ldr	r2, [r7, #40]	; 0x28
   165b2:	693b      	ldr	r3, [r7, #16]
   165b4:	429a      	cmp	r2, r3
   165b6:	d3cf      	bcc.n	16558 <mp_obj_class_lookup+0x17c>
                    return;
                }
            }

            // search last base (simple tail recursion elimination)
            assert(MP_OBJ_IS_TYPE(*item, &mp_type_type));
   165b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
   165ba:	681b      	ldr	r3, [r3, #0]
   165bc:	4618      	mov	r0, r3
   165be:	f7ff fe2b 	bl	16218 <MP_OBJ_IS_OBJ>
   165c2:	4603      	mov	r3, r0
   165c4:	f083 0301 	eor.w	r3, r3, #1
   165c8:	b2db      	uxtb	r3, r3
   165ca:	2b00      	cmp	r3, #0
   165cc:	d105      	bne.n	165da <mp_obj_class_lookup+0x1fe>
   165ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
   165d0:	681b      	ldr	r3, [r3, #0]
   165d2:	681b      	ldr	r3, [r3, #0]
   165d4:	4a18      	ldr	r2, [pc, #96]	; (16638 <mp_obj_class_lookup+0x25c>)
   165d6:	4293      	cmp	r3, r2
   165d8:	d005      	beq.n	165e6 <mp_obj_class_lookup+0x20a>
   165da:	4b18      	ldr	r3, [pc, #96]	; (1663c <mp_obj_class_lookup+0x260>)
   165dc:	4a0e      	ldr	r2, [pc, #56]	; (16618 <mp_obj_class_lookup+0x23c>)
   165de:	21d9      	movs	r1, #217	; 0xd9
   165e0:	480e      	ldr	r0, [pc, #56]	; (1661c <mp_obj_class_lookup+0x240>)
   165e2:	f005 f875 	bl	1b6d0 <__assert_func>
            type = (mp_obj_type_t*)MP_OBJ_TO_PTR(*item);
   165e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
   165e8:	681b      	ldr	r3, [r3, #0]
   165ea:	603b      	str	r3, [r7, #0]
   165ec:	e002      	b.n	165f4 <mp_obj_class_lookup+0x218>
        #endif
        } else {
            type = type->parent;
   165ee:	683b      	ldr	r3, [r7, #0]
   165f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   165f2:	603b      	str	r3, [r7, #0]
        }
        if (type == &mp_type_object) {
   165f4:	683b      	ldr	r3, [r7, #0]
   165f6:	4a0e      	ldr	r2, [pc, #56]	; (16630 <mp_obj_class_lookup+0x254>)
   165f8:	4293      	cmp	r3, r2
   165fa:	d006      	beq.n	1660a <mp_obj_class_lookup+0x22e>
            // Not a "real" type
            return;
        }
    }
   165fc:	e70a      	b.n	16414 <mp_obj_class_lookup+0x38>
                return;
   165fe:	bf00      	nop
   16600:	e004      	b.n	1660c <mp_obj_class_lookup+0x230>
            return;
   16602:	bf00      	nop
   16604:	e002      	b.n	1660c <mp_obj_class_lookup+0x230>
                    return;
   16606:	bf00      	nop
   16608:	e000      	b.n	1660c <mp_obj_class_lookup+0x230>
            return;
   1660a:	bf00      	nop
}
   1660c:	3730      	adds	r7, #48	; 0x30
   1660e:	46bd      	mov	sp, r7
   16610:	bd80      	pop	{r7, pc}
   16612:	bf00      	nop
   16614:	00023eb0 	.word	0x00023eb0
   16618:	000243c4 	.word	0x000243c4
   1661c:	00023e78 	.word	0x00023e78
   16620:	00023ed0 	.word	0x00023ed0
   16624:	0001674d 	.word	0x0001674d
   16628:	0002201c 	.word	0x0002201c
   1662c:	00023ef0 	.word	0x00023ef0
   16630:	000233a0 	.word	0x000233a0
   16634:	00023d90 	.word	0x00023d90
   16638:	00024088 	.word	0x00024088
   1663c:	00023e50 	.word	0x00023e50

00016640 <instance_print>:

STATIC void instance_print(const mp_print_t *print, mp_obj_t self_in, mp_print_kind_t kind) {
   16640:	b580      	push	{r7, lr}
   16642:	b08e      	sub	sp, #56	; 0x38
   16644:	af00      	add	r7, sp, #0
   16646:	60f8      	str	r0, [r7, #12]
   16648:	60b9      	str	r1, [r7, #8]
   1664a:	607a      	str	r2, [r7, #4]
    mp_obj_instance_t *self = MP_OBJ_TO_PTR(self_in);
   1664c:	68bb      	ldr	r3, [r7, #8]
   1664e:	637b      	str	r3, [r7, #52]	; 0x34
    qstr meth = (kind == PRINT_STR) ? MP_QSTR___str__ : MP_QSTR___repr__;
   16650:	687b      	ldr	r3, [r7, #4]
   16652:	2b00      	cmp	r3, #0
   16654:	d101      	bne.n	1665a <instance_print+0x1a>
   16656:	2324      	movs	r3, #36	; 0x24
   16658:	e000      	b.n	1665c <instance_print+0x1c>
   1665a:	2322      	movs	r3, #34	; 0x22
   1665c:	633b      	str	r3, [r7, #48]	; 0x30
    mp_obj_t member[2] = {MP_OBJ_NULL};
   1665e:	f107 0324 	add.w	r3, r7, #36	; 0x24
   16662:	2200      	movs	r2, #0
   16664:	601a      	str	r2, [r3, #0]
   16666:	605a      	str	r2, [r3, #4]
    struct class_lookup_data lookup = {
   16668:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1666a:	613b      	str	r3, [r7, #16]
   1666c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1666e:	617b      	str	r3, [r7, #20]
   16670:	2308      	movs	r3, #8
   16672:	61bb      	str	r3, [r7, #24]
   16674:	f107 0324 	add.w	r3, r7, #36	; 0x24
   16678:	61fb      	str	r3, [r7, #28]
   1667a:	2300      	movs	r3, #0
   1667c:	f887 3020 	strb.w	r3, [r7, #32]
        .attr = meth,
        .meth_offset = offsetof(mp_obj_type_t, print),
        .dest = member,
        .is_type = false,
    };
    mp_obj_class_lookup(&lookup, self->base.type);
   16680:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   16682:	681a      	ldr	r2, [r3, #0]
   16684:	f107 0310 	add.w	r3, r7, #16
   16688:	4611      	mov	r1, r2
   1668a:	4618      	mov	r0, r3
   1668c:	f7ff fea6 	bl	163dc <mp_obj_class_lookup>
    if (member[0] == MP_OBJ_NULL && kind == PRINT_STR) {
   16690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   16692:	2b00      	cmp	r3, #0
   16694:	d10e      	bne.n	166b4 <instance_print+0x74>
   16696:	687b      	ldr	r3, [r7, #4]
   16698:	2b00      	cmp	r3, #0
   1669a:	d10b      	bne.n	166b4 <instance_print+0x74>
        // If there's no __str__, fall back to __repr__
        lookup.attr = MP_QSTR___repr__;
   1669c:	2322      	movs	r3, #34	; 0x22
   1669e:	617b      	str	r3, [r7, #20]
        lookup.meth_offset = 0;
   166a0:	2300      	movs	r3, #0
   166a2:	61bb      	str	r3, [r7, #24]
        mp_obj_class_lookup(&lookup, self->base.type);
   166a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   166a6:	681a      	ldr	r2, [r3, #0]
   166a8:	f107 0310 	add.w	r3, r7, #16
   166ac:	4611      	mov	r1, r2
   166ae:	4618      	mov	r0, r3
   166b0:	f7ff fe94 	bl	163dc <mp_obj_class_lookup>
    }

    if (member[0] == MP_OBJ_SENTINEL) {
   166b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   166b6:	2b08      	cmp	r3, #8
   166b8:	d129      	bne.n	1670e <instance_print+0xce>
        // Handle Exception subclasses specially
        if (mp_obj_is_native_exception_instance(self->subobj[0])) {
   166ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   166bc:	691b      	ldr	r3, [r3, #16]
   166be:	4618      	mov	r0, r3
   166c0:	f7f7 f9f8 	bl	dab4 <mp_obj_get_type>
   166c4:	4603      	mov	r3, r0
   166c6:	68db      	ldr	r3, [r3, #12]
   166c8:	4a1e      	ldr	r2, [pc, #120]	; (16744 <instance_print+0x104>)
   166ca:	4293      	cmp	r3, r2
   166cc:	d117      	bne.n	166fe <instance_print+0xbe>
            if (kind != PRINT_STR) {
   166ce:	687b      	ldr	r3, [r7, #4]
   166d0:	2b00      	cmp	r3, #0
   166d2:	d00a      	beq.n	166ea <instance_print+0xaa>
                mp_print_str(print, qstr_str(self->base.type->name));
   166d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   166d6:	681b      	ldr	r3, [r3, #0]
   166d8:	685b      	ldr	r3, [r3, #4]
   166da:	4618      	mov	r0, r3
   166dc:	f7ea fe46 	bl	136c <qstr_str>
   166e0:	4603      	mov	r3, r0
   166e2:	4619      	mov	r1, r3
   166e4:	68f8      	ldr	r0, [r7, #12]
   166e6:	f7eb f985 	bl	19f4 <mp_print_str>
            }
            mp_obj_print_helper(print, self->subobj[0], kind | PRINT_EXC_SUBCLASS);
   166ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   166ec:	6919      	ldr	r1, [r3, #16]
   166ee:	687b      	ldr	r3, [r7, #4]
   166f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   166f4:	461a      	mov	r2, r3
   166f6:	68f8      	ldr	r0, [r7, #12]
   166f8:	f7f7 fa0e 	bl	db18 <mp_obj_print_helper>
        } else {
            mp_obj_print_helper(print, self->subobj[0], kind);
        }
        return;
   166fc:	e01f      	b.n	1673e <instance_print+0xfe>
            mp_obj_print_helper(print, self->subobj[0], kind);
   166fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   16700:	691b      	ldr	r3, [r3, #16]
   16702:	687a      	ldr	r2, [r7, #4]
   16704:	4619      	mov	r1, r3
   16706:	68f8      	ldr	r0, [r7, #12]
   16708:	f7f7 fa06 	bl	db18 <mp_obj_print_helper>
        return;
   1670c:	e017      	b.n	1673e <instance_print+0xfe>
    }

    if (member[0] != MP_OBJ_NULL) {
   1670e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   16710:	2b00      	cmp	r3, #0
   16712:	d00b      	beq.n	1672c <instance_print+0xec>
        mp_obj_t r = mp_call_function_1(member[0], self_in);
   16714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   16716:	68b9      	ldr	r1, [r7, #8]
   16718:	4618      	mov	r0, r3
   1671a:	f7f5 fc7d 	bl	c018 <mp_call_function_1>
   1671e:	62f8      	str	r0, [r7, #44]	; 0x2c
        mp_obj_print_helper(print, r, PRINT_STR);
   16720:	2200      	movs	r2, #0
   16722:	6af9      	ldr	r1, [r7, #44]	; 0x2c
   16724:	68f8      	ldr	r0, [r7, #12]
   16726:	f7f7 f9f7 	bl	db18 <mp_obj_print_helper>
        return;
   1672a:	e008      	b.n	1673e <instance_print+0xfe>
    }

    // TODO: CPython prints fully-qualified type name
    mp_printf(print, "<%s object at %p>", mp_obj_get_type_str(self_in), self);
   1672c:	68b8      	ldr	r0, [r7, #8]
   1672e:	f7f7 f9e1 	bl	daf4 <mp_obj_get_type_str>
   16732:	4602      	mov	r2, r0
   16734:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   16736:	4904      	ldr	r1, [pc, #16]	; (16748 <instance_print+0x108>)
   16738:	68f8      	ldr	r0, [r7, #12]
   1673a:	f7eb fc6f 	bl	201c <mp_printf>
}
   1673e:	3738      	adds	r7, #56	; 0x38
   16740:	46bd      	mov	sp, r7
   16742:	bd80      	pop	{r7, pc}
   16744:	0000f5f9 	.word	0x0000f5f9
   16748:	00023f20 	.word	0x00023f20

0001674c <mp_obj_instance_make_new>:

mp_obj_t mp_obj_instance_make_new(const mp_obj_type_t *self, size_t n_args, size_t n_kw, const mp_obj_t *args) {
   1674c:	b590      	push	{r4, r7, lr}
   1674e:	b093      	sub	sp, #76	; 0x4c
   16750:	af00      	add	r7, sp, #0
   16752:	60f8      	str	r0, [r7, #12]
   16754:	60b9      	str	r1, [r7, #8]
   16756:	607a      	str	r2, [r7, #4]
   16758:	603b      	str	r3, [r7, #0]
    assert(mp_obj_is_instance_type(self));
   1675a:	68fb      	ldr	r3, [r7, #12]
   1675c:	68db      	ldr	r3, [r3, #12]
   1675e:	4a6b      	ldr	r2, [pc, #428]	; (1690c <mp_obj_instance_make_new+0x1c0>)
   16760:	4293      	cmp	r3, r2
   16762:	d006      	beq.n	16772 <mp_obj_instance_make_new+0x26>
   16764:	4b6a      	ldr	r3, [pc, #424]	; (16910 <mp_obj_instance_make_new+0x1c4>)
   16766:	4a6b      	ldr	r2, [pc, #428]	; (16914 <mp_obj_instance_make_new+0x1c8>)
   16768:	f240 1111 	movw	r1, #273	; 0x111
   1676c:	486a      	ldr	r0, [pc, #424]	; (16918 <mp_obj_instance_make_new+0x1cc>)
   1676e:	f004 ffaf 	bl	1b6d0 <__assert_func>

    // look for __new__ function
    mp_obj_t init_fn[2] = {MP_OBJ_NULL};
   16772:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   16776:	2200      	movs	r2, #0
   16778:	601a      	str	r2, [r3, #0]
   1677a:	605a      	str	r2, [r3, #4]
    struct class_lookup_data lookup = {
   1677c:	2300      	movs	r3, #0
   1677e:	61bb      	str	r3, [r7, #24]
   16780:	231d      	movs	r3, #29
   16782:	61fb      	str	r3, [r7, #28]
   16784:	230c      	movs	r3, #12
   16786:	623b      	str	r3, [r7, #32]
   16788:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   1678c:	627b      	str	r3, [r7, #36]	; 0x24
   1678e:	2300      	movs	r3, #0
   16790:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
        .attr = MP_QSTR___new__,
        .meth_offset = offsetof(mp_obj_type_t, make_new),
        .dest = init_fn,
        .is_type = false,
    };
    mp_obj_class_lookup(&lookup, self);
   16794:	f107 0318 	add.w	r3, r7, #24
   16798:	68f9      	ldr	r1, [r7, #12]
   1679a:	4618      	mov	r0, r3
   1679c:	f7ff fe1e 	bl	163dc <mp_obj_class_lookup>

    const mp_obj_type_t *native_base = NULL;
   167a0:	2300      	movs	r3, #0
   167a2:	617b      	str	r3, [r7, #20]
    mp_obj_instance_t *o;
    if (init_fn[0] == MP_OBJ_NULL || init_fn[0] == MP_OBJ_SENTINEL) {
   167a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   167a6:	2b00      	cmp	r3, #0
   167a8:	d002      	beq.n	167b0 <mp_obj_instance_make_new+0x64>
   167aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   167ac:	2b08      	cmp	r3, #8
   167ae:	d107      	bne.n	167c0 <mp_obj_instance_make_new+0x74>
        // Either there is no __new__() method defined or there is a native
        // constructor.  In both cases create a blank instance.
        o = mp_obj_new_instance(self, &native_base);
   167b0:	f107 0314 	add.w	r3, r7, #20
   167b4:	4619      	mov	r1, r3
   167b6:	68f8      	ldr	r0, [r7, #12]
   167b8:	f7ff fdd8 	bl	1636c <mp_obj_new_instance>
   167bc:	6478      	str	r0, [r7, #68]	; 0x44
   167be:	e03e      	b.n	1683e <mp_obj_instance_make_new+0xf2>
        // said native constructor.

    } else {
        // Call Python class __new__ function with all args to create an instance
        mp_obj_t new_ret;
        if (n_args == 0 && n_kw == 0) {
   167c0:	68bb      	ldr	r3, [r7, #8]
   167c2:	2b00      	cmp	r3, #0
   167c4:	d10d      	bne.n	167e2 <mp_obj_instance_make_new+0x96>
   167c6:	687b      	ldr	r3, [r7, #4]
   167c8:	2b00      	cmp	r3, #0
   167ca:	d10a      	bne.n	167e2 <mp_obj_instance_make_new+0x96>
            mp_obj_t args2[1] = {MP_OBJ_FROM_PTR(self)};
   167cc:	68fb      	ldr	r3, [r7, #12]
   167ce:	613b      	str	r3, [r7, #16]
            new_ret = mp_call_function_n_kw(init_fn[0], 1, 0, args2);
   167d0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   167d2:	f107 0310 	add.w	r3, r7, #16
   167d6:	2200      	movs	r2, #0
   167d8:	2101      	movs	r1, #1
   167da:	f7f5 fc43 	bl	c064 <mp_call_function_n_kw>
   167de:	6438      	str	r0, [r7, #64]	; 0x40
        if (n_args == 0 && n_kw == 0) {
   167e0:	e022      	b.n	16828 <mp_obj_instance_make_new+0xdc>
        } else {
            mp_obj_t *args2 = m_new(mp_obj_t, 1 + n_args + 2 * n_kw);
   167e2:	687b      	ldr	r3, [r7, #4]
   167e4:	005a      	lsls	r2, r3, #1
   167e6:	68bb      	ldr	r3, [r7, #8]
   167e8:	4413      	add	r3, r2
   167ea:	3301      	adds	r3, #1
   167ec:	009b      	lsls	r3, r3, #2
   167ee:	4618      	mov	r0, r3
   167f0:	f7e9 fd94 	bl	31c <m_malloc>
   167f4:	63b8      	str	r0, [r7, #56]	; 0x38
            args2[0] = MP_OBJ_FROM_PTR(self);
   167f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   167f8:	68fa      	ldr	r2, [r7, #12]
   167fa:	601a      	str	r2, [r3, #0]
            memcpy(args2 + 1, args, (n_args + 2 * n_kw) * sizeof(mp_obj_t));
   167fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   167fe:	1d18      	adds	r0, r3, #4
   16800:	687b      	ldr	r3, [r7, #4]
   16802:	005a      	lsls	r2, r3, #1
   16804:	68bb      	ldr	r3, [r7, #8]
   16806:	4413      	add	r3, r2
   16808:	009b      	lsls	r3, r3, #2
   1680a:	461a      	mov	r2, r3
   1680c:	6839      	ldr	r1, [r7, #0]
   1680e:	f006 fa33 	bl	1cc78 <memcpy>
            new_ret = mp_call_function_n_kw(init_fn[0], n_args + 1, n_kw, args2);
   16812:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   16814:	68bb      	ldr	r3, [r7, #8]
   16816:	1c59      	adds	r1, r3, #1
   16818:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1681a:	687a      	ldr	r2, [r7, #4]
   1681c:	f7f5 fc22 	bl	c064 <mp_call_function_n_kw>
   16820:	6438      	str	r0, [r7, #64]	; 0x40
            m_del(mp_obj_t, args2, 1 + n_args + 2 * n_kw);
   16822:	6bb8      	ldr	r0, [r7, #56]	; 0x38
   16824:	f7e9 fdf4 	bl	410 <m_free>
        }

        // https://docs.python.org/3.4/reference/datamodel.html#object.__new__
        // "If __new__() does not return an instance of cls, then the new
        // instance's __init__() method will not be invoked."
        if (mp_obj_get_type(new_ret) != self) {
   16828:	6c38      	ldr	r0, [r7, #64]	; 0x40
   1682a:	f7f7 f943 	bl	dab4 <mp_obj_get_type>
   1682e:	4602      	mov	r2, r0
   16830:	68fb      	ldr	r3, [r7, #12]
   16832:	429a      	cmp	r2, r3
   16834:	d001      	beq.n	1683a <mp_obj_instance_make_new+0xee>
            return new_ret;
   16836:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   16838:	e063      	b.n	16902 <mp_obj_instance_make_new+0x1b6>
        }

        // The instance returned by __new__() becomes the new object
        o = MP_OBJ_TO_PTR(new_ret);
   1683a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1683c:	647b      	str	r3, [r7, #68]	; 0x44
    }

    // now call Python class __init__ function with all args
    // This method has a chance to call super().__init__() to construct a
    // possible native base class.
    init_fn[0] = init_fn[1] = MP_OBJ_NULL;
   1683e:	2300      	movs	r3, #0
   16840:	633b      	str	r3, [r7, #48]	; 0x30
   16842:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   16844:	62fb      	str	r3, [r7, #44]	; 0x2c
    lookup.obj = o;
   16846:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   16848:	61bb      	str	r3, [r7, #24]
    lookup.attr = MP_QSTR___init__;
   1684a:	2314      	movs	r3, #20
   1684c:	61fb      	str	r3, [r7, #28]
    lookup.meth_offset = 0;
   1684e:	2300      	movs	r3, #0
   16850:	623b      	str	r3, [r7, #32]
    mp_obj_class_lookup(&lookup, self);
   16852:	f107 0318 	add.w	r3, r7, #24
   16856:	68f9      	ldr	r1, [r7, #12]
   16858:	4618      	mov	r0, r3
   1685a:	f7ff fdbf 	bl	163dc <mp_obj_class_lookup>
    if (init_fn[0] != MP_OBJ_NULL) {
   1685e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   16860:	2b00      	cmp	r3, #0
   16862:	d03b      	beq.n	168dc <mp_obj_instance_make_new+0x190>
        mp_obj_t init_ret;
        if (n_args == 0 && n_kw == 0) {
   16864:	68bb      	ldr	r3, [r7, #8]
   16866:	2b00      	cmp	r3, #0
   16868:	d10b      	bne.n	16882 <mp_obj_instance_make_new+0x136>
   1686a:	687b      	ldr	r3, [r7, #4]
   1686c:	2b00      	cmp	r3, #0
   1686e:	d108      	bne.n	16882 <mp_obj_instance_make_new+0x136>
            init_ret = mp_call_method_n_kw(0, 0, init_fn);
   16870:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   16874:	461a      	mov	r2, r3
   16876:	2100      	movs	r1, #0
   16878:	2000      	movs	r0, #0
   1687a:	f7f5 fc15 	bl	c0a8 <mp_call_method_n_kw>
   1687e:	63f8      	str	r0, [r7, #60]	; 0x3c
   16880:	e025      	b.n	168ce <mp_obj_instance_make_new+0x182>
        } else {
            mp_obj_t *args2 = m_new(mp_obj_t, 2 + n_args + 2 * n_kw);
   16882:	687b      	ldr	r3, [r7, #4]
   16884:	005a      	lsls	r2, r3, #1
   16886:	68bb      	ldr	r3, [r7, #8]
   16888:	4413      	add	r3, r2
   1688a:	3302      	adds	r3, #2
   1688c:	009b      	lsls	r3, r3, #2
   1688e:	4618      	mov	r0, r3
   16890:	f7e9 fd44 	bl	31c <m_malloc>
   16894:	6378      	str	r0, [r7, #52]	; 0x34
            args2[0] = init_fn[0];
   16896:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   16898:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1689a:	601a      	str	r2, [r3, #0]
            args2[1] = init_fn[1];
   1689c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1689e:	3304      	adds	r3, #4
   168a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   168a2:	601a      	str	r2, [r3, #0]
            memcpy(args2 + 2, args, (n_args + 2 * n_kw) * sizeof(mp_obj_t));
   168a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   168a6:	f103 0008 	add.w	r0, r3, #8
   168aa:	687b      	ldr	r3, [r7, #4]
   168ac:	005a      	lsls	r2, r3, #1
   168ae:	68bb      	ldr	r3, [r7, #8]
   168b0:	4413      	add	r3, r2
   168b2:	009b      	lsls	r3, r3, #2
   168b4:	461a      	mov	r2, r3
   168b6:	6839      	ldr	r1, [r7, #0]
   168b8:	f006 f9de 	bl	1cc78 <memcpy>
            init_ret = mp_call_method_n_kw(n_args, n_kw, args2);
   168bc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   168be:	6879      	ldr	r1, [r7, #4]
   168c0:	68b8      	ldr	r0, [r7, #8]
   168c2:	f7f5 fbf1 	bl	c0a8 <mp_call_method_n_kw>
   168c6:	63f8      	str	r0, [r7, #60]	; 0x3c
            m_del(mp_obj_t, args2, 2 + n_args + 2 * n_kw);
   168c8:	6b78      	ldr	r0, [r7, #52]	; 0x34
   168ca:	f7e9 fda1 	bl	410 <m_free>
        }
        if (init_ret != mp_const_none) {
   168ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   168d0:	4a12      	ldr	r2, [pc, #72]	; (1691c <mp_obj_instance_make_new+0x1d0>)
   168d2:	4293      	cmp	r3, r2
   168d4:	d002      	beq.n	168dc <mp_obj_instance_make_new+0x190>
            if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
                mp_raise_TypeError("__init__() should return None");
   168d6:	4812      	ldr	r0, [pc, #72]	; (16920 <mp_obj_instance_make_new+0x1d4>)
   168d8:	f7f6 fc8c 	bl	d1f4 <mp_raise_TypeError>

    }

    // If the type had a native base that was not explicitly initialised
    // (constructed) by the Python __init__() method then construct it now.
    if (native_base != NULL && o->subobj[0] == MP_OBJ_FROM_PTR(&native_base_init_wrapper_obj)) {
   168dc:	697b      	ldr	r3, [r7, #20]
   168de:	2b00      	cmp	r3, #0
   168e0:	d00e      	beq.n	16900 <mp_obj_instance_make_new+0x1b4>
   168e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   168e4:	691b      	ldr	r3, [r3, #16]
   168e6:	4a0f      	ldr	r2, [pc, #60]	; (16924 <mp_obj_instance_make_new+0x1d8>)
   168e8:	4293      	cmp	r3, r2
   168ea:	d109      	bne.n	16900 <mp_obj_instance_make_new+0x1b4>
        o->subobj[0] = native_base->make_new(native_base, n_args, n_kw, args);
   168ec:	697b      	ldr	r3, [r7, #20]
   168ee:	68dc      	ldr	r4, [r3, #12]
   168f0:	6978      	ldr	r0, [r7, #20]
   168f2:	683b      	ldr	r3, [r7, #0]
   168f4:	687a      	ldr	r2, [r7, #4]
   168f6:	68b9      	ldr	r1, [r7, #8]
   168f8:	47a0      	blx	r4
   168fa:	4602      	mov	r2, r0
   168fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   168fe:	611a      	str	r2, [r3, #16]
    }

    return MP_OBJ_FROM_PTR(o);
   16900:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
   16902:	4618      	mov	r0, r3
   16904:	374c      	adds	r7, #76	; 0x4c
   16906:	46bd      	mov	sp, r7
   16908:	bd90      	pop	{r4, r7, pc}
   1690a:	bf00      	nop
   1690c:	0001674d 	.word	0x0001674d
   16910:	00023f34 	.word	0x00023f34
   16914:	000243d8 	.word	0x000243d8
   16918:	00023e78 	.word	0x00023e78
   1691c:	0002345c 	.word	0x0002345c
   16920:	00023f54 	.word	0x00023f54
   16924:	00023e8c 	.word	0x00023e8c

00016928 <instance_unary_op>:
    #if MICROPY_PY_SYS_GETSIZEOF
    [MP_UNARY_OP_SIZEOF] = MP_QSTR___sizeof__,
    #endif
};

STATIC mp_obj_t instance_unary_op(mp_unary_op_t op, mp_obj_t self_in) {
   16928:	b580      	push	{r7, lr}
   1692a:	b08c      	sub	sp, #48	; 0x30
   1692c:	af00      	add	r7, sp, #0
   1692e:	6078      	str	r0, [r7, #4]
   16930:	6039      	str	r1, [r7, #0]
    mp_obj_instance_t *self = MP_OBJ_TO_PTR(self_in);
   16932:	683b      	ldr	r3, [r7, #0]
   16934:	62bb      	str	r3, [r7, #40]	; 0x28
            + sizeof(*self->members.table) * self->members.alloc;
        return MP_OBJ_NEW_SMALL_INT(sz);
    }
    #endif

    qstr op_name = mp_unary_op_method_name[op];
   16936:	4a2c      	ldr	r2, [pc, #176]	; (169e8 <instance_unary_op+0xc0>)
   16938:	687b      	ldr	r3, [r7, #4]
   1693a:	4413      	add	r3, r2
   1693c:	781b      	ldrb	r3, [r3, #0]
   1693e:	627b      	str	r3, [r7, #36]	; 0x24
    /* Still try to lookup native slot
    if (op_name == 0) {
        return MP_OBJ_NULL;
    }
    */
    mp_obj_t member[2] = {MP_OBJ_NULL};
   16940:	f107 031c 	add.w	r3, r7, #28
   16944:	2200      	movs	r2, #0
   16946:	601a      	str	r2, [r3, #0]
   16948:	605a      	str	r2, [r3, #4]
    struct class_lookup_data lookup = {
   1694a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1694c:	60bb      	str	r3, [r7, #8]
   1694e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   16950:	60fb      	str	r3, [r7, #12]
   16952:	2314      	movs	r3, #20
   16954:	613b      	str	r3, [r7, #16]
   16956:	f107 031c 	add.w	r3, r7, #28
   1695a:	617b      	str	r3, [r7, #20]
   1695c:	2300      	movs	r3, #0
   1695e:	763b      	strb	r3, [r7, #24]
        .attr = op_name,
        .meth_offset = offsetof(mp_obj_type_t, unary_op),
        .dest = member,
        .is_type = false,
    };
    mp_obj_class_lookup(&lookup, self->base.type);
   16960:	6abb      	ldr	r3, [r7, #40]	; 0x28
   16962:	681a      	ldr	r2, [r3, #0]
   16964:	f107 0308 	add.w	r3, r7, #8
   16968:	4611      	mov	r1, r2
   1696a:	4618      	mov	r0, r3
   1696c:	f7ff fd36 	bl	163dc <mp_obj_class_lookup>
    if (member[0] == MP_OBJ_SENTINEL) {
   16970:	69fb      	ldr	r3, [r7, #28]
   16972:	2b08      	cmp	r3, #8
   16974:	d107      	bne.n	16986 <instance_unary_op+0x5e>
        return mp_unary_op(op, self->subobj[0]);
   16976:	6abb      	ldr	r3, [r7, #40]	; 0x28
   16978:	691b      	ldr	r3, [r3, #16]
   1697a:	4619      	mov	r1, r3
   1697c:	6878      	ldr	r0, [r7, #4]
   1697e:	f7f4 fff7 	bl	b970 <mp_unary_op>
   16982:	4603      	mov	r3, r0
   16984:	e02b      	b.n	169de <instance_unary_op+0xb6>
    } else if (member[0] != MP_OBJ_NULL) {
   16986:	69fb      	ldr	r3, [r7, #28]
   16988:	2b00      	cmp	r3, #0
   1698a:	d012      	beq.n	169b2 <instance_unary_op+0x8a>
        mp_obj_t val = mp_call_function_1(member[0], self_in);
   1698c:	69fb      	ldr	r3, [r7, #28]
   1698e:	6839      	ldr	r1, [r7, #0]
   16990:	4618      	mov	r0, r3
   16992:	f7f5 fb41 	bl	c018 <mp_call_function_1>
   16996:	62f8      	str	r0, [r7, #44]	; 0x2c
        // __hash__ must return a small int
        if (op == MP_UNARY_OP_HASH) {
   16998:	687b      	ldr	r3, [r7, #4]
   1699a:	2b06      	cmp	r3, #6
   1699c:	d107      	bne.n	169ae <instance_unary_op+0x86>
            val = MP_OBJ_NEW_SMALL_INT(mp_obj_get_int_truncated(val));
   1699e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   169a0:	f7f7 fa9e 	bl	dee0 <mp_obj_get_int_truncated>
   169a4:	4603      	mov	r3, r0
   169a6:	005b      	lsls	r3, r3, #1
   169a8:	f043 0301 	orr.w	r3, r3, #1
   169ac:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        return val;
   169ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   169b0:	e015      	b.n	169de <instance_unary_op+0xb6>
    } else {
        if (op == MP_UNARY_OP_HASH) {
   169b2:	687b      	ldr	r3, [r7, #4]
   169b4:	2b06      	cmp	r3, #6
   169b6:	d111      	bne.n	169dc <instance_unary_op+0xb4>
            lookup.attr = MP_QSTR___eq__;
   169b8:	230b      	movs	r3, #11
   169ba:	60fb      	str	r3, [r7, #12]
            mp_obj_class_lookup(&lookup, self->base.type);
   169bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
   169be:	681a      	ldr	r2, [r3, #0]
   169c0:	f107 0308 	add.w	r3, r7, #8
   169c4:	4611      	mov	r1, r2
   169c6:	4618      	mov	r0, r3
   169c8:	f7ff fd08 	bl	163dc <mp_obj_class_lookup>
            if (member[0] == MP_OBJ_NULL) {
   169cc:	69fb      	ldr	r3, [r7, #28]
   169ce:	2b00      	cmp	r3, #0
   169d0:	d104      	bne.n	169dc <instance_unary_op+0xb4>
                // https://docs.python.org/3/reference/datamodel.html#object.__hash__
                // "User-defined classes have __eq__() and __hash__() methods by default;
                // with them, all objects compare unequal (except with themselves) and
                // x.__hash__() returns an appropriate value such that x == y implies
                // both that x is y and hash(x) == hash(y)."
                return MP_OBJ_NEW_SMALL_INT((mp_uint_t)self_in);
   169d2:	683b      	ldr	r3, [r7, #0]
   169d4:	005b      	lsls	r3, r3, #1
   169d6:	f043 0301 	orr.w	r3, r3, #1
   169da:	e000      	b.n	169de <instance_unary_op+0xb6>
            }
            // "A class that overrides __eq__() and does not define __hash__() will have its __hash__() implicitly set to None.
            // When the __hash__() method of a class is None, instances of the class will raise an appropriate TypeError"
        }

        return MP_OBJ_NULL; // op not supported
   169dc:	2300      	movs	r3, #0
    }
}
   169de:	4618      	mov	r0, r3
   169e0:	3730      	adds	r7, #48	; 0x30
   169e2:	46bd      	mov	sp, r7
   169e4:	bd80      	pop	{r7, pc}
   169e6:	bf00      	nop
   169e8:	00023f74 	.word	0x00023f74

000169ec <instance_binary_op>:
    [MP_BINARY_OP_REVERSE_RSHIFT] = MP_QSTR___rrshift__,
    #endif
    #endif
};

STATIC mp_obj_t instance_binary_op(mp_binary_op_t op, mp_obj_t lhs_in, mp_obj_t rhs_in) {
   169ec:	b580      	push	{r7, lr}
   169ee:	b090      	sub	sp, #64	; 0x40
   169f0:	af00      	add	r7, sp, #0
   169f2:	60f8      	str	r0, [r7, #12]
   169f4:	60b9      	str	r1, [r7, #8]
   169f6:	607a      	str	r2, [r7, #4]
    // Note: For ducktyping, CPython does not look in the instance members or use
    // __getattr__ or __getattribute__.  It only looks in the class dictionary.
    mp_obj_instance_t *lhs = MP_OBJ_TO_PTR(lhs_in);
   169f8:	68bb      	ldr	r3, [r7, #8]
   169fa:	63bb      	str	r3, [r7, #56]	; 0x38
retry:;
    qstr op_name = mp_binary_op_method_name[op];
   169fc:	4a24      	ldr	r2, [pc, #144]	; (16a90 <instance_binary_op+0xa4>)
   169fe:	68fb      	ldr	r3, [r7, #12]
   16a00:	4413      	add	r3, r2
   16a02:	781b      	ldrb	r3, [r3, #0]
   16a04:	637b      	str	r3, [r7, #52]	; 0x34
    /* Still try to lookup native slot
    if (op_name == 0) {
        return MP_OBJ_NULL;
    }
    */
    mp_obj_t dest[3] = {MP_OBJ_NULL};
   16a06:	f107 0328 	add.w	r3, r7, #40	; 0x28
   16a0a:	2200      	movs	r2, #0
   16a0c:	601a      	str	r2, [r3, #0]
   16a0e:	605a      	str	r2, [r3, #4]
   16a10:	609a      	str	r2, [r3, #8]
    struct class_lookup_data lookup = {
   16a12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   16a14:	617b      	str	r3, [r7, #20]
   16a16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   16a18:	61bb      	str	r3, [r7, #24]
   16a1a:	2318      	movs	r3, #24
   16a1c:	61fb      	str	r3, [r7, #28]
   16a1e:	f107 0328 	add.w	r3, r7, #40	; 0x28
   16a22:	623b      	str	r3, [r7, #32]
   16a24:	2300      	movs	r3, #0
   16a26:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
        .attr = op_name,
        .meth_offset = offsetof(mp_obj_type_t, binary_op),
        .dest = dest,
        .is_type = false,
    };
    mp_obj_class_lookup(&lookup, lhs->base.type);
   16a2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   16a2c:	681a      	ldr	r2, [r3, #0]
   16a2e:	f107 0314 	add.w	r3, r7, #20
   16a32:	4611      	mov	r1, r2
   16a34:	4618      	mov	r0, r3
   16a36:	f7ff fcd1 	bl	163dc <mp_obj_class_lookup>

    mp_obj_t res;
    if (dest[0] == MP_OBJ_SENTINEL) {
   16a3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   16a3c:	2b08      	cmp	r3, #8
   16a3e:	d108      	bne.n	16a52 <instance_binary_op+0x66>
        res = mp_binary_op(op, lhs->subobj[0], rhs_in);
   16a40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   16a42:	691b      	ldr	r3, [r3, #16]
   16a44:	687a      	ldr	r2, [r7, #4]
   16a46:	4619      	mov	r1, r3
   16a48:	68f8      	ldr	r0, [r7, #12]
   16a4a:	f7f5 f877 	bl	bb3c <mp_binary_op>
   16a4e:	63f8      	str	r0, [r7, #60]	; 0x3c
   16a50:	e019      	b.n	16a86 <instance_binary_op+0x9a>
    } else if (dest[0] != MP_OBJ_NULL) {
   16a52:	6abb      	ldr	r3, [r7, #40]	; 0x28
   16a54:	2b00      	cmp	r3, #0
   16a56:	d00a      	beq.n	16a6e <instance_binary_op+0x82>
        dest[2] = rhs_in;
   16a58:	687b      	ldr	r3, [r7, #4]
   16a5a:	633b      	str	r3, [r7, #48]	; 0x30
        res = mp_call_method_n_kw(1, 0, dest);
   16a5c:	f107 0328 	add.w	r3, r7, #40	; 0x28
   16a60:	461a      	mov	r2, r3
   16a62:	2100      	movs	r1, #0
   16a64:	2001      	movs	r0, #1
   16a66:	f7f5 fb1f 	bl	c0a8 <mp_call_method_n_kw>
   16a6a:	63f8      	str	r0, [r7, #60]	; 0x3c
   16a6c:	e00b      	b.n	16a86 <instance_binary_op+0x9a>
    } else {
        // If this was an inplace method, fallback to normal method
        // https://docs.python.org/3/reference/datamodel.html#object.__iadd__ :
        // "If a specific method is not defined, the augmented assignment
        // falls back to the normal methods."
        if (op >= MP_BINARY_OP_INPLACE_OR && op <= MP_BINARY_OP_INPLACE_POWER) {
   16a6e:	68fb      	ldr	r3, [r7, #12]
   16a70:	2b08      	cmp	r3, #8
   16a72:	d906      	bls.n	16a82 <instance_binary_op+0x96>
   16a74:	68fb      	ldr	r3, [r7, #12]
   16a76:	2b14      	cmp	r3, #20
   16a78:	d803      	bhi.n	16a82 <instance_binary_op+0x96>
            op -= MP_BINARY_OP_INPLACE_OR - MP_BINARY_OP_OR;
   16a7a:	68fb      	ldr	r3, [r7, #12]
   16a7c:	330c      	adds	r3, #12
   16a7e:	60fb      	str	r3, [r7, #12]
            goto retry;
   16a80:	e7bc      	b.n	169fc <instance_binary_op+0x10>
        }
        return MP_OBJ_NULL; // op not supported
   16a82:	2300      	movs	r3, #0
   16a84:	e000      	b.n	16a88 <instance_binary_op+0x9c>
    if (res == mp_const_notimplemented) {
        return MP_OBJ_NULL; // op not supported
    }
    #endif

    return res;
   16a86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
   16a88:	4618      	mov	r0, r3
   16a8a:	3740      	adds	r7, #64	; 0x40
   16a8c:	46bd      	mov	sp, r7
   16a8e:	bd80      	pop	{r7, pc}
   16a90:	00023f80 	.word	0x00023f80

00016a94 <mp_obj_instance_load_attr>:

STATIC void mp_obj_instance_load_attr(mp_obj_t self_in, qstr attr, mp_obj_t *dest) {
   16a94:	b580      	push	{r7, lr}
   16a96:	b090      	sub	sp, #64	; 0x40
   16a98:	af00      	add	r7, sp, #0
   16a9a:	60f8      	str	r0, [r7, #12]
   16a9c:	60b9      	str	r1, [r7, #8]
   16a9e:	607a      	str	r2, [r7, #4]
    // logic: look in instance members then class locals
    assert(mp_obj_is_instance_type(mp_obj_get_type(self_in)));
   16aa0:	68f8      	ldr	r0, [r7, #12]
   16aa2:	f7f7 f807 	bl	dab4 <mp_obj_get_type>
   16aa6:	4603      	mov	r3, r0
   16aa8:	68db      	ldr	r3, [r3, #12]
   16aaa:	4a2c      	ldr	r2, [pc, #176]	; (16b5c <mp_obj_instance_load_attr+0xc8>)
   16aac:	4293      	cmp	r3, r2
   16aae:	d006      	beq.n	16abe <mp_obj_instance_load_attr+0x2a>
   16ab0:	4b2b      	ldr	r3, [pc, #172]	; (16b60 <mp_obj_instance_load_attr+0xcc>)
   16ab2:	4a2c      	ldr	r2, [pc, #176]	; (16b64 <mp_obj_instance_load_attr+0xd0>)
   16ab4:	f240 212f 	movw	r1, #559	; 0x22f
   16ab8:	482b      	ldr	r0, [pc, #172]	; (16b68 <mp_obj_instance_load_attr+0xd4>)
   16aba:	f004 fe09 	bl	1b6d0 <__assert_func>
    mp_obj_instance_t *self = MP_OBJ_TO_PTR(self_in);
   16abe:	68fb      	ldr	r3, [r7, #12]
   16ac0:	63fb      	str	r3, [r7, #60]	; 0x3c

    mp_map_elem_t *elem = mp_map_lookup(&self->members, MP_OBJ_NEW_QSTR(attr), MP_MAP_LOOKUP);
   16ac2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   16ac4:	1d18      	adds	r0, r3, #4
   16ac6:	68bb      	ldr	r3, [r7, #8]
   16ac8:	009b      	lsls	r3, r3, #2
   16aca:	f043 0302 	orr.w	r3, r3, #2
   16ace:	2200      	movs	r2, #0
   16ad0:	4619      	mov	r1, r3
   16ad2:	f7f6 fe45 	bl	d760 <mp_map_lookup>
   16ad6:	63b8      	str	r0, [r7, #56]	; 0x38
    if (elem != NULL) {
   16ad8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   16ada:	2b00      	cmp	r3, #0
   16adc:	d004      	beq.n	16ae8 <mp_obj_instance_load_attr+0x54>
        // object member, always treated as a value
        // TODO should we check for properties?
        dest[0] = elem->value;
   16ade:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   16ae0:	685a      	ldr	r2, [r3, #4]
   16ae2:	687b      	ldr	r3, [r7, #4]
   16ae4:	601a      	str	r2, [r3, #0]
        return;
   16ae6:	e036      	b.n	16b56 <mp_obj_instance_load_attr+0xc2>
        }
        dest[0] = attr_dict;
        return;
    }
#endif
    struct class_lookup_data lookup = {
   16ae8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   16aea:	623b      	str	r3, [r7, #32]
   16aec:	68bb      	ldr	r3, [r7, #8]
   16aee:	627b      	str	r3, [r7, #36]	; 0x24
   16af0:	2300      	movs	r3, #0
   16af2:	62bb      	str	r3, [r7, #40]	; 0x28
   16af4:	687b      	ldr	r3, [r7, #4]
   16af6:	62fb      	str	r3, [r7, #44]	; 0x2c
   16af8:	2300      	movs	r3, #0
   16afa:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
        .attr = attr,
        .meth_offset = 0,
        .dest = dest,
        .is_type = false,
    };
    mp_obj_class_lookup(&lookup, self->base.type);
   16afe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   16b00:	681a      	ldr	r2, [r3, #0]
   16b02:	f107 0320 	add.w	r3, r7, #32
   16b06:	4611      	mov	r1, r2
   16b08:	4618      	mov	r0, r3
   16b0a:	f7ff fc67 	bl	163dc <mp_obj_class_lookup>
    mp_obj_t member = dest[0];
   16b0e:	687b      	ldr	r3, [r7, #4]
   16b10:	681b      	ldr	r3, [r3, #0]
   16b12:	637b      	str	r3, [r7, #52]	; 0x34
    if (member != MP_OBJ_NULL) {
   16b14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   16b16:	2b00      	cmp	r3, #0
   16b18:	d11c      	bne.n	16b54 <mp_obj_instance_load_attr+0xc0>
        #endif
        return;
    }

    // try __getattr__
    if (attr != MP_QSTR___getattr__) {
   16b1a:	68bb      	ldr	r3, [r7, #8]
   16b1c:	2b0e      	cmp	r3, #14
   16b1e:	d01a      	beq.n	16b56 <mp_obj_instance_load_attr+0xc2>
            return;
        }
        #endif

        mp_obj_t dest2[3];
        mp_load_method_maybe(self_in, MP_QSTR___getattr__, dest2);
   16b20:	f107 0314 	add.w	r3, r7, #20
   16b24:	461a      	mov	r2, r3
   16b26:	210e      	movs	r1, #14
   16b28:	68f8      	ldr	r0, [r7, #12]
   16b2a:	f7f5 ff37 	bl	c99c <mp_load_method_maybe>
        if (dest2[0] != MP_OBJ_NULL) {
   16b2e:	697b      	ldr	r3, [r7, #20]
   16b30:	2b00      	cmp	r3, #0
   16b32:	d010      	beq.n	16b56 <mp_obj_instance_load_attr+0xc2>
            // __getattr__ exists, call it and return its result
            // XXX if this fails to load the requested attr, should we catch the attribute error and return silently?
            dest2[2] = MP_OBJ_NEW_QSTR(attr);
   16b34:	68bb      	ldr	r3, [r7, #8]
   16b36:	009b      	lsls	r3, r3, #2
   16b38:	f043 0302 	orr.w	r3, r3, #2
   16b3c:	61fb      	str	r3, [r7, #28]
            dest[0] = mp_call_method_n_kw(1, 0, dest2);
   16b3e:	f107 0314 	add.w	r3, r7, #20
   16b42:	461a      	mov	r2, r3
   16b44:	2100      	movs	r1, #0
   16b46:	2001      	movs	r0, #1
   16b48:	f7f5 faae 	bl	c0a8 <mp_call_method_n_kw>
   16b4c:	4602      	mov	r2, r0
   16b4e:	687b      	ldr	r3, [r7, #4]
   16b50:	601a      	str	r2, [r3, #0]
   16b52:	e000      	b.n	16b56 <mp_obj_instance_load_attr+0xc2>
        return;
   16b54:	bf00      	nop
            return;
        }
    }
}
   16b56:	3740      	adds	r7, #64	; 0x40
   16b58:	46bd      	mov	sp, r7
   16b5a:	bd80      	pop	{r7, pc}
   16b5c:	0001674d 	.word	0x0001674d
   16b60:	00023fa4 	.word	0x00023fa4
   16b64:	000243f4 	.word	0x000243f4
   16b68:	00023e78 	.word	0x00023e78

00016b6c <mp_obj_instance_store_attr>:

STATIC bool mp_obj_instance_store_attr(mp_obj_t self_in, qstr attr, mp_obj_t value) {
   16b6c:	b580      	push	{r7, lr}
   16b6e:	b086      	sub	sp, #24
   16b70:	af00      	add	r7, sp, #0
   16b72:	60f8      	str	r0, [r7, #12]
   16b74:	60b9      	str	r1, [r7, #8]
   16b76:	607a      	str	r2, [r7, #4]
    mp_obj_instance_t *self = MP_OBJ_TO_PTR(self_in);
   16b78:	68fb      	ldr	r3, [r7, #12]
   16b7a:	617b      	str	r3, [r7, #20]
        }
        #endif
    }
    #endif

    if (value == MP_OBJ_NULL) {
   16b7c:	687b      	ldr	r3, [r7, #4]
   16b7e:	2b00      	cmp	r3, #0
   16b80:	d111      	bne.n	16ba6 <mp_obj_instance_store_attr+0x3a>
            mp_call_method_n_kw(1, 0, attr_delattr_method);
            return true;
        }
        #endif

        mp_map_elem_t *elem = mp_map_lookup(&self->members, MP_OBJ_NEW_QSTR(attr), MP_MAP_LOOKUP_REMOVE_IF_FOUND);
   16b82:	697b      	ldr	r3, [r7, #20]
   16b84:	1d18      	adds	r0, r3, #4
   16b86:	68bb      	ldr	r3, [r7, #8]
   16b88:	009b      	lsls	r3, r3, #2
   16b8a:	f043 0302 	orr.w	r3, r3, #2
   16b8e:	2202      	movs	r2, #2
   16b90:	4619      	mov	r1, r3
   16b92:	f7f6 fde5 	bl	d760 <mp_map_lookup>
   16b96:	6138      	str	r0, [r7, #16]
        return elem != NULL;
   16b98:	693b      	ldr	r3, [r7, #16]
   16b9a:	2b00      	cmp	r3, #0
   16b9c:	bf14      	ite	ne
   16b9e:	2301      	movne	r3, #1
   16ba0:	2300      	moveq	r3, #0
   16ba2:	b2db      	uxtb	r3, r3
   16ba4:	e00d      	b.n	16bc2 <mp_obj_instance_store_attr+0x56>
            mp_call_method_n_kw(2, 0, attr_setattr_method);
            return true;
        }
        #endif

        mp_map_lookup(&self->members, MP_OBJ_NEW_QSTR(attr), MP_MAP_LOOKUP_ADD_IF_NOT_FOUND)->value = value;
   16ba6:	697b      	ldr	r3, [r7, #20]
   16ba8:	1d18      	adds	r0, r3, #4
   16baa:	68bb      	ldr	r3, [r7, #8]
   16bac:	009b      	lsls	r3, r3, #2
   16bae:	f043 0302 	orr.w	r3, r3, #2
   16bb2:	2201      	movs	r2, #1
   16bb4:	4619      	mov	r1, r3
   16bb6:	f7f6 fdd3 	bl	d760 <mp_map_lookup>
   16bba:	4602      	mov	r2, r0
   16bbc:	687b      	ldr	r3, [r7, #4]
   16bbe:	6053      	str	r3, [r2, #4]
        return true;
   16bc0:	2301      	movs	r3, #1
    }
}
   16bc2:	4618      	mov	r0, r3
   16bc4:	3718      	adds	r7, #24
   16bc6:	46bd      	mov	sp, r7
   16bc8:	bd80      	pop	{r7, pc}
   16bca:	bf00      	nop

00016bcc <mp_obj_instance_attr>:

void mp_obj_instance_attr(mp_obj_t self_in, qstr attr, mp_obj_t *dest) {
   16bcc:	b580      	push	{r7, lr}
   16bce:	b084      	sub	sp, #16
   16bd0:	af00      	add	r7, sp, #0
   16bd2:	60f8      	str	r0, [r7, #12]
   16bd4:	60b9      	str	r1, [r7, #8]
   16bd6:	607a      	str	r2, [r7, #4]
    if (dest[0] == MP_OBJ_NULL) {
   16bd8:	687b      	ldr	r3, [r7, #4]
   16bda:	681b      	ldr	r3, [r3, #0]
   16bdc:	2b00      	cmp	r3, #0
   16bde:	d105      	bne.n	16bec <mp_obj_instance_attr+0x20>
        mp_obj_instance_load_attr(self_in, attr, dest);
   16be0:	687a      	ldr	r2, [r7, #4]
   16be2:	68b9      	ldr	r1, [r7, #8]
   16be4:	68f8      	ldr	r0, [r7, #12]
   16be6:	f7ff ff55 	bl	16a94 <mp_obj_instance_load_attr>
    } else {
        if (mp_obj_instance_store_attr(self_in, attr, dest[1])) {
            dest[0] = MP_OBJ_NULL; // indicate success
        }
    }
}
   16bea:	e00d      	b.n	16c08 <mp_obj_instance_attr+0x3c>
        if (mp_obj_instance_store_attr(self_in, attr, dest[1])) {
   16bec:	687b      	ldr	r3, [r7, #4]
   16bee:	3304      	adds	r3, #4
   16bf0:	681b      	ldr	r3, [r3, #0]
   16bf2:	461a      	mov	r2, r3
   16bf4:	68b9      	ldr	r1, [r7, #8]
   16bf6:	68f8      	ldr	r0, [r7, #12]
   16bf8:	f7ff ffb8 	bl	16b6c <mp_obj_instance_store_attr>
   16bfc:	4603      	mov	r3, r0
   16bfe:	2b00      	cmp	r3, #0
   16c00:	d002      	beq.n	16c08 <mp_obj_instance_attr+0x3c>
            dest[0] = MP_OBJ_NULL; // indicate success
   16c02:	687b      	ldr	r3, [r7, #4]
   16c04:	2200      	movs	r2, #0
   16c06:	601a      	str	r2, [r3, #0]
}
   16c08:	bf00      	nop
   16c0a:	3710      	adds	r7, #16
   16c0c:	46bd      	mov	sp, r7
   16c0e:	bd80      	pop	{r7, pc}

00016c10 <instance_subscr>:

STATIC mp_obj_t instance_subscr(mp_obj_t self_in, mp_obj_t index, mp_obj_t value) {
   16c10:	b580      	push	{r7, lr}
   16c12:	b092      	sub	sp, #72	; 0x48
   16c14:	af00      	add	r7, sp, #0
   16c16:	60f8      	str	r0, [r7, #12]
   16c18:	60b9      	str	r1, [r7, #8]
   16c1a:	607a      	str	r2, [r7, #4]
    mp_obj_instance_t *self = MP_OBJ_TO_PTR(self_in);
   16c1c:	68fb      	ldr	r3, [r7, #12]
   16c1e:	643b      	str	r3, [r7, #64]	; 0x40
    mp_obj_t member[2] = {MP_OBJ_NULL};
   16c20:	f107 0334 	add.w	r3, r7, #52	; 0x34
   16c24:	2200      	movs	r2, #0
   16c26:	601a      	str	r2, [r3, #0]
   16c28:	605a      	str	r2, [r3, #4]
    struct class_lookup_data lookup = {
   16c2a:	f107 0320 	add.w	r3, r7, #32
   16c2e:	2200      	movs	r2, #0
   16c30:	601a      	str	r2, [r3, #0]
   16c32:	605a      	str	r2, [r3, #4]
   16c34:	609a      	str	r2, [r3, #8]
   16c36:	60da      	str	r2, [r3, #12]
   16c38:	611a      	str	r2, [r3, #16]
   16c3a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   16c3c:	623b      	str	r3, [r7, #32]
   16c3e:	2320      	movs	r3, #32
   16c40:	62bb      	str	r3, [r7, #40]	; 0x28
   16c42:	f107 0334 	add.w	r3, r7, #52	; 0x34
   16c46:	62fb      	str	r3, [r7, #44]	; 0x2c
        .meth_offset = offsetof(mp_obj_type_t, subscr),
        .dest = member,
        .is_type = false,
    };
    size_t meth_args;
    if (value == MP_OBJ_NULL) {
   16c48:	687b      	ldr	r3, [r7, #4]
   16c4a:	2b00      	cmp	r3, #0
   16c4c:	d10c      	bne.n	16c68 <instance_subscr+0x58>
        // delete item
        lookup.attr = MP_QSTR___delitem__;
   16c4e:	2309      	movs	r3, #9
   16c50:	627b      	str	r3, [r7, #36]	; 0x24
        mp_obj_class_lookup(&lookup, self->base.type);
   16c52:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   16c54:	681a      	ldr	r2, [r3, #0]
   16c56:	f107 0320 	add.w	r3, r7, #32
   16c5a:	4611      	mov	r1, r2
   16c5c:	4618      	mov	r0, r3
   16c5e:	f7ff fbbd 	bl	163dc <mp_obj_class_lookup>
        meth_args = 2;
   16c62:	2302      	movs	r3, #2
   16c64:	647b      	str	r3, [r7, #68]	; 0x44
   16c66:	e01b      	b.n	16ca0 <instance_subscr+0x90>
    } else if (value == MP_OBJ_SENTINEL) {
   16c68:	687b      	ldr	r3, [r7, #4]
   16c6a:	2b08      	cmp	r3, #8
   16c6c:	d10c      	bne.n	16c88 <instance_subscr+0x78>
        // load item
        lookup.attr = MP_QSTR___getitem__;
   16c6e:	230f      	movs	r3, #15
   16c70:	627b      	str	r3, [r7, #36]	; 0x24
        mp_obj_class_lookup(&lookup, self->base.type);
   16c72:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   16c74:	681a      	ldr	r2, [r3, #0]
   16c76:	f107 0320 	add.w	r3, r7, #32
   16c7a:	4611      	mov	r1, r2
   16c7c:	4618      	mov	r0, r3
   16c7e:	f7ff fbad 	bl	163dc <mp_obj_class_lookup>
        meth_args = 2;
   16c82:	2302      	movs	r3, #2
   16c84:	647b      	str	r3, [r7, #68]	; 0x44
   16c86:	e00b      	b.n	16ca0 <instance_subscr+0x90>
    } else {
        // store item
        lookup.attr = MP_QSTR___setitem__;
   16c88:	2323      	movs	r3, #35	; 0x23
   16c8a:	627b      	str	r3, [r7, #36]	; 0x24
        mp_obj_class_lookup(&lookup, self->base.type);
   16c8c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   16c8e:	681a      	ldr	r2, [r3, #0]
   16c90:	f107 0320 	add.w	r3, r7, #32
   16c94:	4611      	mov	r1, r2
   16c96:	4618      	mov	r0, r3
   16c98:	f7ff fba0 	bl	163dc <mp_obj_class_lookup>
        meth_args = 3;
   16c9c:	2303      	movs	r3, #3
   16c9e:	647b      	str	r3, [r7, #68]	; 0x44
    }
    if (member[0] == MP_OBJ_SENTINEL) {
   16ca0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   16ca2:	2b08      	cmp	r3, #8
   16ca4:	d108      	bne.n	16cb8 <instance_subscr+0xa8>
        return mp_obj_subscr(self->subobj[0], index, value);
   16ca6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   16ca8:	691b      	ldr	r3, [r3, #16]
   16caa:	687a      	ldr	r2, [r7, #4]
   16cac:	68b9      	ldr	r1, [r7, #8]
   16cae:	4618      	mov	r0, r3
   16cb0:	f7f7 faa4 	bl	e1fc <mp_obj_subscr>
   16cb4:	4603      	mov	r3, r0
   16cb6:	e018      	b.n	16cea <instance_subscr+0xda>
    } else if (member[0] != MP_OBJ_NULL) {
   16cb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   16cba:	2b00      	cmp	r3, #0
   16cbc:	d014      	beq.n	16ce8 <instance_subscr+0xd8>
        mp_obj_t args[3] = {self_in, index, value};
   16cbe:	68fb      	ldr	r3, [r7, #12]
   16cc0:	617b      	str	r3, [r7, #20]
   16cc2:	68bb      	ldr	r3, [r7, #8]
   16cc4:	61bb      	str	r3, [r7, #24]
   16cc6:	687b      	ldr	r3, [r7, #4]
   16cc8:	61fb      	str	r3, [r7, #28]
        // TODO probably need to call mp_convert_member_lookup, and use mp_call_method_n_kw
        mp_obj_t ret = mp_call_function_n_kw(member[0], meth_args, 0, args);
   16cca:	6b78      	ldr	r0, [r7, #52]	; 0x34
   16ccc:	f107 0314 	add.w	r3, r7, #20
   16cd0:	2200      	movs	r2, #0
   16cd2:	6c79      	ldr	r1, [r7, #68]	; 0x44
   16cd4:	f7f5 f9c6 	bl	c064 <mp_call_function_n_kw>
   16cd8:	63f8      	str	r0, [r7, #60]	; 0x3c
        if (value == MP_OBJ_SENTINEL) {
   16cda:	687b      	ldr	r3, [r7, #4]
   16cdc:	2b08      	cmp	r3, #8
   16cde:	d101      	bne.n	16ce4 <instance_subscr+0xd4>
            return ret;
   16ce0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   16ce2:	e002      	b.n	16cea <instance_subscr+0xda>
        } else {
            return mp_const_none;
   16ce4:	4b03      	ldr	r3, [pc, #12]	; (16cf4 <instance_subscr+0xe4>)
   16ce6:	e000      	b.n	16cea <instance_subscr+0xda>
        }
    } else {
        return MP_OBJ_NULL; // op not supported
   16ce8:	2300      	movs	r3, #0
    }
}
   16cea:	4618      	mov	r0, r3
   16cec:	3748      	adds	r7, #72	; 0x48
   16cee:	46bd      	mov	sp, r7
   16cf0:	bd80      	pop	{r7, pc}
   16cf2:	bf00      	nop
   16cf4:	0002345c 	.word	0x0002345c

00016cf8 <mp_obj_instance_get_call>:

STATIC mp_obj_t mp_obj_instance_get_call(mp_obj_t self_in, mp_obj_t *member) {
   16cf8:	b580      	push	{r7, lr}
   16cfa:	b088      	sub	sp, #32
   16cfc:	af00      	add	r7, sp, #0
   16cfe:	6078      	str	r0, [r7, #4]
   16d00:	6039      	str	r1, [r7, #0]
    mp_obj_instance_t *self = MP_OBJ_TO_PTR(self_in);
   16d02:	687b      	ldr	r3, [r7, #4]
   16d04:	61fb      	str	r3, [r7, #28]
    struct class_lookup_data lookup = {
   16d06:	69fb      	ldr	r3, [r7, #28]
   16d08:	60bb      	str	r3, [r7, #8]
   16d0a:	2305      	movs	r3, #5
   16d0c:	60fb      	str	r3, [r7, #12]
   16d0e:	2310      	movs	r3, #16
   16d10:	613b      	str	r3, [r7, #16]
   16d12:	683b      	ldr	r3, [r7, #0]
   16d14:	617b      	str	r3, [r7, #20]
   16d16:	2300      	movs	r3, #0
   16d18:	763b      	strb	r3, [r7, #24]
        .attr = MP_QSTR___call__,
        .meth_offset = offsetof(mp_obj_type_t, call),
        .dest = member,
        .is_type = false,
    };
    mp_obj_class_lookup(&lookup, self->base.type);
   16d1a:	69fb      	ldr	r3, [r7, #28]
   16d1c:	681a      	ldr	r2, [r3, #0]
   16d1e:	f107 0308 	add.w	r3, r7, #8
   16d22:	4611      	mov	r1, r2
   16d24:	4618      	mov	r0, r3
   16d26:	f7ff fb59 	bl	163dc <mp_obj_class_lookup>
    return member[0];
   16d2a:	683b      	ldr	r3, [r7, #0]
   16d2c:	681b      	ldr	r3, [r3, #0]
}
   16d2e:	4618      	mov	r0, r3
   16d30:	3720      	adds	r7, #32
   16d32:	46bd      	mov	sp, r7
   16d34:	bd80      	pop	{r7, pc}
   16d36:	bf00      	nop

00016d38 <mp_obj_instance_is_callable>:

bool mp_obj_instance_is_callable(mp_obj_t self_in) {
   16d38:	b580      	push	{r7, lr}
   16d3a:	b084      	sub	sp, #16
   16d3c:	af00      	add	r7, sp, #0
   16d3e:	6078      	str	r0, [r7, #4]
    mp_obj_t member[2] = {MP_OBJ_NULL, MP_OBJ_NULL};
   16d40:	2300      	movs	r3, #0
   16d42:	60bb      	str	r3, [r7, #8]
   16d44:	2300      	movs	r3, #0
   16d46:	60fb      	str	r3, [r7, #12]
    return mp_obj_instance_get_call(self_in, member) != MP_OBJ_NULL;
   16d48:	f107 0308 	add.w	r3, r7, #8
   16d4c:	4619      	mov	r1, r3
   16d4e:	6878      	ldr	r0, [r7, #4]
   16d50:	f7ff ffd2 	bl	16cf8 <mp_obj_instance_get_call>
   16d54:	4603      	mov	r3, r0
   16d56:	2b00      	cmp	r3, #0
   16d58:	bf14      	ite	ne
   16d5a:	2301      	movne	r3, #1
   16d5c:	2300      	moveq	r3, #0
   16d5e:	b2db      	uxtb	r3, r3
}
   16d60:	4618      	mov	r0, r3
   16d62:	3710      	adds	r7, #16
   16d64:	46bd      	mov	sp, r7
   16d66:	bd80      	pop	{r7, pc}

00016d68 <mp_obj_instance_call>:

mp_obj_t mp_obj_instance_call(mp_obj_t self_in, size_t n_args, size_t n_kw, const mp_obj_t *args) {
   16d68:	b580      	push	{r7, lr}
   16d6a:	b08a      	sub	sp, #40	; 0x28
   16d6c:	af02      	add	r7, sp, #8
   16d6e:	60f8      	str	r0, [r7, #12]
   16d70:	60b9      	str	r1, [r7, #8]
   16d72:	607a      	str	r2, [r7, #4]
   16d74:	603b      	str	r3, [r7, #0]
    mp_obj_t member[2] = {MP_OBJ_NULL, MP_OBJ_NULL};
   16d76:	2300      	movs	r3, #0
   16d78:	613b      	str	r3, [r7, #16]
   16d7a:	2300      	movs	r3, #0
   16d7c:	617b      	str	r3, [r7, #20]
    mp_obj_t call = mp_obj_instance_get_call(self_in, member);
   16d7e:	f107 0310 	add.w	r3, r7, #16
   16d82:	4619      	mov	r1, r3
   16d84:	68f8      	ldr	r0, [r7, #12]
   16d86:	f7ff ffb7 	bl	16cf8 <mp_obj_instance_get_call>
   16d8a:	61f8      	str	r0, [r7, #28]
    if (call == MP_OBJ_NULL) {
   16d8c:	69fb      	ldr	r3, [r7, #28]
   16d8e:	2b00      	cmp	r3, #0
   16d90:	d102      	bne.n	16d98 <mp_obj_instance_call+0x30>
        if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
            mp_raise_TypeError("object not callable");
   16d92:	480f      	ldr	r0, [pc, #60]	; (16dd0 <mp_obj_instance_call+0x68>)
   16d94:	f7f6 fa2e 	bl	d1f4 <mp_raise_TypeError>
        } else {
            nlr_raise(mp_obj_new_exception_msg_varg(&mp_type_TypeError,
                "'%s' object is not callable", mp_obj_get_type_str(self_in)));
        }
    }
    mp_obj_instance_t *self = MP_OBJ_TO_PTR(self_in);
   16d98:	68fb      	ldr	r3, [r7, #12]
   16d9a:	61bb      	str	r3, [r7, #24]
    if (call == MP_OBJ_SENTINEL) {
   16d9c:	69fb      	ldr	r3, [r7, #28]
   16d9e:	2b08      	cmp	r3, #8
   16da0:	d108      	bne.n	16db4 <mp_obj_instance_call+0x4c>
        return mp_call_function_n_kw(self->subobj[0], n_args, n_kw, args);
   16da2:	69bb      	ldr	r3, [r7, #24]
   16da4:	6918      	ldr	r0, [r3, #16]
   16da6:	683b      	ldr	r3, [r7, #0]
   16da8:	687a      	ldr	r2, [r7, #4]
   16daa:	68b9      	ldr	r1, [r7, #8]
   16dac:	f7f5 f95a 	bl	c064 <mp_call_function_n_kw>
   16db0:	4603      	mov	r3, r0
   16db2:	e008      	b.n	16dc6 <mp_obj_instance_call+0x5e>
    }

    return mp_call_method_self_n_kw(member[0], member[1], n_args, n_kw, args);
   16db4:	6938      	ldr	r0, [r7, #16]
   16db6:	6979      	ldr	r1, [r7, #20]
   16db8:	683b      	ldr	r3, [r7, #0]
   16dba:	9300      	str	r3, [sp, #0]
   16dbc:	687b      	ldr	r3, [r7, #4]
   16dbe:	68ba      	ldr	r2, [r7, #8]
   16dc0:	f7f7 fb40 	bl	e444 <mp_call_method_self_n_kw>
   16dc4:	4603      	mov	r3, r0
}
   16dc6:	4618      	mov	r0, r3
   16dc8:	3720      	adds	r7, #32
   16dca:	46bd      	mov	sp, r7
   16dcc:	bd80      	pop	{r7, pc}
   16dce:	bf00      	nop
   16dd0:	00023fd8 	.word	0x00023fd8

00016dd4 <instance_getiter>:

STATIC mp_obj_t instance_getiter(mp_obj_t self_in, mp_obj_iter_buf_t *iter_buf) {
   16dd4:	b580      	push	{r7, lr}
   16dd6:	b08c      	sub	sp, #48	; 0x30
   16dd8:	af00      	add	r7, sp, #0
   16dda:	6078      	str	r0, [r7, #4]
   16ddc:	6039      	str	r1, [r7, #0]
    mp_obj_instance_t *self = MP_OBJ_TO_PTR(self_in);
   16dde:	687b      	ldr	r3, [r7, #4]
   16de0:	62fb      	str	r3, [r7, #44]	; 0x2c
    mp_obj_t member[2] = {MP_OBJ_NULL};
   16de2:	f107 0320 	add.w	r3, r7, #32
   16de6:	2200      	movs	r2, #0
   16de8:	601a      	str	r2, [r3, #0]
   16dea:	605a      	str	r2, [r3, #4]
    struct class_lookup_data lookup = {
   16dec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   16dee:	60fb      	str	r3, [r7, #12]
   16df0:	2316      	movs	r3, #22
   16df2:	613b      	str	r3, [r7, #16]
   16df4:	2324      	movs	r3, #36	; 0x24
   16df6:	617b      	str	r3, [r7, #20]
   16df8:	f107 0320 	add.w	r3, r7, #32
   16dfc:	61bb      	str	r3, [r7, #24]
   16dfe:	2300      	movs	r3, #0
   16e00:	773b      	strb	r3, [r7, #28]
        .attr = MP_QSTR___iter__,
        .meth_offset = offsetof(mp_obj_type_t, getiter),
        .dest = member,
        .is_type = false,
    };
    mp_obj_class_lookup(&lookup, self->base.type);
   16e02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   16e04:	681a      	ldr	r2, [r3, #0]
   16e06:	f107 030c 	add.w	r3, r7, #12
   16e0a:	4611      	mov	r1, r2
   16e0c:	4618      	mov	r0, r3
   16e0e:	f7ff fae5 	bl	163dc <mp_obj_class_lookup>
    if (member[0] == MP_OBJ_NULL) {
   16e12:	6a3b      	ldr	r3, [r7, #32]
   16e14:	2b00      	cmp	r3, #0
   16e16:	d101      	bne.n	16e1c <instance_getiter+0x48>
        return MP_OBJ_NULL;
   16e18:	2300      	movs	r3, #0
   16e1a:	e019      	b.n	16e50 <instance_getiter+0x7c>
    } else if (member[0] == MP_OBJ_SENTINEL) {
   16e1c:	6a3b      	ldr	r3, [r7, #32]
   16e1e:	2b08      	cmp	r3, #8
   16e20:	d10e      	bne.n	16e40 <instance_getiter+0x6c>
        mp_obj_type_t *type = mp_obj_get_type(self->subobj[0]);
   16e22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   16e24:	691b      	ldr	r3, [r3, #16]
   16e26:	4618      	mov	r0, r3
   16e28:	f7f6 fe44 	bl	dab4 <mp_obj_get_type>
   16e2c:	62b8      	str	r0, [r7, #40]	; 0x28
        return type->getiter(self->subobj[0], iter_buf);
   16e2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   16e30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   16e32:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   16e34:	6912      	ldr	r2, [r2, #16]
   16e36:	6839      	ldr	r1, [r7, #0]
   16e38:	4610      	mov	r0, r2
   16e3a:	4798      	blx	r3
   16e3c:	4603      	mov	r3, r0
   16e3e:	e007      	b.n	16e50 <instance_getiter+0x7c>
    } else {
        return mp_call_method_n_kw(0, 0, member);
   16e40:	f107 0320 	add.w	r3, r7, #32
   16e44:	461a      	mov	r2, r3
   16e46:	2100      	movs	r1, #0
   16e48:	2000      	movs	r0, #0
   16e4a:	f7f5 f92d 	bl	c0a8 <mp_call_method_n_kw>
   16e4e:	4603      	mov	r3, r0
    }
}
   16e50:	4618      	mov	r0, r3
   16e52:	3730      	adds	r7, #48	; 0x30
   16e54:	46bd      	mov	sp, r7
   16e56:	bd80      	pop	{r7, pc}

00016e58 <instance_get_buffer>:

STATIC mp_int_t instance_get_buffer(mp_obj_t self_in, mp_buffer_info_t *bufinfo, mp_uint_t flags) {
   16e58:	b580      	push	{r7, lr}
   16e5a:	b08e      	sub	sp, #56	; 0x38
   16e5c:	af00      	add	r7, sp, #0
   16e5e:	60f8      	str	r0, [r7, #12]
   16e60:	60b9      	str	r1, [r7, #8]
   16e62:	607a      	str	r2, [r7, #4]
    mp_obj_instance_t *self = MP_OBJ_TO_PTR(self_in);
   16e64:	68fb      	ldr	r3, [r7, #12]
   16e66:	637b      	str	r3, [r7, #52]	; 0x34
    mp_obj_t member[2] = {MP_OBJ_NULL};
   16e68:	f107 0328 	add.w	r3, r7, #40	; 0x28
   16e6c:	2200      	movs	r2, #0
   16e6e:	601a      	str	r2, [r3, #0]
   16e70:	605a      	str	r2, [r3, #4]
    struct class_lookup_data lookup = {
   16e72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   16e74:	617b      	str	r3, [r7, #20]
   16e76:	2301      	movs	r3, #1
   16e78:	61bb      	str	r3, [r7, #24]
   16e7a:	232c      	movs	r3, #44	; 0x2c
   16e7c:	61fb      	str	r3, [r7, #28]
   16e7e:	f107 0328 	add.w	r3, r7, #40	; 0x28
   16e82:	623b      	str	r3, [r7, #32]
   16e84:	2300      	movs	r3, #0
   16e86:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
        .attr = MP_QSTR_, // don't actually look for a method
        .meth_offset = offsetof(mp_obj_type_t, buffer_p.get_buffer),
        .dest = member,
        .is_type = false,
    };
    mp_obj_class_lookup(&lookup, self->base.type);
   16e8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   16e8c:	681a      	ldr	r2, [r3, #0]
   16e8e:	f107 0314 	add.w	r3, r7, #20
   16e92:	4611      	mov	r1, r2
   16e94:	4618      	mov	r0, r3
   16e96:	f7ff faa1 	bl	163dc <mp_obj_class_lookup>
    if (member[0] == MP_OBJ_SENTINEL) {
   16e9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   16e9c:	2b08      	cmp	r3, #8
   16e9e:	d10e      	bne.n	16ebe <instance_get_buffer+0x66>
        mp_obj_type_t *type = mp_obj_get_type(self->subobj[0]);
   16ea0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   16ea2:	691b      	ldr	r3, [r3, #16]
   16ea4:	4618      	mov	r0, r3
   16ea6:	f7f6 fe05 	bl	dab4 <mp_obj_get_type>
   16eaa:	6338      	str	r0, [r7, #48]	; 0x30
        return type->buffer_p.get_buffer(self->subobj[0], bufinfo, flags);
   16eac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   16eae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   16eb0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   16eb2:	6910      	ldr	r0, [r2, #16]
   16eb4:	687a      	ldr	r2, [r7, #4]
   16eb6:	68b9      	ldr	r1, [r7, #8]
   16eb8:	4798      	blx	r3
   16eba:	4603      	mov	r3, r0
   16ebc:	e000      	b.n	16ec0 <instance_get_buffer+0x68>
    } else {
        return 1; // object does not support buffer protocol
   16ebe:	2301      	movs	r3, #1
    }
}
   16ec0:	4618      	mov	r0, r3
   16ec2:	3738      	adds	r7, #56	; 0x38
   16ec4:	46bd      	mov	sp, r7
   16ec6:	bd80      	pop	{r7, pc}

00016ec8 <type_print>:
// type object
//  - the struct is mp_obj_type_t and is defined in obj.h so const types can be made
//  - there is a constant mp_obj_type_t (called mp_type_type) for the 'type' object
//  - creating a new class (a new type) creates a new mp_obj_type_t

STATIC void type_print(const mp_print_t *print, mp_obj_t self_in, mp_print_kind_t kind) {
   16ec8:	b580      	push	{r7, lr}
   16eca:	b086      	sub	sp, #24
   16ecc:	af00      	add	r7, sp, #0
   16ece:	60f8      	str	r0, [r7, #12]
   16ed0:	60b9      	str	r1, [r7, #8]
   16ed2:	607a      	str	r2, [r7, #4]
    (void)kind;
    mp_obj_type_t *self = MP_OBJ_TO_PTR(self_in);
   16ed4:	68bb      	ldr	r3, [r7, #8]
   16ed6:	617b      	str	r3, [r7, #20]
    mp_printf(print, "<class '%q'>", self->name);
   16ed8:	697b      	ldr	r3, [r7, #20]
   16eda:	685b      	ldr	r3, [r3, #4]
   16edc:	461a      	mov	r2, r3
   16ede:	4904      	ldr	r1, [pc, #16]	; (16ef0 <type_print+0x28>)
   16ee0:	68f8      	ldr	r0, [r7, #12]
   16ee2:	f7eb f89b 	bl	201c <mp_printf>
}
   16ee6:	bf00      	nop
   16ee8:	3718      	adds	r7, #24
   16eea:	46bd      	mov	sp, r7
   16eec:	bd80      	pop	{r7, pc}
   16eee:	bf00      	nop
   16ef0:	00023fec 	.word	0x00023fec

00016ef4 <type_make_new>:

STATIC mp_obj_t type_make_new(const mp_obj_type_t *type_in, size_t n_args, size_t n_kw, const mp_obj_t *args) {
   16ef4:	b580      	push	{r7, lr}
   16ef6:	b086      	sub	sp, #24
   16ef8:	af02      	add	r7, sp, #8
   16efa:	60f8      	str	r0, [r7, #12]
   16efc:	60b9      	str	r1, [r7, #8]
   16efe:	607a      	str	r2, [r7, #4]
   16f00:	603b      	str	r3, [r7, #0]
    (void)type_in;

    mp_arg_check_num(n_args, n_kw, 1, 3, false);
   16f02:	2300      	movs	r3, #0
   16f04:	9300      	str	r3, [sp, #0]
   16f06:	2303      	movs	r3, #3
   16f08:	2201      	movs	r2, #1
   16f0a:	6879      	ldr	r1, [r7, #4]
   16f0c:	68b8      	ldr	r0, [r7, #8]
   16f0e:	f7f6 f9dd 	bl	d2cc <mp_arg_check_num>

    switch (n_args) {
   16f12:	68bb      	ldr	r3, [r7, #8]
   16f14:	2b01      	cmp	r3, #1
   16f16:	d002      	beq.n	16f1e <type_make_new+0x2a>
   16f18:	2b03      	cmp	r3, #3
   16f1a:	d007      	beq.n	16f2c <type_make_new+0x38>
   16f1c:	e016      	b.n	16f4c <type_make_new+0x58>
        case 1:
            return MP_OBJ_FROM_PTR(mp_obj_get_type(args[0]));
   16f1e:	683b      	ldr	r3, [r7, #0]
   16f20:	681b      	ldr	r3, [r3, #0]
   16f22:	4618      	mov	r0, r3
   16f24:	f7f6 fdc6 	bl	dab4 <mp_obj_get_type>
   16f28:	4603      	mov	r3, r0
   16f2a:	e012      	b.n	16f52 <type_make_new+0x5e>

        case 3:
            // args[0] = name
            // args[1] = bases tuple
            // args[2] = locals dict
            return mp_obj_new_type(mp_obj_str_get_qstr(args[0]), args[1], args[2]);
   16f2c:	683b      	ldr	r3, [r7, #0]
   16f2e:	681b      	ldr	r3, [r3, #0]
   16f30:	4618      	mov	r0, r3
   16f32:	f7fe fc91 	bl	15858 <mp_obj_str_get_qstr>
   16f36:	683b      	ldr	r3, [r7, #0]
   16f38:	3304      	adds	r3, #4
   16f3a:	6819      	ldr	r1, [r3, #0]
   16f3c:	683b      	ldr	r3, [r7, #0]
   16f3e:	3308      	adds	r3, #8
   16f40:	681b      	ldr	r3, [r3, #0]
   16f42:	461a      	mov	r2, r3
   16f44:	f000 f8b4 	bl	170b0 <mp_obj_new_type>
   16f48:	4603      	mov	r3, r0
   16f4a:	e002      	b.n	16f52 <type_make_new+0x5e>

        default:
            mp_raise_TypeError("type takes 1 or 3 arguments");
   16f4c:	4803      	ldr	r0, [pc, #12]	; (16f5c <type_make_new+0x68>)
   16f4e:	f7f6 f951 	bl	d1f4 <mp_raise_TypeError>
    }
}
   16f52:	4618      	mov	r0, r3
   16f54:	3710      	adds	r7, #16
   16f56:	46bd      	mov	sp, r7
   16f58:	bd80      	pop	{r7, pc}
   16f5a:	bf00      	nop
   16f5c:	00023ffc 	.word	0x00023ffc

00016f60 <type_call>:

STATIC mp_obj_t type_call(mp_obj_t self_in, size_t n_args, size_t n_kw, const mp_obj_t *args) {
   16f60:	b590      	push	{r4, r7, lr}
   16f62:	b087      	sub	sp, #28
   16f64:	af00      	add	r7, sp, #0
   16f66:	60f8      	str	r0, [r7, #12]
   16f68:	60b9      	str	r1, [r7, #8]
   16f6a:	607a      	str	r2, [r7, #4]
   16f6c:	603b      	str	r3, [r7, #0]
    // instantiate an instance of a class

    mp_obj_type_t *self = MP_OBJ_TO_PTR(self_in);
   16f6e:	68fb      	ldr	r3, [r7, #12]
   16f70:	617b      	str	r3, [r7, #20]

    if (self->make_new == NULL) {
   16f72:	697b      	ldr	r3, [r7, #20]
   16f74:	68db      	ldr	r3, [r3, #12]
   16f76:	2b00      	cmp	r3, #0
   16f78:	d102      	bne.n	16f80 <type_call+0x20>
        if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
            mp_raise_TypeError("cannot create instance");
   16f7a:	4808      	ldr	r0, [pc, #32]	; (16f9c <type_call+0x3c>)
   16f7c:	f7f6 f93a 	bl	d1f4 <mp_raise_TypeError>
                "cannot create '%q' instances", self->name));
        }
    }

    // make new instance
    mp_obj_t o = self->make_new(self, n_args, n_kw, args);
   16f80:	697b      	ldr	r3, [r7, #20]
   16f82:	68dc      	ldr	r4, [r3, #12]
   16f84:	683b      	ldr	r3, [r7, #0]
   16f86:	687a      	ldr	r2, [r7, #4]
   16f88:	68b9      	ldr	r1, [r7, #8]
   16f8a:	6978      	ldr	r0, [r7, #20]
   16f8c:	47a0      	blx	r4
   16f8e:	6138      	str	r0, [r7, #16]

    // return new instance
    return o;
   16f90:	693b      	ldr	r3, [r7, #16]
}
   16f92:	4618      	mov	r0, r3
   16f94:	371c      	adds	r7, #28
   16f96:	46bd      	mov	sp, r7
   16f98:	bd90      	pop	{r4, r7, pc}
   16f9a:	bf00      	nop
   16f9c:	00024018 	.word	0x00024018

00016fa0 <type_attr>:

STATIC void type_attr(mp_obj_t self_in, qstr attr, mp_obj_t *dest) {
   16fa0:	b580      	push	{r7, lr}
   16fa2:	b08e      	sub	sp, #56	; 0x38
   16fa4:	af00      	add	r7, sp, #0
   16fa6:	60f8      	str	r0, [r7, #12]
   16fa8:	60b9      	str	r1, [r7, #8]
   16faa:	607a      	str	r2, [r7, #4]
    assert(MP_OBJ_IS_TYPE(self_in, &mp_type_type));
   16fac:	68f8      	ldr	r0, [r7, #12]
   16fae:	f7ff f933 	bl	16218 <MP_OBJ_IS_OBJ>
   16fb2:	4603      	mov	r3, r0
   16fb4:	f083 0301 	eor.w	r3, r3, #1
   16fb8:	b2db      	uxtb	r3, r3
   16fba:	2b00      	cmp	r3, #0
   16fbc:	d104      	bne.n	16fc8 <type_attr+0x28>
   16fbe:	68fb      	ldr	r3, [r7, #12]
   16fc0:	681b      	ldr	r3, [r3, #0]
   16fc2:	4a35      	ldr	r2, [pc, #212]	; (17098 <type_attr+0xf8>)
   16fc4:	4293      	cmp	r3, r2
   16fc6:	d006      	beq.n	16fd6 <type_attr+0x36>
   16fc8:	4b34      	ldr	r3, [pc, #208]	; (1709c <type_attr+0xfc>)
   16fca:	4a35      	ldr	r2, [pc, #212]	; (170a0 <type_attr+0x100>)
   16fcc:	f240 31b7 	movw	r1, #951	; 0x3b7
   16fd0:	4834      	ldr	r0, [pc, #208]	; (170a4 <type_attr+0x104>)
   16fd2:	f004 fb7d 	bl	1b6d0 <__assert_func>
    mp_obj_type_t *self = MP_OBJ_TO_PTR(self_in);
   16fd6:	68fb      	ldr	r3, [r7, #12]
   16fd8:	637b      	str	r3, [r7, #52]	; 0x34

    if (dest[0] == MP_OBJ_NULL) {
   16fda:	687b      	ldr	r3, [r7, #4]
   16fdc:	681b      	ldr	r3, [r3, #0]
   16fde:	2b00      	cmp	r3, #0
   16fe0:	d111      	bne.n	17006 <type_attr+0x66>
        if (attr == MP_QSTR___name__) {
            dest[0] = MP_OBJ_NEW_QSTR(self->name);
            return;
        }
        #endif
        struct class_lookup_data lookup = {
   16fe2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   16fe4:	617b      	str	r3, [r7, #20]
   16fe6:	68bb      	ldr	r3, [r7, #8]
   16fe8:	61bb      	str	r3, [r7, #24]
   16fea:	2300      	movs	r3, #0
   16fec:	61fb      	str	r3, [r7, #28]
   16fee:	687b      	ldr	r3, [r7, #4]
   16ff0:	623b      	str	r3, [r7, #32]
   16ff2:	2301      	movs	r3, #1
   16ff4:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
            .attr = attr,
            .meth_offset = 0,
            .dest = dest,
            .is_type = true,
        };
        mp_obj_class_lookup(&lookup, self);
   16ff8:	f107 0314 	add.w	r3, r7, #20
   16ffc:	6b79      	ldr	r1, [r7, #52]	; 0x34
   16ffe:	4618      	mov	r0, r3
   17000:	f7ff f9ec 	bl	163dc <mp_obj_class_lookup>
   17004:	e044      	b.n	17090 <type_attr+0xf0>
    } else {
        // delete/store attribute

        // TODO CPython allows STORE_ATTR to a class, but is this the correct implementation?

        if (self->locals_dict != NULL) {
   17006:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   17008:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1700a:	2b00      	cmp	r3, #0
   1700c:	d040      	beq.n	17090 <type_attr+0xf0>
            assert(self->locals_dict->base.type == &mp_type_dict); // MicroPython restriction, for now
   1700e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   17010:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   17012:	681b      	ldr	r3, [r3, #0]
   17014:	4a24      	ldr	r2, [pc, #144]	; (170a8 <type_attr+0x108>)
   17016:	4293      	cmp	r3, r2
   17018:	d006      	beq.n	17028 <type_attr+0x88>
   1701a:	4b24      	ldr	r3, [pc, #144]	; (170ac <type_attr+0x10c>)
   1701c:	4a20      	ldr	r2, [pc, #128]	; (170a0 <type_attr+0x100>)
   1701e:	f44f 7174 	mov.w	r1, #976	; 0x3d0
   17022:	4820      	ldr	r0, [pc, #128]	; (170a4 <type_attr+0x104>)
   17024:	f004 fb54 	bl	1b6d0 <__assert_func>
            mp_map_t *locals_map = &self->locals_dict->map;
   17028:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1702a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1702c:	3304      	adds	r3, #4
   1702e:	633b      	str	r3, [r7, #48]	; 0x30
            if (locals_map->is_fixed) {
   17030:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   17032:	781b      	ldrb	r3, [r3, #0]
   17034:	f003 0302 	and.w	r3, r3, #2
   17038:	b2db      	uxtb	r3, r3
   1703a:	2b00      	cmp	r3, #0
   1703c:	d127      	bne.n	1708e <type_attr+0xee>
                // can't apply delete/store to a fixed map
                return;
            }
            if (dest[1] == MP_OBJ_NULL) {
   1703e:	687b      	ldr	r3, [r7, #4]
   17040:	3304      	adds	r3, #4
   17042:	681b      	ldr	r3, [r3, #0]
   17044:	2b00      	cmp	r3, #0
   17046:	d110      	bne.n	1706a <type_attr+0xca>
                // delete attribute
                mp_map_elem_t *elem = mp_map_lookup(locals_map, MP_OBJ_NEW_QSTR(attr), MP_MAP_LOOKUP_REMOVE_IF_FOUND);
   17048:	68bb      	ldr	r3, [r7, #8]
   1704a:	009b      	lsls	r3, r3, #2
   1704c:	f043 0302 	orr.w	r3, r3, #2
   17050:	2202      	movs	r2, #2
   17052:	4619      	mov	r1, r3
   17054:	6b38      	ldr	r0, [r7, #48]	; 0x30
   17056:	f7f6 fb83 	bl	d760 <mp_map_lookup>
   1705a:	62f8      	str	r0, [r7, #44]	; 0x2c
                if (elem != NULL) {
   1705c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1705e:	2b00      	cmp	r3, #0
   17060:	d016      	beq.n	17090 <type_attr+0xf0>
                    dest[0] = MP_OBJ_NULL; // indicate success
   17062:	687b      	ldr	r3, [r7, #4]
   17064:	2200      	movs	r2, #0
   17066:	601a      	str	r2, [r3, #0]
   17068:	e012      	b.n	17090 <type_attr+0xf0>
                }
            } else {
                // store attribute
                mp_map_elem_t *elem = mp_map_lookup(locals_map, MP_OBJ_NEW_QSTR(attr), MP_MAP_LOOKUP_ADD_IF_NOT_FOUND);
   1706a:	68bb      	ldr	r3, [r7, #8]
   1706c:	009b      	lsls	r3, r3, #2
   1706e:	f043 0302 	orr.w	r3, r3, #2
   17072:	2201      	movs	r2, #1
   17074:	4619      	mov	r1, r3
   17076:	6b38      	ldr	r0, [r7, #48]	; 0x30
   17078:	f7f6 fb72 	bl	d760 <mp_map_lookup>
   1707c:	62b8      	str	r0, [r7, #40]	; 0x28
                elem->value = dest[1];
   1707e:	687b      	ldr	r3, [r7, #4]
   17080:	685a      	ldr	r2, [r3, #4]
   17082:	6abb      	ldr	r3, [r7, #40]	; 0x28
   17084:	605a      	str	r2, [r3, #4]
                dest[0] = MP_OBJ_NULL; // indicate success
   17086:	687b      	ldr	r3, [r7, #4]
   17088:	2200      	movs	r2, #0
   1708a:	601a      	str	r2, [r3, #0]
   1708c:	e000      	b.n	17090 <type_attr+0xf0>
                return;
   1708e:	bf00      	nop
            }
        }
    }
}
   17090:	3738      	adds	r7, #56	; 0x38
   17092:	46bd      	mov	sp, r7
   17094:	bd80      	pop	{r7, pc}
   17096:	bf00      	nop
   17098:	00024088 	.word	0x00024088
   1709c:	00024030 	.word	0x00024030
   170a0:	00024410 	.word	0x00024410
   170a4:	00023e78 	.word	0x00023e78
   170a8:	0002201c 	.word	0x0002201c
   170ac:	00024058 	.word	0x00024058

000170b0 <mp_obj_new_type>:
    .call = type_call,
    .unary_op = mp_generic_unary_op,
    .attr = type_attr,
};

mp_obj_t mp_obj_new_type(qstr name, mp_obj_t bases_tuple, mp_obj_t locals_dict) {
   170b0:	b580      	push	{r7, lr}
   170b2:	b08e      	sub	sp, #56	; 0x38
   170b4:	af00      	add	r7, sp, #0
   170b6:	60f8      	str	r0, [r7, #12]
   170b8:	60b9      	str	r1, [r7, #8]
   170ba:	607a      	str	r2, [r7, #4]
    assert(MP_OBJ_IS_TYPE(bases_tuple, &mp_type_tuple)); // MicroPython restriction, for now
   170bc:	68b8      	ldr	r0, [r7, #8]
   170be:	f7ff f8ab 	bl	16218 <MP_OBJ_IS_OBJ>
   170c2:	4603      	mov	r3, r0
   170c4:	f083 0301 	eor.w	r3, r3, #1
   170c8:	b2db      	uxtb	r3, r3
   170ca:	2b00      	cmp	r3, #0
   170cc:	d104      	bne.n	170d8 <mp_obj_new_type+0x28>
   170ce:	68bb      	ldr	r3, [r7, #8]
   170d0:	681b      	ldr	r3, [r3, #0]
   170d2:	4a68      	ldr	r2, [pc, #416]	; (17274 <mp_obj_new_type+0x1c4>)
   170d4:	4293      	cmp	r3, r2
   170d6:	d006      	beq.n	170e6 <mp_obj_new_type+0x36>
   170d8:	4b67      	ldr	r3, [pc, #412]	; (17278 <mp_obj_new_type+0x1c8>)
   170da:	4a68      	ldr	r2, [pc, #416]	; (1727c <mp_obj_new_type+0x1cc>)
   170dc:	f240 31f1 	movw	r1, #1009	; 0x3f1
   170e0:	4867      	ldr	r0, [pc, #412]	; (17280 <mp_obj_new_type+0x1d0>)
   170e2:	f004 faf5 	bl	1b6d0 <__assert_func>
    assert(MP_OBJ_IS_TYPE(locals_dict, &mp_type_dict)); // MicroPython restriction, for now
   170e6:	6878      	ldr	r0, [r7, #4]
   170e8:	f7ff f896 	bl	16218 <MP_OBJ_IS_OBJ>
   170ec:	4603      	mov	r3, r0
   170ee:	f083 0301 	eor.w	r3, r3, #1
   170f2:	b2db      	uxtb	r3, r3
   170f4:	2b00      	cmp	r3, #0
   170f6:	d104      	bne.n	17102 <mp_obj_new_type+0x52>
   170f8:	687b      	ldr	r3, [r7, #4]
   170fa:	681b      	ldr	r3, [r3, #0]
   170fc:	4a61      	ldr	r2, [pc, #388]	; (17284 <mp_obj_new_type+0x1d4>)
   170fe:	4293      	cmp	r3, r2
   17100:	d006      	beq.n	17110 <mp_obj_new_type+0x60>
   17102:	4b61      	ldr	r3, [pc, #388]	; (17288 <mp_obj_new_type+0x1d8>)
   17104:	4a5d      	ldr	r2, [pc, #372]	; (1727c <mp_obj_new_type+0x1cc>)
   17106:	f240 31f2 	movw	r1, #1010	; 0x3f2
   1710a:	485d      	ldr	r0, [pc, #372]	; (17280 <mp_obj_new_type+0x1d0>)
   1710c:	f004 fae0 	bl	1b6d0 <__assert_func>
    // TODO might need to make a copy of locals_dict; at least that's how CPython does it

    // Basic validation of base classes
    size_t bases_len;
    mp_obj_t *bases_items;
    mp_obj_tuple_get(bases_tuple, &bases_len, &bases_items);
   17110:	f107 0218 	add.w	r2, r7, #24
   17114:	f107 031c 	add.w	r3, r7, #28
   17118:	4619      	mov	r1, r3
   1711a:	68b8      	ldr	r0, [r7, #8]
   1711c:	f7fe ffde 	bl	160dc <mp_obj_tuple_get>
    for (size_t i = 0; i < bases_len; i++) {
   17120:	2300      	movs	r3, #0
   17122:	637b      	str	r3, [r7, #52]	; 0x34
   17124:	e02d      	b.n	17182 <mp_obj_new_type+0xd2>
        assert(MP_OBJ_IS_TYPE(bases_items[i], &mp_type_type));
   17126:	69ba      	ldr	r2, [r7, #24]
   17128:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1712a:	009b      	lsls	r3, r3, #2
   1712c:	4413      	add	r3, r2
   1712e:	681b      	ldr	r3, [r3, #0]
   17130:	4618      	mov	r0, r3
   17132:	f7ff f871 	bl	16218 <MP_OBJ_IS_OBJ>
   17136:	4603      	mov	r3, r0
   17138:	f083 0301 	eor.w	r3, r3, #1
   1713c:	b2db      	uxtb	r3, r3
   1713e:	2b00      	cmp	r3, #0
   17140:	d108      	bne.n	17154 <mp_obj_new_type+0xa4>
   17142:	69ba      	ldr	r2, [r7, #24]
   17144:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   17146:	009b      	lsls	r3, r3, #2
   17148:	4413      	add	r3, r2
   1714a:	681b      	ldr	r3, [r3, #0]
   1714c:	681b      	ldr	r3, [r3, #0]
   1714e:	4a4f      	ldr	r2, [pc, #316]	; (1728c <mp_obj_new_type+0x1dc>)
   17150:	4293      	cmp	r3, r2
   17152:	d006      	beq.n	17162 <mp_obj_new_type+0xb2>
   17154:	4b4e      	ldr	r3, [pc, #312]	; (17290 <mp_obj_new_type+0x1e0>)
   17156:	4a49      	ldr	r2, [pc, #292]	; (1727c <mp_obj_new_type+0x1cc>)
   17158:	f240 31fb 	movw	r1, #1019	; 0x3fb
   1715c:	4848      	ldr	r0, [pc, #288]	; (17280 <mp_obj_new_type+0x1d0>)
   1715e:	f004 fab7 	bl	1b6d0 <__assert_func>
        mp_obj_type_t *t = MP_OBJ_TO_PTR(bases_items[i]);
   17162:	69ba      	ldr	r2, [r7, #24]
   17164:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   17166:	009b      	lsls	r3, r3, #2
   17168:	4413      	add	r3, r2
   1716a:	681b      	ldr	r3, [r3, #0]
   1716c:	633b      	str	r3, [r7, #48]	; 0x30
        // TODO: Verify with CPy, tested on function type
        if (t->make_new == NULL) {
   1716e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   17170:	68db      	ldr	r3, [r3, #12]
   17172:	2b00      	cmp	r3, #0
   17174:	d102      	bne.n	1717c <mp_obj_new_type+0xcc>
            if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
                mp_raise_TypeError("type is not an acceptable base type");
   17176:	4847      	ldr	r0, [pc, #284]	; (17294 <mp_obj_new_type+0x1e4>)
   17178:	f7f6 f83c 	bl	d1f4 <mp_raise_TypeError>
    for (size_t i = 0; i < bases_len; i++) {
   1717c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1717e:	3301      	adds	r3, #1
   17180:	637b      	str	r3, [r7, #52]	; 0x34
   17182:	69fb      	ldr	r3, [r7, #28]
   17184:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   17186:	429a      	cmp	r2, r3
   17188:	d3cd      	bcc.n	17126 <mp_obj_new_type+0x76>
                    "type '%q' is not an acceptable base type", t->name));
            }
        }
    }

    mp_obj_type_t *o = m_new0(mp_obj_type_t, 1);
   1718a:	203c      	movs	r0, #60	; 0x3c
   1718c:	f7e9 f904 	bl	398 <m_malloc0>
   17190:	62f8      	str	r0, [r7, #44]	; 0x2c
    o->base.type = &mp_type_type;
   17192:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   17194:	4a3d      	ldr	r2, [pc, #244]	; (1728c <mp_obj_new_type+0x1dc>)
   17196:	601a      	str	r2, [r3, #0]
    o->name = name;
   17198:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1719a:	68fa      	ldr	r2, [r7, #12]
   1719c:	605a      	str	r2, [r3, #4]
    o->print = instance_print;
   1719e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   171a0:	4a3d      	ldr	r2, [pc, #244]	; (17298 <mp_obj_new_type+0x1e8>)
   171a2:	609a      	str	r2, [r3, #8]
    o->make_new = mp_obj_instance_make_new;
   171a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   171a6:	4a3d      	ldr	r2, [pc, #244]	; (1729c <mp_obj_new_type+0x1ec>)
   171a8:	60da      	str	r2, [r3, #12]
    o->call = mp_obj_instance_call;
   171aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   171ac:	4a3c      	ldr	r2, [pc, #240]	; (172a0 <mp_obj_new_type+0x1f0>)
   171ae:	611a      	str	r2, [r3, #16]
    o->unary_op = instance_unary_op;
   171b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   171b2:	4a3c      	ldr	r2, [pc, #240]	; (172a4 <mp_obj_new_type+0x1f4>)
   171b4:	615a      	str	r2, [r3, #20]
    o->binary_op = instance_binary_op;
   171b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   171b8:	4a3b      	ldr	r2, [pc, #236]	; (172a8 <mp_obj_new_type+0x1f8>)
   171ba:	619a      	str	r2, [r3, #24]
    o->attr = mp_obj_instance_attr;
   171bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   171be:	4a3b      	ldr	r2, [pc, #236]	; (172ac <mp_obj_new_type+0x1fc>)
   171c0:	61da      	str	r2, [r3, #28]
    o->subscr = instance_subscr;
   171c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   171c4:	4a3a      	ldr	r2, [pc, #232]	; (172b0 <mp_obj_new_type+0x200>)
   171c6:	621a      	str	r2, [r3, #32]
    o->getiter = instance_getiter;
   171c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   171ca:	4a3a      	ldr	r2, [pc, #232]	; (172b4 <mp_obj_new_type+0x204>)
   171cc:	625a      	str	r2, [r3, #36]	; 0x24
    //o->iternext = ; not implemented
    o->buffer_p.get_buffer = instance_get_buffer;
   171ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   171d0:	4a39      	ldr	r2, [pc, #228]	; (172b8 <mp_obj_new_type+0x208>)
   171d2:	62da      	str	r2, [r3, #44]	; 0x2c

    if (bases_len > 0) {
   171d4:	69fb      	ldr	r3, [r7, #28]
   171d6:	2b00      	cmp	r3, #0
   171d8:	d00f      	beq.n	171fa <mp_obj_new_type+0x14a>
        // Inherit protocol from a base class. This allows to define an
        // abstract base class which would translate C-level protocol to
        // Python method calls, and any subclass inheriting from it will
        // support this feature.
        o->protocol = ((mp_obj_type_t*)MP_OBJ_TO_PTR(bases_items[0]))->protocol;
   171da:	69bb      	ldr	r3, [r7, #24]
   171dc:	681b      	ldr	r3, [r3, #0]
   171de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   171e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   171e2:	631a      	str	r2, [r3, #48]	; 0x30

        if (bases_len >= 2) {
   171e4:	69fb      	ldr	r3, [r7, #28]
   171e6:	2b01      	cmp	r3, #1
   171e8:	d903      	bls.n	171f2 <mp_obj_new_type+0x142>
            #if MICROPY_MULTIPLE_INHERITANCE
            o->parent = MP_OBJ_TO_PTR(bases_tuple);
   171ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   171ec:	68ba      	ldr	r2, [r7, #8]
   171ee:	635a      	str	r2, [r3, #52]	; 0x34
   171f0:	e003      	b.n	171fa <mp_obj_new_type+0x14a>
            #else
            mp_raise_NotImplementedError("multiple inheritance not supported");
            #endif
        } else {
            o->parent = MP_OBJ_TO_PTR(bases_items[0]);
   171f2:	69bb      	ldr	r3, [r7, #24]
   171f4:	681a      	ldr	r2, [r3, #0]
   171f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   171f8:	635a      	str	r2, [r3, #52]	; 0x34
        }
    }

    o->locals_dict = MP_OBJ_TO_PTR(locals_dict);
   171fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   171fc:	687a      	ldr	r2, [r7, #4]
   171fe:	639a      	str	r2, [r3, #56]	; 0x38

    const mp_obj_type_t *native_base;
    size_t num_native_bases = instance_count_native_bases(o, &native_base);
   17200:	f107 0314 	add.w	r3, r7, #20
   17204:	4619      	mov	r1, r3
   17206:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   17208:	f7ff f818 	bl	1623c <instance_count_native_bases>
   1720c:	4603      	mov	r3, r0
   1720e:	62bb      	str	r3, [r7, #40]	; 0x28
    if (num_native_bases > 1) {
   17210:	6abb      	ldr	r3, [r7, #40]	; 0x28
   17212:	2b01      	cmp	r3, #1
   17214:	d902      	bls.n	1721c <mp_obj_new_type+0x16c>
        mp_raise_TypeError("multiple bases have instance lay-out conflict");
   17216:	4829      	ldr	r0, [pc, #164]	; (172bc <mp_obj_new_type+0x20c>)
   17218:	f7f5 ffec 	bl	d1f4 <mp_raise_TypeError>
    }

    mp_map_t *locals_map = &o->locals_dict->map;
   1721c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1721e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   17220:	3304      	adds	r3, #4
   17222:	627b      	str	r3, [r7, #36]	; 0x24
    mp_map_elem_t *elem = mp_map_lookup(locals_map, MP_OBJ_NEW_QSTR(MP_QSTR___new__), MP_MAP_LOOKUP);
   17224:	2200      	movs	r2, #0
   17226:	2176      	movs	r1, #118	; 0x76
   17228:	6a78      	ldr	r0, [r7, #36]	; 0x24
   1722a:	f7f6 fa99 	bl	d760 <mp_map_lookup>
   1722e:	6238      	str	r0, [r7, #32]
    if (elem != NULL) {
   17230:	6a3b      	ldr	r3, [r7, #32]
   17232:	2b00      	cmp	r3, #0
   17234:	d018      	beq.n	17268 <mp_obj_new_type+0x1b8>
        // __new__ slot exists; check if it is a function
        if (MP_OBJ_IS_FUN(elem->value)) {
   17236:	6a3b      	ldr	r3, [r7, #32]
   17238:	685b      	ldr	r3, [r3, #4]
   1723a:	4618      	mov	r0, r3
   1723c:	f7fe ffec 	bl	16218 <MP_OBJ_IS_OBJ>
   17240:	4603      	mov	r3, r0
   17242:	2b00      	cmp	r3, #0
   17244:	d010      	beq.n	17268 <mp_obj_new_type+0x1b8>
   17246:	6a3b      	ldr	r3, [r7, #32]
   17248:	685b      	ldr	r3, [r3, #4]
   1724a:	681b      	ldr	r3, [r3, #0]
   1724c:	685b      	ldr	r3, [r3, #4]
   1724e:	f5b3 7f89 	cmp.w	r3, #274	; 0x112
   17252:	d109      	bne.n	17268 <mp_obj_new_type+0x1b8>
            // __new__ is a function, wrap it in a staticmethod decorator
            elem->value = static_class_method_make_new(&mp_type_staticmethod, 1, 0, &elem->value);
   17254:	6a3b      	ldr	r3, [r7, #32]
   17256:	3304      	adds	r3, #4
   17258:	2200      	movs	r2, #0
   1725a:	2101      	movs	r1, #1
   1725c:	4818      	ldr	r0, [pc, #96]	; (172c0 <mp_obj_new_type+0x210>)
   1725e:	f000 fa91 	bl	17784 <static_class_method_make_new>
   17262:	4602      	mov	r2, r0
   17264:	6a3b      	ldr	r3, [r7, #32]
   17266:	605a      	str	r2, [r3, #4]
        }
    }

    return MP_OBJ_FROM_PTR(o);
   17268:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
   1726a:	4618      	mov	r0, r3
   1726c:	3738      	adds	r7, #56	; 0x38
   1726e:	46bd      	mov	sp, r7
   17270:	bd80      	pop	{r7, pc}
   17272:	bf00      	nop
   17274:	00023d90 	.word	0x00023d90
   17278:	000240c4 	.word	0x000240c4
   1727c:	0002441c 	.word	0x0002441c
   17280:	00023e78 	.word	0x00023e78
   17284:	0002201c 	.word	0x0002201c
   17288:	000240f0 	.word	0x000240f0
   1728c:	00024088 	.word	0x00024088
   17290:	0002411c 	.word	0x0002411c
   17294:	0002414c 	.word	0x0002414c
   17298:	00016641 	.word	0x00016641
   1729c:	0001674d 	.word	0x0001674d
   172a0:	00016d69 	.word	0x00016d69
   172a4:	00016929 	.word	0x00016929
   172a8:	000169ed 	.word	0x000169ed
   172ac:	00016bcd 	.word	0x00016bcd
   172b0:	00016c11 	.word	0x00016c11
   172b4:	00016dd5 	.word	0x00016dd5
   172b8:	00016e59 	.word	0x00016e59
   172bc:	00024170 	.word	0x00024170
   172c0:	0002431c 	.word	0x0002431c

000172c4 <super_print>:
    mp_obj_base_t base;
    mp_obj_t type;
    mp_obj_t obj;
} mp_obj_super_t;

STATIC void super_print(const mp_print_t *print, mp_obj_t self_in, mp_print_kind_t kind) {
   172c4:	b580      	push	{r7, lr}
   172c6:	b086      	sub	sp, #24
   172c8:	af00      	add	r7, sp, #0
   172ca:	60f8      	str	r0, [r7, #12]
   172cc:	60b9      	str	r1, [r7, #8]
   172ce:	607a      	str	r2, [r7, #4]
    (void)kind;
    mp_obj_super_t *self = MP_OBJ_TO_PTR(self_in);
   172d0:	68bb      	ldr	r3, [r7, #8]
   172d2:	617b      	str	r3, [r7, #20]
    mp_print_str(print, "<super: ");
   172d4:	490e      	ldr	r1, [pc, #56]	; (17310 <super_print+0x4c>)
   172d6:	68f8      	ldr	r0, [r7, #12]
   172d8:	f7ea fb8c 	bl	19f4 <mp_print_str>
    mp_obj_print_helper(print, self->type, PRINT_STR);
   172dc:	697b      	ldr	r3, [r7, #20]
   172de:	685b      	ldr	r3, [r3, #4]
   172e0:	2200      	movs	r2, #0
   172e2:	4619      	mov	r1, r3
   172e4:	68f8      	ldr	r0, [r7, #12]
   172e6:	f7f6 fc17 	bl	db18 <mp_obj_print_helper>
    mp_print_str(print, ", ");
   172ea:	490a      	ldr	r1, [pc, #40]	; (17314 <super_print+0x50>)
   172ec:	68f8      	ldr	r0, [r7, #12]
   172ee:	f7ea fb81 	bl	19f4 <mp_print_str>
    mp_obj_print_helper(print, self->obj, PRINT_STR);
   172f2:	697b      	ldr	r3, [r7, #20]
   172f4:	689b      	ldr	r3, [r3, #8]
   172f6:	2200      	movs	r2, #0
   172f8:	4619      	mov	r1, r3
   172fa:	68f8      	ldr	r0, [r7, #12]
   172fc:	f7f6 fc0c 	bl	db18 <mp_obj_print_helper>
    mp_print_str(print, ">");
   17300:	4905      	ldr	r1, [pc, #20]	; (17318 <super_print+0x54>)
   17302:	68f8      	ldr	r0, [r7, #12]
   17304:	f7ea fb76 	bl	19f4 <mp_print_str>
}
   17308:	bf00      	nop
   1730a:	3718      	adds	r7, #24
   1730c:	46bd      	mov	sp, r7
   1730e:	bd80      	pop	{r7, pc}
   17310:	000241a0 	.word	0x000241a0
   17314:	000241ac 	.word	0x000241ac
   17318:	000241b0 	.word	0x000241b0

0001731c <super_make_new>:

STATIC mp_obj_t super_make_new(const mp_obj_type_t *type_in, size_t n_args, size_t n_kw, const mp_obj_t *args) {
   1731c:	b580      	push	{r7, lr}
   1731e:	b088      	sub	sp, #32
   17320:	af02      	add	r7, sp, #8
   17322:	60f8      	str	r0, [r7, #12]
   17324:	60b9      	str	r1, [r7, #8]
   17326:	607a      	str	r2, [r7, #4]
   17328:	603b      	str	r3, [r7, #0]
    (void)type_in;
    // 0 arguments are turned into 2 in the compiler
    // 1 argument is not yet implemented
    mp_arg_check_num(n_args, n_kw, 2, 2, false);
   1732a:	2300      	movs	r3, #0
   1732c:	9300      	str	r3, [sp, #0]
   1732e:	2302      	movs	r3, #2
   17330:	2202      	movs	r2, #2
   17332:	6879      	ldr	r1, [r7, #4]
   17334:	68b8      	ldr	r0, [r7, #8]
   17336:	f7f5 ffc9 	bl	d2cc <mp_arg_check_num>
    mp_obj_super_t *o = m_new_obj(mp_obj_super_t);
   1733a:	200c      	movs	r0, #12
   1733c:	f7e8 ffee 	bl	31c <m_malloc>
   17340:	6178      	str	r0, [r7, #20]
    *o = (mp_obj_super_t){{type_in}, args[0], args[1]};
   17342:	683b      	ldr	r3, [r7, #0]
   17344:	6819      	ldr	r1, [r3, #0]
   17346:	683b      	ldr	r3, [r7, #0]
   17348:	3304      	adds	r3, #4
   1734a:	681a      	ldr	r2, [r3, #0]
   1734c:	697b      	ldr	r3, [r7, #20]
   1734e:	68f8      	ldr	r0, [r7, #12]
   17350:	6018      	str	r0, [r3, #0]
   17352:	697b      	ldr	r3, [r7, #20]
   17354:	6059      	str	r1, [r3, #4]
   17356:	697b      	ldr	r3, [r7, #20]
   17358:	609a      	str	r2, [r3, #8]
    return MP_OBJ_FROM_PTR(o);
   1735a:	697b      	ldr	r3, [r7, #20]
}
   1735c:	4618      	mov	r0, r3
   1735e:	3718      	adds	r7, #24
   17360:	46bd      	mov	sp, r7
   17362:	bd80      	pop	{r7, pc}

00017364 <super_attr>:

STATIC void super_attr(mp_obj_t self_in, qstr attr, mp_obj_t *dest) {
   17364:	b580      	push	{r7, lr}
   17366:	b090      	sub	sp, #64	; 0x40
   17368:	af00      	add	r7, sp, #0
   1736a:	60f8      	str	r0, [r7, #12]
   1736c:	60b9      	str	r1, [r7, #8]
   1736e:	607a      	str	r2, [r7, #4]
    if (dest[0] != MP_OBJ_NULL) {
   17370:	687b      	ldr	r3, [r7, #4]
   17372:	681b      	ldr	r3, [r3, #0]
   17374:	2b00      	cmp	r3, #0
   17376:	f040 80c1 	bne.w	174fc <super_attr+0x198>
        // not load attribute
        return;
    }

    assert(MP_OBJ_IS_TYPE(self_in, &mp_type_super));
   1737a:	68f8      	ldr	r0, [r7, #12]
   1737c:	f7fe ff4c 	bl	16218 <MP_OBJ_IS_OBJ>
   17380:	4603      	mov	r3, r0
   17382:	f083 0301 	eor.w	r3, r3, #1
   17386:	b2db      	uxtb	r3, r3
   17388:	2b00      	cmp	r3, #0
   1738a:	d104      	bne.n	17396 <super_attr+0x32>
   1738c:	68fb      	ldr	r3, [r7, #12]
   1738e:	681b      	ldr	r3, [r3, #0]
   17390:	4a5d      	ldr	r2, [pc, #372]	; (17508 <super_attr+0x1a4>)
   17392:	4293      	cmp	r3, r2
   17394:	d006      	beq.n	173a4 <super_attr+0x40>
   17396:	4b5d      	ldr	r3, [pc, #372]	; (1750c <super_attr+0x1a8>)
   17398:	4a5d      	ldr	r2, [pc, #372]	; (17510 <super_attr+0x1ac>)
   1739a:	f44f 618c 	mov.w	r1, #1120	; 0x460
   1739e:	485d      	ldr	r0, [pc, #372]	; (17514 <super_attr+0x1b0>)
   173a0:	f004 f996 	bl	1b6d0 <__assert_func>
    mp_obj_super_t *self = MP_OBJ_TO_PTR(self_in);
   173a4:	68fb      	ldr	r3, [r7, #12]
   173a6:	63bb      	str	r3, [r7, #56]	; 0x38

    assert(MP_OBJ_IS_TYPE(self->type, &mp_type_type));
   173a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   173aa:	685b      	ldr	r3, [r3, #4]
   173ac:	4618      	mov	r0, r3
   173ae:	f7fe ff33 	bl	16218 <MP_OBJ_IS_OBJ>
   173b2:	4603      	mov	r3, r0
   173b4:	f083 0301 	eor.w	r3, r3, #1
   173b8:	b2db      	uxtb	r3, r3
   173ba:	2b00      	cmp	r3, #0
   173bc:	d105      	bne.n	173ca <super_attr+0x66>
   173be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   173c0:	685b      	ldr	r3, [r3, #4]
   173c2:	681b      	ldr	r3, [r3, #0]
   173c4:	4a54      	ldr	r2, [pc, #336]	; (17518 <super_attr+0x1b4>)
   173c6:	4293      	cmp	r3, r2
   173c8:	d006      	beq.n	173d8 <super_attr+0x74>
   173ca:	4b54      	ldr	r3, [pc, #336]	; (1751c <super_attr+0x1b8>)
   173cc:	4a50      	ldr	r2, [pc, #320]	; (17510 <super_attr+0x1ac>)
   173ce:	f240 4163 	movw	r1, #1123	; 0x463
   173d2:	4850      	ldr	r0, [pc, #320]	; (17514 <super_attr+0x1b0>)
   173d4:	f004 f97c 	bl	1b6d0 <__assert_func>

    mp_obj_type_t *type = MP_OBJ_TO_PTR(self->type);
   173d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   173da:	685b      	ldr	r3, [r3, #4]
   173dc:	637b      	str	r3, [r7, #52]	; 0x34

    struct class_lookup_data lookup = {
        .obj = MP_OBJ_TO_PTR(self->obj),
   173de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   173e0:	689b      	ldr	r3, [r3, #8]
    struct class_lookup_data lookup = {
   173e2:	617b      	str	r3, [r7, #20]
   173e4:	68bb      	ldr	r3, [r7, #8]
   173e6:	61bb      	str	r3, [r7, #24]
   173e8:	2300      	movs	r3, #0
   173ea:	61fb      	str	r3, [r7, #28]
   173ec:	687b      	ldr	r3, [r7, #4]
   173ee:	623b      	str	r3, [r7, #32]
   173f0:	2300      	movs	r3, #0
   173f2:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
        .dest = dest,
        .is_type = false,
    };

    // Allow a call super().__init__() to reach any native base classes
    if (attr == MP_QSTR___init__) {
   173f6:	68bb      	ldr	r3, [r7, #8]
   173f8:	2b14      	cmp	r3, #20
   173fa:	d101      	bne.n	17400 <super_attr+0x9c>
        lookup.meth_offset = offsetof(mp_obj_type_t, make_new);
   173fc:	230c      	movs	r3, #12
   173fe:	61fb      	str	r3, [r7, #28]
    }

    if (type->parent == NULL) {
   17400:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   17402:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   17404:	2b00      	cmp	r3, #0
   17406:	d05f      	beq.n	174c8 <super_attr+0x164>
        // no parents, do nothing
    #if MICROPY_MULTIPLE_INHERITANCE
    } else if (((mp_obj_base_t*)type->parent)->type == &mp_type_tuple) {
   17408:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1740a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   1740c:	681b      	ldr	r3, [r3, #0]
   1740e:	4a44      	ldr	r2, [pc, #272]	; (17520 <super_attr+0x1bc>)
   17410:	4293      	cmp	r3, r2
   17412:	d14a      	bne.n	174aa <super_attr+0x146>
        const mp_obj_tuple_t *parent_tuple = type->parent;
   17414:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   17416:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   17418:	633b      	str	r3, [r7, #48]	; 0x30
        size_t len = parent_tuple->len;
   1741a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1741c:	685b      	ldr	r3, [r3, #4]
   1741e:	62fb      	str	r3, [r7, #44]	; 0x2c
        const mp_obj_t *items = parent_tuple->items;
   17420:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   17422:	3308      	adds	r3, #8
   17424:	62bb      	str	r3, [r7, #40]	; 0x28
        for (size_t i = 0; i < len; i++) {
   17426:	2300      	movs	r3, #0
   17428:	63fb      	str	r3, [r7, #60]	; 0x3c
   1742a:	e039      	b.n	174a0 <super_attr+0x13c>
            assert(MP_OBJ_IS_TYPE(items[i], &mp_type_type));
   1742c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1742e:	009b      	lsls	r3, r3, #2
   17430:	6aba      	ldr	r2, [r7, #40]	; 0x28
   17432:	4413      	add	r3, r2
   17434:	681b      	ldr	r3, [r3, #0]
   17436:	4618      	mov	r0, r3
   17438:	f7fe feee 	bl	16218 <MP_OBJ_IS_OBJ>
   1743c:	4603      	mov	r3, r0
   1743e:	f083 0301 	eor.w	r3, r3, #1
   17442:	b2db      	uxtb	r3, r3
   17444:	2b00      	cmp	r3, #0
   17446:	d108      	bne.n	1745a <super_attr+0xf6>
   17448:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1744a:	009b      	lsls	r3, r3, #2
   1744c:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1744e:	4413      	add	r3, r2
   17450:	681b      	ldr	r3, [r3, #0]
   17452:	681b      	ldr	r3, [r3, #0]
   17454:	4a30      	ldr	r2, [pc, #192]	; (17518 <super_attr+0x1b4>)
   17456:	4293      	cmp	r3, r2
   17458:	d006      	beq.n	17468 <super_attr+0x104>
   1745a:	4b32      	ldr	r3, [pc, #200]	; (17524 <super_attr+0x1c0>)
   1745c:	4a2c      	ldr	r2, [pc, #176]	; (17510 <super_attr+0x1ac>)
   1745e:	f240 417c 	movw	r1, #1148	; 0x47c
   17462:	482c      	ldr	r0, [pc, #176]	; (17514 <super_attr+0x1b0>)
   17464:	f004 f934 	bl	1b6d0 <__assert_func>
            if (MP_OBJ_TO_PTR(items[i]) == &mp_type_object) {
   17468:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1746a:	009b      	lsls	r3, r3, #2
   1746c:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1746e:	4413      	add	r3, r2
   17470:	681b      	ldr	r3, [r3, #0]
   17472:	4a2d      	ldr	r2, [pc, #180]	; (17528 <super_attr+0x1c4>)
   17474:	4293      	cmp	r3, r2
   17476:	d00f      	beq.n	17498 <super_attr+0x134>
                // The "object" type will be searched at the end of this function,
                // and we don't want to lookup native methods in object.
                continue;
            }
            mp_obj_class_lookup(&lookup, (mp_obj_type_t*)MP_OBJ_TO_PTR(items[i]));
   17478:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1747a:	009b      	lsls	r3, r3, #2
   1747c:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1747e:	4413      	add	r3, r2
   17480:	681a      	ldr	r2, [r3, #0]
   17482:	f107 0314 	add.w	r3, r7, #20
   17486:	4611      	mov	r1, r2
   17488:	4618      	mov	r0, r3
   1748a:	f7fe ffa7 	bl	163dc <mp_obj_class_lookup>
            if (dest[0] != MP_OBJ_NULL) {
   1748e:	687b      	ldr	r3, [r7, #4]
   17490:	681b      	ldr	r3, [r3, #0]
   17492:	2b00      	cmp	r3, #0
   17494:	d117      	bne.n	174c6 <super_attr+0x162>
   17496:	e000      	b.n	1749a <super_attr+0x136>
                continue;
   17498:	bf00      	nop
        for (size_t i = 0; i < len; i++) {
   1749a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1749c:	3301      	adds	r3, #1
   1749e:	63fb      	str	r3, [r7, #60]	; 0x3c
   174a0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   174a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   174a4:	429a      	cmp	r2, r3
   174a6:	d3c1      	bcc.n	1742c <super_attr+0xc8>
   174a8:	e00e      	b.n	174c8 <super_attr+0x164>
                break;
            }
        }
    #endif
    } else if (type->parent != &mp_type_object) {
   174aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   174ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   174ae:	4a1e      	ldr	r2, [pc, #120]	; (17528 <super_attr+0x1c4>)
   174b0:	4293      	cmp	r3, r2
   174b2:	d009      	beq.n	174c8 <super_attr+0x164>
        mp_obj_class_lookup(&lookup, type->parent);
   174b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   174b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   174b8:	f107 0314 	add.w	r3, r7, #20
   174bc:	4611      	mov	r1, r2
   174be:	4618      	mov	r0, r3
   174c0:	f7fe ff8c 	bl	163dc <mp_obj_class_lookup>
   174c4:	e000      	b.n	174c8 <super_attr+0x164>
                break;
   174c6:	bf00      	nop
    }

    if (dest[0] != MP_OBJ_NULL) {
   174c8:	687b      	ldr	r3, [r7, #4]
   174ca:	681b      	ldr	r3, [r3, #0]
   174cc:	2b00      	cmp	r3, #0
   174ce:	d00c      	beq.n	174ea <super_attr+0x186>
        if (dest[0] == MP_OBJ_SENTINEL) {
   174d0:	687b      	ldr	r3, [r7, #4]
   174d2:	681b      	ldr	r3, [r3, #0]
   174d4:	2b08      	cmp	r3, #8
   174d6:	d113      	bne.n	17500 <super_attr+0x19c>
            // Looked up native __init__ so defer to it
            dest[0] = MP_OBJ_FROM_PTR(&native_base_init_wrapper_obj);
   174d8:	687b      	ldr	r3, [r7, #4]
   174da:	4a14      	ldr	r2, [pc, #80]	; (1752c <super_attr+0x1c8>)
   174dc:	601a      	str	r2, [r3, #0]
            dest[1] = self->obj;
   174de:	687b      	ldr	r3, [r7, #4]
   174e0:	3304      	adds	r3, #4
   174e2:	6bba      	ldr	r2, [r7, #56]	; 0x38
   174e4:	6892      	ldr	r2, [r2, #8]
   174e6:	601a      	str	r2, [r3, #0]
        }
        return;
   174e8:	e00a      	b.n	17500 <super_attr+0x19c>
    }

    // Reset meth_offset so we don't look up any native methods in object,
    // because object never takes up the native base-class slot.
    lookup.meth_offset = 0;
   174ea:	2300      	movs	r3, #0
   174ec:	61fb      	str	r3, [r7, #28]

    mp_obj_class_lookup(&lookup, &mp_type_object);
   174ee:	f107 0314 	add.w	r3, r7, #20
   174f2:	490d      	ldr	r1, [pc, #52]	; (17528 <super_attr+0x1c4>)
   174f4:	4618      	mov	r0, r3
   174f6:	f7fe ff71 	bl	163dc <mp_obj_class_lookup>
   174fa:	e002      	b.n	17502 <super_attr+0x19e>
        return;
   174fc:	bf00      	nop
   174fe:	e000      	b.n	17502 <super_attr+0x19e>
        return;
   17500:	bf00      	nop
}
   17502:	3740      	adds	r7, #64	; 0x40
   17504:	46bd      	mov	sp, r7
   17506:	bd80      	pop	{r7, pc}
   17508:	00024230 	.word	0x00024230
   1750c:	000241b4 	.word	0x000241b4
   17510:	0002442c 	.word	0x0002442c
   17514:	00023e78 	.word	0x00023e78
   17518:	00024088 	.word	0x00024088
   1751c:	000241dc 	.word	0x000241dc
   17520:	00023d90 	.word	0x00023d90
   17524:	00024208 	.word	0x00024208
   17528:	000233a0 	.word	0x000233a0
   1752c:	00023e8c 	.word	0x00023e8c

00017530 <mp_load_super_method>:
    .print = super_print,
    .make_new = super_make_new,
    .attr = super_attr,
};

void mp_load_super_method(qstr attr, mp_obj_t *dest) {
   17530:	b580      	push	{r7, lr}
   17532:	b086      	sub	sp, #24
   17534:	af00      	add	r7, sp, #0
   17536:	6078      	str	r0, [r7, #4]
   17538:	6039      	str	r1, [r7, #0]
    mp_obj_super_t super = {{&mp_type_super}, dest[1], dest[2]};
   1753a:	4b09      	ldr	r3, [pc, #36]	; (17560 <mp_load_super_method+0x30>)
   1753c:	60fb      	str	r3, [r7, #12]
   1753e:	683b      	ldr	r3, [r7, #0]
   17540:	685b      	ldr	r3, [r3, #4]
   17542:	613b      	str	r3, [r7, #16]
   17544:	683b      	ldr	r3, [r7, #0]
   17546:	689b      	ldr	r3, [r3, #8]
   17548:	617b      	str	r3, [r7, #20]
    mp_load_method(MP_OBJ_FROM_PTR(&super), attr, dest);
   1754a:	f107 030c 	add.w	r3, r7, #12
   1754e:	683a      	ldr	r2, [r7, #0]
   17550:	6879      	ldr	r1, [r7, #4]
   17552:	4618      	mov	r0, r3
   17554:	f7f5 fa84 	bl	ca60 <mp_load_method>
}
   17558:	bf00      	nop
   1755a:	3718      	adds	r7, #24
   1755c:	46bd      	mov	sp, r7
   1755e:	bd80      	pop	{r7, pc}
   17560:	00024230 	.word	0x00024230

00017564 <mp_obj_is_subclass_fast>:
/******************************************************************************/
// subclassing and built-ins specific to types

// object and classinfo should be type objects
// (but the function will fail gracefully if they are not)
bool mp_obj_is_subclass_fast(mp_const_obj_t object, mp_const_obj_t classinfo) {
   17564:	b580      	push	{r7, lr}
   17566:	b086      	sub	sp, #24
   17568:	af00      	add	r7, sp, #0
   1756a:	6078      	str	r0, [r7, #4]
   1756c:	6039      	str	r1, [r7, #0]
    for (;;) {
        if (object == classinfo) {
   1756e:	687a      	ldr	r2, [r7, #4]
   17570:	683b      	ldr	r3, [r7, #0]
   17572:	429a      	cmp	r2, r3
   17574:	d101      	bne.n	1757a <mp_obj_is_subclass_fast+0x16>
            return true;
   17576:	2301      	movs	r3, #1
   17578:	e047      	b.n	1760a <mp_obj_is_subclass_fast+0xa6>
        }

        // not equivalent classes, keep searching base classes

        // object should always be a type object, but just return false if it's not
        if (!MP_OBJ_IS_TYPE(object, &mp_type_type)) {
   1757a:	6878      	ldr	r0, [r7, #4]
   1757c:	f7fe fe4c 	bl	16218 <MP_OBJ_IS_OBJ>
   17580:	4603      	mov	r3, r0
   17582:	f083 0301 	eor.w	r3, r3, #1
   17586:	b2db      	uxtb	r3, r3
   17588:	2b00      	cmp	r3, #0
   1758a:	d104      	bne.n	17596 <mp_obj_is_subclass_fast+0x32>
   1758c:	687b      	ldr	r3, [r7, #4]
   1758e:	681b      	ldr	r3, [r3, #0]
   17590:	4a20      	ldr	r2, [pc, #128]	; (17614 <mp_obj_is_subclass_fast+0xb0>)
   17592:	4293      	cmp	r3, r2
   17594:	d001      	beq.n	1759a <mp_obj_is_subclass_fast+0x36>
            return false;
   17596:	2300      	movs	r3, #0
   17598:	e037      	b.n	1760a <mp_obj_is_subclass_fast+0xa6>
        }

        const mp_obj_type_t *self = MP_OBJ_TO_PTR(object);
   1759a:	687b      	ldr	r3, [r7, #4]
   1759c:	613b      	str	r3, [r7, #16]

        if (self->parent == NULL) {
   1759e:	693b      	ldr	r3, [r7, #16]
   175a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   175a2:	2b00      	cmp	r3, #0
   175a4:	d101      	bne.n	175aa <mp_obj_is_subclass_fast+0x46>
            // type has no parents
            return false;
   175a6:	2300      	movs	r3, #0
   175a8:	e02f      	b.n	1760a <mp_obj_is_subclass_fast+0xa6>
        #if MICROPY_MULTIPLE_INHERITANCE
        } else if (((mp_obj_base_t*)self->parent)->type == &mp_type_tuple) {
   175aa:	693b      	ldr	r3, [r7, #16]
   175ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   175ae:	681b      	ldr	r3, [r3, #0]
   175b0:	4a19      	ldr	r2, [pc, #100]	; (17618 <mp_obj_is_subclass_fast+0xb4>)
   175b2:	4293      	cmp	r3, r2
   175b4:	d125      	bne.n	17602 <mp_obj_is_subclass_fast+0x9e>
            // get the base objects (they should be type objects)
            const mp_obj_tuple_t *parent_tuple = self->parent;
   175b6:	693b      	ldr	r3, [r7, #16]
   175b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   175ba:	60fb      	str	r3, [r7, #12]
            const mp_obj_t *item = parent_tuple->items;
   175bc:	68fb      	ldr	r3, [r7, #12]
   175be:	3308      	adds	r3, #8
   175c0:	617b      	str	r3, [r7, #20]
            const mp_obj_t *top = item + parent_tuple->len - 1;
   175c2:	68fb      	ldr	r3, [r7, #12]
   175c4:	685b      	ldr	r3, [r3, #4]
   175c6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   175ca:	3b01      	subs	r3, #1
   175cc:	009b      	lsls	r3, r3, #2
   175ce:	697a      	ldr	r2, [r7, #20]
   175d0:	4413      	add	r3, r2
   175d2:	60bb      	str	r3, [r7, #8]

            // iterate through the base objects
            for (; item < top; ++item) {
   175d4:	e00d      	b.n	175f2 <mp_obj_is_subclass_fast+0x8e>
                if (mp_obj_is_subclass_fast(*item, classinfo)) {
   175d6:	697b      	ldr	r3, [r7, #20]
   175d8:	681b      	ldr	r3, [r3, #0]
   175da:	6839      	ldr	r1, [r7, #0]
   175dc:	4618      	mov	r0, r3
   175de:	f7ff ffc1 	bl	17564 <mp_obj_is_subclass_fast>
   175e2:	4603      	mov	r3, r0
   175e4:	2b00      	cmp	r3, #0
   175e6:	d001      	beq.n	175ec <mp_obj_is_subclass_fast+0x88>
                    return true;
   175e8:	2301      	movs	r3, #1
   175ea:	e00e      	b.n	1760a <mp_obj_is_subclass_fast+0xa6>
            for (; item < top; ++item) {
   175ec:	697b      	ldr	r3, [r7, #20]
   175ee:	3304      	adds	r3, #4
   175f0:	617b      	str	r3, [r7, #20]
   175f2:	697a      	ldr	r2, [r7, #20]
   175f4:	68bb      	ldr	r3, [r7, #8]
   175f6:	429a      	cmp	r2, r3
   175f8:	d3ed      	bcc.n	175d6 <mp_obj_is_subclass_fast+0x72>
                }
            }

            // search last base (simple tail recursion elimination)
            object = *item;
   175fa:	697b      	ldr	r3, [r7, #20]
   175fc:	681b      	ldr	r3, [r3, #0]
   175fe:	607b      	str	r3, [r7, #4]
   17600:	e7b5      	b.n	1756e <mp_obj_is_subclass_fast+0xa>
        #endif
        } else {
            // type has 1 parent
            object = MP_OBJ_FROM_PTR(self->parent);
   17602:	693b      	ldr	r3, [r7, #16]
   17604:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   17606:	607b      	str	r3, [r7, #4]
        }
    }
   17608:	e7b1      	b.n	1756e <mp_obj_is_subclass_fast+0xa>
}
   1760a:	4618      	mov	r0, r3
   1760c:	3718      	adds	r7, #24
   1760e:	46bd      	mov	sp, r7
   17610:	bd80      	pop	{r7, pc}
   17612:	bf00      	nop
   17614:	00024088 	.word	0x00024088
   17618:	00023d90 	.word	0x00023d90

0001761c <mp_obj_is_subclass>:

STATIC mp_obj_t mp_obj_is_subclass(mp_obj_t object, mp_obj_t classinfo) {
   1761c:	b580      	push	{r7, lr}
   1761e:	b086      	sub	sp, #24
   17620:	af00      	add	r7, sp, #0
   17622:	6078      	str	r0, [r7, #4]
   17624:	6039      	str	r1, [r7, #0]
    size_t len;
    mp_obj_t *items;
    if (MP_OBJ_IS_TYPE(classinfo, &mp_type_type)) {
   17626:	683b      	ldr	r3, [r7, #0]
   17628:	4618      	mov	r0, r3
   1762a:	f7fe fdf5 	bl	16218 <MP_OBJ_IS_OBJ>
   1762e:	4603      	mov	r3, r0
   17630:	2b00      	cmp	r3, #0
   17632:	d009      	beq.n	17648 <mp_obj_is_subclass+0x2c>
   17634:	683b      	ldr	r3, [r7, #0]
   17636:	681b      	ldr	r3, [r3, #0]
   17638:	4a22      	ldr	r2, [pc, #136]	; (176c4 <mp_obj_is_subclass+0xa8>)
   1763a:	4293      	cmp	r3, r2
   1763c:	d104      	bne.n	17648 <mp_obj_is_subclass+0x2c>
        len = 1;
   1763e:	2301      	movs	r3, #1
   17640:	613b      	str	r3, [r7, #16]
        items = &classinfo;
   17642:	463b      	mov	r3, r7
   17644:	60fb      	str	r3, [r7, #12]
   17646:	e017      	b.n	17678 <mp_obj_is_subclass+0x5c>
    } else if (MP_OBJ_IS_TYPE(classinfo, &mp_type_tuple)) {
   17648:	683b      	ldr	r3, [r7, #0]
   1764a:	4618      	mov	r0, r3
   1764c:	f7fe fde4 	bl	16218 <MP_OBJ_IS_OBJ>
   17650:	4603      	mov	r3, r0
   17652:	2b00      	cmp	r3, #0
   17654:	d00d      	beq.n	17672 <mp_obj_is_subclass+0x56>
   17656:	683b      	ldr	r3, [r7, #0]
   17658:	681b      	ldr	r3, [r3, #0]
   1765a:	4a1b      	ldr	r2, [pc, #108]	; (176c8 <mp_obj_is_subclass+0xac>)
   1765c:	4293      	cmp	r3, r2
   1765e:	d108      	bne.n	17672 <mp_obj_is_subclass+0x56>
        mp_obj_tuple_get(classinfo, &len, &items);
   17660:	683b      	ldr	r3, [r7, #0]
   17662:	f107 020c 	add.w	r2, r7, #12
   17666:	f107 0110 	add.w	r1, r7, #16
   1766a:	4618      	mov	r0, r3
   1766c:	f7fe fd36 	bl	160dc <mp_obj_tuple_get>
   17670:	e002      	b.n	17678 <mp_obj_is_subclass+0x5c>
    } else {
        mp_raise_TypeError("issubclass() arg 2 must be a class or a tuple of classes");
   17672:	4816      	ldr	r0, [pc, #88]	; (176cc <mp_obj_is_subclass+0xb0>)
   17674:	f7f5 fdbe 	bl	d1f4 <mp_raise_TypeError>
    }

    for (size_t i = 0; i < len; i++) {
   17678:	2300      	movs	r3, #0
   1767a:	617b      	str	r3, [r7, #20]
   1767c:	e018      	b.n	176b0 <mp_obj_is_subclass+0x94>
        // We explicitly check for 'object' here since no-one explicitly derives from it
        if (items[i] == MP_OBJ_FROM_PTR(&mp_type_object) || mp_obj_is_subclass_fast(object, items[i])) {
   1767e:	68fa      	ldr	r2, [r7, #12]
   17680:	697b      	ldr	r3, [r7, #20]
   17682:	009b      	lsls	r3, r3, #2
   17684:	4413      	add	r3, r2
   17686:	681b      	ldr	r3, [r3, #0]
   17688:	4a11      	ldr	r2, [pc, #68]	; (176d0 <mp_obj_is_subclass+0xb4>)
   1768a:	4293      	cmp	r3, r2
   1768c:	d00b      	beq.n	176a6 <mp_obj_is_subclass+0x8a>
   1768e:	68fa      	ldr	r2, [r7, #12]
   17690:	697b      	ldr	r3, [r7, #20]
   17692:	009b      	lsls	r3, r3, #2
   17694:	4413      	add	r3, r2
   17696:	681b      	ldr	r3, [r3, #0]
   17698:	4619      	mov	r1, r3
   1769a:	6878      	ldr	r0, [r7, #4]
   1769c:	f7ff ff62 	bl	17564 <mp_obj_is_subclass_fast>
   176a0:	4603      	mov	r3, r0
   176a2:	2b00      	cmp	r3, #0
   176a4:	d001      	beq.n	176aa <mp_obj_is_subclass+0x8e>
            return mp_const_true;
   176a6:	4b0b      	ldr	r3, [pc, #44]	; (176d4 <mp_obj_is_subclass+0xb8>)
   176a8:	e007      	b.n	176ba <mp_obj_is_subclass+0x9e>
    for (size_t i = 0; i < len; i++) {
   176aa:	697b      	ldr	r3, [r7, #20]
   176ac:	3301      	adds	r3, #1
   176ae:	617b      	str	r3, [r7, #20]
   176b0:	693b      	ldr	r3, [r7, #16]
   176b2:	697a      	ldr	r2, [r7, #20]
   176b4:	429a      	cmp	r2, r3
   176b6:	d3e2      	bcc.n	1767e <mp_obj_is_subclass+0x62>
        }
    }
    return mp_const_false;
   176b8:	4b07      	ldr	r3, [pc, #28]	; (176d8 <mp_obj_is_subclass+0xbc>)
}
   176ba:	4618      	mov	r0, r3
   176bc:	3718      	adds	r7, #24
   176be:	46bd      	mov	sp, r7
   176c0:	bd80      	pop	{r7, pc}
   176c2:	bf00      	nop
   176c4:	00024088 	.word	0x00024088
   176c8:	00023d90 	.word	0x00023d90
   176cc:	0002426c 	.word	0x0002426c
   176d0:	000233a0 	.word	0x000233a0
   176d4:	00021b78 	.word	0x00021b78
   176d8:	00021b70 	.word	0x00021b70

000176dc <mp_builtin_issubclass>:

STATIC mp_obj_t mp_builtin_issubclass(mp_obj_t object, mp_obj_t classinfo) {
   176dc:	b580      	push	{r7, lr}
   176de:	b082      	sub	sp, #8
   176e0:	af00      	add	r7, sp, #0
   176e2:	6078      	str	r0, [r7, #4]
   176e4:	6039      	str	r1, [r7, #0]
    if (!MP_OBJ_IS_TYPE(object, &mp_type_type)) {
   176e6:	6878      	ldr	r0, [r7, #4]
   176e8:	f7fe fd96 	bl	16218 <MP_OBJ_IS_OBJ>
   176ec:	4603      	mov	r3, r0
   176ee:	f083 0301 	eor.w	r3, r3, #1
   176f2:	b2db      	uxtb	r3, r3
   176f4:	2b00      	cmp	r3, #0
   176f6:	d104      	bne.n	17702 <mp_builtin_issubclass+0x26>
   176f8:	687b      	ldr	r3, [r7, #4]
   176fa:	681b      	ldr	r3, [r3, #0]
   176fc:	4a07      	ldr	r2, [pc, #28]	; (1771c <mp_builtin_issubclass+0x40>)
   176fe:	4293      	cmp	r3, r2
   17700:	d002      	beq.n	17708 <mp_builtin_issubclass+0x2c>
        mp_raise_TypeError("issubclass() arg 1 must be a class");
   17702:	4807      	ldr	r0, [pc, #28]	; (17720 <mp_builtin_issubclass+0x44>)
   17704:	f7f5 fd76 	bl	d1f4 <mp_raise_TypeError>
    }
    return mp_obj_is_subclass(object, classinfo);
   17708:	6839      	ldr	r1, [r7, #0]
   1770a:	6878      	ldr	r0, [r7, #4]
   1770c:	f7ff ff86 	bl	1761c <mp_obj_is_subclass>
   17710:	4603      	mov	r3, r0
}
   17712:	4618      	mov	r0, r3
   17714:	3708      	adds	r7, #8
   17716:	46bd      	mov	sp, r7
   17718:	bd80      	pop	{r7, pc}
   1771a:	bf00      	nop
   1771c:	00024088 	.word	0x00024088
   17720:	000242a8 	.word	0x000242a8

00017724 <mp_builtin_isinstance>:

MP_DEFINE_CONST_FUN_OBJ_2(mp_builtin_issubclass_obj, mp_builtin_issubclass);

STATIC mp_obj_t mp_builtin_isinstance(mp_obj_t object, mp_obj_t classinfo) {
   17724:	b580      	push	{r7, lr}
   17726:	b082      	sub	sp, #8
   17728:	af00      	add	r7, sp, #0
   1772a:	6078      	str	r0, [r7, #4]
   1772c:	6039      	str	r1, [r7, #0]
    return mp_obj_is_subclass(MP_OBJ_FROM_PTR(mp_obj_get_type(object)), classinfo);
   1772e:	6878      	ldr	r0, [r7, #4]
   17730:	f7f6 f9c0 	bl	dab4 <mp_obj_get_type>
   17734:	4603      	mov	r3, r0
   17736:	6839      	ldr	r1, [r7, #0]
   17738:	4618      	mov	r0, r3
   1773a:	f7ff ff6f 	bl	1761c <mp_obj_is_subclass>
   1773e:	4603      	mov	r3, r0
}
   17740:	4618      	mov	r0, r3
   17742:	3708      	adds	r7, #8
   17744:	46bd      	mov	sp, r7
   17746:	bd80      	pop	{r7, pc}

00017748 <mp_instance_cast_to_native_base>:

MP_DEFINE_CONST_FUN_OBJ_2(mp_builtin_isinstance_obj, mp_builtin_isinstance);

mp_obj_t mp_instance_cast_to_native_base(mp_const_obj_t self_in, mp_const_obj_t native_type) {
   17748:	b580      	push	{r7, lr}
   1774a:	b084      	sub	sp, #16
   1774c:	af00      	add	r7, sp, #0
   1774e:	6078      	str	r0, [r7, #4]
   17750:	6039      	str	r1, [r7, #0]
    mp_obj_type_t *self_type = mp_obj_get_type(self_in);
   17752:	6878      	ldr	r0, [r7, #4]
   17754:	f7f6 f9ae 	bl	dab4 <mp_obj_get_type>
   17758:	60f8      	str	r0, [r7, #12]
    if (!mp_obj_is_subclass_fast(MP_OBJ_FROM_PTR(self_type), native_type)) {
   1775a:	6839      	ldr	r1, [r7, #0]
   1775c:	68f8      	ldr	r0, [r7, #12]
   1775e:	f7ff ff01 	bl	17564 <mp_obj_is_subclass_fast>
   17762:	4603      	mov	r3, r0
   17764:	f083 0301 	eor.w	r3, r3, #1
   17768:	b2db      	uxtb	r3, r3
   1776a:	2b00      	cmp	r3, #0
   1776c:	d001      	beq.n	17772 <mp_instance_cast_to_native_base+0x2a>
        return MP_OBJ_NULL;
   1776e:	2300      	movs	r3, #0
   17770:	e003      	b.n	1777a <mp_instance_cast_to_native_base+0x32>
    }
    mp_obj_instance_t *self = (mp_obj_instance_t*)MP_OBJ_TO_PTR(self_in);
   17772:	687b      	ldr	r3, [r7, #4]
   17774:	60bb      	str	r3, [r7, #8]
    return self->subobj[0];
   17776:	68bb      	ldr	r3, [r7, #8]
   17778:	691b      	ldr	r3, [r3, #16]
}
   1777a:	4618      	mov	r0, r3
   1777c:	3710      	adds	r7, #16
   1777e:	46bd      	mov	sp, r7
   17780:	bd80      	pop	{r7, pc}
   17782:	bf00      	nop

00017784 <static_class_method_make_new>:

/******************************************************************************/
// staticmethod and classmethod types (probably should go in a different file)

STATIC mp_obj_t static_class_method_make_new(const mp_obj_type_t *self, size_t n_args, size_t n_kw, const mp_obj_t *args) {
   17784:	b580      	push	{r7, lr}
   17786:	b088      	sub	sp, #32
   17788:	af02      	add	r7, sp, #8
   1778a:	60f8      	str	r0, [r7, #12]
   1778c:	60b9      	str	r1, [r7, #8]
   1778e:	607a      	str	r2, [r7, #4]
   17790:	603b      	str	r3, [r7, #0]
    assert(self == &mp_type_staticmethod || self == &mp_type_classmethod);
   17792:	68fb      	ldr	r3, [r7, #12]
   17794:	4a12      	ldr	r2, [pc, #72]	; (177e0 <static_class_method_make_new+0x5c>)
   17796:	4293      	cmp	r3, r2
   17798:	d00a      	beq.n	177b0 <static_class_method_make_new+0x2c>
   1779a:	68fb      	ldr	r3, [r7, #12]
   1779c:	4a11      	ldr	r2, [pc, #68]	; (177e4 <static_class_method_make_new+0x60>)
   1779e:	4293      	cmp	r3, r2
   177a0:	d006      	beq.n	177b0 <static_class_method_make_new+0x2c>
   177a2:	4b11      	ldr	r3, [pc, #68]	; (177e8 <static_class_method_make_new+0x64>)
   177a4:	4a11      	ldr	r2, [pc, #68]	; (177ec <static_class_method_make_new+0x68>)
   177a6:	f240 5109 	movw	r1, #1289	; 0x509
   177aa:	4811      	ldr	r0, [pc, #68]	; (177f0 <static_class_method_make_new+0x6c>)
   177ac:	f003 ff90 	bl	1b6d0 <__assert_func>

    mp_arg_check_num(n_args, n_kw, 1, 1, false);
   177b0:	2300      	movs	r3, #0
   177b2:	9300      	str	r3, [sp, #0]
   177b4:	2301      	movs	r3, #1
   177b6:	2201      	movs	r2, #1
   177b8:	6879      	ldr	r1, [r7, #4]
   177ba:	68b8      	ldr	r0, [r7, #8]
   177bc:	f7f5 fd86 	bl	d2cc <mp_arg_check_num>

    mp_obj_static_class_method_t *o = m_new_obj(mp_obj_static_class_method_t);
   177c0:	2008      	movs	r0, #8
   177c2:	f7e8 fdab 	bl	31c <m_malloc>
   177c6:	6178      	str	r0, [r7, #20]
    *o = (mp_obj_static_class_method_t){{self}, args[0]};
   177c8:	683b      	ldr	r3, [r7, #0]
   177ca:	681a      	ldr	r2, [r3, #0]
   177cc:	697b      	ldr	r3, [r7, #20]
   177ce:	68f9      	ldr	r1, [r7, #12]
   177d0:	6019      	str	r1, [r3, #0]
   177d2:	697b      	ldr	r3, [r7, #20]
   177d4:	605a      	str	r2, [r3, #4]
    return MP_OBJ_FROM_PTR(o);
   177d6:	697b      	ldr	r3, [r7, #20]
}
   177d8:	4618      	mov	r0, r3
   177da:	3718      	adds	r7, #24
   177dc:	46bd      	mov	sp, r7
   177de:	bd80      	pop	{r7, pc}
   177e0:	0002431c 	.word	0x0002431c
   177e4:	00024358 	.word	0x00024358
   177e8:	000242dc 	.word	0x000242dc
   177ec:	00024438 	.word	0x00024438
   177f0:	00023e78 	.word	0x00023e78

000177f4 <MP_OBJ_IS_OBJ>:
   177f4:	b480      	push	{r7}
   177f6:	b083      	sub	sp, #12
   177f8:	af00      	add	r7, sp, #0
   177fa:	6078      	str	r0, [r7, #4]
   177fc:	687b      	ldr	r3, [r7, #4]
   177fe:	f003 0303 	and.w	r3, r3, #3
   17802:	2b00      	cmp	r3, #0
   17804:	bf0c      	ite	eq
   17806:	2301      	moveq	r3, #1
   17808:	2300      	movne	r3, #0
   1780a:	b2db      	uxtb	r3, r3
   1780c:	4618      	mov	r0, r3
   1780e:	370c      	adds	r7, #12
   17810:	46bd      	mov	sp, r7
   17812:	f85d 7b04 	ldr.w	r7, [sp], #4
   17816:	4770      	bx	lr

00017818 <zip_make_new>:
    mp_obj_base_t base;
    size_t n_iters;
    mp_obj_t iters[];
} mp_obj_zip_t;

STATIC mp_obj_t zip_make_new(const mp_obj_type_t *type, size_t n_args, size_t n_kw, const mp_obj_t *args) {
   17818:	b580      	push	{r7, lr}
   1781a:	b088      	sub	sp, #32
   1781c:	af02      	add	r7, sp, #8
   1781e:	60f8      	str	r0, [r7, #12]
   17820:	60b9      	str	r1, [r7, #8]
   17822:	607a      	str	r2, [r7, #4]
   17824:	603b      	str	r3, [r7, #0]
    mp_arg_check_num(n_args, n_kw, 0, MP_OBJ_FUN_ARGS_MAX, false);
   17826:	2300      	movs	r3, #0
   17828:	9300      	str	r3, [sp, #0]
   1782a:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1782e:	2200      	movs	r2, #0
   17830:	6879      	ldr	r1, [r7, #4]
   17832:	68b8      	ldr	r0, [r7, #8]
   17834:	f7f5 fd4a 	bl	d2cc <mp_arg_check_num>

    mp_obj_zip_t *o = m_new_obj_var(mp_obj_zip_t, mp_obj_t, n_args);
   17838:	68bb      	ldr	r3, [r7, #8]
   1783a:	3302      	adds	r3, #2
   1783c:	009b      	lsls	r3, r3, #2
   1783e:	4618      	mov	r0, r3
   17840:	f7e8 fd6c 	bl	31c <m_malloc>
   17844:	6138      	str	r0, [r7, #16]
    o->base.type = type;
   17846:	693b      	ldr	r3, [r7, #16]
   17848:	68fa      	ldr	r2, [r7, #12]
   1784a:	601a      	str	r2, [r3, #0]
    o->n_iters = n_args;
   1784c:	693b      	ldr	r3, [r7, #16]
   1784e:	68ba      	ldr	r2, [r7, #8]
   17850:	605a      	str	r2, [r3, #4]
    for (size_t i = 0; i < n_args; i++) {
   17852:	2300      	movs	r3, #0
   17854:	617b      	str	r3, [r7, #20]
   17856:	e011      	b.n	1787c <zip_make_new+0x64>
        o->iters[i] = mp_getiter(args[i], NULL);
   17858:	697b      	ldr	r3, [r7, #20]
   1785a:	009b      	lsls	r3, r3, #2
   1785c:	683a      	ldr	r2, [r7, #0]
   1785e:	4413      	add	r3, r2
   17860:	681b      	ldr	r3, [r3, #0]
   17862:	2100      	movs	r1, #0
   17864:	4618      	mov	r0, r3
   17866:	f7f5 f973 	bl	cb50 <mp_getiter>
   1786a:	4601      	mov	r1, r0
   1786c:	693b      	ldr	r3, [r7, #16]
   1786e:	697a      	ldr	r2, [r7, #20]
   17870:	3202      	adds	r2, #2
   17872:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (size_t i = 0; i < n_args; i++) {
   17876:	697b      	ldr	r3, [r7, #20]
   17878:	3301      	adds	r3, #1
   1787a:	617b      	str	r3, [r7, #20]
   1787c:	697a      	ldr	r2, [r7, #20]
   1787e:	68bb      	ldr	r3, [r7, #8]
   17880:	429a      	cmp	r2, r3
   17882:	d3e9      	bcc.n	17858 <zip_make_new+0x40>
    }
    return MP_OBJ_FROM_PTR(o);
   17884:	693b      	ldr	r3, [r7, #16]
}
   17886:	4618      	mov	r0, r3
   17888:	3718      	adds	r7, #24
   1788a:	46bd      	mov	sp, r7
   1788c:	bd80      	pop	{r7, pc}
   1788e:	bf00      	nop

00017890 <zip_iternext>:

STATIC mp_obj_t zip_iternext(mp_obj_t self_in) {
   17890:	b580      	push	{r7, lr}
   17892:	b086      	sub	sp, #24
   17894:	af00      	add	r7, sp, #0
   17896:	6078      	str	r0, [r7, #4]
    mp_check_self(MP_OBJ_IS_TYPE(self_in, &mp_type_zip));
   17898:	6878      	ldr	r0, [r7, #4]
   1789a:	f7ff ffab 	bl	177f4 <MP_OBJ_IS_OBJ>
   1789e:	4603      	mov	r3, r0
   178a0:	f083 0301 	eor.w	r3, r3, #1
   178a4:	b2db      	uxtb	r3, r3
   178a6:	2b00      	cmp	r3, #0
   178a8:	d104      	bne.n	178b4 <zip_iternext+0x24>
   178aa:	687b      	ldr	r3, [r7, #4]
   178ac:	681b      	ldr	r3, [r3, #0]
   178ae:	4a1f      	ldr	r2, [pc, #124]	; (1792c <zip_iternext+0x9c>)
   178b0:	4293      	cmp	r3, r2
   178b2:	d005      	beq.n	178c0 <zip_iternext+0x30>
   178b4:	4b1e      	ldr	r3, [pc, #120]	; (17930 <zip_iternext+0xa0>)
   178b6:	4a1f      	ldr	r2, [pc, #124]	; (17934 <zip_iternext+0xa4>)
   178b8:	2134      	movs	r1, #52	; 0x34
   178ba:	481f      	ldr	r0, [pc, #124]	; (17938 <zip_iternext+0xa8>)
   178bc:	f003 ff08 	bl	1b6d0 <__assert_func>
    mp_obj_zip_t *self = MP_OBJ_TO_PTR(self_in);
   178c0:	687b      	ldr	r3, [r7, #4]
   178c2:	613b      	str	r3, [r7, #16]
    if (self->n_iters == 0) {
   178c4:	693b      	ldr	r3, [r7, #16]
   178c6:	685b      	ldr	r3, [r3, #4]
   178c8:	2b00      	cmp	r3, #0
   178ca:	d101      	bne.n	178d0 <zip_iternext+0x40>
        return MP_OBJ_STOP_ITERATION;
   178cc:	2304      	movs	r3, #4
   178ce:	e029      	b.n	17924 <zip_iternext+0x94>
    }
    mp_obj_tuple_t *tuple = MP_OBJ_TO_PTR(mp_obj_new_tuple(self->n_iters, NULL));
   178d0:	693b      	ldr	r3, [r7, #16]
   178d2:	685b      	ldr	r3, [r3, #4]
   178d4:	2100      	movs	r1, #0
   178d6:	4618      	mov	r0, r3
   178d8:	f7fe fbc8 	bl	1606c <mp_obj_new_tuple>
   178dc:	60f8      	str	r0, [r7, #12]

    for (size_t i = 0; i < self->n_iters; i++) {
   178de:	2300      	movs	r3, #0
   178e0:	617b      	str	r3, [r7, #20]
   178e2:	e019      	b.n	17918 <zip_iternext+0x88>
        mp_obj_t next = mp_iternext(self->iters[i]);
   178e4:	693b      	ldr	r3, [r7, #16]
   178e6:	697a      	ldr	r2, [r7, #20]
   178e8:	3202      	adds	r2, #2
   178ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   178ee:	4618      	mov	r0, r3
   178f0:	f7f5 f9b0 	bl	cc54 <mp_iternext>
   178f4:	60b8      	str	r0, [r7, #8]
        if (next == MP_OBJ_STOP_ITERATION) {
   178f6:	68bb      	ldr	r3, [r7, #8]
   178f8:	2b04      	cmp	r3, #4
   178fa:	d104      	bne.n	17906 <zip_iternext+0x76>
            mp_obj_tuple_del(MP_OBJ_FROM_PTR(tuple));
   178fc:	68f8      	ldr	r0, [r7, #12]
   178fe:	f7fe fc1f 	bl	16140 <mp_obj_tuple_del>
            return MP_OBJ_STOP_ITERATION;
   17902:	2304      	movs	r3, #4
   17904:	e00e      	b.n	17924 <zip_iternext+0x94>
        }
        tuple->items[i] = next;
   17906:	68fb      	ldr	r3, [r7, #12]
   17908:	697a      	ldr	r2, [r7, #20]
   1790a:	3202      	adds	r2, #2
   1790c:	68b9      	ldr	r1, [r7, #8]
   1790e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (size_t i = 0; i < self->n_iters; i++) {
   17912:	697b      	ldr	r3, [r7, #20]
   17914:	3301      	adds	r3, #1
   17916:	617b      	str	r3, [r7, #20]
   17918:	693b      	ldr	r3, [r7, #16]
   1791a:	685a      	ldr	r2, [r3, #4]
   1791c:	697b      	ldr	r3, [r7, #20]
   1791e:	429a      	cmp	r2, r3
   17920:	d8e0      	bhi.n	178e4 <zip_iternext+0x54>
    }
    return MP_OBJ_FROM_PTR(tuple);
   17922:	68fb      	ldr	r3, [r7, #12]
}
   17924:	4618      	mov	r0, r3
   17926:	3718      	adds	r7, #24
   17928:	46bd      	mov	sp, r7
   1792a:	bd80      	pop	{r7, pc}
   1792c:	000244c8 	.word	0x000244c8
   17930:	00024458 	.word	0x00024458
   17934:	00024504 	.word	0x00024504
   17938:	000244b4 	.word	0x000244b4

0001793c <op_getitem>:
 */

#include "py/obj.h"
#include "py/builtin.h"

STATIC mp_obj_t op_getitem(mp_obj_t self_in, mp_obj_t key_in) {
   1793c:	b580      	push	{r7, lr}
   1793e:	b084      	sub	sp, #16
   17940:	af00      	add	r7, sp, #0
   17942:	6078      	str	r0, [r7, #4]
   17944:	6039      	str	r1, [r7, #0]
    mp_obj_type_t *type = mp_obj_get_type(self_in);
   17946:	6878      	ldr	r0, [r7, #4]
   17948:	f7f6 f8b4 	bl	dab4 <mp_obj_get_type>
   1794c:	60f8      	str	r0, [r7, #12]
    return type->subscr(self_in, key_in, MP_OBJ_SENTINEL);
   1794e:	68fb      	ldr	r3, [r7, #12]
   17950:	6a1b      	ldr	r3, [r3, #32]
   17952:	2208      	movs	r2, #8
   17954:	6839      	ldr	r1, [r7, #0]
   17956:	6878      	ldr	r0, [r7, #4]
   17958:	4798      	blx	r3
   1795a:	4603      	mov	r3, r0
}
   1795c:	4618      	mov	r0, r3
   1795e:	3710      	adds	r7, #16
   17960:	46bd      	mov	sp, r7
   17962:	bd80      	pop	{r7, pc}

00017964 <op_setitem>:
MP_DEFINE_CONST_FUN_OBJ_2(mp_op_getitem_obj, op_getitem);

STATIC mp_obj_t op_setitem(mp_obj_t self_in, mp_obj_t key_in, mp_obj_t value_in) {
   17964:	b580      	push	{r7, lr}
   17966:	b086      	sub	sp, #24
   17968:	af00      	add	r7, sp, #0
   1796a:	60f8      	str	r0, [r7, #12]
   1796c:	60b9      	str	r1, [r7, #8]
   1796e:	607a      	str	r2, [r7, #4]
    mp_obj_type_t *type = mp_obj_get_type(self_in);
   17970:	68f8      	ldr	r0, [r7, #12]
   17972:	f7f6 f89f 	bl	dab4 <mp_obj_get_type>
   17976:	6178      	str	r0, [r7, #20]
    return type->subscr(self_in, key_in, value_in);
   17978:	697b      	ldr	r3, [r7, #20]
   1797a:	6a1b      	ldr	r3, [r3, #32]
   1797c:	687a      	ldr	r2, [r7, #4]
   1797e:	68b9      	ldr	r1, [r7, #8]
   17980:	68f8      	ldr	r0, [r7, #12]
   17982:	4798      	blx	r3
   17984:	4603      	mov	r3, r0
}
   17986:	4618      	mov	r0, r3
   17988:	3718      	adds	r7, #24
   1798a:	46bd      	mov	sp, r7
   1798c:	bd80      	pop	{r7, pc}
   1798e:	bf00      	nop

00017990 <op_delitem>:
MP_DEFINE_CONST_FUN_OBJ_3(mp_op_setitem_obj, op_setitem);

STATIC mp_obj_t op_delitem(mp_obj_t self_in, mp_obj_t key_in) {
   17990:	b580      	push	{r7, lr}
   17992:	b084      	sub	sp, #16
   17994:	af00      	add	r7, sp, #0
   17996:	6078      	str	r0, [r7, #4]
   17998:	6039      	str	r1, [r7, #0]
    mp_obj_type_t *type = mp_obj_get_type(self_in);
   1799a:	6878      	ldr	r0, [r7, #4]
   1799c:	f7f6 f88a 	bl	dab4 <mp_obj_get_type>
   179a0:	60f8      	str	r0, [r7, #12]
    return type->subscr(self_in, key_in, MP_OBJ_NULL);
   179a2:	68fb      	ldr	r3, [r7, #12]
   179a4:	6a1b      	ldr	r3, [r3, #32]
   179a6:	2200      	movs	r2, #0
   179a8:	6839      	ldr	r1, [r7, #0]
   179aa:	6878      	ldr	r0, [r7, #4]
   179ac:	4798      	blx	r3
   179ae:	4603      	mov	r3, r0
}
   179b0:	4618      	mov	r0, r3
   179b2:	3710      	adds	r7, #16
   179b4:	46bd      	mov	sp, r7
   179b6:	bd80      	pop	{r7, pc}

000179b8 <op_contains>:
MP_DEFINE_CONST_FUN_OBJ_2(mp_op_delitem_obj, op_delitem);

STATIC mp_obj_t op_contains(mp_obj_t lhs_in, mp_obj_t rhs_in) {
   179b8:	b580      	push	{r7, lr}
   179ba:	b084      	sub	sp, #16
   179bc:	af00      	add	r7, sp, #0
   179be:	6078      	str	r0, [r7, #4]
   179c0:	6039      	str	r1, [r7, #0]
    mp_obj_type_t *type = mp_obj_get_type(lhs_in);
   179c2:	6878      	ldr	r0, [r7, #4]
   179c4:	f7f6 f876 	bl	dab4 <mp_obj_get_type>
   179c8:	60f8      	str	r0, [r7, #12]
    return type->binary_op(MP_BINARY_OP_CONTAINS, lhs_in, rhs_in);
   179ca:	68fb      	ldr	r3, [r7, #12]
   179cc:	699b      	ldr	r3, [r3, #24]
   179ce:	683a      	ldr	r2, [r7, #0]
   179d0:	6879      	ldr	r1, [r7, #4]
   179d2:	2022      	movs	r0, #34	; 0x22
   179d4:	4798      	blx	r3
   179d6:	4603      	mov	r3, r0
}
   179d8:	4618      	mov	r0, r3
   179da:	3710      	adds	r7, #16
   179dc:	46bd      	mov	sp, r7
   179de:	bd80      	pop	{r7, pc}

000179e0 <mp_seq_multiply>:

#define SWAP(type, var1, var2) { type t = var2; var2 = var1; var1 = t; }

// Implements backend of sequence * integer operation. Assumes elements are
// memory-adjacent in sequence.
void mp_seq_multiply(const void *items, size_t item_sz, size_t len, size_t times, void *dest) {
   179e0:	b580      	push	{r7, lr}
   179e2:	b086      	sub	sp, #24
   179e4:	af00      	add	r7, sp, #0
   179e6:	60f8      	str	r0, [r7, #12]
   179e8:	60b9      	str	r1, [r7, #8]
   179ea:	607a      	str	r2, [r7, #4]
   179ec:	603b      	str	r3, [r7, #0]
    for (size_t i = 0; i < times; i++) {
   179ee:	2300      	movs	r3, #0
   179f0:	617b      	str	r3, [r7, #20]
   179f2:	e010      	b.n	17a16 <mp_seq_multiply+0x36>
        size_t copy_sz = item_sz * len;
   179f4:	68bb      	ldr	r3, [r7, #8]
   179f6:	687a      	ldr	r2, [r7, #4]
   179f8:	fb02 f303 	mul.w	r3, r2, r3
   179fc:	613b      	str	r3, [r7, #16]
        memcpy(dest, items, copy_sz);
   179fe:	693a      	ldr	r2, [r7, #16]
   17a00:	68f9      	ldr	r1, [r7, #12]
   17a02:	6a38      	ldr	r0, [r7, #32]
   17a04:	f005 f938 	bl	1cc78 <memcpy>
        dest = (char*)dest + copy_sz;
   17a08:	6a3a      	ldr	r2, [r7, #32]
   17a0a:	693b      	ldr	r3, [r7, #16]
   17a0c:	4413      	add	r3, r2
   17a0e:	623b      	str	r3, [r7, #32]
    for (size_t i = 0; i < times; i++) {
   17a10:	697b      	ldr	r3, [r7, #20]
   17a12:	3301      	adds	r3, #1
   17a14:	617b      	str	r3, [r7, #20]
   17a16:	697a      	ldr	r2, [r7, #20]
   17a18:	683b      	ldr	r3, [r7, #0]
   17a1a:	429a      	cmp	r2, r3
   17a1c:	d3ea      	bcc.n	179f4 <mp_seq_multiply+0x14>
    }
}
   17a1e:	bf00      	nop
   17a20:	3718      	adds	r7, #24
   17a22:	46bd      	mov	sp, r7
   17a24:	bd80      	pop	{r7, pc}
   17a26:	bf00      	nop

00017a28 <mp_seq_extract_slice>:
    return indexes->step == 1;
}

#endif

mp_obj_t mp_seq_extract_slice(size_t len, const mp_obj_t *seq, mp_bound_slice_t *indexes) {
   17a28:	b580      	push	{r7, lr}
   17a2a:	b088      	sub	sp, #32
   17a2c:	af00      	add	r7, sp, #0
   17a2e:	60f8      	str	r0, [r7, #12]
   17a30:	60b9      	str	r1, [r7, #8]
   17a32:	607a      	str	r2, [r7, #4]
    (void)len; // TODO can we remove len from the arg list?

    mp_int_t start = indexes->start, stop = indexes->stop;
   17a34:	687b      	ldr	r3, [r7, #4]
   17a36:	681b      	ldr	r3, [r3, #0]
   17a38:	61fb      	str	r3, [r7, #28]
   17a3a:	687b      	ldr	r3, [r7, #4]
   17a3c:	685b      	ldr	r3, [r3, #4]
   17a3e:	61bb      	str	r3, [r7, #24]
    mp_int_t step = indexes->step;
   17a40:	687b      	ldr	r3, [r7, #4]
   17a42:	689b      	ldr	r3, [r3, #8]
   17a44:	617b      	str	r3, [r7, #20]

    mp_obj_t res = mp_obj_new_list(0, NULL);
   17a46:	2100      	movs	r1, #0
   17a48:	2000      	movs	r0, #0
   17a4a:	f7fa f861 	bl	11b10 <mp_obj_new_list>
   17a4e:	6138      	str	r0, [r7, #16]

    if (step < 0) {
   17a50:	697b      	ldr	r3, [r7, #20]
   17a52:	2b00      	cmp	r3, #0
   17a54:	da1f      	bge.n	17a96 <mp_seq_extract_slice+0x6e>
        while (start >= stop) {
   17a56:	e00c      	b.n	17a72 <mp_seq_extract_slice+0x4a>
            mp_obj_list_append(res, seq[start]);
   17a58:	69fb      	ldr	r3, [r7, #28]
   17a5a:	009b      	lsls	r3, r3, #2
   17a5c:	68ba      	ldr	r2, [r7, #8]
   17a5e:	4413      	add	r3, r2
   17a60:	681b      	ldr	r3, [r3, #0]
   17a62:	4619      	mov	r1, r3
   17a64:	6938      	ldr	r0, [r7, #16]
   17a66:	f7f9 fbc1 	bl	111ec <mp_obj_list_append>
            start += step;
   17a6a:	69fa      	ldr	r2, [r7, #28]
   17a6c:	697b      	ldr	r3, [r7, #20]
   17a6e:	4413      	add	r3, r2
   17a70:	61fb      	str	r3, [r7, #28]
        while (start >= stop) {
   17a72:	69fa      	ldr	r2, [r7, #28]
   17a74:	69bb      	ldr	r3, [r7, #24]
   17a76:	429a      	cmp	r2, r3
   17a78:	daee      	bge.n	17a58 <mp_seq_extract_slice+0x30>
   17a7a:	e010      	b.n	17a9e <mp_seq_extract_slice+0x76>
        }
    } else {
        while (start < stop) {
            mp_obj_list_append(res, seq[start]);
   17a7c:	69fb      	ldr	r3, [r7, #28]
   17a7e:	009b      	lsls	r3, r3, #2
   17a80:	68ba      	ldr	r2, [r7, #8]
   17a82:	4413      	add	r3, r2
   17a84:	681b      	ldr	r3, [r3, #0]
   17a86:	4619      	mov	r1, r3
   17a88:	6938      	ldr	r0, [r7, #16]
   17a8a:	f7f9 fbaf 	bl	111ec <mp_obj_list_append>
            start += step;
   17a8e:	69fa      	ldr	r2, [r7, #28]
   17a90:	697b      	ldr	r3, [r7, #20]
   17a92:	4413      	add	r3, r2
   17a94:	61fb      	str	r3, [r7, #28]
        while (start < stop) {
   17a96:	69fa      	ldr	r2, [r7, #28]
   17a98:	69bb      	ldr	r3, [r7, #24]
   17a9a:	429a      	cmp	r2, r3
   17a9c:	dbee      	blt.n	17a7c <mp_seq_extract_slice+0x54>
        }
    }
    return res;
   17a9e:	693b      	ldr	r3, [r7, #16]
}
   17aa0:	4618      	mov	r0, r3
   17aa2:	3720      	adds	r7, #32
   17aa4:	46bd      	mov	sp, r7
   17aa6:	bd80      	pop	{r7, pc}

00017aa8 <mp_seq_cmp_bytes>:

// Special-case comparison function for sequences of bytes
// Don't pass MP_BINARY_OP_NOT_EQUAL here
bool mp_seq_cmp_bytes(mp_uint_t op, const byte *data1, size_t len1, const byte *data2, size_t len2) {
   17aa8:	b580      	push	{r7, lr}
   17aaa:	b088      	sub	sp, #32
   17aac:	af00      	add	r7, sp, #0
   17aae:	60f8      	str	r0, [r7, #12]
   17ab0:	60b9      	str	r1, [r7, #8]
   17ab2:	607a      	str	r2, [r7, #4]
   17ab4:	603b      	str	r3, [r7, #0]
    if (op == MP_BINARY_OP_EQUAL && len1 != len2) {
   17ab6:	68fb      	ldr	r3, [r7, #12]
   17ab8:	2b02      	cmp	r3, #2
   17aba:	d105      	bne.n	17ac8 <mp_seq_cmp_bytes+0x20>
   17abc:	687a      	ldr	r2, [r7, #4]
   17abe:	6abb      	ldr	r3, [r7, #40]	; 0x28
   17ac0:	429a      	cmp	r2, r3
   17ac2:	d001      	beq.n	17ac8 <mp_seq_cmp_bytes+0x20>
        return false;
   17ac4:	2300      	movs	r3, #0
   17ac6:	e049      	b.n	17b5c <mp_seq_cmp_bytes+0xb4>
    }

    // Let's deal only with > & >=
    if (op == MP_BINARY_OP_LESS || op == MP_BINARY_OP_LESS_EQUAL) {
   17ac8:	68fb      	ldr	r3, [r7, #12]
   17aca:	2b00      	cmp	r3, #0
   17acc:	d002      	beq.n	17ad4 <mp_seq_cmp_bytes+0x2c>
   17ace:	68fb      	ldr	r3, [r7, #12]
   17ad0:	2b03      	cmp	r3, #3
   17ad2:	d113      	bne.n	17afc <mp_seq_cmp_bytes+0x54>
        SWAP(const byte*, data1, data2);
   17ad4:	683b      	ldr	r3, [r7, #0]
   17ad6:	61fb      	str	r3, [r7, #28]
   17ad8:	68bb      	ldr	r3, [r7, #8]
   17ada:	603b      	str	r3, [r7, #0]
   17adc:	69fb      	ldr	r3, [r7, #28]
   17ade:	60bb      	str	r3, [r7, #8]
        SWAP(size_t, len1, len2);
   17ae0:	6abb      	ldr	r3, [r7, #40]	; 0x28
   17ae2:	61bb      	str	r3, [r7, #24]
   17ae4:	687b      	ldr	r3, [r7, #4]
   17ae6:	62bb      	str	r3, [r7, #40]	; 0x28
   17ae8:	69bb      	ldr	r3, [r7, #24]
   17aea:	607b      	str	r3, [r7, #4]
        if (op == MP_BINARY_OP_LESS) {
   17aec:	68fb      	ldr	r3, [r7, #12]
   17aee:	2b00      	cmp	r3, #0
   17af0:	d102      	bne.n	17af8 <mp_seq_cmp_bytes+0x50>
            op = MP_BINARY_OP_MORE;
   17af2:	2301      	movs	r3, #1
   17af4:	60fb      	str	r3, [r7, #12]
   17af6:	e001      	b.n	17afc <mp_seq_cmp_bytes+0x54>
        } else {
            op = MP_BINARY_OP_MORE_EQUAL;
   17af8:	2304      	movs	r3, #4
   17afa:	60fb      	str	r3, [r7, #12]
        }
    }
    size_t min_len = len1 < len2 ? len1 : len2;
   17afc:	6aba      	ldr	r2, [r7, #40]	; 0x28
   17afe:	687b      	ldr	r3, [r7, #4]
   17b00:	4293      	cmp	r3, r2
   17b02:	bf28      	it	cs
   17b04:	4613      	movcs	r3, r2
   17b06:	617b      	str	r3, [r7, #20]
    int res = memcmp(data1, data2, min_len);
   17b08:	697a      	ldr	r2, [r7, #20]
   17b0a:	6839      	ldr	r1, [r7, #0]
   17b0c:	68b8      	ldr	r0, [r7, #8]
   17b0e:	f005 f99b 	bl	1ce48 <memcmp>
   17b12:	6138      	str	r0, [r7, #16]
    if (op == MP_BINARY_OP_EQUAL) {
   17b14:	68fb      	ldr	r3, [r7, #12]
   17b16:	2b02      	cmp	r3, #2
   17b18:	d106      	bne.n	17b28 <mp_seq_cmp_bytes+0x80>
        // If we are checking for equality, here're the answer
        return res == 0;
   17b1a:	693b      	ldr	r3, [r7, #16]
   17b1c:	2b00      	cmp	r3, #0
   17b1e:	bf0c      	ite	eq
   17b20:	2301      	moveq	r3, #1
   17b22:	2300      	movne	r3, #0
   17b24:	b2db      	uxtb	r3, r3
   17b26:	e019      	b.n	17b5c <mp_seq_cmp_bytes+0xb4>
    }
    if (res < 0) {
   17b28:	693b      	ldr	r3, [r7, #16]
   17b2a:	2b00      	cmp	r3, #0
   17b2c:	da01      	bge.n	17b32 <mp_seq_cmp_bytes+0x8a>
        return false;
   17b2e:	2300      	movs	r3, #0
   17b30:	e014      	b.n	17b5c <mp_seq_cmp_bytes+0xb4>
    }
    if (res > 0) {
   17b32:	693b      	ldr	r3, [r7, #16]
   17b34:	2b00      	cmp	r3, #0
   17b36:	dd01      	ble.n	17b3c <mp_seq_cmp_bytes+0x94>
        return true;
   17b38:	2301      	movs	r3, #1
   17b3a:	e00f      	b.n	17b5c <mp_seq_cmp_bytes+0xb4>
    }

    // If we had tie in the last element...
    // ... and we have lists of different lengths...
    if (len1 != len2) {
   17b3c:	687a      	ldr	r2, [r7, #4]
   17b3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   17b40:	429a      	cmp	r2, r3
   17b42:	d005      	beq.n	17b50 <mp_seq_cmp_bytes+0xa8>
        if (len1 < len2) {
   17b44:	687a      	ldr	r2, [r7, #4]
   17b46:	6abb      	ldr	r3, [r7, #40]	; 0x28
   17b48:	429a      	cmp	r2, r3
   17b4a:	d206      	bcs.n	17b5a <mp_seq_cmp_bytes+0xb2>
            // ... then longer list length wins (we deal only with >)
            return false;
   17b4c:	2300      	movs	r3, #0
   17b4e:	e005      	b.n	17b5c <mp_seq_cmp_bytes+0xb4>
        }
    } else if (op == MP_BINARY_OP_MORE) {
   17b50:	68fb      	ldr	r3, [r7, #12]
   17b52:	2b01      	cmp	r3, #1
   17b54:	d101      	bne.n	17b5a <mp_seq_cmp_bytes+0xb2>
        // Otherwise, if we have strict relation, equality means failure
        return false;
   17b56:	2300      	movs	r3, #0
   17b58:	e000      	b.n	17b5c <mp_seq_cmp_bytes+0xb4>
    }
    return true;
   17b5a:	2301      	movs	r3, #1
}
   17b5c:	4618      	mov	r0, r3
   17b5e:	3720      	adds	r7, #32
   17b60:	46bd      	mov	sp, r7
   17b62:	bd80      	pop	{r7, pc}

00017b64 <mp_seq_cmp_objs>:

// Special-case comparison function for sequences of mp_obj_t
// Don't pass MP_BINARY_OP_NOT_EQUAL here
bool mp_seq_cmp_objs(mp_uint_t op, const mp_obj_t *items1, size_t len1, const mp_obj_t *items2, size_t len2) {
   17b64:	b580      	push	{r7, lr}
   17b66:	b088      	sub	sp, #32
   17b68:	af00      	add	r7, sp, #0
   17b6a:	60f8      	str	r0, [r7, #12]
   17b6c:	60b9      	str	r1, [r7, #8]
   17b6e:	607a      	str	r2, [r7, #4]
   17b70:	603b      	str	r3, [r7, #0]
    if (op == MP_BINARY_OP_EQUAL && len1 != len2) {
   17b72:	68fb      	ldr	r3, [r7, #12]
   17b74:	2b02      	cmp	r3, #2
   17b76:	d105      	bne.n	17b84 <mp_seq_cmp_objs+0x20>
   17b78:	687a      	ldr	r2, [r7, #4]
   17b7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   17b7c:	429a      	cmp	r2, r3
   17b7e:	d001      	beq.n	17b84 <mp_seq_cmp_objs+0x20>
        return false;
   17b80:	2300      	movs	r3, #0
   17b82:	e065      	b.n	17c50 <mp_seq_cmp_objs+0xec>
    }

    // Let's deal only with > & >=
    if (op == MP_BINARY_OP_LESS || op == MP_BINARY_OP_LESS_EQUAL) {
   17b84:	68fb      	ldr	r3, [r7, #12]
   17b86:	2b00      	cmp	r3, #0
   17b88:	d002      	beq.n	17b90 <mp_seq_cmp_objs+0x2c>
   17b8a:	68fb      	ldr	r3, [r7, #12]
   17b8c:	2b03      	cmp	r3, #3
   17b8e:	d113      	bne.n	17bb8 <mp_seq_cmp_objs+0x54>
        SWAP(const mp_obj_t *, items1, items2);
   17b90:	683b      	ldr	r3, [r7, #0]
   17b92:	61bb      	str	r3, [r7, #24]
   17b94:	68bb      	ldr	r3, [r7, #8]
   17b96:	603b      	str	r3, [r7, #0]
   17b98:	69bb      	ldr	r3, [r7, #24]
   17b9a:	60bb      	str	r3, [r7, #8]
        SWAP(size_t, len1, len2);
   17b9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   17b9e:	617b      	str	r3, [r7, #20]
   17ba0:	687b      	ldr	r3, [r7, #4]
   17ba2:	62bb      	str	r3, [r7, #40]	; 0x28
   17ba4:	697b      	ldr	r3, [r7, #20]
   17ba6:	607b      	str	r3, [r7, #4]
        if (op == MP_BINARY_OP_LESS) {
   17ba8:	68fb      	ldr	r3, [r7, #12]
   17baa:	2b00      	cmp	r3, #0
   17bac:	d102      	bne.n	17bb4 <mp_seq_cmp_objs+0x50>
            op = MP_BINARY_OP_MORE;
   17bae:	2301      	movs	r3, #1
   17bb0:	60fb      	str	r3, [r7, #12]
   17bb2:	e001      	b.n	17bb8 <mp_seq_cmp_objs+0x54>
        } else {
            op = MP_BINARY_OP_MORE_EQUAL;
   17bb4:	2304      	movs	r3, #4
   17bb6:	60fb      	str	r3, [r7, #12]
        }
    }

    size_t len = len1 < len2 ? len1 : len2;
   17bb8:	6aba      	ldr	r2, [r7, #40]	; 0x28
   17bba:	687b      	ldr	r3, [r7, #4]
   17bbc:	4293      	cmp	r3, r2
   17bbe:	bf28      	it	cs
   17bc0:	4613      	movcs	r3, r2
   17bc2:	613b      	str	r3, [r7, #16]
    for (size_t i = 0; i < len; i++) {
   17bc4:	2300      	movs	r3, #0
   17bc6:	61fb      	str	r3, [r7, #28]
   17bc8:	e02e      	b.n	17c28 <mp_seq_cmp_objs+0xc4>
        // If current elements equal, can't decide anything - go on
        if (mp_obj_equal(items1[i], items2[i])) {
   17bca:	69fb      	ldr	r3, [r7, #28]
   17bcc:	009b      	lsls	r3, r3, #2
   17bce:	68ba      	ldr	r2, [r7, #8]
   17bd0:	4413      	add	r3, r2
   17bd2:	6818      	ldr	r0, [r3, #0]
   17bd4:	69fb      	ldr	r3, [r7, #28]
   17bd6:	009b      	lsls	r3, r3, #2
   17bd8:	683a      	ldr	r2, [r7, #0]
   17bda:	4413      	add	r3, r2
   17bdc:	681b      	ldr	r3, [r3, #0]
   17bde:	4619      	mov	r1, r3
   17be0:	f7f6 f8bc 	bl	dd5c <mp_obj_equal>
   17be4:	4603      	mov	r3, r0
   17be6:	2b00      	cmp	r3, #0
   17be8:	d003      	beq.n	17bf2 <mp_seq_cmp_objs+0x8e>
    for (size_t i = 0; i < len; i++) {
   17bea:	69fb      	ldr	r3, [r7, #28]
   17bec:	3301      	adds	r3, #1
   17bee:	61fb      	str	r3, [r7, #28]
   17bf0:	e01a      	b.n	17c28 <mp_seq_cmp_objs+0xc4>
            continue;
        }

        // Othewise, if they are not equal, we can have final decision based on them
        if (op == MP_BINARY_OP_EQUAL) {
   17bf2:	68fb      	ldr	r3, [r7, #12]
   17bf4:	2b02      	cmp	r3, #2
   17bf6:	d101      	bne.n	17bfc <mp_seq_cmp_objs+0x98>
            // In particular, if we are checking for equality, here're the answer
            return false;
   17bf8:	2300      	movs	r3, #0
   17bfa:	e029      	b.n	17c50 <mp_seq_cmp_objs+0xec>
        }

        // Otherwise, application of relation op gives the answer
        return (mp_binary_op(op, items1[i], items2[i]) == mp_const_true);
   17bfc:	69fb      	ldr	r3, [r7, #28]
   17bfe:	009b      	lsls	r3, r3, #2
   17c00:	68ba      	ldr	r2, [r7, #8]
   17c02:	4413      	add	r3, r2
   17c04:	6819      	ldr	r1, [r3, #0]
   17c06:	69fb      	ldr	r3, [r7, #28]
   17c08:	009b      	lsls	r3, r3, #2
   17c0a:	683a      	ldr	r2, [r7, #0]
   17c0c:	4413      	add	r3, r2
   17c0e:	681b      	ldr	r3, [r3, #0]
   17c10:	461a      	mov	r2, r3
   17c12:	68f8      	ldr	r0, [r7, #12]
   17c14:	f7f3 ff92 	bl	bb3c <mp_binary_op>
   17c18:	4602      	mov	r2, r0
   17c1a:	4b0f      	ldr	r3, [pc, #60]	; (17c58 <mp_seq_cmp_objs+0xf4>)
   17c1c:	429a      	cmp	r2, r3
   17c1e:	bf0c      	ite	eq
   17c20:	2301      	moveq	r3, #1
   17c22:	2300      	movne	r3, #0
   17c24:	b2db      	uxtb	r3, r3
   17c26:	e013      	b.n	17c50 <mp_seq_cmp_objs+0xec>
    for (size_t i = 0; i < len; i++) {
   17c28:	69fa      	ldr	r2, [r7, #28]
   17c2a:	693b      	ldr	r3, [r7, #16]
   17c2c:	429a      	cmp	r2, r3
   17c2e:	d3cc      	bcc.n	17bca <mp_seq_cmp_objs+0x66>
    }

    // If we had tie in the last element...
    // ... and we have lists of different lengths...
    if (len1 != len2) {
   17c30:	687a      	ldr	r2, [r7, #4]
   17c32:	6abb      	ldr	r3, [r7, #40]	; 0x28
   17c34:	429a      	cmp	r2, r3
   17c36:	d005      	beq.n	17c44 <mp_seq_cmp_objs+0xe0>
        if (len1 < len2) {
   17c38:	687a      	ldr	r2, [r7, #4]
   17c3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   17c3c:	429a      	cmp	r2, r3
   17c3e:	d206      	bcs.n	17c4e <mp_seq_cmp_objs+0xea>
            // ... then longer list length wins (we deal only with >)
            return false;
   17c40:	2300      	movs	r3, #0
   17c42:	e005      	b.n	17c50 <mp_seq_cmp_objs+0xec>
        }
    } else if (op == MP_BINARY_OP_MORE) {
   17c44:	68fb      	ldr	r3, [r7, #12]
   17c46:	2b01      	cmp	r3, #1
   17c48:	d101      	bne.n	17c4e <mp_seq_cmp_objs+0xea>
        // Otherwise, if we have strict relation, sequence equality means failure
        return false;
   17c4a:	2300      	movs	r3, #0
   17c4c:	e000      	b.n	17c50 <mp_seq_cmp_objs+0xec>
    }

    return true;
   17c4e:	2301      	movs	r3, #1
}
   17c50:	4618      	mov	r0, r3
   17c52:	3720      	adds	r7, #32
   17c54:	46bd      	mov	sp, r7
   17c56:	bd80      	pop	{r7, pc}
   17c58:	00021b78 	.word	0x00021b78

00017c5c <mp_seq_index_obj>:

// Special-case of index() which searches for mp_obj_t
mp_obj_t mp_seq_index_obj(const mp_obj_t *items, size_t len, size_t n_args, const mp_obj_t *args) {
   17c5c:	b580      	push	{r7, lr}
   17c5e:	b08a      	sub	sp, #40	; 0x28
   17c60:	af00      	add	r7, sp, #0
   17c62:	60f8      	str	r0, [r7, #12]
   17c64:	60b9      	str	r1, [r7, #8]
   17c66:	607a      	str	r2, [r7, #4]
   17c68:	603b      	str	r3, [r7, #0]
    mp_obj_type_t *type = mp_obj_get_type(args[0]);
   17c6a:	683b      	ldr	r3, [r7, #0]
   17c6c:	681b      	ldr	r3, [r3, #0]
   17c6e:	4618      	mov	r0, r3
   17c70:	f7f5 ff20 	bl	dab4 <mp_obj_get_type>
   17c74:	61b8      	str	r0, [r7, #24]
    mp_obj_t value = args[1];
   17c76:	683b      	ldr	r3, [r7, #0]
   17c78:	685b      	ldr	r3, [r3, #4]
   17c7a:	617b      	str	r3, [r7, #20]
    size_t start = 0;
   17c7c:	2300      	movs	r3, #0
   17c7e:	627b      	str	r3, [r7, #36]	; 0x24
    size_t stop = len;
   17c80:	68bb      	ldr	r3, [r7, #8]
   17c82:	623b      	str	r3, [r7, #32]

    if (n_args >= 3) {
   17c84:	687b      	ldr	r3, [r7, #4]
   17c86:	2b02      	cmp	r3, #2
   17c88:	d914      	bls.n	17cb4 <mp_seq_index_obj+0x58>
        start = mp_get_index(type, len, args[2], true);
   17c8a:	683b      	ldr	r3, [r7, #0]
   17c8c:	3308      	adds	r3, #8
   17c8e:	681a      	ldr	r2, [r3, #0]
   17c90:	2301      	movs	r3, #1
   17c92:	68b9      	ldr	r1, [r7, #8]
   17c94:	69b8      	ldr	r0, [r7, #24]
   17c96:	f7f6 f9d7 	bl	e048 <mp_get_index>
   17c9a:	6278      	str	r0, [r7, #36]	; 0x24
        if (n_args >= 4) {
   17c9c:	687b      	ldr	r3, [r7, #4]
   17c9e:	2b03      	cmp	r3, #3
   17ca0:	d908      	bls.n	17cb4 <mp_seq_index_obj+0x58>
            stop = mp_get_index(type, len, args[3], true);
   17ca2:	683b      	ldr	r3, [r7, #0]
   17ca4:	330c      	adds	r3, #12
   17ca6:	681a      	ldr	r2, [r3, #0]
   17ca8:	2301      	movs	r3, #1
   17caa:	68b9      	ldr	r1, [r7, #8]
   17cac:	69b8      	ldr	r0, [r7, #24]
   17cae:	f7f6 f9cb 	bl	e048 <mp_get_index>
   17cb2:	6238      	str	r0, [r7, #32]
        }
    }

    for (size_t i = start; i < stop; i++) {
   17cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   17cb6:	61fb      	str	r3, [r7, #28]
   17cb8:	e013      	b.n	17ce2 <mp_seq_index_obj+0x86>
        if (mp_obj_equal(items[i], value)) {
   17cba:	69fb      	ldr	r3, [r7, #28]
   17cbc:	009b      	lsls	r3, r3, #2
   17cbe:	68fa      	ldr	r2, [r7, #12]
   17cc0:	4413      	add	r3, r2
   17cc2:	681b      	ldr	r3, [r3, #0]
   17cc4:	6979      	ldr	r1, [r7, #20]
   17cc6:	4618      	mov	r0, r3
   17cc8:	f7f6 f848 	bl	dd5c <mp_obj_equal>
   17ccc:	4603      	mov	r3, r0
   17cce:	2b00      	cmp	r3, #0
   17cd0:	d004      	beq.n	17cdc <mp_seq_index_obj+0x80>
            // Common sense says this cannot overflow small int
            return MP_OBJ_NEW_SMALL_INT(i);
   17cd2:	69fb      	ldr	r3, [r7, #28]
   17cd4:	005b      	lsls	r3, r3, #1
   17cd6:	f043 0301 	orr.w	r3, r3, #1
   17cda:	e009      	b.n	17cf0 <mp_seq_index_obj+0x94>
    for (size_t i = start; i < stop; i++) {
   17cdc:	69fb      	ldr	r3, [r7, #28]
   17cde:	3301      	adds	r3, #1
   17ce0:	61fb      	str	r3, [r7, #28]
   17ce2:	69fa      	ldr	r2, [r7, #28]
   17ce4:	6a3b      	ldr	r3, [r7, #32]
   17ce6:	429a      	cmp	r2, r3
   17ce8:	d3e7      	bcc.n	17cba <mp_seq_index_obj+0x5e>
        }
    }

    mp_raise_ValueError("object not in sequence");
   17cea:	4803      	ldr	r0, [pc, #12]	; (17cf8 <mp_seq_index_obj+0x9c>)
   17cec:	f7f5 fa78 	bl	d1e0 <mp_raise_ValueError>
}
   17cf0:	4618      	mov	r0, r3
   17cf2:	3728      	adds	r7, #40	; 0x28
   17cf4:	46bd      	mov	sp, r7
   17cf6:	bd80      	pop	{r7, pc}
   17cf8:	00024534 	.word	0x00024534

00017cfc <mp_seq_count_obj>:

mp_obj_t mp_seq_count_obj(const mp_obj_t *items, size_t len, mp_obj_t value) {
   17cfc:	b580      	push	{r7, lr}
   17cfe:	b086      	sub	sp, #24
   17d00:	af00      	add	r7, sp, #0
   17d02:	60f8      	str	r0, [r7, #12]
   17d04:	60b9      	str	r1, [r7, #8]
   17d06:	607a      	str	r2, [r7, #4]
    size_t count = 0;
   17d08:	2300      	movs	r3, #0
   17d0a:	617b      	str	r3, [r7, #20]
    for (size_t i = 0; i < len; i++) {
   17d0c:	2300      	movs	r3, #0
   17d0e:	613b      	str	r3, [r7, #16]
   17d10:	e011      	b.n	17d36 <mp_seq_count_obj+0x3a>
         if (mp_obj_equal(items[i], value)) {
   17d12:	693b      	ldr	r3, [r7, #16]
   17d14:	009b      	lsls	r3, r3, #2
   17d16:	68fa      	ldr	r2, [r7, #12]
   17d18:	4413      	add	r3, r2
   17d1a:	681b      	ldr	r3, [r3, #0]
   17d1c:	6879      	ldr	r1, [r7, #4]
   17d1e:	4618      	mov	r0, r3
   17d20:	f7f6 f81c 	bl	dd5c <mp_obj_equal>
   17d24:	4603      	mov	r3, r0
   17d26:	2b00      	cmp	r3, #0
   17d28:	d002      	beq.n	17d30 <mp_seq_count_obj+0x34>
              count++;
   17d2a:	697b      	ldr	r3, [r7, #20]
   17d2c:	3301      	adds	r3, #1
   17d2e:	617b      	str	r3, [r7, #20]
    for (size_t i = 0; i < len; i++) {
   17d30:	693b      	ldr	r3, [r7, #16]
   17d32:	3301      	adds	r3, #1
   17d34:	613b      	str	r3, [r7, #16]
   17d36:	693a      	ldr	r2, [r7, #16]
   17d38:	68bb      	ldr	r3, [r7, #8]
   17d3a:	429a      	cmp	r2, r3
   17d3c:	d3e9      	bcc.n	17d12 <mp_seq_count_obj+0x16>
         }
    }

    // Common sense says this cannot overflow small int
    return MP_OBJ_NEW_SMALL_INT(count);
   17d3e:	697b      	ldr	r3, [r7, #20]
   17d40:	005b      	lsls	r3, r3, #1
   17d42:	f043 0301 	orr.w	r3, r3, #1
}
   17d46:	4618      	mov	r0, r3
   17d48:	3718      	adds	r7, #24
   17d4a:	46bd      	mov	sp, r7
   17d4c:	bd80      	pop	{r7, pc}
   17d4e:	bf00      	nop

00017d50 <mp_binary_get_size>:

#ifndef alignof
#define alignof(type) offsetof(struct { char c; type t; }, t)
#endif

size_t mp_binary_get_size(char struct_type, char val_type, mp_uint_t *palign) {
   17d50:	b580      	push	{r7, lr}
   17d52:	b084      	sub	sp, #16
   17d54:	af00      	add	r7, sp, #0
   17d56:	4603      	mov	r3, r0
   17d58:	603a      	str	r2, [r7, #0]
   17d5a:	71fb      	strb	r3, [r7, #7]
   17d5c:	460b      	mov	r3, r1
   17d5e:	71bb      	strb	r3, [r7, #6]
    size_t size = 0;
   17d60:	2300      	movs	r3, #0
   17d62:	60fb      	str	r3, [r7, #12]
    int align = 1;
   17d64:	2301      	movs	r3, #1
   17d66:	60bb      	str	r3, [r7, #8]
    switch (struct_type) {
   17d68:	79fb      	ldrb	r3, [r7, #7]
   17d6a:	2b3e      	cmp	r3, #62	; 0x3e
   17d6c:	d005      	beq.n	17d7a <mp_binary_get_size+0x2a>
   17d6e:	2b40      	cmp	r3, #64	; 0x40
   17d70:	f000 8085 	beq.w	17e7e <mp_binary_get_size+0x12e>
   17d74:	2b3c      	cmp	r3, #60	; 0x3c
   17d76:	f040 8196 	bne.w	180a6 <mp_binary_get_size+0x356>
        case '<': case '>':
            switch (val_type) {
   17d7a:	79bb      	ldrb	r3, [r7, #6]
   17d7c:	3b42      	subs	r3, #66	; 0x42
   17d7e:	2b2f      	cmp	r3, #47	; 0x2f
   17d80:	f200 8190 	bhi.w	180a4 <mp_binary_get_size+0x354>
   17d84:	a201      	add	r2, pc, #4	; (adr r2, 17d8c <mp_binary_get_size+0x3c>)
   17d86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   17d8a:	bf00      	nop
   17d8c:	00017e4d 	.word	0x00017e4d
   17d90:	000180a5 	.word	0x000180a5
   17d94:	000180a5 	.word	0x000180a5
   17d98:	000180a5 	.word	0x000180a5
   17d9c:	000180a5 	.word	0x000180a5
   17da0:	000180a5 	.word	0x000180a5
   17da4:	00017e53 	.word	0x00017e53
   17da8:	00017e59 	.word	0x00017e59
   17dac:	000180a5 	.word	0x000180a5
   17db0:	000180a5 	.word	0x000180a5
   17db4:	00017e5f 	.word	0x00017e5f
   17db8:	000180a5 	.word	0x000180a5
   17dbc:	000180a5 	.word	0x000180a5
   17dc0:	00017e6b 	.word	0x00017e6b
   17dc4:	00017e6b 	.word	0x00017e6b
   17dc8:	00017e65 	.word	0x00017e65
   17dcc:	000180a5 	.word	0x000180a5
   17dd0:	00017e6b 	.word	0x00017e6b
   17dd4:	000180a5 	.word	0x000180a5
   17dd8:	000180a5 	.word	0x000180a5
   17ddc:	000180a5 	.word	0x000180a5
   17de0:	000180a5 	.word	0x000180a5
   17de4:	000180a5 	.word	0x000180a5
   17de8:	000180a5 	.word	0x000180a5
   17dec:	000180a5 	.word	0x000180a5
   17df0:	000180a5 	.word	0x000180a5
   17df4:	000180a5 	.word	0x000180a5
   17df8:	000180a5 	.word	0x000180a5
   17dfc:	000180a5 	.word	0x000180a5
   17e00:	000180a5 	.word	0x000180a5
   17e04:	000180a5 	.word	0x000180a5
   17e08:	000180a5 	.word	0x000180a5
   17e0c:	00017e4d 	.word	0x00017e4d
   17e10:	000180a5 	.word	0x000180a5
   17e14:	00017e77 	.word	0x00017e77
   17e18:	000180a5 	.word	0x000180a5
   17e1c:	00017e71 	.word	0x00017e71
   17e20:	000180a5 	.word	0x000180a5
   17e24:	00017e53 	.word	0x00017e53
   17e28:	00017e59 	.word	0x00017e59
   17e2c:	000180a5 	.word	0x000180a5
   17e30:	000180a5 	.word	0x000180a5
   17e34:	00017e5f 	.word	0x00017e5f
   17e38:	000180a5 	.word	0x000180a5
   17e3c:	000180a5 	.word	0x000180a5
   17e40:	000180a5 	.word	0x000180a5
   17e44:	000180a5 	.word	0x000180a5
   17e48:	00017e65 	.word	0x00017e65
                case 'b': case 'B':
                    size = 1; break;
   17e4c:	2301      	movs	r3, #1
   17e4e:	60fb      	str	r3, [r7, #12]
   17e50:	e014      	b.n	17e7c <mp_binary_get_size+0x12c>
                case 'h': case 'H':
                    size = 2; break;
   17e52:	2302      	movs	r3, #2
   17e54:	60fb      	str	r3, [r7, #12]
   17e56:	e011      	b.n	17e7c <mp_binary_get_size+0x12c>
                case 'i': case 'I':
                    size = 4; break;
   17e58:	2304      	movs	r3, #4
   17e5a:	60fb      	str	r3, [r7, #12]
   17e5c:	e00e      	b.n	17e7c <mp_binary_get_size+0x12c>
                case 'l': case 'L':
                    size = 4; break;
   17e5e:	2304      	movs	r3, #4
   17e60:	60fb      	str	r3, [r7, #12]
   17e62:	e00b      	b.n	17e7c <mp_binary_get_size+0x12c>
                case 'q': case 'Q':
                    size = 8; break;
   17e64:	2308      	movs	r3, #8
   17e66:	60fb      	str	r3, [r7, #12]
   17e68:	e008      	b.n	17e7c <mp_binary_get_size+0x12c>
                case 'P': case 'O': case 'S':
                    size = sizeof(void*); break;
   17e6a:	2304      	movs	r3, #4
   17e6c:	60fb      	str	r3, [r7, #12]
   17e6e:	e005      	b.n	17e7c <mp_binary_get_size+0x12c>
                case 'f':
                    size = sizeof(float); break;
   17e70:	2304      	movs	r3, #4
   17e72:	60fb      	str	r3, [r7, #12]
   17e74:	e002      	b.n	17e7c <mp_binary_get_size+0x12c>
                case 'd':
                    size = sizeof(double); break;
   17e76:	2308      	movs	r3, #8
   17e78:	60fb      	str	r3, [r7, #12]
   17e7a:	bf00      	nop
            }
            break;
   17e7c:	e112      	b.n	180a4 <mp_binary_get_size+0x354>
            // size, but that doesn't work for "bigger than int" types,
            // for example, long long may very well have long alignment
            // So, we introduce separate alignment handling, but having
            // formal support for that is different from actually supporting
            // particular (or any) ABI.
            switch (val_type) {
   17e7e:	79bb      	ldrb	r3, [r7, #6]
   17e80:	3b01      	subs	r3, #1
   17e82:	2b70      	cmp	r3, #112	; 0x70
   17e84:	f200 810f 	bhi.w	180a6 <mp_binary_get_size+0x356>
   17e88:	a201      	add	r2, pc, #4	; (adr r2, 17e90 <mp_binary_get_size+0x140>)
   17e8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   17e8e:	bf00      	nop
   17e90:	00018055 	.word	0x00018055
   17e94:	000180a7 	.word	0x000180a7
   17e98:	000180a7 	.word	0x000180a7
   17e9c:	000180a7 	.word	0x000180a7
   17ea0:	000180a7 	.word	0x000180a7
   17ea4:	000180a7 	.word	0x000180a7
   17ea8:	000180a7 	.word	0x000180a7
   17eac:	000180a7 	.word	0x000180a7
   17eb0:	000180a7 	.word	0x000180a7
   17eb4:	000180a7 	.word	0x000180a7
   17eb8:	000180a7 	.word	0x000180a7
   17ebc:	000180a7 	.word	0x000180a7
   17ec0:	000180a7 	.word	0x000180a7
   17ec4:	000180a7 	.word	0x000180a7
   17ec8:	000180a7 	.word	0x000180a7
   17ecc:	000180a7 	.word	0x000180a7
   17ed0:	000180a7 	.word	0x000180a7
   17ed4:	000180a7 	.word	0x000180a7
   17ed8:	000180a7 	.word	0x000180a7
   17edc:	000180a7 	.word	0x000180a7
   17ee0:	000180a7 	.word	0x000180a7
   17ee4:	000180a7 	.word	0x000180a7
   17ee8:	000180a7 	.word	0x000180a7
   17eec:	000180a7 	.word	0x000180a7
   17ef0:	000180a7 	.word	0x000180a7
   17ef4:	000180a7 	.word	0x000180a7
   17ef8:	000180a7 	.word	0x000180a7
   17efc:	000180a7 	.word	0x000180a7
   17f00:	000180a7 	.word	0x000180a7
   17f04:	000180a7 	.word	0x000180a7
   17f08:	000180a7 	.word	0x000180a7
   17f0c:	000180a7 	.word	0x000180a7
   17f10:	000180a7 	.word	0x000180a7
   17f14:	000180a7 	.word	0x000180a7
   17f18:	000180a7 	.word	0x000180a7
   17f1c:	000180a7 	.word	0x000180a7
   17f20:	000180a7 	.word	0x000180a7
   17f24:	000180a7 	.word	0x000180a7
   17f28:	000180a7 	.word	0x000180a7
   17f2c:	000180a7 	.word	0x000180a7
   17f30:	000180a7 	.word	0x000180a7
   17f34:	000180a7 	.word	0x000180a7
   17f38:	000180a7 	.word	0x000180a7
   17f3c:	000180a7 	.word	0x000180a7
   17f40:	000180a7 	.word	0x000180a7
   17f44:	000180a7 	.word	0x000180a7
   17f48:	000180a7 	.word	0x000180a7
   17f4c:	000180a7 	.word	0x000180a7
   17f50:	000180a7 	.word	0x000180a7
   17f54:	000180a7 	.word	0x000180a7
   17f58:	000180a7 	.word	0x000180a7
   17f5c:	000180a7 	.word	0x000180a7
   17f60:	000180a7 	.word	0x000180a7
   17f64:	000180a7 	.word	0x000180a7
   17f68:	000180a7 	.word	0x000180a7
   17f6c:	000180a7 	.word	0x000180a7
   17f70:	000180a7 	.word	0x000180a7
   17f74:	000180a7 	.word	0x000180a7
   17f78:	000180a7 	.word	0x000180a7
   17f7c:	000180a7 	.word	0x000180a7
   17f80:	000180a7 	.word	0x000180a7
   17f84:	000180a7 	.word	0x000180a7
   17f88:	000180a7 	.word	0x000180a7
   17f8c:	000180a7 	.word	0x000180a7
   17f90:	000180a7 	.word	0x000180a7
   17f94:	00018055 	.word	0x00018055
   17f98:	000180a7 	.word	0x000180a7
   17f9c:	000180a7 	.word	0x000180a7
   17fa0:	000180a7 	.word	0x000180a7
   17fa4:	000180a7 	.word	0x000180a7
   17fa8:	000180a7 	.word	0x000180a7
   17fac:	0001805f 	.word	0x0001805f
   17fb0:	00018069 	.word	0x00018069
   17fb4:	000180a7 	.word	0x000180a7
   17fb8:	000180a7 	.word	0x000180a7
   17fbc:	00018073 	.word	0x00018073
   17fc0:	000180a7 	.word	0x000180a7
   17fc4:	000180a7 	.word	0x000180a7
   17fc8:	00018087 	.word	0x00018087
   17fcc:	00018087 	.word	0x00018087
   17fd0:	0001807d 	.word	0x0001807d
   17fd4:	000180a7 	.word	0x000180a7
   17fd8:	00018087 	.word	0x00018087
   17fdc:	000180a7 	.word	0x000180a7
   17fe0:	000180a7 	.word	0x000180a7
   17fe4:	000180a7 	.word	0x000180a7
   17fe8:	000180a7 	.word	0x000180a7
   17fec:	000180a7 	.word	0x000180a7
   17ff0:	000180a7 	.word	0x000180a7
   17ff4:	000180a7 	.word	0x000180a7
   17ff8:	000180a7 	.word	0x000180a7
   17ffc:	000180a7 	.word	0x000180a7
   18000:	000180a7 	.word	0x000180a7
   18004:	000180a7 	.word	0x000180a7
   18008:	000180a7 	.word	0x000180a7
   1800c:	000180a7 	.word	0x000180a7
   18010:	000180a7 	.word	0x000180a7
   18014:	00018055 	.word	0x00018055
   18018:	000180a7 	.word	0x000180a7
   1801c:	0001809b 	.word	0x0001809b
   18020:	000180a7 	.word	0x000180a7
   18024:	00018091 	.word	0x00018091
   18028:	000180a7 	.word	0x000180a7
   1802c:	0001805f 	.word	0x0001805f
   18030:	00018069 	.word	0x00018069
   18034:	000180a7 	.word	0x000180a7
   18038:	000180a7 	.word	0x000180a7
   1803c:	00018073 	.word	0x00018073
   18040:	000180a7 	.word	0x000180a7
   18044:	000180a7 	.word	0x000180a7
   18048:	000180a7 	.word	0x000180a7
   1804c:	000180a7 	.word	0x000180a7
   18050:	0001807d 	.word	0x0001807d
                case BYTEARRAY_TYPECODE:
                case 'b': case 'B':
                    align = size = 1; break;
   18054:	2301      	movs	r3, #1
   18056:	60fb      	str	r3, [r7, #12]
   18058:	2301      	movs	r3, #1
   1805a:	60bb      	str	r3, [r7, #8]
   1805c:	e023      	b.n	180a6 <mp_binary_get_size+0x356>
                case 'h': case 'H':
                    align = alignof(short);
   1805e:	2302      	movs	r3, #2
   18060:	60bb      	str	r3, [r7, #8]
                    size = sizeof(short); break;
   18062:	2302      	movs	r3, #2
   18064:	60fb      	str	r3, [r7, #12]
   18066:	e01e      	b.n	180a6 <mp_binary_get_size+0x356>
                case 'i': case 'I':
                    align = alignof(int);
   18068:	2304      	movs	r3, #4
   1806a:	60bb      	str	r3, [r7, #8]
                    size = sizeof(int); break;
   1806c:	2304      	movs	r3, #4
   1806e:	60fb      	str	r3, [r7, #12]
   18070:	e019      	b.n	180a6 <mp_binary_get_size+0x356>
                case 'l': case 'L':
                    align = alignof(long);
   18072:	2304      	movs	r3, #4
   18074:	60bb      	str	r3, [r7, #8]
                    size = sizeof(long); break;
   18076:	2304      	movs	r3, #4
   18078:	60fb      	str	r3, [r7, #12]
   1807a:	e014      	b.n	180a6 <mp_binary_get_size+0x356>
                case 'q': case 'Q':
                    align = alignof(long long);
   1807c:	2308      	movs	r3, #8
   1807e:	60bb      	str	r3, [r7, #8]
                    size = sizeof(long long); break;
   18080:	2308      	movs	r3, #8
   18082:	60fb      	str	r3, [r7, #12]
   18084:	e00f      	b.n	180a6 <mp_binary_get_size+0x356>
                case 'P': case 'O': case 'S':
                    align = alignof(void*);
   18086:	2304      	movs	r3, #4
   18088:	60bb      	str	r3, [r7, #8]
                    size = sizeof(void*); break;
   1808a:	2304      	movs	r3, #4
   1808c:	60fb      	str	r3, [r7, #12]
   1808e:	e00a      	b.n	180a6 <mp_binary_get_size+0x356>
                case 'f':
                    align = alignof(float);
   18090:	2304      	movs	r3, #4
   18092:	60bb      	str	r3, [r7, #8]
                    size = sizeof(float); break;
   18094:	2304      	movs	r3, #4
   18096:	60fb      	str	r3, [r7, #12]
   18098:	e005      	b.n	180a6 <mp_binary_get_size+0x356>
                case 'd':
                    align = alignof(double);
   1809a:	2308      	movs	r3, #8
   1809c:	60bb      	str	r3, [r7, #8]
                    size = sizeof(double); break;
   1809e:	2308      	movs	r3, #8
   180a0:	60fb      	str	r3, [r7, #12]
   180a2:	e000      	b.n	180a6 <mp_binary_get_size+0x356>
            break;
   180a4:	bf00      	nop
            }
        }
    }

    if (size == 0) {
   180a6:	68fb      	ldr	r3, [r7, #12]
   180a8:	2b00      	cmp	r3, #0
   180aa:	d102      	bne.n	180b2 <mp_binary_get_size+0x362>
        mp_raise_ValueError("bad typecode");
   180ac:	4806      	ldr	r0, [pc, #24]	; (180c8 <mp_binary_get_size+0x378>)
   180ae:	f7f5 f897 	bl	d1e0 <mp_raise_ValueError>
    }

    if (palign != NULL) {
   180b2:	683b      	ldr	r3, [r7, #0]
   180b4:	2b00      	cmp	r3, #0
   180b6:	d002      	beq.n	180be <mp_binary_get_size+0x36e>
        *palign = align;
   180b8:	68ba      	ldr	r2, [r7, #8]
   180ba:	683b      	ldr	r3, [r7, #0]
   180bc:	601a      	str	r2, [r3, #0]
    }
    return size;
   180be:	68fb      	ldr	r3, [r7, #12]
}
   180c0:	4618      	mov	r0, r3
   180c2:	3710      	adds	r7, #16
   180c4:	46bd      	mov	sp, r7
   180c6:	bd80      	pop	{r7, pc}
   180c8:	0002454c 	.word	0x0002454c

000180cc <mp_binary_get_val_array>:

mp_obj_t mp_binary_get_val_array(char typecode, void *p, mp_uint_t index) {
   180cc:	b580      	push	{r7, lr}
   180ce:	b086      	sub	sp, #24
   180d0:	af00      	add	r7, sp, #0
   180d2:	4603      	mov	r3, r0
   180d4:	60b9      	str	r1, [r7, #8]
   180d6:	607a      	str	r2, [r7, #4]
   180d8:	73fb      	strb	r3, [r7, #15]
    mp_int_t val = 0;
   180da:	2300      	movs	r3, #0
   180dc:	617b      	str	r3, [r7, #20]
    switch (typecode) {
   180de:	7bfb      	ldrb	r3, [r7, #15]
   180e0:	3b01      	subs	r3, #1
   180e2:	2b6b      	cmp	r3, #107	; 0x6b
   180e4:	f200 8130 	bhi.w	18348 <mp_binary_get_val_array+0x27c>
   180e8:	a201      	add	r2, pc, #4	; (adr r2, 180f0 <mp_binary_get_val_array+0x24>)
   180ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   180ee:	bf00      	nop
   180f0:	000182af 	.word	0x000182af
   180f4:	00018349 	.word	0x00018349
   180f8:	00018349 	.word	0x00018349
   180fc:	00018349 	.word	0x00018349
   18100:	00018349 	.word	0x00018349
   18104:	00018349 	.word	0x00018349
   18108:	00018349 	.word	0x00018349
   1810c:	00018349 	.word	0x00018349
   18110:	00018349 	.word	0x00018349
   18114:	00018349 	.word	0x00018349
   18118:	00018349 	.word	0x00018349
   1811c:	00018349 	.word	0x00018349
   18120:	00018349 	.word	0x00018349
   18124:	00018349 	.word	0x00018349
   18128:	00018349 	.word	0x00018349
   1812c:	00018349 	.word	0x00018349
   18130:	00018349 	.word	0x00018349
   18134:	00018349 	.word	0x00018349
   18138:	00018349 	.word	0x00018349
   1813c:	00018349 	.word	0x00018349
   18140:	00018349 	.word	0x00018349
   18144:	00018349 	.word	0x00018349
   18148:	00018349 	.word	0x00018349
   1814c:	00018349 	.word	0x00018349
   18150:	00018349 	.word	0x00018349
   18154:	00018349 	.word	0x00018349
   18158:	00018349 	.word	0x00018349
   1815c:	00018349 	.word	0x00018349
   18160:	00018349 	.word	0x00018349
   18164:	00018349 	.word	0x00018349
   18168:	00018349 	.word	0x00018349
   1816c:	00018349 	.word	0x00018349
   18170:	00018349 	.word	0x00018349
   18174:	00018349 	.word	0x00018349
   18178:	00018349 	.word	0x00018349
   1817c:	00018349 	.word	0x00018349
   18180:	00018349 	.word	0x00018349
   18184:	00018349 	.word	0x00018349
   18188:	00018349 	.word	0x00018349
   1818c:	00018349 	.word	0x00018349
   18190:	00018349 	.word	0x00018349
   18194:	00018349 	.word	0x00018349
   18198:	00018349 	.word	0x00018349
   1819c:	00018349 	.word	0x00018349
   181a0:	00018349 	.word	0x00018349
   181a4:	00018349 	.word	0x00018349
   181a8:	00018349 	.word	0x00018349
   181ac:	00018349 	.word	0x00018349
   181b0:	00018349 	.word	0x00018349
   181b4:	00018349 	.word	0x00018349
   181b8:	00018349 	.word	0x00018349
   181bc:	00018349 	.word	0x00018349
   181c0:	00018349 	.word	0x00018349
   181c4:	00018349 	.word	0x00018349
   181c8:	00018349 	.word	0x00018349
   181cc:	00018349 	.word	0x00018349
   181d0:	00018349 	.word	0x00018349
   181d4:	00018349 	.word	0x00018349
   181d8:	00018349 	.word	0x00018349
   181dc:	00018349 	.word	0x00018349
   181e0:	00018349 	.word	0x00018349
   181e4:	00018349 	.word	0x00018349
   181e8:	00018349 	.word	0x00018349
   181ec:	00018349 	.word	0x00018349
   181f0:	00018349 	.word	0x00018349
   181f4:	000182af 	.word	0x000182af
   181f8:	00018349 	.word	0x00018349
   181fc:	00018349 	.word	0x00018349
   18200:	00018349 	.word	0x00018349
   18204:	00018349 	.word	0x00018349
   18208:	00018349 	.word	0x00018349
   1820c:	000182cb 	.word	0x000182cb
   18210:	000182ed 	.word	0x000182ed
   18214:	00018349 	.word	0x00018349
   18218:	00018349 	.word	0x00018349
   1821c:	00018315 	.word	0x00018315
   18220:	00018349 	.word	0x00018349
   18224:	00018349 	.word	0x00018349
   18228:	00018329 	.word	0x00018329
   1822c:	00018335 	.word	0x00018335
   18230:	00018349 	.word	0x00018349
   18234:	00018349 	.word	0x00018349
   18238:	00018349 	.word	0x00018349
   1823c:	00018349 	.word	0x00018349
   18240:	00018349 	.word	0x00018349
   18244:	00018349 	.word	0x00018349
   18248:	00018349 	.word	0x00018349
   1824c:	00018349 	.word	0x00018349
   18250:	00018349 	.word	0x00018349
   18254:	00018349 	.word	0x00018349
   18258:	00018349 	.word	0x00018349
   1825c:	00018349 	.word	0x00018349
   18260:	00018349 	.word	0x00018349
   18264:	00018349 	.word	0x00018349
   18268:	00018349 	.word	0x00018349
   1826c:	00018349 	.word	0x00018349
   18270:	00018349 	.word	0x00018349
   18274:	000182a1 	.word	0x000182a1
   18278:	00018349 	.word	0x00018349
   1827c:	00018349 	.word	0x00018349
   18280:	00018349 	.word	0x00018349
   18284:	00018349 	.word	0x00018349
   18288:	00018349 	.word	0x00018349
   1828c:	000182bb 	.word	0x000182bb
   18290:	000182d9 	.word	0x000182d9
   18294:	00018349 	.word	0x00018349
   18298:	00018349 	.word	0x00018349
   1829c:	00018301 	.word	0x00018301
        case 'b':
            val = ((signed char*)p)[index];
   182a0:	68ba      	ldr	r2, [r7, #8]
   182a2:	687b      	ldr	r3, [r7, #4]
   182a4:	4413      	add	r3, r2
   182a6:	f993 3000 	ldrsb.w	r3, [r3]
   182aa:	617b      	str	r3, [r7, #20]
            break;
   182ac:	e04c      	b.n	18348 <mp_binary_get_val_array+0x27c>
        case BYTEARRAY_TYPECODE:
        case 'B':
            val = ((unsigned char*)p)[index];
   182ae:	68ba      	ldr	r2, [r7, #8]
   182b0:	687b      	ldr	r3, [r7, #4]
   182b2:	4413      	add	r3, r2
   182b4:	781b      	ldrb	r3, [r3, #0]
   182b6:	617b      	str	r3, [r7, #20]
            break;
   182b8:	e046      	b.n	18348 <mp_binary_get_val_array+0x27c>
        case 'h':
            val = ((short*)p)[index];
   182ba:	687b      	ldr	r3, [r7, #4]
   182bc:	005b      	lsls	r3, r3, #1
   182be:	68ba      	ldr	r2, [r7, #8]
   182c0:	4413      	add	r3, r2
   182c2:	f9b3 3000 	ldrsh.w	r3, [r3]
   182c6:	617b      	str	r3, [r7, #20]
            break;
   182c8:	e03e      	b.n	18348 <mp_binary_get_val_array+0x27c>
        case 'H':
            val = ((unsigned short*)p)[index];
   182ca:	687b      	ldr	r3, [r7, #4]
   182cc:	005b      	lsls	r3, r3, #1
   182ce:	68ba      	ldr	r2, [r7, #8]
   182d0:	4413      	add	r3, r2
   182d2:	881b      	ldrh	r3, [r3, #0]
   182d4:	617b      	str	r3, [r7, #20]
            break;
   182d6:	e037      	b.n	18348 <mp_binary_get_val_array+0x27c>
        case 'i':
            return mp_obj_new_int(((int*)p)[index]);
   182d8:	687b      	ldr	r3, [r7, #4]
   182da:	009b      	lsls	r3, r3, #2
   182dc:	68ba      	ldr	r2, [r7, #8]
   182de:	4413      	add	r3, r2
   182e0:	681b      	ldr	r3, [r3, #0]
   182e2:	4618      	mov	r0, r3
   182e4:	f7f8 fc6a 	bl	10bbc <mp_obj_new_int>
   182e8:	4603      	mov	r3, r0
   182ea:	e031      	b.n	18350 <mp_binary_get_val_array+0x284>
        case 'I':
            return mp_obj_new_int_from_uint(((unsigned int*)p)[index]);
   182ec:	687b      	ldr	r3, [r7, #4]
   182ee:	009b      	lsls	r3, r3, #2
   182f0:	68ba      	ldr	r2, [r7, #8]
   182f2:	4413      	add	r3, r2
   182f4:	681b      	ldr	r3, [r3, #0]
   182f6:	4618      	mov	r0, r3
   182f8:	f7f8 fc46 	bl	10b88 <mp_obj_new_int_from_uint>
   182fc:	4603      	mov	r3, r0
   182fe:	e027      	b.n	18350 <mp_binary_get_val_array+0x284>
        case 'l':
            return mp_obj_new_int(((long*)p)[index]);
   18300:	687b      	ldr	r3, [r7, #4]
   18302:	009b      	lsls	r3, r3, #2
   18304:	68ba      	ldr	r2, [r7, #8]
   18306:	4413      	add	r3, r2
   18308:	681b      	ldr	r3, [r3, #0]
   1830a:	4618      	mov	r0, r3
   1830c:	f7f8 fc56 	bl	10bbc <mp_obj_new_int>
   18310:	4603      	mov	r3, r0
   18312:	e01d      	b.n	18350 <mp_binary_get_val_array+0x284>
        case 'L':
            return mp_obj_new_int_from_uint(((unsigned long*)p)[index]);
   18314:	687b      	ldr	r3, [r7, #4]
   18316:	009b      	lsls	r3, r3, #2
   18318:	68ba      	ldr	r2, [r7, #8]
   1831a:	4413      	add	r3, r2
   1831c:	681b      	ldr	r3, [r3, #0]
   1831e:	4618      	mov	r0, r3
   18320:	f7f8 fc32 	bl	10b88 <mp_obj_new_int_from_uint>
   18324:	4603      	mov	r3, r0
   18326:	e013      	b.n	18350 <mp_binary_get_val_array+0x284>
        case 'd':
            return mp_obj_new_float(((double*)p)[index]);
#endif
        // Extension to CPython: array of objects
        case 'O':
            return ((mp_obj_t*)p)[index];
   18328:	687b      	ldr	r3, [r7, #4]
   1832a:	009b      	lsls	r3, r3, #2
   1832c:	68ba      	ldr	r2, [r7, #8]
   1832e:	4413      	add	r3, r2
   18330:	681b      	ldr	r3, [r3, #0]
   18332:	e00d      	b.n	18350 <mp_binary_get_val_array+0x284>
        // Extension to CPython: array of pointers
        case 'P':
            return mp_obj_new_int((mp_int_t)(uintptr_t)((void**)p)[index]);
   18334:	687b      	ldr	r3, [r7, #4]
   18336:	009b      	lsls	r3, r3, #2
   18338:	68ba      	ldr	r2, [r7, #8]
   1833a:	4413      	add	r3, r2
   1833c:	681b      	ldr	r3, [r3, #0]
   1833e:	4618      	mov	r0, r3
   18340:	f7f8 fc3c 	bl	10bbc <mp_obj_new_int>
   18344:	4603      	mov	r3, r0
   18346:	e003      	b.n	18350 <mp_binary_get_val_array+0x284>
    }
    return MP_OBJ_NEW_SMALL_INT(val);
   18348:	697b      	ldr	r3, [r7, #20]
   1834a:	005b      	lsls	r3, r3, #1
   1834c:	f043 0301 	orr.w	r3, r3, #1
}
   18350:	4618      	mov	r0, r3
   18352:	3718      	adds	r7, #24
   18354:	46bd      	mov	sp, r7
   18356:	bd80      	pop	{r7, pc}

00018358 <mp_binary_get_int>:

// The long long type is guaranteed to hold at least 64 bits, and size is at
// most 8 (for q and Q), so we will always be able to parse the given data
// and fit it into a long long.
long long mp_binary_get_int(mp_uint_t size, bool is_signed, bool big_endian, const byte *src) {
   18358:	b4b0      	push	{r4, r5, r7}
   1835a:	b08b      	sub	sp, #44	; 0x2c
   1835c:	af00      	add	r7, sp, #0
   1835e:	60f8      	str	r0, [r7, #12]
   18360:	607b      	str	r3, [r7, #4]
   18362:	460b      	mov	r3, r1
   18364:	72fb      	strb	r3, [r7, #11]
   18366:	4613      	mov	r3, r2
   18368:	72bb      	strb	r3, [r7, #10]
    int delta;
    if (!big_endian) {
   1836a:	7abb      	ldrb	r3, [r7, #10]
   1836c:	f083 0301 	eor.w	r3, r3, #1
   18370:	b2db      	uxtb	r3, r3
   18372:	2b00      	cmp	r3, #0
   18374:	d008      	beq.n	18388 <mp_binary_get_int+0x30>
        delta = -1;
   18376:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1837a:	627b      	str	r3, [r7, #36]	; 0x24
        src += size - 1;
   1837c:	68fb      	ldr	r3, [r7, #12]
   1837e:	3b01      	subs	r3, #1
   18380:	687a      	ldr	r2, [r7, #4]
   18382:	4413      	add	r3, r2
   18384:	607b      	str	r3, [r7, #4]
   18386:	e001      	b.n	1838c <mp_binary_get_int+0x34>
    } else {
        delta = 1;
   18388:	2301      	movs	r3, #1
   1838a:	627b      	str	r3, [r7, #36]	; 0x24
    }

    long long val = 0;
   1838c:	f04f 0200 	mov.w	r2, #0
   18390:	f04f 0300 	mov.w	r3, #0
   18394:	e9c7 2306 	strd	r2, r3, [r7, #24]
    if (is_signed && *src & 0x80) {
   18398:	7afb      	ldrb	r3, [r7, #11]
   1839a:	2b00      	cmp	r3, #0
   1839c:	d00a      	beq.n	183b4 <mp_binary_get_int+0x5c>
   1839e:	687b      	ldr	r3, [r7, #4]
   183a0:	781b      	ldrb	r3, [r3, #0]
   183a2:	b25b      	sxtb	r3, r3
   183a4:	2b00      	cmp	r3, #0
   183a6:	da05      	bge.n	183b4 <mp_binary_get_int+0x5c>
        val = -1;
   183a8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   183ac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   183b0:	e9c7 2306 	strd	r2, r3, [r7, #24]
    }
    for (uint i = 0; i < size; i++) {
   183b4:	2300      	movs	r3, #0
   183b6:	617b      	str	r3, [r7, #20]
   183b8:	e01b      	b.n	183f2 <mp_binary_get_int+0x9a>
        val <<= 8;
   183ba:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
   183be:	021d      	lsls	r5, r3, #8
   183c0:	ea45 6512 	orr.w	r5, r5, r2, lsr #24
   183c4:	0214      	lsls	r4, r2, #8
   183c6:	e9c7 4506 	strd	r4, r5, [r7, #24]
        val |= *src;
   183ca:	687b      	ldr	r3, [r7, #4]
   183cc:	781b      	ldrb	r3, [r3, #0]
   183ce:	b2da      	uxtb	r2, r3
   183d0:	f04f 0300 	mov.w	r3, #0
   183d4:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
   183d8:	ea42 0200 	orr.w	r2, r2, r0
   183dc:	ea43 0301 	orr.w	r3, r3, r1
   183e0:	e9c7 2306 	strd	r2, r3, [r7, #24]
        src += delta;
   183e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   183e6:	687a      	ldr	r2, [r7, #4]
   183e8:	4413      	add	r3, r2
   183ea:	607b      	str	r3, [r7, #4]
    for (uint i = 0; i < size; i++) {
   183ec:	697b      	ldr	r3, [r7, #20]
   183ee:	3301      	adds	r3, #1
   183f0:	617b      	str	r3, [r7, #20]
   183f2:	697a      	ldr	r2, [r7, #20]
   183f4:	68fb      	ldr	r3, [r7, #12]
   183f6:	429a      	cmp	r2, r3
   183f8:	d3df      	bcc.n	183ba <mp_binary_get_int+0x62>
    }

    return val;
   183fa:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
}
   183fe:	4618      	mov	r0, r3
   18400:	4621      	mov	r1, r4
   18402:	372c      	adds	r7, #44	; 0x2c
   18404:	46bd      	mov	sp, r7
   18406:	bcb0      	pop	{r4, r5, r7}
   18408:	4770      	bx	lr
   1840a:	bf00      	nop

0001840c <mp_binary_get_val>:

#define is_signed(typecode) (typecode > 'Z')
mp_obj_t mp_binary_get_val(char struct_type, char val_type, byte **ptr) {
   1840c:	b590      	push	{r4, r7, lr}
   1840e:	b089      	sub	sp, #36	; 0x24
   18410:	af00      	add	r7, sp, #0
   18412:	4603      	mov	r3, r0
   18414:	603a      	str	r2, [r7, #0]
   18416:	71fb      	strb	r3, [r7, #7]
   18418:	460b      	mov	r3, r1
   1841a:	71bb      	strb	r3, [r7, #6]
    byte *p = *ptr;
   1841c:	683b      	ldr	r3, [r7, #0]
   1841e:	681b      	ldr	r3, [r3, #0]
   18420:	61fb      	str	r3, [r7, #28]
    mp_uint_t align;

    size_t size = mp_binary_get_size(struct_type, val_type, &align);
   18422:	f107 0208 	add.w	r2, r7, #8
   18426:	79b9      	ldrb	r1, [r7, #6]
   18428:	79fb      	ldrb	r3, [r7, #7]
   1842a:	4618      	mov	r0, r3
   1842c:	f7ff fc90 	bl	17d50 <mp_binary_get_size>
   18430:	61b8      	str	r0, [r7, #24]
    if (struct_type == '@') {
   18432:	79fb      	ldrb	r3, [r7, #7]
   18434:	2b40      	cmp	r3, #64	; 0x40
   18436:	d109      	bne.n	1844c <mp_binary_get_val+0x40>
        // Make pointer aligned
        p = (byte*)MP_ALIGN(p, (size_t)align);
   18438:	68ba      	ldr	r2, [r7, #8]
   1843a:	69fb      	ldr	r3, [r7, #28]
   1843c:	4413      	add	r3, r2
   1843e:	1e5a      	subs	r2, r3, #1
   18440:	68bb      	ldr	r3, [r7, #8]
   18442:	425b      	negs	r3, r3
   18444:	4013      	ands	r3, r2
   18446:	61fb      	str	r3, [r7, #28]
        #if MP_ENDIANNESS_LITTLE
        struct_type = '<';
   18448:	233c      	movs	r3, #60	; 0x3c
   1844a:	71fb      	strb	r3, [r7, #7]
        #else
        struct_type = '>';
        #endif
    }
    *ptr = p + size;
   1844c:	69fa      	ldr	r2, [r7, #28]
   1844e:	69bb      	ldr	r3, [r7, #24]
   18450:	441a      	add	r2, r3
   18452:	683b      	ldr	r3, [r7, #0]
   18454:	601a      	str	r2, [r3, #0]

    long long val = mp_binary_get_int(size, is_signed(val_type), (struct_type == '>'), p);
   18456:	79bb      	ldrb	r3, [r7, #6]
   18458:	2b5a      	cmp	r3, #90	; 0x5a
   1845a:	bf8c      	ite	hi
   1845c:	2301      	movhi	r3, #1
   1845e:	2300      	movls	r3, #0
   18460:	b2d9      	uxtb	r1, r3
   18462:	79fb      	ldrb	r3, [r7, #7]
   18464:	2b3e      	cmp	r3, #62	; 0x3e
   18466:	bf0c      	ite	eq
   18468:	2301      	moveq	r3, #1
   1846a:	2300      	movne	r3, #0
   1846c:	b2da      	uxtb	r2, r3
   1846e:	69fb      	ldr	r3, [r7, #28]
   18470:	69b8      	ldr	r0, [r7, #24]
   18472:	f7ff ff71 	bl	18358 <mp_binary_get_int>
   18476:	e9c7 0104 	strd	r0, r1, [r7, #16]

    if (val_type == 'O') {
   1847a:	79bb      	ldrb	r3, [r7, #6]
   1847c:	2b4f      	cmp	r3, #79	; 0x4f
   1847e:	d101      	bne.n	18484 <mp_binary_get_val+0x78>
        return (mp_obj_t)(mp_uint_t)val;
   18480:	693b      	ldr	r3, [r7, #16]
   18482:	e045      	b.n	18510 <mp_binary_get_val+0x104>
    } else if (val_type == 'S') {
   18484:	79bb      	ldrb	r3, [r7, #6]
   18486:	2b53      	cmp	r3, #83	; 0x53
   18488:	d10b      	bne.n	184a2 <mp_binary_get_val+0x96>
        const char *s_val = (const char*)(uintptr_t)(mp_uint_t)val;
   1848a:	693b      	ldr	r3, [r7, #16]
   1848c:	60fb      	str	r3, [r7, #12]
        return mp_obj_new_str(s_val, strlen(s_val));
   1848e:	68f8      	ldr	r0, [r7, #12]
   18490:	f004 fd2c 	bl	1ceec <strlen>
   18494:	4603      	mov	r3, r0
   18496:	4619      	mov	r1, r3
   18498:	68f8      	ldr	r0, [r7, #12]
   1849a:	f7fd f8e1 	bl	15660 <mp_obj_new_str>
   1849e:	4603      	mov	r3, r0
   184a0:	e036      	b.n	18510 <mp_binary_get_val+0x104>
        return mp_obj_new_float(fpu.f);
    } else if (val_type == 'd') {
        union { uint64_t i; double f; } fpu = {val};
        return mp_obj_new_float(fpu.f);
#endif
    } else if (is_signed(val_type)) {
   184a2:	79bb      	ldrb	r3, [r7, #6]
   184a4:	2b5a      	cmp	r3, #90	; 0x5a
   184a6:	d91c      	bls.n	184e2 <mp_binary_get_val+0xd6>
        if ((long long)MP_SMALL_INT_MIN <= val && val <= (long long)MP_SMALL_INT_MAX) {
   184a8:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
   184ac:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
   184b0:	f174 33ff 	sbcs.w	r3, r4, #4294967295	; 0xffffffff
   184b4:	db0f      	blt.n	184d6 <mp_binary_get_val+0xca>
   184b6:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
   184ba:	f06f 4140 	mvn.w	r1, #3221225472	; 0xc0000000
   184be:	f04f 0200 	mov.w	r2, #0
   184c2:	4299      	cmp	r1, r3
   184c4:	eb72 0304 	sbcs.w	r3, r2, r4
   184c8:	db05      	blt.n	184d6 <mp_binary_get_val+0xca>
            return mp_obj_new_int((mp_int_t)val);
   184ca:	693b      	ldr	r3, [r7, #16]
   184cc:	4618      	mov	r0, r3
   184ce:	f7f8 fb75 	bl	10bbc <mp_obj_new_int>
   184d2:	4603      	mov	r3, r0
   184d4:	e01c      	b.n	18510 <mp_binary_get_val+0x104>
        } else {
            return mp_obj_new_int_from_ll(val);
   184d6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
   184da:	f7f8 fb39 	bl	10b50 <mp_obj_new_int_from_ll>
   184de:	4603      	mov	r3, r0
   184e0:	e016      	b.n	18510 <mp_binary_get_val+0x104>
        }
    } else {
        if ((unsigned long long)val <= (unsigned long long)MP_SMALL_INT_MAX) {
   184e2:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
   184e6:	f06f 4140 	mvn.w	r1, #3221225472	; 0xc0000000
   184ea:	f04f 0200 	mov.w	r2, #0
   184ee:	42a2      	cmp	r2, r4
   184f0:	bf08      	it	eq
   184f2:	4299      	cmpeq	r1, r3
   184f4:	d305      	bcc.n	18502 <mp_binary_get_val+0xf6>
            return mp_obj_new_int_from_uint((mp_uint_t)val);
   184f6:	693b      	ldr	r3, [r7, #16]
   184f8:	4618      	mov	r0, r3
   184fa:	f7f8 fb45 	bl	10b88 <mp_obj_new_int_from_uint>
   184fe:	4603      	mov	r3, r0
   18500:	e006      	b.n	18510 <mp_binary_get_val+0x104>
        } else {
            return mp_obj_new_int_from_ull(val);
   18502:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
   18506:	4618      	mov	r0, r3
   18508:	4621      	mov	r1, r4
   1850a:	f7f8 fb2f 	bl	10b6c <mp_obj_new_int_from_ull>
   1850e:	4603      	mov	r3, r0
        }
    }
}
   18510:	4618      	mov	r0, r3
   18512:	3724      	adds	r7, #36	; 0x24
   18514:	46bd      	mov	sp, r7
   18516:	bd90      	pop	{r4, r7, pc}

00018518 <mp_binary_set_int>:

void mp_binary_set_int(mp_uint_t val_sz, bool big_endian, byte *dest, mp_uint_t val) {
   18518:	b580      	push	{r7, lr}
   1851a:	b086      	sub	sp, #24
   1851c:	af00      	add	r7, sp, #0
   1851e:	60f8      	str	r0, [r7, #12]
   18520:	607a      	str	r2, [r7, #4]
   18522:	603b      	str	r3, [r7, #0]
   18524:	460b      	mov	r3, r1
   18526:	72fb      	strb	r3, [r7, #11]
    if (MP_ENDIANNESS_LITTLE && !big_endian) {
   18528:	7afb      	ldrb	r3, [r7, #11]
   1852a:	f083 0301 	eor.w	r3, r3, #1
   1852e:	b2db      	uxtb	r3, r3
   18530:	2b00      	cmp	r3, #0
   18532:	d006      	beq.n	18542 <mp_binary_set_int+0x2a>
        memcpy(dest, &val, val_sz);
   18534:	463b      	mov	r3, r7
   18536:	68fa      	ldr	r2, [r7, #12]
   18538:	4619      	mov	r1, r3
   1853a:	6878      	ldr	r0, [r7, #4]
   1853c:	f004 fb9c 	bl	1cc78 <memcpy>
        }
        while (val_sz--) {
            *dest++ = *--src;
        }
    }
}
   18540:	e012      	b.n	18568 <mp_binary_set_int+0x50>
            src = (const byte*)&val + val_sz;
   18542:	463a      	mov	r2, r7
   18544:	68fb      	ldr	r3, [r7, #12]
   18546:	4413      	add	r3, r2
   18548:	617b      	str	r3, [r7, #20]
        while (val_sz--) {
   1854a:	e008      	b.n	1855e <mp_binary_set_int+0x46>
            *dest++ = *--src;
   1854c:	687b      	ldr	r3, [r7, #4]
   1854e:	1c5a      	adds	r2, r3, #1
   18550:	607a      	str	r2, [r7, #4]
   18552:	697a      	ldr	r2, [r7, #20]
   18554:	3a01      	subs	r2, #1
   18556:	617a      	str	r2, [r7, #20]
   18558:	697a      	ldr	r2, [r7, #20]
   1855a:	7812      	ldrb	r2, [r2, #0]
   1855c:	701a      	strb	r2, [r3, #0]
        while (val_sz--) {
   1855e:	68fb      	ldr	r3, [r7, #12]
   18560:	1e5a      	subs	r2, r3, #1
   18562:	60fa      	str	r2, [r7, #12]
   18564:	2b00      	cmp	r3, #0
   18566:	d1f1      	bne.n	1854c <mp_binary_set_int+0x34>
}
   18568:	bf00      	nop
   1856a:	3718      	adds	r7, #24
   1856c:	46bd      	mov	sp, r7
   1856e:	bd80      	pop	{r7, pc}

00018570 <mp_binary_set_val>:

void mp_binary_set_val(char struct_type, char val_type, mp_obj_t val_in, byte **ptr) {
   18570:	b580      	push	{r7, lr}
   18572:	b08a      	sub	sp, #40	; 0x28
   18574:	af00      	add	r7, sp, #0
   18576:	60ba      	str	r2, [r7, #8]
   18578:	607b      	str	r3, [r7, #4]
   1857a:	4603      	mov	r3, r0
   1857c:	73fb      	strb	r3, [r7, #15]
   1857e:	460b      	mov	r3, r1
   18580:	73bb      	strb	r3, [r7, #14]
    byte *p = *ptr;
   18582:	687b      	ldr	r3, [r7, #4]
   18584:	681b      	ldr	r3, [r3, #0]
   18586:	627b      	str	r3, [r7, #36]	; 0x24
    mp_uint_t align;

    size_t size = mp_binary_get_size(struct_type, val_type, &align);
   18588:	f107 0214 	add.w	r2, r7, #20
   1858c:	7bb9      	ldrb	r1, [r7, #14]
   1858e:	7bfb      	ldrb	r3, [r7, #15]
   18590:	4618      	mov	r0, r3
   18592:	f7ff fbdd 	bl	17d50 <mp_binary_get_size>
   18596:	61f8      	str	r0, [r7, #28]
    if (struct_type == '@') {
   18598:	7bfb      	ldrb	r3, [r7, #15]
   1859a:	2b40      	cmp	r3, #64	; 0x40
   1859c:	d109      	bne.n	185b2 <mp_binary_set_val+0x42>
        // Make pointer aligned
        p = (byte*)MP_ALIGN(p, (size_t)align);
   1859e:	697a      	ldr	r2, [r7, #20]
   185a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   185a2:	4413      	add	r3, r2
   185a4:	1e5a      	subs	r2, r3, #1
   185a6:	697b      	ldr	r3, [r7, #20]
   185a8:	425b      	negs	r3, r3
   185aa:	4013      	ands	r3, r2
   185ac:	627b      	str	r3, [r7, #36]	; 0x24
        if (MP_ENDIANNESS_LITTLE) {
            struct_type = '<';
   185ae:	233c      	movs	r3, #60	; 0x3c
   185b0:	73fb      	strb	r3, [r7, #15]
        } else {
            struct_type = '>';
        }
    }
    *ptr = p + size;
   185b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   185b4:	69fb      	ldr	r3, [r7, #28]
   185b6:	441a      	add	r2, r3
   185b8:	687b      	ldr	r3, [r7, #4]
   185ba:	601a      	str	r2, [r3, #0]

    mp_uint_t val;
    switch (val_type) {
   185bc:	7bbb      	ldrb	r3, [r7, #14]
   185be:	2b4f      	cmp	r3, #79	; 0x4f
   185c0:	d102      	bne.n	185c8 <mp_binary_set_val+0x58>
        case 'O':
            val = (mp_uint_t)val_in;
   185c2:	68bb      	ldr	r3, [r7, #8]
   185c4:	623b      	str	r3, [r7, #32]
            break;
   185c6:	e01e      	b.n	18606 <mp_binary_set_val+0x96>
                mp_obj_int_to_bytes_impl(val_in, struct_type == '>', size, p);
                return;
            } else
            #endif
            {
                val = mp_obj_get_int(val_in);
   185c8:	68b8      	ldr	r0, [r7, #8]
   185ca:	f7f5 fc51 	bl	de70 <mp_obj_get_int>
   185ce:	4603      	mov	r3, r0
   185d0:	623b      	str	r3, [r7, #32]
                // zero/sign extend if needed
                if (BYTES_PER_WORD < 8 && size > sizeof(val)) {
   185d2:	69fb      	ldr	r3, [r7, #28]
   185d4:	2b04      	cmp	r3, #4
   185d6:	d916      	bls.n	18606 <mp_binary_set_val+0x96>
                    int c = (is_signed(val_type) && (mp_int_t)val < 0) ? 0xff : 0x00;
   185d8:	7bbb      	ldrb	r3, [r7, #14]
   185da:	2b5a      	cmp	r3, #90	; 0x5a
   185dc:	d904      	bls.n	185e8 <mp_binary_set_val+0x78>
   185de:	6a3b      	ldr	r3, [r7, #32]
   185e0:	2b00      	cmp	r3, #0
   185e2:	da01      	bge.n	185e8 <mp_binary_set_val+0x78>
   185e4:	23ff      	movs	r3, #255	; 0xff
   185e6:	e000      	b.n	185ea <mp_binary_set_val+0x7a>
   185e8:	2300      	movs	r3, #0
   185ea:	61bb      	str	r3, [r7, #24]
                    memset(p, c, size);
   185ec:	69fa      	ldr	r2, [r7, #28]
   185ee:	69b9      	ldr	r1, [r7, #24]
   185f0:	6a78      	ldr	r0, [r7, #36]	; 0x24
   185f2:	f004 fbdd 	bl	1cdb0 <memset>
                    if (struct_type == '>') {
   185f6:	7bfb      	ldrb	r3, [r7, #15]
   185f8:	2b3e      	cmp	r3, #62	; 0x3e
   185fa:	d104      	bne.n	18606 <mp_binary_set_val+0x96>
                        p += size - sizeof(val);
   185fc:	69fb      	ldr	r3, [r7, #28]
   185fe:	3b04      	subs	r3, #4
   18600:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   18602:	4413      	add	r3, r2
   18604:	627b      	str	r3, [r7, #36]	; 0x24
                    }
                }
            }
    }

    mp_binary_set_int(MIN((size_t)size, sizeof(val)), struct_type == '>', p, val);
   18606:	69fb      	ldr	r3, [r7, #28]
   18608:	2b04      	cmp	r3, #4
   1860a:	bf28      	it	cs
   1860c:	2304      	movcs	r3, #4
   1860e:	4618      	mov	r0, r3
   18610:	7bfb      	ldrb	r3, [r7, #15]
   18612:	2b3e      	cmp	r3, #62	; 0x3e
   18614:	bf0c      	ite	eq
   18616:	2301      	moveq	r3, #1
   18618:	2300      	movne	r3, #0
   1861a:	b2d9      	uxtb	r1, r3
   1861c:	6a3b      	ldr	r3, [r7, #32]
   1861e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   18620:	f7ff ff7a 	bl	18518 <mp_binary_set_int>
}
   18624:	bf00      	nop
   18626:	3728      	adds	r7, #40	; 0x28
   18628:	46bd      	mov	sp, r7
   1862a:	bd80      	pop	{r7, pc}

0001862c <mp_binary_set_val_array>:

void mp_binary_set_val_array(char typecode, void *p, mp_uint_t index, mp_obj_t val_in) {
   1862c:	b580      	push	{r7, lr}
   1862e:	b084      	sub	sp, #16
   18630:	af00      	add	r7, sp, #0
   18632:	60b9      	str	r1, [r7, #8]
   18634:	607a      	str	r2, [r7, #4]
   18636:	603b      	str	r3, [r7, #0]
   18638:	4603      	mov	r3, r0
   1863a:	73fb      	strb	r3, [r7, #15]
    switch (typecode) {
   1863c:	7bfb      	ldrb	r3, [r7, #15]
   1863e:	2b4f      	cmp	r3, #79	; 0x4f
   18640:	d106      	bne.n	18650 <mp_binary_set_val_array+0x24>
            ((double*)p)[index] = mp_obj_get_float(val_in);
            break;
#endif
        // Extension to CPython: array of objects
        case 'O':
            ((mp_obj_t*)p)[index] = val_in;
   18642:	687b      	ldr	r3, [r7, #4]
   18644:	009b      	lsls	r3, r3, #2
   18646:	68ba      	ldr	r2, [r7, #8]
   18648:	4413      	add	r3, r2
   1864a:	683a      	ldr	r2, [r7, #0]
   1864c:	601a      	str	r2, [r3, #0]
            break;
   1864e:	e008      	b.n	18662 <mp_binary_set_val_array+0x36>
                mp_obj_int_to_bytes_impl(val_in, MP_ENDIANNESS_BIG,
                    size, (uint8_t*)p + index * size);
                return;
            }
            #endif
            mp_binary_set_val_array_from_int(typecode, p, index, mp_obj_get_int(val_in));
   18650:	6838      	ldr	r0, [r7, #0]
   18652:	f7f5 fc0d 	bl	de70 <mp_obj_get_int>
   18656:	4603      	mov	r3, r0
   18658:	7bf8      	ldrb	r0, [r7, #15]
   1865a:	687a      	ldr	r2, [r7, #4]
   1865c:	68b9      	ldr	r1, [r7, #8]
   1865e:	f000 f805 	bl	1866c <mp_binary_set_val_array_from_int>
    }
}
   18662:	bf00      	nop
   18664:	3710      	adds	r7, #16
   18666:	46bd      	mov	sp, r7
   18668:	bd80      	pop	{r7, pc}
   1866a:	bf00      	nop

0001866c <mp_binary_set_val_array_from_int>:

void mp_binary_set_val_array_from_int(char typecode, void *p, mp_uint_t index, mp_int_t val) {
   1866c:	b480      	push	{r7}
   1866e:	b085      	sub	sp, #20
   18670:	af00      	add	r7, sp, #0
   18672:	60b9      	str	r1, [r7, #8]
   18674:	607a      	str	r2, [r7, #4]
   18676:	603b      	str	r3, [r7, #0]
   18678:	4603      	mov	r3, r0
   1867a:	73fb      	strb	r3, [r7, #15]
    switch (typecode) {
   1867c:	7bfb      	ldrb	r3, [r7, #15]
   1867e:	2b4c      	cmp	r3, #76	; 0x4c
   18680:	d04e      	beq.n	18720 <mp_binary_set_val_array_from_int+0xb4>
   18682:	2b4c      	cmp	r3, #76	; 0x4c
   18684:	dc0b      	bgt.n	1869e <mp_binary_set_val_array_from_int+0x32>
   18686:	2b42      	cmp	r3, #66	; 0x42
   18688:	d01e      	beq.n	186c8 <mp_binary_set_val_array_from_int+0x5c>
   1868a:	2b42      	cmp	r3, #66	; 0x42
   1868c:	dc02      	bgt.n	18694 <mp_binary_set_val_array_from_int+0x28>
   1868e:	2b01      	cmp	r3, #1
   18690:	d01a      	beq.n	186c8 <mp_binary_set_val_array_from_int+0x5c>
        // Extension to CPython: array of pointers
        case 'P':
            ((void**)p)[index] = (void*)(uintptr_t)val;
            break;
    }
}
   18692:	e053      	b.n	1873c <mp_binary_set_val_array_from_int+0xd0>
    switch (typecode) {
   18694:	2b48      	cmp	r3, #72	; 0x48
   18696:	d026      	beq.n	186e6 <mp_binary_set_val_array_from_int+0x7a>
   18698:	2b49      	cmp	r3, #73	; 0x49
   1869a:	d033      	beq.n	18704 <mp_binary_set_val_array_from_int+0x98>
}
   1869c:	e04e      	b.n	1873c <mp_binary_set_val_array_from_int+0xd0>
    switch (typecode) {
   1869e:	2b68      	cmp	r3, #104	; 0x68
   186a0:	d019      	beq.n	186d6 <mp_binary_set_val_array_from_int+0x6a>
   186a2:	2b68      	cmp	r3, #104	; 0x68
   186a4:	dc04      	bgt.n	186b0 <mp_binary_set_val_array_from_int+0x44>
   186a6:	2b50      	cmp	r3, #80	; 0x50
   186a8:	d041      	beq.n	1872e <mp_binary_set_val_array_from_int+0xc2>
   186aa:	2b62      	cmp	r3, #98	; 0x62
   186ac:	d005      	beq.n	186ba <mp_binary_set_val_array_from_int+0x4e>
}
   186ae:	e045      	b.n	1873c <mp_binary_set_val_array_from_int+0xd0>
    switch (typecode) {
   186b0:	2b69      	cmp	r3, #105	; 0x69
   186b2:	d020      	beq.n	186f6 <mp_binary_set_val_array_from_int+0x8a>
   186b4:	2b6c      	cmp	r3, #108	; 0x6c
   186b6:	d02c      	beq.n	18712 <mp_binary_set_val_array_from_int+0xa6>
}
   186b8:	e040      	b.n	1873c <mp_binary_set_val_array_from_int+0xd0>
            ((signed char*)p)[index] = val;
   186ba:	68ba      	ldr	r2, [r7, #8]
   186bc:	687b      	ldr	r3, [r7, #4]
   186be:	4413      	add	r3, r2
   186c0:	683a      	ldr	r2, [r7, #0]
   186c2:	b252      	sxtb	r2, r2
   186c4:	701a      	strb	r2, [r3, #0]
            break;
   186c6:	e039      	b.n	1873c <mp_binary_set_val_array_from_int+0xd0>
            ((unsigned char*)p)[index] = val;
   186c8:	68ba      	ldr	r2, [r7, #8]
   186ca:	687b      	ldr	r3, [r7, #4]
   186cc:	4413      	add	r3, r2
   186ce:	683a      	ldr	r2, [r7, #0]
   186d0:	b2d2      	uxtb	r2, r2
   186d2:	701a      	strb	r2, [r3, #0]
            break;
   186d4:	e032      	b.n	1873c <mp_binary_set_val_array_from_int+0xd0>
            ((short*)p)[index] = val;
   186d6:	687b      	ldr	r3, [r7, #4]
   186d8:	005b      	lsls	r3, r3, #1
   186da:	68ba      	ldr	r2, [r7, #8]
   186dc:	4413      	add	r3, r2
   186de:	683a      	ldr	r2, [r7, #0]
   186e0:	b212      	sxth	r2, r2
   186e2:	801a      	strh	r2, [r3, #0]
            break;
   186e4:	e02a      	b.n	1873c <mp_binary_set_val_array_from_int+0xd0>
            ((unsigned short*)p)[index] = val;
   186e6:	687b      	ldr	r3, [r7, #4]
   186e8:	005b      	lsls	r3, r3, #1
   186ea:	68ba      	ldr	r2, [r7, #8]
   186ec:	4413      	add	r3, r2
   186ee:	683a      	ldr	r2, [r7, #0]
   186f0:	b292      	uxth	r2, r2
   186f2:	801a      	strh	r2, [r3, #0]
            break;
   186f4:	e022      	b.n	1873c <mp_binary_set_val_array_from_int+0xd0>
            ((int*)p)[index] = val;
   186f6:	687b      	ldr	r3, [r7, #4]
   186f8:	009b      	lsls	r3, r3, #2
   186fa:	68ba      	ldr	r2, [r7, #8]
   186fc:	4413      	add	r3, r2
   186fe:	683a      	ldr	r2, [r7, #0]
   18700:	601a      	str	r2, [r3, #0]
            break;
   18702:	e01b      	b.n	1873c <mp_binary_set_val_array_from_int+0xd0>
            ((unsigned int*)p)[index] = val;
   18704:	687b      	ldr	r3, [r7, #4]
   18706:	009b      	lsls	r3, r3, #2
   18708:	68ba      	ldr	r2, [r7, #8]
   1870a:	4413      	add	r3, r2
   1870c:	683a      	ldr	r2, [r7, #0]
   1870e:	601a      	str	r2, [r3, #0]
            break;
   18710:	e014      	b.n	1873c <mp_binary_set_val_array_from_int+0xd0>
            ((long*)p)[index] = val;
   18712:	687b      	ldr	r3, [r7, #4]
   18714:	009b      	lsls	r3, r3, #2
   18716:	68ba      	ldr	r2, [r7, #8]
   18718:	4413      	add	r3, r2
   1871a:	683a      	ldr	r2, [r7, #0]
   1871c:	601a      	str	r2, [r3, #0]
            break;
   1871e:	e00d      	b.n	1873c <mp_binary_set_val_array_from_int+0xd0>
            ((unsigned long*)p)[index] = val;
   18720:	687b      	ldr	r3, [r7, #4]
   18722:	009b      	lsls	r3, r3, #2
   18724:	68ba      	ldr	r2, [r7, #8]
   18726:	4413      	add	r3, r2
   18728:	683a      	ldr	r2, [r7, #0]
   1872a:	601a      	str	r2, [r3, #0]
            break;
   1872c:	e006      	b.n	1873c <mp_binary_set_val_array_from_int+0xd0>
            ((void**)p)[index] = (void*)(uintptr_t)val;
   1872e:	687b      	ldr	r3, [r7, #4]
   18730:	009b      	lsls	r3, r3, #2
   18732:	68ba      	ldr	r2, [r7, #8]
   18734:	4413      	add	r3, r2
   18736:	683a      	ldr	r2, [r7, #0]
   18738:	601a      	str	r2, [r3, #0]
            break;
   1873a:	bf00      	nop
}
   1873c:	bf00      	nop
   1873e:	3714      	adds	r7, #20
   18740:	46bd      	mov	sp, r7
   18742:	f85d 7b04 	ldr.w	r7, [sp], #4
   18746:	4770      	bx	lr

00018748 <vstr_str>:
static inline char *vstr_str(vstr_t *vstr) { return vstr->buf; }
   18748:	b480      	push	{r7}
   1874a:	b083      	sub	sp, #12
   1874c:	af00      	add	r7, sp, #0
   1874e:	6078      	str	r0, [r7, #4]
   18750:	687b      	ldr	r3, [r7, #4]
   18752:	689b      	ldr	r3, [r3, #8]
   18754:	4618      	mov	r0, r3
   18756:	370c      	adds	r7, #12
   18758:	46bd      	mov	sp, r7
   1875a:	f85d 7b04 	ldr.w	r7, [sp], #4
   1875e:	4770      	bx	lr

00018760 <vstr_len>:
static inline size_t vstr_len(vstr_t *vstr) { return vstr->len; }
   18760:	b480      	push	{r7}
   18762:	b083      	sub	sp, #12
   18764:	af00      	add	r7, sp, #0
   18766:	6078      	str	r0, [r7, #4]
   18768:	687b      	ldr	r3, [r7, #4]
   1876a:	685b      	ldr	r3, [r3, #4]
   1876c:	4618      	mov	r0, r3
   1876e:	370c      	adds	r7, #12
   18770:	46bd      	mov	sp, r7
   18772:	f85d 7b04 	ldr.w	r7, [sp], #4
   18776:	4770      	bx	lr

00018778 <mp_local_free>:
static inline void mp_local_free(void *ptr) {
   18778:	b480      	push	{r7}
   1877a:	b083      	sub	sp, #12
   1877c:	af00      	add	r7, sp, #0
   1877e:	6078      	str	r0, [r7, #4]
}
   18780:	bf00      	nop
   18782:	370c      	adds	r7, #12
   18784:	46bd      	mov	sp, r7
   18786:	f85d 7b04 	ldr.w	r7, [sp], #4
   1878a:	4770      	bx	lr

0001878c <mp_globals_get>:
static inline mp_obj_dict_t *mp_globals_get(void) { return MP_STATE_THREAD(dict_globals); }
   1878c:	b480      	push	{r7}
   1878e:	af00      	add	r7, sp, #0
   18790:	4b03      	ldr	r3, [pc, #12]	; (187a0 <mp_globals_get+0x14>)
   18792:	685b      	ldr	r3, [r3, #4]
   18794:	4618      	mov	r0, r3
   18796:	46bd      	mov	sp, r7
   18798:	f85d 7b04 	ldr.w	r7, [sp], #4
   1879c:	4770      	bx	lr
   1879e:	bf00      	nop
   187a0:	200012f0 	.word	0x200012f0

000187a4 <mp_obj_is_package>:

#if MICROPY_ENABLE_EXTERNAL_IMPORT

#define PATH_SEP_CHAR '/'

bool mp_obj_is_package(mp_obj_t module) {
   187a4:	b580      	push	{r7, lr}
   187a6:	b084      	sub	sp, #16
   187a8:	af00      	add	r7, sp, #0
   187aa:	6078      	str	r0, [r7, #4]
    mp_obj_t dest[2];
    mp_load_method_maybe(module, MP_QSTR___path__, dest);
   187ac:	f107 0308 	add.w	r3, r7, #8
   187b0:	461a      	mov	r2, r3
   187b2:	211f      	movs	r1, #31
   187b4:	6878      	ldr	r0, [r7, #4]
   187b6:	f7f4 f8f1 	bl	c99c <mp_load_method_maybe>
    return dest[0] != MP_OBJ_NULL;
   187ba:	68bb      	ldr	r3, [r7, #8]
   187bc:	2b00      	cmp	r3, #0
   187be:	bf14      	ite	ne
   187c0:	2301      	movne	r3, #1
   187c2:	2300      	moveq	r3, #0
   187c4:	b2db      	uxtb	r3, r3
}
   187c6:	4618      	mov	r0, r3
   187c8:	3710      	adds	r7, #16
   187ca:	46bd      	mov	sp, r7
   187cc:	bd80      	pop	{r7, pc}
   187ce:	bf00      	nop

000187d0 <mp_import_stat_any>:

// Stat either frozen or normal module by a given path
// (whatever is available, if at all).
STATIC mp_import_stat_t mp_import_stat_any(const char *path) {
   187d0:	b580      	push	{r7, lr}
   187d2:	b082      	sub	sp, #8
   187d4:	af00      	add	r7, sp, #0
   187d6:	6078      	str	r0, [r7, #4]
    mp_import_stat_t st = mp_frozen_stat(path);
    if (st != MP_IMPORT_STAT_NO_EXIST) {
        return st;
    }
    #endif
    return mp_import_stat(path);
   187d8:	6878      	ldr	r0, [r7, #4]
   187da:	f002 ff51 	bl	1b680 <mp_import_stat>
   187de:	4603      	mov	r3, r0
}
   187e0:	4618      	mov	r0, r3
   187e2:	3708      	adds	r7, #8
   187e4:	46bd      	mov	sp, r7
   187e6:	bd80      	pop	{r7, pc}

000187e8 <stat_file_py_or_mpy>:

STATIC mp_import_stat_t stat_file_py_or_mpy(vstr_t *path) {
   187e8:	b580      	push	{r7, lr}
   187ea:	b084      	sub	sp, #16
   187ec:	af00      	add	r7, sp, #0
   187ee:	6078      	str	r0, [r7, #4]
    mp_import_stat_t stat = mp_import_stat_any(vstr_null_terminated_str(path));
   187f0:	6878      	ldr	r0, [r7, #4]
   187f2:	f7e8 ff7b 	bl	16ec <vstr_null_terminated_str>
   187f6:	4603      	mov	r3, r0
   187f8:	4618      	mov	r0, r3
   187fa:	f7ff ffe9 	bl	187d0 <mp_import_stat_any>
   187fe:	60f8      	str	r0, [r7, #12]
    if (stat == MP_IMPORT_STAT_FILE) {
   18800:	68fb      	ldr	r3, [r7, #12]
   18802:	2b02      	cmp	r3, #2
   18804:	d101      	bne.n	1880a <stat_file_py_or_mpy+0x22>
        return stat;
   18806:	68fb      	ldr	r3, [r7, #12]
   18808:	e000      	b.n	1880c <stat_file_py_or_mpy+0x24>
    if (stat == MP_IMPORT_STAT_FILE) {
        return stat;
    }
    #endif

    return MP_IMPORT_STAT_NO_EXIST;
   1880a:	2300      	movs	r3, #0
}
   1880c:	4618      	mov	r0, r3
   1880e:	3710      	adds	r7, #16
   18810:	46bd      	mov	sp, r7
   18812:	bd80      	pop	{r7, pc}

00018814 <stat_dir_or_file>:

STATIC mp_import_stat_t stat_dir_or_file(vstr_t *path) {
   18814:	b580      	push	{r7, lr}
   18816:	b084      	sub	sp, #16
   18818:	af00      	add	r7, sp, #0
   1881a:	6078      	str	r0, [r7, #4]
    mp_import_stat_t stat = mp_import_stat_any(vstr_null_terminated_str(path));
   1881c:	6878      	ldr	r0, [r7, #4]
   1881e:	f7e8 ff65 	bl	16ec <vstr_null_terminated_str>
   18822:	4603      	mov	r3, r0
   18824:	4618      	mov	r0, r3
   18826:	f7ff ffd3 	bl	187d0 <mp_import_stat_any>
   1882a:	60f8      	str	r0, [r7, #12]
    DEBUG_printf("stat %s: %d\n", vstr_str(path), stat);
    if (stat == MP_IMPORT_STAT_DIR) {
   1882c:	68fb      	ldr	r3, [r7, #12]
   1882e:	2b01      	cmp	r3, #1
   18830:	d101      	bne.n	18836 <stat_dir_or_file+0x22>
        return stat;
   18832:	68fb      	ldr	r3, [r7, #12]
   18834:	e007      	b.n	18846 <stat_dir_or_file+0x32>
    }

    // not a directory, add .py and try as a file
    vstr_add_str(path, ".py");
   18836:	4906      	ldr	r1, [pc, #24]	; (18850 <stat_dir_or_file+0x3c>)
   18838:	6878      	ldr	r0, [r7, #4]
   1883a:	f7e8 ff95 	bl	1768 <vstr_add_str>
    return stat_file_py_or_mpy(path);
   1883e:	6878      	ldr	r0, [r7, #4]
   18840:	f7ff ffd2 	bl	187e8 <stat_file_py_or_mpy>
   18844:	4603      	mov	r3, r0
}
   18846:	4618      	mov	r0, r3
   18848:	3710      	adds	r7, #16
   1884a:	46bd      	mov	sp, r7
   1884c:	bd80      	pop	{r7, pc}
   1884e:	bf00      	nop
   18850:	0002455c 	.word	0x0002455c

00018854 <find_file>:

STATIC mp_import_stat_t find_file(const char *file_str, uint file_len, vstr_t *dest) {
   18854:	b580      	push	{r7, lr}
   18856:	b084      	sub	sp, #16
   18858:	af00      	add	r7, sp, #0
   1885a:	60f8      	str	r0, [r7, #12]
   1885c:	60b9      	str	r1, [r7, #8]
   1885e:	607a      	str	r2, [r7, #4]
    mp_obj_list_get(mp_sys_path, &path_num, &path_items);

    if (path_num == 0) {
#endif
        // mp_sys_path is empty, so just use the given file name
        vstr_add_strn(dest, file_str, file_len);
   18860:	68ba      	ldr	r2, [r7, #8]
   18862:	68f9      	ldr	r1, [r7, #12]
   18864:	6878      	ldr	r0, [r7, #4]
   18866:	f7e8 ff91 	bl	178c <vstr_add_strn>
        return stat_dir_or_file(dest);
   1886a:	6878      	ldr	r0, [r7, #4]
   1886c:	f7ff ffd2 	bl	18814 <stat_dir_or_file>
   18870:	4603      	mov	r3, r0

        // could not find a directory or file
        return MP_IMPORT_STAT_NO_EXIST;
    }
#endif
}
   18872:	4618      	mov	r0, r3
   18874:	3710      	adds	r7, #16
   18876:	46bd      	mov	sp, r7
   18878:	bd80      	pop	{r7, pc}
   1887a:	bf00      	nop

0001887c <do_load_from_lexer>:

#if MICROPY_ENABLE_COMPILER
STATIC void do_load_from_lexer(mp_obj_t module_obj, mp_lexer_t *lex) {
   1887c:	b580      	push	{r7, lr}
   1887e:	b084      	sub	sp, #16
   18880:	af00      	add	r7, sp, #0
   18882:	6078      	str	r0, [r7, #4]
   18884:	6039      	str	r1, [r7, #0]
    qstr source_name = lex->source_name;
    mp_store_attr(module_obj, MP_QSTR___file__, MP_OBJ_NEW_QSTR(source_name));
    #endif

    // parse, compile and execute the module in its context
    mp_obj_dict_t *mod_globals = mp_obj_module_get_globals(module_obj);
   18886:	6878      	ldr	r0, [r7, #4]
   18888:	f7f9 fb6e 	bl	11f68 <mp_obj_module_get_globals>
   1888c:	60f8      	str	r0, [r7, #12]
    mp_parse_compile_execute(lex, MP_PARSE_FILE_INPUT, mod_globals, mod_globals);
   1888e:	68fb      	ldr	r3, [r7, #12]
   18890:	68fa      	ldr	r2, [r7, #12]
   18892:	2101      	movs	r1, #1
   18894:	6838      	ldr	r0, [r7, #0]
   18896:	f7f4 fc1f 	bl	d0d8 <mp_parse_compile_execute>
}
   1889a:	bf00      	nop
   1889c:	3710      	adds	r7, #16
   1889e:	46bd      	mov	sp, r7
   188a0:	bd80      	pop	{r7, pc}
   188a2:	bf00      	nop

000188a4 <do_load>:
        nlr_jump(nlr.ret_val);
    }
}
#endif

STATIC void do_load(mp_obj_t module_obj, vstr_t *file) {
   188a4:	b580      	push	{r7, lr}
   188a6:	b084      	sub	sp, #16
   188a8:	af00      	add	r7, sp, #0
   188aa:	6078      	str	r0, [r7, #4]
   188ac:	6039      	str	r1, [r7, #0]
    #if MICROPY_MODULE_FROZEN || MICROPY_PERSISTENT_CODE_LOAD || MICROPY_ENABLE_COMPILER
    char *file_str = vstr_null_terminated_str(file);
   188ae:	6838      	ldr	r0, [r7, #0]
   188b0:	f7e8 ff1c 	bl	16ec <vstr_null_terminated_str>
   188b4:	60f8      	str	r0, [r7, #12]
    #endif

    // If we can compile scripts then load the file and compile and execute it.
    #if MICROPY_ENABLE_COMPILER
    {
        mp_lexer_t *lex = mp_lexer_new_from_file(file_str);
   188b6:	68f8      	ldr	r0, [r7, #12]
   188b8:	f002 feda 	bl	1b670 <mp_lexer_new_from_file>
   188bc:	60b8      	str	r0, [r7, #8]
        do_load_from_lexer(module_obj, lex);
   188be:	68b9      	ldr	r1, [r7, #8]
   188c0:	6878      	ldr	r0, [r7, #4]
   188c2:	f7ff ffdb 	bl	1887c <do_load_from_lexer>
        return;
   188c6:	bf00      	nop
    #else

    // If we get here then the file was not frozen and we can't compile scripts.
    mp_raise_msg(&mp_type_ImportError, "script compilation not supported");
    #endif
}
   188c8:	3710      	adds	r7, #16
   188ca:	46bd      	mov	sp, r7
   188cc:	bd80      	pop	{r7, pc}
   188ce:	bf00      	nop

000188d0 <chop_component>:

STATIC void chop_component(const char *start, const char **end) {
   188d0:	b480      	push	{r7}
   188d2:	b085      	sub	sp, #20
   188d4:	af00      	add	r7, sp, #0
   188d6:	6078      	str	r0, [r7, #4]
   188d8:	6039      	str	r1, [r7, #0]
    const char *p = *end;
   188da:	683b      	ldr	r3, [r7, #0]
   188dc:	681b      	ldr	r3, [r3, #0]
   188de:	60fb      	str	r3, [r7, #12]
    while (p > start) {
   188e0:	e00a      	b.n	188f8 <chop_component+0x28>
        if (*--p == '.') {
   188e2:	68fb      	ldr	r3, [r7, #12]
   188e4:	3b01      	subs	r3, #1
   188e6:	60fb      	str	r3, [r7, #12]
   188e8:	68fb      	ldr	r3, [r7, #12]
   188ea:	781b      	ldrb	r3, [r3, #0]
   188ec:	2b2e      	cmp	r3, #46	; 0x2e
   188ee:	d103      	bne.n	188f8 <chop_component+0x28>
            *end = p;
   188f0:	683b      	ldr	r3, [r7, #0]
   188f2:	68fa      	ldr	r2, [r7, #12]
   188f4:	601a      	str	r2, [r3, #0]
            return;
   188f6:	e006      	b.n	18906 <chop_component+0x36>
    while (p > start) {
   188f8:	68fa      	ldr	r2, [r7, #12]
   188fa:	687b      	ldr	r3, [r7, #4]
   188fc:	429a      	cmp	r2, r3
   188fe:	d8f0      	bhi.n	188e2 <chop_component+0x12>
        }
    }
    *end = p;
   18900:	683b      	ldr	r3, [r7, #0]
   18902:	68fa      	ldr	r2, [r7, #12]
   18904:	601a      	str	r2, [r3, #0]
}
   18906:	3714      	adds	r7, #20
   18908:	46bd      	mov	sp, r7
   1890a:	f85d 7b04 	ldr.w	r7, [sp], #4
   1890e:	4770      	bx	lr

00018910 <mp_builtin___import__>:

mp_obj_t mp_builtin___import__(size_t n_args, const mp_obj_t *args) {
   18910:	b590      	push	{r4, r7, lr}
   18912:	b0e3      	sub	sp, #396	; 0x18c
   18914:	af00      	add	r7, sp, #0
   18916:	1d3b      	adds	r3, r7, #4
   18918:	6018      	str	r0, [r3, #0]
   1891a:	463b      	mov	r3, r7
   1891c:	6019      	str	r1, [r3, #0]
        mp_obj_print(args[i], PRINT_REPR);
        DEBUG_printf("\n");
    }
#endif

    mp_obj_t module_name = args[0];
   1891e:	463b      	mov	r3, r7
   18920:	681b      	ldr	r3, [r3, #0]
   18922:	681b      	ldr	r3, [r3, #0]
   18924:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
    mp_obj_t fromtuple = mp_const_none;
   18928:	4bd6      	ldr	r3, [pc, #856]	; (18c84 <mp_builtin___import__+0x374>)
   1892a:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
    mp_int_t level = 0;
   1892e:	2300      	movs	r3, #0
   18930:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
    if (n_args >= 4) {
   18934:	1d3b      	adds	r3, r7, #4
   18936:	681b      	ldr	r3, [r3, #0]
   18938:	2b03      	cmp	r3, #3
   1893a:	d916      	bls.n	1896a <mp_builtin___import__+0x5a>
        fromtuple = args[3];
   1893c:	463b      	mov	r3, r7
   1893e:	681b      	ldr	r3, [r3, #0]
   18940:	68db      	ldr	r3, [r3, #12]
   18942:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
        if (n_args >= 5) {
   18946:	1d3b      	adds	r3, r7, #4
   18948:	681b      	ldr	r3, [r3, #0]
   1894a:	2b04      	cmp	r3, #4
   1894c:	d90d      	bls.n	1896a <mp_builtin___import__+0x5a>
            level = MP_OBJ_SMALL_INT_VALUE(args[4]);
   1894e:	463b      	mov	r3, r7
   18950:	681b      	ldr	r3, [r3, #0]
   18952:	3310      	adds	r3, #16
   18954:	681b      	ldr	r3, [r3, #0]
   18956:	105b      	asrs	r3, r3, #1
   18958:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
            if (level < 0) {
   1895c:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
   18960:	2b00      	cmp	r3, #0
   18962:	da02      	bge.n	1896a <mp_builtin___import__+0x5a>
                mp_raise_ValueError(NULL);
   18964:	2000      	movs	r0, #0
   18966:	f7f4 fc3b 	bl	d1e0 <mp_raise_ValueError>
            }
        }
    }

    size_t mod_len;
    const char *mod_str = mp_obj_str_get_data(module_name, &mod_len);
   1896a:	f507 7390 	add.w	r3, r7, #288	; 0x120
   1896e:	4619      	mov	r1, r3
   18970:	f8d7 0184 	ldr.w	r0, [r7, #388]	; 0x184
   18974:	f7fc ffd6 	bl	15924 <mp_obj_str_get_data>
   18978:	f8c7 0178 	str.w	r0, [r7, #376]	; 0x178

    if (level != 0) {
   1897c:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
   18980:	2b00      	cmp	r3, #0
   18982:	f000 80de 	beq.w	18b42 <mp_builtin___import__+0x232>
        // module name, thus resolving relative import name into absolute.
        // This even appears to be correct per
        // http://legacy.python.org/dev/peps/pep-0328/#relative-imports-and-name
        // "Relative imports use a module's __name__ attribute to determine that
        // module's position in the package hierarchy."
        level--;
   18986:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
   1898a:	3b01      	subs	r3, #1
   1898c:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
        mp_obj_t this_name_q = mp_obj_dict_get(MP_OBJ_FROM_PTR(mp_globals_get()), MP_OBJ_NEW_QSTR(MP_QSTR___name__));
   18990:	f7ff fefc 	bl	1878c <mp_globals_get>
   18994:	4603      	mov	r3, r0
   18996:	2172      	movs	r1, #114	; 0x72
   18998:	4618      	mov	r0, r3
   1899a:	f7f6 f829 	bl	e9f0 <mp_obj_dict_get>
   1899e:	f8c7 015c 	str.w	r0, [r7, #348]	; 0x15c
        assert(this_name_q != MP_OBJ_NULL);
   189a2:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
   189a6:	2b00      	cmp	r3, #0
   189a8:	d106      	bne.n	189b8 <mp_builtin___import__+0xa8>
   189aa:	4bb7      	ldr	r3, [pc, #732]	; (18c88 <mp_builtin___import__+0x378>)
   189ac:	4ab7      	ldr	r2, [pc, #732]	; (18c8c <mp_builtin___import__+0x37c>)
   189ae:	f240 111d 	movw	r1, #285	; 0x11d
   189b2:	48b7      	ldr	r0, [pc, #732]	; (18c90 <mp_builtin___import__+0x380>)
   189b4:	f002 fe8c 	bl	1b6d0 <__assert_func>
        if (MP_OBJ_QSTR_VALUE(this_name_q) == MP_QSTR___main__) {
            // This is a module run by -m command-line switch, get its real name from backup attribute
            this_name_q = mp_obj_dict_get(MP_OBJ_FROM_PTR(mp_globals_get()), MP_OBJ_NEW_QSTR(MP_QSTR___main__));
        }
        #endif
        mp_map_t *globals_map = &mp_globals_get()->map;
   189b8:	f7ff fee8 	bl	1878c <mp_globals_get>
   189bc:	4603      	mov	r3, r0
   189be:	3304      	adds	r3, #4
   189c0:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
        mp_map_elem_t *elem = mp_map_lookup(globals_map, MP_OBJ_NEW_QSTR(MP_QSTR___path__), MP_MAP_LOOKUP);
   189c4:	2200      	movs	r2, #0
   189c6:	217e      	movs	r1, #126	; 0x7e
   189c8:	f8d7 0158 	ldr.w	r0, [r7, #344]	; 0x158
   189cc:	f7f4 fec8 	bl	d760 <mp_map_lookup>
   189d0:	f8c7 0154 	str.w	r0, [r7, #340]	; 0x154
        bool is_pkg = (elem != NULL);
   189d4:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
   189d8:	2b00      	cmp	r3, #0
   189da:	bf14      	ite	ne
   189dc:	2301      	movne	r3, #1
   189de:	2300      	moveq	r3, #0
   189e0:	f887 3153 	strb.w	r3, [r7, #339]	; 0x153
        DEBUG_printf(", is_package: %d", is_pkg);
        DEBUG_printf("\n");
#endif

        size_t this_name_l;
        const char *this_name = mp_obj_str_get_data(this_name_q, &this_name_l);
   189e4:	f107 030c 	add.w	r3, r7, #12
   189e8:	4619      	mov	r1, r3
   189ea:	f8d7 015c 	ldr.w	r0, [r7, #348]	; 0x15c
   189ee:	f7fc ff99 	bl	15924 <mp_obj_str_get_data>
   189f2:	f8c7 014c 	str.w	r0, [r7, #332]	; 0x14c

        const char *p = this_name + this_name_l;
   189f6:	f107 030c 	add.w	r3, r7, #12
   189fa:	681b      	ldr	r3, [r3, #0]
   189fc:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
   18a00:	441a      	add	r2, r3
   18a02:	f107 0308 	add.w	r3, r7, #8
   18a06:	601a      	str	r2, [r3, #0]
        if (!is_pkg) {
   18a08:	f897 3153 	ldrb.w	r3, [r7, #339]	; 0x153
   18a0c:	f083 0301 	eor.w	r3, r3, #1
   18a10:	b2db      	uxtb	r3, r3
   18a12:	2b00      	cmp	r3, #0
   18a14:	d00e      	beq.n	18a34 <mp_builtin___import__+0x124>
            // We have module, but relative imports are anchored at package, so
            // go there.
            chop_component(this_name, &p);
   18a16:	f107 0308 	add.w	r3, r7, #8
   18a1a:	4619      	mov	r1, r3
   18a1c:	f8d7 014c 	ldr.w	r0, [r7, #332]	; 0x14c
   18a20:	f7ff ff56 	bl	188d0 <chop_component>
        }

        while (level--) {
   18a24:	e006      	b.n	18a34 <mp_builtin___import__+0x124>
            chop_component(this_name, &p);
   18a26:	f107 0308 	add.w	r3, r7, #8
   18a2a:	4619      	mov	r1, r3
   18a2c:	f8d7 014c 	ldr.w	r0, [r7, #332]	; 0x14c
   18a30:	f7ff ff4e 	bl	188d0 <chop_component>
        while (level--) {
   18a34:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
   18a38:	1e5a      	subs	r2, r3, #1
   18a3a:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
   18a3e:	2b00      	cmp	r3, #0
   18a40:	d1f1      	bne.n	18a26 <mp_builtin___import__+0x116>
        }

        // We must have some component left over to import from
        if (p == this_name) {
   18a42:	f107 0308 	add.w	r3, r7, #8
   18a46:	681a      	ldr	r2, [r3, #0]
   18a48:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
   18a4c:	429a      	cmp	r2, r3
   18a4e:	d102      	bne.n	18a56 <mp_builtin___import__+0x146>
            mp_raise_ValueError("cannot perform relative import");
   18a50:	4890      	ldr	r0, [pc, #576]	; (18c94 <mp_builtin___import__+0x384>)
   18a52:	f7f4 fbc5 	bl	d1e0 <mp_raise_ValueError>
        }

        uint new_mod_l = (mod_len == 0 ? (size_t)(p - this_name) : (size_t)(p - this_name) + 1 + mod_len);
   18a56:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
   18a5a:	2b00      	cmp	r3, #0
   18a5c:	d107      	bne.n	18a6e <mp_builtin___import__+0x15e>
   18a5e:	f107 0308 	add.w	r3, r7, #8
   18a62:	681b      	ldr	r3, [r3, #0]
   18a64:	461a      	mov	r2, r3
   18a66:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
   18a6a:	1ad3      	subs	r3, r2, r3
   18a6c:	e00b      	b.n	18a86 <mp_builtin___import__+0x176>
   18a6e:	f107 0308 	add.w	r3, r7, #8
   18a72:	681b      	ldr	r3, [r3, #0]
   18a74:	461a      	mov	r2, r3
   18a76:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
   18a7a:	1ad3      	subs	r3, r2, r3
   18a7c:	461a      	mov	r2, r3
   18a7e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
   18a82:	4413      	add	r3, r2
   18a84:	3301      	adds	r3, #1
   18a86:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
        char *new_mod = mp_local_alloc(new_mod_l);
   18a8a:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
   18a8e:	3307      	adds	r3, #7
   18a90:	3307      	adds	r3, #7
   18a92:	08db      	lsrs	r3, r3, #3
   18a94:	00db      	lsls	r3, r3, #3
   18a96:	ebad 0d03 	sub.w	sp, sp, r3
   18a9a:	466b      	mov	r3, sp
   18a9c:	3307      	adds	r3, #7
   18a9e:	08db      	lsrs	r3, r3, #3
   18aa0:	00db      	lsls	r3, r3, #3
   18aa2:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
        memcpy(new_mod, this_name, p - this_name);
   18aa6:	f107 0308 	add.w	r3, r7, #8
   18aaa:	681b      	ldr	r3, [r3, #0]
   18aac:	461a      	mov	r2, r3
   18aae:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
   18ab2:	1ad3      	subs	r3, r2, r3
   18ab4:	461a      	mov	r2, r3
   18ab6:	f8d7 114c 	ldr.w	r1, [r7, #332]	; 0x14c
   18aba:	f8d7 0144 	ldr.w	r0, [r7, #324]	; 0x144
   18abe:	f004 f8db 	bl	1cc78 <memcpy>
        if (mod_len != 0) {
   18ac2:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
   18ac6:	2b00      	cmp	r3, #0
   18ac8:	d01e      	beq.n	18b08 <mp_builtin___import__+0x1f8>
            new_mod[p - this_name] = '.';
   18aca:	f107 0308 	add.w	r3, r7, #8
   18ace:	681b      	ldr	r3, [r3, #0]
   18ad0:	461a      	mov	r2, r3
   18ad2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
   18ad6:	1ad3      	subs	r3, r2, r3
   18ad8:	461a      	mov	r2, r3
   18ada:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
   18ade:	4413      	add	r3, r2
   18ae0:	222e      	movs	r2, #46	; 0x2e
   18ae2:	701a      	strb	r2, [r3, #0]
            memcpy(new_mod + (p - this_name) + 1, mod_str, mod_len);
   18ae4:	f107 0308 	add.w	r3, r7, #8
   18ae8:	681b      	ldr	r3, [r3, #0]
   18aea:	461a      	mov	r2, r3
   18aec:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
   18af0:	1ad3      	subs	r3, r2, r3
   18af2:	3301      	adds	r3, #1
   18af4:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
   18af8:	4413      	add	r3, r2
   18afa:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
   18afe:	f8d7 1178 	ldr.w	r1, [r7, #376]	; 0x178
   18b02:	4618      	mov	r0, r3
   18b04:	f004 f8b8 	bl	1cc78 <memcpy>
        }

        qstr new_mod_q = qstr_from_strn(new_mod, new_mod_l);
   18b08:	f8d7 1148 	ldr.w	r1, [r7, #328]	; 0x148
   18b0c:	f8d7 0144 	ldr.w	r0, [r7, #324]	; 0x144
   18b10:	f7e8 fb50 	bl	11b4 <qstr_from_strn>
   18b14:	f8c7 0140 	str.w	r0, [r7, #320]	; 0x140
        mp_local_free(new_mod);
   18b18:	f8d7 0144 	ldr.w	r0, [r7, #324]	; 0x144
   18b1c:	f7ff fe2c 	bl	18778 <mp_local_free>
        DEBUG_printf("Resolved base name for relative import: '%s'\n", qstr_str(new_mod_q));
        module_name = MP_OBJ_NEW_QSTR(new_mod_q);
   18b20:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
   18b24:	009b      	lsls	r3, r3, #2
   18b26:	f043 0302 	orr.w	r3, r3, #2
   18b2a:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
        mod_str = qstr_str(new_mod_q);
   18b2e:	f8d7 0140 	ldr.w	r0, [r7, #320]	; 0x140
   18b32:	f7e8 fc1b 	bl	136c <qstr_str>
   18b36:	f8c7 0178 	str.w	r0, [r7, #376]	; 0x178
        mod_len = new_mod_l;
   18b3a:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
   18b3e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
    }

    // check if module already exists
    qstr module_name_qstr = mp_obj_str_get_qstr(module_name);
   18b42:	f8d7 0184 	ldr.w	r0, [r7, #388]	; 0x184
   18b46:	f7fc fe87 	bl	15858 <mp_obj_str_get_qstr>
   18b4a:	f8c7 013c 	str.w	r0, [r7, #316]	; 0x13c
    mp_obj_t module_obj = mp_module_get(module_name_qstr);
   18b4e:	f8d7 013c 	ldr.w	r0, [r7, #316]	; 0x13c
   18b52:	f7f9 fa31 	bl	11fb8 <mp_module_get>
   18b56:	f8c7 0174 	str.w	r0, [r7, #372]	; 0x174
    if (module_obj != MP_OBJ_NULL) {
   18b5a:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
   18b5e:	2b00      	cmp	r3, #0
   18b60:	d027      	beq.n	18bb2 <mp_builtin___import__+0x2a2>
        DEBUG_printf("Module already loaded\n");
        // If it's not a package, return module right away
        char *p = strchr(mod_str, '.');
   18b62:	212e      	movs	r1, #46	; 0x2e
   18b64:	f8d7 0178 	ldr.w	r0, [r7, #376]	; 0x178
   18b68:	f004 faba 	bl	1d0e0 <strchr>
   18b6c:	f8c7 0138 	str.w	r0, [r7, #312]	; 0x138
        if (p == NULL) {
   18b70:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
   18b74:	2b00      	cmp	r3, #0
   18b76:	d102      	bne.n	18b7e <mp_builtin___import__+0x26e>
            return module_obj;
   18b78:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
   18b7c:	e143      	b.n	18e06 <mp_builtin___import__+0x4f6>
        }
        // If fromlist is not empty, return leaf module
        if (fromtuple != mp_const_none) {
   18b7e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
   18b82:	4a40      	ldr	r2, [pc, #256]	; (18c84 <mp_builtin___import__+0x374>)
   18b84:	4293      	cmp	r3, r2
   18b86:	d002      	beq.n	18b8e <mp_builtin___import__+0x27e>
            return module_obj;
   18b88:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
   18b8c:	e13b      	b.n	18e06 <mp_builtin___import__+0x4f6>
        }
        // Otherwise, we need to return top-level package
        qstr pkg_name = qstr_from_strn(mod_str, p - mod_str);
   18b8e:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
   18b92:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
   18b96:	1ad3      	subs	r3, r2, r3
   18b98:	4619      	mov	r1, r3
   18b9a:	f8d7 0178 	ldr.w	r0, [r7, #376]	; 0x178
   18b9e:	f7e8 fb09 	bl	11b4 <qstr_from_strn>
   18ba2:	f8c7 0134 	str.w	r0, [r7, #308]	; 0x134
        return mp_module_get(pkg_name);
   18ba6:	f8d7 0134 	ldr.w	r0, [r7, #308]	; 0x134
   18baa:	f7f9 fa05 	bl	11fb8 <mp_module_get>
   18bae:	4603      	mov	r3, r0
   18bb0:	e129      	b.n	18e06 <mp_builtin___import__+0x4f6>
    }
    DEBUG_printf("Module not yet loaded\n");

    uint last = 0;
   18bb2:	2300      	movs	r3, #0
   18bb4:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
    VSTR_FIXED(path, MICROPY_ALLOC_PATH_MAX)
   18bb8:	f107 0210 	add.w	r2, r7, #16
   18bbc:	f507 7388 	add.w	r3, r7, #272	; 0x110
   18bc0:	f44f 7180 	mov.w	r1, #256	; 0x100
   18bc4:	4618      	mov	r0, r3
   18bc6:	f7e8 fc8b 	bl	14e0 <vstr_init_fixed_buf>
    module_obj = MP_OBJ_NULL;
   18bca:	2300      	movs	r3, #0
   18bcc:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
    mp_obj_t top_module_obj = MP_OBJ_NULL;
   18bd0:	2300      	movs	r3, #0
   18bd2:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
    mp_obj_t outer_module_obj = MP_OBJ_NULL;
   18bd6:	2300      	movs	r3, #0
   18bd8:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
    uint i;
    for (i = 1; i <= mod_len; i++) {
   18bdc:	2301      	movs	r3, #1
   18bde:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   18be2:	e0ff      	b.n	18de4 <mp_builtin___import__+0x4d4>
        if (i == mod_len || mod_str[i] == '.') {
   18be4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
   18be8:	f8d7 2164 	ldr.w	r2, [r7, #356]	; 0x164
   18bec:	429a      	cmp	r2, r3
   18bee:	d008      	beq.n	18c02 <mp_builtin___import__+0x2f2>
   18bf0:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
   18bf4:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
   18bf8:	4413      	add	r3, r2
   18bfa:	781b      	ldrb	r3, [r3, #0]
   18bfc:	2b2e      	cmp	r3, #46	; 0x2e
   18bfe:	f040 80ec 	bne.w	18dda <mp_builtin___import__+0x4ca>
            // create a qstr for the module name up to this depth
            qstr mod_name = qstr_from_strn(mod_str, i);
   18c02:	f8d7 1164 	ldr.w	r1, [r7, #356]	; 0x164
   18c06:	f8d7 0178 	ldr.w	r0, [r7, #376]	; 0x178
   18c0a:	f7e8 fad3 	bl	11b4 <qstr_from_strn>
   18c0e:	f8c7 0130 	str.w	r0, [r7, #304]	; 0x130
            DEBUG_printf("Processing module: %s\n", qstr_str(mod_name));
            DEBUG_printf("Previous path: =%.*s=\n", vstr_len(&path), vstr_str(&path));

            // find the file corresponding to the module name
            mp_import_stat_t stat;
            if (vstr_len(&path) == 0) {
   18c12:	f507 7388 	add.w	r3, r7, #272	; 0x110
   18c16:	4618      	mov	r0, r3
   18c18:	f7ff fda2 	bl	18760 <vstr_len>
   18c1c:	4603      	mov	r3, r0
   18c1e:	2b00      	cmp	r3, #0
   18c20:	d10b      	bne.n	18c3a <mp_builtin___import__+0x32a>
                // first module in the dotted-name; search for a directory or file
                stat = find_file(mod_str, i, &path);
   18c22:	f507 7388 	add.w	r3, r7, #272	; 0x110
   18c26:	461a      	mov	r2, r3
   18c28:	f8d7 1164 	ldr.w	r1, [r7, #356]	; 0x164
   18c2c:	f8d7 0178 	ldr.w	r0, [r7, #376]	; 0x178
   18c30:	f7ff fe10 	bl	18854 <find_file>
   18c34:	f8c7 0160 	str.w	r0, [r7, #352]	; 0x160
   18c38:	e01b      	b.n	18c72 <mp_builtin___import__+0x362>
            } else {
                // latter module in the dotted-name; append to path
                vstr_add_char(&path, PATH_SEP_CHAR);
   18c3a:	f507 7388 	add.w	r3, r7, #272	; 0x110
   18c3e:	212f      	movs	r1, #47	; 0x2f
   18c40:	4618      	mov	r0, r3
   18c42:	f7e8 fd81 	bl	1748 <vstr_add_char>
                vstr_add_strn(&path, mod_str + last, i - last);
   18c46:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
   18c4a:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
   18c4e:	18d1      	adds	r1, r2, r3
   18c50:	f8d7 2164 	ldr.w	r2, [r7, #356]	; 0x164
   18c54:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
   18c58:	1ad2      	subs	r2, r2, r3
   18c5a:	f507 7388 	add.w	r3, r7, #272	; 0x110
   18c5e:	4618      	mov	r0, r3
   18c60:	f7e8 fd94 	bl	178c <vstr_add_strn>
                stat = stat_dir_or_file(&path);
   18c64:	f507 7388 	add.w	r3, r7, #272	; 0x110
   18c68:	4618      	mov	r0, r3
   18c6a:	f7ff fdd3 	bl	18814 <stat_dir_or_file>
   18c6e:	f8c7 0160 	str.w	r0, [r7, #352]	; 0x160
            }
            DEBUG_printf("Current path: %.*s\n", vstr_len(&path), vstr_str(&path));

            if (stat == MP_IMPORT_STAT_NO_EXIST) {
   18c72:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
   18c76:	2b00      	cmp	r3, #0
   18c78:	d112      	bne.n	18ca0 <mp_builtin___import__+0x390>
                #else
                {
                #endif
                    // couldn't find the file, so fail
                    if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
                        mp_raise_msg(&mp_type_ImportError, "module not found");
   18c7a:	4907      	ldr	r1, [pc, #28]	; (18c98 <mp_builtin___import__+0x388>)
   18c7c:	4807      	ldr	r0, [pc, #28]	; (18c9c <mp_builtin___import__+0x38c>)
   18c7e:	f7f4 fa97 	bl	d1b0 <mp_raise_msg>
   18c82:	bf00      	nop
   18c84:	0002345c 	.word	0x0002345c
   18c88:	00024560 	.word	0x00024560
   18c8c:	000245e4 	.word	0x000245e4
   18c90:	0002457c 	.word	0x0002457c
   18c94:	00024598 	.word	0x00024598
   18c98:	000245b8 	.word	0x000245b8
   18c9c:	00022404 	.word	0x00022404
                            "no module named '%q'", mod_name));
                    }
                }
            } else {
                // found the file, so get the module
                module_obj = mp_module_get(mod_name);
   18ca0:	f8d7 0130 	ldr.w	r0, [r7, #304]	; 0x130
   18ca4:	f7f9 f988 	bl	11fb8 <mp_module_get>
   18ca8:	f8c7 0174 	str.w	r0, [r7, #372]	; 0x174
            }

            if (module_obj == MP_OBJ_NULL) {
   18cac:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
   18cb0:	2b00      	cmp	r3, #0
   18cb2:	d166      	bne.n	18d82 <mp_builtin___import__+0x472>
                // module not already loaded, so load it!

                module_obj = mp_obj_new_module(mod_name);
   18cb4:	f8d7 0130 	ldr.w	r0, [r7, #304]	; 0x130
   18cb8:	f7f9 f91c 	bl	11ef4 <mp_obj_new_module>
   18cbc:	f8c7 0174 	str.w	r0, [r7, #372]	; 0x174
                // for *modules* however - packages never have their names
                // replaced, instead they're -m'ed using a special __main__
                // submodule in them. (This all apparently is done to not
                // touch package name itself, which is important for future
                // imports).
                if (i == mod_len && fromtuple == mp_const_false && stat != MP_IMPORT_STAT_DIR) {
   18cc0:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
   18cc4:	f8d7 2164 	ldr.w	r2, [r7, #356]	; 0x164
   18cc8:	429a      	cmp	r2, r3
   18cca:	d114      	bne.n	18cf6 <mp_builtin___import__+0x3e6>
   18ccc:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
   18cd0:	4a4f      	ldr	r2, [pc, #316]	; (18e10 <mp_builtin___import__+0x500>)
   18cd2:	4293      	cmp	r3, r2
   18cd4:	d10f      	bne.n	18cf6 <mp_builtin___import__+0x3e6>
   18cd6:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
   18cda:	2b01      	cmp	r3, #1
   18cdc:	d00b      	beq.n	18cf6 <mp_builtin___import__+0x3e6>
                    mp_obj_module_t *o = MP_OBJ_TO_PTR(module_obj);
   18cde:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
   18ce2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
                    mp_obj_dict_store(MP_OBJ_FROM_PTR(o->globals), MP_OBJ_NEW_QSTR(MP_QSTR___name__), MP_OBJ_NEW_QSTR(MP_QSTR___main__));
   18ce6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
   18cea:	685b      	ldr	r3, [r3, #4]
   18cec:	226a      	movs	r2, #106	; 0x6a
   18cee:	2172      	movs	r1, #114	; 0x72
   18cf0:	4618      	mov	r0, r3
   18cf2:	f7f6 fb95 	bl	f420 <mp_obj_dict_store>
                    // Store real name in "__main__" attribute. Chosen semi-randonly, to reuse existing qstr's.
                    mp_obj_dict_store(MP_OBJ_FROM_PTR(o->globals), MP_OBJ_NEW_QSTR(MP_QSTR___main__), MP_OBJ_NEW_QSTR(mod_name));
                    #endif
                }

                if (stat == MP_IMPORT_STAT_DIR) {
   18cf6:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
   18cfa:	2b01      	cmp	r3, #1
   18cfc:	d13a      	bne.n	18d74 <mp_builtin___import__+0x464>
                    DEBUG_printf("%.*s is dir\n", vstr_len(&path), vstr_str(&path));
                    // https://docs.python.org/3/reference/import.html
                    // "Specifically, any module that contains a __path__ attribute is considered a package."
                    mp_store_attr(module_obj, MP_QSTR___path__, mp_obj_new_str(vstr_str(&path), vstr_len(&path)));
   18cfe:	f507 7388 	add.w	r3, r7, #272	; 0x110
   18d02:	4618      	mov	r0, r3
   18d04:	f7ff fd20 	bl	18748 <vstr_str>
   18d08:	4604      	mov	r4, r0
   18d0a:	f507 7388 	add.w	r3, r7, #272	; 0x110
   18d0e:	4618      	mov	r0, r3
   18d10:	f7ff fd26 	bl	18760 <vstr_len>
   18d14:	4603      	mov	r3, r0
   18d16:	4619      	mov	r1, r3
   18d18:	4620      	mov	r0, r4
   18d1a:	f7fc fca1 	bl	15660 <mp_obj_new_str>
   18d1e:	4603      	mov	r3, r0
   18d20:	461a      	mov	r2, r3
   18d22:	211f      	movs	r1, #31
   18d24:	f8d7 0174 	ldr.w	r0, [r7, #372]	; 0x174
   18d28:	f7f3 feea 	bl	cb00 <mp_store_attr>
                    size_t orig_path_len = path.len;
   18d2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
   18d30:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
                    vstr_add_char(&path, PATH_SEP_CHAR);
   18d34:	f507 7388 	add.w	r3, r7, #272	; 0x110
   18d38:	212f      	movs	r1, #47	; 0x2f
   18d3a:	4618      	mov	r0, r3
   18d3c:	f7e8 fd04 	bl	1748 <vstr_add_char>
                    vstr_add_str(&path, "__init__.py");
   18d40:	f507 7388 	add.w	r3, r7, #272	; 0x110
   18d44:	4933      	ldr	r1, [pc, #204]	; (18e14 <mp_builtin___import__+0x504>)
   18d46:	4618      	mov	r0, r3
   18d48:	f7e8 fd0e 	bl	1768 <vstr_add_str>
                    if (stat_file_py_or_mpy(&path) != MP_IMPORT_STAT_FILE) {
   18d4c:	f507 7388 	add.w	r3, r7, #272	; 0x110
   18d50:	4618      	mov	r0, r3
   18d52:	f7ff fd49 	bl	187e8 <stat_file_py_or_mpy>
   18d56:	4603      	mov	r3, r0
   18d58:	2b02      	cmp	r3, #2
   18d5a:	d106      	bne.n	18d6a <mp_builtin___import__+0x45a>
                        //mp_warning("%s is imported as namespace package", vstr_str(&path));
                    } else {
                        do_load(module_obj, &path);
   18d5c:	f507 7388 	add.w	r3, r7, #272	; 0x110
   18d60:	4619      	mov	r1, r3
   18d62:	f8d7 0174 	ldr.w	r0, [r7, #372]	; 0x174
   18d66:	f7ff fd9d 	bl	188a4 <do_load>
                    }
                    path.len = orig_path_len;
   18d6a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
   18d6e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   18d72:	e006      	b.n	18d82 <mp_builtin___import__+0x472>
                } else { // MP_IMPORT_STAT_FILE
                    do_load(module_obj, &path);
   18d74:	f507 7388 	add.w	r3, r7, #272	; 0x110
   18d78:	4619      	mov	r1, r3
   18d7a:	f8d7 0174 	ldr.w	r0, [r7, #372]	; 0x174
   18d7e:	f7ff fd91 	bl	188a4 <do_load>
                    // remaining components then it's an ImportError because the current path
                    // (the module that was just loaded) is not a package.  This will be caught
                    // on the next iteration because the file will not exist.
                }
            }
            if (outer_module_obj != MP_OBJ_NULL) {
   18d82:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
   18d86:	2b00      	cmp	r3, #0
   18d88:	d016      	beq.n	18db8 <mp_builtin___import__+0x4a8>
                qstr s = qstr_from_strn(mod_str + last, i - last);
   18d8a:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
   18d8e:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
   18d92:	18d0      	adds	r0, r2, r3
   18d94:	f8d7 2164 	ldr.w	r2, [r7, #356]	; 0x164
   18d98:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
   18d9c:	1ad3      	subs	r3, r2, r3
   18d9e:	4619      	mov	r1, r3
   18da0:	f7e8 fa08 	bl	11b4 <qstr_from_strn>
   18da4:	f8c7 0124 	str.w	r0, [r7, #292]	; 0x124
                mp_store_attr(outer_module_obj, s, module_obj);
   18da8:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
   18dac:	f8d7 1124 	ldr.w	r1, [r7, #292]	; 0x124
   18db0:	f8d7 0168 	ldr.w	r0, [r7, #360]	; 0x168
   18db4:	f7f3 fea4 	bl	cb00 <mp_store_attr>
            }
            outer_module_obj = module_obj;
   18db8:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
   18dbc:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
            if (top_module_obj == MP_OBJ_NULL) {
   18dc0:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
   18dc4:	2b00      	cmp	r3, #0
   18dc6:	d103      	bne.n	18dd0 <mp_builtin___import__+0x4c0>
                top_module_obj = module_obj;
   18dc8:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
   18dcc:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
            }
            last = i + 1;
   18dd0:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
   18dd4:	3301      	adds	r3, #1
   18dd6:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
    for (i = 1; i <= mod_len; i++) {
   18dda:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
   18dde:	3301      	adds	r3, #1
   18de0:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   18de4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
   18de8:	f8d7 2164 	ldr.w	r2, [r7, #356]	; 0x164
   18dec:	429a      	cmp	r2, r3
   18dee:	f67f aef9 	bls.w	18be4 <mp_builtin___import__+0x2d4>
        }
    }

    // If fromlist is not empty, return leaf module
    if (fromtuple != mp_const_none) {
   18df2:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
   18df6:	4a08      	ldr	r2, [pc, #32]	; (18e18 <mp_builtin___import__+0x508>)
   18df8:	4293      	cmp	r3, r2
   18dfa:	d002      	beq.n	18e02 <mp_builtin___import__+0x4f2>
        return module_obj;
   18dfc:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
   18e00:	e001      	b.n	18e06 <mp_builtin___import__+0x4f6>
    }
    // Otherwise, we need to return top-level package
    return top_module_obj;
   18e02:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
}
   18e06:	4618      	mov	r0, r3
   18e08:	f507 77c6 	add.w	r7, r7, #396	; 0x18c
   18e0c:	46bd      	mov	sp, r7
   18e0e:	bd90      	pop	{r4, r7, pc}
   18e10:	00021b70 	.word	0x00021b70
   18e14:	000245cc 	.word	0x000245cc
   18e18:	0002345c 	.word	0x0002345c

00018e1c <MP_OBJ_IS_OBJ>:
   18e1c:	b480      	push	{r7}
   18e1e:	b083      	sub	sp, #12
   18e20:	af00      	add	r7, sp, #0
   18e22:	6078      	str	r0, [r7, #4]
   18e24:	687b      	ldr	r3, [r7, #4]
   18e26:	f003 0303 	and.w	r3, r3, #3
   18e2a:	2b00      	cmp	r3, #0
   18e2c:	bf0c      	ite	eq
   18e2e:	2301      	moveq	r3, #1
   18e30:	2300      	movne	r3, #0
   18e32:	b2db      	uxtb	r3, r3
   18e34:	4618      	mov	r0, r3
   18e36:	370c      	adds	r7, #12
   18e38:	46bd      	mov	sp, r7
   18e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
   18e3e:	4770      	bx	lr

00018e40 <mp_locals_get>:
static inline mp_obj_dict_t *mp_locals_get(void) { return MP_STATE_THREAD(dict_locals); }
   18e40:	b480      	push	{r7}
   18e42:	af00      	add	r7, sp, #0
   18e44:	4b03      	ldr	r3, [pc, #12]	; (18e54 <mp_locals_get+0x14>)
   18e46:	681b      	ldr	r3, [r3, #0]
   18e48:	4618      	mov	r0, r3
   18e4a:	46bd      	mov	sp, r7
   18e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
   18e50:	4770      	bx	lr
   18e52:	bf00      	nop
   18e54:	200012f0 	.word	0x200012f0

00018e58 <mp_globals_get>:
static inline mp_obj_dict_t *mp_globals_get(void) { return MP_STATE_THREAD(dict_globals); }
   18e58:	b480      	push	{r7}
   18e5a:	af00      	add	r7, sp, #0
   18e5c:	4b03      	ldr	r3, [pc, #12]	; (18e6c <mp_globals_get+0x14>)
   18e5e:	685b      	ldr	r3, [r3, #4]
   18e60:	4618      	mov	r0, r3
   18e62:	46bd      	mov	sp, r7
   18e64:	f85d 7b04 	ldr.w	r7, [sp], #4
   18e68:	4770      	bx	lr
   18e6a:	bf00      	nop
   18e6c:	200012f0 	.word	0x200012f0

00018e70 <eval_exec_helper>:

#endif // MICROPY_PY_BUILTINS_COMPILE

#if MICROPY_PY_BUILTINS_EVAL_EXEC

STATIC mp_obj_t eval_exec_helper(size_t n_args, const mp_obj_t *args, mp_parse_input_kind_t parse_input_kind) {
   18e70:	b580      	push	{r7, lr}
   18e72:	b08a      	sub	sp, #40	; 0x28
   18e74:	af00      	add	r7, sp, #0
   18e76:	60f8      	str	r0, [r7, #12]
   18e78:	60b9      	str	r1, [r7, #8]
   18e7a:	607a      	str	r2, [r7, #4]
    // work out the context
    mp_obj_dict_t *globals = mp_globals_get();
   18e7c:	f7ff ffec 	bl	18e58 <mp_globals_get>
   18e80:	6278      	str	r0, [r7, #36]	; 0x24
    mp_obj_dict_t *locals = mp_locals_get();
   18e82:	f7ff ffdd 	bl	18e40 <mp_locals_get>
   18e86:	6238      	str	r0, [r7, #32]
    for (size_t i = 1; i < 3 && i < n_args; ++i) {
   18e88:	2301      	movs	r3, #1
   18e8a:	61fb      	str	r3, [r7, #28]
   18e8c:	e02f      	b.n	18eee <eval_exec_helper+0x7e>
        if (args[i] != mp_const_none) {
   18e8e:	69fb      	ldr	r3, [r7, #28]
   18e90:	009b      	lsls	r3, r3, #2
   18e92:	68ba      	ldr	r2, [r7, #8]
   18e94:	4413      	add	r3, r2
   18e96:	681b      	ldr	r3, [r3, #0]
   18e98:	4a26      	ldr	r2, [pc, #152]	; (18f34 <eval_exec_helper+0xc4>)
   18e9a:	4293      	cmp	r3, r2
   18e9c:	d024      	beq.n	18ee8 <eval_exec_helper+0x78>
            if (!MP_OBJ_IS_TYPE(args[i], &mp_type_dict)) {
   18e9e:	69fb      	ldr	r3, [r7, #28]
   18ea0:	009b      	lsls	r3, r3, #2
   18ea2:	68ba      	ldr	r2, [r7, #8]
   18ea4:	4413      	add	r3, r2
   18ea6:	681b      	ldr	r3, [r3, #0]
   18ea8:	4618      	mov	r0, r3
   18eaa:	f7ff ffb7 	bl	18e1c <MP_OBJ_IS_OBJ>
   18eae:	4603      	mov	r3, r0
   18eb0:	f083 0301 	eor.w	r3, r3, #1
   18eb4:	b2db      	uxtb	r3, r3
   18eb6:	2b00      	cmp	r3, #0
   18eb8:	d108      	bne.n	18ecc <eval_exec_helper+0x5c>
   18eba:	69fb      	ldr	r3, [r7, #28]
   18ebc:	009b      	lsls	r3, r3, #2
   18ebe:	68ba      	ldr	r2, [r7, #8]
   18ec0:	4413      	add	r3, r2
   18ec2:	681b      	ldr	r3, [r3, #0]
   18ec4:	681b      	ldr	r3, [r3, #0]
   18ec6:	4a1c      	ldr	r2, [pc, #112]	; (18f38 <eval_exec_helper+0xc8>)
   18ec8:	4293      	cmp	r3, r2
   18eca:	d002      	beq.n	18ed2 <eval_exec_helper+0x62>
                mp_raise_TypeError(NULL);
   18ecc:	2000      	movs	r0, #0
   18ece:	f7f4 f991 	bl	d1f4 <mp_raise_TypeError>
            }
            locals = MP_OBJ_TO_PTR(args[i]);
   18ed2:	69fb      	ldr	r3, [r7, #28]
   18ed4:	009b      	lsls	r3, r3, #2
   18ed6:	68ba      	ldr	r2, [r7, #8]
   18ed8:	4413      	add	r3, r2
   18eda:	681b      	ldr	r3, [r3, #0]
   18edc:	623b      	str	r3, [r7, #32]
            if (i == 1) {
   18ede:	69fb      	ldr	r3, [r7, #28]
   18ee0:	2b01      	cmp	r3, #1
   18ee2:	d101      	bne.n	18ee8 <eval_exec_helper+0x78>
                globals = locals;
   18ee4:	6a3b      	ldr	r3, [r7, #32]
   18ee6:	627b      	str	r3, [r7, #36]	; 0x24
    for (size_t i = 1; i < 3 && i < n_args; ++i) {
   18ee8:	69fb      	ldr	r3, [r7, #28]
   18eea:	3301      	adds	r3, #1
   18eec:	61fb      	str	r3, [r7, #28]
   18eee:	69fb      	ldr	r3, [r7, #28]
   18ef0:	2b02      	cmp	r3, #2
   18ef2:	d803      	bhi.n	18efc <eval_exec_helper+0x8c>
   18ef4:	69fa      	ldr	r2, [r7, #28]
   18ef6:	68fb      	ldr	r3, [r7, #12]
   18ef8:	429a      	cmp	r2, r3
   18efa:	d3c8      	bcc.n	18e8e <eval_exec_helper+0x1e>
        return code_execute(MP_OBJ_TO_PTR(args[0]), globals, locals);
    }
    #endif

    size_t str_len;
    const char *str = mp_obj_str_get_data(args[0], &str_len);
   18efc:	68bb      	ldr	r3, [r7, #8]
   18efe:	681b      	ldr	r3, [r3, #0]
   18f00:	f107 0210 	add.w	r2, r7, #16
   18f04:	4611      	mov	r1, r2
   18f06:	4618      	mov	r0, r3
   18f08:	f7fc fd0c 	bl	15924 <mp_obj_str_get_data>
   18f0c:	61b8      	str	r0, [r7, #24]
    mp_lexer_t *lex;
    if (MICROPY_PY_BUILTINS_EXECFILE && parse_input_kind == MP_PARSE_SINGLE_INPUT) {
        lex = mp_lexer_new_from_file(str);
        parse_input_kind = MP_PARSE_FILE_INPUT;
    } else {
        lex = mp_lexer_new_from_str_len(MP_QSTR__lt_string_gt_, str, str_len, 0);
   18f0e:	693a      	ldr	r2, [r7, #16]
   18f10:	2300      	movs	r3, #0
   18f12:	69b9      	ldr	r1, [r7, #24]
   18f14:	2036      	movs	r0, #54	; 0x36
   18f16:	f7ea fcc1 	bl	389c <mp_lexer_new_from_str_len>
   18f1a:	6178      	str	r0, [r7, #20]
    }

    return mp_parse_compile_execute(lex, parse_input_kind, globals, locals);
   18f1c:	6a3b      	ldr	r3, [r7, #32]
   18f1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   18f20:	6879      	ldr	r1, [r7, #4]
   18f22:	6978      	ldr	r0, [r7, #20]
   18f24:	f7f4 f8d8 	bl	d0d8 <mp_parse_compile_execute>
   18f28:	4603      	mov	r3, r0
}
   18f2a:	4618      	mov	r0, r3
   18f2c:	3728      	adds	r7, #40	; 0x28
   18f2e:	46bd      	mov	sp, r7
   18f30:	bd80      	pop	{r7, pc}
   18f32:	bf00      	nop
   18f34:	0002345c 	.word	0x0002345c
   18f38:	0002201c 	.word	0x0002201c

00018f3c <mp_builtin_eval>:

STATIC mp_obj_t mp_builtin_eval(size_t n_args, const mp_obj_t *args) {
   18f3c:	b580      	push	{r7, lr}
   18f3e:	b082      	sub	sp, #8
   18f40:	af00      	add	r7, sp, #0
   18f42:	6078      	str	r0, [r7, #4]
   18f44:	6039      	str	r1, [r7, #0]
    return eval_exec_helper(n_args, args, MP_PARSE_EVAL_INPUT);
   18f46:	2202      	movs	r2, #2
   18f48:	6839      	ldr	r1, [r7, #0]
   18f4a:	6878      	ldr	r0, [r7, #4]
   18f4c:	f7ff ff90 	bl	18e70 <eval_exec_helper>
   18f50:	4603      	mov	r3, r0
}
   18f52:	4618      	mov	r0, r3
   18f54:	3708      	adds	r7, #8
   18f56:	46bd      	mov	sp, r7
   18f58:	bd80      	pop	{r7, pc}
   18f5a:	bf00      	nop

00018f5c <mp_builtin_exec>:
MP_DEFINE_CONST_FUN_OBJ_VAR_BETWEEN(mp_builtin_eval_obj, 1, 3, mp_builtin_eval);

STATIC mp_obj_t mp_builtin_exec(size_t n_args, const mp_obj_t *args) {
   18f5c:	b580      	push	{r7, lr}
   18f5e:	b082      	sub	sp, #8
   18f60:	af00      	add	r7, sp, #0
   18f62:	6078      	str	r0, [r7, #4]
   18f64:	6039      	str	r1, [r7, #0]
    return eval_exec_helper(n_args, args, MP_PARSE_FILE_INPUT);
   18f66:	2201      	movs	r2, #1
   18f68:	6839      	ldr	r1, [r7, #0]
   18f6a:	6878      	ldr	r0, [r7, #4]
   18f6c:	f7ff ff80 	bl	18e70 <eval_exec_helper>
   18f70:	4603      	mov	r3, r0
}
   18f72:	4618      	mov	r0, r3
   18f74:	3708      	adds	r7, #8
   18f76:	46bd      	mov	sp, r7
   18f78:	bd80      	pop	{r7, pc}
   18f7a:	bf00      	nop

00018f7c <MP_OBJ_IS_SMALL_INT>:
    { return ((((mp_int_t)(o)) & 1) != 0); }
   18f7c:	b480      	push	{r7}
   18f7e:	b083      	sub	sp, #12
   18f80:	af00      	add	r7, sp, #0
   18f82:	6078      	str	r0, [r7, #4]
   18f84:	687b      	ldr	r3, [r7, #4]
   18f86:	f003 0301 	and.w	r3, r3, #1
   18f8a:	2b00      	cmp	r3, #0
   18f8c:	bf14      	ite	ne
   18f8e:	2301      	movne	r3, #1
   18f90:	2300      	moveq	r3, #0
   18f92:	b2db      	uxtb	r3, r3
   18f94:	4618      	mov	r0, r3
   18f96:	370c      	adds	r7, #12
   18f98:	46bd      	mov	sp, r7
   18f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
   18f9e:	4770      	bx	lr

00018fa0 <MP_OBJ_IS_OBJ>:
    { return ((((mp_int_t)(o)) & 3) == 0); }
   18fa0:	b480      	push	{r7}
   18fa2:	b083      	sub	sp, #12
   18fa4:	af00      	add	r7, sp, #0
   18fa6:	6078      	str	r0, [r7, #4]
   18fa8:	687b      	ldr	r3, [r7, #4]
   18faa:	f003 0303 	and.w	r3, r3, #3
   18fae:	2b00      	cmp	r3, #0
   18fb0:	bf0c      	ite	eq
   18fb2:	2301      	moveq	r3, #1
   18fb4:	2300      	movne	r3, #0
   18fb6:	b2db      	uxtb	r3, r3
   18fb8:	4618      	mov	r0, r3
   18fba:	370c      	adds	r7, #12
   18fbc:	46bd      	mov	sp, r7
   18fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
   18fc2:	4770      	bx	lr

00018fc4 <MP_MAP_SLOT_IS_FILLED>:
static inline bool MP_MAP_SLOT_IS_FILLED(const mp_map_t *map, size_t pos) { return ((map)->table[pos].key != MP_OBJ_NULL && (map)->table[pos].key != MP_OBJ_SENTINEL); }
   18fc4:	b480      	push	{r7}
   18fc6:	b083      	sub	sp, #12
   18fc8:	af00      	add	r7, sp, #0
   18fca:	6078      	str	r0, [r7, #4]
   18fcc:	6039      	str	r1, [r7, #0]
   18fce:	687b      	ldr	r3, [r7, #4]
   18fd0:	689a      	ldr	r2, [r3, #8]
   18fd2:	683b      	ldr	r3, [r7, #0]
   18fd4:	00db      	lsls	r3, r3, #3
   18fd6:	4413      	add	r3, r2
   18fd8:	681b      	ldr	r3, [r3, #0]
   18fda:	2b00      	cmp	r3, #0
   18fdc:	d009      	beq.n	18ff2 <MP_MAP_SLOT_IS_FILLED+0x2e>
   18fde:	687b      	ldr	r3, [r7, #4]
   18fe0:	689a      	ldr	r2, [r3, #8]
   18fe2:	683b      	ldr	r3, [r7, #0]
   18fe4:	00db      	lsls	r3, r3, #3
   18fe6:	4413      	add	r3, r2
   18fe8:	681b      	ldr	r3, [r3, #0]
   18fea:	2b08      	cmp	r3, #8
   18fec:	d001      	beq.n	18ff2 <MP_MAP_SLOT_IS_FILLED+0x2e>
   18fee:	2301      	movs	r3, #1
   18ff0:	e000      	b.n	18ff4 <MP_MAP_SLOT_IS_FILLED+0x30>
   18ff2:	2300      	movs	r3, #0
   18ff4:	f003 0301 	and.w	r3, r3, #1
   18ff8:	b2db      	uxtb	r3, r3
   18ffa:	4618      	mov	r0, r3
   18ffc:	370c      	adds	r7, #12
   18ffe:	46bd      	mov	sp, r7
   19000:	f85d 7b04 	ldr.w	r7, [sp], #4
   19004:	4770      	bx	lr
   19006:	bf00      	nop

00019008 <mp_obj_new_bool>:
static inline mp_obj_t mp_obj_new_bool(mp_int_t x) { return x ? mp_const_true : mp_const_false; }
   19008:	b480      	push	{r7}
   1900a:	b083      	sub	sp, #12
   1900c:	af00      	add	r7, sp, #0
   1900e:	6078      	str	r0, [r7, #4]
   19010:	687b      	ldr	r3, [r7, #4]
   19012:	2b00      	cmp	r3, #0
   19014:	d001      	beq.n	1901a <mp_obj_new_bool+0x12>
   19016:	4b04      	ldr	r3, [pc, #16]	; (19028 <mp_obj_new_bool+0x20>)
   19018:	e000      	b.n	1901c <mp_obj_new_bool+0x14>
   1901a:	4b04      	ldr	r3, [pc, #16]	; (1902c <mp_obj_new_bool+0x24>)
   1901c:	4618      	mov	r0, r3
   1901e:	370c      	adds	r7, #12
   19020:	46bd      	mov	sp, r7
   19022:	f85d 7b04 	ldr.w	r7, [sp], #4
   19026:	4770      	bx	lr
   19028:	00021b78 	.word	0x00021b78
   1902c:	00021b70 	.word	0x00021b70

00019030 <mp_locals_get>:
static inline mp_obj_dict_t *mp_locals_get(void) { return MP_STATE_THREAD(dict_locals); }
   19030:	b480      	push	{r7}
   19032:	af00      	add	r7, sp, #0
   19034:	4b03      	ldr	r3, [pc, #12]	; (19044 <mp_locals_get+0x14>)
   19036:	681b      	ldr	r3, [r3, #0]
   19038:	4618      	mov	r0, r3
   1903a:	46bd      	mov	sp, r7
   1903c:	f85d 7b04 	ldr.w	r7, [sp], #4
   19040:	4770      	bx	lr
   19042:	bf00      	nop
   19044:	200012f0 	.word	0x200012f0

00019048 <mp_locals_set>:
static inline void mp_locals_set(mp_obj_dict_t *d) { MP_STATE_THREAD(dict_locals) = d; }
   19048:	b480      	push	{r7}
   1904a:	b083      	sub	sp, #12
   1904c:	af00      	add	r7, sp, #0
   1904e:	6078      	str	r0, [r7, #4]
   19050:	4a04      	ldr	r2, [pc, #16]	; (19064 <mp_locals_set+0x1c>)
   19052:	687b      	ldr	r3, [r7, #4]
   19054:	6013      	str	r3, [r2, #0]
   19056:	bf00      	nop
   19058:	370c      	adds	r7, #12
   1905a:	46bd      	mov	sp, r7
   1905c:	f85d 7b04 	ldr.w	r7, [sp], #4
   19060:	4770      	bx	lr
   19062:	bf00      	nop
   19064:	200012f0 	.word	0x200012f0

00019068 <mp_globals_get>:
static inline mp_obj_dict_t *mp_globals_get(void) { return MP_STATE_THREAD(dict_globals); }
   19068:	b480      	push	{r7}
   1906a:	af00      	add	r7, sp, #0
   1906c:	4b03      	ldr	r3, [pc, #12]	; (1907c <mp_globals_get+0x14>)
   1906e:	685b      	ldr	r3, [r3, #4]
   19070:	4618      	mov	r0, r3
   19072:	46bd      	mov	sp, r7
   19074:	f85d 7b04 	ldr.w	r7, [sp], #4
   19078:	4770      	bx	lr
   1907a:	bf00      	nop
   1907c:	200012f0 	.word	0x200012f0

00019080 <mp_builtin___build_class__>:
#endif

// args[0] is function from class body
// args[1] is class name
// args[2:] are base objects
STATIC mp_obj_t mp_builtin___build_class__(size_t n_args, const mp_obj_t *args) {
   19080:	b580      	push	{r7, lr}
   19082:	b08a      	sub	sp, #40	; 0x28
   19084:	af00      	add	r7, sp, #0
   19086:	6078      	str	r0, [r7, #4]
   19088:	6039      	str	r1, [r7, #0]
    assert(2 <= n_args);
   1908a:	687b      	ldr	r3, [r7, #4]
   1908c:	2b01      	cmp	r3, #1
   1908e:	d805      	bhi.n	1909c <mp_builtin___build_class__+0x1c>
   19090:	4b24      	ldr	r3, [pc, #144]	; (19124 <mp_builtin___build_class__+0xa4>)
   19092:	4a25      	ldr	r2, [pc, #148]	; (19128 <mp_builtin___build_class__+0xa8>)
   19094:	2132      	movs	r1, #50	; 0x32
   19096:	4825      	ldr	r0, [pc, #148]	; (1912c <mp_builtin___build_class__+0xac>)
   19098:	f002 fb1a 	bl	1b6d0 <__assert_func>

    // set the new classes __locals__ object
    mp_obj_dict_t *old_locals = mp_locals_get();
   1909c:	f7ff ffc8 	bl	19030 <mp_locals_get>
   190a0:	6238      	str	r0, [r7, #32]
    mp_obj_t class_locals = mp_obj_new_dict(0);
   190a2:	2000      	movs	r0, #0
   190a4:	f7f6 f99a 	bl	f3dc <mp_obj_new_dict>
   190a8:	61f8      	str	r0, [r7, #28]
    mp_locals_set(MP_OBJ_TO_PTR(class_locals));
   190aa:	69f8      	ldr	r0, [r7, #28]
   190ac:	f7ff ffcc 	bl	19048 <mp_locals_set>

    // call the class code
    mp_obj_t cell = mp_call_function_0(args[0]);
   190b0:	683b      	ldr	r3, [r7, #0]
   190b2:	681b      	ldr	r3, [r3, #0]
   190b4:	4618      	mov	r0, r3
   190b6:	f7f2 ff9f 	bl	bff8 <mp_call_function_0>
   190ba:	61b8      	str	r0, [r7, #24]

    // restore old __locals__ object
    mp_locals_set(old_locals);
   190bc:	6a38      	ldr	r0, [r7, #32]
   190be:	f7ff ffc3 	bl	19048 <mp_locals_set>

    // get the class type (meta object) from the base objects
    mp_obj_t meta;
    if (n_args == 2) {
   190c2:	687b      	ldr	r3, [r7, #4]
   190c4:	2b02      	cmp	r3, #2
   190c6:	d102      	bne.n	190ce <mp_builtin___build_class__+0x4e>
        // no explicit bases, so use 'type'
        meta = MP_OBJ_FROM_PTR(&mp_type_type);
   190c8:	4b19      	ldr	r3, [pc, #100]	; (19130 <mp_builtin___build_class__+0xb0>)
   190ca:	627b      	str	r3, [r7, #36]	; 0x24
   190cc:	e006      	b.n	190dc <mp_builtin___build_class__+0x5c>
    } else {
        // use type of first base object
        meta = MP_OBJ_FROM_PTR(mp_obj_get_type(args[2]));
   190ce:	683b      	ldr	r3, [r7, #0]
   190d0:	3308      	adds	r3, #8
   190d2:	681b      	ldr	r3, [r3, #0]
   190d4:	4618      	mov	r0, r3
   190d6:	f7f4 fced 	bl	dab4 <mp_obj_get_type>
   190da:	6278      	str	r0, [r7, #36]	; 0x24

    // TODO do proper metaclass resolution for multiple base objects

    // create the new class using a call to the meta object
    mp_obj_t meta_args[3];
    meta_args[0] = args[1]; // class name
   190dc:	683b      	ldr	r3, [r7, #0]
   190de:	685b      	ldr	r3, [r3, #4]
   190e0:	60bb      	str	r3, [r7, #8]
    meta_args[1] = mp_obj_new_tuple(n_args - 2, args + 2); // tuple of bases
   190e2:	687b      	ldr	r3, [r7, #4]
   190e4:	1e9a      	subs	r2, r3, #2
   190e6:	683b      	ldr	r3, [r7, #0]
   190e8:	3308      	adds	r3, #8
   190ea:	4619      	mov	r1, r3
   190ec:	4610      	mov	r0, r2
   190ee:	f7fc ffbd 	bl	1606c <mp_obj_new_tuple>
   190f2:	4603      	mov	r3, r0
   190f4:	60fb      	str	r3, [r7, #12]
    meta_args[2] = class_locals; // dict of members
   190f6:	69fb      	ldr	r3, [r7, #28]
   190f8:	613b      	str	r3, [r7, #16]
    mp_obj_t new_class = mp_call_function_n_kw(meta, 3, 0, meta_args);
   190fa:	f107 0308 	add.w	r3, r7, #8
   190fe:	2200      	movs	r2, #0
   19100:	2103      	movs	r1, #3
   19102:	6a78      	ldr	r0, [r7, #36]	; 0x24
   19104:	f7f2 ffae 	bl	c064 <mp_call_function_n_kw>
   19108:	6178      	str	r0, [r7, #20]

    // store into cell if neede
    if (cell != mp_const_none) {
   1910a:	69bb      	ldr	r3, [r7, #24]
   1910c:	4a09      	ldr	r2, [pc, #36]	; (19134 <mp_builtin___build_class__+0xb4>)
   1910e:	4293      	cmp	r3, r2
   19110:	d003      	beq.n	1911a <mp_builtin___build_class__+0x9a>
        mp_obj_cell_set(cell, new_class);
   19112:	6979      	ldr	r1, [r7, #20]
   19114:	69b8      	ldr	r0, [r7, #24]
   19116:	f7f5 fa21 	bl	e55c <mp_obj_cell_set>
    }

    return new_class;
   1911a:	697b      	ldr	r3, [r7, #20]
}
   1911c:	4618      	mov	r0, r3
   1911e:	3728      	adds	r7, #40	; 0x28
   19120:	46bd      	mov	sp, r7
   19122:	bd80      	pop	{r7, pc}
   19124:	00024614 	.word	0x00024614
   19128:	00024a38 	.word	0x00024a38
   1912c:	00024620 	.word	0x00024620
   19130:	00024088 	.word	0x00024088
   19134:	0002345c 	.word	0x0002345c

00019138 <mp_builtin_abs>:
MP_DEFINE_CONST_FUN_OBJ_VAR(mp_builtin___build_class___obj, 2, mp_builtin___build_class__);

STATIC mp_obj_t mp_builtin_abs(mp_obj_t o_in) {
   19138:	b580      	push	{r7, lr}
   1913a:	b082      	sub	sp, #8
   1913c:	af00      	add	r7, sp, #0
   1913e:	6078      	str	r0, [r7, #4]
    return mp_unary_op(MP_UNARY_OP_ABS, o_in);
   19140:	6879      	ldr	r1, [r7, #4]
   19142:	2007      	movs	r0, #7
   19144:	f7f2 fc14 	bl	b970 <mp_unary_op>
   19148:	4603      	mov	r3, r0
}
   1914a:	4618      	mov	r0, r3
   1914c:	3708      	adds	r7, #8
   1914e:	46bd      	mov	sp, r7
   19150:	bd80      	pop	{r7, pc}
   19152:	bf00      	nop

00019154 <mp_builtin_all>:
MP_DEFINE_CONST_FUN_OBJ_1(mp_builtin_abs_obj, mp_builtin_abs);

STATIC mp_obj_t mp_builtin_all(mp_obj_t o_in) {
   19154:	b580      	push	{r7, lr}
   19156:	b088      	sub	sp, #32
   19158:	af00      	add	r7, sp, #0
   1915a:	6078      	str	r0, [r7, #4]
    mp_obj_iter_buf_t iter_buf;
    mp_obj_t iterable = mp_getiter(o_in, &iter_buf);
   1915c:	f107 0308 	add.w	r3, r7, #8
   19160:	4619      	mov	r1, r3
   19162:	6878      	ldr	r0, [r7, #4]
   19164:	f7f3 fcf4 	bl	cb50 <mp_getiter>
   19168:	61f8      	str	r0, [r7, #28]
    mp_obj_t item;
    while ((item = mp_iternext(iterable)) != MP_OBJ_STOP_ITERATION) {
   1916a:	e00a      	b.n	19182 <mp_builtin_all+0x2e>
        if (!mp_obj_is_true(item)) {
   1916c:	69b8      	ldr	r0, [r7, #24]
   1916e:	f7f4 fd7f 	bl	dc70 <mp_obj_is_true>
   19172:	4603      	mov	r3, r0
   19174:	f083 0301 	eor.w	r3, r3, #1
   19178:	b2db      	uxtb	r3, r3
   1917a:	2b00      	cmp	r3, #0
   1917c:	d001      	beq.n	19182 <mp_builtin_all+0x2e>
            return mp_const_false;
   1917e:	4b07      	ldr	r3, [pc, #28]	; (1919c <mp_builtin_all+0x48>)
   19180:	e007      	b.n	19192 <mp_builtin_all+0x3e>
    while ((item = mp_iternext(iterable)) != MP_OBJ_STOP_ITERATION) {
   19182:	69f8      	ldr	r0, [r7, #28]
   19184:	f7f3 fd66 	bl	cc54 <mp_iternext>
   19188:	61b8      	str	r0, [r7, #24]
   1918a:	69bb      	ldr	r3, [r7, #24]
   1918c:	2b04      	cmp	r3, #4
   1918e:	d1ed      	bne.n	1916c <mp_builtin_all+0x18>
        }
    }
    return mp_const_true;
   19190:	4b03      	ldr	r3, [pc, #12]	; (191a0 <mp_builtin_all+0x4c>)
}
   19192:	4618      	mov	r0, r3
   19194:	3720      	adds	r7, #32
   19196:	46bd      	mov	sp, r7
   19198:	bd80      	pop	{r7, pc}
   1919a:	bf00      	nop
   1919c:	00021b70 	.word	0x00021b70
   191a0:	00021b78 	.word	0x00021b78

000191a4 <mp_builtin_any>:
MP_DEFINE_CONST_FUN_OBJ_1(mp_builtin_all_obj, mp_builtin_all);

STATIC mp_obj_t mp_builtin_any(mp_obj_t o_in) {
   191a4:	b580      	push	{r7, lr}
   191a6:	b088      	sub	sp, #32
   191a8:	af00      	add	r7, sp, #0
   191aa:	6078      	str	r0, [r7, #4]
    mp_obj_iter_buf_t iter_buf;
    mp_obj_t iterable = mp_getiter(o_in, &iter_buf);
   191ac:	f107 0308 	add.w	r3, r7, #8
   191b0:	4619      	mov	r1, r3
   191b2:	6878      	ldr	r0, [r7, #4]
   191b4:	f7f3 fccc 	bl	cb50 <mp_getiter>
   191b8:	61f8      	str	r0, [r7, #28]
    mp_obj_t item;
    while ((item = mp_iternext(iterable)) != MP_OBJ_STOP_ITERATION) {
   191ba:	e007      	b.n	191cc <mp_builtin_any+0x28>
        if (mp_obj_is_true(item)) {
   191bc:	69b8      	ldr	r0, [r7, #24]
   191be:	f7f4 fd57 	bl	dc70 <mp_obj_is_true>
   191c2:	4603      	mov	r3, r0
   191c4:	2b00      	cmp	r3, #0
   191c6:	d001      	beq.n	191cc <mp_builtin_any+0x28>
            return mp_const_true;
   191c8:	4b06      	ldr	r3, [pc, #24]	; (191e4 <mp_builtin_any+0x40>)
   191ca:	e007      	b.n	191dc <mp_builtin_any+0x38>
    while ((item = mp_iternext(iterable)) != MP_OBJ_STOP_ITERATION) {
   191cc:	69f8      	ldr	r0, [r7, #28]
   191ce:	f7f3 fd41 	bl	cc54 <mp_iternext>
   191d2:	61b8      	str	r0, [r7, #24]
   191d4:	69bb      	ldr	r3, [r7, #24]
   191d6:	2b04      	cmp	r3, #4
   191d8:	d1f0      	bne.n	191bc <mp_builtin_any+0x18>
        }
    }
    return mp_const_false;
   191da:	4b03      	ldr	r3, [pc, #12]	; (191e8 <mp_builtin_any+0x44>)
}
   191dc:	4618      	mov	r0, r3
   191de:	3720      	adds	r7, #32
   191e0:	46bd      	mov	sp, r7
   191e2:	bd80      	pop	{r7, pc}
   191e4:	00021b78 	.word	0x00021b78
   191e8:	00021b70 	.word	0x00021b70

000191ec <mp_builtin_bin>:
MP_DEFINE_CONST_FUN_OBJ_1(mp_builtin_any_obj, mp_builtin_any);

STATIC mp_obj_t mp_builtin_bin(mp_obj_t o_in) {
   191ec:	b580      	push	{r7, lr}
   191ee:	b084      	sub	sp, #16
   191f0:	af00      	add	r7, sp, #0
   191f2:	6078      	str	r0, [r7, #4]
    mp_obj_t args[] = { MP_OBJ_NEW_QSTR(MP_QSTR__brace_open__colon__hash_b_brace_close_), o_in };
   191f4:	23b2      	movs	r3, #178	; 0xb2
   191f6:	60bb      	str	r3, [r7, #8]
   191f8:	687b      	ldr	r3, [r7, #4]
   191fa:	60fb      	str	r3, [r7, #12]
    return mp_obj_str_format(MP_ARRAY_SIZE(args), args, NULL);
   191fc:	f107 0308 	add.w	r3, r7, #8
   19200:	2200      	movs	r2, #0
   19202:	4619      	mov	r1, r3
   19204:	2002      	movs	r0, #2
   19206:	f7fb f9fd 	bl	14604 <mp_obj_str_format>
   1920a:	4603      	mov	r3, r0
}
   1920c:	4618      	mov	r0, r3
   1920e:	3710      	adds	r7, #16
   19210:	46bd      	mov	sp, r7
   19212:	bd80      	pop	{r7, pc}

00019214 <mp_builtin_callable>:
MP_DEFINE_CONST_FUN_OBJ_1(mp_builtin_bin_obj, mp_builtin_bin);

STATIC mp_obj_t mp_builtin_callable(mp_obj_t o_in) {
   19214:	b580      	push	{r7, lr}
   19216:	b082      	sub	sp, #8
   19218:	af00      	add	r7, sp, #0
   1921a:	6078      	str	r0, [r7, #4]
    if (mp_obj_is_callable(o_in)) {
   1921c:	6878      	ldr	r0, [r7, #4]
   1921e:	f7f4 fd7d 	bl	dd1c <mp_obj_is_callable>
   19222:	4603      	mov	r3, r0
   19224:	2b00      	cmp	r3, #0
   19226:	d001      	beq.n	1922c <mp_builtin_callable+0x18>
        return mp_const_true;
   19228:	4b03      	ldr	r3, [pc, #12]	; (19238 <mp_builtin_callable+0x24>)
   1922a:	e000      	b.n	1922e <mp_builtin_callable+0x1a>
    } else {
        return mp_const_false;
   1922c:	4b03      	ldr	r3, [pc, #12]	; (1923c <mp_builtin_callable+0x28>)
    }
}
   1922e:	4618      	mov	r0, r3
   19230:	3708      	adds	r7, #8
   19232:	46bd      	mov	sp, r7
   19234:	bd80      	pop	{r7, pc}
   19236:	bf00      	nop
   19238:	00021b78 	.word	0x00021b78
   1923c:	00021b70 	.word	0x00021b70

00019240 <mp_builtin_chr>:
MP_DEFINE_CONST_FUN_OBJ_1(mp_builtin_callable_obj, mp_builtin_callable);

STATIC mp_obj_t mp_builtin_chr(mp_obj_t o_in) {
   19240:	b580      	push	{r7, lr}
   19242:	b084      	sub	sp, #16
   19244:	af00      	add	r7, sp, #0
   19246:	6078      	str	r0, [r7, #4]
    } else {
        mp_raise_ValueError("chr() arg not in range(0x110000)");
    }
    return mp_obj_new_str_via_qstr((char*)str, len);
    #else
    mp_int_t ord = mp_obj_get_int(o_in);
   19248:	6878      	ldr	r0, [r7, #4]
   1924a:	f7f4 fe11 	bl	de70 <mp_obj_get_int>
   1924e:	60f8      	str	r0, [r7, #12]
    if (0 <= ord && ord <= 0xff) {
   19250:	68fb      	ldr	r3, [r7, #12]
   19252:	2b00      	cmp	r3, #0
   19254:	db0d      	blt.n	19272 <mp_builtin_chr+0x32>
   19256:	68fb      	ldr	r3, [r7, #12]
   19258:	2bff      	cmp	r3, #255	; 0xff
   1925a:	dc0a      	bgt.n	19272 <mp_builtin_chr+0x32>
        uint8_t str[1] = {ord};
   1925c:	68fb      	ldr	r3, [r7, #12]
   1925e:	b2db      	uxtb	r3, r3
   19260:	723b      	strb	r3, [r7, #8]
        return mp_obj_new_str_via_qstr((char*)str, 1);
   19262:	f107 0308 	add.w	r3, r7, #8
   19266:	2101      	movs	r1, #1
   19268:	4618      	mov	r0, r3
   1926a:	f7fc f985 	bl	15578 <mp_obj_new_str_via_qstr>
   1926e:	4603      	mov	r3, r0
   19270:	e002      	b.n	19278 <mp_builtin_chr+0x38>
    } else {
        mp_raise_ValueError("chr() arg not in range(256)");
   19272:	4803      	ldr	r0, [pc, #12]	; (19280 <mp_builtin_chr+0x40>)
   19274:	f7f3 ffb4 	bl	d1e0 <mp_raise_ValueError>
    }
    #endif
}
   19278:	4618      	mov	r0, r3
   1927a:	3710      	adds	r7, #16
   1927c:	46bd      	mov	sp, r7
   1927e:	bd80      	pop	{r7, pc}
   19280:	0002466c 	.word	0x0002466c

00019284 <mp_builtin_dir>:
MP_DEFINE_CONST_FUN_OBJ_1(mp_builtin_chr_obj, mp_builtin_chr);

STATIC mp_obj_t mp_builtin_dir(size_t n_args, const mp_obj_t *args) {
   19284:	b580      	push	{r7, lr}
   19286:	b08a      	sub	sp, #40	; 0x28
   19288:	af00      	add	r7, sp, #0
   1928a:	6078      	str	r0, [r7, #4]
   1928c:	6039      	str	r1, [r7, #0]
    mp_obj_t dir = mp_obj_new_list(0, NULL);
   1928e:	2100      	movs	r1, #0
   19290:	2000      	movs	r0, #0
   19292:	f7f8 fc3d 	bl	11b10 <mp_obj_new_list>
   19296:	61f8      	str	r0, [r7, #28]
    if (n_args == 0) {
   19298:	687b      	ldr	r3, [r7, #4]
   1929a:	2b00      	cmp	r3, #0
   1929c:	d121      	bne.n	192e2 <mp_builtin_dir+0x5e>
        // Make a list of names in the local namespace
        mp_obj_dict_t *dict = mp_locals_get();
   1929e:	f7ff fec7 	bl	19030 <mp_locals_get>
   192a2:	61b8      	str	r0, [r7, #24]
        for (size_t i = 0; i < dict->map.alloc; i++) {
   192a4:	2300      	movs	r3, #0
   192a6:	627b      	str	r3, [r7, #36]	; 0x24
   192a8:	e015      	b.n	192d6 <mp_builtin_dir+0x52>
            if (MP_MAP_SLOT_IS_FILLED(&dict->map, i)) {
   192aa:	69bb      	ldr	r3, [r7, #24]
   192ac:	3304      	adds	r3, #4
   192ae:	6a79      	ldr	r1, [r7, #36]	; 0x24
   192b0:	4618      	mov	r0, r3
   192b2:	f7ff fe87 	bl	18fc4 <MP_MAP_SLOT_IS_FILLED>
   192b6:	4603      	mov	r3, r0
   192b8:	2b00      	cmp	r3, #0
   192ba:	d009      	beq.n	192d0 <mp_builtin_dir+0x4c>
                mp_obj_list_append(dir, dict->map.table[i].key);
   192bc:	69bb      	ldr	r3, [r7, #24]
   192be:	68da      	ldr	r2, [r3, #12]
   192c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   192c2:	00db      	lsls	r3, r3, #3
   192c4:	4413      	add	r3, r2
   192c6:	681b      	ldr	r3, [r3, #0]
   192c8:	4619      	mov	r1, r3
   192ca:	69f8      	ldr	r0, [r7, #28]
   192cc:	f7f7 ff8e 	bl	111ec <mp_obj_list_append>
        for (size_t i = 0; i < dict->map.alloc; i++) {
   192d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   192d2:	3301      	adds	r3, #1
   192d4:	627b      	str	r3, [r7, #36]	; 0x24
   192d6:	69bb      	ldr	r3, [r7, #24]
   192d8:	689a      	ldr	r2, [r3, #8]
   192da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   192dc:	429a      	cmp	r2, r3
   192de:	d8e4      	bhi.n	192aa <mp_builtin_dir+0x26>
   192e0:	e024      	b.n	1932c <mp_builtin_dir+0xa8>
            }
        }
    } else { // n_args == 1
        // Make a list of names in the given object
        // Implemented by probing all possible qstrs with mp_load_method_maybe
        size_t nqstr = QSTR_TOTAL();
   192e2:	4b15      	ldr	r3, [pc, #84]	; (19338 <mp_builtin_dir+0xb4>)
   192e4:	691b      	ldr	r3, [r3, #16]
   192e6:	685a      	ldr	r2, [r3, #4]
   192e8:	4b13      	ldr	r3, [pc, #76]	; (19338 <mp_builtin_dir+0xb4>)
   192ea:	691b      	ldr	r3, [r3, #16]
   192ec:	68db      	ldr	r3, [r3, #12]
   192ee:	4413      	add	r3, r2
   192f0:	617b      	str	r3, [r7, #20]
        for (size_t i = MP_QSTR_ + 1; i < nqstr; ++i) {
   192f2:	2302      	movs	r3, #2
   192f4:	623b      	str	r3, [r7, #32]
   192f6:	e015      	b.n	19324 <mp_builtin_dir+0xa0>
            mp_obj_t dest[2];
            mp_load_method_protected(args[0], i, dest, false);
   192f8:	683b      	ldr	r3, [r7, #0]
   192fa:	6818      	ldr	r0, [r3, #0]
   192fc:	f107 020c 	add.w	r2, r7, #12
   19300:	2300      	movs	r3, #0
   19302:	6a39      	ldr	r1, [r7, #32]
   19304:	f7f3 fbc8 	bl	ca98 <mp_load_method_protected>
            if (dest[0] != MP_OBJ_NULL) {
   19308:	68fb      	ldr	r3, [r7, #12]
   1930a:	2b00      	cmp	r3, #0
   1930c:	d007      	beq.n	1931e <mp_builtin_dir+0x9a>
                // This relies on MP_QSTR__dir__ being first after MP_QSTR_
                if (i == MP_QSTR___dir__ && dest[1] != MP_OBJ_NULL) {
                    return mp_call_method_n_kw(0, 0, dest);
                }
                #endif
                mp_obj_list_append(dir, MP_OBJ_NEW_QSTR(i));
   1930e:	6a3b      	ldr	r3, [r7, #32]
   19310:	009b      	lsls	r3, r3, #2
   19312:	f043 0302 	orr.w	r3, r3, #2
   19316:	4619      	mov	r1, r3
   19318:	69f8      	ldr	r0, [r7, #28]
   1931a:	f7f7 ff67 	bl	111ec <mp_obj_list_append>
        for (size_t i = MP_QSTR_ + 1; i < nqstr; ++i) {
   1931e:	6a3b      	ldr	r3, [r7, #32]
   19320:	3301      	adds	r3, #1
   19322:	623b      	str	r3, [r7, #32]
   19324:	6a3a      	ldr	r2, [r7, #32]
   19326:	697b      	ldr	r3, [r7, #20]
   19328:	429a      	cmp	r2, r3
   1932a:	d3e5      	bcc.n	192f8 <mp_builtin_dir+0x74>
            }
        }
    }
    return dir;
   1932c:	69fb      	ldr	r3, [r7, #28]
}
   1932e:	4618      	mov	r0, r3
   19330:	3728      	adds	r7, #40	; 0x28
   19332:	46bd      	mov	sp, r7
   19334:	bd80      	pop	{r7, pc}
   19336:	bf00      	nop
   19338:	200012f0 	.word	0x200012f0

0001933c <mp_builtin_divmod>:
MP_DEFINE_CONST_FUN_OBJ_VAR_BETWEEN(mp_builtin_dir_obj, 0, 1, mp_builtin_dir);

STATIC mp_obj_t mp_builtin_divmod(mp_obj_t o1_in, mp_obj_t o2_in) {
   1933c:	b580      	push	{r7, lr}
   1933e:	b082      	sub	sp, #8
   19340:	af00      	add	r7, sp, #0
   19342:	6078      	str	r0, [r7, #4]
   19344:	6039      	str	r1, [r7, #0]
    return mp_binary_op(MP_BINARY_OP_DIVMOD, o1_in, o2_in);
   19346:	683a      	ldr	r2, [r7, #0]
   19348:	6879      	ldr	r1, [r7, #4]
   1934a:	2021      	movs	r0, #33	; 0x21
   1934c:	f7f2 fbf6 	bl	bb3c <mp_binary_op>
   19350:	4603      	mov	r3, r0
}
   19352:	4618      	mov	r0, r3
   19354:	3708      	adds	r7, #8
   19356:	46bd      	mov	sp, r7
   19358:	bd80      	pop	{r7, pc}
   1935a:	bf00      	nop

0001935c <mp_builtin_hash>:
MP_DEFINE_CONST_FUN_OBJ_2(mp_builtin_divmod_obj, mp_builtin_divmod);

STATIC mp_obj_t mp_builtin_hash(mp_obj_t o_in) {
   1935c:	b580      	push	{r7, lr}
   1935e:	b082      	sub	sp, #8
   19360:	af00      	add	r7, sp, #0
   19362:	6078      	str	r0, [r7, #4]
    // result is guaranteed to be a (small) int
    return mp_unary_op(MP_UNARY_OP_HASH, o_in);
   19364:	6879      	ldr	r1, [r7, #4]
   19366:	2006      	movs	r0, #6
   19368:	f7f2 fb02 	bl	b970 <mp_unary_op>
   1936c:	4603      	mov	r3, r0
}
   1936e:	4618      	mov	r0, r3
   19370:	3708      	adds	r7, #8
   19372:	46bd      	mov	sp, r7
   19374:	bd80      	pop	{r7, pc}
   19376:	bf00      	nop

00019378 <mp_builtin_hex>:
MP_DEFINE_CONST_FUN_OBJ_1(mp_builtin_hash_obj, mp_builtin_hash);

STATIC mp_obj_t mp_builtin_hex(mp_obj_t o_in) {
   19378:	b580      	push	{r7, lr}
   1937a:	b082      	sub	sp, #8
   1937c:	af00      	add	r7, sp, #0
   1937e:	6078      	str	r0, [r7, #4]
    return mp_binary_op(MP_BINARY_OP_MODULO, MP_OBJ_NEW_QSTR(MP_QSTR__percent__hash_x), o_in);
   19380:	687a      	ldr	r2, [r7, #4]
   19382:	21ae      	movs	r1, #174	; 0xae
   19384:	201f      	movs	r0, #31
   19386:	f7f2 fbd9 	bl	bb3c <mp_binary_op>
   1938a:	4603      	mov	r3, r0
}
   1938c:	4618      	mov	r0, r3
   1938e:	3708      	adds	r7, #8
   19390:	46bd      	mov	sp, r7
   19392:	bd80      	pop	{r7, pc}

00019394 <mp_builtin_iter>:
}
MP_DEFINE_CONST_FUN_OBJ_VAR_BETWEEN(mp_builtin_input_obj, 0, 1, mp_builtin_input);

#endif

STATIC mp_obj_t mp_builtin_iter(mp_obj_t o_in) {
   19394:	b580      	push	{r7, lr}
   19396:	b082      	sub	sp, #8
   19398:	af00      	add	r7, sp, #0
   1939a:	6078      	str	r0, [r7, #4]
    return mp_getiter(o_in, NULL);
   1939c:	2100      	movs	r1, #0
   1939e:	6878      	ldr	r0, [r7, #4]
   193a0:	f7f3 fbd6 	bl	cb50 <mp_getiter>
   193a4:	4603      	mov	r3, r0
}
   193a6:	4618      	mov	r0, r3
   193a8:	3708      	adds	r7, #8
   193aa:	46bd      	mov	sp, r7
   193ac:	bd80      	pop	{r7, pc}
   193ae:	bf00      	nop

000193b0 <mp_builtin_next>:
}
MP_DEFINE_CONST_FUN_OBJ_KW(mp_builtin_min_obj, 1, mp_builtin_min);

#endif

STATIC mp_obj_t mp_builtin_next(mp_obj_t o) {
   193b0:	b580      	push	{r7, lr}
   193b2:	b084      	sub	sp, #16
   193b4:	af00      	add	r7, sp, #0
   193b6:	6078      	str	r0, [r7, #4]
    mp_obj_t ret = mp_iternext_allow_raise(o);
   193b8:	6878      	ldr	r0, [r7, #4]
   193ba:	f7f3 fc1d 	bl	cbf8 <mp_iternext_allow_raise>
   193be:	60f8      	str	r0, [r7, #12]
    if (ret == MP_OBJ_STOP_ITERATION) {
   193c0:	68fb      	ldr	r3, [r7, #12]
   193c2:	2b04      	cmp	r3, #4
   193c4:	d106      	bne.n	193d4 <mp_builtin_next+0x24>
        nlr_raise(mp_obj_new_exception(&mp_type_StopIteration));
   193c6:	4806      	ldr	r0, [pc, #24]	; (193e0 <mp_builtin_next+0x30>)
   193c8:	f7f6 f9bc 	bl	f744 <mp_obj_new_exception>
   193cc:	4603      	mov	r3, r0
   193ce:	4618      	mov	r0, r3
   193d0:	f7e6 ff86 	bl	2e0 <nlr_jump>
    } else {
        return ret;
   193d4:	68fb      	ldr	r3, [r7, #12]
    }
}
   193d6:	4618      	mov	r0, r3
   193d8:	3710      	adds	r7, #16
   193da:	46bd      	mov	sp, r7
   193dc:	bd80      	pop	{r7, pc}
   193de:	bf00      	nop
   193e0:	00022260 	.word	0x00022260

000193e4 <mp_builtin_oct>:
MP_DEFINE_CONST_FUN_OBJ_1(mp_builtin_next_obj, mp_builtin_next);

STATIC mp_obj_t mp_builtin_oct(mp_obj_t o_in) {
   193e4:	b580      	push	{r7, lr}
   193e6:	b082      	sub	sp, #8
   193e8:	af00      	add	r7, sp, #0
   193ea:	6078      	str	r0, [r7, #4]
    return mp_binary_op(MP_BINARY_OP_MODULO, MP_OBJ_NEW_QSTR(MP_QSTR__percent__hash_o), o_in);
   193ec:	687a      	ldr	r2, [r7, #4]
   193ee:	21aa      	movs	r1, #170	; 0xaa
   193f0:	201f      	movs	r0, #31
   193f2:	f7f2 fba3 	bl	bb3c <mp_binary_op>
   193f6:	4603      	mov	r3, r0
}
   193f8:	4618      	mov	r0, r3
   193fa:	3708      	adds	r7, #8
   193fc:	46bd      	mov	sp, r7
   193fe:	bd80      	pop	{r7, pc}

00019400 <mp_builtin_ord>:
MP_DEFINE_CONST_FUN_OBJ_1(mp_builtin_oct_obj, mp_builtin_oct);

STATIC mp_obj_t mp_builtin_ord(mp_obj_t o_in) {
   19400:	b580      	push	{r7, lr}
   19402:	b084      	sub	sp, #16
   19404:	af00      	add	r7, sp, #0
   19406:	6078      	str	r0, [r7, #4]
    size_t len;
    const byte *str = (const byte*)mp_obj_str_get_data(o_in, &len);
   19408:	f107 0308 	add.w	r3, r7, #8
   1940c:	4619      	mov	r1, r3
   1940e:	6878      	ldr	r0, [r7, #4]
   19410:	f7fc fa88 	bl	15924 <mp_obj_str_get_data>
   19414:	60f8      	str	r0, [r7, #12]
        }
    } else
    #endif
    {
        // a bytes object, or a str without unicode support (don't sign extend the char)
        if (len == 1) {
   19416:	68bb      	ldr	r3, [r7, #8]
   19418:	2b01      	cmp	r3, #1
   1941a:	d105      	bne.n	19428 <mp_builtin_ord+0x28>
            return MP_OBJ_NEW_SMALL_INT(str[0]);
   1941c:	68fb      	ldr	r3, [r7, #12]
   1941e:	781b      	ldrb	r3, [r3, #0]
   19420:	005b      	lsls	r3, r3, #1
   19422:	f043 0301 	orr.w	r3, r3, #1
   19426:	e002      	b.n	1942e <mp_builtin_ord+0x2e>
        }
    }

    if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
        mp_raise_TypeError("ord expects a character");
   19428:	4803      	ldr	r0, [pc, #12]	; (19438 <mp_builtin_ord+0x38>)
   1942a:	f7f3 fee3 	bl	d1f4 <mp_raise_TypeError>
    } else {
        nlr_raise(mp_obj_new_exception_msg_varg(&mp_type_TypeError,
            "ord() expected a character, but string of length %d found", (int)len));
    }
}
   1942e:	4618      	mov	r0, r3
   19430:	3710      	adds	r7, #16
   19432:	46bd      	mov	sp, r7
   19434:	bd80      	pop	{r7, pc}
   19436:	bf00      	nop
   19438:	000246cc 	.word	0x000246cc

0001943c <mp_builtin_pow>:
MP_DEFINE_CONST_FUN_OBJ_1(mp_builtin_ord_obj, mp_builtin_ord);

STATIC mp_obj_t mp_builtin_pow(size_t n_args, const mp_obj_t *args) {
   1943c:	b580      	push	{r7, lr}
   1943e:	b082      	sub	sp, #8
   19440:	af00      	add	r7, sp, #0
   19442:	6078      	str	r0, [r7, #4]
   19444:	6039      	str	r1, [r7, #0]
    switch (n_args) {
   19446:	687b      	ldr	r3, [r7, #4]
   19448:	2b02      	cmp	r3, #2
   1944a:	d10a      	bne.n	19462 <mp_builtin_pow+0x26>
        case 2: return mp_binary_op(MP_BINARY_OP_POWER, args[0], args[1]);
   1944c:	683b      	ldr	r3, [r7, #0]
   1944e:	6819      	ldr	r1, [r3, #0]
   19450:	683b      	ldr	r3, [r7, #0]
   19452:	3304      	adds	r3, #4
   19454:	681b      	ldr	r3, [r3, #0]
   19456:	461a      	mov	r2, r3
   19458:	2020      	movs	r0, #32
   1945a:	f7f2 fb6f 	bl	bb3c <mp_binary_op>
   1945e:	4603      	mov	r3, r0
   19460:	e003      	b.n	1946a <mp_builtin_pow+0x2e>
        default:
#if !MICROPY_PY_BUILTINS_POW3
            mp_raise_msg(&mp_type_NotImplementedError, "3-arg pow() not supported");
   19462:	4904      	ldr	r1, [pc, #16]	; (19474 <mp_builtin_pow+0x38>)
   19464:	4804      	ldr	r0, [pc, #16]	; (19478 <mp_builtin_pow+0x3c>)
   19466:	f7f3 fea3 	bl	d1b0 <mp_raise_msg>
            return mp_binary_op(MP_BINARY_OP_MODULO, mp_binary_op(MP_BINARY_OP_POWER, args[0], args[1]), args[2]);
#else
            return mp_obj_int_pow3(args[0], args[1], args[2]);
#endif
    }
}
   1946a:	4618      	mov	r0, r3
   1946c:	3708      	adds	r7, #8
   1946e:	46bd      	mov	sp, r7
   19470:	bd80      	pop	{r7, pc}
   19472:	bf00      	nop
   19474:	000246ec 	.word	0x000246ec
   19478:	000225e4 	.word	0x000225e4

0001947c <mp_builtin_print>:
MP_DEFINE_CONST_FUN_OBJ_VAR_BETWEEN(mp_builtin_pow_obj, 2, 3, mp_builtin_pow);

STATIC mp_obj_t mp_builtin_print(size_t n_args, const mp_obj_t *pos_args, mp_map_t *kw_args) {
   1947c:	b580      	push	{r7, lr}
   1947e:	b08e      	sub	sp, #56	; 0x38
   19480:	af02      	add	r7, sp, #8
   19482:	60f8      	str	r0, [r7, #12]
   19484:	60b9      	str	r1, [r7, #8]
   19486:	607a      	str	r2, [r7, #4]
    // parse args (a union is used to reduce the amount of C stack that is needed)
    union {
        mp_arg_val_t args[MP_ARRAY_SIZE(allowed_args)];
        size_t len[2];
    } u;
    mp_arg_parse_all(0, NULL, kw_args, MP_ARRAY_SIZE(allowed_args), allowed_args, u.args);
   19488:	f107 0314 	add.w	r3, r7, #20
   1948c:	9301      	str	r3, [sp, #4]
   1948e:	4b25      	ldr	r3, [pc, #148]	; (19524 <mp_builtin_print+0xa8>)
   19490:	9300      	str	r3, [sp, #0]
   19492:	2302      	movs	r3, #2
   19494:	687a      	ldr	r2, [r7, #4]
   19496:	2100      	movs	r1, #0
   19498:	2000      	movs	r0, #0
   1949a:	f7f3 ff43 	bl	d324 <mp_arg_parse_all>
    // TODO file may not be a concrete object (eg it could be a small-int)
    mp_print_t print = {MP_OBJ_TO_PTR(u.args[ARG_file].u_obj), mp_stream_write_adaptor};
    #endif

    // extract the objects first because we are going to use the other part of the union
    mp_obj_t sep = u.args[ARG_sep].u_obj;
   1949e:	697b      	ldr	r3, [r7, #20]
   194a0:	62bb      	str	r3, [r7, #40]	; 0x28
    mp_obj_t end = u.args[ARG_end].u_obj;
   194a2:	69bb      	ldr	r3, [r7, #24]
   194a4:	627b      	str	r3, [r7, #36]	; 0x24
    const char *sep_data = mp_obj_str_get_data(sep, &u.len[0]);
   194a6:	f107 0314 	add.w	r3, r7, #20
   194aa:	4619      	mov	r1, r3
   194ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   194ae:	f7fc fa39 	bl	15924 <mp_obj_str_get_data>
   194b2:	6238      	str	r0, [r7, #32]
    const char *end_data = mp_obj_str_get_data(end, &u.len[1]);
   194b4:	f107 0314 	add.w	r3, r7, #20
   194b8:	3304      	adds	r3, #4
   194ba:	4619      	mov	r1, r3
   194bc:	6a78      	ldr	r0, [r7, #36]	; 0x24
   194be:	f7fc fa31 	bl	15924 <mp_obj_str_get_data>
   194c2:	61f8      	str	r0, [r7, #28]

    for (size_t i = 0; i < n_args; i++) {
   194c4:	2300      	movs	r3, #0
   194c6:	62fb      	str	r3, [r7, #44]	; 0x2c
   194c8:	e019      	b.n	194fe <mp_builtin_print+0x82>
        if (i > 0) {
   194ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   194cc:	2b00      	cmp	r3, #0
   194ce:	d009      	beq.n	194e4 <mp_builtin_print+0x68>
            #if MICROPY_PY_IO && MICROPY_PY_SYS_STDFILES
            mp_stream_write_adaptor(print.data, sep_data, u.len[0]);
            #else
            mp_print_strn(&mp_plat_print, sep_data, u.len[0], 0, 0, 0);
   194d0:	697a      	ldr	r2, [r7, #20]
   194d2:	2300      	movs	r3, #0
   194d4:	9301      	str	r3, [sp, #4]
   194d6:	2300      	movs	r3, #0
   194d8:	9300      	str	r3, [sp, #0]
   194da:	2300      	movs	r3, #0
   194dc:	6a39      	ldr	r1, [r7, #32]
   194de:	4812      	ldr	r0, [pc, #72]	; (19528 <mp_builtin_print+0xac>)
   194e0:	f7e8 faa0 	bl	1a24 <mp_print_strn>
            #endif
        }
        #if MICROPY_PY_IO && MICROPY_PY_SYS_STDFILES
        mp_obj_print_helper(&print, pos_args[i], PRINT_STR);
        #else
        mp_obj_print_helper(&mp_plat_print, pos_args[i], PRINT_STR);
   194e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   194e6:	009b      	lsls	r3, r3, #2
   194e8:	68ba      	ldr	r2, [r7, #8]
   194ea:	4413      	add	r3, r2
   194ec:	681b      	ldr	r3, [r3, #0]
   194ee:	2200      	movs	r2, #0
   194f0:	4619      	mov	r1, r3
   194f2:	480d      	ldr	r0, [pc, #52]	; (19528 <mp_builtin_print+0xac>)
   194f4:	f7f4 fb10 	bl	db18 <mp_obj_print_helper>
    for (size_t i = 0; i < n_args; i++) {
   194f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   194fa:	3301      	adds	r3, #1
   194fc:	62fb      	str	r3, [r7, #44]	; 0x2c
   194fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   19500:	68fb      	ldr	r3, [r7, #12]
   19502:	429a      	cmp	r2, r3
   19504:	d3e1      	bcc.n	194ca <mp_builtin_print+0x4e>
        #endif
    }
    #if MICROPY_PY_IO && MICROPY_PY_SYS_STDFILES
    mp_stream_write_adaptor(print.data, end_data, u.len[1]);
    #else
    mp_print_strn(&mp_plat_print, end_data, u.len[1], 0, 0, 0);
   19506:	69ba      	ldr	r2, [r7, #24]
   19508:	2300      	movs	r3, #0
   1950a:	9301      	str	r3, [sp, #4]
   1950c:	2300      	movs	r3, #0
   1950e:	9300      	str	r3, [sp, #0]
   19510:	2300      	movs	r3, #0
   19512:	69f9      	ldr	r1, [r7, #28]
   19514:	4804      	ldr	r0, [pc, #16]	; (19528 <mp_builtin_print+0xac>)
   19516:	f7e8 fa85 	bl	1a24 <mp_print_strn>
    #endif
    return mp_const_none;
   1951a:	4b04      	ldr	r3, [pc, #16]	; (1952c <mp_builtin_print+0xb0>)
}
   1951c:	4618      	mov	r0, r3
   1951e:	3730      	adds	r7, #48	; 0x30
   19520:	46bd      	mov	sp, r7
   19522:	bd80      	pop	{r7, pc}
   19524:	00024a54 	.word	0x00024a54
   19528:	0001f75c 	.word	0x0001f75c
   1952c:	0002345c 	.word	0x0002345c

00019530 <mp_builtin___repl_print__>:
MP_DEFINE_CONST_FUN_OBJ_KW(mp_builtin_print_obj, 0, mp_builtin_print);

STATIC mp_obj_t mp_builtin___repl_print__(mp_obj_t o) {
   19530:	b580      	push	{r7, lr}
   19532:	b082      	sub	sp, #8
   19534:	af00      	add	r7, sp, #0
   19536:	6078      	str	r0, [r7, #4]
    if (o != mp_const_none) {
   19538:	687b      	ldr	r3, [r7, #4]
   1953a:	4a08      	ldr	r2, [pc, #32]	; (1955c <mp_builtin___repl_print__+0x2c>)
   1953c:	4293      	cmp	r3, r2
   1953e:	d008      	beq.n	19552 <mp_builtin___repl_print__+0x22>
        mp_obj_print_helper(MP_PYTHON_PRINTER, o, PRINT_REPR);
   19540:	2201      	movs	r2, #1
   19542:	6879      	ldr	r1, [r7, #4]
   19544:	4806      	ldr	r0, [pc, #24]	; (19560 <mp_builtin___repl_print__+0x30>)
   19546:	f7f4 fae7 	bl	db18 <mp_obj_print_helper>
        mp_print_str(MP_PYTHON_PRINTER, "\n");
   1954a:	4906      	ldr	r1, [pc, #24]	; (19564 <mp_builtin___repl_print__+0x34>)
   1954c:	4804      	ldr	r0, [pc, #16]	; (19560 <mp_builtin___repl_print__+0x30>)
   1954e:	f7e8 fa51 	bl	19f4 <mp_print_str>
        // Set "_" special variable
        mp_obj_t dest[2] = {MP_OBJ_SENTINEL, o};
        mp_type_module.attr(MP_OBJ_FROM_PTR(&mp_module_builtins), MP_QSTR__, dest);
        #endif
    }
    return mp_const_none;
   19552:	4b02      	ldr	r3, [pc, #8]	; (1955c <mp_builtin___repl_print__+0x2c>)
}
   19554:	4618      	mov	r0, r3
   19556:	3708      	adds	r7, #8
   19558:	46bd      	mov	sp, r7
   1955a:	bd80      	pop	{r7, pc}
   1955c:	0002345c 	.word	0x0002345c
   19560:	0001f75c 	.word	0x0001f75c
   19564:	00024720 	.word	0x00024720

00019568 <mp_builtin_repr>:
MP_DEFINE_CONST_FUN_OBJ_1(mp_builtin___repl_print___obj, mp_builtin___repl_print__);

STATIC mp_obj_t mp_builtin_repr(mp_obj_t o_in) {
   19568:	b580      	push	{r7, lr}
   1956a:	b088      	sub	sp, #32
   1956c:	af00      	add	r7, sp, #0
   1956e:	6078      	str	r0, [r7, #4]
    vstr_t vstr;
    mp_print_t print;
    vstr_init_print(&vstr, 16, &print);
   19570:	f107 0208 	add.w	r2, r7, #8
   19574:	f107 0310 	add.w	r3, r7, #16
   19578:	2110      	movs	r1, #16
   1957a:	4618      	mov	r0, r3
   1957c:	f7e7 ffca 	bl	1514 <vstr_init_print>
    mp_obj_print_helper(&print, o_in, PRINT_REPR);
   19580:	f107 0308 	add.w	r3, r7, #8
   19584:	2201      	movs	r2, #1
   19586:	6879      	ldr	r1, [r7, #4]
   19588:	4618      	mov	r0, r3
   1958a:	f7f4 fac5 	bl	db18 <mp_obj_print_helper>
    return mp_obj_new_str_from_vstr(&mp_type_str, &vstr);
   1958e:	f107 0310 	add.w	r3, r7, #16
   19592:	4619      	mov	r1, r3
   19594:	4803      	ldr	r0, [pc, #12]	; (195a4 <mp_builtin_repr+0x3c>)
   19596:	f7fc f801 	bl	1559c <mp_obj_new_str_from_vstr>
   1959a:	4603      	mov	r3, r0
}
   1959c:	4618      	mov	r0, r3
   1959e:	3720      	adds	r7, #32
   195a0:	46bd      	mov	sp, r7
   195a2:	bd80      	pop	{r7, pc}
   195a4:	00023b0c 	.word	0x00023b0c

000195a8 <mp_builtin_round>:
MP_DEFINE_CONST_FUN_OBJ_1(mp_builtin_repr_obj, mp_builtin_repr);

STATIC mp_obj_t mp_builtin_round(size_t n_args, const mp_obj_t *args) {
   195a8:	b580      	push	{r7, lr}
   195aa:	b084      	sub	sp, #16
   195ac:	af00      	add	r7, sp, #0
   195ae:	6078      	str	r0, [r7, #4]
   195b0:	6039      	str	r1, [r7, #0]
    mp_obj_t o_in = args[0];
   195b2:	683b      	ldr	r3, [r7, #0]
   195b4:	681b      	ldr	r3, [r3, #0]
   195b6:	60fb      	str	r3, [r7, #12]
    if (MP_OBJ_IS_INT(o_in)) {
   195b8:	68f8      	ldr	r0, [r7, #12]
   195ba:	f7ff fcdf 	bl	18f7c <MP_OBJ_IS_SMALL_INT>
   195be:	4603      	mov	r3, r0
   195c0:	2b00      	cmp	r3, #0
   195c2:	d10a      	bne.n	195da <mp_builtin_round+0x32>
   195c4:	68f8      	ldr	r0, [r7, #12]
   195c6:	f7ff fceb 	bl	18fa0 <MP_OBJ_IS_OBJ>
   195ca:	4603      	mov	r3, r0
   195cc:	2b00      	cmp	r3, #0
   195ce:	d006      	beq.n	195de <mp_builtin_round+0x36>
   195d0:	68fb      	ldr	r3, [r7, #12]
   195d2:	681b      	ldr	r3, [r3, #0]
   195d4:	4a08      	ldr	r2, [pc, #32]	; (195f8 <mp_builtin_round+0x50>)
   195d6:	4293      	cmp	r3, r2
   195d8:	d101      	bne.n	195de <mp_builtin_round+0x36>
        return o_in;
   195da:	68fb      	ldr	r3, [r7, #12]
   195dc:	e007      	b.n	195ee <mp_builtin_round+0x46>
        return mp_obj_new_float(rounded);
    }
    mp_float_t rounded = MICROPY_FLOAT_C_FUN(nearbyint)(val);
    return mp_obj_new_int_from_float(rounded);
#else
    mp_int_t r = mp_obj_get_int(o_in);
   195de:	68f8      	ldr	r0, [r7, #12]
   195e0:	f7f4 fc46 	bl	de70 <mp_obj_get_int>
   195e4:	60b8      	str	r0, [r7, #8]
    return mp_obj_new_int(r);
   195e6:	68b8      	ldr	r0, [r7, #8]
   195e8:	f7f7 fae8 	bl	10bbc <mp_obj_new_int>
   195ec:	4603      	mov	r3, r0
#endif
}
   195ee:	4618      	mov	r0, r3
   195f0:	3710      	adds	r7, #16
   195f2:	46bd      	mov	sp, r7
   195f4:	bd80      	pop	{r7, pc}
   195f6:	bf00      	nop
   195f8:	00022ea8 	.word	0x00022ea8

000195fc <mp_builtin_sum>:
MP_DEFINE_CONST_FUN_OBJ_VAR_BETWEEN(mp_builtin_round_obj, 1, 2, mp_builtin_round);

STATIC mp_obj_t mp_builtin_sum(size_t n_args, const mp_obj_t *args) {
   195fc:	b580      	push	{r7, lr}
   195fe:	b08a      	sub	sp, #40	; 0x28
   19600:	af00      	add	r7, sp, #0
   19602:	6078      	str	r0, [r7, #4]
   19604:	6039      	str	r1, [r7, #0]
    mp_obj_t value;
    switch (n_args) {
   19606:	687b      	ldr	r3, [r7, #4]
   19608:	2b01      	cmp	r3, #1
   1960a:	d102      	bne.n	19612 <mp_builtin_sum+0x16>
        case 1: value = MP_OBJ_NEW_SMALL_INT(0); break;
   1960c:	2301      	movs	r3, #1
   1960e:	627b      	str	r3, [r7, #36]	; 0x24
   19610:	e003      	b.n	1961a <mp_builtin_sum+0x1e>
        default: value = args[1]; break;
   19612:	683b      	ldr	r3, [r7, #0]
   19614:	685b      	ldr	r3, [r3, #4]
   19616:	627b      	str	r3, [r7, #36]	; 0x24
   19618:	bf00      	nop
    }
    mp_obj_iter_buf_t iter_buf;
    mp_obj_t iterable = mp_getiter(args[0], &iter_buf);
   1961a:	683b      	ldr	r3, [r7, #0]
   1961c:	681b      	ldr	r3, [r3, #0]
   1961e:	f107 020c 	add.w	r2, r7, #12
   19622:	4611      	mov	r1, r2
   19624:	4618      	mov	r0, r3
   19626:	f7f3 fa93 	bl	cb50 <mp_getiter>
   1962a:	6238      	str	r0, [r7, #32]
    mp_obj_t item;
    while ((item = mp_iternext(iterable)) != MP_OBJ_STOP_ITERATION) {
   1962c:	e005      	b.n	1963a <mp_builtin_sum+0x3e>
        value = mp_binary_op(MP_BINARY_OP_ADD, value, item);
   1962e:	69fa      	ldr	r2, [r7, #28]
   19630:	6a79      	ldr	r1, [r7, #36]	; 0x24
   19632:	201a      	movs	r0, #26
   19634:	f7f2 fa82 	bl	bb3c <mp_binary_op>
   19638:	6278      	str	r0, [r7, #36]	; 0x24
    while ((item = mp_iternext(iterable)) != MP_OBJ_STOP_ITERATION) {
   1963a:	6a38      	ldr	r0, [r7, #32]
   1963c:	f7f3 fb0a 	bl	cc54 <mp_iternext>
   19640:	61f8      	str	r0, [r7, #28]
   19642:	69fb      	ldr	r3, [r7, #28]
   19644:	2b04      	cmp	r3, #4
   19646:	d1f2      	bne.n	1962e <mp_builtin_sum+0x32>
    }
    return value;
   19648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   1964a:	4618      	mov	r0, r3
   1964c:	3728      	adds	r7, #40	; 0x28
   1964e:	46bd      	mov	sp, r7
   19650:	bd80      	pop	{r7, pc}
   19652:	bf00      	nop

00019654 <mp_builtin_sorted>:
MP_DEFINE_CONST_FUN_OBJ_VAR_BETWEEN(mp_builtin_sum_obj, 1, 2, mp_builtin_sum);

STATIC mp_obj_t mp_builtin_sorted(size_t n_args, const mp_obj_t *args, mp_map_t *kwargs) {
   19654:	b590      	push	{r4, r7, lr}
   19656:	b087      	sub	sp, #28
   19658:	af00      	add	r7, sp, #0
   1965a:	60f8      	str	r0, [r7, #12]
   1965c:	60b9      	str	r1, [r7, #8]
   1965e:	607a      	str	r2, [r7, #4]
    if (n_args > 1) {
   19660:	68fb      	ldr	r3, [r7, #12]
   19662:	2b01      	cmp	r3, #1
   19664:	d902      	bls.n	1966c <mp_builtin_sorted+0x18>
        mp_raise_TypeError("must use keyword argument for key function");
   19666:	480c      	ldr	r0, [pc, #48]	; (19698 <mp_builtin_sorted+0x44>)
   19668:	f7f3 fdc4 	bl	d1f4 <mp_raise_TypeError>
    }
    mp_obj_t self = mp_type_list.make_new(&mp_type_list, 1, 0, args);
   1966c:	4b0b      	ldr	r3, [pc, #44]	; (1969c <mp_builtin_sorted+0x48>)
   1966e:	68dc      	ldr	r4, [r3, #12]
   19670:	68bb      	ldr	r3, [r7, #8]
   19672:	2200      	movs	r2, #0
   19674:	2101      	movs	r1, #1
   19676:	4809      	ldr	r0, [pc, #36]	; (1969c <mp_builtin_sorted+0x48>)
   19678:	47a0      	blx	r4
   1967a:	4603      	mov	r3, r0
   1967c:	617b      	str	r3, [r7, #20]
    mp_obj_list_sort(1, &self, kwargs);
   1967e:	f107 0314 	add.w	r3, r7, #20
   19682:	687a      	ldr	r2, [r7, #4]
   19684:	4619      	mov	r1, r3
   19686:	2001      	movs	r0, #1
   19688:	f7f7 ffbe 	bl	11608 <mp_obj_list_sort>

    return self;
   1968c:	697b      	ldr	r3, [r7, #20]
}
   1968e:	4618      	mov	r0, r3
   19690:	371c      	adds	r7, #28
   19692:	46bd      	mov	sp, r7
   19694:	bd90      	pop	{r4, r7, pc}
   19696:	bf00      	nop
   19698:	0002474c 	.word	0x0002474c
   1969c:	00023114 	.word	0x00023114

000196a0 <mp_load_attr_default>:
MP_DEFINE_CONST_FUN_OBJ_KW(mp_builtin_sorted_obj, 1, mp_builtin_sorted);

// See mp_load_attr() if making any changes
static inline mp_obj_t mp_load_attr_default(mp_obj_t base, qstr attr, mp_obj_t defval) {
   196a0:	b580      	push	{r7, lr}
   196a2:	b086      	sub	sp, #24
   196a4:	af00      	add	r7, sp, #0
   196a6:	60f8      	str	r0, [r7, #12]
   196a8:	60b9      	str	r1, [r7, #8]
   196aa:	607a      	str	r2, [r7, #4]
    mp_obj_t dest[2];
    // use load_method, raising or not raising exception
    ((defval == MP_OBJ_NULL) ? mp_load_method : mp_load_method_maybe)(base, attr, dest);
   196ac:	687b      	ldr	r3, [r7, #4]
   196ae:	2b00      	cmp	r3, #0
   196b0:	d101      	bne.n	196b6 <mp_load_attr_default+0x16>
   196b2:	4b0e      	ldr	r3, [pc, #56]	; (196ec <mp_load_attr_default+0x4c>)
   196b4:	e000      	b.n	196b8 <mp_load_attr_default+0x18>
   196b6:	4b0e      	ldr	r3, [pc, #56]	; (196f0 <mp_load_attr_default+0x50>)
   196b8:	f107 0210 	add.w	r2, r7, #16
   196bc:	68b9      	ldr	r1, [r7, #8]
   196be:	68f8      	ldr	r0, [r7, #12]
   196c0:	4798      	blx	r3
    if (dest[0] == MP_OBJ_NULL) {
   196c2:	693b      	ldr	r3, [r7, #16]
   196c4:	2b00      	cmp	r3, #0
   196c6:	d101      	bne.n	196cc <mp_load_attr_default+0x2c>
        return defval;
   196c8:	687b      	ldr	r3, [r7, #4]
   196ca:	e00b      	b.n	196e4 <mp_load_attr_default+0x44>
    } else if (dest[1] == MP_OBJ_NULL) {
   196cc:	697b      	ldr	r3, [r7, #20]
   196ce:	2b00      	cmp	r3, #0
   196d0:	d101      	bne.n	196d6 <mp_load_attr_default+0x36>
        // load_method returned just a normal attribute
        return dest[0];
   196d2:	693b      	ldr	r3, [r7, #16]
   196d4:	e006      	b.n	196e4 <mp_load_attr_default+0x44>
    } else {
        // load_method returned a method, so build a bound method object
        return mp_obj_new_bound_meth(dest[0], dest[1]);
   196d6:	693b      	ldr	r3, [r7, #16]
   196d8:	697a      	ldr	r2, [r7, #20]
   196da:	4611      	mov	r1, r2
   196dc:	4618      	mov	r0, r3
   196de:	f7f4 ff15 	bl	e50c <mp_obj_new_bound_meth>
   196e2:	4603      	mov	r3, r0
    }
}
   196e4:	4618      	mov	r0, r3
   196e6:	3718      	adds	r7, #24
   196e8:	46bd      	mov	sp, r7
   196ea:	bd80      	pop	{r7, pc}
   196ec:	0000ca61 	.word	0x0000ca61
   196f0:	0000c99d 	.word	0x0000c99d

000196f4 <mp_builtin_getattr>:

STATIC mp_obj_t mp_builtin_getattr(size_t n_args, const mp_obj_t *args) {
   196f4:	b590      	push	{r4, r7, lr}
   196f6:	b085      	sub	sp, #20
   196f8:	af00      	add	r7, sp, #0
   196fa:	6078      	str	r0, [r7, #4]
   196fc:	6039      	str	r1, [r7, #0]
    mp_obj_t defval = MP_OBJ_NULL;
   196fe:	2300      	movs	r3, #0
   19700:	60fb      	str	r3, [r7, #12]
    if (n_args > 2) {
   19702:	687b      	ldr	r3, [r7, #4]
   19704:	2b02      	cmp	r3, #2
   19706:	d902      	bls.n	1970e <mp_builtin_getattr+0x1a>
        defval = args[2];
   19708:	683b      	ldr	r3, [r7, #0]
   1970a:	689b      	ldr	r3, [r3, #8]
   1970c:	60fb      	str	r3, [r7, #12]
    }
    return mp_load_attr_default(args[0], mp_obj_str_get_qstr(args[1]), defval);
   1970e:	683b      	ldr	r3, [r7, #0]
   19710:	681c      	ldr	r4, [r3, #0]
   19712:	683b      	ldr	r3, [r7, #0]
   19714:	3304      	adds	r3, #4
   19716:	681b      	ldr	r3, [r3, #0]
   19718:	4618      	mov	r0, r3
   1971a:	f7fc f89d 	bl	15858 <mp_obj_str_get_qstr>
   1971e:	4603      	mov	r3, r0
   19720:	68fa      	ldr	r2, [r7, #12]
   19722:	4619      	mov	r1, r3
   19724:	4620      	mov	r0, r4
   19726:	f7ff ffbb 	bl	196a0 <mp_load_attr_default>
   1972a:	4603      	mov	r3, r0
}
   1972c:	4618      	mov	r0, r3
   1972e:	3714      	adds	r7, #20
   19730:	46bd      	mov	sp, r7
   19732:	bd90      	pop	{r4, r7, pc}

00019734 <mp_builtin_setattr>:
MP_DEFINE_CONST_FUN_OBJ_VAR_BETWEEN(mp_builtin_getattr_obj, 2, 3, mp_builtin_getattr);

STATIC mp_obj_t mp_builtin_setattr(mp_obj_t base, mp_obj_t attr, mp_obj_t value) {
   19734:	b580      	push	{r7, lr}
   19736:	b084      	sub	sp, #16
   19738:	af00      	add	r7, sp, #0
   1973a:	60f8      	str	r0, [r7, #12]
   1973c:	60b9      	str	r1, [r7, #8]
   1973e:	607a      	str	r2, [r7, #4]
    mp_store_attr(base, mp_obj_str_get_qstr(attr), value);
   19740:	68b8      	ldr	r0, [r7, #8]
   19742:	f7fc f889 	bl	15858 <mp_obj_str_get_qstr>
   19746:	4603      	mov	r3, r0
   19748:	687a      	ldr	r2, [r7, #4]
   1974a:	4619      	mov	r1, r3
   1974c:	68f8      	ldr	r0, [r7, #12]
   1974e:	f7f3 f9d7 	bl	cb00 <mp_store_attr>
    return mp_const_none;
   19752:	4b02      	ldr	r3, [pc, #8]	; (1975c <mp_builtin_setattr+0x28>)
}
   19754:	4618      	mov	r0, r3
   19756:	3710      	adds	r7, #16
   19758:	46bd      	mov	sp, r7
   1975a:	bd80      	pop	{r7, pc}
   1975c:	0002345c 	.word	0x0002345c

00019760 <mp_builtin_hasattr>:
    return mp_builtin_setattr(base, attr, MP_OBJ_NULL);
}
MP_DEFINE_CONST_FUN_OBJ_2(mp_builtin_delattr_obj, mp_builtin_delattr);
#endif

STATIC mp_obj_t mp_builtin_hasattr(mp_obj_t object_in, mp_obj_t attr_in) {
   19760:	b580      	push	{r7, lr}
   19762:	b086      	sub	sp, #24
   19764:	af00      	add	r7, sp, #0
   19766:	6078      	str	r0, [r7, #4]
   19768:	6039      	str	r1, [r7, #0]
    qstr attr = mp_obj_str_get_qstr(attr_in);
   1976a:	6838      	ldr	r0, [r7, #0]
   1976c:	f7fc f874 	bl	15858 <mp_obj_str_get_qstr>
   19770:	6178      	str	r0, [r7, #20]
    mp_obj_t dest[2];
    mp_load_method_protected(object_in, attr, dest, false);
   19772:	f107 020c 	add.w	r2, r7, #12
   19776:	2300      	movs	r3, #0
   19778:	6979      	ldr	r1, [r7, #20]
   1977a:	6878      	ldr	r0, [r7, #4]
   1977c:	f7f3 f98c 	bl	ca98 <mp_load_method_protected>
    return mp_obj_new_bool(dest[0] != MP_OBJ_NULL);
   19780:	68fb      	ldr	r3, [r7, #12]
   19782:	2b00      	cmp	r3, #0
   19784:	bf14      	ite	ne
   19786:	2301      	movne	r3, #1
   19788:	2300      	moveq	r3, #0
   1978a:	b2db      	uxtb	r3, r3
   1978c:	4618      	mov	r0, r3
   1978e:	f7ff fc3b 	bl	19008 <mp_obj_new_bool>
   19792:	4603      	mov	r3, r0
}
   19794:	4618      	mov	r0, r3
   19796:	3718      	adds	r7, #24
   19798:	46bd      	mov	sp, r7
   1979a:	bd80      	pop	{r7, pc}

0001979c <mp_builtin_globals>:
MP_DEFINE_CONST_FUN_OBJ_2(mp_builtin_hasattr_obj, mp_builtin_hasattr);

STATIC mp_obj_t mp_builtin_globals(void) {
   1979c:	b580      	push	{r7, lr}
   1979e:	af00      	add	r7, sp, #0
    return MP_OBJ_FROM_PTR(mp_globals_get());
   197a0:	f7ff fc62 	bl	19068 <mp_globals_get>
   197a4:	4603      	mov	r3, r0
}
   197a6:	4618      	mov	r0, r3
   197a8:	bd80      	pop	{r7, pc}
   197aa:	bf00      	nop

000197ac <mp_builtin_locals>:
MP_DEFINE_CONST_FUN_OBJ_0(mp_builtin_globals_obj, mp_builtin_globals);

STATIC mp_obj_t mp_builtin_locals(void) {
   197ac:	b580      	push	{r7, lr}
   197ae:	af00      	add	r7, sp, #0
    return MP_OBJ_FROM_PTR(mp_locals_get());
   197b0:	f7ff fc3e 	bl	19030 <mp_locals_get>
   197b4:	4603      	mov	r3, r0
}
   197b6:	4618      	mov	r0, r3
   197b8:	bd80      	pop	{r7, pc}
   197ba:	bf00      	nop

000197bc <mp_obj_new_bool>:
   197bc:	b480      	push	{r7}
   197be:	b083      	sub	sp, #12
   197c0:	af00      	add	r7, sp, #0
   197c2:	6078      	str	r0, [r7, #4]
   197c4:	687b      	ldr	r3, [r7, #4]
   197c6:	2b00      	cmp	r3, #0
   197c8:	d001      	beq.n	197ce <mp_obj_new_bool+0x12>
   197ca:	4b04      	ldr	r3, [pc, #16]	; (197dc <mp_obj_new_bool+0x20>)
   197cc:	e000      	b.n	197d0 <mp_obj_new_bool+0x14>
   197ce:	4b04      	ldr	r3, [pc, #16]	; (197e0 <mp_obj_new_bool+0x24>)
   197d0:	4618      	mov	r0, r3
   197d2:	370c      	adds	r7, #12
   197d4:	46bd      	mov	sp, r7
   197d6:	f85d 7b04 	ldr.w	r7, [sp], #4
   197da:	4770      	bx	lr
   197dc:	00021b78 	.word	0x00021b78
   197e0:	00021b70 	.word	0x00021b70

000197e4 <py_gc_collect>:
#include "py/gc.h"

#if MICROPY_PY_GC && MICROPY_ENABLE_GC

// collect(): run a garbage collection
STATIC mp_obj_t py_gc_collect(void) {
   197e4:	b580      	push	{r7, lr}
   197e6:	af00      	add	r7, sp, #0
    gc_collect();
   197e8:	f001 ff28 	bl	1b63c <gc_collect>
#if MICROPY_PY_GC_COLLECT_RETVAL
    return MP_OBJ_NEW_SMALL_INT(MP_STATE_MEM(gc_collected));
#else
    return mp_const_none;
   197ec:	4b01      	ldr	r3, [pc, #4]	; (197f4 <py_gc_collect+0x10>)
#endif
}
   197ee:	4618      	mov	r0, r3
   197f0:	bd80      	pop	{r7, pc}
   197f2:	bf00      	nop
   197f4:	0002345c 	.word	0x0002345c

000197f8 <gc_disable>:
MP_DEFINE_CONST_FUN_OBJ_0(gc_collect_obj, py_gc_collect);

// disable(): disable the garbage collector
STATIC mp_obj_t gc_disable(void) {
   197f8:	b480      	push	{r7}
   197fa:	af00      	add	r7, sp, #0
    MP_STATE_MEM(gc_auto_collect_enabled) = 0;
   197fc:	4b04      	ldr	r3, [pc, #16]	; (19810 <gc_disable+0x18>)
   197fe:	2200      	movs	r2, #0
   19800:	f8a3 21ce 	strh.w	r2, [r3, #462]	; 0x1ce
    return mp_const_none;
   19804:	4b03      	ldr	r3, [pc, #12]	; (19814 <gc_disable+0x1c>)
}
   19806:	4618      	mov	r0, r3
   19808:	46bd      	mov	sp, r7
   1980a:	f85d 7b04 	ldr.w	r7, [sp], #4
   1980e:	4770      	bx	lr
   19810:	200012f0 	.word	0x200012f0
   19814:	0002345c 	.word	0x0002345c

00019818 <gc_enable>:
MP_DEFINE_CONST_FUN_OBJ_0(gc_disable_obj, gc_disable);

// enable(): enable the garbage collector
STATIC mp_obj_t gc_enable(void) {
   19818:	b480      	push	{r7}
   1981a:	af00      	add	r7, sp, #0
    MP_STATE_MEM(gc_auto_collect_enabled) = 1;
   1981c:	4b04      	ldr	r3, [pc, #16]	; (19830 <gc_enable+0x18>)
   1981e:	2201      	movs	r2, #1
   19820:	f8a3 21ce 	strh.w	r2, [r3, #462]	; 0x1ce
    return mp_const_none;
   19824:	4b03      	ldr	r3, [pc, #12]	; (19834 <gc_enable+0x1c>)
}
   19826:	4618      	mov	r0, r3
   19828:	46bd      	mov	sp, r7
   1982a:	f85d 7b04 	ldr.w	r7, [sp], #4
   1982e:	4770      	bx	lr
   19830:	200012f0 	.word	0x200012f0
   19834:	0002345c 	.word	0x0002345c

00019838 <gc_isenabled>:
MP_DEFINE_CONST_FUN_OBJ_0(gc_enable_obj, gc_enable);

STATIC mp_obj_t gc_isenabled(void) {
   19838:	b580      	push	{r7, lr}
   1983a:	af00      	add	r7, sp, #0
    return mp_obj_new_bool(MP_STATE_MEM(gc_auto_collect_enabled));
   1983c:	4b04      	ldr	r3, [pc, #16]	; (19850 <gc_isenabled+0x18>)
   1983e:	f8b3 31ce 	ldrh.w	r3, [r3, #462]	; 0x1ce
   19842:	4618      	mov	r0, r3
   19844:	f7ff ffba 	bl	197bc <mp_obj_new_bool>
   19848:	4603      	mov	r3, r0
}
   1984a:	4618      	mov	r0, r3
   1984c:	bd80      	pop	{r7, pc}
   1984e:	bf00      	nop
   19850:	200012f0 	.word	0x200012f0

00019854 <gc_mem_free>:
MP_DEFINE_CONST_FUN_OBJ_0(gc_isenabled_obj, gc_isenabled);

// mem_free(): return the number of bytes of available heap RAM
STATIC mp_obj_t gc_mem_free(void) {
   19854:	b580      	push	{r7, lr}
   19856:	b088      	sub	sp, #32
   19858:	af00      	add	r7, sp, #0
    gc_info_t info;
    gc_info(&info);
   1985a:	1d3b      	adds	r3, r7, #4
   1985c:	4618      	mov	r0, r3
   1985e:	f7e7 f81f 	bl	8a0 <gc_info>
    return MP_OBJ_NEW_SMALL_INT(info.free);
   19862:	68fb      	ldr	r3, [r7, #12]
   19864:	005b      	lsls	r3, r3, #1
   19866:	f043 0301 	orr.w	r3, r3, #1
}
   1986a:	4618      	mov	r0, r3
   1986c:	3720      	adds	r7, #32
   1986e:	46bd      	mov	sp, r7
   19870:	bd80      	pop	{r7, pc}
   19872:	bf00      	nop

00019874 <gc_mem_alloc>:
MP_DEFINE_CONST_FUN_OBJ_0(gc_mem_free_obj, gc_mem_free);

// mem_alloc(): return the number of bytes of heap RAM that are allocated
STATIC mp_obj_t gc_mem_alloc(void) {
   19874:	b580      	push	{r7, lr}
   19876:	b088      	sub	sp, #32
   19878:	af00      	add	r7, sp, #0
    gc_info_t info;
    gc_info(&info);
   1987a:	1d3b      	adds	r3, r7, #4
   1987c:	4618      	mov	r0, r3
   1987e:	f7e7 f80f 	bl	8a0 <gc_info>
    return MP_OBJ_NEW_SMALL_INT(info.used);
   19882:	68bb      	ldr	r3, [r7, #8]
   19884:	005b      	lsls	r3, r3, #1
   19886:	f043 0301 	orr.w	r3, r3, #1
}
   1988a:	4618      	mov	r0, r3
   1988c:	3720      	adds	r7, #32
   1988e:	46bd      	mov	sp, r7
   19890:	bd80      	pop	{r7, pc}
   19892:	bf00      	nop

00019894 <gc_threshold>:
MP_DEFINE_CONST_FUN_OBJ_0(gc_mem_alloc_obj, gc_mem_alloc);

#if MICROPY_GC_ALLOC_THRESHOLD
STATIC mp_obj_t gc_threshold(size_t n_args, const mp_obj_t *args) {
   19894:	b580      	push	{r7, lr}
   19896:	b084      	sub	sp, #16
   19898:	af00      	add	r7, sp, #0
   1989a:	6078      	str	r0, [r7, #4]
   1989c:	6039      	str	r1, [r7, #0]
    if (n_args == 0) {
   1989e:	687b      	ldr	r3, [r7, #4]
   198a0:	2b00      	cmp	r3, #0
   198a2:	d111      	bne.n	198c8 <gc_threshold+0x34>
        if (MP_STATE_MEM(gc_alloc_threshold) == (size_t)-1) {
   198a4:	4b15      	ldr	r3, [pc, #84]	; (198fc <gc_threshold+0x68>)
   198a6:	f8d3 31d4 	ldr.w	r3, [r3, #468]	; 0x1d4
   198aa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   198ae:	d102      	bne.n	198b6 <gc_threshold+0x22>
            return MP_OBJ_NEW_SMALL_INT(-1);
   198b0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   198b4:	e01d      	b.n	198f2 <gc_threshold+0x5e>
        }
        return mp_obj_new_int(MP_STATE_MEM(gc_alloc_threshold) * MICROPY_BYTES_PER_GC_BLOCK);
   198b6:	4b11      	ldr	r3, [pc, #68]	; (198fc <gc_threshold+0x68>)
   198b8:	f8d3 31d4 	ldr.w	r3, [r3, #468]	; 0x1d4
   198bc:	011b      	lsls	r3, r3, #4
   198be:	4618      	mov	r0, r3
   198c0:	f7f7 f97c 	bl	10bbc <mp_obj_new_int>
   198c4:	4603      	mov	r3, r0
   198c6:	e014      	b.n	198f2 <gc_threshold+0x5e>
    }
    mp_int_t val = mp_obj_get_int(args[0]);
   198c8:	683b      	ldr	r3, [r7, #0]
   198ca:	681b      	ldr	r3, [r3, #0]
   198cc:	4618      	mov	r0, r3
   198ce:	f7f4 facf 	bl	de70 <mp_obj_get_int>
   198d2:	60f8      	str	r0, [r7, #12]
    if (val < 0) {
   198d4:	68fb      	ldr	r3, [r7, #12]
   198d6:	2b00      	cmp	r3, #0
   198d8:	da05      	bge.n	198e6 <gc_threshold+0x52>
        MP_STATE_MEM(gc_alloc_threshold) = (size_t)-1;
   198da:	4b08      	ldr	r3, [pc, #32]	; (198fc <gc_threshold+0x68>)
   198dc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   198e0:	f8c3 21d4 	str.w	r2, [r3, #468]	; 0x1d4
   198e4:	e004      	b.n	198f0 <gc_threshold+0x5c>
    } else {
        MP_STATE_MEM(gc_alloc_threshold) = val / MICROPY_BYTES_PER_GC_BLOCK;
   198e6:	68fb      	ldr	r3, [r7, #12]
   198e8:	091b      	lsrs	r3, r3, #4
   198ea:	4a04      	ldr	r2, [pc, #16]	; (198fc <gc_threshold+0x68>)
   198ec:	f8c2 31d4 	str.w	r3, [r2, #468]	; 0x1d4
    }
    return mp_const_none;
   198f0:	4b03      	ldr	r3, [pc, #12]	; (19900 <gc_threshold+0x6c>)
}
   198f2:	4618      	mov	r0, r3
   198f4:	3710      	adds	r7, #16
   198f6:	46bd      	mov	sp, r7
   198f8:	bd80      	pop	{r7, pc}
   198fa:	bf00      	nop
   198fc:	200012f0 	.word	0x200012f0
   19900:	0002345c 	.word	0x0002345c

00019904 <mp_micropython_opt_level>:

// Various builtins specific to MicroPython runtime,
// living in micropython module

#if MICROPY_ENABLE_COMPILER
STATIC mp_obj_t mp_micropython_opt_level(size_t n_args, const mp_obj_t *args) {
   19904:	b580      	push	{r7, lr}
   19906:	b082      	sub	sp, #8
   19908:	af00      	add	r7, sp, #0
   1990a:	6078      	str	r0, [r7, #4]
   1990c:	6039      	str	r1, [r7, #0]
    if (n_args == 0) {
   1990e:	687b      	ldr	r3, [r7, #4]
   19910:	2b00      	cmp	r3, #0
   19912:	d106      	bne.n	19922 <mp_micropython_opt_level+0x1e>
        return MP_OBJ_NEW_SMALL_INT(MP_STATE_VM(mp_optimise_value));
   19914:	4b0a      	ldr	r3, [pc, #40]	; (19940 <mp_micropython_opt_level+0x3c>)
   19916:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
   1991a:	005b      	lsls	r3, r3, #1
   1991c:	f043 0301 	orr.w	r3, r3, #1
   19920:	e00a      	b.n	19938 <mp_micropython_opt_level+0x34>
    } else {
        MP_STATE_VM(mp_optimise_value) = mp_obj_get_int(args[0]);
   19922:	683b      	ldr	r3, [r7, #0]
   19924:	681b      	ldr	r3, [r3, #0]
   19926:	4618      	mov	r0, r3
   19928:	f7f4 faa2 	bl	de70 <mp_obj_get_int>
   1992c:	4603      	mov	r3, r0
   1992e:	461a      	mov	r2, r3
   19930:	4b03      	ldr	r3, [pc, #12]	; (19940 <mp_micropython_opt_level+0x3c>)
   19932:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
        return mp_const_none;
   19936:	4b03      	ldr	r3, [pc, #12]	; (19944 <mp_micropython_opt_level+0x40>)
    }
}
   19938:	4618      	mov	r0, r3
   1993a:	3708      	adds	r7, #8
   1993c:	46bd      	mov	sp, r7
   1993e:	bd80      	pop	{r7, pc}
   19940:	200012f0 	.word	0x200012f0
   19944:	0002345c 	.word	0x0002345c

00019948 <mp_micropython_heap_lock>:
}
STATIC MP_DEFINE_CONST_FUN_OBJ_0(mp_micropython_pystack_use_obj, mp_micropython_pystack_use);
#endif

#if MICROPY_ENABLE_GC
STATIC mp_obj_t mp_micropython_heap_lock(void) {
   19948:	b580      	push	{r7, lr}
   1994a:	af00      	add	r7, sp, #0
    gc_lock();
   1994c:	f7e6 fe6c 	bl	628 <gc_lock>
    return mp_const_none;
   19950:	4b01      	ldr	r3, [pc, #4]	; (19958 <mp_micropython_heap_lock+0x10>)
}
   19952:	4618      	mov	r0, r3
   19954:	bd80      	pop	{r7, pc}
   19956:	bf00      	nop
   19958:	0002345c 	.word	0x0002345c

0001995c <mp_micropython_heap_unlock>:
STATIC MP_DEFINE_CONST_FUN_OBJ_0(mp_micropython_heap_lock_obj, mp_micropython_heap_lock);

STATIC mp_obj_t mp_micropython_heap_unlock(void) {
   1995c:	b580      	push	{r7, lr}
   1995e:	af00      	add	r7, sp, #0
    gc_unlock();
   19960:	f7e6 fe6c 	bl	63c <gc_unlock>
    return mp_const_none;
   19964:	4b01      	ldr	r3, [pc, #4]	; (1996c <mp_micropython_heap_unlock+0x10>)
}
   19966:	4618      	mov	r0, r3
   19968:	bd80      	pop	{r7, pc}
   1996a:	bf00      	nop
   1996c:	0002345c 	.word	0x0002345c

00019970 <mp_execute_bytecode>:
// sp points to bottom of stack which grows up
// returns:
//  MP_VM_RETURN_NORMAL, sp valid, return value in *sp
//  MP_VM_RETURN_YIELD, ip, sp valid, yielded value in *sp
//  MP_VM_RETURN_EXCEPTION, exception in fastn[0]
mp_vm_return_kind_t mp_execute_bytecode(mp_code_state_t *code_state, volatile mp_obj_t inject_exc) {
   19970:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
#endif
    // Pointers which are constant for particular invocation of mp_execute_bytecode()
    mp_obj_t * /*const*/ fastn;
    mp_exc_stack_t * /*const*/ exc_stack;
    {
        size_t n_state = mp_decode_uint_value(code_state->fun_bc->bytecode);
   19974:	6803      	ldr	r3, [r0, #0]
                    }
                    mp_handle_pending_tail(atomic_state);
                }
                #else
                // This is an inlined variant of mp_handle_pending
                if (MP_STATE_VM(mp_pending_exception) != MP_OBJ_NULL) {
   19976:	f8df 9300 	ldr.w	r9, [pc, #768]	; 19c78 <mp_execute_bytecode+0x308>
mp_vm_return_kind_t mp_execute_bytecode(mp_code_state_t *code_state, volatile mp_obj_t inject_exc) {
   1997a:	b095      	sub	sp, #84	; 0x54
   1997c:	4680      	mov	r8, r0
        size_t n_state = mp_decode_uint_value(code_state->fun_bc->bytecode);
   1997e:	6898      	ldr	r0, [r3, #8]
mp_vm_return_kind_t mp_execute_bytecode(mp_code_state_t *code_state, volatile mp_obj_t inject_exc) {
   19980:	9103      	str	r1, [sp, #12]
        size_t n_state = mp_decode_uint_value(code_state->fun_bc->bytecode);
   19982:	f000 ff65 	bl	1a850 <mp_decode_uint_value>
    volatile bool currently_in_except_block = MP_TAGPTR_TAG0(code_state->exc_sp); // 0 or 1, to detect nested exceptions
   19986:	f8d8 300c 	ldr.w	r3, [r8, #12]
        fastn = &code_state->state[n_state - 1];
   1998a:	eb08 0280 	add.w	r2, r8, r0, lsl #2
    volatile bool currently_in_except_block = MP_TAGPTR_TAG0(code_state->exc_sp); // 0 or 1, to detect nested exceptions
   1998e:	f003 0101 	and.w	r1, r3, #1
    mp_exc_stack_t *volatile exc_sp = MP_TAGPTR_PTR(code_state->exc_sp); // stack grows up, exc_sp points to top of stack
   19992:	f023 0303 	bic.w	r3, r3, #3
        exc_stack = (mp_exc_stack_t*)(code_state->state + n_state);
   19996:	f108 0714 	add.w	r7, r8, #20
    volatile bool currently_in_except_block = MP_TAGPTR_TAG0(code_state->exc_sp); // 0 or 1, to detect nested exceptions
   1999a:	f88d 1017 	strb.w	r1, [sp, #23]
        fastn = &code_state->state[n_state - 1];
   1999e:	3210      	adds	r2, #16
    mp_exc_stack_t *volatile exc_sp = MP_TAGPTR_PTR(code_state->exc_sp); // stack grows up, exc_sp points to top of stack
   199a0:	9306      	str	r3, [sp, #24]
        fastn = &code_state->state[n_state - 1];
   199a2:	1e43      	subs	r3, r0, #1
   199a4:	9201      	str	r2, [sp, #4]
        exc_stack = (mp_exc_stack_t*)(code_state->state + n_state);
   199a6:	eb07 0780 	add.w	r7, r7, r0, lsl #2
        fastn = &code_state->state[n_state - 1];
   199aa:	9302      	str	r3, [sp, #8]
        if (nlr_push(&nlr) == 0) {
   199ac:	a808      	add	r0, sp, #32
   199ae:	f7e6 fc85 	bl	2bc <nlr_push>
   199b2:	2800      	cmp	r0, #0
   199b4:	f040 809d 	bne.w	19af2 <mp_execute_bytecode+0x182>
            if (inject_exc != MP_OBJ_NULL && *ip != MP_BC_YIELD_FROM) {
   199b8:	9b03      	ldr	r3, [sp, #12]
            const byte *ip = code_state->ip;
   199ba:	f8d8 4004 	ldr.w	r4, [r8, #4]
            mp_obj_t *sp = code_state->sp;
   199be:	f8d8 5008 	ldr.w	r5, [r8, #8]
            if (inject_exc != MP_OBJ_NULL && *ip != MP_BC_YIELD_FROM) {
   199c2:	2b00      	cmp	r3, #0
   199c4:	f000 80a0 	beq.w	19b08 <mp_execute_bytecode+0x198>
   199c8:	7823      	ldrb	r3, [r4, #0]
   199ca:	2b5e      	cmp	r3, #94	; 0x5e
   199cc:	f000 809c 	beq.w	19b08 <mp_execute_bytecode+0x198>
                mp_obj_t exc = inject_exc;
   199d0:	9b03      	ldr	r3, [sp, #12]
                inject_exc = MP_OBJ_NULL;
   199d2:	9003      	str	r0, [sp, #12]
                exc = mp_make_raise_obj(exc);
   199d4:	4618      	mov	r0, r3
                    obj = mp_make_raise_obj(obj);
   199d6:	f7f3 fa6b 	bl	ceb0 <mp_make_raise_obj>
   199da:	4604      	mov	r4, r0
                    RAISE(obj);
   199dc:	f7e6 fc5c 	bl	298 <nlr_pop>
   199e0:	9409      	str	r4, [sp, #36]	; 0x24
   199e2:	4620      	mov	r0, r4
            #if SELECTIVE_EXC_IP
            // with selective ip, we store the ip 1 byte past the opcode, so move ptr back
            code_state->ip -= 1;
            #endif

            if (mp_obj_is_subclass_fast(MP_OBJ_FROM_PTR(((mp_obj_base_t*)nlr.ret_val)->type), MP_OBJ_FROM_PTR(&mp_type_StopIteration))) {
   199e4:	6800      	ldr	r0, [r0, #0]
   199e6:	49a1      	ldr	r1, [pc, #644]	; (19c6c <mp_execute_bytecode+0x2fc>)
   199e8:	f7fd fdbc 	bl	17564 <mp_obj_is_subclass_fast>
   199ec:	b148      	cbz	r0, 19a02 <mp_execute_bytecode+0x92>
                if (code_state->ip) {
   199ee:	f8d8 3004 	ldr.w	r3, [r8, #4]
   199f2:	b133      	cbz	r3, 19a02 <mp_execute_bytecode+0x92>
                    // check if it's a StopIteration within a for block
                    if (*code_state->ip == MP_BC_FOR_ITER) {
   199f4:	781a      	ldrb	r2, [r3, #0]
   199f6:	2a43      	cmp	r2, #67	; 0x43
   199f8:	f000 85b8 	beq.w	1a56c <mp_execute_bytecode+0xbfc>
                        const byte *ip = code_state->ip + 1;
                        DECODE_ULABEL; // the jump offset if iteration finishes; for labels are always forward
                        code_state->ip = ip + ulab; // jump to after for-block
                        code_state->sp -= MP_OBJ_ITER_BUF_NSLOTS; // pop the exhausted iterator
                        goto outer_dispatch_loop; // continue with dispatch loop
                    } else if (*code_state->ip == MP_BC_YIELD_FROM) {
   199fc:	2a5e      	cmp	r2, #94	; 0x5e
   199fe:	f000 861d 	beq.w	1a63c <mp_execute_bytecode+0xccc>
unwind_loop:
#endif
            // set file and line number that the exception occurred at
            // TODO: don't set traceback for exceptions re-raised by END_FINALLY.
            // But consider how to handle nested exceptions.
            if (nlr.ret_val != &mp_const_GeneratorExit_obj) {
   19a02:	4b9b      	ldr	r3, [pc, #620]	; (19c70 <mp_execute_bytecode+0x300>)
   19a04:	9a09      	ldr	r2, [sp, #36]	; 0x24
   19a06:	429a      	cmp	r2, r3
   19a08:	d053      	beq.n	19ab2 <mp_execute_bytecode+0x142>
                const byte *ip = code_state->fun_bc->bytecode;
   19a0a:	f8d8 3000 	ldr.w	r3, [r8]
                ip = mp_decode_uint_skip(ip); // skip n_state
   19a0e:	6898      	ldr	r0, [r3, #8]
   19a10:	f000 ff2c 	bl	1a86c <mp_decode_uint_skip>
                ip = mp_decode_uint_skip(ip); // skip n_exc_stack
   19a14:	f000 ff2a 	bl	1a86c <mp_decode_uint_skip>
                ip++; // skip scope_params
                ip++; // skip n_pos_args
                ip++; // skip n_kwonly_args
                ip++; // skip n_def_pos_args
                size_t bc = code_state->ip - ip;
   19a18:	f8d8 3004 	ldr.w	r3, [r8, #4]
                ip++; // skip n_def_pos_args
   19a1c:	1d05      	adds	r5, r0, #4
                size_t code_info_size = mp_decode_uint_value(ip);
   19a1e:	4628      	mov	r0, r5
                size_t bc = code_state->ip - ip;
   19a20:	1b5c      	subs	r4, r3, r5
                size_t code_info_size = mp_decode_uint_value(ip);
   19a22:	f000 ff15 	bl	1a850 <mp_decode_uint_value>
   19a26:	4606      	mov	r6, r0
                ip = mp_decode_uint_skip(ip); // skip code_info_size
   19a28:	4628      	mov	r0, r5
   19a2a:	f000 ff1f 	bl	1a86c <mp_decode_uint_skip>
   19a2e:	4605      	mov	r5, r0
                #if MICROPY_PERSISTENT_CODE
                qstr block_name = ip[0] | (ip[1] << 8);
                qstr source_file = ip[2] | (ip[3] << 8);
                ip += 4;
                #else
                qstr block_name = mp_decode_uint_value(ip);
   19a30:	f000 ff0e 	bl	1a850 <mp_decode_uint_value>
   19a34:	4683      	mov	fp, r0
                ip = mp_decode_uint_skip(ip);
   19a36:	4628      	mov	r0, r5
   19a38:	f000 ff18 	bl	1a86c <mp_decode_uint_skip>
   19a3c:	4605      	mov	r5, r0
                qstr source_file = mp_decode_uint_value(ip);
   19a3e:	f000 ff07 	bl	1a850 <mp_decode_uint_value>
   19a42:	4682      	mov	sl, r0
                ip = mp_decode_uint_skip(ip);
   19a44:	4628      	mov	r0, r5
   19a46:	f000 ff11 	bl	1a86c <mp_decode_uint_skip>
                bc -= code_info_size;
   19a4a:	1ba3      	subs	r3, r4, r6
                #endif
                size_t source_line = 1;
                size_t c;
                while ((c = *ip)) {
   19a4c:	7804      	ldrb	r4, [r0, #0]
   19a4e:	2201      	movs	r2, #1
   19a50:	b964      	cbnz	r4, 19a6c <mp_execute_bytecode+0xfc>
   19a52:	e019      	b.n	19a88 <mp_execute_bytecode+0x118>
                    size_t b, l;
                    if ((c & 0x80) == 0) {
                        // 0b0LLBBBBB encoding
                        b = c & 0x1f;
   19a54:	f004 061f 	and.w	r6, r4, #31
                        // 0b1LLLBBBB 0bLLLLLLLL encoding (l's LSB in second byte)
                        b = c & 0xf;
                        l = ((c << 4) & 0x700) | ip[1];
                        ip += 2;
                    }
                    if (bc >= b) {
   19a58:	429e      	cmp	r6, r3
                        ip += 1;
   19a5a:	f100 0001 	add.w	r0, r0, #1
                        l = c >> 5;
   19a5e:	ea4f 1154 	mov.w	r1, r4, lsr #5
                    if (bc >= b) {
   19a62:	d811      	bhi.n	19a88 <mp_execute_bytecode+0x118>
                while ((c = *ip)) {
   19a64:	7804      	ldrb	r4, [r0, #0]
                        bc -= b;
   19a66:	1b9b      	subs	r3, r3, r6
                        source_line += l;
   19a68:	440a      	add	r2, r1
                while ((c = *ip)) {
   19a6a:	b16c      	cbz	r4, 19a88 <mp_execute_bytecode+0x118>
                    if ((c & 0x80) == 0) {
   19a6c:	0621      	lsls	r1, r4, #24
   19a6e:	d5f1      	bpl.n	19a54 <mp_execute_bytecode+0xe4>
                        l = ((c << 4) & 0x700) | ip[1];
   19a70:	7845      	ldrb	r5, [r0, #1]
   19a72:	0121      	lsls	r1, r4, #4
                        b = c & 0xf;
   19a74:	f004 060f 	and.w	r6, r4, #15
                        l = ((c << 4) & 0x700) | ip[1];
   19a78:	f401 61e0 	and.w	r1, r1, #1792	; 0x700
                    if (bc >= b) {
   19a7c:	429e      	cmp	r6, r3
                        l = ((c << 4) & 0x700) | ip[1];
   19a7e:	ea41 0105 	orr.w	r1, r1, r5
                        ip += 2;
   19a82:	f100 0002 	add.w	r0, r0, #2
                    if (bc >= b) {
   19a86:	d9ed      	bls.n	19a64 <mp_execute_bytecode+0xf4>
                    } else {
                        // found source line corresponding to bytecode offset
                        break;
                    }
                }
                mp_obj_exception_add_traceback(MP_OBJ_FROM_PTR(nlr.ret_val), source_file, source_line, block_name);
   19a88:	465b      	mov	r3, fp
   19a8a:	4651      	mov	r1, sl
   19a8c:	9809      	ldr	r0, [sp, #36]	; 0x24
   19a8e:	f7f6 f819 	bl	fac4 <mp_obj_exception_add_traceback>
            }

            while (currently_in_except_block) {
   19a92:	f89d 3017 	ldrb.w	r3, [sp, #23]
   19a96:	b183      	cbz	r3, 19aba <mp_execute_bytecode+0x14a>
                // nested exception

                assert(exc_sp >= exc_stack);
   19a98:	9b06      	ldr	r3, [sp, #24]
   19a9a:	429f      	cmp	r7, r3
   19a9c:	f200 8619 	bhi.w	1a6d2 <mp_execute_bytecode+0xd62>

                // TODO make a proper message for nested exception
                // at the moment we are just raising the very last exception (the one that caused the nested exception)

                // move up to previous exception handler
                POP_EXC_BLOCK();
   19aa0:	9b06      	ldr	r3, [sp, #24]
   19aa2:	685b      	ldr	r3, [r3, #4]
   19aa4:	f003 0301 	and.w	r3, r3, #1
   19aa8:	f88d 3017 	strb.w	r3, [sp, #23]
   19aac:	9b06      	ldr	r3, [sp, #24]
   19aae:	3b0c      	subs	r3, #12
   19ab0:	9306      	str	r3, [sp, #24]
            while (currently_in_except_block) {
   19ab2:	f89d 3017 	ldrb.w	r3, [sp, #23]
   19ab6:	2b00      	cmp	r3, #0
   19ab8:	d1ee      	bne.n	19a98 <mp_execute_bytecode+0x128>
            }

            if (exc_sp >= exc_stack) {
   19aba:	9b06      	ldr	r3, [sp, #24]
   19abc:	429f      	cmp	r7, r3
   19abe:	f200 85ea 	bhi.w	1a696 <mp_execute_bytecode+0xd26>
                // set flag to indicate that we are now handling an exception
                currently_in_except_block = 1;
   19ac2:	2301      	movs	r3, #1
   19ac4:	f88d 3017 	strb.w	r3, [sp, #23]

                // catch exception and pass to byte code
                code_state->ip = exc_sp->handler;
   19ac8:	9a06      	ldr	r2, [sp, #24]
                mp_obj_t *sp = MP_TAGPTR_PTR(exc_sp->val_sp);
   19aca:	9b06      	ldr	r3, [sp, #24]
                // save this exception in the stack so it can be used in a reraise, if needed
                exc_sp->prev_exc = nlr.ret_val;
   19acc:	9906      	ldr	r1, [sp, #24]
                mp_obj_t *sp = MP_TAGPTR_PTR(exc_sp->val_sp);
   19ace:	685b      	ldr	r3, [r3, #4]
                code_state->ip = exc_sp->handler;
   19ad0:	6810      	ldr	r0, [r2, #0]
                exc_sp->prev_exc = nlr.ret_val;
   19ad2:	9a09      	ldr	r2, [sp, #36]	; 0x24
                code_state->ip = exc_sp->handler;
   19ad4:	f8c8 0004 	str.w	r0, [r8, #4]
                // push exception object so it can be handled by bytecode
                PUSH(MP_OBJ_FROM_PTR(nlr.ret_val));
   19ad8:	f023 0303 	bic.w	r3, r3, #3
                exc_sp->prev_exc = nlr.ret_val;
   19adc:	608a      	str	r2, [r1, #8]
                PUSH(MP_OBJ_FROM_PTR(nlr.ret_val));
   19ade:	f843 2f04 	str.w	r2, [r3, #4]!
        if (nlr_push(&nlr) == 0) {
   19ae2:	a808      	add	r0, sp, #32
                code_state->sp = sp;
   19ae4:	f8c8 3008 	str.w	r3, [r8, #8]
        if (nlr_push(&nlr) == 0) {
   19ae8:	f7e6 fbe8 	bl	2bc <nlr_push>
   19aec:	2800      	cmp	r0, #0
   19aee:	f43f af63 	beq.w	199b8 <mp_execute_bytecode+0x48>
   19af2:	9809      	ldr	r0, [sp, #36]	; 0x24
   19af4:	e776      	b.n	199e4 <mp_execute_bytecode+0x74>
                            ip = exc_sp->handler; // get exception handler byte code address
   19af6:	9906      	ldr	r1, [sp, #24]
                            exc_sp--; // pop exception handler
   19af8:	9b06      	ldr	r3, [sp, #24]
                            PUSH(MP_OBJ_NEW_SMALL_INT(unum));
   19afa:	0052      	lsls	r2, r2, #1
   19afc:	f042 0201 	orr.w	r2, r2, #1
   19b00:	602a      	str	r2, [r5, #0]
                            exc_sp--; // pop exception handler
   19b02:	3b0c      	subs	r3, #12
                            ip = exc_sp->handler; // get exception handler byte code address
   19b04:	680c      	ldr	r4, [r1, #0]
                            exc_sp--; // pop exception handler
   19b06:	9306      	str	r3, [sp, #24]
                MARK_EXC_IP_GLOBAL();
   19b08:	f8c8 4004 	str.w	r4, [r8, #4]
                switch (*ip++) {
   19b0c:	7820      	ldrb	r0, [r4, #0]
   19b0e:	f1a0 0310 	sub.w	r3, r0, #16
   19b12:	1c66      	adds	r6, r4, #1
   19b14:	2b5a      	cmp	r3, #90	; 0x5a
   19b16:	f200 851d 	bhi.w	1a554 <mp_execute_bytecode+0xbe4>
   19b1a:	e8df f013 	tbh	[pc, r3, lsl #1]
   19b1e:	0515      	.short	0x0515
   19b20:	0509050f 	.word	0x0509050f
   19b24:	04f6051b 	.word	0x04f6051b
   19b28:	04e5051b 	.word	0x04e5051b
   19b2c:	04d604dc 	.word	0x04d604dc
   19b30:	04ae04c6 	.word	0x04ae04c6
   19b34:	048c049d 	.word	0x048c049d
   19b38:	046b047c 	.word	0x046b047c
   19b3c:	0453045a 	.word	0x0453045a
   19b40:	04350447 	.word	0x04350447
   19b44:	040a0421 	.word	0x040a0421
   19b48:	03ea03fb 	.word	0x03ea03fb
   19b4c:	03ca03e0 	.word	0x03ca03e0
   19b50:	00af00bc 	.word	0x00af00bc
   19b54:	051b009a 	.word	0x051b009a
   19b58:	051b051b 	.word	0x051b051b
   19b5c:	0095051b 	.word	0x0095051b
   19b60:	006000d7 	.word	0x006000d7
   19b64:	0083008d 	.word	0x0083008d
   19b68:	03560364 	.word	0x03560364
   19b6c:	033c0348 	.word	0x033c0348
   19b70:	051b0333 	.word	0x051b0333
   19b74:	051b051b 	.word	0x051b051b
   19b78:	02cf0303 	.word	0x02cf0303
   19b7c:	02b402b4 	.word	0x02b402b4
   19b80:	02ad005b 	.word	0x02ad005b
   19b84:	028f0299 	.word	0x028f0299
   19b88:	024b0273 	.word	0x024b0273
   19b8c:	051b023c 	.word	0x051b023c
   19b90:	051b051b 	.word	0x051b051b
   19b94:	051b051b 	.word	0x051b051b
   19b98:	051b051b 	.word	0x051b051b
   19b9c:	0229051b 	.word	0x0229051b
   19ba0:	051b0216 	.word	0x051b0216
   19ba4:	01fa0206 	.word	0x01fa0206
   19ba8:	051b051b 	.word	0x051b051b
   19bac:	051b01e3 	.word	0x051b01e3
   19bb0:	01b801ce 	.word	0x01b801ce
   19bb4:	017b0196 	.word	0x017b0196
   19bb8:	00df0073 	.word	0x00df0073
   19bbc:	011e051b 	.word	0x011e051b
   19bc0:	016c010f 	.word	0x016c010f
   19bc4:	0143015c 	.word	0x0143015c
   19bc8:	03b1012b 	.word	0x03b1012b
   19bcc:	03850399 	.word	0x03850399
   19bd0:	036b0373 	.word	0x036b0373
                    if (TOP() == mp_const_none) {
   19bd4:	6828      	ldr	r0, [r5, #0]
   19bd6:	4b27      	ldr	r3, [pc, #156]	; (19c74 <mp_execute_bytecode+0x304>)
   19bd8:	4298      	cmp	r0, r3
   19bda:	f040 84d4 	bne.w	1a586 <mp_execute_bytecode+0xc16>
                        sp--;
   19bde:	3d04      	subs	r5, #4
                switch (*ip++) {
   19be0:	4634      	mov	r4, r6
                if (MP_STATE_VM(mp_pending_exception) != MP_OBJ_NULL) {
   19be2:	f8d9 3034 	ldr.w	r3, [r9, #52]	; 0x34
   19be6:	2b00      	cmp	r3, #0
   19be8:	d08e      	beq.n	19b08 <mp_execute_bytecode+0x198>
                    mp_obj_t obj = MP_STATE_VM(mp_pending_exception);
   19bea:	4b23      	ldr	r3, [pc, #140]	; (19c78 <mp_execute_bytecode+0x308>)
                    MP_STATE_VM(mp_pending_exception) = MP_OBJ_NULL;
   19bec:	4a22      	ldr	r2, [pc, #136]	; (19c78 <mp_execute_bytecode+0x308>)
                    mp_obj_t obj = MP_STATE_VM(mp_pending_exception);
   19bee:	6b5c      	ldr	r4, [r3, #52]	; 0x34
                    MP_STATE_VM(mp_pending_exception) = MP_OBJ_NULL;
   19bf0:	2300      	movs	r3, #0
   19bf2:	6353      	str	r3, [r2, #52]	; 0x34
                    RAISE(obj);
   19bf4:	f7e6 fb50 	bl	298 <nlr_pop>
   19bf8:	9409      	str	r4, [sp, #36]	; 0x24
   19bfa:	4620      	mov	r0, r4
   19bfc:	e6f2      	b.n	199e4 <mp_execute_bytecode+0x74>
                        PUSH(ret_value);
   19bfe:	9b07      	ldr	r3, [sp, #28]
   19c00:	602b      	str	r3, [r5, #0]
                        goto yield;
   19c02:	4626      	mov	r6, r4
                    nlr_pop();
   19c04:	f7e6 fb48 	bl	298 <nlr_pop>
                    code_state->exc_sp = MP_TAGPTR_MAKE(exc_sp, currently_in_except_block);
   19c08:	f89d 3017 	ldrb.w	r3, [sp, #23]
   19c0c:	9a06      	ldr	r2, [sp, #24]
                    code_state->ip = ip;
   19c0e:	f8c8 6004 	str.w	r6, [r8, #4]
                    code_state->exc_sp = MP_TAGPTR_MAKE(exc_sp, currently_in_except_block);
   19c12:	4313      	orrs	r3, r2
                    code_state->sp = sp;
   19c14:	f8c8 5008 	str.w	r5, [r8, #8]
                    code_state->exc_sp = MP_TAGPTR_MAKE(exc_sp, currently_in_except_block);
   19c18:	f8c8 300c 	str.w	r3, [r8, #12]
                    return MP_VM_RETURN_YIELD;
   19c1c:	2001      	movs	r0, #1
                fastn[0] = MP_OBJ_FROM_PTR(nlr.ret_val); // must put exception here because sp is invalid
                return MP_VM_RETURN_EXCEPTION;
            }
        }
    }
}
   19c1e:	b015      	add	sp, #84	; 0x54
   19c20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                    sp[0] = sp[-1];
   19c24:	e915 000c 	ldmdb	r5, {r2, r3}
                    mp_obj_t top = sp[0];
   19c28:	6829      	ldr	r1, [r5, #0]
                    sp[-2] = top;
   19c2a:	f845 1c08 	str.w	r1, [r5, #-8]
                switch (*ip++) {
   19c2e:	4634      	mov	r4, r6
                    sp[-1] = sp[-2];
   19c30:	f845 2c04 	str.w	r2, [r5, #-4]
                    sp[0] = sp[-1];
   19c34:	602b      	str	r3, [r5, #0]
                    DISPATCH();
   19c36:	e7d4      	b.n	19be2 <mp_execute_bytecode+0x272>
                    mp_obj_t top = sp[0];
   19c38:	682b      	ldr	r3, [r5, #0]
                    sp[0] = sp[-1];
   19c3a:	f855 2c04 	ldr.w	r2, [r5, #-4]
   19c3e:	602a      	str	r2, [r5, #0]
                switch (*ip++) {
   19c40:	4634      	mov	r4, r6
                    sp[-1] = top;
   19c42:	f845 3c04 	str.w	r3, [r5, #-4]
                    DISPATCH();
   19c46:	e7cc      	b.n	19be2 <mp_execute_bytecode+0x272>
                    PUSH(top);
   19c48:	682b      	ldr	r3, [r5, #0]
   19c4a:	606b      	str	r3, [r5, #4]
                switch (*ip++) {
   19c4c:	4634      	mov	r4, r6
                    PUSH(top);
   19c4e:	3504      	adds	r5, #4
                    DISPATCH();
   19c50:	e7c7      	b.n	19be2 <mp_execute_bytecode+0x272>
                switch (*ip++) {
   19c52:	4634      	mov	r4, r6
   19c54:	2000      	movs	r0, #0
                    DECODE_QSTR;
   19c56:	f814 3b01 	ldrb.w	r3, [r4], #1
   19c5a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
   19c5e:	061e      	lsls	r6, r3, #24
   19c60:	eb02 10c0 	add.w	r0, r2, r0, lsl #7
   19c64:	d4f7      	bmi.n	19c56 <mp_execute_bytecode+0x2e6>
                    mp_delete_global(qst);
   19c66:	f7f1 fe6f 	bl	b948 <mp_delete_global>
                    DISPATCH();
   19c6a:	e7ba      	b.n	19be2 <mp_execute_bytecode+0x272>
   19c6c:	00022260 	.word	0x00022260
   19c70:	0002211c 	.word	0x0002211c
   19c74:	0002345c 	.word	0x0002345c
   19c78:	200012f0 	.word	0x200012f0
                switch (*ip++) {
   19c7c:	4634      	mov	r4, r6
   19c7e:	2000      	movs	r0, #0
                    DECODE_QSTR;
   19c80:	f814 3b01 	ldrb.w	r3, [r4], #1
   19c84:	f003 027f 	and.w	r2, r3, #127	; 0x7f
   19c88:	061b      	lsls	r3, r3, #24
   19c8a:	eb02 10c0 	add.w	r0, r2, r0, lsl #7
   19c8e:	d4f7      	bmi.n	19c80 <mp_execute_bytecode+0x310>
                    mp_delete_name(qst);
   19c90:	f7f1 fe32 	bl	b8f8 <mp_delete_name>
                    DISPATCH();
   19c94:	e7a5      	b.n	19be2 <mp_execute_bytecode+0x272>
                switch (*ip++) {
   19c96:	2200      	movs	r2, #0
                    DECODE_UINT;
   19c98:	f816 3b01 	ldrb.w	r3, [r6], #1
   19c9c:	f003 017f 	and.w	r1, r3, #127	; 0x7f
   19ca0:	eb01 12c2 	add.w	r2, r1, r2, lsl #7
   19ca4:	0619      	lsls	r1, r3, #24
   19ca6:	d4f7      	bmi.n	19c98 <mp_execute_bytecode+0x328>
                    if (mp_obj_cell_get(fastn[-unum]) == MP_OBJ_NULL) {
   19ca8:	ebc2 7482 	rsb	r4, r2, r2, lsl #30
   19cac:	9b01      	ldr	r3, [sp, #4]
   19cae:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
   19cb2:	f7f4 fc45 	bl	e540 <mp_obj_cell_get>
   19cb6:	2800      	cmp	r0, #0
   19cb8:	f000 8507 	beq.w	1a6ca <mp_execute_bytecode+0xd5a>
                    mp_obj_cell_set(fastn[-unum], MP_OBJ_NULL);
   19cbc:	9b01      	ldr	r3, [sp, #4]
   19cbe:	2100      	movs	r1, #0
   19cc0:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
                    DECODE_UINT;
   19cc4:	4634      	mov	r4, r6
                    mp_obj_cell_set(fastn[-unum], MP_OBJ_NULL);
   19cc6:	f7f4 fc49 	bl	e55c <mp_obj_cell_set>
                    DISPATCH();
   19cca:	e78a      	b.n	19be2 <mp_execute_bytecode+0x272>
                    sp[0] = sp[-2];
   19ccc:	682a      	ldr	r2, [r5, #0]
                    sp[-1] = sp[-3];
   19cce:	f855 3c04 	ldr.w	r3, [r5, #-4]
                    sp[0] = sp[-2];
   19cd2:	60aa      	str	r2, [r5, #8]
                    sp[-1] = sp[-3];
   19cd4:	606b      	str	r3, [r5, #4]
                switch (*ip++) {
   19cd6:	4634      	mov	r4, r6
                    sp += 2;
   19cd8:	3508      	adds	r5, #8
                    DISPATCH();
   19cda:	e782      	b.n	19be2 <mp_execute_bytecode+0x272>
                    mp_obj_t send_value = POP();
   19cdc:	46ab      	mov	fp, r5
                    if (inject_exc != MP_OBJ_NULL) {
   19cde:	9a03      	ldr	r2, [sp, #12]
                    mp_obj_t send_value = POP();
   19ce0:	f85b 1904 	ldr.w	r1, [fp], #-4
                    code_state->sp = sp; // Save sp because it's needed if mp_resume raises StopIteration
   19ce4:	f8c8 b008 	str.w	fp, [r8, #8]
                    if (inject_exc != MP_OBJ_NULL) {
   19ce8:	2a00      	cmp	r2, #0
   19cea:	f000 84c9 	beq.w	1a680 <mp_execute_bytecode+0xd10>
                        t_exc = inject_exc;
   19cee:	f8dd a00c 	ldr.w	sl, [sp, #12]
                        ret_kind = mp_resume(TOP(), MP_OBJ_NULL, t_exc, &ret_value);
   19cf2:	f855 0c04 	ldr.w	r0, [r5, #-4]
                        inject_exc = MP_OBJ_NULL;
   19cf6:	f04f 0e00 	mov.w	lr, #0
                        ret_kind = mp_resume(TOP(), MP_OBJ_NULL, t_exc, &ret_value);
   19cfa:	4652      	mov	r2, sl
   19cfc:	4671      	mov	r1, lr
   19cfe:	ab07      	add	r3, sp, #28
                        inject_exc = MP_OBJ_NULL;
   19d00:	f8cd e00c 	str.w	lr, [sp, #12]
                        ret_kind = mp_resume(TOP(), MP_OBJ_NULL, t_exc, &ret_value);
   19d04:	f7f2 fff0 	bl	cce8 <mp_resume>
                    if (ret_kind == MP_VM_RETURN_YIELD) {
   19d08:	2801      	cmp	r0, #1
   19d0a:	f43f af78 	beq.w	19bfe <mp_execute_bytecode+0x28e>
                    } else if (ret_kind == MP_VM_RETURN_NORMAL) {
   19d0e:	2800      	cmp	r0, #0
   19d10:	f040 847d 	bne.w	1a60e <mp_execute_bytecode+0xc9e>
                        if (ret_value == MP_OBJ_STOP_ITERATION) {
   19d14:	9b07      	ldr	r3, [sp, #28]
                            PUSH(mp_const_none);
   19d16:	4ac5      	ldr	r2, [pc, #788]	; (1a02c <mp_execute_bytecode+0x6bc>)
   19d18:	2b04      	cmp	r3, #4
   19d1a:	bf08      	it	eq
   19d1c:	4613      	moveq	r3, r2
   19d1e:	f845 3c04 	str.w	r3, [r5, #-4]
                        GENERATOR_EXIT_IF_NEEDED(t_exc);
   19d22:	f1ba 0f00 	cmp.w	sl, #0
   19d26:	d006      	beq.n	19d36 <mp_execute_bytecode+0x3c6>
                            GENERATOR_EXIT_IF_NEEDED(t_exc);
   19d28:	49c1      	ldr	r1, [pc, #772]	; (1a030 <mp_execute_bytecode+0x6c0>)
   19d2a:	4650      	mov	r0, sl
   19d2c:	f7f5 fe84 	bl	fa38 <mp_obj_exception_match>
   19d30:	2800      	cmp	r0, #0
   19d32:	f040 853d 	bne.w	1a7b0 <mp_execute_bytecode+0xe40>
                        DISPATCH();
   19d36:	465d      	mov	r5, fp
                switch (*ip++) {
   19d38:	4634      	mov	r4, r6
   19d3a:	e752      	b.n	19be2 <mp_execute_bytecode+0x272>
                    DECODE_PTR;
   19d3c:	1cf4      	adds	r4, r6, #3
   19d3e:	f024 0403 	bic.w	r4, r4, #3
                    SET_TOP(mp_make_function_from_raw_code(ptr, TOP(), def_dict));
   19d42:	682a      	ldr	r2, [r5, #0]
   19d44:	6820      	ldr	r0, [r4, #0]
   19d46:	f855 1c04 	ldr.w	r1, [r5, #-4]
   19d4a:	f7f1 fbb1 	bl	b4b0 <mp_make_function_from_raw_code>
                    mp_obj_t def_dict = POP();
   19d4e:	1f2b      	subs	r3, r5, #4
                    SET_TOP(mp_make_function_from_raw_code(ptr, TOP(), def_dict));
   19d50:	f845 0c04 	str.w	r0, [r5, #-4]
                    DECODE_PTR;
   19d54:	3404      	adds	r4, #4
                    mp_obj_t def_dict = POP();
   19d56:	461d      	mov	r5, r3
                    DISPATCH();
   19d58:	e743      	b.n	19be2 <mp_execute_bytecode+0x272>
                    DECODE_PTR;
   19d5a:	1cf4      	adds	r4, r6, #3
   19d5c:	f024 0403 	bic.w	r4, r4, #3
                    PUSH(mp_make_function_from_raw_code(ptr, MP_OBJ_NULL, MP_OBJ_NULL));
   19d60:	2200      	movs	r2, #0
   19d62:	6820      	ldr	r0, [r4, #0]
   19d64:	4611      	mov	r1, r2
   19d66:	f7f1 fba3 	bl	b4b0 <mp_make_function_from_raw_code>
   19d6a:	1d2b      	adds	r3, r5, #4
   19d6c:	6068      	str	r0, [r5, #4]
                    DECODE_PTR;
   19d6e:	3404      	adds	r4, #4
                    PUSH(mp_make_function_from_raw_code(ptr, MP_OBJ_NULL, MP_OBJ_NULL));
   19d70:	461d      	mov	r5, r3
                    DISPATCH();
   19d72:	e736      	b.n	19be2 <mp_execute_bytecode+0x272>
                switch (*ip++) {
   19d74:	4634      	mov	r4, r6
   19d76:	2100      	movs	r1, #0
                    DECODE_UINT;
   19d78:	f814 3b01 	ldrb.w	r3, [r4], #1
   19d7c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
   19d80:	061e      	lsls	r6, r3, #24
   19d82:	eb02 11c1 	add.w	r1, r2, r1, lsl #7
   19d86:	d4f7      	bmi.n	19d78 <mp_execute_bytecode+0x408>
                    sp -= (unum & 0xff) + ((unum >> 7) & 0x1fe) + 2;
   19d88:	09cb      	lsrs	r3, r1, #7
   19d8a:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
   19d8e:	fa53 f381 	uxtab	r3, r3, r1
   19d92:	eba5 0583 	sub.w	r5, r5, r3, lsl #2
   19d96:	3d08      	subs	r5, #8
                    SET_TOP(mp_call_method_n_kw_var(false, unum, sp));
   19d98:	462a      	mov	r2, r5
   19d9a:	2000      	movs	r0, #0
   19d9c:	f7f2 fbd6 	bl	c54c <mp_call_method_n_kw_var>
   19da0:	6028      	str	r0, [r5, #0]
                    DISPATCH();
   19da2:	e71e      	b.n	19be2 <mp_execute_bytecode+0x272>
                switch (*ip++) {
   19da4:	4634      	mov	r4, r6
   19da6:	2200      	movs	r2, #0
                    DECODE_UINT;
   19da8:	f814 3b01 	ldrb.w	r3, [r4], #1
   19dac:	f003 017f 	and.w	r1, r3, #127	; 0x7f
   19db0:	061b      	lsls	r3, r3, #24
   19db2:	eb01 12c2 	add.w	r2, r1, r2, lsl #7
   19db6:	d4f7      	bmi.n	19da8 <mp_execute_bytecode+0x438>
                    sp -= (unum & 0xff) + ((unum >> 7) & 0x1fe);
   19db8:	09d3      	lsrs	r3, r2, #7
   19dba:	b2d1      	uxtb	r1, r2
   19dbc:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
   19dc0:	440b      	add	r3, r1
   19dc2:	eba5 0583 	sub.w	r5, r5, r3, lsl #2
                    SET_TOP(mp_call_function_n_kw(*sp, unum & 0xff, (unum >> 8) & 0xff, sp + 1));
   19dc6:	f3c2 2207 	ubfx	r2, r2, #8, #8
   19dca:	1d2b      	adds	r3, r5, #4
   19dcc:	6828      	ldr	r0, [r5, #0]
   19dce:	f7f2 f949 	bl	c064 <mp_call_function_n_kw>
   19dd2:	6028      	str	r0, [r5, #0]
                    DISPATCH();
   19dd4:	e705      	b.n	19be2 <mp_execute_bytecode+0x272>
                    DECODE_PTR;
   19dd6:	1cf3      	adds	r3, r6, #3
   19dd8:	f023 0303 	bic.w	r3, r3, #3
                    size_t n_closed_over = *ip++;
   19ddc:	1d5c      	adds	r4, r3, #5
   19dde:	7919      	ldrb	r1, [r3, #4]
                    SET_TOP(mp_make_closure_from_raw_code(ptr, 0x100 | n_closed_over, sp));
   19de0:	6818      	ldr	r0, [r3, #0]
                    sp -= 2 + n_closed_over - 1;
   19de2:	43cb      	mvns	r3, r1
   19de4:	eb05 0583 	add.w	r5, r5, r3, lsl #2
                    SET_TOP(mp_make_closure_from_raw_code(ptr, 0x100 | n_closed_over, sp));
   19de8:	f441 7180 	orr.w	r1, r1, #256	; 0x100
   19dec:	462a      	mov	r2, r5
   19dee:	f7f1 fbd9 	bl	b5a4 <mp_make_closure_from_raw_code>
   19df2:	6028      	str	r0, [r5, #0]
                    DISPATCH();
   19df4:	e6f5      	b.n	19be2 <mp_execute_bytecode+0x272>
                    DECODE_PTR;
   19df6:	1cf3      	adds	r3, r6, #3
   19df8:	f023 0303 	bic.w	r3, r3, #3
                    size_t n_closed_over = *ip++;
   19dfc:	1d5c      	adds	r4, r3, #5
   19dfe:	7919      	ldrb	r1, [r3, #4]
                    SET_TOP(mp_make_closure_from_raw_code(ptr, n_closed_over, sp));
   19e00:	6818      	ldr	r0, [r3, #0]
                    sp -= n_closed_over - 1;
   19e02:	008b      	lsls	r3, r1, #2
   19e04:	f1c3 0304 	rsb	r3, r3, #4
   19e08:	441d      	add	r5, r3
                    SET_TOP(mp_make_closure_from_raw_code(ptr, n_closed_over, sp));
   19e0a:	462a      	mov	r2, r5
   19e0c:	f7f1 fbca 	bl	b5a4 <mp_make_closure_from_raw_code>
   19e10:	6028      	str	r0, [r5, #0]
                    DISPATCH();
   19e12:	e6e6      	b.n	19be2 <mp_execute_bytecode+0x272>
                    mp_uint_t unum = *ip;
   19e14:	7863      	ldrb	r3, [r4, #1]
                    if (unum == 2) {
   19e16:	2b02      	cmp	r3, #2
   19e18:	f000 83f5 	beq.w	1a606 <mp_execute_bytecode+0xc96>
                    if (unum == 0) {
   19e1c:	2b00      	cmp	r3, #0
   19e1e:	f040 83f3 	bne.w	1a608 <mp_execute_bytecode+0xc98>
                        for (mp_exc_stack_t *e = exc_sp; e >= exc_stack; e--) {
   19e22:	9b06      	ldr	r3, [sp, #24]
   19e24:	429f      	cmp	r7, r3
   19e26:	d806      	bhi.n	19e36 <mp_execute_bytecode+0x4c6>
                            if (e->prev_exc != NULL) {
   19e28:	6898      	ldr	r0, [r3, #8]
   19e2a:	2800      	cmp	r0, #0
   19e2c:	f47f add3 	bne.w	199d6 <mp_execute_bytecode+0x66>
                        for (mp_exc_stack_t *e = exc_sp; e >= exc_stack; e--) {
   19e30:	3b0c      	subs	r3, #12
   19e32:	429f      	cmp	r7, r3
   19e34:	d9f8      	bls.n	19e28 <mp_execute_bytecode+0x4b8>
                            obj = mp_obj_new_exception_msg(&mp_type_RuntimeError, "no active exception to reraise");
   19e36:	497f      	ldr	r1, [pc, #508]	; (1a034 <mp_execute_bytecode+0x6c4>)
   19e38:	487f      	ldr	r0, [pc, #508]	; (1a038 <mp_execute_bytecode+0x6c8>)
   19e3a:	f7f5 fcc7 	bl	f7cc <mp_obj_new_exception_msg>
   19e3e:	4604      	mov	r4, r0
                            RAISE(obj);
   19e40:	f7e6 fa2a 	bl	298 <nlr_pop>
   19e44:	9409      	str	r4, [sp, #36]	; 0x24
   19e46:	4620      	mov	r0, r4
   19e48:	e5cc      	b.n	199e4 <mp_execute_bytecode+0x74>
                    if (currently_in_except_block) {
   19e4a:	f89d 3017 	ldrb.w	r3, [sp, #23]
   19e4e:	b173      	cbz	r3, 19e6e <mp_execute_bytecode+0x4fe>
                        POP_EXC_BLOCK();
   19e50:	9b06      	ldr	r3, [sp, #24]
   19e52:	685b      	ldr	r3, [r3, #4]
   19e54:	f003 0301 	and.w	r3, r3, #1
   19e58:	f88d 3017 	strb.w	r3, [sp, #23]
   19e5c:	e004      	b.n	19e68 <mp_execute_bytecode+0x4f8>
                        if (MP_TAGPTR_TAG1(exc_sp->val_sp)) {
   19e5e:	9b06      	ldr	r3, [sp, #24]
   19e60:	685b      	ldr	r3, [r3, #4]
   19e62:	079b      	lsls	r3, r3, #30
   19e64:	f100 83bd 	bmi.w	1a5e2 <mp_execute_bytecode+0xc72>
                        POP_EXC_BLOCK();
   19e68:	9b06      	ldr	r3, [sp, #24]
   19e6a:	3b0c      	subs	r3, #12
   19e6c:	9306      	str	r3, [sp, #24]
                    while (exc_sp >= exc_stack) {
   19e6e:	9b06      	ldr	r3, [sp, #24]
   19e70:	429f      	cmp	r7, r3
   19e72:	d9f4      	bls.n	19e5e <mp_execute_bytecode+0x4ee>
                    nlr_pop();
   19e74:	f7e6 fa10 	bl	298 <nlr_pop>
                    assert(exc_sp == exc_stack - 1);
   19e78:	9b06      	ldr	r3, [sp, #24]
                    code_state->sp = sp;
   19e7a:	f8c8 5008 	str.w	r5, [r8, #8]
                    assert(exc_sp == exc_stack - 1);
   19e7e:	3f0c      	subs	r7, #12
   19e80:	42bb      	cmp	r3, r7
   19e82:	f040 8487 	bne.w	1a794 <mp_execute_bytecode+0xe24>
                    return MP_VM_RETURN_NORMAL;
   19e86:	2000      	movs	r0, #0
}
   19e88:	b015      	add	sp, #84	; 0x54
   19e8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                switch (*ip++) {
   19e8e:	4634      	mov	r4, r6
   19e90:	2600      	movs	r6, #0
                    DECODE_UINT;
   19e92:	f814 3b01 	ldrb.w	r3, [r4], #1
   19e96:	f003 027f 	and.w	r2, r3, #127	; 0x7f
   19e9a:	eb02 16c6 	add.w	r6, r2, r6, lsl #7
   19e9e:	061a      	lsls	r2, r3, #24
   19ea0:	d4f7      	bmi.n	19e92 <mp_execute_bytecode+0x522>
                    mp_unpack_ex(sp[0], unum, sp);
   19ea2:	462a      	mov	r2, r5
   19ea4:	4631      	mov	r1, r6
   19ea6:	6828      	ldr	r0, [r5, #0]
   19ea8:	f7f2 fbf8 	bl	c69c <mp_unpack_ex>
                    sp += (unum & 0xff) + ((unum >> 8) & 0xff);
   19eac:	f3c6 2307 	ubfx	r3, r6, #8, #8
   19eb0:	fa53 f686 	uxtab	r6, r3, r6
   19eb4:	eb05 0586 	add.w	r5, r5, r6, lsl #2
                    DISPATCH();
   19eb8:	e693      	b.n	19be2 <mp_execute_bytecode+0x272>
                switch (*ip++) {
   19eba:	4634      	mov	r4, r6
   19ebc:	2600      	movs	r6, #0
                    DECODE_UINT;
   19ebe:	f814 3b01 	ldrb.w	r3, [r4], #1
   19ec2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
   19ec6:	0619      	lsls	r1, r3, #24
   19ec8:	eb02 16c6 	add.w	r6, r2, r6, lsl #7
   19ecc:	d4f7      	bmi.n	19ebe <mp_execute_bytecode+0x54e>
                    mp_unpack_sequence(sp[0], unum, sp);
   19ece:	4631      	mov	r1, r6
                    sp += unum - 1;
   19ed0:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
                    mp_unpack_sequence(sp[0], unum, sp);
   19ed4:	462a      	mov	r2, r5
   19ed6:	6828      	ldr	r0, [r5, #0]
                    sp += unum - 1;
   19ed8:	3e01      	subs	r6, #1
                    mp_unpack_sequence(sp[0], unum, sp);
   19eda:	f7f2 fb59 	bl	c590 <mp_unpack_sequence>
                    sp += unum - 1;
   19ede:	eb05 0586 	add.w	r5, r5, r6, lsl #2
                    DISPATCH();
   19ee2:	e67e      	b.n	19be2 <mp_execute_bytecode+0x272>
                switch (*ip++) {
   19ee4:	4634      	mov	r4, r6
   19ee6:	2200      	movs	r2, #0
                    DECODE_UINT;
   19ee8:	f814 3b01 	ldrb.w	r3, [r4], #1
   19eec:	f003 017f 	and.w	r1, r3, #127	; 0x7f
   19ef0:	061b      	lsls	r3, r3, #24
   19ef2:	eb01 12c2 	add.w	r2, r1, r2, lsl #7
   19ef6:	d4f7      	bmi.n	19ee8 <mp_execute_bytecode+0x578>
                    mp_obj_t obj = sp[-(unum >> 2)];
   19ef8:	0893      	lsrs	r3, r2, #2
   19efa:	ebc3 7383 	rsb	r3, r3, r3, lsl #30
                    if ((unum & 3) == 0) {
   19efe:	0796      	lsls	r6, r2, #30
                    mp_obj_t obj = sp[-(unum >> 2)];
   19f00:	f855 0023 	ldr.w	r0, [r5, r3, lsl #2]
                    if ((unum & 3) == 0) {
   19f04:	f040 8346 	bne.w	1a594 <mp_execute_bytecode+0xc24>
                        mp_obj_list_append(obj, sp[0]);
   19f08:	f855 1904 	ldr.w	r1, [r5], #-4
   19f0c:	f7f7 f96e 	bl	111ec <mp_obj_list_append>
   19f10:	e667      	b.n	19be2 <mp_execute_bytecode+0x272>
                    sp -= 2;
   19f12:	f1a5 0308 	sub.w	r3, r5, #8
                    mp_obj_dict_store(sp[0], sp[2], sp[1]);
   19f16:	f855 2c04 	ldr.w	r2, [r5, #-4]
   19f1a:	6829      	ldr	r1, [r5, #0]
   19f1c:	f855 0c08 	ldr.w	r0, [r5, #-8]
                switch (*ip++) {
   19f20:	4634      	mov	r4, r6
                    sp -= 2;
   19f22:	461d      	mov	r5, r3
                    mp_obj_dict_store(sp[0], sp[2], sp[1]);
   19f24:	f7f5 fa7c 	bl	f420 <mp_obj_dict_store>
                    DISPATCH();
   19f28:	e65b      	b.n	19be2 <mp_execute_bytecode+0x272>
                switch (*ip++) {
   19f2a:	4634      	mov	r4, r6
   19f2c:	2000      	movs	r0, #0
                    DECODE_UINT;
   19f2e:	f814 3b01 	ldrb.w	r3, [r4], #1
   19f32:	f003 027f 	and.w	r2, r3, #127	; 0x7f
   19f36:	eb02 10c0 	add.w	r0, r2, r0, lsl #7
   19f3a:	061a      	lsls	r2, r3, #24
   19f3c:	d4f7      	bmi.n	19f2e <mp_execute_bytecode+0x5be>
                    PUSH(mp_obj_new_dict(unum));
   19f3e:	f7f5 fa4d 	bl	f3dc <mp_obj_new_dict>
   19f42:	1d2b      	adds	r3, r5, #4
   19f44:	6068      	str	r0, [r5, #4]
   19f46:	461d      	mov	r5, r3
                    DISPATCH();
   19f48:	e64b      	b.n	19be2 <mp_execute_bytecode+0x272>
                switch (*ip++) {
   19f4a:	4634      	mov	r4, r6
   19f4c:	2000      	movs	r0, #0
                    DECODE_UINT;
   19f4e:	f814 3b01 	ldrb.w	r3, [r4], #1
   19f52:	f003 027f 	and.w	r2, r3, #127	; 0x7f
   19f56:	0619      	lsls	r1, r3, #24
   19f58:	eb02 10c0 	add.w	r0, r2, r0, lsl #7
   19f5c:	d4f7      	bmi.n	19f4e <mp_execute_bytecode+0x5de>
                    sp -= unum - 1;
   19f5e:	0083      	lsls	r3, r0, #2
   19f60:	f1c3 0304 	rsb	r3, r3, #4
   19f64:	441d      	add	r5, r3
                    SET_TOP(mp_obj_new_list(unum, sp));
   19f66:	4629      	mov	r1, r5
   19f68:	f7f7 fdd2 	bl	11b10 <mp_obj_new_list>
   19f6c:	6028      	str	r0, [r5, #0]
                    DISPATCH();
   19f6e:	e638      	b.n	19be2 <mp_execute_bytecode+0x272>
                switch (*ip++) {
   19f70:	4634      	mov	r4, r6
   19f72:	2000      	movs	r0, #0
                    DECODE_UINT;
   19f74:	f814 3b01 	ldrb.w	r3, [r4], #1
   19f78:	f003 027f 	and.w	r2, r3, #127	; 0x7f
   19f7c:	061e      	lsls	r6, r3, #24
   19f7e:	eb02 10c0 	add.w	r0, r2, r0, lsl #7
   19f82:	d4f7      	bmi.n	19f74 <mp_execute_bytecode+0x604>
                    sp -= unum - 1;
   19f84:	0083      	lsls	r3, r0, #2
   19f86:	f1c3 0304 	rsb	r3, r3, #4
   19f8a:	441d      	add	r5, r3
                    SET_TOP(mp_obj_new_tuple(unum, sp));
   19f8c:	4629      	mov	r1, r5
   19f8e:	f7fc f86d 	bl	1606c <mp_obj_new_tuple>
   19f92:	6028      	str	r0, [r5, #0]
                    DISPATCH();
   19f94:	e625      	b.n	19be2 <mp_execute_bytecode+0x272>
                    mp_obj_t obj = TOP();
   19f96:	46aa      	mov	sl, r5
                    obj = mp_getiter(obj, iter_buf);
   19f98:	4629      	mov	r1, r5
   19f9a:	f85a 0b0c 	ldr.w	r0, [sl], #12
   19f9e:	f7f2 fdd7 	bl	cb50 <mp_getiter>
                    if (obj != MP_OBJ_FROM_PTR(iter_buf)) {
   19fa2:	4285      	cmp	r5, r0
   19fa4:	f000 8365 	beq.w	1a672 <mp_execute_bytecode+0xd02>
                        sp[-MP_OBJ_ITER_BUF_NSLOTS + 1] = MP_OBJ_NULL;
   19fa8:	2300      	movs	r3, #0
                        sp[-MP_OBJ_ITER_BUF_NSLOTS + 2] = obj;
   19faa:	6068      	str	r0, [r5, #4]
                        sp[-MP_OBJ_ITER_BUF_NSLOTS + 1] = MP_OBJ_NULL;
   19fac:	602b      	str	r3, [r5, #0]
                switch (*ip++) {
   19fae:	4634      	mov	r4, r6
                    sp += MP_OBJ_ITER_BUF_NSLOTS - 1;
   19fb0:	4655      	mov	r5, sl
   19fb2:	e616      	b.n	19be2 <mp_execute_bytecode+0x272>
                    PUSH((mp_obj_t)(mp_uint_t)(uintptr_t)(ip + slab)); // push destination ip for jump
   19fb4:	f8b4 3001 	ldrh.w	r3, [r4, #1]
   19fb8:	f5a3 43ff 	sub.w	r3, r3, #32640	; 0x7f80
   19fbc:	3b7e      	subs	r3, #126	; 0x7e
   19fbe:	4433      	add	r3, r6
   19fc0:	606b      	str	r3, [r5, #4]
                    PUSH((mp_obj_t)(mp_uint_t)(*ip)); // push number of exception handlers to unwind (0x80 bit set if we also need to pop stack)
   19fc2:	78e2      	ldrb	r2, [r4, #3]
   19fc4:	60aa      	str	r2, [r5, #8]
   19fc6:	3508      	adds	r5, #8
   19fc8:	e013      	b.n	19ff2 <mp_execute_bytecode+0x682>
                        assert(exc_sp >= exc_stack);
   19fca:	9b06      	ldr	r3, [sp, #24]
   19fcc:	429f      	cmp	r7, r3
                        unum -= 1;
   19fce:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
                        assert(exc_sp >= exc_stack);
   19fd2:	f200 839e 	bhi.w	1a712 <mp_execute_bytecode+0xda2>
                        if (MP_TAGPTR_TAG1(exc_sp->val_sp)) {
   19fd6:	9b06      	ldr	r3, [sp, #24]
   19fd8:	685b      	ldr	r3, [r3, #4]
   19fda:	0798      	lsls	r0, r3, #30
   19fdc:	f53f ad8b 	bmi.w	19af6 <mp_execute_bytecode+0x186>
                        POP_EXC_BLOCK();
   19fe0:	9b06      	ldr	r3, [sp, #24]
   19fe2:	685b      	ldr	r3, [r3, #4]
   19fe4:	f003 0301 	and.w	r3, r3, #1
   19fe8:	f88d 3017 	strb.w	r3, [sp, #23]
   19fec:	9b06      	ldr	r3, [sp, #24]
   19fee:	3b0c      	subs	r3, #12
   19ff0:	9306      	str	r3, [sp, #24]
                    while ((unum & 0x7f) > 0) {
   19ff2:	0651      	lsls	r1, r2, #25
   19ff4:	d1e9      	bne.n	19fca <mp_execute_bytecode+0x65a>
                    ip = (const byte*)MP_OBJ_TO_PTR(POP()); // pop destination ip for jump
   19ff6:	f855 4c04 	ldr.w	r4, [r5, #-4]
                    if (unum != 0) {
   19ffa:	2a00      	cmp	r2, #0
   19ffc:	f040 831b 	bne.w	1a636 <mp_execute_bytecode+0xcc6>
                    ip = (const byte*)MP_OBJ_TO_PTR(POP()); // pop destination ip for jump
   1a000:	3d08      	subs	r5, #8
   1a002:	e5ee      	b.n	19be2 <mp_execute_bytecode+0x272>
                    assert(exc_sp >= exc_stack);
   1a004:	9b06      	ldr	r3, [sp, #24]
   1a006:	429f      	cmp	r7, r3
   1a008:	f200 83d9 	bhi.w	1a7be <mp_execute_bytecode+0xe4e>
                    assert(currently_in_except_block);
   1a00c:	f89d 3017 	ldrb.w	r3, [sp, #23]
   1a010:	2b00      	cmp	r3, #0
   1a012:	f000 8394 	beq.w	1a73e <mp_execute_bytecode+0xdce>
                    POP_EXC_BLOCK();
   1a016:	9b06      	ldr	r3, [sp, #24]
   1a018:	685b      	ldr	r3, [r3, #4]
   1a01a:	f003 0301 	and.w	r3, r3, #1
   1a01e:	f88d 3017 	strb.w	r3, [sp, #23]
   1a022:	9b06      	ldr	r3, [sp, #24]
   1a024:	3b0c      	subs	r3, #12
                switch (*ip++) {
   1a026:	4634      	mov	r4, r6
                    POP_EXC_BLOCK();
   1a028:	9306      	str	r3, [sp, #24]
                    DISPATCH();
   1a02a:	e5da      	b.n	19be2 <mp_execute_bytecode+0x272>
   1a02c:	0002345c 	.word	0x0002345c
   1a030:	000221e8 	.word	0x000221e8
   1a034:	00024c50 	.word	0x00024c50
   1a038:	000225a8 	.word	0x000225a8
                    assert(exc_sp >= exc_stack);
   1a03c:	9b06      	ldr	r3, [sp, #24]
   1a03e:	429f      	cmp	r7, r3
   1a040:	d9e9      	bls.n	1a016 <mp_execute_bytecode+0x6a6>
   1a042:	4bc3      	ldr	r3, [pc, #780]	; (1a350 <mp_execute_bytecode+0x9e0>)
   1a044:	4ac3      	ldr	r2, [pc, #780]	; (1a354 <mp_execute_bytecode+0x9e4>)
   1a046:	48c4      	ldr	r0, [pc, #784]	; (1a358 <mp_execute_bytecode+0x9e8>)
   1a048:	f240 21ff 	movw	r1, #767	; 0x2ff
   1a04c:	f001 fb40 	bl	1b6d0 <__assert_func>
   1a050:	f8b4 6001 	ldrh.w	r6, [r4, #1]
                    code_state->sp = sp;
   1a054:	f8c8 5008 	str.w	r5, [r8, #8]
                    if (sp[-MP_OBJ_ITER_BUF_NSLOTS + 1] == MP_OBJ_NULL) {
   1a058:	f855 3c0c 	ldr.w	r3, [r5, #-12]
                    DECODE_ULABEL; // the jump offset if iteration finishes; for labels are always forward
   1a05c:	3403      	adds	r4, #3
                    if (sp[-MP_OBJ_ITER_BUF_NSLOTS + 1] == MP_OBJ_NULL) {
   1a05e:	2b00      	cmp	r3, #0
   1a060:	f000 830b 	beq.w	1a67a <mp_execute_bytecode+0xd0a>
                        obj = MP_OBJ_FROM_PTR(&sp[-MP_OBJ_ITER_BUF_NSLOTS + 1]);
   1a064:	f1a5 000c 	sub.w	r0, r5, #12
                    mp_obj_t value = mp_iternext_allow_raise(obj);
   1a068:	f7f2 fdc6 	bl	cbf8 <mp_iternext_allow_raise>
                    if (value == MP_OBJ_STOP_ITERATION) {
   1a06c:	2804      	cmp	r0, #4
   1a06e:	f040 8218 	bne.w	1a4a2 <mp_execute_bytecode+0xb32>
                        sp -= MP_OBJ_ITER_BUF_NSLOTS; // pop the exhausted iterator
   1a072:	3d10      	subs	r5, #16
                        ip += ulab; // jump to after for-block
   1a074:	4434      	add	r4, r6
   1a076:	e5b4      	b.n	19be2 <mp_execute_bytecode+0x272>
                    SET_TOP(mp_getiter(TOP(), NULL));
   1a078:	2100      	movs	r1, #0
   1a07a:	6828      	ldr	r0, [r5, #0]
   1a07c:	f7f2 fd68 	bl	cb50 <mp_getiter>
                switch (*ip++) {
   1a080:	4634      	mov	r4, r6
                    SET_TOP(mp_getiter(TOP(), NULL));
   1a082:	6028      	str	r0, [r5, #0]
                    DISPATCH();
   1a084:	e5ad      	b.n	19be2 <mp_execute_bytecode+0x272>
                    PUSH_EXC_BLOCK((code_state->ip[0] == MP_BC_SETUP_FINALLY) ? 1 : 0);
   1a086:	9a06      	ldr	r2, [sp, #24]
   1a088:	f8b4 3001 	ldrh.w	r3, [r4, #1]
   1a08c:	320c      	adds	r2, #12
   1a08e:	9206      	str	r2, [sp, #24]
   1a090:	9a06      	ldr	r2, [sp, #24]
   1a092:	9e06      	ldr	r6, [sp, #24]
   1a094:	1ce1      	adds	r1, r4, #3
   1a096:	440b      	add	r3, r1
   1a098:	6013      	str	r3, [r2, #0]
   1a09a:	7823      	ldrb	r3, [r4, #0]
   1a09c:	f89d 2017 	ldrb.w	r2, [sp, #23]
   1a0a0:	9806      	ldr	r0, [sp, #24]
   1a0a2:	2b40      	cmp	r3, #64	; 0x40
   1a0a4:	bf14      	ite	ne
   1a0a6:	2300      	movne	r3, #0
   1a0a8:	2302      	moveq	r3, #2
   1a0aa:	4313      	orrs	r3, r2
   1a0ac:	432b      	orrs	r3, r5
   1a0ae:	2200      	movs	r2, #0
   1a0b0:	6073      	str	r3, [r6, #4]
   1a0b2:	460c      	mov	r4, r1
   1a0b4:	f88d 2017 	strb.w	r2, [sp, #23]
   1a0b8:	6082      	str	r2, [r0, #8]
                    DISPATCH();
   1a0ba:	e592      	b.n	19be2 <mp_execute_bytecode+0x272>
                    if (TOP() == mp_const_none) {
   1a0bc:	f8d5 a000 	ldr.w	sl, [r5]
   1a0c0:	4ca6      	ldr	r4, [pc, #664]	; (1a35c <mp_execute_bytecode+0x9ec>)
   1a0c2:	45a2      	cmp	sl, r4
   1a0c4:	f000 830c 	beq.w	1a6e0 <mp_execute_bytecode+0xd70>
                    } else if (MP_OBJ_IS_SMALL_INT(TOP())) {
   1a0c8:	f01a 0b01 	ands.w	fp, sl, #1
   1a0cc:	f040 8276 	bne.w	1a5bc <mp_execute_bytecode+0xc4c>
                        assert(mp_obj_is_exception_instance(TOP()));
   1a0d0:	4650      	mov	r0, sl
   1a0d2:	f7f5 fca1 	bl	fa18 <mp_obj_is_exception_instance>
   1a0d6:	2800      	cmp	r0, #0
   1a0d8:	f000 8363 	beq.w	1a7a2 <mp_execute_bytecode+0xe32>
                        sp[1] = sp[0];
   1a0dc:	6828      	ldr	r0, [r5, #0]
   1a0de:	6068      	str	r0, [r5, #4]
                        sp[0] = MP_OBJ_FROM_PTR(mp_obj_get_type(sp[0]));
   1a0e0:	f7f3 fce8 	bl	dab4 <mp_obj_get_type>
                        sp -= 2;
   1a0e4:	f1a5 0a08 	sub.w	sl, r5, #8
                        sp[0] = MP_OBJ_FROM_PTR(mp_obj_get_type(sp[0]));
   1a0e8:	6028      	str	r0, [r5, #0]
                        mp_obj_t ret_value = mp_call_method_n_kw(3, 0, sp);
   1a0ea:	4659      	mov	r1, fp
   1a0ec:	4652      	mov	r2, sl
                        sp[2] = mp_const_none;
   1a0ee:	60ac      	str	r4, [r5, #8]
                        mp_obj_t ret_value = mp_call_method_n_kw(3, 0, sp);
   1a0f0:	2003      	movs	r0, #3
   1a0f2:	f7f1 ffd9 	bl	c0a8 <mp_call_method_n_kw>
                        if (mp_obj_is_true(ret_value)) {
   1a0f6:	f7f3 fdbb 	bl	dc70 <mp_obj_is_true>
   1a0fa:	2800      	cmp	r0, #0
   1a0fc:	f000 82b2 	beq.w	1a664 <mp_execute_bytecode+0xcf4>
                            assert(exc_sp >= exc_stack);
   1a100:	9b06      	ldr	r3, [sp, #24]
                            SET_TOP(mp_const_none);
   1a102:	f845 4c08 	str.w	r4, [r5, #-8]
                            assert(exc_sp >= exc_stack);
   1a106:	429f      	cmp	r7, r3
   1a108:	f200 8327 	bhi.w	1a75a <mp_execute_bytecode+0xdea>
                            POP_EXC_BLOCK();
   1a10c:	9b06      	ldr	r3, [sp, #24]
   1a10e:	685b      	ldr	r3, [r3, #4]
   1a110:	f003 0301 	and.w	r3, r3, #1
   1a114:	f88d 3017 	strb.w	r3, [sp, #23]
   1a118:	9b06      	ldr	r3, [sp, #24]
   1a11a:	3b0c      	subs	r3, #12
                        sp -= 2;
   1a11c:	4655      	mov	r5, sl
                switch (*ip++) {
   1a11e:	4634      	mov	r4, r6
                            POP_EXC_BLOCK();
   1a120:	9306      	str	r3, [sp, #24]
   1a122:	e55e      	b.n	19be2 <mp_execute_bytecode+0x272>
                    mp_obj_t obj = TOP();
   1a124:	f8d5 a000 	ldr.w	sl, [r5]
                    mp_load_method(obj, MP_QSTR___exit__, sp);
   1a128:	462a      	mov	r2, r5
                    mp_load_method(obj, MP_QSTR___enter__, sp + 2);
   1a12a:	f105 0608 	add.w	r6, r5, #8
                    mp_load_method(obj, MP_QSTR___exit__, sp);
   1a12e:	4650      	mov	r0, sl
   1a130:	210c      	movs	r1, #12
   1a132:	f7f2 fc95 	bl	ca60 <mp_load_method>
                    mp_load_method(obj, MP_QSTR___enter__, sp + 2);
   1a136:	4650      	mov	r0, sl
   1a138:	4632      	mov	r2, r6
   1a13a:	210a      	movs	r1, #10
   1a13c:	f7f2 fc90 	bl	ca60 <mp_load_method>
                    mp_obj_t ret = mp_call_method_n_kw(0, 0, sp + 2);
   1a140:	2100      	movs	r1, #0
   1a142:	4632      	mov	r2, r6
   1a144:	4608      	mov	r0, r1
   1a146:	f7f1 ffaf 	bl	c0a8 <mp_call_method_n_kw>
                    PUSH_EXC_BLOCK(1);
   1a14a:	9b06      	ldr	r3, [sp, #24]
   1a14c:	f8b4 2001 	ldrh.w	r2, [r4, #1]
   1a150:	330c      	adds	r3, #12
   1a152:	9306      	str	r3, [sp, #24]
   1a154:	f8dd c018 	ldr.w	ip, [sp, #24]
   1a158:	f8dd e018 	ldr.w	lr, [sp, #24]
   1a15c:	f89d 3017 	ldrb.w	r3, [sp, #23]
   1a160:	9906      	ldr	r1, [sp, #24]
   1a162:	3403      	adds	r4, #3
   1a164:	4422      	add	r2, r4
   1a166:	f8cc 2000 	str.w	r2, [ip]
   1a16a:	f043 0302 	orr.w	r3, r3, #2
   1a16e:	1d2a      	adds	r2, r5, #4
   1a170:	4313      	orrs	r3, r2
   1a172:	2200      	movs	r2, #0
   1a174:	f8ce 3004 	str.w	r3, [lr, #4]
   1a178:	f88d 2017 	strb.w	r2, [sp, #23]
   1a17c:	608a      	str	r2, [r1, #8]
                    PUSH(ret);
   1a17e:	60a8      	str	r0, [r5, #8]
   1a180:	4635      	mov	r5, r6
                    DISPATCH();
   1a182:	e52e      	b.n	19be2 <mp_execute_bytecode+0x272>
                    if (mp_obj_is_true(TOP())) {
   1a184:	6828      	ldr	r0, [r5, #0]
   1a186:	f8b4 6001 	ldrh.w	r6, [r4, #1]
                    DECODE_SLABEL;
   1a18a:	3403      	adds	r4, #3
                    if (mp_obj_is_true(TOP())) {
   1a18c:	f7f3 fd70 	bl	dc70 <mp_obj_is_true>
   1a190:	b148      	cbz	r0, 1a1a6 <mp_execute_bytecode+0x836>
                        fastn[MP_BC_STORE_FAST_MULTI - (mp_int_t)ip[-1]] = POP();
   1a192:	3d04      	subs	r5, #4
                        DISPATCH();
   1a194:	e525      	b.n	19be2 <mp_execute_bytecode+0x272>
                    if (mp_obj_is_true(TOP())) {
   1a196:	6828      	ldr	r0, [r5, #0]
   1a198:	f8b4 6001 	ldrh.w	r6, [r4, #1]
                    DECODE_SLABEL;
   1a19c:	3403      	adds	r4, #3
                    if (mp_obj_is_true(TOP())) {
   1a19e:	f7f3 fd67 	bl	dc70 <mp_obj_is_true>
   1a1a2:	2800      	cmp	r0, #0
   1a1a4:	d0f5      	beq.n	1a192 <mp_execute_bytecode+0x822>
                        ip += slab;
   1a1a6:	f5a6 4600 	sub.w	r6, r6, #32768	; 0x8000
   1a1aa:	4434      	add	r4, r6
   1a1ac:	e519      	b.n	19be2 <mp_execute_bytecode+0x272>
                    if (!mp_obj_is_true(POP())) {
   1a1ae:	6828      	ldr	r0, [r5, #0]
   1a1b0:	f8b4 6001 	ldrh.w	r6, [r4, #1]
   1a1b4:	3d04      	subs	r5, #4
                    DECODE_SLABEL;
   1a1b6:	3403      	adds	r4, #3
                    if (!mp_obj_is_true(POP())) {
   1a1b8:	f7f3 fd5a 	bl	dc70 <mp_obj_is_true>
   1a1bc:	2800      	cmp	r0, #0
   1a1be:	f47f ad10 	bne.w	19be2 <mp_execute_bytecode+0x272>
                        ip += slab;
   1a1c2:	f5a6 4600 	sub.w	r6, r6, #32768	; 0x8000
   1a1c6:	4434      	add	r4, r6
   1a1c8:	e50b      	b.n	19be2 <mp_execute_bytecode+0x272>
                    if (mp_obj_is_true(POP())) {
   1a1ca:	6828      	ldr	r0, [r5, #0]
   1a1cc:	f8b4 6001 	ldrh.w	r6, [r4, #1]
   1a1d0:	3d04      	subs	r5, #4
                    DECODE_SLABEL;
   1a1d2:	3403      	adds	r4, #3
                    if (mp_obj_is_true(POP())) {
   1a1d4:	f7f3 fd4c 	bl	dc70 <mp_obj_is_true>
   1a1d8:	2800      	cmp	r0, #0
   1a1da:	f43f ad02 	beq.w	19be2 <mp_execute_bytecode+0x272>
                        ip += slab;
   1a1de:	f5a6 4600 	sub.w	r6, r6, #32768	; 0x8000
   1a1e2:	4434      	add	r4, r6
   1a1e4:	e4fd      	b.n	19be2 <mp_execute_bytecode+0x272>
   1a1e6:	f8b4 4001 	ldrh.w	r4, [r4, #1]
   1a1ea:	f5a4 44ff 	sub.w	r4, r4, #32640	; 0x7f80
   1a1ee:	3c7e      	subs	r4, #126	; 0x7e
                    ip += slab;
   1a1f0:	4434      	add	r4, r6
                    DISPATCH_WITH_PEND_EXC_CHECK();
   1a1f2:	e4f6      	b.n	19be2 <mp_execute_bytecode+0x272>
                    mp_import_all(POP());
   1a1f4:	6828      	ldr	r0, [r5, #0]
   1a1f6:	f1a5 0a04 	sub.w	sl, r5, #4
                switch (*ip++) {
   1a1fa:	4634      	mov	r4, r6
                    mp_import_all(POP());
   1a1fc:	f7f2 ff30 	bl	d060 <mp_import_all>
   1a200:	4655      	mov	r5, sl
                    DISPATCH();
   1a202:	e4ee      	b.n	19be2 <mp_execute_bytecode+0x272>
                switch (*ip++) {
   1a204:	4634      	mov	r4, r6
   1a206:	2100      	movs	r1, #0
                    DECODE_QSTR;
   1a208:	f814 3b01 	ldrb.w	r3, [r4], #1
   1a20c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
   1a210:	0618      	lsls	r0, r3, #24
   1a212:	eb02 11c1 	add.w	r1, r2, r1, lsl #7
   1a216:	d4f7      	bmi.n	1a208 <mp_execute_bytecode+0x898>
                    mp_obj_t obj = mp_import_from(TOP(), qst);
   1a218:	462e      	mov	r6, r5
   1a21a:	f856 0b04 	ldr.w	r0, [r6], #4
   1a21e:	f7f2 fe8f 	bl	cf40 <mp_import_from>
                    PUSH(obj);
   1a222:	6068      	str	r0, [r5, #4]
   1a224:	4635      	mov	r5, r6
                    DISPATCH();
   1a226:	e4dc      	b.n	19be2 <mp_execute_bytecode+0x272>
                switch (*ip++) {
   1a228:	4634      	mov	r4, r6
   1a22a:	2000      	movs	r0, #0
                    DECODE_QSTR;
   1a22c:	f814 3b01 	ldrb.w	r3, [r4], #1
   1a230:	f003 027f 	and.w	r2, r3, #127	; 0x7f
   1a234:	061e      	lsls	r6, r3, #24
   1a236:	eb02 10c0 	add.w	r0, r2, r0, lsl #7
   1a23a:	d4f7      	bmi.n	1a22c <mp_execute_bytecode+0x8bc>
                    SET_TOP(mp_import_name(qst, obj, TOP()));
   1a23c:	f855 2c04 	ldr.w	r2, [r5, #-4]
   1a240:	6829      	ldr	r1, [r5, #0]
   1a242:	f7f2 fe5d 	bl	cf00 <mp_import_name>
                    mp_obj_t obj = POP();
   1a246:	1f2b      	subs	r3, r5, #4
                    SET_TOP(mp_import_name(qst, obj, TOP()));
   1a248:	f845 0c04 	str.w	r0, [r5, #-4]
                    mp_obj_t obj = POP();
   1a24c:	461d      	mov	r5, r3
                    DISPATCH();
   1a24e:	e4c8      	b.n	19be2 <mp_execute_bytecode+0x272>
                switch (*ip++) {
   1a250:	4634      	mov	r4, r6
   1a252:	2100      	movs	r1, #0
                    DECODE_UINT;
   1a254:	f814 3b01 	ldrb.w	r3, [r4], #1
   1a258:	f003 027f 	and.w	r2, r3, #127	; 0x7f
   1a25c:	eb02 11c1 	add.w	r1, r2, r1, lsl #7
   1a260:	061a      	lsls	r2, r3, #24
   1a262:	d4f7      	bmi.n	1a254 <mp_execute_bytecode+0x8e4>
                    sp -= (unum & 0xff) + ((unum >> 7) & 0x1fe) + 3;
   1a264:	09cb      	lsrs	r3, r1, #7
   1a266:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
   1a26a:	fa53 f381 	uxtab	r3, r3, r1
   1a26e:	eba5 0583 	sub.w	r5, r5, r3, lsl #2
   1a272:	3d0c      	subs	r5, #12
                    SET_TOP(mp_call_method_n_kw_var(true, unum, sp));
   1a274:	462a      	mov	r2, r5
   1a276:	2001      	movs	r0, #1
   1a278:	f7f2 f968 	bl	c54c <mp_call_method_n_kw_var>
   1a27c:	6028      	str	r0, [r5, #0]
                    DISPATCH();
   1a27e:	e4b0      	b.n	19be2 <mp_execute_bytecode+0x272>
                switch (*ip++) {
   1a280:	4634      	mov	r4, r6
   1a282:	2100      	movs	r1, #0
                    DECODE_UINT;
   1a284:	f814 3b01 	ldrb.w	r3, [r4], #1
   1a288:	f003 027f 	and.w	r2, r3, #127	; 0x7f
   1a28c:	0618      	lsls	r0, r3, #24
   1a28e:	eb02 11c1 	add.w	r1, r2, r1, lsl #7
   1a292:	d4f7      	bmi.n	1a284 <mp_execute_bytecode+0x914>
                    sp -= (unum & 0xff) + ((unum >> 7) & 0x1fe) + 1;
   1a294:	b2c8      	uxtb	r0, r1
   1a296:	09ca      	lsrs	r2, r1, #7
   1a298:	1c43      	adds	r3, r0, #1
   1a29a:	f402 72ff 	and.w	r2, r2, #510	; 0x1fe
   1a29e:	4413      	add	r3, r2
   1a2a0:	eba5 0583 	sub.w	r5, r5, r3, lsl #2
                    SET_TOP(mp_call_method_n_kw(unum & 0xff, (unum >> 8) & 0xff, sp));
   1a2a4:	f3c1 2107 	ubfx	r1, r1, #8, #8
   1a2a8:	462a      	mov	r2, r5
   1a2aa:	f7f1 fefd 	bl	c0a8 <mp_call_method_n_kw>
   1a2ae:	6028      	str	r0, [r5, #0]
                    DISPATCH();
   1a2b0:	e497      	b.n	19be2 <mp_execute_bytecode+0x272>
                switch (*ip++) {
   1a2b2:	2200      	movs	r2, #0
                    DECODE_UINT;
   1a2b4:	f816 3b01 	ldrb.w	r3, [r6], #1
   1a2b8:	f003 017f 	and.w	r1, r3, #127	; 0x7f
   1a2bc:	0618      	lsls	r0, r3, #24
   1a2be:	eb01 12c2 	add.w	r2, r1, r2, lsl #7
   1a2c2:	d4f7      	bmi.n	1a2b4 <mp_execute_bytecode+0x944>
                    if (fastn[-unum] == MP_OBJ_NULL) {
   1a2c4:	ebc2 7282 	rsb	r2, r2, r2, lsl #30
   1a2c8:	9901      	ldr	r1, [sp, #4]
   1a2ca:	f851 3022 	ldr.w	r3, [r1, r2, lsl #2]
   1a2ce:	2b00      	cmp	r3, #0
   1a2d0:	f000 81fb 	beq.w	1a6ca <mp_execute_bytecode+0xd5a>
                    fastn[-unum] = MP_OBJ_NULL;
   1a2d4:	2300      	movs	r3, #0
                    DECODE_UINT;
   1a2d6:	4634      	mov	r4, r6
                    fastn[-unum] = MP_OBJ_NULL;
   1a2d8:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
                    DISPATCH();
   1a2dc:	e481      	b.n	19be2 <mp_execute_bytecode+0x272>
                    mp_obj_subscr(sp[-1], sp[0], sp[-2]);
   1a2de:	f855 2c08 	ldr.w	r2, [r5, #-8]
   1a2e2:	6829      	ldr	r1, [r5, #0]
   1a2e4:	f855 0c04 	ldr.w	r0, [r5, #-4]
                switch (*ip++) {
   1a2e8:	4634      	mov	r4, r6
                    mp_obj_subscr(sp[-1], sp[0], sp[-2]);
   1a2ea:	f7f3 ff87 	bl	e1fc <mp_obj_subscr>
                    sp -= 3;
   1a2ee:	3d0c      	subs	r5, #12
                    DISPATCH();
   1a2f0:	e477      	b.n	19be2 <mp_execute_bytecode+0x272>
                switch (*ip++) {
   1a2f2:	4634      	mov	r4, r6
   1a2f4:	2100      	movs	r1, #0
                    DECODE_QSTR;
   1a2f6:	f814 3b01 	ldrb.w	r3, [r4], #1
   1a2fa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
   1a2fe:	061e      	lsls	r6, r3, #24
   1a300:	eb02 11c1 	add.w	r1, r2, r1, lsl #7
   1a304:	d4f7      	bmi.n	1a2f6 <mp_execute_bytecode+0x986>
                    mp_store_attr(sp[0], qst, sp[-1]);
   1a306:	f855 2c04 	ldr.w	r2, [r5, #-4]
   1a30a:	f855 0908 	ldr.w	r0, [r5], #-8
   1a30e:	f7f2 fbf7 	bl	cb00 <mp_store_attr>
                    DISPATCH();
   1a312:	e466      	b.n	19be2 <mp_execute_bytecode+0x272>
                switch (*ip++) {
   1a314:	4634      	mov	r4, r6
   1a316:	2000      	movs	r0, #0
                    DECODE_QSTR;
   1a318:	f814 3b01 	ldrb.w	r3, [r4], #1
   1a31c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
   1a320:	061b      	lsls	r3, r3, #24
   1a322:	eb02 10c0 	add.w	r0, r2, r0, lsl #7
   1a326:	d4f7      	bmi.n	1a318 <mp_execute_bytecode+0x9a8>
                    mp_store_global(qst, POP());
   1a328:	6829      	ldr	r1, [r5, #0]
   1a32a:	3d04      	subs	r5, #4
   1a32c:	f7f1 faf8 	bl	b920 <mp_store_global>
                    DISPATCH();
   1a330:	e457      	b.n	19be2 <mp_execute_bytecode+0x272>
                switch (*ip++) {
   1a332:	4634      	mov	r4, r6
   1a334:	2000      	movs	r0, #0
                    DECODE_QSTR;
   1a336:	f814 3b01 	ldrb.w	r3, [r4], #1
   1a33a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
   1a33e:	eb02 10c0 	add.w	r0, r2, r0, lsl #7
   1a342:	061a      	lsls	r2, r3, #24
   1a344:	d4f7      	bmi.n	1a336 <mp_execute_bytecode+0x9c6>
                    mp_store_name(qst, POP());
   1a346:	6829      	ldr	r1, [r5, #0]
   1a348:	3d04      	subs	r5, #4
   1a34a:	f7f1 fac1 	bl	b8d0 <mp_store_name>
                    DISPATCH();
   1a34e:	e448      	b.n	19be2 <mp_execute_bytecode+0x272>
   1a350:	00024bc8 	.word	0x00024bc8
   1a354:	00024b54 	.word	0x00024b54
   1a358:	00024bb8 	.word	0x00024bb8
   1a35c:	0002345c 	.word	0x0002345c
                switch (*ip++) {
   1a360:	4634      	mov	r4, r6
   1a362:	2200      	movs	r2, #0
                    DECODE_UINT;
   1a364:	f814 3b01 	ldrb.w	r3, [r4], #1
   1a368:	f003 017f 	and.w	r1, r3, #127	; 0x7f
   1a36c:	eb01 12c2 	add.w	r2, r1, r2, lsl #7
   1a370:	0619      	lsls	r1, r3, #24
   1a372:	d4f7      	bmi.n	1a364 <mp_execute_bytecode+0x9f4>
                    mp_obj_cell_set(fastn[-unum], POP());
   1a374:	ebc2 7282 	rsb	r2, r2, r2, lsl #30
   1a378:	9b01      	ldr	r3, [sp, #4]
   1a37a:	6829      	ldr	r1, [r5, #0]
   1a37c:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
   1a380:	3d04      	subs	r5, #4
   1a382:	f7f4 f8eb 	bl	e55c <mp_obj_cell_set>
                    DISPATCH();
   1a386:	e42c      	b.n	19be2 <mp_execute_bytecode+0x272>
                switch (*ip++) {
   1a388:	4634      	mov	r4, r6
   1a38a:	2200      	movs	r2, #0
                    DECODE_UINT;
   1a38c:	f814 3b01 	ldrb.w	r3, [r4], #1
   1a390:	f003 017f 	and.w	r1, r3, #127	; 0x7f
   1a394:	0618      	lsls	r0, r3, #24
   1a396:	eb01 12c2 	add.w	r2, r1, r2, lsl #7
   1a39a:	d4f7      	bmi.n	1a38c <mp_execute_bytecode+0xa1c>
                    fastn[-unum] = POP();
   1a39c:	ebc2 7282 	rsb	r2, r2, r2, lsl #30
   1a3a0:	9901      	ldr	r1, [sp, #4]
   1a3a2:	682b      	ldr	r3, [r5, #0]
   1a3a4:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
   1a3a8:	3d04      	subs	r5, #4
                    DISPATCH();
   1a3aa:	e41a      	b.n	19be2 <mp_execute_bytecode+0x272>
                    SET_TOP(mp_obj_subscr(TOP(), index, MP_OBJ_SENTINEL));
   1a3ac:	6829      	ldr	r1, [r5, #0]
   1a3ae:	f855 0c04 	ldr.w	r0, [r5, #-4]
   1a3b2:	2208      	movs	r2, #8
   1a3b4:	f7f3 ff22 	bl	e1fc <mp_obj_subscr>
                    mp_obj_t index = POP();
   1a3b8:	1f2b      	subs	r3, r5, #4
                    SET_TOP(mp_obj_subscr(TOP(), index, MP_OBJ_SENTINEL));
   1a3ba:	f845 0c04 	str.w	r0, [r5, #-4]
                switch (*ip++) {
   1a3be:	4634      	mov	r4, r6
                    mp_obj_t index = POP();
   1a3c0:	461d      	mov	r5, r3
                    DISPATCH();
   1a3c2:	e40e      	b.n	19be2 <mp_execute_bytecode+0x272>
                    PUSH(mp_load_build_class());
   1a3c4:	f7f1 fa7a 	bl	b8bc <mp_load_build_class>
   1a3c8:	1d2b      	adds	r3, r5, #4
   1a3ca:	6068      	str	r0, [r5, #4]
                switch (*ip++) {
   1a3cc:	4634      	mov	r4, r6
                    PUSH(mp_load_build_class());
   1a3ce:	461d      	mov	r5, r3
                    DISPATCH();
   1a3d0:	e407      	b.n	19be2 <mp_execute_bytecode+0x272>
                switch (*ip++) {
   1a3d2:	4634      	mov	r4, r6
   1a3d4:	2000      	movs	r0, #0
                    DECODE_QSTR;
   1a3d6:	f814 3b01 	ldrb.w	r3, [r4], #1
   1a3da:	f003 027f 	and.w	r2, r3, #127	; 0x7f
   1a3de:	061e      	lsls	r6, r3, #24
   1a3e0:	eb02 10c0 	add.w	r0, r2, r0, lsl #7
   1a3e4:	d4f7      	bmi.n	1a3d6 <mp_execute_bytecode+0xa66>
                    mp_load_super_method(qst, sp - 1);
   1a3e6:	f1a5 0108 	sub.w	r1, r5, #8
                    sp -= 1;
   1a3ea:	3d04      	subs	r5, #4
                    mp_load_super_method(qst, sp - 1);
   1a3ec:	f7fd f8a0 	bl	17530 <mp_load_super_method>
                    DISPATCH();
   1a3f0:	f7ff bbf7 	b.w	19be2 <mp_execute_bytecode+0x272>
                switch (*ip++) {
   1a3f4:	4634      	mov	r4, r6
   1a3f6:	2100      	movs	r1, #0
                    DECODE_QSTR;
   1a3f8:	f814 3b01 	ldrb.w	r3, [r4], #1
   1a3fc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
   1a400:	061b      	lsls	r3, r3, #24
   1a402:	eb02 11c1 	add.w	r1, r2, r1, lsl #7
   1a406:	d4f7      	bmi.n	1a3f8 <mp_execute_bytecode+0xa88>
                    mp_load_method(*sp, qst, sp);
   1a408:	462a      	mov	r2, r5
   1a40a:	6828      	ldr	r0, [r5, #0]
   1a40c:	f7f2 fb28 	bl	ca60 <mp_load_method>
                    sp += 1;
   1a410:	3504      	adds	r5, #4
                    DISPATCH();
   1a412:	f7ff bbe6 	b.w	19be2 <mp_execute_bytecode+0x272>
                switch (*ip++) {
   1a416:	4634      	mov	r4, r6
   1a418:	2100      	movs	r1, #0
                    DECODE_QSTR;
   1a41a:	f814 3b01 	ldrb.w	r3, [r4], #1
   1a41e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
   1a422:	eb02 11c1 	add.w	r1, r2, r1, lsl #7
   1a426:	061a      	lsls	r2, r3, #24
   1a428:	d4f7      	bmi.n	1a41a <mp_execute_bytecode+0xaaa>
                    SET_TOP(mp_load_attr(TOP(), qst));
   1a42a:	6828      	ldr	r0, [r5, #0]
   1a42c:	f7f2 fa26 	bl	c87c <mp_load_attr>
   1a430:	6028      	str	r0, [r5, #0]
                    DISPATCH();
   1a432:	f7ff bbd6 	b.w	19be2 <mp_execute_bytecode+0x272>
                switch (*ip++) {
   1a436:	4634      	mov	r4, r6
   1a438:	2000      	movs	r0, #0
                    DECODE_QSTR;
   1a43a:	f814 3b01 	ldrb.w	r3, [r4], #1
   1a43e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
   1a442:	0619      	lsls	r1, r3, #24
   1a444:	eb02 10c0 	add.w	r0, r2, r0, lsl #7
   1a448:	d4f7      	bmi.n	1a43a <mp_execute_bytecode+0xaca>
                    PUSH(mp_load_global(qst));
   1a44a:	f7f1 fa05 	bl	b858 <mp_load_global>
   1a44e:	1d2b      	adds	r3, r5, #4
   1a450:	6068      	str	r0, [r5, #4]
   1a452:	461d      	mov	r5, r3
                    DISPATCH();
   1a454:	f7ff bbc5 	b.w	19be2 <mp_execute_bytecode+0x272>
                switch (*ip++) {
   1a458:	4634      	mov	r4, r6
   1a45a:	2000      	movs	r0, #0
                    DECODE_QSTR;
   1a45c:	f814 3b01 	ldrb.w	r3, [r4], #1
   1a460:	f003 027f 	and.w	r2, r3, #127	; 0x7f
   1a464:	061e      	lsls	r6, r3, #24
   1a466:	eb02 10c0 	add.w	r0, r2, r0, lsl #7
   1a46a:	d4f7      	bmi.n	1a45c <mp_execute_bytecode+0xaec>
                    PUSH(mp_load_name(qst));
   1a46c:	f7f1 f9cc 	bl	b808 <mp_load_name>
   1a470:	1d2b      	adds	r3, r5, #4
   1a472:	6068      	str	r0, [r5, #4]
   1a474:	461d      	mov	r5, r3
                    DISPATCH();
   1a476:	f7ff bbb4 	b.w	19be2 <mp_execute_bytecode+0x272>
                switch (*ip++) {
   1a47a:	4634      	mov	r4, r6
   1a47c:	2200      	movs	r2, #0
                    DECODE_UINT;
   1a47e:	f814 3b01 	ldrb.w	r3, [r4], #1
   1a482:	f003 017f 	and.w	r1, r3, #127	; 0x7f
   1a486:	061b      	lsls	r3, r3, #24
   1a488:	eb01 12c2 	add.w	r2, r1, r2, lsl #7
   1a48c:	d4f7      	bmi.n	1a47e <mp_execute_bytecode+0xb0e>
                    obj_shared = mp_obj_cell_get(fastn[-unum]);
   1a48e:	ebc2 7282 	rsb	r2, r2, r2, lsl #30
   1a492:	9b01      	ldr	r3, [sp, #4]
   1a494:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
   1a498:	f7f4 f852 	bl	e540 <mp_obj_cell_get>
                    if (obj_shared == MP_OBJ_NULL) {
   1a49c:	2800      	cmp	r0, #0
   1a49e:	f000 8114 	beq.w	1a6ca <mp_execute_bytecode+0xd5a>
                        PUSH(value); // push the next iteration value
   1a4a2:	6068      	str	r0, [r5, #4]
   1a4a4:	3504      	adds	r5, #4
   1a4a6:	f7ff bb9c 	b.w	19be2 <mp_execute_bytecode+0x272>
                switch (*ip++) {
   1a4aa:	4634      	mov	r4, r6
   1a4ac:	2200      	movs	r2, #0
                    DECODE_UINT;
   1a4ae:	f814 3b01 	ldrb.w	r3, [r4], #1
   1a4b2:	f003 017f 	and.w	r1, r3, #127	; 0x7f
   1a4b6:	eb01 12c2 	add.w	r2, r1, r2, lsl #7
   1a4ba:	0619      	lsls	r1, r3, #24
   1a4bc:	d4f7      	bmi.n	1a4ae <mp_execute_bytecode+0xb3e>
                    obj_shared = fastn[-unum];
   1a4be:	ebc2 7282 	rsb	r2, r2, r2, lsl #30
   1a4c2:	9b01      	ldr	r3, [sp, #4]
   1a4c4:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
   1a4c8:	e7e8      	b.n	1a49c <mp_execute_bytecode+0xb2c>
                    PUSH(MP_OBJ_NULL);
   1a4ca:	2300      	movs	r3, #0
   1a4cc:	606b      	str	r3, [r5, #4]
                switch (*ip++) {
   1a4ce:	4634      	mov	r4, r6
                    PUSH(MP_OBJ_NULL);
   1a4d0:	3504      	adds	r5, #4
                    DISPATCH();
   1a4d2:	f7ff bb86 	b.w	19be2 <mp_execute_bytecode+0x272>
                    DECODE_OBJ;
   1a4d6:	1cf4      	adds	r4, r6, #3
   1a4d8:	f024 0403 	bic.w	r4, r4, #3
                    PUSH(obj);
   1a4dc:	3504      	adds	r5, #4
                    DECODE_OBJ;
   1a4de:	f854 3b04 	ldr.w	r3, [r4], #4
                    PUSH(obj);
   1a4e2:	602b      	str	r3, [r5, #0]
                    DISPATCH();
   1a4e4:	f7ff bb7d 	b.w	19be2 <mp_execute_bytecode+0x272>
                switch (*ip++) {
   1a4e8:	4634      	mov	r4, r6
   1a4ea:	2200      	movs	r2, #0
                    DECODE_QSTR;
   1a4ec:	f814 3b01 	ldrb.w	r3, [r4], #1
   1a4f0:	f003 017f 	and.w	r1, r3, #127	; 0x7f
   1a4f4:	0618      	lsls	r0, r3, #24
   1a4f6:	eb01 12c2 	add.w	r2, r1, r2, lsl #7
   1a4fa:	d4f7      	bmi.n	1a4ec <mp_execute_bytecode+0xb7c>
                    PUSH(MP_OBJ_NEW_QSTR(qst));
   1a4fc:	0093      	lsls	r3, r2, #2
   1a4fe:	f043 0302 	orr.w	r3, r3, #2
   1a502:	606b      	str	r3, [r5, #4]
   1a504:	3504      	adds	r5, #4
                    DISPATCH();
   1a506:	f7ff bb6c 	b.w	19be2 <mp_execute_bytecode+0x272>
                    if ((ip[0] & 0x40) != 0) {
   1a50a:	7862      	ldrb	r2, [r4, #1]
   1a50c:	f342 1280 	sbfx	r2, r2, #6, #1
                        num = (num << 7) | (*ip & 0x7f);
   1a510:	f816 3b01 	ldrb.w	r3, [r6], #1
   1a514:	f003 017f 	and.w	r1, r3, #127	; 0x7f
                    } while ((*ip++ & 0x80) != 0);
   1a518:	061c      	lsls	r4, r3, #24
                        num = (num << 7) | (*ip & 0x7f);
   1a51a:	ea41 12c2 	orr.w	r2, r1, r2, lsl #7
                    } while ((*ip++ & 0x80) != 0);
   1a51e:	d4f7      	bmi.n	1a510 <mp_execute_bytecode+0xba0>
                    PUSH(MP_OBJ_NEW_SMALL_INT(num));
   1a520:	0053      	lsls	r3, r2, #1
   1a522:	f043 0301 	orr.w	r3, r3, #1
   1a526:	606b      	str	r3, [r5, #4]
                    } while ((*ip++ & 0x80) != 0);
   1a528:	4634      	mov	r4, r6
                    PUSH(MP_OBJ_NEW_SMALL_INT(num));
   1a52a:	3504      	adds	r5, #4
                    DISPATCH();
   1a52c:	f7ff bb59 	b.w	19be2 <mp_execute_bytecode+0x272>
                    PUSH(mp_const_true);
   1a530:	4ba6      	ldr	r3, [pc, #664]	; (1a7cc <mp_execute_bytecode+0xe5c>)
   1a532:	606b      	str	r3, [r5, #4]
                switch (*ip++) {
   1a534:	4634      	mov	r4, r6
                    PUSH(mp_const_true);
   1a536:	3504      	adds	r5, #4
                    DISPATCH();
   1a538:	f7ff bb53 	b.w	19be2 <mp_execute_bytecode+0x272>
                    PUSH(mp_const_none);
   1a53c:	4ba4      	ldr	r3, [pc, #656]	; (1a7d0 <mp_execute_bytecode+0xe60>)
   1a53e:	606b      	str	r3, [r5, #4]
                switch (*ip++) {
   1a540:	4634      	mov	r4, r6
                    PUSH(mp_const_none);
   1a542:	3504      	adds	r5, #4
                    DISPATCH();
   1a544:	f7ff bb4d 	b.w	19be2 <mp_execute_bytecode+0x272>
                    PUSH(mp_const_false);
   1a548:	4ba2      	ldr	r3, [pc, #648]	; (1a7d4 <mp_execute_bytecode+0xe64>)
   1a54a:	606b      	str	r3, [r5, #4]
                switch (*ip++) {
   1a54c:	4634      	mov	r4, r6
                    PUSH(mp_const_false);
   1a54e:	3504      	adds	r5, #4
                    DISPATCH();
   1a550:	f7ff bb47 	b.w	19be2 <mp_execute_bytecode+0x272>
                    if (ip[-1] < MP_BC_LOAD_CONST_SMALL_INT_MULTI + 64) {
   1a554:	28af      	cmp	r0, #175	; 0xaf
   1a556:	d825      	bhi.n	1a5a4 <mp_execute_bytecode+0xc34>
                        PUSH(MP_OBJ_NEW_SMALL_INT((mp_int_t)ip[-1] - MP_BC_LOAD_CONST_SMALL_INT_MULTI - 16));
   1a558:	f1a0 0380 	sub.w	r3, r0, #128	; 0x80
   1a55c:	005b      	lsls	r3, r3, #1
   1a55e:	f043 0301 	orr.w	r3, r3, #1
   1a562:	606b      	str	r3, [r5, #4]
                switch (*ip++) {
   1a564:	4634      	mov	r4, r6
                        PUSH(MP_OBJ_NEW_SMALL_INT((mp_int_t)ip[-1] - MP_BC_LOAD_CONST_SMALL_INT_MULTI - 16));
   1a566:	3504      	adds	r5, #4
                        DISPATCH();
   1a568:	f7ff bb3b 	b.w	19be2 <mp_execute_bytecode+0x272>
   1a56c:	f8b3 1001 	ldrh.w	r1, [r3, #1]
                        code_state->sp -= MP_OBJ_ITER_BUF_NSLOTS; // pop the exhausted iterator
   1a570:	f8d8 2008 	ldr.w	r2, [r8, #8]
                        DECODE_ULABEL; // the jump offset if iteration finishes; for labels are always forward
   1a574:	3303      	adds	r3, #3
                        code_state->ip = ip + ulab; // jump to after for-block
   1a576:	440b      	add	r3, r1
                        code_state->sp -= MP_OBJ_ITER_BUF_NSLOTS; // pop the exhausted iterator
   1a578:	3a10      	subs	r2, #16
                        code_state->ip = ip + ulab; // jump to after for-block
   1a57a:	f8c8 3004 	str.w	r3, [r8, #4]
                        code_state->sp -= MP_OBJ_ITER_BUF_NSLOTS; // pop the exhausted iterator
   1a57e:	f8c8 2008 	str.w	r2, [r8, #8]
                        goto outer_dispatch_loop; // continue with dispatch loop
   1a582:	f7ff ba13 	b.w	199ac <mp_execute_bytecode+0x3c>
                    } else if (MP_OBJ_IS_SMALL_INT(TOP())) {
   1a586:	07c3      	lsls	r3, r0, #31
   1a588:	f140 80d0 	bpl.w	1a72c <mp_execute_bytecode+0xdbc>
                        if (cause < 0) {
   1a58c:	1042      	asrs	r2, r0, #1
   1a58e:	d47f      	bmi.n	1a690 <mp_execute_bytecode+0xd20>
                            PUSH((mp_obj_t)cause);
   1a590:	602a      	str	r2, [r5, #0]
                            goto unwind_jump;
   1a592:	e52e      	b.n	19ff2 <mp_execute_bytecode+0x682>
                        mp_obj_dict_store(obj, sp[0], sp[-1]);
   1a594:	f855 2c04 	ldr.w	r2, [r5, #-4]
   1a598:	f855 1908 	ldr.w	r1, [r5], #-8
   1a59c:	f7f4 ff40 	bl	f420 <mp_obj_dict_store>
   1a5a0:	f7ff bb1f 	b.w	19be2 <mp_execute_bytecode+0x272>
                    } else if (ip[-1] < MP_BC_LOAD_FAST_MULTI + 16) {
   1a5a4:	28bf      	cmp	r0, #191	; 0xbf
   1a5a6:	d956      	bls.n	1a656 <mp_execute_bytecode+0xce6>
                    } else if (ip[-1] < MP_BC_STORE_FAST_MULTI + 16) {
   1a5a8:	28cf      	cmp	r0, #207	; 0xcf
   1a5aa:	d87d      	bhi.n	1a6a8 <mp_execute_bytecode+0xd38>
                        fastn[MP_BC_STORE_FAST_MULTI - (mp_int_t)ip[-1]] = POP();
   1a5ac:	f1c0 00c0 	rsb	r0, r0, #192	; 0xc0
   1a5b0:	9a01      	ldr	r2, [sp, #4]
   1a5b2:	682b      	ldr	r3, [r5, #0]
   1a5b4:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
                switch (*ip++) {
   1a5b8:	4634      	mov	r4, r6
   1a5ba:	e5ea      	b.n	1a192 <mp_execute_bytecode+0x822>
                        mp_obj_t data = sp[-1];
   1a5bc:	f855 bc04 	ldr.w	fp, [r5, #-4]
                        sp[0] = mp_const_none;
   1a5c0:	602c      	str	r4, [r5, #0]
                        sp[1] = mp_const_none;
   1a5c2:	606c      	str	r4, [r5, #4]
                        sp[-1] = mp_const_none;
   1a5c4:	f845 4c04 	str.w	r4, [r5, #-4]
                        mp_call_method_n_kw(3, 0, sp - 3);
   1a5c8:	f1a5 020c 	sub.w	r2, r5, #12
   1a5cc:	2100      	movs	r1, #0
   1a5ce:	2003      	movs	r0, #3
   1a5d0:	f7f1 fd6a 	bl	c0a8 <mp_call_method_n_kw>
                switch (*ip++) {
   1a5d4:	4634      	mov	r4, r6
                        sp[-3] = data;
   1a5d6:	f845 bc0c 	str.w	fp, [r5, #-12]
                        sp[-2] = cause;
   1a5da:	f845 ad08 	str.w	sl, [r5, #-8]!
   1a5de:	f7ff bb00 	b.w	19be2 <mp_execute_bytecode+0x272>
                            mp_obj_t *finally_sp = MP_TAGPTR_PTR(exc_sp->val_sp);
   1a5e2:	9b06      	ldr	r3, [sp, #24]
                            ip = exc_sp->handler;
   1a5e4:	9906      	ldr	r1, [sp, #24]
                            mp_obj_t *finally_sp = MP_TAGPTR_PTR(exc_sp->val_sp);
   1a5e6:	685b      	ldr	r3, [r3, #4]
                            exc_sp--;
   1a5e8:	9a06      	ldr	r2, [sp, #24]
                            finally_sp[1] = sp[0];
   1a5ea:	6828      	ldr	r0, [r5, #0]
                            mp_obj_t *finally_sp = MP_TAGPTR_PTR(exc_sp->val_sp);
   1a5ec:	f023 0503 	bic.w	r5, r3, #3
                            exc_sp--;
   1a5f0:	f1a2 030c 	sub.w	r3, r2, #12
                            PUSH(MP_OBJ_NEW_SMALL_INT(-1));
   1a5f4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
                            finally_sp[1] = sp[0];
   1a5f8:	6068      	str	r0, [r5, #4]
                            PUSH(MP_OBJ_NEW_SMALL_INT(-1));
   1a5fa:	60aa      	str	r2, [r5, #8]
                            ip = exc_sp->handler;
   1a5fc:	680c      	ldr	r4, [r1, #0]
                            exc_sp--;
   1a5fe:	9306      	str	r3, [sp, #24]
                            PUSH(MP_OBJ_NEW_SMALL_INT(-1));
   1a600:	3508      	adds	r5, #8
                            goto dispatch_loop;
   1a602:	f7ff ba81 	b.w	19b08 <mp_execute_bytecode+0x198>
                        sp--;
   1a606:	3d04      	subs	r5, #4
                        obj = TOP();
   1a608:	6828      	ldr	r0, [r5, #0]
   1a60a:	f7ff b9e4 	b.w	199d6 <mp_execute_bytecode+0x66>
                        assert(ret_kind == MP_VM_RETURN_EXCEPTION);
   1a60e:	2802      	cmp	r0, #2
   1a610:	f040 80b9 	bne.w	1a786 <mp_execute_bytecode+0xe16>
                        if (EXC_MATCH(ret_value, MP_OBJ_FROM_PTR(&mp_type_StopIteration))) {
   1a614:	4970      	ldr	r1, [pc, #448]	; (1a7d8 <mp_execute_bytecode+0xe68>)
   1a616:	9807      	ldr	r0, [sp, #28]
   1a618:	f7f5 fa0e 	bl	fa38 <mp_obj_exception_match>
   1a61c:	2800      	cmp	r0, #0
   1a61e:	d07f      	beq.n	1a720 <mp_execute_bytecode+0xdb0>
                            PUSH(mp_obj_exception_get_value(ret_value));
   1a620:	9807      	ldr	r0, [sp, #28]
   1a622:	f7f5 f839 	bl	f698 <mp_obj_exception_get_value>
   1a626:	f845 0c04 	str.w	r0, [r5, #-4]
                            GENERATOR_EXIT_IF_NEEDED(t_exc);
   1a62a:	f1ba 0f00 	cmp.w	sl, #0
   1a62e:	f47f ab7b 	bne.w	19d28 <mp_execute_bytecode+0x3b8>
   1a632:	f7ff bb80 	b.w	19d36 <mp_execute_bytecode+0x3c6>
                        sp -= MP_OBJ_ITER_BUF_NSLOTS;
   1a636:	3d18      	subs	r5, #24
   1a638:	f7ff bad3 	b.w	19be2 <mp_execute_bytecode+0x272>
                        *code_state->sp = mp_obj_exception_get_value(MP_OBJ_FROM_PTR(nlr.ret_val));
   1a63c:	9809      	ldr	r0, [sp, #36]	; 0x24
   1a63e:	f8d8 4008 	ldr.w	r4, [r8, #8]
   1a642:	f7f5 f829 	bl	f698 <mp_obj_exception_get_value>
   1a646:	6020      	str	r0, [r4, #0]
                        code_state->ip++; // yield from is over, move to next instruction
   1a648:	f8d8 3004 	ldr.w	r3, [r8, #4]
   1a64c:	3301      	adds	r3, #1
   1a64e:	f8c8 3004 	str.w	r3, [r8, #4]
                        goto outer_dispatch_loop; // continue with dispatch loop
   1a652:	f7ff b9ab 	b.w	199ac <mp_execute_bytecode+0x3c>
                        obj_shared = fastn[MP_BC_LOAD_FAST_MULTI - (mp_int_t)ip[-1]];
   1a656:	f1c0 00b0 	rsb	r0, r0, #176	; 0xb0
   1a65a:	9b01      	ldr	r3, [sp, #4]
                switch (*ip++) {
   1a65c:	4634      	mov	r4, r6
                        obj_shared = fastn[MP_BC_LOAD_FAST_MULTI - (mp_int_t)ip[-1]];
   1a65e:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
                        goto load_check;
   1a662:	e71b      	b.n	1a49c <mp_execute_bytecode+0xb2c>
                            sp[0] = sp[3];
   1a664:	686b      	ldr	r3, [r5, #4]
   1a666:	f845 3c08 	str.w	r3, [r5, #-8]
                switch (*ip++) {
   1a66a:	4634      	mov	r4, r6
                        sp -= 2;
   1a66c:	4655      	mov	r5, sl
   1a66e:	f7ff bab8 	b.w	19be2 <mp_execute_bytecode+0x272>
                    sp += MP_OBJ_ITER_BUF_NSLOTS - 1;
   1a672:	4655      	mov	r5, sl
                switch (*ip++) {
   1a674:	4634      	mov	r4, r6
   1a676:	f7ff bab4 	b.w	19be2 <mp_execute_bytecode+0x272>
                        obj = sp[-MP_OBJ_ITER_BUF_NSLOTS + 2];
   1a67a:	f855 0c08 	ldr.w	r0, [r5, #-8]
   1a67e:	e4f3      	b.n	1a068 <mp_execute_bytecode+0x6f8>
                        ret_kind = mp_resume(TOP(), send_value, MP_OBJ_NULL, &ret_value);
   1a680:	ab07      	add	r3, sp, #28
   1a682:	f855 0c04 	ldr.w	r0, [r5, #-4]
                    mp_obj_t t_exc = MP_OBJ_NULL;
   1a686:	4692      	mov	sl, r2
                        ret_kind = mp_resume(TOP(), send_value, MP_OBJ_NULL, &ret_value);
   1a688:	f7f2 fb2e 	bl	cce8 <mp_resume>
   1a68c:	f7ff bb3c 	b.w	19d08 <mp_execute_bytecode+0x398>
                        mp_int_t cause = MP_OBJ_SMALL_INT_VALUE(POP());
   1a690:	3d04      	subs	r5, #4
   1a692:	f7ff bbec 	b.w	19e6e <mp_execute_bytecode+0x4fe>
                fastn[0] = MP_OBJ_FROM_PTR(nlr.ret_val); // must put exception here because sp is invalid
   1a696:	9b02      	ldr	r3, [sp, #8]
   1a698:	eb08 0883 	add.w	r8, r8, r3, lsl #2
   1a69c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1a69e:	f8c8 3014 	str.w	r3, [r8, #20]
                return MP_VM_RETURN_EXCEPTION;
   1a6a2:	2002      	movs	r0, #2
   1a6a4:	f7ff babb 	b.w	19c1e <mp_execute_bytecode+0x2ae>
                    } else if (ip[-1] < MP_BC_UNARY_OP_MULTI + 7) {
   1a6a8:	28d6      	cmp	r0, #214	; 0xd6
   1a6aa:	d92a      	bls.n	1a702 <mp_execute_bytecode+0xd92>
                    } else if (ip[-1] < MP_BC_BINARY_OP_MULTI + 36) {
   1a6ac:	28fa      	cmp	r0, #250	; 0xfa
   1a6ae:	d85b      	bhi.n	1a768 <mp_execute_bytecode+0xdf8>
                        SET_TOP(mp_binary_op(ip[-1] - MP_BC_BINARY_OP_MULTI, lhs, rhs));
   1a6b0:	682a      	ldr	r2, [r5, #0]
   1a6b2:	f855 1c04 	ldr.w	r1, [r5, #-4]
   1a6b6:	38d7      	subs	r0, #215	; 0xd7
   1a6b8:	f7f1 fa40 	bl	bb3c <mp_binary_op>
                        mp_obj_t rhs = POP();
   1a6bc:	1f2b      	subs	r3, r5, #4
                        SET_TOP(mp_binary_op(ip[-1] - MP_BC_BINARY_OP_MULTI, lhs, rhs));
   1a6be:	f845 0c04 	str.w	r0, [r5, #-4]
                switch (*ip++) {
   1a6c2:	4634      	mov	r4, r6
                        mp_obj_t rhs = POP();
   1a6c4:	461d      	mov	r5, r3
                        DISPATCH();
   1a6c6:	f7ff ba8c 	b.w	19be2 <mp_execute_bytecode+0x272>
                            mp_obj_t obj = mp_obj_new_exception_msg(&mp_type_NameError, "local variable referenced before assignment");
   1a6ca:	4944      	ldr	r1, [pc, #272]	; (1a7dc <mp_execute_bytecode+0xe6c>)
   1a6cc:	4844      	ldr	r0, [pc, #272]	; (1a7e0 <mp_execute_bytecode+0xe70>)
   1a6ce:	f7ff bbb4 	b.w	19e3a <mp_execute_bytecode+0x4ca>
                assert(exc_sp >= exc_stack);
   1a6d2:	4b44      	ldr	r3, [pc, #272]	; (1a7e4 <mp_execute_bytecode+0xe74>)
   1a6d4:	4a44      	ldr	r2, [pc, #272]	; (1a7e8 <mp_execute_bytecode+0xe78>)
   1a6d6:	4845      	ldr	r0, [pc, #276]	; (1a7ec <mp_execute_bytecode+0xe7c>)
   1a6d8:	f240 5199 	movw	r1, #1433	; 0x599
   1a6dc:	f000 fff8 	bl	1b6d0 <__assert_func>
                        sp -= 2;
   1a6e0:	f1a5 0b08 	sub.w	fp, r5, #8
                        sp[1] = mp_const_none;
   1a6e4:	f8c5 a004 	str.w	sl, [r5, #4]
                        sp[2] = mp_const_none;
   1a6e8:	f8c5 a008 	str.w	sl, [r5, #8]
                        mp_call_method_n_kw(3, 0, sp);
   1a6ec:	465a      	mov	r2, fp
   1a6ee:	2100      	movs	r1, #0
   1a6f0:	2003      	movs	r0, #3
   1a6f2:	f7f1 fcd9 	bl	c0a8 <mp_call_method_n_kw>
                switch (*ip++) {
   1a6f6:	4634      	mov	r4, r6
                        SET_TOP(mp_const_none);
   1a6f8:	f845 ac08 	str.w	sl, [r5, #-8]
                        sp -= 2;
   1a6fc:	465d      	mov	r5, fp
   1a6fe:	f7ff ba70 	b.w	19be2 <mp_execute_bytecode+0x272>
                        SET_TOP(mp_unary_op(ip[-1] - MP_BC_UNARY_OP_MULTI, TOP()));
   1a702:	38d0      	subs	r0, #208	; 0xd0
   1a704:	6829      	ldr	r1, [r5, #0]
   1a706:	f7f1 f933 	bl	b970 <mp_unary_op>
                switch (*ip++) {
   1a70a:	4634      	mov	r4, r6
                        SET_TOP(mp_unary_op(ip[-1] - MP_BC_UNARY_OP_MULTI, TOP()));
   1a70c:	6028      	str	r0, [r5, #0]
                        DISPATCH();
   1a70e:	f7ff ba68 	b.w	19be2 <mp_execute_bytecode+0x272>
                        assert(exc_sp >= exc_stack);
   1a712:	4b34      	ldr	r3, [pc, #208]	; (1a7e4 <mp_execute_bytecode+0xe74>)
   1a714:	4a34      	ldr	r2, [pc, #208]	; (1a7e8 <mp_execute_bytecode+0xe78>)
   1a716:	4835      	ldr	r0, [pc, #212]	; (1a7ec <mp_execute_bytecode+0xe7c>)
   1a718:	f44f 7124 	mov.w	r1, #656	; 0x290
   1a71c:	f000 ffd8 	bl	1b6d0 <__assert_func>
                            RAISE(ret_value);
   1a720:	f7e5 fdba 	bl	298 <nlr_pop>
   1a724:	9807      	ldr	r0, [sp, #28]
   1a726:	9009      	str	r0, [sp, #36]	; 0x24
   1a728:	f7ff b95c 	b.w	199e4 <mp_execute_bytecode+0x74>
                        assert(mp_obj_is_exception_instance(TOP()));
   1a72c:	f7f5 f974 	bl	fa18 <mp_obj_is_exception_instance>
   1a730:	b160      	cbz	r0, 1a74c <mp_execute_bytecode+0xddc>
                        RAISE(TOP());
   1a732:	f7e5 fdb1 	bl	298 <nlr_pop>
   1a736:	6828      	ldr	r0, [r5, #0]
   1a738:	9009      	str	r0, [sp, #36]	; 0x24
   1a73a:	f7ff b953 	b.w	199e4 <mp_execute_bytecode+0x74>
                    assert(currently_in_except_block);
   1a73e:	4b2c      	ldr	r3, [pc, #176]	; (1a7f0 <mp_execute_bytecode+0xe80>)
   1a740:	4a29      	ldr	r2, [pc, #164]	; (1a7e8 <mp_execute_bytecode+0xe78>)
   1a742:	482a      	ldr	r0, [pc, #168]	; (1a7ec <mp_execute_bytecode+0xe7c>)
   1a744:	f240 3106 	movw	r1, #774	; 0x306
   1a748:	f000 ffc2 	bl	1b6d0 <__assert_func>
                        assert(mp_obj_is_exception_instance(TOP()));
   1a74c:	4b29      	ldr	r3, [pc, #164]	; (1a7f4 <mp_execute_bytecode+0xe84>)
   1a74e:	4a26      	ldr	r2, [pc, #152]	; (1a7e8 <mp_execute_bytecode+0xe78>)
   1a750:	4826      	ldr	r0, [pc, #152]	; (1a7ec <mp_execute_bytecode+0xe7c>)
   1a752:	f44f 7133 	mov.w	r1, #716	; 0x2cc
   1a756:	f000 ffbb 	bl	1b6d0 <__assert_func>
                            assert(exc_sp >= exc_stack);
   1a75a:	4b22      	ldr	r3, [pc, #136]	; (1a7e4 <mp_execute_bytecode+0xe74>)
   1a75c:	4a22      	ldr	r2, [pc, #136]	; (1a7e8 <mp_execute_bytecode+0xe78>)
   1a75e:	4823      	ldr	r0, [pc, #140]	; (1a7ec <mp_execute_bytecode+0xe7c>)
   1a760:	f44f 711f 	mov.w	r1, #636	; 0x27c
   1a764:	f000 ffb4 	bl	1b6d0 <__assert_func>
                    mp_obj_t obj = mp_obj_new_exception_msg(&mp_type_NotImplementedError, "byte code not implemented");
   1a768:	4923      	ldr	r1, [pc, #140]	; (1a7f8 <mp_execute_bytecode+0xe88>)
   1a76a:	4824      	ldr	r0, [pc, #144]	; (1a7fc <mp_execute_bytecode+0xe8c>)
   1a76c:	f7f5 f82e 	bl	f7cc <mp_obj_new_exception_msg>
   1a770:	4604      	mov	r4, r0
                    nlr_pop();
   1a772:	f7e5 fd91 	bl	298 <nlr_pop>
                    fastn[0] = obj;
   1a776:	9b02      	ldr	r3, [sp, #8]
   1a778:	eb08 0883 	add.w	r8, r8, r3, lsl #2
                    return MP_VM_RETURN_EXCEPTION;
   1a77c:	2002      	movs	r0, #2
                    fastn[0] = obj;
   1a77e:	f8c8 4014 	str.w	r4, [r8, #20]
                    return MP_VM_RETURN_EXCEPTION;
   1a782:	f7ff ba4c 	b.w	19c1e <mp_execute_bytecode+0x2ae>
                        assert(ret_kind == MP_VM_RETURN_EXCEPTION);
   1a786:	4b1e      	ldr	r3, [pc, #120]	; (1a800 <mp_execute_bytecode+0xe90>)
   1a788:	4a17      	ldr	r2, [pc, #92]	; (1a7e8 <mp_execute_bytecode+0xe78>)
   1a78a:	4818      	ldr	r0, [pc, #96]	; (1a7ec <mp_execute_bytecode+0xe7c>)
   1a78c:	f240 41ae 	movw	r1, #1198	; 0x4ae
   1a790:	f000 ff9e 	bl	1b6d0 <__assert_func>
                    assert(exc_sp == exc_stack - 1);
   1a794:	4b1b      	ldr	r3, [pc, #108]	; (1a804 <mp_execute_bytecode+0xe94>)
   1a796:	4a14      	ldr	r2, [pc, #80]	; (1a7e8 <mp_execute_bytecode+0xe78>)
   1a798:	4814      	ldr	r0, [pc, #80]	; (1a7ec <mp_execute_bytecode+0xe7c>)
   1a79a:	f240 414e 	movw	r1, #1102	; 0x44e
   1a79e:	f000 ff97 	bl	1b6d0 <__assert_func>
                        assert(mp_obj_is_exception_instance(TOP()));
   1a7a2:	4b14      	ldr	r3, [pc, #80]	; (1a7f4 <mp_execute_bytecode+0xe84>)
   1a7a4:	4a10      	ldr	r2, [pc, #64]	; (1a7e8 <mp_execute_bytecode+0xe78>)
   1a7a6:	4811      	ldr	r0, [pc, #68]	; (1a7ec <mp_execute_bytecode+0xe7c>)
   1a7a8:	f240 216e 	movw	r1, #622	; 0x26e
   1a7ac:	f000 ff90 	bl	1b6d0 <__assert_func>
                            GENERATOR_EXIT_IF_NEEDED(t_exc);
   1a7b0:	f7e5 fd72 	bl	298 <nlr_pop>
   1a7b4:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
   1a7b8:	4650      	mov	r0, sl
   1a7ba:	f7ff b913 	b.w	199e4 <mp_execute_bytecode+0x74>
                    assert(exc_sp >= exc_stack);
   1a7be:	4b09      	ldr	r3, [pc, #36]	; (1a7e4 <mp_execute_bytecode+0xe74>)
   1a7c0:	4a09      	ldr	r2, [pc, #36]	; (1a7e8 <mp_execute_bytecode+0xe78>)
   1a7c2:	480a      	ldr	r0, [pc, #40]	; (1a7ec <mp_execute_bytecode+0xe7c>)
   1a7c4:	f240 3105 	movw	r1, #773	; 0x305
   1a7c8:	f000 ff82 	bl	1b6d0 <__assert_func>
   1a7cc:	00021b78 	.word	0x00021b78
   1a7d0:	0002345c 	.word	0x0002345c
   1a7d4:	00021b70 	.word	0x00021b70
   1a7d8:	00022260 	.word	0x00022260
   1a7dc:	00024b68 	.word	0x00024b68
   1a7e0:	00022530 	.word	0x00022530
   1a7e4:	00024bc8 	.word	0x00024bc8
   1a7e8:	00024b54 	.word	0x00024b54
   1a7ec:	00024bb8 	.word	0x00024bb8
   1a7f0:	00024bdc 	.word	0x00024bdc
   1a7f4:	00024b94 	.word	0x00024b94
   1a7f8:	00024c34 	.word	0x00024c34
   1a7fc:	000225e4 	.word	0x000225e4
   1a800:	00024c10 	.word	0x00024c10
   1a804:	00024bf8 	.word	0x00024bf8

0001a808 <mp_decode_uint>:
#else // don't print debugging info
#define DEBUG_PRINT (0)
#define DEBUG_printf(...) (void)0
#endif

mp_uint_t mp_decode_uint(const byte **ptr) {
   1a808:	b480      	push	{r7}
   1a80a:	b087      	sub	sp, #28
   1a80c:	af00      	add	r7, sp, #0
   1a80e:	6078      	str	r0, [r7, #4]
    mp_uint_t unum = 0;
   1a810:	2300      	movs	r3, #0
   1a812:	617b      	str	r3, [r7, #20]
    byte val;
    const byte *p = *ptr;
   1a814:	687b      	ldr	r3, [r7, #4]
   1a816:	681b      	ldr	r3, [r3, #0]
   1a818:	613b      	str	r3, [r7, #16]
    do {
        val = *p++;
   1a81a:	693b      	ldr	r3, [r7, #16]
   1a81c:	1c5a      	adds	r2, r3, #1
   1a81e:	613a      	str	r2, [r7, #16]
   1a820:	781b      	ldrb	r3, [r3, #0]
   1a822:	73fb      	strb	r3, [r7, #15]
        unum = (unum << 7) | (val & 0x7f);
   1a824:	697b      	ldr	r3, [r7, #20]
   1a826:	01da      	lsls	r2, r3, #7
   1a828:	7bfb      	ldrb	r3, [r7, #15]
   1a82a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1a82e:	4313      	orrs	r3, r2
   1a830:	617b      	str	r3, [r7, #20]
    } while ((val & 0x80) != 0);
   1a832:	f997 300f 	ldrsb.w	r3, [r7, #15]
   1a836:	2b00      	cmp	r3, #0
   1a838:	dbef      	blt.n	1a81a <mp_decode_uint+0x12>
    *ptr = p;
   1a83a:	687b      	ldr	r3, [r7, #4]
   1a83c:	693a      	ldr	r2, [r7, #16]
   1a83e:	601a      	str	r2, [r3, #0]
    return unum;
   1a840:	697b      	ldr	r3, [r7, #20]
}
   1a842:	4618      	mov	r0, r3
   1a844:	371c      	adds	r7, #28
   1a846:	46bd      	mov	sp, r7
   1a848:	f85d 7b04 	ldr.w	r7, [sp], #4
   1a84c:	4770      	bx	lr
   1a84e:	bf00      	nop

0001a850 <mp_decode_uint_value>:
// the caller doesn't need to increase the ptr argument.  If ptr is a local variable
// and the caller uses mp_decode_uint(&ptr) instead of this function, then the compiler
// must allocate a slot on the stack for ptr, and this slot cannot be reused for
// anything else in the function because the pointer may have been stored in a global
// and reused later in the function.
mp_uint_t mp_decode_uint_value(const byte *ptr) {
   1a850:	b580      	push	{r7, lr}
   1a852:	b082      	sub	sp, #8
   1a854:	af00      	add	r7, sp, #0
   1a856:	6078      	str	r0, [r7, #4]
    return mp_decode_uint(&ptr);
   1a858:	1d3b      	adds	r3, r7, #4
   1a85a:	4618      	mov	r0, r3
   1a85c:	f7ff ffd4 	bl	1a808 <mp_decode_uint>
   1a860:	4603      	mov	r3, r0
}
   1a862:	4618      	mov	r0, r3
   1a864:	3708      	adds	r7, #8
   1a866:	46bd      	mov	sp, r7
   1a868:	bd80      	pop	{r7, pc}
   1a86a:	bf00      	nop

0001a86c <mp_decode_uint_skip>:

// This function is used to help reduce stack usage at the caller, for the case when
// the caller doesn't need the actual value and just wants to skip over it.
const byte *mp_decode_uint_skip(const byte *ptr) {
   1a86c:	b480      	push	{r7}
   1a86e:	b083      	sub	sp, #12
   1a870:	af00      	add	r7, sp, #0
   1a872:	6078      	str	r0, [r7, #4]
    while ((*ptr++) & 0x80) {
   1a874:	bf00      	nop
   1a876:	687b      	ldr	r3, [r7, #4]
   1a878:	1c5a      	adds	r2, r3, #1
   1a87a:	607a      	str	r2, [r7, #4]
   1a87c:	781b      	ldrb	r3, [r3, #0]
   1a87e:	b25b      	sxtb	r3, r3
   1a880:	2b00      	cmp	r3, #0
   1a882:	dbf8      	blt.n	1a876 <mp_decode_uint_skip+0xa>
    }
    return ptr;
   1a884:	687b      	ldr	r3, [r7, #4]
}
   1a886:	4618      	mov	r0, r3
   1a888:	370c      	adds	r7, #12
   1a88a:	46bd      	mov	sp, r7
   1a88c:	f85d 7b04 	ldr.w	r7, [sp], #4
   1a890:	4770      	bx	lr
   1a892:	bf00      	nop

0001a894 <fun_pos_args_mismatch>:

STATIC NORETURN void fun_pos_args_mismatch(mp_obj_fun_bc_t *f, size_t expected, size_t given) {
   1a894:	b580      	push	{r7, lr}
   1a896:	b084      	sub	sp, #16
   1a898:	af00      	add	r7, sp, #0
   1a89a:	60f8      	str	r0, [r7, #12]
   1a89c:	60b9      	str	r1, [r7, #8]
   1a89e:	607a      	str	r2, [r7, #4]
#if MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE
    // generic message, used also for other argument issues
    (void)f;
    (void)expected;
    (void)given;
    mp_arg_error_terse_mismatch();
   1a8a0:	f7f2 fe0e 	bl	d4c0 <mp_arg_error_terse_mismatch>

0001a8a4 <mp_setup_code_state>:
// On entry code_state should be allocated somewhere (stack/heap) and
// contain the following valid entries:
//    - code_state->fun_bc should contain a pointer to the function object
//    - code_state->ip should contain the offset in bytes from the pointer
//      code_state->fun_bc->bytecode to the entry n_state (0 for bytecode, non-zero for native)
void mp_setup_code_state(mp_code_state_t *code_state, size_t n_args, size_t n_kw, const mp_obj_t *args) {
   1a8a4:	b590      	push	{r4, r7, lr}
   1a8a6:	b09b      	sub	sp, #108	; 0x6c
   1a8a8:	af00      	add	r7, sp, #0
   1a8aa:	60f8      	str	r0, [r7, #12]
   1a8ac:	60b9      	str	r1, [r7, #8]
   1a8ae:	607a      	str	r2, [r7, #4]
   1a8b0:	603b      	str	r3, [r7, #0]
    // This function is pretty complicated.  It's main aim is to be efficient in speed and RAM
    // usage for the common case of positional only args.

    // get the function object that we want to set up (could be bytecode or native code)
    mp_obj_fun_bc_t *self = code_state->fun_bc;
   1a8b2:	68fb      	ldr	r3, [r7, #12]
   1a8b4:	681b      	ldr	r3, [r3, #0]
   1a8b6:	637b      	str	r3, [r7, #52]	; 0x34

    // ip comes in as an offset into bytecode, so turn it into a true pointer
    code_state->ip = self->bytecode + (size_t)code_state->ip;
   1a8b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1a8ba:	689b      	ldr	r3, [r3, #8]
   1a8bc:	68fa      	ldr	r2, [r7, #12]
   1a8be:	6852      	ldr	r2, [r2, #4]
   1a8c0:	441a      	add	r2, r3
   1a8c2:	68fb      	ldr	r3, [r7, #12]
   1a8c4:	605a      	str	r2, [r3, #4]
    #if MICROPY_STACKLESS
    code_state->prev = NULL;
    #endif

    // get params
    size_t n_state = mp_decode_uint(&code_state->ip);
   1a8c6:	68fb      	ldr	r3, [r7, #12]
   1a8c8:	3304      	adds	r3, #4
   1a8ca:	4618      	mov	r0, r3
   1a8cc:	f7ff ff9c 	bl	1a808 <mp_decode_uint>
   1a8d0:	6338      	str	r0, [r7, #48]	; 0x30
    code_state->ip = mp_decode_uint_skip(code_state->ip); // skip n_exc_stack
   1a8d2:	68fb      	ldr	r3, [r7, #12]
   1a8d4:	685b      	ldr	r3, [r3, #4]
   1a8d6:	4618      	mov	r0, r3
   1a8d8:	f7ff ffc8 	bl	1a86c <mp_decode_uint_skip>
   1a8dc:	4602      	mov	r2, r0
   1a8de:	68fb      	ldr	r3, [r7, #12]
   1a8e0:	605a      	str	r2, [r3, #4]
    size_t scope_flags = *code_state->ip++;
   1a8e2:	68fb      	ldr	r3, [r7, #12]
   1a8e4:	685b      	ldr	r3, [r3, #4]
   1a8e6:	1c59      	adds	r1, r3, #1
   1a8e8:	68fa      	ldr	r2, [r7, #12]
   1a8ea:	6051      	str	r1, [r2, #4]
   1a8ec:	781b      	ldrb	r3, [r3, #0]
   1a8ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    size_t n_pos_args = *code_state->ip++;
   1a8f0:	68fb      	ldr	r3, [r7, #12]
   1a8f2:	685b      	ldr	r3, [r3, #4]
   1a8f4:	1c59      	adds	r1, r3, #1
   1a8f6:	68fa      	ldr	r2, [r7, #12]
   1a8f8:	6051      	str	r1, [r2, #4]
   1a8fa:	781b      	ldrb	r3, [r3, #0]
   1a8fc:	62bb      	str	r3, [r7, #40]	; 0x28
    size_t n_kwonly_args = *code_state->ip++;
   1a8fe:	68fb      	ldr	r3, [r7, #12]
   1a900:	685b      	ldr	r3, [r3, #4]
   1a902:	1c59      	adds	r1, r3, #1
   1a904:	68fa      	ldr	r2, [r7, #12]
   1a906:	6051      	str	r1, [r2, #4]
   1a908:	781b      	ldrb	r3, [r3, #0]
   1a90a:	627b      	str	r3, [r7, #36]	; 0x24
    size_t n_def_pos_args = *code_state->ip++;
   1a90c:	68fb      	ldr	r3, [r7, #12]
   1a90e:	685b      	ldr	r3, [r3, #4]
   1a910:	1c59      	adds	r1, r3, #1
   1a912:	68fa      	ldr	r2, [r7, #12]
   1a914:	6051      	str	r1, [r2, #4]
   1a916:	781b      	ldrb	r3, [r3, #0]
   1a918:	623b      	str	r3, [r7, #32]

    code_state->sp = &code_state->state[0] - 1;
   1a91a:	68fb      	ldr	r3, [r7, #12]
   1a91c:	3314      	adds	r3, #20
   1a91e:	1f1a      	subs	r2, r3, #4
   1a920:	68fb      	ldr	r3, [r7, #12]
   1a922:	609a      	str	r2, [r3, #8]
    code_state->exc_sp = (mp_exc_stack_t*)(code_state->state + n_state) - 1;
   1a924:	68fb      	ldr	r3, [r7, #12]
   1a926:	f103 0214 	add.w	r2, r3, #20
   1a92a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1a92c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1a930:	3b03      	subs	r3, #3
   1a932:	009b      	lsls	r3, r3, #2
   1a934:	441a      	add	r2, r3
   1a936:	68fb      	ldr	r3, [r7, #12]
   1a938:	60da      	str	r2, [r3, #12]

    // zero out the local stack to begin with
    memset(code_state->state, 0, n_state * sizeof(*code_state->state));
   1a93a:	68fb      	ldr	r3, [r7, #12]
   1a93c:	f103 0014 	add.w	r0, r3, #20
   1a940:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1a942:	009b      	lsls	r3, r3, #2
   1a944:	461a      	mov	r2, r3
   1a946:	2100      	movs	r1, #0
   1a948:	f002 fa32 	bl	1cdb0 <memset>

    const mp_obj_t *kwargs = args + n_args;
   1a94c:	68bb      	ldr	r3, [r7, #8]
   1a94e:	009b      	lsls	r3, r3, #2
   1a950:	683a      	ldr	r2, [r7, #0]
   1a952:	4413      	add	r3, r2
   1a954:	61fb      	str	r3, [r7, #28]

    // var_pos_kw_args points to the stack where the var-args tuple, and var-kw dict, should go (if they are needed)
    mp_obj_t *var_pos_kw_args = &code_state->state[n_state - 1 - n_pos_args - n_kwonly_args];
   1a956:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   1a958:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1a95a:	1ad2      	subs	r2, r2, r3
   1a95c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1a95e:	1ad3      	subs	r3, r2, r3
   1a960:	3b01      	subs	r3, #1
   1a962:	3304      	adds	r3, #4
   1a964:	009b      	lsls	r3, r3, #2
   1a966:	68fa      	ldr	r2, [r7, #12]
   1a968:	4413      	add	r3, r2
   1a96a:	3304      	adds	r3, #4
   1a96c:	667b      	str	r3, [r7, #100]	; 0x64

    // check positional arguments

    if (n_args > n_pos_args) {
   1a96e:	68ba      	ldr	r2, [r7, #8]
   1a970:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1a972:	429a      	cmp	r2, r3
   1a974:	d91b      	bls.n	1a9ae <mp_setup_code_state+0x10a>
        // given more than enough arguments
        if ((scope_flags & MP_SCOPE_FLAG_VARARGS) == 0) {
   1a976:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1a978:	f003 0301 	and.w	r3, r3, #1
   1a97c:	2b00      	cmp	r3, #0
   1a97e:	d104      	bne.n	1a98a <mp_setup_code_state+0xe6>
            fun_pos_args_mismatch(self, n_pos_args, n_args);
   1a980:	68ba      	ldr	r2, [r7, #8]
   1a982:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   1a984:	6b78      	ldr	r0, [r7, #52]	; 0x34
   1a986:	f7ff ff85 	bl	1a894 <fun_pos_args_mismatch>
        }
        // put extra arguments in varargs tuple
        *var_pos_kw_args-- = mp_obj_new_tuple(n_args - n_pos_args, args + n_pos_args);
   1a98a:	6e7c      	ldr	r4, [r7, #100]	; 0x64
   1a98c:	1f23      	subs	r3, r4, #4
   1a98e:	667b      	str	r3, [r7, #100]	; 0x64
   1a990:	68ba      	ldr	r2, [r7, #8]
   1a992:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1a994:	1ad0      	subs	r0, r2, r3
   1a996:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1a998:	009b      	lsls	r3, r3, #2
   1a99a:	683a      	ldr	r2, [r7, #0]
   1a99c:	4413      	add	r3, r2
   1a99e:	4619      	mov	r1, r3
   1a9a0:	f7fb fb64 	bl	1606c <mp_obj_new_tuple>
   1a9a4:	4603      	mov	r3, r0
   1a9a6:	6023      	str	r3, [r4, #0]
        n_args = n_pos_args;
   1a9a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1a9aa:	60bb      	str	r3, [r7, #8]
   1a9ac:	e03c      	b.n	1aa28 <mp_setup_code_state+0x184>
    } else {
        if ((scope_flags & MP_SCOPE_FLAG_VARARGS) != 0) {
   1a9ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1a9b0:	f003 0301 	and.w	r3, r3, #1
   1a9b4:	2b00      	cmp	r3, #0
   1a9b6:	d004      	beq.n	1a9c2 <mp_setup_code_state+0x11e>
            DEBUG_printf("passing empty tuple as *args\n");
            *var_pos_kw_args-- = mp_const_empty_tuple;
   1a9b8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   1a9ba:	1f1a      	subs	r2, r3, #4
   1a9bc:	667a      	str	r2, [r7, #100]	; 0x64
   1a9be:	4aa6      	ldr	r2, [pc, #664]	; (1ac58 <mp_setup_code_state+0x3b4>)
   1a9c0:	601a      	str	r2, [r3, #0]
        }
        // Apply processing and check below only if we don't have kwargs,
        // otherwise, kw handling code below has own extensive checks.
        if (n_kw == 0 && (scope_flags & MP_SCOPE_FLAG_DEFKWARGS) == 0) {
   1a9c2:	687b      	ldr	r3, [r7, #4]
   1a9c4:	2b00      	cmp	r3, #0
   1a9c6:	d12f      	bne.n	1aa28 <mp_setup_code_state+0x184>
   1a9c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1a9ca:	f003 0308 	and.w	r3, r3, #8
   1a9ce:	2b00      	cmp	r3, #0
   1a9d0:	d12a      	bne.n	1aa28 <mp_setup_code_state+0x184>
            if (n_args >= (size_t)(n_pos_args - n_def_pos_args)) {
   1a9d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1a9d4:	6a3b      	ldr	r3, [r7, #32]
   1a9d6:	1ad2      	subs	r2, r2, r3
   1a9d8:	68bb      	ldr	r3, [r7, #8]
   1a9da:	429a      	cmp	r2, r3
   1a9dc:	d81c      	bhi.n	1aa18 <mp_setup_code_state+0x174>
                // given enough arguments, but may need to use some default arguments
                for (size_t i = n_args; i < n_pos_args; i++) {
   1a9de:	68bb      	ldr	r3, [r7, #8]
   1a9e0:	663b      	str	r3, [r7, #96]	; 0x60
   1a9e2:	e014      	b.n	1aa0e <mp_setup_code_state+0x16a>
                    code_state->state[n_state - 1 - i] = self->extra_args[i - (n_pos_args - n_def_pos_args)];
   1a9e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   1a9e6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   1a9e8:	1ad3      	subs	r3, r2, r3
   1a9ea:	3b01      	subs	r3, #1
   1a9ec:	6a39      	ldr	r1, [r7, #32]
   1a9ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1a9f0:	1a89      	subs	r1, r1, r2
   1a9f2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
   1a9f4:	4411      	add	r1, r2
   1a9f6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   1a9f8:	3104      	adds	r1, #4
   1a9fa:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
   1a9fe:	68f9      	ldr	r1, [r7, #12]
   1aa00:	3304      	adds	r3, #4
   1aa02:	009b      	lsls	r3, r3, #2
   1aa04:	440b      	add	r3, r1
   1aa06:	605a      	str	r2, [r3, #4]
                for (size_t i = n_args; i < n_pos_args; i++) {
   1aa08:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   1aa0a:	3301      	adds	r3, #1
   1aa0c:	663b      	str	r3, [r7, #96]	; 0x60
   1aa0e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
   1aa10:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1aa12:	429a      	cmp	r2, r3
   1aa14:	d3e6      	bcc.n	1a9e4 <mp_setup_code_state+0x140>
   1aa16:	e007      	b.n	1aa28 <mp_setup_code_state+0x184>
                }
            } else {
                fun_pos_args_mismatch(self, n_pos_args - n_def_pos_args, n_args);
   1aa18:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1aa1a:	6a3b      	ldr	r3, [r7, #32]
   1aa1c:	1ad3      	subs	r3, r2, r3
   1aa1e:	68ba      	ldr	r2, [r7, #8]
   1aa20:	4619      	mov	r1, r3
   1aa22:	6b78      	ldr	r0, [r7, #52]	; 0x34
   1aa24:	f7ff ff36 	bl	1a894 <fun_pos_args_mismatch>
            }
        }
    }

    // copy positional args into state
    for (size_t i = 0; i < n_args; i++) {
   1aa28:	2300      	movs	r3, #0
   1aa2a:	65fb      	str	r3, [r7, #92]	; 0x5c
   1aa2c:	e010      	b.n	1aa50 <mp_setup_code_state+0x1ac>
        code_state->state[n_state - 1 - i] = args[i];
   1aa2e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   1aa30:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
   1aa32:	1ad3      	subs	r3, r2, r3
   1aa34:	3b01      	subs	r3, #1
   1aa36:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
   1aa38:	0092      	lsls	r2, r2, #2
   1aa3a:	6839      	ldr	r1, [r7, #0]
   1aa3c:	440a      	add	r2, r1
   1aa3e:	6812      	ldr	r2, [r2, #0]
   1aa40:	68f9      	ldr	r1, [r7, #12]
   1aa42:	3304      	adds	r3, #4
   1aa44:	009b      	lsls	r3, r3, #2
   1aa46:	440b      	add	r3, r1
   1aa48:	605a      	str	r2, [r3, #4]
    for (size_t i = 0; i < n_args; i++) {
   1aa4a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
   1aa4c:	3301      	adds	r3, #1
   1aa4e:	65fb      	str	r3, [r7, #92]	; 0x5c
   1aa50:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
   1aa52:	68bb      	ldr	r3, [r7, #8]
   1aa54:	429a      	cmp	r2, r3
   1aa56:	d3ea      	bcc.n	1aa2e <mp_setup_code_state+0x18a>
    }

    // check keyword arguments

    if (n_kw != 0 || (scope_flags & MP_SCOPE_FLAG_DEFKWARGS) != 0) {
   1aa58:	687b      	ldr	r3, [r7, #4]
   1aa5a:	2b00      	cmp	r3, #0
   1aa5c:	d105      	bne.n	1aa6a <mp_setup_code_state+0x1c6>
   1aa5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1aa60:	f003 0308 	and.w	r3, r3, #8
   1aa64:	2b00      	cmp	r3, #0
   1aa66:	f000 811a 	beq.w	1ac9e <mp_setup_code_state+0x3fa>
        DEBUG_printf("Initial args: ");
        dump_args(code_state->state + n_state - n_pos_args - n_kwonly_args, n_pos_args + n_kwonly_args);

        mp_obj_t dict = MP_OBJ_NULL;
   1aa6a:	2300      	movs	r3, #0
   1aa6c:	65bb      	str	r3, [r7, #88]	; 0x58
        if ((scope_flags & MP_SCOPE_FLAG_VARKEYWORDS) != 0) {
   1aa6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1aa70:	f003 0302 	and.w	r3, r3, #2
   1aa74:	2b00      	cmp	r3, #0
   1aa76:	d006      	beq.n	1aa86 <mp_setup_code_state+0x1e2>
            dict = mp_obj_new_dict(n_kw); // TODO: better go conservative with 0?
   1aa78:	6878      	ldr	r0, [r7, #4]
   1aa7a:	f7f4 fcaf 	bl	f3dc <mp_obj_new_dict>
   1aa7e:	65b8      	str	r0, [r7, #88]	; 0x58
            *var_pos_kw_args = dict;
   1aa80:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   1aa82:	6dba      	ldr	r2, [r7, #88]	; 0x58
   1aa84:	601a      	str	r2, [r3, #0]
        }

        // get pointer to arg_names array
        const mp_obj_t *arg_names = (const mp_obj_t*)self->const_table;
   1aa86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1aa88:	68db      	ldr	r3, [r3, #12]
   1aa8a:	61bb      	str	r3, [r7, #24]

        for (size_t i = 0; i < n_kw; i++) {
   1aa8c:	2300      	movs	r3, #0
   1aa8e:	657b      	str	r3, [r7, #84]	; 0x54
   1aa90:	e059      	b.n	1ab46 <mp_setup_code_state+0x2a2>
            // the keys in kwargs are expected to be qstr objects
            mp_obj_t wanted_arg_name = kwargs[2 * i];
   1aa92:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   1aa94:	00db      	lsls	r3, r3, #3
   1aa96:	69fa      	ldr	r2, [r7, #28]
   1aa98:	4413      	add	r3, r2
   1aa9a:	681b      	ldr	r3, [r3, #0]
   1aa9c:	617b      	str	r3, [r7, #20]
            for (size_t j = 0; j < n_pos_args + n_kwonly_args; j++) {
   1aa9e:	2300      	movs	r3, #0
   1aaa0:	653b      	str	r3, [r7, #80]	; 0x50
   1aaa2:	e030      	b.n	1ab06 <mp_setup_code_state+0x262>
                if (wanted_arg_name == arg_names[j]) {
   1aaa4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   1aaa6:	009b      	lsls	r3, r3, #2
   1aaa8:	69ba      	ldr	r2, [r7, #24]
   1aaaa:	4413      	add	r3, r2
   1aaac:	681a      	ldr	r2, [r3, #0]
   1aaae:	697b      	ldr	r3, [r7, #20]
   1aab0:	429a      	cmp	r2, r3
   1aab2:	d125      	bne.n	1ab00 <mp_setup_code_state+0x25c>
                    if (code_state->state[n_state - 1 - j] != MP_OBJ_NULL) {
   1aab4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   1aab6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   1aab8:	1ad3      	subs	r3, r2, r3
   1aaba:	3b01      	subs	r3, #1
   1aabc:	68fa      	ldr	r2, [r7, #12]
   1aabe:	3304      	adds	r3, #4
   1aac0:	009b      	lsls	r3, r3, #2
   1aac2:	4413      	add	r3, r2
   1aac4:	685b      	ldr	r3, [r3, #4]
   1aac6:	2b00      	cmp	r3, #0
   1aac8:	d00a      	beq.n	1aae0 <mp_setup_code_state+0x23c>
                        nlr_raise(mp_obj_new_exception_msg_varg(&mp_type_TypeError,
   1aaca:	697b      	ldr	r3, [r7, #20]
   1aacc:	089b      	lsrs	r3, r3, #2
   1aace:	461a      	mov	r2, r3
   1aad0:	4962      	ldr	r1, [pc, #392]	; (1ac5c <mp_setup_code_state+0x3b8>)
   1aad2:	4863      	ldr	r0, [pc, #396]	; (1ac60 <mp_setup_code_state+0x3bc>)
   1aad4:	f7f4 feda 	bl	f88c <mp_obj_new_exception_msg_varg>
   1aad8:	4603      	mov	r3, r0
   1aada:	4618      	mov	r0, r3
   1aadc:	f7e5 fc00 	bl	2e0 <nlr_jump>
                            "function got multiple values for argument '%q'", MP_OBJ_QSTR_VALUE(wanted_arg_name)));
                    }
                    code_state->state[n_state - 1 - j] = kwargs[2 * i + 1];
   1aae0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   1aae2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   1aae4:	1ad3      	subs	r3, r2, r3
   1aae6:	3b01      	subs	r3, #1
   1aae8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
   1aaea:	00d2      	lsls	r2, r2, #3
   1aaec:	3204      	adds	r2, #4
   1aaee:	69f9      	ldr	r1, [r7, #28]
   1aaf0:	440a      	add	r2, r1
   1aaf2:	6812      	ldr	r2, [r2, #0]
   1aaf4:	68f9      	ldr	r1, [r7, #12]
   1aaf6:	3304      	adds	r3, #4
   1aaf8:	009b      	lsls	r3, r3, #2
   1aafa:	440b      	add	r3, r1
   1aafc:	605a      	str	r2, [r3, #4]
                    goto continue2;
   1aafe:	e01f      	b.n	1ab40 <mp_setup_code_state+0x29c>
            for (size_t j = 0; j < n_pos_args + n_kwonly_args; j++) {
   1ab00:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   1ab02:	3301      	adds	r3, #1
   1ab04:	653b      	str	r3, [r7, #80]	; 0x50
   1ab06:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1ab08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1ab0a:	441a      	add	r2, r3
   1ab0c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   1ab0e:	429a      	cmp	r2, r3
   1ab10:	d8c8      	bhi.n	1aaa4 <mp_setup_code_state+0x200>
                }
            }
            // Didn't find name match with positional args
            if ((scope_flags & MP_SCOPE_FLAG_VARKEYWORDS) == 0) {
   1ab12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1ab14:	f003 0302 	and.w	r3, r3, #2
   1ab18:	2b00      	cmp	r3, #0
   1ab1a:	d102      	bne.n	1ab22 <mp_setup_code_state+0x27e>
                if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
                    mp_raise_TypeError("unexpected keyword argument");
   1ab1c:	4851      	ldr	r0, [pc, #324]	; (1ac64 <mp_setup_code_state+0x3c0>)
   1ab1e:	f7f2 fb69 	bl	d1f4 <mp_raise_TypeError>
                } else {
                    nlr_raise(mp_obj_new_exception_msg_varg(&mp_type_TypeError,
                        "unexpected keyword argument '%q'", MP_OBJ_QSTR_VALUE(wanted_arg_name)));
                }
            }
            mp_obj_dict_store(dict, kwargs[2 * i], kwargs[2 * i + 1]);
   1ab22:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   1ab24:	00db      	lsls	r3, r3, #3
   1ab26:	69fa      	ldr	r2, [r7, #28]
   1ab28:	4413      	add	r3, r2
   1ab2a:	6819      	ldr	r1, [r3, #0]
   1ab2c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   1ab2e:	00db      	lsls	r3, r3, #3
   1ab30:	3304      	adds	r3, #4
   1ab32:	69fa      	ldr	r2, [r7, #28]
   1ab34:	4413      	add	r3, r2
   1ab36:	681b      	ldr	r3, [r3, #0]
   1ab38:	461a      	mov	r2, r3
   1ab3a:	6db8      	ldr	r0, [r7, #88]	; 0x58
   1ab3c:	f7f4 fc70 	bl	f420 <mp_obj_dict_store>
        for (size_t i = 0; i < n_kw; i++) {
   1ab40:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   1ab42:	3301      	adds	r3, #1
   1ab44:	657b      	str	r3, [r7, #84]	; 0x54
   1ab46:	6d7a      	ldr	r2, [r7, #84]	; 0x54
   1ab48:	687b      	ldr	r3, [r7, #4]
   1ab4a:	429a      	cmp	r2, r3
   1ab4c:	d3a1      	bcc.n	1aa92 <mp_setup_code_state+0x1ee>

        DEBUG_printf("Args with kws flattened: ");
        dump_args(code_state->state + n_state - n_pos_args - n_kwonly_args, n_pos_args + n_kwonly_args);

        // fill in defaults for positional args
        mp_obj_t *d = &code_state->state[n_state - n_pos_args];
   1ab4e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   1ab50:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1ab52:	1ad3      	subs	r3, r2, r3
   1ab54:	3304      	adds	r3, #4
   1ab56:	009b      	lsls	r3, r3, #2
   1ab58:	68fa      	ldr	r2, [r7, #12]
   1ab5a:	4413      	add	r3, r2
   1ab5c:	3304      	adds	r3, #4
   1ab5e:	64fb      	str	r3, [r7, #76]	; 0x4c
        mp_obj_t *s = &self->extra_args[n_def_pos_args - 1];
   1ab60:	6a3b      	ldr	r3, [r7, #32]
   1ab62:	3b01      	subs	r3, #1
   1ab64:	3304      	adds	r3, #4
   1ab66:	009b      	lsls	r3, r3, #2
   1ab68:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   1ab6a:	4413      	add	r3, r2
   1ab6c:	64bb      	str	r3, [r7, #72]	; 0x48
        for (size_t i = n_def_pos_args; i > 0; i--, d++, s--) {
   1ab6e:	6a3b      	ldr	r3, [r7, #32]
   1ab70:	647b      	str	r3, [r7, #68]	; 0x44
   1ab72:	e010      	b.n	1ab96 <mp_setup_code_state+0x2f2>
            if (*d == MP_OBJ_NULL) {
   1ab74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   1ab76:	681b      	ldr	r3, [r3, #0]
   1ab78:	2b00      	cmp	r3, #0
   1ab7a:	d103      	bne.n	1ab84 <mp_setup_code_state+0x2e0>
                *d = *s;
   1ab7c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   1ab7e:	681a      	ldr	r2, [r3, #0]
   1ab80:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   1ab82:	601a      	str	r2, [r3, #0]
        for (size_t i = n_def_pos_args; i > 0; i--, d++, s--) {
   1ab84:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   1ab86:	3b01      	subs	r3, #1
   1ab88:	647b      	str	r3, [r7, #68]	; 0x44
   1ab8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   1ab8c:	3304      	adds	r3, #4
   1ab8e:	64fb      	str	r3, [r7, #76]	; 0x4c
   1ab90:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   1ab92:	3b04      	subs	r3, #4
   1ab94:	64bb      	str	r3, [r7, #72]	; 0x48
   1ab96:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   1ab98:	2b00      	cmp	r3, #0
   1ab9a:	d1eb      	bne.n	1ab74 <mp_setup_code_state+0x2d0>

        DEBUG_printf("Args after filling default positional: ");
        dump_args(code_state->state + n_state - n_pos_args - n_kwonly_args, n_pos_args + n_kwonly_args);

        // Check that all mandatory positional args are specified
        while (d < &code_state->state[n_state]) {
   1ab9c:	e018      	b.n	1abd0 <mp_setup_code_state+0x32c>
            if (*d++ == MP_OBJ_NULL) {
   1ab9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   1aba0:	1d1a      	adds	r2, r3, #4
   1aba2:	64fa      	str	r2, [r7, #76]	; 0x4c
   1aba4:	681b      	ldr	r3, [r3, #0]
   1aba6:	2b00      	cmp	r3, #0
   1aba8:	d112      	bne.n	1abd0 <mp_setup_code_state+0x32c>
                nlr_raise(mp_obj_new_exception_msg_varg(&mp_type_TypeError,
   1abaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1abac:	3304      	adds	r3, #4
   1abae:	009b      	lsls	r3, r3, #2
   1abb0:	68fa      	ldr	r2, [r7, #12]
   1abb2:	4413      	add	r3, r2
   1abb4:	3304      	adds	r3, #4
   1abb6:	461a      	mov	r2, r3
   1abb8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   1abba:	1ad3      	subs	r3, r2, r3
   1abbc:	109b      	asrs	r3, r3, #2
   1abbe:	461a      	mov	r2, r3
   1abc0:	4929      	ldr	r1, [pc, #164]	; (1ac68 <mp_setup_code_state+0x3c4>)
   1abc2:	4827      	ldr	r0, [pc, #156]	; (1ac60 <mp_setup_code_state+0x3bc>)
   1abc4:	f7f4 fe62 	bl	f88c <mp_obj_new_exception_msg_varg>
   1abc8:	4603      	mov	r3, r0
   1abca:	4618      	mov	r0, r3
   1abcc:	f7e5 fb88 	bl	2e0 <nlr_jump>
        while (d < &code_state->state[n_state]) {
   1abd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1abd2:	3304      	adds	r3, #4
   1abd4:	009b      	lsls	r3, r3, #2
   1abd6:	68fa      	ldr	r2, [r7, #12]
   1abd8:	4413      	add	r3, r2
   1abda:	1d1a      	adds	r2, r3, #4
   1abdc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   1abde:	429a      	cmp	r2, r3
   1abe0:	d8dd      	bhi.n	1ab9e <mp_setup_code_state+0x2fa>
            }
        }

        // Check that all mandatory keyword args are specified
        // Fill in default kw args if we have them
        for (size_t i = 0; i < n_kwonly_args; i++) {
   1abe2:	2300      	movs	r3, #0
   1abe4:	643b      	str	r3, [r7, #64]	; 0x40
   1abe6:	e055      	b.n	1ac94 <mp_setup_code_state+0x3f0>
            if (code_state->state[n_state - 1 - n_pos_args - i] == MP_OBJ_NULL) {
   1abe8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   1abea:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1abec:	1ad2      	subs	r2, r2, r3
   1abee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1abf0:	1ad3      	subs	r3, r2, r3
   1abf2:	3b01      	subs	r3, #1
   1abf4:	68fa      	ldr	r2, [r7, #12]
   1abf6:	3304      	adds	r3, #4
   1abf8:	009b      	lsls	r3, r3, #2
   1abfa:	4413      	add	r3, r2
   1abfc:	685b      	ldr	r3, [r3, #4]
   1abfe:	2b00      	cmp	r3, #0
   1ac00:	d145      	bne.n	1ac8e <mp_setup_code_state+0x3ea>
                mp_map_elem_t *elem = NULL;
   1ac02:	2300      	movs	r3, #0
   1ac04:	63fb      	str	r3, [r7, #60]	; 0x3c
                if ((scope_flags & MP_SCOPE_FLAG_DEFKWARGS) != 0) {
   1ac06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1ac08:	f003 0308 	and.w	r3, r3, #8
   1ac0c:	2b00      	cmp	r3, #0
   1ac0e:	d011      	beq.n	1ac34 <mp_setup_code_state+0x390>
                    elem = mp_map_lookup(&((mp_obj_dict_t*)MP_OBJ_TO_PTR(self->extra_args[n_def_pos_args]))->map, arg_names[n_pos_args + i], MP_MAP_LOOKUP);
   1ac10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1ac12:	6a3a      	ldr	r2, [r7, #32]
   1ac14:	3204      	adds	r2, #4
   1ac16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   1ac1a:	1d18      	adds	r0, r3, #4
   1ac1c:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1ac1e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1ac20:	4413      	add	r3, r2
   1ac22:	009b      	lsls	r3, r3, #2
   1ac24:	69ba      	ldr	r2, [r7, #24]
   1ac26:	4413      	add	r3, r2
   1ac28:	681b      	ldr	r3, [r3, #0]
   1ac2a:	2200      	movs	r2, #0
   1ac2c:	4619      	mov	r1, r3
   1ac2e:	f7f2 fd97 	bl	d760 <mp_map_lookup>
   1ac32:	63f8      	str	r0, [r7, #60]	; 0x3c
                }
                if (elem != NULL) {
   1ac34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1ac36:	2b00      	cmp	r3, #0
   1ac38:	d018      	beq.n	1ac6c <mp_setup_code_state+0x3c8>
                    code_state->state[n_state - 1 - n_pos_args - i] = elem->value;
   1ac3a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   1ac3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1ac3e:	1ad2      	subs	r2, r2, r3
   1ac40:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1ac42:	1ad3      	subs	r3, r2, r3
   1ac44:	3b01      	subs	r3, #1
   1ac46:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   1ac48:	6852      	ldr	r2, [r2, #4]
   1ac4a:	68f9      	ldr	r1, [r7, #12]
   1ac4c:	3304      	adds	r3, #4
   1ac4e:	009b      	lsls	r3, r3, #2
   1ac50:	440b      	add	r3, r1
   1ac52:	605a      	str	r2, [r3, #4]
   1ac54:	e01b      	b.n	1ac8e <mp_setup_code_state+0x3ea>
   1ac56:	bf00      	nop
   1ac58:	00023dcc 	.word	0x00023dcc
   1ac5c:	00024c70 	.word	0x00024c70
   1ac60:	00022698 	.word	0x00022698
   1ac64:	00024ca0 	.word	0x00024ca0
   1ac68:	00024cbc 	.word	0x00024cbc
                } else {
                    nlr_raise(mp_obj_new_exception_msg_varg(&mp_type_TypeError,
   1ac6c:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1ac6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1ac70:	4413      	add	r3, r2
   1ac72:	009b      	lsls	r3, r3, #2
   1ac74:	69ba      	ldr	r2, [r7, #24]
   1ac76:	4413      	add	r3, r2
   1ac78:	681b      	ldr	r3, [r3, #0]
   1ac7a:	089b      	lsrs	r3, r3, #2
   1ac7c:	461a      	mov	r2, r3
   1ac7e:	4928      	ldr	r1, [pc, #160]	; (1ad20 <mp_setup_code_state+0x47c>)
   1ac80:	4828      	ldr	r0, [pc, #160]	; (1ad24 <mp_setup_code_state+0x480>)
   1ac82:	f7f4 fe03 	bl	f88c <mp_obj_new_exception_msg_varg>
   1ac86:	4603      	mov	r3, r0
   1ac88:	4618      	mov	r0, r3
   1ac8a:	f7e5 fb29 	bl	2e0 <nlr_jump>
        for (size_t i = 0; i < n_kwonly_args; i++) {
   1ac8e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1ac90:	3301      	adds	r3, #1
   1ac92:	643b      	str	r3, [r7, #64]	; 0x40
   1ac94:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   1ac96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1ac98:	429a      	cmp	r2, r3
   1ac9a:	d3a5      	bcc.n	1abe8 <mp_setup_code_state+0x344>
    if (n_kw != 0 || (scope_flags & MP_SCOPE_FLAG_DEFKWARGS) != 0) {
   1ac9c:	e010      	b.n	1acc0 <mp_setup_code_state+0x41c>
            }
        }

    } else {
        // no keyword arguments given
        if (n_kwonly_args != 0) {
   1ac9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1aca0:	2b00      	cmp	r3, #0
   1aca2:	d002      	beq.n	1acaa <mp_setup_code_state+0x406>
            mp_raise_TypeError("function missing keyword-only argument");
   1aca4:	4820      	ldr	r0, [pc, #128]	; (1ad28 <mp_setup_code_state+0x484>)
   1aca6:	f7f2 faa5 	bl	d1f4 <mp_raise_TypeError>
        }
        if ((scope_flags & MP_SCOPE_FLAG_VARKEYWORDS) != 0) {
   1acaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1acac:	f003 0302 	and.w	r3, r3, #2
   1acb0:	2b00      	cmp	r3, #0
   1acb2:	d005      	beq.n	1acc0 <mp_setup_code_state+0x41c>
            *var_pos_kw_args = mp_obj_new_dict(0);
   1acb4:	2000      	movs	r0, #0
   1acb6:	f7f4 fb91 	bl	f3dc <mp_obj_new_dict>
   1acba:	4602      	mov	r2, r0
   1acbc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   1acbe:	601a      	str	r2, [r3, #0]
        }
    }

    // get the ip and skip argument names
    const byte *ip = code_state->ip;
   1acc0:	68fb      	ldr	r3, [r7, #12]
   1acc2:	685b      	ldr	r3, [r3, #4]
   1acc4:	63bb      	str	r3, [r7, #56]	; 0x38

    // jump over code info (source file and line-number mapping)
    ip += mp_decode_uint_value(ip);
   1acc6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
   1acc8:	f7ff fdc2 	bl	1a850 <mp_decode_uint_value>
   1accc:	4602      	mov	r2, r0
   1acce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1acd0:	4413      	add	r3, r2
   1acd2:	63bb      	str	r3, [r7, #56]	; 0x38

    // bytecode prelude: initialise closed over variables
    size_t local_num;
    while ((local_num = *ip++) != 255) {
   1acd4:	e015      	b.n	1ad02 <mp_setup_code_state+0x45e>
        code_state->state[n_state - 1 - local_num] =
   1acd6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   1acd8:	693b      	ldr	r3, [r7, #16]
   1acda:	1ad3      	subs	r3, r2, r3
   1acdc:	1e5c      	subs	r4, r3, #1
            mp_obj_new_cell(code_state->state[n_state - 1 - local_num]);
   1acde:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   1ace0:	693b      	ldr	r3, [r7, #16]
   1ace2:	1ad3      	subs	r3, r2, r3
   1ace4:	3b01      	subs	r3, #1
   1ace6:	68fa      	ldr	r2, [r7, #12]
   1ace8:	3304      	adds	r3, #4
   1acea:	009b      	lsls	r3, r3, #2
   1acec:	4413      	add	r3, r2
   1acee:	685b      	ldr	r3, [r3, #4]
   1acf0:	4618      	mov	r0, r3
   1acf2:	f7f3 fc43 	bl	e57c <mp_obj_new_cell>
   1acf6:	4601      	mov	r1, r0
        code_state->state[n_state - 1 - local_num] =
   1acf8:	68fa      	ldr	r2, [r7, #12]
   1acfa:	1d23      	adds	r3, r4, #4
   1acfc:	009b      	lsls	r3, r3, #2
   1acfe:	4413      	add	r3, r2
   1ad00:	6059      	str	r1, [r3, #4]
    while ((local_num = *ip++) != 255) {
   1ad02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1ad04:	1c5a      	adds	r2, r3, #1
   1ad06:	63ba      	str	r2, [r7, #56]	; 0x38
   1ad08:	781b      	ldrb	r3, [r3, #0]
   1ad0a:	613b      	str	r3, [r7, #16]
   1ad0c:	693b      	ldr	r3, [r7, #16]
   1ad0e:	2bff      	cmp	r3, #255	; 0xff
   1ad10:	d1e1      	bne.n	1acd6 <mp_setup_code_state+0x432>
    }

    // now that we skipped over the prelude, set the ip for the VM
    code_state->ip = ip;
   1ad12:	68fb      	ldr	r3, [r7, #12]
   1ad14:	6bba      	ldr	r2, [r7, #56]	; 0x38
   1ad16:	605a      	str	r2, [r3, #4]

    DEBUG_printf("Calling: n_pos_args=%d, n_kwonly_args=%d\n", n_pos_args, n_kwonly_args);
    dump_args(code_state->state + n_state - n_pos_args - n_kwonly_args, n_pos_args + n_kwonly_args);
    dump_args(code_state->state, n_state);
}
   1ad18:	bf00      	nop
   1ad1a:	376c      	adds	r7, #108	; 0x6c
   1ad1c:	46bd      	mov	sp, r7
   1ad1e:	bd90      	pop	{r4, r7, pc}
   1ad20:	00024cf0 	.word	0x00024cf0
   1ad24:	00022698 	.word	0x00022698
   1ad28:	00024d20 	.word	0x00024d20

0001ad2c <str_startswith_word>:
#include "py/builtin.h"
#include "py/repl.h"

#if MICROPY_HELPER_REPL

STATIC bool str_startswith_word(const char *str, const char *head) {
   1ad2c:	b580      	push	{r7, lr}
   1ad2e:	b084      	sub	sp, #16
   1ad30:	af00      	add	r7, sp, #0
   1ad32:	6078      	str	r0, [r7, #4]
   1ad34:	6039      	str	r1, [r7, #0]
    size_t i;
    for (i = 0; str[i] && head[i]; i++) {
   1ad36:	2300      	movs	r3, #0
   1ad38:	60fb      	str	r3, [r7, #12]
   1ad3a:	e00e      	b.n	1ad5a <str_startswith_word+0x2e>
        if (str[i] != head[i]) {
   1ad3c:	687a      	ldr	r2, [r7, #4]
   1ad3e:	68fb      	ldr	r3, [r7, #12]
   1ad40:	4413      	add	r3, r2
   1ad42:	781a      	ldrb	r2, [r3, #0]
   1ad44:	6839      	ldr	r1, [r7, #0]
   1ad46:	68fb      	ldr	r3, [r7, #12]
   1ad48:	440b      	add	r3, r1
   1ad4a:	781b      	ldrb	r3, [r3, #0]
   1ad4c:	429a      	cmp	r2, r3
   1ad4e:	d001      	beq.n	1ad54 <str_startswith_word+0x28>
            return false;
   1ad50:	2300      	movs	r3, #0
   1ad52:	e02d      	b.n	1adb0 <str_startswith_word+0x84>
    for (i = 0; str[i] && head[i]; i++) {
   1ad54:	68fb      	ldr	r3, [r7, #12]
   1ad56:	3301      	adds	r3, #1
   1ad58:	60fb      	str	r3, [r7, #12]
   1ad5a:	687a      	ldr	r2, [r7, #4]
   1ad5c:	68fb      	ldr	r3, [r7, #12]
   1ad5e:	4413      	add	r3, r2
   1ad60:	781b      	ldrb	r3, [r3, #0]
   1ad62:	2b00      	cmp	r3, #0
   1ad64:	d005      	beq.n	1ad72 <str_startswith_word+0x46>
   1ad66:	683a      	ldr	r2, [r7, #0]
   1ad68:	68fb      	ldr	r3, [r7, #12]
   1ad6a:	4413      	add	r3, r2
   1ad6c:	781b      	ldrb	r3, [r3, #0]
   1ad6e:	2b00      	cmp	r3, #0
   1ad70:	d1e4      	bne.n	1ad3c <str_startswith_word+0x10>
        }
    }
    return head[i] == '\0' && (str[i] == '\0' || !unichar_isident(str[i]));
   1ad72:	683a      	ldr	r2, [r7, #0]
   1ad74:	68fb      	ldr	r3, [r7, #12]
   1ad76:	4413      	add	r3, r2
   1ad78:	781b      	ldrb	r3, [r3, #0]
   1ad7a:	2b00      	cmp	r3, #0
   1ad7c:	d114      	bne.n	1ada8 <str_startswith_word+0x7c>
   1ad7e:	687a      	ldr	r2, [r7, #4]
   1ad80:	68fb      	ldr	r3, [r7, #12]
   1ad82:	4413      	add	r3, r2
   1ad84:	781b      	ldrb	r3, [r3, #0]
   1ad86:	2b00      	cmp	r3, #0
   1ad88:	d00c      	beq.n	1ada4 <str_startswith_word+0x78>
   1ad8a:	687a      	ldr	r2, [r7, #4]
   1ad8c:	68fb      	ldr	r3, [r7, #12]
   1ad8e:	4413      	add	r3, r2
   1ad90:	781b      	ldrb	r3, [r3, #0]
   1ad92:	4618      	mov	r0, r3
   1ad94:	f7e7 fc28 	bl	25e8 <unichar_isident>
   1ad98:	4603      	mov	r3, r0
   1ad9a:	f083 0301 	eor.w	r3, r3, #1
   1ad9e:	b2db      	uxtb	r3, r3
   1ada0:	2b00      	cmp	r3, #0
   1ada2:	d001      	beq.n	1ada8 <str_startswith_word+0x7c>
   1ada4:	2301      	movs	r3, #1
   1ada6:	e000      	b.n	1adaa <str_startswith_word+0x7e>
   1ada8:	2300      	movs	r3, #0
   1adaa:	f003 0301 	and.w	r3, r3, #1
   1adae:	b2db      	uxtb	r3, r3
}
   1adb0:	4618      	mov	r0, r3
   1adb2:	3710      	adds	r7, #16
   1adb4:	46bd      	mov	sp, r7
   1adb6:	bd80      	pop	{r7, pc}

0001adb8 <mp_repl_continue_with_input>:

bool mp_repl_continue_with_input(const char *input) {
   1adb8:	b580      	push	{r7, lr}
   1adba:	b088      	sub	sp, #32
   1adbc:	af00      	add	r7, sp, #0
   1adbe:	6078      	str	r0, [r7, #4]
    // check for blank input
    if (input[0] == '\0') {
   1adc0:	687b      	ldr	r3, [r7, #4]
   1adc2:	781b      	ldrb	r3, [r3, #0]
   1adc4:	2b00      	cmp	r3, #0
   1adc6:	d101      	bne.n	1adcc <mp_repl_continue_with_input+0x14>
        return false;
   1adc8:	2300      	movs	r3, #0
   1adca:	e107      	b.n	1afdc <mp_repl_continue_with_input+0x224>
    }

    // check if input starts with a certain keyword
    bool starts_with_compound_keyword =
           input[0] == '@'
   1adcc:	687b      	ldr	r3, [r7, #4]
   1adce:	781b      	ldrb	r3, [r3, #0]
        || str_startswith_word(input, "while")
        || str_startswith_word(input, "for")
        || str_startswith_word(input, "try")
        || str_startswith_word(input, "with")
        || str_startswith_word(input, "def")
        || str_startswith_word(input, "class")
   1add0:	2b40      	cmp	r3, #64	; 0x40
   1add2:	d030      	beq.n	1ae36 <mp_repl_continue_with_input+0x7e>
        || str_startswith_word(input, "if")
   1add4:	4983      	ldr	r1, [pc, #524]	; (1afe4 <mp_repl_continue_with_input+0x22c>)
   1add6:	6878      	ldr	r0, [r7, #4]
   1add8:	f7ff ffa8 	bl	1ad2c <str_startswith_word>
   1addc:	4603      	mov	r3, r0
   1adde:	2b00      	cmp	r3, #0
   1ade0:	d129      	bne.n	1ae36 <mp_repl_continue_with_input+0x7e>
        || str_startswith_word(input, "while")
   1ade2:	4981      	ldr	r1, [pc, #516]	; (1afe8 <mp_repl_continue_with_input+0x230>)
   1ade4:	6878      	ldr	r0, [r7, #4]
   1ade6:	f7ff ffa1 	bl	1ad2c <str_startswith_word>
   1adea:	4603      	mov	r3, r0
   1adec:	2b00      	cmp	r3, #0
   1adee:	d122      	bne.n	1ae36 <mp_repl_continue_with_input+0x7e>
        || str_startswith_word(input, "for")
   1adf0:	497e      	ldr	r1, [pc, #504]	; (1afec <mp_repl_continue_with_input+0x234>)
   1adf2:	6878      	ldr	r0, [r7, #4]
   1adf4:	f7ff ff9a 	bl	1ad2c <str_startswith_word>
   1adf8:	4603      	mov	r3, r0
   1adfa:	2b00      	cmp	r3, #0
   1adfc:	d11b      	bne.n	1ae36 <mp_repl_continue_with_input+0x7e>
        || str_startswith_word(input, "try")
   1adfe:	497c      	ldr	r1, [pc, #496]	; (1aff0 <mp_repl_continue_with_input+0x238>)
   1ae00:	6878      	ldr	r0, [r7, #4]
   1ae02:	f7ff ff93 	bl	1ad2c <str_startswith_word>
   1ae06:	4603      	mov	r3, r0
   1ae08:	2b00      	cmp	r3, #0
   1ae0a:	d114      	bne.n	1ae36 <mp_repl_continue_with_input+0x7e>
        || str_startswith_word(input, "with")
   1ae0c:	4979      	ldr	r1, [pc, #484]	; (1aff4 <mp_repl_continue_with_input+0x23c>)
   1ae0e:	6878      	ldr	r0, [r7, #4]
   1ae10:	f7ff ff8c 	bl	1ad2c <str_startswith_word>
   1ae14:	4603      	mov	r3, r0
   1ae16:	2b00      	cmp	r3, #0
   1ae18:	d10d      	bne.n	1ae36 <mp_repl_continue_with_input+0x7e>
        || str_startswith_word(input, "def")
   1ae1a:	4977      	ldr	r1, [pc, #476]	; (1aff8 <mp_repl_continue_with_input+0x240>)
   1ae1c:	6878      	ldr	r0, [r7, #4]
   1ae1e:	f7ff ff85 	bl	1ad2c <str_startswith_word>
   1ae22:	4603      	mov	r3, r0
   1ae24:	2b00      	cmp	r3, #0
   1ae26:	d106      	bne.n	1ae36 <mp_repl_continue_with_input+0x7e>
        || str_startswith_word(input, "class")
   1ae28:	4974      	ldr	r1, [pc, #464]	; (1affc <mp_repl_continue_with_input+0x244>)
   1ae2a:	6878      	ldr	r0, [r7, #4]
   1ae2c:	f7ff ff7e 	bl	1ad2c <str_startswith_word>
   1ae30:	4603      	mov	r3, r0
   1ae32:	2b00      	cmp	r3, #0
   1ae34:	d001      	beq.n	1ae3a <mp_repl_continue_with_input+0x82>
   1ae36:	2301      	movs	r3, #1
   1ae38:	e000      	b.n	1ae3c <mp_repl_continue_with_input+0x84>
   1ae3a:	2300      	movs	r3, #0
    bool starts_with_compound_keyword =
   1ae3c:	72fb      	strb	r3, [r7, #11]
   1ae3e:	7afb      	ldrb	r3, [r7, #11]
   1ae40:	f003 0301 	and.w	r3, r3, #1
   1ae44:	72fb      	strb	r3, [r7, #11]
    #define Q_NONE (0)
    #define Q_1_SINGLE (1)
    #define Q_1_DOUBLE (2)
    #define Q_3_SINGLE (3)
    #define Q_3_DOUBLE (4)
    int n_paren = 0;
   1ae46:	2300      	movs	r3, #0
   1ae48:	61fb      	str	r3, [r7, #28]
    int n_brack = 0;
   1ae4a:	2300      	movs	r3, #0
   1ae4c:	61bb      	str	r3, [r7, #24]
    int n_brace = 0;
   1ae4e:	2300      	movs	r3, #0
   1ae50:	617b      	str	r3, [r7, #20]
    int in_quote = Q_NONE;
   1ae52:	2300      	movs	r3, #0
   1ae54:	613b      	str	r3, [r7, #16]
    const char *i;
    for (i = input; *i; i++) {
   1ae56:	687b      	ldr	r3, [r7, #4]
   1ae58:	60fb      	str	r3, [r7, #12]
   1ae5a:	e097      	b.n	1af8c <mp_repl_continue_with_input+0x1d4>
        if (*i == '\'') {
   1ae5c:	68fb      	ldr	r3, [r7, #12]
   1ae5e:	781b      	ldrb	r3, [r3, #0]
   1ae60:	2b27      	cmp	r3, #39	; 0x27
   1ae62:	d122      	bne.n	1aeaa <mp_repl_continue_with_input+0xf2>
            if ((in_quote == Q_NONE || in_quote == Q_3_SINGLE) && i[1] == '\'' && i[2] == '\'') {
   1ae64:	693b      	ldr	r3, [r7, #16]
   1ae66:	2b00      	cmp	r3, #0
   1ae68:	d002      	beq.n	1ae70 <mp_repl_continue_with_input+0xb8>
   1ae6a:	693b      	ldr	r3, [r7, #16]
   1ae6c:	2b03      	cmp	r3, #3
   1ae6e:	d111      	bne.n	1ae94 <mp_repl_continue_with_input+0xdc>
   1ae70:	68fb      	ldr	r3, [r7, #12]
   1ae72:	3301      	adds	r3, #1
   1ae74:	781b      	ldrb	r3, [r3, #0]
   1ae76:	2b27      	cmp	r3, #39	; 0x27
   1ae78:	d10c      	bne.n	1ae94 <mp_repl_continue_with_input+0xdc>
   1ae7a:	68fb      	ldr	r3, [r7, #12]
   1ae7c:	3302      	adds	r3, #2
   1ae7e:	781b      	ldrb	r3, [r3, #0]
   1ae80:	2b27      	cmp	r3, #39	; 0x27
   1ae82:	d107      	bne.n	1ae94 <mp_repl_continue_with_input+0xdc>
                i += 2;
   1ae84:	68fb      	ldr	r3, [r7, #12]
   1ae86:	3302      	adds	r3, #2
   1ae88:	60fb      	str	r3, [r7, #12]
                in_quote = Q_3_SINGLE - in_quote;
   1ae8a:	693b      	ldr	r3, [r7, #16]
   1ae8c:	f1c3 0303 	rsb	r3, r3, #3
   1ae90:	613b      	str	r3, [r7, #16]
   1ae92:	e078      	b.n	1af86 <mp_repl_continue_with_input+0x1ce>
            } else if (in_quote == Q_NONE || in_quote == Q_1_SINGLE) {
   1ae94:	693b      	ldr	r3, [r7, #16]
   1ae96:	2b00      	cmp	r3, #0
   1ae98:	d002      	beq.n	1aea0 <mp_repl_continue_with_input+0xe8>
   1ae9a:	693b      	ldr	r3, [r7, #16]
   1ae9c:	2b01      	cmp	r3, #1
   1ae9e:	d172      	bne.n	1af86 <mp_repl_continue_with_input+0x1ce>
                in_quote = Q_1_SINGLE - in_quote;
   1aea0:	693b      	ldr	r3, [r7, #16]
   1aea2:	f1c3 0301 	rsb	r3, r3, #1
   1aea6:	613b      	str	r3, [r7, #16]
   1aea8:	e06d      	b.n	1af86 <mp_repl_continue_with_input+0x1ce>
            }
        } else if (*i == '"') {
   1aeaa:	68fb      	ldr	r3, [r7, #12]
   1aeac:	781b      	ldrb	r3, [r3, #0]
   1aeae:	2b22      	cmp	r3, #34	; 0x22
   1aeb0:	d122      	bne.n	1aef8 <mp_repl_continue_with_input+0x140>
            if ((in_quote == Q_NONE || in_quote == Q_3_DOUBLE) && i[1] == '"' && i[2] == '"') {
   1aeb2:	693b      	ldr	r3, [r7, #16]
   1aeb4:	2b00      	cmp	r3, #0
   1aeb6:	d002      	beq.n	1aebe <mp_repl_continue_with_input+0x106>
   1aeb8:	693b      	ldr	r3, [r7, #16]
   1aeba:	2b04      	cmp	r3, #4
   1aebc:	d111      	bne.n	1aee2 <mp_repl_continue_with_input+0x12a>
   1aebe:	68fb      	ldr	r3, [r7, #12]
   1aec0:	3301      	adds	r3, #1
   1aec2:	781b      	ldrb	r3, [r3, #0]
   1aec4:	2b22      	cmp	r3, #34	; 0x22
   1aec6:	d10c      	bne.n	1aee2 <mp_repl_continue_with_input+0x12a>
   1aec8:	68fb      	ldr	r3, [r7, #12]
   1aeca:	3302      	adds	r3, #2
   1aecc:	781b      	ldrb	r3, [r3, #0]
   1aece:	2b22      	cmp	r3, #34	; 0x22
   1aed0:	d107      	bne.n	1aee2 <mp_repl_continue_with_input+0x12a>
                i += 2;
   1aed2:	68fb      	ldr	r3, [r7, #12]
   1aed4:	3302      	adds	r3, #2
   1aed6:	60fb      	str	r3, [r7, #12]
                in_quote = Q_3_DOUBLE - in_quote;
   1aed8:	693b      	ldr	r3, [r7, #16]
   1aeda:	f1c3 0304 	rsb	r3, r3, #4
   1aede:	613b      	str	r3, [r7, #16]
   1aee0:	e051      	b.n	1af86 <mp_repl_continue_with_input+0x1ce>
            } else if (in_quote == Q_NONE || in_quote == Q_1_DOUBLE) {
   1aee2:	693b      	ldr	r3, [r7, #16]
   1aee4:	2b00      	cmp	r3, #0
   1aee6:	d002      	beq.n	1aeee <mp_repl_continue_with_input+0x136>
   1aee8:	693b      	ldr	r3, [r7, #16]
   1aeea:	2b02      	cmp	r3, #2
   1aeec:	d14b      	bne.n	1af86 <mp_repl_continue_with_input+0x1ce>
                in_quote = Q_1_DOUBLE - in_quote;
   1aeee:	693b      	ldr	r3, [r7, #16]
   1aef0:	f1c3 0302 	rsb	r3, r3, #2
   1aef4:	613b      	str	r3, [r7, #16]
   1aef6:	e046      	b.n	1af86 <mp_repl_continue_with_input+0x1ce>
            }
        } else if (*i == '\\' && (i[1] == '\'' || i[1] == '"' || i[1] == '\\')) {
   1aef8:	68fb      	ldr	r3, [r7, #12]
   1aefa:	781b      	ldrb	r3, [r3, #0]
   1aefc:	2b5c      	cmp	r3, #92	; 0x5c
   1aefe:	d115      	bne.n	1af2c <mp_repl_continue_with_input+0x174>
   1af00:	68fb      	ldr	r3, [r7, #12]
   1af02:	3301      	adds	r3, #1
   1af04:	781b      	ldrb	r3, [r3, #0]
   1af06:	2b27      	cmp	r3, #39	; 0x27
   1af08:	d009      	beq.n	1af1e <mp_repl_continue_with_input+0x166>
   1af0a:	68fb      	ldr	r3, [r7, #12]
   1af0c:	3301      	adds	r3, #1
   1af0e:	781b      	ldrb	r3, [r3, #0]
   1af10:	2b22      	cmp	r3, #34	; 0x22
   1af12:	d004      	beq.n	1af1e <mp_repl_continue_with_input+0x166>
   1af14:	68fb      	ldr	r3, [r7, #12]
   1af16:	3301      	adds	r3, #1
   1af18:	781b      	ldrb	r3, [r3, #0]
   1af1a:	2b5c      	cmp	r3, #92	; 0x5c
   1af1c:	d106      	bne.n	1af2c <mp_repl_continue_with_input+0x174>
            if (in_quote != Q_NONE) {
   1af1e:	693b      	ldr	r3, [r7, #16]
   1af20:	2b00      	cmp	r3, #0
   1af22:	d030      	beq.n	1af86 <mp_repl_continue_with_input+0x1ce>
                i++;
   1af24:	68fb      	ldr	r3, [r7, #12]
   1af26:	3301      	adds	r3, #1
   1af28:	60fb      	str	r3, [r7, #12]
            if (in_quote != Q_NONE) {
   1af2a:	e02c      	b.n	1af86 <mp_repl_continue_with_input+0x1ce>
            }
        } else if (in_quote == Q_NONE) {
   1af2c:	693b      	ldr	r3, [r7, #16]
   1af2e:	2b00      	cmp	r3, #0
   1af30:	d129      	bne.n	1af86 <mp_repl_continue_with_input+0x1ce>
            switch (*i) {
   1af32:	68fb      	ldr	r3, [r7, #12]
   1af34:	781b      	ldrb	r3, [r3, #0]
   1af36:	2b5b      	cmp	r3, #91	; 0x5b
   1af38:	d015      	beq.n	1af66 <mp_repl_continue_with_input+0x1ae>
   1af3a:	2b5b      	cmp	r3, #91	; 0x5b
   1af3c:	dc04      	bgt.n	1af48 <mp_repl_continue_with_input+0x190>
   1af3e:	2b28      	cmp	r3, #40	; 0x28
   1af40:	d009      	beq.n	1af56 <mp_repl_continue_with_input+0x19e>
   1af42:	2b29      	cmp	r3, #41	; 0x29
   1af44:	d00b      	beq.n	1af5e <mp_repl_continue_with_input+0x1a6>
                case ')': n_paren -= 1; break;
                case '[': n_brack += 1; break;
                case ']': n_brack -= 1; break;
                case '{': n_brace += 1; break;
                case '}': n_brace -= 1; break;
                default: break;
   1af46:	e01e      	b.n	1af86 <mp_repl_continue_with_input+0x1ce>
            switch (*i) {
   1af48:	2b7b      	cmp	r3, #123	; 0x7b
   1af4a:	d014      	beq.n	1af76 <mp_repl_continue_with_input+0x1be>
   1af4c:	2b7d      	cmp	r3, #125	; 0x7d
   1af4e:	d016      	beq.n	1af7e <mp_repl_continue_with_input+0x1c6>
   1af50:	2b5d      	cmp	r3, #93	; 0x5d
   1af52:	d00c      	beq.n	1af6e <mp_repl_continue_with_input+0x1b6>
                default: break;
   1af54:	e017      	b.n	1af86 <mp_repl_continue_with_input+0x1ce>
                case '(': n_paren += 1; break;
   1af56:	69fb      	ldr	r3, [r7, #28]
   1af58:	3301      	adds	r3, #1
   1af5a:	61fb      	str	r3, [r7, #28]
   1af5c:	e013      	b.n	1af86 <mp_repl_continue_with_input+0x1ce>
                case ')': n_paren -= 1; break;
   1af5e:	69fb      	ldr	r3, [r7, #28]
   1af60:	3b01      	subs	r3, #1
   1af62:	61fb      	str	r3, [r7, #28]
   1af64:	e00f      	b.n	1af86 <mp_repl_continue_with_input+0x1ce>
                case '[': n_brack += 1; break;
   1af66:	69bb      	ldr	r3, [r7, #24]
   1af68:	3301      	adds	r3, #1
   1af6a:	61bb      	str	r3, [r7, #24]
   1af6c:	e00b      	b.n	1af86 <mp_repl_continue_with_input+0x1ce>
                case ']': n_brack -= 1; break;
   1af6e:	69bb      	ldr	r3, [r7, #24]
   1af70:	3b01      	subs	r3, #1
   1af72:	61bb      	str	r3, [r7, #24]
   1af74:	e007      	b.n	1af86 <mp_repl_continue_with_input+0x1ce>
                case '{': n_brace += 1; break;
   1af76:	697b      	ldr	r3, [r7, #20]
   1af78:	3301      	adds	r3, #1
   1af7a:	617b      	str	r3, [r7, #20]
   1af7c:	e003      	b.n	1af86 <mp_repl_continue_with_input+0x1ce>
                case '}': n_brace -= 1; break;
   1af7e:	697b      	ldr	r3, [r7, #20]
   1af80:	3b01      	subs	r3, #1
   1af82:	617b      	str	r3, [r7, #20]
   1af84:	bf00      	nop
    for (i = input; *i; i++) {
   1af86:	68fb      	ldr	r3, [r7, #12]
   1af88:	3301      	adds	r3, #1
   1af8a:	60fb      	str	r3, [r7, #12]
   1af8c:	68fb      	ldr	r3, [r7, #12]
   1af8e:	781b      	ldrb	r3, [r3, #0]
   1af90:	2b00      	cmp	r3, #0
   1af92:	f47f af63 	bne.w	1ae5c <mp_repl_continue_with_input+0xa4>
            }
        }
    }

    // continue if unmatched brackets or quotes
    if (n_paren > 0 || n_brack > 0 || n_brace > 0 || in_quote == Q_3_SINGLE || in_quote == Q_3_DOUBLE) {
   1af96:	69fb      	ldr	r3, [r7, #28]
   1af98:	2b00      	cmp	r3, #0
   1af9a:	dc0b      	bgt.n	1afb4 <mp_repl_continue_with_input+0x1fc>
   1af9c:	69bb      	ldr	r3, [r7, #24]
   1af9e:	2b00      	cmp	r3, #0
   1afa0:	dc08      	bgt.n	1afb4 <mp_repl_continue_with_input+0x1fc>
   1afa2:	697b      	ldr	r3, [r7, #20]
   1afa4:	2b00      	cmp	r3, #0
   1afa6:	dc05      	bgt.n	1afb4 <mp_repl_continue_with_input+0x1fc>
   1afa8:	693b      	ldr	r3, [r7, #16]
   1afaa:	2b03      	cmp	r3, #3
   1afac:	d002      	beq.n	1afb4 <mp_repl_continue_with_input+0x1fc>
   1afae:	693b      	ldr	r3, [r7, #16]
   1afb0:	2b04      	cmp	r3, #4
   1afb2:	d101      	bne.n	1afb8 <mp_repl_continue_with_input+0x200>
        return true;
   1afb4:	2301      	movs	r3, #1
   1afb6:	e011      	b.n	1afdc <mp_repl_continue_with_input+0x224>
    }

    // continue if last character was backslash (for line continuation)
    if (i[-1] == '\\') {
   1afb8:	68fb      	ldr	r3, [r7, #12]
   1afba:	3b01      	subs	r3, #1
   1afbc:	781b      	ldrb	r3, [r3, #0]
   1afbe:	2b5c      	cmp	r3, #92	; 0x5c
   1afc0:	d101      	bne.n	1afc6 <mp_repl_continue_with_input+0x20e>
        return true;
   1afc2:	2301      	movs	r3, #1
   1afc4:	e00a      	b.n	1afdc <mp_repl_continue_with_input+0x224>
    }

    // continue if compound keyword and last line was not empty
    if (starts_with_compound_keyword && i[-1] != '\n') {
   1afc6:	7afb      	ldrb	r3, [r7, #11]
   1afc8:	2b00      	cmp	r3, #0
   1afca:	d006      	beq.n	1afda <mp_repl_continue_with_input+0x222>
   1afcc:	68fb      	ldr	r3, [r7, #12]
   1afce:	3b01      	subs	r3, #1
   1afd0:	781b      	ldrb	r3, [r3, #0]
   1afd2:	2b0a      	cmp	r3, #10
   1afd4:	d001      	beq.n	1afda <mp_repl_continue_with_input+0x222>
        return true;
   1afd6:	2301      	movs	r3, #1
   1afd8:	e000      	b.n	1afdc <mp_repl_continue_with_input+0x224>
    }

    // otherwise, don't continue
    return false;
   1afda:	2300      	movs	r3, #0
}
   1afdc:	4618      	mov	r0, r3
   1afde:	3720      	adds	r7, #32
   1afe0:	46bd      	mov	sp, r7
   1afe2:	bd80      	pop	{r7, pc}
   1afe4:	00024d48 	.word	0x00024d48
   1afe8:	00024d4c 	.word	0x00024d4c
   1afec:	00024d54 	.word	0x00024d54
   1aff0:	00024d58 	.word	0x00024d58
   1aff4:	00024d5c 	.word	0x00024d5c
   1aff8:	00024d64 	.word	0x00024d64
   1affc:	00024d68 	.word	0x00024d68

0001b000 <mp_repl_autocomplete>:

size_t mp_repl_autocomplete(const char *str, size_t len, const mp_print_t *print, const char **compl_str) {
   1b000:	b580      	push	{r7, lr}
   1b002:	b09c      	sub	sp, #112	; 0x70
   1b004:	af00      	add	r7, sp, #0
   1b006:	60f8      	str	r0, [r7, #12]
   1b008:	60b9      	str	r1, [r7, #8]
   1b00a:	607a      	str	r2, [r7, #4]
   1b00c:	603b      	str	r3, [r7, #0]
    // scan backwards to find start of "a.b.c" chain
    const char *org_str = str;
   1b00e:	68fb      	ldr	r3, [r7, #12]
   1b010:	63fb      	str	r3, [r7, #60]	; 0x3c
    const char *top = str + len;
   1b012:	68fa      	ldr	r2, [r7, #12]
   1b014:	68bb      	ldr	r3, [r7, #8]
   1b016:	4413      	add	r3, r2
   1b018:	63bb      	str	r3, [r7, #56]	; 0x38
    for (const char *s = top; --s >= str;) {
   1b01a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1b01c:	66fb      	str	r3, [r7, #108]	; 0x6c
   1b01e:	e023      	b.n	1b068 <mp_repl_autocomplete+0x68>
        if (!(unichar_isalpha(*s) || unichar_isdigit(*s) || *s == '_' || *s == '.')) {
   1b020:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   1b022:	781b      	ldrb	r3, [r3, #0]
   1b024:	4618      	mov	r0, r3
   1b026:	f7e7 fa85 	bl	2534 <unichar_isalpha>
   1b02a:	4603      	mov	r3, r0
   1b02c:	f083 0301 	eor.w	r3, r3, #1
   1b030:	b2db      	uxtb	r3, r3
   1b032:	2b00      	cmp	r3, #0
   1b034:	d018      	beq.n	1b068 <mp_repl_autocomplete+0x68>
   1b036:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   1b038:	781b      	ldrb	r3, [r3, #0]
   1b03a:	4618      	mov	r0, r3
   1b03c:	f7e7 fa98 	bl	2570 <unichar_isdigit>
   1b040:	4603      	mov	r3, r0
   1b042:	f083 0301 	eor.w	r3, r3, #1
   1b046:	b2db      	uxtb	r3, r3
   1b048:	2b00      	cmp	r3, #0
   1b04a:	d00d      	beq.n	1b068 <mp_repl_autocomplete+0x68>
   1b04c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   1b04e:	781b      	ldrb	r3, [r3, #0]
   1b050:	2b5f      	cmp	r3, #95	; 0x5f
   1b052:	d009      	beq.n	1b068 <mp_repl_autocomplete+0x68>
   1b054:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   1b056:	781b      	ldrb	r3, [r3, #0]
   1b058:	2b2e      	cmp	r3, #46	; 0x2e
   1b05a:	d005      	beq.n	1b068 <mp_repl_autocomplete+0x68>
            ++s;
   1b05c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   1b05e:	3301      	adds	r3, #1
   1b060:	66fb      	str	r3, [r7, #108]	; 0x6c
            str = s;
   1b062:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   1b064:	60fb      	str	r3, [r7, #12]
            break;
   1b066:	e006      	b.n	1b076 <mp_repl_autocomplete+0x76>
    for (const char *s = top; --s >= str;) {
   1b068:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   1b06a:	3b01      	subs	r3, #1
   1b06c:	66fb      	str	r3, [r7, #108]	; 0x6c
   1b06e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
   1b070:	68fb      	ldr	r3, [r7, #12]
   1b072:	429a      	cmp	r2, r3
   1b074:	d2d4      	bcs.n	1b020 <mp_repl_autocomplete+0x20>
        }
    }

    size_t nqstr = QSTR_TOTAL();
   1b076:	4b95      	ldr	r3, [pc, #596]	; (1b2cc <mp_repl_autocomplete+0x2cc>)
   1b078:	691b      	ldr	r3, [r3, #16]
   1b07a:	685a      	ldr	r2, [r3, #4]
   1b07c:	4b93      	ldr	r3, [pc, #588]	; (1b2cc <mp_repl_autocomplete+0x2cc>)
   1b07e:	691b      	ldr	r3, [r3, #16]
   1b080:	68db      	ldr	r3, [r3, #12]
   1b082:	4413      	add	r3, r2
   1b084:	637b      	str	r3, [r7, #52]	; 0x34

    // begin search in outer global dict which is accessed from __main__
    mp_obj_t obj = MP_OBJ_FROM_PTR(&mp_module___main__);
   1b086:	4b92      	ldr	r3, [pc, #584]	; (1b2d0 <mp_repl_autocomplete+0x2d0>)
   1b088:	66bb      	str	r3, [r7, #104]	; 0x68
    mp_obj_t dest[2];

    for (;;) {
        // get next word in string to complete
        const char *s_start = str;
   1b08a:	68fb      	ldr	r3, [r7, #12]
   1b08c:	633b      	str	r3, [r7, #48]	; 0x30
        while (str < top && *str != '.') {
   1b08e:	e002      	b.n	1b096 <mp_repl_autocomplete+0x96>
            ++str;
   1b090:	68fb      	ldr	r3, [r7, #12]
   1b092:	3301      	adds	r3, #1
   1b094:	60fb      	str	r3, [r7, #12]
        while (str < top && *str != '.') {
   1b096:	68fa      	ldr	r2, [r7, #12]
   1b098:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1b09a:	429a      	cmp	r2, r3
   1b09c:	d203      	bcs.n	1b0a6 <mp_repl_autocomplete+0xa6>
   1b09e:	68fb      	ldr	r3, [r7, #12]
   1b0a0:	781b      	ldrb	r3, [r3, #0]
   1b0a2:	2b2e      	cmp	r3, #46	; 0x2e
   1b0a4:	d1f4      	bne.n	1b090 <mp_repl_autocomplete+0x90>
        }
        size_t s_len = str - s_start;
   1b0a6:	68fa      	ldr	r2, [r7, #12]
   1b0a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1b0aa:	1ad3      	subs	r3, r2, r3
   1b0ac:	62fb      	str	r3, [r7, #44]	; 0x2c

        if (str < top) {
   1b0ae:	68fa      	ldr	r2, [r7, #12]
   1b0b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1b0b2:	429a      	cmp	r2, r3
   1b0b4:	d21b      	bcs.n	1b0ee <mp_repl_autocomplete+0xee>
            // a complete word, lookup in current object
            qstr q = qstr_find_strn(s_start, s_len);
   1b0b6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
   1b0b8:	6b38      	ldr	r0, [r7, #48]	; 0x30
   1b0ba:	f7e6 f817 	bl	10ec <qstr_find_strn>
   1b0be:	62b8      	str	r0, [r7, #40]	; 0x28
            if (q == MP_QSTR_NULL) {
   1b0c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1b0c2:	2b00      	cmp	r3, #0
   1b0c4:	d101      	bne.n	1b0ca <mp_repl_autocomplete+0xca>
                // lookup will fail
                return 0;
   1b0c6:	2300      	movs	r3, #0
   1b0c8:	e0fc      	b.n	1b2c4 <mp_repl_autocomplete+0x2c4>
            }
            mp_load_method_protected(obj, q, dest, true);
   1b0ca:	f107 0218 	add.w	r2, r7, #24
   1b0ce:	2301      	movs	r3, #1
   1b0d0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   1b0d2:	6eb8      	ldr	r0, [r7, #104]	; 0x68
   1b0d4:	f7f1 fce0 	bl	ca98 <mp_load_method_protected>
            obj = dest[0]; // attribute, method, or MP_OBJ_NULL if nothing found
   1b0d8:	69bb      	ldr	r3, [r7, #24]
   1b0da:	66bb      	str	r3, [r7, #104]	; 0x68

            if (obj == MP_OBJ_NULL) {
   1b0dc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   1b0de:	2b00      	cmp	r3, #0
   1b0e0:	d101      	bne.n	1b0e6 <mp_repl_autocomplete+0xe6>
                // lookup failed
                return 0;
   1b0e2:	2300      	movs	r3, #0
   1b0e4:	e0ee      	b.n	1b2c4 <mp_repl_autocomplete+0x2c4>
            }

            // skip '.' to move to next word
            ++str;
   1b0e6:	68fb      	ldr	r3, [r7, #12]
   1b0e8:	3301      	adds	r3, #1
   1b0ea:	60fb      	str	r3, [r7, #12]
   1b0ec:	e7cd      	b.n	1b08a <mp_repl_autocomplete+0x8a>

        } else {
            // end of string, do completion on this partial name

            // look for matches
            const char *match_str = NULL;
   1b0ee:	2300      	movs	r3, #0
   1b0f0:	667b      	str	r3, [r7, #100]	; 0x64
            size_t match_len = 0;
   1b0f2:	2300      	movs	r3, #0
   1b0f4:	663b      	str	r3, [r7, #96]	; 0x60
            qstr q_first = 0, q_last = 0;
   1b0f6:	2300      	movs	r3, #0
   1b0f8:	65fb      	str	r3, [r7, #92]	; 0x5c
   1b0fa:	2300      	movs	r3, #0
   1b0fc:	65bb      	str	r3, [r7, #88]	; 0x58
            for (qstr q = MP_QSTR_ + 1; q < nqstr; ++q) {
   1b0fe:	2302      	movs	r3, #2
   1b100:	657b      	str	r3, [r7, #84]	; 0x54
   1b102:	e049      	b.n	1b198 <mp_repl_autocomplete+0x198>
                size_t d_len;
                const char *d_str = (const char*)qstr_data(q, &d_len);
   1b104:	f107 0314 	add.w	r3, r7, #20
   1b108:	4619      	mov	r1, r3
   1b10a:	6d78      	ldr	r0, [r7, #84]	; 0x54
   1b10c:	f7e6 f93c 	bl	1388 <qstr_data>
   1b110:	6278      	str	r0, [r7, #36]	; 0x24
                if (s_len <= d_len && strncmp(s_start, d_str, s_len) == 0) {
   1b112:	697b      	ldr	r3, [r7, #20]
   1b114:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   1b116:	429a      	cmp	r2, r3
   1b118:	d83b      	bhi.n	1b192 <mp_repl_autocomplete+0x192>
   1b11a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   1b11c:	6a79      	ldr	r1, [r7, #36]	; 0x24
   1b11e:	6b38      	ldr	r0, [r7, #48]	; 0x30
   1b120:	f001 ff38 	bl	1cf94 <strncmp>
   1b124:	4603      	mov	r3, r0
   1b126:	2b00      	cmp	r3, #0
   1b128:	d133      	bne.n	1b192 <mp_repl_autocomplete+0x192>
                    mp_load_method_protected(obj, q, dest, true);
   1b12a:	f107 0218 	add.w	r2, r7, #24
   1b12e:	2301      	movs	r3, #1
   1b130:	6d79      	ldr	r1, [r7, #84]	; 0x54
   1b132:	6eb8      	ldr	r0, [r7, #104]	; 0x68
   1b134:	f7f1 fcb0 	bl	ca98 <mp_load_method_protected>
                    if (dest[0] != MP_OBJ_NULL) {
   1b138:	69bb      	ldr	r3, [r7, #24]
   1b13a:	2b00      	cmp	r3, #0
   1b13c:	d029      	beq.n	1b192 <mp_repl_autocomplete+0x192>
                        if (match_str == NULL) {
   1b13e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   1b140:	2b00      	cmp	r3, #0
   1b142:	d104      	bne.n	1b14e <mp_repl_autocomplete+0x14e>
                            match_str = d_str;
   1b144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1b146:	667b      	str	r3, [r7, #100]	; 0x64
                            match_len = d_len;
   1b148:	697b      	ldr	r3, [r7, #20]
   1b14a:	663b      	str	r3, [r7, #96]	; 0x60
   1b14c:	e01a      	b.n	1b184 <mp_repl_autocomplete+0x184>
                        } else {
                            // search for longest common prefix of match_str and d_str
                            // (assumes these strings are null-terminated)
                            for (size_t j = s_len; j <= match_len && j <= d_len; ++j) {
   1b14e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1b150:	653b      	str	r3, [r7, #80]	; 0x50
   1b152:	e00f      	b.n	1b174 <mp_repl_autocomplete+0x174>
                                if (match_str[j] != d_str[j]) {
   1b154:	6e7a      	ldr	r2, [r7, #100]	; 0x64
   1b156:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   1b158:	4413      	add	r3, r2
   1b15a:	781a      	ldrb	r2, [r3, #0]
   1b15c:	6a79      	ldr	r1, [r7, #36]	; 0x24
   1b15e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   1b160:	440b      	add	r3, r1
   1b162:	781b      	ldrb	r3, [r3, #0]
   1b164:	429a      	cmp	r2, r3
   1b166:	d002      	beq.n	1b16e <mp_repl_autocomplete+0x16e>
                                    match_len = j;
   1b168:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   1b16a:	663b      	str	r3, [r7, #96]	; 0x60
                                    break;
   1b16c:	e00a      	b.n	1b184 <mp_repl_autocomplete+0x184>
                            for (size_t j = s_len; j <= match_len && j <= d_len; ++j) {
   1b16e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   1b170:	3301      	adds	r3, #1
   1b172:	653b      	str	r3, [r7, #80]	; 0x50
   1b174:	6d3a      	ldr	r2, [r7, #80]	; 0x50
   1b176:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   1b178:	429a      	cmp	r2, r3
   1b17a:	d803      	bhi.n	1b184 <mp_repl_autocomplete+0x184>
   1b17c:	697b      	ldr	r3, [r7, #20]
   1b17e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
   1b180:	429a      	cmp	r2, r3
   1b182:	d9e7      	bls.n	1b154 <mp_repl_autocomplete+0x154>
                                }
                            }
                        }
                        if (q_first == 0) {
   1b184:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
   1b186:	2b00      	cmp	r3, #0
   1b188:	d101      	bne.n	1b18e <mp_repl_autocomplete+0x18e>
                            q_first = q;
   1b18a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   1b18c:	65fb      	str	r3, [r7, #92]	; 0x5c
                        }
                        q_last = q;
   1b18e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   1b190:	65bb      	str	r3, [r7, #88]	; 0x58
            for (qstr q = MP_QSTR_ + 1; q < nqstr; ++q) {
   1b192:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   1b194:	3301      	adds	r3, #1
   1b196:	657b      	str	r3, [r7, #84]	; 0x54
   1b198:	6d7a      	ldr	r2, [r7, #84]	; 0x54
   1b19a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1b19c:	429a      	cmp	r2, r3
   1b19e:	d3b1      	bcc.n	1b104 <mp_repl_autocomplete+0x104>
                    }
                }
            }

            // nothing found
            if (q_first == 0) {
   1b1a0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
   1b1a2:	2b00      	cmp	r3, #0
   1b1a4:	d116      	bne.n	1b1d4 <mp_repl_autocomplete+0x1d4>
                // If there're no better alternatives, and if it's first word
                // in the line, try to complete "import".
                if (s_start == org_str) {
   1b1a6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   1b1a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1b1aa:	429a      	cmp	r2, r3
   1b1ac:	d110      	bne.n	1b1d0 <mp_repl_autocomplete+0x1d0>
                    static const char import_str[] = "import ";
                    if (memcmp(s_start, import_str, s_len) == 0) {
   1b1ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   1b1b0:	4948      	ldr	r1, [pc, #288]	; (1b2d4 <mp_repl_autocomplete+0x2d4>)
   1b1b2:	6b38      	ldr	r0, [r7, #48]	; 0x30
   1b1b4:	f001 fe48 	bl	1ce48 <memcmp>
   1b1b8:	4603      	mov	r3, r0
   1b1ba:	2b00      	cmp	r3, #0
   1b1bc:	d108      	bne.n	1b1d0 <mp_repl_autocomplete+0x1d0>
                        *compl_str = import_str + s_len;
   1b1be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1b1c0:	4a44      	ldr	r2, [pc, #272]	; (1b2d4 <mp_repl_autocomplete+0x2d4>)
   1b1c2:	441a      	add	r2, r3
   1b1c4:	683b      	ldr	r3, [r7, #0]
   1b1c6:	601a      	str	r2, [r3, #0]
                        return sizeof(import_str) - 1 - s_len;
   1b1c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1b1ca:	f1c3 0307 	rsb	r3, r3, #7
   1b1ce:	e079      	b.n	1b2c4 <mp_repl_autocomplete+0x2c4>
                    }
                }

                return 0;
   1b1d0:	2300      	movs	r3, #0
   1b1d2:	e077      	b.n	1b2c4 <mp_repl_autocomplete+0x2c4>
            }

            // 1 match found, or multiple matches with a common prefix
            if (q_first == q_last || match_len > s_len) {
   1b1d4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
   1b1d6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   1b1d8:	429a      	cmp	r2, r3
   1b1da:	d003      	beq.n	1b1e4 <mp_repl_autocomplete+0x1e4>
   1b1dc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
   1b1de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1b1e0:	429a      	cmp	r2, r3
   1b1e2:	d908      	bls.n	1b1f6 <mp_repl_autocomplete+0x1f6>
                *compl_str = match_str + s_len;
   1b1e4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
   1b1e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1b1e8:	441a      	add	r2, r3
   1b1ea:	683b      	ldr	r3, [r7, #0]
   1b1ec:	601a      	str	r2, [r3, #0]
                return match_len - s_len;
   1b1ee:	6e3a      	ldr	r2, [r7, #96]	; 0x60
   1b1f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1b1f2:	1ad3      	subs	r3, r2, r3
   1b1f4:	e066      	b.n	1b2c4 <mp_repl_autocomplete+0x2c4>
            // multiple matches found, print them out

            #define WORD_SLOT_LEN (16)
            #define MAX_LINE_LEN  (4 * WORD_SLOT_LEN)

            int line_len = MAX_LINE_LEN; // force a newline for first word
   1b1f6:	2340      	movs	r3, #64	; 0x40
   1b1f8:	64fb      	str	r3, [r7, #76]	; 0x4c
            for (qstr q = q_first; q <= q_last; ++q) {
   1b1fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
   1b1fc:	64bb      	str	r3, [r7, #72]	; 0x48
   1b1fe:	e057      	b.n	1b2b0 <mp_repl_autocomplete+0x2b0>
                size_t d_len;
                const char *d_str = (const char*)qstr_data(q, &d_len);
   1b200:	f107 0310 	add.w	r3, r7, #16
   1b204:	4619      	mov	r1, r3
   1b206:	6cb8      	ldr	r0, [r7, #72]	; 0x48
   1b208:	f7e6 f8be 	bl	1388 <qstr_data>
   1b20c:	6238      	str	r0, [r7, #32]
                if (s_len <= d_len && strncmp(s_start, d_str, s_len) == 0) {
   1b20e:	693b      	ldr	r3, [r7, #16]
   1b210:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   1b212:	429a      	cmp	r2, r3
   1b214:	d849      	bhi.n	1b2aa <mp_repl_autocomplete+0x2aa>
   1b216:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   1b218:	6a39      	ldr	r1, [r7, #32]
   1b21a:	6b38      	ldr	r0, [r7, #48]	; 0x30
   1b21c:	f001 feba 	bl	1cf94 <strncmp>
   1b220:	4603      	mov	r3, r0
   1b222:	2b00      	cmp	r3, #0
   1b224:	d141      	bne.n	1b2aa <mp_repl_autocomplete+0x2aa>
                    mp_load_method_protected(obj, q, dest, true);
   1b226:	f107 0218 	add.w	r2, r7, #24
   1b22a:	2301      	movs	r3, #1
   1b22c:	6cb9      	ldr	r1, [r7, #72]	; 0x48
   1b22e:	6eb8      	ldr	r0, [r7, #104]	; 0x68
   1b230:	f7f1 fc32 	bl	ca98 <mp_load_method_protected>
                    if (dest[0] != MP_OBJ_NULL) {
   1b234:	69bb      	ldr	r3, [r7, #24]
   1b236:	2b00      	cmp	r3, #0
   1b238:	d037      	beq.n	1b2aa <mp_repl_autocomplete+0x2aa>
                        int gap = (line_len + WORD_SLOT_LEN - 1) / WORD_SLOT_LEN * WORD_SLOT_LEN - line_len;
   1b23a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   1b23c:	330f      	adds	r3, #15
   1b23e:	2b00      	cmp	r3, #0
   1b240:	da00      	bge.n	1b244 <mp_repl_autocomplete+0x244>
   1b242:	330f      	adds	r3, #15
   1b244:	111b      	asrs	r3, r3, #4
   1b246:	011a      	lsls	r2, r3, #4
   1b248:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   1b24a:	1ad3      	subs	r3, r2, r3
   1b24c:	647b      	str	r3, [r7, #68]	; 0x44
                        if (gap < 2) {
   1b24e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   1b250:	2b01      	cmp	r3, #1
   1b252:	dc02      	bgt.n	1b25a <mp_repl_autocomplete+0x25a>
                            gap += WORD_SLOT_LEN;
   1b254:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   1b256:	3310      	adds	r3, #16
   1b258:	647b      	str	r3, [r7, #68]	; 0x44
                        }
                        if (line_len + gap + d_len <= MAX_LINE_LEN) {
   1b25a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
   1b25c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   1b25e:	4413      	add	r3, r2
   1b260:	461a      	mov	r2, r3
   1b262:	693b      	ldr	r3, [r7, #16]
   1b264:	4413      	add	r3, r2
   1b266:	2b40      	cmp	r3, #64	; 0x40
   1b268:	d818      	bhi.n	1b29c <mp_repl_autocomplete+0x29c>
                            // TODO optimise printing of gap?
                            for (int j = 0; j < gap; ++j) {
   1b26a:	2300      	movs	r3, #0
   1b26c:	643b      	str	r3, [r7, #64]	; 0x40
   1b26e:	e006      	b.n	1b27e <mp_repl_autocomplete+0x27e>
                                mp_print_str(print, " ");
   1b270:	4919      	ldr	r1, [pc, #100]	; (1b2d8 <mp_repl_autocomplete+0x2d8>)
   1b272:	6878      	ldr	r0, [r7, #4]
   1b274:	f7e6 fbbe 	bl	19f4 <mp_print_str>
                            for (int j = 0; j < gap; ++j) {
   1b278:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1b27a:	3301      	adds	r3, #1
   1b27c:	643b      	str	r3, [r7, #64]	; 0x40
   1b27e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   1b280:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   1b282:	429a      	cmp	r2, r3
   1b284:	dbf4      	blt.n	1b270 <mp_repl_autocomplete+0x270>
                            }
                            mp_print_str(print, d_str);
   1b286:	6a39      	ldr	r1, [r7, #32]
   1b288:	6878      	ldr	r0, [r7, #4]
   1b28a:	f7e6 fbb3 	bl	19f4 <mp_print_str>
                            line_len += gap + d_len;
   1b28e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
   1b290:	693b      	ldr	r3, [r7, #16]
   1b292:	441a      	add	r2, r3
   1b294:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   1b296:	4413      	add	r3, r2
   1b298:	64fb      	str	r3, [r7, #76]	; 0x4c
   1b29a:	e006      	b.n	1b2aa <mp_repl_autocomplete+0x2aa>
                        } else {
                            mp_printf(print, "\n%s", d_str);
   1b29c:	6a3a      	ldr	r2, [r7, #32]
   1b29e:	490f      	ldr	r1, [pc, #60]	; (1b2dc <mp_repl_autocomplete+0x2dc>)
   1b2a0:	6878      	ldr	r0, [r7, #4]
   1b2a2:	f7e6 febb 	bl	201c <mp_printf>
                            line_len = d_len;
   1b2a6:	693b      	ldr	r3, [r7, #16]
   1b2a8:	64fb      	str	r3, [r7, #76]	; 0x4c
            for (qstr q = q_first; q <= q_last; ++q) {
   1b2aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   1b2ac:	3301      	adds	r3, #1
   1b2ae:	64bb      	str	r3, [r7, #72]	; 0x48
   1b2b0:	6cba      	ldr	r2, [r7, #72]	; 0x48
   1b2b2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   1b2b4:	429a      	cmp	r2, r3
   1b2b6:	d9a3      	bls.n	1b200 <mp_repl_autocomplete+0x200>
                        }
                    }
                }
            }
            mp_print_str(print, "\n");
   1b2b8:	4909      	ldr	r1, [pc, #36]	; (1b2e0 <mp_repl_autocomplete+0x2e0>)
   1b2ba:	6878      	ldr	r0, [r7, #4]
   1b2bc:	f7e6 fb9a 	bl	19f4 <mp_print_str>

            return (size_t)(-1); // indicate many matches
   1b2c0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
        }
    }
}
   1b2c4:	4618      	mov	r0, r3
   1b2c6:	3770      	adds	r7, #112	; 0x70
   1b2c8:	46bd      	mov	sp, r7
   1b2ca:	bd80      	pop	{r7, pc}
   1b2cc:	200012f0 	.word	0x200012f0
   1b2d0:	00021570 	.word	0x00021570
   1b2d4:	00024d7c 	.word	0x00024d7c
   1b2d8:	00024d70 	.word	0x00024d70
   1b2dc:	00024d74 	.word	0x00024d74
   1b2e0:	00024d78 	.word	0x00024d78

0001b2e4 <mp_small_int_mul_overflow>:
 * THE SOFTWARE.
 */

#include "py/smallint.h"

bool mp_small_int_mul_overflow(mp_int_t x, mp_int_t y) {
   1b2e4:	b480      	push	{r7}
   1b2e6:	b083      	sub	sp, #12
   1b2e8:	af00      	add	r7, sp, #0
   1b2ea:	6078      	str	r0, [r7, #4]
   1b2ec:	6039      	str	r1, [r7, #0]
    // Check for multiply overflow; see CERT INT32-C
    if (x > 0) { // x is positive
   1b2ee:	687b      	ldr	r3, [r7, #4]
   1b2f0:	2b00      	cmp	r3, #0
   1b2f2:	dd16      	ble.n	1b322 <mp_small_int_mul_overflow+0x3e>
        if (y > 0) { // x and y are positive
   1b2f4:	683b      	ldr	r3, [r7, #0]
   1b2f6:	2b00      	cmp	r3, #0
   1b2f8:	dd09      	ble.n	1b30e <mp_small_int_mul_overflow+0x2a>
            if (x > (MP_SMALL_INT_MAX / y)) {
   1b2fa:	f06f 4240 	mvn.w	r2, #3221225472	; 0xc0000000
   1b2fe:	683b      	ldr	r3, [r7, #0]
   1b300:	fb92 f2f3 	sdiv	r2, r2, r3
   1b304:	687b      	ldr	r3, [r7, #4]
   1b306:	429a      	cmp	r2, r3
   1b308:	da25      	bge.n	1b356 <mp_small_int_mul_overflow+0x72>
                return true;
   1b30a:	2301      	movs	r3, #1
   1b30c:	e024      	b.n	1b358 <mp_small_int_mul_overflow+0x74>
            }
        } else { // x positive, y nonpositive
            if (y < (MP_SMALL_INT_MIN / x)) {
   1b30e:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
   1b312:	687b      	ldr	r3, [r7, #4]
   1b314:	fb92 f2f3 	sdiv	r2, r2, r3
   1b318:	683b      	ldr	r3, [r7, #0]
   1b31a:	429a      	cmp	r2, r3
   1b31c:	dd1b      	ble.n	1b356 <mp_small_int_mul_overflow+0x72>
                return true;
   1b31e:	2301      	movs	r3, #1
   1b320:	e01a      	b.n	1b358 <mp_small_int_mul_overflow+0x74>
            }
        } // x positive, y nonpositive
    } else { // x is nonpositive
        if (y > 0) { // x is nonpositive, y is positive
   1b322:	683b      	ldr	r3, [r7, #0]
   1b324:	2b00      	cmp	r3, #0
   1b326:	dd09      	ble.n	1b33c <mp_small_int_mul_overflow+0x58>
            if (x < (MP_SMALL_INT_MIN / y)) {
   1b328:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
   1b32c:	683b      	ldr	r3, [r7, #0]
   1b32e:	fb92 f2f3 	sdiv	r2, r2, r3
   1b332:	687b      	ldr	r3, [r7, #4]
   1b334:	429a      	cmp	r2, r3
   1b336:	dd0e      	ble.n	1b356 <mp_small_int_mul_overflow+0x72>
                return true;
   1b338:	2301      	movs	r3, #1
   1b33a:	e00d      	b.n	1b358 <mp_small_int_mul_overflow+0x74>
            }
        } else { // x and y are nonpositive
            if (x != 0 && y < (MP_SMALL_INT_MAX / x)) {
   1b33c:	687b      	ldr	r3, [r7, #4]
   1b33e:	2b00      	cmp	r3, #0
   1b340:	d009      	beq.n	1b356 <mp_small_int_mul_overflow+0x72>
   1b342:	f06f 4240 	mvn.w	r2, #3221225472	; 0xc0000000
   1b346:	687b      	ldr	r3, [r7, #4]
   1b348:	fb92 f2f3 	sdiv	r2, r2, r3
   1b34c:	683b      	ldr	r3, [r7, #0]
   1b34e:	429a      	cmp	r2, r3
   1b350:	dd01      	ble.n	1b356 <mp_small_int_mul_overflow+0x72>
                return true;
   1b352:	2301      	movs	r3, #1
   1b354:	e000      	b.n	1b358 <mp_small_int_mul_overflow+0x74>
            }
        } // End if x and y are nonpositive
    } // End if x is nonpositive
    return false;
   1b356:	2300      	movs	r3, #0
}
   1b358:	4618      	mov	r0, r3
   1b35a:	370c      	adds	r7, #12
   1b35c:	46bd      	mov	sp, r7
   1b35e:	f85d 7b04 	ldr.w	r7, [sp], #4
   1b362:	4770      	bx	lr

0001b364 <mp_small_int_modulo>:

mp_int_t mp_small_int_modulo(mp_int_t dividend, mp_int_t divisor) {
   1b364:	b480      	push	{r7}
   1b366:	b083      	sub	sp, #12
   1b368:	af00      	add	r7, sp, #0
   1b36a:	6078      	str	r0, [r7, #4]
   1b36c:	6039      	str	r1, [r7, #0]
    // Python specs require that mod has same sign as second operand
    dividend %= divisor;
   1b36e:	687b      	ldr	r3, [r7, #4]
   1b370:	683a      	ldr	r2, [r7, #0]
   1b372:	fb93 f2f2 	sdiv	r2, r3, r2
   1b376:	6839      	ldr	r1, [r7, #0]
   1b378:	fb01 f202 	mul.w	r2, r1, r2
   1b37c:	1a9b      	subs	r3, r3, r2
   1b37e:	607b      	str	r3, [r7, #4]
    if ((dividend < 0 && divisor > 0) || (dividend > 0 && divisor < 0)) {
   1b380:	687b      	ldr	r3, [r7, #4]
   1b382:	2b00      	cmp	r3, #0
   1b384:	da02      	bge.n	1b38c <mp_small_int_modulo+0x28>
   1b386:	683b      	ldr	r3, [r7, #0]
   1b388:	2b00      	cmp	r3, #0
   1b38a:	dc05      	bgt.n	1b398 <mp_small_int_modulo+0x34>
   1b38c:	687b      	ldr	r3, [r7, #4]
   1b38e:	2b00      	cmp	r3, #0
   1b390:	dd06      	ble.n	1b3a0 <mp_small_int_modulo+0x3c>
   1b392:	683b      	ldr	r3, [r7, #0]
   1b394:	2b00      	cmp	r3, #0
   1b396:	da03      	bge.n	1b3a0 <mp_small_int_modulo+0x3c>
        dividend += divisor;
   1b398:	687a      	ldr	r2, [r7, #4]
   1b39a:	683b      	ldr	r3, [r7, #0]
   1b39c:	4413      	add	r3, r2
   1b39e:	607b      	str	r3, [r7, #4]
    }
    return dividend;
   1b3a0:	687b      	ldr	r3, [r7, #4]
}
   1b3a2:	4618      	mov	r0, r3
   1b3a4:	370c      	adds	r7, #12
   1b3a6:	46bd      	mov	sp, r7
   1b3a8:	f85d 7b04 	ldr.w	r7, [sp], #4
   1b3ac:	4770      	bx	lr
   1b3ae:	bf00      	nop

0001b3b0 <mp_small_int_floor_divide>:

mp_int_t mp_small_int_floor_divide(mp_int_t num, mp_int_t denom) {
   1b3b0:	b480      	push	{r7}
   1b3b2:	b083      	sub	sp, #12
   1b3b4:	af00      	add	r7, sp, #0
   1b3b6:	6078      	str	r0, [r7, #4]
   1b3b8:	6039      	str	r1, [r7, #0]
    if (num >= 0) {
   1b3ba:	687b      	ldr	r3, [r7, #4]
   1b3bc:	2b00      	cmp	r3, #0
   1b3be:	db08      	blt.n	1b3d2 <mp_small_int_floor_divide+0x22>
        if (denom < 0) {
   1b3c0:	683b      	ldr	r3, [r7, #0]
   1b3c2:	2b00      	cmp	r3, #0
   1b3c4:	da0e      	bge.n	1b3e4 <mp_small_int_floor_divide+0x34>
            num += -denom - 1;
   1b3c6:	683b      	ldr	r3, [r7, #0]
   1b3c8:	43db      	mvns	r3, r3
   1b3ca:	687a      	ldr	r2, [r7, #4]
   1b3cc:	4413      	add	r3, r2
   1b3ce:	607b      	str	r3, [r7, #4]
   1b3d0:	e008      	b.n	1b3e4 <mp_small_int_floor_divide+0x34>
        }
    } else {
        if (denom >= 0) {
   1b3d2:	683b      	ldr	r3, [r7, #0]
   1b3d4:	2b00      	cmp	r3, #0
   1b3d6:	db05      	blt.n	1b3e4 <mp_small_int_floor_divide+0x34>
            num += -denom + 1;
   1b3d8:	683b      	ldr	r3, [r7, #0]
   1b3da:	f1c3 0301 	rsb	r3, r3, #1
   1b3de:	687a      	ldr	r2, [r7, #4]
   1b3e0:	4413      	add	r3, r2
   1b3e2:	607b      	str	r3, [r7, #4]
        }
    }
    return num / denom;
   1b3e4:	687a      	ldr	r2, [r7, #4]
   1b3e6:	683b      	ldr	r3, [r7, #0]
   1b3e8:	fb92 f3f3 	sdiv	r3, r2, r3
}
   1b3ec:	4618      	mov	r0, r3
   1b3ee:	370c      	adds	r7, #12
   1b3f0:	46bd      	mov	sp, r7
   1b3f2:	f85d 7b04 	ldr.w	r7, [sp], #4
   1b3f6:	4770      	bx	lr

0001b3f8 <printf>:
int putchar(int c);
int puts(const char *s);
int vsnprintf(char *str, size_t size, const char *fmt, va_list ap);
int snprintf(char *str, size_t size, const char *fmt, ...);

int printf(const char *fmt, ...) {
   1b3f8:	b40f      	push	{r0, r1, r2, r3}
   1b3fa:	b580      	push	{r7, lr}
   1b3fc:	b082      	sub	sp, #8
   1b3fe:	af00      	add	r7, sp, #0
    va_list ap;
    va_start(ap, fmt);
   1b400:	f107 0314 	add.w	r3, r7, #20
   1b404:	603b      	str	r3, [r7, #0]
    int ret = mp_vprintf(&mp_plat_print, fmt, ap);
   1b406:	683a      	ldr	r2, [r7, #0]
   1b408:	6939      	ldr	r1, [r7, #16]
   1b40a:	4806      	ldr	r0, [pc, #24]	; (1b424 <printf+0x2c>)
   1b40c:	f7e6 fe1c 	bl	2048 <mp_vprintf>
   1b410:	6078      	str	r0, [r7, #4]
    va_end(ap);
    return ret;
   1b412:	687b      	ldr	r3, [r7, #4]
}
   1b414:	4618      	mov	r0, r3
   1b416:	3708      	adds	r7, #8
   1b418:	46bd      	mov	sp, r7
   1b41a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
   1b41e:	b004      	add	sp, #16
   1b420:	4770      	bx	lr
   1b422:	bf00      	nop
   1b424:	0001f75c 	.word	0x0001f75c

0001b428 <vprintf>:

int vprintf(const char *fmt, va_list ap) {
   1b428:	b580      	push	{r7, lr}
   1b42a:	b082      	sub	sp, #8
   1b42c:	af00      	add	r7, sp, #0
   1b42e:	6078      	str	r0, [r7, #4]
   1b430:	6039      	str	r1, [r7, #0]
    return mp_vprintf(&mp_plat_print, fmt, ap);
   1b432:	683a      	ldr	r2, [r7, #0]
   1b434:	6879      	ldr	r1, [r7, #4]
   1b436:	4804      	ldr	r0, [pc, #16]	; (1b448 <vprintf+0x20>)
   1b438:	f7e6 fe06 	bl	2048 <mp_vprintf>
   1b43c:	4603      	mov	r3, r0
}
   1b43e:	4618      	mov	r0, r3
   1b440:	3708      	adds	r7, #8
   1b442:	46bd      	mov	sp, r7
   1b444:	bd80      	pop	{r7, pc}
   1b446:	bf00      	nop
   1b448:	0001f75c 	.word	0x0001f75c

0001b44c <putchar>:
    return ret;
}
#endif

// need this because gcc optimises printf("%c", c) -> putchar(c), and printf("a") -> putchar('a')
int putchar(int c) {
   1b44c:	b580      	push	{r7, lr}
   1b44e:	b084      	sub	sp, #16
   1b450:	af00      	add	r7, sp, #0
   1b452:	6078      	str	r0, [r7, #4]
    char chr = c;
   1b454:	687b      	ldr	r3, [r7, #4]
   1b456:	b2db      	uxtb	r3, r3
   1b458:	73fb      	strb	r3, [r7, #15]
    mp_hal_stdout_tx_strn_cooked(&chr, 1);
   1b45a:	f107 030f 	add.w	r3, r7, #15
   1b45e:	2101      	movs	r1, #1
   1b460:	4618      	mov	r0, r3
   1b462:	f001 f995 	bl	1c790 <mp_hal_stdout_tx_strn_cooked>
    return chr;
   1b466:	7bfb      	ldrb	r3, [r7, #15]
}
   1b468:	4618      	mov	r0, r3
   1b46a:	3710      	adds	r7, #16
   1b46c:	46bd      	mov	sp, r7
   1b46e:	bd80      	pop	{r7, pc}

0001b470 <puts>:

// need this because gcc optimises printf("string\n") -> puts("string")
int puts(const char *s) {
   1b470:	b580      	push	{r7, lr}
   1b472:	b084      	sub	sp, #16
   1b474:	af00      	add	r7, sp, #0
   1b476:	6078      	str	r0, [r7, #4]
    mp_hal_stdout_tx_strn_cooked(s, strlen(s));
   1b478:	6878      	ldr	r0, [r7, #4]
   1b47a:	f001 fd37 	bl	1ceec <strlen>
   1b47e:	4603      	mov	r3, r0
   1b480:	4619      	mov	r1, r3
   1b482:	6878      	ldr	r0, [r7, #4]
   1b484:	f001 f984 	bl	1c790 <mp_hal_stdout_tx_strn_cooked>
    char chr = '\n';
   1b488:	230a      	movs	r3, #10
   1b48a:	73fb      	strb	r3, [r7, #15]
    mp_hal_stdout_tx_strn_cooked(&chr, 1);
   1b48c:	f107 030f 	add.w	r3, r7, #15
   1b490:	2101      	movs	r1, #1
   1b492:	4618      	mov	r0, r3
   1b494:	f001 f97c 	bl	1c790 <mp_hal_stdout_tx_strn_cooked>
    return 1;
   1b498:	2301      	movs	r3, #1
}
   1b49a:	4618      	mov	r0, r3
   1b49c:	3710      	adds	r7, #16
   1b49e:	46bd      	mov	sp, r7
   1b4a0:	bd80      	pop	{r7, pc}
   1b4a2:	bf00      	nop

0001b4a4 <strn_print_strn>:
typedef struct _strn_print_env_t {
    char *cur;
    size_t remain;
} strn_print_env_t;

STATIC void strn_print_strn(void *data, const char *str, size_t len) {
   1b4a4:	b580      	push	{r7, lr}
   1b4a6:	b086      	sub	sp, #24
   1b4a8:	af00      	add	r7, sp, #0
   1b4aa:	60f8      	str	r0, [r7, #12]
   1b4ac:	60b9      	str	r1, [r7, #8]
   1b4ae:	607a      	str	r2, [r7, #4]
    strn_print_env_t *strn_print_env = data;
   1b4b0:	68fb      	ldr	r3, [r7, #12]
   1b4b2:	617b      	str	r3, [r7, #20]
    if (len > strn_print_env->remain) {
   1b4b4:	697b      	ldr	r3, [r7, #20]
   1b4b6:	685a      	ldr	r2, [r3, #4]
   1b4b8:	687b      	ldr	r3, [r7, #4]
   1b4ba:	429a      	cmp	r2, r3
   1b4bc:	d202      	bcs.n	1b4c4 <strn_print_strn+0x20>
        len = strn_print_env->remain;
   1b4be:	697b      	ldr	r3, [r7, #20]
   1b4c0:	685b      	ldr	r3, [r3, #4]
   1b4c2:	607b      	str	r3, [r7, #4]
    }
    memcpy(strn_print_env->cur, str, len);
   1b4c4:	697b      	ldr	r3, [r7, #20]
   1b4c6:	681b      	ldr	r3, [r3, #0]
   1b4c8:	687a      	ldr	r2, [r7, #4]
   1b4ca:	68b9      	ldr	r1, [r7, #8]
   1b4cc:	4618      	mov	r0, r3
   1b4ce:	f001 fbd3 	bl	1cc78 <memcpy>
    strn_print_env->cur += len;
   1b4d2:	697b      	ldr	r3, [r7, #20]
   1b4d4:	681a      	ldr	r2, [r3, #0]
   1b4d6:	687b      	ldr	r3, [r7, #4]
   1b4d8:	441a      	add	r2, r3
   1b4da:	697b      	ldr	r3, [r7, #20]
   1b4dc:	601a      	str	r2, [r3, #0]
    strn_print_env->remain -= len;
   1b4de:	697b      	ldr	r3, [r7, #20]
   1b4e0:	685a      	ldr	r2, [r3, #4]
   1b4e2:	687b      	ldr	r3, [r7, #4]
   1b4e4:	1ad2      	subs	r2, r2, r3
   1b4e6:	697b      	ldr	r3, [r7, #20]
   1b4e8:	605a      	str	r2, [r3, #4]
}
   1b4ea:	bf00      	nop
   1b4ec:	3718      	adds	r7, #24
   1b4ee:	46bd      	mov	sp, r7
   1b4f0:	bd80      	pop	{r7, pc}
   1b4f2:	bf00      	nop

0001b4f4 <vsnprintf>:
// uClibc requires this alias to be defined, or there may be link errors
// when linkings against it statically.
int __GI_vsnprintf(char *str, size_t size, const char *fmt, va_list ap) __attribute__((weak, alias ("vsnprintf")));
#endif

int vsnprintf(char *str, size_t size, const char *fmt, va_list ap) {
   1b4f4:	b580      	push	{r7, lr}
   1b4f6:	b08a      	sub	sp, #40	; 0x28
   1b4f8:	af00      	add	r7, sp, #0
   1b4fa:	60f8      	str	r0, [r7, #12]
   1b4fc:	60b9      	str	r1, [r7, #8]
   1b4fe:	607a      	str	r2, [r7, #4]
   1b500:	603b      	str	r3, [r7, #0]
    strn_print_env_t strn_print_env = {str, size};
   1b502:	68fb      	ldr	r3, [r7, #12]
   1b504:	61fb      	str	r3, [r7, #28]
   1b506:	68bb      	ldr	r3, [r7, #8]
   1b508:	623b      	str	r3, [r7, #32]
    mp_print_t print = {&strn_print_env, strn_print_strn};
   1b50a:	f107 031c 	add.w	r3, r7, #28
   1b50e:	617b      	str	r3, [r7, #20]
   1b510:	4b0e      	ldr	r3, [pc, #56]	; (1b54c <vsnprintf+0x58>)
   1b512:	61bb      	str	r3, [r7, #24]
    int len = mp_vprintf(&print, fmt, ap);
   1b514:	f107 0314 	add.w	r3, r7, #20
   1b518:	683a      	ldr	r2, [r7, #0]
   1b51a:	6879      	ldr	r1, [r7, #4]
   1b51c:	4618      	mov	r0, r3
   1b51e:	f7e6 fd93 	bl	2048 <mp_vprintf>
   1b522:	6278      	str	r0, [r7, #36]	; 0x24
    // add terminating null byte
    if (size > 0) {
   1b524:	68bb      	ldr	r3, [r7, #8]
   1b526:	2b00      	cmp	r3, #0
   1b528:	d00a      	beq.n	1b540 <vsnprintf+0x4c>
        if (strn_print_env.remain == 0) {
   1b52a:	6a3b      	ldr	r3, [r7, #32]
   1b52c:	2b00      	cmp	r3, #0
   1b52e:	d104      	bne.n	1b53a <vsnprintf+0x46>
            strn_print_env.cur[-1] = 0;
   1b530:	69fb      	ldr	r3, [r7, #28]
   1b532:	3b01      	subs	r3, #1
   1b534:	2200      	movs	r2, #0
   1b536:	701a      	strb	r2, [r3, #0]
   1b538:	e002      	b.n	1b540 <vsnprintf+0x4c>
        } else {
            strn_print_env.cur[0] = 0;
   1b53a:	69fb      	ldr	r3, [r7, #28]
   1b53c:	2200      	movs	r2, #0
   1b53e:	701a      	strb	r2, [r3, #0]
        }
    }
    return len;
   1b540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   1b542:	4618      	mov	r0, r3
   1b544:	3728      	adds	r7, #40	; 0x28
   1b546:	46bd      	mov	sp, r7
   1b548:	bd80      	pop	{r7, pc}
   1b54a:	bf00      	nop
   1b54c:	0001b4a5 	.word	0x0001b4a5

0001b550 <snprintf>:

int snprintf(char *str, size_t size, const char *fmt, ...) {
   1b550:	b40c      	push	{r2, r3}
   1b552:	b580      	push	{r7, lr}
   1b554:	b084      	sub	sp, #16
   1b556:	af00      	add	r7, sp, #0
   1b558:	6078      	str	r0, [r7, #4]
   1b55a:	6039      	str	r1, [r7, #0]
    va_list ap;
    va_start(ap, fmt);
   1b55c:	f107 031c 	add.w	r3, r7, #28
   1b560:	60bb      	str	r3, [r7, #8]
    int ret = vsnprintf(str, size, fmt, ap);
   1b562:	68bb      	ldr	r3, [r7, #8]
   1b564:	69ba      	ldr	r2, [r7, #24]
   1b566:	6839      	ldr	r1, [r7, #0]
   1b568:	6878      	ldr	r0, [r7, #4]
   1b56a:	f7ff ffc3 	bl	1b4f4 <vsnprintf>
   1b56e:	60f8      	str	r0, [r7, #12]
    va_end(ap);
    return ret;
   1b570:	68fb      	ldr	r3, [r7, #12]
}
   1b572:	4618      	mov	r0, r3
   1b574:	3710      	adds	r7, #16
   1b576:	46bd      	mov	sp, r7
   1b578:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
   1b57c:	b002      	add	sp, #8
   1b57e:	4770      	bx	lr

0001b580 <do_str>:
#include "driverlib/gpio.h"
#include "driverlib/rom.h"
#include "driverlib/rom_map.h"

#if MICROPY_ENABLE_COMPILER
void do_str(const char *src, mp_parse_input_kind_t input_kind) {
   1b580:	b580      	push	{r7, lr}
   1b582:	b094      	sub	sp, #80	; 0x50
   1b584:	af00      	add	r7, sp, #0
   1b586:	6078      	str	r0, [r7, #4]
   1b588:	6039      	str	r1, [r7, #0]
    nlr_buf_t nlr;
    if (nlr_push(&nlr) == 0) {
   1b58a:	f107 0314 	add.w	r3, r7, #20
   1b58e:	4618      	mov	r0, r3
   1b590:	f7e4 fe94 	bl	2bc <nlr_push>
   1b594:	4603      	mov	r3, r0
   1b596:	2b00      	cmp	r3, #0
   1b598:	d121      	bne.n	1b5de <do_str+0x5e>
        mp_lexer_t *lex = mp_lexer_new_from_str_len(MP_QSTR__lt_stdin_gt_, src, strlen(src), 0);
   1b59a:	6878      	ldr	r0, [r7, #4]
   1b59c:	f001 fca6 	bl	1ceec <strlen>
   1b5a0:	4602      	mov	r2, r0
   1b5a2:	2300      	movs	r3, #0
   1b5a4:	6879      	ldr	r1, [r7, #4]
   1b5a6:	2037      	movs	r0, #55	; 0x37
   1b5a8:	f7e8 f978 	bl	389c <mp_lexer_new_from_str_len>
   1b5ac:	64f8      	str	r0, [r7, #76]	; 0x4c
        qstr source_name = lex->source_name;
   1b5ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   1b5b0:	681b      	ldr	r3, [r3, #0]
   1b5b2:	64bb      	str	r3, [r7, #72]	; 0x48
        mp_parse_tree_t parse_tree = mp_parse(lex, input_kind);
   1b5b4:	f107 030c 	add.w	r3, r7, #12
   1b5b8:	683a      	ldr	r2, [r7, #0]
   1b5ba:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
   1b5bc:	4618      	mov	r0, r3
   1b5be:	f7e8 ff69 	bl	4494 <mp_parse>
        mp_obj_t module_fun = mp_compile(&parse_tree, source_name, MP_EMIT_OPT_NONE, true);
   1b5c2:	f107 000c 	add.w	r0, r7, #12
   1b5c6:	2301      	movs	r3, #1
   1b5c8:	2200      	movs	r2, #0
   1b5ca:	6cb9      	ldr	r1, [r7, #72]	; 0x48
   1b5cc:	f7ee f9ca 	bl	9964 <mp_compile>
   1b5d0:	6478      	str	r0, [r7, #68]	; 0x44
        mp_call_function_0(module_fun);
   1b5d2:	6c78      	ldr	r0, [r7, #68]	; 0x44
   1b5d4:	f7f0 fd10 	bl	bff8 <mp_call_function_0>
        nlr_pop();
   1b5d8:	f7e4 fe5e 	bl	298 <nlr_pop>
    } else {
        // uncaught exception
        mp_obj_print_exception(&mp_plat_print, (mp_obj_t)nlr.ret_val);
    }
}
   1b5dc:	e004      	b.n	1b5e8 <do_str+0x68>
        mp_obj_print_exception(&mp_plat_print, (mp_obj_t)nlr.ret_val);
   1b5de:	69bb      	ldr	r3, [r7, #24]
   1b5e0:	4619      	mov	r1, r3
   1b5e2:	4803      	ldr	r0, [pc, #12]	; (1b5f0 <do_str+0x70>)
   1b5e4:	f7f2 fad4 	bl	db90 <mp_obj_print_exception>
}
   1b5e8:	bf00      	nop
   1b5ea:	3750      	adds	r7, #80	; 0x50
   1b5ec:	46bd      	mov	sp, r7
   1b5ee:	bd80      	pop	{r7, pc}
   1b5f0:	0001f75c 	.word	0x0001f75c

0001b5f4 <main>:
static char *stack_top;
#if MICROPY_ENABLE_GC
static char heap[2048];
#endif

int main(int argc, char **argv) {
   1b5f4:	b580      	push	{r7, lr}
   1b5f6:	b084      	sub	sp, #16
   1b5f8:	af00      	add	r7, sp, #0
   1b5fa:	6078      	str	r0, [r7, #4]
   1b5fc:	6039      	str	r1, [r7, #0]
    int stack_dummy;
    stack_top = (char*)&stack_dummy;
   1b5fe:	4a0c      	ldr	r2, [pc, #48]	; (1b630 <main+0x3c>)
   1b600:	f107 030c 	add.w	r3, r7, #12
   1b604:	6013      	str	r3, [r2, #0]

    #if MICROPY_ENABLE_GC
    gc_init(heap, heap + sizeof(heap));
   1b606:	4b0b      	ldr	r3, [pc, #44]	; (1b634 <main+0x40>)
   1b608:	4619      	mov	r1, r3
   1b60a:	480b      	ldr	r0, [pc, #44]	; (1b638 <main+0x44>)
   1b60c:	f7e4 ffc6 	bl	59c <gc_init>
    #endif
    mp_init();
   1b610:	f7f0 f8cc 	bl	b7ac <mp_init>

    readline_init0();
   1b614:	f001 fdbe 	bl	1d194 <readline_init0>
    pin_init0();
   1b618:	f000 fa70 	bl	1bafc <pin_init0>
        if (pyexec_event_repl_process_char(c)) {
            break;
        }
    }
    #else
    pyexec_friendly_repl();
   1b61c:	f001 fa3a 	bl	1ca94 <pyexec_friendly_repl>
    //do_str("print('hello world!', list(x+1 for x in range(10)), end='eol\\n')", MP_PARSE_SINGLE_INPUT);
    //do_str("for i in range(10):\r\n  print(i)", MP_PARSE_FILE_INPUT);
    #else
    pyexec_frozen_module("frozentest.py");
    #endif
    mp_deinit();
   1b620:	f7f0 f8ea 	bl	b7f8 <mp_deinit>
    return 0;
   1b624:	2300      	movs	r3, #0
}
   1b626:	4618      	mov	r0, r3
   1b628:	3710      	adds	r7, #16
   1b62a:	46bd      	mov	sp, r7
   1b62c:	bd80      	pop	{r7, pc}
   1b62e:	bf00      	nop
   1b630:	200008c0 	.word	0x200008c0
   1b634:	200010c4 	.word	0x200010c4
   1b638:	200008c4 	.word	0x200008c4

0001b63c <gc_collect>:

void gc_collect(void) {
   1b63c:	b580      	push	{r7, lr}
   1b63e:	b082      	sub	sp, #8
   1b640:	af00      	add	r7, sp, #0
    // WARNING: This gc_collect implementation doesn't try to get root
    // pointers from CPU registers, and thus may function incorrectly.
    void *dummy;
    gc_collect_start();
   1b642:	f7e5 f80f 	bl	664 <gc_collect_start>
    gc_collect_root(&dummy, ((mp_uint_t)stack_top - (mp_uint_t)&dummy) / sizeof(mp_uint_t));
   1b646:	4b09      	ldr	r3, [pc, #36]	; (1b66c <gc_collect+0x30>)
   1b648:	681b      	ldr	r3, [r3, #0]
   1b64a:	461a      	mov	r2, r3
   1b64c:	1d3b      	adds	r3, r7, #4
   1b64e:	1ad3      	subs	r3, r2, r3
   1b650:	089a      	lsrs	r2, r3, #2
   1b652:	1d3b      	adds	r3, r7, #4
   1b654:	4611      	mov	r1, r2
   1b656:	4618      	mov	r0, r3
   1b658:	f7e5 f844 	bl	6e4 <gc_collect_root>
    gc_collect_end();
   1b65c:	f7e5 f87a 	bl	754 <gc_collect_end>
    gc_dump_info();
   1b660:	f7e5 fbb6 	bl	dd0 <gc_dump_info>
}
   1b664:	bf00      	nop
   1b666:	3708      	adds	r7, #8
   1b668:	46bd      	mov	sp, r7
   1b66a:	bd80      	pop	{r7, pc}
   1b66c:	200008c0 	.word	0x200008c0

0001b670 <mp_lexer_new_from_file>:
//    // end the GC
//    gc_collect_end();
//    gc_dump_info();
//}

mp_lexer_t *mp_lexer_new_from_file(const char *filename) {
   1b670:	b580      	push	{r7, lr}
   1b672:	b082      	sub	sp, #8
   1b674:	af00      	add	r7, sp, #0
   1b676:	6078      	str	r0, [r7, #4]
    mp_raise_OSError(MP_ENOENT);
   1b678:	2002      	movs	r0, #2
   1b67a:	f7f1 fdc5 	bl	d208 <mp_raise_OSError>
   1b67e:	bf00      	nop

0001b680 <mp_import_stat>:
}

mp_import_stat_t mp_import_stat(const char *path) { // @suppress("Type cannot be resolved")
   1b680:	b480      	push	{r7}
   1b682:	b083      	sub	sp, #12
   1b684:	af00      	add	r7, sp, #0
   1b686:	6078      	str	r0, [r7, #4]
    return MP_IMPORT_STAT_NO_EXIST;
   1b688:	2300      	movs	r3, #0
}
   1b68a:	4618      	mov	r0, r3
   1b68c:	370c      	adds	r7, #12
   1b68e:	46bd      	mov	sp, r7
   1b690:	f85d 7b04 	ldr.w	r7, [sp], #4
   1b694:	4770      	bx	lr
   1b696:	bf00      	nop

0001b698 <mp_builtin_open>:

mp_obj_t mp_builtin_open(size_t n_args, const mp_obj_t *args, mp_map_t *kwargs) {
   1b698:	b480      	push	{r7}
   1b69a:	b085      	sub	sp, #20
   1b69c:	af00      	add	r7, sp, #0
   1b69e:	60f8      	str	r0, [r7, #12]
   1b6a0:	60b9      	str	r1, [r7, #8]
   1b6a2:	607a      	str	r2, [r7, #4]
    return mp_const_none;
   1b6a4:	4b03      	ldr	r3, [pc, #12]	; (1b6b4 <mp_builtin_open+0x1c>)
}
   1b6a6:	4618      	mov	r0, r3
   1b6a8:	3714      	adds	r7, #20
   1b6aa:	46bd      	mov	sp, r7
   1b6ac:	f85d 7b04 	ldr.w	r7, [sp], #4
   1b6b0:	4770      	bx	lr
   1b6b2:	bf00      	nop
   1b6b4:	0002345c 	.word	0x0002345c

0001b6b8 <nlr_jump_fail>:
MP_DEFINE_CONST_FUN_OBJ_KW(mp_builtin_open_obj, 1, mp_builtin_open);

void nlr_jump_fail(void *val) {
   1b6b8:	b480      	push	{r7}
   1b6ba:	b083      	sub	sp, #12
   1b6bc:	af00      	add	r7, sp, #0
   1b6be:	6078      	str	r0, [r7, #4]
    while (1);
   1b6c0:	e7fe      	b.n	1b6c0 <nlr_jump_fail+0x8>
   1b6c2:	bf00      	nop

0001b6c4 <__fatal_error>:
}

void NORETURN __fatal_error(const char *msg) {
   1b6c4:	b480      	push	{r7}
   1b6c6:	b083      	sub	sp, #12
   1b6c8:	af00      	add	r7, sp, #0
   1b6ca:	6078      	str	r0, [r7, #4]
    while (1);
   1b6cc:	e7fe      	b.n	1b6cc <__fatal_error+0x8>
   1b6ce:	bf00      	nop

0001b6d0 <__assert_func>:
}

#ifndef NDEBUG
void MP_WEAK __assert_func(const char *file, int line, const char *func, const char *expr) {
   1b6d0:	b580      	push	{r7, lr}
   1b6d2:	b084      	sub	sp, #16
   1b6d4:	af00      	add	r7, sp, #0
   1b6d6:	60f8      	str	r0, [r7, #12]
   1b6d8:	60b9      	str	r1, [r7, #8]
   1b6da:	607a      	str	r2, [r7, #4]
   1b6dc:	603b      	str	r3, [r7, #0]
    printf("Assertion '%s' failed, at file %s:%d\n", expr, file, line);
   1b6de:	68bb      	ldr	r3, [r7, #8]
   1b6e0:	68fa      	ldr	r2, [r7, #12]
   1b6e2:	6839      	ldr	r1, [r7, #0]
   1b6e4:	4802      	ldr	r0, [pc, #8]	; (1b6f0 <__assert_func+0x20>)
   1b6e6:	f7ff fe87 	bl	1b3f8 <printf>
    __fatal_error("Assertion failed");
   1b6ea:	4802      	ldr	r0, [pc, #8]	; (1b6f4 <__assert_func+0x24>)
   1b6ec:	f7ff ffea 	bl	1b6c4 <__fatal_error>
   1b6f0:	00024d90 	.word	0x00024d90
   1b6f4:	00024db8 	.word	0x00024db8

0001b6f8 <_start>:
//    0,
//    (uint32_t)&Default_Handler, // PendSV_Handler
//    (uint32_t)&Default_Handler, // SysTick_Handler
//};

void _start(void) {
   1b6f8:	b580      	push	{r7, lr}
   1b6fa:	af00      	add	r7, sp, #0
    // when we get here: stack is initialised, bss is clear, data is copied

    // SCB->CCR: enable 8-byte stack alignment for IRQ handlers, in accord with EABI
    *((volatile uint32_t*)0xe000ed14) |= 1 << 9;
   1b6fc:	4a06      	ldr	r2, [pc, #24]	; (1b718 <_start+0x20>)
   1b6fe:	4b06      	ldr	r3, [pc, #24]	; (1b718 <_start+0x20>)
   1b700:	681b      	ldr	r3, [r3, #0]
   1b702:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   1b706:	6013      	str	r3, [r2, #0]

    // initialise the cpu and peripherals
    #if MICROPY_MIN_USE_TM4C123_MCU
    void tm4c123_init(void);
    tm4c123_init();
   1b708:	f000 f808 	bl	1b71c <tm4c123_init>
    #endif

    // now that we have a basic system up and running we can call main
    main(0, NULL);
   1b70c:	2100      	movs	r1, #0
   1b70e:	2000      	movs	r0, #0
   1b710:	f7ff ff70 	bl	1b5f4 <main>

    // we must not return
    for (;;) {
    }
   1b714:	e7fe      	b.n	1b714 <_start+0x1c>
   1b716:	bf00      	nop
   1b718:	e000ed14 	.word	0xe000ed14

0001b71c <tm4c123_init>:

//#define SYSCTL ((periph_sysctl_t*)  0x400FE000)



void tm4c123_init(void) {
   1b71c:	b580      	push	{r7, lr}
   1b71e:	af00      	add	r7, sp, #0
    // basic MCU config

    // set system clock to 80MHz
    SYSCTL->RCC |= (uint32_t)0x00000800;   // set BYPASS bit
   1b720:	4a4d      	ldr	r2, [pc, #308]	; (1b858 <tm4c123_init+0x13c>)
   1b722:	4b4d      	ldr	r3, [pc, #308]	; (1b858 <tm4c123_init+0x13c>)
   1b724:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   1b726:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   1b72a:	6613      	str	r3, [r2, #96]	; 0x60
    SYSCTL->RCC2 |= (uint32_t)0xC0000800;  // set BYPASS2 bit, DIV400 and USERCC2
   1b72c:	4a4a      	ldr	r2, [pc, #296]	; (1b858 <tm4c123_init+0x13c>)
   1b72e:	4b4a      	ldr	r3, [pc, #296]	; (1b858 <tm4c123_init+0x13c>)
   1b730:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   1b732:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
   1b736:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   1b73a:	6713      	str	r3, [r2, #112]	; 0x70
    SYSCTL->RCC &= (uint32_t)0xFFBFFFFF;   // clear USESYSDIV bit
   1b73c:	4a46      	ldr	r2, [pc, #280]	; (1b858 <tm4c123_init+0x13c>)
   1b73e:	4b46      	ldr	r3, [pc, #280]	; (1b858 <tm4c123_init+0x13c>)
   1b740:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   1b742:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
   1b746:	6613      	str	r3, [r2, #96]	; 0x60
    SYSCTL->RCC = (SYSCTL->RCC & (uint32_t)0xFFFFF83F) | (uint32_t)0x00000B70;    // XTAL to 16 MHz
   1b748:	4a43      	ldr	r2, [pc, #268]	; (1b858 <tm4c123_init+0x13c>)
   1b74a:	4b43      	ldr	r3, [pc, #268]	; (1b858 <tm4c123_init+0x13c>)
   1b74c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   1b74e:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
   1b752:	f443 6337 	orr.w	r3, r3, #2928	; 0xb70
   1b756:	6613      	str	r3, [r2, #96]	; 0x60
    SYSCTL->MISC &= 0xFFFFFFBF;            // clear PLLLRIS bit
   1b758:	4a3f      	ldr	r2, [pc, #252]	; (1b858 <tm4c123_init+0x13c>)
   1b75a:	4b3f      	ldr	r3, [pc, #252]	; (1b858 <tm4c123_init+0x13c>)
   1b75c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   1b75e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   1b762:	6593      	str	r3, [r2, #88]	; 0x58
    SYSCTL->RCC2 &= (uint32_t)0xFFFFDFFF;  // clear PWRDN2 Bit to enable PLL
   1b764:	4a3c      	ldr	r2, [pc, #240]	; (1b858 <tm4c123_init+0x13c>)
   1b766:	4b3c      	ldr	r3, [pc, #240]	; (1b858 <tm4c123_init+0x13c>)
   1b768:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   1b76a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
   1b76e:	6713      	str	r3, [r2, #112]	; 0x70
    SYSCTL->RCC2 = (SYSCTL->RCC2 & (uint32_t)0xE03FFFFF) | (uint32_t)0x01000000;  // Set SYSDIV2 to 0x2 for 80MHz
   1b770:	4a39      	ldr	r2, [pc, #228]	; (1b858 <tm4c123_init+0x13c>)
   1b772:	4b39      	ldr	r3, [pc, #228]	; (1b858 <tm4c123_init+0x13c>)
   1b774:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   1b776:	f023 53fe 	bic.w	r3, r3, #532676608	; 0x1fc00000
   1b77a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
   1b77e:	6713      	str	r3, [r2, #112]	; 0x70
    SYSCTL->RCC |= (uint32_t)0x00400000;   // set USESYSDIV bit
   1b780:	4a35      	ldr	r2, [pc, #212]	; (1b858 <tm4c123_init+0x13c>)
   1b782:	4b35      	ldr	r3, [pc, #212]	; (1b858 <tm4c123_init+0x13c>)
   1b784:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   1b786:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
   1b78a:	6613      	str	r3, [r2, #96]	; 0x60
    while(!(SYSCTL->RIS & 0x00000040)){};  // wait for Pll to lock, PLLLRIS bit
   1b78c:	bf00      	nop
   1b78e:	4b32      	ldr	r3, [pc, #200]	; (1b858 <tm4c123_init+0x13c>)
   1b790:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   1b792:	f003 0340 	and.w	r3, r3, #64	; 0x40
   1b796:	2b00      	cmp	r3, #0
   1b798:	d0f9      	beq.n	1b78e <tm4c123_init+0x72>
    SYSCTL->RCC2 &= 0xFFFFF7FF;            // clear BYPASS2 bit, clears BYPASS as well
   1b79a:	4a2f      	ldr	r2, [pc, #188]	; (1b858 <tm4c123_init+0x13c>)
   1b79c:	4b2e      	ldr	r3, [pc, #184]	; (1b858 <tm4c123_init+0x13c>)
   1b79e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   1b7a0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   1b7a4:	6713      	str	r3, [r2, #112]	; 0x70
    // write final configuration
    SYSCTL->RCC = (uint32_t)(0x07C00550);  // 0b0000 0 1111 1 0 0 000 000 0 0 0 10101 01 000 0
   1b7a6:	4b2c      	ldr	r3, [pc, #176]	; (1b858 <tm4c123_init+0x13c>)
   1b7a8:	4a2c      	ldr	r2, [pc, #176]	; (1b85c <tm4c123_init+0x140>)
   1b7aa:	661a      	str	r2, [r3, #96]	; 0x60
    SYSCTL->RCC2 = (uint32_t)(0xC1000000); // 0b 1100 0001 0000 0000 0000 0000 0000 0000
   1b7ac:	4b2a      	ldr	r3, [pc, #168]	; (1b858 <tm4c123_init+0x13c>)
   1b7ae:	f04f 4241 	mov.w	r2, #3238002688	; 0xc1000000
   1b7b2:	671a      	str	r2, [r3, #112]	; 0x70

    // enable high performance GPIO BUS Ctl
    SYSCTL->GPIOHBCTL = 0x0000003F;
   1b7b4:	4b28      	ldr	r3, [pc, #160]	; (1b858 <tm4c123_init+0x13c>)
   1b7b6:	223f      	movs	r2, #63	; 0x3f
   1b7b8:	66da      	str	r2, [r3, #108]	; 0x6c

    // enable GPIO Port F
        SYSCTL->RCGCGPIO |= 0x00000020;
   1b7ba:	4a27      	ldr	r2, [pc, #156]	; (1b858 <tm4c123_init+0x13c>)
   1b7bc:	4b26      	ldr	r3, [pc, #152]	; (1b858 <tm4c123_init+0x13c>)
   1b7be:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
   1b7c2:	f043 0320 	orr.w	r3, r3, #32
   1b7c6:	f8c2 3608 	str.w	r3, [r2, #1544]	; 0x608
    //*((volatile uint32_t*)0x400FE608) = 0x00000021;
    while( !(SYSCTL->PRGPIO & 0x00000020)){};
   1b7ca:	bf00      	nop
   1b7cc:	4b22      	ldr	r3, [pc, #136]	; (1b858 <tm4c123_init+0x13c>)
   1b7ce:	f8d3 3a08 	ldr.w	r3, [r3, #2568]	; 0xa08
   1b7d2:	f003 0320 	and.w	r3, r3, #32
   1b7d6:	2b00      	cmp	r3, #0
   1b7d8:	d0f8      	beq.n	1b7cc <tm4c123_init+0xb0>
//    gpio_high(GPIOF, 3);
//    //*((volatile uint32_t*)0x4005D3FC) = 0x00000007;

    // enable UART0 at 9600 baud (TX=A1, RX=A0)
    // enable UART0
    SYSCTL->RCGCUART = 0x00000001;
   1b7da:	4b1f      	ldr	r3, [pc, #124]	; (1b858 <tm4c123_init+0x13c>)
   1b7dc:	2201      	movs	r2, #1
   1b7de:	f8c3 2618 	str.w	r2, [r3, #1560]	; 0x618
    //*((volatile uint32_t*)0x400FE618) = 0x00000001;
    while(SYSCTL->PRUART != 0x00000001){};
   1b7e2:	bf00      	nop
   1b7e4:	4b1c      	ldr	r3, [pc, #112]	; (1b858 <tm4c123_init+0x13c>)
   1b7e6:	f8d3 3a18 	ldr.w	r3, [r3, #2584]	; 0xa18
   1b7ea:	2b01      	cmp	r3, #1
   1b7ec:	d1fa      	bne.n	1b7e4 <tm4c123_init+0xc8>
    //while( *((volatile uint32_t*)0x400FEA18) != 0x00000001){};

    // enable GPIO Port A
    SYSCTL->RCGCGPIO |= 0x00000001;
   1b7ee:	4a1a      	ldr	r2, [pc, #104]	; (1b858 <tm4c123_init+0x13c>)
   1b7f0:	4b19      	ldr	r3, [pc, #100]	; (1b858 <tm4c123_init+0x13c>)
   1b7f2:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
   1b7f6:	f043 0301 	orr.w	r3, r3, #1
   1b7fa:	f8c2 3608 	str.w	r3, [r2, #1544]	; 0x608
    while( !(SYSCTL->PRGPIO & 0x00000001)){};
   1b7fe:	bf00      	nop
   1b800:	4b15      	ldr	r3, [pc, #84]	; (1b858 <tm4c123_init+0x13c>)
   1b802:	f8d3 3a08 	ldr.w	r3, [r3, #2568]	; 0xa08
   1b806:	f003 0301 	and.w	r3, r3, #1
   1b80a:	2b00      	cmp	r3, #0
   1b80c:	d0f8      	beq.n	1b800 <tm4c123_init+0xe4>

//    // GPIOA already configured for UART0 after reset
//    gpio_init(GPIOA, 0, GPIO_MODE_ALT, GPIO_PULL_NONE, 1);
//    gpio_init(GPIOA, 1, GPIO_MODE_ALT, GPIO_PULL_NONE, 1);

    MAP_GPIOPinTypeUART(GPIO_PORTA_AHB_BASE, GPIO_PIN_0 | GPIO_PIN_1);
   1b80e:	2103      	movs	r1, #3
   1b810:	4813      	ldr	r0, [pc, #76]	; (1b860 <tm4c123_init+0x144>)
   1b812:	f002 f9f2 	bl	1dbfa <GPIOPinTypeUART>

    // BRD = IBRD + FRAC = UARTSysClk / (ClkDiv * BaudRate)
    // 520.8333 = 104  + 0.166 = 80MHz      / (16     * 9600    )
    // FBRD = (0.833333 * 64 + 0.5) ~ 53
    UART0->CTL &= ~0x00000001;
   1b816:	4a13      	ldr	r2, [pc, #76]	; (1b864 <tm4c123_init+0x148>)
   1b818:	4b12      	ldr	r3, [pc, #72]	; (1b864 <tm4c123_init+0x148>)
   1b81a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1b81c:	f023 0301 	bic.w	r3, r3, #1
   1b820:	6313      	str	r3, [r2, #48]	; 0x30
    UART0->IBRD = 0x00000208;
   1b822:	4b10      	ldr	r3, [pc, #64]	; (1b864 <tm4c123_init+0x148>)
   1b824:	f44f 7202 	mov.w	r2, #520	; 0x208
   1b828:	625a      	str	r2, [r3, #36]	; 0x24
    UART0->FBRD = 0x00000035;
   1b82a:	4b0e      	ldr	r3, [pc, #56]	; (1b864 <tm4c123_init+0x148>)
   1b82c:	2235      	movs	r2, #53	; 0x35
   1b82e:	629a      	str	r2, [r3, #40]	; 0x28
    UART0->LCRH = 0x00000060; // no stick parity, word length 8bit, FIFO enable, one STOP bit, odd parity, no parity check, no break
   1b830:	4b0c      	ldr	r3, [pc, #48]	; (1b864 <tm4c123_init+0x148>)
   1b832:	2260      	movs	r2, #96	; 0x60
   1b834:	62da      	str	r2, [r3, #44]	; 0x2c
    UART0->CC = 0x00000000;   // use SysClock
   1b836:	4b0b      	ldr	r3, [pc, #44]	; (1b864 <tm4c123_init+0x148>)
   1b838:	2200      	movs	r2, #0
   1b83a:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    UART0->CTL = 0x00000300; // disable cts & rts, RXE, TXE, no loopback, 16x oversampling, TXRIS on IFLS match, no smart card, no low power, no SIR, UART enabled
   1b83e:	4b09      	ldr	r3, [pc, #36]	; (1b864 <tm4c123_init+0x148>)
   1b840:	f44f 7240 	mov.w	r2, #768	; 0x300
   1b844:	631a      	str	r2, [r3, #48]	; 0x30
    UART0->CTL |= 0x00000001;
   1b846:	4a07      	ldr	r2, [pc, #28]	; (1b864 <tm4c123_init+0x148>)
   1b848:	4b06      	ldr	r3, [pc, #24]	; (1b864 <tm4c123_init+0x148>)
   1b84a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1b84c:	f043 0301 	orr.w	r3, r3, #1
   1b850:	6313      	str	r3, [r2, #48]	; 0x30
    // to change settings in active mode: page 918 of reference
}
   1b852:	bf00      	nop
   1b854:	bd80      	pop	{r7, pc}
   1b856:	bf00      	nop
   1b858:	400fe000 	.word	0x400fe000
   1b85c:	07c00550 	.word	0x07c00550
   1b860:	40058000 	.word	0x40058000
   1b864:	4000c000 	.word	0x4000c000

0001b868 <ResetISR>:
// application.
//
//*****************************************************************************
void
ResetISR(void)
{
   1b868:	b580      	push	{r7, lr}
   1b86a:	b082      	sub	sp, #8
   1b86c:	af00      	add	r7, sp, #0
    uint32_t *pui32Src, *pui32Dest;

    //
    // Copy the data segment initializers from flash to SRAM.
    //
    pui32Src = &_ldata;
   1b86e:	4b13      	ldr	r3, [pc, #76]	; (1b8bc <zero_loop+0x24>)
   1b870:	607b      	str	r3, [r7, #4]
    for(pui32Dest = &_data; pui32Dest < &_edata; )
   1b872:	4b13      	ldr	r3, [pc, #76]	; (1b8c0 <zero_loop+0x28>)
   1b874:	603b      	str	r3, [r7, #0]
   1b876:	e007      	b.n	1b888 <ResetISR+0x20>
    {
        *pui32Dest++ = *pui32Src++;
   1b878:	683b      	ldr	r3, [r7, #0]
   1b87a:	1d1a      	adds	r2, r3, #4
   1b87c:	603a      	str	r2, [r7, #0]
   1b87e:	687a      	ldr	r2, [r7, #4]
   1b880:	1d11      	adds	r1, r2, #4
   1b882:	6079      	str	r1, [r7, #4]
   1b884:	6812      	ldr	r2, [r2, #0]
   1b886:	601a      	str	r2, [r3, #0]
    for(pui32Dest = &_data; pui32Dest < &_edata; )
   1b888:	683b      	ldr	r3, [r7, #0]
   1b88a:	4a0e      	ldr	r2, [pc, #56]	; (1b8c4 <zero_loop+0x2c>)
   1b88c:	4293      	cmp	r3, r2
   1b88e:	d3f3      	bcc.n	1b878 <ResetISR+0x10>
    }

    //
    // Zero fill the bss segment.
    //
    __asm("    ldr     r0, =_bss\n"
   1b890:	4814      	ldr	r0, [pc, #80]	; (1b8e4 <IntDefaultHandler+0x8>)
   1b892:	4915      	ldr	r1, [pc, #84]	; (1b8e8 <IntDefaultHandler+0xc>)
   1b894:	f04f 0200 	mov.w	r2, #0

0001b898 <zero_loop>:
   1b898:	4288      	cmp	r0, r1
   1b89a:	bfb8      	it	lt
   1b89c:	f840 2b04 	strlt.w	r2, [r0], #4
   1b8a0:	dbfa      	blt.n	1b898 <zero_loop>
    // APIs must be done here prior to the floating-point unit being enabled.
    //
    // Note that this does not use DriverLib since it might not be included in
    // this project.
    //
    HWREG(NVIC_CPAC) = ((HWREG(NVIC_CPAC) &
   1b8a2:	4a09      	ldr	r2, [pc, #36]	; (1b8c8 <zero_loop+0x30>)
   1b8a4:	4b08      	ldr	r3, [pc, #32]	; (1b8c8 <zero_loop+0x30>)
   1b8a6:	681b      	ldr	r3, [r3, #0]
                         ~(NVIC_CPAC_CP10_M | NVIC_CPAC_CP11_M)) |
                        NVIC_CPAC_CP10_FULL | NVIC_CPAC_CP11_FULL);
   1b8a8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
    HWREG(NVIC_CPAC) = ((HWREG(NVIC_CPAC) &
   1b8ac:	6013      	str	r3, [r2, #0]

    //
    // Call the application's entry point.
    //
    _start();
   1b8ae:	f7ff ff23 	bl	1b6f8 <_start>
}
   1b8b2:	bf00      	nop
   1b8b4:	3708      	adds	r7, #8
   1b8b6:	46bd      	mov	sp, r7
   1b8b8:	bd80      	pop	{r7, pc}
   1b8ba:	bf00      	nop
   1b8bc:	00025fdc 	.word	0x00025fdc
   1b8c0:	20000000 	.word	0x20000000
   1b8c4:	200008c0 	.word	0x200008c0
   1b8c8:	e000ed88 	.word	0xe000ed88

0001b8cc <NmiSR>:
// by a debugger.
//
//*****************************************************************************
static void
NmiSR(void)
{
   1b8cc:	b480      	push	{r7}
   1b8ce:	af00      	add	r7, sp, #0
    //
    // Enter an infinite loop.
    //
    while(1)
    {
    }
   1b8d0:	e7fe      	b.n	1b8d0 <NmiSR+0x4>
   1b8d2:	bf00      	nop

0001b8d4 <FaultISR>:
// for examination by a debugger.
//
//*****************************************************************************
static void
FaultISR(void)
{
   1b8d4:	b480      	push	{r7}
   1b8d6:	af00      	add	r7, sp, #0
    //
    // Enter an infinite loop.
    //
    while(1)
    {
    }
   1b8d8:	e7fe      	b.n	1b8d8 <FaultISR+0x4>
   1b8da:	bf00      	nop

0001b8dc <IntDefaultHandler>:
// for examination by a debugger.
//
//*****************************************************************************
static void
IntDefaultHandler(void)
{
   1b8dc:	b480      	push	{r7}
   1b8de:	af00      	add	r7, sp, #0
    //
    // Go into an infinite loop.
    //
    while(1)
    {
    }
   1b8e0:	e7fe      	b.n	1b8e0 <IntDefaultHandler+0x4>
   1b8e2:	0000      	.short	0x0000
   1b8e4:	200008c0 	.word	0x200008c0
   1b8e8:	200014cc 	.word	0x200014cc

0001b8ec <mp_hal_stdin_rx_chr>:
} periph_uart_t;
#define UART0 ((periph_uart_t*)0x4000C000)
#endif

// Receive single character
int mp_hal_stdin_rx_chr(void) {
   1b8ec:	b480      	push	{r7}
   1b8ee:	b083      	sub	sp, #12
   1b8f0:	af00      	add	r7, sp, #0
    unsigned char c = 0;
   1b8f2:	2300      	movs	r3, #0
   1b8f4:	71fb      	strb	r3, [r7, #7]
#if MICROPY_MIN_USE_STDOUT
    int r = read(0, &c, 1);
    (void)r;
#elif MICROPY_MIN_USE_TM4C123_MCU
    // wait for RXFE to clear
    while (UART0->FR & (1 << 4)) {
   1b8f6:	bf00      	nop
   1b8f8:	4b07      	ldr	r3, [pc, #28]	; (1b918 <mp_hal_stdin_rx_chr+0x2c>)
   1b8fa:	699b      	ldr	r3, [r3, #24]
   1b8fc:	f003 0310 	and.w	r3, r3, #16
   1b900:	2b00      	cmp	r3, #0
   1b902:	d1f9      	bne.n	1b8f8 <mp_hal_stdin_rx_chr+0xc>
    }
    c = UART0->DR & 0xFF;
   1b904:	4b04      	ldr	r3, [pc, #16]	; (1b918 <mp_hal_stdin_rx_chr+0x2c>)
   1b906:	681b      	ldr	r3, [r3, #0]
   1b908:	71fb      	strb	r3, [r7, #7]
#endif
    return c;
   1b90a:	79fb      	ldrb	r3, [r7, #7]
}
   1b90c:	4618      	mov	r0, r3
   1b90e:	370c      	adds	r7, #12
   1b910:	46bd      	mov	sp, r7
   1b912:	f85d 7b04 	ldr.w	r7, [sp], #4
   1b916:	4770      	bx	lr
   1b918:	4000c000 	.word	0x4000c000

0001b91c <mp_hal_stdout_tx_strn>:

// Send string of given length
void mp_hal_stdout_tx_strn(const char *str, mp_uint_t len) {
   1b91c:	b480      	push	{r7}
   1b91e:	b083      	sub	sp, #12
   1b920:	af00      	add	r7, sp, #0
   1b922:	6078      	str	r0, [r7, #4]
   1b924:	6039      	str	r1, [r7, #0]
#if MICROPY_MIN_USE_STDOUT
    int r = write(1, str, len);
    (void)r;
#elif MICROPY_MIN_USE_TM4C123_MCU
    while (len--) {
   1b926:	e00c      	b.n	1b942 <mp_hal_stdout_tx_strn+0x26>
        // wait for TXFF to clear
        while (UART0->FR & (1 << 5)) {
   1b928:	bf00      	nop
   1b92a:	4b0b      	ldr	r3, [pc, #44]	; (1b958 <mp_hal_stdout_tx_strn+0x3c>)
   1b92c:	699b      	ldr	r3, [r3, #24]
   1b92e:	f003 0320 	and.w	r3, r3, #32
   1b932:	2b00      	cmp	r3, #0
   1b934:	d1f9      	bne.n	1b92a <mp_hal_stdout_tx_strn+0xe>
        }
        UART0->DR = *str++;
   1b936:	4908      	ldr	r1, [pc, #32]	; (1b958 <mp_hal_stdout_tx_strn+0x3c>)
   1b938:	687b      	ldr	r3, [r7, #4]
   1b93a:	1c5a      	adds	r2, r3, #1
   1b93c:	607a      	str	r2, [r7, #4]
   1b93e:	781b      	ldrb	r3, [r3, #0]
   1b940:	600b      	str	r3, [r1, #0]
    while (len--) {
   1b942:	683b      	ldr	r3, [r7, #0]
   1b944:	1e5a      	subs	r2, r3, #1
   1b946:	603a      	str	r2, [r7, #0]
   1b948:	2b00      	cmp	r3, #0
   1b94a:	d1ed      	bne.n	1b928 <mp_hal_stdout_tx_strn+0xc>
    }
#endif
}
   1b94c:	bf00      	nop
   1b94e:	370c      	adds	r7, #12
   1b950:	46bd      	mov	sp, r7
   1b952:	f85d 7b04 	ldr.w	r7, [sp], #4
   1b956:	4770      	bx	lr
   1b958:	4000c000 	.word	0x4000c000

0001b95c <mp_hal_ticks_cpu_enable>:

//NORETURN void mp_hal_raise(HAL_StatusTypeDef status) {
//    mp_raise_OSError(mp_hal_status_to_errno_table[status]);
//}

void mp_hal_ticks_cpu_enable(void) {
   1b95c:	b480      	push	{r7}
   1b95e:	af00      	add	r7, sp, #0
//        DWT->LAR = 0xc5acce55;
//        #endif
//        DWT->CYCCNT = 0;
//        DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
//    }
}
   1b960:	bf00      	nop
   1b962:	46bd      	mov	sp, r7
   1b964:	f85d 7b04 	ldr.w	r7, [sp], #4
   1b968:	4770      	bx	lr
   1b96a:	bf00      	nop

0001b96c <mp_hal_ticks_cpu>:

mp_uint_t mp_hal_ticks_cpu(void) {
   1b96c:	b480      	push	{r7}
   1b96e:	af00      	add	r7, sp, #0
    return (*((volatile uint32_t *)0xE000E018));
   1b970:	4b03      	ldr	r3, [pc, #12]	; (1b980 <mp_hal_ticks_cpu+0x14>)
   1b972:	681b      	ldr	r3, [r3, #0]
}
   1b974:	4618      	mov	r0, r3
   1b976:	46bd      	mov	sp, r7
   1b978:	f85d 7b04 	ldr.w	r7, [sp], #4
   1b97c:	4770      	bx	lr
   1b97e:	bf00      	nop
   1b980:	e000e018 	.word	0xe000e018

0001b984 <mp_hal_ticks_ms>:

mp_uint_t mp_hal_ticks_ms(void) {
   1b984:	b598      	push	{r3, r4, r7, lr}
   1b986:	af00      	add	r7, sp, #0
    return (*((volatile uint32_t *)0xE000E018)) / (MAP_SysCtlClockGet()*3000);
   1b988:	4b06      	ldr	r3, [pc, #24]	; (1b9a4 <mp_hal_ticks_ms+0x20>)
   1b98a:	681c      	ldr	r4, [r3, #0]
   1b98c:	f002 f9ac 	bl	1dce8 <SysCtlClockGet>
   1b990:	4602      	mov	r2, r0
   1b992:	f640 33b8 	movw	r3, #3000	; 0xbb8
   1b996:	fb03 f302 	mul.w	r3, r3, r2
   1b99a:	fbb4 f3f3 	udiv	r3, r4, r3
}
   1b99e:	4618      	mov	r0, r3
   1b9a0:	bd98      	pop	{r3, r4, r7, pc}
   1b9a2:	bf00      	nop
   1b9a4:	e000e018 	.word	0xe000e018

0001b9a8 <mp_hal_ticks_us>:

mp_uint_t mp_hal_ticks_us(void) {
   1b9a8:	b598      	push	{r3, r4, r7, lr}
   1b9aa:	af00      	add	r7, sp, #0
    return (*((volatile uint32_t *)0xE000E018)) / (MAP_SysCtlClockGet()*3000000);
   1b9ac:	4b05      	ldr	r3, [pc, #20]	; (1b9c4 <mp_hal_ticks_us+0x1c>)
   1b9ae:	681c      	ldr	r4, [r3, #0]
   1b9b0:	f002 f99a 	bl	1dce8 <SysCtlClockGet>
   1b9b4:	4602      	mov	r2, r0
   1b9b6:	4b04      	ldr	r3, [pc, #16]	; (1b9c8 <mp_hal_ticks_us+0x20>)
   1b9b8:	fb03 f302 	mul.w	r3, r3, r2
   1b9bc:	fbb4 f3f3 	udiv	r3, r4, r3
}
   1b9c0:	4618      	mov	r0, r3
   1b9c2:	bd98      	pop	{r3, r4, r7, pc}
   1b9c4:	e000e018 	.word	0xe000e018
   1b9c8:	002dc6c0 	.word	0x002dc6c0

0001b9cc <mp_hal_gpio_clock_enable>:

void mp_hal_gpio_clock_enable(const uint32_t periph) {
   1b9cc:	b580      	push	{r7, lr}
   1b9ce:	b082      	sub	sp, #8
   1b9d0:	af00      	add	r7, sp, #0
   1b9d2:	6078      	str	r0, [r7, #4]
    if (MAP_SysCtlPeripheralReady(periph)) {
   1b9d4:	6878      	ldr	r0, [r7, #4]
   1b9d6:	f002 f935 	bl	1dc44 <SysCtlPeripheralReady>
   1b9da:	4603      	mov	r3, r0
   1b9dc:	2b00      	cmp	r3, #0
   1b9de:	d10d      	bne.n	1b9fc <mp_hal_gpio_clock_enable+0x30>
        //Already acive
        return;
    }
    MAP_SysCtlPeripheralEnable(periph);
   1b9e0:	6878      	ldr	r0, [r7, #4]
   1b9e2:	f002 f945 	bl	1dc70 <SysCtlPeripheralEnable>
    while(!MAP_SysCtlPeripheralReady(periph)){};
   1b9e6:	bf00      	nop
   1b9e8:	6878      	ldr	r0, [r7, #4]
   1b9ea:	f002 f92b 	bl	1dc44 <SysCtlPeripheralReady>
   1b9ee:	4603      	mov	r3, r0
   1b9f0:	f083 0301 	eor.w	r3, r3, #1
   1b9f4:	b2db      	uxtb	r3, r3
   1b9f6:	2b00      	cmp	r3, #0
   1b9f8:	d1f6      	bne.n	1b9e8 <mp_hal_gpio_clock_enable+0x1c>
   1b9fa:	e000      	b.n	1b9fe <mp_hal_gpio_clock_enable+0x32>
        return;
   1b9fc:	bf00      	nop
}
   1b9fe:	3708      	adds	r7, #8
   1ba00:	46bd      	mov	sp, r7
   1ba02:	bd80      	pop	{r7, pc}

0001ba04 <mp_hal_pin_config>:

void mp_hal_pin_config(mp_hal_pin_obj_t pin_obj, uint32_t dir, uint32_t type, uint32_t drive) {
   1ba04:	b580      	push	{r7, lr}
   1ba06:	b084      	sub	sp, #16
   1ba08:	af00      	add	r7, sp, #0
   1ba0a:	60f8      	str	r0, [r7, #12]
   1ba0c:	60b9      	str	r1, [r7, #8]
   1ba0e:	607a      	str	r2, [r7, #4]
   1ba10:	603b      	str	r3, [r7, #0]
    mp_hal_gpio_clock_enable(pin_obj->periph);
   1ba12:	68fb      	ldr	r3, [r7, #12]
   1ba14:	68db      	ldr	r3, [r3, #12]
   1ba16:	4618      	mov	r0, r3
   1ba18:	f7ff ffd8 	bl	1b9cc <mp_hal_gpio_clock_enable>

    MAP_GPIODirModeSet(pin_obj->port, pin_obj->pin_mask, dir);
   1ba1c:	68fb      	ldr	r3, [r7, #12]
   1ba1e:	6898      	ldr	r0, [r3, #8]
   1ba20:	68fb      	ldr	r3, [r7, #12]
   1ba22:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
   1ba26:	68ba      	ldr	r2, [r7, #8]
   1ba28:	4619      	mov	r1, r3
   1ba2a:	f001 ffb3 	bl	1d994 <GPIODirModeSet>
    MAP_GPIOPadConfigSet(pin_obj->port, pin_obj->pin_mask, drive, type);
   1ba2e:	68fb      	ldr	r3, [r7, #12]
   1ba30:	6898      	ldr	r0, [r3, #8]
   1ba32:	68fb      	ldr	r3, [r7, #12]
   1ba34:	f893 1024 	ldrb.w	r1, [r3, #36]	; 0x24
   1ba38:	687b      	ldr	r3, [r7, #4]
   1ba3a:	683a      	ldr	r2, [r7, #0]
   1ba3c:	f001 ffd3 	bl	1d9e6 <GPIOPadConfigSet>
}
   1ba40:	bf00      	nop
   1ba42:	3710      	adds	r7, #16
   1ba44:	46bd      	mov	sp, r7
   1ba46:	bd80      	pop	{r7, pc}

0001ba48 <mp_hal_pin_set_af>:

void mp_hal_pin_set_af(mp_hal_pin_obj_t pin_obj, uint8_t af_id) {
   1ba48:	b580      	push	{r7, lr}
   1ba4a:	b082      	sub	sp, #8
   1ba4c:	af00      	add	r7, sp, #0
   1ba4e:	6078      	str	r0, [r7, #4]
   1ba50:	460b      	mov	r3, r1
   1ba52:	70fb      	strb	r3, [r7, #3]
    if (af_id == 0xFF) return;
   1ba54:	78fb      	ldrb	r3, [r7, #3]
   1ba56:	2bff      	cmp	r3, #255	; 0xff
   1ba58:	d01b      	beq.n	1ba92 <mp_hal_pin_set_af+0x4a>
    MAP_GPIODirModeSet(pin_obj->port, pin_obj->pin_mask, GPIO_DIR_MODE_HW);
   1ba5a:	687b      	ldr	r3, [r7, #4]
   1ba5c:	6898      	ldr	r0, [r3, #8]
   1ba5e:	687b      	ldr	r3, [r7, #4]
   1ba60:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
   1ba64:	2202      	movs	r2, #2
   1ba66:	4619      	mov	r1, r3
   1ba68:	f001 ff94 	bl	1d994 <GPIODirModeSet>
    MAP_GPIOPadConfigSet(pin_obj->port, pin_obj->pin_mask, GPIO_STRENGTH_2MA, GPIO_PIN_TYPE_STD);
   1ba6c:	687b      	ldr	r3, [r7, #4]
   1ba6e:	6898      	ldr	r0, [r3, #8]
   1ba70:	687b      	ldr	r3, [r7, #4]
   1ba72:	f893 1024 	ldrb.w	r1, [r3, #36]	; 0x24
   1ba76:	2308      	movs	r3, #8
   1ba78:	2201      	movs	r2, #1
   1ba7a:	f001 ffb4 	bl	1d9e6 <GPIOPadConfigSet>
    MAP_GPIOPinConfigure((pin_obj->af_list)[af_id].conf);
   1ba7e:	687b      	ldr	r3, [r7, #4]
   1ba80:	695a      	ldr	r2, [r3, #20]
   1ba82:	78fb      	ldrb	r3, [r7, #3]
   1ba84:	011b      	lsls	r3, r3, #4
   1ba86:	4413      	add	r3, r2
   1ba88:	68db      	ldr	r3, [r3, #12]
   1ba8a:	4618      	mov	r0, r3
   1ba8c:	f002 f8b8 	bl	1dc00 <GPIOPinConfigure>
   1ba90:	e000      	b.n	1ba94 <mp_hal_pin_set_af+0x4c>
    if (af_id == 0xFF) return;
   1ba92:	bf00      	nop
}
   1ba94:	3708      	adds	r7, #8
   1ba96:	46bd      	mov	sp, r7
   1ba98:	bd80      	pop	{r7, pc}
   1ba9a:	bf00      	nop

0001ba9c <mp_hal_set_interrupt_char>:

void mp_hal_set_interrupt_char(int c) {
   1ba9c:	b480      	push	{r7}
   1ba9e:	b083      	sub	sp, #12
   1baa0:	af00      	add	r7, sp, #0
   1baa2:	6078      	str	r0, [r7, #4]

}
   1baa4:	bf00      	nop
   1baa6:	370c      	adds	r7, #12
   1baa8:	46bd      	mov	sp, r7
   1baaa:	f85d 7b04 	ldr.w	r7, [sp], #4
   1baae:	4770      	bx	lr

0001bab0 <MP_OBJ_IS_OBJ>:
    { return ((((mp_int_t)(o)) & 3) == 0); }
   1bab0:	b480      	push	{r7}
   1bab2:	b083      	sub	sp, #12
   1bab4:	af00      	add	r7, sp, #0
   1bab6:	6078      	str	r0, [r7, #4]
   1bab8:	687b      	ldr	r3, [r7, #4]
   1baba:	f003 0303 	and.w	r3, r3, #3
   1babe:	2b00      	cmp	r3, #0
   1bac0:	bf0c      	ite	eq
   1bac2:	2301      	moveq	r3, #1
   1bac4:	2300      	movne	r3, #0
   1bac6:	b2db      	uxtb	r3, r3
   1bac8:	4618      	mov	r0, r3
   1baca:	370c      	adds	r7, #12
   1bacc:	46bd      	mov	sp, r7
   1bace:	f85d 7b04 	ldr.w	r7, [sp], #4
   1bad2:	4770      	bx	lr

0001bad4 <mp_obj_new_bool>:
static inline mp_obj_t mp_obj_new_bool(mp_int_t x) { return x ? mp_const_true : mp_const_false; }
   1bad4:	b480      	push	{r7}
   1bad6:	b083      	sub	sp, #12
   1bad8:	af00      	add	r7, sp, #0
   1bada:	6078      	str	r0, [r7, #4]
   1badc:	687b      	ldr	r3, [r7, #4]
   1bade:	2b00      	cmp	r3, #0
   1bae0:	d001      	beq.n	1bae6 <mp_obj_new_bool+0x12>
   1bae2:	4b04      	ldr	r3, [pc, #16]	; (1baf4 <mp_obj_new_bool+0x20>)
   1bae4:	e000      	b.n	1bae8 <mp_obj_new_bool+0x14>
   1bae6:	4b04      	ldr	r3, [pc, #16]	; (1baf8 <mp_obj_new_bool+0x24>)
   1bae8:	4618      	mov	r0, r3
   1baea:	370c      	adds	r7, #12
   1baec:	46bd      	mov	sp, r7
   1baee:	f85d 7b04 	ldr.w	r7, [sp], #4
   1baf2:	4770      	bx	lr
   1baf4:	00021b78 	.word	0x00021b78
   1baf8:	00021b70 	.word	0x00021b70

0001bafc <pin_init0>:
/// how a particular object gets mapped to a pin.

// Pin class variables
STATIC bool pin_class_debug;

void pin_init0(void) {
   1bafc:	b480      	push	{r7}
   1bafe:	af00      	add	r7, sp, #0
    MP_STATE_PORT(pin_class_mapper) = mp_const_none;
   1bb00:	4b07      	ldr	r3, [pc, #28]	; (1bb20 <pin_init0+0x24>)
   1bb02:	4a08      	ldr	r2, [pc, #32]	; (1bb24 <pin_init0+0x28>)
   1bb04:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    MP_STATE_PORT(pin_class_map_dict) = mp_const_none;
   1bb08:	4b05      	ldr	r3, [pc, #20]	; (1bb20 <pin_init0+0x24>)
   1bb0a:	4a06      	ldr	r2, [pc, #24]	; (1bb24 <pin_init0+0x28>)
   1bb0c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    pin_class_debug = false;
   1bb10:	4b05      	ldr	r3, [pc, #20]	; (1bb28 <pin_init0+0x2c>)
   1bb12:	2200      	movs	r2, #0
   1bb14:	701a      	strb	r2, [r3, #0]
}
   1bb16:	bf00      	nop
   1bb18:	46bd      	mov	sp, r7
   1bb1a:	f85d 7b04 	ldr.w	r7, [sp], #4
   1bb1e:	4770      	bx	lr
   1bb20:	200012f0 	.word	0x200012f0
   1bb24:	0002345c 	.word	0x0002345c
   1bb28:	200012c4 	.word	0x200012c4

0001bb2c <pin_find>:



// C API used to convert a user-supplied pin name into an ordinal pin number.
const pin_obj_t *pin_find(mp_obj_t user_obj) {
   1bb2c:	b580      	push	{r7, lr}
   1bb2e:	b088      	sub	sp, #32
   1bb30:	af00      	add	r7, sp, #0
   1bb32:	6078      	str	r0, [r7, #4]
    const pin_obj_t *pin_obj;

    // If a pin was provided, then use it
    if (MP_OBJ_IS_TYPE(user_obj, &pin_mod)) {
   1bb34:	6878      	ldr	r0, [r7, #4]
   1bb36:	f7ff ffbb 	bl	1bab0 <MP_OBJ_IS_OBJ>
   1bb3a:	4603      	mov	r3, r0
   1bb3c:	2b00      	cmp	r3, #0
   1bb3e:	d016      	beq.n	1bb6e <pin_find+0x42>
   1bb40:	687b      	ldr	r3, [r7, #4]
   1bb42:	681b      	ldr	r3, [r3, #0]
   1bb44:	4a59      	ldr	r2, [pc, #356]	; (1bcac <pin_find+0x180>)
   1bb46:	4293      	cmp	r3, r2
   1bb48:	d111      	bne.n	1bb6e <pin_find+0x42>
        pin_obj = MP_OBJ_TO_PTR(user_obj);
   1bb4a:	687b      	ldr	r3, [r7, #4]
   1bb4c:	61fb      	str	r3, [r7, #28]
        if (pin_class_debug) {
   1bb4e:	4b58      	ldr	r3, [pc, #352]	; (1bcb0 <pin_find+0x184>)
   1bb50:	781b      	ldrb	r3, [r3, #0]
   1bb52:	2b00      	cmp	r3, #0
   1bb54:	d009      	beq.n	1bb6a <pin_find+0x3e>
            printf("Pin map passed pin ");
   1bb56:	4857      	ldr	r0, [pc, #348]	; (1bcb4 <pin_find+0x188>)
   1bb58:	f7ff fc4e 	bl	1b3f8 <printf>
            mp_obj_print(MP_OBJ_FROM_PTR(pin_obj), PRINT_STR);
   1bb5c:	2100      	movs	r1, #0
   1bb5e:	69f8      	ldr	r0, [r7, #28]
   1bb60:	f7f2 f806 	bl	db70 <mp_obj_print>
            printf("\n");
   1bb64:	200a      	movs	r0, #10
   1bb66:	f7ff fc71 	bl	1b44c <putchar>
        }
        return pin_obj;
   1bb6a:	69fb      	ldr	r3, [r7, #28]
   1bb6c:	e099      	b.n	1bca2 <pin_find+0x176>
    }


    if (MP_STATE_PORT(pin_class_mapper) != mp_const_none) {
   1bb6e:	4b52      	ldr	r3, [pc, #328]	; (1bcb8 <pin_find+0x18c>)
   1bb70:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   1bb74:	4a51      	ldr	r2, [pc, #324]	; (1bcbc <pin_find+0x190>)
   1bb76:	4293      	cmp	r3, r2
   1bb78:	d033      	beq.n	1bbe2 <pin_find+0xb6>
        mp_obj_t o = mp_call_function_1(MP_STATE_PORT(pin_class_mapper), user_obj);
   1bb7a:	4b4f      	ldr	r3, [pc, #316]	; (1bcb8 <pin_find+0x18c>)
   1bb7c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   1bb80:	6879      	ldr	r1, [r7, #4]
   1bb82:	4618      	mov	r0, r3
   1bb84:	f7f0 fa48 	bl	c018 <mp_call_function_1>
   1bb88:	61b8      	str	r0, [r7, #24]
        if (o != mp_const_none) {
   1bb8a:	69bb      	ldr	r3, [r7, #24]
   1bb8c:	4a4b      	ldr	r2, [pc, #300]	; (1bcbc <pin_find+0x190>)
   1bb8e:	4293      	cmp	r3, r2
   1bb90:	d027      	beq.n	1bbe2 <pin_find+0xb6>
            if (!MP_OBJ_IS_TYPE(o, &pin_mod)) {
   1bb92:	69b8      	ldr	r0, [r7, #24]
   1bb94:	f7ff ff8c 	bl	1bab0 <MP_OBJ_IS_OBJ>
   1bb98:	4603      	mov	r3, r0
   1bb9a:	f083 0301 	eor.w	r3, r3, #1
   1bb9e:	b2db      	uxtb	r3, r3
   1bba0:	2b00      	cmp	r3, #0
   1bba2:	d104      	bne.n	1bbae <pin_find+0x82>
   1bba4:	69bb      	ldr	r3, [r7, #24]
   1bba6:	681b      	ldr	r3, [r3, #0]
   1bba8:	4a40      	ldr	r2, [pc, #256]	; (1bcac <pin_find+0x180>)
   1bbaa:	4293      	cmp	r3, r2
   1bbac:	d002      	beq.n	1bbb4 <pin_find+0x88>
                mp_raise_ValueError("Pin.mapper didn't return a Pin object");
   1bbae:	4844      	ldr	r0, [pc, #272]	; (1bcc0 <pin_find+0x194>)
   1bbb0:	f7f1 fb16 	bl	d1e0 <mp_raise_ValueError>
            }
            if (pin_class_debug) {
   1bbb4:	4b3e      	ldr	r3, [pc, #248]	; (1bcb0 <pin_find+0x184>)
   1bbb6:	781b      	ldrb	r3, [r3, #0]
   1bbb8:	2b00      	cmp	r3, #0
   1bbba:	d010      	beq.n	1bbde <pin_find+0xb2>
                printf("Pin.mapper maps ");
   1bbbc:	4841      	ldr	r0, [pc, #260]	; (1bcc4 <pin_find+0x198>)
   1bbbe:	f7ff fc1b 	bl	1b3f8 <printf>
                mp_obj_print(user_obj, PRINT_REPR);
   1bbc2:	2101      	movs	r1, #1
   1bbc4:	6878      	ldr	r0, [r7, #4]
   1bbc6:	f7f1 ffd3 	bl	db70 <mp_obj_print>
                printf(" to ");
   1bbca:	483f      	ldr	r0, [pc, #252]	; (1bcc8 <pin_find+0x19c>)
   1bbcc:	f7ff fc14 	bl	1b3f8 <printf>
                mp_obj_print(o, PRINT_STR);
   1bbd0:	2100      	movs	r1, #0
   1bbd2:	69b8      	ldr	r0, [r7, #24]
   1bbd4:	f7f1 ffcc 	bl	db70 <mp_obj_print>
                printf("\n");
   1bbd8:	200a      	movs	r0, #10
   1bbda:	f7ff fc37 	bl	1b44c <putchar>
            }
            return MP_OBJ_TO_PTR(o);
   1bbde:	69bb      	ldr	r3, [r7, #24]
   1bbe0:	e05f      	b.n	1bca2 <pin_find+0x176>
        }
        // The pin mapping function returned mp_const_none, fall through to
        // other lookup methods.
    }

    if (MP_STATE_PORT(pin_class_map_dict) != mp_const_none) {
   1bbe2:	4b35      	ldr	r3, [pc, #212]	; (1bcb8 <pin_find+0x18c>)
   1bbe4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
   1bbe8:	4a34      	ldr	r2, [pc, #208]	; (1bcbc <pin_find+0x190>)
   1bbea:	4293      	cmp	r3, r2
   1bbec:	d02d      	beq.n	1bc4a <pin_find+0x11e>
        mp_map_t *pin_map_map = mp_obj_dict_get_map(MP_STATE_PORT(pin_class_map_dict));
   1bbee:	4b32      	ldr	r3, [pc, #200]	; (1bcb8 <pin_find+0x18c>)
   1bbf0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
   1bbf4:	4618      	mov	r0, r3
   1bbf6:	f7f3 fc61 	bl	f4bc <mp_obj_dict_get_map>
   1bbfa:	6178      	str	r0, [r7, #20]
        mp_map_elem_t *elem = mp_map_lookup(pin_map_map, user_obj, MP_MAP_LOOKUP);
   1bbfc:	2200      	movs	r2, #0
   1bbfe:	6879      	ldr	r1, [r7, #4]
   1bc00:	6978      	ldr	r0, [r7, #20]
   1bc02:	f7f1 fdad 	bl	d760 <mp_map_lookup>
   1bc06:	6138      	str	r0, [r7, #16]
        if (elem != NULL && elem->value != MP_OBJ_NULL) {
   1bc08:	693b      	ldr	r3, [r7, #16]
   1bc0a:	2b00      	cmp	r3, #0
   1bc0c:	d01d      	beq.n	1bc4a <pin_find+0x11e>
   1bc0e:	693b      	ldr	r3, [r7, #16]
   1bc10:	685b      	ldr	r3, [r3, #4]
   1bc12:	2b00      	cmp	r3, #0
   1bc14:	d019      	beq.n	1bc4a <pin_find+0x11e>
            mp_obj_t o = elem->value;
   1bc16:	693b      	ldr	r3, [r7, #16]
   1bc18:	685b      	ldr	r3, [r3, #4]
   1bc1a:	60fb      	str	r3, [r7, #12]
            if (pin_class_debug) {
   1bc1c:	4b24      	ldr	r3, [pc, #144]	; (1bcb0 <pin_find+0x184>)
   1bc1e:	781b      	ldrb	r3, [r3, #0]
   1bc20:	2b00      	cmp	r3, #0
   1bc22:	d010      	beq.n	1bc46 <pin_find+0x11a>
                printf("Pin.map_dict maps ");
   1bc24:	4829      	ldr	r0, [pc, #164]	; (1bccc <pin_find+0x1a0>)
   1bc26:	f7ff fbe7 	bl	1b3f8 <printf>
                mp_obj_print(user_obj, PRINT_REPR);
   1bc2a:	2101      	movs	r1, #1
   1bc2c:	6878      	ldr	r0, [r7, #4]
   1bc2e:	f7f1 ff9f 	bl	db70 <mp_obj_print>
                printf(" to ");
   1bc32:	4825      	ldr	r0, [pc, #148]	; (1bcc8 <pin_find+0x19c>)
   1bc34:	f7ff fbe0 	bl	1b3f8 <printf>
                mp_obj_print(o, PRINT_STR);
   1bc38:	2100      	movs	r1, #0
   1bc3a:	68f8      	ldr	r0, [r7, #12]
   1bc3c:	f7f1 ff98 	bl	db70 <mp_obj_print>
                printf("\n");
   1bc40:	200a      	movs	r0, #10
   1bc42:	f7ff fc03 	bl	1b44c <putchar>
            }
            return MP_OBJ_TO_PTR(o);
   1bc46:	68fb      	ldr	r3, [r7, #12]
   1bc48:	e02b      	b.n	1bca2 <pin_find+0x176>
        }
    }

    // See if the pin name matches a board pin
    pin_obj = pin_find_named_pin(&pin_board_pins_locals_dict, user_obj);
   1bc4a:	6879      	ldr	r1, [r7, #4]
   1bc4c:	4820      	ldr	r0, [pc, #128]	; (1bcd0 <pin_find+0x1a4>)
   1bc4e:	f000 fbfb 	bl	1c448 <pin_find_named_pin>
   1bc52:	61f8      	str	r0, [r7, #28]
    if (pin_obj) {
   1bc54:	69fb      	ldr	r3, [r7, #28]
   1bc56:	2b00      	cmp	r3, #0
   1bc58:	d016      	beq.n	1bc88 <pin_find+0x15c>
        if (pin_class_debug) {
   1bc5a:	4b15      	ldr	r3, [pc, #84]	; (1bcb0 <pin_find+0x184>)
   1bc5c:	781b      	ldrb	r3, [r3, #0]
   1bc5e:	2b00      	cmp	r3, #0
   1bc60:	d010      	beq.n	1bc84 <pin_find+0x158>
            printf("Pin.board maps ");
   1bc62:	481c      	ldr	r0, [pc, #112]	; (1bcd4 <pin_find+0x1a8>)
   1bc64:	f7ff fbc8 	bl	1b3f8 <printf>
            mp_obj_print(user_obj, PRINT_REPR);
   1bc68:	2101      	movs	r1, #1
   1bc6a:	6878      	ldr	r0, [r7, #4]
   1bc6c:	f7f1 ff80 	bl	db70 <mp_obj_print>
            printf(" to ");
   1bc70:	4815      	ldr	r0, [pc, #84]	; (1bcc8 <pin_find+0x19c>)
   1bc72:	f7ff fbc1 	bl	1b3f8 <printf>
            mp_obj_print(MP_OBJ_FROM_PTR(pin_obj), PRINT_STR);
   1bc76:	2100      	movs	r1, #0
   1bc78:	69f8      	ldr	r0, [r7, #28]
   1bc7a:	f7f1 ff79 	bl	db70 <mp_obj_print>
            printf("\n");
   1bc7e:	200a      	movs	r0, #10
   1bc80:	f7ff fbe4 	bl	1b44c <putchar>
        }
        return pin_obj;
   1bc84:	69fb      	ldr	r3, [r7, #28]
   1bc86:	e00c      	b.n	1bca2 <pin_find+0x176>
//            printf("\n");
//        }
//        return pin_obj;
//    }

    nlr_raise(mp_obj_new_exception_msg_varg(&mp_type_ValueError, "Pin(%s) doesn't exist", mp_obj_str_get_str(user_obj)));
   1bc88:	6878      	ldr	r0, [r7, #4]
   1bc8a:	f7f9 fe13 	bl	158b4 <mp_obj_str_get_str>
   1bc8e:	4603      	mov	r3, r0
   1bc90:	461a      	mov	r2, r3
   1bc92:	4911      	ldr	r1, [pc, #68]	; (1bcd8 <pin_find+0x1ac>)
   1bc94:	4811      	ldr	r0, [pc, #68]	; (1bcdc <pin_find+0x1b0>)
   1bc96:	f7f3 fdf9 	bl	f88c <mp_obj_new_exception_msg_varg>
   1bc9a:	4603      	mov	r3, r0
   1bc9c:	4618      	mov	r0, r3
   1bc9e:	f7e4 fb1f 	bl	2e0 <nlr_jump>
}
   1bca2:	4618      	mov	r0, r3
   1bca4:	3720      	adds	r7, #32
   1bca6:	46bd      	mov	sp, r7
   1bca8:	bd80      	pop	{r7, pc}
   1bcaa:	bf00      	nop
   1bcac:	000250fc 	.word	0x000250fc
   1bcb0:	200012c4 	.word	0x200012c4
   1bcb4:	00024dcc 	.word	0x00024dcc
   1bcb8:	200012f0 	.word	0x200012f0
   1bcbc:	0002345c 	.word	0x0002345c
   1bcc0:	00024de0 	.word	0x00024de0
   1bcc4:	00024e08 	.word	0x00024e08
   1bcc8:	00024e1c 	.word	0x00024e1c
   1bccc:	00024e24 	.word	0x00024e24
   1bcd0:	00025ac4 	.word	0x00025ac4
   1bcd4:	00024e38 	.word	0x00024e38
   1bcd8:	00024e48 	.word	0x00024e48
   1bcdc:	000226d4 	.word	0x000226d4

0001bce0 <pin_print>:

/// \method __str__()
/// Return a string describing the pin object.
STATIC void pin_print(const mp_print_t *print, mp_obj_t self_in, mp_print_kind_t kind) {
   1bce0:	b580      	push	{r7, lr}
   1bce2:	b08e      	sub	sp, #56	; 0x38
   1bce4:	af00      	add	r7, sp, #0
   1bce6:	60f8      	str	r0, [r7, #12]
   1bce8:	60b9      	str	r1, [r7, #8]
   1bcea:	607a      	str	r2, [r7, #4]

    pin_obj_t *self = MP_OBJ_TO_PTR(self_in);
   1bcec:	68bb      	ldr	r3, [r7, #8]
   1bcee:	62bb      	str	r3, [r7, #40]	; 0x28

    // pin name
    mp_printf(print, "Pin(Pin.cpu.%q, mode=Pin.", self->name);
   1bcf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1bcf2:	685b      	ldr	r3, [r3, #4]
   1bcf4:	461a      	mov	r2, r3
   1bcf6:	4949      	ldr	r1, [pc, #292]	; (1be1c <pin_print+0x13c>)
   1bcf8:	68f8      	ldr	r0, [r7, #12]
   1bcfa:	f7e6 f98f 	bl	201c <mp_printf>

    uint32_t dir = MAP_GPIODirModeGet(self->port, self->pin_mask);
   1bcfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1bd00:	689a      	ldr	r2, [r3, #8]
   1bd02:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1bd04:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
   1bd08:	4619      	mov	r1, r3
   1bd0a:	4610      	mov	r0, r2
   1bd0c:	f001 fe59 	bl	1d9c2 <GPIODirModeGet>
   1bd10:	6278      	str	r0, [r7, #36]	; 0x24
    uint32_t type;
    uint32_t strength;
    MAP_GPIOPadConfigGet(self->port, self->pin_mask, &strength, &type);
   1bd12:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1bd14:	6898      	ldr	r0, [r3, #8]
   1bd16:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1bd18:	f893 1024 	ldrb.w	r1, [r3, #36]	; 0x24
   1bd1c:	f107 0318 	add.w	r3, r7, #24
   1bd20:	f107 0214 	add.w	r2, r7, #20
   1bd24:	f001 feee 	bl	1db04 <GPIOPadConfigGet>


    if (dir == GPIO_DIR_MODE_HW && type == GPIO_PIN_TYPE_ANALOG) {
   1bd28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1bd2a:	2b02      	cmp	r3, #2
   1bd2c:	d107      	bne.n	1bd3e <pin_print+0x5e>
   1bd2e:	69bb      	ldr	r3, [r7, #24]
   1bd30:	2b00      	cmp	r3, #0
   1bd32:	d104      	bne.n	1bd3e <pin_print+0x5e>
        // analog
        mp_print_str(print, "ANALOG)");
   1bd34:	493a      	ldr	r1, [pc, #232]	; (1be20 <pin_print+0x140>)
   1bd36:	68f8      	ldr	r0, [r7, #12]
   1bd38:	f7e5 fe5c 	bl	19f4 <mp_print_str>
            }
        } else {
            mp_print_str(print, ")");
        }
    }
}
   1bd3c:	e06a      	b.n	1be14 <pin_print+0x134>
        bool af = false;
   1bd3e:	2300      	movs	r3, #0
   1bd40:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        if (dir == GPIO_DIR_MODE_IN) {
   1bd44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1bd46:	2b00      	cmp	r3, #0
   1bd48:	d102      	bne.n	1bd50 <pin_print+0x70>
            mode_qst = MP_QSTR_IN;
   1bd4a:	23c1      	movs	r3, #193	; 0xc1
   1bd4c:	633b      	str	r3, [r7, #48]	; 0x30
   1bd4e:	e019      	b.n	1bd84 <pin_print+0xa4>
        } else if (dir == GPIO_DIR_MODE_OUT) {
   1bd50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1bd52:	2b01      	cmp	r3, #1
   1bd54:	d108      	bne.n	1bd68 <pin_print+0x88>
            if (type == GPIO_PIN_TYPE_OD){
   1bd56:	69bb      	ldr	r3, [r7, #24]
   1bd58:	2b09      	cmp	r3, #9
   1bd5a:	d102      	bne.n	1bd62 <pin_print+0x82>
                mode_qst = MP_QSTR_OPEN_DRAIN;
   1bd5c:	23d3      	movs	r3, #211	; 0xd3
   1bd5e:	633b      	str	r3, [r7, #48]	; 0x30
   1bd60:	e010      	b.n	1bd84 <pin_print+0xa4>
                mode_qst = MP_QSTR_OUT;
   1bd62:	23d5      	movs	r3, #213	; 0xd5
   1bd64:	633b      	str	r3, [r7, #48]	; 0x30
   1bd66:	e00d      	b.n	1bd84 <pin_print+0xa4>
            af = true;
   1bd68:	2301      	movs	r3, #1
   1bd6a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
            if (dir == GPIO_DIR_MODE_HW) {
   1bd6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1bd70:	2b02      	cmp	r3, #2
   1bd72:	d107      	bne.n	1bd84 <pin_print+0xa4>
                if (type == GPIO_PIN_TYPE_OD){
   1bd74:	69bb      	ldr	r3, [r7, #24]
   1bd76:	2b09      	cmp	r3, #9
   1bd78:	d102      	bne.n	1bd80 <pin_print+0xa0>
                   mode_qst = MP_QSTR_ALT_OPEN_DRAIN;
   1bd7a:	23b4      	movs	r3, #180	; 0xb4
   1bd7c:	633b      	str	r3, [r7, #48]	; 0x30
   1bd7e:	e001      	b.n	1bd84 <pin_print+0xa4>
                    mode_qst = MP_QSTR_ALT;
   1bd80:	23b3      	movs	r3, #179	; 0xb3
   1bd82:	633b      	str	r3, [r7, #48]	; 0x30
        mp_print_str(print, qstr_str(mode_qst));
   1bd84:	6b38      	ldr	r0, [r7, #48]	; 0x30
   1bd86:	f7e5 faf1 	bl	136c <qstr_str>
   1bd8a:	4603      	mov	r3, r0
   1bd8c:	4619      	mov	r1, r3
   1bd8e:	68f8      	ldr	r0, [r7, #12]
   1bd90:	f7e5 fe30 	bl	19f4 <mp_print_str>
        qstr pull_qst = MP_QSTR_NULL;
   1bd94:	2300      	movs	r3, #0
   1bd96:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (type == GPIO_PIN_TYPE_STD_WPU) {
   1bd98:	69bb      	ldr	r3, [r7, #24]
   1bd9a:	2b0a      	cmp	r3, #10
   1bd9c:	d102      	bne.n	1bda4 <pin_print+0xc4>
            pull_qst = MP_QSTR_PULL_UP;
   1bd9e:	23d9      	movs	r3, #217	; 0xd9
   1bda0:	62fb      	str	r3, [r7, #44]	; 0x2c
   1bda2:	e004      	b.n	1bdae <pin_print+0xce>
        } else if (type == GPIO_PIN_TYPE_STD_WPD) {
   1bda4:	69bb      	ldr	r3, [r7, #24]
   1bda6:	2b0c      	cmp	r3, #12
   1bda8:	d101      	bne.n	1bdae <pin_print+0xce>
            pull_qst = MP_QSTR_PULL_DOWN;
   1bdaa:	23d7      	movs	r3, #215	; 0xd7
   1bdac:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (pull_qst != MP_QSTR_NULL) {
   1bdae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1bdb0:	2b00      	cmp	r3, #0
   1bdb2:	d004      	beq.n	1bdbe <pin_print+0xde>
            mp_printf(print, ", pull=Pin.%q", pull_qst);
   1bdb4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   1bdb6:	491b      	ldr	r1, [pc, #108]	; (1be24 <pin_print+0x144>)
   1bdb8:	68f8      	ldr	r0, [r7, #12]
   1bdba:	f7e6 f92f 	bl	201c <mp_printf>
        if (af) {
   1bdbe:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
   1bdc2:	2b00      	cmp	r3, #0
   1bdc4:	d022      	beq.n	1be0c <pin_print+0x12c>
            mp_uint_t af_idx = mp_hal_pin_get_af(self);
   1bdc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1bdc8:	691b      	ldr	r3, [r3, #16]
   1bdca:	f8d3 252c 	ldr.w	r2, [r3, #1324]	; 0x52c
   1bdce:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1bdd0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
   1bdd4:	009b      	lsls	r3, r3, #2
   1bdd6:	fa22 f303 	lsr.w	r3, r2, r3
   1bdda:	f003 030f 	and.w	r3, r3, #15
   1bdde:	623b      	str	r3, [r7, #32]
            const pin_af_obj_t *af_obj = pin_find_af_by_index(self, af_idx);
   1bde0:	6a39      	ldr	r1, [r7, #32]
   1bde2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   1bde4:	f000 fb7c 	bl	1c4e0 <pin_find_af_by_index>
   1bde8:	61f8      	str	r0, [r7, #28]
            if (af_obj == NULL) {
   1bdea:	69fb      	ldr	r3, [r7, #28]
   1bdec:	2b00      	cmp	r3, #0
   1bdee:	d105      	bne.n	1bdfc <pin_print+0x11c>
                mp_printf(print, ", af=%d)", af_idx);
   1bdf0:	6a3a      	ldr	r2, [r7, #32]
   1bdf2:	490d      	ldr	r1, [pc, #52]	; (1be28 <pin_print+0x148>)
   1bdf4:	68f8      	ldr	r0, [r7, #12]
   1bdf6:	f7e6 f911 	bl	201c <mp_printf>
}
   1bdfa:	e00b      	b.n	1be14 <pin_print+0x134>
                mp_printf(print, ", af=Pin.%q)", af_obj->name);
   1bdfc:	69fb      	ldr	r3, [r7, #28]
   1bdfe:	681b      	ldr	r3, [r3, #0]
   1be00:	461a      	mov	r2, r3
   1be02:	490a      	ldr	r1, [pc, #40]	; (1be2c <pin_print+0x14c>)
   1be04:	68f8      	ldr	r0, [r7, #12]
   1be06:	f7e6 f909 	bl	201c <mp_printf>
}
   1be0a:	e003      	b.n	1be14 <pin_print+0x134>
            mp_print_str(print, ")");
   1be0c:	4908      	ldr	r1, [pc, #32]	; (1be30 <pin_print+0x150>)
   1be0e:	68f8      	ldr	r0, [r7, #12]
   1be10:	f7e5 fdf0 	bl	19f4 <mp_print_str>
}
   1be14:	bf00      	nop
   1be16:	3738      	adds	r7, #56	; 0x38
   1be18:	46bd      	mov	sp, r7
   1be1a:	bd80      	pop	{r7, pc}
   1be1c:	00024e60 	.word	0x00024e60
   1be20:	00024e7c 	.word	0x00024e7c
   1be24:	00024e84 	.word	0x00024e84
   1be28:	00024e94 	.word	0x00024e94
   1be2c:	00024ea0 	.word	0x00024ea0
   1be30:	00024eb0 	.word	0x00024eb0

0001be34 <pin_make_new>:
STATIC mp_obj_t pin_obj_init_helper(const pin_obj_t *pin, size_t n_args, const mp_obj_t *args, mp_map_t *kw_args);

/// \classmethod \constructor(id, ...)
/// Create a new Pin object associated with the id.  If additional arguments are given,
/// they are used to initialise the pin.  See `init`.
mp_obj_t pin_make_new(const mp_obj_type_t *type, size_t n_args, size_t n_kw, const mp_obj_t *args) {
   1be34:	b580      	push	{r7, lr}
   1be36:	b08a      	sub	sp, #40	; 0x28
   1be38:	af02      	add	r7, sp, #8
   1be3a:	60f8      	str	r0, [r7, #12]
   1be3c:	60b9      	str	r1, [r7, #8]
   1be3e:	607a      	str	r2, [r7, #4]
   1be40:	603b      	str	r3, [r7, #0]
    mp_arg_check_num(n_args, n_kw, 1, MP_OBJ_FUN_ARGS_MAX, true);
   1be42:	2301      	movs	r3, #1
   1be44:	9300      	str	r3, [sp, #0]
   1be46:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1be4a:	2201      	movs	r2, #1
   1be4c:	6879      	ldr	r1, [r7, #4]
   1be4e:	68b8      	ldr	r0, [r7, #8]
   1be50:	f7f1 fa3c 	bl	d2cc <mp_arg_check_num>

    // Run an argument through the mapper and return the result.
    const pin_obj_t *pin = pin_find(args[0]);
   1be54:	683b      	ldr	r3, [r7, #0]
   1be56:	681b      	ldr	r3, [r3, #0]
   1be58:	4618      	mov	r0, r3
   1be5a:	f7ff fe67 	bl	1bb2c <pin_find>
   1be5e:	61f8      	str	r0, [r7, #28]

    if (n_args > 1 || n_kw > 0) {
   1be60:	68bb      	ldr	r3, [r7, #8]
   1be62:	2b01      	cmp	r3, #1
   1be64:	d802      	bhi.n	1be6c <pin_make_new+0x38>
   1be66:	687b      	ldr	r3, [r7, #4]
   1be68:	2b00      	cmp	r3, #0
   1be6a:	d012      	beq.n	1be92 <pin_make_new+0x5e>
        // pin mode given, so configure this GPIO
        mp_map_t kw_args;
        mp_map_init_fixed_table(&kw_args, n_kw, args + n_args);
   1be6c:	68bb      	ldr	r3, [r7, #8]
   1be6e:	009b      	lsls	r3, r3, #2
   1be70:	683a      	ldr	r2, [r7, #0]
   1be72:	441a      	add	r2, r3
   1be74:	f107 0310 	add.w	r3, r7, #16
   1be78:	6879      	ldr	r1, [r7, #4]
   1be7a:	4618      	mov	r0, r3
   1be7c:	f7f1 fba8 	bl	d5d0 <mp_map_init_fixed_table>
        pin_obj_init_helper(pin, n_args - 1, args + 1, &kw_args);
   1be80:	68bb      	ldr	r3, [r7, #8]
   1be82:	1e59      	subs	r1, r3, #1
   1be84:	683b      	ldr	r3, [r7, #0]
   1be86:	1d1a      	adds	r2, r3, #4
   1be88:	f107 0310 	add.w	r3, r7, #16
   1be8c:	69f8      	ldr	r0, [r7, #28]
   1be8e:	f000 f8c7 	bl	1c020 <pin_obj_init_helper>
    }

    return MP_OBJ_FROM_PTR(pin);
   1be92:	69fb      	ldr	r3, [r7, #28]
}
   1be94:	4618      	mov	r0, r3
   1be96:	3720      	adds	r7, #32
   1be98:	46bd      	mov	sp, r7
   1be9a:	bd80      	pop	{r7, pc}

0001be9c <pin_call>:

// fast method for getting/setting pin value
STATIC mp_obj_t pin_call(mp_obj_t self_in, size_t n_args, size_t n_kw, const mp_obj_t *args) {
   1be9c:	b5b0      	push	{r4, r5, r7, lr}
   1be9e:	b088      	sub	sp, #32
   1bea0:	af02      	add	r7, sp, #8
   1bea2:	60f8      	str	r0, [r7, #12]
   1bea4:	60b9      	str	r1, [r7, #8]
   1bea6:	607a      	str	r2, [r7, #4]
   1bea8:	603b      	str	r3, [r7, #0]
    mp_arg_check_num(n_args, n_kw, 0, 1, false);
   1beaa:	2300      	movs	r3, #0
   1beac:	9300      	str	r3, [sp, #0]
   1beae:	2301      	movs	r3, #1
   1beb0:	2200      	movs	r2, #0
   1beb2:	6879      	ldr	r1, [r7, #4]
   1beb4:	68b8      	ldr	r0, [r7, #8]
   1beb6:	f7f1 fa09 	bl	d2cc <mp_arg_check_num>
    pin_obj_t *self = MP_OBJ_TO_PTR(self_in);
   1beba:	68fb      	ldr	r3, [r7, #12]
   1bebc:	617b      	str	r3, [r7, #20]
    if (n_args == 0) {
   1bebe:	68bb      	ldr	r3, [r7, #8]
   1bec0:	2b00      	cmp	r3, #0
   1bec2:	d10d      	bne.n	1bee0 <pin_call+0x44>
        // get pin
        return MP_OBJ_NEW_SMALL_INT(mp_hal_pin_read(self));
   1bec4:	697b      	ldr	r3, [r7, #20]
   1bec6:	689a      	ldr	r2, [r3, #8]
   1bec8:	697b      	ldr	r3, [r7, #20]
   1beca:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
   1bece:	4619      	mov	r1, r3
   1bed0:	4610      	mov	r0, r2
   1bed2:	f001 fe80 	bl	1dbd6 <GPIOPinRead>
   1bed6:	4603      	mov	r3, r0
   1bed8:	005b      	lsls	r3, r3, #1
   1beda:	f043 0301 	orr.w	r3, r3, #1
   1bede:	e017      	b.n	1bf10 <pin_call+0x74>
    } else {
        // set pin
        mp_hal_pin_write(self, mp_obj_is_true(args[0]));
   1bee0:	697b      	ldr	r3, [r7, #20]
   1bee2:	689c      	ldr	r4, [r3, #8]
   1bee4:	697b      	ldr	r3, [r7, #20]
   1bee6:	f893 5024 	ldrb.w	r5, [r3, #36]	; 0x24
   1beea:	683b      	ldr	r3, [r7, #0]
   1beec:	681b      	ldr	r3, [r3, #0]
   1beee:	4618      	mov	r0, r3
   1bef0:	f7f1 febe 	bl	dc70 <mp_obj_is_true>
   1bef4:	4603      	mov	r3, r0
   1bef6:	2b00      	cmp	r3, #0
   1bef8:	d003      	beq.n	1bf02 <pin_call+0x66>
   1befa:	697b      	ldr	r3, [r7, #20]
   1befc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
   1bf00:	e000      	b.n	1bf04 <pin_call+0x68>
   1bf02:	2300      	movs	r3, #0
   1bf04:	461a      	mov	r2, r3
   1bf06:	4629      	mov	r1, r5
   1bf08:	4620      	mov	r0, r4
   1bf0a:	f001 fe67 	bl	1dbdc <GPIOPinWrite>
        return mp_const_none;
   1bf0e:	4b02      	ldr	r3, [pc, #8]	; (1bf18 <pin_call+0x7c>)
    }
}
   1bf10:	4618      	mov	r0, r3
   1bf12:	3718      	adds	r7, #24
   1bf14:	46bd      	mov	sp, r7
   1bf16:	bdb0      	pop	{r4, r5, r7, pc}
   1bf18:	0002345c 	.word	0x0002345c

0001bf1c <pin_mapper>:

/// \classmethod mapper([fun])
/// Get or set the pin mapper function.
STATIC mp_obj_t pin_mapper(size_t n_args, const mp_obj_t *args) {
   1bf1c:	b480      	push	{r7}
   1bf1e:	b083      	sub	sp, #12
   1bf20:	af00      	add	r7, sp, #0
   1bf22:	6078      	str	r0, [r7, #4]
   1bf24:	6039      	str	r1, [r7, #0]
    if (n_args > 1) {
   1bf26:	687b      	ldr	r3, [r7, #4]
   1bf28:	2b01      	cmp	r3, #1
   1bf2a:	d906      	bls.n	1bf3a <pin_mapper+0x1e>
        MP_STATE_PORT(pin_class_mapper) = args[1];
   1bf2c:	683b      	ldr	r3, [r7, #0]
   1bf2e:	685b      	ldr	r3, [r3, #4]
   1bf30:	4a06      	ldr	r2, [pc, #24]	; (1bf4c <pin_mapper+0x30>)
   1bf32:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
        return mp_const_none;
   1bf36:	4b06      	ldr	r3, [pc, #24]	; (1bf50 <pin_mapper+0x34>)
   1bf38:	e002      	b.n	1bf40 <pin_mapper+0x24>
    }
    return MP_STATE_PORT(pin_class_mapper);
   1bf3a:	4b04      	ldr	r3, [pc, #16]	; (1bf4c <pin_mapper+0x30>)
   1bf3c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
}
   1bf40:	4618      	mov	r0, r3
   1bf42:	370c      	adds	r7, #12
   1bf44:	46bd      	mov	sp, r7
   1bf46:	f85d 7b04 	ldr.w	r7, [sp], #4
   1bf4a:	4770      	bx	lr
   1bf4c:	200012f0 	.word	0x200012f0
   1bf50:	0002345c 	.word	0x0002345c

0001bf54 <pin_map_dict>:
STATIC MP_DEFINE_CONST_FUN_OBJ_VAR_BETWEEN(pin_mapper_fun_obj, 1, 2, pin_mapper);
STATIC MP_DEFINE_CONST_CLASSMETHOD_OBJ(pin_mapper_obj, MP_ROM_PTR(&pin_mapper_fun_obj));

/// \classmethod dict([dict])
/// Get or set the pin mapper dictionary.
STATIC mp_obj_t pin_map_dict(size_t n_args, const mp_obj_t *args) {
   1bf54:	b480      	push	{r7}
   1bf56:	b083      	sub	sp, #12
   1bf58:	af00      	add	r7, sp, #0
   1bf5a:	6078      	str	r0, [r7, #4]
   1bf5c:	6039      	str	r1, [r7, #0]
    if (n_args > 1) {
   1bf5e:	687b      	ldr	r3, [r7, #4]
   1bf60:	2b01      	cmp	r3, #1
   1bf62:	d906      	bls.n	1bf72 <pin_map_dict+0x1e>
        MP_STATE_PORT(pin_class_map_dict) = args[1];
   1bf64:	683b      	ldr	r3, [r7, #0]
   1bf66:	685b      	ldr	r3, [r3, #4]
   1bf68:	4a06      	ldr	r2, [pc, #24]	; (1bf84 <pin_map_dict+0x30>)
   1bf6a:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
        return mp_const_none;
   1bf6e:	4b06      	ldr	r3, [pc, #24]	; (1bf88 <pin_map_dict+0x34>)
   1bf70:	e002      	b.n	1bf78 <pin_map_dict+0x24>
    }
    return MP_STATE_PORT(pin_class_map_dict);
   1bf72:	4b04      	ldr	r3, [pc, #16]	; (1bf84 <pin_map_dict+0x30>)
   1bf74:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
}
   1bf78:	4618      	mov	r0, r3
   1bf7a:	370c      	adds	r7, #12
   1bf7c:	46bd      	mov	sp, r7
   1bf7e:	f85d 7b04 	ldr.w	r7, [sp], #4
   1bf82:	4770      	bx	lr
   1bf84:	200012f0 	.word	0x200012f0
   1bf88:	0002345c 	.word	0x0002345c

0001bf8c <pin_af_list>:
STATIC MP_DEFINE_CONST_FUN_OBJ_VAR_BETWEEN(pin_map_dict_fun_obj, 1, 2, pin_map_dict);
STATIC MP_DEFINE_CONST_CLASSMETHOD_OBJ(pin_map_dict_obj, MP_ROM_PTR(&pin_map_dict_fun_obj));

/// \classmethod af_list()
/// Returns an array of alternate functions available for this pin.
STATIC mp_obj_t pin_af_list(mp_obj_t self_in) {
   1bf8c:	b580      	push	{r7, lr}
   1bf8e:	b086      	sub	sp, #24
   1bf90:	af00      	add	r7, sp, #0
   1bf92:	6078      	str	r0, [r7, #4]
    pin_obj_t *self = MP_OBJ_TO_PTR(self_in);
   1bf94:	687b      	ldr	r3, [r7, #4]
   1bf96:	60fb      	str	r3, [r7, #12]
    mp_obj_t result = mp_obj_new_list(0, NULL);
   1bf98:	2100      	movs	r1, #0
   1bf9a:	2000      	movs	r0, #0
   1bf9c:	f7f5 fdb8 	bl	11b10 <mp_obj_new_list>
   1bfa0:	60b8      	str	r0, [r7, #8]

    const pin_af_obj_t *af = self->af_list;
   1bfa2:	68fb      	ldr	r3, [r7, #12]
   1bfa4:	695b      	ldr	r3, [r3, #20]
   1bfa6:	617b      	str	r3, [r7, #20]
    for (mp_uint_t i = 0; i < self->num_afs; i++, af++) {
   1bfa8:	2300      	movs	r3, #0
   1bfaa:	613b      	str	r3, [r7, #16]
   1bfac:	e009      	b.n	1bfc2 <pin_af_list+0x36>
        mp_obj_list_append(result, MP_OBJ_FROM_PTR(af));
   1bfae:	6979      	ldr	r1, [r7, #20]
   1bfb0:	68b8      	ldr	r0, [r7, #8]
   1bfb2:	f7f5 f91b 	bl	111ec <mp_obj_list_append>
    for (mp_uint_t i = 0; i < self->num_afs; i++, af++) {
   1bfb6:	693b      	ldr	r3, [r7, #16]
   1bfb8:	3301      	adds	r3, #1
   1bfba:	613b      	str	r3, [r7, #16]
   1bfbc:	697b      	ldr	r3, [r7, #20]
   1bfbe:	3310      	adds	r3, #16
   1bfc0:	617b      	str	r3, [r7, #20]
   1bfc2:	68fb      	ldr	r3, [r7, #12]
   1bfc4:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
   1bfc8:	461a      	mov	r2, r3
   1bfca:	693b      	ldr	r3, [r7, #16]
   1bfcc:	429a      	cmp	r2, r3
   1bfce:	d8ee      	bhi.n	1bfae <pin_af_list+0x22>
    }
    return result;
   1bfd0:	68bb      	ldr	r3, [r7, #8]
}
   1bfd2:	4618      	mov	r0, r3
   1bfd4:	3718      	adds	r7, #24
   1bfd6:	46bd      	mov	sp, r7
   1bfd8:	bd80      	pop	{r7, pc}
   1bfda:	bf00      	nop

0001bfdc <pin_debug>:
STATIC MP_DEFINE_CONST_FUN_OBJ_1(pin_af_list_obj, pin_af_list);

/// \classmethod debug([state])
/// Get or set the debugging state (`True` or `False` for on or off).
STATIC mp_obj_t pin_debug(size_t n_args, const mp_obj_t *args) {
   1bfdc:	b580      	push	{r7, lr}
   1bfde:	b082      	sub	sp, #8
   1bfe0:	af00      	add	r7, sp, #0
   1bfe2:	6078      	str	r0, [r7, #4]
   1bfe4:	6039      	str	r1, [r7, #0]
    if (n_args > 1) {
   1bfe6:	687b      	ldr	r3, [r7, #4]
   1bfe8:	2b01      	cmp	r3, #1
   1bfea:	d90b      	bls.n	1c004 <pin_debug+0x28>
        pin_class_debug = mp_obj_is_true(args[1]);
   1bfec:	683b      	ldr	r3, [r7, #0]
   1bfee:	3304      	adds	r3, #4
   1bff0:	681b      	ldr	r3, [r3, #0]
   1bff2:	4618      	mov	r0, r3
   1bff4:	f7f1 fe3c 	bl	dc70 <mp_obj_is_true>
   1bff8:	4603      	mov	r3, r0
   1bffa:	461a      	mov	r2, r3
   1bffc:	4b06      	ldr	r3, [pc, #24]	; (1c018 <pin_debug+0x3c>)
   1bffe:	701a      	strb	r2, [r3, #0]
        return mp_const_none;
   1c000:	4b06      	ldr	r3, [pc, #24]	; (1c01c <pin_debug+0x40>)
   1c002:	e005      	b.n	1c010 <pin_debug+0x34>
    }
    return mp_obj_new_bool(pin_class_debug);
   1c004:	4b04      	ldr	r3, [pc, #16]	; (1c018 <pin_debug+0x3c>)
   1c006:	781b      	ldrb	r3, [r3, #0]
   1c008:	4618      	mov	r0, r3
   1c00a:	f7ff fd63 	bl	1bad4 <mp_obj_new_bool>
   1c00e:	4603      	mov	r3, r0
}
   1c010:	4618      	mov	r0, r3
   1c012:	3708      	adds	r7, #8
   1c014:	46bd      	mov	sp, r7
   1c016:	bd80      	pop	{r7, pc}
   1c018:	200012c4 	.word	0x200012c4
   1c01c:	0002345c 	.word	0x0002345c

0001c020 <pin_obj_init_helper>:
STATIC MP_DEFINE_CONST_FUN_OBJ_VAR_BETWEEN(pin_debug_fun_obj, 1, 2, pin_debug);
STATIC MP_DEFINE_CONST_CLASSMETHOD_OBJ(pin_debug_obj, MP_ROM_PTR(&pin_debug_fun_obj));

// init(dir, pull=None, af=-1, *, value, alt)
STATIC mp_obj_t pin_obj_init_helper(const pin_obj_t *self, size_t n_args, const mp_obj_t *pos_args, mp_map_t *kw_args) {
   1c020:	b5b0      	push	{r4, r5, r7, lr}
   1c022:	b090      	sub	sp, #64	; 0x40
   1c024:	af02      	add	r7, sp, #8
   1c026:	60f8      	str	r0, [r7, #12]
   1c028:	60b9      	str	r1, [r7, #8]
   1c02a:	607a      	str	r2, [r7, #4]
   1c02c:	603b      	str	r3, [r7, #0]
        { MP_QSTR_alt, MP_ARG_KW_ONLY | MP_ARG_INT, {.u_int = -1}},
    };

    // parse args
    mp_arg_val_t args[MP_ARRAY_SIZE(allowed_args)];
    mp_arg_parse_all(n_args, pos_args, kw_args, MP_ARRAY_SIZE(allowed_args), allowed_args, args);
   1c02e:	f107 0310 	add.w	r3, r7, #16
   1c032:	9301      	str	r3, [sp, #4]
   1c034:	4b59      	ldr	r3, [pc, #356]	; (1c19c <pin_obj_init_helper+0x17c>)
   1c036:	9300      	str	r3, [sp, #0]
   1c038:	2306      	movs	r3, #6
   1c03a:	683a      	ldr	r2, [r7, #0]
   1c03c:	6879      	ldr	r1, [r7, #4]
   1c03e:	68b8      	ldr	r0, [r7, #8]
   1c040:	f7f1 f970 	bl	d324 <mp_arg_parse_all>

    // get io dir
    uint32_t dir = args[0].u_int;
   1c044:	693b      	ldr	r3, [r7, #16]
   1c046:	62bb      	str	r3, [r7, #40]	; 0x28
    if (!IS_GPIO_DIR(dir)) {
   1c048:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1c04a:	2b00      	cmp	r3, #0
   1c04c:	d00e      	beq.n	1c06c <pin_obj_init_helper+0x4c>
   1c04e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1c050:	2b01      	cmp	r3, #1
   1c052:	d00b      	beq.n	1c06c <pin_obj_init_helper+0x4c>
   1c054:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1c056:	2b02      	cmp	r3, #2
   1c058:	d008      	beq.n	1c06c <pin_obj_init_helper+0x4c>
        nlr_raise(mp_obj_new_exception_msg_varg(&mp_type_ValueError, "invalid pin direction: %d", dir));
   1c05a:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1c05c:	4950      	ldr	r1, [pc, #320]	; (1c1a0 <pin_obj_init_helper+0x180>)
   1c05e:	4851      	ldr	r0, [pc, #324]	; (1c1a4 <pin_obj_init_helper+0x184>)
   1c060:	f7f3 fc14 	bl	f88c <mp_obj_new_exception_msg_varg>
   1c064:	4603      	mov	r3, r0
   1c066:	4618      	mov	r0, r3
   1c068:	f7e4 f93a 	bl	2e0 <nlr_jump>
    }

    // get pull dir
    uint type = GPIO_PIN_TYPE_STD;
   1c06c:	2308      	movs	r3, #8
   1c06e:	637b      	str	r3, [r7, #52]	; 0x34
    if (args[1].u_obj != mp_const_none) {
   1c070:	697b      	ldr	r3, [r7, #20]
   1c072:	4a4d      	ldr	r2, [pc, #308]	; (1c1a8 <pin_obj_init_helper+0x188>)
   1c074:	4293      	cmp	r3, r2
   1c076:	d005      	beq.n	1c084 <pin_obj_init_helper+0x64>
        type = mp_obj_get_int(args[1].u_obj);
   1c078:	697b      	ldr	r3, [r7, #20]
   1c07a:	4618      	mov	r0, r3
   1c07c:	f7f1 fef8 	bl	de70 <mp_obj_get_int>
   1c080:	4603      	mov	r3, r0
   1c082:	637b      	str	r3, [r7, #52]	; 0x34
    }
    if (!IS_GPIO_TYPE(type)) {
   1c084:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1c086:	2b08      	cmp	r3, #8
   1c088:	d01c      	beq.n	1c0c4 <pin_obj_init_helper+0xa4>
   1c08a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1c08c:	2b0a      	cmp	r3, #10
   1c08e:	d019      	beq.n	1c0c4 <pin_obj_init_helper+0xa4>
   1c090:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1c092:	2b0c      	cmp	r3, #12
   1c094:	d016      	beq.n	1c0c4 <pin_obj_init_helper+0xa4>
   1c096:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1c098:	2b09      	cmp	r3, #9
   1c09a:	d013      	beq.n	1c0c4 <pin_obj_init_helper+0xa4>
   1c09c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1c09e:	f5b3 7f84 	cmp.w	r3, #264	; 0x108
   1c0a2:	d00f      	beq.n	1c0c4 <pin_obj_init_helper+0xa4>
   1c0a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1c0a6:	f5b3 7f02 	cmp.w	r3, #520	; 0x208
   1c0aa:	d00b      	beq.n	1c0c4 <pin_obj_init_helper+0xa4>
   1c0ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1c0ae:	2b00      	cmp	r3, #0
   1c0b0:	d008      	beq.n	1c0c4 <pin_obj_init_helper+0xa4>
        nlr_raise(mp_obj_new_exception_msg_varg(&mp_type_ValueError, "invalid pin type: %d", type));
   1c0b2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   1c0b4:	493d      	ldr	r1, [pc, #244]	; (1c1ac <pin_obj_init_helper+0x18c>)
   1c0b6:	483b      	ldr	r0, [pc, #236]	; (1c1a4 <pin_obj_init_helper+0x184>)
   1c0b8:	f7f3 fbe8 	bl	f88c <mp_obj_new_exception_msg_varg>
   1c0bc:	4603      	mov	r3, r0
   1c0be:	4618      	mov	r0, r3
   1c0c0:	f7e4 f90e 	bl	2e0 <nlr_jump>
    }

    uint drive = GPIO_STRENGTH_2MA;
   1c0c4:	2301      	movs	r3, #1
   1c0c6:	633b      	str	r3, [r7, #48]	; 0x30
    if (args[2].u_obj != MP_OBJ_NULL) {
   1c0c8:	69bb      	ldr	r3, [r7, #24]
   1c0ca:	2b00      	cmp	r3, #0
   1c0cc:	d005      	beq.n	1c0da <pin_obj_init_helper+0xba>
        drive = mp_obj_get_int(args[2].u_obj);
   1c0ce:	69bb      	ldr	r3, [r7, #24]
   1c0d0:	4618      	mov	r0, r3
   1c0d2:	f7f1 fecd 	bl	de70 <mp_obj_get_int>
   1c0d6:	4603      	mov	r3, r0
   1c0d8:	633b      	str	r3, [r7, #48]	; 0x30
    }
    if (!IS_GPIO_STRENGTH(drive)) {
   1c0da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1c0dc:	2b01      	cmp	r3, #1
   1c0de:	d00e      	beq.n	1c0fe <pin_obj_init_helper+0xde>
   1c0e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1c0e2:	2b02      	cmp	r3, #2
   1c0e4:	d00b      	beq.n	1c0fe <pin_obj_init_helper+0xde>
   1c0e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1c0e8:	2b66      	cmp	r3, #102	; 0x66
   1c0ea:	d008      	beq.n	1c0fe <pin_obj_init_helper+0xde>
        nlr_raise(mp_obj_new_exception_msg_varg(&mp_type_ValueError, "invalid pin drive: %d", drive));
   1c0ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   1c0ee:	4930      	ldr	r1, [pc, #192]	; (1c1b0 <pin_obj_init_helper+0x190>)
   1c0f0:	482c      	ldr	r0, [pc, #176]	; (1c1a4 <pin_obj_init_helper+0x184>)
   1c0f2:	f7f3 fbcb 	bl	f88c <mp_obj_new_exception_msg_varg>
   1c0f6:	4603      	mov	r3, r0
   1c0f8:	4618      	mov	r0, r3
   1c0fa:	f7e4 f8f1 	bl	2e0 <nlr_jump>
    }

    // get af (alternate function); alt-arg overrides af-arg
    mp_int_t af = args[5].u_int;
   1c0fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1c100:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (af == -1) {
   1c102:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1c104:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   1c108:	d101      	bne.n	1c10e <pin_obj_init_helper+0xee>
        af = args[3].u_int;
   1c10a:	69fb      	ldr	r3, [r7, #28]
   1c10c:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    if ((dir == GPIO_DIR_MODE_HW) && !IS_GPIO_AF(af)) {
   1c10e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1c110:	2b02      	cmp	r3, #2
   1c112:	d119      	bne.n	1c148 <pin_obj_init_helper+0x128>
   1c114:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1c116:	2b01      	cmp	r3, #1
   1c118:	dd04      	ble.n	1c124 <pin_obj_init_helper+0x104>
   1c11a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1c11c:	2b0c      	cmp	r3, #12
   1c11e:	dc01      	bgt.n	1c124 <pin_obj_init_helper+0x104>
   1c120:	2301      	movs	r3, #1
   1c122:	e000      	b.n	1c126 <pin_obj_init_helper+0x106>
   1c124:	2300      	movs	r3, #0
   1c126:	f003 0301 	and.w	r3, r3, #1
   1c12a:	b2db      	uxtb	r3, r3
   1c12c:	f083 0301 	eor.w	r3, r3, #1
   1c130:	b2db      	uxtb	r3, r3
   1c132:	2b00      	cmp	r3, #0
   1c134:	d008      	beq.n	1c148 <pin_obj_init_helper+0x128>
        nlr_raise(mp_obj_new_exception_msg_varg(&mp_type_ValueError, "invalid pin af: %d", af));
   1c136:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   1c138:	491e      	ldr	r1, [pc, #120]	; (1c1b4 <pin_obj_init_helper+0x194>)
   1c13a:	481a      	ldr	r0, [pc, #104]	; (1c1a4 <pin_obj_init_helper+0x184>)
   1c13c:	f7f3 fba6 	bl	f88c <mp_obj_new_exception_msg_varg>
   1c140:	4603      	mov	r3, r0
   1c142:	4618      	mov	r0, r3
   1c144:	f7e4 f8cc 	bl	2e0 <nlr_jump>

    // if given, set the pin value before initialising to prevent glitches
//    if (args[4].u_obj != MP_OBJ_NULL) {
//        mp_hal_pin_write(self, mp_obj_is_true(args[3].u_obj));
//    }
    mp_hal_pin_config(self, dir, type, drive);
   1c148:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1c14a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   1c14c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   1c14e:	68f8      	ldr	r0, [r7, #12]
   1c150:	f7ff fc58 	bl	1ba04 <mp_hal_pin_config>
    mp_hal_pin_set_af(self, af);
   1c154:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1c156:	b2db      	uxtb	r3, r3
   1c158:	4619      	mov	r1, r3
   1c15a:	68f8      	ldr	r0, [r7, #12]
   1c15c:	f7ff fc74 	bl	1ba48 <mp_hal_pin_set_af>

    if (args[4].u_obj != MP_OBJ_NULL) {
   1c160:	6a3b      	ldr	r3, [r7, #32]
   1c162:	2b00      	cmp	r3, #0
   1c164:	d015      	beq.n	1c192 <pin_obj_init_helper+0x172>
        mp_hal_pin_write(self, mp_obj_is_true(args[4].u_obj));
   1c166:	68fb      	ldr	r3, [r7, #12]
   1c168:	689c      	ldr	r4, [r3, #8]
   1c16a:	68fb      	ldr	r3, [r7, #12]
   1c16c:	f893 5024 	ldrb.w	r5, [r3, #36]	; 0x24
   1c170:	6a3b      	ldr	r3, [r7, #32]
   1c172:	4618      	mov	r0, r3
   1c174:	f7f1 fd7c 	bl	dc70 <mp_obj_is_true>
   1c178:	4603      	mov	r3, r0
   1c17a:	2b00      	cmp	r3, #0
   1c17c:	d003      	beq.n	1c186 <pin_obj_init_helper+0x166>
   1c17e:	68fb      	ldr	r3, [r7, #12]
   1c180:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
   1c184:	e000      	b.n	1c188 <pin_obj_init_helper+0x168>
   1c186:	2300      	movs	r3, #0
   1c188:	461a      	mov	r2, r3
   1c18a:	4629      	mov	r1, r5
   1c18c:	4620      	mov	r0, r4
   1c18e:	f001 fd25 	bl	1dbdc <GPIOPinWrite>
    }

    return mp_const_none;
   1c192:	4b05      	ldr	r3, [pc, #20]	; (1c1a8 <pin_obj_init_helper+0x188>)
}
   1c194:	4618      	mov	r0, r3
   1c196:	3738      	adds	r7, #56	; 0x38
   1c198:	46bd      	mov	sp, r7
   1c19a:	bdb0      	pop	{r4, r5, r7, pc}
   1c19c:	00025138 	.word	0x00025138
   1c1a0:	00024ef8 	.word	0x00024ef8
   1c1a4:	000226d4 	.word	0x000226d4
   1c1a8:	0002345c 	.word	0x0002345c
   1c1ac:	00024f14 	.word	0x00024f14
   1c1b0:	00024f2c 	.word	0x00024f2c
   1c1b4:	00024f44 	.word	0x00024f44

0001c1b8 <pin_obj_init>:

STATIC mp_obj_t pin_obj_init(size_t n_args, const mp_obj_t *args, mp_map_t *kw_args) {
   1c1b8:	b580      	push	{r7, lr}
   1c1ba:	b084      	sub	sp, #16
   1c1bc:	af00      	add	r7, sp, #0
   1c1be:	60f8      	str	r0, [r7, #12]
   1c1c0:	60b9      	str	r1, [r7, #8]
   1c1c2:	607a      	str	r2, [r7, #4]
    return pin_obj_init_helper(MP_OBJ_TO_PTR(args[0]), n_args - 1, args + 1, kw_args);
   1c1c4:	68bb      	ldr	r3, [r7, #8]
   1c1c6:	6818      	ldr	r0, [r3, #0]
   1c1c8:	68fb      	ldr	r3, [r7, #12]
   1c1ca:	1e59      	subs	r1, r3, #1
   1c1cc:	68bb      	ldr	r3, [r7, #8]
   1c1ce:	1d1a      	adds	r2, r3, #4
   1c1d0:	687b      	ldr	r3, [r7, #4]
   1c1d2:	f7ff ff25 	bl	1c020 <pin_obj_init_helper>
   1c1d6:	4603      	mov	r3, r0
}
   1c1d8:	4618      	mov	r0, r3
   1c1da:	3710      	adds	r7, #16
   1c1dc:	46bd      	mov	sp, r7
   1c1de:	bd80      	pop	{r7, pc}

0001c1e0 <pin_value>:
///
///   - With no argument, return 0 or 1 depending on the logic level of the pin.
///   - With `value` given, set the logic level of the pin.  `value` can be
///   anything that converts to a boolean.  If it converts to `True`, the pin
///   is set high, otherwise it is set low.
STATIC mp_obj_t pin_value(size_t n_args, const mp_obj_t *args) {
   1c1e0:	b580      	push	{r7, lr}
   1c1e2:	b082      	sub	sp, #8
   1c1e4:	af00      	add	r7, sp, #0
   1c1e6:	6078      	str	r0, [r7, #4]
   1c1e8:	6039      	str	r1, [r7, #0]
    return pin_call(args[0], n_args - 1, 0, args + 1);
   1c1ea:	683b      	ldr	r3, [r7, #0]
   1c1ec:	6818      	ldr	r0, [r3, #0]
   1c1ee:	687b      	ldr	r3, [r7, #4]
   1c1f0:	1e59      	subs	r1, r3, #1
   1c1f2:	683b      	ldr	r3, [r7, #0]
   1c1f4:	3304      	adds	r3, #4
   1c1f6:	2200      	movs	r2, #0
   1c1f8:	f7ff fe50 	bl	1be9c <pin_call>
   1c1fc:	4603      	mov	r3, r0
}
   1c1fe:	4618      	mov	r0, r3
   1c200:	3708      	adds	r7, #8
   1c202:	46bd      	mov	sp, r7
   1c204:	bd80      	pop	{r7, pc}
   1c206:	bf00      	nop

0001c208 <pin_off>:
STATIC MP_DEFINE_CONST_FUN_OBJ_VAR_BETWEEN(pin_value_obj, 1, 2, pin_value);

STATIC mp_obj_t pin_off(mp_obj_t self_in) {
   1c208:	b580      	push	{r7, lr}
   1c20a:	b084      	sub	sp, #16
   1c20c:	af00      	add	r7, sp, #0
   1c20e:	6078      	str	r0, [r7, #4]
    pin_obj_t *self = MP_OBJ_TO_PTR(self_in);
   1c210:	687b      	ldr	r3, [r7, #4]
   1c212:	60fb      	str	r3, [r7, #12]
    mp_hal_pin_low(self);
   1c214:	68fb      	ldr	r3, [r7, #12]
   1c216:	6898      	ldr	r0, [r3, #8]
   1c218:	68fb      	ldr	r3, [r7, #12]
   1c21a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
   1c21e:	2200      	movs	r2, #0
   1c220:	4619      	mov	r1, r3
   1c222:	f001 fcdb 	bl	1dbdc <GPIOPinWrite>
    return mp_const_none;
   1c226:	4b02      	ldr	r3, [pc, #8]	; (1c230 <pin_off+0x28>)
}
   1c228:	4618      	mov	r0, r3
   1c22a:	3710      	adds	r7, #16
   1c22c:	46bd      	mov	sp, r7
   1c22e:	bd80      	pop	{r7, pc}
   1c230:	0002345c 	.word	0x0002345c

0001c234 <pin_on>:
STATIC MP_DEFINE_CONST_FUN_OBJ_1(pin_off_obj, pin_off);

STATIC mp_obj_t pin_on(mp_obj_t self_in) {
   1c234:	b580      	push	{r7, lr}
   1c236:	b084      	sub	sp, #16
   1c238:	af00      	add	r7, sp, #0
   1c23a:	6078      	str	r0, [r7, #4]
    pin_obj_t *self = MP_OBJ_TO_PTR(self_in);
   1c23c:	687b      	ldr	r3, [r7, #4]
   1c23e:	60fb      	str	r3, [r7, #12]
    mp_hal_pin_high(self);
   1c240:	68fb      	ldr	r3, [r7, #12]
   1c242:	6898      	ldr	r0, [r3, #8]
   1c244:	68fb      	ldr	r3, [r7, #12]
   1c246:	f893 1024 	ldrb.w	r1, [r3, #36]	; 0x24
   1c24a:	68fb      	ldr	r3, [r7, #12]
   1c24c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
   1c250:	461a      	mov	r2, r3
   1c252:	f001 fcc3 	bl	1dbdc <GPIOPinWrite>
    return mp_const_none;
   1c256:	4b02      	ldr	r3, [pc, #8]	; (1c260 <pin_on+0x2c>)
}
   1c258:	4618      	mov	r0, r3
   1c25a:	3710      	adds	r7, #16
   1c25c:	46bd      	mov	sp, r7
   1c25e:	bd80      	pop	{r7, pc}
   1c260:	0002345c 	.word	0x0002345c

0001c264 <pin_irq>:
STATIC MP_DEFINE_CONST_FUN_OBJ_1(pin_on_obj, pin_on);

// pin.irq(handler=None, trigger=IRQ_RISING, hard=False)
STATIC mp_obj_t pin_irq(size_t n_args, const mp_obj_t *pos_args, mp_map_t *kw_args) {
   1c264:	b480      	push	{r7}
   1c266:	b085      	sub	sp, #20
   1c268:	af00      	add	r7, sp, #0
   1c26a:	60f8      	str	r0, [r7, #12]
   1c26c:	60b9      	str	r1, [r7, #8]
   1c26e:	607a      	str	r2, [r7, #4]
//        extint_register_pin(self, args[ARG_trigger].u_int,
//            args[ARG_hard].u_bool, args[ARG_handler].u_obj);
//    }
//
//    // TODO should return an IRQ object
    return mp_const_none;
   1c270:	4b03      	ldr	r3, [pc, #12]	; (1c280 <pin_irq+0x1c>)
}
   1c272:	4618      	mov	r0, r3
   1c274:	3714      	adds	r7, #20
   1c276:	46bd      	mov	sp, r7
   1c278:	f85d 7b04 	ldr.w	r7, [sp], #4
   1c27c:	4770      	bx	lr
   1c27e:	bf00      	nop
   1c280:	0002345c 	.word	0x0002345c

0001c284 <pin_name>:
STATIC MP_DEFINE_CONST_FUN_OBJ_KW(pin_irq_obj, 1, pin_irq);

/// \method name()
/// Get the pin name.
STATIC mp_obj_t pin_name(mp_obj_t self_in) {
   1c284:	b480      	push	{r7}
   1c286:	b085      	sub	sp, #20
   1c288:	af00      	add	r7, sp, #0
   1c28a:	6078      	str	r0, [r7, #4]
    pin_obj_t *self = MP_OBJ_TO_PTR(self_in);
   1c28c:	687b      	ldr	r3, [r7, #4]
   1c28e:	60fb      	str	r3, [r7, #12]
    return MP_OBJ_NEW_QSTR(self->name);
   1c290:	68fb      	ldr	r3, [r7, #12]
   1c292:	685b      	ldr	r3, [r3, #4]
   1c294:	009b      	lsls	r3, r3, #2
   1c296:	f043 0302 	orr.w	r3, r3, #2
}
   1c29a:	4618      	mov	r0, r3
   1c29c:	3714      	adds	r7, #20
   1c29e:	46bd      	mov	sp, r7
   1c2a0:	f85d 7b04 	ldr.w	r7, [sp], #4
   1c2a4:	4770      	bx	lr
   1c2a6:	bf00      	nop

0001c2a8 <pin_names>:
STATIC MP_DEFINE_CONST_FUN_OBJ_1(pin_name_obj, pin_name);

/// \method names()
/// Returns the cpu and board names for this pin.
STATIC mp_obj_t pin_names(mp_obj_t self_in) {
   1c2a8:	b580      	push	{r7, lr}
   1c2aa:	b088      	sub	sp, #32
   1c2ac:	af00      	add	r7, sp, #0
   1c2ae:	6078      	str	r0, [r7, #4]
    pin_obj_t *self = MP_OBJ_TO_PTR(self_in);
   1c2b0:	687b      	ldr	r3, [r7, #4]
   1c2b2:	617b      	str	r3, [r7, #20]
    mp_obj_t result = mp_obj_new_list(0, NULL);
   1c2b4:	2100      	movs	r1, #0
   1c2b6:	2000      	movs	r0, #0
   1c2b8:	f7f5 fc2a 	bl	11b10 <mp_obj_new_list>
   1c2bc:	6138      	str	r0, [r7, #16]
    mp_obj_list_append(result, MP_OBJ_NEW_QSTR(self->name));
   1c2be:	697b      	ldr	r3, [r7, #20]
   1c2c0:	685b      	ldr	r3, [r3, #4]
   1c2c2:	009b      	lsls	r3, r3, #2
   1c2c4:	f043 0302 	orr.w	r3, r3, #2
   1c2c8:	4619      	mov	r1, r3
   1c2ca:	6938      	ldr	r0, [r7, #16]
   1c2cc:	f7f4 ff8e 	bl	111ec <mp_obj_list_append>

    const mp_map_t *map = &pin_board_pins_locals_dict.map;
   1c2d0:	4b12      	ldr	r3, [pc, #72]	; (1c31c <pin_names+0x74>)
   1c2d2:	60fb      	str	r3, [r7, #12]
    mp_map_elem_t *elem = map->table;
   1c2d4:	68fb      	ldr	r3, [r7, #12]
   1c2d6:	689b      	ldr	r3, [r3, #8]
   1c2d8:	61fb      	str	r3, [r7, #28]

    for (mp_uint_t i = 0; i < map->used; i++, elem++) {
   1c2da:	2300      	movs	r3, #0
   1c2dc:	61bb      	str	r3, [r7, #24]
   1c2de:	e010      	b.n	1c302 <pin_names+0x5a>
        if (elem->value == self_in) {
   1c2e0:	69fb      	ldr	r3, [r7, #28]
   1c2e2:	685a      	ldr	r2, [r3, #4]
   1c2e4:	687b      	ldr	r3, [r7, #4]
   1c2e6:	429a      	cmp	r2, r3
   1c2e8:	d105      	bne.n	1c2f6 <pin_names+0x4e>
            mp_obj_list_append(result, elem->key);
   1c2ea:	69fb      	ldr	r3, [r7, #28]
   1c2ec:	681b      	ldr	r3, [r3, #0]
   1c2ee:	4619      	mov	r1, r3
   1c2f0:	6938      	ldr	r0, [r7, #16]
   1c2f2:	f7f4 ff7b 	bl	111ec <mp_obj_list_append>
    for (mp_uint_t i = 0; i < map->used; i++, elem++) {
   1c2f6:	69bb      	ldr	r3, [r7, #24]
   1c2f8:	3301      	adds	r3, #1
   1c2fa:	61bb      	str	r3, [r7, #24]
   1c2fc:	69fb      	ldr	r3, [r7, #28]
   1c2fe:	3308      	adds	r3, #8
   1c300:	61fb      	str	r3, [r7, #28]
   1c302:	68fb      	ldr	r3, [r7, #12]
   1c304:	681b      	ldr	r3, [r3, #0]
   1c306:	f3c3 03dc 	ubfx	r3, r3, #3, #29
   1c30a:	461a      	mov	r2, r3
   1c30c:	69bb      	ldr	r3, [r7, #24]
   1c30e:	429a      	cmp	r2, r3
   1c310:	d8e6      	bhi.n	1c2e0 <pin_names+0x38>
        }
    }
    return result;
   1c312:	693b      	ldr	r3, [r7, #16]
}
   1c314:	4618      	mov	r0, r3
   1c316:	3720      	adds	r7, #32
   1c318:	46bd      	mov	sp, r7
   1c31a:	bd80      	pop	{r7, pc}
   1c31c:	00025ac8 	.word	0x00025ac8

0001c320 <pin_port>:
STATIC MP_DEFINE_CONST_FUN_OBJ_1(pin_names_obj, pin_names);

/// \method port()
/// Get the pin port.
STATIC mp_obj_t pin_port(mp_obj_t self_in) {
   1c320:	b480      	push	{r7}
   1c322:	b085      	sub	sp, #20
   1c324:	af00      	add	r7, sp, #0
   1c326:	6078      	str	r0, [r7, #4]
    pin_obj_t *self = MP_OBJ_TO_PTR(self_in);
   1c328:	687b      	ldr	r3, [r7, #4]
   1c32a:	60fb      	str	r3, [r7, #12]
    return MP_OBJ_NEW_SMALL_INT(self->port);
   1c32c:	68fb      	ldr	r3, [r7, #12]
   1c32e:	689b      	ldr	r3, [r3, #8]
   1c330:	005b      	lsls	r3, r3, #1
   1c332:	f043 0301 	orr.w	r3, r3, #1
}
   1c336:	4618      	mov	r0, r3
   1c338:	3714      	adds	r7, #20
   1c33a:	46bd      	mov	sp, r7
   1c33c:	f85d 7b04 	ldr.w	r7, [sp], #4
   1c340:	4770      	bx	lr
   1c342:	bf00      	nop

0001c344 <pin_pin>:
STATIC MP_DEFINE_CONST_FUN_OBJ_1(pin_port_obj, pin_port);

/// \method pin()
/// Get the pin number.
STATIC mp_obj_t pin_pin(mp_obj_t self_in) {
   1c344:	b480      	push	{r7}
   1c346:	b085      	sub	sp, #20
   1c348:	af00      	add	r7, sp, #0
   1c34a:	6078      	str	r0, [r7, #4]
    pin_obj_t *self = MP_OBJ_TO_PTR(self_in);
   1c34c:	687b      	ldr	r3, [r7, #4]
   1c34e:	60fb      	str	r3, [r7, #12]
    return MP_OBJ_NEW_SMALL_INT(self->pin_num);
   1c350:	68fb      	ldr	r3, [r7, #12]
   1c352:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
   1c356:	005b      	lsls	r3, r3, #1
   1c358:	f043 0301 	orr.w	r3, r3, #1
}
   1c35c:	4618      	mov	r0, r3
   1c35e:	3714      	adds	r7, #20
   1c360:	46bd      	mov	sp, r7
   1c362:	f85d 7b04 	ldr.w	r7, [sp], #4
   1c366:	4770      	bx	lr

0001c368 <pin_gpio>:
STATIC MP_DEFINE_CONST_FUN_OBJ_1(pin_pin_obj, pin_pin);

/// \method gpio()
/// Returns the base address of the GPIO block associated with this pin.
STATIC mp_obj_t pin_gpio(mp_obj_t self_in) {
   1c368:	b480      	push	{r7}
   1c36a:	b085      	sub	sp, #20
   1c36c:	af00      	add	r7, sp, #0
   1c36e:	6078      	str	r0, [r7, #4]
    pin_obj_t *self = MP_OBJ_TO_PTR(self_in);
   1c370:	687b      	ldr	r3, [r7, #4]
   1c372:	60fb      	str	r3, [r7, #12]
    return MP_OBJ_NEW_SMALL_INT((intptr_t)self->port);
   1c374:	68fb      	ldr	r3, [r7, #12]
   1c376:	689b      	ldr	r3, [r3, #8]
   1c378:	005b      	lsls	r3, r3, #1
   1c37a:	f043 0301 	orr.w	r3, r3, #1
}
   1c37e:	4618      	mov	r0, r3
   1c380:	3714      	adds	r7, #20
   1c382:	46bd      	mov	sp, r7
   1c384:	f85d 7b04 	ldr.w	r7, [sp], #4
   1c388:	4770      	bx	lr
   1c38a:	bf00      	nop

0001c38c <pin_dir>:

/// \method dir()
/// Returns the currently configured mode of the pin. The integer returned
/// will match one of the allowed constants for the mode argument to the init
/// function.
STATIC mp_obj_t pin_dir(mp_obj_t self_in) {
   1c38c:	b580      	push	{r7, lr}
   1c38e:	b082      	sub	sp, #8
   1c390:	af00      	add	r7, sp, #0
   1c392:	6078      	str	r0, [r7, #4]
    return MP_OBJ_NEW_SMALL_INT(mp_hal_pin_get_dir((pin_obj_t*)MP_OBJ_TO_PTR(self_in)));
   1c394:	687b      	ldr	r3, [r7, #4]
   1c396:	689a      	ldr	r2, [r3, #8]
   1c398:	687b      	ldr	r3, [r7, #4]
   1c39a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
   1c39e:	4619      	mov	r1, r3
   1c3a0:	4610      	mov	r0, r2
   1c3a2:	f001 fb0e 	bl	1d9c2 <GPIODirModeGet>
   1c3a6:	4603      	mov	r3, r0
   1c3a8:	005b      	lsls	r3, r3, #1
   1c3aa:	f043 0301 	orr.w	r3, r3, #1
}
   1c3ae:	4618      	mov	r0, r3
   1c3b0:	3708      	adds	r7, #8
   1c3b2:	46bd      	mov	sp, r7
   1c3b4:	bd80      	pop	{r7, pc}
   1c3b6:	bf00      	nop

0001c3b8 <pin_type>:

/// \method pull()
/// Returns the currently configured pull of the pin. The integer returned
/// will match one of the allowed constants for the pull argument to the init
/// function.
STATIC mp_obj_t pin_type(mp_obj_t self_in) {
   1c3b8:	b580      	push	{r7, lr}
   1c3ba:	b084      	sub	sp, #16
   1c3bc:	af00      	add	r7, sp, #0
   1c3be:	6078      	str	r0, [r7, #4]
    uint32_t type;
    pin_obj_t* self = MP_OBJ_TO_PTR(self_in);
   1c3c0:	687b      	ldr	r3, [r7, #4]
   1c3c2:	60fb      	str	r3, [r7, #12]
    MAP_GPIOPadConfigGet(self->port, self->pin_mask, NULL, &type);
   1c3c4:	68fb      	ldr	r3, [r7, #12]
   1c3c6:	6898      	ldr	r0, [r3, #8]
   1c3c8:	68fb      	ldr	r3, [r7, #12]
   1c3ca:	f893 1024 	ldrb.w	r1, [r3, #36]	; 0x24
   1c3ce:	f107 0308 	add.w	r3, r7, #8
   1c3d2:	2200      	movs	r2, #0
   1c3d4:	f001 fb96 	bl	1db04 <GPIOPadConfigGet>

    return MP_OBJ_NEW_SMALL_INT(type);
   1c3d8:	68bb      	ldr	r3, [r7, #8]
   1c3da:	005b      	lsls	r3, r3, #1
   1c3dc:	f043 0301 	orr.w	r3, r3, #1
}
   1c3e0:	4618      	mov	r0, r3
   1c3e2:	3710      	adds	r7, #16
   1c3e4:	46bd      	mov	sp, r7
   1c3e6:	bd80      	pop	{r7, pc}

0001c3e8 <pin_af>:

/// \method af()
/// Returns the currently configured alternate-function of the pin. The
/// integer returned will match one of the allowed constants for the af
/// argument to the init function.
STATIC mp_obj_t pin_af(mp_obj_t self_in) {
   1c3e8:	b480      	push	{r7}
   1c3ea:	b083      	sub	sp, #12
   1c3ec:	af00      	add	r7, sp, #0
   1c3ee:	6078      	str	r0, [r7, #4]
    return MP_OBJ_NEW_SMALL_INT(mp_hal_pin_get_af((pin_obj_t*)MP_OBJ_TO_PTR(self_in)));
   1c3f0:	687b      	ldr	r3, [r7, #4]
   1c3f2:	691b      	ldr	r3, [r3, #16]
   1c3f4:	f8d3 252c 	ldr.w	r2, [r3, #1324]	; 0x52c
   1c3f8:	687b      	ldr	r3, [r7, #4]
   1c3fa:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
   1c3fe:	009b      	lsls	r3, r3, #2
   1c400:	fa22 f303 	lsr.w	r3, r2, r3
   1c404:	f003 030f 	and.w	r3, r3, #15
   1c408:	005b      	lsls	r3, r3, #1
   1c40a:	f043 0301 	orr.w	r3, r3, #1
}
   1c40e:	4618      	mov	r0, r3
   1c410:	370c      	adds	r7, #12
   1c412:	46bd      	mov	sp, r7
   1c414:	f85d 7b04 	ldr.w	r7, [sp], #4
   1c418:	4770      	bx	lr
   1c41a:	bf00      	nop

0001c41c <pin_named_pins_obj_print>:
#include "py/mphal.h"
#include "pin.h"



STATIC void pin_named_pins_obj_print(const mp_print_t *print, mp_obj_t self_in, mp_print_kind_t kind) {
   1c41c:	b580      	push	{r7, lr}
   1c41e:	b086      	sub	sp, #24
   1c420:	af00      	add	r7, sp, #0
   1c422:	60f8      	str	r0, [r7, #12]
   1c424:	60b9      	str	r1, [r7, #8]
   1c426:	607a      	str	r2, [r7, #4]
    pin_named_pins_obj_t *self = self_in;
   1c428:	68bb      	ldr	r3, [r7, #8]
   1c42a:	617b      	str	r3, [r7, #20]
    mp_printf(print, "<Pin.%q>", self->name);
   1c42c:	697b      	ldr	r3, [r7, #20]
   1c42e:	685b      	ldr	r3, [r3, #4]
   1c430:	461a      	mov	r2, r3
   1c432:	4904      	ldr	r1, [pc, #16]	; (1c444 <pin_named_pins_obj_print+0x28>)
   1c434:	68f8      	ldr	r0, [r7, #12]
   1c436:	f7e5 fdf1 	bl	201c <mp_printf>
}
   1c43a:	bf00      	nop
   1c43c:	3718      	adds	r7, #24
   1c43e:	46bd      	mov	sp, r7
   1c440:	bd80      	pop	{r7, pc}
   1c442:	bf00      	nop
   1c444:	00025168 	.word	0x00025168

0001c448 <pin_find_named_pin>:
    .name = MP_QSTR_board,
    .print = pin_named_pins_obj_print,
    .locals_dict = (mp_obj_t)&pin_board_pins_locals_dict,
};

const pin_obj_t *pin_find_named_pin(const mp_obj_dict_t *named_pins, mp_obj_t name) {
   1c448:	b580      	push	{r7, lr}
   1c44a:	b084      	sub	sp, #16
   1c44c:	af00      	add	r7, sp, #0
   1c44e:	6078      	str	r0, [r7, #4]
   1c450:	6039      	str	r1, [r7, #0]
    const mp_map_t *named_map = &named_pins->map;
   1c452:	687b      	ldr	r3, [r7, #4]
   1c454:	3304      	adds	r3, #4
   1c456:	60fb      	str	r3, [r7, #12]
    mp_map_elem_t *named_elem = mp_map_lookup((mp_map_t*)named_map, name, MP_MAP_LOOKUP);
   1c458:	2200      	movs	r2, #0
   1c45a:	6839      	ldr	r1, [r7, #0]
   1c45c:	68f8      	ldr	r0, [r7, #12]
   1c45e:	f7f1 f97f 	bl	d760 <mp_map_lookup>
   1c462:	60b8      	str	r0, [r7, #8]
    if (named_elem != NULL && named_elem->value != MP_OBJ_NULL) {
   1c464:	68bb      	ldr	r3, [r7, #8]
   1c466:	2b00      	cmp	r3, #0
   1c468:	d006      	beq.n	1c478 <pin_find_named_pin+0x30>
   1c46a:	68bb      	ldr	r3, [r7, #8]
   1c46c:	685b      	ldr	r3, [r3, #4]
   1c46e:	2b00      	cmp	r3, #0
   1c470:	d002      	beq.n	1c478 <pin_find_named_pin+0x30>
        return MP_OBJ_TO_PTR(named_elem->value);
   1c472:	68bb      	ldr	r3, [r7, #8]
   1c474:	685b      	ldr	r3, [r3, #4]
   1c476:	e000      	b.n	1c47a <pin_find_named_pin+0x32>
    }
    return NULL;
   1c478:	2300      	movs	r3, #0
}
   1c47a:	4618      	mov	r0, r3
   1c47c:	3710      	adds	r7, #16
   1c47e:	46bd      	mov	sp, r7
   1c480:	bd80      	pop	{r7, pc}
   1c482:	bf00      	nop

0001c484 <pin_find_af>:

const pin_af_obj_t *pin_find_af(const pin_obj_t *pin, uint8_t fn, uint8_t unit) {
   1c484:	b480      	push	{r7}
   1c486:	b085      	sub	sp, #20
   1c488:	af00      	add	r7, sp, #0
   1c48a:	6078      	str	r0, [r7, #4]
   1c48c:	460b      	mov	r3, r1
   1c48e:	70fb      	strb	r3, [r7, #3]
   1c490:	4613      	mov	r3, r2
   1c492:	70bb      	strb	r3, [r7, #2]
    const pin_af_obj_t *af = pin->af_list;
   1c494:	687b      	ldr	r3, [r7, #4]
   1c496:	695b      	ldr	r3, [r3, #20]
   1c498:	60fb      	str	r3, [r7, #12]
    for (mp_uint_t i = 0; i < pin->num_afs; i++, af++) {
   1c49a:	2300      	movs	r3, #0
   1c49c:	60bb      	str	r3, [r7, #8]
   1c49e:	e011      	b.n	1c4c4 <pin_find_af+0x40>
        if (af->fn == fn && af->unit == unit) {
   1c4a0:	68fb      	ldr	r3, [r7, #12]
   1c4a2:	795b      	ldrb	r3, [r3, #5]
   1c4a4:	78fa      	ldrb	r2, [r7, #3]
   1c4a6:	429a      	cmp	r2, r3
   1c4a8:	d106      	bne.n	1c4b8 <pin_find_af+0x34>
   1c4aa:	68fb      	ldr	r3, [r7, #12]
   1c4ac:	799b      	ldrb	r3, [r3, #6]
   1c4ae:	78ba      	ldrb	r2, [r7, #2]
   1c4b0:	429a      	cmp	r2, r3
   1c4b2:	d101      	bne.n	1c4b8 <pin_find_af+0x34>
            return af;
   1c4b4:	68fb      	ldr	r3, [r7, #12]
   1c4b6:	e00d      	b.n	1c4d4 <pin_find_af+0x50>
    for (mp_uint_t i = 0; i < pin->num_afs; i++, af++) {
   1c4b8:	68bb      	ldr	r3, [r7, #8]
   1c4ba:	3301      	adds	r3, #1
   1c4bc:	60bb      	str	r3, [r7, #8]
   1c4be:	68fb      	ldr	r3, [r7, #12]
   1c4c0:	3310      	adds	r3, #16
   1c4c2:	60fb      	str	r3, [r7, #12]
   1c4c4:	687b      	ldr	r3, [r7, #4]
   1c4c6:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
   1c4ca:	461a      	mov	r2, r3
   1c4cc:	68bb      	ldr	r3, [r7, #8]
   1c4ce:	429a      	cmp	r2, r3
   1c4d0:	d8e6      	bhi.n	1c4a0 <pin_find_af+0x1c>
        }
    }
    return NULL;
   1c4d2:	2300      	movs	r3, #0
}
   1c4d4:	4618      	mov	r0, r3
   1c4d6:	3714      	adds	r7, #20
   1c4d8:	46bd      	mov	sp, r7
   1c4da:	f85d 7b04 	ldr.w	r7, [sp], #4
   1c4de:	4770      	bx	lr

0001c4e0 <pin_find_af_by_index>:

const pin_af_obj_t *pin_find_af_by_index(const pin_obj_t *pin, mp_uint_t af_idx) {
   1c4e0:	b480      	push	{r7}
   1c4e2:	b085      	sub	sp, #20
   1c4e4:	af00      	add	r7, sp, #0
   1c4e6:	6078      	str	r0, [r7, #4]
   1c4e8:	6039      	str	r1, [r7, #0]
    const pin_af_obj_t *af = pin->af_list;
   1c4ea:	687b      	ldr	r3, [r7, #4]
   1c4ec:	695b      	ldr	r3, [r3, #20]
   1c4ee:	60fb      	str	r3, [r7, #12]
    for (mp_uint_t i = 0; i < pin->num_afs; i++, af++) {
   1c4f0:	2300      	movs	r3, #0
   1c4f2:	60bb      	str	r3, [r7, #8]
   1c4f4:	e00e      	b.n	1c514 <pin_find_af_by_index+0x34>
        if (af->idx == af_idx) {
   1c4f6:	68fb      	ldr	r3, [r7, #12]
   1c4f8:	f993 3004 	ldrsb.w	r3, [r3, #4]
   1c4fc:	461a      	mov	r2, r3
   1c4fe:	683b      	ldr	r3, [r7, #0]
   1c500:	429a      	cmp	r2, r3
   1c502:	d101      	bne.n	1c508 <pin_find_af_by_index+0x28>
            return af;
   1c504:	68fb      	ldr	r3, [r7, #12]
   1c506:	e00d      	b.n	1c524 <pin_find_af_by_index+0x44>
    for (mp_uint_t i = 0; i < pin->num_afs; i++, af++) {
   1c508:	68bb      	ldr	r3, [r7, #8]
   1c50a:	3301      	adds	r3, #1
   1c50c:	60bb      	str	r3, [r7, #8]
   1c50e:	68fb      	ldr	r3, [r7, #12]
   1c510:	3310      	adds	r3, #16
   1c512:	60fb      	str	r3, [r7, #12]
   1c514:	687b      	ldr	r3, [r7, #4]
   1c516:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
   1c51a:	461a      	mov	r2, r3
   1c51c:	68bb      	ldr	r3, [r7, #8]
   1c51e:	429a      	cmp	r2, r3
   1c520:	d8e9      	bhi.n	1c4f6 <pin_find_af_by_index+0x16>
        }
    }
    return NULL;
   1c522:	2300      	movs	r3, #0
}
   1c524:	4618      	mov	r0, r3
   1c526:	3714      	adds	r7, #20
   1c528:	46bd      	mov	sp, r7
   1c52a:	f85d 7b04 	ldr.w	r7, [sp], #4
   1c52e:	4770      	bx	lr

0001c530 <machine_init>:
#define PYB_RESET_BROWNOUT  (5)
#define PYB_RESET_OTHER     (6)

STATIC uint32_t reset_cause;

void machine_init(void) {
   1c530:	b580      	push	{r7, lr}
   1c532:	b082      	sub	sp, #8
   1c534:	af00      	add	r7, sp, #0

    // get reset cause from RCC flags
    uint32_t state = MAP_SysCtlResetCauseGet();
   1c536:	f001 fbc9 	bl	1dccc <SysCtlResetCauseGet>
   1c53a:	6078      	str	r0, [r7, #4]
    if ((state & SYSCTL_CAUSE_WDOG0) || (state & SYSCTL_CAUSE_WDOG1)) {
   1c53c:	687b      	ldr	r3, [r7, #4]
   1c53e:	f003 0308 	and.w	r3, r3, #8
   1c542:	2b00      	cmp	r3, #0
   1c544:	d104      	bne.n	1c550 <machine_init+0x20>
   1c546:	687b      	ldr	r3, [r7, #4]
   1c548:	f003 0320 	and.w	r3, r3, #32
   1c54c:	2b00      	cmp	r3, #0
   1c54e:	d003      	beq.n	1c558 <machine_init+0x28>
        reset_cause = PYB_RESET_WDT;
   1c550:	4b1b      	ldr	r3, [pc, #108]	; (1c5c0 <machine_init+0x90>)
   1c552:	2203      	movs	r2, #3
   1c554:	601a      	str	r2, [r3, #0]
   1c556:	e02b      	b.n	1c5b0 <machine_init+0x80>
    } else if (state & SYSCTL_CAUSE_POR)  {
   1c558:	687b      	ldr	r3, [r7, #4]
   1c55a:	f003 0302 	and.w	r3, r3, #2
   1c55e:	2b00      	cmp	r3, #0
   1c560:	d003      	beq.n	1c56a <machine_init+0x3a>
        reset_cause = PYB_RESET_POWER_ON;
   1c562:	4b17      	ldr	r3, [pc, #92]	; (1c5c0 <machine_init+0x90>)
   1c564:	2201      	movs	r2, #1
   1c566:	601a      	str	r2, [r3, #0]
   1c568:	e022      	b.n	1c5b0 <machine_init+0x80>
    } else if (state & SYSCTL_CAUSE_BOR) {
   1c56a:	687b      	ldr	r3, [r7, #4]
   1c56c:	f003 0304 	and.w	r3, r3, #4
   1c570:	2b00      	cmp	r3, #0
   1c572:	d003      	beq.n	1c57c <machine_init+0x4c>
        reset_cause = PYB_RESET_BROWNOUT;
   1c574:	4b12      	ldr	r3, [pc, #72]	; (1c5c0 <machine_init+0x90>)
   1c576:	2205      	movs	r2, #5
   1c578:	601a      	str	r2, [r3, #0]
   1c57a:	e019      	b.n	1c5b0 <machine_init+0x80>
    } else if (state & SYSCTL_CAUSE_EXT) {
   1c57c:	687b      	ldr	r3, [r7, #4]
   1c57e:	f003 0301 	and.w	r3, r3, #1
   1c582:	2b00      	cmp	r3, #0
   1c584:	d003      	beq.n	1c58e <machine_init+0x5e>
        reset_cause = PYB_RESET_HARD;
   1c586:	4b0e      	ldr	r3, [pc, #56]	; (1c5c0 <machine_init+0x90>)
   1c588:	2202      	movs	r2, #2
   1c58a:	601a      	str	r2, [r3, #0]
   1c58c:	e010      	b.n	1c5b0 <machine_init+0x80>
    } else if ((state & SYSCTL_CAUSE_HSRVREQ) || (state & SYSCTL_CAUSE_HIB)){
   1c58e:	687b      	ldr	r3, [r7, #4]
   1c590:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
   1c594:	2b00      	cmp	r3, #0
   1c596:	d104      	bne.n	1c5a2 <machine_init+0x72>
   1c598:	687b      	ldr	r3, [r7, #4]
   1c59a:	f003 0340 	and.w	r3, r3, #64	; 0x40
   1c59e:	2b00      	cmp	r3, #0
   1c5a0:	d003      	beq.n	1c5aa <machine_init+0x7a>
        reset_cause = PYB_RESET_OTHER;
   1c5a2:	4b07      	ldr	r3, [pc, #28]	; (1c5c0 <machine_init+0x90>)
   1c5a4:	2206      	movs	r2, #6
   1c5a6:	601a      	str	r2, [r3, #0]
   1c5a8:	e002      	b.n	1c5b0 <machine_init+0x80>
    } else {
        // default is soft reset
        reset_cause = PYB_RESET_SOFT;
   1c5aa:	4b05      	ldr	r3, [pc, #20]	; (1c5c0 <machine_init+0x90>)
   1c5ac:	2200      	movs	r2, #0
   1c5ae:	601a      	str	r2, [r3, #0]
    }
    // clear RCC reset flags
    MAP_SysCtlResetCauseClear(state);
   1c5b0:	6878      	ldr	r0, [r7, #4]
   1c5b2:	f001 fb91 	bl	1dcd8 <SysCtlResetCauseClear>
}
   1c5b6:	bf00      	nop
   1c5b8:	3708      	adds	r7, #8
   1c5ba:	46bd      	mov	sp, r7
   1c5bc:	bd80      	pop	{r7, pc}
   1c5be:	bf00      	nop
   1c5c0:	200012c8 	.word	0x200012c8

0001c5c4 <machine_deinit>:

void machine_deinit(void) {
   1c5c4:	b480      	push	{r7}
   1c5c6:	af00      	add	r7, sp, #0
    // we are doing a soft-reset so change the reset_cause
    reset_cause = PYB_RESET_SOFT;
   1c5c8:	4b03      	ldr	r3, [pc, #12]	; (1c5d8 <machine_deinit+0x14>)
   1c5ca:	2200      	movs	r2, #0
   1c5cc:	601a      	str	r2, [r3, #0]
}
   1c5ce:	bf00      	nop
   1c5d0:	46bd      	mov	sp, r7
   1c5d2:	f85d 7b04 	ldr.w	r7, [sp], #4
   1c5d6:	4770      	bx	lr
   1c5d8:	200012c8 	.word	0x200012c8

0001c5dc <machine_info>:

// machine.info([dump_alloc_table])
// Print out lots of information about the board.
STATIC mp_obj_t machine_info(size_t n_args, const mp_obj_t *args) {
   1c5dc:	b580      	push	{r7, lr}
   1c5de:	b090      	sub	sp, #64	; 0x40
   1c5e0:	af02      	add	r7, sp, #8
   1c5e2:	6078      	str	r0, [r7, #4]
   1c5e4:	6039      	str	r1, [r7, #0]
    // get and print unique id; 96 bits
    {
        uint32_t id = SYSCTL->DID0;
   1c5e6:	4b26      	ldr	r3, [pc, #152]	; (1c680 <machine_info+0xa4>)
   1c5e8:	681b      	ldr	r3, [r3, #0]
   1c5ea:	637b      	str	r3, [r7, #52]	; 0x34

        printf("ID: CLASS=%02x, v%02u.%02u", (uint8_t)((id >> 16) & 0xff), (uint8_t)((id >> 8) & 0xff), (uint8_t)(id & 0xff));
   1c5ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1c5ee:	0c1b      	lsrs	r3, r3, #16
   1c5f0:	b2db      	uxtb	r3, r3
   1c5f2:	4619      	mov	r1, r3
   1c5f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1c5f6:	0a1b      	lsrs	r3, r3, #8
   1c5f8:	b2db      	uxtb	r3, r3
   1c5fa:	461a      	mov	r2, r3
   1c5fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1c5fe:	b2db      	uxtb	r3, r3
   1c600:	4820      	ldr	r0, [pc, #128]	; (1c684 <machine_info+0xa8>)
   1c602:	f7fe fef9 	bl	1b3f8 <printf>
    }

    // get and print clock speeds
    // SYSCLK=168MHz, HCLK=168MHz, PCLK1=42MHz, PCLK2=84MHz
    {
        printf("%u Hz", (unsigned int)SysCtlClockGet());
   1c606:	f001 fb6f 	bl	1dce8 <SysCtlClockGet>
   1c60a:	4603      	mov	r3, r0
   1c60c:	4619      	mov	r1, r3
   1c60e:	481e      	ldr	r0, [pc, #120]	; (1c688 <machine_info+0xac>)
   1c610:	f7fe fef2 	bl	1b3f8 <printf>
//    }

    // qstr info
    {
        size_t n_pool, n_qstr, n_str_data_bytes, n_total_bytes;
        qstr_pool_info(&n_pool, &n_qstr, &n_str_data_bytes, &n_total_bytes);
   1c614:	f107 0324 	add.w	r3, r7, #36	; 0x24
   1c618:	f107 0228 	add.w	r2, r7, #40	; 0x28
   1c61c:	f107 012c 	add.w	r1, r7, #44	; 0x2c
   1c620:	f107 0030 	add.w	r0, r7, #48	; 0x30
   1c624:	f7e4 fec6 	bl	13b4 <qstr_pool_info>
        printf("qstr:\n  n_pool=%u\n  n_qstr=%u\n  n_str_data_bytes=%u\n  n_total_bytes=%u\n", n_pool, n_qstr, n_str_data_bytes, n_total_bytes);
   1c628:	6b39      	ldr	r1, [r7, #48]	; 0x30
   1c62a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   1c62c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   1c62e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1c630:	9300      	str	r3, [sp, #0]
   1c632:	4603      	mov	r3, r0
   1c634:	4815      	ldr	r0, [pc, #84]	; (1c68c <machine_info+0xb0>)
   1c636:	f7fe fedf 	bl	1b3f8 <printf>
    }

    // GC info
    {
        gc_info_t info;
        gc_info(&info);
   1c63a:	f107 0308 	add.w	r3, r7, #8
   1c63e:	4618      	mov	r0, r3
   1c640:	f7e4 f92e 	bl	8a0 <gc_info>
        printf("GC:\n");
   1c644:	4812      	ldr	r0, [pc, #72]	; (1c690 <machine_info+0xb4>)
   1c646:	f7fe ff13 	bl	1b470 <puts>
        printf("  %u total\n", info.total);
   1c64a:	68bb      	ldr	r3, [r7, #8]
   1c64c:	4619      	mov	r1, r3
   1c64e:	4811      	ldr	r0, [pc, #68]	; (1c694 <machine_info+0xb8>)
   1c650:	f7fe fed2 	bl	1b3f8 <printf>
        printf("  %u : %u\n", info.used, info.free);
   1c654:	68fb      	ldr	r3, [r7, #12]
   1c656:	693a      	ldr	r2, [r7, #16]
   1c658:	4619      	mov	r1, r3
   1c65a:	480f      	ldr	r0, [pc, #60]	; (1c698 <machine_info+0xbc>)
   1c65c:	f7fe fecc 	bl	1b3f8 <printf>
        printf("  1=%u 2=%u m=%u\n", info.num_1block, info.num_2block, info.max_block);
   1c660:	69b9      	ldr	r1, [r7, #24]
   1c662:	69fa      	ldr	r2, [r7, #28]
   1c664:	6a3b      	ldr	r3, [r7, #32]
   1c666:	480d      	ldr	r0, [pc, #52]	; (1c69c <machine_info+0xc0>)
   1c668:	f7fe fec6 	bl	1b3f8 <printf>

    #if MICROPY_PY_THREAD
    pyb_thread_dump();
    #endif

    if (n_args == 1) {
   1c66c:	687b      	ldr	r3, [r7, #4]
   1c66e:	2b01      	cmp	r3, #1
   1c670:	d101      	bne.n	1c676 <machine_info+0x9a>
        // arg given means dump gc allocation table
        gc_dump_alloc_table();
   1c672:	f7e4 fbcd 	bl	e10 <gc_dump_alloc_table>
    }

    return mp_const_none;
   1c676:	4b0a      	ldr	r3, [pc, #40]	; (1c6a0 <machine_info+0xc4>)
}
   1c678:	4618      	mov	r0, r3
   1c67a:	3738      	adds	r7, #56	; 0x38
   1c67c:	46bd      	mov	sp, r7
   1c67e:	bd80      	pop	{r7, pc}
   1c680:	400fe000 	.word	0x400fe000
   1c684:	000251ec 	.word	0x000251ec
   1c688:	00025208 	.word	0x00025208
   1c68c:	00025210 	.word	0x00025210
   1c690:	00025258 	.word	0x00025258
   1c694:	0002525c 	.word	0x0002525c
   1c698:	00025268 	.word	0x00025268
   1c69c:	00025274 	.word	0x00025274
   1c6a0:	0002345c 	.word	0x0002345c

0001c6a4 <machine_unique_id>:
MP_DEFINE_CONST_FUN_OBJ_VAR_BETWEEN(machine_info_obj, 0, 1, machine_info);

// Returns a string of 12 bytes (96 bits), which is the unique ID for the MCU.
STATIC mp_obj_t machine_unique_id(void) {
   1c6a4:	b580      	push	{r7, lr}
   1c6a6:	b082      	sub	sp, #8
   1c6a8:	af00      	add	r7, sp, #0
    byte *id = (byte*)(SYSCTL->DID1 + 2);
   1c6aa:	4b06      	ldr	r3, [pc, #24]	; (1c6c4 <machine_unique_id+0x20>)
   1c6ac:	685b      	ldr	r3, [r3, #4]
   1c6ae:	3302      	adds	r3, #2
   1c6b0:	607b      	str	r3, [r7, #4]
    return mp_obj_new_bytes(id, 12);
   1c6b2:	210c      	movs	r1, #12
   1c6b4:	6878      	ldr	r0, [r7, #4]
   1c6b6:	f7f9 f82b 	bl	15710 <mp_obj_new_bytes>
   1c6ba:	4603      	mov	r3, r0
}
   1c6bc:	4618      	mov	r0, r3
   1c6be:	3708      	adds	r7, #8
   1c6c0:	46bd      	mov	sp, r7
   1c6c2:	bd80      	pop	{r7, pc}
   1c6c4:	400fe000 	.word	0x400fe000

0001c6c8 <machine_reset>:
MP_DEFINE_CONST_FUN_OBJ_0(machine_unique_id_obj, machine_unique_id);

// Resets the pyboard in a manner similar to pushing the external RESET button.
STATIC mp_obj_t machine_reset(void) {
   1c6c8:	b580      	push	{r7, lr}
   1c6ca:	af00      	add	r7, sp, #0
    MAP_SysCtlReset();
   1c6cc:	f001 fae4 	bl	1dc98 <SysCtlReset>
    return mp_const_none;
   1c6d0:	4b01      	ldr	r3, [pc, #4]	; (1c6d8 <machine_reset+0x10>)
}
   1c6d2:	4618      	mov	r0, r3
   1c6d4:	bd80      	pop	{r7, pc}
   1c6d6:	bf00      	nop
   1c6d8:	0002345c 	.word	0x0002345c

0001c6dc <machine_soft_reset>:
MP_DEFINE_CONST_FUN_OBJ_0(machine_reset_obj, machine_reset);

STATIC mp_obj_t machine_soft_reset(void) {
   1c6dc:	b580      	push	{r7, lr}
   1c6de:	af00      	add	r7, sp, #0
    pyexec_system_exit = PYEXEC_FORCED_EXIT;
   1c6e0:	4b05      	ldr	r3, [pc, #20]	; (1c6f8 <machine_soft_reset+0x1c>)
   1c6e2:	f44f 7280 	mov.w	r2, #256	; 0x100
   1c6e6:	601a      	str	r2, [r3, #0]
    nlr_raise(mp_obj_new_exception(&mp_type_SystemExit));
   1c6e8:	4804      	ldr	r0, [pc, #16]	; (1c6fc <machine_soft_reset+0x20>)
   1c6ea:	f7f3 f82b 	bl	f744 <mp_obj_new_exception>
   1c6ee:	4603      	mov	r3, r0
   1c6f0:	4618      	mov	r0, r3
   1c6f2:	f7e3 fdf5 	bl	2e0 <nlr_jump>
   1c6f6:	bf00      	nop
   1c6f8:	200012cc 	.word	0x200012cc
   1c6fc:	00022170 	.word	0x00022170

0001c700 <machine_bootloader>:
}
MP_DEFINE_CONST_FUN_OBJ_0(machine_soft_reset_obj, machine_soft_reset);

// Activate the bootloader without BOOT* pins.
STATIC NORETURN mp_obj_t machine_bootloader(void) {
   1c700:	b480      	push	{r7}
   1c702:	af00      	add	r7, sp, #0
//    //__set_MSP(*((uint32_t*) 0x00000000));
//    __ASM volatile ("movs r3, #0\nldr r3, [r3, #0]\nMSR msp, r3\n" : : : "r3", "sp");
//
//    ((void (*)(void)) *((uint32_t*) 0x00000004))();
//
    while (1);
   1c704:	e7fe      	b.n	1c704 <machine_bootloader+0x4>
   1c706:	bf00      	nop

0001c708 <machine_freq>:
}
MP_DEFINE_CONST_FUN_OBJ_0(machine_bootloader_obj, machine_bootloader);


STATIC mp_obj_t machine_freq(size_t n_args, const mp_obj_t *args) {
   1c708:	b580      	push	{r7, lr}
   1c70a:	b084      	sub	sp, #16
   1c70c:	af00      	add	r7, sp, #0
   1c70e:	6078      	str	r0, [r7, #4]
   1c710:	6039      	str	r1, [r7, #0]
    if (n_args == 0) {
   1c712:	687b      	ldr	r3, [r7, #4]
   1c714:	2b00      	cmp	r3, #0
   1c716:	d10f      	bne.n	1c738 <machine_freq+0x30>
        // get
        mp_obj_t tuple[] = {
           mp_obj_new_int(MAP_SysCtlClockGet()),
   1c718:	f001 fae6 	bl	1dce8 <SysCtlClockGet>
   1c71c:	4603      	mov	r3, r0
   1c71e:	4618      	mov	r0, r3
   1c720:	f7f4 fa4c 	bl	10bbc <mp_obj_new_int>
   1c724:	4603      	mov	r3, r0
        mp_obj_t tuple[] = {
   1c726:	60fb      	str	r3, [r7, #12]
        };
        return mp_obj_new_tuple(MP_ARRAY_SIZE(tuple), tuple);
   1c728:	f107 030c 	add.w	r3, r7, #12
   1c72c:	4619      	mov	r1, r3
   1c72e:	2001      	movs	r0, #1
   1c730:	f7f9 fc9c 	bl	1606c <mp_obj_new_tuple>
   1c734:	4603      	mov	r3, r0
   1c736:	e002      	b.n	1c73e <machine_freq+0x36>
        } else {
            mp_raise_ValueError("freq change not supported");
   1c738:	4803      	ldr	r0, [pc, #12]	; (1c748 <machine_freq+0x40>)
   1c73a:	f7f0 fd51 	bl	d1e0 <mp_raise_ValueError>
//        void NORETURN __fatal_error(const char *msg);
//        __fatal_error("can't change freq");
//
//        #endif
    }
}
   1c73e:	4618      	mov	r0, r3
   1c740:	3710      	adds	r7, #16
   1c742:	46bd      	mov	sp, r7
   1c744:	bd80      	pop	{r7, pc}
   1c746:	bf00      	nop
   1c748:	000252b4 	.word	0x000252b4

0001c74c <machine_sleep>:
MP_DEFINE_CONST_FUN_OBJ_VAR_BETWEEN(machine_freq_obj, 0, 4, machine_freq);

STATIC mp_obj_t machine_sleep(void) {
   1c74c:	b580      	push	{r7, lr}
   1c74e:	af00      	add	r7, sp, #0
    //send system to sleep
    MAP_SysCtlSleep();
   1c750:	f001 faaa 	bl	1dca8 <SysCtlSleep>
    return mp_const_none;
   1c754:	4b01      	ldr	r3, [pc, #4]	; (1c75c <machine_sleep+0x10>)
}
   1c756:	4618      	mov	r0, r3
   1c758:	bd80      	pop	{r7, pc}
   1c75a:	bf00      	nop
   1c75c:	0002345c 	.word	0x0002345c

0001c760 <machine_deepsleep>:
MP_DEFINE_CONST_FUN_OBJ_0(machine_sleep_obj, machine_sleep);

STATIC mp_obj_t machine_deepsleep(void) {
   1c760:	b580      	push	{r7, lr}
   1c762:	af00      	add	r7, sp, #0
    MAP_SysCtlDeepSleep();
   1c764:	f001 faa2 	bl	1dcac <SysCtlDeepSleep>
    return mp_const_none;
   1c768:	4b01      	ldr	r3, [pc, #4]	; (1c770 <machine_deepsleep+0x10>)
}
   1c76a:	4618      	mov	r0, r3
   1c76c:	bd80      	pop	{r7, pc}
   1c76e:	bf00      	nop
   1c770:	0002345c 	.word	0x0002345c

0001c774 <machine_reset_cause>:
MP_DEFINE_CONST_FUN_OBJ_0(machine_deepsleep_obj, machine_deepsleep);

STATIC mp_obj_t machine_reset_cause(void) {
   1c774:	b480      	push	{r7}
   1c776:	af00      	add	r7, sp, #0
    return MP_OBJ_NEW_SMALL_INT(reset_cause);
   1c778:	4b04      	ldr	r3, [pc, #16]	; (1c78c <machine_reset_cause+0x18>)
   1c77a:	681b      	ldr	r3, [r3, #0]
   1c77c:	005b      	lsls	r3, r3, #1
   1c77e:	f043 0301 	orr.w	r3, r3, #1
}
   1c782:	4618      	mov	r0, r3
   1c784:	46bd      	mov	sp, r7
   1c786:	f85d 7b04 	ldr.w	r7, [sp], #4
   1c78a:	4770      	bx	lr
   1c78c:	200012c8 	.word	0x200012c8

0001c790 <mp_hal_stdout_tx_strn_cooked>:
 * implementation below can be used.
 */

// Send "cooked" string of given length, where every occurrence of
// LF character is replaced with CR LF.
void mp_hal_stdout_tx_strn_cooked(const char *str, size_t len) {
   1c790:	b580      	push	{r7, lr}
   1c792:	b082      	sub	sp, #8
   1c794:	af00      	add	r7, sp, #0
   1c796:	6078      	str	r0, [r7, #4]
   1c798:	6039      	str	r1, [r7, #0]
    while (len--) {
   1c79a:	e00e      	b.n	1c7ba <mp_hal_stdout_tx_strn_cooked+0x2a>
        if (*str == '\n') {
   1c79c:	687b      	ldr	r3, [r7, #4]
   1c79e:	781b      	ldrb	r3, [r3, #0]
   1c7a0:	2b0a      	cmp	r3, #10
   1c7a2:	d103      	bne.n	1c7ac <mp_hal_stdout_tx_strn_cooked+0x1c>
            mp_hal_stdout_tx_strn("\r", 1);
   1c7a4:	2101      	movs	r1, #1
   1c7a6:	4809      	ldr	r0, [pc, #36]	; (1c7cc <mp_hal_stdout_tx_strn_cooked+0x3c>)
   1c7a8:	f7ff f8b8 	bl	1b91c <mp_hal_stdout_tx_strn>
        }
        mp_hal_stdout_tx_strn(str++, 1);
   1c7ac:	687b      	ldr	r3, [r7, #4]
   1c7ae:	1c5a      	adds	r2, r3, #1
   1c7b0:	607a      	str	r2, [r7, #4]
   1c7b2:	2101      	movs	r1, #1
   1c7b4:	4618      	mov	r0, r3
   1c7b6:	f7ff f8b1 	bl	1b91c <mp_hal_stdout_tx_strn>
    while (len--) {
   1c7ba:	683b      	ldr	r3, [r7, #0]
   1c7bc:	1e5a      	subs	r2, r3, #1
   1c7be:	603a      	str	r2, [r7, #0]
   1c7c0:	2b00      	cmp	r3, #0
   1c7c2:	d1eb      	bne.n	1c79c <mp_hal_stdout_tx_strn_cooked+0xc>
    }
}
   1c7c4:	bf00      	nop
   1c7c6:	3708      	adds	r7, #8
   1c7c8:	46bd      	mov	sp, r7
   1c7ca:	bd80      	pop	{r7, pc}
   1c7cc:	00025c3c 	.word	0x00025c3c

0001c7d0 <mp_hal_stdout_tx_str>:

// Send zero-terminated string
void mp_hal_stdout_tx_str(const char *str) {
   1c7d0:	b580      	push	{r7, lr}
   1c7d2:	b082      	sub	sp, #8
   1c7d4:	af00      	add	r7, sp, #0
   1c7d6:	6078      	str	r0, [r7, #4]
    mp_hal_stdout_tx_strn(str, strlen(str));
   1c7d8:	6878      	ldr	r0, [r7, #4]
   1c7da:	f000 fb87 	bl	1ceec <strlen>
   1c7de:	4603      	mov	r3, r0
   1c7e0:	4619      	mov	r1, r3
   1c7e2:	6878      	ldr	r0, [r7, #4]
   1c7e4:	f7ff f89a 	bl	1b91c <mp_hal_stdout_tx_strn>
}
   1c7e8:	bf00      	nop
   1c7ea:	3708      	adds	r7, #8
   1c7ec:	46bd      	mov	sp, r7
   1c7ee:	bd80      	pop	{r7, pc}

0001c7f0 <vstr_reset>:
static inline void vstr_reset(vstr_t *vstr) { vstr->len = 0; }
   1c7f0:	b480      	push	{r7}
   1c7f2:	b083      	sub	sp, #12
   1c7f4:	af00      	add	r7, sp, #0
   1c7f6:	6078      	str	r0, [r7, #4]
   1c7f8:	687b      	ldr	r3, [r7, #4]
   1c7fa:	2200      	movs	r2, #0
   1c7fc:	605a      	str	r2, [r3, #4]
   1c7fe:	bf00      	nop
   1c800:	370c      	adds	r7, #12
   1c802:	46bd      	mov	sp, r7
   1c804:	f85d 7b04 	ldr.w	r7, [sp], #4
   1c808:	4770      	bx	lr
   1c80a:	bf00      	nop

0001c80c <vstr_len>:
static inline size_t vstr_len(vstr_t *vstr) { return vstr->len; }
   1c80c:	b480      	push	{r7}
   1c80e:	b083      	sub	sp, #12
   1c810:	af00      	add	r7, sp, #0
   1c812:	6078      	str	r0, [r7, #4]
   1c814:	687b      	ldr	r3, [r7, #4]
   1c816:	685b      	ldr	r3, [r3, #4]
   1c818:	4618      	mov	r0, r3
   1c81a:	370c      	adds	r7, #12
   1c81c:	46bd      	mov	sp, r7
   1c81e:	f85d 7b04 	ldr.w	r7, [sp], #4
   1c822:	4770      	bx	lr

0001c824 <parse_compile_execute>:
// parses, compiles and executes the code in the lexer
// frees the lexer before returning
// EXEC_FLAG_PRINT_EOF prints 2 EOF chars: 1 after normal output, 1 after exception output
// EXEC_FLAG_ALLOW_DEBUGGING allows debugging info to be printed after executing the code
// EXEC_FLAG_IS_REPL is used for REPL inputs (flag passed on to mp_compile)
STATIC int parse_compile_execute(const void *source, mp_parse_input_kind_t input_kind, int exec_flags) {
   1c824:	b580      	push	{r7, lr}
   1c826:	b0a0      	sub	sp, #128	; 0x80
   1c828:	af02      	add	r7, sp, #8
   1c82a:	60f8      	str	r0, [r7, #12]
   1c82c:	60b9      	str	r1, [r7, #8]
   1c82e:	607a      	str	r2, [r7, #4]
    int ret = 0;
   1c830:	2300      	movs	r3, #0
   1c832:	677b      	str	r3, [r7, #116]	; 0x74
    uint32_t start = 0;
   1c834:	2300      	movs	r3, #0
   1c836:	673b      	str	r3, [r7, #112]	; 0x70

    // by default a SystemExit exception returns 0
    pyexec_system_exit = 0;
   1c838:	4b5b      	ldr	r3, [pc, #364]	; (1c9a8 <parse_compile_execute+0x184>)
   1c83a:	2200      	movs	r2, #0
   1c83c:	601a      	str	r2, [r3, #0]

    nlr_buf_t nlr;
    if (nlr_push(&nlr) == 0) {
   1c83e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   1c842:	4618      	mov	r0, r3
   1c844:	f7e3 fd3a 	bl	2bc <nlr_push>
   1c848:	4603      	mov	r3, r0
   1c84a:	2b00      	cmp	r3, #0
   1c84c:	d150      	bne.n	1c8f0 <parse_compile_execute+0xcc>
        } else
        #endif
        {
            #if MICROPY_ENABLE_COMPILER
            mp_lexer_t *lex;
            if (exec_flags & EXEC_FLAG_SOURCE_IS_VSTR) {
   1c84e:	687b      	ldr	r3, [r7, #4]
   1c850:	f003 0310 	and.w	r3, r3, #16
   1c854:	2b00      	cmp	r3, #0
   1c856:	d00b      	beq.n	1c870 <parse_compile_execute+0x4c>
                const vstr_t *vstr = source;
   1c858:	68fb      	ldr	r3, [r7, #12]
   1c85a:	66bb      	str	r3, [r7, #104]	; 0x68
                lex = mp_lexer_new_from_str_len(MP_QSTR__lt_stdin_gt_, vstr->buf, vstr->len, 0);
   1c85c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   1c85e:	6899      	ldr	r1, [r3, #8]
   1c860:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   1c862:	685a      	ldr	r2, [r3, #4]
   1c864:	2300      	movs	r3, #0
   1c866:	2037      	movs	r0, #55	; 0x37
   1c868:	f7e7 f818 	bl	389c <mp_lexer_new_from_str_len>
   1c86c:	66f8      	str	r0, [r7, #108]	; 0x6c
   1c86e:	e00b      	b.n	1c888 <parse_compile_execute+0x64>
            } else if (exec_flags & EXEC_FLAG_SOURCE_IS_FILENAME) {
   1c870:	687b      	ldr	r3, [r7, #4]
   1c872:	f003 0320 	and.w	r3, r3, #32
   1c876:	2b00      	cmp	r3, #0
   1c878:	d004      	beq.n	1c884 <parse_compile_execute+0x60>
                lex = mp_lexer_new_from_file(source);
   1c87a:	68f8      	ldr	r0, [r7, #12]
   1c87c:	f7fe fef8 	bl	1b670 <mp_lexer_new_from_file>
   1c880:	66f8      	str	r0, [r7, #108]	; 0x6c
   1c882:	e001      	b.n	1c888 <parse_compile_execute+0x64>
            } else {
                lex = (mp_lexer_t*)source;
   1c884:	68fb      	ldr	r3, [r7, #12]
   1c886:	66fb      	str	r3, [r7, #108]	; 0x6c
            }
            // source is a lexer, parse and compile the script
            qstr source_name = lex->source_name;
   1c888:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   1c88a:	681b      	ldr	r3, [r3, #0]
   1c88c:	667b      	str	r3, [r7, #100]	; 0x64
            mp_parse_tree_t parse_tree = mp_parse(lex, input_kind);
   1c88e:	f107 0324 	add.w	r3, r7, #36	; 0x24
   1c892:	68ba      	ldr	r2, [r7, #8]
   1c894:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
   1c896:	4618      	mov	r0, r3
   1c898:	f7e7 fdfc 	bl	4494 <mp_parse>
            module_fun = mp_compile(&parse_tree, source_name, MP_EMIT_OPT_NONE, exec_flags & EXEC_FLAG_IS_REPL);
   1c89c:	687b      	ldr	r3, [r7, #4]
   1c89e:	f003 0304 	and.w	r3, r3, #4
   1c8a2:	2b00      	cmp	r3, #0
   1c8a4:	bf14      	ite	ne
   1c8a6:	2301      	movne	r3, #1
   1c8a8:	2300      	moveq	r3, #0
   1c8aa:	b2db      	uxtb	r3, r3
   1c8ac:	f107 0024 	add.w	r0, r7, #36	; 0x24
   1c8b0:	2200      	movs	r2, #0
   1c8b2:	6e79      	ldr	r1, [r7, #100]	; 0x64
   1c8b4:	f7ed f856 	bl	9964 <mp_compile>
   1c8b8:	6638      	str	r0, [r7, #96]	; 0x60
            mp_raise_msg(&mp_type_RuntimeError, "script compilation not supported");
            #endif
        }

        // execute code
        mp_hal_set_interrupt_char(CHAR_CTRL_C); // allow ctrl-C to interrupt us
   1c8ba:	2003      	movs	r0, #3
   1c8bc:	f7ff f8ee 	bl	1ba9c <mp_hal_set_interrupt_char>
        start = mp_hal_ticks_ms();
   1c8c0:	f7ff f860 	bl	1b984 <mp_hal_ticks_ms>
   1c8c4:	6738      	str	r0, [r7, #112]	; 0x70
        mp_call_function_0(module_fun);
   1c8c6:	6e38      	ldr	r0, [r7, #96]	; 0x60
   1c8c8:	f7ef fb96 	bl	bff8 <mp_call_function_0>
        mp_hal_set_interrupt_char(-1); // disable interrupt
   1c8cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1c8d0:	f7ff f8e4 	bl	1ba9c <mp_hal_set_interrupt_char>
        nlr_pop();
   1c8d4:	f7e3 fce0 	bl	298 <nlr_pop>
        ret = 1;
   1c8d8:	2301      	movs	r3, #1
   1c8da:	677b      	str	r3, [r7, #116]	; 0x74
        if (exec_flags & EXEC_FLAG_PRINT_EOF) {
   1c8dc:	687b      	ldr	r3, [r7, #4]
   1c8de:	f003 0301 	and.w	r3, r3, #1
   1c8e2:	2b00      	cmp	r3, #0
   1c8e4:	d028      	beq.n	1c938 <parse_compile_execute+0x114>
            mp_hal_stdout_tx_strn("\x04", 1);
   1c8e6:	2101      	movs	r1, #1
   1c8e8:	4830      	ldr	r0, [pc, #192]	; (1c9ac <parse_compile_execute+0x188>)
   1c8ea:	f7ff f817 	bl	1b91c <mp_hal_stdout_tx_strn>
   1c8ee:	e023      	b.n	1c938 <parse_compile_execute+0x114>
        }
    } else {
        // uncaught exception
        // FIXME it could be that an interrupt happens just before we disable it here
        mp_hal_set_interrupt_char(-1); // disable interrupt
   1c8f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1c8f4:	f7ff f8d2 	bl	1ba9c <mp_hal_set_interrupt_char>
        // print EOF after normal output
        if (exec_flags & EXEC_FLAG_PRINT_EOF) {
   1c8f8:	687b      	ldr	r3, [r7, #4]
   1c8fa:	f003 0301 	and.w	r3, r3, #1
   1c8fe:	2b00      	cmp	r3, #0
   1c900:	d003      	beq.n	1c90a <parse_compile_execute+0xe6>
            mp_hal_stdout_tx_strn("\x04", 1);
   1c902:	2101      	movs	r1, #1
   1c904:	4829      	ldr	r0, [pc, #164]	; (1c9ac <parse_compile_execute+0x188>)
   1c906:	f7ff f809 	bl	1b91c <mp_hal_stdout_tx_strn>
        }
        // check for SystemExit
        if (mp_obj_is_subclass_fast(mp_obj_get_type((mp_obj_t)nlr.ret_val), &mp_type_SystemExit)) {
   1c90a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1c90c:	4618      	mov	r0, r3
   1c90e:	f7f1 f8d1 	bl	dab4 <mp_obj_get_type>
   1c912:	4603      	mov	r3, r0
   1c914:	4926      	ldr	r1, [pc, #152]	; (1c9b0 <parse_compile_execute+0x18c>)
   1c916:	4618      	mov	r0, r3
   1c918:	f7fa fe24 	bl	17564 <mp_obj_is_subclass_fast>
   1c91c:	4603      	mov	r3, r0
   1c91e:	2b00      	cmp	r3, #0
   1c920:	d003      	beq.n	1c92a <parse_compile_execute+0x106>
            // at the moment, the value of SystemExit is unused
            ret = pyexec_system_exit;
   1c922:	4b21      	ldr	r3, [pc, #132]	; (1c9a8 <parse_compile_execute+0x184>)
   1c924:	681b      	ldr	r3, [r3, #0]
   1c926:	677b      	str	r3, [r7, #116]	; 0x74
   1c928:	e006      	b.n	1c938 <parse_compile_execute+0x114>
        } else {
            mp_obj_print_exception(&mp_plat_print, (mp_obj_t)nlr.ret_val);
   1c92a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1c92c:	4619      	mov	r1, r3
   1c92e:	4821      	ldr	r0, [pc, #132]	; (1c9b4 <parse_compile_execute+0x190>)
   1c930:	f7f1 f92e 	bl	db90 <mp_obj_print_exception>
            ret = 0;
   1c934:	2300      	movs	r3, #0
   1c936:	677b      	str	r3, [r7, #116]	; 0x74
        }
    }

    // display debugging info if wanted
    if ((exec_flags & EXEC_FLAG_ALLOW_DEBUGGING) && repl_display_debugging_info) {
   1c938:	687b      	ldr	r3, [r7, #4]
   1c93a:	f003 0302 	and.w	r3, r3, #2
   1c93e:	2b00      	cmp	r3, #0
   1c940:	d024      	beq.n	1c98c <parse_compile_execute+0x168>
   1c942:	4b1d      	ldr	r3, [pc, #116]	; (1c9b8 <parse_compile_execute+0x194>)
   1c944:	781b      	ldrb	r3, [r3, #0]
   1c946:	2b00      	cmp	r3, #0
   1c948:	d020      	beq.n	1c98c <parse_compile_execute+0x168>
        mp_uint_t ticks = mp_hal_ticks_ms() - start; // TODO implement a function that does this properly
   1c94a:	f7ff f81b 	bl	1b984 <mp_hal_ticks_ms>
   1c94e:	4602      	mov	r2, r0
   1c950:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   1c952:	1ad3      	subs	r3, r2, r3
   1c954:	65fb      	str	r3, [r7, #92]	; 0x5c
        printf("took " UINT_FMT " ms\n", ticks);
   1c956:	6df9      	ldr	r1, [r7, #92]	; 0x5c
   1c958:	4818      	ldr	r0, [pc, #96]	; (1c9bc <parse_compile_execute+0x198>)
   1c95a:	f7fe fd4d 	bl	1b3f8 <printf>
        // qstr info
        {
            size_t n_pool, n_qstr, n_str_data_bytes, n_total_bytes;
            qstr_pool_info(&n_pool, &n_qstr, &n_str_data_bytes, &n_total_bytes);
   1c95e:	f107 0314 	add.w	r3, r7, #20
   1c962:	f107 0218 	add.w	r2, r7, #24
   1c966:	f107 011c 	add.w	r1, r7, #28
   1c96a:	f107 0020 	add.w	r0, r7, #32
   1c96e:	f7e4 fd21 	bl	13b4 <qstr_pool_info>
            printf("qstr:\n  n_pool=" UINT_FMT "\n  n_qstr=" UINT_FMT "\n  "
   1c972:	6a39      	ldr	r1, [r7, #32]
   1c974:	69fa      	ldr	r2, [r7, #28]
   1c976:	69b8      	ldr	r0, [r7, #24]
   1c978:	697b      	ldr	r3, [r7, #20]
   1c97a:	9300      	str	r3, [sp, #0]
   1c97c:	4603      	mov	r3, r0
   1c97e:	4810      	ldr	r0, [pc, #64]	; (1c9c0 <parse_compile_execute+0x19c>)
   1c980:	f7fe fd3a 	bl	1b3f8 <printf>
                   (unsigned)n_pool, (unsigned)n_qstr, (unsigned)n_str_data_bytes, (unsigned)n_total_bytes);
        }

        #if MICROPY_ENABLE_GC
        // run collection and print GC info
        gc_collect();
   1c984:	f7fe fe5a 	bl	1b63c <gc_collect>
        gc_dump_info();
   1c988:	f7e4 fa22 	bl	dd0 <gc_dump_info>
        #endif
    }

    if (exec_flags & EXEC_FLAG_PRINT_EOF) {
   1c98c:	687b      	ldr	r3, [r7, #4]
   1c98e:	f003 0301 	and.w	r3, r3, #1
   1c992:	2b00      	cmp	r3, #0
   1c994:	d003      	beq.n	1c99e <parse_compile_execute+0x17a>
        mp_hal_stdout_tx_strn("\x04", 1);
   1c996:	2101      	movs	r1, #1
   1c998:	4804      	ldr	r0, [pc, #16]	; (1c9ac <parse_compile_execute+0x188>)
   1c99a:	f7fe ffbf 	bl	1b91c <mp_hal_stdout_tx_strn>
    }

    return ret;
   1c99e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
}
   1c9a0:	4618      	mov	r0, r3
   1c9a2:	3778      	adds	r7, #120	; 0x78
   1c9a4:	46bd      	mov	sp, r7
   1c9a6:	bd80      	pop	{r7, pc}
   1c9a8:	200012cc 	.word	0x200012cc
   1c9ac:	00025c40 	.word	0x00025c40
   1c9b0:	00022170 	.word	0x00022170
   1c9b4:	0001f75c 	.word	0x0001f75c
   1c9b8:	200012d0 	.word	0x200012d0
   1c9bc:	00025c44 	.word	0x00025c44
   1c9c0:	00025c50 	.word	0x00025c50

0001c9c4 <pyexec_raw_repl>:
    return res;
}

#else // MICROPY_REPL_EVENT_DRIVEN

int pyexec_raw_repl(void) {
   1c9c4:	b580      	push	{r7, lr}
   1c9c6:	b086      	sub	sp, #24
   1c9c8:	af00      	add	r7, sp, #0
    vstr_t line;
    vstr_init(&line, 32);
   1c9ca:	463b      	mov	r3, r7
   1c9cc:	2120      	movs	r1, #32
   1c9ce:	4618      	mov	r0, r3
   1c9d0:	f7e4 fd52 	bl	1478 <vstr_init>

raw_repl_reset:
    mp_hal_stdout_tx_str("raw REPL; CTRL-B to exit\r\n");
   1c9d4:	482a      	ldr	r0, [pc, #168]	; (1ca80 <pyexec_raw_repl+0xbc>)
   1c9d6:	f7ff fefb 	bl	1c7d0 <mp_hal_stdout_tx_str>

    for (;;) {
        vstr_reset(&line);
   1c9da:	463b      	mov	r3, r7
   1c9dc:	4618      	mov	r0, r3
   1c9de:	f7ff ff07 	bl	1c7f0 <vstr_reset>
        mp_hal_stdout_tx_str(">");
   1c9e2:	4828      	ldr	r0, [pc, #160]	; (1ca84 <pyexec_raw_repl+0xc0>)
   1c9e4:	f7ff fef4 	bl	1c7d0 <mp_hal_stdout_tx_str>
        for (;;) {
            int c = mp_hal_stdin_rx_chr();
   1c9e8:	f7fe ff80 	bl	1b8ec <mp_hal_stdin_rx_chr>
   1c9ec:	6178      	str	r0, [r7, #20]
            if (c == CHAR_CTRL_A) {
   1c9ee:	697b      	ldr	r3, [r7, #20]
   1c9f0:	2b01      	cmp	r3, #1
   1c9f2:	d100      	bne.n	1c9f6 <pyexec_raw_repl+0x32>
                // reset raw REPL
                goto raw_repl_reset;
   1c9f4:	e7ee      	b.n	1c9d4 <pyexec_raw_repl+0x10>
            } else if (c == CHAR_CTRL_B) {
   1c9f6:	697b      	ldr	r3, [r7, #20]
   1c9f8:	2b02      	cmp	r3, #2
   1c9fa:	d10b      	bne.n	1ca14 <pyexec_raw_repl+0x50>
                // change to friendly REPL
                mp_hal_stdout_tx_str("\r\n");
   1c9fc:	4822      	ldr	r0, [pc, #136]	; (1ca88 <pyexec_raw_repl+0xc4>)
   1c9fe:	f7ff fee7 	bl	1c7d0 <mp_hal_stdout_tx_str>
                vstr_clear(&line);
   1ca02:	463b      	mov	r3, r7
   1ca04:	4618      	mov	r0, r3
   1ca06:	f7e4 fd9b 	bl	1540 <vstr_clear>
                pyexec_mode_kind = PYEXEC_MODE_FRIENDLY_REPL;
   1ca0a:	4b20      	ldr	r3, [pc, #128]	; (1ca8c <pyexec_raw_repl+0xc8>)
   1ca0c:	2201      	movs	r2, #1
   1ca0e:	601a      	str	r2, [r3, #0]
                return 0;
   1ca10:	2300      	movs	r3, #0
   1ca12:	e030      	b.n	1ca76 <pyexec_raw_repl+0xb2>
            } else if (c == CHAR_CTRL_C) {
   1ca14:	697b      	ldr	r3, [r7, #20]
   1ca16:	2b03      	cmp	r3, #3
   1ca18:	d104      	bne.n	1ca24 <pyexec_raw_repl+0x60>
                // clear line
                vstr_reset(&line);
   1ca1a:	463b      	mov	r3, r7
   1ca1c:	4618      	mov	r0, r3
   1ca1e:	f7ff fee7 	bl	1c7f0 <vstr_reset>
   1ca22:	e7e1      	b.n	1c9e8 <pyexec_raw_repl+0x24>
            } else if (c == CHAR_CTRL_D) {
   1ca24:	697b      	ldr	r3, [r7, #20]
   1ca26:	2b04      	cmp	r3, #4
   1ca28:	d007      	beq.n	1ca3a <pyexec_raw_repl+0x76>
                // input finished
                break;
            } else {
                // let through any other raw 8-bit value
                vstr_add_byte(&line, c);
   1ca2a:	697b      	ldr	r3, [r7, #20]
   1ca2c:	b2da      	uxtb	r2, r3
   1ca2e:	463b      	mov	r3, r7
   1ca30:	4611      	mov	r1, r2
   1ca32:	4618      	mov	r0, r3
   1ca34:	f7e4 fe76 	bl	1724 <vstr_add_byte>
            }
        }
   1ca38:	e7d6      	b.n	1c9e8 <pyexec_raw_repl+0x24>
                break;
   1ca3a:	bf00      	nop

        // indicate reception of command
        mp_hal_stdout_tx_str("OK");
   1ca3c:	4814      	ldr	r0, [pc, #80]	; (1ca90 <pyexec_raw_repl+0xcc>)
   1ca3e:	f7ff fec7 	bl	1c7d0 <mp_hal_stdout_tx_str>

        if (line.len == 0) {
   1ca42:	687b      	ldr	r3, [r7, #4]
   1ca44:	2b00      	cmp	r3, #0
   1ca46:	d109      	bne.n	1ca5c <pyexec_raw_repl+0x98>
            // exit for a soft reset
            mp_hal_stdout_tx_str("\r\n");
   1ca48:	480f      	ldr	r0, [pc, #60]	; (1ca88 <pyexec_raw_repl+0xc4>)
   1ca4a:	f7ff fec1 	bl	1c7d0 <mp_hal_stdout_tx_str>
            vstr_clear(&line);
   1ca4e:	463b      	mov	r3, r7
   1ca50:	4618      	mov	r0, r3
   1ca52:	f7e4 fd75 	bl	1540 <vstr_clear>
            return PYEXEC_FORCED_EXIT;
   1ca56:	f44f 7380 	mov.w	r3, #256	; 0x100
   1ca5a:	e00c      	b.n	1ca76 <pyexec_raw_repl+0xb2>
        }

        int ret = parse_compile_execute(&line, MP_PARSE_FILE_INPUT, EXEC_FLAG_PRINT_EOF | EXEC_FLAG_SOURCE_IS_VSTR);
   1ca5c:	463b      	mov	r3, r7
   1ca5e:	2211      	movs	r2, #17
   1ca60:	2101      	movs	r1, #1
   1ca62:	4618      	mov	r0, r3
   1ca64:	f7ff fede 	bl	1c824 <parse_compile_execute>
   1ca68:	6138      	str	r0, [r7, #16]
        if (ret & PYEXEC_FORCED_EXIT) {
   1ca6a:	693b      	ldr	r3, [r7, #16]
   1ca6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
   1ca70:	2b00      	cmp	r3, #0
   1ca72:	d0b2      	beq.n	1c9da <pyexec_raw_repl+0x16>
            return ret;
   1ca74:	693b      	ldr	r3, [r7, #16]
        }
    }
}
   1ca76:	4618      	mov	r0, r3
   1ca78:	3718      	adds	r7, #24
   1ca7a:	46bd      	mov	sp, r7
   1ca7c:	bd80      	pop	{r7, pc}
   1ca7e:	bf00      	nop
   1ca80:	00025c98 	.word	0x00025c98
   1ca84:	00025cb4 	.word	0x00025cb4
   1ca88:	00025cb8 	.word	0x00025cb8
   1ca8c:	200008bc 	.word	0x200008bc
   1ca90:	00025cbc 	.word	0x00025cbc

0001ca94 <pyexec_friendly_repl>:

int pyexec_friendly_repl(void) {
   1ca94:	b580      	push	{r7, lr}
   1ca96:	b088      	sub	sp, #32
   1ca98:	af00      	add	r7, sp, #0
    vstr_t line;
    vstr_init(&line, 32);
   1ca9a:	f107 0308 	add.w	r3, r7, #8
   1ca9e:	2120      	movs	r1, #32
   1caa0:	4618      	mov	r0, r3
   1caa2:	f7e4 fce9 	bl	1478 <vstr_init>
    mp_obj_t lcd_o = mp_call_function_0(mp_load_name(qstr_from_str("LCD")));
    mp_call_function_1(mp_load_attr(lcd_o, qstr_from_str("light")), mp_const_true);
#endif

friendly_repl_reset:
    mp_hal_stdout_tx_str("MicroPython " MICROPY_GIT_TAG " on " MICROPY_BUILD_DATE "; " MICROPY_HW_BOARD_NAME " with " MICROPY_HW_MCU_NAME "\r\n");
   1caa6:	485a      	ldr	r0, [pc, #360]	; (1cc10 <pyexec_friendly_repl+0x17c>)
   1caa8:	f7ff fe92 	bl	1c7d0 <mp_hal_stdout_tx_str>
                mp_hal_stdout_tx_str("PYB: enabling IRQs\r\n");
            }
        }
        #endif

        vstr_reset(&line);
   1caac:	f107 0308 	add.w	r3, r7, #8
   1cab0:	4618      	mov	r0, r3
   1cab2:	f7ff fe9d 	bl	1c7f0 <vstr_reset>
        int ret = readline(&line, ">>> ");
   1cab6:	f107 0308 	add.w	r3, r7, #8
   1caba:	4956      	ldr	r1, [pc, #344]	; (1cc14 <pyexec_friendly_repl+0x180>)
   1cabc:	4618      	mov	r0, r3
   1cabe:	f000 ff17 	bl	1d8f0 <readline>
   1cac2:	61b8      	str	r0, [r7, #24]
        mp_parse_input_kind_t parse_input_kind = MP_PARSE_SINGLE_INPUT;
   1cac4:	2300      	movs	r3, #0
   1cac6:	61fb      	str	r3, [r7, #28]

        if (ret == CHAR_CTRL_A) {
   1cac8:	69bb      	ldr	r3, [r7, #24]
   1caca:	2b01      	cmp	r3, #1
   1cacc:	d10c      	bne.n	1cae8 <pyexec_friendly_repl+0x54>
            // change to raw REPL
            mp_hal_stdout_tx_str("\r\n");
   1cace:	4852      	ldr	r0, [pc, #328]	; (1cc18 <pyexec_friendly_repl+0x184>)
   1cad0:	f7ff fe7e 	bl	1c7d0 <mp_hal_stdout_tx_str>
            vstr_clear(&line);
   1cad4:	f107 0308 	add.w	r3, r7, #8
   1cad8:	4618      	mov	r0, r3
   1cada:	f7e4 fd31 	bl	1540 <vstr_clear>
            pyexec_mode_kind = PYEXEC_MODE_RAW_REPL;
   1cade:	4b4f      	ldr	r3, [pc, #316]	; (1cc1c <pyexec_friendly_repl+0x188>)
   1cae0:	2200      	movs	r2, #0
   1cae2:	601a      	str	r2, [r3, #0]
            return 0;
   1cae4:	2300      	movs	r3, #0
   1cae6:	e08f      	b.n	1cc08 <pyexec_friendly_repl+0x174>
        } else if (ret == CHAR_CTRL_B) {
   1cae8:	69bb      	ldr	r3, [r7, #24]
   1caea:	2b02      	cmp	r3, #2
   1caec:	d103      	bne.n	1caf6 <pyexec_friendly_repl+0x62>
            // reset friendly REPL
            mp_hal_stdout_tx_str("\r\n");
   1caee:	484a      	ldr	r0, [pc, #296]	; (1cc18 <pyexec_friendly_repl+0x184>)
   1caf0:	f7ff fe6e 	bl	1c7d0 <mp_hal_stdout_tx_str>
            goto friendly_repl_reset;
   1caf4:	e7d7      	b.n	1caa6 <pyexec_friendly_repl+0x12>
        } else if (ret == CHAR_CTRL_C) {
   1caf6:	69bb      	ldr	r3, [r7, #24]
   1caf8:	2b03      	cmp	r3, #3
   1cafa:	d103      	bne.n	1cb04 <pyexec_friendly_repl+0x70>
            // break
            mp_hal_stdout_tx_str("\r\n");
   1cafc:	4846      	ldr	r0, [pc, #280]	; (1cc18 <pyexec_friendly_repl+0x184>)
   1cafe:	f7ff fe67 	bl	1c7d0 <mp_hal_stdout_tx_str>
            continue;
   1cb02:	e080      	b.n	1cc06 <pyexec_friendly_repl+0x172>
        } else if (ret == CHAR_CTRL_D) {
   1cb04:	69bb      	ldr	r3, [r7, #24]
   1cb06:	2b04      	cmp	r3, #4
   1cb08:	d10a      	bne.n	1cb20 <pyexec_friendly_repl+0x8c>
            // exit for a soft reset
            mp_hal_stdout_tx_str("\r\n");
   1cb0a:	4843      	ldr	r0, [pc, #268]	; (1cc18 <pyexec_friendly_repl+0x184>)
   1cb0c:	f7ff fe60 	bl	1c7d0 <mp_hal_stdout_tx_str>
            vstr_clear(&line);
   1cb10:	f107 0308 	add.w	r3, r7, #8
   1cb14:	4618      	mov	r0, r3
   1cb16:	f7e4 fd13 	bl	1540 <vstr_clear>
            return PYEXEC_FORCED_EXIT;
   1cb1a:	f44f 7380 	mov.w	r3, #256	; 0x100
   1cb1e:	e073      	b.n	1cc08 <pyexec_friendly_repl+0x174>
        } else if (ret == CHAR_CTRL_E) {
   1cb20:	69bb      	ldr	r3, [r7, #24]
   1cb22:	2b05      	cmp	r3, #5
   1cb24:	d130      	bne.n	1cb88 <pyexec_friendly_repl+0xf4>
            // paste mode
            mp_hal_stdout_tx_str("\r\npaste mode; Ctrl-C to cancel, Ctrl-D to finish\r\n=== ");
   1cb26:	483e      	ldr	r0, [pc, #248]	; (1cc20 <pyexec_friendly_repl+0x18c>)
   1cb28:	f7ff fe52 	bl	1c7d0 <mp_hal_stdout_tx_str>
            vstr_reset(&line);
   1cb2c:	f107 0308 	add.w	r3, r7, #8
   1cb30:	4618      	mov	r0, r3
   1cb32:	f7ff fe5d 	bl	1c7f0 <vstr_reset>
            for (;;) {
                char c = mp_hal_stdin_rx_chr();
   1cb36:	f7fe fed9 	bl	1b8ec <mp_hal_stdin_rx_chr>
   1cb3a:	4603      	mov	r3, r0
   1cb3c:	b2db      	uxtb	r3, r3
   1cb3e:	71fb      	strb	r3, [r7, #7]
                if (c == CHAR_CTRL_C) {
   1cb40:	79fb      	ldrb	r3, [r7, #7]
   1cb42:	2b03      	cmp	r3, #3
   1cb44:	d103      	bne.n	1cb4e <pyexec_friendly_repl+0xba>
                    // cancel everything
                    mp_hal_stdout_tx_str("\r\n");
   1cb46:	4834      	ldr	r0, [pc, #208]	; (1cc18 <pyexec_friendly_repl+0x184>)
   1cb48:	f7ff fe42 	bl	1c7d0 <mp_hal_stdout_tx_str>
   1cb4c:	e7ae      	b.n	1caac <pyexec_friendly_repl+0x18>
                    goto input_restart;
                } else if (c == CHAR_CTRL_D) {
   1cb4e:	79fb      	ldrb	r3, [r7, #7]
   1cb50:	2b04      	cmp	r3, #4
   1cb52:	d105      	bne.n	1cb60 <pyexec_friendly_repl+0xcc>
                    // end of input
                    mp_hal_stdout_tx_str("\r\n");
   1cb54:	4830      	ldr	r0, [pc, #192]	; (1cc18 <pyexec_friendly_repl+0x184>)
   1cb56:	f7ff fe3b 	bl	1c7d0 <mp_hal_stdout_tx_str>
                    } else {
                        mp_hal_stdout_tx_strn(&c, 1);
                    }
                }
            }
            parse_input_kind = MP_PARSE_FILE_INPUT;
   1cb5a:	2301      	movs	r3, #1
   1cb5c:	61fb      	str	r3, [r7, #28]
   1cb5e:	e041      	b.n	1cbe4 <pyexec_friendly_repl+0x150>
                    vstr_add_byte(&line, c);
   1cb60:	79fa      	ldrb	r2, [r7, #7]
   1cb62:	f107 0308 	add.w	r3, r7, #8
   1cb66:	4611      	mov	r1, r2
   1cb68:	4618      	mov	r0, r3
   1cb6a:	f7e4 fddb 	bl	1724 <vstr_add_byte>
                    if (c == '\r') {
   1cb6e:	79fb      	ldrb	r3, [r7, #7]
   1cb70:	2b0d      	cmp	r3, #13
   1cb72:	d103      	bne.n	1cb7c <pyexec_friendly_repl+0xe8>
                        mp_hal_stdout_tx_str("\r\n=== ");
   1cb74:	482b      	ldr	r0, [pc, #172]	; (1cc24 <pyexec_friendly_repl+0x190>)
   1cb76:	f7ff fe2b 	bl	1c7d0 <mp_hal_stdout_tx_str>
   1cb7a:	e7dc      	b.n	1cb36 <pyexec_friendly_repl+0xa2>
                        mp_hal_stdout_tx_strn(&c, 1);
   1cb7c:	1dfb      	adds	r3, r7, #7
   1cb7e:	2101      	movs	r1, #1
   1cb80:	4618      	mov	r0, r3
   1cb82:	f7fe fecb 	bl	1b91c <mp_hal_stdout_tx_strn>
            }
   1cb86:	e7d6      	b.n	1cb36 <pyexec_friendly_repl+0xa2>
        } else if (vstr_len(&line) == 0) {
   1cb88:	f107 0308 	add.w	r3, r7, #8
   1cb8c:	4618      	mov	r0, r3
   1cb8e:	f7ff fe3d 	bl	1c80c <vstr_len>
   1cb92:	4603      	mov	r3, r0
   1cb94:	2b00      	cmp	r3, #0
   1cb96:	d035      	beq.n	1cc04 <pyexec_friendly_repl+0x170>
            continue;
        } else {
            // got a line with non-zero length, see if it needs continuing
            while (mp_repl_continue_with_input(vstr_null_terminated_str(&line))) {
   1cb98:	e016      	b.n	1cbc8 <pyexec_friendly_repl+0x134>
                vstr_add_byte(&line, '\n');
   1cb9a:	f107 0308 	add.w	r3, r7, #8
   1cb9e:	210a      	movs	r1, #10
   1cba0:	4618      	mov	r0, r3
   1cba2:	f7e4 fdbf 	bl	1724 <vstr_add_byte>
                ret = readline(&line, "... ");
   1cba6:	f107 0308 	add.w	r3, r7, #8
   1cbaa:	491f      	ldr	r1, [pc, #124]	; (1cc28 <pyexec_friendly_repl+0x194>)
   1cbac:	4618      	mov	r0, r3
   1cbae:	f000 fe9f 	bl	1d8f0 <readline>
   1cbb2:	61b8      	str	r0, [r7, #24]
                if (ret == CHAR_CTRL_C) {
   1cbb4:	69bb      	ldr	r3, [r7, #24]
   1cbb6:	2b03      	cmp	r3, #3
   1cbb8:	d103      	bne.n	1cbc2 <pyexec_friendly_repl+0x12e>
                    // cancel everything
                    mp_hal_stdout_tx_str("\r\n");
   1cbba:	4817      	ldr	r0, [pc, #92]	; (1cc18 <pyexec_friendly_repl+0x184>)
   1cbbc:	f7ff fe08 	bl	1c7d0 <mp_hal_stdout_tx_str>
                    goto input_restart;
   1cbc0:	e774      	b.n	1caac <pyexec_friendly_repl+0x18>
                } else if (ret == CHAR_CTRL_D) {
   1cbc2:	69bb      	ldr	r3, [r7, #24]
   1cbc4:	2b04      	cmp	r3, #4
   1cbc6:	d00c      	beq.n	1cbe2 <pyexec_friendly_repl+0x14e>
            while (mp_repl_continue_with_input(vstr_null_terminated_str(&line))) {
   1cbc8:	f107 0308 	add.w	r3, r7, #8
   1cbcc:	4618      	mov	r0, r3
   1cbce:	f7e4 fd8d 	bl	16ec <vstr_null_terminated_str>
   1cbd2:	4603      	mov	r3, r0
   1cbd4:	4618      	mov	r0, r3
   1cbd6:	f7fe f8ef 	bl	1adb8 <mp_repl_continue_with_input>
   1cbda:	4603      	mov	r3, r0
   1cbdc:	2b00      	cmp	r3, #0
   1cbde:	d1dc      	bne.n	1cb9a <pyexec_friendly_repl+0x106>
   1cbe0:	e000      	b.n	1cbe4 <pyexec_friendly_repl+0x150>
                    // stop entering compound statement
                    break;
   1cbe2:	bf00      	nop
                }
            }
        }

        ret = parse_compile_execute(&line, parse_input_kind, EXEC_FLAG_ALLOW_DEBUGGING | EXEC_FLAG_IS_REPL | EXEC_FLAG_SOURCE_IS_VSTR);
   1cbe4:	f107 0308 	add.w	r3, r7, #8
   1cbe8:	2216      	movs	r2, #22
   1cbea:	69f9      	ldr	r1, [r7, #28]
   1cbec:	4618      	mov	r0, r3
   1cbee:	f7ff fe19 	bl	1c824 <parse_compile_execute>
   1cbf2:	61b8      	str	r0, [r7, #24]
        if (ret & PYEXEC_FORCED_EXIT) {
   1cbf4:	69bb      	ldr	r3, [r7, #24]
   1cbf6:	f403 7380 	and.w	r3, r3, #256	; 0x100
   1cbfa:	2b00      	cmp	r3, #0
   1cbfc:	f43f af56 	beq.w	1caac <pyexec_friendly_repl+0x18>
            return ret;
   1cc00:	69bb      	ldr	r3, [r7, #24]
   1cc02:	e001      	b.n	1cc08 <pyexec_friendly_repl+0x174>
            continue;
   1cc04:	bf00      	nop
        }
    }
   1cc06:	e751      	b.n	1caac <pyexec_friendly_repl+0x18>
}
   1cc08:	4618      	mov	r0, r3
   1cc0a:	3720      	adds	r7, #32
   1cc0c:	46bd      	mov	sp, r7
   1cc0e:	bd80      	pop	{r7, pc}
   1cc10:	00025cc0 	.word	0x00025cc0
   1cc14:	00025d1c 	.word	0x00025d1c
   1cc18:	00025cb8 	.word	0x00025cb8
   1cc1c:	200008bc 	.word	0x200008bc
   1cc20:	00025d24 	.word	0x00025d24
   1cc24:	00025d5c 	.word	0x00025d5c
   1cc28:	00025d64 	.word	0x00025d64

0001cc2c <pyexec_file>:

#endif // MICROPY_REPL_EVENT_DRIVEN
#endif // MICROPY_ENABLE_COMPILER

int pyexec_file(const char *filename) {
   1cc2c:	b580      	push	{r7, lr}
   1cc2e:	b082      	sub	sp, #8
   1cc30:	af00      	add	r7, sp, #0
   1cc32:	6078      	str	r0, [r7, #4]
    return parse_compile_execute(filename, MP_PARSE_FILE_INPUT, EXEC_FLAG_SOURCE_IS_FILENAME);
   1cc34:	2220      	movs	r2, #32
   1cc36:	2101      	movs	r1, #1
   1cc38:	6878      	ldr	r0, [r7, #4]
   1cc3a:	f7ff fdf3 	bl	1c824 <parse_compile_execute>
   1cc3e:	4603      	mov	r3, r0
}
   1cc40:	4618      	mov	r0, r3
   1cc42:	3708      	adds	r7, #8
   1cc44:	46bd      	mov	sp, r7
   1cc46:	bd80      	pop	{r7, pc}

0001cc48 <pyb_set_repl_info>:
            return false;
    }
}
#endif

mp_obj_t pyb_set_repl_info(mp_obj_t o_value) {
   1cc48:	b580      	push	{r7, lr}
   1cc4a:	b082      	sub	sp, #8
   1cc4c:	af00      	add	r7, sp, #0
   1cc4e:	6078      	str	r0, [r7, #4]
    repl_display_debugging_info = mp_obj_get_int(o_value);
   1cc50:	6878      	ldr	r0, [r7, #4]
   1cc52:	f7f1 f90d 	bl	de70 <mp_obj_get_int>
   1cc56:	4603      	mov	r3, r0
   1cc58:	2b00      	cmp	r3, #0
   1cc5a:	bf14      	ite	ne
   1cc5c:	2301      	movne	r3, #1
   1cc5e:	2300      	moveq	r3, #0
   1cc60:	b2da      	uxtb	r2, r3
   1cc62:	4b03      	ldr	r3, [pc, #12]	; (1cc70 <pyb_set_repl_info+0x28>)
   1cc64:	701a      	strb	r2, [r3, #0]
    return mp_const_none;
   1cc66:	4b03      	ldr	r3, [pc, #12]	; (1cc74 <pyb_set_repl_info+0x2c>)
}
   1cc68:	4618      	mov	r0, r3
   1cc6a:	3708      	adds	r7, #8
   1cc6c:	46bd      	mov	sp, r7
   1cc6e:	bd80      	pop	{r7, pc}
   1cc70:	200012d0 	.word	0x200012d0
   1cc74:	0002345c 	.word	0x0002345c

0001cc78 <memcpy>:
#include <stdint.h>
#include <string.h>

#define likely(x) __builtin_expect((x), 1)

void *memcpy(void *dst, const void *src, size_t n) {
   1cc78:	b480      	push	{r7}
   1cc7a:	b08b      	sub	sp, #44	; 0x2c
   1cc7c:	af00      	add	r7, sp, #0
   1cc7e:	60f8      	str	r0, [r7, #12]
   1cc80:	60b9      	str	r1, [r7, #8]
   1cc82:	607a      	str	r2, [r7, #4]
    if (likely(!(((uintptr_t)dst) & 3) && !(((uintptr_t)src) & 3))) {
   1cc84:	68fb      	ldr	r3, [r7, #12]
   1cc86:	f003 0303 	and.w	r3, r3, #3
   1cc8a:	2b00      	cmp	r3, #0
   1cc8c:	bf0c      	ite	eq
   1cc8e:	2301      	moveq	r3, #1
   1cc90:	2300      	movne	r3, #0
   1cc92:	b2db      	uxtb	r3, r3
   1cc94:	2b00      	cmp	r3, #0
   1cc96:	d038      	beq.n	1cd0a <memcpy+0x92>
   1cc98:	68bb      	ldr	r3, [r7, #8]
   1cc9a:	f003 0303 	and.w	r3, r3, #3
   1cc9e:	2b00      	cmp	r3, #0
   1cca0:	bf0c      	ite	eq
   1cca2:	2301      	moveq	r3, #1
   1cca4:	2300      	movne	r3, #0
   1cca6:	b2db      	uxtb	r3, r3
   1cca8:	2b00      	cmp	r3, #0
   1ccaa:	d02e      	beq.n	1cd0a <memcpy+0x92>
        // pointers aligned
        uint32_t *d = dst;
   1ccac:	68fb      	ldr	r3, [r7, #12]
   1ccae:	627b      	str	r3, [r7, #36]	; 0x24
        const uint32_t *s = src;
   1ccb0:	68bb      	ldr	r3, [r7, #8]
   1ccb2:	623b      	str	r3, [r7, #32]

        // copy words first
        for (size_t i = (n >> 2); i; i--) {
   1ccb4:	687b      	ldr	r3, [r7, #4]
   1ccb6:	089b      	lsrs	r3, r3, #2
   1ccb8:	61fb      	str	r3, [r7, #28]
   1ccba:	e00a      	b.n	1ccd2 <memcpy+0x5a>
            *d++ = *s++;
   1ccbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1ccbe:	1d1a      	adds	r2, r3, #4
   1ccc0:	627a      	str	r2, [r7, #36]	; 0x24
   1ccc2:	6a3a      	ldr	r2, [r7, #32]
   1ccc4:	1d11      	adds	r1, r2, #4
   1ccc6:	6239      	str	r1, [r7, #32]
   1ccc8:	6812      	ldr	r2, [r2, #0]
   1ccca:	601a      	str	r2, [r3, #0]
        for (size_t i = (n >> 2); i; i--) {
   1cccc:	69fb      	ldr	r3, [r7, #28]
   1ccce:	3b01      	subs	r3, #1
   1ccd0:	61fb      	str	r3, [r7, #28]
   1ccd2:	69fb      	ldr	r3, [r7, #28]
   1ccd4:	2b00      	cmp	r3, #0
   1ccd6:	d1f1      	bne.n	1ccbc <memcpy+0x44>
        }

        if (n & 2) {
   1ccd8:	687b      	ldr	r3, [r7, #4]
   1ccda:	f003 0302 	and.w	r3, r3, #2
   1ccde:	2b00      	cmp	r3, #0
   1cce0:	d009      	beq.n	1ccf6 <memcpy+0x7e>
            // copy half-word
            *(uint16_t*)d = *(const uint16_t*)s;
   1cce2:	6a3b      	ldr	r3, [r7, #32]
   1cce4:	881a      	ldrh	r2, [r3, #0]
   1cce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1cce8:	801a      	strh	r2, [r3, #0]
            d = (uint32_t*)((uint16_t*)d + 1);
   1ccea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1ccec:	3302      	adds	r3, #2
   1ccee:	627b      	str	r3, [r7, #36]	; 0x24
            s = (const uint32_t*)((const uint16_t*)s + 1);
   1ccf0:	6a3b      	ldr	r3, [r7, #32]
   1ccf2:	3302      	adds	r3, #2
   1ccf4:	623b      	str	r3, [r7, #32]
        }

        if (n & 1) {
   1ccf6:	687b      	ldr	r3, [r7, #4]
   1ccf8:	f003 0301 	and.w	r3, r3, #1
   1ccfc:	2b00      	cmp	r3, #0
   1ccfe:	d018      	beq.n	1cd32 <memcpy+0xba>
            // copy byte
            *((uint8_t*)d) = *((const uint8_t*)s);
   1cd00:	6a3b      	ldr	r3, [r7, #32]
   1cd02:	781a      	ldrb	r2, [r3, #0]
   1cd04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1cd06:	701a      	strb	r2, [r3, #0]
    if (likely(!(((uintptr_t)dst) & 3) && !(((uintptr_t)src) & 3))) {
   1cd08:	e013      	b.n	1cd32 <memcpy+0xba>
        }
    } else {
        // unaligned access, copy bytes
        uint8_t *d = dst;
   1cd0a:	68fb      	ldr	r3, [r7, #12]
   1cd0c:	61bb      	str	r3, [r7, #24]
        const uint8_t *s = src;
   1cd0e:	68bb      	ldr	r3, [r7, #8]
   1cd10:	617b      	str	r3, [r7, #20]

        for (; n; n--) {
   1cd12:	e00a      	b.n	1cd2a <memcpy+0xb2>
            *d++ = *s++;
   1cd14:	69bb      	ldr	r3, [r7, #24]
   1cd16:	1c5a      	adds	r2, r3, #1
   1cd18:	61ba      	str	r2, [r7, #24]
   1cd1a:	697a      	ldr	r2, [r7, #20]
   1cd1c:	1c51      	adds	r1, r2, #1
   1cd1e:	6179      	str	r1, [r7, #20]
   1cd20:	7812      	ldrb	r2, [r2, #0]
   1cd22:	701a      	strb	r2, [r3, #0]
        for (; n; n--) {
   1cd24:	687b      	ldr	r3, [r7, #4]
   1cd26:	3b01      	subs	r3, #1
   1cd28:	607b      	str	r3, [r7, #4]
   1cd2a:	687b      	ldr	r3, [r7, #4]
   1cd2c:	2b00      	cmp	r3, #0
   1cd2e:	d1f1      	bne.n	1cd14 <memcpy+0x9c>
   1cd30:	e000      	b.n	1cd34 <memcpy+0xbc>
    if (likely(!(((uintptr_t)dst) & 3) && !(((uintptr_t)src) & 3))) {
   1cd32:	bf00      	nop
        }
    }

    return dst;
   1cd34:	68fb      	ldr	r3, [r7, #12]
}
   1cd36:	4618      	mov	r0, r3
   1cd38:	372c      	adds	r7, #44	; 0x2c
   1cd3a:	46bd      	mov	sp, r7
   1cd3c:	f85d 7b04 	ldr.w	r7, [sp], #4
   1cd40:	4770      	bx	lr
   1cd42:	bf00      	nop

0001cd44 <memmove>:

void *memmove(void *dest, const void *src, size_t n) {
   1cd44:	b580      	push	{r7, lr}
   1cd46:	b086      	sub	sp, #24
   1cd48:	af00      	add	r7, sp, #0
   1cd4a:	60f8      	str	r0, [r7, #12]
   1cd4c:	60b9      	str	r1, [r7, #8]
   1cd4e:	607a      	str	r2, [r7, #4]
    if (src < dest && (uint8_t*)dest < (const uint8_t*)src + n) {
   1cd50:	68ba      	ldr	r2, [r7, #8]
   1cd52:	68fb      	ldr	r3, [r7, #12]
   1cd54:	429a      	cmp	r2, r3
   1cd56:	d220      	bcs.n	1cd9a <memmove+0x56>
   1cd58:	68ba      	ldr	r2, [r7, #8]
   1cd5a:	687b      	ldr	r3, [r7, #4]
   1cd5c:	441a      	add	r2, r3
   1cd5e:	68fb      	ldr	r3, [r7, #12]
   1cd60:	429a      	cmp	r2, r3
   1cd62:	d91a      	bls.n	1cd9a <memmove+0x56>
        // need to copy backwards
        uint8_t *d = (uint8_t*)dest + n - 1;
   1cd64:	687b      	ldr	r3, [r7, #4]
   1cd66:	3b01      	subs	r3, #1
   1cd68:	68fa      	ldr	r2, [r7, #12]
   1cd6a:	4413      	add	r3, r2
   1cd6c:	617b      	str	r3, [r7, #20]
        const uint8_t *s = (const uint8_t*)src + n - 1;
   1cd6e:	687b      	ldr	r3, [r7, #4]
   1cd70:	3b01      	subs	r3, #1
   1cd72:	68ba      	ldr	r2, [r7, #8]
   1cd74:	4413      	add	r3, r2
   1cd76:	613b      	str	r3, [r7, #16]
        for (; n > 0; n--) {
   1cd78:	e00a      	b.n	1cd90 <memmove+0x4c>
            *d-- = *s--;
   1cd7a:	697b      	ldr	r3, [r7, #20]
   1cd7c:	1e5a      	subs	r2, r3, #1
   1cd7e:	617a      	str	r2, [r7, #20]
   1cd80:	693a      	ldr	r2, [r7, #16]
   1cd82:	1e51      	subs	r1, r2, #1
   1cd84:	6139      	str	r1, [r7, #16]
   1cd86:	7812      	ldrb	r2, [r2, #0]
   1cd88:	701a      	strb	r2, [r3, #0]
        for (; n > 0; n--) {
   1cd8a:	687b      	ldr	r3, [r7, #4]
   1cd8c:	3b01      	subs	r3, #1
   1cd8e:	607b      	str	r3, [r7, #4]
   1cd90:	687b      	ldr	r3, [r7, #4]
   1cd92:	2b00      	cmp	r3, #0
   1cd94:	d1f1      	bne.n	1cd7a <memmove+0x36>
        }
        return dest;
   1cd96:	68fb      	ldr	r3, [r7, #12]
   1cd98:	e005      	b.n	1cda6 <memmove+0x62>
    } else {
        // can use normal memcpy
        return memcpy(dest, src, n);
   1cd9a:	687a      	ldr	r2, [r7, #4]
   1cd9c:	68b9      	ldr	r1, [r7, #8]
   1cd9e:	68f8      	ldr	r0, [r7, #12]
   1cda0:	f7ff ff6a 	bl	1cc78 <memcpy>
   1cda4:	4603      	mov	r3, r0
    }
}
   1cda6:	4618      	mov	r0, r3
   1cda8:	3718      	adds	r7, #24
   1cdaa:	46bd      	mov	sp, r7
   1cdac:	bd80      	pop	{r7, pc}
   1cdae:	bf00      	nop

0001cdb0 <memset>:

void *memset(void *s, int c, size_t n) {
   1cdb0:	b480      	push	{r7}
   1cdb2:	b089      	sub	sp, #36	; 0x24
   1cdb4:	af00      	add	r7, sp, #0
   1cdb6:	60f8      	str	r0, [r7, #12]
   1cdb8:	60b9      	str	r1, [r7, #8]
   1cdba:	607a      	str	r2, [r7, #4]
    if (c == 0 && ((uintptr_t)s & 3) == 0) {
   1cdbc:	68bb      	ldr	r3, [r7, #8]
   1cdbe:	2b00      	cmp	r3, #0
   1cdc0:	d129      	bne.n	1ce16 <memset+0x66>
   1cdc2:	68fb      	ldr	r3, [r7, #12]
   1cdc4:	f003 0303 	and.w	r3, r3, #3
   1cdc8:	2b00      	cmp	r3, #0
   1cdca:	d124      	bne.n	1ce16 <memset+0x66>
        // aligned store of 0
        uint32_t *s32 = s;
   1cdcc:	68fb      	ldr	r3, [r7, #12]
   1cdce:	61fb      	str	r3, [r7, #28]
        for (size_t i = n >> 2; i > 0; i--) {
   1cdd0:	687b      	ldr	r3, [r7, #4]
   1cdd2:	089b      	lsrs	r3, r3, #2
   1cdd4:	61bb      	str	r3, [r7, #24]
   1cdd6:	e007      	b.n	1cde8 <memset+0x38>
            *s32++ = 0;
   1cdd8:	69fb      	ldr	r3, [r7, #28]
   1cdda:	1d1a      	adds	r2, r3, #4
   1cddc:	61fa      	str	r2, [r7, #28]
   1cdde:	2200      	movs	r2, #0
   1cde0:	601a      	str	r2, [r3, #0]
        for (size_t i = n >> 2; i > 0; i--) {
   1cde2:	69bb      	ldr	r3, [r7, #24]
   1cde4:	3b01      	subs	r3, #1
   1cde6:	61bb      	str	r3, [r7, #24]
   1cde8:	69bb      	ldr	r3, [r7, #24]
   1cdea:	2b00      	cmp	r3, #0
   1cdec:	d1f4      	bne.n	1cdd8 <memset+0x28>
        }
        if (n & 2) {
   1cdee:	687b      	ldr	r3, [r7, #4]
   1cdf0:	f003 0302 	and.w	r3, r3, #2
   1cdf4:	2b00      	cmp	r3, #0
   1cdf6:	d005      	beq.n	1ce04 <memset+0x54>
            *((uint16_t*)s32) = 0;
   1cdf8:	69fb      	ldr	r3, [r7, #28]
   1cdfa:	2200      	movs	r2, #0
   1cdfc:	801a      	strh	r2, [r3, #0]
            s32 = (uint32_t*)((uint16_t*)s32 + 1);
   1cdfe:	69fb      	ldr	r3, [r7, #28]
   1ce00:	3302      	adds	r3, #2
   1ce02:	61fb      	str	r3, [r7, #28]
        }
        if (n & 1) {
   1ce04:	687b      	ldr	r3, [r7, #4]
   1ce06:	f003 0301 	and.w	r3, r3, #1
   1ce0a:	2b00      	cmp	r3, #0
   1ce0c:	d013      	beq.n	1ce36 <memset+0x86>
            *((uint8_t*)s32) = 0;
   1ce0e:	69fb      	ldr	r3, [r7, #28]
   1ce10:	2200      	movs	r2, #0
   1ce12:	701a      	strb	r2, [r3, #0]
    if (c == 0 && ((uintptr_t)s & 3) == 0) {
   1ce14:	e00f      	b.n	1ce36 <memset+0x86>
        }
    } else {
        uint8_t *s2 = s;
   1ce16:	68fb      	ldr	r3, [r7, #12]
   1ce18:	617b      	str	r3, [r7, #20]
        for (; n > 0; n--) {
   1ce1a:	e008      	b.n	1ce2e <memset+0x7e>
            *s2++ = c;
   1ce1c:	697b      	ldr	r3, [r7, #20]
   1ce1e:	1c5a      	adds	r2, r3, #1
   1ce20:	617a      	str	r2, [r7, #20]
   1ce22:	68ba      	ldr	r2, [r7, #8]
   1ce24:	b2d2      	uxtb	r2, r2
   1ce26:	701a      	strb	r2, [r3, #0]
        for (; n > 0; n--) {
   1ce28:	687b      	ldr	r3, [r7, #4]
   1ce2a:	3b01      	subs	r3, #1
   1ce2c:	607b      	str	r3, [r7, #4]
   1ce2e:	687b      	ldr	r3, [r7, #4]
   1ce30:	2b00      	cmp	r3, #0
   1ce32:	d1f3      	bne.n	1ce1c <memset+0x6c>
   1ce34:	e000      	b.n	1ce38 <memset+0x88>
    if (c == 0 && ((uintptr_t)s & 3) == 0) {
   1ce36:	bf00      	nop
        }
    }
    return s;
   1ce38:	68fb      	ldr	r3, [r7, #12]
}
   1ce3a:	4618      	mov	r0, r3
   1ce3c:	3724      	adds	r7, #36	; 0x24
   1ce3e:	46bd      	mov	sp, r7
   1ce40:	f85d 7b04 	ldr.w	r7, [sp], #4
   1ce44:	4770      	bx	lr
   1ce46:	bf00      	nop

0001ce48 <memcmp>:

int memcmp(const void *s1, const void *s2, size_t n) {
   1ce48:	b480      	push	{r7}
   1ce4a:	b089      	sub	sp, #36	; 0x24
   1ce4c:	af00      	add	r7, sp, #0
   1ce4e:	60f8      	str	r0, [r7, #12]
   1ce50:	60b9      	str	r1, [r7, #8]
   1ce52:	607a      	str	r2, [r7, #4]
    const uint8_t *s1_8 = s1;
   1ce54:	68fb      	ldr	r3, [r7, #12]
   1ce56:	61fb      	str	r3, [r7, #28]
    const uint8_t *s2_8 = s2;
   1ce58:	68bb      	ldr	r3, [r7, #8]
   1ce5a:	61bb      	str	r3, [r7, #24]
    while (n--) {
   1ce5c:	e016      	b.n	1ce8c <memcmp+0x44>
        char c1 = *s1_8++;
   1ce5e:	69fb      	ldr	r3, [r7, #28]
   1ce60:	1c5a      	adds	r2, r3, #1
   1ce62:	61fa      	str	r2, [r7, #28]
   1ce64:	781b      	ldrb	r3, [r3, #0]
   1ce66:	75fb      	strb	r3, [r7, #23]
        char c2 = *s2_8++;
   1ce68:	69bb      	ldr	r3, [r7, #24]
   1ce6a:	1c5a      	adds	r2, r3, #1
   1ce6c:	61ba      	str	r2, [r7, #24]
   1ce6e:	781b      	ldrb	r3, [r3, #0]
   1ce70:	75bb      	strb	r3, [r7, #22]
        if (c1 < c2) return -1;
   1ce72:	7dfa      	ldrb	r2, [r7, #23]
   1ce74:	7dbb      	ldrb	r3, [r7, #22]
   1ce76:	429a      	cmp	r2, r3
   1ce78:	d202      	bcs.n	1ce80 <memcmp+0x38>
   1ce7a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1ce7e:	e00b      	b.n	1ce98 <memcmp+0x50>
        else if (c1 > c2) return 1;
   1ce80:	7dfa      	ldrb	r2, [r7, #23]
   1ce82:	7dbb      	ldrb	r3, [r7, #22]
   1ce84:	429a      	cmp	r2, r3
   1ce86:	d901      	bls.n	1ce8c <memcmp+0x44>
   1ce88:	2301      	movs	r3, #1
   1ce8a:	e005      	b.n	1ce98 <memcmp+0x50>
    while (n--) {
   1ce8c:	687b      	ldr	r3, [r7, #4]
   1ce8e:	1e5a      	subs	r2, r3, #1
   1ce90:	607a      	str	r2, [r7, #4]
   1ce92:	2b00      	cmp	r3, #0
   1ce94:	d1e3      	bne.n	1ce5e <memcmp+0x16>
    }
    return 0;
   1ce96:	2300      	movs	r3, #0
}
   1ce98:	4618      	mov	r0, r3
   1ce9a:	3724      	adds	r7, #36	; 0x24
   1ce9c:	46bd      	mov	sp, r7
   1ce9e:	f85d 7b04 	ldr.w	r7, [sp], #4
   1cea2:	4770      	bx	lr

0001cea4 <memchr>:

void *memchr(const void *s, int c, size_t n) {
   1cea4:	b480      	push	{r7}
   1cea6:	b087      	sub	sp, #28
   1cea8:	af00      	add	r7, sp, #0
   1ceaa:	60f8      	str	r0, [r7, #12]
   1ceac:	60b9      	str	r1, [r7, #8]
   1ceae:	607a      	str	r2, [r7, #4]
    if (n != 0) {
   1ceb0:	687b      	ldr	r3, [r7, #4]
   1ceb2:	2b00      	cmp	r3, #0
   1ceb4:	d012      	beq.n	1cedc <memchr+0x38>
        const unsigned char *p = s;
   1ceb6:	68fb      	ldr	r3, [r7, #12]
   1ceb8:	617b      	str	r3, [r7, #20]

        do {
            if (*p++ == c)
   1ceba:	697b      	ldr	r3, [r7, #20]
   1cebc:	1c5a      	adds	r2, r3, #1
   1cebe:	617a      	str	r2, [r7, #20]
   1cec0:	781b      	ldrb	r3, [r3, #0]
   1cec2:	461a      	mov	r2, r3
   1cec4:	68bb      	ldr	r3, [r7, #8]
   1cec6:	429a      	cmp	r2, r3
   1cec8:	d102      	bne.n	1ced0 <memchr+0x2c>
                return ((void *)(p - 1));
   1ceca:	697b      	ldr	r3, [r7, #20]
   1cecc:	3b01      	subs	r3, #1
   1cece:	e006      	b.n	1cede <memchr+0x3a>
        } while (--n != 0);
   1ced0:	687b      	ldr	r3, [r7, #4]
   1ced2:	3b01      	subs	r3, #1
   1ced4:	607b      	str	r3, [r7, #4]
   1ced6:	687b      	ldr	r3, [r7, #4]
   1ced8:	2b00      	cmp	r3, #0
   1ceda:	d1ee      	bne.n	1ceba <memchr+0x16>
    }
    return 0;
   1cedc:	2300      	movs	r3, #0
}
   1cede:	4618      	mov	r0, r3
   1cee0:	371c      	adds	r7, #28
   1cee2:	46bd      	mov	sp, r7
   1cee4:	f85d 7b04 	ldr.w	r7, [sp], #4
   1cee8:	4770      	bx	lr
   1ceea:	bf00      	nop

0001ceec <strlen>:

size_t strlen(const char *str) {
   1ceec:	b480      	push	{r7}
   1ceee:	b085      	sub	sp, #20
   1cef0:	af00      	add	r7, sp, #0
   1cef2:	6078      	str	r0, [r7, #4]
    int len = 0;
   1cef4:	2300      	movs	r3, #0
   1cef6:	60fb      	str	r3, [r7, #12]
    for (const char *s = str; *s; s++) {
   1cef8:	687b      	ldr	r3, [r7, #4]
   1cefa:	60bb      	str	r3, [r7, #8]
   1cefc:	e005      	b.n	1cf0a <strlen+0x1e>
        len += 1;
   1cefe:	68fb      	ldr	r3, [r7, #12]
   1cf00:	3301      	adds	r3, #1
   1cf02:	60fb      	str	r3, [r7, #12]
    for (const char *s = str; *s; s++) {
   1cf04:	68bb      	ldr	r3, [r7, #8]
   1cf06:	3301      	adds	r3, #1
   1cf08:	60bb      	str	r3, [r7, #8]
   1cf0a:	68bb      	ldr	r3, [r7, #8]
   1cf0c:	781b      	ldrb	r3, [r3, #0]
   1cf0e:	2b00      	cmp	r3, #0
   1cf10:	d1f5      	bne.n	1cefe <strlen+0x12>
    }
    return len;
   1cf12:	68fb      	ldr	r3, [r7, #12]
}
   1cf14:	4618      	mov	r0, r3
   1cf16:	3714      	adds	r7, #20
   1cf18:	46bd      	mov	sp, r7
   1cf1a:	f85d 7b04 	ldr.w	r7, [sp], #4
   1cf1e:	4770      	bx	lr

0001cf20 <strcmp>:

int strcmp(const char *s1, const char *s2) {
   1cf20:	b480      	push	{r7}
   1cf22:	b085      	sub	sp, #20
   1cf24:	af00      	add	r7, sp, #0
   1cf26:	6078      	str	r0, [r7, #4]
   1cf28:	6039      	str	r1, [r7, #0]
    while (*s1 && *s2) {
   1cf2a:	e016      	b.n	1cf5a <strcmp+0x3a>
        char c1 = *s1++; // XXX UTF8 get char, next char
   1cf2c:	687b      	ldr	r3, [r7, #4]
   1cf2e:	1c5a      	adds	r2, r3, #1
   1cf30:	607a      	str	r2, [r7, #4]
   1cf32:	781b      	ldrb	r3, [r3, #0]
   1cf34:	73fb      	strb	r3, [r7, #15]
        char c2 = *s2++; // XXX UTF8 get char, next char
   1cf36:	683b      	ldr	r3, [r7, #0]
   1cf38:	1c5a      	adds	r2, r3, #1
   1cf3a:	603a      	str	r2, [r7, #0]
   1cf3c:	781b      	ldrb	r3, [r3, #0]
   1cf3e:	73bb      	strb	r3, [r7, #14]
        if (c1 < c2) return -1;
   1cf40:	7bfa      	ldrb	r2, [r7, #15]
   1cf42:	7bbb      	ldrb	r3, [r7, #14]
   1cf44:	429a      	cmp	r2, r3
   1cf46:	d202      	bcs.n	1cf4e <strcmp+0x2e>
   1cf48:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1cf4c:	e01b      	b.n	1cf86 <strcmp+0x66>
        else if (c1 > c2) return 1;
   1cf4e:	7bfa      	ldrb	r2, [r7, #15]
   1cf50:	7bbb      	ldrb	r3, [r7, #14]
   1cf52:	429a      	cmp	r2, r3
   1cf54:	d901      	bls.n	1cf5a <strcmp+0x3a>
   1cf56:	2301      	movs	r3, #1
   1cf58:	e015      	b.n	1cf86 <strcmp+0x66>
    while (*s1 && *s2) {
   1cf5a:	687b      	ldr	r3, [r7, #4]
   1cf5c:	781b      	ldrb	r3, [r3, #0]
   1cf5e:	2b00      	cmp	r3, #0
   1cf60:	d003      	beq.n	1cf6a <strcmp+0x4a>
   1cf62:	683b      	ldr	r3, [r7, #0]
   1cf64:	781b      	ldrb	r3, [r3, #0]
   1cf66:	2b00      	cmp	r3, #0
   1cf68:	d1e0      	bne.n	1cf2c <strcmp+0xc>
    }
    if (*s2) return -1;
   1cf6a:	683b      	ldr	r3, [r7, #0]
   1cf6c:	781b      	ldrb	r3, [r3, #0]
   1cf6e:	2b00      	cmp	r3, #0
   1cf70:	d002      	beq.n	1cf78 <strcmp+0x58>
   1cf72:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1cf76:	e006      	b.n	1cf86 <strcmp+0x66>
    else if (*s1) return 1;
   1cf78:	687b      	ldr	r3, [r7, #4]
   1cf7a:	781b      	ldrb	r3, [r3, #0]
   1cf7c:	2b00      	cmp	r3, #0
   1cf7e:	d001      	beq.n	1cf84 <strcmp+0x64>
   1cf80:	2301      	movs	r3, #1
   1cf82:	e000      	b.n	1cf86 <strcmp+0x66>
    else return 0;
   1cf84:	2300      	movs	r3, #0
}
   1cf86:	4618      	mov	r0, r3
   1cf88:	3714      	adds	r7, #20
   1cf8a:	46bd      	mov	sp, r7
   1cf8c:	f85d 7b04 	ldr.w	r7, [sp], #4
   1cf90:	4770      	bx	lr
   1cf92:	bf00      	nop

0001cf94 <strncmp>:

int strncmp(const char *s1, const char *s2, size_t n) {
   1cf94:	b480      	push	{r7}
   1cf96:	b087      	sub	sp, #28
   1cf98:	af00      	add	r7, sp, #0
   1cf9a:	60f8      	str	r0, [r7, #12]
   1cf9c:	60b9      	str	r1, [r7, #8]
   1cf9e:	607a      	str	r2, [r7, #4]
    while (*s1 && *s2 && n > 0) {
   1cfa0:	e019      	b.n	1cfd6 <strncmp+0x42>
        char c1 = *s1++; // XXX UTF8 get char, next char
   1cfa2:	68fb      	ldr	r3, [r7, #12]
   1cfa4:	1c5a      	adds	r2, r3, #1
   1cfa6:	60fa      	str	r2, [r7, #12]
   1cfa8:	781b      	ldrb	r3, [r3, #0]
   1cfaa:	75fb      	strb	r3, [r7, #23]
        char c2 = *s2++; // XXX UTF8 get char, next char
   1cfac:	68bb      	ldr	r3, [r7, #8]
   1cfae:	1c5a      	adds	r2, r3, #1
   1cfb0:	60ba      	str	r2, [r7, #8]
   1cfb2:	781b      	ldrb	r3, [r3, #0]
   1cfb4:	75bb      	strb	r3, [r7, #22]
        n--;
   1cfb6:	687b      	ldr	r3, [r7, #4]
   1cfb8:	3b01      	subs	r3, #1
   1cfba:	607b      	str	r3, [r7, #4]
        if (c1 < c2) return -1;
   1cfbc:	7dfa      	ldrb	r2, [r7, #23]
   1cfbe:	7dbb      	ldrb	r3, [r7, #22]
   1cfc0:	429a      	cmp	r2, r3
   1cfc2:	d202      	bcs.n	1cfca <strncmp+0x36>
   1cfc4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1cfc8:	e023      	b.n	1d012 <strncmp+0x7e>
        else if (c1 > c2) return 1;
   1cfca:	7dfa      	ldrb	r2, [r7, #23]
   1cfcc:	7dbb      	ldrb	r3, [r7, #22]
   1cfce:	429a      	cmp	r2, r3
   1cfd0:	d901      	bls.n	1cfd6 <strncmp+0x42>
   1cfd2:	2301      	movs	r3, #1
   1cfd4:	e01d      	b.n	1d012 <strncmp+0x7e>
    while (*s1 && *s2 && n > 0) {
   1cfd6:	68fb      	ldr	r3, [r7, #12]
   1cfd8:	781b      	ldrb	r3, [r3, #0]
   1cfda:	2b00      	cmp	r3, #0
   1cfdc:	d006      	beq.n	1cfec <strncmp+0x58>
   1cfde:	68bb      	ldr	r3, [r7, #8]
   1cfe0:	781b      	ldrb	r3, [r3, #0]
   1cfe2:	2b00      	cmp	r3, #0
   1cfe4:	d002      	beq.n	1cfec <strncmp+0x58>
   1cfe6:	687b      	ldr	r3, [r7, #4]
   1cfe8:	2b00      	cmp	r3, #0
   1cfea:	d1da      	bne.n	1cfa2 <strncmp+0xe>
    }
    if (n == 0) return 0;
   1cfec:	687b      	ldr	r3, [r7, #4]
   1cfee:	2b00      	cmp	r3, #0
   1cff0:	d101      	bne.n	1cff6 <strncmp+0x62>
   1cff2:	2300      	movs	r3, #0
   1cff4:	e00d      	b.n	1d012 <strncmp+0x7e>
    else if (*s2) return -1;
   1cff6:	68bb      	ldr	r3, [r7, #8]
   1cff8:	781b      	ldrb	r3, [r3, #0]
   1cffa:	2b00      	cmp	r3, #0
   1cffc:	d002      	beq.n	1d004 <strncmp+0x70>
   1cffe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1d002:	e006      	b.n	1d012 <strncmp+0x7e>
    else if (*s1) return 1;
   1d004:	68fb      	ldr	r3, [r7, #12]
   1d006:	781b      	ldrb	r3, [r3, #0]
   1d008:	2b00      	cmp	r3, #0
   1d00a:	d001      	beq.n	1d010 <strncmp+0x7c>
   1d00c:	2301      	movs	r3, #1
   1d00e:	e000      	b.n	1d012 <strncmp+0x7e>
    else return 0;
   1d010:	2300      	movs	r3, #0
}
   1d012:	4618      	mov	r0, r3
   1d014:	371c      	adds	r7, #28
   1d016:	46bd      	mov	sp, r7
   1d018:	f85d 7b04 	ldr.w	r7, [sp], #4
   1d01c:	4770      	bx	lr
   1d01e:	bf00      	nop

0001d020 <strcpy>:

char *strcpy(char *dest, const char *src) {
   1d020:	b480      	push	{r7}
   1d022:	b085      	sub	sp, #20
   1d024:	af00      	add	r7, sp, #0
   1d026:	6078      	str	r0, [r7, #4]
   1d028:	6039      	str	r1, [r7, #0]
    char *d = dest;
   1d02a:	687b      	ldr	r3, [r7, #4]
   1d02c:	60fb      	str	r3, [r7, #12]
    while (*src) {
   1d02e:	e007      	b.n	1d040 <strcpy+0x20>
        *d++ = *src++;
   1d030:	68fb      	ldr	r3, [r7, #12]
   1d032:	1c5a      	adds	r2, r3, #1
   1d034:	60fa      	str	r2, [r7, #12]
   1d036:	683a      	ldr	r2, [r7, #0]
   1d038:	1c51      	adds	r1, r2, #1
   1d03a:	6039      	str	r1, [r7, #0]
   1d03c:	7812      	ldrb	r2, [r2, #0]
   1d03e:	701a      	strb	r2, [r3, #0]
    while (*src) {
   1d040:	683b      	ldr	r3, [r7, #0]
   1d042:	781b      	ldrb	r3, [r3, #0]
   1d044:	2b00      	cmp	r3, #0
   1d046:	d1f3      	bne.n	1d030 <strcpy+0x10>
    }
    *d = '\0';
   1d048:	68fb      	ldr	r3, [r7, #12]
   1d04a:	2200      	movs	r2, #0
   1d04c:	701a      	strb	r2, [r3, #0]
    return dest;
   1d04e:	687b      	ldr	r3, [r7, #4]
}
   1d050:	4618      	mov	r0, r3
   1d052:	3714      	adds	r7, #20
   1d054:	46bd      	mov	sp, r7
   1d056:	f85d 7b04 	ldr.w	r7, [sp], #4
   1d05a:	4770      	bx	lr

0001d05c <stpcpy>:

// needed because gcc optimises strcpy + strcat to this
char *stpcpy(char *dest, const char *src) {
   1d05c:	b480      	push	{r7}
   1d05e:	b083      	sub	sp, #12
   1d060:	af00      	add	r7, sp, #0
   1d062:	6078      	str	r0, [r7, #4]
   1d064:	6039      	str	r1, [r7, #0]
    while (*src) {
   1d066:	e007      	b.n	1d078 <stpcpy+0x1c>
        *dest++ = *src++;
   1d068:	687b      	ldr	r3, [r7, #4]
   1d06a:	1c5a      	adds	r2, r3, #1
   1d06c:	607a      	str	r2, [r7, #4]
   1d06e:	683a      	ldr	r2, [r7, #0]
   1d070:	1c51      	adds	r1, r2, #1
   1d072:	6039      	str	r1, [r7, #0]
   1d074:	7812      	ldrb	r2, [r2, #0]
   1d076:	701a      	strb	r2, [r3, #0]
    while (*src) {
   1d078:	683b      	ldr	r3, [r7, #0]
   1d07a:	781b      	ldrb	r3, [r3, #0]
   1d07c:	2b00      	cmp	r3, #0
   1d07e:	d1f3      	bne.n	1d068 <stpcpy+0xc>
    }
    *dest = '\0';
   1d080:	687b      	ldr	r3, [r7, #4]
   1d082:	2200      	movs	r2, #0
   1d084:	701a      	strb	r2, [r3, #0]
    return dest;
   1d086:	687b      	ldr	r3, [r7, #4]
}
   1d088:	4618      	mov	r0, r3
   1d08a:	370c      	adds	r7, #12
   1d08c:	46bd      	mov	sp, r7
   1d08e:	f85d 7b04 	ldr.w	r7, [sp], #4
   1d092:	4770      	bx	lr

0001d094 <strcat>:

char *strcat(char *dest, const char *src) {
   1d094:	b480      	push	{r7}
   1d096:	b085      	sub	sp, #20
   1d098:	af00      	add	r7, sp, #0
   1d09a:	6078      	str	r0, [r7, #4]
   1d09c:	6039      	str	r1, [r7, #0]
    char *d = dest;
   1d09e:	687b      	ldr	r3, [r7, #4]
   1d0a0:	60fb      	str	r3, [r7, #12]
    while (*d) {
   1d0a2:	e002      	b.n	1d0aa <strcat+0x16>
        d++;
   1d0a4:	68fb      	ldr	r3, [r7, #12]
   1d0a6:	3301      	adds	r3, #1
   1d0a8:	60fb      	str	r3, [r7, #12]
    while (*d) {
   1d0aa:	68fb      	ldr	r3, [r7, #12]
   1d0ac:	781b      	ldrb	r3, [r3, #0]
   1d0ae:	2b00      	cmp	r3, #0
   1d0b0:	d1f8      	bne.n	1d0a4 <strcat+0x10>
    }
    while (*src) {
   1d0b2:	e007      	b.n	1d0c4 <strcat+0x30>
        *d++ = *src++;
   1d0b4:	68fb      	ldr	r3, [r7, #12]
   1d0b6:	1c5a      	adds	r2, r3, #1
   1d0b8:	60fa      	str	r2, [r7, #12]
   1d0ba:	683a      	ldr	r2, [r7, #0]
   1d0bc:	1c51      	adds	r1, r2, #1
   1d0be:	6039      	str	r1, [r7, #0]
   1d0c0:	7812      	ldrb	r2, [r2, #0]
   1d0c2:	701a      	strb	r2, [r3, #0]
    while (*src) {
   1d0c4:	683b      	ldr	r3, [r7, #0]
   1d0c6:	781b      	ldrb	r3, [r3, #0]
   1d0c8:	2b00      	cmp	r3, #0
   1d0ca:	d1f3      	bne.n	1d0b4 <strcat+0x20>
    }
    *d = '\0';
   1d0cc:	68fb      	ldr	r3, [r7, #12]
   1d0ce:	2200      	movs	r2, #0
   1d0d0:	701a      	strb	r2, [r3, #0]
    return dest;
   1d0d2:	687b      	ldr	r3, [r7, #4]
}
   1d0d4:	4618      	mov	r0, r3
   1d0d6:	3714      	adds	r7, #20
   1d0d8:	46bd      	mov	sp, r7
   1d0da:	f85d 7b04 	ldr.w	r7, [sp], #4
   1d0de:	4770      	bx	lr

0001d0e0 <strchr>:

// Public Domain implementation of strchr from:
// http://en.wikibooks.org/wiki/C_Programming/Strings#The_strchr_function
char *strchr(const char *s, int c)
{
   1d0e0:	b480      	push	{r7}
   1d0e2:	b083      	sub	sp, #12
   1d0e4:	af00      	add	r7, sp, #0
   1d0e6:	6078      	str	r0, [r7, #4]
   1d0e8:	6039      	str	r1, [r7, #0]
    /* Scan s for the character.  When this loop is finished,
       s will either point to the end of the string or the
       character we were looking for.  */
    while (*s != '\0' && *s != (char)c)
   1d0ea:	e002      	b.n	1d0f2 <strchr+0x12>
        s++;
   1d0ec:	687b      	ldr	r3, [r7, #4]
   1d0ee:	3301      	adds	r3, #1
   1d0f0:	607b      	str	r3, [r7, #4]
    while (*s != '\0' && *s != (char)c)
   1d0f2:	687b      	ldr	r3, [r7, #4]
   1d0f4:	781b      	ldrb	r3, [r3, #0]
   1d0f6:	2b00      	cmp	r3, #0
   1d0f8:	d005      	beq.n	1d106 <strchr+0x26>
   1d0fa:	687b      	ldr	r3, [r7, #4]
   1d0fc:	781a      	ldrb	r2, [r3, #0]
   1d0fe:	683b      	ldr	r3, [r7, #0]
   1d100:	b2db      	uxtb	r3, r3
   1d102:	429a      	cmp	r2, r3
   1d104:	d1f2      	bne.n	1d0ec <strchr+0xc>
    return ((*s == c) ? (char *) s : 0);
   1d106:	687b      	ldr	r3, [r7, #4]
   1d108:	781b      	ldrb	r3, [r3, #0]
   1d10a:	461a      	mov	r2, r3
   1d10c:	683b      	ldr	r3, [r7, #0]
   1d10e:	429a      	cmp	r2, r3
   1d110:	d101      	bne.n	1d116 <strchr+0x36>
   1d112:	687b      	ldr	r3, [r7, #4]
   1d114:	e000      	b.n	1d118 <strchr+0x38>
   1d116:	2300      	movs	r3, #0
}
   1d118:	4618      	mov	r0, r3
   1d11a:	370c      	adds	r7, #12
   1d11c:	46bd      	mov	sp, r7
   1d11e:	f85d 7b04 	ldr.w	r7, [sp], #4
   1d122:	4770      	bx	lr

0001d124 <strstr>:


// Public Domain implementation of strstr from:
// http://en.wikibooks.org/wiki/C_Programming/Strings#The_strstr_function
char *strstr(const char *haystack, const char *needle)
{
   1d124:	b580      	push	{r7, lr}
   1d126:	b084      	sub	sp, #16
   1d128:	af00      	add	r7, sp, #0
   1d12a:	6078      	str	r0, [r7, #4]
   1d12c:	6039      	str	r1, [r7, #0]
    size_t needlelen;
    /* Check for the null needle case.  */
    if (*needle == '\0')
   1d12e:	683b      	ldr	r3, [r7, #0]
   1d130:	781b      	ldrb	r3, [r3, #0]
   1d132:	2b00      	cmp	r3, #0
   1d134:	d101      	bne.n	1d13a <strstr+0x16>
        return (char *) haystack;
   1d136:	687b      	ldr	r3, [r7, #4]
   1d138:	e01c      	b.n	1d174 <strstr+0x50>
    needlelen = strlen(needle);
   1d13a:	6838      	ldr	r0, [r7, #0]
   1d13c:	f7ff fed6 	bl	1ceec <strlen>
   1d140:	60f8      	str	r0, [r7, #12]
    for (; (haystack = strchr(haystack, *needle)) != 0; haystack++)
   1d142:	e00c      	b.n	1d15e <strstr+0x3a>
        if (strncmp(haystack, needle, needlelen) == 0)
   1d144:	68fa      	ldr	r2, [r7, #12]
   1d146:	6839      	ldr	r1, [r7, #0]
   1d148:	6878      	ldr	r0, [r7, #4]
   1d14a:	f7ff ff23 	bl	1cf94 <strncmp>
   1d14e:	4603      	mov	r3, r0
   1d150:	2b00      	cmp	r3, #0
   1d152:	d101      	bne.n	1d158 <strstr+0x34>
            return (char *) haystack;
   1d154:	687b      	ldr	r3, [r7, #4]
   1d156:	e00d      	b.n	1d174 <strstr+0x50>
    for (; (haystack = strchr(haystack, *needle)) != 0; haystack++)
   1d158:	687b      	ldr	r3, [r7, #4]
   1d15a:	3301      	adds	r3, #1
   1d15c:	607b      	str	r3, [r7, #4]
   1d15e:	683b      	ldr	r3, [r7, #0]
   1d160:	781b      	ldrb	r3, [r3, #0]
   1d162:	4619      	mov	r1, r3
   1d164:	6878      	ldr	r0, [r7, #4]
   1d166:	f7ff ffbb 	bl	1d0e0 <strchr>
   1d16a:	6078      	str	r0, [r7, #4]
   1d16c:	687b      	ldr	r3, [r7, #4]
   1d16e:	2b00      	cmp	r3, #0
   1d170:	d1e8      	bne.n	1d144 <strstr+0x20>
    return 0;
   1d172:	2300      	movs	r3, #0
}
   1d174:	4618      	mov	r0, r3
   1d176:	3710      	adds	r7, #16
   1d178:	46bd      	mov	sp, r7
   1d17a:	bd80      	pop	{r7, pc}

0001d17c <vstr_len>:
   1d17c:	b480      	push	{r7}
   1d17e:	b083      	sub	sp, #12
   1d180:	af00      	add	r7, sp, #0
   1d182:	6078      	str	r0, [r7, #4]
   1d184:	687b      	ldr	r3, [r7, #4]
   1d186:	685b      	ldr	r3, [r3, #4]
   1d188:	4618      	mov	r0, r3
   1d18a:	370c      	adds	r7, #12
   1d18c:	46bd      	mov	sp, r7
   1d18e:	f85d 7b04 	ldr.w	r7, [sp], #4
   1d192:	4770      	bx	lr

0001d194 <readline_init0>:

#define READLINE_HIST_SIZE (MP_ARRAY_SIZE(MP_STATE_PORT(readline_hist)))

enum { ESEQ_NONE, ESEQ_ESC, ESEQ_ESC_BRACKET, ESEQ_ESC_BRACKET_DIGIT, ESEQ_ESC_O };

void readline_init0(void) {
   1d194:	b580      	push	{r7, lr}
   1d196:	af00      	add	r7, sp, #0
    memset(MP_STATE_PORT(readline_hist), 0, READLINE_HIST_SIZE * sizeof(const char*));
   1d198:	2220      	movs	r2, #32
   1d19a:	2100      	movs	r1, #0
   1d19c:	4802      	ldr	r0, [pc, #8]	; (1d1a8 <readline_init0+0x14>)
   1d19e:	f7ff fe07 	bl	1cdb0 <memset>
}
   1d1a2:	bf00      	nop
   1d1a4:	bd80      	pop	{r7, pc}
   1d1a6:	bf00      	nop
   1d1a8:	20001358 	.word	0x20001358

0001d1ac <str_dup_maybe>:

STATIC char *str_dup_maybe(const char *str) {
   1d1ac:	b580      	push	{r7, lr}
   1d1ae:	b084      	sub	sp, #16
   1d1b0:	af00      	add	r7, sp, #0
   1d1b2:	6078      	str	r0, [r7, #4]
    uint32_t len = strlen(str);
   1d1b4:	6878      	ldr	r0, [r7, #4]
   1d1b6:	f7ff fe99 	bl	1ceec <strlen>
   1d1ba:	60f8      	str	r0, [r7, #12]
    char *s2 = m_new_maybe(char, len + 1);
   1d1bc:	68fb      	ldr	r3, [r7, #12]
   1d1be:	3301      	adds	r3, #1
   1d1c0:	4618      	mov	r0, r3
   1d1c2:	f7e3 f8c3 	bl	34c <m_malloc_maybe>
   1d1c6:	60b8      	str	r0, [r7, #8]
    if (s2 == NULL) {
   1d1c8:	68bb      	ldr	r3, [r7, #8]
   1d1ca:	2b00      	cmp	r3, #0
   1d1cc:	d101      	bne.n	1d1d2 <str_dup_maybe+0x26>
        return NULL;
   1d1ce:	2300      	movs	r3, #0
   1d1d0:	e007      	b.n	1d1e2 <str_dup_maybe+0x36>
    }
    memcpy(s2, str, len + 1);
   1d1d2:	68fb      	ldr	r3, [r7, #12]
   1d1d4:	3301      	adds	r3, #1
   1d1d6:	461a      	mov	r2, r3
   1d1d8:	6879      	ldr	r1, [r7, #4]
   1d1da:	68b8      	ldr	r0, [r7, #8]
   1d1dc:	f7ff fd4c 	bl	1cc78 <memcpy>
    return s2;
   1d1e0:	68bb      	ldr	r3, [r7, #8]
}
   1d1e2:	4618      	mov	r0, r3
   1d1e4:	3710      	adds	r7, #16
   1d1e6:	46bd      	mov	sp, r7
   1d1e8:	bd80      	pop	{r7, pc}
   1d1ea:	bf00      	nop

0001d1ec <mp_hal_move_cursor_back>:
#define MICROPY_HAL_HAS_VT100 (1)
#endif

// ...and provide the implementation using them
#if MICROPY_HAL_HAS_VT100
STATIC void mp_hal_move_cursor_back(uint pos) {
   1d1ec:	b580      	push	{r7, lr}
   1d1ee:	b086      	sub	sp, #24
   1d1f0:	af00      	add	r7, sp, #0
   1d1f2:	6078      	str	r0, [r7, #4]
    if (pos <= 4) {
   1d1f4:	687b      	ldr	r3, [r7, #4]
   1d1f6:	2b04      	cmp	r3, #4
   1d1f8:	d804      	bhi.n	1d204 <mp_hal_move_cursor_back+0x18>
        // fast path for most common case of 1 step back
        mp_hal_stdout_tx_strn("\b\b\b\b", pos);
   1d1fa:	6879      	ldr	r1, [r7, #4]
   1d1fc:	4810      	ldr	r0, [pc, #64]	; (1d240 <mp_hal_move_cursor_back+0x54>)
   1d1fe:	f7fe fb8d 	bl	1b91c <mp_hal_stdout_tx_strn>
        if (n > 0) {
            vt100_command[n] = 'D'; // replace null char
            mp_hal_stdout_tx_strn(vt100_command, n + 1);
        }
    }
}
   1d202:	e019      	b.n	1d238 <mp_hal_move_cursor_back+0x4c>
        int n = snprintf(&vt100_command[0], sizeof(vt100_command), "\x1b[%u", pos);
   1d204:	f107 000c 	add.w	r0, r7, #12
   1d208:	687b      	ldr	r3, [r7, #4]
   1d20a:	4a0e      	ldr	r2, [pc, #56]	; (1d244 <mp_hal_move_cursor_back+0x58>)
   1d20c:	2106      	movs	r1, #6
   1d20e:	f7fe f99f 	bl	1b550 <snprintf>
   1d212:	6178      	str	r0, [r7, #20]
        if (n > 0) {
   1d214:	697b      	ldr	r3, [r7, #20]
   1d216:	2b00      	cmp	r3, #0
   1d218:	dd0e      	ble.n	1d238 <mp_hal_move_cursor_back+0x4c>
            vt100_command[n] = 'D'; // replace null char
   1d21a:	f107 020c 	add.w	r2, r7, #12
   1d21e:	697b      	ldr	r3, [r7, #20]
   1d220:	4413      	add	r3, r2
   1d222:	2244      	movs	r2, #68	; 0x44
   1d224:	701a      	strb	r2, [r3, #0]
            mp_hal_stdout_tx_strn(vt100_command, n + 1);
   1d226:	697b      	ldr	r3, [r7, #20]
   1d228:	3301      	adds	r3, #1
   1d22a:	461a      	mov	r2, r3
   1d22c:	f107 030c 	add.w	r3, r7, #12
   1d230:	4611      	mov	r1, r2
   1d232:	4618      	mov	r0, r3
   1d234:	f7fe fb72 	bl	1b91c <mp_hal_stdout_tx_strn>
}
   1d238:	bf00      	nop
   1d23a:	3718      	adds	r7, #24
   1d23c:	46bd      	mov	sp, r7
   1d23e:	bd80      	pop	{r7, pc}
   1d240:	00025d74 	.word	0x00025d74
   1d244:	00025d7c 	.word	0x00025d7c

0001d248 <mp_hal_erase_line_from_cursor>:

STATIC void mp_hal_erase_line_from_cursor(uint n_chars_to_erase) {
   1d248:	b580      	push	{r7, lr}
   1d24a:	b082      	sub	sp, #8
   1d24c:	af00      	add	r7, sp, #0
   1d24e:	6078      	str	r0, [r7, #4]
    (void)n_chars_to_erase;
    mp_hal_stdout_tx_strn("\x1b[K", 3);
   1d250:	2103      	movs	r1, #3
   1d252:	4803      	ldr	r0, [pc, #12]	; (1d260 <mp_hal_erase_line_from_cursor+0x18>)
   1d254:	f7fe fb62 	bl	1b91c <mp_hal_stdout_tx_strn>
}
   1d258:	bf00      	nop
   1d25a:	3708      	adds	r7, #8
   1d25c:	46bd      	mov	sp, r7
   1d25e:	bd80      	pop	{r7, pc}
   1d260:	00025d84 	.word	0x00025d84

0001d264 <readline_process_char>:
    const char *prompt;
} readline_t;

STATIC readline_t rl;

int readline_process_char(int c) {
   1d264:	b580      	push	{r7, lr}
   1d266:	b08c      	sub	sp, #48	; 0x30
   1d268:	af00      	add	r7, sp, #0
   1d26a:	6078      	str	r0, [r7, #4]
    size_t last_line_len = rl.line->len;
   1d26c:	4b8c      	ldr	r3, [pc, #560]	; (1d4a0 <readline_process_char+0x23c>)
   1d26e:	681b      	ldr	r3, [r3, #0]
   1d270:	685b      	ldr	r3, [r3, #4]
   1d272:	617b      	str	r3, [r7, #20]
    int redraw_step_back = 0;
   1d274:	2300      	movs	r3, #0
   1d276:	62fb      	str	r3, [r7, #44]	; 0x2c
    bool redraw_from_cursor = false;
   1d278:	2300      	movs	r3, #0
   1d27a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    int redraw_step_forward = 0;
   1d27e:	2300      	movs	r3, #0
   1d280:	627b      	str	r3, [r7, #36]	; 0x24
    if (rl.escape_seq == ESEQ_NONE) {
   1d282:	4b87      	ldr	r3, [pc, #540]	; (1d4a0 <readline_process_char+0x23c>)
   1d284:	689b      	ldr	r3, [r3, #8]
   1d286:	2b00      	cmp	r3, #0
   1d288:	f040 80e1 	bne.w	1d44e <readline_process_char+0x1ea>
        if (CHAR_CTRL_A <= c && c <= CHAR_CTRL_E && vstr_len(rl.line) == rl.orig_line_len) {
   1d28c:	687b      	ldr	r3, [r7, #4]
   1d28e:	2b00      	cmp	r3, #0
   1d290:	dd0e      	ble.n	1d2b0 <readline_process_char+0x4c>
   1d292:	687b      	ldr	r3, [r7, #4]
   1d294:	2b05      	cmp	r3, #5
   1d296:	dc0b      	bgt.n	1d2b0 <readline_process_char+0x4c>
   1d298:	4b81      	ldr	r3, [pc, #516]	; (1d4a0 <readline_process_char+0x23c>)
   1d29a:	681b      	ldr	r3, [r3, #0]
   1d29c:	4618      	mov	r0, r3
   1d29e:	f7ff ff6d 	bl	1d17c <vstr_len>
   1d2a2:	4602      	mov	r2, r0
   1d2a4:	4b7e      	ldr	r3, [pc, #504]	; (1d4a0 <readline_process_char+0x23c>)
   1d2a6:	685b      	ldr	r3, [r3, #4]
   1d2a8:	429a      	cmp	r2, r3
   1d2aa:	d101      	bne.n	1d2b0 <readline_process_char+0x4c>
            // control character with empty line
            return c;
   1d2ac:	687b      	ldr	r3, [r7, #4]
   1d2ae:	e245      	b.n	1d73c <readline_process_char+0x4d8>
        } else if (c == CHAR_CTRL_A) {
   1d2b0:	687b      	ldr	r3, [r7, #4]
   1d2b2:	2b01      	cmp	r3, #1
   1d2b4:	f000 819e 	beq.w	1d5f4 <readline_process_char+0x390>
        #if MICROPY_REPL_EMACS_KEYS
        } else if (c == CHAR_CTRL_B) {
            // CTRL-B with non-empty line is go-back-one-char
            goto left_arrow_key;
        #endif
        } else if (c == CHAR_CTRL_C) {
   1d2b8:	687b      	ldr	r3, [r7, #4]
   1d2ba:	2b03      	cmp	r3, #3
   1d2bc:	d101      	bne.n	1d2c2 <readline_process_char+0x5e>
            // CTRL-C with non-empty line is cancel
            return c;
   1d2be:	687b      	ldr	r3, [r7, #4]
   1d2c0:	e23c      	b.n	1d73c <readline_process_char+0x4d8>
        #if MICROPY_REPL_EMACS_KEYS
        } else if (c == CHAR_CTRL_D) {
            // CTRL-D with non-empty line is delete-at-cursor
            goto delete_key;
        #endif
        } else if (c == CHAR_CTRL_E) {
   1d2c2:	687b      	ldr	r3, [r7, #4]
   1d2c4:	2b05      	cmp	r3, #5
   1d2c6:	f000 81aa 	beq.w	1d61e <readline_process_char+0x3ba>
            vstr_cut_out_bytes(rl.line, rl.orig_line_len, rl.cursor_pos - rl.orig_line_len);
            // set redraw parameters
            redraw_step_back = rl.cursor_pos - rl.orig_line_len;
            redraw_from_cursor = true;
        #endif
        } else if (c == '\r') {
   1d2ca:	687b      	ldr	r3, [r7, #4]
   1d2cc:	2b0d      	cmp	r3, #13
   1d2ce:	d110      	bne.n	1d2f2 <readline_process_char+0x8e>
            // newline
            mp_hal_stdout_tx_str("\r\n");
   1d2d0:	4874      	ldr	r0, [pc, #464]	; (1d4a4 <readline_process_char+0x240>)
   1d2d2:	f7ff fa7d 	bl	1c7d0 <mp_hal_stdout_tx_str>
            readline_push_history(vstr_null_terminated_str(rl.line) + rl.orig_line_len);
   1d2d6:	4b72      	ldr	r3, [pc, #456]	; (1d4a0 <readline_process_char+0x23c>)
   1d2d8:	681b      	ldr	r3, [r3, #0]
   1d2da:	4618      	mov	r0, r3
   1d2dc:	f7e4 fa06 	bl	16ec <vstr_null_terminated_str>
   1d2e0:	4602      	mov	r2, r0
   1d2e2:	4b6f      	ldr	r3, [pc, #444]	; (1d4a0 <readline_process_char+0x23c>)
   1d2e4:	685b      	ldr	r3, [r3, #4]
   1d2e6:	4413      	add	r3, r2
   1d2e8:	4618      	mov	r0, r3
   1d2ea:	f000 fb19 	bl	1d920 <readline_push_history>
            return 0;
   1d2ee:	2300      	movs	r3, #0
   1d2f0:	e224      	b.n	1d73c <readline_process_char+0x4d8>
        } else if (c == 27) {
   1d2f2:	687b      	ldr	r3, [r7, #4]
   1d2f4:	2b1b      	cmp	r3, #27
   1d2f6:	d103      	bne.n	1d300 <readline_process_char+0x9c>
            // escape sequence
            rl.escape_seq = ESEQ_ESC;
   1d2f8:	4b69      	ldr	r3, [pc, #420]	; (1d4a0 <readline_process_char+0x23c>)
   1d2fa:	2201      	movs	r2, #1
   1d2fc:	609a      	str	r2, [r3, #8]
   1d2fe:	e1c3      	b.n	1d688 <readline_process_char+0x424>
        } else if (c == 8 || c == 127) {
   1d300:	687b      	ldr	r3, [r7, #4]
   1d302:	2b08      	cmp	r3, #8
   1d304:	d002      	beq.n	1d30c <readline_process_char+0xa8>
   1d306:	687b      	ldr	r3, [r7, #4]
   1d308:	2b7f      	cmp	r3, #127	; 0x7f
   1d30a:	d13a      	bne.n	1d382 <readline_process_char+0x11e>
            // backspace/delete
            if (rl.cursor_pos > rl.orig_line_len) {
   1d30c:	4b64      	ldr	r3, [pc, #400]	; (1d4a0 <readline_process_char+0x23c>)
   1d30e:	691a      	ldr	r2, [r3, #16]
   1d310:	4b63      	ldr	r3, [pc, #396]	; (1d4a0 <readline_process_char+0x23c>)
   1d312:	685b      	ldr	r3, [r3, #4]
   1d314:	429a      	cmp	r2, r3
   1d316:	f240 81b7 	bls.w	1d688 <readline_process_char+0x424>
                // work out how many chars to backspace
                #if MICROPY_REPL_AUTO_INDENT
                int nspace = 0;
   1d31a:	2300      	movs	r3, #0
   1d31c:	623b      	str	r3, [r7, #32]
                for (size_t i = rl.orig_line_len; i < rl.cursor_pos; i++) {
   1d31e:	4b60      	ldr	r3, [pc, #384]	; (1d4a0 <readline_process_char+0x23c>)
   1d320:	685b      	ldr	r3, [r3, #4]
   1d322:	61fb      	str	r3, [r7, #28]
   1d324:	e010      	b.n	1d348 <readline_process_char+0xe4>
                    if (rl.line->buf[i] != ' ') {
   1d326:	4b5e      	ldr	r3, [pc, #376]	; (1d4a0 <readline_process_char+0x23c>)
   1d328:	681b      	ldr	r3, [r3, #0]
   1d32a:	689a      	ldr	r2, [r3, #8]
   1d32c:	69fb      	ldr	r3, [r7, #28]
   1d32e:	4413      	add	r3, r2
   1d330:	781b      	ldrb	r3, [r3, #0]
   1d332:	2b20      	cmp	r3, #32
   1d334:	d002      	beq.n	1d33c <readline_process_char+0xd8>
                        nspace = 0;
   1d336:	2300      	movs	r3, #0
   1d338:	623b      	str	r3, [r7, #32]
                        break;
   1d33a:	e00a      	b.n	1d352 <readline_process_char+0xee>
                    }
                    nspace += 1;
   1d33c:	6a3b      	ldr	r3, [r7, #32]
   1d33e:	3301      	adds	r3, #1
   1d340:	623b      	str	r3, [r7, #32]
                for (size_t i = rl.orig_line_len; i < rl.cursor_pos; i++) {
   1d342:	69fb      	ldr	r3, [r7, #28]
   1d344:	3301      	adds	r3, #1
   1d346:	61fb      	str	r3, [r7, #28]
   1d348:	4b55      	ldr	r3, [pc, #340]	; (1d4a0 <readline_process_char+0x23c>)
   1d34a:	691a      	ldr	r2, [r3, #16]
   1d34c:	69fb      	ldr	r3, [r7, #28]
   1d34e:	429a      	cmp	r2, r3
   1d350:	d8e9      	bhi.n	1d326 <readline_process_char+0xc2>
                }
                if (nspace < 4) {
   1d352:	6a3b      	ldr	r3, [r7, #32]
   1d354:	2b03      	cmp	r3, #3
   1d356:	dc02      	bgt.n	1d35e <readline_process_char+0xfa>
                    nspace = 1;
   1d358:	2301      	movs	r3, #1
   1d35a:	623b      	str	r3, [r7, #32]
   1d35c:	e001      	b.n	1d362 <readline_process_char+0xfe>
                } else {
                    nspace = 4;
   1d35e:	2304      	movs	r3, #4
   1d360:	623b      	str	r3, [r7, #32]
                #else
                int nspace = 1;
                #endif

                // do the backspace
                vstr_cut_out_bytes(rl.line, rl.cursor_pos - nspace, nspace);
   1d362:	4b4f      	ldr	r3, [pc, #316]	; (1d4a0 <readline_process_char+0x23c>)
   1d364:	6818      	ldr	r0, [r3, #0]
   1d366:	4b4e      	ldr	r3, [pc, #312]	; (1d4a0 <readline_process_char+0x23c>)
   1d368:	691a      	ldr	r2, [r3, #16]
   1d36a:	6a3b      	ldr	r3, [r7, #32]
   1d36c:	1ad3      	subs	r3, r2, r3
   1d36e:	6a3a      	ldr	r2, [r7, #32]
   1d370:	4619      	mov	r1, r3
   1d372:	f7e4 faad 	bl	18d0 <vstr_cut_out_bytes>
                // set redraw parameters
                redraw_step_back = nspace;
   1d376:	6a3b      	ldr	r3, [r7, #32]
   1d378:	62fb      	str	r3, [r7, #44]	; 0x2c
                redraw_from_cursor = true;
   1d37a:	2301      	movs	r3, #1
   1d37c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            if (rl.cursor_pos > rl.orig_line_len) {
   1d380:	e182      	b.n	1d688 <readline_process_char+0x424>
            }
        #if MICROPY_HELPER_REPL
        } else if (c == 9) {
   1d382:	687b      	ldr	r3, [r7, #4]
   1d384:	2b09      	cmp	r3, #9
   1d386:	d14c      	bne.n	1d422 <readline_process_char+0x1be>
            // tab magic
            const char *compl_str;
            size_t compl_len = mp_repl_autocomplete(rl.line->buf + rl.orig_line_len, rl.cursor_pos - rl.orig_line_len, &mp_plat_print, &compl_str);
   1d388:	4b45      	ldr	r3, [pc, #276]	; (1d4a0 <readline_process_char+0x23c>)
   1d38a:	681b      	ldr	r3, [r3, #0]
   1d38c:	689a      	ldr	r2, [r3, #8]
   1d38e:	4b44      	ldr	r3, [pc, #272]	; (1d4a0 <readline_process_char+0x23c>)
   1d390:	685b      	ldr	r3, [r3, #4]
   1d392:	18d0      	adds	r0, r2, r3
   1d394:	4b42      	ldr	r3, [pc, #264]	; (1d4a0 <readline_process_char+0x23c>)
   1d396:	691a      	ldr	r2, [r3, #16]
   1d398:	4b41      	ldr	r3, [pc, #260]	; (1d4a0 <readline_process_char+0x23c>)
   1d39a:	685b      	ldr	r3, [r3, #4]
   1d39c:	1ad1      	subs	r1, r2, r3
   1d39e:	f107 030c 	add.w	r3, r7, #12
   1d3a2:	4a41      	ldr	r2, [pc, #260]	; (1d4a8 <readline_process_char+0x244>)
   1d3a4:	f7fd fe2c 	bl	1b000 <mp_repl_autocomplete>
   1d3a8:	6138      	str	r0, [r7, #16]
            if (compl_len == 0) {
   1d3aa:	693b      	ldr	r3, [r7, #16]
   1d3ac:	2b00      	cmp	r3, #0
   1d3ae:	f000 816b 	beq.w	1d688 <readline_process_char+0x424>
                // no match
            } else if (compl_len == (size_t)(-1)) {
   1d3b2:	693b      	ldr	r3, [r7, #16]
   1d3b4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   1d3b8:	d116      	bne.n	1d3e8 <readline_process_char+0x184>
                // many matches
                mp_hal_stdout_tx_str(rl.prompt);
   1d3ba:	4b39      	ldr	r3, [pc, #228]	; (1d4a0 <readline_process_char+0x23c>)
   1d3bc:	699b      	ldr	r3, [r3, #24]
   1d3be:	4618      	mov	r0, r3
   1d3c0:	f7ff fa06 	bl	1c7d0 <mp_hal_stdout_tx_str>
                mp_hal_stdout_tx_strn(rl.line->buf + rl.orig_line_len, rl.cursor_pos - rl.orig_line_len);
   1d3c4:	4b36      	ldr	r3, [pc, #216]	; (1d4a0 <readline_process_char+0x23c>)
   1d3c6:	681b      	ldr	r3, [r3, #0]
   1d3c8:	689a      	ldr	r2, [r3, #8]
   1d3ca:	4b35      	ldr	r3, [pc, #212]	; (1d4a0 <readline_process_char+0x23c>)
   1d3cc:	685b      	ldr	r3, [r3, #4]
   1d3ce:	18d0      	adds	r0, r2, r3
   1d3d0:	4b33      	ldr	r3, [pc, #204]	; (1d4a0 <readline_process_char+0x23c>)
   1d3d2:	691a      	ldr	r2, [r3, #16]
   1d3d4:	4b32      	ldr	r3, [pc, #200]	; (1d4a0 <readline_process_char+0x23c>)
   1d3d6:	685b      	ldr	r3, [r3, #4]
   1d3d8:	1ad3      	subs	r3, r2, r3
   1d3da:	4619      	mov	r1, r3
   1d3dc:	f7fe fa9e 	bl	1b91c <mp_hal_stdout_tx_strn>
                redraw_from_cursor = true;
   1d3e0:	2301      	movs	r3, #1
   1d3e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
   1d3e6:	e14f      	b.n	1d688 <readline_process_char+0x424>
            } else {
                // one match
                for (size_t i = 0; i < compl_len; ++i) {
   1d3e8:	2300      	movs	r3, #0
   1d3ea:	61bb      	str	r3, [r7, #24]
   1d3ec:	e00f      	b.n	1d40e <readline_process_char+0x1aa>
                    vstr_ins_byte(rl.line, rl.cursor_pos + i, *compl_str++);
   1d3ee:	4b2c      	ldr	r3, [pc, #176]	; (1d4a0 <readline_process_char+0x23c>)
   1d3f0:	6818      	ldr	r0, [r3, #0]
   1d3f2:	4b2b      	ldr	r3, [pc, #172]	; (1d4a0 <readline_process_char+0x23c>)
   1d3f4:	691a      	ldr	r2, [r3, #16]
   1d3f6:	69bb      	ldr	r3, [r7, #24]
   1d3f8:	18d1      	adds	r1, r2, r3
   1d3fa:	68fb      	ldr	r3, [r7, #12]
   1d3fc:	1c5a      	adds	r2, r3, #1
   1d3fe:	60fa      	str	r2, [r7, #12]
   1d400:	781b      	ldrb	r3, [r3, #0]
   1d402:	461a      	mov	r2, r3
   1d404:	f7e4 fa14 	bl	1830 <vstr_ins_byte>
                for (size_t i = 0; i < compl_len; ++i) {
   1d408:	69bb      	ldr	r3, [r7, #24]
   1d40a:	3301      	adds	r3, #1
   1d40c:	61bb      	str	r3, [r7, #24]
   1d40e:	69ba      	ldr	r2, [r7, #24]
   1d410:	693b      	ldr	r3, [r7, #16]
   1d412:	429a      	cmp	r2, r3
   1d414:	d3eb      	bcc.n	1d3ee <readline_process_char+0x18a>
                }
                // set redraw parameters
                redraw_from_cursor = true;
   1d416:	2301      	movs	r3, #1
   1d418:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
                redraw_step_forward = compl_len;
   1d41c:	693b      	ldr	r3, [r7, #16]
   1d41e:	627b      	str	r3, [r7, #36]	; 0x24
   1d420:	e132      	b.n	1d688 <readline_process_char+0x424>
            }
        #endif
        } else if (32 <= c && c <= 126) {
   1d422:	687b      	ldr	r3, [r7, #4]
   1d424:	2b1f      	cmp	r3, #31
   1d426:	f340 812f 	ble.w	1d688 <readline_process_char+0x424>
   1d42a:	687b      	ldr	r3, [r7, #4]
   1d42c:	2b7e      	cmp	r3, #126	; 0x7e
   1d42e:	f300 812b 	bgt.w	1d688 <readline_process_char+0x424>
            // printable character
            vstr_ins_char(rl.line, rl.cursor_pos, c);
   1d432:	4b1b      	ldr	r3, [pc, #108]	; (1d4a0 <readline_process_char+0x23c>)
   1d434:	6818      	ldr	r0, [r3, #0]
   1d436:	4b1a      	ldr	r3, [pc, #104]	; (1d4a0 <readline_process_char+0x23c>)
   1d438:	691b      	ldr	r3, [r3, #16]
   1d43a:	687a      	ldr	r2, [r7, #4]
   1d43c:	4619      	mov	r1, r3
   1d43e:	f7e4 fa0b 	bl	1858 <vstr_ins_char>
            // set redraw parameters
            redraw_from_cursor = true;
   1d442:	2301      	movs	r3, #1
   1d444:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            redraw_step_forward = 1;
   1d448:	2301      	movs	r3, #1
   1d44a:	627b      	str	r3, [r7, #36]	; 0x24
   1d44c:	e11c      	b.n	1d688 <readline_process_char+0x424>
        }
    } else if (rl.escape_seq == ESEQ_ESC) {
   1d44e:	4b14      	ldr	r3, [pc, #80]	; (1d4a0 <readline_process_char+0x23c>)
   1d450:	689b      	ldr	r3, [r3, #8]
   1d452:	2b01      	cmp	r3, #1
   1d454:	d110      	bne.n	1d478 <readline_process_char+0x214>
        switch (c) {
   1d456:	687b      	ldr	r3, [r7, #4]
   1d458:	2b4f      	cmp	r3, #79	; 0x4f
   1d45a:	d005      	beq.n	1d468 <readline_process_char+0x204>
   1d45c:	2b5b      	cmp	r3, #91	; 0x5b
   1d45e:	d107      	bne.n	1d470 <readline_process_char+0x20c>
            case '[':
                rl.escape_seq = ESEQ_ESC_BRACKET;
   1d460:	4b0f      	ldr	r3, [pc, #60]	; (1d4a0 <readline_process_char+0x23c>)
   1d462:	2202      	movs	r2, #2
   1d464:	609a      	str	r2, [r3, #8]
                break;
   1d466:	e10f      	b.n	1d688 <readline_process_char+0x424>
            case 'O':
                rl.escape_seq = ESEQ_ESC_O;
   1d468:	4b0d      	ldr	r3, [pc, #52]	; (1d4a0 <readline_process_char+0x23c>)
   1d46a:	2204      	movs	r2, #4
   1d46c:	609a      	str	r2, [r3, #8]
                break;
   1d46e:	e10b      	b.n	1d688 <readline_process_char+0x424>
            default:
                DEBUG_printf("(ESC %d)", c);
                rl.escape_seq = ESEQ_NONE;
   1d470:	4b0b      	ldr	r3, [pc, #44]	; (1d4a0 <readline_process_char+0x23c>)
   1d472:	2200      	movs	r2, #0
   1d474:	609a      	str	r2, [r3, #8]
   1d476:	e107      	b.n	1d688 <readline_process_char+0x424>
        }
    } else if (rl.escape_seq == ESEQ_ESC_BRACKET) {
   1d478:	4b09      	ldr	r3, [pc, #36]	; (1d4a0 <readline_process_char+0x23c>)
   1d47a:	689b      	ldr	r3, [r3, #8]
   1d47c:	2b02      	cmp	r3, #2
   1d47e:	f040 80a9 	bne.w	1d5d4 <readline_process_char+0x370>
        if ('0' <= c && c <= '9') {
   1d482:	687b      	ldr	r3, [r7, #4]
   1d484:	2b2f      	cmp	r3, #47	; 0x2f
   1d486:	dd11      	ble.n	1d4ac <readline_process_char+0x248>
   1d488:	687b      	ldr	r3, [r7, #4]
   1d48a:	2b39      	cmp	r3, #57	; 0x39
   1d48c:	dc0e      	bgt.n	1d4ac <readline_process_char+0x248>
            rl.escape_seq = ESEQ_ESC_BRACKET_DIGIT;
   1d48e:	4b04      	ldr	r3, [pc, #16]	; (1d4a0 <readline_process_char+0x23c>)
   1d490:	2203      	movs	r2, #3
   1d492:	609a      	str	r2, [r3, #8]
            rl.escape_seq_buf[0] = c;
   1d494:	687b      	ldr	r3, [r7, #4]
   1d496:	b2da      	uxtb	r2, r3
   1d498:	4b01      	ldr	r3, [pc, #4]	; (1d4a0 <readline_process_char+0x23c>)
   1d49a:	751a      	strb	r2, [r3, #20]
   1d49c:	e0f4      	b.n	1d688 <readline_process_char+0x424>
   1d49e:	bf00      	nop
   1d4a0:	200012d4 	.word	0x200012d4
   1d4a4:	00025d88 	.word	0x00025d88
   1d4a8:	0001f75c 	.word	0x0001f75c
        } else {
            rl.escape_seq = ESEQ_NONE;
   1d4ac:	4b96      	ldr	r3, [pc, #600]	; (1d708 <readline_process_char+0x4a4>)
   1d4ae:	2200      	movs	r2, #0
   1d4b0:	609a      	str	r2, [r3, #8]
            if (c == 'A') {
   1d4b2:	687b      	ldr	r3, [r7, #4]
   1d4b4:	2b41      	cmp	r3, #65	; 0x41
   1d4b6:	d135      	bne.n	1d524 <readline_process_char+0x2c0>
#if MICROPY_REPL_EMACS_KEYS
up_arrow_key:
#endif
                // up arrow
                if (rl.hist_cur + 1 < (int)READLINE_HIST_SIZE && MP_STATE_PORT(readline_hist)[rl.hist_cur + 1] != NULL) {
   1d4b8:	4b93      	ldr	r3, [pc, #588]	; (1d708 <readline_process_char+0x4a4>)
   1d4ba:	68db      	ldr	r3, [r3, #12]
   1d4bc:	3301      	adds	r3, #1
   1d4be:	2b07      	cmp	r3, #7
   1d4c0:	f300 80e2 	bgt.w	1d688 <readline_process_char+0x424>
   1d4c4:	4b90      	ldr	r3, [pc, #576]	; (1d708 <readline_process_char+0x4a4>)
   1d4c6:	68db      	ldr	r3, [r3, #12]
   1d4c8:	3301      	adds	r3, #1
   1d4ca:	4a90      	ldr	r2, [pc, #576]	; (1d70c <readline_process_char+0x4a8>)
   1d4cc:	331a      	adds	r3, #26
   1d4ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1d4d2:	2b00      	cmp	r3, #0
   1d4d4:	f000 80d8 	beq.w	1d688 <readline_process_char+0x424>
                    // increase hist num
                    rl.hist_cur += 1;
   1d4d8:	4b8b      	ldr	r3, [pc, #556]	; (1d708 <readline_process_char+0x4a4>)
   1d4da:	68db      	ldr	r3, [r3, #12]
   1d4dc:	3301      	adds	r3, #1
   1d4de:	4a8a      	ldr	r2, [pc, #552]	; (1d708 <readline_process_char+0x4a4>)
   1d4e0:	60d3      	str	r3, [r2, #12]
                    // set line to history
                    rl.line->len = rl.orig_line_len;
   1d4e2:	4b89      	ldr	r3, [pc, #548]	; (1d708 <readline_process_char+0x4a4>)
   1d4e4:	681b      	ldr	r3, [r3, #0]
   1d4e6:	4a88      	ldr	r2, [pc, #544]	; (1d708 <readline_process_char+0x4a4>)
   1d4e8:	6852      	ldr	r2, [r2, #4]
   1d4ea:	605a      	str	r2, [r3, #4]
                    vstr_add_str(rl.line, MP_STATE_PORT(readline_hist)[rl.hist_cur]);
   1d4ec:	4b86      	ldr	r3, [pc, #536]	; (1d708 <readline_process_char+0x4a4>)
   1d4ee:	6818      	ldr	r0, [r3, #0]
   1d4f0:	4b85      	ldr	r3, [pc, #532]	; (1d708 <readline_process_char+0x4a4>)
   1d4f2:	68db      	ldr	r3, [r3, #12]
   1d4f4:	4a85      	ldr	r2, [pc, #532]	; (1d70c <readline_process_char+0x4a8>)
   1d4f6:	331a      	adds	r3, #26
   1d4f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1d4fc:	4619      	mov	r1, r3
   1d4fe:	f7e4 f933 	bl	1768 <vstr_add_str>
                    // set redraw parameters
                    redraw_step_back = rl.cursor_pos - rl.orig_line_len;
   1d502:	4b81      	ldr	r3, [pc, #516]	; (1d708 <readline_process_char+0x4a4>)
   1d504:	691a      	ldr	r2, [r3, #16]
   1d506:	4b80      	ldr	r3, [pc, #512]	; (1d708 <readline_process_char+0x4a4>)
   1d508:	685b      	ldr	r3, [r3, #4]
   1d50a:	1ad3      	subs	r3, r2, r3
   1d50c:	62fb      	str	r3, [r7, #44]	; 0x2c
                    redraw_from_cursor = true;
   1d50e:	2301      	movs	r3, #1
   1d510:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
                    redraw_step_forward = rl.line->len - rl.orig_line_len;
   1d514:	4b7c      	ldr	r3, [pc, #496]	; (1d708 <readline_process_char+0x4a4>)
   1d516:	681b      	ldr	r3, [r3, #0]
   1d518:	685a      	ldr	r2, [r3, #4]
   1d51a:	4b7b      	ldr	r3, [pc, #492]	; (1d708 <readline_process_char+0x4a4>)
   1d51c:	685b      	ldr	r3, [r3, #4]
   1d51e:	1ad3      	subs	r3, r2, r3
   1d520:	627b      	str	r3, [r7, #36]	; 0x24
   1d522:	e0b1      	b.n	1d688 <readline_process_char+0x424>
                }
            } else if (c == 'B') {
   1d524:	687b      	ldr	r3, [r7, #4]
   1d526:	2b42      	cmp	r3, #66	; 0x42
   1d528:	d134      	bne.n	1d594 <readline_process_char+0x330>
#if MICROPY_REPL_EMACS_KEYS
down_arrow_key:
#endif
                // down arrow
                if (rl.hist_cur >= 0) {
   1d52a:	4b77      	ldr	r3, [pc, #476]	; (1d708 <readline_process_char+0x4a4>)
   1d52c:	68db      	ldr	r3, [r3, #12]
   1d52e:	2b00      	cmp	r3, #0
   1d530:	f2c0 80aa 	blt.w	1d688 <readline_process_char+0x424>
                    // decrease hist num
                    rl.hist_cur -= 1;
   1d534:	4b74      	ldr	r3, [pc, #464]	; (1d708 <readline_process_char+0x4a4>)
   1d536:	68db      	ldr	r3, [r3, #12]
   1d538:	3b01      	subs	r3, #1
   1d53a:	4a73      	ldr	r2, [pc, #460]	; (1d708 <readline_process_char+0x4a4>)
   1d53c:	60d3      	str	r3, [r2, #12]
                    // set line to history
                    vstr_cut_tail_bytes(rl.line, rl.line->len - rl.orig_line_len);
   1d53e:	4b72      	ldr	r3, [pc, #456]	; (1d708 <readline_process_char+0x4a4>)
   1d540:	6818      	ldr	r0, [r3, #0]
   1d542:	4b71      	ldr	r3, [pc, #452]	; (1d708 <readline_process_char+0x4a4>)
   1d544:	681b      	ldr	r3, [r3, #0]
   1d546:	685a      	ldr	r2, [r3, #4]
   1d548:	4b6f      	ldr	r3, [pc, #444]	; (1d708 <readline_process_char+0x4a4>)
   1d54a:	685b      	ldr	r3, [r3, #4]
   1d54c:	1ad3      	subs	r3, r2, r3
   1d54e:	4619      	mov	r1, r3
   1d550:	f7e4 f9a4 	bl	189c <vstr_cut_tail_bytes>
                    if (rl.hist_cur >= 0) {
   1d554:	4b6c      	ldr	r3, [pc, #432]	; (1d708 <readline_process_char+0x4a4>)
   1d556:	68db      	ldr	r3, [r3, #12]
   1d558:	2b00      	cmp	r3, #0
   1d55a:	db0a      	blt.n	1d572 <readline_process_char+0x30e>
                        vstr_add_str(rl.line, MP_STATE_PORT(readline_hist)[rl.hist_cur]);
   1d55c:	4b6a      	ldr	r3, [pc, #424]	; (1d708 <readline_process_char+0x4a4>)
   1d55e:	6818      	ldr	r0, [r3, #0]
   1d560:	4b69      	ldr	r3, [pc, #420]	; (1d708 <readline_process_char+0x4a4>)
   1d562:	68db      	ldr	r3, [r3, #12]
   1d564:	4a69      	ldr	r2, [pc, #420]	; (1d70c <readline_process_char+0x4a8>)
   1d566:	331a      	adds	r3, #26
   1d568:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1d56c:	4619      	mov	r1, r3
   1d56e:	f7e4 f8fb 	bl	1768 <vstr_add_str>
                    }
                    // set redraw parameters
                    redraw_step_back = rl.cursor_pos - rl.orig_line_len;
   1d572:	4b65      	ldr	r3, [pc, #404]	; (1d708 <readline_process_char+0x4a4>)
   1d574:	691a      	ldr	r2, [r3, #16]
   1d576:	4b64      	ldr	r3, [pc, #400]	; (1d708 <readline_process_char+0x4a4>)
   1d578:	685b      	ldr	r3, [r3, #4]
   1d57a:	1ad3      	subs	r3, r2, r3
   1d57c:	62fb      	str	r3, [r7, #44]	; 0x2c
                    redraw_from_cursor = true;
   1d57e:	2301      	movs	r3, #1
   1d580:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
                    redraw_step_forward = rl.line->len - rl.orig_line_len;
   1d584:	4b60      	ldr	r3, [pc, #384]	; (1d708 <readline_process_char+0x4a4>)
   1d586:	681b      	ldr	r3, [r3, #0]
   1d588:	685a      	ldr	r2, [r3, #4]
   1d58a:	4b5f      	ldr	r3, [pc, #380]	; (1d708 <readline_process_char+0x4a4>)
   1d58c:	685b      	ldr	r3, [r3, #4]
   1d58e:	1ad3      	subs	r3, r2, r3
   1d590:	627b      	str	r3, [r7, #36]	; 0x24
   1d592:	e079      	b.n	1d688 <readline_process_char+0x424>
                }
            } else if (c == 'C') {
   1d594:	687b      	ldr	r3, [r7, #4]
   1d596:	2b43      	cmp	r3, #67	; 0x43
   1d598:	d109      	bne.n	1d5ae <readline_process_char+0x34a>
#if MICROPY_REPL_EMACS_KEYS
right_arrow_key:
#endif
                // right arrow
                if (rl.cursor_pos < rl.line->len) {
   1d59a:	4b5b      	ldr	r3, [pc, #364]	; (1d708 <readline_process_char+0x4a4>)
   1d59c:	691a      	ldr	r2, [r3, #16]
   1d59e:	4b5a      	ldr	r3, [pc, #360]	; (1d708 <readline_process_char+0x4a4>)
   1d5a0:	681b      	ldr	r3, [r3, #0]
   1d5a2:	685b      	ldr	r3, [r3, #4]
   1d5a4:	429a      	cmp	r2, r3
   1d5a6:	d26f      	bcs.n	1d688 <readline_process_char+0x424>
                    redraw_step_forward = 1;
   1d5a8:	2301      	movs	r3, #1
   1d5aa:	627b      	str	r3, [r7, #36]	; 0x24
   1d5ac:	e06c      	b.n	1d688 <readline_process_char+0x424>
                }
            } else if (c == 'D') {
   1d5ae:	687b      	ldr	r3, [r7, #4]
   1d5b0:	2b44      	cmp	r3, #68	; 0x44
   1d5b2:	d108      	bne.n	1d5c6 <readline_process_char+0x362>
#if MICROPY_REPL_EMACS_KEYS
left_arrow_key:
#endif
                // left arrow
                if (rl.cursor_pos > rl.orig_line_len) {
   1d5b4:	4b54      	ldr	r3, [pc, #336]	; (1d708 <readline_process_char+0x4a4>)
   1d5b6:	691a      	ldr	r2, [r3, #16]
   1d5b8:	4b53      	ldr	r3, [pc, #332]	; (1d708 <readline_process_char+0x4a4>)
   1d5ba:	685b      	ldr	r3, [r3, #4]
   1d5bc:	429a      	cmp	r2, r3
   1d5be:	d963      	bls.n	1d688 <readline_process_char+0x424>
                    redraw_step_back = 1;
   1d5c0:	2301      	movs	r3, #1
   1d5c2:	62fb      	str	r3, [r7, #44]	; 0x2c
   1d5c4:	e060      	b.n	1d688 <readline_process_char+0x424>
                }
            } else if (c == 'H') {
   1d5c6:	687b      	ldr	r3, [r7, #4]
   1d5c8:	2b48      	cmp	r3, #72	; 0x48
   1d5ca:	d015      	beq.n	1d5f8 <readline_process_char+0x394>
                // home
                goto home_key;
            } else if (c == 'F') {
   1d5cc:	687b      	ldr	r3, [r7, #4]
   1d5ce:	2b46      	cmp	r3, #70	; 0x46
   1d5d0:	d15a      	bne.n	1d688 <readline_process_char+0x424>
                // end
                goto end_key;
   1d5d2:	e027      	b.n	1d624 <readline_process_char+0x3c0>
            } else {
                DEBUG_printf("(ESC [ %d)", c);
            }
        }
    } else if (rl.escape_seq == ESEQ_ESC_BRACKET_DIGIT) {
   1d5d4:	4b4c      	ldr	r3, [pc, #304]	; (1d708 <readline_process_char+0x4a4>)
   1d5d6:	689b      	ldr	r3, [r3, #8]
   1d5d8:	2b03      	cmp	r3, #3
   1d5da:	d145      	bne.n	1d668 <readline_process_char+0x404>
        if (c == '~') {
   1d5dc:	687b      	ldr	r3, [r7, #4]
   1d5de:	2b7e      	cmp	r3, #126	; 0x7e
   1d5e0:	d13e      	bne.n	1d660 <readline_process_char+0x3fc>
            if (rl.escape_seq_buf[0] == '1' || rl.escape_seq_buf[0] == '7') {
   1d5e2:	4b49      	ldr	r3, [pc, #292]	; (1d708 <readline_process_char+0x4a4>)
   1d5e4:	7d1b      	ldrb	r3, [r3, #20]
   1d5e6:	2b31      	cmp	r3, #49	; 0x31
   1d5e8:	d009      	beq.n	1d5fe <readline_process_char+0x39a>
   1d5ea:	4b47      	ldr	r3, [pc, #284]	; (1d708 <readline_process_char+0x4a4>)
   1d5ec:	7d1b      	ldrb	r3, [r3, #20]
   1d5ee:	2b37      	cmp	r3, #55	; 0x37
   1d5f0:	d10c      	bne.n	1d60c <readline_process_char+0x3a8>
   1d5f2:	e004      	b.n	1d5fe <readline_process_char+0x39a>
            goto home_key;
   1d5f4:	bf00      	nop
   1d5f6:	e002      	b.n	1d5fe <readline_process_char+0x39a>
                goto home_key;
   1d5f8:	bf00      	nop
   1d5fa:	e000      	b.n	1d5fe <readline_process_char+0x39a>
        }
        rl.escape_seq = ESEQ_NONE;
    } else if (rl.escape_seq == ESEQ_ESC_O) {
        switch (c) {
            case 'H':
                goto home_key;
   1d5fc:	bf00      	nop
                redraw_step_back = rl.cursor_pos - rl.orig_line_len;
   1d5fe:	4b42      	ldr	r3, [pc, #264]	; (1d708 <readline_process_char+0x4a4>)
   1d600:	691a      	ldr	r2, [r3, #16]
   1d602:	4b41      	ldr	r3, [pc, #260]	; (1d708 <readline_process_char+0x4a4>)
   1d604:	685b      	ldr	r3, [r3, #4]
   1d606:	1ad3      	subs	r3, r2, r3
   1d608:	62fb      	str	r3, [r7, #44]	; 0x2c
   1d60a:	e029      	b.n	1d660 <readline_process_char+0x3fc>
            } else if (rl.escape_seq_buf[0] == '4' || rl.escape_seq_buf[0] == '8') {
   1d60c:	4b3e      	ldr	r3, [pc, #248]	; (1d708 <readline_process_char+0x4a4>)
   1d60e:	7d1b      	ldrb	r3, [r3, #20]
   1d610:	2b34      	cmp	r3, #52	; 0x34
   1d612:	d007      	beq.n	1d624 <readline_process_char+0x3c0>
   1d614:	4b3c      	ldr	r3, [pc, #240]	; (1d708 <readline_process_char+0x4a4>)
   1d616:	7d1b      	ldrb	r3, [r3, #20]
   1d618:	2b38      	cmp	r3, #56	; 0x38
   1d61a:	d10b      	bne.n	1d634 <readline_process_char+0x3d0>
   1d61c:	e002      	b.n	1d624 <readline_process_char+0x3c0>
            goto end_key;
   1d61e:	bf00      	nop
   1d620:	e000      	b.n	1d624 <readline_process_char+0x3c0>
            case 'F':
                goto end_key;
   1d622:	bf00      	nop
                redraw_step_forward = rl.line->len - rl.cursor_pos;
   1d624:	4b38      	ldr	r3, [pc, #224]	; (1d708 <readline_process_char+0x4a4>)
   1d626:	681b      	ldr	r3, [r3, #0]
   1d628:	685a      	ldr	r2, [r3, #4]
   1d62a:	4b37      	ldr	r3, [pc, #220]	; (1d708 <readline_process_char+0x4a4>)
   1d62c:	691b      	ldr	r3, [r3, #16]
   1d62e:	1ad3      	subs	r3, r2, r3
   1d630:	627b      	str	r3, [r7, #36]	; 0x24
   1d632:	e015      	b.n	1d660 <readline_process_char+0x3fc>
            } else if (rl.escape_seq_buf[0] == '3') {
   1d634:	4b34      	ldr	r3, [pc, #208]	; (1d708 <readline_process_char+0x4a4>)
   1d636:	7d1b      	ldrb	r3, [r3, #20]
   1d638:	2b33      	cmp	r3, #51	; 0x33
   1d63a:	d111      	bne.n	1d660 <readline_process_char+0x3fc>
                if (rl.cursor_pos < rl.line->len) {
   1d63c:	4b32      	ldr	r3, [pc, #200]	; (1d708 <readline_process_char+0x4a4>)
   1d63e:	691a      	ldr	r2, [r3, #16]
   1d640:	4b31      	ldr	r3, [pc, #196]	; (1d708 <readline_process_char+0x4a4>)
   1d642:	681b      	ldr	r3, [r3, #0]
   1d644:	685b      	ldr	r3, [r3, #4]
   1d646:	429a      	cmp	r2, r3
   1d648:	d20a      	bcs.n	1d660 <readline_process_char+0x3fc>
                    vstr_cut_out_bytes(rl.line, rl.cursor_pos, 1);
   1d64a:	4b2f      	ldr	r3, [pc, #188]	; (1d708 <readline_process_char+0x4a4>)
   1d64c:	6818      	ldr	r0, [r3, #0]
   1d64e:	4b2e      	ldr	r3, [pc, #184]	; (1d708 <readline_process_char+0x4a4>)
   1d650:	691b      	ldr	r3, [r3, #16]
   1d652:	2201      	movs	r2, #1
   1d654:	4619      	mov	r1, r3
   1d656:	f7e4 f93b 	bl	18d0 <vstr_cut_out_bytes>
                    redraw_from_cursor = true;
   1d65a:	2301      	movs	r3, #1
   1d65c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        rl.escape_seq = ESEQ_NONE;
   1d660:	4b29      	ldr	r3, [pc, #164]	; (1d708 <readline_process_char+0x4a4>)
   1d662:	2200      	movs	r2, #0
   1d664:	609a      	str	r2, [r3, #8]
   1d666:	e00f      	b.n	1d688 <readline_process_char+0x424>
    } else if (rl.escape_seq == ESEQ_ESC_O) {
   1d668:	4b27      	ldr	r3, [pc, #156]	; (1d708 <readline_process_char+0x4a4>)
   1d66a:	689b      	ldr	r3, [r3, #8]
   1d66c:	2b04      	cmp	r3, #4
   1d66e:	d108      	bne.n	1d682 <readline_process_char+0x41e>
        switch (c) {
   1d670:	687b      	ldr	r3, [r7, #4]
   1d672:	2b46      	cmp	r3, #70	; 0x46
   1d674:	d0d5      	beq.n	1d622 <readline_process_char+0x3be>
   1d676:	2b48      	cmp	r3, #72	; 0x48
   1d678:	d0c0      	beq.n	1d5fc <readline_process_char+0x398>
            default:
                DEBUG_printf("(ESC O %d)", c);
                rl.escape_seq = ESEQ_NONE;
   1d67a:	4b23      	ldr	r3, [pc, #140]	; (1d708 <readline_process_char+0x4a4>)
   1d67c:	2200      	movs	r2, #0
   1d67e:	609a      	str	r2, [r3, #8]
   1d680:	e002      	b.n	1d688 <readline_process_char+0x424>
        }
    } else {
        rl.escape_seq = ESEQ_NONE;
   1d682:	4b21      	ldr	r3, [pc, #132]	; (1d708 <readline_process_char+0x4a4>)
   1d684:	2200      	movs	r2, #0
   1d686:	609a      	str	r2, [r3, #8]
    }

    // redraw command prompt, efficiently
    if (redraw_step_back > 0) {
   1d688:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1d68a:	2b00      	cmp	r3, #0
   1d68c:	dd09      	ble.n	1d6a2 <readline_process_char+0x43e>
        mp_hal_move_cursor_back(redraw_step_back);
   1d68e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1d690:	4618      	mov	r0, r3
   1d692:	f7ff fdab 	bl	1d1ec <mp_hal_move_cursor_back>
        rl.cursor_pos -= redraw_step_back;
   1d696:	4b1c      	ldr	r3, [pc, #112]	; (1d708 <readline_process_char+0x4a4>)
   1d698:	691a      	ldr	r2, [r3, #16]
   1d69a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1d69c:	1ad3      	subs	r3, r2, r3
   1d69e:	4a1a      	ldr	r2, [pc, #104]	; (1d708 <readline_process_char+0x4a4>)
   1d6a0:	6113      	str	r3, [r2, #16]
    }
    if (redraw_from_cursor) {
   1d6a2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
   1d6a6:	2b00      	cmp	r3, #0
   1d6a8:	d032      	beq.n	1d710 <readline_process_char+0x4ac>
        if (rl.line->len < last_line_len) {
   1d6aa:	4b17      	ldr	r3, [pc, #92]	; (1d708 <readline_process_char+0x4a4>)
   1d6ac:	681b      	ldr	r3, [r3, #0]
   1d6ae:	685a      	ldr	r2, [r3, #4]
   1d6b0:	697b      	ldr	r3, [r7, #20]
   1d6b2:	429a      	cmp	r2, r3
   1d6b4:	d206      	bcs.n	1d6c4 <readline_process_char+0x460>
            // erase old chars
            mp_hal_erase_line_from_cursor(last_line_len - rl.cursor_pos);
   1d6b6:	4b14      	ldr	r3, [pc, #80]	; (1d708 <readline_process_char+0x4a4>)
   1d6b8:	691b      	ldr	r3, [r3, #16]
   1d6ba:	697a      	ldr	r2, [r7, #20]
   1d6bc:	1ad3      	subs	r3, r2, r3
   1d6be:	4618      	mov	r0, r3
   1d6c0:	f7ff fdc2 	bl	1d248 <mp_hal_erase_line_from_cursor>
        }
        // draw new chars
        mp_hal_stdout_tx_strn(rl.line->buf + rl.cursor_pos, rl.line->len - rl.cursor_pos);
   1d6c4:	4b10      	ldr	r3, [pc, #64]	; (1d708 <readline_process_char+0x4a4>)
   1d6c6:	681b      	ldr	r3, [r3, #0]
   1d6c8:	689a      	ldr	r2, [r3, #8]
   1d6ca:	4b0f      	ldr	r3, [pc, #60]	; (1d708 <readline_process_char+0x4a4>)
   1d6cc:	691b      	ldr	r3, [r3, #16]
   1d6ce:	18d0      	adds	r0, r2, r3
   1d6d0:	4b0d      	ldr	r3, [pc, #52]	; (1d708 <readline_process_char+0x4a4>)
   1d6d2:	681b      	ldr	r3, [r3, #0]
   1d6d4:	685a      	ldr	r2, [r3, #4]
   1d6d6:	4b0c      	ldr	r3, [pc, #48]	; (1d708 <readline_process_char+0x4a4>)
   1d6d8:	691b      	ldr	r3, [r3, #16]
   1d6da:	1ad3      	subs	r3, r2, r3
   1d6dc:	4619      	mov	r1, r3
   1d6de:	f7fe f91d 	bl	1b91c <mp_hal_stdout_tx_strn>
        // move cursor forward if needed (already moved forward by length of line, so move it back)
        mp_hal_move_cursor_back(rl.line->len - (rl.cursor_pos + redraw_step_forward));
   1d6e2:	4b09      	ldr	r3, [pc, #36]	; (1d708 <readline_process_char+0x4a4>)
   1d6e4:	681b      	ldr	r3, [r3, #0]
   1d6e6:	685a      	ldr	r2, [r3, #4]
   1d6e8:	4b07      	ldr	r3, [pc, #28]	; (1d708 <readline_process_char+0x4a4>)
   1d6ea:	6919      	ldr	r1, [r3, #16]
   1d6ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1d6ee:	440b      	add	r3, r1
   1d6f0:	1ad3      	subs	r3, r2, r3
   1d6f2:	4618      	mov	r0, r3
   1d6f4:	f7ff fd7a 	bl	1d1ec <mp_hal_move_cursor_back>
        rl.cursor_pos += redraw_step_forward;
   1d6f8:	4b03      	ldr	r3, [pc, #12]	; (1d708 <readline_process_char+0x4a4>)
   1d6fa:	691a      	ldr	r2, [r3, #16]
   1d6fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1d6fe:	4413      	add	r3, r2
   1d700:	4a01      	ldr	r2, [pc, #4]	; (1d708 <readline_process_char+0x4a4>)
   1d702:	6113      	str	r3, [r2, #16]
   1d704:	e018      	b.n	1d738 <readline_process_char+0x4d4>
   1d706:	bf00      	nop
   1d708:	200012d4 	.word	0x200012d4
   1d70c:	200012f0 	.word	0x200012f0
    } else if (redraw_step_forward > 0) {
   1d710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1d712:	2b00      	cmp	r3, #0
   1d714:	dd10      	ble.n	1d738 <readline_process_char+0x4d4>
        // draw over old chars to move cursor forwards
        mp_hal_stdout_tx_strn(rl.line->buf + rl.cursor_pos, redraw_step_forward);
   1d716:	4b0b      	ldr	r3, [pc, #44]	; (1d744 <readline_process_char+0x4e0>)
   1d718:	681b      	ldr	r3, [r3, #0]
   1d71a:	689a      	ldr	r2, [r3, #8]
   1d71c:	4b09      	ldr	r3, [pc, #36]	; (1d744 <readline_process_char+0x4e0>)
   1d71e:	691b      	ldr	r3, [r3, #16]
   1d720:	4413      	add	r3, r2
   1d722:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   1d724:	4611      	mov	r1, r2
   1d726:	4618      	mov	r0, r3
   1d728:	f7fe f8f8 	bl	1b91c <mp_hal_stdout_tx_strn>
        rl.cursor_pos += redraw_step_forward;
   1d72c:	4b05      	ldr	r3, [pc, #20]	; (1d744 <readline_process_char+0x4e0>)
   1d72e:	691a      	ldr	r2, [r3, #16]
   1d730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1d732:	4413      	add	r3, r2
   1d734:	4a03      	ldr	r2, [pc, #12]	; (1d744 <readline_process_char+0x4e0>)
   1d736:	6113      	str	r3, [r2, #16]
    }

    return -1;
   1d738:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
   1d73c:	4618      	mov	r0, r3
   1d73e:	3730      	adds	r7, #48	; 0x30
   1d740:	46bd      	mov	sp, r7
   1d742:	bd80      	pop	{r7, pc}
   1d744:	200012d4 	.word	0x200012d4

0001d748 <readline_auto_indent>:

#if MICROPY_REPL_AUTO_INDENT
STATIC void readline_auto_indent(void) {
   1d748:	b580      	push	{r7, lr}
   1d74a:	b086      	sub	sp, #24
   1d74c:	af00      	add	r7, sp, #0
    vstr_t *line = rl.line;
   1d74e:	4b44      	ldr	r3, [pc, #272]	; (1d860 <readline_auto_indent+0x118>)
   1d750:	681b      	ldr	r3, [r3, #0]
   1d752:	607b      	str	r3, [r7, #4]
    if (line->len > 1 && line->buf[line->len - 1] == '\n') {
   1d754:	687b      	ldr	r3, [r7, #4]
   1d756:	685b      	ldr	r3, [r3, #4]
   1d758:	2b01      	cmp	r3, #1
   1d75a:	d97d      	bls.n	1d858 <readline_auto_indent+0x110>
   1d75c:	687b      	ldr	r3, [r7, #4]
   1d75e:	689a      	ldr	r2, [r3, #8]
   1d760:	687b      	ldr	r3, [r7, #4]
   1d762:	685b      	ldr	r3, [r3, #4]
   1d764:	3b01      	subs	r3, #1
   1d766:	4413      	add	r3, r2
   1d768:	781b      	ldrb	r3, [r3, #0]
   1d76a:	2b0a      	cmp	r3, #10
   1d76c:	d174      	bne.n	1d858 <readline_auto_indent+0x110>
        int i;
        for (i = line->len - 1; i > 0; i--) {
   1d76e:	687b      	ldr	r3, [r7, #4]
   1d770:	685b      	ldr	r3, [r3, #4]
   1d772:	3b01      	subs	r3, #1
   1d774:	617b      	str	r3, [r7, #20]
   1d776:	e00a      	b.n	1d78e <readline_auto_indent+0x46>
            if (line->buf[i - 1] == '\n') {
   1d778:	687b      	ldr	r3, [r7, #4]
   1d77a:	689a      	ldr	r2, [r3, #8]
   1d77c:	697b      	ldr	r3, [r7, #20]
   1d77e:	3b01      	subs	r3, #1
   1d780:	4413      	add	r3, r2
   1d782:	781b      	ldrb	r3, [r3, #0]
   1d784:	2b0a      	cmp	r3, #10
   1d786:	d006      	beq.n	1d796 <readline_auto_indent+0x4e>
        for (i = line->len - 1; i > 0; i--) {
   1d788:	697b      	ldr	r3, [r7, #20]
   1d78a:	3b01      	subs	r3, #1
   1d78c:	617b      	str	r3, [r7, #20]
   1d78e:	697b      	ldr	r3, [r7, #20]
   1d790:	2b00      	cmp	r3, #0
   1d792:	dcf1      	bgt.n	1d778 <readline_auto_indent+0x30>
   1d794:	e000      	b.n	1d798 <readline_auto_indent+0x50>
                break;
   1d796:	bf00      	nop
            }
        }
        size_t j;
        for (j = i; j < line->len; j++) {
   1d798:	697b      	ldr	r3, [r7, #20]
   1d79a:	613b      	str	r3, [r7, #16]
   1d79c:	e009      	b.n	1d7b2 <readline_auto_indent+0x6a>
            if (line->buf[j] != ' ') {
   1d79e:	687b      	ldr	r3, [r7, #4]
   1d7a0:	689a      	ldr	r2, [r3, #8]
   1d7a2:	693b      	ldr	r3, [r7, #16]
   1d7a4:	4413      	add	r3, r2
   1d7a6:	781b      	ldrb	r3, [r3, #0]
   1d7a8:	2b20      	cmp	r3, #32
   1d7aa:	d108      	bne.n	1d7be <readline_auto_indent+0x76>
        for (j = i; j < line->len; j++) {
   1d7ac:	693b      	ldr	r3, [r7, #16]
   1d7ae:	3301      	adds	r3, #1
   1d7b0:	613b      	str	r3, [r7, #16]
   1d7b2:	687b      	ldr	r3, [r7, #4]
   1d7b4:	685a      	ldr	r2, [r3, #4]
   1d7b6:	693b      	ldr	r3, [r7, #16]
   1d7b8:	429a      	cmp	r2, r3
   1d7ba:	d8f0      	bhi.n	1d79e <readline_auto_indent+0x56>
   1d7bc:	e000      	b.n	1d7c0 <readline_auto_indent+0x78>
                break;
   1d7be:	bf00      	nop
            }
        }
        // i=start of line; j=first non-space
        if (i > 0 && j + 1 == line->len) {
   1d7c0:	697b      	ldr	r3, [r7, #20]
   1d7c2:	2b00      	cmp	r3, #0
   1d7c4:	dd21      	ble.n	1d80a <readline_auto_indent+0xc2>
   1d7c6:	693b      	ldr	r3, [r7, #16]
   1d7c8:	1c5a      	adds	r2, r3, #1
   1d7ca:	687b      	ldr	r3, [r7, #4]
   1d7cc:	685b      	ldr	r3, [r3, #4]
   1d7ce:	429a      	cmp	r2, r3
   1d7d0:	d11b      	bne.n	1d80a <readline_auto_indent+0xc2>
            // previous line is not first line and is all spaces
            for (size_t k = i - 1; k > 0; --k) {
   1d7d2:	697b      	ldr	r3, [r7, #20]
   1d7d4:	3b01      	subs	r3, #1
   1d7d6:	60fb      	str	r3, [r7, #12]
   1d7d8:	e012      	b.n	1d800 <readline_auto_indent+0xb8>
                if (line->buf[k - 1] == '\n') {
   1d7da:	687b      	ldr	r3, [r7, #4]
   1d7dc:	689a      	ldr	r2, [r3, #8]
   1d7de:	68fb      	ldr	r3, [r7, #12]
   1d7e0:	3b01      	subs	r3, #1
   1d7e2:	4413      	add	r3, r2
   1d7e4:	781b      	ldrb	r3, [r3, #0]
   1d7e6:	2b0a      	cmp	r3, #10
   1d7e8:	d035      	beq.n	1d856 <readline_auto_indent+0x10e>
                    // don't auto-indent if last 2 lines are all spaces
                    return;
                } else if (line->buf[k - 1] != ' ') {
   1d7ea:	687b      	ldr	r3, [r7, #4]
   1d7ec:	689a      	ldr	r2, [r3, #8]
   1d7ee:	68fb      	ldr	r3, [r7, #12]
   1d7f0:	3b01      	subs	r3, #1
   1d7f2:	4413      	add	r3, r2
   1d7f4:	781b      	ldrb	r3, [r3, #0]
   1d7f6:	2b20      	cmp	r3, #32
   1d7f8:	d106      	bne.n	1d808 <readline_auto_indent+0xc0>
            for (size_t k = i - 1; k > 0; --k) {
   1d7fa:	68fb      	ldr	r3, [r7, #12]
   1d7fc:	3b01      	subs	r3, #1
   1d7fe:	60fb      	str	r3, [r7, #12]
   1d800:	68fb      	ldr	r3, [r7, #12]
   1d802:	2b00      	cmp	r3, #0
   1d804:	d1e9      	bne.n	1d7da <readline_auto_indent+0x92>
   1d806:	e000      	b.n	1d80a <readline_auto_indent+0xc2>
                    // 2nd previous line is not all spaces
                    break;
   1d808:	bf00      	nop
                }
            }
        }
        int n = (j - i) / 4;
   1d80a:	697b      	ldr	r3, [r7, #20]
   1d80c:	693a      	ldr	r2, [r7, #16]
   1d80e:	1ad3      	subs	r3, r2, r3
   1d810:	089b      	lsrs	r3, r3, #2
   1d812:	60bb      	str	r3, [r7, #8]
        if (line->buf[line->len - 2] == ':') {
   1d814:	687b      	ldr	r3, [r7, #4]
   1d816:	689a      	ldr	r2, [r3, #8]
   1d818:	687b      	ldr	r3, [r7, #4]
   1d81a:	685b      	ldr	r3, [r3, #4]
   1d81c:	3b02      	subs	r3, #2
   1d81e:	4413      	add	r3, r2
   1d820:	781b      	ldrb	r3, [r3, #0]
   1d822:	2b3a      	cmp	r3, #58	; 0x3a
   1d824:	d111      	bne.n	1d84a <readline_auto_indent+0x102>
            n += 1;
   1d826:	68bb      	ldr	r3, [r7, #8]
   1d828:	3301      	adds	r3, #1
   1d82a:	60bb      	str	r3, [r7, #8]
        }
        while (n-- > 0) {
   1d82c:	e00d      	b.n	1d84a <readline_auto_indent+0x102>
            vstr_add_strn(line, "    ", 4);
   1d82e:	2204      	movs	r2, #4
   1d830:	490c      	ldr	r1, [pc, #48]	; (1d864 <readline_auto_indent+0x11c>)
   1d832:	6878      	ldr	r0, [r7, #4]
   1d834:	f7e3 ffaa 	bl	178c <vstr_add_strn>
            mp_hal_stdout_tx_strn("    ", 4);
   1d838:	2104      	movs	r1, #4
   1d83a:	480a      	ldr	r0, [pc, #40]	; (1d864 <readline_auto_indent+0x11c>)
   1d83c:	f7fe f86e 	bl	1b91c <mp_hal_stdout_tx_strn>
            rl.cursor_pos += 4;
   1d840:	4b07      	ldr	r3, [pc, #28]	; (1d860 <readline_auto_indent+0x118>)
   1d842:	691b      	ldr	r3, [r3, #16]
   1d844:	3304      	adds	r3, #4
   1d846:	4a06      	ldr	r2, [pc, #24]	; (1d860 <readline_auto_indent+0x118>)
   1d848:	6113      	str	r3, [r2, #16]
        while (n-- > 0) {
   1d84a:	68bb      	ldr	r3, [r7, #8]
   1d84c:	1e5a      	subs	r2, r3, #1
   1d84e:	60ba      	str	r2, [r7, #8]
   1d850:	2b00      	cmp	r3, #0
   1d852:	dcec      	bgt.n	1d82e <readline_auto_indent+0xe6>
   1d854:	e000      	b.n	1d858 <readline_auto_indent+0x110>
                    return;
   1d856:	bf00      	nop
        }
    }
}
   1d858:	3718      	adds	r7, #24
   1d85a:	46bd      	mov	sp, r7
   1d85c:	bd80      	pop	{r7, pc}
   1d85e:	bf00      	nop
   1d860:	200012d4 	.word	0x200012d4
   1d864:	00025d8c 	.word	0x00025d8c

0001d868 <readline_note_newline>:
#endif

void readline_note_newline(const char *prompt) {
   1d868:	b580      	push	{r7, lr}
   1d86a:	b082      	sub	sp, #8
   1d86c:	af00      	add	r7, sp, #0
   1d86e:	6078      	str	r0, [r7, #4]
    rl.orig_line_len = rl.line->len;
   1d870:	4b0a      	ldr	r3, [pc, #40]	; (1d89c <readline_note_newline+0x34>)
   1d872:	681b      	ldr	r3, [r3, #0]
   1d874:	685b      	ldr	r3, [r3, #4]
   1d876:	4a09      	ldr	r2, [pc, #36]	; (1d89c <readline_note_newline+0x34>)
   1d878:	6053      	str	r3, [r2, #4]
    rl.cursor_pos = rl.orig_line_len;
   1d87a:	4b08      	ldr	r3, [pc, #32]	; (1d89c <readline_note_newline+0x34>)
   1d87c:	685b      	ldr	r3, [r3, #4]
   1d87e:	4a07      	ldr	r2, [pc, #28]	; (1d89c <readline_note_newline+0x34>)
   1d880:	6113      	str	r3, [r2, #16]
    rl.prompt = prompt;
   1d882:	4a06      	ldr	r2, [pc, #24]	; (1d89c <readline_note_newline+0x34>)
   1d884:	687b      	ldr	r3, [r7, #4]
   1d886:	6193      	str	r3, [r2, #24]
    mp_hal_stdout_tx_str(prompt);
   1d888:	6878      	ldr	r0, [r7, #4]
   1d88a:	f7fe ffa1 	bl	1c7d0 <mp_hal_stdout_tx_str>
    #if MICROPY_REPL_AUTO_INDENT
    readline_auto_indent();
   1d88e:	f7ff ff5b 	bl	1d748 <readline_auto_indent>
    #endif
}
   1d892:	bf00      	nop
   1d894:	3708      	adds	r7, #8
   1d896:	46bd      	mov	sp, r7
   1d898:	bd80      	pop	{r7, pc}
   1d89a:	bf00      	nop
   1d89c:	200012d4 	.word	0x200012d4

0001d8a0 <readline_init>:

void readline_init(vstr_t *line, const char *prompt) {
   1d8a0:	b580      	push	{r7, lr}
   1d8a2:	b082      	sub	sp, #8
   1d8a4:	af00      	add	r7, sp, #0
   1d8a6:	6078      	str	r0, [r7, #4]
   1d8a8:	6039      	str	r1, [r7, #0]
    rl.line = line;
   1d8aa:	4a10      	ldr	r2, [pc, #64]	; (1d8ec <readline_init+0x4c>)
   1d8ac:	687b      	ldr	r3, [r7, #4]
   1d8ae:	6013      	str	r3, [r2, #0]
    rl.orig_line_len = line->len;
   1d8b0:	687b      	ldr	r3, [r7, #4]
   1d8b2:	685b      	ldr	r3, [r3, #4]
   1d8b4:	4a0d      	ldr	r2, [pc, #52]	; (1d8ec <readline_init+0x4c>)
   1d8b6:	6053      	str	r3, [r2, #4]
    rl.escape_seq = ESEQ_NONE;
   1d8b8:	4b0c      	ldr	r3, [pc, #48]	; (1d8ec <readline_init+0x4c>)
   1d8ba:	2200      	movs	r2, #0
   1d8bc:	609a      	str	r2, [r3, #8]
    rl.escape_seq_buf[0] = 0;
   1d8be:	4b0b      	ldr	r3, [pc, #44]	; (1d8ec <readline_init+0x4c>)
   1d8c0:	2200      	movs	r2, #0
   1d8c2:	751a      	strb	r2, [r3, #20]
    rl.hist_cur = -1;
   1d8c4:	4b09      	ldr	r3, [pc, #36]	; (1d8ec <readline_init+0x4c>)
   1d8c6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1d8ca:	60da      	str	r2, [r3, #12]
    rl.cursor_pos = rl.orig_line_len;
   1d8cc:	4b07      	ldr	r3, [pc, #28]	; (1d8ec <readline_init+0x4c>)
   1d8ce:	685b      	ldr	r3, [r3, #4]
   1d8d0:	4a06      	ldr	r2, [pc, #24]	; (1d8ec <readline_init+0x4c>)
   1d8d2:	6113      	str	r3, [r2, #16]
    rl.prompt = prompt;
   1d8d4:	4a05      	ldr	r2, [pc, #20]	; (1d8ec <readline_init+0x4c>)
   1d8d6:	683b      	ldr	r3, [r7, #0]
   1d8d8:	6193      	str	r3, [r2, #24]
    mp_hal_stdout_tx_str(prompt);
   1d8da:	6838      	ldr	r0, [r7, #0]
   1d8dc:	f7fe ff78 	bl	1c7d0 <mp_hal_stdout_tx_str>
    #if MICROPY_REPL_AUTO_INDENT
    readline_auto_indent();
   1d8e0:	f7ff ff32 	bl	1d748 <readline_auto_indent>
    #endif
}
   1d8e4:	bf00      	nop
   1d8e6:	3708      	adds	r7, #8
   1d8e8:	46bd      	mov	sp, r7
   1d8ea:	bd80      	pop	{r7, pc}
   1d8ec:	200012d4 	.word	0x200012d4

0001d8f0 <readline>:

int readline(vstr_t *line, const char *prompt) {
   1d8f0:	b580      	push	{r7, lr}
   1d8f2:	b084      	sub	sp, #16
   1d8f4:	af00      	add	r7, sp, #0
   1d8f6:	6078      	str	r0, [r7, #4]
   1d8f8:	6039      	str	r1, [r7, #0]
    readline_init(line, prompt);
   1d8fa:	6839      	ldr	r1, [r7, #0]
   1d8fc:	6878      	ldr	r0, [r7, #4]
   1d8fe:	f7ff ffcf 	bl	1d8a0 <readline_init>
    for (;;) {
        int c = mp_hal_stdin_rx_chr();
   1d902:	f7fd fff3 	bl	1b8ec <mp_hal_stdin_rx_chr>
   1d906:	60f8      	str	r0, [r7, #12]
        int r = readline_process_char(c);
   1d908:	68f8      	ldr	r0, [r7, #12]
   1d90a:	f7ff fcab 	bl	1d264 <readline_process_char>
   1d90e:	60b8      	str	r0, [r7, #8]
        if (r >= 0) {
   1d910:	68bb      	ldr	r3, [r7, #8]
   1d912:	2b00      	cmp	r3, #0
   1d914:	dbf5      	blt.n	1d902 <readline+0x12>
            return r;
   1d916:	68bb      	ldr	r3, [r7, #8]
        }
    }
}
   1d918:	4618      	mov	r0, r3
   1d91a:	3710      	adds	r7, #16
   1d91c:	46bd      	mov	sp, r7
   1d91e:	bd80      	pop	{r7, pc}

0001d920 <readline_push_history>:

void readline_push_history(const char *line) {
   1d920:	b580      	push	{r7, lr}
   1d922:	b084      	sub	sp, #16
   1d924:	af00      	add	r7, sp, #0
   1d926:	6078      	str	r0, [r7, #4]
    if (line[0] != '\0'
   1d928:	687b      	ldr	r3, [r7, #4]
   1d92a:	781b      	ldrb	r3, [r3, #0]
   1d92c:	2b00      	cmp	r3, #0
   1d92e:	d02a      	beq.n	1d986 <readline_push_history+0x66>
        && (MP_STATE_PORT(readline_hist)[0] == NULL
   1d930:	4b17      	ldr	r3, [pc, #92]	; (1d990 <readline_push_history+0x70>)
   1d932:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   1d934:	2b00      	cmp	r3, #0
   1d936:	d008      	beq.n	1d94a <readline_push_history+0x2a>
            || strcmp(MP_STATE_PORT(readline_hist)[0], line) != 0)) {
   1d938:	4b15      	ldr	r3, [pc, #84]	; (1d990 <readline_push_history+0x70>)
   1d93a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   1d93c:	6879      	ldr	r1, [r7, #4]
   1d93e:	4618      	mov	r0, r3
   1d940:	f7ff faee 	bl	1cf20 <strcmp>
   1d944:	4603      	mov	r3, r0
   1d946:	2b00      	cmp	r3, #0
   1d948:	d01d      	beq.n	1d986 <readline_push_history+0x66>
        // a line which is not empty and different from the last one
        // so update the history
        char *most_recent_hist = str_dup_maybe(line);
   1d94a:	6878      	ldr	r0, [r7, #4]
   1d94c:	f7ff fc2e 	bl	1d1ac <str_dup_maybe>
   1d950:	60b8      	str	r0, [r7, #8]
        if (most_recent_hist != NULL) {
   1d952:	68bb      	ldr	r3, [r7, #8]
   1d954:	2b00      	cmp	r3, #0
   1d956:	d016      	beq.n	1d986 <readline_push_history+0x66>
            for (int i = READLINE_HIST_SIZE - 1; i > 0; i--) {
   1d958:	2307      	movs	r3, #7
   1d95a:	60fb      	str	r3, [r7, #12]
   1d95c:	e00d      	b.n	1d97a <readline_push_history+0x5a>
                MP_STATE_PORT(readline_hist)[i] = MP_STATE_PORT(readline_hist)[i - 1];
   1d95e:	68fb      	ldr	r3, [r7, #12]
   1d960:	3b01      	subs	r3, #1
   1d962:	4a0b      	ldr	r2, [pc, #44]	; (1d990 <readline_push_history+0x70>)
   1d964:	331a      	adds	r3, #26
   1d966:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
   1d96a:	4909      	ldr	r1, [pc, #36]	; (1d990 <readline_push_history+0x70>)
   1d96c:	68fb      	ldr	r3, [r7, #12]
   1d96e:	331a      	adds	r3, #26
   1d970:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            for (int i = READLINE_HIST_SIZE - 1; i > 0; i--) {
   1d974:	68fb      	ldr	r3, [r7, #12]
   1d976:	3b01      	subs	r3, #1
   1d978:	60fb      	str	r3, [r7, #12]
   1d97a:	68fb      	ldr	r3, [r7, #12]
   1d97c:	2b00      	cmp	r3, #0
   1d97e:	dcee      	bgt.n	1d95e <readline_push_history+0x3e>
            }
            MP_STATE_PORT(readline_hist)[0] = most_recent_hist;
   1d980:	4a03      	ldr	r2, [pc, #12]	; (1d990 <readline_push_history+0x70>)
   1d982:	68bb      	ldr	r3, [r7, #8]
   1d984:	6693      	str	r3, [r2, #104]	; 0x68
        }
    }
}
   1d986:	bf00      	nop
   1d988:	3710      	adds	r7, #16
   1d98a:	46bd      	mov	sp, r7
   1d98c:	bd80      	pop	{r7, pc}
   1d98e:	bf00      	nop
   1d990:	200012f0 	.word	0x200012f0

0001d994 <GPIODirModeSet>:
   1d994:	f8d0 3400 	ldr.w	r3, [r0, #1024]	; 0x400
   1d998:	f012 0f01 	tst.w	r2, #1
   1d99c:	b510      	push	{r4, lr}
   1d99e:	f500 6480 	add.w	r4, r0, #1024	; 0x400
   1d9a2:	bf14      	ite	ne
   1d9a4:	430b      	orrne	r3, r1
   1d9a6:	438b      	biceq	r3, r1
   1d9a8:	6023      	str	r3, [r4, #0]
   1d9aa:	f012 0f02 	tst.w	r2, #2
   1d9ae:	f8d0 2420 	ldr.w	r2, [r0, #1056]	; 0x420
   1d9b2:	f500 6384 	add.w	r3, r0, #1056	; 0x420
   1d9b6:	bf14      	ite	ne
   1d9b8:	4311      	orrne	r1, r2
   1d9ba:	ea22 0101 	biceq.w	r1, r2, r1
   1d9be:	6019      	str	r1, [r3, #0]
   1d9c0:	bd10      	pop	{r4, pc}

0001d9c2 <GPIODirModeGet>:
   1d9c2:	2301      	movs	r3, #1
   1d9c4:	fa03 f101 	lsl.w	r1, r3, r1
   1d9c8:	b510      	push	{r4, lr}
   1d9ca:	f8d0 4400 	ldr.w	r4, [r0, #1024]	; 0x400
   1d9ce:	f8d0 2420 	ldr.w	r2, [r0, #1056]	; 0x420
   1d9d2:	b2c9      	uxtb	r1, r1
   1d9d4:	420c      	tst	r4, r1
   1d9d6:	bf08      	it	eq
   1d9d8:	2300      	moveq	r3, #0
   1d9da:	420a      	tst	r2, r1
   1d9dc:	bf14      	ite	ne
   1d9de:	2002      	movne	r0, #2
   1d9e0:	2000      	moveq	r0, #0
   1d9e2:	4318      	orrs	r0, r3
   1d9e4:	bd10      	pop	{r4, pc}

0001d9e6 <GPIOPadConfigSet>:
   1d9e6:	b5f0      	push	{r4, r5, r6, r7, lr}
   1d9e8:	f3c2 1741 	ubfx	r7, r2, #5, #2
   1d9ec:	2400      	movs	r4, #0
   1d9ee:	f04f 0e03 	mov.w	lr, #3
   1d9f2:	fa41 f504 	asr.w	r5, r1, r4
   1d9f6:	07ed      	lsls	r5, r5, #31
   1d9f8:	d50f      	bpl.n	1da1a <GPIOPadConfigSet+0x34>
   1d9fa:	f8d0 6fc4 	ldr.w	r6, [r0, #4036]	; 0xfc4
   1d9fe:	0065      	lsls	r5, r4, #1
   1da00:	fa0e fc05 	lsl.w	ip, lr, r5
   1da04:	ea26 060c 	bic.w	r6, r6, ip
   1da08:	f8c0 6fc4 	str.w	r6, [r0, #4036]	; 0xfc4
   1da0c:	f8d0 6fc4 	ldr.w	r6, [r0, #4036]	; 0xfc4
   1da10:	fa07 f505 	lsl.w	r5, r7, r5
   1da14:	4335      	orrs	r5, r6
   1da16:	f8c0 5fc4 	str.w	r5, [r0, #4036]	; 0xfc4
   1da1a:	3401      	adds	r4, #1
   1da1c:	2c08      	cmp	r4, #8
   1da1e:	d1e8      	bne.n	1d9f2 <GPIOPadConfigSet+0xc>
   1da20:	f8d0 4500 	ldr.w	r4, [r0, #1280]	; 0x500
   1da24:	07d6      	lsls	r6, r2, #31
   1da26:	f500 65a0 	add.w	r5, r0, #1280	; 0x500
   1da2a:	bf4c      	ite	mi
   1da2c:	430c      	orrmi	r4, r1
   1da2e:	438c      	bicpl	r4, r1
   1da30:	602c      	str	r4, [r5, #0]
   1da32:	f8d0 4504 	ldr.w	r4, [r0, #1284]	; 0x504
   1da36:	0797      	lsls	r7, r2, #30
   1da38:	f200 5504 	addw	r5, r0, #1284	; 0x504
   1da3c:	bf4c      	ite	mi
   1da3e:	430c      	orrmi	r4, r1
   1da40:	438c      	bicpl	r4, r1
   1da42:	602c      	str	r4, [r5, #0]
   1da44:	f8d0 4508 	ldr.w	r4, [r0, #1288]	; 0x508
   1da48:	0756      	lsls	r6, r2, #29
   1da4a:	f500 65a1 	add.w	r5, r0, #1288	; 0x508
   1da4e:	bf4c      	ite	mi
   1da50:	430c      	orrmi	r4, r1
   1da52:	438c      	bicpl	r4, r1
   1da54:	602c      	str	r4, [r5, #0]
   1da56:	f8d0 4518 	ldr.w	r4, [r0, #1304]	; 0x518
   1da5a:	0717      	lsls	r7, r2, #28
   1da5c:	f500 65a3 	add.w	r5, r0, #1304	; 0x518
   1da60:	bf4c      	ite	mi
   1da62:	430c      	orrmi	r4, r1
   1da64:	438c      	bicpl	r4, r1
   1da66:	602c      	str	r4, [r5, #0]
   1da68:	f012 0f10 	tst.w	r2, #16
   1da6c:	f8d0 253c 	ldr.w	r2, [r0, #1340]	; 0x53c
   1da70:	f200 543c 	addw	r4, r0, #1340	; 0x53c
   1da74:	bf14      	ite	ne
   1da76:	430a      	orrne	r2, r1
   1da78:	438a      	biceq	r2, r1
   1da7a:	6022      	str	r2, [r4, #0]
   1da7c:	f8d0 250c 	ldr.w	r2, [r0, #1292]	; 0x50c
   1da80:	f200 540c 	addw	r4, r0, #1292	; 0x50c
   1da84:	07de      	lsls	r6, r3, #31
   1da86:	bf4c      	ite	mi
   1da88:	430a      	orrmi	r2, r1
   1da8a:	438a      	bicpl	r2, r1
   1da8c:	6022      	str	r2, [r4, #0]
   1da8e:	f8d0 2510 	ldr.w	r2, [r0, #1296]	; 0x510
   1da92:	f500 64a2 	add.w	r4, r0, #1296	; 0x510
   1da96:	079d      	lsls	r5, r3, #30
   1da98:	bf4c      	ite	mi
   1da9a:	430a      	orrmi	r2, r1
   1da9c:	438a      	bicpl	r2, r1
   1da9e:	6022      	str	r2, [r4, #0]
   1daa0:	f8d0 2514 	ldr.w	r2, [r0, #1300]	; 0x514
   1daa4:	f200 5414 	addw	r4, r0, #1300	; 0x514
   1daa8:	075f      	lsls	r7, r3, #29
   1daaa:	bf4c      	ite	mi
   1daac:	430a      	orrmi	r2, r1
   1daae:	438a      	bicpl	r2, r1
   1dab0:	6022      	str	r2, [r4, #0]
   1dab2:	f8d0 251c 	ldr.w	r2, [r0, #1308]	; 0x51c
   1dab6:	f200 541c 	addw	r4, r0, #1308	; 0x51c
   1daba:	071e      	lsls	r6, r3, #28
   1dabc:	bf4c      	ite	mi
   1dabe:	430a      	orrmi	r2, r1
   1dac0:	438a      	bicpl	r2, r1
   1dac2:	6022      	str	r2, [r4, #0]
   1dac4:	f8d0 2544 	ldr.w	r2, [r0, #1348]	; 0x544
   1dac8:	f200 5444 	addw	r4, r0, #1348	; 0x544
   1dacc:	059d      	lsls	r5, r3, #22
   1dace:	bf4c      	ite	mi
   1dad0:	430a      	orrmi	r2, r1
   1dad2:	438a      	bicpl	r2, r1
   1dad4:	6022      	str	r2, [r4, #0]
   1dad6:	f8d0 2540 	ldr.w	r2, [r0, #1344]	; 0x540
   1dada:	f413 7f40 	tst.w	r3, #768	; 0x300
   1dade:	f500 64a8 	add.w	r4, r0, #1344	; 0x540
   1dae2:	bf14      	ite	ne
   1dae4:	430a      	orrne	r2, r1
   1dae6:	438a      	biceq	r2, r1
   1dae8:	6022      	str	r2, [r4, #0]
   1daea:	f500 62a5 	add.w	r2, r0, #1320	; 0x528
   1daee:	b91b      	cbnz	r3, 1daf8 <GPIOPadConfigSet+0x112>
   1daf0:	f8d0 3528 	ldr.w	r3, [r0, #1320]	; 0x528
   1daf4:	4319      	orrs	r1, r3
   1daf6:	e003      	b.n	1db00 <GPIOPadConfigSet+0x11a>
   1daf8:	f8d0 3528 	ldr.w	r3, [r0, #1320]	; 0x528
   1dafc:	ea23 0101 	bic.w	r1, r3, r1
   1db00:	6011      	str	r1, [r2, #0]
   1db02:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001db04 <GPIOPadConfigGet>:
   1db04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1db08:	2401      	movs	r4, #1
   1db0a:	f8d0 5500 	ldr.w	r5, [r0, #1280]	; 0x500
   1db0e:	fa04 f101 	lsl.w	r1, r4, r1
   1db12:	b2c9      	uxtb	r1, r1
   1db14:	420d      	tst	r5, r1
   1db16:	bf18      	it	ne
   1db18:	46a0      	movne	r8, r4
   1db1a:	f8d0 4504 	ldr.w	r4, [r0, #1284]	; 0x504
   1db1e:	bf08      	it	eq
   1db20:	f04f 0800 	moveq.w	r8, #0
   1db24:	4221      	tst	r1, r4
   1db26:	f8d0 4508 	ldr.w	r4, [r0, #1288]	; 0x508
   1db2a:	bf14      	ite	ne
   1db2c:	f04f 0c02 	movne.w	ip, #2
   1db30:	f04f 0c00 	moveq.w	ip, #0
   1db34:	4221      	tst	r1, r4
   1db36:	f8d0 4518 	ldr.w	r4, [r0, #1304]	; 0x518
   1db3a:	bf14      	ite	ne
   1db3c:	2704      	movne	r7, #4
   1db3e:	2700      	moveq	r7, #0
   1db40:	4221      	tst	r1, r4
   1db42:	f8d0 453c 	ldr.w	r4, [r0, #1340]	; 0x53c
   1db46:	f8d0 5fc4 	ldr.w	r5, [r0, #4036]	; 0xfc4
   1db4a:	bf14      	ite	ne
   1db4c:	2608      	movne	r6, #8
   1db4e:	2600      	moveq	r6, #0
   1db50:	4221      	tst	r1, r4
   1db52:	ea4f 0441 	mov.w	r4, r1, lsl #1
   1db56:	fa25 f404 	lsr.w	r4, r5, r4
   1db5a:	ea4f 1444 	mov.w	r4, r4, lsl #5
   1db5e:	f004 0460 	and.w	r4, r4, #96	; 0x60
   1db62:	ea44 0408 	orr.w	r4, r4, r8
   1db66:	ea44 040c 	orr.w	r4, r4, ip
   1db6a:	ea44 0407 	orr.w	r4, r4, r7
   1db6e:	bf14      	ite	ne
   1db70:	f04f 0e10 	movne.w	lr, #16
   1db74:	f04f 0e00 	moveq.w	lr, #0
   1db78:	4334      	orrs	r4, r6
   1db7a:	ea4e 0404 	orr.w	r4, lr, r4
   1db7e:	6014      	str	r4, [r2, #0]
   1db80:	f8d0 250c 	ldr.w	r2, [r0, #1292]	; 0x50c
   1db84:	f8d0 4510 	ldr.w	r4, [r0, #1296]	; 0x510
   1db88:	4211      	tst	r1, r2
   1db8a:	bf14      	ite	ne
   1db8c:	2201      	movne	r2, #1
   1db8e:	2200      	moveq	r2, #0
   1db90:	4221      	tst	r1, r4
   1db92:	bf14      	ite	ne
   1db94:	2402      	movne	r4, #2
   1db96:	2400      	moveq	r4, #0
   1db98:	4322      	orrs	r2, r4
   1db9a:	f8d0 4514 	ldr.w	r4, [r0, #1300]	; 0x514
   1db9e:	4221      	tst	r1, r4
   1dba0:	bf14      	ite	ne
   1dba2:	2404      	movne	r4, #4
   1dba4:	2400      	moveq	r4, #0
   1dba6:	4322      	orrs	r2, r4
   1dba8:	f8d0 451c 	ldr.w	r4, [r0, #1308]	; 0x51c
   1dbac:	4221      	tst	r1, r4
   1dbae:	bf14      	ite	ne
   1dbb0:	2408      	movne	r4, #8
   1dbb2:	2400      	moveq	r4, #0
   1dbb4:	4322      	orrs	r2, r4
   1dbb6:	f8d0 4540 	ldr.w	r4, [r0, #1344]	; 0x540
   1dbba:	4221      	tst	r1, r4
   1dbbc:	d008      	beq.n	1dbd0 <GPIOPadConfigGet+0xcc>
   1dbbe:	f8d0 0544 	ldr.w	r0, [r0, #1348]	; 0x544
   1dbc2:	4201      	tst	r1, r0
   1dbc4:	bf14      	ite	ne
   1dbc6:	f44f 7100 	movne.w	r1, #512	; 0x200
   1dbca:	f44f 7180 	moveq.w	r1, #256	; 0x100
   1dbce:	430a      	orrs	r2, r1
   1dbd0:	601a      	str	r2, [r3, #0]
   1dbd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001dbd6 <GPIOPinRead>:
   1dbd6:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
   1dbda:	4770      	bx	lr

0001dbdc <GPIOPinWrite>:
   1dbdc:	f840 2021 	str.w	r2, [r0, r1, lsl #2]
   1dbe0:	4770      	bx	lr

0001dbe2 <GPIOPinTypeUSBDigital>:
   1dbe2:	b570      	push	{r4, r5, r6, lr}
   1dbe4:	2202      	movs	r2, #2
   1dbe6:	460d      	mov	r5, r1
   1dbe8:	f7ff fed4 	bl	1d994 <GPIODirModeSet>
   1dbec:	4629      	mov	r1, r5
   1dbee:	2308      	movs	r3, #8
   1dbf0:	2201      	movs	r2, #1
   1dbf2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1dbf6:	f7ff bef6 	b.w	1d9e6 <GPIOPadConfigSet>

0001dbfa <GPIOPinTypeUART>:
   1dbfa:	f7ff bff2 	b.w	1dbe2 <GPIOPinTypeUSBDigital>
	...

0001dc00 <GPIOPinConfigure>:
   1dc00:	4a0e      	ldr	r2, [pc, #56]	; (1dc3c <GPIOPinConfigure+0x3c>)
   1dc02:	f3c0 4307 	ubfx	r3, r0, #16, #8
   1dc06:	6811      	ldr	r1, [r2, #0]
   1dc08:	2201      	movs	r2, #1
   1dc0a:	409a      	lsls	r2, r3
   1dc0c:	420a      	tst	r2, r1
   1dc0e:	ea4f 0343 	mov.w	r3, r3, lsl #1
   1dc12:	4a0b      	ldr	r2, [pc, #44]	; (1dc40 <GPIOPinConfigure+0x40>)
   1dc14:	bf18      	it	ne
   1dc16:	3301      	addne	r3, #1
   1dc18:	b510      	push	{r4, lr}
   1dc1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1dc1e:	f3c0 2407 	ubfx	r4, r0, #8, #8
   1dc22:	f8d3 152c 	ldr.w	r1, [r3, #1324]	; 0x52c
   1dc26:	220f      	movs	r2, #15
   1dc28:	40a2      	lsls	r2, r4
   1dc2a:	f000 000f 	and.w	r0, r0, #15
   1dc2e:	ea21 0202 	bic.w	r2, r1, r2
   1dc32:	40a0      	lsls	r0, r4
   1dc34:	4310      	orrs	r0, r2
   1dc36:	f8c3 052c 	str.w	r0, [r3, #1324]	; 0x52c
   1dc3a:	bd10      	pop	{r4, pc}
   1dc3c:	400fe06c 	.word	0x400fe06c
   1dc40:	00025ee0 	.word	0x00025ee0

0001dc44 <SysCtlPeripheralReady>:
   1dc44:	4b09      	ldr	r3, [pc, #36]	; (1dc6c <SysCtlPeripheralReady+0x28>)
   1dc46:	f3c0 2207 	ubfx	r2, r0, #8, #8
   1dc4a:	4413      	add	r3, r2
   1dc4c:	015b      	lsls	r3, r3, #5
   1dc4e:	0080      	lsls	r0, r0, #2
   1dc50:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   1dc54:	f400 707f 	and.w	r0, r0, #1020	; 0x3fc
   1dc58:	f023 031f 	bic.w	r3, r3, #31
   1dc5c:	f040 4084 	orr.w	r0, r0, #1107296256	; 0x42000000
   1dc60:	4318      	orrs	r0, r3
   1dc62:	6800      	ldr	r0, [r0, #0]
   1dc64:	3000      	adds	r0, #0
   1dc66:	bf18      	it	ne
   1dc68:	2001      	movne	r0, #1
   1dc6a:	4770      	bx	lr
   1dc6c:	400fea00 	.word	0x400fea00

0001dc70 <SysCtlPeripheralEnable>:
   1dc70:	4b08      	ldr	r3, [pc, #32]	; (1dc94 <SysCtlPeripheralEnable+0x24>)
   1dc72:	f3c0 2207 	ubfx	r2, r0, #8, #8
   1dc76:	4413      	add	r3, r2
   1dc78:	015b      	lsls	r3, r3, #5
   1dc7a:	0080      	lsls	r0, r0, #2
   1dc7c:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   1dc80:	f400 707f 	and.w	r0, r0, #1020	; 0x3fc
   1dc84:	f023 031f 	bic.w	r3, r3, #31
   1dc88:	f040 4084 	orr.w	r0, r0, #1107296256	; 0x42000000
   1dc8c:	4318      	orrs	r0, r3
   1dc8e:	2301      	movs	r3, #1
   1dc90:	6003      	str	r3, [r0, #0]
   1dc92:	4770      	bx	lr
   1dc94:	400fe600 	.word	0x400fe600

0001dc98 <SysCtlReset>:
   1dc98:	4b01      	ldr	r3, [pc, #4]	; (1dca0 <SysCtlReset+0x8>)
   1dc9a:	4a02      	ldr	r2, [pc, #8]	; (1dca4 <SysCtlReset+0xc>)
   1dc9c:	601a      	str	r2, [r3, #0]
   1dc9e:	e7fe      	b.n	1dc9e <SysCtlReset+0x6>
   1dca0:	e000ed0c 	.word	0xe000ed0c
   1dca4:	05fa0004 	.word	0x05fa0004

0001dca8 <SysCtlSleep>:
   1dca8:	f000 b8c2 	b.w	1de30 <CPUwfi>

0001dcac <SysCtlDeepSleep>:
   1dcac:	b510      	push	{r4, lr}
   1dcae:	4c06      	ldr	r4, [pc, #24]	; (1dcc8 <SysCtlDeepSleep+0x1c>)
   1dcb0:	6823      	ldr	r3, [r4, #0]
   1dcb2:	f043 0304 	orr.w	r3, r3, #4
   1dcb6:	6023      	str	r3, [r4, #0]
   1dcb8:	f000 f8ba 	bl	1de30 <CPUwfi>
   1dcbc:	6823      	ldr	r3, [r4, #0]
   1dcbe:	f023 0304 	bic.w	r3, r3, #4
   1dcc2:	6023      	str	r3, [r4, #0]
   1dcc4:	bd10      	pop	{r4, pc}
   1dcc6:	bf00      	nop
   1dcc8:	e000ed10 	.word	0xe000ed10

0001dccc <SysCtlResetCauseGet>:
   1dccc:	4b01      	ldr	r3, [pc, #4]	; (1dcd4 <SysCtlResetCauseGet+0x8>)
   1dcce:	6818      	ldr	r0, [r3, #0]
   1dcd0:	4770      	bx	lr
   1dcd2:	bf00      	nop
   1dcd4:	400fe05c 	.word	0x400fe05c

0001dcd8 <SysCtlResetCauseClear>:
   1dcd8:	4a02      	ldr	r2, [pc, #8]	; (1dce4 <SysCtlResetCauseClear+0xc>)
   1dcda:	6813      	ldr	r3, [r2, #0]
   1dcdc:	ea23 0000 	bic.w	r0, r3, r0
   1dce0:	6010      	str	r0, [r2, #0]
   1dce2:	4770      	bx	lr
   1dce4:	400fe05c 	.word	0x400fe05c

0001dce8 <SysCtlClockGet>:
   1dce8:	4b46      	ldr	r3, [pc, #280]	; (1de04 <SysCtlClockGet+0x11c>)
   1dcea:	b570      	push	{r4, r5, r6, lr}
   1dcec:	681d      	ldr	r5, [r3, #0]
   1dcee:	691a      	ldr	r2, [r3, #16]
   1dcf0:	2a00      	cmp	r2, #0
   1dcf2:	da10      	bge.n	1dd16 <SysCtlClockGet+0x2e>
   1dcf4:	f002 0370 	and.w	r3, r2, #112	; 0x70
   1dcf8:	2b20      	cmp	r3, #32
   1dcfa:	d022      	beq.n	1dd42 <SysCtlClockGet+0x5a>
   1dcfc:	d804      	bhi.n	1dd08 <SysCtlClockGet+0x20>
   1dcfe:	b1c3      	cbz	r3, 1dd32 <SysCtlClockGet+0x4a>
   1dd00:	2b10      	cmp	r3, #16
   1dd02:	d17a      	bne.n	1ddfa <SysCtlClockGet+0x112>
   1dd04:	4b40      	ldr	r3, [pc, #256]	; (1de08 <SysCtlClockGet+0x120>)
   1dd06:	e01d      	b.n	1dd44 <SysCtlClockGet+0x5c>
   1dd08:	2b30      	cmp	r3, #48	; 0x30
   1dd0a:	d078      	beq.n	1ddfe <SysCtlClockGet+0x116>
   1dd0c:	2b70      	cmp	r3, #112	; 0x70
   1dd0e:	d174      	bne.n	1ddfa <SysCtlClockGet+0x112>
   1dd10:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   1dd14:	e016      	b.n	1dd44 <SysCtlClockGet+0x5c>
   1dd16:	f005 0330 	and.w	r3, r5, #48	; 0x30
   1dd1a:	2b10      	cmp	r3, #16
   1dd1c:	d015      	beq.n	1dd4a <SysCtlClockGet+0x62>
   1dd1e:	d801      	bhi.n	1dd24 <SysCtlClockGet+0x3c>
   1dd20:	b13b      	cbz	r3, 1dd32 <SysCtlClockGet+0x4a>
   1dd22:	e06a      	b.n	1ddfa <SysCtlClockGet+0x112>
   1dd24:	2b20      	cmp	r3, #32
   1dd26:	d012      	beq.n	1dd4e <SysCtlClockGet+0x66>
   1dd28:	2b30      	cmp	r3, #48	; 0x30
   1dd2a:	d166      	bne.n	1ddfa <SysCtlClockGet+0x112>
   1dd2c:	f247 5330 	movw	r3, #30000	; 0x7530
   1dd30:	e00e      	b.n	1dd50 <SysCtlClockGet+0x68>
   1dd32:	f3c5 1184 	ubfx	r1, r5, #6, #5
   1dd36:	4b35      	ldr	r3, [pc, #212]	; (1de0c <SysCtlClockGet+0x124>)
   1dd38:	2a00      	cmp	r2, #0
   1dd3a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   1dd3e:	da07      	bge.n	1dd50 <SysCtlClockGet+0x68>
   1dd40:	e000      	b.n	1dd44 <SysCtlClockGet+0x5c>
   1dd42:	4b33      	ldr	r3, [pc, #204]	; (1de10 <SysCtlClockGet+0x128>)
   1dd44:	f412 6f00 	tst.w	r2, #2048	; 0x800
   1dd48:	e004      	b.n	1dd54 <SysCtlClockGet+0x6c>
   1dd4a:	4b2f      	ldr	r3, [pc, #188]	; (1de08 <SysCtlClockGet+0x120>)
   1dd4c:	e000      	b.n	1dd50 <SysCtlClockGet+0x68>
   1dd4e:	4b30      	ldr	r3, [pc, #192]	; (1de10 <SysCtlClockGet+0x128>)
   1dd50:	f415 6f00 	tst.w	r5, #2048	; 0x800
   1dd54:	d134      	bne.n	1ddc0 <SysCtlClockGet+0xd8>
   1dd56:	492f      	ldr	r1, [pc, #188]	; (1de14 <SysCtlClockGet+0x12c>)
   1dd58:	680e      	ldr	r6, [r1, #0]
   1dd5a:	684c      	ldr	r4, [r1, #4]
   1dd5c:	f3c4 2004 	ubfx	r0, r4, #8, #5
   1dd60:	f004 041f 	and.w	r4, r4, #31
   1dd64:	3401      	adds	r4, #1
   1dd66:	0061      	lsls	r1, r4, #1
   1dd68:	fb00 1101 	mla	r1, r0, r1, r1
   1dd6c:	fbb3 f1f1 	udiv	r1, r3, r1
   1dd70:	f3c6 0309 	ubfx	r3, r6, #0, #10
   1dd74:	f3c6 2689 	ubfx	r6, r6, #10, #10
   1dd78:	434e      	muls	r6, r1
   1dd7a:	0ab6      	lsrs	r6, r6, #10
   1dd7c:	fb01 6303 	mla	r3, r1, r3, r6
   1dd80:	4925      	ldr	r1, [pc, #148]	; (1de18 <SysCtlClockGet+0x130>)
   1dd82:	6809      	ldr	r1, [r1, #0]
   1dd84:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
   1dd88:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
   1dd8c:	f445 0580 	orr.w	r5, r5, #4194304	; 0x400000
   1dd90:	d012      	beq.n	1ddb8 <SysCtlClockGet+0xd0>
   1dd92:	d807      	bhi.n	1dda4 <SysCtlClockGet+0xbc>
   1dd94:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
   1dd98:	d00c      	beq.n	1ddb4 <SysCtlClockGet+0xcc>
   1dd9a:	f5b1 5f40 	cmp.w	r1, #12288	; 0x3000
   1dd9e:	d10f      	bne.n	1ddc0 <SysCtlClockGet+0xd8>
   1dda0:	481e      	ldr	r0, [pc, #120]	; (1de1c <SysCtlClockGet+0x134>)
   1dda2:	e00f      	b.n	1ddc4 <SysCtlClockGet+0xdc>
   1dda4:	f5b1 4fe0 	cmp.w	r1, #28672	; 0x7000
   1dda8:	d008      	beq.n	1ddbc <SysCtlClockGet+0xd4>
   1ddaa:	f5b1 4f10 	cmp.w	r1, #36864	; 0x9000
   1ddae:	d107      	bne.n	1ddc0 <SysCtlClockGet+0xd8>
   1ddb0:	481b      	ldr	r0, [pc, #108]	; (1de20 <SysCtlClockGet+0x138>)
   1ddb2:	e007      	b.n	1ddc4 <SysCtlClockGet+0xdc>
   1ddb4:	481b      	ldr	r0, [pc, #108]	; (1de24 <SysCtlClockGet+0x13c>)
   1ddb6:	e005      	b.n	1ddc4 <SysCtlClockGet+0xdc>
   1ddb8:	481b      	ldr	r0, [pc, #108]	; (1de28 <SysCtlClockGet+0x140>)
   1ddba:	e003      	b.n	1ddc4 <SysCtlClockGet+0xdc>
   1ddbc:	481b      	ldr	r0, [pc, #108]	; (1de2c <SysCtlClockGet+0x144>)
   1ddbe:	e001      	b.n	1ddc4 <SysCtlClockGet+0xdc>
   1ddc0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1ddc4:	026e      	lsls	r6, r5, #9
   1ddc6:	d514      	bpl.n	1ddf2 <SysCtlClockGet+0x10a>
   1ddc8:	2a00      	cmp	r2, #0
   1ddca:	da0d      	bge.n	1dde8 <SysCtlClockGet+0x100>
   1ddcc:	0054      	lsls	r4, r2, #1
   1ddce:	d505      	bpl.n	1dddc <SysCtlClockGet+0xf4>
   1ddd0:	0511      	lsls	r1, r2, #20
   1ddd2:	d403      	bmi.n	1dddc <SysCtlClockGet+0xf4>
   1ddd4:	005b      	lsls	r3, r3, #1
   1ddd6:	f3c2 5286 	ubfx	r2, r2, #22, #7
   1ddda:	e001      	b.n	1dde0 <SysCtlClockGet+0xf8>
   1dddc:	f3c2 52c5 	ubfx	r2, r2, #23, #6
   1dde0:	3201      	adds	r2, #1
   1dde2:	fbb3 f3f2 	udiv	r3, r3, r2
   1dde6:	e004      	b.n	1ddf2 <SysCtlClockGet+0x10a>
   1dde8:	f3c5 55c3 	ubfx	r5, r5, #23, #4
   1ddec:	3501      	adds	r5, #1
   1ddee:	fbb3 f3f5 	udiv	r3, r3, r5
   1ddf2:	4298      	cmp	r0, r3
   1ddf4:	bf28      	it	cs
   1ddf6:	4618      	movcs	r0, r3
   1ddf8:	bd70      	pop	{r4, r5, r6, pc}
   1ddfa:	2000      	movs	r0, #0
   1ddfc:	bd70      	pop	{r4, r5, r6, pc}
   1ddfe:	f247 5330 	movw	r3, #30000	; 0x7530
   1de02:	e79f      	b.n	1dd44 <SysCtlClockGet+0x5c>
   1de04:	400fe060 	.word	0x400fe060
   1de08:	00f42400 	.word	0x00f42400
   1de0c:	00025f70 	.word	0x00025f70
   1de10:	003d0900 	.word	0x003d0900
   1de14:	400fe160 	.word	0x400fe160
   1de18:	400fe010 	.word	0x400fe010
   1de1c:	02faf080 	.word	0x02faf080
   1de20:	01312d00 	.word	0x01312d00
   1de24:	04c4b400 	.word	0x04c4b400
   1de28:	02625a00 	.word	0x02625a00
   1de2c:	017d7840 	.word	0x017d7840

0001de30 <CPUwfi>:
   1de30:	bf30      	wfi
   1de32:	4770      	bx	lr

0001de34 <__func__.6821>:
   1de34:	6367 665f 6572 0065                         gc_free.

0001de3c <__func__.6714>:
   1de3c:	6367 695f 696e 0074                         gc_init.

0001de44 <__func__.6838>:
   1de44:	6367 725f 6165 6c6c 636f 0000 4556 4952     gc_realloc..VERI
   1de54:	5946 505f 5254 7028 7274 0029 2e2e 2e2f     FY_PTR(ptr).../.
   1de64:	2f2e 7970 672f 2e63 0063 0000 5441 5f42     ./py/gc.c...ATB_
   1de74:	4547 5f54 494b 444e 6228 6f6c 6b63 2029     GET_KIND(block) 
   1de84:	3d3d 4120 5f54 4548 4441 0000 504d 535f     == AT_HEAD..MP_S
   1de94:	4154 4554 4d5f 4d45 6728 5f63 6f70 6c6f     TATE_MEM(gc_pool
   1dea4:	735f 6174 7472 2029 3d3e 4d20 5f50 5453     _start) >= MP_ST
   1deb4:	5441 5f45 454d 284d 6367 665f 6e69 6c61     ATE_MEM(gc_final
   1dec4:	7369 7265 745f 6261 656c 735f 6174 7472     iser_table_start
   1ded4:	2029 202b 6367 665f 6e69 6c61 7369 7265     ) + gc_finaliser
   1dee4:	745f 6261 656c 625f 7479 5f65 656c 006e     _table_byte_len.
   1def4:	5441 5f42 4547 5f54 494b 444e 6228 296c     ATB_GET_KIND(bl)
   1df04:	3d20 203d 5441 465f 4552 0045 4347 203a      == AT_FREE.GC: 
   1df14:	6f74 6174 3a6c 2520 2c75 7520 6573 3a64     total: %u, used:
   1df24:	2520 2c75 6620 6572 3a65 2520 0a75 0000      %u, free: %u...
   1df34:	4e20 2e6f 6f20 2066 2d31 6c62 636f 736b      No. of 1-blocks
   1df44:	203a 7525 202c 2d32 6c62 636f 736b 203a     : %u, 2-blocks: 
   1df54:	7525 202c 616d 2078 6c62 206b 7a73 203a     %u, max blk sz: 
   1df64:	7525 202c 616d 2078 7266 6565 7320 3a7a     %u, max free sz:
   1df74:	2520 0a75 0000 0000 4347 6d20 6d65 726f      %u.....GC memor
   1df84:	2079 616c 6f79 7475 203b 7266 6d6f 2520     y layout; from %
   1df94:	3a70 0000 000a 0000 200a 2020 2020 2020     p:.......       
   1dfa4:	2528 2075 696c 656e 2073 6c61 206c 7266     (%u lines all fr
   1dfb4:	6565 0029 250a 3530 3a78 0020 6325 0000     ee)..%05x: .%c..
   1dfc4:	0000 0000 0005 0000 07c4 5f5f 6461 5f64     ..........__add_
   1dfd4:	005f 0000 082b 5f5f 6f62 6c6f 5f5f 0000     _...+.__bool__..
   1dfe4:	0f42 5f5f 7562 6c69 5f64 6c63 7361 5f73     B.__build_class_
   1dff4:	005f 0000 08a7 5f5f 6163 6c6c 5f5f 0000     _.....__call__..
   1e004:	092b 5f5f 6c63 7361 5f73 005f 0cc6 5f5f     +.__class__...__
   1e014:	6f63 746e 6961 736e 5f5f 0000 0768 5f5f     contains__..h.__
   1e024:	6564 5f6c 005f 0000 0bfd 5f5f 6564 696c     del__.....__deli
   1e034:	6574 5f6d 005f 0000 096d 5f5f 6e65 6574     tem__...m.__ente
   1e044:	5f72 005f 0671 5f5f 7165 5f5f 0000 0000     r__.q.__eq__....
   1e054:	0845 5f5f 7865 7469 5f5f 0000 06a7 5f5f     E.__exit__....__
   1e064:	6567 5f5f 0000 0000 0b40 5f5f 6567 6174     ge__....@.__geta
   1e074:	7474 5f72 005f 0000 0b26 5f5f 6567 6974     ttr__...&.__geti
   1e084:	6574 5f6d 005f 0000 06b6 5f5f 7467 5f5f     tem__.....__gt__
   1e094:	0000 0000 08f7 5f5f 6168 6873 5f5f 0000     ......__hash__..
   1e0a4:	086d 5f5f 6169 6464 5f5f 0000 0a38 5f5f     m.__iadd__..8.__
   1e0b4:	6d69 6f70 7472 5f5f 0000 0000 085f 5f5f     import__...._.__
   1e0c4:	6e69 7469 5f5f 0000 0808 5f5f 7369 6275     init__....__isub
   1e0d4:	5f5f 0000 08cf 5f5f 7469 7265 5f5f 0000     __....__iter__..
   1e0e4:	06cc 5f5f 656c 5f5f 0000 0000 07e2 5f5f     ..__le__......__
   1e0f4:	656c 5f6e 005f 0000 065d 5f5f 746c 5f5f     len__...].__lt__
   1e104:	0000 0000 088e 5f5f 616d 6e69 5f5f 0000     ......__main__..
   1e114:	0aff 5f5f 6f6d 7564 656c 5f5f 0000 0000     ..__module__....
   1e124:	08e2 5f5f 616e 656d 5f5f 0000 0779 5f5f     ..__name__..y.__
   1e134:	656e 5f77 005f 0000 0802 5f5f 656e 7478     new__.....__next
   1e144:	5f5f 0000 08c8 5f5f 6170 6874 5f5f 0000     __....__path__..
   1e154:	0c6b 5f5f 7571 6c61 616e 656d 5f5f 0000     k.__qualname__..
   1e164:	0e01 5f5f 6572 6c70 705f 6972 746e 5f5f     ..__repl_print__
   1e174:	0000 0000 0810 5f5f 6572 7270 5f5f 0000     ......__repr__..
   1e184:	0b32 5f5f 6573 6974 6574 5f6d 005f 0000     2.__setitem__...
   1e194:	07d0 5f5f 7473 5f72 005f 0000 0721 5f5f     ..__str__...!.__
   1e1a4:	7573 5f62 005f 0000 0d4f 5f5f 7274 6361     sub__...O.__trac
   1e1b4:	6265 6361 5f6b 005f 018f 002a 01fa 005f     eback__...*..._.
   1e1c4:	018a 002f 036c 2325 006f 0000 037b 2325     ../.l.%#o...{.%#
   1e1d4:	0078 0000 0558 3a7b 6223 007d 0185 0020     x...X.{:#b}... .
   1e1e4:	01af 000a 2073 616d 6978 756d 206d 6572     ....s maximum re
   1e1f4:	7563 7372 6f69 206e 6564 7470 2068 7865     cursion depth ex
   1e204:	6563 6465 6465 0000 08bd 6d3c 646f 6c75     ceeded....<modul
   1e214:	3e65 0000 0880 6c3c 6d61 6462 3e61 0000     e>....<lambda>..
   1e224:	0ad4 6c3c 7369 6374 6d6f 3e70 0000 0000     ..<listcomp>....
   1e234:	0acc 643c 6369 6374 6d6f 3e70 0000 0000     ..<dictcomp>....
   1e244:	0954 733c 7465 6f63 706d 003e 0934 673c     T.<setcomp>.4.<g
   1e254:	6e65 7865 7270 003e 0852 733c 7274 6e69     enexpr>.R.<strin
   1e264:	3e67 0000 07e3 733c 6474 6e69 003e 0000     g>....<stdin>...
   1e274:	05b7 7475 2d66 0038 061a 662f 616c 6873     ..utf-8.../flash
   1e284:	0000 0000 0a92 662f 616c 6873 6c2f 6269     ....../flash/lib
   1e294:	0000 0000 0364 4150 0030 0000 0365 4150     ....d.PA0...e.PA
   1e2a4:	0031 0000 0366 4150 0032 0000 0367 4150     1...f.PA2...g.PA
   1e2b4:	0033 0000 0360 4150 0034 0000 0361 4150     3...`.PA4...a.PA
   1e2c4:	0035 0000 0362 4150 0036 0000 0363 4150     5...b.PA6...c.PA
   1e2d4:	0037 0000 0387 4250 0030 0000 0386 4250     7.....PB0.....PB
   1e2e4:	0031 0000 0385 4250 0032 0000 0384 4250     1.....PB2.....PB
   1e2f4:	0033 0000 0383 4250 0034 0000 0382 4250     3.....PB4.....PB
   1e304:	0035 0000 0381 4250 0036 0000 0380 4250     5.....PB6.....PB
   1e314:	0037 0000 03a6 4350 0030 0000 03a7 4350     7.....PC0.....PC
   1e324:	0031 0000 03a4 4350 0032 0000 03a5 4350     1.....PC2.....PC
   1e334:	0033 0000 03a2 4350 0034 0000 03a3 4350     3.....PC4.....PC
   1e344:	0035 0000 03a0 4350 0036 0000 03a1 4350     5.....PC6.....PC
   1e354:	0037 0000 03c1 4450 0030 0000 03c0 4450     7.....PD0.....PD
   1e364:	0031 0000 03c3 4450 0032 0000 03c2 4450     1.....PD2.....PD
   1e374:	0033 0000 03c5 4450 0034 0000 03c4 4450     3.....PD4.....PD
   1e384:	0035 0000 03c7 4450 0036 0000 03c6 4450     5.....PD6.....PD
   1e394:	0037 0000 03e0 4550 0030 0000 03e1 4550     7.....PE0.....PE
   1e3a4:	0031 0000 03e2 4550 0032 0000 03e3 4550     1.....PE2.....PE
   1e3b4:	0033 0000 03e4 4550 0034 0000 03e5 4550     3.....PE4.....PE
   1e3c4:	0035 0000 0303 4650 0030 0000 0302 4650     5.....PF0.....PF
   1e3d4:	0031 0000 0301 4650 0032 0000 0301 4650     1.....PF2.....PF
   1e3e4:	0033 0000 0307 4650 0034 0000 088a 4441     3.....PF4.....AD
   1e3f4:	5f43 4941 304e 0000 088b 4441 5f43 4941     C_AIN0....ADC_AI
   1e404:	314e 0000 09db 4441 5f43 4941 314e 0030     N1....ADC_AIN10.
   1e414:	09da 4441 5f43 4941 314e 0031 0888 4441     ..ADC_AIN11...AD
   1e424:	5f43 4941 324e 0000 0889 4441 5f43 4941     C_AIN2....ADC_AI
   1e434:	334e 0000 088e 4441 5f43 4941 344e 0000     N3....ADC_AIN4..
   1e444:	088f 4441 5f43 4941 354e 0000 088c 4441     ..ADC_AIN5....AD
   1e454:	5f43 4941 364e 0000 088d 4441 5f43 4941     C_AIN6....ADC_AI
   1e464:	374e 0000 0882 4441 5f43 4941 384e 0000     N7....ADC_AIN8..
   1e474:	0883 4441 5f43 4941 394e 0000 080e 3249     ..ADC_AIN9....I2
   1e484:	3043 535f 4c43 0000 08e4 3249 3043 535f     C0_SCL....I2C0_S
   1e494:	4144 0000 088f 3249 3143 535f 4c43 0000     DA....I2C1_SCL..
   1e4a4:	08a5 3249 3143 535f 4144 0000 080c 3249     ..I2C1_SDA....I2
   1e4b4:	3243 535f 4c43 0000 088d 3249 3343 535f     C2_SCL....I2C3_S
   1e4c4:	4c43 0000 0e21 544a 4741 545f 4b43 535f     CL..!.JTAG_TCK_S
   1e4d4:	4357 4b4c 0000 0000 089b 544a 4741 545f     WCLK......JTAG_T
   1e4e4:	4944 0000 0c49 544a 4741 545f 4f44 535f     DI..I.JTAG_TDO_S
   1e4f4:	4f57 0000 0e11 544a 4741 545f 534d 535f     WO....JTAG_TMS_S
   1e504:	4457 4f49 0000 0000 0c97 544d 4c52 5f30     WDIO......MTRL0_
   1e514:	4146 4c55 3054 0000 0a97 544d 4c52 5f30     FAULT0....MTRL0_
   1e524:	5750 304d 0000 0000 0a96 544d 4c52 5f30     PWM0......MTRL0_
   1e534:	5750 314d 0000 0000 0a95 544d 4c52 5f30     PWM1......MTRL0_
   1e544:	5750 324d 0000 0000 0a94 544d 4c52 5f30     PWM2......MTRL0_
   1e554:	5750 334d 0000 0000 0a93 544d 4c52 5f30     PWM3......MTRL0_
   1e564:	5750 344d 0000 0000 0a92 544d 4c52 5f30     PWM4......MTRL0_
   1e574:	5750 354d 0000 0000 0a91 544d 4c52 5f30     PWM5......MTRL0_
   1e584:	5750 364d 0000 0000 0a90 544d 4c52 5f30     PWM6......MTRL0_
   1e594:	5750 374d 0000 0000 0c76 544d 4c52 5f31     PWM7....v.MTRL1_
   1e5a4:	4146 4c55 3054 0000 0a36 544d 4c52 5f31     FAULT0..6.MTRL1_
   1e5b4:	5750 304d 0000 0000 0a37 544d 4c52 5f31     PWM0....7.MTRL1_
   1e5c4:	5750 314d 0000 0000 0a34 544d 4c52 5f31     PWM1....4.MTRL1_
   1e5d4:	5750 324d 0000 0000 0a35 544d 4c52 5f31     PWM2....5.MTRL1_
   1e5e4:	5750 334d 0000 0000 0a32 544d 4c52 5f31     PWM3....2.MTRL1_
   1e5f4:	5750 344d 0000 0000 0a33 544d 4c52 5f31     PWM4....3.MTRL1_
   1e604:	5750 354d 0000 0000 0a30 544d 4c52 5f31     PWM5....0.MTRL1_
   1e614:	5750 364d 0000 0000 0a31 544d 4c52 5f31     PWM6....1.MTRL1_
   1e624:	5750 374d 0000 0000 038f 4d4e 0049 0000     PWM7......NMI...
   1e634:	0802 4551 5f49 4449 3058 0000 0803 4551     ..QEI_IDX0....QE
   1e644:	5f49 4449 3158 0000 093a 4954 304d 435f     I_IDX1..:.TIM0_C
   1e654:	5043 0030 093b 4954 304d 435f 5043 0031     CP0.;.TIM0_CCP1.
   1e664:	099b 4954 314d 435f 5043 0030 099a 4954     ..TIM1_CCP0...TI
   1e674:	314d 435f 5043 0031 09f8 4954 324d 435f     M1_CCP1...TIM2_C
   1e684:	5043 0030 09f9 4954 324d 435f 5043 0031     CP0...TIM2_CCP1.
   1e694:	0959 4954 334d 435f 5043 0030 0958 4954     Y.TIM3_CCP0.X.TI
   1e6a4:	334d 435f 5043 0031 09be 4954 344d 435f     M3_CCP1...TIM4_C
   1e6b4:	5043 0030 09bf 4954 344d 435f 5043 0031     CP0...TIM4_CCP1.
   1e6c4:	091f 4954 354d 435f 5043 0030 091e 4954     ..TIM5_CCP0...TI
   1e6d4:	354d 435f 5043 0031 0508 5254 445f 0030     M5_CCP1...TR_D0.
   1e6e4:	0509 5254 445f 0031 099d 4155 5452 5f31     ..TR_D1...UART1_
   1e6f4:	5443 0053 094c 4155 5452 5f31 5452 0053     CTS.L.UART1_RTS.
   1e704:	07a7 5355 3042 445f 004d 0000 07ba 5355     ..USB0_DM.....US
   1e714:	3042 445f 0050 0000 09f0 5355 3042 455f     B0_DP.....USB0_E
   1e724:	4550 004e 07c3 5355 3042 495f 0044 0000     PEN...USB0_ID...
   1e734:	09a0 5355 3042 505f 4c46 0054 091c 5355     ..USB0_PFLT...US
   1e744:	3042 565f 5542 0053 0aed 5457 4d49 5f30     B0_VBUS...WTIM0_
   1e754:	4343 3050 0000 0000 0aec 5457 4d49 5f30     CCP0......WTIM0_
   1e764:	4343 3150 0000 0000 0a0c 5457 4d49 5f31     CCP1......WTIM1_
   1e774:	4343 3050 0000 0000 0a0d 5457 4d49 5f31     CCP0......WTIM1_
   1e784:	4343 3150 0000 0000 0a2f 5457 4d49 5f32     CCP1..../.WTIM2_
   1e794:	4343 3050 0000 0000 0a2e 5457 4d49 5f32     CCP0......WTIM2_
   1e7a4:	4343 3150 0000 0000 0a4e 5457 4d49 5f33     CCP1....N.WTIM3_
   1e7b4:	4343 3050 0000 0000 0a4f 5457 4d49 5f33     CCP0....O.WTIM3_
   1e7c4:	4343 3150 0000 0000 0a69 5457 4d49 5f34     CCP1....i.WTIM4_
   1e7d4:	4343 3050 0000 0000 0a68 5457 4d49 5f34     CCP0....h.WTIM4_
   1e7e4:	4343 3150 0000 0000 0a88 5457 4d49 5f35     CCP1......WTIM5_
   1e7f4:	4343 3050 0000 0000 0a89 5457 4d49 5f35     CCP0......WTIM5_
   1e804:	4343 3150 0000 0000 037c 4c41 0054 0000     CCP1....|.ALT...
   1e814:	0ef8 4c41 5f54 504f 4e45 445f 4152 4e49     ..ALT_OPEN_DRAIN
   1e824:	0000 0000 06af 4e41 4c41 474f 0000 0000     ......ANALOG....
   1e834:	0f2d 7241 7469 6d68 7465 6369 7245 6f72     -.ArithmeticErro
   1e844:	0072 0000 0e97 7341 6573 7472 6f69 456e     r.....AssertionE
   1e854:	7272 726f 0000 0000 0e21 7441 7274 6269     rror....!.Attrib
   1e864:	7475 4565 7272 726f 0000 0000 0d07 6142     uteError......Ba
   1e874:	6573 7845 6563 7470 6f69 006e 0f14 4544     seException...DE
   1e884:	5045 4c53 4545 5f50 4552 4553 0054 0000     EPSLEEP_RESET...
   1e894:	0891 4f45 4546 7272 726f 0000 08f0 6c45     ..EOFError....El
   1e8a4:	696c 7370 7369 0000 09f2 7845 6563 7470     lipsis....Except
   1e8b4:	6f69 006e 0d16 6547 656e 6172 6f74 4572     ion...GeneratorE
   1e8c4:	6978 0074 0ab0 4148 4452 525f 5345 5445     xit...HARD_RESET
   1e8d4:	0000 0000 08a4 4948 505f 574f 5245 0000     ......HI_POWER..
   1e8e4:	0222 4e49 0000 0000 08c1 5249 5f51 4f42     ".IN......IRQ_BO
   1e8f4:	4854 0000 0b37 5249 5f51 4146 4c4c 4e49     TH..7.IRQ_FALLIN
   1e904:	0047 0000 083e 5249 5f51 4948 4847 0000     G...>.IRQ_HIGH..
   1e914:	07e4 5249 5f51 4f4c 0057 0000 0a78 5249     ..IRQ_LOW...x.IR
   1e924:	5f51 4952 4953 474e 0000 0000 0b20 6d49     Q_RISING.... .Im
   1e934:	6f70 7472 7245 6f72 0072 0000 105c 6e49     portError...\.In
   1e944:	6564 746e 7461 6f69 456e 7272 726f 0000     dentationError..
   1e954:	0a83 6e49 6564 4578 7272 726f 0000 0000     ..IndexError....
   1e964:	08ea 654b 4579 7272 726f 0000 11af 654b     ..KeyError....Ke
   1e974:	6279 616f 6472 6e49 6574 7272 7075 0074     yboardInterrupt.
   1e984:	09b1 4f4c 5f57 4f50 4557 0052 0bff 6f4c     ..LOW_POWER...Lo
   1e994:	6b6f 7075 7245 6f72 0072 0000 0969 454d     okupError...i.ME
   1e9a4:	5f44 4f50 4557 0052 0bdc 654d 6f6d 7972     D_POWER...Memory
   1e9b4:	7245 6f72 0072 0000 09ba 614e 656d 7245     Error.....NameEr
   1e9c4:	6f72 0072 0817 6f4e 656e 7954 6570 0000     ror...NoneType..
   1e9d4:	13c6 6f4e 4974 706d 656c 656d 746e 6465     ..NotImplemented
   1e9e4:	7245 6f72 0072 0000 0a5e 504f 4e45 445f     Error...^.OPEN_D
   1e9f4:	4152 4e49 0000 0000 07a1 534f 7245 6f72     RAIN......OSErro
   1ea04:	0072 0000 030b 554f 0054 0000 0d81 764f     r.....OUT.....Ov
   1ea14:	7265 6c66 776f 7245 6f72 0072 09ad 5550     erflowError...PU
   1ea24:	4c4c 445f 574f 004e 0955 5550 4c4c 4e5f     LL_DOWN.U.PULL_N
   1ea34:	4e4f 0045 07ba 5550 4c4c 555f 0050 0000     ONE...PULL_UP...
   1ea44:	0bdb 5750 4f52 5f4e 4552 4553 0054 0000     ..PWRON_RESET...
   1ea54:	0312 6950 006e 0000 0c61 7552 746e 6d69     ..Pin...a.Runtim
   1ea64:	4565 7272 726f 0000 0a01 4f53 5446 525f     eError....SOFT_R
   1ea74:	5345 5445 0000 0000 0dea 7453 706f 7449     ESET......StopIt
   1ea84:	7265 7461 6f69 006e 0b94 7953 746e 7861     eration...Syntax
   1ea94:	7245 6f72 0072 0000 0a20 7953 7473 6d65     Error... .System
   1eaa4:	7845 7469 0000 0000 0925 7954 6570 7245     Exit....%.TypeEr
   1eab4:	6f72 0072 0a96 6156 756c 4565 7272 726f     ror...ValueError
   1eac4:	0000 0000 0908 4457 5f54 4552 4553 0054     ......WDT_RESET.
   1ead4:	11b6 655a 6f72 6944 6976 6973 6e6f 7245     ..ZeroDivisionEr
   1eae4:	6f72 0072 0395 6261 0073 0000 0222 6661     ror...abs...".af
   1eaf4:	0000 0000 075f 6661 6c5f 7369 0074 0000     ...._.af_list...
   1eb04:	0344 6c61 006c 0000 035c 6c61 0074 0000     D.all...\.alt...
   1eb14:	0313 6e61 0079 0000 066b 7061 6570 646e     ..any...k.append
   1eb24:	0000 0000 04c2 7261 7367 0000 03e0 6962     ......args....bi
   1eb34:	006e 0000 057f 6f62 7261 0064 04eb 6f62     n.....board...bo
   1eb44:	6c6f 0000 0ae2 6f62 746f 6f6c 6461 7265     ol....bootloader
   1eb54:	0000 0000 0c97 6f62 6e75 5f64 656d 6874     ......bound_meth
   1eb64:	646f 0000 08f7 7562 6c69 6974 736e 0000     od....builtins..
   1eb74:	0822 7962 6574 6f63 6564 0000 055c 7962     ".bytecode..\.by
   1eb84:	6574 0073 080d 6163 6c6c 6261 656c 0000     tes...callable..
   1eb94:	03dc 6863 0072 0000 0bb4 6c63 7361 6d73     ..chr.....classm
   1eba4:	7465 6f68 0064 0000 057c 6c63 6165 0072     ethod...|.clear.
   1ebb4:	0533 6c63 736f 0065 0774 6c63 736f 7275     3.close.t.closur
   1ebc4:	0065 0000 079b 6f63 6c6c 6365 0074 0000     e.....collect...
   1ebd4:	05c0 6f63 736e 0074 04e0 6f63 7970 0000     ..const...copy..
   1ebe4:	05a6 6f63 6e75 0074 03c3 7063 0075 0000     ..count...cpu...
   1ebf4:	05d4 6564 7562 0067 043f 6964 7463 0000     ..debug.?.dict..
   1ec04:	092d 6964 7463 765f 6569 0077 03fa 6964     -.dict_view...di
   1ec14:	0072 0000 0791 6964 6173 6c62 0065 0000     r.....disable...
   1ec24:	06b8 6964 6d76 646f 0000 0000 0549 7264     ..divmod....I.dr
   1ec34:	7669 0065 0604 6e65 6261 656c 0000 0000     ive...enable....
   1ec44:	030a 6e65 0064 0000 081b 6e65 7364 6977     ..end.....endswi
   1ec54:	6874 0000 049b 7665 6c61 0000 041e 7865     th....eval....ex
   1ec64:	6365 0000 0663 7865 6574 646e 0000 0000     ec..c.extend....
   1ec74:	0401 6966 646e 0000 0626 6f66 6d72 7461     ..find..&.format
   1ec84:	0000 0000 04e5 7266 7165 0000 0a35 7266     ......freq..5.fr
   1ec94:	6d6f 625f 7479 7365 0000 0000 0837 7266     om_bytes....7.fr
   1eca4:	6d6f 656b 7379 0000 0827 7566 636e 6974     omkeys..'.functi
   1ecb4:	6e6f 0000 0261 6367 0000 0000 0996 6567     on..a.gc......ge
   1ecc4:	656e 6172 6f74 0072 0333 6567 0074 0000     nerator.3.get...
   1ecd4:	07c0 6567 6174 7474 0072 0000 079d 6c67     ..getattr.....gl
   1ece4:	626f 6c61 0073 0000 0454 7067 6f69 0000     obals...T.gpio..
   1ecf4:	078c 6168 6173 7474 0072 0000 04b7 6168     ..hasattr.....ha
   1ed04:	6873 0000 09ad 6568 7061 6c5f 636f 006b     sh....heap_lock.
   1ed14:	0b56 6568 7061 755f 6c6e 636f 006b 0000     V.heap_unlock...
   1ed24:	0370 6568 0078 0000 042b 6968 6867 0000     p.hex...+.high..
   1ed34:	0228 6469 0000 0000 057b 6e69 6564 0078     (.id....{.index.
   1ed44:	04eb 6e69 6f66 0000 041f 6e69 7469 0000     ..info....init..
   1ed54:	0612 6e69 6573 7472 0000 0000 0316 6e69     ..insert......in
   1ed64:	0074 0000 038f 7269 0071 0000 07eb 7369     t.....irq.....is
   1ed74:	6c61 6870 0061 0000 07a8 7369 6964 6967     alpha.....isdigi
   1ed84:	0074 0000 099a 7369 6e65 6261 656c 0064     t.....isenabled.
   1ed94:	0ab6 7369 6e69 7473 6e61 6563 0000 0000     ..isinstance....
   1eda4:	07fc 7369 6f6c 6577 0072 0000 075b 7369     ..islower...[.is
   1edb4:	7073 6361 0065 0000 0ab5 7369 7573 6362     space.....issubc
   1edc4:	616c 7373 0000 0000 07dd 7369 7075 6570     lass......isuppe
   1edd4:	0072 0000 05e3 7469 6d65 0073 048f 7469     r.....items...it
   1ede4:	7265 0000 0847 7469 7265 7461 726f 0000     er..G.iterator..
   1edf4:	04a7 6f6a 6e69 0000 0332 656b 0079 0000     ..join..2.key...
   1ee04:	0401 656b 7379 0000 0362 656c 006e 0000     ..keys..b.len...
   1ee14:	0427 696c 7473 0000 0689 696c 7474 656c     '.list....little
   1ee24:	0000 0000 063b 6f6c 6163 736c 0000 0000     ....;.locals....
   1ee34:	0331 6f6c 0077 0000 05c6 6f6c 6577 0072     1.low.....lower.
   1ee44:	06e5 736c 7274 7069 0000 0000 03b9 616d     ..lstrip......ma
   1ee54:	0070 0000 065e 616d 7070 7265 0000 0000     p...^.mapper....
   1ee64:	0952 656d 5f6d 6c61 6f6c 0063 08cb 656d     R.mem_alloc...me
   1ee74:	5f6d 7266 6565 0000 0b0b 696d 7263 706f     m_free....microp
   1ee84:	7479 6f68 006e 0000 0426 6f6d 6564 0000     ython...&.mode..
   1ee94:	06bf 6f6d 7564 656c 0000 0000 04a2 616e     ..module......na
   1eea4:	656d 0000 0591 616e 656d 0073 0442 656e     me....names.B.ne
   1eeb4:	7478 0000 0690 626f 656a 7463 0000 0000     xt....object....
   1eec4:	03fd 636f 0074 0000 038a 666f 0066 0000     ..oct.....off...
   1eed4:	0264 6e6f 0000 0000 0987 706f 5f74 656c     d.on......opt_le
   1eee4:	6576 006c 031c 726f 0064 0000 0af3 6570     vel...ord.....pe
   1eef4:	646e 745f 7268 776f 0000 0000 03f2 6970     nd_throw......pi
   1ef04:	006e 0000 032a 6f70 0070 0000 07bf 6f70     n...*.pop.....po
   1ef14:	6970 6574 006d 0000 045c 6f70 7472 0000     pitem...\.port..
   1ef24:	032d 6f70 0077 0000 0554 7270 6e69 0074     -.pow...T.print.
   1ef34:	0480 7570 6c6c 0000 051a 6172 676e 0065     ..pull....range.
   1ef44:	0663 6572 6f6d 6576 0000 0000 0749 6572     c.remove....I.re
   1ef54:	6c70 6361 0065 0000 04d0 6572 7270 0000     place.....repr..
   1ef64:	0510 6572 6573 0074 0bce 6572 6573 5f74     ..reset...reset_
   1ef74:	6163 7375 0065 0000 0725 6572 6576 7372     cause...%.revers
   1ef84:	0065 0000 05d2 6672 6e69 0064 06e9 6972     e.....rfind...ri
   1ef94:	646e 7865 0000 0000 05e7 6f72 6e75 0064     ndex......round.
   1efa4:	06a5 7372 6c70 7469 0000 0000 063b 7372     ..rsplit....;.rs
   1efb4:	7274 7069 0000 0000 04b9 6573 646e 0000     trip......send..
   1efc4:	0323 6573 0070 0000 07d4 6573 6174 7474     #.sep.....setatt
   1efd4:	0072 0000 0a6c 6573 6474 6665 7561 746c     r...l.setdefault
   1efe4:	0000 0000 0ae1 6f73 7466 725f 7365 7465     ......soft_reset
   1eff4:	0000 0000 04bf 6f73 7472 0000 065e 6f73     ......sort..^.so
   1f004:	7472 6465 0000 0000 05b7 7073 696c 0074     rted......split.
   1f014:	0585 7473 7261 0074 0a74 7473 7261 7374     ..start.t.starts
   1f024:	6977 6874 0000 0000 0c62 7473 7461 6369     with....b.static
   1f034:	656d 6874 646f 0000 0457 7473 7065 0000     method..W.step..
   1f044:	049d 7473 706f 0000 0350 7473 0072 0000     ..stop..P.str...
   1f054:	0529 7473 6972 0070 032e 7573 006d 0000     ).strip...sum...
   1f064:	05c4 7573 6570 0072 09f2 6874 6572 6873     ..super...thresh
   1f074:	6c6f 0064 05b3 6874 6f72 0077 08d8 6f74     old...throw...to
   1f084:	625f 7479 7365 0000 05fd 7574 6c70 0065     _bytes....tuple.
   1f094:	049d 7974 6570 0000 0895 6d75 6361 6968     ..type....umachi
   1f0a4:	656e 0000 0904 6e75 7169 6575 695f 0064     ne....unique_id.
   1f0b4:	06b4 7075 6164 6574 0000 0000 0527 7075     ..update....'.up
   1f0c4:	6570 0072 054e 6176 756c 0065 067d 6176     per.N.value.}.va
   1f0d4:	756c 7365 0000 0000 03e6 697a 0070 0000     lues......zip...

0001f0e4 <mp_qstr_const_pool>:
	...
   1f0ec:	000a 0000 017c 0000 dfc4 0001 dfc8 0001     ....|...........
   1f0fc:	dfcc 0001 dfd8 0001 dfe4 0001 dff8 0001     ................
   1f10c:	e004 0001 e010 0001 e020 0001 e02c 0001     ........ ...,...
   1f11c:	e03c 0001 e048 0001 e054 0001 e060 0001     <...H...T...`...
   1f12c:	e06c 0001 e07c 0001 e08c 0001 e098 0001     l...|...........
   1f13c:	e0a4 0001 e0b0 0001 e0c0 0001 e0cc 0001     ................
   1f14c:	e0d8 0001 e0e4 0001 e0f0 0001 e0fc 0001     ................
   1f15c:	e108 0001 e114 0001 e124 0001 e130 0001     ........$...0...
   1f16c:	e13c 0001 e148 0001 e154 0001 e164 0001     <...H...T...d...
   1f17c:	e178 0001 e184 0001 e194 0001 e1a0 0001     x...............
   1f18c:	e1ac 0001 e1bc 0001 e1c0 0001 e1c4 0001     ................
   1f19c:	e1c8 0001 e1d0 0001 e1d8 0001 e1e0 0001     ................
   1f1ac:	e1e4 0001 e1e8 0001 e20c 0001 e218 0001     ................
   1f1bc:	e224 0001 e234 0001 e244 0001 e250 0001     $...4...D...P...
   1f1cc:	e25c 0001 e268 0001 e274 0001 e27c 0001     \...h...t...|...
   1f1dc:	e288 0001 e298 0001 e2a0 0001 e2a8 0001     ................
   1f1ec:	e2b0 0001 e2b8 0001 e2c0 0001 e2c8 0001     ................
   1f1fc:	e2d0 0001 e2d8 0001 e2e0 0001 e2e8 0001     ................
   1f20c:	e2f0 0001 e2f8 0001 e300 0001 e308 0001     ................
   1f21c:	e310 0001 e318 0001 e320 0001 e328 0001     ........ ...(...
   1f22c:	e330 0001 e338 0001 e340 0001 e348 0001     0...8...@...H...
   1f23c:	e350 0001 e358 0001 e360 0001 e368 0001     P...X...`...h...
   1f24c:	e370 0001 e378 0001 e380 0001 e388 0001     p...x...........
   1f25c:	e390 0001 e398 0001 e3a0 0001 e3a8 0001     ................
   1f26c:	e3b0 0001 e3b8 0001 e3c0 0001 e3c8 0001     ................
   1f27c:	e3d0 0001 e3d8 0001 e3e0 0001 e3e8 0001     ................
   1f28c:	e3f0 0001 e3fc 0001 e408 0001 e414 0001     ................
   1f29c:	e420 0001 e42c 0001 e438 0001 e444 0001      ...,...8...D...
   1f2ac:	e450 0001 e45c 0001 e468 0001 e474 0001     P...\...h...t...
   1f2bc:	e480 0001 e48c 0001 e498 0001 e4a4 0001     ................
   1f2cc:	e4b0 0001 e4bc 0001 e4c8 0001 e4dc 0001     ................
   1f2dc:	e4e8 0001 e4f8 0001 e50c 0001 e51c 0001     ................
   1f2ec:	e52c 0001 e53c 0001 e54c 0001 e55c 0001     ,...<...L...\...
   1f2fc:	e56c 0001 e57c 0001 e58c 0001 e59c 0001     l...|...........
   1f30c:	e5ac 0001 e5bc 0001 e5cc 0001 e5dc 0001     ................
   1f31c:	e5ec 0001 e5fc 0001 e60c 0001 e61c 0001     ................
   1f32c:	e62c 0001 e634 0001 e640 0001 e64c 0001     ,...4...@...L...
   1f33c:	e658 0001 e664 0001 e670 0001 e67c 0001     X...d...p...|...
   1f34c:	e688 0001 e694 0001 e6a0 0001 e6ac 0001     ................
   1f35c:	e6b8 0001 e6c4 0001 e6d0 0001 e6dc 0001     ................
   1f36c:	e6e4 0001 e6ec 0001 e6f8 0001 e704 0001     ................
   1f37c:	e710 0001 e71c 0001 e728 0001 e734 0001     ........(...4...
   1f38c:	e740 0001 e74c 0001 e75c 0001 e76c 0001     @...L...\...l...
   1f39c:	e77c 0001 e78c 0001 e79c 0001 e7ac 0001     |...............
   1f3ac:	e7bc 0001 e7cc 0001 e7dc 0001 e7ec 0001     ................
   1f3bc:	e7fc 0001 e80c 0001 e814 0001 e828 0001     ............(...
   1f3cc:	e834 0001 e848 0001 e85c 0001 e870 0001     4...H...\...p...
   1f3dc:	e880 0001 e894 0001 e8a0 0001 e8ac 0001     ................
   1f3ec:	e8b8 0001 e8c8 0001 e8d8 0001 e8e4 0001     ................
   1f3fc:	e8ec 0001 e8f8 0001 e908 0001 e914 0001     ................
   1f40c:	e920 0001 e930 0001 e940 0001 e954 0001      ...0...@...T...
   1f41c:	e964 0001 e970 0001 e984 0001 e990 0001     d...p...........
   1f42c:	e9a0 0001 e9ac 0001 e9bc 0001 e9c8 0001     ................
   1f43c:	e9d4 0001 e9ec 0001 e9fc 0001 ea08 0001     ................
   1f44c:	ea10 0001 ea20 0001 ea2c 0001 ea38 0001     .... ...,...8...
   1f45c:	ea44 0001 ea54 0001 ea5c 0001 ea6c 0001     D...T...\...l...
   1f46c:	ea7c 0001 ea8c 0001 ea9c 0001 eaac 0001     |...............
   1f47c:	eab8 0001 eac8 0001 ead4 0001 eae8 0001     ................
   1f48c:	eaf0 0001 eaf8 0001 eb04 0001 eb0c 0001     ................
   1f49c:	eb14 0001 eb1c 0001 eb28 0001 eb30 0001     ........(...0...
   1f4ac:	eb38 0001 eb40 0001 eb48 0001 eb58 0001     8...@...H...X...
   1f4bc:	eb68 0001 eb74 0001 eb80 0001 eb88 0001     h...t...........
   1f4cc:	eb94 0001 eb9c 0001 ebac 0001 ebb4 0001     ................
   1f4dc:	ebbc 0001 ebc8 0001 ebd4 0001 ebdc 0001     ................
   1f4ec:	ebe4 0001 ebec 0001 ebf4 0001 ebfc 0001     ................
   1f4fc:	ec04 0001 ec10 0001 ec18 0001 ec24 0001     ............$...
   1f50c:	ec30 0001 ec38 0001 ec44 0001 ec4c 0001     0...8...D...L...
   1f51c:	ec58 0001 ec60 0001 ec68 0001 ec74 0001     X...`...h...t...
   1f52c:	ec7c 0001 ec88 0001 ec90 0001 eca0 0001     |...............
   1f53c:	ecac 0001 ecb8 0001 ecc0 0001 eccc 0001     ................
   1f54c:	ecd4 0001 ece0 0001 ecec 0001 ecf4 0001     ................
   1f55c:	ed00 0001 ed08 0001 ed14 0001 ed24 0001     ............$...
   1f56c:	ed2c 0001 ed34 0001 ed3c 0001 ed44 0001     ,...4...<...D...
   1f57c:	ed4c 0001 ed54 0001 ed60 0001 ed68 0001     L...T...`...h...
   1f58c:	ed70 0001 ed7c 0001 ed88 0001 ed94 0001     p...|...........
   1f59c:	eda4 0001 edb0 0001 edbc 0001 edcc 0001     ................
   1f5ac:	edd8 0001 ede0 0001 ede8 0001 edf4 0001     ................
   1f5bc:	edfc 0001 ee04 0001 ee0c 0001 ee14 0001     ................
   1f5cc:	ee1c 0001 ee28 0001 ee34 0001 ee3c 0001     ....(...4...<...
   1f5dc:	ee44 0001 ee50 0001 ee58 0001 ee64 0001     D...P...X...d...
   1f5ec:	ee70 0001 ee7c 0001 ee8c 0001 ee94 0001     p...|...........
   1f5fc:	eea0 0001 eea8 0001 eeb0 0001 eeb8 0001     ................
   1f60c:	eec4 0001 eecc 0001 eed4 0001 eedc 0001     ................
   1f61c:	eee8 0001 eef0 0001 ef00 0001 ef08 0001     ................
   1f62c:	ef10 0001 ef1c 0001 ef24 0001 ef2c 0001     ........$...,...
   1f63c:	ef34 0001 ef3c 0001 ef44 0001 ef50 0001     4...<...D...P...
   1f64c:	ef5c 0001 ef64 0001 ef6c 0001 ef7c 0001     \...d...l...|...
   1f65c:	ef88 0001 ef90 0001 ef9c 0001 efa4 0001     ................
   1f66c:	efb0 0001 efbc 0001 efc4 0001 efcc 0001     ................
   1f67c:	efd8 0001 efe8 0001 eff8 0001 f000 0001     ................
   1f68c:	f00c 0001 f014 0001 f01c 0001 f02c 0001     ............,...
   1f69c:	f03c 0001 f044 0001 f04c 0001 f054 0001     <...D...L...T...
   1f6ac:	f05c 0001 f064 0001 f06c 0001 f078 0001     \...d...l...x...
   1f6bc:	f080 0001 f08c 0001 f094 0001 f09c 0001     ................
   1f6cc:	f0a8 0001 f0b4 0001 f0c0 0001 f0c8 0001     ................
   1f6dc:	f0d0 0001 f0dc 0001 656c 206e 203c 3128     ........len < (1
   1f6ec:	3c20 203c 3828 2a20 4d20 4349 4f52 5950      << (8 * MICROPY
   1f6fc:	515f 5453 5f52 5942 4554 5f53 4e49 4c5f     _QSTR_BYTES_IN_L
   1f70c:	4e45 2929 0000 0000 2e2e 2e2f 2f2e 7970     EN))....../../py
   1f71c:	712f 7473 2e72 0063                         /qstr.c.

0001f724 <__func__.6506>:
   1f724:	7371 7274 665f 6f72 5f6d 7473 6e72 0000     qstr_from_strn..

0001f734 <pad_spaces>:
   1f734:	2020 2020 2020 2020 2020 2020 2020 2020                     
   1f744:	0000 0000                                   ....

0001f748 <pad_zeroes>:
   1f748:	3030 3030 3030 3030 3030 3030 3030 3030     0000000000000000
   1f758:	0000 0000                                   ....

0001f75c <mp_plat_print>:
   1f75c:	0000 0000 19d9 0000 6162 6573 3d20 203d     ........base == 
   1f76c:	2032 7c7c 6220 7361 2065 3d3d 3820 7c20     2 || base == 8 |
   1f77c:	207c 6162 6573 3d20 203d 3031 7c20 207c     | base == 10 || 
   1f78c:	6162 6573 3d20 203d 3631 0000 2e2e 2e2f     base == 16..../.
   1f79c:	2f2e 7970 6d2f 7070 6972 746e 632e 0000     ./py/mpprint.c..
   1f7ac:	0000 0000 7274 6575 0000 0000 6166 736c     ....true....fals
   1f7bc:	0065 0000 6e28 6c75 296c 0000 662a 746d     e...(null)..*fmt
   1f7cc:	3d20 203d 2527 2027 7c7c 2120 7522 736e      == '%' || !"uns
   1f7dc:	7075 6f70 7472 6465 6620 746d 6320 6168     upported fmt cha
   1f7ec:	2272 0000                                   r"..

0001f7f0 <__func__.7545>:
   1f7f0:	706d 705f 6972 746e 6d5f 5f70 6e69 0074     mp_print_mp_int.

0001f800 <__func__.7610>:
   1f800:	706d 765f 7270 6e69 6674 0000               mp_vprintf..

0001f80c <attr>:
	...
   1f814:	0300 0303 0303 0000 0000 0000 0000 0000     ................
	...
   1f82c:	0103 0101 0101 0101 0101 0101 0101 0101     ................
   1f83c:	4545 4545 4545 4545 4545 0101 0101 0101     EEEEEEEEEE......
   1f84c:	5901 5959 5959 1959 1919 1919 1919 1919     .YYYYYY.........
   1f85c:	1919 1919 1919 1919 1919 0119 0101 0101     ................
   1f86c:	6901 6969 6969 2969 2929 2929 2929 2929     .iiiiii)))))))))
   1f87c:	2929 2929 2929 2929 2929 0129 0101 0001     ))))))))))).....
   1f88c:	2928 5d5b 7d7b 3a2c 403b 3c7e 3d65 3c63     ()[]{},:;@~<e=c<
   1f89c:	3d65 653e 633d 653e 2a3d 3d65 2a63 3d65     e=>e=c>e=*e=c*e=
   1f8ac:	652b 2d3d 3d65 3e65 6526 7c3d 3d65 652f     +e=-e=e>&e=|e=/e
   1f8bc:	633d 652f 253d 3d65 655e 3d3d 3d65 2e21     =c/e=%e=^e==e=!.
   1f8cc:	0000 0000                                   ....

0001f8d0 <tok_enc>:
   1f8d0:	f88c 0001                                   ....

0001f8d4 <tok_enc_kind>:
   1f8d4:	4342 4544 4746 4948 4c4b 363d 373e 3858     BCDEFGHIKL=6>7X8
   1f8e4:	393f 3157 3250 2f59 304e 5a4f 543a 553b     ?9W1P2Y/N0OZ:T;U
   1f8f4:	5133 5234 5335 563c 404d 0000 6146 736c     3Q4R5S<VM@..Fals
   1f904:	0065 0000 6f4e 656e 0000 0000 7254 6575     e...None....True
   1f914:	0000 0000 5f5f 6564 7562 5f67 005f 0000     ....__debug__...
   1f924:	6e61 0064 7361 0000 7361 6573 7472 0000     and.as..assert..
   1f934:	7262 6165 006b 0000 6c63 7361 0073 0000     break...class...
   1f944:	6f63 746e 6e69 6575 0000 0000 6564 0066     continue....def.
   1f954:	6564 006c 6c65 6669 0000 0000 6c65 6573     del.elif....else
   1f964:	0000 0000 7865 6563 7470 0000 6966 616e     ....except..fina
   1f974:	6c6c 0079 6f66 0072 7266 6d6f 0000 0000     lly.for.from....
   1f984:	6c67 626f 6c61 0000 6669 0000 6d69 6f70     global..if..impo
   1f994:	7472 0000 6e69 0000 7369 0000 616c 626d     rt..in..is..lamb
   1f9a4:	6164 0000 6f6e 6c6e 636f 6c61 0000 0000     da..nonlocal....
   1f9b4:	6f6e 0074 726f 0000 6170 7373 0000 0000     not.or..pass....
   1f9c4:	6172 7369 0065 0000 6572 7574 6e72 0000     raise...return..
   1f9d4:	7274 0079 6877 6c69 0065 0000 6977 6874     try.while...with
   1f9e4:	0000 0000 6979 6c65 0064 0000               ....yield...

0001f9f0 <tok_kw>:
   1f9f0:	f900 0001 f908 0001 f910 0001 f918 0001     ................
   1fa00:	f924 0001 f928 0001 f92c 0001 f934 0001     $...(...,...4...
   1fa10:	f93c 0001 f944 0001 f950 0001 f954 0001     <...D...P...T...
   1fa20:	f958 0001 f960 0001 f968 0001 f970 0001     X...`...h...p...
   1fa30:	f978 0001 f97c 0001 f984 0001 f98c 0001     x...|...........
   1fa40:	f990 0001 f998 0001 f99c 0001 f9a0 0001     ................
   1fa50:	f9a8 0001 f9b4 0001 f9b8 0001 f9bc 0001     ................
   1fa60:	f9c4 0001 f9cc 0001 f9d4 0001 f9d8 0001     ................
   1fa70:	f9e0 0001 f9e8 0001 6e75 6369 646f 2065     ........unicode 
   1fa80:	616e 656d 6520 6373 7061 7365 0000 0000     name escapes....

0001fa90 <rule_act_table>:
   1fa90:	3261 a862 2233 2233 2121 2221 2221 2422     a2b.3"3"!!!"!""$
   1faa0:	2222 2623 2725 2424 6232 a4a4 3131 3122     ""#&%'$$2b..11"1
   1fab0:	3122 3131 3131 6231 6262 2323 2323 2223     "111111bbb#####"
   1fac0:	3333 a523 0022 1213 2162 3224 6212 1333     33#."...b!$2.b3.
   1fad0:	2263 6223 2262 1333 2262 6222 1261 1862     c"#bb"3.b""ba.b.
   1fae0:	6212 6232 1212 151c 6262 1212 1362 3263     .b2b....bb..b.c2
   1faf0:	2212 6262 3133 3131 1862 2432 6312 6224     ."bb3111b.2$.c$b
   1fb00:	2332 3163 6262 6412 2412 1212 2219 2122     2#c1bb.d.$...""!
   1fb10:	1212 1214 1113 6232 121c 1262 6212 1333     ......2b..b..b3.
   1fb20:	1233 1262 3322 3363 2213 6222 6212 a512     3.b."3c3.""b.b..
   1fb30:	1223 0022                                   #.".

0001fb34 <rule_arg_combined_table>:
   1fb34:	3001 2037 203b 203c 1017 1007 1042 303e     .07 ; < ....B.>0
   1fb44:	1043 303d 1049 2076 204f 104b 2006 3050     C.=0I.v O K.. P0
   1fb54:	2055 1048 1018 2090 1028 1014 1016 102a     U H.... (.....*.
   1fb64:	3031 2034 1029 3058 1021 2065 101e 205b     104 ).X0!.e ..[ 
   1fb74:	1021 205d 101f 2067 1025 2067 1013 2078     !.] ..g %.g ..x 
   1fb84:	3068 1020 2078 1049 2076 306a 3072 102c     h0 .x I.v j0r0,.
   1fb94:	2078 1049 2076 3072 101d 2090 1022 2031     x I.v r0... ".1 
   1fba4:	1049 2076 3072 102b 1049 2076 206c 102d     I.v r0+.I.v l -.
   1fbb4:	2073 1049 2076 204d 201c 3079 1024 3046     s I.v M . y0$.F0
   1fbc4:	1049 2078 1024 3046 1049 207a 201d 1027     I.x $.F0I.z . '.
   1fbd4:	207b 1011 1026 207b 2021 207c 1031 2021     { ..&.{ ! | 1.! 
   1fbe4:	2022 103b 2023 103c 2024 103a 2025 2080     " ;.# <.$ :.% . 
   1fbf4:	2026 2081 2083 2082 2084 2083 2085 3087     & . . . . . . .0
   1fc04:	2088 3086 1042 3089 1043 1044 308a 1045     . .0B..0C.D..0E.
   1fc14:	1046 3092 1047 1042 3097 1043 1044 2030     F..0G.B..0C.D.0 
   1fc24:	1045 104a 1007 2078 1048 2078 1048 2078     E.J...x H.x H.x 
   1fc34:	1049 2078 1015 1007 3096 1049 2076 102e     I.x .....0I.v ..
   1fc44:	30a1 1004 204e 2069 1004 204d 2031 3039     .0..N i ..M 1 90
   1fc54:	1004 104c 2066 302d 1004 203a 2033 2003     ..L.f -0..: 3 . 
   1fc64:	105a 2078 203f 1048 2040 2041 2042 1007     Z.x ? H.@ A B ..
   1fc74:	3043 3044 1031 3045 1032 1007 3043 1049     C0D01.E02...C0I.
   1fc84:	2078 104d 2078 1007 3043 2047 1048 2048     x M.x ..C0G H.H 
   1fc94:	2049 204a 1007 304b 1031 304c 1032 1007     I J ..K01.L02...
   1fca4:	104d 2078 1007 2069 204e 2004 1004 2007     M.x ..i N . ... 
   1fcb4:	2008 2057 205a 2010 2011 2012 2005 2051     . W Z . . . . Q 
   1fcc4:	2052 2056 2054 2053 104d 2054 2034 2006     R V T S M.T 4 . 
   1fcd4:	2020 2078 104e 104f 1050 1051 1053 1054       x N.O.P.Q.S.T.
   1fce4:	1055 1056 1058 1057 1059 1052 2009 200a     U.V.X.W.Y.R.. . 
   1fcf4:	200b 200d 200c 2078 3059 101e 2078 200e     . . . x Y0..x . 
   1fd04:	200f 2066 205c 205f 3066 1031 205e 2064     . f \ _ f01.^ d 
   1fd14:	1042 2064 1043 2060 104a 100c 1007 3063     B.d C.` J.....c0
   1fd24:	2066 3063 1012 1007 2061 1048 2062 1048     f c0....a H.b H.
   1fd34:	1007 104a 1007 1048 1048 2078 2013 2014     ..J...H.H.x . . 
   1fd44:	2015 2016 2017 2003 2033 2002 206b 1019     . . . . 3 . k ..
   1fd54:	2078 1049 2076 206d 2071 2070 3072 3071     x I.v m q p r0q0
   1fd64:	101b 306f 1049 2076 2078 3063 206e 101c     ..o0I.v x c0n ..
   1fd74:	1049 2076 101a 1049 2076 2074 1048 2078     I.v ..I.v t H.x 
   1fd84:	3075 1012 2021 2077 204e 1004 1005 2018     u0..! w N ..... 
   1fd94:	1006 201a 2019 1020 201c 101a 2078 201b     ... .  .. ..x . 
   1fda4:	201c 201e 201f 1036 1038 1040 103e 103f     . . . 6.8.@.>.?.
   1fdb4:	1041 1022 207d 207e 1026 1022 1023 307f     A.".} ~ &.".#..0
   1fdc4:	1026 1037 1039 102f 1030 1031 1033 1035     &.7.9./.0.1.3.5.
   1fdd4:	1034 2027 2028 102f 1030 103d 2029 208f     4.' ( /.0.=.) . 
   1fde4:	1032 2083 1007 1008 1009 100a 100b 100c     2.. ............
   1fdf4:	100e 100f 100d 202a 202b 202c 2034 208a     ......* + , 4 . 
   1fe04:	208b 308c 2020 2078 209f 208d 1048 308e     . .0  x . . H..0
   1fe14:	208b 1048 202d 202e 202f 2091 1048 2020     . H.- . / . H.  
   1fe24:	2021 2032 3093 209f 2094 1048 3095 2032     ! 2 .0. . H..02 
   1fe34:	1048 1042 3097 1043 2098 1048 2099 209a     H.B..0C.. H.. . 
   1fe44:	209b 1031 2078 1032 2078 2078 309c 209f     . 1.x 2.x x .0. 
   1fe54:	209d 104d 2078 209f 20a0 101d 2090 1022     . M.x . . ... ".
   1fe64:	201c 309e 1020 207a 309e 20a2 2031 101e     . .0 .z .0. 1 ..
   1fe74:	2078 0000                                   x ..

0001fe78 <rule_arg_offset_table>:
   1fe78:	0100 0402 0e0c 1210 1514 1716 1a19 1e1c     ................
   1fe88:	2422 2926 342f 3f3b 4443 4a46 504e 5452     "$&)/4;?CDFJNPRT
   1fe98:	5856 5c5a 605e 6462 6866 6d6a 7370 7976     VXZ\^`bdfhjmpsvy
   1fea8:	7d7b 827f 0087 8c89 908e 9591 9896 9c9a     {}..............
   1feb8:	a29f a7a4 aba9 afad b4b2 b8b6 bbba bfbd     ................
   1fec8:	c9c7 cccb d0ce ded2 e5e3 e9e7 edeb f3f0     ................
   1fed8:	f6f4 faf8 fefc 0200 0604 0f0e 1513 1c18     ................
   1fee8:	1f1e 2522 2927 2d2b 3331 3937 443b 4846     .."%')+-1379;DFH
   1fef8:	4b49 514d 5653 5857 665a 6a68 6e6c 7270     IKMQSVWXZfhjlnpr
   1ff08:	7775 7b79 7f7d 8481 8986 8d8b 918f 9593     uwy{}...........
   1ff18:	9d9a 009f                                   ....

0001ff1c <FIRST_RULE_WITH_OFFSET_ABOVE_255>:
   1ff1c:	0066 0000 6128 6772 2620 5220 4c55 5f45     f...(arg & RULE_
   1ff2c:	5241 5f47 494b 444e 4d5f 5341 294b 3d20     ARG_KIND_MASK) =
   1ff3c:	203d 5552 454c 415f 4752 525f 4c55 2045     = RULE_ARG_RULE 
   1ff4c:	7c7c 2820 7261 2067 2026 5552 454c 415f     || (arg & RULE_A
   1ff5c:	4752 4b5f 4e49 5f44 414d 4b53 2029 3d3d     RG_KIND_MASK) ==
   1ff6c:	5220 4c55 5f45 5241 5f47 504f 5f54 5552      RULE_ARG_OPT_RU
   1ff7c:	454c 0000 2e2e 2e2f 2f2e 7970 702f 7261     LE..../../py/par
   1ff8c:	6573 632e 0000 0000 6170 7372 7265 3e2d     se.c....parser->
   1ff9c:	6572 7573 746c 735f 6174 6b63 745f 706f     result_stack_top
   1ffac:	3e20 3020 0000 0000 6170 7372 7265 3e2d      > 0....parser->
   1ffbc:	6572 7573 746c 735f 6174 6b63 745f 706f     result_stack_top
   1ffcc:	3e20 7020 736f 0000 6f74 206b 3d3d 4d20      > pos..tok == M
   1ffdc:	5f50 4f54 454b 5f4e 504f 545f 4c49 4544     P_TOKEN_OP_TILDE
   1ffec:	0000 0000 696b 646e 3d20 203d 5552 454c     ....kind == RULE
   1fffc:	415f 4752 525f 4c55 0045 0000 2069 203e     _ARG_RULE...i > 
   2000c:	0030 0000 2069 3d3d 6e20 0000 7228 6c75     0...i == n..(rul
   2001c:	5f65 6361 2074 2026 5552 454c 415f 5443     e_act & RULE_ACT
   2002c:	4b5f 4e49 5f44 414d 4b53 2029 3d3d 5220     _KIND_MASK) == R
   2003c:	4c55 5f45 4341 5f54 494c 5453 0000 0000     ULE_ACT_LIST....
   2004c:	6128 6772 2620 5220 4c55 5f45 5241 5f47     (arg & RULE_ARG_
   2005c:	494b 444e 4d5f 5341 294b 3d20 203d 5552     KIND_MASK) == RU
   2006c:	454c 415f 4752 525f 4c55 0045 2069 3d3e     LE_ARG_RULE.i >=
   2007c:	3120 0000 6e75 7865 6570 7463 6465 6920      1..unexpected i
   2008c:	646e 6e65 0074 0000 6e75 6e69 6564 746e     ndent...unindent
   2009c:	6420 656f 2073 6f6e 2074 616d 6374 2068      does not match 
   200ac:	6e61 2079 756f 6574 2072 6e69 6564 746e     any outer indent
   200bc:	7461 6f69 206e 656c 6576 006c 6e69 6176     ation level.inva
   200cc:	696c 2064 7973 746e 7861 0000 6170 7372     lid syntax..pars
   200dc:	7265 722e 7365 6c75 5f74 7473 6361 5f6b     er.result_stack_
   200ec:	6f74 2070 3d3d 3120 0000 0000               top == 1....

000200f8 <__func__.8040>:
   200f8:	7570 6873 725f 6c75 5f65 7266 6d6f 615f     push_rule_from_a
   20108:	6772 0000                                   rg..

0002010c <__func__.8068>:
   2010c:	6f70 5f70 6572 7573 746c 0000               pop_result..

00020118 <__func__.8073>:
   20118:	6570 6b65 725f 7365 6c75 0074               peek_result.

00020124 <token_to_op.8139>:
   20124:	1b1a ff1c 1dff ff1f ff18 0019               ............

00020130 <__func__.8148>:
   20130:	6f66 646c 635f 6e6f 7473 6e61 7374 0000     fold_constants..

00020140 <__func__.8186>:
   20140:	706d 705f 7261 6573 0000 0000               mp_parse....

0002014c <scope_simple_name_table>:
   2014c:	0030 3231 3433 0035 504d 505f 5241 4553     0.12345.MP_PARSE
   2015c:	4e5f 444f 5f45 5349 535f 5254 4355 2854     _NODE_IS_STRUCT(
   2016c:	6e70 0029 2e2e 2e2f 2f2e 7970 732f 6f63     pn).../../py/sco
   2017c:	6570 632e 0000 0000 6373 706f 2d65 703e     pe.c....scope->p
   2018c:	7261 6e65 2074 3d21 4e20 4c55 004c 0000     arent != NULL...
   2019c:	2d73 703e 7261 6e65 2074 3d21 4e20 4c55     s->parent != NUL
   201ac:	004c 0000 6469 3e2d 696b 646e 3d20 203d     L...id->kind == 
   201bc:	4449 495f 464e 5f4f 494b 444e 465f 4552     ID_INFO_KIND_FRE
   201cc:	2045 7c7c 6920 2d64 6b3e 6e69 2064 3d3d     E || id->kind ==
   201dc:	4920 5f44 4e49 4f46 4b5f 4e49 5f44 4543      ID_INFO_KIND_CE
   201ec:	4c4c 0000                                   LL..

000201f0 <__func__.5826>:
   201f0:	6373 706f 5f65 656e 0077 0000               scope_new...

000201fc <__func__.5855>:
   201fc:	6373 706f 5f65 6c63 736f 5f65 766f 7265     scope_close_over
   2020c:	695f 5f6e 6170 6572 746e 0073 6f63 706d     _in_parents.comp
   2021c:	3e2d 7563 5f72 7865 6563 7470 6c5f 7665     ->cur_except_lev
   2022c:	6c65 3e20 3020 0000 2e2e 2e2f 2f2e 7970     el > 0..../../py
   2023c:	632f 6d6f 6970 656c 632e 0000 504d 505f     /compile.c..MP_P
   2024c:	5241 4553 4e5f 444f 5f45 5349 535f 5254     ARSE_NODE_IS_STR
   2025c:	4355 5f54 494b 444e 7028 736e 3e2d 6f6e     UCT_KIND(pns->no
   2026c:	6564 5b73 5d30 202c 4e50 745f 7365 6c74     des[0], PN_testl
   2027c:	7369 5f74 6f63 706d 0029 0000 504d 505f     ist_comp)...MP_P
   2028c:	5241 4553 4e5f 444f 5f45 5349 535f 5254     ARSE_NODE_IS_STR
   2029c:	4355 2854 6e70 3173 3e2d 6f6e 6564 5b73     UCT(pns1->nodes[
   202ac:	206e 202d 5d31 0029 504d 505f 5241 4553     n - 1]).MP_PARSE
   202bc:	4e5f 444f 5f45 5349 495f 2844 6e70 3173     _NODE_IS_ID(pns1
   202cc:	3e2d 6f6e 6564 5b73 5d30 0029 6163 276e     ->nodes[0]).can'
   202dc:	2074 7361 6973 6e67 7420 206f 7865 7270     t assign to expr
   202ec:	7365 6973 6e6f 0000 756d 746c 7069 656c     ession..multiple
   202fc:	2a20 2078 6e69 6120 7373 6769 6d6e 6e65      *x in assignmen
   2030c:	0074 0000 4d21 5f50 4150 5352 5f45 4f4e     t...!MP_PARSE_NO
   2031c:	4544 495f 5f53 554e 4c4c 7028 296e 0000     DE_IS_NULL(pn)..
   2032c:	504d 505f 5241 4553 4e5f 444f 5f45 5349     MP_PARSE_NODE_IS
   2033c:	4e5f 4c55 284c 6e70 3273 3e2d 6f6e 6564     _NULL(pns2->node
   2034c:	5b73 5d30 0029 0000 5f6e 6f70 5f73 6564     s[0])...n_pos_de
   2035c:	6166 6c75 7374 3e20 203d 0030 5f6e 776b     faults >= 0.n_kw
   2036c:	645f 6665 7561 746c 2073 3d3e 3020 0000     _defaults >= 0..
   2037c:	504d 505f 5241 4553 4e5f 444f 5f45 5349     MP_PARSE_NODE_IS
   2038c:	535f 5254 4355 2854 6e70 0029 6e70 6b5f     _STRUCT(pn).pn_k
   2039c:	6e69 2064 3d3d 5020 5f4e 6176 6172 6772     ind == PN_vararg
   203ac:	6c73 7369 5f74 616e 656d 0000 6f6e 2d6e     slist_name..non-
   203bc:	6564 6166 6c75 2074 7261 7567 656d 746e     default argument
   203cc:	6620 6c6f 6f6c 7377 6420 6665 7561 746c      follows default
   203dc:	6120 6772 6d75 6e65 0074 0000 6e69 6176      argument...inva
   203ec:	696c 2064 696d 7263 706f 7479 6f68 206e     lid micropython 
   203fc:	6564 6f63 6172 6f74 0072 0000 504d 505f     decorator...MP_P
   2040c:	5241 4553 4e5f 444f 5f45 5349 535f 5254     ARSE_NODE_IS_STR
   2041c:	4355 5f54 494b 444e 6e28 646f 7365 695b     UCT_KIND(nodes[i
   2042c:	2c5d 5020 5f4e 6564 6f63 6172 6f74 2972     ], PN_decorator)
   2043c:	0000 0000 504d 505f 5241 4553 4e5f 444f     ....MP_PARSE_NOD
   2044c:	5f45 5349 495f 2844 616e 656d 6e5f 646f     E_IS_ID(name_nod
   2045c:	7365 6a5b 295d 0000 504d 505f 5241 4553     es[j])..MP_PARSE
   2046c:	4e5f 444f 5f45 5453 5552 5443 4b5f 4e49     _NODE_STRUCT_KIN
   2047c:	2844 6e70 5f73 6f62 7964 2029 3d3d 5020     D(pns_body) == P
   2048c:	5f4e 6c63 7361 6473 6665 0000 504d 505f     N_classdef..MP_P
   2049c:	5241 4553 4e5f 444f 5f45 5349 535f 5254     ARSE_NODE_IS_STR
   204ac:	4355 5f54 494b 444e 7028 2c6e 5020 5f4e     UCT_KIND(pn, PN_
   204bc:	6574 7473 696c 7473 635f 6d6f 2970 0000     testlist_comp)..
   204cc:	504d 505f 5241 4553 4e5f 444f 5f45 5349     MP_PARSE_NODE_IS
   204dc:	4e5f 4c55 284c 6e70 3173 3e2d 6f6e 6564     _NULL(pns1->node
   204ec:	5b73 5d30 0029 0000 6163 276e 2074 6564     s[0])...can't de
   204fc:	656c 6574 6520 7078 6572 7373 6f69 006e     lete expression.
   2050c:	6227 6572 6b61 2027 756f 7374 6469 2065     'break' outside 
   2051c:	6f6c 706f 0000 0000 6f63 706d 3e2d 7563     loop....comp->cu
   2052c:	5f72 7865 6563 7470 6c5f 7665 6c65 3e20     r_except_level >
   2053c:	203d 6f63 706d 3e2d 7262 6165 5f6b 6f63     = comp->break_co
   2054c:	746e 6e69 6575 655f 6378 7065 5f74 656c     ntinue_except_le
   2055c:	6576 006c 6327 6e6f 6974 756e 2765 6f20     vel.'continue' o
   2056c:	7475 6973 6564 6c20 6f6f 0070 7227 7465     utside loop.'ret
   2057c:	7275 276e 6f20 7475 6973 6564 6620 6e75     urn' outside fun
   2058c:	7463 6f69 006e 0000 504d 505f 5241 4553     ction...MP_PARSE
   2059c:	4e5f 444f 5f45 5349 535f 5254 4355 5f54     _NODE_IS_STRUCT_
   205ac:	494b 444e 7028 2c6e 5020 5f4e 6f64 7474     KIND(pn, PN_dott
   205bc:	6465 6e5f 6d61 2965 0000 0000 4d21 5f50     ed_name)....!MP_
   205cc:	4150 5352 5f45 4f4e 4544 495f 5f53 554e     PARSE_NODE_IS_NU
   205dc:	4c4c 7028 5f6e 6d69 6f70 7472 735f 756f     LL(pn_import_sou
   205ec:	6372 2965 0000 0000 504d 505f 5241 4553     rce)....MP_PARSE
   205fc:	4e5f 444f 5f45 5349 535f 5254 4355 5f54     _NODE_IS_STRUCT_
   2060c:	494b 444e 7028 5f6e 6f6e 6564 5b73 5d69     KIND(pn_nodes[i]
   2061c:	202c 4e50 695f 706d 726f 5f74 7361 6e5f     , PN_import_as_n
   2062c:	6d61 2965 0000 0000 6469 6e65 6974 6966     ame)....identifi
   2063c:	7265 7220 6465 6665 6e69 6465 6120 2073     er redefined as 
   2064c:	6c67 626f 6c61 0000 6f6e 6220 6e69 6964     global..no bindi
   2065c:	676e 6620 726f 6e20 6e6f 6f6c 6163 206c     ng for nonlocal 
   2066c:	6f66 6e75 0064 0000 6469 6e65 6974 6966     found...identifi
   2067c:	7265 7220 6465 6665 6e69 6465 6120 2073     er redefined as 
   2068c:	6f6e 6c6e 636f 6c61 0000 0000 6163 276e     nonlocal....can'
   2069c:	2074 6564 6c63 7261 2065 6f6e 6c6e 636f     t declare nonloc
   206ac:	6c61 6920 206e 756f 6574 2072 6f63 6564     al in outer code
   206bc:	0000 0000 504d 505f 5241 4553 4e5f 444f     ....MP_PARSE_NOD
   206cc:	5f45 5349 535f 5254 4355 5f54 494b 444e     E_IS_STRUCT_KIND
   206dc:	7028 5f6e 6c65 6669 695b 2c5d 5020 5f4e     (pn_elif[i], PN_
   206ec:	6669 735f 6d74 5f74 6c65 6669 0029 0000     if_stmt_elif)...
   206fc:	504d 505f 5241 4553 4e5f 444f 5f45 5349     MP_PARSE_NODE_IS
   2070c:	535f 414d 4c4c 495f 544e 7028 5f6e 7473     _SMALL_INT(pn_st
   2071c:	7065 0029 504d 505f 5241 4553 4e5f 444f     ep).MP_PARSE_NOD
   2072c:	5f45 5349 535f 5254 4355 5f54 494b 444e     E_IS_STRUCT_KIND
   2073c:	7028 5f6e 7865 6563 7470 5b73 5d69 202c     (pn_excepts[i], 
   2074c:	4e50 745f 7972 735f 6d74 5f74 7865 6563     PN_try_stmt_exce
   2075c:	7470 0029 6564 6166 6c75 2074 6527 6378     pt).default 'exc
   2076c:	7065 2774 6d20 7375 2074 6562 6c20 7361     ept' must be las
   2077c:	0074 0000 504d 505f 5241 4553 4e5f 444f     t...MP_PARSE_NOD
   2078c:	5f45 5349 4e5f 4c55 284c 6e70 655f 736c     E_IS_NULL(pn_els
   2079c:	2965 0000 504d 505f 5241 4553 4e5f 444f     e)..MP_PARSE_NOD
   207ac:	5f45 5349 535f 5254 4355 2854 6e70 2d73     E_IS_STRUCT(pns-
   207bc:	6e3e 646f 7365 315b 295d 0000 206e 203e     >nodes[1])..n > 
   207cc:	0030 0000 504d 505f 5241 4553 4e5f 444f     0...MP_PARSE_NOD
   207dc:	5f45 5349 545f 4b4f 4e45 7028 736e 2d31     E_IS_TOKEN(pns1-
   207ec:	6e3e 646f 7365 305b 295d 0000 504d 505f     >nodes[0])..MP_P
   207fc:	5241 4553 4e5f 444f 5f45 5349 535f 5254     ARSE_NODE_IS_STR
   2080c:	4355 5f54 494b 444e 7028 736e 3e2d 6f6e     UCT_KIND(pns->no
   2081c:	6564 5b73 5d31 202c 4e50 745f 7365 5f74     des[1], PN_test_
   2082c:	6669 655f 736c 2965 0000 0000 504d 505f     if_else)....MP_P
   2083c:	5241 4553 4e5f 444f 5f45 5349 535f 5254     ARSE_NODE_IS_STR
   2084c:	4355 2854 6e70 2d73 6e3e 646f 7365 695b     UCT(pns->nodes[i
   2085c:	295d 0000 696b 646e 3d20 203d 4e50 635f     ])..kind == PN_c
   2086c:	6d6f 5f70 706f 695f 0073 0000 782a 6d20     omp_op_is...*x m
   2087c:	7375 2074 6562 6120 7373 6769 6d6e 6e65     ust be assignmen
   2088c:	2074 6174 6772 7465 0000 0000 6f74 206b     t target....tok 
   2089c:	3d3d 4d20 5f50 4f54 454b 5f4e 504f 445f     == MP_TOKEN_OP_D
   208ac:	4c42 4d5f 524f 0045 6f74 206b 3d3d 4d20     BL_MORE.tok == M
   208bc:	5f50 4f54 454b 5f4e 504f 545f 4c49 4544     P_TOKEN_OP_TILDE
   208cc:	0000 0000 7573 6570 2872 2029 6163 276e     ....super() can'
   208dc:	2074 6966 646e 7320 6c65 0066 6163 276e     t find self.can'
   208ec:	2074 6168 6576 6d20 6c75 6974 6c70 2065     t have multiple 
   208fc:	782a 0000 6163 276e 2074 6168 6576 6d20     *x..can't have m
   2090c:	6c75 6974 6c70 2065 2a2a 0078 484c 2053     ultiple **x.LHS 
   2091c:	666f 6b20 7965 6f77 6472 6120 6772 6d20     of keyword arg m
   2092c:	7375 2074 6562 6120 206e 6469 0000 0000     ust be an id....
   2093c:	6f6e 2d6e 656b 7779 726f 2064 7261 2067     non-keyword arg 
   2094c:	6661 6574 2072 2f2a 2a2a 0000 6f6e 2d6e     after */**..non-
   2095c:	656b 7779 726f 2064 7261 2067 6661 6574     keyword arg afte
   2096c:	2072 656b 7779 726f 2064 7261 0067 0000     r keyword arg...
   2097c:	504d 505f 5241 4553 4e5f 444f 5f45 5453     MP_PARSE_NODE_ST
   2098c:	5552 5443 4e5f 4d55 4e5f 444f 5345 7028     RUCT_NUM_NODES(p
   2099c:	736e 2029 3d3d 3220 0000 0000 504d 505f     ns) == 2....MP_P
   209ac:	5241 4553 4e5f 444f 5f45 5349 535f 5254     ARSE_NODE_IS_STR
   209bc:	4355 5f54 494b 444e 7028 736e 3e2d 6f6e     UCT_KIND(pns->no
   209cc:	6564 5b73 5d31 202c 4e50 635f 6d6f 5f70     des[1], PN_comp_
   209dc:	6f66 2972 0000 0000 4d21 5f50 4150 5352     for)....!MP_PARS
   209ec:	5f45 4f4e 4544 495f 5f53 554e 4c4c 7028     E_NODE_IS_NULL(p
   209fc:	736e 3e2d 6f6e 6564 5b73 5d31 0029 0000     ns->nodes[1])...
   20a0c:	504d 505f 5241 4553 4e5f 444f 5f45 5349     MP_PARSE_NODE_IS
   20a1c:	4e5f 4c55 284c 6e70 3373 3e2d 6f6e 6564     _NULL(pns3->node
   20a2c:	5b73 5d30 0029 0000 6e69 6176 696c 2064     s[0])...invalid 
   20a3c:	7973 746e 7861 0000 504d 505f 5241 4553     syntax..MP_PARSE
   20a4c:	4e5f 444f 5f45 5453 5552 5443 4b5f 4e49     _NODE_STRUCT_KIN
   20a5c:	2844 6e70 3173 2029 3d3d 5020 5f4e 6f63     D(pns1) == PN_co
   20a6c:	706d 665f 726f 0000 0030 0000 7927 6569     mp_for..0...'yie
   20a7c:	646c 2027 756f 7374 6469 2065 7566 636e     ld' outside func
   20a8c:	6974 6e6f 0000 0000                         tion....

00020a94 <compile_function>:
   20a94:	5081 0000 5081 0000 5dfd 0000 5fb1 0000     .P...P...]..._..
   20aa4:	5081 0000 7829 0000 5209 0000 6265 0000     .P..)x...R..eb..
   20ab4:	5081 0000 6289 0000 62f9 0000 6369 0000     .P...b...b..ic..
   20ac4:	63c1 0000 63e9 0000 669d 0000 66c1 0000     .c...c...f...f..
   20ad4:	69a1 0000 6a61 0000 6ad1 0000 6b51 0000     .i..aj...j..Qk..
   20ae4:	6d09 0000 6ff5 0000 75e5 0000 77a1 0000     .m...o...u...w..
   20af4:	5081 0000 7add 0000 7b99 0000 7b99 0000     .P...z...{...{..
   20b04:	7c51 0000 7c6d 0000 7c89 0000 7cb5 0000     Q|..m|...|...|..
   20b14:	7edd 0000 7f01 0000 7f1d 0000 7f39 0000     .~..........9...
   20b24:	7f55 0000 7f55 0000 7f55 0000 8041 0000     U...U...U...A...
   20b34:	82b9 0000 80b1 0000 85d9 0000 86e5 0000     ................
   20b44:	8821 0000 89e9 0000 8a09 0000 8a31 0000     !...........1...
   20b54:	5209 0000 5209 0000 8a55 0000 8a81 0000     .R...R..U.......
   20b64:	8aad 0000 8b6d 0000 504d 505f 5241 4553     ....m...MP_PARSE
   20b74:	4e5f 444f 5f45 5453 5552 5443 4b5f 4e49     _NODE_STRUCT_KIN
   20b84:	2844 6e70 2973 3c20 203d 4e50 635f 6e6f     D(pns) <= PN_con
   20b94:	7473 6f5f 6a62 6365 0074 0000 504d 505f     st_object...MP_P
   20ba4:	5241 4553 4e5f 444f 5f45 5349 535f 5254     ARSE_NODE_IS_STR
   20bb4:	4355 5f54 494b 444e 7028 736e 3e2d 6f6e     UCT_KIND(pns->no
   20bc4:	6564 5b73 5d30 202c 4e50 745f 7066 6564     des[0], PN_tfpde
   20bd4:	2966 0000 504d 505f 5241 4553 4e5f 444f     f)..MP_PARSE_NOD
   20be4:	5f45 5453 5552 5443 4b5f 4e49 2844 6e70     E_STRUCT_KIND(pn
   20bf4:	2973 3d20 203d 6e70 645f 6c62 735f 6174     s) == pn_dbl_sta
   20c04:	0072 0000 616e 656d 7220 7565 6573 2064     r...name reused 
   20c14:	6f66 2072 7261 7567 656d 746e 0000 0000     for argument....
   20c24:	504d 505f 5241 4553 4e5f 444f 5f45 5453     MP_PARSE_NODE_ST
   20c34:	5552 5443 4b5f 4e49 2844 6d28 5f70 6170     RUCT_KIND((mp_pa
   20c44:	7372 5f65 6f6e 6564 735f 7274 6375 5f74     rse_node_struct_
   20c54:	2a74 7029 5f6e 7469 7265 2029 3d3d 5020     t*)pn_iter) == P
   20c64:	5f4e 6f63 706d 665f 726f 0000 6373 706f     N_comp_for..scop
   20c74:	2d65 6b3e 6e69 2064 3d3d 5320 4f43 4550     e->kind == SCOPE
   20c84:	4d5f 444f 4c55 0045 504d 505f 5241 4553     _MODULE.MP_PARSE
   20c94:	4e5f 444f 5f45 5349 535f 5254 4355 2854     _NODE_IS_STRUCT(
   20ca4:	6373 706f 2d65 703e 296e 0000 504d 505f     scope->pn)..MP_P
   20cb4:	5241 4553 4e5f 444f 5f45 5453 5552 5443     ARSE_NODE_STRUCT
   20cc4:	4b5f 4e49 2844 6e70 2973 3d20 203d 4e50     _KIND(pns) == PN
   20cd4:	665f 6e75 6463 6665 0000 0000 504d 505f     _funcdef....MP_P
   20ce4:	5241 4553 4e5f 444f 5f45 5453 5552 5443     ARSE_NODE_STRUCT
   20cf4:	4e5f 4d55 4e5f 444f 5345 7028 736e 2029     _NUM_NODES(pns) 
   20d04:	3d3d 3320 0000 0000 6461 6564 0064 0000     == 3....added...
   20d14:	6373 706f 2d65 6b3e 6e69 2064 3d3d 5320     scope->kind == S
   20d24:	4f43 4550 435f 414c 5353 0000 504d 505f     COPE_CLASS..MP_P
   20d34:	5241 4553 4e5f 444f 5f45 5453 5552 5443     ARSE_NODE_STRUCT
   20d44:	4b5f 4e49 2844 6e70 2973 3d20 203d 4e50     _KIND(pns) == PN
   20d54:	635f 616c 7373 6564 0066 0000 6469 2120     _classdef...id !
   20d64:	203d 554e 4c4c 0000 6f63 706d 3e2d 7563     = NULL..comp->cu
   20d74:	5f72 7865 6563 7470 6c5f 7665 6c65 3d20     r_except_level =
   20d84:	203d 0030 2821 6469 2d32 663e 616c 7367     = 0.!(id2->flags
   20d94:	2620 4920 5f44 4c46 4741 495f 5f53 4150      & ID_FLAG_IS_PA
   20da4:	4152 294d 0000 0000                         RAM)....

00020dac <__func__.7752>:
   20dac:	6f63 706d 6c69 5f65 6564 7263 6165 6573     compile_decrease
   20dbc:	655f 6378 7065 5f74 656c 6576 006c 0000     _except_level...

00020dcc <__func__.7834>:
   20dcc:	5f63 6669 635f 6e6f 0064 0000               c_if_cond...

00020dd8 <__func__.7855>:
   20dd8:	5f63 7361 6973 6e67 615f 6f74 5f6d 7865     c_assign_atom_ex
   20de8:	7270 0000                                   pr..

00020dec <__func__.7877>:
   20dec:	5f63 7361 6973 6e67 0000 0000               c_assign....

00020df8 <__func__.7903>:
   20df8:	6c63 736f 5f65 766f 7265 765f 7261 6169     close_over_varia
   20e08:	6c62 7365 655f 6374 0000 0000               bles_etc....

00020e14 <__func__.7920>:
   20e14:	6f63 706d 6c69 5f65 7566 636e 6564 5f66     compile_funcdef_
   20e24:	616c 626d 6564 5f66 6170 6172 006d 0000     lambdef_param...

00020e34 <__func__.7965>:
   20e34:	6f63 706d 6c69 5f65 6564 6f63 6172 6574     compile_decorate
   20e44:	0064 0000                                   d...

00020e48 <__func__.7998>:
   20e48:	5f63 6564 5f6c 7473 746d 0000               c_del_stmt..

00020e54 <__func__.8016>:
   20e54:	6f63 706d 6c69 5f65 7262 6165 5f6b 7473     compile_break_st
   20e64:	746d 0000                                   mt..

00020e68 <__func__.8021>:
   20e68:	6f63 706d 6c69 5f65 6f63 746e 6e69 6575     compile_continue
   20e78:	735f 6d74 0074 0000                         _stmt...

00020e80 <__func__.8045>:
   20e80:	6f64 695f 706d 726f 5f74 616e 656d 0000     do_import_name..

00020e90 <__func__.8083>:
   20e90:	6f63 706d 6c69 5f65 6d69 6f70 7472 665f     compile_import_f
   20ea0:	6f72 006d                                   rom.

00020ea4 <__func__.8156>:
   20ea4:	6f63 706d 6c69 5f65 6669 735f 6d74 0074     compile_if_stmt.

00020eb4 <__func__.8189>:
   20eb4:	6f63 706d 6c69 5f65 6f66 5f72 7473 746d     compile_for_stmt
   20ec4:	6f5f 7470 6d69 7369 6465 725f 6e61 6567     _optimised_range
   20ed4:	0000 0000                                   ....

00020ed8 <__func__.8222>:
   20ed8:	6f63 706d 6c69 5f65 7274 5f79 7865 6563     compile_try_exce
   20ee8:	7470 0000                                   pt..

00020eec <__func__.8241>:
   20eec:	6f63 706d 6c69 5f65 7274 5f79 6966 616e     compile_try_fina
   20efc:	6c6c 0079                                   lly.

00020f00 <__func__.8246>:
   20f00:	6f63 706d 6c69 5f65 7274 5f79 7473 746d     compile_try_stmt
   20f10:	0000 0000                                   ....

00020f14 <__func__.8266>:
   20f14:	6f63 706d 6c69 5f65 6977 6874 735f 6d74     compile_with_stm
   20f24:	0074 0000                                   t...

00020f28 <__func__.8276>:
   20f28:	6f63 706d 6c69 5f65 7865 7270 735f 6d74     compile_expr_stm
   20f38:	0074 0000                                   t...

00020f3c <__func__.8312>:
   20f3c:	6f63 706d 6c69 5f65 6574 7473 695f 5f66     compile_test_if_
   20f4c:	7865 7270 0000 0000                         expr....

00020f54 <__func__.8363>:
   20f54:	6f63 706d 6c69 5f65 6f63 706d 7261 7369     compile_comparis
   20f64:	6e6f 0000                                   on..

00020f68 <__func__.8403>:
   20f68:	6f63 706d 6c69 5f65 6574 6d72 0000 0000     compile_term....

00020f78 <__func__.8417>:
   20f78:	6f63 706d 6c69 5f65 6166 7463 726f 325f     compile_factor_2
   20f88:	0000 0000                                   ....

00020f8c <__func__.8466>:
   20f8c:	6f63 706d 6c69 5f65 6f63 706d 6572 6568     compile_comprehe
   20f9c:	736e 6f69 006e 0000                         nsion...

00020fa4 <__func__.8474>:
   20fa4:	6f63 706d 6c69 5f65 7461 6d6f 705f 7261     compile_atom_par
   20fb4:	6e65 0000                                   en..

00020fb8 <__func__.8483>:
   20fb8:	6f63 706d 6c69 5f65 7461 6d6f 625f 6172     compile_atom_bra
   20fc8:	6b63 7465 0000 0000                         cket....

00020fd0 <__func__.8490>:
   20fd0:	6f63 706d 6c69 5f65 7461 6d6f 625f 6172     compile_atom_bra
   20fe0:	6563 0000                                   ce..

00020fe4 <__func__.8553>:
   20fe4:	6f63 706d 6c69 5f65 6f6e 6564 0000 0000     compile_node....

00020ff4 <__func__.8564>:
   20ff4:	6f63 706d 6c69 5f65 6373 706f 5f65 7566     compile_scope_fu
   21004:	636e 6c5f 6d61 6462 5f61 6170 6172 006d     nc_lambda_param.

00021014 <__func__.8587>:
   21014:	6f63 706d 6c69 5f65 6373 706f 5f65 6f63     compile_scope_co
   21024:	706d 695f 6574 0072                         mp_iter.

0002102c <__func__.8598>:
   2102c:	6f63 706d 6c69 5f65 6373 706f 0065 0000     compile_scope...

0002103c <__func__.8637>:
   2103c:	6373 706f 5f65 6f63 706d 7475 5f65 6874     scope_compute_th
   2104c:	6e69 7367 0000 0000 6469 2120 203d 554e     ings....id != NU
   2105c:	4c4c 0000 2e2e 2e2f 2f2e 7970 652f 696d     LL..../../py/emi
   2106c:	6374 6d6f 6f6d 2e6e 0063 0000 6469 3e2d     tcommon.c...id->
   2107c:	696b 646e 3d20 203d 4449 495f 464e 5f4f     kind == ID_INFO_
   2108c:	494b 444e 435f 4c45 204c 7c7c 6920 2d64     KIND_CELL || id-
   2109c:	6b3e 6e69 2064 3d3d 4920 5f44 4e49 4f46     >kind == ID_INFO
   210ac:	4b5f 4e49 5f44 5246 4545 0000               _KIND_FREE..

000210b8 <__func__.6499>:
   210b8:	706d 655f 696d 5f74 6f63 6d6d 6e6f 695f     mp_emit_common_i
   210c8:	5f64 706f 0000 0000 6d65 7469 3e2d 6f63     d_op....emit->co
   210d8:	6564 695f 666e 5f6f 666f 7366 7465 2b20     de_info_offset +
   210e8:	6e20 6d75 625f 7479 7365 745f 5f6f 7277      num_bytes_to_wr
   210f8:	7469 2065 3d3c 6520 696d 2d74 633e 646f     ite <= emit->cod
   21108:	5f65 6e69 6f66 735f 7a69 0065 2e2e 2e2f     e_info_size.../.
   21118:	2f2e 7970 652f 696d 6274 2e63 0063 0000     ./py/emitbc.c...
   21128:	6d65 7469 3e2d 7962 6574 6f63 6564 6f5f     emit->bytecode_o
   21138:	6666 6573 2074 202b 756e 5f6d 7962 6574     ffset + num_byte
   21148:	5f73 6f74 775f 6972 6574 3c20 203d 6d65     s_to_write <= em
   21158:	7469 3e2d 7962 6574 6f63 6564 735f 7a69     it->bytecode_siz
   21168:	0065 0000 2063 3d3d 4d20 5f50 4c41 4749     e...c == MP_ALIG
   21178:	284e 2c63 7320 7a69 6f65 2866 706d 6f5f     N(c, sizeof(mp_o
   21188:	6a62 745f 2929 0000 2063 3d3d 4d20 5f50     bj_t))..c == MP_
   21198:	4c41 4749 284e 2c63 7320 7a69 6f65 2866     ALIGN(c, sizeof(
   211a8:	6f76 6469 292a 0029 6469 3e2d 6f6c 6163     void*)).id->loca
   211b8:	5f6c 756e 206d 203c 3532 0035 6d65 7469     l_num < 255.emit
   211c8:	3e2d 7473 6361 5f6b 6973 657a 3d20 203d     ->stack_size == 
   211d8:	0030 0000 6d28 5f70 6e69 5f74 2974 6d65     0...(mp_int_t)em
   211e8:	7469 3e2d 7473 6361 5f6b 6973 657a 2b20     it->stack_size +
   211f8:	6420 6c65 6174 3e20 203d 0030 206c 203c      delta >= 0.l < 
   21208:	6d65 7469 3e2d 616d 5f78 756e 5f6d 616c     emit->max_num_la
   21218:	6562 736c 0000 0000 6d65 7469 3e2d 616c     bels....emit->la
   21228:	6562 5f6c 666f 7366 7465 5b73 5d6c 3d20     bel_offsets[l] =
   21238:	203d 6d28 5f70 6975 746e 745f 2d29 0031     = (mp_uint_t)-1.
   21248:	6d65 7469 3e2d 616c 6562 5f6c 666f 7366     emit->label_offs
   21258:	7465 5b73 5d6c 3d20 203d 6d65 7469 3e2d     ets[l] == emit->
   21268:	7962 6574 6f63 6564 6f5f 6666 6573 0074     bytecode_offset.
   21278:	6f74 206b 3d3d 4d20 5f50 4f54 454b 5f4e     tok == MP_TOKEN_
   21288:	4c45 494c 5350 5349 0000 0000 5f6e 6c63     ELLIPSIS....n_cl
   21298:	736f 6465 6f5f 6576 2072 3d3c 3220 3535     osed_over <= 255
   212a8:	0000 0000 5f6e 7261 7367 3c20 203d 0032     ....n_args <= 2.

000212b8 <mp_emit_bc_method_table_load_id_ops>:
   212b8:	a5b5 0000 a5f5 0000 a61d 0000 a641 0000     ............A...

000212c8 <mp_emit_bc_method_table_store_id_ops>:
   212c8:	a709 0000 a749 0000 a771 0000 a799 0000     ....I...q.......

000212d8 <mp_emit_bc_method_table_delete_id_ops>:
   212d8:	a80d 0000 a82d 0000 a84d 0000 a871 0000     ....-...M...q...

000212e8 <__func__.7284>:
   212e8:	6d65 7469 675f 7465 635f 7275 745f 5f6f     emit_get_cur_to_
   212f8:	7277 7469 5f65 6f63 6564 695f 666e 006f     write_code_info.

00021308 <__func__.7302>:
   21308:	6d65 7469 675f 7465 635f 7275 745f 5f6f     emit_get_cur_to_
   21318:	7277 7469 5f65 7962 6574 6f63 6564 0000     write_bytecode..

00021328 <__func__.7344>:
   21328:	6d65 7469 775f 6972 6574 625f 7479 6365     emit_write_bytec
   21338:	646f 5f65 7962 6574 6f5f 6a62 0000 0000     ode_byte_obj....

00021348 <__func__.7351>:
   21348:	6d65 7469 775f 6972 6574 625f 7479 6365     emit_write_bytec
   21358:	646f 5f65 7962 6574 725f 7761 635f 646f     ode_byte_raw_cod
   21368:	0065 0000                                   e...

0002136c <__func__.7374>:
   2136c:	706d 655f 696d 5f74 6362 735f 6174 7472     mp_emit_bc_start
   2137c:	705f 7361 0073 0000                         _pass...

00021384 <__func__.7391>:
   21384:	706d 655f 696d 5f74 6362 655f 646e 705f     mp_emit_bc_end_p
   21394:	7361 0073                                   ass.

00021398 <__func__.7399>:
   21398:	706d 655f 696d 5f74 6362 615f 6a64 7375     mp_emit_bc_adjus
   213a8:	5f74 7473 6361 5f6b 6973 657a 0000 0000     t_stack_size....

000213b8 <__func__.7412>:
   213b8:	706d 655f 696d 5f74 6362 6c5f 6261 6c65     mp_emit_bc_label
   213c8:	615f 7373 6769 006e                         _assign.

000213d0 <__func__.7433>:
   213d0:	706d 655f 696d 5f74 6362 6c5f 616f 5f64     mp_emit_bc_load_
   213e0:	6f63 736e 5f74 6f74 006b 0000               const_tok...

000213ec <__func__.7659>:
   213ec:	706d 655f 696d 5f74 6362 6d5f 6b61 5f65     mp_emit_bc_make_
   213fc:	6c63 736f 7275 0065                         closure.

00021404 <__func__.7687>:
   21404:	706d 655f 696d 5f74 6362 725f 6961 6573     mp_emit_bc_raise
   21414:	765f 7261 7261 7367 0000 0000 6e69 2874     _varargs....int(
   21424:	2029 7261 2067 2032 756d 7473 6220 2065     ) arg 2 must be 
   21434:	3d3e 3220 6120 646e 3c20 203d 3633 0000     >= 2 and <= 36..
   21444:	6e69 6176 696c 2064 7973 746e 7861 6620     invalid syntax f
   21454:	726f 6920 746e 6765 7265 0000 6564 6963     or integer..deci
   21464:	616d 206c 756e 626d 7265 2073 6f6e 2074     mal numbers not 
   21474:	7573 7070 726f 6574 0064 0000 6372 2120     supported...rc !
   21484:	203d 554e 4c4c 0000 2e2e 2e2f 2f2e 7970     = NULL..../../py
   21494:	652f 696d 6774 756c 2e65 0063 6564 5f66     /emitglue.c.def_
   214a4:	7261 7367 3d20 203d 504d 4f5f 4a42 4e5f     args == MP_OBJ_N
   214b4:	4c55 204c 7c7c 4d20 5f50 424f 5f4a 5349     ULL || MP_OBJ_IS
   214c4:	545f 5059 2845 6564 5f66 7261 7367 202c     _TYPE(def_args, 
   214d4:	6d26 5f70 7974 6570 745f 7075 656c 0029     &mp_type_tuple).
   214e4:	6564 5f66 776b 615f 6772 2073 3d3d 4d20     def_kw_args == M
   214f4:	5f50 424f 5f4a 554e 4c4c 7c20 207c 504d     P_OBJ_NULL || MP
   21504:	4f5f 4a42 495f 5f53 5954 4550 6428 6665     _OBJ_IS_TYPE(def
   21514:	6b5f 5f77 7261 7367 202c 6d26 5f70 7974     _kw_args, &mp_ty
   21524:	6570 645f 6369 2974 0000 0000 6372 3e2d     pe_dict)....rc->
   21534:	696b 646e 3d20 203d 504d 435f 444f 5f45     kind == MP_CODE_
   21544:	5942 4554 4f43 4544 0000 0000               BYTECODE....

00021550 <__func__.6777>:
   21550:	706d 6d5f 6b61 5f65 7566 636e 6974 6e6f     mp_make_function
   21560:	665f 6f72 5f6d 6172 5f77 6f63 6564 0000     _from_raw_code..

00021570 <mp_module___main__>:
   21570:	32d0 0002 1328 2000 616e 656d 6e20 746f     .2..(.. name not
   21580:	6420 6665 6e69 6465 0000 0000 706f 3d20      defined....op =
   21590:	203d 504d 555f 414e 5952 4f5f 5f50 4e49     = MP_UNARY_OP_IN
   215a0:	4556 5452 0000 0000 2e2e 2e2f 2f2e 7970     VERT....../../py
   215b0:	722f 6e75 6974 656d 632e 0000 6e75 7573     /runtime.c..unsu
   215c0:	7070 726f 6574 2064 7974 6570 6620 726f     pported type for
   215d0:	6f20 6570 6172 6f74 0072 0000 656e 6167      operator...nega
   215e0:	6974 6576 7320 6968 7466 6320 756f 746e     tive shift count
   215f0:	0000 0000 656e 6167 6974 6576 7020 776f     ....negative pow
   21600:	7265 7720 7469 2068 6f6e 6620 6f6c 7461     er with no float
   21610:	7320 7075 6f70 7472 0000 0000 6964 6976      support....divi
   21620:	6973 6e6f 6220 2079 657a 6f72 0000 0000     sion by zero....
   21630:	626f 656a 7463 6e20 746f 6320 6c61 616c     object not calla
   21640:	6c62 0065 7261 7367 5f32 656c 206e 202b     ble.args2_len + 
   21650:	2032 202a 616d 2d70 753e 6573 2064 3d3c     2 * map->used <=
   21660:	6120 6772 3273 615f 6c6c 636f 0000 0000      args2_alloc....
   21670:	7277 6e6f 2067 756e 626d 7265 6f20 2066     wrong number of 
   21680:	6176 756c 7365 7420 206f 6e75 6170 6b63     values to unpack
   21690:	0000 0000 7974 6570 3e2d 6f6c 6163 736c     ....type->locals
   216a0:	645f 6369 2d74 623e 7361 2e65 7974 6570     _dict->base.type
   216b0:	3d20 203d 6d26 5f70 7974 6570 645f 6369      == &mp_type_dic
   216c0:	0074 0000 6f6e 7320 6375 2068 7461 7274     t...no such attr
   216d0:	6269 7475 0065 0000 5f6f 6e69 0000 0000     ibute...o_in....
   216e0:	626f 656a 7463 6e20 746f 6920 6574 6172     object not itera
   216f0:	6c62 0065 626f 656a 7463 6e20 746f 6120     ble.object not a
   21700:	206e 7469 7265 7461 726f 0000 7328 6e65     n iterator..(sen
   21710:	5f64 6176 756c 2065 3d21 4d20 5f50 424f     d_value != MP_OB
   21720:	5f4a 554e 4c4c 2029 205e 7428 7268 776f     J_NULL) ^ (throw
   21730:	765f 6c61 6575 2120 203d 504d 4f5f 4a42     _value != MP_OBJ
   21740:	4e5f 4c55 294c 0000 6874 6f72 5f77 6176     _NULL)..throw_va
   21750:	756c 2065 3d21 4d20 5f50 424f 5f4a 554e     lue != MP_OBJ_NU
   21760:	4c4c 0000 7865 6563 7470 6f69 736e 6d20     LL..exceptions m
   21770:	7375 2074 6564 6972 6576 6620 6f72 206d     ust derive from 
   21780:	6142 6573 7845 6563 7470 6f69 006e 0000     BaseException...
   21790:	6163 6e6e 746f 6920 706d 726f 2074 616e     cannot import na
   217a0:	656d 2520 0071 0000 656d 6f6d 7972 6120     me %q...memory a
   217b0:	6c6c 636f 7461 6f69 206e 6166 6c69 6465     llocation failed
   217c0:	202c 6568 7061 6920 2073 6f6c 6b63 6465     , heap is locked
   217d0:	0000 0000 656d 6f6d 7972 6120 6c6c 636f     ....memory alloc
   217e0:	7461 6f69 206e 6166 6c69 6465 202c 6c61     ation failed, al
   217f0:	6f6c 6163 6974 676e 2520 2075 7962 6574     locating %u byte
   21800:	0073 0000                                   s...

00021804 <__func__.7215>:
   21804:	706d 755f 616e 7972 6f5f 0070               mp_unary_op.

00021810 <__func__.7332>:
   21810:	706d 635f 6c61 5f6c 7270 7065 7261 5f65     mp_call_prepare_
   21820:	7261 7367 6e5f 6b5f 5f77 6176 0072 0000     args_n_kw_var...

00021830 <__func__.7420>:
   21830:	706d 6c5f 616f 5f64 656d 6874 646f 6d5f     mp_load_method_m
   21840:	7961 6562 0000 0000                         aybe....

00021848 <__func__.7446>:
   21848:	706d 675f 7465 7469 7265 0000               mp_getiter..

00021854 <__func__.7468>:
   21854:	706d 725f 7365 6d75 0065 0000 6128 6c6c     mp_resume...(all
   21864:	776f 6465 695b 2e5d 6c66 6761 2073 2026     owed[i].flags & 
   21874:	504d 415f 4752 4b5f 4e49 5f44 414d 4b53     MP_ARG_KIND_MASK
   21884:	2029 3d3d 4d20 5f50 5241 5f47 424f 004a     ) == MP_ARG_OBJ.
   21894:	2e2e 2e2f 2f2e 7970 612f 6772 6863 6365     ../../py/argchec
   218a4:	2e6b 0063 7261 7567 656d 746e 6e20 6d75     k.c.argument num
   218b4:	742f 7079 7365 6d20 7369 616d 6374 0068     /types mismatch.

000218c4 <__func__.6333>:
   218c4:	706d 615f 6772 705f 7261 6573 615f 6c6c     mp_arg_parse_all
   218d4:	0000 0000                                   ....

000218d8 <mp_const_empty_map>:
   218d8:	0006 0000 0000 0000 0000 0000               ............

000218e4 <hash_allocation_sizes>:
   218e4:	0000 0002 0004 0006 0008 000a 000c 0011     ................
   218f4:	0017 001d 0025 002f 003b 0049 0061 007f     ....%./.;.I.a...
   21904:	00a7 00df 0125 0185 0209 02b3 0397 04c7     ....%...........
   21914:	065b 0871 0c9d 12df 1c4b 2a6d 3f91 5f57     [.q.....K.m*.?W_
   21924:	8eff d67b 6d21 7061 3e2d 7369 665f 7869     ..{.!map->is_fix
   21934:	6465 7c20 207c 6f6c 6b6f 7075 6b5f 6e69     ed || lookup_kin
   21944:	2064 3d3d 4d20 5f50 414d 5f50 4f4c 4b4f     d == MP_MAP_LOOK
   21954:	5055 0000 2e2e 2e2f 2f2e 7970 6d2f 7061     UP..../../py/map
   21964:	632e 0000                                   .c..

00021968 <__func__.6438>:
   21968:	706d 6d5f 7061 6c5f 6f6f 756b 0070 0000     mp_map_lookup...
   21978:	6e28 6c69 0029 0000 253c 3e71 0000 0000     (nil)...<%q>....
   21988:	206e 2025 2033 3d3d 3020 0000 2e2e 2e2f     n % 3 == 0..../.
   21998:	2f2e 7970 6f2f 6a62 632e 0000 7254 6361     ./py/obj.c..Trac
   219a8:	6265 6361 206b 6d28 736f 2074 6572 6563     eback (most rece
   219b8:	746e 6320 6c61 206c 616c 7473 3a29 000a     nt call last):..
   219c8:	2020 6946 656c 2220 7125 0022 000a 0000       File "%q".....
   219d8:	202c 6e69 2520 0a71 0000 0000 6163 276e     , in %q.....can'
   219e8:	2074 6f63 766e 7265 2074 6f74 6920 746e     t convert to int
   219f8:	0000 0000 7865 6570 7463 6465 7420 7075     ....expected tup
   21a08:	656c 6c2f 7369 0074 7574 6c70 2f65 696c     le/list.tuple/li
   21a18:	7473 6820 7361 7720 6f72 676e 6c20 6e65     st has wrong len
   21a28:	7467 0068 6e69 6964 6563 2073 756d 7473     gth.indices must
   21a38:	6220 2065 6e69 6574 6567 7372 0000 0000      be integers....
   21a48:	6e69 6564 2078 756f 2074 666f 7220 6e61     index out of ran
   21a58:	6567 0000 626f 656a 7463 6820 7361 6e20     ge..object has n
   21a68:	206f 656c 006e 0000 626f 656a 7463 6420     o len...object d
   21a78:	656f 2073 6f6e 2074 7573 7070 726f 2074     oes not support 
   21a88:	7469 6d65 6420 6c65 7465 6f69 006e 0000     item deletion...
   21a98:	626f 656a 7463 6920 2073 6f6e 2074 7573     object is not su
   21aa8:	7362 7263 7069 6174 6c62 0065 626f 656a     bscriptable.obje
   21ab8:	7463 6420 656f 2073 6f6e 2074 7573 7070     ct does not supp
   21ac8:	726f 2074 7469 6d65 6120 7373 6769 6d6e     ort item assignm
   21ad8:	6e65 0074                                   ent.

00021adc <mp_identity_obj>:
   21adc:	28dc 0002 e265 0000 626f 656a 7463 7720     .(..e...object w
   21aec:	7469 2068 7562 6666 7265 7020 6f72 6f74     ith buffer proto
   21afc:	6f63 206c 6572 7571 7269 6465 0000 0000     col required....

00021b0c <__func__.6945>:
   21b0c:	706d 6f5f 6a62 705f 6972 746e 655f 6378     mp_obj_print_exc
   21b1c:	7065 6974 6e6f 0000 7254 6575 0000 0000     eption..True....
   21b2c:	6146 736c 0065 0000                         False...

00021b34 <mp_type_bool>:
   21b34:	4088 0002 00ef 0000 e35d 0000 e399 0000     .@......].......
   21b44:	0000 0000 e3e1 0000 e415 0000 0000 0000     ................
	...

00021b70 <mp_const_false_obj>:
   21b70:	1b34 0002 0000 0000                         4.......

00021b78 <mp_const_true_obj>:
   21b78:	1b34 0002 0001 0000                         4.......

00021b80 <mp_type_bound_meth>:
   21b80:	4088 0002 00f1 0000 0000 0000 0000 0000     .@..............
   21b90:	e4dd 0000 0000 0000 0000 0000 0000 0000     ................
	...

00021bbc <mp_type_cell>:
   21bbc:	4088 0002 0001 0000 0000 0000 0000 0000     .@..............
	...

00021bf8 <closure_type>:
   21bf8:	4088 0002 00fa 0000 0000 0000 0000 0000     .@..............
   21c08:	e5a9 0000 0000 0000 0000 0000 0000 0000     ................
	...
   21c34:	007b 0000 202c 0000 203a 0000 007d 0000     {..., ..: ..}...
   21c44:	4d28 5f50 424f 5f4a 5349 4f5f 4a42 7328     (MP_OBJ_IS_OBJ(s
   21c54:	6c65 5f66 6e69 2029 2626 2820 6d28 5f70     elf_in) && ((mp_
   21c64:	626f 5f6a 6162 6573 745f 292a 2828 6f76     obj_base_t*)((vo
   21c74:	6469 292a 6573 666c 695f 296e 2d29 743e     id*)self_in))->t
   21c84:	7079 2d65 6d3e 6b61 5f65 656e 2077 3d3d     ype->make_new ==
   21c94:	6420 6369 5f74 616d 656b 6e5f 7765 0029      dict_make_new).
   21ca4:	2e2e 2e2f 2f2e 7970 6f2f 6a62 6964 7463     ../../py/objdict
   21cb4:	632e 0000                                   .c..

00021cb8 <dict_clear_obj>:
   21cb8:	28dc 0002 eac9 0000                         .(......

00021cc0 <dict_copy_obj>:
   21cc0:	28dc 0002 eb2d 0000                         .(..-...

00021cc8 <dict_fromkeys_fun_obj>:
   21cc8:	2a24 0002 0004 0003 ebed 0000               $*..........

00021cd4 <dict_fromkeys_obj>:
   21cd4:	4358 0002 1cc8 0002 4d28 5f50 424f 5f4a     XC......(MP_OBJ_
   21ce4:	5349 4f5f 4a42 6128 6772 5b73 5d30 2029     IS_OBJ(args[0]) 
   21cf4:	2626 2820 6d28 5f70 626f 5f6a 6162 6573     && ((mp_obj_base
   21d04:	745f 292a 2828 6f76 6469 292a 7261 7367     _t*)((void*)args
   21d14:	305b 295d 2d29 743e 7079 2d65 6d3e 6b61     [0]))->type->mak
   21d24:	5f65 656e 2077 3d3d 6420 6369 5f74 616d     e_new == dict_ma
   21d34:	656b 6e5f 7765 0029                         ke_new).

00021d3c <dict_get_obj>:
   21d3c:	2a24 0002 0004 0003 ed61 0000               $*......a...

00021d48 <dict_pop_obj>:
   21d48:	2a24 0002 0004 0003 ed81 0000               $*..........

00021d54 <dict_setdefault_obj>:
   21d54:	2a24 0002 0004 0003 eda1 0000 6f70 6970     $*..........popi
   21d64:	6574 286d 3a29 6420 6369 6974 6e6f 7261     tem(): dictionar
   21d74:	2079 7369 6520 706d 7974 0000               y is empty..

00021d80 <dict_popitem_obj>:
   21d80:	28dc 0002 edc1 0000 6964 7463 7520 6470     .(......dict upd
   21d90:	7461 2065 6573 7571 6e65 6563 6820 7361     ate sequence has
   21da0:	7720 6f72 676e 6c20 6e65 7467 0068 0000      wrong length...

00021db0 <dict_update_obj>:
   21db0:	2a24 0002 0003 ffff ee85 0000               $*..........

00021dbc <dict_view_type>:
   21dbc:	4088 0002 0102 0000 f151 0000 0000 0000     .@......Q.......
	...
   21dd4:	f225 0000 0000 0000 0000 0000 f0d9 0000     %...............
	...

00021df8 <dict_view_it_type>:
   21df8:	4088 0002 0130 0000 0000 0000 0000 0000     .@..0...........
	...
   21e1c:	e27d 0000 f03d 0000 0000 0000 0000 0000     }...=...........
	...
   21e34:	6964 7463 695f 6574 736d 0000 6964 7463     dict_items..dict
   21e44:	6b5f 7965 0073 0000 6964 7463 765f 6c61     _keys...dict_val
   21e54:	6575 0073                                   ues.

00021e58 <mp_dict_view_names>:
   21e58:	1e34 0002 1e40 0002 1e4c 0002 4d28 5f50     4...@...L...(MP_
   21e68:	424f 5f4a 5349 4f5f 4a42 7328 6c65 5f66     OBJ_IS_OBJ(self_
   21e78:	6e69 2029 2626 2820 2828 706d 6f5f 6a62     in) && (((mp_obj
   21e88:	625f 7361 5f65 2a74 2829 7628 696f 2a64     _base_t*)((void*
   21e98:	7329 6c65 5f66 6e69 2929 3e2d 7974 6570     )self_in))->type
   21ea8:	3d20 203d 2628 6964 7463 765f 6569 5f77      == (&dict_view_
   21eb8:	7469 745f 7079 2965 2929 0000 4d28 5f50     it_type)))..(MP_
   21ec8:	424f 5f4a 5349 4f5f 4a42 7628 6569 5f77     OBJ_IS_OBJ(view_
   21ed8:	6e69 2029 2626 2820 2828 706d 6f5f 6a62     in) && (((mp_obj
   21ee8:	625f 7361 5f65 2a74 2829 7628 696f 2a64     _base_t*)((void*
   21ef8:	7629 6569 5f77 6e69 2929 3e2d 7974 6570     )view_in))->type
   21f08:	3d20 203d 2628 6964 7463 765f 6569 5f77      == (&dict_view_
   21f18:	7974 6570 2929 0029 4d28 5f50 424f 5f4a     type))).(MP_OBJ_
   21f28:	5349 4f5f 4a42 7328 6c65 5f66 6e69 2029     IS_OBJ(self_in) 
   21f38:	2626 2820 2828 706d 6f5f 6a62 625f 7361     && (((mp_obj_bas
   21f48:	5f65 2a74 2829 7628 696f 2a64 7329 6c65     e_t*)((void*)sel
   21f58:	5f66 6e69 2929 3e2d 7974 6570 3d20 203d     f_in))->type == 
   21f68:	2628 6964 7463 765f 6569 5f77 7974 6570     (&dict_view_type
   21f78:	2929 0029 5b28 0000 295d 0000               ))).([..])..

00021f84 <dict_items_obj>:
   21f84:	28dc 0002 f2f1 0000                         .(......

00021f8c <dict_keys_obj>:
   21f8c:	28dc 0002 f30d 0000                         .(......

00021f94 <dict_values_obj>:
   21f94:	28dc 0002 f329 0000                         .(..)...

00021f9c <dict_locals_dict_table>:
   21f9c:	03e2 0000 1cb8 0002 03f6 0000 1cc0 0002     ................
   21fac:	0446 0000 1cd4 0002 0456 0000 1d3c 0002     F.......V...<...
   21fbc:	04ba 0000 1f84 0002 04ce 0000 1f8c 0002     ................
   21fcc:	0536 0000 1d48 0002 053a 0000 1d80 0002     6...H...:.......
   21fdc:	058a 0000 1d54 0002 05de 0000 1db0 0002     ....T...........
   21fec:	05ea 0000 1f94 0002 003e 0000 4514 0002     ........>....E..
   21ffc:	008e 0000 451c 0002 0026 0000 4524 0002     .....E..&...$E..

0002200c <dict_locals_dict>:
   2200c:	201c 0002 0077 0000 000e 0000 1f9c 0002     . ..w...........

0002201c <mp_type_dict>:
   2201c:	4088 0002 0101 0000 e7b5 0000 e851 0000     .@..........Q...
   2202c:	0000 0000 e8b9 0000 e909 0000 0000 0000     ................
   2203c:	ea35 0000 f345 0000 0000 0000 0000 0000     5...E...........
	...
   22054:	200c 0002                                   . ..

00022058 <__func__.6314>:
   22058:	6964 7463 635f 656c 7261 0000               dict_clear..

00022064 <__func__.6320>:
   22064:	6964 7463 635f 706f 0079 0000               dict_copy...

00022070 <__func__.6345>:
   22070:	6964 7463 675f 7465 685f 6c65 6570 0072     dict_get_helper.

00022080 <__func__.6367>:
   22080:	6964 7463 705f 706f 7469 6d65 0000 0000     dict_popitem....

00022090 <__func__.6379>:
   22090:	6964 7463 755f 6470 7461 0065               dict_update.

0002209c <__func__.6422>:
   2209c:	6964 7463 765f 6569 5f77 7469 695f 6574     dict_view_it_ite
   220ac:	6e72 7865 0074 0000                         rnext...

000220b4 <__func__.6435>:
   220b4:	6964 7463 765f 6569 5f77 6567 6974 6574     dict_view_getite
   220c4:	0072 0000                                   r...

000220c8 <__func__.6443>:
   220c8:	6964 7463 765f 6569 5f77 7270 6e69 0074     dict_view_print.

000220d8 <__func__.6468>:
   220d8:	6964 7463 765f 6569 0077 0000               dict_view...

000220e4 <__func__.6485>:
   220e4:	6964 7463 675f 7465 7469 7265 0000 0000     dict_getiter....

000220f4 <__func__.6507>:
   220f4:	706d 6f5f 6a62 645f 6369 5f74 7473 726f     mp_obj_dict_stor
   22104:	0065 0000                                   e...

00022108 <__func__.6517>:
   22108:	706d 6f5f 6a62 645f 6369 5f74 6567 5f74     mp_obj_dict_get_
   22118:	616d 0070                                   map.

0002211c <mp_const_GeneratorExit_obj>:
   2211c:	21e8 0002 0000 0000 0000 0000 3dcc 0002     .!...........=..
   2212c:	203a 0000 0000 0000                         : ......

00022134 <mp_type_BaseException>:
   22134:	4088 0002 00b9 0000 f535 0000 f5f9 0000     .@......5.......
	...
   22150:	f6c9 0000 0000 0000 0000 0000 0000 0000     ................
	...

00022170 <mp_type_SystemExit>:
   22170:	4088 0002 00e0 0000 f535 0000 f5f9 0000     .@......5.......
	...
   2218c:	f6c9 0000 0000 0000 0000 0000 0000 0000     ................
	...
   221a4:	2134 0002 0000 0000                         4!......

000221ac <mp_type_KeyboardInterrupt>:
   221ac:	4088 0002 00cb 0000 f535 0000 f5f9 0000     .@......5.......
	...
   221c8:	f6c9 0000 0000 0000 0000 0000 0000 0000     ................
	...
   221e0:	2134 0002 0000 0000                         4!......

000221e8 <mp_type_GeneratorExit>:
   221e8:	4088 0002 00be 0000 f535 0000 f5f9 0000     .@......5.......
	...
   22204:	f6c9 0000 0000 0000 0000 0000 0000 0000     ................
	...
   2221c:	2134 0002 0000 0000                         4!......

00022224 <mp_type_Exception>:
   22224:	4088 0002 00bd 0000 f535 0000 f5f9 0000     .@......5.......
	...
   22240:	f6c9 0000 0000 0000 0000 0000 0000 0000     ................
	...
   22258:	2134 0002 0000 0000                         4!......

00022260 <mp_type_StopIteration>:
   22260:	4088 0002 00de 0000 f535 0000 f5f9 0000     .@......5.......
	...
   2227c:	f6c9 0000 0000 0000 0000 0000 0000 0000     ................
	...
   22294:	2224 0002 0000 0000                         $"......

0002229c <mp_type_ArithmeticError>:
   2229c:	4088 0002 00b6 0000 f535 0000 f5f9 0000     .@......5.......
	...
   222b8:	f6c9 0000 0000 0000 0000 0000 0000 0000     ................
	...
   222d0:	2224 0002 0000 0000                         $"......

000222d8 <mp_type_OverflowError>:
   222d8:	4088 0002 00d6 0000 f535 0000 f5f9 0000     .@......5.......
	...
   222f4:	f6c9 0000 0000 0000 0000 0000 0000 0000     ................
	...
   2230c:	229c 0002 0000 0000                         ."......

00022314 <mp_type_ZeroDivisionError>:
   22314:	4088 0002 00e4 0000 f535 0000 f5f9 0000     .@......5.......
	...
   22330:	f6c9 0000 0000 0000 0000 0000 0000 0000     ................
	...
   22348:	229c 0002 0000 0000                         ."......

00022350 <mp_type_AssertionError>:
   22350:	4088 0002 00b7 0000 f535 0000 f5f9 0000     .@......5.......
	...
   2236c:	f6c9 0000 0000 0000 0000 0000 0000 0000     ................
	...
   22384:	2224 0002 0000 0000                         $"......

0002238c <mp_type_AttributeError>:
   2238c:	4088 0002 00b8 0000 f535 0000 f5f9 0000     .@......5.......
	...
   223a8:	f6c9 0000 0000 0000 0000 0000 0000 0000     ................
	...
   223c0:	2224 0002 0000 0000                         $"......

000223c8 <mp_type_EOFError>:
   223c8:	4088 0002 00bb 0000 f535 0000 f5f9 0000     .@......5.......
	...
   223e4:	f6c9 0000 0000 0000 0000 0000 0000 0000     ................
	...
   223fc:	2224 0002 0000 0000                         $"......

00022404 <mp_type_ImportError>:
   22404:	4088 0002 00c7 0000 f535 0000 f5f9 0000     .@......5.......
	...
   22420:	f6c9 0000 0000 0000 0000 0000 0000 0000     ................
	...
   22438:	2224 0002 0000 0000                         $"......

00022440 <mp_type_LookupError>:
   22440:	4088 0002 00cd 0000 f535 0000 f5f9 0000     .@......5.......
	...
   2245c:	f6c9 0000 0000 0000 0000 0000 0000 0000     ................
	...
   22474:	2224 0002 0000 0000                         $"......

0002247c <mp_type_IndexError>:
   2247c:	4088 0002 00c9 0000 f535 0000 f5f9 0000     .@......5.......
	...
   22498:	f6c9 0000 0000 0000 0000 0000 0000 0000     ................
	...
   224b0:	2440 0002 0000 0000                         @$......

000224b8 <mp_type_KeyError>:
   224b8:	4088 0002 00ca 0000 f535 0000 f5f9 0000     .@......5.......
	...
   224d4:	f6c9 0000 0000 0000 0000 0000 0000 0000     ................
	...
   224ec:	2440 0002 0000 0000                         @$......

000224f4 <mp_type_MemoryError>:
   224f4:	4088 0002 00cf 0000 f535 0000 f5f9 0000     .@......5.......
	...
   22510:	f6c9 0000 0000 0000 0000 0000 0000 0000     ................
	...
   22528:	2224 0002 0000 0000                         $"......

00022530 <mp_type_NameError>:
   22530:	4088 0002 00d0 0000 f535 0000 f5f9 0000     .@......5.......
	...
   2254c:	f6c9 0000 0000 0000 0000 0000 0000 0000     ................
	...
   22564:	2224 0002 0000 0000                         $"......

0002256c <mp_type_OSError>:
   2256c:	4088 0002 00d4 0000 f535 0000 f5f9 0000     .@......5.......
	...
   22588:	f6c9 0000 0000 0000 0000 0000 0000 0000     ................
	...
   225a0:	2224 0002 0000 0000                         $"......

000225a8 <mp_type_RuntimeError>:
   225a8:	4088 0002 00dc 0000 f535 0000 f5f9 0000     .@......5.......
	...
   225c4:	f6c9 0000 0000 0000 0000 0000 0000 0000     ................
	...
   225dc:	2224 0002 0000 0000                         $"......

000225e4 <mp_type_NotImplementedError>:
   225e4:	4088 0002 00d2 0000 f535 0000 f5f9 0000     .@......5.......
	...
   22600:	f6c9 0000 0000 0000 0000 0000 0000 0000     ................
	...
   22618:	25a8 0002 0000 0000                         .%......

00022620 <mp_type_SyntaxError>:
   22620:	4088 0002 00df 0000 f535 0000 f5f9 0000     .@......5.......
	...
   2263c:	f6c9 0000 0000 0000 0000 0000 0000 0000     ................
	...
   22654:	2224 0002 0000 0000                         $"......

0002265c <mp_type_IndentationError>:
   2265c:	4088 0002 00c8 0000 f535 0000 f5f9 0000     .@......5.......
	...
   22678:	f6c9 0000 0000 0000 0000 0000 0000 0000     ................
	...
   22690:	2620 0002 0000 0000                          &......

00022698 <mp_type_TypeError>:
   22698:	4088 0002 00e1 0000 f535 0000 f5f9 0000     .@......5.......
	...
   226b4:	f6c9 0000 0000 0000 0000 0000 0000 0000     ................
	...
   226cc:	2224 0002 0000 0000                         $"......

000226d4 <mp_type_ValueError>:
   226d4:	4088 0002 00e2 0000 f535 0000 f5f9 0000     .@......5.......
	...
   226f0:	f6c9 0000 0000 0000 0000 0000 0000 0000     ................
	...
   22708:	2224 0002 0000 0000 7865 5f63 7974 6570     $"......exc_type
   22718:	3e2d 616d 656b 6e5f 7765 3d20 203d 706d     ->make_new == mp
   22728:	6f5f 6a62 655f 6378 7065 6974 6e6f 6d5f     _obj_exception_m
   22738:	6b61 5f65 656e 0077 2e2e 2e2f 2f2e 7970     ake_new.../../py
   22748:	6f2f 6a62 7865 6563 7470 632e 0000 0000     /objexcept.c....
   22758:	6d66 2074 3d21 4e20 4c55 004c 706d 6f5f     fmt != NULL.mp_o
   22768:	6a62 695f 5f73 7865 6563 7470 6f69 5f6e     bj_is_exception_
   22778:	6e69 7473 6e61 6563 7328 6c65 5f66 6e69     instance(self_in
   22788:	0029 0000                                   )...

0002278c <__func__.6882>:
   2278c:	706d 6f5f 6a62 6e5f 7765 655f 6378 7065     mp_obj_new_excep
   2279c:	6974 6e6f 615f 6772 0073 0000               tion_args...

000227a8 <__func__.6904>:
   227a8:	706d 6f5f 6a62 6e5f 7765 655f 6378 7065     mp_obj_new_excep
   227b8:	6974 6e6f 6d5f 6773 765f 7261 0067 0000     tion_msg_varg...

000227c8 <__func__.6927>:
   227c8:	706d 6f5f 6a62 655f 6378 7065 6974 6e6f     mp_obj_exception
   227d8:	635f 656c 7261 745f 6172 6563 6162 6b63     _clear_traceback
   227e8:	0000 0000                                   ....

000227ec <__func__.6935>:
   227ec:	706d 6f5f 6a62 655f 6378 7065 6974 6e6f     mp_obj_exception
   227fc:	615f 6464 745f 6172 6563 6162 6b63 0000     _add_traceback..

0002280c <__func__.6944>:
   2280c:	706d 6f5f 6a62 655f 6378 7065 6974 6e6f     mp_obj_exception
   2281c:	675f 7465 745f 6172 6563 6162 6b63 0000     _get_traceback..
   2282c:	504d 4f5f 4a42 495f 5f53 5954 4550 7328     MP_OBJ_IS_TYPE(s
   2283c:	6c65 5f66 6e69 202c 6d26 5f70 7974 6570     elf_in, &mp_type
   2284c:	665f 6e75 625f 6975 746c 6e69 305f 0029     _fun_builtin_0).
   2285c:	2e2e 2e2f 2f2e 7970 6f2f 6a62 7566 2e6e     ../../py/objfun.
   2286c:	0063 0000                                   c...

00022870 <mp_type_fun_builtin_0>:
   22870:	4088 0002 0112 0000 0000 0000 0000 0000     .@..............
   22880:	fc9d 0000 e30d 0000 0000 0000 0000 0000     ................
	...
   228ac:	504d 4f5f 4a42 495f 5f53 5954 4550 7328     MP_OBJ_IS_TYPE(s
   228bc:	6c65 5f66 6e69 202c 6d26 5f70 7974 6570     elf_in, &mp_type
   228cc:	665f 6e75 625f 6975 746c 6e69 315f 0029     _fun_builtin_1).

000228dc <mp_type_fun_builtin_1>:
   228dc:	4088 0002 0112 0000 0000 0000 0000 0000     .@..............
   228ec:	fd09 0000 e30d 0000 0000 0000 0000 0000     ................
	...
   22918:	504d 4f5f 4a42 495f 5f53 5954 4550 7328     MP_OBJ_IS_TYPE(s
   22928:	6c65 5f66 6e69 202c 6d26 5f70 7974 6570     elf_in, &mp_type
   22938:	665f 6e75 625f 6975 746c 6e69 325f 0029     _fun_builtin_2).

00022948 <mp_type_fun_builtin_2>:
   22948:	4088 0002 0112 0000 0000 0000 0000 0000     .@..............
   22958:	fd79 0000 e30d 0000 0000 0000 0000 0000     y...............
	...
   22984:	504d 4f5f 4a42 495f 5f53 5954 4550 7328     MP_OBJ_IS_TYPE(s
   22994:	6c65 5f66 6e69 202c 6d26 5f70 7974 6570     elf_in, &mp_type
   229a4:	665f 6e75 625f 6975 746c 6e69 335f 0029     _fun_builtin_3).

000229b4 <mp_type_fun_builtin_3>:
   229b4:	4088 0002 0112 0000 0000 0000 0000 0000     .@..............
   229c4:	fdf1 0000 e30d 0000 0000 0000 0000 0000     ................
	...
   229f0:	504d 4f5f 4a42 495f 5f53 5954 4550 7328     MP_OBJ_IS_TYPE(s
   22a00:	6c65 5f66 6e69 202c 6d26 5f70 7974 6570     elf_in, &mp_type
   22a10:	665f 6e75 625f 6975 746c 6e69 765f 7261     _fun_builtin_var
   22a20:	0029 0000                                   )...

00022a24 <mp_type_fun_builtin_var>:
   22a24:	4088 0002 0112 0000 0000 0000 0000 0000     .@..............
   22a34:	fe6d 0000 e30d 0000 0000 0000 0000 0000     m...............
	...
   22a60:	6d76 725f 7465 7275 5f6e 696b 646e 3d20     vm_return_kind =
   22a70:	203d 504d 565f 5f4d 4552 5554 4e52 455f     = MP_VM_RETURN_E
   22a80:	4358 5045 4954 4e4f 0000 0000               XCEPTION....

00022a8c <mp_type_fun_bc>:
   22a8c:	4088 0002 0112 0000 0000 0000 0000 0000     .@..............
   22a9c:	ff95 0000 e30d 0000 0000 0000 0000 0000     ................
	...
   22ac8:	504d 4f5f 4a42 495f 5f53 5954 4550 6428     MP_OBJ_IS_TYPE(d
   22ad8:	6665 615f 6772 5f73 6e69 202c 6d26 5f70     ef_args_in, &mp_
   22ae8:	7974 6570 745f 7075 656c 0029               type_tuple).

00022af4 <__func__.6186>:
   22af4:	7566 5f6e 7562 6c69 6974 5f6e 5f30 6163     fun_builtin_0_ca
   22b04:	6c6c 0000                                   ll..

00022b08 <__func__.6195>:
   22b08:	7566 5f6e 7562 6c69 6974 5f6e 5f31 6163     fun_builtin_1_ca
   22b18:	6c6c 0000                                   ll..

00022b1c <__func__.6204>:
   22b1c:	7566 5f6e 7562 6c69 6974 5f6e 5f32 6163     fun_builtin_2_ca
   22b2c:	6c6c 0000                                   ll..

00022b30 <__func__.6213>:
   22b30:	7566 5f6e 7562 6c69 6974 5f6e 5f33 6163     fun_builtin_3_ca
   22b40:	6c6c 0000                                   ll..

00022b44 <__func__.6222>:
   22b44:	7566 5f6e 7562 6c69 6974 5f6e 6176 5f72     fun_builtin_var_
   22b54:	6163 6c6c 0000 0000                         call....

00022b5c <__func__.6247>:
   22b5c:	7566 5f6e 6362 635f 6c61 006c               fun_bc_call.

00022b68 <__func__.6258>:
   22b68:	706d 6f5f 6a62 6e5f 7765 665f 6e75 625f     mp_obj_new_fun_b
   22b78:	0063 0000 6573 666c 665f 6e75 3e2d 6162     c...self_fun->ba
   22b88:	6573 742e 7079 2065 3d3d 2620 706d 745f     se.type == &mp_t
   22b98:	7079 5f65 7566 5f6e 6362 0000 2e2e 2e2f     ype_fun_bc..../.
   22ba8:	2f2e 7970 6f2f 6a62 6567 656e 6172 6f74     ./py/objgenerato
   22bb8:	2e72 0063                                   r.c.

00022bbc <mp_type_gen_wrap>:
   22bbc:	4088 0002 0114 0000 0000 0000 0000 0000     .@..............
   22bcc:	01e9 0001 e30d 0000 0000 0000 0000 0000     ................
	...
   22bf8:	673c 6e65 7265 7461 726f 6f20 6a62 6365     <generator objec
   22c08:	2074 2527 2771 6120 2074 7025 003e 0000     t '%q' at %p>...
   22c18:	4d28 5f50 424f 5f4a 5349 4f5f 4a42 7328     (MP_OBJ_IS_OBJ(s
   22c28:	6c65 5f66 6e69 2029 2626 2820 2828 706d     elf_in) && (((mp
   22c38:	6f5f 6a62 625f 7361 5f65 2a74 2829 7628     _obj_base_t*)((v
   22c48:	696f 2a64 7329 6c65 5f66 6e69 2929 3e2d     oid*)self_in))->
   22c58:	7974 6570 3d20 203d 2628 706d 745f 7079     type == (&mp_typ
   22c68:	5f65 6567 5f6e 6e69 7473 6e61 6563 2929     e_gen_instance))
   22c78:	0029 0000 6163 276e 2074 6573 646e 6e20     )...can't send n
   22c88:	6e6f 4e2d 6e6f 2065 6176 756c 2065 6f74     on-None value to
   22c98:	6120 6a20 7375 2d74 7473 7261 6574 2064      a just-started 
   22ca8:	6567 656e 6172 6f74 0072 0000               generator...

00022cb4 <gen_instance_send_obj>:
   22cb4:	2948 0002 04dd 0001                         H)......

00022cbc <gen_instance_throw_obj>:
   22cbc:	2a24 0002 0004 0004 0515 0001 6567 656e     $*..........gene
   22ccc:	6172 6f74 2072 6769 6f6e 6572 2064 6547     rator ignored Ge
   22cdc:	656e 6172 6f74 4572 6978 0074               neratorExit.

00022ce8 <gen_instance_close_obj>:
   22ce8:	28dc 0002 0569 0001 6163 276e 2074 6570     .(..i...can't pe
   22cf8:	646e 7420 7268 776f 7420 206f 756a 7473     nd throw to just
   22d08:	732d 6174 7472 6465 6720 6e65 7265 7461     -started generat
   22d18:	726f 0000                                   or..

00022d1c <gen_instance_pend_throw_obj>:
   22d1c:	2948 0002 05f1 0001                         H)......

00022d24 <gen_instance_locals_dict_table>:
   22d24:	03e6 0000 2ce8 0002 057e 0000 2cb4 0002     .....,..~....,..
   22d34:	05c6 0000 2cbc 0002 052e 0000 2d1c 0002     .....,.......-..

00022d44 <gen_instance_locals_dict>:
   22d44:	201c 0002 0027 0000 0004 0000 2d24 0002     . ..'.......$-..

00022d54 <mp_type_gen_instance>:
   22d54:	4088 0002 0114 0000 02c5 0001 0000 0000     .@..............
   22d64:	0000 0000 e30d 0000 0000 0000 0000 0000     ................
   22d74:	0000 0000 e27d 0000 04bd 0001 0000 0000     ....}...........
	...
   22d8c:	2d44 0002                                   D-..

00022d90 <__func__.6389>:
   22d90:	6567 5f6e 7277 7061 635f 6c61 006c 0000     gen_wrap_call...

00022da0 <__func__.6410>:
   22da0:	706d 6f5f 6a62 675f 6e65 725f 7365 6d75     mp_obj_gen_resum
   22db0:	0065 0000                                   e...

00022db4 <it_type>:
   22db4:	4088 0002 0130 0000 0000 0000 0000 0000     .@..0...........
	...
   22dd8:	e27d 0000 0631 0001 0000 0000 0000 0000     }...1...........
	...

00022df0 <log_base2_floor>:
   22df0:	0100 0201 0202 0302 0303 0303 0303 0403     ................
   22e00:	2032 3d3c 6220 7361 2065 2626 6220 7361     2 <= base && bas
   22e10:	2065 3d3c 3120 0036 2e2e 2e2f 2f2e 7970     e <= 16.../../py
   22e20:	6f2f 6a62 6e69 2e74 0063 0000 6f6c 676e     /objint.c...long
   22e30:	6920 746e 6e20 746f 7320 7075 6f70 7472      int not support
   22e40:	6465 6920 206e 6874 7369 6220 6975 646c     ed in this build
   22e50:	0000 0000 6d73 6c61 206c 6e69 2074 766f     ....small int ov
   22e60:	7265 6c66 776f 0000                         erflow..

00022e68 <int_from_bytes_fun_obj>:
   22e68:	2a24 0002 0006 0004 0ce1 0001               $*..........

00022e74 <int_from_bytes_obj>:
   22e74:	4358 0002 2e68 0002                         XC..h...

00022e7c <int_to_bytes_obj>:
   22e7c:	2a24 0002 0006 0004 0d5d 0001               $*......]...

00022e88 <int_locals_dict_table>:
   22e88:	0442 0000 2e74 0002 05ca 0000 2e7c 0002     B...t.......|...

00022e98 <int_locals_dict>:
   22e98:	201c 0002 0017 0000 0002 0000 2e88 0002     . ..............

00022ea8 <mp_type_int>:
   22ea8:	4088 0002 0124 0000 0859 0001 0755 0001     .@..$...Y...U...
   22eb8:	0000 0000 0af9 0001 0b11 0001 0000 0000     ................
	...
   22ee0:	2e98 0002                                   ....

00022ee4 <__func__.6907>:
   22ee4:	706d 695f 746e 665f 726f 616d 5f74 6973     mp_int_format_si
   22ef4:	657a 0000 005b 0000 202c 0000 005d 0000     ze..[..., ..]...
   22f04:	4d28 5f50 424f 5f4a 5349 4f5f 4a42 7328     (MP_OBJ_IS_OBJ(s
   22f14:	6c65 5f66 6e69 2029 2626 2820 2828 706d     elf_in) && (((mp
   22f24:	6f5f 6a62 625f 7361 5f65 2a74 2829 7628     _obj_base_t*)((v
   22f34:	696f 2a64 7329 6c65 5f66 6e69 2929 3e2d     oid*)self_in))->
   22f44:	7974 6570 3d20 203d 2628 706d 745f 7079     type == (&mp_typ
   22f54:	5f65 696c 7473 2929 0029 0000 2e2e 2e2f     e_list)))...../.
   22f64:	2f2e 7970 6f2f 6a62 696c 7473 632e 0000     ./py/objlist.c..
   22f74:	4d28 5f50 424f 5f4a 5349 4f5f 4a42 6128     (MP_OBJ_IS_OBJ(a
   22f84:	6772 5b73 5d30 2029 2626 2820 2828 706d     rgs[0]) && (((mp
   22f94:	6f5f 6a62 625f 7361 5f65 2a74 2829 7628     _obj_base_t*)((v
   22fa4:	696f 2a64 6129 6772 5b73 5d30 2929 3e2d     oid*)args[0]))->
   22fb4:	7974 6570 3d20 203d 2628 706d 745f 7079     type == (&mp_typ
   22fc4:	5f65 696c 7473 2929 0029 0000 6f70 2070     e_list)))...pop 
   22fd4:	7266 6d6f 6520 706d 7974 6c20 7369 0074     from empty list.
   22fe4:	4d28 5f50 424f 5f4a 5349 4f5f 4a42 7028     (MP_OBJ_IS_OBJ(p
   22ff4:	736f 615f 6772 5b73 5d30 2029 2626 2820     os_args[0]) && (
   23004:	2828 706d 6f5f 6a62 625f 7361 5f65 2a74     ((mp_obj_base_t*
   23014:	2829 7628 696f 2a64 7029 736f 615f 6772     )((void*)pos_arg
   23024:	5b73 5d30 2929 3e2d 7974 6570 3d20 203d     s[0]))->type == 
   23034:	2628 706d 745f 7079 5f65 696c 7473 2929     (&mp_type_list))
   23044:	0029 0000                                   )...

00023048 <list_append_obj>:
   23048:	2948 0002 11ed 0001                         H)......

00023050 <list_extend_obj>:
   23050:	2948 0002 12ad 0001                         H)......

00023058 <list_clear_obj>:
   23058:	28dc 0002 16cd 0001                         .(......

00023060 <list_copy_obj>:
   23060:	28dc 0002 1751 0001                         .(..Q...

00023068 <list_count_obj>:
   23068:	2948 0002 17b1 0001                         H)......

00023070 <list_index_obj>:
   23070:	2a24 0002 0004 0004 1815 0001               $*..........

0002307c <list_insert_obj>:
   2307c:	29b4 0002 1881 0001                         .)......

00023084 <list_pop_obj>:
   23084:	2a24 0002 0002 0002 13bd 0001               $*..........

00023090 <list_remove_obj>:
   23090:	2948 0002 1955 0001                         H)..U...

00023098 <list_reverse_obj>:
   23098:	28dc 0002 19cd 0001                         .(......

000230a0 <list_sort_obj>:
   230a0:	2a24 0002 0003 ffff 1609 0001               $*..........

000230ac <list_locals_dict_table>:
   230ac:	03ae 0000 3048 0002 03e2 0000 3058 0002     ....H0......X0..
   230bc:	03f6 0000 3060 0002 03fa 0000 3068 0002     ....`0......h0..
   230cc:	0432 0000 3050 0002 0482 0000 3070 0002     2...P0......p0..
   230dc:	048e 0000 307c 0002 0536 0000 3084 0002     ....|0..6....0..
   230ec:	0552 0000 3090 0002 0566 0000 3098 0002     R....0..f....0..
   230fc:	0592 0000 30a0 0002                         .....0..

00023104 <list_locals_dict>:
   23104:	201c 0002 005f 0000 000b 0000 30ac 0002     . .._........0..

00023114 <mp_type_list>:
   23114:	4088 0002 0135 0000 0e51 0001 0efd 0001     .@..5...Q.......
   23124:	0000 0000 0f4d 0001 0f95 0001 0000 0000     ....M...........
   23134:	1161 0001 11cd 0001 0000 0000 0000 0000     a...............
	...
   2314c:	3104 0002                                   .1..

00023150 <__func__.6216>:
   23150:	706d 6f5f 6a62 6c5f 7369 5f74 7061 6570     mp_obj_list_appe
   23160:	646e 0000                                   nd..

00023164 <__func__.6222>:
   23164:	696c 7473 655f 7478 6e65 0064               list_extend.

00023170 <__func__.6229>:
   23170:	696c 7473 705f 706f 0000 0000               list_pop....

0002317c <allowed_args.6258>:
   2317c:	0132 0203 345c 0002 0159 0201 0000 0000     2...\4..Y.......

0002318c <__func__.6263>:
   2318c:	706d 6f5f 6a62 6c5f 7369 5f74 6f73 7472     mp_obj_list_sort
   2319c:	0000 0000                                   ....

000231a0 <__func__.6268>:
   231a0:	696c 7473 635f 656c 7261 0000               list_clear..

000231ac <__func__.6273>:
   231ac:	696c 7473 635f 706f 0079 0000               list_copy...

000231b8 <__func__.6279>:
   231b8:	696c 7473 635f 756f 746e 0000               list_count..

000231c4 <__func__.6285>:
   231c4:	696c 7473 695f 646e 7865 0000               list_index..

000231d0 <__func__.6292>:
   231d0:	696c 7473 695f 736e 7265 0074               list_insert.

000231dc <__func__.6303>:
   231dc:	706d 6f5f 6a62 6c5f 7369 5f74 6572 6f6d     mp_obj_list_remo
   231ec:	6576 0000                                   ve..

000231f0 <__func__.6308>:
   231f0:	696c 7473 725f 7665 7265 6573 0000 0000     list_reverse....
   23200:	4d28 5f50 424f 5f4a 5349 4f5f 4a42 7328     (MP_OBJ_IS_OBJ(s
   23210:	6c65 5f66 6e69 2029 2626 2820 2828 706d     elf_in) && (((mp
   23220:	6f5f 6a62 625f 7361 5f65 2a74 2829 7628     _obj_base_t*)((v
   23230:	696f 2a64 7329 6c65 5f66 6e69 2929 3e2d     oid*)self_in))->
   23240:	7974 6570 3d20 203d 2628 706d 745f 7079     type == (&mp_typ
   23250:	5f65 616d 2970 2929 0000 0000 2e2e 2e2f     e_map)))....../.
   23260:	2f2e 7970 6f2f 6a62 616d 2e70 0063 0000     ./py/objmap.c...

00023270 <mp_type_map>:
   23270:	4088 0002 013b 0000 0000 0000 1c91 0001     .@..;...........
	...
   23294:	e27d 0000 1d19 0001 0000 0000 0000 0000     }...............
	...

000232ac <__func__.6331>:
   232ac:	616d 5f70 7469 7265 656e 7478 0000 0000     map_iternext....
   232bc:	0000 0000 6d3c 646f 6c75 2065 2527 2773     ....<module '%s'
   232cc:	003e 0000                                   >...

000232d0 <mp_type_module>:
   232d0:	4088 0002 0141 0000 1e09 0001 0000 0000     .@..A...........
	...
   232ec:	1e5d 0001 0000 0000 0000 0000 0000 0000     ]...............
	...
   2330c:	504d 4f5f 4a42 495f 5f53 5954 4550 7328     MP_OBJ_IS_TYPE(s
   2331c:	6c65 5f66 6e69 202c 6d26 5f70 7974 6570     elf_in, &mp_type
   2332c:	6d5f 646f 6c75 2965 0000 0000 2e2e 2e2f     _module)....../.
   2333c:	2f2e 7970 6f2f 6a62 6f6d 7564 656c 632e     ./py/objmodule.c
   2334c:	0000 0000                                   ....

00023350 <mp_builtin_module_table>:
   23350:	006a 0000 1570 0002 03ca 0000 4a30 0002     j...p.......0J..
   23360:	04fe 0000 4b4c 0002 044e 0000 4af0 0002     ....LK..N....J..
   23370:	05d6 0000 5374 0002                         ....tS..

00023378 <mp_builtin_module_map>:
   23378:	002f 0000 0005 0000 3350 0002               /.......P3..

00023384 <__func__.6437>:
   23384:	706d 6f5f 6a62 6d5f 646f 6c75 5f65 6567     mp_obj_module_ge
   23394:	5f74 6c67 626f 6c61 0073 0000               t_globals...

000233a0 <mp_type_object>:
   233a0:	4088 0002 0145 0000 0000 0000 2051 0001     .@..E.......Q ..
	...

000233dc <mp_type_polymorph_iter>:
   233dc:	4088 0002 0130 0000 0000 0000 0000 0000     .@..0...........
	...
   23400:	e27d 0000 2089 0001 0000 0000 0000 0000     }.... ..........
	...
   23418:	6f4e 656e 0000 0000                         None....

00023420 <mp_type_NoneType>:
   23420:	4088 0002 00d1 0000 20a9 0001 0000 0000     .@....... ......
   23430:	0000 0000 e30d 0000 0000 0000 0000 0000     ................
	...

0002345c <mp_const_none_obj>:
   2345c:	3420 0002                                    4..

00023460 <range_it_type>:
   23460:	4088 0002 0130 0000 0000 0000 0000 0000     .@..0...........
	...
   23484:	e27d 0000 20f1 0001 0000 0000 0000 0000     }.... ..........
	...
   2349c:	6172 676e 2865 6425 202c 6425 0000 0000     range(%d, %d....
   234ac:	0029 0000 202c 6425 0029 0000 657a 6f72     )..., %d)...zero
   234bc:	7320 6574 0070 0000                          step...

000234c4 <mp_type_range>:
   234c4:	4088 0002 0153 0000 218d 0001 21e1 0001     .@..S....!...!..
   234d4:	0000 0000 22dd 0001 0000 0000 23a9 0001     .....".......#..
   234e4:	2329 0001 237d 0001 0000 0000 0000 0000     )#..}#..........
	...
   23500:	7125 0000                                   %q..

00023504 <mp_type_singleton>:
   23504:	4088 0002 0001 0000 241d 0001 0000 0000     .@.......$......
	...

00023540 <mp_const_ellipsis_obj>:
   23540:	3504 0002 00bc 0000 6325 0000 255c 0063     .5......%c..\%c.
   23550:	5c5c 0000 6e5c 0000 725c 0000 745c 0000     \\..\n..\r..\t..
   23560:	785c 3025 7832 0000 2e25 732a 0000 0000     \x%02x..%.*s....
   23570:	0062 0000 7962 6574 2073 6176 756c 2065     b...bytes value 
   23580:	756f 2074 666f 7220 6e61 6567 0000 0000     out of range....
   23590:	7277 6e6f 2067 756e 626d 7265 6f20 2066     wrong number of 
   235a0:	7261 7567 656d 746e 0073 0000 4d28 5f50     arguments...(MP_
   235b0:	424f 5f4a 5349 515f 5453 2852 6573 666c     OBJ_IS_QSTR(self
   235c0:	695f 296e 7c20 207c 4d28 5f50 424f 5f4a     _in) || (MP_OBJ_
   235d0:	5349 4f5f 4a42 7328 6c65 5f66 6e69 2029     IS_OBJ(self_in) 
   235e0:	2626 2820 6d28 5f70 626f 5f6a 6162 6573     && ((mp_obj_base
   235f0:	745f 292a 2828 6f76 6469 292a 6573 666c     _t*)((void*)self
   23600:	695f 296e 2d29 743e 7079 2d65 623e 6e69     _in))->type->bin
   23610:	7261 5f79 706f 3d20 203d 706d 6f5f 6a62     ary_op == mp_obj
   23620:	735f 7274 625f 6e69 7261 5f79 706f 2929     _str_binary_op))
   23630:	0000 0000 2e2e 2e2f 2f2e 7970 6f2f 6a62     ....../../py/obj
   23640:	7473 2e72 0063 0000 6f6a 6e69 6520 7078     str.c...join exp
   23650:	6365 7374 6120 6c20 7369 2074 666f 7320     ects a list of s
   23660:	7274 622f 7479 7365 6f20 6a62 6365 7374     tr/bytes objects
   23670:	6320 6e6f 6973 7473 6e65 2074 6977 6874      consistent with
   23680:	7320 6c65 2066 626f 656a 7463 0000 0000      self object....

00023690 <str_join_obj>:
   23690:	2948 0002 2ec1 0001 6d65 7470 2079 6573     H)......empty se
   236a0:	6170 6172 6f74 0072                         parator.

000236a8 <str_split_obj>:
   236a8:	2a24 0002 0002 0003 30f5 0001 7372 6c70     $*.......0..rspl
   236b8:	7469 4e28 6e6f 2c65 296e 0000               it(None,n)..

000236c4 <str_rsplit_obj>:
   236c4:	2a24 0002 0002 0003 3309 0001 4d28 5f50     $*.......3..(MP_
   236d4:	424f 5f4a 5349 515f 5453 2852 7261 7367     OBJ_IS_QSTR(args
   236e4:	305b 295d 7c20 207c 4d28 5f50 424f 5f4a     [0]) || (MP_OBJ_
   236f4:	5349 4f5f 4a42 6128 6772 5b73 5d30 2029     IS_OBJ(args[0]) 
   23704:	2626 2820 6d28 5f70 626f 5f6a 6162 6573     && ((mp_obj_base
   23714:	745f 292a 2828 6f76 6469 292a 7261 7367     _t*)((void*)args
   23724:	305b 295d 2d29 743e 7079 2d65 623e 6e69     [0]))->type->bin
   23734:	7261 5f79 706f 3d20 203d 706d 6f5f 6a62     ary_op == mp_obj
   23744:	735f 7274 625f 6e69 7261 5f79 706f 2929     _str_binary_op))
   23754:	0000 0000 7573 7362 7274 6e69 2067 6f6e     ....substring no
   23764:	2074 6f66 6e75 0064                         t found.

0002376c <str_find_obj>:
   2376c:	2a24 0002 0004 0004 3695 0001               $*.......6..

00023778 <str_rfind_obj>:
   23778:	2a24 0002 0004 0004 36b5 0001               $*.......6..

00023784 <str_index_obj>:
   23784:	2a24 0002 0004 0004 36d9 0001               $*.......6..

00023790 <str_rindex_obj>:
   23790:	2a24 0002 0004 0004 36f9 0001               $*.......6..

0002379c <str_startswith_obj>:
   2379c:	2a24 0002 0004 0003 371d 0001 7473 7261     $*.......7..star
   237ac:	2f74 6e65 2064 6e69 6964 6563 0073 0000     t/end indices...

000237bc <str_endswith_obj>:
   237bc:	2a24 0002 0004 0003 37e1 0001 616c 7473     $*.......7..last
   237cc:	675f 6f6f 5f64 6863 7261 705f 736f 3e20     _good_char_pos >
   237dc:	203d 6966 7372 5f74 6f67 646f 635f 6168     = first_good_cha
   237ec:	5f72 6f70 0073 0000 6966 7372 5f74 6f67     r_pos...first_go
   237fc:	646f 635f 6168 5f72 6f70 2073 3d3d 3020     od_char_pos == 0
   2380c:	0000 0000                                   ....

00023810 <str_strip_obj>:
   23810:	2a24 0002 0002 0002 3ac5 0001               $*.......:..

0002381c <str_lstrip_obj>:
   2381c:	2a24 0002 0002 0002 3ae5 0001               $*.......:..

00023828 <str_rstrip_obj>:
   23828:	2a24 0002 0002 0002 3b05 0001 3e3c 5e3d     $*.......;..<>=^
   23838:	0000 0000 6362 6564 6645 6746 6e47 736f     ....bcdeEfFgGnos
   23848:	5878 0025 6162 2064 6f66 6d72 7461 7320     xX%.bad format s
   23858:	7274 6e69 0067 0000 7574 6c70 2065 6e69     tring...tuple in
   23868:	6564 2078 756f 2074 666f 7220 6e61 6567     dex out of range
   23878:	0000 0000 7461 7274 6269 7475 7365 6e20     ....attributes n
   23888:	746f 7320 7075 6f70 7472 6465 7920 7465     ot supported yet
   23898:	0000 0000 6f63 766e 7265 6973 6e6f 3d20     ....conversion =
   238a8:	203d 7227 0027 0000                         = 'r'...

000238b0 <str_format_obj>:
   238b0:	2a24 0002 0003 ffff 4605 0001 4d28 5f50     $*.......F..(MP_
   238c0:	424f 5f4a 5349 515f 5453 2852 6170 7474     OBJ_IS_QSTR(patt
   238d0:	7265 296e 7c20 207c 4d28 5f50 424f 5f4a     ern) || (MP_OBJ_
   238e0:	5349 4f5f 4a42 7028 7461 6574 6e72 2029     IS_OBJ(pattern) 
   238f0:	2626 2820 6d28 5f70 626f 5f6a 6162 6573     && ((mp_obj_base
   23900:	745f 292a 2828 6f76 6469 292a 6170 7474     _t*)((void*)patt
   23910:	7265 296e 2d29 743e 7079 2d65 623e 6e69     ern))->type->bin
   23920:	7261 5f79 706f 3d20 203d 706d 6f5f 6a62     ary_op == mp_obj
   23930:	735f 7274 625f 6e69 7261 5f79 706f 2929     _str_binary_op))
   23940:	0000 0000 6f66 6d72 7461 7220 7165 6975     ....format requi
   23950:	6572 2073 2061 6964 7463 0000 6f6e 2074     res a dict..not 
   23960:	6e65 756f 6867 6120 6772 6d75 6e65 7374     enough arguments
   23970:	6620 726f 6620 726f 616d 2074 7473 6972      for format stri
   23980:	676e 0000 2525 2063 6572 7571 7269 7365     ng..%%c requires
   23990:	6920 746e 6f20 2072 6863 7261 0000 0000      int or char....
   239a0:	6e69 6574 6567 2072 6572 7571 7269 6465     integer required
   239b0:	0000 0000 6f6e 2074 6c61 206c 7261 7567     ....not all argu
   239c0:	656d 746e 2073 6f63 766e 7265 6574 2064     ments converted 
   239d0:	7564 6972 676e 7320 7274 6e69 2067 6f66     during string fo
   239e0:	6d72 7461 6974 676e 0000 0000 6164 6174     rmatting....data
   239f0:	2120 203d 554e 4c4c 0000 0000                != NULL....

000239fc <str_replace_obj>:
   239fc:	2a24 0002 0006 0004 4d35 0001               $*......5M..

00023a08 <str_count_obj>:
   23a08:	2a24 0002 0004 0004 5019 0001               $*.......P..

00023a14 <str_lower_obj>:
   23a14:	28dc 0002 5289 0001                         .(...R..

00023a1c <str_upper_obj>:
   23a1c:	28dc 0002 52a9 0001                         .(...R..

00023a24 <str_isspace_obj>:
   23a24:	28dc 0002 53c9 0001                         .(...S..

00023a2c <str_isalpha_obj>:
   23a2c:	28dc 0002 53e9 0001                         .(...S..

00023a34 <str_isdigit_obj>:
   23a34:	28dc 0002 5409 0001                         .(...T..

00023a3c <str_isupper_obj>:
   23a3c:	28dc 0002 5429 0001                         .(..)T..

00023a44 <str_islower_obj>:
   23a44:	28dc 0002 5449 0001                         .(..IT..

00023a4c <str8_locals_dict_table>:
   23a4c:	0436 0000 376c 0002 056a 0000 3778 0002     6...l7..j...x7..
   23a5c:	0482 0000 3784 0002 056e 0000 3790 0002     .....7..n....7..
   23a6c:	04c6 0000 3690 0002 059a 0000 36a8 0002     .....6.......6..
   23a7c:	0576 0000 36c4 0002 05a2 0000 379c 0002     v....6.......7..
   23a8c:	0426 0000 37bc 0002 05b6 0000 3810 0002     &....7.......8..
   23a9c:	04ea 0000 381c 0002 057a 0000 3828 0002     .....8..z...(8..
   23aac:	043a 0000 38b0 0002 0556 0000 39fc 0002     :....8..V....9..
   23abc:	03fa 0000 3a08 0002 04e6 0000 3a14 0002     .....:.......:..
   23acc:	05e2 0000 3a1c 0002 04ae 0000 3a24 0002     .....:......$:..
   23adc:	049a 0000 3a2c 0002 049e 0000 3a34 0002     ....,:......4:..
   23aec:	04b6 0000 3a3c 0002 04aa 0000 3a44 0002     ....<:......D:..

00023afc <str8_locals_dict>:
   23afc:	201c 0002 00b7 0000 0016 0000 3a4c 0002     . ..........L:..

00023b0c <mp_type_str>:
   23b0c:	4088 0002 016c 0000 2685 0001 2739 0001     .@..l....&..9'..
	...
   23b24:	2b11 0001 0000 0000 2e35 0001 5a15 0001     .+......5....Z..
   23b34:	0000 0000 5469 0001 0000 0000 0000 0000     ....iT..........
   23b44:	3afc 0002                                   .:..

00023b48 <mp_type_bytes>:
   23b48:	4088 0002 00f4 0000 2685 0001 2889 0001     .@.......&...(..
	...
   23b60:	2b11 0001 0000 0000 2e35 0001 5ac9 0001     .+......5....Z..
   23b70:	0000 0000 5469 0001 0000 0000 0000 0000     ....iT..........
   23b80:	3afc 0002 0000 0000                         .:......

00023b88 <mp_const_empty_bytes_obj>:
   23b88:	3b48 0002 0000 0000 0000 0000 3b84 0002     H;...........;..
   23b98:	6163 276e 2074 6f63 766e 7265 2074 6f74     can't convert to
   23ba8:	7320 7274 6920 706d 696c 6963 6c74 0079      str implicitly.

00023bb8 <__func__.6350>:
   23bb8:	7473 5f72 6f6a 6e69 0000 0000               str_join....

00023bc4 <__func__.6432>:
   23bc4:	7473 5f72 6966 646e 7265 0000               str_finder..

00023bd0 <__func__.6490>:
   23bd0:	7473 5f72 6e75 5f69 7473 6972 0070 0000     str_uni_strip...

00023be0 <whitespace.6494>:
   23be0:	0920 0d0a 0c0b 0000                          .......

00023be8 <__func__.6580>:
   23be8:	706d 6f5f 6a62 735f 7274 665f 726f 616d     mp_obj_str_forma
   23bf8:	5f74 6568 706c 7265 0000 0000               t_helper....

00023c04 <__func__.6629>:
   23c04:	706d 6f5f 6a62 735f 7274 665f 726f 616d     mp_obj_str_forma
   23c14:	0074 0000                                   t...

00023c18 <__func__.6641>:
   23c18:	7473 5f72 6f6d 7564 6f6c 665f 726f 616d     str_modulo_forma
   23c28:	0074 0000                                   t...

00023c2c <__func__.6692>:
   23c2c:	7473 5f72 6572 6c70 6361 0065               str_replace.

00023c38 <__func__.6719>:
   23c38:	7473 5f72 6f63 6e75 0074 0000 0028 0000     str_count...(...
   23c48:	202c 0000 002c 0000 0029 0000 706d 6f5f     , ..,...)...mp_o
   23c58:	6a62 675f 7465 745f 7079 2865 6573 666c     bj_get_type(self
   23c68:	695f 296e 3e2d 6567 6974 6574 2072 3d3d     _in)->getiter ==
   23c78:	6d20 5f70 626f 5f6a 7574 6c70 5f65 6567      mp_obj_tuple_ge
   23c88:	6974 6574 0072 0000 2e2e 2e2f 2f2e 7970     titer...../../py
   23c98:	6f2f 6a62 7574 6c70 2e65 0063 4d28 5f50     /objtuple.c.(MP_
   23ca8:	424f 5f4a 5349 4f5f 4a42 7328 6c65 5f66     OBJ_IS_OBJ(self_
   23cb8:	6e69 2029 2626 2820 2828 706d 6f5f 6a62     in) && (((mp_obj
   23cc8:	625f 7361 5f65 2a74 2829 7628 696f 2a64     _base_t*)((void*
   23cd8:	7329 6c65 5f66 6e69 2929 3e2d 7974 6570     )self_in))->type
   23ce8:	3d20 203d 2628 706d 745f 7079 5f65 7574      == (&mp_type_tu
   23cf8:	6c70 2965 2929 0000                         ple)))..

00023d00 <tuple_count_obj>:
   23d00:	2948 0002 5f9d 0001 4d28 5f50 424f 5f4a     H)..._..(MP_OBJ_
   23d10:	5349 4f5f 4a42 6128 6772 5b73 5d30 2029     IS_OBJ(args[0]) 
   23d20:	2626 2820 2828 706d 6f5f 6a62 625f 7361     && (((mp_obj_bas
   23d30:	5f65 2a74 2829 7628 696f 2a64 6129 6772     e_t*)((void*)arg
   23d40:	5b73 5d30 2929 3e2d 7974 6570 3d20 203d     s[0]))->type == 
   23d50:	2628 706d 745f 7079 5f65 7574 6c70 2965     (&mp_type_tuple)
   23d60:	2929 0000                                   ))..

00023d64 <tuple_index_obj>:
   23d64:	2a24 0002 0004 0004 6001 0001               $*.......`..

00023d70 <tuple_locals_dict_table>:
   23d70:	03fa 0000 3d00 0002 0482 0000 3d64 0002     .....=......d=..

00023d80 <tuple_locals_dict>:
   23d80:	201c 0002 0017 0000 0002 0000 3d70 0002     . ..........p=..

00023d90 <mp_type_tuple>:
   23d90:	4088 0002 0173 0000 5b51 0001 5bd5 0001     .@..s...Q[...[..
   23da0:	0000 0000 5d49 0001 5dd9 0001 0000 0000     ....I]...]......
   23db0:	5f5d 0001 61dd 0001 0000 0000 0000 0000     ]_...a..........
	...
   23dc8:	3d80 0002                                   .=..

00023dcc <mp_const_empty_tuple_obj>:
   23dcc:	3d90 0002 0000 0000 504d 4f5f 4a42 495f     .=......MP_OBJ_I
   23ddc:	5f53 5954 4550 7328 6c65 5f66 6e69 202c     S_TYPE(self_in, 
   23dec:	6d26 5f70 7974 6570 745f 7075 656c 0029     &mp_type_tuple).

00023dfc <__func__.6157>:
   23dfc:	7574 6c70 5f65 6d63 5f70 6568 706c 7265     tuple_cmp_helper
   23e0c:	0000 0000                                   ....

00023e10 <__func__.6206>:
   23e10:	7574 6c70 5f65 6f63 6e75 0074               tuple_count.

00023e1c <__func__.6213>:
   23e1c:	7574 6c70 5f65 6e69 6564 0078               tuple_index.

00023e28 <__func__.6234>:
   23e28:	706d 6f5f 6a62 745f 7075 656c 675f 7465     mp_obj_tuple_get
   23e38:	0000 0000                                   ....

00023e3c <__func__.6239>:
   23e3c:	706d 6f5f 6a62 745f 7075 656c 645f 6c65     mp_obj_tuple_del
   23e4c:	0000 0000 504d 4f5f 4a42 495f 5f53 5954     ....MP_OBJ_IS_TY
   23e5c:	4550 2a28 7469 6d65 202c 6d26 5f70 7974     PE(*item, &mp_ty
   23e6c:	6570 745f 7079 2965 0000 0000 2e2e 2e2f     pe_type)....../.
   23e7c:	2f2e 7970 6f2f 6a62 7974 6570 632e 0000     ./py/objtype.c..

00023e8c <native_base_init_wrapper_obj>:
   23e8c:	2a24 0002 0002 ffff 6321 0001 756e 5f6d     $*......!c..num_
   23e9c:	616e 6974 6576 625f 7361 7365 3c20 3220     native_bases < 2
   23eac:	0000 0000 6f6c 6b6f 7075 3e2d 6564 7473     ....lookup->dest
   23ebc:	305b 205d 3d3d 4d20 5f50 424f 5f4a 554e     [0] == MP_OBJ_NU
   23ecc:	4c4c 0000 6f6c 6b6f 7075 3e2d 6564 7473     LL..lookup->dest
   23edc:	315b 205d 3d3d 4d20 5f50 424f 5f4a 554e     [1] == MP_OBJ_NU
   23eec:	4c4c 0000 7974 6570 3e2d 6f6c 6163 736c     LL..type->locals
   23efc:	645f 6369 2d74 623e 7361 2e65 7974 6570     _dict->base.type
   23f0c:	3d20 203d 6d26 5f70 7974 6570 645f 6369      == &mp_type_dic
   23f1c:	0074 0000 253c 2073 626f 656a 7463 6120     t...<%s object a
   23f2c:	2074 7025 003e 0000 706d 6f5f 6a62 695f     t %p>...mp_obj_i
   23f3c:	5f73 6e69 7473 6e61 6563 745f 7079 2865     s_instance_type(
   23f4c:	6573 666c 0029 0000 5f5f 6e69 7469 5f5f     self)...__init__
   23f5c:	2928 7320 6f68 6c75 2064 6572 7574 6e72     () should return
   23f6c:	4e20 6e6f 0065 0000                          None...

00023f74 <mp_unary_op_method_name>:
   23f74:	0000 0000 1803 0011 0000 0000               ............

00023f80 <mp_binary_op_method_name>:
   23f80:	1019 170b 000d 0000 0000 0000 0000 1512     ................
	...
   23f98:	0000 2502 0000 0000 0000 0007 706d 6f5f     ...%........mp_o
   23fa8:	6a62 695f 5f73 6e69 7473 6e61 6563 745f     bj_is_instance_t
   23fb8:	7079 2865 706d 6f5f 6a62 675f 7465 745f     ype(mp_obj_get_t
   23fc8:	7079 2865 6573 666c 695f 296e 0029 0000     ype(self_in))...
   23fd8:	626f 656a 7463 6e20 746f 6320 6c61 616c     object not calla
   23fe8:	6c62 0065 633c 616c 7373 2720 7125 3e27     ble.<class '%q'>
   23ff8:	0000 0000 7974 6570 7420 6b61 7365 3120     ....type takes 1
   24008:	6f20 2072 2033 7261 7567 656d 746e 0073      or 3 arguments.
   24018:	6163 6e6e 746f 6320 6572 7461 2065 6e69     cannot create in
   24028:	7473 6e61 6563 0000 504d 4f5f 4a42 495f     stance..MP_OBJ_I
   24038:	5f53 5954 4550 7328 6c65 5f66 6e69 202c     S_TYPE(self_in, 
   24048:	6d26 5f70 7974 6570 745f 7079 2965 0000     &mp_type_type)..
   24058:	6573 666c 3e2d 6f6c 6163 736c 645f 6369     self->locals_dic
   24068:	2d74 623e 7361 2e65 7974 6570 3d20 203d     t->base.type == 
   24078:	6d26 5f70 7974 6570 645f 6369 0074 0000     &mp_type_dict...

00024088 <mp_type_type>:
   24088:	4088 0002 0174 0000 6ec9 0001 6ef5 0001     .@..t....n...n..
   24098:	6f61 0001 e30d 0000 0000 0000 6fa1 0001     ao...........o..
	...
   240c4:	504d 4f5f 4a42 495f 5f53 5954 4550 6228     MP_OBJ_IS_TYPE(b
   240d4:	7361 7365 745f 7075 656c 202c 6d26 5f70     ases_tuple, &mp_
   240e4:	7974 6570 745f 7075 656c 0029 504d 4f5f     type_tuple).MP_O
   240f4:	4a42 495f 5f53 5954 4550 6c28 636f 6c61     BJ_IS_TYPE(local
   24104:	5f73 6964 7463 202c 6d26 5f70 7974 6570     s_dict, &mp_type
   24114:	645f 6369 2974 0000 504d 4f5f 4a42 495f     _dict)..MP_OBJ_I
   24124:	5f53 5954 4550 6228 7361 7365 695f 6574     S_TYPE(bases_ite
   24134:	736d 695b 2c5d 2620 706d 745f 7079 5f65     ms[i], &mp_type_
   24144:	7974 6570 0029 0000 7974 6570 6920 2073     type)...type is 
   24154:	6f6e 2074 6e61 6120 6363 7065 6174 6c62     not an acceptabl
   24164:	2065 6162 6573 7420 7079 0065 756d 746c     e base type.mult
   24174:	7069 656c 6220 7361 7365 6820 7661 2065     iple bases have 
   24184:	6e69 7473 6e61 6563 6c20 7961 6f2d 7475     instance lay-out
   24194:	6320 6e6f 6c66 6369 0074 0000 733c 7075      conflict...<sup
   241a4:	7265 203a 0000 0000 202c 0000 003e 0000     er: ...., ..>...
   241b4:	504d 4f5f 4a42 495f 5f53 5954 4550 7328     MP_OBJ_IS_TYPE(s
   241c4:	6c65 5f66 6e69 202c 6d26 5f70 7974 6570     elf_in, &mp_type
   241d4:	735f 7075 7265 0029 504d 4f5f 4a42 495f     _super).MP_OBJ_I
   241e4:	5f53 5954 4550 7328 6c65 2d66 743e 7079     S_TYPE(self->typ
   241f4:	2c65 2620 706d 745f 7079 5f65 7974 6570     e, &mp_type_type
   24204:	0029 0000 504d 4f5f 4a42 495f 5f53 5954     )...MP_OBJ_IS_TY
   24214:	4550 6928 6574 736d 695b 2c5d 2620 706d     PE(items[i], &mp
   24224:	745f 7079 5f65 7974 6570 0029               _type_type).

00024230 <mp_type_super>:
   24230:	4088 0002 016f 0000 72c5 0001 731d 0001     .@..o....r...s..
	...
   2424c:	7365 0001 0000 0000 0000 0000 0000 0000     es..............
	...
   2426c:	7369 7573 6362 616c 7373 2928 6120 6772     issubclass() arg
   2427c:	3220 6d20 7375 2074 6562 6120 6320 616c      2 must be a cla
   2428c:	7373 6f20 2072 2061 7574 6c70 2065 666f     ss or a tuple of
   2429c:	6320 616c 7373 7365 0000 0000 7369 7573      classes....issu
   242ac:	6362 616c 7373 2928 6120 6772 3120 6d20     bclass() arg 1 m
   242bc:	7375 2074 6562 6120 6320 616c 7373 0000     ust be a class..

000242cc <mp_builtin_issubclass_obj>:
   242cc:	2948 0002 76dd 0001                         H)...v..

000242d4 <mp_builtin_isinstance_obj>:
   242d4:	2948 0002 7725 0001 6573 666c 3d20 203d     H)..%w..self == 
   242e4:	6d26 5f70 7974 6570 735f 6174 6974 6d63     &mp_type_staticm
   242f4:	7465 6f68 2064 7c7c 7320 6c65 2066 3d3d     ethod || self ==
   24304:	2620 706d 745f 7079 5f65 6c63 7361 6d73      &mp_type_classm
   24314:	7465 6f68 0064 0000                         ethod...

0002431c <mp_type_staticmethod>:
   2431c:	4088 0002 0169 0000 0000 0000 7785 0001     .@..i........w..
	...

00024358 <mp_type_classmethod>:
   24358:	4088 0002 00f7 0000 0000 0000 7785 0001     .@...........w..
	...

00024394 <__func__.6697>:
   24394:	6e69 7473 6e61 6563 635f 756f 746e 6e5f     instance_count_n
   243a4:	7461 7669 5f65 6162 6573 0073               ative_bases.

000243b0 <__func__.6715>:
   243b0:	706d 6f5f 6a62 6e5f 7765 695f 736e 6174     mp_obj_new_insta
   243c0:	636e 0065                                   nce.

000243c4 <__func__.6727>:
   243c4:	706d 6f5f 6a62 635f 616c 7373 6c5f 6f6f     mp_obj_class_loo
   243d4:	756b 0070                                   kup.

000243d8 <__func__.6758>:
   243d8:	706d 6f5f 6a62 695f 736e 6174 636e 5f65     mp_obj_instance_
   243e8:	616d 656b 6e5f 7765 0000 0000               make_new....

000243f4 <__func__.6795>:
   243f4:	706d 6f5f 6a62 695f 736e 6174 636e 5f65     mp_obj_instance_
   24404:	6f6c 6461 615f 7474 0072 0000               load_attr...

00024410 <__func__.6888>:
   24410:	7974 6570 615f 7474 0072 0000               type_attr...

0002441c <__func__.6900>:
   2441c:	706d 6f5f 6a62 6e5f 7765 745f 7079 0065     mp_obj_new_type.

0002442c <__func__.6937>:
   2442c:	7573 6570 5f72 7461 7274 0000               super_attr..

00024438 <__func__.6999>:
   24438:	7473 7461 6369 635f 616c 7373 6d5f 7465     static_class_met
   24448:	6f68 5f64 616d 656b 6e5f 7765 0000 0000     hod_make_new....
   24458:	4d28 5f50 424f 5f4a 5349 4f5f 4a42 7328     (MP_OBJ_IS_OBJ(s
   24468:	6c65 5f66 6e69 2029 2626 2820 2828 706d     elf_in) && (((mp
   24478:	6f5f 6a62 625f 7361 5f65 2a74 2829 7628     _obj_base_t*)((v
   24488:	696f 2a64 7329 6c65 5f66 6e69 2929 3e2d     oid*)self_in))->
   24498:	7974 6570 3d20 203d 2628 706d 745f 7079     type == (&mp_typ
   244a8:	5f65 697a 2970 2929 0000 0000 2e2e 2e2f     e_zip)))....../.
   244b8:	2f2e 7970 6f2f 6a62 697a 2e70 0063 0000     ./py/objzip.c...

000244c8 <mp_type_zip>:
   244c8:	4088 0002 017b 0000 0000 0000 7819 0001     .@..{........x..
	...
   244ec:	e27d 0000 7891 0001 0000 0000 0000 0000     }....x..........
	...

00024504 <__func__.6330>:
   24504:	697a 5f70 7469 7265 656e 7478 0000 0000     zip_iternext....

00024514 <mp_op_getitem_obj>:
   24514:	2948 0002 793d 0001                         H)..=y..

0002451c <mp_op_setitem_obj>:
   2451c:	29b4 0002 7965 0001                         .)..ey..

00024524 <mp_op_delitem_obj>:
   24524:	2948 0002 7991 0001                         H)...y..

0002452c <mp_op_contains_obj>:
   2452c:	2948 0002 79b9 0001 626f 656a 7463 6e20     H)...y..object n
   2453c:	746f 6920 206e 6573 7571 6e65 6563 0000     ot in sequence..
   2454c:	6162 2064 7974 6570 6f63 6564 0000 0000     bad typecode....
   2455c:	702e 0079 6874 7369 6e5f 6d61 5f65 2071     .py.this_name_q 
   2456c:	3d21 4d20 5f50 424f 5f4a 554e 4c4c 0000     != MP_OBJ_NULL..
   2457c:	2e2e 2e2f 2f2e 7970 622f 6975 746c 6e69     ../../py/builtin
   2458c:	6d69 6f70 7472 632e 0000 0000 6163 6e6e     import.c....cann
   2459c:	746f 7020 7265 6f66 6d72 7220 6c65 7461     ot perform relat
   245ac:	7669 2065 6d69 6f70 7472 0000 6f6d 7564     ive import..modu
   245bc:	656c 6e20 746f 6620 756f 646e 0000 0000     le not found....
   245cc:	5f5f 6e69 7469 5f5f 702e 0079               __init__.py.

000245d8 <mp_builtin___import___obj>:
   245d8:	2a24 0002 0002 0005 8911 0001               $*..........

000245e4 <__func__.7096>:
   245e4:	706d 625f 6975 746c 6e69 5f5f 695f 706d     mp_builtin___imp
   245f4:	726f 5f74 005f 0000                         ort__...

000245fc <mp_builtin_eval_obj>:
   245fc:	2a24 0002 0002 0003 8f3d 0001               $*......=...

00024608 <mp_builtin_exec_obj>:
   24608:	2a24 0002 0002 0003 8f5d 0001 2032 3d3c     $*......]...2 <=
   24618:	6e20 615f 6772 0073 2e2e 2e2f 2f2e 7970      n_args.../../py
   24628:	6d2f 646f 7562 6c69 6974 736e 632e 0000     /modbuiltins.c..

00024638 <mp_builtin___build_class___obj>:
   24638:	2a24 0002 0004 ffff 9081 0001               $*..........

00024644 <mp_builtin_abs_obj>:
   24644:	28dc 0002 9139 0001                         .(..9...

0002464c <mp_builtin_all_obj>:
   2464c:	28dc 0002 9155 0001                         .(..U...

00024654 <mp_builtin_any_obj>:
   24654:	28dc 0002 91a5 0001                         .(......

0002465c <mp_builtin_bin_obj>:
   2465c:	28dc 0002 91ed 0001                         .(......

00024664 <mp_builtin_callable_obj>:
   24664:	28dc 0002 9215 0001 6863 2872 2029 7261     .(......chr() ar
   24674:	2067 6f6e 2074 6e69 7220 6e61 6567 3228     g not in range(2
   24684:	3635 0029                                   56).

00024688 <mp_builtin_chr_obj>:
   24688:	28dc 0002 9241 0001                         .(..A...

00024690 <mp_builtin_dir_obj>:
   24690:	2a24 0002 0000 0001 9285 0001               $*..........

0002469c <mp_builtin_divmod_obj>:
   2469c:	2948 0002 933d 0001                         H)..=...

000246a4 <mp_builtin_hash_obj>:
   246a4:	28dc 0002 935d 0001                         .(..]...

000246ac <mp_builtin_hex_obj>:
   246ac:	28dc 0002 9379 0001                         .(..y...

000246b4 <mp_builtin_iter_obj>:
   246b4:	28dc 0002 9395 0001                         .(......

000246bc <mp_builtin_next_obj>:
   246bc:	28dc 0002 93b1 0001                         .(......

000246c4 <mp_builtin_oct_obj>:
   246c4:	28dc 0002 93e5 0001 726f 2064 7865 6570     .(......ord expe
   246d4:	7463 2073 2061 6863 7261 6361 6574 0072     cts a character.

000246e4 <mp_builtin_ord_obj>:
   246e4:	28dc 0002 9401 0001 2d33 7261 2067 6f70     .(......3-arg po
   246f4:	2877 2029 6f6e 2074 7573 7070 726f 6574     w() not supporte
   24704:	0064 0000                                   d...

00024708 <mp_builtin_pow_obj>:
   24708:	2a24 0002 0004 0003 943d 0001               $*......=...

00024714 <mp_builtin_print_obj>:
   24714:	2a24 0002 0001 ffff 947d 0001 000a 0000     $*......}.......

00024724 <mp_builtin___repl_print___obj>:
   24724:	28dc 0002 9531 0001                         .(..1...

0002472c <mp_builtin_repr_obj>:
   2472c:	28dc 0002 9569 0001                         .(..i...

00024734 <mp_builtin_round_obj>:
   24734:	2a24 0002 0002 0002 95a9 0001               $*..........

00024740 <mp_builtin_sum_obj>:
   24740:	2a24 0002 0002 0002 95fd 0001 756d 7473     $*..........must
   24750:	7520 6573 6b20 7965 6f77 6472 6120 6772      use keyword arg
   24760:	6d75 6e65 2074 6f66 2072 656b 2079 7566     ument for key fu
   24770:	636e 6974 6e6f 0000                         nction..

00024778 <mp_builtin_sorted_obj>:
   24778:	2a24 0002 0003 ffff 9655 0001               $*......U...

00024784 <mp_builtin_getattr_obj>:
   24784:	2a24 0002 0004 0003 96f5 0001               $*..........

00024790 <mp_builtin_setattr_obj>:
   24790:	29b4 0002 9735 0001                         .)..5...

00024798 <mp_builtin_hasattr_obj>:
   24798:	2948 0002 9761 0001                         H)..a...

000247a0 <mp_builtin_globals_obj>:
   247a0:	2870 0002 979d 0001                         p(......

000247a8 <mp_builtin_locals_obj>:
   247a8:	2870 0002 97ad 0001                         p(......

000247b0 <mp_builtin_id_obj>:
   247b0:	28dc 0002 e0e9 0000                         .(......

000247b8 <mp_builtin_len_obj>:
   247b8:	28dc 0002 e135 0000                         .(..5...

000247c0 <mp_module_builtins_globals_table>:
   247c0:	0072 0000 03ca 0000 0012 0000 4638 0002     r...........8F..
   247d0:	004e 0000 45d8 0002 0086 0000 4724 0002     N....E......$G..
   247e0:	03be 0000 1b34 0002 03d2 0000 3b48 0002     ....4.......H;..
   247f0:	0406 0000 201c 0002 0492 0000 2ea8 0002     ..... ..........
   24800:	04d6 0000 3114 0002 04ee 0000 3270 0002     .....1......p2..
   24810:	0516 0000 33a0 0002 054e 0000 34c4 0002     .....3..N....4..
   24820:	05b2 0000 3b0c 0002 05be 0000 4230 0002     .....;......0B..
   24830:	05ce 0000 3d90 0002 05d2 0000 4088 0002     .....=.......@..
   24840:	05ee 0000 44c8 0002 03de 0000 4358 0002     .....D......XC..
   24850:	05a6 0000 431c 0002 02f2 0000 3540 0002     .....C......@5..
   24860:	0396 0000 4644 0002 03a2 0000 464c 0002     ....DF......LF..
   24870:	03aa 0000 4654 0002 03b6 0000 465c 0002     ....TF......\F..
   24880:	03d6 0000 4664 0002 03da 0000 4688 0002     ....dF.......F..
   24890:	040e 0000 4690 0002 0416 0000 469c 0002     .....F.......F..
   248a0:	042a 0000 45fc 0002 042e 0000 4608 0002     *....E.......F..
   248b0:	045a 0000 4784 0002 0586 0000 4790 0002     Z....G.......G..
   248c0:	045e 0000 47a0 0002 0466 0000 4798 0002     ^....G..f....G..
   248d0:	046a 0000 46a4 0002 0476 0000 46ac 0002     j....F..v....F..
   248e0:	047e 0000 47b0 0002 04a6 0000 42d4 0002     ~....G.......B..
   248f0:	04b2 0000 42cc 0002 04be 0000 46b4 0002     .....B.......F..
   24900:	04d2 0000 47b8 0002 04de 0000 47a8 0002     .....G.......G..
   24910:	0512 0000 46bc 0002 051a 0000 46c4 0002     .....F.......F..
   24920:	052a 0000 46e4 0002 0542 0000 4708 0002     *....F..B....G..
   24930:	0546 0000 4714 0002 055a 0000 472c 0002     F....G..Z...,G..
   24940:	0572 0000 4734 0002 0596 0000 4778 0002     r...4G......xG..
   24950:	05ba 0000 4740 0002 02e6 0000 2134 0002     ....@G......4!..
   24960:	02da 0000 229c 0002 02de 0000 2350 0002     ....."......P#..
   24970:	02e2 0000 238c 0002 02ee 0000 23c8 0002     .....#.......#..
   24980:	02f6 0000 2224 0002 02fa 0000 21e8 0002     ....$".......!..
   24990:	031e 0000 2404 0002 0322 0000 265c 0002     .....$.."...\&..
   249a0:	0326 0000 247c 0002 032e 0000 21ac 0002     &...|$.......!..
   249b0:	032a 0000 24b8 0002 0336 0000 2440 0002     *....$..6...@$..
   249c0:	033e 0000 24f4 0002 0342 0000 2530 0002     >....$..B...0%..
   249d0:	034a 0000 25e4 0002 0352 0000 256c 0002     J....%..R...l%..
   249e0:	035a 0000 22d8 0002 0372 0000 25a8 0002     Z...."..r....%..
   249f0:	037a 0000 2260 0002 037e 0000 2620 0002     z...`"..~... &..
   24a00:	0382 0000 2170 0002 0386 0000 2698 0002     ....p!.......&..
   24a10:	038a 0000 26d4 0002 0392 0000 2314 0002     .....&.......#..

00024a20 <mp_module_builtins_globals>:
   24a20:	201c 0002 0267 0000 004c 0000 47c0 0002     . ..g...L....G..

00024a30 <mp_module_builtins>:
   24a30:	32d0 0002 4a20 0002                         .2.. J..

00024a38 <__func__.7009>:
   24a38:	706d 625f 6975 746c 6e69 5f5f 625f 6975     mp_builtin___bui
   24a48:	646c 635f 616c 7373 5f5f 0000               ld_class__..

00024a54 <allowed_args.7121>:
   24a54:	0160 0203 00b6 0000 0108 0203 00ba 0000     `...............

00024a64 <gc_collect_obj>:
   24a64:	2870 0002 97e5 0001                         p(......

00024a6c <gc_disable_obj>:
   24a6c:	2870 0002 97f9 0001                         p(......

00024a74 <gc_enable_obj>:
   24a74:	2870 0002 9819 0001                         p(......

00024a7c <gc_isenabled_obj>:
   24a7c:	2870 0002 9839 0001                         p(..9...

00024a84 <gc_mem_free_obj>:
   24a84:	2870 0002 9855 0001                         p(..U...

00024a8c <gc_mem_alloc_obj>:
   24a8c:	2870 0002 9875 0001                         p(..u...

00024a94 <gc_threshold_obj>:
   24a94:	2a24 0002 0000 0001 9895 0001               $*..........

00024aa0 <mp_module_gc_globals_table>:
   24aa0:	0072 0000 044e 0000 03ee 0000 4a64 0002     r...N.......dJ..
   24ab0:	0412 0000 4a6c 0002 041e 0000 4a74 0002     ....lJ......tJ..
   24ac0:	04a2 0000 4a7c 0002 04fa 0000 4a84 0002     ....|J.......J..
   24ad0:	04f6 0000 4a8c 0002 05c2 0000 4a94 0002     .....J.......J..

00024ae0 <mp_module_gc_globals>:
   24ae0:	201c 0002 0047 0000 0008 0000 4aa0 0002     . ..G........J..

00024af0 <mp_module_gc>:
   24af0:	32d0 0002 4ae0 0002                         .2...J..

00024af8 <mp_micropython_opt_level_obj>:
   24af8:	2a24 0002 0000 0001 9905 0001               $*..........

00024b04 <mp_micropython_heap_lock_obj>:
   24b04:	2870 0002 9949 0001                         p(..I...

00024b0c <mp_micropython_heap_unlock_obj>:
   24b0c:	2870 0002 995d 0001                         p(..]...

00024b14 <mp_module_micropython_globals_table>:
   24b14:	0072 0000 04fe 0000 03f2 0000 1adc 0002     r...............
   24b24:	0526 0000 4af8 0002 046e 0000 4b04 0002     &....J..n....K..
   24b34:	0472 0000 4b0c 0002                         r....K..

00024b3c <mp_module_micropython_globals>:
   24b3c:	201c 0002 002f 0000 0005 0000 4b14 0002     . ../........K..

00024b4c <mp_module_micropython>:
   24b4c:	32d0 0002 4b3c 0002                         .2..<K..

00024b54 <__func__.6912>:
   24b54:	706d 655f 6578 7563 6574 625f 7479 6365     mp_execute_bytec
   24b64:	646f 0065 6f6c 6163 206c 6176 6972 6261     ode.local variab
   24b74:	656c 7220 6665 7265 6e65 6563 2064 6562     le referenced be
   24b84:	6f66 6572 6120 7373 6769 6d6e 6e65 0074     fore assignment.
   24b94:	706d 6f5f 6a62 695f 5f73 7865 6563 7470     mp_obj_is_except
   24ba4:	6f69 5f6e 6e69 7473 6e61 6563 5428 504f     ion_instance(TOP
   24bb4:	2928 0029 2e2e 2e2f 2f2e 7970 762f 2e6d     ()).../../py/vm.
   24bc4:	0063 0000 7865 5f63 7073 3e20 203d 7865     c...exc_sp >= ex
   24bd4:	5f63 7473 6361 006b 7563 7272 6e65 6c74     c_stack.currentl
   24be4:	5f79 6e69 655f 6378 7065 5f74 6c62 636f     y_in_except_bloc
   24bf4:	006b 0000 7865 5f63 7073 3d20 203d 7865     k...exc_sp == ex
   24c04:	5f63 7473 6361 206b 202d 0031 6572 5f74     c_stack - 1.ret_
   24c14:	696b 646e 3d20 203d 504d 565f 5f4d 4552     kind == MP_VM_RE
   24c24:	5554 4e52 455f 4358 5045 4954 4e4f 0000     TURN_EXCEPTION..
   24c34:	7962 6574 6320 646f 2065 6f6e 2074 6d69     byte code not im
   24c44:	6c70 6d65 6e65 6574 0064 0000 6f6e 6120     plemented...no a
   24c54:	7463 7669 2065 7865 6563 7470 6f69 206e     ctive exception 
   24c64:	6f74 7220 7265 6961 6573 0000 7566 636e     to reraise..func
   24c74:	6974 6e6f 6720 746f 6d20 6c75 6974 6c70     tion got multipl
   24c84:	2065 6176 756c 7365 6620 726f 6120 6772     e values for arg
   24c94:	6d75 6e65 2074 2527 2771 0000 6e75 7865     ument '%q'..unex
   24ca4:	6570 7463 6465 6b20 7965 6f77 6472 6120     pected keyword a
   24cb4:	6772 6d75 6e65 0074 7566 636e 6974 6e6f     rgument.function
   24cc4:	6d20 7369 6973 676e 7220 7165 6975 6572      missing require
   24cd4:	2064 6f70 6973 6974 6e6f 6c61 6120 6772     d positional arg
   24ce4:	6d75 6e65 2074 2523 0064 0000 7566 636e     ument #%d...func
   24cf4:	6974 6e6f 6d20 7369 6973 676e 7220 7165     tion missing req
   24d04:	6975 6572 2064 656b 7779 726f 2064 7261     uired keyword ar
   24d14:	7567 656d 746e 2720 7125 0027 7566 636e     gument '%q'.func
   24d24:	6974 6e6f 6d20 7369 6973 676e 6b20 7965     tion missing key
   24d34:	6f77 6472 6f2d 6c6e 2079 7261 7567 656d     word-only argume
   24d44:	746e 0000 6669 0000 6877 6c69 0065 0000     nt..if..while...
   24d54:	6f66 0072 7274 0079 6977 6874 0000 0000     for.try.with....
   24d64:	6564 0066 6c63 7361 0073 0000 0020 0000     def.class... ...
   24d74:	250a 0073 000a 0000                         .%s.....

00024d7c <import_str.6274>:
   24d7c:	6d69 6f70 7472 0020                         import .

00024d84 <mp_builtin_open_obj>:
   24d84:	2a24 0002 0003 ffff b699 0001 7341 6573     $*..........Asse
   24d94:	7472 6f69 206e 2527 2773 6620 6961 656c     rtion '%s' faile
   24da4:	2c64 6120 2074 6966 656c 2520 3a73 6425     d, at file %s:%d
   24db4:	000a 0000 7341 6573 7472 6f69 206e 6166     ....Assertion fa
   24dc4:	6c69 6465 0000 0000 6950 206e 616d 2070     iled....Pin map 
   24dd4:	6170 7373 6465 7020 6e69 0020 6950 2e6e     passed pin .Pin.
   24de4:	616d 7070 7265 6420 6469 276e 2074 6572     mapper didn't re
   24df4:	7574 6e72 6120 5020 6e69 6f20 6a62 6365     turn a Pin objec
   24e04:	0074 0000 6950 2e6e 616d 7070 7265 6d20     t...Pin.mapper m
   24e14:	7061 2073 0000 0000 7420 206f 0000 0000     aps .... to ....
   24e24:	6950 2e6e 616d 5f70 6964 7463 6d20 7061     Pin.map_dict map
   24e34:	2073 0000 6950 2e6e 6f62 7261 2064 616d     s ..Pin.board ma
   24e44:	7370 0020 6950 286e 7325 2029 6f64 7365     ps .Pin(%s) does
   24e54:	276e 2074 7865 7369 0074 0000 6950 286e     n't exist...Pin(
   24e64:	6950 2e6e 7063 2e75 7125 202c 6f6d 6564     Pin.cpu.%q, mode
   24e74:	503d 6e69 002e 0000 4e41 4c41 474f 0029     =Pin....ANALOG).
   24e84:	202c 7570 6c6c 503d 6e69 252e 0071 0000     , pull=Pin.%q...
   24e94:	202c 6661 253d 2964 0000 0000 202c 6661     , af=%d)...., af
   24ea4:	503d 6e69 252e 2971 0000 0000 0029 0000     =Pin.%q)....)...

00024eb4 <pin_mapper_fun_obj>:
   24eb4:	2a24 0002 0002 0002 bf1d 0001               $*..........

00024ec0 <pin_mapper_obj>:
   24ec0:	4358 0002 4eb4 0002                         XC...N..

00024ec8 <pin_map_dict_fun_obj>:
   24ec8:	2a24 0002 0002 0002 bf55 0001               $*......U...

00024ed4 <pin_map_dict_obj>:
   24ed4:	4358 0002 4ec8 0002                         XC...N..

00024edc <pin_af_list_obj>:
   24edc:	28dc 0002 bf8d 0001                         .(......

00024ee4 <pin_debug_fun_obj>:
   24ee4:	2a24 0002 0002 0002 bfdd 0001               $*..........

00024ef0 <pin_debug_obj>:
   24ef0:	4358 0002 4ee4 0002 6e69 6176 696c 2064     XC...N..invalid 
   24f00:	6970 206e 6964 6572 7463 6f69 3a6e 2520     pin direction: %
   24f10:	0064 0000 6e69 6176 696c 2064 6970 206e     d...invalid pin 
   24f20:	7974 6570 203a 6425 0000 0000 6e69 6176     type: %d....inva
   24f30:	696c 2064 6970 206e 7264 7669 3a65 2520     lid pin drive: %
   24f40:	0064 0000 6e69 6176 696c 2064 6970 206e     d...invalid pin 
   24f50:	6661 203a 6425 0000                         af: %d..

00024f58 <pin_init_obj>:
   24f58:	2a24 0002 0003 ffff c1b9 0001               $*..........

00024f64 <pin_value_obj>:
   24f64:	2a24 0002 0002 0002 c1e1 0001               $*..........

00024f70 <pin_off_obj>:
   24f70:	28dc 0002 c209 0001                         .(......

00024f78 <pin_on_obj>:
   24f78:	28dc 0002 c235 0001                         .(..5...

00024f80 <pin_irq_obj>:
   24f80:	2a24 0002 0003 ffff c265 0001               $*......e...

00024f8c <pin_name_obj>:
   24f8c:	28dc 0002 c285 0001                         .(......

00024f94 <pin_names_obj>:
   24f94:	28dc 0002 c2a9 0001                         .(......

00024f9c <pin_port_obj>:
   24f9c:	28dc 0002 c321 0001                         .(..!...

00024fa4 <pin_pin_obj>:
   24fa4:	28dc 0002 c345 0001                         .(..E...

00024fac <pin_gpio_obj>:
   24fac:	28dc 0002 c369 0001                         .(..i...

00024fb4 <pin_dir_obj>:
   24fb4:	28dc 0002 c38d 0001                         .(......

00024fbc <pin_type_obj>:
   24fbc:	28dc 0002 c3b9 0001                         .(......

00024fc4 <pin_af_obj>:
   24fc4:	28dc 0002 c3e9 0001                         .(......

00024fcc <pin_locals_dict_table>:
   24fcc:	048a 0000 4f58 0002 05e6 0000 4f64 0002     ....XO......dO..
   24fdc:	051e 0000 4f70 0002 0522 0000 4f78 0002     ....pO.."...xO..
   24fec:	0496 0000 4f80 0002 04e2 0000 4f70 0002     .....O......pO..
   24ffc:	047a 0000 4f78 0002 050a 0000 4f8c 0002     z...xO.......O..
   2500c:	050e 0000 4f94 0002 039e 0000 4edc 0002     .....O.......N..
   2501c:	053e 0000 4f9c 0002 0532 0000 4fa4 0002     >....O..2....O..
   2502c:	0462 0000 4fac 0002 040e 0000 4fb4 0002     b....O.......O..
   2503c:	05d2 0000 4fbc 0002 039a 0000 4fc4 0002     .....O.......O..
   2504c:	04f2 0000 4ec0 0002 0406 0000 4ed4 0002     .....N.......N..
   2505c:	0402 0000 4ef0 0002 03ba 0000 51b0 0002     .....N.......Q..
   2506c:	0306 0000 0001 0000 0356 0000 0003 0000     ........V.......
   2507c:	034e 0000 0013 0000 02ce 0000 0005 0000     N...............
   2508c:	02d6 0000 0001 0000 0366 0000 0015 0000     ........f.......
   2509c:	035e 0000 0019 0000 0362 0000 0011 0000     ^.......b.......
   250ac:	031a 0000 0009 0000 030e 0000 0001 0000     ................
   250bc:	030a 0000 0003 0000 0312 0000 000d 0000     ................
   250cc:	0316 0000 0005 0000 0332 0000 0003 0000     ........2.......
   250dc:	033a 0000 0005 0000 0302 0000 00cd 0000     :...............

000250ec <pin_locals_dict>:
   250ec:	201c 0002 0127 0000 0024 0000 4fcc 0002     . ..'...$....O..

000250fc <pin_mod>:
   250fc:	4088 0002 00db 0000 bce1 0001 be35 0001     .@..........5...
   2510c:	be9d 0001 0000 0000 0000 0000 0000 0000     ................
	...
   25134:	50ec 0002                                   .P..

00025138 <allowed_args.7371>:
   25138:	0140 0102 0000 0000 0152 0003 345c 0002     @.......R...\4..
   25148:	0106 0003 0000 0000 00e6 0002 ffff ffff     ................
   25158:	0179 0203 0000 0000 00e9 0202 ffff ffff     y...............
   25168:	503c 6e69 252e 3e71 0000 0000               <Pin.%q>....

00025174 <pin_cpu_pins_obj_type>:
   25174:	4088 0002 00ff 0000 c41d 0001 0000 0000     .@..............
	...
   251ac:	5c2c 0002                                   ,\..

000251b0 <pin_board_pins_obj_type>:
   251b0:	4088 0002 00ee 0000 c41d 0001 0000 0000     .@..............
	...
   251e8:	5ac4 0002 4449 203a 4c43 5341 3d53 3025     .Z..ID: CLASS=%0
   251f8:	7832 202c 2576 3230 2e75 3025 7532 0000     2x, v%02u.%02u..
   25208:	7525 4820 007a 0000 7371 7274 0a3a 2020     %u Hz...qstr:.  
   25218:	5f6e 6f70 6c6f 253d 0a75 2020 5f6e 7371     n_pool=%u.  n_qs
   25228:	7274 253d 0a75 2020 5f6e 7473 5f72 6164     tr=%u.  n_str_da
   25238:	6174 625f 7479 7365 253d 0a75 2020 5f6e     ta_bytes=%u.  n_
   25248:	6f74 6174 5f6c 7962 6574 3d73 7525 000a     total_bytes=%u..
   25258:	4347 003a 2020 7525 7420 746f 6c61 000a     GC:.  %u total..
   25268:	2020 7525 3a20 2520 0a75 0000 2020 3d31       %u : %u...  1=
   25278:	7525 3220 253d 2075 3d6d 7525 000a 0000     %u 2=%u m=%u....

00025288 <machine_info_obj>:
   25288:	2a24 0002 0000 0001 c5dd 0001               $*..........

00025294 <machine_unique_id_obj>:
   25294:	2870 0002 c6a5 0001                         p(......

0002529c <machine_reset_obj>:
   2529c:	2870 0002 c6c9 0001                         p(......

000252a4 <machine_soft_reset_obj>:
   252a4:	2870 0002 c6dd 0001                         p(......

000252ac <machine_bootloader_obj>:
   252ac:	2870 0002 c701 0001 7266 7165 6320 6168     p(......freq cha
   252bc:	676e 2065 6f6e 2074 7573 7070 726f 6574     nge not supporte
   252cc:	0064 0000                                   d...

000252d0 <machine_freq_obj>:
   252d0:	2a24 0002 0000 0004 c709 0001               $*..........

000252dc <machine_sleep_obj>:
   252dc:	2870 0002 c74d 0001                         p(..M...

000252e4 <machine_deepsleep_obj>:
   252e4:	2870 0002 c761 0001                         p(..a...

000252ec <machine_reset_cause_obj>:
   252ec:	2870 0002 c775 0001                         p(..u...

000252f4 <machine_module_globals_table>:
   252f4:	0072 0000 05d6 0000 0486 0000 5288 0002     r............R..
   25304:	05da 0000 5294 0002 055e 0000 529c 0002     .....R..^....R..
   25314:	058e 0000 52a4 0002 03c2 0000 52ac 0002     .....R.......R..
   25324:	043e 0000 52d0 0002 0562 0000 52ec 0002     >....R..b....R..
   25334:	036e 0000 50fc 0002 036a 0000 0003 0000     n....P..j.......
   25344:	02fe 0000 0005 0000 038e 0000 0007 0000     ................
   25354:	02ea 0000 0009 0000 0376 0000 0001 0000     ........v.......

00025364 <machine_module_globals>:
   25364:	201c 0002 0077 0000 000e 0000 52f4 0002     . ..w........R..

00025374 <machine_module>:
   25374:	32d0 0002 5364 0002                         .2..dS..

0002537c <pin_PB6_af>:
   2537c:	007d 0000 0504 0000 0001 0000 1804 0001     }...............
   2538c:	0091 0000 0707 0000 0000 0000 1807 0001     ................

0002539c <pin_PB7_af>:
   2539c:	007e 0000 0504 0000 0002 0000 1c04 0001     ~...............
   253ac:	0092 0000 0707 0000 0001 0000 1c07 0001     ................

000253bc <pin_PF4_af>:
   253bc:	0085 0000 0505 0001 0000 0000 1005 0005     ................
   253cc:	008f 0000 0406 00ff 0004 0000 1006 0005     ................
   253dc:	0095 0000 0707 0002 0000 0000 1007 0005     ................
   253ec:	00a3 0000 0b08 0000 0000 0000 1008 0005     ................

000253fc <pin_PE3_af>:
   253fc:	0066 0000 0000 00ff 0000 0000 ffff ffff     f...............

0002540c <pin_PE2_af>:
   2540c:	0067 0000 0000 00ff 0001 0000 ffff ffff     g...............

0002541c <pin_PE1_af>:
   2541c:	006a 0000 0000 00ff 0002 0000 ffff ffff     j...............

0002542c <pin_PE0_af>:
   2542c:	006b 0000 0000 00ff 0003 0000 ffff ffff     k...............

0002543c <pin_PD7_af>:
   2543c:	00b2 0000 0607 0005 0001 0000 1c07 0003     ................
   2544c:	008e 0000 0908 00ff 0000 0000 1c08 0003     ................

0002545c <pin_PC7_af>:
   2545c:	00aa 0000 0607 0001 0001 0000 1c07 0002     ................
   2546c:	00a5 0000 0b08 0000 0001 0000 1c08 0002     ................

0002547c <pin_PC6_af>:
   2547c:	00a9 0000 0607 0001 0000 0000 1807 0002     ................
   2548c:	00a3 0000 0b08 0000 0000 0000 1808 0002     ................

0002549c <pin_PC5_af>:
   2549c:	0084 0000 0504 0000 0008 0000 1404 0002     ................
   254ac:	00a8 0000 0607 0000 0001 0000 1407 0002     ................
   254bc:	009f 0000 0108 0001 0003 0000 1408 0002     ................

000254cc <pin_PC4_af>:
   254cc:	0083 0000 0504 0000 0007 0000 1004 0002     ................
   254dc:	0090 0000 0406 00ff 0005 0000 1006 0002     ................
   254ec:	00a7 0000 0607 0000 0000 0000 1007 0002     ................
   254fc:	00a0 0000 0108 0001 0002 0000 1008 0002     ................

0002550c <pin_PA6_af>:
   2550c:	0074 0000 0303 0001 0001 0000 1803 0000     t...............
   2551c:	0088 0000 0505 0001 0003 0000 1805 0000     ................

0002552c <pin_PA7_af>:
   2552c:	0075 0000 0303 0001 0000 0000 1c03 0000     u...............
   2553c:	0089 0000 0505 0001 0004 0000 1c05 0000     ................

0002554c <pin_PF0_af>:
   2554c:	00a0 0000 0101 0001 0002 0000 0001 0005     ................
   2555c:	008a 0000 0505 0001 0005 0000 0005 0005     ................
   2556c:	0091 0000 0707 0000 0000 0000 0007 0005     ................
   2557c:	008e 0000 0908 00ff 0000 0000 0008 0005     ................

0002558c <pin_PF1_af>:
   2558c:	009f 0000 0101 0001 0003 0000 0401 0005     ................
   2559c:	008b 0000 0505 0001 0006 0000 0405 0005     ................
   255ac:	0092 0000 0707 0000 0001 0000 0407 0005     ................
   255bc:	009e 0000 0d0e 00ff 0002 0000 040e 0005     ................

000255cc <pin_PF2_af>:
   255cc:	007c 0000 0504 0000 0000 0000 0804 0005     |...............
   255dc:	008c 0000 0505 0001 0007 0000 0805 0005     ................
   255ec:	0093 0000 0707 0001 0000 0000 0807 0005     ................
   255fc:	009d 0000 0d0e 00ff 0001 0000 080e 0005     ................

0002560c <pin_PF3_af>:
   2560c:	008d 0000 0505 0001 0008 0000 0c05 0005     ................
   2561c:	0094 0000 0707 0001 0001 0000 0c07 0005     ................

0002562c <pin_PD4_af>:
   2562c:	00a1 0000 0b00 0000 0002 0000 ffff ffff     ................
   2563c:	00af 0000 0607 0004 0000 0000 1007 0003     ................

0002564c <pin_PD5_af>:
   2564c:	00a2 0000 0b00 0000 0003 0000 ffff ffff     ................
   2565c:	00b0 0000 0607 0004 0001 0000 1407 0003     ................

0002566c <pin_PB0_af>:
   2566c:	00a4 0000 0b00 0000 0004 0000 ffff ffff     ................
   2567c:	0095 0000 0707 0002 0000 0000 0007 0001     ................

0002568c <pin_PB1_af>:
   2568c:	00a6 0000 0b00 0000 0005 0000 ffff ffff     ................
   2569c:	0096 0000 0707 0002 0001 0000 0407 0001     ................

000256ac <pin_PB2_af>:
   256ac:	0072 0000 0303 0000 0001 0000 0803 0001     r...............
   256bc:	0097 0000 0707 0003 0000 0000 0807 0001     ................

000256cc <pin_PB3_af>:
   256cc:	0073 0000 0303 0000 0000 0000 0c03 0001     s...............
   256dc:	0098 0000 0707 0003 0001 0000 0c07 0001     ................

000256ec <pin_PC3_af>:
   256ec:	007a 0000 0801 00ff 0001 0000 0c01 0002     z...............
   256fc:	009c 0000 0707 0005 0001 0000 0c07 0002     ................

0002570c <pin_PC2_af>:
   2570c:	0079 0000 0801 00ff 0004 0000 0801 0002     y...............
   2571c:	009b 0000 0707 0005 0000 0000 0807 0002     ................

0002572c <pin_PC1_af>:
   2572c:	007b 0000 0801 00ff 0005 0000 0401 0002     {...............
   2573c:	009a 0000 0707 0004 0001 0000 0407 0002     ................

0002574c <pin_PC0_af>:
   2574c:	0078 0000 0801 00ff 0003 0000 0001 0002     x...............
   2575c:	0099 0000 0707 0004 0000 0000 0007 0002     ................

0002576c <pin_PD6_af>:
   2576c:	007c 0000 0504 0000 0000 0000 1804 0003     |...............
   2577c:	00b1 0000 0607 0005 0000 0000 1807 0003     ................

0002578c <pin_PB5_af>:
   2578c:	0069 0000 0000 00ff 000b 0000 ffff ffff     i...............
   2579c:	0080 0000 0504 0000 0004 0000 1404 0001     ................
   257ac:	0094 0000 0707 0001 0001 0000 1407 0001     ................

000257bc <pin_PB4_af>:
   257bc:	0068 0000 0000 00ff 000a 0000 ffff ffff     h...............
   257cc:	007f 0000 0504 0000 0003 0000 1004 0001     ................
   257dc:	0093 0000 0707 0001 0000 0000 1007 0001     ................

000257ec <pin_PE4_af>:
   257ec:	0071 0000 0000 00ff 0009 0000 ffff ffff     q...............
   257fc:	0076 0000 0303 0002 0001 0000 1003 0004     v...............
   2580c:	0081 0000 0504 0000 0005 0000 1004 0004     ................
   2581c:	0088 0000 0505 0001 0003 0000 1005 0004     ................

0002582c <pin_PE5_af>:
   2582c:	0070 0000 0000 00ff 0008 0000 ffff ffff     p...............
   2583c:	0082 0000 0504 0000 0006 0000 1404 0004     ................
   2584c:	0089 0000 0505 0001 0004 0000 1405 0004     ................

0002585c <pin_PD0_af>:
   2585c:	006f 0000 0000 00ff 0007 0000 ffff ffff     o...............
   2586c:	0077 0000 0303 0003 0001 0000 0003 0003     w...............
   2587c:	0083 0000 0504 0000 0007 0000 0004 0003     ................
   2588c:	0086 0000 0505 0001 0001 0000 0005 0003     ................
   2589c:	00ab 0000 0607 0002 0000 0000 0007 0003     ................

000258ac <pin_PD1_af>:
   258ac:	006e 0000 0000 00ff 0006 0000 ffff ffff     n...............
   258bc:	0084 0000 0504 0000 0008 0000 0404 0003     ................
   258cc:	0087 0000 0505 0001 0002 0000 0405 0003     ................
   258dc:	00ac 0000 0607 0002 0001 0000 0407 0003     ................

000258ec <pin_PD2_af>:
   258ec:	006d 0000 0000 00ff 0005 0000 ffff ffff     m...............
   258fc:	007c 0000 0504 0000 0000 0000 0804 0003     |...............
   2590c:	00ad 0000 0607 0003 0000 0000 0807 0003     ................
   2591c:	00a3 0000 0b08 0000 0000 0000 0808 0003     ................

0002592c <pin_PD3_af>:
   2592c:	006c 0000 0000 00ff 0004 0000 ffff ffff     l...............
   2593c:	008f 0000 0406 00ff 0004 0000 0c06 0003     ................
   2594c:	00ae 0000 0607 0003 0001 0000 0c07 0003     ................
   2595c:	00a5 0000 0b08 0000 0001 0000 0c08 0003     ................

0002596c <pin_board_pins_locals_dict_table>:
   2596c:	0126 0000 0000 2000 012a 0000 0034 2000     &...... *...4.. 
   2597c:	0196 0000 0068 2000 017a 0000 009c 2000     ....h.. z...... 
   2598c:	0176 0000 00d0 2000 0172 0000 0104 2000     v...... r...... 
   2599c:	016e 0000 0138 2000 016a 0000 016c 2000     n...8.. j...l.. 
   259ac:	014a 0000 01a0 2000 0146 0000 01d4 2000     J...... F...... 
   259bc:	0142 0000 0208 2000 013e 0000 023c 2000     B...... >...<.. 
   259cc:	00ee 0000 0270 2000 00f2 0000 02a4 2000     ....p.. ....... 
   259dc:	00f6 0000 02d8 2000 00fa 0000 030c 2000     ....... ....... 
   259ec:	00fe 0000 0340 2000 0102 0000 0374 2000     ....@.. ....t.. 
   259fc:	0106 0000 03a8 2000 010a 0000 03dc 2000     ....... ....... 
   25a0c:	0186 0000 0410 2000 018a 0000 0444 2000     ....... ....D.. 
   25a1c:	018e 0000 0478 2000 0192 0000 04ac 2000     ....x.. ....... 
   25a2c:	015e 0000 04e0 2000 0162 0000 0514 2000     ^...... b...... 
   25a3c:	010e 0000 0548 2000 0112 0000 057c 2000     ....H.. ....|.. 
   25a4c:	0116 0000 05b0 2000 011a 0000 05e4 2000     ....... ....... 
   25a5c:	013a 0000 0618 2000 0136 0000 064c 2000     :...... 6...L.. 
   25a6c:	0132 0000 0680 2000 012e 0000 06b4 2000     2...... ....... 
   25a7c:	0166 0000 06e8 2000 0122 0000 071c 2000     f...... "...... 
   25a8c:	011e 0000 0750 2000 017e 0000 0784 2000     ....P.. ~...... 
   25a9c:	0182 0000 07b8 2000 014e 0000 07ec 2000     ....... N...... 
   25aac:	0152 0000 0820 2000 0156 0000 0854 2000     R... .. V...T.. 
   25abc:	015a 0000 0888 2000                         Z...... 

00025ac4 <pin_board_pins_locals_dict>:
   25ac4:	201c 0002 015f 0000 002b 0000 596c 0002     . .._...+...lY..

00025ad4 <pin_cpu_pins_locals_dict_table>:
   25ad4:	0126 0000 0000 2000 012a 0000 0034 2000     &...... *...4.. 
   25ae4:	0196 0000 0068 2000 017a 0000 009c 2000     ....h.. z...... 
   25af4:	0176 0000 00d0 2000 0172 0000 0104 2000     v...... r...... 
   25b04:	016e 0000 0138 2000 016a 0000 016c 2000     n...8.. j...l.. 
   25b14:	014a 0000 01a0 2000 0146 0000 01d4 2000     J...... F...... 
   25b24:	0142 0000 0208 2000 013e 0000 023c 2000     B...... >...<.. 
   25b34:	00ee 0000 0270 2000 00f2 0000 02a4 2000     ....p.. ....... 
   25b44:	00f6 0000 02d8 2000 00fa 0000 030c 2000     ....... ....... 
   25b54:	00fe 0000 0340 2000 0102 0000 0374 2000     ....@.. ....t.. 
   25b64:	0106 0000 03a8 2000 010a 0000 03dc 2000     ....... ....... 
   25b74:	0186 0000 0410 2000 018a 0000 0444 2000     ....... ....D.. 
   25b84:	018e 0000 0478 2000 0192 0000 04ac 2000     ....x.. ....... 
   25b94:	015e 0000 04e0 2000 0162 0000 0514 2000     ^...... b...... 
   25ba4:	010e 0000 0548 2000 0112 0000 057c 2000     ....H.. ....|.. 
   25bb4:	0116 0000 05b0 2000 011a 0000 05e4 2000     ....... ....... 
   25bc4:	013a 0000 0618 2000 0136 0000 064c 2000     :...... 6...L.. 
   25bd4:	0132 0000 0680 2000 012e 0000 06b4 2000     2...... ....... 
   25be4:	0166 0000 06e8 2000 0122 0000 071c 2000     f...... "...... 
   25bf4:	011e 0000 0750 2000 017e 0000 0784 2000     ....P.. ~...... 
   25c04:	0182 0000 07b8 2000 014e 0000 07ec 2000     ....... N...... 
   25c14:	0152 0000 0820 2000 0156 0000 0854 2000     R... .. V...T.. 
   25c24:	015a 0000 0888 2000                         Z...... 

00025c2c <pin_cpu_pins_locals_dict>:
   25c2c:	201c 0002 015f 0000 002b 0000 5ad4 0002     . .._...+....Z..
   25c3c:	000d 0000 0004 0000 6f74 6b6f 2520 2075     ........took %u 
   25c4c:	736d 000a 7371 7274 0a3a 2020 5f6e 6f70     ms..qstr:.  n_po
   25c5c:	6c6f 253d 0a75 2020 5f6e 7371 7274 253d     ol=%u.  n_qstr=%
   25c6c:	0a75 2020 5f6e 7473 5f72 6164 6174 625f     u.  n_str_data_b
   25c7c:	7479 7365 253d 0a75 2020 5f6e 6f74 6174     ytes=%u.  n_tota
   25c8c:	5f6c 7962 6574 3d73 7525 000a 6172 2077     l_bytes=%u..raw 
   25c9c:	4552 4c50 203b 5443 4c52 422d 7420 206f     REPL; CTRL-B to 
   25cac:	7865 7469 0a0d 0000 003e 0000 0a0d 0000     exit....>.......
   25cbc:	4b4f 0000 694d 7263 506f 7479 6f68 206e     OK..MicroPython 
   25ccc:	3176 392e 342e 312d 672d 6165 6132 6163     v1.9.4-1-gea2aca
   25cdc:	3463 2d36 6964 7472 2079 6e6f 3220 3130     c46-dirty on 201
   25cec:	2d38 3231 312d 3b36 5420 7669 2061 614c     8-12-16; Tiva La
   25cfc:	6e75 6863 5020 6461 7720 7469 2068 4d54     unch Pad with TM
   25d0c:	4334 3231 4733 4836 4d50 0a0d 0000 0000     4C123G6HPM......
   25d1c:	3e3e 203e 0000 0000 0a0d 6170 7473 2065     >>> ......paste 
   25d2c:	6f6d 6564 203b 7443 6c72 432d 7420 206f     mode; Ctrl-C to 
   25d3c:	6163 636e 6c65 202c 7443 6c72 442d 7420     cancel, Ctrl-D t
   25d4c:	206f 6966 696e 6873 0a0d 3d3d 203d 0000     o finish..=== ..
   25d5c:	0a0d 3d3d 203d 0000 2e2e 202e 0000 0000     ..=== ..... ....

00025d6c <pyb_set_repl_info_obj>:
   25d6c:	28dc 0002 cc49 0001 0808 0808 0000 0000     .(..I...........
   25d7c:	5b1b 7525 0000 0000 5b1b 004b 0a0d 0000     .[%u.....[K.....
   25d8c:	2020 2020 0000 0000 0dfe 7266 7a6f 6e65         ......frozen
   25d9c:	6574 7473 702e 0079 03f9 5075 0079 0000     test.py...uPy...
   25dac:	01cc 0069                                   ..i.

00025db0 <mp_qstr_frozen_const_pool>:
   25db0:	f0e4 0001 017c 0000 0003 0000 0003 0000     ....|...........
   25dc0:	5d94 0002 5da4 0002 5dac 0002               .]...]...]..

00025dcc <bytecode_data_frozentest__lt_module_gt_>:
   25dcc:	0003 0000 0000 300d 7c00 2a01 2828 2b28     .......0.|.*(((+
   25ddc:	0028 ff00 511b 1601 017d 0164 1b32 0151     (....Q..}.d.2.Q.
   25dec:	0017 0164 1b32 0151 0117 0164 1b32 0151     ..d.2.Q...d.2.Q.
   25dfc:	0217 0164 1b32 0151 ba14 9aef 6415 3201     ..d.2.Q......d.2
   25e0c:	3580 800f 2430 017e 511b 1b01 017e 0164     .5..0$~..Q..~.d.
   25e1c:	8132 30e5 d784 eb36 327f 5b11 2061 6f6c     2..0..6..2.[a lo
   25e2c:	676e 7320 7274 6e69 2067 6874 7461 6920     ng string that i
   25e3c:	2073 6f6e 2074 6e69 6574 6e72 6465 0000     s not interned..

00025e4c <const_obj_frozentest__lt_module_gt__0>:
   25e4c:	3b0c 0002 00f6 0000 0022 0000 5e28 0002     .;......"...(^..
   25e5c:	2061 7473 6972 676e 7420 6168 2074 6168     a string that ha
   25e6c:	2073 6e75 6369 646f 2065 b1ce b2ce b3ce     s unicode ......
   25e7c:	6320 6168 7372 0000                          chars..

00025e84 <const_obj_frozentest__lt_module_gt__1>:
   25e84:	3b0c 0002 00c8 0000 0026 0000 5e5c 0002     .;......&...\^..
   25e94:	7962 6574 2073 3231 3433 0001               bytes 1234..

00025ea0 <const_obj_frozentest__lt_module_gt__2>:
   25ea0:	3b48 0002 0039 0000 000b 0000 5e94 0002     H;..9........^..

00025eb0 <const_table_data_frozentest__lt_module_gt_>:
   25eb0:	5e4c 0002 5e84 0002 5ea0 0002               L^...^...^..

00025ebc <raw_code_frozentest__lt_module_gt_>:
   25ebc:	0002 0000 5dcc 0002 5eb0 0002 0000 0000     .....]...^......

00025ecc <mp_frozen_mpy_names>:
   25ecc:	7266 7a6f 6e65 6574 7473 702e 0079 0000     frozentest.py...

00025edc <mp_frozen_mpy_content>:
   25edc:	5ebc 0002                                   .^..

00025ee0 <g_pui32GPIOBaseAddrs>:
   25ee0:	4000 4000 8000 4005 5000 4000 9000 4005     .@.@...@.P.@...@
   25ef0:	6000 4000 a000 4005 7000 4000 b000 4005     .`.@...@.p.@...@
   25f00:	4000 4002 c000 4005 5000 4002 d000 4005     .@.@...@.P.@...@
   25f10:	6000 4002 e000 4005 7000 4002 f000 4005     .`.@...@.p.@...@
   25f20:	d000 4003 0000 4006 1000 4006 1000 4006     ...@...@...@...@
   25f30:	2000 4006 2000 4006 3000 4006 3000 4006     . .@. .@.0.@.0.@
   25f40:	4000 4006 4000 4006 5000 4006 5000 4006     .@.@.@.@.P.@.P.@
   25f50:	6000 4006 6000 4006 7000 4006 7000 4006     .`.@.`.@.p.@.p.@
   25f60:	8000 4006 8000 4006 9000 4006 9000 4006     ...@...@...@...@

00025f70 <g_pui32Xtals>:
   25f70:	4240 000f 2000 001c 8480 001e 8000 0025     @B... ........%.
   25f80:	9e99 0036 4000 0038 0900 003d 8000 003e     ..6..@8...=...>.
   25f90:	0000 004b 4b40 004c 2000 004e 8d80 005b     ..K.@KL.. N...[.
   25fa0:	c000 005d 8000 0070 1200 007a 0000 007d     ..]...p...z...}.
   25fb0:	9680 0098 1b00 00b7 8000 00bb e8c0 00ce     ................
   25fc0:	7a64 00da 2400 00f4 0000 00fa a880 0112     dz...$..........
   25fd0:	2d00 0131 3600 016e 7840 017d               .-1..6n.@x}.
