
uPY_TM4C123.axf:     file format elf32-littlearm


Disassembly of section .text:

00000000 <_text>:
       0:	2000121c 	.word	0x2000121c
       4:	0001d079 	.word	0x0001d079
       8:	0001d0dd 	.word	0x0001d0dd
       c:	0001d0e3 	.word	0x0001d0e3
      10:	0001d0e9 	.word	0x0001d0e9
      14:	0001d0e9 	.word	0x0001d0e9
      18:	0001d0e9 	.word	0x0001d0e9
	...
      2c:	0001d0e9 	.word	0x0001d0e9
      30:	0001d0e9 	.word	0x0001d0e9
      34:	00000000 	.word	0x00000000
      38:	0001d0e9 	.word	0x0001d0e9
      3c:	0001d0e9 	.word	0x0001d0e9
      40:	0001d0e9 	.word	0x0001d0e9
      44:	0001d0e9 	.word	0x0001d0e9
      48:	0001d0e9 	.word	0x0001d0e9
      4c:	0001d0e9 	.word	0x0001d0e9
      50:	0001d0e9 	.word	0x0001d0e9
      54:	0001d0e9 	.word	0x0001d0e9
      58:	0001d0e9 	.word	0x0001d0e9
      5c:	0001d0e9 	.word	0x0001d0e9
      60:	0001d0e9 	.word	0x0001d0e9
      64:	0001d0e9 	.word	0x0001d0e9
      68:	0001d0e9 	.word	0x0001d0e9
      6c:	0001d0e9 	.word	0x0001d0e9
      70:	0001d0e9 	.word	0x0001d0e9
      74:	0001d0e9 	.word	0x0001d0e9
      78:	0001d0e9 	.word	0x0001d0e9
      7c:	0001d0e9 	.word	0x0001d0e9
      80:	0001d0e9 	.word	0x0001d0e9
      84:	0001d0e9 	.word	0x0001d0e9
      88:	0001d0e9 	.word	0x0001d0e9
      8c:	0001d0e9 	.word	0x0001d0e9
      90:	0001d0e9 	.word	0x0001d0e9
      94:	0001d0e9 	.word	0x0001d0e9
      98:	0001d0e9 	.word	0x0001d0e9
      9c:	0001d0e9 	.word	0x0001d0e9
      a0:	0001d0e9 	.word	0x0001d0e9
      a4:	0001d0e9 	.word	0x0001d0e9
      a8:	0001d0e9 	.word	0x0001d0e9
      ac:	0001d0e9 	.word	0x0001d0e9
      b0:	0001d0e9 	.word	0x0001d0e9
      b4:	0001d0e9 	.word	0x0001d0e9
      b8:	0001d0e9 	.word	0x0001d0e9
      bc:	0001d0e9 	.word	0x0001d0e9
      c0:	0001d0e9 	.word	0x0001d0e9
      c4:	0001d0e9 	.word	0x0001d0e9
      c8:	0001d0e9 	.word	0x0001d0e9
      cc:	0001d0e9 	.word	0x0001d0e9
      d0:	0001d0e9 	.word	0x0001d0e9
      d4:	0001d0e9 	.word	0x0001d0e9
      d8:	0001d0e9 	.word	0x0001d0e9
      dc:	0001d0e9 	.word	0x0001d0e9
      e0:	0001d0e9 	.word	0x0001d0e9
	...
      ec:	0001d0e9 	.word	0x0001d0e9
      f0:	0001d0e9 	.word	0x0001d0e9
      f4:	0001d0e9 	.word	0x0001d0e9
      f8:	0001d0e9 	.word	0x0001d0e9
      fc:	0001d0e9 	.word	0x0001d0e9
     100:	0001d0e9 	.word	0x0001d0e9
     104:	0001d0e9 	.word	0x0001d0e9
     108:	0001d0e9 	.word	0x0001d0e9
     10c:	0001d0e9 	.word	0x0001d0e9
	...
     118:	0001d0e9 	.word	0x0001d0e9
     11c:	0001d0e9 	.word	0x0001d0e9
     120:	0001d0e9 	.word	0x0001d0e9
     124:	0001d0e9 	.word	0x0001d0e9
     128:	0001d0e9 	.word	0x0001d0e9
     12c:	0001d0e9 	.word	0x0001d0e9
     130:	0001d0e9 	.word	0x0001d0e9
     134:	0001d0e9 	.word	0x0001d0e9
     138:	0001d0e9 	.word	0x0001d0e9
     13c:	0001d0e9 	.word	0x0001d0e9
	...
     150:	0001d0e9 	.word	0x0001d0e9
     154:	0001d0e9 	.word	0x0001d0e9
     158:	0001d0e9 	.word	0x0001d0e9
     15c:	0001d0e9 	.word	0x0001d0e9
	...
     1b0:	0001d0e9 	.word	0x0001d0e9
     1b4:	0001d0e9 	.word	0x0001d0e9
     1b8:	0001d0e9 	.word	0x0001d0e9
     1bc:	0001d0e9 	.word	0x0001d0e9
     1c0:	0001d0e9 	.word	0x0001d0e9
     1c4:	0001d0e9 	.word	0x0001d0e9
     1c8:	0001d0e9 	.word	0x0001d0e9
     1cc:	0001d0e9 	.word	0x0001d0e9
     1d0:	0001d0e9 	.word	0x0001d0e9
     1d4:	0001d0e9 	.word	0x0001d0e9
     1d8:	0001d0e9 	.word	0x0001d0e9
     1dc:	0001d0e9 	.word	0x0001d0e9
     1e0:	0001d0e9 	.word	0x0001d0e9
     1e4:	0001d0e9 	.word	0x0001d0e9
     1e8:	0001d0e9 	.word	0x0001d0e9
	...
     1f4:	0001d0e9 	.word	0x0001d0e9
     1f8:	0001d0e9 	.word	0x0001d0e9
     1fc:	0001d0e9 	.word	0x0001d0e9
     200:	0001d0e9 	.word	0x0001d0e9
     204:	0001d0e9 	.word	0x0001d0e9
	...
     210:	0001d0e9 	.word	0x0001d0e9
     214:	0001d0e9 	.word	0x0001d0e9
     218:	0001d0e9 	.word	0x0001d0e9
     21c:	0001d0e9 	.word	0x0001d0e9
     220:	0001d0e9 	.word	0x0001d0e9
     224:	0001d0e9 	.word	0x0001d0e9
     228:	0001d0e9 	.word	0x0001d0e9
     22c:	0001d0e9 	.word	0x0001d0e9
     230:	0001d0e9 	.word	0x0001d0e9
     234:	0001d0e9 	.word	0x0001d0e9
     238:	0001d0e9 	.word	0x0001d0e9
     23c:	0001d0e9 	.word	0x0001d0e9
     240:	0001d0e9 	.word	0x0001d0e9
     244:	0001d0e9 	.word	0x0001d0e9
     248:	0001d0e9 	.word	0x0001d0e9
     24c:	0001d0e9 	.word	0x0001d0e9
     250:	0001d0e9 	.word	0x0001d0e9
     254:	0001d0e9 	.word	0x0001d0e9
     258:	0001d0e9 	.word	0x0001d0e9
     25c:	0001d0e9 	.word	0x0001d0e9
     260:	0001d0e9 	.word	0x0001d0e9
     264:	0001d0e9 	.word	0x0001d0e9
     268:	0001d0e9 	.word	0x0001d0e9

0000026c <nlr_push_tail>:
// LTO can't see inside inline asm functions so explicitly mark nlr_push_tail as used
__attribute__((used)) unsigned int nlr_push_tail(nlr_buf_t *nlr);
#endif
#endif

unsigned int nlr_push_tail(nlr_buf_t *nlr) {
     26c:	b480      	push	{r7}
     26e:	b085      	sub	sp, #20
     270:	af00      	add	r7, sp, #0
     272:	6078      	str	r0, [r7, #4]
    nlr_buf_t **top = &MP_STATE_THREAD(nlr_top);
     274:	4b07      	ldr	r3, [pc, #28]	; (294 <nlr_push_tail+0x28>)
     276:	60fb      	str	r3, [r7, #12]
    nlr->prev = *top;
     278:	68fb      	ldr	r3, [r7, #12]
     27a:	681a      	ldr	r2, [r3, #0]
     27c:	687b      	ldr	r3, [r7, #4]
     27e:	601a      	str	r2, [r3, #0]
    MP_NLR_SAVE_PYSTACK(nlr);
    *top = nlr;
     280:	68fb      	ldr	r3, [r7, #12]
     282:	687a      	ldr	r2, [r7, #4]
     284:	601a      	str	r2, [r3, #0]
    return 0; // normal return
     286:	2300      	movs	r3, #0
}
     288:	4618      	mov	r0, r3
     28a:	3714      	adds	r7, #20
     28c:	46bd      	mov	sp, r7
     28e:	f85d 7b04 	ldr.w	r7, [sp], #4
     292:	4770      	bx	lr
     294:	20001254 	.word	0x20001254

00000298 <nlr_pop>:

void nlr_pop(void) {
     298:	b480      	push	{r7}
     29a:	b083      	sub	sp, #12
     29c:	af00      	add	r7, sp, #0
    nlr_buf_t **top = &MP_STATE_THREAD(nlr_top);
     29e:	4b06      	ldr	r3, [pc, #24]	; (2b8 <nlr_pop+0x20>)
     2a0:	607b      	str	r3, [r7, #4]
    *top = (*top)->prev;
     2a2:	687b      	ldr	r3, [r7, #4]
     2a4:	681b      	ldr	r3, [r3, #0]
     2a6:	681a      	ldr	r2, [r3, #0]
     2a8:	687b      	ldr	r3, [r7, #4]
     2aa:	601a      	str	r2, [r3, #0]
}
     2ac:	bf00      	nop
     2ae:	370c      	adds	r7, #12
     2b0:	46bd      	mov	sp, r7
     2b2:	f85d 7b04 	ldr.w	r7, [sp], #4
     2b6:	4770      	bx	lr
     2b8:	20001254 	.word	0x20001254

000002bc <nlr_push>:
// For reference, arm/thumb callee save regs are:
//      r4-r11, r13=sp

__attribute__((naked)) unsigned int nlr_push(nlr_buf_t *nlr) {

    __asm volatile (
     2bc:	60c4      	str	r4, [r0, #12]
     2be:	6105      	str	r5, [r0, #16]
     2c0:	6146      	str	r6, [r0, #20]
     2c2:	6187      	str	r7, [r0, #24]
     2c4:	f8c0 801c 	str.w	r8, [r0, #28]
     2c8:	f8c0 9020 	str.w	r9, [r0, #32]
     2cc:	f8c0 a024 	str.w	sl, [r0, #36]	; 0x24
     2d0:	f8c0 b028 	str.w	fp, [r0, #40]	; 0x28
     2d4:	f8c0 d02c 	str.w	sp, [r0, #44]	; 0x2c
     2d8:	f8c0 e008 	str.w	lr, [r0, #8]
     2dc:	f7ff bfc6 	b.w	26c <nlr_push_tail>

000002e0 <nlr_jump>:
    return 0;
    #endif
}

NORETURN void nlr_jump(void *val) {
    MP_NLR_JUMP_HEAD(val, top)
     2e0:	4a0d      	ldr	r2, [pc, #52]	; (318 <nlr_jump+0x38>)
NORETURN void nlr_jump(void *val) {
     2e2:	b508      	push	{r3, lr}
    MP_NLR_JUMP_HEAD(val, top)
     2e4:	68d3      	ldr	r3, [r2, #12]
     2e6:	b90b      	cbnz	r3, 2ec <nlr_jump+0xc>
     2e8:	f01c fdf0 	bl	1cecc <nlr_jump_fail>
     2ec:	6819      	ldr	r1, [r3, #0]
     2ee:	6058      	str	r0, [r3, #4]
     2f0:	60d1      	str	r1, [r2, #12]

    __asm volatile (
     2f2:	4618      	mov	r0, r3
     2f4:	68c4      	ldr	r4, [r0, #12]
     2f6:	6905      	ldr	r5, [r0, #16]
     2f8:	6946      	ldr	r6, [r0, #20]
     2fa:	6987      	ldr	r7, [r0, #24]
     2fc:	f8d0 801c 	ldr.w	r8, [r0, #28]
     300:	f8d0 9020 	ldr.w	r9, [r0, #32]
     304:	f8d0 a024 	ldr.w	sl, [r0, #36]	; 0x24
     308:	f8d0 b028 	ldr.w	fp, [r0, #40]	; 0x28
     30c:	f8d0 d02c 	ldr.w	sp, [r0, #44]	; 0x2c
     310:	f8d0 e008 	ldr.w	lr, [r0, #8]
     314:	2001      	movs	r0, #1
     316:	4770      	bx	lr
     318:	20001248 	.word	0x20001248

0000031c <m_malloc>:
    }
}

#endif // MICROPY_ENABLE_GC

void *m_malloc(size_t num_bytes) {
     31c:	b580      	push	{r7, lr}
     31e:	b084      	sub	sp, #16
     320:	af00      	add	r7, sp, #0
     322:	6078      	str	r0, [r7, #4]
    void *ptr = malloc(num_bytes);
     324:	2100      	movs	r1, #0
     326:	6878      	ldr	r0, [r7, #4]
     328:	f000 fb00 	bl	92c <gc_alloc>
     32c:	60f8      	str	r0, [r7, #12]
    if (ptr == NULL && num_bytes != 0) {
     32e:	68fb      	ldr	r3, [r7, #12]
     330:	2b00      	cmp	r3, #0
     332:	d105      	bne.n	340 <m_malloc+0x24>
     334:	687b      	ldr	r3, [r7, #4]
     336:	2b00      	cmp	r3, #0
     338:	d002      	beq.n	340 <m_malloc+0x24>
        m_malloc_fail(num_bytes);
     33a:	6878      	ldr	r0, [r7, #4]
     33c:	f00c ffe1 	bl	d302 <m_malloc_fail>
#if MICROPY_MEM_STATS
    MP_STATE_MEM(total_bytes_allocated) += num_bytes;
    MP_STATE_MEM(current_bytes_allocated) += num_bytes;
    UPDATE_PEAK();
#endif
    DEBUG_printf("malloc %d : %p\n", num_bytes, ptr);
     340:	68fa      	ldr	r2, [r7, #12]
     342:	6879      	ldr	r1, [r7, #4]
     344:	4803      	ldr	r0, [pc, #12]	; (354 <m_malloc+0x38>)
     346:	f01c fc51 	bl	1cbec <DEBUG_printf>
    return ptr;
     34a:	68fb      	ldr	r3, [r7, #12]
}
     34c:	4618      	mov	r0, r3
     34e:	3710      	adds	r7, #16
     350:	46bd      	mov	sp, r7
     352:	bd80      	pop	{r7, pc}
     354:	0001f6c4 	.word	0x0001f6c4

00000358 <m_malloc_maybe>:

void *m_malloc_maybe(size_t num_bytes) {
     358:	b580      	push	{r7, lr}
     35a:	b084      	sub	sp, #16
     35c:	af00      	add	r7, sp, #0
     35e:	6078      	str	r0, [r7, #4]
    void *ptr = malloc(num_bytes);
     360:	2100      	movs	r1, #0
     362:	6878      	ldr	r0, [r7, #4]
     364:	f000 fae2 	bl	92c <gc_alloc>
     368:	60f8      	str	r0, [r7, #12]
#if MICROPY_MEM_STATS
    MP_STATE_MEM(total_bytes_allocated) += num_bytes;
    MP_STATE_MEM(current_bytes_allocated) += num_bytes;
    UPDATE_PEAK();
#endif
    DEBUG_printf("malloc %d : %p\n", num_bytes, ptr);
     36a:	68fa      	ldr	r2, [r7, #12]
     36c:	6879      	ldr	r1, [r7, #4]
     36e:	4804      	ldr	r0, [pc, #16]	; (380 <m_malloc_maybe+0x28>)
     370:	f01c fc3c 	bl	1cbec <DEBUG_printf>
    return ptr;
     374:	68fb      	ldr	r3, [r7, #12]
}
     376:	4618      	mov	r0, r3
     378:	3710      	adds	r7, #16
     37a:	46bd      	mov	sp, r7
     37c:	bd80      	pop	{r7, pc}
     37e:	bf00      	nop
     380:	0001f6c4 	.word	0x0001f6c4

00000384 <m_malloc0>:
    DEBUG_printf("malloc %d : %p\n", num_bytes, ptr);
    return ptr;
}
#endif

void *m_malloc0(size_t num_bytes) {
     384:	b580      	push	{r7, lr}
     386:	b084      	sub	sp, #16
     388:	af00      	add	r7, sp, #0
     38a:	6078      	str	r0, [r7, #4]
    void *ptr = m_malloc(num_bytes);
     38c:	6878      	ldr	r0, [r7, #4]
     38e:	f7ff ffc5 	bl	31c <m_malloc>
     392:	60f8      	str	r0, [r7, #12]
    // If this config is set then the GC clears all memory, so we don't need to.
    #if !MICROPY_GC_CONSERVATIVE_CLEAR
    memset(ptr, 0, num_bytes);
    #endif
    return ptr;
     394:	68fb      	ldr	r3, [r7, #12]
}
     396:	4618      	mov	r0, r3
     398:	3710      	adds	r7, #16
     39a:	46bd      	mov	sp, r7
     39c:	bd80      	pop	{r7, pc}

0000039e <m_realloc>:

#if MICROPY_MALLOC_USES_ALLOCATED_SIZE
void *m_realloc(void *ptr, size_t old_num_bytes, size_t new_num_bytes) {
#else
void *m_realloc(void *ptr, size_t new_num_bytes) {
     39e:	b580      	push	{r7, lr}
     3a0:	b084      	sub	sp, #16
     3a2:	af00      	add	r7, sp, #0
     3a4:	6078      	str	r0, [r7, #4]
     3a6:	6039      	str	r1, [r7, #0]
#endif
    void *new_ptr = realloc(ptr, new_num_bytes);
     3a8:	2201      	movs	r2, #1
     3aa:	6839      	ldr	r1, [r7, #0]
     3ac:	6878      	ldr	r0, [r7, #4]
     3ae:	f000 fc2d 	bl	c0c <gc_realloc>
     3b2:	60f8      	str	r0, [r7, #12]
    if (new_ptr == NULL && new_num_bytes != 0) {
     3b4:	68fb      	ldr	r3, [r7, #12]
     3b6:	2b00      	cmp	r3, #0
     3b8:	d105      	bne.n	3c6 <m_realloc+0x28>
     3ba:	683b      	ldr	r3, [r7, #0]
     3bc:	2b00      	cmp	r3, #0
     3be:	d002      	beq.n	3c6 <m_realloc+0x28>
        m_malloc_fail(new_num_bytes);
     3c0:	6838      	ldr	r0, [r7, #0]
     3c2:	f00c ff9e 	bl	d302 <m_malloc_fail>
    UPDATE_PEAK();
#endif
    #if MICROPY_MALLOC_USES_ALLOCATED_SIZE
    DEBUG_printf("realloc %p, %d, %d : %p\n", ptr, old_num_bytes, new_num_bytes, new_ptr);
    #else
    DEBUG_printf("realloc %p, %d : %p\n", ptr, new_num_bytes, new_ptr);
     3c6:	68fb      	ldr	r3, [r7, #12]
     3c8:	683a      	ldr	r2, [r7, #0]
     3ca:	6879      	ldr	r1, [r7, #4]
     3cc:	4803      	ldr	r0, [pc, #12]	; (3dc <m_realloc+0x3e>)
     3ce:	f01c fc0d 	bl	1cbec <DEBUG_printf>
    #endif
    return new_ptr;
     3d2:	68fb      	ldr	r3, [r7, #12]
}
     3d4:	4618      	mov	r0, r3
     3d6:	3710      	adds	r7, #16
     3d8:	46bd      	mov	sp, r7
     3da:	bd80      	pop	{r7, pc}
     3dc:	0001f6d4 	.word	0x0001f6d4

000003e0 <m_realloc_maybe>:

#if MICROPY_MALLOC_USES_ALLOCATED_SIZE
void *m_realloc_maybe(void *ptr, size_t old_num_bytes, size_t new_num_bytes, bool allow_move) {
#else
void *m_realloc_maybe(void *ptr, size_t new_num_bytes, bool allow_move) {
     3e0:	b580      	push	{r7, lr}
     3e2:	b086      	sub	sp, #24
     3e4:	af00      	add	r7, sp, #0
     3e6:	60f8      	str	r0, [r7, #12]
     3e8:	60b9      	str	r1, [r7, #8]
     3ea:	4613      	mov	r3, r2
     3ec:	71fb      	strb	r3, [r7, #7]
#endif
    void *new_ptr = realloc_ext(ptr, new_num_bytes, allow_move);
     3ee:	79fb      	ldrb	r3, [r7, #7]
     3f0:	461a      	mov	r2, r3
     3f2:	68b9      	ldr	r1, [r7, #8]
     3f4:	68f8      	ldr	r0, [r7, #12]
     3f6:	f000 fc09 	bl	c0c <gc_realloc>
     3fa:	6178      	str	r0, [r7, #20]
    }
#endif
    #if MICROPY_MALLOC_USES_ALLOCATED_SIZE
    DEBUG_printf("realloc %p, %d, %d : %p\n", ptr, old_num_bytes, new_num_bytes, new_ptr);
    #else
    DEBUG_printf("realloc %p, %d, %d : %p\n", ptr, new_num_bytes, new_ptr);
     3fc:	697b      	ldr	r3, [r7, #20]
     3fe:	68ba      	ldr	r2, [r7, #8]
     400:	68f9      	ldr	r1, [r7, #12]
     402:	4804      	ldr	r0, [pc, #16]	; (414 <m_realloc_maybe+0x34>)
     404:	f01c fbf2 	bl	1cbec <DEBUG_printf>
    #endif
    return new_ptr;
     408:	697b      	ldr	r3, [r7, #20]
}
     40a:	4618      	mov	r0, r3
     40c:	3718      	adds	r7, #24
     40e:	46bd      	mov	sp, r7
     410:	bd80      	pop	{r7, pc}
     412:	bf00      	nop
     414:	0001f6ec 	.word	0x0001f6ec

00000418 <m_free>:

#if MICROPY_MALLOC_USES_ALLOCATED_SIZE
void m_free(void *ptr, size_t num_bytes) {
#else
void m_free(void *ptr) {
     418:	b580      	push	{r7, lr}
     41a:	b082      	sub	sp, #8
     41c:	af00      	add	r7, sp, #0
     41e:	6078      	str	r0, [r7, #4]
#endif
    free(ptr);
     420:	6878      	ldr	r0, [r7, #4]
     422:	f000 fb5f 	bl	ae4 <gc_free>
    MP_STATE_MEM(current_bytes_allocated) -= num_bytes;
#endif
    #if MICROPY_MALLOC_USES_ALLOCATED_SIZE
    DEBUG_printf("free %p, %d\n", ptr, num_bytes);
    #else
    DEBUG_printf("free %p\n", ptr);
     426:	6879      	ldr	r1, [r7, #4]
     428:	4803      	ldr	r0, [pc, #12]	; (438 <m_free+0x20>)
     42a:	f01c fbdf 	bl	1cbec <DEBUG_printf>
    #endif
}
     42e:	bf00      	nop
     430:	3708      	adds	r7, #8
     432:	46bd      	mov	sp, r7
     434:	bd80      	pop	{r7, pc}
     436:	bf00      	nop
     438:	0001f708 	.word	0x0001f708

0000043c <gc_mark_subtree>:

// Take the given block as the topmost block on the stack. Check all it's
// children: mark the unmarked child blocks and put those newly marked
// blocks on the stack. When all children have been checked, pop off the
// topmost block on the stack and repeat with that one.
STATIC void gc_mark_subtree(size_t block) {
     43c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
     440:	4e2e      	ldr	r6, [pc, #184]	; (4fc <gc_mark_subtree+0xc0>)
    // Start with the block passed in the argument.
    size_t sp = 0;
     442:	2700      	movs	r7, #0
     444:	f8d6 e0b4 	ldr.w	lr, [r6, #180]	; 0xb4
    for (;;) {
        // work out number of consecutive blocks in the chain starting with this one
        size_t n_blocks = 0;
     448:	2100      	movs	r1, #0
        do {
            n_blocks += 1;
     44a:	3101      	adds	r1, #1
     44c:	1843      	adds	r3, r0, r1
        } while (ATB_GET_KIND(block + n_blocks) == AT_TAIL);
     44e:	089a      	lsrs	r2, r3, #2
     450:	f003 0303 	and.w	r3, r3, #3
     454:	f81e 2002 	ldrb.w	r2, [lr, r2]
     458:	005b      	lsls	r3, r3, #1
     45a:	fa42 f303 	asr.w	r3, r2, r3
     45e:	f003 0303 	and.w	r3, r3, #3
     462:	2b02      	cmp	r3, #2
     464:	d0f1      	beq.n	44a <gc_mark_subtree+0xe>

        // check this block's children
        void **ptrs = (void**)PTR_FROM_BLOCK(block);
     466:	f8d6 30bc 	ldr.w	r3, [r6, #188]	; 0xbc
        for (size_t i = n_blocks * BYTES_PER_BLOCK / sizeof(void*); i > 0; i--, ptrs++) {
     46a:	0109      	lsls	r1, r1, #4
     46c:	ea4f 0a91 	mov.w	sl, r1, lsr #2
        void **ptrs = (void**)PTR_FROM_BLOCK(block);
     470:	eb03 1800 	add.w	r8, r3, r0, lsl #4
        for (size_t i = n_blocks * BYTES_PER_BLOCK / sizeof(void*); i > 0; i--, ptrs++) {
     474:	b311      	cbz	r1, 4bc <gc_mark_subtree+0x80>
     476:	eb08 0a8a 	add.w	sl, r8, sl, lsl #2
            void *ptr = *ptrs;
     47a:	f858 1b04 	ldr.w	r1, [r8], #4
            if (VERIFY_PTR(ptr)) {
     47e:	070b      	lsls	r3, r1, #28
     480:	d11a      	bne.n	4b8 <gc_mark_subtree+0x7c>
     482:	f8d6 30bc 	ldr.w	r3, [r6, #188]	; 0xbc
     486:	4299      	cmp	r1, r3
     488:	d316      	bcc.n	4b8 <gc_mark_subtree+0x7c>
                // Mark and push this pointer
                size_t childblock = BLOCK_FROM_PTR(ptr);
     48a:	eba1 0903 	sub.w	r9, r1, r3
            if (VERIFY_PTR(ptr)) {
     48e:	f8d6 30c0 	ldr.w	r3, [r6, #192]	; 0xc0
                if (ATB_GET_KIND(childblock) == AT_HEAD) {
     492:	ea4f 1599 	mov.w	r5, r9, lsr #6
                size_t childblock = BLOCK_FROM_PTR(ptr);
     496:	ea4f 1919 	mov.w	r9, r9, lsr #4
                if (ATB_GET_KIND(childblock) == AT_HEAD) {
     49a:	f009 0b03 	and.w	fp, r9, #3
            if (VERIFY_PTR(ptr)) {
     49e:	4299      	cmp	r1, r3
                if (ATB_GET_KIND(childblock) == AT_HEAD) {
     4a0:	ea4f 0b4b 	mov.w	fp, fp, lsl #1
            if (VERIFY_PTR(ptr)) {
     4a4:	d208      	bcs.n	4b8 <gc_mark_subtree+0x7c>
                if (ATB_GET_KIND(childblock) == AT_HEAD) {
     4a6:	f8d6 30b4 	ldr.w	r3, [r6, #180]	; 0xb4
     4aa:	5d5b      	ldrb	r3, [r3, r5]
     4ac:	fa43 f30b 	asr.w	r3, r3, fp
     4b0:	f003 0403 	and.w	r4, r3, #3
     4b4:	2c01      	cmp	r4, #1
     4b6:	d008      	beq.n	4ca <gc_mark_subtree+0x8e>
        for (size_t i = n_blocks * BYTES_PER_BLOCK / sizeof(void*); i > 0; i--, ptrs++) {
     4b8:	45c2      	cmp	sl, r8
     4ba:	d1de      	bne.n	47a <gc_mark_subtree+0x3e>
                }
            }
        }

        // Are there any blocks on the stack?
        if (sp == 0) {
     4bc:	b1e7      	cbz	r7, 4f8 <gc_mark_subtree+0xbc>
            break; // No, stack is empty, we're done.
        }

        // pop the next block off the stack
        block = MP_STATE_MEM(gc_stack)[--sp];
     4be:	3f01      	subs	r7, #1
     4c0:	eb06 0387 	add.w	r3, r6, r7, lsl #2
     4c4:	f8d3 00c8 	ldr.w	r0, [r3, #200]	; 0xc8
    for (;;) {
     4c8:	e7bc      	b.n	444 <gc_mark_subtree+0x8>
                    TRACE_MARK(childblock, ptr);
     4ca:	480d      	ldr	r0, [pc, #52]	; (500 <gc_mark_subtree+0xc4>)
     4cc:	f01c fb8e 	bl	1cbec <DEBUG_printf>
                    ATB_HEAD_TO_MARK(childblock);
     4d0:	f8d6 00b4 	ldr.w	r0, [r6, #180]	; 0xb4
     4d4:	2303      	movs	r3, #3
     4d6:	5d41      	ldrb	r1, [r0, r5]
     4d8:	fa03 fb0b 	lsl.w	fp, r3, fp
     4dc:	ea41 0b0b 	orr.w	fp, r1, fp
                        MP_STATE_MEM(gc_stack)[sp++] = childblock;
     4e0:	eb06 0187 	add.w	r1, r6, r7, lsl #2
                    if (sp < MICROPY_ALLOC_GC_STACK_SIZE) {
     4e4:	2f3f      	cmp	r7, #63	; 0x3f
                    ATB_HEAD_TO_MARK(childblock);
     4e6:	f800 b005 	strb.w	fp, [r0, r5]
                        MP_STATE_MEM(gc_stack)[sp++] = childblock;
     4ea:	bf9a      	itte	ls
     4ec:	3701      	addls	r7, #1
     4ee:	f8c1 90c8 	strls.w	r9, [r1, #200]	; 0xc8
                        MP_STATE_MEM(gc_stack_overflow) = 1;
     4f2:	f8c6 40c4 	strhi.w	r4, [r6, #196]	; 0xc4
     4f6:	e7df      	b.n	4b8 <gc_mark_subtree+0x7c>
     4f8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
     4fc:	20001248 	.word	0x20001248
     500:	0001f728 	.word	0x0001f728

00000504 <gc_init>:
void gc_init(void *start, void *end) {
     504:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    end = (void*)((uintptr_t)end & (~(BYTES_PER_BLOCK - 1)));
     508:	f021 060f 	bic.w	r6, r1, #15
    DEBUG_printf("Initializing GC heap: %p..%p = " UINT_FMT " bytes\n", start, end, (byte*)end - (byte*)start);
     50c:	1a35      	subs	r5, r6, r0
void gc_init(void *start, void *end) {
     50e:	4607      	mov	r7, r0
    DEBUG_printf("Initializing GC heap: %p..%p = " UINT_FMT " bytes\n", start, end, (byte*)end - (byte*)start);
     510:	4632      	mov	r2, r6
     512:	462b      	mov	r3, r5
     514:	4601      	mov	r1, r0
     516:	481d      	ldr	r0, [pc, #116]	; (58c <gc_init+0x88>)
    MP_STATE_MEM(gc_alloc_table_byte_len) = total_byte_len / (1 + BITS_PER_BYTE / 2 * BYTES_PER_BLOCK);
     518:	4c1d      	ldr	r4, [pc, #116]	; (590 <gc_init+0x8c>)
    DEBUG_printf("Initializing GC heap: %p..%p = " UINT_FMT " bytes\n", start, end, (byte*)end - (byte*)start);
     51a:	f01c fb67 	bl	1cbec <DEBUG_printf>
    MP_STATE_MEM(gc_alloc_table_byte_len) = total_byte_len / (1 + BITS_PER_BYTE / 2 * BYTES_PER_BLOCK);
     51e:	4b1d      	ldr	r3, [pc, #116]	; (594 <gc_init+0x90>)
    MP_STATE_MEM(gc_alloc_table_start) = (byte*)start;
     520:	f8c4 70b4 	str.w	r7, [r4, #180]	; 0xb4
    MP_STATE_MEM(gc_alloc_table_byte_len) = total_byte_len / (1 + BITS_PER_BYTE / 2 * BYTES_PER_BLOCK);
     524:	fba3 2305 	umull	r2, r3, r3, r5
     528:	099b      	lsrs	r3, r3, #6
    MP_STATE_MEM(gc_pool_start) = (byte*)end - gc_pool_block_len * BYTES_PER_BLOCK;
     52a:	ea4f 1883 	mov.w	r8, r3, lsl #6
     52e:	eba6 0508 	sub.w	r5, r6, r8
    memset(MP_STATE_MEM(gc_alloc_table_start), 0, MP_STATE_MEM(gc_alloc_table_byte_len));
     532:	461a      	mov	r2, r3
     534:	4638      	mov	r0, r7
     536:	2100      	movs	r1, #0
    MP_STATE_MEM(gc_pool_start) = (byte*)end - gc_pool_block_len * BYTES_PER_BLOCK;
     538:	f8c4 50bc 	str.w	r5, [r4, #188]	; 0xbc
    MP_STATE_MEM(gc_alloc_table_byte_len) = total_byte_len / (1 + BITS_PER_BYTE / 2 * BYTES_PER_BLOCK);
     53c:	f8c4 30b8 	str.w	r3, [r4, #184]	; 0xb8
    size_t gc_pool_block_len = MP_STATE_MEM(gc_alloc_table_byte_len) * BLOCKS_PER_ATB;
     540:	009d      	lsls	r5, r3, #2
    MP_STATE_MEM(gc_pool_end) = end;
     542:	f8c4 60c0 	str.w	r6, [r4, #192]	; 0xc0
    memset(MP_STATE_MEM(gc_alloc_table_start), 0, MP_STATE_MEM(gc_alloc_table_byte_len));
     546:	f01e f88d 	bl	1e664 <memset>
    MP_STATE_MEM(gc_last_free_atb_index) = 0;
     54a:	2300      	movs	r3, #0
    MP_STATE_MEM(gc_lock_depth) = 0;
     54c:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    MP_STATE_MEM(gc_alloc_threshold) = (size_t)-1;
     550:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    DEBUG_printf("GC layout:\n");
     554:	4810      	ldr	r0, [pc, #64]	; (598 <gc_init+0x94>)
    MP_STATE_MEM(gc_lock_depth) = 0;
     556:	f8c4 11c8 	str.w	r1, [r4, #456]	; 0x1c8
    MP_STATE_MEM(gc_alloc_threshold) = (size_t)-1;
     55a:	f8c4 21d0 	str.w	r2, [r4, #464]	; 0x1d0
    MP_STATE_MEM(gc_last_free_atb_index) = 0;
     55e:	f8c4 31d4 	str.w	r3, [r4, #468]	; 0x1d4
    MP_STATE_MEM(gc_alloc_amount) = 0;
     562:	f8c4 31cc 	str.w	r3, [r4, #460]	; 0x1cc
    DEBUG_printf("GC layout:\n");
     566:	f01c fb41 	bl	1cbec <DEBUG_printf>
    DEBUG_printf("  alloc table at %p, length " UINT_FMT " bytes, " UINT_FMT " blocks\n", MP_STATE_MEM(gc_alloc_table_start), MP_STATE_MEM(gc_alloc_table_byte_len), MP_STATE_MEM(gc_alloc_table_byte_len) * BLOCKS_PER_ATB);
     56a:	f8d4 20b8 	ldr.w	r2, [r4, #184]	; 0xb8
     56e:	f8d4 10b4 	ldr.w	r1, [r4, #180]	; 0xb4
     572:	480a      	ldr	r0, [pc, #40]	; (59c <gc_init+0x98>)
     574:	0093      	lsls	r3, r2, #2
     576:	f01c fb39 	bl	1cbec <DEBUG_printf>
    DEBUG_printf("  pool at %p, length " UINT_FMT " bytes, " UINT_FMT " blocks\n", MP_STATE_MEM(gc_pool_start), gc_pool_block_len * BYTES_PER_BLOCK, gc_pool_block_len);
     57a:	462b      	mov	r3, r5
     57c:	4642      	mov	r2, r8
     57e:	f8d4 10bc 	ldr.w	r1, [r4, #188]	; 0xbc
     582:	4807      	ldr	r0, [pc, #28]	; (5a0 <gc_init+0x9c>)
}
     584:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    DEBUG_printf("  pool at %p, length " UINT_FMT " bytes, " UINT_FMT " blocks\n", MP_STATE_MEM(gc_pool_start), gc_pool_block_len * BYTES_PER_BLOCK, gc_pool_block_len);
     588:	f01c bb30 	b.w	1cbec <DEBUG_printf>
     58c:	0001f738 	.word	0x0001f738
     590:	20001248 	.word	0x20001248
     594:	fc0fc0fd 	.word	0xfc0fc0fd
     598:	0001f764 	.word	0x0001f764
     59c:	0001f770 	.word	0x0001f770
     5a0:	0001f7a4 	.word	0x0001f7a4

000005a4 <gc_lock>:
    MP_STATE_MEM(gc_lock_depth)++;
     5a4:	4a03      	ldr	r2, [pc, #12]	; (5b4 <gc_lock+0x10>)
     5a6:	f8b2 31c8 	ldrh.w	r3, [r2, #456]	; 0x1c8
     5aa:	3301      	adds	r3, #1
     5ac:	f8a2 31c8 	strh.w	r3, [r2, #456]	; 0x1c8
     5b0:	4770      	bx	lr
     5b2:	bf00      	nop
     5b4:	20001248 	.word	0x20001248

000005b8 <gc_unlock>:
    MP_STATE_MEM(gc_lock_depth)--;
     5b8:	4a03      	ldr	r2, [pc, #12]	; (5c8 <gc_unlock+0x10>)
     5ba:	f8b2 31c8 	ldrh.w	r3, [r2, #456]	; 0x1c8
     5be:	3b01      	subs	r3, #1
     5c0:	f8a2 31c8 	strh.w	r3, [r2, #456]	; 0x1c8
     5c4:	4770      	bx	lr
     5c6:	bf00      	nop
     5c8:	20001248 	.word	0x20001248

000005cc <gc_is_locked>:
    return MP_STATE_MEM(gc_lock_depth) != 0;
     5cc:	4b03      	ldr	r3, [pc, #12]	; (5dc <gc_is_locked+0x10>)
     5ce:	f8b3 01c8 	ldrh.w	r0, [r3, #456]	; 0x1c8
}
     5d2:	3000      	adds	r0, #0
     5d4:	bf18      	it	ne
     5d6:	2001      	movne	r0, #1
     5d8:	4770      	bx	lr
     5da:	bf00      	nop
     5dc:	20001248 	.word	0x20001248

000005e0 <gc_collect_start>:
                break;
        }
    }
}

void gc_collect_start(void) {
     5e0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    GC_ENTER();
    MP_STATE_MEM(gc_lock_depth)++;
     5e4:	4b22      	ldr	r3, [pc, #136]	; (670 <gc_collect_start+0x90>)
        void *ptr = ptrs[i];
        if (VERIFY_PTR(ptr)) {
            size_t block = BLOCK_FROM_PTR(ptr);
            if (ATB_GET_KIND(block) == AT_HEAD) {
                // An unmarked head: mark it, and mark all its children
                TRACE_MARK(block, ptr);
     5e6:	f8df a08c 	ldr.w	sl, [pc, #140]	; 674 <gc_collect_start+0x94>
    MP_STATE_MEM(gc_lock_depth)++;
     5ea:	f8b3 21c8 	ldrh.w	r2, [r3, #456]	; 0x1c8
    MP_STATE_MEM(gc_alloc_amount) = 0;
     5ee:	2100      	movs	r1, #0
    MP_STATE_MEM(gc_lock_depth)++;
     5f0:	3201      	adds	r2, #1
     5f2:	461e      	mov	r6, r3
     5f4:	f8a3 21c8 	strh.w	r2, [r3, #456]	; 0x1c8
     5f8:	461c      	mov	r4, r3
     5fa:	f103 07a0 	add.w	r7, r3, #160	; 0xa0
    MP_STATE_MEM(gc_alloc_amount) = 0;
     5fe:	f8c3 11cc 	str.w	r1, [r3, #460]	; 0x1cc
    MP_STATE_MEM(gc_stack_overflow) = 0;
     602:	f8c3 10c4 	str.w	r1, [r3, #196]	; 0xc4
                ATB_HEAD_TO_MARK(block);
     606:	f04f 0903 	mov.w	r9, #3
        void *ptr = ptrs[i];
     60a:	f854 1f04 	ldr.w	r1, [r4, #4]!
        if (VERIFY_PTR(ptr)) {
     60e:	070b      	lsls	r3, r1, #28
     610:	d119      	bne.n	646 <gc_collect_start+0x66>
     612:	f8d6 30bc 	ldr.w	r3, [r6, #188]	; 0xbc
     616:	4299      	cmp	r1, r3
     618:	d315      	bcc.n	646 <gc_collect_start+0x66>
            size_t block = BLOCK_FROM_PTR(ptr);
     61a:	1acb      	subs	r3, r1, r3
     61c:	091d      	lsrs	r5, r3, #4
            if (ATB_GET_KIND(block) == AT_HEAD) {
     61e:	ea4f 1b93 	mov.w	fp, r3, lsr #6
        if (VERIFY_PTR(ptr)) {
     622:	f8d6 30c0 	ldr.w	r3, [r6, #192]	; 0xc0
            if (ATB_GET_KIND(block) == AT_HEAD) {
     626:	f005 0803 	and.w	r8, r5, #3
        if (VERIFY_PTR(ptr)) {
     62a:	4299      	cmp	r1, r3
            if (ATB_GET_KIND(block) == AT_HEAD) {
     62c:	ea4f 0848 	mov.w	r8, r8, lsl #1
        if (VERIFY_PTR(ptr)) {
     630:	d209      	bcs.n	646 <gc_collect_start+0x66>
            if (ATB_GET_KIND(block) == AT_HEAD) {
     632:	f8d6 30b4 	ldr.w	r3, [r6, #180]	; 0xb4
     636:	f813 300b 	ldrb.w	r3, [r3, fp]
     63a:	fa43 f308 	asr.w	r3, r3, r8
     63e:	f003 0303 	and.w	r3, r3, #3
     642:	2b01      	cmp	r3, #1
     644:	d003      	beq.n	64e <gc_collect_start+0x6e>
    for (size_t i = 0; i < len; i++) {
     646:	42a7      	cmp	r7, r4
     648:	d1df      	bne.n	60a <gc_collect_start+0x2a>
}
     64a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
                TRACE_MARK(block, ptr);
     64e:	4650      	mov	r0, sl
     650:	f01c facc 	bl	1cbec <DEBUG_printf>
                ATB_HEAD_TO_MARK(block);
     654:	f8d6 20b4 	ldr.w	r2, [r6, #180]	; 0xb4
     658:	f812 300b 	ldrb.w	r3, [r2, fp]
     65c:	fa09 f808 	lsl.w	r8, r9, r8
     660:	ea43 0808 	orr.w	r8, r3, r8
                gc_mark_subtree(block);
     664:	4628      	mov	r0, r5
                ATB_HEAD_TO_MARK(block);
     666:	f802 800b 	strb.w	r8, [r2, fp]
                gc_mark_subtree(block);
     66a:	f7ff fee7 	bl	43c <gc_mark_subtree>
     66e:	e7ea      	b.n	646 <gc_collect_start+0x66>
     670:	20001248 	.word	0x20001248
     674:	0001f728 	.word	0x0001f728

00000678 <gc_collect_root>:
    for (size_t i = 0; i < len; i++) {
     678:	2900      	cmp	r1, #0
     67a:	d041      	beq.n	700 <gc_collect_root+0x88>
void gc_collect_root(void **ptrs, size_t len) {
     67c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        if (VERIFY_PTR(ptr)) {
     680:	f8df 8080 	ldr.w	r8, [pc, #128]	; 704 <gc_collect_root+0x8c>
                TRACE_MARK(block, ptr);
     684:	f8df a080 	ldr.w	sl, [pc, #128]	; 708 <gc_collect_root+0x90>
void gc_collect_root(void **ptrs, size_t len) {
     688:	b083      	sub	sp, #12
     68a:	460f      	mov	r7, r1
     68c:	1f06      	subs	r6, r0, #4
    for (size_t i = 0; i < len; i++) {
     68e:	2400      	movs	r4, #0
                ATB_HEAD_TO_MARK(block);
     690:	f04f 0903 	mov.w	r9, #3
        void *ptr = ptrs[i];
     694:	f856 1f04 	ldr.w	r1, [r6, #4]!
        if (VERIFY_PTR(ptr)) {
     698:	070b      	lsls	r3, r1, #28
    for (size_t i = 0; i < len; i++) {
     69a:	f104 0401 	add.w	r4, r4, #1
        if (VERIFY_PTR(ptr)) {
     69e:	d118      	bne.n	6d2 <gc_collect_root+0x5a>
     6a0:	f8d8 30bc 	ldr.w	r3, [r8, #188]	; 0xbc
     6a4:	4299      	cmp	r1, r3
     6a6:	d314      	bcc.n	6d2 <gc_collect_root+0x5a>
            size_t block = BLOCK_FROM_PTR(ptr);
     6a8:	1acb      	subs	r3, r1, r3
        if (VERIFY_PTR(ptr)) {
     6aa:	f8d8 20c0 	ldr.w	r2, [r8, #192]	; 0xc0
            size_t block = BLOCK_FROM_PTR(ptr);
     6ae:	091d      	lsrs	r5, r3, #4
            if (ATB_GET_KIND(block) == AT_HEAD) {
     6b0:	ea4f 1b93 	mov.w	fp, r3, lsr #6
        if (VERIFY_PTR(ptr)) {
     6b4:	4291      	cmp	r1, r2
            if (ATB_GET_KIND(block) == AT_HEAD) {
     6b6:	f005 0303 	and.w	r3, r5, #3
     6ba:	ea4f 0343 	mov.w	r3, r3, lsl #1
        if (VERIFY_PTR(ptr)) {
     6be:	d208      	bcs.n	6d2 <gc_collect_root+0x5a>
            if (ATB_GET_KIND(block) == AT_HEAD) {
     6c0:	f8d8 20b4 	ldr.w	r2, [r8, #180]	; 0xb4
     6c4:	f812 200b 	ldrb.w	r2, [r2, fp]
     6c8:	411a      	asrs	r2, r3
     6ca:	f002 0203 	and.w	r2, r2, #3
     6ce:	2a01      	cmp	r2, #1
     6d0:	d004      	beq.n	6dc <gc_collect_root+0x64>
    for (size_t i = 0; i < len; i++) {
     6d2:	42a7      	cmp	r7, r4
     6d4:	d1de      	bne.n	694 <gc_collect_root+0x1c>
            }
        }
    }
}
     6d6:	b003      	add	sp, #12
     6d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                TRACE_MARK(block, ptr);
     6dc:	4650      	mov	r0, sl
     6de:	9301      	str	r3, [sp, #4]
     6e0:	f01c fa84 	bl	1cbec <DEBUG_printf>
                ATB_HEAD_TO_MARK(block);
     6e4:	f8d8 10b4 	ldr.w	r1, [r8, #180]	; 0xb4
     6e8:	9b01      	ldr	r3, [sp, #4]
     6ea:	f811 200b 	ldrb.w	r2, [r1, fp]
     6ee:	fa09 f303 	lsl.w	r3, r9, r3
     6f2:	4313      	orrs	r3, r2
                gc_mark_subtree(block);
     6f4:	4628      	mov	r0, r5
                ATB_HEAD_TO_MARK(block);
     6f6:	f801 300b 	strb.w	r3, [r1, fp]
                gc_mark_subtree(block);
     6fa:	f7ff fe9f 	bl	43c <gc_mark_subtree>
     6fe:	e7e8      	b.n	6d2 <gc_collect_root+0x5a>
     700:	4770      	bx	lr
     702:	bf00      	nop
     704:	20001248 	.word	0x20001248
     708:	0001f728 	.word	0x0001f728

0000070c <gc_collect_end>:

void gc_collect_end(void) {
     70c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
     710:	4e3e      	ldr	r6, [pc, #248]	; (80c <gc_collect_end+0x100>)
     712:	f8d6 00b8 	ldr.w	r0, [r6, #184]	; 0xb8
     716:	f8d6 10c4 	ldr.w	r1, [r6, #196]	; 0xc4
     71a:	0080      	lsls	r0, r0, #2
        MP_STATE_MEM(gc_stack_overflow) = 0;
     71c:	2500      	movs	r5, #0
    while (MP_STATE_MEM(gc_stack_overflow)) {
     71e:	b311      	cbz	r1, 766 <gc_collect_end+0x5a>
        MP_STATE_MEM(gc_stack_overflow) = 0;
     720:	f8c6 50c4 	str.w	r5, [r6, #196]	; 0xc4
        for (size_t block = 0; block < MP_STATE_MEM(gc_alloc_table_byte_len) * BLOCKS_PER_ATB; block++) {
     724:	2800      	cmp	r0, #0
     726:	d04d      	beq.n	7c4 <gc_collect_end+0xb8>
     728:	2400      	movs	r4, #0
     72a:	e002      	b.n	732 <gc_collect_end+0x26>
     72c:	3401      	adds	r4, #1
     72e:	4284      	cmp	r4, r0
     730:	d215      	bcs.n	75e <gc_collect_end+0x52>
            if (ATB_GET_KIND(block) == AT_MARK) {
     732:	08a2      	lsrs	r2, r4, #2
     734:	f8d6 10b4 	ldr.w	r1, [r6, #180]	; 0xb4
     738:	f004 0303 	and.w	r3, r4, #3
     73c:	5c8a      	ldrb	r2, [r1, r2]
     73e:	005b      	lsls	r3, r3, #1
     740:	fa42 f303 	asr.w	r3, r2, r3
     744:	f003 0303 	and.w	r3, r3, #3
     748:	2b03      	cmp	r3, #3
     74a:	d1ef      	bne.n	72c <gc_collect_end+0x20>
                gc_mark_subtree(block);
     74c:	4620      	mov	r0, r4
     74e:	f7ff fe75 	bl	43c <gc_mark_subtree>
     752:	f8d6 00b8 	ldr.w	r0, [r6, #184]	; 0xb8
        for (size_t block = 0; block < MP_STATE_MEM(gc_alloc_table_byte_len) * BLOCKS_PER_ATB; block++) {
     756:	3401      	adds	r4, #1
     758:	0080      	lsls	r0, r0, #2
     75a:	4284      	cmp	r4, r0
     75c:	d3e9      	bcc.n	732 <gc_collect_end+0x26>
     75e:	f8d6 10c4 	ldr.w	r1, [r6, #196]	; 0xc4
    while (MP_STATE_MEM(gc_stack_overflow)) {
     762:	2900      	cmp	r1, #0
     764:	d1dc      	bne.n	720 <gc_collect_end+0x14>
    for (size_t block = 0; block < MP_STATE_MEM(gc_alloc_table_byte_len) * BLOCKS_PER_ATB; block++) {
     766:	b368      	cbz	r0, 7c4 <gc_collect_end+0xb8>
                DEBUG_printf("gc_sweep(%p)\n", PTR_FROM_BLOCK(block));
     768:	4f29      	ldr	r7, [pc, #164]	; (810 <gc_collect_end+0x104>)
    for (size_t block = 0; block < MP_STATE_MEM(gc_alloc_table_byte_len) * BLOCKS_PER_ATB; block++) {
     76a:	4688      	mov	r8, r1
                    ATB_ANY_TO_FREE(block);
     76c:	2503      	movs	r5, #3
     76e:	e007      	b.n	780 <gc_collect_end+0x74>
        switch (ATB_GET_KIND(block)) {
     770:	2b03      	cmp	r3, #3
     772:	d03f      	beq.n	7f4 <gc_collect_end+0xe8>
     774:	2b01      	cmp	r3, #1
     776:	d02f      	beq.n	7d8 <gc_collect_end+0xcc>
    for (size_t block = 0; block < MP_STATE_MEM(gc_alloc_table_byte_len) * BLOCKS_PER_ATB; block++) {
     778:	f108 0801 	add.w	r8, r8, #1
     77c:	4580      	cmp	r8, r0
     77e:	d221      	bcs.n	7c4 <gc_collect_end+0xb8>
        switch (ATB_GET_KIND(block)) {
     780:	ea4f 0998 	mov.w	r9, r8, lsr #2
     784:	f8d6 20b4 	ldr.w	r2, [r6, #180]	; 0xb4
     788:	f008 0403 	and.w	r4, r8, #3
     78c:	f812 e009 	ldrb.w	lr, [r2, r9]
     790:	0064      	lsls	r4, r4, #1
     792:	fa4e f304 	asr.w	r3, lr, r4
     796:	f003 0303 	and.w	r3, r3, #3
     79a:	2b02      	cmp	r3, #2
     79c:	eb02 0c09 	add.w	ip, r2, r9
     7a0:	d1e6      	bne.n	770 <gc_collect_end+0x64>
                if (free_tail) {
     7a2:	2900      	cmp	r1, #0
     7a4:	d0e8      	beq.n	778 <gc_collect_end+0x6c>
                    ATB_ANY_TO_FREE(block);
     7a6:	fa05 f404 	lsl.w	r4, r5, r4
     7aa:	ea2e 0e04 	bic.w	lr, lr, r4
     7ae:	f88c e000 	strb.w	lr, [ip]
     7b2:	f8d6 00b8 	ldr.w	r0, [r6, #184]	; 0xb8
    for (size_t block = 0; block < MP_STATE_MEM(gc_alloc_table_byte_len) * BLOCKS_PER_ATB; block++) {
     7b6:	f108 0801 	add.w	r8, r8, #1
     7ba:	0080      	lsls	r0, r0, #2
     7bc:	4580      	cmp	r8, r0
                    ATB_ANY_TO_FREE(block);
     7be:	f04f 0101 	mov.w	r1, #1
    for (size_t block = 0; block < MP_STATE_MEM(gc_alloc_table_byte_len) * BLOCKS_PER_ATB; block++) {
     7c2:	d3dd      	bcc.n	780 <gc_collect_end+0x74>
    gc_deal_with_stack_overflow();
    gc_sweep();
    MP_STATE_MEM(gc_last_free_atb_index) = 0;
    MP_STATE_MEM(gc_lock_depth)--;
     7c4:	f8b6 31c8 	ldrh.w	r3, [r6, #456]	; 0x1c8
    MP_STATE_MEM(gc_last_free_atb_index) = 0;
     7c8:	2200      	movs	r2, #0
    MP_STATE_MEM(gc_lock_depth)--;
     7ca:	3b01      	subs	r3, #1
     7cc:	f8a6 31c8 	strh.w	r3, [r6, #456]	; 0x1c8
    MP_STATE_MEM(gc_last_free_atb_index) = 0;
     7d0:	f8c6 21d4 	str.w	r2, [r6, #468]	; 0x1d4
    GC_EXIT();
}
     7d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
                DEBUG_printf("gc_sweep(%p)\n", PTR_FROM_BLOCK(block));
     7d8:	f8d6 10bc 	ldr.w	r1, [r6, #188]	; 0xbc
     7dc:	4638      	mov	r0, r7
     7de:	eb01 1108 	add.w	r1, r1, r8, lsl #4
     7e2:	f01c fa03 	bl	1cbec <DEBUG_printf>
     7e6:	f8d6 30b4 	ldr.w	r3, [r6, #180]	; 0xb4
     7ea:	eb03 0c09 	add.w	ip, r3, r9
     7ee:	f813 e009 	ldrb.w	lr, [r3, r9]
     7f2:	e7d8      	b.n	7a6 <gc_collect_end+0x9a>
                ATB_MARK_TO_HEAD(block);
     7f4:	2302      	movs	r3, #2
     7f6:	fa03 f404 	lsl.w	r4, r3, r4
     7fa:	ea2e 0e04 	bic.w	lr, lr, r4
     7fe:	f802 e009 	strb.w	lr, [r2, r9]
     802:	f8d6 00b8 	ldr.w	r0, [r6, #184]	; 0xb8
                free_tail = 0;
     806:	2100      	movs	r1, #0
     808:	4098      	lsls	r0, r3
     80a:	e7b5      	b.n	778 <gc_collect_end+0x6c>
     80c:	20001248 	.word	0x20001248
     810:	0001f7d0 	.word	0x0001f7d0

00000814 <gc_sweep_all>:

void gc_sweep_all(void) {
    GC_ENTER();
    MP_STATE_MEM(gc_lock_depth)++;
     814:	4b05      	ldr	r3, [pc, #20]	; (82c <gc_sweep_all+0x18>)
     816:	f8b3 21c8 	ldrh.w	r2, [r3, #456]	; 0x1c8
    MP_STATE_MEM(gc_stack_overflow) = 0;
     81a:	2100      	movs	r1, #0
    MP_STATE_MEM(gc_lock_depth)++;
     81c:	3201      	adds	r2, #1
     81e:	f8a3 21c8 	strh.w	r2, [r3, #456]	; 0x1c8
    MP_STATE_MEM(gc_stack_overflow) = 0;
     822:	f8c3 10c4 	str.w	r1, [r3, #196]	; 0xc4
    gc_collect_end();
     826:	f7ff bf71 	b.w	70c <gc_collect_end>
     82a:	bf00      	nop
     82c:	20001248 	.word	0x20001248

00000830 <gc_info>:
}

void gc_info(gc_info_t *info) {
    GC_ENTER();
    info->total = MP_STATE_MEM(gc_pool_end) - MP_STATE_MEM(gc_pool_start);
     830:	4b3d      	ldr	r3, [pc, #244]	; (928 <gc_info+0xf8>)
     832:	f8d3 10bc 	ldr.w	r1, [r3, #188]	; 0xbc
     836:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
void gc_info(gc_info_t *info) {
     83a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
                // shouldn't happen
                break;
        }

        block++;
        finish = (block == MP_STATE_MEM(gc_alloc_table_byte_len) * BLOCKS_PER_ATB);
     83e:	f8d3 60b8 	ldr.w	r6, [r3, #184]	; 0xb8
     842:	f8d3 70b4 	ldr.w	r7, [r3, #180]	; 0xb4
    info->total = MP_STATE_MEM(gc_pool_end) - MP_STATE_MEM(gc_pool_start);
     846:	1a52      	subs	r2, r2, r1
    info->used = 0;
     848:	2300      	movs	r3, #0
    info->total = MP_STATE_MEM(gc_pool_end) - MP_STATE_MEM(gc_pool_start);
     84a:	6002      	str	r2, [r0, #0]
        finish = (block == MP_STATE_MEM(gc_alloc_table_byte_len) * BLOCKS_PER_ATB);
     84c:	461d      	mov	r5, r3
     84e:	00b6      	lsls	r6, r6, #2
    info->used = 0;
     850:	6043      	str	r3, [r0, #4]
    info->free = 0;
     852:	6083      	str	r3, [r0, #8]
    info->max_free = 0;
     854:	60c3      	str	r3, [r0, #12]
    info->num_1block = 0;
     856:	6103      	str	r3, [r0, #16]
    info->num_2block = 0;
     858:	6143      	str	r3, [r0, #20]
    info->max_block = 0;
     85a:	6183      	str	r3, [r0, #24]
        finish = (block == MP_STATE_MEM(gc_alloc_table_byte_len) * BLOCKS_PER_ATB);
     85c:	469c      	mov	ip, r3
    for (size_t block = 0, len = 0, len_free = 0; !finish;) {
     85e:	469e      	mov	lr, r3
     860:	461c      	mov	r4, r3
     862:	461a      	mov	r2, r3
     864:	4699      	mov	r9, r3
     866:	4619      	mov	r1, r3
     868:	4698      	mov	r8, r3
        size_t kind = ATB_GET_KIND(block);
     86a:	f817 3009 	ldrb.w	r3, [r7, r9]
     86e:	0049      	lsls	r1, r1, #1
     870:	410b      	asrs	r3, r1
     872:	f003 0303 	and.w	r3, r3, #3
        switch (kind) {
     876:	2b01      	cmp	r3, #1
     878:	d030      	beq.n	8dc <gc_info+0xac>
     87a:	d327      	bcc.n	8cc <gc_info+0x9c>
     87c:	2b02      	cmp	r3, #2
     87e:	d102      	bne.n	886 <gc_info+0x56>
                info->used += 1;
     880:	3501      	adds	r5, #1
     882:	6045      	str	r5, [r0, #4]
                len += 1;
     884:	3401      	adds	r4, #1
        block++;
     886:	3201      	adds	r2, #1
        // Get next block type if possible
        if (!finish) {
     888:	42b2      	cmp	r2, r6
     88a:	d00e      	beq.n	8aa <gc_info+0x7a>
            kind = ATB_GET_KIND(block);
     88c:	ea4f 0992 	mov.w	r9, r2, lsr #2
     890:	f002 0103 	and.w	r1, r2, #3
     894:	f817 3009 	ldrb.w	r3, [r7, r9]
     898:	ea4f 0a41 	mov.w	sl, r1, lsl #1
     89c:	fa43 f30a 	asr.w	r3, r3, sl
        }

        if (finish || kind == AT_FREE || kind == AT_HEAD) {
     8a0:	f013 0303 	ands.w	r3, r3, #3
     8a4:	d001      	beq.n	8aa <gc_info+0x7a>
     8a6:	2b01      	cmp	r3, #1
     8a8:	d1df      	bne.n	86a <gc_info+0x3a>
            if (len == 1) {
     8aa:	2c01      	cmp	r4, #1
     8ac:	d01a      	beq.n	8e4 <gc_info+0xb4>
                info->num_1block += 1;
            } else if (len == 2) {
     8ae:	2c02      	cmp	r4, #2
     8b0:	d02b      	beq.n	90a <gc_info+0xda>
                info->num_2block += 1;
            }
            if (len > info->max_block) {
     8b2:	6981      	ldr	r1, [r0, #24]
     8b4:	428c      	cmp	r4, r1
                info->max_block = len;
     8b6:	bf88      	it	hi
     8b8:	6184      	strhi	r4, [r0, #24]
            }
            if (finish || kind == AT_HEAD) {
     8ba:	42b2      	cmp	r2, r6
     8bc:	d01b      	beq.n	8f6 <gc_info+0xc6>
     8be:	2b01      	cmp	r3, #1
     8c0:	d027      	beq.n	912 <gc_info+0xe2>
     8c2:	ea4f 0992 	mov.w	r9, r2, lsr #2
     8c6:	f002 0103 	and.w	r1, r2, #3
     8ca:	e7ce      	b.n	86a <gc_info+0x3a>
                info->free += 1;
     8cc:	f10c 0c01 	add.w	ip, ip, #1
     8d0:	f8c0 c008 	str.w	ip, [r0, #8]
                len_free += 1;
     8d4:	f10e 0e01 	add.w	lr, lr, #1
                len = 0;
     8d8:	461c      	mov	r4, r3
                break;
     8da:	e7d4      	b.n	886 <gc_info+0x56>
                info->used += 1;
     8dc:	3501      	adds	r5, #1
     8de:	6045      	str	r5, [r0, #4]
                len = 1;
     8e0:	461c      	mov	r4, r3
                break;
     8e2:	e7d0      	b.n	886 <gc_info+0x56>
                info->num_1block += 1;
     8e4:	6901      	ldr	r1, [r0, #16]
     8e6:	3101      	adds	r1, #1
     8e8:	6101      	str	r1, [r0, #16]
            if (len > info->max_block) {
     8ea:	6981      	ldr	r1, [r0, #24]
     8ec:	428c      	cmp	r4, r1
                info->max_block = len;
     8ee:	bf88      	it	hi
     8f0:	6184      	strhi	r4, [r0, #24]
            if (finish || kind == AT_HEAD) {
     8f2:	42b2      	cmp	r2, r6
     8f4:	d1e3      	bne.n	8be <gc_info+0x8e>
                if (len_free > info->max_free) {
     8f6:	45c6      	cmp	lr, r8
     8f8:	d90e      	bls.n	918 <gc_info+0xe8>
    for (size_t block = 0, len = 0, len_free = 0; !finish;) {
     8fa:	42b2      	cmp	r2, r6
                    info->max_free = len_free;
     8fc:	f8c0 e00c 	str.w	lr, [r0, #12]
    for (size_t block = 0, len = 0, len_free = 0; !finish;) {
     900:	d00a      	beq.n	918 <gc_info+0xe8>
     902:	46f0      	mov	r8, lr
                }
                len_free = 0;
     904:	f04f 0e00 	mov.w	lr, #0
     908:	e7db      	b.n	8c2 <gc_info+0x92>
                info->num_2block += 1;
     90a:	6941      	ldr	r1, [r0, #20]
     90c:	3101      	adds	r1, #1
     90e:	6141      	str	r1, [r0, #20]
     910:	e7cf      	b.n	8b2 <gc_info+0x82>
                if (len_free > info->max_free) {
     912:	45f0      	cmp	r8, lr
     914:	d2f6      	bcs.n	904 <gc_info+0xd4>
     916:	e7f0      	b.n	8fa <gc_info+0xca>
            }
        }
    }

    info->used *= BYTES_PER_BLOCK;
     918:	012d      	lsls	r5, r5, #4
    info->free *= BYTES_PER_BLOCK;
     91a:	ea4f 130c 	mov.w	r3, ip, lsl #4
    info->used *= BYTES_PER_BLOCK;
     91e:	6045      	str	r5, [r0, #4]
    info->free *= BYTES_PER_BLOCK;
     920:	6083      	str	r3, [r0, #8]
    GC_EXIT();
}
     922:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     926:	bf00      	nop
     928:	20001248 	.word	0x20001248

0000092c <gc_alloc>:

void *gc_alloc(size_t n_bytes, bool has_finaliser) {
     92c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    size_t n_blocks = ((n_bytes + BYTES_PER_BLOCK - 1) & (~(BYTES_PER_BLOCK - 1))) / BYTES_PER_BLOCK;
     930:	f100 040f 	add.w	r4, r0, #15
     934:	0924      	lsrs	r4, r4, #4
void *gc_alloc(size_t n_bytes, bool has_finaliser) {
     936:	4607      	mov	r7, r0
    DEBUG_printf("gc_alloc(" UINT_FMT " bytes -> " UINT_FMT " blocks)\n", n_bytes, n_blocks);
     938:	4601      	mov	r1, r0
     93a:	4622      	mov	r2, r4
     93c:	4865      	ldr	r0, [pc, #404]	; (ad4 <gc_alloc+0x1a8>)
     93e:	f01c f955 	bl	1cbec <DEBUG_printf>

    // check for 0 allocation
    if (n_blocks == 0) {
     942:	2c00      	cmp	r4, #0
     944:	d05e      	beq.n	a04 <gc_alloc+0xd8>
    }

    GC_ENTER();

    // check if GC is locked
    if (MP_STATE_MEM(gc_lock_depth) > 0) {
     946:	4d64      	ldr	r5, [pc, #400]	; (ad8 <gc_alloc+0x1ac>)
     948:	f8b5 31c8 	ldrh.w	r3, [r5, #456]	; 0x1c8
     94c:	2b00      	cmp	r3, #0
     94e:	d159      	bne.n	a04 <gc_alloc+0xd8>

    size_t i;
    size_t end_block;
    size_t start_block;
    size_t n_free;
    int collected = !MP_STATE_MEM(gc_auto_collect_enabled);
     950:	f8b5 31ca 	ldrh.w	r3, [r5, #458]	; 0x1ca
     954:	2b00      	cmp	r3, #0
     956:	bf0c      	ite	eq
     958:	f04f 0c01 	moveq.w	ip, #1
     95c:	f04f 0c00 	movne.w	ip, #0

    #if MICROPY_GC_ALLOC_THRESHOLD
    if (!collected && MP_STATE_MEM(gc_alloc_amount) >= MP_STATE_MEM(gc_alloc_threshold)) {
     960:	d155      	bne.n	a0e <gc_alloc+0xe2>

    for (;;) {

        // look for a run of n_blocks available blocks
        n_free = 0;
        for (i = MP_STATE_MEM(gc_last_free_atb_index); i < MP_STATE_MEM(gc_alloc_table_byte_len); i++) {
     962:	f8d5 11d4 	ldr.w	r1, [r5, #468]	; 0x1d4
     966:	f8d5 60b8 	ldr.w	r6, [r5, #184]	; 0xb8
     96a:	42b1      	cmp	r1, r6
     96c:	d239      	bcs.n	9e2 <gc_alloc+0xb6>
     96e:	f8d5 e0b4 	ldr.w	lr, [r5, #180]	; 0xb4
        collected = 1;
     972:	2300      	movs	r3, #0
     974:	eb0e 0001 	add.w	r0, lr, r1
     978:	e01a      	b.n	9b0 <gc_alloc+0x84>
            byte a = MP_STATE_MEM(gc_alloc_table_start)[i];
            if (ATB_0_IS_FREE(a)) { if (++n_free >= n_blocks) { i = i * BLOCKS_PER_ATB + 0; goto found; } } else { n_free = 0; }
     97a:	3301      	adds	r3, #1
     97c:	429c      	cmp	r4, r3
     97e:	d958      	bls.n	a32 <gc_alloc+0x106>
            if (ATB_1_IS_FREE(a)) { if (++n_free >= n_blocks) { i = i * BLOCKS_PER_ATB + 1; goto found; } } else { n_free = 0; }
     980:	f012 0f0c 	tst.w	r2, #12
     984:	d11e      	bne.n	9c4 <gc_alloc+0x98>
     986:	3301      	adds	r3, #1
     988:	429c      	cmp	r4, r3
     98a:	f240 809a 	bls.w	ac2 <gc_alloc+0x196>
            if (ATB_2_IS_FREE(a)) { if (++n_free >= n_blocks) { i = i * BLOCKS_PER_ATB + 2; goto found; } } else { n_free = 0; }
     98e:	f012 0f30 	tst.w	r2, #48	; 0x30
     992:	d11c      	bne.n	9ce <gc_alloc+0xa2>
     994:	3301      	adds	r3, #1
     996:	429c      	cmp	r4, r3
     998:	f240 8096 	bls.w	ac8 <gc_alloc+0x19c>
            if (ATB_3_IS_FREE(a)) { if (++n_free >= n_blocks) { i = i * BLOCKS_PER_ATB + 3; goto found; } } else { n_free = 0; }
     99c:	f012 0fc0 	tst.w	r2, #192	; 0xc0
     9a0:	d11a      	bne.n	9d8 <gc_alloc+0xac>
     9a2:	3301      	adds	r3, #1
     9a4:	429c      	cmp	r4, r3
     9a6:	f240 8092 	bls.w	ace <gc_alloc+0x1a2>
        for (i = MP_STATE_MEM(gc_last_free_atb_index); i < MP_STATE_MEM(gc_alloc_table_byte_len); i++) {
     9aa:	3101      	adds	r1, #1
     9ac:	42b1      	cmp	r1, r6
     9ae:	d218      	bcs.n	9e2 <gc_alloc+0xb6>
            byte a = MP_STATE_MEM(gc_alloc_table_start)[i];
     9b0:	f810 2b01 	ldrb.w	r2, [r0], #1
            if (ATB_0_IS_FREE(a)) { if (++n_free >= n_blocks) { i = i * BLOCKS_PER_ATB + 0; goto found; } } else { n_free = 0; }
     9b4:	f012 0f03 	tst.w	r2, #3
     9b8:	d0df      	beq.n	97a <gc_alloc+0x4e>
            if (ATB_1_IS_FREE(a)) { if (++n_free >= n_blocks) { i = i * BLOCKS_PER_ATB + 1; goto found; } } else { n_free = 0; }
     9ba:	f012 0f0c 	tst.w	r2, #12
            if (ATB_0_IS_FREE(a)) { if (++n_free >= n_blocks) { i = i * BLOCKS_PER_ATB + 0; goto found; } } else { n_free = 0; }
     9be:	f04f 0300 	mov.w	r3, #0
            if (ATB_1_IS_FREE(a)) { if (++n_free >= n_blocks) { i = i * BLOCKS_PER_ATB + 1; goto found; } } else { n_free = 0; }
     9c2:	d0e0      	beq.n	986 <gc_alloc+0x5a>
            if (ATB_2_IS_FREE(a)) { if (++n_free >= n_blocks) { i = i * BLOCKS_PER_ATB + 2; goto found; } } else { n_free = 0; }
     9c4:	f012 0f30 	tst.w	r2, #48	; 0x30
            if (ATB_1_IS_FREE(a)) { if (++n_free >= n_blocks) { i = i * BLOCKS_PER_ATB + 1; goto found; } } else { n_free = 0; }
     9c8:	f04f 0300 	mov.w	r3, #0
            if (ATB_2_IS_FREE(a)) { if (++n_free >= n_blocks) { i = i * BLOCKS_PER_ATB + 2; goto found; } } else { n_free = 0; }
     9cc:	d0e2      	beq.n	994 <gc_alloc+0x68>
            if (ATB_3_IS_FREE(a)) { if (++n_free >= n_blocks) { i = i * BLOCKS_PER_ATB + 3; goto found; } } else { n_free = 0; }
     9ce:	f012 0fc0 	tst.w	r2, #192	; 0xc0
            if (ATB_2_IS_FREE(a)) { if (++n_free >= n_blocks) { i = i * BLOCKS_PER_ATB + 2; goto found; } } else { n_free = 0; }
     9d2:	f04f 0300 	mov.w	r3, #0
            if (ATB_3_IS_FREE(a)) { if (++n_free >= n_blocks) { i = i * BLOCKS_PER_ATB + 3; goto found; } } else { n_free = 0; }
     9d6:	d0e4      	beq.n	9a2 <gc_alloc+0x76>
        for (i = MP_STATE_MEM(gc_last_free_atb_index); i < MP_STATE_MEM(gc_alloc_table_byte_len); i++) {
     9d8:	3101      	adds	r1, #1
     9da:	42b1      	cmp	r1, r6
            if (ATB_3_IS_FREE(a)) { if (++n_free >= n_blocks) { i = i * BLOCKS_PER_ATB + 3; goto found; } } else { n_free = 0; }
     9dc:	f04f 0300 	mov.w	r3, #0
        for (i = MP_STATE_MEM(gc_last_free_atb_index); i < MP_STATE_MEM(gc_alloc_table_byte_len); i++) {
     9e0:	d3e6      	bcc.n	9b0 <gc_alloc+0x84>
        }

        GC_EXIT();
        // nothing found!
        if (collected) {
     9e2:	f1bc 0f00 	cmp.w	ip, #0
     9e6:	d10d      	bne.n	a04 <gc_alloc+0xd8>
            return NULL;
        }
        DEBUG_printf("gc_alloc(" UINT_FMT "): no free mem, triggering GC\n", n_bytes);
     9e8:	4639      	mov	r1, r7
     9ea:	483c      	ldr	r0, [pc, #240]	; (adc <gc_alloc+0x1b0>)
     9ec:	f01c f8fe 	bl	1cbec <DEBUG_printf>
        gc_collect();
     9f0:	f01c fa30 	bl	1ce54 <gc_collect>
        for (i = MP_STATE_MEM(gc_last_free_atb_index); i < MP_STATE_MEM(gc_alloc_table_byte_len); i++) {
     9f4:	f8d5 11d4 	ldr.w	r1, [r5, #468]	; 0x1d4
     9f8:	f8d5 60b8 	ldr.w	r6, [r5, #184]	; 0xb8
     9fc:	428e      	cmp	r6, r1
        collected = 1;
     9fe:	f04f 0c01 	mov.w	ip, #1
        for (i = MP_STATE_MEM(gc_last_free_atb_index); i < MP_STATE_MEM(gc_alloc_table_byte_len); i++) {
     a02:	d8b4      	bhi.n	96e <gc_alloc+0x42>
        return NULL;
     a04:	f04f 0800 	mov.w	r8, #0
    #if EXTENSIVE_HEAP_PROFILING
    gc_dump_alloc_table();
    #endif

    return ret_ptr;
}
     a08:	4640      	mov	r0, r8
     a0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (!collected && MP_STATE_MEM(gc_alloc_amount) >= MP_STATE_MEM(gc_alloc_threshold)) {
     a0e:	f8d5 21cc 	ldr.w	r2, [r5, #460]	; 0x1cc
     a12:	f8d5 31d0 	ldr.w	r3, [r5, #464]	; 0x1d0
     a16:	429a      	cmp	r2, r3
     a18:	d3a3      	bcc.n	962 <gc_alloc+0x36>
        gc_collect();
     a1a:	f01c fa1b 	bl	1ce54 <gc_collect>
        for (i = MP_STATE_MEM(gc_last_free_atb_index); i < MP_STATE_MEM(gc_alloc_table_byte_len); i++) {
     a1e:	f8d5 11d4 	ldr.w	r1, [r5, #468]	; 0x1d4
     a22:	f8d5 60b8 	ldr.w	r6, [r5, #184]	; 0xb8
     a26:	428e      	cmp	r6, r1
        collected = 1;
     a28:	bf88      	it	hi
     a2a:	f04f 0c01 	movhi.w	ip, #1
        for (i = MP_STATE_MEM(gc_last_free_atb_index); i < MP_STATE_MEM(gc_alloc_table_byte_len); i++) {
     a2e:	d89e      	bhi.n	96e <gc_alloc+0x42>
     a30:	e7e8      	b.n	a04 <gc_alloc+0xd8>
            if (ATB_0_IS_FREE(a)) { if (++n_free >= n_blocks) { i = i * BLOCKS_PER_ATB + 0; goto found; } } else { n_free = 0; }
     a32:	0089      	lsls	r1, r1, #2
    start_block = i - n_free + 1;
     a34:	1aca      	subs	r2, r1, r3
    if (n_free == 1) {
     a36:	2b01      	cmp	r3, #1
    start_block = i - n_free + 1;
     a38:	f102 0601 	add.w	r6, r2, #1
        MP_STATE_MEM(gc_last_free_atb_index) = (i + 1) / BLOCKS_PER_ATB;
     a3c:	f101 0701 	add.w	r7, r1, #1
     a40:	bf08      	it	eq
     a42:	08bb      	lsreq	r3, r7, #2
    ATB_FREE_TO_HEAD(start_block);
     a44:	ea4f 0096 	mov.w	r0, r6, lsr #2
        MP_STATE_MEM(gc_last_free_atb_index) = (i + 1) / BLOCKS_PER_ATB;
     a48:	bf08      	it	eq
     a4a:	f8c5 31d4 	streq.w	r3, [r5, #468]	; 0x1d4
    ATB_FREE_TO_HEAD(start_block);
     a4e:	f006 0303 	and.w	r3, r6, #3
     a52:	f81e 8000 	ldrb.w	r8, [lr, r0]
     a56:	ea4f 0c43 	mov.w	ip, r3, lsl #1
     a5a:	2301      	movs	r3, #1
     a5c:	fa03 f30c 	lsl.w	r3, r3, ip
    for (size_t bl = start_block + 1; bl <= end_block; bl++) {
     a60:	3202      	adds	r2, #2
    ATB_FREE_TO_HEAD(start_block);
     a62:	ea43 0308 	orr.w	r3, r3, r8
    for (size_t bl = start_block + 1; bl <= end_block; bl++) {
     a66:	4291      	cmp	r1, r2
    ATB_FREE_TO_HEAD(start_block);
     a68:	f80e 3000 	strb.w	r3, [lr, r0]
        ATB_FREE_TO_TAIL(bl);
     a6c:	bf28      	it	cs
     a6e:	f04f 0802 	movcs.w	r8, #2
    for (size_t bl = start_block + 1; bl <= end_block; bl++) {
     a72:	d310      	bcc.n	a96 <gc_alloc+0x16a>
        ATB_FREE_TO_TAIL(bl);
     a74:	0890      	lsrs	r0, r2, #2
     a76:	f8d5 e0b4 	ldr.w	lr, [r5, #180]	; 0xb4
     a7a:	f002 0303 	and.w	r3, r2, #3
     a7e:	f81e c000 	ldrb.w	ip, [lr, r0]
     a82:	005b      	lsls	r3, r3, #1
     a84:	fa08 f303 	lsl.w	r3, r8, r3
    for (size_t bl = start_block + 1; bl <= end_block; bl++) {
     a88:	3201      	adds	r2, #1
        ATB_FREE_TO_TAIL(bl);
     a8a:	ea43 030c 	orr.w	r3, r3, ip
    for (size_t bl = start_block + 1; bl <= end_block; bl++) {
     a8e:	4291      	cmp	r1, r2
        ATB_FREE_TO_TAIL(bl);
     a90:	f80e 3000 	strb.w	r3, [lr, r0]
    for (size_t bl = start_block + 1; bl <= end_block; bl++) {
     a94:	d2ee      	bcs.n	a74 <gc_alloc+0x148>
    void *ret_ptr = (void*)(MP_STATE_MEM(gc_pool_start) + start_block * BYTES_PER_BLOCK);
     a96:	f8d5 30bc 	ldr.w	r3, [r5, #188]	; 0xbc
    DEBUG_printf("gc_alloc(%p)\n", ret_ptr);
     a9a:	4811      	ldr	r0, [pc, #68]	; (ae0 <gc_alloc+0x1b4>)
    void *ret_ptr = (void*)(MP_STATE_MEM(gc_pool_start) + start_block * BYTES_PER_BLOCK);
     a9c:	eb03 1806 	add.w	r8, r3, r6, lsl #4
    DEBUG_printf("gc_alloc(%p)\n", ret_ptr);
     aa0:	4641      	mov	r1, r8
     aa2:	f01c f8a3 	bl	1cbec <DEBUG_printf>
    MP_STATE_MEM(gc_alloc_amount) += n_blocks;
     aa6:	f8d5 31cc 	ldr.w	r3, [r5, #460]	; 0x1cc
    memset((byte*)ret_ptr, 0, (end_block - start_block + 1) * BYTES_PER_BLOCK);
     aaa:	1bba      	subs	r2, r7, r6
    MP_STATE_MEM(gc_alloc_amount) += n_blocks;
     aac:	441c      	add	r4, r3
    memset((byte*)ret_ptr, 0, (end_block - start_block + 1) * BYTES_PER_BLOCK);
     aae:	0112      	lsls	r2, r2, #4
     ab0:	4640      	mov	r0, r8
     ab2:	2100      	movs	r1, #0
    MP_STATE_MEM(gc_alloc_amount) += n_blocks;
     ab4:	f8c5 41cc 	str.w	r4, [r5, #460]	; 0x1cc
    memset((byte*)ret_ptr, 0, (end_block - start_block + 1) * BYTES_PER_BLOCK);
     ab8:	f01d fdd4 	bl	1e664 <memset>
}
     abc:	4640      	mov	r0, r8
     abe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            if (ATB_1_IS_FREE(a)) { if (++n_free >= n_blocks) { i = i * BLOCKS_PER_ATB + 1; goto found; } } else { n_free = 0; }
     ac2:	0089      	lsls	r1, r1, #2
     ac4:	3101      	adds	r1, #1
     ac6:	e7b5      	b.n	a34 <gc_alloc+0x108>
            if (ATB_2_IS_FREE(a)) { if (++n_free >= n_blocks) { i = i * BLOCKS_PER_ATB + 2; goto found; } } else { n_free = 0; }
     ac8:	0089      	lsls	r1, r1, #2
     aca:	3102      	adds	r1, #2
     acc:	e7b2      	b.n	a34 <gc_alloc+0x108>
            if (ATB_3_IS_FREE(a)) { if (++n_free >= n_blocks) { i = i * BLOCKS_PER_ATB + 3; goto found; } } else { n_free = 0; }
     ace:	0089      	lsls	r1, r1, #2
     ad0:	3103      	adds	r1, #3
     ad2:	e7af      	b.n	a34 <gc_alloc+0x108>
     ad4:	0001f7e0 	.word	0x0001f7e0
     ad8:	20001248 	.word	0x20001248
     adc:	0001f804 	.word	0x0001f804
     ae0:	0001f830 	.word	0x0001f830

00000ae4 <gc_free>:
}
*/

// force the freeing of a piece of memory
// TODO: freeing here does not call finaliser
void gc_free(void *ptr) {
     ae4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    GC_ENTER();
    if (MP_STATE_MEM(gc_lock_depth) > 0) {
     ae6:	4c28      	ldr	r4, [pc, #160]	; (b88 <gc_free+0xa4>)
     ae8:	f8b4 31c8 	ldrh.w	r3, [r4, #456]	; 0x1c8
     aec:	b103      	cbz	r3, af0 <gc_free+0xc>
     aee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     af0:	4605      	mov	r5, r0
        // TODO how to deal with this error?
        GC_EXIT();
        return;
    }

    DEBUG_printf("gc_free(%p)\n", ptr);
     af2:	4601      	mov	r1, r0
     af4:	4825      	ldr	r0, [pc, #148]	; (b8c <gc_free+0xa8>)
     af6:	f01c f879 	bl	1cbec <DEBUG_printf>

    if (ptr == NULL) {
     afa:	2d00      	cmp	r5, #0
     afc:	d0f7      	beq.n	aee <gc_free+0xa>
        GC_EXIT();
    } else {
        // get the GC block number corresponding to this pointer
        assert(VERIFY_PTR(ptr));
     afe:	072b      	lsls	r3, r5, #28
     b00:	d133      	bne.n	b6a <gc_free+0x86>
     b02:	f8d4 00bc 	ldr.w	r0, [r4, #188]	; 0xbc
     b06:	4285      	cmp	r5, r0
     b08:	d32f      	bcc.n	b6a <gc_free+0x86>
     b0a:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
     b0e:	429d      	cmp	r5, r3
     b10:	d22b      	bcs.n	b6a <gc_free+0x86>
        size_t block = BLOCK_FROM_PTR(ptr);
     b12:	1a28      	subs	r0, r5, r0
        assert(ATB_GET_KIND(block) == AT_HEAD);
     b14:	0981      	lsrs	r1, r0, #6
     b16:	f8d4 60b4 	ldr.w	r6, [r4, #180]	; 0xb4
        size_t block = BLOCK_FROM_PTR(ptr);
     b1a:	0900      	lsrs	r0, r0, #4
        assert(ATB_GET_KIND(block) == AT_HEAD);
     b1c:	f000 0303 	and.w	r3, r0, #3
     b20:	5c72      	ldrb	r2, [r6, r1]
     b22:	005d      	lsls	r5, r3, #1
     b24:	412a      	asrs	r2, r5
     b26:	f002 0203 	and.w	r2, r2, #3
     b2a:	2a01      	cmp	r2, #1
     b2c:	d124      	bne.n	b78 <gc_free+0x94>
        #if MICROPY_ENABLE_FINALISER
        FTB_CLEAR(block);
        #endif

        // set the last_free pointer to this block if it's earlier in the heap
        if (block / BLOCKS_PER_ATB < MP_STATE_MEM(gc_last_free_atb_index)) {
     b2e:	f8d4 21d4 	ldr.w	r2, [r4, #468]	; 0x1d4
     b32:	4291      	cmp	r1, r2
            MP_STATE_MEM(gc_last_free_atb_index) = block / BLOCKS_PER_ATB;
     b34:	bf38      	it	cc
     b36:	f8c4 11d4 	strcc.w	r1, [r4, #468]	; 0x1d4
     b3a:	5c71      	ldrb	r1, [r6, r1]
     b3c:	0885      	lsrs	r5, r0, #2
        }

        // free head and all of its tail blocks
        do {
            ATB_ANY_TO_FREE(block);
     b3e:	2703      	movs	r7, #3
     b40:	005b      	lsls	r3, r3, #1
     b42:	fa07 f303 	lsl.w	r3, r7, r3
     b46:	ea21 0103 	bic.w	r1, r1, r3
     b4a:	5571      	strb	r1, [r6, r5]
            block += 1;
     b4c:	3001      	adds	r0, #1
        } while (ATB_GET_KIND(block) == AT_TAIL);
     b4e:	f8d4 60b4 	ldr.w	r6, [r4, #180]	; 0xb4
     b52:	0885      	lsrs	r5, r0, #2
     b54:	f000 0303 	and.w	r3, r0, #3
     b58:	5d71      	ldrb	r1, [r6, r5]
     b5a:	005a      	lsls	r2, r3, #1
     b5c:	fa41 f202 	asr.w	r2, r1, r2
     b60:	f002 0203 	and.w	r2, r2, #3
     b64:	2a02      	cmp	r2, #2
     b66:	d0eb      	beq.n	b40 <gc_free+0x5c>
     b68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        assert(VERIFY_PTR(ptr));
     b6a:	4b09      	ldr	r3, [pc, #36]	; (b90 <gc_free+0xac>)
     b6c:	4a09      	ldr	r2, [pc, #36]	; (b94 <gc_free+0xb0>)
     b6e:	480a      	ldr	r0, [pc, #40]	; (b98 <gc_free+0xb4>)
     b70:	f44f 7112 	mov.w	r1, #584	; 0x248
     b74:	f01c f9b4 	bl	1cee0 <__assert_func>
        assert(ATB_GET_KIND(block) == AT_HEAD);
     b78:	4b08      	ldr	r3, [pc, #32]	; (b9c <gc_free+0xb8>)
     b7a:	4a06      	ldr	r2, [pc, #24]	; (b94 <gc_free+0xb0>)
     b7c:	4806      	ldr	r0, [pc, #24]	; (b98 <gc_free+0xb4>)
     b7e:	f240 214a 	movw	r1, #586	; 0x24a
     b82:	f01c f9ad 	bl	1cee0 <__assert_func>
     b86:	bf00      	nop
     b88:	20001248 	.word	0x20001248
     b8c:	0001f840 	.word	0x0001f840
     b90:	0001f850 	.word	0x0001f850
     b94:	0001f714 	.word	0x0001f714
     b98:	0001f860 	.word	0x0001f860
     b9c:	0001f870 	.word	0x0001f870

00000ba0 <gc_nbytes>:
    }
}

size_t gc_nbytes(const void *ptr) {
    GC_ENTER();
    if (VERIFY_PTR(ptr)) {
     ba0:	f010 030f 	ands.w	r3, r0, #15
     ba4:	d11b      	bne.n	bde <gc_nbytes+0x3e>
     ba6:	4a18      	ldr	r2, [pc, #96]	; (c08 <gc_nbytes+0x68>)
     ba8:	f8d2 10bc 	ldr.w	r1, [r2, #188]	; 0xbc
     bac:	4288      	cmp	r0, r1
     bae:	d316      	bcc.n	bde <gc_nbytes+0x3e>
size_t gc_nbytes(const void *ptr) {
     bb0:	b410      	push	{r4}
    if (VERIFY_PTR(ptr)) {
     bb2:	f8d2 40c0 	ldr.w	r4, [r2, #192]	; 0xc0
     bb6:	42a0      	cmp	r0, r4
     bb8:	d222      	bcs.n	c00 <gc_nbytes+0x60>
        size_t block = BLOCK_FROM_PTR(ptr);
     bba:	1a40      	subs	r0, r0, r1
        if (ATB_GET_KIND(block) == AT_HEAD) {
     bbc:	f8d2 40b4 	ldr.w	r4, [r2, #180]	; 0xb4
     bc0:	0982      	lsrs	r2, r0, #6
        size_t block = BLOCK_FROM_PTR(ptr);
     bc2:	0901      	lsrs	r1, r0, #4
        if (ATB_GET_KIND(block) == AT_HEAD) {
     bc4:	5ca2      	ldrb	r2, [r4, r2]
     bc6:	f001 0003 	and.w	r0, r1, #3
     bca:	0040      	lsls	r0, r0, #1
     bcc:	4102      	asrs	r2, r0
     bce:	f002 0203 	and.w	r2, r2, #3
     bd2:	2a01      	cmp	r2, #1
     bd4:	4618      	mov	r0, r3
     bd6:	d004      	beq.n	be2 <gc_nbytes+0x42>
    }

    // invalid pointer
    GC_EXIT();
    return 0;
}
     bd8:	f85d 4b04 	ldr.w	r4, [sp], #4
     bdc:	4770      	bx	lr
    return 0;
     bde:	2000      	movs	r0, #0
     be0:	4770      	bx	lr
                n_blocks += 1;
     be2:	3001      	adds	r0, #1
     be4:	180b      	adds	r3, r1, r0
            } while (ATB_GET_KIND(block + n_blocks) == AT_TAIL);
     be6:	089a      	lsrs	r2, r3, #2
     be8:	f003 0303 	and.w	r3, r3, #3
     bec:	5ca2      	ldrb	r2, [r4, r2]
     bee:	005b      	lsls	r3, r3, #1
     bf0:	fa42 f303 	asr.w	r3, r2, r3
     bf4:	f003 0303 	and.w	r3, r3, #3
     bf8:	2b02      	cmp	r3, #2
     bfa:	d0f2      	beq.n	be2 <gc_nbytes+0x42>
            return n_blocks * BYTES_PER_BLOCK;
     bfc:	0100      	lsls	r0, r0, #4
     bfe:	e7eb      	b.n	bd8 <gc_nbytes+0x38>
    return 0;
     c00:	4618      	mov	r0, r3
}
     c02:	f85d 4b04 	ldr.w	r4, [sp], #4
     c06:	4770      	bx	lr
     c08:	20001248 	.word	0x20001248

00000c0c <gc_realloc>:
    }
}

#else // Alternative gc_realloc impl

void *gc_realloc(void *ptr_in, size_t n_bytes, bool allow_move) {
     c0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     c10:	468a      	mov	sl, r1
    // check for pure allocation
    if (ptr_in == NULL) {
     c12:	4605      	mov	r5, r0
     c14:	2800      	cmp	r0, #0
     c16:	f000 80c7 	beq.w	da8 <gc_realloc+0x19c>
        return gc_alloc(n_bytes, false);
    }

    // check for pure free
    if (n_bytes == 0) {
     c1a:	2900      	cmp	r1, #0
     c1c:	f000 80bc 	beq.w	d98 <gc_realloc+0x18c>

    void *ptr = ptr_in;

    GC_ENTER();

    if (MP_STATE_MEM(gc_lock_depth) > 0) {
     c20:	4e70      	ldr	r6, [pc, #448]	; (de4 <gc_realloc+0x1d8>)
     c22:	f8b6 31c8 	ldrh.w	r3, [r6, #456]	; 0x1c8
     c26:	2b00      	cmp	r3, #0
     c28:	f040 80bb 	bne.w	da2 <gc_realloc+0x196>
        GC_EXIT();
        return NULL;
    }

    // get the GC block number corresponding to this pointer
    assert(VERIFY_PTR(ptr));
     c2c:	f010 010f 	ands.w	r1, r0, #15
     c30:	f040 80c9 	bne.w	dc6 <gc_realloc+0x1ba>
     c34:	f8d6 00bc 	ldr.w	r0, [r6, #188]	; 0xbc
     c38:	4285      	cmp	r5, r0
     c3a:	f0c0 80c4 	bcc.w	dc6 <gc_realloc+0x1ba>
     c3e:	f8d6 30c0 	ldr.w	r3, [r6, #192]	; 0xc0
     c42:	429d      	cmp	r5, r3
     c44:	f080 80bf 	bcs.w	dc6 <gc_realloc+0x1ba>
    size_t block = BLOCK_FROM_PTR(ptr);
     c48:	1a28      	subs	r0, r5, r0
    assert(ATB_GET_KIND(block) == AT_HEAD);
     c4a:	0984      	lsrs	r4, r0, #6
     c4c:	f8d6 70b4 	ldr.w	r7, [r6, #180]	; 0xb4
    size_t block = BLOCK_FROM_PTR(ptr);
     c50:	ea4f 1810 	mov.w	r8, r0, lsr #4
    assert(ATB_GET_KIND(block) == AT_HEAD);
     c54:	f008 0303 	and.w	r3, r8, #3
     c58:	5d3c      	ldrb	r4, [r7, r4]
     c5a:	005b      	lsls	r3, r3, #1
     c5c:	411c      	asrs	r4, r3
     c5e:	f004 0403 	and.w	r4, r4, #3
     c62:	2c01      	cmp	r4, #1
     c64:	f040 80b6 	bne.w	dd4 <gc_realloc+0x1c8>
    // free blocks to satisfy the realloc.  Note that we need to compute the
    // total size of the existing memory chunk so we can correctly and
    // efficiently shrink it (see below for shrinking code).
    size_t n_free   = 0;
    size_t n_blocks = 1; // counting HEAD block
    size_t max_block = MP_STATE_MEM(gc_alloc_table_byte_len) * BLOCKS_PER_ATB;
     c68:	f8d6 00b8 	ldr.w	r0, [r6, #184]	; 0xb8
    for (size_t bl = block + n_blocks; bl < max_block; bl++) {
     c6c:	f108 0901 	add.w	r9, r8, #1
    size_t max_block = MP_STATE_MEM(gc_alloc_table_byte_len) * BLOCKS_PER_ATB;
     c70:	0080      	lsls	r0, r0, #2
    size_t new_blocks = (n_bytes + BYTES_PER_BLOCK - 1) / BYTES_PER_BLOCK;
     c72:	f10a 0e0f 	add.w	lr, sl, #15
    for (size_t bl = block + n_blocks; bl < max_block; bl++) {
     c76:	4548      	cmp	r0, r9
    size_t new_blocks = (n_bytes + BYTES_PER_BLOCK - 1) / BYTES_PER_BLOCK;
     c78:	ea4f 1e1e 	mov.w	lr, lr, lsr #4
    for (size_t bl = block + n_blocks; bl < max_block; bl++) {
     c7c:	d911      	bls.n	ca2 <gc_realloc+0x96>
        byte block_type = ATB_GET_KIND(bl);
     c7e:	ea4f 0c99 	mov.w	ip, r9, lsr #2
     c82:	f009 0303 	and.w	r3, r9, #3
     c86:	f817 c00c 	ldrb.w	ip, [r7, ip]
     c8a:	005b      	lsls	r3, r3, #1
     c8c:	fa4c f303 	asr.w	r3, ip, r3
     c90:	f003 0303 	and.w	r3, r3, #3
        if (block_type == AT_TAIL) {
     c94:	2b02      	cmp	r3, #2
     c96:	d02c      	beq.n	cf2 <gc_realloc+0xe6>
            n_blocks++;
            continue;
        }
        if (block_type == AT_FREE) {
     c98:	b91b      	cbnz	r3, ca2 <gc_realloc+0x96>
            n_free++;
     c9a:	3101      	adds	r1, #1
            if (n_blocks + n_free >= new_blocks) {
     c9c:	190b      	adds	r3, r1, r4
     c9e:	459e      	cmp	lr, r3
     ca0:	d828      	bhi.n	cf4 <gc_realloc+0xe8>
        }
        break;
    }

    // return original ptr if it already has the requested number of blocks
    if (new_blocks == n_blocks) {
     ca2:	45a6      	cmp	lr, r4
     ca4:	d021      	beq.n	cea <gc_realloc+0xde>
        GC_EXIT();
        return ptr_in;
    }

    // check if we can shrink the allocated area
    if (new_blocks < n_blocks) {
     ca6:	d22a      	bcs.n	cfe <gc_realloc+0xf2>
        // free unneeded tail blocks
        for (size_t bl = block + new_blocks, count = n_blocks - new_blocks; count > 0; bl++, count--) {
     ca8:	44c6      	add	lr, r8
     caa:	eb08 0004 	add.w	r0, r8, r4
            ATB_ANY_TO_FREE(bl);
     cae:	f04f 0903 	mov.w	r9, #3
        for (size_t bl = block + new_blocks, count = n_blocks - new_blocks; count > 0; bl++, count--) {
     cb2:	4674      	mov	r4, lr
     cb4:	e001      	b.n	cba <gc_realloc+0xae>
     cb6:	f8d6 70b4 	ldr.w	r7, [r6, #180]	; 0xb4
            ATB_ANY_TO_FREE(bl);
     cba:	ea4f 0c94 	mov.w	ip, r4, lsr #2
     cbe:	f004 0303 	and.w	r3, r4, #3
     cc2:	f817 100c 	ldrb.w	r1, [r7, ip]
     cc6:	005b      	lsls	r3, r3, #1
     cc8:	fa09 f303 	lsl.w	r3, r9, r3
        for (size_t bl = block + new_blocks, count = n_blocks - new_blocks; count > 0; bl++, count--) {
     ccc:	3401      	adds	r4, #1
            ATB_ANY_TO_FREE(bl);
     cce:	ea21 0303 	bic.w	r3, r1, r3
        for (size_t bl = block + new_blocks, count = n_blocks - new_blocks; count > 0; bl++, count--) {
     cd2:	4284      	cmp	r4, r0
            ATB_ANY_TO_FREE(bl);
     cd4:	f807 300c 	strb.w	r3, [r7, ip]
        for (size_t bl = block + new_blocks, count = n_blocks - new_blocks; count > 0; bl++, count--) {
     cd8:	d1ed      	bne.n	cb6 <gc_realloc+0xaa>
        }

        // set the last_free pointer to end of this block if it's earlier in the heap
        if ((block + new_blocks) / BLOCKS_PER_ATB < MP_STATE_MEM(gc_last_free_atb_index)) {
     cda:	f8d6 31d4 	ldr.w	r3, [r6, #468]	; 0x1d4
     cde:	ea4f 029e 	mov.w	r2, lr, lsr #2
     ce2:	429a      	cmp	r2, r3
            MP_STATE_MEM(gc_last_free_atb_index) = (block + new_blocks) / BLOCKS_PER_ATB;
     ce4:	bf38      	it	cc
     ce6:	f8c6 21d4 	strcc.w	r2, [r6, #468]	; 0x1d4
     cea:	46aa      	mov	sl, r5

    DEBUG_printf("gc_realloc(%p -> %p)\n", ptr_in, ptr_out);
    memcpy(ptr_out, ptr_in, n_blocks * BYTES_PER_BLOCK);
    gc_free(ptr_in);
    return ptr_out;
}
     cec:	4650      	mov	r0, sl
     cee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            n_blocks++;
     cf2:	3401      	adds	r4, #1
    for (size_t bl = block + n_blocks; bl < max_block; bl++) {
     cf4:	f109 0901 	add.w	r9, r9, #1
     cf8:	4548      	cmp	r0, r9
     cfa:	d1c0      	bne.n	c7e <gc_realloc+0x72>
     cfc:	e7d1      	b.n	ca2 <gc_realloc+0x96>
    if (new_blocks <= n_blocks + n_free) {
     cfe:	4421      	add	r1, r4
     d00:	458e      	cmp	lr, r1
     d02:	d836      	bhi.n	d72 <gc_realloc+0x166>
        for (size_t bl = block + n_blocks; bl < block + new_blocks; bl++) {
     d04:	eb08 0104 	add.w	r1, r8, r4
     d08:	eb08 000e 	add.w	r0, r8, lr
     d0c:	4288      	cmp	r0, r1
     d0e:	d924      	bls.n	d5a <gc_realloc+0x14e>
            assert(ATB_GET_KIND(bl) == AT_FREE);
     d10:	088a      	lsrs	r2, r1, #2
     d12:	f001 0303 	and.w	r3, r1, #3
     d16:	f817 c002 	ldrb.w	ip, [r7, r2]
     d1a:	005b      	lsls	r3, r3, #1
     d1c:	fa4c f803 	asr.w	r8, ip, r3
     d20:	f018 0f03 	tst.w	r8, #3
     d24:	443a      	add	r2, r7
            ATB_FREE_TO_TAIL(bl);
     d26:	bf08      	it	eq
     d28:	2702      	moveq	r7, #2
            assert(ATB_GET_KIND(bl) == AT_FREE);
     d2a:	d00e      	beq.n	d4a <gc_realloc+0x13e>
     d2c:	e044      	b.n	db8 <gc_realloc+0x1ac>
     d2e:	088a      	lsrs	r2, r1, #2
     d30:	f8d6 80b4 	ldr.w	r8, [r6, #180]	; 0xb4
     d34:	f001 0303 	and.w	r3, r1, #3
     d38:	f818 c002 	ldrb.w	ip, [r8, r2]
     d3c:	005b      	lsls	r3, r3, #1
     d3e:	fa4c f903 	asr.w	r9, ip, r3
     d42:	f019 0f03 	tst.w	r9, #3
     d46:	4442      	add	r2, r8
     d48:	d136      	bne.n	db8 <gc_realloc+0x1ac>
            ATB_FREE_TO_TAIL(bl);
     d4a:	fa07 f303 	lsl.w	r3, r7, r3
        for (size_t bl = block + n_blocks; bl < block + new_blocks; bl++) {
     d4e:	3101      	adds	r1, #1
            ATB_FREE_TO_TAIL(bl);
     d50:	ea43 030c 	orr.w	r3, r3, ip
        for (size_t bl = block + n_blocks; bl < block + new_blocks; bl++) {
     d54:	4288      	cmp	r0, r1
            ATB_FREE_TO_TAIL(bl);
     d56:	7013      	strb	r3, [r2, #0]
        for (size_t bl = block + n_blocks; bl < block + new_blocks; bl++) {
     d58:	d1e9      	bne.n	d2e <gc_realloc+0x122>
        memset((byte*)ptr_in + n_blocks * BYTES_PER_BLOCK, 0, (new_blocks - n_blocks) * BYTES_PER_BLOCK);
     d5a:	ebae 0204 	sub.w	r2, lr, r4
     d5e:	0112      	lsls	r2, r2, #4
     d60:	eb05 1004 	add.w	r0, r5, r4, lsl #4
     d64:	2100      	movs	r1, #0
        return ptr_in;
     d66:	46aa      	mov	sl, r5
        memset((byte*)ptr_in + n_blocks * BYTES_PER_BLOCK, 0, (new_blocks - n_blocks) * BYTES_PER_BLOCK);
     d68:	f01d fc7c 	bl	1e664 <memset>
}
     d6c:	4650      	mov	r0, sl
     d6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (!allow_move) {
     d72:	b1fa      	cbz	r2, db4 <gc_realloc+0x1a8>
    void *ptr_out = gc_alloc(n_bytes, ftb_state);
     d74:	4650      	mov	r0, sl
     d76:	2100      	movs	r1, #0
     d78:	f7ff fdd8 	bl	92c <gc_alloc>
    if (ptr_out == NULL) {
     d7c:	4682      	mov	sl, r0
     d7e:	2800      	cmp	r0, #0
     d80:	d0b4      	beq.n	cec <gc_realloc+0xe0>
    DEBUG_printf("gc_realloc(%p -> %p)\n", ptr_in, ptr_out);
     d82:	4602      	mov	r2, r0
     d84:	4629      	mov	r1, r5
     d86:	4818      	ldr	r0, [pc, #96]	; (de8 <gc_realloc+0x1dc>)
     d88:	f01b ff30 	bl	1cbec <DEBUG_printf>
    memcpy(ptr_out, ptr_in, n_blocks * BYTES_PER_BLOCK);
     d8c:	0122      	lsls	r2, r4, #4
     d8e:	4629      	mov	r1, r5
     d90:	4650      	mov	r0, sl
     d92:	f01d fbcd 	bl	1e530 <memcpy>
    gc_free(ptr_in);
     d96:	4628      	mov	r0, r5
     d98:	f7ff fea4 	bl	ae4 <gc_free>
}
     d9c:	4650      	mov	r0, sl
     d9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        return NULL;
     da2:	f04f 0a00 	mov.w	sl, #0
     da6:	e7a1      	b.n	cec <gc_realloc+0xe0>
        return gc_alloc(n_bytes, false);
     da8:	4601      	mov	r1, r0
     daa:	4650      	mov	r0, sl
}
     dac:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        return gc_alloc(n_bytes, false);
     db0:	f7ff bdbc 	b.w	92c <gc_alloc>
        return NULL;
     db4:	4692      	mov	sl, r2
     db6:	e799      	b.n	cec <gc_realloc+0xe0>
            assert(ATB_GET_KIND(bl) == AT_FREE);
     db8:	4b0c      	ldr	r3, [pc, #48]	; (dec <gc_realloc+0x1e0>)
     dba:	4a0d      	ldr	r2, [pc, #52]	; (df0 <gc_realloc+0x1e4>)
     dbc:	480d      	ldr	r0, [pc, #52]	; (df4 <gc_realloc+0x1e8>)
     dbe:	f240 21ea 	movw	r1, #746	; 0x2ea
     dc2:	f01c f88d 	bl	1cee0 <__assert_func>
    assert(VERIFY_PTR(ptr));
     dc6:	4b0c      	ldr	r3, [pc, #48]	; (df8 <gc_realloc+0x1ec>)
     dc8:	4a09      	ldr	r2, [pc, #36]	; (df0 <gc_realloc+0x1e4>)
     dca:	480a      	ldr	r0, [pc, #40]	; (df4 <gc_realloc+0x1e8>)
     dcc:	f240 21aa 	movw	r1, #682	; 0x2aa
     dd0:	f01c f886 	bl	1cee0 <__assert_func>
    assert(ATB_GET_KIND(block) == AT_HEAD);
     dd4:	4b09      	ldr	r3, [pc, #36]	; (dfc <gc_realloc+0x1f0>)
     dd6:	4a06      	ldr	r2, [pc, #24]	; (df0 <gc_realloc+0x1e4>)
     dd8:	4806      	ldr	r0, [pc, #24]	; (df4 <gc_realloc+0x1e8>)
     dda:	f44f 712b 	mov.w	r1, #684	; 0x2ac
     dde:	f01c f87f 	bl	1cee0 <__assert_func>
     de2:	bf00      	nop
     de4:	20001248 	.word	0x20001248
     de8:	0001f8ac 	.word	0x0001f8ac
     dec:	0001f890 	.word	0x0001f890
     df0:	0001f71c 	.word	0x0001f71c
     df4:	0001f860 	.word	0x0001f860
     df8:	0001f850 	.word	0x0001f850
     dfc:	0001f870 	.word	0x0001f870

00000e00 <gc_dump_info>:
#endif // Alternative gc_realloc impl

void gc_dump_info(void) {
     e00:	b510      	push	{r4, lr}
     e02:	b08a      	sub	sp, #40	; 0x28
    gc_info_t info;
    gc_info(&info);
     e04:	a803      	add	r0, sp, #12
    mp_printf(&mp_plat_print, "GC: total: %u, used: %u, free: %u\n",
     e06:	4c0b      	ldr	r4, [pc, #44]	; (e34 <gc_dump_info+0x34>)
    gc_info(&info);
     e08:	f7ff fd12 	bl	830 <gc_info>
    mp_printf(&mp_plat_print, "GC: total: %u, used: %u, free: %u\n",
     e0c:	9905      	ldr	r1, [sp, #20]
     e0e:	9b04      	ldr	r3, [sp, #16]
     e10:	9a03      	ldr	r2, [sp, #12]
     e12:	9100      	str	r1, [sp, #0]
     e14:	4620      	mov	r0, r4
     e16:	4908      	ldr	r1, [pc, #32]	; (e38 <gc_dump_info+0x38>)
     e18:	f001 f92a 	bl	2070 <mp_printf>
        (uint)info.total, (uint)info.used, (uint)info.free);
    mp_printf(&mp_plat_print, " No. of 1-blocks: %u, 2-blocks: %u, max blk sz: %u, max free sz: %u\n",
     e1c:	a806      	add	r0, sp, #24
     e1e:	c80d      	ldmia	r0, {r0, r2, r3}
     e20:	9909      	ldr	r1, [sp, #36]	; 0x24
     e22:	9001      	str	r0, [sp, #4]
     e24:	9100      	str	r1, [sp, #0]
     e26:	4620      	mov	r0, r4
     e28:	4904      	ldr	r1, [pc, #16]	; (e3c <gc_dump_info+0x3c>)
     e2a:	f001 f921 	bl	2070 <mp_printf>
           (uint)info.num_1block, (uint)info.num_2block, (uint)info.max_block, (uint)info.max_free);
}
     e2e:	b00a      	add	sp, #40	; 0x28
     e30:	bd10      	pop	{r4, pc}
     e32:	bf00      	nop
     e34:	000210cc 	.word	0x000210cc
     e38:	0001f8c4 	.word	0x0001f8c4
     e3c:	0001f8e8 	.word	0x0001f8e8

00000e40 <gc_dump_alloc_table>:

void gc_dump_alloc_table(void) {
     e40:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    GC_ENTER();
    static const size_t DUMP_BYTES_PER_LINE = 64;
    #if !EXTENSIVE_HEAP_PROFILING
    // When comparing heap output we don't want to print the starting
    // pointer of the heap because it changes from run to run.
    mp_printf(&mp_plat_print, "GC memory layout; from %p:", MP_STATE_MEM(gc_pool_start));
     e44:	4f4f      	ldr	r7, [pc, #316]	; (f84 <gc_dump_alloc_table+0x144>)
     e46:	4950      	ldr	r1, [pc, #320]	; (f88 <gc_dump_alloc_table+0x148>)
     e48:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
     e4c:	484f      	ldr	r0, [pc, #316]	; (f8c <gc_dump_alloc_table+0x14c>)
     e4e:	f001 f90f 	bl	2070 <mp_printf>
    #endif
    for (size_t bl = 0; bl < MP_STATE_MEM(gc_alloc_table_byte_len) * BLOCKS_PER_ATB; bl++) {
     e52:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
     e56:	0089      	lsls	r1, r1, #2
     e58:	d07e      	beq.n	f58 <gc_dump_alloc_table+0x118>
                }
            }
            // print header for new line of blocks
            // (the cast to uint32_t is for 16-bit ports)
            //mp_printf(&mp_plat_print, "\n%05x: ", (uint)(PTR_FROM_BLOCK(bl) & (uint32_t)0xfffff));
            mp_printf(&mp_plat_print, "\n%05x: ", (uint)((bl * BYTES_PER_BLOCK) & (uint32_t)0xfffff));
     e5a:	f8df a15c 	ldr.w	sl, [pc, #348]	; fb8 <gc_dump_alloc_table+0x178>
     e5e:	f8df 915c 	ldr.w	r9, [pc, #348]	; fbc <gc_dump_alloc_table+0x17c>
     e62:	f8df 8128 	ldr.w	r8, [pc, #296]	; f8c <gc_dump_alloc_table+0x14c>
    for (size_t bl = 0; bl < MP_STATE_MEM(gc_alloc_table_byte_len) * BLOCKS_PER_ATB; bl++) {
     e66:	2500      	movs	r5, #0
     e68:	e01d      	b.n	ea6 <gc_dump_alloc_table+0x66>
     e6a:	f005 0603 	and.w	r6, r5, #3
     e6e:	0076      	lsls	r6, r6, #1
     e70:	ea4f 0b95 	mov.w	fp, r5, lsr #2
        }
        int c = ' ';
        switch (ATB_GET_KIND(bl)) {
     e74:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
     e78:	f813 300b 	ldrb.w	r3, [r3, fp]
     e7c:	fa43 f606 	asr.w	r6, r3, r6
     e80:	f006 0603 	and.w	r6, r6, #3
     e84:	2e02      	cmp	r6, #2
     e86:	d065      	beq.n	f54 <gc_dump_alloc_table+0x114>
     e88:	2e03      	cmp	r6, #3
     e8a:	d061      	beq.n	f50 <gc_dump_alloc_table+0x110>
     e8c:	2e01      	cmp	r6, #1
     e8e:	d043      	beq.n	f18 <gc_dump_alloc_table+0xd8>
            case AT_FREE: c = '.'; break;
     e90:	222e      	movs	r2, #46	; 0x2e
                break;
            }
            case AT_TAIL: c = '='; break;
            case AT_MARK: c = 'm'; break;
        }
        mp_printf(&mp_plat_print, "%c", c);
     e92:	493f      	ldr	r1, [pc, #252]	; (f90 <gc_dump_alloc_table+0x150>)
     e94:	4640      	mov	r0, r8
     e96:	f001 f8eb 	bl	2070 <mp_printf>
    for (size_t bl = 0; bl < MP_STATE_MEM(gc_alloc_table_byte_len) * BLOCKS_PER_ATB; bl++) {
     e9a:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
     e9e:	3501      	adds	r5, #1
     ea0:	0089      	lsls	r1, r1, #2
     ea2:	42a9      	cmp	r1, r5
     ea4:	d958      	bls.n	f58 <gc_dump_alloc_table+0x118>
        if (bl % DUMP_BYTES_PER_LINE == 0) {
     ea6:	06a8      	lsls	r0, r5, #26
     ea8:	d1df      	bne.n	e6a <gc_dump_alloc_table+0x2a>
                while (bl2 < MP_STATE_MEM(gc_alloc_table_byte_len) * BLOCKS_PER_ATB && ATB_GET_KIND(bl2) == AT_FREE) {
     eaa:	428d      	cmp	r5, r1
     eac:	d260      	bcs.n	f70 <gc_dump_alloc_table+0x130>
     eae:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
     eb2:	ea4f 0b95 	mov.w	fp, r5, lsr #2
     eb6:	f005 0603 	and.w	r6, r5, #3
     eba:	f810 300b 	ldrb.w	r3, [r0, fp]
     ebe:	0076      	lsls	r6, r6, #1
     ec0:	4133      	asrs	r3, r6
     ec2:	079a      	lsls	r2, r3, #30
     ec4:	d121      	bne.n	f0a <gc_dump_alloc_table+0xca>
     ec6:	462c      	mov	r4, r5
     ec8:	e004      	b.n	ed4 <gc_dump_alloc_table+0x94>
     eca:	5c82      	ldrb	r2, [r0, r2]
     ecc:	fa42 f303 	asr.w	r3, r2, r3
     ed0:	079b      	lsls	r3, r3, #30
     ed2:	d108      	bne.n	ee6 <gc_dump_alloc_table+0xa6>
                    bl2++;
     ed4:	3401      	adds	r4, #1
                while (bl2 < MP_STATE_MEM(gc_alloc_table_byte_len) * BLOCKS_PER_ATB && ATB_GET_KIND(bl2) == AT_FREE) {
     ed6:	f004 0303 	and.w	r3, r4, #3
     eda:	428c      	cmp	r4, r1
     edc:	ea4f 0294 	mov.w	r2, r4, lsr #2
     ee0:	ea4f 0343 	mov.w	r3, r3, lsl #1
     ee4:	d1f1      	bne.n	eca <gc_dump_alloc_table+0x8a>
                if (bl2 - bl >= 2 * DUMP_BYTES_PER_LINE) {
     ee6:	1b62      	subs	r2, r4, r5
     ee8:	2a7f      	cmp	r2, #127	; 0x7f
     eea:	d90e      	bls.n	f0a <gc_dump_alloc_table+0xca>
                    mp_printf(&mp_plat_print, "\n       (%u lines all free)", (uint)(bl2 - bl) / DUMP_BYTES_PER_LINE);
     eec:	0992      	lsrs	r2, r2, #6
     eee:	4929      	ldr	r1, [pc, #164]	; (f94 <gc_dump_alloc_table+0x154>)
     ef0:	4640      	mov	r0, r8
     ef2:	f001 f8bd 	bl	2070 <mp_printf>
                    if (bl >= MP_STATE_MEM(gc_alloc_table_byte_len) * BLOCKS_PER_ATB) {
     ef6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
                    bl = bl2 & (~(DUMP_BYTES_PER_LINE - 1));
     efa:	f024 053f 	bic.w	r5, r4, #63	; 0x3f
                    if (bl >= MP_STATE_MEM(gc_alloc_table_byte_len) * BLOCKS_PER_ATB) {
     efe:	ebb5 0f83 	cmp.w	r5, r3, lsl #2
     f02:	d229      	bcs.n	f58 <gc_dump_alloc_table+0x118>
     f04:	ea4f 0b95 	mov.w	fp, r5, lsr #2
     f08:	2600      	movs	r6, #0
            mp_printf(&mp_plat_print, "\n%05x: ", (uint)((bl * BYTES_PER_BLOCK) & (uint32_t)0xfffff));
     f0a:	ea0a 1205 	and.w	r2, sl, r5, lsl #4
     f0e:	4649      	mov	r1, r9
     f10:	4640      	mov	r0, r8
     f12:	f001 f8ad 	bl	2070 <mp_printf>
     f16:	e7ad      	b.n	e74 <gc_dump_alloc_table+0x34>
                if (*ptr == &mp_type_tuple) { c = 'T'; }
     f18:	f8d7 10bc 	ldr.w	r1, [r7, #188]	; 0xbc
     f1c:	4b1e      	ldr	r3, [pc, #120]	; (f98 <gc_dump_alloc_table+0x158>)
     f1e:	012a      	lsls	r2, r5, #4
     f20:	588a      	ldr	r2, [r1, r2]
     f22:	429a      	cmp	r2, r3
     f24:	d020      	beq.n	f68 <gc_dump_alloc_table+0x128>
                else if (*ptr == &mp_type_list) { c = 'L'; }
     f26:	4b1d      	ldr	r3, [pc, #116]	; (f9c <gc_dump_alloc_table+0x15c>)
     f28:	429a      	cmp	r2, r3
     f2a:	d01f      	beq.n	f6c <gc_dump_alloc_table+0x12c>
                else if (*ptr == &mp_type_dict) { c = 'D'; }
     f2c:	4b1c      	ldr	r3, [pc, #112]	; (fa0 <gc_dump_alloc_table+0x160>)
     f2e:	429a      	cmp	r2, r3
     f30:	d024      	beq.n	f7c <gc_dump_alloc_table+0x13c>
                else if (*ptr == &mp_type_str || *ptr == &mp_type_bytes) { c = 'S'; }
     f32:	4b1c      	ldr	r3, [pc, #112]	; (fa4 <gc_dump_alloc_table+0x164>)
     f34:	429a      	cmp	r2, r3
     f36:	d015      	beq.n	f64 <gc_dump_alloc_table+0x124>
     f38:	4b1b      	ldr	r3, [pc, #108]	; (fa8 <gc_dump_alloc_table+0x168>)
     f3a:	429a      	cmp	r2, r3
     f3c:	d012      	beq.n	f64 <gc_dump_alloc_table+0x124>
                else if (*ptr == &mp_type_fun_bc) { c = 'B'; }
     f3e:	4b1b      	ldr	r3, [pc, #108]	; (fac <gc_dump_alloc_table+0x16c>)
     f40:	429a      	cmp	r2, r3
     f42:	d01d      	beq.n	f80 <gc_dump_alloc_table+0x140>
                else if (*ptr == &mp_type_module) { c = 'M'; }
     f44:	4b1a      	ldr	r3, [pc, #104]	; (fb0 <gc_dump_alloc_table+0x170>)
     f46:	429a      	cmp	r2, r3
     f48:	bf14      	ite	ne
     f4a:	2268      	movne	r2, #104	; 0x68
     f4c:	224d      	moveq	r2, #77	; 0x4d
     f4e:	e7a0      	b.n	e92 <gc_dump_alloc_table+0x52>
            case AT_MARK: c = 'm'; break;
     f50:	226d      	movs	r2, #109	; 0x6d
     f52:	e79e      	b.n	e92 <gc_dump_alloc_table+0x52>
            case AT_TAIL: c = '='; break;
     f54:	223d      	movs	r2, #61	; 0x3d
     f56:	e79c      	b.n	e92 <gc_dump_alloc_table+0x52>
    }
    mp_print_str(&mp_plat_print, "\n");
     f58:	4916      	ldr	r1, [pc, #88]	; (fb4 <gc_dump_alloc_table+0x174>)
     f5a:	480c      	ldr	r0, [pc, #48]	; (f8c <gc_dump_alloc_table+0x14c>)
    GC_EXIT();
}
     f5c:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    mp_print_str(&mp_plat_print, "\n");
     f60:	f000 bd74 	b.w	1a4c <mp_print_str>
                else if (*ptr == &mp_type_str || *ptr == &mp_type_bytes) { c = 'S'; }
     f64:	2253      	movs	r2, #83	; 0x53
     f66:	e794      	b.n	e92 <gc_dump_alloc_table+0x52>
                if (*ptr == &mp_type_tuple) { c = 'T'; }
     f68:	2254      	movs	r2, #84	; 0x54
     f6a:	e792      	b.n	e92 <gc_dump_alloc_table+0x52>
                else if (*ptr == &mp_type_list) { c = 'L'; }
     f6c:	224c      	movs	r2, #76	; 0x4c
     f6e:	e790      	b.n	e92 <gc_dump_alloc_table+0x52>
     f70:	f005 0603 	and.w	r6, r5, #3
     f74:	0076      	lsls	r6, r6, #1
     f76:	ea4f 0b95 	mov.w	fp, r5, lsr #2
     f7a:	e7c6      	b.n	f0a <gc_dump_alloc_table+0xca>
                else if (*ptr == &mp_type_dict) { c = 'D'; }
     f7c:	2244      	movs	r2, #68	; 0x44
     f7e:	e788      	b.n	e92 <gc_dump_alloc_table+0x52>
                else if (*ptr == &mp_type_fun_bc) { c = 'B'; }
     f80:	2242      	movs	r2, #66	; 0x42
     f82:	e786      	b.n	e92 <gc_dump_alloc_table+0x52>
     f84:	20001248 	.word	0x20001248
     f88:	0001f930 	.word	0x0001f930
     f8c:	000210cc 	.word	0x000210cc
     f90:	0001f970 	.word	0x0001f970
     f94:	0001f94c 	.word	0x0001f94c
     f98:	00025a34 	.word	0x00025a34
     f9c:	00024e44 	.word	0x00024e44
     fa0:	00023d0c 	.word	0x00023d0c
     fa4:	000257b0 	.word	0x000257b0
     fa8:	000257ec 	.word	0x000257ec
     fac:	000247b8 	.word	0x000247b8
     fb0:	00025000 	.word	0x00025000
     fb4:	0001f8c0 	.word	0x0001f8c0
     fb8:	000ffff0 	.word	0x000ffff0
     fbc:	0001f968 	.word	0x0001f968

00000fc0 <qstr_compute_hash>:
#define QSTR_ENTER()
#define QSTR_EXIT()
#endif

// this must match the equivalent function in makeqstrdata.py
mp_uint_t qstr_compute_hash(const byte *data, size_t len) {
     fc0:	b480      	push	{r7}
     fc2:	b085      	sub	sp, #20
     fc4:	af00      	add	r7, sp, #0
     fc6:	6078      	str	r0, [r7, #4]
     fc8:	6039      	str	r1, [r7, #0]
    // djb2 algorithm; see http://www.cse.yorku.ca/~oz/hash.html
    mp_uint_t hash = 5381;
     fca:	f241 5305 	movw	r3, #5381	; 0x1505
     fce:	60fb      	str	r3, [r7, #12]
    for (const byte *top = data + len; data < top; data++) {
     fd0:	687a      	ldr	r2, [r7, #4]
     fd2:	683b      	ldr	r3, [r7, #0]
     fd4:	4413      	add	r3, r2
     fd6:	60bb      	str	r3, [r7, #8]
     fd8:	e00a      	b.n	ff0 <qstr_compute_hash+0x30>
        hash = ((hash << 5) + hash) ^ (*data); // hash * 33 ^ data
     fda:	68fb      	ldr	r3, [r7, #12]
     fdc:	015a      	lsls	r2, r3, #5
     fde:	68fb      	ldr	r3, [r7, #12]
     fe0:	4413      	add	r3, r2
     fe2:	687a      	ldr	r2, [r7, #4]
     fe4:	7812      	ldrb	r2, [r2, #0]
     fe6:	4053      	eors	r3, r2
     fe8:	60fb      	str	r3, [r7, #12]
    for (const byte *top = data + len; data < top; data++) {
     fea:	687b      	ldr	r3, [r7, #4]
     fec:	3301      	adds	r3, #1
     fee:	607b      	str	r3, [r7, #4]
     ff0:	687a      	ldr	r2, [r7, #4]
     ff2:	68bb      	ldr	r3, [r7, #8]
     ff4:	429a      	cmp	r2, r3
     ff6:	d3f0      	bcc.n	fda <qstr_compute_hash+0x1a>
    }
    hash &= Q_HASH_MASK;
     ff8:	68fb      	ldr	r3, [r7, #12]
     ffa:	b2db      	uxtb	r3, r3
     ffc:	60fb      	str	r3, [r7, #12]
    // Make sure that valid hash is never zero, zero means "hash not computed"
    if (hash == 0) {
     ffe:	68fb      	ldr	r3, [r7, #12]
    1000:	2b00      	cmp	r3, #0
    1002:	d102      	bne.n	100a <qstr_compute_hash+0x4a>
        hash++;
    1004:	68fb      	ldr	r3, [r7, #12]
    1006:	3301      	adds	r3, #1
    1008:	60fb      	str	r3, [r7, #12]
    }
    return hash;
    100a:	68fb      	ldr	r3, [r7, #12]
}
    100c:	4618      	mov	r0, r3
    100e:	3714      	adds	r7, #20
    1010:	46bd      	mov	sp, r7
    1012:	f85d 7b04 	ldr.w	r7, [sp], #4
    1016:	4770      	bx	lr

00001018 <qstr_init>:
#define CONST_POOL MICROPY_QSTR_EXTRA_POOL
#else
#define CONST_POOL mp_qstr_const_pool
#endif

void qstr_init(void) {
    1018:	b480      	push	{r7}
    101a:	af00      	add	r7, sp, #0
    MP_STATE_VM(last_pool) = (qstr_pool_t*)&CONST_POOL; // we won't modify the const_pool since it has no allocated room left
    101c:	4b05      	ldr	r3, [pc, #20]	; (1034 <qstr_init+0x1c>)
    101e:	4a06      	ldr	r2, [pc, #24]	; (1038 <qstr_init+0x20>)
    1020:	611a      	str	r2, [r3, #16]
    MP_STATE_VM(qstr_last_chunk) = NULL;
    1022:	4b04      	ldr	r3, [pc, #16]	; (1034 <qstr_init+0x1c>)
    1024:	2200      	movs	r2, #0
    1026:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    #if MICROPY_PY_THREAD
    mp_thread_mutex_init(&MP_STATE_VM(qstr_mutex));
    #endif
}
    102a:	bf00      	nop
    102c:	46bd      	mov	sp, r7
    102e:	f85d 7b04 	ldr.w	r7, [sp], #4
    1032:	4770      	bx	lr
    1034:	20001248 	.word	0x20001248
    1038:	0002806c 	.word	0x0002806c

0000103c <find_qstr>:

STATIC const byte *find_qstr(qstr q) {
    103c:	b480      	push	{r7}
    103e:	b085      	sub	sp, #20
    1040:	af00      	add	r7, sp, #0
    1042:	6078      	str	r0, [r7, #4]
    // search pool for this qstr
    // total_prev_len==0 in the final pool, so the loop will always terminate
    qstr_pool_t *pool = MP_STATE_VM(last_pool);
    1044:	4b0c      	ldr	r3, [pc, #48]	; (1078 <find_qstr+0x3c>)
    1046:	691b      	ldr	r3, [r3, #16]
    1048:	60fb      	str	r3, [r7, #12]
    while (q < pool->total_prev_len) {
    104a:	e002      	b.n	1052 <find_qstr+0x16>
        pool = pool->prev;
    104c:	68fb      	ldr	r3, [r7, #12]
    104e:	681b      	ldr	r3, [r3, #0]
    1050:	60fb      	str	r3, [r7, #12]
    while (q < pool->total_prev_len) {
    1052:	68fb      	ldr	r3, [r7, #12]
    1054:	685a      	ldr	r2, [r3, #4]
    1056:	687b      	ldr	r3, [r7, #4]
    1058:	429a      	cmp	r2, r3
    105a:	d8f7      	bhi.n	104c <find_qstr+0x10>
    }
    return pool->qstrs[q - pool->total_prev_len];
    105c:	68fb      	ldr	r3, [r7, #12]
    105e:	685b      	ldr	r3, [r3, #4]
    1060:	687a      	ldr	r2, [r7, #4]
    1062:	1ad2      	subs	r2, r2, r3
    1064:	68fb      	ldr	r3, [r7, #12]
    1066:	3204      	adds	r2, #4
    1068:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
}
    106c:	4618      	mov	r0, r3
    106e:	3714      	adds	r7, #20
    1070:	46bd      	mov	sp, r7
    1072:	f85d 7b04 	ldr.w	r7, [sp], #4
    1076:	4770      	bx	lr
    1078:	20001248 	.word	0x20001248

0000107c <qstr_add>:

// qstr_mutex must be taken while in this function
STATIC qstr qstr_add(const byte *q_ptr) {
    107c:	b580      	push	{r7, lr}
    107e:	b086      	sub	sp, #24
    1080:	af02      	add	r7, sp, #8
    1082:	6078      	str	r0, [r7, #4]
    DEBUG_printf("QSTR: add hash=%d len=%d data=%.*s\n", Q_GET_HASH(q_ptr), Q_GET_LENGTH(q_ptr), Q_GET_LENGTH(q_ptr), Q_GET_DATA(q_ptr));
    1084:	687b      	ldr	r3, [r7, #4]
    1086:	781b      	ldrb	r3, [r3, #0]
    1088:	4619      	mov	r1, r3
    108a:	687b      	ldr	r3, [r7, #4]
    108c:	3301      	adds	r3, #1
    108e:	781b      	ldrb	r3, [r3, #0]
    1090:	461a      	mov	r2, r3
    1092:	687b      	ldr	r3, [r7, #4]
    1094:	3301      	adds	r3, #1
    1096:	781b      	ldrb	r3, [r3, #0]
    1098:	4618      	mov	r0, r3
    109a:	687b      	ldr	r3, [r7, #4]
    109c:	3302      	adds	r3, #2
    109e:	9300      	str	r3, [sp, #0]
    10a0:	4603      	mov	r3, r0
    10a2:	482a      	ldr	r0, [pc, #168]	; (114c <qstr_add+0xd0>)
    10a4:	f01b fda2 	bl	1cbec <DEBUG_printf>

    // make sure we have room in the pool for a new qstr
    if (MP_STATE_VM(last_pool)->len >= MP_STATE_VM(last_pool)->alloc) {
    10a8:	4b29      	ldr	r3, [pc, #164]	; (1150 <qstr_add+0xd4>)
    10aa:	691b      	ldr	r3, [r3, #16]
    10ac:	68da      	ldr	r2, [r3, #12]
    10ae:	4b28      	ldr	r3, [pc, #160]	; (1150 <qstr_add+0xd4>)
    10b0:	691b      	ldr	r3, [r3, #16]
    10b2:	689b      	ldr	r3, [r3, #8]
    10b4:	429a      	cmp	r2, r3
    10b6:	d332      	bcc.n	111e <qstr_add+0xa2>
        qstr_pool_t *pool = m_new_obj_var_maybe(qstr_pool_t, const char*, MP_STATE_VM(last_pool)->alloc * 2);
    10b8:	4b25      	ldr	r3, [pc, #148]	; (1150 <qstr_add+0xd4>)
    10ba:	691b      	ldr	r3, [r3, #16]
    10bc:	689b      	ldr	r3, [r3, #8]
    10be:	3302      	adds	r3, #2
    10c0:	00db      	lsls	r3, r3, #3
    10c2:	4618      	mov	r0, r3
    10c4:	f7ff f948 	bl	358 <m_malloc_maybe>
    10c8:	60f8      	str	r0, [r7, #12]
        if (pool == NULL) {
    10ca:	68fb      	ldr	r3, [r7, #12]
    10cc:	2b00      	cmp	r3, #0
    10ce:	d106      	bne.n	10de <qstr_add+0x62>
            QSTR_EXIT();
            m_malloc_fail(MP_STATE_VM(last_pool)->alloc * 2);
    10d0:	4b1f      	ldr	r3, [pc, #124]	; (1150 <qstr_add+0xd4>)
    10d2:	691b      	ldr	r3, [r3, #16]
    10d4:	689b      	ldr	r3, [r3, #8]
    10d6:	005b      	lsls	r3, r3, #1
    10d8:	4618      	mov	r0, r3
    10da:	f00c f912 	bl	d302 <m_malloc_fail>
        }
        pool->prev = MP_STATE_VM(last_pool);
    10de:	4b1c      	ldr	r3, [pc, #112]	; (1150 <qstr_add+0xd4>)
    10e0:	691a      	ldr	r2, [r3, #16]
    10e2:	68fb      	ldr	r3, [r7, #12]
    10e4:	601a      	str	r2, [r3, #0]
        pool->total_prev_len = MP_STATE_VM(last_pool)->total_prev_len + MP_STATE_VM(last_pool)->len;
    10e6:	4b1a      	ldr	r3, [pc, #104]	; (1150 <qstr_add+0xd4>)
    10e8:	691b      	ldr	r3, [r3, #16]
    10ea:	685a      	ldr	r2, [r3, #4]
    10ec:	4b18      	ldr	r3, [pc, #96]	; (1150 <qstr_add+0xd4>)
    10ee:	691b      	ldr	r3, [r3, #16]
    10f0:	68db      	ldr	r3, [r3, #12]
    10f2:	441a      	add	r2, r3
    10f4:	68fb      	ldr	r3, [r7, #12]
    10f6:	605a      	str	r2, [r3, #4]
        pool->alloc = MP_STATE_VM(last_pool)->alloc * 2;
    10f8:	4b15      	ldr	r3, [pc, #84]	; (1150 <qstr_add+0xd4>)
    10fa:	691b      	ldr	r3, [r3, #16]
    10fc:	689b      	ldr	r3, [r3, #8]
    10fe:	005a      	lsls	r2, r3, #1
    1100:	68fb      	ldr	r3, [r7, #12]
    1102:	609a      	str	r2, [r3, #8]
        pool->len = 0;
    1104:	68fb      	ldr	r3, [r7, #12]
    1106:	2200      	movs	r2, #0
    1108:	60da      	str	r2, [r3, #12]
        MP_STATE_VM(last_pool) = pool;
    110a:	4a11      	ldr	r2, [pc, #68]	; (1150 <qstr_add+0xd4>)
    110c:	68fb      	ldr	r3, [r7, #12]
    110e:	6113      	str	r3, [r2, #16]
        DEBUG_printf("QSTR: allocate new pool of size %d\n", MP_STATE_VM(last_pool)->alloc);
    1110:	4b0f      	ldr	r3, [pc, #60]	; (1150 <qstr_add+0xd4>)
    1112:	691b      	ldr	r3, [r3, #16]
    1114:	689b      	ldr	r3, [r3, #8]
    1116:	4619      	mov	r1, r3
    1118:	480e      	ldr	r0, [pc, #56]	; (1154 <qstr_add+0xd8>)
    111a:	f01b fd67 	bl	1cbec <DEBUG_printf>
    }

    // add the new qstr
    MP_STATE_VM(last_pool)->qstrs[MP_STATE_VM(last_pool)->len++] = q_ptr;
    111e:	4b0c      	ldr	r3, [pc, #48]	; (1150 <qstr_add+0xd4>)
    1120:	6919      	ldr	r1, [r3, #16]
    1122:	4b0b      	ldr	r3, [pc, #44]	; (1150 <qstr_add+0xd4>)
    1124:	691a      	ldr	r2, [r3, #16]
    1126:	68d3      	ldr	r3, [r2, #12]
    1128:	1c58      	adds	r0, r3, #1
    112a:	60d0      	str	r0, [r2, #12]
    112c:	3304      	adds	r3, #4
    112e:	687a      	ldr	r2, [r7, #4]
    1130:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    // return id for the newly-added qstr
    return MP_STATE_VM(last_pool)->total_prev_len + MP_STATE_VM(last_pool)->len - 1;
    1134:	4b06      	ldr	r3, [pc, #24]	; (1150 <qstr_add+0xd4>)
    1136:	691b      	ldr	r3, [r3, #16]
    1138:	685a      	ldr	r2, [r3, #4]
    113a:	4b05      	ldr	r3, [pc, #20]	; (1150 <qstr_add+0xd4>)
    113c:	691b      	ldr	r3, [r3, #16]
    113e:	68db      	ldr	r3, [r3, #12]
    1140:	4413      	add	r3, r2
    1142:	3b01      	subs	r3, #1
}
    1144:	4618      	mov	r0, r3
    1146:	3710      	adds	r7, #16
    1148:	46bd      	mov	sp, r7
    114a:	bd80      	pop	{r7, pc}
    114c:	0002100c 	.word	0x0002100c
    1150:	20001248 	.word	0x20001248
    1154:	00021030 	.word	0x00021030

00001158 <qstr_find_strn>:

qstr qstr_find_strn(const char *str, size_t str_len) {
    1158:	b580      	push	{r7, lr}
    115a:	b086      	sub	sp, #24
    115c:	af00      	add	r7, sp, #0
    115e:	6078      	str	r0, [r7, #4]
    1160:	6039      	str	r1, [r7, #0]
    // work out hash of str
    mp_uint_t str_hash = qstr_compute_hash((const byte*)str, str_len);
    1162:	6839      	ldr	r1, [r7, #0]
    1164:	6878      	ldr	r0, [r7, #4]
    1166:	f7ff ff2b 	bl	fc0 <qstr_compute_hash>
    116a:	60f8      	str	r0, [r7, #12]

    // search pools for the data
    for (qstr_pool_t *pool = MP_STATE_VM(last_pool); pool != NULL; pool = pool->prev) {
    116c:	4b22      	ldr	r3, [pc, #136]	; (11f8 <qstr_find_strn+0xa0>)
    116e:	691b      	ldr	r3, [r3, #16]
    1170:	617b      	str	r3, [r7, #20]
    1172:	e038      	b.n	11e6 <qstr_find_strn+0x8e>
        for (const byte **q = pool->qstrs, **q_top = pool->qstrs + pool->len; q < q_top; q++) {
    1174:	697b      	ldr	r3, [r7, #20]
    1176:	3310      	adds	r3, #16
    1178:	613b      	str	r3, [r7, #16]
    117a:	697b      	ldr	r3, [r7, #20]
    117c:	f103 0210 	add.w	r2, r3, #16
    1180:	697b      	ldr	r3, [r7, #20]
    1182:	68db      	ldr	r3, [r3, #12]
    1184:	009b      	lsls	r3, r3, #2
    1186:	4413      	add	r3, r2
    1188:	60bb      	str	r3, [r7, #8]
    118a:	e025      	b.n	11d8 <qstr_find_strn+0x80>
            if (Q_GET_HASH(*q) == str_hash && Q_GET_LENGTH(*q) == str_len && memcmp(Q_GET_DATA(*q), str, str_len) == 0) {
    118c:	693b      	ldr	r3, [r7, #16]
    118e:	681b      	ldr	r3, [r3, #0]
    1190:	781b      	ldrb	r3, [r3, #0]
    1192:	461a      	mov	r2, r3
    1194:	68fb      	ldr	r3, [r7, #12]
    1196:	429a      	cmp	r2, r3
    1198:	d11b      	bne.n	11d2 <qstr_find_strn+0x7a>
    119a:	693b      	ldr	r3, [r7, #16]
    119c:	681b      	ldr	r3, [r3, #0]
    119e:	3301      	adds	r3, #1
    11a0:	781b      	ldrb	r3, [r3, #0]
    11a2:	461a      	mov	r2, r3
    11a4:	683b      	ldr	r3, [r7, #0]
    11a6:	429a      	cmp	r2, r3
    11a8:	d113      	bne.n	11d2 <qstr_find_strn+0x7a>
    11aa:	693b      	ldr	r3, [r7, #16]
    11ac:	681b      	ldr	r3, [r3, #0]
    11ae:	3302      	adds	r3, #2
    11b0:	683a      	ldr	r2, [r7, #0]
    11b2:	6879      	ldr	r1, [r7, #4]
    11b4:	4618      	mov	r0, r3
    11b6:	f01d faa0 	bl	1e6fa <memcmp>
    11ba:	4603      	mov	r3, r0
    11bc:	2b00      	cmp	r3, #0
    11be:	d108      	bne.n	11d2 <qstr_find_strn+0x7a>
                return pool->total_prev_len + (q - pool->qstrs);
    11c0:	697b      	ldr	r3, [r7, #20]
    11c2:	685b      	ldr	r3, [r3, #4]
    11c4:	693a      	ldr	r2, [r7, #16]
    11c6:	6979      	ldr	r1, [r7, #20]
    11c8:	3110      	adds	r1, #16
    11ca:	1a52      	subs	r2, r2, r1
    11cc:	1092      	asrs	r2, r2, #2
    11ce:	4413      	add	r3, r2
    11d0:	e00d      	b.n	11ee <qstr_find_strn+0x96>
        for (const byte **q = pool->qstrs, **q_top = pool->qstrs + pool->len; q < q_top; q++) {
    11d2:	693b      	ldr	r3, [r7, #16]
    11d4:	3304      	adds	r3, #4
    11d6:	613b      	str	r3, [r7, #16]
    11d8:	693a      	ldr	r2, [r7, #16]
    11da:	68bb      	ldr	r3, [r7, #8]
    11dc:	429a      	cmp	r2, r3
    11de:	d3d5      	bcc.n	118c <qstr_find_strn+0x34>
    for (qstr_pool_t *pool = MP_STATE_VM(last_pool); pool != NULL; pool = pool->prev) {
    11e0:	697b      	ldr	r3, [r7, #20]
    11e2:	681b      	ldr	r3, [r3, #0]
    11e4:	617b      	str	r3, [r7, #20]
    11e6:	697b      	ldr	r3, [r7, #20]
    11e8:	2b00      	cmp	r3, #0
    11ea:	d1c3      	bne.n	1174 <qstr_find_strn+0x1c>
            }
        }
    }

    // not found; return null qstr
    return 0;
    11ec:	2300      	movs	r3, #0
}
    11ee:	4618      	mov	r0, r3
    11f0:	3718      	adds	r7, #24
    11f2:	46bd      	mov	sp, r7
    11f4:	bd80      	pop	{r7, pc}
    11f6:	bf00      	nop
    11f8:	20001248 	.word	0x20001248

000011fc <qstr_from_str>:

qstr qstr_from_str(const char *str) {
    11fc:	b580      	push	{r7, lr}
    11fe:	b082      	sub	sp, #8
    1200:	af00      	add	r7, sp, #0
    1202:	6078      	str	r0, [r7, #4]
    return qstr_from_strn(str, strlen(str));
    1204:	6878      	ldr	r0, [r7, #4]
    1206:	f01d fac9 	bl	1e79c <strlen>
    120a:	4603      	mov	r3, r0
    120c:	4619      	mov	r1, r3
    120e:	6878      	ldr	r0, [r7, #4]
    1210:	f000 f805 	bl	121e <qstr_from_strn>
    1214:	4603      	mov	r3, r0
}
    1216:	4618      	mov	r0, r3
    1218:	3708      	adds	r7, #8
    121a:	46bd      	mov	sp, r7
    121c:	bd80      	pop	{r7, pc}

0000121e <qstr_from_strn>:

qstr qstr_from_strn(const char *str, size_t len) {
    121e:	b580      	push	{r7, lr}
    1220:	b088      	sub	sp, #32
    1222:	af00      	add	r7, sp, #0
    1224:	6078      	str	r0, [r7, #4]
    1226:	6039      	str	r1, [r7, #0]
    assert(len < (1 << (8 * MICROPY_QSTR_BYTES_IN_LEN)));
    1228:	683b      	ldr	r3, [r7, #0]
    122a:	2bff      	cmp	r3, #255	; 0xff
    122c:	d905      	bls.n	123a <qstr_from_strn+0x1c>
    122e:	4b56      	ldr	r3, [pc, #344]	; (1388 <qstr_from_strn+0x16a>)
    1230:	4a56      	ldr	r2, [pc, #344]	; (138c <qstr_from_strn+0x16e>)
    1232:	21ba      	movs	r1, #186	; 0xba
    1234:	4856      	ldr	r0, [pc, #344]	; (1390 <qstr_from_strn+0x172>)
    1236:	f01b fe53 	bl	1cee0 <__assert_func>
    QSTR_ENTER();
    qstr q = qstr_find_strn(str, len);
    123a:	6839      	ldr	r1, [r7, #0]
    123c:	6878      	ldr	r0, [r7, #4]
    123e:	f7ff ff8b 	bl	1158 <qstr_find_strn>
    1242:	61f8      	str	r0, [r7, #28]
    if (q == 0) {
    1244:	69fb      	ldr	r3, [r7, #28]
    1246:	2b00      	cmp	r3, #0
    1248:	f040 8099 	bne.w	137e <qstr_from_strn+0x160>
        // qstr does not exist in interned pool so need to add it

        // compute number of bytes needed to intern this string
        size_t n_bytes = MICROPY_QSTR_BYTES_IN_HASH + MICROPY_QSTR_BYTES_IN_LEN + len + 1;
    124c:	683b      	ldr	r3, [r7, #0]
    124e:	3303      	adds	r3, #3
    1250:	617b      	str	r3, [r7, #20]

        if (MP_STATE_VM(qstr_last_chunk) != NULL && MP_STATE_VM(qstr_last_used) + n_bytes > MP_STATE_VM(qstr_last_alloc)) {
    1252:	4b50      	ldr	r3, [pc, #320]	; (1394 <qstr_from_strn+0x176>)
    1254:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
    1258:	2b00      	cmp	r3, #0
    125a:	d030      	beq.n	12be <qstr_from_strn+0xa0>
    125c:	4b4d      	ldr	r3, [pc, #308]	; (1394 <qstr_from_strn+0x176>)
    125e:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
    1262:	697b      	ldr	r3, [r7, #20]
    1264:	441a      	add	r2, r3
    1266:	4b4b      	ldr	r3, [pc, #300]	; (1394 <qstr_from_strn+0x176>)
    1268:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
    126c:	429a      	cmp	r2, r3
    126e:	d926      	bls.n	12be <qstr_from_strn+0xa0>
            // not enough room at end of previously interned string so try to grow
            byte *new_p = m_renew_maybe(byte, MP_STATE_VM(qstr_last_chunk), MP_STATE_VM(qstr_last_alloc), MP_STATE_VM(qstr_last_alloc) + n_bytes, false);
    1270:	4b48      	ldr	r3, [pc, #288]	; (1394 <qstr_from_strn+0x176>)
    1272:	f8d3 00a4 	ldr.w	r0, [r3, #164]	; 0xa4
    1276:	4b47      	ldr	r3, [pc, #284]	; (1394 <qstr_from_strn+0x176>)
    1278:	f8d3 20a8 	ldr.w	r2, [r3, #168]	; 0xa8
    127c:	697b      	ldr	r3, [r7, #20]
    127e:	4413      	add	r3, r2
    1280:	2200      	movs	r2, #0
    1282:	4619      	mov	r1, r3
    1284:	f7ff f8ac 	bl	3e0 <m_realloc_maybe>
    1288:	6138      	str	r0, [r7, #16]
            if (new_p == NULL) {
    128a:	693b      	ldr	r3, [r7, #16]
    128c:	2b00      	cmp	r3, #0
    128e:	d10e      	bne.n	12ae <qstr_from_strn+0x90>
                // could not grow existing memory; shrink it to fit previous
                (void)m_renew_maybe(byte, MP_STATE_VM(qstr_last_chunk), MP_STATE_VM(qstr_last_alloc), MP_STATE_VM(qstr_last_used), false);
    1290:	4b40      	ldr	r3, [pc, #256]	; (1394 <qstr_from_strn+0x176>)
    1292:	f8d3 00a4 	ldr.w	r0, [r3, #164]	; 0xa4
    1296:	4b3f      	ldr	r3, [pc, #252]	; (1394 <qstr_from_strn+0x176>)
    1298:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
    129c:	2200      	movs	r2, #0
    129e:	4619      	mov	r1, r3
    12a0:	f7ff f89e 	bl	3e0 <m_realloc_maybe>
                MP_STATE_VM(qstr_last_chunk) = NULL;
    12a4:	4b3b      	ldr	r3, [pc, #236]	; (1394 <qstr_from_strn+0x176>)
    12a6:	2200      	movs	r2, #0
    12a8:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
    12ac:	e007      	b.n	12be <qstr_from_strn+0xa0>
            } else {
                // could grow existing memory
                MP_STATE_VM(qstr_last_alloc) += n_bytes;
    12ae:	4b39      	ldr	r3, [pc, #228]	; (1394 <qstr_from_strn+0x176>)
    12b0:	f8d3 20a8 	ldr.w	r2, [r3, #168]	; 0xa8
    12b4:	697b      	ldr	r3, [r7, #20]
    12b6:	4413      	add	r3, r2
    12b8:	4a36      	ldr	r2, [pc, #216]	; (1394 <qstr_from_strn+0x176>)
    12ba:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
            }
        }

        if (MP_STATE_VM(qstr_last_chunk) == NULL) {
    12be:	4b35      	ldr	r3, [pc, #212]	; (1394 <qstr_from_strn+0x176>)
    12c0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
    12c4:	2b00      	cmp	r3, #0
    12c6:	d12b      	bne.n	1320 <qstr_from_strn+0x102>
            // no existing memory for the interned string so allocate a new chunk
            size_t al = n_bytes;
    12c8:	697b      	ldr	r3, [r7, #20]
    12ca:	61bb      	str	r3, [r7, #24]
            if (al < MICROPY_ALLOC_QSTR_CHUNK_INIT) {
    12cc:	69bb      	ldr	r3, [r7, #24]
    12ce:	2b7f      	cmp	r3, #127	; 0x7f
    12d0:	d801      	bhi.n	12d6 <qstr_from_strn+0xb8>
                al = MICROPY_ALLOC_QSTR_CHUNK_INIT;
    12d2:	2380      	movs	r3, #128	; 0x80
    12d4:	61bb      	str	r3, [r7, #24]
            }
            MP_STATE_VM(qstr_last_chunk) = m_new_maybe(byte, al);
    12d6:	69b8      	ldr	r0, [r7, #24]
    12d8:	f7ff f83e 	bl	358 <m_malloc_maybe>
    12dc:	4602      	mov	r2, r0
    12de:	4b2d      	ldr	r3, [pc, #180]	; (1394 <qstr_from_strn+0x176>)
    12e0:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
            if (MP_STATE_VM(qstr_last_chunk) == NULL) {
    12e4:	4b2b      	ldr	r3, [pc, #172]	; (1394 <qstr_from_strn+0x176>)
    12e6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
    12ea:	2b00      	cmp	r3, #0
    12ec:	d110      	bne.n	1310 <qstr_from_strn+0xf2>
                // failed to allocate a large chunk so try with exact size
                MP_STATE_VM(qstr_last_chunk) = m_new_maybe(byte, n_bytes);
    12ee:	6978      	ldr	r0, [r7, #20]
    12f0:	f7ff f832 	bl	358 <m_malloc_maybe>
    12f4:	4602      	mov	r2, r0
    12f6:	4b27      	ldr	r3, [pc, #156]	; (1394 <qstr_from_strn+0x176>)
    12f8:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
                if (MP_STATE_VM(qstr_last_chunk) == NULL) {
    12fc:	4b25      	ldr	r3, [pc, #148]	; (1394 <qstr_from_strn+0x176>)
    12fe:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
    1302:	2b00      	cmp	r3, #0
    1304:	d102      	bne.n	130c <qstr_from_strn+0xee>
                    QSTR_EXIT();
                    m_malloc_fail(n_bytes);
    1306:	6978      	ldr	r0, [r7, #20]
    1308:	f00b fffb 	bl	d302 <m_malloc_fail>
                }
                al = n_bytes;
    130c:	697b      	ldr	r3, [r7, #20]
    130e:	61bb      	str	r3, [r7, #24]
            }
            MP_STATE_VM(qstr_last_alloc) = al;
    1310:	4a20      	ldr	r2, [pc, #128]	; (1394 <qstr_from_strn+0x176>)
    1312:	69bb      	ldr	r3, [r7, #24]
    1314:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
            MP_STATE_VM(qstr_last_used) = 0;
    1318:	4b1e      	ldr	r3, [pc, #120]	; (1394 <qstr_from_strn+0x176>)
    131a:	2200      	movs	r2, #0
    131c:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
        }

        // allocate memory from the chunk for this new interned string's data
        byte *q_ptr = MP_STATE_VM(qstr_last_chunk) + MP_STATE_VM(qstr_last_used);
    1320:	4b1c      	ldr	r3, [pc, #112]	; (1394 <qstr_from_strn+0x176>)
    1322:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
    1326:	4b1b      	ldr	r3, [pc, #108]	; (1394 <qstr_from_strn+0x176>)
    1328:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
    132c:	4413      	add	r3, r2
    132e:	60fb      	str	r3, [r7, #12]
        MP_STATE_VM(qstr_last_used) += n_bytes;
    1330:	4b18      	ldr	r3, [pc, #96]	; (1394 <qstr_from_strn+0x176>)
    1332:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
    1336:	697b      	ldr	r3, [r7, #20]
    1338:	4413      	add	r3, r2
    133a:	4a16      	ldr	r2, [pc, #88]	; (1394 <qstr_from_strn+0x176>)
    133c:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

        // store the interned strings' data
        mp_uint_t hash = qstr_compute_hash((const byte*)str, len);
    1340:	6839      	ldr	r1, [r7, #0]
    1342:	6878      	ldr	r0, [r7, #4]
    1344:	f7ff fe3c 	bl	fc0 <qstr_compute_hash>
    1348:	60b8      	str	r0, [r7, #8]
        Q_SET_HASH(q_ptr, hash);
    134a:	68bb      	ldr	r3, [r7, #8]
    134c:	b2da      	uxtb	r2, r3
    134e:	68fb      	ldr	r3, [r7, #12]
    1350:	701a      	strb	r2, [r3, #0]
        Q_SET_LENGTH(q_ptr, len);
    1352:	68fb      	ldr	r3, [r7, #12]
    1354:	3301      	adds	r3, #1
    1356:	683a      	ldr	r2, [r7, #0]
    1358:	b2d2      	uxtb	r2, r2
    135a:	701a      	strb	r2, [r3, #0]
        memcpy(q_ptr + MICROPY_QSTR_BYTES_IN_HASH + MICROPY_QSTR_BYTES_IN_LEN, str, len);
    135c:	68fb      	ldr	r3, [r7, #12]
    135e:	3302      	adds	r3, #2
    1360:	683a      	ldr	r2, [r7, #0]
    1362:	6879      	ldr	r1, [r7, #4]
    1364:	4618      	mov	r0, r3
    1366:	f01d f8e3 	bl	1e530 <memcpy>
        q_ptr[MICROPY_QSTR_BYTES_IN_HASH + MICROPY_QSTR_BYTES_IN_LEN + len] = '\0';
    136a:	683b      	ldr	r3, [r7, #0]
    136c:	3302      	adds	r3, #2
    136e:	68fa      	ldr	r2, [r7, #12]
    1370:	4413      	add	r3, r2
    1372:	2200      	movs	r2, #0
    1374:	701a      	strb	r2, [r3, #0]
        q = qstr_add(q_ptr);
    1376:	68f8      	ldr	r0, [r7, #12]
    1378:	f7ff fe80 	bl	107c <qstr_add>
    137c:	61f8      	str	r0, [r7, #28]
    }
    QSTR_EXIT();
    return q;
    137e:	69fb      	ldr	r3, [r7, #28]
}
    1380:	4618      	mov	r0, r3
    1382:	3720      	adds	r7, #32
    1384:	46bd      	mov	sp, r7
    1386:	bd80      	pop	{r7, pc}
    1388:	00021054 	.word	0x00021054
    138c:	00021094 	.word	0x00021094
    1390:	00021084 	.word	0x00021084
    1394:	20001248 	.word	0x20001248

00001398 <qstr_hash>:

mp_uint_t qstr_hash(qstr q) {
    1398:	b580      	push	{r7, lr}
    139a:	b082      	sub	sp, #8
    139c:	af00      	add	r7, sp, #0
    139e:	6078      	str	r0, [r7, #4]
    return Q_GET_HASH(find_qstr(q));
    13a0:	6878      	ldr	r0, [r7, #4]
    13a2:	f7ff fe4b 	bl	103c <find_qstr>
    13a6:	4603      	mov	r3, r0
    13a8:	781b      	ldrb	r3, [r3, #0]
}
    13aa:	4618      	mov	r0, r3
    13ac:	3708      	adds	r7, #8
    13ae:	46bd      	mov	sp, r7
    13b0:	bd80      	pop	{r7, pc}

000013b2 <qstr_len>:

size_t qstr_len(qstr q) {
    13b2:	b580      	push	{r7, lr}
    13b4:	b084      	sub	sp, #16
    13b6:	af00      	add	r7, sp, #0
    13b8:	6078      	str	r0, [r7, #4]
    const byte *qd = find_qstr(q);
    13ba:	6878      	ldr	r0, [r7, #4]
    13bc:	f7ff fe3e 	bl	103c <find_qstr>
    13c0:	60f8      	str	r0, [r7, #12]
    return Q_GET_LENGTH(qd);
    13c2:	68fb      	ldr	r3, [r7, #12]
    13c4:	3301      	adds	r3, #1
    13c6:	781b      	ldrb	r3, [r3, #0]
}
    13c8:	4618      	mov	r0, r3
    13ca:	3710      	adds	r7, #16
    13cc:	46bd      	mov	sp, r7
    13ce:	bd80      	pop	{r7, pc}

000013d0 <qstr_str>:

const char *qstr_str(qstr q) {
    13d0:	b580      	push	{r7, lr}
    13d2:	b084      	sub	sp, #16
    13d4:	af00      	add	r7, sp, #0
    13d6:	6078      	str	r0, [r7, #4]
    const byte *qd = find_qstr(q);
    13d8:	6878      	ldr	r0, [r7, #4]
    13da:	f7ff fe2f 	bl	103c <find_qstr>
    13de:	60f8      	str	r0, [r7, #12]
    return (const char*)Q_GET_DATA(qd);
    13e0:	68fb      	ldr	r3, [r7, #12]
    13e2:	3302      	adds	r3, #2
}
    13e4:	4618      	mov	r0, r3
    13e6:	3710      	adds	r7, #16
    13e8:	46bd      	mov	sp, r7
    13ea:	bd80      	pop	{r7, pc}

000013ec <qstr_data>:

const byte *qstr_data(qstr q, size_t *len) {
    13ec:	b580      	push	{r7, lr}
    13ee:	b084      	sub	sp, #16
    13f0:	af00      	add	r7, sp, #0
    13f2:	6078      	str	r0, [r7, #4]
    13f4:	6039      	str	r1, [r7, #0]
    const byte *qd = find_qstr(q);
    13f6:	6878      	ldr	r0, [r7, #4]
    13f8:	f7ff fe20 	bl	103c <find_qstr>
    13fc:	60f8      	str	r0, [r7, #12]
    *len = Q_GET_LENGTH(qd);
    13fe:	68fb      	ldr	r3, [r7, #12]
    1400:	3301      	adds	r3, #1
    1402:	781b      	ldrb	r3, [r3, #0]
    1404:	461a      	mov	r2, r3
    1406:	683b      	ldr	r3, [r7, #0]
    1408:	601a      	str	r2, [r3, #0]
    return Q_GET_DATA(qd);
    140a:	68fb      	ldr	r3, [r7, #12]
    140c:	3302      	adds	r3, #2
}
    140e:	4618      	mov	r0, r3
    1410:	3710      	adds	r7, #16
    1412:	46bd      	mov	sp, r7
    1414:	bd80      	pop	{r7, pc}

00001416 <qstr_pool_info>:

void qstr_pool_info(size_t *n_pool, size_t *n_qstr, size_t *n_str_data_bytes, size_t *n_total_bytes) {
    1416:	b580      	push	{r7, lr}
    1418:	b088      	sub	sp, #32
    141a:	af00      	add	r7, sp, #0
    141c:	60f8      	str	r0, [r7, #12]
    141e:	60b9      	str	r1, [r7, #8]
    1420:	607a      	str	r2, [r7, #4]
    1422:	603b      	str	r3, [r7, #0]
    QSTR_ENTER();
    *n_pool = 0;
    1424:	68fb      	ldr	r3, [r7, #12]
    1426:	2200      	movs	r2, #0
    1428:	601a      	str	r2, [r3, #0]
    *n_qstr = 0;
    142a:	68bb      	ldr	r3, [r7, #8]
    142c:	2200      	movs	r2, #0
    142e:	601a      	str	r2, [r3, #0]
    *n_str_data_bytes = 0;
    1430:	687b      	ldr	r3, [r7, #4]
    1432:	2200      	movs	r2, #0
    1434:	601a      	str	r2, [r3, #0]
    *n_total_bytes = 0;
    1436:	683b      	ldr	r3, [r7, #0]
    1438:	2200      	movs	r2, #0
    143a:	601a      	str	r2, [r3, #0]
    for (qstr_pool_t *pool = MP_STATE_VM(last_pool); pool != NULL && pool != &CONST_POOL; pool = pool->prev) {
    143c:	4b25      	ldr	r3, [pc, #148]	; (14d4 <qstr_pool_info+0xbe>)
    143e:	691b      	ldr	r3, [r3, #16]
    1440:	61fb      	str	r3, [r7, #28]
    1442:	e034      	b.n	14ae <qstr_pool_info+0x98>
        *n_pool += 1;
    1444:	68fb      	ldr	r3, [r7, #12]
    1446:	681b      	ldr	r3, [r3, #0]
    1448:	1c5a      	adds	r2, r3, #1
    144a:	68fb      	ldr	r3, [r7, #12]
    144c:	601a      	str	r2, [r3, #0]
        *n_qstr += pool->len;
    144e:	68bb      	ldr	r3, [r7, #8]
    1450:	681a      	ldr	r2, [r3, #0]
    1452:	69fb      	ldr	r3, [r7, #28]
    1454:	68db      	ldr	r3, [r3, #12]
    1456:	441a      	add	r2, r3
    1458:	68bb      	ldr	r3, [r7, #8]
    145a:	601a      	str	r2, [r3, #0]
        for (const byte **q = pool->qstrs, **q_top = pool->qstrs + pool->len; q < q_top; q++) {
    145c:	69fb      	ldr	r3, [r7, #28]
    145e:	3310      	adds	r3, #16
    1460:	61bb      	str	r3, [r7, #24]
    1462:	69fb      	ldr	r3, [r7, #28]
    1464:	f103 0210 	add.w	r2, r3, #16
    1468:	69fb      	ldr	r3, [r7, #28]
    146a:	68db      	ldr	r3, [r3, #12]
    146c:	009b      	lsls	r3, r3, #2
    146e:	4413      	add	r3, r2
    1470:	617b      	str	r3, [r7, #20]
    1472:	e00c      	b.n	148e <qstr_pool_info+0x78>
            *n_str_data_bytes += Q_GET_ALLOC(*q);
    1474:	687b      	ldr	r3, [r7, #4]
    1476:	681b      	ldr	r3, [r3, #0]
    1478:	69ba      	ldr	r2, [r7, #24]
    147a:	6812      	ldr	r2, [r2, #0]
    147c:	3201      	adds	r2, #1
    147e:	7812      	ldrb	r2, [r2, #0]
    1480:	4413      	add	r3, r2
    1482:	1cda      	adds	r2, r3, #3
    1484:	687b      	ldr	r3, [r7, #4]
    1486:	601a      	str	r2, [r3, #0]
        for (const byte **q = pool->qstrs, **q_top = pool->qstrs + pool->len; q < q_top; q++) {
    1488:	69bb      	ldr	r3, [r7, #24]
    148a:	3304      	adds	r3, #4
    148c:	61bb      	str	r3, [r7, #24]
    148e:	69ba      	ldr	r2, [r7, #24]
    1490:	697b      	ldr	r3, [r7, #20]
    1492:	429a      	cmp	r2, r3
    1494:	d3ee      	bcc.n	1474 <qstr_pool_info+0x5e>
        }
        #if MICROPY_ENABLE_GC
        *n_total_bytes += gc_nbytes(pool); // this counts actual bytes used in heap
    1496:	69f8      	ldr	r0, [r7, #28]
    1498:	f7ff fb82 	bl	ba0 <gc_nbytes>
    149c:	4602      	mov	r2, r0
    149e:	683b      	ldr	r3, [r7, #0]
    14a0:	681b      	ldr	r3, [r3, #0]
    14a2:	441a      	add	r2, r3
    14a4:	683b      	ldr	r3, [r7, #0]
    14a6:	601a      	str	r2, [r3, #0]
    for (qstr_pool_t *pool = MP_STATE_VM(last_pool); pool != NULL && pool != &CONST_POOL; pool = pool->prev) {
    14a8:	69fb      	ldr	r3, [r7, #28]
    14aa:	681b      	ldr	r3, [r3, #0]
    14ac:	61fb      	str	r3, [r7, #28]
    14ae:	69fb      	ldr	r3, [r7, #28]
    14b0:	2b00      	cmp	r3, #0
    14b2:	d003      	beq.n	14bc <qstr_pool_info+0xa6>
    14b4:	69fb      	ldr	r3, [r7, #28]
    14b6:	4a08      	ldr	r2, [pc, #32]	; (14d8 <qstr_pool_info+0xc2>)
    14b8:	4293      	cmp	r3, r2
    14ba:	d1c3      	bne.n	1444 <qstr_pool_info+0x2e>
        #else
        *n_total_bytes += sizeof(qstr_pool_t) + sizeof(qstr) * pool->alloc;
        #endif
    }
    *n_total_bytes += *n_str_data_bytes;
    14bc:	683b      	ldr	r3, [r7, #0]
    14be:	681a      	ldr	r2, [r3, #0]
    14c0:	687b      	ldr	r3, [r7, #4]
    14c2:	681b      	ldr	r3, [r3, #0]
    14c4:	441a      	add	r2, r3
    14c6:	683b      	ldr	r3, [r7, #0]
    14c8:	601a      	str	r2, [r3, #0]
    QSTR_EXIT();
}
    14ca:	bf00      	nop
    14cc:	3720      	adds	r7, #32
    14ce:	46bd      	mov	sp, r7
    14d0:	bd80      	pop	{r7, pc}
    14d2:	bf00      	nop
    14d4:	20001248 	.word	0x20001248
    14d8:	0002806c 	.word	0x0002806c

000014dc <vstr_init>:

// returned value is always at least 1 greater than argument
#define ROUND_ALLOC(a) (((a) & ((~0U) - 7)) + 8)

// Init the vstr so it allocs exactly given number of bytes.  Set length to zero.
void vstr_init(vstr_t *vstr, size_t alloc) {
    14dc:	b580      	push	{r7, lr}
    14de:	b082      	sub	sp, #8
    14e0:	af00      	add	r7, sp, #0
    14e2:	6078      	str	r0, [r7, #4]
    14e4:	6039      	str	r1, [r7, #0]
    if (alloc < 1) {
    14e6:	683b      	ldr	r3, [r7, #0]
    14e8:	2b00      	cmp	r3, #0
    14ea:	d101      	bne.n	14f0 <vstr_init+0x14>
        alloc = 1;
    14ec:	2301      	movs	r3, #1
    14ee:	603b      	str	r3, [r7, #0]
    }
    vstr->alloc = alloc;
    14f0:	687b      	ldr	r3, [r7, #4]
    14f2:	683a      	ldr	r2, [r7, #0]
    14f4:	601a      	str	r2, [r3, #0]
    vstr->len = 0;
    14f6:	687b      	ldr	r3, [r7, #4]
    14f8:	2200      	movs	r2, #0
    14fa:	605a      	str	r2, [r3, #4]
    vstr->buf = m_new(char, vstr->alloc);
    14fc:	687b      	ldr	r3, [r7, #4]
    14fe:	681b      	ldr	r3, [r3, #0]
    1500:	4618      	mov	r0, r3
    1502:	f7fe ff0b 	bl	31c <m_malloc>
    1506:	4602      	mov	r2, r0
    1508:	687b      	ldr	r3, [r7, #4]
    150a:	609a      	str	r2, [r3, #8]
    vstr->fixed_buf = false;
    150c:	687a      	ldr	r2, [r7, #4]
    150e:	7b13      	ldrb	r3, [r2, #12]
    1510:	f36f 0300 	bfc	r3, #0, #1
    1514:	7313      	strb	r3, [r2, #12]
}
    1516:	bf00      	nop
    1518:	3708      	adds	r7, #8
    151a:	46bd      	mov	sp, r7
    151c:	bd80      	pop	{r7, pc}

0000151e <vstr_init_len>:

// Init the vstr so it allocs exactly enough ram to hold a null-terminated
// string of the given length, and set the length.
void vstr_init_len(vstr_t *vstr, size_t len) {
    151e:	b580      	push	{r7, lr}
    1520:	b082      	sub	sp, #8
    1522:	af00      	add	r7, sp, #0
    1524:	6078      	str	r0, [r7, #4]
    1526:	6039      	str	r1, [r7, #0]
    vstr_init(vstr, len + 1);
    1528:	683b      	ldr	r3, [r7, #0]
    152a:	3301      	adds	r3, #1
    152c:	4619      	mov	r1, r3
    152e:	6878      	ldr	r0, [r7, #4]
    1530:	f7ff ffd4 	bl	14dc <vstr_init>
    vstr->len = len;
    1534:	687b      	ldr	r3, [r7, #4]
    1536:	683a      	ldr	r2, [r7, #0]
    1538:	605a      	str	r2, [r3, #4]
}
    153a:	bf00      	nop
    153c:	3708      	adds	r7, #8
    153e:	46bd      	mov	sp, r7
    1540:	bd80      	pop	{r7, pc}

00001542 <vstr_init_fixed_buf>:

void vstr_init_fixed_buf(vstr_t *vstr, size_t alloc, char *buf) {
    1542:	b480      	push	{r7}
    1544:	b085      	sub	sp, #20
    1546:	af00      	add	r7, sp, #0
    1548:	60f8      	str	r0, [r7, #12]
    154a:	60b9      	str	r1, [r7, #8]
    154c:	607a      	str	r2, [r7, #4]
    vstr->alloc = alloc;
    154e:	68fb      	ldr	r3, [r7, #12]
    1550:	68ba      	ldr	r2, [r7, #8]
    1552:	601a      	str	r2, [r3, #0]
    vstr->len = 0;
    1554:	68fb      	ldr	r3, [r7, #12]
    1556:	2200      	movs	r2, #0
    1558:	605a      	str	r2, [r3, #4]
    vstr->buf = buf;
    155a:	68fb      	ldr	r3, [r7, #12]
    155c:	687a      	ldr	r2, [r7, #4]
    155e:	609a      	str	r2, [r3, #8]
    vstr->fixed_buf = true;
    1560:	68fa      	ldr	r2, [r7, #12]
    1562:	7b13      	ldrb	r3, [r2, #12]
    1564:	f043 0301 	orr.w	r3, r3, #1
    1568:	7313      	strb	r3, [r2, #12]
}
    156a:	bf00      	nop
    156c:	3714      	adds	r7, #20
    156e:	46bd      	mov	sp, r7
    1570:	f85d 7b04 	ldr.w	r7, [sp], #4
    1574:	4770      	bx	lr

00001576 <vstr_init_print>:

void vstr_init_print(vstr_t *vstr, size_t alloc, mp_print_t *print) {
    1576:	b580      	push	{r7, lr}
    1578:	b084      	sub	sp, #16
    157a:	af00      	add	r7, sp, #0
    157c:	60f8      	str	r0, [r7, #12]
    157e:	60b9      	str	r1, [r7, #8]
    1580:	607a      	str	r2, [r7, #4]
    vstr_init(vstr, alloc);
    1582:	68b9      	ldr	r1, [r7, #8]
    1584:	68f8      	ldr	r0, [r7, #12]
    1586:	f7ff ffa9 	bl	14dc <vstr_init>
    print->data = vstr;
    158a:	687b      	ldr	r3, [r7, #4]
    158c:	68fa      	ldr	r2, [r7, #12]
    158e:	601a      	str	r2, [r3, #0]
    print->print_strn = (mp_print_strn_t)vstr_add_strn;
    1590:	687b      	ldr	r3, [r7, #4]
    1592:	4a03      	ldr	r2, [pc, #12]	; (15a0 <vstr_init_print+0x2a>)
    1594:	605a      	str	r2, [r3, #4]
}
    1596:	bf00      	nop
    1598:	3710      	adds	r7, #16
    159a:	46bd      	mov	sp, r7
    159c:	bd80      	pop	{r7, pc}
    159e:	bf00      	nop
    15a0:	000017e7 	.word	0x000017e7

000015a4 <vstr_clear>:

void vstr_clear(vstr_t *vstr) {
    15a4:	b580      	push	{r7, lr}
    15a6:	b082      	sub	sp, #8
    15a8:	af00      	add	r7, sp, #0
    15aa:	6078      	str	r0, [r7, #4]
    if (!vstr->fixed_buf) {
    15ac:	687b      	ldr	r3, [r7, #4]
    15ae:	7b1b      	ldrb	r3, [r3, #12]
    15b0:	f3c3 0300 	ubfx	r3, r3, #0, #1
    15b4:	b2db      	uxtb	r3, r3
    15b6:	f083 0301 	eor.w	r3, r3, #1
    15ba:	b2db      	uxtb	r3, r3
    15bc:	2b00      	cmp	r3, #0
    15be:	d004      	beq.n	15ca <vstr_clear+0x26>
        m_del(char, vstr->buf, vstr->alloc);
    15c0:	687b      	ldr	r3, [r7, #4]
    15c2:	689b      	ldr	r3, [r3, #8]
    15c4:	4618      	mov	r0, r3
    15c6:	f7fe ff27 	bl	418 <m_free>
    }
    vstr->buf = NULL;
    15ca:	687b      	ldr	r3, [r7, #4]
    15cc:	2200      	movs	r2, #0
    15ce:	609a      	str	r2, [r3, #8]
}
    15d0:	bf00      	nop
    15d2:	3708      	adds	r7, #8
    15d4:	46bd      	mov	sp, r7
    15d6:	bd80      	pop	{r7, pc}

000015d8 <vstr_new>:

vstr_t *vstr_new(size_t alloc) {
    15d8:	b580      	push	{r7, lr}
    15da:	b084      	sub	sp, #16
    15dc:	af00      	add	r7, sp, #0
    15de:	6078      	str	r0, [r7, #4]
    vstr_t *vstr = m_new_obj(vstr_t);
    15e0:	2010      	movs	r0, #16
    15e2:	f7fe fe9b 	bl	31c <m_malloc>
    15e6:	60f8      	str	r0, [r7, #12]
    vstr_init(vstr, alloc);
    15e8:	6879      	ldr	r1, [r7, #4]
    15ea:	68f8      	ldr	r0, [r7, #12]
    15ec:	f7ff ff76 	bl	14dc <vstr_init>
    return vstr;
    15f0:	68fb      	ldr	r3, [r7, #12]
}
    15f2:	4618      	mov	r0, r3
    15f4:	3710      	adds	r7, #16
    15f6:	46bd      	mov	sp, r7
    15f8:	bd80      	pop	{r7, pc}

000015fa <vstr_free>:

void vstr_free(vstr_t *vstr) {
    15fa:	b580      	push	{r7, lr}
    15fc:	b082      	sub	sp, #8
    15fe:	af00      	add	r7, sp, #0
    1600:	6078      	str	r0, [r7, #4]
    if (vstr != NULL) {
    1602:	687b      	ldr	r3, [r7, #4]
    1604:	2b00      	cmp	r3, #0
    1606:	d011      	beq.n	162c <vstr_free+0x32>
        if (!vstr->fixed_buf) {
    1608:	687b      	ldr	r3, [r7, #4]
    160a:	7b1b      	ldrb	r3, [r3, #12]
    160c:	f3c3 0300 	ubfx	r3, r3, #0, #1
    1610:	b2db      	uxtb	r3, r3
    1612:	f083 0301 	eor.w	r3, r3, #1
    1616:	b2db      	uxtb	r3, r3
    1618:	2b00      	cmp	r3, #0
    161a:	d004      	beq.n	1626 <vstr_free+0x2c>
            m_del(char, vstr->buf, vstr->alloc);
    161c:	687b      	ldr	r3, [r7, #4]
    161e:	689b      	ldr	r3, [r3, #8]
    1620:	4618      	mov	r0, r3
    1622:	f7fe fef9 	bl	418 <m_free>
        }
        m_del_obj(vstr_t, vstr);
    1626:	6878      	ldr	r0, [r7, #4]
    1628:	f7fe fef6 	bl	418 <m_free>
    }
}
    162c:	bf00      	nop
    162e:	3708      	adds	r7, #8
    1630:	46bd      	mov	sp, r7
    1632:	bd80      	pop	{r7, pc}

00001634 <vstr_extend>:

// Extend vstr strictly by requested size, return pointer to newly added chunk.
char *vstr_extend(vstr_t *vstr, size_t size) {
    1634:	b580      	push	{r7, lr}
    1636:	b084      	sub	sp, #16
    1638:	af00      	add	r7, sp, #0
    163a:	6078      	str	r0, [r7, #4]
    163c:	6039      	str	r1, [r7, #0]
    if (vstr->fixed_buf) {
    163e:	687b      	ldr	r3, [r7, #4]
    1640:	7b1b      	ldrb	r3, [r3, #12]
    1642:	f003 0301 	and.w	r3, r3, #1
    1646:	b2db      	uxtb	r3, r3
    1648:	2b00      	cmp	r3, #0
    164a:	d003      	beq.n	1654 <vstr_extend+0x20>
        // We can't reallocate, and the caller is expecting the space to
        // be there, so the only safe option is to raise an exception.
        mp_raise_msg(&mp_type_RuntimeError, NULL);
    164c:	2100      	movs	r1, #0
    164e:	4810      	ldr	r0, [pc, #64]	; (1690 <vstr_extend+0x5c>)
    1650:	f00b fe7a 	bl	d348 <mp_raise_msg>
    }
    char *new_buf = m_renew(char, vstr->buf, vstr->alloc, vstr->alloc + size);
    1654:	687b      	ldr	r3, [r7, #4]
    1656:	6898      	ldr	r0, [r3, #8]
    1658:	687b      	ldr	r3, [r7, #4]
    165a:	681a      	ldr	r2, [r3, #0]
    165c:	683b      	ldr	r3, [r7, #0]
    165e:	4413      	add	r3, r2
    1660:	4619      	mov	r1, r3
    1662:	f7fe fe9c 	bl	39e <m_realloc>
    1666:	60f8      	str	r0, [r7, #12]
    char *p = new_buf + vstr->alloc;
    1668:	687b      	ldr	r3, [r7, #4]
    166a:	681b      	ldr	r3, [r3, #0]
    166c:	68fa      	ldr	r2, [r7, #12]
    166e:	4413      	add	r3, r2
    1670:	60bb      	str	r3, [r7, #8]
    vstr->alloc += size;
    1672:	687b      	ldr	r3, [r7, #4]
    1674:	681a      	ldr	r2, [r3, #0]
    1676:	683b      	ldr	r3, [r7, #0]
    1678:	441a      	add	r2, r3
    167a:	687b      	ldr	r3, [r7, #4]
    167c:	601a      	str	r2, [r3, #0]
    vstr->buf = new_buf;
    167e:	687b      	ldr	r3, [r7, #4]
    1680:	68fa      	ldr	r2, [r7, #12]
    1682:	609a      	str	r2, [r3, #8]
    return p;
    1684:	68bb      	ldr	r3, [r7, #8]
}
    1686:	4618      	mov	r0, r3
    1688:	3710      	adds	r7, #16
    168a:	46bd      	mov	sp, r7
    168c:	bd80      	pop	{r7, pc}
    168e:	bf00      	nop
    1690:	00024284 	.word	0x00024284

00001694 <vstr_ensure_extra>:

STATIC void vstr_ensure_extra(vstr_t *vstr, size_t size) {
    1694:	b580      	push	{r7, lr}
    1696:	b084      	sub	sp, #16
    1698:	af00      	add	r7, sp, #0
    169a:	6078      	str	r0, [r7, #4]
    169c:	6039      	str	r1, [r7, #0]
    if (vstr->len + size > vstr->alloc) {
    169e:	687b      	ldr	r3, [r7, #4]
    16a0:	685a      	ldr	r2, [r3, #4]
    16a2:	683b      	ldr	r3, [r7, #0]
    16a4:	441a      	add	r2, r3
    16a6:	687b      	ldr	r3, [r7, #4]
    16a8:	681b      	ldr	r3, [r3, #0]
    16aa:	429a      	cmp	r2, r3
    16ac:	d920      	bls.n	16f0 <vstr_ensure_extra+0x5c>
        if (vstr->fixed_buf) {
    16ae:	687b      	ldr	r3, [r7, #4]
    16b0:	7b1b      	ldrb	r3, [r3, #12]
    16b2:	f003 0301 	and.w	r3, r3, #1
    16b6:	b2db      	uxtb	r3, r3
    16b8:	2b00      	cmp	r3, #0
    16ba:	d003      	beq.n	16c4 <vstr_ensure_extra+0x30>
            // We can't reallocate, and the caller is expecting the space to
            // be there, so the only safe option is to raise an exception.
            mp_raise_msg(&mp_type_RuntimeError, NULL);
    16bc:	2100      	movs	r1, #0
    16be:	480e      	ldr	r0, [pc, #56]	; (16f8 <vstr_ensure_extra+0x64>)
    16c0:	f00b fe42 	bl	d348 <mp_raise_msg>
        }
        size_t new_alloc = ROUND_ALLOC((vstr->len + size) + 16);
    16c4:	687b      	ldr	r3, [r7, #4]
    16c6:	685a      	ldr	r2, [r3, #4]
    16c8:	683b      	ldr	r3, [r7, #0]
    16ca:	4413      	add	r3, r2
    16cc:	3310      	adds	r3, #16
    16ce:	f023 0307 	bic.w	r3, r3, #7
    16d2:	3308      	adds	r3, #8
    16d4:	60fb      	str	r3, [r7, #12]
        char *new_buf = m_renew(char, vstr->buf, vstr->alloc, new_alloc);
    16d6:	687b      	ldr	r3, [r7, #4]
    16d8:	689b      	ldr	r3, [r3, #8]
    16da:	68f9      	ldr	r1, [r7, #12]
    16dc:	4618      	mov	r0, r3
    16de:	f7fe fe5e 	bl	39e <m_realloc>
    16e2:	60b8      	str	r0, [r7, #8]
        vstr->alloc = new_alloc;
    16e4:	687b      	ldr	r3, [r7, #4]
    16e6:	68fa      	ldr	r2, [r7, #12]
    16e8:	601a      	str	r2, [r3, #0]
        vstr->buf = new_buf;
    16ea:	687b      	ldr	r3, [r7, #4]
    16ec:	68ba      	ldr	r2, [r7, #8]
    16ee:	609a      	str	r2, [r3, #8]
    }
}
    16f0:	bf00      	nop
    16f2:	3710      	adds	r7, #16
    16f4:	46bd      	mov	sp, r7
    16f6:	bd80      	pop	{r7, pc}
    16f8:	00024284 	.word	0x00024284

000016fc <vstr_hint_size>:

void vstr_hint_size(vstr_t *vstr, size_t size) {
    16fc:	b580      	push	{r7, lr}
    16fe:	b082      	sub	sp, #8
    1700:	af00      	add	r7, sp, #0
    1702:	6078      	str	r0, [r7, #4]
    1704:	6039      	str	r1, [r7, #0]
    vstr_ensure_extra(vstr, size);
    1706:	6839      	ldr	r1, [r7, #0]
    1708:	6878      	ldr	r0, [r7, #4]
    170a:	f7ff ffc3 	bl	1694 <vstr_ensure_extra>
}
    170e:	bf00      	nop
    1710:	3708      	adds	r7, #8
    1712:	46bd      	mov	sp, r7
    1714:	bd80      	pop	{r7, pc}

00001716 <vstr_add_len>:

char *vstr_add_len(vstr_t *vstr, size_t len) {
    1716:	b580      	push	{r7, lr}
    1718:	b084      	sub	sp, #16
    171a:	af00      	add	r7, sp, #0
    171c:	6078      	str	r0, [r7, #4]
    171e:	6039      	str	r1, [r7, #0]
    vstr_ensure_extra(vstr, len);
    1720:	6839      	ldr	r1, [r7, #0]
    1722:	6878      	ldr	r0, [r7, #4]
    1724:	f7ff ffb6 	bl	1694 <vstr_ensure_extra>
    char *buf = vstr->buf + vstr->len;
    1728:	687b      	ldr	r3, [r7, #4]
    172a:	689a      	ldr	r2, [r3, #8]
    172c:	687b      	ldr	r3, [r7, #4]
    172e:	685b      	ldr	r3, [r3, #4]
    1730:	4413      	add	r3, r2
    1732:	60fb      	str	r3, [r7, #12]
    vstr->len += len;
    1734:	687b      	ldr	r3, [r7, #4]
    1736:	685a      	ldr	r2, [r3, #4]
    1738:	683b      	ldr	r3, [r7, #0]
    173a:	441a      	add	r2, r3
    173c:	687b      	ldr	r3, [r7, #4]
    173e:	605a      	str	r2, [r3, #4]
    return buf;
    1740:	68fb      	ldr	r3, [r7, #12]
}
    1742:	4618      	mov	r0, r3
    1744:	3710      	adds	r7, #16
    1746:	46bd      	mov	sp, r7
    1748:	bd80      	pop	{r7, pc}

0000174a <vstr_null_terminated_str>:

// Doesn't increase len, just makes sure there is a null byte at the end
char *vstr_null_terminated_str(vstr_t *vstr) {
    174a:	b580      	push	{r7, lr}
    174c:	b082      	sub	sp, #8
    174e:	af00      	add	r7, sp, #0
    1750:	6078      	str	r0, [r7, #4]
    // If there's no more room, add single byte
    if (vstr->alloc == vstr->len) {
    1752:	687b      	ldr	r3, [r7, #4]
    1754:	681a      	ldr	r2, [r3, #0]
    1756:	687b      	ldr	r3, [r7, #4]
    1758:	685b      	ldr	r3, [r3, #4]
    175a:	429a      	cmp	r2, r3
    175c:	d103      	bne.n	1766 <vstr_null_terminated_str+0x1c>
        vstr_extend(vstr, 1);
    175e:	2101      	movs	r1, #1
    1760:	6878      	ldr	r0, [r7, #4]
    1762:	f7ff ff67 	bl	1634 <vstr_extend>
    }
    vstr->buf[vstr->len] = '\0';
    1766:	687b      	ldr	r3, [r7, #4]
    1768:	689a      	ldr	r2, [r3, #8]
    176a:	687b      	ldr	r3, [r7, #4]
    176c:	685b      	ldr	r3, [r3, #4]
    176e:	4413      	add	r3, r2
    1770:	2200      	movs	r2, #0
    1772:	701a      	strb	r2, [r3, #0]
    return vstr->buf;
    1774:	687b      	ldr	r3, [r7, #4]
    1776:	689b      	ldr	r3, [r3, #8]
}
    1778:	4618      	mov	r0, r3
    177a:	3708      	adds	r7, #8
    177c:	46bd      	mov	sp, r7
    177e:	bd80      	pop	{r7, pc}

00001780 <vstr_add_byte>:

void vstr_add_byte(vstr_t *vstr, byte b) {
    1780:	b580      	push	{r7, lr}
    1782:	b084      	sub	sp, #16
    1784:	af00      	add	r7, sp, #0
    1786:	6078      	str	r0, [r7, #4]
    1788:	460b      	mov	r3, r1
    178a:	70fb      	strb	r3, [r7, #3]
    byte *buf = (byte*)vstr_add_len(vstr, 1);
    178c:	2101      	movs	r1, #1
    178e:	6878      	ldr	r0, [r7, #4]
    1790:	f7ff ffc1 	bl	1716 <vstr_add_len>
    1794:	60f8      	str	r0, [r7, #12]
    buf[0] = b;
    1796:	68fb      	ldr	r3, [r7, #12]
    1798:	78fa      	ldrb	r2, [r7, #3]
    179a:	701a      	strb	r2, [r3, #0]
}
    179c:	bf00      	nop
    179e:	3710      	adds	r7, #16
    17a0:	46bd      	mov	sp, r7
    17a2:	bd80      	pop	{r7, pc}

000017a4 <vstr_add_char>:

void vstr_add_char(vstr_t *vstr, unichar c) {
    17a4:	b580      	push	{r7, lr}
    17a6:	b082      	sub	sp, #8
    17a8:	af00      	add	r7, sp, #0
    17aa:	6078      	str	r0, [r7, #4]
    17ac:	6039      	str	r1, [r7, #0]
        buf[1] = ((c >> 12) & 0x3F) | 0x80;
        buf[2] = ((c >> 6) & 0x3F) | 0x80;
        buf[3] = (c & 0x3F) | 0x80;
    }
#else
    vstr_add_byte(vstr, c);
    17ae:	683b      	ldr	r3, [r7, #0]
    17b0:	b2db      	uxtb	r3, r3
    17b2:	4619      	mov	r1, r3
    17b4:	6878      	ldr	r0, [r7, #4]
    17b6:	f7ff ffe3 	bl	1780 <vstr_add_byte>
#endif
}
    17ba:	bf00      	nop
    17bc:	3708      	adds	r7, #8
    17be:	46bd      	mov	sp, r7
    17c0:	bd80      	pop	{r7, pc}

000017c2 <vstr_add_str>:

void vstr_add_str(vstr_t *vstr, const char *str) {
    17c2:	b580      	push	{r7, lr}
    17c4:	b082      	sub	sp, #8
    17c6:	af00      	add	r7, sp, #0
    17c8:	6078      	str	r0, [r7, #4]
    17ca:	6039      	str	r1, [r7, #0]
    vstr_add_strn(vstr, str, strlen(str));
    17cc:	6838      	ldr	r0, [r7, #0]
    17ce:	f01c ffe5 	bl	1e79c <strlen>
    17d2:	4603      	mov	r3, r0
    17d4:	461a      	mov	r2, r3
    17d6:	6839      	ldr	r1, [r7, #0]
    17d8:	6878      	ldr	r0, [r7, #4]
    17da:	f000 f804 	bl	17e6 <vstr_add_strn>
}
    17de:	bf00      	nop
    17e0:	3708      	adds	r7, #8
    17e2:	46bd      	mov	sp, r7
    17e4:	bd80      	pop	{r7, pc}

000017e6 <vstr_add_strn>:

void vstr_add_strn(vstr_t *vstr, const char *str, size_t len) {
    17e6:	b580      	push	{r7, lr}
    17e8:	b084      	sub	sp, #16
    17ea:	af00      	add	r7, sp, #0
    17ec:	60f8      	str	r0, [r7, #12]
    17ee:	60b9      	str	r1, [r7, #8]
    17f0:	607a      	str	r2, [r7, #4]
    vstr_ensure_extra(vstr, len);
    17f2:	6879      	ldr	r1, [r7, #4]
    17f4:	68f8      	ldr	r0, [r7, #12]
    17f6:	f7ff ff4d 	bl	1694 <vstr_ensure_extra>
    memmove(vstr->buf + vstr->len, str, len);
    17fa:	68fb      	ldr	r3, [r7, #12]
    17fc:	689a      	ldr	r2, [r3, #8]
    17fe:	68fb      	ldr	r3, [r7, #12]
    1800:	685b      	ldr	r3, [r3, #4]
    1802:	4413      	add	r3, r2
    1804:	687a      	ldr	r2, [r7, #4]
    1806:	68b9      	ldr	r1, [r7, #8]
    1808:	4618      	mov	r0, r3
    180a:	f01c fef6 	bl	1e5fa <memmove>
    vstr->len += len;
    180e:	68fb      	ldr	r3, [r7, #12]
    1810:	685a      	ldr	r2, [r3, #4]
    1812:	687b      	ldr	r3, [r7, #4]
    1814:	441a      	add	r2, r3
    1816:	68fb      	ldr	r3, [r7, #12]
    1818:	605a      	str	r2, [r3, #4]
}
    181a:	bf00      	nop
    181c:	3710      	adds	r7, #16
    181e:	46bd      	mov	sp, r7
    1820:	bd80      	pop	{r7, pc}

00001822 <vstr_ins_blank_bytes>:

STATIC char *vstr_ins_blank_bytes(vstr_t *vstr, size_t byte_pos, size_t byte_len) {
    1822:	b580      	push	{r7, lr}
    1824:	b086      	sub	sp, #24
    1826:	af00      	add	r7, sp, #0
    1828:	60f8      	str	r0, [r7, #12]
    182a:	60b9      	str	r1, [r7, #8]
    182c:	607a      	str	r2, [r7, #4]
    size_t l = vstr->len;
    182e:	68fb      	ldr	r3, [r7, #12]
    1830:	685b      	ldr	r3, [r3, #4]
    1832:	617b      	str	r3, [r7, #20]
    if (byte_pos > l) {
    1834:	68ba      	ldr	r2, [r7, #8]
    1836:	697b      	ldr	r3, [r7, #20]
    1838:	429a      	cmp	r2, r3
    183a:	d901      	bls.n	1840 <vstr_ins_blank_bytes+0x1e>
        byte_pos = l;
    183c:	697b      	ldr	r3, [r7, #20]
    183e:	60bb      	str	r3, [r7, #8]
    }
    if (byte_len > 0) {
    1840:	687b      	ldr	r3, [r7, #4]
    1842:	2b00      	cmp	r3, #0
    1844:	d019      	beq.n	187a <vstr_ins_blank_bytes+0x58>
        // ensure room for the new bytes
        vstr_ensure_extra(vstr, byte_len);
    1846:	6879      	ldr	r1, [r7, #4]
    1848:	68f8      	ldr	r0, [r7, #12]
    184a:	f7ff ff23 	bl	1694 <vstr_ensure_extra>
        // copy up the string to make room for the new bytes
        memmove(vstr->buf + byte_pos + byte_len, vstr->buf + byte_pos, l - byte_pos);
    184e:	68fb      	ldr	r3, [r7, #12]
    1850:	689a      	ldr	r2, [r3, #8]
    1852:	68b9      	ldr	r1, [r7, #8]
    1854:	687b      	ldr	r3, [r7, #4]
    1856:	440b      	add	r3, r1
    1858:	18d0      	adds	r0, r2, r3
    185a:	68fb      	ldr	r3, [r7, #12]
    185c:	689a      	ldr	r2, [r3, #8]
    185e:	68bb      	ldr	r3, [r7, #8]
    1860:	18d1      	adds	r1, r2, r3
    1862:	697a      	ldr	r2, [r7, #20]
    1864:	68bb      	ldr	r3, [r7, #8]
    1866:	1ad3      	subs	r3, r2, r3
    1868:	461a      	mov	r2, r3
    186a:	f01c fec6 	bl	1e5fa <memmove>
        // increase the length
        vstr->len += byte_len;
    186e:	68fb      	ldr	r3, [r7, #12]
    1870:	685a      	ldr	r2, [r3, #4]
    1872:	687b      	ldr	r3, [r7, #4]
    1874:	441a      	add	r2, r3
    1876:	68fb      	ldr	r3, [r7, #12]
    1878:	605a      	str	r2, [r3, #4]
    }
    return vstr->buf + byte_pos;
    187a:	68fb      	ldr	r3, [r7, #12]
    187c:	689a      	ldr	r2, [r3, #8]
    187e:	68bb      	ldr	r3, [r7, #8]
    1880:	4413      	add	r3, r2
}
    1882:	4618      	mov	r0, r3
    1884:	3718      	adds	r7, #24
    1886:	46bd      	mov	sp, r7
    1888:	bd80      	pop	{r7, pc}

0000188a <vstr_ins_byte>:

void vstr_ins_byte(vstr_t *vstr, size_t byte_pos, byte b) {
    188a:	b580      	push	{r7, lr}
    188c:	b086      	sub	sp, #24
    188e:	af00      	add	r7, sp, #0
    1890:	60f8      	str	r0, [r7, #12]
    1892:	60b9      	str	r1, [r7, #8]
    1894:	4613      	mov	r3, r2
    1896:	71fb      	strb	r3, [r7, #7]
    char *s = vstr_ins_blank_bytes(vstr, byte_pos, 1);
    1898:	2201      	movs	r2, #1
    189a:	68b9      	ldr	r1, [r7, #8]
    189c:	68f8      	ldr	r0, [r7, #12]
    189e:	f7ff ffc0 	bl	1822 <vstr_ins_blank_bytes>
    18a2:	6178      	str	r0, [r7, #20]
    *s = b;
    18a4:	697b      	ldr	r3, [r7, #20]
    18a6:	79fa      	ldrb	r2, [r7, #7]
    18a8:	701a      	strb	r2, [r3, #0]
}
    18aa:	bf00      	nop
    18ac:	3718      	adds	r7, #24
    18ae:	46bd      	mov	sp, r7
    18b0:	bd80      	pop	{r7, pc}

000018b2 <vstr_ins_char>:

void vstr_ins_char(vstr_t *vstr, size_t char_pos, unichar chr) {
    18b2:	b580      	push	{r7, lr}
    18b4:	b086      	sub	sp, #24
    18b6:	af00      	add	r7, sp, #0
    18b8:	60f8      	str	r0, [r7, #12]
    18ba:	60b9      	str	r1, [r7, #8]
    18bc:	607a      	str	r2, [r7, #4]
    // TODO UNICODE
    char *s = vstr_ins_blank_bytes(vstr, char_pos, 1);
    18be:	2201      	movs	r2, #1
    18c0:	68b9      	ldr	r1, [r7, #8]
    18c2:	68f8      	ldr	r0, [r7, #12]
    18c4:	f7ff ffad 	bl	1822 <vstr_ins_blank_bytes>
    18c8:	6178      	str	r0, [r7, #20]
    *s = chr;
    18ca:	687b      	ldr	r3, [r7, #4]
    18cc:	b2da      	uxtb	r2, r3
    18ce:	697b      	ldr	r3, [r7, #20]
    18d0:	701a      	strb	r2, [r3, #0]
}
    18d2:	bf00      	nop
    18d4:	3718      	adds	r7, #24
    18d6:	46bd      	mov	sp, r7
    18d8:	bd80      	pop	{r7, pc}

000018da <vstr_cut_head_bytes>:

void vstr_cut_head_bytes(vstr_t *vstr, size_t bytes_to_cut) {
    18da:	b580      	push	{r7, lr}
    18dc:	b082      	sub	sp, #8
    18de:	af00      	add	r7, sp, #0
    18e0:	6078      	str	r0, [r7, #4]
    18e2:	6039      	str	r1, [r7, #0]
    vstr_cut_out_bytes(vstr, 0, bytes_to_cut);
    18e4:	683a      	ldr	r2, [r7, #0]
    18e6:	2100      	movs	r1, #0
    18e8:	6878      	ldr	r0, [r7, #4]
    18ea:	f000 f81e 	bl	192a <vstr_cut_out_bytes>
}
    18ee:	bf00      	nop
    18f0:	3708      	adds	r7, #8
    18f2:	46bd      	mov	sp, r7
    18f4:	bd80      	pop	{r7, pc}

000018f6 <vstr_cut_tail_bytes>:

void vstr_cut_tail_bytes(vstr_t *vstr, size_t len) {
    18f6:	b480      	push	{r7}
    18f8:	b083      	sub	sp, #12
    18fa:	af00      	add	r7, sp, #0
    18fc:	6078      	str	r0, [r7, #4]
    18fe:	6039      	str	r1, [r7, #0]
    if (len > vstr->len) {
    1900:	687b      	ldr	r3, [r7, #4]
    1902:	685a      	ldr	r2, [r3, #4]
    1904:	683b      	ldr	r3, [r7, #0]
    1906:	429a      	cmp	r2, r3
    1908:	d203      	bcs.n	1912 <vstr_cut_tail_bytes+0x1c>
        vstr->len = 0;
    190a:	687b      	ldr	r3, [r7, #4]
    190c:	2200      	movs	r2, #0
    190e:	605a      	str	r2, [r3, #4]
    } else {
        vstr->len -= len;
    }
}
    1910:	e005      	b.n	191e <vstr_cut_tail_bytes+0x28>
        vstr->len -= len;
    1912:	687b      	ldr	r3, [r7, #4]
    1914:	685a      	ldr	r2, [r3, #4]
    1916:	683b      	ldr	r3, [r7, #0]
    1918:	1ad2      	subs	r2, r2, r3
    191a:	687b      	ldr	r3, [r7, #4]
    191c:	605a      	str	r2, [r3, #4]
}
    191e:	bf00      	nop
    1920:	370c      	adds	r7, #12
    1922:	46bd      	mov	sp, r7
    1924:	f85d 7b04 	ldr.w	r7, [sp], #4
    1928:	4770      	bx	lr

0000192a <vstr_cut_out_bytes>:

void vstr_cut_out_bytes(vstr_t *vstr, size_t byte_pos, size_t bytes_to_cut) {
    192a:	b580      	push	{r7, lr}
    192c:	b084      	sub	sp, #16
    192e:	af00      	add	r7, sp, #0
    1930:	60f8      	str	r0, [r7, #12]
    1932:	60b9      	str	r1, [r7, #8]
    1934:	607a      	str	r2, [r7, #4]
    if (byte_pos >= vstr->len) {
    1936:	68fb      	ldr	r3, [r7, #12]
    1938:	685a      	ldr	r2, [r3, #4]
    193a:	68bb      	ldr	r3, [r7, #8]
    193c:	429a      	cmp	r2, r3
    193e:	d924      	bls.n	198a <vstr_cut_out_bytes+0x60>
        return;
    } else if (byte_pos + bytes_to_cut >= vstr->len) {
    1940:	68ba      	ldr	r2, [r7, #8]
    1942:	687b      	ldr	r3, [r7, #4]
    1944:	441a      	add	r2, r3
    1946:	68fb      	ldr	r3, [r7, #12]
    1948:	685b      	ldr	r3, [r3, #4]
    194a:	429a      	cmp	r2, r3
    194c:	d303      	bcc.n	1956 <vstr_cut_out_bytes+0x2c>
        vstr->len = byte_pos;
    194e:	68fb      	ldr	r3, [r7, #12]
    1950:	68ba      	ldr	r2, [r7, #8]
    1952:	605a      	str	r2, [r3, #4]
    1954:	e01a      	b.n	198c <vstr_cut_out_bytes+0x62>
    } else {
        memmove(vstr->buf + byte_pos, vstr->buf + byte_pos + bytes_to_cut, vstr->len - byte_pos - bytes_to_cut);
    1956:	68fb      	ldr	r3, [r7, #12]
    1958:	689a      	ldr	r2, [r3, #8]
    195a:	68bb      	ldr	r3, [r7, #8]
    195c:	18d0      	adds	r0, r2, r3
    195e:	68fb      	ldr	r3, [r7, #12]
    1960:	689a      	ldr	r2, [r3, #8]
    1962:	68b9      	ldr	r1, [r7, #8]
    1964:	687b      	ldr	r3, [r7, #4]
    1966:	440b      	add	r3, r1
    1968:	18d1      	adds	r1, r2, r3
    196a:	68fb      	ldr	r3, [r7, #12]
    196c:	685a      	ldr	r2, [r3, #4]
    196e:	68bb      	ldr	r3, [r7, #8]
    1970:	1ad2      	subs	r2, r2, r3
    1972:	687b      	ldr	r3, [r7, #4]
    1974:	1ad3      	subs	r3, r2, r3
    1976:	461a      	mov	r2, r3
    1978:	f01c fe3f 	bl	1e5fa <memmove>
        vstr->len -= bytes_to_cut;
    197c:	68fb      	ldr	r3, [r7, #12]
    197e:	685a      	ldr	r2, [r3, #4]
    1980:	687b      	ldr	r3, [r7, #4]
    1982:	1ad2      	subs	r2, r2, r3
    1984:	68fb      	ldr	r3, [r7, #12]
    1986:	605a      	str	r2, [r3, #4]
    1988:	e000      	b.n	198c <vstr_cut_out_bytes+0x62>
        return;
    198a:	bf00      	nop
    }
}
    198c:	3710      	adds	r7, #16
    198e:	46bd      	mov	sp, r7
    1990:	bd80      	pop	{r7, pc}

00001992 <vstr_printf>:

void vstr_printf(vstr_t *vstr, const char *fmt, ...) {
    1992:	b40e      	push	{r1, r2, r3}
    1994:	b580      	push	{r7, lr}
    1996:	b085      	sub	sp, #20
    1998:	af00      	add	r7, sp, #0
    199a:	6078      	str	r0, [r7, #4]
    va_list ap;
    va_start(ap, fmt);
    199c:	f107 0320 	add.w	r3, r7, #32
    19a0:	60fb      	str	r3, [r7, #12]
    vstr_vprintf(vstr, fmt, ap);
    19a2:	68fa      	ldr	r2, [r7, #12]
    19a4:	69f9      	ldr	r1, [r7, #28]
    19a6:	6878      	ldr	r0, [r7, #4]
    19a8:	f000 f807 	bl	19ba <vstr_vprintf>
    va_end(ap);
}
    19ac:	bf00      	nop
    19ae:	3714      	adds	r7, #20
    19b0:	46bd      	mov	sp, r7
    19b2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
    19b6:	b003      	add	sp, #12
    19b8:	4770      	bx	lr

000019ba <vstr_vprintf>:

void vstr_vprintf(vstr_t *vstr, const char *fmt, va_list ap) {
    19ba:	b580      	push	{r7, lr}
    19bc:	b086      	sub	sp, #24
    19be:	af00      	add	r7, sp, #0
    19c0:	60f8      	str	r0, [r7, #12]
    19c2:	60b9      	str	r1, [r7, #8]
    19c4:	607a      	str	r2, [r7, #4]
    mp_print_t print = {vstr, (mp_print_strn_t)vstr_add_strn};
    19c6:	68fb      	ldr	r3, [r7, #12]
    19c8:	613b      	str	r3, [r7, #16]
    19ca:	4b06      	ldr	r3, [pc, #24]	; (19e4 <vstr_vprintf+0x2a>)
    19cc:	617b      	str	r3, [r7, #20]
    mp_vprintf(&print, fmt, ap);
    19ce:	f107 0310 	add.w	r3, r7, #16
    19d2:	687a      	ldr	r2, [r7, #4]
    19d4:	68b9      	ldr	r1, [r7, #8]
    19d6:	4618      	mov	r0, r3
    19d8:	f000 fb60 	bl	209c <mp_vprintf>
}
    19dc:	bf00      	nop
    19de:	3718      	adds	r7, #24
    19e0:	46bd      	mov	sp, r7
    19e2:	bd80      	pop	{r7, pc}
    19e4:	000017e7 	.word	0x000017e7

000019e8 <MP_OBJ_IS_SMALL_INT>:
// unpack small ints, qstrs and full object pointers.

#if MICROPY_OBJ_REPR == MICROPY_OBJ_REPR_A

static inline bool MP_OBJ_IS_SMALL_INT(mp_const_obj_t o)
    { return ((((mp_int_t)(o)) & 1) != 0); }
    19e8:	b480      	push	{r7}
    19ea:	b083      	sub	sp, #12
    19ec:	af00      	add	r7, sp, #0
    19ee:	6078      	str	r0, [r7, #4]
    19f0:	687b      	ldr	r3, [r7, #4]
    19f2:	f003 0301 	and.w	r3, r3, #1
    19f6:	2b00      	cmp	r3, #0
    19f8:	bf14      	ite	ne
    19fa:	2301      	movne	r3, #1
    19fc:	2300      	moveq	r3, #0
    19fe:	b2db      	uxtb	r3, r3
    1a00:	4618      	mov	r0, r3
    1a02:	370c      	adds	r7, #12
    1a04:	46bd      	mov	sp, r7
    1a06:	f85d 7b04 	ldr.w	r7, [sp], #4
    1a0a:	4770      	bx	lr

00001a0c <MP_OBJ_IS_OBJ>:
mp_float_t mp_obj_float_get(mp_obj_t self_in);
mp_obj_t mp_obj_new_float(mp_float_t value);
#endif

static inline bool MP_OBJ_IS_OBJ(mp_const_obj_t o)
    { return ((((mp_int_t)(o)) & 3) == 0); }
    1a0c:	b480      	push	{r7}
    1a0e:	b083      	sub	sp, #12
    1a10:	af00      	add	r7, sp, #0
    1a12:	6078      	str	r0, [r7, #4]
    1a14:	687b      	ldr	r3, [r7, #4]
    1a16:	f003 0303 	and.w	r3, r3, #3
    1a1a:	2b00      	cmp	r3, #0
    1a1c:	bf0c      	ite	eq
    1a1e:	2301      	moveq	r3, #1
    1a20:	2300      	movne	r3, #0
    1a22:	b2db      	uxtb	r3, r3
    1a24:	4618      	mov	r0, r3
    1a26:	370c      	adds	r7, #12
    1a28:	46bd      	mov	sp, r7
    1a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
    1a2e:	4770      	bx	lr

00001a30 <plat_print_strn>:
#endif

static const char pad_spaces[] = "                ";
static const char pad_zeroes[] = "0000000000000000";

STATIC void plat_print_strn(void *env, const char *str, size_t len) {
    1a30:	b580      	push	{r7, lr}
    1a32:	b084      	sub	sp, #16
    1a34:	af00      	add	r7, sp, #0
    1a36:	60f8      	str	r0, [r7, #12]
    1a38:	60b9      	str	r1, [r7, #8]
    1a3a:	607a      	str	r2, [r7, #4]
    (void)env;
    MP_PLAT_PRINT_STRN(str, len);
    1a3c:	6879      	ldr	r1, [r7, #4]
    1a3e:	68b8      	ldr	r0, [r7, #8]
    1a40:	f01c fac8 	bl	1dfd4 <mp_hal_stdout_tx_strn_cooked>
}
    1a44:	bf00      	nop
    1a46:	3710      	adds	r7, #16
    1a48:	46bd      	mov	sp, r7
    1a4a:	bd80      	pop	{r7, pc}

00001a4c <mp_print_str>:

const mp_print_t mp_plat_print = {NULL, plat_print_strn};

int mp_print_str(const mp_print_t *print, const char *str) {
    1a4c:	b580      	push	{r7, lr}
    1a4e:	b084      	sub	sp, #16
    1a50:	af00      	add	r7, sp, #0
    1a52:	6078      	str	r0, [r7, #4]
    1a54:	6039      	str	r1, [r7, #0]
    size_t len = strlen(str);
    1a56:	6838      	ldr	r0, [r7, #0]
    1a58:	f01c fea0 	bl	1e79c <strlen>
    1a5c:	60f8      	str	r0, [r7, #12]
    if (len) {
    1a5e:	68fb      	ldr	r3, [r7, #12]
    1a60:	2b00      	cmp	r3, #0
    1a62:	d006      	beq.n	1a72 <mp_print_str+0x26>
        print->print_strn(print->data, str, len);
    1a64:	687b      	ldr	r3, [r7, #4]
    1a66:	685b      	ldr	r3, [r3, #4]
    1a68:	687a      	ldr	r2, [r7, #4]
    1a6a:	6810      	ldr	r0, [r2, #0]
    1a6c:	68fa      	ldr	r2, [r7, #12]
    1a6e:	6839      	ldr	r1, [r7, #0]
    1a70:	4798      	blx	r3
    }
    return len;
    1a72:	68fb      	ldr	r3, [r7, #12]
}
    1a74:	4618      	mov	r0, r3
    1a76:	3710      	adds	r7, #16
    1a78:	46bd      	mov	sp, r7
    1a7a:	bd80      	pop	{r7, pc}

00001a7c <mp_print_strn>:

int mp_print_strn(const mp_print_t *print, const char *str, size_t len, int flags, char fill, int width) {
    1a7c:	b580      	push	{r7, lr}
    1a7e:	b08c      	sub	sp, #48	; 0x30
    1a80:	af00      	add	r7, sp, #0
    1a82:	60f8      	str	r0, [r7, #12]
    1a84:	60b9      	str	r1, [r7, #8]
    1a86:	607a      	str	r2, [r7, #4]
    1a88:	603b      	str	r3, [r7, #0]
    int left_pad = 0;
    1a8a:	2300      	movs	r3, #0
    1a8c:	62fb      	str	r3, [r7, #44]	; 0x2c
    int right_pad = 0;
    1a8e:	2300      	movs	r3, #0
    1a90:	62bb      	str	r3, [r7, #40]	; 0x28
    int pad = width - len;
    1a92:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    1a94:	687b      	ldr	r3, [r7, #4]
    1a96:	1ad3      	subs	r3, r2, r3
    1a98:	613b      	str	r3, [r7, #16]
    int pad_size;
    int total_chars_printed = 0;
    1a9a:	2300      	movs	r3, #0
    1a9c:	623b      	str	r3, [r7, #32]
    const char *pad_chars;

    if (!fill || fill == ' ') {
    1a9e:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
    1aa2:	2b00      	cmp	r3, #0
    1aa4:	d003      	beq.n	1aae <mp_print_strn+0x32>
    1aa6:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
    1aaa:	2b20      	cmp	r3, #32
    1aac:	d104      	bne.n	1ab8 <mp_print_strn+0x3c>
        pad_chars = pad_spaces;
    1aae:	4b3d      	ldr	r3, [pc, #244]	; (1ba4 <mp_print_strn+0x128>)
    1ab0:	61fb      	str	r3, [r7, #28]
        pad_size = sizeof(pad_spaces) - 1;
    1ab2:	2310      	movs	r3, #16
    1ab4:	627b      	str	r3, [r7, #36]	; 0x24
    1ab6:	e00d      	b.n	1ad4 <mp_print_strn+0x58>
    } else if (fill == '0') {
    1ab8:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
    1abc:	2b30      	cmp	r3, #48	; 0x30
    1abe:	d104      	bne.n	1aca <mp_print_strn+0x4e>
        pad_chars = pad_zeroes;
    1ac0:	4b39      	ldr	r3, [pc, #228]	; (1ba8 <mp_print_strn+0x12c>)
    1ac2:	61fb      	str	r3, [r7, #28]
        pad_size = sizeof(pad_zeroes) - 1;
    1ac4:	2310      	movs	r3, #16
    1ac6:	627b      	str	r3, [r7, #36]	; 0x24
    1ac8:	e004      	b.n	1ad4 <mp_print_strn+0x58>
    } else {
        // Other pad characters are fairly unusual, so we'll take the hit
        // and output them 1 at a time.
        pad_chars = &fill;
    1aca:	f107 0338 	add.w	r3, r7, #56	; 0x38
    1ace:	61fb      	str	r3, [r7, #28]
        pad_size = 1;
    1ad0:	2301      	movs	r3, #1
    1ad2:	627b      	str	r3, [r7, #36]	; 0x24
    }

    if (flags & PF_FLAG_CENTER_ADJUST) {
    1ad4:	683b      	ldr	r3, [r7, #0]
    1ad6:	f003 0380 	and.w	r3, r3, #128	; 0x80
    1ada:	2b00      	cmp	r3, #0
    1adc:	d009      	beq.n	1af2 <mp_print_strn+0x76>
        left_pad = pad / 2;
    1ade:	693b      	ldr	r3, [r7, #16]
    1ae0:	0fda      	lsrs	r2, r3, #31
    1ae2:	4413      	add	r3, r2
    1ae4:	105b      	asrs	r3, r3, #1
    1ae6:	62fb      	str	r3, [r7, #44]	; 0x2c
        right_pad = pad - left_pad;
    1ae8:	693a      	ldr	r2, [r7, #16]
    1aea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1aec:	1ad3      	subs	r3, r2, r3
    1aee:	62bb      	str	r3, [r7, #40]	; 0x28
    1af0:	e009      	b.n	1b06 <mp_print_strn+0x8a>
    } else if (flags & PF_FLAG_LEFT_ADJUST) {
    1af2:	683b      	ldr	r3, [r7, #0]
    1af4:	f003 0301 	and.w	r3, r3, #1
    1af8:	2b00      	cmp	r3, #0
    1afa:	d002      	beq.n	1b02 <mp_print_strn+0x86>
        right_pad = pad;
    1afc:	693b      	ldr	r3, [r7, #16]
    1afe:	62bb      	str	r3, [r7, #40]	; 0x28
    1b00:	e001      	b.n	1b06 <mp_print_strn+0x8a>
    } else {
        left_pad = pad;
    1b02:	693b      	ldr	r3, [r7, #16]
    1b04:	62fb      	str	r3, [r7, #44]	; 0x2c
    }

    if (left_pad > 0) {
    1b06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1b08:	2b00      	cmp	r3, #0
    1b0a:	dd1a      	ble.n	1b42 <mp_print_strn+0xc6>
        total_chars_printed += left_pad;
    1b0c:	6a3a      	ldr	r2, [r7, #32]
    1b0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1b10:	4413      	add	r3, r2
    1b12:	623b      	str	r3, [r7, #32]
        while (left_pad > 0) {
    1b14:	e012      	b.n	1b3c <mp_print_strn+0xc0>
            int p = left_pad;
    1b16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1b18:	61bb      	str	r3, [r7, #24]
            if (p > pad_size) {
    1b1a:	69ba      	ldr	r2, [r7, #24]
    1b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1b1e:	429a      	cmp	r2, r3
    1b20:	dd01      	ble.n	1b26 <mp_print_strn+0xaa>
                p = pad_size;
    1b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1b24:	61bb      	str	r3, [r7, #24]
            }
            print->print_strn(print->data, pad_chars, p);
    1b26:	68fb      	ldr	r3, [r7, #12]
    1b28:	685b      	ldr	r3, [r3, #4]
    1b2a:	68fa      	ldr	r2, [r7, #12]
    1b2c:	6810      	ldr	r0, [r2, #0]
    1b2e:	69ba      	ldr	r2, [r7, #24]
    1b30:	69f9      	ldr	r1, [r7, #28]
    1b32:	4798      	blx	r3
            left_pad -= p;
    1b34:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    1b36:	69bb      	ldr	r3, [r7, #24]
    1b38:	1ad3      	subs	r3, r2, r3
    1b3a:	62fb      	str	r3, [r7, #44]	; 0x2c
        while (left_pad > 0) {
    1b3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1b3e:	2b00      	cmp	r3, #0
    1b40:	dce9      	bgt.n	1b16 <mp_print_strn+0x9a>
        }
    }
    if (len) {
    1b42:	687b      	ldr	r3, [r7, #4]
    1b44:	2b00      	cmp	r3, #0
    1b46:	d00a      	beq.n	1b5e <mp_print_strn+0xe2>
        print->print_strn(print->data, str, len);
    1b48:	68fb      	ldr	r3, [r7, #12]
    1b4a:	685b      	ldr	r3, [r3, #4]
    1b4c:	68fa      	ldr	r2, [r7, #12]
    1b4e:	6810      	ldr	r0, [r2, #0]
    1b50:	687a      	ldr	r2, [r7, #4]
    1b52:	68b9      	ldr	r1, [r7, #8]
    1b54:	4798      	blx	r3
        total_chars_printed += len;
    1b56:	6a3a      	ldr	r2, [r7, #32]
    1b58:	687b      	ldr	r3, [r7, #4]
    1b5a:	4413      	add	r3, r2
    1b5c:	623b      	str	r3, [r7, #32]
    }
    if (right_pad > 0) {
    1b5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    1b60:	2b00      	cmp	r3, #0
    1b62:	dd1a      	ble.n	1b9a <mp_print_strn+0x11e>
        total_chars_printed += right_pad;
    1b64:	6a3a      	ldr	r2, [r7, #32]
    1b66:	6abb      	ldr	r3, [r7, #40]	; 0x28
    1b68:	4413      	add	r3, r2
    1b6a:	623b      	str	r3, [r7, #32]
        while (right_pad > 0) {
    1b6c:	e012      	b.n	1b94 <mp_print_strn+0x118>
            int p = right_pad;
    1b6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    1b70:	617b      	str	r3, [r7, #20]
            if (p > pad_size) {
    1b72:	697a      	ldr	r2, [r7, #20]
    1b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1b76:	429a      	cmp	r2, r3
    1b78:	dd01      	ble.n	1b7e <mp_print_strn+0x102>
                p = pad_size;
    1b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1b7c:	617b      	str	r3, [r7, #20]
            }
            print->print_strn(print->data, pad_chars, p);
    1b7e:	68fb      	ldr	r3, [r7, #12]
    1b80:	685b      	ldr	r3, [r3, #4]
    1b82:	68fa      	ldr	r2, [r7, #12]
    1b84:	6810      	ldr	r0, [r2, #0]
    1b86:	697a      	ldr	r2, [r7, #20]
    1b88:	69f9      	ldr	r1, [r7, #28]
    1b8a:	4798      	blx	r3
            right_pad -= p;
    1b8c:	6aba      	ldr	r2, [r7, #40]	; 0x28
    1b8e:	697b      	ldr	r3, [r7, #20]
    1b90:	1ad3      	subs	r3, r2, r3
    1b92:	62bb      	str	r3, [r7, #40]	; 0x28
        while (right_pad > 0) {
    1b94:	6abb      	ldr	r3, [r7, #40]	; 0x28
    1b96:	2b00      	cmp	r3, #0
    1b98:	dce9      	bgt.n	1b6e <mp_print_strn+0xf2>
        }
    }
    return total_chars_printed;
    1b9a:	6a3b      	ldr	r3, [r7, #32]
}
    1b9c:	4618      	mov	r0, r3
    1b9e:	3730      	adds	r7, #48	; 0x30
    1ba0:	46bd      	mov	sp, r7
    1ba2:	bd80      	pop	{r7, pc}
    1ba4:	000210a4 	.word	0x000210a4
    1ba8:	000210b8 	.word	0x000210b8

00001bac <mp_print_int>:
// print the prefix of a non-base-10 number, so we don't need code for this.
#define SUPPORT_INT_BASE_PREFIX (0)

// This function is used exclusively by mp_vprintf to format ints.
// It needs to be a separate function to mp_print_mp_int, since converting to a mp_int looses the MSB.
STATIC int mp_print_int(const mp_print_t *print, mp_uint_t x, int sgn, int base, int base_char, int flags, char fill, int width) {
    1bac:	b580      	push	{r7, lr}
    1bae:	b08e      	sub	sp, #56	; 0x38
    1bb0:	af02      	add	r7, sp, #8
    1bb2:	60f8      	str	r0, [r7, #12]
    1bb4:	60b9      	str	r1, [r7, #8]
    1bb6:	607a      	str	r2, [r7, #4]
    1bb8:	603b      	str	r3, [r7, #0]
    char sign = 0;
    1bba:	2300      	movs	r3, #0
    1bbc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    if (sgn) {
    1bc0:	687b      	ldr	r3, [r7, #4]
    1bc2:	2b00      	cmp	r3, #0
    1bc4:	d01a      	beq.n	1bfc <mp_print_int+0x50>
        if ((mp_int_t)x < 0) {
    1bc6:	68bb      	ldr	r3, [r7, #8]
    1bc8:	2b00      	cmp	r3, #0
    1bca:	da06      	bge.n	1bda <mp_print_int+0x2e>
            sign = '-';
    1bcc:	232d      	movs	r3, #45	; 0x2d
    1bce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            x = -x;
    1bd2:	68bb      	ldr	r3, [r7, #8]
    1bd4:	425b      	negs	r3, r3
    1bd6:	60bb      	str	r3, [r7, #8]
    1bd8:	e010      	b.n	1bfc <mp_print_int+0x50>
        } else if (flags & PF_FLAG_SHOW_SIGN) {
    1bda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1bdc:	f003 0302 	and.w	r3, r3, #2
    1be0:	2b00      	cmp	r3, #0
    1be2:	d003      	beq.n	1bec <mp_print_int+0x40>
            sign = '+';
    1be4:	232b      	movs	r3, #43	; 0x2b
    1be6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    1bea:	e007      	b.n	1bfc <mp_print_int+0x50>
        } else if (flags & PF_FLAG_SPACE_SIGN) {
    1bec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1bee:	f003 0304 	and.w	r3, r3, #4
    1bf2:	2b00      	cmp	r3, #0
    1bf4:	d002      	beq.n	1bfc <mp_print_int+0x50>
            sign = ' ';
    1bf6:	2320      	movs	r3, #32
    1bf8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        }
    }

    char buf[INT_BUF_SIZE];
    char *b = buf + INT_BUF_SIZE;
    1bfc:	f107 0310 	add.w	r3, r7, #16
    1c00:	3310      	adds	r3, #16
    1c02:	62fb      	str	r3, [r7, #44]	; 0x2c

    if (x == 0) {
    1c04:	68bb      	ldr	r3, [r7, #8]
    1c06:	2b00      	cmp	r3, #0
    1c08:	d106      	bne.n	1c18 <mp_print_int+0x6c>
        *(--b) = '0';
    1c0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1c0c:	3b01      	subs	r3, #1
    1c0e:	62fb      	str	r3, [r7, #44]	; 0x2c
    1c10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1c12:	2230      	movs	r2, #48	; 0x30
    1c14:	701a      	strb	r2, [r3, #0]
    1c16:	e027      	b.n	1c68 <mp_print_int+0xbc>
    } else {
        do {
            int c = x % base;
    1c18:	683a      	ldr	r2, [r7, #0]
    1c1a:	68bb      	ldr	r3, [r7, #8]
    1c1c:	fbb3 f1f2 	udiv	r1, r3, r2
    1c20:	fb02 f201 	mul.w	r2, r2, r1
    1c24:	1a9b      	subs	r3, r3, r2
    1c26:	62bb      	str	r3, [r7, #40]	; 0x28
            x /= base;
    1c28:	683b      	ldr	r3, [r7, #0]
    1c2a:	68ba      	ldr	r2, [r7, #8]
    1c2c:	fbb2 f3f3 	udiv	r3, r2, r3
    1c30:	60bb      	str	r3, [r7, #8]
            if (c >= 10) {
    1c32:	6abb      	ldr	r3, [r7, #40]	; 0x28
    1c34:	2b09      	cmp	r3, #9
    1c36:	dd05      	ble.n	1c44 <mp_print_int+0x98>
                c += base_char - 10;
    1c38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1c3a:	3b0a      	subs	r3, #10
    1c3c:	6aba      	ldr	r2, [r7, #40]	; 0x28
    1c3e:	4413      	add	r3, r2
    1c40:	62bb      	str	r3, [r7, #40]	; 0x28
    1c42:	e002      	b.n	1c4a <mp_print_int+0x9e>
            } else {
                c += '0';
    1c44:	6abb      	ldr	r3, [r7, #40]	; 0x28
    1c46:	3330      	adds	r3, #48	; 0x30
    1c48:	62bb      	str	r3, [r7, #40]	; 0x28
            }
            *(--b) = c;
    1c4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1c4c:	3b01      	subs	r3, #1
    1c4e:	62fb      	str	r3, [r7, #44]	; 0x2c
    1c50:	6abb      	ldr	r3, [r7, #40]	; 0x28
    1c52:	b2da      	uxtb	r2, r3
    1c54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1c56:	701a      	strb	r2, [r3, #0]
        } while (b > buf && x != 0);
    1c58:	f107 0310 	add.w	r3, r7, #16
    1c5c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    1c5e:	429a      	cmp	r2, r3
    1c60:	d902      	bls.n	1c68 <mp_print_int+0xbc>
    1c62:	68bb      	ldr	r3, [r7, #8]
    1c64:	2b00      	cmp	r3, #0
    1c66:	d1d7      	bne.n	1c18 <mp_print_int+0x6c>
            prefix_char = base_char + 'x' - 'a';
        }
    }
    #endif

    int len = 0;
    1c68:	2300      	movs	r3, #0
    1c6a:	627b      	str	r3, [r7, #36]	; 0x24
    if (flags & PF_FLAG_PAD_AFTER_SIGN) {
    1c6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1c6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
    1c72:	2b00      	cmp	r3, #0
    1c74:	d017      	beq.n	1ca6 <mp_print_int+0xfa>
        if (sign) {
    1c76:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
    1c7a:	2b00      	cmp	r3, #0
    1c7c:	d023      	beq.n	1cc6 <mp_print_int+0x11a>
            len += mp_print_strn(print, &sign, 1, flags, fill, 1);
    1c7e:	f107 0123 	add.w	r1, r7, #35	; 0x23
    1c82:	2301      	movs	r3, #1
    1c84:	9301      	str	r3, [sp, #4]
    1c86:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
    1c8a:	9300      	str	r3, [sp, #0]
    1c8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1c8e:	2201      	movs	r2, #1
    1c90:	68f8      	ldr	r0, [r7, #12]
    1c92:	f7ff fef3 	bl	1a7c <mp_print_strn>
    1c96:	4602      	mov	r2, r0
    1c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1c9a:	4413      	add	r3, r2
    1c9c:	627b      	str	r3, [r7, #36]	; 0x24
            width--;
    1c9e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    1ca0:	3b01      	subs	r3, #1
    1ca2:	647b      	str	r3, [r7, #68]	; 0x44
    1ca4:	e00f      	b.n	1cc6 <mp_print_int+0x11a>
        if (prefix_char && b > &buf[1]) {
            *(--b) = prefix_char;
            *(--b) = '0';
        }
        #endif
        if (sign && b > buf) {
    1ca6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
    1caa:	2b00      	cmp	r3, #0
    1cac:	d00b      	beq.n	1cc6 <mp_print_int+0x11a>
    1cae:	f107 0310 	add.w	r3, r7, #16
    1cb2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    1cb4:	429a      	cmp	r2, r3
    1cb6:	d906      	bls.n	1cc6 <mp_print_int+0x11a>
            *(--b) = sign;
    1cb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1cba:	3b01      	subs	r3, #1
    1cbc:	62fb      	str	r3, [r7, #44]	; 0x2c
    1cbe:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
    1cc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1cc4:	701a      	strb	r2, [r3, #0]
        }
    }

    len += mp_print_strn(print, b, buf + INT_BUF_SIZE - b, flags, fill, width);
    1cc6:	f107 0310 	add.w	r3, r7, #16
    1cca:	3310      	adds	r3, #16
    1ccc:	461a      	mov	r2, r3
    1cce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1cd0:	1ad3      	subs	r3, r2, r3
    1cd2:	461a      	mov	r2, r3
    1cd4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    1cd6:	9301      	str	r3, [sp, #4]
    1cd8:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
    1cdc:	9300      	str	r3, [sp, #0]
    1cde:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1ce0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
    1ce2:	68f8      	ldr	r0, [r7, #12]
    1ce4:	f7ff feca 	bl	1a7c <mp_print_strn>
    1ce8:	4602      	mov	r2, r0
    1cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1cec:	4413      	add	r3, r2
    1cee:	627b      	str	r3, [r7, #36]	; 0x24
    return len;
    1cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
    1cf2:	4618      	mov	r0, r3
    1cf4:	3730      	adds	r7, #48	; 0x30
    1cf6:	46bd      	mov	sp, r7
    1cf8:	bd80      	pop	{r7, pc}

00001cfa <mp_print_mp_int>:

int mp_print_mp_int(const mp_print_t *print, mp_obj_t x, int base, int base_char, int flags, char fill, int width, int prec) {
    1cfa:	b590      	push	{r4, r7, lr}
    1cfc:	b09b      	sub	sp, #108	; 0x6c
    1cfe:	af04      	add	r7, sp, #16
    1d00:	60f8      	str	r0, [r7, #12]
    1d02:	60b9      	str	r1, [r7, #8]
    1d04:	607a      	str	r2, [r7, #4]
    1d06:	603b      	str	r3, [r7, #0]
    // These are the only values for "base" that are required to be supported by this
    // function, since Python only allows the user to format integers in these bases.
    // If needed this function could be generalised to handle other values.
    assert(base == 2 || base == 8 || base == 10 || base == 16);
    1d08:	687b      	ldr	r3, [r7, #4]
    1d0a:	2b02      	cmp	r3, #2
    1d0c:	d00e      	beq.n	1d2c <mp_print_mp_int+0x32>
    1d0e:	687b      	ldr	r3, [r7, #4]
    1d10:	2b08      	cmp	r3, #8
    1d12:	d00b      	beq.n	1d2c <mp_print_mp_int+0x32>
    1d14:	687b      	ldr	r3, [r7, #4]
    1d16:	2b0a      	cmp	r3, #10
    1d18:	d008      	beq.n	1d2c <mp_print_mp_int+0x32>
    1d1a:	687b      	ldr	r3, [r7, #4]
    1d1c:	2b10      	cmp	r3, #16
    1d1e:	d005      	beq.n	1d2c <mp_print_mp_int+0x32>
    1d20:	4b8e      	ldr	r3, [pc, #568]	; (1f5c <mp_print_mp_int+0x262>)
    1d22:	4a8f      	ldr	r2, [pc, #572]	; (1f60 <mp_print_mp_int+0x266>)
    1d24:	21d0      	movs	r1, #208	; 0xd0
    1d26:	488f      	ldr	r0, [pc, #572]	; (1f64 <mp_print_mp_int+0x26a>)
    1d28:	f01b f8da 	bl	1cee0 <__assert_func>

    if (!MP_OBJ_IS_INT(x)) {
    1d2c:	68b8      	ldr	r0, [r7, #8]
    1d2e:	f7ff fe5b 	bl	19e8 <MP_OBJ_IS_SMALL_INT>
    1d32:	4603      	mov	r3, r0
    1d34:	f083 0301 	eor.w	r3, r3, #1
    1d38:	b2db      	uxtb	r3, r3
    1d3a:	2b00      	cmp	r3, #0
    1d3c:	d015      	beq.n	1d6a <mp_print_mp_int+0x70>
    1d3e:	68b8      	ldr	r0, [r7, #8]
    1d40:	f7ff fe64 	bl	1a0c <MP_OBJ_IS_OBJ>
    1d44:	4603      	mov	r3, r0
    1d46:	f083 0301 	eor.w	r3, r3, #1
    1d4a:	b2db      	uxtb	r3, r3
    1d4c:	2b00      	cmp	r3, #0
    1d4e:	d104      	bne.n	1d5a <mp_print_mp_int+0x60>
    1d50:	68bb      	ldr	r3, [r7, #8]
    1d52:	681b      	ldr	r3, [r3, #0]
    1d54:	4a84      	ldr	r2, [pc, #528]	; (1f68 <mp_print_mp_int+0x26e>)
    1d56:	4293      	cmp	r3, r2
    1d58:	d007      	beq.n	1d6a <mp_print_mp_int+0x70>
        // This will convert booleans to int, or raise an error for
        // non-integer types.
        x = MP_OBJ_NEW_SMALL_INT(mp_obj_get_int(x));
    1d5a:	68b8      	ldr	r0, [r7, #8]
    1d5c:	f00c f95a 	bl	e014 <mp_obj_get_int>
    1d60:	4603      	mov	r3, r0
    1d62:	005b      	lsls	r3, r3, #1
    1d64:	f043 0301 	orr.w	r3, r3, #1
    1d68:	60bb      	str	r3, [r7, #8]
    }

    if ((flags & (PF_FLAG_LEFT_ADJUST | PF_FLAG_CENTER_ADJUST)) == 0 && fill == '0') {
    1d6a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    1d6c:	f003 0381 	and.w	r3, r3, #129	; 0x81
    1d70:	2b00      	cmp	r3, #0
    1d72:	d10b      	bne.n	1d8c <mp_print_mp_int+0x92>
    1d74:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
    1d78:	2b30      	cmp	r3, #48	; 0x30
    1d7a:	d107      	bne.n	1d8c <mp_print_mp_int+0x92>
        if (prec > width) {
    1d7c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
    1d7e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
    1d80:	429a      	cmp	r2, r3
    1d82:	dd01      	ble.n	1d88 <mp_print_mp_int+0x8e>
            width = prec;
    1d84:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    1d86:	673b      	str	r3, [r7, #112]	; 0x70
        }
        prec = 0;
    1d88:	2300      	movs	r3, #0
    1d8a:	677b      	str	r3, [r7, #116]	; 0x74
    }
    char prefix_buf[4];
    char *prefix = prefix_buf;
    1d8c:	f107 0334 	add.w	r3, r7, #52	; 0x34
    1d90:	657b      	str	r3, [r7, #84]	; 0x54

    if (mp_obj_int_sign(x) >= 0) {
    1d92:	68b8      	ldr	r0, [r7, #8]
    1d94:	f00e ff8c 	bl	10cb0 <mp_obj_int_sign>
    1d98:	4603      	mov	r3, r0
    1d9a:	2b00      	cmp	r3, #0
    1d9c:	db14      	blt.n	1dc8 <mp_print_mp_int+0xce>
        if (flags & PF_FLAG_SHOW_SIGN) {
    1d9e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    1da0:	f003 0302 	and.w	r3, r3, #2
    1da4:	2b00      	cmp	r3, #0
    1da6:	d005      	beq.n	1db4 <mp_print_mp_int+0xba>
            *prefix++ = '+';
    1da8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    1daa:	1c5a      	adds	r2, r3, #1
    1dac:	657a      	str	r2, [r7, #84]	; 0x54
    1dae:	222b      	movs	r2, #43	; 0x2b
    1db0:	701a      	strb	r2, [r3, #0]
    1db2:	e009      	b.n	1dc8 <mp_print_mp_int+0xce>
        } else if (flags & PF_FLAG_SPACE_SIGN) {
    1db4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    1db6:	f003 0304 	and.w	r3, r3, #4
    1dba:	2b00      	cmp	r3, #0
    1dbc:	d004      	beq.n	1dc8 <mp_print_mp_int+0xce>
            *prefix++ = ' ';
    1dbe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    1dc0:	1c5a      	adds	r2, r3, #1
    1dc2:	657a      	str	r2, [r7, #84]	; 0x54
    1dc4:	2220      	movs	r2, #32
    1dc6:	701a      	strb	r2, [r3, #0]
        }
    }

    if (flags & PF_FLAG_SHOW_PREFIX) {
    1dc8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    1dca:	f003 0310 	and.w	r3, r3, #16
    1dce:	2b00      	cmp	r3, #0
    1dd0:	d036      	beq.n	1e40 <mp_print_mp_int+0x146>
        if (base == 2) {
    1dd2:	687b      	ldr	r3, [r7, #4]
    1dd4:	2b02      	cmp	r3, #2
    1dd6:	d10d      	bne.n	1df4 <mp_print_mp_int+0xfa>
            *prefix++ = '0';
    1dd8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    1dda:	1c5a      	adds	r2, r3, #1
    1ddc:	657a      	str	r2, [r7, #84]	; 0x54
    1dde:	2230      	movs	r2, #48	; 0x30
    1de0:	701a      	strb	r2, [r3, #0]
            *prefix++ = base_char + 'b' - 'a';
    1de2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    1de4:	1c5a      	adds	r2, r3, #1
    1de6:	657a      	str	r2, [r7, #84]	; 0x54
    1de8:	683a      	ldr	r2, [r7, #0]
    1dea:	b2d2      	uxtb	r2, r2
    1dec:	3201      	adds	r2, #1
    1dee:	b2d2      	uxtb	r2, r2
    1df0:	701a      	strb	r2, [r3, #0]
    1df2:	e025      	b.n	1e40 <mp_print_mp_int+0x146>
        } else if (base == 8) {
    1df4:	687b      	ldr	r3, [r7, #4]
    1df6:	2b08      	cmp	r3, #8
    1df8:	d112      	bne.n	1e20 <mp_print_mp_int+0x126>
            *prefix++ = '0';
    1dfa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    1dfc:	1c5a      	adds	r2, r3, #1
    1dfe:	657a      	str	r2, [r7, #84]	; 0x54
    1e00:	2230      	movs	r2, #48	; 0x30
    1e02:	701a      	strb	r2, [r3, #0]
            if (flags & PF_FLAG_SHOW_OCTAL_LETTER) {
    1e04:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    1e06:	f403 7300 	and.w	r3, r3, #512	; 0x200
    1e0a:	2b00      	cmp	r3, #0
    1e0c:	d018      	beq.n	1e40 <mp_print_mp_int+0x146>
                *prefix++ = base_char + 'o' - 'a';
    1e0e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    1e10:	1c5a      	adds	r2, r3, #1
    1e12:	657a      	str	r2, [r7, #84]	; 0x54
    1e14:	683a      	ldr	r2, [r7, #0]
    1e16:	b2d2      	uxtb	r2, r2
    1e18:	320e      	adds	r2, #14
    1e1a:	b2d2      	uxtb	r2, r2
    1e1c:	701a      	strb	r2, [r3, #0]
    1e1e:	e00f      	b.n	1e40 <mp_print_mp_int+0x146>
            }
        } else if (base == 16) {
    1e20:	687b      	ldr	r3, [r7, #4]
    1e22:	2b10      	cmp	r3, #16
    1e24:	d10c      	bne.n	1e40 <mp_print_mp_int+0x146>
            *prefix++ = '0';
    1e26:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    1e28:	1c5a      	adds	r2, r3, #1
    1e2a:	657a      	str	r2, [r7, #84]	; 0x54
    1e2c:	2230      	movs	r2, #48	; 0x30
    1e2e:	701a      	strb	r2, [r3, #0]
            *prefix++ = base_char + 'x' - 'a';
    1e30:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    1e32:	1c5a      	adds	r2, r3, #1
    1e34:	657a      	str	r2, [r7, #84]	; 0x54
    1e36:	683a      	ldr	r2, [r7, #0]
    1e38:	b2d2      	uxtb	r2, r2
    1e3a:	3217      	adds	r2, #23
    1e3c:	b2d2      	uxtb	r2, r2
    1e3e:	701a      	strb	r2, [r3, #0]
        }
    }
    *prefix = '\0';
    1e40:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    1e42:	2200      	movs	r2, #0
    1e44:	701a      	strb	r2, [r3, #0]
    int prefix_len = prefix - prefix_buf;
    1e46:	6d7a      	ldr	r2, [r7, #84]	; 0x54
    1e48:	f107 0334 	add.w	r3, r7, #52	; 0x34
    1e4c:	1ad3      	subs	r3, r2, r3
    1e4e:	63bb      	str	r3, [r7, #56]	; 0x38
    prefix = prefix_buf;
    1e50:	f107 0334 	add.w	r3, r7, #52	; 0x34
    1e54:	657b      	str	r3, [r7, #84]	; 0x54

    char comma = '\0';
    1e56:	2300      	movs	r3, #0
    1e58:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
    if (flags & PF_FLAG_SHOW_COMMA) {
    1e5c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    1e5e:	f003 0320 	and.w	r3, r3, #32
    1e62:	2b00      	cmp	r3, #0
    1e64:	d002      	beq.n	1e6c <mp_print_mp_int+0x172>
        comma = ',';
    1e66:	232c      	movs	r3, #44	; 0x2c
    1e68:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
    }

    // The size of this buffer is rather arbitrary. If it's not large
    // enough, a dynamic one will be allocated.
    char stack_buf[sizeof(mp_int_t) * 4];
    char *buf = stack_buf;
    1e6c:	f107 0324 	add.w	r3, r7, #36	; 0x24
    1e70:	623b      	str	r3, [r7, #32]
    size_t buf_size = sizeof(stack_buf);
    1e72:	2310      	movs	r3, #16
    1e74:	61fb      	str	r3, [r7, #28]
    size_t fmt_size = 0;
    1e76:	2300      	movs	r3, #0
    1e78:	61bb      	str	r3, [r7, #24]
    char *str;

    if (prec > 1) {
    1e7a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    1e7c:	2b01      	cmp	r3, #1
    1e7e:	dd03      	ble.n	1e88 <mp_print_mp_int+0x18e>
        flags |= PF_FLAG_PAD_AFTER_SIGN;
    1e80:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    1e82:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    1e86:	66bb      	str	r3, [r7, #104]	; 0x68
    }
    char sign = '\0';
    1e88:	2300      	movs	r3, #0
    1e8a:	75fb      	strb	r3, [r7, #23]
    if (flags & PF_FLAG_PAD_AFTER_SIGN) {
    1e8c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    1e8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
    1e92:	2b00      	cmp	r3, #0
    1e94:	d021      	beq.n	1eda <mp_print_mp_int+0x1e0>
        // We add the pad in this function, so since the pad goes after
        // the sign & prefix, we format without a prefix
        str = mp_obj_int_formatted(&buf, &buf_size, &fmt_size,
    1e96:	683b      	ldr	r3, [r7, #0]
    1e98:	b2db      	uxtb	r3, r3
    1e9a:	f107 0418 	add.w	r4, r7, #24
    1e9e:	f107 011c 	add.w	r1, r7, #28
    1ea2:	f107 0020 	add.w	r0, r7, #32
    1ea6:	f897 2053 	ldrb.w	r2, [r7, #83]	; 0x53
    1eaa:	9203      	str	r2, [sp, #12]
    1eac:	9302      	str	r3, [sp, #8]
    1eae:	2300      	movs	r3, #0
    1eb0:	9301      	str	r3, [sp, #4]
    1eb2:	687b      	ldr	r3, [r7, #4]
    1eb4:	9300      	str	r3, [sp, #0]
    1eb6:	68bb      	ldr	r3, [r7, #8]
    1eb8:	4622      	mov	r2, r4
    1eba:	f00e fe35 	bl	10b28 <mp_obj_int_formatted>
    1ebe:	64f8      	str	r0, [r7, #76]	; 0x4c
                                   x, base, NULL, base_char, comma);
        if (*str == '-') {
    1ec0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    1ec2:	781b      	ldrb	r3, [r3, #0]
    1ec4:	2b2d      	cmp	r3, #45	; 0x2d
    1ec6:	d11d      	bne.n	1f04 <mp_print_mp_int+0x20a>
            sign = *str++;
    1ec8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    1eca:	1c5a      	adds	r2, r3, #1
    1ecc:	64fa      	str	r2, [r7, #76]	; 0x4c
    1ece:	781b      	ldrb	r3, [r3, #0]
    1ed0:	75fb      	strb	r3, [r7, #23]
            fmt_size--;
    1ed2:	69bb      	ldr	r3, [r7, #24]
    1ed4:	3b01      	subs	r3, #1
    1ed6:	61bb      	str	r3, [r7, #24]
    1ed8:	e014      	b.n	1f04 <mp_print_mp_int+0x20a>
        }
    } else {
        str = mp_obj_int_formatted(&buf, &buf_size, &fmt_size,
    1eda:	683b      	ldr	r3, [r7, #0]
    1edc:	b2db      	uxtb	r3, r3
    1ede:	f107 0418 	add.w	r4, r7, #24
    1ee2:	f107 011c 	add.w	r1, r7, #28
    1ee6:	f107 0020 	add.w	r0, r7, #32
    1eea:	f897 2053 	ldrb.w	r2, [r7, #83]	; 0x53
    1eee:	9203      	str	r2, [sp, #12]
    1ef0:	9302      	str	r3, [sp, #8]
    1ef2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    1ef4:	9301      	str	r3, [sp, #4]
    1ef6:	687b      	ldr	r3, [r7, #4]
    1ef8:	9300      	str	r3, [sp, #0]
    1efa:	68bb      	ldr	r3, [r7, #8]
    1efc:	4622      	mov	r2, r4
    1efe:	f00e fe13 	bl	10b28 <mp_obj_int_formatted>
    1f02:	64f8      	str	r0, [r7, #76]	; 0x4c
                                   x, base, prefix, base_char, comma);
    }

    int spaces_before = 0;
    1f04:	2300      	movs	r3, #0
    1f06:	64bb      	str	r3, [r7, #72]	; 0x48
    int spaces_after = 0;
    1f08:	2300      	movs	r3, #0
    1f0a:	647b      	str	r3, [r7, #68]	; 0x44

    if (prec > 1) {
    1f0c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    1f0e:	2b01      	cmp	r3, #1
    1f10:	dd37      	ble.n	1f82 <mp_print_mp_int+0x288>
        // If prec was specified, then prec specifies the width to zero-pad the
        // the number to. This zero-padded number then gets left or right
        // aligned in width characters.

        int prec_width = fmt_size;  // The digits
    1f12:	69bb      	ldr	r3, [r7, #24]
    1f14:	643b      	str	r3, [r7, #64]	; 0x40
        if (prec_width < prec) {
    1f16:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    1f18:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    1f1a:	429a      	cmp	r2, r3
    1f1c:	da01      	bge.n	1f22 <mp_print_mp_int+0x228>
            prec_width = prec;
    1f1e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    1f20:	643b      	str	r3, [r7, #64]	; 0x40
        }
        if (flags & PF_FLAG_PAD_AFTER_SIGN) {
    1f22:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    1f24:	f003 0340 	and.w	r3, r3, #64	; 0x40
    1f28:	2b00      	cmp	r3, #0
    1f2a:	d009      	beq.n	1f40 <mp_print_mp_int+0x246>
            if (sign) {
    1f2c:	7dfb      	ldrb	r3, [r7, #23]
    1f2e:	2b00      	cmp	r3, #0
    1f30:	d002      	beq.n	1f38 <mp_print_mp_int+0x23e>
                prec_width++;
    1f32:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    1f34:	3301      	adds	r3, #1
    1f36:	643b      	str	r3, [r7, #64]	; 0x40
            }
            prec_width += prefix_len;
    1f38:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    1f3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1f3c:	4413      	add	r3, r2
    1f3e:	643b      	str	r3, [r7, #64]	; 0x40
        }
        if (prec_width < width) {
    1f40:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    1f42:	6f3b      	ldr	r3, [r7, #112]	; 0x70
    1f44:	429a      	cmp	r2, r3
    1f46:	da15      	bge.n	1f74 <mp_print_mp_int+0x27a>
            if (flags & PF_FLAG_LEFT_ADJUST) {
    1f48:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    1f4a:	f003 0301 	and.w	r3, r3, #1
    1f4e:	2b00      	cmp	r3, #0
    1f50:	d00c      	beq.n	1f6c <mp_print_mp_int+0x272>
                spaces_after = width - prec_width;
    1f52:	6f3a      	ldr	r2, [r7, #112]	; 0x70
    1f54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    1f56:	1ad3      	subs	r3, r2, r3
    1f58:	647b      	str	r3, [r7, #68]	; 0x44
    1f5a:	e00b      	b.n	1f74 <mp_print_mp_int+0x27a>
    1f5c:	000210d4 	.word	0x000210d4
    1f60:	00021160 	.word	0x00021160
    1f64:	00021108 	.word	0x00021108
    1f68:	00024bd8 	.word	0x00024bd8
            } else {
                spaces_before = width - prec_width;
    1f6c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
    1f6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    1f70:	1ad3      	subs	r3, r2, r3
    1f72:	64bb      	str	r3, [r7, #72]	; 0x48
            }
        }
        fill = '0';
    1f74:	2330      	movs	r3, #48	; 0x30
    1f76:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
        flags &= ~PF_FLAG_LEFT_ADJUST;
    1f7a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    1f7c:	f023 0301 	bic.w	r3, r3, #1
    1f80:	66bb      	str	r3, [r7, #104]	; 0x68
    }

    int len = 0;
    1f82:	2300      	movs	r3, #0
    1f84:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (spaces_before) {
    1f86:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    1f88:	2b00      	cmp	r3, #0
    1f8a:	d00d      	beq.n	1fa8 <mp_print_mp_int+0x2ae>
        len += mp_print_strn(print, "", 0, 0, ' ', spaces_before);
    1f8c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    1f8e:	9301      	str	r3, [sp, #4]
    1f90:	2320      	movs	r3, #32
    1f92:	9300      	str	r3, [sp, #0]
    1f94:	2300      	movs	r3, #0
    1f96:	2200      	movs	r2, #0
    1f98:	4934      	ldr	r1, [pc, #208]	; (206c <mp_print_mp_int+0x372>)
    1f9a:	68f8      	ldr	r0, [r7, #12]
    1f9c:	f7ff fd6e 	bl	1a7c <mp_print_strn>
    1fa0:	4602      	mov	r2, r0
    1fa2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1fa4:	4413      	add	r3, r2
    1fa6:	63fb      	str	r3, [r7, #60]	; 0x3c
    }
    if (flags & PF_FLAG_PAD_AFTER_SIGN) {
    1fa8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    1faa:	f003 0340 	and.w	r3, r3, #64	; 0x40
    1fae:	2b00      	cmp	r3, #0
    1fb0:	d029      	beq.n	2006 <mp_print_mp_int+0x30c>
        // pad after sign implies pad after prefix as well.
        if (sign) {
    1fb2:	7dfb      	ldrb	r3, [r7, #23]
    1fb4:	2b00      	cmp	r3, #0
    1fb6:	d011      	beq.n	1fdc <mp_print_mp_int+0x2e2>
            len += mp_print_strn(print, &sign, 1, 0, 0, 1);
    1fb8:	f107 0117 	add.w	r1, r7, #23
    1fbc:	2301      	movs	r3, #1
    1fbe:	9301      	str	r3, [sp, #4]
    1fc0:	2300      	movs	r3, #0
    1fc2:	9300      	str	r3, [sp, #0]
    1fc4:	2300      	movs	r3, #0
    1fc6:	2201      	movs	r2, #1
    1fc8:	68f8      	ldr	r0, [r7, #12]
    1fca:	f7ff fd57 	bl	1a7c <mp_print_strn>
    1fce:	4602      	mov	r2, r0
    1fd0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1fd2:	4413      	add	r3, r2
    1fd4:	63fb      	str	r3, [r7, #60]	; 0x3c
            width--;
    1fd6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
    1fd8:	3b01      	subs	r3, #1
    1fda:	673b      	str	r3, [r7, #112]	; 0x70
        }
        if (prefix_len) {
    1fdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1fde:	2b00      	cmp	r3, #0
    1fe0:	d011      	beq.n	2006 <mp_print_mp_int+0x30c>
            len += mp_print_strn(print, prefix, prefix_len, 0, 0, 1);
    1fe2:	6bba      	ldr	r2, [r7, #56]	; 0x38
    1fe4:	2301      	movs	r3, #1
    1fe6:	9301      	str	r3, [sp, #4]
    1fe8:	2300      	movs	r3, #0
    1fea:	9300      	str	r3, [sp, #0]
    1fec:	2300      	movs	r3, #0
    1fee:	6d79      	ldr	r1, [r7, #84]	; 0x54
    1ff0:	68f8      	ldr	r0, [r7, #12]
    1ff2:	f7ff fd43 	bl	1a7c <mp_print_strn>
    1ff6:	4602      	mov	r2, r0
    1ff8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1ffa:	4413      	add	r3, r2
    1ffc:	63fb      	str	r3, [r7, #60]	; 0x3c
            width -= prefix_len;
    1ffe:	6f3a      	ldr	r2, [r7, #112]	; 0x70
    2000:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    2002:	1ad3      	subs	r3, r2, r3
    2004:	673b      	str	r3, [r7, #112]	; 0x70
        }
    }
    if (prec > 1) {
    2006:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    2008:	2b01      	cmp	r3, #1
    200a:	dd01      	ble.n	2010 <mp_print_mp_int+0x316>
        width = prec;
    200c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    200e:	673b      	str	r3, [r7, #112]	; 0x70
    }

    len += mp_print_strn(print, str, fmt_size, flags, fill, width);
    2010:	69ba      	ldr	r2, [r7, #24]
    2012:	6f3b      	ldr	r3, [r7, #112]	; 0x70
    2014:	9301      	str	r3, [sp, #4]
    2016:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
    201a:	9300      	str	r3, [sp, #0]
    201c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    201e:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
    2020:	68f8      	ldr	r0, [r7, #12]
    2022:	f7ff fd2b 	bl	1a7c <mp_print_strn>
    2026:	4602      	mov	r2, r0
    2028:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    202a:	4413      	add	r3, r2
    202c:	63fb      	str	r3, [r7, #60]	; 0x3c

    if (spaces_after) {
    202e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    2030:	2b00      	cmp	r3, #0
    2032:	d00d      	beq.n	2050 <mp_print_mp_int+0x356>
        len += mp_print_strn(print, "", 0, 0, ' ', spaces_after);
    2034:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    2036:	9301      	str	r3, [sp, #4]
    2038:	2320      	movs	r3, #32
    203a:	9300      	str	r3, [sp, #0]
    203c:	2300      	movs	r3, #0
    203e:	2200      	movs	r2, #0
    2040:	490a      	ldr	r1, [pc, #40]	; (206c <mp_print_mp_int+0x372>)
    2042:	68f8      	ldr	r0, [r7, #12]
    2044:	f7ff fd1a 	bl	1a7c <mp_print_strn>
    2048:	4602      	mov	r2, r0
    204a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    204c:	4413      	add	r3, r2
    204e:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

    if (buf != stack_buf) {
    2050:	6a3a      	ldr	r2, [r7, #32]
    2052:	f107 0324 	add.w	r3, r7, #36	; 0x24
    2056:	429a      	cmp	r2, r3
    2058:	d003      	beq.n	2062 <mp_print_mp_int+0x368>
        m_del(char, buf, buf_size);
    205a:	6a3b      	ldr	r3, [r7, #32]
    205c:	4618      	mov	r0, r3
    205e:	f7fe f9db 	bl	418 <m_free>
    }
    return len;
    2062:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
    2064:	4618      	mov	r0, r3
    2066:	375c      	adds	r7, #92	; 0x5c
    2068:	46bd      	mov	sp, r7
    206a:	bd90      	pop	{r4, r7, pc}
    206c:	0002111c 	.word	0x0002111c

00002070 <mp_printf>:

    return chrs;
}
#endif

int mp_printf(const mp_print_t *print, const char *fmt, ...) {
    2070:	b40e      	push	{r1, r2, r3}
    2072:	b580      	push	{r7, lr}
    2074:	b085      	sub	sp, #20
    2076:	af00      	add	r7, sp, #0
    2078:	6078      	str	r0, [r7, #4]
    va_list ap;
    va_start(ap, fmt);
    207a:	f107 0320 	add.w	r3, r7, #32
    207e:	60bb      	str	r3, [r7, #8]
    int ret = mp_vprintf(print, fmt, ap);
    2080:	68ba      	ldr	r2, [r7, #8]
    2082:	69f9      	ldr	r1, [r7, #28]
    2084:	6878      	ldr	r0, [r7, #4]
    2086:	f000 f809 	bl	209c <mp_vprintf>
    208a:	60f8      	str	r0, [r7, #12]
    va_end(ap);
    return ret;
    208c:	68fb      	ldr	r3, [r7, #12]
}
    208e:	4618      	mov	r0, r3
    2090:	3714      	adds	r7, #20
    2092:	46bd      	mov	sp, r7
    2094:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
    2098:	b003      	add	sp, #12
    209a:	4770      	bx	lr

0000209c <mp_vprintf>:

int mp_vprintf(const mp_print_t *print, const char *fmt, va_list args) {
    209c:	b580      	push	{r7, lr}
    209e:	b096      	sub	sp, #88	; 0x58
    20a0:	af04      	add	r7, sp, #16
    20a2:	60f8      	str	r0, [r7, #12]
    20a4:	60b9      	str	r1, [r7, #8]
    20a6:	607a      	str	r2, [r7, #4]
    int chrs = 0;
    20a8:	2300      	movs	r3, #0
    20aa:	647b      	str	r3, [r7, #68]	; 0x44
    for (;;) {
        {
            const char *f = fmt;
    20ac:	68bb      	ldr	r3, [r7, #8]
    20ae:	643b      	str	r3, [r7, #64]	; 0x40
            while (*f != '\0' && *f != '%') {
    20b0:	e002      	b.n	20b8 <mp_vprintf+0x1c>
                ++f; // XXX UTF8 advance char
    20b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    20b4:	3301      	adds	r3, #1
    20b6:	643b      	str	r3, [r7, #64]	; 0x40
            while (*f != '\0' && *f != '%') {
    20b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    20ba:	781b      	ldrb	r3, [r3, #0]
    20bc:	2b00      	cmp	r3, #0
    20be:	d003      	beq.n	20c8 <mp_vprintf+0x2c>
    20c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    20c2:	781b      	ldrb	r3, [r3, #0]
    20c4:	2b25      	cmp	r3, #37	; 0x25
    20c6:	d1f4      	bne.n	20b2 <mp_vprintf+0x16>
            }
            if (f > fmt) {
    20c8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    20ca:	68bb      	ldr	r3, [r7, #8]
    20cc:	429a      	cmp	r2, r3
    20ce:	d910      	bls.n	20f2 <mp_vprintf+0x56>
                print->print_strn(print->data, fmt, f - fmt);
    20d0:	68fb      	ldr	r3, [r7, #12]
    20d2:	685b      	ldr	r3, [r3, #4]
    20d4:	68fa      	ldr	r2, [r7, #12]
    20d6:	6810      	ldr	r0, [r2, #0]
    20d8:	6c39      	ldr	r1, [r7, #64]	; 0x40
    20da:	68ba      	ldr	r2, [r7, #8]
    20dc:	1a8a      	subs	r2, r1, r2
    20de:	68b9      	ldr	r1, [r7, #8]
    20e0:	4798      	blx	r3
                chrs += f - fmt;
    20e2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    20e4:	68bb      	ldr	r3, [r7, #8]
    20e6:	1ad3      	subs	r3, r2, r3
    20e8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    20ea:	4413      	add	r3, r2
    20ec:	647b      	str	r3, [r7, #68]	; 0x44
                fmt = f;
    20ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    20f0:	60bb      	str	r3, [r7, #8]
            }
        }

        if (*fmt == '\0') {
    20f2:	68bb      	ldr	r3, [r7, #8]
    20f4:	781b      	ldrb	r3, [r3, #0]
    20f6:	2b00      	cmp	r3, #0
    20f8:	f000 8214 	beq.w	2524 <mp_vprintf+0x488>
            break;
        }

        // move past % character
        ++fmt;
    20fc:	68bb      	ldr	r3, [r7, #8]
    20fe:	3301      	adds	r3, #1
    2100:	60bb      	str	r3, [r7, #8]

        // parse flags, if they exist
        int flags = 0;
    2102:	2300      	movs	r3, #0
    2104:	63fb      	str	r3, [r7, #60]	; 0x3c
        char fill = ' ';
    2106:	2320      	movs	r3, #32
    2108:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
        while (*fmt != '\0') {
    210c:	e031      	b.n	2172 <mp_vprintf+0xd6>
            if (*fmt == '-') flags |= PF_FLAG_LEFT_ADJUST;
    210e:	68bb      	ldr	r3, [r7, #8]
    2110:	781b      	ldrb	r3, [r3, #0]
    2112:	2b2d      	cmp	r3, #45	; 0x2d
    2114:	d104      	bne.n	2120 <mp_vprintf+0x84>
    2116:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    2118:	f043 0301 	orr.w	r3, r3, #1
    211c:	63fb      	str	r3, [r7, #60]	; 0x3c
    211e:	e025      	b.n	216c <mp_vprintf+0xd0>
            else if (*fmt == '+') flags |= PF_FLAG_SHOW_SIGN;
    2120:	68bb      	ldr	r3, [r7, #8]
    2122:	781b      	ldrb	r3, [r3, #0]
    2124:	2b2b      	cmp	r3, #43	; 0x2b
    2126:	d104      	bne.n	2132 <mp_vprintf+0x96>
    2128:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    212a:	f043 0302 	orr.w	r3, r3, #2
    212e:	63fb      	str	r3, [r7, #60]	; 0x3c
    2130:	e01c      	b.n	216c <mp_vprintf+0xd0>
            else if (*fmt == ' ') flags |= PF_FLAG_SPACE_SIGN;
    2132:	68bb      	ldr	r3, [r7, #8]
    2134:	781b      	ldrb	r3, [r3, #0]
    2136:	2b20      	cmp	r3, #32
    2138:	d104      	bne.n	2144 <mp_vprintf+0xa8>
    213a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    213c:	f043 0304 	orr.w	r3, r3, #4
    2140:	63fb      	str	r3, [r7, #60]	; 0x3c
    2142:	e013      	b.n	216c <mp_vprintf+0xd0>
            else if (*fmt == '!') flags |= PF_FLAG_NO_TRAILZ;
    2144:	68bb      	ldr	r3, [r7, #8]
    2146:	781b      	ldrb	r3, [r3, #0]
    2148:	2b21      	cmp	r3, #33	; 0x21
    214a:	d104      	bne.n	2156 <mp_vprintf+0xba>
    214c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    214e:	f043 0308 	orr.w	r3, r3, #8
    2152:	63fb      	str	r3, [r7, #60]	; 0x3c
    2154:	e00a      	b.n	216c <mp_vprintf+0xd0>
            else if (*fmt == '0') {
    2156:	68bb      	ldr	r3, [r7, #8]
    2158:	781b      	ldrb	r3, [r3, #0]
    215a:	2b30      	cmp	r3, #48	; 0x30
    215c:	d10e      	bne.n	217c <mp_vprintf+0xe0>
                flags |= PF_FLAG_PAD_AFTER_SIGN;
    215e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    2160:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    2164:	63fb      	str	r3, [r7, #60]	; 0x3c
                fill = '0';
    2166:	2330      	movs	r3, #48	; 0x30
    2168:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
            } else break;
            ++fmt;
    216c:	68bb      	ldr	r3, [r7, #8]
    216e:	3301      	adds	r3, #1
    2170:	60bb      	str	r3, [r7, #8]
        while (*fmt != '\0') {
    2172:	68bb      	ldr	r3, [r7, #8]
    2174:	781b      	ldrb	r3, [r3, #0]
    2176:	2b00      	cmp	r3, #0
    2178:	d1c9      	bne.n	210e <mp_vprintf+0x72>
    217a:	e000      	b.n	217e <mp_vprintf+0xe2>
            } else break;
    217c:	bf00      	nop
        }

        // parse width, if it exists
        int width = 0;
    217e:	2300      	movs	r3, #0
    2180:	637b      	str	r3, [r7, #52]	; 0x34
        for (; '0' <= *fmt && *fmt <= '9'; ++fmt) {
    2182:	e00d      	b.n	21a0 <mp_vprintf+0x104>
            width = width * 10 + *fmt - '0';
    2184:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    2186:	4613      	mov	r3, r2
    2188:	009b      	lsls	r3, r3, #2
    218a:	4413      	add	r3, r2
    218c:	005b      	lsls	r3, r3, #1
    218e:	461a      	mov	r2, r3
    2190:	68bb      	ldr	r3, [r7, #8]
    2192:	781b      	ldrb	r3, [r3, #0]
    2194:	4413      	add	r3, r2
    2196:	3b30      	subs	r3, #48	; 0x30
    2198:	637b      	str	r3, [r7, #52]	; 0x34
        for (; '0' <= *fmt && *fmt <= '9'; ++fmt) {
    219a:	68bb      	ldr	r3, [r7, #8]
    219c:	3301      	adds	r3, #1
    219e:	60bb      	str	r3, [r7, #8]
    21a0:	68bb      	ldr	r3, [r7, #8]
    21a2:	781b      	ldrb	r3, [r3, #0]
    21a4:	2b2f      	cmp	r3, #47	; 0x2f
    21a6:	d903      	bls.n	21b0 <mp_vprintf+0x114>
    21a8:	68bb      	ldr	r3, [r7, #8]
    21aa:	781b      	ldrb	r3, [r3, #0]
    21ac:	2b39      	cmp	r3, #57	; 0x39
    21ae:	d9e9      	bls.n	2184 <mp_vprintf+0xe8>
        }

        // parse precision, if it exists
        int prec = -1;
    21b0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    21b4:	633b      	str	r3, [r7, #48]	; 0x30
        if (*fmt == '.') {
    21b6:	68bb      	ldr	r3, [r7, #8]
    21b8:	781b      	ldrb	r3, [r3, #0]
    21ba:	2b2e      	cmp	r3, #46	; 0x2e
    21bc:	d12d      	bne.n	221a <mp_vprintf+0x17e>
            ++fmt;
    21be:	68bb      	ldr	r3, [r7, #8]
    21c0:	3301      	adds	r3, #1
    21c2:	60bb      	str	r3, [r7, #8]
            if (*fmt == '*') {
    21c4:	68bb      	ldr	r3, [r7, #8]
    21c6:	781b      	ldrb	r3, [r3, #0]
    21c8:	2b2a      	cmp	r3, #42	; 0x2a
    21ca:	d108      	bne.n	21de <mp_vprintf+0x142>
                ++fmt;
    21cc:	68bb      	ldr	r3, [r7, #8]
    21ce:	3301      	adds	r3, #1
    21d0:	60bb      	str	r3, [r7, #8]
                prec = va_arg(args, int);
    21d2:	687b      	ldr	r3, [r7, #4]
    21d4:	1d1a      	adds	r2, r3, #4
    21d6:	607a      	str	r2, [r7, #4]
    21d8:	681b      	ldr	r3, [r3, #0]
    21da:	633b      	str	r3, [r7, #48]	; 0x30
    21dc:	e018      	b.n	2210 <mp_vprintf+0x174>
            } else {
                prec = 0;
    21de:	2300      	movs	r3, #0
    21e0:	633b      	str	r3, [r7, #48]	; 0x30
                for (; '0' <= *fmt && *fmt <= '9'; ++fmt) {
    21e2:	e00d      	b.n	2200 <mp_vprintf+0x164>
                    prec = prec * 10 + *fmt - '0';
    21e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    21e6:	4613      	mov	r3, r2
    21e8:	009b      	lsls	r3, r3, #2
    21ea:	4413      	add	r3, r2
    21ec:	005b      	lsls	r3, r3, #1
    21ee:	461a      	mov	r2, r3
    21f0:	68bb      	ldr	r3, [r7, #8]
    21f2:	781b      	ldrb	r3, [r3, #0]
    21f4:	4413      	add	r3, r2
    21f6:	3b30      	subs	r3, #48	; 0x30
    21f8:	633b      	str	r3, [r7, #48]	; 0x30
                for (; '0' <= *fmt && *fmt <= '9'; ++fmt) {
    21fa:	68bb      	ldr	r3, [r7, #8]
    21fc:	3301      	adds	r3, #1
    21fe:	60bb      	str	r3, [r7, #8]
    2200:	68bb      	ldr	r3, [r7, #8]
    2202:	781b      	ldrb	r3, [r3, #0]
    2204:	2b2f      	cmp	r3, #47	; 0x2f
    2206:	d903      	bls.n	2210 <mp_vprintf+0x174>
    2208:	68bb      	ldr	r3, [r7, #8]
    220a:	781b      	ldrb	r3, [r3, #0]
    220c:	2b39      	cmp	r3, #57	; 0x39
    220e:	d9e9      	bls.n	21e4 <mp_vprintf+0x148>
                }
            }
            if (prec < 0) {
    2210:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    2212:	2b00      	cmp	r3, #0
    2214:	da01      	bge.n	221a <mp_vprintf+0x17e>
                prec = 0;
    2216:	2300      	movs	r3, #0
    2218:	633b      	str	r3, [r7, #48]	; 0x30

        // parse long specifiers (only for LP64 model where they make a difference)
        #ifndef __LP64__
        const
        #endif
        bool long_arg = false;
    221a:	2300      	movs	r3, #0
    221c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        if (*fmt == 'l') {
    2220:	68bb      	ldr	r3, [r7, #8]
    2222:	781b      	ldrb	r3, [r3, #0]
    2224:	2b6c      	cmp	r3, #108	; 0x6c
    2226:	d102      	bne.n	222e <mp_vprintf+0x192>
            ++fmt;
    2228:	68bb      	ldr	r3, [r7, #8]
    222a:	3301      	adds	r3, #1
    222c:	60bb      	str	r3, [r7, #8]
            #ifdef __LP64__
            long_arg = true;
            #endif
        }

        if (*fmt == '\0') {
    222e:	68bb      	ldr	r3, [r7, #8]
    2230:	781b      	ldrb	r3, [r3, #0]
    2232:	2b00      	cmp	r3, #0
    2234:	f000 8178 	beq.w	2528 <mp_vprintf+0x48c>
            break;
        }

        switch (*fmt) {
    2238:	68bb      	ldr	r3, [r7, #8]
    223a:	781b      	ldrb	r3, [r3, #0]
    223c:	3b50      	subs	r3, #80	; 0x50
    223e:	2b28      	cmp	r3, #40	; 0x28
    2240:	f200 8156 	bhi.w	24f0 <mp_vprintf+0x454>
    2244:	a201      	add	r2, pc, #4	; (adr r2, 224c <mp_vprintf+0x1b0>)
    2246:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    224a:	bf00      	nop
    224c:	000024c3 	.word	0x000024c3
    2250:	000024f1 	.word	0x000024f1
    2254:	000024f1 	.word	0x000024f1
    2258:	000024f1 	.word	0x000024f1
    225c:	000024f1 	.word	0x000024f1
    2260:	000024f1 	.word	0x000024f1
    2264:	000024f1 	.word	0x000024f1
    2268:	000024f1 	.word	0x000024f1
    226c:	00002475 	.word	0x00002475
    2270:	000024f1 	.word	0x000024f1
    2274:	000024f1 	.word	0x000024f1
    2278:	000024f1 	.word	0x000024f1
    227c:	000024f1 	.word	0x000024f1
    2280:	000024f1 	.word	0x000024f1
    2284:	000024f1 	.word	0x000024f1
    2288:	000024f1 	.word	0x000024f1
    228c:	000024f1 	.word	0x000024f1
    2290:	000024f1 	.word	0x000024f1
    2294:	000022f1 	.word	0x000022f1
    2298:	0000233d 	.word	0x0000233d
    229c:	00002445 	.word	0x00002445
    22a0:	000024f1 	.word	0x000024f1
    22a4:	000024f1 	.word	0x000024f1
    22a8:	000024f1 	.word	0x000024f1
    22ac:	000024f1 	.word	0x000024f1
    22b0:	000024f1 	.word	0x000024f1
    22b4:	000024f1 	.word	0x000024f1
    22b8:	000024f1 	.word	0x000024f1
    22bc:	000024f1 	.word	0x000024f1
    22c0:	000024f1 	.word	0x000024f1
    22c4:	000024f1 	.word	0x000024f1
    22c8:	000024f1 	.word	0x000024f1
    22cc:	000024c3 	.word	0x000024c3
    22d0:	0000236d 	.word	0x0000236d
    22d4:	000024f1 	.word	0x000024f1
    22d8:	000023b1 	.word	0x000023b1
    22dc:	000024f1 	.word	0x000024f1
    22e0:	00002417 	.word	0x00002417
    22e4:	000024f1 	.word	0x000024f1
    22e8:	000024f1 	.word	0x000024f1
    22ec:	00002475 	.word	0x00002475
            case 'b':
                if (va_arg(args, int)) {
    22f0:	687b      	ldr	r3, [r7, #4]
    22f2:	1d1a      	adds	r2, r3, #4
    22f4:	607a      	str	r2, [r7, #4]
    22f6:	681b      	ldr	r3, [r3, #0]
    22f8:	2b00      	cmp	r3, #0
    22fa:	d00f      	beq.n	231c <mp_vprintf+0x280>
                    chrs += mp_print_strn(print, "true", 4, flags, fill, width);
    22fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    22fe:	9301      	str	r3, [sp, #4]
    2300:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
    2304:	9300      	str	r3, [sp, #0]
    2306:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    2308:	2204      	movs	r2, #4
    230a:	498a      	ldr	r1, [pc, #552]	; (2534 <mp_vprintf+0x498>)
    230c:	68f8      	ldr	r0, [r7, #12]
    230e:	f7ff fbb5 	bl	1a7c <mp_print_strn>
    2312:	4602      	mov	r2, r0
    2314:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    2316:	4413      	add	r3, r2
    2318:	647b      	str	r3, [r7, #68]	; 0x44
                } else {
                    chrs += mp_print_strn(print, "false", 5, flags, fill, width);
                }
                break;
    231a:	e0ff      	b.n	251c <mp_vprintf+0x480>
                    chrs += mp_print_strn(print, "false", 5, flags, fill, width);
    231c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    231e:	9301      	str	r3, [sp, #4]
    2320:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
    2324:	9300      	str	r3, [sp, #0]
    2326:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    2328:	2205      	movs	r2, #5
    232a:	4983      	ldr	r1, [pc, #524]	; (2538 <mp_vprintf+0x49c>)
    232c:	68f8      	ldr	r0, [r7, #12]
    232e:	f7ff fba5 	bl	1a7c <mp_print_strn>
    2332:	4602      	mov	r2, r0
    2334:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    2336:	4413      	add	r3, r2
    2338:	647b      	str	r3, [r7, #68]	; 0x44
                break;
    233a:	e0ef      	b.n	251c <mp_vprintf+0x480>
            case 'c':
            {
                char str = va_arg(args, int);
    233c:	687b      	ldr	r3, [r7, #4]
    233e:	1d1a      	adds	r2, r3, #4
    2340:	607a      	str	r2, [r7, #4]
    2342:	681b      	ldr	r3, [r3, #0]
    2344:	b2db      	uxtb	r3, r3
    2346:	76bb      	strb	r3, [r7, #26]
                chrs += mp_print_strn(print, &str, 1, flags, fill, width);
    2348:	f107 011a 	add.w	r1, r7, #26
    234c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    234e:	9301      	str	r3, [sp, #4]
    2350:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
    2354:	9300      	str	r3, [sp, #0]
    2356:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    2358:	2201      	movs	r2, #1
    235a:	68f8      	ldr	r0, [r7, #12]
    235c:	f7ff fb8e 	bl	1a7c <mp_print_strn>
    2360:	4602      	mov	r2, r0
    2362:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    2364:	4413      	add	r3, r2
    2366:	647b      	str	r3, [r7, #68]	; 0x44
                break;
    2368:	bf00      	nop
    236a:	e0d7      	b.n	251c <mp_vprintf+0x480>
            }
            case 'q':
            {
                qstr qst = va_arg(args, qstr);
    236c:	687b      	ldr	r3, [r7, #4]
    236e:	1d1a      	adds	r2, r3, #4
    2370:	607a      	str	r2, [r7, #4]
    2372:	681b      	ldr	r3, [r3, #0]
    2374:	627b      	str	r3, [r7, #36]	; 0x24
                size_t len;
                const char *str = (const char*)qstr_data(qst, &len);
    2376:	f107 0314 	add.w	r3, r7, #20
    237a:	4619      	mov	r1, r3
    237c:	6a78      	ldr	r0, [r7, #36]	; 0x24
    237e:	f7ff f835 	bl	13ec <qstr_data>
    2382:	6238      	str	r0, [r7, #32]
                if (prec < 0) {
    2384:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    2386:	2b00      	cmp	r3, #0
    2388:	da01      	bge.n	238e <mp_vprintf+0x2f2>
                    prec = len;
    238a:	697b      	ldr	r3, [r7, #20]
    238c:	633b      	str	r3, [r7, #48]	; 0x30
                }
                chrs += mp_print_strn(print, str, prec, flags, fill, width);
    238e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    2390:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    2392:	9301      	str	r3, [sp, #4]
    2394:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
    2398:	9300      	str	r3, [sp, #0]
    239a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    239c:	6a39      	ldr	r1, [r7, #32]
    239e:	68f8      	ldr	r0, [r7, #12]
    23a0:	f7ff fb6c 	bl	1a7c <mp_print_strn>
    23a4:	4602      	mov	r2, r0
    23a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    23a8:	4413      	add	r3, r2
    23aa:	647b      	str	r3, [r7, #68]	; 0x44
                break;
    23ac:	bf00      	nop
    23ae:	e0b5      	b.n	251c <mp_vprintf+0x480>
            }
            case 's':
            {
                const char *str = va_arg(args, const char*);
    23b0:	687b      	ldr	r3, [r7, #4]
    23b2:	1d1a      	adds	r2, r3, #4
    23b4:	607a      	str	r2, [r7, #4]
    23b6:	681b      	ldr	r3, [r3, #0]
    23b8:	61fb      	str	r3, [r7, #28]
                #ifndef NDEBUG
                // With debugging enabled, catch printing of null string pointers
                if (prec != 0 && str == NULL) {
    23ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    23bc:	2b00      	cmp	r3, #0
    23be:	d012      	beq.n	23e6 <mp_vprintf+0x34a>
    23c0:	69fb      	ldr	r3, [r7, #28]
    23c2:	2b00      	cmp	r3, #0
    23c4:	d10f      	bne.n	23e6 <mp_vprintf+0x34a>
                    chrs += mp_print_strn(print, "(null)", 6, flags, fill, width);
    23c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    23c8:	9301      	str	r3, [sp, #4]
    23ca:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
    23ce:	9300      	str	r3, [sp, #0]
    23d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    23d2:	2206      	movs	r2, #6
    23d4:	4959      	ldr	r1, [pc, #356]	; (253c <mp_vprintf+0x4a0>)
    23d6:	68f8      	ldr	r0, [r7, #12]
    23d8:	f7ff fb50 	bl	1a7c <mp_print_strn>
    23dc:	4602      	mov	r2, r0
    23de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    23e0:	4413      	add	r3, r2
    23e2:	647b      	str	r3, [r7, #68]	; 0x44
                    break;
    23e4:	e09a      	b.n	251c <mp_vprintf+0x480>
                }
                #endif
                if (prec < 0) {
    23e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    23e8:	2b00      	cmp	r3, #0
    23ea:	da04      	bge.n	23f6 <mp_vprintf+0x35a>
                    prec = strlen(str);
    23ec:	69f8      	ldr	r0, [r7, #28]
    23ee:	f01c f9d5 	bl	1e79c <strlen>
    23f2:	4603      	mov	r3, r0
    23f4:	633b      	str	r3, [r7, #48]	; 0x30
                }
                chrs += mp_print_strn(print, str, prec, flags, fill, width);
    23f6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    23f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    23fa:	9301      	str	r3, [sp, #4]
    23fc:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
    2400:	9300      	str	r3, [sp, #0]
    2402:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    2404:	69f9      	ldr	r1, [r7, #28]
    2406:	68f8      	ldr	r0, [r7, #12]
    2408:	f7ff fb38 	bl	1a7c <mp_print_strn>
    240c:	4602      	mov	r2, r0
    240e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    2410:	4413      	add	r3, r2
    2412:	647b      	str	r3, [r7, #68]	; 0x44
                break;
    2414:	e082      	b.n	251c <mp_vprintf+0x480>
            }
            case 'u':
                chrs += mp_print_int(print, va_arg(args, unsigned int), 0, 10, 'a', flags, fill, width);
    2416:	687b      	ldr	r3, [r7, #4]
    2418:	1d1a      	adds	r2, r3, #4
    241a:	607a      	str	r2, [r7, #4]
    241c:	6819      	ldr	r1, [r3, #0]
    241e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    2420:	9303      	str	r3, [sp, #12]
    2422:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
    2426:	9302      	str	r3, [sp, #8]
    2428:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    242a:	9301      	str	r3, [sp, #4]
    242c:	2361      	movs	r3, #97	; 0x61
    242e:	9300      	str	r3, [sp, #0]
    2430:	230a      	movs	r3, #10
    2432:	2200      	movs	r2, #0
    2434:	68f8      	ldr	r0, [r7, #12]
    2436:	f7ff fbb9 	bl	1bac <mp_print_int>
    243a:	4602      	mov	r2, r0
    243c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    243e:	4413      	add	r3, r2
    2440:	647b      	str	r3, [r7, #68]	; 0x44
                break;
    2442:	e06b      	b.n	251c <mp_vprintf+0x480>
            case 'd':
                chrs += mp_print_int(print, va_arg(args, int), 1, 10, 'a', flags, fill, width);
    2444:	687b      	ldr	r3, [r7, #4]
    2446:	1d1a      	adds	r2, r3, #4
    2448:	607a      	str	r2, [r7, #4]
    244a:	681b      	ldr	r3, [r3, #0]
    244c:	4619      	mov	r1, r3
    244e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    2450:	9303      	str	r3, [sp, #12]
    2452:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
    2456:	9302      	str	r3, [sp, #8]
    2458:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    245a:	9301      	str	r3, [sp, #4]
    245c:	2361      	movs	r3, #97	; 0x61
    245e:	9300      	str	r3, [sp, #0]
    2460:	230a      	movs	r3, #10
    2462:	2201      	movs	r2, #1
    2464:	68f8      	ldr	r0, [r7, #12]
    2466:	f7ff fba1 	bl	1bac <mp_print_int>
    246a:	4602      	mov	r2, r0
    246c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    246e:	4413      	add	r3, r2
    2470:	647b      	str	r3, [r7, #68]	; 0x44
                break;
    2472:	e053      	b.n	251c <mp_vprintf+0x480>
            case 'x':
            case 'X': {
                char fmt_c = *fmt - 'X' + 'A';
    2474:	68bb      	ldr	r3, [r7, #8]
    2476:	781b      	ldrb	r3, [r3, #0]
    2478:	3b17      	subs	r3, #23
    247a:	76fb      	strb	r3, [r7, #27]
                mp_uint_t val;
                if (long_arg) {
    247c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
    2480:	2b00      	cmp	r3, #0
    2482:	d005      	beq.n	2490 <mp_vprintf+0x3f4>
                    val = va_arg(args, unsigned long int);
    2484:	687b      	ldr	r3, [r7, #4]
    2486:	1d1a      	adds	r2, r3, #4
    2488:	607a      	str	r2, [r7, #4]
    248a:	681b      	ldr	r3, [r3, #0]
    248c:	62fb      	str	r3, [r7, #44]	; 0x2c
    248e:	e004      	b.n	249a <mp_vprintf+0x3fe>
                } else {
                    val = va_arg(args, unsigned int);
    2490:	687b      	ldr	r3, [r7, #4]
    2492:	1d1a      	adds	r2, r3, #4
    2494:	607a      	str	r2, [r7, #4]
    2496:	681b      	ldr	r3, [r3, #0]
    2498:	62fb      	str	r3, [r7, #44]	; 0x2c
                }
                chrs += mp_print_int(print, val, 0, 16, fmt_c, flags, fill, width);
    249a:	7efb      	ldrb	r3, [r7, #27]
    249c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    249e:	9203      	str	r2, [sp, #12]
    24a0:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
    24a4:	9202      	str	r2, [sp, #8]
    24a6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    24a8:	9201      	str	r2, [sp, #4]
    24aa:	9300      	str	r3, [sp, #0]
    24ac:	2310      	movs	r3, #16
    24ae:	2200      	movs	r2, #0
    24b0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
    24b2:	68f8      	ldr	r0, [r7, #12]
    24b4:	f7ff fb7a 	bl	1bac <mp_print_int>
    24b8:	4602      	mov	r2, r0
    24ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    24bc:	4413      	add	r3, r2
    24be:	647b      	str	r3, [r7, #68]	; 0x44
                break;
    24c0:	e02c      	b.n	251c <mp_vprintf+0x480>
            }
            case 'p':
            case 'P': // don't bother to handle upcase for 'P'
                // Use unsigned long int to work on both ILP32 and LP64 systems
                chrs += mp_print_int(print, va_arg(args, unsigned long int), 0, 16, 'a', flags, fill, width);
    24c2:	687b      	ldr	r3, [r7, #4]
    24c4:	1d1a      	adds	r2, r3, #4
    24c6:	607a      	str	r2, [r7, #4]
    24c8:	6819      	ldr	r1, [r3, #0]
    24ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    24cc:	9303      	str	r3, [sp, #12]
    24ce:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
    24d2:	9302      	str	r3, [sp, #8]
    24d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    24d6:	9301      	str	r3, [sp, #4]
    24d8:	2361      	movs	r3, #97	; 0x61
    24da:	9300      	str	r3, [sp, #0]
    24dc:	2310      	movs	r3, #16
    24de:	2200      	movs	r2, #0
    24e0:	68f8      	ldr	r0, [r7, #12]
    24e2:	f7ff fb63 	bl	1bac <mp_print_int>
    24e6:	4602      	mov	r2, r0
    24e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    24ea:	4413      	add	r3, r2
    24ec:	647b      	str	r3, [r7, #68]	; 0x44
                break;
    24ee:	e015      	b.n	251c <mp_vprintf+0x480>
                assert(!"unsupported fmt char");
            }
            #endif
            default:
                // if it's not %% then it's an unsupported format character
                assert(*fmt == '%' || !"unsupported fmt char");
    24f0:	68bb      	ldr	r3, [r7, #8]
    24f2:	781b      	ldrb	r3, [r3, #0]
    24f4:	2b25      	cmp	r3, #37	; 0x25
    24f6:	d006      	beq.n	2506 <mp_vprintf+0x46a>
    24f8:	4b11      	ldr	r3, [pc, #68]	; (2540 <mp_vprintf+0x4a4>)
    24fa:	4a12      	ldr	r2, [pc, #72]	; (2544 <mp_vprintf+0x4a8>)
    24fc:	f240 2132 	movw	r1, #562	; 0x232
    2500:	4811      	ldr	r0, [pc, #68]	; (2548 <mp_vprintf+0x4ac>)
    2502:	f01a fced 	bl	1cee0 <__assert_func>
                print->print_strn(print->data, fmt, 1);
    2506:	68fb      	ldr	r3, [r7, #12]
    2508:	685b      	ldr	r3, [r3, #4]
    250a:	68fa      	ldr	r2, [r7, #12]
    250c:	6810      	ldr	r0, [r2, #0]
    250e:	2201      	movs	r2, #1
    2510:	68b9      	ldr	r1, [r7, #8]
    2512:	4798      	blx	r3
                chrs += 1;
    2514:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    2516:	3301      	adds	r3, #1
    2518:	647b      	str	r3, [r7, #68]	; 0x44
                break;
    251a:	bf00      	nop
        }
        ++fmt;
    251c:	68bb      	ldr	r3, [r7, #8]
    251e:	3301      	adds	r3, #1
    2520:	60bb      	str	r3, [r7, #8]
    for (;;) {
    2522:	e5c3      	b.n	20ac <mp_vprintf+0x10>
            break;
    2524:	bf00      	nop
    2526:	e000      	b.n	252a <mp_vprintf+0x48e>
            break;
    2528:	bf00      	nop
    }
    return chrs;
    252a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
    252c:	4618      	mov	r0, r3
    252e:	3748      	adds	r7, #72	; 0x48
    2530:	46bd      	mov	sp, r7
    2532:	bd80      	pop	{r7, pc}
    2534:	00021120 	.word	0x00021120
    2538:	00021128 	.word	0x00021128
    253c:	00021130 	.word	0x00021130
    2540:	00021138 	.word	0x00021138
    2544:	00021170 	.word	0x00021170
    2548:	00021108 	.word	0x00021108

0000254c <unichar_isspace>:
}

#endif

// Be aware: These unichar_is* functions are actually ASCII-only!
bool unichar_isspace(unichar c) {
    254c:	b480      	push	{r7}
    254e:	b083      	sub	sp, #12
    2550:	af00      	add	r7, sp, #0
    2552:	6078      	str	r0, [r7, #4]
    return c < 128 && (attr[c] & FL_SPACE) != 0;
    2554:	687b      	ldr	r3, [r7, #4]
    2556:	2b7f      	cmp	r3, #127	; 0x7f
    2558:	d809      	bhi.n	256e <unichar_isspace+0x22>
    255a:	4a0a      	ldr	r2, [pc, #40]	; (2584 <unichar_isspace+0x38>)
    255c:	687b      	ldr	r3, [r7, #4]
    255e:	4413      	add	r3, r2
    2560:	781b      	ldrb	r3, [r3, #0]
    2562:	f003 0302 	and.w	r3, r3, #2
    2566:	2b00      	cmp	r3, #0
    2568:	d001      	beq.n	256e <unichar_isspace+0x22>
    256a:	2301      	movs	r3, #1
    256c:	e000      	b.n	2570 <unichar_isspace+0x24>
    256e:	2300      	movs	r3, #0
    2570:	f003 0301 	and.w	r3, r3, #1
    2574:	b2db      	uxtb	r3, r3
}
    2576:	4618      	mov	r0, r3
    2578:	370c      	adds	r7, #12
    257a:	46bd      	mov	sp, r7
    257c:	f85d 7b04 	ldr.w	r7, [sp], #4
    2580:	4770      	bx	lr
    2582:	bf00      	nop
    2584:	0002117c 	.word	0x0002117c

00002588 <unichar_isalpha>:

bool unichar_isalpha(unichar c) {
    2588:	b480      	push	{r7}
    258a:	b083      	sub	sp, #12
    258c:	af00      	add	r7, sp, #0
    258e:	6078      	str	r0, [r7, #4]
    return c < 128 && (attr[c] & FL_ALPHA) != 0;
    2590:	687b      	ldr	r3, [r7, #4]
    2592:	2b7f      	cmp	r3, #127	; 0x7f
    2594:	d809      	bhi.n	25aa <unichar_isalpha+0x22>
    2596:	4a0a      	ldr	r2, [pc, #40]	; (25c0 <unichar_isalpha+0x38>)
    2598:	687b      	ldr	r3, [r7, #4]
    259a:	4413      	add	r3, r2
    259c:	781b      	ldrb	r3, [r3, #0]
    259e:	f003 0308 	and.w	r3, r3, #8
    25a2:	2b00      	cmp	r3, #0
    25a4:	d001      	beq.n	25aa <unichar_isalpha+0x22>
    25a6:	2301      	movs	r3, #1
    25a8:	e000      	b.n	25ac <unichar_isalpha+0x24>
    25aa:	2300      	movs	r3, #0
    25ac:	f003 0301 	and.w	r3, r3, #1
    25b0:	b2db      	uxtb	r3, r3
}
    25b2:	4618      	mov	r0, r3
    25b4:	370c      	adds	r7, #12
    25b6:	46bd      	mov	sp, r7
    25b8:	f85d 7b04 	ldr.w	r7, [sp], #4
    25bc:	4770      	bx	lr
    25be:	bf00      	nop
    25c0:	0002117c 	.word	0x0002117c

000025c4 <unichar_isdigit>:
bool unichar_isprint(unichar c) {
    return c < 128 && (attr[c] & FL_PRINT) != 0;
}
*/

bool unichar_isdigit(unichar c) {
    25c4:	b480      	push	{r7}
    25c6:	b083      	sub	sp, #12
    25c8:	af00      	add	r7, sp, #0
    25ca:	6078      	str	r0, [r7, #4]
    return c < 128 && (attr[c] & FL_DIGIT) != 0;
    25cc:	687b      	ldr	r3, [r7, #4]
    25ce:	2b7f      	cmp	r3, #127	; 0x7f
    25d0:	d809      	bhi.n	25e6 <unichar_isdigit+0x22>
    25d2:	4a0a      	ldr	r2, [pc, #40]	; (25fc <unichar_isdigit+0x38>)
    25d4:	687b      	ldr	r3, [r7, #4]
    25d6:	4413      	add	r3, r2
    25d8:	781b      	ldrb	r3, [r3, #0]
    25da:	f003 0304 	and.w	r3, r3, #4
    25de:	2b00      	cmp	r3, #0
    25e0:	d001      	beq.n	25e6 <unichar_isdigit+0x22>
    25e2:	2301      	movs	r3, #1
    25e4:	e000      	b.n	25e8 <unichar_isdigit+0x24>
    25e6:	2300      	movs	r3, #0
    25e8:	f003 0301 	and.w	r3, r3, #1
    25ec:	b2db      	uxtb	r3, r3
}
    25ee:	4618      	mov	r0, r3
    25f0:	370c      	adds	r7, #12
    25f2:	46bd      	mov	sp, r7
    25f4:	f85d 7b04 	ldr.w	r7, [sp], #4
    25f8:	4770      	bx	lr
    25fa:	bf00      	nop
    25fc:	0002117c 	.word	0x0002117c

00002600 <unichar_isxdigit>:

bool unichar_isxdigit(unichar c) {
    2600:	b480      	push	{r7}
    2602:	b083      	sub	sp, #12
    2604:	af00      	add	r7, sp, #0
    2606:	6078      	str	r0, [r7, #4]
    return c < 128 && (attr[c] & FL_XDIGIT) != 0;
    2608:	687b      	ldr	r3, [r7, #4]
    260a:	2b7f      	cmp	r3, #127	; 0x7f
    260c:	d809      	bhi.n	2622 <unichar_isxdigit+0x22>
    260e:	4a0a      	ldr	r2, [pc, #40]	; (2638 <unichar_isxdigit+0x38>)
    2610:	687b      	ldr	r3, [r7, #4]
    2612:	4413      	add	r3, r2
    2614:	781b      	ldrb	r3, [r3, #0]
    2616:	f003 0340 	and.w	r3, r3, #64	; 0x40
    261a:	2b00      	cmp	r3, #0
    261c:	d001      	beq.n	2622 <unichar_isxdigit+0x22>
    261e:	2301      	movs	r3, #1
    2620:	e000      	b.n	2624 <unichar_isxdigit+0x24>
    2622:	2300      	movs	r3, #0
    2624:	f003 0301 	and.w	r3, r3, #1
    2628:	b2db      	uxtb	r3, r3
}
    262a:	4618      	mov	r0, r3
    262c:	370c      	adds	r7, #12
    262e:	46bd      	mov	sp, r7
    2630:	f85d 7b04 	ldr.w	r7, [sp], #4
    2634:	4770      	bx	lr
    2636:	bf00      	nop
    2638:	0002117c 	.word	0x0002117c

0000263c <unichar_isident>:

bool unichar_isident(unichar c) {
    263c:	b480      	push	{r7}
    263e:	b083      	sub	sp, #12
    2640:	af00      	add	r7, sp, #0
    2642:	6078      	str	r0, [r7, #4]
    return c < 128 && ((attr[c] & (FL_ALPHA | FL_DIGIT)) != 0 || c == '_');
    2644:	687b      	ldr	r3, [r7, #4]
    2646:	2b7f      	cmp	r3, #127	; 0x7f
    2648:	d80c      	bhi.n	2664 <unichar_isident+0x28>
    264a:	4a0b      	ldr	r2, [pc, #44]	; (2678 <unichar_isident+0x3c>)
    264c:	687b      	ldr	r3, [r7, #4]
    264e:	4413      	add	r3, r2
    2650:	781b      	ldrb	r3, [r3, #0]
    2652:	f003 030c 	and.w	r3, r3, #12
    2656:	2b00      	cmp	r3, #0
    2658:	d102      	bne.n	2660 <unichar_isident+0x24>
    265a:	687b      	ldr	r3, [r7, #4]
    265c:	2b5f      	cmp	r3, #95	; 0x5f
    265e:	d101      	bne.n	2664 <unichar_isident+0x28>
    2660:	2301      	movs	r3, #1
    2662:	e000      	b.n	2666 <unichar_isident+0x2a>
    2664:	2300      	movs	r3, #0
    2666:	f003 0301 	and.w	r3, r3, #1
    266a:	b2db      	uxtb	r3, r3
}
    266c:	4618      	mov	r0, r3
    266e:	370c      	adds	r7, #12
    2670:	46bd      	mov	sp, r7
    2672:	f85d 7b04 	ldr.w	r7, [sp], #4
    2676:	4770      	bx	lr
    2678:	0002117c 	.word	0x0002117c

0000267c <unichar_isupper>:

bool unichar_isupper(unichar c) {
    267c:	b480      	push	{r7}
    267e:	b083      	sub	sp, #12
    2680:	af00      	add	r7, sp, #0
    2682:	6078      	str	r0, [r7, #4]
    return c < 128 && (attr[c] & FL_UPPER) != 0;
    2684:	687b      	ldr	r3, [r7, #4]
    2686:	2b7f      	cmp	r3, #127	; 0x7f
    2688:	d809      	bhi.n	269e <unichar_isupper+0x22>
    268a:	4a0a      	ldr	r2, [pc, #40]	; (26b4 <unichar_isupper+0x38>)
    268c:	687b      	ldr	r3, [r7, #4]
    268e:	4413      	add	r3, r2
    2690:	781b      	ldrb	r3, [r3, #0]
    2692:	f003 0310 	and.w	r3, r3, #16
    2696:	2b00      	cmp	r3, #0
    2698:	d001      	beq.n	269e <unichar_isupper+0x22>
    269a:	2301      	movs	r3, #1
    269c:	e000      	b.n	26a0 <unichar_isupper+0x24>
    269e:	2300      	movs	r3, #0
    26a0:	f003 0301 	and.w	r3, r3, #1
    26a4:	b2db      	uxtb	r3, r3
}
    26a6:	4618      	mov	r0, r3
    26a8:	370c      	adds	r7, #12
    26aa:	46bd      	mov	sp, r7
    26ac:	f85d 7b04 	ldr.w	r7, [sp], #4
    26b0:	4770      	bx	lr
    26b2:	bf00      	nop
    26b4:	0002117c 	.word	0x0002117c

000026b8 <unichar_islower>:

bool unichar_islower(unichar c) {
    26b8:	b480      	push	{r7}
    26ba:	b083      	sub	sp, #12
    26bc:	af00      	add	r7, sp, #0
    26be:	6078      	str	r0, [r7, #4]
    return c < 128 && (attr[c] & FL_LOWER) != 0;
    26c0:	687b      	ldr	r3, [r7, #4]
    26c2:	2b7f      	cmp	r3, #127	; 0x7f
    26c4:	d809      	bhi.n	26da <unichar_islower+0x22>
    26c6:	4a0a      	ldr	r2, [pc, #40]	; (26f0 <unichar_islower+0x38>)
    26c8:	687b      	ldr	r3, [r7, #4]
    26ca:	4413      	add	r3, r2
    26cc:	781b      	ldrb	r3, [r3, #0]
    26ce:	f003 0320 	and.w	r3, r3, #32
    26d2:	2b00      	cmp	r3, #0
    26d4:	d001      	beq.n	26da <unichar_islower+0x22>
    26d6:	2301      	movs	r3, #1
    26d8:	e000      	b.n	26dc <unichar_islower+0x24>
    26da:	2300      	movs	r3, #0
    26dc:	f003 0301 	and.w	r3, r3, #1
    26e0:	b2db      	uxtb	r3, r3
}
    26e2:	4618      	mov	r0, r3
    26e4:	370c      	adds	r7, #12
    26e6:	46bd      	mov	sp, r7
    26e8:	f85d 7b04 	ldr.w	r7, [sp], #4
    26ec:	4770      	bx	lr
    26ee:	bf00      	nop
    26f0:	0002117c 	.word	0x0002117c

000026f4 <unichar_tolower>:

unichar unichar_tolower(unichar c) {
    26f4:	b580      	push	{r7, lr}
    26f6:	b082      	sub	sp, #8
    26f8:	af00      	add	r7, sp, #0
    26fa:	6078      	str	r0, [r7, #4]
    if (unichar_isupper(c)) {
    26fc:	6878      	ldr	r0, [r7, #4]
    26fe:	f7ff ffbd 	bl	267c <unichar_isupper>
    2702:	4603      	mov	r3, r0
    2704:	2b00      	cmp	r3, #0
    2706:	d002      	beq.n	270e <unichar_tolower+0x1a>
        return c + 0x20;
    2708:	687b      	ldr	r3, [r7, #4]
    270a:	3320      	adds	r3, #32
    270c:	e000      	b.n	2710 <unichar_tolower+0x1c>
    }
    return c;
    270e:	687b      	ldr	r3, [r7, #4]
}
    2710:	4618      	mov	r0, r3
    2712:	3708      	adds	r7, #8
    2714:	46bd      	mov	sp, r7
    2716:	bd80      	pop	{r7, pc}

00002718 <unichar_toupper>:

unichar unichar_toupper(unichar c) {
    2718:	b580      	push	{r7, lr}
    271a:	b082      	sub	sp, #8
    271c:	af00      	add	r7, sp, #0
    271e:	6078      	str	r0, [r7, #4]
    if (unichar_islower(c)) {
    2720:	6878      	ldr	r0, [r7, #4]
    2722:	f7ff ffc9 	bl	26b8 <unichar_islower>
    2726:	4603      	mov	r3, r0
    2728:	2b00      	cmp	r3, #0
    272a:	d002      	beq.n	2732 <unichar_toupper+0x1a>
        return c - 0x20;
    272c:	687b      	ldr	r3, [r7, #4]
    272e:	3b20      	subs	r3, #32
    2730:	e000      	b.n	2734 <unichar_toupper+0x1c>
    }
    return c;
    2732:	687b      	ldr	r3, [r7, #4]
}
    2734:	4618      	mov	r0, r3
    2736:	3708      	adds	r7, #8
    2738:	46bd      	mov	sp, r7
    273a:	bd80      	pop	{r7, pc}

0000273c <unichar_xdigit_value>:

mp_uint_t unichar_xdigit_value(unichar c) {
    273c:	b480      	push	{r7}
    273e:	b085      	sub	sp, #20
    2740:	af00      	add	r7, sp, #0
    2742:	6078      	str	r0, [r7, #4]
    // c is assumed to be hex digit
    mp_uint_t n = c - '0';
    2744:	687b      	ldr	r3, [r7, #4]
    2746:	3b30      	subs	r3, #48	; 0x30
    2748:	60fb      	str	r3, [r7, #12]
    if (n > 9) {
    274a:	68fb      	ldr	r3, [r7, #12]
    274c:	2b09      	cmp	r3, #9
    274e:	d906      	bls.n	275e <unichar_xdigit_value+0x22>
        n &= ~('a' - 'A');
    2750:	68fb      	ldr	r3, [r7, #12]
    2752:	f023 0320 	bic.w	r3, r3, #32
    2756:	60fb      	str	r3, [r7, #12]
        n -= ('A' - ('9' + 1));
    2758:	68fb      	ldr	r3, [r7, #12]
    275a:	3b07      	subs	r3, #7
    275c:	60fb      	str	r3, [r7, #12]
    }
    return n;
    275e:	68fb      	ldr	r3, [r7, #12]
}
    2760:	4618      	mov	r0, r3
    2762:	3714      	adds	r7, #20
    2764:	46bd      	mov	sp, r7
    2766:	f85d 7b04 	ldr.w	r7, [sp], #4
    276a:	4770      	bx	lr

0000276c <mp_reader_mem_readbyte>:
    const byte *beg;
    const byte *cur;
    const byte *end;
} mp_reader_mem_t;

STATIC mp_uint_t mp_reader_mem_readbyte(void *data) {
    276c:	b480      	push	{r7}
    276e:	b085      	sub	sp, #20
    2770:	af00      	add	r7, sp, #0
    2772:	6078      	str	r0, [r7, #4]
    mp_reader_mem_t *reader = (mp_reader_mem_t*)data;
    2774:	687b      	ldr	r3, [r7, #4]
    2776:	60fb      	str	r3, [r7, #12]
    if (reader->cur < reader->end) {
    2778:	68fb      	ldr	r3, [r7, #12]
    277a:	689a      	ldr	r2, [r3, #8]
    277c:	68fb      	ldr	r3, [r7, #12]
    277e:	68db      	ldr	r3, [r3, #12]
    2780:	429a      	cmp	r2, r3
    2782:	d206      	bcs.n	2792 <mp_reader_mem_readbyte+0x26>
        return *reader->cur++;
    2784:	68fb      	ldr	r3, [r7, #12]
    2786:	689b      	ldr	r3, [r3, #8]
    2788:	1c59      	adds	r1, r3, #1
    278a:	68fa      	ldr	r2, [r7, #12]
    278c:	6091      	str	r1, [r2, #8]
    278e:	781b      	ldrb	r3, [r3, #0]
    2790:	e001      	b.n	2796 <mp_reader_mem_readbyte+0x2a>
    } else {
        return MP_READER_EOF;
    2792:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    }
}
    2796:	4618      	mov	r0, r3
    2798:	3714      	adds	r7, #20
    279a:	46bd      	mov	sp, r7
    279c:	f85d 7b04 	ldr.w	r7, [sp], #4
    27a0:	4770      	bx	lr

000027a2 <mp_reader_mem_close>:

STATIC void mp_reader_mem_close(void *data) {
    27a2:	b580      	push	{r7, lr}
    27a4:	b084      	sub	sp, #16
    27a6:	af00      	add	r7, sp, #0
    27a8:	6078      	str	r0, [r7, #4]
    mp_reader_mem_t *reader = (mp_reader_mem_t*)data;
    27aa:	687b      	ldr	r3, [r7, #4]
    27ac:	60fb      	str	r3, [r7, #12]
    if (reader->free_len > 0) {
    27ae:	68fb      	ldr	r3, [r7, #12]
    27b0:	681b      	ldr	r3, [r3, #0]
    27b2:	2b00      	cmp	r3, #0
    27b4:	d004      	beq.n	27c0 <mp_reader_mem_close+0x1e>
        m_del(char, (char*)reader->beg, reader->free_len);
    27b6:	68fb      	ldr	r3, [r7, #12]
    27b8:	685b      	ldr	r3, [r3, #4]
    27ba:	4618      	mov	r0, r3
    27bc:	f7fd fe2c 	bl	418 <m_free>
    }
    m_del_obj(mp_reader_mem_t, reader);
    27c0:	68f8      	ldr	r0, [r7, #12]
    27c2:	f7fd fe29 	bl	418 <m_free>
}
    27c6:	bf00      	nop
    27c8:	3710      	adds	r7, #16
    27ca:	46bd      	mov	sp, r7
    27cc:	bd80      	pop	{r7, pc}

000027ce <mp_reader_new_mem>:

void mp_reader_new_mem(mp_reader_t *reader, const byte *buf, size_t len, size_t free_len) {
    27ce:	b580      	push	{r7, lr}
    27d0:	b086      	sub	sp, #24
    27d2:	af00      	add	r7, sp, #0
    27d4:	60f8      	str	r0, [r7, #12]
    27d6:	60b9      	str	r1, [r7, #8]
    27d8:	607a      	str	r2, [r7, #4]
    27da:	603b      	str	r3, [r7, #0]
    mp_reader_mem_t *rm = m_new_obj(mp_reader_mem_t);
    27dc:	2010      	movs	r0, #16
    27de:	f7fd fd9d 	bl	31c <m_malloc>
    27e2:	6178      	str	r0, [r7, #20]
    rm->free_len = free_len;
    27e4:	697b      	ldr	r3, [r7, #20]
    27e6:	683a      	ldr	r2, [r7, #0]
    27e8:	601a      	str	r2, [r3, #0]
    rm->beg = buf;
    27ea:	697b      	ldr	r3, [r7, #20]
    27ec:	68ba      	ldr	r2, [r7, #8]
    27ee:	605a      	str	r2, [r3, #4]
    rm->cur = buf;
    27f0:	697b      	ldr	r3, [r7, #20]
    27f2:	68ba      	ldr	r2, [r7, #8]
    27f4:	609a      	str	r2, [r3, #8]
    rm->end = buf + len;
    27f6:	68ba      	ldr	r2, [r7, #8]
    27f8:	687b      	ldr	r3, [r7, #4]
    27fa:	441a      	add	r2, r3
    27fc:	697b      	ldr	r3, [r7, #20]
    27fe:	60da      	str	r2, [r3, #12]
    reader->data = rm;
    2800:	68fb      	ldr	r3, [r7, #12]
    2802:	697a      	ldr	r2, [r7, #20]
    2804:	601a      	str	r2, [r3, #0]
    reader->readbyte = mp_reader_mem_readbyte;
    2806:	68fb      	ldr	r3, [r7, #12]
    2808:	4a04      	ldr	r2, [pc, #16]	; (281c <mp_reader_new_mem+0x4e>)
    280a:	605a      	str	r2, [r3, #4]
    reader->close = mp_reader_mem_close;
    280c:	68fb      	ldr	r3, [r7, #12]
    280e:	4a04      	ldr	r2, [pc, #16]	; (2820 <mp_reader_new_mem+0x52>)
    2810:	609a      	str	r2, [r3, #8]
}
    2812:	bf00      	nop
    2814:	3718      	adds	r7, #24
    2816:	46bd      	mov	sp, r7
    2818:	bd80      	pop	{r7, pc}
    281a:	bf00      	nop
    281c:	0000276d 	.word	0x0000276d
    2820:	000027a3 	.word	0x000027a3

00002824 <vstr_reset>:
struct _mp_print_t;
void vstr_init_print(vstr_t *vstr, size_t alloc, struct _mp_print_t *print);
void vstr_clear(vstr_t *vstr);
vstr_t *vstr_new(size_t alloc);
void vstr_free(vstr_t *vstr);
static inline void vstr_reset(vstr_t *vstr) { vstr->len = 0; }
    2824:	b480      	push	{r7}
    2826:	b083      	sub	sp, #12
    2828:	af00      	add	r7, sp, #0
    282a:	6078      	str	r0, [r7, #4]
    282c:	687b      	ldr	r3, [r7, #4]
    282e:	2200      	movs	r2, #0
    2830:	605a      	str	r2, [r3, #4]
    2832:	bf00      	nop
    2834:	370c      	adds	r7, #12
    2836:	46bd      	mov	sp, r7
    2838:	f85d 7b04 	ldr.w	r7, [sp], #4
    283c:	4770      	bx	lr

0000283e <is_end>:
// don't know if that's intentional or not, but we don't allow it

#define MP_LEXER_EOF ((unichar)MP_READER_EOF)
#define CUR_CHAR(lex) ((lex)->chr0)

STATIC bool is_end(mp_lexer_t *lex) {
    283e:	b480      	push	{r7}
    2840:	b083      	sub	sp, #12
    2842:	af00      	add	r7, sp, #0
    2844:	6078      	str	r0, [r7, #4]
    return lex->chr0 == MP_LEXER_EOF;
    2846:	687b      	ldr	r3, [r7, #4]
    2848:	691b      	ldr	r3, [r3, #16]
    284a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    284e:	bf0c      	ite	eq
    2850:	2301      	moveq	r3, #1
    2852:	2300      	movne	r3, #0
    2854:	b2db      	uxtb	r3, r3
}
    2856:	4618      	mov	r0, r3
    2858:	370c      	adds	r7, #12
    285a:	46bd      	mov	sp, r7
    285c:	f85d 7b04 	ldr.w	r7, [sp], #4
    2860:	4770      	bx	lr

00002862 <is_physical_newline>:

STATIC bool is_physical_newline(mp_lexer_t *lex) {
    2862:	b480      	push	{r7}
    2864:	b083      	sub	sp, #12
    2866:	af00      	add	r7, sp, #0
    2868:	6078      	str	r0, [r7, #4]
    return lex->chr0 == '\n';
    286a:	687b      	ldr	r3, [r7, #4]
    286c:	691b      	ldr	r3, [r3, #16]
    286e:	2b0a      	cmp	r3, #10
    2870:	bf0c      	ite	eq
    2872:	2301      	moveq	r3, #1
    2874:	2300      	movne	r3, #0
    2876:	b2db      	uxtb	r3, r3
}
    2878:	4618      	mov	r0, r3
    287a:	370c      	adds	r7, #12
    287c:	46bd      	mov	sp, r7
    287e:	f85d 7b04 	ldr.w	r7, [sp], #4
    2882:	4770      	bx	lr

00002884 <is_char>:

STATIC bool is_char(mp_lexer_t *lex, byte c) {
    2884:	b480      	push	{r7}
    2886:	b083      	sub	sp, #12
    2888:	af00      	add	r7, sp, #0
    288a:	6078      	str	r0, [r7, #4]
    288c:	460b      	mov	r3, r1
    288e:	70fb      	strb	r3, [r7, #3]
    return lex->chr0 == c;
    2890:	687b      	ldr	r3, [r7, #4]
    2892:	691a      	ldr	r2, [r3, #16]
    2894:	78fb      	ldrb	r3, [r7, #3]
    2896:	429a      	cmp	r2, r3
    2898:	bf0c      	ite	eq
    289a:	2301      	moveq	r3, #1
    289c:	2300      	movne	r3, #0
    289e:	b2db      	uxtb	r3, r3
}
    28a0:	4618      	mov	r0, r3
    28a2:	370c      	adds	r7, #12
    28a4:	46bd      	mov	sp, r7
    28a6:	f85d 7b04 	ldr.w	r7, [sp], #4
    28aa:	4770      	bx	lr

000028ac <is_char_or>:

STATIC bool is_char_or(mp_lexer_t *lex, byte c1, byte c2) {
    28ac:	b480      	push	{r7}
    28ae:	b083      	sub	sp, #12
    28b0:	af00      	add	r7, sp, #0
    28b2:	6078      	str	r0, [r7, #4]
    28b4:	460b      	mov	r3, r1
    28b6:	70fb      	strb	r3, [r7, #3]
    28b8:	4613      	mov	r3, r2
    28ba:	70bb      	strb	r3, [r7, #2]
    return lex->chr0 == c1 || lex->chr0 == c2;
    28bc:	687b      	ldr	r3, [r7, #4]
    28be:	691a      	ldr	r2, [r3, #16]
    28c0:	78fb      	ldrb	r3, [r7, #3]
    28c2:	429a      	cmp	r2, r3
    28c4:	d004      	beq.n	28d0 <is_char_or+0x24>
    28c6:	687b      	ldr	r3, [r7, #4]
    28c8:	691a      	ldr	r2, [r3, #16]
    28ca:	78bb      	ldrb	r3, [r7, #2]
    28cc:	429a      	cmp	r2, r3
    28ce:	d101      	bne.n	28d4 <is_char_or+0x28>
    28d0:	2301      	movs	r3, #1
    28d2:	e000      	b.n	28d6 <is_char_or+0x2a>
    28d4:	2300      	movs	r3, #0
    28d6:	f003 0301 	and.w	r3, r3, #1
    28da:	b2db      	uxtb	r3, r3
}
    28dc:	4618      	mov	r0, r3
    28de:	370c      	adds	r7, #12
    28e0:	46bd      	mov	sp, r7
    28e2:	f85d 7b04 	ldr.w	r7, [sp], #4
    28e6:	4770      	bx	lr

000028e8 <is_char_or3>:

STATIC bool is_char_or3(mp_lexer_t *lex, byte c1, byte c2, byte c3) {
    28e8:	b480      	push	{r7}
    28ea:	b083      	sub	sp, #12
    28ec:	af00      	add	r7, sp, #0
    28ee:	6078      	str	r0, [r7, #4]
    28f0:	4608      	mov	r0, r1
    28f2:	4611      	mov	r1, r2
    28f4:	461a      	mov	r2, r3
    28f6:	4603      	mov	r3, r0
    28f8:	70fb      	strb	r3, [r7, #3]
    28fa:	460b      	mov	r3, r1
    28fc:	70bb      	strb	r3, [r7, #2]
    28fe:	4613      	mov	r3, r2
    2900:	707b      	strb	r3, [r7, #1]
    return lex->chr0 == c1 || lex->chr0 == c2 || lex->chr0 == c3;
    2902:	687b      	ldr	r3, [r7, #4]
    2904:	691a      	ldr	r2, [r3, #16]
    2906:	78fb      	ldrb	r3, [r7, #3]
    2908:	429a      	cmp	r2, r3
    290a:	d009      	beq.n	2920 <is_char_or3+0x38>
    290c:	687b      	ldr	r3, [r7, #4]
    290e:	691a      	ldr	r2, [r3, #16]
    2910:	78bb      	ldrb	r3, [r7, #2]
    2912:	429a      	cmp	r2, r3
    2914:	d004      	beq.n	2920 <is_char_or3+0x38>
    2916:	687b      	ldr	r3, [r7, #4]
    2918:	691a      	ldr	r2, [r3, #16]
    291a:	787b      	ldrb	r3, [r7, #1]
    291c:	429a      	cmp	r2, r3
    291e:	d101      	bne.n	2924 <is_char_or3+0x3c>
    2920:	2301      	movs	r3, #1
    2922:	e000      	b.n	2926 <is_char_or3+0x3e>
    2924:	2300      	movs	r3, #0
    2926:	f003 0301 	and.w	r3, r3, #1
    292a:	b2db      	uxtb	r3, r3
}
    292c:	4618      	mov	r0, r3
    292e:	370c      	adds	r7, #12
    2930:	46bd      	mov	sp, r7
    2932:	f85d 7b04 	ldr.w	r7, [sp], #4
    2936:	4770      	bx	lr

00002938 <is_char_following>:

STATIC bool is_char_following(mp_lexer_t *lex, byte c) {
    2938:	b480      	push	{r7}
    293a:	b083      	sub	sp, #12
    293c:	af00      	add	r7, sp, #0
    293e:	6078      	str	r0, [r7, #4]
    2940:	460b      	mov	r3, r1
    2942:	70fb      	strb	r3, [r7, #3]
    return lex->chr1 == c;
    2944:	687b      	ldr	r3, [r7, #4]
    2946:	695a      	ldr	r2, [r3, #20]
    2948:	78fb      	ldrb	r3, [r7, #3]
    294a:	429a      	cmp	r2, r3
    294c:	bf0c      	ite	eq
    294e:	2301      	moveq	r3, #1
    2950:	2300      	movne	r3, #0
    2952:	b2db      	uxtb	r3, r3
}
    2954:	4618      	mov	r0, r3
    2956:	370c      	adds	r7, #12
    2958:	46bd      	mov	sp, r7
    295a:	f85d 7b04 	ldr.w	r7, [sp], #4
    295e:	4770      	bx	lr

00002960 <is_char_following_or>:

STATIC bool is_char_following_or(mp_lexer_t *lex, byte c1, byte c2) {
    2960:	b480      	push	{r7}
    2962:	b083      	sub	sp, #12
    2964:	af00      	add	r7, sp, #0
    2966:	6078      	str	r0, [r7, #4]
    2968:	460b      	mov	r3, r1
    296a:	70fb      	strb	r3, [r7, #3]
    296c:	4613      	mov	r3, r2
    296e:	70bb      	strb	r3, [r7, #2]
    return lex->chr1 == c1 || lex->chr1 == c2;
    2970:	687b      	ldr	r3, [r7, #4]
    2972:	695a      	ldr	r2, [r3, #20]
    2974:	78fb      	ldrb	r3, [r7, #3]
    2976:	429a      	cmp	r2, r3
    2978:	d004      	beq.n	2984 <is_char_following_or+0x24>
    297a:	687b      	ldr	r3, [r7, #4]
    297c:	695a      	ldr	r2, [r3, #20]
    297e:	78bb      	ldrb	r3, [r7, #2]
    2980:	429a      	cmp	r2, r3
    2982:	d101      	bne.n	2988 <is_char_following_or+0x28>
    2984:	2301      	movs	r3, #1
    2986:	e000      	b.n	298a <is_char_following_or+0x2a>
    2988:	2300      	movs	r3, #0
    298a:	f003 0301 	and.w	r3, r3, #1
    298e:	b2db      	uxtb	r3, r3
}
    2990:	4618      	mov	r0, r3
    2992:	370c      	adds	r7, #12
    2994:	46bd      	mov	sp, r7
    2996:	f85d 7b04 	ldr.w	r7, [sp], #4
    299a:	4770      	bx	lr

0000299c <is_char_following_following_or>:

STATIC bool is_char_following_following_or(mp_lexer_t *lex, byte c1, byte c2) {
    299c:	b480      	push	{r7}
    299e:	b083      	sub	sp, #12
    29a0:	af00      	add	r7, sp, #0
    29a2:	6078      	str	r0, [r7, #4]
    29a4:	460b      	mov	r3, r1
    29a6:	70fb      	strb	r3, [r7, #3]
    29a8:	4613      	mov	r3, r2
    29aa:	70bb      	strb	r3, [r7, #2]
    return lex->chr2 == c1 || lex->chr2 == c2;
    29ac:	687b      	ldr	r3, [r7, #4]
    29ae:	699a      	ldr	r2, [r3, #24]
    29b0:	78fb      	ldrb	r3, [r7, #3]
    29b2:	429a      	cmp	r2, r3
    29b4:	d004      	beq.n	29c0 <is_char_following_following_or+0x24>
    29b6:	687b      	ldr	r3, [r7, #4]
    29b8:	699a      	ldr	r2, [r3, #24]
    29ba:	78bb      	ldrb	r3, [r7, #2]
    29bc:	429a      	cmp	r2, r3
    29be:	d101      	bne.n	29c4 <is_char_following_following_or+0x28>
    29c0:	2301      	movs	r3, #1
    29c2:	e000      	b.n	29c6 <is_char_following_following_or+0x2a>
    29c4:	2300      	movs	r3, #0
    29c6:	f003 0301 	and.w	r3, r3, #1
    29ca:	b2db      	uxtb	r3, r3
}
    29cc:	4618      	mov	r0, r3
    29ce:	370c      	adds	r7, #12
    29d0:	46bd      	mov	sp, r7
    29d2:	f85d 7b04 	ldr.w	r7, [sp], #4
    29d6:	4770      	bx	lr

000029d8 <is_char_and>:

STATIC bool is_char_and(mp_lexer_t *lex, byte c1, byte c2) {
    29d8:	b480      	push	{r7}
    29da:	b083      	sub	sp, #12
    29dc:	af00      	add	r7, sp, #0
    29de:	6078      	str	r0, [r7, #4]
    29e0:	460b      	mov	r3, r1
    29e2:	70fb      	strb	r3, [r7, #3]
    29e4:	4613      	mov	r3, r2
    29e6:	70bb      	strb	r3, [r7, #2]
    return lex->chr0 == c1 && lex->chr1 == c2;
    29e8:	687b      	ldr	r3, [r7, #4]
    29ea:	691a      	ldr	r2, [r3, #16]
    29ec:	78fb      	ldrb	r3, [r7, #3]
    29ee:	429a      	cmp	r2, r3
    29f0:	d106      	bne.n	2a00 <is_char_and+0x28>
    29f2:	687b      	ldr	r3, [r7, #4]
    29f4:	695a      	ldr	r2, [r3, #20]
    29f6:	78bb      	ldrb	r3, [r7, #2]
    29f8:	429a      	cmp	r2, r3
    29fa:	d101      	bne.n	2a00 <is_char_and+0x28>
    29fc:	2301      	movs	r3, #1
    29fe:	e000      	b.n	2a02 <is_char_and+0x2a>
    2a00:	2300      	movs	r3, #0
    2a02:	f003 0301 	and.w	r3, r3, #1
    2a06:	b2db      	uxtb	r3, r3
}
    2a08:	4618      	mov	r0, r3
    2a0a:	370c      	adds	r7, #12
    2a0c:	46bd      	mov	sp, r7
    2a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
    2a12:	4770      	bx	lr

00002a14 <is_whitespace>:

STATIC bool is_whitespace(mp_lexer_t *lex) {
    2a14:	b580      	push	{r7, lr}
    2a16:	b082      	sub	sp, #8
    2a18:	af00      	add	r7, sp, #0
    2a1a:	6078      	str	r0, [r7, #4]
    return unichar_isspace(lex->chr0);
    2a1c:	687b      	ldr	r3, [r7, #4]
    2a1e:	691b      	ldr	r3, [r3, #16]
    2a20:	4618      	mov	r0, r3
    2a22:	f7ff fd93 	bl	254c <unichar_isspace>
    2a26:	4603      	mov	r3, r0
}
    2a28:	4618      	mov	r0, r3
    2a2a:	3708      	adds	r7, #8
    2a2c:	46bd      	mov	sp, r7
    2a2e:	bd80      	pop	{r7, pc}

00002a30 <is_letter>:

STATIC bool is_letter(mp_lexer_t *lex) {
    2a30:	b580      	push	{r7, lr}
    2a32:	b082      	sub	sp, #8
    2a34:	af00      	add	r7, sp, #0
    2a36:	6078      	str	r0, [r7, #4]
    return unichar_isalpha(lex->chr0);
    2a38:	687b      	ldr	r3, [r7, #4]
    2a3a:	691b      	ldr	r3, [r3, #16]
    2a3c:	4618      	mov	r0, r3
    2a3e:	f7ff fda3 	bl	2588 <unichar_isalpha>
    2a42:	4603      	mov	r3, r0
}
    2a44:	4618      	mov	r0, r3
    2a46:	3708      	adds	r7, #8
    2a48:	46bd      	mov	sp, r7
    2a4a:	bd80      	pop	{r7, pc}

00002a4c <is_digit>:

STATIC bool is_digit(mp_lexer_t *lex) {
    2a4c:	b580      	push	{r7, lr}
    2a4e:	b082      	sub	sp, #8
    2a50:	af00      	add	r7, sp, #0
    2a52:	6078      	str	r0, [r7, #4]
    return unichar_isdigit(lex->chr0);
    2a54:	687b      	ldr	r3, [r7, #4]
    2a56:	691b      	ldr	r3, [r3, #16]
    2a58:	4618      	mov	r0, r3
    2a5a:	f7ff fdb3 	bl	25c4 <unichar_isdigit>
    2a5e:	4603      	mov	r3, r0
}
    2a60:	4618      	mov	r0, r3
    2a62:	3708      	adds	r7, #8
    2a64:	46bd      	mov	sp, r7
    2a66:	bd80      	pop	{r7, pc}

00002a68 <is_following_digit>:

STATIC bool is_following_digit(mp_lexer_t *lex) {
    2a68:	b580      	push	{r7, lr}
    2a6a:	b082      	sub	sp, #8
    2a6c:	af00      	add	r7, sp, #0
    2a6e:	6078      	str	r0, [r7, #4]
    return unichar_isdigit(lex->chr1);
    2a70:	687b      	ldr	r3, [r7, #4]
    2a72:	695b      	ldr	r3, [r3, #20]
    2a74:	4618      	mov	r0, r3
    2a76:	f7ff fda5 	bl	25c4 <unichar_isdigit>
    2a7a:	4603      	mov	r3, r0
}
    2a7c:	4618      	mov	r0, r3
    2a7e:	3708      	adds	r7, #8
    2a80:	46bd      	mov	sp, r7
    2a82:	bd80      	pop	{r7, pc}

00002a84 <is_following_base_char>:

STATIC bool is_following_base_char(mp_lexer_t *lex) {
    2a84:	b480      	push	{r7}
    2a86:	b085      	sub	sp, #20
    2a88:	af00      	add	r7, sp, #0
    2a8a:	6078      	str	r0, [r7, #4]
    const unichar chr1 = lex->chr1 | 0x20;
    2a8c:	687b      	ldr	r3, [r7, #4]
    2a8e:	695b      	ldr	r3, [r3, #20]
    2a90:	f043 0320 	orr.w	r3, r3, #32
    2a94:	60fb      	str	r3, [r7, #12]
    return chr1 == 'b' || chr1 == 'o' || chr1 == 'x';
    2a96:	68fb      	ldr	r3, [r7, #12]
    2a98:	2b62      	cmp	r3, #98	; 0x62
    2a9a:	d005      	beq.n	2aa8 <is_following_base_char+0x24>
    2a9c:	68fb      	ldr	r3, [r7, #12]
    2a9e:	2b6f      	cmp	r3, #111	; 0x6f
    2aa0:	d002      	beq.n	2aa8 <is_following_base_char+0x24>
    2aa2:	68fb      	ldr	r3, [r7, #12]
    2aa4:	2b78      	cmp	r3, #120	; 0x78
    2aa6:	d101      	bne.n	2aac <is_following_base_char+0x28>
    2aa8:	2301      	movs	r3, #1
    2aaa:	e000      	b.n	2aae <is_following_base_char+0x2a>
    2aac:	2300      	movs	r3, #0
    2aae:	f003 0301 	and.w	r3, r3, #1
    2ab2:	b2db      	uxtb	r3, r3
}
    2ab4:	4618      	mov	r0, r3
    2ab6:	3714      	adds	r7, #20
    2ab8:	46bd      	mov	sp, r7
    2aba:	f85d 7b04 	ldr.w	r7, [sp], #4
    2abe:	4770      	bx	lr

00002ac0 <is_following_odigit>:

STATIC bool is_following_odigit(mp_lexer_t *lex) {
    2ac0:	b480      	push	{r7}
    2ac2:	b083      	sub	sp, #12
    2ac4:	af00      	add	r7, sp, #0
    2ac6:	6078      	str	r0, [r7, #4]
    return lex->chr1 >= '0' && lex->chr1 <= '7';
    2ac8:	687b      	ldr	r3, [r7, #4]
    2aca:	695b      	ldr	r3, [r3, #20]
    2acc:	2b2f      	cmp	r3, #47	; 0x2f
    2ace:	d905      	bls.n	2adc <is_following_odigit+0x1c>
    2ad0:	687b      	ldr	r3, [r7, #4]
    2ad2:	695b      	ldr	r3, [r3, #20]
    2ad4:	2b37      	cmp	r3, #55	; 0x37
    2ad6:	d801      	bhi.n	2adc <is_following_odigit+0x1c>
    2ad8:	2301      	movs	r3, #1
    2ada:	e000      	b.n	2ade <is_following_odigit+0x1e>
    2adc:	2300      	movs	r3, #0
    2ade:	f003 0301 	and.w	r3, r3, #1
    2ae2:	b2db      	uxtb	r3, r3
}
    2ae4:	4618      	mov	r0, r3
    2ae6:	370c      	adds	r7, #12
    2ae8:	46bd      	mov	sp, r7
    2aea:	f85d 7b04 	ldr.w	r7, [sp], #4
    2aee:	4770      	bx	lr

00002af0 <is_string_or_bytes>:

STATIC bool is_string_or_bytes(mp_lexer_t *lex) {
    2af0:	b580      	push	{r7, lr}
    2af2:	b082      	sub	sp, #8
    2af4:	af00      	add	r7, sp, #0
    2af6:	6078      	str	r0, [r7, #4]
    return is_char_or(lex, '\'', '\"')
    2af8:	2222      	movs	r2, #34	; 0x22
    2afa:	2127      	movs	r1, #39	; 0x27
    2afc:	6878      	ldr	r0, [r7, #4]
    2afe:	f7ff fed5 	bl	28ac <is_char_or>
    2b02:	4603      	mov	r3, r0
        || (is_char_or3(lex, 'r', 'u', 'b') && is_char_following_or(lex, '\'', '\"'))
        || ((is_char_and(lex, 'r', 'b') || is_char_and(lex, 'b', 'r'))
    2b04:	2b00      	cmp	r3, #0
    2b06:	d128      	bne.n	2b5a <is_string_or_bytes+0x6a>
        || (is_char_or3(lex, 'r', 'u', 'b') && is_char_following_or(lex, '\'', '\"'))
    2b08:	2362      	movs	r3, #98	; 0x62
    2b0a:	2275      	movs	r2, #117	; 0x75
    2b0c:	2172      	movs	r1, #114	; 0x72
    2b0e:	6878      	ldr	r0, [r7, #4]
    2b10:	f7ff feea 	bl	28e8 <is_char_or3>
    2b14:	4603      	mov	r3, r0
    2b16:	2b00      	cmp	r3, #0
    2b18:	d007      	beq.n	2b2a <is_string_or_bytes+0x3a>
    2b1a:	2222      	movs	r2, #34	; 0x22
    2b1c:	2127      	movs	r1, #39	; 0x27
    2b1e:	6878      	ldr	r0, [r7, #4]
    2b20:	f7ff ff1e 	bl	2960 <is_char_following_or>
    2b24:	4603      	mov	r3, r0
    2b26:	2b00      	cmp	r3, #0
    2b28:	d117      	bne.n	2b5a <is_string_or_bytes+0x6a>
        || ((is_char_and(lex, 'r', 'b') || is_char_and(lex, 'b', 'r'))
    2b2a:	2262      	movs	r2, #98	; 0x62
    2b2c:	2172      	movs	r1, #114	; 0x72
    2b2e:	6878      	ldr	r0, [r7, #4]
    2b30:	f7ff ff52 	bl	29d8 <is_char_and>
    2b34:	4603      	mov	r3, r0
    2b36:	2b00      	cmp	r3, #0
    2b38:	d107      	bne.n	2b4a <is_string_or_bytes+0x5a>
    2b3a:	2272      	movs	r2, #114	; 0x72
    2b3c:	2162      	movs	r1, #98	; 0x62
    2b3e:	6878      	ldr	r0, [r7, #4]
    2b40:	f7ff ff4a 	bl	29d8 <is_char_and>
    2b44:	4603      	mov	r3, r0
    2b46:	2b00      	cmp	r3, #0
    2b48:	d009      	beq.n	2b5e <is_string_or_bytes+0x6e>
            && is_char_following_following_or(lex, '\'', '\"'));
    2b4a:	2222      	movs	r2, #34	; 0x22
    2b4c:	2127      	movs	r1, #39	; 0x27
    2b4e:	6878      	ldr	r0, [r7, #4]
    2b50:	f7ff ff24 	bl	299c <is_char_following_following_or>
    2b54:	4603      	mov	r3, r0
    2b56:	2b00      	cmp	r3, #0
    2b58:	d001      	beq.n	2b5e <is_string_or_bytes+0x6e>
        || ((is_char_and(lex, 'r', 'b') || is_char_and(lex, 'b', 'r'))
    2b5a:	2301      	movs	r3, #1
    2b5c:	e000      	b.n	2b60 <is_string_or_bytes+0x70>
    2b5e:	2300      	movs	r3, #0
    2b60:	f003 0301 	and.w	r3, r3, #1
    2b64:	b2db      	uxtb	r3, r3
}
    2b66:	4618      	mov	r0, r3
    2b68:	3708      	adds	r7, #8
    2b6a:	46bd      	mov	sp, r7
    2b6c:	bd80      	pop	{r7, pc}

00002b6e <is_head_of_identifier>:

// to easily parse utf-8 identifiers we allow any raw byte with high bit set
STATIC bool is_head_of_identifier(mp_lexer_t *lex) {
    2b6e:	b580      	push	{r7, lr}
    2b70:	b082      	sub	sp, #8
    2b72:	af00      	add	r7, sp, #0
    2b74:	6078      	str	r0, [r7, #4]
    return is_letter(lex) || lex->chr0 == '_' || lex->chr0 >= 0x80;
    2b76:	6878      	ldr	r0, [r7, #4]
    2b78:	f7ff ff5a 	bl	2a30 <is_letter>
    2b7c:	4603      	mov	r3, r0
    2b7e:	2b00      	cmp	r3, #0
    2b80:	d107      	bne.n	2b92 <is_head_of_identifier+0x24>
    2b82:	687b      	ldr	r3, [r7, #4]
    2b84:	691b      	ldr	r3, [r3, #16]
    2b86:	2b5f      	cmp	r3, #95	; 0x5f
    2b88:	d003      	beq.n	2b92 <is_head_of_identifier+0x24>
    2b8a:	687b      	ldr	r3, [r7, #4]
    2b8c:	691b      	ldr	r3, [r3, #16]
    2b8e:	2b7f      	cmp	r3, #127	; 0x7f
    2b90:	d901      	bls.n	2b96 <is_head_of_identifier+0x28>
    2b92:	2301      	movs	r3, #1
    2b94:	e000      	b.n	2b98 <is_head_of_identifier+0x2a>
    2b96:	2300      	movs	r3, #0
    2b98:	f003 0301 	and.w	r3, r3, #1
    2b9c:	b2db      	uxtb	r3, r3
}
    2b9e:	4618      	mov	r0, r3
    2ba0:	3708      	adds	r7, #8
    2ba2:	46bd      	mov	sp, r7
    2ba4:	bd80      	pop	{r7, pc}

00002ba6 <is_tail_of_identifier>:

STATIC bool is_tail_of_identifier(mp_lexer_t *lex) {
    2ba6:	b580      	push	{r7, lr}
    2ba8:	b082      	sub	sp, #8
    2baa:	af00      	add	r7, sp, #0
    2bac:	6078      	str	r0, [r7, #4]
    return is_head_of_identifier(lex) || is_digit(lex);
    2bae:	6878      	ldr	r0, [r7, #4]
    2bb0:	f7ff ffdd 	bl	2b6e <is_head_of_identifier>
    2bb4:	4603      	mov	r3, r0
    2bb6:	2b00      	cmp	r3, #0
    2bb8:	d105      	bne.n	2bc6 <is_tail_of_identifier+0x20>
    2bba:	6878      	ldr	r0, [r7, #4]
    2bbc:	f7ff ff46 	bl	2a4c <is_digit>
    2bc0:	4603      	mov	r3, r0
    2bc2:	2b00      	cmp	r3, #0
    2bc4:	d001      	beq.n	2bca <is_tail_of_identifier+0x24>
    2bc6:	2301      	movs	r3, #1
    2bc8:	e000      	b.n	2bcc <is_tail_of_identifier+0x26>
    2bca:	2300      	movs	r3, #0
    2bcc:	f003 0301 	and.w	r3, r3, #1
    2bd0:	b2db      	uxtb	r3, r3
}
    2bd2:	4618      	mov	r0, r3
    2bd4:	3708      	adds	r7, #8
    2bd6:	46bd      	mov	sp, r7
    2bd8:	bd80      	pop	{r7, pc}

00002bda <next_char>:

STATIC void next_char(mp_lexer_t *lex) {
    2bda:	b580      	push	{r7, lr}
    2bdc:	b082      	sub	sp, #8
    2bde:	af00      	add	r7, sp, #0
    2be0:	6078      	str	r0, [r7, #4]
    if (lex->chr0 == '\n') {
    2be2:	687b      	ldr	r3, [r7, #4]
    2be4:	691b      	ldr	r3, [r3, #16]
    2be6:	2b0a      	cmp	r3, #10
    2be8:	d108      	bne.n	2bfc <next_char+0x22>
        // a new line
        ++lex->line;
    2bea:	687b      	ldr	r3, [r7, #4]
    2bec:	69db      	ldr	r3, [r3, #28]
    2bee:	1c5a      	adds	r2, r3, #1
    2bf0:	687b      	ldr	r3, [r7, #4]
    2bf2:	61da      	str	r2, [r3, #28]
        lex->column = 1;
    2bf4:	687b      	ldr	r3, [r7, #4]
    2bf6:	2201      	movs	r2, #1
    2bf8:	621a      	str	r2, [r3, #32]
    2bfa:	e011      	b.n	2c20 <next_char+0x46>
    } else if (lex->chr0 == '\t') {
    2bfc:	687b      	ldr	r3, [r7, #4]
    2bfe:	691b      	ldr	r3, [r3, #16]
    2c00:	2b09      	cmp	r3, #9
    2c02:	d108      	bne.n	2c16 <next_char+0x3c>
        // a tab
        lex->column = (((lex->column - 1 + TAB_SIZE) / TAB_SIZE) * TAB_SIZE) + 1;
    2c04:	687b      	ldr	r3, [r7, #4]
    2c06:	6a1b      	ldr	r3, [r3, #32]
    2c08:	3307      	adds	r3, #7
    2c0a:	f023 0307 	bic.w	r3, r3, #7
    2c0e:	1c5a      	adds	r2, r3, #1
    2c10:	687b      	ldr	r3, [r7, #4]
    2c12:	621a      	str	r2, [r3, #32]
    2c14:	e004      	b.n	2c20 <next_char+0x46>
    } else {
        // a character worth one column
        ++lex->column;
    2c16:	687b      	ldr	r3, [r7, #4]
    2c18:	6a1b      	ldr	r3, [r3, #32]
    2c1a:	1c5a      	adds	r2, r3, #1
    2c1c:	687b      	ldr	r3, [r7, #4]
    2c1e:	621a      	str	r2, [r3, #32]
    }

    lex->chr0 = lex->chr1;
    2c20:	687b      	ldr	r3, [r7, #4]
    2c22:	695a      	ldr	r2, [r3, #20]
    2c24:	687b      	ldr	r3, [r7, #4]
    2c26:	611a      	str	r2, [r3, #16]
    lex->chr1 = lex->chr2;
    2c28:	687b      	ldr	r3, [r7, #4]
    2c2a:	699a      	ldr	r2, [r3, #24]
    2c2c:	687b      	ldr	r3, [r7, #4]
    2c2e:	615a      	str	r2, [r3, #20]
    lex->chr2 = lex->reader.readbyte(lex->reader.data);
    2c30:	687b      	ldr	r3, [r7, #4]
    2c32:	689b      	ldr	r3, [r3, #8]
    2c34:	687a      	ldr	r2, [r7, #4]
    2c36:	6852      	ldr	r2, [r2, #4]
    2c38:	4610      	mov	r0, r2
    2c3a:	4798      	blx	r3
    2c3c:	4602      	mov	r2, r0
    2c3e:	687b      	ldr	r3, [r7, #4]
    2c40:	619a      	str	r2, [r3, #24]

    if (lex->chr1 == '\r') {
    2c42:	687b      	ldr	r3, [r7, #4]
    2c44:	695b      	ldr	r3, [r3, #20]
    2c46:	2b0d      	cmp	r3, #13
    2c48:	d10f      	bne.n	2c6a <next_char+0x90>
        // CR is a new line, converted to LF
        lex->chr1 = '\n';
    2c4a:	687b      	ldr	r3, [r7, #4]
    2c4c:	220a      	movs	r2, #10
    2c4e:	615a      	str	r2, [r3, #20]
        if (lex->chr2 == '\n') {
    2c50:	687b      	ldr	r3, [r7, #4]
    2c52:	699b      	ldr	r3, [r3, #24]
    2c54:	2b0a      	cmp	r3, #10
    2c56:	d108      	bne.n	2c6a <next_char+0x90>
            // CR LF is a single new line, throw out the extra LF
            lex->chr2 = lex->reader.readbyte(lex->reader.data);
    2c58:	687b      	ldr	r3, [r7, #4]
    2c5a:	689b      	ldr	r3, [r3, #8]
    2c5c:	687a      	ldr	r2, [r7, #4]
    2c5e:	6852      	ldr	r2, [r2, #4]
    2c60:	4610      	mov	r0, r2
    2c62:	4798      	blx	r3
    2c64:	4602      	mov	r2, r0
    2c66:	687b      	ldr	r3, [r7, #4]
    2c68:	619a      	str	r2, [r3, #24]
        }
    }

    // check if we need to insert a newline at end of file
    if (lex->chr2 == MP_LEXER_EOF && lex->chr1 != MP_LEXER_EOF && lex->chr1 != '\n') {
    2c6a:	687b      	ldr	r3, [r7, #4]
    2c6c:	699b      	ldr	r3, [r3, #24]
    2c6e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    2c72:	d10b      	bne.n	2c8c <next_char+0xb2>
    2c74:	687b      	ldr	r3, [r7, #4]
    2c76:	695b      	ldr	r3, [r3, #20]
    2c78:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    2c7c:	d006      	beq.n	2c8c <next_char+0xb2>
    2c7e:	687b      	ldr	r3, [r7, #4]
    2c80:	695b      	ldr	r3, [r3, #20]
    2c82:	2b0a      	cmp	r3, #10
    2c84:	d002      	beq.n	2c8c <next_char+0xb2>
        lex->chr2 = '\n';
    2c86:	687b      	ldr	r3, [r7, #4]
    2c88:	220a      	movs	r2, #10
    2c8a:	619a      	str	r2, [r3, #24]
    }
}
    2c8c:	bf00      	nop
    2c8e:	3708      	adds	r7, #8
    2c90:	46bd      	mov	sp, r7
    2c92:	bd80      	pop	{r7, pc}

00002c94 <indent_push>:

STATIC void indent_push(mp_lexer_t *lex, size_t indent) {
    2c94:	b580      	push	{r7, lr}
    2c96:	b082      	sub	sp, #8
    2c98:	af00      	add	r7, sp, #0
    2c9a:	6078      	str	r0, [r7, #4]
    2c9c:	6039      	str	r1, [r7, #0]
    if (lex->num_indent_level >= lex->alloc_indent_level) {
    2c9e:	687b      	ldr	r3, [r7, #4]
    2ca0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    2ca2:	687b      	ldr	r3, [r7, #4]
    2ca4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    2ca6:	429a      	cmp	r2, r3
    2ca8:	d312      	bcc.n	2cd0 <indent_push+0x3c>
        lex->indent_level = m_renew(uint16_t, lex->indent_level, lex->alloc_indent_level, lex->alloc_indent_level + MICROPY_ALLOC_LEXEL_INDENT_INC);
    2caa:	687b      	ldr	r3, [r7, #4]
    2cac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    2cae:	687b      	ldr	r3, [r7, #4]
    2cb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    2cb2:	3308      	adds	r3, #8
    2cb4:	005b      	lsls	r3, r3, #1
    2cb6:	4619      	mov	r1, r3
    2cb8:	4610      	mov	r0, r2
    2cba:	f7fd fb70 	bl	39e <m_realloc>
    2cbe:	4602      	mov	r2, r0
    2cc0:	687b      	ldr	r3, [r7, #4]
    2cc2:	635a      	str	r2, [r3, #52]	; 0x34
        lex->alloc_indent_level += MICROPY_ALLOC_LEXEL_INDENT_INC;
    2cc4:	687b      	ldr	r3, [r7, #4]
    2cc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    2cc8:	f103 0208 	add.w	r2, r3, #8
    2ccc:	687b      	ldr	r3, [r7, #4]
    2cce:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    lex->indent_level[lex->num_indent_level++] = indent;
    2cd0:	687b      	ldr	r3, [r7, #4]
    2cd2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    2cd4:	687b      	ldr	r3, [r7, #4]
    2cd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    2cd8:	1c58      	adds	r0, r3, #1
    2cda:	6879      	ldr	r1, [r7, #4]
    2cdc:	6308      	str	r0, [r1, #48]	; 0x30
    2cde:	005b      	lsls	r3, r3, #1
    2ce0:	4413      	add	r3, r2
    2ce2:	683a      	ldr	r2, [r7, #0]
    2ce4:	b292      	uxth	r2, r2
    2ce6:	801a      	strh	r2, [r3, #0]
}
    2ce8:	bf00      	nop
    2cea:	3708      	adds	r7, #8
    2cec:	46bd      	mov	sp, r7
    2cee:	bd80      	pop	{r7, pc}

00002cf0 <indent_top>:

STATIC size_t indent_top(mp_lexer_t *lex) {
    2cf0:	b480      	push	{r7}
    2cf2:	b083      	sub	sp, #12
    2cf4:	af00      	add	r7, sp, #0
    2cf6:	6078      	str	r0, [r7, #4]
    return lex->indent_level[lex->num_indent_level - 1];
    2cf8:	687b      	ldr	r3, [r7, #4]
    2cfa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    2cfc:	687b      	ldr	r3, [r7, #4]
    2cfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    2d00:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
    2d04:	3b01      	subs	r3, #1
    2d06:	005b      	lsls	r3, r3, #1
    2d08:	4413      	add	r3, r2
    2d0a:	881b      	ldrh	r3, [r3, #0]
}
    2d0c:	4618      	mov	r0, r3
    2d0e:	370c      	adds	r7, #12
    2d10:	46bd      	mov	sp, r7
    2d12:	f85d 7b04 	ldr.w	r7, [sp], #4
    2d16:	4770      	bx	lr

00002d18 <indent_pop>:

STATIC void indent_pop(mp_lexer_t *lex) {
    2d18:	b480      	push	{r7}
    2d1a:	b083      	sub	sp, #12
    2d1c:	af00      	add	r7, sp, #0
    2d1e:	6078      	str	r0, [r7, #4]
    lex->num_indent_level -= 1;
    2d20:	687b      	ldr	r3, [r7, #4]
    2d22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    2d24:	1e5a      	subs	r2, r3, #1
    2d26:	687b      	ldr	r3, [r7, #4]
    2d28:	631a      	str	r2, [r3, #48]	; 0x30
}
    2d2a:	bf00      	nop
    2d2c:	370c      	adds	r7, #12
    2d2e:	46bd      	mov	sp, r7
    2d30:	f85d 7b04 	ldr.w	r7, [sp], #4
    2d34:	4770      	bx	lr

00002d36 <get_hex>:
};

// This is called with CUR_CHAR() before first hex digit, and should return with
// it pointing to last hex digit
// num_digits must be greater than zero
STATIC bool get_hex(mp_lexer_t *lex, size_t num_digits, mp_uint_t *result) {
    2d36:	b590      	push	{r4, r7, lr}
    2d38:	b087      	sub	sp, #28
    2d3a:	af00      	add	r7, sp, #0
    2d3c:	60f8      	str	r0, [r7, #12]
    2d3e:	60b9      	str	r1, [r7, #8]
    2d40:	607a      	str	r2, [r7, #4]
    mp_uint_t num = 0;
    2d42:	2300      	movs	r3, #0
    2d44:	617b      	str	r3, [r7, #20]
    while (num_digits-- != 0) {
    2d46:	e018      	b.n	2d7a <get_hex+0x44>
        next_char(lex);
    2d48:	68f8      	ldr	r0, [r7, #12]
    2d4a:	f7ff ff46 	bl	2bda <next_char>
        unichar c = CUR_CHAR(lex);
    2d4e:	68fb      	ldr	r3, [r7, #12]
    2d50:	691b      	ldr	r3, [r3, #16]
    2d52:	613b      	str	r3, [r7, #16]
        if (!unichar_isxdigit(c)) {
    2d54:	6938      	ldr	r0, [r7, #16]
    2d56:	f7ff fc53 	bl	2600 <unichar_isxdigit>
    2d5a:	4603      	mov	r3, r0
    2d5c:	f083 0301 	eor.w	r3, r3, #1
    2d60:	b2db      	uxtb	r3, r3
    2d62:	2b00      	cmp	r3, #0
    2d64:	d001      	beq.n	2d6a <get_hex+0x34>
            return false;
    2d66:	2300      	movs	r3, #0
    2d68:	e010      	b.n	2d8c <get_hex+0x56>
        }
        num = (num << 4) + unichar_xdigit_value(c);
    2d6a:	697b      	ldr	r3, [r7, #20]
    2d6c:	011c      	lsls	r4, r3, #4
    2d6e:	6938      	ldr	r0, [r7, #16]
    2d70:	f7ff fce4 	bl	273c <unichar_xdigit_value>
    2d74:	4603      	mov	r3, r0
    2d76:	4423      	add	r3, r4
    2d78:	617b      	str	r3, [r7, #20]
    while (num_digits-- != 0) {
    2d7a:	68bb      	ldr	r3, [r7, #8]
    2d7c:	1e5a      	subs	r2, r3, #1
    2d7e:	60ba      	str	r2, [r7, #8]
    2d80:	2b00      	cmp	r3, #0
    2d82:	d1e1      	bne.n	2d48 <get_hex+0x12>
    }
    *result = num;
    2d84:	687b      	ldr	r3, [r7, #4]
    2d86:	697a      	ldr	r2, [r7, #20]
    2d88:	601a      	str	r2, [r3, #0]
    return true;
    2d8a:	2301      	movs	r3, #1
}
    2d8c:	4618      	mov	r0, r3
    2d8e:	371c      	adds	r7, #28
    2d90:	46bd      	mov	sp, r7
    2d92:	bd90      	pop	{r4, r7, pc}

00002d94 <parse_string_literal>:

STATIC void parse_string_literal(mp_lexer_t *lex, bool is_raw) {
    2d94:	b580      	push	{r7, lr}
    2d96:	b08a      	sub	sp, #40	; 0x28
    2d98:	af00      	add	r7, sp, #0
    2d9a:	6078      	str	r0, [r7, #4]
    2d9c:	460b      	mov	r3, r1
    2d9e:	70fb      	strb	r3, [r7, #3]
    // get first quoting character
    char quote_char = '\'';
    2da0:	2327      	movs	r3, #39	; 0x27
    2da2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if (is_char(lex, '\"')) {
    2da6:	2122      	movs	r1, #34	; 0x22
    2da8:	6878      	ldr	r0, [r7, #4]
    2daa:	f7ff fd6b 	bl	2884 <is_char>
    2dae:	4603      	mov	r3, r0
    2db0:	2b00      	cmp	r3, #0
    2db2:	d002      	beq.n	2dba <parse_string_literal+0x26>
        quote_char = '\"';
    2db4:	2322      	movs	r3, #34	; 0x22
    2db6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
    next_char(lex);
    2dba:	6878      	ldr	r0, [r7, #4]
    2dbc:	f7ff ff0d 	bl	2bda <next_char>

    // work out if it's a single or triple quoted literal
    size_t num_quotes;
    if (is_char_and(lex, quote_char, quote_char)) {
    2dc0:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
    2dc4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    2dc8:	4619      	mov	r1, r3
    2dca:	6878      	ldr	r0, [r7, #4]
    2dcc:	f7ff fe04 	bl	29d8 <is_char_and>
    2dd0:	4603      	mov	r3, r0
    2dd2:	2b00      	cmp	r3, #0
    2dd4:	d008      	beq.n	2de8 <parse_string_literal+0x54>
        // triple quotes
        next_char(lex);
    2dd6:	6878      	ldr	r0, [r7, #4]
    2dd8:	f7ff feff 	bl	2bda <next_char>
        next_char(lex);
    2ddc:	6878      	ldr	r0, [r7, #4]
    2dde:	f7ff fefc 	bl	2bda <next_char>
        num_quotes = 3;
    2de2:	2303      	movs	r3, #3
    2de4:	623b      	str	r3, [r7, #32]
    2de6:	e001      	b.n	2dec <parse_string_literal+0x58>
    } else {
        // single quotes
        num_quotes = 1;
    2de8:	2301      	movs	r3, #1
    2dea:	623b      	str	r3, [r7, #32]
    }

    size_t n_closing = 0;
    2dec:	2300      	movs	r3, #0
    2dee:	61fb      	str	r3, [r7, #28]
    while (!is_end(lex) && (num_quotes > 1 || !is_char(lex, '\n')) && n_closing < num_quotes) {
    2df0:	e1ac      	b.n	314c <parse_string_literal+0x3b8>
        if (is_char(lex, quote_char)) {
    2df2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    2df6:	4619      	mov	r1, r3
    2df8:	6878      	ldr	r0, [r7, #4]
    2dfa:	f7ff fd43 	bl	2884 <is_char>
    2dfe:	4603      	mov	r3, r0
    2e00:	2b00      	cmp	r3, #0
    2e02:	d00c      	beq.n	2e1e <parse_string_literal+0x8a>
            n_closing += 1;
    2e04:	69fb      	ldr	r3, [r7, #28]
    2e06:	3301      	adds	r3, #1
    2e08:	61fb      	str	r3, [r7, #28]
            vstr_add_char(&lex->vstr, CUR_CHAR(lex));
    2e0a:	687b      	ldr	r3, [r7, #4]
    2e0c:	f103 0244 	add.w	r2, r3, #68	; 0x44
    2e10:	687b      	ldr	r3, [r7, #4]
    2e12:	691b      	ldr	r3, [r3, #16]
    2e14:	4619      	mov	r1, r3
    2e16:	4610      	mov	r0, r2
    2e18:	f7fe fcc4 	bl	17a4 <vstr_add_char>
    2e1c:	e193      	b.n	3146 <parse_string_literal+0x3b2>
        } else {
            n_closing = 0;
    2e1e:	2300      	movs	r3, #0
    2e20:	61fb      	str	r3, [r7, #28]
            if (is_char(lex, '\\')) {
    2e22:	215c      	movs	r1, #92	; 0x5c
    2e24:	6878      	ldr	r0, [r7, #4]
    2e26:	f7ff fd2d 	bl	2884 <is_char>
    2e2a:	4603      	mov	r3, r0
    2e2c:	2b00      	cmp	r3, #0
    2e2e:	f000 8180 	beq.w	3132 <parse_string_literal+0x39e>
                next_char(lex);
    2e32:	6878      	ldr	r0, [r7, #4]
    2e34:	f7ff fed1 	bl	2bda <next_char>
                unichar c = CUR_CHAR(lex);
    2e38:	687b      	ldr	r3, [r7, #4]
    2e3a:	691b      	ldr	r3, [r3, #16]
    2e3c:	61bb      	str	r3, [r7, #24]
                if (is_raw) {
    2e3e:	78fb      	ldrb	r3, [r7, #3]
    2e40:	2b00      	cmp	r3, #0
    2e42:	d006      	beq.n	2e52 <parse_string_literal+0xbe>
                    // raw strings allow escaping of quotes, but the backslash is also emitted
                    vstr_add_char(&lex->vstr, '\\');
    2e44:	687b      	ldr	r3, [r7, #4]
    2e46:	3344      	adds	r3, #68	; 0x44
    2e48:	215c      	movs	r1, #92	; 0x5c
    2e4a:	4618      	mov	r0, r3
    2e4c:	f7fe fcaa 	bl	17a4 <vstr_add_char>
    2e50:	e15b      	b.n	310a <parse_string_literal+0x376>
                } else {
                    switch (c) {
    2e52:	69bb      	ldr	r3, [r7, #24]
    2e54:	3b0a      	subs	r3, #10
    2e56:	2b6e      	cmp	r3, #110	; 0x6e
    2e58:	f200 8129 	bhi.w	30ae <parse_string_literal+0x31a>
    2e5c:	a201      	add	r2, pc, #4	; (adr r2, 2e64 <parse_string_literal+0xd0>)
    2e5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    2e62:	bf00      	nop
    2e64:	00003021 	.word	0x00003021
    2e68:	000030af 	.word	0x000030af
    2e6c:	000030af 	.word	0x000030af
    2e70:	000030af 	.word	0x000030af
    2e74:	000030af 	.word	0x000030af
    2e78:	000030af 	.word	0x000030af
    2e7c:	000030af 	.word	0x000030af
    2e80:	000030af 	.word	0x000030af
    2e84:	000030af 	.word	0x000030af
    2e88:	000030af 	.word	0x000030af
    2e8c:	000030af 	.word	0x000030af
    2e90:	000030af 	.word	0x000030af
    2e94:	000030af 	.word	0x000030af
    2e98:	000030af 	.word	0x000030af
    2e9c:	000030af 	.word	0x000030af
    2ea0:	000030af 	.word	0x000030af
    2ea4:	000030af 	.word	0x000030af
    2ea8:	000030af 	.word	0x000030af
    2eac:	000030af 	.word	0x000030af
    2eb0:	000030af 	.word	0x000030af
    2eb4:	000030af 	.word	0x000030af
    2eb8:	000030af 	.word	0x000030af
    2ebc:	000030af 	.word	0x000030af
    2ec0:	000030af 	.word	0x000030af
    2ec4:	00003109 	.word	0x00003109
    2ec8:	000030af 	.word	0x000030af
    2ecc:	000030af 	.word	0x000030af
    2ed0:	000030af 	.word	0x000030af
    2ed4:	000030af 	.word	0x000030af
    2ed8:	00003109 	.word	0x00003109
    2edc:	000030af 	.word	0x000030af
    2ee0:	000030af 	.word	0x000030af
    2ee4:	000030af 	.word	0x000030af
    2ee8:	000030af 	.word	0x000030af
    2eec:	000030af 	.word	0x000030af
    2ef0:	000030af 	.word	0x000030af
    2ef4:	000030af 	.word	0x000030af
    2ef8:	000030af 	.word	0x000030af
    2efc:	000030af 	.word	0x000030af
    2f00:	000030af 	.word	0x000030af
    2f04:	000030af 	.word	0x000030af
    2f08:	000030af 	.word	0x000030af
    2f0c:	000030af 	.word	0x000030af
    2f10:	000030af 	.word	0x000030af
    2f14:	000030af 	.word	0x000030af
    2f18:	000030af 	.word	0x000030af
    2f1c:	000030af 	.word	0x000030af
    2f20:	000030af 	.word	0x000030af
    2f24:	000030af 	.word	0x000030af
    2f28:	000030af 	.word	0x000030af
    2f2c:	000030af 	.word	0x000030af
    2f30:	000030af 	.word	0x000030af
    2f34:	000030af 	.word	0x000030af
    2f38:	000030af 	.word	0x000030af
    2f3c:	000030af 	.word	0x000030af
    2f40:	000030af 	.word	0x000030af
    2f44:	000030af 	.word	0x000030af
    2f48:	000030af 	.word	0x000030af
    2f4c:	000030af 	.word	0x000030af
    2f50:	000030af 	.word	0x000030af
    2f54:	000030af 	.word	0x000030af
    2f58:	000030af 	.word	0x000030af
    2f5c:	000030af 	.word	0x000030af
    2f60:	000030af 	.word	0x000030af
    2f64:	000030af 	.word	0x000030af
    2f68:	000030af 	.word	0x000030af
    2f6c:	000030af 	.word	0x000030af
    2f70:	000030af 	.word	0x000030af
    2f74:	000030a9 	.word	0x000030a9
    2f78:	000030af 	.word	0x000030af
    2f7c:	000030af 	.word	0x000030af
    2f80:	000030af 	.word	0x000030af
    2f84:	000030af 	.word	0x000030af
    2f88:	000030af 	.word	0x000030af
    2f8c:	000030af 	.word	0x000030af
    2f90:	00003053 	.word	0x00003053
    2f94:	000030af 	.word	0x000030af
    2f98:	000030af 	.word	0x000030af
    2f9c:	000030af 	.word	0x000030af
    2fa0:	000030af 	.word	0x000030af
    2fa4:	000030af 	.word	0x000030af
    2fa8:	000030af 	.word	0x000030af
    2fac:	00003109 	.word	0x00003109
    2fb0:	000030af 	.word	0x000030af
    2fb4:	000030af 	.word	0x000030af
    2fb8:	000030af 	.word	0x000030af
    2fbc:	000030af 	.word	0x000030af
    2fc0:	00003029 	.word	0x00003029
    2fc4:	0000302f 	.word	0x0000302f
    2fc8:	000030af 	.word	0x000030af
    2fcc:	000030af 	.word	0x000030af
    2fd0:	000030af 	.word	0x000030af
    2fd4:	00003047 	.word	0x00003047
    2fd8:	000030af 	.word	0x000030af
    2fdc:	000030af 	.word	0x000030af
    2fe0:	000030af 	.word	0x000030af
    2fe4:	000030af 	.word	0x000030af
    2fe8:	000030af 	.word	0x000030af
    2fec:	000030af 	.word	0x000030af
    2ff0:	000030af 	.word	0x000030af
    2ff4:	0000303b 	.word	0x0000303b
    2ff8:	000030af 	.word	0x000030af
    2ffc:	000030af 	.word	0x000030af
    3000:	000030af 	.word	0x000030af
    3004:	0000304d 	.word	0x0000304d
    3008:	000030af 	.word	0x000030af
    300c:	00003035 	.word	0x00003035
    3010:	00003053 	.word	0x00003053
    3014:	00003041 	.word	0x00003041
    3018:	000030af 	.word	0x000030af
    301c:	00003069 	.word	0x00003069
                        // note: "c" can never be MP_LEXER_EOF because next_char
                        // always inserts a newline at the end of the input stream
                        case '\n': c = MP_LEXER_EOF; break; // backslash escape the newline, just ignore it
    3020:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    3024:	61bb      	str	r3, [r7, #24]
    3026:	e070      	b.n	310a <parse_string_literal+0x376>
                        case '\\': break;
                        case '\'': break;
                        case '"': break;
                        case 'a': c = 0x07; break;
    3028:	2307      	movs	r3, #7
    302a:	61bb      	str	r3, [r7, #24]
    302c:	e06d      	b.n	310a <parse_string_literal+0x376>
                        case 'b': c = 0x08; break;
    302e:	2308      	movs	r3, #8
    3030:	61bb      	str	r3, [r7, #24]
    3032:	e06a      	b.n	310a <parse_string_literal+0x376>
                        case 't': c = 0x09; break;
    3034:	2309      	movs	r3, #9
    3036:	61bb      	str	r3, [r7, #24]
    3038:	e067      	b.n	310a <parse_string_literal+0x376>
                        case 'n': c = 0x0a; break;
    303a:	230a      	movs	r3, #10
    303c:	61bb      	str	r3, [r7, #24]
    303e:	e064      	b.n	310a <parse_string_literal+0x376>
                        case 'v': c = 0x0b; break;
    3040:	230b      	movs	r3, #11
    3042:	61bb      	str	r3, [r7, #24]
    3044:	e061      	b.n	310a <parse_string_literal+0x376>
                        case 'f': c = 0x0c; break;
    3046:	230c      	movs	r3, #12
    3048:	61bb      	str	r3, [r7, #24]
    304a:	e05e      	b.n	310a <parse_string_literal+0x376>
                        case 'r': c = 0x0d; break;
    304c:	230d      	movs	r3, #13
    304e:	61bb      	str	r3, [r7, #24]
    3050:	e05b      	b.n	310a <parse_string_literal+0x376>
                        case 'u':
                        case 'U':
                            if (lex->tok_kind == MP_TOKEN_BYTES) {
    3052:	687b      	ldr	r3, [r7, #4]
    3054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    3056:	2b0b      	cmp	r3, #11
    3058:	d106      	bne.n	3068 <parse_string_literal+0x2d4>
                                // b'\u1234' == b'\\u1234'
                                vstr_add_char(&lex->vstr, '\\');
    305a:	687b      	ldr	r3, [r7, #4]
    305c:	3344      	adds	r3, #68	; 0x44
    305e:	215c      	movs	r1, #92	; 0x5c
    3060:	4618      	mov	r0, r3
    3062:	f7fe fb9f 	bl	17a4 <vstr_add_char>
                                break;
    3066:	e050      	b.n	310a <parse_string_literal+0x376>
                            }
                            // Otherwise fall through.
                        case 'x':
                        {
                            mp_uint_t num = 0;
    3068:	2300      	movs	r3, #0
    306a:	60fb      	str	r3, [r7, #12]
                            if (!get_hex(lex, (c == 'x' ? 2 : c == 'u' ? 4 : 8), &num)) {
    306c:	69bb      	ldr	r3, [r7, #24]
    306e:	2b78      	cmp	r3, #120	; 0x78
    3070:	d006      	beq.n	3080 <parse_string_literal+0x2ec>
    3072:	69bb      	ldr	r3, [r7, #24]
    3074:	2b75      	cmp	r3, #117	; 0x75
    3076:	d101      	bne.n	307c <parse_string_literal+0x2e8>
    3078:	2304      	movs	r3, #4
    307a:	e002      	b.n	3082 <parse_string_literal+0x2ee>
    307c:	2308      	movs	r3, #8
    307e:	e000      	b.n	3082 <parse_string_literal+0x2ee>
    3080:	2302      	movs	r3, #2
    3082:	f107 020c 	add.w	r2, r7, #12
    3086:	4619      	mov	r1, r3
    3088:	6878      	ldr	r0, [r7, #4]
    308a:	f7ff fe54 	bl	2d36 <get_hex>
    308e:	4603      	mov	r3, r0
    3090:	f083 0301 	eor.w	r3, r3, #1
    3094:	b2db      	uxtb	r3, r3
    3096:	2b00      	cmp	r3, #0
    3098:	d002      	beq.n	30a0 <parse_string_literal+0x30c>
                                // not enough hex chars for escape sequence
                                lex->tok_kind = MP_TOKEN_INVALID;
    309a:	687b      	ldr	r3, [r7, #4]
    309c:	2201      	movs	r2, #1
    309e:	641a      	str	r2, [r3, #64]	; 0x40
                            }
                            c = num;
    30a0:	68fb      	ldr	r3, [r7, #12]
    30a2:	61bb      	str	r3, [r7, #24]
                            break;
    30a4:	bf00      	nop
    30a6:	e030      	b.n	310a <parse_string_literal+0x376>
                            // Supporting '\N{LATIN SMALL LETTER A}' == 'a' would require keeping the
                            // entire Unicode name table in the core. As of Unicode 6.3.0, that's nearly
                            // 3MB of text; even gzip-compressed and with minimal structure, it'll take
                            // roughly half a meg of storage. This form of Unicode escape may be added
                            // later on, but it's definitely not a priority right now. -- CJA 20140607
                            mp_raise_NotImplementedError("unicode name escapes");
    30a8:	483e      	ldr	r0, [pc, #248]	; (31a4 <parse_string_literal+0x410>)
    30aa:	f00a f98b 	bl	d3c4 <mp_raise_NotImplementedError>
                            break;
                        default:
                            if (c >= '0' && c <= '7') {
    30ae:	69bb      	ldr	r3, [r7, #24]
    30b0:	2b2f      	cmp	r3, #47	; 0x2f
    30b2:	d922      	bls.n	30fa <parse_string_literal+0x366>
    30b4:	69bb      	ldr	r3, [r7, #24]
    30b6:	2b37      	cmp	r3, #55	; 0x37
    30b8:	d81f      	bhi.n	30fa <parse_string_literal+0x366>
                                // Octal sequence, 1-3 chars
                                size_t digits = 3;
    30ba:	2303      	movs	r3, #3
    30bc:	617b      	str	r3, [r7, #20]
                                mp_uint_t num = c - '0';
    30be:	69bb      	ldr	r3, [r7, #24]
    30c0:	3b30      	subs	r3, #48	; 0x30
    30c2:	613b      	str	r3, [r7, #16]
                                while (is_following_odigit(lex) && --digits != 0) {
    30c4:	e009      	b.n	30da <parse_string_literal+0x346>
                                    next_char(lex);
    30c6:	6878      	ldr	r0, [r7, #4]
    30c8:	f7ff fd87 	bl	2bda <next_char>
                                    num = num * 8 + (CUR_CHAR(lex) - '0');
    30cc:	693b      	ldr	r3, [r7, #16]
    30ce:	00da      	lsls	r2, r3, #3
    30d0:	687b      	ldr	r3, [r7, #4]
    30d2:	691b      	ldr	r3, [r3, #16]
    30d4:	4413      	add	r3, r2
    30d6:	3b30      	subs	r3, #48	; 0x30
    30d8:	613b      	str	r3, [r7, #16]
                                while (is_following_odigit(lex) && --digits != 0) {
    30da:	6878      	ldr	r0, [r7, #4]
    30dc:	f7ff fcf0 	bl	2ac0 <is_following_odigit>
    30e0:	4603      	mov	r3, r0
    30e2:	2b00      	cmp	r3, #0
    30e4:	d005      	beq.n	30f2 <parse_string_literal+0x35e>
    30e6:	697b      	ldr	r3, [r7, #20]
    30e8:	3b01      	subs	r3, #1
    30ea:	617b      	str	r3, [r7, #20]
    30ec:	697b      	ldr	r3, [r7, #20]
    30ee:	2b00      	cmp	r3, #0
    30f0:	d1e9      	bne.n	30c6 <parse_string_literal+0x332>
                                }
                                c = num;
    30f2:	693b      	ldr	r3, [r7, #16]
    30f4:	61bb      	str	r3, [r7, #24]
                            if (c >= '0' && c <= '7') {
    30f6:	bf00      	nop
                            } else {
                                // unrecognised escape character; CPython lets this through verbatim as '\' and then the character
                                vstr_add_char(&lex->vstr, '\\');
                            }
                            break;
    30f8:	e007      	b.n	310a <parse_string_literal+0x376>
                                vstr_add_char(&lex->vstr, '\\');
    30fa:	687b      	ldr	r3, [r7, #4]
    30fc:	3344      	adds	r3, #68	; 0x44
    30fe:	215c      	movs	r1, #92	; 0x5c
    3100:	4618      	mov	r0, r3
    3102:	f7fe fb4f 	bl	17a4 <vstr_add_char>
                            break;
    3106:	e000      	b.n	310a <parse_string_literal+0x376>
                        case '"': break;
    3108:	bf00      	nop
                    }
                }
                if (c != MP_LEXER_EOF) {
    310a:	69bb      	ldr	r3, [r7, #24]
    310c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    3110:	d019      	beq.n	3146 <parse_string_literal+0x3b2>
                            // this raises a generic SyntaxError; could provide more info
                            lex->tok_kind = MP_TOKEN_INVALID;
                        }
                    } else {
                        // without unicode everything is just added as an 8-bit byte
                        if (c < 0x100) {
    3112:	69bb      	ldr	r3, [r7, #24]
    3114:	2bff      	cmp	r3, #255	; 0xff
    3116:	d808      	bhi.n	312a <parse_string_literal+0x396>
                            vstr_add_byte(&lex->vstr, c);
    3118:	687b      	ldr	r3, [r7, #4]
    311a:	3344      	adds	r3, #68	; 0x44
    311c:	69ba      	ldr	r2, [r7, #24]
    311e:	b2d2      	uxtb	r2, r2
    3120:	4611      	mov	r1, r2
    3122:	4618      	mov	r0, r3
    3124:	f7fe fb2c 	bl	1780 <vstr_add_byte>
    3128:	e00d      	b.n	3146 <parse_string_literal+0x3b2>
                        } else {
                            // 8-bit character out of range
                            // this raises a generic SyntaxError; could provide more info
                            lex->tok_kind = MP_TOKEN_INVALID;
    312a:	687b      	ldr	r3, [r7, #4]
    312c:	2201      	movs	r2, #1
    312e:	641a      	str	r2, [r3, #64]	; 0x40
    3130:	e009      	b.n	3146 <parse_string_literal+0x3b2>
                    }
                }
            } else {
                // Add the "character" as a byte so that we remain 8-bit clean.
                // This way, strings are parsed correctly whether or not they contain utf-8 chars.
                vstr_add_byte(&lex->vstr, CUR_CHAR(lex));
    3132:	687b      	ldr	r3, [r7, #4]
    3134:	f103 0244 	add.w	r2, r3, #68	; 0x44
    3138:	687b      	ldr	r3, [r7, #4]
    313a:	691b      	ldr	r3, [r3, #16]
    313c:	b2db      	uxtb	r3, r3
    313e:	4619      	mov	r1, r3
    3140:	4610      	mov	r0, r2
    3142:	f7fe fb1d 	bl	1780 <vstr_add_byte>
            }
        }
        next_char(lex);
    3146:	6878      	ldr	r0, [r7, #4]
    3148:	f7ff fd47 	bl	2bda <next_char>
    while (!is_end(lex) && (num_quotes > 1 || !is_char(lex, '\n')) && n_closing < num_quotes) {
    314c:	6878      	ldr	r0, [r7, #4]
    314e:	f7ff fb76 	bl	283e <is_end>
    3152:	4603      	mov	r3, r0
    3154:	f083 0301 	eor.w	r3, r3, #1
    3158:	b2db      	uxtb	r3, r3
    315a:	2b00      	cmp	r3, #0
    315c:	d011      	beq.n	3182 <parse_string_literal+0x3ee>
    315e:	6a3b      	ldr	r3, [r7, #32]
    3160:	2b01      	cmp	r3, #1
    3162:	d809      	bhi.n	3178 <parse_string_literal+0x3e4>
    3164:	210a      	movs	r1, #10
    3166:	6878      	ldr	r0, [r7, #4]
    3168:	f7ff fb8c 	bl	2884 <is_char>
    316c:	4603      	mov	r3, r0
    316e:	f083 0301 	eor.w	r3, r3, #1
    3172:	b2db      	uxtb	r3, r3
    3174:	2b00      	cmp	r3, #0
    3176:	d004      	beq.n	3182 <parse_string_literal+0x3ee>
    3178:	69fa      	ldr	r2, [r7, #28]
    317a:	6a3b      	ldr	r3, [r7, #32]
    317c:	429a      	cmp	r2, r3
    317e:	f4ff ae38 	bcc.w	2df2 <parse_string_literal+0x5e>
    }

    // check we got the required end quotes
    if (n_closing < num_quotes) {
    3182:	69fa      	ldr	r2, [r7, #28]
    3184:	6a3b      	ldr	r3, [r7, #32]
    3186:	429a      	cmp	r2, r3
    3188:	d202      	bcs.n	3190 <parse_string_literal+0x3fc>
        lex->tok_kind = MP_TOKEN_LONELY_STRING_OPEN;
    318a:	687b      	ldr	r3, [r7, #4]
    318c:	2203      	movs	r2, #3
    318e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    // cut off the end quotes from the token text
    vstr_cut_tail_bytes(&lex->vstr, n_closing);
    3190:	687b      	ldr	r3, [r7, #4]
    3192:	3344      	adds	r3, #68	; 0x44
    3194:	69f9      	ldr	r1, [r7, #28]
    3196:	4618      	mov	r0, r3
    3198:	f7fe fbad 	bl	18f6 <vstr_cut_tail_bytes>
}
    319c:	bf00      	nop
    319e:	3728      	adds	r7, #40	; 0x28
    31a0:	46bd      	mov	sp, r7
    31a2:	bd80      	pop	{r7, pc}
    31a4:	000213e8 	.word	0x000213e8

000031a8 <skip_whitespace>:

STATIC bool skip_whitespace(mp_lexer_t *lex, bool stop_at_newline) {
    31a8:	b580      	push	{r7, lr}
    31aa:	b084      	sub	sp, #16
    31ac:	af00      	add	r7, sp, #0
    31ae:	6078      	str	r0, [r7, #4]
    31b0:	460b      	mov	r3, r1
    31b2:	70fb      	strb	r3, [r7, #3]
    bool had_physical_newline = false;
    31b4:	2300      	movs	r3, #0
    31b6:	73fb      	strb	r3, [r7, #15]
    while (!is_end(lex)) {
    31b8:	e04b      	b.n	3252 <skip_whitespace+0xaa>
        if (is_physical_newline(lex)) {
    31ba:	6878      	ldr	r0, [r7, #4]
    31bc:	f7ff fb51 	bl	2862 <is_physical_newline>
    31c0:	4603      	mov	r3, r0
    31c2:	2b00      	cmp	r3, #0
    31c4:	d00c      	beq.n	31e0 <skip_whitespace+0x38>
            if (stop_at_newline && lex->nested_bracket_level == 0) {
    31c6:	78fb      	ldrb	r3, [r7, #3]
    31c8:	2b00      	cmp	r3, #0
    31ca:	d003      	beq.n	31d4 <skip_whitespace+0x2c>
    31cc:	687b      	ldr	r3, [r7, #4]
    31ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    31d0:	2b00      	cmp	r3, #0
    31d2:	d048      	beq.n	3266 <skip_whitespace+0xbe>
                break;
            }
            had_physical_newline = true;
    31d4:	2301      	movs	r3, #1
    31d6:	73fb      	strb	r3, [r7, #15]
            next_char(lex);
    31d8:	6878      	ldr	r0, [r7, #4]
    31da:	f7ff fcfe 	bl	2bda <next_char>
    31de:	e038      	b.n	3252 <skip_whitespace+0xaa>
        } else if (is_whitespace(lex)) {
    31e0:	6878      	ldr	r0, [r7, #4]
    31e2:	f7ff fc17 	bl	2a14 <is_whitespace>
    31e6:	4603      	mov	r3, r0
    31e8:	2b00      	cmp	r3, #0
    31ea:	d003      	beq.n	31f4 <skip_whitespace+0x4c>
            next_char(lex);
    31ec:	6878      	ldr	r0, [r7, #4]
    31ee:	f7ff fcf4 	bl	2bda <next_char>
    31f2:	e02e      	b.n	3252 <skip_whitespace+0xaa>
        } else if (is_char(lex, '#')) {
    31f4:	2123      	movs	r1, #35	; 0x23
    31f6:	6878      	ldr	r0, [r7, #4]
    31f8:	f7ff fb44 	bl	2884 <is_char>
    31fc:	4603      	mov	r3, r0
    31fe:	2b00      	cmp	r3, #0
    3200:	d019      	beq.n	3236 <skip_whitespace+0x8e>
            next_char(lex);
    3202:	6878      	ldr	r0, [r7, #4]
    3204:	f7ff fce9 	bl	2bda <next_char>
            while (!is_end(lex) && !is_physical_newline(lex)) {
    3208:	e002      	b.n	3210 <skip_whitespace+0x68>
                next_char(lex);
    320a:	6878      	ldr	r0, [r7, #4]
    320c:	f7ff fce5 	bl	2bda <next_char>
            while (!is_end(lex) && !is_physical_newline(lex)) {
    3210:	6878      	ldr	r0, [r7, #4]
    3212:	f7ff fb14 	bl	283e <is_end>
    3216:	4603      	mov	r3, r0
    3218:	f083 0301 	eor.w	r3, r3, #1
    321c:	b2db      	uxtb	r3, r3
    321e:	2b00      	cmp	r3, #0
    3220:	d017      	beq.n	3252 <skip_whitespace+0xaa>
    3222:	6878      	ldr	r0, [r7, #4]
    3224:	f7ff fb1d 	bl	2862 <is_physical_newline>
    3228:	4603      	mov	r3, r0
    322a:	f083 0301 	eor.w	r3, r3, #1
    322e:	b2db      	uxtb	r3, r3
    3230:	2b00      	cmp	r3, #0
    3232:	d1ea      	bne.n	320a <skip_whitespace+0x62>
    3234:	e00d      	b.n	3252 <skip_whitespace+0xaa>
            }
            // had_physical_newline will be set on next loop
        } else if (is_char_and(lex, '\\', '\n')) {
    3236:	220a      	movs	r2, #10
    3238:	215c      	movs	r1, #92	; 0x5c
    323a:	6878      	ldr	r0, [r7, #4]
    323c:	f7ff fbcc 	bl	29d8 <is_char_and>
    3240:	4603      	mov	r3, r0
    3242:	2b00      	cmp	r3, #0
    3244:	d011      	beq.n	326a <skip_whitespace+0xc2>
            // line-continuation, so don't set had_physical_newline
            next_char(lex);
    3246:	6878      	ldr	r0, [r7, #4]
    3248:	f7ff fcc7 	bl	2bda <next_char>
            next_char(lex);
    324c:	6878      	ldr	r0, [r7, #4]
    324e:	f7ff fcc4 	bl	2bda <next_char>
    while (!is_end(lex)) {
    3252:	6878      	ldr	r0, [r7, #4]
    3254:	f7ff faf3 	bl	283e <is_end>
    3258:	4603      	mov	r3, r0
    325a:	f083 0301 	eor.w	r3, r3, #1
    325e:	b2db      	uxtb	r3, r3
    3260:	2b00      	cmp	r3, #0
    3262:	d1aa      	bne.n	31ba <skip_whitespace+0x12>
    3264:	e002      	b.n	326c <skip_whitespace+0xc4>
                break;
    3266:	bf00      	nop
    3268:	e000      	b.n	326c <skip_whitespace+0xc4>
        } else {
            break;
    326a:	bf00      	nop
        }
    }
    return had_physical_newline;
    326c:	7bfb      	ldrb	r3, [r7, #15]
}
    326e:	4618      	mov	r0, r3
    3270:	3710      	adds	r7, #16
    3272:	46bd      	mov	sp, r7
    3274:	bd80      	pop	{r7, pc}

00003276 <mp_lexer_to_next>:

void mp_lexer_to_next(mp_lexer_t *lex) {
    3276:	b580      	push	{r7, lr}
    3278:	b08e      	sub	sp, #56	; 0x38
    327a:	af00      	add	r7, sp, #0
    327c:	6078      	str	r0, [r7, #4]
    // start new token text
    vstr_reset(&lex->vstr);
    327e:	687b      	ldr	r3, [r7, #4]
    3280:	3344      	adds	r3, #68	; 0x44
    3282:	4618      	mov	r0, r3
    3284:	f7ff face 	bl	2824 <vstr_reset>

    // skip white space and comments
    bool had_physical_newline = skip_whitespace(lex, false);
    3288:	2100      	movs	r1, #0
    328a:	6878      	ldr	r0, [r7, #4]
    328c:	f7ff ff8c 	bl	31a8 <skip_whitespace>
    3290:	4603      	mov	r3, r0
    3292:	75fb      	strb	r3, [r7, #23]

    // set token source information
    lex->tok_line = lex->line;
    3294:	687b      	ldr	r3, [r7, #4]
    3296:	69da      	ldr	r2, [r3, #28]
    3298:	687b      	ldr	r3, [r7, #4]
    329a:	639a      	str	r2, [r3, #56]	; 0x38
    lex->tok_column = lex->column;
    329c:	687b      	ldr	r3, [r7, #4]
    329e:	6a1a      	ldr	r2, [r3, #32]
    32a0:	687b      	ldr	r3, [r7, #4]
    32a2:	63da      	str	r2, [r3, #60]	; 0x3c

    if (lex->emit_dent < 0) {
    32a4:	687b      	ldr	r3, [r7, #4]
    32a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    32a8:	2b00      	cmp	r3, #0
    32aa:	da08      	bge.n	32be <mp_lexer_to_next+0x48>
        lex->tok_kind = MP_TOKEN_DEDENT;
    32ac:	687b      	ldr	r3, [r7, #4]
    32ae:	2206      	movs	r2, #6
    32b0:	641a      	str	r2, [r3, #64]	; 0x40
        lex->emit_dent += 1;
    32b2:	687b      	ldr	r3, [r7, #4]
    32b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    32b6:	1c5a      	adds	r2, r3, #1
    32b8:	687b      	ldr	r3, [r7, #4]
    32ba:	625a      	str	r2, [r3, #36]	; 0x24
            } else if (lex->tok_kind == MP_TOKEN_DEL_PAREN_CLOSE || lex->tok_kind == MP_TOKEN_DEL_BRACKET_CLOSE || lex->tok_kind == MP_TOKEN_DEL_BRACE_CLOSE) {
                lex->nested_bracket_level -= 1;
            }
        }
    }
}
    32bc:	e2b6      	b.n	382c <mp_lexer_to_next+0x5b6>
    } else if (lex->emit_dent > 0) {
    32be:	687b      	ldr	r3, [r7, #4]
    32c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    32c2:	2b00      	cmp	r3, #0
    32c4:	dd08      	ble.n	32d8 <mp_lexer_to_next+0x62>
        lex->tok_kind = MP_TOKEN_INDENT;
    32c6:	687b      	ldr	r3, [r7, #4]
    32c8:	2205      	movs	r2, #5
    32ca:	641a      	str	r2, [r3, #64]	; 0x40
        lex->emit_dent -= 1;
    32cc:	687b      	ldr	r3, [r7, #4]
    32ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    32d0:	1e5a      	subs	r2, r3, #1
    32d2:	687b      	ldr	r3, [r7, #4]
    32d4:	625a      	str	r2, [r3, #36]	; 0x24
}
    32d6:	e2a9      	b.n	382c <mp_lexer_to_next+0x5b6>
    } else if (had_physical_newline && lex->nested_bracket_level == 0) {
    32d8:	7dfb      	ldrb	r3, [r7, #23]
    32da:	2b00      	cmp	r3, #0
    32dc:	d03e      	beq.n	335c <mp_lexer_to_next+0xe6>
    32de:	687b      	ldr	r3, [r7, #4]
    32e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    32e2:	2b00      	cmp	r3, #0
    32e4:	d13a      	bne.n	335c <mp_lexer_to_next+0xe6>
        lex->tok_kind = MP_TOKEN_NEWLINE;
    32e6:	687b      	ldr	r3, [r7, #4]
    32e8:	2204      	movs	r2, #4
    32ea:	641a      	str	r2, [r3, #64]	; 0x40
        size_t num_spaces = lex->column - 1;
    32ec:	687b      	ldr	r3, [r7, #4]
    32ee:	6a1b      	ldr	r3, [r3, #32]
    32f0:	3b01      	subs	r3, #1
    32f2:	613b      	str	r3, [r7, #16]
        if (num_spaces == indent_top(lex)) {
    32f4:	6878      	ldr	r0, [r7, #4]
    32f6:	f7ff fcfb 	bl	2cf0 <indent_top>
    32fa:	4602      	mov	r2, r0
    32fc:	693b      	ldr	r3, [r7, #16]
    32fe:	429a      	cmp	r2, r3
    3300:	f000 828d 	beq.w	381e <mp_lexer_to_next+0x5a8>
        } else if (num_spaces > indent_top(lex)) {
    3304:	6878      	ldr	r0, [r7, #4]
    3306:	f7ff fcf3 	bl	2cf0 <indent_top>
    330a:	4602      	mov	r2, r0
    330c:	693b      	ldr	r3, [r7, #16]
    330e:	429a      	cmp	r2, r3
    3310:	d211      	bcs.n	3336 <mp_lexer_to_next+0xc0>
            indent_push(lex, num_spaces);
    3312:	6939      	ldr	r1, [r7, #16]
    3314:	6878      	ldr	r0, [r7, #4]
    3316:	f7ff fcbd 	bl	2c94 <indent_push>
            lex->emit_dent += 1;
    331a:	687b      	ldr	r3, [r7, #4]
    331c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    331e:	1c5a      	adds	r2, r3, #1
    3320:	687b      	ldr	r3, [r7, #4]
    3322:	625a      	str	r2, [r3, #36]	; 0x24
    } else if (had_physical_newline && lex->nested_bracket_level == 0) {
    3324:	e27b      	b.n	381e <mp_lexer_to_next+0x5a8>
                indent_pop(lex);
    3326:	6878      	ldr	r0, [r7, #4]
    3328:	f7ff fcf6 	bl	2d18 <indent_pop>
                lex->emit_dent -= 1;
    332c:	687b      	ldr	r3, [r7, #4]
    332e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    3330:	1e5a      	subs	r2, r3, #1
    3332:	687b      	ldr	r3, [r7, #4]
    3334:	625a      	str	r2, [r3, #36]	; 0x24
            while (num_spaces < indent_top(lex)) {
    3336:	6878      	ldr	r0, [r7, #4]
    3338:	f7ff fcda 	bl	2cf0 <indent_top>
    333c:	4602      	mov	r2, r0
    333e:	693b      	ldr	r3, [r7, #16]
    3340:	429a      	cmp	r2, r3
    3342:	d8f0      	bhi.n	3326 <mp_lexer_to_next+0xb0>
            if (num_spaces != indent_top(lex)) {
    3344:	6878      	ldr	r0, [r7, #4]
    3346:	f7ff fcd3 	bl	2cf0 <indent_top>
    334a:	4602      	mov	r2, r0
    334c:	693b      	ldr	r3, [r7, #16]
    334e:	429a      	cmp	r2, r3
    3350:	f000 8265 	beq.w	381e <mp_lexer_to_next+0x5a8>
                lex->tok_kind = MP_TOKEN_DEDENT_MISMATCH;
    3354:	687b      	ldr	r3, [r7, #4]
    3356:	2202      	movs	r2, #2
    3358:	641a      	str	r2, [r3, #64]	; 0x40
    } else if (had_physical_newline && lex->nested_bracket_level == 0) {
    335a:	e260      	b.n	381e <mp_lexer_to_next+0x5a8>
    } else if (is_end(lex)) {
    335c:	6878      	ldr	r0, [r7, #4]
    335e:	f7ff fa6e 	bl	283e <is_end>
    3362:	4603      	mov	r3, r0
    3364:	2b00      	cmp	r3, #0
    3366:	d003      	beq.n	3370 <mp_lexer_to_next+0xfa>
        lex->tok_kind = MP_TOKEN_END;
    3368:	687b      	ldr	r3, [r7, #4]
    336a:	2200      	movs	r2, #0
    336c:	641a      	str	r2, [r3, #64]	; 0x40
}
    336e:	e25d      	b.n	382c <mp_lexer_to_next+0x5b6>
    } else if (is_string_or_bytes(lex)) {
    3370:	6878      	ldr	r0, [r7, #4]
    3372:	f7ff fbbd 	bl	2af0 <is_string_or_bytes>
    3376:	4603      	mov	r3, r0
    3378:	2b00      	cmp	r3, #0
    337a:	d06d      	beq.n	3458 <mp_lexer_to_next+0x1e2>
        lex->tok_kind = MP_TOKEN_END;
    337c:	687b      	ldr	r3, [r7, #4]
    337e:	2200      	movs	r2, #0
    3380:	641a      	str	r2, [r3, #64]	; 0x40
            bool is_raw = false;
    3382:	2300      	movs	r3, #0
    3384:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
            mp_token_kind_t kind = MP_TOKEN_STRING;
    3388:	230a      	movs	r3, #10
    338a:	633b      	str	r3, [r7, #48]	; 0x30
            int n_char = 0;
    338c:	2300      	movs	r3, #0
    338e:	62fb      	str	r3, [r7, #44]	; 0x2c
            if (is_char(lex, 'u')) {
    3390:	2175      	movs	r1, #117	; 0x75
    3392:	6878      	ldr	r0, [r7, #4]
    3394:	f7ff fa76 	bl	2884 <is_char>
    3398:	4603      	mov	r3, r0
    339a:	2b00      	cmp	r3, #0
    339c:	d002      	beq.n	33a4 <mp_lexer_to_next+0x12e>
                n_char = 1;
    339e:	2301      	movs	r3, #1
    33a0:	62fb      	str	r3, [r7, #44]	; 0x2c
    33a2:	e02e      	b.n	3402 <mp_lexer_to_next+0x18c>
            } else if (is_char(lex, 'b')) {
    33a4:	2162      	movs	r1, #98	; 0x62
    33a6:	6878      	ldr	r0, [r7, #4]
    33a8:	f7ff fa6c 	bl	2884 <is_char>
    33ac:	4603      	mov	r3, r0
    33ae:	2b00      	cmp	r3, #0
    33b0:	d010      	beq.n	33d4 <mp_lexer_to_next+0x15e>
                kind = MP_TOKEN_BYTES;
    33b2:	230b      	movs	r3, #11
    33b4:	633b      	str	r3, [r7, #48]	; 0x30
                n_char = 1;
    33b6:	2301      	movs	r3, #1
    33b8:	62fb      	str	r3, [r7, #44]	; 0x2c
                if (is_char_following(lex, 'r')) {
    33ba:	2172      	movs	r1, #114	; 0x72
    33bc:	6878      	ldr	r0, [r7, #4]
    33be:	f7ff fabb 	bl	2938 <is_char_following>
    33c2:	4603      	mov	r3, r0
    33c4:	2b00      	cmp	r3, #0
    33c6:	d01c      	beq.n	3402 <mp_lexer_to_next+0x18c>
                    is_raw = true;
    33c8:	2301      	movs	r3, #1
    33ca:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
                    n_char = 2;
    33ce:	2302      	movs	r3, #2
    33d0:	62fb      	str	r3, [r7, #44]	; 0x2c
    33d2:	e016      	b.n	3402 <mp_lexer_to_next+0x18c>
            } else if (is_char(lex, 'r')) {
    33d4:	2172      	movs	r1, #114	; 0x72
    33d6:	6878      	ldr	r0, [r7, #4]
    33d8:	f7ff fa54 	bl	2884 <is_char>
    33dc:	4603      	mov	r3, r0
    33de:	2b00      	cmp	r3, #0
    33e0:	d00f      	beq.n	3402 <mp_lexer_to_next+0x18c>
                is_raw = true;
    33e2:	2301      	movs	r3, #1
    33e4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
                n_char = 1;
    33e8:	2301      	movs	r3, #1
    33ea:	62fb      	str	r3, [r7, #44]	; 0x2c
                if (is_char_following(lex, 'b')) {
    33ec:	2162      	movs	r1, #98	; 0x62
    33ee:	6878      	ldr	r0, [r7, #4]
    33f0:	f7ff faa2 	bl	2938 <is_char_following>
    33f4:	4603      	mov	r3, r0
    33f6:	2b00      	cmp	r3, #0
    33f8:	d003      	beq.n	3402 <mp_lexer_to_next+0x18c>
                    kind = MP_TOKEN_BYTES;
    33fa:	230b      	movs	r3, #11
    33fc:	633b      	str	r3, [r7, #48]	; 0x30
                    n_char = 2;
    33fe:	2302      	movs	r3, #2
    3400:	62fb      	str	r3, [r7, #44]	; 0x2c
            if (lex->tok_kind == MP_TOKEN_END) {
    3402:	687b      	ldr	r3, [r7, #4]
    3404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    3406:	2b00      	cmp	r3, #0
    3408:	d103      	bne.n	3412 <mp_lexer_to_next+0x19c>
                lex->tok_kind = kind;
    340a:	687b      	ldr	r3, [r7, #4]
    340c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    340e:	641a      	str	r2, [r3, #64]	; 0x40
    3410:	e005      	b.n	341e <mp_lexer_to_next+0x1a8>
            } else if (lex->tok_kind != kind) {
    3412:	687b      	ldr	r3, [r7, #4]
    3414:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    3416:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    3418:	429a      	cmp	r2, r3
    341a:	f040 8202 	bne.w	3822 <mp_lexer_to_next+0x5ac>
            if (n_char != 0) {
    341e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    3420:	2b00      	cmp	r3, #0
    3422:	d008      	beq.n	3436 <mp_lexer_to_next+0x1c0>
                next_char(lex);
    3424:	6878      	ldr	r0, [r7, #4]
    3426:	f7ff fbd8 	bl	2bda <next_char>
                if (n_char == 2) {
    342a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    342c:	2b02      	cmp	r3, #2
    342e:	d102      	bne.n	3436 <mp_lexer_to_next+0x1c0>
                    next_char(lex);
    3430:	6878      	ldr	r0, [r7, #4]
    3432:	f7ff fbd2 	bl	2bda <next_char>
            parse_string_literal(lex, is_raw);
    3436:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
    343a:	4619      	mov	r1, r3
    343c:	6878      	ldr	r0, [r7, #4]
    343e:	f7ff fca9 	bl	2d94 <parse_string_literal>
            skip_whitespace(lex, true);
    3442:	2101      	movs	r1, #1
    3444:	6878      	ldr	r0, [r7, #4]
    3446:	f7ff feaf 	bl	31a8 <skip_whitespace>
        } while (is_string_or_bytes(lex));
    344a:	6878      	ldr	r0, [r7, #4]
    344c:	f7ff fb50 	bl	2af0 <is_string_or_bytes>
    3450:	4603      	mov	r3, r0
    3452:	2b00      	cmp	r3, #0
    3454:	d195      	bne.n	3382 <mp_lexer_to_next+0x10c>
}
    3456:	e1e9      	b.n	382c <mp_lexer_to_next+0x5b6>
    } else if (is_head_of_identifier(lex)) {
    3458:	6878      	ldr	r0, [r7, #4]
    345a:	f7ff fb88 	bl	2b6e <is_head_of_identifier>
    345e:	4603      	mov	r3, r0
    3460:	2b00      	cmp	r3, #0
    3462:	d061      	beq.n	3528 <mp_lexer_to_next+0x2b2>
        lex->tok_kind = MP_TOKEN_NAME;
    3464:	687b      	ldr	r3, [r7, #4]
    3466:	2207      	movs	r2, #7
    3468:	641a      	str	r2, [r3, #64]	; 0x40
        vstr_add_byte(&lex->vstr, CUR_CHAR(lex));
    346a:	687b      	ldr	r3, [r7, #4]
    346c:	f103 0244 	add.w	r2, r3, #68	; 0x44
    3470:	687b      	ldr	r3, [r7, #4]
    3472:	691b      	ldr	r3, [r3, #16]
    3474:	b2db      	uxtb	r3, r3
    3476:	4619      	mov	r1, r3
    3478:	4610      	mov	r0, r2
    347a:	f7fe f981 	bl	1780 <vstr_add_byte>
        next_char(lex);
    347e:	6878      	ldr	r0, [r7, #4]
    3480:	f7ff fbab 	bl	2bda <next_char>
        while (!is_end(lex) && is_tail_of_identifier(lex)) {
    3484:	e00c      	b.n	34a0 <mp_lexer_to_next+0x22a>
            vstr_add_byte(&lex->vstr, CUR_CHAR(lex));
    3486:	687b      	ldr	r3, [r7, #4]
    3488:	f103 0244 	add.w	r2, r3, #68	; 0x44
    348c:	687b      	ldr	r3, [r7, #4]
    348e:	691b      	ldr	r3, [r3, #16]
    3490:	b2db      	uxtb	r3, r3
    3492:	4619      	mov	r1, r3
    3494:	4610      	mov	r0, r2
    3496:	f7fe f973 	bl	1780 <vstr_add_byte>
            next_char(lex);
    349a:	6878      	ldr	r0, [r7, #4]
    349c:	f7ff fb9d 	bl	2bda <next_char>
        while (!is_end(lex) && is_tail_of_identifier(lex)) {
    34a0:	6878      	ldr	r0, [r7, #4]
    34a2:	f7ff f9cc 	bl	283e <is_end>
    34a6:	4603      	mov	r3, r0
    34a8:	f083 0301 	eor.w	r3, r3, #1
    34ac:	b2db      	uxtb	r3, r3
    34ae:	2b00      	cmp	r3, #0
    34b0:	d005      	beq.n	34be <mp_lexer_to_next+0x248>
    34b2:	6878      	ldr	r0, [r7, #4]
    34b4:	f7ff fb77 	bl	2ba6 <is_tail_of_identifier>
    34b8:	4603      	mov	r3, r0
    34ba:	2b00      	cmp	r3, #0
    34bc:	d1e3      	bne.n	3486 <mp_lexer_to_next+0x210>
        const char *s = vstr_null_terminated_str(&lex->vstr);
    34be:	687b      	ldr	r3, [r7, #4]
    34c0:	3344      	adds	r3, #68	; 0x44
    34c2:	4618      	mov	r0, r3
    34c4:	f7fe f941 	bl	174a <vstr_null_terminated_str>
    34c8:	60f8      	str	r0, [r7, #12]
        for (size_t i = 0; i < MP_ARRAY_SIZE(tok_kw); i++) {
    34ca:	2300      	movs	r3, #0
    34cc:	62bb      	str	r3, [r7, #40]	; 0x28
    34ce:	e027      	b.n	3520 <mp_lexer_to_next+0x2aa>
            int cmp = strcmp(s, tok_kw[i]);
    34d0:	4aa6      	ldr	r2, [pc, #664]	; (376c <mp_lexer_to_next+0x4f6>)
    34d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    34d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    34d8:	4619      	mov	r1, r3
    34da:	68f8      	ldr	r0, [r7, #12]
    34dc:	f01b f978 	bl	1e7d0 <strcmp>
    34e0:	60b8      	str	r0, [r7, #8]
            if (cmp == 0) {
    34e2:	68bb      	ldr	r3, [r7, #8]
    34e4:	2b00      	cmp	r3, #0
    34e6:	d114      	bne.n	3512 <mp_lexer_to_next+0x29c>
                lex->tok_kind = MP_TOKEN_KW_FALSE + i;
    34e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
    34ea:	f103 020d 	add.w	r2, r3, #13
    34ee:	687b      	ldr	r3, [r7, #4]
    34f0:	641a      	str	r2, [r3, #64]	; 0x40
                if (lex->tok_kind == MP_TOKEN_KW___DEBUG__) {
    34f2:	687b      	ldr	r3, [r7, #4]
    34f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    34f6:	2b10      	cmp	r3, #16
    34f8:	f040 8195 	bne.w	3826 <mp_lexer_to_next+0x5b0>
                    lex->tok_kind = (MP_STATE_VM(mp_optimise_value) == 0 ? MP_TOKEN_KW_TRUE : MP_TOKEN_KW_FALSE);
    34fc:	4b9c      	ldr	r3, [pc, #624]	; (3770 <mp_lexer_to_next+0x4fa>)
    34fe:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
    3502:	2b00      	cmp	r3, #0
    3504:	d101      	bne.n	350a <mp_lexer_to_next+0x294>
    3506:	220f      	movs	r2, #15
    3508:	e000      	b.n	350c <mp_lexer_to_next+0x296>
    350a:	220d      	movs	r2, #13
    350c:	687b      	ldr	r3, [r7, #4]
    350e:	641a      	str	r2, [r3, #64]	; 0x40
                break;
    3510:	e189      	b.n	3826 <mp_lexer_to_next+0x5b0>
            } else if (cmp < 0) {
    3512:	68bb      	ldr	r3, [r7, #8]
    3514:	2b00      	cmp	r3, #0
    3516:	f2c0 8188 	blt.w	382a <mp_lexer_to_next+0x5b4>
        for (size_t i = 0; i < MP_ARRAY_SIZE(tok_kw); i++) {
    351a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    351c:	3301      	adds	r3, #1
    351e:	62bb      	str	r3, [r7, #40]	; 0x28
    3520:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3522:	2b21      	cmp	r3, #33	; 0x21
    3524:	d9d4      	bls.n	34d0 <mp_lexer_to_next+0x25a>
}
    3526:	e181      	b.n	382c <mp_lexer_to_next+0x5b6>
    } else if (is_digit(lex) || (is_char(lex, '.') && is_following_digit(lex))) {
    3528:	6878      	ldr	r0, [r7, #4]
    352a:	f7ff fa8f 	bl	2a4c <is_digit>
    352e:	4603      	mov	r3, r0
    3530:	2b00      	cmp	r3, #0
    3532:	d10e      	bne.n	3552 <mp_lexer_to_next+0x2dc>
    3534:	212e      	movs	r1, #46	; 0x2e
    3536:	6878      	ldr	r0, [r7, #4]
    3538:	f7ff f9a4 	bl	2884 <is_char>
    353c:	4603      	mov	r3, r0
    353e:	2b00      	cmp	r3, #0
    3540:	f000 80ad 	beq.w	369e <mp_lexer_to_next+0x428>
    3544:	6878      	ldr	r0, [r7, #4]
    3546:	f7ff fa8f 	bl	2a68 <is_following_digit>
    354a:	4603      	mov	r3, r0
    354c:	2b00      	cmp	r3, #0
    354e:	f000 80a6 	beq.w	369e <mp_lexer_to_next+0x428>
        bool forced_integer = false;
    3552:	2300      	movs	r3, #0
    3554:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (is_char(lex, '.')) {
    3558:	212e      	movs	r1, #46	; 0x2e
    355a:	6878      	ldr	r0, [r7, #4]
    355c:	f7ff f992 	bl	2884 <is_char>
    3560:	4603      	mov	r3, r0
    3562:	2b00      	cmp	r3, #0
    3564:	d003      	beq.n	356e <mp_lexer_to_next+0x2f8>
            lex->tok_kind = MP_TOKEN_FLOAT_OR_IMAG;
    3566:	687b      	ldr	r3, [r7, #4]
    3568:	2209      	movs	r2, #9
    356a:	641a      	str	r2, [r3, #64]	; 0x40
    356c:	e012      	b.n	3594 <mp_lexer_to_next+0x31e>
            lex->tok_kind = MP_TOKEN_INTEGER;
    356e:	687b      	ldr	r3, [r7, #4]
    3570:	2208      	movs	r2, #8
    3572:	641a      	str	r2, [r3, #64]	; 0x40
            if (is_char(lex, '0') && is_following_base_char(lex)) {
    3574:	2130      	movs	r1, #48	; 0x30
    3576:	6878      	ldr	r0, [r7, #4]
    3578:	f7ff f984 	bl	2884 <is_char>
    357c:	4603      	mov	r3, r0
    357e:	2b00      	cmp	r3, #0
    3580:	d008      	beq.n	3594 <mp_lexer_to_next+0x31e>
    3582:	6878      	ldr	r0, [r7, #4]
    3584:	f7ff fa7e 	bl	2a84 <is_following_base_char>
    3588:	4603      	mov	r3, r0
    358a:	2b00      	cmp	r3, #0
    358c:	d002      	beq.n	3594 <mp_lexer_to_next+0x31e>
                forced_integer = true;
    358e:	2301      	movs	r3, #1
    3590:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        vstr_add_char(&lex->vstr, CUR_CHAR(lex));
    3594:	687b      	ldr	r3, [r7, #4]
    3596:	f103 0244 	add.w	r2, r3, #68	; 0x44
    359a:	687b      	ldr	r3, [r7, #4]
    359c:	691b      	ldr	r3, [r3, #16]
    359e:	4619      	mov	r1, r3
    35a0:	4610      	mov	r0, r2
    35a2:	f7fe f8ff 	bl	17a4 <vstr_add_char>
        next_char(lex);
    35a6:	6878      	ldr	r0, [r7, #4]
    35a8:	f7ff fb17 	bl	2bda <next_char>
        while (!is_end(lex)) {
    35ac:	e06b      	b.n	3686 <mp_lexer_to_next+0x410>
            if (!forced_integer && is_char_or(lex, 'e', 'E')) {
    35ae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    35b2:	f083 0301 	eor.w	r3, r3, #1
    35b6:	b2db      	uxtb	r3, r3
    35b8:	2b00      	cmp	r3, #0
    35ba:	d02e      	beq.n	361a <mp_lexer_to_next+0x3a4>
    35bc:	2245      	movs	r2, #69	; 0x45
    35be:	2165      	movs	r1, #101	; 0x65
    35c0:	6878      	ldr	r0, [r7, #4]
    35c2:	f7ff f973 	bl	28ac <is_char_or>
    35c6:	4603      	mov	r3, r0
    35c8:	2b00      	cmp	r3, #0
    35ca:	d026      	beq.n	361a <mp_lexer_to_next+0x3a4>
                lex->tok_kind = MP_TOKEN_FLOAT_OR_IMAG;
    35cc:	687b      	ldr	r3, [r7, #4]
    35ce:	2209      	movs	r2, #9
    35d0:	641a      	str	r2, [r3, #64]	; 0x40
                vstr_add_char(&lex->vstr, 'e');
    35d2:	687b      	ldr	r3, [r7, #4]
    35d4:	3344      	adds	r3, #68	; 0x44
    35d6:	2165      	movs	r1, #101	; 0x65
    35d8:	4618      	mov	r0, r3
    35da:	f7fe f8e3 	bl	17a4 <vstr_add_char>
                next_char(lex);
    35de:	6878      	ldr	r0, [r7, #4]
    35e0:	f7ff fafb 	bl	2bda <next_char>
                if (is_char(lex, '+') || is_char(lex, '-')) {
    35e4:	212b      	movs	r1, #43	; 0x2b
    35e6:	6878      	ldr	r0, [r7, #4]
    35e8:	f7ff f94c 	bl	2884 <is_char>
    35ec:	4603      	mov	r3, r0
    35ee:	2b00      	cmp	r3, #0
    35f0:	d106      	bne.n	3600 <mp_lexer_to_next+0x38a>
    35f2:	212d      	movs	r1, #45	; 0x2d
    35f4:	6878      	ldr	r0, [r7, #4]
    35f6:	f7ff f945 	bl	2884 <is_char>
    35fa:	4603      	mov	r3, r0
    35fc:	2b00      	cmp	r3, #0
    35fe:	d042      	beq.n	3686 <mp_lexer_to_next+0x410>
                    vstr_add_char(&lex->vstr, CUR_CHAR(lex));
    3600:	687b      	ldr	r3, [r7, #4]
    3602:	f103 0244 	add.w	r2, r3, #68	; 0x44
    3606:	687b      	ldr	r3, [r7, #4]
    3608:	691b      	ldr	r3, [r3, #16]
    360a:	4619      	mov	r1, r3
    360c:	4610      	mov	r0, r2
    360e:	f7fe f8c9 	bl	17a4 <vstr_add_char>
                    next_char(lex);
    3612:	6878      	ldr	r0, [r7, #4]
    3614:	f7ff fae1 	bl	2bda <next_char>
                if (is_char(lex, '+') || is_char(lex, '-')) {
    3618:	e035      	b.n	3686 <mp_lexer_to_next+0x410>
            } else if (is_letter(lex) || is_digit(lex) || is_char(lex, '.')) {
    361a:	6878      	ldr	r0, [r7, #4]
    361c:	f7ff fa08 	bl	2a30 <is_letter>
    3620:	4603      	mov	r3, r0
    3622:	2b00      	cmp	r3, #0
    3624:	d10c      	bne.n	3640 <mp_lexer_to_next+0x3ca>
    3626:	6878      	ldr	r0, [r7, #4]
    3628:	f7ff fa10 	bl	2a4c <is_digit>
    362c:	4603      	mov	r3, r0
    362e:	2b00      	cmp	r3, #0
    3630:	d106      	bne.n	3640 <mp_lexer_to_next+0x3ca>
    3632:	212e      	movs	r1, #46	; 0x2e
    3634:	6878      	ldr	r0, [r7, #4]
    3636:	f7ff f925 	bl	2884 <is_char>
    363a:	4603      	mov	r3, r0
    363c:	2b00      	cmp	r3, #0
    363e:	d018      	beq.n	3672 <mp_lexer_to_next+0x3fc>
                if (is_char_or3(lex, '.', 'j', 'J')) {
    3640:	234a      	movs	r3, #74	; 0x4a
    3642:	226a      	movs	r2, #106	; 0x6a
    3644:	212e      	movs	r1, #46	; 0x2e
    3646:	6878      	ldr	r0, [r7, #4]
    3648:	f7ff f94e 	bl	28e8 <is_char_or3>
    364c:	4603      	mov	r3, r0
    364e:	2b00      	cmp	r3, #0
    3650:	d002      	beq.n	3658 <mp_lexer_to_next+0x3e2>
                    lex->tok_kind = MP_TOKEN_FLOAT_OR_IMAG;
    3652:	687b      	ldr	r3, [r7, #4]
    3654:	2209      	movs	r2, #9
    3656:	641a      	str	r2, [r3, #64]	; 0x40
                vstr_add_char(&lex->vstr, CUR_CHAR(lex));
    3658:	687b      	ldr	r3, [r7, #4]
    365a:	f103 0244 	add.w	r2, r3, #68	; 0x44
    365e:	687b      	ldr	r3, [r7, #4]
    3660:	691b      	ldr	r3, [r3, #16]
    3662:	4619      	mov	r1, r3
    3664:	4610      	mov	r0, r2
    3666:	f7fe f89d 	bl	17a4 <vstr_add_char>
                next_char(lex);
    366a:	6878      	ldr	r0, [r7, #4]
    366c:	f7ff fab5 	bl	2bda <next_char>
    3670:	e009      	b.n	3686 <mp_lexer_to_next+0x410>
            } else if (is_char(lex, '_')) {
    3672:	215f      	movs	r1, #95	; 0x5f
    3674:	6878      	ldr	r0, [r7, #4]
    3676:	f7ff f905 	bl	2884 <is_char>
    367a:	4603      	mov	r3, r0
    367c:	2b00      	cmp	r3, #0
    367e:	d00c      	beq.n	369a <mp_lexer_to_next+0x424>
                next_char(lex);
    3680:	6878      	ldr	r0, [r7, #4]
    3682:	f7ff faaa 	bl	2bda <next_char>
        while (!is_end(lex)) {
    3686:	6878      	ldr	r0, [r7, #4]
    3688:	f7ff f8d9 	bl	283e <is_end>
    368c:	4603      	mov	r3, r0
    368e:	f083 0301 	eor.w	r3, r3, #1
    3692:	b2db      	uxtb	r3, r3
    3694:	2b00      	cmp	r3, #0
    3696:	d18a      	bne.n	35ae <mp_lexer_to_next+0x338>
    } else if (is_digit(lex) || (is_char(lex, '.') && is_following_digit(lex))) {
    3698:	e0c8      	b.n	382c <mp_lexer_to_next+0x5b6>
                break;
    369a:	bf00      	nop
    } else if (is_digit(lex) || (is_char(lex, '.') && is_following_digit(lex))) {
    369c:	e0c6      	b.n	382c <mp_lexer_to_next+0x5b6>
        const char *t = tok_enc;
    369e:	4b35      	ldr	r3, [pc, #212]	; (3774 <mp_lexer_to_next+0x4fe>)
    36a0:	623b      	str	r3, [r7, #32]
        size_t tok_enc_index = 0;
    36a2:	2300      	movs	r3, #0
    36a4:	61fb      	str	r3, [r7, #28]
        for (; *t != 0 && !is_char(lex, *t); t += 1) {
    36a6:	e010      	b.n	36ca <mp_lexer_to_next+0x454>
            if (*t == 'e' || *t == 'c') {
    36a8:	6a3b      	ldr	r3, [r7, #32]
    36aa:	781b      	ldrb	r3, [r3, #0]
    36ac:	2b65      	cmp	r3, #101	; 0x65
    36ae:	d003      	beq.n	36b8 <mp_lexer_to_next+0x442>
    36b0:	6a3b      	ldr	r3, [r7, #32]
    36b2:	781b      	ldrb	r3, [r3, #0]
    36b4:	2b63      	cmp	r3, #99	; 0x63
    36b6:	d102      	bne.n	36be <mp_lexer_to_next+0x448>
                t += 1;
    36b8:	6a3b      	ldr	r3, [r7, #32]
    36ba:	3301      	adds	r3, #1
    36bc:	623b      	str	r3, [r7, #32]
            tok_enc_index += 1;
    36be:	69fb      	ldr	r3, [r7, #28]
    36c0:	3301      	adds	r3, #1
    36c2:	61fb      	str	r3, [r7, #28]
        for (; *t != 0 && !is_char(lex, *t); t += 1) {
    36c4:	6a3b      	ldr	r3, [r7, #32]
    36c6:	3301      	adds	r3, #1
    36c8:	623b      	str	r3, [r7, #32]
    36ca:	6a3b      	ldr	r3, [r7, #32]
    36cc:	781b      	ldrb	r3, [r3, #0]
    36ce:	2b00      	cmp	r3, #0
    36d0:	d00b      	beq.n	36ea <mp_lexer_to_next+0x474>
    36d2:	6a3b      	ldr	r3, [r7, #32]
    36d4:	781b      	ldrb	r3, [r3, #0]
    36d6:	4619      	mov	r1, r3
    36d8:	6878      	ldr	r0, [r7, #4]
    36da:	f7ff f8d3 	bl	2884 <is_char>
    36de:	4603      	mov	r3, r0
    36e0:	f083 0301 	eor.w	r3, r3, #1
    36e4:	b2db      	uxtb	r3, r3
    36e6:	2b00      	cmp	r3, #0
    36e8:	d1de      	bne.n	36a8 <mp_lexer_to_next+0x432>
        next_char(lex);
    36ea:	6878      	ldr	r0, [r7, #4]
    36ec:	f7ff fa75 	bl	2bda <next_char>
        if (*t == 0) {
    36f0:	6a3b      	ldr	r3, [r7, #32]
    36f2:	781b      	ldrb	r3, [r3, #0]
    36f4:	2b00      	cmp	r3, #0
    36f6:	d103      	bne.n	3700 <mp_lexer_to_next+0x48a>
            lex->tok_kind = MP_TOKEN_INVALID;
    36f8:	687b      	ldr	r3, [r7, #4]
    36fa:	2201      	movs	r2, #1
    36fc:	641a      	str	r2, [r3, #64]	; 0x40
}
    36fe:	e095      	b.n	382c <mp_lexer_to_next+0x5b6>
        } else if (*t == '!') {
    3700:	6a3b      	ldr	r3, [r7, #32]
    3702:	781b      	ldrb	r3, [r3, #0]
    3704:	2b21      	cmp	r3, #33	; 0x21
    3706:	d111      	bne.n	372c <mp_lexer_to_next+0x4b6>
            if (is_char(lex, '=')) {
    3708:	213d      	movs	r1, #61	; 0x3d
    370a:	6878      	ldr	r0, [r7, #4]
    370c:	f7ff f8ba 	bl	2884 <is_char>
    3710:	4603      	mov	r3, r0
    3712:	2b00      	cmp	r3, #0
    3714:	d006      	beq.n	3724 <mp_lexer_to_next+0x4ae>
                next_char(lex);
    3716:	6878      	ldr	r0, [r7, #4]
    3718:	f7ff fa5f 	bl	2bda <next_char>
                lex->tok_kind = MP_TOKEN_OP_NOT_EQUAL;
    371c:	687b      	ldr	r3, [r7, #4]
    371e:	2241      	movs	r2, #65	; 0x41
    3720:	641a      	str	r2, [r3, #64]	; 0x40
}
    3722:	e083      	b.n	382c <mp_lexer_to_next+0x5b6>
                lex->tok_kind = MP_TOKEN_INVALID;
    3724:	687b      	ldr	r3, [r7, #4]
    3726:	2201      	movs	r2, #1
    3728:	641a      	str	r2, [r3, #64]	; 0x40
}
    372a:	e07f      	b.n	382c <mp_lexer_to_next+0x5b6>
        } else if (*t == '.') {
    372c:	6a3b      	ldr	r3, [r7, #32]
    372e:	781b      	ldrb	r3, [r3, #0]
    3730:	2b2e      	cmp	r3, #46	; 0x2e
    3732:	d115      	bne.n	3760 <mp_lexer_to_next+0x4ea>
            if (is_char_and(lex, '.', '.')) {
    3734:	222e      	movs	r2, #46	; 0x2e
    3736:	212e      	movs	r1, #46	; 0x2e
    3738:	6878      	ldr	r0, [r7, #4]
    373a:	f7ff f94d 	bl	29d8 <is_char_and>
    373e:	4603      	mov	r3, r0
    3740:	2b00      	cmp	r3, #0
    3742:	d009      	beq.n	3758 <mp_lexer_to_next+0x4e2>
                next_char(lex);
    3744:	6878      	ldr	r0, [r7, #4]
    3746:	f7ff fa48 	bl	2bda <next_char>
                next_char(lex);
    374a:	6878      	ldr	r0, [r7, #4]
    374c:	f7ff fa45 	bl	2bda <next_char>
                lex->tok_kind = MP_TOKEN_ELLIPSIS;
    3750:	687b      	ldr	r3, [r7, #4]
    3752:	220c      	movs	r2, #12
    3754:	641a      	str	r2, [r3, #64]	; 0x40
}
    3756:	e069      	b.n	382c <mp_lexer_to_next+0x5b6>
                lex->tok_kind = MP_TOKEN_DEL_PERIOD;
    3758:	687b      	ldr	r3, [r7, #4]
    375a:	224a      	movs	r2, #74	; 0x4a
    375c:	641a      	str	r2, [r3, #64]	; 0x40
}
    375e:	e065      	b.n	382c <mp_lexer_to_next+0x5b6>
            t += 1;
    3760:	6a3b      	ldr	r3, [r7, #32]
    3762:	3301      	adds	r3, #1
    3764:	623b      	str	r3, [r7, #32]
            size_t t_index = tok_enc_index;
    3766:	69fb      	ldr	r3, [r7, #28]
    3768:	61bb      	str	r3, [r7, #24]
            while (*t == 'c' || *t == 'e') {
    376a:	e023      	b.n	37b4 <mp_lexer_to_next+0x53e>
    376c:	00021360 	.word	0x00021360
    3770:	20001248 	.word	0x20001248
    3774:	000211fc 	.word	0x000211fc
                t_index += 1;
    3778:	69bb      	ldr	r3, [r7, #24]
    377a:	3301      	adds	r3, #1
    377c:	61bb      	str	r3, [r7, #24]
                if (is_char(lex, t[1])) {
    377e:	6a3b      	ldr	r3, [r7, #32]
    3780:	3301      	adds	r3, #1
    3782:	781b      	ldrb	r3, [r3, #0]
    3784:	4619      	mov	r1, r3
    3786:	6878      	ldr	r0, [r7, #4]
    3788:	f7ff f87c 	bl	2884 <is_char>
    378c:	4603      	mov	r3, r0
    378e:	2b00      	cmp	r3, #0
    3790:	d009      	beq.n	37a6 <mp_lexer_to_next+0x530>
                    next_char(lex);
    3792:	6878      	ldr	r0, [r7, #4]
    3794:	f7ff fa21 	bl	2bda <next_char>
                    tok_enc_index = t_index;
    3798:	69bb      	ldr	r3, [r7, #24]
    379a:	61fb      	str	r3, [r7, #28]
                    if (*t == 'e') {
    379c:	6a3b      	ldr	r3, [r7, #32]
    379e:	781b      	ldrb	r3, [r3, #0]
    37a0:	2b65      	cmp	r3, #101	; 0x65
    37a2:	d104      	bne.n	37ae <mp_lexer_to_next+0x538>
                        break;
    37a4:	e010      	b.n	37c8 <mp_lexer_to_next+0x552>
                } else if (*t == 'c') {
    37a6:	6a3b      	ldr	r3, [r7, #32]
    37a8:	781b      	ldrb	r3, [r3, #0]
    37aa:	2b63      	cmp	r3, #99	; 0x63
    37ac:	d00b      	beq.n	37c6 <mp_lexer_to_next+0x550>
                t += 2;
    37ae:	6a3b      	ldr	r3, [r7, #32]
    37b0:	3302      	adds	r3, #2
    37b2:	623b      	str	r3, [r7, #32]
            while (*t == 'c' || *t == 'e') {
    37b4:	6a3b      	ldr	r3, [r7, #32]
    37b6:	781b      	ldrb	r3, [r3, #0]
    37b8:	2b63      	cmp	r3, #99	; 0x63
    37ba:	d0dd      	beq.n	3778 <mp_lexer_to_next+0x502>
    37bc:	6a3b      	ldr	r3, [r7, #32]
    37be:	781b      	ldrb	r3, [r3, #0]
    37c0:	2b65      	cmp	r3, #101	; 0x65
    37c2:	d0d9      	beq.n	3778 <mp_lexer_to_next+0x502>
    37c4:	e000      	b.n	37c8 <mp_lexer_to_next+0x552>
                    break;
    37c6:	bf00      	nop
            lex->tok_kind = tok_enc_kind[tok_enc_index];
    37c8:	4a1a      	ldr	r2, [pc, #104]	; (3834 <mp_lexer_to_next+0x5be>)
    37ca:	69fb      	ldr	r3, [r7, #28]
    37cc:	4413      	add	r3, r2
    37ce:	781b      	ldrb	r3, [r3, #0]
    37d0:	461a      	mov	r2, r3
    37d2:	687b      	ldr	r3, [r7, #4]
    37d4:	641a      	str	r2, [r3, #64]	; 0x40
            if (lex->tok_kind == MP_TOKEN_DEL_PAREN_OPEN || lex->tok_kind == MP_TOKEN_DEL_BRACKET_OPEN || lex->tok_kind == MP_TOKEN_DEL_BRACE_OPEN) {
    37d6:	687b      	ldr	r3, [r7, #4]
    37d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    37da:	2b42      	cmp	r3, #66	; 0x42
    37dc:	d007      	beq.n	37ee <mp_lexer_to_next+0x578>
    37de:	687b      	ldr	r3, [r7, #4]
    37e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    37e2:	2b44      	cmp	r3, #68	; 0x44
    37e4:	d003      	beq.n	37ee <mp_lexer_to_next+0x578>
    37e6:	687b      	ldr	r3, [r7, #4]
    37e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    37ea:	2b46      	cmp	r3, #70	; 0x46
    37ec:	d105      	bne.n	37fa <mp_lexer_to_next+0x584>
                lex->nested_bracket_level += 1;
    37ee:	687b      	ldr	r3, [r7, #4]
    37f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    37f2:	1c5a      	adds	r2, r3, #1
    37f4:	687b      	ldr	r3, [r7, #4]
    37f6:	629a      	str	r2, [r3, #40]	; 0x28
    37f8:	e018      	b.n	382c <mp_lexer_to_next+0x5b6>
            } else if (lex->tok_kind == MP_TOKEN_DEL_PAREN_CLOSE || lex->tok_kind == MP_TOKEN_DEL_BRACKET_CLOSE || lex->tok_kind == MP_TOKEN_DEL_BRACE_CLOSE) {
    37fa:	687b      	ldr	r3, [r7, #4]
    37fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    37fe:	2b43      	cmp	r3, #67	; 0x43
    3800:	d007      	beq.n	3812 <mp_lexer_to_next+0x59c>
    3802:	687b      	ldr	r3, [r7, #4]
    3804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    3806:	2b45      	cmp	r3, #69	; 0x45
    3808:	d003      	beq.n	3812 <mp_lexer_to_next+0x59c>
    380a:	687b      	ldr	r3, [r7, #4]
    380c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    380e:	2b47      	cmp	r3, #71	; 0x47
    3810:	d10c      	bne.n	382c <mp_lexer_to_next+0x5b6>
                lex->nested_bracket_level -= 1;
    3812:	687b      	ldr	r3, [r7, #4]
    3814:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3816:	1e5a      	subs	r2, r3, #1
    3818:	687b      	ldr	r3, [r7, #4]
    381a:	629a      	str	r2, [r3, #40]	; 0x28
}
    381c:	e006      	b.n	382c <mp_lexer_to_next+0x5b6>
    } else if (had_physical_newline && lex->nested_bracket_level == 0) {
    381e:	bf00      	nop
    3820:	e004      	b.n	382c <mp_lexer_to_next+0x5b6>
                break;
    3822:	bf00      	nop
    3824:	e002      	b.n	382c <mp_lexer_to_next+0x5b6>
                break;
    3826:	bf00      	nop
    3828:	e000      	b.n	382c <mp_lexer_to_next+0x5b6>
                break;
    382a:	bf00      	nop
}
    382c:	bf00      	nop
    382e:	3738      	adds	r7, #56	; 0x38
    3830:	46bd      	mov	sp, r7
    3832:	bd80      	pop	{r7, pc}
    3834:	00021244 	.word	0x00021244

00003838 <mp_lexer_new>:

mp_lexer_t *mp_lexer_new(qstr src_name, mp_reader_t reader) {
    3838:	b580      	push	{r7, lr}
    383a:	b086      	sub	sp, #24
    383c:	af00      	add	r7, sp, #0
    383e:	60f8      	str	r0, [r7, #12]
    3840:	4638      	mov	r0, r7
    3842:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    mp_lexer_t *lex = m_new_obj(mp_lexer_t);
    3846:	2054      	movs	r0, #84	; 0x54
    3848:	f7fc fd68 	bl	31c <m_malloc>
    384c:	6178      	str	r0, [r7, #20]

    lex->source_name = src_name;
    384e:	697b      	ldr	r3, [r7, #20]
    3850:	68fa      	ldr	r2, [r7, #12]
    3852:	601a      	str	r2, [r3, #0]
    lex->reader = reader;
    3854:	697b      	ldr	r3, [r7, #20]
    3856:	3304      	adds	r3, #4
    3858:	463a      	mov	r2, r7
    385a:	ca07      	ldmia	r2, {r0, r1, r2}
    385c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    lex->line = 1;
    3860:	697b      	ldr	r3, [r7, #20]
    3862:	2201      	movs	r2, #1
    3864:	61da      	str	r2, [r3, #28]
    lex->column = (size_t)-2; // account for 3 dummy bytes
    3866:	697b      	ldr	r3, [r7, #20]
    3868:	f06f 0201 	mvn.w	r2, #1
    386c:	621a      	str	r2, [r3, #32]
    lex->emit_dent = 0;
    386e:	697b      	ldr	r3, [r7, #20]
    3870:	2200      	movs	r2, #0
    3872:	625a      	str	r2, [r3, #36]	; 0x24
    lex->nested_bracket_level = 0;
    3874:	697b      	ldr	r3, [r7, #20]
    3876:	2200      	movs	r2, #0
    3878:	629a      	str	r2, [r3, #40]	; 0x28
    lex->alloc_indent_level = MICROPY_ALLOC_LEXER_INDENT_INIT;
    387a:	697b      	ldr	r3, [r7, #20]
    387c:	220a      	movs	r2, #10
    387e:	62da      	str	r2, [r3, #44]	; 0x2c
    lex->num_indent_level = 1;
    3880:	697b      	ldr	r3, [r7, #20]
    3882:	2201      	movs	r2, #1
    3884:	631a      	str	r2, [r3, #48]	; 0x30
    lex->indent_level = m_new(uint16_t, lex->alloc_indent_level);
    3886:	697b      	ldr	r3, [r7, #20]
    3888:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    388a:	005b      	lsls	r3, r3, #1
    388c:	4618      	mov	r0, r3
    388e:	f7fc fd45 	bl	31c <m_malloc>
    3892:	4602      	mov	r2, r0
    3894:	697b      	ldr	r3, [r7, #20]
    3896:	635a      	str	r2, [r3, #52]	; 0x34
    vstr_init(&lex->vstr, 32);
    3898:	697b      	ldr	r3, [r7, #20]
    389a:	3344      	adds	r3, #68	; 0x44
    389c:	2120      	movs	r1, #32
    389e:	4618      	mov	r0, r3
    38a0:	f7fd fe1c 	bl	14dc <vstr_init>

    // store sentinel for first indentation level
    lex->indent_level[0] = 0;
    38a4:	697b      	ldr	r3, [r7, #20]
    38a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    38a8:	2200      	movs	r2, #0
    38aa:	801a      	strh	r2, [r3, #0]

    // load lexer with start of file, advancing lex->column to 1
    // start with dummy bytes and use next_char() for proper EOL/EOF handling
    lex->chr0 = lex->chr1 = lex->chr2 = 0;
    38ac:	697b      	ldr	r3, [r7, #20]
    38ae:	2200      	movs	r2, #0
    38b0:	619a      	str	r2, [r3, #24]
    38b2:	697b      	ldr	r3, [r7, #20]
    38b4:	699a      	ldr	r2, [r3, #24]
    38b6:	697b      	ldr	r3, [r7, #20]
    38b8:	615a      	str	r2, [r3, #20]
    38ba:	697b      	ldr	r3, [r7, #20]
    38bc:	695a      	ldr	r2, [r3, #20]
    38be:	697b      	ldr	r3, [r7, #20]
    38c0:	611a      	str	r2, [r3, #16]
    next_char(lex);
    38c2:	6978      	ldr	r0, [r7, #20]
    38c4:	f7ff f989 	bl	2bda <next_char>
    next_char(lex);
    38c8:	6978      	ldr	r0, [r7, #20]
    38ca:	f7ff f986 	bl	2bda <next_char>
    next_char(lex);
    38ce:	6978      	ldr	r0, [r7, #20]
    38d0:	f7ff f983 	bl	2bda <next_char>

    // preload first token
    mp_lexer_to_next(lex);
    38d4:	6978      	ldr	r0, [r7, #20]
    38d6:	f7ff fcce 	bl	3276 <mp_lexer_to_next>

    // Check that the first token is in the first column.  If it's not then we
    // convert the token kind to INDENT so that the parser gives a syntax error.
    if (lex->tok_column != 1) {
    38da:	697b      	ldr	r3, [r7, #20]
    38dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    38de:	2b01      	cmp	r3, #1
    38e0:	d002      	beq.n	38e8 <mp_lexer_new+0xb0>
        lex->tok_kind = MP_TOKEN_INDENT;
    38e2:	697b      	ldr	r3, [r7, #20]
    38e4:	2205      	movs	r2, #5
    38e6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    return lex;
    38e8:	697b      	ldr	r3, [r7, #20]
}
    38ea:	4618      	mov	r0, r3
    38ec:	3718      	adds	r7, #24
    38ee:	46bd      	mov	sp, r7
    38f0:	bd80      	pop	{r7, pc}

000038f2 <mp_lexer_new_from_str_len>:

mp_lexer_t *mp_lexer_new_from_str_len(qstr src_name, const char *str, size_t len, size_t free_len) {
    38f2:	b580      	push	{r7, lr}
    38f4:	b088      	sub	sp, #32
    38f6:	af00      	add	r7, sp, #0
    38f8:	60f8      	str	r0, [r7, #12]
    38fa:	60b9      	str	r1, [r7, #8]
    38fc:	607a      	str	r2, [r7, #4]
    38fe:	603b      	str	r3, [r7, #0]
    mp_reader_t reader;
    mp_reader_new_mem(&reader, (const byte*)str, len, free_len);
    3900:	f107 0014 	add.w	r0, r7, #20
    3904:	683b      	ldr	r3, [r7, #0]
    3906:	687a      	ldr	r2, [r7, #4]
    3908:	68b9      	ldr	r1, [r7, #8]
    390a:	f7fe ff60 	bl	27ce <mp_reader_new_mem>
    return mp_lexer_new(src_name, reader);
    390e:	f107 0314 	add.w	r3, r7, #20
    3912:	cb0e      	ldmia	r3, {r1, r2, r3}
    3914:	68f8      	ldr	r0, [r7, #12]
    3916:	f7ff ff8f 	bl	3838 <mp_lexer_new>
    391a:	4603      	mov	r3, r0
}
    391c:	4618      	mov	r0, r3
    391e:	3720      	adds	r7, #32
    3920:	46bd      	mov	sp, r7
    3922:	bd80      	pop	{r7, pc}

00003924 <mp_lexer_free>:

#endif

#endif

void mp_lexer_free(mp_lexer_t *lex) {
    3924:	b580      	push	{r7, lr}
    3926:	b082      	sub	sp, #8
    3928:	af00      	add	r7, sp, #0
    392a:	6078      	str	r0, [r7, #4]
    if (lex) {
    392c:	687b      	ldr	r3, [r7, #4]
    392e:	2b00      	cmp	r3, #0
    3930:	d012      	beq.n	3958 <mp_lexer_free+0x34>
        lex->reader.close(lex->reader.data);
    3932:	687b      	ldr	r3, [r7, #4]
    3934:	68db      	ldr	r3, [r3, #12]
    3936:	687a      	ldr	r2, [r7, #4]
    3938:	6852      	ldr	r2, [r2, #4]
    393a:	4610      	mov	r0, r2
    393c:	4798      	blx	r3
        vstr_clear(&lex->vstr);
    393e:	687b      	ldr	r3, [r7, #4]
    3940:	3344      	adds	r3, #68	; 0x44
    3942:	4618      	mov	r0, r3
    3944:	f7fd fe2e 	bl	15a4 <vstr_clear>
        m_del(uint16_t, lex->indent_level, lex->alloc_indent_level);
    3948:	687b      	ldr	r3, [r7, #4]
    394a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    394c:	4618      	mov	r0, r3
    394e:	f7fc fd63 	bl	418 <m_free>
        m_del_obj(mp_lexer_t, lex);
    3952:	6878      	ldr	r0, [r7, #4]
    3954:	f7fc fd60 	bl	418 <m_free>
    }
}
    3958:	bf00      	nop
    395a:	3708      	adds	r7, #8
    395c:	46bd      	mov	sp, r7
    395e:	bd80      	pop	{r7, pc}

00003960 <MP_OBJ_IS_SMALL_INT>:
    { return ((((mp_int_t)(o)) & 1) != 0); }
    3960:	b480      	push	{r7}
    3962:	b083      	sub	sp, #12
    3964:	af00      	add	r7, sp, #0
    3966:	6078      	str	r0, [r7, #4]
    3968:	687b      	ldr	r3, [r7, #4]
    396a:	f003 0301 	and.w	r3, r3, #1
    396e:	2b00      	cmp	r3, #0
    3970:	bf14      	ite	ne
    3972:	2301      	movne	r3, #1
    3974:	2300      	moveq	r3, #0
    3976:	b2db      	uxtb	r3, r3
    3978:	4618      	mov	r0, r3
    397a:	370c      	adds	r7, #12
    397c:	46bd      	mov	sp, r7
    397e:	f85d 7b04 	ldr.w	r7, [sp], #4
    3982:	4770      	bx	lr

00003984 <MP_OBJ_IS_OBJ>:
    { return ((((mp_int_t)(o)) & 3) == 0); }
    3984:	b480      	push	{r7}
    3986:	b083      	sub	sp, #12
    3988:	af00      	add	r7, sp, #0
    398a:	6078      	str	r0, [r7, #4]
    398c:	687b      	ldr	r3, [r7, #4]
    398e:	f003 0303 	and.w	r3, r3, #3
    3992:	2b00      	cmp	r3, #0
    3994:	bf0c      	ite	eq
    3996:	2301      	moveq	r3, #1
    3998:	2300      	movne	r3, #0
    399a:	b2db      	uxtb	r3, r3
    399c:	4618      	mov	r0, r3
    399e:	370c      	adds	r7, #12
    39a0:	46bd      	mov	sp, r7
    39a2:	f85d 7b04 	ldr.w	r7, [sp], #4
    39a6:	4770      	bx	lr

000039a8 <mp_parse_node_new_small_int>:
#define MP_PARSE_NODE_LEAF_ARG(pn) (((uintptr_t)(pn)) >> 4)
#define MP_PARSE_NODE_LEAF_SMALL_INT(pn) (((mp_int_t)(intptr_t)(pn)) >> 1)
#define MP_PARSE_NODE_STRUCT_KIND(pns) ((pns)->kind_num_nodes & 0xff)
#define MP_PARSE_NODE_STRUCT_NUM_NODES(pns) ((pns)->kind_num_nodes >> 8)

static inline mp_parse_node_t mp_parse_node_new_small_int(mp_int_t val) {
    39a8:	b480      	push	{r7}
    39aa:	b083      	sub	sp, #12
    39ac:	af00      	add	r7, sp, #0
    39ae:	6078      	str	r0, [r7, #4]
    return (mp_parse_node_t)(MP_PARSE_NODE_SMALL_INT | ((mp_uint_t)val << 1));
    39b0:	687b      	ldr	r3, [r7, #4]
    39b2:	005b      	lsls	r3, r3, #1
    39b4:	f043 0301 	orr.w	r3, r3, #1
}
    39b8:	4618      	mov	r0, r3
    39ba:	370c      	adds	r7, #12
    39bc:	46bd      	mov	sp, r7
    39be:	f85d 7b04 	ldr.w	r7, [sp], #4
    39c2:	4770      	bx	lr

000039c4 <mp_parse_node_new_leaf>:
static inline mp_parse_node_t mp_parse_node_new_leaf(size_t kind, mp_int_t arg) {
    39c4:	b480      	push	{r7}
    39c6:	b083      	sub	sp, #12
    39c8:	af00      	add	r7, sp, #0
    39ca:	6078      	str	r0, [r7, #4]
    39cc:	6039      	str	r1, [r7, #0]
    return (mp_parse_node_t)(kind | ((mp_uint_t)arg << 4));
    39ce:	683b      	ldr	r3, [r7, #0]
    39d0:	011a      	lsls	r2, r3, #4
    39d2:	687b      	ldr	r3, [r7, #4]
    39d4:	4313      	orrs	r3, r2
}
    39d6:	4618      	mov	r0, r3
    39d8:	370c      	adds	r7, #12
    39da:	46bd      	mov	sp, r7
    39dc:	f85d 7b04 	ldr.w	r7, [sp], #4
    39e0:	4770      	bx	lr

000039e2 <get_rule_arg>:
    #if MICROPY_COMP_CONST
    mp_map_t consts;
    #endif
} parser_t;

STATIC const uint16_t *get_rule_arg(uint8_t r_id) {
    39e2:	b480      	push	{r7}
    39e4:	b085      	sub	sp, #20
    39e6:	af00      	add	r7, sp, #0
    39e8:	4603      	mov	r3, r0
    39ea:	71fb      	strb	r3, [r7, #7]
    size_t off = rule_arg_offset_table[r_id];
    39ec:	79fb      	ldrb	r3, [r7, #7]
    39ee:	4a0a      	ldr	r2, [pc, #40]	; (3a18 <get_rule_arg+0x36>)
    39f0:	5cd3      	ldrb	r3, [r2, r3]
    39f2:	60fb      	str	r3, [r7, #12]
    if (r_id >= FIRST_RULE_WITH_OFFSET_ABOVE_255) {
    39f4:	79fb      	ldrb	r3, [r7, #7]
    39f6:	2266      	movs	r2, #102	; 0x66
    39f8:	4293      	cmp	r3, r2
    39fa:	d303      	bcc.n	3a04 <get_rule_arg+0x22>
        off |= 0x100;
    39fc:	68fb      	ldr	r3, [r7, #12]
    39fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    3a02:	60fb      	str	r3, [r7, #12]
    }
    return &rule_arg_combined_table[off];
    3a04:	68fb      	ldr	r3, [r7, #12]
    3a06:	005b      	lsls	r3, r3, #1
    3a08:	4a04      	ldr	r2, [pc, #16]	; (3a1c <get_rule_arg+0x3a>)
    3a0a:	4413      	add	r3, r2
}
    3a0c:	4618      	mov	r0, r3
    3a0e:	3714      	adds	r7, #20
    3a10:	46bd      	mov	sp, r7
    3a12:	f85d 7b04 	ldr.w	r7, [sp], #4
    3a16:	4770      	bx	lr
    3a18:	000217e8 	.word	0x000217e8
    3a1c:	000214a4 	.word	0x000214a4

00003a20 <parser_alloc>:

STATIC void *parser_alloc(parser_t *parser, size_t num_bytes) {
    3a20:	b580      	push	{r7, lr}
    3a22:	b086      	sub	sp, #24
    3a24:	af00      	add	r7, sp, #0
    3a26:	6078      	str	r0, [r7, #4]
    3a28:	6039      	str	r1, [r7, #0]
    // use a custom memory allocator to store parse nodes sequentially in large chunks

    mp_parse_chunk_t *chunk = parser->cur_chunk;
    3a2a:	687b      	ldr	r3, [r7, #4]
    3a2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    3a2e:	617b      	str	r3, [r7, #20]

    if (chunk != NULL && chunk->union_.used + num_bytes > chunk->alloc) {
    3a30:	697b      	ldr	r3, [r7, #20]
    3a32:	2b00      	cmp	r3, #0
    3a34:	d031      	beq.n	3a9a <parser_alloc+0x7a>
    3a36:	697b      	ldr	r3, [r7, #20]
    3a38:	685a      	ldr	r2, [r3, #4]
    3a3a:	683b      	ldr	r3, [r7, #0]
    3a3c:	441a      	add	r2, r3
    3a3e:	697b      	ldr	r3, [r7, #20]
    3a40:	681b      	ldr	r3, [r3, #0]
    3a42:	429a      	cmp	r2, r3
    3a44:	d929      	bls.n	3a9a <parser_alloc+0x7a>
        // not enough room at end of previously allocated chunk so try to grow
        mp_parse_chunk_t *new_data = (mp_parse_chunk_t*)m_renew_maybe(byte, chunk,
    3a46:	697b      	ldr	r3, [r7, #20]
    3a48:	681a      	ldr	r2, [r3, #0]
    3a4a:	683b      	ldr	r3, [r7, #0]
    3a4c:	4413      	add	r3, r2
    3a4e:	3308      	adds	r3, #8
    3a50:	2200      	movs	r2, #0
    3a52:	4619      	mov	r1, r3
    3a54:	6978      	ldr	r0, [r7, #20]
    3a56:	f7fc fcc3 	bl	3e0 <m_realloc_maybe>
    3a5a:	60f8      	str	r0, [r7, #12]
            sizeof(mp_parse_chunk_t) + chunk->alloc,
            sizeof(mp_parse_chunk_t) + chunk->alloc + num_bytes, false);
        if (new_data == NULL) {
    3a5c:	68fb      	ldr	r3, [r7, #12]
    3a5e:	2b00      	cmp	r3, #0
    3a60:	d115      	bne.n	3a8e <parser_alloc+0x6e>
            // could not grow existing memory; shrink it to fit previous
            (void)m_renew_maybe(byte, chunk, sizeof(mp_parse_chunk_t) + chunk->alloc,
    3a62:	697b      	ldr	r3, [r7, #20]
    3a64:	685b      	ldr	r3, [r3, #4]
    3a66:	3308      	adds	r3, #8
    3a68:	2200      	movs	r2, #0
    3a6a:	4619      	mov	r1, r3
    3a6c:	6978      	ldr	r0, [r7, #20]
    3a6e:	f7fc fcb7 	bl	3e0 <m_realloc_maybe>
                sizeof(mp_parse_chunk_t) + chunk->union_.used, false);
            chunk->alloc = chunk->union_.used;
    3a72:	697b      	ldr	r3, [r7, #20]
    3a74:	685a      	ldr	r2, [r3, #4]
    3a76:	697b      	ldr	r3, [r7, #20]
    3a78:	601a      	str	r2, [r3, #0]
            chunk->union_.next = parser->tree.chunk;
    3a7a:	687b      	ldr	r3, [r7, #4]
    3a7c:	6a1a      	ldr	r2, [r3, #32]
    3a7e:	697b      	ldr	r3, [r7, #20]
    3a80:	605a      	str	r2, [r3, #4]
            parser->tree.chunk = chunk;
    3a82:	687b      	ldr	r3, [r7, #4]
    3a84:	697a      	ldr	r2, [r7, #20]
    3a86:	621a      	str	r2, [r3, #32]
            chunk = NULL;
    3a88:	2300      	movs	r3, #0
    3a8a:	617b      	str	r3, [r7, #20]
    3a8c:	e005      	b.n	3a9a <parser_alloc+0x7a>
        } else {
            // could grow existing memory
            chunk->alloc += num_bytes;
    3a8e:	697b      	ldr	r3, [r7, #20]
    3a90:	681a      	ldr	r2, [r3, #0]
    3a92:	683b      	ldr	r3, [r7, #0]
    3a94:	441a      	add	r2, r3
    3a96:	697b      	ldr	r3, [r7, #20]
    3a98:	601a      	str	r2, [r3, #0]
        }
    }

    if (chunk == NULL) {
    3a9a:	697b      	ldr	r3, [r7, #20]
    3a9c:	2b00      	cmp	r3, #0
    3a9e:	d116      	bne.n	3ace <parser_alloc+0xae>
        // no previous chunk, allocate a new chunk
        size_t alloc = MICROPY_ALLOC_PARSE_CHUNK_INIT;
    3aa0:	2310      	movs	r3, #16
    3aa2:	613b      	str	r3, [r7, #16]
        if (alloc < num_bytes) {
    3aa4:	693a      	ldr	r2, [r7, #16]
    3aa6:	683b      	ldr	r3, [r7, #0]
    3aa8:	429a      	cmp	r2, r3
    3aaa:	d201      	bcs.n	3ab0 <parser_alloc+0x90>
            alloc = num_bytes;
    3aac:	683b      	ldr	r3, [r7, #0]
    3aae:	613b      	str	r3, [r7, #16]
        }
        chunk = (mp_parse_chunk_t*)m_new(byte, sizeof(mp_parse_chunk_t) + alloc);
    3ab0:	693b      	ldr	r3, [r7, #16]
    3ab2:	3308      	adds	r3, #8
    3ab4:	4618      	mov	r0, r3
    3ab6:	f7fc fc31 	bl	31c <m_malloc>
    3aba:	6178      	str	r0, [r7, #20]
        chunk->alloc = alloc;
    3abc:	697b      	ldr	r3, [r7, #20]
    3abe:	693a      	ldr	r2, [r7, #16]
    3ac0:	601a      	str	r2, [r3, #0]
        chunk->union_.used = 0;
    3ac2:	697b      	ldr	r3, [r7, #20]
    3ac4:	2200      	movs	r2, #0
    3ac6:	605a      	str	r2, [r3, #4]
        parser->cur_chunk = chunk;
    3ac8:	687b      	ldr	r3, [r7, #4]
    3aca:	697a      	ldr	r2, [r7, #20]
    3acc:	625a      	str	r2, [r3, #36]	; 0x24
    }

    byte *ret = chunk->data + chunk->union_.used;
    3ace:	697b      	ldr	r3, [r7, #20]
    3ad0:	f103 0208 	add.w	r2, r3, #8
    3ad4:	697b      	ldr	r3, [r7, #20]
    3ad6:	685b      	ldr	r3, [r3, #4]
    3ad8:	4413      	add	r3, r2
    3ada:	60bb      	str	r3, [r7, #8]
    chunk->union_.used += num_bytes;
    3adc:	697b      	ldr	r3, [r7, #20]
    3ade:	685a      	ldr	r2, [r3, #4]
    3ae0:	683b      	ldr	r3, [r7, #0]
    3ae2:	441a      	add	r2, r3
    3ae4:	697b      	ldr	r3, [r7, #20]
    3ae6:	605a      	str	r2, [r3, #4]
    return ret;
    3ae8:	68bb      	ldr	r3, [r7, #8]
}
    3aea:	4618      	mov	r0, r3
    3aec:	3718      	adds	r7, #24
    3aee:	46bd      	mov	sp, r7
    3af0:	bd80      	pop	{r7, pc}

00003af2 <push_rule>:

STATIC void push_rule(parser_t *parser, size_t src_line, uint8_t rule_id, size_t arg_i) {
    3af2:	b580      	push	{r7, lr}
    3af4:	b086      	sub	sp, #24
    3af6:	af00      	add	r7, sp, #0
    3af8:	60f8      	str	r0, [r7, #12]
    3afa:	60b9      	str	r1, [r7, #8]
    3afc:	603b      	str	r3, [r7, #0]
    3afe:	4613      	mov	r3, r2
    3b00:	71fb      	strb	r3, [r7, #7]
    if (parser->rule_stack_top >= parser->rule_stack_alloc) {
    3b02:	68fb      	ldr	r3, [r7, #12]
    3b04:	685a      	ldr	r2, [r3, #4]
    3b06:	68fb      	ldr	r3, [r7, #12]
    3b08:	681b      	ldr	r3, [r3, #0]
    3b0a:	429a      	cmp	r2, r3
    3b0c:	d313      	bcc.n	3b36 <push_rule+0x44>
        rule_stack_t *rs = m_renew(rule_stack_t, parser->rule_stack, parser->rule_stack_alloc, parser->rule_stack_alloc + MICROPY_ALLOC_PARSE_RULE_INC);
    3b0e:	68fb      	ldr	r3, [r7, #12]
    3b10:	689a      	ldr	r2, [r3, #8]
    3b12:	68fb      	ldr	r3, [r7, #12]
    3b14:	681b      	ldr	r3, [r3, #0]
    3b16:	3310      	adds	r3, #16
    3b18:	00db      	lsls	r3, r3, #3
    3b1a:	4619      	mov	r1, r3
    3b1c:	4610      	mov	r0, r2
    3b1e:	f7fc fc3e 	bl	39e <m_realloc>
    3b22:	6178      	str	r0, [r7, #20]
        parser->rule_stack = rs;
    3b24:	68fb      	ldr	r3, [r7, #12]
    3b26:	697a      	ldr	r2, [r7, #20]
    3b28:	609a      	str	r2, [r3, #8]
        parser->rule_stack_alloc += MICROPY_ALLOC_PARSE_RULE_INC;
    3b2a:	68fb      	ldr	r3, [r7, #12]
    3b2c:	681b      	ldr	r3, [r3, #0]
    3b2e:	f103 0210 	add.w	r2, r3, #16
    3b32:	68fb      	ldr	r3, [r7, #12]
    3b34:	601a      	str	r2, [r3, #0]
    }
    rule_stack_t *rs = &parser->rule_stack[parser->rule_stack_top++];
    3b36:	68fb      	ldr	r3, [r7, #12]
    3b38:	689a      	ldr	r2, [r3, #8]
    3b3a:	68fb      	ldr	r3, [r7, #12]
    3b3c:	685b      	ldr	r3, [r3, #4]
    3b3e:	1c58      	adds	r0, r3, #1
    3b40:	68f9      	ldr	r1, [r7, #12]
    3b42:	6048      	str	r0, [r1, #4]
    3b44:	00db      	lsls	r3, r3, #3
    3b46:	4413      	add	r3, r2
    3b48:	613b      	str	r3, [r7, #16]
    rs->src_line = src_line;
    3b4a:	68bb      	ldr	r3, [r7, #8]
    3b4c:	f023 417f 	bic.w	r1, r3, #4278190080	; 0xff000000
    3b50:	693a      	ldr	r2, [r7, #16]
    3b52:	6813      	ldr	r3, [r2, #0]
    3b54:	f361 0317 	bfi	r3, r1, #0, #24
    3b58:	6013      	str	r3, [r2, #0]
    rs->rule_id = rule_id;
    3b5a:	693b      	ldr	r3, [r7, #16]
    3b5c:	79fa      	ldrb	r2, [r7, #7]
    3b5e:	70da      	strb	r2, [r3, #3]
    rs->arg_i = arg_i;
    3b60:	693b      	ldr	r3, [r7, #16]
    3b62:	683a      	ldr	r2, [r7, #0]
    3b64:	605a      	str	r2, [r3, #4]
}
    3b66:	bf00      	nop
    3b68:	3718      	adds	r7, #24
    3b6a:	46bd      	mov	sp, r7
    3b6c:	bd80      	pop	{r7, pc}

00003b6e <push_rule_from_arg>:

STATIC void push_rule_from_arg(parser_t *parser, size_t arg) {
    3b6e:	b580      	push	{r7, lr}
    3b70:	b084      	sub	sp, #16
    3b72:	af00      	add	r7, sp, #0
    3b74:	6078      	str	r0, [r7, #4]
    3b76:	6039      	str	r1, [r7, #0]
    assert((arg & RULE_ARG_KIND_MASK) == RULE_ARG_RULE || (arg & RULE_ARG_KIND_MASK) == RULE_ARG_OPT_RULE);
    3b78:	683b      	ldr	r3, [r7, #0]
    3b7a:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
    3b7e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
    3b82:	d00c      	beq.n	3b9e <push_rule_from_arg+0x30>
    3b84:	683b      	ldr	r3, [r7, #0]
    3b86:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
    3b8a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
    3b8e:	d006      	beq.n	3b9e <push_rule_from_arg+0x30>
    3b90:	4b0b      	ldr	r3, [pc, #44]	; (3bc0 <push_rule_from_arg+0x52>)
    3b92:	4a0c      	ldr	r2, [pc, #48]	; (3bc4 <push_rule_from_arg+0x56>)
    3b94:	f44f 7199 	mov.w	r1, #306	; 0x132
    3b98:	480b      	ldr	r0, [pc, #44]	; (3bc8 <push_rule_from_arg+0x5a>)
    3b9a:	f019 f9a1 	bl	1cee0 <__assert_func>
    size_t rule_id = arg & RULE_ARG_ARG_MASK;
    3b9e:	683b      	ldr	r3, [r7, #0]
    3ba0:	f3c3 030b 	ubfx	r3, r3, #0, #12
    3ba4:	60fb      	str	r3, [r7, #12]
    push_rule(parser, parser->lexer->tok_line, rule_id, 0);
    3ba6:	687b      	ldr	r3, [r7, #4]
    3ba8:	699b      	ldr	r3, [r3, #24]
    3baa:	6b99      	ldr	r1, [r3, #56]	; 0x38
    3bac:	68fb      	ldr	r3, [r7, #12]
    3bae:	b2da      	uxtb	r2, r3
    3bb0:	2300      	movs	r3, #0
    3bb2:	6878      	ldr	r0, [r7, #4]
    3bb4:	f7ff ff9d 	bl	3af2 <push_rule>
}
    3bb8:	bf00      	nop
    3bba:	3710      	adds	r7, #16
    3bbc:	46bd      	mov	sp, r7
    3bbe:	bd80      	pop	{r7, pc}
    3bc0:	00021890 	.word	0x00021890
    3bc4:	00021b10 	.word	0x00021b10
    3bc8:	000218f0 	.word	0x000218f0

00003bcc <pop_rule>:

STATIC uint8_t pop_rule(parser_t *parser, size_t *arg_i, size_t *src_line) {
    3bcc:	b480      	push	{r7}
    3bce:	b087      	sub	sp, #28
    3bd0:	af00      	add	r7, sp, #0
    3bd2:	60f8      	str	r0, [r7, #12]
    3bd4:	60b9      	str	r1, [r7, #8]
    3bd6:	607a      	str	r2, [r7, #4]
    parser->rule_stack_top -= 1;
    3bd8:	68fb      	ldr	r3, [r7, #12]
    3bda:	685b      	ldr	r3, [r3, #4]
    3bdc:	1e5a      	subs	r2, r3, #1
    3bde:	68fb      	ldr	r3, [r7, #12]
    3be0:	605a      	str	r2, [r3, #4]
    uint8_t rule_id = parser->rule_stack[parser->rule_stack_top].rule_id;
    3be2:	68fb      	ldr	r3, [r7, #12]
    3be4:	689a      	ldr	r2, [r3, #8]
    3be6:	68fb      	ldr	r3, [r7, #12]
    3be8:	685b      	ldr	r3, [r3, #4]
    3bea:	00db      	lsls	r3, r3, #3
    3bec:	4413      	add	r3, r2
    3bee:	78db      	ldrb	r3, [r3, #3]
    3bf0:	75fb      	strb	r3, [r7, #23]
    *arg_i = parser->rule_stack[parser->rule_stack_top].arg_i;
    3bf2:	68fb      	ldr	r3, [r7, #12]
    3bf4:	689a      	ldr	r2, [r3, #8]
    3bf6:	68fb      	ldr	r3, [r7, #12]
    3bf8:	685b      	ldr	r3, [r3, #4]
    3bfa:	00db      	lsls	r3, r3, #3
    3bfc:	4413      	add	r3, r2
    3bfe:	685a      	ldr	r2, [r3, #4]
    3c00:	68bb      	ldr	r3, [r7, #8]
    3c02:	601a      	str	r2, [r3, #0]
    *src_line = parser->rule_stack[parser->rule_stack_top].src_line;
    3c04:	68fb      	ldr	r3, [r7, #12]
    3c06:	689a      	ldr	r2, [r3, #8]
    3c08:	68fb      	ldr	r3, [r7, #12]
    3c0a:	685b      	ldr	r3, [r3, #4]
    3c0c:	00db      	lsls	r3, r3, #3
    3c0e:	4413      	add	r3, r2
    3c10:	681b      	ldr	r3, [r3, #0]
    3c12:	f3c3 0317 	ubfx	r3, r3, #0, #24
    3c16:	461a      	mov	r2, r3
    3c18:	687b      	ldr	r3, [r7, #4]
    3c1a:	601a      	str	r2, [r3, #0]
    return rule_id;
    3c1c:	7dfb      	ldrb	r3, [r7, #23]
}
    3c1e:	4618      	mov	r0, r3
    3c20:	371c      	adds	r7, #28
    3c22:	46bd      	mov	sp, r7
    3c24:	f85d 7b04 	ldr.w	r7, [sp], #4
    3c28:	4770      	bx	lr

00003c2a <mp_parse_node_is_const_false>:

bool mp_parse_node_is_const_false(mp_parse_node_t pn) {
    3c2a:	b480      	push	{r7}
    3c2c:	b083      	sub	sp, #12
    3c2e:	af00      	add	r7, sp, #0
    3c30:	6078      	str	r0, [r7, #4]
    return MP_PARSE_NODE_IS_TOKEN_KIND(pn, MP_TOKEN_KW_FALSE)
        || (MP_PARSE_NODE_IS_SMALL_INT(pn) && MP_PARSE_NODE_LEAF_SMALL_INT(pn) == 0);
    3c32:	687b      	ldr	r3, [r7, #4]
    3c34:	2bde      	cmp	r3, #222	; 0xde
    3c36:	d008      	beq.n	3c4a <mp_parse_node_is_const_false+0x20>
    3c38:	687b      	ldr	r3, [r7, #4]
    3c3a:	f003 0301 	and.w	r3, r3, #1
    3c3e:	2b00      	cmp	r3, #0
    3c40:	d005      	beq.n	3c4e <mp_parse_node_is_const_false+0x24>
    3c42:	687b      	ldr	r3, [r7, #4]
    3c44:	105b      	asrs	r3, r3, #1
    3c46:	2b00      	cmp	r3, #0
    3c48:	d101      	bne.n	3c4e <mp_parse_node_is_const_false+0x24>
    3c4a:	2301      	movs	r3, #1
    3c4c:	e000      	b.n	3c50 <mp_parse_node_is_const_false+0x26>
    3c4e:	2300      	movs	r3, #0
    3c50:	f003 0301 	and.w	r3, r3, #1
    3c54:	b2db      	uxtb	r3, r3
}
    3c56:	4618      	mov	r0, r3
    3c58:	370c      	adds	r7, #12
    3c5a:	46bd      	mov	sp, r7
    3c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
    3c60:	4770      	bx	lr

00003c62 <mp_parse_node_is_const_true>:

bool mp_parse_node_is_const_true(mp_parse_node_t pn) {
    3c62:	b480      	push	{r7}
    3c64:	b083      	sub	sp, #12
    3c66:	af00      	add	r7, sp, #0
    3c68:	6078      	str	r0, [r7, #4]
    return MP_PARSE_NODE_IS_TOKEN_KIND(pn, MP_TOKEN_KW_TRUE)
        || (MP_PARSE_NODE_IS_SMALL_INT(pn) && MP_PARSE_NODE_LEAF_SMALL_INT(pn) != 0);
    3c6a:	687b      	ldr	r3, [r7, #4]
    3c6c:	2bfe      	cmp	r3, #254	; 0xfe
    3c6e:	d008      	beq.n	3c82 <mp_parse_node_is_const_true+0x20>
    3c70:	687b      	ldr	r3, [r7, #4]
    3c72:	f003 0301 	and.w	r3, r3, #1
    3c76:	2b00      	cmp	r3, #0
    3c78:	d005      	beq.n	3c86 <mp_parse_node_is_const_true+0x24>
    3c7a:	687b      	ldr	r3, [r7, #4]
    3c7c:	105b      	asrs	r3, r3, #1
    3c7e:	2b00      	cmp	r3, #0
    3c80:	d001      	beq.n	3c86 <mp_parse_node_is_const_true+0x24>
    3c82:	2301      	movs	r3, #1
    3c84:	e000      	b.n	3c88 <mp_parse_node_is_const_true+0x26>
    3c86:	2300      	movs	r3, #0
    3c88:	f003 0301 	and.w	r3, r3, #1
    3c8c:	b2db      	uxtb	r3, r3
}
    3c8e:	4618      	mov	r0, r3
    3c90:	370c      	adds	r7, #12
    3c92:	46bd      	mov	sp, r7
    3c94:	f85d 7b04 	ldr.w	r7, [sp], #4
    3c98:	4770      	bx	lr

00003c9a <mp_parse_node_get_int_maybe>:

bool mp_parse_node_get_int_maybe(mp_parse_node_t pn, mp_obj_t *o) {
    3c9a:	b580      	push	{r7, lr}
    3c9c:	b084      	sub	sp, #16
    3c9e:	af00      	add	r7, sp, #0
    3ca0:	6078      	str	r0, [r7, #4]
    3ca2:	6039      	str	r1, [r7, #0]
    if (MP_PARSE_NODE_IS_SMALL_INT(pn)) {
    3ca4:	687b      	ldr	r3, [r7, #4]
    3ca6:	f003 0301 	and.w	r3, r3, #1
    3caa:	2b00      	cmp	r3, #0
    3cac:	d009      	beq.n	3cc2 <mp_parse_node_get_int_maybe+0x28>
        *o = MP_OBJ_NEW_SMALL_INT(MP_PARSE_NODE_LEAF_SMALL_INT(pn));
    3cae:	687b      	ldr	r3, [r7, #4]
    3cb0:	105b      	asrs	r3, r3, #1
    3cb2:	005b      	lsls	r3, r3, #1
    3cb4:	f043 0301 	orr.w	r3, r3, #1
    3cb8:	461a      	mov	r2, r3
    3cba:	683b      	ldr	r3, [r7, #0]
    3cbc:	601a      	str	r2, [r3, #0]
        return true;
    3cbe:	2301      	movs	r3, #1
    3cc0:	e031      	b.n	3d26 <mp_parse_node_get_int_maybe+0x8c>
    } else if (MP_PARSE_NODE_IS_STRUCT_KIND(pn, RULE_const_object)) {
    3cc2:	687b      	ldr	r3, [r7, #4]
    3cc4:	2b00      	cmp	r3, #0
    3cc6:	d02d      	beq.n	3d24 <mp_parse_node_get_int_maybe+0x8a>
    3cc8:	687b      	ldr	r3, [r7, #4]
    3cca:	f003 0303 	and.w	r3, r3, #3
    3cce:	2b00      	cmp	r3, #0
    3cd0:	d128      	bne.n	3d24 <mp_parse_node_get_int_maybe+0x8a>
    3cd2:	687b      	ldr	r3, [r7, #4]
    3cd4:	685b      	ldr	r3, [r3, #4]
    3cd6:	b2db      	uxtb	r3, r3
    3cd8:	2b35      	cmp	r3, #53	; 0x35
    3cda:	d123      	bne.n	3d24 <mp_parse_node_get_int_maybe+0x8a>
        mp_parse_node_struct_t *pns = (mp_parse_node_struct_t*)pn;
    3cdc:	687b      	ldr	r3, [r7, #4]
    3cde:	60fb      	str	r3, [r7, #12]
        #if MICROPY_OBJ_REPR == MICROPY_OBJ_REPR_D
        // nodes are 32-bit pointers, but need to extract 64-bit object
        *o = (uint64_t)pns->nodes[0] | ((uint64_t)pns->nodes[1] << 32);
        #else
        *o = (mp_obj_t)pns->nodes[0];
    3ce0:	68fb      	ldr	r3, [r7, #12]
    3ce2:	689b      	ldr	r3, [r3, #8]
    3ce4:	461a      	mov	r2, r3
    3ce6:	683b      	ldr	r3, [r7, #0]
    3ce8:	601a      	str	r2, [r3, #0]
        #endif
        return MP_OBJ_IS_INT(*o);
    3cea:	683b      	ldr	r3, [r7, #0]
    3cec:	681b      	ldr	r3, [r3, #0]
    3cee:	4618      	mov	r0, r3
    3cf0:	f7ff fe36 	bl	3960 <MP_OBJ_IS_SMALL_INT>
    3cf4:	4603      	mov	r3, r0
    3cf6:	2b00      	cmp	r3, #0
    3cf8:	d10d      	bne.n	3d16 <mp_parse_node_get_int_maybe+0x7c>
    3cfa:	683b      	ldr	r3, [r7, #0]
    3cfc:	681b      	ldr	r3, [r3, #0]
    3cfe:	4618      	mov	r0, r3
    3d00:	f7ff fe40 	bl	3984 <MP_OBJ_IS_OBJ>
    3d04:	4603      	mov	r3, r0
    3d06:	2b00      	cmp	r3, #0
    3d08:	d007      	beq.n	3d1a <mp_parse_node_get_int_maybe+0x80>
    3d0a:	683b      	ldr	r3, [r7, #0]
    3d0c:	681b      	ldr	r3, [r3, #0]
    3d0e:	681b      	ldr	r3, [r3, #0]
    3d10:	4a07      	ldr	r2, [pc, #28]	; (3d30 <mp_parse_node_get_int_maybe+0x96>)
    3d12:	4293      	cmp	r3, r2
    3d14:	d101      	bne.n	3d1a <mp_parse_node_get_int_maybe+0x80>
    3d16:	2301      	movs	r3, #1
    3d18:	e000      	b.n	3d1c <mp_parse_node_get_int_maybe+0x82>
    3d1a:	2300      	movs	r3, #0
    3d1c:	f003 0301 	and.w	r3, r3, #1
    3d20:	b2db      	uxtb	r3, r3
    3d22:	e000      	b.n	3d26 <mp_parse_node_get_int_maybe+0x8c>
    } else {
        return false;
    3d24:	2300      	movs	r3, #0
    }
}
    3d26:	4618      	mov	r0, r3
    3d28:	3710      	adds	r7, #16
    3d2a:	46bd      	mov	sp, r7
    3d2c:	bd80      	pop	{r7, pc}
    3d2e:	bf00      	nop
    3d30:	00024bd8 	.word	0x00024bd8

00003d34 <mp_parse_node_extract_list>:

int mp_parse_node_extract_list(mp_parse_node_t *pn, size_t pn_kind, mp_parse_node_t **nodes) {
    3d34:	b480      	push	{r7}
    3d36:	b087      	sub	sp, #28
    3d38:	af00      	add	r7, sp, #0
    3d3a:	60f8      	str	r0, [r7, #12]
    3d3c:	60b9      	str	r1, [r7, #8]
    3d3e:	607a      	str	r2, [r7, #4]
    if (MP_PARSE_NODE_IS_NULL(*pn)) {
    3d40:	68fb      	ldr	r3, [r7, #12]
    3d42:	681b      	ldr	r3, [r3, #0]
    3d44:	2b00      	cmp	r3, #0
    3d46:	d104      	bne.n	3d52 <mp_parse_node_extract_list+0x1e>
        *nodes = NULL;
    3d48:	687b      	ldr	r3, [r7, #4]
    3d4a:	2200      	movs	r2, #0
    3d4c:	601a      	str	r2, [r3, #0]
        return 0;
    3d4e:	2300      	movs	r3, #0
    3d50:	e020      	b.n	3d94 <mp_parse_node_extract_list+0x60>
    } else if (MP_PARSE_NODE_IS_LEAF(*pn)) {
    3d52:	68fb      	ldr	r3, [r7, #12]
    3d54:	681b      	ldr	r3, [r3, #0]
    3d56:	f003 0303 	and.w	r3, r3, #3
    3d5a:	2b00      	cmp	r3, #0
    3d5c:	d004      	beq.n	3d68 <mp_parse_node_extract_list+0x34>
        *nodes = pn;
    3d5e:	687b      	ldr	r3, [r7, #4]
    3d60:	68fa      	ldr	r2, [r7, #12]
    3d62:	601a      	str	r2, [r3, #0]
        return 1;
    3d64:	2301      	movs	r3, #1
    3d66:	e015      	b.n	3d94 <mp_parse_node_extract_list+0x60>
    } else {
        mp_parse_node_struct_t *pns = (mp_parse_node_struct_t*)(*pn);
    3d68:	68fb      	ldr	r3, [r7, #12]
    3d6a:	681b      	ldr	r3, [r3, #0]
    3d6c:	617b      	str	r3, [r7, #20]
        if (MP_PARSE_NODE_STRUCT_KIND(pns) != pn_kind) {
    3d6e:	697b      	ldr	r3, [r7, #20]
    3d70:	685b      	ldr	r3, [r3, #4]
    3d72:	b2da      	uxtb	r2, r3
    3d74:	68bb      	ldr	r3, [r7, #8]
    3d76:	429a      	cmp	r2, r3
    3d78:	d004      	beq.n	3d84 <mp_parse_node_extract_list+0x50>
            *nodes = pn;
    3d7a:	687b      	ldr	r3, [r7, #4]
    3d7c:	68fa      	ldr	r2, [r7, #12]
    3d7e:	601a      	str	r2, [r3, #0]
            return 1;
    3d80:	2301      	movs	r3, #1
    3d82:	e007      	b.n	3d94 <mp_parse_node_extract_list+0x60>
        } else {
            *nodes = pns->nodes;
    3d84:	697b      	ldr	r3, [r7, #20]
    3d86:	f103 0208 	add.w	r2, r3, #8
    3d8a:	687b      	ldr	r3, [r7, #4]
    3d8c:	601a      	str	r2, [r3, #0]
            return MP_PARSE_NODE_STRUCT_NUM_NODES(pns);
    3d8e:	697b      	ldr	r3, [r7, #20]
    3d90:	685b      	ldr	r3, [r3, #4]
    3d92:	0a1b      	lsrs	r3, r3, #8
        }
    }
}
    3d94:	4618      	mov	r0, r3
    3d96:	371c      	adds	r7, #28
    3d98:	46bd      	mov	sp, r7
    3d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
    3d9e:	4770      	bx	lr

00003da0 <mp_parse_node_print>:

#if MICROPY_DEBUG_PRINTERS
void mp_parse_node_print(mp_parse_node_t pn, size_t indent) {
    3da0:	b580      	push	{r7, lr}
    3da2:	b088      	sub	sp, #32
    3da4:	af00      	add	r7, sp, #0
    3da6:	6078      	str	r0, [r7, #4]
    3da8:	6039      	str	r1, [r7, #0]
    if (MP_PARSE_NODE_IS_STRUCT(pn)) {
    3daa:	687b      	ldr	r3, [r7, #4]
    3dac:	2b00      	cmp	r3, #0
    3dae:	d00b      	beq.n	3dc8 <mp_parse_node_print+0x28>
    3db0:	687b      	ldr	r3, [r7, #4]
    3db2:	f003 0303 	and.w	r3, r3, #3
    3db6:	2b00      	cmp	r3, #0
    3db8:	d106      	bne.n	3dc8 <mp_parse_node_print+0x28>
        printf("[% 4d] ", (int)((mp_parse_node_struct_t*)pn)->source_line);
    3dba:	687b      	ldr	r3, [r7, #4]
    3dbc:	681b      	ldr	r3, [r3, #0]
    3dbe:	4619      	mov	r1, r3
    3dc0:	484c      	ldr	r0, [pc, #304]	; (3ef4 <mp_parse_node_print+0x154>)
    3dc2:	f018 ff2b 	bl	1cc1c <printf>
    3dc6:	e002      	b.n	3dce <mp_parse_node_print+0x2e>
    } else {
        printf("       ");
    3dc8:	484b      	ldr	r0, [pc, #300]	; (3ef8 <mp_parse_node_print+0x158>)
    3dca:	f018 ff27 	bl	1cc1c <printf>
    }
    for (size_t i = 0; i < indent; i++) {
    3dce:	2300      	movs	r3, #0
    3dd0:	61fb      	str	r3, [r7, #28]
    3dd2:	e005      	b.n	3de0 <mp_parse_node_print+0x40>
        printf(" ");
    3dd4:	2020      	movs	r0, #32
    3dd6:	f018 ff4b 	bl	1cc70 <putchar>
    for (size_t i = 0; i < indent; i++) {
    3dda:	69fb      	ldr	r3, [r7, #28]
    3ddc:	3301      	adds	r3, #1
    3dde:	61fb      	str	r3, [r7, #28]
    3de0:	69fa      	ldr	r2, [r7, #28]
    3de2:	683b      	ldr	r3, [r7, #0]
    3de4:	429a      	cmp	r2, r3
    3de6:	d3f5      	bcc.n	3dd4 <mp_parse_node_print+0x34>
    }
    if (MP_PARSE_NODE_IS_NULL(pn)) {
    3de8:	687b      	ldr	r3, [r7, #4]
    3dea:	2b00      	cmp	r3, #0
    3dec:	d103      	bne.n	3df6 <mp_parse_node_print+0x56>
        printf("NULL\n");
    3dee:	4843      	ldr	r0, [pc, #268]	; (3efc <mp_parse_node_print+0x15c>)
    3df0:	f018 ff50 	bl	1cc94 <puts>
            for (size_t i = 0; i < n; i++) {
                mp_parse_node_print(pns->nodes[i], indent + 2);
            }
        }
    }
}
    3df4:	e07a      	b.n	3eec <mp_parse_node_print+0x14c>
    } else if (MP_PARSE_NODE_IS_SMALL_INT(pn)) {
    3df6:	687b      	ldr	r3, [r7, #4]
    3df8:	f003 0301 	and.w	r3, r3, #1
    3dfc:	2b00      	cmp	r3, #0
    3dfe:	d007      	beq.n	3e10 <mp_parse_node_print+0x70>
        mp_int_t arg = MP_PARSE_NODE_LEAF_SMALL_INT(pn);
    3e00:	687b      	ldr	r3, [r7, #4]
    3e02:	105b      	asrs	r3, r3, #1
    3e04:	617b      	str	r3, [r7, #20]
        printf("int(" INT_FMT ")\n", arg);
    3e06:	6979      	ldr	r1, [r7, #20]
    3e08:	483d      	ldr	r0, [pc, #244]	; (3f00 <mp_parse_node_print+0x160>)
    3e0a:	f018 ff07 	bl	1cc1c <printf>
}
    3e0e:	e06d      	b.n	3eec <mp_parse_node_print+0x14c>
    } else if (MP_PARSE_NODE_IS_LEAF(pn)) {
    3e10:	687b      	ldr	r3, [r7, #4]
    3e12:	f003 0303 	and.w	r3, r3, #3
    3e16:	2b00      	cmp	r3, #0
    3e18:	d038      	beq.n	3e8c <mp_parse_node_print+0xec>
        uintptr_t arg = MP_PARSE_NODE_LEAF_ARG(pn);
    3e1a:	687b      	ldr	r3, [r7, #4]
    3e1c:	091b      	lsrs	r3, r3, #4
    3e1e:	613b      	str	r3, [r7, #16]
        switch (MP_PARSE_NODE_LEAF_KIND(pn)) {
    3e20:	687b      	ldr	r3, [r7, #4]
    3e22:	f003 030f 	and.w	r3, r3, #15
    3e26:	2b06      	cmp	r3, #6
    3e28:	d00c      	beq.n	3e44 <mp_parse_node_print+0xa4>
    3e2a:	2b0a      	cmp	r3, #10
    3e2c:	d013      	beq.n	3e56 <mp_parse_node_print+0xb6>
    3e2e:	2b02      	cmp	r3, #2
    3e30:	d11a      	bne.n	3e68 <mp_parse_node_print+0xc8>
            case MP_PARSE_NODE_ID: printf("id(%s)\n", qstr_str(arg)); break;
    3e32:	6938      	ldr	r0, [r7, #16]
    3e34:	f7fd facc 	bl	13d0 <qstr_str>
    3e38:	4603      	mov	r3, r0
    3e3a:	4619      	mov	r1, r3
    3e3c:	4831      	ldr	r0, [pc, #196]	; (3f04 <mp_parse_node_print+0x164>)
    3e3e:	f018 feed 	bl	1cc1c <printf>
    3e42:	e053      	b.n	3eec <mp_parse_node_print+0x14c>
            case MP_PARSE_NODE_STRING: printf("str(%s)\n", qstr_str(arg)); break;
    3e44:	6938      	ldr	r0, [r7, #16]
    3e46:	f7fd fac3 	bl	13d0 <qstr_str>
    3e4a:	4603      	mov	r3, r0
    3e4c:	4619      	mov	r1, r3
    3e4e:	482e      	ldr	r0, [pc, #184]	; (3f08 <mp_parse_node_print+0x168>)
    3e50:	f018 fee4 	bl	1cc1c <printf>
    3e54:	e04a      	b.n	3eec <mp_parse_node_print+0x14c>
            case MP_PARSE_NODE_BYTES: printf("bytes(%s)\n", qstr_str(arg)); break;
    3e56:	6938      	ldr	r0, [r7, #16]
    3e58:	f7fd faba 	bl	13d0 <qstr_str>
    3e5c:	4603      	mov	r3, r0
    3e5e:	4619      	mov	r1, r3
    3e60:	482a      	ldr	r0, [pc, #168]	; (3f0c <mp_parse_node_print+0x16c>)
    3e62:	f018 fedb 	bl	1cc1c <printf>
    3e66:	e041      	b.n	3eec <mp_parse_node_print+0x14c>
                assert(MP_PARSE_NODE_LEAF_KIND(pn) == MP_PARSE_NODE_TOKEN);
    3e68:	687b      	ldr	r3, [r7, #4]
    3e6a:	f003 030f 	and.w	r3, r3, #15
    3e6e:	2b0e      	cmp	r3, #14
    3e70:	d006      	beq.n	3e80 <mp_parse_node_print+0xe0>
    3e72:	4b27      	ldr	r3, [pc, #156]	; (3f10 <mp_parse_node_print+0x170>)
    3e74:	4a27      	ldr	r2, [pc, #156]	; (3f14 <mp_parse_node_print+0x174>)
    3e76:	f44f 71c2 	mov.w	r1, #388	; 0x184
    3e7a:	4827      	ldr	r0, [pc, #156]	; (3f18 <mp_parse_node_print+0x178>)
    3e7c:	f019 f830 	bl	1cee0 <__assert_func>
                printf("tok(%u)\n", (uint)arg); break;
    3e80:	6939      	ldr	r1, [r7, #16]
    3e82:	4826      	ldr	r0, [pc, #152]	; (3f1c <mp_parse_node_print+0x17c>)
    3e84:	f018 feca 	bl	1cc1c <printf>
    3e88:	bf00      	nop
    3e8a:	e02f      	b.n	3eec <mp_parse_node_print+0x14c>
        mp_parse_node_struct_t *pns = (mp_parse_node_struct_t*)pn;
    3e8c:	687b      	ldr	r3, [r7, #4]
    3e8e:	60fb      	str	r3, [r7, #12]
        if (MP_PARSE_NODE_STRUCT_KIND(pns) == RULE_const_object) {
    3e90:	68fb      	ldr	r3, [r7, #12]
    3e92:	685b      	ldr	r3, [r3, #4]
    3e94:	b2db      	uxtb	r3, r3
    3e96:	2b35      	cmp	r3, #53	; 0x35
    3e98:	d106      	bne.n	3ea8 <mp_parse_node_print+0x108>
            printf("literal const(%p)\n", (mp_obj_t)pns->nodes[0]);
    3e9a:	68fb      	ldr	r3, [r7, #12]
    3e9c:	689b      	ldr	r3, [r3, #8]
    3e9e:	4619      	mov	r1, r3
    3ea0:	481f      	ldr	r0, [pc, #124]	; (3f20 <mp_parse_node_print+0x180>)
    3ea2:	f018 febb 	bl	1cc1c <printf>
}
    3ea6:	e021      	b.n	3eec <mp_parse_node_print+0x14c>
            size_t n = MP_PARSE_NODE_STRUCT_NUM_NODES(pns);
    3ea8:	68fb      	ldr	r3, [r7, #12]
    3eaa:	685b      	ldr	r3, [r3, #4]
    3eac:	0a1b      	lsrs	r3, r3, #8
    3eae:	60bb      	str	r3, [r7, #8]
            printf("rule(%u) (n=%u)\n", (uint)MP_PARSE_NODE_STRUCT_KIND(pns), (uint)n);
    3eb0:	68fb      	ldr	r3, [r7, #12]
    3eb2:	685b      	ldr	r3, [r3, #4]
    3eb4:	b2db      	uxtb	r3, r3
    3eb6:	68ba      	ldr	r2, [r7, #8]
    3eb8:	4619      	mov	r1, r3
    3eba:	481a      	ldr	r0, [pc, #104]	; (3f24 <mp_parse_node_print+0x184>)
    3ebc:	f018 feae 	bl	1cc1c <printf>
            for (size_t i = 0; i < n; i++) {
    3ec0:	2300      	movs	r3, #0
    3ec2:	61bb      	str	r3, [r7, #24]
    3ec4:	e00d      	b.n	3ee2 <mp_parse_node_print+0x142>
                mp_parse_node_print(pns->nodes[i], indent + 2);
    3ec6:	68fb      	ldr	r3, [r7, #12]
    3ec8:	69ba      	ldr	r2, [r7, #24]
    3eca:	3202      	adds	r2, #2
    3ecc:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    3ed0:	683b      	ldr	r3, [r7, #0]
    3ed2:	3302      	adds	r3, #2
    3ed4:	4619      	mov	r1, r3
    3ed6:	4610      	mov	r0, r2
    3ed8:	f7ff ff62 	bl	3da0 <mp_parse_node_print>
            for (size_t i = 0; i < n; i++) {
    3edc:	69bb      	ldr	r3, [r7, #24]
    3ede:	3301      	adds	r3, #1
    3ee0:	61bb      	str	r3, [r7, #24]
    3ee2:	69ba      	ldr	r2, [r7, #24]
    3ee4:	68bb      	ldr	r3, [r7, #8]
    3ee6:	429a      	cmp	r2, r3
    3ee8:	d3ed      	bcc.n	3ec6 <mp_parse_node_print+0x126>
}
    3eea:	e7ff      	b.n	3eec <mp_parse_node_print+0x14c>
    3eec:	bf00      	nop
    3eee:	3720      	adds	r7, #32
    3ef0:	46bd      	mov	sp, r7
    3ef2:	bd80      	pop	{r7, pc}
    3ef4:	00021904 	.word	0x00021904
    3ef8:	0002190c 	.word	0x0002190c
    3efc:	00021914 	.word	0x00021914
    3f00:	0002191c 	.word	0x0002191c
    3f04:	00021928 	.word	0x00021928
    3f08:	00021930 	.word	0x00021930
    3f0c:	0002193c 	.word	0x0002193c
    3f10:	00021948 	.word	0x00021948
    3f14:	00021b24 	.word	0x00021b24
    3f18:	000218f0 	.word	0x000218f0
    3f1c:	0002197c 	.word	0x0002197c
    3f20:	00021988 	.word	0x00021988
    3f24:	0002199c 	.word	0x0002199c

00003f28 <pop_result>:
        mp_parse_node_print(parser->result_stack[i], 0);
    }
}
*/

STATIC mp_parse_node_t pop_result(parser_t *parser) {
    3f28:	b580      	push	{r7, lr}
    3f2a:	b082      	sub	sp, #8
    3f2c:	af00      	add	r7, sp, #0
    3f2e:	6078      	str	r0, [r7, #4]
    assert(parser->result_stack_top > 0);
    3f30:	687b      	ldr	r3, [r7, #4]
    3f32:	691b      	ldr	r3, [r3, #16]
    3f34:	2b00      	cmp	r3, #0
    3f36:	d106      	bne.n	3f46 <pop_result+0x1e>
    3f38:	4b0b      	ldr	r3, [pc, #44]	; (3f68 <pop_result+0x40>)
    3f3a:	4a0c      	ldr	r2, [pc, #48]	; (3f6c <pop_result+0x44>)
    3f3c:	f240 11a9 	movw	r1, #425	; 0x1a9
    3f40:	480b      	ldr	r0, [pc, #44]	; (3f70 <pop_result+0x48>)
    3f42:	f018 ffcd 	bl	1cee0 <__assert_func>
    return parser->result_stack[--parser->result_stack_top];
    3f46:	687b      	ldr	r3, [r7, #4]
    3f48:	695a      	ldr	r2, [r3, #20]
    3f4a:	687b      	ldr	r3, [r7, #4]
    3f4c:	691b      	ldr	r3, [r3, #16]
    3f4e:	1e59      	subs	r1, r3, #1
    3f50:	687b      	ldr	r3, [r7, #4]
    3f52:	6119      	str	r1, [r3, #16]
    3f54:	687b      	ldr	r3, [r7, #4]
    3f56:	691b      	ldr	r3, [r3, #16]
    3f58:	009b      	lsls	r3, r3, #2
    3f5a:	4413      	add	r3, r2
    3f5c:	681b      	ldr	r3, [r3, #0]
}
    3f5e:	4618      	mov	r0, r3
    3f60:	3708      	adds	r7, #8
    3f62:	46bd      	mov	sp, r7
    3f64:	bd80      	pop	{r7, pc}
    3f66:	bf00      	nop
    3f68:	000219b0 	.word	0x000219b0
    3f6c:	00021b38 	.word	0x00021b38
    3f70:	000218f0 	.word	0x000218f0

00003f74 <peek_result>:

STATIC mp_parse_node_t peek_result(parser_t *parser, size_t pos) {
    3f74:	b580      	push	{r7, lr}
    3f76:	b082      	sub	sp, #8
    3f78:	af00      	add	r7, sp, #0
    3f7a:	6078      	str	r0, [r7, #4]
    3f7c:	6039      	str	r1, [r7, #0]
    assert(parser->result_stack_top > pos);
    3f7e:	687b      	ldr	r3, [r7, #4]
    3f80:	691a      	ldr	r2, [r3, #16]
    3f82:	683b      	ldr	r3, [r7, #0]
    3f84:	429a      	cmp	r2, r3
    3f86:	d806      	bhi.n	3f96 <peek_result+0x22>
    3f88:	4b0b      	ldr	r3, [pc, #44]	; (3fb8 <peek_result+0x44>)
    3f8a:	4a0c      	ldr	r2, [pc, #48]	; (3fbc <peek_result+0x48>)
    3f8c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
    3f90:	480b      	ldr	r0, [pc, #44]	; (3fc0 <peek_result+0x4c>)
    3f92:	f018 ffa5 	bl	1cee0 <__assert_func>
    return parser->result_stack[parser->result_stack_top - 1 - pos];
    3f96:	687b      	ldr	r3, [r7, #4]
    3f98:	695a      	ldr	r2, [r3, #20]
    3f9a:	687b      	ldr	r3, [r7, #4]
    3f9c:	6919      	ldr	r1, [r3, #16]
    3f9e:	683b      	ldr	r3, [r7, #0]
    3fa0:	1acb      	subs	r3, r1, r3
    3fa2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    3fa6:	3b01      	subs	r3, #1
    3fa8:	009b      	lsls	r3, r3, #2
    3faa:	4413      	add	r3, r2
    3fac:	681b      	ldr	r3, [r3, #0]
}
    3fae:	4618      	mov	r0, r3
    3fb0:	3708      	adds	r7, #8
    3fb2:	46bd      	mov	sp, r7
    3fb4:	bd80      	pop	{r7, pc}
    3fb6:	bf00      	nop
    3fb8:	000219d0 	.word	0x000219d0
    3fbc:	00021b44 	.word	0x00021b44
    3fc0:	000218f0 	.word	0x000218f0

00003fc4 <push_result_node>:

STATIC void push_result_node(parser_t *parser, mp_parse_node_t pn) {
    3fc4:	b580      	push	{r7, lr}
    3fc6:	b084      	sub	sp, #16
    3fc8:	af00      	add	r7, sp, #0
    3fca:	6078      	str	r0, [r7, #4]
    3fcc:	6039      	str	r1, [r7, #0]
    if (parser->result_stack_top >= parser->result_stack_alloc) {
    3fce:	687b      	ldr	r3, [r7, #4]
    3fd0:	691a      	ldr	r2, [r3, #16]
    3fd2:	687b      	ldr	r3, [r7, #4]
    3fd4:	68db      	ldr	r3, [r3, #12]
    3fd6:	429a      	cmp	r2, r3
    3fd8:	d313      	bcc.n	4002 <push_result_node+0x3e>
        mp_parse_node_t *stack = m_renew(mp_parse_node_t, parser->result_stack, parser->result_stack_alloc, parser->result_stack_alloc + MICROPY_ALLOC_PARSE_RESULT_INC);
    3fda:	687b      	ldr	r3, [r7, #4]
    3fdc:	695a      	ldr	r2, [r3, #20]
    3fde:	687b      	ldr	r3, [r7, #4]
    3fe0:	68db      	ldr	r3, [r3, #12]
    3fe2:	3310      	adds	r3, #16
    3fe4:	009b      	lsls	r3, r3, #2
    3fe6:	4619      	mov	r1, r3
    3fe8:	4610      	mov	r0, r2
    3fea:	f7fc f9d8 	bl	39e <m_realloc>
    3fee:	60f8      	str	r0, [r7, #12]
        parser->result_stack = stack;
    3ff0:	687b      	ldr	r3, [r7, #4]
    3ff2:	68fa      	ldr	r2, [r7, #12]
    3ff4:	615a      	str	r2, [r3, #20]
        parser->result_stack_alloc += MICROPY_ALLOC_PARSE_RESULT_INC;
    3ff6:	687b      	ldr	r3, [r7, #4]
    3ff8:	68db      	ldr	r3, [r3, #12]
    3ffa:	f103 0210 	add.w	r2, r3, #16
    3ffe:	687b      	ldr	r3, [r7, #4]
    4000:	60da      	str	r2, [r3, #12]
    }
    parser->result_stack[parser->result_stack_top++] = pn;
    4002:	687b      	ldr	r3, [r7, #4]
    4004:	695a      	ldr	r2, [r3, #20]
    4006:	687b      	ldr	r3, [r7, #4]
    4008:	691b      	ldr	r3, [r3, #16]
    400a:	1c58      	adds	r0, r3, #1
    400c:	6879      	ldr	r1, [r7, #4]
    400e:	6108      	str	r0, [r1, #16]
    4010:	009b      	lsls	r3, r3, #2
    4012:	4413      	add	r3, r2
    4014:	683a      	ldr	r2, [r7, #0]
    4016:	601a      	str	r2, [r3, #0]
}
    4018:	bf00      	nop
    401a:	3710      	adds	r7, #16
    401c:	46bd      	mov	sp, r7
    401e:	bd80      	pop	{r7, pc}

00004020 <make_node_const_object>:

STATIC mp_parse_node_t make_node_const_object(parser_t *parser, size_t src_line, mp_obj_t obj) {
    4020:	b580      	push	{r7, lr}
    4022:	b086      	sub	sp, #24
    4024:	af00      	add	r7, sp, #0
    4026:	60f8      	str	r0, [r7, #12]
    4028:	60b9      	str	r1, [r7, #8]
    402a:	607a      	str	r2, [r7, #4]
    mp_parse_node_struct_t *pn = parser_alloc(parser, sizeof(mp_parse_node_struct_t) + sizeof(mp_obj_t));
    402c:	210c      	movs	r1, #12
    402e:	68f8      	ldr	r0, [r7, #12]
    4030:	f7ff fcf6 	bl	3a20 <parser_alloc>
    4034:	6178      	str	r0, [r7, #20]
    pn->source_line = src_line;
    4036:	697b      	ldr	r3, [r7, #20]
    4038:	68ba      	ldr	r2, [r7, #8]
    403a:	601a      	str	r2, [r3, #0]
    // nodes are 32-bit pointers, but need to store 64-bit object
    pn->kind_num_nodes = RULE_const_object | (2 << 8);
    pn->nodes[0] = (uint64_t)obj;
    pn->nodes[1] = (uint64_t)obj >> 32;
    #else
    pn->kind_num_nodes = RULE_const_object | (1 << 8);
    403c:	697b      	ldr	r3, [r7, #20]
    403e:	f240 1235 	movw	r2, #309	; 0x135
    4042:	605a      	str	r2, [r3, #4]
    pn->nodes[0] = (uintptr_t)obj;
    4044:	687a      	ldr	r2, [r7, #4]
    4046:	697b      	ldr	r3, [r7, #20]
    4048:	609a      	str	r2, [r3, #8]
    #endif
    return (mp_parse_node_t)pn;
    404a:	697b      	ldr	r3, [r7, #20]
}
    404c:	4618      	mov	r0, r3
    404e:	3718      	adds	r7, #24
    4050:	46bd      	mov	sp, r7
    4052:	bd80      	pop	{r7, pc}

00004054 <mp_parse_node_new_small_int_checked>:

STATIC mp_parse_node_t mp_parse_node_new_small_int_checked(parser_t *parser, mp_obj_t o_val) {
    4054:	b580      	push	{r7, lr}
    4056:	b084      	sub	sp, #16
    4058:	af00      	add	r7, sp, #0
    405a:	6078      	str	r0, [r7, #4]
    405c:	6039      	str	r1, [r7, #0]
    (void)parser;
    mp_int_t val = MP_OBJ_SMALL_INT_VALUE(o_val);
    405e:	683b      	ldr	r3, [r7, #0]
    4060:	105b      	asrs	r3, r3, #1
    4062:	60fb      	str	r3, [r7, #12]
    // A parse node is only 32-bits and the small-int value must fit in 31-bits
    if (((val ^ (val << 1)) & 0xffffffff80000000) != 0) {
        return make_node_const_object(parser, 0, o_val);
    }
    #endif
    return mp_parse_node_new_small_int(val);
    4064:	68f8      	ldr	r0, [r7, #12]
    4066:	f7ff fc9f 	bl	39a8 <mp_parse_node_new_small_int>
    406a:	4603      	mov	r3, r0
}
    406c:	4618      	mov	r0, r3
    406e:	3710      	adds	r7, #16
    4070:	46bd      	mov	sp, r7
    4072:	bd80      	pop	{r7, pc}

00004074 <push_result_token>:

STATIC void push_result_token(parser_t *parser, uint8_t rule_id) {
    4074:	b580      	push	{r7, lr}
    4076:	b08c      	sub	sp, #48	; 0x30
    4078:	af02      	add	r7, sp, #8
    407a:	6078      	str	r0, [r7, #4]
    407c:	460b      	mov	r3, r1
    407e:	70fb      	strb	r3, [r7, #3]
    mp_parse_node_t pn;
    mp_lexer_t *lex = parser->lexer;
    4080:	687b      	ldr	r3, [r7, #4]
    4082:	699b      	ldr	r3, [r3, #24]
    4084:	61fb      	str	r3, [r7, #28]
    if (lex->tok_kind == MP_TOKEN_NAME) {
    4086:	69fb      	ldr	r3, [r7, #28]
    4088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    408a:	2b07      	cmp	r3, #7
    408c:	d10f      	bne.n	40ae <push_result_token+0x3a>
        qstr id = qstr_from_strn(lex->vstr.buf, lex->vstr.len);
    408e:	69fb      	ldr	r3, [r7, #28]
    4090:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    4092:	69fb      	ldr	r3, [r7, #28]
    4094:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    4096:	4619      	mov	r1, r3
    4098:	4610      	mov	r0, r2
    409a:	f7fd f8c0 	bl	121e <qstr_from_strn>
    409e:	61b8      	str	r0, [r7, #24]
        } else {
            pn = mp_parse_node_new_leaf(MP_PARSE_NODE_ID, id);
        }
        #else
        (void)rule_id;
        pn = mp_parse_node_new_leaf(MP_PARSE_NODE_ID, id);
    40a0:	69bb      	ldr	r3, [r7, #24]
    40a2:	4619      	mov	r1, r3
    40a4:	2002      	movs	r0, #2
    40a6:	f7ff fc8d 	bl	39c4 <mp_parse_node_new_leaf>
    40aa:	6278      	str	r0, [r7, #36]	; 0x24
    40ac:	e08a      	b.n	41c4 <push_result_token+0x150>
        #endif
    } else if (lex->tok_kind == MP_TOKEN_INTEGER) {
    40ae:	69fb      	ldr	r3, [r7, #28]
    40b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    40b2:	2b08      	cmp	r3, #8
    40b4:	d11d      	bne.n	40f2 <push_result_token+0x7e>
        mp_obj_t o = mp_parse_num_integer(lex->vstr.buf, lex->vstr.len, 0, lex);
    40b6:	69fb      	ldr	r3, [r7, #28]
    40b8:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
    40ba:	69fb      	ldr	r3, [r7, #28]
    40bc:	6c99      	ldr	r1, [r3, #72]	; 0x48
    40be:	69fb      	ldr	r3, [r7, #28]
    40c0:	2200      	movs	r2, #0
    40c2:	f007 f87d 	bl	b1c0 <mp_parse_num_integer>
    40c6:	6178      	str	r0, [r7, #20]
        if (MP_OBJ_IS_SMALL_INT(o)) {
    40c8:	6978      	ldr	r0, [r7, #20]
    40ca:	f7ff fc49 	bl	3960 <MP_OBJ_IS_SMALL_INT>
    40ce:	4603      	mov	r3, r0
    40d0:	2b00      	cmp	r3, #0
    40d2:	d005      	beq.n	40e0 <push_result_token+0x6c>
            pn = mp_parse_node_new_small_int_checked(parser, o);
    40d4:	6979      	ldr	r1, [r7, #20]
    40d6:	6878      	ldr	r0, [r7, #4]
    40d8:	f7ff ffbc 	bl	4054 <mp_parse_node_new_small_int_checked>
    40dc:	6278      	str	r0, [r7, #36]	; 0x24
    40de:	e071      	b.n	41c4 <push_result_token+0x150>
        } else {
            pn = make_node_const_object(parser, lex->tok_line, o);
    40e0:	69fb      	ldr	r3, [r7, #28]
    40e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    40e4:	697a      	ldr	r2, [r7, #20]
    40e6:	4619      	mov	r1, r3
    40e8:	6878      	ldr	r0, [r7, #4]
    40ea:	f7ff ff99 	bl	4020 <make_node_const_object>
    40ee:	6278      	str	r0, [r7, #36]	; 0x24
    40f0:	e068      	b.n	41c4 <push_result_token+0x150>
        }
    } else if (lex->tok_kind == MP_TOKEN_FLOAT_OR_IMAG) {
    40f2:	69fb      	ldr	r3, [r7, #28]
    40f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    40f6:	2b09      	cmp	r3, #9
    40f8:	d113      	bne.n	4122 <push_result_token+0xae>
        mp_obj_t o = mp_parse_num_decimal(lex->vstr.buf, lex->vstr.len, true, false, lex);
    40fa:	69fb      	ldr	r3, [r7, #28]
    40fc:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
    40fe:	69fb      	ldr	r3, [r7, #28]
    4100:	6c99      	ldr	r1, [r3, #72]	; 0x48
    4102:	69fb      	ldr	r3, [r7, #28]
    4104:	9300      	str	r3, [sp, #0]
    4106:	2300      	movs	r3, #0
    4108:	2201      	movs	r2, #1
    410a:	f007 f941 	bl	b390 <mp_parse_num_decimal>
    410e:	6138      	str	r0, [r7, #16]
        pn = make_node_const_object(parser, lex->tok_line, o);
    4110:	69fb      	ldr	r3, [r7, #28]
    4112:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    4114:	693a      	ldr	r2, [r7, #16]
    4116:	4619      	mov	r1, r3
    4118:	6878      	ldr	r0, [r7, #4]
    411a:	f7ff ff81 	bl	4020 <make_node_const_object>
    411e:	6278      	str	r0, [r7, #36]	; 0x24
    4120:	e050      	b.n	41c4 <push_result_token+0x150>
    } else if (lex->tok_kind == MP_TOKEN_STRING || lex->tok_kind == MP_TOKEN_BYTES) {
    4122:	69fb      	ldr	r3, [r7, #28]
    4124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    4126:	2b0a      	cmp	r3, #10
    4128:	d003      	beq.n	4132 <push_result_token+0xbe>
    412a:	69fb      	ldr	r3, [r7, #28]
    412c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    412e:	2b0b      	cmp	r3, #11
    4130:	d141      	bne.n	41b6 <push_result_token+0x142>
        // Don't automatically intern all strings/bytes.  doc strings (which are usually large)
        // will be discarded by the compiler, and so we shouldn't intern them.
        qstr qst = MP_QSTR_NULL;
    4132:	2300      	movs	r3, #0
    4134:	623b      	str	r3, [r7, #32]
        if (lex->vstr.len <= MICROPY_ALLOC_PARSE_INTERN_STRING_LEN) {
    4136:	69fb      	ldr	r3, [r7, #28]
    4138:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    413a:	2b0a      	cmp	r3, #10
    413c:	d809      	bhi.n	4152 <push_result_token+0xde>
            // intern short strings
            qst = qstr_from_strn(lex->vstr.buf, lex->vstr.len);
    413e:	69fb      	ldr	r3, [r7, #28]
    4140:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    4142:	69fb      	ldr	r3, [r7, #28]
    4144:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    4146:	4619      	mov	r1, r3
    4148:	4610      	mov	r0, r2
    414a:	f7fd f868 	bl	121e <qstr_from_strn>
    414e:	6238      	str	r0, [r7, #32]
    4150:	e008      	b.n	4164 <push_result_token+0xf0>
        } else {
            // check if this string is already interned
            qst = qstr_find_strn(lex->vstr.buf, lex->vstr.len);
    4152:	69fb      	ldr	r3, [r7, #28]
    4154:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    4156:	69fb      	ldr	r3, [r7, #28]
    4158:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    415a:	4619      	mov	r1, r3
    415c:	4610      	mov	r0, r2
    415e:	f7fc fffb 	bl	1158 <qstr_find_strn>
    4162:	6238      	str	r0, [r7, #32]
        }
        if (qst != MP_QSTR_NULL) {
    4164:	6a3b      	ldr	r3, [r7, #32]
    4166:	2b00      	cmp	r3, #0
    4168:	d00d      	beq.n	4186 <push_result_token+0x112>
            // qstr exists, make a leaf node
            pn = mp_parse_node_new_leaf(lex->tok_kind == MP_TOKEN_STRING ? MP_PARSE_NODE_STRING : MP_PARSE_NODE_BYTES, qst);
    416a:	69fb      	ldr	r3, [r7, #28]
    416c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    416e:	2b0a      	cmp	r3, #10
    4170:	d101      	bne.n	4176 <push_result_token+0x102>
    4172:	2306      	movs	r3, #6
    4174:	e000      	b.n	4178 <push_result_token+0x104>
    4176:	230a      	movs	r3, #10
    4178:	6a3a      	ldr	r2, [r7, #32]
    417a:	4611      	mov	r1, r2
    417c:	4618      	mov	r0, r3
    417e:	f7ff fc21 	bl	39c4 <mp_parse_node_new_leaf>
    4182:	6278      	str	r0, [r7, #36]	; 0x24
    } else if (lex->tok_kind == MP_TOKEN_STRING || lex->tok_kind == MP_TOKEN_BYTES) {
    4184:	e01e      	b.n	41c4 <push_result_token+0x150>
        } else {
            // not interned, make a node holding a pointer to the string/bytes object
            mp_obj_t o = mp_obj_new_str_copy(
                lex->tok_kind == MP_TOKEN_STRING ? &mp_type_str : &mp_type_bytes,
    4186:	69fb      	ldr	r3, [r7, #28]
    4188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
            mp_obj_t o = mp_obj_new_str_copy(
    418a:	2b0a      	cmp	r3, #10
    418c:	d101      	bne.n	4192 <push_result_token+0x11e>
    418e:	4811      	ldr	r0, [pc, #68]	; (41d4 <push_result_token+0x160>)
    4190:	e000      	b.n	4194 <push_result_token+0x120>
    4192:	4811      	ldr	r0, [pc, #68]	; (41d8 <push_result_token+0x164>)
                (const byte*)lex->vstr.buf, lex->vstr.len);
    4194:	69fb      	ldr	r3, [r7, #28]
    4196:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
            mp_obj_t o = mp_obj_new_str_copy(
    4198:	69fb      	ldr	r3, [r7, #28]
    419a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    419c:	461a      	mov	r2, r3
    419e:	f011 fa7e 	bl	1569e <mp_obj_new_str_copy>
    41a2:	60f8      	str	r0, [r7, #12]
            pn = make_node_const_object(parser, lex->tok_line, o);
    41a4:	69fb      	ldr	r3, [r7, #28]
    41a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    41a8:	68fa      	ldr	r2, [r7, #12]
    41aa:	4619      	mov	r1, r3
    41ac:	6878      	ldr	r0, [r7, #4]
    41ae:	f7ff ff37 	bl	4020 <make_node_const_object>
    41b2:	6278      	str	r0, [r7, #36]	; 0x24
    } else if (lex->tok_kind == MP_TOKEN_STRING || lex->tok_kind == MP_TOKEN_BYTES) {
    41b4:	e006      	b.n	41c4 <push_result_token+0x150>
        }
    } else {
        pn = mp_parse_node_new_leaf(MP_PARSE_NODE_TOKEN, lex->tok_kind);
    41b6:	69fb      	ldr	r3, [r7, #28]
    41b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    41ba:	4619      	mov	r1, r3
    41bc:	200e      	movs	r0, #14
    41be:	f7ff fc01 	bl	39c4 <mp_parse_node_new_leaf>
    41c2:	6278      	str	r0, [r7, #36]	; 0x24
    }
    push_result_node(parser, pn);
    41c4:	6a79      	ldr	r1, [r7, #36]	; 0x24
    41c6:	6878      	ldr	r0, [r7, #4]
    41c8:	f7ff fefc 	bl	3fc4 <push_result_node>
}
    41cc:	bf00      	nop
    41ce:	3728      	adds	r7, #40	; 0x28
    41d0:	46bd      	mov	sp, r7
    41d2:	bd80      	pop	{r7, pc}
    41d4:	000257b0 	.word	0x000257b0
    41d8:	000257ec 	.word	0x000257ec

000041dc <fold_logical_constants>:
#endif

STATIC void push_result_rule(parser_t *parser, size_t src_line, uint8_t rule_id, size_t num_args);

#if MICROPY_COMP_CONST_FOLDING
STATIC bool fold_logical_constants(parser_t *parser, uint8_t rule_id, size_t *num_args) {
    41dc:	b580      	push	{r7, lr}
    41de:	b08a      	sub	sp, #40	; 0x28
    41e0:	af00      	add	r7, sp, #0
    41e2:	60f8      	str	r0, [r7, #12]
    41e4:	460b      	mov	r3, r1
    41e6:	607a      	str	r2, [r7, #4]
    41e8:	72fb      	strb	r3, [r7, #11]
    if (rule_id == RULE_or_test
    41ea:	7afb      	ldrb	r3, [r7, #11]
    41ec:	2b1c      	cmp	r3, #28
    41ee:	d002      	beq.n	41f6 <fold_logical_constants+0x1a>
        || rule_id == RULE_and_test) {
    41f0:	7afb      	ldrb	r3, [r7, #11]
    41f2:	2b1d      	cmp	r3, #29
    41f4:	d169      	bne.n	42ca <fold_logical_constants+0xee>
        // folding for binary logical ops: or and
        size_t copy_to = *num_args;
    41f6:	687b      	ldr	r3, [r7, #4]
    41f8:	681b      	ldr	r3, [r3, #0]
    41fa:	627b      	str	r3, [r7, #36]	; 0x24
        for (size_t i = copy_to; i > 0;) {
    41fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    41fe:	623b      	str	r3, [r7, #32]
    4200:	e03c      	b.n	427c <fold_logical_constants+0xa0>
            mp_parse_node_t pn = peek_result(parser, --i);
    4202:	6a3b      	ldr	r3, [r7, #32]
    4204:	3b01      	subs	r3, #1
    4206:	623b      	str	r3, [r7, #32]
    4208:	6a39      	ldr	r1, [r7, #32]
    420a:	68f8      	ldr	r0, [r7, #12]
    420c:	f7ff feb2 	bl	3f74 <peek_result>
    4210:	6178      	str	r0, [r7, #20]
            parser->result_stack[parser->result_stack_top - copy_to] = pn;
    4212:	68fb      	ldr	r3, [r7, #12]
    4214:	695a      	ldr	r2, [r3, #20]
    4216:	68fb      	ldr	r3, [r7, #12]
    4218:	6919      	ldr	r1, [r3, #16]
    421a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    421c:	1acb      	subs	r3, r1, r3
    421e:	009b      	lsls	r3, r3, #2
    4220:	4413      	add	r3, r2
    4222:	697a      	ldr	r2, [r7, #20]
    4224:	601a      	str	r2, [r3, #0]
            if (i == 0) {
    4226:	6a3b      	ldr	r3, [r7, #32]
    4228:	2b00      	cmp	r3, #0
    422a:	d02b      	beq.n	4284 <fold_logical_constants+0xa8>
                // always need to keep the last value
                break;
            }
            if (rule_id == RULE_or_test) {
    422c:	7afb      	ldrb	r3, [r7, #11]
    422e:	2b1c      	cmp	r3, #28
    4230:	d112      	bne.n	4258 <fold_logical_constants+0x7c>
                if (mp_parse_node_is_const_true(pn)) {
    4232:	6978      	ldr	r0, [r7, #20]
    4234:	f7ff fd15 	bl	3c62 <mp_parse_node_is_const_true>
    4238:	4603      	mov	r3, r0
    423a:	2b00      	cmp	r3, #0
    423c:	d124      	bne.n	4288 <fold_logical_constants+0xac>
                    //
                    break;
                } else if (!mp_parse_node_is_const_false(pn)) {
    423e:	6978      	ldr	r0, [r7, #20]
    4240:	f7ff fcf3 	bl	3c2a <mp_parse_node_is_const_false>
    4244:	4603      	mov	r3, r0
    4246:	f083 0301 	eor.w	r3, r3, #1
    424a:	b2db      	uxtb	r3, r3
    424c:	2b00      	cmp	r3, #0
    424e:	d015      	beq.n	427c <fold_logical_constants+0xa0>
                    copy_to -= 1;
    4250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    4252:	3b01      	subs	r3, #1
    4254:	627b      	str	r3, [r7, #36]	; 0x24
    4256:	e011      	b.n	427c <fold_logical_constants+0xa0>
                }
            } else {
                // RULE_and_test
                if (mp_parse_node_is_const_false(pn)) {
    4258:	6978      	ldr	r0, [r7, #20]
    425a:	f7ff fce6 	bl	3c2a <mp_parse_node_is_const_false>
    425e:	4603      	mov	r3, r0
    4260:	2b00      	cmp	r3, #0
    4262:	d113      	bne.n	428c <fold_logical_constants+0xb0>
                    break;
                } else if (!mp_parse_node_is_const_true(pn)) {
    4264:	6978      	ldr	r0, [r7, #20]
    4266:	f7ff fcfc 	bl	3c62 <mp_parse_node_is_const_true>
    426a:	4603      	mov	r3, r0
    426c:	f083 0301 	eor.w	r3, r3, #1
    4270:	b2db      	uxtb	r3, r3
    4272:	2b00      	cmp	r3, #0
    4274:	d002      	beq.n	427c <fold_logical_constants+0xa0>
                    copy_to -= 1;
    4276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    4278:	3b01      	subs	r3, #1
    427a:	627b      	str	r3, [r7, #36]	; 0x24
        for (size_t i = copy_to; i > 0;) {
    427c:	6a3b      	ldr	r3, [r7, #32]
    427e:	2b00      	cmp	r3, #0
    4280:	d1bf      	bne.n	4202 <fold_logical_constants+0x26>
    4282:	e004      	b.n	428e <fold_logical_constants+0xb2>
                break;
    4284:	bf00      	nop
    4286:	e002      	b.n	428e <fold_logical_constants+0xb2>
                    break;
    4288:	bf00      	nop
    428a:	e000      	b.n	428e <fold_logical_constants+0xb2>
                    break;
    428c:	bf00      	nop
                }
            }
        }
        copy_to -= 1; // copy_to now contains number of args to pop
    428e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    4290:	3b01      	subs	r3, #1
    4292:	627b      	str	r3, [r7, #36]	; 0x24

        // pop and discard all the short-circuited expressions
        for (size_t i = 0; i < copy_to; ++i) {
    4294:	2300      	movs	r3, #0
    4296:	61fb      	str	r3, [r7, #28]
    4298:	e005      	b.n	42a6 <fold_logical_constants+0xca>
            pop_result(parser);
    429a:	68f8      	ldr	r0, [r7, #12]
    429c:	f7ff fe44 	bl	3f28 <pop_result>
        for (size_t i = 0; i < copy_to; ++i) {
    42a0:	69fb      	ldr	r3, [r7, #28]
    42a2:	3301      	adds	r3, #1
    42a4:	61fb      	str	r3, [r7, #28]
    42a6:	69fa      	ldr	r2, [r7, #28]
    42a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    42aa:	429a      	cmp	r2, r3
    42ac:	d3f5      	bcc.n	429a <fold_logical_constants+0xbe>
        }
        *num_args -= copy_to;
    42ae:	687b      	ldr	r3, [r7, #4]
    42b0:	681a      	ldr	r2, [r3, #0]
    42b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    42b4:	1ad2      	subs	r2, r2, r3
    42b6:	687b      	ldr	r3, [r7, #4]
    42b8:	601a      	str	r2, [r3, #0]

        // we did a complete folding if there's only 1 arg left
        return *num_args == 1;
    42ba:	687b      	ldr	r3, [r7, #4]
    42bc:	681b      	ldr	r3, [r3, #0]
    42be:	2b01      	cmp	r3, #1
    42c0:	bf0c      	ite	eq
    42c2:	2301      	moveq	r3, #1
    42c4:	2300      	movne	r3, #0
    42c6:	b2db      	uxtb	r3, r3
    42c8:	e02b      	b.n	4322 <fold_logical_constants+0x146>

    } else if (rule_id == RULE_not_test_2) {
    42ca:	7afb      	ldrb	r3, [r7, #11]
    42cc:	2b1e      	cmp	r3, #30
    42ce:	d127      	bne.n	4320 <fold_logical_constants+0x144>
        // folding for unary logical op: not
        mp_parse_node_t pn = peek_result(parser, 0);
    42d0:	2100      	movs	r1, #0
    42d2:	68f8      	ldr	r0, [r7, #12]
    42d4:	f7ff fe4e 	bl	3f74 <peek_result>
    42d8:	61b8      	str	r0, [r7, #24]
        if (mp_parse_node_is_const_false(pn)) {
    42da:	69b8      	ldr	r0, [r7, #24]
    42dc:	f7ff fca5 	bl	3c2a <mp_parse_node_is_const_false>
    42e0:	4603      	mov	r3, r0
    42e2:	2b00      	cmp	r3, #0
    42e4:	d005      	beq.n	42f2 <fold_logical_constants+0x116>
            pn = mp_parse_node_new_leaf(MP_PARSE_NODE_TOKEN, MP_TOKEN_KW_TRUE);
    42e6:	210f      	movs	r1, #15
    42e8:	200e      	movs	r0, #14
    42ea:	f7ff fb6b 	bl	39c4 <mp_parse_node_new_leaf>
    42ee:	61b8      	str	r0, [r7, #24]
    42f0:	e00d      	b.n	430e <fold_logical_constants+0x132>
        } else if (mp_parse_node_is_const_true(pn)) {
    42f2:	69b8      	ldr	r0, [r7, #24]
    42f4:	f7ff fcb5 	bl	3c62 <mp_parse_node_is_const_true>
    42f8:	4603      	mov	r3, r0
    42fa:	2b00      	cmp	r3, #0
    42fc:	d005      	beq.n	430a <fold_logical_constants+0x12e>
            pn = mp_parse_node_new_leaf(MP_PARSE_NODE_TOKEN, MP_TOKEN_KW_FALSE);
    42fe:	210d      	movs	r1, #13
    4300:	200e      	movs	r0, #14
    4302:	f7ff fb5f 	bl	39c4 <mp_parse_node_new_leaf>
    4306:	61b8      	str	r0, [r7, #24]
    4308:	e001      	b.n	430e <fold_logical_constants+0x132>
        } else {
            return false;
    430a:	2300      	movs	r3, #0
    430c:	e009      	b.n	4322 <fold_logical_constants+0x146>
        }
        pop_result(parser);
    430e:	68f8      	ldr	r0, [r7, #12]
    4310:	f7ff fe0a 	bl	3f28 <pop_result>
        push_result_node(parser, pn);
    4314:	69b9      	ldr	r1, [r7, #24]
    4316:	68f8      	ldr	r0, [r7, #12]
    4318:	f7ff fe54 	bl	3fc4 <push_result_node>
        return true;
    431c:	2301      	movs	r3, #1
    431e:	e000      	b.n	4322 <fold_logical_constants+0x146>
    }

    return false;
    4320:	2300      	movs	r3, #0
}
    4322:	4618      	mov	r0, r3
    4324:	3728      	adds	r7, #40	; 0x28
    4326:	46bd      	mov	sp, r7
    4328:	bd80      	pop	{r7, pc}

0000432a <fold_constants>:

STATIC bool fold_constants(parser_t *parser, uint8_t rule_id, size_t num_args) {
    432a:	b580      	push	{r7, lr}
    432c:	b094      	sub	sp, #80	; 0x50
    432e:	af00      	add	r7, sp, #0
    4330:	60f8      	str	r0, [r7, #12]
    4332:	460b      	mov	r3, r1
    4334:	607a      	str	r2, [r7, #4]
    4336:	72fb      	strb	r3, [r7, #11]
    // this code does folding of arbitrary integer expressions, eg 1 + 2 * 3 + 4
    // it does not do partial folding, eg 1 + 2 + x -> 3 + x

    mp_obj_t arg0;
    if (rule_id == RULE_expr
    4338:	7afb      	ldrb	r3, [r7, #11]
    433a:	2b21      	cmp	r3, #33	; 0x21
    433c:	d005      	beq.n	434a <fold_constants+0x20>
        || rule_id == RULE_xor_expr
    433e:	7afb      	ldrb	r3, [r7, #11]
    4340:	2b22      	cmp	r3, #34	; 0x22
    4342:	d002      	beq.n	434a <fold_constants+0x20>
        || rule_id == RULE_and_expr) {
    4344:	7afb      	ldrb	r3, [r7, #11]
    4346:	2b23      	cmp	r3, #35	; 0x23
    4348:	d149      	bne.n	43de <fold_constants+0xb4>
        // folding for binary ops: | ^ &
        mp_parse_node_t pn = peek_result(parser, num_args - 1);
    434a:	687b      	ldr	r3, [r7, #4]
    434c:	3b01      	subs	r3, #1
    434e:	4619      	mov	r1, r3
    4350:	68f8      	ldr	r0, [r7, #12]
    4352:	f7ff fe0f 	bl	3f74 <peek_result>
    4356:	6238      	str	r0, [r7, #32]
        if (!mp_parse_node_get_int_maybe(pn, &arg0)) {
    4358:	f107 031c 	add.w	r3, r7, #28
    435c:	4619      	mov	r1, r3
    435e:	6a38      	ldr	r0, [r7, #32]
    4360:	f7ff fc9b 	bl	3c9a <mp_parse_node_get_int_maybe>
    4364:	4603      	mov	r3, r0
    4366:	f083 0301 	eor.w	r3, r3, #1
    436a:	b2db      	uxtb	r3, r3
    436c:	2b00      	cmp	r3, #0
    436e:	d001      	beq.n	4374 <fold_constants+0x4a>
            return false;
    4370:	2300      	movs	r3, #0
    4372:	e10a      	b.n	458a <fold_constants+0x260>
        }
        mp_binary_op_t op;
        if (rule_id == RULE_expr) {
    4374:	7afb      	ldrb	r3, [r7, #11]
    4376:	2b21      	cmp	r3, #33	; 0x21
    4378:	d102      	bne.n	4380 <fold_constants+0x56>
            op = MP_BINARY_OP_OR;
    437a:	2315      	movs	r3, #21
    437c:	64fb      	str	r3, [r7, #76]	; 0x4c
    437e:	e007      	b.n	4390 <fold_constants+0x66>
        } else if (rule_id == RULE_xor_expr) {
    4380:	7afb      	ldrb	r3, [r7, #11]
    4382:	2b22      	cmp	r3, #34	; 0x22
    4384:	d102      	bne.n	438c <fold_constants+0x62>
            op = MP_BINARY_OP_XOR;
    4386:	2316      	movs	r3, #22
    4388:	64fb      	str	r3, [r7, #76]	; 0x4c
    438a:	e001      	b.n	4390 <fold_constants+0x66>
        } else {
            op = MP_BINARY_OP_AND;
    438c:	2317      	movs	r3, #23
    438e:	64fb      	str	r3, [r7, #76]	; 0x4c
        }
        for (ssize_t i = num_args - 2; i >= 0; --i) {
    4390:	687b      	ldr	r3, [r7, #4]
    4392:	3b02      	subs	r3, #2
    4394:	64bb      	str	r3, [r7, #72]	; 0x48
    4396:	e01e      	b.n	43d6 <fold_constants+0xac>
            pn = peek_result(parser, i);
    4398:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    439a:	4619      	mov	r1, r3
    439c:	68f8      	ldr	r0, [r7, #12]
    439e:	f7ff fde9 	bl	3f74 <peek_result>
    43a2:	6238      	str	r0, [r7, #32]
            mp_obj_t arg1;
            if (!mp_parse_node_get_int_maybe(pn, &arg1)) {
    43a4:	f107 0318 	add.w	r3, r7, #24
    43a8:	4619      	mov	r1, r3
    43aa:	6a38      	ldr	r0, [r7, #32]
    43ac:	f7ff fc75 	bl	3c9a <mp_parse_node_get_int_maybe>
    43b0:	4603      	mov	r3, r0
    43b2:	f083 0301 	eor.w	r3, r3, #1
    43b6:	b2db      	uxtb	r3, r3
    43b8:	2b00      	cmp	r3, #0
    43ba:	d001      	beq.n	43c0 <fold_constants+0x96>
                return false;
    43bc:	2300      	movs	r3, #0
    43be:	e0e4      	b.n	458a <fold_constants+0x260>
            }
            arg0 = mp_binary_op(op, arg0, arg1);
    43c0:	69fb      	ldr	r3, [r7, #28]
    43c2:	69ba      	ldr	r2, [r7, #24]
    43c4:	4619      	mov	r1, r3
    43c6:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
    43c8:	f007 fc0e 	bl	bbe8 <mp_binary_op>
    43cc:	4603      	mov	r3, r0
    43ce:	61fb      	str	r3, [r7, #28]
        for (ssize_t i = num_args - 2; i >= 0; --i) {
    43d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    43d2:	3b01      	subs	r3, #1
    43d4:	64bb      	str	r3, [r7, #72]	; 0x48
    43d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    43d8:	2b00      	cmp	r3, #0
    43da:	dadd      	bge.n	4398 <fold_constants+0x6e>
        || rule_id == RULE_and_expr) {
    43dc:	e0ab      	b.n	4536 <fold_constants+0x20c>
        }
    } else if (rule_id == RULE_shift_expr
    43de:	7afb      	ldrb	r3, [r7, #11]
    43e0:	2b24      	cmp	r3, #36	; 0x24
    43e2:	d005      	beq.n	43f0 <fold_constants+0xc6>
        || rule_id == RULE_arith_expr
    43e4:	7afb      	ldrb	r3, [r7, #11]
    43e6:	2b25      	cmp	r3, #37	; 0x25
    43e8:	d002      	beq.n	43f0 <fold_constants+0xc6>
        || rule_id == RULE_term) {
    43ea:	7afb      	ldrb	r3, [r7, #11]
    43ec:	2b26      	cmp	r3, #38	; 0x26
    43ee:	d163      	bne.n	44b8 <fold_constants+0x18e>
        // folding for binary ops: << >> + - * / % //
        mp_parse_node_t pn = peek_result(parser, num_args - 1);
    43f0:	687b      	ldr	r3, [r7, #4]
    43f2:	3b01      	subs	r3, #1
    43f4:	4619      	mov	r1, r3
    43f6:	68f8      	ldr	r0, [r7, #12]
    43f8:	f7ff fdbc 	bl	3f74 <peek_result>
    43fc:	6338      	str	r0, [r7, #48]	; 0x30
        if (!mp_parse_node_get_int_maybe(pn, &arg0)) {
    43fe:	f107 031c 	add.w	r3, r7, #28
    4402:	4619      	mov	r1, r3
    4404:	6b38      	ldr	r0, [r7, #48]	; 0x30
    4406:	f7ff fc48 	bl	3c9a <mp_parse_node_get_int_maybe>
    440a:	4603      	mov	r3, r0
    440c:	f083 0301 	eor.w	r3, r3, #1
    4410:	b2db      	uxtb	r3, r3
    4412:	2b00      	cmp	r3, #0
    4414:	d001      	beq.n	441a <fold_constants+0xf0>
            return false;
    4416:	2300      	movs	r3, #0
    4418:	e0b7      	b.n	458a <fold_constants+0x260>
        }
        for (ssize_t i = num_args - 2; i >= 1; i -= 2) {
    441a:	687b      	ldr	r3, [r7, #4]
    441c:	3b02      	subs	r3, #2
    441e:	647b      	str	r3, [r7, #68]	; 0x44
    4420:	e046      	b.n	44b0 <fold_constants+0x186>
            pn = peek_result(parser, i - 1);
    4422:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    4424:	3b01      	subs	r3, #1
    4426:	4619      	mov	r1, r3
    4428:	68f8      	ldr	r0, [r7, #12]
    442a:	f7ff fda3 	bl	3f74 <peek_result>
    442e:	6338      	str	r0, [r7, #48]	; 0x30
            mp_obj_t arg1;
            if (!mp_parse_node_get_int_maybe(pn, &arg1)) {
    4430:	f107 0314 	add.w	r3, r7, #20
    4434:	4619      	mov	r1, r3
    4436:	6b38      	ldr	r0, [r7, #48]	; 0x30
    4438:	f7ff fc2f 	bl	3c9a <mp_parse_node_get_int_maybe>
    443c:	4603      	mov	r3, r0
    443e:	f083 0301 	eor.w	r3, r3, #1
    4442:	b2db      	uxtb	r3, r3
    4444:	2b00      	cmp	r3, #0
    4446:	d001      	beq.n	444c <fold_constants+0x122>
                return false;
    4448:	2300      	movs	r3, #0
    444a:	e09e      	b.n	458a <fold_constants+0x260>
            }
            mp_token_kind_t tok = MP_PARSE_NODE_LEAF_ARG(peek_result(parser, i));
    444c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    444e:	4619      	mov	r1, r3
    4450:	68f8      	ldr	r0, [r7, #12]
    4452:	f7ff fd8f 	bl	3f74 <peek_result>
    4456:	4603      	mov	r3, r0
    4458:	091b      	lsrs	r3, r3, #4
    445a:	62fb      	str	r3, [r7, #44]	; 0x2c
                255,//MP_BINARY_OP_LESS
                MP_BINARY_OP_LSHIFT,
                255,//MP_BINARY_OP_MORE
                MP_BINARY_OP_RSHIFT,
            };
            mp_binary_op_t op = token_to_op[tok - MP_TOKEN_OP_PLUS];
    445c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    445e:	3b2f      	subs	r3, #47	; 0x2f
    4460:	4a4c      	ldr	r2, [pc, #304]	; (4594 <fold_constants+0x26a>)
    4462:	5cd3      	ldrb	r3, [r2, r3]
    4464:	62bb      	str	r3, [r7, #40]	; 0x28
            if (op == (mp_binary_op_t)255) {
    4466:	6abb      	ldr	r3, [r7, #40]	; 0x28
    4468:	2bff      	cmp	r3, #255	; 0xff
    446a:	d101      	bne.n	4470 <fold_constants+0x146>
                return false;
    446c:	2300      	movs	r3, #0
    446e:	e08c      	b.n	458a <fold_constants+0x260>
            }
            int rhs_sign = mp_obj_int_sign(arg1);
    4470:	697b      	ldr	r3, [r7, #20]
    4472:	4618      	mov	r0, r3
    4474:	f00c fc1c 	bl	10cb0 <mp_obj_int_sign>
    4478:	6278      	str	r0, [r7, #36]	; 0x24
            if (op <= MP_BINARY_OP_RSHIFT) {
    447a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    447c:	2b19      	cmp	r3, #25
    447e:	d804      	bhi.n	448a <fold_constants+0x160>
                // << and >> can't have negative rhs
                if (rhs_sign < 0) {
    4480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    4482:	2b00      	cmp	r3, #0
    4484:	da09      	bge.n	449a <fold_constants+0x170>
                    return false;
    4486:	2300      	movs	r3, #0
    4488:	e07f      	b.n	458a <fold_constants+0x260>
                }
            } else if (op >= MP_BINARY_OP_FLOOR_DIVIDE) {
    448a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    448c:	2b1c      	cmp	r3, #28
    448e:	d904      	bls.n	449a <fold_constants+0x170>
                // % and // can't have zero rhs
                if (rhs_sign == 0) {
    4490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    4492:	2b00      	cmp	r3, #0
    4494:	d101      	bne.n	449a <fold_constants+0x170>
                    return false;
    4496:	2300      	movs	r3, #0
    4498:	e077      	b.n	458a <fold_constants+0x260>
                }
            }
            arg0 = mp_binary_op(op, arg0, arg1);
    449a:	69fb      	ldr	r3, [r7, #28]
    449c:	697a      	ldr	r2, [r7, #20]
    449e:	4619      	mov	r1, r3
    44a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    44a2:	f007 fba1 	bl	bbe8 <mp_binary_op>
    44a6:	4603      	mov	r3, r0
    44a8:	61fb      	str	r3, [r7, #28]
        for (ssize_t i = num_args - 2; i >= 1; i -= 2) {
    44aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    44ac:	3b02      	subs	r3, #2
    44ae:	647b      	str	r3, [r7, #68]	; 0x44
    44b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    44b2:	2b00      	cmp	r3, #0
    44b4:	dcb5      	bgt.n	4422 <fold_constants+0xf8>
        || rule_id == RULE_term) {
    44b6:	e03e      	b.n	4536 <fold_constants+0x20c>
        }
    } else if (rule_id == RULE_factor_2) {
    44b8:	7afb      	ldrb	r3, [r7, #11]
    44ba:	2b27      	cmp	r3, #39	; 0x27
    44bc:	d139      	bne.n	4532 <fold_constants+0x208>
        // folding for unary ops: + - ~
        mp_parse_node_t pn = peek_result(parser, 0);
    44be:	2100      	movs	r1, #0
    44c0:	68f8      	ldr	r0, [r7, #12]
    44c2:	f7ff fd57 	bl	3f74 <peek_result>
    44c6:	63b8      	str	r0, [r7, #56]	; 0x38
        if (!mp_parse_node_get_int_maybe(pn, &arg0)) {
    44c8:	f107 031c 	add.w	r3, r7, #28
    44cc:	4619      	mov	r1, r3
    44ce:	6bb8      	ldr	r0, [r7, #56]	; 0x38
    44d0:	f7ff fbe3 	bl	3c9a <mp_parse_node_get_int_maybe>
    44d4:	4603      	mov	r3, r0
    44d6:	f083 0301 	eor.w	r3, r3, #1
    44da:	b2db      	uxtb	r3, r3
    44dc:	2b00      	cmp	r3, #0
    44de:	d001      	beq.n	44e4 <fold_constants+0x1ba>
            return false;
    44e0:	2300      	movs	r3, #0
    44e2:	e052      	b.n	458a <fold_constants+0x260>
        }
        mp_token_kind_t tok = MP_PARSE_NODE_LEAF_ARG(peek_result(parser, 1));
    44e4:	2101      	movs	r1, #1
    44e6:	68f8      	ldr	r0, [r7, #12]
    44e8:	f7ff fd44 	bl	3f74 <peek_result>
    44ec:	4603      	mov	r3, r0
    44ee:	091b      	lsrs	r3, r3, #4
    44f0:	637b      	str	r3, [r7, #52]	; 0x34
        mp_unary_op_t op;
        if (tok == MP_TOKEN_OP_PLUS) {
    44f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    44f4:	2b2f      	cmp	r3, #47	; 0x2f
    44f6:	d102      	bne.n	44fe <fold_constants+0x1d4>
            op = MP_UNARY_OP_POSITIVE;
    44f8:	2300      	movs	r3, #0
    44fa:	643b      	str	r3, [r7, #64]	; 0x40
    44fc:	e011      	b.n	4522 <fold_constants+0x1f8>
        } else if (tok == MP_TOKEN_OP_MINUS) {
    44fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    4500:	2b30      	cmp	r3, #48	; 0x30
    4502:	d102      	bne.n	450a <fold_constants+0x1e0>
            op = MP_UNARY_OP_NEGATIVE;
    4504:	2301      	movs	r3, #1
    4506:	643b      	str	r3, [r7, #64]	; 0x40
    4508:	e00b      	b.n	4522 <fold_constants+0x1f8>
        } else {
            assert(tok == MP_TOKEN_OP_TILDE); // should be
    450a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    450c:	2b3d      	cmp	r3, #61	; 0x3d
    450e:	d006      	beq.n	451e <fold_constants+0x1f4>
    4510:	4b21      	ldr	r3, [pc, #132]	; (4598 <fold_constants+0x26e>)
    4512:	4a22      	ldr	r2, [pc, #136]	; (459c <fold_constants+0x272>)
    4514:	f240 21b3 	movw	r1, #691	; 0x2b3
    4518:	4821      	ldr	r0, [pc, #132]	; (45a0 <fold_constants+0x276>)
    451a:	f018 fce1 	bl	1cee0 <__assert_func>
            op = MP_UNARY_OP_INVERT;
    451e:	2302      	movs	r3, #2
    4520:	643b      	str	r3, [r7, #64]	; 0x40
        }
        arg0 = mp_unary_op(op, arg0);
    4522:	69fb      	ldr	r3, [r7, #28]
    4524:	4619      	mov	r1, r3
    4526:	6c38      	ldr	r0, [r7, #64]	; 0x40
    4528:	f007 fa60 	bl	b9ec <mp_unary_op>
    452c:	4603      	mov	r3, r0
    452e:	61fb      	str	r3, [r7, #28]
    4530:	e001      	b.n	4536 <fold_constants+0x20c>
        }
        arg0 = dest[0];
    #endif

    } else {
        return false;
    4532:	2300      	movs	r3, #0
    4534:	e029      	b.n	458a <fold_constants+0x260>
    }

    // success folding this rule

    for (size_t i = num_args; i > 0; i--) {
    4536:	687b      	ldr	r3, [r7, #4]
    4538:	63fb      	str	r3, [r7, #60]	; 0x3c
    453a:	e005      	b.n	4548 <fold_constants+0x21e>
        pop_result(parser);
    453c:	68f8      	ldr	r0, [r7, #12]
    453e:	f7ff fcf3 	bl	3f28 <pop_result>
    for (size_t i = num_args; i > 0; i--) {
    4542:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    4544:	3b01      	subs	r3, #1
    4546:	63fb      	str	r3, [r7, #60]	; 0x3c
    4548:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    454a:	2b00      	cmp	r3, #0
    454c:	d1f6      	bne.n	453c <fold_constants+0x212>
    }
    if (MP_OBJ_IS_SMALL_INT(arg0)) {
    454e:	69fb      	ldr	r3, [r7, #28]
    4550:	4618      	mov	r0, r3
    4552:	f7ff fa05 	bl	3960 <MP_OBJ_IS_SMALL_INT>
    4556:	4603      	mov	r3, r0
    4558:	2b00      	cmp	r3, #0
    455a:	d00a      	beq.n	4572 <fold_constants+0x248>
        push_result_node(parser, mp_parse_node_new_small_int_checked(parser, arg0));
    455c:	69fb      	ldr	r3, [r7, #28]
    455e:	4619      	mov	r1, r3
    4560:	68f8      	ldr	r0, [r7, #12]
    4562:	f7ff fd77 	bl	4054 <mp_parse_node_new_small_int_checked>
    4566:	4603      	mov	r3, r0
    4568:	4619      	mov	r1, r3
    456a:	68f8      	ldr	r0, [r7, #12]
    456c:	f7ff fd2a 	bl	3fc4 <push_result_node>
    4570:	e00a      	b.n	4588 <fold_constants+0x25e>
    } else {
        // TODO reuse memory for parse node struct?
        push_result_node(parser, make_node_const_object(parser, 0, arg0));
    4572:	69fb      	ldr	r3, [r7, #28]
    4574:	461a      	mov	r2, r3
    4576:	2100      	movs	r1, #0
    4578:	68f8      	ldr	r0, [r7, #12]
    457a:	f7ff fd51 	bl	4020 <make_node_const_object>
    457e:	4603      	mov	r3, r0
    4580:	4619      	mov	r1, r3
    4582:	68f8      	ldr	r0, [r7, #12]
    4584:	f7ff fd1e 	bl	3fc4 <push_result_node>
    }

    return true;
    4588:	2301      	movs	r3, #1
}
    458a:	4618      	mov	r0, r3
    458c:	3750      	adds	r7, #80	; 0x50
    458e:	46bd      	mov	sp, r7
    4590:	bd80      	pop	{r7, pc}
    4592:	bf00      	nop
    4594:	00021b50 	.word	0x00021b50
    4598:	000219f0 	.word	0x000219f0
    459c:	00021b5c 	.word	0x00021b5c
    45a0:	000218f0 	.word	0x000218f0

000045a4 <push_result_rule>:
#endif

STATIC void push_result_rule(parser_t *parser, size_t src_line, uint8_t rule_id, size_t num_args) {
    45a4:	b590      	push	{r4, r7, lr}
    45a6:	b089      	sub	sp, #36	; 0x24
    45a8:	af00      	add	r7, sp, #0
    45aa:	60f8      	str	r0, [r7, #12]
    45ac:	60b9      	str	r1, [r7, #8]
    45ae:	603b      	str	r3, [r7, #0]
    45b0:	4613      	mov	r3, r2
    45b2:	71fb      	strb	r3, [r7, #7]
    // optimise away parenthesis around an expression if possible
    if (rule_id == RULE_atom_paren) {
    45b4:	79fb      	ldrb	r3, [r7, #7]
    45b6:	2b2a      	cmp	r3, #42	; 0x2a
    45b8:	d114      	bne.n	45e4 <push_result_rule+0x40>
        // there should be just 1 arg for this rule
        mp_parse_node_t pn = peek_result(parser, 0);
    45ba:	2100      	movs	r1, #0
    45bc:	68f8      	ldr	r0, [r7, #12]
    45be:	f7ff fcd9 	bl	3f74 <peek_result>
    45c2:	61b8      	str	r0, [r7, #24]
        if (MP_PARSE_NODE_IS_NULL(pn)) {
    45c4:	69bb      	ldr	r3, [r7, #24]
    45c6:	2b00      	cmp	r3, #0
    45c8:	d00c      	beq.n	45e4 <push_result_rule+0x40>
            // need to keep parenthesis for ()
        } else if (MP_PARSE_NODE_IS_STRUCT_KIND(pn, RULE_testlist_comp)) {
    45ca:	69bb      	ldr	r3, [r7, #24]
    45cc:	2b00      	cmp	r3, #0
    45ce:	d045      	beq.n	465c <push_result_rule+0xb8>
    45d0:	69bb      	ldr	r3, [r7, #24]
    45d2:	f003 0303 	and.w	r3, r3, #3
    45d6:	2b00      	cmp	r3, #0
    45d8:	d140      	bne.n	465c <push_result_rule+0xb8>
    45da:	69bb      	ldr	r3, [r7, #24]
    45dc:	685b      	ldr	r3, [r3, #4]
    45de:	b2db      	uxtb	r3, r3
    45e0:	2b8a      	cmp	r3, #138	; 0x8a
    45e2:	d13b      	bne.n	465c <push_result_rule+0xb8>
            return;
        }
    }

    #if MICROPY_COMP_CONST_FOLDING
    if (fold_logical_constants(parser, rule_id, &num_args)) {
    45e4:	463a      	mov	r2, r7
    45e6:	79fb      	ldrb	r3, [r7, #7]
    45e8:	4619      	mov	r1, r3
    45ea:	68f8      	ldr	r0, [r7, #12]
    45ec:	f7ff fdf6 	bl	41dc <fold_logical_constants>
    45f0:	4603      	mov	r3, r0
    45f2:	2b00      	cmp	r3, #0
    45f4:	d134      	bne.n	4660 <push_result_rule+0xbc>
        // we folded this rule so return straight away
        return;
    }
    if (fold_constants(parser, rule_id, num_args)) {
    45f6:	683a      	ldr	r2, [r7, #0]
    45f8:	79fb      	ldrb	r3, [r7, #7]
    45fa:	4619      	mov	r1, r3
    45fc:	68f8      	ldr	r0, [r7, #12]
    45fe:	f7ff fe94 	bl	432a <fold_constants>
    4602:	4603      	mov	r3, r0
    4604:	2b00      	cmp	r3, #0
    4606:	d12d      	bne.n	4664 <push_result_rule+0xc0>
        // we folded this rule so return straight away
        return;
    }
    #endif

    mp_parse_node_struct_t *pn = parser_alloc(parser, sizeof(mp_parse_node_struct_t) + sizeof(mp_parse_node_t) * num_args);
    4608:	683b      	ldr	r3, [r7, #0]
    460a:	3302      	adds	r3, #2
    460c:	009b      	lsls	r3, r3, #2
    460e:	4619      	mov	r1, r3
    4610:	68f8      	ldr	r0, [r7, #12]
    4612:	f7ff fa05 	bl	3a20 <parser_alloc>
    4616:	6178      	str	r0, [r7, #20]
    pn->source_line = src_line;
    4618:	697b      	ldr	r3, [r7, #20]
    461a:	68ba      	ldr	r2, [r7, #8]
    461c:	601a      	str	r2, [r3, #0]
    pn->kind_num_nodes = (rule_id & 0xff) | (num_args << 8);
    461e:	79fa      	ldrb	r2, [r7, #7]
    4620:	683b      	ldr	r3, [r7, #0]
    4622:	021b      	lsls	r3, r3, #8
    4624:	431a      	orrs	r2, r3
    4626:	697b      	ldr	r3, [r7, #20]
    4628:	605a      	str	r2, [r3, #4]
    for (size_t i = num_args; i > 0; i--) {
    462a:	683b      	ldr	r3, [r7, #0]
    462c:	61fb      	str	r3, [r7, #28]
    462e:	e00c      	b.n	464a <push_result_rule+0xa6>
        pn->nodes[i - 1] = pop_result(parser);
    4630:	69fb      	ldr	r3, [r7, #28]
    4632:	1e5c      	subs	r4, r3, #1
    4634:	68f8      	ldr	r0, [r7, #12]
    4636:	f7ff fc77 	bl	3f28 <pop_result>
    463a:	4601      	mov	r1, r0
    463c:	697b      	ldr	r3, [r7, #20]
    463e:	1ca2      	adds	r2, r4, #2
    4640:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (size_t i = num_args; i > 0; i--) {
    4644:	69fb      	ldr	r3, [r7, #28]
    4646:	3b01      	subs	r3, #1
    4648:	61fb      	str	r3, [r7, #28]
    464a:	69fb      	ldr	r3, [r7, #28]
    464c:	2b00      	cmp	r3, #0
    464e:	d1ef      	bne.n	4630 <push_result_rule+0x8c>
    }
    push_result_node(parser, (mp_parse_node_t)pn);
    4650:	697b      	ldr	r3, [r7, #20]
    4652:	4619      	mov	r1, r3
    4654:	68f8      	ldr	r0, [r7, #12]
    4656:	f7ff fcb5 	bl	3fc4 <push_result_node>
    465a:	e004      	b.n	4666 <push_result_rule+0xc2>
            return;
    465c:	bf00      	nop
    465e:	e002      	b.n	4666 <push_result_rule+0xc2>
        return;
    4660:	bf00      	nop
    4662:	e000      	b.n	4666 <push_result_rule+0xc2>
        return;
    4664:	bf00      	nop
}
    4666:	3724      	adds	r7, #36	; 0x24
    4668:	46bd      	mov	sp, r7
    466a:	bd90      	pop	{r4, r7, pc}

0000466c <mp_parse>:

mp_parse_tree_t mp_parse(mp_lexer_t *lex, mp_parse_input_kind_t input_kind) {
    466c:	b580      	push	{r7, lr}
    466e:	b0a2      	sub	sp, #136	; 0x88
    4670:	af00      	add	r7, sp, #0
    4672:	60f8      	str	r0, [r7, #12]
    4674:	60b9      	str	r1, [r7, #8]
    4676:	607a      	str	r2, [r7, #4]

    // initialise parser and allocate memory for its stacks

    parser_t parser;

    parser.rule_stack_alloc = MICROPY_ALLOC_PARSE_RULE_INIT;
    4678:	2340      	movs	r3, #64	; 0x40
    467a:	61fb      	str	r3, [r7, #28]
    parser.rule_stack_top = 0;
    467c:	2300      	movs	r3, #0
    467e:	623b      	str	r3, [r7, #32]
    parser.rule_stack = m_new(rule_stack_t, parser.rule_stack_alloc);
    4680:	69fb      	ldr	r3, [r7, #28]
    4682:	00db      	lsls	r3, r3, #3
    4684:	4618      	mov	r0, r3
    4686:	f7fb fe49 	bl	31c <m_malloc>
    468a:	4603      	mov	r3, r0
    468c:	627b      	str	r3, [r7, #36]	; 0x24

    parser.result_stack_alloc = MICROPY_ALLOC_PARSE_RESULT_INIT;
    468e:	2320      	movs	r3, #32
    4690:	62bb      	str	r3, [r7, #40]	; 0x28
    parser.result_stack_top = 0;
    4692:	2300      	movs	r3, #0
    4694:	62fb      	str	r3, [r7, #44]	; 0x2c
    parser.result_stack = m_new(mp_parse_node_t, parser.result_stack_alloc);
    4696:	6abb      	ldr	r3, [r7, #40]	; 0x28
    4698:	009b      	lsls	r3, r3, #2
    469a:	4618      	mov	r0, r3
    469c:	f7fb fe3e 	bl	31c <m_malloc>
    46a0:	4603      	mov	r3, r0
    46a2:	633b      	str	r3, [r7, #48]	; 0x30

    parser.lexer = lex;
    46a4:	68bb      	ldr	r3, [r7, #8]
    46a6:	637b      	str	r3, [r7, #52]	; 0x34

    parser.tree.chunk = NULL;
    46a8:	2300      	movs	r3, #0
    46aa:	63fb      	str	r3, [r7, #60]	; 0x3c
    parser.cur_chunk = NULL;
    46ac:	2300      	movs	r3, #0
    46ae:	643b      	str	r3, [r7, #64]	; 0x40
    mp_map_init(&parser.consts, 0);
    #endif

    // work out the top-level rule to use, and push it on the stack
    size_t top_level_rule;
    switch (input_kind) {
    46b0:	687b      	ldr	r3, [r7, #4]
    46b2:	2b00      	cmp	r3, #0
    46b4:	d002      	beq.n	46bc <mp_parse+0x50>
    46b6:	2b02      	cmp	r3, #2
    46b8:	d004      	beq.n	46c4 <mp_parse+0x58>
    46ba:	e007      	b.n	46cc <mp_parse+0x60>
        case MP_PARSE_SINGLE_INPUT: top_level_rule = RULE_single_input; break;
    46bc:	2336      	movs	r3, #54	; 0x36
    46be:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    46c2:	e006      	b.n	46d2 <mp_parse+0x66>
        case MP_PARSE_EVAL_INPUT: top_level_rule = RULE_eval_input; break;
    46c4:	2338      	movs	r3, #56	; 0x38
    46c6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    46ca:	e002      	b.n	46d2 <mp_parse+0x66>
        default: top_level_rule = RULE_file_input;
    46cc:	2300      	movs	r3, #0
    46ce:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    }
    push_rule(&parser, lex->tok_line, top_level_rule, 0);
    46d2:	68bb      	ldr	r3, [r7, #8]
    46d4:	6b99      	ldr	r1, [r3, #56]	; 0x38
    46d6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
    46da:	b2da      	uxtb	r2, r3
    46dc:	f107 001c 	add.w	r0, r7, #28
    46e0:	2300      	movs	r3, #0
    46e2:	f7ff fa06 	bl	3af2 <push_rule>

    // parse!

    bool backtrack = false;
    46e6:	2300      	movs	r3, #0
    46e8:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83

    for (;;) {
        next_rule:
        if (parser.rule_stack_top == 0) {
    46ec:	6a3b      	ldr	r3, [r7, #32]
    46ee:	2b00      	cmp	r3, #0
    46f0:	d104      	bne.n	46fc <mp_parse+0x90>
    #if MICROPY_COMP_CONST
    mp_map_deinit(&parser.consts);
    #endif

    // truncate final chunk and link into chain of chunks
    if (parser.cur_chunk != NULL) {
    46f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    46f4:	2b00      	cmp	r3, #0
    46f6:	f040 8292 	bne.w	4c1e <mp_parse+0x5b2>
    46fa:	e2a1      	b.n	4c40 <mp_parse+0x5d4>
        uint8_t rule_id = pop_rule(&parser, &i, &rule_src_line);
    46fc:	f107 0214 	add.w	r2, r7, #20
    4700:	f107 0118 	add.w	r1, r7, #24
    4704:	f107 031c 	add.w	r3, r7, #28
    4708:	4618      	mov	r0, r3
    470a:	f7ff fa5f 	bl	3bcc <pop_rule>
    470e:	4603      	mov	r3, r0
    4710:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        uint8_t rule_act = rule_act_table[rule_id];
    4714:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
    4718:	4ab2      	ldr	r2, [pc, #712]	; (49e4 <mp_parse+0x378>)
    471a:	5cd3      	ldrb	r3, [r2, r3]
    471c:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
        const uint16_t *rule_arg = get_rule_arg(rule_id);
    4720:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
    4724:	4618      	mov	r0, r3
    4726:	f7ff f95c 	bl	39e2 <get_rule_arg>
    472a:	6638      	str	r0, [r7, #96]	; 0x60
        size_t n = rule_act & RULE_ACT_ARG_MASK;
    472c:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
    4730:	f003 030f 	and.w	r3, r3, #15
    4734:	65fb      	str	r3, [r7, #92]	; 0x5c
        switch (rule_act & RULE_ACT_KIND_MASK) {
    4736:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
    473a:	f003 0330 	and.w	r3, r3, #48	; 0x30
    473e:	2b10      	cmp	r3, #16
    4740:	d002      	beq.n	4748 <mp_parse+0xdc>
    4742:	2b20      	cmp	r3, #32
    4744:	d067      	beq.n	4816 <mp_parse+0x1aa>
    4746:	e1aa      	b.n	4a9e <mp_parse+0x432>
                if (i > 0 && !backtrack) {
    4748:	69bb      	ldr	r3, [r7, #24]
    474a:	2b00      	cmp	r3, #0
    474c:	d006      	beq.n	475c <mp_parse+0xf0>
    474e:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
    4752:	f083 0301 	eor.w	r3, r3, #1
    4756:	b2db      	uxtb	r3, r3
    4758:	2b00      	cmp	r3, #0
    475a:	d1c7      	bne.n	46ec <mp_parse+0x80>
                    backtrack = false;
    475c:	2300      	movs	r3, #0
    475e:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
                for (; i < n; ++i) {
    4762:	e050      	b.n	4806 <mp_parse+0x19a>
                    uint16_t kind = rule_arg[i] & RULE_ARG_KIND_MASK;
    4764:	69bb      	ldr	r3, [r7, #24]
    4766:	005b      	lsls	r3, r3, #1
    4768:	6e3a      	ldr	r2, [r7, #96]	; 0x60
    476a:	4413      	add	r3, r2
    476c:	881b      	ldrh	r3, [r3, #0]
    476e:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
    4772:	f023 030f 	bic.w	r3, r3, #15
    4776:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
                    if (kind == RULE_ARG_TOK) {
    477a:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
    477e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    4782:	d116      	bne.n	47b2 <mp_parse+0x146>
                        if (lex->tok_kind == (rule_arg[i] & RULE_ARG_ARG_MASK)) {
    4784:	68bb      	ldr	r3, [r7, #8]
    4786:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    4788:	69bb      	ldr	r3, [r7, #24]
    478a:	005b      	lsls	r3, r3, #1
    478c:	6e39      	ldr	r1, [r7, #96]	; 0x60
    478e:	440b      	add	r3, r1
    4790:	881b      	ldrh	r3, [r3, #0]
    4792:	f3c3 030b 	ubfx	r3, r3, #0, #12
    4796:	429a      	cmp	r2, r3
    4798:	d132      	bne.n	4800 <mp_parse+0x194>
                            push_result_token(&parser, rule_id);
    479a:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
    479e:	f107 031c 	add.w	r3, r7, #28
    47a2:	4611      	mov	r1, r2
    47a4:	4618      	mov	r0, r3
    47a6:	f7ff fc65 	bl	4074 <push_result_token>
                            mp_lexer_to_next(lex);
    47aa:	68b8      	ldr	r0, [r7, #8]
    47ac:	f7fe fd63 	bl	3276 <mp_lexer_to_next>
                            goto next_rule;
    47b0:	e79c      	b.n	46ec <mp_parse+0x80>
                        assert(kind == RULE_ARG_RULE);
    47b2:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
    47b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
    47ba:	d006      	beq.n	47ca <mp_parse+0x15e>
    47bc:	4b8a      	ldr	r3, [pc, #552]	; (49e8 <mp_parse+0x37c>)
    47be:	4a8b      	ldr	r2, [pc, #556]	; (49ec <mp_parse+0x380>)
    47c0:	f240 318b 	movw	r1, #907	; 0x38b
    47c4:	488a      	ldr	r0, [pc, #552]	; (49f0 <mp_parse+0x384>)
    47c6:	f018 fb8b 	bl	1cee0 <__assert_func>
                        if (i + 1 < n) {
    47ca:	69bb      	ldr	r3, [r7, #24]
    47cc:	1c5a      	adds	r2, r3, #1
    47ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    47d0:	429a      	cmp	r2, r3
    47d2:	d208      	bcs.n	47e6 <mp_parse+0x17a>
                            push_rule(&parser, rule_src_line, rule_id, i + 1); // save this or-rule
    47d4:	6979      	ldr	r1, [r7, #20]
    47d6:	69bb      	ldr	r3, [r7, #24]
    47d8:	3301      	adds	r3, #1
    47da:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
    47de:	f107 001c 	add.w	r0, r7, #28
    47e2:	f7ff f986 	bl	3af2 <push_rule>
                        push_rule_from_arg(&parser, rule_arg[i]); // push child of or-rule
    47e6:	69bb      	ldr	r3, [r7, #24]
    47e8:	005b      	lsls	r3, r3, #1
    47ea:	6e3a      	ldr	r2, [r7, #96]	; 0x60
    47ec:	4413      	add	r3, r2
    47ee:	881b      	ldrh	r3, [r3, #0]
    47f0:	461a      	mov	r2, r3
    47f2:	f107 031c 	add.w	r3, r7, #28
    47f6:	4611      	mov	r1, r2
    47f8:	4618      	mov	r0, r3
    47fa:	f7ff f9b8 	bl	3b6e <push_rule_from_arg>
                        goto next_rule;
    47fe:	e775      	b.n	46ec <mp_parse+0x80>
                for (; i < n; ++i) {
    4800:	69bb      	ldr	r3, [r7, #24]
    4802:	3301      	adds	r3, #1
    4804:	61bb      	str	r3, [r7, #24]
    4806:	69ba      	ldr	r2, [r7, #24]
    4808:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    480a:	429a      	cmp	r2, r3
    480c:	d3aa      	bcc.n	4764 <mp_parse+0xf8>
                backtrack = true;
    480e:	2301      	movs	r3, #1
    4810:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
                break;
    4814:	e202      	b.n	4c1c <mp_parse+0x5b0>
                if (backtrack) {
    4816:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
    481a:	2b00      	cmp	r3, #0
    481c:	d06c      	beq.n	48f8 <mp_parse+0x28c>
                    assert(i > 0);
    481e:	69bb      	ldr	r3, [r7, #24]
    4820:	2b00      	cmp	r3, #0
    4822:	d106      	bne.n	4832 <mp_parse+0x1c6>
    4824:	4b73      	ldr	r3, [pc, #460]	; (49f4 <mp_parse+0x388>)
    4826:	4a71      	ldr	r2, [pc, #452]	; (49ec <mp_parse+0x380>)
    4828:	f240 319a 	movw	r1, #922	; 0x39a
    482c:	4870      	ldr	r0, [pc, #448]	; (49f0 <mp_parse+0x384>)
    482e:	f018 fb57 	bl	1cee0 <__assert_func>
                    if ((rule_arg[i - 1] & RULE_ARG_KIND_MASK) == RULE_ARG_OPT_RULE) {
    4832:	69bb      	ldr	r3, [r7, #24]
    4834:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
    4838:	3b01      	subs	r3, #1
    483a:	005b      	lsls	r3, r3, #1
    483c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
    483e:	4413      	add	r3, r2
    4840:	881b      	ldrh	r3, [r3, #0]
    4842:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
    4846:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
    484a:	d109      	bne.n	4860 <mp_parse+0x1f4>
                        push_result_node(&parser, MP_PARSE_NODE_NULL);
    484c:	f107 031c 	add.w	r3, r7, #28
    4850:	2100      	movs	r1, #0
    4852:	4618      	mov	r0, r3
    4854:	f7ff fbb6 	bl	3fc4 <push_result_node>
                        backtrack = false;
    4858:	2300      	movs	r3, #0
    485a:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
    485e:	e04b      	b.n	48f8 <mp_parse+0x28c>
                        if (i > 1) {
    4860:	69bb      	ldr	r3, [r7, #24]
    4862:	2b01      	cmp	r3, #1
    4864:	f200 81f4 	bhi.w	4c50 <mp_parse+0x5e4>
                            goto next_rule;
    4868:	e740      	b.n	46ec <mp_parse+0x80>
                    if ((rule_arg[i] & RULE_ARG_KIND_MASK) == RULE_ARG_TOK) {
    486a:	69bb      	ldr	r3, [r7, #24]
    486c:	005b      	lsls	r3, r3, #1
    486e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
    4870:	4413      	add	r3, r2
    4872:	881b      	ldrh	r3, [r3, #0]
    4874:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
    4878:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    487c:	d123      	bne.n	48c6 <mp_parse+0x25a>
                        mp_token_kind_t tok_kind = rule_arg[i] & RULE_ARG_ARG_MASK;
    487e:	69bb      	ldr	r3, [r7, #24]
    4880:	005b      	lsls	r3, r3, #1
    4882:	6e3a      	ldr	r2, [r7, #96]	; 0x60
    4884:	4413      	add	r3, r2
    4886:	881b      	ldrh	r3, [r3, #0]
    4888:	f3c3 030b 	ubfx	r3, r3, #0, #12
    488c:	657b      	str	r3, [r7, #84]	; 0x54
                        if (lex->tok_kind == tok_kind) {
    488e:	68bb      	ldr	r3, [r7, #8]
    4890:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    4892:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    4894:	429a      	cmp	r2, r3
    4896:	d10e      	bne.n	48b6 <mp_parse+0x24a>
                            if (tok_kind == MP_TOKEN_NAME) {
    4898:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    489a:	2b07      	cmp	r3, #7
    489c:	d107      	bne.n	48ae <mp_parse+0x242>
                                push_result_token(&parser, rule_id);
    489e:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
    48a2:	f107 031c 	add.w	r3, r7, #28
    48a6:	4611      	mov	r1, r2
    48a8:	4618      	mov	r0, r3
    48aa:	f7ff fbe3 	bl	4074 <push_result_token>
                            mp_lexer_to_next(lex);
    48ae:	68b8      	ldr	r0, [r7, #8]
    48b0:	f7fe fce1 	bl	3276 <mp_lexer_to_next>
    48b4:	e01d      	b.n	48f2 <mp_parse+0x286>
                            if (i > 0) {
    48b6:	69bb      	ldr	r3, [r7, #24]
    48b8:	2b00      	cmp	r3, #0
    48ba:	f040 81cb 	bne.w	4c54 <mp_parse+0x5e8>
                                backtrack = true;
    48be:	2301      	movs	r3, #1
    48c0:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
                                goto next_rule;
    48c4:	e712      	b.n	46ec <mp_parse+0x80>
                        push_rule(&parser, rule_src_line, rule_id, i + 1); // save this and-rule
    48c6:	6979      	ldr	r1, [r7, #20]
    48c8:	69bb      	ldr	r3, [r7, #24]
    48ca:	3301      	adds	r3, #1
    48cc:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
    48d0:	f107 001c 	add.w	r0, r7, #28
    48d4:	f7ff f90d 	bl	3af2 <push_rule>
                        push_rule_from_arg(&parser, rule_arg[i]); // push child of and-rule
    48d8:	69bb      	ldr	r3, [r7, #24]
    48da:	005b      	lsls	r3, r3, #1
    48dc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
    48de:	4413      	add	r3, r2
    48e0:	881b      	ldrh	r3, [r3, #0]
    48e2:	461a      	mov	r2, r3
    48e4:	f107 031c 	add.w	r3, r7, #28
    48e8:	4611      	mov	r1, r2
    48ea:	4618      	mov	r0, r3
    48ec:	f7ff f93f 	bl	3b6e <push_rule_from_arg>
                        goto next_rule;
    48f0:	e6fc      	b.n	46ec <mp_parse+0x80>
                for (; i < n; ++i) {
    48f2:	69bb      	ldr	r3, [r7, #24]
    48f4:	3301      	adds	r3, #1
    48f6:	61bb      	str	r3, [r7, #24]
    48f8:	69ba      	ldr	r2, [r7, #24]
    48fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    48fc:	429a      	cmp	r2, r3
    48fe:	d3b4      	bcc.n	486a <mp_parse+0x1fe>
                assert(i == n);
    4900:	69ba      	ldr	r2, [r7, #24]
    4902:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    4904:	429a      	cmp	r2, r3
    4906:	d006      	beq.n	4916 <mp_parse+0x2aa>
    4908:	4b3b      	ldr	r3, [pc, #236]	; (49f8 <mp_parse+0x38c>)
    490a:	4a38      	ldr	r2, [pc, #224]	; (49ec <mp_parse+0x380>)
    490c:	f240 31c7 	movw	r1, #967	; 0x3c7
    4910:	4837      	ldr	r0, [pc, #220]	; (49f0 <mp_parse+0x384>)
    4912:	f018 fae5 	bl	1cee0 <__assert_func>
                if (input_kind != MP_PARSE_SINGLE_INPUT && rule_id == RULE_expr_stmt && peek_result(&parser, 0) == MP_PARSE_NODE_NULL) {
    4916:	687b      	ldr	r3, [r7, #4]
    4918:	2b00      	cmp	r3, #0
    491a:	d03c      	beq.n	4996 <mp_parse+0x32a>
    491c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
    4920:	2b05      	cmp	r3, #5
    4922:	d138      	bne.n	4996 <mp_parse+0x32a>
    4924:	f107 031c 	add.w	r3, r7, #28
    4928:	2100      	movs	r1, #0
    492a:	4618      	mov	r0, r3
    492c:	f7ff fb22 	bl	3f74 <peek_result>
    4930:	4603      	mov	r3, r0
    4932:	2b00      	cmp	r3, #0
    4934:	d12f      	bne.n	4996 <mp_parse+0x32a>
                    mp_parse_node_t p = peek_result(&parser, 1);
    4936:	f107 031c 	add.w	r3, r7, #28
    493a:	2101      	movs	r1, #1
    493c:	4618      	mov	r0, r3
    493e:	f7ff fb19 	bl	3f74 <peek_result>
    4942:	6538      	str	r0, [r7, #80]	; 0x50
                    if ((MP_PARSE_NODE_IS_LEAF(p) && !MP_PARSE_NODE_IS_ID(p))
    4944:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    4946:	f003 0303 	and.w	r3, r3, #3
    494a:	2b00      	cmp	r3, #0
    494c:	d004      	beq.n	4958 <mp_parse+0x2ec>
    494e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    4950:	f003 030f 	and.w	r3, r3, #15
    4954:	2b02      	cmp	r3, #2
    4956:	d10c      	bne.n	4972 <mp_parse+0x306>
                        || MP_PARSE_NODE_IS_STRUCT_KIND(p, RULE_const_object)) {
    4958:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    495a:	2b00      	cmp	r3, #0
    495c:	d01b      	beq.n	4996 <mp_parse+0x32a>
    495e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    4960:	f003 0303 	and.w	r3, r3, #3
    4964:	2b00      	cmp	r3, #0
    4966:	d116      	bne.n	4996 <mp_parse+0x32a>
    4968:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    496a:	685b      	ldr	r3, [r3, #4]
    496c:	b2db      	uxtb	r3, r3
    496e:	2b35      	cmp	r3, #53	; 0x35
    4970:	d111      	bne.n	4996 <mp_parse+0x32a>
                        pop_result(&parser); // MP_PARSE_NODE_NULL
    4972:	f107 031c 	add.w	r3, r7, #28
    4976:	4618      	mov	r0, r3
    4978:	f7ff fad6 	bl	3f28 <pop_result>
                        pop_result(&parser); // const expression (leaf or RULE_const_object)
    497c:	f107 031c 	add.w	r3, r7, #28
    4980:	4618      	mov	r0, r3
    4982:	f7ff fad1 	bl	3f28 <pop_result>
                        push_result_rule(&parser, rule_src_line, RULE_pass_stmt, 0);
    4986:	6979      	ldr	r1, [r7, #20]
    4988:	f107 001c 	add.w	r0, r7, #28
    498c:	2300      	movs	r3, #0
    498e:	2208      	movs	r2, #8
    4990:	f7ff fe08 	bl	45a4 <push_result_rule>
                        break;
    4994:	e142      	b.n	4c1c <mp_parse+0x5b0>
                i = 0;
    4996:	2300      	movs	r3, #0
    4998:	61bb      	str	r3, [r7, #24]
                size_t num_not_nil = 0;
    499a:	2300      	movs	r3, #0
    499c:	67fb      	str	r3, [r7, #124]	; 0x7c
                for (size_t x = n; x > 0;) {
    499e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    49a0:	67bb      	str	r3, [r7, #120]	; 0x78
    49a2:	e03b      	b.n	4a1c <mp_parse+0x3b0>
                    --x;
    49a4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    49a6:	3b01      	subs	r3, #1
    49a8:	67bb      	str	r3, [r7, #120]	; 0x78
                    if ((rule_arg[x] & RULE_ARG_KIND_MASK) == RULE_ARG_TOK) {
    49aa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    49ac:	005b      	lsls	r3, r3, #1
    49ae:	6e3a      	ldr	r2, [r7, #96]	; 0x60
    49b0:	4413      	add	r3, r2
    49b2:	881b      	ldrh	r3, [r3, #0]
    49b4:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
    49b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    49bc:	d11e      	bne.n	49fc <mp_parse+0x390>
                        mp_token_kind_t tok_kind = rule_arg[x] & RULE_ARG_ARG_MASK;
    49be:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    49c0:	005b      	lsls	r3, r3, #1
    49c2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
    49c4:	4413      	add	r3, r2
    49c6:	881b      	ldrh	r3, [r3, #0]
    49c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
    49cc:	64fb      	str	r3, [r7, #76]	; 0x4c
                        if (tok_kind == MP_TOKEN_NAME) {
    49ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    49d0:	2b07      	cmp	r3, #7
    49d2:	d123      	bne.n	4a1c <mp_parse+0x3b0>
                            i += 1;
    49d4:	69bb      	ldr	r3, [r7, #24]
    49d6:	3301      	adds	r3, #1
    49d8:	61bb      	str	r3, [r7, #24]
                            num_not_nil += 1;
    49da:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    49dc:	3301      	adds	r3, #1
    49de:	67fb      	str	r3, [r7, #124]	; 0x7c
    49e0:	e01c      	b.n	4a1c <mp_parse+0x3b0>
    49e2:	bf00      	nop
    49e4:	00021400 	.word	0x00021400
    49e8:	00021a0c 	.word	0x00021a0c
    49ec:	00021b6c 	.word	0x00021b6c
    49f0:	000218f0 	.word	0x000218f0
    49f4:	00021a24 	.word	0x00021a24
    49f8:	00021a2c 	.word	0x00021a2c
                        if (peek_result(&parser, i) != MP_PARSE_NODE_NULL) {
    49fc:	69ba      	ldr	r2, [r7, #24]
    49fe:	f107 031c 	add.w	r3, r7, #28
    4a02:	4611      	mov	r1, r2
    4a04:	4618      	mov	r0, r3
    4a06:	f7ff fab5 	bl	3f74 <peek_result>
    4a0a:	4603      	mov	r3, r0
    4a0c:	2b00      	cmp	r3, #0
    4a0e:	d002      	beq.n	4a16 <mp_parse+0x3aa>
                            num_not_nil += 1;
    4a10:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    4a12:	3301      	adds	r3, #1
    4a14:	67fb      	str	r3, [r7, #124]	; 0x7c
                        i += 1;
    4a16:	69bb      	ldr	r3, [r7, #24]
    4a18:	3301      	adds	r3, #1
    4a1a:	61bb      	str	r3, [r7, #24]
                for (size_t x = n; x > 0;) {
    4a1c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    4a1e:	2b00      	cmp	r3, #0
    4a20:	d1c0      	bne.n	49a4 <mp_parse+0x338>
                if (num_not_nil == 1 && (rule_act & RULE_ACT_ALLOW_IDENT)) {
    4a22:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    4a24:	2b01      	cmp	r3, #1
    4a26:	d124      	bne.n	4a72 <mp_parse+0x406>
    4a28:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
    4a2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
    4a30:	2b00      	cmp	r3, #0
    4a32:	d01e      	beq.n	4a72 <mp_parse+0x406>
                    mp_parse_node_t pn = MP_PARSE_NODE_NULL;
    4a34:	2300      	movs	r3, #0
    4a36:	677b      	str	r3, [r7, #116]	; 0x74
                    for (size_t x = 0; x < i; ++x) {
    4a38:	2300      	movs	r3, #0
    4a3a:	673b      	str	r3, [r7, #112]	; 0x70
    4a3c:	e00d      	b.n	4a5a <mp_parse+0x3ee>
                        mp_parse_node_t pn2 = pop_result(&parser);
    4a3e:	f107 031c 	add.w	r3, r7, #28
    4a42:	4618      	mov	r0, r3
    4a44:	f7ff fa70 	bl	3f28 <pop_result>
    4a48:	64b8      	str	r0, [r7, #72]	; 0x48
                        if (pn2 != MP_PARSE_NODE_NULL) {
    4a4a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    4a4c:	2b00      	cmp	r3, #0
    4a4e:	d001      	beq.n	4a54 <mp_parse+0x3e8>
                            pn = pn2;
    4a50:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    4a52:	677b      	str	r3, [r7, #116]	; 0x74
                    for (size_t x = 0; x < i; ++x) {
    4a54:	6f3b      	ldr	r3, [r7, #112]	; 0x70
    4a56:	3301      	adds	r3, #1
    4a58:	673b      	str	r3, [r7, #112]	; 0x70
    4a5a:	69bb      	ldr	r3, [r7, #24]
    4a5c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
    4a5e:	429a      	cmp	r2, r3
    4a60:	d3ed      	bcc.n	4a3e <mp_parse+0x3d2>
                    push_result_node(&parser, pn);
    4a62:	f107 031c 	add.w	r3, r7, #28
    4a66:	6f79      	ldr	r1, [r7, #116]	; 0x74
    4a68:	4618      	mov	r0, r3
    4a6a:	f7ff faab 	bl	3fc4 <push_result_node>
                if (num_not_nil == 1 && (rule_act & RULE_ACT_ALLOW_IDENT)) {
    4a6e:	bf00      	nop
                break;
    4a70:	e0d4      	b.n	4c1c <mp_parse+0x5b0>
                    if (rule_act & RULE_ACT_ADD_BLANK) {
    4a72:	f997 3066 	ldrsb.w	r3, [r7, #102]	; 0x66
    4a76:	2b00      	cmp	r3, #0
    4a78:	da08      	bge.n	4a8c <mp_parse+0x420>
                        push_result_node(&parser, MP_PARSE_NODE_NULL);
    4a7a:	f107 031c 	add.w	r3, r7, #28
    4a7e:	2100      	movs	r1, #0
    4a80:	4618      	mov	r0, r3
    4a82:	f7ff fa9f 	bl	3fc4 <push_result_node>
                        i += 1;
    4a86:	69bb      	ldr	r3, [r7, #24]
    4a88:	3301      	adds	r3, #1
    4a8a:	61bb      	str	r3, [r7, #24]
                    push_result_rule(&parser, rule_src_line, rule_id, i);
    4a8c:	6979      	ldr	r1, [r7, #20]
    4a8e:	69bb      	ldr	r3, [r7, #24]
    4a90:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
    4a94:	f107 001c 	add.w	r0, r7, #28
    4a98:	f7ff fd84 	bl	45a4 <push_result_rule>
                break;
    4a9c:	e0be      	b.n	4c1c <mp_parse+0x5b0>
                assert((rule_act & RULE_ACT_KIND_MASK) == RULE_ACT_LIST);
    4a9e:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
    4aa2:	f003 0330 	and.w	r3, r3, #48	; 0x30
    4aa6:	2b30      	cmp	r3, #48	; 0x30
    4aa8:	d006      	beq.n	4ab8 <mp_parse+0x44c>
    4aaa:	4b90      	ldr	r3, [pc, #576]	; (4cec <mp_parse+0x680>)
    4aac:	4a90      	ldr	r2, [pc, #576]	; (4cf0 <mp_parse+0x684>)
    4aae:	f240 410a 	movw	r1, #1034	; 0x40a
    4ab2:	4890      	ldr	r0, [pc, #576]	; (4cf4 <mp_parse+0x688>)
    4ab4:	f018 fa14 	bl	1cee0 <__assert_func>
                if (backtrack) {
    4ab8:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
    4abc:	2b00      	cmp	r3, #0
    4abe:	d025      	beq.n	4b0c <mp_parse+0x4a0>
                    had_trailing_sep = false;
    4ac0:	2300      	movs	r3, #0
    4ac2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
                    if (n == 2) {
    4ac6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    4ac8:	2b02      	cmp	r3, #2
    4aca:	d107      	bne.n	4adc <mp_parse+0x470>
                        if (i == 1) {
    4acc:	69bb      	ldr	r3, [r7, #24]
    4ace:	2b01      	cmp	r3, #1
    4ad0:	d100      	bne.n	4ad4 <mp_parse+0x468>
                            goto next_rule;
    4ad2:	e60b      	b.n	46ec <mp_parse+0x80>
                            backtrack = false;
    4ad4:	2300      	movs	r3, #0
    4ad6:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
    4ada:	e068      	b.n	4bae <mp_parse+0x542>
                        if (i == 1) {
    4adc:	69bb      	ldr	r3, [r7, #24]
    4ade:	2b01      	cmp	r3, #1
    4ae0:	d100      	bne.n	4ae4 <mp_parse+0x478>
                            goto next_rule;
    4ae2:	e603      	b.n	46ec <mp_parse+0x80>
                        } else if ((i & 1) == 1) {
    4ae4:	69bb      	ldr	r3, [r7, #24]
    4ae6:	f003 0301 	and.w	r3, r3, #1
    4aea:	2b00      	cmp	r3, #0
    4aec:	d00a      	beq.n	4b04 <mp_parse+0x498>
                            if (n == 3) {
    4aee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    4af0:	2b03      	cmp	r3, #3
    4af2:	f040 80b1 	bne.w	4c58 <mp_parse+0x5ec>
                                had_trailing_sep = true;
    4af6:	2301      	movs	r3, #1
    4af8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
                                backtrack = false;
    4afc:	2300      	movs	r3, #0
    4afe:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
    4b02:	e054      	b.n	4bae <mp_parse+0x542>
                            backtrack = false;
    4b04:	2300      	movs	r3, #0
    4b06:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
    4b0a:	e050      	b.n	4bae <mp_parse+0x542>
                        size_t arg = rule_arg[i & 1 & n];
    4b0c:	69ba      	ldr	r2, [r7, #24]
    4b0e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    4b10:	4013      	ands	r3, r2
    4b12:	f003 0301 	and.w	r3, r3, #1
    4b16:	005b      	lsls	r3, r3, #1
    4b18:	6e3a      	ldr	r2, [r7, #96]	; 0x60
    4b1a:	4413      	add	r3, r2
    4b1c:	881b      	ldrh	r3, [r3, #0]
    4b1e:	647b      	str	r3, [r7, #68]	; 0x44
                        if ((arg & RULE_ARG_KIND_MASK) == RULE_ARG_TOK) {
    4b20:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    4b22:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
    4b26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    4b2a:	d123      	bne.n	4b74 <mp_parse+0x508>
                            if (lex->tok_kind == (arg & RULE_ARG_ARG_MASK)) {
    4b2c:	68bb      	ldr	r3, [r7, #8]
    4b2e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    4b30:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    4b32:	f3c3 030b 	ubfx	r3, r3, #0, #12
    4b36:	429a      	cmp	r2, r3
    4b38:	d115      	bne.n	4b66 <mp_parse+0x4fa>
                                if (i & 1 & n) {
    4b3a:	69ba      	ldr	r2, [r7, #24]
    4b3c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    4b3e:	4013      	ands	r3, r2
    4b40:	f003 0301 	and.w	r3, r3, #1
    4b44:	2b00      	cmp	r3, #0
    4b46:	d107      	bne.n	4b58 <mp_parse+0x4ec>
                                    push_result_token(&parser, rule_id);
    4b48:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
    4b4c:	f107 031c 	add.w	r3, r7, #28
    4b50:	4611      	mov	r1, r2
    4b52:	4618      	mov	r0, r3
    4b54:	f7ff fa8e 	bl	4074 <push_result_token>
                                mp_lexer_to_next(lex);
    4b58:	68b8      	ldr	r0, [r7, #8]
    4b5a:	f7fe fb8c 	bl	3276 <mp_lexer_to_next>
                                i += 1;
    4b5e:	69bb      	ldr	r3, [r7, #24]
    4b60:	3301      	adds	r3, #1
    4b62:	61bb      	str	r3, [r7, #24]
    4b64:	e7d2      	b.n	4b0c <mp_parse+0x4a0>
                                i += 1;
    4b66:	69bb      	ldr	r3, [r7, #24]
    4b68:	3301      	adds	r3, #1
    4b6a:	61bb      	str	r3, [r7, #24]
                                backtrack = true;
    4b6c:	2301      	movs	r3, #1
    4b6e:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
                                goto list_backtrack;
    4b72:	e7a5      	b.n	4ac0 <mp_parse+0x454>
                            assert((arg & RULE_ARG_KIND_MASK) == RULE_ARG_RULE);
    4b74:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    4b76:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
    4b7a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
    4b7e:	d006      	beq.n	4b8e <mp_parse+0x522>
    4b80:	4b5d      	ldr	r3, [pc, #372]	; (4cf8 <mp_parse+0x68c>)
    4b82:	4a5b      	ldr	r2, [pc, #364]	; (4cf0 <mp_parse+0x684>)
    4b84:	f240 4142 	movw	r1, #1090	; 0x442
    4b88:	485a      	ldr	r0, [pc, #360]	; (4cf4 <mp_parse+0x688>)
    4b8a:	f018 f9a9 	bl	1cee0 <__assert_func>
                            push_rule(&parser, rule_src_line, rule_id, i + 1); // save this list-rule
    4b8e:	6979      	ldr	r1, [r7, #20]
    4b90:	69bb      	ldr	r3, [r7, #24]
    4b92:	3301      	adds	r3, #1
    4b94:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
    4b98:	f107 001c 	add.w	r0, r7, #28
    4b9c:	f7fe ffa9 	bl	3af2 <push_rule>
                            push_rule_from_arg(&parser, arg); // push child of list-rule
    4ba0:	f107 031c 	add.w	r3, r7, #28
    4ba4:	6c79      	ldr	r1, [r7, #68]	; 0x44
    4ba6:	4618      	mov	r0, r3
    4ba8:	f7fe ffe1 	bl	3b6e <push_rule_from_arg>
                            goto next_rule;
    4bac:	e59e      	b.n	46ec <mp_parse+0x80>
                assert(i >= 1);
    4bae:	69bb      	ldr	r3, [r7, #24]
    4bb0:	2b00      	cmp	r3, #0
    4bb2:	d106      	bne.n	4bc2 <mp_parse+0x556>
    4bb4:	4b51      	ldr	r3, [pc, #324]	; (4cfc <mp_parse+0x690>)
    4bb6:	4a4e      	ldr	r2, [pc, #312]	; (4cf0 <mp_parse+0x684>)
    4bb8:	f240 4149 	movw	r1, #1097	; 0x449
    4bbc:	484d      	ldr	r0, [pc, #308]	; (4cf4 <mp_parse+0x688>)
    4bbe:	f018 f98f 	bl	1cee0 <__assert_func>
                i -= 1;
    4bc2:	69bb      	ldr	r3, [r7, #24]
    4bc4:	3b01      	subs	r3, #1
    4bc6:	61bb      	str	r3, [r7, #24]
                if ((n & 1) && (rule_arg[1] & RULE_ARG_KIND_MASK) == RULE_ARG_TOK) {
    4bc8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    4bca:	f003 0301 	and.w	r3, r3, #1
    4bce:	2b00      	cmp	r3, #0
    4bd0:	d00b      	beq.n	4bea <mp_parse+0x57e>
    4bd2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    4bd4:	3302      	adds	r3, #2
    4bd6:	881b      	ldrh	r3, [r3, #0]
    4bd8:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
    4bdc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    4be0:	d103      	bne.n	4bea <mp_parse+0x57e>
                    i = (i + 1) / 2;
    4be2:	69bb      	ldr	r3, [r7, #24]
    4be4:	3301      	adds	r3, #1
    4be6:	085b      	lsrs	r3, r3, #1
    4be8:	61bb      	str	r3, [r7, #24]
                if (i == 1) {
    4bea:	69bb      	ldr	r3, [r7, #24]
    4bec:	2b01      	cmp	r3, #1
    4bee:	d10c      	bne.n	4c0a <mp_parse+0x59e>
                    if (had_trailing_sep) {
    4bf0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
    4bf4:	2b00      	cmp	r3, #0
    4bf6:	d010      	beq.n	4c1a <mp_parse+0x5ae>
                        push_result_rule(&parser, rule_src_line, rule_id, i);
    4bf8:	6979      	ldr	r1, [r7, #20]
    4bfa:	69bb      	ldr	r3, [r7, #24]
    4bfc:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
    4c00:	f107 001c 	add.w	r0, r7, #28
    4c04:	f7ff fcce 	bl	45a4 <push_result_rule>
                break;
    4c08:	e007      	b.n	4c1a <mp_parse+0x5ae>
                    push_result_rule(&parser, rule_src_line, rule_id, i);
    4c0a:	6979      	ldr	r1, [r7, #20]
    4c0c:	69bb      	ldr	r3, [r7, #24]
    4c0e:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
    4c12:	f107 001c 	add.w	r0, r7, #28
    4c16:	f7ff fcc5 	bl	45a4 <push_result_rule>
                break;
    4c1a:	bf00      	nop
    for (;;) {
    4c1c:	e566      	b.n	46ec <mp_parse+0x80>
        (void)m_renew_maybe(byte, parser.cur_chunk,
    4c1e:	6c38      	ldr	r0, [r7, #64]	; 0x40
    4c20:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    4c22:	685b      	ldr	r3, [r3, #4]
    4c24:	3308      	adds	r3, #8
    4c26:	2200      	movs	r2, #0
    4c28:	4619      	mov	r1, r3
    4c2a:	f7fb fbd9 	bl	3e0 <m_realloc_maybe>
            sizeof(mp_parse_chunk_t) + parser.cur_chunk->alloc,
            sizeof(mp_parse_chunk_t) + parser.cur_chunk->union_.used,
            false);
        parser.cur_chunk->alloc = parser.cur_chunk->union_.used;
    4c2e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    4c30:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    4c32:	6852      	ldr	r2, [r2, #4]
    4c34:	601a      	str	r2, [r3, #0]
        parser.cur_chunk->union_.next = parser.tree.chunk;
    4c36:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    4c38:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    4c3a:	605a      	str	r2, [r3, #4]
        parser.tree.chunk = parser.cur_chunk;
    4c3c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    4c3e:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

    if (
        lex->tok_kind != MP_TOKEN_END // check we are at the end of the token stream
    4c40:	68bb      	ldr	r3, [r7, #8]
    4c42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    if (
    4c44:	2b00      	cmp	r3, #0
    4c46:	d108      	bne.n	4c5a <mp_parse+0x5ee>
        || parser.result_stack_top == 0 // check that we got a node (can fail on empty input)
    4c48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    4c4a:	2b00      	cmp	r3, #0
    4c4c:	d129      	bne.n	4ca2 <mp_parse+0x636>
    4c4e:	e004      	b.n	4c5a <mp_parse+0x5ee>
                            goto syntax_error;
    4c50:	bf00      	nop
    4c52:	e002      	b.n	4c5a <mp_parse+0x5ee>
                                goto syntax_error;
    4c54:	bf00      	nop
    4c56:	e000      	b.n	4c5a <mp_parse+0x5ee>
                                goto syntax_error;
    4c58:	bf00      	nop
        ) {
    syntax_error:;
        mp_obj_t exc;
        if (lex->tok_kind == MP_TOKEN_INDENT) {
    4c5a:	68bb      	ldr	r3, [r7, #8]
    4c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    4c5e:	2b05      	cmp	r3, #5
    4c60:	d105      	bne.n	4c6e <mp_parse+0x602>
            exc = mp_obj_new_exception_msg(&mp_type_IndentationError,
    4c62:	4927      	ldr	r1, [pc, #156]	; (4d00 <mp_parse+0x694>)
    4c64:	4827      	ldr	r0, [pc, #156]	; (4d04 <mp_parse+0x698>)
    4c66:	f00a fe7d 	bl	f964 <mp_obj_new_exception_msg>
    4c6a:	66b8      	str	r0, [r7, #104]	; 0x68
    4c6c:	e00e      	b.n	4c8c <mp_parse+0x620>
                "unexpected indent");
        } else if (lex->tok_kind == MP_TOKEN_DEDENT_MISMATCH) {
    4c6e:	68bb      	ldr	r3, [r7, #8]
    4c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    4c72:	2b02      	cmp	r3, #2
    4c74:	d105      	bne.n	4c82 <mp_parse+0x616>
            exc = mp_obj_new_exception_msg(&mp_type_IndentationError,
    4c76:	4924      	ldr	r1, [pc, #144]	; (4d08 <mp_parse+0x69c>)
    4c78:	4822      	ldr	r0, [pc, #136]	; (4d04 <mp_parse+0x698>)
    4c7a:	f00a fe73 	bl	f964 <mp_obj_new_exception_msg>
    4c7e:	66b8      	str	r0, [r7, #104]	; 0x68
    4c80:	e004      	b.n	4c8c <mp_parse+0x620>
                "unindent doesn't match any outer indent level");
        } else {
            exc = mp_obj_new_exception_msg(&mp_type_SyntaxError,
    4c82:	4922      	ldr	r1, [pc, #136]	; (4d0c <mp_parse+0x6a0>)
    4c84:	4822      	ldr	r0, [pc, #136]	; (4d10 <mp_parse+0x6a4>)
    4c86:	f00a fe6d 	bl	f964 <mp_obj_new_exception_msg>
    4c8a:	66b8      	str	r0, [r7, #104]	; 0x68
                "invalid syntax");
        }
        // add traceback to give info about file name and location
        // we don't have a 'block' name, so just pass the NULL qstr to indicate this
        mp_obj_exception_add_traceback(exc, lex->source_name, lex->tok_line, MP_QSTR_NULL);
    4c8c:	68bb      	ldr	r3, [r7, #8]
    4c8e:	6819      	ldr	r1, [r3, #0]
    4c90:	68bb      	ldr	r3, [r7, #8]
    4c92:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    4c94:	2300      	movs	r3, #0
    4c96:	6eb8      	ldr	r0, [r7, #104]	; 0x68
    4c98:	f00a ffe0 	bl	fc5c <mp_obj_exception_add_traceback>
        nlr_raise(exc);
    4c9c:	6eb8      	ldr	r0, [r7, #104]	; 0x68
    4c9e:	f7fb fb1f 	bl	2e0 <nlr_jump>
    }

    // get the root parse node that we created
    assert(parser.result_stack_top == 1);
    4ca2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    4ca4:	2b01      	cmp	r3, #1
    4ca6:	d006      	beq.n	4cb6 <mp_parse+0x64a>
    4ca8:	4b1a      	ldr	r3, [pc, #104]	; (4d14 <mp_parse+0x6a8>)
    4caa:	4a11      	ldr	r2, [pc, #68]	; (4cf0 <mp_parse+0x684>)
    4cac:	f44f 6191 	mov.w	r1, #1160	; 0x488
    4cb0:	4810      	ldr	r0, [pc, #64]	; (4cf4 <mp_parse+0x688>)
    4cb2:	f018 f915 	bl	1cee0 <__assert_func>
    parser.tree.root = parser.result_stack[0];
    4cb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    4cb8:	681b      	ldr	r3, [r3, #0]
    4cba:	63bb      	str	r3, [r7, #56]	; 0x38

    // free the memory that we don't need anymore
    m_del(rule_stack_t, parser.rule_stack, parser.rule_stack_alloc);
    4cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    4cbe:	4618      	mov	r0, r3
    4cc0:	f7fb fbaa 	bl	418 <m_free>
    m_del(mp_parse_node_t, parser.result_stack, parser.result_stack_alloc);
    4cc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    4cc6:	4618      	mov	r0, r3
    4cc8:	f7fb fba6 	bl	418 <m_free>

    // we also free the lexer on behalf of the caller
    mp_lexer_free(lex);
    4ccc:	68b8      	ldr	r0, [r7, #8]
    4cce:	f7fe fe29 	bl	3924 <mp_lexer_free>

    return parser.tree;
    4cd2:	68fb      	ldr	r3, [r7, #12]
    4cd4:	461a      	mov	r2, r3
    4cd6:	f107 0338 	add.w	r3, r7, #56	; 0x38
    4cda:	e893 0003 	ldmia.w	r3, {r0, r1}
    4cde:	e882 0003 	stmia.w	r2, {r0, r1}
}
    4ce2:	68f8      	ldr	r0, [r7, #12]
    4ce4:	3788      	adds	r7, #136	; 0x88
    4ce6:	46bd      	mov	sp, r7
    4ce8:	bd80      	pop	{r7, pc}
    4cea:	bf00      	nop
    4cec:	00021a34 	.word	0x00021a34
    4cf0:	00021b6c 	.word	0x00021b6c
    4cf4:	000218f0 	.word	0x000218f0
    4cf8:	00021a68 	.word	0x00021a68
    4cfc:	00021a94 	.word	0x00021a94
    4d00:	00021a9c 	.word	0x00021a9c
    4d04:	00024338 	.word	0x00024338
    4d08:	00021ab0 	.word	0x00021ab0
    4d0c:	00021ae0 	.word	0x00021ae0
    4d10:	000242fc 	.word	0x000242fc
    4d14:	00021af0 	.word	0x00021af0

00004d18 <mp_parse_tree_clear>:

void mp_parse_tree_clear(mp_parse_tree_t *tree) {
    4d18:	b580      	push	{r7, lr}
    4d1a:	b084      	sub	sp, #16
    4d1c:	af00      	add	r7, sp, #0
    4d1e:	6078      	str	r0, [r7, #4]
    mp_parse_chunk_t *chunk = tree->chunk;
    4d20:	687b      	ldr	r3, [r7, #4]
    4d22:	685b      	ldr	r3, [r3, #4]
    4d24:	60fb      	str	r3, [r7, #12]
    while (chunk != NULL) {
    4d26:	e007      	b.n	4d38 <mp_parse_tree_clear+0x20>
        mp_parse_chunk_t *next = chunk->union_.next;
    4d28:	68fb      	ldr	r3, [r7, #12]
    4d2a:	685b      	ldr	r3, [r3, #4]
    4d2c:	60bb      	str	r3, [r7, #8]
        m_del(byte, chunk, sizeof(mp_parse_chunk_t) + chunk->alloc);
    4d2e:	68f8      	ldr	r0, [r7, #12]
    4d30:	f7fb fb72 	bl	418 <m_free>
        chunk = next;
    4d34:	68bb      	ldr	r3, [r7, #8]
    4d36:	60fb      	str	r3, [r7, #12]
    while (chunk != NULL) {
    4d38:	68fb      	ldr	r3, [r7, #12]
    4d3a:	2b00      	cmp	r3, #0
    4d3c:	d1f4      	bne.n	4d28 <mp_parse_tree_clear+0x10>
    }
}
    4d3e:	bf00      	nop
    4d40:	3710      	adds	r7, #16
    4d42:	46bd      	mov	sp, r7
    4d44:	bd80      	pop	{r7, pc}
    4d46:	bf00      	nop

00004d48 <scope_new>:
    [SCOPE_DICT_COMP] = MP_QSTR__lt_dictcomp_gt_,
    [SCOPE_SET_COMP] = MP_QSTR__lt_setcomp_gt_,
    [SCOPE_GEN_EXPR] = MP_QSTR__lt_genexpr_gt_,
};

scope_t *scope_new(scope_kind_t kind, mp_parse_node_t pn, qstr source_file, mp_uint_t emit_options) {
    4d48:	b580      	push	{r7, lr}
    4d4a:	b086      	sub	sp, #24
    4d4c:	af00      	add	r7, sp, #0
    4d4e:	60f8      	str	r0, [r7, #12]
    4d50:	60b9      	str	r1, [r7, #8]
    4d52:	607a      	str	r2, [r7, #4]
    4d54:	603b      	str	r3, [r7, #0]
    scope_t *scope = m_new0(scope_t, 1);
    4d56:	2030      	movs	r0, #48	; 0x30
    4d58:	f7fb fb14 	bl	384 <m_malloc0>
    4d5c:	6178      	str	r0, [r7, #20]
    scope->kind = kind;
    4d5e:	697b      	ldr	r3, [r7, #20]
    4d60:	68fa      	ldr	r2, [r7, #12]
    4d62:	601a      	str	r2, [r3, #0]
    scope->pn = pn;
    4d64:	697b      	ldr	r3, [r7, #20]
    4d66:	68ba      	ldr	r2, [r7, #8]
    4d68:	60da      	str	r2, [r3, #12]
    scope->source_file = source_file;
    4d6a:	687b      	ldr	r3, [r7, #4]
    4d6c:	b29a      	uxth	r2, r3
    4d6e:	697b      	ldr	r3, [r7, #20]
    4d70:	829a      	strh	r2, [r3, #20]
    if (kind == SCOPE_FUNCTION || kind == SCOPE_CLASS) {
    4d72:	68fb      	ldr	r3, [r7, #12]
    4d74:	2b07      	cmp	r3, #7
    4d76:	d002      	beq.n	4d7e <scope_new+0x36>
    4d78:	68fb      	ldr	r3, [r7, #12]
    4d7a:	2b01      	cmp	r3, #1
    4d7c:	d114      	bne.n	4da8 <scope_new+0x60>
        assert(MP_PARSE_NODE_IS_STRUCT(pn));
    4d7e:	68bb      	ldr	r3, [r7, #8]
    4d80:	2b00      	cmp	r3, #0
    4d82:	d004      	beq.n	4d8e <scope_new+0x46>
    4d84:	68bb      	ldr	r3, [r7, #8]
    4d86:	f003 0303 	and.w	r3, r3, #3
    4d8a:	2b00      	cmp	r3, #0
    4d8c:	d005      	beq.n	4d9a <scope_new+0x52>
    4d8e:	4b17      	ldr	r3, [pc, #92]	; (4dec <scope_new+0xa4>)
    4d90:	4a17      	ldr	r2, [pc, #92]	; (4df0 <scope_new+0xa8>)
    4d92:	2131      	movs	r1, #49	; 0x31
    4d94:	4817      	ldr	r0, [pc, #92]	; (4df4 <scope_new+0xac>)
    4d96:	f018 f8a3 	bl	1cee0 <__assert_func>
        scope->simple_name = MP_PARSE_NODE_LEAF_ARG(((mp_parse_node_struct_t*)pn)->nodes[0]);
    4d9a:	68bb      	ldr	r3, [r7, #8]
    4d9c:	689b      	ldr	r3, [r3, #8]
    4d9e:	091b      	lsrs	r3, r3, #4
    4da0:	b29a      	uxth	r2, r3
    4da2:	697b      	ldr	r3, [r7, #20]
    4da4:	82da      	strh	r2, [r3, #22]
    4da6:	e006      	b.n	4db6 <scope_new+0x6e>
    } else {
        scope->simple_name = scope_simple_name_table[kind];
    4da8:	4a13      	ldr	r2, [pc, #76]	; (4df8 <scope_new+0xb0>)
    4daa:	68fb      	ldr	r3, [r7, #12]
    4dac:	4413      	add	r3, r2
    4dae:	781b      	ldrb	r3, [r3, #0]
    4db0:	b29a      	uxth	r2, r3
    4db2:	697b      	ldr	r3, [r7, #20]
    4db4:	82da      	strh	r2, [r3, #22]
    }
    scope->raw_code = mp_emit_glue_new_raw_code();
    4db6:	f006 fb15 	bl	b3e4 <mp_emit_glue_new_raw_code>
    4dba:	4602      	mov	r2, r0
    4dbc:	697b      	ldr	r3, [r7, #20]
    4dbe:	611a      	str	r2, [r3, #16]
    scope->emit_options = emit_options;
    4dc0:	683b      	ldr	r3, [r7, #0]
    4dc2:	b29a      	uxth	r2, r3
    4dc4:	697b      	ldr	r3, [r7, #20]
    4dc6:	835a      	strh	r2, [r3, #26]
    scope->id_info_alloc = MICROPY_ALLOC_SCOPE_ID_INIT;
    4dc8:	697b      	ldr	r3, [r7, #20]
    4dca:	2204      	movs	r2, #4
    4dcc:	851a      	strh	r2, [r3, #40]	; 0x28
    scope->id_info = m_new(id_info_t, scope->id_info_alloc);
    4dce:	697b      	ldr	r3, [r7, #20]
    4dd0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    4dd2:	00db      	lsls	r3, r3, #3
    4dd4:	4618      	mov	r0, r3
    4dd6:	f7fb faa1 	bl	31c <m_malloc>
    4dda:	4602      	mov	r2, r0
    4ddc:	697b      	ldr	r3, [r7, #20]
    4dde:	62da      	str	r2, [r3, #44]	; 0x2c

    return scope;
    4de0:	697b      	ldr	r3, [r7, #20]
}
    4de2:	4618      	mov	r0, r3
    4de4:	3718      	adds	r7, #24
    4de6:	46bd      	mov	sp, r7
    4de8:	bd80      	pop	{r7, pc}
    4dea:	bf00      	nop
    4dec:	00021b80 	.word	0x00021b80
    4df0:	00021c1c 	.word	0x00021c1c
    4df4:	00021b9c 	.word	0x00021b9c
    4df8:	00021b78 	.word	0x00021b78

00004dfc <scope_free>:

void scope_free(scope_t *scope) {
    4dfc:	b580      	push	{r7, lr}
    4dfe:	b082      	sub	sp, #8
    4e00:	af00      	add	r7, sp, #0
    4e02:	6078      	str	r0, [r7, #4]
    m_del(id_info_t, scope->id_info, scope->id_info_alloc);
    4e04:	687b      	ldr	r3, [r7, #4]
    4e06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    4e08:	4618      	mov	r0, r3
    4e0a:	f7fb fb05 	bl	418 <m_free>
    m_del(scope_t, scope, 1);
    4e0e:	6878      	ldr	r0, [r7, #4]
    4e10:	f7fb fb02 	bl	418 <m_free>
}
    4e14:	bf00      	nop
    4e16:	3708      	adds	r7, #8
    4e18:	46bd      	mov	sp, r7
    4e1a:	bd80      	pop	{r7, pc}

00004e1c <scope_find_or_add_id>:

id_info_t *scope_find_or_add_id(scope_t *scope, qstr qst, scope_kind_t kind) {
    4e1c:	b580      	push	{r7, lr}
    4e1e:	b086      	sub	sp, #24
    4e20:	af00      	add	r7, sp, #0
    4e22:	60f8      	str	r0, [r7, #12]
    4e24:	60b9      	str	r1, [r7, #8]
    4e26:	607a      	str	r2, [r7, #4]
    id_info_t *id_info = scope_find(scope, qst);
    4e28:	68b9      	ldr	r1, [r7, #8]
    4e2a:	68f8      	ldr	r0, [r7, #12]
    4e2c:	f000 f83c 	bl	4ea8 <scope_find>
    4e30:	6178      	str	r0, [r7, #20]
    if (id_info != NULL) {
    4e32:	697b      	ldr	r3, [r7, #20]
    4e34:	2b00      	cmp	r3, #0
    4e36:	d001      	beq.n	4e3c <scope_find_or_add_id+0x20>
        return id_info;
    4e38:	697b      	ldr	r3, [r7, #20]
    4e3a:	e031      	b.n	4ea0 <scope_find_or_add_id+0x84>
    }

    // make sure we have enough memory
    if (scope->id_info_len >= scope->id_info_alloc) {
    4e3c:	68fb      	ldr	r3, [r7, #12]
    4e3e:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
    4e40:	68fb      	ldr	r3, [r7, #12]
    4e42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    4e44:	429a      	cmp	r2, r3
    4e46:	d312      	bcc.n	4e6e <scope_find_or_add_id+0x52>
        scope->id_info = m_renew(id_info_t, scope->id_info, scope->id_info_alloc, scope->id_info_alloc + MICROPY_ALLOC_SCOPE_ID_INC);
    4e48:	68fb      	ldr	r3, [r7, #12]
    4e4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4e4c:	68fb      	ldr	r3, [r7, #12]
    4e4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    4e50:	3306      	adds	r3, #6
    4e52:	00db      	lsls	r3, r3, #3
    4e54:	4619      	mov	r1, r3
    4e56:	4610      	mov	r0, r2
    4e58:	f7fb faa1 	bl	39e <m_realloc>
    4e5c:	4602      	mov	r2, r0
    4e5e:	68fb      	ldr	r3, [r7, #12]
    4e60:	62da      	str	r2, [r3, #44]	; 0x2c
        scope->id_info_alloc += MICROPY_ALLOC_SCOPE_ID_INC;
    4e62:	68fb      	ldr	r3, [r7, #12]
    4e64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    4e66:	3306      	adds	r3, #6
    4e68:	b29a      	uxth	r2, r3
    4e6a:	68fb      	ldr	r3, [r7, #12]
    4e6c:	851a      	strh	r2, [r3, #40]	; 0x28
    }

    // add new id to end of array of all ids; this seems to match CPython
    // important thing is that function arguments are first, but that is
    // handled by the compiler because it adds arguments before compiling the body
    id_info = &scope->id_info[scope->id_info_len++];
    4e6e:	68fb      	ldr	r3, [r7, #12]
    4e70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4e72:	68fb      	ldr	r3, [r7, #12]
    4e74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
    4e76:	1c59      	adds	r1, r3, #1
    4e78:	b288      	uxth	r0, r1
    4e7a:	68f9      	ldr	r1, [r7, #12]
    4e7c:	8548      	strh	r0, [r1, #42]	; 0x2a
    4e7e:	00db      	lsls	r3, r3, #3
    4e80:	4413      	add	r3, r2
    4e82:	617b      	str	r3, [r7, #20]

    id_info->kind = kind;
    4e84:	687b      	ldr	r3, [r7, #4]
    4e86:	b2da      	uxtb	r2, r3
    4e88:	697b      	ldr	r3, [r7, #20]
    4e8a:	701a      	strb	r2, [r3, #0]
    id_info->flags = 0;
    4e8c:	697b      	ldr	r3, [r7, #20]
    4e8e:	2200      	movs	r2, #0
    4e90:	705a      	strb	r2, [r3, #1]
    id_info->local_num = 0;
    4e92:	697b      	ldr	r3, [r7, #20]
    4e94:	2200      	movs	r2, #0
    4e96:	805a      	strh	r2, [r3, #2]
    id_info->qst = qst;
    4e98:	697b      	ldr	r3, [r7, #20]
    4e9a:	68ba      	ldr	r2, [r7, #8]
    4e9c:	605a      	str	r2, [r3, #4]
    return id_info;
    4e9e:	697b      	ldr	r3, [r7, #20]
}
    4ea0:	4618      	mov	r0, r3
    4ea2:	3718      	adds	r7, #24
    4ea4:	46bd      	mov	sp, r7
    4ea6:	bd80      	pop	{r7, pc}

00004ea8 <scope_find>:

id_info_t *scope_find(scope_t *scope, qstr qst) {
    4ea8:	b480      	push	{r7}
    4eaa:	b085      	sub	sp, #20
    4eac:	af00      	add	r7, sp, #0
    4eae:	6078      	str	r0, [r7, #4]
    4eb0:	6039      	str	r1, [r7, #0]
    for (mp_uint_t i = 0; i < scope->id_info_len; i++) {
    4eb2:	2300      	movs	r3, #0
    4eb4:	60fb      	str	r3, [r7, #12]
    4eb6:	e011      	b.n	4edc <scope_find+0x34>
        if (scope->id_info[i].qst == qst) {
    4eb8:	687b      	ldr	r3, [r7, #4]
    4eba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4ebc:	68fb      	ldr	r3, [r7, #12]
    4ebe:	00db      	lsls	r3, r3, #3
    4ec0:	4413      	add	r3, r2
    4ec2:	685a      	ldr	r2, [r3, #4]
    4ec4:	683b      	ldr	r3, [r7, #0]
    4ec6:	429a      	cmp	r2, r3
    4ec8:	d105      	bne.n	4ed6 <scope_find+0x2e>
            return &scope->id_info[i];
    4eca:	687b      	ldr	r3, [r7, #4]
    4ecc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4ece:	68fb      	ldr	r3, [r7, #12]
    4ed0:	00db      	lsls	r3, r3, #3
    4ed2:	4413      	add	r3, r2
    4ed4:	e009      	b.n	4eea <scope_find+0x42>
    for (mp_uint_t i = 0; i < scope->id_info_len; i++) {
    4ed6:	68fb      	ldr	r3, [r7, #12]
    4ed8:	3301      	adds	r3, #1
    4eda:	60fb      	str	r3, [r7, #12]
    4edc:	687b      	ldr	r3, [r7, #4]
    4ede:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
    4ee0:	461a      	mov	r2, r3
    4ee2:	68fb      	ldr	r3, [r7, #12]
    4ee4:	429a      	cmp	r2, r3
    4ee6:	d8e7      	bhi.n	4eb8 <scope_find+0x10>
        }
    }
    return NULL;
    4ee8:	2300      	movs	r3, #0
}
    4eea:	4618      	mov	r0, r3
    4eec:	3714      	adds	r7, #20
    4eee:	46bd      	mov	sp, r7
    4ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
    4ef4:	4770      	bx	lr

00004ef6 <scope_find_global>:

id_info_t *scope_find_global(scope_t *scope, qstr qst) {
    4ef6:	b580      	push	{r7, lr}
    4ef8:	b082      	sub	sp, #8
    4efa:	af00      	add	r7, sp, #0
    4efc:	6078      	str	r0, [r7, #4]
    4efe:	6039      	str	r1, [r7, #0]
    while (scope->parent != NULL) {
    4f00:	e002      	b.n	4f08 <scope_find_global+0x12>
        scope = scope->parent;
    4f02:	687b      	ldr	r3, [r7, #4]
    4f04:	685b      	ldr	r3, [r3, #4]
    4f06:	607b      	str	r3, [r7, #4]
    while (scope->parent != NULL) {
    4f08:	687b      	ldr	r3, [r7, #4]
    4f0a:	685b      	ldr	r3, [r3, #4]
    4f0c:	2b00      	cmp	r3, #0
    4f0e:	d1f8      	bne.n	4f02 <scope_find_global+0xc>
    }
    return scope_find(scope, qst);
    4f10:	6839      	ldr	r1, [r7, #0]
    4f12:	6878      	ldr	r0, [r7, #4]
    4f14:	f7ff ffc8 	bl	4ea8 <scope_find>
    4f18:	4603      	mov	r3, r0
}
    4f1a:	4618      	mov	r0, r3
    4f1c:	3708      	adds	r7, #8
    4f1e:	46bd      	mov	sp, r7
    4f20:	bd80      	pop	{r7, pc}

00004f22 <scope_close_over_in_parents>:

STATIC void scope_close_over_in_parents(scope_t *scope, qstr qst) {
    4f22:	b580      	push	{r7, lr}
    4f24:	b084      	sub	sp, #16
    4f26:	af00      	add	r7, sp, #0
    4f28:	6078      	str	r0, [r7, #4]
    4f2a:	6039      	str	r1, [r7, #0]
    assert(scope->parent != NULL); // we should have at least 1 parent
    4f2c:	687b      	ldr	r3, [r7, #4]
    4f2e:	685b      	ldr	r3, [r3, #4]
    4f30:	2b00      	cmp	r3, #0
    4f32:	d105      	bne.n	4f40 <scope_close_over_in_parents+0x1e>
    4f34:	4b1f      	ldr	r3, [pc, #124]	; (4fb4 <scope_close_over_in_parents+0x92>)
    4f36:	4a20      	ldr	r2, [pc, #128]	; (4fb8 <scope_close_over_in_parents+0x96>)
    4f38:	216c      	movs	r1, #108	; 0x6c
    4f3a:	4820      	ldr	r0, [pc, #128]	; (4fbc <scope_close_over_in_parents+0x9a>)
    4f3c:	f017 ffd0 	bl	1cee0 <__assert_func>
    for (scope_t *s = scope->parent;; s = s->parent) {
    4f40:	687b      	ldr	r3, [r7, #4]
    4f42:	685b      	ldr	r3, [r3, #4]
    4f44:	60fb      	str	r3, [r7, #12]
        assert(s->parent != NULL); // we should not get to the outer scope
    4f46:	68fb      	ldr	r3, [r7, #12]
    4f48:	685b      	ldr	r3, [r3, #4]
    4f4a:	2b00      	cmp	r3, #0
    4f4c:	d105      	bne.n	4f5a <scope_close_over_in_parents+0x38>
    4f4e:	4b1c      	ldr	r3, [pc, #112]	; (4fc0 <scope_close_over_in_parents+0x9e>)
    4f50:	4a19      	ldr	r2, [pc, #100]	; (4fb8 <scope_close_over_in_parents+0x96>)
    4f52:	216e      	movs	r1, #110	; 0x6e
    4f54:	4819      	ldr	r0, [pc, #100]	; (4fbc <scope_close_over_in_parents+0x9a>)
    4f56:	f017 ffc3 	bl	1cee0 <__assert_func>
        id_info_t *id = scope_find_or_add_id(s, qst, ID_INFO_KIND_UNDECIDED);
    4f5a:	2200      	movs	r2, #0
    4f5c:	6839      	ldr	r1, [r7, #0]
    4f5e:	68f8      	ldr	r0, [r7, #12]
    4f60:	f7ff ff5c 	bl	4e1c <scope_find_or_add_id>
    4f64:	60b8      	str	r0, [r7, #8]
        if (id->kind == ID_INFO_KIND_UNDECIDED) {
    4f66:	68bb      	ldr	r3, [r7, #8]
    4f68:	781b      	ldrb	r3, [r3, #0]
    4f6a:	2b00      	cmp	r3, #0
    4f6c:	d103      	bne.n	4f76 <scope_close_over_in_parents+0x54>
            // variable not previously declared in this scope, so declare it as free and keep searching parents
            id->kind = ID_INFO_KIND_FREE;
    4f6e:	68bb      	ldr	r3, [r7, #8]
    4f70:	2205      	movs	r2, #5
    4f72:	701a      	strb	r2, [r3, #0]
    4f74:	e015      	b.n	4fa2 <scope_close_over_in_parents+0x80>
        } else {
            // variable is declared in this scope, so finish
            if (id->kind == ID_INFO_KIND_LOCAL) {
    4f76:	68bb      	ldr	r3, [r7, #8]
    4f78:	781b      	ldrb	r3, [r3, #0]
    4f7a:	2b03      	cmp	r3, #3
    4f7c:	d103      	bne.n	4f86 <scope_close_over_in_parents+0x64>
                // variable local to this scope, close it over
                id->kind = ID_INFO_KIND_CELL;
    4f7e:	68bb      	ldr	r3, [r7, #8]
    4f80:	2204      	movs	r2, #4
    4f82:	701a      	strb	r2, [r3, #0]
            } else {
                // ID_INFO_KIND_FREE: variable already closed over in a parent scope
                // ID_INFO_KIND_CELL: variable already closed over in this scope
                assert(id->kind == ID_INFO_KIND_FREE || id->kind == ID_INFO_KIND_CELL);
            }
            return;
    4f84:	e011      	b.n	4faa <scope_close_over_in_parents+0x88>
                assert(id->kind == ID_INFO_KIND_FREE || id->kind == ID_INFO_KIND_CELL);
    4f86:	68bb      	ldr	r3, [r7, #8]
    4f88:	781b      	ldrb	r3, [r3, #0]
    4f8a:	2b05      	cmp	r3, #5
    4f8c:	d00d      	beq.n	4faa <scope_close_over_in_parents+0x88>
    4f8e:	68bb      	ldr	r3, [r7, #8]
    4f90:	781b      	ldrb	r3, [r3, #0]
    4f92:	2b04      	cmp	r3, #4
    4f94:	d009      	beq.n	4faa <scope_close_over_in_parents+0x88>
    4f96:	4b0b      	ldr	r3, [pc, #44]	; (4fc4 <scope_close_over_in_parents+0xa2>)
    4f98:	4a07      	ldr	r2, [pc, #28]	; (4fb8 <scope_close_over_in_parents+0x96>)
    4f9a:	217b      	movs	r1, #123	; 0x7b
    4f9c:	4807      	ldr	r0, [pc, #28]	; (4fbc <scope_close_over_in_parents+0x9a>)
    4f9e:	f017 ff9f 	bl	1cee0 <__assert_func>
    for (scope_t *s = scope->parent;; s = s->parent) {
    4fa2:	68fb      	ldr	r3, [r7, #12]
    4fa4:	685b      	ldr	r3, [r3, #4]
    4fa6:	60fb      	str	r3, [r7, #12]
    4fa8:	e7cd      	b.n	4f46 <scope_close_over_in_parents+0x24>
            return;
    4faa:	bf00      	nop
        }
    }
}
    4fac:	3710      	adds	r7, #16
    4fae:	46bd      	mov	sp, r7
    4fb0:	bd80      	pop	{r7, pc}
    4fb2:	bf00      	nop
    4fb4:	00021bb0 	.word	0x00021bb0
    4fb8:	00021c28 	.word	0x00021c28
    4fbc:	00021b9c 	.word	0x00021b9c
    4fc0:	00021bc8 	.word	0x00021bc8
    4fc4:	00021bdc 	.word	0x00021bdc

00004fc8 <scope_check_to_close_over>:

void scope_check_to_close_over(scope_t *scope, id_info_t *id) {
    4fc8:	b580      	push	{r7, lr}
    4fca:	b084      	sub	sp, #16
    4fcc:	af00      	add	r7, sp, #0
    4fce:	6078      	str	r0, [r7, #4]
    4fd0:	6039      	str	r1, [r7, #0]
    if (scope->parent != NULL) {
    4fd2:	687b      	ldr	r3, [r7, #4]
    4fd4:	685b      	ldr	r3, [r3, #4]
    4fd6:	2b00      	cmp	r3, #0
    4fd8:	d02c      	beq.n	5034 <scope_check_to_close_over+0x6c>
        for (scope_t *s = scope->parent; s->parent != NULL; s = s->parent) {
    4fda:	687b      	ldr	r3, [r7, #4]
    4fdc:	685b      	ldr	r3, [r3, #4]
    4fde:	60fb      	str	r3, [r7, #12]
    4fe0:	e022      	b.n	5028 <scope_check_to_close_over+0x60>
            id_info_t *id2 = scope_find(s, id->qst);
    4fe2:	683b      	ldr	r3, [r7, #0]
    4fe4:	685b      	ldr	r3, [r3, #4]
    4fe6:	4619      	mov	r1, r3
    4fe8:	68f8      	ldr	r0, [r7, #12]
    4fea:	f7ff ff5d 	bl	4ea8 <scope_find>
    4fee:	60b8      	str	r0, [r7, #8]
            if (id2 != NULL) {
    4ff0:	68bb      	ldr	r3, [r7, #8]
    4ff2:	2b00      	cmp	r3, #0
    4ff4:	d015      	beq.n	5022 <scope_check_to_close_over+0x5a>
                if (id2->kind == ID_INFO_KIND_LOCAL || id2->kind == ID_INFO_KIND_CELL || id2->kind == ID_INFO_KIND_FREE) {
    4ff6:	68bb      	ldr	r3, [r7, #8]
    4ff8:	781b      	ldrb	r3, [r3, #0]
    4ffa:	2b03      	cmp	r3, #3
    4ffc:	d007      	beq.n	500e <scope_check_to_close_over+0x46>
    4ffe:	68bb      	ldr	r3, [r7, #8]
    5000:	781b      	ldrb	r3, [r3, #0]
    5002:	2b04      	cmp	r3, #4
    5004:	d003      	beq.n	500e <scope_check_to_close_over+0x46>
    5006:	68bb      	ldr	r3, [r7, #8]
    5008:	781b      	ldrb	r3, [r3, #0]
    500a:	2b05      	cmp	r3, #5
    500c:	d111      	bne.n	5032 <scope_check_to_close_over+0x6a>
                    id->kind = ID_INFO_KIND_FREE;
    500e:	683b      	ldr	r3, [r7, #0]
    5010:	2205      	movs	r2, #5
    5012:	701a      	strb	r2, [r3, #0]
                    scope_close_over_in_parents(scope, id->qst);
    5014:	683b      	ldr	r3, [r7, #0]
    5016:	685b      	ldr	r3, [r3, #4]
    5018:	4619      	mov	r1, r3
    501a:	6878      	ldr	r0, [r7, #4]
    501c:	f7ff ff81 	bl	4f22 <scope_close_over_in_parents>
                }
                break;
    5020:	e007      	b.n	5032 <scope_check_to_close_over+0x6a>
        for (scope_t *s = scope->parent; s->parent != NULL; s = s->parent) {
    5022:	68fb      	ldr	r3, [r7, #12]
    5024:	685b      	ldr	r3, [r3, #4]
    5026:	60fb      	str	r3, [r7, #12]
    5028:	68fb      	ldr	r3, [r7, #12]
    502a:	685b      	ldr	r3, [r3, #4]
    502c:	2b00      	cmp	r3, #0
    502e:	d1d8      	bne.n	4fe2 <scope_check_to_close_over+0x1a>
            }
        }
    }
}
    5030:	e000      	b.n	5034 <scope_check_to_close_over+0x6c>
                break;
    5032:	bf00      	nop
}
    5034:	bf00      	nop
    5036:	3710      	adds	r7, #16
    5038:	46bd      	mov	sp, r7
    503a:	bd80      	pop	{r7, pc}

0000503c <mp_parse_node_new_small_int>:
static inline mp_parse_node_t mp_parse_node_new_small_int(mp_int_t val) {
    503c:	b480      	push	{r7}
    503e:	b083      	sub	sp, #12
    5040:	af00      	add	r7, sp, #0
    5042:	6078      	str	r0, [r7, #4]
    return (mp_parse_node_t)(MP_PARSE_NODE_SMALL_INT | ((mp_uint_t)val << 1));
    5044:	687b      	ldr	r3, [r7, #4]
    5046:	005b      	lsls	r3, r3, #1
    5048:	f043 0301 	orr.w	r3, r3, #1
}
    504c:	4618      	mov	r0, r3
    504e:	370c      	adds	r7, #12
    5050:	46bd      	mov	sp, r7
    5052:	f85d 7b04 	ldr.w	r7, [sp], #4
    5056:	4770      	bx	lr

00005058 <mp_emit_common_get_id_for_load>:
    void (*end_except_handler)(emit_t *emit);
} emit_method_table_t;

int mp_native_type_from_qstr(qstr qst);

static inline void mp_emit_common_get_id_for_load(scope_t *scope, qstr qst) {
    5058:	b580      	push	{r7, lr}
    505a:	b082      	sub	sp, #8
    505c:	af00      	add	r7, sp, #0
    505e:	6078      	str	r0, [r7, #4]
    5060:	6039      	str	r1, [r7, #0]
    scope_find_or_add_id(scope, qst, ID_INFO_KIND_GLOBAL_IMPLICIT);
    5062:	2201      	movs	r2, #1
    5064:	6839      	ldr	r1, [r7, #0]
    5066:	6878      	ldr	r0, [r7, #4]
    5068:	f7ff fed8 	bl	4e1c <scope_find_or_add_id>
}
    506c:	bf00      	nop
    506e:	3708      	adds	r7, #8
    5070:	46bd      	mov	sp, r7
    5072:	bd80      	pop	{r7, pc}

00005074 <mp_local_free>:

#if !MICROPY_ENABLE_PYSTACK

#define mp_local_alloc(n_bytes) alloca(n_bytes)

static inline void mp_local_free(void *ptr) {
    5074:	b480      	push	{r7}
    5076:	b083      	sub	sp, #12
    5078:	af00      	add	r7, sp, #0
    507a:	6078      	str	r0, [r7, #4]
    (void)ptr;
}
    507c:	bf00      	nop
    507e:	370c      	adds	r7, #12
    5080:	46bd      	mov	sp, r7
    5082:	f85d 7b04 	ldr.w	r7, [sp], #4
    5086:	4770      	bx	lr

00005088 <compile_error_set_line>:
    emit_inline_asm_t *emit_inline_asm;                                   // current emitter for inline asm
    const emit_inline_asm_method_table_t *emit_inline_asm_method_table;   // current emit method table for inline asm
    #endif
} compiler_t;

STATIC void compile_error_set_line(compiler_t *comp, mp_parse_node_t pn) {
    5088:	b480      	push	{r7}
    508a:	b083      	sub	sp, #12
    508c:	af00      	add	r7, sp, #0
    508e:	6078      	str	r0, [r7, #4]
    5090:	6039      	str	r1, [r7, #0]
    // if the line of the error is unknown then try to update it from the pn
    if (comp->compile_error_line == 0 && MP_PARSE_NODE_IS_STRUCT(pn)) {
    5092:	687b      	ldr	r3, [r7, #4]
    5094:	68db      	ldr	r3, [r3, #12]
    5096:	2b00      	cmp	r3, #0
    5098:	d10b      	bne.n	50b2 <compile_error_set_line+0x2a>
    509a:	683b      	ldr	r3, [r7, #0]
    509c:	2b00      	cmp	r3, #0
    509e:	d008      	beq.n	50b2 <compile_error_set_line+0x2a>
    50a0:	683b      	ldr	r3, [r7, #0]
    50a2:	f003 0303 	and.w	r3, r3, #3
    50a6:	2b00      	cmp	r3, #0
    50a8:	d103      	bne.n	50b2 <compile_error_set_line+0x2a>
        comp->compile_error_line = ((mp_parse_node_struct_t*)pn)->source_line;
    50aa:	683b      	ldr	r3, [r7, #0]
    50ac:	681a      	ldr	r2, [r3, #0]
    50ae:	687b      	ldr	r3, [r7, #4]
    50b0:	60da      	str	r2, [r3, #12]
    }
}
    50b2:	bf00      	nop
    50b4:	370c      	adds	r7, #12
    50b6:	46bd      	mov	sp, r7
    50b8:	f85d 7b04 	ldr.w	r7, [sp], #4
    50bc:	4770      	bx	lr

000050be <compile_syntax_error>:

STATIC void compile_syntax_error(compiler_t *comp, mp_parse_node_t pn, const char *msg) {
    50be:	b580      	push	{r7, lr}
    50c0:	b084      	sub	sp, #16
    50c2:	af00      	add	r7, sp, #0
    50c4:	60f8      	str	r0, [r7, #12]
    50c6:	60b9      	str	r1, [r7, #8]
    50c8:	607a      	str	r2, [r7, #4]
    // only register the error if there has been no other error
    if (comp->compile_error == MP_OBJ_NULL) {
    50ca:	68fb      	ldr	r3, [r7, #12]
    50cc:	689b      	ldr	r3, [r3, #8]
    50ce:	2b00      	cmp	r3, #0
    50d0:	d10a      	bne.n	50e8 <compile_syntax_error+0x2a>
        comp->compile_error = mp_obj_new_exception_msg(&mp_type_SyntaxError, msg);
    50d2:	6879      	ldr	r1, [r7, #4]
    50d4:	4806      	ldr	r0, [pc, #24]	; (50f0 <compile_syntax_error+0x32>)
    50d6:	f00a fc45 	bl	f964 <mp_obj_new_exception_msg>
    50da:	4602      	mov	r2, r0
    50dc:	68fb      	ldr	r3, [r7, #12]
    50de:	609a      	str	r2, [r3, #8]
        compile_error_set_line(comp, pn);
    50e0:	68b9      	ldr	r1, [r7, #8]
    50e2:	68f8      	ldr	r0, [r7, #12]
    50e4:	f7ff ffd0 	bl	5088 <compile_error_set_line>
    }
}
    50e8:	bf00      	nop
    50ea:	3710      	adds	r7, #16
    50ec:	46bd      	mov	sp, r7
    50ee:	bd80      	pop	{r7, pc}
    50f0:	000242fc 	.word	0x000242fc

000050f4 <comp_next_label>:

STATIC void compile_trailer_paren_helper(compiler_t *comp, mp_parse_node_t pn_arglist, bool is_method_call, int n_positional_extra);
STATIC void compile_comprehension(compiler_t *comp, mp_parse_node_struct_t *pns, scope_kind_t kind);
STATIC void compile_node(compiler_t *comp, mp_parse_node_t pn);

STATIC uint comp_next_label(compiler_t *comp) {
    50f4:	b480      	push	{r7}
    50f6:	b083      	sub	sp, #12
    50f8:	af00      	add	r7, sp, #0
    50fa:	6078      	str	r0, [r7, #4]
    return comp->next_label++;
    50fc:	687b      	ldr	r3, [r7, #4]
    50fe:	691b      	ldr	r3, [r3, #16]
    5100:	1c59      	adds	r1, r3, #1
    5102:	687a      	ldr	r2, [r7, #4]
    5104:	6111      	str	r1, [r2, #16]
}
    5106:	4618      	mov	r0, r3
    5108:	370c      	adds	r7, #12
    510a:	46bd      	mov	sp, r7
    510c:	f85d 7b04 	ldr.w	r7, [sp], #4
    5110:	4770      	bx	lr

00005112 <compile_increase_except_level>:
}
#else
#define reserve_labels_for_native(comp, n)
#endif

STATIC void compile_increase_except_level(compiler_t *comp, uint label, int kind) {
    5112:	b580      	push	{r7, lr}
    5114:	b084      	sub	sp, #16
    5116:	af00      	add	r7, sp, #0
    5118:	60f8      	str	r0, [r7, #12]
    511a:	60b9      	str	r1, [r7, #8]
    511c:	607a      	str	r2, [r7, #4]
    EMIT_ARG(setup_block, label, kind);
    511e:	68fb      	ldr	r3, [r7, #12]
    5120:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5122:	687a      	ldr	r2, [r7, #4]
    5124:	68b9      	ldr	r1, [r7, #8]
    5126:	4618      	mov	r0, r3
    5128:	f005 fcda 	bl	aae0 <mp_emit_bc_setup_block>
    comp->cur_except_level += 1;
    512c:	68fb      	ldr	r3, [r7, #12]
    512e:	8b9b      	ldrh	r3, [r3, #28]
    5130:	3301      	adds	r3, #1
    5132:	b29a      	uxth	r2, r3
    5134:	68fb      	ldr	r3, [r7, #12]
    5136:	839a      	strh	r2, [r3, #28]
    if (comp->cur_except_level > comp->scope_cur->exc_stack_size) {
    5138:	68fb      	ldr	r3, [r7, #12]
    513a:	8b9a      	ldrh	r2, [r3, #28]
    513c:	68fb      	ldr	r3, [r7, #12]
    513e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    5140:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
    5142:	429a      	cmp	r2, r3
    5144:	d904      	bls.n	5150 <compile_increase_except_level+0x3e>
        comp->scope_cur->exc_stack_size = comp->cur_except_level;
    5146:	68fb      	ldr	r3, [r7, #12]
    5148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    514a:	68fa      	ldr	r2, [r7, #12]
    514c:	8b92      	ldrh	r2, [r2, #28]
    514e:	84da      	strh	r2, [r3, #38]	; 0x26
    }
}
    5150:	bf00      	nop
    5152:	3710      	adds	r7, #16
    5154:	46bd      	mov	sp, r7
    5156:	bd80      	pop	{r7, pc}

00005158 <compile_decrease_except_level>:

STATIC void compile_decrease_except_level(compiler_t *comp) {
    5158:	b580      	push	{r7, lr}
    515a:	b082      	sub	sp, #8
    515c:	af00      	add	r7, sp, #0
    515e:	6078      	str	r0, [r7, #4]
    assert(comp->cur_except_level > 0);
    5160:	687b      	ldr	r3, [r7, #4]
    5162:	8b9b      	ldrh	r3, [r3, #28]
    5164:	2b00      	cmp	r3, #0
    5166:	d105      	bne.n	5174 <compile_decrease_except_level+0x1c>
    5168:	4b0a      	ldr	r3, [pc, #40]	; (5194 <compile_decrease_except_level+0x3c>)
    516a:	4a0b      	ldr	r2, [pc, #44]	; (5198 <compile_decrease_except_level+0x40>)
    516c:	21c0      	movs	r1, #192	; 0xc0
    516e:	480b      	ldr	r0, [pc, #44]	; (519c <compile_decrease_except_level+0x44>)
    5170:	f017 feb6 	bl	1cee0 <__assert_func>
    comp->cur_except_level -= 1;
    5174:	687b      	ldr	r3, [r7, #4]
    5176:	8b9b      	ldrh	r3, [r3, #28]
    5178:	3b01      	subs	r3, #1
    517a:	b29a      	uxth	r2, r3
    517c:	687b      	ldr	r3, [r7, #4]
    517e:	839a      	strh	r2, [r3, #28]
    EMIT(end_finally);
    5180:	687b      	ldr	r3, [r7, #4]
    5182:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5184:	4618      	mov	r0, r3
    5186:	f005 fceb 	bl	ab60 <mp_emit_bc_end_finally>
    reserve_labels_for_native(comp, 1);
}
    518a:	bf00      	nop
    518c:	3708      	adds	r7, #8
    518e:	46bd      	mov	sp, r7
    5190:	bd80      	pop	{r7, pc}
    5192:	bf00      	nop
    5194:	00021c44 	.word	0x00021c44
    5198:	000227cc 	.word	0x000227cc
    519c:	00021c60 	.word	0x00021c60

000051a0 <scope_new_and_link>:

STATIC scope_t *scope_new_and_link(compiler_t *comp, scope_kind_t kind, mp_parse_node_t pn, uint emit_options) {
    51a0:	b580      	push	{r7, lr}
    51a2:	b086      	sub	sp, #24
    51a4:	af00      	add	r7, sp, #0
    51a6:	60f8      	str	r0, [r7, #12]
    51a8:	60b9      	str	r1, [r7, #8]
    51aa:	607a      	str	r2, [r7, #4]
    51ac:	603b      	str	r3, [r7, #0]
    scope_t *scope = scope_new(kind, pn, comp->source_file, emit_options);
    51ae:	68fb      	ldr	r3, [r7, #12]
    51b0:	681a      	ldr	r2, [r3, #0]
    51b2:	683b      	ldr	r3, [r7, #0]
    51b4:	6879      	ldr	r1, [r7, #4]
    51b6:	68b8      	ldr	r0, [r7, #8]
    51b8:	f7ff fdc6 	bl	4d48 <scope_new>
    51bc:	6138      	str	r0, [r7, #16]
    scope->parent = comp->scope_cur;
    51be:	68fb      	ldr	r3, [r7, #12]
    51c0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    51c2:	693b      	ldr	r3, [r7, #16]
    51c4:	605a      	str	r2, [r3, #4]
    scope->next = NULL;
    51c6:	693b      	ldr	r3, [r7, #16]
    51c8:	2200      	movs	r2, #0
    51ca:	609a      	str	r2, [r3, #8]
    if (comp->scope_head == NULL) {
    51cc:	68fb      	ldr	r3, [r7, #12]
    51ce:	6a1b      	ldr	r3, [r3, #32]
    51d0:	2b00      	cmp	r3, #0
    51d2:	d103      	bne.n	51dc <scope_new_and_link+0x3c>
        comp->scope_head = scope;
    51d4:	68fb      	ldr	r3, [r7, #12]
    51d6:	693a      	ldr	r2, [r7, #16]
    51d8:	621a      	str	r2, [r3, #32]
    51da:	e00d      	b.n	51f8 <scope_new_and_link+0x58>
    } else {
        scope_t *s = comp->scope_head;
    51dc:	68fb      	ldr	r3, [r7, #12]
    51de:	6a1b      	ldr	r3, [r3, #32]
    51e0:	617b      	str	r3, [r7, #20]
        while (s->next != NULL) {
    51e2:	e002      	b.n	51ea <scope_new_and_link+0x4a>
            s = s->next;
    51e4:	697b      	ldr	r3, [r7, #20]
    51e6:	689b      	ldr	r3, [r3, #8]
    51e8:	617b      	str	r3, [r7, #20]
        while (s->next != NULL) {
    51ea:	697b      	ldr	r3, [r7, #20]
    51ec:	689b      	ldr	r3, [r3, #8]
    51ee:	2b00      	cmp	r3, #0
    51f0:	d1f8      	bne.n	51e4 <scope_new_and_link+0x44>
        }
        s->next = scope;
    51f2:	697b      	ldr	r3, [r7, #20]
    51f4:	693a      	ldr	r2, [r7, #16]
    51f6:	609a      	str	r2, [r3, #8]
    }
    return scope;
    51f8:	693b      	ldr	r3, [r7, #16]
}
    51fa:	4618      	mov	r0, r3
    51fc:	3718      	adds	r7, #24
    51fe:	46bd      	mov	sp, r7
    5200:	bd80      	pop	{r7, pc}

00005202 <apply_to_single_or_list>:

typedef void (*apply_list_fun_t)(compiler_t *comp, mp_parse_node_t pn);

STATIC void apply_to_single_or_list(compiler_t *comp, mp_parse_node_t pn, pn_kind_t pn_list_kind, apply_list_fun_t f) {
    5202:	b580      	push	{r7, lr}
    5204:	b088      	sub	sp, #32
    5206:	af00      	add	r7, sp, #0
    5208:	60f8      	str	r0, [r7, #12]
    520a:	60b9      	str	r1, [r7, #8]
    520c:	607a      	str	r2, [r7, #4]
    520e:	603b      	str	r3, [r7, #0]
    if (MP_PARSE_NODE_IS_STRUCT_KIND(pn, pn_list_kind)) {
    5210:	68bb      	ldr	r3, [r7, #8]
    5212:	2b00      	cmp	r3, #0
    5214:	d024      	beq.n	5260 <apply_to_single_or_list+0x5e>
    5216:	68bb      	ldr	r3, [r7, #8]
    5218:	f003 0303 	and.w	r3, r3, #3
    521c:	2b00      	cmp	r3, #0
    521e:	d11f      	bne.n	5260 <apply_to_single_or_list+0x5e>
    5220:	68bb      	ldr	r3, [r7, #8]
    5222:	685b      	ldr	r3, [r3, #4]
    5224:	b2da      	uxtb	r2, r3
    5226:	687b      	ldr	r3, [r7, #4]
    5228:	429a      	cmp	r2, r3
    522a:	d119      	bne.n	5260 <apply_to_single_or_list+0x5e>
        mp_parse_node_struct_t *pns = (mp_parse_node_struct_t*)pn;
    522c:	68bb      	ldr	r3, [r7, #8]
    522e:	61bb      	str	r3, [r7, #24]
        int num_nodes = MP_PARSE_NODE_STRUCT_NUM_NODES(pns);
    5230:	69bb      	ldr	r3, [r7, #24]
    5232:	685b      	ldr	r3, [r3, #4]
    5234:	0a1b      	lsrs	r3, r3, #8
    5236:	617b      	str	r3, [r7, #20]
        for (int i = 0; i < num_nodes; i++) {
    5238:	2300      	movs	r3, #0
    523a:	61fb      	str	r3, [r7, #28]
    523c:	e00b      	b.n	5256 <apply_to_single_or_list+0x54>
            f(comp, pns->nodes[i]);
    523e:	69bb      	ldr	r3, [r7, #24]
    5240:	69fa      	ldr	r2, [r7, #28]
    5242:	3202      	adds	r2, #2
    5244:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    5248:	683b      	ldr	r3, [r7, #0]
    524a:	4611      	mov	r1, r2
    524c:	68f8      	ldr	r0, [r7, #12]
    524e:	4798      	blx	r3
        for (int i = 0; i < num_nodes; i++) {
    5250:	69fb      	ldr	r3, [r7, #28]
    5252:	3301      	adds	r3, #1
    5254:	61fb      	str	r3, [r7, #28]
    5256:	69fa      	ldr	r2, [r7, #28]
    5258:	697b      	ldr	r3, [r7, #20]
    525a:	429a      	cmp	r2, r3
    525c:	dbef      	blt.n	523e <apply_to_single_or_list+0x3c>
    if (MP_PARSE_NODE_IS_STRUCT_KIND(pn, pn_list_kind)) {
    525e:	e007      	b.n	5270 <apply_to_single_or_list+0x6e>
        }
    } else if (!MP_PARSE_NODE_IS_NULL(pn)) {
    5260:	68bb      	ldr	r3, [r7, #8]
    5262:	2b00      	cmp	r3, #0
    5264:	d004      	beq.n	5270 <apply_to_single_or_list+0x6e>
        f(comp, pn);
    5266:	683b      	ldr	r3, [r7, #0]
    5268:	68b9      	ldr	r1, [r7, #8]
    526a:	68f8      	ldr	r0, [r7, #12]
    526c:	4798      	blx	r3
    }
}
    526e:	e7ff      	b.n	5270 <apply_to_single_or_list+0x6e>
    5270:	bf00      	nop
    5272:	3720      	adds	r7, #32
    5274:	46bd      	mov	sp, r7
    5276:	bd80      	pop	{r7, pc}

00005278 <compile_generic_all_nodes>:

STATIC void compile_generic_all_nodes(compiler_t *comp, mp_parse_node_struct_t *pns) {
    5278:	b580      	push	{r7, lr}
    527a:	b084      	sub	sp, #16
    527c:	af00      	add	r7, sp, #0
    527e:	6078      	str	r0, [r7, #4]
    5280:	6039      	str	r1, [r7, #0]
    int num_nodes = MP_PARSE_NODE_STRUCT_NUM_NODES(pns);
    5282:	683b      	ldr	r3, [r7, #0]
    5284:	685b      	ldr	r3, [r3, #4]
    5286:	0a1b      	lsrs	r3, r3, #8
    5288:	60bb      	str	r3, [r7, #8]
    for (int i = 0; i < num_nodes; i++) {
    528a:	2300      	movs	r3, #0
    528c:	60fb      	str	r3, [r7, #12]
    528e:	e019      	b.n	52c4 <compile_generic_all_nodes+0x4c>
        compile_node(comp, pns->nodes[i]);
    5290:	683b      	ldr	r3, [r7, #0]
    5292:	68fa      	ldr	r2, [r7, #12]
    5294:	3202      	adds	r2, #2
    5296:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    529a:	4619      	mov	r1, r3
    529c:	6878      	ldr	r0, [r7, #4]
    529e:	f003 fcea 	bl	8c76 <compile_node>
        if (comp->compile_error != MP_OBJ_NULL) {
    52a2:	687b      	ldr	r3, [r7, #4]
    52a4:	689b      	ldr	r3, [r3, #8]
    52a6:	2b00      	cmp	r3, #0
    52a8:	d009      	beq.n	52be <compile_generic_all_nodes+0x46>
            // add line info for the error in case it didn't have a line number
            compile_error_set_line(comp, pns->nodes[i]);
    52aa:	683b      	ldr	r3, [r7, #0]
    52ac:	68fa      	ldr	r2, [r7, #12]
    52ae:	3202      	adds	r2, #2
    52b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    52b4:	4619      	mov	r1, r3
    52b6:	6878      	ldr	r0, [r7, #4]
    52b8:	f7ff fee6 	bl	5088 <compile_error_set_line>
            return;
    52bc:	e006      	b.n	52cc <compile_generic_all_nodes+0x54>
    for (int i = 0; i < num_nodes; i++) {
    52be:	68fb      	ldr	r3, [r7, #12]
    52c0:	3301      	adds	r3, #1
    52c2:	60fb      	str	r3, [r7, #12]
    52c4:	68fa      	ldr	r2, [r7, #12]
    52c6:	68bb      	ldr	r3, [r7, #8]
    52c8:	429a      	cmp	r2, r3
    52ca:	dbe1      	blt.n	5290 <compile_generic_all_nodes+0x18>
        }
    }
}
    52cc:	3710      	adds	r7, #16
    52ce:	46bd      	mov	sp, r7
    52d0:	bd80      	pop	{r7, pc}

000052d2 <compile_load_id>:

STATIC void compile_load_id(compiler_t *comp, qstr qst) {
    52d2:	b580      	push	{r7, lr}
    52d4:	b082      	sub	sp, #8
    52d6:	af00      	add	r7, sp, #0
    52d8:	6078      	str	r0, [r7, #4]
    52da:	6039      	str	r1, [r7, #0]
    if (comp->pass == MP_PASS_SCOPE) {
    52dc:	687b      	ldr	r3, [r7, #4]
    52de:	795b      	ldrb	r3, [r3, #5]
    52e0:	2b01      	cmp	r3, #1
    52e2:	d106      	bne.n	52f2 <compile_load_id+0x20>
        mp_emit_common_get_id_for_load(comp->scope_cur, qst);
    52e4:	687b      	ldr	r3, [r7, #4]
    52e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    52e8:	6839      	ldr	r1, [r7, #0]
    52ea:	4618      	mov	r0, r3
    52ec:	f7ff feb4 	bl	5058 <mp_emit_common_get_id_for_load>
        mp_emit_common_id_op(comp->emit, &comp->emit_method_table->load_id, comp->scope_cur, qst);
        #else
        mp_emit_common_id_op(comp->emit, &mp_emit_bc_method_table_load_id_ops, comp->scope_cur, qst);
        #endif
    }
}
    52f0:	e007      	b.n	5302 <compile_load_id+0x30>
        mp_emit_common_id_op(comp->emit, &mp_emit_bc_method_table_load_id_ops, comp->scope_cur, qst);
    52f2:	687b      	ldr	r3, [r7, #4]
    52f4:	6a98      	ldr	r0, [r3, #40]	; 0x28
    52f6:	687b      	ldr	r3, [r7, #4]
    52f8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    52fa:	683b      	ldr	r3, [r7, #0]
    52fc:	4903      	ldr	r1, [pc, #12]	; (530c <compile_load_id+0x3a>)
    52fe:	f004 fbd1 	bl	9aa4 <mp_emit_common_id_op>
}
    5302:	bf00      	nop
    5304:	3708      	adds	r7, #8
    5306:	46bd      	mov	sp, r7
    5308:	bd80      	pop	{r7, pc}
    530a:	bf00      	nop
    530c:	00022ce0 	.word	0x00022ce0

00005310 <compile_store_id>:

STATIC void compile_store_id(compiler_t *comp, qstr qst) {
    5310:	b580      	push	{r7, lr}
    5312:	b082      	sub	sp, #8
    5314:	af00      	add	r7, sp, #0
    5316:	6078      	str	r0, [r7, #4]
    5318:	6039      	str	r1, [r7, #0]
    if (comp->pass == MP_PASS_SCOPE) {
    531a:	687b      	ldr	r3, [r7, #4]
    531c:	795b      	ldrb	r3, [r3, #5]
    531e:	2b01      	cmp	r3, #1
    5320:	d106      	bne.n	5330 <compile_store_id+0x20>
        mp_emit_common_get_id_for_modification(comp->scope_cur, qst);
    5322:	687b      	ldr	r3, [r7, #4]
    5324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    5326:	6839      	ldr	r1, [r7, #0]
    5328:	4618      	mov	r0, r3
    532a:	f004 fba1 	bl	9a70 <mp_emit_common_get_id_for_modification>
        mp_emit_common_id_op(comp->emit, &comp->emit_method_table->store_id, comp->scope_cur, qst);
        #else
        mp_emit_common_id_op(comp->emit, &mp_emit_bc_method_table_store_id_ops, comp->scope_cur, qst);
        #endif
    }
}
    532e:	e007      	b.n	5340 <compile_store_id+0x30>
        mp_emit_common_id_op(comp->emit, &mp_emit_bc_method_table_store_id_ops, comp->scope_cur, qst);
    5330:	687b      	ldr	r3, [r7, #4]
    5332:	6a98      	ldr	r0, [r3, #40]	; 0x28
    5334:	687b      	ldr	r3, [r7, #4]
    5336:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    5338:	683b      	ldr	r3, [r7, #0]
    533a:	4903      	ldr	r1, [pc, #12]	; (5348 <compile_store_id+0x38>)
    533c:	f004 fbb2 	bl	9aa4 <mp_emit_common_id_op>
}
    5340:	bf00      	nop
    5342:	3708      	adds	r7, #8
    5344:	46bd      	mov	sp, r7
    5346:	bd80      	pop	{r7, pc}
    5348:	00022ce8 	.word	0x00022ce8

0000534c <compile_delete_id>:

STATIC void compile_delete_id(compiler_t *comp, qstr qst) {
    534c:	b580      	push	{r7, lr}
    534e:	b082      	sub	sp, #8
    5350:	af00      	add	r7, sp, #0
    5352:	6078      	str	r0, [r7, #4]
    5354:	6039      	str	r1, [r7, #0]
    if (comp->pass == MP_PASS_SCOPE) {
    5356:	687b      	ldr	r3, [r7, #4]
    5358:	795b      	ldrb	r3, [r3, #5]
    535a:	2b01      	cmp	r3, #1
    535c:	d106      	bne.n	536c <compile_delete_id+0x20>
        mp_emit_common_get_id_for_modification(comp->scope_cur, qst);
    535e:	687b      	ldr	r3, [r7, #4]
    5360:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    5362:	6839      	ldr	r1, [r7, #0]
    5364:	4618      	mov	r0, r3
    5366:	f004 fb83 	bl	9a70 <mp_emit_common_get_id_for_modification>
        mp_emit_common_id_op(comp->emit, &comp->emit_method_table->delete_id, comp->scope_cur, qst);
        #else
        mp_emit_common_id_op(comp->emit, &mp_emit_bc_method_table_delete_id_ops, comp->scope_cur, qst);
        #endif
    }
}
    536a:	e007      	b.n	537c <compile_delete_id+0x30>
        mp_emit_common_id_op(comp->emit, &mp_emit_bc_method_table_delete_id_ops, comp->scope_cur, qst);
    536c:	687b      	ldr	r3, [r7, #4]
    536e:	6a98      	ldr	r0, [r3, #40]	; 0x28
    5370:	687b      	ldr	r3, [r7, #4]
    5372:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    5374:	683b      	ldr	r3, [r7, #0]
    5376:	4903      	ldr	r1, [pc, #12]	; (5384 <compile_delete_id+0x38>)
    5378:	f004 fb94 	bl	9aa4 <mp_emit_common_id_op>
}
    537c:	bf00      	nop
    537e:	3708      	adds	r7, #8
    5380:	46bd      	mov	sp, r7
    5382:	bd80      	pop	{r7, pc}
    5384:	00022cf0 	.word	0x00022cf0

00005388 <c_tuple>:

STATIC void c_tuple(compiler_t *comp, mp_parse_node_t pn, mp_parse_node_struct_t *pns_list) {
    5388:	b580      	push	{r7, lr}
    538a:	b088      	sub	sp, #32
    538c:	af00      	add	r7, sp, #0
    538e:	60f8      	str	r0, [r7, #12]
    5390:	60b9      	str	r1, [r7, #8]
    5392:	607a      	str	r2, [r7, #4]
    int total = 0;
    5394:	2300      	movs	r3, #0
    5396:	61fb      	str	r3, [r7, #28]
    if (!MP_PARSE_NODE_IS_NULL(pn)) {
    5398:	68bb      	ldr	r3, [r7, #8]
    539a:	2b00      	cmp	r3, #0
    539c:	d006      	beq.n	53ac <c_tuple+0x24>
        compile_node(comp, pn);
    539e:	68b9      	ldr	r1, [r7, #8]
    53a0:	68f8      	ldr	r0, [r7, #12]
    53a2:	f003 fc68 	bl	8c76 <compile_node>
        total += 1;
    53a6:	69fb      	ldr	r3, [r7, #28]
    53a8:	3301      	adds	r3, #1
    53aa:	61fb      	str	r3, [r7, #28]
    }
    if (pns_list != NULL) {
    53ac:	687b      	ldr	r3, [r7, #4]
    53ae:	2b00      	cmp	r3, #0
    53b0:	d01a      	beq.n	53e8 <c_tuple+0x60>
        int n = MP_PARSE_NODE_STRUCT_NUM_NODES(pns_list);
    53b2:	687b      	ldr	r3, [r7, #4]
    53b4:	685b      	ldr	r3, [r3, #4]
    53b6:	0a1b      	lsrs	r3, r3, #8
    53b8:	617b      	str	r3, [r7, #20]
        for (int i = 0; i < n; i++) {
    53ba:	2300      	movs	r3, #0
    53bc:	61bb      	str	r3, [r7, #24]
    53be:	e00b      	b.n	53d8 <c_tuple+0x50>
            compile_node(comp, pns_list->nodes[i]);
    53c0:	687b      	ldr	r3, [r7, #4]
    53c2:	69ba      	ldr	r2, [r7, #24]
    53c4:	3202      	adds	r2, #2
    53c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    53ca:	4619      	mov	r1, r3
    53cc:	68f8      	ldr	r0, [r7, #12]
    53ce:	f003 fc52 	bl	8c76 <compile_node>
        for (int i = 0; i < n; i++) {
    53d2:	69bb      	ldr	r3, [r7, #24]
    53d4:	3301      	adds	r3, #1
    53d6:	61bb      	str	r3, [r7, #24]
    53d8:	69ba      	ldr	r2, [r7, #24]
    53da:	697b      	ldr	r3, [r7, #20]
    53dc:	429a      	cmp	r2, r3
    53de:	dbef      	blt.n	53c0 <c_tuple+0x38>
        }
        total += n;
    53e0:	69fa      	ldr	r2, [r7, #28]
    53e2:	697b      	ldr	r3, [r7, #20]
    53e4:	4413      	add	r3, r2
    53e6:	61fb      	str	r3, [r7, #28]
    }
    EMIT_ARG(build, total, MP_EMIT_BUILD_TUPLE);
    53e8:	68fb      	ldr	r3, [r7, #12]
    53ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    53ec:	69f9      	ldr	r1, [r7, #28]
    53ee:	2200      	movs	r2, #0
    53f0:	4618      	mov	r0, r3
    53f2:	f005 fc6a 	bl	acca <mp_emit_bc_build>
}
    53f6:	bf00      	nop
    53f8:	3720      	adds	r7, #32
    53fa:	46bd      	mov	sp, r7
    53fc:	bd80      	pop	{r7, pc}

000053fe <compile_generic_tuple>:

STATIC void compile_generic_tuple(compiler_t *comp, mp_parse_node_struct_t *pns) {
    53fe:	b580      	push	{r7, lr}
    5400:	b082      	sub	sp, #8
    5402:	af00      	add	r7, sp, #0
    5404:	6078      	str	r0, [r7, #4]
    5406:	6039      	str	r1, [r7, #0]
    // a simple tuple expression
    c_tuple(comp, MP_PARSE_NODE_NULL, pns);
    5408:	683a      	ldr	r2, [r7, #0]
    540a:	2100      	movs	r1, #0
    540c:	6878      	ldr	r0, [r7, #4]
    540e:	f7ff ffbb 	bl	5388 <c_tuple>
}
    5412:	bf00      	nop
    5414:	3708      	adds	r7, #8
    5416:	46bd      	mov	sp, r7
    5418:	bd80      	pop	{r7, pc}

0000541a <c_if_cond>:

STATIC void c_if_cond(compiler_t *comp, mp_parse_node_t pn, bool jump_if, int label) {
    541a:	b580      	push	{r7, lr}
    541c:	b08a      	sub	sp, #40	; 0x28
    541e:	af00      	add	r7, sp, #0
    5420:	60f8      	str	r0, [r7, #12]
    5422:	60b9      	str	r1, [r7, #8]
    5424:	603b      	str	r3, [r7, #0]
    5426:	4613      	mov	r3, r2
    5428:	71fb      	strb	r3, [r7, #7]
    if (mp_parse_node_is_const_false(pn)) {
    542a:	68b8      	ldr	r0, [r7, #8]
    542c:	f7fe fbfd 	bl	3c2a <mp_parse_node_is_const_false>
    5430:	4603      	mov	r3, r0
    5432:	2b00      	cmp	r3, #0
    5434:	d00e      	beq.n	5454 <c_if_cond+0x3a>
        if (jump_if == false) {
    5436:	79fb      	ldrb	r3, [r7, #7]
    5438:	f083 0301 	eor.w	r3, r3, #1
    543c:	b2db      	uxtb	r3, r3
    543e:	2b00      	cmp	r3, #0
    5440:	f000 80eb 	beq.w	561a <c_if_cond+0x200>
            EMIT_ARG(jump, label);
    5444:	68fb      	ldr	r3, [r7, #12]
    5446:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5448:	683a      	ldr	r2, [r7, #0]
    544a:	4611      	mov	r1, r2
    544c:	4618      	mov	r0, r3
    544e:	f005 fab1 	bl	a9b4 <mp_emit_bc_jump>
        }
        return;
    5452:	e0e2      	b.n	561a <c_if_cond+0x200>
    } else if (mp_parse_node_is_const_true(pn)) {
    5454:	68b8      	ldr	r0, [r7, #8]
    5456:	f7fe fc04 	bl	3c62 <mp_parse_node_is_const_true>
    545a:	4603      	mov	r3, r0
    545c:	2b00      	cmp	r3, #0
    545e:	d00b      	beq.n	5478 <c_if_cond+0x5e>
        if (jump_if == true) {
    5460:	79fb      	ldrb	r3, [r7, #7]
    5462:	2b00      	cmp	r3, #0
    5464:	f000 80db 	beq.w	561e <c_if_cond+0x204>
            EMIT_ARG(jump, label);
    5468:	68fb      	ldr	r3, [r7, #12]
    546a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    546c:	683a      	ldr	r2, [r7, #0]
    546e:	4611      	mov	r1, r2
    5470:	4618      	mov	r0, r3
    5472:	f005 fa9f 	bl	a9b4 <mp_emit_bc_jump>
        }
        return;
    5476:	e0d2      	b.n	561e <c_if_cond+0x204>
    } else if (MP_PARSE_NODE_IS_STRUCT(pn)) {
    5478:	68bb      	ldr	r3, [r7, #8]
    547a:	2b00      	cmp	r3, #0
    547c:	f000 80c1 	beq.w	5602 <c_if_cond+0x1e8>
    5480:	68bb      	ldr	r3, [r7, #8]
    5482:	f003 0303 	and.w	r3, r3, #3
    5486:	2b00      	cmp	r3, #0
    5488:	f040 80bb 	bne.w	5602 <c_if_cond+0x1e8>
        mp_parse_node_struct_t *pns = (mp_parse_node_struct_t*)pn;
    548c:	68bb      	ldr	r3, [r7, #8]
    548e:	61fb      	str	r3, [r7, #28]
        int n = MP_PARSE_NODE_STRUCT_NUM_NODES(pns);
    5490:	69fb      	ldr	r3, [r7, #28]
    5492:	685b      	ldr	r3, [r3, #4]
    5494:	0a1b      	lsrs	r3, r3, #8
    5496:	61bb      	str	r3, [r7, #24]
        if (MP_PARSE_NODE_STRUCT_KIND(pns) == PN_or_test) {
    5498:	69fb      	ldr	r3, [r7, #28]
    549a:	685b      	ldr	r3, [r3, #4]
    549c:	b2db      	uxtb	r3, r3
    549e:	2b1c      	cmp	r3, #28
    54a0:	d152      	bne.n	5548 <c_if_cond+0x12e>
            if (jump_if == false) {
    54a2:	79fb      	ldrb	r3, [r7, #7]
    54a4:	f083 0301 	eor.w	r3, r3, #1
    54a8:	b2db      	uxtb	r3, r3
    54aa:	2b00      	cmp	r3, #0
    54ac:	d037      	beq.n	551e <c_if_cond+0x104>
    54ae:	e000      	b.n	54b2 <c_if_cond+0x98>
            return;
        } else if (MP_PARSE_NODE_STRUCT_KIND(pns) == PN_and_test) {
            if (jump_if == false) {
                goto and_or_logic2;
            } else {
                goto and_or_logic1;
    54b0:	bf00      	nop
                uint label2 = comp_next_label(comp);
    54b2:	68f8      	ldr	r0, [r7, #12]
    54b4:	f7ff fe1e 	bl	50f4 <comp_next_label>
    54b8:	6178      	str	r0, [r7, #20]
                for (int i = 0; i < n - 1; i++) {
    54ba:	2300      	movs	r3, #0
    54bc:	627b      	str	r3, [r7, #36]	; 0x24
    54be:	e017      	b.n	54f0 <c_if_cond+0xd6>
                    c_if_cond(comp, pns->nodes[i], !jump_if, label2);
    54c0:	69fb      	ldr	r3, [r7, #28]
    54c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    54c4:	3202      	adds	r2, #2
    54c6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    54ca:	79fb      	ldrb	r3, [r7, #7]
    54cc:	2b00      	cmp	r3, #0
    54ce:	bf14      	ite	ne
    54d0:	2301      	movne	r3, #1
    54d2:	2300      	moveq	r3, #0
    54d4:	b2db      	uxtb	r3, r3
    54d6:	f083 0301 	eor.w	r3, r3, #1
    54da:	b2db      	uxtb	r3, r3
    54dc:	f003 0301 	and.w	r3, r3, #1
    54e0:	b2da      	uxtb	r2, r3
    54e2:	697b      	ldr	r3, [r7, #20]
    54e4:	68f8      	ldr	r0, [r7, #12]
    54e6:	f7ff ff98 	bl	541a <c_if_cond>
                for (int i = 0; i < n - 1; i++) {
    54ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    54ec:	3301      	adds	r3, #1
    54ee:	627b      	str	r3, [r7, #36]	; 0x24
    54f0:	69bb      	ldr	r3, [r7, #24]
    54f2:	1e5a      	subs	r2, r3, #1
    54f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    54f6:	429a      	cmp	r2, r3
    54f8:	dce2      	bgt.n	54c0 <c_if_cond+0xa6>
                c_if_cond(comp, pns->nodes[n - 1], jump_if, label);
    54fa:	69bb      	ldr	r3, [r7, #24]
    54fc:	1e5a      	subs	r2, r3, #1
    54fe:	69fb      	ldr	r3, [r7, #28]
    5500:	3202      	adds	r2, #2
    5502:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    5506:	79fa      	ldrb	r2, [r7, #7]
    5508:	683b      	ldr	r3, [r7, #0]
    550a:	68f8      	ldr	r0, [r7, #12]
    550c:	f7ff ff85 	bl	541a <c_if_cond>
                EMIT_ARG(label_assign, label2);
    5510:	68fb      	ldr	r3, [r7, #12]
    5512:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5514:	6979      	ldr	r1, [r7, #20]
    5516:	4618      	mov	r0, r3
    5518:	f004 ffc2 	bl	a4a0 <mp_emit_bc_label_assign>
            return;
    551c:	e082      	b.n	5624 <c_if_cond+0x20a>
                for (int i = 0; i < n; i++) {
    551e:	2300      	movs	r3, #0
    5520:	623b      	str	r3, [r7, #32]
    5522:	e00c      	b.n	553e <c_if_cond+0x124>
                    c_if_cond(comp, pns->nodes[i], jump_if, label);
    5524:	69fb      	ldr	r3, [r7, #28]
    5526:	6a3a      	ldr	r2, [r7, #32]
    5528:	3202      	adds	r2, #2
    552a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    552e:	79fa      	ldrb	r2, [r7, #7]
    5530:	683b      	ldr	r3, [r7, #0]
    5532:	68f8      	ldr	r0, [r7, #12]
    5534:	f7ff ff71 	bl	541a <c_if_cond>
                for (int i = 0; i < n; i++) {
    5538:	6a3b      	ldr	r3, [r7, #32]
    553a:	3301      	adds	r3, #1
    553c:	623b      	str	r3, [r7, #32]
    553e:	6a3a      	ldr	r2, [r7, #32]
    5540:	69bb      	ldr	r3, [r7, #24]
    5542:	429a      	cmp	r2, r3
    5544:	dbee      	blt.n	5524 <c_if_cond+0x10a>
            return;
    5546:	e06d      	b.n	5624 <c_if_cond+0x20a>
        } else if (MP_PARSE_NODE_STRUCT_KIND(pns) == PN_and_test) {
    5548:	69fb      	ldr	r3, [r7, #28]
    554a:	685b      	ldr	r3, [r3, #4]
    554c:	b2db      	uxtb	r3, r3
    554e:	2b1d      	cmp	r3, #29
    5550:	d106      	bne.n	5560 <c_if_cond+0x146>
            if (jump_if == false) {
    5552:	79fb      	ldrb	r3, [r7, #7]
    5554:	f083 0301 	eor.w	r3, r3, #1
    5558:	b2db      	uxtb	r3, r3
    555a:	2b00      	cmp	r3, #0
    555c:	d0a8      	beq.n	54b0 <c_if_cond+0x96>
                goto and_or_logic2;
    555e:	e7de      	b.n	551e <c_if_cond+0x104>
            }
        } else if (MP_PARSE_NODE_STRUCT_KIND(pns) == PN_not_test_2) {
    5560:	69fb      	ldr	r3, [r7, #28]
    5562:	685b      	ldr	r3, [r3, #4]
    5564:	b2db      	uxtb	r3, r3
    5566:	2b1e      	cmp	r3, #30
    5568:	d112      	bne.n	5590 <c_if_cond+0x176>
            c_if_cond(comp, pns->nodes[0], !jump_if, label);
    556a:	69fb      	ldr	r3, [r7, #28]
    556c:	6899      	ldr	r1, [r3, #8]
    556e:	79fb      	ldrb	r3, [r7, #7]
    5570:	2b00      	cmp	r3, #0
    5572:	bf14      	ite	ne
    5574:	2301      	movne	r3, #1
    5576:	2300      	moveq	r3, #0
    5578:	b2db      	uxtb	r3, r3
    557a:	f083 0301 	eor.w	r3, r3, #1
    557e:	b2db      	uxtb	r3, r3
    5580:	f003 0301 	and.w	r3, r3, #1
    5584:	b2da      	uxtb	r2, r3
    5586:	683b      	ldr	r3, [r7, #0]
    5588:	68f8      	ldr	r0, [r7, #12]
    558a:	f7ff ff46 	bl	541a <c_if_cond>
            return;
    558e:	e049      	b.n	5624 <c_if_cond+0x20a>
        } else if (MP_PARSE_NODE_STRUCT_KIND(pns) == PN_atom_paren) {
    5590:	69fb      	ldr	r3, [r7, #28]
    5592:	685b      	ldr	r3, [r3, #4]
    5594:	b2db      	uxtb	r3, r3
    5596:	2b2a      	cmp	r3, #42	; 0x2a
    5598:	d133      	bne.n	5602 <c_if_cond+0x1e8>
            // cond is something in parenthesis
            if (MP_PARSE_NODE_IS_NULL(pns->nodes[0])) {
    559a:	69fb      	ldr	r3, [r7, #28]
    559c:	689b      	ldr	r3, [r3, #8]
    559e:	2b00      	cmp	r3, #0
    55a0:	d10d      	bne.n	55be <c_if_cond+0x1a4>
                // empty tuple, acts as false for the condition
                if (jump_if == false) {
    55a2:	79fb      	ldrb	r3, [r7, #7]
    55a4:	f083 0301 	eor.w	r3, r3, #1
    55a8:	b2db      	uxtb	r3, r3
    55aa:	2b00      	cmp	r3, #0
    55ac:	d039      	beq.n	5622 <c_if_cond+0x208>
                    EMIT_ARG(jump, label);
    55ae:	68fb      	ldr	r3, [r7, #12]
    55b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    55b2:	683a      	ldr	r2, [r7, #0]
    55b4:	4611      	mov	r1, r2
    55b6:	4618      	mov	r0, r3
    55b8:	f005 f9fc 	bl	a9b4 <mp_emit_bc_jump>
                // non-empty tuple, acts as true for the condition
                if (jump_if == true) {
                    EMIT_ARG(jump, label);
                }
            }
            return;
    55bc:	e031      	b.n	5622 <c_if_cond+0x208>
                assert(MP_PARSE_NODE_IS_STRUCT_KIND(pns->nodes[0], PN_testlist_comp));
    55be:	69fb      	ldr	r3, [r7, #28]
    55c0:	689b      	ldr	r3, [r3, #8]
    55c2:	2b00      	cmp	r3, #0
    55c4:	d00b      	beq.n	55de <c_if_cond+0x1c4>
    55c6:	69fb      	ldr	r3, [r7, #28]
    55c8:	689b      	ldr	r3, [r3, #8]
    55ca:	f003 0303 	and.w	r3, r3, #3
    55ce:	2b00      	cmp	r3, #0
    55d0:	d105      	bne.n	55de <c_if_cond+0x1c4>
    55d2:	69fb      	ldr	r3, [r7, #28]
    55d4:	689b      	ldr	r3, [r3, #8]
    55d6:	685b      	ldr	r3, [r3, #4]
    55d8:	b2db      	uxtb	r3, r3
    55da:	2b8a      	cmp	r3, #138	; 0x8a
    55dc:	d006      	beq.n	55ec <c_if_cond+0x1d2>
    55de:	4b13      	ldr	r3, [pc, #76]	; (562c <c_if_cond+0x212>)
    55e0:	4a13      	ldr	r2, [pc, #76]	; (5630 <c_if_cond+0x216>)
    55e2:	f44f 71ac 	mov.w	r1, #344	; 0x158
    55e6:	4813      	ldr	r0, [pc, #76]	; (5634 <c_if_cond+0x21a>)
    55e8:	f017 fc7a 	bl	1cee0 <__assert_func>
                if (jump_if == true) {
    55ec:	79fb      	ldrb	r3, [r7, #7]
    55ee:	2b00      	cmp	r3, #0
    55f0:	d017      	beq.n	5622 <c_if_cond+0x208>
                    EMIT_ARG(jump, label);
    55f2:	68fb      	ldr	r3, [r7, #12]
    55f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    55f6:	683a      	ldr	r2, [r7, #0]
    55f8:	4611      	mov	r1, r2
    55fa:	4618      	mov	r0, r3
    55fc:	f005 f9da 	bl	a9b4 <mp_emit_bc_jump>
            return;
    5600:	e00f      	b.n	5622 <c_if_cond+0x208>
        }
    }

    // nothing special, fall back to default compiling for node and jump
    compile_node(comp, pn);
    5602:	68b9      	ldr	r1, [r7, #8]
    5604:	68f8      	ldr	r0, [r7, #12]
    5606:	f003 fb36 	bl	8c76 <compile_node>
    EMIT_ARG(pop_jump_if, jump_if, label);
    560a:	68fb      	ldr	r3, [r7, #12]
    560c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    560e:	683a      	ldr	r2, [r7, #0]
    5610:	79f9      	ldrb	r1, [r7, #7]
    5612:	4618      	mov	r0, r3
    5614:	f005 f9e0 	bl	a9d8 <mp_emit_bc_pop_jump_if>
    5618:	e004      	b.n	5624 <c_if_cond+0x20a>
        return;
    561a:	bf00      	nop
    561c:	e002      	b.n	5624 <c_if_cond+0x20a>
        return;
    561e:	bf00      	nop
    5620:	e000      	b.n	5624 <c_if_cond+0x20a>
            return;
    5622:	bf00      	nop
}
    5624:	3728      	adds	r7, #40	; 0x28
    5626:	46bd      	mov	sp, r7
    5628:	bd80      	pop	{r7, pc}
    562a:	bf00      	nop
    562c:	00021c74 	.word	0x00021c74
    5630:	000227ec 	.word	0x000227ec
    5634:	00021c60 	.word	0x00021c60

00005638 <c_assign_atom_expr>:

typedef enum { ASSIGN_STORE, ASSIGN_AUG_LOAD, ASSIGN_AUG_STORE } assign_kind_t;
STATIC void c_assign(compiler_t *comp, mp_parse_node_t pn, assign_kind_t kind);

STATIC void c_assign_atom_expr(compiler_t *comp, mp_parse_node_struct_t *pns, assign_kind_t assign_kind) {
    5638:	b580      	push	{r7, lr}
    563a:	b088      	sub	sp, #32
    563c:	af00      	add	r7, sp, #0
    563e:	60f8      	str	r0, [r7, #12]
    5640:	60b9      	str	r1, [r7, #8]
    5642:	607a      	str	r2, [r7, #4]
    if (assign_kind != ASSIGN_AUG_STORE) {
    5644:	687b      	ldr	r3, [r7, #4]
    5646:	2b02      	cmp	r3, #2
    5648:	d005      	beq.n	5656 <c_assign_atom_expr+0x1e>
        compile_node(comp, pns->nodes[0]);
    564a:	68bb      	ldr	r3, [r7, #8]
    564c:	689b      	ldr	r3, [r3, #8]
    564e:	4619      	mov	r1, r3
    5650:	68f8      	ldr	r0, [r7, #12]
    5652:	f003 fb10 	bl	8c76 <compile_node>
    }

    if (MP_PARSE_NODE_IS_STRUCT(pns->nodes[1])) {
    5656:	68bb      	ldr	r3, [r7, #8]
    5658:	68db      	ldr	r3, [r3, #12]
    565a:	2b00      	cmp	r3, #0
    565c:	f000 80b0 	beq.w	57c0 <c_assign_atom_expr+0x188>
    5660:	68bb      	ldr	r3, [r7, #8]
    5662:	68db      	ldr	r3, [r3, #12]
    5664:	f003 0303 	and.w	r3, r3, #3
    5668:	2b00      	cmp	r3, #0
    566a:	f040 80a9 	bne.w	57c0 <c_assign_atom_expr+0x188>
        mp_parse_node_struct_t *pns1 = (mp_parse_node_struct_t*)pns->nodes[1];
    566e:	68bb      	ldr	r3, [r7, #8]
    5670:	68db      	ldr	r3, [r3, #12]
    5672:	61fb      	str	r3, [r7, #28]
        if (MP_PARSE_NODE_STRUCT_KIND(pns1) == PN_atom_expr_trailers) {
    5674:	69fb      	ldr	r3, [r7, #28]
    5676:	685b      	ldr	r3, [r3, #4]
    5678:	b2db      	uxtb	r3, r3
    567a:	2b86      	cmp	r3, #134	; 0x86
    567c:	d13a      	bne.n	56f4 <c_assign_atom_expr+0xbc>
            int n = MP_PARSE_NODE_STRUCT_NUM_NODES(pns1);
    567e:	69fb      	ldr	r3, [r7, #28]
    5680:	685b      	ldr	r3, [r3, #4]
    5682:	0a1b      	lsrs	r3, r3, #8
    5684:	617b      	str	r3, [r7, #20]
            if (assign_kind != ASSIGN_AUG_STORE) {
    5686:	687b      	ldr	r3, [r7, #4]
    5688:	2b02      	cmp	r3, #2
    568a:	d013      	beq.n	56b4 <c_assign_atom_expr+0x7c>
                for (int i = 0; i < n - 1; i++) {
    568c:	2300      	movs	r3, #0
    568e:	61bb      	str	r3, [r7, #24]
    5690:	e00b      	b.n	56aa <c_assign_atom_expr+0x72>
                    compile_node(comp, pns1->nodes[i]);
    5692:	69fb      	ldr	r3, [r7, #28]
    5694:	69ba      	ldr	r2, [r7, #24]
    5696:	3202      	adds	r2, #2
    5698:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    569c:	4619      	mov	r1, r3
    569e:	68f8      	ldr	r0, [r7, #12]
    56a0:	f003 fae9 	bl	8c76 <compile_node>
                for (int i = 0; i < n - 1; i++) {
    56a4:	69bb      	ldr	r3, [r7, #24]
    56a6:	3301      	adds	r3, #1
    56a8:	61bb      	str	r3, [r7, #24]
    56aa:	697b      	ldr	r3, [r7, #20]
    56ac:	1e5a      	subs	r2, r3, #1
    56ae:	69bb      	ldr	r3, [r7, #24]
    56b0:	429a      	cmp	r2, r3
    56b2:	dcee      	bgt.n	5692 <c_assign_atom_expr+0x5a>
                }
            }
            assert(MP_PARSE_NODE_IS_STRUCT(pns1->nodes[n - 1]));
    56b4:	697b      	ldr	r3, [r7, #20]
    56b6:	1e5a      	subs	r2, r3, #1
    56b8:	69fb      	ldr	r3, [r7, #28]
    56ba:	3202      	adds	r2, #2
    56bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    56c0:	2b00      	cmp	r3, #0
    56c2:	d009      	beq.n	56d8 <c_assign_atom_expr+0xa0>
    56c4:	697b      	ldr	r3, [r7, #20]
    56c6:	1e5a      	subs	r2, r3, #1
    56c8:	69fb      	ldr	r3, [r7, #28]
    56ca:	3202      	adds	r2, #2
    56cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    56d0:	f003 0303 	and.w	r3, r3, #3
    56d4:	2b00      	cmp	r3, #0
    56d6:	d006      	beq.n	56e6 <c_assign_atom_expr+0xae>
    56d8:	4b3e      	ldr	r3, [pc, #248]	; (57d4 <c_assign_atom_expr+0x19c>)
    56da:	4a3f      	ldr	r2, [pc, #252]	; (57d8 <c_assign_atom_expr+0x1a0>)
    56dc:	f44f 71bc 	mov.w	r1, #376	; 0x178
    56e0:	483e      	ldr	r0, [pc, #248]	; (57dc <c_assign_atom_expr+0x1a4>)
    56e2:	f017 fbfd 	bl	1cee0 <__assert_func>
            pns1 = (mp_parse_node_struct_t*)pns1->nodes[n - 1];
    56e6:	697b      	ldr	r3, [r7, #20]
    56e8:	1e5a      	subs	r2, r3, #1
    56ea:	69fb      	ldr	r3, [r7, #28]
    56ec:	3202      	adds	r2, #2
    56ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    56f2:	61fb      	str	r3, [r7, #28]
        }
        if (MP_PARSE_NODE_STRUCT_KIND(pns1) == PN_trailer_bracket) {
    56f4:	69fb      	ldr	r3, [r7, #28]
    56f6:	685b      	ldr	r3, [r3, #4]
    56f8:	b2db      	uxtb	r3, r3
    56fa:	2b2e      	cmp	r3, #46	; 0x2e
    56fc:	d12a      	bne.n	5754 <c_assign_atom_expr+0x11c>
            if (assign_kind == ASSIGN_AUG_STORE) {
    56fe:	687b      	ldr	r3, [r7, #4]
    5700:	2b02      	cmp	r3, #2
    5702:	d10b      	bne.n	571c <c_assign_atom_expr+0xe4>
                EMIT(rot_three);
    5704:	68fb      	ldr	r3, [r7, #12]
    5706:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5708:	4618      	mov	r0, r3
    570a:	f005 f943 	bl	a994 <mp_emit_bc_rot_three>
                EMIT_ARG(subscr, MP_EMIT_SUBSCR_STORE);
    570e:	68fb      	ldr	r3, [r7, #12]
    5710:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5712:	2101      	movs	r1, #1
    5714:	4618      	mov	r0, r3
    5716:	f005 f83f 	bl	a798 <mp_emit_bc_subscr>
                    EMIT_ARG(subscr, MP_EMIT_SUBSCR_LOAD);
                } else {
                    EMIT_ARG(subscr, MP_EMIT_SUBSCR_STORE);
                }
            }
            return;
    571a:	e057      	b.n	57cc <c_assign_atom_expr+0x194>
                compile_node(comp, pns1->nodes[0]);
    571c:	69fb      	ldr	r3, [r7, #28]
    571e:	689b      	ldr	r3, [r3, #8]
    5720:	4619      	mov	r1, r3
    5722:	68f8      	ldr	r0, [r7, #12]
    5724:	f003 faa7 	bl	8c76 <compile_node>
                if (assign_kind == ASSIGN_AUG_LOAD) {
    5728:	687b      	ldr	r3, [r7, #4]
    572a:	2b01      	cmp	r3, #1
    572c:	d10b      	bne.n	5746 <c_assign_atom_expr+0x10e>
                    EMIT(dup_top_two);
    572e:	68fb      	ldr	r3, [r7, #12]
    5730:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5732:	4618      	mov	r0, r3
    5734:	f005 f8fd 	bl	a932 <mp_emit_bc_dup_top_two>
                    EMIT_ARG(subscr, MP_EMIT_SUBSCR_LOAD);
    5738:	68fb      	ldr	r3, [r7, #12]
    573a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    573c:	2100      	movs	r1, #0
    573e:	4618      	mov	r0, r3
    5740:	f005 f82a 	bl	a798 <mp_emit_bc_subscr>
            return;
    5744:	e042      	b.n	57cc <c_assign_atom_expr+0x194>
                    EMIT_ARG(subscr, MP_EMIT_SUBSCR_STORE);
    5746:	68fb      	ldr	r3, [r7, #12]
    5748:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    574a:	2101      	movs	r1, #1
    574c:	4618      	mov	r0, r3
    574e:	f005 f823 	bl	a798 <mp_emit_bc_subscr>
            return;
    5752:	e03b      	b.n	57cc <c_assign_atom_expr+0x194>
        } else if (MP_PARSE_NODE_STRUCT_KIND(pns1) == PN_trailer_period) {
    5754:	69fb      	ldr	r3, [r7, #28]
    5756:	685b      	ldr	r3, [r3, #4]
    5758:	b2db      	uxtb	r3, r3
    575a:	2b2f      	cmp	r3, #47	; 0x2f
    575c:	d130      	bne.n	57c0 <c_assign_atom_expr+0x188>
            assert(MP_PARSE_NODE_IS_ID(pns1->nodes[0]));
    575e:	69fb      	ldr	r3, [r7, #28]
    5760:	689b      	ldr	r3, [r3, #8]
    5762:	f003 030f 	and.w	r3, r3, #15
    5766:	2b02      	cmp	r3, #2
    5768:	d006      	beq.n	5778 <c_assign_atom_expr+0x140>
    576a:	4b1d      	ldr	r3, [pc, #116]	; (57e0 <c_assign_atom_expr+0x1a8>)
    576c:	4a1a      	ldr	r2, [pc, #104]	; (57d8 <c_assign_atom_expr+0x1a0>)
    576e:	f44f 71c5 	mov.w	r1, #394	; 0x18a
    5772:	481a      	ldr	r0, [pc, #104]	; (57dc <c_assign_atom_expr+0x1a4>)
    5774:	f017 fbb4 	bl	1cee0 <__assert_func>
            if (assign_kind == ASSIGN_AUG_LOAD) {
    5778:	687b      	ldr	r3, [r7, #4]
    577a:	2b01      	cmp	r3, #1
    577c:	d10e      	bne.n	579c <c_assign_atom_expr+0x164>
                EMIT(dup_top);
    577e:	68fb      	ldr	r3, [r7, #12]
    5780:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5782:	4618      	mov	r0, r3
    5784:	f005 f8c5 	bl	a912 <mp_emit_bc_dup_top>
                EMIT_ARG(attr, MP_PARSE_NODE_LEAF_ARG(pns1->nodes[0]), MP_EMIT_ATTR_LOAD);
    5788:	68fb      	ldr	r3, [r7, #12]
    578a:	6a98      	ldr	r0, [r3, #40]	; 0x28
    578c:	69fb      	ldr	r3, [r7, #28]
    578e:	689b      	ldr	r3, [r3, #8]
    5790:	091b      	lsrs	r3, r3, #4
    5792:	2200      	movs	r2, #0
    5794:	4619      	mov	r1, r3
    5796:	f005 f827 	bl	a7e8 <mp_emit_bc_attr>
                if (assign_kind == ASSIGN_AUG_STORE) {
                    EMIT(rot_two);
                }
                EMIT_ARG(attr, MP_PARSE_NODE_LEAF_ARG(pns1->nodes[0]), MP_EMIT_ATTR_STORE);
            }
            return;
    579a:	e017      	b.n	57cc <c_assign_atom_expr+0x194>
                if (assign_kind == ASSIGN_AUG_STORE) {
    579c:	687b      	ldr	r3, [r7, #4]
    579e:	2b02      	cmp	r3, #2
    57a0:	d104      	bne.n	57ac <c_assign_atom_expr+0x174>
                    EMIT(rot_two);
    57a2:	68fb      	ldr	r3, [r7, #12]
    57a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    57a6:	4618      	mov	r0, r3
    57a8:	f005 f8e4 	bl	a974 <mp_emit_bc_rot_two>
                EMIT_ARG(attr, MP_PARSE_NODE_LEAF_ARG(pns1->nodes[0]), MP_EMIT_ATTR_STORE);
    57ac:	68fb      	ldr	r3, [r7, #12]
    57ae:	6a98      	ldr	r0, [r3, #40]	; 0x28
    57b0:	69fb      	ldr	r3, [r7, #28]
    57b2:	689b      	ldr	r3, [r3, #8]
    57b4:	091b      	lsrs	r3, r3, #4
    57b6:	2201      	movs	r2, #1
    57b8:	4619      	mov	r1, r3
    57ba:	f005 f815 	bl	a7e8 <mp_emit_bc_attr>
            return;
    57be:	e005      	b.n	57cc <c_assign_atom_expr+0x194>
        }
    }

    compile_syntax_error(comp, (mp_parse_node_t)pns, "can't assign to expression");
    57c0:	68bb      	ldr	r3, [r7, #8]
    57c2:	4a08      	ldr	r2, [pc, #32]	; (57e4 <c_assign_atom_expr+0x1ac>)
    57c4:	4619      	mov	r1, r3
    57c6:	68f8      	ldr	r0, [r7, #12]
    57c8:	f7ff fc79 	bl	50be <compile_syntax_error>
}
    57cc:	3720      	adds	r7, #32
    57ce:	46bd      	mov	sp, r7
    57d0:	bd80      	pop	{r7, pc}
    57d2:	bf00      	nop
    57d4:	00021cb4 	.word	0x00021cb4
    57d8:	000227f8 	.word	0x000227f8
    57dc:	00021c60 	.word	0x00021c60
    57e0:	00021ce0 	.word	0x00021ce0
    57e4:	00021d04 	.word	0x00021d04

000057e8 <c_assign_tuple>:

// we need to allow for a caller passing in 1 initial node (node_head) followed by an array of nodes (nodes_tail)
STATIC void c_assign_tuple(compiler_t *comp, mp_parse_node_t node_head, uint num_tail, mp_parse_node_t *nodes_tail) {
    57e8:	b580      	push	{r7, lr}
    57ea:	b088      	sub	sp, #32
    57ec:	af00      	add	r7, sp, #0
    57ee:	60f8      	str	r0, [r7, #12]
    57f0:	60b9      	str	r1, [r7, #8]
    57f2:	607a      	str	r2, [r7, #4]
    57f4:	603b      	str	r3, [r7, #0]
    uint num_head = (node_head == MP_PARSE_NODE_NULL) ? 0 : 1;
    57f6:	68bb      	ldr	r3, [r7, #8]
    57f8:	2b00      	cmp	r3, #0
    57fa:	bf14      	ite	ne
    57fc:	2301      	movne	r3, #1
    57fe:	2300      	moveq	r3, #0
    5800:	b2db      	uxtb	r3, r3
    5802:	613b      	str	r3, [r7, #16]

    // look for star expression
    uint have_star_index = -1;
    5804:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    5808:	61fb      	str	r3, [r7, #28]
    if (num_head != 0 && MP_PARSE_NODE_IS_STRUCT_KIND(node_head, PN_star_expr)) {
    580a:	693b      	ldr	r3, [r7, #16]
    580c:	2b00      	cmp	r3, #0
    580e:	d015      	beq.n	583c <c_assign_tuple+0x54>
    5810:	68bb      	ldr	r3, [r7, #8]
    5812:	2b00      	cmp	r3, #0
    5814:	d012      	beq.n	583c <c_assign_tuple+0x54>
    5816:	68bb      	ldr	r3, [r7, #8]
    5818:	f003 0303 	and.w	r3, r3, #3
    581c:	2b00      	cmp	r3, #0
    581e:	d10d      	bne.n	583c <c_assign_tuple+0x54>
    5820:	68bb      	ldr	r3, [r7, #8]
    5822:	685b      	ldr	r3, [r3, #4]
    5824:	b2db      	uxtb	r3, r3
    5826:	2b20      	cmp	r3, #32
    5828:	d108      	bne.n	583c <c_assign_tuple+0x54>
        EMIT_ARG(unpack_ex, 0, num_tail);
    582a:	68fb      	ldr	r3, [r7, #12]
    582c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    582e:	687a      	ldr	r2, [r7, #4]
    5830:	2100      	movs	r1, #0
    5832:	4618      	mov	r0, r3
    5834:	f005 fab7 	bl	ada6 <mp_emit_bc_unpack_ex>
        have_star_index = 0;
    5838:	2300      	movs	r3, #0
    583a:	61fb      	str	r3, [r7, #28]
    }
    for (uint i = 0; i < num_tail; i++) {
    583c:	2300      	movs	r3, #0
    583e:	61bb      	str	r3, [r7, #24]
    5840:	e03b      	b.n	58ba <c_assign_tuple+0xd2>
        if (MP_PARSE_NODE_IS_STRUCT_KIND(nodes_tail[i], PN_star_expr)) {
    5842:	69bb      	ldr	r3, [r7, #24]
    5844:	009b      	lsls	r3, r3, #2
    5846:	683a      	ldr	r2, [r7, #0]
    5848:	4413      	add	r3, r2
    584a:	681b      	ldr	r3, [r3, #0]
    584c:	2b00      	cmp	r3, #0
    584e:	d031      	beq.n	58b4 <c_assign_tuple+0xcc>
    5850:	69bb      	ldr	r3, [r7, #24]
    5852:	009b      	lsls	r3, r3, #2
    5854:	683a      	ldr	r2, [r7, #0]
    5856:	4413      	add	r3, r2
    5858:	681b      	ldr	r3, [r3, #0]
    585a:	f003 0303 	and.w	r3, r3, #3
    585e:	2b00      	cmp	r3, #0
    5860:	d128      	bne.n	58b4 <c_assign_tuple+0xcc>
    5862:	69bb      	ldr	r3, [r7, #24]
    5864:	009b      	lsls	r3, r3, #2
    5866:	683a      	ldr	r2, [r7, #0]
    5868:	4413      	add	r3, r2
    586a:	681b      	ldr	r3, [r3, #0]
    586c:	685b      	ldr	r3, [r3, #4]
    586e:	b2db      	uxtb	r3, r3
    5870:	2b20      	cmp	r3, #32
    5872:	d11f      	bne.n	58b4 <c_assign_tuple+0xcc>
            if (have_star_index == (uint)-1) {
    5874:	69fb      	ldr	r3, [r7, #28]
    5876:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    587a:	d110      	bne.n	589e <c_assign_tuple+0xb6>
                EMIT_ARG(unpack_ex, num_head + i, num_tail - i - 1);
    587c:	68fb      	ldr	r3, [r7, #12]
    587e:	6a98      	ldr	r0, [r3, #40]	; 0x28
    5880:	693a      	ldr	r2, [r7, #16]
    5882:	69bb      	ldr	r3, [r7, #24]
    5884:	18d1      	adds	r1, r2, r3
    5886:	687a      	ldr	r2, [r7, #4]
    5888:	69bb      	ldr	r3, [r7, #24]
    588a:	1ad3      	subs	r3, r2, r3
    588c:	3b01      	subs	r3, #1
    588e:	461a      	mov	r2, r3
    5890:	f005 fa89 	bl	ada6 <mp_emit_bc_unpack_ex>
                have_star_index = num_head + i;
    5894:	693a      	ldr	r2, [r7, #16]
    5896:	69bb      	ldr	r3, [r7, #24]
    5898:	4413      	add	r3, r2
    589a:	61fb      	str	r3, [r7, #28]
    589c:	e00a      	b.n	58b4 <c_assign_tuple+0xcc>
            } else {
                compile_syntax_error(comp, nodes_tail[i], "multiple *x in assignment");
    589e:	69bb      	ldr	r3, [r7, #24]
    58a0:	009b      	lsls	r3, r3, #2
    58a2:	683a      	ldr	r2, [r7, #0]
    58a4:	4413      	add	r3, r2
    58a6:	681b      	ldr	r3, [r3, #0]
    58a8:	4a2a      	ldr	r2, [pc, #168]	; (5954 <c_assign_tuple+0x16c>)
    58aa:	4619      	mov	r1, r3
    58ac:	68f8      	ldr	r0, [r7, #12]
    58ae:	f7ff fc06 	bl	50be <compile_syntax_error>
                return;
    58b2:	e04b      	b.n	594c <c_assign_tuple+0x164>
    for (uint i = 0; i < num_tail; i++) {
    58b4:	69bb      	ldr	r3, [r7, #24]
    58b6:	3301      	adds	r3, #1
    58b8:	61bb      	str	r3, [r7, #24]
    58ba:	69ba      	ldr	r2, [r7, #24]
    58bc:	687b      	ldr	r3, [r7, #4]
    58be:	429a      	cmp	r2, r3
    58c0:	d3bf      	bcc.n	5842 <c_assign_tuple+0x5a>
            }
        }
    }
    if (have_star_index == (uint)-1) {
    58c2:	69fb      	ldr	r3, [r7, #28]
    58c4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    58c8:	d107      	bne.n	58da <c_assign_tuple+0xf2>
        EMIT_ARG(unpack_sequence, num_head + num_tail);
    58ca:	68fb      	ldr	r3, [r7, #12]
    58cc:	6a98      	ldr	r0, [r3, #40]	; 0x28
    58ce:	693a      	ldr	r2, [r7, #16]
    58d0:	687b      	ldr	r3, [r7, #4]
    58d2:	4413      	add	r3, r2
    58d4:	4619      	mov	r1, r3
    58d6:	f005 fa52 	bl	ad7e <mp_emit_bc_unpack_sequence>
    }
    if (num_head != 0) {
    58da:	693b      	ldr	r3, [r7, #16]
    58dc:	2b00      	cmp	r3, #0
    58de:	d00f      	beq.n	5900 <c_assign_tuple+0x118>
        if (0 == have_star_index) {
    58e0:	69fb      	ldr	r3, [r7, #28]
    58e2:	2b00      	cmp	r3, #0
    58e4:	d107      	bne.n	58f6 <c_assign_tuple+0x10e>
            c_assign(comp, ((mp_parse_node_struct_t*)node_head)->nodes[0], ASSIGN_STORE);
    58e6:	68bb      	ldr	r3, [r7, #8]
    58e8:	689b      	ldr	r3, [r3, #8]
    58ea:	2200      	movs	r2, #0
    58ec:	4619      	mov	r1, r3
    58ee:	68f8      	ldr	r0, [r7, #12]
    58f0:	f000 f832 	bl	5958 <c_assign>
    58f4:	e004      	b.n	5900 <c_assign_tuple+0x118>
        } else {
            c_assign(comp, node_head, ASSIGN_STORE);
    58f6:	2200      	movs	r2, #0
    58f8:	68b9      	ldr	r1, [r7, #8]
    58fa:	68f8      	ldr	r0, [r7, #12]
    58fc:	f000 f82c 	bl	5958 <c_assign>
        }
    }
    for (uint i = 0; i < num_tail; i++) {
    5900:	2300      	movs	r3, #0
    5902:	617b      	str	r3, [r7, #20]
    5904:	e01e      	b.n	5944 <c_assign_tuple+0x15c>
        if (num_head + i == have_star_index) {
    5906:	693a      	ldr	r2, [r7, #16]
    5908:	697b      	ldr	r3, [r7, #20]
    590a:	441a      	add	r2, r3
    590c:	69fb      	ldr	r3, [r7, #28]
    590e:	429a      	cmp	r2, r3
    5910:	d10b      	bne.n	592a <c_assign_tuple+0x142>
            c_assign(comp, ((mp_parse_node_struct_t*)nodes_tail[i])->nodes[0], ASSIGN_STORE);
    5912:	697b      	ldr	r3, [r7, #20]
    5914:	009b      	lsls	r3, r3, #2
    5916:	683a      	ldr	r2, [r7, #0]
    5918:	4413      	add	r3, r2
    591a:	681b      	ldr	r3, [r3, #0]
    591c:	689b      	ldr	r3, [r3, #8]
    591e:	2200      	movs	r2, #0
    5920:	4619      	mov	r1, r3
    5922:	68f8      	ldr	r0, [r7, #12]
    5924:	f000 f818 	bl	5958 <c_assign>
    5928:	e009      	b.n	593e <c_assign_tuple+0x156>
        } else {
            c_assign(comp, nodes_tail[i], ASSIGN_STORE);
    592a:	697b      	ldr	r3, [r7, #20]
    592c:	009b      	lsls	r3, r3, #2
    592e:	683a      	ldr	r2, [r7, #0]
    5930:	4413      	add	r3, r2
    5932:	681b      	ldr	r3, [r3, #0]
    5934:	2200      	movs	r2, #0
    5936:	4619      	mov	r1, r3
    5938:	68f8      	ldr	r0, [r7, #12]
    593a:	f000 f80d 	bl	5958 <c_assign>
    for (uint i = 0; i < num_tail; i++) {
    593e:	697b      	ldr	r3, [r7, #20]
    5940:	3301      	adds	r3, #1
    5942:	617b      	str	r3, [r7, #20]
    5944:	697a      	ldr	r2, [r7, #20]
    5946:	687b      	ldr	r3, [r7, #4]
    5948:	429a      	cmp	r2, r3
    594a:	d3dc      	bcc.n	5906 <c_assign_tuple+0x11e>
        }
    }
}
    594c:	3720      	adds	r7, #32
    594e:	46bd      	mov	sp, r7
    5950:	bd80      	pop	{r7, pc}
    5952:	bf00      	nop
    5954:	00021d20 	.word	0x00021d20

00005958 <c_assign>:

// assigns top of stack to pn
STATIC void c_assign(compiler_t *comp, mp_parse_node_t pn, assign_kind_t assign_kind) {
    5958:	b580      	push	{r7, lr}
    595a:	b088      	sub	sp, #32
    595c:	af00      	add	r7, sp, #0
    595e:	60f8      	str	r0, [r7, #12]
    5960:	60b9      	str	r1, [r7, #8]
    5962:	607a      	str	r2, [r7, #4]
    assert(!MP_PARSE_NODE_IS_NULL(pn));
    5964:	68bb      	ldr	r3, [r7, #8]
    5966:	2b00      	cmp	r3, #0
    5968:	d106      	bne.n	5978 <c_assign+0x20>
    596a:	4b7a      	ldr	r3, [pc, #488]	; (5b54 <c_assign+0x1fc>)
    596c:	4a7a      	ldr	r2, [pc, #488]	; (5b58 <c_assign+0x200>)
    596e:	f240 11c5 	movw	r1, #453	; 0x1c5
    5972:	487a      	ldr	r0, [pc, #488]	; (5b5c <c_assign+0x204>)
    5974:	f017 fab4 	bl	1cee0 <__assert_func>
    if (MP_PARSE_NODE_IS_LEAF(pn)) {
    5978:	68bb      	ldr	r3, [r7, #8]
    597a:	f003 0303 	and.w	r3, r3, #3
    597e:	2b00      	cmp	r3, #0
    5980:	d018      	beq.n	59b4 <c_assign+0x5c>
        if (MP_PARSE_NODE_IS_ID(pn)) {
    5982:	68bb      	ldr	r3, [r7, #8]
    5984:	f003 030f 	and.w	r3, r3, #15
    5988:	2b02      	cmp	r3, #2
    598a:	f040 80cf 	bne.w	5b2c <c_assign+0x1d4>
            qstr arg = MP_PARSE_NODE_LEAF_ARG(pn);
    598e:	68bb      	ldr	r3, [r7, #8]
    5990:	091b      	lsrs	r3, r3, #4
    5992:	613b      	str	r3, [r7, #16]
            switch (assign_kind) {
    5994:	687b      	ldr	r3, [r7, #4]
    5996:	2b00      	cmp	r3, #0
    5998:	d001      	beq.n	599e <c_assign+0x46>
    599a:	2b02      	cmp	r3, #2
    599c:	d104      	bne.n	59a8 <c_assign+0x50>
                case ASSIGN_STORE:
                case ASSIGN_AUG_STORE:
                    compile_store_id(comp, arg);
    599e:	6939      	ldr	r1, [r7, #16]
    59a0:	68f8      	ldr	r0, [r7, #12]
    59a2:	f7ff fcb5 	bl	5310 <compile_store_id>
                    break;
    59a6:	e0c0      	b.n	5b2a <c_assign+0x1d2>
                case ASSIGN_AUG_LOAD:
                default:
                    compile_load_id(comp, arg);
    59a8:	6939      	ldr	r1, [r7, #16]
    59aa:	68f8      	ldr	r0, [r7, #12]
    59ac:	f7ff fc91 	bl	52d2 <compile_load_id>
                    break;
    59b0:	bf00      	nop
    59b2:	e0ba      	b.n	5b2a <c_assign+0x1d2>
        } else {
            goto cannot_assign;
        }
    } else {
        // pn must be a struct
        mp_parse_node_struct_t *pns = (mp_parse_node_struct_t*)pn;
    59b4:	68bb      	ldr	r3, [r7, #8]
    59b6:	61fb      	str	r3, [r7, #28]
        switch (MP_PARSE_NODE_STRUCT_KIND(pns)) {
    59b8:	69fb      	ldr	r3, [r7, #28]
    59ba:	685b      	ldr	r3, [r3, #4]
    59bc:	b2db      	uxtb	r3, r3
    59be:	2b2a      	cmp	r3, #42	; 0x2a
    59c0:	d01f      	beq.n	5a02 <c_assign+0xaa>
    59c2:	2b2a      	cmp	r3, #42	; 0x2a
    59c4:	d804      	bhi.n	59d0 <c_assign+0x78>
    59c6:	2b06      	cmp	r3, #6
    59c8:	d00d      	beq.n	59e6 <c_assign+0x8e>
    59ca:	2b29      	cmp	r3, #41	; 0x29
    59cc:	d005      	beq.n	59da <c_assign+0x82>
                    c_assign_tuple(comp, pns->nodes[0], 0, NULL);
                }
                break;

            default:
                goto cannot_assign;
    59ce:	e0b8      	b.n	5b42 <c_assign+0x1ea>
        switch (MP_PARSE_NODE_STRUCT_KIND(pns)) {
    59d0:	2b2b      	cmp	r3, #43	; 0x2b
    59d2:	d039      	beq.n	5a48 <c_assign+0xf0>
    59d4:	2b90      	cmp	r3, #144	; 0x90
    59d6:	d006      	beq.n	59e6 <c_assign+0x8e>
                goto cannot_assign;
    59d8:	e0b3      	b.n	5b42 <c_assign+0x1ea>
                c_assign_atom_expr(comp, pns, assign_kind);
    59da:	687a      	ldr	r2, [r7, #4]
    59dc:	69f9      	ldr	r1, [r7, #28]
    59de:	68f8      	ldr	r0, [r7, #12]
    59e0:	f7ff fe2a 	bl	5638 <c_assign_atom_expr>
                break;
    59e4:	e05a      	b.n	5a9c <c_assign+0x144>
                if (assign_kind != ASSIGN_STORE) {
    59e6:	687b      	ldr	r3, [r7, #4]
    59e8:	2b00      	cmp	r3, #0
    59ea:	f040 80a1 	bne.w	5b30 <c_assign+0x1d8>
                c_assign_tuple(comp, MP_PARSE_NODE_NULL, MP_PARSE_NODE_STRUCT_NUM_NODES(pns), pns->nodes);
    59ee:	69fb      	ldr	r3, [r7, #28]
    59f0:	685b      	ldr	r3, [r3, #4]
    59f2:	0a1a      	lsrs	r2, r3, #8
    59f4:	69fb      	ldr	r3, [r7, #28]
    59f6:	3308      	adds	r3, #8
    59f8:	2100      	movs	r1, #0
    59fa:	68f8      	ldr	r0, [r7, #12]
    59fc:	f7ff fef4 	bl	57e8 <c_assign_tuple>
                break;
    5a00:	e04c      	b.n	5a9c <c_assign+0x144>
                if (MP_PARSE_NODE_IS_NULL(pns->nodes[0])) {
    5a02:	69fb      	ldr	r3, [r7, #28]
    5a04:	689b      	ldr	r3, [r3, #8]
    5a06:	2b00      	cmp	r3, #0
    5a08:	f000 8094 	beq.w	5b34 <c_assign+0x1dc>
                    assert(MP_PARSE_NODE_IS_STRUCT_KIND(pns->nodes[0], PN_testlist_comp));
    5a0c:	69fb      	ldr	r3, [r7, #28]
    5a0e:	689b      	ldr	r3, [r3, #8]
    5a10:	2b00      	cmp	r3, #0
    5a12:	d00b      	beq.n	5a2c <c_assign+0xd4>
    5a14:	69fb      	ldr	r3, [r7, #28]
    5a16:	689b      	ldr	r3, [r3, #8]
    5a18:	f003 0303 	and.w	r3, r3, #3
    5a1c:	2b00      	cmp	r3, #0
    5a1e:	d105      	bne.n	5a2c <c_assign+0xd4>
    5a20:	69fb      	ldr	r3, [r7, #28]
    5a22:	689b      	ldr	r3, [r3, #8]
    5a24:	685b      	ldr	r3, [r3, #4]
    5a26:	b2db      	uxtb	r3, r3
    5a28:	2b8a      	cmp	r3, #138	; 0x8a
    5a2a:	d006      	beq.n	5a3a <c_assign+0xe2>
    5a2c:	4b4c      	ldr	r3, [pc, #304]	; (5b60 <c_assign+0x208>)
    5a2e:	4a4a      	ldr	r2, [pc, #296]	; (5b58 <c_assign+0x200>)
    5a30:	f44f 71f7 	mov.w	r1, #494	; 0x1ee
    5a34:	4849      	ldr	r0, [pc, #292]	; (5b5c <c_assign+0x204>)
    5a36:	f017 fa53 	bl	1cee0 <__assert_func>
                    if (assign_kind != ASSIGN_STORE) {
    5a3a:	687b      	ldr	r3, [r7, #4]
    5a3c:	2b00      	cmp	r3, #0
    5a3e:	d17b      	bne.n	5b38 <c_assign+0x1e0>
                    pns = (mp_parse_node_struct_t*)pns->nodes[0];
    5a40:	69fb      	ldr	r3, [r7, #28]
    5a42:	689b      	ldr	r3, [r3, #8]
    5a44:	61fb      	str	r3, [r7, #28]
                    goto testlist_comp;
    5a46:	e02a      	b.n	5a9e <c_assign+0x146>
                if (assign_kind != ASSIGN_STORE) {
    5a48:	687b      	ldr	r3, [r7, #4]
    5a4a:	2b00      	cmp	r3, #0
    5a4c:	d176      	bne.n	5b3c <c_assign+0x1e4>
                if (MP_PARSE_NODE_IS_NULL(pns->nodes[0])) {
    5a4e:	69fb      	ldr	r3, [r7, #28]
    5a50:	689b      	ldr	r3, [r3, #8]
    5a52:	2b00      	cmp	r3, #0
    5a54:	d106      	bne.n	5a64 <c_assign+0x10c>
                    c_assign_tuple(comp, MP_PARSE_NODE_NULL, 0, NULL);
    5a56:	2300      	movs	r3, #0
    5a58:	2200      	movs	r2, #0
    5a5a:	2100      	movs	r1, #0
    5a5c:	68f8      	ldr	r0, [r7, #12]
    5a5e:	f7ff fec3 	bl	57e8 <c_assign_tuple>
                break;
    5a62:	e01a      	b.n	5a9a <c_assign+0x142>
                } else if (MP_PARSE_NODE_IS_STRUCT_KIND(pns->nodes[0], PN_testlist_comp)) {
    5a64:	69fb      	ldr	r3, [r7, #28]
    5a66:	689b      	ldr	r3, [r3, #8]
    5a68:	2b00      	cmp	r3, #0
    5a6a:	d00f      	beq.n	5a8c <c_assign+0x134>
    5a6c:	69fb      	ldr	r3, [r7, #28]
    5a6e:	689b      	ldr	r3, [r3, #8]
    5a70:	f003 0303 	and.w	r3, r3, #3
    5a74:	2b00      	cmp	r3, #0
    5a76:	d109      	bne.n	5a8c <c_assign+0x134>
    5a78:	69fb      	ldr	r3, [r7, #28]
    5a7a:	689b      	ldr	r3, [r3, #8]
    5a7c:	685b      	ldr	r3, [r3, #4]
    5a7e:	b2db      	uxtb	r3, r3
    5a80:	2b8a      	cmp	r3, #138	; 0x8a
    5a82:	d103      	bne.n	5a8c <c_assign+0x134>
                    pns = (mp_parse_node_struct_t*)pns->nodes[0];
    5a84:	69fb      	ldr	r3, [r7, #28]
    5a86:	689b      	ldr	r3, [r3, #8]
    5a88:	61fb      	str	r3, [r7, #28]
                    goto testlist_comp;
    5a8a:	e008      	b.n	5a9e <c_assign+0x146>
                    c_assign_tuple(comp, pns->nodes[0], 0, NULL);
    5a8c:	69fb      	ldr	r3, [r7, #28]
    5a8e:	6899      	ldr	r1, [r3, #8]
    5a90:	2300      	movs	r3, #0
    5a92:	2200      	movs	r2, #0
    5a94:	68f8      	ldr	r0, [r7, #12]
    5a96:	f7ff fea7 	bl	57e8 <c_assign_tuple>
                break;
    5a9a:	bf00      	nop
        }
        return;
    5a9c:	e056      	b.n	5b4c <c_assign+0x1f4>

        testlist_comp:
        // lhs is a sequence
        if (MP_PARSE_NODE_IS_STRUCT(pns->nodes[1])) {
    5a9e:	69fb      	ldr	r3, [r7, #28]
    5aa0:	68db      	ldr	r3, [r3, #12]
    5aa2:	2b00      	cmp	r3, #0
    5aa4:	d038      	beq.n	5b18 <c_assign+0x1c0>
    5aa6:	69fb      	ldr	r3, [r7, #28]
    5aa8:	68db      	ldr	r3, [r3, #12]
    5aaa:	f003 0303 	and.w	r3, r3, #3
    5aae:	2b00      	cmp	r3, #0
    5ab0:	d132      	bne.n	5b18 <c_assign+0x1c0>
            mp_parse_node_struct_t *pns2 = (mp_parse_node_struct_t*)pns->nodes[1];
    5ab2:	69fb      	ldr	r3, [r7, #28]
    5ab4:	68db      	ldr	r3, [r3, #12]
    5ab6:	61bb      	str	r3, [r7, #24]
            if (MP_PARSE_NODE_STRUCT_KIND(pns2) == PN_testlist_comp_3b) {
    5ab8:	69bb      	ldr	r3, [r7, #24]
    5aba:	685b      	ldr	r3, [r3, #4]
    5abc:	b2db      	uxtb	r3, r3
    5abe:	2b8d      	cmp	r3, #141	; 0x8d
    5ac0:	d112      	bne.n	5ae8 <c_assign+0x190>
                // sequence of one item, with trailing comma
                assert(MP_PARSE_NODE_IS_NULL(pns2->nodes[0]));
    5ac2:	69bb      	ldr	r3, [r7, #24]
    5ac4:	689b      	ldr	r3, [r3, #8]
    5ac6:	2b00      	cmp	r3, #0
    5ac8:	d006      	beq.n	5ad8 <c_assign+0x180>
    5aca:	4b26      	ldr	r3, [pc, #152]	; (5b64 <c_assign+0x20c>)
    5acc:	4a22      	ldr	r2, [pc, #136]	; (5b58 <c_assign+0x200>)
    5ace:	f240 2113 	movw	r1, #531	; 0x213
    5ad2:	4822      	ldr	r0, [pc, #136]	; (5b5c <c_assign+0x204>)
    5ad4:	f017 fa04 	bl	1cee0 <__assert_func>
                c_assign_tuple(comp, pns->nodes[0], 0, NULL);
    5ad8:	69fb      	ldr	r3, [r7, #28]
    5ada:	6899      	ldr	r1, [r3, #8]
    5adc:	2300      	movs	r3, #0
    5ade:	2200      	movs	r2, #0
    5ae0:	68f8      	ldr	r0, [r7, #12]
    5ae2:	f7ff fe81 	bl	57e8 <c_assign_tuple>
        if (MP_PARSE_NODE_IS_STRUCT(pns->nodes[1])) {
    5ae6:	e01f      	b.n	5b28 <c_assign+0x1d0>
            } else if (MP_PARSE_NODE_STRUCT_KIND(pns2) == PN_testlist_comp_3c) {
    5ae8:	69bb      	ldr	r3, [r7, #24]
    5aea:	685b      	ldr	r3, [r3, #4]
    5aec:	b2db      	uxtb	r3, r3
    5aee:	2b8e      	cmp	r3, #142	; 0x8e
    5af0:	d10c      	bne.n	5b0c <c_assign+0x1b4>
                // sequence of many items
                uint n = MP_PARSE_NODE_STRUCT_NUM_NODES(pns2);
    5af2:	69bb      	ldr	r3, [r7, #24]
    5af4:	685b      	ldr	r3, [r3, #4]
    5af6:	0a1b      	lsrs	r3, r3, #8
    5af8:	617b      	str	r3, [r7, #20]
                c_assign_tuple(comp, pns->nodes[0], n, pns2->nodes);
    5afa:	69fb      	ldr	r3, [r7, #28]
    5afc:	6899      	ldr	r1, [r3, #8]
    5afe:	69bb      	ldr	r3, [r7, #24]
    5b00:	3308      	adds	r3, #8
    5b02:	697a      	ldr	r2, [r7, #20]
    5b04:	68f8      	ldr	r0, [r7, #12]
    5b06:	f7ff fe6f 	bl	57e8 <c_assign_tuple>
        if (MP_PARSE_NODE_IS_STRUCT(pns->nodes[1])) {
    5b0a:	e00d      	b.n	5b28 <c_assign+0x1d0>
            } else if (MP_PARSE_NODE_STRUCT_KIND(pns2) == PN_comp_for) {
    5b0c:	69bb      	ldr	r3, [r7, #24]
    5b0e:	685b      	ldr	r3, [r3, #4]
    5b10:	b2db      	uxtb	r3, r3
    5b12:	2b9f      	cmp	r3, #159	; 0x9f
    5b14:	d014      	beq.n	5b40 <c_assign+0x1e8>
                goto cannot_assign;
            } else {
                // sequence with 2 items
                goto sequence_with_2_items;
    5b16:	bf00      	nop
            }
        } else {
            // sequence with 2 items
            sequence_with_2_items:
            c_assign_tuple(comp, MP_PARSE_NODE_NULL, 2, pns->nodes);
    5b18:	69fb      	ldr	r3, [r7, #28]
    5b1a:	3308      	adds	r3, #8
    5b1c:	2202      	movs	r2, #2
    5b1e:	2100      	movs	r1, #0
    5b20:	68f8      	ldr	r0, [r7, #12]
    5b22:	f7ff fe61 	bl	57e8 <c_assign_tuple>
        }
        return;
    5b26:	e011      	b.n	5b4c <c_assign+0x1f4>
    5b28:	e010      	b.n	5b4c <c_assign+0x1f4>
    }
    return;
    5b2a:	e00f      	b.n	5b4c <c_assign+0x1f4>
            goto cannot_assign;
    5b2c:	bf00      	nop
    5b2e:	e008      	b.n	5b42 <c_assign+0x1ea>
                    goto cannot_assign;
    5b30:	bf00      	nop
    5b32:	e006      	b.n	5b42 <c_assign+0x1ea>
                    goto cannot_assign;
    5b34:	bf00      	nop
    5b36:	e004      	b.n	5b42 <c_assign+0x1ea>
                        goto cannot_assign;
    5b38:	bf00      	nop
    5b3a:	e002      	b.n	5b42 <c_assign+0x1ea>
                    goto cannot_assign;
    5b3c:	bf00      	nop
    5b3e:	e000      	b.n	5b42 <c_assign+0x1ea>
                goto cannot_assign;
    5b40:	bf00      	nop

    cannot_assign:
    compile_syntax_error(comp, pn, "can't assign to expression");
    5b42:	4a09      	ldr	r2, [pc, #36]	; (5b68 <c_assign+0x210>)
    5b44:	68b9      	ldr	r1, [r7, #8]
    5b46:	68f8      	ldr	r0, [r7, #12]
    5b48:	f7ff fab9 	bl	50be <compile_syntax_error>
}
    5b4c:	3720      	adds	r7, #32
    5b4e:	46bd      	mov	sp, r7
    5b50:	bd80      	pop	{r7, pc}
    5b52:	bf00      	nop
    5b54:	00021d3c 	.word	0x00021d3c
    5b58:	0002280c 	.word	0x0002280c
    5b5c:	00021c60 	.word	0x00021c60
    5b60:	00021c74 	.word	0x00021c74
    5b64:	00021d58 	.word	0x00021d58
    5b68:	00021d04 	.word	0x00021d04

00005b6c <close_over_variables_etc>:

// stuff for lambda and comprehensions and generators:
//  if n_pos_defaults > 0 then there is a tuple on the stack with the positional defaults
//  if n_kw_defaults > 0 then there is a dictionary on the stack with the keyword defaults
//  if both exist, the tuple is above the dictionary (ie the first pop gets the tuple)
STATIC void close_over_variables_etc(compiler_t *comp, scope_t *this_scope, int n_pos_defaults, int n_kw_defaults) {
    5b6c:	b580      	push	{r7, lr}
    5b6e:	b08c      	sub	sp, #48	; 0x30
    5b70:	af02      	add	r7, sp, #8
    5b72:	60f8      	str	r0, [r7, #12]
    5b74:	60b9      	str	r1, [r7, #8]
    5b76:	607a      	str	r2, [r7, #4]
    5b78:	603b      	str	r3, [r7, #0]
    assert(n_pos_defaults >= 0);
    5b7a:	687b      	ldr	r3, [r7, #4]
    5b7c:	2b00      	cmp	r3, #0
    5b7e:	da06      	bge.n	5b8e <close_over_variables_etc+0x22>
    5b80:	4b41      	ldr	r3, [pc, #260]	; (5c88 <close_over_variables_etc+0x11c>)
    5b82:	4a42      	ldr	r2, [pc, #264]	; (5c8c <close_over_variables_etc+0x120>)
    5b84:	f240 2131 	movw	r1, #561	; 0x231
    5b88:	4841      	ldr	r0, [pc, #260]	; (5c90 <close_over_variables_etc+0x124>)
    5b8a:	f017 f9a9 	bl	1cee0 <__assert_func>
    assert(n_kw_defaults >= 0);
    5b8e:	683b      	ldr	r3, [r7, #0]
    5b90:	2b00      	cmp	r3, #0
    5b92:	da06      	bge.n	5ba2 <close_over_variables_etc+0x36>
    5b94:	4b3f      	ldr	r3, [pc, #252]	; (5c94 <close_over_variables_etc+0x128>)
    5b96:	4a3d      	ldr	r2, [pc, #244]	; (5c8c <close_over_variables_etc+0x120>)
    5b98:	f240 2132 	movw	r1, #562	; 0x232
    5b9c:	483c      	ldr	r0, [pc, #240]	; (5c90 <close_over_variables_etc+0x124>)
    5b9e:	f017 f99f 	bl	1cee0 <__assert_func>

    // set flags
    if (n_kw_defaults > 0) {
    5ba2:	683b      	ldr	r3, [r7, #0]
    5ba4:	2b00      	cmp	r3, #0
    5ba6:	dd06      	ble.n	5bb6 <close_over_variables_etc+0x4a>
        this_scope->scope_flags |= MP_SCOPE_FLAG_DEFKWARGS;
    5ba8:	68bb      	ldr	r3, [r7, #8]
    5baa:	8b1b      	ldrh	r3, [r3, #24]
    5bac:	f043 0308 	orr.w	r3, r3, #8
    5bb0:	b29a      	uxth	r2, r3
    5bb2:	68bb      	ldr	r3, [r7, #8]
    5bb4:	831a      	strh	r2, [r3, #24]
    }
    this_scope->num_def_pos_args = n_pos_defaults;
    5bb6:	687b      	ldr	r3, [r7, #4]
    5bb8:	b29a      	uxth	r2, r3
    5bba:	68bb      	ldr	r3, [r7, #8]
    5bbc:	841a      	strh	r2, [r3, #32]
    comp->scope_cur->scope_flags |= MP_SCOPE_FLAG_REFGLOBALS | MP_SCOPE_FLAG_HASCONSTS;
    #endif

    // make closed over variables, if any
    // ensure they are closed over in the order defined in the outer scope (mainly to agree with CPython)
    int nfree = 0;
    5bbe:	2300      	movs	r3, #0
    5bc0:	627b      	str	r3, [r7, #36]	; 0x24
    if (comp->scope_cur->kind != SCOPE_MODULE) {
    5bc2:	68fb      	ldr	r3, [r7, #12]
    5bc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    5bc6:	681b      	ldr	r3, [r3, #0]
    5bc8:	2b00      	cmp	r3, #0
    5bca:	d044      	beq.n	5c56 <close_over_variables_etc+0xea>
        for (int i = 0; i < comp->scope_cur->id_info_len; i++) {
    5bcc:	2300      	movs	r3, #0
    5bce:	623b      	str	r3, [r7, #32]
    5bd0:	e03a      	b.n	5c48 <close_over_variables_etc+0xdc>
            id_info_t *id = &comp->scope_cur->id_info[i];
    5bd2:	68fb      	ldr	r3, [r7, #12]
    5bd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    5bd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5bd8:	6a3b      	ldr	r3, [r7, #32]
    5bda:	00db      	lsls	r3, r3, #3
    5bdc:	4413      	add	r3, r2
    5bde:	61bb      	str	r3, [r7, #24]
            if (id->kind == ID_INFO_KIND_CELL || id->kind == ID_INFO_KIND_FREE) {
    5be0:	69bb      	ldr	r3, [r7, #24]
    5be2:	781b      	ldrb	r3, [r3, #0]
    5be4:	2b04      	cmp	r3, #4
    5be6:	d003      	beq.n	5bf0 <close_over_variables_etc+0x84>
    5be8:	69bb      	ldr	r3, [r7, #24]
    5bea:	781b      	ldrb	r3, [r3, #0]
    5bec:	2b05      	cmp	r3, #5
    5bee:	d128      	bne.n	5c42 <close_over_variables_etc+0xd6>
                for (int j = 0; j < this_scope->id_info_len; j++) {
    5bf0:	2300      	movs	r3, #0
    5bf2:	61fb      	str	r3, [r7, #28]
    5bf4:	e01f      	b.n	5c36 <close_over_variables_etc+0xca>
                    id_info_t *id2 = &this_scope->id_info[j];
    5bf6:	68bb      	ldr	r3, [r7, #8]
    5bf8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5bfa:	69fb      	ldr	r3, [r7, #28]
    5bfc:	00db      	lsls	r3, r3, #3
    5bfe:	4413      	add	r3, r2
    5c00:	617b      	str	r3, [r7, #20]
                    if (id2->kind == ID_INFO_KIND_FREE && id->qst == id2->qst) {
    5c02:	697b      	ldr	r3, [r7, #20]
    5c04:	781b      	ldrb	r3, [r3, #0]
    5c06:	2b05      	cmp	r3, #5
    5c08:	d112      	bne.n	5c30 <close_over_variables_etc+0xc4>
    5c0a:	69bb      	ldr	r3, [r7, #24]
    5c0c:	685a      	ldr	r2, [r3, #4]
    5c0e:	697b      	ldr	r3, [r7, #20]
    5c10:	685b      	ldr	r3, [r3, #4]
    5c12:	429a      	cmp	r2, r3
    5c14:	d10c      	bne.n	5c30 <close_over_variables_etc+0xc4>
                        // in MicroPython we load closures using LOAD_FAST
                        EMIT_LOAD_FAST(id->qst, id->local_num);
    5c16:	68fb      	ldr	r3, [r7, #12]
    5c18:	6a98      	ldr	r0, [r3, #40]	; 0x28
    5c1a:	69bb      	ldr	r3, [r7, #24]
    5c1c:	6859      	ldr	r1, [r3, #4]
    5c1e:	69bb      	ldr	r3, [r7, #24]
    5c20:	885b      	ldrh	r3, [r3, #2]
    5c22:	461a      	mov	r2, r3
    5c24:	2300      	movs	r3, #0
    5c26:	f004 fd4b 	bl	a6c0 <mp_emit_bc_load_local>
                        nfree += 1;
    5c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5c2c:	3301      	adds	r3, #1
    5c2e:	627b      	str	r3, [r7, #36]	; 0x24
                for (int j = 0; j < this_scope->id_info_len; j++) {
    5c30:	69fb      	ldr	r3, [r7, #28]
    5c32:	3301      	adds	r3, #1
    5c34:	61fb      	str	r3, [r7, #28]
    5c36:	68bb      	ldr	r3, [r7, #8]
    5c38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
    5c3a:	461a      	mov	r2, r3
    5c3c:	69fb      	ldr	r3, [r7, #28]
    5c3e:	429a      	cmp	r2, r3
    5c40:	dcd9      	bgt.n	5bf6 <close_over_variables_etc+0x8a>
        for (int i = 0; i < comp->scope_cur->id_info_len; i++) {
    5c42:	6a3b      	ldr	r3, [r7, #32]
    5c44:	3301      	adds	r3, #1
    5c46:	623b      	str	r3, [r7, #32]
    5c48:	68fb      	ldr	r3, [r7, #12]
    5c4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    5c4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
    5c4e:	461a      	mov	r2, r3
    5c50:	6a3b      	ldr	r3, [r7, #32]
    5c52:	429a      	cmp	r2, r3
    5c54:	dcbd      	bgt.n	5bd2 <close_over_variables_etc+0x66>
            }
        }
    }

    // make the function/closure
    if (nfree == 0) {
    5c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5c58:	2b00      	cmp	r3, #0
    5c5a:	d107      	bne.n	5c6c <close_over_variables_etc+0x100>
        EMIT_ARG(make_function, this_scope, n_pos_defaults, n_kw_defaults);
    5c5c:	68fb      	ldr	r3, [r7, #12]
    5c5e:	6a98      	ldr	r0, [r3, #40]	; 0x28
    5c60:	687a      	ldr	r2, [r7, #4]
    5c62:	683b      	ldr	r3, [r7, #0]
    5c64:	68b9      	ldr	r1, [r7, #8]
    5c66:	f005 f8b8 	bl	adda <mp_emit_bc_make_function>
    } else {
        EMIT_ARG(make_closure, this_scope, nfree, n_pos_defaults, n_kw_defaults);
    }
}
    5c6a:	e009      	b.n	5c80 <close_over_variables_etc+0x114>
        EMIT_ARG(make_closure, this_scope, nfree, n_pos_defaults, n_kw_defaults);
    5c6c:	68fb      	ldr	r3, [r7, #12]
    5c6e:	6a98      	ldr	r0, [r3, #40]	; 0x28
    5c70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    5c72:	6879      	ldr	r1, [r7, #4]
    5c74:	683b      	ldr	r3, [r7, #0]
    5c76:	9300      	str	r3, [sp, #0]
    5c78:	460b      	mov	r3, r1
    5c7a:	68b9      	ldr	r1, [r7, #8]
    5c7c:	f005 f8d6 	bl	ae2c <mp_emit_bc_make_closure>
}
    5c80:	bf00      	nop
    5c82:	3728      	adds	r7, #40	; 0x28
    5c84:	46bd      	mov	sp, r7
    5c86:	bd80      	pop	{r7, pc}
    5c88:	00021d80 	.word	0x00021d80
    5c8c:	00022818 	.word	0x00022818
    5c90:	00021c60 	.word	0x00021c60
    5c94:	00021d94 	.word	0x00021d94

00005c98 <compile_funcdef_lambdef_param>:

STATIC void compile_funcdef_lambdef_param(compiler_t *comp, mp_parse_node_t pn) {
    5c98:	b580      	push	{r7, lr}
    5c9a:	b088      	sub	sp, #32
    5c9c:	af00      	add	r7, sp, #0
    5c9e:	6078      	str	r0, [r7, #4]
    5ca0:	6039      	str	r1, [r7, #0]
    // For efficiency of the code below we extract the parse-node kind here
    int pn_kind;
    if (MP_PARSE_NODE_IS_ID(pn)) {
    5ca2:	683b      	ldr	r3, [r7, #0]
    5ca4:	f003 030f 	and.w	r3, r3, #15
    5ca8:	2b02      	cmp	r3, #2
    5caa:	d103      	bne.n	5cb4 <compile_funcdef_lambdef_param+0x1c>
        pn_kind = -1;
    5cac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    5cb0:	61fb      	str	r3, [r7, #28]
    5cb2:	e012      	b.n	5cda <compile_funcdef_lambdef_param+0x42>
    } else {
        assert(MP_PARSE_NODE_IS_STRUCT(pn));
    5cb4:	683b      	ldr	r3, [r7, #0]
    5cb6:	2b00      	cmp	r3, #0
    5cb8:	d004      	beq.n	5cc4 <compile_funcdef_lambdef_param+0x2c>
    5cba:	683b      	ldr	r3, [r7, #0]
    5cbc:	f003 0303 	and.w	r3, r3, #3
    5cc0:	2b00      	cmp	r3, #0
    5cc2:	d006      	beq.n	5cd2 <compile_funcdef_lambdef_param+0x3a>
    5cc4:	4b4c      	ldr	r3, [pc, #304]	; (5df8 <compile_funcdef_lambdef_param+0x160>)
    5cc6:	4a4d      	ldr	r2, [pc, #308]	; (5dfc <compile_funcdef_lambdef_param+0x164>)
    5cc8:	f44f 7118 	mov.w	r1, #608	; 0x260
    5ccc:	484c      	ldr	r0, [pc, #304]	; (5e00 <compile_funcdef_lambdef_param+0x168>)
    5cce:	f017 f907 	bl	1cee0 <__assert_func>
        pn_kind = MP_PARSE_NODE_STRUCT_KIND((mp_parse_node_struct_t*)pn);
    5cd2:	683b      	ldr	r3, [r7, #0]
    5cd4:	685b      	ldr	r3, [r3, #4]
    5cd6:	b2db      	uxtb	r3, r3
    5cd8:	61fb      	str	r3, [r7, #28]
    }

    if (pn_kind == PN_typedargslist_star || pn_kind == PN_varargslist_star) {
    5cda:	69fb      	ldr	r3, [r7, #28]
    5cdc:	2b41      	cmp	r3, #65	; 0x41
    5cde:	d002      	beq.n	5ce6 <compile_funcdef_lambdef_param+0x4e>
    5ce0:	69fb      	ldr	r3, [r7, #28]
    5ce2:	2b49      	cmp	r3, #73	; 0x49
    5ce4:	d103      	bne.n	5cee <compile_funcdef_lambdef_param+0x56>
        comp->have_star = true;
    5ce6:	687b      	ldr	r3, [r7, #4]
    5ce8:	2201      	movs	r2, #1
    5cea:	719a      	strb	r2, [r3, #6]
    5cec:	e080      	b.n	5df0 <compile_funcdef_lambdef_param+0x158>
        } else {
            // named star
        }
        */

    } else if (pn_kind == PN_typedargslist_dbl_star || pn_kind == PN_varargslist_dbl_star) {
    5cee:	69fb      	ldr	r3, [r7, #28]
    5cf0:	2b42      	cmp	r3, #66	; 0x42
    5cf2:	d07d      	beq.n	5df0 <compile_funcdef_lambdef_param+0x158>
    5cf4:	69fb      	ldr	r3, [r7, #28]
    5cf6:	2b4a      	cmp	r3, #74	; 0x4a
    5cf8:	d07a      	beq.n	5df0 <compile_funcdef_lambdef_param+0x158>
        // TODO do we need to do anything with this?

    } else {
        mp_parse_node_t pn_id;
        mp_parse_node_t pn_equal;
        if (pn_kind == -1) {
    5cfa:	69fb      	ldr	r3, [r7, #28]
    5cfc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    5d00:	d104      	bne.n	5d0c <compile_funcdef_lambdef_param+0x74>
            // this parameter is just an id

            pn_id = pn;
    5d02:	683b      	ldr	r3, [r7, #0]
    5d04:	61bb      	str	r3, [r7, #24]
            pn_equal = MP_PARSE_NODE_NULL;
    5d06:	2300      	movs	r3, #0
    5d08:	617b      	str	r3, [r7, #20]
    5d0a:	e01d      	b.n	5d48 <compile_funcdef_lambdef_param+0xb0>

        } else if (pn_kind == PN_typedargslist_name) {
    5d0c:	69fb      	ldr	r3, [r7, #28]
    5d0e:	2b40      	cmp	r3, #64	; 0x40
    5d10:	d108      	bne.n	5d24 <compile_funcdef_lambdef_param+0x8c>
            // this parameter has a colon and/or equal specifier

            mp_parse_node_struct_t *pns = (mp_parse_node_struct_t*)pn;
    5d12:	683b      	ldr	r3, [r7, #0]
    5d14:	613b      	str	r3, [r7, #16]
            pn_id = pns->nodes[0];
    5d16:	693b      	ldr	r3, [r7, #16]
    5d18:	689b      	ldr	r3, [r3, #8]
    5d1a:	61bb      	str	r3, [r7, #24]
            //pn_colon = pns->nodes[1]; // unused
            pn_equal = pns->nodes[2];
    5d1c:	693b      	ldr	r3, [r7, #16]
    5d1e:	691b      	ldr	r3, [r3, #16]
    5d20:	617b      	str	r3, [r7, #20]
    5d22:	e011      	b.n	5d48 <compile_funcdef_lambdef_param+0xb0>

        } else {
            assert(pn_kind == PN_varargslist_name); // should be
    5d24:	69fb      	ldr	r3, [r7, #28]
    5d26:	2b48      	cmp	r3, #72	; 0x48
    5d28:	d006      	beq.n	5d38 <compile_funcdef_lambdef_param+0xa0>
    5d2a:	4b36      	ldr	r3, [pc, #216]	; (5e04 <compile_funcdef_lambdef_param+0x16c>)
    5d2c:	4a33      	ldr	r2, [pc, #204]	; (5dfc <compile_funcdef_lambdef_param+0x164>)
    5d2e:	f240 2185 	movw	r1, #645	; 0x285
    5d32:	4833      	ldr	r0, [pc, #204]	; (5e00 <compile_funcdef_lambdef_param+0x168>)
    5d34:	f017 f8d4 	bl	1cee0 <__assert_func>
            // this parameter has an equal specifier

            mp_parse_node_struct_t *pns = (mp_parse_node_struct_t*)pn;
    5d38:	683b      	ldr	r3, [r7, #0]
    5d3a:	60fb      	str	r3, [r7, #12]
            pn_id = pns->nodes[0];
    5d3c:	68fb      	ldr	r3, [r7, #12]
    5d3e:	689b      	ldr	r3, [r3, #8]
    5d40:	61bb      	str	r3, [r7, #24]
            pn_equal = pns->nodes[1];
    5d42:	68fb      	ldr	r3, [r7, #12]
    5d44:	68db      	ldr	r3, [r3, #12]
    5d46:	617b      	str	r3, [r7, #20]
        }

        if (MP_PARSE_NODE_IS_NULL(pn_equal)) {
    5d48:	697b      	ldr	r3, [r7, #20]
    5d4a:	2b00      	cmp	r3, #0
    5d4c:	d10d      	bne.n	5d6a <compile_funcdef_lambdef_param+0xd2>
            // this parameter does not have a default value

            // check for non-default parameters given after default parameters (allowed by parser, but not syntactically valid)
            if (!comp->have_star && comp->num_default_params != 0) {
    5d4e:	687b      	ldr	r3, [r7, #4]
    5d50:	799b      	ldrb	r3, [r3, #6]
    5d52:	2b00      	cmp	r3, #0
    5d54:	d14c      	bne.n	5df0 <compile_funcdef_lambdef_param+0x158>
    5d56:	687b      	ldr	r3, [r7, #4]
    5d58:	8adb      	ldrh	r3, [r3, #22]
    5d5a:	2b00      	cmp	r3, #0
    5d5c:	d048      	beq.n	5df0 <compile_funcdef_lambdef_param+0x158>
                compile_syntax_error(comp, pn, "non-default argument follows default argument");
    5d5e:	4a2a      	ldr	r2, [pc, #168]	; (5e08 <compile_funcdef_lambdef_param+0x170>)
    5d60:	6839      	ldr	r1, [r7, #0]
    5d62:	6878      	ldr	r0, [r7, #4]
    5d64:	f7ff f9ab 	bl	50be <compile_syntax_error>
                return;
    5d68:	e042      	b.n	5df0 <compile_funcdef_lambdef_param+0x158>

        } else {
            // this parameter has a default value
            // in CPython, None (and True, False?) as default parameters are loaded with LOAD_NAME; don't understandy why

            if (comp->have_star) {
    5d6a:	687b      	ldr	r3, [r7, #4]
    5d6c:	799b      	ldrb	r3, [r3, #6]
    5d6e:	2b00      	cmp	r3, #0
    5d70:	d034      	beq.n	5ddc <compile_funcdef_lambdef_param+0x144>
                comp->num_dict_params += 1;
    5d72:	687b      	ldr	r3, [r7, #4]
    5d74:	8a9b      	ldrh	r3, [r3, #20]
    5d76:	3301      	adds	r3, #1
    5d78:	b29a      	uxth	r2, r3
    5d7a:	687b      	ldr	r3, [r7, #4]
    5d7c:	829a      	strh	r2, [r3, #20]
                // in MicroPython we put the default dict parameters into a dictionary using the bytecode
                if (comp->num_dict_params == 1) {
    5d7e:	687b      	ldr	r3, [r7, #4]
    5d80:	8a9b      	ldrh	r3, [r3, #20]
    5d82:	2b01      	cmp	r3, #1
    5d84:	d118      	bne.n	5db8 <compile_funcdef_lambdef_param+0x120>
                    // in MicroPython we put the default positional parameters into a tuple using the bytecode
                    // we need to do this here before we start building the map for the default keywords
                    if (comp->num_default_params > 0) {
    5d86:	687b      	ldr	r3, [r7, #4]
    5d88:	8adb      	ldrh	r3, [r3, #22]
    5d8a:	2b00      	cmp	r3, #0
    5d8c:	d008      	beq.n	5da0 <compile_funcdef_lambdef_param+0x108>
                        EMIT_ARG(build, comp->num_default_params, MP_EMIT_BUILD_TUPLE);
    5d8e:	687b      	ldr	r3, [r7, #4]
    5d90:	6a98      	ldr	r0, [r3, #40]	; 0x28
    5d92:	687b      	ldr	r3, [r7, #4]
    5d94:	8adb      	ldrh	r3, [r3, #22]
    5d96:	2200      	movs	r2, #0
    5d98:	4619      	mov	r1, r3
    5d9a:	f004 ff96 	bl	acca <mp_emit_bc_build>
    5d9e:	e004      	b.n	5daa <compile_funcdef_lambdef_param+0x112>
                    } else {
                        EMIT(load_null); // sentinel indicating empty default positional args
    5da0:	687b      	ldr	r3, [r7, #4]
    5da2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5da4:	4618      	mov	r0, r3
    5da6:	f004 fc7b 	bl	a6a0 <mp_emit_bc_load_null>
                    }
                    // first default dict param, so make the map
                    EMIT_ARG(build, 0, MP_EMIT_BUILD_MAP);
    5daa:	687b      	ldr	r3, [r7, #4]
    5dac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5dae:	2203      	movs	r2, #3
    5db0:	2100      	movs	r1, #0
    5db2:	4618      	mov	r0, r3
    5db4:	f004 ff89 	bl	acca <mp_emit_bc_build>
                }

                // compile value then key, then store it to the dict
                compile_node(comp, pn_equal);
    5db8:	6979      	ldr	r1, [r7, #20]
    5dba:	6878      	ldr	r0, [r7, #4]
    5dbc:	f002 ff5b 	bl	8c76 <compile_node>
                EMIT_ARG(load_const_str, MP_PARSE_NODE_LEAF_ARG(pn_id));
    5dc0:	687b      	ldr	r3, [r7, #4]
    5dc2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    5dc4:	69bb      	ldr	r3, [r7, #24]
    5dc6:	091b      	lsrs	r3, r3, #4
    5dc8:	4619      	mov	r1, r3
    5dca:	4610      	mov	r0, r2
    5dcc:	f004 fc44 	bl	a658 <mp_emit_bc_load_const_str>
                EMIT(store_map);
    5dd0:	687b      	ldr	r3, [r7, #4]
    5dd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5dd4:	4618      	mov	r0, r3
    5dd6:	f004 ff9a 	bl	ad0e <mp_emit_bc_store_map>
    5dda:	e009      	b.n	5df0 <compile_funcdef_lambdef_param+0x158>
            } else {
                comp->num_default_params += 1;
    5ddc:	687b      	ldr	r3, [r7, #4]
    5dde:	8adb      	ldrh	r3, [r3, #22]
    5de0:	3301      	adds	r3, #1
    5de2:	b29a      	uxth	r2, r3
    5de4:	687b      	ldr	r3, [r7, #4]
    5de6:	82da      	strh	r2, [r3, #22]
                compile_node(comp, pn_equal);
    5de8:	6979      	ldr	r1, [r7, #20]
    5dea:	6878      	ldr	r0, [r7, #4]
    5dec:	f002 ff43 	bl	8c76 <compile_node>
            }
        }
    }
}
    5df0:	3720      	adds	r7, #32
    5df2:	46bd      	mov	sp, r7
    5df4:	bd80      	pop	{r7, pc}
    5df6:	bf00      	nop
    5df8:	00021da8 	.word	0x00021da8
    5dfc:	00022834 	.word	0x00022834
    5e00:	00021c60 	.word	0x00021c60
    5e04:	00021dc4 	.word	0x00021dc4
    5e08:	00021de4 	.word	0x00021de4

00005e0c <compile_funcdef_lambdef>:

STATIC void compile_funcdef_lambdef(compiler_t *comp, scope_t *scope, mp_parse_node_t pn_params, pn_kind_t pn_list_kind) {
    5e0c:	b580      	push	{r7, lr}
    5e0e:	b086      	sub	sp, #24
    5e10:	af00      	add	r7, sp, #0
    5e12:	60f8      	str	r0, [r7, #12]
    5e14:	60b9      	str	r1, [r7, #8]
    5e16:	607a      	str	r2, [r7, #4]
    5e18:	603b      	str	r3, [r7, #0]
    // When we call compile_funcdef_lambdef_param below it can compile an arbitrary
    // expression for default arguments, which may contain a lambda.  The lambda will
    // call here in a nested way, so we must save and restore the relevant state.
    bool orig_have_star = comp->have_star;
    5e1a:	68fb      	ldr	r3, [r7, #12]
    5e1c:	799b      	ldrb	r3, [r3, #6]
    5e1e:	2b00      	cmp	r3, #0
    5e20:	bf14      	ite	ne
    5e22:	2301      	movne	r3, #1
    5e24:	2300      	moveq	r3, #0
    5e26:	75fb      	strb	r3, [r7, #23]
    uint16_t orig_num_dict_params = comp->num_dict_params;
    5e28:	68fb      	ldr	r3, [r7, #12]
    5e2a:	8a9b      	ldrh	r3, [r3, #20]
    5e2c:	82bb      	strh	r3, [r7, #20]
    uint16_t orig_num_default_params = comp->num_default_params;
    5e2e:	68fb      	ldr	r3, [r7, #12]
    5e30:	8adb      	ldrh	r3, [r3, #22]
    5e32:	827b      	strh	r3, [r7, #18]

    // compile default parameters
    comp->have_star = false;
    5e34:	68fb      	ldr	r3, [r7, #12]
    5e36:	2200      	movs	r2, #0
    5e38:	719a      	strb	r2, [r3, #6]
    comp->num_dict_params = 0;
    5e3a:	68fb      	ldr	r3, [r7, #12]
    5e3c:	2200      	movs	r2, #0
    5e3e:	829a      	strh	r2, [r3, #20]
    comp->num_default_params = 0;
    5e40:	68fb      	ldr	r3, [r7, #12]
    5e42:	2200      	movs	r2, #0
    5e44:	82da      	strh	r2, [r3, #22]
    apply_to_single_or_list(comp, pn_params, pn_list_kind, compile_funcdef_lambdef_param);
    5e46:	4b1b      	ldr	r3, [pc, #108]	; (5eb4 <compile_funcdef_lambdef+0xa8>)
    5e48:	683a      	ldr	r2, [r7, #0]
    5e4a:	6879      	ldr	r1, [r7, #4]
    5e4c:	68f8      	ldr	r0, [r7, #12]
    5e4e:	f7ff f9d8 	bl	5202 <apply_to_single_or_list>

    if (comp->compile_error != MP_OBJ_NULL) {
    5e52:	68fb      	ldr	r3, [r7, #12]
    5e54:	689b      	ldr	r3, [r3, #8]
    5e56:	2b00      	cmp	r3, #0
    5e58:	d127      	bne.n	5eaa <compile_funcdef_lambdef+0x9e>
        return;
    }

    // in MicroPython we put the default positional parameters into a tuple using the bytecode
    // the default keywords args may have already made the tuple; if not, do it now
    if (comp->num_default_params > 0 && comp->num_dict_params == 0) {
    5e5a:	68fb      	ldr	r3, [r7, #12]
    5e5c:	8adb      	ldrh	r3, [r3, #22]
    5e5e:	2b00      	cmp	r3, #0
    5e60:	d010      	beq.n	5e84 <compile_funcdef_lambdef+0x78>
    5e62:	68fb      	ldr	r3, [r7, #12]
    5e64:	8a9b      	ldrh	r3, [r3, #20]
    5e66:	2b00      	cmp	r3, #0
    5e68:	d10c      	bne.n	5e84 <compile_funcdef_lambdef+0x78>
        EMIT_ARG(build, comp->num_default_params, MP_EMIT_BUILD_TUPLE);
    5e6a:	68fb      	ldr	r3, [r7, #12]
    5e6c:	6a98      	ldr	r0, [r3, #40]	; 0x28
    5e6e:	68fb      	ldr	r3, [r7, #12]
    5e70:	8adb      	ldrh	r3, [r3, #22]
    5e72:	2200      	movs	r2, #0
    5e74:	4619      	mov	r1, r3
    5e76:	f004 ff28 	bl	acca <mp_emit_bc_build>
        EMIT(load_null); // sentinel indicating empty default keyword args
    5e7a:	68fb      	ldr	r3, [r7, #12]
    5e7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5e7e:	4618      	mov	r0, r3
    5e80:	f004 fc0e 	bl	a6a0 <mp_emit_bc_load_null>
    }

    // make the function
    close_over_variables_etc(comp, scope, comp->num_default_params, comp->num_dict_params);
    5e84:	68fb      	ldr	r3, [r7, #12]
    5e86:	8adb      	ldrh	r3, [r3, #22]
    5e88:	461a      	mov	r2, r3
    5e8a:	68fb      	ldr	r3, [r7, #12]
    5e8c:	8a9b      	ldrh	r3, [r3, #20]
    5e8e:	68b9      	ldr	r1, [r7, #8]
    5e90:	68f8      	ldr	r0, [r7, #12]
    5e92:	f7ff fe6b 	bl	5b6c <close_over_variables_etc>

    // restore state
    comp->have_star = orig_have_star;
    5e96:	7dfa      	ldrb	r2, [r7, #23]
    5e98:	68fb      	ldr	r3, [r7, #12]
    5e9a:	719a      	strb	r2, [r3, #6]
    comp->num_dict_params = orig_num_dict_params;
    5e9c:	68fb      	ldr	r3, [r7, #12]
    5e9e:	8aba      	ldrh	r2, [r7, #20]
    5ea0:	829a      	strh	r2, [r3, #20]
    comp->num_default_params = orig_num_default_params;
    5ea2:	68fb      	ldr	r3, [r7, #12]
    5ea4:	8a7a      	ldrh	r2, [r7, #18]
    5ea6:	82da      	strh	r2, [r3, #22]
    5ea8:	e000      	b.n	5eac <compile_funcdef_lambdef+0xa0>
        return;
    5eaa:	bf00      	nop
}
    5eac:	3718      	adds	r7, #24
    5eae:	46bd      	mov	sp, r7
    5eb0:	bd80      	pop	{r7, pc}
    5eb2:	bf00      	nop
    5eb4:	00005c99 	.word	0x00005c99

00005eb8 <compile_funcdef_helper>:

// leaves function object on stack
// returns function name
STATIC qstr compile_funcdef_helper(compiler_t *comp, mp_parse_node_struct_t *pns, uint emit_options) {
    5eb8:	b580      	push	{r7, lr}
    5eba:	b086      	sub	sp, #24
    5ebc:	af00      	add	r7, sp, #0
    5ebe:	60f8      	str	r0, [r7, #12]
    5ec0:	60b9      	str	r1, [r7, #8]
    5ec2:	607a      	str	r2, [r7, #4]
    if (comp->pass == MP_PASS_SCOPE) {
    5ec4:	68fb      	ldr	r3, [r7, #12]
    5ec6:	795b      	ldrb	r3, [r3, #5]
    5ec8:	2b01      	cmp	r3, #1
    5eca:	d109      	bne.n	5ee0 <compile_funcdef_helper+0x28>
        // create a new scope for this function
        scope_t *s = scope_new_and_link(comp, SCOPE_FUNCTION, (mp_parse_node_t)pns, emit_options);
    5ecc:	68ba      	ldr	r2, [r7, #8]
    5ece:	687b      	ldr	r3, [r7, #4]
    5ed0:	2107      	movs	r1, #7
    5ed2:	68f8      	ldr	r0, [r7, #12]
    5ed4:	f7ff f964 	bl	51a0 <scope_new_and_link>
    5ed8:	6178      	str	r0, [r7, #20]
        // store the function scope so the compiling function can use it at each pass
        pns->nodes[4] = (mp_parse_node_t)s;
    5eda:	697a      	ldr	r2, [r7, #20]
    5edc:	68bb      	ldr	r3, [r7, #8]
    5ede:	619a      	str	r2, [r3, #24]
    }

    // get the scope for this function
    scope_t *fscope = (scope_t*)pns->nodes[4];
    5ee0:	68bb      	ldr	r3, [r7, #8]
    5ee2:	699b      	ldr	r3, [r3, #24]
    5ee4:	613b      	str	r3, [r7, #16]

    // compile the function definition
    compile_funcdef_lambdef(comp, fscope, pns->nodes[1], PN_typedargslist);
    5ee6:	68bb      	ldr	r3, [r7, #8]
    5ee8:	68da      	ldr	r2, [r3, #12]
    5eea:	233e      	movs	r3, #62	; 0x3e
    5eec:	6939      	ldr	r1, [r7, #16]
    5eee:	68f8      	ldr	r0, [r7, #12]
    5ef0:	f7ff ff8c 	bl	5e0c <compile_funcdef_lambdef>

    // return its name (the 'f' in "def f(...):")
    return fscope->simple_name;
    5ef4:	693b      	ldr	r3, [r7, #16]
    5ef6:	8adb      	ldrh	r3, [r3, #22]
}
    5ef8:	4618      	mov	r0, r3
    5efa:	3718      	adds	r7, #24
    5efc:	46bd      	mov	sp, r7
    5efe:	bd80      	pop	{r7, pc}

00005f00 <compile_classdef_helper>:

// leaves class object on stack
// returns class name
STATIC qstr compile_classdef_helper(compiler_t *comp, mp_parse_node_struct_t *pns, uint emit_options) {
    5f00:	b580      	push	{r7, lr}
    5f02:	b088      	sub	sp, #32
    5f04:	af00      	add	r7, sp, #0
    5f06:	60f8      	str	r0, [r7, #12]
    5f08:	60b9      	str	r1, [r7, #8]
    5f0a:	607a      	str	r2, [r7, #4]
    if (comp->pass == MP_PASS_SCOPE) {
    5f0c:	68fb      	ldr	r3, [r7, #12]
    5f0e:	795b      	ldrb	r3, [r3, #5]
    5f10:	2b01      	cmp	r3, #1
    5f12:	d109      	bne.n	5f28 <compile_classdef_helper+0x28>
        // create a new scope for this class
        scope_t *s = scope_new_and_link(comp, SCOPE_CLASS, (mp_parse_node_t)pns, emit_options);
    5f14:	68ba      	ldr	r2, [r7, #8]
    5f16:	687b      	ldr	r3, [r7, #4]
    5f18:	2101      	movs	r1, #1
    5f1a:	68f8      	ldr	r0, [r7, #12]
    5f1c:	f7ff f940 	bl	51a0 <scope_new_and_link>
    5f20:	61b8      	str	r0, [r7, #24]
        // store the class scope so the compiling function can use it at each pass
        pns->nodes[3] = (mp_parse_node_t)s;
    5f22:	69ba      	ldr	r2, [r7, #24]
    5f24:	68bb      	ldr	r3, [r7, #8]
    5f26:	615a      	str	r2, [r3, #20]
    }

    EMIT(load_build_class);
    5f28:	68fb      	ldr	r3, [r7, #12]
    5f2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5f2c:	4618      	mov	r0, r3
    5f2e:	f004 fc23 	bl	a778 <mp_emit_bc_load_build_class>

    // scope for this class
    scope_t *cscope = (scope_t*)pns->nodes[3];
    5f32:	68bb      	ldr	r3, [r7, #8]
    5f34:	695b      	ldr	r3, [r3, #20]
    5f36:	617b      	str	r3, [r7, #20]

    // compile the class
    close_over_variables_etc(comp, cscope, 0, 0);
    5f38:	2300      	movs	r3, #0
    5f3a:	2200      	movs	r2, #0
    5f3c:	6979      	ldr	r1, [r7, #20]
    5f3e:	68f8      	ldr	r0, [r7, #12]
    5f40:	f7ff fe14 	bl	5b6c <close_over_variables_etc>

    // get its name
    EMIT_ARG(load_const_str, cscope->simple_name);
    5f44:	68fb      	ldr	r3, [r7, #12]
    5f46:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    5f48:	697b      	ldr	r3, [r7, #20]
    5f4a:	8adb      	ldrh	r3, [r3, #22]
    5f4c:	4619      	mov	r1, r3
    5f4e:	4610      	mov	r0, r2
    5f50:	f004 fb82 	bl	a658 <mp_emit_bc_load_const_str>

    // nodes[1] has parent classes, if any
    // empty parenthesis (eg class C():) gets here as an empty PN_classdef_2 and needs special handling
    mp_parse_node_t parents = pns->nodes[1];
    5f54:	68bb      	ldr	r3, [r7, #8]
    5f56:	68db      	ldr	r3, [r3, #12]
    5f58:	61fb      	str	r3, [r7, #28]
    if (MP_PARSE_NODE_IS_STRUCT_KIND(parents, PN_classdef_2)) {
    5f5a:	69fb      	ldr	r3, [r7, #28]
    5f5c:	2b00      	cmp	r3, #0
    5f5e:	d00b      	beq.n	5f78 <compile_classdef_helper+0x78>
    5f60:	69fb      	ldr	r3, [r7, #28]
    5f62:	f003 0303 	and.w	r3, r3, #3
    5f66:	2b00      	cmp	r3, #0
    5f68:	d106      	bne.n	5f78 <compile_classdef_helper+0x78>
    5f6a:	69fb      	ldr	r3, [r7, #28]
    5f6c:	685b      	ldr	r3, [r3, #4]
    5f6e:	b2db      	uxtb	r3, r3
    5f70:	2b96      	cmp	r3, #150	; 0x96
    5f72:	d101      	bne.n	5f78 <compile_classdef_helper+0x78>
        parents = MP_PARSE_NODE_NULL;
    5f74:	2300      	movs	r3, #0
    5f76:	61fb      	str	r3, [r7, #28]
    }
    compile_trailer_paren_helper(comp, parents, false, 2);
    5f78:	2302      	movs	r3, #2
    5f7a:	2200      	movs	r2, #0
    5f7c:	69f9      	ldr	r1, [r7, #28]
    5f7e:	68f8      	ldr	r0, [r7, #12]
    5f80:	f002 fa19 	bl	83b6 <compile_trailer_paren_helper>

    // return its name (the 'C' in class C(...):")
    return cscope->simple_name;
    5f84:	697b      	ldr	r3, [r7, #20]
    5f86:	8adb      	ldrh	r3, [r3, #22]
}
    5f88:	4618      	mov	r0, r3
    5f8a:	3720      	adds	r7, #32
    5f8c:	46bd      	mov	sp, r7
    5f8e:	bd80      	pop	{r7, pc}

00005f90 <compile_built_in_decorator>:

// returns true if it was a built-in decorator (even if the built-in had an error)
STATIC bool compile_built_in_decorator(compiler_t *comp, int name_len, mp_parse_node_t *name_nodes, uint *emit_options) {
    5f90:	b580      	push	{r7, lr}
    5f92:	b086      	sub	sp, #24
    5f94:	af00      	add	r7, sp, #0
    5f96:	60f8      	str	r0, [r7, #12]
    5f98:	60b9      	str	r1, [r7, #8]
    5f9a:	607a      	str	r2, [r7, #4]
    5f9c:	603b      	str	r3, [r7, #0]
    if (MP_PARSE_NODE_LEAF_ARG(name_nodes[0]) != MP_QSTR_micropython) {
    5f9e:	687b      	ldr	r3, [r7, #4]
    5fa0:	681b      	ldr	r3, [r3, #0]
    5fa2:	091b      	lsrs	r3, r3, #4
    5fa4:	f240 1237 	movw	r2, #311	; 0x137
    5fa8:	4293      	cmp	r3, r2
    5faa:	d001      	beq.n	5fb0 <compile_built_in_decorator+0x20>
        return false;
    5fac:	2300      	movs	r3, #0
    5fae:	e020      	b.n	5ff2 <compile_built_in_decorator+0x62>
    }

    if (name_len != 2) {
    5fb0:	68bb      	ldr	r3, [r7, #8]
    5fb2:	2b02      	cmp	r3, #2
    5fb4:	d008      	beq.n	5fc8 <compile_built_in_decorator+0x38>
        compile_syntax_error(comp, name_nodes[0], "invalid micropython decorator");
    5fb6:	687b      	ldr	r3, [r7, #4]
    5fb8:	681b      	ldr	r3, [r3, #0]
    5fba:	4a10      	ldr	r2, [pc, #64]	; (5ffc <compile_built_in_decorator+0x6c>)
    5fbc:	4619      	mov	r1, r3
    5fbe:	68f8      	ldr	r0, [r7, #12]
    5fc0:	f7ff f87d 	bl	50be <compile_syntax_error>
        return true;
    5fc4:	2301      	movs	r3, #1
    5fc6:	e014      	b.n	5ff2 <compile_built_in_decorator+0x62>
    }

    qstr attr = MP_PARSE_NODE_LEAF_ARG(name_nodes[1]);
    5fc8:	687b      	ldr	r3, [r7, #4]
    5fca:	3304      	adds	r3, #4
    5fcc:	681b      	ldr	r3, [r3, #0]
    5fce:	091b      	lsrs	r3, r3, #4
    5fd0:	617b      	str	r3, [r7, #20]
    if (attr == MP_QSTR_bytecode) {
    5fd2:	697b      	ldr	r3, [r7, #20]
    5fd4:	2bf3      	cmp	r3, #243	; 0xf3
    5fd6:	d103      	bne.n	5fe0 <compile_built_in_decorator+0x50>
        *emit_options = MP_EMIT_OPT_BYTECODE;
    5fd8:	683b      	ldr	r3, [r7, #0]
    5fda:	2201      	movs	r2, #1
    5fdc:	601a      	str	r2, [r3, #0]
    5fde:	e007      	b.n	5ff0 <compile_built_in_decorator+0x60>
    #if MICROPY_EMIT_INLINE_ASM
    } else if (attr == ASM_DECORATOR_QSTR) {
        *emit_options = MP_EMIT_OPT_ASM;
    #endif
    } else {
        compile_syntax_error(comp, name_nodes[1], "invalid micropython decorator");
    5fe0:	687b      	ldr	r3, [r7, #4]
    5fe2:	3304      	adds	r3, #4
    5fe4:	681b      	ldr	r3, [r3, #0]
    5fe6:	4a05      	ldr	r2, [pc, #20]	; (5ffc <compile_built_in_decorator+0x6c>)
    5fe8:	4619      	mov	r1, r3
    5fea:	68f8      	ldr	r0, [r7, #12]
    5fec:	f7ff f867 	bl	50be <compile_syntax_error>
    }

    return true;
    5ff0:	2301      	movs	r3, #1
}
    5ff2:	4618      	mov	r0, r3
    5ff4:	3718      	adds	r7, #24
    5ff6:	46bd      	mov	sp, r7
    5ff8:	bd80      	pop	{r7, pc}
    5ffa:	bf00      	nop
    5ffc:	00021e14 	.word	0x00021e14

00006000 <compile_decorated>:

STATIC void compile_decorated(compiler_t *comp, mp_parse_node_struct_t *pns) {
    6000:	b580      	push	{r7, lr}
    6002:	b08e      	sub	sp, #56	; 0x38
    6004:	af00      	add	r7, sp, #0
    6006:	6078      	str	r0, [r7, #4]
    6008:	6039      	str	r1, [r7, #0]
    // get the list of decorators
    mp_parse_node_t *nodes;
    int n = mp_parse_node_extract_list(&pns->nodes[0], PN_decorators, &nodes);
    600a:	683b      	ldr	r3, [r7, #0]
    600c:	3308      	adds	r3, #8
    600e:	f107 0210 	add.w	r2, r7, #16
    6012:	213b      	movs	r1, #59	; 0x3b
    6014:	4618      	mov	r0, r3
    6016:	f7fd fe8d 	bl	3d34 <mp_parse_node_extract_list>
    601a:	6238      	str	r0, [r7, #32]

    // inherit emit options for this function/class definition
    uint emit_options = comp->scope_cur->emit_options;
    601c:	687b      	ldr	r3, [r7, #4]
    601e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    6020:	8b5b      	ldrh	r3, [r3, #26]
    6022:	60fb      	str	r3, [r7, #12]

    // compile each decorator
    int num_built_in_decorators = 0;
    6024:	2300      	movs	r3, #0
    6026:	637b      	str	r3, [r7, #52]	; 0x34
    for (int i = 0; i < n; i++) {
    6028:	2300      	movs	r3, #0
    602a:	633b      	str	r3, [r7, #48]	; 0x30
    602c:	e075      	b.n	611a <compile_decorated+0x11a>
        assert(MP_PARSE_NODE_IS_STRUCT_KIND(nodes[i], PN_decorator)); // should be
    602e:	693a      	ldr	r2, [r7, #16]
    6030:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    6032:	009b      	lsls	r3, r3, #2
    6034:	4413      	add	r3, r2
    6036:	681b      	ldr	r3, [r3, #0]
    6038:	2b00      	cmp	r3, #0
    603a:	d011      	beq.n	6060 <compile_decorated+0x60>
    603c:	693a      	ldr	r2, [r7, #16]
    603e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    6040:	009b      	lsls	r3, r3, #2
    6042:	4413      	add	r3, r2
    6044:	681b      	ldr	r3, [r3, #0]
    6046:	f003 0303 	and.w	r3, r3, #3
    604a:	2b00      	cmp	r3, #0
    604c:	d108      	bne.n	6060 <compile_decorated+0x60>
    604e:	693a      	ldr	r2, [r7, #16]
    6050:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    6052:	009b      	lsls	r3, r3, #2
    6054:	4413      	add	r3, r2
    6056:	681b      	ldr	r3, [r3, #0]
    6058:	685b      	ldr	r3, [r3, #4]
    605a:	b2db      	uxtb	r3, r3
    605c:	2b3a      	cmp	r3, #58	; 0x3a
    605e:	d006      	beq.n	606e <compile_decorated+0x6e>
    6060:	4b50      	ldr	r3, [pc, #320]	; (61a4 <compile_decorated+0x1a4>)
    6062:	4a51      	ldr	r2, [pc, #324]	; (61a8 <compile_decorated+0x1a8>)
    6064:	f240 3136 	movw	r1, #822	; 0x336
    6068:	4850      	ldr	r0, [pc, #320]	; (61ac <compile_decorated+0x1ac>)
    606a:	f016 ff39 	bl	1cee0 <__assert_func>
        mp_parse_node_struct_t *pns_decorator = (mp_parse_node_struct_t*)nodes[i];
    606e:	693a      	ldr	r2, [r7, #16]
    6070:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    6072:	009b      	lsls	r3, r3, #2
    6074:	4413      	add	r3, r2
    6076:	681b      	ldr	r3, [r3, #0]
    6078:	61fb      	str	r3, [r7, #28]

        // nodes[0] contains the decorator function, which is a dotted name
        mp_parse_node_t *name_nodes;
        int name_len = mp_parse_node_extract_list(&pns_decorator->nodes[0], PN_dotted_name, &name_nodes);
    607a:	69fb      	ldr	r3, [r7, #28]
    607c:	3308      	adds	r3, #8
    607e:	f107 0208 	add.w	r2, r7, #8
    6082:	2166      	movs	r1, #102	; 0x66
    6084:	4618      	mov	r0, r3
    6086:	f7fd fe55 	bl	3d34 <mp_parse_node_extract_list>
    608a:	61b8      	str	r0, [r7, #24]

        // check for built-in decorators
        if (compile_built_in_decorator(comp, name_len, name_nodes, &emit_options)) {
    608c:	68ba      	ldr	r2, [r7, #8]
    608e:	f107 030c 	add.w	r3, r7, #12
    6092:	69b9      	ldr	r1, [r7, #24]
    6094:	6878      	ldr	r0, [r7, #4]
    6096:	f7ff ff7b 	bl	5f90 <compile_built_in_decorator>
    609a:	4603      	mov	r3, r0
    609c:	2b00      	cmp	r3, #0
    609e:	d003      	beq.n	60a8 <compile_decorated+0xa8>
            // this was a built-in
            num_built_in_decorators += 1;
    60a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    60a2:	3301      	adds	r3, #1
    60a4:	637b      	str	r3, [r7, #52]	; 0x34
    60a6:	e035      	b.n	6114 <compile_decorated+0x114>

        } else {
            // not a built-in, compile normally

            // compile the decorator function
            compile_node(comp, name_nodes[0]);
    60a8:	68bb      	ldr	r3, [r7, #8]
    60aa:	681b      	ldr	r3, [r3, #0]
    60ac:	4619      	mov	r1, r3
    60ae:	6878      	ldr	r0, [r7, #4]
    60b0:	f002 fde1 	bl	8c76 <compile_node>
            for (int j = 1; j < name_len; j++) {
    60b4:	2301      	movs	r3, #1
    60b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    60b8:	e01e      	b.n	60f8 <compile_decorated+0xf8>
                assert(MP_PARSE_NODE_IS_ID(name_nodes[j])); // should be
    60ba:	68ba      	ldr	r2, [r7, #8]
    60bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    60be:	009b      	lsls	r3, r3, #2
    60c0:	4413      	add	r3, r2
    60c2:	681b      	ldr	r3, [r3, #0]
    60c4:	f003 030f 	and.w	r3, r3, #15
    60c8:	2b02      	cmp	r3, #2
    60ca:	d006      	beq.n	60da <compile_decorated+0xda>
    60cc:	4b38      	ldr	r3, [pc, #224]	; (61b0 <compile_decorated+0x1b0>)
    60ce:	4a36      	ldr	r2, [pc, #216]	; (61a8 <compile_decorated+0x1a8>)
    60d0:	f44f 7152 	mov.w	r1, #840	; 0x348
    60d4:	4835      	ldr	r0, [pc, #212]	; (61ac <compile_decorated+0x1ac>)
    60d6:	f016 ff03 	bl	1cee0 <__assert_func>
                EMIT_ARG(attr, MP_PARSE_NODE_LEAF_ARG(name_nodes[j]), MP_EMIT_ATTR_LOAD);
    60da:	687b      	ldr	r3, [r7, #4]
    60dc:	6a98      	ldr	r0, [r3, #40]	; 0x28
    60de:	68ba      	ldr	r2, [r7, #8]
    60e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    60e2:	009b      	lsls	r3, r3, #2
    60e4:	4413      	add	r3, r2
    60e6:	681b      	ldr	r3, [r3, #0]
    60e8:	091b      	lsrs	r3, r3, #4
    60ea:	2200      	movs	r2, #0
    60ec:	4619      	mov	r1, r3
    60ee:	f004 fb7b 	bl	a7e8 <mp_emit_bc_attr>
            for (int j = 1; j < name_len; j++) {
    60f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    60f4:	3301      	adds	r3, #1
    60f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    60f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    60fa:	69bb      	ldr	r3, [r7, #24]
    60fc:	429a      	cmp	r2, r3
    60fe:	dbdc      	blt.n	60ba <compile_decorated+0xba>
            }

            // nodes[1] contains arguments to the decorator function, if any
            if (!MP_PARSE_NODE_IS_NULL(pns_decorator->nodes[1])) {
    6100:	69fb      	ldr	r3, [r7, #28]
    6102:	68db      	ldr	r3, [r3, #12]
    6104:	2b00      	cmp	r3, #0
    6106:	d005      	beq.n	6114 <compile_decorated+0x114>
                // call the decorator function with the arguments in nodes[1]
                compile_node(comp, pns_decorator->nodes[1]);
    6108:	69fb      	ldr	r3, [r7, #28]
    610a:	68db      	ldr	r3, [r3, #12]
    610c:	4619      	mov	r1, r3
    610e:	6878      	ldr	r0, [r7, #4]
    6110:	f002 fdb1 	bl	8c76 <compile_node>
    for (int i = 0; i < n; i++) {
    6114:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    6116:	3301      	adds	r3, #1
    6118:	633b      	str	r3, [r7, #48]	; 0x30
    611a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    611c:	6a3b      	ldr	r3, [r7, #32]
    611e:	429a      	cmp	r2, r3
    6120:	db85      	blt.n	602e <compile_decorated+0x2e>
            }
        }
    }

    // compile the body (funcdef, async funcdef or classdef) and get its name
    mp_parse_node_struct_t *pns_body = (mp_parse_node_struct_t*)pns->nodes[1];
    6122:	683b      	ldr	r3, [r7, #0]
    6124:	68db      	ldr	r3, [r3, #12]
    6126:	617b      	str	r3, [r7, #20]
    qstr body_name = 0;
    6128:	2300      	movs	r3, #0
    612a:	62bb      	str	r3, [r7, #40]	; 0x28
    if (MP_PARSE_NODE_STRUCT_KIND(pns_body) == PN_funcdef) {
    612c:	697b      	ldr	r3, [r7, #20]
    612e:	685b      	ldr	r3, [r3, #4]
    6130:	b2db      	uxtb	r3, r3
    6132:	2b03      	cmp	r3, #3
    6134:	d107      	bne.n	6146 <compile_decorated+0x146>
        body_name = compile_funcdef_helper(comp, pns_body, emit_options);
    6136:	68fb      	ldr	r3, [r7, #12]
    6138:	461a      	mov	r2, r3
    613a:	6979      	ldr	r1, [r7, #20]
    613c:	6878      	ldr	r0, [r7, #4]
    613e:	f7ff febb 	bl	5eb8 <compile_funcdef_helper>
    6142:	62b8      	str	r0, [r7, #40]	; 0x28
    6144:	e012      	b.n	616c <compile_decorated+0x16c>
        body_name = compile_funcdef_helper(comp, pns0, emit_options);
        scope_t *fscope = (scope_t*)pns0->nodes[4];
        fscope->scope_flags |= MP_SCOPE_FLAG_GENERATOR;
    #endif
    } else {
        assert(MP_PARSE_NODE_STRUCT_KIND(pns_body) == PN_classdef); // should be
    6146:	697b      	ldr	r3, [r7, #20]
    6148:	685b      	ldr	r3, [r3, #4]
    614a:	b2db      	uxtb	r3, r3
    614c:	2b33      	cmp	r3, #51	; 0x33
    614e:	d006      	beq.n	615e <compile_decorated+0x15e>
    6150:	4b18      	ldr	r3, [pc, #96]	; (61b4 <compile_decorated+0x1b4>)
    6152:	4a15      	ldr	r2, [pc, #84]	; (61a8 <compile_decorated+0x1a8>)
    6154:	f240 3162 	movw	r1, #866	; 0x362
    6158:	4814      	ldr	r0, [pc, #80]	; (61ac <compile_decorated+0x1ac>)
    615a:	f016 fec1 	bl	1cee0 <__assert_func>
        body_name = compile_classdef_helper(comp, pns_body, emit_options);
    615e:	68fb      	ldr	r3, [r7, #12]
    6160:	461a      	mov	r2, r3
    6162:	6979      	ldr	r1, [r7, #20]
    6164:	6878      	ldr	r0, [r7, #4]
    6166:	f7ff fecb 	bl	5f00 <compile_classdef_helper>
    616a:	62b8      	str	r0, [r7, #40]	; 0x28
    }

    // call each decorator
    for (int i = 0; i < n - num_built_in_decorators; i++) {
    616c:	2300      	movs	r3, #0
    616e:	627b      	str	r3, [r7, #36]	; 0x24
    6170:	e009      	b.n	6186 <compile_decorated+0x186>
        EMIT_ARG(call_function, 1, 0, 0);
    6172:	687b      	ldr	r3, [r7, #4]
    6174:	6a98      	ldr	r0, [r3, #40]	; 0x28
    6176:	2300      	movs	r3, #0
    6178:	2200      	movs	r2, #0
    617a:	2101      	movs	r1, #1
    617c:	f004 feda 	bl	af34 <mp_emit_bc_call_function>
    for (int i = 0; i < n - num_built_in_decorators; i++) {
    6180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    6182:	3301      	adds	r3, #1
    6184:	627b      	str	r3, [r7, #36]	; 0x24
    6186:	6a3a      	ldr	r2, [r7, #32]
    6188:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    618a:	1ad2      	subs	r2, r2, r3
    618c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    618e:	429a      	cmp	r2, r3
    6190:	dcef      	bgt.n	6172 <compile_decorated+0x172>
    }

    // store func/class object into name
    compile_store_id(comp, body_name);
    6192:	6ab9      	ldr	r1, [r7, #40]	; 0x28
    6194:	6878      	ldr	r0, [r7, #4]
    6196:	f7ff f8bb 	bl	5310 <compile_store_id>
}
    619a:	bf00      	nop
    619c:	3738      	adds	r7, #56	; 0x38
    619e:	46bd      	mov	sp, r7
    61a0:	bd80      	pop	{r7, pc}
    61a2:	bf00      	nop
    61a4:	00021e34 	.word	0x00021e34
    61a8:	00022854 	.word	0x00022854
    61ac:	00021c60 	.word	0x00021c60
    61b0:	00021e6c 	.word	0x00021e6c
    61b4:	00021e90 	.word	0x00021e90

000061b8 <compile_funcdef>:

STATIC void compile_funcdef(compiler_t *comp, mp_parse_node_struct_t *pns) {
    61b8:	b580      	push	{r7, lr}
    61ba:	b084      	sub	sp, #16
    61bc:	af00      	add	r7, sp, #0
    61be:	6078      	str	r0, [r7, #4]
    61c0:	6039      	str	r1, [r7, #0]
    qstr fname = compile_funcdef_helper(comp, pns, comp->scope_cur->emit_options);
    61c2:	687b      	ldr	r3, [r7, #4]
    61c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    61c6:	8b5b      	ldrh	r3, [r3, #26]
    61c8:	461a      	mov	r2, r3
    61ca:	6839      	ldr	r1, [r7, #0]
    61cc:	6878      	ldr	r0, [r7, #4]
    61ce:	f7ff fe73 	bl	5eb8 <compile_funcdef_helper>
    61d2:	60f8      	str	r0, [r7, #12]
    // store function object into function name
    compile_store_id(comp, fname);
    61d4:	68f9      	ldr	r1, [r7, #12]
    61d6:	6878      	ldr	r0, [r7, #4]
    61d8:	f7ff f89a 	bl	5310 <compile_store_id>
}
    61dc:	bf00      	nop
    61de:	3710      	adds	r7, #16
    61e0:	46bd      	mov	sp, r7
    61e2:	bd80      	pop	{r7, pc}

000061e4 <c_del_stmt>:

STATIC void c_del_stmt(compiler_t *comp, mp_parse_node_t pn) {
    61e4:	b580      	push	{r7, lr}
    61e6:	b08a      	sub	sp, #40	; 0x28
    61e8:	af00      	add	r7, sp, #0
    61ea:	6078      	str	r0, [r7, #4]
    61ec:	6039      	str	r1, [r7, #0]
    if (MP_PARSE_NODE_IS_ID(pn)) {
    61ee:	683b      	ldr	r3, [r7, #0]
    61f0:	f003 030f 	and.w	r3, r3, #15
    61f4:	2b02      	cmp	r3, #2
    61f6:	d106      	bne.n	6206 <c_del_stmt+0x22>
        compile_delete_id(comp, MP_PARSE_NODE_LEAF_ARG(pn));
    61f8:	683b      	ldr	r3, [r7, #0]
    61fa:	091b      	lsrs	r3, r3, #4
    61fc:	4619      	mov	r1, r3
    61fe:	6878      	ldr	r0, [r7, #4]
    6200:	f7ff f8a4 	bl	534c <compile_delete_id>
    } else {
        // some arbitrary statement that we can't delete (eg del 1)
        goto cannot_delete;
    }

    return;
    6204:	e122      	b.n	644c <c_del_stmt+0x268>
    } else if (MP_PARSE_NODE_IS_STRUCT_KIND(pn, PN_atom_expr_normal)) {
    6206:	683b      	ldr	r3, [r7, #0]
    6208:	2b00      	cmp	r3, #0
    620a:	f000 808f 	beq.w	632c <c_del_stmt+0x148>
    620e:	683b      	ldr	r3, [r7, #0]
    6210:	f003 0303 	and.w	r3, r3, #3
    6214:	2b00      	cmp	r3, #0
    6216:	f040 8089 	bne.w	632c <c_del_stmt+0x148>
    621a:	683b      	ldr	r3, [r7, #0]
    621c:	685b      	ldr	r3, [r3, #4]
    621e:	b2db      	uxtb	r3, r3
    6220:	2b29      	cmp	r3, #41	; 0x29
    6222:	f040 8083 	bne.w	632c <c_del_stmt+0x148>
        mp_parse_node_struct_t *pns = (mp_parse_node_struct_t*)pn;
    6226:	683b      	ldr	r3, [r7, #0]
    6228:	61bb      	str	r3, [r7, #24]
        compile_node(comp, pns->nodes[0]); // base of the atom_expr_normal node
    622a:	69bb      	ldr	r3, [r7, #24]
    622c:	689b      	ldr	r3, [r3, #8]
    622e:	4619      	mov	r1, r3
    6230:	6878      	ldr	r0, [r7, #4]
    6232:	f002 fd20 	bl	8c76 <compile_node>
        if (MP_PARSE_NODE_IS_STRUCT(pns->nodes[1])) {
    6236:	69bb      	ldr	r3, [r7, #24]
    6238:	68db      	ldr	r3, [r3, #12]
    623a:	2b00      	cmp	r3, #0
    623c:	f000 8101 	beq.w	6442 <c_del_stmt+0x25e>
    6240:	69bb      	ldr	r3, [r7, #24]
    6242:	68db      	ldr	r3, [r3, #12]
    6244:	f003 0303 	and.w	r3, r3, #3
    6248:	2b00      	cmp	r3, #0
    624a:	f040 80fa 	bne.w	6442 <c_del_stmt+0x25e>
            mp_parse_node_struct_t *pns1 = (mp_parse_node_struct_t*)pns->nodes[1];
    624e:	69bb      	ldr	r3, [r7, #24]
    6250:	68db      	ldr	r3, [r3, #12]
    6252:	627b      	str	r3, [r7, #36]	; 0x24
            if (MP_PARSE_NODE_STRUCT_KIND(pns1) == PN_atom_expr_trailers) {
    6254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    6256:	685b      	ldr	r3, [r3, #4]
    6258:	b2db      	uxtb	r3, r3
    625a:	2b86      	cmp	r3, #134	; 0x86
    625c:	d137      	bne.n	62ce <c_del_stmt+0xea>
                int n = MP_PARSE_NODE_STRUCT_NUM_NODES(pns1);
    625e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    6260:	685b      	ldr	r3, [r3, #4]
    6262:	0a1b      	lsrs	r3, r3, #8
    6264:	617b      	str	r3, [r7, #20]
                for (int i = 0; i < n - 1; i++) {
    6266:	2300      	movs	r3, #0
    6268:	623b      	str	r3, [r7, #32]
    626a:	e00b      	b.n	6284 <c_del_stmt+0xa0>
                    compile_node(comp, pns1->nodes[i]);
    626c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    626e:	6a3a      	ldr	r2, [r7, #32]
    6270:	3202      	adds	r2, #2
    6272:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    6276:	4619      	mov	r1, r3
    6278:	6878      	ldr	r0, [r7, #4]
    627a:	f002 fcfc 	bl	8c76 <compile_node>
                for (int i = 0; i < n - 1; i++) {
    627e:	6a3b      	ldr	r3, [r7, #32]
    6280:	3301      	adds	r3, #1
    6282:	623b      	str	r3, [r7, #32]
    6284:	697b      	ldr	r3, [r7, #20]
    6286:	1e5a      	subs	r2, r3, #1
    6288:	6a3b      	ldr	r3, [r7, #32]
    628a:	429a      	cmp	r2, r3
    628c:	dcee      	bgt.n	626c <c_del_stmt+0x88>
                assert(MP_PARSE_NODE_IS_STRUCT(pns1->nodes[n - 1]));
    628e:	697b      	ldr	r3, [r7, #20]
    6290:	1e5a      	subs	r2, r3, #1
    6292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    6294:	3202      	adds	r2, #2
    6296:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    629a:	2b00      	cmp	r3, #0
    629c:	d009      	beq.n	62b2 <c_del_stmt+0xce>
    629e:	697b      	ldr	r3, [r7, #20]
    62a0:	1e5a      	subs	r2, r3, #1
    62a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    62a4:	3202      	adds	r2, #2
    62a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    62aa:	f003 0303 	and.w	r3, r3, #3
    62ae:	2b00      	cmp	r3, #0
    62b0:	d006      	beq.n	62c0 <c_del_stmt+0xdc>
    62b2:	4b68      	ldr	r3, [pc, #416]	; (6454 <c_del_stmt+0x270>)
    62b4:	4a68      	ldr	r2, [pc, #416]	; (6458 <c_del_stmt+0x274>)
    62b6:	f44f 7161 	mov.w	r1, #900	; 0x384
    62ba:	4868      	ldr	r0, [pc, #416]	; (645c <c_del_stmt+0x278>)
    62bc:	f016 fe10 	bl	1cee0 <__assert_func>
                pns1 = (mp_parse_node_struct_t*)pns1->nodes[n - 1];
    62c0:	697b      	ldr	r3, [r7, #20]
    62c2:	1e5a      	subs	r2, r3, #1
    62c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    62c6:	3202      	adds	r2, #2
    62c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    62cc:	627b      	str	r3, [r7, #36]	; 0x24
            if (MP_PARSE_NODE_STRUCT_KIND(pns1) == PN_trailer_bracket) {
    62ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    62d0:	685b      	ldr	r3, [r3, #4]
    62d2:	b2db      	uxtb	r3, r3
    62d4:	2b2e      	cmp	r3, #46	; 0x2e
    62d6:	d10c      	bne.n	62f2 <c_del_stmt+0x10e>
                compile_node(comp, pns1->nodes[0]);
    62d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    62da:	689b      	ldr	r3, [r3, #8]
    62dc:	4619      	mov	r1, r3
    62de:	6878      	ldr	r0, [r7, #4]
    62e0:	f002 fcc9 	bl	8c76 <compile_node>
                EMIT_ARG(subscr, MP_EMIT_SUBSCR_DELETE);
    62e4:	687b      	ldr	r3, [r7, #4]
    62e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    62e8:	2102      	movs	r1, #2
    62ea:	4618      	mov	r0, r3
    62ec:	f004 fa54 	bl	a798 <mp_emit_bc_subscr>
    } else if (MP_PARSE_NODE_IS_STRUCT_KIND(pn, PN_atom_expr_normal)) {
    62f0:	e0a1      	b.n	6436 <c_del_stmt+0x252>
            } else if (MP_PARSE_NODE_STRUCT_KIND(pns1) == PN_trailer_period) {
    62f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    62f4:	685b      	ldr	r3, [r3, #4]
    62f6:	b2db      	uxtb	r3, r3
    62f8:	2b2f      	cmp	r3, #47	; 0x2f
    62fa:	f040 809d 	bne.w	6438 <c_del_stmt+0x254>
                assert(MP_PARSE_NODE_IS_ID(pns1->nodes[0]));
    62fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    6300:	689b      	ldr	r3, [r3, #8]
    6302:	f003 030f 	and.w	r3, r3, #15
    6306:	2b02      	cmp	r3, #2
    6308:	d006      	beq.n	6318 <c_del_stmt+0x134>
    630a:	4b55      	ldr	r3, [pc, #340]	; (6460 <c_del_stmt+0x27c>)
    630c:	4a52      	ldr	r2, [pc, #328]	; (6458 <c_del_stmt+0x274>)
    630e:	f240 318b 	movw	r1, #907	; 0x38b
    6312:	4852      	ldr	r0, [pc, #328]	; (645c <c_del_stmt+0x278>)
    6314:	f016 fde4 	bl	1cee0 <__assert_func>
                EMIT_ARG(attr, MP_PARSE_NODE_LEAF_ARG(pns1->nodes[0]), MP_EMIT_ATTR_DELETE);
    6318:	687b      	ldr	r3, [r7, #4]
    631a:	6a98      	ldr	r0, [r3, #40]	; 0x28
    631c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    631e:	689b      	ldr	r3, [r3, #8]
    6320:	091b      	lsrs	r3, r3, #4
    6322:	2202      	movs	r2, #2
    6324:	4619      	mov	r1, r3
    6326:	f004 fa5f 	bl	a7e8 <mp_emit_bc_attr>
    } else if (MP_PARSE_NODE_IS_STRUCT_KIND(pn, PN_atom_expr_normal)) {
    632a:	e084      	b.n	6436 <c_del_stmt+0x252>
    } else if (MP_PARSE_NODE_IS_STRUCT_KIND(pn, PN_atom_paren)) {
    632c:	683b      	ldr	r3, [r7, #0]
    632e:	2b00      	cmp	r3, #0
    6330:	f000 8087 	beq.w	6442 <c_del_stmt+0x25e>
    6334:	683b      	ldr	r3, [r7, #0]
    6336:	f003 0303 	and.w	r3, r3, #3
    633a:	2b00      	cmp	r3, #0
    633c:	f040 8081 	bne.w	6442 <c_del_stmt+0x25e>
    6340:	683b      	ldr	r3, [r7, #0]
    6342:	685b      	ldr	r3, [r3, #4]
    6344:	b2db      	uxtb	r3, r3
    6346:	2b2a      	cmp	r3, #42	; 0x2a
    6348:	d17b      	bne.n	6442 <c_del_stmt+0x25e>
        pn = ((mp_parse_node_struct_t*)pn)->nodes[0];
    634a:	683b      	ldr	r3, [r7, #0]
    634c:	689b      	ldr	r3, [r3, #8]
    634e:	603b      	str	r3, [r7, #0]
        if (MP_PARSE_NODE_IS_NULL(pn)) {
    6350:	683b      	ldr	r3, [r7, #0]
    6352:	2b00      	cmp	r3, #0
    6354:	d072      	beq.n	643c <c_del_stmt+0x258>
            assert(MP_PARSE_NODE_IS_STRUCT_KIND(pn, PN_testlist_comp));
    6356:	683b      	ldr	r3, [r7, #0]
    6358:	2b00      	cmp	r3, #0
    635a:	d009      	beq.n	6370 <c_del_stmt+0x18c>
    635c:	683b      	ldr	r3, [r7, #0]
    635e:	f003 0303 	and.w	r3, r3, #3
    6362:	2b00      	cmp	r3, #0
    6364:	d104      	bne.n	6370 <c_del_stmt+0x18c>
    6366:	683b      	ldr	r3, [r7, #0]
    6368:	685b      	ldr	r3, [r3, #4]
    636a:	b2db      	uxtb	r3, r3
    636c:	2b8a      	cmp	r3, #138	; 0x8a
    636e:	d006      	beq.n	637e <c_del_stmt+0x19a>
    6370:	4b3c      	ldr	r3, [pc, #240]	; (6464 <c_del_stmt+0x280>)
    6372:	4a39      	ldr	r2, [pc, #228]	; (6458 <c_del_stmt+0x274>)
    6374:	f240 3199 	movw	r1, #921	; 0x399
    6378:	4838      	ldr	r0, [pc, #224]	; (645c <c_del_stmt+0x278>)
    637a:	f016 fdb1 	bl	1cee0 <__assert_func>
            mp_parse_node_struct_t *pns = (mp_parse_node_struct_t*)pn;
    637e:	683b      	ldr	r3, [r7, #0]
    6380:	613b      	str	r3, [r7, #16]
            if (MP_PARSE_NODE_IS_STRUCT(pns->nodes[1])) {
    6382:	693b      	ldr	r3, [r7, #16]
    6384:	68db      	ldr	r3, [r3, #12]
    6386:	2b00      	cmp	r3, #0
    6388:	d048      	beq.n	641c <c_del_stmt+0x238>
    638a:	693b      	ldr	r3, [r7, #16]
    638c:	68db      	ldr	r3, [r3, #12]
    638e:	f003 0303 	and.w	r3, r3, #3
    6392:	2b00      	cmp	r3, #0
    6394:	d142      	bne.n	641c <c_del_stmt+0x238>
                mp_parse_node_struct_t *pns1 = (mp_parse_node_struct_t*)pns->nodes[1];
    6396:	693b      	ldr	r3, [r7, #16]
    6398:	68db      	ldr	r3, [r3, #12]
    639a:	60fb      	str	r3, [r7, #12]
                if (MP_PARSE_NODE_STRUCT_KIND(pns1) == PN_testlist_comp_3b) {
    639c:	68fb      	ldr	r3, [r7, #12]
    639e:	685b      	ldr	r3, [r3, #4]
    63a0:	b2db      	uxtb	r3, r3
    63a2:	2b8d      	cmp	r3, #141	; 0x8d
    63a4:	d111      	bne.n	63ca <c_del_stmt+0x1e6>
                    assert(MP_PARSE_NODE_IS_NULL(pns1->nodes[0]));
    63a6:	68fb      	ldr	r3, [r7, #12]
    63a8:	689b      	ldr	r3, [r3, #8]
    63aa:	2b00      	cmp	r3, #0
    63ac:	d006      	beq.n	63bc <c_del_stmt+0x1d8>
    63ae:	4b2e      	ldr	r3, [pc, #184]	; (6468 <c_del_stmt+0x284>)
    63b0:	4a29      	ldr	r2, [pc, #164]	; (6458 <c_del_stmt+0x274>)
    63b2:	f240 31a1 	movw	r1, #929	; 0x3a1
    63b6:	4829      	ldr	r0, [pc, #164]	; (645c <c_del_stmt+0x278>)
    63b8:	f016 fd92 	bl	1cee0 <__assert_func>
                    c_del_stmt(comp, pns->nodes[0]);
    63bc:	693b      	ldr	r3, [r7, #16]
    63be:	689b      	ldr	r3, [r3, #8]
    63c0:	4619      	mov	r1, r3
    63c2:	6878      	ldr	r0, [r7, #4]
    63c4:	f7ff ff0e 	bl	61e4 <c_del_stmt>
            if (MP_PARSE_NODE_IS_STRUCT(pns->nodes[1])) {
    63c8:	e035      	b.n	6436 <c_del_stmt+0x252>
                } else if (MP_PARSE_NODE_STRUCT_KIND(pns1) == PN_testlist_comp_3c) {
    63ca:	68fb      	ldr	r3, [r7, #12]
    63cc:	685b      	ldr	r3, [r3, #4]
    63ce:	b2db      	uxtb	r3, r3
    63d0:	2b8e      	cmp	r3, #142	; 0x8e
    63d2:	d11d      	bne.n	6410 <c_del_stmt+0x22c>
                    int n = MP_PARSE_NODE_STRUCT_NUM_NODES(pns1);
    63d4:	68fb      	ldr	r3, [r7, #12]
    63d6:	685b      	ldr	r3, [r3, #4]
    63d8:	0a1b      	lsrs	r3, r3, #8
    63da:	60bb      	str	r3, [r7, #8]
                    c_del_stmt(comp, pns->nodes[0]);
    63dc:	693b      	ldr	r3, [r7, #16]
    63de:	689b      	ldr	r3, [r3, #8]
    63e0:	4619      	mov	r1, r3
    63e2:	6878      	ldr	r0, [r7, #4]
    63e4:	f7ff fefe 	bl	61e4 <c_del_stmt>
                    for (int i = 0; i < n; i++) {
    63e8:	2300      	movs	r3, #0
    63ea:	61fb      	str	r3, [r7, #28]
    63ec:	e00b      	b.n	6406 <c_del_stmt+0x222>
                        c_del_stmt(comp, pns1->nodes[i]);
    63ee:	68fb      	ldr	r3, [r7, #12]
    63f0:	69fa      	ldr	r2, [r7, #28]
    63f2:	3202      	adds	r2, #2
    63f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    63f8:	4619      	mov	r1, r3
    63fa:	6878      	ldr	r0, [r7, #4]
    63fc:	f7ff fef2 	bl	61e4 <c_del_stmt>
                    for (int i = 0; i < n; i++) {
    6400:	69fb      	ldr	r3, [r7, #28]
    6402:	3301      	adds	r3, #1
    6404:	61fb      	str	r3, [r7, #28]
    6406:	69fa      	ldr	r2, [r7, #28]
    6408:	68bb      	ldr	r3, [r7, #8]
    640a:	429a      	cmp	r2, r3
    640c:	dbef      	blt.n	63ee <c_del_stmt+0x20a>
            if (MP_PARSE_NODE_IS_STRUCT(pns->nodes[1])) {
    640e:	e012      	b.n	6436 <c_del_stmt+0x252>
                } else if (MP_PARSE_NODE_STRUCT_KIND(pns1) == PN_comp_for) {
    6410:	68fb      	ldr	r3, [r7, #12]
    6412:	685b      	ldr	r3, [r3, #4]
    6414:	b2db      	uxtb	r3, r3
    6416:	2b9f      	cmp	r3, #159	; 0x9f
    6418:	d012      	beq.n	6440 <c_del_stmt+0x25c>
                    goto sequence_with_2_items;
    641a:	bf00      	nop
                c_del_stmt(comp, pns->nodes[0]);
    641c:	693b      	ldr	r3, [r7, #16]
    641e:	689b      	ldr	r3, [r3, #8]
    6420:	4619      	mov	r1, r3
    6422:	6878      	ldr	r0, [r7, #4]
    6424:	f7ff fede 	bl	61e4 <c_del_stmt>
                c_del_stmt(comp, pns->nodes[1]);
    6428:	693b      	ldr	r3, [r7, #16]
    642a:	68db      	ldr	r3, [r3, #12]
    642c:	4619      	mov	r1, r3
    642e:	6878      	ldr	r0, [r7, #4]
    6430:	f7ff fed8 	bl	61e4 <c_del_stmt>
    return;
    6434:	e00a      	b.n	644c <c_del_stmt+0x268>
    6436:	e009      	b.n	644c <c_del_stmt+0x268>
                goto cannot_delete;
    6438:	bf00      	nop
    643a:	e002      	b.n	6442 <c_del_stmt+0x25e>
            goto cannot_delete;
    643c:	bf00      	nop
    643e:	e000      	b.n	6442 <c_del_stmt+0x25e>
                    goto cannot_delete;
    6440:	bf00      	nop

cannot_delete:
    compile_syntax_error(comp, (mp_parse_node_t)pn, "can't delete expression");
    6442:	4a0a      	ldr	r2, [pc, #40]	; (646c <c_del_stmt+0x288>)
    6444:	6839      	ldr	r1, [r7, #0]
    6446:	6878      	ldr	r0, [r7, #4]
    6448:	f7fe fe39 	bl	50be <compile_syntax_error>
}
    644c:	3728      	adds	r7, #40	; 0x28
    644e:	46bd      	mov	sp, r7
    6450:	bd80      	pop	{r7, pc}
    6452:	bf00      	nop
    6454:	00021cb4 	.word	0x00021cb4
    6458:	00022868 	.word	0x00022868
    645c:	00021c60 	.word	0x00021c60
    6460:	00021ce0 	.word	0x00021ce0
    6464:	00021ec4 	.word	0x00021ec4
    6468:	00021ef8 	.word	0x00021ef8
    646c:	00021f20 	.word	0x00021f20

00006470 <compile_del_stmt>:

STATIC void compile_del_stmt(compiler_t *comp, mp_parse_node_struct_t *pns) {
    6470:	b580      	push	{r7, lr}
    6472:	b082      	sub	sp, #8
    6474:	af00      	add	r7, sp, #0
    6476:	6078      	str	r0, [r7, #4]
    6478:	6039      	str	r1, [r7, #0]
    apply_to_single_or_list(comp, pns->nodes[0], PN_exprlist, c_del_stmt);
    647a:	683b      	ldr	r3, [r7, #0]
    647c:	6899      	ldr	r1, [r3, #8]
    647e:	4b04      	ldr	r3, [pc, #16]	; (6490 <compile_del_stmt+0x20>)
    6480:	2290      	movs	r2, #144	; 0x90
    6482:	6878      	ldr	r0, [r7, #4]
    6484:	f7fe febd 	bl	5202 <apply_to_single_or_list>
}
    6488:	bf00      	nop
    648a:	3708      	adds	r7, #8
    648c:	46bd      	mov	sp, r7
    648e:	bd80      	pop	{r7, pc}
    6490:	000061e5 	.word	0x000061e5

00006494 <compile_break_cont_stmt>:

STATIC void compile_break_cont_stmt(compiler_t *comp, mp_parse_node_struct_t *pns) {
    6494:	b580      	push	{r7, lr}
    6496:	b084      	sub	sp, #16
    6498:	af00      	add	r7, sp, #0
    649a:	6078      	str	r0, [r7, #4]
    649c:	6039      	str	r1, [r7, #0]
    uint16_t label;
    const char *error_msg;
    if (MP_PARSE_NODE_STRUCT_KIND(pns) == PN_break_stmt) {
    649e:	683b      	ldr	r3, [r7, #0]
    64a0:	685b      	ldr	r3, [r3, #4]
    64a2:	b2db      	uxtb	r3, r3
    64a4:	2b09      	cmp	r3, #9
    64a6:	d105      	bne.n	64b4 <compile_break_cont_stmt+0x20>
        label = comp->break_label;
    64a8:	687b      	ldr	r3, [r7, #4]
    64aa:	8b1b      	ldrh	r3, [r3, #24]
    64ac:	81fb      	strh	r3, [r7, #14]
        error_msg = "'break' outside loop";
    64ae:	4b18      	ldr	r3, [pc, #96]	; (6510 <compile_break_cont_stmt+0x7c>)
    64b0:	60bb      	str	r3, [r7, #8]
    64b2:	e004      	b.n	64be <compile_break_cont_stmt+0x2a>
    } else {
        label = comp->continue_label;
    64b4:	687b      	ldr	r3, [r7, #4]
    64b6:	8b5b      	ldrh	r3, [r3, #26]
    64b8:	81fb      	strh	r3, [r7, #14]
        error_msg = "'continue' outside loop";
    64ba:	4b16      	ldr	r3, [pc, #88]	; (6514 <compile_break_cont_stmt+0x80>)
    64bc:	60bb      	str	r3, [r7, #8]
    }
    if (label == INVALID_LABEL) {
    64be:	89fb      	ldrh	r3, [r7, #14]
    64c0:	f64f 72ff 	movw	r2, #65535	; 0xffff
    64c4:	4293      	cmp	r3, r2
    64c6:	d105      	bne.n	64d4 <compile_break_cont_stmt+0x40>
        compile_syntax_error(comp, (mp_parse_node_t)pns, error_msg);
    64c8:	683b      	ldr	r3, [r7, #0]
    64ca:	68ba      	ldr	r2, [r7, #8]
    64cc:	4619      	mov	r1, r3
    64ce:	6878      	ldr	r0, [r7, #4]
    64d0:	f7fe fdf5 	bl	50be <compile_syntax_error>
    }
    assert(comp->cur_except_level >= comp->break_continue_except_level);
    64d4:	687b      	ldr	r3, [r7, #4]
    64d6:	8b9a      	ldrh	r2, [r3, #28]
    64d8:	687b      	ldr	r3, [r7, #4]
    64da:	8bdb      	ldrh	r3, [r3, #30]
    64dc:	429a      	cmp	r2, r3
    64de:	d206      	bcs.n	64ee <compile_break_cont_stmt+0x5a>
    64e0:	4b0d      	ldr	r3, [pc, #52]	; (6518 <compile_break_cont_stmt+0x84>)
    64e2:	4a0e      	ldr	r2, [pc, #56]	; (651c <compile_break_cont_stmt+0x88>)
    64e4:	f240 31d3 	movw	r1, #979	; 0x3d3
    64e8:	480d      	ldr	r0, [pc, #52]	; (6520 <compile_break_cont_stmt+0x8c>)
    64ea:	f016 fcf9 	bl	1cee0 <__assert_func>
    EMIT_ARG(unwind_jump, label, comp->cur_except_level - comp->break_continue_except_level);
    64ee:	687b      	ldr	r3, [r7, #4]
    64f0:	6a98      	ldr	r0, [r3, #40]	; 0x28
    64f2:	89f9      	ldrh	r1, [r7, #14]
    64f4:	687b      	ldr	r3, [r7, #4]
    64f6:	8b9b      	ldrh	r3, [r3, #28]
    64f8:	461a      	mov	r2, r3
    64fa:	687b      	ldr	r3, [r7, #4]
    64fc:	8bdb      	ldrh	r3, [r3, #30]
    64fe:	1ad3      	subs	r3, r2, r3
    6500:	461a      	mov	r2, r3
    6502:	f004 faa5 	bl	aa50 <mp_emit_bc_unwind_jump>
}
    6506:	bf00      	nop
    6508:	3710      	adds	r7, #16
    650a:	46bd      	mov	sp, r7
    650c:	bd80      	pop	{r7, pc}
    650e:	bf00      	nop
    6510:	00021f38 	.word	0x00021f38
    6514:	00021f50 	.word	0x00021f50
    6518:	00021f68 	.word	0x00021f68
    651c:	00022874 	.word	0x00022874
    6520:	00021c60 	.word	0x00021c60

00006524 <compile_return_stmt>:

STATIC void compile_return_stmt(compiler_t *comp, mp_parse_node_struct_t *pns) {
    6524:	b580      	push	{r7, lr}
    6526:	b082      	sub	sp, #8
    6528:	af00      	add	r7, sp, #0
    652a:	6078      	str	r0, [r7, #4]
    652c:	6039      	str	r1, [r7, #0]
    if (comp->scope_cur->kind != SCOPE_FUNCTION) {
    652e:	687b      	ldr	r3, [r7, #4]
    6530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    6532:	681b      	ldr	r3, [r3, #0]
    6534:	2b07      	cmp	r3, #7
    6536:	d006      	beq.n	6546 <compile_return_stmt+0x22>
        compile_syntax_error(comp, (mp_parse_node_t)pns, "'return' outside function");
    6538:	683b      	ldr	r3, [r7, #0]
    653a:	4a0f      	ldr	r2, [pc, #60]	; (6578 <compile_return_stmt+0x54>)
    653c:	4619      	mov	r1, r3
    653e:	6878      	ldr	r0, [r7, #4]
    6540:	f7fe fdbd 	bl	50be <compile_syntax_error>
        return;
    6544:	e015      	b.n	6572 <compile_return_stmt+0x4e>
    }
    if (MP_PARSE_NODE_IS_NULL(pns->nodes[0])) {
    6546:	683b      	ldr	r3, [r7, #0]
    6548:	689b      	ldr	r3, [r3, #8]
    654a:	2b00      	cmp	r3, #0
    654c:	d106      	bne.n	655c <compile_return_stmt+0x38>
        // no argument to 'return', so return None
        EMIT_ARG(load_const_tok, MP_TOKEN_KW_NONE);
    654e:	687b      	ldr	r3, [r7, #4]
    6550:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6552:	210e      	movs	r1, #14
    6554:	4618      	mov	r0, r3
    6556:	f004 f821 	bl	a59c <mp_emit_bc_load_const_tok>
    655a:	e005      	b.n	6568 <compile_return_stmt+0x44>
        compile_node(comp, pns_test_if_expr->nodes[0]); // success value
        EMIT(return_value);
        EMIT_ARG(label_assign, l_fail);
        compile_node(comp, pns_test_if_else->nodes[1]); // failure value
    } else {
        compile_node(comp, pns->nodes[0]);
    655c:	683b      	ldr	r3, [r7, #0]
    655e:	689b      	ldr	r3, [r3, #8]
    6560:	4619      	mov	r1, r3
    6562:	6878      	ldr	r0, [r7, #4]
    6564:	f002 fb87 	bl	8c76 <compile_node>
    }
    EMIT(return_value);
    6568:	687b      	ldr	r3, [r7, #4]
    656a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    656c:	4618      	mov	r0, r3
    656e:	f004 fd0c 	bl	af8a <mp_emit_bc_return_value>
}
    6572:	3708      	adds	r7, #8
    6574:	46bd      	mov	sp, r7
    6576:	bd80      	pop	{r7, pc}
    6578:	00021fa4 	.word	0x00021fa4

0000657c <compile_yield_stmt>:

STATIC void compile_yield_stmt(compiler_t *comp, mp_parse_node_struct_t *pns) {
    657c:	b580      	push	{r7, lr}
    657e:	b082      	sub	sp, #8
    6580:	af00      	add	r7, sp, #0
    6582:	6078      	str	r0, [r7, #4]
    6584:	6039      	str	r1, [r7, #0]
    compile_node(comp, pns->nodes[0]);
    6586:	683b      	ldr	r3, [r7, #0]
    6588:	689b      	ldr	r3, [r3, #8]
    658a:	4619      	mov	r1, r3
    658c:	6878      	ldr	r0, [r7, #4]
    658e:	f002 fb72 	bl	8c76 <compile_node>
    EMIT(pop_top);
    6592:	687b      	ldr	r3, [r7, #4]
    6594:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6596:	4618      	mov	r0, r3
    6598:	f004 f9db 	bl	a952 <mp_emit_bc_pop_top>
}
    659c:	bf00      	nop
    659e:	3708      	adds	r7, #8
    65a0:	46bd      	mov	sp, r7
    65a2:	bd80      	pop	{r7, pc}

000065a4 <compile_raise_stmt>:

STATIC void compile_raise_stmt(compiler_t *comp, mp_parse_node_struct_t *pns) {
    65a4:	b580      	push	{r7, lr}
    65a6:	b082      	sub	sp, #8
    65a8:	af00      	add	r7, sp, #0
    65aa:	6078      	str	r0, [r7, #4]
    65ac:	6039      	str	r1, [r7, #0]
    if (MP_PARSE_NODE_IS_NULL(pns->nodes[0])) {
    65ae:	683b      	ldr	r3, [r7, #0]
    65b0:	689b      	ldr	r3, [r3, #8]
    65b2:	2b00      	cmp	r3, #0
    65b4:	d106      	bne.n	65c4 <compile_raise_stmt+0x20>
        // raise
        EMIT_ARG(raise_varargs, 0);
    65b6:	687b      	ldr	r3, [r7, #4]
    65b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    65ba:	2100      	movs	r1, #0
    65bc:	4618      	mov	r0, r3
    65be:	f004 fcf8 	bl	afb2 <mp_emit_bc_raise_varargs>
    } else {
        // raise x
        compile_node(comp, pns->nodes[0]);
        EMIT_ARG(raise_varargs, 1);
    }
}
    65c2:	e031      	b.n	6628 <compile_raise_stmt+0x84>
    } else if (MP_PARSE_NODE_IS_STRUCT_KIND(pns->nodes[0], PN_raise_stmt_arg)) {
    65c4:	683b      	ldr	r3, [r7, #0]
    65c6:	689b      	ldr	r3, [r3, #8]
    65c8:	2b00      	cmp	r3, #0
    65ca:	d021      	beq.n	6610 <compile_raise_stmt+0x6c>
    65cc:	683b      	ldr	r3, [r7, #0]
    65ce:	689b      	ldr	r3, [r3, #8]
    65d0:	f003 0303 	and.w	r3, r3, #3
    65d4:	2b00      	cmp	r3, #0
    65d6:	d11b      	bne.n	6610 <compile_raise_stmt+0x6c>
    65d8:	683b      	ldr	r3, [r7, #0]
    65da:	689b      	ldr	r3, [r3, #8]
    65dc:	685b      	ldr	r3, [r3, #4]
    65de:	b2db      	uxtb	r3, r3
    65e0:	2b58      	cmp	r3, #88	; 0x58
    65e2:	d115      	bne.n	6610 <compile_raise_stmt+0x6c>
        pns = (mp_parse_node_struct_t*)pns->nodes[0];
    65e4:	683b      	ldr	r3, [r7, #0]
    65e6:	689b      	ldr	r3, [r3, #8]
    65e8:	603b      	str	r3, [r7, #0]
        compile_node(comp, pns->nodes[0]);
    65ea:	683b      	ldr	r3, [r7, #0]
    65ec:	689b      	ldr	r3, [r3, #8]
    65ee:	4619      	mov	r1, r3
    65f0:	6878      	ldr	r0, [r7, #4]
    65f2:	f002 fb40 	bl	8c76 <compile_node>
        compile_node(comp, pns->nodes[1]);
    65f6:	683b      	ldr	r3, [r7, #0]
    65f8:	68db      	ldr	r3, [r3, #12]
    65fa:	4619      	mov	r1, r3
    65fc:	6878      	ldr	r0, [r7, #4]
    65fe:	f002 fb3a 	bl	8c76 <compile_node>
        EMIT_ARG(raise_varargs, 2);
    6602:	687b      	ldr	r3, [r7, #4]
    6604:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6606:	2102      	movs	r1, #2
    6608:	4618      	mov	r0, r3
    660a:	f004 fcd2 	bl	afb2 <mp_emit_bc_raise_varargs>
}
    660e:	e00b      	b.n	6628 <compile_raise_stmt+0x84>
        compile_node(comp, pns->nodes[0]);
    6610:	683b      	ldr	r3, [r7, #0]
    6612:	689b      	ldr	r3, [r3, #8]
    6614:	4619      	mov	r1, r3
    6616:	6878      	ldr	r0, [r7, #4]
    6618:	f002 fb2d 	bl	8c76 <compile_node>
        EMIT_ARG(raise_varargs, 1);
    661c:	687b      	ldr	r3, [r7, #4]
    661e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6620:	2101      	movs	r1, #1
    6622:	4618      	mov	r0, r3
    6624:	f004 fcc5 	bl	afb2 <mp_emit_bc_raise_varargs>
}
    6628:	bf00      	nop
    662a:	3708      	adds	r7, #8
    662c:	46bd      	mov	sp, r7
    662e:	bd80      	pop	{r7, pc}

00006630 <do_import_name>:

// q_base holds the base of the name
// eg   a -> q_base=a
//      a.b.c -> q_base=a
STATIC void do_import_name(compiler_t *comp, mp_parse_node_t pn, qstr *q_base) {
    6630:	b580      	push	{r7, lr}
    6632:	b092      	sub	sp, #72	; 0x48
    6634:	af00      	add	r7, sp, #0
    6636:	60f8      	str	r0, [r7, #12]
    6638:	60b9      	str	r1, [r7, #8]
    663a:	607a      	str	r2, [r7, #4]
    bool is_as = false;
    663c:	2300      	movs	r3, #0
    663e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if (MP_PARSE_NODE_IS_STRUCT_KIND(pn, PN_dotted_as_name)) {
    6642:	68bb      	ldr	r3, [r7, #8]
    6644:	2b00      	cmp	r3, #0
    6646:	d016      	beq.n	6676 <do_import_name+0x46>
    6648:	68bb      	ldr	r3, [r7, #8]
    664a:	f003 0303 	and.w	r3, r3, #3
    664e:	2b00      	cmp	r3, #0
    6650:	d111      	bne.n	6676 <do_import_name+0x46>
    6652:	68bb      	ldr	r3, [r7, #8]
    6654:	685b      	ldr	r3, [r3, #4]
    6656:	b2db      	uxtb	r3, r3
    6658:	2b62      	cmp	r3, #98	; 0x62
    665a:	d10c      	bne.n	6676 <do_import_name+0x46>
        mp_parse_node_struct_t *pns = (mp_parse_node_struct_t*)pn;
    665c:	68bb      	ldr	r3, [r7, #8]
    665e:	62fb      	str	r3, [r7, #44]	; 0x2c
        // a name of the form x as y; unwrap it
        *q_base = MP_PARSE_NODE_LEAF_ARG(pns->nodes[1]);
    6660:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    6662:	68db      	ldr	r3, [r3, #12]
    6664:	091a      	lsrs	r2, r3, #4
    6666:	687b      	ldr	r3, [r7, #4]
    6668:	601a      	str	r2, [r3, #0]
        pn = pns->nodes[0];
    666a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    666c:	689b      	ldr	r3, [r3, #8]
    666e:	60bb      	str	r3, [r7, #8]
        is_as = true;
    6670:	2301      	movs	r3, #1
    6672:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    if (MP_PARSE_NODE_IS_NULL(pn)) {
    6676:	68bb      	ldr	r3, [r7, #8]
    6678:	2b00      	cmp	r3, #0
    667a:	d10a      	bne.n	6692 <do_import_name+0x62>
        // empty name (eg, from . import x)
        *q_base = MP_QSTR_;
    667c:	687b      	ldr	r3, [r7, #4]
    667e:	2201      	movs	r2, #1
    6680:	601a      	str	r2, [r3, #0]
        EMIT_ARG(import, MP_QSTR_, MP_EMIT_IMPORT_NAME); // import the empty string
    6682:	68fb      	ldr	r3, [r7, #12]
    6684:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6686:	2200      	movs	r2, #0
    6688:	2101      	movs	r1, #1
    668a:	4618      	mov	r0, r3
    668c:	f003 ff5e 	bl	a54c <mp_emit_bc_import>
                    EMIT_ARG(attr, MP_PARSE_NODE_LEAF_ARG(pns->nodes[i]), MP_EMIT_ATTR_LOAD);
                }
            }
        }
    }
}
    6690:	e0ba      	b.n	6808 <do_import_name+0x1d8>
    } else if (MP_PARSE_NODE_IS_ID(pn)) {
    6692:	68bb      	ldr	r3, [r7, #8]
    6694:	f003 030f 	and.w	r3, r3, #15
    6698:	2b02      	cmp	r3, #2
    669a:	d114      	bne.n	66c6 <do_import_name+0x96>
        qstr q_full = MP_PARSE_NODE_LEAF_ARG(pn);
    669c:	68bb      	ldr	r3, [r7, #8]
    669e:	091b      	lsrs	r3, r3, #4
    66a0:	62bb      	str	r3, [r7, #40]	; 0x28
        if (!is_as) {
    66a2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
    66a6:	f083 0301 	eor.w	r3, r3, #1
    66aa:	b2db      	uxtb	r3, r3
    66ac:	2b00      	cmp	r3, #0
    66ae:	d002      	beq.n	66b6 <do_import_name+0x86>
            *q_base = q_full;
    66b0:	687b      	ldr	r3, [r7, #4]
    66b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
    66b4:	601a      	str	r2, [r3, #0]
        EMIT_ARG(import, q_full, MP_EMIT_IMPORT_NAME);
    66b6:	68fb      	ldr	r3, [r7, #12]
    66b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    66ba:	2200      	movs	r2, #0
    66bc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
    66be:	4618      	mov	r0, r3
    66c0:	f003 ff44 	bl	a54c <mp_emit_bc_import>
}
    66c4:	e0a0      	b.n	6808 <do_import_name+0x1d8>
        assert(MP_PARSE_NODE_IS_STRUCT_KIND(pn, PN_dotted_name)); // should be
    66c6:	68bb      	ldr	r3, [r7, #8]
    66c8:	2b00      	cmp	r3, #0
    66ca:	d009      	beq.n	66e0 <do_import_name+0xb0>
    66cc:	68bb      	ldr	r3, [r7, #8]
    66ce:	f003 0303 	and.w	r3, r3, #3
    66d2:	2b00      	cmp	r3, #0
    66d4:	d104      	bne.n	66e0 <do_import_name+0xb0>
    66d6:	68bb      	ldr	r3, [r7, #8]
    66d8:	685b      	ldr	r3, [r3, #4]
    66da:	b2db      	uxtb	r3, r3
    66dc:	2b66      	cmp	r3, #102	; 0x66
    66de:	d006      	beq.n	66ee <do_import_name+0xbe>
    66e0:	4b4b      	ldr	r3, [pc, #300]	; (6810 <do_import_name+0x1e0>)
    66e2:	4a4c      	ldr	r2, [pc, #304]	; (6814 <do_import_name+0x1e4>)
    66e4:	f240 411f 	movw	r1, #1055	; 0x41f
    66e8:	484b      	ldr	r0, [pc, #300]	; (6818 <do_import_name+0x1e8>)
    66ea:	f016 fbf9 	bl	1cee0 <__assert_func>
        mp_parse_node_struct_t *pns = (mp_parse_node_struct_t*)pn;
    66ee:	68bb      	ldr	r3, [r7, #8]
    66f0:	627b      	str	r3, [r7, #36]	; 0x24
            if (!is_as) {
    66f2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
    66f6:	f083 0301 	eor.w	r3, r3, #1
    66fa:	b2db      	uxtb	r3, r3
    66fc:	2b00      	cmp	r3, #0
    66fe:	d004      	beq.n	670a <do_import_name+0xda>
                *q_base = MP_PARSE_NODE_LEAF_ARG(pns->nodes[0]);
    6700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    6702:	689b      	ldr	r3, [r3, #8]
    6704:	091a      	lsrs	r2, r3, #4
    6706:	687b      	ldr	r3, [r7, #4]
    6708:	601a      	str	r2, [r3, #0]
            int n = MP_PARSE_NODE_STRUCT_NUM_NODES(pns);
    670a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    670c:	685b      	ldr	r3, [r3, #4]
    670e:	0a1b      	lsrs	r3, r3, #8
    6710:	623b      	str	r3, [r7, #32]
            int len = n - 1;
    6712:	6a3b      	ldr	r3, [r7, #32]
    6714:	3b01      	subs	r3, #1
    6716:	643b      	str	r3, [r7, #64]	; 0x40
            for (int i = 0; i < n; i++) {
    6718:	2300      	movs	r3, #0
    671a:	63fb      	str	r3, [r7, #60]	; 0x3c
    671c:	e00f      	b.n	673e <do_import_name+0x10e>
                len += qstr_len(MP_PARSE_NODE_LEAF_ARG(pns->nodes[i]));
    671e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    6720:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    6722:	3202      	adds	r2, #2
    6724:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    6728:	091b      	lsrs	r3, r3, #4
    672a:	4618      	mov	r0, r3
    672c:	f7fa fe41 	bl	13b2 <qstr_len>
    6730:	4602      	mov	r2, r0
    6732:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    6734:	4413      	add	r3, r2
    6736:	643b      	str	r3, [r7, #64]	; 0x40
            for (int i = 0; i < n; i++) {
    6738:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    673a:	3301      	adds	r3, #1
    673c:	63fb      	str	r3, [r7, #60]	; 0x3c
    673e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    6740:	6a3b      	ldr	r3, [r7, #32]
    6742:	429a      	cmp	r2, r3
    6744:	dbeb      	blt.n	671e <do_import_name+0xee>
            char *q_ptr = mp_local_alloc(len);
    6746:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    6748:	3307      	adds	r3, #7
    674a:	3307      	adds	r3, #7
    674c:	08db      	lsrs	r3, r3, #3
    674e:	00db      	lsls	r3, r3, #3
    6750:	ebad 0d03 	sub.w	sp, sp, r3
    6754:	466b      	mov	r3, sp
    6756:	3307      	adds	r3, #7
    6758:	08db      	lsrs	r3, r3, #3
    675a:	00db      	lsls	r3, r3, #3
    675c:	61fb      	str	r3, [r7, #28]
            char *str_dest = q_ptr;
    675e:	69fb      	ldr	r3, [r7, #28]
    6760:	63bb      	str	r3, [r7, #56]	; 0x38
            for (int i = 0; i < n; i++) {
    6762:	2300      	movs	r3, #0
    6764:	637b      	str	r3, [r7, #52]	; 0x34
    6766:	e021      	b.n	67ac <do_import_name+0x17c>
                if (i > 0) {
    6768:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    676a:	2b00      	cmp	r3, #0
    676c:	dd04      	ble.n	6778 <do_import_name+0x148>
                    *str_dest++ = '.';
    676e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    6770:	1c5a      	adds	r2, r3, #1
    6772:	63ba      	str	r2, [r7, #56]	; 0x38
    6774:	222e      	movs	r2, #46	; 0x2e
    6776:	701a      	strb	r2, [r3, #0]
                const byte *str_src = qstr_data(MP_PARSE_NODE_LEAF_ARG(pns->nodes[i]), &str_src_len);
    6778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    677a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    677c:	3202      	adds	r2, #2
    677e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    6782:	091b      	lsrs	r3, r3, #4
    6784:	f107 0210 	add.w	r2, r7, #16
    6788:	4611      	mov	r1, r2
    678a:	4618      	mov	r0, r3
    678c:	f7fa fe2e 	bl	13ec <qstr_data>
    6790:	61b8      	str	r0, [r7, #24]
                memcpy(str_dest, str_src, str_src_len);
    6792:	693b      	ldr	r3, [r7, #16]
    6794:	461a      	mov	r2, r3
    6796:	69b9      	ldr	r1, [r7, #24]
    6798:	6bb8      	ldr	r0, [r7, #56]	; 0x38
    679a:	f017 fec9 	bl	1e530 <memcpy>
                str_dest += str_src_len;
    679e:	693b      	ldr	r3, [r7, #16]
    67a0:	6bba      	ldr	r2, [r7, #56]	; 0x38
    67a2:	4413      	add	r3, r2
    67a4:	63bb      	str	r3, [r7, #56]	; 0x38
            for (int i = 0; i < n; i++) {
    67a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    67a8:	3301      	adds	r3, #1
    67aa:	637b      	str	r3, [r7, #52]	; 0x34
    67ac:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    67ae:	6a3b      	ldr	r3, [r7, #32]
    67b0:	429a      	cmp	r2, r3
    67b2:	dbd9      	blt.n	6768 <do_import_name+0x138>
            qstr q_full = qstr_from_strn(q_ptr, len);
    67b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    67b6:	4619      	mov	r1, r3
    67b8:	69f8      	ldr	r0, [r7, #28]
    67ba:	f7fa fd30 	bl	121e <qstr_from_strn>
    67be:	6178      	str	r0, [r7, #20]
            mp_local_free(q_ptr);
    67c0:	69f8      	ldr	r0, [r7, #28]
    67c2:	f7fe fc57 	bl	5074 <mp_local_free>
            EMIT_ARG(import, q_full, MP_EMIT_IMPORT_NAME);
    67c6:	68fb      	ldr	r3, [r7, #12]
    67c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    67ca:	2200      	movs	r2, #0
    67cc:	6979      	ldr	r1, [r7, #20]
    67ce:	4618      	mov	r0, r3
    67d0:	f003 febc 	bl	a54c <mp_emit_bc_import>
            if (is_as) {
    67d4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
    67d8:	2b00      	cmp	r3, #0
    67da:	d015      	beq.n	6808 <do_import_name+0x1d8>
                for (int i = 1; i < n; i++) {
    67dc:	2301      	movs	r3, #1
    67de:	633b      	str	r3, [r7, #48]	; 0x30
    67e0:	e00e      	b.n	6800 <do_import_name+0x1d0>
                    EMIT_ARG(attr, MP_PARSE_NODE_LEAF_ARG(pns->nodes[i]), MP_EMIT_ATTR_LOAD);
    67e2:	68fb      	ldr	r3, [r7, #12]
    67e4:	6a98      	ldr	r0, [r3, #40]	; 0x28
    67e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    67e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    67ea:	3202      	adds	r2, #2
    67ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    67f0:	091b      	lsrs	r3, r3, #4
    67f2:	2200      	movs	r2, #0
    67f4:	4619      	mov	r1, r3
    67f6:	f003 fff7 	bl	a7e8 <mp_emit_bc_attr>
                for (int i = 1; i < n; i++) {
    67fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    67fc:	3301      	adds	r3, #1
    67fe:	633b      	str	r3, [r7, #48]	; 0x30
    6800:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    6802:	6a3b      	ldr	r3, [r7, #32]
    6804:	429a      	cmp	r2, r3
    6806:	dbec      	blt.n	67e2 <do_import_name+0x1b2>
}
    6808:	bf00      	nop
    680a:	3748      	adds	r7, #72	; 0x48
    680c:	46bd      	mov	sp, r7
    680e:	bd80      	pop	{r7, pc}
    6810:	00021fc0 	.word	0x00021fc0
    6814:	0002288c 	.word	0x0002288c
    6818:	00021c60 	.word	0x00021c60

0000681c <compile_dotted_as_name>:

STATIC void compile_dotted_as_name(compiler_t *comp, mp_parse_node_t pn) {
    681c:	b580      	push	{r7, lr}
    681e:	b084      	sub	sp, #16
    6820:	af00      	add	r7, sp, #0
    6822:	6078      	str	r0, [r7, #4]
    6824:	6039      	str	r1, [r7, #0]
    EMIT_ARG(load_const_small_int, 0); // level 0 import
    6826:	687b      	ldr	r3, [r7, #4]
    6828:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    682a:	2100      	movs	r1, #0
    682c:	4618      	mov	r0, r3
    682e:	f003 fef1 	bl	a614 <mp_emit_bc_load_const_small_int>
    EMIT_ARG(load_const_tok, MP_TOKEN_KW_NONE); // not importing from anything
    6832:	687b      	ldr	r3, [r7, #4]
    6834:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6836:	210e      	movs	r1, #14
    6838:	4618      	mov	r0, r3
    683a:	f003 feaf 	bl	a59c <mp_emit_bc_load_const_tok>
    qstr q_base;
    do_import_name(comp, pn, &q_base);
    683e:	f107 030c 	add.w	r3, r7, #12
    6842:	461a      	mov	r2, r3
    6844:	6839      	ldr	r1, [r7, #0]
    6846:	6878      	ldr	r0, [r7, #4]
    6848:	f7ff fef2 	bl	6630 <do_import_name>
    compile_store_id(comp, q_base);
    684c:	68fb      	ldr	r3, [r7, #12]
    684e:	4619      	mov	r1, r3
    6850:	6878      	ldr	r0, [r7, #4]
    6852:	f7fe fd5d 	bl	5310 <compile_store_id>
}
    6856:	bf00      	nop
    6858:	3710      	adds	r7, #16
    685a:	46bd      	mov	sp, r7
    685c:	bd80      	pop	{r7, pc}

0000685e <compile_import_name>:

STATIC void compile_import_name(compiler_t *comp, mp_parse_node_struct_t *pns) {
    685e:	b580      	push	{r7, lr}
    6860:	b082      	sub	sp, #8
    6862:	af00      	add	r7, sp, #0
    6864:	6078      	str	r0, [r7, #4]
    6866:	6039      	str	r1, [r7, #0]
    apply_to_single_or_list(comp, pns->nodes[0], PN_dotted_as_names, compile_dotted_as_name);
    6868:	683b      	ldr	r3, [r7, #0]
    686a:	6899      	ldr	r1, [r3, #8]
    686c:	4b04      	ldr	r3, [pc, #16]	; (6880 <compile_import_name+0x22>)
    686e:	2265      	movs	r2, #101	; 0x65
    6870:	6878      	ldr	r0, [r7, #4]
    6872:	f7fe fcc6 	bl	5202 <apply_to_single_or_list>
}
    6876:	bf00      	nop
    6878:	3708      	adds	r7, #8
    687a:	46bd      	mov	sp, r7
    687c:	bd80      	pop	{r7, pc}
    687e:	bf00      	nop
    6880:	0000681d 	.word	0x0000681d

00006884 <compile_import_from>:

STATIC void compile_import_from(compiler_t *comp, mp_parse_node_struct_t *pns) {
    6884:	b580      	push	{r7, lr}
    6886:	b094      	sub	sp, #80	; 0x50
    6888:	af00      	add	r7, sp, #0
    688a:	6078      	str	r0, [r7, #4]
    688c:	6039      	str	r1, [r7, #0]
    mp_parse_node_t pn_import_source = pns->nodes[0];
    688e:	683b      	ldr	r3, [r7, #0]
    6890:	689b      	ldr	r3, [r3, #8]
    6892:	64fb      	str	r3, [r7, #76]	; 0x4c

    // extract the preceding .'s (if any) for a relative import, to compute the import level
    uint import_level = 0;
    6894:	2300      	movs	r3, #0
    6896:	64bb      	str	r3, [r7, #72]	; 0x48
    do {
        mp_parse_node_t pn_rel;
        if (MP_PARSE_NODE_IS_TOKEN(pn_import_source) || MP_PARSE_NODE_IS_STRUCT_KIND(pn_import_source, PN_one_or_more_period_or_ellipsis)) {
    6898:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    689a:	f003 030f 	and.w	r3, r3, #15
    689e:	2b0e      	cmp	r3, #14
    68a0:	d00c      	beq.n	68bc <compile_import_from+0x38>
    68a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    68a4:	2b00      	cmp	r3, #0
    68a6:	d00e      	beq.n	68c6 <compile_import_from+0x42>
    68a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    68aa:	f003 0303 	and.w	r3, r3, #3
    68ae:	2b00      	cmp	r3, #0
    68b0:	d109      	bne.n	68c6 <compile_import_from+0x42>
    68b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    68b4:	685b      	ldr	r3, [r3, #4]
    68b6:	b2db      	uxtb	r3, r3
    68b8:	2b5f      	cmp	r3, #95	; 0x5f
    68ba:	d104      	bne.n	68c6 <compile_import_from+0x42>
            // This covers relative imports with dots only like "from .. import"
            pn_rel = pn_import_source;
    68bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    68be:	61fb      	str	r3, [r7, #28]
            pn_import_source = MP_PARSE_NODE_NULL;
    68c0:	2300      	movs	r3, #0
    68c2:	64fb      	str	r3, [r7, #76]	; 0x4c
    68c4:	e01e      	b.n	6904 <compile_import_from+0x80>
        } else if (MP_PARSE_NODE_IS_STRUCT_KIND(pn_import_source, PN_import_from_2b)) {
    68c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    68c8:	2b00      	cmp	r3, #0
    68ca:	d03e      	beq.n	694a <compile_import_from+0xc6>
    68cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    68ce:	f003 0303 	and.w	r3, r3, #3
    68d2:	2b00      	cmp	r3, #0
    68d4:	d139      	bne.n	694a <compile_import_from+0xc6>
    68d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    68d8:	685b      	ldr	r3, [r3, #4]
    68da:	b2db      	uxtb	r3, r3
    68dc:	2b5c      	cmp	r3, #92	; 0x5c
    68de:	d134      	bne.n	694a <compile_import_from+0xc6>
            // This covers relative imports starting with dot(s) like "from .foo import"
            mp_parse_node_struct_t *pns_2b = (mp_parse_node_struct_t*)pn_import_source;
    68e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    68e2:	63bb      	str	r3, [r7, #56]	; 0x38
            pn_rel = pns_2b->nodes[0];
    68e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    68e6:	689b      	ldr	r3, [r3, #8]
    68e8:	61fb      	str	r3, [r7, #28]
            pn_import_source = pns_2b->nodes[1];
    68ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    68ec:	68db      	ldr	r3, [r3, #12]
    68ee:	64fb      	str	r3, [r7, #76]	; 0x4c
            assert(!MP_PARSE_NODE_IS_NULL(pn_import_source)); // should not be
    68f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    68f2:	2b00      	cmp	r3, #0
    68f4:	d106      	bne.n	6904 <compile_import_from+0x80>
    68f6:	4b7f      	ldr	r3, [pc, #508]	; (6af4 <compile_import_from+0x270>)
    68f8:	4a7f      	ldr	r2, [pc, #508]	; (6af8 <compile_import_from+0x274>)
    68fa:	f240 415e 	movw	r1, #1118	; 0x45e
    68fe:	487f      	ldr	r0, [pc, #508]	; (6afc <compile_import_from+0x278>)
    6900:	f016 faee 	bl	1cee0 <__assert_func>
            break;
        }

        // get the list of . and/or ...'s
        mp_parse_node_t *nodes;
        int n = mp_parse_node_extract_list(&pn_rel, PN_one_or_more_period_or_ellipsis, &nodes);
    6904:	f107 0218 	add.w	r2, r7, #24
    6908:	f107 031c 	add.w	r3, r7, #28
    690c:	215f      	movs	r1, #95	; 0x5f
    690e:	4618      	mov	r0, r3
    6910:	f7fd fa10 	bl	3d34 <mp_parse_node_extract_list>
    6914:	6378      	str	r0, [r7, #52]	; 0x34

        // count the total number of .'s
        for (int i = 0; i < n; i++) {
    6916:	2300      	movs	r3, #0
    6918:	647b      	str	r3, [r7, #68]	; 0x44
    691a:	e012      	b.n	6942 <compile_import_from+0xbe>
            if (MP_PARSE_NODE_IS_TOKEN_KIND(nodes[i], MP_TOKEN_DEL_PERIOD)) {
    691c:	69ba      	ldr	r2, [r7, #24]
    691e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    6920:	009b      	lsls	r3, r3, #2
    6922:	4413      	add	r3, r2
    6924:	681b      	ldr	r3, [r3, #0]
    6926:	f240 42ae 	movw	r2, #1198	; 0x4ae
    692a:	4293      	cmp	r3, r2
    692c:	d103      	bne.n	6936 <compile_import_from+0xb2>
                import_level++;
    692e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    6930:	3301      	adds	r3, #1
    6932:	64bb      	str	r3, [r7, #72]	; 0x48
    6934:	e002      	b.n	693c <compile_import_from+0xb8>
            } else {
                // should be an MP_TOKEN_ELLIPSIS
                import_level += 3;
    6936:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    6938:	3303      	adds	r3, #3
    693a:	64bb      	str	r3, [r7, #72]	; 0x48
        for (int i = 0; i < n; i++) {
    693c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    693e:	3301      	adds	r3, #1
    6940:	647b      	str	r3, [r7, #68]	; 0x44
    6942:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    6944:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    6946:	429a      	cmp	r2, r3
    6948:	dbe8      	blt.n	691c <compile_import_from+0x98>
            }
        }
    } while (0);

    if (MP_PARSE_NODE_IS_TOKEN_KIND(pns->nodes[1], MP_TOKEN_OP_STAR)) {
    694a:	683b      	ldr	r3, [r7, #0]
    694c:	68db      	ldr	r3, [r3, #12]
    694e:	f240 321e 	movw	r2, #798	; 0x31e
    6952:	4293      	cmp	r3, r2
    6954:	d122      	bne.n	699c <compile_import_from+0x118>
        EMIT_ARG(load_const_small_int, import_level);
    6956:	687b      	ldr	r3, [r7, #4]
    6958:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    695a:	6cba      	ldr	r2, [r7, #72]	; 0x48
    695c:	4611      	mov	r1, r2
    695e:	4618      	mov	r0, r3
    6960:	f003 fe58 	bl	a614 <mp_emit_bc_load_const_small_int>

        // build the "fromlist" tuple
        EMIT_ARG(load_const_str, MP_QSTR__star_);
    6964:	687b      	ldr	r3, [r7, #4]
    6966:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6968:	2127      	movs	r1, #39	; 0x27
    696a:	4618      	mov	r0, r3
    696c:	f003 fe74 	bl	a658 <mp_emit_bc_load_const_str>
        EMIT_ARG(build, 1, MP_EMIT_BUILD_TUPLE);
    6970:	687b      	ldr	r3, [r7, #4]
    6972:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6974:	2200      	movs	r2, #0
    6976:	2101      	movs	r1, #1
    6978:	4618      	mov	r0, r3
    697a:	f004 f9a6 	bl	acca <mp_emit_bc_build>

        // do the import
        qstr dummy_q;
        do_import_name(comp, pn_import_source, &dummy_q);
    697e:	f107 0314 	add.w	r3, r7, #20
    6982:	461a      	mov	r2, r3
    6984:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
    6986:	6878      	ldr	r0, [r7, #4]
    6988:	f7ff fe52 	bl	6630 <do_import_name>
        EMIT_ARG(import, MP_QSTR_NULL, MP_EMIT_IMPORT_STAR);
    698c:	687b      	ldr	r3, [r7, #4]
    698e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6990:	2202      	movs	r2, #2
    6992:	2100      	movs	r1, #0
    6994:	4618      	mov	r0, r3
    6996:	f003 fdd9 	bl	a54c <mp_emit_bc_import>
                compile_store_id(comp, MP_PARSE_NODE_LEAF_ARG(pns3->nodes[1]));
            }
        }
        EMIT(pop_top);
    }
}
    699a:	e0a7      	b.n	6aec <compile_import_from+0x268>
        EMIT_ARG(load_const_small_int, import_level);
    699c:	687b      	ldr	r3, [r7, #4]
    699e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    69a0:	6cba      	ldr	r2, [r7, #72]	; 0x48
    69a2:	4611      	mov	r1, r2
    69a4:	4618      	mov	r0, r3
    69a6:	f003 fe35 	bl	a614 <mp_emit_bc_load_const_small_int>
        int n = mp_parse_node_extract_list(&pns->nodes[1], PN_import_as_names, &pn_nodes);
    69aa:	683b      	ldr	r3, [r7, #0]
    69ac:	330c      	adds	r3, #12
    69ae:	f107 0210 	add.w	r2, r7, #16
    69b2:	2164      	movs	r1, #100	; 0x64
    69b4:	4618      	mov	r0, r3
    69b6:	f7fd f9bd 	bl	3d34 <mp_parse_node_extract_list>
    69ba:	6338      	str	r0, [r7, #48]	; 0x30
        for (int i = 0; i < n; i++) {
    69bc:	2300      	movs	r3, #0
    69be:	643b      	str	r3, [r7, #64]	; 0x40
    69c0:	e032      	b.n	6a28 <compile_import_from+0x1a4>
            assert(MP_PARSE_NODE_IS_STRUCT_KIND(pn_nodes[i], PN_import_as_name));
    69c2:	693a      	ldr	r2, [r7, #16]
    69c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    69c6:	009b      	lsls	r3, r3, #2
    69c8:	4413      	add	r3, r2
    69ca:	681b      	ldr	r3, [r3, #0]
    69cc:	2b00      	cmp	r3, #0
    69ce:	d011      	beq.n	69f4 <compile_import_from+0x170>
    69d0:	693a      	ldr	r2, [r7, #16]
    69d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    69d4:	009b      	lsls	r3, r3, #2
    69d6:	4413      	add	r3, r2
    69d8:	681b      	ldr	r3, [r3, #0]
    69da:	f003 0303 	and.w	r3, r3, #3
    69de:	2b00      	cmp	r3, #0
    69e0:	d108      	bne.n	69f4 <compile_import_from+0x170>
    69e2:	693a      	ldr	r2, [r7, #16]
    69e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    69e6:	009b      	lsls	r3, r3, #2
    69e8:	4413      	add	r3, r2
    69ea:	681b      	ldr	r3, [r3, #0]
    69ec:	685b      	ldr	r3, [r3, #4]
    69ee:	b2db      	uxtb	r3, r3
    69f0:	2b61      	cmp	r3, #97	; 0x61
    69f2:	d006      	beq.n	6a02 <compile_import_from+0x17e>
    69f4:	4b42      	ldr	r3, [pc, #264]	; (6b00 <compile_import_from+0x27c>)
    69f6:	4a40      	ldr	r2, [pc, #256]	; (6af8 <compile_import_from+0x274>)
    69f8:	f240 4186 	movw	r1, #1158	; 0x486
    69fc:	483f      	ldr	r0, [pc, #252]	; (6afc <compile_import_from+0x278>)
    69fe:	f016 fa6f 	bl	1cee0 <__assert_func>
            mp_parse_node_struct_t *pns3 = (mp_parse_node_struct_t*)pn_nodes[i];
    6a02:	693a      	ldr	r2, [r7, #16]
    6a04:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    6a06:	009b      	lsls	r3, r3, #2
    6a08:	4413      	add	r3, r2
    6a0a:	681b      	ldr	r3, [r3, #0]
    6a0c:	62fb      	str	r3, [r7, #44]	; 0x2c
            qstr id2 = MP_PARSE_NODE_LEAF_ARG(pns3->nodes[0]); // should be id
    6a0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    6a10:	689b      	ldr	r3, [r3, #8]
    6a12:	091b      	lsrs	r3, r3, #4
    6a14:	62bb      	str	r3, [r7, #40]	; 0x28
            EMIT_ARG(load_const_str, id2);
    6a16:	687b      	ldr	r3, [r7, #4]
    6a18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6a1a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
    6a1c:	4618      	mov	r0, r3
    6a1e:	f003 fe1b 	bl	a658 <mp_emit_bc_load_const_str>
        for (int i = 0; i < n; i++) {
    6a22:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    6a24:	3301      	adds	r3, #1
    6a26:	643b      	str	r3, [r7, #64]	; 0x40
    6a28:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    6a2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    6a2c:	429a      	cmp	r2, r3
    6a2e:	dbc8      	blt.n	69c2 <compile_import_from+0x13e>
        EMIT_ARG(build, n, MP_EMIT_BUILD_TUPLE);
    6a30:	687b      	ldr	r3, [r7, #4]
    6a32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6a34:	6b39      	ldr	r1, [r7, #48]	; 0x30
    6a36:	2200      	movs	r2, #0
    6a38:	4618      	mov	r0, r3
    6a3a:	f004 f946 	bl	acca <mp_emit_bc_build>
        do_import_name(comp, pn_import_source, &dummy_q);
    6a3e:	f107 030c 	add.w	r3, r7, #12
    6a42:	461a      	mov	r2, r3
    6a44:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
    6a46:	6878      	ldr	r0, [r7, #4]
    6a48:	f7ff fdf2 	bl	6630 <do_import_name>
        for (int i = 0; i < n; i++) {
    6a4c:	2300      	movs	r3, #0
    6a4e:	63fb      	str	r3, [r7, #60]	; 0x3c
    6a50:	e043      	b.n	6ada <compile_import_from+0x256>
            assert(MP_PARSE_NODE_IS_STRUCT_KIND(pn_nodes[i], PN_import_as_name));
    6a52:	693a      	ldr	r2, [r7, #16]
    6a54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    6a56:	009b      	lsls	r3, r3, #2
    6a58:	4413      	add	r3, r2
    6a5a:	681b      	ldr	r3, [r3, #0]
    6a5c:	2b00      	cmp	r3, #0
    6a5e:	d011      	beq.n	6a84 <compile_import_from+0x200>
    6a60:	693a      	ldr	r2, [r7, #16]
    6a62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    6a64:	009b      	lsls	r3, r3, #2
    6a66:	4413      	add	r3, r2
    6a68:	681b      	ldr	r3, [r3, #0]
    6a6a:	f003 0303 	and.w	r3, r3, #3
    6a6e:	2b00      	cmp	r3, #0
    6a70:	d108      	bne.n	6a84 <compile_import_from+0x200>
    6a72:	693a      	ldr	r2, [r7, #16]
    6a74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    6a76:	009b      	lsls	r3, r3, #2
    6a78:	4413      	add	r3, r2
    6a7a:	681b      	ldr	r3, [r3, #0]
    6a7c:	685b      	ldr	r3, [r3, #4]
    6a7e:	b2db      	uxtb	r3, r3
    6a80:	2b61      	cmp	r3, #97	; 0x61
    6a82:	d006      	beq.n	6a92 <compile_import_from+0x20e>
    6a84:	4b1e      	ldr	r3, [pc, #120]	; (6b00 <compile_import_from+0x27c>)
    6a86:	4a1c      	ldr	r2, [pc, #112]	; (6af8 <compile_import_from+0x274>)
    6a88:	f240 4191 	movw	r1, #1169	; 0x491
    6a8c:	481b      	ldr	r0, [pc, #108]	; (6afc <compile_import_from+0x278>)
    6a8e:	f016 fa27 	bl	1cee0 <__assert_func>
            mp_parse_node_struct_t *pns3 = (mp_parse_node_struct_t*)pn_nodes[i];
    6a92:	693a      	ldr	r2, [r7, #16]
    6a94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    6a96:	009b      	lsls	r3, r3, #2
    6a98:	4413      	add	r3, r2
    6a9a:	681b      	ldr	r3, [r3, #0]
    6a9c:	627b      	str	r3, [r7, #36]	; 0x24
            qstr id2 = MP_PARSE_NODE_LEAF_ARG(pns3->nodes[0]); // should be id
    6a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    6aa0:	689b      	ldr	r3, [r3, #8]
    6aa2:	091b      	lsrs	r3, r3, #4
    6aa4:	623b      	str	r3, [r7, #32]
            EMIT_ARG(import, id2, MP_EMIT_IMPORT_FROM);
    6aa6:	687b      	ldr	r3, [r7, #4]
    6aa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6aaa:	2201      	movs	r2, #1
    6aac:	6a39      	ldr	r1, [r7, #32]
    6aae:	4618      	mov	r0, r3
    6ab0:	f003 fd4c 	bl	a54c <mp_emit_bc_import>
            if (MP_PARSE_NODE_IS_NULL(pns3->nodes[1])) {
    6ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    6ab6:	68db      	ldr	r3, [r3, #12]
    6ab8:	2b00      	cmp	r3, #0
    6aba:	d104      	bne.n	6ac6 <compile_import_from+0x242>
                compile_store_id(comp, id2);
    6abc:	6a39      	ldr	r1, [r7, #32]
    6abe:	6878      	ldr	r0, [r7, #4]
    6ac0:	f7fe fc26 	bl	5310 <compile_store_id>
    6ac4:	e006      	b.n	6ad4 <compile_import_from+0x250>
                compile_store_id(comp, MP_PARSE_NODE_LEAF_ARG(pns3->nodes[1]));
    6ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    6ac8:	68db      	ldr	r3, [r3, #12]
    6aca:	091b      	lsrs	r3, r3, #4
    6acc:	4619      	mov	r1, r3
    6ace:	6878      	ldr	r0, [r7, #4]
    6ad0:	f7fe fc1e 	bl	5310 <compile_store_id>
        for (int i = 0; i < n; i++) {
    6ad4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    6ad6:	3301      	adds	r3, #1
    6ad8:	63fb      	str	r3, [r7, #60]	; 0x3c
    6ada:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    6adc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    6ade:	429a      	cmp	r2, r3
    6ae0:	dbb7      	blt.n	6a52 <compile_import_from+0x1ce>
        EMIT(pop_top);
    6ae2:	687b      	ldr	r3, [r7, #4]
    6ae4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6ae6:	4618      	mov	r0, r3
    6ae8:	f003 ff33 	bl	a952 <mp_emit_bc_pop_top>
}
    6aec:	bf00      	nop
    6aee:	3750      	adds	r7, #80	; 0x50
    6af0:	46bd      	mov	sp, r7
    6af2:	bd80      	pop	{r7, pc}
    6af4:	00021ff4 	.word	0x00021ff4
    6af8:	0002289c 	.word	0x0002289c
    6afc:	00021c60 	.word	0x00021c60
    6b00:	00022020 	.word	0x00022020

00006b04 <compile_declare_global>:

STATIC void compile_declare_global(compiler_t *comp, mp_parse_node_t pn, id_info_t *id_info) {
    6b04:	b580      	push	{r7, lr}
    6b06:	b084      	sub	sp, #16
    6b08:	af00      	add	r7, sp, #0
    6b0a:	60f8      	str	r0, [r7, #12]
    6b0c:	60b9      	str	r1, [r7, #8]
    6b0e:	607a      	str	r2, [r7, #4]
    if (id_info->kind != ID_INFO_KIND_UNDECIDED && id_info->kind != ID_INFO_KIND_GLOBAL_EXPLICIT) {
    6b10:	687b      	ldr	r3, [r7, #4]
    6b12:	781b      	ldrb	r3, [r3, #0]
    6b14:	2b00      	cmp	r3, #0
    6b16:	d009      	beq.n	6b2c <compile_declare_global+0x28>
    6b18:	687b      	ldr	r3, [r7, #4]
    6b1a:	781b      	ldrb	r3, [r3, #0]
    6b1c:	2b02      	cmp	r3, #2
    6b1e:	d005      	beq.n	6b2c <compile_declare_global+0x28>
        compile_syntax_error(comp, pn, "identifier redefined as global");
    6b20:	4a0d      	ldr	r2, [pc, #52]	; (6b58 <compile_declare_global+0x54>)
    6b22:	68b9      	ldr	r1, [r7, #8]
    6b24:	68f8      	ldr	r0, [r7, #12]
    6b26:	f7fe faca 	bl	50be <compile_syntax_error>
        return;
    6b2a:	e011      	b.n	6b50 <compile_declare_global+0x4c>
    }
    id_info->kind = ID_INFO_KIND_GLOBAL_EXPLICIT;
    6b2c:	687b      	ldr	r3, [r7, #4]
    6b2e:	2202      	movs	r2, #2
    6b30:	701a      	strb	r2, [r3, #0]

    // if the id exists in the global scope, set its kind to EXPLICIT_GLOBAL
    id_info = scope_find_global(comp->scope_cur, id_info->qst);
    6b32:	68fb      	ldr	r3, [r7, #12]
    6b34:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    6b36:	687b      	ldr	r3, [r7, #4]
    6b38:	685b      	ldr	r3, [r3, #4]
    6b3a:	4619      	mov	r1, r3
    6b3c:	4610      	mov	r0, r2
    6b3e:	f7fe f9da 	bl	4ef6 <scope_find_global>
    6b42:	6078      	str	r0, [r7, #4]
    if (id_info != NULL) {
    6b44:	687b      	ldr	r3, [r7, #4]
    6b46:	2b00      	cmp	r3, #0
    6b48:	d002      	beq.n	6b50 <compile_declare_global+0x4c>
        id_info->kind = ID_INFO_KIND_GLOBAL_EXPLICIT;
    6b4a:	687b      	ldr	r3, [r7, #4]
    6b4c:	2202      	movs	r2, #2
    6b4e:	701a      	strb	r2, [r3, #0]
    }
}
    6b50:	3710      	adds	r7, #16
    6b52:	46bd      	mov	sp, r7
    6b54:	bd80      	pop	{r7, pc}
    6b56:	bf00      	nop
    6b58:	00022060 	.word	0x00022060

00006b5c <compile_declare_nonlocal>:

STATIC void compile_declare_nonlocal(compiler_t *comp, mp_parse_node_t pn, id_info_t *id_info) {
    6b5c:	b580      	push	{r7, lr}
    6b5e:	b084      	sub	sp, #16
    6b60:	af00      	add	r7, sp, #0
    6b62:	60f8      	str	r0, [r7, #12]
    6b64:	60b9      	str	r1, [r7, #8]
    6b66:	607a      	str	r2, [r7, #4]
    if (id_info->kind == ID_INFO_KIND_UNDECIDED) {
    6b68:	687b      	ldr	r3, [r7, #4]
    6b6a:	781b      	ldrb	r3, [r3, #0]
    6b6c:	2b00      	cmp	r3, #0
    6b6e:	d112      	bne.n	6b96 <compile_declare_nonlocal+0x3a>
        id_info->kind = ID_INFO_KIND_GLOBAL_IMPLICIT;
    6b70:	687b      	ldr	r3, [r7, #4]
    6b72:	2201      	movs	r2, #1
    6b74:	701a      	strb	r2, [r3, #0]
        scope_check_to_close_over(comp->scope_cur, id_info);
    6b76:	68fb      	ldr	r3, [r7, #12]
    6b78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    6b7a:	6879      	ldr	r1, [r7, #4]
    6b7c:	4618      	mov	r0, r3
    6b7e:	f7fe fa23 	bl	4fc8 <scope_check_to_close_over>
        if (id_info->kind == ID_INFO_KIND_GLOBAL_IMPLICIT) {
    6b82:	687b      	ldr	r3, [r7, #4]
    6b84:	781b      	ldrb	r3, [r3, #0]
    6b86:	2b01      	cmp	r3, #1
    6b88:	d10e      	bne.n	6ba8 <compile_declare_nonlocal+0x4c>
            compile_syntax_error(comp, pn, "no binding for nonlocal found");
    6b8a:	4a09      	ldr	r2, [pc, #36]	; (6bb0 <compile_declare_nonlocal+0x54>)
    6b8c:	68b9      	ldr	r1, [r7, #8]
    6b8e:	68f8      	ldr	r0, [r7, #12]
    6b90:	f7fe fa95 	bl	50be <compile_syntax_error>
        }
    } else if (id_info->kind != ID_INFO_KIND_FREE) {
        compile_syntax_error(comp, pn, "identifier redefined as nonlocal");
    }
}
    6b94:	e008      	b.n	6ba8 <compile_declare_nonlocal+0x4c>
    } else if (id_info->kind != ID_INFO_KIND_FREE) {
    6b96:	687b      	ldr	r3, [r7, #4]
    6b98:	781b      	ldrb	r3, [r3, #0]
    6b9a:	2b05      	cmp	r3, #5
    6b9c:	d004      	beq.n	6ba8 <compile_declare_nonlocal+0x4c>
        compile_syntax_error(comp, pn, "identifier redefined as nonlocal");
    6b9e:	4a05      	ldr	r2, [pc, #20]	; (6bb4 <compile_declare_nonlocal+0x58>)
    6ba0:	68b9      	ldr	r1, [r7, #8]
    6ba2:	68f8      	ldr	r0, [r7, #12]
    6ba4:	f7fe fa8b 	bl	50be <compile_syntax_error>
}
    6ba8:	bf00      	nop
    6baa:	3710      	adds	r7, #16
    6bac:	46bd      	mov	sp, r7
    6bae:	bd80      	pop	{r7, pc}
    6bb0:	00022080 	.word	0x00022080
    6bb4:	000220a0 	.word	0x000220a0

00006bb8 <compile_global_nonlocal_stmt>:

STATIC void compile_global_nonlocal_stmt(compiler_t *comp, mp_parse_node_struct_t *pns) {
    6bb8:	b580      	push	{r7, lr}
    6bba:	b088      	sub	sp, #32
    6bbc:	af00      	add	r7, sp, #0
    6bbe:	6078      	str	r0, [r7, #4]
    6bc0:	6039      	str	r1, [r7, #0]
    if (comp->pass == MP_PASS_SCOPE) {
    6bc2:	687b      	ldr	r3, [r7, #4]
    6bc4:	795b      	ldrb	r3, [r3, #5]
    6bc6:	2b01      	cmp	r3, #1
    6bc8:	d14b      	bne.n	6c62 <compile_global_nonlocal_stmt+0xaa>
        bool is_global = MP_PARSE_NODE_STRUCT_KIND(pns) == PN_global_stmt;
    6bca:	683b      	ldr	r3, [r7, #0]
    6bcc:	685b      	ldr	r3, [r3, #4]
    6bce:	b2db      	uxtb	r3, r3
    6bd0:	2b10      	cmp	r3, #16
    6bd2:	bf0c      	ite	eq
    6bd4:	2301      	moveq	r3, #1
    6bd6:	2300      	movne	r3, #0
    6bd8:	76fb      	strb	r3, [r7, #27]

        if (!is_global && comp->scope_cur->kind == SCOPE_MODULE) {
    6bda:	7efb      	ldrb	r3, [r7, #27]
    6bdc:	f083 0301 	eor.w	r3, r3, #1
    6be0:	b2db      	uxtb	r3, r3
    6be2:	2b00      	cmp	r3, #0
    6be4:	d00b      	beq.n	6bfe <compile_global_nonlocal_stmt+0x46>
    6be6:	687b      	ldr	r3, [r7, #4]
    6be8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    6bea:	681b      	ldr	r3, [r3, #0]
    6bec:	2b00      	cmp	r3, #0
    6bee:	d106      	bne.n	6bfe <compile_global_nonlocal_stmt+0x46>
            compile_syntax_error(comp, (mp_parse_node_t)pns, "can't declare nonlocal in outer code");
    6bf0:	683b      	ldr	r3, [r7, #0]
    6bf2:	4a1d      	ldr	r2, [pc, #116]	; (6c68 <compile_global_nonlocal_stmt+0xb0>)
    6bf4:	4619      	mov	r1, r3
    6bf6:	6878      	ldr	r0, [r7, #4]
    6bf8:	f7fe fa61 	bl	50be <compile_syntax_error>
    6bfc:	e031      	b.n	6c62 <compile_global_nonlocal_stmt+0xaa>
            return;
        }

        mp_parse_node_t *nodes;
        int n = mp_parse_node_extract_list(&pns->nodes[0], PN_name_list, &nodes);
    6bfe:	683b      	ldr	r3, [r7, #0]
    6c00:	3308      	adds	r3, #8
    6c02:	f107 0208 	add.w	r2, r7, #8
    6c06:	2167      	movs	r1, #103	; 0x67
    6c08:	4618      	mov	r0, r3
    6c0a:	f7fd f893 	bl	3d34 <mp_parse_node_extract_list>
    6c0e:	6178      	str	r0, [r7, #20]
        for (int i = 0; i < n; i++) {
    6c10:	2300      	movs	r3, #0
    6c12:	61fb      	str	r3, [r7, #28]
    6c14:	e021      	b.n	6c5a <compile_global_nonlocal_stmt+0xa2>
            qstr qst = MP_PARSE_NODE_LEAF_ARG(nodes[i]);
    6c16:	68ba      	ldr	r2, [r7, #8]
    6c18:	69fb      	ldr	r3, [r7, #28]
    6c1a:	009b      	lsls	r3, r3, #2
    6c1c:	4413      	add	r3, r2
    6c1e:	681b      	ldr	r3, [r3, #0]
    6c20:	091b      	lsrs	r3, r3, #4
    6c22:	613b      	str	r3, [r7, #16]
            id_info_t *id_info = scope_find_or_add_id(comp->scope_cur, qst, ID_INFO_KIND_UNDECIDED);
    6c24:	687b      	ldr	r3, [r7, #4]
    6c26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    6c28:	2200      	movs	r2, #0
    6c2a:	6939      	ldr	r1, [r7, #16]
    6c2c:	4618      	mov	r0, r3
    6c2e:	f7fe f8f5 	bl	4e1c <scope_find_or_add_id>
    6c32:	60f8      	str	r0, [r7, #12]
            if (is_global) {
    6c34:	7efb      	ldrb	r3, [r7, #27]
    6c36:	2b00      	cmp	r3, #0
    6c38:	d006      	beq.n	6c48 <compile_global_nonlocal_stmt+0x90>
                compile_declare_global(comp, (mp_parse_node_t)pns, id_info);
    6c3a:	683b      	ldr	r3, [r7, #0]
    6c3c:	68fa      	ldr	r2, [r7, #12]
    6c3e:	4619      	mov	r1, r3
    6c40:	6878      	ldr	r0, [r7, #4]
    6c42:	f7ff ff5f 	bl	6b04 <compile_declare_global>
    6c46:	e005      	b.n	6c54 <compile_global_nonlocal_stmt+0x9c>
            } else {
                compile_declare_nonlocal(comp, (mp_parse_node_t)pns, id_info);
    6c48:	683b      	ldr	r3, [r7, #0]
    6c4a:	68fa      	ldr	r2, [r7, #12]
    6c4c:	4619      	mov	r1, r3
    6c4e:	6878      	ldr	r0, [r7, #4]
    6c50:	f7ff ff84 	bl	6b5c <compile_declare_nonlocal>
        for (int i = 0; i < n; i++) {
    6c54:	69fb      	ldr	r3, [r7, #28]
    6c56:	3301      	adds	r3, #1
    6c58:	61fb      	str	r3, [r7, #28]
    6c5a:	69fa      	ldr	r2, [r7, #28]
    6c5c:	697b      	ldr	r3, [r7, #20]
    6c5e:	429a      	cmp	r2, r3
    6c60:	dbd9      	blt.n	6c16 <compile_global_nonlocal_stmt+0x5e>
            }
        }
    }
}
    6c62:	3720      	adds	r7, #32
    6c64:	46bd      	mov	sp, r7
    6c66:	bd80      	pop	{r7, pc}
    6c68:	000220c4 	.word	0x000220c4

00006c6c <compile_assert_stmt>:

STATIC void compile_assert_stmt(compiler_t *comp, mp_parse_node_struct_t *pns) {
    6c6c:	b580      	push	{r7, lr}
    6c6e:	b084      	sub	sp, #16
    6c70:	af00      	add	r7, sp, #0
    6c72:	6078      	str	r0, [r7, #4]
    6c74:	6039      	str	r1, [r7, #0]
    // with optimisations enabled we don't compile assertions
    if (MP_STATE_VM(mp_optimise_value) != 0) {
    6c76:	4b1c      	ldr	r3, [pc, #112]	; (6ce8 <compile_assert_stmt+0x7c>)
    6c78:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
    6c7c:	2b00      	cmp	r3, #0
    6c7e:	d12f      	bne.n	6ce0 <compile_assert_stmt+0x74>
        return;
    }

    uint l_end = comp_next_label(comp);
    6c80:	6878      	ldr	r0, [r7, #4]
    6c82:	f7fe fa37 	bl	50f4 <comp_next_label>
    6c86:	60f8      	str	r0, [r7, #12]
    c_if_cond(comp, pns->nodes[0], true, l_end);
    6c88:	683b      	ldr	r3, [r7, #0]
    6c8a:	6899      	ldr	r1, [r3, #8]
    6c8c:	68fb      	ldr	r3, [r7, #12]
    6c8e:	2201      	movs	r2, #1
    6c90:	6878      	ldr	r0, [r7, #4]
    6c92:	f7fe fbc2 	bl	541a <c_if_cond>
    EMIT_LOAD_GLOBAL(MP_QSTR_AssertionError); // we load_global instead of load_id, to be consistent with CPython
    6c96:	687b      	ldr	r3, [r7, #4]
    6c98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6c9a:	2201      	movs	r2, #1
    6c9c:	21b7      	movs	r1, #183	; 0xb7
    6c9e:	4618      	mov	r0, r3
    6ca0:	f003 fd35 	bl	a70e <mp_emit_bc_load_global>
    if (!MP_PARSE_NODE_IS_NULL(pns->nodes[1])) {
    6ca4:	683b      	ldr	r3, [r7, #0]
    6ca6:	68db      	ldr	r3, [r3, #12]
    6ca8:	2b00      	cmp	r3, #0
    6caa:	d00c      	beq.n	6cc6 <compile_assert_stmt+0x5a>
        // assertion message
        compile_node(comp, pns->nodes[1]);
    6cac:	683b      	ldr	r3, [r7, #0]
    6cae:	68db      	ldr	r3, [r3, #12]
    6cb0:	4619      	mov	r1, r3
    6cb2:	6878      	ldr	r0, [r7, #4]
    6cb4:	f001 ffdf 	bl	8c76 <compile_node>
        EMIT_ARG(call_function, 1, 0, 0);
    6cb8:	687b      	ldr	r3, [r7, #4]
    6cba:	6a98      	ldr	r0, [r3, #40]	; 0x28
    6cbc:	2300      	movs	r3, #0
    6cbe:	2200      	movs	r2, #0
    6cc0:	2101      	movs	r1, #1
    6cc2:	f004 f937 	bl	af34 <mp_emit_bc_call_function>
    }
    EMIT_ARG(raise_varargs, 1);
    6cc6:	687b      	ldr	r3, [r7, #4]
    6cc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6cca:	2101      	movs	r1, #1
    6ccc:	4618      	mov	r0, r3
    6cce:	f004 f970 	bl	afb2 <mp_emit_bc_raise_varargs>
    EMIT_ARG(label_assign, l_end);
    6cd2:	687b      	ldr	r3, [r7, #4]
    6cd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6cd6:	68f9      	ldr	r1, [r7, #12]
    6cd8:	4618      	mov	r0, r3
    6cda:	f003 fbe1 	bl	a4a0 <mp_emit_bc_label_assign>
    6cde:	e000      	b.n	6ce2 <compile_assert_stmt+0x76>
        return;
    6ce0:	bf00      	nop
}
    6ce2:	3710      	adds	r7, #16
    6ce4:	46bd      	mov	sp, r7
    6ce6:	bd80      	pop	{r7, pc}
    6ce8:	20001248 	.word	0x20001248

00006cec <compile_if_stmt>:

STATIC void compile_if_stmt(compiler_t *comp, mp_parse_node_struct_t *pns) {
    6cec:	b580      	push	{r7, lr}
    6cee:	b08a      	sub	sp, #40	; 0x28
    6cf0:	af00      	add	r7, sp, #0
    6cf2:	6078      	str	r0, [r7, #4]
    6cf4:	6039      	str	r1, [r7, #0]
    uint l_end = comp_next_label(comp);
    6cf6:	6878      	ldr	r0, [r7, #4]
    6cf8:	f7fe f9fc 	bl	50f4 <comp_next_label>
    6cfc:	6238      	str	r0, [r7, #32]

    // optimisation: don't emit anything when "if False"
    if (!mp_parse_node_is_const_false(pns->nodes[0])) {
    6cfe:	683b      	ldr	r3, [r7, #0]
    6d00:	689b      	ldr	r3, [r3, #8]
    6d02:	4618      	mov	r0, r3
    6d04:	f7fc ff91 	bl	3c2a <mp_parse_node_is_const_false>
    6d08:	4603      	mov	r3, r0
    6d0a:	f083 0301 	eor.w	r3, r3, #1
    6d0e:	b2db      	uxtb	r3, r3
    6d10:	2b00      	cmp	r3, #0
    6d12:	d038      	beq.n	6d86 <compile_if_stmt+0x9a>
        uint l_fail = comp_next_label(comp);
    6d14:	6878      	ldr	r0, [r7, #4]
    6d16:	f7fe f9ed 	bl	50f4 <comp_next_label>
    6d1a:	61f8      	str	r0, [r7, #28]
        c_if_cond(comp, pns->nodes[0], false, l_fail); // if condition
    6d1c:	683b      	ldr	r3, [r7, #0]
    6d1e:	6899      	ldr	r1, [r3, #8]
    6d20:	69fb      	ldr	r3, [r7, #28]
    6d22:	2200      	movs	r2, #0
    6d24:	6878      	ldr	r0, [r7, #4]
    6d26:	f7fe fb78 	bl	541a <c_if_cond>

        compile_node(comp, pns->nodes[1]); // if block
    6d2a:	683b      	ldr	r3, [r7, #0]
    6d2c:	68db      	ldr	r3, [r3, #12]
    6d2e:	4619      	mov	r1, r3
    6d30:	6878      	ldr	r0, [r7, #4]
    6d32:	f001 ffa0 	bl	8c76 <compile_node>

        // optimisation: skip everything else when "if True"
        if (mp_parse_node_is_const_true(pns->nodes[0])) {
    6d36:	683b      	ldr	r3, [r7, #0]
    6d38:	689b      	ldr	r3, [r3, #8]
    6d3a:	4618      	mov	r0, r3
    6d3c:	f7fc ff91 	bl	3c62 <mp_parse_node_is_const_true>
    6d40:	4603      	mov	r3, r0
    6d42:	2b00      	cmp	r3, #0
    6d44:	f040 809a 	bne.w	6e7c <compile_if_stmt+0x190>
            goto done;
        }

        if (
            // optimisation: don't jump over non-existent elif/else blocks
            !(MP_PARSE_NODE_IS_NULL(pns->nodes[2]) && MP_PARSE_NODE_IS_NULL(pns->nodes[3]))
    6d48:	683b      	ldr	r3, [r7, #0]
    6d4a:	691b      	ldr	r3, [r3, #16]
        if (
    6d4c:	2b00      	cmp	r3, #0
    6d4e:	d103      	bne.n	6d58 <compile_if_stmt+0x6c>
            !(MP_PARSE_NODE_IS_NULL(pns->nodes[2]) && MP_PARSE_NODE_IS_NULL(pns->nodes[3]))
    6d50:	683b      	ldr	r3, [r7, #0]
    6d52:	695b      	ldr	r3, [r3, #20]
    6d54:	2b00      	cmp	r3, #0
    6d56:	d010      	beq.n	6d7a <compile_if_stmt+0x8e>
            // optimisation: don't jump if last instruction was return
            && !EMIT(last_emit_was_return_value)
    6d58:	687b      	ldr	r3, [r7, #4]
    6d5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6d5c:	4618      	mov	r0, r3
    6d5e:	f003 fb3f 	bl	a3e0 <mp_emit_bc_last_emit_was_return_value>
    6d62:	4603      	mov	r3, r0
    6d64:	f083 0301 	eor.w	r3, r3, #1
    6d68:	b2db      	uxtb	r3, r3
    6d6a:	2b00      	cmp	r3, #0
    6d6c:	d005      	beq.n	6d7a <compile_if_stmt+0x8e>
            ) {
            // jump over elif/else blocks
            EMIT_ARG(jump, l_end);
    6d6e:	687b      	ldr	r3, [r7, #4]
    6d70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6d72:	6a39      	ldr	r1, [r7, #32]
    6d74:	4618      	mov	r0, r3
    6d76:	f003 fe1d 	bl	a9b4 <mp_emit_bc_jump>
        }

        EMIT_ARG(label_assign, l_fail);
    6d7a:	687b      	ldr	r3, [r7, #4]
    6d7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6d7e:	69f9      	ldr	r1, [r7, #28]
    6d80:	4618      	mov	r0, r3
    6d82:	f003 fb8d 	bl	a4a0 <mp_emit_bc_label_assign>
    }

    // compile elif blocks (if any)
    mp_parse_node_t *pn_elif;
    int n_elif = mp_parse_node_extract_list(&pns->nodes[2], PN_if_stmt_elif_list, &pn_elif);
    6d86:	683b      	ldr	r3, [r7, #0]
    6d88:	3310      	adds	r3, #16
    6d8a:	f107 020c 	add.w	r2, r7, #12
    6d8e:	216a      	movs	r1, #106	; 0x6a
    6d90:	4618      	mov	r0, r3
    6d92:	f7fc ffcf 	bl	3d34 <mp_parse_node_extract_list>
    6d96:	61b8      	str	r0, [r7, #24]
    for (int i = 0; i < n_elif; i++) {
    6d98:	2300      	movs	r3, #0
    6d9a:	627b      	str	r3, [r7, #36]	; 0x24
    6d9c:	e063      	b.n	6e66 <compile_if_stmt+0x17a>
        assert(MP_PARSE_NODE_IS_STRUCT_KIND(pn_elif[i], PN_if_stmt_elif)); // should be
    6d9e:	68fa      	ldr	r2, [r7, #12]
    6da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    6da2:	009b      	lsls	r3, r3, #2
    6da4:	4413      	add	r3, r2
    6da6:	681b      	ldr	r3, [r3, #0]
    6da8:	2b00      	cmp	r3, #0
    6daa:	d011      	beq.n	6dd0 <compile_if_stmt+0xe4>
    6dac:	68fa      	ldr	r2, [r7, #12]
    6dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    6db0:	009b      	lsls	r3, r3, #2
    6db2:	4413      	add	r3, r2
    6db4:	681b      	ldr	r3, [r3, #0]
    6db6:	f003 0303 	and.w	r3, r3, #3
    6dba:	2b00      	cmp	r3, #0
    6dbc:	d108      	bne.n	6dd0 <compile_if_stmt+0xe4>
    6dbe:	68fa      	ldr	r2, [r7, #12]
    6dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    6dc2:	009b      	lsls	r3, r3, #2
    6dc4:	4413      	add	r3, r2
    6dc6:	681b      	ldr	r3, [r3, #0]
    6dc8:	685b      	ldr	r3, [r3, #4]
    6dca:	b2db      	uxtb	r3, r3
    6dcc:	2b6b      	cmp	r3, #107	; 0x6b
    6dce:	d006      	beq.n	6dde <compile_if_stmt+0xf2>
    6dd0:	4b31      	ldr	r3, [pc, #196]	; (6e98 <compile_if_stmt+0x1ac>)
    6dd2:	4a32      	ldr	r2, [pc, #200]	; (6e9c <compile_if_stmt+0x1b0>)
    6dd4:	f240 5102 	movw	r1, #1282	; 0x502
    6dd8:	4831      	ldr	r0, [pc, #196]	; (6ea0 <compile_if_stmt+0x1b4>)
    6dda:	f016 f881 	bl	1cee0 <__assert_func>
        mp_parse_node_struct_t *pns_elif = (mp_parse_node_struct_t*)pn_elif[i];
    6dde:	68fa      	ldr	r2, [r7, #12]
    6de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    6de2:	009b      	lsls	r3, r3, #2
    6de4:	4413      	add	r3, r2
    6de6:	681b      	ldr	r3, [r3, #0]
    6de8:	617b      	str	r3, [r7, #20]

        // optimisation: don't emit anything when "if False"
        if (!mp_parse_node_is_const_false(pns_elif->nodes[0])) {
    6dea:	697b      	ldr	r3, [r7, #20]
    6dec:	689b      	ldr	r3, [r3, #8]
    6dee:	4618      	mov	r0, r3
    6df0:	f7fc ff1b 	bl	3c2a <mp_parse_node_is_const_false>
    6df4:	4603      	mov	r3, r0
    6df6:	f083 0301 	eor.w	r3, r3, #1
    6dfa:	b2db      	uxtb	r3, r3
    6dfc:	2b00      	cmp	r3, #0
    6dfe:	d02f      	beq.n	6e60 <compile_if_stmt+0x174>
            uint l_fail = comp_next_label(comp);
    6e00:	6878      	ldr	r0, [r7, #4]
    6e02:	f7fe f977 	bl	50f4 <comp_next_label>
    6e06:	6138      	str	r0, [r7, #16]
            c_if_cond(comp, pns_elif->nodes[0], false, l_fail); // elif condition
    6e08:	697b      	ldr	r3, [r7, #20]
    6e0a:	6899      	ldr	r1, [r3, #8]
    6e0c:	693b      	ldr	r3, [r7, #16]
    6e0e:	2200      	movs	r2, #0
    6e10:	6878      	ldr	r0, [r7, #4]
    6e12:	f7fe fb02 	bl	541a <c_if_cond>

            compile_node(comp, pns_elif->nodes[1]); // elif block
    6e16:	697b      	ldr	r3, [r7, #20]
    6e18:	68db      	ldr	r3, [r3, #12]
    6e1a:	4619      	mov	r1, r3
    6e1c:	6878      	ldr	r0, [r7, #4]
    6e1e:	f001 ff2a 	bl	8c76 <compile_node>

            // optimisation: skip everything else when "elif True"
            if (mp_parse_node_is_const_true(pns_elif->nodes[0])) {
    6e22:	697b      	ldr	r3, [r7, #20]
    6e24:	689b      	ldr	r3, [r3, #8]
    6e26:	4618      	mov	r0, r3
    6e28:	f7fc ff1b 	bl	3c62 <mp_parse_node_is_const_true>
    6e2c:	4603      	mov	r3, r0
    6e2e:	2b00      	cmp	r3, #0
    6e30:	d126      	bne.n	6e80 <compile_if_stmt+0x194>
                goto done;
            }

            // optimisation: don't jump if last instruction was return
            if (!EMIT(last_emit_was_return_value)) {
    6e32:	687b      	ldr	r3, [r7, #4]
    6e34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6e36:	4618      	mov	r0, r3
    6e38:	f003 fad2 	bl	a3e0 <mp_emit_bc_last_emit_was_return_value>
    6e3c:	4603      	mov	r3, r0
    6e3e:	f083 0301 	eor.w	r3, r3, #1
    6e42:	b2db      	uxtb	r3, r3
    6e44:	2b00      	cmp	r3, #0
    6e46:	d005      	beq.n	6e54 <compile_if_stmt+0x168>
                EMIT_ARG(jump, l_end);
    6e48:	687b      	ldr	r3, [r7, #4]
    6e4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6e4c:	6a39      	ldr	r1, [r7, #32]
    6e4e:	4618      	mov	r0, r3
    6e50:	f003 fdb0 	bl	a9b4 <mp_emit_bc_jump>
            }
            EMIT_ARG(label_assign, l_fail);
    6e54:	687b      	ldr	r3, [r7, #4]
    6e56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6e58:	6939      	ldr	r1, [r7, #16]
    6e5a:	4618      	mov	r0, r3
    6e5c:	f003 fb20 	bl	a4a0 <mp_emit_bc_label_assign>
    for (int i = 0; i < n_elif; i++) {
    6e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    6e62:	3301      	adds	r3, #1
    6e64:	627b      	str	r3, [r7, #36]	; 0x24
    6e66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    6e68:	69bb      	ldr	r3, [r7, #24]
    6e6a:	429a      	cmp	r2, r3
    6e6c:	db97      	blt.n	6d9e <compile_if_stmt+0xb2>
        }
    }

    // compile else block
    compile_node(comp, pns->nodes[3]); // can be null
    6e6e:	683b      	ldr	r3, [r7, #0]
    6e70:	695b      	ldr	r3, [r3, #20]
    6e72:	4619      	mov	r1, r3
    6e74:	6878      	ldr	r0, [r7, #4]
    6e76:	f001 fefe 	bl	8c76 <compile_node>
    6e7a:	e002      	b.n	6e82 <compile_if_stmt+0x196>
            goto done;
    6e7c:	bf00      	nop
    6e7e:	e000      	b.n	6e82 <compile_if_stmt+0x196>
                goto done;
    6e80:	bf00      	nop

done:
    EMIT_ARG(label_assign, l_end);
    6e82:	687b      	ldr	r3, [r7, #4]
    6e84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6e86:	6a39      	ldr	r1, [r7, #32]
    6e88:	4618      	mov	r0, r3
    6e8a:	f003 fb09 	bl	a4a0 <mp_emit_bc_label_assign>
}
    6e8e:	bf00      	nop
    6e90:	3728      	adds	r7, #40	; 0x28
    6e92:	46bd      	mov	sp, r7
    6e94:	bd80      	pop	{r7, pc}
    6e96:	bf00      	nop
    6e98:	000220ec 	.word	0x000220ec
    6e9c:	000228b0 	.word	0x000228b0
    6ea0:	00021c60 	.word	0x00021c60

00006ea4 <compile_while_stmt>:
#define END_BREAK_CONTINUE_BLOCK \
    comp->break_label = old_break_label; \
    comp->continue_label = old_continue_label; \
    comp->break_continue_except_level = old_break_continue_except_level;

STATIC void compile_while_stmt(compiler_t *comp, mp_parse_node_struct_t *pns) {
    6ea4:	b580      	push	{r7, lr}
    6ea6:	b088      	sub	sp, #32
    6ea8:	af00      	add	r7, sp, #0
    6eaa:	6078      	str	r0, [r7, #4]
    6eac:	6039      	str	r1, [r7, #0]
    START_BREAK_CONTINUE_BLOCK
    6eae:	687b      	ldr	r3, [r7, #4]
    6eb0:	8b1b      	ldrh	r3, [r3, #24]
    6eb2:	83fb      	strh	r3, [r7, #30]
    6eb4:	687b      	ldr	r3, [r7, #4]
    6eb6:	8b5b      	ldrh	r3, [r3, #26]
    6eb8:	83bb      	strh	r3, [r7, #28]
    6eba:	687b      	ldr	r3, [r7, #4]
    6ebc:	8bdb      	ldrh	r3, [r3, #30]
    6ebe:	837b      	strh	r3, [r7, #26]
    6ec0:	6878      	ldr	r0, [r7, #4]
    6ec2:	f7fe f917 	bl	50f4 <comp_next_label>
    6ec6:	6178      	str	r0, [r7, #20]
    6ec8:	6878      	ldr	r0, [r7, #4]
    6eca:	f7fe f913 	bl	50f4 <comp_next_label>
    6ece:	6138      	str	r0, [r7, #16]
    6ed0:	697b      	ldr	r3, [r7, #20]
    6ed2:	b29a      	uxth	r2, r3
    6ed4:	687b      	ldr	r3, [r7, #4]
    6ed6:	831a      	strh	r2, [r3, #24]
    6ed8:	693b      	ldr	r3, [r7, #16]
    6eda:	b29a      	uxth	r2, r3
    6edc:	687b      	ldr	r3, [r7, #4]
    6ede:	835a      	strh	r2, [r3, #26]
    6ee0:	687b      	ldr	r3, [r7, #4]
    6ee2:	8b9a      	ldrh	r2, [r3, #28]
    6ee4:	687b      	ldr	r3, [r7, #4]
    6ee6:	83da      	strh	r2, [r3, #30]

    if (!mp_parse_node_is_const_false(pns->nodes[0])) { // optimisation: don't emit anything for "while False"
    6ee8:	683b      	ldr	r3, [r7, #0]
    6eea:	689b      	ldr	r3, [r3, #8]
    6eec:	4618      	mov	r0, r3
    6eee:	f7fc fe9c 	bl	3c2a <mp_parse_node_is_const_false>
    6ef2:	4603      	mov	r3, r0
    6ef4:	f083 0301 	eor.w	r3, r3, #1
    6ef8:	b2db      	uxtb	r3, r3
    6efa:	2b00      	cmp	r3, #0
    6efc:	d02d      	beq.n	6f5a <compile_while_stmt+0xb6>
        uint top_label = comp_next_label(comp);
    6efe:	6878      	ldr	r0, [r7, #4]
    6f00:	f7fe f8f8 	bl	50f4 <comp_next_label>
    6f04:	60f8      	str	r0, [r7, #12]
        if (!mp_parse_node_is_const_true(pns->nodes[0])) { // optimisation: don't jump to cond for "while True"
    6f06:	683b      	ldr	r3, [r7, #0]
    6f08:	689b      	ldr	r3, [r3, #8]
    6f0a:	4618      	mov	r0, r3
    6f0c:	f7fc fea9 	bl	3c62 <mp_parse_node_is_const_true>
    6f10:	4603      	mov	r3, r0
    6f12:	f083 0301 	eor.w	r3, r3, #1
    6f16:	b2db      	uxtb	r3, r3
    6f18:	2b00      	cmp	r3, #0
    6f1a:	d005      	beq.n	6f28 <compile_while_stmt+0x84>
            EMIT_ARG(jump, continue_label);
    6f1c:	687b      	ldr	r3, [r7, #4]
    6f1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6f20:	6939      	ldr	r1, [r7, #16]
    6f22:	4618      	mov	r0, r3
    6f24:	f003 fd46 	bl	a9b4 <mp_emit_bc_jump>
        }
        EMIT_ARG(label_assign, top_label);
    6f28:	687b      	ldr	r3, [r7, #4]
    6f2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6f2c:	68f9      	ldr	r1, [r7, #12]
    6f2e:	4618      	mov	r0, r3
    6f30:	f003 fab6 	bl	a4a0 <mp_emit_bc_label_assign>
        compile_node(comp, pns->nodes[1]); // body
    6f34:	683b      	ldr	r3, [r7, #0]
    6f36:	68db      	ldr	r3, [r3, #12]
    6f38:	4619      	mov	r1, r3
    6f3a:	6878      	ldr	r0, [r7, #4]
    6f3c:	f001 fe9b 	bl	8c76 <compile_node>
        EMIT_ARG(label_assign, continue_label);
    6f40:	687b      	ldr	r3, [r7, #4]
    6f42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6f44:	6939      	ldr	r1, [r7, #16]
    6f46:	4618      	mov	r0, r3
    6f48:	f003 faaa 	bl	a4a0 <mp_emit_bc_label_assign>
        c_if_cond(comp, pns->nodes[0], true, top_label); // condition
    6f4c:	683b      	ldr	r3, [r7, #0]
    6f4e:	6899      	ldr	r1, [r3, #8]
    6f50:	68fb      	ldr	r3, [r7, #12]
    6f52:	2201      	movs	r2, #1
    6f54:	6878      	ldr	r0, [r7, #4]
    6f56:	f7fe fa60 	bl	541a <c_if_cond>
    }

    // break/continue apply to outer loop (if any) in the else block
    END_BREAK_CONTINUE_BLOCK
    6f5a:	687b      	ldr	r3, [r7, #4]
    6f5c:	8bfa      	ldrh	r2, [r7, #30]
    6f5e:	831a      	strh	r2, [r3, #24]
    6f60:	687b      	ldr	r3, [r7, #4]
    6f62:	8bba      	ldrh	r2, [r7, #28]
    6f64:	835a      	strh	r2, [r3, #26]
    6f66:	687b      	ldr	r3, [r7, #4]
    6f68:	8b7a      	ldrh	r2, [r7, #26]
    6f6a:	83da      	strh	r2, [r3, #30]

    compile_node(comp, pns->nodes[2]); // else
    6f6c:	683b      	ldr	r3, [r7, #0]
    6f6e:	691b      	ldr	r3, [r3, #16]
    6f70:	4619      	mov	r1, r3
    6f72:	6878      	ldr	r0, [r7, #4]
    6f74:	f001 fe7f 	bl	8c76 <compile_node>

    EMIT_ARG(label_assign, break_label);
    6f78:	687b      	ldr	r3, [r7, #4]
    6f7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6f7c:	6979      	ldr	r1, [r7, #20]
    6f7e:	4618      	mov	r0, r3
    6f80:	f003 fa8e 	bl	a4a0 <mp_emit_bc_label_assign>
}
    6f84:	bf00      	nop
    6f86:	3720      	adds	r7, #32
    6f88:	46bd      	mov	sp, r7
    6f8a:	bd80      	pop	{r7, pc}

00006f8c <compile_for_stmt_optimised_range>:
//    (<step> is a constant for us, so no need to worry about it changing)
//
// If <end> is a small-int, then the stack during the for-loop contains just
// the current value of <var>.  Otherwise, the stack contains <end> then the
// current value of <var>.
STATIC void compile_for_stmt_optimised_range(compiler_t *comp, mp_parse_node_t pn_var, mp_parse_node_t pn_start, mp_parse_node_t pn_end, mp_parse_node_t pn_step, mp_parse_node_t pn_body, mp_parse_node_t pn_else) {
    6f8c:	b580      	push	{r7, lr}
    6f8e:	b08c      	sub	sp, #48	; 0x30
    6f90:	af00      	add	r7, sp, #0
    6f92:	60f8      	str	r0, [r7, #12]
    6f94:	60b9      	str	r1, [r7, #8]
    6f96:	607a      	str	r2, [r7, #4]
    6f98:	603b      	str	r3, [r7, #0]
    START_BREAK_CONTINUE_BLOCK
    6f9a:	68fb      	ldr	r3, [r7, #12]
    6f9c:	8b1b      	ldrh	r3, [r3, #24]
    6f9e:	857b      	strh	r3, [r7, #42]	; 0x2a
    6fa0:	68fb      	ldr	r3, [r7, #12]
    6fa2:	8b5b      	ldrh	r3, [r3, #26]
    6fa4:	853b      	strh	r3, [r7, #40]	; 0x28
    6fa6:	68fb      	ldr	r3, [r7, #12]
    6fa8:	8bdb      	ldrh	r3, [r3, #30]
    6faa:	84fb      	strh	r3, [r7, #38]	; 0x26
    6fac:	68f8      	ldr	r0, [r7, #12]
    6fae:	f7fe f8a1 	bl	50f4 <comp_next_label>
    6fb2:	6238      	str	r0, [r7, #32]
    6fb4:	68f8      	ldr	r0, [r7, #12]
    6fb6:	f7fe f89d 	bl	50f4 <comp_next_label>
    6fba:	61f8      	str	r0, [r7, #28]
    6fbc:	6a3b      	ldr	r3, [r7, #32]
    6fbe:	b29a      	uxth	r2, r3
    6fc0:	68fb      	ldr	r3, [r7, #12]
    6fc2:	831a      	strh	r2, [r3, #24]
    6fc4:	69fb      	ldr	r3, [r7, #28]
    6fc6:	b29a      	uxth	r2, r3
    6fc8:	68fb      	ldr	r3, [r7, #12]
    6fca:	835a      	strh	r2, [r3, #26]
    6fcc:	68fb      	ldr	r3, [r7, #12]
    6fce:	8b9a      	ldrh	r2, [r3, #28]
    6fd0:	68fb      	ldr	r3, [r7, #12]
    6fd2:	83da      	strh	r2, [r3, #30]

    uint top_label = comp_next_label(comp);
    6fd4:	68f8      	ldr	r0, [r7, #12]
    6fd6:	f7fe f88d 	bl	50f4 <comp_next_label>
    6fda:	61b8      	str	r0, [r7, #24]
    uint entry_label = comp_next_label(comp);
    6fdc:	68f8      	ldr	r0, [r7, #12]
    6fde:	f7fe f889 	bl	50f4 <comp_next_label>
    6fe2:	6178      	str	r0, [r7, #20]

    // put the end value on the stack if it's not a small-int constant
    bool end_on_stack = !MP_PARSE_NODE_IS_SMALL_INT(pn_end);
    6fe4:	683b      	ldr	r3, [r7, #0]
    6fe6:	f003 0301 	and.w	r3, r3, #1
    6fea:	2b00      	cmp	r3, #0
    6fec:	bf0c      	ite	eq
    6fee:	2301      	moveq	r3, #1
    6ff0:	2300      	movne	r3, #0
    6ff2:	74fb      	strb	r3, [r7, #19]
    if (end_on_stack) {
    6ff4:	7cfb      	ldrb	r3, [r7, #19]
    6ff6:	2b00      	cmp	r3, #0
    6ff8:	d003      	beq.n	7002 <compile_for_stmt_optimised_range+0x76>
        compile_node(comp, pn_end);
    6ffa:	6839      	ldr	r1, [r7, #0]
    6ffc:	68f8      	ldr	r0, [r7, #12]
    6ffe:	f001 fe3a 	bl	8c76 <compile_node>
    }

    // compile: start
    compile_node(comp, pn_start);
    7002:	6879      	ldr	r1, [r7, #4]
    7004:	68f8      	ldr	r0, [r7, #12]
    7006:	f001 fe36 	bl	8c76 <compile_node>

    EMIT_ARG(jump, entry_label);
    700a:	68fb      	ldr	r3, [r7, #12]
    700c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    700e:	6979      	ldr	r1, [r7, #20]
    7010:	4618      	mov	r0, r3
    7012:	f003 fccf 	bl	a9b4 <mp_emit_bc_jump>
    EMIT_ARG(label_assign, top_label);
    7016:	68fb      	ldr	r3, [r7, #12]
    7018:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    701a:	69b9      	ldr	r1, [r7, #24]
    701c:	4618      	mov	r0, r3
    701e:	f003 fa3f 	bl	a4a0 <mp_emit_bc_label_assign>

    // duplicate next value and store it to var
    EMIT(dup_top);
    7022:	68fb      	ldr	r3, [r7, #12]
    7024:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7026:	4618      	mov	r0, r3
    7028:	f003 fc73 	bl	a912 <mp_emit_bc_dup_top>
    c_assign(comp, pn_var, ASSIGN_STORE);
    702c:	2200      	movs	r2, #0
    702e:	68b9      	ldr	r1, [r7, #8]
    7030:	68f8      	ldr	r0, [r7, #12]
    7032:	f7fe fc91 	bl	5958 <c_assign>

    // compile body
    compile_node(comp, pn_body);
    7036:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
    7038:	68f8      	ldr	r0, [r7, #12]
    703a:	f001 fe1c 	bl	8c76 <compile_node>

    EMIT_ARG(label_assign, continue_label);
    703e:	68fb      	ldr	r3, [r7, #12]
    7040:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7042:	69f9      	ldr	r1, [r7, #28]
    7044:	4618      	mov	r0, r3
    7046:	f003 fa2b 	bl	a4a0 <mp_emit_bc_label_assign>

    // compile: var + step
    compile_node(comp, pn_step);
    704a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
    704c:	68f8      	ldr	r0, [r7, #12]
    704e:	f001 fe12 	bl	8c76 <compile_node>
    EMIT_ARG(binary_op, MP_BINARY_OP_INPLACE_ADD);
    7052:	68fb      	ldr	r3, [r7, #12]
    7054:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7056:	210e      	movs	r1, #14
    7058:	4618      	mov	r0, r3
    705a:	f003 fe04 	bl	ac66 <mp_emit_bc_binary_op>

    EMIT_ARG(label_assign, entry_label);
    705e:	68fb      	ldr	r3, [r7, #12]
    7060:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7062:	6979      	ldr	r1, [r7, #20]
    7064:	4618      	mov	r0, r3
    7066:	f003 fa1b 	bl	a4a0 <mp_emit_bc_label_assign>

    // compile: if var <cond> end: goto top
    if (end_on_stack) {
    706a:	7cfb      	ldrb	r3, [r7, #19]
    706c:	2b00      	cmp	r3, #0
    706e:	d00a      	beq.n	7086 <compile_for_stmt_optimised_range+0xfa>
        EMIT(dup_top_two);
    7070:	68fb      	ldr	r3, [r7, #12]
    7072:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7074:	4618      	mov	r0, r3
    7076:	f003 fc5c 	bl	a932 <mp_emit_bc_dup_top_two>
        EMIT(rot_two);
    707a:	68fb      	ldr	r3, [r7, #12]
    707c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    707e:	4618      	mov	r0, r3
    7080:	f003 fc78 	bl	a974 <mp_emit_bc_rot_two>
    7084:	e008      	b.n	7098 <compile_for_stmt_optimised_range+0x10c>
    } else {
        EMIT(dup_top);
    7086:	68fb      	ldr	r3, [r7, #12]
    7088:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    708a:	4618      	mov	r0, r3
    708c:	f003 fc41 	bl	a912 <mp_emit_bc_dup_top>
        compile_node(comp, pn_end);
    7090:	6839      	ldr	r1, [r7, #0]
    7092:	68f8      	ldr	r0, [r7, #12]
    7094:	f001 fdef 	bl	8c76 <compile_node>
    }
    assert(MP_PARSE_NODE_IS_SMALL_INT(pn_step));
    7098:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    709a:	f003 0301 	and.w	r3, r3, #1
    709e:	2b00      	cmp	r3, #0
    70a0:	d106      	bne.n	70b0 <compile_for_stmt_optimised_range+0x124>
    70a2:	4b38      	ldr	r3, [pc, #224]	; (7184 <compile_for_stmt_optimised_range+0x1f8>)
    70a4:	4a38      	ldr	r2, [pc, #224]	; (7188 <compile_for_stmt_optimised_range+0x1fc>)
    70a6:	f240 517e 	movw	r1, #1406	; 0x57e
    70aa:	4838      	ldr	r0, [pc, #224]	; (718c <compile_for_stmt_optimised_range+0x200>)
    70ac:	f015 ff18 	bl	1cee0 <__assert_func>
    if (MP_PARSE_NODE_LEAF_SMALL_INT(pn_step) >= 0) {
    70b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    70b2:	105b      	asrs	r3, r3, #1
    70b4:	2b00      	cmp	r3, #0
    70b6:	db06      	blt.n	70c6 <compile_for_stmt_optimised_range+0x13a>
        EMIT_ARG(binary_op, MP_BINARY_OP_LESS);
    70b8:	68fb      	ldr	r3, [r7, #12]
    70ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    70bc:	2100      	movs	r1, #0
    70be:	4618      	mov	r0, r3
    70c0:	f003 fdd1 	bl	ac66 <mp_emit_bc_binary_op>
    70c4:	e005      	b.n	70d2 <compile_for_stmt_optimised_range+0x146>
    } else {
        EMIT_ARG(binary_op, MP_BINARY_OP_MORE);
    70c6:	68fb      	ldr	r3, [r7, #12]
    70c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    70ca:	2101      	movs	r1, #1
    70cc:	4618      	mov	r0, r3
    70ce:	f003 fdca 	bl	ac66 <mp_emit_bc_binary_op>
    }
    EMIT_ARG(pop_jump_if, true, top_label);
    70d2:	68fb      	ldr	r3, [r7, #12]
    70d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    70d6:	69ba      	ldr	r2, [r7, #24]
    70d8:	2101      	movs	r1, #1
    70da:	4618      	mov	r0, r3
    70dc:	f003 fc7c 	bl	a9d8 <mp_emit_bc_pop_jump_if>

    // break/continue apply to outer loop (if any) in the else block
    END_BREAK_CONTINUE_BLOCK
    70e0:	68fb      	ldr	r3, [r7, #12]
    70e2:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
    70e4:	831a      	strh	r2, [r3, #24]
    70e6:	68fb      	ldr	r3, [r7, #12]
    70e8:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
    70ea:	835a      	strh	r2, [r3, #26]
    70ec:	68fb      	ldr	r3, [r7, #12]
    70ee:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    70f0:	83da      	strh	r2, [r3, #30]

    // Compile the else block.  We must pop the iterator variables before
    // executing the else code because it may contain break/continue statements.
    uint end_label = 0;
    70f2:	2300      	movs	r3, #0
    70f4:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (!MP_PARSE_NODE_IS_NULL(pn_else)) {
    70f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    70f8:	2b00      	cmp	r3, #0
    70fa:	d022      	beq.n	7142 <compile_for_stmt_optimised_range+0x1b6>
        // discard final value of "var", and possible "end" value
        EMIT(pop_top);
    70fc:	68fb      	ldr	r3, [r7, #12]
    70fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7100:	4618      	mov	r0, r3
    7102:	f003 fc26 	bl	a952 <mp_emit_bc_pop_top>
        if (end_on_stack) {
    7106:	7cfb      	ldrb	r3, [r7, #19]
    7108:	2b00      	cmp	r3, #0
    710a:	d004      	beq.n	7116 <compile_for_stmt_optimised_range+0x18a>
            EMIT(pop_top);
    710c:	68fb      	ldr	r3, [r7, #12]
    710e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7110:	4618      	mov	r0, r3
    7112:	f003 fc1e 	bl	a952 <mp_emit_bc_pop_top>
        }
        compile_node(comp, pn_else);
    7116:	6c39      	ldr	r1, [r7, #64]	; 0x40
    7118:	68f8      	ldr	r0, [r7, #12]
    711a:	f001 fdac 	bl	8c76 <compile_node>
        end_label = comp_next_label(comp);
    711e:	68f8      	ldr	r0, [r7, #12]
    7120:	f7fd ffe8 	bl	50f4 <comp_next_label>
    7124:	62f8      	str	r0, [r7, #44]	; 0x2c
        EMIT_ARG(jump, end_label);
    7126:	68fb      	ldr	r3, [r7, #12]
    7128:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    712a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
    712c:	4618      	mov	r0, r3
    712e:	f003 fc41 	bl	a9b4 <mp_emit_bc_jump>
        EMIT_ARG(adjust_stack_size, 1 + end_on_stack);
    7132:	68fb      	ldr	r3, [r7, #12]
    7134:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    7136:	7cfb      	ldrb	r3, [r7, #19]
    7138:	3301      	adds	r3, #1
    713a:	4619      	mov	r1, r3
    713c:	4610      	mov	r0, r2
    713e:	f003 f960 	bl	a402 <mp_emit_bc_adjust_stack_size>
    }

    EMIT_ARG(label_assign, break_label);
    7142:	68fb      	ldr	r3, [r7, #12]
    7144:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7146:	6a39      	ldr	r1, [r7, #32]
    7148:	4618      	mov	r0, r3
    714a:	f003 f9a9 	bl	a4a0 <mp_emit_bc_label_assign>

    // discard final value of var that failed the loop condition
    EMIT(pop_top);
    714e:	68fb      	ldr	r3, [r7, #12]
    7150:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7152:	4618      	mov	r0, r3
    7154:	f003 fbfd 	bl	a952 <mp_emit_bc_pop_top>

    // discard <end> value if it's on the stack
    if (end_on_stack) {
    7158:	7cfb      	ldrb	r3, [r7, #19]
    715a:	2b00      	cmp	r3, #0
    715c:	d004      	beq.n	7168 <compile_for_stmt_optimised_range+0x1dc>
        EMIT(pop_top);
    715e:	68fb      	ldr	r3, [r7, #12]
    7160:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7162:	4618      	mov	r0, r3
    7164:	f003 fbf5 	bl	a952 <mp_emit_bc_pop_top>
    }

    if (!MP_PARSE_NODE_IS_NULL(pn_else)) {
    7168:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    716a:	2b00      	cmp	r3, #0
    716c:	d005      	beq.n	717a <compile_for_stmt_optimised_range+0x1ee>
        EMIT_ARG(label_assign, end_label);
    716e:	68fb      	ldr	r3, [r7, #12]
    7170:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7172:	6af9      	ldr	r1, [r7, #44]	; 0x2c
    7174:	4618      	mov	r0, r3
    7176:	f003 f993 	bl	a4a0 <mp_emit_bc_label_assign>
    }
}
    717a:	bf00      	nop
    717c:	3730      	adds	r7, #48	; 0x30
    717e:	46bd      	mov	sp, r7
    7180:	bd80      	pop	{r7, pc}
    7182:	bf00      	nop
    7184:	00022128 	.word	0x00022128
    7188:	000228c0 	.word	0x000228c0
    718c:	00021c60 	.word	0x00021c60

00007190 <compile_for_stmt>:

STATIC void compile_for_stmt(compiler_t *comp, mp_parse_node_struct_t *pns) {
    7190:	b580      	push	{r7, lr}
    7192:	b096      	sub	sp, #88	; 0x58
    7194:	af04      	add	r7, sp, #16
    7196:	6078      	str	r0, [r7, #4]
    7198:	6039      	str	r1, [r7, #0]
    // this bit optimises: for <x> in range(...), turning it into an explicitly incremented variable
    // this is actually slower, but uses no heap memory
    // for viper it will be much, much faster
    if (/*comp->scope_cur->emit_options == MP_EMIT_OPT_VIPER &&*/ MP_PARSE_NODE_IS_ID(pns->nodes[0]) && MP_PARSE_NODE_IS_STRUCT_KIND(pns->nodes[1], PN_atom_expr_normal)) {
    719a:	683b      	ldr	r3, [r7, #0]
    719c:	689b      	ldr	r3, [r3, #8]
    719e:	f003 030f 	and.w	r3, r3, #15
    71a2:	2b02      	cmp	r3, #2
    71a4:	f040 80c3 	bne.w	732e <compile_for_stmt+0x19e>
    71a8:	683b      	ldr	r3, [r7, #0]
    71aa:	68db      	ldr	r3, [r3, #12]
    71ac:	2b00      	cmp	r3, #0
    71ae:	f000 80be 	beq.w	732e <compile_for_stmt+0x19e>
    71b2:	683b      	ldr	r3, [r7, #0]
    71b4:	68db      	ldr	r3, [r3, #12]
    71b6:	f003 0303 	and.w	r3, r3, #3
    71ba:	2b00      	cmp	r3, #0
    71bc:	f040 80b7 	bne.w	732e <compile_for_stmt+0x19e>
    71c0:	683b      	ldr	r3, [r7, #0]
    71c2:	68db      	ldr	r3, [r3, #12]
    71c4:	685b      	ldr	r3, [r3, #4]
    71c6:	b2db      	uxtb	r3, r3
    71c8:	2b29      	cmp	r3, #41	; 0x29
    71ca:	f040 80b0 	bne.w	732e <compile_for_stmt+0x19e>
        mp_parse_node_struct_t *pns_it = (mp_parse_node_struct_t*)pns->nodes[1];
    71ce:	683b      	ldr	r3, [r7, #0]
    71d0:	68db      	ldr	r3, [r3, #12]
    71d2:	637b      	str	r3, [r7, #52]	; 0x34
        if (MP_PARSE_NODE_IS_ID(pns_it->nodes[0])
    71d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    71d6:	689b      	ldr	r3, [r3, #8]
    71d8:	f003 030f 	and.w	r3, r3, #15
    71dc:	2b02      	cmp	r3, #2
    71de:	f040 80a6 	bne.w	732e <compile_for_stmt+0x19e>
            && MP_PARSE_NODE_LEAF_ARG(pns_it->nodes[0]) == MP_QSTR_range
    71e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    71e4:	689b      	ldr	r3, [r3, #8]
    71e6:	091b      	lsrs	r3, r3, #4
    71e8:	f240 124b 	movw	r2, #331	; 0x14b
    71ec:	4293      	cmp	r3, r2
    71ee:	f040 809e 	bne.w	732e <compile_for_stmt+0x19e>
            && MP_PARSE_NODE_STRUCT_KIND((mp_parse_node_struct_t*)pns_it->nodes[1]) == PN_trailer_paren) {
    71f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    71f4:	68db      	ldr	r3, [r3, #12]
    71f6:	685b      	ldr	r3, [r3, #4]
    71f8:	b2db      	uxtb	r3, r3
    71fa:	2b2d      	cmp	r3, #45	; 0x2d
    71fc:	f040 8097 	bne.w	732e <compile_for_stmt+0x19e>
            mp_parse_node_t pn_range_args = ((mp_parse_node_struct_t*)pns_it->nodes[1])->nodes[0];
    7200:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    7202:	68db      	ldr	r3, [r3, #12]
    7204:	689b      	ldr	r3, [r3, #8]
    7206:	613b      	str	r3, [r7, #16]
            mp_parse_node_t *args;
            int n_args = mp_parse_node_extract_list(&pn_range_args, PN_arglist, &args);
    7208:	f107 020c 	add.w	r2, r7, #12
    720c:	f107 0310 	add.w	r3, r7, #16
    7210:	2197      	movs	r1, #151	; 0x97
    7212:	4618      	mov	r0, r3
    7214:	f7fc fd8e 	bl	3d34 <mp_parse_node_extract_list>
    7218:	6338      	str	r0, [r7, #48]	; 0x30
            mp_parse_node_t pn_range_start;
            mp_parse_node_t pn_range_end;
            mp_parse_node_t pn_range_step;
            bool optimize = false;
    721a:	2300      	movs	r3, #0
    721c:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
            if (1 <= n_args && n_args <= 3) {
    7220:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    7222:	2b00      	cmp	r3, #0
    7224:	dd6f      	ble.n	7306 <compile_for_stmt+0x176>
    7226:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    7228:	2b03      	cmp	r3, #3
    722a:	dc6c      	bgt.n	7306 <compile_for_stmt+0x176>
                optimize = true;
    722c:	2301      	movs	r3, #1
    722e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
                if (n_args == 1) {
    7232:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    7234:	2b01      	cmp	r3, #1
    7236:	d10b      	bne.n	7250 <compile_for_stmt+0xc0>
                    pn_range_start = mp_parse_node_new_small_int(0);
    7238:	2000      	movs	r0, #0
    723a:	f7fd feff 	bl	503c <mp_parse_node_new_small_int>
    723e:	6478      	str	r0, [r7, #68]	; 0x44
                    pn_range_end = args[0];
    7240:	68fb      	ldr	r3, [r7, #12]
    7242:	681b      	ldr	r3, [r3, #0]
    7244:	643b      	str	r3, [r7, #64]	; 0x40
                    pn_range_step = mp_parse_node_new_small_int(1);
    7246:	2001      	movs	r0, #1
    7248:	f7fd fef8 	bl	503c <mp_parse_node_new_small_int>
    724c:	63f8      	str	r0, [r7, #60]	; 0x3c
    724e:	e022      	b.n	7296 <compile_for_stmt+0x106>
                } else if (n_args == 2) {
    7250:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    7252:	2b02      	cmp	r3, #2
    7254:	d10a      	bne.n	726c <compile_for_stmt+0xdc>
                    pn_range_start = args[0];
    7256:	68fb      	ldr	r3, [r7, #12]
    7258:	681b      	ldr	r3, [r3, #0]
    725a:	647b      	str	r3, [r7, #68]	; 0x44
                    pn_range_end = args[1];
    725c:	68fb      	ldr	r3, [r7, #12]
    725e:	685b      	ldr	r3, [r3, #4]
    7260:	643b      	str	r3, [r7, #64]	; 0x40
                    pn_range_step = mp_parse_node_new_small_int(1);
    7262:	2001      	movs	r0, #1
    7264:	f7fd feea 	bl	503c <mp_parse_node_new_small_int>
    7268:	63f8      	str	r0, [r7, #60]	; 0x3c
    726a:	e014      	b.n	7296 <compile_for_stmt+0x106>
                } else {
                    pn_range_start = args[0];
    726c:	68fb      	ldr	r3, [r7, #12]
    726e:	681b      	ldr	r3, [r3, #0]
    7270:	647b      	str	r3, [r7, #68]	; 0x44
                    pn_range_end = args[1];
    7272:	68fb      	ldr	r3, [r7, #12]
    7274:	685b      	ldr	r3, [r3, #4]
    7276:	643b      	str	r3, [r7, #64]	; 0x40
                    pn_range_step = args[2];
    7278:	68fb      	ldr	r3, [r7, #12]
    727a:	689b      	ldr	r3, [r3, #8]
    727c:	63fb      	str	r3, [r7, #60]	; 0x3c
                    // the step must be a non-zero constant integer to do the optimisation
                    if (!MP_PARSE_NODE_IS_SMALL_INT(pn_range_step)
    727e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    7280:	f003 0301 	and.w	r3, r3, #1
    7284:	2b00      	cmp	r3, #0
    7286:	d003      	beq.n	7290 <compile_for_stmt+0x100>
                        || MP_PARSE_NODE_LEAF_SMALL_INT(pn_range_step) == 0) {
    7288:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    728a:	105b      	asrs	r3, r3, #1
    728c:	2b00      	cmp	r3, #0
    728e:	d102      	bne.n	7296 <compile_for_stmt+0x106>
                        optimize = false;
    7290:	2300      	movs	r3, #0
    7292:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
                    }
                }
                // arguments must be able to be compiled as standard expressions
                if (optimize && MP_PARSE_NODE_IS_STRUCT(pn_range_start)) {
    7296:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
    729a:	2b00      	cmp	r3, #0
    729c:	d017      	beq.n	72ce <compile_for_stmt+0x13e>
    729e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    72a0:	2b00      	cmp	r3, #0
    72a2:	d014      	beq.n	72ce <compile_for_stmt+0x13e>
    72a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    72a6:	f003 0303 	and.w	r3, r3, #3
    72aa:	2b00      	cmp	r3, #0
    72ac:	d10f      	bne.n	72ce <compile_for_stmt+0x13e>
                    int k = MP_PARSE_NODE_STRUCT_KIND((mp_parse_node_struct_t*)pn_range_start);
    72ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    72b0:	685b      	ldr	r3, [r3, #4]
    72b2:	b2db      	uxtb	r3, r3
    72b4:	62fb      	str	r3, [r7, #44]	; 0x2c
                    if (k == PN_arglist_star || k == PN_arglist_dbl_star || k == PN_argument) {
    72b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    72b8:	2b99      	cmp	r3, #153	; 0x99
    72ba:	d005      	beq.n	72c8 <compile_for_stmt+0x138>
    72bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    72be:	2b9a      	cmp	r3, #154	; 0x9a
    72c0:	d002      	beq.n	72c8 <compile_for_stmt+0x138>
    72c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    72c4:	2b9b      	cmp	r3, #155	; 0x9b
    72c6:	d102      	bne.n	72ce <compile_for_stmt+0x13e>
                        optimize = false;
    72c8:	2300      	movs	r3, #0
    72ca:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
                    }
                }
                if (optimize && MP_PARSE_NODE_IS_STRUCT(pn_range_end)) {
    72ce:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
    72d2:	2b00      	cmp	r3, #0
    72d4:	d017      	beq.n	7306 <compile_for_stmt+0x176>
    72d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    72d8:	2b00      	cmp	r3, #0
    72da:	d014      	beq.n	7306 <compile_for_stmt+0x176>
    72dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    72de:	f003 0303 	and.w	r3, r3, #3
    72e2:	2b00      	cmp	r3, #0
    72e4:	d10f      	bne.n	7306 <compile_for_stmt+0x176>
                    int k = MP_PARSE_NODE_STRUCT_KIND((mp_parse_node_struct_t*)pn_range_end);
    72e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    72e8:	685b      	ldr	r3, [r3, #4]
    72ea:	b2db      	uxtb	r3, r3
    72ec:	62bb      	str	r3, [r7, #40]	; 0x28
                    if (k == PN_arglist_star || k == PN_arglist_dbl_star || k == PN_argument) {
    72ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
    72f0:	2b99      	cmp	r3, #153	; 0x99
    72f2:	d005      	beq.n	7300 <compile_for_stmt+0x170>
    72f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
    72f6:	2b9a      	cmp	r3, #154	; 0x9a
    72f8:	d002      	beq.n	7300 <compile_for_stmt+0x170>
    72fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
    72fc:	2b9b      	cmp	r3, #155	; 0x9b
    72fe:	d102      	bne.n	7306 <compile_for_stmt+0x176>
                        optimize = false;
    7300:	2300      	movs	r3, #0
    7302:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
                    }
                }
            }
            if (optimize) {
    7306:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
    730a:	2b00      	cmp	r3, #0
    730c:	d00f      	beq.n	732e <compile_for_stmt+0x19e>
                compile_for_stmt_optimised_range(comp, pns->nodes[0], pn_range_start, pn_range_end, pn_range_step, pns->nodes[2], pns->nodes[3]);
    730e:	683b      	ldr	r3, [r7, #0]
    7310:	6899      	ldr	r1, [r3, #8]
    7312:	683b      	ldr	r3, [r7, #0]
    7314:	691b      	ldr	r3, [r3, #16]
    7316:	683a      	ldr	r2, [r7, #0]
    7318:	6952      	ldr	r2, [r2, #20]
    731a:	9202      	str	r2, [sp, #8]
    731c:	9301      	str	r3, [sp, #4]
    731e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    7320:	9300      	str	r3, [sp, #0]
    7322:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    7324:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    7326:	6878      	ldr	r0, [r7, #4]
    7328:	f7ff fe30 	bl	6f8c <compile_for_stmt_optimised_range>
    732c:	e07f      	b.n	742e <compile_for_stmt+0x29e>
                return;
            }
        }
    }

    START_BREAK_CONTINUE_BLOCK
    732e:	687b      	ldr	r3, [r7, #4]
    7330:	8b1b      	ldrh	r3, [r3, #24]
    7332:	84fb      	strh	r3, [r7, #38]	; 0x26
    7334:	687b      	ldr	r3, [r7, #4]
    7336:	8b5b      	ldrh	r3, [r3, #26]
    7338:	84bb      	strh	r3, [r7, #36]	; 0x24
    733a:	687b      	ldr	r3, [r7, #4]
    733c:	8bdb      	ldrh	r3, [r3, #30]
    733e:	847b      	strh	r3, [r7, #34]	; 0x22
    7340:	6878      	ldr	r0, [r7, #4]
    7342:	f7fd fed7 	bl	50f4 <comp_next_label>
    7346:	61f8      	str	r0, [r7, #28]
    7348:	6878      	ldr	r0, [r7, #4]
    734a:	f7fd fed3 	bl	50f4 <comp_next_label>
    734e:	61b8      	str	r0, [r7, #24]
    7350:	69fb      	ldr	r3, [r7, #28]
    7352:	b29a      	uxth	r2, r3
    7354:	687b      	ldr	r3, [r7, #4]
    7356:	831a      	strh	r2, [r3, #24]
    7358:	69bb      	ldr	r3, [r7, #24]
    735a:	b29a      	uxth	r2, r3
    735c:	687b      	ldr	r3, [r7, #4]
    735e:	835a      	strh	r2, [r3, #26]
    7360:	687b      	ldr	r3, [r7, #4]
    7362:	8b9a      	ldrh	r2, [r3, #28]
    7364:	687b      	ldr	r3, [r7, #4]
    7366:	83da      	strh	r2, [r3, #30]
    comp->break_label |= MP_EMIT_BREAK_FROM_FOR;
    7368:	687b      	ldr	r3, [r7, #4]
    736a:	8b1b      	ldrh	r3, [r3, #24]
    736c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
    7370:	ea6f 4353 	mvn.w	r3, r3, lsr #17
    7374:	b29a      	uxth	r2, r3
    7376:	687b      	ldr	r3, [r7, #4]
    7378:	831a      	strh	r2, [r3, #24]

    uint pop_label = comp_next_label(comp);
    737a:	6878      	ldr	r0, [r7, #4]
    737c:	f7fd feba 	bl	50f4 <comp_next_label>
    7380:	6178      	str	r0, [r7, #20]

    compile_node(comp, pns->nodes[1]); // iterator
    7382:	683b      	ldr	r3, [r7, #0]
    7384:	68db      	ldr	r3, [r3, #12]
    7386:	4619      	mov	r1, r3
    7388:	6878      	ldr	r0, [r7, #4]
    738a:	f001 fc74 	bl	8c76 <compile_node>
    EMIT_ARG(get_iter, true);
    738e:	687b      	ldr	r3, [r7, #4]
    7390:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7392:	2101      	movs	r1, #1
    7394:	4618      	mov	r0, r3
    7396:	f003 fbf4 	bl	ab82 <mp_emit_bc_get_iter>
    EMIT_ARG(label_assign, continue_label);
    739a:	687b      	ldr	r3, [r7, #4]
    739c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    739e:	69b9      	ldr	r1, [r7, #24]
    73a0:	4618      	mov	r0, r3
    73a2:	f003 f87d 	bl	a4a0 <mp_emit_bc_label_assign>
    EMIT_ARG(for_iter, pop_label);
    73a6:	687b      	ldr	r3, [r7, #4]
    73a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    73aa:	6979      	ldr	r1, [r7, #20]
    73ac:	4618      	mov	r0, r3
    73ae:	f003 fc06 	bl	abbe <mp_emit_bc_for_iter>
    c_assign(comp, pns->nodes[0], ASSIGN_STORE); // variable
    73b2:	683b      	ldr	r3, [r7, #0]
    73b4:	689b      	ldr	r3, [r3, #8]
    73b6:	2200      	movs	r2, #0
    73b8:	4619      	mov	r1, r3
    73ba:	6878      	ldr	r0, [r7, #4]
    73bc:	f7fe facc 	bl	5958 <c_assign>
    compile_node(comp, pns->nodes[2]); // body
    73c0:	683b      	ldr	r3, [r7, #0]
    73c2:	691b      	ldr	r3, [r3, #16]
    73c4:	4619      	mov	r1, r3
    73c6:	6878      	ldr	r0, [r7, #4]
    73c8:	f001 fc55 	bl	8c76 <compile_node>
    if (!EMIT(last_emit_was_return_value)) {
    73cc:	687b      	ldr	r3, [r7, #4]
    73ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    73d0:	4618      	mov	r0, r3
    73d2:	f003 f805 	bl	a3e0 <mp_emit_bc_last_emit_was_return_value>
    73d6:	4603      	mov	r3, r0
    73d8:	f083 0301 	eor.w	r3, r3, #1
    73dc:	b2db      	uxtb	r3, r3
    73de:	2b00      	cmp	r3, #0
    73e0:	d005      	beq.n	73ee <compile_for_stmt+0x25e>
        EMIT_ARG(jump, continue_label);
    73e2:	687b      	ldr	r3, [r7, #4]
    73e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    73e6:	69b9      	ldr	r1, [r7, #24]
    73e8:	4618      	mov	r0, r3
    73ea:	f003 fae3 	bl	a9b4 <mp_emit_bc_jump>
    }
    EMIT_ARG(label_assign, pop_label);
    73ee:	687b      	ldr	r3, [r7, #4]
    73f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    73f2:	6979      	ldr	r1, [r7, #20]
    73f4:	4618      	mov	r0, r3
    73f6:	f003 f853 	bl	a4a0 <mp_emit_bc_label_assign>
    EMIT(for_iter_end);
    73fa:	687b      	ldr	r3, [r7, #4]
    73fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    73fe:	4618      	mov	r0, r3
    7400:	f003 fbef 	bl	abe2 <mp_emit_bc_for_iter_end>

    // break/continue apply to outer loop (if any) in the else block
    END_BREAK_CONTINUE_BLOCK
    7404:	687b      	ldr	r3, [r7, #4]
    7406:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    7408:	831a      	strh	r2, [r3, #24]
    740a:	687b      	ldr	r3, [r7, #4]
    740c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
    740e:	835a      	strh	r2, [r3, #26]
    7410:	687b      	ldr	r3, [r7, #4]
    7412:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
    7414:	83da      	strh	r2, [r3, #30]

    compile_node(comp, pns->nodes[3]); // else (may be empty)
    7416:	683b      	ldr	r3, [r7, #0]
    7418:	695b      	ldr	r3, [r3, #20]
    741a:	4619      	mov	r1, r3
    741c:	6878      	ldr	r0, [r7, #4]
    741e:	f001 fc2a 	bl	8c76 <compile_node>

    EMIT_ARG(label_assign, break_label);
    7422:	687b      	ldr	r3, [r7, #4]
    7424:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7426:	69f9      	ldr	r1, [r7, #28]
    7428:	4618      	mov	r0, r3
    742a:	f003 f839 	bl	a4a0 <mp_emit_bc_label_assign>
}
    742e:	3748      	adds	r7, #72	; 0x48
    7430:	46bd      	mov	sp, r7
    7432:	bd80      	pop	{r7, pc}

00007434 <compile_try_except>:

STATIC void compile_try_except(compiler_t *comp, mp_parse_node_t pn_body, int n_except, mp_parse_node_t *pn_excepts, mp_parse_node_t pn_else) {
    7434:	b580      	push	{r7, lr}
    7436:	b08e      	sub	sp, #56	; 0x38
    7438:	af00      	add	r7, sp, #0
    743a:	60f8      	str	r0, [r7, #12]
    743c:	60b9      	str	r1, [r7, #8]
    743e:	607a      	str	r2, [r7, #4]
    7440:	603b      	str	r3, [r7, #0]
    // setup code
    uint l1 = comp_next_label(comp);
    7442:	68f8      	ldr	r0, [r7, #12]
    7444:	f7fd fe56 	bl	50f4 <comp_next_label>
    7448:	6278      	str	r0, [r7, #36]	; 0x24
    uint success_label = comp_next_label(comp);
    744a:	68f8      	ldr	r0, [r7, #12]
    744c:	f7fd fe52 	bl	50f4 <comp_next_label>
    7450:	6238      	str	r0, [r7, #32]

    compile_increase_except_level(comp, l1, MP_EMIT_SETUP_BLOCK_EXCEPT);
    7452:	2202      	movs	r2, #2
    7454:	6a79      	ldr	r1, [r7, #36]	; 0x24
    7456:	68f8      	ldr	r0, [r7, #12]
    7458:	f7fd fe5b 	bl	5112 <compile_increase_except_level>

    compile_node(comp, pn_body); // body
    745c:	68b9      	ldr	r1, [r7, #8]
    745e:	68f8      	ldr	r0, [r7, #12]
    7460:	f001 fc09 	bl	8c76 <compile_node>
    EMIT(pop_block);
    7464:	68fb      	ldr	r3, [r7, #12]
    7466:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7468:	4618      	mov	r0, r3
    746a:	f003 fbc7 	bl	abfc <mp_emit_bc_pop_block>
    EMIT_ARG(jump, success_label); // jump over exception handler
    746e:	68fb      	ldr	r3, [r7, #12]
    7470:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7472:	6a39      	ldr	r1, [r7, #32]
    7474:	4618      	mov	r0, r3
    7476:	f003 fa9d 	bl	a9b4 <mp_emit_bc_jump>

    EMIT_ARG(label_assign, l1); // start of exception handler
    747a:	68fb      	ldr	r3, [r7, #12]
    747c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    747e:	6a79      	ldr	r1, [r7, #36]	; 0x24
    7480:	4618      	mov	r0, r3
    7482:	f003 f80d 	bl	a4a0 <mp_emit_bc_label_assign>
    EMIT(start_except_handler);
    7486:	68fb      	ldr	r3, [r7, #12]
    7488:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    748a:	4618      	mov	r0, r3
    748c:	f003 fdd8 	bl	b040 <mp_emit_bc_start_except_handler>

    // at this point the top of the stack contains the exception instance that was raised

    uint l2 = comp_next_label(comp);
    7490:	68f8      	ldr	r0, [r7, #12]
    7492:	f7fd fe2f 	bl	50f4 <comp_next_label>
    7496:	61f8      	str	r0, [r7, #28]

    for (int i = 0; i < n_except; i++) {
    7498:	2300      	movs	r3, #0
    749a:	637b      	str	r3, [r7, #52]	; 0x34
    749c:	e0d4      	b.n	7648 <compile_try_except+0x214>
        assert(MP_PARSE_NODE_IS_STRUCT_KIND(pn_excepts[i], PN_try_stmt_except)); // should be
    749e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    74a0:	009b      	lsls	r3, r3, #2
    74a2:	683a      	ldr	r2, [r7, #0]
    74a4:	4413      	add	r3, r2
    74a6:	681b      	ldr	r3, [r3, #0]
    74a8:	2b00      	cmp	r3, #0
    74aa:	d011      	beq.n	74d0 <compile_try_except+0x9c>
    74ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    74ae:	009b      	lsls	r3, r3, #2
    74b0:	683a      	ldr	r2, [r7, #0]
    74b2:	4413      	add	r3, r2
    74b4:	681b      	ldr	r3, [r3, #0]
    74b6:	f003 0303 	and.w	r3, r3, #3
    74ba:	2b00      	cmp	r3, #0
    74bc:	d108      	bne.n	74d0 <compile_try_except+0x9c>
    74be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    74c0:	009b      	lsls	r3, r3, #2
    74c2:	683a      	ldr	r2, [r7, #0]
    74c4:	4413      	add	r3, r2
    74c6:	681b      	ldr	r3, [r3, #0]
    74c8:	685b      	ldr	r3, [r3, #4]
    74ca:	b2db      	uxtb	r3, r3
    74cc:	2b6e      	cmp	r3, #110	; 0x6e
    74ce:	d006      	beq.n	74de <compile_try_except+0xaa>
    74d0:	4b6d      	ldr	r3, [pc, #436]	; (7688 <compile_try_except+0x254>)
    74d2:	4a6e      	ldr	r2, [pc, #440]	; (768c <compile_try_except+0x258>)
    74d4:	f240 610c 	movw	r1, #1548	; 0x60c
    74d8:	486d      	ldr	r0, [pc, #436]	; (7690 <compile_try_except+0x25c>)
    74da:	f015 fd01 	bl	1cee0 <__assert_func>
        mp_parse_node_struct_t *pns_except = (mp_parse_node_struct_t*)pn_excepts[i];
    74de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    74e0:	009b      	lsls	r3, r3, #2
    74e2:	683a      	ldr	r2, [r7, #0]
    74e4:	4413      	add	r3, r2
    74e6:	681b      	ldr	r3, [r3, #0]
    74e8:	61bb      	str	r3, [r7, #24]

        qstr qstr_exception_local = 0;
    74ea:	2300      	movs	r3, #0
    74ec:	633b      	str	r3, [r7, #48]	; 0x30
        uint end_finally_label = comp_next_label(comp);
    74ee:	68f8      	ldr	r0, [r7, #12]
    74f0:	f7fd fe00 	bl	50f4 <comp_next_label>
    74f4:	6178      	str	r0, [r7, #20]

        if (MP_PARSE_NODE_IS_NULL(pns_except->nodes[0])) {
    74f6:	69bb      	ldr	r3, [r7, #24]
    74f8:	689b      	ldr	r3, [r3, #8]
    74fa:	2b00      	cmp	r3, #0
    74fc:	d112      	bne.n	7524 <compile_try_except+0xf0>
            // this is a catch all exception handler
            if (i + 1 != n_except) {
    74fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    7500:	1c5a      	adds	r2, r3, #1
    7502:	687b      	ldr	r3, [r7, #4]
    7504:	429a      	cmp	r2, r3
    7506:	d03c      	beq.n	7582 <compile_try_except+0x14e>
                compile_syntax_error(comp, pn_excepts[i], "default 'except' must be last");
    7508:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    750a:	009b      	lsls	r3, r3, #2
    750c:	683a      	ldr	r2, [r7, #0]
    750e:	4413      	add	r3, r2
    7510:	681b      	ldr	r3, [r3, #0]
    7512:	4a60      	ldr	r2, [pc, #384]	; (7694 <compile_try_except+0x260>)
    7514:	4619      	mov	r1, r3
    7516:	68f8      	ldr	r0, [r7, #12]
    7518:	f7fd fdd1 	bl	50be <compile_syntax_error>
                compile_decrease_except_level(comp);
    751c:	68f8      	ldr	r0, [r7, #12]
    751e:	f7fd fe1b 	bl	5158 <compile_decrease_except_level>
                return;
    7522:	e0ae      	b.n	7682 <compile_try_except+0x24e>
            }
        } else {
            // this exception handler requires a match to a certain type of exception
            mp_parse_node_t pns_exception_expr = pns_except->nodes[0];
    7524:	69bb      	ldr	r3, [r7, #24]
    7526:	689b      	ldr	r3, [r3, #8]
    7528:	62fb      	str	r3, [r7, #44]	; 0x2c
            if (MP_PARSE_NODE_IS_STRUCT(pns_exception_expr)) {
    752a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    752c:	2b00      	cmp	r3, #0
    752e:	d012      	beq.n	7556 <compile_try_except+0x122>
    7530:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    7532:	f003 0303 	and.w	r3, r3, #3
    7536:	2b00      	cmp	r3, #0
    7538:	d10d      	bne.n	7556 <compile_try_except+0x122>
                mp_parse_node_struct_t *pns3 = (mp_parse_node_struct_t*)pns_exception_expr;
    753a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    753c:	613b      	str	r3, [r7, #16]
                if (MP_PARSE_NODE_STRUCT_KIND(pns3) == PN_try_stmt_as_name) {
    753e:	693b      	ldr	r3, [r7, #16]
    7540:	685b      	ldr	r3, [r3, #4]
    7542:	b2db      	uxtb	r3, r3
    7544:	2b6f      	cmp	r3, #111	; 0x6f
    7546:	d106      	bne.n	7556 <compile_try_except+0x122>
                    // handler binds the exception to a local
                    pns_exception_expr = pns3->nodes[0];
    7548:	693b      	ldr	r3, [r7, #16]
    754a:	689b      	ldr	r3, [r3, #8]
    754c:	62fb      	str	r3, [r7, #44]	; 0x2c
                    qstr_exception_local = MP_PARSE_NODE_LEAF_ARG(pns3->nodes[1]);
    754e:	693b      	ldr	r3, [r7, #16]
    7550:	68db      	ldr	r3, [r3, #12]
    7552:	091b      	lsrs	r3, r3, #4
    7554:	633b      	str	r3, [r7, #48]	; 0x30
                }
            }
            EMIT(dup_top);
    7556:	68fb      	ldr	r3, [r7, #12]
    7558:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    755a:	4618      	mov	r0, r3
    755c:	f003 f9d9 	bl	a912 <mp_emit_bc_dup_top>
            compile_node(comp, pns_exception_expr);
    7560:	6af9      	ldr	r1, [r7, #44]	; 0x2c
    7562:	68f8      	ldr	r0, [r7, #12]
    7564:	f001 fb87 	bl	8c76 <compile_node>
            EMIT_ARG(binary_op, MP_BINARY_OP_EXCEPTION_MATCH);
    7568:	68fb      	ldr	r3, [r7, #12]
    756a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    756c:	2108      	movs	r1, #8
    756e:	4618      	mov	r0, r3
    7570:	f003 fb79 	bl	ac66 <mp_emit_bc_binary_op>
            EMIT_ARG(pop_jump_if, false, end_finally_label);
    7574:	68fb      	ldr	r3, [r7, #12]
    7576:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7578:	697a      	ldr	r2, [r7, #20]
    757a:	2100      	movs	r1, #0
    757c:	4618      	mov	r0, r3
    757e:	f003 fa2b 	bl	a9d8 <mp_emit_bc_pop_jump_if>
        }

        // either discard or store the exception instance
        if (qstr_exception_local == 0) {
    7582:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    7584:	2b00      	cmp	r3, #0
    7586:	d105      	bne.n	7594 <compile_try_except+0x160>
            EMIT(pop_top);
    7588:	68fb      	ldr	r3, [r7, #12]
    758a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    758c:	4618      	mov	r0, r3
    758e:	f003 f9e0 	bl	a952 <mp_emit_bc_pop_top>
    7592:	e003      	b.n	759c <compile_try_except+0x168>
        } else {
            compile_store_id(comp, qstr_exception_local);
    7594:	6b39      	ldr	r1, [r7, #48]	; 0x30
    7596:	68f8      	ldr	r0, [r7, #12]
    7598:	f7fd feba 	bl	5310 <compile_store_id>
        }

        uint l3 = 0;
    759c:	2300      	movs	r3, #0
    759e:	62bb      	str	r3, [r7, #40]	; 0x28
        if (qstr_exception_local != 0) {
    75a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    75a2:	2b00      	cmp	r3, #0
    75a4:	d008      	beq.n	75b8 <compile_try_except+0x184>
            l3 = comp_next_label(comp);
    75a6:	68f8      	ldr	r0, [r7, #12]
    75a8:	f7fd fda4 	bl	50f4 <comp_next_label>
    75ac:	62b8      	str	r0, [r7, #40]	; 0x28
            compile_increase_except_level(comp, l3, MP_EMIT_SETUP_BLOCK_FINALLY);
    75ae:	2203      	movs	r2, #3
    75b0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
    75b2:	68f8      	ldr	r0, [r7, #12]
    75b4:	f7fd fdad 	bl	5112 <compile_increase_except_level>
        }
        compile_node(comp, pns_except->nodes[1]);
    75b8:	69bb      	ldr	r3, [r7, #24]
    75ba:	68db      	ldr	r3, [r3, #12]
    75bc:	4619      	mov	r1, r3
    75be:	68f8      	ldr	r0, [r7, #12]
    75c0:	f001 fb59 	bl	8c76 <compile_node>
        if (qstr_exception_local != 0) {
    75c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    75c6:	2b00      	cmp	r3, #0
    75c8:	d004      	beq.n	75d4 <compile_try_except+0x1a0>
            EMIT(pop_block);
    75ca:	68fb      	ldr	r3, [r7, #12]
    75cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    75ce:	4618      	mov	r0, r3
    75d0:	f003 fb14 	bl	abfc <mp_emit_bc_pop_block>
        }
        EMIT(pop_except);
    75d4:	68fb      	ldr	r3, [r7, #12]
    75d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    75d8:	4618      	mov	r0, r3
    75da:	f003 fb1f 	bl	ac1c <mp_emit_bc_pop_except>
        if (qstr_exception_local != 0) {
    75de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    75e0:	2b00      	cmp	r3, #0
    75e2:	d01c      	beq.n	761e <compile_try_except+0x1ea>
            EMIT_ARG(load_const_tok, MP_TOKEN_KW_NONE);
    75e4:	68fb      	ldr	r3, [r7, #12]
    75e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    75e8:	210e      	movs	r1, #14
    75ea:	4618      	mov	r0, r3
    75ec:	f002 ffd6 	bl	a59c <mp_emit_bc_load_const_tok>
            EMIT_ARG(label_assign, l3);
    75f0:	68fb      	ldr	r3, [r7, #12]
    75f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    75f4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
    75f6:	4618      	mov	r0, r3
    75f8:	f002 ff52 	bl	a4a0 <mp_emit_bc_label_assign>
            EMIT_ARG(load_const_tok, MP_TOKEN_KW_NONE);
    75fc:	68fb      	ldr	r3, [r7, #12]
    75fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7600:	210e      	movs	r1, #14
    7602:	4618      	mov	r0, r3
    7604:	f002 ffca 	bl	a59c <mp_emit_bc_load_const_tok>
            compile_store_id(comp, qstr_exception_local);
    7608:	6b39      	ldr	r1, [r7, #48]	; 0x30
    760a:	68f8      	ldr	r0, [r7, #12]
    760c:	f7fd fe80 	bl	5310 <compile_store_id>
            compile_delete_id(comp, qstr_exception_local);
    7610:	6b39      	ldr	r1, [r7, #48]	; 0x30
    7612:	68f8      	ldr	r0, [r7, #12]
    7614:	f7fd fe9a 	bl	534c <compile_delete_id>

            compile_decrease_except_level(comp);
    7618:	68f8      	ldr	r0, [r7, #12]
    761a:	f7fd fd9d 	bl	5158 <compile_decrease_except_level>
        }
        EMIT_ARG(jump, l2);
    761e:	68fb      	ldr	r3, [r7, #12]
    7620:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7622:	69f9      	ldr	r1, [r7, #28]
    7624:	4618      	mov	r0, r3
    7626:	f003 f9c5 	bl	a9b4 <mp_emit_bc_jump>
        EMIT_ARG(label_assign, end_finally_label);
    762a:	68fb      	ldr	r3, [r7, #12]
    762c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    762e:	6979      	ldr	r1, [r7, #20]
    7630:	4618      	mov	r0, r3
    7632:	f002 ff35 	bl	a4a0 <mp_emit_bc_label_assign>
        EMIT_ARG(adjust_stack_size, 1); // stack adjust for the exception instance
    7636:	68fb      	ldr	r3, [r7, #12]
    7638:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    763a:	2101      	movs	r1, #1
    763c:	4618      	mov	r0, r3
    763e:	f002 fee0 	bl	a402 <mp_emit_bc_adjust_stack_size>
    for (int i = 0; i < n_except; i++) {
    7642:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    7644:	3301      	adds	r3, #1
    7646:	637b      	str	r3, [r7, #52]	; 0x34
    7648:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    764a:	687b      	ldr	r3, [r7, #4]
    764c:	429a      	cmp	r2, r3
    764e:	f6ff af26 	blt.w	749e <compile_try_except+0x6a>
    }

    compile_decrease_except_level(comp);
    7652:	68f8      	ldr	r0, [r7, #12]
    7654:	f7fd fd80 	bl	5158 <compile_decrease_except_level>
    EMIT(end_except_handler);
    7658:	68fb      	ldr	r3, [r7, #12]
    765a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    765c:	4618      	mov	r0, r3
    765e:	f003 fcfb 	bl	b058 <mp_emit_bc_end_except_handler>

    EMIT_ARG(label_assign, success_label);
    7662:	68fb      	ldr	r3, [r7, #12]
    7664:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7666:	6a39      	ldr	r1, [r7, #32]
    7668:	4618      	mov	r0, r3
    766a:	f002 ff19 	bl	a4a0 <mp_emit_bc_label_assign>
    compile_node(comp, pn_else); // else block, can be null
    766e:	6c39      	ldr	r1, [r7, #64]	; 0x40
    7670:	68f8      	ldr	r0, [r7, #12]
    7672:	f001 fb00 	bl	8c76 <compile_node>
    EMIT_ARG(label_assign, l2);
    7676:	68fb      	ldr	r3, [r7, #12]
    7678:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    767a:	69f9      	ldr	r1, [r7, #28]
    767c:	4618      	mov	r0, r3
    767e:	f002 ff0f 	bl	a4a0 <mp_emit_bc_label_assign>
}
    7682:	3738      	adds	r7, #56	; 0x38
    7684:	46bd      	mov	sp, r7
    7686:	bd80      	pop	{r7, pc}
    7688:	0002214c 	.word	0x0002214c
    768c:	000228e4 	.word	0x000228e4
    7690:	00021c60 	.word	0x00021c60
    7694:	0002218c 	.word	0x0002218c

00007698 <compile_try_finally>:

STATIC void compile_try_finally(compiler_t *comp, mp_parse_node_t pn_body, int n_except, mp_parse_node_t *pn_except, mp_parse_node_t pn_else, mp_parse_node_t pn_finally) {
    7698:	b580      	push	{r7, lr}
    769a:	b088      	sub	sp, #32
    769c:	af02      	add	r7, sp, #8
    769e:	60f8      	str	r0, [r7, #12]
    76a0:	60b9      	str	r1, [r7, #8]
    76a2:	607a      	str	r2, [r7, #4]
    76a4:	603b      	str	r3, [r7, #0]
    uint l_finally_block = comp_next_label(comp);
    76a6:	68f8      	ldr	r0, [r7, #12]
    76a8:	f7fd fd24 	bl	50f4 <comp_next_label>
    76ac:	6178      	str	r0, [r7, #20]

    compile_increase_except_level(comp, l_finally_block, MP_EMIT_SETUP_BLOCK_FINALLY);
    76ae:	2203      	movs	r2, #3
    76b0:	6979      	ldr	r1, [r7, #20]
    76b2:	68f8      	ldr	r0, [r7, #12]
    76b4:	f7fd fd2d 	bl	5112 <compile_increase_except_level>

    if (n_except == 0) {
    76b8:	687b      	ldr	r3, [r7, #4]
    76ba:	2b00      	cmp	r3, #0
    76bc:	d11b      	bne.n	76f6 <compile_try_finally+0x5e>
        assert(MP_PARSE_NODE_IS_NULL(pn_else));
    76be:	6a3b      	ldr	r3, [r7, #32]
    76c0:	2b00      	cmp	r3, #0
    76c2:	d006      	beq.n	76d2 <compile_try_finally+0x3a>
    76c4:	4b1e      	ldr	r3, [pc, #120]	; (7740 <compile_try_finally+0xa8>)
    76c6:	4a1f      	ldr	r2, [pc, #124]	; (7744 <compile_try_finally+0xac>)
    76c8:	f240 6157 	movw	r1, #1623	; 0x657
    76cc:	481e      	ldr	r0, [pc, #120]	; (7748 <compile_try_finally+0xb0>)
    76ce:	f015 fc07 	bl	1cee0 <__assert_func>
        EMIT_ARG(adjust_stack_size, 3); // stack adjust for possible UNWIND_JUMP state
    76d2:	68fb      	ldr	r3, [r7, #12]
    76d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    76d6:	2103      	movs	r1, #3
    76d8:	4618      	mov	r0, r3
    76da:	f002 fe92 	bl	a402 <mp_emit_bc_adjust_stack_size>
        compile_node(comp, pn_body);
    76de:	68b9      	ldr	r1, [r7, #8]
    76e0:	68f8      	ldr	r0, [r7, #12]
    76e2:	f001 fac8 	bl	8c76 <compile_node>
        EMIT_ARG(adjust_stack_size, -3);
    76e6:	68fb      	ldr	r3, [r7, #12]
    76e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    76ea:	f06f 0102 	mvn.w	r1, #2
    76ee:	4618      	mov	r0, r3
    76f0:	f002 fe87 	bl	a402 <mp_emit_bc_adjust_stack_size>
    76f4:	e007      	b.n	7706 <compile_try_finally+0x6e>
    } else {
        compile_try_except(comp, pn_body, n_except, pn_except, pn_else);
    76f6:	6a3b      	ldr	r3, [r7, #32]
    76f8:	9300      	str	r3, [sp, #0]
    76fa:	683b      	ldr	r3, [r7, #0]
    76fc:	687a      	ldr	r2, [r7, #4]
    76fe:	68b9      	ldr	r1, [r7, #8]
    7700:	68f8      	ldr	r0, [r7, #12]
    7702:	f7ff fe97 	bl	7434 <compile_try_except>
    }
    EMIT(pop_block);
    7706:	68fb      	ldr	r3, [r7, #12]
    7708:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    770a:	4618      	mov	r0, r3
    770c:	f003 fa76 	bl	abfc <mp_emit_bc_pop_block>
    EMIT_ARG(load_const_tok, MP_TOKEN_KW_NONE);
    7710:	68fb      	ldr	r3, [r7, #12]
    7712:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7714:	210e      	movs	r1, #14
    7716:	4618      	mov	r0, r3
    7718:	f002 ff40 	bl	a59c <mp_emit_bc_load_const_tok>
    EMIT_ARG(label_assign, l_finally_block);
    771c:	68fb      	ldr	r3, [r7, #12]
    771e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7720:	6979      	ldr	r1, [r7, #20]
    7722:	4618      	mov	r0, r3
    7724:	f002 febc 	bl	a4a0 <mp_emit_bc_label_assign>
    compile_node(comp, pn_finally);
    7728:	6a79      	ldr	r1, [r7, #36]	; 0x24
    772a:	68f8      	ldr	r0, [r7, #12]
    772c:	f001 faa3 	bl	8c76 <compile_node>

    compile_decrease_except_level(comp);
    7730:	68f8      	ldr	r0, [r7, #12]
    7732:	f7fd fd11 	bl	5158 <compile_decrease_except_level>
}
    7736:	bf00      	nop
    7738:	3718      	adds	r7, #24
    773a:	46bd      	mov	sp, r7
    773c:	bd80      	pop	{r7, pc}
    773e:	bf00      	nop
    7740:	000221ac 	.word	0x000221ac
    7744:	000228f8 	.word	0x000228f8
    7748:	00021c60 	.word	0x00021c60

0000774c <compile_try_stmt>:

STATIC void compile_try_stmt(compiler_t *comp, mp_parse_node_struct_t *pns) {
    774c:	b580      	push	{r7, lr}
    774e:	b08a      	sub	sp, #40	; 0x28
    7750:	af02      	add	r7, sp, #8
    7752:	6078      	str	r0, [r7, #4]
    7754:	6039      	str	r1, [r7, #0]
    assert(MP_PARSE_NODE_IS_STRUCT(pns->nodes[1])); // should be
    7756:	683b      	ldr	r3, [r7, #0]
    7758:	68db      	ldr	r3, [r3, #12]
    775a:	2b00      	cmp	r3, #0
    775c:	d005      	beq.n	776a <compile_try_stmt+0x1e>
    775e:	683b      	ldr	r3, [r7, #0]
    7760:	68db      	ldr	r3, [r3, #12]
    7762:	f003 0303 	and.w	r3, r3, #3
    7766:	2b00      	cmp	r3, #0
    7768:	d006      	beq.n	7778 <compile_try_stmt+0x2c>
    776a:	4b30      	ldr	r3, [pc, #192]	; (782c <compile_try_stmt+0xe0>)
    776c:	4a30      	ldr	r2, [pc, #192]	; (7830 <compile_try_stmt+0xe4>)
    776e:	f240 6167 	movw	r1, #1639	; 0x667
    7772:	4830      	ldr	r0, [pc, #192]	; (7834 <compile_try_stmt+0xe8>)
    7774:	f015 fbb4 	bl	1cee0 <__assert_func>
    {
        mp_parse_node_struct_t *pns2 = (mp_parse_node_struct_t*)pns->nodes[1];
    7778:	683b      	ldr	r3, [r7, #0]
    777a:	68db      	ldr	r3, [r3, #12]
    777c:	61fb      	str	r3, [r7, #28]
        if (MP_PARSE_NODE_STRUCT_KIND(pns2) == PN_try_stmt_finally) {
    777e:	69fb      	ldr	r3, [r7, #28]
    7780:	685b      	ldr	r3, [r3, #4]
    7782:	b2db      	uxtb	r3, r3
    7784:	2b71      	cmp	r3, #113	; 0x71
    7786:	d10c      	bne.n	77a2 <compile_try_stmt+0x56>
            // just try-finally
            compile_try_finally(comp, pns->nodes[0], 0, NULL, MP_PARSE_NODE_NULL, pns2->nodes[0]);
    7788:	683b      	ldr	r3, [r7, #0]
    778a:	6899      	ldr	r1, [r3, #8]
    778c:	69fb      	ldr	r3, [r7, #28]
    778e:	689b      	ldr	r3, [r3, #8]
    7790:	9301      	str	r3, [sp, #4]
    7792:	2300      	movs	r3, #0
    7794:	9300      	str	r3, [sp, #0]
    7796:	2300      	movs	r3, #0
    7798:	2200      	movs	r2, #0
    779a:	6878      	ldr	r0, [r7, #4]
    779c:	f7ff ff7c 	bl	7698 <compile_try_finally>
            mp_parse_node_t *pn_excepts;
            int n_except = mp_parse_node_extract_list(&pns->nodes[1], PN_try_stmt_except_list, &pn_excepts);
            compile_try_except(comp, pns->nodes[0], n_except, pn_excepts, MP_PARSE_NODE_NULL);
        }
    }
}
    77a0:	e040      	b.n	7824 <compile_try_stmt+0xd8>
        } else if (MP_PARSE_NODE_STRUCT_KIND(pns2) == PN_try_stmt_except_and_more) {
    77a2:	69fb      	ldr	r3, [r7, #28]
    77a4:	685b      	ldr	r3, [r3, #4]
    77a6:	b2db      	uxtb	r3, r3
    77a8:	2b6d      	cmp	r3, #109	; 0x6d
    77aa:	d128      	bne.n	77fe <compile_try_stmt+0xb2>
            int n_except = mp_parse_node_extract_list(&pns2->nodes[0], PN_try_stmt_except_list, &pn_excepts);
    77ac:	69fb      	ldr	r3, [r7, #28]
    77ae:	3308      	adds	r3, #8
    77b0:	f107 0210 	add.w	r2, r7, #16
    77b4:	2170      	movs	r1, #112	; 0x70
    77b6:	4618      	mov	r0, r3
    77b8:	f7fc fabc 	bl	3d34 <mp_parse_node_extract_list>
    77bc:	61b8      	str	r0, [r7, #24]
            if (MP_PARSE_NODE_IS_NULL(pns2->nodes[2])) {
    77be:	69fb      	ldr	r3, [r7, #28]
    77c0:	691b      	ldr	r3, [r3, #16]
    77c2:	2b00      	cmp	r3, #0
    77c4:	d10b      	bne.n	77de <compile_try_stmt+0x92>
                compile_try_except(comp, pns->nodes[0], n_except, pn_excepts, pns2->nodes[1]);
    77c6:	683b      	ldr	r3, [r7, #0]
    77c8:	6899      	ldr	r1, [r3, #8]
    77ca:	693a      	ldr	r2, [r7, #16]
    77cc:	69fb      	ldr	r3, [r7, #28]
    77ce:	68db      	ldr	r3, [r3, #12]
    77d0:	9300      	str	r3, [sp, #0]
    77d2:	4613      	mov	r3, r2
    77d4:	69ba      	ldr	r2, [r7, #24]
    77d6:	6878      	ldr	r0, [r7, #4]
    77d8:	f7ff fe2c 	bl	7434 <compile_try_except>
}
    77dc:	e022      	b.n	7824 <compile_try_stmt+0xd8>
                compile_try_finally(comp, pns->nodes[0], n_except, pn_excepts, pns2->nodes[1], ((mp_parse_node_struct_t*)pns2->nodes[2])->nodes[0]);
    77de:	683b      	ldr	r3, [r7, #0]
    77e0:	6899      	ldr	r1, [r3, #8]
    77e2:	6938      	ldr	r0, [r7, #16]
    77e4:	69fb      	ldr	r3, [r7, #28]
    77e6:	68db      	ldr	r3, [r3, #12]
    77e8:	69fa      	ldr	r2, [r7, #28]
    77ea:	6912      	ldr	r2, [r2, #16]
    77ec:	6892      	ldr	r2, [r2, #8]
    77ee:	9201      	str	r2, [sp, #4]
    77f0:	9300      	str	r3, [sp, #0]
    77f2:	4603      	mov	r3, r0
    77f4:	69ba      	ldr	r2, [r7, #24]
    77f6:	6878      	ldr	r0, [r7, #4]
    77f8:	f7ff ff4e 	bl	7698 <compile_try_finally>
}
    77fc:	e012      	b.n	7824 <compile_try_stmt+0xd8>
            int n_except = mp_parse_node_extract_list(&pns->nodes[1], PN_try_stmt_except_list, &pn_excepts);
    77fe:	683b      	ldr	r3, [r7, #0]
    7800:	330c      	adds	r3, #12
    7802:	f107 020c 	add.w	r2, r7, #12
    7806:	2170      	movs	r1, #112	; 0x70
    7808:	4618      	mov	r0, r3
    780a:	f7fc fa93 	bl	3d34 <mp_parse_node_extract_list>
    780e:	6178      	str	r0, [r7, #20]
            compile_try_except(comp, pns->nodes[0], n_except, pn_excepts, MP_PARSE_NODE_NULL);
    7810:	683b      	ldr	r3, [r7, #0]
    7812:	6899      	ldr	r1, [r3, #8]
    7814:	68fa      	ldr	r2, [r7, #12]
    7816:	2300      	movs	r3, #0
    7818:	9300      	str	r3, [sp, #0]
    781a:	4613      	mov	r3, r2
    781c:	697a      	ldr	r2, [r7, #20]
    781e:	6878      	ldr	r0, [r7, #4]
    7820:	f7ff fe08 	bl	7434 <compile_try_except>
}
    7824:	bf00      	nop
    7826:	3720      	adds	r7, #32
    7828:	46bd      	mov	sp, r7
    782a:	bd80      	pop	{r7, pc}
    782c:	000221cc 	.word	0x000221cc
    7830:	0002290c 	.word	0x0002290c
    7834:	00021c60 	.word	0x00021c60

00007838 <compile_with_stmt_helper>:

STATIC void compile_with_stmt_helper(compiler_t *comp, int n, mp_parse_node_t *nodes, mp_parse_node_t body) {
    7838:	b580      	push	{r7, lr}
    783a:	b086      	sub	sp, #24
    783c:	af00      	add	r7, sp, #0
    783e:	60f8      	str	r0, [r7, #12]
    7840:	60b9      	str	r1, [r7, #8]
    7842:	607a      	str	r2, [r7, #4]
    7844:	603b      	str	r3, [r7, #0]
    if (n == 0) {
    7846:	68bb      	ldr	r3, [r7, #8]
    7848:	2b00      	cmp	r3, #0
    784a:	d104      	bne.n	7856 <compile_with_stmt_helper+0x1e>
        // no more pre-bits, compile the body of the with
        compile_node(comp, body);
    784c:	6839      	ldr	r1, [r7, #0]
    784e:	68f8      	ldr	r0, [r7, #12]
    7850:	f001 fa11 	bl	8c76 <compile_node>
        // finish this with block
        EMIT_ARG(with_cleanup, l_end);
        reserve_labels_for_native(comp, 3); // used by native's with_cleanup
        compile_decrease_except_level(comp);
    }
}
    7854:	e04a      	b.n	78ec <compile_with_stmt_helper+0xb4>
        uint l_end = comp_next_label(comp);
    7856:	68f8      	ldr	r0, [r7, #12]
    7858:	f7fd fc4c 	bl	50f4 <comp_next_label>
    785c:	6178      	str	r0, [r7, #20]
        if (MP_PARSE_NODE_IS_STRUCT_KIND(nodes[0], PN_with_item)) {
    785e:	687b      	ldr	r3, [r7, #4]
    7860:	681b      	ldr	r3, [r3, #0]
    7862:	2b00      	cmp	r3, #0
    7864:	d021      	beq.n	78aa <compile_with_stmt_helper+0x72>
    7866:	687b      	ldr	r3, [r7, #4]
    7868:	681b      	ldr	r3, [r3, #0]
    786a:	f003 0303 	and.w	r3, r3, #3
    786e:	2b00      	cmp	r3, #0
    7870:	d11b      	bne.n	78aa <compile_with_stmt_helper+0x72>
    7872:	687b      	ldr	r3, [r7, #4]
    7874:	681b      	ldr	r3, [r3, #0]
    7876:	685b      	ldr	r3, [r3, #4]
    7878:	b2db      	uxtb	r3, r3
    787a:	2b74      	cmp	r3, #116	; 0x74
    787c:	d115      	bne.n	78aa <compile_with_stmt_helper+0x72>
            mp_parse_node_struct_t *pns = (mp_parse_node_struct_t*)nodes[0];
    787e:	687b      	ldr	r3, [r7, #4]
    7880:	681b      	ldr	r3, [r3, #0]
    7882:	613b      	str	r3, [r7, #16]
            compile_node(comp, pns->nodes[0]);
    7884:	693b      	ldr	r3, [r7, #16]
    7886:	689b      	ldr	r3, [r3, #8]
    7888:	4619      	mov	r1, r3
    788a:	68f8      	ldr	r0, [r7, #12]
    788c:	f001 f9f3 	bl	8c76 <compile_node>
            compile_increase_except_level(comp, l_end, MP_EMIT_SETUP_BLOCK_WITH);
    7890:	2200      	movs	r2, #0
    7892:	6979      	ldr	r1, [r7, #20]
    7894:	68f8      	ldr	r0, [r7, #12]
    7896:	f7fd fc3c 	bl	5112 <compile_increase_except_level>
            c_assign(comp, pns->nodes[1], ASSIGN_STORE);
    789a:	693b      	ldr	r3, [r7, #16]
    789c:	68db      	ldr	r3, [r3, #12]
    789e:	2200      	movs	r2, #0
    78a0:	4619      	mov	r1, r3
    78a2:	68f8      	ldr	r0, [r7, #12]
    78a4:	f7fe f858 	bl	5958 <c_assign>
        if (MP_PARSE_NODE_IS_STRUCT_KIND(nodes[0], PN_with_item)) {
    78a8:	e00f      	b.n	78ca <compile_with_stmt_helper+0x92>
            compile_node(comp, nodes[0]);
    78aa:	687b      	ldr	r3, [r7, #4]
    78ac:	681b      	ldr	r3, [r3, #0]
    78ae:	4619      	mov	r1, r3
    78b0:	68f8      	ldr	r0, [r7, #12]
    78b2:	f001 f9e0 	bl	8c76 <compile_node>
            compile_increase_except_level(comp, l_end, MP_EMIT_SETUP_BLOCK_WITH);
    78b6:	2200      	movs	r2, #0
    78b8:	6979      	ldr	r1, [r7, #20]
    78ba:	68f8      	ldr	r0, [r7, #12]
    78bc:	f7fd fc29 	bl	5112 <compile_increase_except_level>
            EMIT(pop_top);
    78c0:	68fb      	ldr	r3, [r7, #12]
    78c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    78c4:	4618      	mov	r0, r3
    78c6:	f003 f844 	bl	a952 <mp_emit_bc_pop_top>
        compile_with_stmt_helper(comp, n - 1, nodes + 1, body);
    78ca:	68bb      	ldr	r3, [r7, #8]
    78cc:	1e59      	subs	r1, r3, #1
    78ce:	687b      	ldr	r3, [r7, #4]
    78d0:	1d1a      	adds	r2, r3, #4
    78d2:	683b      	ldr	r3, [r7, #0]
    78d4:	68f8      	ldr	r0, [r7, #12]
    78d6:	f7ff ffaf 	bl	7838 <compile_with_stmt_helper>
        EMIT_ARG(with_cleanup, l_end);
    78da:	68fb      	ldr	r3, [r7, #12]
    78dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    78de:	6979      	ldr	r1, [r7, #20]
    78e0:	4618      	mov	r0, r3
    78e2:	f003 f91c 	bl	ab1e <mp_emit_bc_with_cleanup>
        compile_decrease_except_level(comp);
    78e6:	68f8      	ldr	r0, [r7, #12]
    78e8:	f7fd fc36 	bl	5158 <compile_decrease_except_level>
}
    78ec:	bf00      	nop
    78ee:	3718      	adds	r7, #24
    78f0:	46bd      	mov	sp, r7
    78f2:	bd80      	pop	{r7, pc}

000078f4 <compile_with_stmt>:

STATIC void compile_with_stmt(compiler_t *comp, mp_parse_node_struct_t *pns) {
    78f4:	b580      	push	{r7, lr}
    78f6:	b084      	sub	sp, #16
    78f8:	af00      	add	r7, sp, #0
    78fa:	6078      	str	r0, [r7, #4]
    78fc:	6039      	str	r1, [r7, #0]
    // get the nodes for the pre-bit of the with (the a as b, c as d, ... bit)
    mp_parse_node_t *nodes;
    int n = mp_parse_node_extract_list(&pns->nodes[0], PN_with_stmt_list, &nodes);
    78fe:	683b      	ldr	r3, [r7, #0]
    7900:	3308      	adds	r3, #8
    7902:	f107 0208 	add.w	r2, r7, #8
    7906:	2173      	movs	r1, #115	; 0x73
    7908:	4618      	mov	r0, r3
    790a:	f7fc fa13 	bl	3d34 <mp_parse_node_extract_list>
    790e:	60f8      	str	r0, [r7, #12]
    assert(n > 0);
    7910:	68fb      	ldr	r3, [r7, #12]
    7912:	2b00      	cmp	r3, #0
    7914:	dc06      	bgt.n	7924 <compile_with_stmt+0x30>
    7916:	4b09      	ldr	r3, [pc, #36]	; (793c <compile_with_stmt+0x48>)
    7918:	4a09      	ldr	r2, [pc, #36]	; (7940 <compile_with_stmt+0x4c>)
    791a:	f44f 61d4 	mov.w	r1, #1696	; 0x6a0
    791e:	4809      	ldr	r0, [pc, #36]	; (7944 <compile_with_stmt+0x50>)
    7920:	f015 fade 	bl	1cee0 <__assert_func>

    // compile in a nested fashion
    compile_with_stmt_helper(comp, n, nodes, pns->nodes[1]);
    7924:	68ba      	ldr	r2, [r7, #8]
    7926:	683b      	ldr	r3, [r7, #0]
    7928:	68db      	ldr	r3, [r3, #12]
    792a:	68f9      	ldr	r1, [r7, #12]
    792c:	6878      	ldr	r0, [r7, #4]
    792e:	f7ff ff83 	bl	7838 <compile_with_stmt_helper>
}
    7932:	bf00      	nop
    7934:	3710      	adds	r7, #16
    7936:	46bd      	mov	sp, r7
    7938:	bd80      	pop	{r7, pc}
    793a:	bf00      	nop
    793c:	000221f4 	.word	0x000221f4
    7940:	00022920 	.word	0x00022920
    7944:	00021c60 	.word	0x00021c60

00007948 <compile_yield_from>:

STATIC void compile_yield_from(compiler_t *comp) {
    7948:	b580      	push	{r7, lr}
    794a:	b082      	sub	sp, #8
    794c:	af00      	add	r7, sp, #0
    794e:	6078      	str	r0, [r7, #4]
    EMIT_ARG(get_iter, false);
    7950:	687b      	ldr	r3, [r7, #4]
    7952:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7954:	2100      	movs	r1, #0
    7956:	4618      	mov	r0, r3
    7958:	f003 f913 	bl	ab82 <mp_emit_bc_get_iter>
    EMIT_ARG(load_const_tok, MP_TOKEN_KW_NONE);
    795c:	687b      	ldr	r3, [r7, #4]
    795e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7960:	210e      	movs	r1, #14
    7962:	4618      	mov	r0, r3
    7964:	f002 fe1a 	bl	a59c <mp_emit_bc_load_const_tok>
    EMIT_ARG(yield, MP_EMIT_YIELD_FROM);
    7968:	687b      	ldr	r3, [r7, #4]
    796a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    796c:	2101      	movs	r1, #1
    796e:	4618      	mov	r0, r3
    7970:	f003 fb46 	bl	b000 <mp_emit_bc_yield>
    reserve_labels_for_native(comp, 3);
}
    7974:	bf00      	nop
    7976:	3708      	adds	r7, #8
    7978:	46bd      	mov	sp, r7
    797a:	bd80      	pop	{r7, pc}

0000797c <compile_expr_stmt>:
        compile_async_with_stmt(comp, pns0);
    }
}
#endif

STATIC void compile_expr_stmt(compiler_t *comp, mp_parse_node_struct_t *pns) {
    797c:	b580      	push	{r7, lr}
    797e:	b088      	sub	sp, #32
    7980:	af00      	add	r7, sp, #0
    7982:	6078      	str	r0, [r7, #4]
    7984:	6039      	str	r1, [r7, #0]
    if (MP_PARSE_NODE_IS_NULL(pns->nodes[1])) {
    7986:	683b      	ldr	r3, [r7, #0]
    7988:	68db      	ldr	r3, [r3, #12]
    798a:	2b00      	cmp	r3, #0
    798c:	d149      	bne.n	7a22 <compile_expr_stmt+0xa6>
        if (comp->is_repl && comp->scope_cur->kind == SCOPE_MODULE) {
    798e:	687b      	ldr	r3, [r7, #4]
    7990:	791b      	ldrb	r3, [r3, #4]
    7992:	2b00      	cmp	r3, #0
    7994:	d01b      	beq.n	79ce <compile_expr_stmt+0x52>
    7996:	687b      	ldr	r3, [r7, #4]
    7998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    799a:	681b      	ldr	r3, [r3, #0]
    799c:	2b00      	cmp	r3, #0
    799e:	d116      	bne.n	79ce <compile_expr_stmt+0x52>
            // for REPL, evaluate then print the expression
            compile_load_id(comp, MP_QSTR___repl_print__);
    79a0:	2121      	movs	r1, #33	; 0x21
    79a2:	6878      	ldr	r0, [r7, #4]
    79a4:	f7fd fc95 	bl	52d2 <compile_load_id>
            compile_node(comp, pns->nodes[0]);
    79a8:	683b      	ldr	r3, [r7, #0]
    79aa:	689b      	ldr	r3, [r3, #8]
    79ac:	4619      	mov	r1, r3
    79ae:	6878      	ldr	r0, [r7, #4]
    79b0:	f001 f961 	bl	8c76 <compile_node>
            EMIT_ARG(call_function, 1, 0, 0);
    79b4:	687b      	ldr	r3, [r7, #4]
    79b6:	6a98      	ldr	r0, [r3, #40]	; 0x28
    79b8:	2300      	movs	r3, #0
    79ba:	2200      	movs	r2, #0
    79bc:	2101      	movs	r1, #1
    79be:	f003 fab9 	bl	af34 <mp_emit_bc_call_function>
            EMIT(pop_top);
    79c2:	687b      	ldr	r3, [r7, #4]
    79c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    79c6:	4618      	mov	r0, r3
    79c8:	f002 ffc3 	bl	a952 <mp_emit_bc_pop_top>
    79cc:	e0f7      	b.n	7bbe <compile_expr_stmt+0x242>

        } else {
            // for non-REPL, evaluate then discard the expression
            if ((MP_PARSE_NODE_IS_LEAF(pns->nodes[0]) && !MP_PARSE_NODE_IS_ID(pns->nodes[0]))
    79ce:	683b      	ldr	r3, [r7, #0]
    79d0:	689b      	ldr	r3, [r3, #8]
    79d2:	f003 0303 	and.w	r3, r3, #3
    79d6:	2b00      	cmp	r3, #0
    79d8:	d006      	beq.n	79e8 <compile_expr_stmt+0x6c>
    79da:	683b      	ldr	r3, [r7, #0]
    79dc:	689b      	ldr	r3, [r3, #8]
    79de:	f003 030f 	and.w	r3, r3, #15
    79e2:	2b02      	cmp	r3, #2
    79e4:	f040 80eb 	bne.w	7bbe <compile_expr_stmt+0x242>
                || MP_PARSE_NODE_IS_STRUCT_KIND(pns->nodes[0], PN_const_object)) {
    79e8:	683b      	ldr	r3, [r7, #0]
    79ea:	689b      	ldr	r3, [r3, #8]
    79ec:	2b00      	cmp	r3, #0
    79ee:	d00c      	beq.n	7a0a <compile_expr_stmt+0x8e>
    79f0:	683b      	ldr	r3, [r7, #0]
    79f2:	689b      	ldr	r3, [r3, #8]
    79f4:	f003 0303 	and.w	r3, r3, #3
    79f8:	2b00      	cmp	r3, #0
    79fa:	d106      	bne.n	7a0a <compile_expr_stmt+0x8e>
    79fc:	683b      	ldr	r3, [r7, #0]
    79fe:	689b      	ldr	r3, [r3, #8]
    7a00:	685b      	ldr	r3, [r3, #4]
    7a02:	b2db      	uxtb	r3, r3
    7a04:	2b35      	cmp	r3, #53	; 0x35
    7a06:	f000 80da 	beq.w	7bbe <compile_expr_stmt+0x242>
                // do nothing with a lonely constant
            } else {
                compile_node(comp, pns->nodes[0]); // just an expression
    7a0a:	683b      	ldr	r3, [r7, #0]
    7a0c:	689b      	ldr	r3, [r3, #8]
    7a0e:	4619      	mov	r1, r3
    7a10:	6878      	ldr	r0, [r7, #4]
    7a12:	f001 f930 	bl	8c76 <compile_node>
                EMIT(pop_top); // discard last result since this is a statement and leaves nothing on the stack
    7a16:	687b      	ldr	r3, [r7, #4]
    7a18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7a1a:	4618      	mov	r0, r3
    7a1c:	f002 ff99 	bl	a952 <mp_emit_bc_pop_top>
            c_assign(comp, pns->nodes[0], ASSIGN_STORE); // lhs store
        }
    } else {
        goto plain_assign;
    }
}
    7a20:	e0cd      	b.n	7bbe <compile_expr_stmt+0x242>
    } else if (MP_PARSE_NODE_IS_STRUCT(pns->nodes[1])) {
    7a22:	683b      	ldr	r3, [r7, #0]
    7a24:	68db      	ldr	r3, [r3, #12]
    7a26:	2b00      	cmp	r3, #0
    7a28:	f000 80bb 	beq.w	7ba2 <compile_expr_stmt+0x226>
    7a2c:	683b      	ldr	r3, [r7, #0]
    7a2e:	68db      	ldr	r3, [r3, #12]
    7a30:	f003 0303 	and.w	r3, r3, #3
    7a34:	2b00      	cmp	r3, #0
    7a36:	f040 80b4 	bne.w	7ba2 <compile_expr_stmt+0x226>
        mp_parse_node_struct_t *pns1 = (mp_parse_node_struct_t*)pns->nodes[1];
    7a3a:	683b      	ldr	r3, [r7, #0]
    7a3c:	68db      	ldr	r3, [r3, #12]
    7a3e:	617b      	str	r3, [r7, #20]
        int kind = MP_PARSE_NODE_STRUCT_KIND(pns1);
    7a40:	697b      	ldr	r3, [r7, #20]
    7a42:	685b      	ldr	r3, [r3, #4]
    7a44:	b2db      	uxtb	r3, r3
    7a46:	613b      	str	r3, [r7, #16]
        if (kind == PN_expr_stmt_augassign) {
    7a48:	693b      	ldr	r3, [r7, #16]
    7a4a:	2b51      	cmp	r3, #81	; 0x51
    7a4c:	d16a      	bne.n	7b24 <compile_expr_stmt+0x1a8>
            c_assign(comp, pns->nodes[0], ASSIGN_AUG_LOAD); // lhs load for aug assign
    7a4e:	683b      	ldr	r3, [r7, #0]
    7a50:	689b      	ldr	r3, [r3, #8]
    7a52:	2201      	movs	r2, #1
    7a54:	4619      	mov	r1, r3
    7a56:	6878      	ldr	r0, [r7, #4]
    7a58:	f7fd ff7e 	bl	5958 <c_assign>
            compile_node(comp, pns1->nodes[1]); // rhs
    7a5c:	697b      	ldr	r3, [r7, #20]
    7a5e:	68db      	ldr	r3, [r3, #12]
    7a60:	4619      	mov	r1, r3
    7a62:	6878      	ldr	r0, [r7, #4]
    7a64:	f001 f907 	bl	8c76 <compile_node>
            assert(MP_PARSE_NODE_IS_TOKEN(pns1->nodes[0]));
    7a68:	697b      	ldr	r3, [r7, #20]
    7a6a:	689b      	ldr	r3, [r3, #8]
    7a6c:	f003 030f 	and.w	r3, r3, #15
    7a70:	2b0e      	cmp	r3, #14
    7a72:	d006      	beq.n	7a82 <compile_expr_stmt+0x106>
    7a74:	4b54      	ldr	r3, [pc, #336]	; (7bc8 <compile_expr_stmt+0x24c>)
    7a76:	4a55      	ldr	r2, [pc, #340]	; (7bcc <compile_expr_stmt+0x250>)
    7a78:	f44f 61f2 	mov.w	r1, #1936	; 0x790
    7a7c:	4854      	ldr	r0, [pc, #336]	; (7bd0 <compile_expr_stmt+0x254>)
    7a7e:	f015 fa2f 	bl	1cee0 <__assert_func>
            switch (MP_PARSE_NODE_LEAF_ARG(pns1->nodes[0])) {
    7a82:	697b      	ldr	r3, [r7, #20]
    7a84:	689b      	ldr	r3, [r3, #8]
    7a86:	091b      	lsrs	r3, r3, #4
    7a88:	3b4e      	subs	r3, #78	; 0x4e
    7a8a:	2b0a      	cmp	r3, #10
    7a8c:	d839      	bhi.n	7b02 <compile_expr_stmt+0x186>
    7a8e:	a201      	add	r2, pc, #4	; (adr r2, 7a94 <compile_expr_stmt+0x118>)
    7a90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    7a94:	00007adf 	.word	0x00007adf
    7a98:	00007ae5 	.word	0x00007ae5
    7a9c:	00007aeb 	.word	0x00007aeb
    7aa0:	00007af7 	.word	0x00007af7
    7aa4:	00007af1 	.word	0x00007af1
    7aa8:	00007afd 	.word	0x00007afd
    7aac:	00007acd 	.word	0x00007acd
    7ab0:	00007ac1 	.word	0x00007ac1
    7ab4:	00007ac7 	.word	0x00007ac7
    7ab8:	00007ad9 	.word	0x00007ad9
    7abc:	00007ad3 	.word	0x00007ad3
                case MP_TOKEN_DEL_PIPE_EQUAL: op = MP_BINARY_OP_INPLACE_OR; break;
    7ac0:	2309      	movs	r3, #9
    7ac2:	61fb      	str	r3, [r7, #28]
    7ac4:	e020      	b.n	7b08 <compile_expr_stmt+0x18c>
                case MP_TOKEN_DEL_CARET_EQUAL: op = MP_BINARY_OP_INPLACE_XOR; break;
    7ac6:	230a      	movs	r3, #10
    7ac8:	61fb      	str	r3, [r7, #28]
    7aca:	e01d      	b.n	7b08 <compile_expr_stmt+0x18c>
                case MP_TOKEN_DEL_AMPERSAND_EQUAL: op = MP_BINARY_OP_INPLACE_AND; break;
    7acc:	230b      	movs	r3, #11
    7ace:	61fb      	str	r3, [r7, #28]
    7ad0:	e01a      	b.n	7b08 <compile_expr_stmt+0x18c>
                case MP_TOKEN_DEL_DBL_LESS_EQUAL: op = MP_BINARY_OP_INPLACE_LSHIFT; break;
    7ad2:	230c      	movs	r3, #12
    7ad4:	61fb      	str	r3, [r7, #28]
    7ad6:	e017      	b.n	7b08 <compile_expr_stmt+0x18c>
                case MP_TOKEN_DEL_DBL_MORE_EQUAL: op = MP_BINARY_OP_INPLACE_RSHIFT; break;
    7ad8:	230d      	movs	r3, #13
    7ada:	61fb      	str	r3, [r7, #28]
    7adc:	e014      	b.n	7b08 <compile_expr_stmt+0x18c>
                case MP_TOKEN_DEL_PLUS_EQUAL: op = MP_BINARY_OP_INPLACE_ADD; break;
    7ade:	230e      	movs	r3, #14
    7ae0:	61fb      	str	r3, [r7, #28]
    7ae2:	e011      	b.n	7b08 <compile_expr_stmt+0x18c>
                case MP_TOKEN_DEL_MINUS_EQUAL: op = MP_BINARY_OP_INPLACE_SUBTRACT; break;
    7ae4:	230f      	movs	r3, #15
    7ae6:	61fb      	str	r3, [r7, #28]
    7ae8:	e00e      	b.n	7b08 <compile_expr_stmt+0x18c>
                case MP_TOKEN_DEL_STAR_EQUAL: op = MP_BINARY_OP_INPLACE_MULTIPLY; break;
    7aea:	2310      	movs	r3, #16
    7aec:	61fb      	str	r3, [r7, #28]
    7aee:	e00b      	b.n	7b08 <compile_expr_stmt+0x18c>
                case MP_TOKEN_DEL_DBL_SLASH_EQUAL: op = MP_BINARY_OP_INPLACE_FLOOR_DIVIDE; break;
    7af0:	2311      	movs	r3, #17
    7af2:	61fb      	str	r3, [r7, #28]
    7af4:	e008      	b.n	7b08 <compile_expr_stmt+0x18c>
                case MP_TOKEN_DEL_SLASH_EQUAL: op = MP_BINARY_OP_INPLACE_TRUE_DIVIDE; break;
    7af6:	2312      	movs	r3, #18
    7af8:	61fb      	str	r3, [r7, #28]
    7afa:	e005      	b.n	7b08 <compile_expr_stmt+0x18c>
                case MP_TOKEN_DEL_PERCENT_EQUAL: op = MP_BINARY_OP_INPLACE_MODULO; break;
    7afc:	2313      	movs	r3, #19
    7afe:	61fb      	str	r3, [r7, #28]
    7b00:	e002      	b.n	7b08 <compile_expr_stmt+0x18c>
                case MP_TOKEN_DEL_DBL_STAR_EQUAL: default: op = MP_BINARY_OP_INPLACE_POWER; break;
    7b02:	2314      	movs	r3, #20
    7b04:	61fb      	str	r3, [r7, #28]
    7b06:	bf00      	nop
            EMIT_ARG(binary_op, op);
    7b08:	687b      	ldr	r3, [r7, #4]
    7b0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7b0c:	69f9      	ldr	r1, [r7, #28]
    7b0e:	4618      	mov	r0, r3
    7b10:	f003 f8a9 	bl	ac66 <mp_emit_bc_binary_op>
            c_assign(comp, pns->nodes[0], ASSIGN_AUG_STORE); // lhs store for aug assign
    7b14:	683b      	ldr	r3, [r7, #0]
    7b16:	689b      	ldr	r3, [r3, #8]
    7b18:	2202      	movs	r2, #2
    7b1a:	4619      	mov	r1, r3
    7b1c:	6878      	ldr	r0, [r7, #4]
    7b1e:	f7fd ff1b 	bl	5958 <c_assign>
}
    7b22:	e04c      	b.n	7bbe <compile_expr_stmt+0x242>
        } else if (kind == PN_expr_stmt_assign_list) {
    7b24:	693b      	ldr	r3, [r7, #16]
    7b26:	2b52      	cmp	r3, #82	; 0x52
    7b28:	d13b      	bne.n	7ba2 <compile_expr_stmt+0x226>
            int rhs = MP_PARSE_NODE_STRUCT_NUM_NODES(pns1) - 1;
    7b2a:	697b      	ldr	r3, [r7, #20]
    7b2c:	685b      	ldr	r3, [r3, #4]
    7b2e:	0a1b      	lsrs	r3, r3, #8
    7b30:	3b01      	subs	r3, #1
    7b32:	60fb      	str	r3, [r7, #12]
            compile_node(comp, pns1->nodes[rhs]); // rhs
    7b34:	697b      	ldr	r3, [r7, #20]
    7b36:	68fa      	ldr	r2, [r7, #12]
    7b38:	3202      	adds	r2, #2
    7b3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    7b3e:	4619      	mov	r1, r3
    7b40:	6878      	ldr	r0, [r7, #4]
    7b42:	f001 f898 	bl	8c76 <compile_node>
            if (rhs > 0) {
    7b46:	68fb      	ldr	r3, [r7, #12]
    7b48:	2b00      	cmp	r3, #0
    7b4a:	dd04      	ble.n	7b56 <compile_expr_stmt+0x1da>
                EMIT(dup_top);
    7b4c:	687b      	ldr	r3, [r7, #4]
    7b4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7b50:	4618      	mov	r0, r3
    7b52:	f002 fede 	bl	a912 <mp_emit_bc_dup_top>
            c_assign(comp, pns->nodes[0], ASSIGN_STORE); // lhs store
    7b56:	683b      	ldr	r3, [r7, #0]
    7b58:	689b      	ldr	r3, [r3, #8]
    7b5a:	2200      	movs	r2, #0
    7b5c:	4619      	mov	r1, r3
    7b5e:	6878      	ldr	r0, [r7, #4]
    7b60:	f7fd fefa 	bl	5958 <c_assign>
            for (int i = 0; i < rhs; i++) {
    7b64:	2300      	movs	r3, #0
    7b66:	61bb      	str	r3, [r7, #24]
    7b68:	e016      	b.n	7b98 <compile_expr_stmt+0x21c>
                if (i + 1 < rhs) {
    7b6a:	69bb      	ldr	r3, [r7, #24]
    7b6c:	1c5a      	adds	r2, r3, #1
    7b6e:	68fb      	ldr	r3, [r7, #12]
    7b70:	429a      	cmp	r2, r3
    7b72:	da04      	bge.n	7b7e <compile_expr_stmt+0x202>
                    EMIT(dup_top);
    7b74:	687b      	ldr	r3, [r7, #4]
    7b76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7b78:	4618      	mov	r0, r3
    7b7a:	f002 feca 	bl	a912 <mp_emit_bc_dup_top>
                c_assign(comp, pns1->nodes[i], ASSIGN_STORE); // middle store
    7b7e:	697b      	ldr	r3, [r7, #20]
    7b80:	69ba      	ldr	r2, [r7, #24]
    7b82:	3202      	adds	r2, #2
    7b84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    7b88:	2200      	movs	r2, #0
    7b8a:	4619      	mov	r1, r3
    7b8c:	6878      	ldr	r0, [r7, #4]
    7b8e:	f7fd fee3 	bl	5958 <c_assign>
            for (int i = 0; i < rhs; i++) {
    7b92:	69bb      	ldr	r3, [r7, #24]
    7b94:	3301      	adds	r3, #1
    7b96:	61bb      	str	r3, [r7, #24]
    7b98:	69ba      	ldr	r2, [r7, #24]
    7b9a:	68fb      	ldr	r3, [r7, #12]
    7b9c:	429a      	cmp	r2, r3
    7b9e:	dbe4      	blt.n	7b6a <compile_expr_stmt+0x1ee>
}
    7ba0:	e00d      	b.n	7bbe <compile_expr_stmt+0x242>
            compile_node(comp, pns->nodes[1]); // rhs
    7ba2:	683b      	ldr	r3, [r7, #0]
    7ba4:	68db      	ldr	r3, [r3, #12]
    7ba6:	4619      	mov	r1, r3
    7ba8:	6878      	ldr	r0, [r7, #4]
    7baa:	f001 f864 	bl	8c76 <compile_node>
            c_assign(comp, pns->nodes[0], ASSIGN_STORE); // lhs store
    7bae:	683b      	ldr	r3, [r7, #0]
    7bb0:	689b      	ldr	r3, [r3, #8]
    7bb2:	2200      	movs	r2, #0
    7bb4:	4619      	mov	r1, r3
    7bb6:	6878      	ldr	r0, [r7, #4]
    7bb8:	f7fd fece 	bl	5958 <c_assign>
}
    7bbc:	e7ff      	b.n	7bbe <compile_expr_stmt+0x242>
    7bbe:	bf00      	nop
    7bc0:	3720      	adds	r7, #32
    7bc2:	46bd      	mov	sp, r7
    7bc4:	bd80      	pop	{r7, pc}
    7bc6:	bf00      	nop
    7bc8:	000221fc 	.word	0x000221fc
    7bcc:	00022934 	.word	0x00022934
    7bd0:	00021c60 	.word	0x00021c60

00007bd4 <compile_test_if_expr>:

STATIC void compile_test_if_expr(compiler_t *comp, mp_parse_node_struct_t *pns) {
    7bd4:	b580      	push	{r7, lr}
    7bd6:	b086      	sub	sp, #24
    7bd8:	af00      	add	r7, sp, #0
    7bda:	6078      	str	r0, [r7, #4]
    7bdc:	6039      	str	r1, [r7, #0]
    assert(MP_PARSE_NODE_IS_STRUCT_KIND(pns->nodes[1], PN_test_if_else));
    7bde:	683b      	ldr	r3, [r7, #0]
    7be0:	68db      	ldr	r3, [r3, #12]
    7be2:	2b00      	cmp	r3, #0
    7be4:	d00b      	beq.n	7bfe <compile_test_if_expr+0x2a>
    7be6:	683b      	ldr	r3, [r7, #0]
    7be8:	68db      	ldr	r3, [r3, #12]
    7bea:	f003 0303 	and.w	r3, r3, #3
    7bee:	2b00      	cmp	r3, #0
    7bf0:	d105      	bne.n	7bfe <compile_test_if_expr+0x2a>
    7bf2:	683b      	ldr	r3, [r7, #0]
    7bf4:	68db      	ldr	r3, [r3, #12]
    7bf6:	685b      	ldr	r3, [r3, #4]
    7bf8:	b2db      	uxtb	r3, r3
    7bfa:	2b79      	cmp	r3, #121	; 0x79
    7bfc:	d006      	beq.n	7c0c <compile_test_if_expr+0x38>
    7bfe:	4b21      	ldr	r3, [pc, #132]	; (7c84 <compile_test_if_expr+0xb0>)
    7c00:	4a21      	ldr	r2, [pc, #132]	; (7c88 <compile_test_if_expr+0xb4>)
    7c02:	f240 71e7 	movw	r1, #2023	; 0x7e7
    7c06:	4821      	ldr	r0, [pc, #132]	; (7c8c <compile_test_if_expr+0xb8>)
    7c08:	f015 f96a 	bl	1cee0 <__assert_func>
    mp_parse_node_struct_t *pns_test_if_else = (mp_parse_node_struct_t*)pns->nodes[1];
    7c0c:	683b      	ldr	r3, [r7, #0]
    7c0e:	68db      	ldr	r3, [r3, #12]
    7c10:	617b      	str	r3, [r7, #20]

    uint l_fail = comp_next_label(comp);
    7c12:	6878      	ldr	r0, [r7, #4]
    7c14:	f7fd fa6e 	bl	50f4 <comp_next_label>
    7c18:	6138      	str	r0, [r7, #16]
    uint l_end = comp_next_label(comp);
    7c1a:	6878      	ldr	r0, [r7, #4]
    7c1c:	f7fd fa6a 	bl	50f4 <comp_next_label>
    7c20:	60f8      	str	r0, [r7, #12]
    c_if_cond(comp, pns_test_if_else->nodes[0], false, l_fail); // condition
    7c22:	697b      	ldr	r3, [r7, #20]
    7c24:	6899      	ldr	r1, [r3, #8]
    7c26:	693b      	ldr	r3, [r7, #16]
    7c28:	2200      	movs	r2, #0
    7c2a:	6878      	ldr	r0, [r7, #4]
    7c2c:	f7fd fbf5 	bl	541a <c_if_cond>
    compile_node(comp, pns->nodes[0]); // success value
    7c30:	683b      	ldr	r3, [r7, #0]
    7c32:	689b      	ldr	r3, [r3, #8]
    7c34:	4619      	mov	r1, r3
    7c36:	6878      	ldr	r0, [r7, #4]
    7c38:	f001 f81d 	bl	8c76 <compile_node>
    EMIT_ARG(jump, l_end);
    7c3c:	687b      	ldr	r3, [r7, #4]
    7c3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7c40:	68f9      	ldr	r1, [r7, #12]
    7c42:	4618      	mov	r0, r3
    7c44:	f002 feb6 	bl	a9b4 <mp_emit_bc_jump>
    EMIT_ARG(label_assign, l_fail);
    7c48:	687b      	ldr	r3, [r7, #4]
    7c4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7c4c:	6939      	ldr	r1, [r7, #16]
    7c4e:	4618      	mov	r0, r3
    7c50:	f002 fc26 	bl	a4a0 <mp_emit_bc_label_assign>
    EMIT_ARG(adjust_stack_size, -1); // adjust stack size
    7c54:	687b      	ldr	r3, [r7, #4]
    7c56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7c58:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    7c5c:	4618      	mov	r0, r3
    7c5e:	f002 fbd0 	bl	a402 <mp_emit_bc_adjust_stack_size>
    compile_node(comp, pns_test_if_else->nodes[1]); // failure value
    7c62:	697b      	ldr	r3, [r7, #20]
    7c64:	68db      	ldr	r3, [r3, #12]
    7c66:	4619      	mov	r1, r3
    7c68:	6878      	ldr	r0, [r7, #4]
    7c6a:	f001 f804 	bl	8c76 <compile_node>
    EMIT_ARG(label_assign, l_end);
    7c6e:	687b      	ldr	r3, [r7, #4]
    7c70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7c72:	68f9      	ldr	r1, [r7, #12]
    7c74:	4618      	mov	r0, r3
    7c76:	f002 fc13 	bl	a4a0 <mp_emit_bc_label_assign>
}
    7c7a:	bf00      	nop
    7c7c:	3718      	adds	r7, #24
    7c7e:	46bd      	mov	sp, r7
    7c80:	bd80      	pop	{r7, pc}
    7c82:	bf00      	nop
    7c84:	00022224 	.word	0x00022224
    7c88:	00022948 	.word	0x00022948
    7c8c:	00021c60 	.word	0x00021c60

00007c90 <compile_lambdef>:

STATIC void compile_lambdef(compiler_t *comp, mp_parse_node_struct_t *pns) {
    7c90:	b580      	push	{r7, lr}
    7c92:	b084      	sub	sp, #16
    7c94:	af00      	add	r7, sp, #0
    7c96:	6078      	str	r0, [r7, #4]
    7c98:	6039      	str	r1, [r7, #0]
    if (comp->pass == MP_PASS_SCOPE) {
    7c9a:	687b      	ldr	r3, [r7, #4]
    7c9c:	795b      	ldrb	r3, [r3, #5]
    7c9e:	2b01      	cmp	r3, #1
    7ca0:	d10b      	bne.n	7cba <compile_lambdef+0x2a>
        // create a new scope for this lambda
        scope_t *s = scope_new_and_link(comp, SCOPE_LAMBDA, (mp_parse_node_t)pns, comp->scope_cur->emit_options);
    7ca2:	683a      	ldr	r2, [r7, #0]
    7ca4:	687b      	ldr	r3, [r7, #4]
    7ca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    7ca8:	8b5b      	ldrh	r3, [r3, #26]
    7caa:	2102      	movs	r1, #2
    7cac:	6878      	ldr	r0, [r7, #4]
    7cae:	f7fd fa77 	bl	51a0 <scope_new_and_link>
    7cb2:	60f8      	str	r0, [r7, #12]
        // store the lambda scope so the compiling function (this one) can use it at each pass
        pns->nodes[2] = (mp_parse_node_t)s;
    7cb4:	68fa      	ldr	r2, [r7, #12]
    7cb6:	683b      	ldr	r3, [r7, #0]
    7cb8:	611a      	str	r2, [r3, #16]
    }

    // get the scope for this lambda
    scope_t *this_scope = (scope_t*)pns->nodes[2];
    7cba:	683b      	ldr	r3, [r7, #0]
    7cbc:	691b      	ldr	r3, [r3, #16]
    7cbe:	60bb      	str	r3, [r7, #8]

    // compile the lambda definition
    compile_funcdef_lambdef(comp, this_scope, pns->nodes[0], PN_varargslist);
    7cc0:	683b      	ldr	r3, [r7, #0]
    7cc2:	689a      	ldr	r2, [r3, #8]
    7cc4:	2346      	movs	r3, #70	; 0x46
    7cc6:	68b9      	ldr	r1, [r7, #8]
    7cc8:	6878      	ldr	r0, [r7, #4]
    7cca:	f7fe f89f 	bl	5e0c <compile_funcdef_lambdef>
}
    7cce:	bf00      	nop
    7cd0:	3710      	adds	r7, #16
    7cd2:	46bd      	mov	sp, r7
    7cd4:	bd80      	pop	{r7, pc}

00007cd6 <compile_or_and_test>:

STATIC void compile_or_and_test(compiler_t *comp, mp_parse_node_struct_t *pns) {
    7cd6:	b580      	push	{r7, lr}
    7cd8:	b086      	sub	sp, #24
    7cda:	af00      	add	r7, sp, #0
    7cdc:	6078      	str	r0, [r7, #4]
    7cde:	6039      	str	r1, [r7, #0]
    bool cond = MP_PARSE_NODE_STRUCT_KIND(pns) == PN_or_test;
    7ce0:	683b      	ldr	r3, [r7, #0]
    7ce2:	685b      	ldr	r3, [r3, #4]
    7ce4:	b2db      	uxtb	r3, r3
    7ce6:	2b1c      	cmp	r3, #28
    7ce8:	bf0c      	ite	eq
    7cea:	2301      	moveq	r3, #1
    7cec:	2300      	movne	r3, #0
    7cee:	74fb      	strb	r3, [r7, #19]
    uint l_end = comp_next_label(comp);
    7cf0:	6878      	ldr	r0, [r7, #4]
    7cf2:	f7fd f9ff 	bl	50f4 <comp_next_label>
    7cf6:	60f8      	str	r0, [r7, #12]
    int n = MP_PARSE_NODE_STRUCT_NUM_NODES(pns);
    7cf8:	683b      	ldr	r3, [r7, #0]
    7cfa:	685b      	ldr	r3, [r3, #4]
    7cfc:	0a1b      	lsrs	r3, r3, #8
    7cfe:	60bb      	str	r3, [r7, #8]
    for (int i = 0; i < n; i += 1) {
    7d00:	2300      	movs	r3, #0
    7d02:	617b      	str	r3, [r7, #20]
    7d04:	e017      	b.n	7d36 <compile_or_and_test+0x60>
        compile_node(comp, pns->nodes[i]);
    7d06:	683b      	ldr	r3, [r7, #0]
    7d08:	697a      	ldr	r2, [r7, #20]
    7d0a:	3202      	adds	r2, #2
    7d0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    7d10:	4619      	mov	r1, r3
    7d12:	6878      	ldr	r0, [r7, #4]
    7d14:	f000 ffaf 	bl	8c76 <compile_node>
        if (i + 1 < n) {
    7d18:	697b      	ldr	r3, [r7, #20]
    7d1a:	1c5a      	adds	r2, r3, #1
    7d1c:	68bb      	ldr	r3, [r7, #8]
    7d1e:	429a      	cmp	r2, r3
    7d20:	da06      	bge.n	7d30 <compile_or_and_test+0x5a>
            EMIT_ARG(jump_if_or_pop, cond, l_end);
    7d22:	687b      	ldr	r3, [r7, #4]
    7d24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7d26:	7cf9      	ldrb	r1, [r7, #19]
    7d28:	68fa      	ldr	r2, [r7, #12]
    7d2a:	4618      	mov	r0, r3
    7d2c:	f002 fe72 	bl	aa14 <mp_emit_bc_jump_if_or_pop>
    for (int i = 0; i < n; i += 1) {
    7d30:	697b      	ldr	r3, [r7, #20]
    7d32:	3301      	adds	r3, #1
    7d34:	617b      	str	r3, [r7, #20]
    7d36:	697a      	ldr	r2, [r7, #20]
    7d38:	68bb      	ldr	r3, [r7, #8]
    7d3a:	429a      	cmp	r2, r3
    7d3c:	dbe3      	blt.n	7d06 <compile_or_and_test+0x30>
        }
    }
    EMIT_ARG(label_assign, l_end);
    7d3e:	687b      	ldr	r3, [r7, #4]
    7d40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7d42:	68f9      	ldr	r1, [r7, #12]
    7d44:	4618      	mov	r0, r3
    7d46:	f002 fbab 	bl	a4a0 <mp_emit_bc_label_assign>
}
    7d4a:	bf00      	nop
    7d4c:	3718      	adds	r7, #24
    7d4e:	46bd      	mov	sp, r7
    7d50:	bd80      	pop	{r7, pc}

00007d52 <compile_not_test_2>:

STATIC void compile_not_test_2(compiler_t *comp, mp_parse_node_struct_t *pns) {
    7d52:	b580      	push	{r7, lr}
    7d54:	b082      	sub	sp, #8
    7d56:	af00      	add	r7, sp, #0
    7d58:	6078      	str	r0, [r7, #4]
    7d5a:	6039      	str	r1, [r7, #0]
    compile_node(comp, pns->nodes[0]);
    7d5c:	683b      	ldr	r3, [r7, #0]
    7d5e:	689b      	ldr	r3, [r3, #8]
    7d60:	4619      	mov	r1, r3
    7d62:	6878      	ldr	r0, [r7, #4]
    7d64:	f000 ff87 	bl	8c76 <compile_node>
    EMIT_ARG(unary_op, MP_UNARY_OP_NOT);
    7d68:	687b      	ldr	r3, [r7, #4]
    7d6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7d6c:	2103      	movs	r1, #3
    7d6e:	4618      	mov	r0, r3
    7d70:	f002 ff64 	bl	ac3c <mp_emit_bc_unary_op>
}
    7d74:	bf00      	nop
    7d76:	3708      	adds	r7, #8
    7d78:	46bd      	mov	sp, r7
    7d7a:	bd80      	pop	{r7, pc}

00007d7c <compile_comparison>:

STATIC void compile_comparison(compiler_t *comp, mp_parse_node_struct_t *pns) {
    7d7c:	b580      	push	{r7, lr}
    7d7e:	b08a      	sub	sp, #40	; 0x28
    7d80:	af00      	add	r7, sp, #0
    7d82:	6078      	str	r0, [r7, #4]
    7d84:	6039      	str	r1, [r7, #0]
    int num_nodes = MP_PARSE_NODE_STRUCT_NUM_NODES(pns);
    7d86:	683b      	ldr	r3, [r7, #0]
    7d88:	685b      	ldr	r3, [r3, #4]
    7d8a:	0a1b      	lsrs	r3, r3, #8
    7d8c:	61bb      	str	r3, [r7, #24]
    compile_node(comp, pns->nodes[0]);
    7d8e:	683b      	ldr	r3, [r7, #0]
    7d90:	689b      	ldr	r3, [r3, #8]
    7d92:	4619      	mov	r1, r3
    7d94:	6878      	ldr	r0, [r7, #4]
    7d96:	f000 ff6e 	bl	8c76 <compile_node>
    bool multi = (num_nodes > 3);
    7d9a:	69bb      	ldr	r3, [r7, #24]
    7d9c:	2b03      	cmp	r3, #3
    7d9e:	bfcc      	ite	gt
    7da0:	2301      	movgt	r3, #1
    7da2:	2300      	movle	r3, #0
    7da4:	75fb      	strb	r3, [r7, #23]
    uint l_fail = 0;
    7da6:	2300      	movs	r3, #0
    7da8:	627b      	str	r3, [r7, #36]	; 0x24
    if (multi) {
    7daa:	7dfb      	ldrb	r3, [r7, #23]
    7dac:	2b00      	cmp	r3, #0
    7dae:	d003      	beq.n	7db8 <compile_comparison+0x3c>
        l_fail = comp_next_label(comp);
    7db0:	6878      	ldr	r0, [r7, #4]
    7db2:	f7fd f99f 	bl	50f4 <comp_next_label>
    7db6:	6278      	str	r0, [r7, #36]	; 0x24
    }
    for (int i = 1; i + 1 < num_nodes; i += 2) {
    7db8:	2301      	movs	r3, #1
    7dba:	623b      	str	r3, [r7, #32]
    7dbc:	e0b7      	b.n	7f2e <compile_comparison+0x1b2>
        compile_node(comp, pns->nodes[i + 1]);
    7dbe:	6a3b      	ldr	r3, [r7, #32]
    7dc0:	1c5a      	adds	r2, r3, #1
    7dc2:	683b      	ldr	r3, [r7, #0]
    7dc4:	3202      	adds	r2, #2
    7dc6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    7dca:	4619      	mov	r1, r3
    7dcc:	6878      	ldr	r0, [r7, #4]
    7dce:	f000 ff52 	bl	8c76 <compile_node>
        if (i + 2 < num_nodes) {
    7dd2:	6a3b      	ldr	r3, [r7, #32]
    7dd4:	1c9a      	adds	r2, r3, #2
    7dd6:	69bb      	ldr	r3, [r7, #24]
    7dd8:	429a      	cmp	r2, r3
    7dda:	da09      	bge.n	7df0 <compile_comparison+0x74>
            EMIT(dup_top);
    7ddc:	687b      	ldr	r3, [r7, #4]
    7dde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7de0:	4618      	mov	r0, r3
    7de2:	f002 fd96 	bl	a912 <mp_emit_bc_dup_top>
            EMIT(rot_three);
    7de6:	687b      	ldr	r3, [r7, #4]
    7de8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7dea:	4618      	mov	r0, r3
    7dec:	f002 fdd2 	bl	a994 <mp_emit_bc_rot_three>
        }
        if (MP_PARSE_NODE_IS_TOKEN(pns->nodes[i])) {
    7df0:	683b      	ldr	r3, [r7, #0]
    7df2:	6a3a      	ldr	r2, [r7, #32]
    7df4:	3202      	adds	r2, #2
    7df6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    7dfa:	f003 030f 	and.w	r3, r3, #15
    7dfe:	2b0e      	cmp	r3, #14
    7e00:	d140      	bne.n	7e84 <compile_comparison+0x108>
            mp_binary_op_t op;
            switch (MP_PARSE_NODE_LEAF_ARG(pns->nodes[i])) {
    7e02:	683b      	ldr	r3, [r7, #0]
    7e04:	6a3a      	ldr	r2, [r7, #32]
    7e06:	3202      	adds	r2, #2
    7e08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    7e0c:	091b      	lsrs	r3, r3, #4
    7e0e:	3b36      	subs	r3, #54	; 0x36
    7e10:	2b0b      	cmp	r3, #11
    7e12:	d82d      	bhi.n	7e70 <compile_comparison+0xf4>
    7e14:	a201      	add	r2, pc, #4	; (adr r2, 7e1c <compile_comparison+0xa0>)
    7e16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    7e1a:	bf00      	nop
    7e1c:	00007e4d 	.word	0x00007e4d
    7e20:	00007e71 	.word	0x00007e71
    7e24:	00007e53 	.word	0x00007e53
    7e28:	00007e71 	.word	0x00007e71
    7e2c:	00007e71 	.word	0x00007e71
    7e30:	00007e71 	.word	0x00007e71
    7e34:	00007e71 	.word	0x00007e71
    7e38:	00007e71 	.word	0x00007e71
    7e3c:	00007e5f 	.word	0x00007e5f
    7e40:	00007e65 	.word	0x00007e65
    7e44:	00007e59 	.word	0x00007e59
    7e48:	00007e6b 	.word	0x00007e6b
                case MP_TOKEN_OP_LESS: op = MP_BINARY_OP_LESS; break;
    7e4c:	2300      	movs	r3, #0
    7e4e:	61fb      	str	r3, [r7, #28]
    7e50:	e011      	b.n	7e76 <compile_comparison+0xfa>
                case MP_TOKEN_OP_MORE: op = MP_BINARY_OP_MORE; break;
    7e52:	2301      	movs	r3, #1
    7e54:	61fb      	str	r3, [r7, #28]
    7e56:	e00e      	b.n	7e76 <compile_comparison+0xfa>
                case MP_TOKEN_OP_DBL_EQUAL: op = MP_BINARY_OP_EQUAL; break;
    7e58:	2302      	movs	r3, #2
    7e5a:	61fb      	str	r3, [r7, #28]
    7e5c:	e00b      	b.n	7e76 <compile_comparison+0xfa>
                case MP_TOKEN_OP_LESS_EQUAL: op = MP_BINARY_OP_LESS_EQUAL; break;
    7e5e:	2303      	movs	r3, #3
    7e60:	61fb      	str	r3, [r7, #28]
    7e62:	e008      	b.n	7e76 <compile_comparison+0xfa>
                case MP_TOKEN_OP_MORE_EQUAL: op = MP_BINARY_OP_MORE_EQUAL; break;
    7e64:	2304      	movs	r3, #4
    7e66:	61fb      	str	r3, [r7, #28]
    7e68:	e005      	b.n	7e76 <compile_comparison+0xfa>
                case MP_TOKEN_OP_NOT_EQUAL: op = MP_BINARY_OP_NOT_EQUAL; break;
    7e6a:	2305      	movs	r3, #5
    7e6c:	61fb      	str	r3, [r7, #28]
    7e6e:	e002      	b.n	7e76 <compile_comparison+0xfa>
                case MP_TOKEN_KW_IN: default: op = MP_BINARY_OP_IN; break;
    7e70:	2306      	movs	r3, #6
    7e72:	61fb      	str	r3, [r7, #28]
    7e74:	bf00      	nop
            }
            EMIT_ARG(binary_op, op);
    7e76:	687b      	ldr	r3, [r7, #4]
    7e78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7e7a:	69f9      	ldr	r1, [r7, #28]
    7e7c:	4618      	mov	r0, r3
    7e7e:	f002 fef2 	bl	ac66 <mp_emit_bc_binary_op>
    7e82:	e045      	b.n	7f10 <compile_comparison+0x194>
        } else {
            assert(MP_PARSE_NODE_IS_STRUCT(pns->nodes[i])); // should be
    7e84:	683b      	ldr	r3, [r7, #0]
    7e86:	6a3a      	ldr	r2, [r7, #32]
    7e88:	3202      	adds	r2, #2
    7e8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    7e8e:	2b00      	cmp	r3, #0
    7e90:	d008      	beq.n	7ea4 <compile_comparison+0x128>
    7e92:	683b      	ldr	r3, [r7, #0]
    7e94:	6a3a      	ldr	r2, [r7, #32]
    7e96:	3202      	adds	r2, #2
    7e98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    7e9c:	f003 0303 	and.w	r3, r3, #3
    7ea0:	2b00      	cmp	r3, #0
    7ea2:	d006      	beq.n	7eb2 <compile_comparison+0x136>
    7ea4:	4b3b      	ldr	r3, [pc, #236]	; (7f94 <compile_comparison+0x218>)
    7ea6:	4a3c      	ldr	r2, [pc, #240]	; (7f98 <compile_comparison+0x21c>)
    7ea8:	f640 0131 	movw	r1, #2097	; 0x831
    7eac:	483b      	ldr	r0, [pc, #236]	; (7f9c <compile_comparison+0x220>)
    7eae:	f015 f817 	bl	1cee0 <__assert_func>
            mp_parse_node_struct_t *pns2 = (mp_parse_node_struct_t*)pns->nodes[i];
    7eb2:	683b      	ldr	r3, [r7, #0]
    7eb4:	6a3a      	ldr	r2, [r7, #32]
    7eb6:	3202      	adds	r2, #2
    7eb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    7ebc:	613b      	str	r3, [r7, #16]
            int kind = MP_PARSE_NODE_STRUCT_KIND(pns2);
    7ebe:	693b      	ldr	r3, [r7, #16]
    7ec0:	685b      	ldr	r3, [r3, #4]
    7ec2:	b2db      	uxtb	r3, r3
    7ec4:	60fb      	str	r3, [r7, #12]
            if (kind == PN_comp_op_not_in) {
    7ec6:	68fb      	ldr	r3, [r7, #12]
    7ec8:	2b7d      	cmp	r3, #125	; 0x7d
    7eca:	d106      	bne.n	7eda <compile_comparison+0x15e>
                EMIT_ARG(binary_op, MP_BINARY_OP_NOT_IN);
    7ecc:	687b      	ldr	r3, [r7, #4]
    7ece:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7ed0:	2124      	movs	r1, #36	; 0x24
    7ed2:	4618      	mov	r0, r3
    7ed4:	f002 fec7 	bl	ac66 <mp_emit_bc_binary_op>
    7ed8:	e01a      	b.n	7f10 <compile_comparison+0x194>
            } else {
                assert(kind == PN_comp_op_is); // should be
    7eda:	68fb      	ldr	r3, [r7, #12]
    7edc:	2b7e      	cmp	r3, #126	; 0x7e
    7ede:	d006      	beq.n	7eee <compile_comparison+0x172>
    7ee0:	4b2f      	ldr	r3, [pc, #188]	; (7fa0 <compile_comparison+0x224>)
    7ee2:	4a2d      	ldr	r2, [pc, #180]	; (7f98 <compile_comparison+0x21c>)
    7ee4:	f640 0137 	movw	r1, #2103	; 0x837
    7ee8:	482c      	ldr	r0, [pc, #176]	; (7f9c <compile_comparison+0x220>)
    7eea:	f014 fff9 	bl	1cee0 <__assert_func>
                if (MP_PARSE_NODE_IS_NULL(pns2->nodes[0])) {
    7eee:	693b      	ldr	r3, [r7, #16]
    7ef0:	689b      	ldr	r3, [r3, #8]
    7ef2:	2b00      	cmp	r3, #0
    7ef4:	d106      	bne.n	7f04 <compile_comparison+0x188>
                    EMIT_ARG(binary_op, MP_BINARY_OP_IS);
    7ef6:	687b      	ldr	r3, [r7, #4]
    7ef8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7efa:	2107      	movs	r1, #7
    7efc:	4618      	mov	r0, r3
    7efe:	f002 feb2 	bl	ac66 <mp_emit_bc_binary_op>
    7f02:	e005      	b.n	7f10 <compile_comparison+0x194>
                } else {
                    EMIT_ARG(binary_op, MP_BINARY_OP_IS_NOT);
    7f04:	687b      	ldr	r3, [r7, #4]
    7f06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7f08:	2125      	movs	r1, #37	; 0x25
    7f0a:	4618      	mov	r0, r3
    7f0c:	f002 feab 	bl	ac66 <mp_emit_bc_binary_op>
                }
            }
        }
        if (i + 2 < num_nodes) {
    7f10:	6a3b      	ldr	r3, [r7, #32]
    7f12:	1c9a      	adds	r2, r3, #2
    7f14:	69bb      	ldr	r3, [r7, #24]
    7f16:	429a      	cmp	r2, r3
    7f18:	da06      	bge.n	7f28 <compile_comparison+0x1ac>
            EMIT_ARG(jump_if_or_pop, false, l_fail);
    7f1a:	687b      	ldr	r3, [r7, #4]
    7f1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7f1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    7f20:	2100      	movs	r1, #0
    7f22:	4618      	mov	r0, r3
    7f24:	f002 fd76 	bl	aa14 <mp_emit_bc_jump_if_or_pop>
    for (int i = 1; i + 1 < num_nodes; i += 2) {
    7f28:	6a3b      	ldr	r3, [r7, #32]
    7f2a:	3302      	adds	r3, #2
    7f2c:	623b      	str	r3, [r7, #32]
    7f2e:	6a3b      	ldr	r3, [r7, #32]
    7f30:	1c5a      	adds	r2, r3, #1
    7f32:	69bb      	ldr	r3, [r7, #24]
    7f34:	429a      	cmp	r2, r3
    7f36:	f6ff af42 	blt.w	7dbe <compile_comparison+0x42>
        }
    }
    if (multi) {
    7f3a:	7dfb      	ldrb	r3, [r7, #23]
    7f3c:	2b00      	cmp	r3, #0
    7f3e:	d025      	beq.n	7f8c <compile_comparison+0x210>
        uint l_end = comp_next_label(comp);
    7f40:	6878      	ldr	r0, [r7, #4]
    7f42:	f7fd f8d7 	bl	50f4 <comp_next_label>
    7f46:	60b8      	str	r0, [r7, #8]
        EMIT_ARG(jump, l_end);
    7f48:	687b      	ldr	r3, [r7, #4]
    7f4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7f4c:	68b9      	ldr	r1, [r7, #8]
    7f4e:	4618      	mov	r0, r3
    7f50:	f002 fd30 	bl	a9b4 <mp_emit_bc_jump>
        EMIT_ARG(label_assign, l_fail);
    7f54:	687b      	ldr	r3, [r7, #4]
    7f56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7f58:	6a79      	ldr	r1, [r7, #36]	; 0x24
    7f5a:	4618      	mov	r0, r3
    7f5c:	f002 faa0 	bl	a4a0 <mp_emit_bc_label_assign>
        EMIT_ARG(adjust_stack_size, 1);
    7f60:	687b      	ldr	r3, [r7, #4]
    7f62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7f64:	2101      	movs	r1, #1
    7f66:	4618      	mov	r0, r3
    7f68:	f002 fa4b 	bl	a402 <mp_emit_bc_adjust_stack_size>
        EMIT(rot_two);
    7f6c:	687b      	ldr	r3, [r7, #4]
    7f6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7f70:	4618      	mov	r0, r3
    7f72:	f002 fcff 	bl	a974 <mp_emit_bc_rot_two>
        EMIT(pop_top);
    7f76:	687b      	ldr	r3, [r7, #4]
    7f78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7f7a:	4618      	mov	r0, r3
    7f7c:	f002 fce9 	bl	a952 <mp_emit_bc_pop_top>
        EMIT_ARG(label_assign, l_end);
    7f80:	687b      	ldr	r3, [r7, #4]
    7f82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7f84:	68b9      	ldr	r1, [r7, #8]
    7f86:	4618      	mov	r0, r3
    7f88:	f002 fa8a 	bl	a4a0 <mp_emit_bc_label_assign>
    }
}
    7f8c:	bf00      	nop
    7f8e:	3728      	adds	r7, #40	; 0x28
    7f90:	46bd      	mov	sp, r7
    7f92:	bd80      	pop	{r7, pc}
    7f94:	00022264 	.word	0x00022264
    7f98:	00022960 	.word	0x00022960
    7f9c:	00021c60 	.word	0x00021c60
    7fa0:	0002228c 	.word	0x0002228c

00007fa4 <compile_star_expr>:

STATIC void compile_star_expr(compiler_t *comp, mp_parse_node_struct_t *pns) {
    7fa4:	b580      	push	{r7, lr}
    7fa6:	b082      	sub	sp, #8
    7fa8:	af00      	add	r7, sp, #0
    7faa:	6078      	str	r0, [r7, #4]
    7fac:	6039      	str	r1, [r7, #0]
    compile_syntax_error(comp, (mp_parse_node_t)pns, "*x must be assignment target");
    7fae:	683b      	ldr	r3, [r7, #0]
    7fb0:	4a04      	ldr	r2, [pc, #16]	; (7fc4 <compile_star_expr+0x20>)
    7fb2:	4619      	mov	r1, r3
    7fb4:	6878      	ldr	r0, [r7, #4]
    7fb6:	f7fd f882 	bl	50be <compile_syntax_error>
}
    7fba:	bf00      	nop
    7fbc:	3708      	adds	r7, #8
    7fbe:	46bd      	mov	sp, r7
    7fc0:	bd80      	pop	{r7, pc}
    7fc2:	bf00      	nop
    7fc4:	000222a4 	.word	0x000222a4

00007fc8 <compile_binary_op>:

STATIC void compile_binary_op(compiler_t *comp, mp_parse_node_struct_t *pns) {
    7fc8:	b580      	push	{r7, lr}
    7fca:	b086      	sub	sp, #24
    7fcc:	af00      	add	r7, sp, #0
    7fce:	6078      	str	r0, [r7, #4]
    7fd0:	6039      	str	r1, [r7, #0]
    MP_STATIC_ASSERT(MP_BINARY_OP_OR + PN_xor_expr - PN_expr == MP_BINARY_OP_XOR);
    MP_STATIC_ASSERT(MP_BINARY_OP_OR + PN_and_expr - PN_expr == MP_BINARY_OP_AND);
    mp_binary_op_t binary_op = MP_BINARY_OP_OR + MP_PARSE_NODE_STRUCT_KIND(pns) - PN_expr;
    7fd2:	683b      	ldr	r3, [r7, #0]
    7fd4:	685b      	ldr	r3, [r3, #4]
    7fd6:	b2db      	uxtb	r3, r3
    7fd8:	3b0c      	subs	r3, #12
    7fda:	613b      	str	r3, [r7, #16]
    int num_nodes = MP_PARSE_NODE_STRUCT_NUM_NODES(pns);
    7fdc:	683b      	ldr	r3, [r7, #0]
    7fde:	685b      	ldr	r3, [r3, #4]
    7fe0:	0a1b      	lsrs	r3, r3, #8
    7fe2:	60fb      	str	r3, [r7, #12]
    compile_node(comp, pns->nodes[0]);
    7fe4:	683b      	ldr	r3, [r7, #0]
    7fe6:	689b      	ldr	r3, [r3, #8]
    7fe8:	4619      	mov	r1, r3
    7fea:	6878      	ldr	r0, [r7, #4]
    7fec:	f000 fe43 	bl	8c76 <compile_node>
    for (int i = 1; i < num_nodes; ++i) {
    7ff0:	2301      	movs	r3, #1
    7ff2:	617b      	str	r3, [r7, #20]
    7ff4:	e011      	b.n	801a <compile_binary_op+0x52>
        compile_node(comp, pns->nodes[i]);
    7ff6:	683b      	ldr	r3, [r7, #0]
    7ff8:	697a      	ldr	r2, [r7, #20]
    7ffa:	3202      	adds	r2, #2
    7ffc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    8000:	4619      	mov	r1, r3
    8002:	6878      	ldr	r0, [r7, #4]
    8004:	f000 fe37 	bl	8c76 <compile_node>
        EMIT_ARG(binary_op, binary_op);
    8008:	687b      	ldr	r3, [r7, #4]
    800a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    800c:	6939      	ldr	r1, [r7, #16]
    800e:	4618      	mov	r0, r3
    8010:	f002 fe29 	bl	ac66 <mp_emit_bc_binary_op>
    for (int i = 1; i < num_nodes; ++i) {
    8014:	697b      	ldr	r3, [r7, #20]
    8016:	3301      	adds	r3, #1
    8018:	617b      	str	r3, [r7, #20]
    801a:	697a      	ldr	r2, [r7, #20]
    801c:	68fb      	ldr	r3, [r7, #12]
    801e:	429a      	cmp	r2, r3
    8020:	dbe9      	blt.n	7ff6 <compile_binary_op+0x2e>
    }
}
    8022:	bf00      	nop
    8024:	3718      	adds	r7, #24
    8026:	46bd      	mov	sp, r7
    8028:	bd80      	pop	{r7, pc}

0000802a <compile_term>:

STATIC void compile_term(compiler_t *comp, mp_parse_node_struct_t *pns) {
    802a:	b580      	push	{r7, lr}
    802c:	b086      	sub	sp, #24
    802e:	af00      	add	r7, sp, #0
    8030:	6078      	str	r0, [r7, #4]
    8032:	6039      	str	r1, [r7, #0]
    int num_nodes = MP_PARSE_NODE_STRUCT_NUM_NODES(pns);
    8034:	683b      	ldr	r3, [r7, #0]
    8036:	685b      	ldr	r3, [r3, #4]
    8038:	0a1b      	lsrs	r3, r3, #8
    803a:	60fb      	str	r3, [r7, #12]
    compile_node(comp, pns->nodes[0]);
    803c:	683b      	ldr	r3, [r7, #0]
    803e:	689b      	ldr	r3, [r3, #8]
    8040:	4619      	mov	r1, r3
    8042:	6878      	ldr	r0, [r7, #4]
    8044:	f000 fe17 	bl	8c76 <compile_node>
    for (int i = 1; i + 1 < num_nodes; i += 2) {
    8048:	2301      	movs	r3, #1
    804a:	617b      	str	r3, [r7, #20]
    804c:	e055      	b.n	80fa <compile_term+0xd0>
        compile_node(comp, pns->nodes[i + 1]);
    804e:	697b      	ldr	r3, [r7, #20]
    8050:	1c5a      	adds	r2, r3, #1
    8052:	683b      	ldr	r3, [r7, #0]
    8054:	3202      	adds	r2, #2
    8056:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    805a:	4619      	mov	r1, r3
    805c:	6878      	ldr	r0, [r7, #4]
    805e:	f000 fe0a 	bl	8c76 <compile_node>
        mp_binary_op_t op;
        mp_token_kind_t tok = MP_PARSE_NODE_LEAF_ARG(pns->nodes[i]);
    8062:	683b      	ldr	r3, [r7, #0]
    8064:	697a      	ldr	r2, [r7, #20]
    8066:	3202      	adds	r2, #2
    8068:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    806c:	091b      	lsrs	r3, r3, #4
    806e:	60bb      	str	r3, [r7, #8]
        switch (tok) {
    8070:	68bb      	ldr	r3, [r7, #8]
    8072:	3b2f      	subs	r3, #47	; 0x2f
    8074:	2b08      	cmp	r3, #8
    8076:	d82a      	bhi.n	80ce <compile_term+0xa4>
    8078:	a201      	add	r2, pc, #4	; (adr r2, 8080 <compile_term+0x56>)
    807a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    807e:	bf00      	nop
    8080:	000080a5 	.word	0x000080a5
    8084:	000080ab 	.word	0x000080ab
    8088:	000080b1 	.word	0x000080b1
    808c:	000080cf 	.word	0x000080cf
    8090:	000080bd 	.word	0x000080bd
    8094:	000080b7 	.word	0x000080b7
    8098:	000080c3 	.word	0x000080c3
    809c:	000080cf 	.word	0x000080cf
    80a0:	000080c9 	.word	0x000080c9
            case MP_TOKEN_OP_PLUS:      op = MP_BINARY_OP_ADD; break;
    80a4:	231a      	movs	r3, #26
    80a6:	613b      	str	r3, [r7, #16]
    80a8:	e01e      	b.n	80e8 <compile_term+0xbe>
            case MP_TOKEN_OP_MINUS:     op = MP_BINARY_OP_SUBTRACT; break;
    80aa:	231b      	movs	r3, #27
    80ac:	613b      	str	r3, [r7, #16]
    80ae:	e01b      	b.n	80e8 <compile_term+0xbe>
            case MP_TOKEN_OP_STAR:      op = MP_BINARY_OP_MULTIPLY; break;
    80b0:	231c      	movs	r3, #28
    80b2:	613b      	str	r3, [r7, #16]
    80b4:	e018      	b.n	80e8 <compile_term+0xbe>
            case MP_TOKEN_OP_DBL_SLASH: op = MP_BINARY_OP_FLOOR_DIVIDE; break;
    80b6:	231d      	movs	r3, #29
    80b8:	613b      	str	r3, [r7, #16]
    80ba:	e015      	b.n	80e8 <compile_term+0xbe>
            case MP_TOKEN_OP_SLASH:     op = MP_BINARY_OP_TRUE_DIVIDE; break;
    80bc:	231e      	movs	r3, #30
    80be:	613b      	str	r3, [r7, #16]
    80c0:	e012      	b.n	80e8 <compile_term+0xbe>
            case MP_TOKEN_OP_PERCENT:   op = MP_BINARY_OP_MODULO; break;
    80c2:	231f      	movs	r3, #31
    80c4:	613b      	str	r3, [r7, #16]
    80c6:	e00f      	b.n	80e8 <compile_term+0xbe>
            case MP_TOKEN_OP_DBL_LESS:  op = MP_BINARY_OP_LSHIFT; break;
    80c8:	2318      	movs	r3, #24
    80ca:	613b      	str	r3, [r7, #16]
    80cc:	e00c      	b.n	80e8 <compile_term+0xbe>
            default:
                assert(tok == MP_TOKEN_OP_DBL_MORE);
    80ce:	68bb      	ldr	r3, [r7, #8]
    80d0:	2b39      	cmp	r3, #57	; 0x39
    80d2:	d006      	beq.n	80e2 <compile_term+0xb8>
    80d4:	4b0d      	ldr	r3, [pc, #52]	; (810c <compile_term+0xe2>)
    80d6:	4a0e      	ldr	r2, [pc, #56]	; (8110 <compile_term+0xe6>)
    80d8:	f640 016e 	movw	r1, #2158	; 0x86e
    80dc:	480d      	ldr	r0, [pc, #52]	; (8114 <compile_term+0xea>)
    80de:	f014 feff 	bl	1cee0 <__assert_func>
                op = MP_BINARY_OP_RSHIFT;
    80e2:	2319      	movs	r3, #25
    80e4:	613b      	str	r3, [r7, #16]
                break;
    80e6:	bf00      	nop
        }
        EMIT_ARG(binary_op, op);
    80e8:	687b      	ldr	r3, [r7, #4]
    80ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    80ec:	6939      	ldr	r1, [r7, #16]
    80ee:	4618      	mov	r0, r3
    80f0:	f002 fdb9 	bl	ac66 <mp_emit_bc_binary_op>
    for (int i = 1; i + 1 < num_nodes; i += 2) {
    80f4:	697b      	ldr	r3, [r7, #20]
    80f6:	3302      	adds	r3, #2
    80f8:	617b      	str	r3, [r7, #20]
    80fa:	697b      	ldr	r3, [r7, #20]
    80fc:	1c5a      	adds	r2, r3, #1
    80fe:	68fb      	ldr	r3, [r7, #12]
    8100:	429a      	cmp	r2, r3
    8102:	dba4      	blt.n	804e <compile_term+0x24>
    }
}
    8104:	bf00      	nop
    8106:	3718      	adds	r7, #24
    8108:	46bd      	mov	sp, r7
    810a:	bd80      	pop	{r7, pc}
    810c:	000222c4 	.word	0x000222c4
    8110:	00022974 	.word	0x00022974
    8114:	00021c60 	.word	0x00021c60

00008118 <compile_factor_2>:

STATIC void compile_factor_2(compiler_t *comp, mp_parse_node_struct_t *pns) {
    8118:	b580      	push	{r7, lr}
    811a:	b084      	sub	sp, #16
    811c:	af00      	add	r7, sp, #0
    811e:	6078      	str	r0, [r7, #4]
    8120:	6039      	str	r1, [r7, #0]
    compile_node(comp, pns->nodes[1]);
    8122:	683b      	ldr	r3, [r7, #0]
    8124:	68db      	ldr	r3, [r3, #12]
    8126:	4619      	mov	r1, r3
    8128:	6878      	ldr	r0, [r7, #4]
    812a:	f000 fda4 	bl	8c76 <compile_node>
    mp_unary_op_t op;
    mp_token_kind_t tok = MP_PARSE_NODE_LEAF_ARG(pns->nodes[0]);
    812e:	683b      	ldr	r3, [r7, #0]
    8130:	689b      	ldr	r3, [r3, #8]
    8132:	091b      	lsrs	r3, r3, #4
    8134:	60bb      	str	r3, [r7, #8]
    switch (tok) {
    8136:	68bb      	ldr	r3, [r7, #8]
    8138:	2b2f      	cmp	r3, #47	; 0x2f
    813a:	d002      	beq.n	8142 <compile_factor_2+0x2a>
    813c:	2b30      	cmp	r3, #48	; 0x30
    813e:	d003      	beq.n	8148 <compile_factor_2+0x30>
    8140:	e005      	b.n	814e <compile_factor_2+0x36>
        case MP_TOKEN_OP_PLUS:  op = MP_UNARY_OP_POSITIVE; break;
    8142:	2300      	movs	r3, #0
    8144:	60fb      	str	r3, [r7, #12]
    8146:	e00f      	b.n	8168 <compile_factor_2+0x50>
        case MP_TOKEN_OP_MINUS: op = MP_UNARY_OP_NEGATIVE; break;
    8148:	2301      	movs	r3, #1
    814a:	60fb      	str	r3, [r7, #12]
    814c:	e00c      	b.n	8168 <compile_factor_2+0x50>
        default:
            assert(tok == MP_TOKEN_OP_TILDE);
    814e:	68bb      	ldr	r3, [r7, #8]
    8150:	2b3d      	cmp	r3, #61	; 0x3d
    8152:	d006      	beq.n	8162 <compile_factor_2+0x4a>
    8154:	4b09      	ldr	r3, [pc, #36]	; (817c <compile_factor_2+0x64>)
    8156:	4a0a      	ldr	r2, [pc, #40]	; (8180 <compile_factor_2+0x68>)
    8158:	f640 017e 	movw	r1, #2174	; 0x87e
    815c:	4809      	ldr	r0, [pc, #36]	; (8184 <compile_factor_2+0x6c>)
    815e:	f014 febf 	bl	1cee0 <__assert_func>
            op = MP_UNARY_OP_INVERT;
    8162:	2302      	movs	r3, #2
    8164:	60fb      	str	r3, [r7, #12]
            break;
    8166:	bf00      	nop
    }
    EMIT_ARG(unary_op, op);
    8168:	687b      	ldr	r3, [r7, #4]
    816a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    816c:	68f9      	ldr	r1, [r7, #12]
    816e:	4618      	mov	r0, r3
    8170:	f002 fd64 	bl	ac3c <mp_emit_bc_unary_op>
}
    8174:	bf00      	nop
    8176:	3710      	adds	r7, #16
    8178:	46bd      	mov	sp, r7
    817a:	bd80      	pop	{r7, pc}
    817c:	000222e0 	.word	0x000222e0
    8180:	00022984 	.word	0x00022984
    8184:	00021c60 	.word	0x00021c60

00008188 <compile_atom_expr_normal>:

STATIC void compile_atom_expr_normal(compiler_t *comp, mp_parse_node_struct_t *pns) {
    8188:	b580      	push	{r7, lr}
    818a:	b08c      	sub	sp, #48	; 0x30
    818c:	af00      	add	r7, sp, #0
    818e:	6078      	str	r0, [r7, #4]
    8190:	6039      	str	r1, [r7, #0]
    // compile the subject of the expression
    compile_node(comp, pns->nodes[0]);
    8192:	683b      	ldr	r3, [r7, #0]
    8194:	689b      	ldr	r3, [r3, #8]
    8196:	4619      	mov	r1, r3
    8198:	6878      	ldr	r0, [r7, #4]
    819a:	f000 fd6c 	bl	8c76 <compile_node>

    // compile_atom_expr_await may call us with a NULL node
    if (MP_PARSE_NODE_IS_NULL(pns->nodes[1])) {
    819e:	683b      	ldr	r3, [r7, #0]
    81a0:	68db      	ldr	r3, [r3, #12]
    81a2:	2b00      	cmp	r3, #0
    81a4:	f000 80ee 	beq.w	8384 <compile_atom_expr_normal+0x1fc>
        return;
    }

    // get the array of trailers (known to be an array of PARSE_NODE_STRUCT)
    size_t num_trail = 1;
    81a8:	2301      	movs	r3, #1
    81aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    mp_parse_node_struct_t **pns_trail = (mp_parse_node_struct_t**)&pns->nodes[1];
    81ac:	683b      	ldr	r3, [r7, #0]
    81ae:	330c      	adds	r3, #12
    81b0:	62bb      	str	r3, [r7, #40]	; 0x28
    if (MP_PARSE_NODE_STRUCT_KIND(pns_trail[0]) == PN_atom_expr_trailers) {
    81b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    81b4:	681b      	ldr	r3, [r3, #0]
    81b6:	685b      	ldr	r3, [r3, #4]
    81b8:	b2db      	uxtb	r3, r3
    81ba:	2b86      	cmp	r3, #134	; 0x86
    81bc:	d108      	bne.n	81d0 <compile_atom_expr_normal+0x48>
        num_trail = MP_PARSE_NODE_STRUCT_NUM_NODES(pns_trail[0]);
    81be:	6abb      	ldr	r3, [r7, #40]	; 0x28
    81c0:	681b      	ldr	r3, [r3, #0]
    81c2:	685b      	ldr	r3, [r3, #4]
    81c4:	0a1b      	lsrs	r3, r3, #8
    81c6:	62fb      	str	r3, [r7, #44]	; 0x2c
        pns_trail = (mp_parse_node_struct_t**)&pns_trail[0]->nodes[0];
    81c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
    81ca:	681b      	ldr	r3, [r3, #0]
    81cc:	3308      	adds	r3, #8
    81ce:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    // the current index into the array of trailers
    size_t i = 0;
    81d0:	2300      	movs	r3, #0
    81d2:	627b      	str	r3, [r7, #36]	; 0x24

    // handle special super() call
    if (comp->scope_cur->kind == SCOPE_FUNCTION
    81d4:	687b      	ldr	r3, [r7, #4]
    81d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    81d8:	681b      	ldr	r3, [r3, #0]
    81da:	2b07      	cmp	r3, #7
    81dc:	f040 80cd 	bne.w	837a <compile_atom_expr_normal+0x1f2>
        && MP_PARSE_NODE_IS_ID(pns->nodes[0])
    81e0:	683b      	ldr	r3, [r7, #0]
    81e2:	689b      	ldr	r3, [r3, #8]
    81e4:	f003 030f 	and.w	r3, r3, #15
    81e8:	2b02      	cmp	r3, #2
    81ea:	f040 80c6 	bne.w	837a <compile_atom_expr_normal+0x1f2>
        && MP_PARSE_NODE_LEAF_ARG(pns->nodes[0]) == MP_QSTR_super
    81ee:	683b      	ldr	r3, [r7, #0]
    81f0:	689b      	ldr	r3, [r3, #8]
    81f2:	091b      	lsrs	r3, r3, #4
    81f4:	f240 1267 	movw	r2, #359	; 0x167
    81f8:	4293      	cmp	r3, r2
    81fa:	f040 80be 	bne.w	837a <compile_atom_expr_normal+0x1f2>
        && MP_PARSE_NODE_STRUCT_KIND(pns_trail[0]) == PN_trailer_paren
    81fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
    8200:	681b      	ldr	r3, [r3, #0]
    8202:	685b      	ldr	r3, [r3, #4]
    8204:	b2db      	uxtb	r3, r3
    8206:	2b2d      	cmp	r3, #45	; 0x2d
    8208:	f040 80b7 	bne.w	837a <compile_atom_expr_normal+0x1f2>
        && MP_PARSE_NODE_IS_NULL(pns_trail[0]->nodes[0])) {
    820c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    820e:	681b      	ldr	r3, [r3, #0]
    8210:	689b      	ldr	r3, [r3, #8]
    8212:	2b00      	cmp	r3, #0
    8214:	f040 80b1 	bne.w	837a <compile_atom_expr_normal+0x1f2>
        // at this point we have matched "super()" within a function

        // load the class for super to search for a parent
        compile_load_id(comp, MP_QSTR___class__);
    8218:	2106      	movs	r1, #6
    821a:	6878      	ldr	r0, [r7, #4]
    821c:	f7fd f859 	bl	52d2 <compile_load_id>

        // look for first argument to function (assumes it's "self")
        bool found = false;
    8220:	2300      	movs	r3, #0
    8222:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        id_info_t *id = &comp->scope_cur->id_info[0];
    8226:	687b      	ldr	r3, [r7, #4]
    8228:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    822a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    822c:	61fb      	str	r3, [r7, #28]
        for (size_t n = comp->scope_cur->id_info_len; n > 0; --n, ++id) {
    822e:	687b      	ldr	r3, [r7, #4]
    8230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    8232:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
    8234:	61bb      	str	r3, [r7, #24]
    8236:	e015      	b.n	8264 <compile_atom_expr_normal+0xdc>
            if (id->flags & ID_FLAG_IS_PARAM) {
    8238:	69fb      	ldr	r3, [r7, #28]
    823a:	785b      	ldrb	r3, [r3, #1]
    823c:	f003 0301 	and.w	r3, r3, #1
    8240:	2b00      	cmp	r3, #0
    8242:	d009      	beq.n	8258 <compile_atom_expr_normal+0xd0>
                // first argument found; load it
                compile_load_id(comp, id->qst);
    8244:	69fb      	ldr	r3, [r7, #28]
    8246:	685b      	ldr	r3, [r3, #4]
    8248:	4619      	mov	r1, r3
    824a:	6878      	ldr	r0, [r7, #4]
    824c:	f7fd f841 	bl	52d2 <compile_load_id>
                found = true;
    8250:	2301      	movs	r3, #1
    8252:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
                break;
    8256:	e008      	b.n	826a <compile_atom_expr_normal+0xe2>
        for (size_t n = comp->scope_cur->id_info_len; n > 0; --n, ++id) {
    8258:	69bb      	ldr	r3, [r7, #24]
    825a:	3b01      	subs	r3, #1
    825c:	61bb      	str	r3, [r7, #24]
    825e:	69fb      	ldr	r3, [r7, #28]
    8260:	3308      	adds	r3, #8
    8262:	61fb      	str	r3, [r7, #28]
    8264:	69bb      	ldr	r3, [r7, #24]
    8266:	2b00      	cmp	r3, #0
    8268:	d1e6      	bne.n	8238 <compile_atom_expr_normal+0xb0>
            }
        }
        if (!found) {
    826a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
    826e:	f083 0301 	eor.w	r3, r3, #1
    8272:	b2db      	uxtb	r3, r3
    8274:	2b00      	cmp	r3, #0
    8276:	d007      	beq.n	8288 <compile_atom_expr_normal+0x100>
            compile_syntax_error(comp, (mp_parse_node_t)pns_trail[0],
    8278:	6abb      	ldr	r3, [r7, #40]	; 0x28
    827a:	681b      	ldr	r3, [r3, #0]
    827c:	4a43      	ldr	r2, [pc, #268]	; (838c <compile_atom_expr_normal+0x204>)
    827e:	4619      	mov	r1, r3
    8280:	6878      	ldr	r0, [r7, #4]
    8282:	f7fc ff1c 	bl	50be <compile_syntax_error>
                "super() can't find self"); // really a TypeError
            return;
    8286:	e07e      	b.n	8386 <compile_atom_expr_normal+0x1fe>
        }

        if (num_trail >= 3
    8288:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    828a:	2b02      	cmp	r3, #2
    828c:	d926      	bls.n	82dc <compile_atom_expr_normal+0x154>
            && MP_PARSE_NODE_STRUCT_KIND(pns_trail[1]) == PN_trailer_period
    828e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    8290:	3304      	adds	r3, #4
    8292:	681b      	ldr	r3, [r3, #0]
    8294:	685b      	ldr	r3, [r3, #4]
    8296:	b2db      	uxtb	r3, r3
    8298:	2b2f      	cmp	r3, #47	; 0x2f
    829a:	d11f      	bne.n	82dc <compile_atom_expr_normal+0x154>
            && MP_PARSE_NODE_STRUCT_KIND(pns_trail[2]) == PN_trailer_paren) {
    829c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    829e:	3308      	adds	r3, #8
    82a0:	681b      	ldr	r3, [r3, #0]
    82a2:	685b      	ldr	r3, [r3, #4]
    82a4:	b2db      	uxtb	r3, r3
    82a6:	2b2d      	cmp	r3, #45	; 0x2d
    82a8:	d118      	bne.n	82dc <compile_atom_expr_normal+0x154>
            // optimisation for method calls super().f(...), to eliminate heap allocation
            mp_parse_node_struct_t *pns_period = pns_trail[1];
    82aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
    82ac:	685b      	ldr	r3, [r3, #4]
    82ae:	617b      	str	r3, [r7, #20]
            mp_parse_node_struct_t *pns_paren = pns_trail[2];
    82b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
    82b2:	689b      	ldr	r3, [r3, #8]
    82b4:	613b      	str	r3, [r7, #16]
            EMIT_ARG(load_method, MP_PARSE_NODE_LEAF_ARG(pns_period->nodes[0]), true);
    82b6:	687b      	ldr	r3, [r7, #4]
    82b8:	6a98      	ldr	r0, [r3, #40]	; 0x28
    82ba:	697b      	ldr	r3, [r7, #20]
    82bc:	689b      	ldr	r3, [r3, #8]
    82be:	091b      	lsrs	r3, r3, #4
    82c0:	2201      	movs	r2, #1
    82c2:	4619      	mov	r1, r3
    82c4:	f002 fa3a 	bl	a73c <mp_emit_bc_load_method>
            compile_trailer_paren_helper(comp, pns_paren->nodes[0], true, 0);
    82c8:	693b      	ldr	r3, [r7, #16]
    82ca:	6899      	ldr	r1, [r3, #8]
    82cc:	2300      	movs	r3, #0
    82ce:	2201      	movs	r2, #1
    82d0:	6878      	ldr	r0, [r7, #4]
    82d2:	f000 f870 	bl	83b6 <compile_trailer_paren_helper>
            i = 3;
    82d6:	2303      	movs	r3, #3
    82d8:	627b      	str	r3, [r7, #36]	; 0x24
            && MP_PARSE_NODE_STRUCT_KIND(pns_trail[2]) == PN_trailer_paren) {
    82da:	e008      	b.n	82ee <compile_atom_expr_normal+0x166>
        } else {
            // a super() call
            EMIT_ARG(call_function, 2, 0, 0);
    82dc:	687b      	ldr	r3, [r7, #4]
    82de:	6a98      	ldr	r0, [r3, #40]	; 0x28
    82e0:	2300      	movs	r3, #0
    82e2:	2200      	movs	r2, #0
    82e4:	2102      	movs	r1, #2
    82e6:	f002 fe25 	bl	af34 <mp_emit_bc_call_function>
            i = 1;
    82ea:	2301      	movs	r3, #1
    82ec:	627b      	str	r3, [r7, #36]	; 0x24
        }
    }

    // compile the remaining trailers
    for (; i < num_trail; i++) {
    82ee:	e044      	b.n	837a <compile_atom_expr_normal+0x1f2>
        if (i + 1 < num_trail
    82f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    82f2:	1c5a      	adds	r2, r3, #1
    82f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    82f6:	429a      	cmp	r2, r3
    82f8:	d233      	bcs.n	8362 <compile_atom_expr_normal+0x1da>
            && MP_PARSE_NODE_STRUCT_KIND(pns_trail[i]) == PN_trailer_period
    82fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    82fc:	009b      	lsls	r3, r3, #2
    82fe:	6aba      	ldr	r2, [r7, #40]	; 0x28
    8300:	4413      	add	r3, r2
    8302:	681b      	ldr	r3, [r3, #0]
    8304:	685b      	ldr	r3, [r3, #4]
    8306:	b2db      	uxtb	r3, r3
    8308:	2b2f      	cmp	r3, #47	; 0x2f
    830a:	d12a      	bne.n	8362 <compile_atom_expr_normal+0x1da>
            && MP_PARSE_NODE_STRUCT_KIND(pns_trail[i + 1]) == PN_trailer_paren) {
    830c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    830e:	3301      	adds	r3, #1
    8310:	009b      	lsls	r3, r3, #2
    8312:	6aba      	ldr	r2, [r7, #40]	; 0x28
    8314:	4413      	add	r3, r2
    8316:	681b      	ldr	r3, [r3, #0]
    8318:	685b      	ldr	r3, [r3, #4]
    831a:	b2db      	uxtb	r3, r3
    831c:	2b2d      	cmp	r3, #45	; 0x2d
    831e:	d120      	bne.n	8362 <compile_atom_expr_normal+0x1da>
            // optimisation for method calls a.f(...), following PyPy
            mp_parse_node_struct_t *pns_period = pns_trail[i];
    8320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    8322:	009b      	lsls	r3, r3, #2
    8324:	6aba      	ldr	r2, [r7, #40]	; 0x28
    8326:	4413      	add	r3, r2
    8328:	681b      	ldr	r3, [r3, #0]
    832a:	60fb      	str	r3, [r7, #12]
            mp_parse_node_struct_t *pns_paren = pns_trail[i + 1];
    832c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    832e:	3301      	adds	r3, #1
    8330:	009b      	lsls	r3, r3, #2
    8332:	6aba      	ldr	r2, [r7, #40]	; 0x28
    8334:	4413      	add	r3, r2
    8336:	681b      	ldr	r3, [r3, #0]
    8338:	60bb      	str	r3, [r7, #8]
            EMIT_ARG(load_method, MP_PARSE_NODE_LEAF_ARG(pns_period->nodes[0]), false);
    833a:	687b      	ldr	r3, [r7, #4]
    833c:	6a98      	ldr	r0, [r3, #40]	; 0x28
    833e:	68fb      	ldr	r3, [r7, #12]
    8340:	689b      	ldr	r3, [r3, #8]
    8342:	091b      	lsrs	r3, r3, #4
    8344:	2200      	movs	r2, #0
    8346:	4619      	mov	r1, r3
    8348:	f002 f9f8 	bl	a73c <mp_emit_bc_load_method>
            compile_trailer_paren_helper(comp, pns_paren->nodes[0], true, 0);
    834c:	68bb      	ldr	r3, [r7, #8]
    834e:	6899      	ldr	r1, [r3, #8]
    8350:	2300      	movs	r3, #0
    8352:	2201      	movs	r2, #1
    8354:	6878      	ldr	r0, [r7, #4]
    8356:	f000 f82e 	bl	83b6 <compile_trailer_paren_helper>
            i += 1;
    835a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    835c:	3301      	adds	r3, #1
    835e:	627b      	str	r3, [r7, #36]	; 0x24
            && MP_PARSE_NODE_STRUCT_KIND(pns_trail[i + 1]) == PN_trailer_paren) {
    8360:	e008      	b.n	8374 <compile_atom_expr_normal+0x1ec>
        } else {
            // node is one of: trailer_paren, trailer_bracket, trailer_period
            compile_node(comp, (mp_parse_node_t)pns_trail[i]);
    8362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    8364:	009b      	lsls	r3, r3, #2
    8366:	6aba      	ldr	r2, [r7, #40]	; 0x28
    8368:	4413      	add	r3, r2
    836a:	681b      	ldr	r3, [r3, #0]
    836c:	4619      	mov	r1, r3
    836e:	6878      	ldr	r0, [r7, #4]
    8370:	f000 fc81 	bl	8c76 <compile_node>
    for (; i < num_trail; i++) {
    8374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    8376:	3301      	adds	r3, #1
    8378:	627b      	str	r3, [r7, #36]	; 0x24
    837a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    837c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    837e:	429a      	cmp	r2, r3
    8380:	d3b6      	bcc.n	82f0 <compile_atom_expr_normal+0x168>
    8382:	e000      	b.n	8386 <compile_atom_expr_normal+0x1fe>
        return;
    8384:	bf00      	nop
        }
    }
}
    8386:	3730      	adds	r7, #48	; 0x30
    8388:	46bd      	mov	sp, r7
    838a:	bd80      	pop	{r7, pc}
    838c:	000222fc 	.word	0x000222fc

00008390 <compile_power>:

STATIC void compile_power(compiler_t *comp, mp_parse_node_struct_t *pns) {
    8390:	b580      	push	{r7, lr}
    8392:	b082      	sub	sp, #8
    8394:	af00      	add	r7, sp, #0
    8396:	6078      	str	r0, [r7, #4]
    8398:	6039      	str	r1, [r7, #0]
    compile_generic_all_nodes(comp, pns); // 2 nodes, arguments of power
    839a:	6839      	ldr	r1, [r7, #0]
    839c:	6878      	ldr	r0, [r7, #4]
    839e:	f7fc ff6b 	bl	5278 <compile_generic_all_nodes>
    EMIT_ARG(binary_op, MP_BINARY_OP_POWER);
    83a2:	687b      	ldr	r3, [r7, #4]
    83a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    83a6:	2120      	movs	r1, #32
    83a8:	4618      	mov	r0, r3
    83aa:	f002 fc5c 	bl	ac66 <mp_emit_bc_binary_op>
}
    83ae:	bf00      	nop
    83b0:	3708      	adds	r7, #8
    83b2:	46bd      	mov	sp, r7
    83b4:	bd80      	pop	{r7, pc}

000083b6 <compile_trailer_paren_helper>:

STATIC void compile_trailer_paren_helper(compiler_t *comp, mp_parse_node_t pn_arglist, bool is_method_call, int n_positional_extra) {
    83b6:	b580      	push	{r7, lr}
    83b8:	b08e      	sub	sp, #56	; 0x38
    83ba:	af00      	add	r7, sp, #0
    83bc:	60f8      	str	r0, [r7, #12]
    83be:	60b9      	str	r1, [r7, #8]
    83c0:	603b      	str	r3, [r7, #0]
    83c2:	4613      	mov	r3, r2
    83c4:	71fb      	strb	r3, [r7, #7]
    // function to call is on top of stack

    // get the list of arguments
    mp_parse_node_t *args;
    int n_args = mp_parse_node_extract_list(&pn_arglist, PN_arglist, &args);
    83c6:	f107 0214 	add.w	r2, r7, #20
    83ca:	f107 0308 	add.w	r3, r7, #8
    83ce:	2197      	movs	r1, #151	; 0x97
    83d0:	4618      	mov	r0, r3
    83d2:	f7fb fcaf 	bl	3d34 <mp_parse_node_extract_list>
    83d6:	61f8      	str	r0, [r7, #28]

    // compile the arguments
    // Rather than calling compile_node on the list, we go through the list of args
    // explicitly here so that we can count the number of arguments and give sensible
    // error messages.
    int n_positional = n_positional_extra;
    83d8:	683b      	ldr	r3, [r7, #0]
    83da:	637b      	str	r3, [r7, #52]	; 0x34
    uint n_keyword = 0;
    83dc:	2300      	movs	r3, #0
    83de:	633b      	str	r3, [r7, #48]	; 0x30
    uint star_flags = 0;
    83e0:	2300      	movs	r3, #0
    83e2:	62fb      	str	r3, [r7, #44]	; 0x2c
    mp_parse_node_struct_t *star_args_node = NULL, *dblstar_args_node = NULL;
    83e4:	2300      	movs	r3, #0
    83e6:	62bb      	str	r3, [r7, #40]	; 0x28
    83e8:	2300      	movs	r3, #0
    83ea:	627b      	str	r3, [r7, #36]	; 0x24
    for (int i = 0; i < n_args; i++) {
    83ec:	2300      	movs	r3, #0
    83ee:	623b      	str	r3, [r7, #32]
    83f0:	e0af      	b.n	8552 <compile_trailer_paren_helper+0x19c>
        if (MP_PARSE_NODE_IS_STRUCT(args[i])) {
    83f2:	697a      	ldr	r2, [r7, #20]
    83f4:	6a3b      	ldr	r3, [r7, #32]
    83f6:	009b      	lsls	r3, r3, #2
    83f8:	4413      	add	r3, r2
    83fa:	681b      	ldr	r3, [r3, #0]
    83fc:	2b00      	cmp	r3, #0
    83fe:	d07d      	beq.n	84fc <compile_trailer_paren_helper+0x146>
    8400:	697a      	ldr	r2, [r7, #20]
    8402:	6a3b      	ldr	r3, [r7, #32]
    8404:	009b      	lsls	r3, r3, #2
    8406:	4413      	add	r3, r2
    8408:	681b      	ldr	r3, [r3, #0]
    840a:	f003 0303 	and.w	r3, r3, #3
    840e:	2b00      	cmp	r3, #0
    8410:	d174      	bne.n	84fc <compile_trailer_paren_helper+0x146>
            mp_parse_node_struct_t *pns_arg = (mp_parse_node_struct_t*)args[i];
    8412:	697a      	ldr	r2, [r7, #20]
    8414:	6a3b      	ldr	r3, [r7, #32]
    8416:	009b      	lsls	r3, r3, #2
    8418:	4413      	add	r3, r2
    841a:	681b      	ldr	r3, [r3, #0]
    841c:	61bb      	str	r3, [r7, #24]
            if (MP_PARSE_NODE_STRUCT_KIND(pns_arg) == PN_arglist_star) {
    841e:	69bb      	ldr	r3, [r7, #24]
    8420:	685b      	ldr	r3, [r3, #4]
    8422:	b2db      	uxtb	r3, r3
    8424:	2b99      	cmp	r3, #153	; 0x99
    8426:	d112      	bne.n	844e <compile_trailer_paren_helper+0x98>
                if (star_flags & MP_EMIT_STAR_FLAG_SINGLE) {
    8428:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    842a:	f003 0301 	and.w	r3, r3, #1
    842e:	2b00      	cmp	r3, #0
    8430:	d006      	beq.n	8440 <compile_trailer_paren_helper+0x8a>
                    compile_syntax_error(comp, (mp_parse_node_t)pns_arg, "can't have multiple *x");
    8432:	69bb      	ldr	r3, [r7, #24]
    8434:	4a64      	ldr	r2, [pc, #400]	; (85c8 <compile_trailer_paren_helper+0x212>)
    8436:	4619      	mov	r1, r3
    8438:	68f8      	ldr	r0, [r7, #12]
    843a:	f7fc fe40 	bl	50be <compile_syntax_error>
                    return;
    843e:	e0c0      	b.n	85c2 <compile_trailer_paren_helper+0x20c>
                }
                star_flags |= MP_EMIT_STAR_FLAG_SINGLE;
    8440:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    8442:	f043 0301 	orr.w	r3, r3, #1
    8446:	62fb      	str	r3, [r7, #44]	; 0x2c
                star_args_node = pns_arg;
    8448:	69bb      	ldr	r3, [r7, #24]
    844a:	62bb      	str	r3, [r7, #40]	; 0x28
        if (MP_PARSE_NODE_IS_STRUCT(args[i])) {
    844c:	e07e      	b.n	854c <compile_trailer_paren_helper+0x196>
            } else if (MP_PARSE_NODE_STRUCT_KIND(pns_arg) == PN_arglist_dbl_star) {
    844e:	69bb      	ldr	r3, [r7, #24]
    8450:	685b      	ldr	r3, [r3, #4]
    8452:	b2db      	uxtb	r3, r3
    8454:	2b9a      	cmp	r3, #154	; 0x9a
    8456:	d112      	bne.n	847e <compile_trailer_paren_helper+0xc8>
                if (star_flags & MP_EMIT_STAR_FLAG_DOUBLE) {
    8458:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    845a:	f003 0302 	and.w	r3, r3, #2
    845e:	2b00      	cmp	r3, #0
    8460:	d006      	beq.n	8470 <compile_trailer_paren_helper+0xba>
                    compile_syntax_error(comp, (mp_parse_node_t)pns_arg, "can't have multiple **x");
    8462:	69bb      	ldr	r3, [r7, #24]
    8464:	4a59      	ldr	r2, [pc, #356]	; (85cc <compile_trailer_paren_helper+0x216>)
    8466:	4619      	mov	r1, r3
    8468:	68f8      	ldr	r0, [r7, #12]
    846a:	f7fc fe28 	bl	50be <compile_syntax_error>
                    return;
    846e:	e0a8      	b.n	85c2 <compile_trailer_paren_helper+0x20c>
                }
                star_flags |= MP_EMIT_STAR_FLAG_DOUBLE;
    8470:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    8472:	f043 0302 	orr.w	r3, r3, #2
    8476:	62fb      	str	r3, [r7, #44]	; 0x2c
                dblstar_args_node = pns_arg;
    8478:	69bb      	ldr	r3, [r7, #24]
    847a:	627b      	str	r3, [r7, #36]	; 0x24
        if (MP_PARSE_NODE_IS_STRUCT(args[i])) {
    847c:	e066      	b.n	854c <compile_trailer_paren_helper+0x196>
            } else if (MP_PARSE_NODE_STRUCT_KIND(pns_arg) == PN_argument) {
    847e:	69bb      	ldr	r3, [r7, #24]
    8480:	685b      	ldr	r3, [r3, #4]
    8482:	b2db      	uxtb	r3, r3
    8484:	2b9b      	cmp	r3, #155	; 0x9b
    8486:	d138      	bne.n	84fa <compile_trailer_paren_helper+0x144>
                if (!MP_PARSE_NODE_IS_STRUCT_KIND(pns_arg->nodes[1], PN_comp_for)) {
    8488:	69bb      	ldr	r3, [r7, #24]
    848a:	68db      	ldr	r3, [r3, #12]
    848c:	2b00      	cmp	r3, #0
    848e:	d00b      	beq.n	84a8 <compile_trailer_paren_helper+0xf2>
    8490:	69bb      	ldr	r3, [r7, #24]
    8492:	68db      	ldr	r3, [r3, #12]
    8494:	f003 0303 	and.w	r3, r3, #3
    8498:	2b00      	cmp	r3, #0
    849a:	d105      	bne.n	84a8 <compile_trailer_paren_helper+0xf2>
    849c:	69bb      	ldr	r3, [r7, #24]
    849e:	68db      	ldr	r3, [r3, #12]
    84a0:	685b      	ldr	r3, [r3, #4]
    84a2:	b2db      	uxtb	r3, r3
    84a4:	2b9f      	cmp	r3, #159	; 0x9f
    84a6:	d01f      	beq.n	84e8 <compile_trailer_paren_helper+0x132>
                    if (!MP_PARSE_NODE_IS_ID(pns_arg->nodes[0])) {
    84a8:	69bb      	ldr	r3, [r7, #24]
    84aa:	689b      	ldr	r3, [r3, #8]
    84ac:	f003 030f 	and.w	r3, r3, #15
    84b0:	2b02      	cmp	r3, #2
    84b2:	d006      	beq.n	84c2 <compile_trailer_paren_helper+0x10c>
                        compile_syntax_error(comp, (mp_parse_node_t)pns_arg, "LHS of keyword arg must be an id");
    84b4:	69bb      	ldr	r3, [r7, #24]
    84b6:	4a46      	ldr	r2, [pc, #280]	; (85d0 <compile_trailer_paren_helper+0x21a>)
    84b8:	4619      	mov	r1, r3
    84ba:	68f8      	ldr	r0, [r7, #12]
    84bc:	f7fc fdff 	bl	50be <compile_syntax_error>
                        return;
    84c0:	e07f      	b.n	85c2 <compile_trailer_paren_helper+0x20c>
                    }
                    EMIT_ARG(load_const_str, MP_PARSE_NODE_LEAF_ARG(pns_arg->nodes[0]));
    84c2:	68fb      	ldr	r3, [r7, #12]
    84c4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    84c6:	69bb      	ldr	r3, [r7, #24]
    84c8:	689b      	ldr	r3, [r3, #8]
    84ca:	091b      	lsrs	r3, r3, #4
    84cc:	4619      	mov	r1, r3
    84ce:	4610      	mov	r0, r2
    84d0:	f002 f8c2 	bl	a658 <mp_emit_bc_load_const_str>
                    compile_node(comp, pns_arg->nodes[1]);
    84d4:	69bb      	ldr	r3, [r7, #24]
    84d6:	68db      	ldr	r3, [r3, #12]
    84d8:	4619      	mov	r1, r3
    84da:	68f8      	ldr	r0, [r7, #12]
    84dc:	f000 fbcb 	bl	8c76 <compile_node>
                    n_keyword += 1;
    84e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    84e2:	3301      	adds	r3, #1
    84e4:	633b      	str	r3, [r7, #48]	; 0x30
        if (MP_PARSE_NODE_IS_STRUCT(args[i])) {
    84e6:	e031      	b.n	854c <compile_trailer_paren_helper+0x196>
                } else {
                    compile_comprehension(comp, pns_arg, SCOPE_GEN_EXPR);
    84e8:	2206      	movs	r2, #6
    84ea:	69b9      	ldr	r1, [r7, #24]
    84ec:	68f8      	ldr	r0, [r7, #12]
    84ee:	f000 f875 	bl	85dc <compile_comprehension>
                    n_positional++;
    84f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    84f4:	3301      	adds	r3, #1
    84f6:	637b      	str	r3, [r7, #52]	; 0x34
        if (MP_PARSE_NODE_IS_STRUCT(args[i])) {
    84f8:	e028      	b.n	854c <compile_trailer_paren_helper+0x196>
                }
            } else {
                goto normal_argument;
    84fa:	bf00      	nop
            }
        } else {
            normal_argument:
            if (star_flags) {
    84fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    84fe:	2b00      	cmp	r3, #0
    8500:	d00a      	beq.n	8518 <compile_trailer_paren_helper+0x162>
                compile_syntax_error(comp, args[i], "non-keyword arg after */**");
    8502:	697a      	ldr	r2, [r7, #20]
    8504:	6a3b      	ldr	r3, [r7, #32]
    8506:	009b      	lsls	r3, r3, #2
    8508:	4413      	add	r3, r2
    850a:	681b      	ldr	r3, [r3, #0]
    850c:	4a31      	ldr	r2, [pc, #196]	; (85d4 <compile_trailer_paren_helper+0x21e>)
    850e:	4619      	mov	r1, r3
    8510:	68f8      	ldr	r0, [r7, #12]
    8512:	f7fc fdd4 	bl	50be <compile_syntax_error>
                return;
    8516:	e054      	b.n	85c2 <compile_trailer_paren_helper+0x20c>
            }
            if (n_keyword > 0) {
    8518:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    851a:	2b00      	cmp	r3, #0
    851c:	d00a      	beq.n	8534 <compile_trailer_paren_helper+0x17e>
                compile_syntax_error(comp, args[i], "non-keyword arg after keyword arg");
    851e:	697a      	ldr	r2, [r7, #20]
    8520:	6a3b      	ldr	r3, [r7, #32]
    8522:	009b      	lsls	r3, r3, #2
    8524:	4413      	add	r3, r2
    8526:	681b      	ldr	r3, [r3, #0]
    8528:	4a2b      	ldr	r2, [pc, #172]	; (85d8 <compile_trailer_paren_helper+0x222>)
    852a:	4619      	mov	r1, r3
    852c:	68f8      	ldr	r0, [r7, #12]
    852e:	f7fc fdc6 	bl	50be <compile_syntax_error>
                return;
    8532:	e046      	b.n	85c2 <compile_trailer_paren_helper+0x20c>
            }
            compile_node(comp, args[i]);
    8534:	697a      	ldr	r2, [r7, #20]
    8536:	6a3b      	ldr	r3, [r7, #32]
    8538:	009b      	lsls	r3, r3, #2
    853a:	4413      	add	r3, r2
    853c:	681b      	ldr	r3, [r3, #0]
    853e:	4619      	mov	r1, r3
    8540:	68f8      	ldr	r0, [r7, #12]
    8542:	f000 fb98 	bl	8c76 <compile_node>
            n_positional++;
    8546:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    8548:	3301      	adds	r3, #1
    854a:	637b      	str	r3, [r7, #52]	; 0x34
    for (int i = 0; i < n_args; i++) {
    854c:	6a3b      	ldr	r3, [r7, #32]
    854e:	3301      	adds	r3, #1
    8550:	623b      	str	r3, [r7, #32]
    8552:	6a3a      	ldr	r2, [r7, #32]
    8554:	69fb      	ldr	r3, [r7, #28]
    8556:	429a      	cmp	r2, r3
    8558:	f6ff af4b 	blt.w	83f2 <compile_trailer_paren_helper+0x3c>
        }
    }

    // compile the star/double-star arguments if we had them
    // if we had one but not the other then we load "null" as a place holder
    if (star_flags != 0) {
    855c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    855e:	2b00      	cmp	r3, #0
    8560:	d01d      	beq.n	859e <compile_trailer_paren_helper+0x1e8>
        if (star_args_node == NULL) {
    8562:	6abb      	ldr	r3, [r7, #40]	; 0x28
    8564:	2b00      	cmp	r3, #0
    8566:	d105      	bne.n	8574 <compile_trailer_paren_helper+0x1be>
            EMIT(load_null);
    8568:	68fb      	ldr	r3, [r7, #12]
    856a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    856c:	4618      	mov	r0, r3
    856e:	f002 f897 	bl	a6a0 <mp_emit_bc_load_null>
    8572:	e005      	b.n	8580 <compile_trailer_paren_helper+0x1ca>
        } else {
            compile_node(comp, star_args_node->nodes[0]);
    8574:	6abb      	ldr	r3, [r7, #40]	; 0x28
    8576:	689b      	ldr	r3, [r3, #8]
    8578:	4619      	mov	r1, r3
    857a:	68f8      	ldr	r0, [r7, #12]
    857c:	f000 fb7b 	bl	8c76 <compile_node>
        }
        if (dblstar_args_node == NULL) {
    8580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    8582:	2b00      	cmp	r3, #0
    8584:	d105      	bne.n	8592 <compile_trailer_paren_helper+0x1dc>
            EMIT(load_null);
    8586:	68fb      	ldr	r3, [r7, #12]
    8588:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    858a:	4618      	mov	r0, r3
    858c:	f002 f888 	bl	a6a0 <mp_emit_bc_load_null>
    8590:	e005      	b.n	859e <compile_trailer_paren_helper+0x1e8>
        } else {
            compile_node(comp, dblstar_args_node->nodes[0]);
    8592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    8594:	689b      	ldr	r3, [r3, #8]
    8596:	4619      	mov	r1, r3
    8598:	68f8      	ldr	r0, [r7, #12]
    859a:	f000 fb6c 	bl	8c76 <compile_node>
        }
    }

    // emit the function/method call
    if (is_method_call) {
    859e:	79fb      	ldrb	r3, [r7, #7]
    85a0:	2b00      	cmp	r3, #0
    85a2:	d007      	beq.n	85b4 <compile_trailer_paren_helper+0x1fe>
        EMIT_ARG(call_method, n_positional, n_keyword, star_flags);
    85a4:	68fb      	ldr	r3, [r7, #12]
    85a6:	6a98      	ldr	r0, [r3, #40]	; 0x28
    85a8:	6b79      	ldr	r1, [r7, #52]	; 0x34
    85aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    85ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    85ae:	f002 fcd6 	bl	af5e <mp_emit_bc_call_method>
    85b2:	e006      	b.n	85c2 <compile_trailer_paren_helper+0x20c>
    } else {
        EMIT_ARG(call_function, n_positional, n_keyword, star_flags);
    85b4:	68fb      	ldr	r3, [r7, #12]
    85b6:	6a98      	ldr	r0, [r3, #40]	; 0x28
    85b8:	6b79      	ldr	r1, [r7, #52]	; 0x34
    85ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    85bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    85be:	f002 fcb9 	bl	af34 <mp_emit_bc_call_function>
    }
}
    85c2:	3738      	adds	r7, #56	; 0x38
    85c4:	46bd      	mov	sp, r7
    85c6:	bd80      	pop	{r7, pc}
    85c8:	00022314 	.word	0x00022314
    85cc:	0002232c 	.word	0x0002232c
    85d0:	00022344 	.word	0x00022344
    85d4:	00022368 	.word	0x00022368
    85d8:	00022384 	.word	0x00022384

000085dc <compile_comprehension>:

// pns needs to have 2 nodes, first is lhs of comprehension, second is PN_comp_for node
STATIC void compile_comprehension(compiler_t *comp, mp_parse_node_struct_t *pns, scope_kind_t kind) {
    85dc:	b580      	push	{r7, lr}
    85de:	b088      	sub	sp, #32
    85e0:	af00      	add	r7, sp, #0
    85e2:	60f8      	str	r0, [r7, #12]
    85e4:	60b9      	str	r1, [r7, #8]
    85e6:	607a      	str	r2, [r7, #4]
    assert(MP_PARSE_NODE_STRUCT_NUM_NODES(pns) == 2);
    85e8:	68bb      	ldr	r3, [r7, #8]
    85ea:	685b      	ldr	r3, [r3, #4]
    85ec:	0a1b      	lsrs	r3, r3, #8
    85ee:	2b02      	cmp	r3, #2
    85f0:	d006      	beq.n	8600 <compile_comprehension+0x24>
    85f2:	4b2a      	ldr	r3, [pc, #168]	; (869c <compile_comprehension+0xc0>)
    85f4:	4a2a      	ldr	r2, [pc, #168]	; (86a0 <compile_comprehension+0xc4>)
    85f6:	f640 1134 	movw	r1, #2356	; 0x934
    85fa:	482a      	ldr	r0, [pc, #168]	; (86a4 <compile_comprehension+0xc8>)
    85fc:	f014 fc70 	bl	1cee0 <__assert_func>
    assert(MP_PARSE_NODE_IS_STRUCT_KIND(pns->nodes[1], PN_comp_for));
    8600:	68bb      	ldr	r3, [r7, #8]
    8602:	68db      	ldr	r3, [r3, #12]
    8604:	2b00      	cmp	r3, #0
    8606:	d00b      	beq.n	8620 <compile_comprehension+0x44>
    8608:	68bb      	ldr	r3, [r7, #8]
    860a:	68db      	ldr	r3, [r3, #12]
    860c:	f003 0303 	and.w	r3, r3, #3
    8610:	2b00      	cmp	r3, #0
    8612:	d105      	bne.n	8620 <compile_comprehension+0x44>
    8614:	68bb      	ldr	r3, [r7, #8]
    8616:	68db      	ldr	r3, [r3, #12]
    8618:	685b      	ldr	r3, [r3, #4]
    861a:	b2db      	uxtb	r3, r3
    861c:	2b9f      	cmp	r3, #159	; 0x9f
    861e:	d006      	beq.n	862e <compile_comprehension+0x52>
    8620:	4b21      	ldr	r3, [pc, #132]	; (86a8 <compile_comprehension+0xcc>)
    8622:	4a1f      	ldr	r2, [pc, #124]	; (86a0 <compile_comprehension+0xc4>)
    8624:	f640 1135 	movw	r1, #2357	; 0x935
    8628:	481e      	ldr	r0, [pc, #120]	; (86a4 <compile_comprehension+0xc8>)
    862a:	f014 fc59 	bl	1cee0 <__assert_func>
    mp_parse_node_struct_t *pns_comp_for = (mp_parse_node_struct_t*)pns->nodes[1];
    862e:	68bb      	ldr	r3, [r7, #8]
    8630:	68db      	ldr	r3, [r3, #12]
    8632:	61fb      	str	r3, [r7, #28]

    if (comp->pass == MP_PASS_SCOPE) {
    8634:	68fb      	ldr	r3, [r7, #12]
    8636:	795b      	ldrb	r3, [r3, #5]
    8638:	2b01      	cmp	r3, #1
    863a:	d10b      	bne.n	8654 <compile_comprehension+0x78>
        // create a new scope for this comprehension
        scope_t *s = scope_new_and_link(comp, kind, (mp_parse_node_t)pns, comp->scope_cur->emit_options);
    863c:	68ba      	ldr	r2, [r7, #8]
    863e:	68fb      	ldr	r3, [r7, #12]
    8640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    8642:	8b5b      	ldrh	r3, [r3, #26]
    8644:	6879      	ldr	r1, [r7, #4]
    8646:	68f8      	ldr	r0, [r7, #12]
    8648:	f7fc fdaa 	bl	51a0 <scope_new_and_link>
    864c:	61b8      	str	r0, [r7, #24]
        // store the comprehension scope so the compiling function (this one) can use it at each pass
        pns_comp_for->nodes[3] = (mp_parse_node_t)s;
    864e:	69ba      	ldr	r2, [r7, #24]
    8650:	69fb      	ldr	r3, [r7, #28]
    8652:	615a      	str	r2, [r3, #20]
    }

    // get the scope for this comprehension
    scope_t *this_scope = (scope_t*)pns_comp_for->nodes[3];
    8654:	69fb      	ldr	r3, [r7, #28]
    8656:	695b      	ldr	r3, [r3, #20]
    8658:	617b      	str	r3, [r7, #20]

    // compile the comprehension
    close_over_variables_etc(comp, this_scope, 0, 0);
    865a:	2300      	movs	r3, #0
    865c:	2200      	movs	r2, #0
    865e:	6979      	ldr	r1, [r7, #20]
    8660:	68f8      	ldr	r0, [r7, #12]
    8662:	f7fd fa83 	bl	5b6c <close_over_variables_etc>

    compile_node(comp, pns_comp_for->nodes[1]); // source of the iterator
    8666:	69fb      	ldr	r3, [r7, #28]
    8668:	68db      	ldr	r3, [r3, #12]
    866a:	4619      	mov	r1, r3
    866c:	68f8      	ldr	r0, [r7, #12]
    866e:	f000 fb02 	bl	8c76 <compile_node>
    if (kind == SCOPE_GEN_EXPR) {
    8672:	687b      	ldr	r3, [r7, #4]
    8674:	2b06      	cmp	r3, #6
    8676:	d105      	bne.n	8684 <compile_comprehension+0xa8>
        EMIT_ARG(get_iter, false);
    8678:	68fb      	ldr	r3, [r7, #12]
    867a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    867c:	2100      	movs	r1, #0
    867e:	4618      	mov	r0, r3
    8680:	f002 fa7f 	bl	ab82 <mp_emit_bc_get_iter>
    }
    EMIT_ARG(call_function, 1, 0, 0);
    8684:	68fb      	ldr	r3, [r7, #12]
    8686:	6a98      	ldr	r0, [r3, #40]	; 0x28
    8688:	2300      	movs	r3, #0
    868a:	2200      	movs	r2, #0
    868c:	2101      	movs	r1, #1
    868e:	f002 fc51 	bl	af34 <mp_emit_bc_call_function>
}
    8692:	bf00      	nop
    8694:	3720      	adds	r7, #32
    8696:	46bd      	mov	sp, r7
    8698:	bd80      	pop	{r7, pc}
    869a:	bf00      	nop
    869c:	000223a8 	.word	0x000223a8
    86a0:	00022998 	.word	0x00022998
    86a4:	00021c60 	.word	0x00021c60
    86a8:	000223d4 	.word	0x000223d4

000086ac <compile_atom_paren>:

STATIC void compile_atom_paren(compiler_t *comp, mp_parse_node_struct_t *pns) {
    86ac:	b580      	push	{r7, lr}
    86ae:	b084      	sub	sp, #16
    86b0:	af00      	add	r7, sp, #0
    86b2:	6078      	str	r0, [r7, #4]
    86b4:	6039      	str	r1, [r7, #0]
    if (MP_PARSE_NODE_IS_NULL(pns->nodes[0])) {
    86b6:	683b      	ldr	r3, [r7, #0]
    86b8:	689b      	ldr	r3, [r3, #8]
    86ba:	2b00      	cmp	r3, #0
    86bc:	d105      	bne.n	86ca <compile_atom_paren+0x1e>
        // an empty tuple
        c_tuple(comp, MP_PARSE_NODE_NULL, NULL);
    86be:	2200      	movs	r2, #0
    86c0:	2100      	movs	r1, #0
    86c2:	6878      	ldr	r0, [r7, #4]
    86c4:	f7fc fe60 	bl	5388 <c_tuple>
            // tuple with 2 items
            tuple_with_2_items:
            c_tuple(comp, MP_PARSE_NODE_NULL, pns);
        }
    }
}
    86c8:	e068      	b.n	879c <compile_atom_paren+0xf0>
        assert(MP_PARSE_NODE_IS_STRUCT_KIND(pns->nodes[0], PN_testlist_comp));
    86ca:	683b      	ldr	r3, [r7, #0]
    86cc:	689b      	ldr	r3, [r3, #8]
    86ce:	2b00      	cmp	r3, #0
    86d0:	d00b      	beq.n	86ea <compile_atom_paren+0x3e>
    86d2:	683b      	ldr	r3, [r7, #0]
    86d4:	689b      	ldr	r3, [r3, #8]
    86d6:	f003 0303 	and.w	r3, r3, #3
    86da:	2b00      	cmp	r3, #0
    86dc:	d105      	bne.n	86ea <compile_atom_paren+0x3e>
    86de:	683b      	ldr	r3, [r7, #0]
    86e0:	689b      	ldr	r3, [r3, #8]
    86e2:	685b      	ldr	r3, [r3, #4]
    86e4:	b2db      	uxtb	r3, r3
    86e6:	2b8a      	cmp	r3, #138	; 0x8a
    86e8:	d006      	beq.n	86f8 <compile_atom_paren+0x4c>
    86ea:	4b2e      	ldr	r3, [pc, #184]	; (87a4 <compile_atom_paren+0xf8>)
    86ec:	4a2e      	ldr	r2, [pc, #184]	; (87a8 <compile_atom_paren+0xfc>)
    86ee:	f640 1151 	movw	r1, #2385	; 0x951
    86f2:	482e      	ldr	r0, [pc, #184]	; (87ac <compile_atom_paren+0x100>)
    86f4:	f014 fbf4 	bl	1cee0 <__assert_func>
        pns = (mp_parse_node_struct_t*)pns->nodes[0];
    86f8:	683b      	ldr	r3, [r7, #0]
    86fa:	689b      	ldr	r3, [r3, #8]
    86fc:	603b      	str	r3, [r7, #0]
        assert(!MP_PARSE_NODE_IS_NULL(pns->nodes[1]));
    86fe:	683b      	ldr	r3, [r7, #0]
    8700:	68db      	ldr	r3, [r3, #12]
    8702:	2b00      	cmp	r3, #0
    8704:	d106      	bne.n	8714 <compile_atom_paren+0x68>
    8706:	4b2a      	ldr	r3, [pc, #168]	; (87b0 <compile_atom_paren+0x104>)
    8708:	4a27      	ldr	r2, [pc, #156]	; (87a8 <compile_atom_paren+0xfc>)
    870a:	f640 1153 	movw	r1, #2387	; 0x953
    870e:	4827      	ldr	r0, [pc, #156]	; (87ac <compile_atom_paren+0x100>)
    8710:	f014 fbe6 	bl	1cee0 <__assert_func>
        if (MP_PARSE_NODE_IS_STRUCT(pns->nodes[1])) {
    8714:	683b      	ldr	r3, [r7, #0]
    8716:	68db      	ldr	r3, [r3, #12]
    8718:	2b00      	cmp	r3, #0
    871a:	d039      	beq.n	8790 <compile_atom_paren+0xe4>
    871c:	683b      	ldr	r3, [r7, #0]
    871e:	68db      	ldr	r3, [r3, #12]
    8720:	f003 0303 	and.w	r3, r3, #3
    8724:	2b00      	cmp	r3, #0
    8726:	d133      	bne.n	8790 <compile_atom_paren+0xe4>
            mp_parse_node_struct_t *pns2 = (mp_parse_node_struct_t*)pns->nodes[1];
    8728:	683b      	ldr	r3, [r7, #0]
    872a:	68db      	ldr	r3, [r3, #12]
    872c:	60fb      	str	r3, [r7, #12]
            if (MP_PARSE_NODE_STRUCT_KIND(pns2) == PN_testlist_comp_3b) {
    872e:	68fb      	ldr	r3, [r7, #12]
    8730:	685b      	ldr	r3, [r3, #4]
    8732:	b2db      	uxtb	r3, r3
    8734:	2b8d      	cmp	r3, #141	; 0x8d
    8736:	d112      	bne.n	875e <compile_atom_paren+0xb2>
                assert(MP_PARSE_NODE_IS_NULL(pns2->nodes[0]));
    8738:	68fb      	ldr	r3, [r7, #12]
    873a:	689b      	ldr	r3, [r3, #8]
    873c:	2b00      	cmp	r3, #0
    873e:	d006      	beq.n	874e <compile_atom_paren+0xa2>
    8740:	4b1c      	ldr	r3, [pc, #112]	; (87b4 <compile_atom_paren+0x108>)
    8742:	4a19      	ldr	r2, [pc, #100]	; (87a8 <compile_atom_paren+0xfc>)
    8744:	f640 1158 	movw	r1, #2392	; 0x958
    8748:	4818      	ldr	r0, [pc, #96]	; (87ac <compile_atom_paren+0x100>)
    874a:	f014 fbc9 	bl	1cee0 <__assert_func>
                c_tuple(comp, pns->nodes[0], NULL);
    874e:	683b      	ldr	r3, [r7, #0]
    8750:	689b      	ldr	r3, [r3, #8]
    8752:	2200      	movs	r2, #0
    8754:	4619      	mov	r1, r3
    8756:	6878      	ldr	r0, [r7, #4]
    8758:	f7fc fe16 	bl	5388 <c_tuple>
        if (MP_PARSE_NODE_IS_STRUCT(pns->nodes[1])) {
    875c:	e01e      	b.n	879c <compile_atom_paren+0xf0>
            } else if (MP_PARSE_NODE_STRUCT_KIND(pns2) == PN_testlist_comp_3c) {
    875e:	68fb      	ldr	r3, [r7, #12]
    8760:	685b      	ldr	r3, [r3, #4]
    8762:	b2db      	uxtb	r3, r3
    8764:	2b8e      	cmp	r3, #142	; 0x8e
    8766:	d107      	bne.n	8778 <compile_atom_paren+0xcc>
                c_tuple(comp, pns->nodes[0], pns2);
    8768:	683b      	ldr	r3, [r7, #0]
    876a:	689b      	ldr	r3, [r3, #8]
    876c:	68fa      	ldr	r2, [r7, #12]
    876e:	4619      	mov	r1, r3
    8770:	6878      	ldr	r0, [r7, #4]
    8772:	f7fc fe09 	bl	5388 <c_tuple>
        if (MP_PARSE_NODE_IS_STRUCT(pns->nodes[1])) {
    8776:	e011      	b.n	879c <compile_atom_paren+0xf0>
            } else if (MP_PARSE_NODE_STRUCT_KIND(pns2) == PN_comp_for) {
    8778:	68fb      	ldr	r3, [r7, #12]
    877a:	685b      	ldr	r3, [r3, #4]
    877c:	b2db      	uxtb	r3, r3
    877e:	2b9f      	cmp	r3, #159	; 0x9f
    8780:	d105      	bne.n	878e <compile_atom_paren+0xe2>
                compile_comprehension(comp, pns, SCOPE_GEN_EXPR);
    8782:	2206      	movs	r2, #6
    8784:	6839      	ldr	r1, [r7, #0]
    8786:	6878      	ldr	r0, [r7, #4]
    8788:	f7ff ff28 	bl	85dc <compile_comprehension>
        if (MP_PARSE_NODE_IS_STRUCT(pns->nodes[1])) {
    878c:	e006      	b.n	879c <compile_atom_paren+0xf0>
                goto tuple_with_2_items;
    878e:	bf00      	nop
            c_tuple(comp, MP_PARSE_NODE_NULL, pns);
    8790:	683a      	ldr	r2, [r7, #0]
    8792:	2100      	movs	r1, #0
    8794:	6878      	ldr	r0, [r7, #4]
    8796:	f7fc fdf7 	bl	5388 <c_tuple>
}
    879a:	e7ff      	b.n	879c <compile_atom_paren+0xf0>
    879c:	bf00      	nop
    879e:	3710      	adds	r7, #16
    87a0:	46bd      	mov	sp, r7
    87a2:	bd80      	pop	{r7, pc}
    87a4:	00021c74 	.word	0x00021c74
    87a8:	000229b0 	.word	0x000229b0
    87ac:	00021c60 	.word	0x00021c60
    87b0:	00022410 	.word	0x00022410
    87b4:	00021d58 	.word	0x00021d58

000087b8 <compile_atom_bracket>:

STATIC void compile_atom_bracket(compiler_t *comp, mp_parse_node_struct_t *pns) {
    87b8:	b580      	push	{r7, lr}
    87ba:	b084      	sub	sp, #16
    87bc:	af00      	add	r7, sp, #0
    87be:	6078      	str	r0, [r7, #4]
    87c0:	6039      	str	r1, [r7, #0]
    if (MP_PARSE_NODE_IS_NULL(pns->nodes[0])) {
    87c2:	683b      	ldr	r3, [r7, #0]
    87c4:	689b      	ldr	r3, [r3, #8]
    87c6:	2b00      	cmp	r3, #0
    87c8:	d107      	bne.n	87da <compile_atom_bracket+0x22>
        // empty list
        EMIT_ARG(build, 0, MP_EMIT_BUILD_LIST);
    87ca:	687b      	ldr	r3, [r7, #4]
    87cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    87ce:	2201      	movs	r2, #1
    87d0:	2100      	movs	r1, #0
    87d2:	4618      	mov	r0, r3
    87d4:	f002 fa79 	bl	acca <mp_emit_bc_build>
    } else {
        // list with 1 item
        compile_node(comp, pns->nodes[0]);
        EMIT_ARG(build, 1, MP_EMIT_BUILD_LIST);
    }
}
    87d8:	e086      	b.n	88e8 <compile_atom_bracket+0x130>
    } else if (MP_PARSE_NODE_IS_STRUCT_KIND(pns->nodes[0], PN_testlist_comp)) {
    87da:	683b      	ldr	r3, [r7, #0]
    87dc:	689b      	ldr	r3, [r3, #8]
    87de:	2b00      	cmp	r3, #0
    87e0:	d074      	beq.n	88cc <compile_atom_bracket+0x114>
    87e2:	683b      	ldr	r3, [r7, #0]
    87e4:	689b      	ldr	r3, [r3, #8]
    87e6:	f003 0303 	and.w	r3, r3, #3
    87ea:	2b00      	cmp	r3, #0
    87ec:	d16e      	bne.n	88cc <compile_atom_bracket+0x114>
    87ee:	683b      	ldr	r3, [r7, #0]
    87f0:	689b      	ldr	r3, [r3, #8]
    87f2:	685b      	ldr	r3, [r3, #4]
    87f4:	b2db      	uxtb	r3, r3
    87f6:	2b8a      	cmp	r3, #138	; 0x8a
    87f8:	d168      	bne.n	88cc <compile_atom_bracket+0x114>
        mp_parse_node_struct_t *pns2 = (mp_parse_node_struct_t*)pns->nodes[0];
    87fa:	683b      	ldr	r3, [r7, #0]
    87fc:	689b      	ldr	r3, [r3, #8]
    87fe:	60fb      	str	r3, [r7, #12]
        if (MP_PARSE_NODE_IS_STRUCT(pns2->nodes[1])) {
    8800:	68fb      	ldr	r3, [r7, #12]
    8802:	68db      	ldr	r3, [r3, #12]
    8804:	2b00      	cmp	r3, #0
    8806:	d04c      	beq.n	88a2 <compile_atom_bracket+0xea>
    8808:	68fb      	ldr	r3, [r7, #12]
    880a:	68db      	ldr	r3, [r3, #12]
    880c:	f003 0303 	and.w	r3, r3, #3
    8810:	2b00      	cmp	r3, #0
    8812:	d146      	bne.n	88a2 <compile_atom_bracket+0xea>
            mp_parse_node_struct_t *pns3 = (mp_parse_node_struct_t*)pns2->nodes[1];
    8814:	68fb      	ldr	r3, [r7, #12]
    8816:	68db      	ldr	r3, [r3, #12]
    8818:	60bb      	str	r3, [r7, #8]
            if (MP_PARSE_NODE_STRUCT_KIND(pns3) == PN_testlist_comp_3b) {
    881a:	68bb      	ldr	r3, [r7, #8]
    881c:	685b      	ldr	r3, [r3, #4]
    881e:	b2db      	uxtb	r3, r3
    8820:	2b8d      	cmp	r3, #141	; 0x8d
    8822:	d118      	bne.n	8856 <compile_atom_bracket+0x9e>
                assert(MP_PARSE_NODE_IS_NULL(pns3->nodes[0]));
    8824:	68bb      	ldr	r3, [r7, #8]
    8826:	689b      	ldr	r3, [r3, #8]
    8828:	2b00      	cmp	r3, #0
    882a:	d006      	beq.n	883a <compile_atom_bracket+0x82>
    882c:	4b30      	ldr	r3, [pc, #192]	; (88f0 <compile_atom_bracket+0x138>)
    882e:	4a31      	ldr	r2, [pc, #196]	; (88f4 <compile_atom_bracket+0x13c>)
    8830:	f640 1176 	movw	r1, #2422	; 0x976
    8834:	4830      	ldr	r0, [pc, #192]	; (88f8 <compile_atom_bracket+0x140>)
    8836:	f014 fb53 	bl	1cee0 <__assert_func>
                compile_node(comp, pns2->nodes[0]);
    883a:	68fb      	ldr	r3, [r7, #12]
    883c:	689b      	ldr	r3, [r3, #8]
    883e:	4619      	mov	r1, r3
    8840:	6878      	ldr	r0, [r7, #4]
    8842:	f000 fa18 	bl	8c76 <compile_node>
                EMIT_ARG(build, 1, MP_EMIT_BUILD_LIST);
    8846:	687b      	ldr	r3, [r7, #4]
    8848:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    884a:	2201      	movs	r2, #1
    884c:	2101      	movs	r1, #1
    884e:	4618      	mov	r0, r3
    8850:	f002 fa3b 	bl	acca <mp_emit_bc_build>
        if (MP_PARSE_NODE_IS_STRUCT(pns2->nodes[1])) {
    8854:	e039      	b.n	88ca <compile_atom_bracket+0x112>
            } else if (MP_PARSE_NODE_STRUCT_KIND(pns3) == PN_testlist_comp_3c) {
    8856:	68bb      	ldr	r3, [r7, #8]
    8858:	685b      	ldr	r3, [r3, #4]
    885a:	b2db      	uxtb	r3, r3
    885c:	2b8e      	cmp	r3, #142	; 0x8e
    885e:	d114      	bne.n	888a <compile_atom_bracket+0xd2>
                compile_node(comp, pns2->nodes[0]);
    8860:	68fb      	ldr	r3, [r7, #12]
    8862:	689b      	ldr	r3, [r3, #8]
    8864:	4619      	mov	r1, r3
    8866:	6878      	ldr	r0, [r7, #4]
    8868:	f000 fa05 	bl	8c76 <compile_node>
                compile_generic_all_nodes(comp, pns3);
    886c:	68b9      	ldr	r1, [r7, #8]
    886e:	6878      	ldr	r0, [r7, #4]
    8870:	f7fc fd02 	bl	5278 <compile_generic_all_nodes>
                EMIT_ARG(build, 1 + MP_PARSE_NODE_STRUCT_NUM_NODES(pns3), MP_EMIT_BUILD_LIST);
    8874:	687b      	ldr	r3, [r7, #4]
    8876:	6a98      	ldr	r0, [r3, #40]	; 0x28
    8878:	68bb      	ldr	r3, [r7, #8]
    887a:	685b      	ldr	r3, [r3, #4]
    887c:	0a1b      	lsrs	r3, r3, #8
    887e:	3301      	adds	r3, #1
    8880:	2201      	movs	r2, #1
    8882:	4619      	mov	r1, r3
    8884:	f002 fa21 	bl	acca <mp_emit_bc_build>
        if (MP_PARSE_NODE_IS_STRUCT(pns2->nodes[1])) {
    8888:	e01f      	b.n	88ca <compile_atom_bracket+0x112>
            } else if (MP_PARSE_NODE_STRUCT_KIND(pns3) == PN_comp_for) {
    888a:	68bb      	ldr	r3, [r7, #8]
    888c:	685b      	ldr	r3, [r3, #4]
    888e:	b2db      	uxtb	r3, r3
    8890:	2b9f      	cmp	r3, #159	; 0x9f
    8892:	d105      	bne.n	88a0 <compile_atom_bracket+0xe8>
                compile_comprehension(comp, pns2, SCOPE_LIST_COMP);
    8894:	2203      	movs	r2, #3
    8896:	68f9      	ldr	r1, [r7, #12]
    8898:	6878      	ldr	r0, [r7, #4]
    889a:	f7ff fe9f 	bl	85dc <compile_comprehension>
        if (MP_PARSE_NODE_IS_STRUCT(pns2->nodes[1])) {
    889e:	e014      	b.n	88ca <compile_atom_bracket+0x112>
                goto list_with_2_items;
    88a0:	bf00      	nop
            compile_node(comp, pns2->nodes[0]);
    88a2:	68fb      	ldr	r3, [r7, #12]
    88a4:	689b      	ldr	r3, [r3, #8]
    88a6:	4619      	mov	r1, r3
    88a8:	6878      	ldr	r0, [r7, #4]
    88aa:	f000 f9e4 	bl	8c76 <compile_node>
            compile_node(comp, pns2->nodes[1]);
    88ae:	68fb      	ldr	r3, [r7, #12]
    88b0:	68db      	ldr	r3, [r3, #12]
    88b2:	4619      	mov	r1, r3
    88b4:	6878      	ldr	r0, [r7, #4]
    88b6:	f000 f9de 	bl	8c76 <compile_node>
            EMIT_ARG(build, 2, MP_EMIT_BUILD_LIST);
    88ba:	687b      	ldr	r3, [r7, #4]
    88bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    88be:	2201      	movs	r2, #1
    88c0:	2102      	movs	r1, #2
    88c2:	4618      	mov	r0, r3
    88c4:	f002 fa01 	bl	acca <mp_emit_bc_build>
    } else if (MP_PARSE_NODE_IS_STRUCT_KIND(pns->nodes[0], PN_testlist_comp)) {
    88c8:	e00e      	b.n	88e8 <compile_atom_bracket+0x130>
    88ca:	e00d      	b.n	88e8 <compile_atom_bracket+0x130>
        compile_node(comp, pns->nodes[0]);
    88cc:	683b      	ldr	r3, [r7, #0]
    88ce:	689b      	ldr	r3, [r3, #8]
    88d0:	4619      	mov	r1, r3
    88d2:	6878      	ldr	r0, [r7, #4]
    88d4:	f000 f9cf 	bl	8c76 <compile_node>
        EMIT_ARG(build, 1, MP_EMIT_BUILD_LIST);
    88d8:	687b      	ldr	r3, [r7, #4]
    88da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    88dc:	2201      	movs	r2, #1
    88de:	2101      	movs	r1, #1
    88e0:	4618      	mov	r0, r3
    88e2:	f002 f9f2 	bl	acca <mp_emit_bc_build>
}
    88e6:	e7ff      	b.n	88e8 <compile_atom_bracket+0x130>
    88e8:	bf00      	nop
    88ea:	3710      	adds	r7, #16
    88ec:	46bd      	mov	sp, r7
    88ee:	bd80      	pop	{r7, pc}
    88f0:	00022438 	.word	0x00022438
    88f4:	000229c4 	.word	0x000229c4
    88f8:	00021c60 	.word	0x00021c60

000088fc <compile_atom_brace>:

STATIC void compile_atom_brace(compiler_t *comp, mp_parse_node_struct_t *pns) {
    88fc:	b580      	push	{r7, lr}
    88fe:	b08a      	sub	sp, #40	; 0x28
    8900:	af00      	add	r7, sp, #0
    8902:	6078      	str	r0, [r7, #4]
    8904:	6039      	str	r1, [r7, #0]
    mp_parse_node_t pn = pns->nodes[0];
    8906:	683b      	ldr	r3, [r7, #0]
    8908:	689b      	ldr	r3, [r3, #8]
    890a:	623b      	str	r3, [r7, #32]
    if (MP_PARSE_NODE_IS_NULL(pn)) {
    890c:	6a3b      	ldr	r3, [r7, #32]
    890e:	2b00      	cmp	r3, #0
    8910:	d107      	bne.n	8922 <compile_atom_brace+0x26>
        // empty dict
        EMIT_ARG(build, 0, MP_EMIT_BUILD_MAP);
    8912:	687b      	ldr	r3, [r7, #4]
    8914:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    8916:	2203      	movs	r2, #3
    8918:	2100      	movs	r1, #0
    891a:	4618      	mov	r0, r3
    891c:	f002 f9d5 	bl	acca <mp_emit_bc_build>
    8920:	e0c3      	b.n	8aaa <compile_atom_brace+0x1ae>
    } else if (MP_PARSE_NODE_IS_STRUCT(pn)) {
    8922:	6a3b      	ldr	r3, [r7, #32]
    8924:	2b00      	cmp	r3, #0
    8926:	f000 80b9 	beq.w	8a9c <compile_atom_brace+0x1a0>
    892a:	6a3b      	ldr	r3, [r7, #32]
    892c:	f003 0303 	and.w	r3, r3, #3
    8930:	2b00      	cmp	r3, #0
    8932:	f040 80b3 	bne.w	8a9c <compile_atom_brace+0x1a0>
        pns = (mp_parse_node_struct_t*)pn;
    8936:	6a3b      	ldr	r3, [r7, #32]
    8938:	603b      	str	r3, [r7, #0]
        if (MP_PARSE_NODE_STRUCT_KIND(pns) == PN_dictorsetmaker_item) {
    893a:	683b      	ldr	r3, [r7, #0]
    893c:	685b      	ldr	r3, [r3, #4]
    893e:	b2db      	uxtb	r3, r3
    8940:	2b32      	cmp	r3, #50	; 0x32
    8942:	d110      	bne.n	8966 <compile_atom_brace+0x6a>
            // dict with one element
            EMIT_ARG(build, 1, MP_EMIT_BUILD_MAP);
    8944:	687b      	ldr	r3, [r7, #4]
    8946:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    8948:	2203      	movs	r2, #3
    894a:	2101      	movs	r1, #1
    894c:	4618      	mov	r0, r3
    894e:	f002 f9bc 	bl	acca <mp_emit_bc_build>
            compile_node(comp, pn);
    8952:	6a39      	ldr	r1, [r7, #32]
    8954:	6878      	ldr	r0, [r7, #4]
    8956:	f000 f98e 	bl	8c76 <compile_node>
            EMIT(store_map);
    895a:	687b      	ldr	r3, [r7, #4]
    895c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    895e:	4618      	mov	r0, r3
    8960:	f002 f9d5 	bl	ad0e <mp_emit_bc_store_map>
        if (MP_PARSE_NODE_STRUCT_KIND(pns) == PN_dictorsetmaker_item) {
    8964:	e0a1      	b.n	8aaa <compile_atom_brace+0x1ae>
        } else if (MP_PARSE_NODE_STRUCT_KIND(pns) == PN_dictorsetmaker) {
    8966:	683b      	ldr	r3, [r7, #0]
    8968:	685b      	ldr	r3, [r3, #4]
    896a:	b2db      	uxtb	r3, r3
    896c:	2b92      	cmp	r3, #146	; 0x92
    896e:	f040 8094 	bne.w	8a9a <compile_atom_brace+0x19e>
            assert(MP_PARSE_NODE_IS_STRUCT(pns->nodes[1])); // should succeed
    8972:	683b      	ldr	r3, [r7, #0]
    8974:	68db      	ldr	r3, [r3, #12]
    8976:	2b00      	cmp	r3, #0
    8978:	d005      	beq.n	8986 <compile_atom_brace+0x8a>
    897a:	683b      	ldr	r3, [r7, #0]
    897c:	68db      	ldr	r3, [r3, #12]
    897e:	f003 0303 	and.w	r3, r3, #3
    8982:	2b00      	cmp	r3, #0
    8984:	d006      	beq.n	8994 <compile_atom_brace+0x98>
    8986:	4b4a      	ldr	r3, [pc, #296]	; (8ab0 <compile_atom_brace+0x1b4>)
    8988:	4a4a      	ldr	r2, [pc, #296]	; (8ab4 <compile_atom_brace+0x1b8>)
    898a:	f44f 611a 	mov.w	r1, #2464	; 0x9a0
    898e:	484a      	ldr	r0, [pc, #296]	; (8ab8 <compile_atom_brace+0x1bc>)
    8990:	f014 faa6 	bl	1cee0 <__assert_func>
            mp_parse_node_struct_t *pns1 = (mp_parse_node_struct_t*)pns->nodes[1];
    8994:	683b      	ldr	r3, [r7, #0]
    8996:	68db      	ldr	r3, [r3, #12]
    8998:	61fb      	str	r3, [r7, #28]
            if (MP_PARSE_NODE_STRUCT_KIND(pns1) == PN_dictorsetmaker_list) {
    899a:	69fb      	ldr	r3, [r7, #28]
    899c:	685b      	ldr	r3, [r3, #4]
    899e:	b2db      	uxtb	r3, r3
    89a0:	2b94      	cmp	r3, #148	; 0x94
    89a2:	d168      	bne.n	8a76 <compile_atom_brace+0x17a>
                // dict/set with multiple elements

                // get tail elements (2nd, 3rd, ...)
                mp_parse_node_t *nodes;
                int n = mp_parse_node_extract_list(&pns1->nodes[0], PN_dictorsetmaker_list2, &nodes);
    89a4:	69fb      	ldr	r3, [r7, #28]
    89a6:	3308      	adds	r3, #8
    89a8:	f107 0208 	add.w	r2, r7, #8
    89ac:	2195      	movs	r1, #149	; 0x95
    89ae:	4618      	mov	r0, r3
    89b0:	f7fb f9c0 	bl	3d34 <mp_parse_node_extract_list>
    89b4:	61b8      	str	r0, [r7, #24]

                // first element sets whether it's a dict or set
                bool is_dict;
                if (!MICROPY_PY_BUILTINS_SET || MP_PARSE_NODE_IS_STRUCT_KIND(pns->nodes[0], PN_dictorsetmaker_item)) {
                    // a dictionary
                    EMIT_ARG(build, 1 + n, MP_EMIT_BUILD_MAP);
    89b6:	687b      	ldr	r3, [r7, #4]
    89b8:	6a98      	ldr	r0, [r3, #40]	; 0x28
    89ba:	69bb      	ldr	r3, [r7, #24]
    89bc:	3301      	adds	r3, #1
    89be:	2203      	movs	r2, #3
    89c0:	4619      	mov	r1, r3
    89c2:	f002 f982 	bl	acca <mp_emit_bc_build>
                    compile_node(comp, pns->nodes[0]);
    89c6:	683b      	ldr	r3, [r7, #0]
    89c8:	689b      	ldr	r3, [r3, #8]
    89ca:	4619      	mov	r1, r3
    89cc:	6878      	ldr	r0, [r7, #4]
    89ce:	f000 f952 	bl	8c76 <compile_node>
                    EMIT(store_map);
    89d2:	687b      	ldr	r3, [r7, #4]
    89d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    89d6:	4618      	mov	r0, r3
    89d8:	f002 f999 	bl	ad0e <mp_emit_bc_store_map>
                    is_dict = true;
    89dc:	2301      	movs	r3, #1
    89de:	75fb      	strb	r3, [r7, #23]
                    compile_node(comp, pns->nodes[0]); // 1st value of set
                    is_dict = false;
                }

                // process rest of elements
                for (int i = 0; i < n; i++) {
    89e0:	2300      	movs	r3, #0
    89e2:	627b      	str	r3, [r7, #36]	; 0x24
    89e4:	e042      	b.n	8a6c <compile_atom_brace+0x170>
                    mp_parse_node_t pn_i = nodes[i];
    89e6:	68ba      	ldr	r2, [r7, #8]
    89e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    89ea:	009b      	lsls	r3, r3, #2
    89ec:	4413      	add	r3, r2
    89ee:	681b      	ldr	r3, [r3, #0]
    89f0:	613b      	str	r3, [r7, #16]
                    bool is_key_value = MP_PARSE_NODE_IS_STRUCT_KIND(pn_i, PN_dictorsetmaker_item);
    89f2:	693b      	ldr	r3, [r7, #16]
    89f4:	2b00      	cmp	r3, #0
    89f6:	d00b      	beq.n	8a10 <compile_atom_brace+0x114>
    89f8:	693b      	ldr	r3, [r7, #16]
    89fa:	f003 0303 	and.w	r3, r3, #3
    89fe:	2b00      	cmp	r3, #0
    8a00:	d106      	bne.n	8a10 <compile_atom_brace+0x114>
    8a02:	693b      	ldr	r3, [r7, #16]
    8a04:	685b      	ldr	r3, [r3, #4]
    8a06:	b2db      	uxtb	r3, r3
    8a08:	2b32      	cmp	r3, #50	; 0x32
    8a0a:	d101      	bne.n	8a10 <compile_atom_brace+0x114>
    8a0c:	2301      	movs	r3, #1
    8a0e:	e000      	b.n	8a12 <compile_atom_brace+0x116>
    8a10:	2300      	movs	r3, #0
    8a12:	73fb      	strb	r3, [r7, #15]
    8a14:	7bfb      	ldrb	r3, [r7, #15]
    8a16:	f003 0301 	and.w	r3, r3, #1
    8a1a:	73fb      	strb	r3, [r7, #15]
                    compile_node(comp, pn_i);
    8a1c:	6939      	ldr	r1, [r7, #16]
    8a1e:	6878      	ldr	r0, [r7, #4]
    8a20:	f000 f929 	bl	8c76 <compile_node>
                    if (is_dict) {
    8a24:	7dfb      	ldrb	r3, [r7, #23]
    8a26:	2b00      	cmp	r3, #0
    8a28:	d012      	beq.n	8a50 <compile_atom_brace+0x154>
                        if (!is_key_value) {
    8a2a:	7bfb      	ldrb	r3, [r7, #15]
    8a2c:	f083 0301 	eor.w	r3, r3, #1
    8a30:	b2db      	uxtb	r3, r3
    8a32:	2b00      	cmp	r3, #0
    8a34:	d006      	beq.n	8a44 <compile_atom_brace+0x148>
                            if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
                                compile_syntax_error(comp, (mp_parse_node_t)pns, "invalid syntax");
    8a36:	683b      	ldr	r3, [r7, #0]
    8a38:	4a20      	ldr	r2, [pc, #128]	; (8abc <compile_atom_brace+0x1c0>)
    8a3a:	4619      	mov	r1, r3
    8a3c:	6878      	ldr	r0, [r7, #4]
    8a3e:	f7fc fb3e 	bl	50be <compile_syntax_error>
                            } else {
                                compile_syntax_error(comp, (mp_parse_node_t)pns, "expecting key:value for dict");
                            }
                            return;
    8a42:	e032      	b.n	8aaa <compile_atom_brace+0x1ae>
                        }
                        EMIT(store_map);
    8a44:	687b      	ldr	r3, [r7, #4]
    8a46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    8a48:	4618      	mov	r0, r3
    8a4a:	f002 f960 	bl	ad0e <mp_emit_bc_store_map>
    8a4e:	e00a      	b.n	8a66 <compile_atom_brace+0x16a>
                    } else {
                        if (is_key_value) {
    8a50:	7bfb      	ldrb	r3, [r7, #15]
    8a52:	2b00      	cmp	r3, #0
    8a54:	d007      	beq.n	8a66 <compile_atom_brace+0x16a>
                            if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
                                compile_syntax_error(comp, (mp_parse_node_t)pns, "invalid syntax");
    8a56:	683b      	ldr	r3, [r7, #0]
    8a58:	4a18      	ldr	r2, [pc, #96]	; (8abc <compile_atom_brace+0x1c0>)
    8a5a:	4619      	mov	r1, r3
    8a5c:	6878      	ldr	r0, [r7, #4]
    8a5e:	f7fc fb2e 	bl	50be <compile_syntax_error>
                            } else {
                                compile_syntax_error(comp, (mp_parse_node_t)pns, "expecting just a value for set");
                            }
                            return;
    8a62:	bf00      	nop
    8a64:	e021      	b.n	8aaa <compile_atom_brace+0x1ae>
                for (int i = 0; i < n; i++) {
    8a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    8a68:	3301      	adds	r3, #1
    8a6a:	627b      	str	r3, [r7, #36]	; 0x24
    8a6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    8a6e:	69bb      	ldr	r3, [r7, #24]
    8a70:	429a      	cmp	r2, r3
    8a72:	dbb8      	blt.n	89e6 <compile_atom_brace+0xea>
        if (MP_PARSE_NODE_STRUCT_KIND(pns) == PN_dictorsetmaker_item) {
    8a74:	e019      	b.n	8aaa <compile_atom_brace+0x1ae>
                if (!is_dict) {
                    EMIT_ARG(build, 1 + n, MP_EMIT_BUILD_SET);
                }
                #endif
            } else {
                assert(MP_PARSE_NODE_STRUCT_KIND(pns1) == PN_comp_for); // should be
    8a76:	69fb      	ldr	r3, [r7, #28]
    8a78:	685b      	ldr	r3, [r3, #4]
    8a7a:	b2db      	uxtb	r3, r3
    8a7c:	2b9f      	cmp	r3, #159	; 0x9f
    8a7e:	d006      	beq.n	8a8e <compile_atom_brace+0x192>
    8a80:	4b0f      	ldr	r3, [pc, #60]	; (8ac0 <compile_atom_brace+0x1c4>)
    8a82:	4a0c      	ldr	r2, [pc, #48]	; (8ab4 <compile_atom_brace+0x1b8>)
    8a84:	f640 11d9 	movw	r1, #2521	; 0x9d9
    8a88:	480b      	ldr	r0, [pc, #44]	; (8ab8 <compile_atom_brace+0x1bc>)
    8a8a:	f014 fa29 	bl	1cee0 <__assert_func>
                // dict/set comprehension
                if (!MICROPY_PY_BUILTINS_SET || MP_PARSE_NODE_IS_STRUCT_KIND(pns->nodes[0], PN_dictorsetmaker_item)) {
                    // a dictionary comprehension
                    compile_comprehension(comp, pns, SCOPE_DICT_COMP);
    8a8e:	2204      	movs	r2, #4
    8a90:	6839      	ldr	r1, [r7, #0]
    8a92:	6878      	ldr	r0, [r7, #4]
    8a94:	f7ff fda2 	bl	85dc <compile_comprehension>
        if (MP_PARSE_NODE_STRUCT_KIND(pns) == PN_dictorsetmaker_item) {
    8a98:	e007      	b.n	8aaa <compile_atom_brace+0x1ae>
                    compile_comprehension(comp, pns, SCOPE_SET_COMP);
                }
            }
        } else {
            // set with one element
            goto set_with_one_element;
    8a9a:	bf00      	nop
        set_with_one_element:
        #if MICROPY_PY_BUILTINS_SET
        compile_node(comp, pn);
        EMIT_ARG(build, 1, MP_EMIT_BUILD_SET);
        #else
        assert(0);
    8a9c:	4b09      	ldr	r3, [pc, #36]	; (8ac4 <compile_atom_brace+0x1c8>)
    8a9e:	4a05      	ldr	r2, [pc, #20]	; (8ab4 <compile_atom_brace+0x1b8>)
    8aa0:	f640 11ee 	movw	r1, #2542	; 0x9ee
    8aa4:	4804      	ldr	r0, [pc, #16]	; (8ab8 <compile_atom_brace+0x1bc>)
    8aa6:	f014 fa1b 	bl	1cee0 <__assert_func>
        #endif
    }
}
    8aaa:	3728      	adds	r7, #40	; 0x28
    8aac:	46bd      	mov	sp, r7
    8aae:	bd80      	pop	{r7, pc}
    8ab0:	000221cc 	.word	0x000221cc
    8ab4:	000229dc 	.word	0x000229dc
    8ab8:	00021c60 	.word	0x00021c60
    8abc:	00022460 	.word	0x00022460
    8ac0:	00022470 	.word	0x00022470
    8ac4:	000224a0 	.word	0x000224a0

00008ac8 <compile_trailer_paren>:

STATIC void compile_trailer_paren(compiler_t *comp, mp_parse_node_struct_t *pns) {
    8ac8:	b580      	push	{r7, lr}
    8aca:	b082      	sub	sp, #8
    8acc:	af00      	add	r7, sp, #0
    8ace:	6078      	str	r0, [r7, #4]
    8ad0:	6039      	str	r1, [r7, #0]
    compile_trailer_paren_helper(comp, pns->nodes[0], false, 0);
    8ad2:	683b      	ldr	r3, [r7, #0]
    8ad4:	6899      	ldr	r1, [r3, #8]
    8ad6:	2300      	movs	r3, #0
    8ad8:	2200      	movs	r2, #0
    8ada:	6878      	ldr	r0, [r7, #4]
    8adc:	f7ff fc6b 	bl	83b6 <compile_trailer_paren_helper>
}
    8ae0:	bf00      	nop
    8ae2:	3708      	adds	r7, #8
    8ae4:	46bd      	mov	sp, r7
    8ae6:	bd80      	pop	{r7, pc}

00008ae8 <compile_trailer_bracket>:

STATIC void compile_trailer_bracket(compiler_t *comp, mp_parse_node_struct_t *pns) {
    8ae8:	b580      	push	{r7, lr}
    8aea:	b082      	sub	sp, #8
    8aec:	af00      	add	r7, sp, #0
    8aee:	6078      	str	r0, [r7, #4]
    8af0:	6039      	str	r1, [r7, #0]
    // object who's index we want is on top of stack
    compile_node(comp, pns->nodes[0]); // the index
    8af2:	683b      	ldr	r3, [r7, #0]
    8af4:	689b      	ldr	r3, [r3, #8]
    8af6:	4619      	mov	r1, r3
    8af8:	6878      	ldr	r0, [r7, #4]
    8afa:	f000 f8bc 	bl	8c76 <compile_node>
    EMIT_ARG(subscr, MP_EMIT_SUBSCR_LOAD);
    8afe:	687b      	ldr	r3, [r7, #4]
    8b00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    8b02:	2100      	movs	r1, #0
    8b04:	4618      	mov	r0, r3
    8b06:	f001 fe47 	bl	a798 <mp_emit_bc_subscr>
}
    8b0a:	bf00      	nop
    8b0c:	3708      	adds	r7, #8
    8b0e:	46bd      	mov	sp, r7
    8b10:	bd80      	pop	{r7, pc}

00008b12 <compile_trailer_period>:

STATIC void compile_trailer_period(compiler_t *comp, mp_parse_node_struct_t *pns) {
    8b12:	b580      	push	{r7, lr}
    8b14:	b082      	sub	sp, #8
    8b16:	af00      	add	r7, sp, #0
    8b18:	6078      	str	r0, [r7, #4]
    8b1a:	6039      	str	r1, [r7, #0]
    // object who's attribute we want is on top of stack
    EMIT_ARG(attr, MP_PARSE_NODE_LEAF_ARG(pns->nodes[0]), MP_EMIT_ATTR_LOAD); // attribute to get
    8b1c:	687b      	ldr	r3, [r7, #4]
    8b1e:	6a98      	ldr	r0, [r3, #40]	; 0x28
    8b20:	683b      	ldr	r3, [r7, #0]
    8b22:	689b      	ldr	r3, [r3, #8]
    8b24:	091b      	lsrs	r3, r3, #4
    8b26:	2200      	movs	r2, #0
    8b28:	4619      	mov	r1, r3
    8b2a:	f001 fe5d 	bl	a7e8 <mp_emit_bc_attr>
}
    8b2e:	bf00      	nop
    8b30:	3708      	adds	r7, #8
    8b32:	46bd      	mov	sp, r7
    8b34:	bd80      	pop	{r7, pc}

00008b36 <compile_dictorsetmaker_item>:
        EMIT_ARG(build, 2, MP_EMIT_BUILD_SLICE);
    }
}
#endif // MICROPY_PY_BUILTINS_SLICE

STATIC void compile_dictorsetmaker_item(compiler_t *comp, mp_parse_node_struct_t *pns) {
    8b36:	b580      	push	{r7, lr}
    8b38:	b082      	sub	sp, #8
    8b3a:	af00      	add	r7, sp, #0
    8b3c:	6078      	str	r0, [r7, #4]
    8b3e:	6039      	str	r1, [r7, #0]
    // if this is called then we are compiling a dict key:value pair
    compile_node(comp, pns->nodes[1]); // value
    8b40:	683b      	ldr	r3, [r7, #0]
    8b42:	68db      	ldr	r3, [r3, #12]
    8b44:	4619      	mov	r1, r3
    8b46:	6878      	ldr	r0, [r7, #4]
    8b48:	f000 f895 	bl	8c76 <compile_node>
    compile_node(comp, pns->nodes[0]); // key
    8b4c:	683b      	ldr	r3, [r7, #0]
    8b4e:	689b      	ldr	r3, [r3, #8]
    8b50:	4619      	mov	r1, r3
    8b52:	6878      	ldr	r0, [r7, #4]
    8b54:	f000 f88f 	bl	8c76 <compile_node>
}
    8b58:	bf00      	nop
    8b5a:	3708      	adds	r7, #8
    8b5c:	46bd      	mov	sp, r7
    8b5e:	bd80      	pop	{r7, pc}

00008b60 <compile_classdef>:

STATIC void compile_classdef(compiler_t *comp, mp_parse_node_struct_t *pns) {
    8b60:	b580      	push	{r7, lr}
    8b62:	b084      	sub	sp, #16
    8b64:	af00      	add	r7, sp, #0
    8b66:	6078      	str	r0, [r7, #4]
    8b68:	6039      	str	r1, [r7, #0]
    qstr cname = compile_classdef_helper(comp, pns, comp->scope_cur->emit_options);
    8b6a:	687b      	ldr	r3, [r7, #4]
    8b6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    8b6e:	8b5b      	ldrh	r3, [r3, #26]
    8b70:	461a      	mov	r2, r3
    8b72:	6839      	ldr	r1, [r7, #0]
    8b74:	6878      	ldr	r0, [r7, #4]
    8b76:	f7fd f9c3 	bl	5f00 <compile_classdef_helper>
    8b7a:	60f8      	str	r0, [r7, #12]
    // store class object into class name
    compile_store_id(comp, cname);
    8b7c:	68f9      	ldr	r1, [r7, #12]
    8b7e:	6878      	ldr	r0, [r7, #4]
    8b80:	f7fc fbc6 	bl	5310 <compile_store_id>
}
    8b84:	bf00      	nop
    8b86:	3710      	adds	r7, #16
    8b88:	46bd      	mov	sp, r7
    8b8a:	bd80      	pop	{r7, pc}

00008b8c <compile_yield_expr>:

STATIC void compile_yield_expr(compiler_t *comp, mp_parse_node_struct_t *pns) {
    8b8c:	b580      	push	{r7, lr}
    8b8e:	b082      	sub	sp, #8
    8b90:	af00      	add	r7, sp, #0
    8b92:	6078      	str	r0, [r7, #4]
    8b94:	6039      	str	r1, [r7, #0]
    if (comp->scope_cur->kind != SCOPE_FUNCTION && comp->scope_cur->kind != SCOPE_LAMBDA) {
    8b96:	687b      	ldr	r3, [r7, #4]
    8b98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    8b9a:	681b      	ldr	r3, [r3, #0]
    8b9c:	2b07      	cmp	r3, #7
    8b9e:	d00b      	beq.n	8bb8 <compile_yield_expr+0x2c>
    8ba0:	687b      	ldr	r3, [r7, #4]
    8ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    8ba4:	681b      	ldr	r3, [r3, #0]
    8ba6:	2b02      	cmp	r3, #2
    8ba8:	d006      	beq.n	8bb8 <compile_yield_expr+0x2c>
        compile_syntax_error(comp, (mp_parse_node_t)pns, "'yield' outside function");
    8baa:	683b      	ldr	r3, [r7, #0]
    8bac:	4a21      	ldr	r2, [pc, #132]	; (8c34 <compile_yield_expr+0xa8>)
    8bae:	4619      	mov	r1, r3
    8bb0:	6878      	ldr	r0, [r7, #4]
    8bb2:	f7fc fa84 	bl	50be <compile_syntax_error>
        return;
    8bb6:	e039      	b.n	8c2c <compile_yield_expr+0xa0>
    }
    if (MP_PARSE_NODE_IS_NULL(pns->nodes[0])) {
    8bb8:	683b      	ldr	r3, [r7, #0]
    8bba:	689b      	ldr	r3, [r3, #8]
    8bbc:	2b00      	cmp	r3, #0
    8bbe:	d10c      	bne.n	8bda <compile_yield_expr+0x4e>
        EMIT_ARG(load_const_tok, MP_TOKEN_KW_NONE);
    8bc0:	687b      	ldr	r3, [r7, #4]
    8bc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    8bc4:	210e      	movs	r1, #14
    8bc6:	4618      	mov	r0, r3
    8bc8:	f001 fce8 	bl	a59c <mp_emit_bc_load_const_tok>
        EMIT_ARG(yield, MP_EMIT_YIELD_VALUE);
    8bcc:	687b      	ldr	r3, [r7, #4]
    8bce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    8bd0:	2100      	movs	r1, #0
    8bd2:	4618      	mov	r0, r3
    8bd4:	f002 fa14 	bl	b000 <mp_emit_bc_yield>
    8bd8:	e028      	b.n	8c2c <compile_yield_expr+0xa0>
        reserve_labels_for_native(comp, 1);
    } else if (MP_PARSE_NODE_IS_STRUCT_KIND(pns->nodes[0], PN_yield_arg_from)) {
    8bda:	683b      	ldr	r3, [r7, #0]
    8bdc:	689b      	ldr	r3, [r3, #8]
    8bde:	2b00      	cmp	r3, #0
    8be0:	d018      	beq.n	8c14 <compile_yield_expr+0x88>
    8be2:	683b      	ldr	r3, [r7, #0]
    8be4:	689b      	ldr	r3, [r3, #8]
    8be6:	f003 0303 	and.w	r3, r3, #3
    8bea:	2b00      	cmp	r3, #0
    8bec:	d112      	bne.n	8c14 <compile_yield_expr+0x88>
    8bee:	683b      	ldr	r3, [r7, #0]
    8bf0:	689b      	ldr	r3, [r3, #8]
    8bf2:	685b      	ldr	r3, [r3, #4]
    8bf4:	b2db      	uxtb	r3, r3
    8bf6:	2ba2      	cmp	r3, #162	; 0xa2
    8bf8:	d10c      	bne.n	8c14 <compile_yield_expr+0x88>
        pns = (mp_parse_node_struct_t*)pns->nodes[0];
    8bfa:	683b      	ldr	r3, [r7, #0]
    8bfc:	689b      	ldr	r3, [r3, #8]
    8bfe:	603b      	str	r3, [r7, #0]
        compile_node(comp, pns->nodes[0]);
    8c00:	683b      	ldr	r3, [r7, #0]
    8c02:	689b      	ldr	r3, [r3, #8]
    8c04:	4619      	mov	r1, r3
    8c06:	6878      	ldr	r0, [r7, #4]
    8c08:	f000 f835 	bl	8c76 <compile_node>
        compile_yield_from(comp);
    8c0c:	6878      	ldr	r0, [r7, #4]
    8c0e:	f7fe fe9b 	bl	7948 <compile_yield_from>
    8c12:	e00b      	b.n	8c2c <compile_yield_expr+0xa0>
    } else {
        compile_node(comp, pns->nodes[0]);
    8c14:	683b      	ldr	r3, [r7, #0]
    8c16:	689b      	ldr	r3, [r3, #8]
    8c18:	4619      	mov	r1, r3
    8c1a:	6878      	ldr	r0, [r7, #4]
    8c1c:	f000 f82b 	bl	8c76 <compile_node>
        EMIT_ARG(yield, MP_EMIT_YIELD_VALUE);
    8c20:	687b      	ldr	r3, [r7, #4]
    8c22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    8c24:	2100      	movs	r1, #0
    8c26:	4618      	mov	r0, r3
    8c28:	f002 f9ea 	bl	b000 <mp_emit_bc_yield>
        reserve_labels_for_native(comp, 1);
    }
}
    8c2c:	3708      	adds	r7, #8
    8c2e:	46bd      	mov	sp, r7
    8c30:	bd80      	pop	{r7, pc}
    8c32:	bf00      	nop
    8c34:	000224a4 	.word	0x000224a4

00008c38 <get_const_object>:
    compile_atom_expr_normal(comp, pns);
    compile_yield_from(comp);
}
#endif

STATIC mp_obj_t get_const_object(mp_parse_node_struct_t *pns) {
    8c38:	b480      	push	{r7}
    8c3a:	b083      	sub	sp, #12
    8c3c:	af00      	add	r7, sp, #0
    8c3e:	6078      	str	r0, [r7, #4]
    #if MICROPY_OBJ_REPR == MICROPY_OBJ_REPR_D
    // nodes are 32-bit pointers, but need to extract 64-bit object
    return (uint64_t)pns->nodes[0] | ((uint64_t)pns->nodes[1] << 32);
    #else
    return (mp_obj_t)pns->nodes[0];
    8c40:	687b      	ldr	r3, [r7, #4]
    8c42:	689b      	ldr	r3, [r3, #8]
    #endif
}
    8c44:	4618      	mov	r0, r3
    8c46:	370c      	adds	r7, #12
    8c48:	46bd      	mov	sp, r7
    8c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
    8c4e:	4770      	bx	lr

00008c50 <compile_const_object>:

STATIC void compile_const_object(compiler_t *comp, mp_parse_node_struct_t *pns) {
    8c50:	b590      	push	{r4, r7, lr}
    8c52:	b083      	sub	sp, #12
    8c54:	af00      	add	r7, sp, #0
    8c56:	6078      	str	r0, [r7, #4]
    8c58:	6039      	str	r1, [r7, #0]
    #if MICROPY_EMIT_NATIVE
    comp->scope_cur->scope_flags |= MP_SCOPE_FLAG_HASCONSTS;
    #endif
    EMIT_ARG(load_const_obj, get_const_object(pns));
    8c5a:	687b      	ldr	r3, [r7, #4]
    8c5c:	6a9c      	ldr	r4, [r3, #40]	; 0x28
    8c5e:	6838      	ldr	r0, [r7, #0]
    8c60:	f7ff ffea 	bl	8c38 <get_const_object>
    8c64:	4603      	mov	r3, r0
    8c66:	4619      	mov	r1, r3
    8c68:	4620      	mov	r0, r4
    8c6a:	f001 fd07 	bl	a67c <mp_emit_bc_load_const_obj>
}
    8c6e:	bf00      	nop
    8c70:	370c      	adds	r7, #12
    8c72:	46bd      	mov	sp, r7
    8c74:	bd90      	pop	{r4, r7, pc}

00008c76 <compile_node>:
#undef DEF_RULE
#undef DEF_RULE_NC
    compile_const_object,
};

STATIC void compile_node(compiler_t *comp, mp_parse_node_t pn) {
    8c76:	b590      	push	{r4, r7, lr}
    8c78:	b089      	sub	sp, #36	; 0x24
    8c7a:	af00      	add	r7, sp, #0
    8c7c:	6078      	str	r0, [r7, #4]
    8c7e:	6039      	str	r1, [r7, #0]
    if (MP_PARSE_NODE_IS_NULL(pn)) {
    8c80:	683b      	ldr	r3, [r7, #0]
    8c82:	2b00      	cmp	r3, #0
    8c84:	d078      	beq.n	8d78 <compile_node+0x102>
        // pass
    } else if (MP_PARSE_NODE_IS_SMALL_INT(pn)) {
    8c86:	683b      	ldr	r3, [r7, #0]
    8c88:	f003 0301 	and.w	r3, r3, #1
    8c8c:	2b00      	cmp	r3, #0
    8c8e:	d009      	beq.n	8ca4 <compile_node+0x2e>
        mp_int_t arg = MP_PARSE_NODE_LEAF_SMALL_INT(pn);
    8c90:	683b      	ldr	r3, [r7, #0]
    8c92:	105b      	asrs	r3, r3, #1
    8c94:	61fb      	str	r3, [r7, #28]
            #if MICROPY_EMIT_NATIVE
            comp->scope_cur->scope_flags |= MP_SCOPE_FLAG_HASCONSTS;
            #endif
        }
        #else
        EMIT_ARG(load_const_small_int, arg);
    8c96:	687b      	ldr	r3, [r7, #4]
    8c98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    8c9a:	69f9      	ldr	r1, [r7, #28]
    8c9c:	4618      	mov	r0, r3
    8c9e:	f001 fcb9 	bl	a614 <mp_emit_bc_load_const_small_int>
        EMIT_ARG(set_source_line, pns->source_line);
        assert(MP_PARSE_NODE_STRUCT_KIND(pns) <= PN_const_object);
        compile_function_t f = compile_function[MP_PARSE_NODE_STRUCT_KIND(pns)];
        f(comp, pns);
    }
}
    8ca2:	e069      	b.n	8d78 <compile_node+0x102>
    } else if (MP_PARSE_NODE_IS_LEAF(pn)) {
    8ca4:	683b      	ldr	r3, [r7, #0]
    8ca6:	f003 0303 	and.w	r3, r3, #3
    8caa:	2b00      	cmp	r3, #0
    8cac:	d041      	beq.n	8d32 <compile_node+0xbc>
        uintptr_t arg = MP_PARSE_NODE_LEAF_ARG(pn);
    8cae:	683b      	ldr	r3, [r7, #0]
    8cb0:	091b      	lsrs	r3, r3, #4
    8cb2:	61bb      	str	r3, [r7, #24]
        switch (MP_PARSE_NODE_LEAF_KIND(pn)) {
    8cb4:	683b      	ldr	r3, [r7, #0]
    8cb6:	f003 030f 	and.w	r3, r3, #15
    8cba:	2b06      	cmp	r3, #6
    8cbc:	d008      	beq.n	8cd0 <compile_node+0x5a>
    8cbe:	2b0a      	cmp	r3, #10
    8cc0:	d00d      	beq.n	8cde <compile_node+0x68>
    8cc2:	2b02      	cmp	r3, #2
    8cc4:	d12a      	bne.n	8d1c <compile_node+0xa6>
            case MP_PARSE_NODE_ID: compile_load_id(comp, arg); break;
    8cc6:	69b9      	ldr	r1, [r7, #24]
    8cc8:	6878      	ldr	r0, [r7, #4]
    8cca:	f7fc fb02 	bl	52d2 <compile_load_id>
    8cce:	e053      	b.n	8d78 <compile_node+0x102>
            case MP_PARSE_NODE_STRING: EMIT_ARG(load_const_str, arg); break;
    8cd0:	687b      	ldr	r3, [r7, #4]
    8cd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    8cd4:	69b9      	ldr	r1, [r7, #24]
    8cd6:	4618      	mov	r0, r3
    8cd8:	f001 fcbe 	bl	a658 <mp_emit_bc_load_const_str>
    8cdc:	e04c      	b.n	8d78 <compile_node+0x102>
                if (comp->pass != MP_PASS_EMIT) {
    8cde:	687b      	ldr	r3, [r7, #4]
    8ce0:	795b      	ldrb	r3, [r3, #5]
    8ce2:	2b04      	cmp	r3, #4
    8ce4:	d006      	beq.n	8cf4 <compile_node+0x7e>
                    EMIT_ARG(load_const_obj, mp_const_none);
    8ce6:	687b      	ldr	r3, [r7, #4]
    8ce8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    8cea:	4925      	ldr	r1, [pc, #148]	; (8d80 <compile_node+0x10a>)
    8cec:	4618      	mov	r0, r3
    8cee:	f001 fcc5 	bl	a67c <mp_emit_bc_load_const_obj>
                break;
    8cf2:	e041      	b.n	8d78 <compile_node+0x102>
                    const byte *data = qstr_data(arg, &len);
    8cf4:	f107 0308 	add.w	r3, r7, #8
    8cf8:	4619      	mov	r1, r3
    8cfa:	69b8      	ldr	r0, [r7, #24]
    8cfc:	f7f8 fb76 	bl	13ec <qstr_data>
    8d00:	6178      	str	r0, [r7, #20]
                    EMIT_ARG(load_const_obj, mp_obj_new_bytes(data, len));
    8d02:	687b      	ldr	r3, [r7, #4]
    8d04:	6a9c      	ldr	r4, [r3, #40]	; 0x28
    8d06:	68bb      	ldr	r3, [r7, #8]
    8d08:	4619      	mov	r1, r3
    8d0a:	6978      	ldr	r0, [r7, #20]
    8d0c:	f00c fddf 	bl	158ce <mp_obj_new_bytes>
    8d10:	4603      	mov	r3, r0
    8d12:	4619      	mov	r1, r3
    8d14:	4620      	mov	r0, r4
    8d16:	f001 fcb1 	bl	a67c <mp_emit_bc_load_const_obj>
                break;
    8d1a:	e02d      	b.n	8d78 <compile_node+0x102>
                if (arg == MP_TOKEN_NEWLINE) {
    8d1c:	69bb      	ldr	r3, [r7, #24]
    8d1e:	2b04      	cmp	r3, #4
    8d20:	d029      	beq.n	8d76 <compile_node+0x100>
                  EMIT_ARG(load_const_tok, arg);
    8d22:	687b      	ldr	r3, [r7, #4]
    8d24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    8d26:	69b9      	ldr	r1, [r7, #24]
    8d28:	4618      	mov	r0, r3
    8d2a:	f001 fc37 	bl	a59c <mp_emit_bc_load_const_tok>
                break;
    8d2e:	bf00      	nop
    8d30:	e021      	b.n	8d76 <compile_node+0x100>
        mp_parse_node_struct_t *pns = (mp_parse_node_struct_t*)pn;
    8d32:	683b      	ldr	r3, [r7, #0]
    8d34:	613b      	str	r3, [r7, #16]
        EMIT_ARG(set_source_line, pns->source_line);
    8d36:	687b      	ldr	r3, [r7, #4]
    8d38:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    8d3a:	693b      	ldr	r3, [r7, #16]
    8d3c:	681b      	ldr	r3, [r3, #0]
    8d3e:	4619      	mov	r1, r3
    8d40:	4610      	mov	r0, r2
    8d42:	f001 fba2 	bl	a48a <mp_emit_bc_set_source_line>
        assert(MP_PARSE_NODE_STRUCT_KIND(pns) <= PN_const_object);
    8d46:	693b      	ldr	r3, [r7, #16]
    8d48:	685b      	ldr	r3, [r3, #4]
    8d4a:	b2db      	uxtb	r3, r3
    8d4c:	2b35      	cmp	r3, #53	; 0x35
    8d4e:	d906      	bls.n	8d5e <compile_node+0xe8>
    8d50:	4b0c      	ldr	r3, [pc, #48]	; (8d84 <compile_node+0x10e>)
    8d52:	4a0d      	ldr	r2, [pc, #52]	; (8d88 <compile_node+0x112>)
    8d54:	f640 21ba 	movw	r1, #2746	; 0xaba
    8d58:	480c      	ldr	r0, [pc, #48]	; (8d8c <compile_node+0x116>)
    8d5a:	f014 f8c1 	bl	1cee0 <__assert_func>
        compile_function_t f = compile_function[MP_PARSE_NODE_STRUCT_KIND(pns)];
    8d5e:	693b      	ldr	r3, [r7, #16]
    8d60:	685b      	ldr	r3, [r3, #4]
    8d62:	b2db      	uxtb	r3, r3
    8d64:	4a0a      	ldr	r2, [pc, #40]	; (8d90 <compile_node+0x11a>)
    8d66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8d6a:	60fb      	str	r3, [r7, #12]
        f(comp, pns);
    8d6c:	68fb      	ldr	r3, [r7, #12]
    8d6e:	6939      	ldr	r1, [r7, #16]
    8d70:	6878      	ldr	r0, [r7, #4]
    8d72:	4798      	blx	r3
}
    8d74:	e000      	b.n	8d78 <compile_node+0x102>
                break;
    8d76:	bf00      	nop
}
    8d78:	bf00      	nop
    8d7a:	3724      	adds	r7, #36	; 0x24
    8d7c:	46bd      	mov	sp, r7
    8d7e:	bd90      	pop	{r4, r7, pc}
    8d80:	0002511c 	.word	0x0002511c
    8d84:	00022598 	.word	0x00022598
    8d88:	000229f0 	.word	0x000229f0
    8d8c:	00021c60 	.word	0x00021c60
    8d90:	000224c0 	.word	0x000224c0

00008d94 <compile_scope_func_lambda_param>:
    }
    return native_type;
}
#endif

STATIC void compile_scope_func_lambda_param(compiler_t *comp, mp_parse_node_t pn, pn_kind_t pn_name, pn_kind_t pn_star, pn_kind_t pn_dbl_star) {
    8d94:	b580      	push	{r7, lr}
    8d96:	b088      	sub	sp, #32
    8d98:	af00      	add	r7, sp, #0
    8d9a:	60f8      	str	r0, [r7, #12]
    8d9c:	60b9      	str	r1, [r7, #8]
    8d9e:	607a      	str	r2, [r7, #4]
    8da0:	603b      	str	r3, [r7, #0]
    // check that **kw is last
    if ((comp->scope_cur->scope_flags & MP_SCOPE_FLAG_VARKEYWORDS) != 0) {
    8da2:	68fb      	ldr	r3, [r7, #12]
    8da4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    8da6:	8b1b      	ldrh	r3, [r3, #24]
    8da8:	f003 0302 	and.w	r3, r3, #2
    8dac:	2b00      	cmp	r3, #0
    8dae:	d005      	beq.n	8dbc <compile_scope_func_lambda_param+0x28>
        compile_syntax_error(comp, pn, "invalid syntax");
    8db0:	4a77      	ldr	r2, [pc, #476]	; (8f90 <compile_scope_func_lambda_param+0x1fc>)
    8db2:	68b9      	ldr	r1, [r7, #8]
    8db4:	68f8      	ldr	r0, [r7, #12]
    8db6:	f7fc f982 	bl	50be <compile_syntax_error>
        return;
    8dba:	e0e6      	b.n	8f8a <compile_scope_func_lambda_param+0x1f6>
    }

    qstr param_name = MP_QSTR_NULL;
    8dbc:	2300      	movs	r3, #0
    8dbe:	61fb      	str	r3, [r7, #28]
    uint param_flag = ID_FLAG_IS_PARAM;
    8dc0:	2301      	movs	r3, #1
    8dc2:	61bb      	str	r3, [r7, #24]
    mp_parse_node_struct_t *pns = NULL;
    8dc4:	2300      	movs	r3, #0
    8dc6:	617b      	str	r3, [r7, #20]
    if (MP_PARSE_NODE_IS_ID(pn)) {
    8dc8:	68bb      	ldr	r3, [r7, #8]
    8dca:	f003 030f 	and.w	r3, r3, #15
    8dce:	2b02      	cmp	r3, #2
    8dd0:	d118      	bne.n	8e04 <compile_scope_func_lambda_param+0x70>
        param_name = MP_PARSE_NODE_LEAF_ARG(pn);
    8dd2:	68bb      	ldr	r3, [r7, #8]
    8dd4:	091b      	lsrs	r3, r3, #4
    8dd6:	61fb      	str	r3, [r7, #28]
        if (comp->have_star) {
    8dd8:	68fb      	ldr	r3, [r7, #12]
    8dda:	799b      	ldrb	r3, [r3, #6]
    8ddc:	2b00      	cmp	r3, #0
    8dde:	d008      	beq.n	8df2 <compile_scope_func_lambda_param+0x5e>
            // comes after a star, so counts as a keyword-only parameter
            comp->scope_cur->num_kwonly_args += 1;
    8de0:	68fb      	ldr	r3, [r7, #12]
    8de2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    8de4:	68fa      	ldr	r2, [r7, #12]
    8de6:	6a52      	ldr	r2, [r2, #36]	; 0x24
    8de8:	8bd2      	ldrh	r2, [r2, #30]
    8dea:	3201      	adds	r2, #1
    8dec:	b292      	uxth	r2, r2
    8dee:	83da      	strh	r2, [r3, #30]
    8df0:	e0af      	b.n	8f52 <compile_scope_func_lambda_param+0x1be>
        } else {
            // comes before a star, so counts as a positional parameter
            comp->scope_cur->num_pos_args += 1;
    8df2:	68fb      	ldr	r3, [r7, #12]
    8df4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    8df6:	68fa      	ldr	r2, [r7, #12]
    8df8:	6a52      	ldr	r2, [r2, #36]	; 0x24
    8dfa:	8b92      	ldrh	r2, [r2, #28]
    8dfc:	3201      	adds	r2, #1
    8dfe:	b292      	uxth	r2, r2
    8e00:	839a      	strh	r2, [r3, #28]
    8e02:	e0a6      	b.n	8f52 <compile_scope_func_lambda_param+0x1be>
        }
    } else {
        assert(MP_PARSE_NODE_IS_STRUCT(pn));
    8e04:	68bb      	ldr	r3, [r7, #8]
    8e06:	2b00      	cmp	r3, #0
    8e08:	d004      	beq.n	8e14 <compile_scope_func_lambda_param+0x80>
    8e0a:	68bb      	ldr	r3, [r7, #8]
    8e0c:	f003 0303 	and.w	r3, r3, #3
    8e10:	2b00      	cmp	r3, #0
    8e12:	d006      	beq.n	8e22 <compile_scope_func_lambda_param+0x8e>
    8e14:	4b5f      	ldr	r3, [pc, #380]	; (8f94 <compile_scope_func_lambda_param+0x200>)
    8e16:	4a60      	ldr	r2, [pc, #384]	; (8f98 <compile_scope_func_lambda_param+0x204>)
    8e18:	f640 21e7 	movw	r1, #2791	; 0xae7
    8e1c:	485f      	ldr	r0, [pc, #380]	; (8f9c <compile_scope_func_lambda_param+0x208>)
    8e1e:	f014 f85f 	bl	1cee0 <__assert_func>
        pns = (mp_parse_node_struct_t*)pn;
    8e22:	68bb      	ldr	r3, [r7, #8]
    8e24:	617b      	str	r3, [r7, #20]
        if (MP_PARSE_NODE_STRUCT_KIND(pns) == pn_name) {
    8e26:	697b      	ldr	r3, [r7, #20]
    8e28:	685b      	ldr	r3, [r3, #4]
    8e2a:	b2da      	uxtb	r2, r3
    8e2c:	687b      	ldr	r3, [r7, #4]
    8e2e:	429a      	cmp	r2, r3
    8e30:	d119      	bne.n	8e66 <compile_scope_func_lambda_param+0xd2>
            // named parameter with possible annotation
            param_name = MP_PARSE_NODE_LEAF_ARG(pns->nodes[0]);
    8e32:	697b      	ldr	r3, [r7, #20]
    8e34:	689b      	ldr	r3, [r3, #8]
    8e36:	091b      	lsrs	r3, r3, #4
    8e38:	61fb      	str	r3, [r7, #28]
            if (comp->have_star) {
    8e3a:	68fb      	ldr	r3, [r7, #12]
    8e3c:	799b      	ldrb	r3, [r3, #6]
    8e3e:	2b00      	cmp	r3, #0
    8e40:	d008      	beq.n	8e54 <compile_scope_func_lambda_param+0xc0>
                // comes after a star, so counts as a keyword-only parameter
                comp->scope_cur->num_kwonly_args += 1;
    8e42:	68fb      	ldr	r3, [r7, #12]
    8e44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    8e46:	68fa      	ldr	r2, [r7, #12]
    8e48:	6a52      	ldr	r2, [r2, #36]	; 0x24
    8e4a:	8bd2      	ldrh	r2, [r2, #30]
    8e4c:	3201      	adds	r2, #1
    8e4e:	b292      	uxth	r2, r2
    8e50:	83da      	strh	r2, [r3, #30]
    8e52:	e07e      	b.n	8f52 <compile_scope_func_lambda_param+0x1be>
            } else {
                // comes before a star, so counts as a positional parameter
                comp->scope_cur->num_pos_args += 1;
    8e54:	68fb      	ldr	r3, [r7, #12]
    8e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    8e58:	68fa      	ldr	r2, [r7, #12]
    8e5a:	6a52      	ldr	r2, [r2, #36]	; 0x24
    8e5c:	8b92      	ldrh	r2, [r2, #28]
    8e5e:	3201      	adds	r2, #1
    8e60:	b292      	uxth	r2, r2
    8e62:	839a      	strh	r2, [r3, #28]
    8e64:	e075      	b.n	8f52 <compile_scope_func_lambda_param+0x1be>
            }
        } else if (MP_PARSE_NODE_STRUCT_KIND(pns) == pn_star) {
    8e66:	697b      	ldr	r3, [r7, #20]
    8e68:	685b      	ldr	r3, [r3, #4]
    8e6a:	b2da      	uxtb	r2, r3
    8e6c:	683b      	ldr	r3, [r7, #0]
    8e6e:	429a      	cmp	r2, r3
    8e70:	d153      	bne.n	8f1a <compile_scope_func_lambda_param+0x186>
            if (comp->have_star) {
    8e72:	68fb      	ldr	r3, [r7, #12]
    8e74:	799b      	ldrb	r3, [r3, #6]
    8e76:	2b00      	cmp	r3, #0
    8e78:	d005      	beq.n	8e86 <compile_scope_func_lambda_param+0xf2>
                // more than one star
                compile_syntax_error(comp, pn, "invalid syntax");
    8e7a:	4a45      	ldr	r2, [pc, #276]	; (8f90 <compile_scope_func_lambda_param+0x1fc>)
    8e7c:	68b9      	ldr	r1, [r7, #8]
    8e7e:	68f8      	ldr	r0, [r7, #12]
    8e80:	f7fc f91d 	bl	50be <compile_syntax_error>
                return;
    8e84:	e081      	b.n	8f8a <compile_scope_func_lambda_param+0x1f6>
            }
            comp->have_star = true;
    8e86:	68fb      	ldr	r3, [r7, #12]
    8e88:	2201      	movs	r2, #1
    8e8a:	719a      	strb	r2, [r3, #6]
            param_flag = ID_FLAG_IS_PARAM | ID_FLAG_IS_STAR_PARAM;
    8e8c:	2303      	movs	r3, #3
    8e8e:	61bb      	str	r3, [r7, #24]
            if (MP_PARSE_NODE_IS_NULL(pns->nodes[0])) {
    8e90:	697b      	ldr	r3, [r7, #20]
    8e92:	689b      	ldr	r3, [r3, #8]
    8e94:	2b00      	cmp	r3, #0
    8e96:	d102      	bne.n	8e9e <compile_scope_func_lambda_param+0x10a>
                // bare star
                // TODO see http://www.python.org/dev/peps/pep-3102/
                //assert(comp->scope_cur->num_dict_params == 0);
                pns = NULL;
    8e98:	2300      	movs	r3, #0
    8e9a:	617b      	str	r3, [r7, #20]
    8e9c:	e059      	b.n	8f52 <compile_scope_func_lambda_param+0x1be>
            } else if (MP_PARSE_NODE_IS_ID(pns->nodes[0])) {
    8e9e:	697b      	ldr	r3, [r7, #20]
    8ea0:	689b      	ldr	r3, [r3, #8]
    8ea2:	f003 030f 	and.w	r3, r3, #15
    8ea6:	2b02      	cmp	r3, #2
    8ea8:	d10f      	bne.n	8eca <compile_scope_func_lambda_param+0x136>
                // named star
                comp->scope_cur->scope_flags |= MP_SCOPE_FLAG_VARARGS;
    8eaa:	68fb      	ldr	r3, [r7, #12]
    8eac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    8eae:	68fa      	ldr	r2, [r7, #12]
    8eb0:	6a52      	ldr	r2, [r2, #36]	; 0x24
    8eb2:	8b12      	ldrh	r2, [r2, #24]
    8eb4:	f042 0201 	orr.w	r2, r2, #1
    8eb8:	b292      	uxth	r2, r2
    8eba:	831a      	strh	r2, [r3, #24]
                param_name = MP_PARSE_NODE_LEAF_ARG(pns->nodes[0]);
    8ebc:	697b      	ldr	r3, [r7, #20]
    8ebe:	689b      	ldr	r3, [r3, #8]
    8ec0:	091b      	lsrs	r3, r3, #4
    8ec2:	61fb      	str	r3, [r7, #28]
                pns = NULL;
    8ec4:	2300      	movs	r3, #0
    8ec6:	617b      	str	r3, [r7, #20]
    8ec8:	e043      	b.n	8f52 <compile_scope_func_lambda_param+0x1be>
            } else {
                assert(MP_PARSE_NODE_IS_STRUCT_KIND(pns->nodes[0], PN_tfpdef)); // should be
    8eca:	697b      	ldr	r3, [r7, #20]
    8ecc:	689b      	ldr	r3, [r3, #8]
    8ece:	2b00      	cmp	r3, #0
    8ed0:	d00b      	beq.n	8eea <compile_scope_func_lambda_param+0x156>
    8ed2:	697b      	ldr	r3, [r7, #20]
    8ed4:	689b      	ldr	r3, [r3, #8]
    8ed6:	f003 0303 	and.w	r3, r3, #3
    8eda:	2b00      	cmp	r3, #0
    8edc:	d105      	bne.n	8eea <compile_scope_func_lambda_param+0x156>
    8ede:	697b      	ldr	r3, [r7, #20]
    8ee0:	689b      	ldr	r3, [r3, #8]
    8ee2:	685b      	ldr	r3, [r3, #4]
    8ee4:	b2db      	uxtb	r3, r3
    8ee6:	2b45      	cmp	r3, #69	; 0x45
    8ee8:	d006      	beq.n	8ef8 <compile_scope_func_lambda_param+0x164>
    8eea:	4b2d      	ldr	r3, [pc, #180]	; (8fa0 <compile_scope_func_lambda_param+0x20c>)
    8eec:	4a2a      	ldr	r2, [pc, #168]	; (8f98 <compile_scope_func_lambda_param+0x204>)
    8eee:	f640 3106 	movw	r1, #2822	; 0xb06
    8ef2:	482a      	ldr	r0, [pc, #168]	; (8f9c <compile_scope_func_lambda_param+0x208>)
    8ef4:	f013 fff4 	bl	1cee0 <__assert_func>
                // named star with possible annotation
                comp->scope_cur->scope_flags |= MP_SCOPE_FLAG_VARARGS;
    8ef8:	68fb      	ldr	r3, [r7, #12]
    8efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    8efc:	68fa      	ldr	r2, [r7, #12]
    8efe:	6a52      	ldr	r2, [r2, #36]	; 0x24
    8f00:	8b12      	ldrh	r2, [r2, #24]
    8f02:	f042 0201 	orr.w	r2, r2, #1
    8f06:	b292      	uxth	r2, r2
    8f08:	831a      	strh	r2, [r3, #24]
                pns = (mp_parse_node_struct_t*)pns->nodes[0];
    8f0a:	697b      	ldr	r3, [r7, #20]
    8f0c:	689b      	ldr	r3, [r3, #8]
    8f0e:	617b      	str	r3, [r7, #20]
                param_name = MP_PARSE_NODE_LEAF_ARG(pns->nodes[0]);
    8f10:	697b      	ldr	r3, [r7, #20]
    8f12:	689b      	ldr	r3, [r3, #8]
    8f14:	091b      	lsrs	r3, r3, #4
    8f16:	61fb      	str	r3, [r7, #28]
    8f18:	e01b      	b.n	8f52 <compile_scope_func_lambda_param+0x1be>
            }
        } else {
            // double star with possible annotation
            assert(MP_PARSE_NODE_STRUCT_KIND(pns) == pn_dbl_star); // should be
    8f1a:	697b      	ldr	r3, [r7, #20]
    8f1c:	685b      	ldr	r3, [r3, #4]
    8f1e:	b2da      	uxtb	r2, r3
    8f20:	6abb      	ldr	r3, [r7, #40]	; 0x28
    8f22:	429a      	cmp	r2, r3
    8f24:	d006      	beq.n	8f34 <compile_scope_func_lambda_param+0x1a0>
    8f26:	4b1f      	ldr	r3, [pc, #124]	; (8fa4 <compile_scope_func_lambda_param+0x210>)
    8f28:	4a1b      	ldr	r2, [pc, #108]	; (8f98 <compile_scope_func_lambda_param+0x204>)
    8f2a:	f640 310e 	movw	r1, #2830	; 0xb0e
    8f2e:	481b      	ldr	r0, [pc, #108]	; (8f9c <compile_scope_func_lambda_param+0x208>)
    8f30:	f013 ffd6 	bl	1cee0 <__assert_func>
            param_name = MP_PARSE_NODE_LEAF_ARG(pns->nodes[0]);
    8f34:	697b      	ldr	r3, [r7, #20]
    8f36:	689b      	ldr	r3, [r3, #8]
    8f38:	091b      	lsrs	r3, r3, #4
    8f3a:	61fb      	str	r3, [r7, #28]
            param_flag = ID_FLAG_IS_PARAM | ID_FLAG_IS_DBL_STAR_PARAM;
    8f3c:	2305      	movs	r3, #5
    8f3e:	61bb      	str	r3, [r7, #24]
            comp->scope_cur->scope_flags |= MP_SCOPE_FLAG_VARKEYWORDS;
    8f40:	68fb      	ldr	r3, [r7, #12]
    8f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    8f44:	68fa      	ldr	r2, [r7, #12]
    8f46:	6a52      	ldr	r2, [r2, #36]	; 0x24
    8f48:	8b12      	ldrh	r2, [r2, #24]
    8f4a:	f042 0202 	orr.w	r2, r2, #2
    8f4e:	b292      	uxth	r2, r2
    8f50:	831a      	strh	r2, [r3, #24]
        }
    }

    if (param_name != MP_QSTR_NULL) {
    8f52:	69fb      	ldr	r3, [r7, #28]
    8f54:	2b00      	cmp	r3, #0
    8f56:	d018      	beq.n	8f8a <compile_scope_func_lambda_param+0x1f6>
        id_info_t *id_info = scope_find_or_add_id(comp->scope_cur, param_name, ID_INFO_KIND_UNDECIDED);
    8f58:	68fb      	ldr	r3, [r7, #12]
    8f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    8f5c:	2200      	movs	r2, #0
    8f5e:	69f9      	ldr	r1, [r7, #28]
    8f60:	4618      	mov	r0, r3
    8f62:	f7fb ff5b 	bl	4e1c <scope_find_or_add_id>
    8f66:	6138      	str	r0, [r7, #16]
        if (id_info->kind != ID_INFO_KIND_UNDECIDED) {
    8f68:	693b      	ldr	r3, [r7, #16]
    8f6a:	781b      	ldrb	r3, [r3, #0]
    8f6c:	2b00      	cmp	r3, #0
    8f6e:	d005      	beq.n	8f7c <compile_scope_func_lambda_param+0x1e8>
            compile_syntax_error(comp, pn, "argument name reused");
    8f70:	4a0d      	ldr	r2, [pc, #52]	; (8fa8 <compile_scope_func_lambda_param+0x214>)
    8f72:	68b9      	ldr	r1, [r7, #8]
    8f74:	68f8      	ldr	r0, [r7, #12]
    8f76:	f7fc f8a2 	bl	50be <compile_syntax_error>
            return;
    8f7a:	e006      	b.n	8f8a <compile_scope_func_lambda_param+0x1f6>
        }
        id_info->kind = ID_INFO_KIND_LOCAL;
    8f7c:	693b      	ldr	r3, [r7, #16]
    8f7e:	2203      	movs	r2, #3
    8f80:	701a      	strb	r2, [r3, #0]
        id_info->flags = param_flag;
    8f82:	69bb      	ldr	r3, [r7, #24]
    8f84:	b2da      	uxtb	r2, r3
    8f86:	693b      	ldr	r3, [r7, #16]
    8f88:	705a      	strb	r2, [r3, #1]
        }
        #else
        (void)pns;
        #endif
    }
}
    8f8a:	3720      	adds	r7, #32
    8f8c:	46bd      	mov	sp, r7
    8f8e:	bd80      	pop	{r7, pc}
    8f90:	00022460 	.word	0x00022460
    8f94:	00021da8 	.word	0x00021da8
    8f98:	00022a00 	.word	0x00022a00
    8f9c:	00021c60 	.word	0x00021c60
    8fa0:	000225cc 	.word	0x000225cc
    8fa4:	00022604 	.word	0x00022604
    8fa8:	00022634 	.word	0x00022634

00008fac <compile_scope_func_param>:

STATIC void compile_scope_func_param(compiler_t *comp, mp_parse_node_t pn) {
    8fac:	b580      	push	{r7, lr}
    8fae:	b084      	sub	sp, #16
    8fb0:	af02      	add	r7, sp, #8
    8fb2:	6078      	str	r0, [r7, #4]
    8fb4:	6039      	str	r1, [r7, #0]
    compile_scope_func_lambda_param(comp, pn, PN_typedargslist_name, PN_typedargslist_star, PN_typedargslist_dbl_star);
    8fb6:	2342      	movs	r3, #66	; 0x42
    8fb8:	9300      	str	r3, [sp, #0]
    8fba:	2341      	movs	r3, #65	; 0x41
    8fbc:	2240      	movs	r2, #64	; 0x40
    8fbe:	6839      	ldr	r1, [r7, #0]
    8fc0:	6878      	ldr	r0, [r7, #4]
    8fc2:	f7ff fee7 	bl	8d94 <compile_scope_func_lambda_param>
}
    8fc6:	bf00      	nop
    8fc8:	3708      	adds	r7, #8
    8fca:	46bd      	mov	sp, r7
    8fcc:	bd80      	pop	{r7, pc}

00008fce <compile_scope_lambda_param>:

STATIC void compile_scope_lambda_param(compiler_t *comp, mp_parse_node_t pn) {
    8fce:	b580      	push	{r7, lr}
    8fd0:	b084      	sub	sp, #16
    8fd2:	af02      	add	r7, sp, #8
    8fd4:	6078      	str	r0, [r7, #4]
    8fd6:	6039      	str	r1, [r7, #0]
    compile_scope_func_lambda_param(comp, pn, PN_varargslist_name, PN_varargslist_star, PN_varargslist_dbl_star);
    8fd8:	234a      	movs	r3, #74	; 0x4a
    8fda:	9300      	str	r3, [sp, #0]
    8fdc:	2349      	movs	r3, #73	; 0x49
    8fde:	2248      	movs	r2, #72	; 0x48
    8fe0:	6839      	ldr	r1, [r7, #0]
    8fe2:	6878      	ldr	r0, [r7, #4]
    8fe4:	f7ff fed6 	bl	8d94 <compile_scope_func_lambda_param>
}
    8fe8:	bf00      	nop
    8fea:	3708      	adds	r7, #8
    8fec:	46bd      	mov	sp, r7
    8fee:	bd80      	pop	{r7, pc}

00008ff0 <compile_scope_comp_iter>:

STATIC void compile_scope_comp_iter(compiler_t *comp, mp_parse_node_struct_t *pns_comp_for, mp_parse_node_t pn_inner_expr, int for_depth) {
    8ff0:	b580      	push	{r7, lr}
    8ff2:	b08a      	sub	sp, #40	; 0x28
    8ff4:	af00      	add	r7, sp, #0
    8ff6:	60f8      	str	r0, [r7, #12]
    8ff8:	60b9      	str	r1, [r7, #8]
    8ffa:	607a      	str	r2, [r7, #4]
    8ffc:	603b      	str	r3, [r7, #0]
    uint l_top = comp_next_label(comp);
    8ffe:	68f8      	ldr	r0, [r7, #12]
    9000:	f7fc f878 	bl	50f4 <comp_next_label>
    9004:	6238      	str	r0, [r7, #32]
    uint l_end = comp_next_label(comp);
    9006:	68f8      	ldr	r0, [r7, #12]
    9008:	f7fc f874 	bl	50f4 <comp_next_label>
    900c:	61f8      	str	r0, [r7, #28]
    EMIT_ARG(label_assign, l_top);
    900e:	68fb      	ldr	r3, [r7, #12]
    9010:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    9012:	6a39      	ldr	r1, [r7, #32]
    9014:	4618      	mov	r0, r3
    9016:	f001 fa43 	bl	a4a0 <mp_emit_bc_label_assign>
    EMIT_ARG(for_iter, l_end);
    901a:	68fb      	ldr	r3, [r7, #12]
    901c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    901e:	69f9      	ldr	r1, [r7, #28]
    9020:	4618      	mov	r0, r3
    9022:	f001 fdcc 	bl	abbe <mp_emit_bc_for_iter>
    c_assign(comp, pns_comp_for->nodes[0], ASSIGN_STORE);
    9026:	68bb      	ldr	r3, [r7, #8]
    9028:	689b      	ldr	r3, [r3, #8]
    902a:	2200      	movs	r2, #0
    902c:	4619      	mov	r1, r3
    902e:	68f8      	ldr	r0, [r7, #12]
    9030:	f7fc fc92 	bl	5958 <c_assign>
    mp_parse_node_t pn_iter = pns_comp_for->nodes[2];
    9034:	68bb      	ldr	r3, [r7, #8]
    9036:	691b      	ldr	r3, [r3, #16]
    9038:	627b      	str	r3, [r7, #36]	; 0x24

    tail_recursion:
    if (MP_PARSE_NODE_IS_NULL(pn_iter)) {
    903a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    903c:	2b00      	cmp	r3, #0
    903e:	d120      	bne.n	9082 <compile_scope_comp_iter+0x92>
        // no more nested if/for; compile inner expression
        compile_node(comp, pn_inner_expr);
    9040:	6879      	ldr	r1, [r7, #4]
    9042:	68f8      	ldr	r0, [r7, #12]
    9044:	f7ff fe17 	bl	8c76 <compile_node>
        if (comp->scope_cur->kind == SCOPE_GEN_EXPR) {
    9048:	68fb      	ldr	r3, [r7, #12]
    904a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    904c:	681b      	ldr	r3, [r3, #0]
    904e:	2b06      	cmp	r3, #6
    9050:	d10b      	bne.n	906a <compile_scope_comp_iter+0x7a>
            EMIT_ARG(yield, MP_EMIT_YIELD_VALUE);
    9052:	68fb      	ldr	r3, [r7, #12]
    9054:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    9056:	2100      	movs	r1, #0
    9058:	4618      	mov	r0, r3
    905a:	f001 ffd1 	bl	b000 <mp_emit_bc_yield>
            reserve_labels_for_native(comp, 1);
            EMIT(pop_top);
    905e:	68fb      	ldr	r3, [r7, #12]
    9060:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    9062:	4618      	mov	r0, r3
    9064:	f001 fc75 	bl	a952 <mp_emit_bc_pop_top>
    9068:	e03e      	b.n	90e8 <compile_scope_comp_iter+0xf8>
        } else {
            EMIT_ARG(store_comp, comp->scope_cur->kind, 4 * for_depth + 5);
    906a:	68fb      	ldr	r3, [r7, #12]
    906c:	6a98      	ldr	r0, [r3, #40]	; 0x28
    906e:	68fb      	ldr	r3, [r7, #12]
    9070:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    9072:	6819      	ldr	r1, [r3, #0]
    9074:	683b      	ldr	r3, [r7, #0]
    9076:	009b      	lsls	r3, r3, #2
    9078:	3305      	adds	r3, #5
    907a:	461a      	mov	r2, r3
    907c:	f001 fe58 	bl	ad30 <mp_emit_bc_store_comp>
    9080:	e032      	b.n	90e8 <compile_scope_comp_iter+0xf8>
        }
    } else if (MP_PARSE_NODE_STRUCT_KIND((mp_parse_node_struct_t*)pn_iter) == PN_comp_if) {
    9082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    9084:	685b      	ldr	r3, [r3, #4]
    9086:	b2db      	uxtb	r3, r3
    9088:	2ba0      	cmp	r3, #160	; 0xa0
    908a:	d10c      	bne.n	90a6 <compile_scope_comp_iter+0xb6>
        // if condition
        mp_parse_node_struct_t *pns_comp_if = (mp_parse_node_struct_t*)pn_iter;
    908c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    908e:	61bb      	str	r3, [r7, #24]
        c_if_cond(comp, pns_comp_if->nodes[0], false, l_top);
    9090:	69bb      	ldr	r3, [r7, #24]
    9092:	6899      	ldr	r1, [r3, #8]
    9094:	6a3b      	ldr	r3, [r7, #32]
    9096:	2200      	movs	r2, #0
    9098:	68f8      	ldr	r0, [r7, #12]
    909a:	f7fc f9be 	bl	541a <c_if_cond>
        pn_iter = pns_comp_if->nodes[1];
    909e:	69bb      	ldr	r3, [r7, #24]
    90a0:	68db      	ldr	r3, [r3, #12]
    90a2:	627b      	str	r3, [r7, #36]	; 0x24
        goto tail_recursion;
    90a4:	e7c9      	b.n	903a <compile_scope_comp_iter+0x4a>
    } else {
        assert(MP_PARSE_NODE_STRUCT_KIND((mp_parse_node_struct_t*)pn_iter) == PN_comp_for); // should be
    90a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    90a8:	685b      	ldr	r3, [r3, #4]
    90aa:	b2db      	uxtb	r3, r3
    90ac:	2b9f      	cmp	r3, #159	; 0x9f
    90ae:	d006      	beq.n	90be <compile_scope_comp_iter+0xce>
    90b0:	4b18      	ldr	r3, [pc, #96]	; (9114 <compile_scope_comp_iter+0x124>)
    90b2:	4a19      	ldr	r2, [pc, #100]	; (9118 <compile_scope_comp_iter+0x128>)
    90b4:	f640 314a 	movw	r1, #2890	; 0xb4a
    90b8:	4818      	ldr	r0, [pc, #96]	; (911c <compile_scope_comp_iter+0x12c>)
    90ba:	f013 ff11 	bl	1cee0 <__assert_func>
        // for loop
        mp_parse_node_struct_t *pns_comp_for2 = (mp_parse_node_struct_t*)pn_iter;
    90be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    90c0:	617b      	str	r3, [r7, #20]
        compile_node(comp, pns_comp_for2->nodes[1]);
    90c2:	697b      	ldr	r3, [r7, #20]
    90c4:	68db      	ldr	r3, [r3, #12]
    90c6:	4619      	mov	r1, r3
    90c8:	68f8      	ldr	r0, [r7, #12]
    90ca:	f7ff fdd4 	bl	8c76 <compile_node>
        EMIT_ARG(get_iter, true);
    90ce:	68fb      	ldr	r3, [r7, #12]
    90d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    90d2:	2101      	movs	r1, #1
    90d4:	4618      	mov	r0, r3
    90d6:	f001 fd54 	bl	ab82 <mp_emit_bc_get_iter>
        compile_scope_comp_iter(comp, pns_comp_for2, pn_inner_expr, for_depth + 1);
    90da:	683b      	ldr	r3, [r7, #0]
    90dc:	3301      	adds	r3, #1
    90de:	687a      	ldr	r2, [r7, #4]
    90e0:	6979      	ldr	r1, [r7, #20]
    90e2:	68f8      	ldr	r0, [r7, #12]
    90e4:	f7ff ff84 	bl	8ff0 <compile_scope_comp_iter>
    }

    EMIT_ARG(jump, l_top);
    90e8:	68fb      	ldr	r3, [r7, #12]
    90ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    90ec:	6a39      	ldr	r1, [r7, #32]
    90ee:	4618      	mov	r0, r3
    90f0:	f001 fc60 	bl	a9b4 <mp_emit_bc_jump>
    EMIT_ARG(label_assign, l_end);
    90f4:	68fb      	ldr	r3, [r7, #12]
    90f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    90f8:	69f9      	ldr	r1, [r7, #28]
    90fa:	4618      	mov	r0, r3
    90fc:	f001 f9d0 	bl	a4a0 <mp_emit_bc_label_assign>
    EMIT(for_iter_end);
    9100:	68fb      	ldr	r3, [r7, #12]
    9102:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    9104:	4618      	mov	r0, r3
    9106:	f001 fd6c 	bl	abe2 <mp_emit_bc_for_iter_end>
}
    910a:	bf00      	nop
    910c:	3728      	adds	r7, #40	; 0x28
    910e:	46bd      	mov	sp, r7
    9110:	bd80      	pop	{r7, pc}
    9112:	bf00      	nop
    9114:	0002264c 	.word	0x0002264c
    9118:	00022a20 	.word	0x00022a20
    911c:	00021c60 	.word	0x00021c60

00009120 <check_for_doc_string>:

STATIC void check_for_doc_string(compiler_t *comp, mp_parse_node_t pn) {
    9120:	b480      	push	{r7}
    9122:	b083      	sub	sp, #12
    9124:	af00      	add	r7, sp, #0
    9126:	6078      	str	r0, [r7, #4]
    9128:	6039      	str	r1, [r7, #0]
    }
#else
    (void)comp;
    (void)pn;
#endif
}
    912a:	bf00      	nop
    912c:	370c      	adds	r7, #12
    912e:	46bd      	mov	sp, r7
    9130:	f85d 7b04 	ldr.w	r7, [sp], #4
    9134:	4770      	bx	lr

00009136 <compile_scope>:

STATIC void compile_scope(compiler_t *comp, scope_t *scope, pass_kind_t pass) {
    9136:	b580      	push	{r7, lr}
    9138:	b08c      	sub	sp, #48	; 0x30
    913a:	af00      	add	r7, sp, #0
    913c:	60f8      	str	r0, [r7, #12]
    913e:	60b9      	str	r1, [r7, #8]
    9140:	607a      	str	r2, [r7, #4]
    comp->pass = pass;
    9142:	687b      	ldr	r3, [r7, #4]
    9144:	b2da      	uxtb	r2, r3
    9146:	68fb      	ldr	r3, [r7, #12]
    9148:	715a      	strb	r2, [r3, #5]
    comp->scope_cur = scope;
    914a:	68fb      	ldr	r3, [r7, #12]
    914c:	68ba      	ldr	r2, [r7, #8]
    914e:	625a      	str	r2, [r3, #36]	; 0x24
    comp->next_label = 0;
    9150:	68fb      	ldr	r3, [r7, #12]
    9152:	2200      	movs	r2, #0
    9154:	611a      	str	r2, [r3, #16]
    EMIT_ARG(start_pass, pass, scope);
    9156:	68fb      	ldr	r3, [r7, #12]
    9158:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    915a:	68ba      	ldr	r2, [r7, #8]
    915c:	6879      	ldr	r1, [r7, #4]
    915e:	4618      	mov	r0, r3
    9160:	f000 ffc1 	bl	a0e6 <mp_emit_bc_start_pass>
    reserve_labels_for_native(comp, 6); // used by native's start_pass

    if (comp->pass == MP_PASS_SCOPE) {
    9164:	68fb      	ldr	r3, [r7, #12]
    9166:	795b      	ldrb	r3, [r3, #5]
    9168:	2b01      	cmp	r3, #1
    916a:	d105      	bne.n	9178 <compile_scope+0x42>
        // reset maximum stack sizes in scope
        // they will be computed in this first pass
        scope->stack_size = 0;
    916c:	68bb      	ldr	r3, [r7, #8]
    916e:	2200      	movs	r2, #0
    9170:	849a      	strh	r2, [r3, #36]	; 0x24
        scope->exc_stack_size = 0;
    9172:	68bb      	ldr	r3, [r7, #8]
    9174:	2200      	movs	r2, #0
    9176:	84da      	strh	r2, [r3, #38]	; 0x26
    }

    // compile
    if (MP_PARSE_NODE_IS_STRUCT_KIND(scope->pn, PN_eval_input)) {
    9178:	68bb      	ldr	r3, [r7, #8]
    917a:	68db      	ldr	r3, [r3, #12]
    917c:	2b00      	cmp	r3, #0
    917e:	d025      	beq.n	91cc <compile_scope+0x96>
    9180:	68bb      	ldr	r3, [r7, #8]
    9182:	68db      	ldr	r3, [r3, #12]
    9184:	f003 0303 	and.w	r3, r3, #3
    9188:	2b00      	cmp	r3, #0
    918a:	d11f      	bne.n	91cc <compile_scope+0x96>
    918c:	68bb      	ldr	r3, [r7, #8]
    918e:	68db      	ldr	r3, [r3, #12]
    9190:	685b      	ldr	r3, [r3, #4]
    9192:	b2db      	uxtb	r3, r3
    9194:	2b38      	cmp	r3, #56	; 0x38
    9196:	d119      	bne.n	91cc <compile_scope+0x96>
        assert(scope->kind == SCOPE_MODULE);
    9198:	68bb      	ldr	r3, [r7, #8]
    919a:	681b      	ldr	r3, [r3, #0]
    919c:	2b00      	cmp	r3, #0
    919e:	d006      	beq.n	91ae <compile_scope+0x78>
    91a0:	4b9d      	ldr	r3, [pc, #628]	; (9418 <compile_scope+0x2e2>)
    91a2:	4a9e      	ldr	r2, [pc, #632]	; (941c <compile_scope+0x2e6>)
    91a4:	f640 3194 	movw	r1, #2964	; 0xb94
    91a8:	489d      	ldr	r0, [pc, #628]	; (9420 <compile_scope+0x2ea>)
    91aa:	f013 fe99 	bl	1cee0 <__assert_func>
        mp_parse_node_struct_t *pns = (mp_parse_node_struct_t*)scope->pn;
    91ae:	68bb      	ldr	r3, [r7, #8]
    91b0:	68db      	ldr	r3, [r3, #12]
    91b2:	62fb      	str	r3, [r7, #44]	; 0x2c
        compile_node(comp, pns->nodes[0]); // compile the expression
    91b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    91b6:	689b      	ldr	r3, [r3, #8]
    91b8:	4619      	mov	r1, r3
    91ba:	68f8      	ldr	r0, [r7, #12]
    91bc:	f7ff fd5b 	bl	8c76 <compile_node>
        EMIT(return_value);
    91c0:	68fb      	ldr	r3, [r7, #12]
    91c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    91c4:	4618      	mov	r0, r3
    91c6:	f001 fee0 	bl	af8a <mp_emit_bc_return_value>
    if (MP_PARSE_NODE_IS_STRUCT_KIND(scope->pn, PN_eval_input)) {
    91ca:	e1fa      	b.n	95c2 <compile_scope+0x48c>
    } else if (scope->kind == SCOPE_MODULE) {
    91cc:	68bb      	ldr	r3, [r7, #8]
    91ce:	681b      	ldr	r3, [r3, #0]
    91d0:	2b00      	cmp	r3, #0
    91d2:	d11b      	bne.n	920c <compile_scope+0xd6>
        if (!comp->is_repl) {
    91d4:	68fb      	ldr	r3, [r7, #12]
    91d6:	791b      	ldrb	r3, [r3, #4]
    91d8:	2b00      	cmp	r3, #0
    91da:	d105      	bne.n	91e8 <compile_scope+0xb2>
            check_for_doc_string(comp, scope->pn);
    91dc:	68bb      	ldr	r3, [r7, #8]
    91de:	68db      	ldr	r3, [r3, #12]
    91e0:	4619      	mov	r1, r3
    91e2:	68f8      	ldr	r0, [r7, #12]
    91e4:	f7ff ff9c 	bl	9120 <check_for_doc_string>
        }
        compile_node(comp, scope->pn);
    91e8:	68bb      	ldr	r3, [r7, #8]
    91ea:	68db      	ldr	r3, [r3, #12]
    91ec:	4619      	mov	r1, r3
    91ee:	68f8      	ldr	r0, [r7, #12]
    91f0:	f7ff fd41 	bl	8c76 <compile_node>
        EMIT_ARG(load_const_tok, MP_TOKEN_KW_NONE);
    91f4:	68fb      	ldr	r3, [r7, #12]
    91f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    91f8:	210e      	movs	r1, #14
    91fa:	4618      	mov	r0, r3
    91fc:	f001 f9ce 	bl	a59c <mp_emit_bc_load_const_tok>
        EMIT(return_value);
    9200:	68fb      	ldr	r3, [r7, #12]
    9202:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    9204:	4618      	mov	r0, r3
    9206:	f001 fec0 	bl	af8a <mp_emit_bc_return_value>
    920a:	e1da      	b.n	95c2 <compile_scope+0x48c>
    } else if (scope->kind == SCOPE_FUNCTION) {
    920c:	68bb      	ldr	r3, [r7, #8]
    920e:	681b      	ldr	r3, [r3, #0]
    9210:	2b07      	cmp	r3, #7
    9212:	d14b      	bne.n	92ac <compile_scope+0x176>
        assert(MP_PARSE_NODE_IS_STRUCT(scope->pn));
    9214:	68bb      	ldr	r3, [r7, #8]
    9216:	68db      	ldr	r3, [r3, #12]
    9218:	2b00      	cmp	r3, #0
    921a:	d005      	beq.n	9228 <compile_scope+0xf2>
    921c:	68bb      	ldr	r3, [r7, #8]
    921e:	68db      	ldr	r3, [r3, #12]
    9220:	f003 0303 	and.w	r3, r3, #3
    9224:	2b00      	cmp	r3, #0
    9226:	d006      	beq.n	9236 <compile_scope+0x100>
    9228:	4b7e      	ldr	r3, [pc, #504]	; (9424 <compile_scope+0x2ee>)
    922a:	4a7c      	ldr	r2, [pc, #496]	; (941c <compile_scope+0x2e6>)
    922c:	f44f 613a 	mov.w	r1, #2976	; 0xba0
    9230:	487b      	ldr	r0, [pc, #492]	; (9420 <compile_scope+0x2ea>)
    9232:	f013 fe55 	bl	1cee0 <__assert_func>
        mp_parse_node_struct_t *pns = (mp_parse_node_struct_t*)scope->pn;
    9236:	68bb      	ldr	r3, [r7, #8]
    9238:	68db      	ldr	r3, [r3, #12]
    923a:	62bb      	str	r3, [r7, #40]	; 0x28
        assert(MP_PARSE_NODE_STRUCT_KIND(pns) == PN_funcdef);
    923c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    923e:	685b      	ldr	r3, [r3, #4]
    9240:	b2db      	uxtb	r3, r3
    9242:	2b03      	cmp	r3, #3
    9244:	d006      	beq.n	9254 <compile_scope+0x11e>
    9246:	4b78      	ldr	r3, [pc, #480]	; (9428 <compile_scope+0x2f2>)
    9248:	4a74      	ldr	r2, [pc, #464]	; (941c <compile_scope+0x2e6>)
    924a:	f640 31a2 	movw	r1, #2978	; 0xba2
    924e:	4874      	ldr	r0, [pc, #464]	; (9420 <compile_scope+0x2ea>)
    9250:	f013 fe46 	bl	1cee0 <__assert_func>

        // work out number of parameters, keywords and default parameters, and add them to the id_info array
        // must be done before compiling the body so that arguments are numbered first (for LOAD_FAST etc)
        if (comp->pass == MP_PASS_SCOPE) {
    9254:	68fb      	ldr	r3, [r7, #12]
    9256:	795b      	ldrb	r3, [r3, #5]
    9258:	2b01      	cmp	r3, #1
    925a:	d109      	bne.n	9270 <compile_scope+0x13a>
            comp->have_star = false;
    925c:	68fb      	ldr	r3, [r7, #12]
    925e:	2200      	movs	r2, #0
    9260:	719a      	strb	r2, [r3, #6]
            apply_to_single_or_list(comp, pns->nodes[1], PN_typedargslist, compile_scope_func_param);
    9262:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9264:	68d9      	ldr	r1, [r3, #12]
    9266:	4b71      	ldr	r3, [pc, #452]	; (942c <compile_scope+0x2f6>)
    9268:	223e      	movs	r2, #62	; 0x3e
    926a:	68f8      	ldr	r0, [r7, #12]
    926c:	f7fb ffc9 	bl	5202 <apply_to_single_or_list>
                scope->scope_flags |= compile_viper_type_annotation(comp, pns->nodes[2]) << MP_SCOPE_FLAG_VIPERRET_POS;
            }
            #endif // MICROPY_EMIT_NATIVE
        }

        compile_node(comp, pns->nodes[3]); // 3 is function body
    9270:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9272:	695b      	ldr	r3, [r3, #20]
    9274:	4619      	mov	r1, r3
    9276:	68f8      	ldr	r0, [r7, #12]
    9278:	f7ff fcfd 	bl	8c76 <compile_node>
        // emit return if it wasn't the last opcode
        if (!EMIT(last_emit_was_return_value)) {
    927c:	68fb      	ldr	r3, [r7, #12]
    927e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    9280:	4618      	mov	r0, r3
    9282:	f001 f8ad 	bl	a3e0 <mp_emit_bc_last_emit_was_return_value>
    9286:	4603      	mov	r3, r0
    9288:	f083 0301 	eor.w	r3, r3, #1
    928c:	b2db      	uxtb	r3, r3
    928e:	2b00      	cmp	r3, #0
    9290:	f000 8197 	beq.w	95c2 <compile_scope+0x48c>
            EMIT_ARG(load_const_tok, MP_TOKEN_KW_NONE);
    9294:	68fb      	ldr	r3, [r7, #12]
    9296:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    9298:	210e      	movs	r1, #14
    929a:	4618      	mov	r0, r3
    929c:	f001 f97e 	bl	a59c <mp_emit_bc_load_const_tok>
            EMIT(return_value);
    92a0:	68fb      	ldr	r3, [r7, #12]
    92a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    92a4:	4618      	mov	r0, r3
    92a6:	f001 fe70 	bl	af8a <mp_emit_bc_return_value>
    92aa:	e18a      	b.n	95c2 <compile_scope+0x48c>
        }
    } else if (scope->kind == SCOPE_LAMBDA) {
    92ac:	68bb      	ldr	r3, [r7, #8]
    92ae:	681b      	ldr	r3, [r3, #0]
    92b0:	2b02      	cmp	r3, #2
    92b2:	d14a      	bne.n	934a <compile_scope+0x214>
        assert(MP_PARSE_NODE_IS_STRUCT(scope->pn));
    92b4:	68bb      	ldr	r3, [r7, #8]
    92b6:	68db      	ldr	r3, [r3, #12]
    92b8:	2b00      	cmp	r3, #0
    92ba:	d005      	beq.n	92c8 <compile_scope+0x192>
    92bc:	68bb      	ldr	r3, [r7, #8]
    92be:	68db      	ldr	r3, [r3, #12]
    92c0:	f003 0303 	and.w	r3, r3, #3
    92c4:	2b00      	cmp	r3, #0
    92c6:	d006      	beq.n	92d6 <compile_scope+0x1a0>
    92c8:	4b56      	ldr	r3, [pc, #344]	; (9424 <compile_scope+0x2ee>)
    92ca:	4a54      	ldr	r2, [pc, #336]	; (941c <compile_scope+0x2e6>)
    92cc:	f640 31b9 	movw	r1, #3001	; 0xbb9
    92d0:	4853      	ldr	r0, [pc, #332]	; (9420 <compile_scope+0x2ea>)
    92d2:	f013 fe05 	bl	1cee0 <__assert_func>
        mp_parse_node_struct_t *pns = (mp_parse_node_struct_t*)scope->pn;
    92d6:	68bb      	ldr	r3, [r7, #8]
    92d8:	68db      	ldr	r3, [r3, #12]
    92da:	627b      	str	r3, [r7, #36]	; 0x24
        assert(MP_PARSE_NODE_STRUCT_NUM_NODES(pns) == 3);
    92dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    92de:	685b      	ldr	r3, [r3, #4]
    92e0:	0a1b      	lsrs	r3, r3, #8
    92e2:	2b03      	cmp	r3, #3
    92e4:	d006      	beq.n	92f4 <compile_scope+0x1be>
    92e6:	4b52      	ldr	r3, [pc, #328]	; (9430 <compile_scope+0x2fa>)
    92e8:	4a4c      	ldr	r2, [pc, #304]	; (941c <compile_scope+0x2e6>)
    92ea:	f640 31bb 	movw	r1, #3003	; 0xbbb
    92ee:	484c      	ldr	r0, [pc, #304]	; (9420 <compile_scope+0x2ea>)
    92f0:	f013 fdf6 	bl	1cee0 <__assert_func>

        // work out number of parameters, keywords and default parameters, and add them to the id_info array
        // must be done before compiling the body so that arguments are numbered first (for LOAD_FAST etc)
        if (comp->pass == MP_PASS_SCOPE) {
    92f4:	68fb      	ldr	r3, [r7, #12]
    92f6:	795b      	ldrb	r3, [r3, #5]
    92f8:	2b01      	cmp	r3, #1
    92fa:	d109      	bne.n	9310 <compile_scope+0x1da>
            comp->have_star = false;
    92fc:	68fb      	ldr	r3, [r7, #12]
    92fe:	2200      	movs	r2, #0
    9300:	719a      	strb	r2, [r3, #6]
            apply_to_single_or_list(comp, pns->nodes[0], PN_varargslist, compile_scope_lambda_param);
    9302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    9304:	6899      	ldr	r1, [r3, #8]
    9306:	4b4b      	ldr	r3, [pc, #300]	; (9434 <compile_scope+0x2fe>)
    9308:	2246      	movs	r2, #70	; 0x46
    930a:	68f8      	ldr	r0, [r7, #12]
    930c:	f7fb ff79 	bl	5202 <apply_to_single_or_list>
        }

        compile_node(comp, pns->nodes[1]); // 1 is lambda body
    9310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    9312:	68db      	ldr	r3, [r3, #12]
    9314:	4619      	mov	r1, r3
    9316:	68f8      	ldr	r0, [r7, #12]
    9318:	f7ff fcad 	bl	8c76 <compile_node>

        // if the lambda is a generator, then we return None, not the result of the expression of the lambda
        if (scope->scope_flags & MP_SCOPE_FLAG_GENERATOR) {
    931c:	68bb      	ldr	r3, [r7, #8]
    931e:	8b1b      	ldrh	r3, [r3, #24]
    9320:	f003 0304 	and.w	r3, r3, #4
    9324:	2b00      	cmp	r3, #0
    9326:	d00a      	beq.n	933e <compile_scope+0x208>
            EMIT(pop_top);
    9328:	68fb      	ldr	r3, [r7, #12]
    932a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    932c:	4618      	mov	r0, r3
    932e:	f001 fb10 	bl	a952 <mp_emit_bc_pop_top>
            EMIT_ARG(load_const_tok, MP_TOKEN_KW_NONE);
    9332:	68fb      	ldr	r3, [r7, #12]
    9334:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    9336:	210e      	movs	r1, #14
    9338:	4618      	mov	r0, r3
    933a:	f001 f92f 	bl	a59c <mp_emit_bc_load_const_tok>
        }
        EMIT(return_value);
    933e:	68fb      	ldr	r3, [r7, #12]
    9340:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    9342:	4618      	mov	r0, r3
    9344:	f001 fe21 	bl	af8a <mp_emit_bc_return_value>
    9348:	e13b      	b.n	95c2 <compile_scope+0x48c>
    } else if (scope->kind == SCOPE_LIST_COMP || scope->kind == SCOPE_DICT_COMP || scope->kind == SCOPE_SET_COMP || scope->kind == SCOPE_GEN_EXPR) {
    934a:	68bb      	ldr	r3, [r7, #8]
    934c:	681b      	ldr	r3, [r3, #0]
    934e:	2b03      	cmp	r3, #3
    9350:	d00c      	beq.n	936c <compile_scope+0x236>
    9352:	68bb      	ldr	r3, [r7, #8]
    9354:	681b      	ldr	r3, [r3, #0]
    9356:	2b04      	cmp	r3, #4
    9358:	d008      	beq.n	936c <compile_scope+0x236>
    935a:	68bb      	ldr	r3, [r7, #8]
    935c:	681b      	ldr	r3, [r3, #0]
    935e:	2b05      	cmp	r3, #5
    9360:	d004      	beq.n	936c <compile_scope+0x236>
    9362:	68bb      	ldr	r3, [r7, #8]
    9364:	681b      	ldr	r3, [r3, #0]
    9366:	2b06      	cmp	r3, #6
    9368:	f040 80ae 	bne.w	94c8 <compile_scope+0x392>
        // a bit of a hack at the moment

        assert(MP_PARSE_NODE_IS_STRUCT(scope->pn));
    936c:	68bb      	ldr	r3, [r7, #8]
    936e:	68db      	ldr	r3, [r3, #12]
    9370:	2b00      	cmp	r3, #0
    9372:	d005      	beq.n	9380 <compile_scope+0x24a>
    9374:	68bb      	ldr	r3, [r7, #8]
    9376:	68db      	ldr	r3, [r3, #12]
    9378:	f003 0303 	and.w	r3, r3, #3
    937c:	2b00      	cmp	r3, #0
    937e:	d006      	beq.n	938e <compile_scope+0x258>
    9380:	4b28      	ldr	r3, [pc, #160]	; (9424 <compile_scope+0x2ee>)
    9382:	4a26      	ldr	r2, [pc, #152]	; (941c <compile_scope+0x2e6>)
    9384:	f640 31cf 	movw	r1, #3023	; 0xbcf
    9388:	4825      	ldr	r0, [pc, #148]	; (9420 <compile_scope+0x2ea>)
    938a:	f013 fda9 	bl	1cee0 <__assert_func>
        mp_parse_node_struct_t *pns = (mp_parse_node_struct_t*)scope->pn;
    938e:	68bb      	ldr	r3, [r7, #8]
    9390:	68db      	ldr	r3, [r3, #12]
    9392:	61bb      	str	r3, [r7, #24]
        assert(MP_PARSE_NODE_STRUCT_NUM_NODES(pns) == 2);
    9394:	69bb      	ldr	r3, [r7, #24]
    9396:	685b      	ldr	r3, [r3, #4]
    9398:	0a1b      	lsrs	r3, r3, #8
    939a:	2b02      	cmp	r3, #2
    939c:	d006      	beq.n	93ac <compile_scope+0x276>
    939e:	4b26      	ldr	r3, [pc, #152]	; (9438 <compile_scope+0x302>)
    93a0:	4a1e      	ldr	r2, [pc, #120]	; (941c <compile_scope+0x2e6>)
    93a2:	f640 31d1 	movw	r1, #3025	; 0xbd1
    93a6:	481e      	ldr	r0, [pc, #120]	; (9420 <compile_scope+0x2ea>)
    93a8:	f013 fd9a 	bl	1cee0 <__assert_func>
        assert(MP_PARSE_NODE_IS_STRUCT_KIND(pns->nodes[1], PN_comp_for));
    93ac:	69bb      	ldr	r3, [r7, #24]
    93ae:	68db      	ldr	r3, [r3, #12]
    93b0:	2b00      	cmp	r3, #0
    93b2:	d00b      	beq.n	93cc <compile_scope+0x296>
    93b4:	69bb      	ldr	r3, [r7, #24]
    93b6:	68db      	ldr	r3, [r3, #12]
    93b8:	f003 0303 	and.w	r3, r3, #3
    93bc:	2b00      	cmp	r3, #0
    93be:	d105      	bne.n	93cc <compile_scope+0x296>
    93c0:	69bb      	ldr	r3, [r7, #24]
    93c2:	68db      	ldr	r3, [r3, #12]
    93c4:	685b      	ldr	r3, [r3, #4]
    93c6:	b2db      	uxtb	r3, r3
    93c8:	2b9f      	cmp	r3, #159	; 0x9f
    93ca:	d006      	beq.n	93da <compile_scope+0x2a4>
    93cc:	4b1b      	ldr	r3, [pc, #108]	; (943c <compile_scope+0x306>)
    93ce:	4a13      	ldr	r2, [pc, #76]	; (941c <compile_scope+0x2e6>)
    93d0:	f640 31d2 	movw	r1, #3026	; 0xbd2
    93d4:	4812      	ldr	r0, [pc, #72]	; (9420 <compile_scope+0x2ea>)
    93d6:	f013 fd83 	bl	1cee0 <__assert_func>
        mp_parse_node_struct_t *pns_comp_for = (mp_parse_node_struct_t*)pns->nodes[1];
    93da:	69bb      	ldr	r3, [r7, #24]
    93dc:	68db      	ldr	r3, [r3, #12]
    93de:	617b      	str	r3, [r7, #20]

        // We need a unique name for the comprehension argument (the iterator).
        // CPython uses .0, but we should be able to use anything that won't
        // clash with a user defined variable.  Best to use an existing qstr,
        // so we use the blank qstr.
        qstr qstr_arg = MP_QSTR_;
    93e0:	2301      	movs	r3, #1
    93e2:	613b      	str	r3, [r7, #16]
        if (comp->pass == MP_PASS_SCOPE) {
    93e4:	68fb      	ldr	r3, [r7, #12]
    93e6:	795b      	ldrb	r3, [r3, #5]
    93e8:	2b01      	cmp	r3, #1
    93ea:	d109      	bne.n	9400 <compile_scope+0x2ca>
            scope_find_or_add_id(comp->scope_cur, qstr_arg, ID_INFO_KIND_LOCAL);
    93ec:	68fb      	ldr	r3, [r7, #12]
    93ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    93f0:	2203      	movs	r2, #3
    93f2:	6939      	ldr	r1, [r7, #16]
    93f4:	4618      	mov	r0, r3
    93f6:	f7fb fd11 	bl	4e1c <scope_find_or_add_id>
            scope->num_pos_args = 1;
    93fa:	68bb      	ldr	r3, [r7, #8]
    93fc:	2201      	movs	r2, #1
    93fe:	839a      	strh	r2, [r3, #28]
        }

        if (scope->kind == SCOPE_LIST_COMP) {
    9400:	68bb      	ldr	r3, [r7, #8]
    9402:	681b      	ldr	r3, [r3, #0]
    9404:	2b03      	cmp	r3, #3
    9406:	d11b      	bne.n	9440 <compile_scope+0x30a>
            EMIT_ARG(build, 0, MP_EMIT_BUILD_LIST);
    9408:	68fb      	ldr	r3, [r7, #12]
    940a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    940c:	2201      	movs	r2, #1
    940e:	2100      	movs	r1, #0
    9410:	4618      	mov	r0, r3
    9412:	f001 fc5a 	bl	acca <mp_emit_bc_build>
    9416:	e01e      	b.n	9456 <compile_scope+0x320>
    9418:	00022698 	.word	0x00022698
    941c:	00022a38 	.word	0x00022a38
    9420:	00021c60 	.word	0x00021c60
    9424:	000226b4 	.word	0x000226b4
    9428:	000226d8 	.word	0x000226d8
    942c:	00008fad 	.word	0x00008fad
    9430:	00022708 	.word	0x00022708
    9434:	00008fcf 	.word	0x00008fcf
    9438:	000223a8 	.word	0x000223a8
    943c:	000223d4 	.word	0x000223d4
        } else if (scope->kind == SCOPE_DICT_COMP) {
    9440:	68bb      	ldr	r3, [r7, #8]
    9442:	681b      	ldr	r3, [r3, #0]
    9444:	2b04      	cmp	r3, #4
    9446:	d106      	bne.n	9456 <compile_scope+0x320>
            EMIT_ARG(build, 0, MP_EMIT_BUILD_MAP);
    9448:	68fb      	ldr	r3, [r7, #12]
    944a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    944c:	2203      	movs	r2, #3
    944e:	2100      	movs	r1, #0
    9450:	4618      	mov	r0, r3
    9452:	f001 fc3a 	bl	acca <mp_emit_bc_build>
        #endif
        }

        // There are 4 slots on the stack for the iterator, and the first one is
        // NULL to indicate that the second one points to the iterator object.
        if (scope->kind == SCOPE_GEN_EXPR) {
    9456:	68bb      	ldr	r3, [r7, #8]
    9458:	681b      	ldr	r3, [r3, #0]
    945a:	2b06      	cmp	r3, #6
    945c:	d113      	bne.n	9486 <compile_scope+0x350>
            MP_STATIC_ASSERT(MP_OBJ_ITER_BUF_NSLOTS == 4);
            EMIT(load_null);
    945e:	68fb      	ldr	r3, [r7, #12]
    9460:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    9462:	4618      	mov	r0, r3
    9464:	f001 f91c 	bl	a6a0 <mp_emit_bc_load_null>
            compile_load_id(comp, qstr_arg);
    9468:	6939      	ldr	r1, [r7, #16]
    946a:	68f8      	ldr	r0, [r7, #12]
    946c:	f7fb ff31 	bl	52d2 <compile_load_id>
            EMIT(load_null);
    9470:	68fb      	ldr	r3, [r7, #12]
    9472:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    9474:	4618      	mov	r0, r3
    9476:	f001 f913 	bl	a6a0 <mp_emit_bc_load_null>
            EMIT(load_null);
    947a:	68fb      	ldr	r3, [r7, #12]
    947c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    947e:	4618      	mov	r0, r3
    9480:	f001 f90e 	bl	a6a0 <mp_emit_bc_load_null>
    9484:	e009      	b.n	949a <compile_scope+0x364>
        } else {
            compile_load_id(comp, qstr_arg);
    9486:	6939      	ldr	r1, [r7, #16]
    9488:	68f8      	ldr	r0, [r7, #12]
    948a:	f7fb ff22 	bl	52d2 <compile_load_id>
            EMIT_ARG(get_iter, true);
    948e:	68fb      	ldr	r3, [r7, #12]
    9490:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    9492:	2101      	movs	r1, #1
    9494:	4618      	mov	r0, r3
    9496:	f001 fb74 	bl	ab82 <mp_emit_bc_get_iter>
        }

        compile_scope_comp_iter(comp, pns_comp_for, pns->nodes[0], 0);
    949a:	69bb      	ldr	r3, [r7, #24]
    949c:	689a      	ldr	r2, [r3, #8]
    949e:	2300      	movs	r3, #0
    94a0:	6979      	ldr	r1, [r7, #20]
    94a2:	68f8      	ldr	r0, [r7, #12]
    94a4:	f7ff fda4 	bl	8ff0 <compile_scope_comp_iter>

        if (scope->kind == SCOPE_GEN_EXPR) {
    94a8:	68bb      	ldr	r3, [r7, #8]
    94aa:	681b      	ldr	r3, [r3, #0]
    94ac:	2b06      	cmp	r3, #6
    94ae:	d105      	bne.n	94bc <compile_scope+0x386>
            EMIT_ARG(load_const_tok, MP_TOKEN_KW_NONE);
    94b0:	68fb      	ldr	r3, [r7, #12]
    94b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    94b4:	210e      	movs	r1, #14
    94b6:	4618      	mov	r0, r3
    94b8:	f001 f870 	bl	a59c <mp_emit_bc_load_const_tok>
        }
        EMIT(return_value);
    94bc:	68fb      	ldr	r3, [r7, #12]
    94be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    94c0:	4618      	mov	r0, r3
    94c2:	f001 fd62 	bl	af8a <mp_emit_bc_return_value>
    } else if (scope->kind == SCOPE_LIST_COMP || scope->kind == SCOPE_DICT_COMP || scope->kind == SCOPE_SET_COMP || scope->kind == SCOPE_GEN_EXPR) {
    94c6:	e07c      	b.n	95c2 <compile_scope+0x48c>
    } else {
        assert(scope->kind == SCOPE_CLASS);
    94c8:	68bb      	ldr	r3, [r7, #8]
    94ca:	681b      	ldr	r3, [r3, #0]
    94cc:	2b01      	cmp	r3, #1
    94ce:	d006      	beq.n	94de <compile_scope+0x3a8>
    94d0:	4b46      	ldr	r3, [pc, #280]	; (95ec <compile_scope+0x4b6>)
    94d2:	4a47      	ldr	r2, [pc, #284]	; (95f0 <compile_scope+0x4ba>)
    94d4:	f640 31fd 	movw	r1, #3069	; 0xbfd
    94d8:	4846      	ldr	r0, [pc, #280]	; (95f4 <compile_scope+0x4be>)
    94da:	f013 fd01 	bl	1cee0 <__assert_func>
        assert(MP_PARSE_NODE_IS_STRUCT(scope->pn));
    94de:	68bb      	ldr	r3, [r7, #8]
    94e0:	68db      	ldr	r3, [r3, #12]
    94e2:	2b00      	cmp	r3, #0
    94e4:	d005      	beq.n	94f2 <compile_scope+0x3bc>
    94e6:	68bb      	ldr	r3, [r7, #8]
    94e8:	68db      	ldr	r3, [r3, #12]
    94ea:	f003 0303 	and.w	r3, r3, #3
    94ee:	2b00      	cmp	r3, #0
    94f0:	d006      	beq.n	9500 <compile_scope+0x3ca>
    94f2:	4b41      	ldr	r3, [pc, #260]	; (95f8 <compile_scope+0x4c2>)
    94f4:	4a3e      	ldr	r2, [pc, #248]	; (95f0 <compile_scope+0x4ba>)
    94f6:	f640 31fe 	movw	r1, #3070	; 0xbfe
    94fa:	483e      	ldr	r0, [pc, #248]	; (95f4 <compile_scope+0x4be>)
    94fc:	f013 fcf0 	bl	1cee0 <__assert_func>
        mp_parse_node_struct_t *pns = (mp_parse_node_struct_t*)scope->pn;
    9500:	68bb      	ldr	r3, [r7, #8]
    9502:	68db      	ldr	r3, [r3, #12]
    9504:	623b      	str	r3, [r7, #32]
        assert(MP_PARSE_NODE_STRUCT_KIND(pns) == PN_classdef);
    9506:	6a3b      	ldr	r3, [r7, #32]
    9508:	685b      	ldr	r3, [r3, #4]
    950a:	b2db      	uxtb	r3, r3
    950c:	2b33      	cmp	r3, #51	; 0x33
    950e:	d006      	beq.n	951e <compile_scope+0x3e8>
    9510:	4b3a      	ldr	r3, [pc, #232]	; (95fc <compile_scope+0x4c6>)
    9512:	4a37      	ldr	r2, [pc, #220]	; (95f0 <compile_scope+0x4ba>)
    9514:	f44f 6140 	mov.w	r1, #3072	; 0xc00
    9518:	4836      	ldr	r0, [pc, #216]	; (95f4 <compile_scope+0x4be>)
    951a:	f013 fce1 	bl	1cee0 <__assert_func>

        if (comp->pass == MP_PASS_SCOPE) {
    951e:	68fb      	ldr	r3, [r7, #12]
    9520:	795b      	ldrb	r3, [r3, #5]
    9522:	2b01      	cmp	r3, #1
    9524:	d104      	bne.n	9530 <compile_scope+0x3fa>
            scope_find_or_add_id(scope, MP_QSTR___class__, ID_INFO_KIND_LOCAL);
    9526:	2203      	movs	r2, #3
    9528:	2106      	movs	r1, #6
    952a:	68b8      	ldr	r0, [r7, #8]
    952c:	f7fb fc76 	bl	4e1c <scope_find_or_add_id>
        }

        compile_load_id(comp, MP_QSTR___name__);
    9530:	211c      	movs	r1, #28
    9532:	68f8      	ldr	r0, [r7, #12]
    9534:	f7fb fecd 	bl	52d2 <compile_load_id>
        compile_store_id(comp, MP_QSTR___module__);
    9538:	211b      	movs	r1, #27
    953a:	68f8      	ldr	r0, [r7, #12]
    953c:	f7fb fee8 	bl	5310 <compile_store_id>
        EMIT_ARG(load_const_str, MP_PARSE_NODE_LEAF_ARG(pns->nodes[0])); // 0 is class name
    9540:	68fb      	ldr	r3, [r7, #12]
    9542:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    9544:	6a3b      	ldr	r3, [r7, #32]
    9546:	689b      	ldr	r3, [r3, #8]
    9548:	091b      	lsrs	r3, r3, #4
    954a:	4619      	mov	r1, r3
    954c:	4610      	mov	r0, r2
    954e:	f001 f883 	bl	a658 <mp_emit_bc_load_const_str>
        compile_store_id(comp, MP_QSTR___qualname__);
    9552:	2120      	movs	r1, #32
    9554:	68f8      	ldr	r0, [r7, #12]
    9556:	f7fb fedb 	bl	5310 <compile_store_id>

        check_for_doc_string(comp, pns->nodes[2]);
    955a:	6a3b      	ldr	r3, [r7, #32]
    955c:	691b      	ldr	r3, [r3, #16]
    955e:	4619      	mov	r1, r3
    9560:	68f8      	ldr	r0, [r7, #12]
    9562:	f7ff fddd 	bl	9120 <check_for_doc_string>
        compile_node(comp, pns->nodes[2]); // 2 is class body
    9566:	6a3b      	ldr	r3, [r7, #32]
    9568:	691b      	ldr	r3, [r3, #16]
    956a:	4619      	mov	r1, r3
    956c:	68f8      	ldr	r0, [r7, #12]
    956e:	f7ff fb82 	bl	8c76 <compile_node>

        id_info_t *id = scope_find(scope, MP_QSTR___class__);
    9572:	2106      	movs	r1, #6
    9574:	68b8      	ldr	r0, [r7, #8]
    9576:	f7fb fc97 	bl	4ea8 <scope_find>
    957a:	61f8      	str	r0, [r7, #28]
        assert(id != NULL);
    957c:	69fb      	ldr	r3, [r7, #28]
    957e:	2b00      	cmp	r3, #0
    9580:	d106      	bne.n	9590 <compile_scope+0x45a>
    9582:	4b1f      	ldr	r3, [pc, #124]	; (9600 <compile_scope+0x4ca>)
    9584:	4a1a      	ldr	r2, [pc, #104]	; (95f0 <compile_scope+0x4ba>)
    9586:	f640 410f 	movw	r1, #3087	; 0xc0f
    958a:	481a      	ldr	r0, [pc, #104]	; (95f4 <compile_scope+0x4be>)
    958c:	f013 fca8 	bl	1cee0 <__assert_func>
        if (id->kind == ID_INFO_KIND_LOCAL) {
    9590:	69fb      	ldr	r3, [r7, #28]
    9592:	781b      	ldrb	r3, [r3, #0]
    9594:	2b03      	cmp	r3, #3
    9596:	d106      	bne.n	95a6 <compile_scope+0x470>
            EMIT_ARG(load_const_tok, MP_TOKEN_KW_NONE);
    9598:	68fb      	ldr	r3, [r7, #12]
    959a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    959c:	210e      	movs	r1, #14
    959e:	4618      	mov	r0, r3
    95a0:	f000 fffc 	bl	a59c <mp_emit_bc_load_const_tok>
    95a4:	e008      	b.n	95b8 <compile_scope+0x482>
        } else {
            EMIT_LOAD_FAST(MP_QSTR___class__, id->local_num);
    95a6:	68fb      	ldr	r3, [r7, #12]
    95a8:	6a98      	ldr	r0, [r3, #40]	; 0x28
    95aa:	69fb      	ldr	r3, [r7, #28]
    95ac:	885b      	ldrh	r3, [r3, #2]
    95ae:	461a      	mov	r2, r3
    95b0:	2300      	movs	r3, #0
    95b2:	2106      	movs	r1, #6
    95b4:	f001 f884 	bl	a6c0 <mp_emit_bc_load_local>
        }
        EMIT(return_value);
    95b8:	68fb      	ldr	r3, [r7, #12]
    95ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    95bc:	4618      	mov	r0, r3
    95be:	f001 fce4 	bl	af8a <mp_emit_bc_return_value>
    }

    EMIT(end_pass);
    95c2:	68fb      	ldr	r3, [r7, #12]
    95c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    95c6:	4618      	mov	r0, r3
    95c8:	f000 fe8c 	bl	a2e4 <mp_emit_bc_end_pass>

    // make sure we match all the exception levels
    assert(comp->cur_except_level == 0);
    95cc:	68fb      	ldr	r3, [r7, #12]
    95ce:	8b9b      	ldrh	r3, [r3, #28]
    95d0:	2b00      	cmp	r3, #0
    95d2:	d006      	beq.n	95e2 <compile_scope+0x4ac>
    95d4:	4b0b      	ldr	r3, [pc, #44]	; (9604 <compile_scope+0x4ce>)
    95d6:	4a06      	ldr	r2, [pc, #24]	; (95f0 <compile_scope+0x4ba>)
    95d8:	f640 411b 	movw	r1, #3099	; 0xc1b
    95dc:	4805      	ldr	r0, [pc, #20]	; (95f4 <compile_scope+0x4be>)
    95de:	f013 fc7f 	bl	1cee0 <__assert_func>
}
    95e2:	bf00      	nop
    95e4:	3730      	adds	r7, #48	; 0x30
    95e6:	46bd      	mov	sp, r7
    95e8:	bd80      	pop	{r7, pc}
    95ea:	bf00      	nop
    95ec:	00022734 	.word	0x00022734
    95f0:	00022a38 	.word	0x00022a38
    95f4:	00021c60 	.word	0x00021c60
    95f8:	000226b4 	.word	0x000226b4
    95fc:	00022750 	.word	0x00022750
    9600:	00022780 	.word	0x00022780
    9604:	0002278c 	.word	0x0002278c

00009608 <scope_compute_things>:
        comp->compile_error_line = pns->source_line;
    }
}
#endif

STATIC void scope_compute_things(scope_t *scope) {
    9608:	b580      	push	{r7, lr}
    960a:	b092      	sub	sp, #72	; 0x48
    960c:	af00      	add	r7, sp, #0
    960e:	6078      	str	r0, [r7, #4]
    // in MicroPython we put the *x parameter after all other parameters (except **y)
    if (scope->scope_flags & MP_SCOPE_FLAG_VARARGS) {
    9610:	687b      	ldr	r3, [r7, #4]
    9612:	8b1b      	ldrh	r3, [r3, #24]
    9614:	f003 0301 	and.w	r3, r3, #1
    9618:	2b00      	cmp	r3, #0
    961a:	d03c      	beq.n	9696 <scope_compute_things+0x8e>
        id_info_t *id_param = NULL;
    961c:	2300      	movs	r3, #0
    961e:	647b      	str	r3, [r7, #68]	; 0x44
        for (int i = scope->id_info_len - 1; i >= 0; i--) {
    9620:	687b      	ldr	r3, [r7, #4]
    9622:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
    9624:	3b01      	subs	r3, #1
    9626:	643b      	str	r3, [r7, #64]	; 0x40
    9628:	e030      	b.n	968c <scope_compute_things+0x84>
            id_info_t *id = &scope->id_info[i];
    962a:	687b      	ldr	r3, [r7, #4]
    962c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    962e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    9630:	00db      	lsls	r3, r3, #3
    9632:	4413      	add	r3, r2
    9634:	627b      	str	r3, [r7, #36]	; 0x24
            if (id->flags & ID_FLAG_IS_STAR_PARAM) {
    9636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    9638:	785b      	ldrb	r3, [r3, #1]
    963a:	f003 0302 	and.w	r3, r3, #2
    963e:	2b00      	cmp	r3, #0
    9640:	d018      	beq.n	9674 <scope_compute_things+0x6c>
                if (id_param != NULL) {
    9642:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    9644:	2b00      	cmp	r3, #0
    9646:	d025      	beq.n	9694 <scope_compute_things+0x8c>
                    // swap star param with last param
                    id_info_t temp = *id_param; *id_param = *id; *id = temp;
    9648:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    964a:	f107 0308 	add.w	r3, r7, #8
    964e:	e892 0003 	ldmia.w	r2, {r0, r1}
    9652:	e883 0003 	stmia.w	r3, {r0, r1}
    9656:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    9658:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    965a:	e892 0003 	ldmia.w	r2, {r0, r1}
    965e:	e883 0003 	stmia.w	r3, {r0, r1}
    9662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    9664:	461a      	mov	r2, r3
    9666:	f107 0308 	add.w	r3, r7, #8
    966a:	e893 0003 	ldmia.w	r3, {r0, r1}
    966e:	e882 0003 	stmia.w	r2, {r0, r1}
                }
                break;
    9672:	e00f      	b.n	9694 <scope_compute_things+0x8c>
            } else if (id_param == NULL && id->flags == ID_FLAG_IS_PARAM) {
    9674:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    9676:	2b00      	cmp	r3, #0
    9678:	d105      	bne.n	9686 <scope_compute_things+0x7e>
    967a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    967c:	785b      	ldrb	r3, [r3, #1]
    967e:	2b01      	cmp	r3, #1
    9680:	d101      	bne.n	9686 <scope_compute_things+0x7e>
                id_param = id;
    9682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    9684:	647b      	str	r3, [r7, #68]	; 0x44
        for (int i = scope->id_info_len - 1; i >= 0; i--) {
    9686:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    9688:	3b01      	subs	r3, #1
    968a:	643b      	str	r3, [r7, #64]	; 0x40
    968c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    968e:	2b00      	cmp	r3, #0
    9690:	dacb      	bge.n	962a <scope_compute_things+0x22>
    9692:	e000      	b.n	9696 <scope_compute_things+0x8e>
                break;
    9694:	bf00      	nop
        }
    }

    // in functions, turn implicit globals into explicit globals
    // compute the index of each local
    scope->num_locals = 0;
    9696:	687b      	ldr	r3, [r7, #4]
    9698:	2200      	movs	r2, #0
    969a:	845a      	strh	r2, [r3, #34]	; 0x22
    for (int i = 0; i < scope->id_info_len; i++) {
    969c:	2300      	movs	r3, #0
    969e:	63fb      	str	r3, [r7, #60]	; 0x3c
    96a0:	e02f      	b.n	9702 <scope_compute_things+0xfa>
        id_info_t *id = &scope->id_info[i];
    96a2:	687b      	ldr	r3, [r7, #4]
    96a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    96a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    96a8:	00db      	lsls	r3, r3, #3
    96aa:	4413      	add	r3, r2
    96ac:	623b      	str	r3, [r7, #32]
        if (scope->kind == SCOPE_CLASS && id->qst == MP_QSTR___class__) {
    96ae:	687b      	ldr	r3, [r7, #4]
    96b0:	681b      	ldr	r3, [r3, #0]
    96b2:	2b01      	cmp	r3, #1
    96b4:	d103      	bne.n	96be <scope_compute_things+0xb6>
    96b6:	6a3b      	ldr	r3, [r7, #32]
    96b8:	685b      	ldr	r3, [r3, #4]
    96ba:	2b06      	cmp	r3, #6
    96bc:	d01d      	beq.n	96fa <scope_compute_things+0xf2>
            // __class__ is not counted as a local; if it's used then it becomes a ID_INFO_KIND_CELL
            continue;
        }
        if (SCOPE_IS_FUNC_LIKE(scope->kind) && id->kind == ID_INFO_KIND_GLOBAL_IMPLICIT) {
    96be:	687b      	ldr	r3, [r7, #4]
    96c0:	681b      	ldr	r3, [r3, #0]
    96c2:	2b01      	cmp	r3, #1
    96c4:	d906      	bls.n	96d4 <scope_compute_things+0xcc>
    96c6:	6a3b      	ldr	r3, [r7, #32]
    96c8:	781b      	ldrb	r3, [r3, #0]
    96ca:	2b01      	cmp	r3, #1
    96cc:	d102      	bne.n	96d4 <scope_compute_things+0xcc>
            id->kind = ID_INFO_KIND_GLOBAL_EXPLICIT;
    96ce:	6a3b      	ldr	r3, [r7, #32]
    96d0:	2202      	movs	r2, #2
    96d2:	701a      	strb	r2, [r3, #0]
                scope->scope_flags |= MP_SCOPE_FLAG_REFGLOBALS;
            }
        }
        #endif
        // params always count for 1 local, even if they are a cell
        if (id->kind == ID_INFO_KIND_LOCAL || (id->flags & ID_FLAG_IS_PARAM)) {
    96d4:	6a3b      	ldr	r3, [r7, #32]
    96d6:	781b      	ldrb	r3, [r3, #0]
    96d8:	2b03      	cmp	r3, #3
    96da:	d005      	beq.n	96e8 <scope_compute_things+0xe0>
    96dc:	6a3b      	ldr	r3, [r7, #32]
    96de:	785b      	ldrb	r3, [r3, #1]
    96e0:	f003 0301 	and.w	r3, r3, #1
    96e4:	2b00      	cmp	r3, #0
    96e6:	d009      	beq.n	96fc <scope_compute_things+0xf4>
            id->local_num = scope->num_locals++;
    96e8:	687b      	ldr	r3, [r7, #4]
    96ea:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
    96ec:	1c5a      	adds	r2, r3, #1
    96ee:	b291      	uxth	r1, r2
    96f0:	687a      	ldr	r2, [r7, #4]
    96f2:	8451      	strh	r1, [r2, #34]	; 0x22
    96f4:	6a3a      	ldr	r2, [r7, #32]
    96f6:	8053      	strh	r3, [r2, #2]
    96f8:	e000      	b.n	96fc <scope_compute_things+0xf4>
            continue;
    96fa:	bf00      	nop
    for (int i = 0; i < scope->id_info_len; i++) {
    96fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    96fe:	3301      	adds	r3, #1
    9700:	63fb      	str	r3, [r7, #60]	; 0x3c
    9702:	687b      	ldr	r3, [r7, #4]
    9704:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
    9706:	461a      	mov	r2, r3
    9708:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    970a:	429a      	cmp	r2, r3
    970c:	dcc9      	bgt.n	96a2 <scope_compute_things+0x9a>
        }
    }

    // compute the index of cell vars
    for (int i = 0; i < scope->id_info_len; i++) {
    970e:	2300      	movs	r3, #0
    9710:	63bb      	str	r3, [r7, #56]	; 0x38
    9712:	e01c      	b.n	974e <scope_compute_things+0x146>
        id_info_t *id = &scope->id_info[i];
    9714:	687b      	ldr	r3, [r7, #4]
    9716:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    9718:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    971a:	00db      	lsls	r3, r3, #3
    971c:	4413      	add	r3, r2
    971e:	61fb      	str	r3, [r7, #28]
        // in MicroPython the cells come right after the fast locals
        // parameters are not counted here, since they remain at the start
        // of the locals, even if they are cell vars
        if (id->kind == ID_INFO_KIND_CELL && !(id->flags & ID_FLAG_IS_PARAM)) {
    9720:	69fb      	ldr	r3, [r7, #28]
    9722:	781b      	ldrb	r3, [r3, #0]
    9724:	2b04      	cmp	r3, #4
    9726:	d10f      	bne.n	9748 <scope_compute_things+0x140>
    9728:	69fb      	ldr	r3, [r7, #28]
    972a:	785b      	ldrb	r3, [r3, #1]
    972c:	f003 0301 	and.w	r3, r3, #1
    9730:	2b00      	cmp	r3, #0
    9732:	d109      	bne.n	9748 <scope_compute_things+0x140>
            id->local_num = scope->num_locals;
    9734:	687b      	ldr	r3, [r7, #4]
    9736:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
    9738:	69fb      	ldr	r3, [r7, #28]
    973a:	805a      	strh	r2, [r3, #2]
            scope->num_locals += 1;
    973c:	687b      	ldr	r3, [r7, #4]
    973e:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
    9740:	3301      	adds	r3, #1
    9742:	b29a      	uxth	r2, r3
    9744:	687b      	ldr	r3, [r7, #4]
    9746:	845a      	strh	r2, [r3, #34]	; 0x22
    for (int i = 0; i < scope->id_info_len; i++) {
    9748:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    974a:	3301      	adds	r3, #1
    974c:	63bb      	str	r3, [r7, #56]	; 0x38
    974e:	687b      	ldr	r3, [r7, #4]
    9750:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
    9752:	461a      	mov	r2, r3
    9754:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    9756:	429a      	cmp	r2, r3
    9758:	dcdc      	bgt.n	9714 <scope_compute_things+0x10c>
        }
    }

    // compute the index of free vars
    // make sure they are in the order of the parent scope
    if (scope->parent != NULL) {
    975a:	687b      	ldr	r3, [r7, #4]
    975c:	685b      	ldr	r3, [r3, #4]
    975e:	2b00      	cmp	r3, #0
    9760:	f000 8085 	beq.w	986e <scope_compute_things+0x266>
        int num_free = 0;
    9764:	2300      	movs	r3, #0
    9766:	637b      	str	r3, [r7, #52]	; 0x34
        for (int i = 0; i < scope->parent->id_info_len; i++) {
    9768:	2300      	movs	r3, #0
    976a:	633b      	str	r3, [r7, #48]	; 0x30
    976c:	e041      	b.n	97f2 <scope_compute_things+0x1ea>
            id_info_t *id = &scope->parent->id_info[i];
    976e:	687b      	ldr	r3, [r7, #4]
    9770:	685b      	ldr	r3, [r3, #4]
    9772:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    9774:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    9776:	00db      	lsls	r3, r3, #3
    9778:	4413      	add	r3, r2
    977a:	61bb      	str	r3, [r7, #24]
            if (id->kind == ID_INFO_KIND_CELL || id->kind == ID_INFO_KIND_FREE) {
    977c:	69bb      	ldr	r3, [r7, #24]
    977e:	781b      	ldrb	r3, [r3, #0]
    9780:	2b04      	cmp	r3, #4
    9782:	d003      	beq.n	978c <scope_compute_things+0x184>
    9784:	69bb      	ldr	r3, [r7, #24]
    9786:	781b      	ldrb	r3, [r3, #0]
    9788:	2b05      	cmp	r3, #5
    978a:	d12f      	bne.n	97ec <scope_compute_things+0x1e4>
                for (int j = 0; j < scope->id_info_len; j++) {
    978c:	2300      	movs	r3, #0
    978e:	62fb      	str	r3, [r7, #44]	; 0x2c
    9790:	e026      	b.n	97e0 <scope_compute_things+0x1d8>
                    id_info_t *id2 = &scope->id_info[j];
    9792:	687b      	ldr	r3, [r7, #4]
    9794:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    9796:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    9798:	00db      	lsls	r3, r3, #3
    979a:	4413      	add	r3, r2
    979c:	617b      	str	r3, [r7, #20]
                    if (id2->kind == ID_INFO_KIND_FREE && id->qst == id2->qst) {
    979e:	697b      	ldr	r3, [r7, #20]
    97a0:	781b      	ldrb	r3, [r3, #0]
    97a2:	2b05      	cmp	r3, #5
    97a4:	d119      	bne.n	97da <scope_compute_things+0x1d2>
    97a6:	69bb      	ldr	r3, [r7, #24]
    97a8:	685a      	ldr	r2, [r3, #4]
    97aa:	697b      	ldr	r3, [r7, #20]
    97ac:	685b      	ldr	r3, [r3, #4]
    97ae:	429a      	cmp	r2, r3
    97b0:	d113      	bne.n	97da <scope_compute_things+0x1d2>
                        assert(!(id2->flags & ID_FLAG_IS_PARAM)); // free vars should not be params
    97b2:	697b      	ldr	r3, [r7, #20]
    97b4:	785b      	ldrb	r3, [r3, #1]
    97b6:	f003 0301 	and.w	r3, r3, #1
    97ba:	2b00      	cmp	r3, #0
    97bc:	d006      	beq.n	97cc <scope_compute_things+0x1c4>
    97be:	4b2e      	ldr	r3, [pc, #184]	; (9878 <scope_compute_things+0x270>)
    97c0:	4a2e      	ldr	r2, [pc, #184]	; (987c <scope_compute_things+0x274>)
    97c2:	f640 5104 	movw	r1, #3332	; 0xd04
    97c6:	482e      	ldr	r0, [pc, #184]	; (9880 <scope_compute_things+0x278>)
    97c8:	f013 fb8a 	bl	1cee0 <__assert_func>
                        // in MicroPython the frees come first, before the params
                        id2->local_num = num_free;
    97cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    97ce:	b29a      	uxth	r2, r3
    97d0:	697b      	ldr	r3, [r7, #20]
    97d2:	805a      	strh	r2, [r3, #2]
                        num_free += 1;
    97d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    97d6:	3301      	adds	r3, #1
    97d8:	637b      	str	r3, [r7, #52]	; 0x34
                for (int j = 0; j < scope->id_info_len; j++) {
    97da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    97dc:	3301      	adds	r3, #1
    97de:	62fb      	str	r3, [r7, #44]	; 0x2c
    97e0:	687b      	ldr	r3, [r7, #4]
    97e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
    97e4:	461a      	mov	r2, r3
    97e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    97e8:	429a      	cmp	r2, r3
    97ea:	dcd2      	bgt.n	9792 <scope_compute_things+0x18a>
        for (int i = 0; i < scope->parent->id_info_len; i++) {
    97ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    97ee:	3301      	adds	r3, #1
    97f0:	633b      	str	r3, [r7, #48]	; 0x30
    97f2:	687b      	ldr	r3, [r7, #4]
    97f4:	685b      	ldr	r3, [r3, #4]
    97f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
    97f8:	461a      	mov	r2, r3
    97fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    97fc:	429a      	cmp	r2, r3
    97fe:	dcb6      	bgt.n	976e <scope_compute_things+0x166>
                    }
                }
            }
        }
        // in MicroPython shift all other locals after the free locals
        if (num_free > 0) {
    9800:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    9802:	2b00      	cmp	r3, #0
    9804:	dd33      	ble.n	986e <scope_compute_things+0x266>
            for (int i = 0; i < scope->id_info_len; i++) {
    9806:	2300      	movs	r3, #0
    9808:	62bb      	str	r3, [r7, #40]	; 0x28
    980a:	e01a      	b.n	9842 <scope_compute_things+0x23a>
                id_info_t *id = &scope->id_info[i];
    980c:	687b      	ldr	r3, [r7, #4]
    980e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    9810:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9812:	00db      	lsls	r3, r3, #3
    9814:	4413      	add	r3, r2
    9816:	613b      	str	r3, [r7, #16]
                if (id->kind != ID_INFO_KIND_FREE || (id->flags & ID_FLAG_IS_PARAM)) {
    9818:	693b      	ldr	r3, [r7, #16]
    981a:	781b      	ldrb	r3, [r3, #0]
    981c:	2b05      	cmp	r3, #5
    981e:	d105      	bne.n	982c <scope_compute_things+0x224>
    9820:	693b      	ldr	r3, [r7, #16]
    9822:	785b      	ldrb	r3, [r3, #1]
    9824:	f003 0301 	and.w	r3, r3, #1
    9828:	2b00      	cmp	r3, #0
    982a:	d007      	beq.n	983c <scope_compute_things+0x234>
                    id->local_num += num_free;
    982c:	693b      	ldr	r3, [r7, #16]
    982e:	885a      	ldrh	r2, [r3, #2]
    9830:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    9832:	b29b      	uxth	r3, r3
    9834:	4413      	add	r3, r2
    9836:	b29a      	uxth	r2, r3
    9838:	693b      	ldr	r3, [r7, #16]
    983a:	805a      	strh	r2, [r3, #2]
            for (int i = 0; i < scope->id_info_len; i++) {
    983c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    983e:	3301      	adds	r3, #1
    9840:	62bb      	str	r3, [r7, #40]	; 0x28
    9842:	687b      	ldr	r3, [r7, #4]
    9844:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
    9846:	461a      	mov	r2, r3
    9848:	6abb      	ldr	r3, [r7, #40]	; 0x28
    984a:	429a      	cmp	r2, r3
    984c:	dcde      	bgt.n	980c <scope_compute_things+0x204>
                }
            }
            scope->num_pos_args += num_free; // free vars are counted as params for passing them into the function
    984e:	687b      	ldr	r3, [r7, #4]
    9850:	8b9a      	ldrh	r2, [r3, #28]
    9852:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    9854:	b29b      	uxth	r3, r3
    9856:	4413      	add	r3, r2
    9858:	b29a      	uxth	r2, r3
    985a:	687b      	ldr	r3, [r7, #4]
    985c:	839a      	strh	r2, [r3, #28]
            scope->num_locals += num_free;
    985e:	687b      	ldr	r3, [r7, #4]
    9860:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
    9862:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    9864:	b29b      	uxth	r3, r3
    9866:	4413      	add	r3, r2
    9868:	b29a      	uxth	r2, r3
    986a:	687b      	ldr	r3, [r7, #4]
    986c:	845a      	strh	r2, [r3, #34]	; 0x22
        }
    }
}
    986e:	bf00      	nop
    9870:	3748      	adds	r7, #72	; 0x48
    9872:	46bd      	mov	sp, r7
    9874:	bd80      	pop	{r7, pc}
    9876:	bf00      	nop
    9878:	000227a8 	.word	0x000227a8
    987c:	00022a48 	.word	0x00022a48
    9880:	00021c60 	.word	0x00021c60

00009884 <mp_compile_to_raw_code>:

#if !MICROPY_PERSISTENT_CODE_SAVE
STATIC
#endif
mp_raw_code_t *mp_compile_to_raw_code(mp_parse_tree_t *parse_tree, qstr source_file, uint emit_opt, bool is_repl) {
    9884:	b580      	push	{r7, lr}
    9886:	b09c      	sub	sp, #112	; 0x70
    9888:	af00      	add	r7, sp, #0
    988a:	60f8      	str	r0, [r7, #12]
    988c:	60b9      	str	r1, [r7, #8]
    988e:	607a      	str	r2, [r7, #4]
    9890:	70fb      	strb	r3, [r7, #3]
    // put compiler state on the stack, it's relatively small
    compiler_t comp_state = {0};
    9892:	f107 0314 	add.w	r3, r7, #20
    9896:	222c      	movs	r2, #44	; 0x2c
    9898:	2100      	movs	r1, #0
    989a:	4618      	mov	r0, r3
    989c:	f014 fee2 	bl	1e664 <memset>
    compiler_t *comp = &comp_state;
    98a0:	f107 0314 	add.w	r3, r7, #20
    98a4:	657b      	str	r3, [r7, #84]	; 0x54

    comp->source_file = source_file;
    98a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    98a8:	68ba      	ldr	r2, [r7, #8]
    98aa:	601a      	str	r2, [r3, #0]
    comp->is_repl = is_repl;
    98ac:	78fa      	ldrb	r2, [r7, #3]
    98ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    98b0:	711a      	strb	r2, [r3, #4]
    comp->break_label = INVALID_LABEL;
    98b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    98b4:	f64f 72ff 	movw	r2, #65535	; 0xffff
    98b8:	831a      	strh	r2, [r3, #24]
    comp->continue_label = INVALID_LABEL;
    98ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    98bc:	f64f 72ff 	movw	r2, #65535	; 0xffff
    98c0:	835a      	strh	r2, [r3, #26]

    // create the module scope
    scope_t *module_scope = scope_new_and_link(comp, SCOPE_MODULE, parse_tree->root, emit_opt);
    98c2:	68fb      	ldr	r3, [r7, #12]
    98c4:	681a      	ldr	r2, [r3, #0]
    98c6:	687b      	ldr	r3, [r7, #4]
    98c8:	2100      	movs	r1, #0
    98ca:	6d78      	ldr	r0, [r7, #84]	; 0x54
    98cc:	f7fb fc68 	bl	51a0 <scope_new_and_link>
    98d0:	6538      	str	r0, [r7, #80]	; 0x50

    // create standard emitter; it's used at least for MP_PASS_SCOPE
    emit_t *emit_bc = emit_bc_new();
    98d2:	f000 f943 	bl	9b5c <emit_bc_new>
    98d6:	64f8      	str	r0, [r7, #76]	; 0x4c

    // compile pass 1
    comp->emit = emit_bc;
    98d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    98da:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    98dc:	629a      	str	r2, [r3, #40]	; 0x28
    #if MICROPY_EMIT_NATIVE
    comp->emit_method_table = &emit_bc_method_table;
    #endif
    uint max_num_labels = 0;
    98de:	2300      	movs	r3, #0
    98e0:	66fb      	str	r3, [r7, #108]	; 0x6c
    for (scope_t *s = comp->scope_head; s != NULL && comp->compile_error == MP_OBJ_NULL; s = s->next) {
    98e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    98e4:	6a1b      	ldr	r3, [r3, #32]
    98e6:	66bb      	str	r3, [r7, #104]	; 0x68
    98e8:	e029      	b.n	993e <mp_compile_to_raw_code+0xba>
        #if MICROPY_EMIT_INLINE_ASM
        } else if (s->emit_options == MP_EMIT_OPT_ASM) {
            compile_scope_inline_asm(comp, s, MP_PASS_SCOPE);
        #endif
        } else {
            compile_scope(comp, s, MP_PASS_SCOPE);
    98ea:	2201      	movs	r2, #1
    98ec:	6eb9      	ldr	r1, [r7, #104]	; 0x68
    98ee:	6d78      	ldr	r0, [r7, #84]	; 0x54
    98f0:	f7ff fc21 	bl	9136 <compile_scope>

            // Check if any implicitly declared variables should be closed over
            for (size_t i = 0; i < s->id_info_len; ++i) {
    98f4:	2300      	movs	r3, #0
    98f6:	667b      	str	r3, [r7, #100]	; 0x64
    98f8:	e010      	b.n	991c <mp_compile_to_raw_code+0x98>
                id_info_t *id = &s->id_info[i];
    98fa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    98fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    98fe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    9900:	00db      	lsls	r3, r3, #3
    9902:	4413      	add	r3, r2
    9904:	64bb      	str	r3, [r7, #72]	; 0x48
                if (id->kind == ID_INFO_KIND_GLOBAL_IMPLICIT) {
    9906:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    9908:	781b      	ldrb	r3, [r3, #0]
    990a:	2b01      	cmp	r3, #1
    990c:	d103      	bne.n	9916 <mp_compile_to_raw_code+0x92>
                    scope_check_to_close_over(s, id);
    990e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
    9910:	6eb8      	ldr	r0, [r7, #104]	; 0x68
    9912:	f7fb fb59 	bl	4fc8 <scope_check_to_close_over>
            for (size_t i = 0; i < s->id_info_len; ++i) {
    9916:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    9918:	3301      	adds	r3, #1
    991a:	667b      	str	r3, [r7, #100]	; 0x64
    991c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    991e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
    9920:	461a      	mov	r2, r3
    9922:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    9924:	429a      	cmp	r2, r3
    9926:	d8e8      	bhi.n	98fa <mp_compile_to_raw_code+0x76>
                }
            }
        }

        // update maximim number of labels needed
        if (comp->next_label > max_num_labels) {
    9928:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    992a:	691a      	ldr	r2, [r3, #16]
    992c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    992e:	429a      	cmp	r2, r3
    9930:	d902      	bls.n	9938 <mp_compile_to_raw_code+0xb4>
            max_num_labels = comp->next_label;
    9932:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    9934:	691b      	ldr	r3, [r3, #16]
    9936:	66fb      	str	r3, [r7, #108]	; 0x6c
    for (scope_t *s = comp->scope_head; s != NULL && comp->compile_error == MP_OBJ_NULL; s = s->next) {
    9938:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    993a:	689b      	ldr	r3, [r3, #8]
    993c:	66bb      	str	r3, [r7, #104]	; 0x68
    993e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    9940:	2b00      	cmp	r3, #0
    9942:	d003      	beq.n	994c <mp_compile_to_raw_code+0xc8>
    9944:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    9946:	689b      	ldr	r3, [r3, #8]
    9948:	2b00      	cmp	r3, #0
    994a:	d0ce      	beq.n	98ea <mp_compile_to_raw_code+0x66>
        }
    }

    // compute some things related to scope and identifiers
    for (scope_t *s = comp->scope_head; s != NULL && comp->compile_error == MP_OBJ_NULL; s = s->next) {
    994c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    994e:	6a1b      	ldr	r3, [r3, #32]
    9950:	663b      	str	r3, [r7, #96]	; 0x60
    9952:	e005      	b.n	9960 <mp_compile_to_raw_code+0xdc>
        scope_compute_things(s);
    9954:	6e38      	ldr	r0, [r7, #96]	; 0x60
    9956:	f7ff fe57 	bl	9608 <scope_compute_things>
    for (scope_t *s = comp->scope_head; s != NULL && comp->compile_error == MP_OBJ_NULL; s = s->next) {
    995a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    995c:	689b      	ldr	r3, [r3, #8]
    995e:	663b      	str	r3, [r7, #96]	; 0x60
    9960:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    9962:	2b00      	cmp	r3, #0
    9964:	d003      	beq.n	996e <mp_compile_to_raw_code+0xea>
    9966:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    9968:	689b      	ldr	r3, [r3, #8]
    996a:	2b00      	cmp	r3, #0
    996c:	d0f2      	beq.n	9954 <mp_compile_to_raw_code+0xd0>
    }

    // set max number of labels now that it's calculated
    emit_bc_set_max_num_labels(emit_bc, max_num_labels);
    996e:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
    9970:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
    9972:	f000 f8ff 	bl	9b74 <emit_bc_set_max_num_labels>

    // compile pass 2 and 3
#if MICROPY_EMIT_NATIVE
    emit_t *emit_native = NULL;
#endif
    for (scope_t *s = comp->scope_head; s != NULL && comp->compile_error == MP_OBJ_NULL; s = s->next) {
    9976:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    9978:	6a1b      	ldr	r3, [r3, #32]
    997a:	65fb      	str	r3, [r7, #92]	; 0x5c
    997c:	e01d      	b.n	99ba <mp_compile_to_raw_code+0x136>
                    comp->emit = emit_native;
                    break;
#endif // MICROPY_EMIT_NATIVE

                default:
                    comp->emit = emit_bc;
    997e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    9980:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    9982:	629a      	str	r2, [r3, #40]	; 0x28
                    #if MICROPY_EMIT_NATIVE
                    comp->emit_method_table = &emit_bc_method_table;
                    #endif
                    break;
    9984:	bf00      	nop
            }

            // need a pass to compute stack size
            compile_scope(comp, s, MP_PASS_STACK_SIZE);
    9986:	2202      	movs	r2, #2
    9988:	6df9      	ldr	r1, [r7, #92]	; 0x5c
    998a:	6d78      	ldr	r0, [r7, #84]	; 0x54
    998c:	f7ff fbd3 	bl	9136 <compile_scope>

            // second last pass: compute code size
            if (comp->compile_error == MP_OBJ_NULL) {
    9990:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    9992:	689b      	ldr	r3, [r3, #8]
    9994:	2b00      	cmp	r3, #0
    9996:	d104      	bne.n	99a2 <mp_compile_to_raw_code+0x11e>
                compile_scope(comp, s, MP_PASS_CODE_SIZE);
    9998:	2203      	movs	r2, #3
    999a:	6df9      	ldr	r1, [r7, #92]	; 0x5c
    999c:	6d78      	ldr	r0, [r7, #84]	; 0x54
    999e:	f7ff fbca 	bl	9136 <compile_scope>
            }

            // final pass: emit code
            if (comp->compile_error == MP_OBJ_NULL) {
    99a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    99a4:	689b      	ldr	r3, [r3, #8]
    99a6:	2b00      	cmp	r3, #0
    99a8:	d104      	bne.n	99b4 <mp_compile_to_raw_code+0x130>
                compile_scope(comp, s, MP_PASS_EMIT);
    99aa:	2204      	movs	r2, #4
    99ac:	6df9      	ldr	r1, [r7, #92]	; 0x5c
    99ae:	6d78      	ldr	r0, [r7, #84]	; 0x54
    99b0:	f7ff fbc1 	bl	9136 <compile_scope>
    for (scope_t *s = comp->scope_head; s != NULL && comp->compile_error == MP_OBJ_NULL; s = s->next) {
    99b4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    99b6:	689b      	ldr	r3, [r3, #8]
    99b8:	65fb      	str	r3, [r7, #92]	; 0x5c
    99ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    99bc:	2b00      	cmp	r3, #0
    99be:	d003      	beq.n	99c8 <mp_compile_to_raw_code+0x144>
    99c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    99c2:	689b      	ldr	r3, [r3, #8]
    99c4:	2b00      	cmp	r3, #0
    99c6:	d0da      	beq.n	997e <mp_compile_to_raw_code+0xfa>
            }
        }
    }

    if (comp->compile_error != MP_OBJ_NULL) {
    99c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    99ca:	689b      	ldr	r3, [r3, #8]
    99cc:	2b00      	cmp	r3, #0
    99ce:	d011      	beq.n	99f4 <mp_compile_to_raw_code+0x170>
        // if there is no line number for the error then use the line
        // number for the start of this scope
        compile_error_set_line(comp, comp->scope_cur->pn);
    99d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    99d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    99d4:	68db      	ldr	r3, [r3, #12]
    99d6:	4619      	mov	r1, r3
    99d8:	6d78      	ldr	r0, [r7, #84]	; 0x54
    99da:	f7fb fb55 	bl	5088 <compile_error_set_line>
        // add a traceback to the exception using relevant source info
        mp_obj_exception_add_traceback(comp->compile_error, comp->source_file,
    99de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    99e0:	6898      	ldr	r0, [r3, #8]
    99e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    99e4:	6819      	ldr	r1, [r3, #0]
    99e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    99e8:	68da      	ldr	r2, [r3, #12]
            comp->compile_error_line, comp->scope_cur->simple_name);
    99ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    99ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    99ee:	8adb      	ldrh	r3, [r3, #22]
        mp_obj_exception_add_traceback(comp->compile_error, comp->source_file,
    99f0:	f006 f934 	bl	fc5c <mp_obj_exception_add_traceback>
    }

    // free the emitters

    emit_bc_free(emit_bc);
    99f4:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
    99f6:	f000 f8d2 	bl	9b9e <emit_bc_free>
        ASM_EMITTER(free)(comp->emit_inline_asm);
    }
    #endif

    // free the parse tree
    mp_parse_tree_clear(parse_tree);
    99fa:	68f8      	ldr	r0, [r7, #12]
    99fc:	f7fb f98c 	bl	4d18 <mp_parse_tree_clear>

    // free the scopes
    mp_raw_code_t *outer_raw_code = module_scope->raw_code;
    9a00:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    9a02:	691b      	ldr	r3, [r3, #16]
    9a04:	647b      	str	r3, [r7, #68]	; 0x44
    for (scope_t *s = module_scope; s;) {
    9a06:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    9a08:	65bb      	str	r3, [r7, #88]	; 0x58
    9a0a:	e007      	b.n	9a1c <mp_compile_to_raw_code+0x198>
        scope_t *next = s->next;
    9a0c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    9a0e:	689b      	ldr	r3, [r3, #8]
    9a10:	643b      	str	r3, [r7, #64]	; 0x40
        scope_free(s);
    9a12:	6db8      	ldr	r0, [r7, #88]	; 0x58
    9a14:	f7fb f9f2 	bl	4dfc <scope_free>
        s = next;
    9a18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    9a1a:	65bb      	str	r3, [r7, #88]	; 0x58
    for (scope_t *s = module_scope; s;) {
    9a1c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    9a1e:	2b00      	cmp	r3, #0
    9a20:	d1f4      	bne.n	9a0c <mp_compile_to_raw_code+0x188>
    }

    if (comp->compile_error != MP_OBJ_NULL) {
    9a22:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    9a24:	689b      	ldr	r3, [r3, #8]
    9a26:	2b00      	cmp	r3, #0
    9a28:	d004      	beq.n	9a34 <mp_compile_to_raw_code+0x1b0>
        nlr_raise(comp->compile_error);
    9a2a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    9a2c:	689b      	ldr	r3, [r3, #8]
    9a2e:	4618      	mov	r0, r3
    9a30:	f7f6 fc56 	bl	2e0 <nlr_jump>
    } else {
        return outer_raw_code;
    9a34:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    }
}
    9a36:	4618      	mov	r0, r3
    9a38:	3770      	adds	r7, #112	; 0x70
    9a3a:	46bd      	mov	sp, r7
    9a3c:	bd80      	pop	{r7, pc}

00009a3e <mp_compile>:

mp_obj_t mp_compile(mp_parse_tree_t *parse_tree, qstr source_file, uint emit_opt, bool is_repl) {
    9a3e:	b580      	push	{r7, lr}
    9a40:	b086      	sub	sp, #24
    9a42:	af00      	add	r7, sp, #0
    9a44:	60f8      	str	r0, [r7, #12]
    9a46:	60b9      	str	r1, [r7, #8]
    9a48:	607a      	str	r2, [r7, #4]
    9a4a:	70fb      	strb	r3, [r7, #3]
    mp_raw_code_t *rc = mp_compile_to_raw_code(parse_tree, source_file, emit_opt, is_repl);
    9a4c:	78fb      	ldrb	r3, [r7, #3]
    9a4e:	687a      	ldr	r2, [r7, #4]
    9a50:	68b9      	ldr	r1, [r7, #8]
    9a52:	68f8      	ldr	r0, [r7, #12]
    9a54:	f7ff ff16 	bl	9884 <mp_compile_to_raw_code>
    9a58:	6178      	str	r0, [r7, #20]
    // return function that executes the outer module
    return mp_make_function_from_raw_code(rc, MP_OBJ_NULL, MP_OBJ_NULL);
    9a5a:	2200      	movs	r2, #0
    9a5c:	2100      	movs	r1, #0
    9a5e:	6978      	ldr	r0, [r7, #20]
    9a60:	f001 fd08 	bl	b474 <mp_make_function_from_raw_code>
    9a64:	4603      	mov	r3, r0
}
    9a66:	4618      	mov	r0, r3
    9a68:	3718      	adds	r7, #24
    9a6a:	46bd      	mov	sp, r7
    9a6c:	bd80      	pop	{r7, pc}
    9a6e:	bf00      	nop

00009a70 <mp_emit_common_get_id_for_modification>:

#include "py/emit.h"

#if MICROPY_ENABLE_COMPILER

void mp_emit_common_get_id_for_modification(scope_t *scope, qstr qst) {
    9a70:	b580      	push	{r7, lr}
    9a72:	b084      	sub	sp, #16
    9a74:	af00      	add	r7, sp, #0
    9a76:	6078      	str	r0, [r7, #4]
    9a78:	6039      	str	r1, [r7, #0]
    // name adding/lookup
    id_info_t *id = scope_find_or_add_id(scope, qst, ID_INFO_KIND_GLOBAL_IMPLICIT);
    9a7a:	2201      	movs	r2, #1
    9a7c:	6839      	ldr	r1, [r7, #0]
    9a7e:	6878      	ldr	r0, [r7, #4]
    9a80:	f7fb f9cc 	bl	4e1c <scope_find_or_add_id>
    9a84:	60f8      	str	r0, [r7, #12]
    if (SCOPE_IS_FUNC_LIKE(scope->kind) && id->kind == ID_INFO_KIND_GLOBAL_IMPLICIT) {
    9a86:	687b      	ldr	r3, [r7, #4]
    9a88:	681b      	ldr	r3, [r3, #0]
    9a8a:	2b01      	cmp	r3, #1
    9a8c:	d906      	bls.n	9a9c <mp_emit_common_get_id_for_modification+0x2c>
    9a8e:	68fb      	ldr	r3, [r7, #12]
    9a90:	781b      	ldrb	r3, [r3, #0]
    9a92:	2b01      	cmp	r3, #1
    9a94:	d102      	bne.n	9a9c <mp_emit_common_get_id_for_modification+0x2c>
        // rebind as a local variable
        id->kind = ID_INFO_KIND_LOCAL;
    9a96:	68fb      	ldr	r3, [r7, #12]
    9a98:	2203      	movs	r2, #3
    9a9a:	701a      	strb	r2, [r3, #0]
    }
}
    9a9c:	bf00      	nop
    9a9e:	3710      	adds	r7, #16
    9aa0:	46bd      	mov	sp, r7
    9aa2:	bd80      	pop	{r7, pc}

00009aa4 <mp_emit_common_id_op>:

void mp_emit_common_id_op(emit_t *emit, const mp_emit_method_table_id_ops_t *emit_method_table, scope_t *scope, qstr qst) {
    9aa4:	b590      	push	{r4, r7, lr}
    9aa6:	b087      	sub	sp, #28
    9aa8:	af00      	add	r7, sp, #0
    9aaa:	60f8      	str	r0, [r7, #12]
    9aac:	60b9      	str	r1, [r7, #8]
    9aae:	607a      	str	r2, [r7, #4]
    9ab0:	603b      	str	r3, [r7, #0]
    // assumes pass is greater than 1, ie that all identifiers are defined in the scope

    id_info_t *id = scope_find(scope, qst);
    9ab2:	6839      	ldr	r1, [r7, #0]
    9ab4:	6878      	ldr	r0, [r7, #4]
    9ab6:	f7fb f9f7 	bl	4ea8 <scope_find>
    9aba:	6178      	str	r0, [r7, #20]
    assert(id != NULL);
    9abc:	697b      	ldr	r3, [r7, #20]
    9abe:	2b00      	cmp	r3, #0
    9ac0:	d105      	bne.n	9ace <mp_emit_common_id_op+0x2a>
    9ac2:	4b22      	ldr	r3, [pc, #136]	; (9b4c <mp_emit_common_id_op+0xa8>)
    9ac4:	4a22      	ldr	r2, [pc, #136]	; (9b50 <mp_emit_common_id_op+0xac>)
    9ac6:	212e      	movs	r1, #46	; 0x2e
    9ac8:	4822      	ldr	r0, [pc, #136]	; (9b54 <mp_emit_common_id_op+0xb0>)
    9aca:	f013 fa09 	bl	1cee0 <__assert_func>

    // call the emit backend with the correct code
    if (id->kind == ID_INFO_KIND_GLOBAL_IMPLICIT) {
    9ace:	697b      	ldr	r3, [r7, #20]
    9ad0:	781b      	ldrb	r3, [r3, #0]
    9ad2:	2b01      	cmp	r3, #1
    9ad4:	d106      	bne.n	9ae4 <mp_emit_common_id_op+0x40>
        emit_method_table->global(emit, qst, MP_EMIT_IDOP_GLOBAL_NAME);
    9ad6:	68bb      	ldr	r3, [r7, #8]
    9ad8:	685b      	ldr	r3, [r3, #4]
    9ada:	2200      	movs	r2, #0
    9adc:	6839      	ldr	r1, [r7, #0]
    9ade:	68f8      	ldr	r0, [r7, #12]
    9ae0:	4798      	blx	r3
        emit_method_table->local(emit, qst, id->local_num, MP_EMIT_IDOP_LOCAL_FAST);
    } else {
        assert(id->kind == ID_INFO_KIND_CELL || id->kind == ID_INFO_KIND_FREE);
        emit_method_table->local(emit, qst, id->local_num, MP_EMIT_IDOP_LOCAL_DEREF);
    }
}
    9ae2:	e02f      	b.n	9b44 <mp_emit_common_id_op+0xa0>
    } else if (id->kind == ID_INFO_KIND_GLOBAL_EXPLICIT) {
    9ae4:	697b      	ldr	r3, [r7, #20]
    9ae6:	781b      	ldrb	r3, [r3, #0]
    9ae8:	2b02      	cmp	r3, #2
    9aea:	d106      	bne.n	9afa <mp_emit_common_id_op+0x56>
        emit_method_table->global(emit, qst, MP_EMIT_IDOP_GLOBAL_GLOBAL);
    9aec:	68bb      	ldr	r3, [r7, #8]
    9aee:	685b      	ldr	r3, [r3, #4]
    9af0:	2201      	movs	r2, #1
    9af2:	6839      	ldr	r1, [r7, #0]
    9af4:	68f8      	ldr	r0, [r7, #12]
    9af6:	4798      	blx	r3
}
    9af8:	e024      	b.n	9b44 <mp_emit_common_id_op+0xa0>
    } else if (id->kind == ID_INFO_KIND_LOCAL) {
    9afa:	697b      	ldr	r3, [r7, #20]
    9afc:	781b      	ldrb	r3, [r3, #0]
    9afe:	2b03      	cmp	r3, #3
    9b00:	d109      	bne.n	9b16 <mp_emit_common_id_op+0x72>
        emit_method_table->local(emit, qst, id->local_num, MP_EMIT_IDOP_LOCAL_FAST);
    9b02:	68bb      	ldr	r3, [r7, #8]
    9b04:	681c      	ldr	r4, [r3, #0]
    9b06:	697b      	ldr	r3, [r7, #20]
    9b08:	885b      	ldrh	r3, [r3, #2]
    9b0a:	461a      	mov	r2, r3
    9b0c:	2300      	movs	r3, #0
    9b0e:	6839      	ldr	r1, [r7, #0]
    9b10:	68f8      	ldr	r0, [r7, #12]
    9b12:	47a0      	blx	r4
}
    9b14:	e016      	b.n	9b44 <mp_emit_common_id_op+0xa0>
        assert(id->kind == ID_INFO_KIND_CELL || id->kind == ID_INFO_KIND_FREE);
    9b16:	697b      	ldr	r3, [r7, #20]
    9b18:	781b      	ldrb	r3, [r3, #0]
    9b1a:	2b04      	cmp	r3, #4
    9b1c:	d009      	beq.n	9b32 <mp_emit_common_id_op+0x8e>
    9b1e:	697b      	ldr	r3, [r7, #20]
    9b20:	781b      	ldrb	r3, [r3, #0]
    9b22:	2b05      	cmp	r3, #5
    9b24:	d005      	beq.n	9b32 <mp_emit_common_id_op+0x8e>
    9b26:	4b0c      	ldr	r3, [pc, #48]	; (9b58 <mp_emit_common_id_op+0xb4>)
    9b28:	4a09      	ldr	r2, [pc, #36]	; (9b50 <mp_emit_common_id_op+0xac>)
    9b2a:	2138      	movs	r1, #56	; 0x38
    9b2c:	4809      	ldr	r0, [pc, #36]	; (9b54 <mp_emit_common_id_op+0xb0>)
    9b2e:	f013 f9d7 	bl	1cee0 <__assert_func>
        emit_method_table->local(emit, qst, id->local_num, MP_EMIT_IDOP_LOCAL_DEREF);
    9b32:	68bb      	ldr	r3, [r7, #8]
    9b34:	681c      	ldr	r4, [r3, #0]
    9b36:	697b      	ldr	r3, [r7, #20]
    9b38:	885b      	ldrh	r3, [r3, #2]
    9b3a:	461a      	mov	r2, r3
    9b3c:	2301      	movs	r3, #1
    9b3e:	6839      	ldr	r1, [r7, #0]
    9b40:	68f8      	ldr	r0, [r7, #12]
    9b42:	47a0      	blx	r4
}
    9b44:	bf00      	nop
    9b46:	371c      	adds	r7, #28
    9b48:	46bd      	mov	sp, r7
    9b4a:	bd90      	pop	{r4, r7, pc}
    9b4c:	00022a60 	.word	0x00022a60
    9b50:	00022ac4 	.word	0x00022ac4
    9b54:	00022a6c 	.word	0x00022a6c
    9b58:	00022a84 	.word	0x00022a84

00009b5c <emit_bc_new>:
    uint16_t ct_cur_raw_code;
    #endif
    mp_uint_t *const_table;
};

emit_t *emit_bc_new(void) {
    9b5c:	b580      	push	{r7, lr}
    9b5e:	b082      	sub	sp, #8
    9b60:	af00      	add	r7, sp, #0
    emit_t *emit = m_new0(emit_t, 1);
    9b62:	2040      	movs	r0, #64	; 0x40
    9b64:	f7f6 fc0e 	bl	384 <m_malloc0>
    9b68:	6078      	str	r0, [r7, #4]
    return emit;
    9b6a:	687b      	ldr	r3, [r7, #4]
}
    9b6c:	4618      	mov	r0, r3
    9b6e:	3708      	adds	r7, #8
    9b70:	46bd      	mov	sp, r7
    9b72:	bd80      	pop	{r7, pc}

00009b74 <emit_bc_set_max_num_labels>:

void emit_bc_set_max_num_labels(emit_t *emit, mp_uint_t max_num_labels) {
    9b74:	b580      	push	{r7, lr}
    9b76:	b082      	sub	sp, #8
    9b78:	af00      	add	r7, sp, #0
    9b7a:	6078      	str	r0, [r7, #4]
    9b7c:	6039      	str	r1, [r7, #0]
    emit->max_num_labels = max_num_labels;
    9b7e:	687b      	ldr	r3, [r7, #4]
    9b80:	683a      	ldr	r2, [r7, #0]
    9b82:	619a      	str	r2, [r3, #24]
    emit->label_offsets = m_new(mp_uint_t, emit->max_num_labels);
    9b84:	687b      	ldr	r3, [r7, #4]
    9b86:	699b      	ldr	r3, [r3, #24]
    9b88:	009b      	lsls	r3, r3, #2
    9b8a:	4618      	mov	r0, r3
    9b8c:	f7f6 fbc6 	bl	31c <m_malloc>
    9b90:	4602      	mov	r2, r0
    9b92:	687b      	ldr	r3, [r7, #4]
    9b94:	61da      	str	r2, [r3, #28]
}
    9b96:	bf00      	nop
    9b98:	3708      	adds	r7, #8
    9b9a:	46bd      	mov	sp, r7
    9b9c:	bd80      	pop	{r7, pc}

00009b9e <emit_bc_free>:

void emit_bc_free(emit_t *emit) {
    9b9e:	b580      	push	{r7, lr}
    9ba0:	b082      	sub	sp, #8
    9ba2:	af00      	add	r7, sp, #0
    9ba4:	6078      	str	r0, [r7, #4]
    m_del(mp_uint_t, emit->label_offsets, emit->max_num_labels);
    9ba6:	687b      	ldr	r3, [r7, #4]
    9ba8:	69db      	ldr	r3, [r3, #28]
    9baa:	4618      	mov	r0, r3
    9bac:	f7f6 fc34 	bl	418 <m_free>
    m_del_obj(emit_t, emit);
    9bb0:	6878      	ldr	r0, [r7, #4]
    9bb2:	f7f6 fc31 	bl	418 <m_free>
}
    9bb6:	bf00      	nop
    9bb8:	3708      	adds	r7, #8
    9bba:	46bd      	mov	sp, r7
    9bbc:	bd80      	pop	{r7, pc}

00009bbe <emit_write_uint>:

typedef byte *(*emit_allocator_t)(emit_t *emit, int nbytes);

STATIC void emit_write_uint(emit_t *emit, emit_allocator_t allocator, mp_uint_t val) {
    9bbe:	b580      	push	{r7, lr}
    9bc0:	b088      	sub	sp, #32
    9bc2:	af00      	add	r7, sp, #0
    9bc4:	60f8      	str	r0, [r7, #12]
    9bc6:	60b9      	str	r1, [r7, #8]
    9bc8:	607a      	str	r2, [r7, #4]
    // We store each 7 bits in a separate byte, and that's how many bytes needed
    byte buf[BYTES_FOR_INT];
    byte *p = buf + sizeof(buf);
    9bca:	f107 0310 	add.w	r3, r7, #16
    9bce:	3305      	adds	r3, #5
    9bd0:	61fb      	str	r3, [r7, #28]
    // We encode in little-ending order, but store in big-endian, to help decoding
    do {
        *--p = val & 0x7f;
    9bd2:	69fb      	ldr	r3, [r7, #28]
    9bd4:	3b01      	subs	r3, #1
    9bd6:	61fb      	str	r3, [r7, #28]
    9bd8:	687b      	ldr	r3, [r7, #4]
    9bda:	b2db      	uxtb	r3, r3
    9bdc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    9be0:	b2da      	uxtb	r2, r3
    9be2:	69fb      	ldr	r3, [r7, #28]
    9be4:	701a      	strb	r2, [r3, #0]
        val >>= 7;
    9be6:	687b      	ldr	r3, [r7, #4]
    9be8:	09db      	lsrs	r3, r3, #7
    9bea:	607b      	str	r3, [r7, #4]
    } while (val != 0);
    9bec:	687b      	ldr	r3, [r7, #4]
    9bee:	2b00      	cmp	r3, #0
    9bf0:	d1ef      	bne.n	9bd2 <emit_write_uint+0x14>
    byte *c = allocator(emit, buf + sizeof(buf) - p);
    9bf2:	f107 0310 	add.w	r3, r7, #16
    9bf6:	3305      	adds	r3, #5
    9bf8:	461a      	mov	r2, r3
    9bfa:	69fb      	ldr	r3, [r7, #28]
    9bfc:	1ad2      	subs	r2, r2, r3
    9bfe:	68bb      	ldr	r3, [r7, #8]
    9c00:	4611      	mov	r1, r2
    9c02:	68f8      	ldr	r0, [r7, #12]
    9c04:	4798      	blx	r3
    9c06:	61b8      	str	r0, [r7, #24]
    while (p != buf + sizeof(buf) - 1) {
    9c08:	e00a      	b.n	9c20 <emit_write_uint+0x62>
        *c++ = *p++ | 0x80;
    9c0a:	69bb      	ldr	r3, [r7, #24]
    9c0c:	1c5a      	adds	r2, r3, #1
    9c0e:	61ba      	str	r2, [r7, #24]
    9c10:	69fa      	ldr	r2, [r7, #28]
    9c12:	1c51      	adds	r1, r2, #1
    9c14:	61f9      	str	r1, [r7, #28]
    9c16:	7812      	ldrb	r2, [r2, #0]
    9c18:	f062 027f 	orn	r2, r2, #127	; 0x7f
    9c1c:	b2d2      	uxtb	r2, r2
    9c1e:	701a      	strb	r2, [r3, #0]
    while (p != buf + sizeof(buf) - 1) {
    9c20:	f107 0310 	add.w	r3, r7, #16
    9c24:	3304      	adds	r3, #4
    9c26:	69fa      	ldr	r2, [r7, #28]
    9c28:	4293      	cmp	r3, r2
    9c2a:	d1ee      	bne.n	9c0a <emit_write_uint+0x4c>
    }
    *c = *p;
    9c2c:	69fb      	ldr	r3, [r7, #28]
    9c2e:	781a      	ldrb	r2, [r3, #0]
    9c30:	69bb      	ldr	r3, [r7, #24]
    9c32:	701a      	strb	r2, [r3, #0]
}
    9c34:	bf00      	nop
    9c36:	3720      	adds	r7, #32
    9c38:	46bd      	mov	sp, r7
    9c3a:	bd80      	pop	{r7, pc}

00009c3c <emit_get_cur_to_write_code_info>:

// all functions must go through this one to emit code info
STATIC byte *emit_get_cur_to_write_code_info(emit_t *emit, int num_bytes_to_write) {
    9c3c:	b580      	push	{r7, lr}
    9c3e:	b084      	sub	sp, #16
    9c40:	af00      	add	r7, sp, #0
    9c42:	6078      	str	r0, [r7, #4]
    9c44:	6039      	str	r1, [r7, #0]
    //printf("emit %d\n", num_bytes_to_write);
    if (emit->pass < MP_PASS_EMIT) {
    9c46:	687b      	ldr	r3, [r7, #4]
    9c48:	795b      	ldrb	r3, [r3, #5]
    9c4a:	2b03      	cmp	r3, #3
    9c4c:	d807      	bhi.n	9c5e <emit_get_cur_to_write_code_info+0x22>
        emit->code_info_offset += num_bytes_to_write;
    9c4e:	687b      	ldr	r3, [r7, #4]
    9c50:	6a1a      	ldr	r2, [r3, #32]
    9c52:	683b      	ldr	r3, [r7, #0]
    9c54:	441a      	add	r2, r3
    9c56:	687b      	ldr	r3, [r7, #4]
    9c58:	621a      	str	r2, [r3, #32]
        return emit->dummy_data;
    9c5a:	687b      	ldr	r3, [r7, #4]
    9c5c:	e01a      	b.n	9c94 <emit_get_cur_to_write_code_info+0x58>
    } else {
        assert(emit->code_info_offset + num_bytes_to_write <= emit->code_info_size);
    9c5e:	687b      	ldr	r3, [r7, #4]
    9c60:	6a1a      	ldr	r2, [r3, #32]
    9c62:	683b      	ldr	r3, [r7, #0]
    9c64:	441a      	add	r2, r3
    9c66:	687b      	ldr	r3, [r7, #4]
    9c68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    9c6a:	429a      	cmp	r2, r3
    9c6c:	d905      	bls.n	9c7a <emit_get_cur_to_write_code_info+0x3e>
    9c6e:	4b0b      	ldr	r3, [pc, #44]	; (9c9c <emit_get_cur_to_write_code_info+0x60>)
    9c70:	4a0b      	ldr	r2, [pc, #44]	; (9ca0 <emit_get_cur_to_write_code_info+0x64>)
    9c72:	2173      	movs	r1, #115	; 0x73
    9c74:	480b      	ldr	r0, [pc, #44]	; (9ca4 <emit_get_cur_to_write_code_info+0x68>)
    9c76:	f013 f933 	bl	1cee0 <__assert_func>
        byte *c = emit->code_base + emit->code_info_offset;
    9c7a:	687b      	ldr	r3, [r7, #4]
    9c7c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    9c7e:	687b      	ldr	r3, [r7, #4]
    9c80:	6a1b      	ldr	r3, [r3, #32]
    9c82:	4413      	add	r3, r2
    9c84:	60fb      	str	r3, [r7, #12]
        emit->code_info_offset += num_bytes_to_write;
    9c86:	687b      	ldr	r3, [r7, #4]
    9c88:	6a1a      	ldr	r2, [r3, #32]
    9c8a:	683b      	ldr	r3, [r7, #0]
    9c8c:	441a      	add	r2, r3
    9c8e:	687b      	ldr	r3, [r7, #4]
    9c90:	621a      	str	r2, [r3, #32]
        return c;
    9c92:	68fb      	ldr	r3, [r7, #12]
    }
}
    9c94:	4618      	mov	r0, r3
    9c96:	3710      	adds	r7, #16
    9c98:	46bd      	mov	sp, r7
    9c9a:	bd80      	pop	{r7, pc}
    9c9c:	00022adc 	.word	0x00022adc
    9ca0:	00022cf8 	.word	0x00022cf8
    9ca4:	00022b20 	.word	0x00022b20

00009ca8 <emit_write_code_info_byte>:

STATIC void emit_write_code_info_byte(emit_t* emit, byte val) {
    9ca8:	b580      	push	{r7, lr}
    9caa:	b082      	sub	sp, #8
    9cac:	af00      	add	r7, sp, #0
    9cae:	6078      	str	r0, [r7, #4]
    9cb0:	460b      	mov	r3, r1
    9cb2:	70fb      	strb	r3, [r7, #3]
    *emit_get_cur_to_write_code_info(emit, 1) = val;
    9cb4:	2101      	movs	r1, #1
    9cb6:	6878      	ldr	r0, [r7, #4]
    9cb8:	f7ff ffc0 	bl	9c3c <emit_get_cur_to_write_code_info>
    9cbc:	4602      	mov	r2, r0
    9cbe:	78fb      	ldrb	r3, [r7, #3]
    9cc0:	7013      	strb	r3, [r2, #0]
}
    9cc2:	bf00      	nop
    9cc4:	3708      	adds	r7, #8
    9cc6:	46bd      	mov	sp, r7
    9cc8:	bd80      	pop	{r7, pc}

00009cca <emit_write_code_info_uint>:

STATIC void emit_write_code_info_uint(emit_t* emit, mp_uint_t val) {
    9cca:	b580      	push	{r7, lr}
    9ccc:	b082      	sub	sp, #8
    9cce:	af00      	add	r7, sp, #0
    9cd0:	6078      	str	r0, [r7, #4]
    9cd2:	6039      	str	r1, [r7, #0]
    emit_write_uint(emit, emit_get_cur_to_write_code_info, val);
    9cd4:	683a      	ldr	r2, [r7, #0]
    9cd6:	4904      	ldr	r1, [pc, #16]	; (9ce8 <emit_write_code_info_uint+0x1e>)
    9cd8:	6878      	ldr	r0, [r7, #4]
    9cda:	f7ff ff70 	bl	9bbe <emit_write_uint>
}
    9cde:	bf00      	nop
    9ce0:	3708      	adds	r7, #8
    9ce2:	46bd      	mov	sp, r7
    9ce4:	bd80      	pop	{r7, pc}
    9ce6:	bf00      	nop
    9ce8:	00009c3d 	.word	0x00009c3d

00009cec <emit_write_code_info_qstr>:

STATIC void emit_write_code_info_qstr(emit_t *emit, qstr qst) {
    9cec:	b580      	push	{r7, lr}
    9cee:	b084      	sub	sp, #16
    9cf0:	af00      	add	r7, sp, #0
    9cf2:	6078      	str	r0, [r7, #4]
    9cf4:	6039      	str	r1, [r7, #0]
    #if MICROPY_PERSISTENT_CODE
    assert((qst >> 16) == 0);
    9cf6:	683b      	ldr	r3, [r7, #0]
    9cf8:	0c1b      	lsrs	r3, r3, #16
    9cfa:	2b00      	cmp	r3, #0
    9cfc:	d005      	beq.n	9d0a <emit_write_code_info_qstr+0x1e>
    9cfe:	4b0c      	ldr	r3, [pc, #48]	; (9d30 <emit_write_code_info_qstr+0x44>)
    9d00:	4a0c      	ldr	r2, [pc, #48]	; (9d34 <emit_write_code_info_qstr+0x48>)
    9d02:	2184      	movs	r1, #132	; 0x84
    9d04:	480c      	ldr	r0, [pc, #48]	; (9d38 <emit_write_code_info_qstr+0x4c>)
    9d06:	f013 f8eb 	bl	1cee0 <__assert_func>
    byte *c = emit_get_cur_to_write_code_info(emit, 2);
    9d0a:	2102      	movs	r1, #2
    9d0c:	6878      	ldr	r0, [r7, #4]
    9d0e:	f7ff ff95 	bl	9c3c <emit_get_cur_to_write_code_info>
    9d12:	60f8      	str	r0, [r7, #12]
    c[0] = qst;
    9d14:	683b      	ldr	r3, [r7, #0]
    9d16:	b2da      	uxtb	r2, r3
    9d18:	68fb      	ldr	r3, [r7, #12]
    9d1a:	701a      	strb	r2, [r3, #0]
    c[1] = qst >> 8;
    9d1c:	68fb      	ldr	r3, [r7, #12]
    9d1e:	3301      	adds	r3, #1
    9d20:	683a      	ldr	r2, [r7, #0]
    9d22:	0a12      	lsrs	r2, r2, #8
    9d24:	b2d2      	uxtb	r2, r2
    9d26:	701a      	strb	r2, [r3, #0]
    #else
    emit_write_uint(emit, emit_get_cur_to_write_code_info, qst);
    #endif
}
    9d28:	bf00      	nop
    9d2a:	3710      	adds	r7, #16
    9d2c:	46bd      	mov	sp, r7
    9d2e:	bd80      	pop	{r7, pc}
    9d30:	00022b34 	.word	0x00022b34
    9d34:	00022d18 	.word	0x00022d18
    9d38:	00022b20 	.word	0x00022b20

00009d3c <emit_get_cur_to_write_bytecode>:
    }
}
#endif

// all functions must go through this one to emit byte code
STATIC byte *emit_get_cur_to_write_bytecode(emit_t *emit, int num_bytes_to_write) {
    9d3c:	b580      	push	{r7, lr}
    9d3e:	b084      	sub	sp, #16
    9d40:	af00      	add	r7, sp, #0
    9d42:	6078      	str	r0, [r7, #4]
    9d44:	6039      	str	r1, [r7, #0]
    //printf("emit %d\n", num_bytes_to_write);
    if (emit->pass < MP_PASS_EMIT) {
    9d46:	687b      	ldr	r3, [r7, #4]
    9d48:	795b      	ldrb	r3, [r3, #5]
    9d4a:	2b03      	cmp	r3, #3
    9d4c:	d807      	bhi.n	9d5e <emit_get_cur_to_write_bytecode+0x22>
        emit->bytecode_offset += num_bytes_to_write;
    9d4e:	687b      	ldr	r3, [r7, #4]
    9d50:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    9d52:	683b      	ldr	r3, [r7, #0]
    9d54:	441a      	add	r2, r3
    9d56:	687b      	ldr	r3, [r7, #4]
    9d58:	629a      	str	r2, [r3, #40]	; 0x28
        return emit->dummy_data;
    9d5a:	687b      	ldr	r3, [r7, #4]
    9d5c:	e01d      	b.n	9d9a <emit_get_cur_to_write_bytecode+0x5e>
    } else {
        assert(emit->bytecode_offset + num_bytes_to_write <= emit->bytecode_size);
    9d5e:	687b      	ldr	r3, [r7, #4]
    9d60:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    9d62:	683b      	ldr	r3, [r7, #0]
    9d64:	441a      	add	r2, r3
    9d66:	687b      	ldr	r3, [r7, #4]
    9d68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    9d6a:	429a      	cmp	r2, r3
    9d6c:	d905      	bls.n	9d7a <emit_get_cur_to_write_bytecode+0x3e>
    9d6e:	4b0d      	ldr	r3, [pc, #52]	; (9da4 <emit_get_cur_to_write_bytecode+0x68>)
    9d70:	4a0d      	ldr	r2, [pc, #52]	; (9da8 <emit_get_cur_to_write_bytecode+0x6c>)
    9d72:	21b2      	movs	r1, #178	; 0xb2
    9d74:	480d      	ldr	r0, [pc, #52]	; (9dac <emit_get_cur_to_write_bytecode+0x70>)
    9d76:	f013 f8b3 	bl	1cee0 <__assert_func>
        byte *c = emit->code_base + emit->code_info_size + emit->bytecode_offset;
    9d7a:	687b      	ldr	r3, [r7, #4]
    9d7c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    9d7e:	687b      	ldr	r3, [r7, #4]
    9d80:	6a59      	ldr	r1, [r3, #36]	; 0x24
    9d82:	687b      	ldr	r3, [r7, #4]
    9d84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    9d86:	440b      	add	r3, r1
    9d88:	4413      	add	r3, r2
    9d8a:	60fb      	str	r3, [r7, #12]
        emit->bytecode_offset += num_bytes_to_write;
    9d8c:	687b      	ldr	r3, [r7, #4]
    9d8e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    9d90:	683b      	ldr	r3, [r7, #0]
    9d92:	441a      	add	r2, r3
    9d94:	687b      	ldr	r3, [r7, #4]
    9d96:	629a      	str	r2, [r3, #40]	; 0x28
        return c;
    9d98:	68fb      	ldr	r3, [r7, #12]
    }
}
    9d9a:	4618      	mov	r0, r3
    9d9c:	3710      	adds	r7, #16
    9d9e:	46bd      	mov	sp, r7
    9da0:	bd80      	pop	{r7, pc}
    9da2:	bf00      	nop
    9da4:	00022b48 	.word	0x00022b48
    9da8:	00022d34 	.word	0x00022d34
    9dac:	00022b20 	.word	0x00022b20

00009db0 <emit_write_bytecode_byte>:

STATIC void emit_write_bytecode_byte(emit_t *emit, byte b1) {
    9db0:	b580      	push	{r7, lr}
    9db2:	b084      	sub	sp, #16
    9db4:	af00      	add	r7, sp, #0
    9db6:	6078      	str	r0, [r7, #4]
    9db8:	460b      	mov	r3, r1
    9dba:	70fb      	strb	r3, [r7, #3]
    byte *c = emit_get_cur_to_write_bytecode(emit, 1);
    9dbc:	2101      	movs	r1, #1
    9dbe:	6878      	ldr	r0, [r7, #4]
    9dc0:	f7ff ffbc 	bl	9d3c <emit_get_cur_to_write_bytecode>
    9dc4:	60f8      	str	r0, [r7, #12]
    c[0] = b1;
    9dc6:	68fb      	ldr	r3, [r7, #12]
    9dc8:	78fa      	ldrb	r2, [r7, #3]
    9dca:	701a      	strb	r2, [r3, #0]
}
    9dcc:	bf00      	nop
    9dce:	3710      	adds	r7, #16
    9dd0:	46bd      	mov	sp, r7
    9dd2:	bd80      	pop	{r7, pc}

00009dd4 <emit_write_bytecode_byte_byte>:

STATIC void emit_write_bytecode_byte_byte(emit_t* emit, byte b1, byte b2) {
    9dd4:	b580      	push	{r7, lr}
    9dd6:	b084      	sub	sp, #16
    9dd8:	af00      	add	r7, sp, #0
    9dda:	6078      	str	r0, [r7, #4]
    9ddc:	460b      	mov	r3, r1
    9dde:	70fb      	strb	r3, [r7, #3]
    9de0:	4613      	mov	r3, r2
    9de2:	70bb      	strb	r3, [r7, #2]
    byte *c = emit_get_cur_to_write_bytecode(emit, 2);
    9de4:	2102      	movs	r1, #2
    9de6:	6878      	ldr	r0, [r7, #4]
    9de8:	f7ff ffa8 	bl	9d3c <emit_get_cur_to_write_bytecode>
    9dec:	60f8      	str	r0, [r7, #12]
    c[0] = b1;
    9dee:	68fb      	ldr	r3, [r7, #12]
    9df0:	78fa      	ldrb	r2, [r7, #3]
    9df2:	701a      	strb	r2, [r3, #0]
    c[1] = b2;
    9df4:	68fb      	ldr	r3, [r7, #12]
    9df6:	3301      	adds	r3, #1
    9df8:	78ba      	ldrb	r2, [r7, #2]
    9dfa:	701a      	strb	r2, [r3, #0]
}
    9dfc:	bf00      	nop
    9dfe:	3710      	adds	r7, #16
    9e00:	46bd      	mov	sp, r7
    9e02:	bd80      	pop	{r7, pc}

00009e04 <emit_write_bytecode_byte_int>:

// Similar to emit_write_bytecode_uint(), just some extra handling to encode sign
STATIC void emit_write_bytecode_byte_int(emit_t *emit, byte b1, mp_int_t num) {
    9e04:	b580      	push	{r7, lr}
    9e06:	b088      	sub	sp, #32
    9e08:	af00      	add	r7, sp, #0
    9e0a:	60f8      	str	r0, [r7, #12]
    9e0c:	460b      	mov	r3, r1
    9e0e:	607a      	str	r2, [r7, #4]
    9e10:	72fb      	strb	r3, [r7, #11]
    emit_write_bytecode_byte(emit, b1);
    9e12:	7afb      	ldrb	r3, [r7, #11]
    9e14:	4619      	mov	r1, r3
    9e16:	68f8      	ldr	r0, [r7, #12]
    9e18:	f7ff ffca 	bl	9db0 <emit_write_bytecode_byte>

    // We store each 7 bits in a separate byte, and that's how many bytes needed
    byte buf[BYTES_FOR_INT];
    byte *p = buf + sizeof(buf);
    9e1c:	f107 0310 	add.w	r3, r7, #16
    9e20:	3305      	adds	r3, #5
    9e22:	61fb      	str	r3, [r7, #28]
    // We encode in little-ending order, but store in big-endian, to help decoding
    do {
        *--p = num & 0x7f;
    9e24:	69fb      	ldr	r3, [r7, #28]
    9e26:	3b01      	subs	r3, #1
    9e28:	61fb      	str	r3, [r7, #28]
    9e2a:	687b      	ldr	r3, [r7, #4]
    9e2c:	b2db      	uxtb	r3, r3
    9e2e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    9e32:	b2da      	uxtb	r2, r3
    9e34:	69fb      	ldr	r3, [r7, #28]
    9e36:	701a      	strb	r2, [r3, #0]
        num >>= 7;
    9e38:	687b      	ldr	r3, [r7, #4]
    9e3a:	11db      	asrs	r3, r3, #7
    9e3c:	607b      	str	r3, [r7, #4]
    } while (num != 0 && num != -1);
    9e3e:	687b      	ldr	r3, [r7, #4]
    9e40:	2b00      	cmp	r3, #0
    9e42:	d003      	beq.n	9e4c <emit_write_bytecode_byte_int+0x48>
    9e44:	687b      	ldr	r3, [r7, #4]
    9e46:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    9e4a:	d1eb      	bne.n	9e24 <emit_write_bytecode_byte_int+0x20>
    // Make sure that highest bit we stored (mask 0x40) matches sign
    // of the number. If not, store extra byte just to encode sign
    if (num == -1 && (*p & 0x40) == 0) {
    9e4c:	687b      	ldr	r3, [r7, #4]
    9e4e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    9e52:	d10c      	bne.n	9e6e <emit_write_bytecode_byte_int+0x6a>
    9e54:	69fb      	ldr	r3, [r7, #28]
    9e56:	781b      	ldrb	r3, [r3, #0]
    9e58:	f003 0340 	and.w	r3, r3, #64	; 0x40
    9e5c:	2b00      	cmp	r3, #0
    9e5e:	d106      	bne.n	9e6e <emit_write_bytecode_byte_int+0x6a>
        *--p = 0x7f;
    9e60:	69fb      	ldr	r3, [r7, #28]
    9e62:	3b01      	subs	r3, #1
    9e64:	61fb      	str	r3, [r7, #28]
    9e66:	69fb      	ldr	r3, [r7, #28]
    9e68:	227f      	movs	r2, #127	; 0x7f
    9e6a:	701a      	strb	r2, [r3, #0]
    9e6c:	e00e      	b.n	9e8c <emit_write_bytecode_byte_int+0x88>
    } else if (num == 0 && (*p & 0x40) != 0) {
    9e6e:	687b      	ldr	r3, [r7, #4]
    9e70:	2b00      	cmp	r3, #0
    9e72:	d10b      	bne.n	9e8c <emit_write_bytecode_byte_int+0x88>
    9e74:	69fb      	ldr	r3, [r7, #28]
    9e76:	781b      	ldrb	r3, [r3, #0]
    9e78:	f003 0340 	and.w	r3, r3, #64	; 0x40
    9e7c:	2b00      	cmp	r3, #0
    9e7e:	d005      	beq.n	9e8c <emit_write_bytecode_byte_int+0x88>
        *--p = 0;
    9e80:	69fb      	ldr	r3, [r7, #28]
    9e82:	3b01      	subs	r3, #1
    9e84:	61fb      	str	r3, [r7, #28]
    9e86:	69fb      	ldr	r3, [r7, #28]
    9e88:	2200      	movs	r2, #0
    9e8a:	701a      	strb	r2, [r3, #0]
    }

    byte *c = emit_get_cur_to_write_bytecode(emit, buf + sizeof(buf) - p);
    9e8c:	f107 0310 	add.w	r3, r7, #16
    9e90:	3305      	adds	r3, #5
    9e92:	461a      	mov	r2, r3
    9e94:	69fb      	ldr	r3, [r7, #28]
    9e96:	1ad3      	subs	r3, r2, r3
    9e98:	4619      	mov	r1, r3
    9e9a:	68f8      	ldr	r0, [r7, #12]
    9e9c:	f7ff ff4e 	bl	9d3c <emit_get_cur_to_write_bytecode>
    9ea0:	61b8      	str	r0, [r7, #24]
    while (p != buf + sizeof(buf) - 1) {
    9ea2:	e00a      	b.n	9eba <emit_write_bytecode_byte_int+0xb6>
        *c++ = *p++ | 0x80;
    9ea4:	69bb      	ldr	r3, [r7, #24]
    9ea6:	1c5a      	adds	r2, r3, #1
    9ea8:	61ba      	str	r2, [r7, #24]
    9eaa:	69fa      	ldr	r2, [r7, #28]
    9eac:	1c51      	adds	r1, r2, #1
    9eae:	61f9      	str	r1, [r7, #28]
    9eb0:	7812      	ldrb	r2, [r2, #0]
    9eb2:	f062 027f 	orn	r2, r2, #127	; 0x7f
    9eb6:	b2d2      	uxtb	r2, r2
    9eb8:	701a      	strb	r2, [r3, #0]
    while (p != buf + sizeof(buf) - 1) {
    9eba:	f107 0310 	add.w	r3, r7, #16
    9ebe:	3304      	adds	r3, #4
    9ec0:	69fa      	ldr	r2, [r7, #28]
    9ec2:	4293      	cmp	r3, r2
    9ec4:	d1ee      	bne.n	9ea4 <emit_write_bytecode_byte_int+0xa0>
    }
    *c = *p;
    9ec6:	69fb      	ldr	r3, [r7, #28]
    9ec8:	781a      	ldrb	r2, [r3, #0]
    9eca:	69bb      	ldr	r3, [r7, #24]
    9ecc:	701a      	strb	r2, [r3, #0]
}
    9ece:	bf00      	nop
    9ed0:	3720      	adds	r7, #32
    9ed2:	46bd      	mov	sp, r7
    9ed4:	bd80      	pop	{r7, pc}

00009ed6 <emit_write_bytecode_byte_uint>:

STATIC void emit_write_bytecode_byte_uint(emit_t *emit, byte b, mp_uint_t val) {
    9ed6:	b580      	push	{r7, lr}
    9ed8:	b084      	sub	sp, #16
    9eda:	af00      	add	r7, sp, #0
    9edc:	60f8      	str	r0, [r7, #12]
    9ede:	460b      	mov	r3, r1
    9ee0:	607a      	str	r2, [r7, #4]
    9ee2:	72fb      	strb	r3, [r7, #11]
    emit_write_bytecode_byte(emit, b);
    9ee4:	7afb      	ldrb	r3, [r7, #11]
    9ee6:	4619      	mov	r1, r3
    9ee8:	68f8      	ldr	r0, [r7, #12]
    9eea:	f7ff ff61 	bl	9db0 <emit_write_bytecode_byte>
    emit_write_uint(emit, emit_get_cur_to_write_bytecode, val);
    9eee:	687a      	ldr	r2, [r7, #4]
    9ef0:	4903      	ldr	r1, [pc, #12]	; (9f00 <emit_write_bytecode_byte_uint+0x2a>)
    9ef2:	68f8      	ldr	r0, [r7, #12]
    9ef4:	f7ff fe63 	bl	9bbe <emit_write_uint>
}
    9ef8:	bf00      	nop
    9efa:	3710      	adds	r7, #16
    9efc:	46bd      	mov	sp, r7
    9efe:	bd80      	pop	{r7, pc}
    9f00:	00009d3d 	.word	0x00009d3d

00009f04 <emit_write_bytecode_byte_const>:

#if MICROPY_PERSISTENT_CODE
STATIC void emit_write_bytecode_byte_const(emit_t *emit, byte b, mp_uint_t n, mp_uint_t c) {
    9f04:	b580      	push	{r7, lr}
    9f06:	b084      	sub	sp, #16
    9f08:	af00      	add	r7, sp, #0
    9f0a:	60f8      	str	r0, [r7, #12]
    9f0c:	607a      	str	r2, [r7, #4]
    9f0e:	603b      	str	r3, [r7, #0]
    9f10:	460b      	mov	r3, r1
    9f12:	72fb      	strb	r3, [r7, #11]
    if (emit->pass == MP_PASS_EMIT) {
    9f14:	68fb      	ldr	r3, [r7, #12]
    9f16:	795b      	ldrb	r3, [r3, #5]
    9f18:	2b04      	cmp	r3, #4
    9f1a:	d106      	bne.n	9f2a <emit_write_bytecode_byte_const+0x26>
        emit->const_table[n] = c;
    9f1c:	68fb      	ldr	r3, [r7, #12]
    9f1e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
    9f20:	687b      	ldr	r3, [r7, #4]
    9f22:	009b      	lsls	r3, r3, #2
    9f24:	4413      	add	r3, r2
    9f26:	683a      	ldr	r2, [r7, #0]
    9f28:	601a      	str	r2, [r3, #0]
    }
    emit_write_bytecode_byte_uint(emit, b, n);
    9f2a:	7afb      	ldrb	r3, [r7, #11]
    9f2c:	687a      	ldr	r2, [r7, #4]
    9f2e:	4619      	mov	r1, r3
    9f30:	68f8      	ldr	r0, [r7, #12]
    9f32:	f7ff ffd0 	bl	9ed6 <emit_write_bytecode_byte_uint>
}
    9f36:	bf00      	nop
    9f38:	3710      	adds	r7, #16
    9f3a:	46bd      	mov	sp, r7
    9f3c:	bd80      	pop	{r7, pc}

00009f3e <emit_write_bytecode_byte_qstr>:
#endif

STATIC void emit_write_bytecode_byte_qstr(emit_t* emit, byte b, qstr qst) {
    9f3e:	b580      	push	{r7, lr}
    9f40:	b086      	sub	sp, #24
    9f42:	af00      	add	r7, sp, #0
    9f44:	60f8      	str	r0, [r7, #12]
    9f46:	460b      	mov	r3, r1
    9f48:	607a      	str	r2, [r7, #4]
    9f4a:	72fb      	strb	r3, [r7, #11]
    #if MICROPY_PERSISTENT_CODE
    assert((qst >> 16) == 0);
    9f4c:	687b      	ldr	r3, [r7, #4]
    9f4e:	0c1b      	lsrs	r3, r3, #16
    9f50:	2b00      	cmp	r3, #0
    9f52:	d005      	beq.n	9f60 <emit_write_bytecode_byte_qstr+0x22>
    9f54:	4b0e      	ldr	r3, [pc, #56]	; (9f90 <emit_write_bytecode_byte_qstr+0x52>)
    9f56:	4a0f      	ldr	r2, [pc, #60]	; (9f94 <emit_write_bytecode_byte_qstr+0x56>)
    9f58:	21ef      	movs	r1, #239	; 0xef
    9f5a:	480f      	ldr	r0, [pc, #60]	; (9f98 <emit_write_bytecode_byte_qstr+0x5a>)
    9f5c:	f012 ffc0 	bl	1cee0 <__assert_func>
    byte *c = emit_get_cur_to_write_bytecode(emit, 3);
    9f60:	2103      	movs	r1, #3
    9f62:	68f8      	ldr	r0, [r7, #12]
    9f64:	f7ff feea 	bl	9d3c <emit_get_cur_to_write_bytecode>
    9f68:	6178      	str	r0, [r7, #20]
    c[0] = b;
    9f6a:	697b      	ldr	r3, [r7, #20]
    9f6c:	7afa      	ldrb	r2, [r7, #11]
    9f6e:	701a      	strb	r2, [r3, #0]
    c[1] = qst;
    9f70:	697b      	ldr	r3, [r7, #20]
    9f72:	3301      	adds	r3, #1
    9f74:	687a      	ldr	r2, [r7, #4]
    9f76:	b2d2      	uxtb	r2, r2
    9f78:	701a      	strb	r2, [r3, #0]
    c[2] = qst >> 8;
    9f7a:	697b      	ldr	r3, [r7, #20]
    9f7c:	3302      	adds	r3, #2
    9f7e:	687a      	ldr	r2, [r7, #4]
    9f80:	0a12      	lsrs	r2, r2, #8
    9f82:	b2d2      	uxtb	r2, r2
    9f84:	701a      	strb	r2, [r3, #0]
    #else
    emit_write_bytecode_byte_uint(emit, b, qst);
    #endif
}
    9f86:	bf00      	nop
    9f88:	3718      	adds	r7, #24
    9f8a:	46bd      	mov	sp, r7
    9f8c:	bd80      	pop	{r7, pc}
    9f8e:	bf00      	nop
    9f90:	00022b34 	.word	0x00022b34
    9f94:	00022d54 	.word	0x00022d54
    9f98:	00022b20 	.word	0x00022b20

00009f9c <emit_write_bytecode_byte_obj>:

STATIC void emit_write_bytecode_byte_obj(emit_t *emit, byte b, mp_obj_t obj) {
    9f9c:	b580      	push	{r7, lr}
    9f9e:	b084      	sub	sp, #16
    9fa0:	af00      	add	r7, sp, #0
    9fa2:	60f8      	str	r0, [r7, #12]
    9fa4:	460b      	mov	r3, r1
    9fa6:	607a      	str	r2, [r7, #4]
    9fa8:	72fb      	strb	r3, [r7, #11]
    #if MICROPY_PERSISTENT_CODE
    emit_write_bytecode_byte_const(emit, b,
        emit->scope->num_pos_args + emit->scope->num_kwonly_args
    9faa:	68fb      	ldr	r3, [r7, #12]
    9fac:	68db      	ldr	r3, [r3, #12]
    9fae:	8b9b      	ldrh	r3, [r3, #28]
    9fb0:	461a      	mov	r2, r3
    9fb2:	68fb      	ldr	r3, [r7, #12]
    9fb4:	68db      	ldr	r3, [r3, #12]
    9fb6:	8bdb      	ldrh	r3, [r3, #30]
    9fb8:	441a      	add	r2, r3
        + emit->ct_cur_obj++, (mp_uint_t)obj);
    9fba:	68fb      	ldr	r3, [r7, #12]
    9fbc:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
    9fbe:	1c59      	adds	r1, r3, #1
    9fc0:	b288      	uxth	r0, r1
    9fc2:	68f9      	ldr	r1, [r7, #12]
    9fc4:	8688      	strh	r0, [r1, #52]	; 0x34
    9fc6:	4413      	add	r3, r2
    emit_write_bytecode_byte_const(emit, b,
    9fc8:	461a      	mov	r2, r3
    9fca:	687b      	ldr	r3, [r7, #4]
    9fcc:	7af9      	ldrb	r1, [r7, #11]
    9fce:	68f8      	ldr	r0, [r7, #12]
    9fd0:	f7ff ff98 	bl	9f04 <emit_write_bytecode_byte_const>
    mp_obj_t *c = (mp_obj_t*)emit_get_cur_to_write_bytecode(emit, sizeof(mp_obj_t));
    // Verify thar c is already uint-aligned
    assert(c == MP_ALIGN(c, sizeof(mp_obj_t)));
    *c = obj;
    #endif
}
    9fd4:	bf00      	nop
    9fd6:	3710      	adds	r7, #16
    9fd8:	46bd      	mov	sp, r7
    9fda:	bd80      	pop	{r7, pc}

00009fdc <emit_write_bytecode_byte_raw_code>:

STATIC void emit_write_bytecode_byte_raw_code(emit_t *emit, byte b, mp_raw_code_t *rc) {
    9fdc:	b580      	push	{r7, lr}
    9fde:	b084      	sub	sp, #16
    9fe0:	af00      	add	r7, sp, #0
    9fe2:	60f8      	str	r0, [r7, #12]
    9fe4:	460b      	mov	r3, r1
    9fe6:	607a      	str	r2, [r7, #4]
    9fe8:	72fb      	strb	r3, [r7, #11]
    #if MICROPY_PERSISTENT_CODE
    emit_write_bytecode_byte_const(emit, b,
        emit->scope->num_pos_args + emit->scope->num_kwonly_args
    9fea:	68fb      	ldr	r3, [r7, #12]
    9fec:	68db      	ldr	r3, [r3, #12]
    9fee:	8b9b      	ldrh	r3, [r3, #28]
    9ff0:	461a      	mov	r2, r3
    9ff2:	68fb      	ldr	r3, [r7, #12]
    9ff4:	68db      	ldr	r3, [r3, #12]
    9ff6:	8bdb      	ldrh	r3, [r3, #30]
    9ff8:	4413      	add	r3, r2
        + emit->ct_num_obj + emit->ct_cur_raw_code++, (mp_uint_t)(uintptr_t)rc);
    9ffa:	68fa      	ldr	r2, [r7, #12]
    9ffc:	8ed2      	ldrh	r2, [r2, #54]	; 0x36
    9ffe:	441a      	add	r2, r3
    a000:	68fb      	ldr	r3, [r7, #12]
    a002:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
    a004:	1c59      	adds	r1, r3, #1
    a006:	b288      	uxth	r0, r1
    a008:	68f9      	ldr	r1, [r7, #12]
    a00a:	8708      	strh	r0, [r1, #56]	; 0x38
    a00c:	4413      	add	r3, r2
    emit_write_bytecode_byte_const(emit, b,
    a00e:	461a      	mov	r2, r3
    a010:	687b      	ldr	r3, [r7, #4]
    a012:	7af9      	ldrb	r1, [r7, #11]
    a014:	68f8      	ldr	r0, [r7, #12]
    a016:	f7ff ff75 	bl	9f04 <emit_write_bytecode_byte_const>
    void **c = (void**)emit_get_cur_to_write_bytecode(emit, sizeof(void*));
    // Verify thar c is already uint-aligned
    assert(c == MP_ALIGN(c, sizeof(void*)));
    *c = rc;
    #endif
}
    a01a:	bf00      	nop
    a01c:	3710      	adds	r7, #16
    a01e:	46bd      	mov	sp, r7
    a020:	bd80      	pop	{r7, pc}

0000a022 <emit_write_bytecode_byte_unsigned_label>:

// unsigned labels are relative to ip following this instruction, stored as 16 bits
STATIC void emit_write_bytecode_byte_unsigned_label(emit_t *emit, byte b1, mp_uint_t label) {
    a022:	b580      	push	{r7, lr}
    a024:	b086      	sub	sp, #24
    a026:	af00      	add	r7, sp, #0
    a028:	60f8      	str	r0, [r7, #12]
    a02a:	460b      	mov	r3, r1
    a02c:	607a      	str	r2, [r7, #4]
    a02e:	72fb      	strb	r3, [r7, #11]
    mp_uint_t bytecode_offset;
    if (emit->pass < MP_PASS_EMIT) {
    a030:	68fb      	ldr	r3, [r7, #12]
    a032:	795b      	ldrb	r3, [r3, #5]
    a034:	2b03      	cmp	r3, #3
    a036:	d802      	bhi.n	a03e <emit_write_bytecode_byte_unsigned_label+0x1c>
        bytecode_offset = 0;
    a038:	2300      	movs	r3, #0
    a03a:	617b      	str	r3, [r7, #20]
    a03c:	e00a      	b.n	a054 <emit_write_bytecode_byte_unsigned_label+0x32>
    } else {
        bytecode_offset = emit->label_offsets[label] - emit->bytecode_offset - 3;
    a03e:	68fb      	ldr	r3, [r7, #12]
    a040:	69da      	ldr	r2, [r3, #28]
    a042:	687b      	ldr	r3, [r7, #4]
    a044:	009b      	lsls	r3, r3, #2
    a046:	4413      	add	r3, r2
    a048:	681a      	ldr	r2, [r3, #0]
    a04a:	68fb      	ldr	r3, [r7, #12]
    a04c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    a04e:	1ad3      	subs	r3, r2, r3
    a050:	3b03      	subs	r3, #3
    a052:	617b      	str	r3, [r7, #20]
    }
    byte *c = emit_get_cur_to_write_bytecode(emit, 3);
    a054:	2103      	movs	r1, #3
    a056:	68f8      	ldr	r0, [r7, #12]
    a058:	f7ff fe70 	bl	9d3c <emit_get_cur_to_write_bytecode>
    a05c:	6138      	str	r0, [r7, #16]
    c[0] = b1;
    a05e:	693b      	ldr	r3, [r7, #16]
    a060:	7afa      	ldrb	r2, [r7, #11]
    a062:	701a      	strb	r2, [r3, #0]
    c[1] = bytecode_offset;
    a064:	693b      	ldr	r3, [r7, #16]
    a066:	3301      	adds	r3, #1
    a068:	697a      	ldr	r2, [r7, #20]
    a06a:	b2d2      	uxtb	r2, r2
    a06c:	701a      	strb	r2, [r3, #0]
    c[2] = bytecode_offset >> 8;
    a06e:	693b      	ldr	r3, [r7, #16]
    a070:	3302      	adds	r3, #2
    a072:	697a      	ldr	r2, [r7, #20]
    a074:	0a12      	lsrs	r2, r2, #8
    a076:	b2d2      	uxtb	r2, r2
    a078:	701a      	strb	r2, [r3, #0]
}
    a07a:	bf00      	nop
    a07c:	3718      	adds	r7, #24
    a07e:	46bd      	mov	sp, r7
    a080:	bd80      	pop	{r7, pc}

0000a082 <emit_write_bytecode_byte_signed_label>:

// signed labels are relative to ip following this instruction, stored as 16 bits, in excess
STATIC void emit_write_bytecode_byte_signed_label(emit_t *emit, byte b1, mp_uint_t label) {
    a082:	b580      	push	{r7, lr}
    a084:	b086      	sub	sp, #24
    a086:	af00      	add	r7, sp, #0
    a088:	60f8      	str	r0, [r7, #12]
    a08a:	460b      	mov	r3, r1
    a08c:	607a      	str	r2, [r7, #4]
    a08e:	72fb      	strb	r3, [r7, #11]
    int bytecode_offset;
    if (emit->pass < MP_PASS_EMIT) {
    a090:	68fb      	ldr	r3, [r7, #12]
    a092:	795b      	ldrb	r3, [r3, #5]
    a094:	2b03      	cmp	r3, #3
    a096:	d802      	bhi.n	a09e <emit_write_bytecode_byte_signed_label+0x1c>
        bytecode_offset = 0;
    a098:	2300      	movs	r3, #0
    a09a:	617b      	str	r3, [r7, #20]
    a09c:	e00c      	b.n	a0b8 <emit_write_bytecode_byte_signed_label+0x36>
    } else {
        bytecode_offset = emit->label_offsets[label] - emit->bytecode_offset - 3 + 0x8000;
    a09e:	68fb      	ldr	r3, [r7, #12]
    a0a0:	69da      	ldr	r2, [r3, #28]
    a0a2:	687b      	ldr	r3, [r7, #4]
    a0a4:	009b      	lsls	r3, r3, #2
    a0a6:	4413      	add	r3, r2
    a0a8:	681a      	ldr	r2, [r3, #0]
    a0aa:	68fb      	ldr	r3, [r7, #12]
    a0ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    a0ae:	1ad3      	subs	r3, r2, r3
    a0b0:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
    a0b4:	337d      	adds	r3, #125	; 0x7d
    a0b6:	617b      	str	r3, [r7, #20]
    }
    byte *c = emit_get_cur_to_write_bytecode(emit, 3);
    a0b8:	2103      	movs	r1, #3
    a0ba:	68f8      	ldr	r0, [r7, #12]
    a0bc:	f7ff fe3e 	bl	9d3c <emit_get_cur_to_write_bytecode>
    a0c0:	6138      	str	r0, [r7, #16]
    c[0] = b1;
    a0c2:	693b      	ldr	r3, [r7, #16]
    a0c4:	7afa      	ldrb	r2, [r7, #11]
    a0c6:	701a      	strb	r2, [r3, #0]
    c[1] = bytecode_offset;
    a0c8:	693b      	ldr	r3, [r7, #16]
    a0ca:	3301      	adds	r3, #1
    a0cc:	697a      	ldr	r2, [r7, #20]
    a0ce:	b2d2      	uxtb	r2, r2
    a0d0:	701a      	strb	r2, [r3, #0]
    c[2] = bytecode_offset >> 8;
    a0d2:	693b      	ldr	r3, [r7, #16]
    a0d4:	3302      	adds	r3, #2
    a0d6:	697a      	ldr	r2, [r7, #20]
    a0d8:	1212      	asrs	r2, r2, #8
    a0da:	b2d2      	uxtb	r2, r2
    a0dc:	701a      	strb	r2, [r3, #0]
}
    a0de:	bf00      	nop
    a0e0:	3718      	adds	r7, #24
    a0e2:	46bd      	mov	sp, r7
    a0e4:	bd80      	pop	{r7, pc}

0000a0e6 <mp_emit_bc_start_pass>:

void mp_emit_bc_start_pass(emit_t *emit, pass_kind_t pass, scope_t *scope) {
    a0e6:	b580      	push	{r7, lr}
    a0e8:	b08c      	sub	sp, #48	; 0x30
    a0ea:	af00      	add	r7, sp, #0
    a0ec:	60f8      	str	r0, [r7, #12]
    a0ee:	60b9      	str	r1, [r7, #8]
    a0f0:	607a      	str	r2, [r7, #4]
    emit->pass = pass;
    a0f2:	68bb      	ldr	r3, [r7, #8]
    a0f4:	b2da      	uxtb	r2, r3
    a0f6:	68fb      	ldr	r3, [r7, #12]
    a0f8:	715a      	strb	r2, [r3, #5]
    emit->stack_size = 0;
    a0fa:	68fb      	ldr	r3, [r7, #12]
    a0fc:	2200      	movs	r2, #0
    a0fe:	609a      	str	r2, [r3, #8]
    emit->last_emit_was_return_value = false;
    a100:	68fb      	ldr	r3, [r7, #12]
    a102:	2200      	movs	r2, #0
    a104:	719a      	strb	r2, [r3, #6]
    emit->scope = scope;
    a106:	68fb      	ldr	r3, [r7, #12]
    a108:	687a      	ldr	r2, [r7, #4]
    a10a:	60da      	str	r2, [r3, #12]
    emit->last_source_line_offset = 0;
    a10c:	68fb      	ldr	r3, [r7, #12]
    a10e:	2200      	movs	r2, #0
    a110:	611a      	str	r2, [r3, #16]
    emit->last_source_line = 1;
    a112:	68fb      	ldr	r3, [r7, #12]
    a114:	2201      	movs	r2, #1
    a116:	615a      	str	r2, [r3, #20]
    #ifndef NDEBUG
    // With debugging enabled labels are checked for unique assignment
    if (pass < MP_PASS_EMIT && emit->label_offsets != NULL) {
    a118:	68bb      	ldr	r3, [r7, #8]
    a11a:	2b03      	cmp	r3, #3
    a11c:	d80d      	bhi.n	a13a <mp_emit_bc_start_pass+0x54>
    a11e:	68fb      	ldr	r3, [r7, #12]
    a120:	69db      	ldr	r3, [r3, #28]
    a122:	2b00      	cmp	r3, #0
    a124:	d009      	beq.n	a13a <mp_emit_bc_start_pass+0x54>
        memset(emit->label_offsets, -1, emit->max_num_labels * sizeof(mp_uint_t));
    a126:	68fb      	ldr	r3, [r7, #12]
    a128:	69d8      	ldr	r0, [r3, #28]
    a12a:	68fb      	ldr	r3, [r7, #12]
    a12c:	699b      	ldr	r3, [r3, #24]
    a12e:	009b      	lsls	r3, r3, #2
    a130:	461a      	mov	r2, r3
    a132:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    a136:	f014 fa95 	bl	1e664 <memset>
    }
    #endif
    emit->bytecode_offset = 0;
    a13a:	68fb      	ldr	r3, [r7, #12]
    a13c:	2200      	movs	r2, #0
    a13e:	629a      	str	r2, [r3, #40]	; 0x28
    emit->code_info_offset = 0;
    a140:	68fb      	ldr	r3, [r7, #12]
    a142:	2200      	movs	r2, #0
    a144:	621a      	str	r2, [r3, #32]

    // Write local state size and exception stack size.
    {
        mp_uint_t n_state = scope->num_locals + scope->stack_size;
    a146:	687b      	ldr	r3, [r7, #4]
    a148:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
    a14a:	461a      	mov	r2, r3
    a14c:	687b      	ldr	r3, [r7, #4]
    a14e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
    a150:	4413      	add	r3, r2
    a152:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (n_state == 0) {
    a154:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    a156:	2b00      	cmp	r3, #0
    a158:	d101      	bne.n	a15e <mp_emit_bc_start_pass+0x78>
            // Need at least 1 entry in the state, in the case an exception is
            // propagated through this function, the exception is returned in
            // the highest slot in the state (fastn[0], see vm.c).
            n_state = 1;
    a15a:	2301      	movs	r3, #1
    a15c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        emit_write_code_info_uint(emit, n_state);
    a15e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
    a160:	68f8      	ldr	r0, [r7, #12]
    a162:	f7ff fdb2 	bl	9cca <emit_write_code_info_uint>
        emit_write_code_info_uint(emit, scope->exc_stack_size);
    a166:	687b      	ldr	r3, [r7, #4]
    a168:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
    a16a:	4619      	mov	r1, r3
    a16c:	68f8      	ldr	r0, [r7, #12]
    a16e:	f7ff fdac 	bl	9cca <emit_write_code_info_uint>
    }

    // Write scope flags and number of arguments.
    // TODO check that num args all fit in a byte
    emit_write_code_info_byte(emit, emit->scope->scope_flags);
    a172:	68fb      	ldr	r3, [r7, #12]
    a174:	68db      	ldr	r3, [r3, #12]
    a176:	8b1b      	ldrh	r3, [r3, #24]
    a178:	b2db      	uxtb	r3, r3
    a17a:	4619      	mov	r1, r3
    a17c:	68f8      	ldr	r0, [r7, #12]
    a17e:	f7ff fd93 	bl	9ca8 <emit_write_code_info_byte>
    emit_write_code_info_byte(emit, emit->scope->num_pos_args);
    a182:	68fb      	ldr	r3, [r7, #12]
    a184:	68db      	ldr	r3, [r3, #12]
    a186:	8b9b      	ldrh	r3, [r3, #28]
    a188:	b2db      	uxtb	r3, r3
    a18a:	4619      	mov	r1, r3
    a18c:	68f8      	ldr	r0, [r7, #12]
    a18e:	f7ff fd8b 	bl	9ca8 <emit_write_code_info_byte>
    emit_write_code_info_byte(emit, emit->scope->num_kwonly_args);
    a192:	68fb      	ldr	r3, [r7, #12]
    a194:	68db      	ldr	r3, [r3, #12]
    a196:	8bdb      	ldrh	r3, [r3, #30]
    a198:	b2db      	uxtb	r3, r3
    a19a:	4619      	mov	r1, r3
    a19c:	68f8      	ldr	r0, [r7, #12]
    a19e:	f7ff fd83 	bl	9ca8 <emit_write_code_info_byte>
    emit_write_code_info_byte(emit, emit->scope->num_def_pos_args);
    a1a2:	68fb      	ldr	r3, [r7, #12]
    a1a4:	68db      	ldr	r3, [r3, #12]
    a1a6:	8c1b      	ldrh	r3, [r3, #32]
    a1a8:	b2db      	uxtb	r3, r3
    a1aa:	4619      	mov	r1, r3
    a1ac:	68f8      	ldr	r0, [r7, #12]
    a1ae:	f7ff fd7b 	bl	9ca8 <emit_write_code_info_byte>

    // Write size of the rest of the code info.  We don't know how big this
    // variable uint will be on the MP_PASS_CODE_SIZE pass so we reserve 2 bytes
    // for it and hope that is enough!  TODO assert this or something.
    if (pass == MP_PASS_EMIT) {
    a1b2:	68bb      	ldr	r3, [r7, #8]
    a1b4:	2b04      	cmp	r3, #4
    a1b6:	d109      	bne.n	a1cc <mp_emit_bc_start_pass+0xe6>
        emit_write_code_info_uint(emit, emit->code_info_size - emit->code_info_offset);
    a1b8:	68fb      	ldr	r3, [r7, #12]
    a1ba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    a1bc:	68fb      	ldr	r3, [r7, #12]
    a1be:	6a1b      	ldr	r3, [r3, #32]
    a1c0:	1ad3      	subs	r3, r2, r3
    a1c2:	4619      	mov	r1, r3
    a1c4:	68f8      	ldr	r0, [r7, #12]
    a1c6:	f7ff fd80 	bl	9cca <emit_write_code_info_uint>
    a1ca:	e003      	b.n	a1d4 <mp_emit_bc_start_pass+0xee>
    } else  {
        emit_get_cur_to_write_code_info(emit, 2);
    a1cc:	2102      	movs	r1, #2
    a1ce:	68f8      	ldr	r0, [r7, #12]
    a1d0:	f7ff fd34 	bl	9c3c <emit_get_cur_to_write_code_info>
    }

    // Write the name and source file of this function.
    emit_write_code_info_qstr(emit, scope->simple_name);
    a1d4:	687b      	ldr	r3, [r7, #4]
    a1d6:	8adb      	ldrh	r3, [r3, #22]
    a1d8:	4619      	mov	r1, r3
    a1da:	68f8      	ldr	r0, [r7, #12]
    a1dc:	f7ff fd86 	bl	9cec <emit_write_code_info_qstr>
    emit_write_code_info_qstr(emit, scope->source_file);
    a1e0:	687b      	ldr	r3, [r7, #4]
    a1e2:	8a9b      	ldrh	r3, [r3, #20]
    a1e4:	4619      	mov	r1, r3
    a1e6:	68f8      	ldr	r0, [r7, #12]
    a1e8:	f7ff fd80 	bl	9cec <emit_write_code_info_qstr>

    // bytecode prelude: initialise closed over variables
    for (int i = 0; i < scope->id_info_len; i++) {
    a1ec:	2300      	movs	r3, #0
    a1ee:	62bb      	str	r3, [r7, #40]	; 0x28
    a1f0:	e01e      	b.n	a230 <mp_emit_bc_start_pass+0x14a>
        id_info_t *id = &scope->id_info[i];
    a1f2:	687b      	ldr	r3, [r7, #4]
    a1f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    a1f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
    a1f8:	00db      	lsls	r3, r3, #3
    a1fa:	4413      	add	r3, r2
    a1fc:	61bb      	str	r3, [r7, #24]
        if (id->kind == ID_INFO_KIND_CELL) {
    a1fe:	69bb      	ldr	r3, [r7, #24]
    a200:	781b      	ldrb	r3, [r3, #0]
    a202:	2b04      	cmp	r3, #4
    a204:	d111      	bne.n	a22a <mp_emit_bc_start_pass+0x144>
            assert(id->local_num < 255);
    a206:	69bb      	ldr	r3, [r7, #24]
    a208:	885b      	ldrh	r3, [r3, #2]
    a20a:	2bfe      	cmp	r3, #254	; 0xfe
    a20c:	d906      	bls.n	a21c <mp_emit_bc_start_pass+0x136>
    a20e:	4b32      	ldr	r3, [pc, #200]	; (a2d8 <mp_emit_bc_start_pass+0x1f2>)
    a210:	4a32      	ldr	r2, [pc, #200]	; (a2dc <mp_emit_bc_start_pass+0x1f6>)
    a212:	f44f 71b5 	mov.w	r1, #362	; 0x16a
    a216:	4832      	ldr	r0, [pc, #200]	; (a2e0 <mp_emit_bc_start_pass+0x1fa>)
    a218:	f012 fe62 	bl	1cee0 <__assert_func>
            emit_write_bytecode_byte(emit, id->local_num); // write the local which should be converted to a cell
    a21c:	69bb      	ldr	r3, [r7, #24]
    a21e:	885b      	ldrh	r3, [r3, #2]
    a220:	b2db      	uxtb	r3, r3
    a222:	4619      	mov	r1, r3
    a224:	68f8      	ldr	r0, [r7, #12]
    a226:	f7ff fdc3 	bl	9db0 <emit_write_bytecode_byte>
    for (int i = 0; i < scope->id_info_len; i++) {
    a22a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    a22c:	3301      	adds	r3, #1
    a22e:	62bb      	str	r3, [r7, #40]	; 0x28
    a230:	687b      	ldr	r3, [r7, #4]
    a232:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
    a234:	461a      	mov	r2, r3
    a236:	6abb      	ldr	r3, [r7, #40]	; 0x28
    a238:	429a      	cmp	r2, r3
    a23a:	dcda      	bgt.n	a1f2 <mp_emit_bc_start_pass+0x10c>
        }
    }
    emit_write_bytecode_byte(emit, 255); // end of list sentinel
    a23c:	21ff      	movs	r1, #255	; 0xff
    a23e:	68f8      	ldr	r0, [r7, #12]
    a240:	f7ff fdb6 	bl	9db0 <emit_write_bytecode_byte>

    #if MICROPY_PERSISTENT_CODE
    emit->ct_cur_obj = 0;
    a244:	68fb      	ldr	r3, [r7, #12]
    a246:	2200      	movs	r2, #0
    a248:	869a      	strh	r2, [r3, #52]	; 0x34
    emit->ct_cur_raw_code = 0;
    a24a:	68fb      	ldr	r3, [r7, #12]
    a24c:	2200      	movs	r2, #0
    a24e:	871a      	strh	r2, [r3, #56]	; 0x38
    #endif

    if (pass == MP_PASS_EMIT) {
    a250:	68bb      	ldr	r3, [r7, #8]
    a252:	2b04      	cmp	r3, #4
    a254:	d13c      	bne.n	a2d0 <mp_emit_bc_start_pass+0x1ea>
        // parameter we use "*" as its name (since no argument can ever be named
        // "*").  We could use a blank qstr but "*" is better for debugging.
        // Note: there is some wasted RAM here for the case of storing a qstr
        // for each closed-over variable, and maybe there is a better way to do
        // it, but that would require changes to mp_setup_code_state.
        for (int i = 0; i < scope->num_pos_args + scope->num_kwonly_args; i++) {
    a256:	2300      	movs	r3, #0
    a258:	627b      	str	r3, [r7, #36]	; 0x24
    a25a:	e030      	b.n	a2be <mp_emit_bc_start_pass+0x1d8>
            qstr qst = MP_QSTR__star_;
    a25c:	2327      	movs	r3, #39	; 0x27
    a25e:	623b      	str	r3, [r7, #32]
            for (int j = 0; j < scope->id_info_len; ++j) {
    a260:	2300      	movs	r3, #0
    a262:	61fb      	str	r3, [r7, #28]
    a264:	e018      	b.n	a298 <mp_emit_bc_start_pass+0x1b2>
                id_info_t *id = &scope->id_info[j];
    a266:	687b      	ldr	r3, [r7, #4]
    a268:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    a26a:	69fb      	ldr	r3, [r7, #28]
    a26c:	00db      	lsls	r3, r3, #3
    a26e:	4413      	add	r3, r2
    a270:	617b      	str	r3, [r7, #20]
                if ((id->flags & ID_FLAG_IS_PARAM) && id->local_num == i) {
    a272:	697b      	ldr	r3, [r7, #20]
    a274:	785b      	ldrb	r3, [r3, #1]
    a276:	f003 0301 	and.w	r3, r3, #1
    a27a:	2b00      	cmp	r3, #0
    a27c:	d009      	beq.n	a292 <mp_emit_bc_start_pass+0x1ac>
    a27e:	697b      	ldr	r3, [r7, #20]
    a280:	885b      	ldrh	r3, [r3, #2]
    a282:	461a      	mov	r2, r3
    a284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    a286:	429a      	cmp	r2, r3
    a288:	d103      	bne.n	a292 <mp_emit_bc_start_pass+0x1ac>
                    qst = id->qst;
    a28a:	697b      	ldr	r3, [r7, #20]
    a28c:	685b      	ldr	r3, [r3, #4]
    a28e:	623b      	str	r3, [r7, #32]
                    break;
    a290:	e008      	b.n	a2a4 <mp_emit_bc_start_pass+0x1be>
            for (int j = 0; j < scope->id_info_len; ++j) {
    a292:	69fb      	ldr	r3, [r7, #28]
    a294:	3301      	adds	r3, #1
    a296:	61fb      	str	r3, [r7, #28]
    a298:	687b      	ldr	r3, [r7, #4]
    a29a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
    a29c:	461a      	mov	r2, r3
    a29e:	69fb      	ldr	r3, [r7, #28]
    a2a0:	429a      	cmp	r2, r3
    a2a2:	dce0      	bgt.n	a266 <mp_emit_bc_start_pass+0x180>
                }
            }
            emit->const_table[i] = (mp_uint_t)MP_OBJ_NEW_QSTR(qst);
    a2a4:	68fb      	ldr	r3, [r7, #12]
    a2a6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
    a2a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    a2aa:	009b      	lsls	r3, r3, #2
    a2ac:	4413      	add	r3, r2
    a2ae:	6a3a      	ldr	r2, [r7, #32]
    a2b0:	0092      	lsls	r2, r2, #2
    a2b2:	f042 0202 	orr.w	r2, r2, #2
    a2b6:	601a      	str	r2, [r3, #0]
        for (int i = 0; i < scope->num_pos_args + scope->num_kwonly_args; i++) {
    a2b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    a2ba:	3301      	adds	r3, #1
    a2bc:	627b      	str	r3, [r7, #36]	; 0x24
    a2be:	687b      	ldr	r3, [r7, #4]
    a2c0:	8b9b      	ldrh	r3, [r3, #28]
    a2c2:	461a      	mov	r2, r3
    a2c4:	687b      	ldr	r3, [r7, #4]
    a2c6:	8bdb      	ldrh	r3, [r3, #30]
    a2c8:	441a      	add	r2, r3
    a2ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    a2cc:	429a      	cmp	r2, r3
    a2ce:	dcc5      	bgt.n	a25c <mp_emit_bc_start_pass+0x176>
        }
    }
}
    a2d0:	bf00      	nop
    a2d2:	3730      	adds	r7, #48	; 0x30
    a2d4:	46bd      	mov	sp, r7
    a2d6:	bd80      	pop	{r7, pc}
    a2d8:	00022b8c 	.word	0x00022b8c
    a2dc:	00022d74 	.word	0x00022d74
    a2e0:	00022b20 	.word	0x00022b20

0000a2e4 <mp_emit_bc_end_pass>:

void mp_emit_bc_end_pass(emit_t *emit) {
    a2e4:	b590      	push	{r4, r7, lr}
    a2e6:	b085      	sub	sp, #20
    a2e8:	af02      	add	r7, sp, #8
    a2ea:	6078      	str	r0, [r7, #4]
    if (emit->pass == MP_PASS_SCOPE) {
    a2ec:	687b      	ldr	r3, [r7, #4]
    a2ee:	795b      	ldrb	r3, [r3, #5]
    a2f0:	2b01      	cmp	r3, #1
    a2f2:	d068      	beq.n	a3c6 <mp_emit_bc_end_pass+0xe2>
        return;
    }

    // check stack is back to zero size
    assert(emit->stack_size == 0);
    a2f4:	687b      	ldr	r3, [r7, #4]
    a2f6:	689b      	ldr	r3, [r3, #8]
    a2f8:	2b00      	cmp	r3, #0
    a2fa:	d006      	beq.n	a30a <mp_emit_bc_end_pass+0x26>
    a2fc:	4b34      	ldr	r3, [pc, #208]	; (a3d0 <mp_emit_bc_end_pass+0xec>)
    a2fe:	4a35      	ldr	r2, [pc, #212]	; (a3d4 <mp_emit_bc_end_pass+0xf0>)
    a300:	f240 1199 	movw	r1, #409	; 0x199
    a304:	4834      	ldr	r0, [pc, #208]	; (a3d8 <mp_emit_bc_end_pass+0xf4>)
    a306:	f012 fdeb 	bl	1cee0 <__assert_func>

    emit_write_code_info_byte(emit, 0); // end of line number info
    a30a:	2100      	movs	r1, #0
    a30c:	6878      	ldr	r0, [r7, #4]
    a30e:	f7ff fccb 	bl	9ca8 <emit_write_code_info_byte>

    #if MICROPY_PERSISTENT_CODE
    assert(emit->pass <= MP_PASS_STACK_SIZE || (emit->ct_num_obj == emit->ct_cur_obj));
    a312:	687b      	ldr	r3, [r7, #4]
    a314:	795b      	ldrb	r3, [r3, #5]
    a316:	2b02      	cmp	r3, #2
    a318:	d90c      	bls.n	a334 <mp_emit_bc_end_pass+0x50>
    a31a:	687b      	ldr	r3, [r7, #4]
    a31c:	8eda      	ldrh	r2, [r3, #54]	; 0x36
    a31e:	687b      	ldr	r3, [r7, #4]
    a320:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
    a322:	429a      	cmp	r2, r3
    a324:	d006      	beq.n	a334 <mp_emit_bc_end_pass+0x50>
    a326:	4b2d      	ldr	r3, [pc, #180]	; (a3dc <mp_emit_bc_end_pass+0xf8>)
    a328:	4a2a      	ldr	r2, [pc, #168]	; (a3d4 <mp_emit_bc_end_pass+0xf0>)
    a32a:	f44f 71cf 	mov.w	r1, #414	; 0x19e
    a32e:	482a      	ldr	r0, [pc, #168]	; (a3d8 <mp_emit_bc_end_pass+0xf4>)
    a330:	f012 fdd6 	bl	1cee0 <__assert_func>
    emit->ct_num_obj = emit->ct_cur_obj;
    a334:	687b      	ldr	r3, [r7, #4]
    a336:	8e9a      	ldrh	r2, [r3, #52]	; 0x34
    a338:	687b      	ldr	r3, [r7, #4]
    a33a:	86da      	strh	r2, [r3, #54]	; 0x36
    #endif

    if (emit->pass == MP_PASS_CODE_SIZE) {
    a33c:	687b      	ldr	r3, [r7, #4]
    a33e:	795b      	ldrb	r3, [r3, #5]
    a340:	2b03      	cmp	r3, #3
    a342:	d128      	bne.n	a396 <mp_emit_bc_end_pass+0xb2>
        // so bytecode is aligned
        emit->code_info_offset = (size_t)MP_ALIGN(emit->code_info_offset, sizeof(mp_uint_t));
        #endif

        // calculate size of total code-info + bytecode, in bytes
        emit->code_info_size = emit->code_info_offset;
    a344:	687b      	ldr	r3, [r7, #4]
    a346:	6a1a      	ldr	r2, [r3, #32]
    a348:	687b      	ldr	r3, [r7, #4]
    a34a:	625a      	str	r2, [r3, #36]	; 0x24
        emit->bytecode_size = emit->bytecode_offset;
    a34c:	687b      	ldr	r3, [r7, #4]
    a34e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    a350:	687b      	ldr	r3, [r7, #4]
    a352:	62da      	str	r2, [r3, #44]	; 0x2c
        emit->code_base = m_new0(byte, emit->code_info_size + emit->bytecode_size);
    a354:	687b      	ldr	r3, [r7, #4]
    a356:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    a358:	687b      	ldr	r3, [r7, #4]
    a35a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    a35c:	4413      	add	r3, r2
    a35e:	4618      	mov	r0, r3
    a360:	f7f6 f810 	bl	384 <m_malloc0>
    a364:	4602      	mov	r2, r0
    a366:	687b      	ldr	r3, [r7, #4]
    a368:	631a      	str	r2, [r3, #48]	; 0x30

        #if MICROPY_PERSISTENT_CODE
        emit->const_table = m_new0(mp_uint_t,
    a36a:	687b      	ldr	r3, [r7, #4]
    a36c:	68db      	ldr	r3, [r3, #12]
    a36e:	8b9b      	ldrh	r3, [r3, #28]
    a370:	461a      	mov	r2, r3
    a372:	687b      	ldr	r3, [r7, #4]
    a374:	68db      	ldr	r3, [r3, #12]
    a376:	8bdb      	ldrh	r3, [r3, #30]
    a378:	4413      	add	r3, r2
    a37a:	687a      	ldr	r2, [r7, #4]
    a37c:	8e92      	ldrh	r2, [r2, #52]	; 0x34
    a37e:	4413      	add	r3, r2
    a380:	687a      	ldr	r2, [r7, #4]
    a382:	8f12      	ldrh	r2, [r2, #56]	; 0x38
    a384:	4413      	add	r3, r2
    a386:	009b      	lsls	r3, r3, #2
    a388:	4618      	mov	r0, r3
    a38a:	f7f5 fffb 	bl	384 <m_malloc0>
    a38e:	4602      	mov	r2, r0
    a390:	687b      	ldr	r3, [r7, #4]
    a392:	63da      	str	r2, [r3, #60]	; 0x3c
    a394:	e018      	b.n	a3c8 <mp_emit_bc_end_pass+0xe4>
        #else
        emit->const_table = m_new0(mp_uint_t,
            emit->scope->num_pos_args + emit->scope->num_kwonly_args);
        #endif

    } else if (emit->pass == MP_PASS_EMIT) {
    a396:	687b      	ldr	r3, [r7, #4]
    a398:	795b      	ldrb	r3, [r3, #5]
    a39a:	2b04      	cmp	r3, #4
    a39c:	d114      	bne.n	a3c8 <mp_emit_bc_end_pass+0xe4>
        mp_emit_glue_assign_bytecode(emit->scope->raw_code, emit->code_base,
    a39e:	687b      	ldr	r3, [r7, #4]
    a3a0:	68db      	ldr	r3, [r3, #12]
    a3a2:	6918      	ldr	r0, [r3, #16]
    a3a4:	687b      	ldr	r3, [r7, #4]
    a3a6:	6b19      	ldr	r1, [r3, #48]	; 0x30
            #if MICROPY_PERSISTENT_CODE_SAVE || MICROPY_DEBUG_PRINTERS
            emit->code_info_size + emit->bytecode_size,
    a3a8:	687b      	ldr	r3, [r7, #4]
    a3aa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    a3ac:	687b      	ldr	r3, [r7, #4]
    a3ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        mp_emit_glue_assign_bytecode(emit->scope->raw_code, emit->code_base,
    a3b0:	441a      	add	r2, r3
            #endif
            emit->const_table,
    a3b2:	687b      	ldr	r3, [r7, #4]
    a3b4:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
            #if MICROPY_PERSISTENT_CODE_SAVE
            emit->ct_cur_obj, emit->ct_cur_raw_code,
            #endif
            emit->scope->scope_flags);
    a3b6:	687b      	ldr	r3, [r7, #4]
    a3b8:	68db      	ldr	r3, [r3, #12]
    a3ba:	8b1b      	ldrh	r3, [r3, #24]
        mp_emit_glue_assign_bytecode(emit->scope->raw_code, emit->code_base,
    a3bc:	9300      	str	r3, [sp, #0]
    a3be:	4623      	mov	r3, r4
    a3c0:	f001 f822 	bl	b408 <mp_emit_glue_assign_bytecode>
    a3c4:	e000      	b.n	a3c8 <mp_emit_bc_end_pass+0xe4>
        return;
    a3c6:	bf00      	nop
    }
}
    a3c8:	370c      	adds	r7, #12
    a3ca:	46bd      	mov	sp, r7
    a3cc:	bd90      	pop	{r4, r7, pc}
    a3ce:	bf00      	nop
    a3d0:	00022ba0 	.word	0x00022ba0
    a3d4:	00022d8c 	.word	0x00022d8c
    a3d8:	00022b20 	.word	0x00022b20
    a3dc:	00022bb8 	.word	0x00022bb8

0000a3e0 <mp_emit_bc_last_emit_was_return_value>:

bool mp_emit_bc_last_emit_was_return_value(emit_t *emit) {
    a3e0:	b480      	push	{r7}
    a3e2:	b083      	sub	sp, #12
    a3e4:	af00      	add	r7, sp, #0
    a3e6:	6078      	str	r0, [r7, #4]
    return emit->last_emit_was_return_value;
    a3e8:	687b      	ldr	r3, [r7, #4]
    a3ea:	799b      	ldrb	r3, [r3, #6]
    a3ec:	2b00      	cmp	r3, #0
    a3ee:	bf14      	ite	ne
    a3f0:	2301      	movne	r3, #1
    a3f2:	2300      	moveq	r3, #0
    a3f4:	b2db      	uxtb	r3, r3
}
    a3f6:	4618      	mov	r0, r3
    a3f8:	370c      	adds	r7, #12
    a3fa:	46bd      	mov	sp, r7
    a3fc:	f85d 7b04 	ldr.w	r7, [sp], #4
    a400:	4770      	bx	lr

0000a402 <mp_emit_bc_adjust_stack_size>:

void mp_emit_bc_adjust_stack_size(emit_t *emit, mp_int_t delta) {
    a402:	b580      	push	{r7, lr}
    a404:	b082      	sub	sp, #8
    a406:	af00      	add	r7, sp, #0
    a408:	6078      	str	r0, [r7, #4]
    a40a:	6039      	str	r1, [r7, #0]
    if (emit->pass == MP_PASS_SCOPE) {
    a40c:	687b      	ldr	r3, [r7, #4]
    a40e:	795b      	ldrb	r3, [r3, #5]
    a410:	2b01      	cmp	r3, #1
    a412:	d023      	beq.n	a45c <mp_emit_bc_adjust_stack_size+0x5a>
        return;
    }
    assert((mp_int_t)emit->stack_size + delta >= 0);
    a414:	687b      	ldr	r3, [r7, #4]
    a416:	689a      	ldr	r2, [r3, #8]
    a418:	683b      	ldr	r3, [r7, #0]
    a41a:	4413      	add	r3, r2
    a41c:	2b00      	cmp	r3, #0
    a41e:	da06      	bge.n	a42e <mp_emit_bc_adjust_stack_size+0x2c>
    a420:	4b10      	ldr	r3, [pc, #64]	; (a464 <mp_emit_bc_adjust_stack_size+0x62>)
    a422:	4a11      	ldr	r2, [pc, #68]	; (a468 <mp_emit_bc_adjust_stack_size+0x66>)
    a424:	f240 11cb 	movw	r1, #459	; 0x1cb
    a428:	4810      	ldr	r0, [pc, #64]	; (a46c <mp_emit_bc_adjust_stack_size+0x6a>)
    a42a:	f012 fd59 	bl	1cee0 <__assert_func>
    emit->stack_size += delta;
    a42e:	687b      	ldr	r3, [r7, #4]
    a430:	689a      	ldr	r2, [r3, #8]
    a432:	683b      	ldr	r3, [r7, #0]
    a434:	441a      	add	r2, r3
    a436:	687b      	ldr	r3, [r7, #4]
    a438:	609a      	str	r2, [r3, #8]
    if (emit->stack_size > emit->scope->stack_size) {
    a43a:	687b      	ldr	r3, [r7, #4]
    a43c:	689b      	ldr	r3, [r3, #8]
    a43e:	687a      	ldr	r2, [r7, #4]
    a440:	68d2      	ldr	r2, [r2, #12]
    a442:	8c92      	ldrh	r2, [r2, #36]	; 0x24
    a444:	4293      	cmp	r3, r2
    a446:	dd05      	ble.n	a454 <mp_emit_bc_adjust_stack_size+0x52>
        emit->scope->stack_size = emit->stack_size;
    a448:	687b      	ldr	r3, [r7, #4]
    a44a:	68db      	ldr	r3, [r3, #12]
    a44c:	687a      	ldr	r2, [r7, #4]
    a44e:	6892      	ldr	r2, [r2, #8]
    a450:	b292      	uxth	r2, r2
    a452:	849a      	strh	r2, [r3, #36]	; 0x24
    }
    emit->last_emit_was_return_value = false;
    a454:	687b      	ldr	r3, [r7, #4]
    a456:	2200      	movs	r2, #0
    a458:	719a      	strb	r2, [r3, #6]
    a45a:	e000      	b.n	a45e <mp_emit_bc_adjust_stack_size+0x5c>
        return;
    a45c:	bf00      	nop
}
    a45e:	3708      	adds	r7, #8
    a460:	46bd      	mov	sp, r7
    a462:	bd80      	pop	{r7, pc}
    a464:	00022c04 	.word	0x00022c04
    a468:	00022da0 	.word	0x00022da0
    a46c:	00022b20 	.word	0x00022b20

0000a470 <emit_bc_pre>:

static inline void emit_bc_pre(emit_t *emit, mp_int_t stack_size_delta) {
    a470:	b580      	push	{r7, lr}
    a472:	b082      	sub	sp, #8
    a474:	af00      	add	r7, sp, #0
    a476:	6078      	str	r0, [r7, #4]
    a478:	6039      	str	r1, [r7, #0]
    mp_emit_bc_adjust_stack_size(emit, stack_size_delta);
    a47a:	6839      	ldr	r1, [r7, #0]
    a47c:	6878      	ldr	r0, [r7, #4]
    a47e:	f7ff ffc0 	bl	a402 <mp_emit_bc_adjust_stack_size>
}
    a482:	bf00      	nop
    a484:	3708      	adds	r7, #8
    a486:	46bd      	mov	sp, r7
    a488:	bd80      	pop	{r7, pc}

0000a48a <mp_emit_bc_set_source_line>:

void mp_emit_bc_set_source_line(emit_t *emit, mp_uint_t source_line) {
    a48a:	b480      	push	{r7}
    a48c:	b083      	sub	sp, #12
    a48e:	af00      	add	r7, sp, #0
    a490:	6078      	str	r0, [r7, #4]
    a492:	6039      	str	r1, [r7, #0]
    }
#else
    (void)emit;
    (void)source_line;
#endif
}
    a494:	bf00      	nop
    a496:	370c      	adds	r7, #12
    a498:	46bd      	mov	sp, r7
    a49a:	f85d 7b04 	ldr.w	r7, [sp], #4
    a49e:	4770      	bx	lr

0000a4a0 <mp_emit_bc_label_assign>:

void mp_emit_bc_label_assign(emit_t *emit, mp_uint_t l) {
    a4a0:	b580      	push	{r7, lr}
    a4a2:	b082      	sub	sp, #8
    a4a4:	af00      	add	r7, sp, #0
    a4a6:	6078      	str	r0, [r7, #4]
    a4a8:	6039      	str	r1, [r7, #0]
    emit_bc_pre(emit, 0);
    a4aa:	2100      	movs	r1, #0
    a4ac:	6878      	ldr	r0, [r7, #4]
    a4ae:	f7ff ffdf 	bl	a470 <emit_bc_pre>
    if (emit->pass == MP_PASS_SCOPE) {
    a4b2:	687b      	ldr	r3, [r7, #4]
    a4b4:	795b      	ldrb	r3, [r3, #5]
    a4b6:	2b01      	cmp	r3, #1
    a4b8:	d039      	beq.n	a52e <mp_emit_bc_label_assign+0x8e>
        return;
    }
    assert(l < emit->max_num_labels);
    a4ba:	687b      	ldr	r3, [r7, #4]
    a4bc:	699a      	ldr	r2, [r3, #24]
    a4be:	683b      	ldr	r3, [r7, #0]
    a4c0:	429a      	cmp	r2, r3
    a4c2:	d806      	bhi.n	a4d2 <mp_emit_bc_label_assign+0x32>
    a4c4:	4b1c      	ldr	r3, [pc, #112]	; (a538 <mp_emit_bc_label_assign+0x98>)
    a4c6:	4a1d      	ldr	r2, [pc, #116]	; (a53c <mp_emit_bc_label_assign+0x9c>)
    a4c8:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
    a4cc:	481c      	ldr	r0, [pc, #112]	; (a540 <mp_emit_bc_label_assign+0xa0>)
    a4ce:	f012 fd07 	bl	1cee0 <__assert_func>
    if (emit->pass < MP_PASS_EMIT) {
    a4d2:	687b      	ldr	r3, [r7, #4]
    a4d4:	795b      	ldrb	r3, [r3, #5]
    a4d6:	2b03      	cmp	r3, #3
    a4d8:	d818      	bhi.n	a50c <mp_emit_bc_label_assign+0x6c>
        // assign label offset
        assert(emit->label_offsets[l] == (mp_uint_t)-1);
    a4da:	687b      	ldr	r3, [r7, #4]
    a4dc:	69da      	ldr	r2, [r3, #28]
    a4de:	683b      	ldr	r3, [r7, #0]
    a4e0:	009b      	lsls	r3, r3, #2
    a4e2:	4413      	add	r3, r2
    a4e4:	681b      	ldr	r3, [r3, #0]
    a4e6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    a4ea:	d006      	beq.n	a4fa <mp_emit_bc_label_assign+0x5a>
    a4ec:	4b15      	ldr	r3, [pc, #84]	; (a544 <mp_emit_bc_label_assign+0xa4>)
    a4ee:	4a13      	ldr	r2, [pc, #76]	; (a53c <mp_emit_bc_label_assign+0x9c>)
    a4f0:	f240 11f3 	movw	r1, #499	; 0x1f3
    a4f4:	4812      	ldr	r0, [pc, #72]	; (a540 <mp_emit_bc_label_assign+0xa0>)
    a4f6:	f012 fcf3 	bl	1cee0 <__assert_func>
        emit->label_offsets[l] = emit->bytecode_offset;
    a4fa:	687b      	ldr	r3, [r7, #4]
    a4fc:	69da      	ldr	r2, [r3, #28]
    a4fe:	683b      	ldr	r3, [r7, #0]
    a500:	009b      	lsls	r3, r3, #2
    a502:	4413      	add	r3, r2
    a504:	687a      	ldr	r2, [r7, #4]
    a506:	6a92      	ldr	r2, [r2, #40]	; 0x28
    a508:	601a      	str	r2, [r3, #0]
    a50a:	e011      	b.n	a530 <mp_emit_bc_label_assign+0x90>
    } else {
        // ensure label offset has not changed from MP_PASS_CODE_SIZE to MP_PASS_EMIT
        assert(emit->label_offsets[l] == emit->bytecode_offset);
    a50c:	687b      	ldr	r3, [r7, #4]
    a50e:	69da      	ldr	r2, [r3, #28]
    a510:	683b      	ldr	r3, [r7, #0]
    a512:	009b      	lsls	r3, r3, #2
    a514:	4413      	add	r3, r2
    a516:	681a      	ldr	r2, [r3, #0]
    a518:	687b      	ldr	r3, [r7, #4]
    a51a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    a51c:	429a      	cmp	r2, r3
    a51e:	d007      	beq.n	a530 <mp_emit_bc_label_assign+0x90>
    a520:	4b09      	ldr	r3, [pc, #36]	; (a548 <mp_emit_bc_label_assign+0xa8>)
    a522:	4a06      	ldr	r2, [pc, #24]	; (a53c <mp_emit_bc_label_assign+0x9c>)
    a524:	f240 11f7 	movw	r1, #503	; 0x1f7
    a528:	4805      	ldr	r0, [pc, #20]	; (a540 <mp_emit_bc_label_assign+0xa0>)
    a52a:	f012 fcd9 	bl	1cee0 <__assert_func>
        return;
    a52e:	bf00      	nop
    }
}
    a530:	3708      	adds	r7, #8
    a532:	46bd      	mov	sp, r7
    a534:	bd80      	pop	{r7, pc}
    a536:	bf00      	nop
    a538:	00022c2c 	.word	0x00022c2c
    a53c:	00022dc0 	.word	0x00022dc0
    a540:	00022b20 	.word	0x00022b20
    a544:	00022c48 	.word	0x00022c48
    a548:	00022c70 	.word	0x00022c70

0000a54c <mp_emit_bc_import>:

void mp_emit_bc_import(emit_t *emit, qstr qst, int kind) {
    a54c:	b580      	push	{r7, lr}
    a54e:	b084      	sub	sp, #16
    a550:	af00      	add	r7, sp, #0
    a552:	60f8      	str	r0, [r7, #12]
    a554:	60b9      	str	r1, [r7, #8]
    a556:	607a      	str	r2, [r7, #4]
    MP_STATIC_ASSERT(MP_BC_IMPORT_NAME + MP_EMIT_IMPORT_NAME == MP_BC_IMPORT_NAME);
    MP_STATIC_ASSERT(MP_BC_IMPORT_NAME + MP_EMIT_IMPORT_FROM == MP_BC_IMPORT_FROM);
    if (kind == MP_EMIT_IMPORT_FROM) {
    a558:	687b      	ldr	r3, [r7, #4]
    a55a:	2b01      	cmp	r3, #1
    a55c:	d104      	bne.n	a568 <mp_emit_bc_import+0x1c>
        emit_bc_pre(emit, 1);
    a55e:	2101      	movs	r1, #1
    a560:	68f8      	ldr	r0, [r7, #12]
    a562:	f7ff ff85 	bl	a470 <emit_bc_pre>
    a566:	e004      	b.n	a572 <mp_emit_bc_import+0x26>
    } else {
        emit_bc_pre(emit, -1);
    a568:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    a56c:	68f8      	ldr	r0, [r7, #12]
    a56e:	f7ff ff7f 	bl	a470 <emit_bc_pre>
    }
    if (kind == MP_EMIT_IMPORT_STAR) {
    a572:	687b      	ldr	r3, [r7, #4]
    a574:	2b02      	cmp	r3, #2
    a576:	d104      	bne.n	a582 <mp_emit_bc_import+0x36>
        emit_write_bytecode_byte(emit, MP_BC_IMPORT_STAR);
    a578:	216a      	movs	r1, #106	; 0x6a
    a57a:	68f8      	ldr	r0, [r7, #12]
    a57c:	f7ff fc18 	bl	9db0 <emit_write_bytecode_byte>
    } else {
        emit_write_bytecode_byte_qstr(emit, MP_BC_IMPORT_NAME + kind, qst);
    }
}
    a580:	e008      	b.n	a594 <mp_emit_bc_import+0x48>
        emit_write_bytecode_byte_qstr(emit, MP_BC_IMPORT_NAME + kind, qst);
    a582:	687b      	ldr	r3, [r7, #4]
    a584:	b2db      	uxtb	r3, r3
    a586:	3368      	adds	r3, #104	; 0x68
    a588:	b2db      	uxtb	r3, r3
    a58a:	68ba      	ldr	r2, [r7, #8]
    a58c:	4619      	mov	r1, r3
    a58e:	68f8      	ldr	r0, [r7, #12]
    a590:	f7ff fcd5 	bl	9f3e <emit_write_bytecode_byte_qstr>
}
    a594:	bf00      	nop
    a596:	3710      	adds	r7, #16
    a598:	46bd      	mov	sp, r7
    a59a:	bd80      	pop	{r7, pc}

0000a59c <mp_emit_bc_load_const_tok>:

void mp_emit_bc_load_const_tok(emit_t *emit, mp_token_kind_t tok) {
    a59c:	b580      	push	{r7, lr}
    a59e:	b082      	sub	sp, #8
    a5a0:	af00      	add	r7, sp, #0
    a5a2:	6078      	str	r0, [r7, #4]
    a5a4:	6039      	str	r1, [r7, #0]
    emit_bc_pre(emit, 1);
    a5a6:	2101      	movs	r1, #1
    a5a8:	6878      	ldr	r0, [r7, #4]
    a5aa:	f7ff ff61 	bl	a470 <emit_bc_pre>
    switch (tok) {
    a5ae:	683b      	ldr	r3, [r7, #0]
    a5b0:	2b0e      	cmp	r3, #14
    a5b2:	d008      	beq.n	a5c6 <mp_emit_bc_load_const_tok+0x2a>
    a5b4:	2b0f      	cmp	r3, #15
    a5b6:	d00b      	beq.n	a5d0 <mp_emit_bc_load_const_tok+0x34>
    a5b8:	2b0d      	cmp	r3, #13
    a5ba:	d10e      	bne.n	a5da <mp_emit_bc_load_const_tok+0x3e>
        case MP_TOKEN_KW_FALSE: emit_write_bytecode_byte(emit, MP_BC_LOAD_CONST_FALSE); break;
    a5bc:	2110      	movs	r1, #16
    a5be:	6878      	ldr	r0, [r7, #4]
    a5c0:	f7ff fbf6 	bl	9db0 <emit_write_bytecode_byte>
    a5c4:	e019      	b.n	a5fa <mp_emit_bc_load_const_tok+0x5e>
        case MP_TOKEN_KW_NONE: emit_write_bytecode_byte(emit, MP_BC_LOAD_CONST_NONE); break;
    a5c6:	2111      	movs	r1, #17
    a5c8:	6878      	ldr	r0, [r7, #4]
    a5ca:	f7ff fbf1 	bl	9db0 <emit_write_bytecode_byte>
    a5ce:	e014      	b.n	a5fa <mp_emit_bc_load_const_tok+0x5e>
        case MP_TOKEN_KW_TRUE: emit_write_bytecode_byte(emit, MP_BC_LOAD_CONST_TRUE); break;
    a5d0:	2112      	movs	r1, #18
    a5d2:	6878      	ldr	r0, [r7, #4]
    a5d4:	f7ff fbec 	bl	9db0 <emit_write_bytecode_byte>
    a5d8:	e00f      	b.n	a5fa <mp_emit_bc_load_const_tok+0x5e>
        default:
            assert(tok == MP_TOKEN_ELLIPSIS);
    a5da:	683b      	ldr	r3, [r7, #0]
    a5dc:	2b0c      	cmp	r3, #12
    a5de:	d006      	beq.n	a5ee <mp_emit_bc_load_const_tok+0x52>
    a5e0:	4b08      	ldr	r3, [pc, #32]	; (a604 <mp_emit_bc_load_const_tok+0x68>)
    a5e2:	4a09      	ldr	r2, [pc, #36]	; (a608 <mp_emit_bc_load_const_tok+0x6c>)
    a5e4:	f240 2111 	movw	r1, #529	; 0x211
    a5e8:	4808      	ldr	r0, [pc, #32]	; (a60c <mp_emit_bc_load_const_tok+0x70>)
    a5ea:	f012 fc79 	bl	1cee0 <__assert_func>
            emit_write_bytecode_byte_obj(emit, MP_BC_LOAD_CONST_OBJ, MP_OBJ_FROM_PTR(&mp_const_ellipsis_obj));
    a5ee:	4a08      	ldr	r2, [pc, #32]	; (a610 <mp_emit_bc_load_const_tok+0x74>)
    a5f0:	2117      	movs	r1, #23
    a5f2:	6878      	ldr	r0, [r7, #4]
    a5f4:	f7ff fcd2 	bl	9f9c <emit_write_bytecode_byte_obj>
            break;
    a5f8:	bf00      	nop
    }
}
    a5fa:	bf00      	nop
    a5fc:	3708      	adds	r7, #8
    a5fe:	46bd      	mov	sp, r7
    a600:	bd80      	pop	{r7, pc}
    a602:	bf00      	nop
    a604:	00022ca0 	.word	0x00022ca0
    a608:	00022dd8 	.word	0x00022dd8
    a60c:	00022b20 	.word	0x00022b20
    a610:	00025200 	.word	0x00025200

0000a614 <mp_emit_bc_load_const_small_int>:

void mp_emit_bc_load_const_small_int(emit_t *emit, mp_int_t arg) {
    a614:	b580      	push	{r7, lr}
    a616:	b082      	sub	sp, #8
    a618:	af00      	add	r7, sp, #0
    a61a:	6078      	str	r0, [r7, #4]
    a61c:	6039      	str	r1, [r7, #0]
    emit_bc_pre(emit, 1);
    a61e:	2101      	movs	r1, #1
    a620:	6878      	ldr	r0, [r7, #4]
    a622:	f7ff ff25 	bl	a470 <emit_bc_pre>
    if (-16 <= arg && arg <= 47) {
    a626:	683b      	ldr	r3, [r7, #0]
    a628:	f113 0f10 	cmn.w	r3, #16
    a62c:	db0b      	blt.n	a646 <mp_emit_bc_load_const_small_int+0x32>
    a62e:	683b      	ldr	r3, [r7, #0]
    a630:	2b2f      	cmp	r3, #47	; 0x2f
    a632:	dc08      	bgt.n	a646 <mp_emit_bc_load_const_small_int+0x32>
        emit_write_bytecode_byte(emit, MP_BC_LOAD_CONST_SMALL_INT_MULTI + 16 + arg);
    a634:	683b      	ldr	r3, [r7, #0]
    a636:	b2db      	uxtb	r3, r3
    a638:	3b80      	subs	r3, #128	; 0x80
    a63a:	b2db      	uxtb	r3, r3
    a63c:	4619      	mov	r1, r3
    a63e:	6878      	ldr	r0, [r7, #4]
    a640:	f7ff fbb6 	bl	9db0 <emit_write_bytecode_byte>
    a644:	e004      	b.n	a650 <mp_emit_bc_load_const_small_int+0x3c>
    } else {
        emit_write_bytecode_byte_int(emit, MP_BC_LOAD_CONST_SMALL_INT, arg);
    a646:	683a      	ldr	r2, [r7, #0]
    a648:	2114      	movs	r1, #20
    a64a:	6878      	ldr	r0, [r7, #4]
    a64c:	f7ff fbda 	bl	9e04 <emit_write_bytecode_byte_int>
    }
}
    a650:	bf00      	nop
    a652:	3708      	adds	r7, #8
    a654:	46bd      	mov	sp, r7
    a656:	bd80      	pop	{r7, pc}

0000a658 <mp_emit_bc_load_const_str>:

void mp_emit_bc_load_const_str(emit_t *emit, qstr qst) {
    a658:	b580      	push	{r7, lr}
    a65a:	b082      	sub	sp, #8
    a65c:	af00      	add	r7, sp, #0
    a65e:	6078      	str	r0, [r7, #4]
    a660:	6039      	str	r1, [r7, #0]
    emit_bc_pre(emit, 1);
    a662:	2101      	movs	r1, #1
    a664:	6878      	ldr	r0, [r7, #4]
    a666:	f7ff ff03 	bl	a470 <emit_bc_pre>
    emit_write_bytecode_byte_qstr(emit, MP_BC_LOAD_CONST_STRING, qst);
    a66a:	683a      	ldr	r2, [r7, #0]
    a66c:	2116      	movs	r1, #22
    a66e:	6878      	ldr	r0, [r7, #4]
    a670:	f7ff fc65 	bl	9f3e <emit_write_bytecode_byte_qstr>
}
    a674:	bf00      	nop
    a676:	3708      	adds	r7, #8
    a678:	46bd      	mov	sp, r7
    a67a:	bd80      	pop	{r7, pc}

0000a67c <mp_emit_bc_load_const_obj>:

void mp_emit_bc_load_const_obj(emit_t *emit, mp_obj_t obj) {
    a67c:	b580      	push	{r7, lr}
    a67e:	b082      	sub	sp, #8
    a680:	af00      	add	r7, sp, #0
    a682:	6078      	str	r0, [r7, #4]
    a684:	6039      	str	r1, [r7, #0]
    emit_bc_pre(emit, 1);
    a686:	2101      	movs	r1, #1
    a688:	6878      	ldr	r0, [r7, #4]
    a68a:	f7ff fef1 	bl	a470 <emit_bc_pre>
    emit_write_bytecode_byte_obj(emit, MP_BC_LOAD_CONST_OBJ, obj);
    a68e:	683a      	ldr	r2, [r7, #0]
    a690:	2117      	movs	r1, #23
    a692:	6878      	ldr	r0, [r7, #4]
    a694:	f7ff fc82 	bl	9f9c <emit_write_bytecode_byte_obj>
}
    a698:	bf00      	nop
    a69a:	3708      	adds	r7, #8
    a69c:	46bd      	mov	sp, r7
    a69e:	bd80      	pop	{r7, pc}

0000a6a0 <mp_emit_bc_load_null>:

void mp_emit_bc_load_null(emit_t *emit) {
    a6a0:	b580      	push	{r7, lr}
    a6a2:	b082      	sub	sp, #8
    a6a4:	af00      	add	r7, sp, #0
    a6a6:	6078      	str	r0, [r7, #4]
    emit_bc_pre(emit, 1);
    a6a8:	2101      	movs	r1, #1
    a6aa:	6878      	ldr	r0, [r7, #4]
    a6ac:	f7ff fee0 	bl	a470 <emit_bc_pre>
    emit_write_bytecode_byte(emit, MP_BC_LOAD_NULL);
    a6b0:	2118      	movs	r1, #24
    a6b2:	6878      	ldr	r0, [r7, #4]
    a6b4:	f7ff fb7c 	bl	9db0 <emit_write_bytecode_byte>
}
    a6b8:	bf00      	nop
    a6ba:	3708      	adds	r7, #8
    a6bc:	46bd      	mov	sp, r7
    a6be:	bd80      	pop	{r7, pc}

0000a6c0 <mp_emit_bc_load_local>:

void mp_emit_bc_load_local(emit_t *emit, qstr qst, mp_uint_t local_num, int kind) {
    a6c0:	b580      	push	{r7, lr}
    a6c2:	b084      	sub	sp, #16
    a6c4:	af00      	add	r7, sp, #0
    a6c6:	60f8      	str	r0, [r7, #12]
    a6c8:	60b9      	str	r1, [r7, #8]
    a6ca:	607a      	str	r2, [r7, #4]
    a6cc:	603b      	str	r3, [r7, #0]
    MP_STATIC_ASSERT(MP_BC_LOAD_FAST_N + MP_EMIT_IDOP_LOCAL_FAST == MP_BC_LOAD_FAST_N);
    MP_STATIC_ASSERT(MP_BC_LOAD_FAST_N + MP_EMIT_IDOP_LOCAL_DEREF == MP_BC_LOAD_DEREF);
    (void)qst;
    emit_bc_pre(emit, 1);
    a6ce:	2101      	movs	r1, #1
    a6d0:	68f8      	ldr	r0, [r7, #12]
    a6d2:	f7ff fecd 	bl	a470 <emit_bc_pre>
    if (kind == MP_EMIT_IDOP_LOCAL_FAST && local_num <= 15) {
    a6d6:	683b      	ldr	r3, [r7, #0]
    a6d8:	2b00      	cmp	r3, #0
    a6da:	d10b      	bne.n	a6f4 <mp_emit_bc_load_local+0x34>
    a6dc:	687b      	ldr	r3, [r7, #4]
    a6de:	2b0f      	cmp	r3, #15
    a6e0:	d808      	bhi.n	a6f4 <mp_emit_bc_load_local+0x34>
        emit_write_bytecode_byte(emit, MP_BC_LOAD_FAST_MULTI + local_num);
    a6e2:	687b      	ldr	r3, [r7, #4]
    a6e4:	b2db      	uxtb	r3, r3
    a6e6:	3b50      	subs	r3, #80	; 0x50
    a6e8:	b2db      	uxtb	r3, r3
    a6ea:	4619      	mov	r1, r3
    a6ec:	68f8      	ldr	r0, [r7, #12]
    a6ee:	f7ff fb5f 	bl	9db0 <emit_write_bytecode_byte>
    a6f2:	e008      	b.n	a706 <mp_emit_bc_load_local+0x46>
    } else {
        emit_write_bytecode_byte_uint(emit, MP_BC_LOAD_FAST_N + kind, local_num);
    a6f4:	683b      	ldr	r3, [r7, #0]
    a6f6:	b2db      	uxtb	r3, r3
    a6f8:	3319      	adds	r3, #25
    a6fa:	b2db      	uxtb	r3, r3
    a6fc:	687a      	ldr	r2, [r7, #4]
    a6fe:	4619      	mov	r1, r3
    a700:	68f8      	ldr	r0, [r7, #12]
    a702:	f7ff fbe8 	bl	9ed6 <emit_write_bytecode_byte_uint>
    }
}
    a706:	bf00      	nop
    a708:	3710      	adds	r7, #16
    a70a:	46bd      	mov	sp, r7
    a70c:	bd80      	pop	{r7, pc}

0000a70e <mp_emit_bc_load_global>:

void mp_emit_bc_load_global(emit_t *emit, qstr qst, int kind) {
    a70e:	b580      	push	{r7, lr}
    a710:	b084      	sub	sp, #16
    a712:	af00      	add	r7, sp, #0
    a714:	60f8      	str	r0, [r7, #12]
    a716:	60b9      	str	r1, [r7, #8]
    a718:	607a      	str	r2, [r7, #4]
    MP_STATIC_ASSERT(MP_BC_LOAD_NAME + MP_EMIT_IDOP_GLOBAL_NAME == MP_BC_LOAD_NAME);
    MP_STATIC_ASSERT(MP_BC_LOAD_NAME + MP_EMIT_IDOP_GLOBAL_GLOBAL == MP_BC_LOAD_GLOBAL);
    (void)qst;
    emit_bc_pre(emit, 1);
    a71a:	2101      	movs	r1, #1
    a71c:	68f8      	ldr	r0, [r7, #12]
    a71e:	f7ff fea7 	bl	a470 <emit_bc_pre>
    emit_write_bytecode_byte_qstr(emit, MP_BC_LOAD_NAME + kind, qst);
    a722:	687b      	ldr	r3, [r7, #4]
    a724:	b2db      	uxtb	r3, r3
    a726:	331b      	adds	r3, #27
    a728:	b2db      	uxtb	r3, r3
    a72a:	68ba      	ldr	r2, [r7, #8]
    a72c:	4619      	mov	r1, r3
    a72e:	68f8      	ldr	r0, [r7, #12]
    a730:	f7ff fc05 	bl	9f3e <emit_write_bytecode_byte_qstr>
    if (MICROPY_OPT_CACHE_MAP_LOOKUP_IN_BYTECODE_DYNAMIC) {
        emit_write_bytecode_byte(emit, 0);
    }
}
    a734:	bf00      	nop
    a736:	3710      	adds	r7, #16
    a738:	46bd      	mov	sp, r7
    a73a:	bd80      	pop	{r7, pc}

0000a73c <mp_emit_bc_load_method>:

void mp_emit_bc_load_method(emit_t *emit, qstr qst, bool is_super) {
    a73c:	b580      	push	{r7, lr}
    a73e:	b084      	sub	sp, #16
    a740:	af00      	add	r7, sp, #0
    a742:	60f8      	str	r0, [r7, #12]
    a744:	60b9      	str	r1, [r7, #8]
    a746:	4613      	mov	r3, r2
    a748:	71fb      	strb	r3, [r7, #7]
    emit_bc_pre(emit, 1 - 2 * is_super);
    a74a:	79fb      	ldrb	r3, [r7, #7]
    a74c:	005b      	lsls	r3, r3, #1
    a74e:	f1c3 0301 	rsb	r3, r3, #1
    a752:	4619      	mov	r1, r3
    a754:	68f8      	ldr	r0, [r7, #12]
    a756:	f7ff fe8b 	bl	a470 <emit_bc_pre>
    emit_write_bytecode_byte_qstr(emit, is_super ? MP_BC_LOAD_SUPER_METHOD : MP_BC_LOAD_METHOD, qst);
    a75a:	79fb      	ldrb	r3, [r7, #7]
    a75c:	2b00      	cmp	r3, #0
    a75e:	d001      	beq.n	a764 <mp_emit_bc_load_method+0x28>
    a760:	231f      	movs	r3, #31
    a762:	e000      	b.n	a766 <mp_emit_bc_load_method+0x2a>
    a764:	231e      	movs	r3, #30
    a766:	68ba      	ldr	r2, [r7, #8]
    a768:	4619      	mov	r1, r3
    a76a:	68f8      	ldr	r0, [r7, #12]
    a76c:	f7ff fbe7 	bl	9f3e <emit_write_bytecode_byte_qstr>
}
    a770:	bf00      	nop
    a772:	3710      	adds	r7, #16
    a774:	46bd      	mov	sp, r7
    a776:	bd80      	pop	{r7, pc}

0000a778 <mp_emit_bc_load_build_class>:

void mp_emit_bc_load_build_class(emit_t *emit) {
    a778:	b580      	push	{r7, lr}
    a77a:	b082      	sub	sp, #8
    a77c:	af00      	add	r7, sp, #0
    a77e:	6078      	str	r0, [r7, #4]
    emit_bc_pre(emit, 1);
    a780:	2101      	movs	r1, #1
    a782:	6878      	ldr	r0, [r7, #4]
    a784:	f7ff fe74 	bl	a470 <emit_bc_pre>
    emit_write_bytecode_byte(emit, MP_BC_LOAD_BUILD_CLASS);
    a788:	2120      	movs	r1, #32
    a78a:	6878      	ldr	r0, [r7, #4]
    a78c:	f7ff fb10 	bl	9db0 <emit_write_bytecode_byte>
}
    a790:	bf00      	nop
    a792:	3708      	adds	r7, #8
    a794:	46bd      	mov	sp, r7
    a796:	bd80      	pop	{r7, pc}

0000a798 <mp_emit_bc_subscr>:

void mp_emit_bc_subscr(emit_t *emit, int kind) {
    a798:	b580      	push	{r7, lr}
    a79a:	b082      	sub	sp, #8
    a79c:	af00      	add	r7, sp, #0
    a79e:	6078      	str	r0, [r7, #4]
    a7a0:	6039      	str	r1, [r7, #0]
    if (kind == MP_EMIT_SUBSCR_LOAD) {
    a7a2:	683b      	ldr	r3, [r7, #0]
    a7a4:	2b00      	cmp	r3, #0
    a7a6:	d109      	bne.n	a7bc <mp_emit_bc_subscr+0x24>
        emit_bc_pre(emit, -1);
    a7a8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    a7ac:	6878      	ldr	r0, [r7, #4]
    a7ae:	f7ff fe5f 	bl	a470 <emit_bc_pre>
        emit_write_bytecode_byte(emit, MP_BC_LOAD_SUBSCR);
    a7b2:	2121      	movs	r1, #33	; 0x21
    a7b4:	6878      	ldr	r0, [r7, #4]
    a7b6:	f7ff fafb 	bl	9db0 <emit_write_bytecode_byte>
            mp_emit_bc_rot_three(emit);
        }
        emit_bc_pre(emit, -3);
        emit_write_bytecode_byte(emit, MP_BC_STORE_SUBSCR);
    }
}
    a7ba:	e011      	b.n	a7e0 <mp_emit_bc_subscr+0x48>
        if (kind == MP_EMIT_SUBSCR_DELETE) {
    a7bc:	683b      	ldr	r3, [r7, #0]
    a7be:	2b02      	cmp	r3, #2
    a7c0:	d105      	bne.n	a7ce <mp_emit_bc_subscr+0x36>
            mp_emit_bc_load_null(emit);
    a7c2:	6878      	ldr	r0, [r7, #4]
    a7c4:	f7ff ff6c 	bl	a6a0 <mp_emit_bc_load_null>
            mp_emit_bc_rot_three(emit);
    a7c8:	6878      	ldr	r0, [r7, #4]
    a7ca:	f000 f8e3 	bl	a994 <mp_emit_bc_rot_three>
        emit_bc_pre(emit, -3);
    a7ce:	f06f 0102 	mvn.w	r1, #2
    a7d2:	6878      	ldr	r0, [r7, #4]
    a7d4:	f7ff fe4c 	bl	a470 <emit_bc_pre>
        emit_write_bytecode_byte(emit, MP_BC_STORE_SUBSCR);
    a7d8:	2127      	movs	r1, #39	; 0x27
    a7da:	6878      	ldr	r0, [r7, #4]
    a7dc:	f7ff fae8 	bl	9db0 <emit_write_bytecode_byte>
}
    a7e0:	bf00      	nop
    a7e2:	3708      	adds	r7, #8
    a7e4:	46bd      	mov	sp, r7
    a7e6:	bd80      	pop	{r7, pc}

0000a7e8 <mp_emit_bc_attr>:

void mp_emit_bc_attr(emit_t *emit, qstr qst, int kind) {
    a7e8:	b580      	push	{r7, lr}
    a7ea:	b084      	sub	sp, #16
    a7ec:	af00      	add	r7, sp, #0
    a7ee:	60f8      	str	r0, [r7, #12]
    a7f0:	60b9      	str	r1, [r7, #8]
    a7f2:	607a      	str	r2, [r7, #4]
    if (kind == MP_EMIT_ATTR_LOAD) {
    a7f4:	687b      	ldr	r3, [r7, #4]
    a7f6:	2b00      	cmp	r3, #0
    a7f8:	d109      	bne.n	a80e <mp_emit_bc_attr+0x26>
        emit_bc_pre(emit, 0);
    a7fa:	2100      	movs	r1, #0
    a7fc:	68f8      	ldr	r0, [r7, #12]
    a7fe:	f7ff fe37 	bl	a470 <emit_bc_pre>
        emit_write_bytecode_byte_qstr(emit, MP_BC_LOAD_ATTR, qst);
    a802:	68ba      	ldr	r2, [r7, #8]
    a804:	211d      	movs	r1, #29
    a806:	68f8      	ldr	r0, [r7, #12]
    a808:	f7ff fb99 	bl	9f3e <emit_write_bytecode_byte_qstr>
        emit_write_bytecode_byte_qstr(emit, MP_BC_STORE_ATTR, qst);
    }
    if (MICROPY_OPT_CACHE_MAP_LOOKUP_IN_BYTECODE_DYNAMIC) {
        emit_write_bytecode_byte(emit, 0);
    }
}
    a80c:	e012      	b.n	a834 <mp_emit_bc_attr+0x4c>
        if (kind == MP_EMIT_ATTR_DELETE) {
    a80e:	687b      	ldr	r3, [r7, #4]
    a810:	2b02      	cmp	r3, #2
    a812:	d105      	bne.n	a820 <mp_emit_bc_attr+0x38>
            mp_emit_bc_load_null(emit);
    a814:	68f8      	ldr	r0, [r7, #12]
    a816:	f7ff ff43 	bl	a6a0 <mp_emit_bc_load_null>
            mp_emit_bc_rot_two(emit);
    a81a:	68f8      	ldr	r0, [r7, #12]
    a81c:	f000 f8aa 	bl	a974 <mp_emit_bc_rot_two>
        emit_bc_pre(emit, -2);
    a820:	f06f 0101 	mvn.w	r1, #1
    a824:	68f8      	ldr	r0, [r7, #12]
    a826:	f7ff fe23 	bl	a470 <emit_bc_pre>
        emit_write_bytecode_byte_qstr(emit, MP_BC_STORE_ATTR, qst);
    a82a:	68ba      	ldr	r2, [r7, #8]
    a82c:	2126      	movs	r1, #38	; 0x26
    a82e:	68f8      	ldr	r0, [r7, #12]
    a830:	f7ff fb85 	bl	9f3e <emit_write_bytecode_byte_qstr>
}
    a834:	bf00      	nop
    a836:	3710      	adds	r7, #16
    a838:	46bd      	mov	sp, r7
    a83a:	bd80      	pop	{r7, pc}

0000a83c <mp_emit_bc_store_local>:

void mp_emit_bc_store_local(emit_t *emit, qstr qst, mp_uint_t local_num, int kind) {
    a83c:	b580      	push	{r7, lr}
    a83e:	b084      	sub	sp, #16
    a840:	af00      	add	r7, sp, #0
    a842:	60f8      	str	r0, [r7, #12]
    a844:	60b9      	str	r1, [r7, #8]
    a846:	607a      	str	r2, [r7, #4]
    a848:	603b      	str	r3, [r7, #0]
    MP_STATIC_ASSERT(MP_BC_STORE_FAST_N + MP_EMIT_IDOP_LOCAL_FAST == MP_BC_STORE_FAST_N);
    MP_STATIC_ASSERT(MP_BC_STORE_FAST_N + MP_EMIT_IDOP_LOCAL_DEREF == MP_BC_STORE_DEREF);
    (void)qst;
    emit_bc_pre(emit, -1);
    a84a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    a84e:	68f8      	ldr	r0, [r7, #12]
    a850:	f7ff fe0e 	bl	a470 <emit_bc_pre>
    if (kind == MP_EMIT_IDOP_LOCAL_FAST && local_num <= 15) {
    a854:	683b      	ldr	r3, [r7, #0]
    a856:	2b00      	cmp	r3, #0
    a858:	d10b      	bne.n	a872 <mp_emit_bc_store_local+0x36>
    a85a:	687b      	ldr	r3, [r7, #4]
    a85c:	2b0f      	cmp	r3, #15
    a85e:	d808      	bhi.n	a872 <mp_emit_bc_store_local+0x36>
        emit_write_bytecode_byte(emit, MP_BC_STORE_FAST_MULTI + local_num);
    a860:	687b      	ldr	r3, [r7, #4]
    a862:	b2db      	uxtb	r3, r3
    a864:	3b40      	subs	r3, #64	; 0x40
    a866:	b2db      	uxtb	r3, r3
    a868:	4619      	mov	r1, r3
    a86a:	68f8      	ldr	r0, [r7, #12]
    a86c:	f7ff faa0 	bl	9db0 <emit_write_bytecode_byte>
    a870:	e008      	b.n	a884 <mp_emit_bc_store_local+0x48>
    } else {
        emit_write_bytecode_byte_uint(emit, MP_BC_STORE_FAST_N + kind, local_num);
    a872:	683b      	ldr	r3, [r7, #0]
    a874:	b2db      	uxtb	r3, r3
    a876:	3322      	adds	r3, #34	; 0x22
    a878:	b2db      	uxtb	r3, r3
    a87a:	687a      	ldr	r2, [r7, #4]
    a87c:	4619      	mov	r1, r3
    a87e:	68f8      	ldr	r0, [r7, #12]
    a880:	f7ff fb29 	bl	9ed6 <emit_write_bytecode_byte_uint>
    }
}
    a884:	bf00      	nop
    a886:	3710      	adds	r7, #16
    a888:	46bd      	mov	sp, r7
    a88a:	bd80      	pop	{r7, pc}

0000a88c <mp_emit_bc_store_global>:

void mp_emit_bc_store_global(emit_t *emit, qstr qst, int kind) {
    a88c:	b580      	push	{r7, lr}
    a88e:	b084      	sub	sp, #16
    a890:	af00      	add	r7, sp, #0
    a892:	60f8      	str	r0, [r7, #12]
    a894:	60b9      	str	r1, [r7, #8]
    a896:	607a      	str	r2, [r7, #4]
    MP_STATIC_ASSERT(MP_BC_STORE_NAME + MP_EMIT_IDOP_GLOBAL_NAME == MP_BC_STORE_NAME);
    MP_STATIC_ASSERT(MP_BC_STORE_NAME + MP_EMIT_IDOP_GLOBAL_GLOBAL == MP_BC_STORE_GLOBAL);
    emit_bc_pre(emit, -1);
    a898:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    a89c:	68f8      	ldr	r0, [r7, #12]
    a89e:	f7ff fde7 	bl	a470 <emit_bc_pre>
    emit_write_bytecode_byte_qstr(emit, MP_BC_STORE_NAME + kind, qst);
    a8a2:	687b      	ldr	r3, [r7, #4]
    a8a4:	b2db      	uxtb	r3, r3
    a8a6:	3324      	adds	r3, #36	; 0x24
    a8a8:	b2db      	uxtb	r3, r3
    a8aa:	68ba      	ldr	r2, [r7, #8]
    a8ac:	4619      	mov	r1, r3
    a8ae:	68f8      	ldr	r0, [r7, #12]
    a8b0:	f7ff fb45 	bl	9f3e <emit_write_bytecode_byte_qstr>
}
    a8b4:	bf00      	nop
    a8b6:	3710      	adds	r7, #16
    a8b8:	46bd      	mov	sp, r7
    a8ba:	bd80      	pop	{r7, pc}

0000a8bc <mp_emit_bc_delete_local>:

void mp_emit_bc_delete_local(emit_t *emit, qstr qst, mp_uint_t local_num, int kind) {
    a8bc:	b580      	push	{r7, lr}
    a8be:	b084      	sub	sp, #16
    a8c0:	af00      	add	r7, sp, #0
    a8c2:	60f8      	str	r0, [r7, #12]
    a8c4:	60b9      	str	r1, [r7, #8]
    a8c6:	607a      	str	r2, [r7, #4]
    a8c8:	603b      	str	r3, [r7, #0]
    MP_STATIC_ASSERT(MP_BC_DELETE_FAST + MP_EMIT_IDOP_LOCAL_FAST == MP_BC_DELETE_FAST);
    MP_STATIC_ASSERT(MP_BC_DELETE_FAST + MP_EMIT_IDOP_LOCAL_DEREF == MP_BC_DELETE_DEREF);
    (void)qst;
    emit_write_bytecode_byte_uint(emit, MP_BC_DELETE_FAST + kind, local_num);
    a8ca:	683b      	ldr	r3, [r7, #0]
    a8cc:	b2db      	uxtb	r3, r3
    a8ce:	3328      	adds	r3, #40	; 0x28
    a8d0:	b2db      	uxtb	r3, r3
    a8d2:	687a      	ldr	r2, [r7, #4]
    a8d4:	4619      	mov	r1, r3
    a8d6:	68f8      	ldr	r0, [r7, #12]
    a8d8:	f7ff fafd 	bl	9ed6 <emit_write_bytecode_byte_uint>
}
    a8dc:	bf00      	nop
    a8de:	3710      	adds	r7, #16
    a8e0:	46bd      	mov	sp, r7
    a8e2:	bd80      	pop	{r7, pc}

0000a8e4 <mp_emit_bc_delete_global>:

void mp_emit_bc_delete_global(emit_t *emit, qstr qst, int kind) {
    a8e4:	b580      	push	{r7, lr}
    a8e6:	b084      	sub	sp, #16
    a8e8:	af00      	add	r7, sp, #0
    a8ea:	60f8      	str	r0, [r7, #12]
    a8ec:	60b9      	str	r1, [r7, #8]
    a8ee:	607a      	str	r2, [r7, #4]
    MP_STATIC_ASSERT(MP_BC_DELETE_NAME + MP_EMIT_IDOP_GLOBAL_NAME == MP_BC_DELETE_NAME);
    MP_STATIC_ASSERT(MP_BC_DELETE_NAME + MP_EMIT_IDOP_GLOBAL_GLOBAL == MP_BC_DELETE_GLOBAL);
    emit_bc_pre(emit, 0);
    a8f0:	2100      	movs	r1, #0
    a8f2:	68f8      	ldr	r0, [r7, #12]
    a8f4:	f7ff fdbc 	bl	a470 <emit_bc_pre>
    emit_write_bytecode_byte_qstr(emit, MP_BC_DELETE_NAME + kind, qst);
    a8f8:	687b      	ldr	r3, [r7, #4]
    a8fa:	b2db      	uxtb	r3, r3
    a8fc:	332a      	adds	r3, #42	; 0x2a
    a8fe:	b2db      	uxtb	r3, r3
    a900:	68ba      	ldr	r2, [r7, #8]
    a902:	4619      	mov	r1, r3
    a904:	68f8      	ldr	r0, [r7, #12]
    a906:	f7ff fb1a 	bl	9f3e <emit_write_bytecode_byte_qstr>
}
    a90a:	bf00      	nop
    a90c:	3710      	adds	r7, #16
    a90e:	46bd      	mov	sp, r7
    a910:	bd80      	pop	{r7, pc}

0000a912 <mp_emit_bc_dup_top>:

void mp_emit_bc_dup_top(emit_t *emit) {
    a912:	b580      	push	{r7, lr}
    a914:	b082      	sub	sp, #8
    a916:	af00      	add	r7, sp, #0
    a918:	6078      	str	r0, [r7, #4]
    emit_bc_pre(emit, 1);
    a91a:	2101      	movs	r1, #1
    a91c:	6878      	ldr	r0, [r7, #4]
    a91e:	f7ff fda7 	bl	a470 <emit_bc_pre>
    emit_write_bytecode_byte(emit, MP_BC_DUP_TOP);
    a922:	2130      	movs	r1, #48	; 0x30
    a924:	6878      	ldr	r0, [r7, #4]
    a926:	f7ff fa43 	bl	9db0 <emit_write_bytecode_byte>
}
    a92a:	bf00      	nop
    a92c:	3708      	adds	r7, #8
    a92e:	46bd      	mov	sp, r7
    a930:	bd80      	pop	{r7, pc}

0000a932 <mp_emit_bc_dup_top_two>:

void mp_emit_bc_dup_top_two(emit_t *emit) {
    a932:	b580      	push	{r7, lr}
    a934:	b082      	sub	sp, #8
    a936:	af00      	add	r7, sp, #0
    a938:	6078      	str	r0, [r7, #4]
    emit_bc_pre(emit, 2);
    a93a:	2102      	movs	r1, #2
    a93c:	6878      	ldr	r0, [r7, #4]
    a93e:	f7ff fd97 	bl	a470 <emit_bc_pre>
    emit_write_bytecode_byte(emit, MP_BC_DUP_TOP_TWO);
    a942:	2131      	movs	r1, #49	; 0x31
    a944:	6878      	ldr	r0, [r7, #4]
    a946:	f7ff fa33 	bl	9db0 <emit_write_bytecode_byte>
}
    a94a:	bf00      	nop
    a94c:	3708      	adds	r7, #8
    a94e:	46bd      	mov	sp, r7
    a950:	bd80      	pop	{r7, pc}

0000a952 <mp_emit_bc_pop_top>:

void mp_emit_bc_pop_top(emit_t *emit) {
    a952:	b580      	push	{r7, lr}
    a954:	b082      	sub	sp, #8
    a956:	af00      	add	r7, sp, #0
    a958:	6078      	str	r0, [r7, #4]
    emit_bc_pre(emit, -1);
    a95a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    a95e:	6878      	ldr	r0, [r7, #4]
    a960:	f7ff fd86 	bl	a470 <emit_bc_pre>
    emit_write_bytecode_byte(emit, MP_BC_POP_TOP);
    a964:	2132      	movs	r1, #50	; 0x32
    a966:	6878      	ldr	r0, [r7, #4]
    a968:	f7ff fa22 	bl	9db0 <emit_write_bytecode_byte>
}
    a96c:	bf00      	nop
    a96e:	3708      	adds	r7, #8
    a970:	46bd      	mov	sp, r7
    a972:	bd80      	pop	{r7, pc}

0000a974 <mp_emit_bc_rot_two>:

void mp_emit_bc_rot_two(emit_t *emit) {
    a974:	b580      	push	{r7, lr}
    a976:	b082      	sub	sp, #8
    a978:	af00      	add	r7, sp, #0
    a97a:	6078      	str	r0, [r7, #4]
    emit_bc_pre(emit, 0);
    a97c:	2100      	movs	r1, #0
    a97e:	6878      	ldr	r0, [r7, #4]
    a980:	f7ff fd76 	bl	a470 <emit_bc_pre>
    emit_write_bytecode_byte(emit, MP_BC_ROT_TWO);
    a984:	2133      	movs	r1, #51	; 0x33
    a986:	6878      	ldr	r0, [r7, #4]
    a988:	f7ff fa12 	bl	9db0 <emit_write_bytecode_byte>
}
    a98c:	bf00      	nop
    a98e:	3708      	adds	r7, #8
    a990:	46bd      	mov	sp, r7
    a992:	bd80      	pop	{r7, pc}

0000a994 <mp_emit_bc_rot_three>:

void mp_emit_bc_rot_three(emit_t *emit) {
    a994:	b580      	push	{r7, lr}
    a996:	b082      	sub	sp, #8
    a998:	af00      	add	r7, sp, #0
    a99a:	6078      	str	r0, [r7, #4]
    emit_bc_pre(emit, 0);
    a99c:	2100      	movs	r1, #0
    a99e:	6878      	ldr	r0, [r7, #4]
    a9a0:	f7ff fd66 	bl	a470 <emit_bc_pre>
    emit_write_bytecode_byte(emit, MP_BC_ROT_THREE);
    a9a4:	2134      	movs	r1, #52	; 0x34
    a9a6:	6878      	ldr	r0, [r7, #4]
    a9a8:	f7ff fa02 	bl	9db0 <emit_write_bytecode_byte>
}
    a9ac:	bf00      	nop
    a9ae:	3708      	adds	r7, #8
    a9b0:	46bd      	mov	sp, r7
    a9b2:	bd80      	pop	{r7, pc}

0000a9b4 <mp_emit_bc_jump>:

void mp_emit_bc_jump(emit_t *emit, mp_uint_t label) {
    a9b4:	b580      	push	{r7, lr}
    a9b6:	b082      	sub	sp, #8
    a9b8:	af00      	add	r7, sp, #0
    a9ba:	6078      	str	r0, [r7, #4]
    a9bc:	6039      	str	r1, [r7, #0]
    emit_bc_pre(emit, 0);
    a9be:	2100      	movs	r1, #0
    a9c0:	6878      	ldr	r0, [r7, #4]
    a9c2:	f7ff fd55 	bl	a470 <emit_bc_pre>
    emit_write_bytecode_byte_signed_label(emit, MP_BC_JUMP, label);
    a9c6:	683a      	ldr	r2, [r7, #0]
    a9c8:	2135      	movs	r1, #53	; 0x35
    a9ca:	6878      	ldr	r0, [r7, #4]
    a9cc:	f7ff fb59 	bl	a082 <emit_write_bytecode_byte_signed_label>
}
    a9d0:	bf00      	nop
    a9d2:	3708      	adds	r7, #8
    a9d4:	46bd      	mov	sp, r7
    a9d6:	bd80      	pop	{r7, pc}

0000a9d8 <mp_emit_bc_pop_jump_if>:

void mp_emit_bc_pop_jump_if(emit_t *emit, bool cond, mp_uint_t label) {
    a9d8:	b580      	push	{r7, lr}
    a9da:	b084      	sub	sp, #16
    a9dc:	af00      	add	r7, sp, #0
    a9de:	60f8      	str	r0, [r7, #12]
    a9e0:	460b      	mov	r3, r1
    a9e2:	607a      	str	r2, [r7, #4]
    a9e4:	72fb      	strb	r3, [r7, #11]
    emit_bc_pre(emit, -1);
    a9e6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    a9ea:	68f8      	ldr	r0, [r7, #12]
    a9ec:	f7ff fd40 	bl	a470 <emit_bc_pre>
    if (cond) {
    a9f0:	7afb      	ldrb	r3, [r7, #11]
    a9f2:	2b00      	cmp	r3, #0
    a9f4:	d005      	beq.n	aa02 <mp_emit_bc_pop_jump_if+0x2a>
        emit_write_bytecode_byte_signed_label(emit, MP_BC_POP_JUMP_IF_TRUE, label);
    a9f6:	687a      	ldr	r2, [r7, #4]
    a9f8:	2136      	movs	r1, #54	; 0x36
    a9fa:	68f8      	ldr	r0, [r7, #12]
    a9fc:	f7ff fb41 	bl	a082 <emit_write_bytecode_byte_signed_label>
    } else {
        emit_write_bytecode_byte_signed_label(emit, MP_BC_POP_JUMP_IF_FALSE, label);
    }
}
    aa00:	e004      	b.n	aa0c <mp_emit_bc_pop_jump_if+0x34>
        emit_write_bytecode_byte_signed_label(emit, MP_BC_POP_JUMP_IF_FALSE, label);
    aa02:	687a      	ldr	r2, [r7, #4]
    aa04:	2137      	movs	r1, #55	; 0x37
    aa06:	68f8      	ldr	r0, [r7, #12]
    aa08:	f7ff fb3b 	bl	a082 <emit_write_bytecode_byte_signed_label>
}
    aa0c:	bf00      	nop
    aa0e:	3710      	adds	r7, #16
    aa10:	46bd      	mov	sp, r7
    aa12:	bd80      	pop	{r7, pc}

0000aa14 <mp_emit_bc_jump_if_or_pop>:

void mp_emit_bc_jump_if_or_pop(emit_t *emit, bool cond, mp_uint_t label) {
    aa14:	b580      	push	{r7, lr}
    aa16:	b084      	sub	sp, #16
    aa18:	af00      	add	r7, sp, #0
    aa1a:	60f8      	str	r0, [r7, #12]
    aa1c:	460b      	mov	r3, r1
    aa1e:	607a      	str	r2, [r7, #4]
    aa20:	72fb      	strb	r3, [r7, #11]
    emit_bc_pre(emit, -1);
    aa22:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    aa26:	68f8      	ldr	r0, [r7, #12]
    aa28:	f7ff fd22 	bl	a470 <emit_bc_pre>
    if (cond) {
    aa2c:	7afb      	ldrb	r3, [r7, #11]
    aa2e:	2b00      	cmp	r3, #0
    aa30:	d005      	beq.n	aa3e <mp_emit_bc_jump_if_or_pop+0x2a>
        emit_write_bytecode_byte_signed_label(emit, MP_BC_JUMP_IF_TRUE_OR_POP, label);
    aa32:	687a      	ldr	r2, [r7, #4]
    aa34:	2138      	movs	r1, #56	; 0x38
    aa36:	68f8      	ldr	r0, [r7, #12]
    aa38:	f7ff fb23 	bl	a082 <emit_write_bytecode_byte_signed_label>
    } else {
        emit_write_bytecode_byte_signed_label(emit, MP_BC_JUMP_IF_FALSE_OR_POP, label);
    }
}
    aa3c:	e004      	b.n	aa48 <mp_emit_bc_jump_if_or_pop+0x34>
        emit_write_bytecode_byte_signed_label(emit, MP_BC_JUMP_IF_FALSE_OR_POP, label);
    aa3e:	687a      	ldr	r2, [r7, #4]
    aa40:	2139      	movs	r1, #57	; 0x39
    aa42:	68f8      	ldr	r0, [r7, #12]
    aa44:	f7ff fb1d 	bl	a082 <emit_write_bytecode_byte_signed_label>
}
    aa48:	bf00      	nop
    aa4a:	3710      	adds	r7, #16
    aa4c:	46bd      	mov	sp, r7
    aa4e:	bd80      	pop	{r7, pc}

0000aa50 <mp_emit_bc_unwind_jump>:

void mp_emit_bc_unwind_jump(emit_t *emit, mp_uint_t label, mp_uint_t except_depth) {
    aa50:	b580      	push	{r7, lr}
    aa52:	b086      	sub	sp, #24
    aa54:	af00      	add	r7, sp, #0
    aa56:	60f8      	str	r0, [r7, #12]
    aa58:	60b9      	str	r1, [r7, #8]
    aa5a:	607a      	str	r2, [r7, #4]
    if (except_depth == 0) {
    aa5c:	687b      	ldr	r3, [r7, #4]
    aa5e:	2b00      	cmp	r3, #0
    aa60:	d122      	bne.n	aaa8 <mp_emit_bc_unwind_jump+0x58>
        emit_bc_pre(emit, 0);
    aa62:	2100      	movs	r1, #0
    aa64:	68f8      	ldr	r0, [r7, #12]
    aa66:	f7ff fd03 	bl	a470 <emit_bc_pre>
        if (label & MP_EMIT_BREAK_FROM_FOR) {
    aa6a:	68bb      	ldr	r3, [r7, #8]
    aa6c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    aa70:	2b00      	cmp	r3, #0
    aa72:	d010      	beq.n	aa96 <mp_emit_bc_unwind_jump+0x46>
            // need to pop the iterator if we are breaking out of a for loop
            emit_write_bytecode_byte(emit, MP_BC_POP_TOP);
    aa74:	2132      	movs	r1, #50	; 0x32
    aa76:	68f8      	ldr	r0, [r7, #12]
    aa78:	f7ff f99a 	bl	9db0 <emit_write_bytecode_byte>
            // also pop the iter_buf
            for (size_t i = 0; i < MP_OBJ_ITER_BUF_NSLOTS - 1; ++i) {
    aa7c:	2300      	movs	r3, #0
    aa7e:	617b      	str	r3, [r7, #20]
    aa80:	e006      	b.n	aa90 <mp_emit_bc_unwind_jump+0x40>
                emit_write_bytecode_byte(emit, MP_BC_POP_TOP);
    aa82:	2132      	movs	r1, #50	; 0x32
    aa84:	68f8      	ldr	r0, [r7, #12]
    aa86:	f7ff f993 	bl	9db0 <emit_write_bytecode_byte>
            for (size_t i = 0; i < MP_OBJ_ITER_BUF_NSLOTS - 1; ++i) {
    aa8a:	697b      	ldr	r3, [r7, #20]
    aa8c:	3301      	adds	r3, #1
    aa8e:	617b      	str	r3, [r7, #20]
    aa90:	697b      	ldr	r3, [r7, #20]
    aa92:	2b02      	cmp	r3, #2
    aa94:	d9f5      	bls.n	aa82 <mp_emit_bc_unwind_jump+0x32>
            }
        }
        emit_write_bytecode_byte_signed_label(emit, MP_BC_JUMP, label & ~MP_EMIT_BREAK_FROM_FOR);
    aa96:	68bb      	ldr	r3, [r7, #8]
    aa98:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    aa9c:	461a      	mov	r2, r3
    aa9e:	2135      	movs	r1, #53	; 0x35
    aaa0:	68f8      	ldr	r0, [r7, #12]
    aaa2:	f7ff faee 	bl	a082 <emit_write_bytecode_byte_signed_label>
    } else {
        emit_write_bytecode_byte_signed_label(emit, MP_BC_UNWIND_JUMP, label & ~MP_EMIT_BREAK_FROM_FOR);
        emit_write_bytecode_byte(emit, ((label & MP_EMIT_BREAK_FROM_FOR) ? 0x80 : 0) | except_depth);
    }
}
    aaa6:	e017      	b.n	aad8 <mp_emit_bc_unwind_jump+0x88>
        emit_write_bytecode_byte_signed_label(emit, MP_BC_UNWIND_JUMP, label & ~MP_EMIT_BREAK_FROM_FOR);
    aaa8:	68bb      	ldr	r3, [r7, #8]
    aaaa:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    aaae:	461a      	mov	r2, r3
    aab0:	2146      	movs	r1, #70	; 0x46
    aab2:	68f8      	ldr	r0, [r7, #12]
    aab4:	f7ff fae5 	bl	a082 <emit_write_bytecode_byte_signed_label>
        emit_write_bytecode_byte(emit, ((label & MP_EMIT_BREAK_FROM_FOR) ? 0x80 : 0) | except_depth);
    aab8:	68bb      	ldr	r3, [r7, #8]
    aaba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    aabe:	2b00      	cmp	r3, #0
    aac0:	d001      	beq.n	aac6 <mp_emit_bc_unwind_jump+0x76>
    aac2:	2280      	movs	r2, #128	; 0x80
    aac4:	e000      	b.n	aac8 <mp_emit_bc_unwind_jump+0x78>
    aac6:	2200      	movs	r2, #0
    aac8:	687b      	ldr	r3, [r7, #4]
    aaca:	b2db      	uxtb	r3, r3
    aacc:	4313      	orrs	r3, r2
    aace:	b2db      	uxtb	r3, r3
    aad0:	4619      	mov	r1, r3
    aad2:	68f8      	ldr	r0, [r7, #12]
    aad4:	f7ff f96c 	bl	9db0 <emit_write_bytecode_byte>
}
    aad8:	bf00      	nop
    aada:	3718      	adds	r7, #24
    aadc:	46bd      	mov	sp, r7
    aade:	bd80      	pop	{r7, pc}

0000aae0 <mp_emit_bc_setup_block>:

void mp_emit_bc_setup_block(emit_t *emit, mp_uint_t label, int kind) {
    aae0:	b580      	push	{r7, lr}
    aae2:	b084      	sub	sp, #16
    aae4:	af00      	add	r7, sp, #0
    aae6:	60f8      	str	r0, [r7, #12]
    aae8:	60b9      	str	r1, [r7, #8]
    aaea:	607a      	str	r2, [r7, #4]
    MP_STATIC_ASSERT(MP_BC_SETUP_WITH + MP_EMIT_SETUP_BLOCK_WITH == MP_BC_SETUP_WITH);
    MP_STATIC_ASSERT(MP_BC_SETUP_WITH + MP_EMIT_SETUP_BLOCK_EXCEPT == MP_BC_SETUP_EXCEPT);
    MP_STATIC_ASSERT(MP_BC_SETUP_WITH + MP_EMIT_SETUP_BLOCK_FINALLY == MP_BC_SETUP_FINALLY);
    if (kind == MP_EMIT_SETUP_BLOCK_WITH) {
    aaec:	687b      	ldr	r3, [r7, #4]
    aaee:	2b00      	cmp	r3, #0
    aaf0:	d104      	bne.n	aafc <mp_emit_bc_setup_block+0x1c>
    // The SETUP_WITH opcode pops ctx_mgr from the top of the stack
    // and then pushes 3 entries: __exit__, ctx_mgr, as_value.
        emit_bc_pre(emit, 2);
    aaf2:	2102      	movs	r1, #2
    aaf4:	68f8      	ldr	r0, [r7, #12]
    aaf6:	f7ff fcbb 	bl	a470 <emit_bc_pre>
    aafa:	e003      	b.n	ab04 <mp_emit_bc_setup_block+0x24>
    } else {
        emit_bc_pre(emit, 0);
    aafc:	2100      	movs	r1, #0
    aafe:	68f8      	ldr	r0, [r7, #12]
    ab00:	f7ff fcb6 	bl	a470 <emit_bc_pre>
    }
    emit_write_bytecode_byte_unsigned_label(emit, MP_BC_SETUP_WITH + kind, label);
    ab04:	687b      	ldr	r3, [r7, #4]
    ab06:	b2db      	uxtb	r3, r3
    ab08:	333d      	adds	r3, #61	; 0x3d
    ab0a:	b2db      	uxtb	r3, r3
    ab0c:	68ba      	ldr	r2, [r7, #8]
    ab0e:	4619      	mov	r1, r3
    ab10:	68f8      	ldr	r0, [r7, #12]
    ab12:	f7ff fa86 	bl	a022 <emit_write_bytecode_byte_unsigned_label>
}
    ab16:	bf00      	nop
    ab18:	3710      	adds	r7, #16
    ab1a:	46bd      	mov	sp, r7
    ab1c:	bd80      	pop	{r7, pc}

0000ab1e <mp_emit_bc_with_cleanup>:

void mp_emit_bc_with_cleanup(emit_t *emit, mp_uint_t label) {
    ab1e:	b580      	push	{r7, lr}
    ab20:	b082      	sub	sp, #8
    ab22:	af00      	add	r7, sp, #0
    ab24:	6078      	str	r0, [r7, #4]
    ab26:	6039      	str	r1, [r7, #0]
    mp_emit_bc_pop_block(emit);
    ab28:	6878      	ldr	r0, [r7, #4]
    ab2a:	f000 f867 	bl	abfc <mp_emit_bc_pop_block>
    mp_emit_bc_load_const_tok(emit, MP_TOKEN_KW_NONE);
    ab2e:	210e      	movs	r1, #14
    ab30:	6878      	ldr	r0, [r7, #4]
    ab32:	f7ff fd33 	bl	a59c <mp_emit_bc_load_const_tok>
    mp_emit_bc_label_assign(emit, label);
    ab36:	6839      	ldr	r1, [r7, #0]
    ab38:	6878      	ldr	r0, [r7, #4]
    ab3a:	f7ff fcb1 	bl	a4a0 <mp_emit_bc_label_assign>
    emit_bc_pre(emit, 2); // ensure we have enough stack space to call the __exit__ method
    ab3e:	2102      	movs	r1, #2
    ab40:	6878      	ldr	r0, [r7, #4]
    ab42:	f7ff fc95 	bl	a470 <emit_bc_pre>
    emit_write_bytecode_byte(emit, MP_BC_WITH_CLEANUP);
    ab46:	213e      	movs	r1, #62	; 0x3e
    ab48:	6878      	ldr	r0, [r7, #4]
    ab4a:	f7ff f931 	bl	9db0 <emit_write_bytecode_byte>
    emit_bc_pre(emit, -4); // cancel the 2 above, plus the 2 from mp_emit_bc_setup_block(MP_EMIT_SETUP_BLOCK_WITH)
    ab4e:	f06f 0103 	mvn.w	r1, #3
    ab52:	6878      	ldr	r0, [r7, #4]
    ab54:	f7ff fc8c 	bl	a470 <emit_bc_pre>
}
    ab58:	bf00      	nop
    ab5a:	3708      	adds	r7, #8
    ab5c:	46bd      	mov	sp, r7
    ab5e:	bd80      	pop	{r7, pc}

0000ab60 <mp_emit_bc_end_finally>:

void mp_emit_bc_end_finally(emit_t *emit) {
    ab60:	b580      	push	{r7, lr}
    ab62:	b082      	sub	sp, #8
    ab64:	af00      	add	r7, sp, #0
    ab66:	6078      	str	r0, [r7, #4]
    emit_bc_pre(emit, -1);
    ab68:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    ab6c:	6878      	ldr	r0, [r7, #4]
    ab6e:	f7ff fc7f 	bl	a470 <emit_bc_pre>
    emit_write_bytecode_byte(emit, MP_BC_END_FINALLY);
    ab72:	2141      	movs	r1, #65	; 0x41
    ab74:	6878      	ldr	r0, [r7, #4]
    ab76:	f7ff f91b 	bl	9db0 <emit_write_bytecode_byte>
}
    ab7a:	bf00      	nop
    ab7c:	3708      	adds	r7, #8
    ab7e:	46bd      	mov	sp, r7
    ab80:	bd80      	pop	{r7, pc}

0000ab82 <mp_emit_bc_get_iter>:

void mp_emit_bc_get_iter(emit_t *emit, bool use_stack) {
    ab82:	b580      	push	{r7, lr}
    ab84:	b082      	sub	sp, #8
    ab86:	af00      	add	r7, sp, #0
    ab88:	6078      	str	r0, [r7, #4]
    ab8a:	460b      	mov	r3, r1
    ab8c:	70fb      	strb	r3, [r7, #3]
    emit_bc_pre(emit, use_stack ? MP_OBJ_ITER_BUF_NSLOTS - 1 : 0);
    ab8e:	78fb      	ldrb	r3, [r7, #3]
    ab90:	2b00      	cmp	r3, #0
    ab92:	d001      	beq.n	ab98 <mp_emit_bc_get_iter+0x16>
    ab94:	2303      	movs	r3, #3
    ab96:	e000      	b.n	ab9a <mp_emit_bc_get_iter+0x18>
    ab98:	2300      	movs	r3, #0
    ab9a:	4619      	mov	r1, r3
    ab9c:	6878      	ldr	r0, [r7, #4]
    ab9e:	f7ff fc67 	bl	a470 <emit_bc_pre>
    emit_write_bytecode_byte(emit, use_stack ? MP_BC_GET_ITER_STACK : MP_BC_GET_ITER);
    aba2:	78fb      	ldrb	r3, [r7, #3]
    aba4:	2b00      	cmp	r3, #0
    aba6:	d001      	beq.n	abac <mp_emit_bc_get_iter+0x2a>
    aba8:	2347      	movs	r3, #71	; 0x47
    abaa:	e000      	b.n	abae <mp_emit_bc_get_iter+0x2c>
    abac:	2342      	movs	r3, #66	; 0x42
    abae:	4619      	mov	r1, r3
    abb0:	6878      	ldr	r0, [r7, #4]
    abb2:	f7ff f8fd 	bl	9db0 <emit_write_bytecode_byte>
}
    abb6:	bf00      	nop
    abb8:	3708      	adds	r7, #8
    abba:	46bd      	mov	sp, r7
    abbc:	bd80      	pop	{r7, pc}

0000abbe <mp_emit_bc_for_iter>:

void mp_emit_bc_for_iter(emit_t *emit, mp_uint_t label) {
    abbe:	b580      	push	{r7, lr}
    abc0:	b082      	sub	sp, #8
    abc2:	af00      	add	r7, sp, #0
    abc4:	6078      	str	r0, [r7, #4]
    abc6:	6039      	str	r1, [r7, #0]
    emit_bc_pre(emit, 1);
    abc8:	2101      	movs	r1, #1
    abca:	6878      	ldr	r0, [r7, #4]
    abcc:	f7ff fc50 	bl	a470 <emit_bc_pre>
    emit_write_bytecode_byte_unsigned_label(emit, MP_BC_FOR_ITER, label);
    abd0:	683a      	ldr	r2, [r7, #0]
    abd2:	2143      	movs	r1, #67	; 0x43
    abd4:	6878      	ldr	r0, [r7, #4]
    abd6:	f7ff fa24 	bl	a022 <emit_write_bytecode_byte_unsigned_label>
}
    abda:	bf00      	nop
    abdc:	3708      	adds	r7, #8
    abde:	46bd      	mov	sp, r7
    abe0:	bd80      	pop	{r7, pc}

0000abe2 <mp_emit_bc_for_iter_end>:

void mp_emit_bc_for_iter_end(emit_t *emit) {
    abe2:	b580      	push	{r7, lr}
    abe4:	b082      	sub	sp, #8
    abe6:	af00      	add	r7, sp, #0
    abe8:	6078      	str	r0, [r7, #4]
    emit_bc_pre(emit, -MP_OBJ_ITER_BUF_NSLOTS);
    abea:	f06f 0103 	mvn.w	r1, #3
    abee:	6878      	ldr	r0, [r7, #4]
    abf0:	f7ff fc3e 	bl	a470 <emit_bc_pre>
}
    abf4:	bf00      	nop
    abf6:	3708      	adds	r7, #8
    abf8:	46bd      	mov	sp, r7
    abfa:	bd80      	pop	{r7, pc}

0000abfc <mp_emit_bc_pop_block>:

void mp_emit_bc_pop_block(emit_t *emit) {
    abfc:	b580      	push	{r7, lr}
    abfe:	b082      	sub	sp, #8
    ac00:	af00      	add	r7, sp, #0
    ac02:	6078      	str	r0, [r7, #4]
    emit_bc_pre(emit, 0);
    ac04:	2100      	movs	r1, #0
    ac06:	6878      	ldr	r0, [r7, #4]
    ac08:	f7ff fc32 	bl	a470 <emit_bc_pre>
    emit_write_bytecode_byte(emit, MP_BC_POP_BLOCK);
    ac0c:	2144      	movs	r1, #68	; 0x44
    ac0e:	6878      	ldr	r0, [r7, #4]
    ac10:	f7ff f8ce 	bl	9db0 <emit_write_bytecode_byte>
}
    ac14:	bf00      	nop
    ac16:	3708      	adds	r7, #8
    ac18:	46bd      	mov	sp, r7
    ac1a:	bd80      	pop	{r7, pc}

0000ac1c <mp_emit_bc_pop_except>:

void mp_emit_bc_pop_except(emit_t *emit) {
    ac1c:	b580      	push	{r7, lr}
    ac1e:	b082      	sub	sp, #8
    ac20:	af00      	add	r7, sp, #0
    ac22:	6078      	str	r0, [r7, #4]
    emit_bc_pre(emit, 0);
    ac24:	2100      	movs	r1, #0
    ac26:	6878      	ldr	r0, [r7, #4]
    ac28:	f7ff fc22 	bl	a470 <emit_bc_pre>
    emit_write_bytecode_byte(emit, MP_BC_POP_EXCEPT);
    ac2c:	2145      	movs	r1, #69	; 0x45
    ac2e:	6878      	ldr	r0, [r7, #4]
    ac30:	f7ff f8be 	bl	9db0 <emit_write_bytecode_byte>
}
    ac34:	bf00      	nop
    ac36:	3708      	adds	r7, #8
    ac38:	46bd      	mov	sp, r7
    ac3a:	bd80      	pop	{r7, pc}

0000ac3c <mp_emit_bc_unary_op>:

void mp_emit_bc_unary_op(emit_t *emit, mp_unary_op_t op) {
    ac3c:	b580      	push	{r7, lr}
    ac3e:	b082      	sub	sp, #8
    ac40:	af00      	add	r7, sp, #0
    ac42:	6078      	str	r0, [r7, #4]
    ac44:	6039      	str	r1, [r7, #0]
    emit_bc_pre(emit, 0);
    ac46:	2100      	movs	r1, #0
    ac48:	6878      	ldr	r0, [r7, #4]
    ac4a:	f7ff fc11 	bl	a470 <emit_bc_pre>
    emit_write_bytecode_byte(emit, MP_BC_UNARY_OP_MULTI + op);
    ac4e:	683b      	ldr	r3, [r7, #0]
    ac50:	b2db      	uxtb	r3, r3
    ac52:	3b30      	subs	r3, #48	; 0x30
    ac54:	b2db      	uxtb	r3, r3
    ac56:	4619      	mov	r1, r3
    ac58:	6878      	ldr	r0, [r7, #4]
    ac5a:	f7ff f8a9 	bl	9db0 <emit_write_bytecode_byte>
}
    ac5e:	bf00      	nop
    ac60:	3708      	adds	r7, #8
    ac62:	46bd      	mov	sp, r7
    ac64:	bd80      	pop	{r7, pc}

0000ac66 <mp_emit_bc_binary_op>:

void mp_emit_bc_binary_op(emit_t *emit, mp_binary_op_t op) {
    ac66:	b580      	push	{r7, lr}
    ac68:	b084      	sub	sp, #16
    ac6a:	af00      	add	r7, sp, #0
    ac6c:	6078      	str	r0, [r7, #4]
    ac6e:	6039      	str	r1, [r7, #0]
    bool invert = false;
    ac70:	2300      	movs	r3, #0
    ac72:	73fb      	strb	r3, [r7, #15]
    if (op == MP_BINARY_OP_NOT_IN) {
    ac74:	683b      	ldr	r3, [r7, #0]
    ac76:	2b24      	cmp	r3, #36	; 0x24
    ac78:	d104      	bne.n	ac84 <mp_emit_bc_binary_op+0x1e>
        invert = true;
    ac7a:	2301      	movs	r3, #1
    ac7c:	73fb      	strb	r3, [r7, #15]
        op = MP_BINARY_OP_IN;
    ac7e:	2306      	movs	r3, #6
    ac80:	603b      	str	r3, [r7, #0]
    ac82:	e006      	b.n	ac92 <mp_emit_bc_binary_op+0x2c>
    } else if (op == MP_BINARY_OP_IS_NOT) {
    ac84:	683b      	ldr	r3, [r7, #0]
    ac86:	2b25      	cmp	r3, #37	; 0x25
    ac88:	d103      	bne.n	ac92 <mp_emit_bc_binary_op+0x2c>
        invert = true;
    ac8a:	2301      	movs	r3, #1
    ac8c:	73fb      	strb	r3, [r7, #15]
        op = MP_BINARY_OP_IS;
    ac8e:	2307      	movs	r3, #7
    ac90:	603b      	str	r3, [r7, #0]
    }
    emit_bc_pre(emit, -1);
    ac92:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    ac96:	6878      	ldr	r0, [r7, #4]
    ac98:	f7ff fbea 	bl	a470 <emit_bc_pre>
    emit_write_bytecode_byte(emit, MP_BC_BINARY_OP_MULTI + op);
    ac9c:	683b      	ldr	r3, [r7, #0]
    ac9e:	b2db      	uxtb	r3, r3
    aca0:	3b29      	subs	r3, #41	; 0x29
    aca2:	b2db      	uxtb	r3, r3
    aca4:	4619      	mov	r1, r3
    aca6:	6878      	ldr	r0, [r7, #4]
    aca8:	f7ff f882 	bl	9db0 <emit_write_bytecode_byte>
    if (invert) {
    acac:	7bfb      	ldrb	r3, [r7, #15]
    acae:	2b00      	cmp	r3, #0
    acb0:	d007      	beq.n	acc2 <mp_emit_bc_binary_op+0x5c>
        emit_bc_pre(emit, 0);
    acb2:	2100      	movs	r1, #0
    acb4:	6878      	ldr	r0, [r7, #4]
    acb6:	f7ff fbdb 	bl	a470 <emit_bc_pre>
        emit_write_bytecode_byte(emit, MP_BC_UNARY_OP_MULTI + MP_UNARY_OP_NOT);
    acba:	21d3      	movs	r1, #211	; 0xd3
    acbc:	6878      	ldr	r0, [r7, #4]
    acbe:	f7ff f877 	bl	9db0 <emit_write_bytecode_byte>
    }
}
    acc2:	bf00      	nop
    acc4:	3710      	adds	r7, #16
    acc6:	46bd      	mov	sp, r7
    acc8:	bd80      	pop	{r7, pc}

0000acca <mp_emit_bc_build>:

void mp_emit_bc_build(emit_t *emit, mp_uint_t n_args, int kind) {
    acca:	b580      	push	{r7, lr}
    accc:	b084      	sub	sp, #16
    acce:	af00      	add	r7, sp, #0
    acd0:	60f8      	str	r0, [r7, #12]
    acd2:	60b9      	str	r1, [r7, #8]
    acd4:	607a      	str	r2, [r7, #4]
    MP_STATIC_ASSERT(MP_BC_BUILD_TUPLE + MP_EMIT_BUILD_TUPLE == MP_BC_BUILD_TUPLE);
    MP_STATIC_ASSERT(MP_BC_BUILD_TUPLE + MP_EMIT_BUILD_LIST == MP_BC_BUILD_LIST);
    MP_STATIC_ASSERT(MP_BC_BUILD_TUPLE + MP_EMIT_BUILD_MAP == MP_BC_BUILD_MAP);
    MP_STATIC_ASSERT(MP_BC_BUILD_TUPLE + MP_EMIT_BUILD_SET == MP_BC_BUILD_SET);
    MP_STATIC_ASSERT(MP_BC_BUILD_TUPLE + MP_EMIT_BUILD_SLICE == MP_BC_BUILD_SLICE);
    if (kind == MP_EMIT_BUILD_MAP) {
    acd6:	687b      	ldr	r3, [r7, #4]
    acd8:	2b03      	cmp	r3, #3
    acda:	d104      	bne.n	ace6 <mp_emit_bc_build+0x1c>
        emit_bc_pre(emit, 1);
    acdc:	2101      	movs	r1, #1
    acde:	68f8      	ldr	r0, [r7, #12]
    ace0:	f7ff fbc6 	bl	a470 <emit_bc_pre>
    ace4:	e006      	b.n	acf4 <mp_emit_bc_build+0x2a>
    } else {
        emit_bc_pre(emit, 1 - n_args);
    ace6:	68bb      	ldr	r3, [r7, #8]
    ace8:	f1c3 0301 	rsb	r3, r3, #1
    acec:	4619      	mov	r1, r3
    acee:	68f8      	ldr	r0, [r7, #12]
    acf0:	f7ff fbbe 	bl	a470 <emit_bc_pre>
    }
    emit_write_bytecode_byte_uint(emit, MP_BC_BUILD_TUPLE + kind, n_args);
    acf4:	687b      	ldr	r3, [r7, #4]
    acf6:	b2db      	uxtb	r3, r3
    acf8:	3350      	adds	r3, #80	; 0x50
    acfa:	b2db      	uxtb	r3, r3
    acfc:	68ba      	ldr	r2, [r7, #8]
    acfe:	4619      	mov	r1, r3
    ad00:	68f8      	ldr	r0, [r7, #12]
    ad02:	f7ff f8e8 	bl	9ed6 <emit_write_bytecode_byte_uint>
}
    ad06:	bf00      	nop
    ad08:	3710      	adds	r7, #16
    ad0a:	46bd      	mov	sp, r7
    ad0c:	bd80      	pop	{r7, pc}

0000ad0e <mp_emit_bc_store_map>:

void mp_emit_bc_store_map(emit_t *emit) {
    ad0e:	b580      	push	{r7, lr}
    ad10:	b082      	sub	sp, #8
    ad12:	af00      	add	r7, sp, #0
    ad14:	6078      	str	r0, [r7, #4]
    emit_bc_pre(emit, -2);
    ad16:	f06f 0101 	mvn.w	r1, #1
    ad1a:	6878      	ldr	r0, [r7, #4]
    ad1c:	f7ff fba8 	bl	a470 <emit_bc_pre>
    emit_write_bytecode_byte(emit, MP_BC_STORE_MAP);
    ad20:	2154      	movs	r1, #84	; 0x54
    ad22:	6878      	ldr	r0, [r7, #4]
    ad24:	f7ff f844 	bl	9db0 <emit_write_bytecode_byte>
}
    ad28:	bf00      	nop
    ad2a:	3708      	adds	r7, #8
    ad2c:	46bd      	mov	sp, r7
    ad2e:	bd80      	pop	{r7, pc}

0000ad30 <mp_emit_bc_store_comp>:

void mp_emit_bc_store_comp(emit_t *emit, scope_kind_t kind, mp_uint_t collection_stack_index) {
    ad30:	b580      	push	{r7, lr}
    ad32:	b086      	sub	sp, #24
    ad34:	af00      	add	r7, sp, #0
    ad36:	60f8      	str	r0, [r7, #12]
    ad38:	60b9      	str	r1, [r7, #8]
    ad3a:	607a      	str	r2, [r7, #4]
    int t;
    int n;
    if (kind == SCOPE_LIST_COMP) {
    ad3c:	68bb      	ldr	r3, [r7, #8]
    ad3e:	2b03      	cmp	r3, #3
    ad40:	d104      	bne.n	ad4c <mp_emit_bc_store_comp+0x1c>
        n = 0;
    ad42:	2300      	movs	r3, #0
    ad44:	613b      	str	r3, [r7, #16]
        t = 0;
    ad46:	2300      	movs	r3, #0
    ad48:	617b      	str	r3, [r7, #20]
    ad4a:	e003      	b.n	ad54 <mp_emit_bc_store_comp+0x24>
    } else if (!MICROPY_PY_BUILTINS_SET || kind == SCOPE_DICT_COMP) {
        n = 1;
    ad4c:	2301      	movs	r3, #1
    ad4e:	613b      	str	r3, [r7, #16]
        t = 1;
    ad50:	2301      	movs	r3, #1
    ad52:	617b      	str	r3, [r7, #20]
    } else if (MICROPY_PY_BUILTINS_SET) {
        n = 0;
        t = 2;
    }
    emit_bc_pre(emit, -1 - n);
    ad54:	693b      	ldr	r3, [r7, #16]
    ad56:	43db      	mvns	r3, r3
    ad58:	4619      	mov	r1, r3
    ad5a:	68f8      	ldr	r0, [r7, #12]
    ad5c:	f7ff fb88 	bl	a470 <emit_bc_pre>
    // the lower 2 bits of the opcode argument indicate the collection type
    emit_write_bytecode_byte_uint(emit, MP_BC_STORE_COMP, ((collection_stack_index + n) << 2) | t);
    ad60:	693a      	ldr	r2, [r7, #16]
    ad62:	687b      	ldr	r3, [r7, #4]
    ad64:	4413      	add	r3, r2
    ad66:	009a      	lsls	r2, r3, #2
    ad68:	697b      	ldr	r3, [r7, #20]
    ad6a:	4313      	orrs	r3, r2
    ad6c:	461a      	mov	r2, r3
    ad6e:	2157      	movs	r1, #87	; 0x57
    ad70:	68f8      	ldr	r0, [r7, #12]
    ad72:	f7ff f8b0 	bl	9ed6 <emit_write_bytecode_byte_uint>
}
    ad76:	bf00      	nop
    ad78:	3718      	adds	r7, #24
    ad7a:	46bd      	mov	sp, r7
    ad7c:	bd80      	pop	{r7, pc}

0000ad7e <mp_emit_bc_unpack_sequence>:

void mp_emit_bc_unpack_sequence(emit_t *emit, mp_uint_t n_args) {
    ad7e:	b580      	push	{r7, lr}
    ad80:	b082      	sub	sp, #8
    ad82:	af00      	add	r7, sp, #0
    ad84:	6078      	str	r0, [r7, #4]
    ad86:	6039      	str	r1, [r7, #0]
    emit_bc_pre(emit, -1 + n_args);
    ad88:	683b      	ldr	r3, [r7, #0]
    ad8a:	3b01      	subs	r3, #1
    ad8c:	4619      	mov	r1, r3
    ad8e:	6878      	ldr	r0, [r7, #4]
    ad90:	f7ff fb6e 	bl	a470 <emit_bc_pre>
    emit_write_bytecode_byte_uint(emit, MP_BC_UNPACK_SEQUENCE, n_args);
    ad94:	683a      	ldr	r2, [r7, #0]
    ad96:	2159      	movs	r1, #89	; 0x59
    ad98:	6878      	ldr	r0, [r7, #4]
    ad9a:	f7ff f89c 	bl	9ed6 <emit_write_bytecode_byte_uint>
}
    ad9e:	bf00      	nop
    ada0:	3708      	adds	r7, #8
    ada2:	46bd      	mov	sp, r7
    ada4:	bd80      	pop	{r7, pc}

0000ada6 <mp_emit_bc_unpack_ex>:

void mp_emit_bc_unpack_ex(emit_t *emit, mp_uint_t n_left, mp_uint_t n_right) {
    ada6:	b580      	push	{r7, lr}
    ada8:	b084      	sub	sp, #16
    adaa:	af00      	add	r7, sp, #0
    adac:	60f8      	str	r0, [r7, #12]
    adae:	60b9      	str	r1, [r7, #8]
    adb0:	607a      	str	r2, [r7, #4]
    emit_bc_pre(emit, -1 + n_left + n_right + 1);
    adb2:	68ba      	ldr	r2, [r7, #8]
    adb4:	687b      	ldr	r3, [r7, #4]
    adb6:	4413      	add	r3, r2
    adb8:	4619      	mov	r1, r3
    adba:	68f8      	ldr	r0, [r7, #12]
    adbc:	f7ff fb58 	bl	a470 <emit_bc_pre>
    emit_write_bytecode_byte_uint(emit, MP_BC_UNPACK_EX, n_left | (n_right << 8));
    adc0:	687b      	ldr	r3, [r7, #4]
    adc2:	021a      	lsls	r2, r3, #8
    adc4:	68bb      	ldr	r3, [r7, #8]
    adc6:	4313      	orrs	r3, r2
    adc8:	461a      	mov	r2, r3
    adca:	215a      	movs	r1, #90	; 0x5a
    adcc:	68f8      	ldr	r0, [r7, #12]
    adce:	f7ff f882 	bl	9ed6 <emit_write_bytecode_byte_uint>
}
    add2:	bf00      	nop
    add4:	3710      	adds	r7, #16
    add6:	46bd      	mov	sp, r7
    add8:	bd80      	pop	{r7, pc}

0000adda <mp_emit_bc_make_function>:

void mp_emit_bc_make_function(emit_t *emit, scope_t *scope, mp_uint_t n_pos_defaults, mp_uint_t n_kw_defaults) {
    adda:	b580      	push	{r7, lr}
    addc:	b084      	sub	sp, #16
    adde:	af00      	add	r7, sp, #0
    ade0:	60f8      	str	r0, [r7, #12]
    ade2:	60b9      	str	r1, [r7, #8]
    ade4:	607a      	str	r2, [r7, #4]
    ade6:	603b      	str	r3, [r7, #0]
    if (n_pos_defaults == 0 && n_kw_defaults == 0) {
    ade8:	687b      	ldr	r3, [r7, #4]
    adea:	2b00      	cmp	r3, #0
    adec:	d10e      	bne.n	ae0c <mp_emit_bc_make_function+0x32>
    adee:	683b      	ldr	r3, [r7, #0]
    adf0:	2b00      	cmp	r3, #0
    adf2:	d10b      	bne.n	ae0c <mp_emit_bc_make_function+0x32>
        emit_bc_pre(emit, 1);
    adf4:	2101      	movs	r1, #1
    adf6:	68f8      	ldr	r0, [r7, #12]
    adf8:	f7ff fb3a 	bl	a470 <emit_bc_pre>
        emit_write_bytecode_byte_raw_code(emit, MP_BC_MAKE_FUNCTION, scope->raw_code);
    adfc:	68bb      	ldr	r3, [r7, #8]
    adfe:	691b      	ldr	r3, [r3, #16]
    ae00:	461a      	mov	r2, r3
    ae02:	2160      	movs	r1, #96	; 0x60
    ae04:	68f8      	ldr	r0, [r7, #12]
    ae06:	f7ff f8e9 	bl	9fdc <emit_write_bytecode_byte_raw_code>
    ae0a:	e00b      	b.n	ae24 <mp_emit_bc_make_function+0x4a>
    } else {
        emit_bc_pre(emit, -1);
    ae0c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    ae10:	68f8      	ldr	r0, [r7, #12]
    ae12:	f7ff fb2d 	bl	a470 <emit_bc_pre>
        emit_write_bytecode_byte_raw_code(emit, MP_BC_MAKE_FUNCTION_DEFARGS, scope->raw_code);
    ae16:	68bb      	ldr	r3, [r7, #8]
    ae18:	691b      	ldr	r3, [r3, #16]
    ae1a:	461a      	mov	r2, r3
    ae1c:	2161      	movs	r1, #97	; 0x61
    ae1e:	68f8      	ldr	r0, [r7, #12]
    ae20:	f7ff f8dc 	bl	9fdc <emit_write_bytecode_byte_raw_code>
    }
}
    ae24:	bf00      	nop
    ae26:	3710      	adds	r7, #16
    ae28:	46bd      	mov	sp, r7
    ae2a:	bd80      	pop	{r7, pc}

0000ae2c <mp_emit_bc_make_closure>:

void mp_emit_bc_make_closure(emit_t *emit, scope_t *scope, mp_uint_t n_closed_over, mp_uint_t n_pos_defaults, mp_uint_t n_kw_defaults) {
    ae2c:	b580      	push	{r7, lr}
    ae2e:	b084      	sub	sp, #16
    ae30:	af00      	add	r7, sp, #0
    ae32:	60f8      	str	r0, [r7, #12]
    ae34:	60b9      	str	r1, [r7, #8]
    ae36:	607a      	str	r2, [r7, #4]
    ae38:	603b      	str	r3, [r7, #0]
    if (n_pos_defaults == 0 && n_kw_defaults == 0) {
    ae3a:	683b      	ldr	r3, [r7, #0]
    ae3c:	2b00      	cmp	r3, #0
    ae3e:	d117      	bne.n	ae70 <mp_emit_bc_make_closure+0x44>
    ae40:	69bb      	ldr	r3, [r7, #24]
    ae42:	2b00      	cmp	r3, #0
    ae44:	d114      	bne.n	ae70 <mp_emit_bc_make_closure+0x44>
        emit_bc_pre(emit, -n_closed_over + 1);
    ae46:	687b      	ldr	r3, [r7, #4]
    ae48:	f1c3 0301 	rsb	r3, r3, #1
    ae4c:	4619      	mov	r1, r3
    ae4e:	68f8      	ldr	r0, [r7, #12]
    ae50:	f7ff fb0e 	bl	a470 <emit_bc_pre>
        emit_write_bytecode_byte_raw_code(emit, MP_BC_MAKE_CLOSURE, scope->raw_code);
    ae54:	68bb      	ldr	r3, [r7, #8]
    ae56:	691b      	ldr	r3, [r3, #16]
    ae58:	461a      	mov	r2, r3
    ae5a:	2162      	movs	r1, #98	; 0x62
    ae5c:	68f8      	ldr	r0, [r7, #12]
    ae5e:	f7ff f8bd 	bl	9fdc <emit_write_bytecode_byte_raw_code>
        emit_write_bytecode_byte(emit, n_closed_over);
    ae62:	687b      	ldr	r3, [r7, #4]
    ae64:	b2db      	uxtb	r3, r3
    ae66:	4619      	mov	r1, r3
    ae68:	68f8      	ldr	r0, [r7, #12]
    ae6a:	f7fe ffa1 	bl	9db0 <emit_write_bytecode_byte>
    ae6e:	e01c      	b.n	aeaa <mp_emit_bc_make_closure+0x7e>
    } else {
        assert(n_closed_over <= 255);
    ae70:	687b      	ldr	r3, [r7, #4]
    ae72:	2bff      	cmp	r3, #255	; 0xff
    ae74:	d906      	bls.n	ae84 <mp_emit_bc_make_closure+0x58>
    ae76:	4b0f      	ldr	r3, [pc, #60]	; (aeb4 <mp_emit_bc_make_closure+0x88>)
    ae78:	4a0f      	ldr	r2, [pc, #60]	; (aeb8 <mp_emit_bc_make_closure+0x8c>)
    ae7a:	f240 315b 	movw	r1, #859	; 0x35b
    ae7e:	480f      	ldr	r0, [pc, #60]	; (aebc <mp_emit_bc_make_closure+0x90>)
    ae80:	f012 f82e 	bl	1cee0 <__assert_func>
        emit_bc_pre(emit, -2 - (mp_int_t)n_closed_over + 1);
    ae84:	687b      	ldr	r3, [r7, #4]
    ae86:	43db      	mvns	r3, r3
    ae88:	4619      	mov	r1, r3
    ae8a:	68f8      	ldr	r0, [r7, #12]
    ae8c:	f7ff faf0 	bl	a470 <emit_bc_pre>
        emit_write_bytecode_byte_raw_code(emit, MP_BC_MAKE_CLOSURE_DEFARGS, scope->raw_code);
    ae90:	68bb      	ldr	r3, [r7, #8]
    ae92:	691b      	ldr	r3, [r3, #16]
    ae94:	461a      	mov	r2, r3
    ae96:	2163      	movs	r1, #99	; 0x63
    ae98:	68f8      	ldr	r0, [r7, #12]
    ae9a:	f7ff f89f 	bl	9fdc <emit_write_bytecode_byte_raw_code>
        emit_write_bytecode_byte(emit, n_closed_over);
    ae9e:	687b      	ldr	r3, [r7, #4]
    aea0:	b2db      	uxtb	r3, r3
    aea2:	4619      	mov	r1, r3
    aea4:	68f8      	ldr	r0, [r7, #12]
    aea6:	f7fe ff83 	bl	9db0 <emit_write_bytecode_byte>
    }
}
    aeaa:	bf00      	nop
    aeac:	3710      	adds	r7, #16
    aeae:	46bd      	mov	sp, r7
    aeb0:	bd80      	pop	{r7, pc}
    aeb2:	bf00      	nop
    aeb4:	00022cbc 	.word	0x00022cbc
    aeb8:	00022df4 	.word	0x00022df4
    aebc:	00022b20 	.word	0x00022b20

0000aec0 <emit_bc_call_function_method_helper>:

STATIC void emit_bc_call_function_method_helper(emit_t *emit, mp_int_t stack_adj, mp_uint_t bytecode_base, mp_uint_t n_positional, mp_uint_t n_keyword, mp_uint_t star_flags) {
    aec0:	b580      	push	{r7, lr}
    aec2:	b084      	sub	sp, #16
    aec4:	af00      	add	r7, sp, #0
    aec6:	60f8      	str	r0, [r7, #12]
    aec8:	60b9      	str	r1, [r7, #8]
    aeca:	607a      	str	r2, [r7, #4]
    aecc:	603b      	str	r3, [r7, #0]
    if (star_flags) {
    aece:	69fb      	ldr	r3, [r7, #28]
    aed0:	2b00      	cmp	r3, #0
    aed2:	d017      	beq.n	af04 <emit_bc_call_function_method_helper+0x44>
        emit_bc_pre(emit, stack_adj - (mp_int_t)n_positional - 2 * (mp_int_t)n_keyword - 2);
    aed4:	683b      	ldr	r3, [r7, #0]
    aed6:	68ba      	ldr	r2, [r7, #8]
    aed8:	1ad2      	subs	r2, r2, r3
    aeda:	69bb      	ldr	r3, [r7, #24]
    aedc:	005b      	lsls	r3, r3, #1
    aede:	1ad3      	subs	r3, r2, r3
    aee0:	3b02      	subs	r3, #2
    aee2:	4619      	mov	r1, r3
    aee4:	68f8      	ldr	r0, [r7, #12]
    aee6:	f7ff fac3 	bl	a470 <emit_bc_pre>
        emit_write_bytecode_byte_uint(emit, bytecode_base + 1, (n_keyword << 8) | n_positional); // TODO make it 2 separate uints?
    aeea:	687b      	ldr	r3, [r7, #4]
    aeec:	b2db      	uxtb	r3, r3
    aeee:	3301      	adds	r3, #1
    aef0:	b2d9      	uxtb	r1, r3
    aef2:	69bb      	ldr	r3, [r7, #24]
    aef4:	021a      	lsls	r2, r3, #8
    aef6:	683b      	ldr	r3, [r7, #0]
    aef8:	4313      	orrs	r3, r2
    aefa:	461a      	mov	r2, r3
    aefc:	68f8      	ldr	r0, [r7, #12]
    aefe:	f7fe ffea 	bl	9ed6 <emit_write_bytecode_byte_uint>
    } else {
        emit_bc_pre(emit, stack_adj - (mp_int_t)n_positional - 2 * (mp_int_t)n_keyword);
        emit_write_bytecode_byte_uint(emit, bytecode_base, (n_keyword << 8) | n_positional); // TODO make it 2 separate uints?
    }
}
    af02:	e013      	b.n	af2c <emit_bc_call_function_method_helper+0x6c>
        emit_bc_pre(emit, stack_adj - (mp_int_t)n_positional - 2 * (mp_int_t)n_keyword);
    af04:	683b      	ldr	r3, [r7, #0]
    af06:	68ba      	ldr	r2, [r7, #8]
    af08:	1ad2      	subs	r2, r2, r3
    af0a:	69bb      	ldr	r3, [r7, #24]
    af0c:	005b      	lsls	r3, r3, #1
    af0e:	1ad3      	subs	r3, r2, r3
    af10:	4619      	mov	r1, r3
    af12:	68f8      	ldr	r0, [r7, #12]
    af14:	f7ff faac 	bl	a470 <emit_bc_pre>
        emit_write_bytecode_byte_uint(emit, bytecode_base, (n_keyword << 8) | n_positional); // TODO make it 2 separate uints?
    af18:	687b      	ldr	r3, [r7, #4]
    af1a:	b2d9      	uxtb	r1, r3
    af1c:	69bb      	ldr	r3, [r7, #24]
    af1e:	021a      	lsls	r2, r3, #8
    af20:	683b      	ldr	r3, [r7, #0]
    af22:	4313      	orrs	r3, r2
    af24:	461a      	mov	r2, r3
    af26:	68f8      	ldr	r0, [r7, #12]
    af28:	f7fe ffd5 	bl	9ed6 <emit_write_bytecode_byte_uint>
}
    af2c:	bf00      	nop
    af2e:	3710      	adds	r7, #16
    af30:	46bd      	mov	sp, r7
    af32:	bd80      	pop	{r7, pc}

0000af34 <mp_emit_bc_call_function>:

void mp_emit_bc_call_function(emit_t *emit, mp_uint_t n_positional, mp_uint_t n_keyword, mp_uint_t star_flags) {
    af34:	b580      	push	{r7, lr}
    af36:	b086      	sub	sp, #24
    af38:	af02      	add	r7, sp, #8
    af3a:	60f8      	str	r0, [r7, #12]
    af3c:	60b9      	str	r1, [r7, #8]
    af3e:	607a      	str	r2, [r7, #4]
    af40:	603b      	str	r3, [r7, #0]
    emit_bc_call_function_method_helper(emit, 0, MP_BC_CALL_FUNCTION, n_positional, n_keyword, star_flags);
    af42:	683b      	ldr	r3, [r7, #0]
    af44:	9301      	str	r3, [sp, #4]
    af46:	687b      	ldr	r3, [r7, #4]
    af48:	9300      	str	r3, [sp, #0]
    af4a:	68bb      	ldr	r3, [r7, #8]
    af4c:	2264      	movs	r2, #100	; 0x64
    af4e:	2100      	movs	r1, #0
    af50:	68f8      	ldr	r0, [r7, #12]
    af52:	f7ff ffb5 	bl	aec0 <emit_bc_call_function_method_helper>
}
    af56:	bf00      	nop
    af58:	3710      	adds	r7, #16
    af5a:	46bd      	mov	sp, r7
    af5c:	bd80      	pop	{r7, pc}

0000af5e <mp_emit_bc_call_method>:

void mp_emit_bc_call_method(emit_t *emit, mp_uint_t n_positional, mp_uint_t n_keyword, mp_uint_t star_flags) {
    af5e:	b580      	push	{r7, lr}
    af60:	b086      	sub	sp, #24
    af62:	af02      	add	r7, sp, #8
    af64:	60f8      	str	r0, [r7, #12]
    af66:	60b9      	str	r1, [r7, #8]
    af68:	607a      	str	r2, [r7, #4]
    af6a:	603b      	str	r3, [r7, #0]
    emit_bc_call_function_method_helper(emit, -1, MP_BC_CALL_METHOD, n_positional, n_keyword, star_flags);
    af6c:	683b      	ldr	r3, [r7, #0]
    af6e:	9301      	str	r3, [sp, #4]
    af70:	687b      	ldr	r3, [r7, #4]
    af72:	9300      	str	r3, [sp, #0]
    af74:	68bb      	ldr	r3, [r7, #8]
    af76:	2266      	movs	r2, #102	; 0x66
    af78:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    af7c:	68f8      	ldr	r0, [r7, #12]
    af7e:	f7ff ff9f 	bl	aec0 <emit_bc_call_function_method_helper>
}
    af82:	bf00      	nop
    af84:	3710      	adds	r7, #16
    af86:	46bd      	mov	sp, r7
    af88:	bd80      	pop	{r7, pc}

0000af8a <mp_emit_bc_return_value>:

void mp_emit_bc_return_value(emit_t *emit) {
    af8a:	b580      	push	{r7, lr}
    af8c:	b082      	sub	sp, #8
    af8e:	af00      	add	r7, sp, #0
    af90:	6078      	str	r0, [r7, #4]
    emit_bc_pre(emit, -1);
    af92:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    af96:	6878      	ldr	r0, [r7, #4]
    af98:	f7ff fa6a 	bl	a470 <emit_bc_pre>
    emit->last_emit_was_return_value = true;
    af9c:	687b      	ldr	r3, [r7, #4]
    af9e:	2201      	movs	r2, #1
    afa0:	719a      	strb	r2, [r3, #6]
    emit_write_bytecode_byte(emit, MP_BC_RETURN_VALUE);
    afa2:	215b      	movs	r1, #91	; 0x5b
    afa4:	6878      	ldr	r0, [r7, #4]
    afa6:	f7fe ff03 	bl	9db0 <emit_write_bytecode_byte>
}
    afaa:	bf00      	nop
    afac:	3708      	adds	r7, #8
    afae:	46bd      	mov	sp, r7
    afb0:	bd80      	pop	{r7, pc}

0000afb2 <mp_emit_bc_raise_varargs>:

void mp_emit_bc_raise_varargs(emit_t *emit, mp_uint_t n_args) {
    afb2:	b580      	push	{r7, lr}
    afb4:	b082      	sub	sp, #8
    afb6:	af00      	add	r7, sp, #0
    afb8:	6078      	str	r0, [r7, #4]
    afba:	6039      	str	r1, [r7, #0]
    assert(n_args <= 2);
    afbc:	683b      	ldr	r3, [r7, #0]
    afbe:	2b02      	cmp	r3, #2
    afc0:	d906      	bls.n	afd0 <mp_emit_bc_raise_varargs+0x1e>
    afc2:	4b0c      	ldr	r3, [pc, #48]	; (aff4 <mp_emit_bc_raise_varargs+0x42>)
    afc4:	4a0c      	ldr	r2, [pc, #48]	; (aff8 <mp_emit_bc_raise_varargs+0x46>)
    afc6:	f240 317b 	movw	r1, #891	; 0x37b
    afca:	480c      	ldr	r0, [pc, #48]	; (affc <mp_emit_bc_raise_varargs+0x4a>)
    afcc:	f011 ff88 	bl	1cee0 <__assert_func>
    emit_bc_pre(emit, -n_args);
    afd0:	683b      	ldr	r3, [r7, #0]
    afd2:	425b      	negs	r3, r3
    afd4:	4619      	mov	r1, r3
    afd6:	6878      	ldr	r0, [r7, #4]
    afd8:	f7ff fa4a 	bl	a470 <emit_bc_pre>
    emit_write_bytecode_byte_byte(emit, MP_BC_RAISE_VARARGS, n_args);
    afdc:	683b      	ldr	r3, [r7, #0]
    afde:	b2db      	uxtb	r3, r3
    afe0:	461a      	mov	r2, r3
    afe2:	215c      	movs	r1, #92	; 0x5c
    afe4:	6878      	ldr	r0, [r7, #4]
    afe6:	f7fe fef5 	bl	9dd4 <emit_write_bytecode_byte_byte>
}
    afea:	bf00      	nop
    afec:	3708      	adds	r7, #8
    afee:	46bd      	mov	sp, r7
    aff0:	bd80      	pop	{r7, pc}
    aff2:	bf00      	nop
    aff4:	00022cd4 	.word	0x00022cd4
    aff8:	00022e0c 	.word	0x00022e0c
    affc:	00022b20 	.word	0x00022b20

0000b000 <mp_emit_bc_yield>:

void mp_emit_bc_yield(emit_t *emit, int kind) {
    b000:	b580      	push	{r7, lr}
    b002:	b082      	sub	sp, #8
    b004:	af00      	add	r7, sp, #0
    b006:	6078      	str	r0, [r7, #4]
    b008:	6039      	str	r1, [r7, #0]
    MP_STATIC_ASSERT(MP_BC_YIELD_VALUE + 1 == MP_BC_YIELD_FROM);
    emit_bc_pre(emit, -kind);
    b00a:	683b      	ldr	r3, [r7, #0]
    b00c:	425b      	negs	r3, r3
    b00e:	4619      	mov	r1, r3
    b010:	6878      	ldr	r0, [r7, #4]
    b012:	f7ff fa2d 	bl	a470 <emit_bc_pre>
    emit->scope->scope_flags |= MP_SCOPE_FLAG_GENERATOR;
    b016:	687b      	ldr	r3, [r7, #4]
    b018:	68db      	ldr	r3, [r3, #12]
    b01a:	687a      	ldr	r2, [r7, #4]
    b01c:	68d2      	ldr	r2, [r2, #12]
    b01e:	8b12      	ldrh	r2, [r2, #24]
    b020:	f042 0204 	orr.w	r2, r2, #4
    b024:	b292      	uxth	r2, r2
    b026:	831a      	strh	r2, [r3, #24]
    emit_write_bytecode_byte(emit, MP_BC_YIELD_VALUE + kind);
    b028:	683b      	ldr	r3, [r7, #0]
    b02a:	b2db      	uxtb	r3, r3
    b02c:	335d      	adds	r3, #93	; 0x5d
    b02e:	b2db      	uxtb	r3, r3
    b030:	4619      	mov	r1, r3
    b032:	6878      	ldr	r0, [r7, #4]
    b034:	f7fe febc 	bl	9db0 <emit_write_bytecode_byte>
}
    b038:	bf00      	nop
    b03a:	3708      	adds	r7, #8
    b03c:	46bd      	mov	sp, r7
    b03e:	bd80      	pop	{r7, pc}

0000b040 <mp_emit_bc_start_except_handler>:

void mp_emit_bc_start_except_handler(emit_t *emit) {
    b040:	b580      	push	{r7, lr}
    b042:	b082      	sub	sp, #8
    b044:	af00      	add	r7, sp, #0
    b046:	6078      	str	r0, [r7, #4]
    mp_emit_bc_adjust_stack_size(emit, 4); // stack adjust for the exception instance, +3 for possible UNWIND_JUMP state
    b048:	2104      	movs	r1, #4
    b04a:	6878      	ldr	r0, [r7, #4]
    b04c:	f7ff f9d9 	bl	a402 <mp_emit_bc_adjust_stack_size>
}
    b050:	bf00      	nop
    b052:	3708      	adds	r7, #8
    b054:	46bd      	mov	sp, r7
    b056:	bd80      	pop	{r7, pc}

0000b058 <mp_emit_bc_end_except_handler>:

void mp_emit_bc_end_except_handler(emit_t *emit) {
    b058:	b580      	push	{r7, lr}
    b05a:	b082      	sub	sp, #8
    b05c:	af00      	add	r7, sp, #0
    b05e:	6078      	str	r0, [r7, #4]
    mp_emit_bc_adjust_stack_size(emit, -3); // stack adjust
    b060:	f06f 0102 	mvn.w	r1, #2
    b064:	6878      	ldr	r0, [r7, #4]
    b066:	f7ff f9cc 	bl	a402 <mp_emit_bc_adjust_stack_size>
}
    b06a:	bf00      	nop
    b06c:	3708      	adds	r7, #8
    b06e:	46bd      	mov	sp, r7
    b070:	bd80      	pop	{r7, pc}
    b072:	bf00      	nop

0000b074 <mp_parse_num_base>:
#include "py/misc.h"
#include "py/parsenumbase.h"

// find real radix base, and strip preceding '0x', '0o' and '0b'
// puts base in *base, and returns number of bytes to skip the prefix
size_t mp_parse_num_base(const char *str, size_t len, int *base) {
    b074:	b480      	push	{r7}
    b076:	b087      	sub	sp, #28
    b078:	af00      	add	r7, sp, #0
    b07a:	60f8      	str	r0, [r7, #12]
    b07c:	60b9      	str	r1, [r7, #8]
    b07e:	607a      	str	r2, [r7, #4]
    const byte *p = (const byte*)str;
    b080:	68fb      	ldr	r3, [r7, #12]
    b082:	617b      	str	r3, [r7, #20]
    if (len <= 1) {
    b084:	68bb      	ldr	r3, [r7, #8]
    b086:	2b01      	cmp	r3, #1
    b088:	d971      	bls.n	b16e <mp_parse_num_base+0xfa>
        goto no_prefix;
    }
    unichar c = *(p++);
    b08a:	697b      	ldr	r3, [r7, #20]
    b08c:	1c5a      	adds	r2, r3, #1
    b08e:	617a      	str	r2, [r7, #20]
    b090:	781b      	ldrb	r3, [r3, #0]
    b092:	613b      	str	r3, [r7, #16]
    if ((*base == 0 || *base == 16) && c == '0') {
    b094:	687b      	ldr	r3, [r7, #4]
    b096:	681b      	ldr	r3, [r3, #0]
    b098:	2b00      	cmp	r3, #0
    b09a:	d003      	beq.n	b0a4 <mp_parse_num_base+0x30>
    b09c:	687b      	ldr	r3, [r7, #4]
    b09e:	681b      	ldr	r3, [r3, #0]
    b0a0:	2b10      	cmp	r3, #16
    b0a2:	d136      	bne.n	b112 <mp_parse_num_base+0x9e>
    b0a4:	693b      	ldr	r3, [r7, #16]
    b0a6:	2b30      	cmp	r3, #48	; 0x30
    b0a8:	d133      	bne.n	b112 <mp_parse_num_base+0x9e>
        c = *(p++);
    b0aa:	697b      	ldr	r3, [r7, #20]
    b0ac:	1c5a      	adds	r2, r3, #1
    b0ae:	617a      	str	r2, [r7, #20]
    b0b0:	781b      	ldrb	r3, [r3, #0]
    b0b2:	613b      	str	r3, [r7, #16]
        if ((c | 32) == 'x') {
    b0b4:	693b      	ldr	r3, [r7, #16]
    b0b6:	f043 0320 	orr.w	r3, r3, #32
    b0ba:	2b78      	cmp	r3, #120	; 0x78
    b0bc:	d103      	bne.n	b0c6 <mp_parse_num_base+0x52>
            *base = 16;
    b0be:	687b      	ldr	r3, [r7, #4]
    b0c0:	2210      	movs	r2, #16
    b0c2:	601a      	str	r2, [r3, #0]
        if ((c | 32) == 'x') {
    b0c4:	e05b      	b.n	b17e <mp_parse_num_base+0x10a>
        } else if (*base == 0 && (c | 32) == 'o') {
    b0c6:	687b      	ldr	r3, [r7, #4]
    b0c8:	681b      	ldr	r3, [r3, #0]
    b0ca:	2b00      	cmp	r3, #0
    b0cc:	d108      	bne.n	b0e0 <mp_parse_num_base+0x6c>
    b0ce:	693b      	ldr	r3, [r7, #16]
    b0d0:	f043 0320 	orr.w	r3, r3, #32
    b0d4:	2b6f      	cmp	r3, #111	; 0x6f
    b0d6:	d103      	bne.n	b0e0 <mp_parse_num_base+0x6c>
            *base = 8;
    b0d8:	687b      	ldr	r3, [r7, #4]
    b0da:	2208      	movs	r2, #8
    b0dc:	601a      	str	r2, [r3, #0]
    b0de:	e017      	b.n	b110 <mp_parse_num_base+0x9c>
        } else if (*base == 0 && (c | 32) == 'b') {
    b0e0:	687b      	ldr	r3, [r7, #4]
    b0e2:	681b      	ldr	r3, [r3, #0]
    b0e4:	2b00      	cmp	r3, #0
    b0e6:	d108      	bne.n	b0fa <mp_parse_num_base+0x86>
    b0e8:	693b      	ldr	r3, [r7, #16]
    b0ea:	f043 0320 	orr.w	r3, r3, #32
    b0ee:	2b62      	cmp	r3, #98	; 0x62
    b0f0:	d103      	bne.n	b0fa <mp_parse_num_base+0x86>
            *base = 2;
    b0f2:	687b      	ldr	r3, [r7, #4]
    b0f4:	2202      	movs	r2, #2
    b0f6:	601a      	str	r2, [r3, #0]
    b0f8:	e00a      	b.n	b110 <mp_parse_num_base+0x9c>
        } else {
            if (*base == 0) {
    b0fa:	687b      	ldr	r3, [r7, #4]
    b0fc:	681b      	ldr	r3, [r3, #0]
    b0fe:	2b00      	cmp	r3, #0
    b100:	d102      	bne.n	b108 <mp_parse_num_base+0x94>
                *base = 10;
    b102:	687b      	ldr	r3, [r7, #4]
    b104:	220a      	movs	r2, #10
    b106:	601a      	str	r2, [r3, #0]
            }
            p -= 2;
    b108:	697b      	ldr	r3, [r7, #20]
    b10a:	3b02      	subs	r3, #2
    b10c:	617b      	str	r3, [r7, #20]
        if ((c | 32) == 'x') {
    b10e:	e036      	b.n	b17e <mp_parse_num_base+0x10a>
    b110:	e035      	b.n	b17e <mp_parse_num_base+0x10a>
        }
    } else if (*base == 8 && c == '0') {
    b112:	687b      	ldr	r3, [r7, #4]
    b114:	681b      	ldr	r3, [r3, #0]
    b116:	2b08      	cmp	r3, #8
    b118:	d110      	bne.n	b13c <mp_parse_num_base+0xc8>
    b11a:	693b      	ldr	r3, [r7, #16]
    b11c:	2b30      	cmp	r3, #48	; 0x30
    b11e:	d10d      	bne.n	b13c <mp_parse_num_base+0xc8>
        c = *(p++);
    b120:	697b      	ldr	r3, [r7, #20]
    b122:	1c5a      	adds	r2, r3, #1
    b124:	617a      	str	r2, [r7, #20]
    b126:	781b      	ldrb	r3, [r3, #0]
    b128:	613b      	str	r3, [r7, #16]
        if ((c | 32) != 'o') {
    b12a:	693b      	ldr	r3, [r7, #16]
    b12c:	f043 0320 	orr.w	r3, r3, #32
    b130:	2b6f      	cmp	r3, #111	; 0x6f
    b132:	d024      	beq.n	b17e <mp_parse_num_base+0x10a>
            p -= 2;
    b134:	697b      	ldr	r3, [r7, #20]
    b136:	3b02      	subs	r3, #2
    b138:	617b      	str	r3, [r7, #20]
        if ((c | 32) != 'o') {
    b13a:	e020      	b.n	b17e <mp_parse_num_base+0x10a>
        }
    } else if (*base == 2 && c == '0') {
    b13c:	687b      	ldr	r3, [r7, #4]
    b13e:	681b      	ldr	r3, [r3, #0]
    b140:	2b02      	cmp	r3, #2
    b142:	d110      	bne.n	b166 <mp_parse_num_base+0xf2>
    b144:	693b      	ldr	r3, [r7, #16]
    b146:	2b30      	cmp	r3, #48	; 0x30
    b148:	d10d      	bne.n	b166 <mp_parse_num_base+0xf2>
        c = *(p++);
    b14a:	697b      	ldr	r3, [r7, #20]
    b14c:	1c5a      	adds	r2, r3, #1
    b14e:	617a      	str	r2, [r7, #20]
    b150:	781b      	ldrb	r3, [r3, #0]
    b152:	613b      	str	r3, [r7, #16]
        if ((c | 32) != 'b') {
    b154:	693b      	ldr	r3, [r7, #16]
    b156:	f043 0320 	orr.w	r3, r3, #32
    b15a:	2b62      	cmp	r3, #98	; 0x62
    b15c:	d00f      	beq.n	b17e <mp_parse_num_base+0x10a>
            p -= 2;
    b15e:	697b      	ldr	r3, [r7, #20]
    b160:	3b02      	subs	r3, #2
    b162:	617b      	str	r3, [r7, #20]
        if ((c | 32) != 'b') {
    b164:	e00b      	b.n	b17e <mp_parse_num_base+0x10a>
        }
    } else {
        p--;
    b166:	697b      	ldr	r3, [r7, #20]
    b168:	3b01      	subs	r3, #1
    b16a:	617b      	str	r3, [r7, #20]
    b16c:	e000      	b.n	b170 <mp_parse_num_base+0xfc>
        goto no_prefix;
    b16e:	bf00      	nop
    no_prefix:
        if (*base == 0) {
    b170:	687b      	ldr	r3, [r7, #4]
    b172:	681b      	ldr	r3, [r3, #0]
    b174:	2b00      	cmp	r3, #0
    b176:	d102      	bne.n	b17e <mp_parse_num_base+0x10a>
            *base = 10;
    b178:	687b      	ldr	r3, [r7, #4]
    b17a:	220a      	movs	r2, #10
    b17c:	601a      	str	r2, [r3, #0]
        }
    }
    return p - (const byte*)str;
    b17e:	697a      	ldr	r2, [r7, #20]
    b180:	68fb      	ldr	r3, [r7, #12]
    b182:	1ad3      	subs	r3, r2, r3
}
    b184:	4618      	mov	r0, r3
    b186:	371c      	adds	r7, #28
    b188:	46bd      	mov	sp, r7
    b18a:	f85d 7b04 	ldr.w	r7, [sp], #4
    b18e:	4770      	bx	lr

0000b190 <raise_exc>:

#if MICROPY_PY_BUILTINS_FLOAT
#include <math.h>
#endif

STATIC NORETURN void raise_exc(mp_obj_t exc, mp_lexer_t *lex) {
    b190:	b580      	push	{r7, lr}
    b192:	b082      	sub	sp, #8
    b194:	af00      	add	r7, sp, #0
    b196:	6078      	str	r0, [r7, #4]
    b198:	6039      	str	r1, [r7, #0]
    // if lex!=NULL then the parser called us and we need to convert the
    // exception's type from ValueError to SyntaxError and add traceback info
    if (lex != NULL) {
    b19a:	683b      	ldr	r3, [r7, #0]
    b19c:	2b00      	cmp	r3, #0
    b19e:	d00a      	beq.n	b1b6 <raise_exc+0x26>
        ((mp_obj_base_t*)MP_OBJ_TO_PTR(exc))->type = &mp_type_SyntaxError;
    b1a0:	687b      	ldr	r3, [r7, #4]
    b1a2:	4a06      	ldr	r2, [pc, #24]	; (b1bc <raise_exc+0x2c>)
    b1a4:	601a      	str	r2, [r3, #0]
        mp_obj_exception_add_traceback(exc, lex->source_name, lex->tok_line, MP_QSTR_NULL);
    b1a6:	683b      	ldr	r3, [r7, #0]
    b1a8:	6819      	ldr	r1, [r3, #0]
    b1aa:	683b      	ldr	r3, [r7, #0]
    b1ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    b1ae:	2300      	movs	r3, #0
    b1b0:	6878      	ldr	r0, [r7, #4]
    b1b2:	f004 fd53 	bl	fc5c <mp_obj_exception_add_traceback>
    }
    nlr_raise(exc);
    b1b6:	6878      	ldr	r0, [r7, #4]
    b1b8:	f7f5 f892 	bl	2e0 <nlr_jump>
    b1bc:	000242fc 	.word	0x000242fc

0000b1c0 <mp_parse_num_integer>:
}

mp_obj_t mp_parse_num_integer(const char *restrict str_, size_t len, int base, mp_lexer_t *lex) {
    b1c0:	b580      	push	{r7, lr}
    b1c2:	b094      	sub	sp, #80	; 0x50
    b1c4:	af00      	add	r7, sp, #0
    b1c6:	60f8      	str	r0, [r7, #12]
    b1c8:	60b9      	str	r1, [r7, #8]
    b1ca:	607a      	str	r2, [r7, #4]
    b1cc:	603b      	str	r3, [r7, #0]
    const byte *restrict str = (const byte *)str_;
    b1ce:	68fb      	ldr	r3, [r7, #12]
    b1d0:	64fb      	str	r3, [r7, #76]	; 0x4c
    const byte *restrict top = str + len;
    b1d2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    b1d4:	68bb      	ldr	r3, [r7, #8]
    b1d6:	4413      	add	r3, r2
    b1d8:	63bb      	str	r3, [r7, #56]	; 0x38
    bool neg = false;
    b1da:	2300      	movs	r3, #0
    b1dc:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
    mp_obj_t ret_val;

    // check radix base
    if ((base != 0 && base < 2) || base > 36) {
    b1e0:	687b      	ldr	r3, [r7, #4]
    b1e2:	2b00      	cmp	r3, #0
    b1e4:	d002      	beq.n	b1ec <mp_parse_num_integer+0x2c>
    b1e6:	687b      	ldr	r3, [r7, #4]
    b1e8:	2b01      	cmp	r3, #1
    b1ea:	dd02      	ble.n	b1f2 <mp_parse_num_integer+0x32>
    b1ec:	687b      	ldr	r3, [r7, #4]
    b1ee:	2b24      	cmp	r3, #36	; 0x24
    b1f0:	dd05      	ble.n	b1fe <mp_parse_num_integer+0x3e>
        // this won't be reached if lex!=NULL
        mp_raise_ValueError("int() arg 2 must be >= 2 and <= 36");
    b1f2:	4864      	ldr	r0, [pc, #400]	; (b384 <mp_parse_num_integer+0x1c4>)
    b1f4:	f002 f8bf 	bl	d376 <mp_raise_ValueError>
    }

    // skip leading space
    for (; str < top && unichar_isspace(*str); str++) {
    b1f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    b1fa:	3301      	adds	r3, #1
    b1fc:	64fb      	str	r3, [r7, #76]	; 0x4c
    b1fe:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    b200:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    b202:	429a      	cmp	r2, r3
    b204:	d207      	bcs.n	b216 <mp_parse_num_integer+0x56>
    b206:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    b208:	781b      	ldrb	r3, [r3, #0]
    b20a:	4618      	mov	r0, r3
    b20c:	f7f7 f99e 	bl	254c <unichar_isspace>
    b210:	4603      	mov	r3, r0
    b212:	2b00      	cmp	r3, #0
    b214:	d1f0      	bne.n	b1f8 <mp_parse_num_integer+0x38>
    }

    // parse optional sign
    if (str < top) {
    b216:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    b218:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    b21a:	429a      	cmp	r2, r3
    b21c:	d211      	bcs.n	b242 <mp_parse_num_integer+0x82>
        if (*str == '+') {
    b21e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    b220:	781b      	ldrb	r3, [r3, #0]
    b222:	2b2b      	cmp	r3, #43	; 0x2b
    b224:	d103      	bne.n	b22e <mp_parse_num_integer+0x6e>
            str++;
    b226:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    b228:	3301      	adds	r3, #1
    b22a:	64fb      	str	r3, [r7, #76]	; 0x4c
    b22c:	e009      	b.n	b242 <mp_parse_num_integer+0x82>
        } else if (*str == '-') {
    b22e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    b230:	781b      	ldrb	r3, [r3, #0]
    b232:	2b2d      	cmp	r3, #45	; 0x2d
    b234:	d105      	bne.n	b242 <mp_parse_num_integer+0x82>
            str++;
    b236:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    b238:	3301      	adds	r3, #1
    b23a:	64fb      	str	r3, [r7, #76]	; 0x4c
            neg = true;
    b23c:	2301      	movs	r3, #1
    b23e:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
        }
    }

    // parse optional base prefix
    str += mp_parse_num_base((const char*)str, top - str, &base);
    b242:	6bba      	ldr	r2, [r7, #56]	; 0x38
    b244:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    b246:	1ad3      	subs	r3, r2, r3
    b248:	4619      	mov	r1, r3
    b24a:	1d3b      	adds	r3, r7, #4
    b24c:	461a      	mov	r2, r3
    b24e:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
    b250:	f7ff ff10 	bl	b074 <mp_parse_num_base>
    b254:	4602      	mov	r2, r0
    b256:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    b258:	4413      	add	r3, r2
    b25a:	64fb      	str	r3, [r7, #76]	; 0x4c

    // string should be an integer number
    mp_int_t int_val = 0;
    b25c:	2300      	movs	r3, #0
    b25e:	643b      	str	r3, [r7, #64]	; 0x40
    const byte *restrict str_val_start = str;
    b260:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    b262:	637b      	str	r3, [r7, #52]	; 0x34
    for (; str < top; str++) {
    b264:	e03c      	b.n	b2e0 <mp_parse_num_integer+0x120>
        // get next digit as a value
        mp_uint_t dig = *str;
    b266:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    b268:	781b      	ldrb	r3, [r3, #0]
    b26a:	63fb      	str	r3, [r7, #60]	; 0x3c
        if ('0' <= dig && dig <= '9') {
    b26c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    b26e:	2b2f      	cmp	r3, #47	; 0x2f
    b270:	d906      	bls.n	b280 <mp_parse_num_integer+0xc0>
    b272:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    b274:	2b39      	cmp	r3, #57	; 0x39
    b276:	d803      	bhi.n	b280 <mp_parse_num_integer+0xc0>
            dig -= '0';
    b278:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    b27a:	3b30      	subs	r3, #48	; 0x30
    b27c:	63fb      	str	r3, [r7, #60]	; 0x3c
    b27e:	e00f      	b.n	b2a0 <mp_parse_num_integer+0xe0>
        } else if (dig == '_') {
    b280:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    b282:	2b5f      	cmp	r3, #95	; 0x5f
    b284:	d028      	beq.n	b2d8 <mp_parse_num_integer+0x118>
            continue;
        } else {
            dig |= 0x20; // make digit lower-case
    b286:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    b288:	f043 0320 	orr.w	r3, r3, #32
    b28c:	63fb      	str	r3, [r7, #60]	; 0x3c
            if ('a' <= dig && dig <= 'z') {
    b28e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    b290:	2b60      	cmp	r3, #96	; 0x60
    b292:	d92b      	bls.n	b2ec <mp_parse_num_integer+0x12c>
    b294:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    b296:	2b7a      	cmp	r3, #122	; 0x7a
    b298:	d828      	bhi.n	b2ec <mp_parse_num_integer+0x12c>
                dig -= 'a' - 10;
    b29a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    b29c:	3b57      	subs	r3, #87	; 0x57
    b29e:	63fb      	str	r3, [r7, #60]	; 0x3c
            } else {
                // unknown character
                break;
            }
        }
        if (dig >= (mp_uint_t)base) {
    b2a0:	687b      	ldr	r3, [r7, #4]
    b2a2:	461a      	mov	r2, r3
    b2a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    b2a6:	4293      	cmp	r3, r2
    b2a8:	d21f      	bcs.n	b2ea <mp_parse_num_integer+0x12a>
            break;
        }

        // add next digi and check for overflow
        if (mp_small_int_mul_overflow(int_val, base)) {
    b2aa:	687b      	ldr	r3, [r7, #4]
    b2ac:	4619      	mov	r1, r3
    b2ae:	6c38      	ldr	r0, [r7, #64]	; 0x40
    b2b0:	f011 fb74 	bl	1c99c <mp_small_int_mul_overflow>
    b2b4:	4603      	mov	r3, r0
    b2b6:	2b00      	cmp	r3, #0
    b2b8:	d13e      	bne.n	b338 <mp_parse_num_integer+0x178>
            goto overflow;
        }
        int_val = int_val * base + dig;
    b2ba:	687b      	ldr	r3, [r7, #4]
    b2bc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    b2be:	fb02 f303 	mul.w	r3, r2, r3
    b2c2:	461a      	mov	r2, r3
    b2c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    b2c6:	4413      	add	r3, r2
    b2c8:	643b      	str	r3, [r7, #64]	; 0x40
        if (!MP_SMALL_INT_FITS(int_val)) {
    b2ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    b2cc:	005a      	lsls	r2, r3, #1
    b2ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    b2d0:	4053      	eors	r3, r2
    b2d2:	2b00      	cmp	r3, #0
    b2d4:	db32      	blt.n	b33c <mp_parse_num_integer+0x17c>
    b2d6:	e000      	b.n	b2da <mp_parse_num_integer+0x11a>
            continue;
    b2d8:	bf00      	nop
    for (; str < top; str++) {
    b2da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    b2dc:	3301      	adds	r3, #1
    b2de:	64fb      	str	r3, [r7, #76]	; 0x4c
    b2e0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    b2e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    b2e4:	429a      	cmp	r2, r3
    b2e6:	d3be      	bcc.n	b266 <mp_parse_num_integer+0xa6>
    b2e8:	e000      	b.n	b2ec <mp_parse_num_integer+0x12c>
            break;
    b2ea:	bf00      	nop
            goto overflow;
        }
    }

    // negate value if needed
    if (neg) {
    b2ec:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
    b2f0:	2b00      	cmp	r3, #0
    b2f2:	d002      	beq.n	b2fa <mp_parse_num_integer+0x13a>
        int_val = -int_val;
    b2f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    b2f6:	425b      	negs	r3, r3
    b2f8:	643b      	str	r3, [r7, #64]	; 0x40
    }

    // create the small int
    ret_val = MP_OBJ_NEW_SMALL_INT(int_val);
    b2fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    b2fc:	005b      	lsls	r3, r3, #1
    b2fe:	f043 0301 	orr.w	r3, r3, #1
    b302:	647b      	str	r3, [r7, #68]	; 0x44

have_ret_val:
    // check we parsed something
    if (str == str_val_start) {
    b304:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    b306:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    b308:	429a      	cmp	r2, r3
    b30a:	d02a      	beq.n	b362 <mp_parse_num_integer+0x1a2>
        goto value_error;
    }

    // skip trailing space
    for (; str < top && unichar_isspace(*str); str++) {
    b30c:	e002      	b.n	b314 <mp_parse_num_integer+0x154>
    b30e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    b310:	3301      	adds	r3, #1
    b312:	64fb      	str	r3, [r7, #76]	; 0x4c
    b314:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    b316:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    b318:	429a      	cmp	r2, r3
    b31a:	d207      	bcs.n	b32c <mp_parse_num_integer+0x16c>
    b31c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    b31e:	781b      	ldrb	r3, [r3, #0]
    b320:	4618      	mov	r0, r3
    b322:	f7f7 f913 	bl	254c <unichar_isspace>
    b326:	4603      	mov	r3, r0
    b328:	2b00      	cmp	r3, #0
    b32a:	d1f0      	bne.n	b30e <mp_parse_num_integer+0x14e>
    }

    // check we reached the end of the string
    if (str != top) {
    b32c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    b32e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    b330:	429a      	cmp	r2, r3
    b332:	d118      	bne.n	b366 <mp_parse_num_integer+0x1a6>
        goto value_error;
    }

    // return the object
    return ret_val;
    b334:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    b336:	e020      	b.n	b37a <mp_parse_num_integer+0x1ba>
            goto overflow;
    b338:	bf00      	nop
    b33a:	e000      	b.n	b33e <mp_parse_num_integer+0x17e>
            goto overflow;
    b33c:	bf00      	nop

overflow:
    // reparse using long int
    {
        const char *s2 = (const char*)str_val_start;
    b33e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    b340:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret_val = mp_obj_new_int_from_str_len(&s2, top - str_val_start, neg, base);
    b342:	6bba      	ldr	r2, [r7, #56]	; 0x38
    b344:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    b346:	1ad3      	subs	r3, r2, r3
    b348:	4619      	mov	r1, r3
    b34a:	687b      	ldr	r3, [r7, #4]
    b34c:	f897 204b 	ldrb.w	r2, [r7, #75]	; 0x4b
    b350:	f107 002c 	add.w	r0, r7, #44	; 0x2c
    b354:	f005 fce0 	bl	10d18 <mp_obj_new_int_from_str_len>
    b358:	6478      	str	r0, [r7, #68]	; 0x44
        str = (const byte*)s2;
    b35a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b35c:	64fb      	str	r3, [r7, #76]	; 0x4c
        goto have_ret_val;
    b35e:	bf00      	nop
    b360:	e7d0      	b.n	b304 <mp_parse_num_integer+0x144>
        goto value_error;
    b362:	bf00      	nop
    b364:	e000      	b.n	b368 <mp_parse_num_integer+0x1a8>
        goto value_error;
    b366:	bf00      	nop
    }

value_error:
    if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
        mp_obj_t exc = mp_obj_new_exception_msg(&mp_type_ValueError,
    b368:	4907      	ldr	r1, [pc, #28]	; (b388 <mp_parse_num_integer+0x1c8>)
    b36a:	4808      	ldr	r0, [pc, #32]	; (b38c <mp_parse_num_integer+0x1cc>)
    b36c:	f004 fafa 	bl	f964 <mp_obj_new_exception_msg>
    b370:	6338      	str	r0, [r7, #48]	; 0x30
            "invalid syntax for integer");
        raise_exc(exc, lex);
    b372:	6839      	ldr	r1, [r7, #0]
    b374:	6b38      	ldr	r0, [r7, #48]	; 0x30
    b376:	f7ff ff0b 	bl	b190 <raise_exc>
        mp_str_print_quoted(&print, str_val_start, top - str_val_start, true);
        mp_obj_t exc = mp_obj_new_exception_arg1(&mp_type_ValueError,
            mp_obj_new_str_from_vstr(&mp_type_str, &vstr));
        raise_exc(exc, lex);
    }
}
    b37a:	4618      	mov	r0, r3
    b37c:	3750      	adds	r7, #80	; 0x50
    b37e:	46bd      	mov	sp, r7
    b380:	bd80      	pop	{r7, pc}
    b382:	bf00      	nop
    b384:	00022e28 	.word	0x00022e28
    b388:	00022e4c 	.word	0x00022e4c
    b38c:	000243b0 	.word	0x000243b0

0000b390 <mp_parse_num_decimal>:
    PARSE_DEC_IN_INTG,
    PARSE_DEC_IN_FRAC,
    PARSE_DEC_IN_EXP,
} parse_dec_in_t;

mp_obj_t mp_parse_num_decimal(const char *str, size_t len, bool allow_imag, bool force_complex, mp_lexer_t *lex) {
    b390:	b580      	push	{r7, lr}
    b392:	b084      	sub	sp, #16
    b394:	af00      	add	r7, sp, #0
    b396:	60f8      	str	r0, [r7, #12]
    b398:	60b9      	str	r1, [r7, #8]
    b39a:	4611      	mov	r1, r2
    b39c:	461a      	mov	r2, r3
    b39e:	460b      	mov	r3, r1
    b3a0:	71fb      	strb	r3, [r7, #7]
    b3a2:	4613      	mov	r3, r2
    b3a4:	71bb      	strb	r3, [r7, #6]

value_error:
    raise_exc(mp_obj_new_exception_msg(&mp_type_ValueError, "invalid syntax for number"), lex);

#else
    raise_exc(mp_obj_new_exception_msg(&mp_type_ValueError, "decimal numbers not supported"), lex);
    b3a6:	4904      	ldr	r1, [pc, #16]	; (b3b8 <mp_parse_num_decimal+0x28>)
    b3a8:	4804      	ldr	r0, [pc, #16]	; (b3bc <mp_parse_num_decimal+0x2c>)
    b3aa:	f004 fadb 	bl	f964 <mp_obj_new_exception_msg>
    b3ae:	4603      	mov	r3, r0
    b3b0:	69b9      	ldr	r1, [r7, #24]
    b3b2:	4618      	mov	r0, r3
    b3b4:	f7ff feec 	bl	b190 <raise_exc>
    b3b8:	00022e68 	.word	0x00022e68
    b3bc:	000243b0 	.word	0x000243b0

0000b3c0 <MP_OBJ_IS_OBJ>:
    b3c0:	b480      	push	{r7}
    b3c2:	b083      	sub	sp, #12
    b3c4:	af00      	add	r7, sp, #0
    b3c6:	6078      	str	r0, [r7, #4]
    b3c8:	687b      	ldr	r3, [r7, #4]
    b3ca:	f003 0303 	and.w	r3, r3, #3
    b3ce:	2b00      	cmp	r3, #0
    b3d0:	bf0c      	ite	eq
    b3d2:	2301      	moveq	r3, #1
    b3d4:	2300      	movne	r3, #0
    b3d6:	b2db      	uxtb	r3, r3
    b3d8:	4618      	mov	r0, r3
    b3da:	370c      	adds	r7, #12
    b3dc:	46bd      	mov	sp, r7
    b3de:	f85d 7b04 	ldr.w	r7, [sp], #4
    b3e2:	4770      	bx	lr

0000b3e4 <mp_emit_glue_new_raw_code>:

#if MICROPY_DEBUG_PRINTERS
mp_uint_t mp_verbose_flag = 0;
#endif

mp_raw_code_t *mp_emit_glue_new_raw_code(void) {
    b3e4:	b580      	push	{r7, lr}
    b3e6:	b082      	sub	sp, #8
    b3e8:	af00      	add	r7, sp, #0
    mp_raw_code_t *rc = m_new0(mp_raw_code_t, 1);
    b3ea:	2010      	movs	r0, #16
    b3ec:	f7f4 ffca 	bl	384 <m_malloc0>
    b3f0:	6078      	str	r0, [r7, #4]
    rc->kind = MP_CODE_RESERVED;
    b3f2:	687a      	ldr	r2, [r7, #4]
    b3f4:	7813      	ldrb	r3, [r2, #0]
    b3f6:	2101      	movs	r1, #1
    b3f8:	f361 0302 	bfi	r3, r1, #0, #3
    b3fc:	7013      	strb	r3, [r2, #0]
    return rc;
    b3fe:	687b      	ldr	r3, [r7, #4]
}
    b400:	4618      	mov	r0, r3
    b402:	3708      	adds	r7, #8
    b404:	46bd      	mov	sp, r7
    b406:	bd80      	pop	{r7, pc}

0000b408 <mp_emit_glue_assign_bytecode>:
    #endif
    const mp_uint_t *const_table,
    #if MICROPY_PERSISTENT_CODE_SAVE
    uint16_t n_obj, uint16_t n_raw_code,
    #endif
    mp_uint_t scope_flags) {
    b408:	b580      	push	{r7, lr}
    b40a:	b084      	sub	sp, #16
    b40c:	af00      	add	r7, sp, #0
    b40e:	60f8      	str	r0, [r7, #12]
    b410:	60b9      	str	r1, [r7, #8]
    b412:	607a      	str	r2, [r7, #4]
    b414:	603b      	str	r3, [r7, #0]

    rc->kind = MP_CODE_BYTECODE;
    b416:	68fa      	ldr	r2, [r7, #12]
    b418:	7813      	ldrb	r3, [r2, #0]
    b41a:	2102      	movs	r1, #2
    b41c:	f361 0302 	bfi	r3, r1, #0, #3
    b420:	7013      	strb	r3, [r2, #0]
    rc->scope_flags = scope_flags;
    b422:	69bb      	ldr	r3, [r7, #24]
    b424:	b2db      	uxtb	r3, r3
    b426:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    b42a:	b2d9      	uxtb	r1, r3
    b42c:	68fa      	ldr	r2, [r7, #12]
    b42e:	8813      	ldrh	r3, [r2, #0]
    b430:	f361 03c9 	bfi	r3, r1, #3, #7
    b434:	8013      	strh	r3, [r2, #0]
    rc->data.u_byte.bytecode = code;
    b436:	68fb      	ldr	r3, [r7, #12]
    b438:	68ba      	ldr	r2, [r7, #8]
    b43a:	605a      	str	r2, [r3, #4]
    rc->data.u_byte.const_table = const_table;
    b43c:	68fb      	ldr	r3, [r7, #12]
    b43e:	683a      	ldr	r2, [r7, #0]
    b440:	609a      	str	r2, [r3, #8]

#ifdef DEBUG_PRINT
    #if !MICROPY_DEBUG_PRINTERS
    const size_t len = 0;
    #endif
    DEBUG_printf("assign byte code: code=%p len=" UINT_FMT " flags=%x\n", code, len, (uint)scope_flags);
    b442:	69bb      	ldr	r3, [r7, #24]
    b444:	687a      	ldr	r2, [r7, #4]
    b446:	68b9      	ldr	r1, [r7, #8]
    b448:	4808      	ldr	r0, [pc, #32]	; (b46c <mp_emit_glue_assign_bytecode+0x64>)
    b44a:	f011 fbcf 	bl	1cbec <DEBUG_printf>
#endif
#if MICROPY_DEBUG_PRINTERS
    if (mp_verbose_flag >= 2) {
    b44e:	4b08      	ldr	r3, [pc, #32]	; (b470 <mp_emit_glue_assign_bytecode+0x68>)
    b450:	681b      	ldr	r3, [r3, #0]
    b452:	2b01      	cmp	r3, #1
    b454:	d905      	bls.n	b462 <mp_emit_glue_assign_bytecode+0x5a>
        mp_bytecode_print(rc, code, len, const_table);
    b456:	683b      	ldr	r3, [r7, #0]
    b458:	687a      	ldr	r2, [r7, #4]
    b45a:	68b9      	ldr	r1, [r7, #8]
    b45c:	68f8      	ldr	r0, [r7, #12]
    b45e:	f00f ff47 	bl	1b2f0 <mp_bytecode_print>
    }
#endif
}
    b462:	bf00      	nop
    b464:	3710      	adds	r7, #16
    b466:	46bd      	mov	sp, r7
    b468:	bd80      	pop	{r7, pc}
    b46a:	bf00      	nop
    b46c:	00022e88 	.word	0x00022e88
    b470:	20000814 	.word	0x20000814

0000b474 <mp_make_function_from_raw_code>:
    (void)fun_len;
#endif
}
#endif

mp_obj_t mp_make_function_from_raw_code(const mp_raw_code_t *rc, mp_obj_t def_args, mp_obj_t def_kw_args) {
    b474:	b580      	push	{r7, lr}
    b476:	b086      	sub	sp, #24
    b478:	af00      	add	r7, sp, #0
    b47a:	60f8      	str	r0, [r7, #12]
    b47c:	60b9      	str	r1, [r7, #8]
    b47e:	607a      	str	r2, [r7, #4]
    DEBUG_OP_printf("make_function_from_raw_code %p\n", rc);
    b480:	68f9      	ldr	r1, [r7, #12]
    b482:	4830      	ldr	r0, [pc, #192]	; (b544 <mp_make_function_from_raw_code+0xd0>)
    b484:	f011 fbb2 	bl	1cbec <DEBUG_printf>
    assert(rc != NULL);
    b488:	68fb      	ldr	r3, [r7, #12]
    b48a:	2b00      	cmp	r3, #0
    b48c:	d105      	bne.n	b49a <mp_make_function_from_raw_code+0x26>
    b48e:	4b2e      	ldr	r3, [pc, #184]	; (b548 <mp_make_function_from_raw_code+0xd4>)
    b490:	4a2e      	ldr	r2, [pc, #184]	; (b54c <mp_make_function_from_raw_code+0xd8>)
    b492:	217c      	movs	r1, #124	; 0x7c
    b494:	482e      	ldr	r0, [pc, #184]	; (b550 <mp_make_function_from_raw_code+0xdc>)
    b496:	f011 fd23 	bl	1cee0 <__assert_func>

    // def_args must be MP_OBJ_NULL or a tuple
    assert(def_args == MP_OBJ_NULL || MP_OBJ_IS_TYPE(def_args, &mp_type_tuple));
    b49a:	68bb      	ldr	r3, [r7, #8]
    b49c:	2b00      	cmp	r3, #0
    b49e:	d010      	beq.n	b4c2 <mp_make_function_from_raw_code+0x4e>
    b4a0:	68b8      	ldr	r0, [r7, #8]
    b4a2:	f7ff ff8d 	bl	b3c0 <MP_OBJ_IS_OBJ>
    b4a6:	4603      	mov	r3, r0
    b4a8:	2b00      	cmp	r3, #0
    b4aa:	d004      	beq.n	b4b6 <mp_make_function_from_raw_code+0x42>
    b4ac:	68bb      	ldr	r3, [r7, #8]
    b4ae:	681b      	ldr	r3, [r3, #0]
    b4b0:	4a28      	ldr	r2, [pc, #160]	; (b554 <mp_make_function_from_raw_code+0xe0>)
    b4b2:	4293      	cmp	r3, r2
    b4b4:	d005      	beq.n	b4c2 <mp_make_function_from_raw_code+0x4e>
    b4b6:	4b28      	ldr	r3, [pc, #160]	; (b558 <mp_make_function_from_raw_code+0xe4>)
    b4b8:	4a24      	ldr	r2, [pc, #144]	; (b54c <mp_make_function_from_raw_code+0xd8>)
    b4ba:	217f      	movs	r1, #127	; 0x7f
    b4bc:	4824      	ldr	r0, [pc, #144]	; (b550 <mp_make_function_from_raw_code+0xdc>)
    b4be:	f011 fd0f 	bl	1cee0 <__assert_func>

    // def_kw_args must be MP_OBJ_NULL or a dict
    assert(def_kw_args == MP_OBJ_NULL || MP_OBJ_IS_TYPE(def_kw_args, &mp_type_dict));
    b4c2:	687b      	ldr	r3, [r7, #4]
    b4c4:	2b00      	cmp	r3, #0
    b4c6:	d010      	beq.n	b4ea <mp_make_function_from_raw_code+0x76>
    b4c8:	6878      	ldr	r0, [r7, #4]
    b4ca:	f7ff ff79 	bl	b3c0 <MP_OBJ_IS_OBJ>
    b4ce:	4603      	mov	r3, r0
    b4d0:	2b00      	cmp	r3, #0
    b4d2:	d004      	beq.n	b4de <mp_make_function_from_raw_code+0x6a>
    b4d4:	687b      	ldr	r3, [r7, #4]
    b4d6:	681b      	ldr	r3, [r3, #0]
    b4d8:	4a20      	ldr	r2, [pc, #128]	; (b55c <mp_make_function_from_raw_code+0xe8>)
    b4da:	4293      	cmp	r3, r2
    b4dc:	d005      	beq.n	b4ea <mp_make_function_from_raw_code+0x76>
    b4de:	4b20      	ldr	r3, [pc, #128]	; (b560 <mp_make_function_from_raw_code+0xec>)
    b4e0:	4a1a      	ldr	r2, [pc, #104]	; (b54c <mp_make_function_from_raw_code+0xd8>)
    b4e2:	2182      	movs	r1, #130	; 0x82
    b4e4:	481a      	ldr	r0, [pc, #104]	; (b550 <mp_make_function_from_raw_code+0xdc>)
    b4e6:	f011 fcfb 	bl	1cee0 <__assert_func>

    // make the function, depending on the raw code kind
    mp_obj_t fun;
    switch (rc->kind) {
    b4ea:	68fb      	ldr	r3, [r7, #12]
    b4ec:	781b      	ldrb	r3, [r3, #0]
    b4ee:	f3c3 0302 	ubfx	r3, r3, #0, #3
            fun = mp_obj_new_fun_asm(rc->n_pos_args, rc->data.u_native.fun_data, rc->data.u_native.type_sig);
            break;
        #endif
        default:
            // rc->kind should always be set and BYTECODE is the only remaining case
            assert(rc->kind == MP_CODE_BYTECODE);
    b4f2:	68fb      	ldr	r3, [r7, #12]
    b4f4:	781b      	ldrb	r3, [r3, #0]
    b4f6:	f003 0307 	and.w	r3, r3, #7
    b4fa:	b2db      	uxtb	r3, r3
    b4fc:	2b02      	cmp	r3, #2
    b4fe:	d005      	beq.n	b50c <mp_make_function_from_raw_code+0x98>
    b500:	4b18      	ldr	r3, [pc, #96]	; (b564 <mp_make_function_from_raw_code+0xf0>)
    b502:	4a12      	ldr	r2, [pc, #72]	; (b54c <mp_make_function_from_raw_code+0xd8>)
    b504:	2198      	movs	r1, #152	; 0x98
    b506:	4812      	ldr	r0, [pc, #72]	; (b550 <mp_make_function_from_raw_code+0xdc>)
    b508:	f011 fcea 	bl	1cee0 <__assert_func>
            fun = mp_obj_new_fun_bc(def_args, def_kw_args, rc->data.u_byte.bytecode, rc->data.u_byte.const_table);
    b50c:	68fb      	ldr	r3, [r7, #12]
    b50e:	685a      	ldr	r2, [r3, #4]
    b510:	68fb      	ldr	r3, [r7, #12]
    b512:	689b      	ldr	r3, [r3, #8]
    b514:	6879      	ldr	r1, [r7, #4]
    b516:	68b8      	ldr	r0, [r7, #8]
    b518:	f004 feda 	bl	102d0 <mp_obj_new_fun_bc>
    b51c:	6178      	str	r0, [r7, #20]
            // check for generator functions and if so change the type of the object
            if ((rc->scope_flags & MP_SCOPE_FLAG_GENERATOR) != 0) {
    b51e:	68fb      	ldr	r3, [r7, #12]
    b520:	881b      	ldrh	r3, [r3, #0]
    b522:	f3c3 03c6 	ubfx	r3, r3, #3, #7
    b526:	b2db      	uxtb	r3, r3
    b528:	f003 0304 	and.w	r3, r3, #4
    b52c:	2b00      	cmp	r3, #0
    b52e:	d002      	beq.n	b536 <mp_make_function_from_raw_code+0xc2>
                ((mp_obj_base_t*)MP_OBJ_TO_PTR(fun))->type = &mp_type_gen_wrap;
    b530:	697b      	ldr	r3, [r7, #20]
    b532:	4a0d      	ldr	r2, [pc, #52]	; (b568 <mp_make_function_from_raw_code+0xf4>)
    b534:	601a      	str	r2, [r3, #0]
            }
            break;
    b536:	bf00      	nop
    }

    return fun;
    b538:	697b      	ldr	r3, [r7, #20]
}
    b53a:	4618      	mov	r0, r3
    b53c:	3718      	adds	r7, #24
    b53e:	46bd      	mov	sp, r7
    b540:	bd80      	pop	{r7, pc}
    b542:	bf00      	nop
    b544:	00022eb4 	.word	0x00022eb4
    b548:	00022ed4 	.word	0x00022ed4
    b54c:	00022fcc 	.word	0x00022fcc
    b550:	00022ee0 	.word	0x00022ee0
    b554:	00025a34 	.word	0x00025a34
    b558:	00022ef4 	.word	0x00022ef4
    b55c:	00023d0c 	.word	0x00023d0c
    b560:	00022f38 	.word	0x00022f38
    b564:	00022f84 	.word	0x00022f84
    b568:	000248a8 	.word	0x000248a8

0000b56c <mp_make_closure_from_raw_code>:

mp_obj_t mp_make_closure_from_raw_code(const mp_raw_code_t *rc, mp_uint_t n_closed_over, const mp_obj_t *args) {
    b56c:	b580      	push	{r7, lr}
    b56e:	b086      	sub	sp, #24
    b570:	af00      	add	r7, sp, #0
    b572:	60f8      	str	r0, [r7, #12]
    b574:	60b9      	str	r1, [r7, #8]
    b576:	607a      	str	r2, [r7, #4]
    DEBUG_OP_printf("make_closure_from_raw_code %p " UINT_FMT " %p\n", rc, n_closed_over, args);
    b578:	687b      	ldr	r3, [r7, #4]
    b57a:	68ba      	ldr	r2, [r7, #8]
    b57c:	68f9      	ldr	r1, [r7, #12]
    b57e:	4815      	ldr	r0, [pc, #84]	; (b5d4 <mp_make_closure_from_raw_code+0x68>)
    b580:	f011 fb34 	bl	1cbec <DEBUG_printf>
    // make function object
    mp_obj_t ffun;
    if (n_closed_over & 0x100) {
    b584:	68bb      	ldr	r3, [r7, #8]
    b586:	f403 7380 	and.w	r3, r3, #256	; 0x100
    b58a:	2b00      	cmp	r3, #0
    b58c:	d00a      	beq.n	b5a4 <mp_make_closure_from_raw_code+0x38>
        // default positional and keyword args given
        ffun = mp_make_function_from_raw_code(rc, args[0], args[1]);
    b58e:	687b      	ldr	r3, [r7, #4]
    b590:	6819      	ldr	r1, [r3, #0]
    b592:	687b      	ldr	r3, [r7, #4]
    b594:	3304      	adds	r3, #4
    b596:	681b      	ldr	r3, [r3, #0]
    b598:	461a      	mov	r2, r3
    b59a:	68f8      	ldr	r0, [r7, #12]
    b59c:	f7ff ff6a 	bl	b474 <mp_make_function_from_raw_code>
    b5a0:	6178      	str	r0, [r7, #20]
    b5a2:	e005      	b.n	b5b0 <mp_make_closure_from_raw_code+0x44>
    } else {
        // default positional and keyword args not given
        ffun = mp_make_function_from_raw_code(rc, MP_OBJ_NULL, MP_OBJ_NULL);
    b5a4:	2200      	movs	r2, #0
    b5a6:	2100      	movs	r1, #0
    b5a8:	68f8      	ldr	r0, [r7, #12]
    b5aa:	f7ff ff63 	bl	b474 <mp_make_function_from_raw_code>
    b5ae:	6178      	str	r0, [r7, #20]
    }
    // wrap function in closure object
    return mp_obj_new_closure(ffun, n_closed_over & 0xff, args + ((n_closed_over >> 7) & 2));
    b5b0:	68bb      	ldr	r3, [r7, #8]
    b5b2:	b2d9      	uxtb	r1, r3
    b5b4:	68bb      	ldr	r3, [r7, #8]
    b5b6:	09db      	lsrs	r3, r3, #7
    b5b8:	f003 0302 	and.w	r3, r3, #2
    b5bc:	009b      	lsls	r3, r3, #2
    b5be:	687a      	ldr	r2, [r7, #4]
    b5c0:	4413      	add	r3, r2
    b5c2:	461a      	mov	r2, r3
    b5c4:	6978      	ldr	r0, [r7, #20]
    b5c6:	f003 f947 	bl	e858 <mp_obj_new_closure>
    b5ca:	4603      	mov	r3, r0
}
    b5cc:	4618      	mov	r0, r3
    b5ce:	3718      	adds	r7, #24
    b5d0:	46bd      	mov	sp, r7
    b5d2:	bd80      	pop	{r7, pc}
    b5d4:	00022fa4 	.word	0x00022fa4

0000b5d8 <MP_OBJ_IS_SMALL_INT>:
    { return ((((mp_int_t)(o)) & 1) != 0); }
    b5d8:	b480      	push	{r7}
    b5da:	b083      	sub	sp, #12
    b5dc:	af00      	add	r7, sp, #0
    b5de:	6078      	str	r0, [r7, #4]
    b5e0:	687b      	ldr	r3, [r7, #4]
    b5e2:	f003 0301 	and.w	r3, r3, #1
    b5e6:	2b00      	cmp	r3, #0
    b5e8:	bf14      	ite	ne
    b5ea:	2301      	movne	r3, #1
    b5ec:	2300      	moveq	r3, #0
    b5ee:	b2db      	uxtb	r3, r3
    b5f0:	4618      	mov	r0, r3
    b5f2:	370c      	adds	r7, #12
    b5f4:	46bd      	mov	sp, r7
    b5f6:	f85d 7b04 	ldr.w	r7, [sp], #4
    b5fa:	4770      	bx	lr

0000b5fc <MP_OBJ_IS_QSTR>:
    { return ((((mp_int_t)(o)) & 3) == 2); }
    b5fc:	b480      	push	{r7}
    b5fe:	b083      	sub	sp, #12
    b600:	af00      	add	r7, sp, #0
    b602:	6078      	str	r0, [r7, #4]
    b604:	687b      	ldr	r3, [r7, #4]
    b606:	f003 0303 	and.w	r3, r3, #3
    b60a:	2b02      	cmp	r3, #2
    b60c:	bf0c      	ite	eq
    b60e:	2301      	moveq	r3, #1
    b610:	2300      	movne	r3, #0
    b612:	b2db      	uxtb	r3, r3
    b614:	4618      	mov	r0, r3
    b616:	370c      	adds	r7, #12
    b618:	46bd      	mov	sp, r7
    b61a:	f85d 7b04 	ldr.w	r7, [sp], #4
    b61e:	4770      	bx	lr

0000b620 <MP_OBJ_IS_OBJ>:
    { return ((((mp_int_t)(o)) & 3) == 0); }
    b620:	b480      	push	{r7}
    b622:	b083      	sub	sp, #12
    b624:	af00      	add	r7, sp, #0
    b626:	6078      	str	r0, [r7, #4]
    b628:	687b      	ldr	r3, [r7, #4]
    b62a:	f003 0303 	and.w	r3, r3, #3
    b62e:	2b00      	cmp	r3, #0
    b630:	bf0c      	ite	eq
    b632:	2301      	moveq	r3, #1
    b634:	2300      	movne	r3, #0
    b636:	b2db      	uxtb	r3, r3
    b638:	4618      	mov	r0, r3
    b63a:	370c      	adds	r7, #12
    b63c:	46bd      	mov	sp, r7
    b63e:	f85d 7b04 	ldr.w	r7, [sp], #4
    b642:	4770      	bx	lr

0000b644 <MP_MAP_SLOT_IS_FILLED>:
    MP_MAP_LOOKUP_ADD_IF_NOT_FOUND_OR_REMOVE_IF_FOUND = 3, // only valid for mp_set_lookup
} mp_map_lookup_kind_t;

extern const mp_map_t mp_const_empty_map;

static inline bool MP_MAP_SLOT_IS_FILLED(const mp_map_t *map, size_t pos) { return ((map)->table[pos].key != MP_OBJ_NULL && (map)->table[pos].key != MP_OBJ_SENTINEL); }
    b644:	b480      	push	{r7}
    b646:	b083      	sub	sp, #12
    b648:	af00      	add	r7, sp, #0
    b64a:	6078      	str	r0, [r7, #4]
    b64c:	6039      	str	r1, [r7, #0]
    b64e:	687b      	ldr	r3, [r7, #4]
    b650:	689a      	ldr	r2, [r3, #8]
    b652:	683b      	ldr	r3, [r7, #0]
    b654:	00db      	lsls	r3, r3, #3
    b656:	4413      	add	r3, r2
    b658:	681b      	ldr	r3, [r3, #0]
    b65a:	2b00      	cmp	r3, #0
    b65c:	d009      	beq.n	b672 <MP_MAP_SLOT_IS_FILLED+0x2e>
    b65e:	687b      	ldr	r3, [r7, #4]
    b660:	689a      	ldr	r2, [r3, #8]
    b662:	683b      	ldr	r3, [r7, #0]
    b664:	00db      	lsls	r3, r3, #3
    b666:	4413      	add	r3, r2
    b668:	681b      	ldr	r3, [r3, #0]
    b66a:	2b08      	cmp	r3, #8
    b66c:	d001      	beq.n	b672 <MP_MAP_SLOT_IS_FILLED+0x2e>
    b66e:	2301      	movs	r3, #1
    b670:	e000      	b.n	b674 <MP_MAP_SLOT_IS_FILLED+0x30>
    b672:	2300      	movs	r3, #0
    b674:	f003 0301 	and.w	r3, r3, #1
    b678:	b2db      	uxtb	r3, r3
    b67a:	4618      	mov	r0, r3
    b67c:	370c      	adds	r7, #12
    b67e:	46bd      	mov	sp, r7
    b680:	f85d 7b04 	ldr.w	r7, [sp], #4
    b684:	4770      	bx	lr

0000b686 <mp_obj_new_bool>:
extern const struct _mp_obj_exception_t mp_const_GeneratorExit_obj;

// General API for objects

mp_obj_t mp_obj_new_type(qstr name, mp_obj_t bases_tuple, mp_obj_t locals_dict);
static inline mp_obj_t mp_obj_new_bool(mp_int_t x) { return x ? mp_const_true : mp_const_false; }
    b686:	b480      	push	{r7}
    b688:	b083      	sub	sp, #12
    b68a:	af00      	add	r7, sp, #0
    b68c:	6078      	str	r0, [r7, #4]
    b68e:	687b      	ldr	r3, [r7, #4]
    b690:	2b00      	cmp	r3, #0
    b692:	d001      	beq.n	b698 <mp_obj_new_bool+0x12>
    b694:	4b04      	ldr	r3, [pc, #16]	; (b6a8 <mp_obj_new_bool+0x22>)
    b696:	e000      	b.n	b69a <mp_obj_new_bool+0x14>
    b698:	4b04      	ldr	r3, [pc, #16]	; (b6ac <mp_obj_new_bool+0x26>)
    b69a:	4618      	mov	r0, r3
    b69c:	370c      	adds	r7, #12
    b69e:	46bd      	mov	sp, r7
    b6a0:	f85d 7b04 	ldr.w	r7, [sp], #4
    b6a4:	4770      	bx	lr
    b6a6:	bf00      	nop
    b6a8:	00023868 	.word	0x00023868
    b6ac:	00023860 	.word	0x00023860

0000b6b0 <mp_obj_dict_get_map>:
void mp_obj_dict_init(mp_obj_dict_t *dict, size_t n_args);
size_t mp_obj_dict_len(mp_obj_t self_in);
mp_obj_t mp_obj_dict_get(mp_obj_t self_in, mp_obj_t index);
mp_obj_t mp_obj_dict_store(mp_obj_t self_in, mp_obj_t key, mp_obj_t value);
mp_obj_t mp_obj_dict_delete(mp_obj_t self_in, mp_obj_t key);
static inline mp_map_t *mp_obj_dict_get_map(mp_obj_t dict) {
    b6b0:	b480      	push	{r7}
    b6b2:	b083      	sub	sp, #12
    b6b4:	af00      	add	r7, sp, #0
    b6b6:	6078      	str	r0, [r7, #4]
    return &((mp_obj_dict_t*)MP_OBJ_TO_PTR(dict))->map;
    b6b8:	687b      	ldr	r3, [r7, #4]
    b6ba:	3304      	adds	r3, #4
}
    b6bc:	4618      	mov	r0, r3
    b6be:	370c      	adds	r7, #12
    b6c0:	46bd      	mov	sp, r7
    b6c2:	f85d 7b04 	ldr.w	r7, [sp], #4
    b6c6:	4770      	bx	lr

0000b6c8 <mp_obj_module_get_globals>:
// module
typedef struct _mp_obj_module_t {
    mp_obj_base_t base;
    mp_obj_dict_t *globals;
} mp_obj_module_t;
static inline mp_obj_dict_t *mp_obj_module_get_globals(mp_obj_t module) {
    b6c8:	b480      	push	{r7}
    b6ca:	b083      	sub	sp, #12
    b6cc:	af00      	add	r7, sp, #0
    b6ce:	6078      	str	r0, [r7, #4]
    return ((mp_obj_module_t*)MP_OBJ_TO_PTR(module))->globals;
    b6d0:	687b      	ldr	r3, [r7, #4]
    b6d2:	685b      	ldr	r3, [r3, #4]
}
    b6d4:	4618      	mov	r0, r3
    b6d6:	370c      	adds	r7, #12
    b6d8:	46bd      	mov	sp, r7
    b6da:	f85d 7b04 	ldr.w	r7, [sp], #4
    b6de:	4770      	bx	lr

0000b6e0 <mp_local_free>:
static inline void mp_local_free(void *ptr) {
    b6e0:	b480      	push	{r7}
    b6e2:	b083      	sub	sp, #12
    b6e4:	af00      	add	r7, sp, #0
    b6e6:	6078      	str	r0, [r7, #4]
}
    b6e8:	bf00      	nop
    b6ea:	370c      	adds	r7, #12
    b6ec:	46bd      	mov	sp, r7
    b6ee:	f85d 7b04 	ldr.w	r7, [sp], #4
    b6f2:	4770      	bx	lr

0000b6f4 <mp_nonlocal_alloc>:

static inline void *mp_nonlocal_alloc(size_t n_bytes) {
    b6f4:	b580      	push	{r7, lr}
    b6f6:	b082      	sub	sp, #8
    b6f8:	af00      	add	r7, sp, #0
    b6fa:	6078      	str	r0, [r7, #4]
    return m_new(uint8_t, n_bytes);
    b6fc:	6878      	ldr	r0, [r7, #4]
    b6fe:	f7f4 fe0d 	bl	31c <m_malloc>
    b702:	4603      	mov	r3, r0
}
    b704:	4618      	mov	r0, r3
    b706:	3708      	adds	r7, #8
    b708:	46bd      	mov	sp, r7
    b70a:	bd80      	pop	{r7, pc}

0000b70c <mp_nonlocal_realloc>:

static inline void *mp_nonlocal_realloc(void *ptr, size_t old_n_bytes, size_t new_n_bytes) {
    b70c:	b580      	push	{r7, lr}
    b70e:	b084      	sub	sp, #16
    b710:	af00      	add	r7, sp, #0
    b712:	60f8      	str	r0, [r7, #12]
    b714:	60b9      	str	r1, [r7, #8]
    b716:	607a      	str	r2, [r7, #4]
    return m_renew(uint8_t, ptr, old_n_bytes, new_n_bytes);
    b718:	6879      	ldr	r1, [r7, #4]
    b71a:	68f8      	ldr	r0, [r7, #12]
    b71c:	f7f4 fe3f 	bl	39e <m_realloc>
    b720:	4603      	mov	r3, r0
}
    b722:	4618      	mov	r0, r3
    b724:	3710      	adds	r7, #16
    b726:	46bd      	mov	sp, r7
    b728:	bd80      	pop	{r7, pc}

0000b72a <mp_nonlocal_free>:

static inline void mp_nonlocal_free(void *ptr, size_t n_bytes) {
    b72a:	b580      	push	{r7, lr}
    b72c:	b082      	sub	sp, #8
    b72e:	af00      	add	r7, sp, #0
    b730:	6078      	str	r0, [r7, #4]
    b732:	6039      	str	r1, [r7, #0]
    m_del(uint8_t, ptr, n_bytes);
    b734:	6878      	ldr	r0, [r7, #4]
    b736:	f7f4 fe6f 	bl	418 <m_free>
}
    b73a:	bf00      	nop
    b73c:	3708      	adds	r7, #8
    b73e:	46bd      	mov	sp, r7
    b740:	bd80      	pop	{r7, pc}

0000b742 <mp_locals_get>:
void mp_arg_parse_all(size_t n_pos, const mp_obj_t *pos, mp_map_t *kws, size_t n_allowed, const mp_arg_t *allowed, mp_arg_val_t *out_vals);
void mp_arg_parse_all_kw_array(size_t n_pos, size_t n_kw, const mp_obj_t *args, size_t n_allowed, const mp_arg_t *allowed, mp_arg_val_t *out_vals);
NORETURN void mp_arg_error_terse_mismatch(void);
NORETURN void mp_arg_error_unimpl_kw(void);

static inline mp_obj_dict_t *mp_locals_get(void) { return MP_STATE_THREAD(dict_locals); }
    b742:	b480      	push	{r7}
    b744:	af00      	add	r7, sp, #0
    b746:	4b03      	ldr	r3, [pc, #12]	; (b754 <mp_locals_get+0x12>)
    b748:	685b      	ldr	r3, [r3, #4]
    b74a:	4618      	mov	r0, r3
    b74c:	46bd      	mov	sp, r7
    b74e:	f85d 7b04 	ldr.w	r7, [sp], #4
    b752:	4770      	bx	lr
    b754:	20001248 	.word	0x20001248

0000b758 <mp_locals_set>:
static inline void mp_locals_set(mp_obj_dict_t *d) { MP_STATE_THREAD(dict_locals) = d; }
    b758:	b480      	push	{r7}
    b75a:	b083      	sub	sp, #12
    b75c:	af00      	add	r7, sp, #0
    b75e:	6078      	str	r0, [r7, #4]
    b760:	4a04      	ldr	r2, [pc, #16]	; (b774 <mp_locals_set+0x1c>)
    b762:	687b      	ldr	r3, [r7, #4]
    b764:	6053      	str	r3, [r2, #4]
    b766:	bf00      	nop
    b768:	370c      	adds	r7, #12
    b76a:	46bd      	mov	sp, r7
    b76c:	f85d 7b04 	ldr.w	r7, [sp], #4
    b770:	4770      	bx	lr
    b772:	bf00      	nop
    b774:	20001248 	.word	0x20001248

0000b778 <mp_globals_get>:
static inline mp_obj_dict_t *mp_globals_get(void) { return MP_STATE_THREAD(dict_globals); }
    b778:	b480      	push	{r7}
    b77a:	af00      	add	r7, sp, #0
    b77c:	4b03      	ldr	r3, [pc, #12]	; (b78c <mp_globals_get+0x14>)
    b77e:	689b      	ldr	r3, [r3, #8]
    b780:	4618      	mov	r0, r3
    b782:	46bd      	mov	sp, r7
    b784:	f85d 7b04 	ldr.w	r7, [sp], #4
    b788:	4770      	bx	lr
    b78a:	bf00      	nop
    b78c:	20001248 	.word	0x20001248

0000b790 <mp_globals_set>:
static inline void mp_globals_set(mp_obj_dict_t *d) { MP_STATE_THREAD(dict_globals) = d; }
    b790:	b480      	push	{r7}
    b792:	b083      	sub	sp, #12
    b794:	af00      	add	r7, sp, #0
    b796:	6078      	str	r0, [r7, #4]
    b798:	4a04      	ldr	r2, [pc, #16]	; (b7ac <mp_globals_set+0x1c>)
    b79a:	687b      	ldr	r3, [r7, #4]
    b79c:	6093      	str	r3, [r2, #8]
    b79e:	bf00      	nop
    b7a0:	370c      	adds	r7, #12
    b7a2:	46bd      	mov	sp, r7
    b7a4:	f85d 7b04 	ldr.w	r7, [sp], #4
    b7a8:	4770      	bx	lr
    b7aa:	bf00      	nop
    b7ac:	20001248 	.word	0x20001248

0000b7b0 <mp_init>:
const mp_obj_module_t mp_module___main__ = {
    .base = { &mp_type_module },
    .globals = (mp_obj_dict_t*)&MP_STATE_VM(dict_main),
};

void mp_init(void) {
    b7b0:	b580      	push	{r7, lr}
    b7b2:	af00      	add	r7, sp, #0
    qstr_init();
    b7b4:	f7f5 fc30 	bl	1018 <qstr_init>

    // no pending exceptions to start with
    MP_STATE_VM(mp_pending_exception) = MP_OBJ_NULL;
    b7b8:	4b0d      	ldr	r3, [pc, #52]	; (b7f0 <mp_init+0x40>)
    b7ba:	2200      	movs	r2, #0
    b7bc:	635a      	str	r2, [r3, #52]	; 0x34
    MICROPY_PORT_INIT_FUNC;
#endif

    #if MICROPY_ENABLE_COMPILER
    // optimization disabled by default
    MP_STATE_VM(mp_optimise_value) = 0;
    b7be:	4b0c      	ldr	r3, [pc, #48]	; (b7f0 <mp_init+0x40>)
    b7c0:	2200      	movs	r2, #0
    b7c2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
    #endif

    // init global module dict
    mp_obj_dict_init(&MP_STATE_VM(mp_loaded_modules_dict), 3);
    b7c6:	2103      	movs	r1, #3
    b7c8:	480a      	ldr	r0, [pc, #40]	; (b7f4 <mp_init+0x44>)
    b7ca:	f003 fed3 	bl	f574 <mp_obj_dict_init>

    // initialise the __main__ module
    mp_obj_dict_init(&MP_STATE_VM(dict_main), 1);
    b7ce:	2101      	movs	r1, #1
    b7d0:	4809      	ldr	r0, [pc, #36]	; (b7f8 <mp_init+0x48>)
    b7d2:	f003 fecf 	bl	f574 <mp_obj_dict_init>
    mp_obj_dict_store(MP_OBJ_FROM_PTR(&MP_STATE_VM(dict_main)), MP_OBJ_NEW_QSTR(MP_QSTR___name__), MP_OBJ_NEW_QSTR(MP_QSTR___main__));
    b7d6:	226a      	movs	r2, #106	; 0x6a
    b7d8:	2172      	movs	r1, #114	; 0x72
    b7da:	4807      	ldr	r0, [pc, #28]	; (b7f8 <mp_init+0x48>)
    b7dc:	f003 feff 	bl	f5de <mp_obj_dict_store>

    // locals = globals for outer module (see Objects/frameobject.c/PyFrame_New())
    mp_locals_set(&MP_STATE_VM(dict_main));
    b7e0:	4805      	ldr	r0, [pc, #20]	; (b7f8 <mp_init+0x48>)
    b7e2:	f7ff ffb9 	bl	b758 <mp_locals_set>
    mp_globals_set(&MP_STATE_VM(dict_main));
    b7e6:	4804      	ldr	r0, [pc, #16]	; (b7f8 <mp_init+0x48>)
    b7e8:	f7ff ffd2 	bl	b790 <mp_globals_set>
    #if MICROPY_PY_THREAD_GIL
    mp_thread_mutex_init(&MP_STATE_VM(gil_mutex));
    #endif

    MP_THREAD_GIL_ENTER();
}
    b7ec:	bf00      	nop
    b7ee:	bd80      	pop	{r7, pc}
    b7f0:	20001248 	.word	0x20001248
    b7f4:	2000126c 	.word	0x2000126c
    b7f8:	20001280 	.word	0x20001280

0000b7fc <mp_deinit>:

void mp_deinit(void) {
    b7fc:	b480      	push	{r7}
    b7fe:	af00      	add	r7, sp, #0

    // call port specific deinitialization if any
#ifdef MICROPY_PORT_DEINIT_FUNC
    MICROPY_PORT_DEINIT_FUNC;
#endif
}
    b800:	bf00      	nop
    b802:	46bd      	mov	sp, r7
    b804:	f85d 7b04 	ldr.w	r7, [sp], #4
    b808:	4770      	bx	lr

0000b80a <mp_load_name>:

mp_obj_t mp_load_name(qstr qst) {
    b80a:	b590      	push	{r4, r7, lr}
    b80c:	b085      	sub	sp, #20
    b80e:	af00      	add	r7, sp, #0
    b810:	6078      	str	r0, [r7, #4]
    // logic: search locals, globals, builtins
    DEBUG_OP_printf("load name %s\n", qstr_str(qst));
    b812:	6878      	ldr	r0, [r7, #4]
    b814:	f7f5 fddc 	bl	13d0 <qstr_str>
    b818:	4603      	mov	r3, r0
    b81a:	4619      	mov	r1, r3
    b81c:	4812      	ldr	r0, [pc, #72]	; (b868 <mp_load_name+0x5e>)
    b81e:	f011 f9e5 	bl	1cbec <DEBUG_printf>
    // If we're at the outer scope (locals == globals), dispatch to load_global right away
    if (mp_locals_get() != mp_globals_get()) {
    b822:	f7ff ff8e 	bl	b742 <mp_locals_get>
    b826:	4604      	mov	r4, r0
    b828:	f7ff ffa6 	bl	b778 <mp_globals_get>
    b82c:	4603      	mov	r3, r0
    b82e:	429c      	cmp	r4, r3
    b830:	d012      	beq.n	b858 <mp_load_name+0x4e>
        mp_map_elem_t *elem = mp_map_lookup(&mp_locals_get()->map, MP_OBJ_NEW_QSTR(qst), MP_MAP_LOOKUP);
    b832:	f7ff ff86 	bl	b742 <mp_locals_get>
    b836:	4603      	mov	r3, r0
    b838:	1d18      	adds	r0, r3, #4
    b83a:	687b      	ldr	r3, [r7, #4]
    b83c:	009b      	lsls	r3, r3, #2
    b83e:	f043 0302 	orr.w	r3, r3, #2
    b842:	2200      	movs	r2, #0
    b844:	4619      	mov	r1, r3
    b846:	f002 f823 	bl	d890 <mp_map_lookup>
    b84a:	60f8      	str	r0, [r7, #12]
        if (elem != NULL) {
    b84c:	68fb      	ldr	r3, [r7, #12]
    b84e:	2b00      	cmp	r3, #0
    b850:	d002      	beq.n	b858 <mp_load_name+0x4e>
            return elem->value;
    b852:	68fb      	ldr	r3, [r7, #12]
    b854:	685b      	ldr	r3, [r3, #4]
    b856:	e003      	b.n	b860 <mp_load_name+0x56>
        }
    }
    return mp_load_global(qst);
    b858:	6878      	ldr	r0, [r7, #4]
    b85a:	f000 f807 	bl	b86c <mp_load_global>
    b85e:	4603      	mov	r3, r0
}
    b860:	4618      	mov	r0, r3
    b862:	3714      	adds	r7, #20
    b864:	46bd      	mov	sp, r7
    b866:	bd90      	pop	{r4, r7, pc}
    b868:	00022ff4 	.word	0x00022ff4

0000b86c <mp_load_global>:

mp_obj_t mp_load_global(qstr qst) {
    b86c:	b580      	push	{r7, lr}
    b86e:	b084      	sub	sp, #16
    b870:	af00      	add	r7, sp, #0
    b872:	6078      	str	r0, [r7, #4]
    // logic: search globals, builtins
    DEBUG_OP_printf("load global %s\n", qstr_str(qst));
    b874:	6878      	ldr	r0, [r7, #4]
    b876:	f7f5 fdab 	bl	13d0 <qstr_str>
    b87a:	4603      	mov	r3, r0
    b87c:	4619      	mov	r1, r3
    b87e:	4815      	ldr	r0, [pc, #84]	; (b8d4 <mp_load_global+0x68>)
    b880:	f011 f9b4 	bl	1cbec <DEBUG_printf>
    mp_map_elem_t *elem = mp_map_lookup(&mp_globals_get()->map, MP_OBJ_NEW_QSTR(qst), MP_MAP_LOOKUP);
    b884:	f7ff ff78 	bl	b778 <mp_globals_get>
    b888:	4603      	mov	r3, r0
    b88a:	1d18      	adds	r0, r3, #4
    b88c:	687b      	ldr	r3, [r7, #4]
    b88e:	009b      	lsls	r3, r3, #2
    b890:	f043 0302 	orr.w	r3, r3, #2
    b894:	2200      	movs	r2, #0
    b896:	4619      	mov	r1, r3
    b898:	f001 fffa 	bl	d890 <mp_map_lookup>
    b89c:	60f8      	str	r0, [r7, #12]
    if (elem == NULL) {
    b89e:	68fb      	ldr	r3, [r7, #12]
    b8a0:	2b00      	cmp	r3, #0
    b8a2:	d110      	bne.n	b8c6 <mp_load_global+0x5a>
            if (elem != NULL) {
                return elem->value;
            }
        }
        #endif
        elem = mp_map_lookup((mp_map_t*)&mp_module_builtins_globals.map, MP_OBJ_NEW_QSTR(qst), MP_MAP_LOOKUP);
    b8a4:	687b      	ldr	r3, [r7, #4]
    b8a6:	009b      	lsls	r3, r3, #2
    b8a8:	f043 0302 	orr.w	r3, r3, #2
    b8ac:	2200      	movs	r2, #0
    b8ae:	4619      	mov	r1, r3
    b8b0:	4809      	ldr	r0, [pc, #36]	; (b8d8 <mp_load_global+0x6c>)
    b8b2:	f001 ffed 	bl	d890 <mp_map_lookup>
    b8b6:	60f8      	str	r0, [r7, #12]
        if (elem == NULL) {
    b8b8:	68fb      	ldr	r3, [r7, #12]
    b8ba:	2b00      	cmp	r3, #0
    b8bc:	d103      	bne.n	b8c6 <mp_load_global+0x5a>
            if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
                mp_raise_msg(&mp_type_NameError, "name not defined");
    b8be:	4907      	ldr	r1, [pc, #28]	; (b8dc <mp_load_global+0x70>)
    b8c0:	4807      	ldr	r0, [pc, #28]	; (b8e0 <mp_load_global+0x74>)
    b8c2:	f001 fd41 	bl	d348 <mp_raise_msg>
                nlr_raise(mp_obj_new_exception_msg_varg(&mp_type_NameError,
                    "name '%q' isn't defined", qst));
            }
        }
    }
    return elem->value;
    b8c6:	68fb      	ldr	r3, [r7, #12]
    b8c8:	685b      	ldr	r3, [r3, #4]
}
    b8ca:	4618      	mov	r0, r3
    b8cc:	3710      	adds	r7, #16
    b8ce:	46bd      	mov	sp, r7
    b8d0:	bd80      	pop	{r7, pc}
    b8d2:	bf00      	nop
    b8d4:	00023004 	.word	0x00023004
    b8d8:	0002680c 	.word	0x0002680c
    b8dc:	00023014 	.word	0x00023014
    b8e0:	0002420c 	.word	0x0002420c

0000b8e4 <mp_load_build_class>:

mp_obj_t mp_load_build_class(void) {
    b8e4:	b580      	push	{r7, lr}
    b8e6:	af00      	add	r7, sp, #0
    DEBUG_OP_printf("load_build_class\n");
    b8e8:	4802      	ldr	r0, [pc, #8]	; (b8f4 <mp_load_build_class+0x10>)
    b8ea:	f011 f97f 	bl	1cbec <DEBUG_printf>
        if (elem != NULL) {
            return elem->value;
        }
    }
    #endif
    return MP_OBJ_FROM_PTR(&mp_builtin___build_class___obj);
    b8ee:	4b02      	ldr	r3, [pc, #8]	; (b8f8 <mp_load_build_class+0x14>)
}
    b8f0:	4618      	mov	r0, r3
    b8f2:	bd80      	pop	{r7, pc}
    b8f4:	00023028 	.word	0x00023028
    b8f8:	00026418 	.word	0x00026418

0000b8fc <mp_store_name>:

void mp_store_name(qstr qst, mp_obj_t obj) {
    b8fc:	b580      	push	{r7, lr}
    b8fe:	b082      	sub	sp, #8
    b900:	af00      	add	r7, sp, #0
    b902:	6078      	str	r0, [r7, #4]
    b904:	6039      	str	r1, [r7, #0]
    DEBUG_OP_printf("store name %s <- %p\n", qstr_str(qst), obj);
    b906:	6878      	ldr	r0, [r7, #4]
    b908:	f7f5 fd62 	bl	13d0 <qstr_str>
    b90c:	4603      	mov	r3, r0
    b90e:	683a      	ldr	r2, [r7, #0]
    b910:	4619      	mov	r1, r3
    b912:	4808      	ldr	r0, [pc, #32]	; (b934 <mp_store_name+0x38>)
    b914:	f011 f96a 	bl	1cbec <DEBUG_printf>
    mp_obj_dict_store(MP_OBJ_FROM_PTR(mp_locals_get()), MP_OBJ_NEW_QSTR(qst), obj);
    b918:	f7ff ff13 	bl	b742 <mp_locals_get>
    b91c:	687b      	ldr	r3, [r7, #4]
    b91e:	009b      	lsls	r3, r3, #2
    b920:	f043 0302 	orr.w	r3, r3, #2
    b924:	683a      	ldr	r2, [r7, #0]
    b926:	4619      	mov	r1, r3
    b928:	f003 fe59 	bl	f5de <mp_obj_dict_store>
}
    b92c:	bf00      	nop
    b92e:	3708      	adds	r7, #8
    b930:	46bd      	mov	sp, r7
    b932:	bd80      	pop	{r7, pc}
    b934:	0002303c 	.word	0x0002303c

0000b938 <mp_delete_name>:

void mp_delete_name(qstr qst) {
    b938:	b580      	push	{r7, lr}
    b93a:	b082      	sub	sp, #8
    b93c:	af00      	add	r7, sp, #0
    b93e:	6078      	str	r0, [r7, #4]
    DEBUG_OP_printf("delete name %s\n", qstr_str(qst));
    b940:	6878      	ldr	r0, [r7, #4]
    b942:	f7f5 fd45 	bl	13d0 <qstr_str>
    b946:	4603      	mov	r3, r0
    b948:	4619      	mov	r1, r3
    b94a:	4809      	ldr	r0, [pc, #36]	; (b970 <mp_delete_name+0x38>)
    b94c:	f011 f94e 	bl	1cbec <DEBUG_printf>
    // TODO convert KeyError to NameError if qst not found
    mp_obj_dict_delete(MP_OBJ_FROM_PTR(mp_locals_get()), MP_OBJ_NEW_QSTR(qst));
    b950:	f7ff fef7 	bl	b742 <mp_locals_get>
    b954:	4602      	mov	r2, r0
    b956:	687b      	ldr	r3, [r7, #4]
    b958:	009b      	lsls	r3, r3, #2
    b95a:	f043 0302 	orr.w	r3, r3, #2
    b95e:	4619      	mov	r1, r3
    b960:	4610      	mov	r0, r2
    b962:	f003 fe71 	bl	f648 <mp_obj_dict_delete>
}
    b966:	bf00      	nop
    b968:	3708      	adds	r7, #8
    b96a:	46bd      	mov	sp, r7
    b96c:	bd80      	pop	{r7, pc}
    b96e:	bf00      	nop
    b970:	00023054 	.word	0x00023054

0000b974 <mp_store_global>:

void mp_store_global(qstr qst, mp_obj_t obj) {
    b974:	b580      	push	{r7, lr}
    b976:	b082      	sub	sp, #8
    b978:	af00      	add	r7, sp, #0
    b97a:	6078      	str	r0, [r7, #4]
    b97c:	6039      	str	r1, [r7, #0]
    DEBUG_OP_printf("store global %s <- %p\n", qstr_str(qst), obj);
    b97e:	6878      	ldr	r0, [r7, #4]
    b980:	f7f5 fd26 	bl	13d0 <qstr_str>
    b984:	4603      	mov	r3, r0
    b986:	683a      	ldr	r2, [r7, #0]
    b988:	4619      	mov	r1, r3
    b98a:	4808      	ldr	r0, [pc, #32]	; (b9ac <mp_store_global+0x38>)
    b98c:	f011 f92e 	bl	1cbec <DEBUG_printf>
    mp_obj_dict_store(MP_OBJ_FROM_PTR(mp_globals_get()), MP_OBJ_NEW_QSTR(qst), obj);
    b990:	f7ff fef2 	bl	b778 <mp_globals_get>
    b994:	687b      	ldr	r3, [r7, #4]
    b996:	009b      	lsls	r3, r3, #2
    b998:	f043 0302 	orr.w	r3, r3, #2
    b99c:	683a      	ldr	r2, [r7, #0]
    b99e:	4619      	mov	r1, r3
    b9a0:	f003 fe1d 	bl	f5de <mp_obj_dict_store>
}
    b9a4:	bf00      	nop
    b9a6:	3708      	adds	r7, #8
    b9a8:	46bd      	mov	sp, r7
    b9aa:	bd80      	pop	{r7, pc}
    b9ac:	00023064 	.word	0x00023064

0000b9b0 <mp_delete_global>:

void mp_delete_global(qstr qst) {
    b9b0:	b580      	push	{r7, lr}
    b9b2:	b082      	sub	sp, #8
    b9b4:	af00      	add	r7, sp, #0
    b9b6:	6078      	str	r0, [r7, #4]
    DEBUG_OP_printf("delete global %s\n", qstr_str(qst));
    b9b8:	6878      	ldr	r0, [r7, #4]
    b9ba:	f7f5 fd09 	bl	13d0 <qstr_str>
    b9be:	4603      	mov	r3, r0
    b9c0:	4619      	mov	r1, r3
    b9c2:	4809      	ldr	r0, [pc, #36]	; (b9e8 <mp_delete_global+0x38>)
    b9c4:	f011 f912 	bl	1cbec <DEBUG_printf>
    // TODO convert KeyError to NameError if qst not found
    mp_obj_dict_delete(MP_OBJ_FROM_PTR(mp_globals_get()), MP_OBJ_NEW_QSTR(qst));
    b9c8:	f7ff fed6 	bl	b778 <mp_globals_get>
    b9cc:	4602      	mov	r2, r0
    b9ce:	687b      	ldr	r3, [r7, #4]
    b9d0:	009b      	lsls	r3, r3, #2
    b9d2:	f043 0302 	orr.w	r3, r3, #2
    b9d6:	4619      	mov	r1, r3
    b9d8:	4610      	mov	r0, r2
    b9da:	f003 fe35 	bl	f648 <mp_obj_dict_delete>
}
    b9de:	bf00      	nop
    b9e0:	3708      	adds	r7, #8
    b9e2:	46bd      	mov	sp, r7
    b9e4:	bd80      	pop	{r7, pc}
    b9e6:	bf00      	nop
    b9e8:	0002307c 	.word	0x0002307c

0000b9ec <mp_unary_op>:

mp_obj_t mp_unary_op(mp_unary_op_t op, mp_obj_t arg) {
    b9ec:	b580      	push	{r7, lr}
    b9ee:	b088      	sub	sp, #32
    b9f0:	af00      	add	r7, sp, #0
    b9f2:	6078      	str	r0, [r7, #4]
    b9f4:	6039      	str	r1, [r7, #0]
    DEBUG_OP_printf("unary " UINT_FMT " %q %p\n", op, mp_unary_op_method_name[op], arg);
    b9f6:	4a74      	ldr	r2, [pc, #464]	; (bbc8 <mp_unary_op+0x1dc>)
    b9f8:	687b      	ldr	r3, [r7, #4]
    b9fa:	4413      	add	r3, r2
    b9fc:	781b      	ldrb	r3, [r3, #0]
    b9fe:	461a      	mov	r2, r3
    ba00:	683b      	ldr	r3, [r7, #0]
    ba02:	6879      	ldr	r1, [r7, #4]
    ba04:	4871      	ldr	r0, [pc, #452]	; (bbcc <mp_unary_op+0x1e0>)
    ba06:	f011 f8f1 	bl	1cbec <DEBUG_printf>

    if (op == MP_UNARY_OP_NOT) {
    ba0a:	687b      	ldr	r3, [r7, #4]
    ba0c:	2b03      	cmp	r3, #3
    ba0e:	d10b      	bne.n	ba28 <mp_unary_op+0x3c>
        // "not x" is the negative of whether "x" is true per Python semantics
        return mp_obj_new_bool(mp_obj_is_true(arg) == 0);
    ba10:	6838      	ldr	r0, [r7, #0]
    ba12:	f002 f9ff 	bl	de14 <mp_obj_is_true>
    ba16:	4603      	mov	r3, r0
    ba18:	f083 0301 	eor.w	r3, r3, #1
    ba1c:	b2db      	uxtb	r3, r3
    ba1e:	4618      	mov	r0, r3
    ba20:	f7ff fe31 	bl	b686 <mp_obj_new_bool>
    ba24:	4603      	mov	r3, r0
    ba26:	e0cb      	b.n	bbc0 <mp_unary_op+0x1d4>
    } else if (MP_OBJ_IS_SMALL_INT(arg)) {
    ba28:	6838      	ldr	r0, [r7, #0]
    ba2a:	f7ff fdd5 	bl	b5d8 <MP_OBJ_IS_SMALL_INT>
    ba2e:	4603      	mov	r3, r0
    ba30:	2b00      	cmp	r3, #0
    ba32:	d060      	beq.n	baf6 <mp_unary_op+0x10a>
        mp_int_t val = MP_OBJ_SMALL_INT_VALUE(arg);
    ba34:	683b      	ldr	r3, [r7, #0]
    ba36:	105b      	asrs	r3, r3, #1
    ba38:	617b      	str	r3, [r7, #20]
        switch (op) {
    ba3a:	687b      	ldr	r3, [r7, #4]
    ba3c:	2b08      	cmp	r3, #8
    ba3e:	d84b      	bhi.n	bad8 <mp_unary_op+0xec>
    ba40:	a201      	add	r2, pc, #4	; (adr r2, ba48 <mp_unary_op+0x5c>)
    ba42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    ba46:	bf00      	nop
    ba48:	0000ba87 	.word	0x0000ba87
    ba4c:	0000ba8b 	.word	0x0000ba8b
    ba50:	0000bad9 	.word	0x0000bad9
    ba54:	0000bad9 	.word	0x0000bad9
    ba58:	0000ba6d 	.word	0x0000ba6d
    ba5c:	0000bad9 	.word	0x0000bad9
    ba60:	0000ba83 	.word	0x0000ba83
    ba64:	0000baad 	.word	0x0000baad
    ba68:	0000ba87 	.word	0x0000ba87
            case MP_UNARY_OP_BOOL:
                return mp_obj_new_bool(val != 0);
    ba6c:	697b      	ldr	r3, [r7, #20]
    ba6e:	2b00      	cmp	r3, #0
    ba70:	bf14      	ite	ne
    ba72:	2301      	movne	r3, #1
    ba74:	2300      	moveq	r3, #0
    ba76:	b2db      	uxtb	r3, r3
    ba78:	4618      	mov	r0, r3
    ba7a:	f7ff fe04 	bl	b686 <mp_obj_new_bool>
    ba7e:	4603      	mov	r3, r0
    ba80:	e09e      	b.n	bbc0 <mp_unary_op+0x1d4>
            case MP_UNARY_OP_HASH:
                return arg;
    ba82:	683b      	ldr	r3, [r7, #0]
    ba84:	e09c      	b.n	bbc0 <mp_unary_op+0x1d4>
            case MP_UNARY_OP_POSITIVE:
            case MP_UNARY_OP_INT:
                return arg;
    ba86:	683b      	ldr	r3, [r7, #0]
    ba88:	e09a      	b.n	bbc0 <mp_unary_op+0x1d4>
            case MP_UNARY_OP_NEGATIVE:
                // check for overflow
                if (val == MP_SMALL_INT_MIN) {
    ba8a:	697b      	ldr	r3, [r7, #20]
    ba8c:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
    ba90:	d106      	bne.n	baa0 <mp_unary_op+0xb4>
                    return mp_obj_new_int(-val);
    ba92:	697b      	ldr	r3, [r7, #20]
    ba94:	425b      	negs	r3, r3
    ba96:	4618      	mov	r0, r3
    ba98:	f005 f984 	bl	10da4 <mp_obj_new_int>
    ba9c:	4603      	mov	r3, r0
    ba9e:	e08f      	b.n	bbc0 <mp_unary_op+0x1d4>
                } else {
                    return MP_OBJ_NEW_SMALL_INT(-val);
    baa0:	697b      	ldr	r3, [r7, #20]
    baa2:	425b      	negs	r3, r3
    baa4:	005b      	lsls	r3, r3, #1
    baa6:	f043 0301 	orr.w	r3, r3, #1
    baaa:	e089      	b.n	bbc0 <mp_unary_op+0x1d4>
                }
            case MP_UNARY_OP_ABS:
                if (val >= 0) {
    baac:	697b      	ldr	r3, [r7, #20]
    baae:	2b00      	cmp	r3, #0
    bab0:	db01      	blt.n	bab6 <mp_unary_op+0xca>
                    return arg;
    bab2:	683b      	ldr	r3, [r7, #0]
    bab4:	e084      	b.n	bbc0 <mp_unary_op+0x1d4>
                } else if (val == MP_SMALL_INT_MIN) {
    bab6:	697b      	ldr	r3, [r7, #20]
    bab8:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
    babc:	d106      	bne.n	bacc <mp_unary_op+0xe0>
                    // check for overflow
                    return mp_obj_new_int(-val);
    babe:	697b      	ldr	r3, [r7, #20]
    bac0:	425b      	negs	r3, r3
    bac2:	4618      	mov	r0, r3
    bac4:	f005 f96e 	bl	10da4 <mp_obj_new_int>
    bac8:	4603      	mov	r3, r0
    baca:	e079      	b.n	bbc0 <mp_unary_op+0x1d4>
                } else {
                    return MP_OBJ_NEW_SMALL_INT(-val);
    bacc:	697b      	ldr	r3, [r7, #20]
    bace:	425b      	negs	r3, r3
    bad0:	005b      	lsls	r3, r3, #1
    bad2:	f043 0301 	orr.w	r3, r3, #1
    bad6:	e073      	b.n	bbc0 <mp_unary_op+0x1d4>
                }
            default:
                assert(op == MP_UNARY_OP_INVERT);
    bad8:	687b      	ldr	r3, [r7, #4]
    bada:	2b02      	cmp	r3, #2
    badc:	d005      	beq.n	baea <mp_unary_op+0xfe>
    bade:	4b3c      	ldr	r3, [pc, #240]	; (bbd0 <mp_unary_op+0x1e4>)
    bae0:	4a3c      	ldr	r2, [pc, #240]	; (bbd4 <mp_unary_op+0x1e8>)
    bae2:	21fa      	movs	r1, #250	; 0xfa
    bae4:	483c      	ldr	r0, [pc, #240]	; (bbd8 <mp_unary_op+0x1ec>)
    bae6:	f011 f9fb 	bl	1cee0 <__assert_func>
                return MP_OBJ_NEW_SMALL_INT(~val);
    baea:	697b      	ldr	r3, [r7, #20]
    baec:	43db      	mvns	r3, r3
    baee:	005b      	lsls	r3, r3, #1
    baf0:	f043 0301 	orr.w	r3, r3, #1
    baf4:	e064      	b.n	bbc0 <mp_unary_op+0x1d4>
        }
    } else if (op == MP_UNARY_OP_HASH && MP_OBJ_IS_STR_OR_BYTES(arg)) {
    baf6:	687b      	ldr	r3, [r7, #4]
    baf8:	2b06      	cmp	r3, #6
    bafa:	d145      	bne.n	bb88 <mp_unary_op+0x19c>
    bafc:	6838      	ldr	r0, [r7, #0]
    bafe:	f7ff fd7d 	bl	b5fc <MP_OBJ_IS_QSTR>
    bb02:	4603      	mov	r3, r0
    bb04:	2b00      	cmp	r3, #0
    bb06:	d10b      	bne.n	bb20 <mp_unary_op+0x134>
    bb08:	6838      	ldr	r0, [r7, #0]
    bb0a:	f7ff fd89 	bl	b620 <MP_OBJ_IS_OBJ>
    bb0e:	4603      	mov	r3, r0
    bb10:	2b00      	cmp	r3, #0
    bb12:	d039      	beq.n	bb88 <mp_unary_op+0x19c>
    bb14:	683b      	ldr	r3, [r7, #0]
    bb16:	681b      	ldr	r3, [r3, #0]
    bb18:	699b      	ldr	r3, [r3, #24]
    bb1a:	4a30      	ldr	r2, [pc, #192]	; (bbdc <mp_unary_op+0x1f0>)
    bb1c:	4293      	cmp	r3, r2
    bb1e:	d133      	bne.n	bb88 <mp_unary_op+0x19c>
        // fast path for hashing str/bytes
        GET_STR_HASH(arg, h);
    bb20:	6838      	ldr	r0, [r7, #0]
    bb22:	f7ff fd6b 	bl	b5fc <MP_OBJ_IS_QSTR>
    bb26:	4603      	mov	r3, r0
    bb28:	2b00      	cmp	r3, #0
    bb2a:	d006      	beq.n	bb3a <mp_unary_op+0x14e>
    bb2c:	683b      	ldr	r3, [r7, #0]
    bb2e:	089b      	lsrs	r3, r3, #2
    bb30:	4618      	mov	r0, r3
    bb32:	f7f5 fc31 	bl	1398 <qstr_hash>
    bb36:	61f8      	str	r0, [r7, #28]
    bb38:	e002      	b.n	bb40 <mp_unary_op+0x154>
    bb3a:	683b      	ldr	r3, [r7, #0]
    bb3c:	685b      	ldr	r3, [r3, #4]
    bb3e:	61fb      	str	r3, [r7, #28]
        if (h == 0) {
    bb40:	69fb      	ldr	r3, [r7, #28]
    bb42:	2b00      	cmp	r3, #0
    bb44:	d11b      	bne.n	bb7e <mp_unary_op+0x192>
            GET_STR_DATA_LEN(arg, data, len);
    bb46:	6838      	ldr	r0, [r7, #0]
    bb48:	f7ff fd58 	bl	b5fc <MP_OBJ_IS_QSTR>
    bb4c:	4603      	mov	r3, r0
    bb4e:	2b00      	cmp	r3, #0
    bb50:	d009      	beq.n	bb66 <mp_unary_op+0x17a>
    bb52:	683b      	ldr	r3, [r7, #0]
    bb54:	089b      	lsrs	r3, r3, #2
    bb56:	f107 0208 	add.w	r2, r7, #8
    bb5a:	4611      	mov	r1, r2
    bb5c:	4618      	mov	r0, r3
    bb5e:	f7f5 fc45 	bl	13ec <qstr_data>
    bb62:	61b8      	str	r0, [r7, #24]
    bb64:	e005      	b.n	bb72 <mp_unary_op+0x186>
    bb66:	683b      	ldr	r3, [r7, #0]
    bb68:	689b      	ldr	r3, [r3, #8]
    bb6a:	60bb      	str	r3, [r7, #8]
    bb6c:	683b      	ldr	r3, [r7, #0]
    bb6e:	68db      	ldr	r3, [r3, #12]
    bb70:	61bb      	str	r3, [r7, #24]
            h = qstr_compute_hash(data, len);
    bb72:	68bb      	ldr	r3, [r7, #8]
    bb74:	4619      	mov	r1, r3
    bb76:	69b8      	ldr	r0, [r7, #24]
    bb78:	f7f5 fa22 	bl	fc0 <qstr_compute_hash>
    bb7c:	61f8      	str	r0, [r7, #28]
        }
        return MP_OBJ_NEW_SMALL_INT(h);
    bb7e:	69fb      	ldr	r3, [r7, #28]
    bb80:	005b      	lsls	r3, r3, #1
    bb82:	f043 0301 	orr.w	r3, r3, #1
    bb86:	e01b      	b.n	bbc0 <mp_unary_op+0x1d4>
    } else {
        mp_obj_type_t *type = mp_obj_get_type(arg);
    bb88:	6838      	ldr	r0, [r7, #0]
    bb8a:	f002 f867 	bl	dc5c <mp_obj_get_type>
    bb8e:	6138      	str	r0, [r7, #16]
        if (type->unary_op != NULL) {
    bb90:	693b      	ldr	r3, [r7, #16]
    bb92:	695b      	ldr	r3, [r3, #20]
    bb94:	2b00      	cmp	r3, #0
    bb96:	d00a      	beq.n	bbae <mp_unary_op+0x1c2>
            mp_obj_t result = type->unary_op(op, arg);
    bb98:	693b      	ldr	r3, [r7, #16]
    bb9a:	695b      	ldr	r3, [r3, #20]
    bb9c:	6839      	ldr	r1, [r7, #0]
    bb9e:	6878      	ldr	r0, [r7, #4]
    bba0:	4798      	blx	r3
    bba2:	60f8      	str	r0, [r7, #12]
            if (result != MP_OBJ_NULL) {
    bba4:	68fb      	ldr	r3, [r7, #12]
    bba6:	2b00      	cmp	r3, #0
    bba8:	d001      	beq.n	bbae <mp_unary_op+0x1c2>
                return result;
    bbaa:	68fb      	ldr	r3, [r7, #12]
    bbac:	e008      	b.n	bbc0 <mp_unary_op+0x1d4>
            }
        }
        // With MP_UNARY_OP_INT, mp_unary_op() becomes a fallback for mp_obj_get_int().
        // In this case provide a more focused error message to not confuse, e.g. chr(1.0)
        if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
            if (op == MP_UNARY_OP_INT) {
    bbae:	687b      	ldr	r3, [r7, #4]
    bbb0:	2b08      	cmp	r3, #8
    bbb2:	d102      	bne.n	bbba <mp_unary_op+0x1ce>
                mp_raise_TypeError("can't convert to int");
    bbb4:	480a      	ldr	r0, [pc, #40]	; (bbe0 <mp_unary_op+0x1f4>)
    bbb6:	f001 fbe9 	bl	d38c <mp_raise_TypeError>
            } else {
                mp_raise_TypeError("unsupported type for operator");
    bbba:	480a      	ldr	r0, [pc, #40]	; (bbe4 <mp_unary_op+0x1f8>)
    bbbc:	f001 fbe6 	bl	d38c <mp_raise_TypeError>
                    "unsupported type for %q: '%s'",
                    mp_unary_op_method_name[op], mp_obj_get_type_str(arg)));
            }
        }
    }
}
    bbc0:	4618      	mov	r0, r3
    bbc2:	3720      	adds	r7, #32
    bbc4:	46bd      	mov	sp, r7
    bbc6:	bd80      	pop	{r7, pc}
    bbc8:	00025ce0 	.word	0x00025ce0
    bbcc:	00023090 	.word	0x00023090
    bbd0:	000230a0 	.word	0x000230a0
    bbd4:	000234d4 	.word	0x000234d4
    bbd8:	000230bc 	.word	0x000230bc
    bbdc:	00012d2f 	.word	0x00012d2f
    bbe0:	000230d0 	.word	0x000230d0
    bbe4:	000230e8 	.word	0x000230e8

0000bbe8 <mp_binary_op>:

mp_obj_t mp_binary_op(mp_binary_op_t op, mp_obj_t lhs, mp_obj_t rhs) {
    bbe8:	b590      	push	{r4, r7, lr}
    bbea:	b097      	sub	sp, #92	; 0x5c
    bbec:	af02      	add	r7, sp, #8
    bbee:	60f8      	str	r0, [r7, #12]
    bbf0:	60b9      	str	r1, [r7, #8]
    bbf2:	607a      	str	r2, [r7, #4]
    DEBUG_OP_printf("binary " UINT_FMT " %q %p %p\n", op, mp_binary_op_method_name[op], lhs, rhs);
    bbf4:	4aaf      	ldr	r2, [pc, #700]	; (beb4 <mp_binary_op+0x2cc>)
    bbf6:	68fb      	ldr	r3, [r7, #12]
    bbf8:	4413      	add	r3, r2
    bbfa:	781b      	ldrb	r3, [r3, #0]
    bbfc:	461a      	mov	r2, r3
    bbfe:	687b      	ldr	r3, [r7, #4]
    bc00:	9300      	str	r3, [sp, #0]
    bc02:	68bb      	ldr	r3, [r7, #8]
    bc04:	68f9      	ldr	r1, [r7, #12]
    bc06:	48ac      	ldr	r0, [pc, #688]	; (beb8 <mp_binary_op+0x2d0>)
    bc08:	f010 fff0 	bl	1cbec <DEBUG_printf>
    //   then check for implemented seq.concat
    //   then fail
    // note that list does not implement + or +=, so that inplace_concat is reached first for +=

    // deal with is
    if (op == MP_BINARY_OP_IS) {
    bc0c:	68fb      	ldr	r3, [r7, #12]
    bc0e:	2b07      	cmp	r3, #7
    bc10:	d10b      	bne.n	bc2a <mp_binary_op+0x42>
        return mp_obj_new_bool(lhs == rhs);
    bc12:	68ba      	ldr	r2, [r7, #8]
    bc14:	687b      	ldr	r3, [r7, #4]
    bc16:	429a      	cmp	r2, r3
    bc18:	bf0c      	ite	eq
    bc1a:	2301      	moveq	r3, #1
    bc1c:	2300      	movne	r3, #0
    bc1e:	b2db      	uxtb	r3, r3
    bc20:	4618      	mov	r0, r3
    bc22:	f7ff fd30 	bl	b686 <mp_obj_new_bool>
    bc26:	4603      	mov	r3, r0
    bc28:	e241      	b.n	c0ae <mp_binary_op+0x4c6>
    }

    // deal with == and != for all types
    if (op == MP_BINARY_OP_EQUAL || op == MP_BINARY_OP_NOT_EQUAL) {
    bc2a:	68fb      	ldr	r3, [r7, #12]
    bc2c:	2b02      	cmp	r3, #2
    bc2e:	d002      	beq.n	bc36 <mp_binary_op+0x4e>
    bc30:	68fb      	ldr	r3, [r7, #12]
    bc32:	2b05      	cmp	r3, #5
    bc34:	d114      	bne.n	bc60 <mp_binary_op+0x78>
        if (mp_obj_equal(lhs, rhs)) {
    bc36:	6879      	ldr	r1, [r7, #4]
    bc38:	68b8      	ldr	r0, [r7, #8]
    bc3a:	f002 f961 	bl	df00 <mp_obj_equal>
    bc3e:	4603      	mov	r3, r0
    bc40:	2b00      	cmp	r3, #0
    bc42:	d006      	beq.n	bc52 <mp_binary_op+0x6a>
            if (op == MP_BINARY_OP_EQUAL) {
    bc44:	68fb      	ldr	r3, [r7, #12]
    bc46:	2b02      	cmp	r3, #2
    bc48:	d101      	bne.n	bc4e <mp_binary_op+0x66>
                return mp_const_true;
    bc4a:	4b9c      	ldr	r3, [pc, #624]	; (bebc <mp_binary_op+0x2d4>)
    bc4c:	e22f      	b.n	c0ae <mp_binary_op+0x4c6>
            } else {
                return mp_const_false;
    bc4e:	4b9c      	ldr	r3, [pc, #624]	; (bec0 <mp_binary_op+0x2d8>)
    bc50:	e22d      	b.n	c0ae <mp_binary_op+0x4c6>
            }
        } else {
            if (op == MP_BINARY_OP_EQUAL) {
    bc52:	68fb      	ldr	r3, [r7, #12]
    bc54:	2b02      	cmp	r3, #2
    bc56:	d101      	bne.n	bc5c <mp_binary_op+0x74>
                return mp_const_false;
    bc58:	4b99      	ldr	r3, [pc, #612]	; (bec0 <mp_binary_op+0x2d8>)
    bc5a:	e228      	b.n	c0ae <mp_binary_op+0x4c6>
            } else {
                return mp_const_true;
    bc5c:	4b97      	ldr	r3, [pc, #604]	; (bebc <mp_binary_op+0x2d4>)
    bc5e:	e226      	b.n	c0ae <mp_binary_op+0x4c6>
            }
        }
    }

    // deal with exception_match for all types
    if (op == MP_BINARY_OP_EXCEPTION_MATCH) {
    bc60:	68fb      	ldr	r3, [r7, #12]
    bc62:	2b08      	cmp	r3, #8
    bc64:	d145      	bne.n	bcf2 <mp_binary_op+0x10a>
        // rhs must be issubclass(rhs, BaseException)
        if (mp_obj_is_exception_type(rhs)) {
    bc66:	6878      	ldr	r0, [r7, #4]
    bc68:	f003 ff7a 	bl	fb60 <mp_obj_is_exception_type>
    bc6c:	4603      	mov	r3, r0
    bc6e:	2b00      	cmp	r3, #0
    bc70:	d00a      	beq.n	bc88 <mp_binary_op+0xa0>
            if (mp_obj_exception_match(lhs, rhs)) {
    bc72:	6879      	ldr	r1, [r7, #4]
    bc74:	68b8      	ldr	r0, [r7, #8]
    bc76:	f003 ffab 	bl	fbd0 <mp_obj_exception_match>
    bc7a:	4603      	mov	r3, r0
    bc7c:	2b00      	cmp	r3, #0
    bc7e:	d001      	beq.n	bc84 <mp_binary_op+0x9c>
                return mp_const_true;
    bc80:	4b8e      	ldr	r3, [pc, #568]	; (bebc <mp_binary_op+0x2d4>)
    bc82:	e214      	b.n	c0ae <mp_binary_op+0x4c6>
            } else {
                return mp_const_false;
    bc84:	4b8e      	ldr	r3, [pc, #568]	; (bec0 <mp_binary_op+0x2d8>)
    bc86:	e212      	b.n	c0ae <mp_binary_op+0x4c6>
            }
        } else if (MP_OBJ_IS_TYPE(rhs, &mp_type_tuple)) {
    bc88:	6878      	ldr	r0, [r7, #4]
    bc8a:	f7ff fcc9 	bl	b620 <MP_OBJ_IS_OBJ>
    bc8e:	4603      	mov	r3, r0
    bc90:	2b00      	cmp	r3, #0
    bc92:	f000 81fb 	beq.w	c08c <mp_binary_op+0x4a4>
    bc96:	687b      	ldr	r3, [r7, #4]
    bc98:	681b      	ldr	r3, [r3, #0]
    bc9a:	4a8a      	ldr	r2, [pc, #552]	; (bec4 <mp_binary_op+0x2dc>)
    bc9c:	4293      	cmp	r3, r2
    bc9e:	f040 81f5 	bne.w	c08c <mp_binary_op+0x4a4>
            mp_obj_tuple_t *tuple = MP_OBJ_TO_PTR(rhs);
    bca2:	687b      	ldr	r3, [r7, #4]
    bca4:	63fb      	str	r3, [r7, #60]	; 0x3c
            for (size_t i = 0; i < tuple->len; i++) {
    bca6:	2300      	movs	r3, #0
    bca8:	64fb      	str	r3, [r7, #76]	; 0x4c
    bcaa:	e01b      	b.n	bce4 <mp_binary_op+0xfc>
                rhs = tuple->items[i];
    bcac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    bcae:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    bcb0:	3202      	adds	r2, #2
    bcb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    bcb6:	607b      	str	r3, [r7, #4]
                if (!mp_obj_is_exception_type(rhs)) {
    bcb8:	6878      	ldr	r0, [r7, #4]
    bcba:	f003 ff51 	bl	fb60 <mp_obj_is_exception_type>
    bcbe:	4603      	mov	r3, r0
    bcc0:	f083 0301 	eor.w	r3, r3, #1
    bcc4:	b2db      	uxtb	r3, r3
    bcc6:	2b00      	cmp	r3, #0
    bcc8:	f040 81e2 	bne.w	c090 <mp_binary_op+0x4a8>
                    goto unsupported_op;
                }
                if (mp_obj_exception_match(lhs, rhs)) {
    bccc:	6879      	ldr	r1, [r7, #4]
    bcce:	68b8      	ldr	r0, [r7, #8]
    bcd0:	f003 ff7e 	bl	fbd0 <mp_obj_exception_match>
    bcd4:	4603      	mov	r3, r0
    bcd6:	2b00      	cmp	r3, #0
    bcd8:	d001      	beq.n	bcde <mp_binary_op+0xf6>
                    return mp_const_true;
    bcda:	4b78      	ldr	r3, [pc, #480]	; (bebc <mp_binary_op+0x2d4>)
    bcdc:	e1e7      	b.n	c0ae <mp_binary_op+0x4c6>
            for (size_t i = 0; i < tuple->len; i++) {
    bcde:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    bce0:	3301      	adds	r3, #1
    bce2:	64fb      	str	r3, [r7, #76]	; 0x4c
    bce4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    bce6:	685a      	ldr	r2, [r3, #4]
    bce8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    bcea:	429a      	cmp	r2, r3
    bcec:	d8de      	bhi.n	bcac <mp_binary_op+0xc4>
                }
            }
            return mp_const_false;
    bcee:	4b74      	ldr	r3, [pc, #464]	; (bec0 <mp_binary_op+0x2d8>)
    bcf0:	e1dd      	b.n	c0ae <mp_binary_op+0x4c6>
        }
        goto unsupported_op;
    }

    if (MP_OBJ_IS_SMALL_INT(lhs)) {
    bcf2:	68b8      	ldr	r0, [r7, #8]
    bcf4:	f7ff fc70 	bl	b5d8 <MP_OBJ_IS_SMALL_INT>
    bcf8:	4603      	mov	r3, r0
    bcfa:	2b00      	cmp	r3, #0
    bcfc:	f000 818a 	beq.w	c014 <mp_binary_op+0x42c>
        mp_int_t lhs_val = MP_OBJ_SMALL_INT_VALUE(lhs);
    bd00:	68bb      	ldr	r3, [r7, #8]
    bd02:	105b      	asrs	r3, r3, #1
    bd04:	64bb      	str	r3, [r7, #72]	; 0x48
        if (MP_OBJ_IS_SMALL_INT(rhs)) {
    bd06:	6878      	ldr	r0, [r7, #4]
    bd08:	f7ff fc66 	bl	b5d8 <MP_OBJ_IS_SMALL_INT>
    bd0c:	4603      	mov	r3, r0
    bd0e:	2b00      	cmp	r3, #0
    bd10:	f000 8180 	beq.w	c014 <mp_binary_op+0x42c>
            mp_int_t rhs_val = MP_OBJ_SMALL_INT_VALUE(rhs);
    bd14:	687b      	ldr	r3, [r7, #4]
    bd16:	105b      	asrs	r3, r3, #1
    bd18:	647b      	str	r3, [r7, #68]	; 0x44
            //      -       result always fits in mp_int_t, then handled by SMALL_INT check
            //      *       checked explicitly
            //      /       if lhs=MIN and rhs=-1; result always fits in mp_int_t, then handled by SMALL_INT check
            //      %       if lhs=MIN and rhs=-1; result always fits in mp_int_t, then handled by SMALL_INT check
            //      <<      checked explicitly
            switch (op) {
    bd1a:	68fb      	ldr	r3, [r7, #12]
    bd1c:	2b21      	cmp	r3, #33	; 0x21
    bd1e:	f200 81b9 	bhi.w	c094 <mp_binary_op+0x4ac>
    bd22:	a201      	add	r2, pc, #4	; (adr r2, bd28 <mp_binary_op+0x140>)
    bd24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    bd28:	0000bf8d 	.word	0x0000bf8d
    bd2c:	0000bfa5 	.word	0x0000bfa5
    bd30:	0000c095 	.word	0x0000c095
    bd34:	0000bfbd 	.word	0x0000bfbd
    bd38:	0000bfd5 	.word	0x0000bfd5
    bd3c:	0000c095 	.word	0x0000c095
    bd40:	0000c095 	.word	0x0000c095
    bd44:	0000c095 	.word	0x0000c095
    bd48:	0000c095 	.word	0x0000c095
    bd4c:	0000bdb1 	.word	0x0000bdb1
    bd50:	0000bdbb 	.word	0x0000bdbb
    bd54:	0000bdc5 	.word	0x0000bdc5
    bd58:	0000bdcf 	.word	0x0000bdcf
    bd5c:	0000be1b 	.word	0x0000be1b
    bd60:	0000be3d 	.word	0x0000be3d
    bd64:	0000be47 	.word	0x0000be47
    bd68:	0000be51 	.word	0x0000be51
    bd6c:	0000be81 	.word	0x0000be81
    bd70:	0000c095 	.word	0x0000c095
    bd74:	0000be95 	.word	0x0000be95
    bd78:	0000bea9 	.word	0x0000bea9
    bd7c:	0000bdb1 	.word	0x0000bdb1
    bd80:	0000bdbb 	.word	0x0000bdbb
    bd84:	0000bdc5 	.word	0x0000bdc5
    bd88:	0000bdcf 	.word	0x0000bdcf
    bd8c:	0000be1b 	.word	0x0000be1b
    bd90:	0000be3d 	.word	0x0000be3d
    bd94:	0000be47 	.word	0x0000be47
    bd98:	0000be51 	.word	0x0000be51
    bd9c:	0000be81 	.word	0x0000be81
    bda0:	0000c095 	.word	0x0000c095
    bda4:	0000be95 	.word	0x0000be95
    bda8:	0000bea9 	.word	0x0000bea9
    bdac:	0000bf4b 	.word	0x0000bf4b
                case MP_BINARY_OP_OR:
                case MP_BINARY_OP_INPLACE_OR: lhs_val |= rhs_val; break;
    bdb0:	6cba      	ldr	r2, [r7, #72]	; 0x48
    bdb2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    bdb4:	4313      	orrs	r3, r2
    bdb6:	64bb      	str	r3, [r7, #72]	; 0x48
    bdb8:	e118      	b.n	bfec <mp_binary_op+0x404>
                case MP_BINARY_OP_XOR:
                case MP_BINARY_OP_INPLACE_XOR: lhs_val ^= rhs_val; break;
    bdba:	6cba      	ldr	r2, [r7, #72]	; 0x48
    bdbc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    bdbe:	4053      	eors	r3, r2
    bdc0:	64bb      	str	r3, [r7, #72]	; 0x48
    bdc2:	e113      	b.n	bfec <mp_binary_op+0x404>
                case MP_BINARY_OP_AND:
                case MP_BINARY_OP_INPLACE_AND: lhs_val &= rhs_val; break;
    bdc4:	6cba      	ldr	r2, [r7, #72]	; 0x48
    bdc6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    bdc8:	4013      	ands	r3, r2
    bdca:	64bb      	str	r3, [r7, #72]	; 0x48
    bdcc:	e10e      	b.n	bfec <mp_binary_op+0x404>
                case MP_BINARY_OP_LSHIFT:
                case MP_BINARY_OP_INPLACE_LSHIFT: {
                    if (rhs_val < 0) {
    bdce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    bdd0:	2b00      	cmp	r3, #0
    bdd2:	da02      	bge.n	bdda <mp_binary_op+0x1f2>
                        // negative shift not allowed
                        mp_raise_ValueError("negative shift count");
    bdd4:	483c      	ldr	r0, [pc, #240]	; (bec8 <mp_binary_op+0x2e0>)
    bdd6:	f001 face 	bl	d376 <mp_raise_ValueError>
                    } else if (rhs_val >= (mp_int_t)BITS_PER_WORD || lhs_val > (MP_SMALL_INT_MAX >> rhs_val) || lhs_val < (MP_SMALL_INT_MIN >> rhs_val)) {
    bdda:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    bddc:	2b1f      	cmp	r3, #31
    bdde:	dc0d      	bgt.n	bdfc <mp_binary_op+0x214>
    bde0:	f06f 4240 	mvn.w	r2, #3221225472	; 0xc0000000
    bde4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    bde6:	411a      	asrs	r2, r3
    bde8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    bdea:	429a      	cmp	r2, r3
    bdec:	db06      	blt.n	bdfc <mp_binary_op+0x214>
    bdee:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
    bdf2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    bdf4:	411a      	asrs	r2, r3
    bdf6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    bdf8:	429a      	cmp	r2, r3
    bdfa:	dd08      	ble.n	be0e <mp_binary_op+0x226>
                        // left-shift will overflow, so use higher precision integer
                        lhs = mp_obj_new_int_from_ll(lhs_val);
    bdfc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    bdfe:	ea4f 74e3 	mov.w	r4, r3, asr #31
    be02:	4618      	mov	r0, r3
    be04:	4621      	mov	r1, r4
    be06:	f004 ff97 	bl	10d38 <mp_obj_new_int_from_ll>
    be0a:	60b8      	str	r0, [r7, #8]
                        goto generic_binary_op;
    be0c:	e10d      	b.n	c02a <mp_binary_op+0x442>
                    } else {
                        // use standard precision
                        lhs_val <<= rhs_val;
    be0e:	6cba      	ldr	r2, [r7, #72]	; 0x48
    be10:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    be12:	fa02 f303 	lsl.w	r3, r2, r3
    be16:	64bb      	str	r3, [r7, #72]	; 0x48
                    }
                    break;
    be18:	e0e8      	b.n	bfec <mp_binary_op+0x404>
                }
                case MP_BINARY_OP_RSHIFT:
                case MP_BINARY_OP_INPLACE_RSHIFT:
                    if (rhs_val < 0) {
    be1a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    be1c:	2b00      	cmp	r3, #0
    be1e:	da02      	bge.n	be26 <mp_binary_op+0x23e>
                        // negative shift not allowed
                        mp_raise_ValueError("negative shift count");
    be20:	4829      	ldr	r0, [pc, #164]	; (bec8 <mp_binary_op+0x2e0>)
    be22:	f001 faa8 	bl	d376 <mp_raise_ValueError>
                    } else {
                        // standard precision is enough for right-shift
                        if (rhs_val >= (mp_int_t)BITS_PER_WORD) {
    be26:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    be28:	2b1f      	cmp	r3, #31
    be2a:	dd01      	ble.n	be30 <mp_binary_op+0x248>
                            // Shifting to big amounts is underfined behavior
                            // in C and is CPU-dependent; propagate sign bit.
                            rhs_val = BITS_PER_WORD - 1;
    be2c:	231f      	movs	r3, #31
    be2e:	647b      	str	r3, [r7, #68]	; 0x44
                        }
                        lhs_val >>= rhs_val;
    be30:	6cba      	ldr	r2, [r7, #72]	; 0x48
    be32:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    be34:	fa42 f303 	asr.w	r3, r2, r3
    be38:	64bb      	str	r3, [r7, #72]	; 0x48
                    }
                    break;
    be3a:	e0d7      	b.n	bfec <mp_binary_op+0x404>
                case MP_BINARY_OP_ADD:
                case MP_BINARY_OP_INPLACE_ADD: lhs_val += rhs_val; break;
    be3c:	6cba      	ldr	r2, [r7, #72]	; 0x48
    be3e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    be40:	4413      	add	r3, r2
    be42:	64bb      	str	r3, [r7, #72]	; 0x48
    be44:	e0d2      	b.n	bfec <mp_binary_op+0x404>
                case MP_BINARY_OP_SUBTRACT:
                case MP_BINARY_OP_INPLACE_SUBTRACT: lhs_val -= rhs_val; break;
    be46:	6cba      	ldr	r2, [r7, #72]	; 0x48
    be48:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    be4a:	1ad3      	subs	r3, r2, r3
    be4c:	64bb      	str	r3, [r7, #72]	; 0x48
    be4e:	e0cd      	b.n	bfec <mp_binary_op+0x404>
                        // use standard precision
                        lhs_val = (mp_int_t)res;
                    }
                    #endif

                    if (mp_small_int_mul_overflow(lhs_val, rhs_val)) {
    be50:	6c79      	ldr	r1, [r7, #68]	; 0x44
    be52:	6cb8      	ldr	r0, [r7, #72]	; 0x48
    be54:	f010 fda2 	bl	1c99c <mp_small_int_mul_overflow>
    be58:	4603      	mov	r3, r0
    be5a:	2b00      	cmp	r3, #0
    be5c:	d008      	beq.n	be70 <mp_binary_op+0x288>
                        // use higher precision
                        lhs = mp_obj_new_int_from_ll(lhs_val);
    be5e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    be60:	ea4f 74e3 	mov.w	r4, r3, asr #31
    be64:	4618      	mov	r0, r3
    be66:	4621      	mov	r1, r4
    be68:	f004 ff66 	bl	10d38 <mp_obj_new_int_from_ll>
    be6c:	60b8      	str	r0, [r7, #8]
                        goto generic_binary_op;
    be6e:	e0dc      	b.n	c02a <mp_binary_op+0x442>
                    } else {
                        // use standard precision
                        return MP_OBJ_NEW_SMALL_INT(lhs_val * rhs_val);
    be70:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    be72:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    be74:	fb02 f303 	mul.w	r3, r2, r3
    be78:	005b      	lsls	r3, r3, #1
    be7a:	f043 0301 	orr.w	r3, r3, #1
    be7e:	e116      	b.n	c0ae <mp_binary_op+0x4c6>
                    }
                }
                case MP_BINARY_OP_FLOOR_DIVIDE:
                case MP_BINARY_OP_INPLACE_FLOOR_DIVIDE:
                    if (rhs_val == 0) {
    be80:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    be82:	2b00      	cmp	r3, #0
    be84:	f000 810a 	beq.w	c09c <mp_binary_op+0x4b4>
                        goto zero_division;
                    }
                    lhs_val = mp_small_int_floor_divide(lhs_val, rhs_val);
    be88:	6c79      	ldr	r1, [r7, #68]	; 0x44
    be8a:	6cb8      	ldr	r0, [r7, #72]	; 0x48
    be8c:	f010 fdeb 	bl	1ca66 <mp_small_int_floor_divide>
    be90:	64b8      	str	r0, [r7, #72]	; 0x48
                    break;
    be92:	e0ab      	b.n	bfec <mp_binary_op+0x404>
                    return mp_obj_new_float((mp_float_t)lhs_val / (mp_float_t)rhs_val);
                #endif

                case MP_BINARY_OP_MODULO:
                case MP_BINARY_OP_INPLACE_MODULO: {
                    if (rhs_val == 0) {
    be94:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    be96:	2b00      	cmp	r3, #0
    be98:	f000 8102 	beq.w	c0a0 <mp_binary_op+0x4b8>
                        goto zero_division;
                    }
                    lhs_val = mp_small_int_modulo(lhs_val, rhs_val);
    be9c:	6c79      	ldr	r1, [r7, #68]	; 0x44
    be9e:	6cb8      	ldr	r0, [r7, #72]	; 0x48
    bea0:	f010 fdbc 	bl	1ca1c <mp_small_int_modulo>
    bea4:	64b8      	str	r0, [r7, #72]	; 0x48
                    break;
    bea6:	e0a1      	b.n	bfec <mp_binary_op+0x404>
                }

                case MP_BINARY_OP_POWER:
                case MP_BINARY_OP_INPLACE_POWER:
                    if (rhs_val < 0) {
    bea8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    beaa:	2b00      	cmp	r3, #0
    beac:	da10      	bge.n	bed0 <mp_binary_op+0x2e8>
                        #if MICROPY_PY_BUILTINS_FLOAT
                        lhs = mp_obj_new_float(lhs_val);
                        goto generic_binary_op;
                        #else
                        mp_raise_ValueError("negative power with no float support");
    beae:	4807      	ldr	r0, [pc, #28]	; (becc <mp_binary_op+0x2e4>)
    beb0:	f001 fa61 	bl	d376 <mp_raise_ValueError>
    beb4:	00025cec 	.word	0x00025cec
    beb8:	00023108 	.word	0x00023108
    bebc:	00023868 	.word	0x00023868
    bec0:	00023860 	.word	0x00023860
    bec4:	00025a34 	.word	0x00025a34
    bec8:	0002311c 	.word	0x0002311c
    becc:	00023134 	.word	0x00023134
                        #endif
                    } else {
                        mp_int_t ans = 1;
    bed0:	2301      	movs	r3, #1
    bed2:	643b      	str	r3, [r7, #64]	; 0x40
                        while (rhs_val > 0) {
    bed4:	e024      	b.n	bf20 <mp_binary_op+0x338>
                            if (rhs_val & 1) {
    bed6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    bed8:	f003 0301 	and.w	r3, r3, #1
    bedc:	2b00      	cmp	r3, #0
    bede:	d00b      	beq.n	bef8 <mp_binary_op+0x310>
                                if (mp_small_int_mul_overflow(ans, lhs_val)) {
    bee0:	6cb9      	ldr	r1, [r7, #72]	; 0x48
    bee2:	6c38      	ldr	r0, [r7, #64]	; 0x40
    bee4:	f010 fd5a 	bl	1c99c <mp_small_int_mul_overflow>
    bee8:	4603      	mov	r3, r0
    beea:	2b00      	cmp	r3, #0
    beec:	d120      	bne.n	bf30 <mp_binary_op+0x348>
                                    goto power_overflow;
                                }
                                ans *= lhs_val;
    beee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    bef0:	6cba      	ldr	r2, [r7, #72]	; 0x48
    bef2:	fb02 f303 	mul.w	r3, r2, r3
    bef6:	643b      	str	r3, [r7, #64]	; 0x40
                            }
                            if (rhs_val == 1) {
    bef8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    befa:	2b01      	cmp	r3, #1
    befc:	d014      	beq.n	bf28 <mp_binary_op+0x340>
                                break;
                            }
                            rhs_val /= 2;
    befe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    bf00:	0fda      	lsrs	r2, r3, #31
    bf02:	4413      	add	r3, r2
    bf04:	105b      	asrs	r3, r3, #1
    bf06:	647b      	str	r3, [r7, #68]	; 0x44
                            if (mp_small_int_mul_overflow(lhs_val, lhs_val)) {
    bf08:	6cb9      	ldr	r1, [r7, #72]	; 0x48
    bf0a:	6cb8      	ldr	r0, [r7, #72]	; 0x48
    bf0c:	f010 fd46 	bl	1c99c <mp_small_int_mul_overflow>
    bf10:	4603      	mov	r3, r0
    bf12:	2b00      	cmp	r3, #0
    bf14:	d10e      	bne.n	bf34 <mp_binary_op+0x34c>
                                goto power_overflow;
                            }
                            lhs_val *= lhs_val;
    bf16:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    bf18:	6cba      	ldr	r2, [r7, #72]	; 0x48
    bf1a:	fb02 f303 	mul.w	r3, r2, r3
    bf1e:	64bb      	str	r3, [r7, #72]	; 0x48
                        while (rhs_val > 0) {
    bf20:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    bf22:	2b00      	cmp	r3, #0
    bf24:	dcd7      	bgt.n	bed6 <mp_binary_op+0x2ee>
    bf26:	e000      	b.n	bf2a <mp_binary_op+0x342>
                                break;
    bf28:	bf00      	nop
                        }
                        lhs_val = ans;
    bf2a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    bf2c:	64bb      	str	r3, [r7, #72]	; 0x48
                    }
                    break;
    bf2e:	e05d      	b.n	bfec <mp_binary_op+0x404>
                                    goto power_overflow;
    bf30:	bf00      	nop
    bf32:	e000      	b.n	bf36 <mp_binary_op+0x34e>
                                goto power_overflow;
    bf34:	bf00      	nop

                power_overflow:
                    // use higher precision
                    lhs = mp_obj_new_int_from_ll(MP_OBJ_SMALL_INT_VALUE(lhs));
    bf36:	68bb      	ldr	r3, [r7, #8]
    bf38:	105b      	asrs	r3, r3, #1
    bf3a:	ea4f 74e3 	mov.w	r4, r3, asr #31
    bf3e:	4618      	mov	r0, r3
    bf40:	4621      	mov	r1, r4
    bf42:	f004 fef9 	bl	10d38 <mp_obj_new_int_from_ll>
    bf46:	60b8      	str	r0, [r7, #8]
                    goto generic_binary_op;
    bf48:	e06f      	b.n	c02a <mp_binary_op+0x442>

                case MP_BINARY_OP_DIVMOD: {
                    if (rhs_val == 0) {
    bf4a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    bf4c:	2b00      	cmp	r3, #0
    bf4e:	f000 80a9 	beq.w	c0a4 <mp_binary_op+0x4bc>
                        goto zero_division;
                    }
                    // to reduce stack usage we don't pass a temp array of the 2 items
                    mp_obj_tuple_t *tuple = MP_OBJ_TO_PTR(mp_obj_new_tuple(2, NULL));
    bf52:	2100      	movs	r1, #0
    bf54:	2002      	movs	r0, #2
    bf56:	f00a f979 	bl	1624c <mp_obj_new_tuple>
    bf5a:	63b8      	str	r0, [r7, #56]	; 0x38
                    tuple->items[0] = MP_OBJ_NEW_SMALL_INT(mp_small_int_floor_divide(lhs_val, rhs_val));
    bf5c:	6c79      	ldr	r1, [r7, #68]	; 0x44
    bf5e:	6cb8      	ldr	r0, [r7, #72]	; 0x48
    bf60:	f010 fd81 	bl	1ca66 <mp_small_int_floor_divide>
    bf64:	4603      	mov	r3, r0
    bf66:	005b      	lsls	r3, r3, #1
    bf68:	f043 0301 	orr.w	r3, r3, #1
    bf6c:	461a      	mov	r2, r3
    bf6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    bf70:	609a      	str	r2, [r3, #8]
                    tuple->items[1] = MP_OBJ_NEW_SMALL_INT(mp_small_int_modulo(lhs_val, rhs_val));
    bf72:	6c79      	ldr	r1, [r7, #68]	; 0x44
    bf74:	6cb8      	ldr	r0, [r7, #72]	; 0x48
    bf76:	f010 fd51 	bl	1ca1c <mp_small_int_modulo>
    bf7a:	4603      	mov	r3, r0
    bf7c:	005b      	lsls	r3, r3, #1
    bf7e:	f043 0301 	orr.w	r3, r3, #1
    bf82:	461a      	mov	r2, r3
    bf84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    bf86:	60da      	str	r2, [r3, #12]
                    return MP_OBJ_FROM_PTR(tuple);
    bf88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    bf8a:	e090      	b.n	c0ae <mp_binary_op+0x4c6>
                }

                case MP_BINARY_OP_LESS: return mp_obj_new_bool(lhs_val < rhs_val);
    bf8c:	6cba      	ldr	r2, [r7, #72]	; 0x48
    bf8e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    bf90:	429a      	cmp	r2, r3
    bf92:	bfb4      	ite	lt
    bf94:	2301      	movlt	r3, #1
    bf96:	2300      	movge	r3, #0
    bf98:	b2db      	uxtb	r3, r3
    bf9a:	4618      	mov	r0, r3
    bf9c:	f7ff fb73 	bl	b686 <mp_obj_new_bool>
    bfa0:	4603      	mov	r3, r0
    bfa2:	e084      	b.n	c0ae <mp_binary_op+0x4c6>
                case MP_BINARY_OP_MORE: return mp_obj_new_bool(lhs_val > rhs_val);
    bfa4:	6cba      	ldr	r2, [r7, #72]	; 0x48
    bfa6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    bfa8:	429a      	cmp	r2, r3
    bfaa:	bfcc      	ite	gt
    bfac:	2301      	movgt	r3, #1
    bfae:	2300      	movle	r3, #0
    bfb0:	b2db      	uxtb	r3, r3
    bfb2:	4618      	mov	r0, r3
    bfb4:	f7ff fb67 	bl	b686 <mp_obj_new_bool>
    bfb8:	4603      	mov	r3, r0
    bfba:	e078      	b.n	c0ae <mp_binary_op+0x4c6>
                case MP_BINARY_OP_LESS_EQUAL: return mp_obj_new_bool(lhs_val <= rhs_val);
    bfbc:	6cba      	ldr	r2, [r7, #72]	; 0x48
    bfbe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    bfc0:	429a      	cmp	r2, r3
    bfc2:	bfd4      	ite	le
    bfc4:	2301      	movle	r3, #1
    bfc6:	2300      	movgt	r3, #0
    bfc8:	b2db      	uxtb	r3, r3
    bfca:	4618      	mov	r0, r3
    bfcc:	f7ff fb5b 	bl	b686 <mp_obj_new_bool>
    bfd0:	4603      	mov	r3, r0
    bfd2:	e06c      	b.n	c0ae <mp_binary_op+0x4c6>
                case MP_BINARY_OP_MORE_EQUAL: return mp_obj_new_bool(lhs_val >= rhs_val);
    bfd4:	6cba      	ldr	r2, [r7, #72]	; 0x48
    bfd6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    bfd8:	429a      	cmp	r2, r3
    bfda:	bfac      	ite	ge
    bfdc:	2301      	movge	r3, #1
    bfde:	2300      	movlt	r3, #0
    bfe0:	b2db      	uxtb	r3, r3
    bfe2:	4618      	mov	r0, r3
    bfe4:	f7ff fb4f 	bl	b686 <mp_obj_new_bool>
    bfe8:	4603      	mov	r3, r0
    bfea:	e060      	b.n	c0ae <mp_binary_op+0x4c6>

                default:
                    goto unsupported_op;
            }
            // This is an inlined version of mp_obj_new_int, for speed
            if (MP_SMALL_INT_FITS(lhs_val)) {
    bfec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    bfee:	005a      	lsls	r2, r3, #1
    bff0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    bff2:	4053      	eors	r3, r2
    bff4:	2b00      	cmp	r3, #0
    bff6:	db04      	blt.n	c002 <mp_binary_op+0x41a>
                return MP_OBJ_NEW_SMALL_INT(lhs_val);
    bff8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    bffa:	005b      	lsls	r3, r3, #1
    bffc:	f043 0301 	orr.w	r3, r3, #1
    c000:	e055      	b.n	c0ae <mp_binary_op+0x4c6>
            } else {
                return mp_obj_new_int_from_ll(lhs_val);
    c002:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    c004:	ea4f 74e3 	mov.w	r4, r3, asr #31
    c008:	4618      	mov	r0, r3
    c00a:	4621      	mov	r1, r4
    c00c:	f004 fe94 	bl	10d38 <mp_obj_new_int_from_ll>
    c010:	4603      	mov	r3, r0
    c012:	e04c      	b.n	c0ae <mp_binary_op+0x4c6>
#endif
        }
    }

    // Convert MP_BINARY_OP_IN to MP_BINARY_OP_CONTAINS with swapped args.
    if (op == MP_BINARY_OP_IN) {
    c014:	68fb      	ldr	r3, [r7, #12]
    c016:	2b06      	cmp	r3, #6
    c018:	d107      	bne.n	c02a <mp_binary_op+0x442>
        op = MP_BINARY_OP_CONTAINS;
    c01a:	2322      	movs	r3, #34	; 0x22
    c01c:	60fb      	str	r3, [r7, #12]
        mp_obj_t temp = lhs;
    c01e:	68bb      	ldr	r3, [r7, #8]
    c020:	637b      	str	r3, [r7, #52]	; 0x34
        lhs = rhs;
    c022:	687b      	ldr	r3, [r7, #4]
    c024:	60bb      	str	r3, [r7, #8]
        rhs = temp;
    c026:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    c028:	607b      	str	r3, [r7, #4]
    }

    // generic binary_op supplied by type
    mp_obj_type_t *type;
generic_binary_op:
    type = mp_obj_get_type(lhs);
    c02a:	68b8      	ldr	r0, [r7, #8]
    c02c:	f001 fe16 	bl	dc5c <mp_obj_get_type>
    c030:	6338      	str	r0, [r7, #48]	; 0x30
    if (type->binary_op != NULL) {
    c032:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    c034:	699b      	ldr	r3, [r3, #24]
    c036:	2b00      	cmp	r3, #0
    c038:	d00b      	beq.n	c052 <mp_binary_op+0x46a>
        mp_obj_t result = type->binary_op(op, lhs, rhs);
    c03a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    c03c:	699b      	ldr	r3, [r3, #24]
    c03e:	687a      	ldr	r2, [r7, #4]
    c040:	68b9      	ldr	r1, [r7, #8]
    c042:	68f8      	ldr	r0, [r7, #12]
    c044:	4798      	blx	r3
    c046:	62f8      	str	r0, [r7, #44]	; 0x2c
        if (result != MP_OBJ_NULL) {
    c048:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c04a:	2b00      	cmp	r3, #0
    c04c:	d001      	beq.n	c052 <mp_binary_op+0x46a>
            return result;
    c04e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c050:	e02d      	b.n	c0ae <mp_binary_op+0x4c6>
        // Convert __rop__ back to __op__ for error message
        op -= MP_BINARY_OP_REVERSE_OR - MP_BINARY_OP_OR;
    }
#endif

    if (op == MP_BINARY_OP_CONTAINS) {
    c052:	68fb      	ldr	r3, [r7, #12]
    c054:	2b22      	cmp	r3, #34	; 0x22
    c056:	d11e      	bne.n	c096 <mp_binary_op+0x4ae>
        // If type didn't support containment then explicitly walk the iterator.
        // mp_getiter will raise the appropriate exception if lhs is not iterable.
        mp_obj_iter_buf_t iter_buf;
        mp_obj_t iter = mp_getiter(lhs, &iter_buf);
    c058:	f107 0314 	add.w	r3, r7, #20
    c05c:	4619      	mov	r1, r3
    c05e:	68b8      	ldr	r0, [r7, #8]
    c060:	f000 fe32 	bl	ccc8 <mp_getiter>
    c064:	62b8      	str	r0, [r7, #40]	; 0x28
        mp_obj_t next;
        while ((next = mp_iternext(iter)) != MP_OBJ_STOP_ITERATION) {
    c066:	e008      	b.n	c07a <mp_binary_op+0x492>
            if (mp_obj_equal(next, rhs)) {
    c068:	6879      	ldr	r1, [r7, #4]
    c06a:	6a78      	ldr	r0, [r7, #36]	; 0x24
    c06c:	f001 ff48 	bl	df00 <mp_obj_equal>
    c070:	4603      	mov	r3, r0
    c072:	2b00      	cmp	r3, #0
    c074:	d001      	beq.n	c07a <mp_binary_op+0x492>
                return mp_const_true;
    c076:	4b10      	ldr	r3, [pc, #64]	; (c0b8 <mp_binary_op+0x4d0>)
    c078:	e019      	b.n	c0ae <mp_binary_op+0x4c6>
        while ((next = mp_iternext(iter)) != MP_OBJ_STOP_ITERATION) {
    c07a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    c07c:	f000 fea6 	bl	cdcc <mp_iternext>
    c080:	6278      	str	r0, [r7, #36]	; 0x24
    c082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    c084:	2b04      	cmp	r3, #4
    c086:	d1ef      	bne.n	c068 <mp_binary_op+0x480>
            }
        }
        return mp_const_false;
    c088:	4b0c      	ldr	r3, [pc, #48]	; (c0bc <mp_binary_op+0x4d4>)
    c08a:	e010      	b.n	c0ae <mp_binary_op+0x4c6>
        goto unsupported_op;
    c08c:	bf00      	nop
    c08e:	e002      	b.n	c096 <mp_binary_op+0x4ae>
                    goto unsupported_op;
    c090:	bf00      	nop
    c092:	e000      	b.n	c096 <mp_binary_op+0x4ae>
                    goto unsupported_op;
    c094:	bf00      	nop
    }

unsupported_op:
    if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
        mp_raise_TypeError("unsupported type for operator");
    c096:	480a      	ldr	r0, [pc, #40]	; (c0c0 <mp_binary_op+0x4d8>)
    c098:	f001 f978 	bl	d38c <mp_raise_TypeError>
                        goto zero_division;
    c09c:	bf00      	nop
    c09e:	e002      	b.n	c0a6 <mp_binary_op+0x4be>
                        goto zero_division;
    c0a0:	bf00      	nop
    c0a2:	e000      	b.n	c0a6 <mp_binary_op+0x4be>
                        goto zero_division;
    c0a4:	bf00      	nop
            "unsupported types for %q: '%s', '%s'",
            mp_binary_op_method_name[op], mp_obj_get_type_str(lhs), mp_obj_get_type_str(rhs)));
    }

zero_division:
    mp_raise_msg(&mp_type_ZeroDivisionError, "divide by zero");
    c0a6:	4907      	ldr	r1, [pc, #28]	; (c0c4 <mp_binary_op+0x4dc>)
    c0a8:	4807      	ldr	r0, [pc, #28]	; (c0c8 <mp_binary_op+0x4e0>)
    c0aa:	f001 f94d 	bl	d348 <mp_raise_msg>
}
    c0ae:	4618      	mov	r0, r3
    c0b0:	3754      	adds	r7, #84	; 0x54
    c0b2:	46bd      	mov	sp, r7
    c0b4:	bd90      	pop	{r4, r7, pc}
    c0b6:	bf00      	nop
    c0b8:	00023868 	.word	0x00023868
    c0bc:	00023860 	.word	0x00023860
    c0c0:	000230e8 	.word	0x000230e8
    c0c4:	0002315c 	.word	0x0002315c
    c0c8:	00023ff0 	.word	0x00023ff0

0000c0cc <mp_call_function_0>:

mp_obj_t mp_call_function_0(mp_obj_t fun) {
    c0cc:	b580      	push	{r7, lr}
    c0ce:	b082      	sub	sp, #8
    c0d0:	af00      	add	r7, sp, #0
    c0d2:	6078      	str	r0, [r7, #4]
    return mp_call_function_n_kw(fun, 0, 0, NULL);
    c0d4:	2300      	movs	r3, #0
    c0d6:	2200      	movs	r2, #0
    c0d8:	2100      	movs	r1, #0
    c0da:	6878      	ldr	r0, [r7, #4]
    c0dc:	f000 f82b 	bl	c136 <mp_call_function_n_kw>
    c0e0:	4603      	mov	r3, r0
}
    c0e2:	4618      	mov	r0, r3
    c0e4:	3708      	adds	r7, #8
    c0e6:	46bd      	mov	sp, r7
    c0e8:	bd80      	pop	{r7, pc}

0000c0ea <mp_call_function_1>:

mp_obj_t mp_call_function_1(mp_obj_t fun, mp_obj_t arg) {
    c0ea:	b580      	push	{r7, lr}
    c0ec:	b082      	sub	sp, #8
    c0ee:	af00      	add	r7, sp, #0
    c0f0:	6078      	str	r0, [r7, #4]
    c0f2:	6039      	str	r1, [r7, #0]
    return mp_call_function_n_kw(fun, 1, 0, &arg);
    c0f4:	463b      	mov	r3, r7
    c0f6:	2200      	movs	r2, #0
    c0f8:	2101      	movs	r1, #1
    c0fa:	6878      	ldr	r0, [r7, #4]
    c0fc:	f000 f81b 	bl	c136 <mp_call_function_n_kw>
    c100:	4603      	mov	r3, r0
}
    c102:	4618      	mov	r0, r3
    c104:	3708      	adds	r7, #8
    c106:	46bd      	mov	sp, r7
    c108:	bd80      	pop	{r7, pc}

0000c10a <mp_call_function_2>:

mp_obj_t mp_call_function_2(mp_obj_t fun, mp_obj_t arg1, mp_obj_t arg2) {
    c10a:	b580      	push	{r7, lr}
    c10c:	b086      	sub	sp, #24
    c10e:	af00      	add	r7, sp, #0
    c110:	60f8      	str	r0, [r7, #12]
    c112:	60b9      	str	r1, [r7, #8]
    c114:	607a      	str	r2, [r7, #4]
    mp_obj_t args[2];
    args[0] = arg1;
    c116:	68bb      	ldr	r3, [r7, #8]
    c118:	613b      	str	r3, [r7, #16]
    args[1] = arg2;
    c11a:	687b      	ldr	r3, [r7, #4]
    c11c:	617b      	str	r3, [r7, #20]
    return mp_call_function_n_kw(fun, 2, 0, args);
    c11e:	f107 0310 	add.w	r3, r7, #16
    c122:	2200      	movs	r2, #0
    c124:	2102      	movs	r1, #2
    c126:	68f8      	ldr	r0, [r7, #12]
    c128:	f000 f805 	bl	c136 <mp_call_function_n_kw>
    c12c:	4603      	mov	r3, r0
}
    c12e:	4618      	mov	r0, r3
    c130:	3718      	adds	r7, #24
    c132:	46bd      	mov	sp, r7
    c134:	bd80      	pop	{r7, pc}

0000c136 <mp_call_function_n_kw>:

// args contains, eg: arg0  arg1  key0  value0  key1  value1
mp_obj_t mp_call_function_n_kw(mp_obj_t fun_in, size_t n_args, size_t n_kw, const mp_obj_t *args) {
    c136:	b590      	push	{r4, r7, lr}
    c138:	b089      	sub	sp, #36	; 0x24
    c13a:	af02      	add	r7, sp, #8
    c13c:	60f8      	str	r0, [r7, #12]
    c13e:	60b9      	str	r1, [r7, #8]
    c140:	607a      	str	r2, [r7, #4]
    c142:	603b      	str	r3, [r7, #0]
    // TODO improve this: fun object can specify its type and we parse here the arguments,
    // passing to the function arrays of fixed and keyword arguments

    DEBUG_OP_printf("calling function %p(n_args=" UINT_FMT ", n_kw=" UINT_FMT ", args=%p)\n", fun_in, n_args, n_kw, args);
    c144:	683b      	ldr	r3, [r7, #0]
    c146:	9300      	str	r3, [sp, #0]
    c148:	687b      	ldr	r3, [r7, #4]
    c14a:	68ba      	ldr	r2, [r7, #8]
    c14c:	68f9      	ldr	r1, [r7, #12]
    c14e:	480d      	ldr	r0, [pc, #52]	; (c184 <mp_call_function_n_kw+0x4e>)
    c150:	f010 fd4c 	bl	1cbec <DEBUG_printf>

    // get the type
    mp_obj_type_t *type = mp_obj_get_type(fun_in);
    c154:	68f8      	ldr	r0, [r7, #12]
    c156:	f001 fd81 	bl	dc5c <mp_obj_get_type>
    c15a:	6178      	str	r0, [r7, #20]

    // do the call
    if (type->call != NULL) {
    c15c:	697b      	ldr	r3, [r7, #20]
    c15e:	691b      	ldr	r3, [r3, #16]
    c160:	2b00      	cmp	r3, #0
    c162:	d008      	beq.n	c176 <mp_call_function_n_kw+0x40>
        return type->call(fun_in, n_args, n_kw, args);
    c164:	697b      	ldr	r3, [r7, #20]
    c166:	691c      	ldr	r4, [r3, #16]
    c168:	683b      	ldr	r3, [r7, #0]
    c16a:	687a      	ldr	r2, [r7, #4]
    c16c:	68b9      	ldr	r1, [r7, #8]
    c16e:	68f8      	ldr	r0, [r7, #12]
    c170:	47a0      	blx	r4
    c172:	4603      	mov	r3, r0
    c174:	e002      	b.n	c17c <mp_call_function_n_kw+0x46>
    }

    if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
        mp_raise_TypeError("object not callable");
    c176:	4804      	ldr	r0, [pc, #16]	; (c188 <mp_call_function_n_kw+0x52>)
    c178:	f001 f908 	bl	d38c <mp_raise_TypeError>
    } else {
        nlr_raise(mp_obj_new_exception_msg_varg(&mp_type_TypeError,
            "'%s' object isn't callable", mp_obj_get_type_str(fun_in)));
    }
}
    c17c:	4618      	mov	r0, r3
    c17e:	371c      	adds	r7, #28
    c180:	46bd      	mov	sp, r7
    c182:	bd90      	pop	{r4, r7, pc}
    c184:	0002316c 	.word	0x0002316c
    c188:	000231a0 	.word	0x000231a0

0000c18c <mp_call_method_n_kw>:

// args contains: fun  self/NULL  arg(0)  ...  arg(n_args-2)  arg(n_args-1)  kw_key(0)  kw_val(0)  ... kw_key(n_kw-1)  kw_val(n_kw-1)
// if n_args==0 and n_kw==0 then there are only fun and self/NULL
mp_obj_t mp_call_method_n_kw(size_t n_args, size_t n_kw, const mp_obj_t *args) {
    c18c:	b580      	push	{r7, lr}
    c18e:	b088      	sub	sp, #32
    c190:	af02      	add	r7, sp, #8
    c192:	60f8      	str	r0, [r7, #12]
    c194:	60b9      	str	r1, [r7, #8]
    c196:	607a      	str	r2, [r7, #4]
    DEBUG_OP_printf("call method (fun=%p, self=%p, n_args=" UINT_FMT ", n_kw=" UINT_FMT ", args=%p)\n", args[0], args[1], n_args, n_kw, args);
    c198:	687b      	ldr	r3, [r7, #4]
    c19a:	6819      	ldr	r1, [r3, #0]
    c19c:	687b      	ldr	r3, [r7, #4]
    c19e:	3304      	adds	r3, #4
    c1a0:	681a      	ldr	r2, [r3, #0]
    c1a2:	687b      	ldr	r3, [r7, #4]
    c1a4:	9301      	str	r3, [sp, #4]
    c1a6:	68bb      	ldr	r3, [r7, #8]
    c1a8:	9300      	str	r3, [sp, #0]
    c1aa:	68fb      	ldr	r3, [r7, #12]
    c1ac:	4810      	ldr	r0, [pc, #64]	; (c1f0 <mp_call_method_n_kw+0x64>)
    c1ae:	f010 fd1d 	bl	1cbec <DEBUG_printf>
    int adjust = (args[1] == MP_OBJ_NULL) ? 0 : 1;
    c1b2:	687b      	ldr	r3, [r7, #4]
    c1b4:	3304      	adds	r3, #4
    c1b6:	681b      	ldr	r3, [r3, #0]
    c1b8:	2b00      	cmp	r3, #0
    c1ba:	bf14      	ite	ne
    c1bc:	2301      	movne	r3, #1
    c1be:	2300      	moveq	r3, #0
    c1c0:	b2db      	uxtb	r3, r3
    c1c2:	617b      	str	r3, [r7, #20]
    return mp_call_function_n_kw(args[0], n_args + adjust, n_kw, args + 2 - adjust);
    c1c4:	687b      	ldr	r3, [r7, #4]
    c1c6:	6818      	ldr	r0, [r3, #0]
    c1c8:	697a      	ldr	r2, [r7, #20]
    c1ca:	68fb      	ldr	r3, [r7, #12]
    c1cc:	18d1      	adds	r1, r2, r3
    c1ce:	697a      	ldr	r2, [r7, #20]
    c1d0:	4613      	mov	r3, r2
    c1d2:	079b      	lsls	r3, r3, #30
    c1d4:	1a9b      	subs	r3, r3, r2
    c1d6:	009b      	lsls	r3, r3, #2
    c1d8:	3308      	adds	r3, #8
    c1da:	687a      	ldr	r2, [r7, #4]
    c1dc:	4413      	add	r3, r2
    c1de:	68ba      	ldr	r2, [r7, #8]
    c1e0:	f7ff ffa9 	bl	c136 <mp_call_function_n_kw>
    c1e4:	4603      	mov	r3, r0
}
    c1e6:	4618      	mov	r0, r3
    c1e8:	3718      	adds	r7, #24
    c1ea:	46bd      	mov	sp, r7
    c1ec:	bd80      	pop	{r7, pc}
    c1ee:	bf00      	nop
    c1f0:	000231b4 	.word	0x000231b4

0000c1f4 <mp_call_prepare_args_n_kw_var>:

// This function only needs to be exposed externally when in stackless mode.
#if !MICROPY_STACKLESS
STATIC
#endif
void mp_call_prepare_args_n_kw_var(bool have_self, size_t n_args_n_kw, const mp_obj_t *args, mp_call_args_t *out_args) {
    c1f4:	b580      	push	{r7, lr}
    c1f6:	b0a6      	sub	sp, #152	; 0x98
    c1f8:	af04      	add	r7, sp, #16
    c1fa:	60b9      	str	r1, [r7, #8]
    c1fc:	607a      	str	r2, [r7, #4]
    c1fe:	603b      	str	r3, [r7, #0]
    c200:	4603      	mov	r3, r0
    c202:	73fb      	strb	r3, [r7, #15]
    mp_obj_t fun = *args++;
    c204:	687b      	ldr	r3, [r7, #4]
    c206:	1d1a      	adds	r2, r3, #4
    c208:	607a      	str	r2, [r7, #4]
    c20a:	681b      	ldr	r3, [r3, #0]
    c20c:	663b      	str	r3, [r7, #96]	; 0x60
    mp_obj_t self = MP_OBJ_NULL;
    c20e:	2300      	movs	r3, #0
    c210:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (have_self) {
    c214:	7bfb      	ldrb	r3, [r7, #15]
    c216:	2b00      	cmp	r3, #0
    c218:	d005      	beq.n	c226 <mp_call_prepare_args_n_kw_var+0x32>
        self = *args++; // may be MP_OBJ_NULL
    c21a:	687b      	ldr	r3, [r7, #4]
    c21c:	1d1a      	adds	r2, r3, #4
    c21e:	607a      	str	r2, [r7, #4]
    c220:	681b      	ldr	r3, [r3, #0]
    c222:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    }
    uint n_args = n_args_n_kw & 0xff;
    c226:	68bb      	ldr	r3, [r7, #8]
    c228:	b2db      	uxtb	r3, r3
    c22a:	65fb      	str	r3, [r7, #92]	; 0x5c
    uint n_kw = (n_args_n_kw >> 8) & 0xff;
    c22c:	68bb      	ldr	r3, [r7, #8]
    c22e:	0a1b      	lsrs	r3, r3, #8
    c230:	b2db      	uxtb	r3, r3
    c232:	65bb      	str	r3, [r7, #88]	; 0x58
    mp_obj_t pos_seq = args[n_args + 2 * n_kw]; // may be MP_OBJ_NULL
    c234:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    c236:	005a      	lsls	r2, r3, #1
    c238:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    c23a:	4413      	add	r3, r2
    c23c:	009b      	lsls	r3, r3, #2
    c23e:	687a      	ldr	r2, [r7, #4]
    c240:	4413      	add	r3, r2
    c242:	681b      	ldr	r3, [r3, #0]
    c244:	657b      	str	r3, [r7, #84]	; 0x54
    mp_obj_t kw_dict = args[n_args + 2 * n_kw + 1]; // may be MP_OBJ_NULL
    c246:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    c248:	005a      	lsls	r2, r3, #1
    c24a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    c24c:	4413      	add	r3, r2
    c24e:	3301      	adds	r3, #1
    c250:	009b      	lsls	r3, r3, #2
    c252:	687a      	ldr	r2, [r7, #4]
    c254:	4413      	add	r3, r2
    c256:	681b      	ldr	r3, [r3, #0]
    c258:	653b      	str	r3, [r7, #80]	; 0x50

    DEBUG_OP_printf("call method var (fun=%p, self=%p, n_args=%u, n_kw=%u, args=%p, seq=%p, dict=%p)\n", fun, self, n_args, n_kw, args, pos_seq, kw_dict);
    c25a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    c25c:	9303      	str	r3, [sp, #12]
    c25e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    c260:	9302      	str	r3, [sp, #8]
    c262:	687b      	ldr	r3, [r7, #4]
    c264:	9301      	str	r3, [sp, #4]
    c266:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    c268:	9300      	str	r3, [sp, #0]
    c26a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    c26c:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
    c270:	6e39      	ldr	r1, [r7, #96]	; 0x60
    c272:	489c      	ldr	r0, [pc, #624]	; (c4e4 <mp_call_prepare_args_n_kw_var+0x2f0>)
    c274:	f010 fcba 	bl	1cbec <DEBUG_printf>
    // TODO: optimize one day to avoid constructing new arg array? Will be hard.

    // The new args array
    mp_obj_t *args2;
    uint args2_alloc;
    uint args2_len = 0;
    c278:	2300      	movs	r3, #0
    c27a:	67bb      	str	r3, [r7, #120]	; 0x78

    // Try to get a hint for the size of the kw_dict
    uint kw_dict_len = 0;
    c27c:	2300      	movs	r3, #0
    c27e:	677b      	str	r3, [r7, #116]	; 0x74
    if (kw_dict != MP_OBJ_NULL && MP_OBJ_IS_TYPE(kw_dict, &mp_type_dict)) {
    c280:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    c282:	2b00      	cmp	r3, #0
    c284:	d00e      	beq.n	c2a4 <mp_call_prepare_args_n_kw_var+0xb0>
    c286:	6d38      	ldr	r0, [r7, #80]	; 0x50
    c288:	f7ff f9ca 	bl	b620 <MP_OBJ_IS_OBJ>
    c28c:	4603      	mov	r3, r0
    c28e:	2b00      	cmp	r3, #0
    c290:	d008      	beq.n	c2a4 <mp_call_prepare_args_n_kw_var+0xb0>
    c292:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    c294:	681b      	ldr	r3, [r3, #0]
    c296:	4a94      	ldr	r2, [pc, #592]	; (c4e8 <mp_call_prepare_args_n_kw_var+0x2f4>)
    c298:	4293      	cmp	r3, r2
    c29a:	d103      	bne.n	c2a4 <mp_call_prepare_args_n_kw_var+0xb0>
        kw_dict_len = mp_obj_dict_len(kw_dict);
    c29c:	6d38      	ldr	r0, [r7, #80]	; 0x50
    c29e:	f003 f98e 	bl	f5be <mp_obj_dict_len>
    c2a2:	6778      	str	r0, [r7, #116]	; 0x74
    }

    // Extract the pos_seq sequence to the new args array.
    // Note that it can be arbitrary iterator.
    if (pos_seq == MP_OBJ_NULL) {
    c2a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    c2a6:	2b00      	cmp	r3, #0
    c2a8:	d12c      	bne.n	c304 <mp_call_prepare_args_n_kw_var+0x110>
        // no sequence

        // allocate memory for the new array of args
        args2_alloc = 1 + n_args + 2 * (n_kw + kw_dict_len);
    c2aa:	6dba      	ldr	r2, [r7, #88]	; 0x58
    c2ac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    c2ae:	4413      	add	r3, r2
    c2b0:	005a      	lsls	r2, r3, #1
    c2b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    c2b4:	4413      	add	r3, r2
    c2b6:	3301      	adds	r3, #1
    c2b8:	67fb      	str	r3, [r7, #124]	; 0x7c
        args2 = mp_nonlocal_alloc(args2_alloc * sizeof(mp_obj_t));
    c2ba:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    c2bc:	009b      	lsls	r3, r3, #2
    c2be:	4618      	mov	r0, r3
    c2c0:	f7ff fa18 	bl	b6f4 <mp_nonlocal_alloc>
    c2c4:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80

        // copy the self
        if (self != MP_OBJ_NULL) {
    c2c8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
    c2cc:	2b00      	cmp	r3, #0
    c2ce:	d009      	beq.n	c2e4 <mp_call_prepare_args_n_kw_var+0xf0>
            args2[args2_len++] = self;
    c2d0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    c2d2:	1c5a      	adds	r2, r3, #1
    c2d4:	67ba      	str	r2, [r7, #120]	; 0x78
    c2d6:	009b      	lsls	r3, r3, #2
    c2d8:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
    c2dc:	4413      	add	r3, r2
    c2de:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
    c2e2:	601a      	str	r2, [r3, #0]
        }

        // copy the fixed pos args
        mp_seq_copy(args2 + args2_len, args, n_args, mp_obj_t);
    c2e4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    c2e6:	009b      	lsls	r3, r3, #2
    c2e8:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
    c2ec:	18d0      	adds	r0, r2, r3
    c2ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    c2f0:	009b      	lsls	r3, r3, #2
    c2f2:	461a      	mov	r2, r3
    c2f4:	6879      	ldr	r1, [r7, #4]
    c2f6:	f012 f91b 	bl	1e530 <memcpy>
        args2_len += n_args;
    c2fa:	6fba      	ldr	r2, [r7, #120]	; 0x78
    c2fc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    c2fe:	4413      	add	r3, r2
    c300:	67bb      	str	r3, [r7, #120]	; 0x78
    c302:	e0b1      	b.n	c468 <mp_call_prepare_args_n_kw_var+0x274>

    } else if (MP_OBJ_IS_TYPE(pos_seq, &mp_type_tuple) || MP_OBJ_IS_TYPE(pos_seq, &mp_type_list)) {
    c304:	6d78      	ldr	r0, [r7, #84]	; 0x54
    c306:	f7ff f98b 	bl	b620 <MP_OBJ_IS_OBJ>
    c30a:	4603      	mov	r3, r0
    c30c:	2b00      	cmp	r3, #0
    c30e:	d004      	beq.n	c31a <mp_call_prepare_args_n_kw_var+0x126>
    c310:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    c312:	681b      	ldr	r3, [r3, #0]
    c314:	4a75      	ldr	r2, [pc, #468]	; (c4ec <mp_call_prepare_args_n_kw_var+0x2f8>)
    c316:	4293      	cmp	r3, r2
    c318:	d00a      	beq.n	c330 <mp_call_prepare_args_n_kw_var+0x13c>
    c31a:	6d78      	ldr	r0, [r7, #84]	; 0x54
    c31c:	f7ff f980 	bl	b620 <MP_OBJ_IS_OBJ>
    c320:	4603      	mov	r3, r0
    c322:	2b00      	cmp	r3, #0
    c324:	d04a      	beq.n	c3bc <mp_call_prepare_args_n_kw_var+0x1c8>
    c326:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    c328:	681b      	ldr	r3, [r3, #0]
    c32a:	4a71      	ldr	r2, [pc, #452]	; (c4f0 <mp_call_prepare_args_n_kw_var+0x2fc>)
    c32c:	4293      	cmp	r3, r2
    c32e:	d145      	bne.n	c3bc <mp_call_prepare_args_n_kw_var+0x1c8>
        // optimise the case of a tuple and list

        // get the items
        size_t len;
        mp_obj_t *items;
        mp_obj_get_array(pos_seq, &len, &items);
    c330:	f107 0230 	add.w	r2, r7, #48	; 0x30
    c334:	f107 0334 	add.w	r3, r7, #52	; 0x34
    c338:	4619      	mov	r1, r3
    c33a:	6d78      	ldr	r0, [r7, #84]	; 0x54
    c33c:	f001 ff0a 	bl	e154 <mp_obj_get_array>

        // allocate memory for the new array of args
        args2_alloc = 1 + n_args + len + 2 * (n_kw + kw_dict_len);
    c340:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    c342:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    c344:	441a      	add	r2, r3
    c346:	6db9      	ldr	r1, [r7, #88]	; 0x58
    c348:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    c34a:	440b      	add	r3, r1
    c34c:	005b      	lsls	r3, r3, #1
    c34e:	4413      	add	r3, r2
    c350:	3301      	adds	r3, #1
    c352:	67fb      	str	r3, [r7, #124]	; 0x7c
        args2 = mp_nonlocal_alloc(args2_alloc * sizeof(mp_obj_t));
    c354:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    c356:	009b      	lsls	r3, r3, #2
    c358:	4618      	mov	r0, r3
    c35a:	f7ff f9cb 	bl	b6f4 <mp_nonlocal_alloc>
    c35e:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80

        // copy the self
        if (self != MP_OBJ_NULL) {
    c362:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
    c366:	2b00      	cmp	r3, #0
    c368:	d009      	beq.n	c37e <mp_call_prepare_args_n_kw_var+0x18a>
            args2[args2_len++] = self;
    c36a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    c36c:	1c5a      	adds	r2, r3, #1
    c36e:	67ba      	str	r2, [r7, #120]	; 0x78
    c370:	009b      	lsls	r3, r3, #2
    c372:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
    c376:	4413      	add	r3, r2
    c378:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
    c37c:	601a      	str	r2, [r3, #0]
        }

        // copy the fixed and variable position args
        mp_seq_cat(args2 + args2_len, args, n_args, items, len, mp_obj_t);
    c37e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    c380:	009b      	lsls	r3, r3, #2
    c382:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
    c386:	18d0      	adds	r0, r2, r3
    c388:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    c38a:	009b      	lsls	r3, r3, #2
    c38c:	461a      	mov	r2, r3
    c38e:	6879      	ldr	r1, [r7, #4]
    c390:	f012 f8ce 	bl	1e530 <memcpy>
    c394:	6fba      	ldr	r2, [r7, #120]	; 0x78
    c396:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    c398:	4413      	add	r3, r2
    c39a:	009b      	lsls	r3, r3, #2
    c39c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
    c3a0:	18d0      	adds	r0, r2, r3
    c3a2:	6b39      	ldr	r1, [r7, #48]	; 0x30
    c3a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    c3a6:	009b      	lsls	r3, r3, #2
    c3a8:	461a      	mov	r2, r3
    c3aa:	f012 f8c1 	bl	1e530 <memcpy>
        args2_len += n_args + len;
    c3ae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    c3b0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    c3b2:	4413      	add	r3, r2
    c3b4:	6fba      	ldr	r2, [r7, #120]	; 0x78
    c3b6:	4413      	add	r3, r2
    c3b8:	67bb      	str	r3, [r7, #120]	; 0x78
    } else if (MP_OBJ_IS_TYPE(pos_seq, &mp_type_tuple) || MP_OBJ_IS_TYPE(pos_seq, &mp_type_list)) {
    c3ba:	e055      	b.n	c468 <mp_call_prepare_args_n_kw_var+0x274>

    } else {
        // generic iterator

        // allocate memory for the new array of args
        args2_alloc = 1 + n_args + 2 * (n_kw + kw_dict_len) + 3;
    c3bc:	6dba      	ldr	r2, [r7, #88]	; 0x58
    c3be:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    c3c0:	4413      	add	r3, r2
    c3c2:	005a      	lsls	r2, r3, #1
    c3c4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    c3c6:	4413      	add	r3, r2
    c3c8:	3304      	adds	r3, #4
    c3ca:	67fb      	str	r3, [r7, #124]	; 0x7c
        args2 = mp_nonlocal_alloc(args2_alloc * sizeof(mp_obj_t));
    c3cc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    c3ce:	009b      	lsls	r3, r3, #2
    c3d0:	4618      	mov	r0, r3
    c3d2:	f7ff f98f 	bl	b6f4 <mp_nonlocal_alloc>
    c3d6:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80

        // copy the self
        if (self != MP_OBJ_NULL) {
    c3da:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
    c3de:	2b00      	cmp	r3, #0
    c3e0:	d009      	beq.n	c3f6 <mp_call_prepare_args_n_kw_var+0x202>
            args2[args2_len++] = self;
    c3e2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    c3e4:	1c5a      	adds	r2, r3, #1
    c3e6:	67ba      	str	r2, [r7, #120]	; 0x78
    c3e8:	009b      	lsls	r3, r3, #2
    c3ea:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
    c3ee:	4413      	add	r3, r2
    c3f0:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
    c3f4:	601a      	str	r2, [r3, #0]
        }

        // copy the fixed position args
        mp_seq_copy(args2 + args2_len, args, n_args, mp_obj_t);
    c3f6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    c3f8:	009b      	lsls	r3, r3, #2
    c3fa:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
    c3fe:	18d0      	adds	r0, r2, r3
    c400:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    c402:	009b      	lsls	r3, r3, #2
    c404:	461a      	mov	r2, r3
    c406:	6879      	ldr	r1, [r7, #4]
    c408:	f012 f892 	bl	1e530 <memcpy>
        args2_len += n_args;
    c40c:	6fba      	ldr	r2, [r7, #120]	; 0x78
    c40e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    c410:	4413      	add	r3, r2
    c412:	67bb      	str	r3, [r7, #120]	; 0x78

        // extract the variable position args from the iterator
        mp_obj_iter_buf_t iter_buf;
        mp_obj_t iterable = mp_getiter(pos_seq, &iter_buf);
    c414:	f107 0320 	add.w	r3, r7, #32
    c418:	4619      	mov	r1, r3
    c41a:	6d78      	ldr	r0, [r7, #84]	; 0x54
    c41c:	f000 fc54 	bl	ccc8 <mp_getiter>
    c420:	64f8      	str	r0, [r7, #76]	; 0x4c
        mp_obj_t item;
        while ((item = mp_iternext(iterable)) != MP_OBJ_STOP_ITERATION) {
    c422:	e01a      	b.n	c45a <mp_call_prepare_args_n_kw_var+0x266>
            if (args2_len >= args2_alloc) {
    c424:	6fba      	ldr	r2, [r7, #120]	; 0x78
    c426:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    c428:	429a      	cmp	r2, r3
    c42a:	d30d      	bcc.n	c448 <mp_call_prepare_args_n_kw_var+0x254>
                args2 = mp_nonlocal_realloc(args2, args2_alloc * sizeof(mp_obj_t), args2_alloc * 2 * sizeof(mp_obj_t));
    c42c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    c42e:	0099      	lsls	r1, r3, #2
    c430:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    c432:	00db      	lsls	r3, r3, #3
    c434:	461a      	mov	r2, r3
    c436:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
    c43a:	f7ff f967 	bl	b70c <mp_nonlocal_realloc>
    c43e:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
                args2_alloc *= 2;
    c442:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    c444:	005b      	lsls	r3, r3, #1
    c446:	67fb      	str	r3, [r7, #124]	; 0x7c
            }
            args2[args2_len++] = item;
    c448:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    c44a:	1c5a      	adds	r2, r3, #1
    c44c:	67ba      	str	r2, [r7, #120]	; 0x78
    c44e:	009b      	lsls	r3, r3, #2
    c450:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
    c454:	4413      	add	r3, r2
    c456:	6cba      	ldr	r2, [r7, #72]	; 0x48
    c458:	601a      	str	r2, [r3, #0]
        while ((item = mp_iternext(iterable)) != MP_OBJ_STOP_ITERATION) {
    c45a:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
    c45c:	f000 fcb6 	bl	cdcc <mp_iternext>
    c460:	64b8      	str	r0, [r7, #72]	; 0x48
    c462:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    c464:	2b04      	cmp	r3, #4
    c466:	d1dd      	bne.n	c424 <mp_call_prepare_args_n_kw_var+0x230>
        }
    }

    // The size of the args2 array now is the number of positional args.
    uint pos_args_len = args2_len;
    c468:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    c46a:	647b      	str	r3, [r7, #68]	; 0x44

    // Copy the fixed kw args.
    mp_seq_copy(args2 + args2_len, args + n_args, 2 * n_kw, mp_obj_t);
    c46c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    c46e:	009b      	lsls	r3, r3, #2
    c470:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
    c474:	18d0      	adds	r0, r2, r3
    c476:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    c478:	009b      	lsls	r3, r3, #2
    c47a:	687a      	ldr	r2, [r7, #4]
    c47c:	18d1      	adds	r1, r2, r3
    c47e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    c480:	00db      	lsls	r3, r3, #3
    c482:	461a      	mov	r2, r3
    c484:	f012 f854 	bl	1e530 <memcpy>
    args2_len += 2 * n_kw;
    c488:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    c48a:	005b      	lsls	r3, r3, #1
    c48c:	6fba      	ldr	r2, [r7, #120]	; 0x78
    c48e:	4413      	add	r3, r2
    c490:	67bb      	str	r3, [r7, #120]	; 0x78

    // Extract (key,value) pairs from kw_dict dictionary and append to args2.
    // Note that it can be arbitrary iterator.
    if (kw_dict == MP_OBJ_NULL) {
    c492:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    c494:	2b00      	cmp	r3, #0
    c496:	f000 80d5 	beq.w	c644 <mp_call_prepare_args_n_kw_var+0x450>
        // pass
    } else if (MP_OBJ_IS_TYPE(kw_dict, &mp_type_dict)) {
    c49a:	6d38      	ldr	r0, [r7, #80]	; 0x50
    c49c:	f7ff f8c0 	bl	b620 <MP_OBJ_IS_OBJ>
    c4a0:	4603      	mov	r3, r0
    c4a2:	2b00      	cmp	r3, #0
    c4a4:	d067      	beq.n	c576 <mp_call_prepare_args_n_kw_var+0x382>
    c4a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    c4a8:	681b      	ldr	r3, [r3, #0]
    c4aa:	4a0f      	ldr	r2, [pc, #60]	; (c4e8 <mp_call_prepare_args_n_kw_var+0x2f4>)
    c4ac:	4293      	cmp	r3, r2
    c4ae:	d162      	bne.n	c576 <mp_call_prepare_args_n_kw_var+0x382>
        // dictionary
        mp_map_t *map = mp_obj_dict_get_map(kw_dict);
    c4b0:	6d38      	ldr	r0, [r7, #80]	; 0x50
    c4b2:	f7ff f8fd 	bl	b6b0 <mp_obj_dict_get_map>
    c4b6:	6438      	str	r0, [r7, #64]	; 0x40
        assert(args2_len + 2 * map->used <= args2_alloc); // should have enough, since kw_dict_len is in this case hinted correctly above
    c4b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    c4ba:	681b      	ldr	r3, [r3, #0]
    c4bc:	f3c3 03dc 	ubfx	r3, r3, #3, #29
    c4c0:	005b      	lsls	r3, r3, #1
    c4c2:	461a      	mov	r2, r3
    c4c4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    c4c6:	441a      	add	r2, r3
    c4c8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    c4ca:	429a      	cmp	r2, r3
    c4cc:	d906      	bls.n	c4dc <mp_call_prepare_args_n_kw_var+0x2e8>
    c4ce:	4b09      	ldr	r3, [pc, #36]	; (c4f4 <mp_call_prepare_args_n_kw_var+0x300>)
    c4d0:	4a09      	ldr	r2, [pc, #36]	; (c4f8 <mp_call_prepare_args_n_kw_var+0x304>)
    c4d2:	f240 21f7 	movw	r1, #759	; 0x2f7
    c4d6:	4809      	ldr	r0, [pc, #36]	; (c4fc <mp_call_prepare_args_n_kw_var+0x308>)
    c4d8:	f010 fd02 	bl	1cee0 <__assert_func>
        for (size_t i = 0; i < map->alloc; i++) {
    c4dc:	2300      	movs	r3, #0
    c4de:	673b      	str	r3, [r7, #112]	; 0x70
    c4e0:	e043      	b.n	c56a <mp_call_prepare_args_n_kw_var+0x376>
    c4e2:	bf00      	nop
    c4e4:	000231f0 	.word	0x000231f0
    c4e8:	00023d0c 	.word	0x00023d0c
    c4ec:	00025a34 	.word	0x00025a34
    c4f0:	00024e44 	.word	0x00024e44
    c4f4:	00023244 	.word	0x00023244
    c4f8:	000234e0 	.word	0x000234e0
    c4fc:	000230bc 	.word	0x000230bc
            if (MP_MAP_SLOT_IS_FILLED(map, i)) {
    c500:	6f39      	ldr	r1, [r7, #112]	; 0x70
    c502:	6c38      	ldr	r0, [r7, #64]	; 0x40
    c504:	f7ff f89e 	bl	b644 <MP_MAP_SLOT_IS_FILLED>
    c508:	4603      	mov	r3, r0
    c50a:	2b00      	cmp	r3, #0
    c50c:	d02a      	beq.n	c564 <mp_call_prepare_args_n_kw_var+0x370>
                // the key must be a qstr, so intern it if it's a string
                mp_obj_t key = map->table[i].key;
    c50e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    c510:	689a      	ldr	r2, [r3, #8]
    c512:	6f3b      	ldr	r3, [r7, #112]	; 0x70
    c514:	00db      	lsls	r3, r3, #3
    c516:	4413      	add	r3, r2
    c518:	681b      	ldr	r3, [r3, #0]
    c51a:	66fb      	str	r3, [r7, #108]	; 0x6c
                if (!MP_OBJ_IS_QSTR(key)) {
    c51c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
    c51e:	f7ff f86d 	bl	b5fc <MP_OBJ_IS_QSTR>
    c522:	4603      	mov	r3, r0
    c524:	f083 0301 	eor.w	r3, r3, #1
    c528:	b2db      	uxtb	r3, r3
    c52a:	2b00      	cmp	r3, #0
    c52c:	d003      	beq.n	c536 <mp_call_prepare_args_n_kw_var+0x342>
                    key = mp_obj_str_intern_checked(key);
    c52e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
    c530:	f009 f9b8 	bl	158a4 <mp_obj_str_intern_checked>
    c534:	66f8      	str	r0, [r7, #108]	; 0x6c
                }
                args2[args2_len++] = key;
    c536:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    c538:	1c5a      	adds	r2, r3, #1
    c53a:	67ba      	str	r2, [r7, #120]	; 0x78
    c53c:	009b      	lsls	r3, r3, #2
    c53e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
    c542:	4413      	add	r3, r2
    c544:	6efa      	ldr	r2, [r7, #108]	; 0x6c
    c546:	601a      	str	r2, [r3, #0]
                args2[args2_len++] = map->table[i].value;
    c548:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    c54a:	1c5a      	adds	r2, r3, #1
    c54c:	67ba      	str	r2, [r7, #120]	; 0x78
    c54e:	009b      	lsls	r3, r3, #2
    c550:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
    c554:	4413      	add	r3, r2
    c556:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    c558:	6891      	ldr	r1, [r2, #8]
    c55a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
    c55c:	00d2      	lsls	r2, r2, #3
    c55e:	440a      	add	r2, r1
    c560:	6852      	ldr	r2, [r2, #4]
    c562:	601a      	str	r2, [r3, #0]
        for (size_t i = 0; i < map->alloc; i++) {
    c564:	6f3b      	ldr	r3, [r7, #112]	; 0x70
    c566:	3301      	adds	r3, #1
    c568:	673b      	str	r3, [r7, #112]	; 0x70
    c56a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    c56c:	685a      	ldr	r2, [r3, #4]
    c56e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
    c570:	429a      	cmp	r2, r3
    c572:	d8c5      	bhi.n	c500 <mp_call_prepare_args_n_kw_var+0x30c>
    } else if (MP_OBJ_IS_TYPE(kw_dict, &mp_type_dict)) {
    c574:	e066      	b.n	c644 <mp_call_prepare_args_n_kw_var+0x450>
        // - call keys() to get an iterable of all keys in the mapping
        // - call __getitem__ for each key to get the corresponding value

        // get the keys iterable
        mp_obj_t dest[3];
        mp_load_method(kw_dict, MP_QSTR_keys, dest);
    c576:	f107 0314 	add.w	r3, r7, #20
    c57a:	461a      	mov	r2, r3
    c57c:	f240 112d 	movw	r1, #301	; 0x12d
    c580:	6d38      	ldr	r0, [r7, #80]	; 0x50
    c582:	f000 fb13 	bl	cbac <mp_load_method>
        mp_obj_t iterable = mp_getiter(mp_call_method_n_kw(0, 0, dest), NULL);
    c586:	f107 0314 	add.w	r3, r7, #20
    c58a:	461a      	mov	r2, r3
    c58c:	2100      	movs	r1, #0
    c58e:	2000      	movs	r0, #0
    c590:	f7ff fdfc 	bl	c18c <mp_call_method_n_kw>
    c594:	4603      	mov	r3, r0
    c596:	2100      	movs	r1, #0
    c598:	4618      	mov	r0, r3
    c59a:	f000 fb95 	bl	ccc8 <mp_getiter>
    c59e:	63f8      	str	r0, [r7, #60]	; 0x3c

        mp_obj_t key;
        while ((key = mp_iternext(iterable)) != MP_OBJ_STOP_ITERATION) {
    c5a0:	e049      	b.n	c636 <mp_call_prepare_args_n_kw_var+0x442>
            // expand size of args array if needed
            if (args2_len + 1 >= args2_alloc) {
    c5a2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    c5a4:	1c5a      	adds	r2, r3, #1
    c5a6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    c5a8:	429a      	cmp	r2, r3
    c5aa:	d314      	bcc.n	c5d6 <mp_call_prepare_args_n_kw_var+0x3e2>
                uint new_alloc = args2_alloc * 2;
    c5ac:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    c5ae:	005b      	lsls	r3, r3, #1
    c5b0:	667b      	str	r3, [r7, #100]	; 0x64
                if (new_alloc < 4) {
    c5b2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    c5b4:	2b03      	cmp	r3, #3
    c5b6:	d801      	bhi.n	c5bc <mp_call_prepare_args_n_kw_var+0x3c8>
                    new_alloc = 4;
    c5b8:	2304      	movs	r3, #4
    c5ba:	667b      	str	r3, [r7, #100]	; 0x64
                }
                args2 = mp_nonlocal_realloc(args2, args2_alloc * sizeof(mp_obj_t), new_alloc * sizeof(mp_obj_t));
    c5bc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    c5be:	0099      	lsls	r1, r3, #2
    c5c0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    c5c2:	009b      	lsls	r3, r3, #2
    c5c4:	461a      	mov	r2, r3
    c5c6:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
    c5ca:	f7ff f89f 	bl	b70c <mp_nonlocal_realloc>
    c5ce:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
                args2_alloc = new_alloc;
    c5d2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    c5d4:	67fb      	str	r3, [r7, #124]	; 0x7c
            }

            // the key must be a qstr, so intern it if it's a string
            if (!MP_OBJ_IS_QSTR(key)) {
    c5d6:	6eb8      	ldr	r0, [r7, #104]	; 0x68
    c5d8:	f7ff f810 	bl	b5fc <MP_OBJ_IS_QSTR>
    c5dc:	4603      	mov	r3, r0
    c5de:	f083 0301 	eor.w	r3, r3, #1
    c5e2:	b2db      	uxtb	r3, r3
    c5e4:	2b00      	cmp	r3, #0
    c5e6:	d003      	beq.n	c5f0 <mp_call_prepare_args_n_kw_var+0x3fc>
                key = mp_obj_str_intern_checked(key);
    c5e8:	6eb8      	ldr	r0, [r7, #104]	; 0x68
    c5ea:	f009 f95b 	bl	158a4 <mp_obj_str_intern_checked>
    c5ee:	66b8      	str	r0, [r7, #104]	; 0x68
            }

            // get the value corresponding to the key
            mp_load_method(kw_dict, MP_QSTR___getitem__, dest);
    c5f0:	f107 0314 	add.w	r3, r7, #20
    c5f4:	461a      	mov	r2, r3
    c5f6:	210e      	movs	r1, #14
    c5f8:	6d38      	ldr	r0, [r7, #80]	; 0x50
    c5fa:	f000 fad7 	bl	cbac <mp_load_method>
            dest[2] = key;
    c5fe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    c600:	61fb      	str	r3, [r7, #28]
            mp_obj_t value = mp_call_method_n_kw(1, 0, dest);
    c602:	f107 0314 	add.w	r3, r7, #20
    c606:	461a      	mov	r2, r3
    c608:	2100      	movs	r1, #0
    c60a:	2001      	movs	r0, #1
    c60c:	f7ff fdbe 	bl	c18c <mp_call_method_n_kw>
    c610:	63b8      	str	r0, [r7, #56]	; 0x38

            // store the key/value pair in the argument array
            args2[args2_len++] = key;
    c612:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    c614:	1c5a      	adds	r2, r3, #1
    c616:	67ba      	str	r2, [r7, #120]	; 0x78
    c618:	009b      	lsls	r3, r3, #2
    c61a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
    c61e:	4413      	add	r3, r2
    c620:	6eba      	ldr	r2, [r7, #104]	; 0x68
    c622:	601a      	str	r2, [r3, #0]
            args2[args2_len++] = value;
    c624:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    c626:	1c5a      	adds	r2, r3, #1
    c628:	67ba      	str	r2, [r7, #120]	; 0x78
    c62a:	009b      	lsls	r3, r3, #2
    c62c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
    c630:	4413      	add	r3, r2
    c632:	6bba      	ldr	r2, [r7, #56]	; 0x38
    c634:	601a      	str	r2, [r3, #0]
        while ((key = mp_iternext(iterable)) != MP_OBJ_STOP_ITERATION) {
    c636:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
    c638:	f000 fbc8 	bl	cdcc <mp_iternext>
    c63c:	66b8      	str	r0, [r7, #104]	; 0x68
    c63e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    c640:	2b04      	cmp	r3, #4
    c642:	d1ae      	bne.n	c5a2 <mp_call_prepare_args_n_kw_var+0x3ae>
        }
    }

    out_args->fun = fun;
    c644:	683b      	ldr	r3, [r7, #0]
    c646:	6e3a      	ldr	r2, [r7, #96]	; 0x60
    c648:	601a      	str	r2, [r3, #0]
    out_args->args = args2;
    c64a:	683b      	ldr	r3, [r7, #0]
    c64c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
    c650:	611a      	str	r2, [r3, #16]
    out_args->n_args = pos_args_len;
    c652:	683b      	ldr	r3, [r7, #0]
    c654:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    c656:	605a      	str	r2, [r3, #4]
    out_args->n_kw = (args2_len - pos_args_len) / 2;
    c658:	6fba      	ldr	r2, [r7, #120]	; 0x78
    c65a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    c65c:	1ad3      	subs	r3, r2, r3
    c65e:	085a      	lsrs	r2, r3, #1
    c660:	683b      	ldr	r3, [r7, #0]
    c662:	609a      	str	r2, [r3, #8]
    out_args->n_alloc = args2_alloc;
    c664:	683b      	ldr	r3, [r7, #0]
    c666:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
    c668:	60da      	str	r2, [r3, #12]
}
    c66a:	bf00      	nop
    c66c:	3788      	adds	r7, #136	; 0x88
    c66e:	46bd      	mov	sp, r7
    c670:	bd80      	pop	{r7, pc}

0000c672 <mp_call_method_n_kw_var>:

mp_obj_t mp_call_method_n_kw_var(bool have_self, size_t n_args_n_kw, const mp_obj_t *args) {
    c672:	b580      	push	{r7, lr}
    c674:	b08a      	sub	sp, #40	; 0x28
    c676:	af00      	add	r7, sp, #0
    c678:	4603      	mov	r3, r0
    c67a:	60b9      	str	r1, [r7, #8]
    c67c:	607a      	str	r2, [r7, #4]
    c67e:	73fb      	strb	r3, [r7, #15]
    mp_call_args_t out_args;
    mp_call_prepare_args_n_kw_var(have_self, n_args_n_kw, args, &out_args);
    c680:	f107 0310 	add.w	r3, r7, #16
    c684:	7bf8      	ldrb	r0, [r7, #15]
    c686:	687a      	ldr	r2, [r7, #4]
    c688:	68b9      	ldr	r1, [r7, #8]
    c68a:	f7ff fdb3 	bl	c1f4 <mp_call_prepare_args_n_kw_var>

    mp_obj_t res = mp_call_function_n_kw(out_args.fun, out_args.n_args, out_args.n_kw, out_args.args);
    c68e:	6938      	ldr	r0, [r7, #16]
    c690:	6979      	ldr	r1, [r7, #20]
    c692:	69ba      	ldr	r2, [r7, #24]
    c694:	6a3b      	ldr	r3, [r7, #32]
    c696:	f7ff fd4e 	bl	c136 <mp_call_function_n_kw>
    c69a:	6278      	str	r0, [r7, #36]	; 0x24
    mp_nonlocal_free(out_args.args, out_args.n_alloc * sizeof(mp_obj_t));
    c69c:	6a3a      	ldr	r2, [r7, #32]
    c69e:	69fb      	ldr	r3, [r7, #28]
    c6a0:	009b      	lsls	r3, r3, #2
    c6a2:	4619      	mov	r1, r3
    c6a4:	4610      	mov	r0, r2
    c6a6:	f7ff f840 	bl	b72a <mp_nonlocal_free>

    return res;
    c6aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
    c6ac:	4618      	mov	r0, r3
    c6ae:	3728      	adds	r7, #40	; 0x28
    c6b0:	46bd      	mov	sp, r7
    c6b2:	bd80      	pop	{r7, pc}

0000c6b4 <mp_unpack_sequence>:

// unpacked items are stored in reverse order into the array pointed to by items
void mp_unpack_sequence(mp_obj_t seq_in, size_t num, mp_obj_t *items) {
    c6b4:	b580      	push	{r7, lr}
    c6b6:	b08e      	sub	sp, #56	; 0x38
    c6b8:	af00      	add	r7, sp, #0
    c6ba:	60f8      	str	r0, [r7, #12]
    c6bc:	60b9      	str	r1, [r7, #8]
    c6be:	607a      	str	r2, [r7, #4]
    size_t seq_len;
    if (MP_OBJ_IS_TYPE(seq_in, &mp_type_tuple) || MP_OBJ_IS_TYPE(seq_in, &mp_type_list)) {
    c6c0:	68f8      	ldr	r0, [r7, #12]
    c6c2:	f7fe ffad 	bl	b620 <MP_OBJ_IS_OBJ>
    c6c6:	4603      	mov	r3, r0
    c6c8:	2b00      	cmp	r3, #0
    c6ca:	d004      	beq.n	c6d6 <mp_unpack_sequence+0x22>
    c6cc:	68fb      	ldr	r3, [r7, #12]
    c6ce:	681b      	ldr	r3, [r3, #0]
    c6d0:	4a38      	ldr	r2, [pc, #224]	; (c7b4 <mp_unpack_sequence+0x100>)
    c6d2:	4293      	cmp	r3, r2
    c6d4:	d00a      	beq.n	c6ec <mp_unpack_sequence+0x38>
    c6d6:	68f8      	ldr	r0, [r7, #12]
    c6d8:	f7fe ffa2 	bl	b620 <MP_OBJ_IS_OBJ>
    c6dc:	4603      	mov	r3, r0
    c6de:	2b00      	cmp	r3, #0
    c6e0:	d02e      	beq.n	c740 <mp_unpack_sequence+0x8c>
    c6e2:	68fb      	ldr	r3, [r7, #12]
    c6e4:	681b      	ldr	r3, [r3, #0]
    c6e6:	4a34      	ldr	r2, [pc, #208]	; (c7b8 <mp_unpack_sequence+0x104>)
    c6e8:	4293      	cmp	r3, r2
    c6ea:	d129      	bne.n	c740 <mp_unpack_sequence+0x8c>
        mp_obj_t *seq_items;
        mp_obj_get_array(seq_in, &seq_len, &seq_items);
    c6ec:	f107 0224 	add.w	r2, r7, #36	; 0x24
    c6f0:	f107 0328 	add.w	r3, r7, #40	; 0x28
    c6f4:	4619      	mov	r1, r3
    c6f6:	68f8      	ldr	r0, [r7, #12]
    c6f8:	f001 fd2c 	bl	e154 <mp_obj_get_array>
        if (seq_len < num) {
    c6fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
    c6fe:	68bb      	ldr	r3, [r7, #8]
    c700:	429a      	cmp	r2, r3
    c702:	d348      	bcc.n	c796 <mp_unpack_sequence+0xe2>
            goto too_short;
        } else if (seq_len > num) {
    c704:	6aba      	ldr	r2, [r7, #40]	; 0x28
    c706:	68bb      	ldr	r3, [r7, #8]
    c708:	429a      	cmp	r2, r3
    c70a:	d84a      	bhi.n	c7a2 <mp_unpack_sequence+0xee>
            goto too_long;
        }
        for (size_t i = 0; i < num; i++) {
    c70c:	2300      	movs	r3, #0
    c70e:	637b      	str	r3, [r7, #52]	; 0x34
    c710:	e011      	b.n	c736 <mp_unpack_sequence+0x82>
            items[i] = seq_items[num - 1 - i];
    c712:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    c714:	009b      	lsls	r3, r3, #2
    c716:	687a      	ldr	r2, [r7, #4]
    c718:	441a      	add	r2, r3
    c71a:	6a79      	ldr	r1, [r7, #36]	; 0x24
    c71c:	68b8      	ldr	r0, [r7, #8]
    c71e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    c720:	1ac3      	subs	r3, r0, r3
    c722:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    c726:	3b01      	subs	r3, #1
    c728:	009b      	lsls	r3, r3, #2
    c72a:	440b      	add	r3, r1
    c72c:	681b      	ldr	r3, [r3, #0]
    c72e:	6013      	str	r3, [r2, #0]
        for (size_t i = 0; i < num; i++) {
    c730:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    c732:	3301      	adds	r3, #1
    c734:	637b      	str	r3, [r7, #52]	; 0x34
    c736:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    c738:	68bb      	ldr	r3, [r7, #8]
    c73a:	429a      	cmp	r2, r3
    c73c:	d3e9      	bcc.n	c712 <mp_unpack_sequence+0x5e>
    if (MP_OBJ_IS_TYPE(seq_in, &mp_type_tuple) || MP_OBJ_IS_TYPE(seq_in, &mp_type_list)) {
    c73e:	e029      	b.n	c794 <mp_unpack_sequence+0xe0>
        }
    } else {
        mp_obj_iter_buf_t iter_buf;
        mp_obj_t iterable = mp_getiter(seq_in, &iter_buf);
    c740:	f107 0314 	add.w	r3, r7, #20
    c744:	4619      	mov	r1, r3
    c746:	68f8      	ldr	r0, [r7, #12]
    c748:	f000 fabe 	bl	ccc8 <mp_getiter>
    c74c:	6338      	str	r0, [r7, #48]	; 0x30

        for (seq_len = 0; seq_len < num; seq_len++) {
    c74e:	2300      	movs	r3, #0
    c750:	62bb      	str	r3, [r7, #40]	; 0x28
    c752:	e014      	b.n	c77e <mp_unpack_sequence+0xca>
            mp_obj_t el = mp_iternext(iterable);
    c754:	6b38      	ldr	r0, [r7, #48]	; 0x30
    c756:	f000 fb39 	bl	cdcc <mp_iternext>
    c75a:	62f8      	str	r0, [r7, #44]	; 0x2c
            if (el == MP_OBJ_STOP_ITERATION) {
    c75c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c75e:	2b04      	cmp	r3, #4
    c760:	d01b      	beq.n	c79a <mp_unpack_sequence+0xe6>
                goto too_short;
            }
            items[num - 1 - seq_len] = el;
    c762:	6abb      	ldr	r3, [r7, #40]	; 0x28
    c764:	68ba      	ldr	r2, [r7, #8]
    c766:	1ad3      	subs	r3, r2, r3
    c768:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    c76c:	3b01      	subs	r3, #1
    c76e:	009b      	lsls	r3, r3, #2
    c770:	687a      	ldr	r2, [r7, #4]
    c772:	4413      	add	r3, r2
    c774:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    c776:	601a      	str	r2, [r3, #0]
        for (seq_len = 0; seq_len < num; seq_len++) {
    c778:	6abb      	ldr	r3, [r7, #40]	; 0x28
    c77a:	3301      	adds	r3, #1
    c77c:	62bb      	str	r3, [r7, #40]	; 0x28
    c77e:	6aba      	ldr	r2, [r7, #40]	; 0x28
    c780:	68bb      	ldr	r3, [r7, #8]
    c782:	429a      	cmp	r2, r3
    c784:	d3e6      	bcc.n	c754 <mp_unpack_sequence+0xa0>
        }
        if (mp_iternext(iterable) != MP_OBJ_STOP_ITERATION) {
    c786:	6b38      	ldr	r0, [r7, #48]	; 0x30
    c788:	f000 fb20 	bl	cdcc <mp_iternext>
    c78c:	4603      	mov	r3, r0
    c78e:	2b04      	cmp	r3, #4
    c790:	d00b      	beq.n	c7aa <mp_unpack_sequence+0xf6>
            goto too_long;
    c792:	e007      	b.n	c7a4 <mp_unpack_sequence+0xf0>
        }
    }
    return;
    c794:	e009      	b.n	c7aa <mp_unpack_sequence+0xf6>
            goto too_short;
    c796:	bf00      	nop
    c798:	e000      	b.n	c79c <mp_unpack_sequence+0xe8>
                goto too_short;
    c79a:	bf00      	nop

too_short:
    if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
        mp_raise_ValueError("wrong number of values to unpack");
    c79c:	4807      	ldr	r0, [pc, #28]	; (c7bc <mp_unpack_sequence+0x108>)
    c79e:	f000 fdea 	bl	d376 <mp_raise_ValueError>
            goto too_long;
    c7a2:	bf00      	nop
        nlr_raise(mp_obj_new_exception_msg_varg(&mp_type_ValueError,
            "need more than %d values to unpack", (int)seq_len));
    }
too_long:
    if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
        mp_raise_ValueError("wrong number of values to unpack");
    c7a4:	4805      	ldr	r0, [pc, #20]	; (c7bc <mp_unpack_sequence+0x108>)
    c7a6:	f000 fde6 	bl	d376 <mp_raise_ValueError>
    return;
    c7aa:	bf00      	nop
    } else {
        nlr_raise(mp_obj_new_exception_msg_varg(&mp_type_ValueError,
            "too many values to unpack (expected %d)", (int)num));
    }
}
    c7ac:	3738      	adds	r7, #56	; 0x38
    c7ae:	46bd      	mov	sp, r7
    c7b0:	bd80      	pop	{r7, pc}
    c7b2:	bf00      	nop
    c7b4:	00025a34 	.word	0x00025a34
    c7b8:	00024e44 	.word	0x00024e44
    c7bc:	00023270 	.word	0x00023270

0000c7c0 <mp_unpack_ex>:

// unpacked items are stored in reverse order into the array pointed to by items
void mp_unpack_ex(mp_obj_t seq_in, size_t num_in, mp_obj_t *items) {
    c7c0:	b590      	push	{r4, r7, lr}
    c7c2:	b08f      	sub	sp, #60	; 0x3c
    c7c4:	af00      	add	r7, sp, #0
    c7c6:	60f8      	str	r0, [r7, #12]
    c7c8:	60b9      	str	r1, [r7, #8]
    c7ca:	607a      	str	r2, [r7, #4]
    size_t num_left = num_in & 0xff;
    c7cc:	68bb      	ldr	r3, [r7, #8]
    c7ce:	b2db      	uxtb	r3, r3
    c7d0:	62bb      	str	r3, [r7, #40]	; 0x28
    size_t num_right = (num_in >> 8) & 0xff;
    c7d2:	68bb      	ldr	r3, [r7, #8]
    c7d4:	0a1b      	lsrs	r3, r3, #8
    c7d6:	b2db      	uxtb	r3, r3
    c7d8:	627b      	str	r3, [r7, #36]	; 0x24
    DEBUG_OP_printf("unpack ex " UINT_FMT " " UINT_FMT "\n", num_left, num_right);
    c7da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    c7dc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
    c7de:	4870      	ldr	r0, [pc, #448]	; (c9a0 <mp_unpack_ex+0x1e0>)
    c7e0:	f010 fa04 	bl	1cbec <DEBUG_printf>
    size_t seq_len;
    if (MP_OBJ_IS_TYPE(seq_in, &mp_type_tuple) || MP_OBJ_IS_TYPE(seq_in, &mp_type_list)) {
    c7e4:	68f8      	ldr	r0, [r7, #12]
    c7e6:	f7fe ff1b 	bl	b620 <MP_OBJ_IS_OBJ>
    c7ea:	4603      	mov	r3, r0
    c7ec:	2b00      	cmp	r3, #0
    c7ee:	d004      	beq.n	c7fa <mp_unpack_ex+0x3a>
    c7f0:	68fb      	ldr	r3, [r7, #12]
    c7f2:	681b      	ldr	r3, [r3, #0]
    c7f4:	4a6b      	ldr	r2, [pc, #428]	; (c9a4 <mp_unpack_ex+0x1e4>)
    c7f6:	4293      	cmp	r3, r2
    c7f8:	d00a      	beq.n	c810 <mp_unpack_ex+0x50>
    c7fa:	68f8      	ldr	r0, [r7, #12]
    c7fc:	f7fe ff10 	bl	b620 <MP_OBJ_IS_OBJ>
    c800:	4603      	mov	r3, r0
    c802:	2b00      	cmp	r3, #0
    c804:	d05b      	beq.n	c8be <mp_unpack_ex+0xfe>
    c806:	68fb      	ldr	r3, [r7, #12]
    c808:	681b      	ldr	r3, [r3, #0]
    c80a:	4a67      	ldr	r2, [pc, #412]	; (c9a8 <mp_unpack_ex+0x1e8>)
    c80c:	4293      	cmp	r3, r2
    c80e:	d156      	bne.n	c8be <mp_unpack_ex+0xfe>
        mp_obj_t *seq_items;
        mp_obj_get_array(seq_in, &seq_len, &seq_items);
    c810:	f107 0210 	add.w	r2, r7, #16
    c814:	f107 0314 	add.w	r3, r7, #20
    c818:	4619      	mov	r1, r3
    c81a:	68f8      	ldr	r0, [r7, #12]
    c81c:	f001 fc9a 	bl	e154 <mp_obj_get_array>
        if (seq_len < num_left + num_right) {
    c820:	6aba      	ldr	r2, [r7, #40]	; 0x28
    c822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    c824:	441a      	add	r2, r3
    c826:	697b      	ldr	r3, [r7, #20]
    c828:	429a      	cmp	r2, r3
    c82a:	f200 80ad 	bhi.w	c988 <mp_unpack_ex+0x1c8>
            goto too_short;
        }
        for (size_t i = 0; i < num_right; i++) {
    c82e:	2300      	movs	r3, #0
    c830:	637b      	str	r3, [r7, #52]	; 0x34
    c832:	e011      	b.n	c858 <mp_unpack_ex+0x98>
            items[i] = seq_items[seq_len - 1 - i];
    c834:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    c836:	009b      	lsls	r3, r3, #2
    c838:	687a      	ldr	r2, [r7, #4]
    c83a:	441a      	add	r2, r3
    c83c:	6939      	ldr	r1, [r7, #16]
    c83e:	6978      	ldr	r0, [r7, #20]
    c840:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    c842:	1ac3      	subs	r3, r0, r3
    c844:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    c848:	3b01      	subs	r3, #1
    c84a:	009b      	lsls	r3, r3, #2
    c84c:	440b      	add	r3, r1
    c84e:	681b      	ldr	r3, [r3, #0]
    c850:	6013      	str	r3, [r2, #0]
        for (size_t i = 0; i < num_right; i++) {
    c852:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    c854:	3301      	adds	r3, #1
    c856:	637b      	str	r3, [r7, #52]	; 0x34
    c858:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    c85a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    c85c:	429a      	cmp	r2, r3
    c85e:	d3e9      	bcc.n	c834 <mp_unpack_ex+0x74>
        }
        items[num_right] = mp_obj_new_list(seq_len - num_left - num_right, seq_items + num_left);
    c860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    c862:	009b      	lsls	r3, r3, #2
    c864:	687a      	ldr	r2, [r7, #4]
    c866:	18d4      	adds	r4, r2, r3
    c868:	697a      	ldr	r2, [r7, #20]
    c86a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    c86c:	1ad2      	subs	r2, r2, r3
    c86e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    c870:	1ad0      	subs	r0, r2, r3
    c872:	693a      	ldr	r2, [r7, #16]
    c874:	6abb      	ldr	r3, [r7, #40]	; 0x28
    c876:	009b      	lsls	r3, r3, #2
    c878:	4413      	add	r3, r2
    c87a:	4619      	mov	r1, r3
    c87c:	f005 fa2d 	bl	11cda <mp_obj_new_list>
    c880:	4603      	mov	r3, r0
    c882:	6023      	str	r3, [r4, #0]
        for (size_t i = 0; i < num_left; i++) {
    c884:	2300      	movs	r3, #0
    c886:	633b      	str	r3, [r7, #48]	; 0x30
    c888:	e014      	b.n	c8b4 <mp_unpack_ex+0xf4>
            items[num_right + 1 + i] = seq_items[num_left - 1 - i];
    c88a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    c88c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    c88e:	4413      	add	r3, r2
    c890:	3301      	adds	r3, #1
    c892:	009b      	lsls	r3, r3, #2
    c894:	687a      	ldr	r2, [r7, #4]
    c896:	441a      	add	r2, r3
    c898:	6939      	ldr	r1, [r7, #16]
    c89a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    c89c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    c89e:	1ac3      	subs	r3, r0, r3
    c8a0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    c8a4:	3b01      	subs	r3, #1
    c8a6:	009b      	lsls	r3, r3, #2
    c8a8:	440b      	add	r3, r1
    c8aa:	681b      	ldr	r3, [r3, #0]
    c8ac:	6013      	str	r3, [r2, #0]
        for (size_t i = 0; i < num_left; i++) {
    c8ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    c8b0:	3301      	adds	r3, #1
    c8b2:	633b      	str	r3, [r7, #48]	; 0x30
    c8b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    c8b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
    c8b8:	429a      	cmp	r2, r3
    c8ba:	d3e6      	bcc.n	c88a <mp_unpack_ex+0xca>
    if (MP_OBJ_IS_TYPE(seq_in, &mp_type_tuple) || MP_OBJ_IS_TYPE(seq_in, &mp_type_list)) {
    c8bc:	e063      	b.n	c986 <mp_unpack_ex+0x1c6>
    } else {
        // Generic iterable; this gets a bit messy: we unpack known left length to the
        // items destination array, then the rest to a dynamically created list.  Once the
        // iterable is exhausted, we take from this list for the right part of the items.
        // TODO Improve to waste less memory in the dynamically created list.
        mp_obj_t iterable = mp_getiter(seq_in, NULL);
    c8be:	2100      	movs	r1, #0
    c8c0:	68f8      	ldr	r0, [r7, #12]
    c8c2:	f000 fa01 	bl	ccc8 <mp_getiter>
    c8c6:	6238      	str	r0, [r7, #32]
        mp_obj_t item;
        for (seq_len = 0; seq_len < num_left; seq_len++) {
    c8c8:	2300      	movs	r3, #0
    c8ca:	617b      	str	r3, [r7, #20]
    c8cc:	e013      	b.n	c8f6 <mp_unpack_ex+0x136>
            item = mp_iternext(iterable);
    c8ce:	6a38      	ldr	r0, [r7, #32]
    c8d0:	f000 fa7c 	bl	cdcc <mp_iternext>
    c8d4:	61f8      	str	r0, [r7, #28]
            if (item == MP_OBJ_STOP_ITERATION) {
    c8d6:	69fb      	ldr	r3, [r7, #28]
    c8d8:	2b04      	cmp	r3, #4
    c8da:	d057      	beq.n	c98c <mp_unpack_ex+0x1cc>
                goto too_short;
            }
            items[num_left + num_right + 1 - 1 - seq_len] = item;
    c8dc:	6aba      	ldr	r2, [r7, #40]	; 0x28
    c8de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    c8e0:	441a      	add	r2, r3
    c8e2:	697b      	ldr	r3, [r7, #20]
    c8e4:	1ad3      	subs	r3, r2, r3
    c8e6:	009b      	lsls	r3, r3, #2
    c8e8:	687a      	ldr	r2, [r7, #4]
    c8ea:	4413      	add	r3, r2
    c8ec:	69fa      	ldr	r2, [r7, #28]
    c8ee:	601a      	str	r2, [r3, #0]
        for (seq_len = 0; seq_len < num_left; seq_len++) {
    c8f0:	697b      	ldr	r3, [r7, #20]
    c8f2:	3301      	adds	r3, #1
    c8f4:	617b      	str	r3, [r7, #20]
    c8f6:	697a      	ldr	r2, [r7, #20]
    c8f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
    c8fa:	429a      	cmp	r2, r3
    c8fc:	d3e7      	bcc.n	c8ce <mp_unpack_ex+0x10e>
        }
        mp_obj_list_t *rest = MP_OBJ_TO_PTR(mp_obj_new_list(0, NULL));
    c8fe:	2100      	movs	r1, #0
    c900:	2000      	movs	r0, #0
    c902:	f005 f9ea 	bl	11cda <mp_obj_new_list>
    c906:	61b8      	str	r0, [r7, #24]
        while ((item = mp_iternext(iterable)) != MP_OBJ_STOP_ITERATION) {
    c908:	e003      	b.n	c912 <mp_unpack_ex+0x152>
            mp_obj_list_append(MP_OBJ_FROM_PTR(rest), item);
    c90a:	69f9      	ldr	r1, [r7, #28]
    c90c:	69b8      	ldr	r0, [r7, #24]
    c90e:	f004 fd78 	bl	11402 <mp_obj_list_append>
        while ((item = mp_iternext(iterable)) != MP_OBJ_STOP_ITERATION) {
    c912:	6a38      	ldr	r0, [r7, #32]
    c914:	f000 fa5a 	bl	cdcc <mp_iternext>
    c918:	61f8      	str	r0, [r7, #28]
    c91a:	69fb      	ldr	r3, [r7, #28]
    c91c:	2b04      	cmp	r3, #4
    c91e:	d1f4      	bne.n	c90a <mp_unpack_ex+0x14a>
        }
        if (rest->len < num_right) {
    c920:	69bb      	ldr	r3, [r7, #24]
    c922:	689a      	ldr	r2, [r3, #8]
    c924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    c926:	429a      	cmp	r2, r3
    c928:	d332      	bcc.n	c990 <mp_unpack_ex+0x1d0>
            goto too_short;
        }
        items[num_right] = MP_OBJ_FROM_PTR(rest);
    c92a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    c92c:	009b      	lsls	r3, r3, #2
    c92e:	687a      	ldr	r2, [r7, #4]
    c930:	4413      	add	r3, r2
    c932:	69ba      	ldr	r2, [r7, #24]
    c934:	601a      	str	r2, [r3, #0]
        for (size_t i = 0; i < num_right; i++) {
    c936:	2300      	movs	r3, #0
    c938:	62fb      	str	r3, [r7, #44]	; 0x2c
    c93a:	e017      	b.n	c96c <mp_unpack_ex+0x1ac>
            items[num_right - 1 - i] = rest->items[rest->len - num_right + i];
    c93c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    c93e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c940:	1ad3      	subs	r3, r2, r3
    c942:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    c946:	3b01      	subs	r3, #1
    c948:	009b      	lsls	r3, r3, #2
    c94a:	687a      	ldr	r2, [r7, #4]
    c94c:	4413      	add	r3, r2
    c94e:	69ba      	ldr	r2, [r7, #24]
    c950:	68d1      	ldr	r1, [r2, #12]
    c952:	69ba      	ldr	r2, [r7, #24]
    c954:	6890      	ldr	r0, [r2, #8]
    c956:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    c958:	1a80      	subs	r0, r0, r2
    c95a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    c95c:	4402      	add	r2, r0
    c95e:	0092      	lsls	r2, r2, #2
    c960:	440a      	add	r2, r1
    c962:	6812      	ldr	r2, [r2, #0]
    c964:	601a      	str	r2, [r3, #0]
        for (size_t i = 0; i < num_right; i++) {
    c966:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c968:	3301      	adds	r3, #1
    c96a:	62fb      	str	r3, [r7, #44]	; 0x2c
    c96c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    c96e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    c970:	429a      	cmp	r2, r3
    c972:	d3e3      	bcc.n	c93c <mp_unpack_ex+0x17c>
        }
        mp_obj_list_set_len(MP_OBJ_FROM_PTR(rest), rest->len - num_right);
    c974:	69bb      	ldr	r3, [r7, #24]
    c976:	689a      	ldr	r2, [r3, #8]
    c978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    c97a:	1ad3      	subs	r3, r2, r3
    c97c:	4619      	mov	r1, r3
    c97e:	69b8      	ldr	r0, [r7, #24]
    c980:	f005 f9e7 	bl	11d52 <mp_obj_list_set_len>
    }
    return;
    c984:	e008      	b.n	c998 <mp_unpack_ex+0x1d8>
    c986:	e007      	b.n	c998 <mp_unpack_ex+0x1d8>
            goto too_short;
    c988:	bf00      	nop
    c98a:	e002      	b.n	c992 <mp_unpack_ex+0x1d2>
                goto too_short;
    c98c:	bf00      	nop
    c98e:	e000      	b.n	c992 <mp_unpack_ex+0x1d2>
            goto too_short;
    c990:	bf00      	nop

too_short:
    if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
        mp_raise_ValueError("wrong number of values to unpack");
    c992:	4806      	ldr	r0, [pc, #24]	; (c9ac <mp_unpack_ex+0x1ec>)
    c994:	f000 fcef 	bl	d376 <mp_raise_ValueError>
    } else {
        nlr_raise(mp_obj_new_exception_msg_varg(&mp_type_ValueError,
            "need more than %d values to unpack", (int)seq_len));
    }
}
    c998:	373c      	adds	r7, #60	; 0x3c
    c99a:	46bd      	mov	sp, r7
    c99c:	bd90      	pop	{r4, r7, pc}
    c99e:	bf00      	nop
    c9a0:	00023294 	.word	0x00023294
    c9a4:	00025a34 	.word	0x00025a34
    c9a8:	00024e44 	.word	0x00024e44
    c9ac:	00023270 	.word	0x00023270

0000c9b0 <mp_load_attr>:

mp_obj_t mp_load_attr(mp_obj_t base, qstr attr) {
    c9b0:	b580      	push	{r7, lr}
    c9b2:	b084      	sub	sp, #16
    c9b4:	af00      	add	r7, sp, #0
    c9b6:	6078      	str	r0, [r7, #4]
    c9b8:	6039      	str	r1, [r7, #0]
    DEBUG_OP_printf("load attr %p.%s\n", base, qstr_str(attr));
    c9ba:	6838      	ldr	r0, [r7, #0]
    c9bc:	f7f4 fd08 	bl	13d0 <qstr_str>
    c9c0:	4603      	mov	r3, r0
    c9c2:	461a      	mov	r2, r3
    c9c4:	6879      	ldr	r1, [r7, #4]
    c9c6:	480d      	ldr	r0, [pc, #52]	; (c9fc <mp_load_attr+0x4c>)
    c9c8:	f010 f910 	bl	1cbec <DEBUG_printf>
    // use load_method
    mp_obj_t dest[2];
    mp_load_method(base, attr, dest);
    c9cc:	f107 0308 	add.w	r3, r7, #8
    c9d0:	461a      	mov	r2, r3
    c9d2:	6839      	ldr	r1, [r7, #0]
    c9d4:	6878      	ldr	r0, [r7, #4]
    c9d6:	f000 f8e9 	bl	cbac <mp_load_method>
    if (dest[1] == MP_OBJ_NULL) {
    c9da:	68fb      	ldr	r3, [r7, #12]
    c9dc:	2b00      	cmp	r3, #0
    c9de:	d101      	bne.n	c9e4 <mp_load_attr+0x34>
        // load_method returned just a normal attribute
        return dest[0];
    c9e0:	68bb      	ldr	r3, [r7, #8]
    c9e2:	e006      	b.n	c9f2 <mp_load_attr+0x42>
    } else {
        // load_method returned a method, so build a bound method object
        return mp_obj_new_bound_meth(dest[0], dest[1]);
    c9e4:	68bb      	ldr	r3, [r7, #8]
    c9e6:	68fa      	ldr	r2, [r7, #12]
    c9e8:	4611      	mov	r1, r2
    c9ea:	4618      	mov	r0, r3
    c9ec:	f001 fe7b 	bl	e6e6 <mp_obj_new_bound_meth>
    c9f0:	4603      	mov	r3, r0
    }
}
    c9f2:	4618      	mov	r0, r3
    c9f4:	3710      	adds	r7, #16
    c9f6:	46bd      	mov	sp, r7
    c9f8:	bd80      	pop	{r7, pc}
    c9fa:	bf00      	nop
    c9fc:	000232a8 	.word	0x000232a8

0000ca00 <mp_convert_member_lookup>:

// Given a member that was extracted from an instance, convert it correctly
// and put the result in the dest[] array for a possible method call.
// Conversion means dealing with static/class methods, callables, and values.
// see http://docs.python.org/3/howto/descriptor.html
void mp_convert_member_lookup(mp_obj_t self, const mp_obj_type_t *type, mp_obj_t member, mp_obj_t *dest) {
    ca00:	b580      	push	{r7, lr}
    ca02:	b084      	sub	sp, #16
    ca04:	af00      	add	r7, sp, #0
    ca06:	60f8      	str	r0, [r7, #12]
    ca08:	60b9      	str	r1, [r7, #8]
    ca0a:	607a      	str	r2, [r7, #4]
    ca0c:	603b      	str	r3, [r7, #0]
    if (MP_OBJ_IS_TYPE(member, &mp_type_staticmethod)) {
    ca0e:	6878      	ldr	r0, [r7, #4]
    ca10:	f7fe fe06 	bl	b620 <MP_OBJ_IS_OBJ>
    ca14:	4603      	mov	r3, r0
    ca16:	2b00      	cmp	r3, #0
    ca18:	d009      	beq.n	ca2e <mp_convert_member_lookup+0x2e>
    ca1a:	687b      	ldr	r3, [r7, #4]
    ca1c:	681b      	ldr	r3, [r3, #0]
    ca1e:	4a2f      	ldr	r2, [pc, #188]	; (cadc <mp_convert_member_lookup+0xdc>)
    ca20:	4293      	cmp	r3, r2
    ca22:	d104      	bne.n	ca2e <mp_convert_member_lookup+0x2e>
        // return just the function
        dest[0] = ((mp_obj_static_class_method_t*)MP_OBJ_TO_PTR(member))->fun;
    ca24:	687b      	ldr	r3, [r7, #4]
    ca26:	685a      	ldr	r2, [r3, #4]
    ca28:	683b      	ldr	r3, [r7, #0]
    ca2a:	601a      	str	r2, [r3, #0]
    ca2c:	e052      	b.n	cad4 <mp_convert_member_lookup+0xd4>
    } else if (MP_OBJ_IS_TYPE(member, &mp_type_classmethod)) {
    ca2e:	6878      	ldr	r0, [r7, #4]
    ca30:	f7fe fdf6 	bl	b620 <MP_OBJ_IS_OBJ>
    ca34:	4603      	mov	r3, r0
    ca36:	2b00      	cmp	r3, #0
    ca38:	d014      	beq.n	ca64 <mp_convert_member_lookup+0x64>
    ca3a:	687b      	ldr	r3, [r7, #4]
    ca3c:	681b      	ldr	r3, [r3, #0]
    ca3e:	4a28      	ldr	r2, [pc, #160]	; (cae0 <mp_convert_member_lookup+0xe0>)
    ca40:	4293      	cmp	r3, r2
    ca42:	d10f      	bne.n	ca64 <mp_convert_member_lookup+0x64>
        // return a bound method, with self being the type of this object
        // this type should be the type of the original instance, not the base
        // type (which is what is passed in the 'type' argument to this function)
        if (self != MP_OBJ_NULL) {
    ca44:	68fb      	ldr	r3, [r7, #12]
    ca46:	2b00      	cmp	r3, #0
    ca48:	d003      	beq.n	ca52 <mp_convert_member_lookup+0x52>
            type = mp_obj_get_type(self);
    ca4a:	68f8      	ldr	r0, [r7, #12]
    ca4c:	f001 f906 	bl	dc5c <mp_obj_get_type>
    ca50:	60b8      	str	r0, [r7, #8]
        }
        dest[0] = ((mp_obj_static_class_method_t*)MP_OBJ_TO_PTR(member))->fun;
    ca52:	687b      	ldr	r3, [r7, #4]
    ca54:	685a      	ldr	r2, [r3, #4]
    ca56:	683b      	ldr	r3, [r7, #0]
    ca58:	601a      	str	r2, [r3, #0]
        dest[1] = MP_OBJ_FROM_PTR(type);
    ca5a:	683b      	ldr	r3, [r7, #0]
    ca5c:	3304      	adds	r3, #4
    ca5e:	68ba      	ldr	r2, [r7, #8]
    ca60:	601a      	str	r2, [r3, #0]
    ca62:	e037      	b.n	cad4 <mp_convert_member_lookup+0xd4>
    } else if (MP_OBJ_IS_TYPE(member, &mp_type_type)) {
    ca64:	6878      	ldr	r0, [r7, #4]
    ca66:	f7fe fddb 	bl	b620 <MP_OBJ_IS_OBJ>
    ca6a:	4603      	mov	r3, r0
    ca6c:	2b00      	cmp	r3, #0
    ca6e:	d008      	beq.n	ca82 <mp_convert_member_lookup+0x82>
    ca70:	687b      	ldr	r3, [r7, #4]
    ca72:	681b      	ldr	r3, [r3, #0]
    ca74:	4a1b      	ldr	r2, [pc, #108]	; (cae4 <mp_convert_member_lookup+0xe4>)
    ca76:	4293      	cmp	r3, r2
    ca78:	d103      	bne.n	ca82 <mp_convert_member_lookup+0x82>
        // Don't try to bind types (even though they're callable)
        dest[0] = member;
    ca7a:	683b      	ldr	r3, [r7, #0]
    ca7c:	687a      	ldr	r2, [r7, #4]
    ca7e:	601a      	str	r2, [r3, #0]
    ca80:	e028      	b.n	cad4 <mp_convert_member_lookup+0xd4>
    } else if (MP_OBJ_IS_FUN(member)
    ca82:	6878      	ldr	r0, [r7, #4]
    ca84:	f7fe fdcc 	bl	b620 <MP_OBJ_IS_OBJ>
    ca88:	4603      	mov	r3, r0
    ca8a:	2b00      	cmp	r3, #0
    ca8c:	d005      	beq.n	ca9a <mp_convert_member_lookup+0x9a>
    ca8e:	687b      	ldr	r3, [r7, #4]
    ca90:	681b      	ldr	r3, [r3, #0]
    ca92:	88db      	ldrh	r3, [r3, #6]
    ca94:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
    ca98:	d011      	beq.n	cabe <mp_convert_member_lookup+0xbe>
        || (MP_OBJ_IS_OBJ(member)
    ca9a:	6878      	ldr	r0, [r7, #4]
    ca9c:	f7fe fdc0 	bl	b620 <MP_OBJ_IS_OBJ>
    caa0:	4603      	mov	r3, r0
    caa2:	2b00      	cmp	r3, #0
    caa4:	d013      	beq.n	cace <mp_convert_member_lookup+0xce>
            && (((mp_obj_base_t*)MP_OBJ_TO_PTR(member))->type->name == MP_QSTR_closure
    caa6:	687b      	ldr	r3, [r7, #4]
    caa8:	681b      	ldr	r3, [r3, #0]
    caaa:	88db      	ldrh	r3, [r3, #6]
    caac:	2bfa      	cmp	r3, #250	; 0xfa
    caae:	d006      	beq.n	cabe <mp_convert_member_lookup+0xbe>
                || ((mp_obj_base_t*)MP_OBJ_TO_PTR(member))->type->name == MP_QSTR_generator))) {
    cab0:	687b      	ldr	r3, [r7, #4]
    cab2:	681b      	ldr	r3, [r3, #0]
    cab4:	88db      	ldrh	r3, [r3, #6]
    cab6:	f240 120f 	movw	r2, #271	; 0x10f
    caba:	4293      	cmp	r3, r2
    cabc:	d107      	bne.n	cace <mp_convert_member_lookup+0xce>
            dest[0] = mp_obj_new_checked_fun(type, member);
        } else
        #endif
        {
            // return a bound method, with self being this object
            dest[0] = member;
    cabe:	683b      	ldr	r3, [r7, #0]
    cac0:	687a      	ldr	r2, [r7, #4]
    cac2:	601a      	str	r2, [r3, #0]
            dest[1] = self;
    cac4:	683b      	ldr	r3, [r7, #0]
    cac6:	3304      	adds	r3, #4
    cac8:	68fa      	ldr	r2, [r7, #12]
    caca:	601a      	str	r2, [r3, #0]
    cacc:	e002      	b.n	cad4 <mp_convert_member_lookup+0xd4>
        }
    } else {
        // class member is a value, so just return that value
        dest[0] = member;
    cace:	683b      	ldr	r3, [r7, #0]
    cad0:	687a      	ldr	r2, [r7, #4]
    cad2:	601a      	str	r2, [r3, #0]
    }
}
    cad4:	bf00      	nop
    cad6:	3710      	adds	r7, #16
    cad8:	46bd      	mov	sp, r7
    cada:	bd80      	pop	{r7, pc}
    cadc:	00026000 	.word	0x00026000
    cae0:	0002603c 	.word	0x0002603c
    cae4:	00025df4 	.word	0x00025df4

0000cae8 <mp_load_method_maybe>:

// no attribute found, returns:     dest[0] == MP_OBJ_NULL, dest[1] == MP_OBJ_NULL
// normal attribute found, returns: dest[0] == <attribute>, dest[1] == MP_OBJ_NULL
// method attribute found, returns: dest[0] == <method>,    dest[1] == <self>
void mp_load_method_maybe(mp_obj_t obj, qstr attr, mp_obj_t *dest) {
    cae8:	b580      	push	{r7, lr}
    caea:	b088      	sub	sp, #32
    caec:	af00      	add	r7, sp, #0
    caee:	60f8      	str	r0, [r7, #12]
    caf0:	60b9      	str	r1, [r7, #8]
    caf2:	607a      	str	r2, [r7, #4]
    // clear output to indicate no attribute/method found yet
    dest[0] = MP_OBJ_NULL;
    caf4:	687b      	ldr	r3, [r7, #4]
    caf6:	2200      	movs	r2, #0
    caf8:	601a      	str	r2, [r3, #0]
    dest[1] = MP_OBJ_NULL;
    cafa:	687b      	ldr	r3, [r7, #4]
    cafc:	3304      	adds	r3, #4
    cafe:	2200      	movs	r2, #0
    cb00:	601a      	str	r2, [r3, #0]

    // get the type
    mp_obj_type_t *type = mp_obj_get_type(obj);
    cb02:	68f8      	ldr	r0, [r7, #12]
    cb04:	f001 f8aa 	bl	dc5c <mp_obj_get_type>
    cb08:	61f8      	str	r0, [r7, #28]
    } else if (attr == MP_QSTR___class__) {
        // a.__class__ is equivalent to type(a)
        dest[0] = MP_OBJ_FROM_PTR(type);
#endif

    } else if (attr == MP_QSTR___next__ && type->iternext != NULL) {
    cb0a:	68bb      	ldr	r3, [r7, #8]
    cb0c:	2b1e      	cmp	r3, #30
    cb0e:	d10b      	bne.n	cb28 <mp_load_method_maybe+0x40>
    cb10:	69fb      	ldr	r3, [r7, #28]
    cb12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    cb14:	2b00      	cmp	r3, #0
    cb16:	d007      	beq.n	cb28 <mp_load_method_maybe+0x40>
        dest[0] = MP_OBJ_FROM_PTR(&mp_builtin_next_obj);
    cb18:	687b      	ldr	r3, [r7, #4]
    cb1a:	4a1f      	ldr	r2, [pc, #124]	; (cb98 <mp_load_method_maybe+0xb0>)
    cb1c:	601a      	str	r2, [r3, #0]
        dest[1] = obj;
    cb1e:	687b      	ldr	r3, [r7, #4]
    cb20:	3304      	adds	r3, #4
    cb22:	68fa      	ldr	r2, [r7, #12]
    cb24:	601a      	str	r2, [r3, #0]
        mp_map_elem_t *elem = mp_map_lookup(locals_map, MP_OBJ_NEW_QSTR(attr), MP_MAP_LOOKUP);
        if (elem != NULL) {
            mp_convert_member_lookup(obj, type, elem->value, dest);
        }
    }
}
    cb26:	e033      	b.n	cb90 <mp_load_method_maybe+0xa8>
    } else if (type->attr != NULL) {
    cb28:	69fb      	ldr	r3, [r7, #28]
    cb2a:	69db      	ldr	r3, [r3, #28]
    cb2c:	2b00      	cmp	r3, #0
    cb2e:	d006      	beq.n	cb3e <mp_load_method_maybe+0x56>
        type->attr(obj, attr, dest);
    cb30:	69fb      	ldr	r3, [r7, #28]
    cb32:	69db      	ldr	r3, [r3, #28]
    cb34:	687a      	ldr	r2, [r7, #4]
    cb36:	68b9      	ldr	r1, [r7, #8]
    cb38:	68f8      	ldr	r0, [r7, #12]
    cb3a:	4798      	blx	r3
}
    cb3c:	e028      	b.n	cb90 <mp_load_method_maybe+0xa8>
    } else if (type->locals_dict != NULL) {
    cb3e:	69fb      	ldr	r3, [r7, #28]
    cb40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    cb42:	2b00      	cmp	r3, #0
    cb44:	d024      	beq.n	cb90 <mp_load_method_maybe+0xa8>
        assert(type->locals_dict->base.type == &mp_type_dict); // MicroPython restriction, for now
    cb46:	69fb      	ldr	r3, [r7, #28]
    cb48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    cb4a:	681b      	ldr	r3, [r3, #0]
    cb4c:	4a13      	ldr	r2, [pc, #76]	; (cb9c <mp_load_method_maybe+0xb4>)
    cb4e:	4293      	cmp	r3, r2
    cb50:	d006      	beq.n	cb60 <mp_load_method_maybe+0x78>
    cb52:	4b13      	ldr	r3, [pc, #76]	; (cba0 <mp_load_method_maybe+0xb8>)
    cb54:	4a13      	ldr	r2, [pc, #76]	; (cba4 <mp_load_method_maybe+0xbc>)
    cb56:	f240 412b 	movw	r1, #1067	; 0x42b
    cb5a:	4813      	ldr	r0, [pc, #76]	; (cba8 <mp_load_method_maybe+0xc0>)
    cb5c:	f010 f9c0 	bl	1cee0 <__assert_func>
        mp_map_t *locals_map = &type->locals_dict->map;
    cb60:	69fb      	ldr	r3, [r7, #28]
    cb62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    cb64:	3304      	adds	r3, #4
    cb66:	61bb      	str	r3, [r7, #24]
        mp_map_elem_t *elem = mp_map_lookup(locals_map, MP_OBJ_NEW_QSTR(attr), MP_MAP_LOOKUP);
    cb68:	68bb      	ldr	r3, [r7, #8]
    cb6a:	009b      	lsls	r3, r3, #2
    cb6c:	f043 0302 	orr.w	r3, r3, #2
    cb70:	2200      	movs	r2, #0
    cb72:	4619      	mov	r1, r3
    cb74:	69b8      	ldr	r0, [r7, #24]
    cb76:	f000 fe8b 	bl	d890 <mp_map_lookup>
    cb7a:	6178      	str	r0, [r7, #20]
        if (elem != NULL) {
    cb7c:	697b      	ldr	r3, [r7, #20]
    cb7e:	2b00      	cmp	r3, #0
    cb80:	d006      	beq.n	cb90 <mp_load_method_maybe+0xa8>
            mp_convert_member_lookup(obj, type, elem->value, dest);
    cb82:	697b      	ldr	r3, [r7, #20]
    cb84:	685a      	ldr	r2, [r3, #4]
    cb86:	687b      	ldr	r3, [r7, #4]
    cb88:	69f9      	ldr	r1, [r7, #28]
    cb8a:	68f8      	ldr	r0, [r7, #12]
    cb8c:	f7ff ff38 	bl	ca00 <mp_convert_member_lookup>
}
    cb90:	bf00      	nop
    cb92:	3720      	adds	r7, #32
    cb94:	46bd      	mov	sp, r7
    cb96:	bd80      	pop	{r7, pc}
    cb98:	0002649c 	.word	0x0002649c
    cb9c:	00023d0c 	.word	0x00023d0c
    cba0:	000232bc 	.word	0x000232bc
    cba4:	00023500 	.word	0x00023500
    cba8:	000230bc 	.word	0x000230bc

0000cbac <mp_load_method>:

void mp_load_method(mp_obj_t base, qstr attr, mp_obj_t *dest) {
    cbac:	b580      	push	{r7, lr}
    cbae:	b084      	sub	sp, #16
    cbb0:	af00      	add	r7, sp, #0
    cbb2:	60f8      	str	r0, [r7, #12]
    cbb4:	60b9      	str	r1, [r7, #8]
    cbb6:	607a      	str	r2, [r7, #4]
    DEBUG_OP_printf("load method %p.%s\n", base, qstr_str(attr));
    cbb8:	68b8      	ldr	r0, [r7, #8]
    cbba:	f7f4 fc09 	bl	13d0 <qstr_str>
    cbbe:	4603      	mov	r3, r0
    cbc0:	461a      	mov	r2, r3
    cbc2:	68f9      	ldr	r1, [r7, #12]
    cbc4:	4809      	ldr	r0, [pc, #36]	; (cbec <mp_load_method+0x40>)
    cbc6:	f010 f811 	bl	1cbec <DEBUG_printf>

    mp_load_method_maybe(base, attr, dest);
    cbca:	687a      	ldr	r2, [r7, #4]
    cbcc:	68b9      	ldr	r1, [r7, #8]
    cbce:	68f8      	ldr	r0, [r7, #12]
    cbd0:	f7ff ff8a 	bl	cae8 <mp_load_method_maybe>

    if (dest[0] == MP_OBJ_NULL) {
    cbd4:	687b      	ldr	r3, [r7, #4]
    cbd6:	681b      	ldr	r3, [r3, #0]
    cbd8:	2b00      	cmp	r3, #0
    cbda:	d103      	bne.n	cbe4 <mp_load_method+0x38>
        // no attribute/method called attr
        if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
            mp_raise_msg(&mp_type_AttributeError, "no such attribute");
    cbdc:	4904      	ldr	r1, [pc, #16]	; (cbf0 <mp_load_method+0x44>)
    cbde:	4805      	ldr	r0, [pc, #20]	; (cbf4 <mp_load_method+0x48>)
    cbe0:	f000 fbb2 	bl	d348 <mp_raise_msg>
                    "'%s' object has no attribute '%q'",
                    mp_obj_get_type_str(base), attr));
            }
        }
    }
}
    cbe4:	bf00      	nop
    cbe6:	3710      	adds	r7, #16
    cbe8:	46bd      	mov	sp, r7
    cbea:	bd80      	pop	{r7, pc}
    cbec:	000232ec 	.word	0x000232ec
    cbf0:	00023300 	.word	0x00023300
    cbf4:	00024068 	.word	0x00024068

0000cbf8 <mp_load_method_protected>:

// Acts like mp_load_method_maybe but catches AttributeError, and all other exceptions if requested
void mp_load_method_protected(mp_obj_t obj, qstr attr, mp_obj_t *dest, bool catch_all_exc) {
    cbf8:	b580      	push	{r7, lr}
    cbfa:	b090      	sub	sp, #64	; 0x40
    cbfc:	af00      	add	r7, sp, #0
    cbfe:	60f8      	str	r0, [r7, #12]
    cc00:	60b9      	str	r1, [r7, #8]
    cc02:	607a      	str	r2, [r7, #4]
    cc04:	70fb      	strb	r3, [r7, #3]
    nlr_buf_t nlr;
    if (nlr_push(&nlr) == 0) {
    cc06:	f107 0310 	add.w	r3, r7, #16
    cc0a:	4618      	mov	r0, r3
    cc0c:	f7f3 fb56 	bl	2bc <nlr_push>
    cc10:	4603      	mov	r3, r0
    cc12:	2b00      	cmp	r3, #0
    cc14:	d107      	bne.n	cc26 <mp_load_method_protected+0x2e>
        mp_load_method_maybe(obj, attr, dest);
    cc16:	687a      	ldr	r2, [r7, #4]
    cc18:	68b9      	ldr	r1, [r7, #8]
    cc1a:	68f8      	ldr	r0, [r7, #12]
    cc1c:	f7ff ff64 	bl	cae8 <mp_load_method_maybe>
        nlr_pop();
    cc20:	f7f3 fb3a 	bl	298 <nlr_pop>
                MP_OBJ_FROM_PTR(&mp_type_AttributeError))) {
            // Re-raise the exception
            nlr_raise(MP_OBJ_FROM_PTR(nlr.ret_val));
        }
    }
}
    cc24:	e015      	b.n	cc52 <mp_load_method_protected+0x5a>
        if (!catch_all_exc
    cc26:	78fb      	ldrb	r3, [r7, #3]
    cc28:	f083 0301 	eor.w	r3, r3, #1
    cc2c:	b2db      	uxtb	r3, r3
    cc2e:	2b00      	cmp	r3, #0
    cc30:	d00f      	beq.n	cc52 <mp_load_method_protected+0x5a>
            && !mp_obj_is_subclass_fast(MP_OBJ_FROM_PTR(((mp_obj_base_t*)nlr.ret_val)->type),
    cc32:	697b      	ldr	r3, [r7, #20]
    cc34:	681b      	ldr	r3, [r3, #0]
    cc36:	4909      	ldr	r1, [pc, #36]	; (cc5c <mp_load_method_protected+0x64>)
    cc38:	4618      	mov	r0, r3
    cc3a:	f00a fe13 	bl	17864 <mp_obj_is_subclass_fast>
    cc3e:	4603      	mov	r3, r0
    cc40:	f083 0301 	eor.w	r3, r3, #1
    cc44:	b2db      	uxtb	r3, r3
    cc46:	2b00      	cmp	r3, #0
    cc48:	d003      	beq.n	cc52 <mp_load_method_protected+0x5a>
            nlr_raise(MP_OBJ_FROM_PTR(nlr.ret_val));
    cc4a:	697b      	ldr	r3, [r7, #20]
    cc4c:	4618      	mov	r0, r3
    cc4e:	f7f3 fb47 	bl	2e0 <nlr_jump>
}
    cc52:	bf00      	nop
    cc54:	3740      	adds	r7, #64	; 0x40
    cc56:	46bd      	mov	sp, r7
    cc58:	bd80      	pop	{r7, pc}
    cc5a:	bf00      	nop
    cc5c:	00024068 	.word	0x00024068

0000cc60 <mp_store_attr>:

void mp_store_attr(mp_obj_t base, qstr attr, mp_obj_t value) {
    cc60:	b580      	push	{r7, lr}
    cc62:	b088      	sub	sp, #32
    cc64:	af00      	add	r7, sp, #0
    cc66:	60f8      	str	r0, [r7, #12]
    cc68:	60b9      	str	r1, [r7, #8]
    cc6a:	607a      	str	r2, [r7, #4]
    DEBUG_OP_printf("store attr %p.%s <- %p\n", base, qstr_str(attr), value);
    cc6c:	68b8      	ldr	r0, [r7, #8]
    cc6e:	f7f4 fbaf 	bl	13d0 <qstr_str>
    cc72:	4602      	mov	r2, r0
    cc74:	687b      	ldr	r3, [r7, #4]
    cc76:	68f9      	ldr	r1, [r7, #12]
    cc78:	4810      	ldr	r0, [pc, #64]	; (ccbc <mp_store_attr+0x5c>)
    cc7a:	f00f ffb7 	bl	1cbec <DEBUG_printf>
    mp_obj_type_t *type = mp_obj_get_type(base);
    cc7e:	68f8      	ldr	r0, [r7, #12]
    cc80:	f000 ffec 	bl	dc5c <mp_obj_get_type>
    cc84:	61f8      	str	r0, [r7, #28]
    if (type->attr != NULL) {
    cc86:	69fb      	ldr	r3, [r7, #28]
    cc88:	69db      	ldr	r3, [r3, #28]
    cc8a:	2b00      	cmp	r3, #0
    cc8c:	d00d      	beq.n	ccaa <mp_store_attr+0x4a>
        mp_obj_t dest[2] = {MP_OBJ_SENTINEL, value};
    cc8e:	2308      	movs	r3, #8
    cc90:	617b      	str	r3, [r7, #20]
    cc92:	687b      	ldr	r3, [r7, #4]
    cc94:	61bb      	str	r3, [r7, #24]
        type->attr(base, attr, dest);
    cc96:	69fb      	ldr	r3, [r7, #28]
    cc98:	69db      	ldr	r3, [r3, #28]
    cc9a:	f107 0214 	add.w	r2, r7, #20
    cc9e:	68b9      	ldr	r1, [r7, #8]
    cca0:	68f8      	ldr	r0, [r7, #12]
    cca2:	4798      	blx	r3
        if (dest[0] == MP_OBJ_NULL) {
    cca4:	697b      	ldr	r3, [r7, #20]
    cca6:	2b00      	cmp	r3, #0
    cca8:	d003      	beq.n	ccb2 <mp_store_attr+0x52>
            // success
            return;
        }
    }
    if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
        mp_raise_msg(&mp_type_AttributeError, "no such attribute");
    ccaa:	4905      	ldr	r1, [pc, #20]	; (ccc0 <mp_store_attr+0x60>)
    ccac:	4805      	ldr	r0, [pc, #20]	; (ccc4 <mp_store_attr+0x64>)
    ccae:	f000 fb4b 	bl	d348 <mp_raise_msg>
            return;
    ccb2:	bf00      	nop
    } else {
        nlr_raise(mp_obj_new_exception_msg_varg(&mp_type_AttributeError,
            "'%s' object has no attribute '%q'",
            mp_obj_get_type_str(base), attr));
    }
}
    ccb4:	3720      	adds	r7, #32
    ccb6:	46bd      	mov	sp, r7
    ccb8:	bd80      	pop	{r7, pc}
    ccba:	bf00      	nop
    ccbc:	00023314 	.word	0x00023314
    ccc0:	00023300 	.word	0x00023300
    ccc4:	00024068 	.word	0x00024068

0000ccc8 <mp_getiter>:

mp_obj_t mp_getiter(mp_obj_t o_in, mp_obj_iter_buf_t *iter_buf) {
    ccc8:	b580      	push	{r7, lr}
    ccca:	b086      	sub	sp, #24
    cccc:	af00      	add	r7, sp, #0
    ccce:	6078      	str	r0, [r7, #4]
    ccd0:	6039      	str	r1, [r7, #0]
    assert(o_in);
    ccd2:	687b      	ldr	r3, [r7, #4]
    ccd4:	2b00      	cmp	r3, #0
    ccd6:	d106      	bne.n	cce6 <mp_getiter+0x1e>
    ccd8:	4b20      	ldr	r3, [pc, #128]	; (cd5c <mp_getiter+0x94>)
    ccda:	4a21      	ldr	r2, [pc, #132]	; (cd60 <mp_getiter+0x98>)
    ccdc:	f240 4171 	movw	r1, #1137	; 0x471
    cce0:	4820      	ldr	r0, [pc, #128]	; (cd64 <mp_getiter+0x9c>)
    cce2:	f010 f8fd 	bl	1cee0 <__assert_func>
    mp_obj_type_t *type = mp_obj_get_type(o_in);
    cce6:	6878      	ldr	r0, [r7, #4]
    cce8:	f000 ffb8 	bl	dc5c <mp_obj_get_type>
    ccec:	6178      	str	r0, [r7, #20]

    // Check for native getiter which is the identity.  We handle this case explicitly
    // so we don't unnecessarily allocate any RAM for the iter_buf, which won't be used.
    if (type->getiter == mp_identity_getiter) {
    ccee:	697b      	ldr	r3, [r7, #20]
    ccf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    ccf2:	4a1d      	ldr	r2, [pc, #116]	; (cd68 <mp_getiter+0xa0>)
    ccf4:	4293      	cmp	r3, r2
    ccf6:	d101      	bne.n	ccfc <mp_getiter+0x34>
        return o_in;
    ccf8:	687b      	ldr	r3, [r7, #4]
    ccfa:	e02a      	b.n	cd52 <mp_getiter+0x8a>
    }

    // if caller did not provide a buffer then allocate one on the heap
    if (iter_buf == NULL) {
    ccfc:	683b      	ldr	r3, [r7, #0]
    ccfe:	2b00      	cmp	r3, #0
    cd00:	d103      	bne.n	cd0a <mp_getiter+0x42>
        iter_buf = m_new_obj(mp_obj_iter_buf_t);
    cd02:	2010      	movs	r0, #16
    cd04:	f7f3 fb0a 	bl	31c <m_malloc>
    cd08:	6038      	str	r0, [r7, #0]
    }

    // check for native getiter (corresponds to __iter__)
    if (type->getiter != NULL) {
    cd0a:	697b      	ldr	r3, [r7, #20]
    cd0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    cd0e:	2b00      	cmp	r3, #0
    cd10:	d00a      	beq.n	cd28 <mp_getiter+0x60>
        mp_obj_t iter = type->getiter(o_in, iter_buf);
    cd12:	697b      	ldr	r3, [r7, #20]
    cd14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    cd16:	6839      	ldr	r1, [r7, #0]
    cd18:	6878      	ldr	r0, [r7, #4]
    cd1a:	4798      	blx	r3
    cd1c:	6138      	str	r0, [r7, #16]
        if (iter != MP_OBJ_NULL) {
    cd1e:	693b      	ldr	r3, [r7, #16]
    cd20:	2b00      	cmp	r3, #0
    cd22:	d001      	beq.n	cd28 <mp_getiter+0x60>
            return iter;
    cd24:	693b      	ldr	r3, [r7, #16]
    cd26:	e014      	b.n	cd52 <mp_getiter+0x8a>
        }
    }

    // check for __getitem__
    mp_obj_t dest[2];
    mp_load_method_maybe(o_in, MP_QSTR___getitem__, dest);
    cd28:	f107 0308 	add.w	r3, r7, #8
    cd2c:	461a      	mov	r2, r3
    cd2e:	210e      	movs	r1, #14
    cd30:	6878      	ldr	r0, [r7, #4]
    cd32:	f7ff fed9 	bl	cae8 <mp_load_method_maybe>
    if (dest[0] != MP_OBJ_NULL) {
    cd36:	68bb      	ldr	r3, [r7, #8]
    cd38:	2b00      	cmp	r3, #0
    cd3a:	d007      	beq.n	cd4c <mp_getiter+0x84>
        // __getitem__ exists, create and return an iterator
        return mp_obj_new_getitem_iter(dest, iter_buf);
    cd3c:	f107 0308 	add.w	r3, r7, #8
    cd40:	6839      	ldr	r1, [r7, #0]
    cd42:	4618      	mov	r0, r3
    cd44:	f003 fd8c 	bl	10860 <mp_obj_new_getitem_iter>
    cd48:	4603      	mov	r3, r0
    cd4a:	e002      	b.n	cd52 <mp_getiter+0x8a>
    }

    // object not iterable
    if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
        mp_raise_TypeError("object not iterable");
    cd4c:	4807      	ldr	r0, [pc, #28]	; (cd6c <mp_getiter+0xa4>)
    cd4e:	f000 fb1d 	bl	d38c <mp_raise_TypeError>
    } else {
        nlr_raise(mp_obj_new_exception_msg_varg(&mp_type_TypeError,
            "'%s' object isn't iterable", mp_obj_get_type_str(o_in)));
    }
}
    cd52:	4618      	mov	r0, r3
    cd54:	3718      	adds	r7, #24
    cd56:	46bd      	mov	sp, r7
    cd58:	bd80      	pop	{r7, pc}
    cd5a:	bf00      	nop
    cd5c:	0002332c 	.word	0x0002332c
    cd60:	00023518 	.word	0x00023518
    cd64:	000230bc 	.word	0x000230bc
    cd68:	0000e423 	.word	0x0000e423
    cd6c:	00023334 	.word	0x00023334

0000cd70 <mp_iternext_allow_raise>:

// may return MP_OBJ_STOP_ITERATION as an optimisation instead of raise StopIteration()
// may also raise StopIteration()
mp_obj_t mp_iternext_allow_raise(mp_obj_t o_in) {
    cd70:	b580      	push	{r7, lr}
    cd72:	b086      	sub	sp, #24
    cd74:	af00      	add	r7, sp, #0
    cd76:	6078      	str	r0, [r7, #4]
    mp_obj_type_t *type = mp_obj_get_type(o_in);
    cd78:	6878      	ldr	r0, [r7, #4]
    cd7a:	f000 ff6f 	bl	dc5c <mp_obj_get_type>
    cd7e:	6178      	str	r0, [r7, #20]
    if (type->iternext != NULL) {
    cd80:	697b      	ldr	r3, [r7, #20]
    cd82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    cd84:	2b00      	cmp	r3, #0
    cd86:	d005      	beq.n	cd94 <mp_iternext_allow_raise+0x24>
        return type->iternext(o_in);
    cd88:	697b      	ldr	r3, [r7, #20]
    cd8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    cd8c:	6878      	ldr	r0, [r7, #4]
    cd8e:	4798      	blx	r3
    cd90:	4603      	mov	r3, r0
    cd92:	e015      	b.n	cdc0 <mp_iternext_allow_raise+0x50>
    } else {
        // check for __next__ method
        mp_obj_t dest[2];
        mp_load_method_maybe(o_in, MP_QSTR___next__, dest);
    cd94:	f107 030c 	add.w	r3, r7, #12
    cd98:	461a      	mov	r2, r3
    cd9a:	211e      	movs	r1, #30
    cd9c:	6878      	ldr	r0, [r7, #4]
    cd9e:	f7ff fea3 	bl	cae8 <mp_load_method_maybe>
        if (dest[0] != MP_OBJ_NULL) {
    cda2:	68fb      	ldr	r3, [r7, #12]
    cda4:	2b00      	cmp	r3, #0
    cda6:	d008      	beq.n	cdba <mp_iternext_allow_raise+0x4a>
            // __next__ exists, call it and return its result
            return mp_call_method_n_kw(0, 0, dest);
    cda8:	f107 030c 	add.w	r3, r7, #12
    cdac:	461a      	mov	r2, r3
    cdae:	2100      	movs	r1, #0
    cdb0:	2000      	movs	r0, #0
    cdb2:	f7ff f9eb 	bl	c18c <mp_call_method_n_kw>
    cdb6:	4603      	mov	r3, r0
    cdb8:	e002      	b.n	cdc0 <mp_iternext_allow_raise+0x50>
        } else {
            if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
                mp_raise_TypeError("object not an iterator");
    cdba:	4803      	ldr	r0, [pc, #12]	; (cdc8 <mp_iternext_allow_raise+0x58>)
    cdbc:	f000 fae6 	bl	d38c <mp_raise_TypeError>
                nlr_raise(mp_obj_new_exception_msg_varg(&mp_type_TypeError,
                    "'%s' object isn't an iterator", mp_obj_get_type_str(o_in)));
            }
        }
    }
}
    cdc0:	4618      	mov	r0, r3
    cdc2:	3718      	adds	r7, #24
    cdc4:	46bd      	mov	sp, r7
    cdc6:	bd80      	pop	{r7, pc}
    cdc8:	00023348 	.word	0x00023348

0000cdcc <mp_iternext>:

// will always return MP_OBJ_STOP_ITERATION instead of raising StopIteration() (or any subclass thereof)
// may raise other exceptions
mp_obj_t mp_iternext(mp_obj_t o_in) {
    cdcc:	b580      	push	{r7, lr}
    cdce:	b092      	sub	sp, #72	; 0x48
    cdd0:	af00      	add	r7, sp, #0
    cdd2:	6078      	str	r0, [r7, #4]
    MP_STACK_CHECK(); // enumerate, filter, map and zip can recursively call mp_iternext
    mp_obj_type_t *type = mp_obj_get_type(o_in);
    cdd4:	6878      	ldr	r0, [r7, #4]
    cdd6:	f000 ff41 	bl	dc5c <mp_obj_get_type>
    cdda:	6478      	str	r0, [r7, #68]	; 0x44
    if (type->iternext != NULL) {
    cddc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    cdde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    cde0:	2b00      	cmp	r3, #0
    cde2:	d005      	beq.n	cdf0 <mp_iternext+0x24>
        return type->iternext(o_in);
    cde4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    cde6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    cde8:	6878      	ldr	r0, [r7, #4]
    cdea:	4798      	blx	r3
    cdec:	4603      	mov	r3, r0
    cdee:	e02f      	b.n	ce50 <mp_iternext+0x84>
    } else {
        // check for __next__ method
        mp_obj_t dest[2];
        mp_load_method_maybe(o_in, MP_QSTR___next__, dest);
    cdf0:	f107 0338 	add.w	r3, r7, #56	; 0x38
    cdf4:	461a      	mov	r2, r3
    cdf6:	211e      	movs	r1, #30
    cdf8:	6878      	ldr	r0, [r7, #4]
    cdfa:	f7ff fe75 	bl	cae8 <mp_load_method_maybe>
        if (dest[0] != MP_OBJ_NULL) {
    cdfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    ce00:	2b00      	cmp	r3, #0
    ce02:	d022      	beq.n	ce4a <mp_iternext+0x7e>
            // __next__ exists, call it and return its result
            nlr_buf_t nlr;
            if (nlr_push(&nlr) == 0) {
    ce04:	f107 0308 	add.w	r3, r7, #8
    ce08:	4618      	mov	r0, r3
    ce0a:	f7f3 fa57 	bl	2bc <nlr_push>
    ce0e:	4603      	mov	r3, r0
    ce10:	2b00      	cmp	r3, #0
    ce12:	d10b      	bne.n	ce2c <mp_iternext+0x60>
                mp_obj_t ret = mp_call_method_n_kw(0, 0, dest);
    ce14:	f107 0338 	add.w	r3, r7, #56	; 0x38
    ce18:	461a      	mov	r2, r3
    ce1a:	2100      	movs	r1, #0
    ce1c:	2000      	movs	r0, #0
    ce1e:	f7ff f9b5 	bl	c18c <mp_call_method_n_kw>
    ce22:	6438      	str	r0, [r7, #64]	; 0x40
                nlr_pop();
    ce24:	f7f3 fa38 	bl	298 <nlr_pop>
                return ret;
    ce28:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    ce2a:	e011      	b.n	ce50 <mp_iternext+0x84>
            } else {
                if (mp_obj_is_subclass_fast(MP_OBJ_FROM_PTR(((mp_obj_base_t*)nlr.ret_val)->type), MP_OBJ_FROM_PTR(&mp_type_StopIteration))) {
    ce2c:	68fb      	ldr	r3, [r7, #12]
    ce2e:	681b      	ldr	r3, [r3, #0]
    ce30:	4909      	ldr	r1, [pc, #36]	; (ce58 <mp_iternext+0x8c>)
    ce32:	4618      	mov	r0, r3
    ce34:	f00a fd16 	bl	17864 <mp_obj_is_subclass_fast>
    ce38:	4603      	mov	r3, r0
    ce3a:	2b00      	cmp	r3, #0
    ce3c:	d001      	beq.n	ce42 <mp_iternext+0x76>
                    return MP_OBJ_STOP_ITERATION;
    ce3e:	2304      	movs	r3, #4
    ce40:	e006      	b.n	ce50 <mp_iternext+0x84>
                } else {
                    nlr_jump(nlr.ret_val);
    ce42:	68fb      	ldr	r3, [r7, #12]
    ce44:	4618      	mov	r0, r3
    ce46:	f7f3 fa4b 	bl	2e0 <nlr_jump>
                }
            }
        } else {
            if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
                mp_raise_TypeError("object not an iterator");
    ce4a:	4804      	ldr	r0, [pc, #16]	; (ce5c <mp_iternext+0x90>)
    ce4c:	f000 fa9e 	bl	d38c <mp_raise_TypeError>
                nlr_raise(mp_obj_new_exception_msg_varg(&mp_type_TypeError,
                    "'%s' object isn't an iterator", mp_obj_get_type_str(o_in)));
            }
        }
    }
}
    ce50:	4618      	mov	r0, r3
    ce52:	3748      	adds	r7, #72	; 0x48
    ce54:	46bd      	mov	sp, r7
    ce56:	bd80      	pop	{r7, pc}
    ce58:	00023f3c 	.word	0x00023f3c
    ce5c:	00023348 	.word	0x00023348

0000ce60 <mp_resume>:

// TODO: Unclear what to do with StopIterarion exception here.
mp_vm_return_kind_t mp_resume(mp_obj_t self_in, mp_obj_t send_value, mp_obj_t throw_value, mp_obj_t *ret_val) {
    ce60:	b580      	push	{r7, lr}
    ce62:	b08a      	sub	sp, #40	; 0x28
    ce64:	af00      	add	r7, sp, #0
    ce66:	60f8      	str	r0, [r7, #12]
    ce68:	60b9      	str	r1, [r7, #8]
    ce6a:	607a      	str	r2, [r7, #4]
    ce6c:	603b      	str	r3, [r7, #0]
    assert((send_value != MP_OBJ_NULL) ^ (throw_value != MP_OBJ_NULL));
    ce6e:	68bb      	ldr	r3, [r7, #8]
    ce70:	2b00      	cmp	r3, #0
    ce72:	bf14      	ite	ne
    ce74:	2301      	movne	r3, #1
    ce76:	2300      	moveq	r3, #0
    ce78:	b2da      	uxtb	r2, r3
    ce7a:	687b      	ldr	r3, [r7, #4]
    ce7c:	2b00      	cmp	r3, #0
    ce7e:	bf14      	ite	ne
    ce80:	2301      	movne	r3, #1
    ce82:	2300      	moveq	r3, #0
    ce84:	b2db      	uxtb	r3, r3
    ce86:	4053      	eors	r3, r2
    ce88:	b2db      	uxtb	r3, r3
    ce8a:	2b00      	cmp	r3, #0
    ce8c:	d106      	bne.n	ce9c <mp_resume+0x3c>
    ce8e:	4b58      	ldr	r3, [pc, #352]	; (cff0 <mp_resume+0x190>)
    ce90:	4a58      	ldr	r2, [pc, #352]	; (cff4 <mp_resume+0x194>)
    ce92:	f240 41d6 	movw	r1, #1238	; 0x4d6
    ce96:	4858      	ldr	r0, [pc, #352]	; (cff8 <mp_resume+0x198>)
    ce98:	f010 f822 	bl	1cee0 <__assert_func>
    mp_obj_type_t *type = mp_obj_get_type(self_in);
    ce9c:	68f8      	ldr	r0, [r7, #12]
    ce9e:	f000 fedd 	bl	dc5c <mp_obj_get_type>
    cea2:	6278      	str	r0, [r7, #36]	; 0x24

    if (type == &mp_type_gen_instance) {
    cea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    cea6:	4a55      	ldr	r2, [pc, #340]	; (cffc <mp_resume+0x19c>)
    cea8:	4293      	cmp	r3, r2
    ceaa:	d107      	bne.n	cebc <mp_resume+0x5c>
        return mp_obj_gen_resume(self_in, send_value, throw_value, ret_val);
    ceac:	683b      	ldr	r3, [r7, #0]
    ceae:	687a      	ldr	r2, [r7, #4]
    ceb0:	68b9      	ldr	r1, [r7, #8]
    ceb2:	68f8      	ldr	r0, [r7, #12]
    ceb4:	f003 fb00 	bl	104b8 <mp_obj_gen_resume>
    ceb8:	4603      	mov	r3, r0
    ceba:	e094      	b.n	cfe6 <mp_resume+0x186>
    }

    if (type->iternext != NULL && send_value == mp_const_none) {
    cebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    cebe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    cec0:	2b00      	cmp	r3, #0
    cec2:	d012      	beq.n	ceea <mp_resume+0x8a>
    cec4:	68bb      	ldr	r3, [r7, #8]
    cec6:	4a4e      	ldr	r2, [pc, #312]	; (d000 <mp_resume+0x1a0>)
    cec8:	4293      	cmp	r3, r2
    ceca:	d10e      	bne.n	ceea <mp_resume+0x8a>
        mp_obj_t ret = type->iternext(self_in);
    cecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    cece:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    ced0:	68f8      	ldr	r0, [r7, #12]
    ced2:	4798      	blx	r3
    ced4:	6238      	str	r0, [r7, #32]
        *ret_val = ret;
    ced6:	683b      	ldr	r3, [r7, #0]
    ced8:	6a3a      	ldr	r2, [r7, #32]
    ceda:	601a      	str	r2, [r3, #0]
        if (ret != MP_OBJ_STOP_ITERATION) {
    cedc:	6a3b      	ldr	r3, [r7, #32]
    cede:	2b04      	cmp	r3, #4
    cee0:	d001      	beq.n	cee6 <mp_resume+0x86>
            return MP_VM_RETURN_YIELD;
    cee2:	2301      	movs	r3, #1
    cee4:	e07f      	b.n	cfe6 <mp_resume+0x186>
        } else {
            // Emulate raise StopIteration()
            // Special case, handled in vm.c
            return MP_VM_RETURN_NORMAL;
    cee6:	2300      	movs	r3, #0
    cee8:	e07d      	b.n	cfe6 <mp_resume+0x186>
    }

    mp_obj_t dest[3]; // Reserve slot for send() arg

    // Python instance iterator protocol
    if (send_value == mp_const_none) {
    ceea:	68bb      	ldr	r3, [r7, #8]
    ceec:	4a44      	ldr	r2, [pc, #272]	; (d000 <mp_resume+0x1a0>)
    ceee:	4293      	cmp	r3, r2
    cef0:	d115      	bne.n	cf1e <mp_resume+0xbe>
        mp_load_method_maybe(self_in, MP_QSTR___next__, dest);
    cef2:	f107 0314 	add.w	r3, r7, #20
    cef6:	461a      	mov	r2, r3
    cef8:	211e      	movs	r1, #30
    cefa:	68f8      	ldr	r0, [r7, #12]
    cefc:	f7ff fdf4 	bl	cae8 <mp_load_method_maybe>
        if (dest[0] != MP_OBJ_NULL) {
    cf00:	697b      	ldr	r3, [r7, #20]
    cf02:	2b00      	cmp	r3, #0
    cf04:	d00b      	beq.n	cf1e <mp_resume+0xbe>
            *ret_val = mp_call_method_n_kw(0, 0, dest);
    cf06:	f107 0314 	add.w	r3, r7, #20
    cf0a:	461a      	mov	r2, r3
    cf0c:	2100      	movs	r1, #0
    cf0e:	2000      	movs	r0, #0
    cf10:	f7ff f93c 	bl	c18c <mp_call_method_n_kw>
    cf14:	4602      	mov	r2, r0
    cf16:	683b      	ldr	r3, [r7, #0]
    cf18:	601a      	str	r2, [r3, #0]
            return MP_VM_RETURN_YIELD;
    cf1a:	2301      	movs	r3, #1
    cf1c:	e063      	b.n	cfe6 <mp_resume+0x186>
        }
    }

    // Either python instance generator protocol, or native object
    // generator protocol.
    if (send_value != MP_OBJ_NULL) {
    cf1e:	68bb      	ldr	r3, [r7, #8]
    cf20:	2b00      	cmp	r3, #0
    cf22:	d015      	beq.n	cf50 <mp_resume+0xf0>
        mp_load_method(self_in, MP_QSTR_send, dest);
    cf24:	f107 0314 	add.w	r3, r7, #20
    cf28:	461a      	mov	r2, r3
    cf2a:	f240 1157 	movw	r1, #343	; 0x157
    cf2e:	68f8      	ldr	r0, [r7, #12]
    cf30:	f7ff fe3c 	bl	cbac <mp_load_method>
        dest[2] = send_value;
    cf34:	68bb      	ldr	r3, [r7, #8]
    cf36:	61fb      	str	r3, [r7, #28]
        *ret_val = mp_call_method_n_kw(1, 0, dest);
    cf38:	f107 0314 	add.w	r3, r7, #20
    cf3c:	461a      	mov	r2, r3
    cf3e:	2100      	movs	r1, #0
    cf40:	2001      	movs	r0, #1
    cf42:	f7ff f923 	bl	c18c <mp_call_method_n_kw>
    cf46:	4602      	mov	r2, r0
    cf48:	683b      	ldr	r3, [r7, #0]
    cf4a:	601a      	str	r2, [r3, #0]
        return MP_VM_RETURN_YIELD;
    cf4c:	2301      	movs	r3, #1
    cf4e:	e04a      	b.n	cfe6 <mp_resume+0x186>
    }

    assert(throw_value != MP_OBJ_NULL);
    cf50:	687b      	ldr	r3, [r7, #4]
    cf52:	2b00      	cmp	r3, #0
    cf54:	d106      	bne.n	cf64 <mp_resume+0x104>
    cf56:	4b2b      	ldr	r3, [pc, #172]	; (d004 <mp_resume+0x1a4>)
    cf58:	4a26      	ldr	r2, [pc, #152]	; (cff4 <mp_resume+0x194>)
    cf5a:	f240 41fd 	movw	r1, #1277	; 0x4fd
    cf5e:	4826      	ldr	r0, [pc, #152]	; (cff8 <mp_resume+0x198>)
    cf60:	f00f ffbe 	bl	1cee0 <__assert_func>
    {
        if (mp_obj_is_subclass_fast(MP_OBJ_FROM_PTR(mp_obj_get_type(throw_value)), MP_OBJ_FROM_PTR(&mp_type_GeneratorExit))) {
    cf64:	6878      	ldr	r0, [r7, #4]
    cf66:	f000 fe79 	bl	dc5c <mp_obj_get_type>
    cf6a:	4603      	mov	r3, r0
    cf6c:	4926      	ldr	r1, [pc, #152]	; (d008 <mp_resume+0x1a8>)
    cf6e:	4618      	mov	r0, r3
    cf70:	f00a fc78 	bl	17864 <mp_obj_is_subclass_fast>
    cf74:	4603      	mov	r3, r0
    cf76:	2b00      	cmp	r3, #0
    cf78:	d015      	beq.n	cfa6 <mp_resume+0x146>
            mp_load_method_maybe(self_in, MP_QSTR_close, dest);
    cf7a:	f107 0314 	add.w	r3, r7, #20
    cf7e:	461a      	mov	r2, r3
    cf80:	21f9      	movs	r1, #249	; 0xf9
    cf82:	68f8      	ldr	r0, [r7, #12]
    cf84:	f7ff fdb0 	bl	cae8 <mp_load_method_maybe>
            if (dest[0] != MP_OBJ_NULL) {
    cf88:	697b      	ldr	r3, [r7, #20]
    cf8a:	2b00      	cmp	r3, #0
    cf8c:	d024      	beq.n	cfd8 <mp_resume+0x178>
                // TODO: Exceptions raised in close() are not propagated,
                // printed to sys.stderr
                *ret_val = mp_call_method_n_kw(0, 0, dest);
    cf8e:	f107 0314 	add.w	r3, r7, #20
    cf92:	461a      	mov	r2, r3
    cf94:	2100      	movs	r1, #0
    cf96:	2000      	movs	r0, #0
    cf98:	f7ff f8f8 	bl	c18c <mp_call_method_n_kw>
    cf9c:	4602      	mov	r2, r0
    cf9e:	683b      	ldr	r3, [r7, #0]
    cfa0:	601a      	str	r2, [r3, #0]
                // We assume one can't "yield" from close()
                return MP_VM_RETURN_NORMAL;
    cfa2:	2300      	movs	r3, #0
    cfa4:	e01f      	b.n	cfe6 <mp_resume+0x186>
            }
        } else {
            mp_load_method_maybe(self_in, MP_QSTR_throw, dest);
    cfa6:	f107 0314 	add.w	r3, r7, #20
    cfaa:	461a      	mov	r2, r3
    cfac:	f44f 71b4 	mov.w	r1, #360	; 0x168
    cfb0:	68f8      	ldr	r0, [r7, #12]
    cfb2:	f7ff fd99 	bl	cae8 <mp_load_method_maybe>
            if (dest[0] != MP_OBJ_NULL) {
    cfb6:	697b      	ldr	r3, [r7, #20]
    cfb8:	2b00      	cmp	r3, #0
    cfba:	d00d      	beq.n	cfd8 <mp_resume+0x178>
                dest[2] = throw_value;
    cfbc:	687b      	ldr	r3, [r7, #4]
    cfbe:	61fb      	str	r3, [r7, #28]
                *ret_val = mp_call_method_n_kw(1, 0, dest);
    cfc0:	f107 0314 	add.w	r3, r7, #20
    cfc4:	461a      	mov	r2, r3
    cfc6:	2100      	movs	r1, #0
    cfc8:	2001      	movs	r0, #1
    cfca:	f7ff f8df 	bl	c18c <mp_call_method_n_kw>
    cfce:	4602      	mov	r2, r0
    cfd0:	683b      	ldr	r3, [r7, #0]
    cfd2:	601a      	str	r2, [r3, #0]
                // If .throw() method returned, we assume it's value to yield
                // - any exception would be thrown with nlr_raise().
                return MP_VM_RETURN_YIELD;
    cfd4:	2301      	movs	r3, #1
    cfd6:	e006      	b.n	cfe6 <mp_resume+0x186>
        // If there's nowhere to throw exception into, then we assume that object
        // is just incapable to handle it, so any exception thrown into it
        // will be propagated up. This behavior is approved by test_pep380.py
        // test_delegation_of_close_to_non_generator(),
        //  test_delegating_throw_to_non_generator()
        *ret_val = mp_make_raise_obj(throw_value);
    cfd8:	6878      	ldr	r0, [r7, #4]
    cfda:	f000 f817 	bl	d00c <mp_make_raise_obj>
    cfde:	4602      	mov	r2, r0
    cfe0:	683b      	ldr	r3, [r7, #0]
    cfe2:	601a      	str	r2, [r3, #0]
        return MP_VM_RETURN_EXCEPTION;
    cfe4:	2302      	movs	r3, #2
    }
}
    cfe6:	4618      	mov	r0, r3
    cfe8:	3728      	adds	r7, #40	; 0x28
    cfea:	46bd      	mov	sp, r7
    cfec:	bd80      	pop	{r7, pc}
    cfee:	bf00      	nop
    cff0:	00023360 	.word	0x00023360
    cff4:	00023524 	.word	0x00023524
    cff8:	000230bc 	.word	0x000230bc
    cffc:	00024a94 	.word	0x00024a94
    d000:	0002511c 	.word	0x0002511c
    d004:	0002339c 	.word	0x0002339c
    d008:	00023ec4 	.word	0x00023ec4

0000d00c <mp_make_raise_obj>:

mp_obj_t mp_make_raise_obj(mp_obj_t o) {
    d00c:	b580      	push	{r7, lr}
    d00e:	b082      	sub	sp, #8
    d010:	af00      	add	r7, sp, #0
    d012:	6078      	str	r0, [r7, #4]
    DEBUG_printf("raise %p\n", o);
    d014:	6879      	ldr	r1, [r7, #4]
    d016:	4811      	ldr	r0, [pc, #68]	; (d05c <mp_make_raise_obj+0x50>)
    d018:	f00f fde8 	bl	1cbec <DEBUG_printf>
    if (mp_obj_is_exception_type(o)) {
    d01c:	6878      	ldr	r0, [r7, #4]
    d01e:	f002 fd9f 	bl	fb60 <mp_obj_is_exception_type>
    d022:	4603      	mov	r3, r0
    d024:	2b00      	cmp	r3, #0
    d026:	d007      	beq.n	d038 <mp_make_raise_obj+0x2c>
        // o is an exception type (it is derived from BaseException (or is BaseException))
        // create and return a new exception instance by calling o
        // TODO could have an option to disable traceback, then builtin exceptions (eg TypeError)
        // could have const instances in ROM which we return here instead
        return mp_call_function_n_kw(o, 0, 0, NULL);
    d028:	2300      	movs	r3, #0
    d02a:	2200      	movs	r2, #0
    d02c:	2100      	movs	r1, #0
    d02e:	6878      	ldr	r0, [r7, #4]
    d030:	f7ff f881 	bl	c136 <mp_call_function_n_kw>
    d034:	4603      	mov	r3, r0
    d036:	e00c      	b.n	d052 <mp_make_raise_obj+0x46>
    } else if (mp_obj_is_exception_instance(o)) {
    d038:	6878      	ldr	r0, [r7, #4]
    d03a:	f002 fdb9 	bl	fbb0 <mp_obj_is_exception_instance>
    d03e:	4603      	mov	r3, r0
    d040:	2b00      	cmp	r3, #0
    d042:	d001      	beq.n	d048 <mp_make_raise_obj+0x3c>
        // o is an instance of an exception, so use it as the exception
        return o;
    d044:	687b      	ldr	r3, [r7, #4]
    d046:	e004      	b.n	d052 <mp_make_raise_obj+0x46>
    } else {
        // o cannot be used as an exception, so return a type error (which will be raised by the caller)
        return mp_obj_new_exception_msg(&mp_type_TypeError, "exceptions must derive from BaseException");
    d048:	4905      	ldr	r1, [pc, #20]	; (d060 <mp_make_raise_obj+0x54>)
    d04a:	4806      	ldr	r0, [pc, #24]	; (d064 <mp_make_raise_obj+0x58>)
    d04c:	f002 fc8a 	bl	f964 <mp_obj_new_exception_msg>
    d050:	4603      	mov	r3, r0
    }
}
    d052:	4618      	mov	r0, r3
    d054:	3708      	adds	r7, #8
    d056:	46bd      	mov	sp, r7
    d058:	bd80      	pop	{r7, pc}
    d05a:	bf00      	nop
    d05c:	000233b8 	.word	0x000233b8
    d060:	000233c4 	.word	0x000233c4
    d064:	00024374 	.word	0x00024374

0000d068 <mp_import_name>:

mp_obj_t mp_import_name(qstr name, mp_obj_t fromlist, mp_obj_t level) {
    d068:	b580      	push	{r7, lr}
    d06a:	b08a      	sub	sp, #40	; 0x28
    d06c:	af00      	add	r7, sp, #0
    d06e:	60f8      	str	r0, [r7, #12]
    d070:	60b9      	str	r1, [r7, #8]
    d072:	607a      	str	r2, [r7, #4]
    DEBUG_printf("import name '%s' level=%d\n", qstr_str(name), MP_OBJ_SMALL_INT_VALUE(level));
    d074:	68f8      	ldr	r0, [r7, #12]
    d076:	f7f4 f9ab 	bl	13d0 <qstr_str>
    d07a:	4601      	mov	r1, r0
    d07c:	687b      	ldr	r3, [r7, #4]
    d07e:	105b      	asrs	r3, r3, #1
    d080:	461a      	mov	r2, r3
    d082:	480d      	ldr	r0, [pc, #52]	; (d0b8 <mp_import_name+0x50>)
    d084:	f00f fdb2 	bl	1cbec <DEBUG_printf>

    // build args array
    mp_obj_t args[5];
    args[0] = MP_OBJ_NEW_QSTR(name);
    d088:	68fb      	ldr	r3, [r7, #12]
    d08a:	009b      	lsls	r3, r3, #2
    d08c:	f043 0302 	orr.w	r3, r3, #2
    d090:	617b      	str	r3, [r7, #20]
    args[1] = mp_const_none; // TODO should be globals
    d092:	4b0a      	ldr	r3, [pc, #40]	; (d0bc <mp_import_name+0x54>)
    d094:	61bb      	str	r3, [r7, #24]
    args[2] = mp_const_none; // TODO should be locals
    d096:	4b09      	ldr	r3, [pc, #36]	; (d0bc <mp_import_name+0x54>)
    d098:	61fb      	str	r3, [r7, #28]
    args[3] = fromlist;
    d09a:	68bb      	ldr	r3, [r7, #8]
    d09c:	623b      	str	r3, [r7, #32]
    args[4] = level;
    d09e:	687b      	ldr	r3, [r7, #4]
    d0a0:	627b      	str	r3, [r7, #36]	; 0x24

    // TODO lookup __import__ and call that instead of going straight to builtin implementation
    return mp_builtin___import__(5, args);
    d0a2:	f107 0314 	add.w	r3, r7, #20
    d0a6:	4619      	mov	r1, r3
    d0a8:	2005      	movs	r0, #5
    d0aa:	f00b fe62 	bl	18d72 <mp_builtin___import__>
    d0ae:	4603      	mov	r3, r0
}
    d0b0:	4618      	mov	r0, r3
    d0b2:	3728      	adds	r7, #40	; 0x28
    d0b4:	46bd      	mov	sp, r7
    d0b6:	bd80      	pop	{r7, pc}
    d0b8:	000233f0 	.word	0x000233f0
    d0bc:	0002511c 	.word	0x0002511c

0000d0c0 <mp_import_from>:

mp_obj_t mp_import_from(mp_obj_t module, qstr name) {
    d0c0:	b5b0      	push	{r4, r5, r7, lr}
    d0c2:	b08a      	sub	sp, #40	; 0x28
    d0c4:	af00      	add	r7, sp, #0
    d0c6:	6078      	str	r0, [r7, #4]
    d0c8:	6039      	str	r1, [r7, #0]
    DEBUG_printf("import from %p %s\n", module, qstr_str(name));
    d0ca:	6838      	ldr	r0, [r7, #0]
    d0cc:	f7f4 f980 	bl	13d0 <qstr_str>
    d0d0:	4603      	mov	r3, r0
    d0d2:	461a      	mov	r2, r3
    d0d4:	6879      	ldr	r1, [r7, #4]
    d0d6:	483b      	ldr	r0, [pc, #236]	; (d1c4 <mp_import_from+0x104>)
    d0d8:	f00f fd88 	bl	1cbec <DEBUG_printf>

    mp_obj_t dest[2];

    mp_load_method_maybe(module, name, dest);
    d0dc:	f107 0310 	add.w	r3, r7, #16
    d0e0:	461a      	mov	r2, r3
    d0e2:	6839      	ldr	r1, [r7, #0]
    d0e4:	6878      	ldr	r0, [r7, #4]
    d0e6:	f7ff fcff 	bl	cae8 <mp_load_method_maybe>

    if (dest[1] != MP_OBJ_NULL) {
    d0ea:	697b      	ldr	r3, [r7, #20]
    d0ec:	2b00      	cmp	r3, #0
    d0ee:	d00a      	beq.n	d106 <mp_import_from+0x46>
    d0f0:	e000      	b.n	d0f4 <mp_import_from+0x34>

    #if MICROPY_ENABLE_EXTERNAL_IMPORT

    // See if it's a package, then can try FS import
    if (!mp_obj_is_package(module)) {
        goto import_error;
    d0f2:	bf00      	nop
        nlr_raise(mp_obj_new_exception_msg_varg(&mp_type_ImportError, "cannot import name %q", name));
    d0f4:	683a      	ldr	r2, [r7, #0]
    d0f6:	4934      	ldr	r1, [pc, #208]	; (d1c8 <mp_import_from+0x108>)
    d0f8:	4834      	ldr	r0, [pc, #208]	; (d1cc <mp_import_from+0x10c>)
    d0fa:	f002 fc93 	bl	fa24 <mp_obj_new_exception_msg_varg>
    d0fe:	4603      	mov	r3, r0
    d100:	4618      	mov	r0, r3
    d102:	f7f3 f8ed 	bl	2e0 <nlr_jump>
    if (dest[0] != MP_OBJ_NULL) {
    d106:	693b      	ldr	r3, [r7, #16]
    d108:	2b00      	cmp	r3, #0
    d10a:	d001      	beq.n	d110 <mp_import_from+0x50>
        return dest[0];
    d10c:	693b      	ldr	r3, [r7, #16]
    d10e:	e055      	b.n	d1bc <mp_import_from+0xfc>
    if (!mp_obj_is_package(module)) {
    d110:	6878      	ldr	r0, [r7, #4]
    d112:	f00b fd15 	bl	18b40 <mp_obj_is_package>
    d116:	4603      	mov	r3, r0
    d118:	f083 0301 	eor.w	r3, r3, #1
    d11c:	b2db      	uxtb	r3, r3
    d11e:	2b00      	cmp	r3, #0
    d120:	d1e7      	bne.n	d0f2 <mp_import_from+0x32>
    }

    mp_load_method_maybe(module, MP_QSTR___name__, dest);
    d122:	f107 0310 	add.w	r3, r7, #16
    d126:	461a      	mov	r2, r3
    d128:	211c      	movs	r1, #28
    d12a:	6878      	ldr	r0, [r7, #4]
    d12c:	f7ff fcdc 	bl	cae8 <mp_load_method_maybe>
    size_t pkg_name_len;
    const char *pkg_name = mp_obj_str_get_data(dest[0], &pkg_name_len);
    d130:	693b      	ldr	r3, [r7, #16]
    d132:	f107 020c 	add.w	r2, r7, #12
    d136:	4611      	mov	r1, r2
    d138:	4618      	mov	r0, r3
    d13a:	f008 fccf 	bl	15adc <mp_obj_str_get_data>
    d13e:	6278      	str	r0, [r7, #36]	; 0x24

    const uint dot_name_len = pkg_name_len + 1 + qstr_len(name);
    d140:	6838      	ldr	r0, [r7, #0]
    d142:	f7f4 f936 	bl	13b2 <qstr_len>
    d146:	4602      	mov	r2, r0
    d148:	68fb      	ldr	r3, [r7, #12]
    d14a:	4413      	add	r3, r2
    d14c:	3301      	adds	r3, #1
    d14e:	623b      	str	r3, [r7, #32]
    char *dot_name = mp_local_alloc(dot_name_len);
    d150:	6a3b      	ldr	r3, [r7, #32]
    d152:	3307      	adds	r3, #7
    d154:	3307      	adds	r3, #7
    d156:	08db      	lsrs	r3, r3, #3
    d158:	00db      	lsls	r3, r3, #3
    d15a:	ebad 0d03 	sub.w	sp, sp, r3
    d15e:	466b      	mov	r3, sp
    d160:	3307      	adds	r3, #7
    d162:	08db      	lsrs	r3, r3, #3
    d164:	00db      	lsls	r3, r3, #3
    d166:	61fb      	str	r3, [r7, #28]
    memcpy(dot_name, pkg_name, pkg_name_len);
    d168:	68fb      	ldr	r3, [r7, #12]
    d16a:	461a      	mov	r2, r3
    d16c:	6a79      	ldr	r1, [r7, #36]	; 0x24
    d16e:	69f8      	ldr	r0, [r7, #28]
    d170:	f011 f9de 	bl	1e530 <memcpy>
    dot_name[pkg_name_len] = '.';
    d174:	68fb      	ldr	r3, [r7, #12]
    d176:	69fa      	ldr	r2, [r7, #28]
    d178:	4413      	add	r3, r2
    d17a:	222e      	movs	r2, #46	; 0x2e
    d17c:	701a      	strb	r2, [r3, #0]
    memcpy(dot_name + pkg_name_len + 1, qstr_str(name), qstr_len(name));
    d17e:	68fb      	ldr	r3, [r7, #12]
    d180:	3301      	adds	r3, #1
    d182:	69fa      	ldr	r2, [r7, #28]
    d184:	18d4      	adds	r4, r2, r3
    d186:	6838      	ldr	r0, [r7, #0]
    d188:	f7f4 f922 	bl	13d0 <qstr_str>
    d18c:	4605      	mov	r5, r0
    d18e:	6838      	ldr	r0, [r7, #0]
    d190:	f7f4 f90f 	bl	13b2 <qstr_len>
    d194:	4603      	mov	r3, r0
    d196:	461a      	mov	r2, r3
    d198:	4629      	mov	r1, r5
    d19a:	4620      	mov	r0, r4
    d19c:	f011 f9c8 	bl	1e530 <memcpy>
    qstr dot_name_q = qstr_from_strn(dot_name, dot_name_len);
    d1a0:	6a39      	ldr	r1, [r7, #32]
    d1a2:	69f8      	ldr	r0, [r7, #28]
    d1a4:	f7f4 f83b 	bl	121e <qstr_from_strn>
    d1a8:	61b8      	str	r0, [r7, #24]
    mp_local_free(dot_name);
    d1aa:	69f8      	ldr	r0, [r7, #28]
    d1ac:	f7fe fa98 	bl	b6e0 <mp_local_free>

    // For fromlist, pass sentinel "non empty" value to force returning of leaf module
    return mp_import_name(dot_name_q, mp_const_true, MP_OBJ_NEW_SMALL_INT(0));
    d1b0:	2201      	movs	r2, #1
    d1b2:	4907      	ldr	r1, [pc, #28]	; (d1d0 <mp_import_from+0x110>)
    d1b4:	69b8      	ldr	r0, [r7, #24]
    d1b6:	f7ff ff57 	bl	d068 <mp_import_name>
    d1ba:	4603      	mov	r3, r0

    // Package import not supported with external imports disabled
    goto import_error;

    #endif
}
    d1bc:	4618      	mov	r0, r3
    d1be:	3728      	adds	r7, #40	; 0x28
    d1c0:	46bd      	mov	sp, r7
    d1c2:	bdb0      	pop	{r4, r5, r7, pc}
    d1c4:	0002340c 	.word	0x0002340c
    d1c8:	00023420 	.word	0x00023420
    d1cc:	000240e0 	.word	0x000240e0
    d1d0:	00023868 	.word	0x00023868

0000d1d4 <mp_import_all>:

void mp_import_all(mp_obj_t module) {
    d1d4:	b580      	push	{r7, lr}
    d1d6:	b086      	sub	sp, #24
    d1d8:	af00      	add	r7, sp, #0
    d1da:	6078      	str	r0, [r7, #4]
    DEBUG_printf("import all %p\n", module);
    d1dc:	6879      	ldr	r1, [r7, #4]
    d1de:	4820      	ldr	r0, [pc, #128]	; (d260 <mp_import_all+0x8c>)
    d1e0:	f00f fd04 	bl	1cbec <DEBUG_printf>

    // TODO: Support __all__
    mp_map_t *map = &mp_obj_module_get_globals(module)->map;
    d1e4:	6878      	ldr	r0, [r7, #4]
    d1e6:	f7fe fa6f 	bl	b6c8 <mp_obj_module_get_globals>
    d1ea:	4603      	mov	r3, r0
    d1ec:	3304      	adds	r3, #4
    d1ee:	613b      	str	r3, [r7, #16]
    for (size_t i = 0; i < map->alloc; i++) {
    d1f0:	2300      	movs	r3, #0
    d1f2:	617b      	str	r3, [r7, #20]
    d1f4:	e02b      	b.n	d24e <mp_import_all+0x7a>
        if (MP_MAP_SLOT_IS_FILLED(map, i)) {
    d1f6:	6979      	ldr	r1, [r7, #20]
    d1f8:	6938      	ldr	r0, [r7, #16]
    d1fa:	f7fe fa23 	bl	b644 <MP_MAP_SLOT_IS_FILLED>
    d1fe:	4603      	mov	r3, r0
    d200:	2b00      	cmp	r3, #0
    d202:	d021      	beq.n	d248 <mp_import_all+0x74>
            // Entry in module global scope may be generated programmatically
            // (and thus be not a qstr for longer names). Avoid turning it in
            // qstr if it has '_' and was used exactly to save memory.
            const char *name = mp_obj_str_get_str(map->table[i].key);
    d204:	693b      	ldr	r3, [r7, #16]
    d206:	689a      	ldr	r2, [r3, #8]
    d208:	697b      	ldr	r3, [r7, #20]
    d20a:	00db      	lsls	r3, r3, #3
    d20c:	4413      	add	r3, r2
    d20e:	681b      	ldr	r3, [r3, #0]
    d210:	4618      	mov	r0, r3
    d212:	f008 fc2b 	bl	15a6c <mp_obj_str_get_str>
    d216:	60f8      	str	r0, [r7, #12]
            if (*name != '_') {
    d218:	68fb      	ldr	r3, [r7, #12]
    d21a:	781b      	ldrb	r3, [r3, #0]
    d21c:	2b5f      	cmp	r3, #95	; 0x5f
    d21e:	d013      	beq.n	d248 <mp_import_all+0x74>
                qstr qname = mp_obj_str_get_qstr(map->table[i].key);
    d220:	693b      	ldr	r3, [r7, #16]
    d222:	689a      	ldr	r2, [r3, #8]
    d224:	697b      	ldr	r3, [r7, #20]
    d226:	00db      	lsls	r3, r3, #3
    d228:	4413      	add	r3, r2
    d22a:	681b      	ldr	r3, [r3, #0]
    d22c:	4618      	mov	r0, r3
    d22e:	f008 fbef 	bl	15a10 <mp_obj_str_get_qstr>
    d232:	60b8      	str	r0, [r7, #8]
                mp_store_name(qname, map->table[i].value);
    d234:	693b      	ldr	r3, [r7, #16]
    d236:	689a      	ldr	r2, [r3, #8]
    d238:	697b      	ldr	r3, [r7, #20]
    d23a:	00db      	lsls	r3, r3, #3
    d23c:	4413      	add	r3, r2
    d23e:	685b      	ldr	r3, [r3, #4]
    d240:	4619      	mov	r1, r3
    d242:	68b8      	ldr	r0, [r7, #8]
    d244:	f7fe fb5a 	bl	b8fc <mp_store_name>
    for (size_t i = 0; i < map->alloc; i++) {
    d248:	697b      	ldr	r3, [r7, #20]
    d24a:	3301      	adds	r3, #1
    d24c:	617b      	str	r3, [r7, #20]
    d24e:	693b      	ldr	r3, [r7, #16]
    d250:	685a      	ldr	r2, [r3, #4]
    d252:	697b      	ldr	r3, [r7, #20]
    d254:	429a      	cmp	r2, r3
    d256:	d8ce      	bhi.n	d1f6 <mp_import_all+0x22>
            }
        }
    }
}
    d258:	bf00      	nop
    d25a:	3718      	adds	r7, #24
    d25c:	46bd      	mov	sp, r7
    d25e:	bd80      	pop	{r7, pc}
    d260:	00023438 	.word	0x00023438

0000d264 <mp_parse_compile_execute>:

#if MICROPY_ENABLE_COMPILER

// this is implemented in this file so it can optimise access to locals/globals
mp_obj_t mp_parse_compile_execute(mp_lexer_t *lex, mp_parse_input_kind_t parse_input_kind, mp_obj_dict_t *globals, mp_obj_dict_t *locals) {
    d264:	b580      	push	{r7, lr}
    d266:	b098      	sub	sp, #96	; 0x60
    d268:	af00      	add	r7, sp, #0
    d26a:	60f8      	str	r0, [r7, #12]
    d26c:	60b9      	str	r1, [r7, #8]
    d26e:	607a      	str	r2, [r7, #4]
    d270:	603b      	str	r3, [r7, #0]
    // save context
    mp_obj_dict_t *volatile old_globals = mp_globals_get();
    d272:	f7fe fa81 	bl	b778 <mp_globals_get>
    d276:	4603      	mov	r3, r0
    d278:	653b      	str	r3, [r7, #80]	; 0x50
    mp_obj_dict_t *volatile old_locals = mp_locals_get();
    d27a:	f7fe fa62 	bl	b742 <mp_locals_get>
    d27e:	4603      	mov	r3, r0
    d280:	64fb      	str	r3, [r7, #76]	; 0x4c

    // set new context
    mp_globals_set(globals);
    d282:	6878      	ldr	r0, [r7, #4]
    d284:	f7fe fa84 	bl	b790 <mp_globals_set>
    mp_locals_set(locals);
    d288:	6838      	ldr	r0, [r7, #0]
    d28a:	f7fe fa65 	bl	b758 <mp_locals_set>

    nlr_buf_t nlr;
    if (nlr_push(&nlr) == 0) {
    d28e:	f107 031c 	add.w	r3, r7, #28
    d292:	4618      	mov	r0, r3
    d294:	f7f3 f812 	bl	2bc <nlr_push>
    d298:	4603      	mov	r3, r0
    d29a:	2b00      	cmp	r3, #0
    d29c:	d121      	bne.n	d2e2 <mp_parse_compile_execute+0x7e>
        qstr source_name = lex->source_name;
    d29e:	68fb      	ldr	r3, [r7, #12]
    d2a0:	681b      	ldr	r3, [r3, #0]
    d2a2:	65fb      	str	r3, [r7, #92]	; 0x5c
        mp_parse_tree_t parse_tree = mp_parse(lex, parse_input_kind);
    d2a4:	f107 0314 	add.w	r3, r7, #20
    d2a8:	68ba      	ldr	r2, [r7, #8]
    d2aa:	68f9      	ldr	r1, [r7, #12]
    d2ac:	4618      	mov	r0, r3
    d2ae:	f7f7 f9dd 	bl	466c <mp_parse>
        mp_obj_t module_fun = mp_compile(&parse_tree, source_name, MP_EMIT_OPT_NONE, false);
    d2b2:	f107 0014 	add.w	r0, r7, #20
    d2b6:	2300      	movs	r3, #0
    d2b8:	2200      	movs	r2, #0
    d2ba:	6df9      	ldr	r1, [r7, #92]	; 0x5c
    d2bc:	f7fc fbbf 	bl	9a3e <mp_compile>
    d2c0:	65b8      	str	r0, [r7, #88]	; 0x58
        if (MICROPY_PY_BUILTINS_COMPILE && globals == NULL) {
            // for compile only, return value is the module function
            ret = module_fun;
        } else {
            // execute module function and get return value
            ret = mp_call_function_0(module_fun);
    d2c2:	6db8      	ldr	r0, [r7, #88]	; 0x58
    d2c4:	f7fe ff02 	bl	c0cc <mp_call_function_0>
    d2c8:	6578      	str	r0, [r7, #84]	; 0x54
        }

        // finish nlr block, restore context and return value
        nlr_pop();
    d2ca:	f7f2 ffe5 	bl	298 <nlr_pop>
        mp_globals_set(old_globals);
    d2ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    d2d0:	4618      	mov	r0, r3
    d2d2:	f7fe fa5d 	bl	b790 <mp_globals_set>
        mp_locals_set(old_locals);
    d2d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    d2d8:	4618      	mov	r0, r3
    d2da:	f7fe fa3d 	bl	b758 <mp_locals_set>
        return ret;
    d2de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    d2e0:	e00b      	b.n	d2fa <mp_parse_compile_execute+0x96>
    } else {
        // exception; restore context and re-raise same exception
        mp_globals_set(old_globals);
    d2e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    d2e4:	4618      	mov	r0, r3
    d2e6:	f7fe fa53 	bl	b790 <mp_globals_set>
        mp_locals_set(old_locals);
    d2ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    d2ec:	4618      	mov	r0, r3
    d2ee:	f7fe fa33 	bl	b758 <mp_locals_set>
        nlr_jump(nlr.ret_val);
    d2f2:	6a3b      	ldr	r3, [r7, #32]
    d2f4:	4618      	mov	r0, r3
    d2f6:	f7f2 fff3 	bl	2e0 <nlr_jump>
    }
}
    d2fa:	4618      	mov	r0, r3
    d2fc:	3760      	adds	r7, #96	; 0x60
    d2fe:	46bd      	mov	sp, r7
    d300:	bd80      	pop	{r7, pc}

0000d302 <m_malloc_fail>:

#endif // MICROPY_ENABLE_COMPILER

NORETURN void m_malloc_fail(size_t num_bytes) {
    d302:	b580      	push	{r7, lr}
    d304:	b082      	sub	sp, #8
    d306:	af00      	add	r7, sp, #0
    d308:	6078      	str	r0, [r7, #4]
    DEBUG_printf("memory allocation failed, allocating %u bytes\n", (uint)num_bytes);
    d30a:	6879      	ldr	r1, [r7, #4]
    d30c:	480a      	ldr	r0, [pc, #40]	; (d338 <m_malloc_fail+0x36>)
    d30e:	f00f fc6d 	bl	1cbec <DEBUG_printf>
    #if MICROPY_ENABLE_GC
    if (gc_is_locked()) {
    d312:	f7f3 f95b 	bl	5cc <gc_is_locked>
    d316:	4603      	mov	r3, r0
    d318:	2b00      	cmp	r3, #0
    d31a:	d003      	beq.n	d324 <m_malloc_fail+0x22>
        mp_raise_msg(&mp_type_MemoryError, "memory allocation failed, heap is locked");
    d31c:	4907      	ldr	r1, [pc, #28]	; (d33c <m_malloc_fail+0x3a>)
    d31e:	4808      	ldr	r0, [pc, #32]	; (d340 <m_malloc_fail+0x3e>)
    d320:	f000 f812 	bl	d348 <mp_raise_msg>
    }
    #endif
    nlr_raise(mp_obj_new_exception_msg_varg(&mp_type_MemoryError,
    d324:	687a      	ldr	r2, [r7, #4]
    d326:	4907      	ldr	r1, [pc, #28]	; (d344 <m_malloc_fail+0x42>)
    d328:	4805      	ldr	r0, [pc, #20]	; (d340 <m_malloc_fail+0x3e>)
    d32a:	f002 fb7b 	bl	fa24 <mp_obj_new_exception_msg_varg>
    d32e:	4603      	mov	r3, r0
    d330:	4618      	mov	r0, r3
    d332:	f7f2 ffd5 	bl	2e0 <nlr_jump>
    d336:	bf00      	nop
    d338:	00023448 	.word	0x00023448
    d33c:	00023478 	.word	0x00023478
    d340:	000241d0 	.word	0x000241d0
    d344:	000234a4 	.word	0x000234a4

0000d348 <mp_raise_msg>:
        "memory allocation failed, allocating %u bytes", (uint)num_bytes));
}

NORETURN void mp_raise_msg(const mp_obj_type_t *exc_type, const char *msg) {
    d348:	b580      	push	{r7, lr}
    d34a:	b082      	sub	sp, #8
    d34c:	af00      	add	r7, sp, #0
    d34e:	6078      	str	r0, [r7, #4]
    d350:	6039      	str	r1, [r7, #0]
    if (msg == NULL) {
    d352:	683b      	ldr	r3, [r7, #0]
    d354:	2b00      	cmp	r3, #0
    d356:	d106      	bne.n	d366 <mp_raise_msg+0x1e>
        nlr_raise(mp_obj_new_exception(exc_type));
    d358:	6878      	ldr	r0, [r7, #4]
    d35a:	f002 fabf 	bl	f8dc <mp_obj_new_exception>
    d35e:	4603      	mov	r3, r0
    d360:	4618      	mov	r0, r3
    d362:	f7f2 ffbd 	bl	2e0 <nlr_jump>
    } else {
        nlr_raise(mp_obj_new_exception_msg(exc_type, msg));
    d366:	6839      	ldr	r1, [r7, #0]
    d368:	6878      	ldr	r0, [r7, #4]
    d36a:	f002 fafb 	bl	f964 <mp_obj_new_exception_msg>
    d36e:	4603      	mov	r3, r0
    d370:	4618      	mov	r0, r3
    d372:	f7f2 ffb5 	bl	2e0 <nlr_jump>

0000d376 <mp_raise_ValueError>:
    }
}

NORETURN void mp_raise_ValueError(const char *msg) {
    d376:	b580      	push	{r7, lr}
    d378:	b082      	sub	sp, #8
    d37a:	af00      	add	r7, sp, #0
    d37c:	6078      	str	r0, [r7, #4]
    mp_raise_msg(&mp_type_ValueError, msg);
    d37e:	6879      	ldr	r1, [r7, #4]
    d380:	4801      	ldr	r0, [pc, #4]	; (d388 <mp_raise_ValueError+0x12>)
    d382:	f7ff ffe1 	bl	d348 <mp_raise_msg>
    d386:	bf00      	nop
    d388:	000243b0 	.word	0x000243b0

0000d38c <mp_raise_TypeError>:
}

NORETURN void mp_raise_TypeError(const char *msg) {
    d38c:	b580      	push	{r7, lr}
    d38e:	b082      	sub	sp, #8
    d390:	af00      	add	r7, sp, #0
    d392:	6078      	str	r0, [r7, #4]
    mp_raise_msg(&mp_type_TypeError, msg);
    d394:	6879      	ldr	r1, [r7, #4]
    d396:	4801      	ldr	r0, [pc, #4]	; (d39c <mp_raise_TypeError+0x10>)
    d398:	f7ff ffd6 	bl	d348 <mp_raise_msg>
    d39c:	00024374 	.word	0x00024374

0000d3a0 <mp_raise_OSError>:
}

NORETURN void mp_raise_OSError(int errno_) {
    d3a0:	b580      	push	{r7, lr}
    d3a2:	b082      	sub	sp, #8
    d3a4:	af00      	add	r7, sp, #0
    d3a6:	6078      	str	r0, [r7, #4]
    nlr_raise(mp_obj_new_exception_arg1(&mp_type_OSError, MP_OBJ_NEW_SMALL_INT(errno_)));
    d3a8:	687b      	ldr	r3, [r7, #4]
    d3aa:	005b      	lsls	r3, r3, #1
    d3ac:	f043 0301 	orr.w	r3, r3, #1
    d3b0:	4619      	mov	r1, r3
    d3b2:	4803      	ldr	r0, [pc, #12]	; (d3c0 <mp_raise_OSError+0x20>)
    d3b4:	f002 faa0 	bl	f8f8 <mp_obj_new_exception_arg1>
    d3b8:	4603      	mov	r3, r0
    d3ba:	4618      	mov	r0, r3
    d3bc:	f7f2 ff90 	bl	2e0 <nlr_jump>
    d3c0:	00024248 	.word	0x00024248

0000d3c4 <mp_raise_NotImplementedError>:
}

NORETURN void mp_raise_NotImplementedError(const char *msg) {
    d3c4:	b580      	push	{r7, lr}
    d3c6:	b082      	sub	sp, #8
    d3c8:	af00      	add	r7, sp, #0
    d3ca:	6078      	str	r0, [r7, #4]
    mp_raise_msg(&mp_type_NotImplementedError, msg);
    d3cc:	6879      	ldr	r1, [r7, #4]
    d3ce:	4801      	ldr	r0, [pc, #4]	; (d3d4 <mp_raise_NotImplementedError+0x10>)
    d3d0:	f7ff ffba 	bl	d348 <mp_raise_msg>
    d3d4:	000242c0 	.word	0x000242c0

0000d3d8 <mp_arg_check_num_sig>:
#include <stdlib.h>
#include <assert.h>

#include "py/runtime.h"

void mp_arg_check_num_sig(size_t n_args, size_t n_kw, uint32_t sig) {
    d3d8:	b580      	push	{r7, lr}
    d3da:	b088      	sub	sp, #32
    d3dc:	af00      	add	r7, sp, #0
    d3de:	60f8      	str	r0, [r7, #12]
    d3e0:	60b9      	str	r1, [r7, #8]
    d3e2:	607a      	str	r2, [r7, #4]
    // TODO maybe take the function name as an argument so we can print nicer error messages

    // The reverse of MP_OBJ_FUN_MAKE_SIG
    bool takes_kw = sig & 1;
    d3e4:	687b      	ldr	r3, [r7, #4]
    d3e6:	f003 0301 	and.w	r3, r3, #1
    d3ea:	2b00      	cmp	r3, #0
    d3ec:	bf14      	ite	ne
    d3ee:	2301      	movne	r3, #1
    d3f0:	2300      	moveq	r3, #0
    d3f2:	77fb      	strb	r3, [r7, #31]
    size_t n_args_min = sig >> 17;
    d3f4:	687b      	ldr	r3, [r7, #4]
    d3f6:	0c5b      	lsrs	r3, r3, #17
    d3f8:	61bb      	str	r3, [r7, #24]
    size_t n_args_max = (sig >> 1) & 0xffff;
    d3fa:	687b      	ldr	r3, [r7, #4]
    d3fc:	085b      	lsrs	r3, r3, #1
    d3fe:	b29b      	uxth	r3, r3
    d400:	617b      	str	r3, [r7, #20]

    if (n_kw && !takes_kw) {
    d402:	68bb      	ldr	r3, [r7, #8]
    d404:	2b00      	cmp	r3, #0
    d406:	d007      	beq.n	d418 <mp_arg_check_num_sig+0x40>
    d408:	7ffb      	ldrb	r3, [r7, #31]
    d40a:	f083 0301 	eor.w	r3, r3, #1
    d40e:	b2db      	uxtb	r3, r3
    d410:	2b00      	cmp	r3, #0
    d412:	d001      	beq.n	d418 <mp_arg_check_num_sig+0x40>
        if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
            mp_arg_error_terse_mismatch();
    d414:	f000 f8e8 	bl	d5e8 <mp_arg_error_terse_mismatch>
        } else {
            mp_raise_TypeError("function doesn't take keyword arguments");
        }
    }

    if (n_args_min == n_args_max) {
    d418:	69ba      	ldr	r2, [r7, #24]
    d41a:	697b      	ldr	r3, [r7, #20]
    d41c:	429a      	cmp	r2, r3
    d41e:	d105      	bne.n	d42c <mp_arg_check_num_sig+0x54>
        if (n_args != n_args_min) {
    d420:	68fa      	ldr	r2, [r7, #12]
    d422:	69bb      	ldr	r3, [r7, #24]
    d424:	429a      	cmp	r2, r3
    d426:	d00d      	beq.n	d444 <mp_arg_check_num_sig+0x6c>
            if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
                mp_arg_error_terse_mismatch();
    d428:	f000 f8de 	bl	d5e8 <mp_arg_error_terse_mismatch>
                    "function takes %d positional arguments but %d were given",
                    n_args_min, n_args));
            }
        }
    } else {
        if (n_args < n_args_min) {
    d42c:	68fa      	ldr	r2, [r7, #12]
    d42e:	69bb      	ldr	r3, [r7, #24]
    d430:	429a      	cmp	r2, r3
    d432:	d201      	bcs.n	d438 <mp_arg_check_num_sig+0x60>
            if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
                mp_arg_error_terse_mismatch();
    d434:	f000 f8d8 	bl	d5e8 <mp_arg_error_terse_mismatch>
            } else {
                nlr_raise(mp_obj_new_exception_msg_varg(&mp_type_TypeError,
                    "function missing %d required positional arguments",
                    n_args_min - n_args));
            }
        } else if (n_args > n_args_max) {
    d438:	68fa      	ldr	r2, [r7, #12]
    d43a:	697b      	ldr	r3, [r7, #20]
    d43c:	429a      	cmp	r2, r3
    d43e:	d901      	bls.n	d444 <mp_arg_check_num_sig+0x6c>
            if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
                mp_arg_error_terse_mismatch();
    d440:	f000 f8d2 	bl	d5e8 <mp_arg_error_terse_mismatch>
                    "function expected at most %d arguments, got %d",
                    n_args_max, n_args));
            }
        }
    }
}
    d444:	bf00      	nop
    d446:	3720      	adds	r7, #32
    d448:	46bd      	mov	sp, r7
    d44a:	bd80      	pop	{r7, pc}

0000d44c <mp_arg_parse_all>:

void mp_arg_parse_all(size_t n_pos, const mp_obj_t *pos, mp_map_t *kws, size_t n_allowed, const mp_arg_t *allowed, mp_arg_val_t *out_vals) {
    d44c:	b590      	push	{r4, r7, lr}
    d44e:	b08b      	sub	sp, #44	; 0x2c
    d450:	af00      	add	r7, sp, #0
    d452:	60f8      	str	r0, [r7, #12]
    d454:	60b9      	str	r1, [r7, #8]
    d456:	607a      	str	r2, [r7, #4]
    d458:	603b      	str	r3, [r7, #0]
    size_t pos_found = 0, kws_found = 0;
    d45a:	2300      	movs	r3, #0
    d45c:	627b      	str	r3, [r7, #36]	; 0x24
    d45e:	2300      	movs	r3, #0
    d460:	623b      	str	r3, [r7, #32]
    for (size_t i = 0; i < n_allowed; i++) {
    d462:	2300      	movs	r3, #0
    d464:	61fb      	str	r3, [r7, #28]
    d466:	e07e      	b.n	d566 <mp_arg_parse_all+0x11a>
        mp_obj_t given_arg;
        if (i < n_pos) {
    d468:	69fa      	ldr	r2, [r7, #28]
    d46a:	68fb      	ldr	r3, [r7, #12]
    d46c:	429a      	cmp	r2, r3
    d46e:	d212      	bcs.n	d496 <mp_arg_parse_all+0x4a>
            if (allowed[i].flags & MP_ARG_KW_ONLY) {
    d470:	69fb      	ldr	r3, [r7, #28]
    d472:	00db      	lsls	r3, r3, #3
    d474:	6bba      	ldr	r2, [r7, #56]	; 0x38
    d476:	4413      	add	r3, r2
    d478:	885b      	ldrh	r3, [r3, #2]
    d47a:	f403 7300 	and.w	r3, r3, #512	; 0x200
    d47e:	2b00      	cmp	r3, #0
    d480:	d17b      	bne.n	d57a <mp_arg_parse_all+0x12e>
                goto extra_positional;
            }
            pos_found++;
    d482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    d484:	3301      	adds	r3, #1
    d486:	627b      	str	r3, [r7, #36]	; 0x24
            given_arg = pos[i];
    d488:	69fb      	ldr	r3, [r7, #28]
    d48a:	009b      	lsls	r3, r3, #2
    d48c:	68ba      	ldr	r2, [r7, #8]
    d48e:	4413      	add	r3, r2
    d490:	681b      	ldr	r3, [r3, #0]
    d492:	61bb      	str	r3, [r7, #24]
    d494:	e02c      	b.n	d4f0 <mp_arg_parse_all+0xa4>
        } else {
            mp_map_elem_t *kw = mp_map_lookup(kws, MP_OBJ_NEW_QSTR(allowed[i].qst), MP_MAP_LOOKUP);
    d496:	69fb      	ldr	r3, [r7, #28]
    d498:	00db      	lsls	r3, r3, #3
    d49a:	6bba      	ldr	r2, [r7, #56]	; 0x38
    d49c:	4413      	add	r3, r2
    d49e:	881b      	ldrh	r3, [r3, #0]
    d4a0:	009b      	lsls	r3, r3, #2
    d4a2:	f043 0302 	orr.w	r3, r3, #2
    d4a6:	2200      	movs	r2, #0
    d4a8:	4619      	mov	r1, r3
    d4aa:	6878      	ldr	r0, [r7, #4]
    d4ac:	f000 f9f0 	bl	d890 <mp_map_lookup>
    d4b0:	6178      	str	r0, [r7, #20]
            if (kw == NULL) {
    d4b2:	697b      	ldr	r3, [r7, #20]
    d4b4:	2b00      	cmp	r3, #0
    d4b6:	d115      	bne.n	d4e4 <mp_arg_parse_all+0x98>
                if (allowed[i].flags & MP_ARG_REQUIRED) {
    d4b8:	69fb      	ldr	r3, [r7, #28]
    d4ba:	00db      	lsls	r3, r3, #3
    d4bc:	6bba      	ldr	r2, [r7, #56]	; 0x38
    d4be:	4413      	add	r3, r2
    d4c0:	885b      	ldrh	r3, [r3, #2]
    d4c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
    d4c6:	2b00      	cmp	r3, #0
    d4c8:	d001      	beq.n	d4ce <mp_arg_parse_all+0x82>
                    if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
                        mp_arg_error_terse_mismatch();
    d4ca:	f000 f88d 	bl	d5e8 <mp_arg_error_terse_mismatch>
                    } else {
                        nlr_raise(mp_obj_new_exception_msg_varg(&mp_type_TypeError,
                            "'%q' argument required", allowed[i].qst));
                    }
                }
                out_vals[i] = allowed[i].defval;
    d4ce:	69fb      	ldr	r3, [r7, #28]
    d4d0:	009b      	lsls	r3, r3, #2
    d4d2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    d4d4:	4413      	add	r3, r2
    d4d6:	69fa      	ldr	r2, [r7, #28]
    d4d8:	00d2      	lsls	r2, r2, #3
    d4da:	6bb9      	ldr	r1, [r7, #56]	; 0x38
    d4dc:	440a      	add	r2, r1
    d4de:	6852      	ldr	r2, [r2, #4]
    d4e0:	601a      	str	r2, [r3, #0]
                continue;
    d4e2:	e03d      	b.n	d560 <mp_arg_parse_all+0x114>
            } else {
                kws_found++;
    d4e4:	6a3b      	ldr	r3, [r7, #32]
    d4e6:	3301      	adds	r3, #1
    d4e8:	623b      	str	r3, [r7, #32]
                given_arg = kw->value;
    d4ea:	697b      	ldr	r3, [r7, #20]
    d4ec:	685b      	ldr	r3, [r3, #4]
    d4ee:	61bb      	str	r3, [r7, #24]
            }
        }
        if ((allowed[i].flags & MP_ARG_KIND_MASK) == MP_ARG_BOOL) {
    d4f0:	69fb      	ldr	r3, [r7, #28]
    d4f2:	00db      	lsls	r3, r3, #3
    d4f4:	6bba      	ldr	r2, [r7, #56]	; 0x38
    d4f6:	4413      	add	r3, r2
    d4f8:	885b      	ldrh	r3, [r3, #2]
    d4fa:	b2db      	uxtb	r3, r3
    d4fc:	2b01      	cmp	r3, #1
    d4fe:	d109      	bne.n	d514 <mp_arg_parse_all+0xc8>
            out_vals[i].u_bool = mp_obj_is_true(given_arg);
    d500:	69fb      	ldr	r3, [r7, #28]
    d502:	009b      	lsls	r3, r3, #2
    d504:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    d506:	18d4      	adds	r4, r2, r3
    d508:	69b8      	ldr	r0, [r7, #24]
    d50a:	f000 fc83 	bl	de14 <mp_obj_is_true>
    d50e:	4603      	mov	r3, r0
    d510:	7023      	strb	r3, [r4, #0]
    d512:	e025      	b.n	d560 <mp_arg_parse_all+0x114>
        } else if ((allowed[i].flags & MP_ARG_KIND_MASK) == MP_ARG_INT) {
    d514:	69fb      	ldr	r3, [r7, #28]
    d516:	00db      	lsls	r3, r3, #3
    d518:	6bba      	ldr	r2, [r7, #56]	; 0x38
    d51a:	4413      	add	r3, r2
    d51c:	885b      	ldrh	r3, [r3, #2]
    d51e:	b2db      	uxtb	r3, r3
    d520:	2b02      	cmp	r3, #2
    d522:	d109      	bne.n	d538 <mp_arg_parse_all+0xec>
            out_vals[i].u_int = mp_obj_get_int(given_arg);
    d524:	69fb      	ldr	r3, [r7, #28]
    d526:	009b      	lsls	r3, r3, #2
    d528:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    d52a:	18d4      	adds	r4, r2, r3
    d52c:	69b8      	ldr	r0, [r7, #24]
    d52e:	f000 fd71 	bl	e014 <mp_obj_get_int>
    d532:	4603      	mov	r3, r0
    d534:	6023      	str	r3, [r4, #0]
    d536:	e013      	b.n	d560 <mp_arg_parse_all+0x114>
        } else {
            assert((allowed[i].flags & MP_ARG_KIND_MASK) == MP_ARG_OBJ);
    d538:	69fb      	ldr	r3, [r7, #28]
    d53a:	00db      	lsls	r3, r3, #3
    d53c:	6bba      	ldr	r2, [r7, #56]	; 0x38
    d53e:	4413      	add	r3, r2
    d540:	885b      	ldrh	r3, [r3, #2]
    d542:	b2db      	uxtb	r3, r3
    d544:	2b03      	cmp	r3, #3
    d546:	d005      	beq.n	d554 <mp_arg_parse_all+0x108>
    d548:	4b14      	ldr	r3, [pc, #80]	; (d59c <mp_arg_parse_all+0x150>)
    d54a:	4a15      	ldr	r2, [pc, #84]	; (d5a0 <mp_arg_parse_all+0x154>)
    d54c:	2170      	movs	r1, #112	; 0x70
    d54e:	4815      	ldr	r0, [pc, #84]	; (d5a4 <mp_arg_parse_all+0x158>)
    d550:	f00f fcc6 	bl	1cee0 <__assert_func>
            out_vals[i].u_obj = given_arg;
    d554:	69fb      	ldr	r3, [r7, #28]
    d556:	009b      	lsls	r3, r3, #2
    d558:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    d55a:	4413      	add	r3, r2
    d55c:	69ba      	ldr	r2, [r7, #24]
    d55e:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < n_allowed; i++) {
    d560:	69fb      	ldr	r3, [r7, #28]
    d562:	3301      	adds	r3, #1
    d564:	61fb      	str	r3, [r7, #28]
    d566:	69fa      	ldr	r2, [r7, #28]
    d568:	683b      	ldr	r3, [r7, #0]
    d56a:	429a      	cmp	r2, r3
    d56c:	f4ff af7c 	bcc.w	d468 <mp_arg_parse_all+0x1c>
        }
    }
    if (pos_found < n_pos) {
    d570:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    d572:	68fb      	ldr	r3, [r7, #12]
    d574:	429a      	cmp	r2, r3
    d576:	d203      	bcs.n	d580 <mp_arg_parse_all+0x134>
    d578:	e000      	b.n	d57c <mp_arg_parse_all+0x130>
                goto extra_positional;
    d57a:	bf00      	nop
        extra_positional:
        if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
            mp_arg_error_terse_mismatch();
    d57c:	f000 f834 	bl	d5e8 <mp_arg_error_terse_mismatch>
        } else {
            // TODO better error message
            mp_raise_TypeError("extra positional arguments given");
        }
    }
    if (kws_found < kws->used) {
    d580:	687b      	ldr	r3, [r7, #4]
    d582:	681b      	ldr	r3, [r3, #0]
    d584:	f3c3 03dc 	ubfx	r3, r3, #3, #29
    d588:	461a      	mov	r2, r3
    d58a:	6a3b      	ldr	r3, [r7, #32]
    d58c:	429a      	cmp	r2, r3
    d58e:	d901      	bls.n	d594 <mp_arg_parse_all+0x148>
        if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
            mp_arg_error_terse_mismatch();
    d590:	f000 f82a 	bl	d5e8 <mp_arg_error_terse_mismatch>
        } else {
            // TODO better error message
            mp_raise_TypeError("extra keyword arguments given");
        }
    }
}
    d594:	bf00      	nop
    d596:	372c      	adds	r7, #44	; 0x2c
    d598:	46bd      	mov	sp, r7
    d59a:	bd90      	pop	{r4, r7, pc}
    d59c:	00023530 	.word	0x00023530
    d5a0:	00023594 	.word	0x00023594
    d5a4:	00023564 	.word	0x00023564

0000d5a8 <mp_arg_parse_all_kw_array>:

void mp_arg_parse_all_kw_array(size_t n_pos, size_t n_kw, const mp_obj_t *args, size_t n_allowed, const mp_arg_t *allowed, mp_arg_val_t *out_vals) {
    d5a8:	b580      	push	{r7, lr}
    d5aa:	b08a      	sub	sp, #40	; 0x28
    d5ac:	af02      	add	r7, sp, #8
    d5ae:	60f8      	str	r0, [r7, #12]
    d5b0:	60b9      	str	r1, [r7, #8]
    d5b2:	607a      	str	r2, [r7, #4]
    d5b4:	603b      	str	r3, [r7, #0]
    mp_map_t kw_args;
    mp_map_init_fixed_table(&kw_args, n_kw, args + n_pos);
    d5b6:	68fb      	ldr	r3, [r7, #12]
    d5b8:	009b      	lsls	r3, r3, #2
    d5ba:	687a      	ldr	r2, [r7, #4]
    d5bc:	441a      	add	r2, r3
    d5be:	f107 0314 	add.w	r3, r7, #20
    d5c2:	68b9      	ldr	r1, [r7, #8]
    d5c4:	4618      	mov	r0, r3
    d5c6:	f000 f896 	bl	d6f6 <mp_map_init_fixed_table>
    mp_arg_parse_all(n_pos, args, &kw_args, n_allowed, allowed, out_vals);
    d5ca:	f107 0214 	add.w	r2, r7, #20
    d5ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    d5d0:	9301      	str	r3, [sp, #4]
    d5d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    d5d4:	9300      	str	r3, [sp, #0]
    d5d6:	683b      	ldr	r3, [r7, #0]
    d5d8:	6879      	ldr	r1, [r7, #4]
    d5da:	68f8      	ldr	r0, [r7, #12]
    d5dc:	f7ff ff36 	bl	d44c <mp_arg_parse_all>
}
    d5e0:	bf00      	nop
    d5e2:	3720      	adds	r7, #32
    d5e4:	46bd      	mov	sp, r7
    d5e6:	bd80      	pop	{r7, pc}

0000d5e8 <mp_arg_error_terse_mismatch>:

NORETURN void mp_arg_error_terse_mismatch(void) {
    d5e8:	b580      	push	{r7, lr}
    d5ea:	af00      	add	r7, sp, #0
    mp_raise_TypeError("argument num/types mismatch");
    d5ec:	4801      	ldr	r0, [pc, #4]	; (d5f4 <mp_arg_error_terse_mismatch+0xc>)
    d5ee:	f7ff fecd 	bl	d38c <mp_raise_TypeError>
    d5f2:	bf00      	nop
    d5f4:	00023578 	.word	0x00023578

0000d5f8 <MP_OBJ_IS_QSTR>:
    { return ((((mp_int_t)(o)) & 3) == 2); }
    d5f8:	b480      	push	{r7}
    d5fa:	b083      	sub	sp, #12
    d5fc:	af00      	add	r7, sp, #0
    d5fe:	6078      	str	r0, [r7, #4]
    d600:	687b      	ldr	r3, [r7, #4]
    d602:	f003 0303 	and.w	r3, r3, #3
    d606:	2b02      	cmp	r3, #2
    d608:	bf0c      	ite	eq
    d60a:	2301      	moveq	r3, #1
    d60c:	2300      	movne	r3, #0
    d60e:	b2db      	uxtb	r3, r3
    d610:	4618      	mov	r0, r3
    d612:	370c      	adds	r7, #12
    d614:	46bd      	mov	sp, r7
    d616:	f85d 7b04 	ldr.w	r7, [sp], #4
    d61a:	4770      	bx	lr

0000d61c <MP_OBJ_IS_OBJ>:
    { return ((((mp_int_t)(o)) & 3) == 0); }
    d61c:	b480      	push	{r7}
    d61e:	b083      	sub	sp, #12
    d620:	af00      	add	r7, sp, #0
    d622:	6078      	str	r0, [r7, #4]
    d624:	687b      	ldr	r3, [r7, #4]
    d626:	f003 0303 	and.w	r3, r3, #3
    d62a:	2b00      	cmp	r3, #0
    d62c:	bf0c      	ite	eq
    d62e:	2301      	moveq	r3, #1
    d630:	2300      	movne	r3, #0
    d632:	b2db      	uxtb	r3, r3
    d634:	4618      	mov	r0, r3
    d636:	370c      	adds	r7, #12
    d638:	46bd      	mov	sp, r7
    d63a:	f85d 7b04 	ldr.w	r7, [sp], #4
    d63e:	4770      	bx	lr

0000d640 <get_hash_alloc_greater_or_equal_to>:
    17, 23, 29, 37, 47, 59, 73, // *1.25
    97, 127, 167, 223, 293, 389, 521, 691, 919, 1223, 1627, 2161, // *1.33
    3229, 4831, 7243, 10861, 16273, 24407, 36607, 54907, // *1.5
};

STATIC size_t get_hash_alloc_greater_or_equal_to(size_t x) {
    d640:	b480      	push	{r7}
    d642:	b085      	sub	sp, #20
    d644:	af00      	add	r7, sp, #0
    d646:	6078      	str	r0, [r7, #4]
    for (size_t i = 0; i < MP_ARRAY_SIZE(hash_allocation_sizes); i++) {
    d648:	2300      	movs	r3, #0
    d64a:	60fb      	str	r3, [r7, #12]
    d64c:	e00f      	b.n	d66e <get_hash_alloc_greater_or_equal_to+0x2e>
        if (hash_allocation_sizes[i] >= x) {
    d64e:	4a0f      	ldr	r2, [pc, #60]	; (d68c <get_hash_alloc_greater_or_equal_to+0x4c>)
    d650:	68fb      	ldr	r3, [r7, #12]
    d652:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
    d656:	461a      	mov	r2, r3
    d658:	687b      	ldr	r3, [r7, #4]
    d65a:	429a      	cmp	r2, r3
    d65c:	d304      	bcc.n	d668 <get_hash_alloc_greater_or_equal_to+0x28>
            return hash_allocation_sizes[i];
    d65e:	4a0b      	ldr	r2, [pc, #44]	; (d68c <get_hash_alloc_greater_or_equal_to+0x4c>)
    d660:	68fb      	ldr	r3, [r7, #12]
    d662:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
    d666:	e00b      	b.n	d680 <get_hash_alloc_greater_or_equal_to+0x40>
    for (size_t i = 0; i < MP_ARRAY_SIZE(hash_allocation_sizes); i++) {
    d668:	68fb      	ldr	r3, [r7, #12]
    d66a:	3301      	adds	r3, #1
    d66c:	60fb      	str	r3, [r7, #12]
    d66e:	68fb      	ldr	r3, [r7, #12]
    d670:	2b21      	cmp	r3, #33	; 0x21
    d672:	d9ec      	bls.n	d64e <get_hash_alloc_greater_or_equal_to+0xe>
        }
    }
    // ran out of primes in the table!
    // return something sensible, at least make it odd
    return (x + x / 2) | 1;
    d674:	687b      	ldr	r3, [r7, #4]
    d676:	085a      	lsrs	r2, r3, #1
    d678:	687b      	ldr	r3, [r7, #4]
    d67a:	4413      	add	r3, r2
    d67c:	f043 0301 	orr.w	r3, r3, #1
}
    d680:	4618      	mov	r0, r3
    d682:	3714      	adds	r7, #20
    d684:	46bd      	mov	sp, r7
    d686:	f85d 7b04 	ldr.w	r7, [sp], #4
    d68a:	4770      	bx	lr
    d68c:	000235b4 	.word	0x000235b4

0000d690 <mp_map_init>:

/******************************************************************************/
/* map                                                                        */

void mp_map_init(mp_map_t *map, size_t n) {
    d690:	b580      	push	{r7, lr}
    d692:	b082      	sub	sp, #8
    d694:	af00      	add	r7, sp, #0
    d696:	6078      	str	r0, [r7, #4]
    d698:	6039      	str	r1, [r7, #0]
    if (n == 0) {
    d69a:	683b      	ldr	r3, [r7, #0]
    d69c:	2b00      	cmp	r3, #0
    d69e:	d106      	bne.n	d6ae <mp_map_init+0x1e>
        map->alloc = 0;
    d6a0:	687b      	ldr	r3, [r7, #4]
    d6a2:	2200      	movs	r2, #0
    d6a4:	605a      	str	r2, [r3, #4]
        map->table = NULL;
    d6a6:	687b      	ldr	r3, [r7, #4]
    d6a8:	2200      	movs	r2, #0
    d6aa:	609a      	str	r2, [r3, #8]
    d6ac:	e00b      	b.n	d6c6 <mp_map_init+0x36>
    } else {
        map->alloc = n;
    d6ae:	687b      	ldr	r3, [r7, #4]
    d6b0:	683a      	ldr	r2, [r7, #0]
    d6b2:	605a      	str	r2, [r3, #4]
        map->table = m_new0(mp_map_elem_t, map->alloc);
    d6b4:	687b      	ldr	r3, [r7, #4]
    d6b6:	685b      	ldr	r3, [r3, #4]
    d6b8:	00db      	lsls	r3, r3, #3
    d6ba:	4618      	mov	r0, r3
    d6bc:	f7f2 fe62 	bl	384 <m_malloc0>
    d6c0:	4602      	mov	r2, r0
    d6c2:	687b      	ldr	r3, [r7, #4]
    d6c4:	609a      	str	r2, [r3, #8]
    }
    map->used = 0;
    d6c6:	687a      	ldr	r2, [r7, #4]
    d6c8:	6813      	ldr	r3, [r2, #0]
    d6ca:	f36f 03df 	bfc	r3, #3, #29
    d6ce:	6013      	str	r3, [r2, #0]
    map->all_keys_are_qstrs = 1;
    d6d0:	687a      	ldr	r2, [r7, #4]
    d6d2:	7813      	ldrb	r3, [r2, #0]
    d6d4:	f043 0301 	orr.w	r3, r3, #1
    d6d8:	7013      	strb	r3, [r2, #0]
    map->is_fixed = 0;
    d6da:	687a      	ldr	r2, [r7, #4]
    d6dc:	7813      	ldrb	r3, [r2, #0]
    d6de:	f36f 0341 	bfc	r3, #1, #1
    d6e2:	7013      	strb	r3, [r2, #0]
    map->is_ordered = 0;
    d6e4:	687a      	ldr	r2, [r7, #4]
    d6e6:	7813      	ldrb	r3, [r2, #0]
    d6e8:	f36f 0382 	bfc	r3, #2, #1
    d6ec:	7013      	strb	r3, [r2, #0]
}
    d6ee:	bf00      	nop
    d6f0:	3708      	adds	r7, #8
    d6f2:	46bd      	mov	sp, r7
    d6f4:	bd80      	pop	{r7, pc}

0000d6f6 <mp_map_init_fixed_table>:

void mp_map_init_fixed_table(mp_map_t *map, size_t n, const mp_obj_t *table) {
    d6f6:	b480      	push	{r7}
    d6f8:	b085      	sub	sp, #20
    d6fa:	af00      	add	r7, sp, #0
    d6fc:	60f8      	str	r0, [r7, #12]
    d6fe:	60b9      	str	r1, [r7, #8]
    d700:	607a      	str	r2, [r7, #4]
    map->alloc = n;
    d702:	68fb      	ldr	r3, [r7, #12]
    d704:	68ba      	ldr	r2, [r7, #8]
    d706:	605a      	str	r2, [r3, #4]
    map->used = n;
    d708:	68bb      	ldr	r3, [r7, #8]
    d70a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
    d70e:	68fa      	ldr	r2, [r7, #12]
    d710:	6813      	ldr	r3, [r2, #0]
    d712:	f361 03df 	bfi	r3, r1, #3, #29
    d716:	6013      	str	r3, [r2, #0]
    map->all_keys_are_qstrs = 1;
    d718:	68fa      	ldr	r2, [r7, #12]
    d71a:	7813      	ldrb	r3, [r2, #0]
    d71c:	f043 0301 	orr.w	r3, r3, #1
    d720:	7013      	strb	r3, [r2, #0]
    map->is_fixed = 1;
    d722:	68fa      	ldr	r2, [r7, #12]
    d724:	7813      	ldrb	r3, [r2, #0]
    d726:	f043 0302 	orr.w	r3, r3, #2
    d72a:	7013      	strb	r3, [r2, #0]
    map->is_ordered = 1;
    d72c:	68fa      	ldr	r2, [r7, #12]
    d72e:	7813      	ldrb	r3, [r2, #0]
    d730:	f043 0304 	orr.w	r3, r3, #4
    d734:	7013      	strb	r3, [r2, #0]
    map->table = (mp_map_elem_t*)table;
    d736:	68fb      	ldr	r3, [r7, #12]
    d738:	687a      	ldr	r2, [r7, #4]
    d73a:	609a      	str	r2, [r3, #8]
}
    d73c:	bf00      	nop
    d73e:	3714      	adds	r7, #20
    d740:	46bd      	mov	sp, r7
    d742:	f85d 7b04 	ldr.w	r7, [sp], #4
    d746:	4770      	bx	lr

0000d748 <mp_map_deinit>:

// Differentiate from mp_map_clear() - semantics is different
void mp_map_deinit(mp_map_t *map) {
    d748:	b580      	push	{r7, lr}
    d74a:	b082      	sub	sp, #8
    d74c:	af00      	add	r7, sp, #0
    d74e:	6078      	str	r0, [r7, #4]
    if (!map->is_fixed) {
    d750:	687b      	ldr	r3, [r7, #4]
    d752:	781b      	ldrb	r3, [r3, #0]
    d754:	f003 0302 	and.w	r3, r3, #2
    d758:	b2db      	uxtb	r3, r3
    d75a:	2b00      	cmp	r3, #0
    d75c:	d104      	bne.n	d768 <mp_map_deinit+0x20>
        m_del(mp_map_elem_t, map->table, map->alloc);
    d75e:	687b      	ldr	r3, [r7, #4]
    d760:	689b      	ldr	r3, [r3, #8]
    d762:	4618      	mov	r0, r3
    d764:	f7f2 fe58 	bl	418 <m_free>
    }
    map->used = map->alloc = 0;
    d768:	687b      	ldr	r3, [r7, #4]
    d76a:	2200      	movs	r2, #0
    d76c:	605a      	str	r2, [r3, #4]
    d76e:	687a      	ldr	r2, [r7, #4]
    d770:	6813      	ldr	r3, [r2, #0]
    d772:	f36f 03df 	bfc	r3, #3, #29
    d776:	6013      	str	r3, [r2, #0]
}
    d778:	bf00      	nop
    d77a:	3708      	adds	r7, #8
    d77c:	46bd      	mov	sp, r7
    d77e:	bd80      	pop	{r7, pc}

0000d780 <mp_map_clear>:

void mp_map_clear(mp_map_t *map) {
    d780:	b580      	push	{r7, lr}
    d782:	b082      	sub	sp, #8
    d784:	af00      	add	r7, sp, #0
    d786:	6078      	str	r0, [r7, #4]
    if (!map->is_fixed) {
    d788:	687b      	ldr	r3, [r7, #4]
    d78a:	781b      	ldrb	r3, [r3, #0]
    d78c:	f003 0302 	and.w	r3, r3, #2
    d790:	b2db      	uxtb	r3, r3
    d792:	2b00      	cmp	r3, #0
    d794:	d104      	bne.n	d7a0 <mp_map_clear+0x20>
        m_del(mp_map_elem_t, map->table, map->alloc);
    d796:	687b      	ldr	r3, [r7, #4]
    d798:	689b      	ldr	r3, [r3, #8]
    d79a:	4618      	mov	r0, r3
    d79c:	f7f2 fe3c 	bl	418 <m_free>
    }
    map->alloc = 0;
    d7a0:	687b      	ldr	r3, [r7, #4]
    d7a2:	2200      	movs	r2, #0
    d7a4:	605a      	str	r2, [r3, #4]
    map->used = 0;
    d7a6:	687a      	ldr	r2, [r7, #4]
    d7a8:	6813      	ldr	r3, [r2, #0]
    d7aa:	f36f 03df 	bfc	r3, #3, #29
    d7ae:	6013      	str	r3, [r2, #0]
    map->all_keys_are_qstrs = 1;
    d7b0:	687a      	ldr	r2, [r7, #4]
    d7b2:	7813      	ldrb	r3, [r2, #0]
    d7b4:	f043 0301 	orr.w	r3, r3, #1
    d7b8:	7013      	strb	r3, [r2, #0]
    map->is_fixed = 0;
    d7ba:	687a      	ldr	r2, [r7, #4]
    d7bc:	7813      	ldrb	r3, [r2, #0]
    d7be:	f36f 0341 	bfc	r3, #1, #1
    d7c2:	7013      	strb	r3, [r2, #0]
    map->table = NULL;
    d7c4:	687b      	ldr	r3, [r7, #4]
    d7c6:	2200      	movs	r2, #0
    d7c8:	609a      	str	r2, [r3, #8]
}
    d7ca:	bf00      	nop
    d7cc:	3708      	adds	r7, #8
    d7ce:	46bd      	mov	sp, r7
    d7d0:	bd80      	pop	{r7, pc}

0000d7d2 <mp_map_rehash>:

STATIC void mp_map_rehash(mp_map_t *map) {
    d7d2:	b580      	push	{r7, lr}
    d7d4:	b088      	sub	sp, #32
    d7d6:	af00      	add	r7, sp, #0
    d7d8:	6078      	str	r0, [r7, #4]
    size_t old_alloc = map->alloc;
    d7da:	687b      	ldr	r3, [r7, #4]
    d7dc:	685b      	ldr	r3, [r3, #4]
    d7de:	61bb      	str	r3, [r7, #24]
    size_t new_alloc = get_hash_alloc_greater_or_equal_to(map->alloc + 1);
    d7e0:	687b      	ldr	r3, [r7, #4]
    d7e2:	685b      	ldr	r3, [r3, #4]
    d7e4:	3301      	adds	r3, #1
    d7e6:	4618      	mov	r0, r3
    d7e8:	f7ff ff2a 	bl	d640 <get_hash_alloc_greater_or_equal_to>
    d7ec:	6178      	str	r0, [r7, #20]
    DEBUG_printf("mp_map_rehash(%p): " UINT_FMT " -> " UINT_FMT "\n", map, old_alloc, new_alloc);
    d7ee:	697b      	ldr	r3, [r7, #20]
    d7f0:	69ba      	ldr	r2, [r7, #24]
    d7f2:	6879      	ldr	r1, [r7, #4]
    d7f4:	4825      	ldr	r0, [pc, #148]	; (d88c <mp_map_rehash+0xba>)
    d7f6:	f00f f9f9 	bl	1cbec <DEBUG_printf>
    mp_map_elem_t *old_table = map->table;
    d7fa:	687b      	ldr	r3, [r7, #4]
    d7fc:	689b      	ldr	r3, [r3, #8]
    d7fe:	613b      	str	r3, [r7, #16]
    mp_map_elem_t *new_table = m_new0(mp_map_elem_t, new_alloc);
    d800:	697b      	ldr	r3, [r7, #20]
    d802:	00db      	lsls	r3, r3, #3
    d804:	4618      	mov	r0, r3
    d806:	f7f2 fdbd 	bl	384 <m_malloc0>
    d80a:	60f8      	str	r0, [r7, #12]
    // If we reach this point, table resizing succeeded, now we can edit the old map.
    map->alloc = new_alloc;
    d80c:	687b      	ldr	r3, [r7, #4]
    d80e:	697a      	ldr	r2, [r7, #20]
    d810:	605a      	str	r2, [r3, #4]
    map->used = 0;
    d812:	687a      	ldr	r2, [r7, #4]
    d814:	6813      	ldr	r3, [r2, #0]
    d816:	f36f 03df 	bfc	r3, #3, #29
    d81a:	6013      	str	r3, [r2, #0]
    map->all_keys_are_qstrs = 1;
    d81c:	687a      	ldr	r2, [r7, #4]
    d81e:	7813      	ldrb	r3, [r2, #0]
    d820:	f043 0301 	orr.w	r3, r3, #1
    d824:	7013      	strb	r3, [r2, #0]
    map->table = new_table;
    d826:	687b      	ldr	r3, [r7, #4]
    d828:	68fa      	ldr	r2, [r7, #12]
    d82a:	609a      	str	r2, [r3, #8]
    for (size_t i = 0; i < old_alloc; i++) {
    d82c:	2300      	movs	r3, #0
    d82e:	61fb      	str	r3, [r7, #28]
    d830:	e021      	b.n	d876 <mp_map_rehash+0xa4>
        if (old_table[i].key != MP_OBJ_NULL && old_table[i].key != MP_OBJ_SENTINEL) {
    d832:	69fb      	ldr	r3, [r7, #28]
    d834:	00db      	lsls	r3, r3, #3
    d836:	693a      	ldr	r2, [r7, #16]
    d838:	4413      	add	r3, r2
    d83a:	681b      	ldr	r3, [r3, #0]
    d83c:	2b00      	cmp	r3, #0
    d83e:	d017      	beq.n	d870 <mp_map_rehash+0x9e>
    d840:	69fb      	ldr	r3, [r7, #28]
    d842:	00db      	lsls	r3, r3, #3
    d844:	693a      	ldr	r2, [r7, #16]
    d846:	4413      	add	r3, r2
    d848:	681b      	ldr	r3, [r3, #0]
    d84a:	2b08      	cmp	r3, #8
    d84c:	d010      	beq.n	d870 <mp_map_rehash+0x9e>
            mp_map_lookup(map, old_table[i].key, MP_MAP_LOOKUP_ADD_IF_NOT_FOUND)->value = old_table[i].value;
    d84e:	69fb      	ldr	r3, [r7, #28]
    d850:	00db      	lsls	r3, r3, #3
    d852:	693a      	ldr	r2, [r7, #16]
    d854:	4413      	add	r3, r2
    d856:	681b      	ldr	r3, [r3, #0]
    d858:	2201      	movs	r2, #1
    d85a:	4619      	mov	r1, r3
    d85c:	6878      	ldr	r0, [r7, #4]
    d85e:	f000 f817 	bl	d890 <mp_map_lookup>
    d862:	4601      	mov	r1, r0
    d864:	69fb      	ldr	r3, [r7, #28]
    d866:	00db      	lsls	r3, r3, #3
    d868:	693a      	ldr	r2, [r7, #16]
    d86a:	4413      	add	r3, r2
    d86c:	685b      	ldr	r3, [r3, #4]
    d86e:	604b      	str	r3, [r1, #4]
    for (size_t i = 0; i < old_alloc; i++) {
    d870:	69fb      	ldr	r3, [r7, #28]
    d872:	3301      	adds	r3, #1
    d874:	61fb      	str	r3, [r7, #28]
    d876:	69fa      	ldr	r2, [r7, #28]
    d878:	69bb      	ldr	r3, [r7, #24]
    d87a:	429a      	cmp	r2, r3
    d87c:	d3d9      	bcc.n	d832 <mp_map_rehash+0x60>
        }
    }
    m_del(mp_map_elem_t, old_table, old_alloc);
    d87e:	6938      	ldr	r0, [r7, #16]
    d880:	f7f2 fdca 	bl	418 <m_free>
}
    d884:	bf00      	nop
    d886:	3720      	adds	r7, #32
    d888:	46bd      	mov	sp, r7
    d88a:	bd80      	pop	{r7, pc}
    d88c:	000235f8 	.word	0x000235f8

0000d890 <mp_map_lookup>:
//  - returns NULL if not found, else the slot it was found in with key,value non-null
// MP_MAP_LOOKUP_ADD_IF_NOT_FOUND behaviour:
//  - returns slot, with key non-null and value=MP_OBJ_NULL if it was added
// MP_MAP_LOOKUP_REMOVE_IF_FOUND behaviour:
//  - returns NULL if not found, else the slot if was found in with key null and value non-null
mp_map_elem_t *mp_map_lookup(mp_map_t *map, mp_obj_t index, mp_map_lookup_kind_t lookup_kind) {
    d890:	b580      	push	{r7, lr}
    d892:	b08c      	sub	sp, #48	; 0x30
    d894:	af00      	add	r7, sp, #0
    d896:	60f8      	str	r0, [r7, #12]
    d898:	60b9      	str	r1, [r7, #8]
    d89a:	607a      	str	r2, [r7, #4]
    // If the map is a fixed array then we must only be called for a lookup
    assert(!map->is_fixed || lookup_kind == MP_MAP_LOOKUP);
    d89c:	68fb      	ldr	r3, [r7, #12]
    d89e:	781b      	ldrb	r3, [r3, #0]
    d8a0:	f003 0302 	and.w	r3, r3, #2
    d8a4:	b2db      	uxtb	r3, r3
    d8a6:	2b00      	cmp	r3, #0
    d8a8:	d008      	beq.n	d8bc <mp_map_lookup+0x2c>
    d8aa:	687b      	ldr	r3, [r7, #4]
    d8ac:	2b00      	cmp	r3, #0
    d8ae:	d005      	beq.n	d8bc <mp_map_lookup+0x2c>
    d8b0:	4ba3      	ldr	r3, [pc, #652]	; (db40 <mp_map_lookup+0x2b0>)
    d8b2:	4aa4      	ldr	r2, [pc, #656]	; (db44 <mp_map_lookup+0x2b4>)
    d8b4:	2194      	movs	r1, #148	; 0x94
    d8b6:	48a4      	ldr	r0, [pc, #656]	; (db48 <mp_map_lookup+0x2b8>)
    d8b8:	f00f fb12 	bl	1cee0 <__assert_func>

    // Work out if we can compare just pointers
    bool compare_only_ptrs = map->all_keys_are_qstrs;
    d8bc:	68fb      	ldr	r3, [r7, #12]
    d8be:	781b      	ldrb	r3, [r3, #0]
    d8c0:	f3c3 0300 	ubfx	r3, r3, #0, #1
    d8c4:	b2db      	uxtb	r3, r3
    d8c6:	2b00      	cmp	r3, #0
    d8c8:	bf14      	ite	ne
    d8ca:	2301      	movne	r3, #1
    d8cc:	2300      	moveq	r3, #0
    d8ce:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (compare_only_ptrs) {
    d8d2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    d8d6:	2b00      	cmp	r3, #0
    d8d8:	d019      	beq.n	d90e <mp_map_lookup+0x7e>
        if (MP_OBJ_IS_QSTR(index)) {
    d8da:	68b8      	ldr	r0, [r7, #8]
    d8dc:	f7ff fe8c 	bl	d5f8 <MP_OBJ_IS_QSTR>
    d8e0:	4603      	mov	r3, r0
    d8e2:	2b00      	cmp	r3, #0
    d8e4:	d113      	bne.n	d90e <mp_map_lookup+0x7e>
            // Index is a qstr, so can just do ptr comparison.
        } else if (MP_OBJ_IS_TYPE(index, &mp_type_str)) {
    d8e6:	68b8      	ldr	r0, [r7, #8]
    d8e8:	f7ff fe98 	bl	d61c <MP_OBJ_IS_OBJ>
    d8ec:	4603      	mov	r3, r0
    d8ee:	2b00      	cmp	r3, #0
    d8f0:	d008      	beq.n	d904 <mp_map_lookup+0x74>
    d8f2:	68bb      	ldr	r3, [r7, #8]
    d8f4:	681b      	ldr	r3, [r3, #0]
    d8f6:	4a95      	ldr	r2, [pc, #596]	; (db4c <mp_map_lookup+0x2bc>)
    d8f8:	4293      	cmp	r3, r2
    d8fa:	d103      	bne.n	d904 <mp_map_lookup+0x74>
            // Index is a non-interned string.
            // We can either intern the string, or force a full equality comparison.
            // We chose the latter, since interning costs time and potentially RAM,
            // and it won't necessarily benefit subsequent calls because these calls
            // most likely won't pass the newly-interned string.
            compare_only_ptrs = false;
    d8fc:	2300      	movs	r3, #0
    d8fe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    d902:	e004      	b.n	d90e <mp_map_lookup+0x7e>
        } else if (lookup_kind != MP_MAP_LOOKUP_ADD_IF_NOT_FOUND) {
    d904:	687b      	ldr	r3, [r7, #4]
    d906:	2b01      	cmp	r3, #1
    d908:	d001      	beq.n	d90e <mp_map_lookup+0x7e>
            // If we are not adding, then we can return straight away a failed
            // lookup because we know that the index will never be found.
            return NULL;
    d90a:	2300      	movs	r3, #0
    d90c:	e130      	b.n	db70 <mp_map_lookup+0x2e0>
        }
    }

    // if the map is an ordered array then we must do a brute force linear search
    if (map->is_ordered) {
    d90e:	68fb      	ldr	r3, [r7, #12]
    d910:	781b      	ldrb	r3, [r3, #0]
    d912:	f003 0304 	and.w	r3, r3, #4
    d916:	b2db      	uxtb	r3, r3
    d918:	2b00      	cmp	r3, #0
    d91a:	d02c      	beq.n	d976 <mp_map_lookup+0xe6>
        for (mp_map_elem_t *elem = &map->table[0], *top = &map->table[map->used]; elem < top; elem++) {
    d91c:	68fb      	ldr	r3, [r7, #12]
    d91e:	689b      	ldr	r3, [r3, #8]
    d920:	62bb      	str	r3, [r7, #40]	; 0x28
    d922:	68fb      	ldr	r3, [r7, #12]
    d924:	689a      	ldr	r2, [r3, #8]
    d926:	68fb      	ldr	r3, [r7, #12]
    d928:	681b      	ldr	r3, [r3, #0]
    d92a:	f3c3 03dc 	ubfx	r3, r3, #3, #29
    d92e:	00db      	lsls	r3, r3, #3
    d930:	4413      	add	r3, r2
    d932:	617b      	str	r3, [r7, #20]
    d934:	e019      	b.n	d96a <mp_map_lookup+0xda>
            if (elem->key == index || (!compare_only_ptrs && mp_obj_equal(elem->key, index))) {
    d936:	6abb      	ldr	r3, [r7, #40]	; 0x28
    d938:	681a      	ldr	r2, [r3, #0]
    d93a:	68bb      	ldr	r3, [r7, #8]
    d93c:	429a      	cmp	r2, r3
    d93e:	d00f      	beq.n	d960 <mp_map_lookup+0xd0>
    d940:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    d944:	f083 0301 	eor.w	r3, r3, #1
    d948:	b2db      	uxtb	r3, r3
    d94a:	2b00      	cmp	r3, #0
    d94c:	d00a      	beq.n	d964 <mp_map_lookup+0xd4>
    d94e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    d950:	681b      	ldr	r3, [r3, #0]
    d952:	68b9      	ldr	r1, [r7, #8]
    d954:	4618      	mov	r0, r3
    d956:	f000 fad3 	bl	df00 <mp_obj_equal>
    d95a:	4603      	mov	r3, r0
    d95c:	2b00      	cmp	r3, #0
    d95e:	d001      	beq.n	d964 <mp_map_lookup+0xd4>
                    elem = &map->table[map->used];
                    elem->key = MP_OBJ_NULL;
                    elem->value = value;
                }
                #endif
                return elem;
    d960:	6abb      	ldr	r3, [r7, #40]	; 0x28
    d962:	e105      	b.n	db70 <mp_map_lookup+0x2e0>
        for (mp_map_elem_t *elem = &map->table[0], *top = &map->table[map->used]; elem < top; elem++) {
    d964:	6abb      	ldr	r3, [r7, #40]	; 0x28
    d966:	3308      	adds	r3, #8
    d968:	62bb      	str	r3, [r7, #40]	; 0x28
    d96a:	6aba      	ldr	r2, [r7, #40]	; 0x28
    d96c:	697b      	ldr	r3, [r7, #20]
    d96e:	429a      	cmp	r2, r3
    d970:	d3e1      	bcc.n	d936 <mp_map_lookup+0xa6>
        if (!MP_OBJ_IS_QSTR(index)) {
            map->all_keys_are_qstrs = 0;
        }
        return elem;
        #else
        return NULL;
    d972:	2300      	movs	r3, #0
    d974:	e0fc      	b.n	db70 <mp_map_lookup+0x2e0>
        #endif
    }

    // map is a hash table (not an ordered array), so do a hash lookup

    if (map->alloc == 0) {
    d976:	68fb      	ldr	r3, [r7, #12]
    d978:	685b      	ldr	r3, [r3, #4]
    d97a:	2b00      	cmp	r3, #0
    d97c:	d108      	bne.n	d990 <mp_map_lookup+0x100>
        if (lookup_kind == MP_MAP_LOOKUP_ADD_IF_NOT_FOUND) {
    d97e:	687b      	ldr	r3, [r7, #4]
    d980:	2b01      	cmp	r3, #1
    d982:	d103      	bne.n	d98c <mp_map_lookup+0xfc>
            mp_map_rehash(map);
    d984:	68f8      	ldr	r0, [r7, #12]
    d986:	f7ff ff24 	bl	d7d2 <mp_map_rehash>
    d98a:	e001      	b.n	d990 <mp_map_lookup+0x100>
        } else {
            return NULL;
    d98c:	2300      	movs	r3, #0
    d98e:	e0ef      	b.n	db70 <mp_map_lookup+0x2e0>
        }
    }

    // get hash of index, with fast path for common case of qstr
    mp_uint_t hash;
    if (MP_OBJ_IS_QSTR(index)) {
    d990:	68b8      	ldr	r0, [r7, #8]
    d992:	f7ff fe31 	bl	d5f8 <MP_OBJ_IS_QSTR>
    d996:	4603      	mov	r3, r0
    d998:	2b00      	cmp	r3, #0
    d99a:	d006      	beq.n	d9aa <mp_map_lookup+0x11a>
        hash = qstr_hash(MP_OBJ_QSTR_VALUE(index));
    d99c:	68bb      	ldr	r3, [r7, #8]
    d99e:	089b      	lsrs	r3, r3, #2
    d9a0:	4618      	mov	r0, r3
    d9a2:	f7f3 fcf9 	bl	1398 <qstr_hash>
    d9a6:	6278      	str	r0, [r7, #36]	; 0x24
    d9a8:	e006      	b.n	d9b8 <mp_map_lookup+0x128>
    } else {
        hash = MP_OBJ_SMALL_INT_VALUE(mp_unary_op(MP_UNARY_OP_HASH, index));
    d9aa:	68b9      	ldr	r1, [r7, #8]
    d9ac:	2006      	movs	r0, #6
    d9ae:	f7fe f81d 	bl	b9ec <mp_unary_op>
    d9b2:	4603      	mov	r3, r0
    d9b4:	105b      	asrs	r3, r3, #1
    d9b6:	627b      	str	r3, [r7, #36]	; 0x24
    }

    size_t pos = hash % map->alloc;
    d9b8:	68fb      	ldr	r3, [r7, #12]
    d9ba:	685a      	ldr	r2, [r3, #4]
    d9bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    d9be:	fbb3 f1f2 	udiv	r1, r3, r2
    d9c2:	fb02 f201 	mul.w	r2, r2, r1
    d9c6:	1a9b      	subs	r3, r3, r2
    d9c8:	623b      	str	r3, [r7, #32]
    size_t start_pos = pos;
    d9ca:	6a3b      	ldr	r3, [r7, #32]
    d9cc:	61fb      	str	r3, [r7, #28]
    mp_map_elem_t *avail_slot = NULL;
    d9ce:	2300      	movs	r3, #0
    d9d0:	61bb      	str	r3, [r7, #24]
    for (;;) {
        mp_map_elem_t *slot = &map->table[pos];
    d9d2:	68fb      	ldr	r3, [r7, #12]
    d9d4:	689a      	ldr	r2, [r3, #8]
    d9d6:	6a3b      	ldr	r3, [r7, #32]
    d9d8:	00db      	lsls	r3, r3, #3
    d9da:	4413      	add	r3, r2
    d9dc:	613b      	str	r3, [r7, #16]
        if (slot->key == MP_OBJ_NULL) {
    d9de:	693b      	ldr	r3, [r7, #16]
    d9e0:	681b      	ldr	r3, [r3, #0]
    d9e2:	2b00      	cmp	r3, #0
    d9e4:	d12b      	bne.n	da3e <mp_map_lookup+0x1ae>
            // found NULL slot, so index is not in table
            if (lookup_kind == MP_MAP_LOOKUP_ADD_IF_NOT_FOUND) {
    d9e6:	687b      	ldr	r3, [r7, #4]
    d9e8:	2b01      	cmp	r3, #1
    d9ea:	d126      	bne.n	da3a <mp_map_lookup+0x1aa>
                map->used += 1;
    d9ec:	68fb      	ldr	r3, [r7, #12]
    d9ee:	681b      	ldr	r3, [r3, #0]
    d9f0:	f3c3 03dc 	ubfx	r3, r3, #3, #29
    d9f4:	3301      	adds	r3, #1
    d9f6:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
    d9fa:	68fa      	ldr	r2, [r7, #12]
    d9fc:	6813      	ldr	r3, [r2, #0]
    d9fe:	f361 03df 	bfi	r3, r1, #3, #29
    da02:	6013      	str	r3, [r2, #0]
                if (avail_slot == NULL) {
    da04:	69bb      	ldr	r3, [r7, #24]
    da06:	2b00      	cmp	r3, #0
    da08:	d101      	bne.n	da0e <mp_map_lookup+0x17e>
                    avail_slot = slot;
    da0a:	693b      	ldr	r3, [r7, #16]
    da0c:	61bb      	str	r3, [r7, #24]
                }
                avail_slot->key = index;
    da0e:	69bb      	ldr	r3, [r7, #24]
    da10:	68ba      	ldr	r2, [r7, #8]
    da12:	601a      	str	r2, [r3, #0]
                avail_slot->value = MP_OBJ_NULL;
    da14:	69bb      	ldr	r3, [r7, #24]
    da16:	2200      	movs	r2, #0
    da18:	605a      	str	r2, [r3, #4]
                if (!MP_OBJ_IS_QSTR(index)) {
    da1a:	68b8      	ldr	r0, [r7, #8]
    da1c:	f7ff fdec 	bl	d5f8 <MP_OBJ_IS_QSTR>
    da20:	4603      	mov	r3, r0
    da22:	f083 0301 	eor.w	r3, r3, #1
    da26:	b2db      	uxtb	r3, r3
    da28:	2b00      	cmp	r3, #0
    da2a:	d004      	beq.n	da36 <mp_map_lookup+0x1a6>
                    map->all_keys_are_qstrs = 0;
    da2c:	68fa      	ldr	r2, [r7, #12]
    da2e:	7813      	ldrb	r3, [r2, #0]
    da30:	f36f 0300 	bfc	r3, #0, #1
    da34:	7013      	strb	r3, [r2, #0]
                }
                return avail_slot;
    da36:	69bb      	ldr	r3, [r7, #24]
    da38:	e09a      	b.n	db70 <mp_map_lookup+0x2e0>
            } else {
                return NULL;
    da3a:	2300      	movs	r3, #0
    da3c:	e098      	b.n	db70 <mp_map_lookup+0x2e0>
            }
        } else if (slot->key == MP_OBJ_SENTINEL) {
    da3e:	693b      	ldr	r3, [r7, #16]
    da40:	681b      	ldr	r3, [r3, #0]
    da42:	2b08      	cmp	r3, #8
    da44:	d105      	bne.n	da52 <mp_map_lookup+0x1c2>
            // found deleted slot, remember for later
            if (avail_slot == NULL) {
    da46:	69bb      	ldr	r3, [r7, #24]
    da48:	2b00      	cmp	r3, #0
    da4a:	d141      	bne.n	dad0 <mp_map_lookup+0x240>
                avail_slot = slot;
    da4c:	693b      	ldr	r3, [r7, #16]
    da4e:	61bb      	str	r3, [r7, #24]
    da50:	e03e      	b.n	dad0 <mp_map_lookup+0x240>
            }
        } else if (slot->key == index || (!compare_only_ptrs && mp_obj_equal(slot->key, index))) {
    da52:	693b      	ldr	r3, [r7, #16]
    da54:	681a      	ldr	r2, [r3, #0]
    da56:	68bb      	ldr	r3, [r7, #8]
    da58:	429a      	cmp	r2, r3
    da5a:	d00f      	beq.n	da7c <mp_map_lookup+0x1ec>
    da5c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    da60:	f083 0301 	eor.w	r3, r3, #1
    da64:	b2db      	uxtb	r3, r3
    da66:	2b00      	cmp	r3, #0
    da68:	d032      	beq.n	dad0 <mp_map_lookup+0x240>
    da6a:	693b      	ldr	r3, [r7, #16]
    da6c:	681b      	ldr	r3, [r3, #0]
    da6e:	68b9      	ldr	r1, [r7, #8]
    da70:	4618      	mov	r0, r3
    da72:	f000 fa45 	bl	df00 <mp_obj_equal>
    da76:	4603      	mov	r3, r0
    da78:	2b00      	cmp	r3, #0
    da7a:	d029      	beq.n	dad0 <mp_map_lookup+0x240>
            // found index
            // Note: CPython does not replace the index; try x={True:'true'};x[1]='one';x
            if (lookup_kind == MP_MAP_LOOKUP_REMOVE_IF_FOUND) {
    da7c:	687b      	ldr	r3, [r7, #4]
    da7e:	2b02      	cmp	r3, #2
    da80:	d124      	bne.n	dacc <mp_map_lookup+0x23c>
                // delete element in this slot
                map->used--;
    da82:	68fb      	ldr	r3, [r7, #12]
    da84:	681b      	ldr	r3, [r3, #0]
    da86:	f3c3 03dc 	ubfx	r3, r3, #3, #29
    da8a:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
    da8e:	3b01      	subs	r3, #1
    da90:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
    da94:	68f9      	ldr	r1, [r7, #12]
    da96:	680a      	ldr	r2, [r1, #0]
    da98:	f363 02df 	bfi	r2, r3, #3, #29
    da9c:	600a      	str	r2, [r1, #0]
                if (map->table[(pos + 1) % map->alloc].key == MP_OBJ_NULL) {
    da9e:	68fb      	ldr	r3, [r7, #12]
    daa0:	6899      	ldr	r1, [r3, #8]
    daa2:	6a3b      	ldr	r3, [r7, #32]
    daa4:	3301      	adds	r3, #1
    daa6:	68fa      	ldr	r2, [r7, #12]
    daa8:	6852      	ldr	r2, [r2, #4]
    daaa:	fbb3 f0f2 	udiv	r0, r3, r2
    daae:	fb02 f200 	mul.w	r2, r2, r0
    dab2:	1a9b      	subs	r3, r3, r2
    dab4:	00db      	lsls	r3, r3, #3
    dab6:	440b      	add	r3, r1
    dab8:	681b      	ldr	r3, [r3, #0]
    daba:	2b00      	cmp	r3, #0
    dabc:	d103      	bne.n	dac6 <mp_map_lookup+0x236>
                    // optimisation if next slot is empty
                    slot->key = MP_OBJ_NULL;
    dabe:	693b      	ldr	r3, [r7, #16]
    dac0:	2200      	movs	r2, #0
    dac2:	601a      	str	r2, [r3, #0]
    dac4:	e002      	b.n	dacc <mp_map_lookup+0x23c>
                } else {
                    slot->key = MP_OBJ_SENTINEL;
    dac6:	693b      	ldr	r3, [r7, #16]
    dac8:	2208      	movs	r2, #8
    daca:	601a      	str	r2, [r3, #0]
                }
                // keep slot->value so that caller can access it if needed
            }
            return slot;
    dacc:	693b      	ldr	r3, [r7, #16]
    dace:	e04f      	b.n	db70 <mp_map_lookup+0x2e0>
        }

        // not yet found, keep searching in this table
        pos = (pos + 1) % map->alloc;
    dad0:	6a3b      	ldr	r3, [r7, #32]
    dad2:	3301      	adds	r3, #1
    dad4:	68fa      	ldr	r2, [r7, #12]
    dad6:	6852      	ldr	r2, [r2, #4]
    dad8:	fbb3 f1f2 	udiv	r1, r3, r2
    dadc:	fb02 f201 	mul.w	r2, r2, r1
    dae0:	1a9b      	subs	r3, r3, r2
    dae2:	623b      	str	r3, [r7, #32]

        if (pos == start_pos) {
    dae4:	6a3a      	ldr	r2, [r7, #32]
    dae6:	69fb      	ldr	r3, [r7, #28]
    dae8:	429a      	cmp	r2, r3
    daea:	f47f af72 	bne.w	d9d2 <mp_map_lookup+0x142>
            // search got back to starting position, so index is not in table
            if (lookup_kind == MP_MAP_LOOKUP_ADD_IF_NOT_FOUND) {
    daee:	687b      	ldr	r3, [r7, #4]
    daf0:	2b01      	cmp	r3, #1
    daf2:	d13c      	bne.n	db6e <mp_map_lookup+0x2de>
                if (avail_slot != NULL) {
    daf4:	69bb      	ldr	r3, [r7, #24]
    daf6:	2b00      	cmp	r3, #0
    daf8:	d02a      	beq.n	db50 <mp_map_lookup+0x2c0>
                    // there was an available slot, so use that
                    map->used++;
    dafa:	68fb      	ldr	r3, [r7, #12]
    dafc:	681b      	ldr	r3, [r3, #0]
    dafe:	f3c3 03dc 	ubfx	r3, r3, #3, #29
    db02:	1c5a      	adds	r2, r3, #1
    db04:	f022 4260 	bic.w	r2, r2, #3758096384	; 0xe0000000
    db08:	68f9      	ldr	r1, [r7, #12]
    db0a:	680b      	ldr	r3, [r1, #0]
    db0c:	f362 03df 	bfi	r3, r2, #3, #29
    db10:	600b      	str	r3, [r1, #0]
                    avail_slot->key = index;
    db12:	69bb      	ldr	r3, [r7, #24]
    db14:	68ba      	ldr	r2, [r7, #8]
    db16:	601a      	str	r2, [r3, #0]
                    avail_slot->value = MP_OBJ_NULL;
    db18:	69bb      	ldr	r3, [r7, #24]
    db1a:	2200      	movs	r2, #0
    db1c:	605a      	str	r2, [r3, #4]
                    if (!MP_OBJ_IS_QSTR(index)) {
    db1e:	68b8      	ldr	r0, [r7, #8]
    db20:	f7ff fd6a 	bl	d5f8 <MP_OBJ_IS_QSTR>
    db24:	4603      	mov	r3, r0
    db26:	f083 0301 	eor.w	r3, r3, #1
    db2a:	b2db      	uxtb	r3, r3
    db2c:	2b00      	cmp	r3, #0
    db2e:	d004      	beq.n	db3a <mp_map_lookup+0x2aa>
                        map->all_keys_are_qstrs = 0;
    db30:	68fa      	ldr	r2, [r7, #12]
    db32:	7813      	ldrb	r3, [r2, #0]
    db34:	f36f 0300 	bfc	r3, #0, #1
    db38:	7013      	strb	r3, [r2, #0]
                    }
                    return avail_slot;
    db3a:	69bb      	ldr	r3, [r7, #24]
    db3c:	e018      	b.n	db70 <mp_map_lookup+0x2e0>
    db3e:	bf00      	nop
    db40:	00023618 	.word	0x00023618
    db44:	00023670 	.word	0x00023670
    db48:	00023648 	.word	0x00023648
    db4c:	000257b0 	.word	0x000257b0
                } else {
                    // not enough room in table, rehash it
                    mp_map_rehash(map);
    db50:	68f8      	ldr	r0, [r7, #12]
    db52:	f7ff fe3e 	bl	d7d2 <mp_map_rehash>
                    // restart the search for the new element
                    start_pos = pos = hash % map->alloc;
    db56:	68fb      	ldr	r3, [r7, #12]
    db58:	685a      	ldr	r2, [r3, #4]
    db5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    db5c:	fbb3 f1f2 	udiv	r1, r3, r2
    db60:	fb02 f201 	mul.w	r2, r2, r1
    db64:	1a9b      	subs	r3, r3, r2
    db66:	623b      	str	r3, [r7, #32]
    db68:	6a3b      	ldr	r3, [r7, #32]
    db6a:	61fb      	str	r3, [r7, #28]
    db6c:	e731      	b.n	d9d2 <mp_map_lookup+0x142>
                }
            } else {
                return NULL;
    db6e:	2300      	movs	r3, #0
            }
        }
    }
}
    db70:	4618      	mov	r0, r3
    db72:	3730      	adds	r7, #48	; 0x30
    db74:	46bd      	mov	sp, r7
    db76:	bd80      	pop	{r7, pc}

0000db78 <mp_map_dump>:
}

#endif // MICROPY_PY_BUILTINS_SET

#if defined(DEBUG_PRINT) && DEBUG_PRINT
void mp_map_dump(mp_map_t *map) {
    db78:	b580      	push	{r7, lr}
    db7a:	b084      	sub	sp, #16
    db7c:	af00      	add	r7, sp, #0
    db7e:	6078      	str	r0, [r7, #4]
    for (size_t i = 0; i < map->alloc; i++) {
    db80:	2300      	movs	r3, #0
    db82:	60fb      	str	r3, [r7, #12]
    db84:	e022      	b.n	dbcc <mp_map_dump+0x54>
        if (map->table[i].key != MP_OBJ_NULL) {
    db86:	687b      	ldr	r3, [r7, #4]
    db88:	689a      	ldr	r2, [r3, #8]
    db8a:	68fb      	ldr	r3, [r7, #12]
    db8c:	00db      	lsls	r3, r3, #3
    db8e:	4413      	add	r3, r2
    db90:	681b      	ldr	r3, [r3, #0]
    db92:	2b00      	cmp	r3, #0
    db94:	d00a      	beq.n	dbac <mp_map_dump+0x34>
            mp_obj_print(map->table[i].key, PRINT_REPR);
    db96:	687b      	ldr	r3, [r7, #4]
    db98:	689a      	ldr	r2, [r3, #8]
    db9a:	68fb      	ldr	r3, [r7, #12]
    db9c:	00db      	lsls	r3, r3, #3
    db9e:	4413      	add	r3, r2
    dba0:	681b      	ldr	r3, [r3, #0]
    dba2:	2101      	movs	r1, #1
    dba4:	4618      	mov	r0, r3
    dba6:	f000 f8b5 	bl	dd14 <mp_obj_print>
    dbaa:	e002      	b.n	dbb2 <mp_map_dump+0x3a>
        } else {
            DEBUG_printf("(nil)");
    dbac:	480d      	ldr	r0, [pc, #52]	; (dbe4 <mp_map_dump+0x6c>)
    dbae:	f00f f81d 	bl	1cbec <DEBUG_printf>
        }
        DEBUG_printf(": %p\n", map->table[i].value);
    dbb2:	687b      	ldr	r3, [r7, #4]
    dbb4:	689a      	ldr	r2, [r3, #8]
    dbb6:	68fb      	ldr	r3, [r7, #12]
    dbb8:	00db      	lsls	r3, r3, #3
    dbba:	4413      	add	r3, r2
    dbbc:	685b      	ldr	r3, [r3, #4]
    dbbe:	4619      	mov	r1, r3
    dbc0:	4809      	ldr	r0, [pc, #36]	; (dbe8 <mp_map_dump+0x70>)
    dbc2:	f00f f813 	bl	1cbec <DEBUG_printf>
    for (size_t i = 0; i < map->alloc; i++) {
    dbc6:	68fb      	ldr	r3, [r7, #12]
    dbc8:	3301      	adds	r3, #1
    dbca:	60fb      	str	r3, [r7, #12]
    dbcc:	687b      	ldr	r3, [r7, #4]
    dbce:	685a      	ldr	r2, [r3, #4]
    dbd0:	68fb      	ldr	r3, [r7, #12]
    dbd2:	429a      	cmp	r2, r3
    dbd4:	d8d7      	bhi.n	db86 <mp_map_dump+0xe>
    }
    DEBUG_printf("---\n");
    dbd6:	4805      	ldr	r0, [pc, #20]	; (dbec <mp_map_dump+0x74>)
    dbd8:	f00f f808 	bl	1cbec <DEBUG_printf>
}
    dbdc:	bf00      	nop
    dbde:	3710      	adds	r7, #16
    dbe0:	46bd      	mov	sp, r7
    dbe2:	bd80      	pop	{r7, pc}
    dbe4:	00023658 	.word	0x00023658
    dbe8:	00023660 	.word	0x00023660
    dbec:	00023668 	.word	0x00023668

0000dbf0 <MP_OBJ_IS_SMALL_INT>:
    { return ((((mp_int_t)(o)) & 1) != 0); }
    dbf0:	b480      	push	{r7}
    dbf2:	b083      	sub	sp, #12
    dbf4:	af00      	add	r7, sp, #0
    dbf6:	6078      	str	r0, [r7, #4]
    dbf8:	687b      	ldr	r3, [r7, #4]
    dbfa:	f003 0301 	and.w	r3, r3, #1
    dbfe:	2b00      	cmp	r3, #0
    dc00:	bf14      	ite	ne
    dc02:	2301      	movne	r3, #1
    dc04:	2300      	moveq	r3, #0
    dc06:	b2db      	uxtb	r3, r3
    dc08:	4618      	mov	r0, r3
    dc0a:	370c      	adds	r7, #12
    dc0c:	46bd      	mov	sp, r7
    dc0e:	f85d 7b04 	ldr.w	r7, [sp], #4
    dc12:	4770      	bx	lr

0000dc14 <MP_OBJ_IS_QSTR>:
    { return ((((mp_int_t)(o)) & 3) == 2); }
    dc14:	b480      	push	{r7}
    dc16:	b083      	sub	sp, #12
    dc18:	af00      	add	r7, sp, #0
    dc1a:	6078      	str	r0, [r7, #4]
    dc1c:	687b      	ldr	r3, [r7, #4]
    dc1e:	f003 0303 	and.w	r3, r3, #3
    dc22:	2b02      	cmp	r3, #2
    dc24:	bf0c      	ite	eq
    dc26:	2301      	moveq	r3, #1
    dc28:	2300      	movne	r3, #0
    dc2a:	b2db      	uxtb	r3, r3
    dc2c:	4618      	mov	r0, r3
    dc2e:	370c      	adds	r7, #12
    dc30:	46bd      	mov	sp, r7
    dc32:	f85d 7b04 	ldr.w	r7, [sp], #4
    dc36:	4770      	bx	lr

0000dc38 <MP_OBJ_IS_OBJ>:
    { return ((((mp_int_t)(o)) & 3) == 0); }
    dc38:	b480      	push	{r7}
    dc3a:	b083      	sub	sp, #12
    dc3c:	af00      	add	r7, sp, #0
    dc3e:	6078      	str	r0, [r7, #4]
    dc40:	687b      	ldr	r3, [r7, #4]
    dc42:	f003 0303 	and.w	r3, r3, #3
    dc46:	2b00      	cmp	r3, #0
    dc48:	bf0c      	ite	eq
    dc4a:	2301      	moveq	r3, #1
    dc4c:	2300      	movne	r3, #0
    dc4e:	b2db      	uxtb	r3, r3
    dc50:	4618      	mov	r0, r3
    dc52:	370c      	adds	r7, #12
    dc54:	46bd      	mov	sp, r7
    dc56:	f85d 7b04 	ldr.w	r7, [sp], #4
    dc5a:	4770      	bx	lr

0000dc5c <mp_obj_get_type>:
#include "py/objstr.h"
#include "py/runtime.h"
#include "py/stackctrl.h"
#include "py/stream.h" // for mp_obj_print

mp_obj_type_t *mp_obj_get_type(mp_const_obj_t o_in) {
    dc5c:	b580      	push	{r7, lr}
    dc5e:	b084      	sub	sp, #16
    dc60:	af00      	add	r7, sp, #0
    dc62:	6078      	str	r0, [r7, #4]
    if (MP_OBJ_IS_SMALL_INT(o_in)) {
    dc64:	6878      	ldr	r0, [r7, #4]
    dc66:	f7ff ffc3 	bl	dbf0 <MP_OBJ_IS_SMALL_INT>
    dc6a:	4603      	mov	r3, r0
    dc6c:	2b00      	cmp	r3, #0
    dc6e:	d001      	beq.n	dc74 <mp_obj_get_type+0x18>
        return (mp_obj_type_t*)&mp_type_int;
    dc70:	4b08      	ldr	r3, [pc, #32]	; (dc94 <mp_obj_get_type+0x38>)
    dc72:	e00b      	b.n	dc8c <mp_obj_get_type+0x30>
    } else if (MP_OBJ_IS_QSTR(o_in)) {
    dc74:	6878      	ldr	r0, [r7, #4]
    dc76:	f7ff ffcd 	bl	dc14 <MP_OBJ_IS_QSTR>
    dc7a:	4603      	mov	r3, r0
    dc7c:	2b00      	cmp	r3, #0
    dc7e:	d001      	beq.n	dc84 <mp_obj_get_type+0x28>
        return (mp_obj_type_t*)&mp_type_str;
    dc80:	4b05      	ldr	r3, [pc, #20]	; (dc98 <mp_obj_get_type+0x3c>)
    dc82:	e003      	b.n	dc8c <mp_obj_get_type+0x30>
    #if MICROPY_PY_BUILTINS_FLOAT
    } else if (mp_obj_is_float(o_in)) {
        return (mp_obj_type_t*)&mp_type_float;
    #endif
    } else {
        const mp_obj_base_t *o = MP_OBJ_TO_PTR(o_in);
    dc84:	687b      	ldr	r3, [r7, #4]
    dc86:	60fb      	str	r3, [r7, #12]
        return (mp_obj_type_t*)o->type;
    dc88:	68fb      	ldr	r3, [r7, #12]
    dc8a:	681b      	ldr	r3, [r3, #0]
    }
}
    dc8c:	4618      	mov	r0, r3
    dc8e:	3710      	adds	r7, #16
    dc90:	46bd      	mov	sp, r7
    dc92:	bd80      	pop	{r7, pc}
    dc94:	00024bd8 	.word	0x00024bd8
    dc98:	000257b0 	.word	0x000257b0

0000dc9c <mp_obj_get_type_str>:

const char *mp_obj_get_type_str(mp_const_obj_t o_in) {
    dc9c:	b580      	push	{r7, lr}
    dc9e:	b082      	sub	sp, #8
    dca0:	af00      	add	r7, sp, #0
    dca2:	6078      	str	r0, [r7, #4]
    return qstr_str(mp_obj_get_type(o_in)->name);
    dca4:	6878      	ldr	r0, [r7, #4]
    dca6:	f7ff ffd9 	bl	dc5c <mp_obj_get_type>
    dcaa:	4603      	mov	r3, r0
    dcac:	88db      	ldrh	r3, [r3, #6]
    dcae:	4618      	mov	r0, r3
    dcb0:	f7f3 fb8e 	bl	13d0 <qstr_str>
    dcb4:	4603      	mov	r3, r0
}
    dcb6:	4618      	mov	r0, r3
    dcb8:	3708      	adds	r7, #8
    dcba:	46bd      	mov	sp, r7
    dcbc:	bd80      	pop	{r7, pc}

0000dcbe <mp_obj_print_helper>:

void mp_obj_print_helper(const mp_print_t *print, mp_obj_t o_in, mp_print_kind_t kind) {
    dcbe:	b580      	push	{r7, lr}
    dcc0:	b086      	sub	sp, #24
    dcc2:	af00      	add	r7, sp, #0
    dcc4:	60f8      	str	r0, [r7, #12]
    dcc6:	60b9      	str	r1, [r7, #8]
    dcc8:	607a      	str	r2, [r7, #4]
    // There can be data structures nested too deep, or just recursive
    MP_STACK_CHECK();
#ifndef NDEBUG
    if (o_in == MP_OBJ_NULL) {
    dcca:	68bb      	ldr	r3, [r7, #8]
    dccc:	2b00      	cmp	r3, #0
    dcce:	d104      	bne.n	dcda <mp_obj_print_helper+0x1c>
        mp_print_str(print, "(nil)");
    dcd0:	490e      	ldr	r1, [pc, #56]	; (dd0c <mp_obj_print_helper+0x4e>)
    dcd2:	68f8      	ldr	r0, [r7, #12]
    dcd4:	f7f3 feba 	bl	1a4c <mp_print_str>
        return;
    dcd8:	e015      	b.n	dd06 <mp_obj_print_helper+0x48>
    }
#endif
    mp_obj_type_t *type = mp_obj_get_type(o_in);
    dcda:	68b8      	ldr	r0, [r7, #8]
    dcdc:	f7ff ffbe 	bl	dc5c <mp_obj_get_type>
    dce0:	6178      	str	r0, [r7, #20]
    if (type->print != NULL) {
    dce2:	697b      	ldr	r3, [r7, #20]
    dce4:	689b      	ldr	r3, [r3, #8]
    dce6:	2b00      	cmp	r3, #0
    dce8:	d006      	beq.n	dcf8 <mp_obj_print_helper+0x3a>
        type->print((mp_print_t*)print, o_in, kind);
    dcea:	697b      	ldr	r3, [r7, #20]
    dcec:	689b      	ldr	r3, [r3, #8]
    dcee:	687a      	ldr	r2, [r7, #4]
    dcf0:	68b9      	ldr	r1, [r7, #8]
    dcf2:	68f8      	ldr	r0, [r7, #12]
    dcf4:	4798      	blx	r3
    dcf6:	e006      	b.n	dd06 <mp_obj_print_helper+0x48>
    } else {
        mp_printf(print, "<%q>", type->name);
    dcf8:	697b      	ldr	r3, [r7, #20]
    dcfa:	88db      	ldrh	r3, [r3, #6]
    dcfc:	461a      	mov	r2, r3
    dcfe:	4904      	ldr	r1, [pc, #16]	; (dd10 <mp_obj_print_helper+0x52>)
    dd00:	68f8      	ldr	r0, [r7, #12]
    dd02:	f7f4 f9b5 	bl	2070 <mp_printf>
    }
}
    dd06:	3718      	adds	r7, #24
    dd08:	46bd      	mov	sp, r7
    dd0a:	bd80      	pop	{r7, pc}
    dd0c:	00023680 	.word	0x00023680
    dd10:	00023688 	.word	0x00023688

0000dd14 <mp_obj_print>:

void mp_obj_print(mp_obj_t o_in, mp_print_kind_t kind) {
    dd14:	b580      	push	{r7, lr}
    dd16:	b082      	sub	sp, #8
    dd18:	af00      	add	r7, sp, #0
    dd1a:	6078      	str	r0, [r7, #4]
    dd1c:	6039      	str	r1, [r7, #0]
    mp_obj_print_helper(MP_PYTHON_PRINTER, o_in, kind);
    dd1e:	683a      	ldr	r2, [r7, #0]
    dd20:	6879      	ldr	r1, [r7, #4]
    dd22:	4803      	ldr	r0, [pc, #12]	; (dd30 <mp_obj_print+0x1c>)
    dd24:	f7ff ffcb 	bl	dcbe <mp_obj_print_helper>
}
    dd28:	bf00      	nop
    dd2a:	3708      	adds	r7, #8
    dd2c:	46bd      	mov	sp, r7
    dd2e:	bd80      	pop	{r7, pc}
    dd30:	000210cc 	.word	0x000210cc

0000dd34 <mp_obj_print_exception>:

// helper function to print an exception with traceback
void mp_obj_print_exception(const mp_print_t *print, mp_obj_t exc) {
    dd34:	b580      	push	{r7, lr}
    dd36:	b086      	sub	sp, #24
    dd38:	af00      	add	r7, sp, #0
    dd3a:	6078      	str	r0, [r7, #4]
    dd3c:	6039      	str	r1, [r7, #0]
    if (mp_obj_is_exception_instance(exc)) {
    dd3e:	6838      	ldr	r0, [r7, #0]
    dd40:	f001 ff36 	bl	fbb0 <mp_obj_is_exception_instance>
    dd44:	4603      	mov	r3, r0
    dd46:	2b00      	cmp	r3, #0
    dd48:	d047      	beq.n	ddda <mp_obj_print_exception+0xa6>
        size_t n, *values;
        mp_obj_exception_get_traceback(exc, &n, &values);
    dd4a:	f107 0208 	add.w	r2, r7, #8
    dd4e:	f107 030c 	add.w	r3, r7, #12
    dd52:	4619      	mov	r1, r3
    dd54:	6838      	ldr	r0, [r7, #0]
    dd56:	f001 fffd 	bl	fd54 <mp_obj_exception_get_traceback>
        if (n > 0) {
    dd5a:	68fb      	ldr	r3, [r7, #12]
    dd5c:	2b00      	cmp	r3, #0
    dd5e:	d03c      	beq.n	ddda <mp_obj_print_exception+0xa6>
            assert(n % 3 == 0);
    dd60:	68f9      	ldr	r1, [r7, #12]
    dd62:	4b24      	ldr	r3, [pc, #144]	; (ddf4 <mp_obj_print_exception+0xc0>)
    dd64:	fba3 2301 	umull	r2, r3, r3, r1
    dd68:	085a      	lsrs	r2, r3, #1
    dd6a:	4613      	mov	r3, r2
    dd6c:	005b      	lsls	r3, r3, #1
    dd6e:	4413      	add	r3, r2
    dd70:	1aca      	subs	r2, r1, r3
    dd72:	2a00      	cmp	r2, #0
    dd74:	d005      	beq.n	dd82 <mp_obj_print_exception+0x4e>
    dd76:	4b20      	ldr	r3, [pc, #128]	; (ddf8 <mp_obj_print_exception+0xc4>)
    dd78:	4a20      	ldr	r2, [pc, #128]	; (ddfc <mp_obj_print_exception+0xc8>)
    dd7a:	2156      	movs	r1, #86	; 0x56
    dd7c:	4820      	ldr	r0, [pc, #128]	; (de00 <mp_obj_print_exception+0xcc>)
    dd7e:	f00f f8af 	bl	1cee0 <__assert_func>
            mp_print_str(print, "Traceback (most recent call last):\n");
    dd82:	4920      	ldr	r1, [pc, #128]	; (de04 <mp_obj_print_exception+0xd0>)
    dd84:	6878      	ldr	r0, [r7, #4]
    dd86:	f7f3 fe61 	bl	1a4c <mp_print_str>
            for (int i = n - 3; i >= 0; i -= 3) {
    dd8a:	68fb      	ldr	r3, [r7, #12]
    dd8c:	3b03      	subs	r3, #3
    dd8e:	617b      	str	r3, [r7, #20]
    dd90:	e020      	b.n	ddd4 <mp_obj_print_exception+0xa0>
#if MICROPY_ENABLE_SOURCE_LINE
                mp_printf(print, "  File \"%q\", line %d", values[i], (int)values[i + 1]);
#else
                mp_printf(print, "  File \"%q\"", values[i]);
    dd92:	68ba      	ldr	r2, [r7, #8]
    dd94:	697b      	ldr	r3, [r7, #20]
    dd96:	009b      	lsls	r3, r3, #2
    dd98:	4413      	add	r3, r2
    dd9a:	681b      	ldr	r3, [r3, #0]
    dd9c:	461a      	mov	r2, r3
    dd9e:	491a      	ldr	r1, [pc, #104]	; (de08 <mp_obj_print_exception+0xd4>)
    dda0:	6878      	ldr	r0, [r7, #4]
    dda2:	f7f4 f965 	bl	2070 <mp_printf>
#endif
                // the block name can be NULL if it's unknown
                qstr block = values[i + 2];
    dda6:	68ba      	ldr	r2, [r7, #8]
    dda8:	697b      	ldr	r3, [r7, #20]
    ddaa:	3302      	adds	r3, #2
    ddac:	009b      	lsls	r3, r3, #2
    ddae:	4413      	add	r3, r2
    ddb0:	681b      	ldr	r3, [r3, #0]
    ddb2:	613b      	str	r3, [r7, #16]
                if (block == MP_QSTR_NULL) {
    ddb4:	693b      	ldr	r3, [r7, #16]
    ddb6:	2b00      	cmp	r3, #0
    ddb8:	d104      	bne.n	ddc4 <mp_obj_print_exception+0x90>
                    mp_print_str(print, "\n");
    ddba:	4914      	ldr	r1, [pc, #80]	; (de0c <mp_obj_print_exception+0xd8>)
    ddbc:	6878      	ldr	r0, [r7, #4]
    ddbe:	f7f3 fe45 	bl	1a4c <mp_print_str>
    ddc2:	e004      	b.n	ddce <mp_obj_print_exception+0x9a>
                } else {
                    mp_printf(print, ", in %q\n", block);
    ddc4:	693a      	ldr	r2, [r7, #16]
    ddc6:	4912      	ldr	r1, [pc, #72]	; (de10 <mp_obj_print_exception+0xdc>)
    ddc8:	6878      	ldr	r0, [r7, #4]
    ddca:	f7f4 f951 	bl	2070 <mp_printf>
            for (int i = n - 3; i >= 0; i -= 3) {
    ddce:	697b      	ldr	r3, [r7, #20]
    ddd0:	3b03      	subs	r3, #3
    ddd2:	617b      	str	r3, [r7, #20]
    ddd4:	697b      	ldr	r3, [r7, #20]
    ddd6:	2b00      	cmp	r3, #0
    ddd8:	dadb      	bge.n	dd92 <mp_obj_print_exception+0x5e>
                }
            }
        }
    }
    mp_obj_print_helper(print, exc, PRINT_EXC);
    ddda:	2202      	movs	r2, #2
    dddc:	6839      	ldr	r1, [r7, #0]
    ddde:	6878      	ldr	r0, [r7, #4]
    dde0:	f7ff ff6d 	bl	dcbe <mp_obj_print_helper>
    mp_print_str(print, "\n");
    dde4:	4909      	ldr	r1, [pc, #36]	; (de0c <mp_obj_print_exception+0xd8>)
    dde6:	6878      	ldr	r0, [r7, #4]
    dde8:	f7f3 fe30 	bl	1a4c <mp_print_str>
}
    ddec:	bf00      	nop
    ddee:	3718      	adds	r7, #24
    ddf0:	46bd      	mov	sp, r7
    ddf2:	bd80      	pop	{r7, pc}
    ddf4:	aaaaaaab 	.word	0xaaaaaaab
    ddf8:	00023690 	.word	0x00023690
    ddfc:	000237fc 	.word	0x000237fc
    de00:	0002369c 	.word	0x0002369c
    de04:	000236ac 	.word	0x000236ac
    de08:	000236d0 	.word	0x000236d0
    de0c:	000236dc 	.word	0x000236dc
    de10:	000236e0 	.word	0x000236e0

0000de14 <mp_obj_is_true>:

bool mp_obj_is_true(mp_obj_t arg) {
    de14:	b580      	push	{r7, lr}
    de16:	b086      	sub	sp, #24
    de18:	af00      	add	r7, sp, #0
    de1a:	6078      	str	r0, [r7, #4]
    if (arg == mp_const_false) {
    de1c:	687b      	ldr	r3, [r7, #4]
    de1e:	4a25      	ldr	r2, [pc, #148]	; (deb4 <mp_obj_is_true+0xa0>)
    de20:	4293      	cmp	r3, r2
    de22:	d101      	bne.n	de28 <mp_obj_is_true+0x14>
        return 0;
    de24:	2300      	movs	r3, #0
    de26:	e041      	b.n	deac <mp_obj_is_true+0x98>
    } else if (arg == mp_const_true) {
    de28:	687b      	ldr	r3, [r7, #4]
    de2a:	4a23      	ldr	r2, [pc, #140]	; (deb8 <mp_obj_is_true+0xa4>)
    de2c:	4293      	cmp	r3, r2
    de2e:	d101      	bne.n	de34 <mp_obj_is_true+0x20>
        return 1;
    de30:	2301      	movs	r3, #1
    de32:	e03b      	b.n	deac <mp_obj_is_true+0x98>
    } else if (arg == mp_const_none) {
    de34:	687b      	ldr	r3, [r7, #4]
    de36:	4a21      	ldr	r2, [pc, #132]	; (debc <mp_obj_is_true+0xa8>)
    de38:	4293      	cmp	r3, r2
    de3a:	d101      	bne.n	de40 <mp_obj_is_true+0x2c>
        return 0;
    de3c:	2300      	movs	r3, #0
    de3e:	e035      	b.n	deac <mp_obj_is_true+0x98>
    } else if (MP_OBJ_IS_SMALL_INT(arg)) {
    de40:	6878      	ldr	r0, [r7, #4]
    de42:	f7ff fed5 	bl	dbf0 <MP_OBJ_IS_SMALL_INT>
    de46:	4603      	mov	r3, r0
    de48:	2b00      	cmp	r3, #0
    de4a:	d007      	beq.n	de5c <mp_obj_is_true+0x48>
        if (MP_OBJ_SMALL_INT_VALUE(arg) == 0) {
    de4c:	687b      	ldr	r3, [r7, #4]
    de4e:	105b      	asrs	r3, r3, #1
    de50:	2b00      	cmp	r3, #0
    de52:	d101      	bne.n	de58 <mp_obj_is_true+0x44>
            return 0;
    de54:	2300      	movs	r3, #0
    de56:	e029      	b.n	deac <mp_obj_is_true+0x98>
        } else {
            return 1;
    de58:	2301      	movs	r3, #1
    de5a:	e027      	b.n	deac <mp_obj_is_true+0x98>
        }
    } else {
        mp_obj_type_t *type = mp_obj_get_type(arg);
    de5c:	6878      	ldr	r0, [r7, #4]
    de5e:	f7ff fefd 	bl	dc5c <mp_obj_get_type>
    de62:	6178      	str	r0, [r7, #20]
        if (type->unary_op != NULL) {
    de64:	697b      	ldr	r3, [r7, #20]
    de66:	695b      	ldr	r3, [r3, #20]
    de68:	2b00      	cmp	r3, #0
    de6a:	d010      	beq.n	de8e <mp_obj_is_true+0x7a>
            mp_obj_t result = type->unary_op(MP_UNARY_OP_BOOL, arg);
    de6c:	697b      	ldr	r3, [r7, #20]
    de6e:	695b      	ldr	r3, [r3, #20]
    de70:	6879      	ldr	r1, [r7, #4]
    de72:	2004      	movs	r0, #4
    de74:	4798      	blx	r3
    de76:	6138      	str	r0, [r7, #16]
            if (result != MP_OBJ_NULL) {
    de78:	693b      	ldr	r3, [r7, #16]
    de7a:	2b00      	cmp	r3, #0
    de7c:	d007      	beq.n	de8e <mp_obj_is_true+0x7a>
                return result == mp_const_true;
    de7e:	693b      	ldr	r3, [r7, #16]
    de80:	4a0d      	ldr	r2, [pc, #52]	; (deb8 <mp_obj_is_true+0xa4>)
    de82:	4293      	cmp	r3, r2
    de84:	bf0c      	ite	eq
    de86:	2301      	moveq	r3, #1
    de88:	2300      	movne	r3, #0
    de8a:	b2db      	uxtb	r3, r3
    de8c:	e00e      	b.n	deac <mp_obj_is_true+0x98>
            }
        }

        mp_obj_t len = mp_obj_len_maybe(arg);
    de8e:	6878      	ldr	r0, [r7, #4]
    de90:	f000 fa3a 	bl	e308 <mp_obj_len_maybe>
    de94:	60f8      	str	r0, [r7, #12]
        if (len != MP_OBJ_NULL) {
    de96:	68fb      	ldr	r3, [r7, #12]
    de98:	2b00      	cmp	r3, #0
    de9a:	d006      	beq.n	deaa <mp_obj_is_true+0x96>
            // obj has a length, truth determined if len != 0
            return len != MP_OBJ_NEW_SMALL_INT(0);
    de9c:	68fb      	ldr	r3, [r7, #12]
    de9e:	2b01      	cmp	r3, #1
    dea0:	bf14      	ite	ne
    dea2:	2301      	movne	r3, #1
    dea4:	2300      	moveq	r3, #0
    dea6:	b2db      	uxtb	r3, r3
    dea8:	e000      	b.n	deac <mp_obj_is_true+0x98>
        } else {
            // any other obj is true per Python semantics
            return 1;
    deaa:	2301      	movs	r3, #1
        }
    }
}
    deac:	4618      	mov	r0, r3
    deae:	3718      	adds	r7, #24
    deb0:	46bd      	mov	sp, r7
    deb2:	bd80      	pop	{r7, pc}
    deb4:	00023860 	.word	0x00023860
    deb8:	00023868 	.word	0x00023868
    debc:	0002511c 	.word	0x0002511c

0000dec0 <mp_obj_is_callable>:

bool mp_obj_is_callable(mp_obj_t o_in) {
    dec0:	b580      	push	{r7, lr}
    dec2:	b084      	sub	sp, #16
    dec4:	af00      	add	r7, sp, #0
    dec6:	6078      	str	r0, [r7, #4]
    mp_call_fun_t call = mp_obj_get_type(o_in)->call;
    dec8:	6878      	ldr	r0, [r7, #4]
    deca:	f7ff fec7 	bl	dc5c <mp_obj_get_type>
    dece:	4603      	mov	r3, r0
    ded0:	691b      	ldr	r3, [r3, #16]
    ded2:	60fb      	str	r3, [r7, #12]
    if (call != mp_obj_instance_call) {
    ded4:	68fb      	ldr	r3, [r7, #12]
    ded6:	4a09      	ldr	r2, [pc, #36]	; (defc <mp_obj_is_callable+0x3c>)
    ded8:	4293      	cmp	r3, r2
    deda:	d006      	beq.n	deea <mp_obj_is_callable+0x2a>
        return call != NULL;
    dedc:	68fb      	ldr	r3, [r7, #12]
    dede:	2b00      	cmp	r3, #0
    dee0:	bf14      	ite	ne
    dee2:	2301      	movne	r3, #1
    dee4:	2300      	moveq	r3, #0
    dee6:	b2db      	uxtb	r3, r3
    dee8:	e003      	b.n	def2 <mp_obj_is_callable+0x32>
    }
    return mp_obj_instance_is_callable(o_in);
    deea:	6878      	ldr	r0, [r7, #4]
    deec:	f009 f8ab 	bl	17046 <mp_obj_instance_is_callable>
    def0:	4603      	mov	r3, r0
}
    def2:	4618      	mov	r0, r3
    def4:	3710      	adds	r7, #16
    def6:	46bd      	mov	sp, r7
    def8:	bd80      	pop	{r7, pc}
    defa:	bf00      	nop
    defc:	00017077 	.word	0x00017077

0000df00 <mp_obj_equal>:
// This means that False==0 and True==1 are true expressions.
//
// Furthermore, from the v3.4.2 code for object.c: "Practical amendments: If rich
// comparison returns NotImplemented, == and != are decided by comparing the object
// pointer."
bool mp_obj_equal(mp_obj_t o1, mp_obj_t o2) {
    df00:	b580      	push	{r7, lr}
    df02:	b086      	sub	sp, #24
    df04:	af00      	add	r7, sp, #0
    df06:	6078      	str	r0, [r7, #4]
    df08:	6039      	str	r1, [r7, #0]
    // Float (and complex) NaN is never equal to anything, not even itself,
    // so we must have a special check here to cover those cases.
    if (o1 == o2
    df0a:	687a      	ldr	r2, [r7, #4]
    df0c:	683b      	ldr	r3, [r7, #0]
    df0e:	429a      	cmp	r2, r3
    df10:	d101      	bne.n	df16 <mp_obj_equal+0x16>
        #endif
        #if MICROPY_PY_BUILTINS_COMPLEX
        && !MP_OBJ_IS_TYPE(o1, &mp_type_complex)
        #endif
        ) {
        return true;
    df12:	2301      	movs	r3, #1
    df14:	e073      	b.n	dffe <mp_obj_equal+0xfe>
    }
    if (o1 == mp_const_none || o2 == mp_const_none) {
    df16:	687b      	ldr	r3, [r7, #4]
    df18:	4a3b      	ldr	r2, [pc, #236]	; (e008 <mp_obj_equal+0x108>)
    df1a:	4293      	cmp	r3, r2
    df1c:	d003      	beq.n	df26 <mp_obj_equal+0x26>
    df1e:	683b      	ldr	r3, [r7, #0]
    df20:	4a39      	ldr	r2, [pc, #228]	; (e008 <mp_obj_equal+0x108>)
    df22:	4293      	cmp	r3, r2
    df24:	d101      	bne.n	df2a <mp_obj_equal+0x2a>
        return false;
    df26:	2300      	movs	r3, #0
    df28:	e069      	b.n	dffe <mp_obj_equal+0xfe>
    }

    // fast path for small ints
    if (MP_OBJ_IS_SMALL_INT(o1)) {
    df2a:	6878      	ldr	r0, [r7, #4]
    df2c:	f7ff fe60 	bl	dbf0 <MP_OBJ_IS_SMALL_INT>
    df30:	4603      	mov	r3, r0
    df32:	2b00      	cmp	r3, #0
    df34:	d00d      	beq.n	df52 <mp_obj_equal+0x52>
        if (MP_OBJ_IS_SMALL_INT(o2)) {
    df36:	6838      	ldr	r0, [r7, #0]
    df38:	f7ff fe5a 	bl	dbf0 <MP_OBJ_IS_SMALL_INT>
    df3c:	4603      	mov	r3, r0
    df3e:	2b00      	cmp	r3, #0
    df40:	d001      	beq.n	df46 <mp_obj_equal+0x46>
            // both SMALL_INT, and not equal if we get here
            return false;
    df42:	2300      	movs	r3, #0
    df44:	e05b      	b.n	dffe <mp_obj_equal+0xfe>
        } else {
            mp_obj_t temp = o2; o2 = o1; o1 = temp;
    df46:	683b      	ldr	r3, [r7, #0]
    df48:	617b      	str	r3, [r7, #20]
    df4a:	687b      	ldr	r3, [r7, #4]
    df4c:	603b      	str	r3, [r7, #0]
    df4e:	697b      	ldr	r3, [r7, #20]
    df50:	607b      	str	r3, [r7, #4]
            // fall through to generic op
        }
    }

    // fast path for strings
    if (MP_OBJ_IS_STR(o1)) {
    df52:	6878      	ldr	r0, [r7, #4]
    df54:	f7ff fe5e 	bl	dc14 <MP_OBJ_IS_QSTR>
    df58:	4603      	mov	r3, r0
    df5a:	2b00      	cmp	r3, #0
    df5c:	d10a      	bne.n	df74 <mp_obj_equal+0x74>
    df5e:	6878      	ldr	r0, [r7, #4]
    df60:	f7ff fe6a 	bl	dc38 <MP_OBJ_IS_OBJ>
    df64:	4603      	mov	r3, r0
    df66:	2b00      	cmp	r3, #0
    df68:	d01b      	beq.n	dfa2 <mp_obj_equal+0xa2>
    df6a:	687b      	ldr	r3, [r7, #4]
    df6c:	681b      	ldr	r3, [r3, #0]
    df6e:	4a27      	ldr	r2, [pc, #156]	; (e00c <mp_obj_equal+0x10c>)
    df70:	4293      	cmp	r3, r2
    df72:	d116      	bne.n	dfa2 <mp_obj_equal+0xa2>
        if (MP_OBJ_IS_STR(o2)) {
    df74:	6838      	ldr	r0, [r7, #0]
    df76:	f7ff fe4d 	bl	dc14 <MP_OBJ_IS_QSTR>
    df7a:	4603      	mov	r3, r0
    df7c:	2b00      	cmp	r3, #0
    df7e:	d10a      	bne.n	df96 <mp_obj_equal+0x96>
    df80:	6838      	ldr	r0, [r7, #0]
    df82:	f7ff fe59 	bl	dc38 <MP_OBJ_IS_OBJ>
    df86:	4603      	mov	r3, r0
    df88:	2b00      	cmp	r3, #0
    df8a:	d01b      	beq.n	dfc4 <mp_obj_equal+0xc4>
    df8c:	683b      	ldr	r3, [r7, #0]
    df8e:	681b      	ldr	r3, [r3, #0]
    df90:	4a1e      	ldr	r2, [pc, #120]	; (e00c <mp_obj_equal+0x10c>)
    df92:	4293      	cmp	r3, r2
    df94:	d116      	bne.n	dfc4 <mp_obj_equal+0xc4>
            // both strings, use special function
            return mp_obj_str_equal(o1, o2);
    df96:	6839      	ldr	r1, [r7, #0]
    df98:	6878      	ldr	r0, [r7, #4]
    df9a:	f007 fca9 	bl	158f0 <mp_obj_str_equal>
    df9e:	4603      	mov	r3, r0
    dfa0:	e02d      	b.n	dffe <mp_obj_equal+0xfe>
        } else {
            // a string is never equal to anything else
            goto str_cmp_err;
        }
    } else if (MP_OBJ_IS_STR(o2)) {
    dfa2:	6838      	ldr	r0, [r7, #0]
    dfa4:	f7ff fe36 	bl	dc14 <MP_OBJ_IS_QSTR>
    dfa8:	4603      	mov	r3, r0
    dfaa:	2b00      	cmp	r3, #0
    dfac:	d10a      	bne.n	dfc4 <mp_obj_equal+0xc4>
    dfae:	6838      	ldr	r0, [r7, #0]
    dfb0:	f7ff fe42 	bl	dc38 <MP_OBJ_IS_OBJ>
    dfb4:	4603      	mov	r3, r0
    dfb6:	2b00      	cmp	r3, #0
    dfb8:	d006      	beq.n	dfc8 <mp_obj_equal+0xc8>
    dfba:	683b      	ldr	r3, [r7, #0]
    dfbc:	681b      	ldr	r3, [r3, #0]
    dfbe:	4a13      	ldr	r2, [pc, #76]	; (e00c <mp_obj_equal+0x10c>)
    dfc0:	4293      	cmp	r3, r2
    dfc2:	d101      	bne.n	dfc8 <mp_obj_equal+0xc8>
        #if MICROPY_PY_STR_BYTES_CMP_WARN
        if (MP_OBJ_IS_TYPE(o1, &mp_type_bytes) || MP_OBJ_IS_TYPE(o2, &mp_type_bytes)) {
            mp_warning("Comparison between bytes and str");
        }
        #endif
        return false;
    dfc4:	2300      	movs	r3, #0
    dfc6:	e01a      	b.n	dffe <mp_obj_equal+0xfe>
    }

    // generic type, call binary_op(MP_BINARY_OP_EQUAL)
    mp_obj_type_t *type = mp_obj_get_type(o1);
    dfc8:	6878      	ldr	r0, [r7, #4]
    dfca:	f7ff fe47 	bl	dc5c <mp_obj_get_type>
    dfce:	6138      	str	r0, [r7, #16]
    if (type->binary_op != NULL) {
    dfd0:	693b      	ldr	r3, [r7, #16]
    dfd2:	699b      	ldr	r3, [r3, #24]
    dfd4:	2b00      	cmp	r3, #0
    dfd6:	d011      	beq.n	dffc <mp_obj_equal+0xfc>
        mp_obj_t r = type->binary_op(MP_BINARY_OP_EQUAL, o1, o2);
    dfd8:	693b      	ldr	r3, [r7, #16]
    dfda:	699b      	ldr	r3, [r3, #24]
    dfdc:	683a      	ldr	r2, [r7, #0]
    dfde:	6879      	ldr	r1, [r7, #4]
    dfe0:	2002      	movs	r0, #2
    dfe2:	4798      	blx	r3
    dfe4:	60f8      	str	r0, [r7, #12]
        if (r != MP_OBJ_NULL) {
    dfe6:	68fb      	ldr	r3, [r7, #12]
    dfe8:	2b00      	cmp	r3, #0
    dfea:	d007      	beq.n	dffc <mp_obj_equal+0xfc>
            return r == mp_const_true ? true : false;
    dfec:	68fb      	ldr	r3, [r7, #12]
    dfee:	4a08      	ldr	r2, [pc, #32]	; (e010 <mp_obj_equal+0x110>)
    dff0:	4293      	cmp	r3, r2
    dff2:	bf0c      	ite	eq
    dff4:	2301      	moveq	r3, #1
    dff6:	2300      	movne	r3, #0
    dff8:	b2db      	uxtb	r3, r3
    dffa:	e000      	b.n	dffe <mp_obj_equal+0xfe>
        }
    }

    // equality not implemented, and objects are not the same object, so
    // they are defined as not equal
    return false;
    dffc:	2300      	movs	r3, #0
}
    dffe:	4618      	mov	r0, r3
    e000:	3718      	adds	r7, #24
    e002:	46bd      	mov	sp, r7
    e004:	bd80      	pop	{r7, pc}
    e006:	bf00      	nop
    e008:	0002511c 	.word	0x0002511c
    e00c:	000257b0 	.word	0x000257b0
    e010:	00023868 	.word	0x00023868

0000e014 <mp_obj_get_int>:

mp_int_t mp_obj_get_int(mp_const_obj_t arg) {
    e014:	b580      	push	{r7, lr}
    e016:	b084      	sub	sp, #16
    e018:	af00      	add	r7, sp, #0
    e01a:	6078      	str	r0, [r7, #4]
    // This function essentially performs implicit type conversion to int
    // Note that Python does NOT provide implicit type conversion from
    // float to int in the core expression language, try some_list[1.0].
    if (arg == mp_const_false) {
    e01c:	687b      	ldr	r3, [r7, #4]
    e01e:	4a18      	ldr	r2, [pc, #96]	; (e080 <mp_obj_get_int+0x6c>)
    e020:	4293      	cmp	r3, r2
    e022:	d101      	bne.n	e028 <mp_obj_get_int+0x14>
        return 0;
    e024:	2300      	movs	r3, #0
    e026:	e027      	b.n	e078 <mp_obj_get_int+0x64>
    } else if (arg == mp_const_true) {
    e028:	687b      	ldr	r3, [r7, #4]
    e02a:	4a16      	ldr	r2, [pc, #88]	; (e084 <mp_obj_get_int+0x70>)
    e02c:	4293      	cmp	r3, r2
    e02e:	d101      	bne.n	e034 <mp_obj_get_int+0x20>
        return 1;
    e030:	2301      	movs	r3, #1
    e032:	e021      	b.n	e078 <mp_obj_get_int+0x64>
    } else if (MP_OBJ_IS_SMALL_INT(arg)) {
    e034:	6878      	ldr	r0, [r7, #4]
    e036:	f7ff fddb 	bl	dbf0 <MP_OBJ_IS_SMALL_INT>
    e03a:	4603      	mov	r3, r0
    e03c:	2b00      	cmp	r3, #0
    e03e:	d002      	beq.n	e046 <mp_obj_get_int+0x32>
        return MP_OBJ_SMALL_INT_VALUE(arg);
    e040:	687b      	ldr	r3, [r7, #4]
    e042:	105b      	asrs	r3, r3, #1
    e044:	e018      	b.n	e078 <mp_obj_get_int+0x64>
    } else if (MP_OBJ_IS_TYPE(arg, &mp_type_int)) {
    e046:	6878      	ldr	r0, [r7, #4]
    e048:	f7ff fdf6 	bl	dc38 <MP_OBJ_IS_OBJ>
    e04c:	4603      	mov	r3, r0
    e04e:	2b00      	cmp	r3, #0
    e050:	d009      	beq.n	e066 <mp_obj_get_int+0x52>
    e052:	687b      	ldr	r3, [r7, #4]
    e054:	681b      	ldr	r3, [r3, #0]
    e056:	4a0c      	ldr	r2, [pc, #48]	; (e088 <mp_obj_get_int+0x74>)
    e058:	4293      	cmp	r3, r2
    e05a:	d104      	bne.n	e066 <mp_obj_get_int+0x52>
        return mp_obj_int_get_checked(arg);
    e05c:	6878      	ldr	r0, [r7, #4]
    e05e:	f002 fec9 	bl	10df4 <mp_obj_int_get_checked>
    e062:	4603      	mov	r3, r0
    e064:	e008      	b.n	e078 <mp_obj_get_int+0x64>
    } else {
        mp_obj_t res = mp_unary_op(MP_UNARY_OP_INT, (mp_obj_t)arg);
    e066:	6879      	ldr	r1, [r7, #4]
    e068:	2008      	movs	r0, #8
    e06a:	f7fd fcbf 	bl	b9ec <mp_unary_op>
    e06e:	60f8      	str	r0, [r7, #12]
        return mp_obj_int_get_checked(res);
    e070:	68f8      	ldr	r0, [r7, #12]
    e072:	f002 febf 	bl	10df4 <mp_obj_int_get_checked>
    e076:	4603      	mov	r3, r0
    }
}
    e078:	4618      	mov	r0, r3
    e07a:	3710      	adds	r7, #16
    e07c:	46bd      	mov	sp, r7
    e07e:	bd80      	pop	{r7, pc}
    e080:	00023860 	.word	0x00023860
    e084:	00023868 	.word	0x00023868
    e088:	00024bd8 	.word	0x00024bd8

0000e08c <mp_obj_get_int_truncated>:

mp_int_t mp_obj_get_int_truncated(mp_const_obj_t arg) {
    e08c:	b580      	push	{r7, lr}
    e08e:	b082      	sub	sp, #8
    e090:	af00      	add	r7, sp, #0
    e092:	6078      	str	r0, [r7, #4]
    if (MP_OBJ_IS_INT(arg)) {
    e094:	6878      	ldr	r0, [r7, #4]
    e096:	f7ff fdab 	bl	dbf0 <MP_OBJ_IS_SMALL_INT>
    e09a:	4603      	mov	r3, r0
    e09c:	2b00      	cmp	r3, #0
    e09e:	d10a      	bne.n	e0b6 <mp_obj_get_int_truncated+0x2a>
    e0a0:	6878      	ldr	r0, [r7, #4]
    e0a2:	f7ff fdc9 	bl	dc38 <MP_OBJ_IS_OBJ>
    e0a6:	4603      	mov	r3, r0
    e0a8:	2b00      	cmp	r3, #0
    e0aa:	d009      	beq.n	e0c0 <mp_obj_get_int_truncated+0x34>
    e0ac:	687b      	ldr	r3, [r7, #4]
    e0ae:	681b      	ldr	r3, [r3, #0]
    e0b0:	4a07      	ldr	r2, [pc, #28]	; (e0d0 <mp_obj_get_int_truncated+0x44>)
    e0b2:	4293      	cmp	r3, r2
    e0b4:	d104      	bne.n	e0c0 <mp_obj_get_int_truncated+0x34>
        return mp_obj_int_get_truncated(arg);
    e0b6:	6878      	ldr	r0, [r7, #4]
    e0b8:	f002 fe90 	bl	10ddc <mp_obj_int_get_truncated>
    e0bc:	4603      	mov	r3, r0
    e0be:	e003      	b.n	e0c8 <mp_obj_get_int_truncated+0x3c>
    } else {
        return mp_obj_get_int(arg);
    e0c0:	6878      	ldr	r0, [r7, #4]
    e0c2:	f7ff ffa7 	bl	e014 <mp_obj_get_int>
    e0c6:	4603      	mov	r3, r0
    }
}
    e0c8:	4618      	mov	r0, r3
    e0ca:	3708      	adds	r7, #8
    e0cc:	46bd      	mov	sp, r7
    e0ce:	bd80      	pop	{r7, pc}
    e0d0:	00024bd8 	.word	0x00024bd8

0000e0d4 <mp_obj_get_int_maybe>:

// returns false if arg is not of integral type
// returns true and sets *value if it is of integral type
// can throw OverflowError if arg is of integral type, but doesn't fit in a mp_int_t
bool mp_obj_get_int_maybe(mp_const_obj_t arg, mp_int_t *value) {
    e0d4:	b580      	push	{r7, lr}
    e0d6:	b082      	sub	sp, #8
    e0d8:	af00      	add	r7, sp, #0
    e0da:	6078      	str	r0, [r7, #4]
    e0dc:	6039      	str	r1, [r7, #0]
    if (arg == mp_const_false) {
    e0de:	687b      	ldr	r3, [r7, #4]
    e0e0:	4a19      	ldr	r2, [pc, #100]	; (e148 <mp_obj_get_int_maybe+0x74>)
    e0e2:	4293      	cmp	r3, r2
    e0e4:	d103      	bne.n	e0ee <mp_obj_get_int_maybe+0x1a>
        *value = 0;
    e0e6:	683b      	ldr	r3, [r7, #0]
    e0e8:	2200      	movs	r2, #0
    e0ea:	601a      	str	r2, [r3, #0]
    e0ec:	e026      	b.n	e13c <mp_obj_get_int_maybe+0x68>
    } else if (arg == mp_const_true) {
    e0ee:	687b      	ldr	r3, [r7, #4]
    e0f0:	4a16      	ldr	r2, [pc, #88]	; (e14c <mp_obj_get_int_maybe+0x78>)
    e0f2:	4293      	cmp	r3, r2
    e0f4:	d103      	bne.n	e0fe <mp_obj_get_int_maybe+0x2a>
        *value = 1;
    e0f6:	683b      	ldr	r3, [r7, #0]
    e0f8:	2201      	movs	r2, #1
    e0fa:	601a      	str	r2, [r3, #0]
    e0fc:	e01e      	b.n	e13c <mp_obj_get_int_maybe+0x68>
    } else if (MP_OBJ_IS_SMALL_INT(arg)) {
    e0fe:	6878      	ldr	r0, [r7, #4]
    e100:	f7ff fd76 	bl	dbf0 <MP_OBJ_IS_SMALL_INT>
    e104:	4603      	mov	r3, r0
    e106:	2b00      	cmp	r3, #0
    e108:	d004      	beq.n	e114 <mp_obj_get_int_maybe+0x40>
        *value = MP_OBJ_SMALL_INT_VALUE(arg);
    e10a:	687b      	ldr	r3, [r7, #4]
    e10c:	105a      	asrs	r2, r3, #1
    e10e:	683b      	ldr	r3, [r7, #0]
    e110:	601a      	str	r2, [r3, #0]
    e112:	e013      	b.n	e13c <mp_obj_get_int_maybe+0x68>
    } else if (MP_OBJ_IS_TYPE(arg, &mp_type_int)) {
    e114:	6878      	ldr	r0, [r7, #4]
    e116:	f7ff fd8f 	bl	dc38 <MP_OBJ_IS_OBJ>
    e11a:	4603      	mov	r3, r0
    e11c:	2b00      	cmp	r3, #0
    e11e:	d00b      	beq.n	e138 <mp_obj_get_int_maybe+0x64>
    e120:	687b      	ldr	r3, [r7, #4]
    e122:	681b      	ldr	r3, [r3, #0]
    e124:	4a0a      	ldr	r2, [pc, #40]	; (e150 <mp_obj_get_int_maybe+0x7c>)
    e126:	4293      	cmp	r3, r2
    e128:	d106      	bne.n	e138 <mp_obj_get_int_maybe+0x64>
        *value = mp_obj_int_get_checked(arg);
    e12a:	6878      	ldr	r0, [r7, #4]
    e12c:	f002 fe62 	bl	10df4 <mp_obj_int_get_checked>
    e130:	4602      	mov	r2, r0
    e132:	683b      	ldr	r3, [r7, #0]
    e134:	601a      	str	r2, [r3, #0]
    e136:	e001      	b.n	e13c <mp_obj_get_int_maybe+0x68>
    } else {
        return false;
    e138:	2300      	movs	r3, #0
    e13a:	e000      	b.n	e13e <mp_obj_get_int_maybe+0x6a>
    }
    return true;
    e13c:	2301      	movs	r3, #1
}
    e13e:	4618      	mov	r0, r3
    e140:	3708      	adds	r7, #8
    e142:	46bd      	mov	sp, r7
    e144:	bd80      	pop	{r7, pc}
    e146:	bf00      	nop
    e148:	00023860 	.word	0x00023860
    e14c:	00023868 	.word	0x00023868
    e150:	00024bd8 	.word	0x00024bd8

0000e154 <mp_obj_get_array>:
}
#endif
#endif

// note: returned value in *items may point to the interior of a GC block
void mp_obj_get_array(mp_obj_t o, size_t *len, mp_obj_t **items) {
    e154:	b580      	push	{r7, lr}
    e156:	b084      	sub	sp, #16
    e158:	af00      	add	r7, sp, #0
    e15a:	60f8      	str	r0, [r7, #12]
    e15c:	60b9      	str	r1, [r7, #8]
    e15e:	607a      	str	r2, [r7, #4]
    if (MP_OBJ_IS_TYPE(o, &mp_type_tuple)) {
    e160:	68f8      	ldr	r0, [r7, #12]
    e162:	f7ff fd69 	bl	dc38 <MP_OBJ_IS_OBJ>
    e166:	4603      	mov	r3, r0
    e168:	2b00      	cmp	r3, #0
    e16a:	d00a      	beq.n	e182 <mp_obj_get_array+0x2e>
    e16c:	68fb      	ldr	r3, [r7, #12]
    e16e:	681b      	ldr	r3, [r3, #0]
    e170:	4a10      	ldr	r2, [pc, #64]	; (e1b4 <mp_obj_get_array+0x60>)
    e172:	4293      	cmp	r3, r2
    e174:	d105      	bne.n	e182 <mp_obj_get_array+0x2e>
        mp_obj_tuple_get(o, len, items);
    e176:	687a      	ldr	r2, [r7, #4]
    e178:	68b9      	ldr	r1, [r7, #8]
    e17a:	68f8      	ldr	r0, [r7, #12]
    e17c:	f008 f89e 	bl	162bc <mp_obj_tuple_get>
    e180:	e013      	b.n	e1aa <mp_obj_get_array+0x56>
    } else if (MP_OBJ_IS_TYPE(o, &mp_type_list)) {
    e182:	68f8      	ldr	r0, [r7, #12]
    e184:	f7ff fd58 	bl	dc38 <MP_OBJ_IS_OBJ>
    e188:	4603      	mov	r3, r0
    e18a:	2b00      	cmp	r3, #0
    e18c:	d00a      	beq.n	e1a4 <mp_obj_get_array+0x50>
    e18e:	68fb      	ldr	r3, [r7, #12]
    e190:	681b      	ldr	r3, [r3, #0]
    e192:	4a09      	ldr	r2, [pc, #36]	; (e1b8 <mp_obj_get_array+0x64>)
    e194:	4293      	cmp	r3, r2
    e196:	d105      	bne.n	e1a4 <mp_obj_get_array+0x50>
        mp_obj_list_get(o, len, items);
    e198:	687a      	ldr	r2, [r7, #4]
    e19a:	68b9      	ldr	r1, [r7, #8]
    e19c:	68f8      	ldr	r0, [r7, #12]
    e19e:	f003 fdc2 	bl	11d26 <mp_obj_list_get>
    e1a2:	e002      	b.n	e1aa <mp_obj_get_array+0x56>
    } else {
        if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
            mp_raise_TypeError("expected tuple/list");
    e1a4:	4805      	ldr	r0, [pc, #20]	; (e1bc <mp_obj_get_array+0x68>)
    e1a6:	f7ff f8f1 	bl	d38c <mp_raise_TypeError>
        } else {
            nlr_raise(mp_obj_new_exception_msg_varg(&mp_type_TypeError,
                "object '%s' isn't a tuple or list", mp_obj_get_type_str(o)));
        }
    }
}
    e1aa:	bf00      	nop
    e1ac:	3710      	adds	r7, #16
    e1ae:	46bd      	mov	sp, r7
    e1b0:	bd80      	pop	{r7, pc}
    e1b2:	bf00      	nop
    e1b4:	00025a34 	.word	0x00025a34
    e1b8:	00024e44 	.word	0x00024e44
    e1bc:	000236ec 	.word	0x000236ec

0000e1c0 <mp_obj_get_array_fixed_n>:

// note: returned value in *items may point to the interior of a GC block
void mp_obj_get_array_fixed_n(mp_obj_t o, size_t len, mp_obj_t **items) {
    e1c0:	b580      	push	{r7, lr}
    e1c2:	b086      	sub	sp, #24
    e1c4:	af00      	add	r7, sp, #0
    e1c6:	60f8      	str	r0, [r7, #12]
    e1c8:	60b9      	str	r1, [r7, #8]
    e1ca:	607a      	str	r2, [r7, #4]
    size_t seq_len;
    mp_obj_get_array(o, &seq_len, items);
    e1cc:	f107 0314 	add.w	r3, r7, #20
    e1d0:	687a      	ldr	r2, [r7, #4]
    e1d2:	4619      	mov	r1, r3
    e1d4:	68f8      	ldr	r0, [r7, #12]
    e1d6:	f7ff ffbd 	bl	e154 <mp_obj_get_array>
    if (seq_len != len) {
    e1da:	697a      	ldr	r2, [r7, #20]
    e1dc:	68bb      	ldr	r3, [r7, #8]
    e1de:	429a      	cmp	r2, r3
    e1e0:	d002      	beq.n	e1e8 <mp_obj_get_array_fixed_n+0x28>
        if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
            mp_raise_ValueError("tuple/list has wrong length");
    e1e2:	4803      	ldr	r0, [pc, #12]	; (e1f0 <mp_obj_get_array_fixed_n+0x30>)
    e1e4:	f7ff f8c7 	bl	d376 <mp_raise_ValueError>
        } else {
            nlr_raise(mp_obj_new_exception_msg_varg(&mp_type_ValueError,
                "requested length %d but object has length %d", (int)len, (int)seq_len));
        }
    }
}
    e1e8:	bf00      	nop
    e1ea:	3718      	adds	r7, #24
    e1ec:	46bd      	mov	sp, r7
    e1ee:	bd80      	pop	{r7, pc}
    e1f0:	00023700 	.word	0x00023700

0000e1f4 <mp_get_index>:

// is_slice determines whether the index is a slice index
size_t mp_get_index(const mp_obj_type_t *type, size_t len, mp_obj_t index, bool is_slice) {
    e1f4:	b580      	push	{r7, lr}
    e1f6:	b086      	sub	sp, #24
    e1f8:	af00      	add	r7, sp, #0
    e1fa:	60f8      	str	r0, [r7, #12]
    e1fc:	60b9      	str	r1, [r7, #8]
    e1fe:	607a      	str	r2, [r7, #4]
    e200:	70fb      	strb	r3, [r7, #3]
    mp_int_t i;
    if (MP_OBJ_IS_SMALL_INT(index)) {
    e202:	6878      	ldr	r0, [r7, #4]
    e204:	f7ff fcf4 	bl	dbf0 <MP_OBJ_IS_SMALL_INT>
    e208:	4603      	mov	r3, r0
    e20a:	2b00      	cmp	r3, #0
    e20c:	d003      	beq.n	e216 <mp_get_index+0x22>
        i = MP_OBJ_SMALL_INT_VALUE(index);
    e20e:	687b      	ldr	r3, [r7, #4]
    e210:	105b      	asrs	r3, r3, #1
    e212:	617b      	str	r3, [r7, #20]
    e214:	e00e      	b.n	e234 <mp_get_index+0x40>
    } else if (!mp_obj_get_int_maybe(index, &i)) {
    e216:	f107 0314 	add.w	r3, r7, #20
    e21a:	4619      	mov	r1, r3
    e21c:	6878      	ldr	r0, [r7, #4]
    e21e:	f7ff ff59 	bl	e0d4 <mp_obj_get_int_maybe>
    e222:	4603      	mov	r3, r0
    e224:	f083 0301 	eor.w	r3, r3, #1
    e228:	b2db      	uxtb	r3, r3
    e22a:	2b00      	cmp	r3, #0
    e22c:	d002      	beq.n	e234 <mp_get_index+0x40>
        if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
            mp_raise_TypeError("indices must be integers");
    e22e:	4816      	ldr	r0, [pc, #88]	; (e288 <mp_get_index+0x94>)
    e230:	f7ff f8ac 	bl	d38c <mp_raise_TypeError>
                "%q indices must be integers, not %s",
                type->name, mp_obj_get_type_str(index)));
        }
    }

    if (i < 0) {
    e234:	697b      	ldr	r3, [r7, #20]
    e236:	2b00      	cmp	r3, #0
    e238:	da04      	bge.n	e244 <mp_get_index+0x50>
        i += len;
    e23a:	697b      	ldr	r3, [r7, #20]
    e23c:	461a      	mov	r2, r3
    e23e:	68bb      	ldr	r3, [r7, #8]
    e240:	4413      	add	r3, r2
    e242:	617b      	str	r3, [r7, #20]
    }
    if (is_slice) {
    e244:	78fb      	ldrb	r3, [r7, #3]
    e246:	2b00      	cmp	r3, #0
    e248:	d00d      	beq.n	e266 <mp_get_index+0x72>
        if (i < 0) {
    e24a:	697b      	ldr	r3, [r7, #20]
    e24c:	2b00      	cmp	r3, #0
    e24e:	da02      	bge.n	e256 <mp_get_index+0x62>
            i = 0;
    e250:	2300      	movs	r3, #0
    e252:	617b      	str	r3, [r7, #20]
    e254:	e013      	b.n	e27e <mp_get_index+0x8a>
        } else if ((mp_uint_t)i > len) {
    e256:	697b      	ldr	r3, [r7, #20]
    e258:	461a      	mov	r2, r3
    e25a:	68bb      	ldr	r3, [r7, #8]
    e25c:	429a      	cmp	r2, r3
    e25e:	d90e      	bls.n	e27e <mp_get_index+0x8a>
            i = len;
    e260:	68bb      	ldr	r3, [r7, #8]
    e262:	617b      	str	r3, [r7, #20]
    e264:	e00b      	b.n	e27e <mp_get_index+0x8a>
        }
    } else {
        if (i < 0 || (mp_uint_t)i >= len) {
    e266:	697b      	ldr	r3, [r7, #20]
    e268:	2b00      	cmp	r3, #0
    e26a:	db04      	blt.n	e276 <mp_get_index+0x82>
    e26c:	697b      	ldr	r3, [r7, #20]
    e26e:	461a      	mov	r2, r3
    e270:	68bb      	ldr	r3, [r7, #8]
    e272:	429a      	cmp	r2, r3
    e274:	d303      	bcc.n	e27e <mp_get_index+0x8a>
            if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
                mp_raise_msg(&mp_type_IndexError, "index out of range");
    e276:	4905      	ldr	r1, [pc, #20]	; (e28c <mp_get_index+0x98>)
    e278:	4805      	ldr	r0, [pc, #20]	; (e290 <mp_get_index+0x9c>)
    e27a:	f7ff f865 	bl	d348 <mp_raise_msg>
            }
        }
    }

    // By this point 0 <= i <= len and so fits in a size_t
    return (size_t)i;
    e27e:	697b      	ldr	r3, [r7, #20]
}
    e280:	4618      	mov	r0, r3
    e282:	3718      	adds	r7, #24
    e284:	46bd      	mov	sp, r7
    e286:	bd80      	pop	{r7, pc}
    e288:	0002371c 	.word	0x0002371c
    e28c:	00023738 	.word	0x00023738
    e290:	00024158 	.word	0x00024158

0000e294 <mp_obj_id>:

mp_obj_t mp_obj_id(mp_obj_t o_in) {
    e294:	b580      	push	{r7, lr}
    e296:	b084      	sub	sp, #16
    e298:	af00      	add	r7, sp, #0
    e29a:	6078      	str	r0, [r7, #4]
    mp_int_t id = (mp_int_t)o_in;
    e29c:	687b      	ldr	r3, [r7, #4]
    e29e:	60fb      	str	r3, [r7, #12]
    if (!MP_OBJ_IS_OBJ(o_in)) {
    e2a0:	6878      	ldr	r0, [r7, #4]
    e2a2:	f7ff fcc9 	bl	dc38 <MP_OBJ_IS_OBJ>
    e2a6:	4603      	mov	r3, r0
    e2a8:	f083 0301 	eor.w	r3, r3, #1
    e2ac:	b2db      	uxtb	r3, r3
    e2ae:	2b00      	cmp	r3, #0
    e2b0:	d004      	beq.n	e2bc <mp_obj_id+0x28>
        return mp_obj_new_int(id);
    e2b2:	68f8      	ldr	r0, [r7, #12]
    e2b4:	f002 fd76 	bl	10da4 <mp_obj_new_int>
    e2b8:	4603      	mov	r3, r0
    e2ba:	e00c      	b.n	e2d6 <mp_obj_id+0x42>
    } else if (id >= 0) {
    e2bc:	68fb      	ldr	r3, [r7, #12]
    e2be:	2b00      	cmp	r3, #0
    e2c0:	db04      	blt.n	e2cc <mp_obj_id+0x38>
        // Many OSes and CPUs have affinity for putting "user" memories
        // into low half of address space, and "system" into upper half.
        // We're going to take advantage of that and return small int
        // (signed) for such "user" addresses.
        return MP_OBJ_NEW_SMALL_INT(id);
    e2c2:	68fb      	ldr	r3, [r7, #12]
    e2c4:	005b      	lsls	r3, r3, #1
    e2c6:	f043 0301 	orr.w	r3, r3, #1
    e2ca:	e004      	b.n	e2d6 <mp_obj_id+0x42>
    } else {
        // If that didn't work, well, let's return long int, just as
        // a (big) positive value, so it will never clash with the range
        // of small int returned in previous case.
        return mp_obj_new_int_from_uint((mp_uint_t)id);
    e2cc:	68fb      	ldr	r3, [r7, #12]
    e2ce:	4618      	mov	r0, r3
    e2d0:	f002 fd4e 	bl	10d70 <mp_obj_new_int_from_uint>
    e2d4:	4603      	mov	r3, r0
    }
}
    e2d6:	4618      	mov	r0, r3
    e2d8:	3710      	adds	r7, #16
    e2da:	46bd      	mov	sp, r7
    e2dc:	bd80      	pop	{r7, pc}

0000e2de <mp_obj_len>:

// will raise a TypeError if object has no length
mp_obj_t mp_obj_len(mp_obj_t o_in) {
    e2de:	b580      	push	{r7, lr}
    e2e0:	b084      	sub	sp, #16
    e2e2:	af00      	add	r7, sp, #0
    e2e4:	6078      	str	r0, [r7, #4]
    mp_obj_t len = mp_obj_len_maybe(o_in);
    e2e6:	6878      	ldr	r0, [r7, #4]
    e2e8:	f000 f80e 	bl	e308 <mp_obj_len_maybe>
    e2ec:	60f8      	str	r0, [r7, #12]
    if (len == MP_OBJ_NULL) {
    e2ee:	68fb      	ldr	r3, [r7, #12]
    e2f0:	2b00      	cmp	r3, #0
    e2f2:	d102      	bne.n	e2fa <mp_obj_len+0x1c>
        if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
            mp_raise_TypeError("object has no len");
    e2f4:	4803      	ldr	r0, [pc, #12]	; (e304 <mp_obj_len+0x26>)
    e2f6:	f7ff f849 	bl	d38c <mp_raise_TypeError>
        } else {
            nlr_raise(mp_obj_new_exception_msg_varg(&mp_type_TypeError,
                "object of type '%s' has no len()", mp_obj_get_type_str(o_in)));
        }
    } else {
        return len;
    e2fa:	68fb      	ldr	r3, [r7, #12]
    }
}
    e2fc:	4618      	mov	r0, r3
    e2fe:	3710      	adds	r7, #16
    e300:	46bd      	mov	sp, r7
    e302:	bd80      	pop	{r7, pc}
    e304:	0002374c 	.word	0x0002374c

0000e308 <mp_obj_len_maybe>:

// may return MP_OBJ_NULL
mp_obj_t mp_obj_len_maybe(mp_obj_t o_in) {
    e308:	b580      	push	{r7, lr}
    e30a:	b084      	sub	sp, #16
    e30c:	af00      	add	r7, sp, #0
    e30e:	6078      	str	r0, [r7, #4]
    if (
#if !MICROPY_PY_BUILTINS_STR_UNICODE
        // It's simple - unicode is slow, non-unicode is fast
        MP_OBJ_IS_STR(o_in) ||
    e310:	6878      	ldr	r0, [r7, #4]
    e312:	f7ff fc7f 	bl	dc14 <MP_OBJ_IS_QSTR>
    e316:	4603      	mov	r3, r0
    if (
    e318:	2b00      	cmp	r3, #0
    e31a:	d115      	bne.n	e348 <mp_obj_len_maybe+0x40>
        MP_OBJ_IS_STR(o_in) ||
    e31c:	6878      	ldr	r0, [r7, #4]
    e31e:	f7ff fc8b 	bl	dc38 <MP_OBJ_IS_OBJ>
    e322:	4603      	mov	r3, r0
    e324:	2b00      	cmp	r3, #0
    e326:	d004      	beq.n	e332 <mp_obj_len_maybe+0x2a>
    e328:	687b      	ldr	r3, [r7, #4]
    e32a:	681b      	ldr	r3, [r3, #0]
    e32c:	4a1b      	ldr	r2, [pc, #108]	; (e39c <mp_obj_len_maybe+0x94>)
    e32e:	4293      	cmp	r3, r2
    e330:	d00a      	beq.n	e348 <mp_obj_len_maybe+0x40>
#endif
        MP_OBJ_IS_TYPE(o_in, &mp_type_bytes)) {
    e332:	6878      	ldr	r0, [r7, #4]
    e334:	f7ff fc80 	bl	dc38 <MP_OBJ_IS_OBJ>
    e338:	4603      	mov	r3, r0
        MP_OBJ_IS_STR(o_in) ||
    e33a:	2b00      	cmp	r3, #0
    e33c:	d019      	beq.n	e372 <mp_obj_len_maybe+0x6a>
        MP_OBJ_IS_TYPE(o_in, &mp_type_bytes)) {
    e33e:	687b      	ldr	r3, [r7, #4]
    e340:	681b      	ldr	r3, [r3, #0]
    e342:	4a17      	ldr	r2, [pc, #92]	; (e3a0 <mp_obj_len_maybe+0x98>)
    e344:	4293      	cmp	r3, r2
    e346:	d114      	bne.n	e372 <mp_obj_len_maybe+0x6a>
        GET_STR_LEN(o_in, l);
    e348:	6878      	ldr	r0, [r7, #4]
    e34a:	f7ff fc63 	bl	dc14 <MP_OBJ_IS_QSTR>
    e34e:	4603      	mov	r3, r0
    e350:	2b00      	cmp	r3, #0
    e352:	d006      	beq.n	e362 <mp_obj_len_maybe+0x5a>
    e354:	687b      	ldr	r3, [r7, #4]
    e356:	089b      	lsrs	r3, r3, #2
    e358:	4618      	mov	r0, r3
    e35a:	f7f3 f82a 	bl	13b2 <qstr_len>
    e35e:	60f8      	str	r0, [r7, #12]
    e360:	e002      	b.n	e368 <mp_obj_len_maybe+0x60>
    e362:	687b      	ldr	r3, [r7, #4]
    e364:	689b      	ldr	r3, [r3, #8]
    e366:	60fb      	str	r3, [r7, #12]
        return MP_OBJ_NEW_SMALL_INT(l);
    e368:	68fb      	ldr	r3, [r7, #12]
    e36a:	005b      	lsls	r3, r3, #1
    e36c:	f043 0301 	orr.w	r3, r3, #1
    e370:	e00f      	b.n	e392 <mp_obj_len_maybe+0x8a>
    } else {
        mp_obj_type_t *type = mp_obj_get_type(o_in);
    e372:	6878      	ldr	r0, [r7, #4]
    e374:	f7ff fc72 	bl	dc5c <mp_obj_get_type>
    e378:	60b8      	str	r0, [r7, #8]
        if (type->unary_op != NULL) {
    e37a:	68bb      	ldr	r3, [r7, #8]
    e37c:	695b      	ldr	r3, [r3, #20]
    e37e:	2b00      	cmp	r3, #0
    e380:	d006      	beq.n	e390 <mp_obj_len_maybe+0x88>
            return type->unary_op(MP_UNARY_OP_LEN, o_in);
    e382:	68bb      	ldr	r3, [r7, #8]
    e384:	695b      	ldr	r3, [r3, #20]
    e386:	6879      	ldr	r1, [r7, #4]
    e388:	2005      	movs	r0, #5
    e38a:	4798      	blx	r3
    e38c:	4603      	mov	r3, r0
    e38e:	e000      	b.n	e392 <mp_obj_len_maybe+0x8a>
        } else {
            return MP_OBJ_NULL;
    e390:	2300      	movs	r3, #0
        }
    }
}
    e392:	4618      	mov	r0, r3
    e394:	3710      	adds	r7, #16
    e396:	46bd      	mov	sp, r7
    e398:	bd80      	pop	{r7, pc}
    e39a:	bf00      	nop
    e39c:	000257b0 	.word	0x000257b0
    e3a0:	000257ec 	.word	0x000257ec

0000e3a4 <mp_obj_subscr>:

mp_obj_t mp_obj_subscr(mp_obj_t base, mp_obj_t index, mp_obj_t value) {
    e3a4:	b580      	push	{r7, lr}
    e3a6:	b086      	sub	sp, #24
    e3a8:	af00      	add	r7, sp, #0
    e3aa:	60f8      	str	r0, [r7, #12]
    e3ac:	60b9      	str	r1, [r7, #8]
    e3ae:	607a      	str	r2, [r7, #4]
    mp_obj_type_t *type = mp_obj_get_type(base);
    e3b0:	68f8      	ldr	r0, [r7, #12]
    e3b2:	f7ff fc53 	bl	dc5c <mp_obj_get_type>
    e3b6:	6178      	str	r0, [r7, #20]
    if (type->subscr != NULL) {
    e3b8:	697b      	ldr	r3, [r7, #20]
    e3ba:	6a1b      	ldr	r3, [r3, #32]
    e3bc:	2b00      	cmp	r3, #0
    e3be:	d00b      	beq.n	e3d8 <mp_obj_subscr+0x34>
        mp_obj_t ret = type->subscr(base, index, value);
    e3c0:	697b      	ldr	r3, [r7, #20]
    e3c2:	6a1b      	ldr	r3, [r3, #32]
    e3c4:	687a      	ldr	r2, [r7, #4]
    e3c6:	68b9      	ldr	r1, [r7, #8]
    e3c8:	68f8      	ldr	r0, [r7, #12]
    e3ca:	4798      	blx	r3
    e3cc:	6138      	str	r0, [r7, #16]
        if (ret != MP_OBJ_NULL) {
    e3ce:	693b      	ldr	r3, [r7, #16]
    e3d0:	2b00      	cmp	r3, #0
    e3d2:	d001      	beq.n	e3d8 <mp_obj_subscr+0x34>
            return ret;
    e3d4:	693b      	ldr	r3, [r7, #16]
    e3d6:	e00e      	b.n	e3f6 <mp_obj_subscr+0x52>
        }
        // TODO: call base classes here?
    }
    if (value == MP_OBJ_NULL) {
    e3d8:	687b      	ldr	r3, [r7, #4]
    e3da:	2b00      	cmp	r3, #0
    e3dc:	d102      	bne.n	e3e4 <mp_obj_subscr+0x40>
        if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
            mp_raise_TypeError("object doesn't support item deletion");
    e3de:	4808      	ldr	r0, [pc, #32]	; (e400 <mp_obj_subscr+0x5c>)
    e3e0:	f7fe ffd4 	bl	d38c <mp_raise_TypeError>
        } else {
            nlr_raise(mp_obj_new_exception_msg_varg(&mp_type_TypeError,
                "'%s' object doesn't support item deletion", mp_obj_get_type_str(base)));
        }
    } else if (value == MP_OBJ_SENTINEL) {
    e3e4:	687b      	ldr	r3, [r7, #4]
    e3e6:	2b08      	cmp	r3, #8
    e3e8:	d102      	bne.n	e3f0 <mp_obj_subscr+0x4c>
        if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
            mp_raise_TypeError("object isn't subscriptable");
    e3ea:	4806      	ldr	r0, [pc, #24]	; (e404 <mp_obj_subscr+0x60>)
    e3ec:	f7fe ffce 	bl	d38c <mp_raise_TypeError>
            nlr_raise(mp_obj_new_exception_msg_varg(&mp_type_TypeError,
                "'%s' object isn't subscriptable", mp_obj_get_type_str(base)));
        }
    } else {
        if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
            mp_raise_TypeError("object doesn't support item assignment");
    e3f0:	4805      	ldr	r0, [pc, #20]	; (e408 <mp_obj_subscr+0x64>)
    e3f2:	f7fe ffcb 	bl	d38c <mp_raise_TypeError>
        } else {
            nlr_raise(mp_obj_new_exception_msg_varg(&mp_type_TypeError,
                "'%s' object doesn't support item assignment", mp_obj_get_type_str(base)));
        }
    }
}
    e3f6:	4618      	mov	r0, r3
    e3f8:	3718      	adds	r7, #24
    e3fa:	46bd      	mov	sp, r7
    e3fc:	bd80      	pop	{r7, pc}
    e3fe:	bf00      	nop
    e400:	00023760 	.word	0x00023760
    e404:	00023788 	.word	0x00023788
    e408:	000237a4 	.word	0x000237a4

0000e40c <mp_identity>:

// Return input argument. Useful as .getiter for objects which are
// their own iterators, etc.
mp_obj_t mp_identity(mp_obj_t self) {
    e40c:	b480      	push	{r7}
    e40e:	b083      	sub	sp, #12
    e410:	af00      	add	r7, sp, #0
    e412:	6078      	str	r0, [r7, #4]
    return self;
    e414:	687b      	ldr	r3, [r7, #4]
}
    e416:	4618      	mov	r0, r3
    e418:	370c      	adds	r7, #12
    e41a:	46bd      	mov	sp, r7
    e41c:	f85d 7b04 	ldr.w	r7, [sp], #4
    e420:	4770      	bx	lr

0000e422 <mp_identity_getiter>:
MP_DEFINE_CONST_FUN_OBJ_1(mp_identity_obj, mp_identity);

mp_obj_t mp_identity_getiter(mp_obj_t self, mp_obj_iter_buf_t *iter_buf) {
    e422:	b480      	push	{r7}
    e424:	b083      	sub	sp, #12
    e426:	af00      	add	r7, sp, #0
    e428:	6078      	str	r0, [r7, #4]
    e42a:	6039      	str	r1, [r7, #0]
    (void)iter_buf;
    return self;
    e42c:	687b      	ldr	r3, [r7, #4]
}
    e42e:	4618      	mov	r0, r3
    e430:	370c      	adds	r7, #12
    e432:	46bd      	mov	sp, r7
    e434:	f85d 7b04 	ldr.w	r7, [sp], #4
    e438:	4770      	bx	lr

0000e43a <mp_get_buffer>:

bool mp_get_buffer(mp_obj_t obj, mp_buffer_info_t *bufinfo, mp_uint_t flags) {
    e43a:	b580      	push	{r7, lr}
    e43c:	b086      	sub	sp, #24
    e43e:	af00      	add	r7, sp, #0
    e440:	60f8      	str	r0, [r7, #12]
    e442:	60b9      	str	r1, [r7, #8]
    e444:	607a      	str	r2, [r7, #4]
    mp_obj_type_t *type = mp_obj_get_type(obj);
    e446:	68f8      	ldr	r0, [r7, #12]
    e448:	f7ff fc08 	bl	dc5c <mp_obj_get_type>
    e44c:	6178      	str	r0, [r7, #20]
    if (type->buffer_p.get_buffer == NULL) {
    e44e:	697b      	ldr	r3, [r7, #20]
    e450:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    e452:	2b00      	cmp	r3, #0
    e454:	d101      	bne.n	e45a <mp_get_buffer+0x20>
        return false;
    e456:	2300      	movs	r3, #0
    e458:	e00c      	b.n	e474 <mp_get_buffer+0x3a>
    }
    int ret = type->buffer_p.get_buffer(obj, bufinfo, flags);
    e45a:	697b      	ldr	r3, [r7, #20]
    e45c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    e45e:	687a      	ldr	r2, [r7, #4]
    e460:	68b9      	ldr	r1, [r7, #8]
    e462:	68f8      	ldr	r0, [r7, #12]
    e464:	4798      	blx	r3
    e466:	6138      	str	r0, [r7, #16]
    if (ret != 0) {
    e468:	693b      	ldr	r3, [r7, #16]
    e46a:	2b00      	cmp	r3, #0
    e46c:	d001      	beq.n	e472 <mp_get_buffer+0x38>
        return false;
    e46e:	2300      	movs	r3, #0
    e470:	e000      	b.n	e474 <mp_get_buffer+0x3a>
    }
    return true;
    e472:	2301      	movs	r3, #1
}
    e474:	4618      	mov	r0, r3
    e476:	3718      	adds	r7, #24
    e478:	46bd      	mov	sp, r7
    e47a:	bd80      	pop	{r7, pc}

0000e47c <mp_get_buffer_raise>:

void mp_get_buffer_raise(mp_obj_t obj, mp_buffer_info_t *bufinfo, mp_uint_t flags) {
    e47c:	b580      	push	{r7, lr}
    e47e:	b084      	sub	sp, #16
    e480:	af00      	add	r7, sp, #0
    e482:	60f8      	str	r0, [r7, #12]
    e484:	60b9      	str	r1, [r7, #8]
    e486:	607a      	str	r2, [r7, #4]
    if (!mp_get_buffer(obj, bufinfo, flags)) {
    e488:	687a      	ldr	r2, [r7, #4]
    e48a:	68b9      	ldr	r1, [r7, #8]
    e48c:	68f8      	ldr	r0, [r7, #12]
    e48e:	f7ff ffd4 	bl	e43a <mp_get_buffer>
    e492:	4603      	mov	r3, r0
    e494:	f083 0301 	eor.w	r3, r3, #1
    e498:	b2db      	uxtb	r3, r3
    e49a:	2b00      	cmp	r3, #0
    e49c:	d002      	beq.n	e4a4 <mp_get_buffer_raise+0x28>
        mp_raise_TypeError("object with buffer protocol required");
    e49e:	4803      	ldr	r0, [pc, #12]	; (e4ac <mp_get_buffer_raise+0x30>)
    e4a0:	f7fe ff74 	bl	d38c <mp_raise_TypeError>
    }
}
    e4a4:	bf00      	nop
    e4a6:	3710      	adds	r7, #16
    e4a8:	46bd      	mov	sp, r7
    e4aa:	bd80      	pop	{r7, pc}
    e4ac:	000237d4 	.word	0x000237d4

0000e4b0 <mp_generic_unary_op>:

mp_obj_t mp_generic_unary_op(mp_unary_op_t op, mp_obj_t o_in) {
    e4b0:	b480      	push	{r7}
    e4b2:	b083      	sub	sp, #12
    e4b4:	af00      	add	r7, sp, #0
    e4b6:	6078      	str	r0, [r7, #4]
    e4b8:	6039      	str	r1, [r7, #0]
    switch (op) {
    e4ba:	687b      	ldr	r3, [r7, #4]
    e4bc:	2b06      	cmp	r3, #6
    e4be:	d104      	bne.n	e4ca <mp_generic_unary_op+0x1a>
        case MP_UNARY_OP_HASH: return MP_OBJ_NEW_SMALL_INT((mp_uint_t)o_in);
    e4c0:	683b      	ldr	r3, [r7, #0]
    e4c2:	005b      	lsls	r3, r3, #1
    e4c4:	f043 0301 	orr.w	r3, r3, #1
    e4c8:	e000      	b.n	e4cc <mp_generic_unary_op+0x1c>
        default: return MP_OBJ_NULL; // op not supported
    e4ca:	2300      	movs	r3, #0
    }
}
    e4cc:	4618      	mov	r0, r3
    e4ce:	370c      	adds	r7, #12
    e4d0:	46bd      	mov	sp, r7
    e4d2:	f85d 7b04 	ldr.w	r7, [sp], #4
    e4d6:	4770      	bx	lr

0000e4d8 <mp_obj_new_bool>:
static inline mp_obj_t mp_obj_new_bool(mp_int_t x) { return x ? mp_const_true : mp_const_false; }
    e4d8:	b480      	push	{r7}
    e4da:	b083      	sub	sp, #12
    e4dc:	af00      	add	r7, sp, #0
    e4de:	6078      	str	r0, [r7, #4]
    e4e0:	687b      	ldr	r3, [r7, #4]
    e4e2:	2b00      	cmp	r3, #0
    e4e4:	d001      	beq.n	e4ea <mp_obj_new_bool+0x12>
    e4e6:	4b04      	ldr	r3, [pc, #16]	; (e4f8 <mp_obj_new_bool+0x20>)
    e4e8:	e000      	b.n	e4ec <mp_obj_new_bool+0x14>
    e4ea:	4b04      	ldr	r3, [pc, #16]	; (e4fc <mp_obj_new_bool+0x24>)
    e4ec:	4618      	mov	r0, r3
    e4ee:	370c      	adds	r7, #12
    e4f0:	46bd      	mov	sp, r7
    e4f2:	f85d 7b04 	ldr.w	r7, [sp], #4
    e4f6:	4770      	bx	lr
    e4f8:	00023868 	.word	0x00023868
    e4fc:	00023860 	.word	0x00023860

0000e500 <mp_arg_check_num>:
static inline void mp_arg_check_num(size_t n_args, size_t n_kw, size_t n_args_min, size_t n_args_max, bool takes_kw) {
    e500:	b580      	push	{r7, lr}
    e502:	b084      	sub	sp, #16
    e504:	af00      	add	r7, sp, #0
    e506:	60f8      	str	r0, [r7, #12]
    e508:	60b9      	str	r1, [r7, #8]
    e50a:	607a      	str	r2, [r7, #4]
    e50c:	603b      	str	r3, [r7, #0]
    mp_arg_check_num_sig(n_args, n_kw, (uint32_t)MP_OBJ_FUN_MAKE_SIG(n_args_min, n_args_max, takes_kw));
    e50e:	687b      	ldr	r3, [r7, #4]
    e510:	045a      	lsls	r2, r3, #17
    e512:	683b      	ldr	r3, [r7, #0]
    e514:	005b      	lsls	r3, r3, #1
    e516:	431a      	orrs	r2, r3
    e518:	7e3b      	ldrb	r3, [r7, #24]
    e51a:	2b00      	cmp	r3, #0
    e51c:	d001      	beq.n	e522 <mp_arg_check_num+0x22>
    e51e:	2301      	movs	r3, #1
    e520:	e000      	b.n	e524 <mp_arg_check_num+0x24>
    e522:	2300      	movs	r3, #0
    e524:	4313      	orrs	r3, r2
    e526:	461a      	mov	r2, r3
    e528:	68b9      	ldr	r1, [r7, #8]
    e52a:	68f8      	ldr	r0, [r7, #12]
    e52c:	f7fe ff54 	bl	d3d8 <mp_arg_check_num_sig>
}
    e530:	bf00      	nop
    e532:	3710      	adds	r7, #16
    e534:	46bd      	mov	sp, r7
    e536:	bd80      	pop	{r7, pc}

0000e538 <bool_print>:
typedef struct _mp_obj_bool_t {
    mp_obj_base_t base;
    bool value;
} mp_obj_bool_t;

STATIC void bool_print(const mp_print_t *print, mp_obj_t self_in, mp_print_kind_t kind) {
    e538:	b580      	push	{r7, lr}
    e53a:	b086      	sub	sp, #24
    e53c:	af00      	add	r7, sp, #0
    e53e:	60f8      	str	r0, [r7, #12]
    e540:	60b9      	str	r1, [r7, #8]
    e542:	607a      	str	r2, [r7, #4]
    mp_obj_bool_t *self = MP_OBJ_TO_PTR(self_in);
    e544:	68bb      	ldr	r3, [r7, #8]
    e546:	617b      	str	r3, [r7, #20]
            mp_print_str(print, "true");
        } else {
            mp_print_str(print, "false");
        }
    } else {
        if (self->value) {
    e548:	697b      	ldr	r3, [r7, #20]
    e54a:	791b      	ldrb	r3, [r3, #4]
    e54c:	2b00      	cmp	r3, #0
    e54e:	d004      	beq.n	e55a <bool_print+0x22>
            mp_print_str(print, "True");
    e550:	4906      	ldr	r1, [pc, #24]	; (e56c <bool_print+0x34>)
    e552:	68f8      	ldr	r0, [r7, #12]
    e554:	f7f3 fa7a 	bl	1a4c <mp_print_str>
        } else {
            mp_print_str(print, "False");
        }
    }
}
    e558:	e003      	b.n	e562 <bool_print+0x2a>
            mp_print_str(print, "False");
    e55a:	4905      	ldr	r1, [pc, #20]	; (e570 <bool_print+0x38>)
    e55c:	68f8      	ldr	r0, [r7, #12]
    e55e:	f7f3 fa75 	bl	1a4c <mp_print_str>
}
    e562:	bf00      	nop
    e564:	3718      	adds	r7, #24
    e566:	46bd      	mov	sp, r7
    e568:	bd80      	pop	{r7, pc}
    e56a:	bf00      	nop
    e56c:	00023814 	.word	0x00023814
    e570:	0002381c 	.word	0x0002381c

0000e574 <bool_make_new>:

STATIC mp_obj_t bool_make_new(const mp_obj_type_t *type_in, size_t n_args, size_t n_kw, const mp_obj_t *args) {
    e574:	b580      	push	{r7, lr}
    e576:	b086      	sub	sp, #24
    e578:	af02      	add	r7, sp, #8
    e57a:	60f8      	str	r0, [r7, #12]
    e57c:	60b9      	str	r1, [r7, #8]
    e57e:	607a      	str	r2, [r7, #4]
    e580:	603b      	str	r3, [r7, #0]
    (void)type_in;
    mp_arg_check_num(n_args, n_kw, 0, 1, false);
    e582:	2300      	movs	r3, #0
    e584:	9300      	str	r3, [sp, #0]
    e586:	2301      	movs	r3, #1
    e588:	2200      	movs	r2, #0
    e58a:	6879      	ldr	r1, [r7, #4]
    e58c:	68b8      	ldr	r0, [r7, #8]
    e58e:	f7ff ffb7 	bl	e500 <mp_arg_check_num>

    if (n_args == 0) {
    e592:	68bb      	ldr	r3, [r7, #8]
    e594:	2b00      	cmp	r3, #0
    e596:	d101      	bne.n	e59c <bool_make_new+0x28>
        return mp_const_false;
    e598:	4b07      	ldr	r3, [pc, #28]	; (e5b8 <bool_make_new+0x44>)
    e59a:	e009      	b.n	e5b0 <bool_make_new+0x3c>
    } else {
        return mp_obj_new_bool(mp_obj_is_true(args[0]));
    e59c:	683b      	ldr	r3, [r7, #0]
    e59e:	681b      	ldr	r3, [r3, #0]
    e5a0:	4618      	mov	r0, r3
    e5a2:	f7ff fc37 	bl	de14 <mp_obj_is_true>
    e5a6:	4603      	mov	r3, r0
    e5a8:	4618      	mov	r0, r3
    e5aa:	f7ff ff95 	bl	e4d8 <mp_obj_new_bool>
    e5ae:	4603      	mov	r3, r0
    }
}
    e5b0:	4618      	mov	r0, r3
    e5b2:	3710      	adds	r7, #16
    e5b4:	46bd      	mov	sp, r7
    e5b6:	bd80      	pop	{r7, pc}
    e5b8:	00023860 	.word	0x00023860

0000e5bc <bool_unary_op>:

STATIC mp_obj_t bool_unary_op(mp_unary_op_t op, mp_obj_t o_in) {
    e5bc:	b580      	push	{r7, lr}
    e5be:	b084      	sub	sp, #16
    e5c0:	af00      	add	r7, sp, #0
    e5c2:	6078      	str	r0, [r7, #4]
    e5c4:	6039      	str	r1, [r7, #0]
    if (op == MP_UNARY_OP_LEN) {
    e5c6:	687b      	ldr	r3, [r7, #4]
    e5c8:	2b05      	cmp	r3, #5
    e5ca:	d101      	bne.n	e5d0 <bool_unary_op+0x14>
        return MP_OBJ_NULL;
    e5cc:	2300      	movs	r3, #0
    e5ce:	e00b      	b.n	e5e8 <bool_unary_op+0x2c>
    }
    mp_obj_bool_t *self = MP_OBJ_TO_PTR(o_in);
    e5d0:	683b      	ldr	r3, [r7, #0]
    e5d2:	60fb      	str	r3, [r7, #12]
    return mp_unary_op(op, MP_OBJ_NEW_SMALL_INT(self->value));
    e5d4:	68fb      	ldr	r3, [r7, #12]
    e5d6:	791b      	ldrb	r3, [r3, #4]
    e5d8:	005b      	lsls	r3, r3, #1
    e5da:	f043 0301 	orr.w	r3, r3, #1
    e5de:	4619      	mov	r1, r3
    e5e0:	6878      	ldr	r0, [r7, #4]
    e5e2:	f7fd fa03 	bl	b9ec <mp_unary_op>
    e5e6:	4603      	mov	r3, r0
}
    e5e8:	4618      	mov	r0, r3
    e5ea:	3710      	adds	r7, #16
    e5ec:	46bd      	mov	sp, r7
    e5ee:	bd80      	pop	{r7, pc}

0000e5f0 <bool_binary_op>:

STATIC mp_obj_t bool_binary_op(mp_binary_op_t op, mp_obj_t lhs_in, mp_obj_t rhs_in) {
    e5f0:	b580      	push	{r7, lr}
    e5f2:	b086      	sub	sp, #24
    e5f4:	af00      	add	r7, sp, #0
    e5f6:	60f8      	str	r0, [r7, #12]
    e5f8:	60b9      	str	r1, [r7, #8]
    e5fa:	607a      	str	r2, [r7, #4]
    mp_obj_bool_t *self = MP_OBJ_TO_PTR(lhs_in);
    e5fc:	68bb      	ldr	r3, [r7, #8]
    e5fe:	617b      	str	r3, [r7, #20]
    return mp_binary_op(op, MP_OBJ_NEW_SMALL_INT(self->value), rhs_in);
    e600:	697b      	ldr	r3, [r7, #20]
    e602:	791b      	ldrb	r3, [r3, #4]
    e604:	005b      	lsls	r3, r3, #1
    e606:	f043 0301 	orr.w	r3, r3, #1
    e60a:	687a      	ldr	r2, [r7, #4]
    e60c:	4619      	mov	r1, r3
    e60e:	68f8      	ldr	r0, [r7, #12]
    e610:	f7fd faea 	bl	bbe8 <mp_binary_op>
    e614:	4603      	mov	r3, r0
}
    e616:	4618      	mov	r0, r3
    e618:	3718      	adds	r7, #24
    e61a:	46bd      	mov	sp, r7
    e61c:	bd80      	pop	{r7, pc}
    e61e:	bf00      	nop

0000e620 <mp_call_method_self_n_kw>:
    mp_obj_print_helper(print, o->meth, PRINT_REPR);
    mp_print_str(print, ">");
}
#endif

mp_obj_t mp_call_method_self_n_kw(mp_obj_t meth, mp_obj_t self, size_t n_args, size_t n_kw, const mp_obj_t *args) {
    e620:	b580      	push	{r7, lr}
    e622:	b088      	sub	sp, #32
    e624:	af00      	add	r7, sp, #0
    e626:	60f8      	str	r0, [r7, #12]
    e628:	60b9      	str	r1, [r7, #8]
    e62a:	607a      	str	r2, [r7, #4]
    e62c:	603b      	str	r3, [r7, #0]
    // need to insert self before all other args and then call meth
    size_t n_total = n_args + 2 * n_kw;
    e62e:	683b      	ldr	r3, [r7, #0]
    e630:	005a      	lsls	r2, r3, #1
    e632:	687b      	ldr	r3, [r7, #4]
    e634:	4413      	add	r3, r2
    e636:	617b      	str	r3, [r7, #20]
    mp_obj_t *args2 = NULL;
    e638:	2300      	movs	r3, #0
    e63a:	61fb      	str	r3, [r7, #28]
    #if MICROPY_ENABLE_PYSTACK
    args2 = mp_pystack_alloc(sizeof(mp_obj_t) * (1 + n_total));
    #else
    mp_obj_t *free_args2 = NULL;
    e63c:	2300      	movs	r3, #0
    e63e:	61bb      	str	r3, [r7, #24]
    if (n_total > 4) {
    e640:	697b      	ldr	r3, [r7, #20]
    e642:	2b04      	cmp	r3, #4
    e644:	d908      	bls.n	e658 <mp_call_method_self_n_kw+0x38>
        // try to use heap to allocate temporary args array
        args2 = m_new_maybe(mp_obj_t, 1 + n_total);
    e646:	697b      	ldr	r3, [r7, #20]
    e648:	3301      	adds	r3, #1
    e64a:	009b      	lsls	r3, r3, #2
    e64c:	4618      	mov	r0, r3
    e64e:	f7f1 fe83 	bl	358 <m_malloc_maybe>
    e652:	61f8      	str	r0, [r7, #28]
        free_args2 = args2;
    e654:	69fb      	ldr	r3, [r7, #28]
    e656:	61bb      	str	r3, [r7, #24]
    }
    if (args2 == NULL) {
    e658:	69fb      	ldr	r3, [r7, #28]
    e65a:	2b00      	cmp	r3, #0
    e65c:	d10d      	bne.n	e67a <mp_call_method_self_n_kw+0x5a>
        // (fallback to) use stack to allocate temporary args array
        args2 = alloca(sizeof(mp_obj_t) * (1 + n_total));
    e65e:	697b      	ldr	r3, [r7, #20]
    e660:	3301      	adds	r3, #1
    e662:	009b      	lsls	r3, r3, #2
    e664:	3307      	adds	r3, #7
    e666:	3307      	adds	r3, #7
    e668:	08db      	lsrs	r3, r3, #3
    e66a:	00db      	lsls	r3, r3, #3
    e66c:	ebad 0d03 	sub.w	sp, sp, r3
    e670:	466b      	mov	r3, sp
    e672:	3307      	adds	r3, #7
    e674:	08db      	lsrs	r3, r3, #3
    e676:	00db      	lsls	r3, r3, #3
    e678:	61fb      	str	r3, [r7, #28]
    }
    #endif
    args2[0] = self;
    e67a:	69fb      	ldr	r3, [r7, #28]
    e67c:	68ba      	ldr	r2, [r7, #8]
    e67e:	601a      	str	r2, [r3, #0]
    memcpy(args2 + 1, args, n_total * sizeof(mp_obj_t));
    e680:	69fb      	ldr	r3, [r7, #28]
    e682:	1d18      	adds	r0, r3, #4
    e684:	697b      	ldr	r3, [r7, #20]
    e686:	009b      	lsls	r3, r3, #2
    e688:	461a      	mov	r2, r3
    e68a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
    e68c:	f00f ff50 	bl	1e530 <memcpy>
    mp_obj_t res = mp_call_function_n_kw(meth, n_args + 1, n_kw, args2);
    e690:	687b      	ldr	r3, [r7, #4]
    e692:	1c59      	adds	r1, r3, #1
    e694:	69fb      	ldr	r3, [r7, #28]
    e696:	683a      	ldr	r2, [r7, #0]
    e698:	68f8      	ldr	r0, [r7, #12]
    e69a:	f7fd fd4c 	bl	c136 <mp_call_function_n_kw>
    e69e:	6138      	str	r0, [r7, #16]
    #if MICROPY_ENABLE_PYSTACK
    mp_pystack_free(args2);
    #else
    if (free_args2 != NULL) {
    e6a0:	69bb      	ldr	r3, [r7, #24]
    e6a2:	2b00      	cmp	r3, #0
    e6a4:	d002      	beq.n	e6ac <mp_call_method_self_n_kw+0x8c>
        m_del(mp_obj_t, free_args2, 1 + n_total);
    e6a6:	69b8      	ldr	r0, [r7, #24]
    e6a8:	f7f1 feb6 	bl	418 <m_free>
    }
    #endif
    return res;
    e6ac:	693b      	ldr	r3, [r7, #16]
}
    e6ae:	4618      	mov	r0, r3
    e6b0:	3720      	adds	r7, #32
    e6b2:	46bd      	mov	sp, r7
    e6b4:	bd80      	pop	{r7, pc}

0000e6b6 <bound_meth_call>:

STATIC mp_obj_t bound_meth_call(mp_obj_t self_in, size_t n_args, size_t n_kw, const mp_obj_t *args) {
    e6b6:	b580      	push	{r7, lr}
    e6b8:	b088      	sub	sp, #32
    e6ba:	af02      	add	r7, sp, #8
    e6bc:	60f8      	str	r0, [r7, #12]
    e6be:	60b9      	str	r1, [r7, #8]
    e6c0:	607a      	str	r2, [r7, #4]
    e6c2:	603b      	str	r3, [r7, #0]
    mp_obj_bound_meth_t *self = MP_OBJ_TO_PTR(self_in);
    e6c4:	68fb      	ldr	r3, [r7, #12]
    e6c6:	617b      	str	r3, [r7, #20]
    return mp_call_method_self_n_kw(self->meth, self->self, n_args, n_kw, args);
    e6c8:	697b      	ldr	r3, [r7, #20]
    e6ca:	6858      	ldr	r0, [r3, #4]
    e6cc:	697b      	ldr	r3, [r7, #20]
    e6ce:	6899      	ldr	r1, [r3, #8]
    e6d0:	683b      	ldr	r3, [r7, #0]
    e6d2:	9300      	str	r3, [sp, #0]
    e6d4:	687b      	ldr	r3, [r7, #4]
    e6d6:	68ba      	ldr	r2, [r7, #8]
    e6d8:	f7ff ffa2 	bl	e620 <mp_call_method_self_n_kw>
    e6dc:	4603      	mov	r3, r0
}
    e6de:	4618      	mov	r0, r3
    e6e0:	3718      	adds	r7, #24
    e6e2:	46bd      	mov	sp, r7
    e6e4:	bd80      	pop	{r7, pc}

0000e6e6 <mp_obj_new_bound_meth>:
#if MICROPY_PY_FUNCTION_ATTRS
    .attr = bound_meth_attr,
#endif
};

mp_obj_t mp_obj_new_bound_meth(mp_obj_t meth, mp_obj_t self) {
    e6e6:	b580      	push	{r7, lr}
    e6e8:	b084      	sub	sp, #16
    e6ea:	af00      	add	r7, sp, #0
    e6ec:	6078      	str	r0, [r7, #4]
    e6ee:	6039      	str	r1, [r7, #0]
    mp_obj_bound_meth_t *o = m_new_obj(mp_obj_bound_meth_t);
    e6f0:	200c      	movs	r0, #12
    e6f2:	f7f1 fe13 	bl	31c <m_malloc>
    e6f6:	60f8      	str	r0, [r7, #12]
    o->base.type = &mp_type_bound_meth;
    e6f8:	68fb      	ldr	r3, [r7, #12]
    e6fa:	4a06      	ldr	r2, [pc, #24]	; (e714 <mp_obj_new_bound_meth+0x2e>)
    e6fc:	601a      	str	r2, [r3, #0]
    o->meth = meth;
    e6fe:	68fb      	ldr	r3, [r7, #12]
    e700:	687a      	ldr	r2, [r7, #4]
    e702:	605a      	str	r2, [r3, #4]
    o->self = self;
    e704:	68fb      	ldr	r3, [r7, #12]
    e706:	683a      	ldr	r2, [r7, #0]
    e708:	609a      	str	r2, [r3, #8]
    return MP_OBJ_FROM_PTR(o);
    e70a:	68fb      	ldr	r3, [r7, #12]
}
    e70c:	4618      	mov	r0, r3
    e70e:	3710      	adds	r7, #16
    e710:	46bd      	mov	sp, r7
    e712:	bd80      	pop	{r7, pc}
    e714:	00023870 	.word	0x00023870

0000e718 <mp_obj_cell_get>:
typedef struct _mp_obj_cell_t {
    mp_obj_base_t base;
    mp_obj_t obj;
} mp_obj_cell_t;

mp_obj_t mp_obj_cell_get(mp_obj_t self_in) {
    e718:	b480      	push	{r7}
    e71a:	b085      	sub	sp, #20
    e71c:	af00      	add	r7, sp, #0
    e71e:	6078      	str	r0, [r7, #4]
    mp_obj_cell_t *self = MP_OBJ_TO_PTR(self_in);
    e720:	687b      	ldr	r3, [r7, #4]
    e722:	60fb      	str	r3, [r7, #12]
    return self->obj;
    e724:	68fb      	ldr	r3, [r7, #12]
    e726:	685b      	ldr	r3, [r3, #4]
}
    e728:	4618      	mov	r0, r3
    e72a:	3714      	adds	r7, #20
    e72c:	46bd      	mov	sp, r7
    e72e:	f85d 7b04 	ldr.w	r7, [sp], #4
    e732:	4770      	bx	lr

0000e734 <mp_obj_cell_set>:

void mp_obj_cell_set(mp_obj_t self_in, mp_obj_t obj) {
    e734:	b480      	push	{r7}
    e736:	b085      	sub	sp, #20
    e738:	af00      	add	r7, sp, #0
    e73a:	6078      	str	r0, [r7, #4]
    e73c:	6039      	str	r1, [r7, #0]
    mp_obj_cell_t *self = MP_OBJ_TO_PTR(self_in);
    e73e:	687b      	ldr	r3, [r7, #4]
    e740:	60fb      	str	r3, [r7, #12]
    self->obj = obj;
    e742:	68fb      	ldr	r3, [r7, #12]
    e744:	683a      	ldr	r2, [r7, #0]
    e746:	605a      	str	r2, [r3, #4]
}
    e748:	bf00      	nop
    e74a:	3714      	adds	r7, #20
    e74c:	46bd      	mov	sp, r7
    e74e:	f85d 7b04 	ldr.w	r7, [sp], #4
    e752:	4770      	bx	lr

0000e754 <mp_obj_new_cell>:
#if MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_DETAILED
    .print = cell_print,
#endif
};

mp_obj_t mp_obj_new_cell(mp_obj_t obj) {
    e754:	b580      	push	{r7, lr}
    e756:	b084      	sub	sp, #16
    e758:	af00      	add	r7, sp, #0
    e75a:	6078      	str	r0, [r7, #4]
    mp_obj_cell_t *o = m_new_obj(mp_obj_cell_t);
    e75c:	2008      	movs	r0, #8
    e75e:	f7f1 fddd 	bl	31c <m_malloc>
    e762:	60f8      	str	r0, [r7, #12]
    o->base.type = &mp_type_cell;
    e764:	68fb      	ldr	r3, [r7, #12]
    e766:	4a05      	ldr	r2, [pc, #20]	; (e77c <mp_obj_new_cell+0x28>)
    e768:	601a      	str	r2, [r3, #0]
    o->obj = obj;
    e76a:	68fb      	ldr	r3, [r7, #12]
    e76c:	687a      	ldr	r2, [r7, #4]
    e76e:	605a      	str	r2, [r3, #4]
    return MP_OBJ_FROM_PTR(o);
    e770:	68fb      	ldr	r3, [r7, #12]
}
    e772:	4618      	mov	r0, r3
    e774:	3710      	adds	r7, #16
    e776:	46bd      	mov	sp, r7
    e778:	bd80      	pop	{r7, pc}
    e77a:	bf00      	nop
    e77c:	000238ac 	.word	0x000238ac

0000e780 <closure_call>:
    mp_obj_t fun;
    size_t n_closed;
    mp_obj_t closed[];
} mp_obj_closure_t;

STATIC mp_obj_t closure_call(mp_obj_t self_in, size_t n_args, size_t n_kw, const mp_obj_t *args) {
    e780:	b580      	push	{r7, lr}
    e782:	b08e      	sub	sp, #56	; 0x38
    e784:	af00      	add	r7, sp, #0
    e786:	60f8      	str	r0, [r7, #12]
    e788:	60b9      	str	r1, [r7, #8]
    e78a:	607a      	str	r2, [r7, #4]
    e78c:	603b      	str	r3, [r7, #0]
    mp_obj_closure_t *self = MP_OBJ_TO_PTR(self_in);
    e78e:	68fb      	ldr	r3, [r7, #12]
    e790:	637b      	str	r3, [r7, #52]	; 0x34

    // need to concatenate closed-over-vars and args

    size_t n_total = self->n_closed + n_args + 2 * n_kw;
    e792:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    e794:	689a      	ldr	r2, [r3, #8]
    e796:	68bb      	ldr	r3, [r7, #8]
    e798:	441a      	add	r2, r3
    e79a:	687b      	ldr	r3, [r7, #4]
    e79c:	005b      	lsls	r3, r3, #1
    e79e:	4413      	add	r3, r2
    e7a0:	633b      	str	r3, [r7, #48]	; 0x30
    if (n_total <= 5) {
    e7a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    e7a4:	2b05      	cmp	r3, #5
    e7a6:	d826      	bhi.n	e7f6 <closure_call+0x76>
        // use stack to allocate temporary args array
        mp_obj_t args2[5];
        memcpy(args2, self->closed, self->n_closed * sizeof(mp_obj_t));
    e7a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    e7aa:	f103 010c 	add.w	r1, r3, #12
    e7ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    e7b0:	689b      	ldr	r3, [r3, #8]
    e7b2:	009a      	lsls	r2, r3, #2
    e7b4:	f107 0314 	add.w	r3, r7, #20
    e7b8:	4618      	mov	r0, r3
    e7ba:	f00f feb9 	bl	1e530 <memcpy>
        memcpy(args2 + self->n_closed, args, (n_args + 2 * n_kw) * sizeof(mp_obj_t));
    e7be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    e7c0:	689b      	ldr	r3, [r3, #8]
    e7c2:	009b      	lsls	r3, r3, #2
    e7c4:	f107 0214 	add.w	r2, r7, #20
    e7c8:	18d0      	adds	r0, r2, r3
    e7ca:	687b      	ldr	r3, [r7, #4]
    e7cc:	005a      	lsls	r2, r3, #1
    e7ce:	68bb      	ldr	r3, [r7, #8]
    e7d0:	4413      	add	r3, r2
    e7d2:	009b      	lsls	r3, r3, #2
    e7d4:	461a      	mov	r2, r3
    e7d6:	6839      	ldr	r1, [r7, #0]
    e7d8:	f00f feaa 	bl	1e530 <memcpy>
        return mp_call_function_n_kw(self->fun, self->n_closed + n_args, n_kw, args2);
    e7dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    e7de:	6858      	ldr	r0, [r3, #4]
    e7e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    e7e2:	689a      	ldr	r2, [r3, #8]
    e7e4:	68bb      	ldr	r3, [r7, #8]
    e7e6:	18d1      	adds	r1, r2, r3
    e7e8:	f107 0314 	add.w	r3, r7, #20
    e7ec:	687a      	ldr	r2, [r7, #4]
    e7ee:	f7fd fca2 	bl	c136 <mp_call_function_n_kw>
    e7f2:	4603      	mov	r3, r0
    e7f4:	e02c      	b.n	e850 <closure_call+0xd0>
    } else {
        // use heap to allocate temporary args array
        mp_obj_t *args2 = m_new(mp_obj_t, n_total);
    e7f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    e7f8:	009b      	lsls	r3, r3, #2
    e7fa:	4618      	mov	r0, r3
    e7fc:	f7f1 fd8e 	bl	31c <m_malloc>
    e800:	62f8      	str	r0, [r7, #44]	; 0x2c
        memcpy(args2, self->closed, self->n_closed * sizeof(mp_obj_t));
    e802:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    e804:	f103 010c 	add.w	r1, r3, #12
    e808:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    e80a:	689b      	ldr	r3, [r3, #8]
    e80c:	009b      	lsls	r3, r3, #2
    e80e:	461a      	mov	r2, r3
    e810:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    e812:	f00f fe8d 	bl	1e530 <memcpy>
        memcpy(args2 + self->n_closed, args, (n_args + 2 * n_kw) * sizeof(mp_obj_t));
    e816:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    e818:	689b      	ldr	r3, [r3, #8]
    e81a:	009b      	lsls	r3, r3, #2
    e81c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    e81e:	18d0      	adds	r0, r2, r3
    e820:	687b      	ldr	r3, [r7, #4]
    e822:	005a      	lsls	r2, r3, #1
    e824:	68bb      	ldr	r3, [r7, #8]
    e826:	4413      	add	r3, r2
    e828:	009b      	lsls	r3, r3, #2
    e82a:	461a      	mov	r2, r3
    e82c:	6839      	ldr	r1, [r7, #0]
    e82e:	f00f fe7f 	bl	1e530 <memcpy>
        mp_obj_t res = mp_call_function_n_kw(self->fun, self->n_closed + n_args, n_kw, args2);
    e832:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    e834:	6858      	ldr	r0, [r3, #4]
    e836:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    e838:	689a      	ldr	r2, [r3, #8]
    e83a:	68bb      	ldr	r3, [r7, #8]
    e83c:	18d1      	adds	r1, r2, r3
    e83e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    e840:	687a      	ldr	r2, [r7, #4]
    e842:	f7fd fc78 	bl	c136 <mp_call_function_n_kw>
    e846:	62b8      	str	r0, [r7, #40]	; 0x28
        m_del(mp_obj_t, args2, n_total);
    e848:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    e84a:	f7f1 fde5 	bl	418 <m_free>
        return res;
    e84e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
}
    e850:	4618      	mov	r0, r3
    e852:	3738      	adds	r7, #56	; 0x38
    e854:	46bd      	mov	sp, r7
    e856:	bd80      	pop	{r7, pc}

0000e858 <mp_obj_new_closure>:
    .print = closure_print,
#endif
    .call = closure_call,
};

mp_obj_t mp_obj_new_closure(mp_obj_t fun, size_t n_closed_over, const mp_obj_t *closed) {
    e858:	b580      	push	{r7, lr}
    e85a:	b086      	sub	sp, #24
    e85c:	af00      	add	r7, sp, #0
    e85e:	60f8      	str	r0, [r7, #12]
    e860:	60b9      	str	r1, [r7, #8]
    e862:	607a      	str	r2, [r7, #4]
    mp_obj_closure_t *o = m_new_obj_var(mp_obj_closure_t, mp_obj_t, n_closed_over);
    e864:	68bb      	ldr	r3, [r7, #8]
    e866:	3303      	adds	r3, #3
    e868:	009b      	lsls	r3, r3, #2
    e86a:	4618      	mov	r0, r3
    e86c:	f7f1 fd56 	bl	31c <m_malloc>
    e870:	6178      	str	r0, [r7, #20]
    o->base.type = &closure_type;
    e872:	697b      	ldr	r3, [r7, #20]
    e874:	4a0a      	ldr	r2, [pc, #40]	; (e8a0 <mp_obj_new_closure+0x48>)
    e876:	601a      	str	r2, [r3, #0]
    o->fun = fun;
    e878:	697b      	ldr	r3, [r7, #20]
    e87a:	68fa      	ldr	r2, [r7, #12]
    e87c:	605a      	str	r2, [r3, #4]
    o->n_closed = n_closed_over;
    e87e:	697b      	ldr	r3, [r7, #20]
    e880:	68ba      	ldr	r2, [r7, #8]
    e882:	609a      	str	r2, [r3, #8]
    memcpy(o->closed, closed, n_closed_over * sizeof(mp_obj_t));
    e884:	697b      	ldr	r3, [r7, #20]
    e886:	f103 000c 	add.w	r0, r3, #12
    e88a:	68bb      	ldr	r3, [r7, #8]
    e88c:	009b      	lsls	r3, r3, #2
    e88e:	461a      	mov	r2, r3
    e890:	6879      	ldr	r1, [r7, #4]
    e892:	f00f fe4d 	bl	1e530 <memcpy>
    return MP_OBJ_FROM_PTR(o);
    e896:	697b      	ldr	r3, [r7, #20]
}
    e898:	4618      	mov	r0, r3
    e89a:	3718      	adds	r7, #24
    e89c:	46bd      	mov	sp, r7
    e89e:	bd80      	pop	{r7, pc}
    e8a0:	000238e8 	.word	0x000238e8

0000e8a4 <MP_OBJ_IS_OBJ>:
    { return ((((mp_int_t)(o)) & 3) == 0); }
    e8a4:	b480      	push	{r7}
    e8a6:	b083      	sub	sp, #12
    e8a8:	af00      	add	r7, sp, #0
    e8aa:	6078      	str	r0, [r7, #4]
    e8ac:	687b      	ldr	r3, [r7, #4]
    e8ae:	f003 0303 	and.w	r3, r3, #3
    e8b2:	2b00      	cmp	r3, #0
    e8b4:	bf0c      	ite	eq
    e8b6:	2301      	moveq	r3, #1
    e8b8:	2300      	movne	r3, #0
    e8ba:	b2db      	uxtb	r3, r3
    e8bc:	4618      	mov	r0, r3
    e8be:	370c      	adds	r7, #12
    e8c0:	46bd      	mov	sp, r7
    e8c2:	f85d 7b04 	ldr.w	r7, [sp], #4
    e8c6:	4770      	bx	lr

0000e8c8 <MP_MAP_SLOT_IS_FILLED>:
static inline bool MP_MAP_SLOT_IS_FILLED(const mp_map_t *map, size_t pos) { return ((map)->table[pos].key != MP_OBJ_NULL && (map)->table[pos].key != MP_OBJ_SENTINEL); }
    e8c8:	b480      	push	{r7}
    e8ca:	b083      	sub	sp, #12
    e8cc:	af00      	add	r7, sp, #0
    e8ce:	6078      	str	r0, [r7, #4]
    e8d0:	6039      	str	r1, [r7, #0]
    e8d2:	687b      	ldr	r3, [r7, #4]
    e8d4:	689a      	ldr	r2, [r3, #8]
    e8d6:	683b      	ldr	r3, [r7, #0]
    e8d8:	00db      	lsls	r3, r3, #3
    e8da:	4413      	add	r3, r2
    e8dc:	681b      	ldr	r3, [r3, #0]
    e8de:	2b00      	cmp	r3, #0
    e8e0:	d009      	beq.n	e8f6 <MP_MAP_SLOT_IS_FILLED+0x2e>
    e8e2:	687b      	ldr	r3, [r7, #4]
    e8e4:	689a      	ldr	r2, [r3, #8]
    e8e6:	683b      	ldr	r3, [r7, #0]
    e8e8:	00db      	lsls	r3, r3, #3
    e8ea:	4413      	add	r3, r2
    e8ec:	681b      	ldr	r3, [r3, #0]
    e8ee:	2b08      	cmp	r3, #8
    e8f0:	d001      	beq.n	e8f6 <MP_MAP_SLOT_IS_FILLED+0x2e>
    e8f2:	2301      	movs	r3, #1
    e8f4:	e000      	b.n	e8f8 <MP_MAP_SLOT_IS_FILLED+0x30>
    e8f6:	2300      	movs	r3, #0
    e8f8:	f003 0301 	and.w	r3, r3, #1
    e8fc:	b2db      	uxtb	r3, r3
    e8fe:	4618      	mov	r0, r3
    e900:	370c      	adds	r7, #12
    e902:	46bd      	mov	sp, r7
    e904:	f85d 7b04 	ldr.w	r7, [sp], #4
    e908:	4770      	bx	lr

0000e90a <mp_obj_new_bool>:
static inline mp_obj_t mp_obj_new_bool(mp_int_t x) { return x ? mp_const_true : mp_const_false; }
    e90a:	b480      	push	{r7}
    e90c:	b083      	sub	sp, #12
    e90e:	af00      	add	r7, sp, #0
    e910:	6078      	str	r0, [r7, #4]
    e912:	687b      	ldr	r3, [r7, #4]
    e914:	2b00      	cmp	r3, #0
    e916:	d001      	beq.n	e91c <mp_obj_new_bool+0x12>
    e918:	4b04      	ldr	r3, [pc, #16]	; (e92c <mp_obj_new_bool+0x22>)
    e91a:	e000      	b.n	e91e <mp_obj_new_bool+0x14>
    e91c:	4b04      	ldr	r3, [pc, #16]	; (e930 <mp_obj_new_bool+0x26>)
    e91e:	4618      	mov	r0, r3
    e920:	370c      	adds	r7, #12
    e922:	46bd      	mov	sp, r7
    e924:	f85d 7b04 	ldr.w	r7, [sp], #4
    e928:	4770      	bx	lr
    e92a:	bf00      	nop
    e92c:	00023868 	.word	0x00023868
    e930:	00023860 	.word	0x00023860

0000e934 <mp_arg_check_num>:
static inline void mp_arg_check_num(size_t n_args, size_t n_kw, size_t n_args_min, size_t n_args_max, bool takes_kw) {
    e934:	b580      	push	{r7, lr}
    e936:	b084      	sub	sp, #16
    e938:	af00      	add	r7, sp, #0
    e93a:	60f8      	str	r0, [r7, #12]
    e93c:	60b9      	str	r1, [r7, #8]
    e93e:	607a      	str	r2, [r7, #4]
    e940:	603b      	str	r3, [r7, #0]
    mp_arg_check_num_sig(n_args, n_kw, (uint32_t)MP_OBJ_FUN_MAKE_SIG(n_args_min, n_args_max, takes_kw));
    e942:	687b      	ldr	r3, [r7, #4]
    e944:	045a      	lsls	r2, r3, #17
    e946:	683b      	ldr	r3, [r7, #0]
    e948:	005b      	lsls	r3, r3, #1
    e94a:	431a      	orrs	r2, r3
    e94c:	7e3b      	ldrb	r3, [r7, #24]
    e94e:	2b00      	cmp	r3, #0
    e950:	d001      	beq.n	e956 <mp_arg_check_num+0x22>
    e952:	2301      	movs	r3, #1
    e954:	e000      	b.n	e958 <mp_arg_check_num+0x24>
    e956:	2300      	movs	r3, #0
    e958:	4313      	orrs	r3, r2
    e95a:	461a      	mov	r2, r3
    e95c:	68b9      	ldr	r1, [r7, #8]
    e95e:	68f8      	ldr	r0, [r7, #12]
    e960:	f7fe fd3a 	bl	d3d8 <mp_arg_check_num_sig>
}
    e964:	bf00      	nop
    e966:	3710      	adds	r7, #16
    e968:	46bd      	mov	sp, r7
    e96a:	bd80      	pop	{r7, pc}

0000e96c <dict_iter_next>:
STATIC mp_obj_t dict_update(size_t n_args, const mp_obj_t *args, mp_map_t *kwargs);

// This is a helper function to iterate through a dictionary.  The state of
// the iteration is held in *cur and should be initialised with zero for the
// first call.  Will return NULL when no more elements are available.
STATIC mp_map_elem_t *dict_iter_next(mp_obj_dict_t *dict, size_t *cur) {
    e96c:	b580      	push	{r7, lr}
    e96e:	b086      	sub	sp, #24
    e970:	af00      	add	r7, sp, #0
    e972:	6078      	str	r0, [r7, #4]
    e974:	6039      	str	r1, [r7, #0]
    size_t max = dict->map.alloc;
    e976:	687b      	ldr	r3, [r7, #4]
    e978:	689b      	ldr	r3, [r3, #8]
    e97a:	613b      	str	r3, [r7, #16]
    mp_map_t *map = &dict->map;
    e97c:	687b      	ldr	r3, [r7, #4]
    e97e:	3304      	adds	r3, #4
    e980:	60fb      	str	r3, [r7, #12]

    for (size_t i = *cur; i < max; i++) {
    e982:	683b      	ldr	r3, [r7, #0]
    e984:	681b      	ldr	r3, [r3, #0]
    e986:	617b      	str	r3, [r7, #20]
    e988:	e013      	b.n	e9b2 <dict_iter_next+0x46>
        if (MP_MAP_SLOT_IS_FILLED(map, i)) {
    e98a:	6979      	ldr	r1, [r7, #20]
    e98c:	68f8      	ldr	r0, [r7, #12]
    e98e:	f7ff ff9b 	bl	e8c8 <MP_MAP_SLOT_IS_FILLED>
    e992:	4603      	mov	r3, r0
    e994:	2b00      	cmp	r3, #0
    e996:	d009      	beq.n	e9ac <dict_iter_next+0x40>
            *cur = i + 1;
    e998:	697b      	ldr	r3, [r7, #20]
    e99a:	1c5a      	adds	r2, r3, #1
    e99c:	683b      	ldr	r3, [r7, #0]
    e99e:	601a      	str	r2, [r3, #0]
            return &(map->table[i]);
    e9a0:	68fb      	ldr	r3, [r7, #12]
    e9a2:	689a      	ldr	r2, [r3, #8]
    e9a4:	697b      	ldr	r3, [r7, #20]
    e9a6:	00db      	lsls	r3, r3, #3
    e9a8:	4413      	add	r3, r2
    e9aa:	e007      	b.n	e9bc <dict_iter_next+0x50>
    for (size_t i = *cur; i < max; i++) {
    e9ac:	697b      	ldr	r3, [r7, #20]
    e9ae:	3301      	adds	r3, #1
    e9b0:	617b      	str	r3, [r7, #20]
    e9b2:	697a      	ldr	r2, [r7, #20]
    e9b4:	693b      	ldr	r3, [r7, #16]
    e9b6:	429a      	cmp	r2, r3
    e9b8:	d3e7      	bcc.n	e98a <dict_iter_next+0x1e>
        }
    }

    return NULL;
    e9ba:	2300      	movs	r3, #0
}
    e9bc:	4618      	mov	r0, r3
    e9be:	3718      	adds	r7, #24
    e9c0:	46bd      	mov	sp, r7
    e9c2:	bd80      	pop	{r7, pc}

0000e9c4 <dict_print>:

STATIC void dict_print(const mp_print_t *print, mp_obj_t self_in, mp_print_kind_t kind) {
    e9c4:	b580      	push	{r7, lr}
    e9c6:	b088      	sub	sp, #32
    e9c8:	af00      	add	r7, sp, #0
    e9ca:	60f8      	str	r0, [r7, #12]
    e9cc:	60b9      	str	r1, [r7, #8]
    e9ce:	607a      	str	r2, [r7, #4]
    mp_obj_dict_t *self = MP_OBJ_TO_PTR(self_in);
    e9d0:	68bb      	ldr	r3, [r7, #8]
    e9d2:	61bb      	str	r3, [r7, #24]
    bool first = true;
    e9d4:	2301      	movs	r3, #1
    e9d6:	77fb      	strb	r3, [r7, #31]
    if (!(MICROPY_PY_UJSON && kind == PRINT_JSON)) {
        kind = PRINT_REPR;
    e9d8:	2301      	movs	r3, #1
    e9da:	607b      	str	r3, [r7, #4]
    }
    if (MICROPY_PY_COLLECTIONS_ORDEREDDICT && self->base.type != &mp_type_dict) {
        mp_printf(print, "%q(", self->base.type->name);
    }
    mp_print_str(print, "{");
    e9dc:	491c      	ldr	r1, [pc, #112]	; (ea50 <dict_print+0x8c>)
    e9de:	68f8      	ldr	r0, [r7, #12]
    e9e0:	f7f3 f834 	bl	1a4c <mp_print_str>
    size_t cur = 0;
    e9e4:	2300      	movs	r3, #0
    e9e6:	613b      	str	r3, [r7, #16]
    mp_map_elem_t *next = NULL;
    e9e8:	2300      	movs	r3, #0
    e9ea:	617b      	str	r3, [r7, #20]
    while ((next = dict_iter_next(self, &cur)) != NULL) {
    e9ec:	e01d      	b.n	ea2a <dict_print+0x66>
        if (!first) {
    e9ee:	7ffb      	ldrb	r3, [r7, #31]
    e9f0:	f083 0301 	eor.w	r3, r3, #1
    e9f4:	b2db      	uxtb	r3, r3
    e9f6:	2b00      	cmp	r3, #0
    e9f8:	d003      	beq.n	ea02 <dict_print+0x3e>
            mp_print_str(print, ", ");
    e9fa:	4916      	ldr	r1, [pc, #88]	; (ea54 <dict_print+0x90>)
    e9fc:	68f8      	ldr	r0, [r7, #12]
    e9fe:	f7f3 f825 	bl	1a4c <mp_print_str>
        }
        first = false;
    ea02:	2300      	movs	r3, #0
    ea04:	77fb      	strb	r3, [r7, #31]
        mp_obj_print_helper(print, next->key, kind);
    ea06:	697b      	ldr	r3, [r7, #20]
    ea08:	681b      	ldr	r3, [r3, #0]
    ea0a:	687a      	ldr	r2, [r7, #4]
    ea0c:	4619      	mov	r1, r3
    ea0e:	68f8      	ldr	r0, [r7, #12]
    ea10:	f7ff f955 	bl	dcbe <mp_obj_print_helper>
        mp_print_str(print, ": ");
    ea14:	4910      	ldr	r1, [pc, #64]	; (ea58 <dict_print+0x94>)
    ea16:	68f8      	ldr	r0, [r7, #12]
    ea18:	f7f3 f818 	bl	1a4c <mp_print_str>
        mp_obj_print_helper(print, next->value, kind);
    ea1c:	697b      	ldr	r3, [r7, #20]
    ea1e:	685b      	ldr	r3, [r3, #4]
    ea20:	687a      	ldr	r2, [r7, #4]
    ea22:	4619      	mov	r1, r3
    ea24:	68f8      	ldr	r0, [r7, #12]
    ea26:	f7ff f94a 	bl	dcbe <mp_obj_print_helper>
    while ((next = dict_iter_next(self, &cur)) != NULL) {
    ea2a:	f107 0310 	add.w	r3, r7, #16
    ea2e:	4619      	mov	r1, r3
    ea30:	69b8      	ldr	r0, [r7, #24]
    ea32:	f7ff ff9b 	bl	e96c <dict_iter_next>
    ea36:	6178      	str	r0, [r7, #20]
    ea38:	697b      	ldr	r3, [r7, #20]
    ea3a:	2b00      	cmp	r3, #0
    ea3c:	d1d7      	bne.n	e9ee <dict_print+0x2a>
    }
    mp_print_str(print, "}");
    ea3e:	4907      	ldr	r1, [pc, #28]	; (ea5c <dict_print+0x98>)
    ea40:	68f8      	ldr	r0, [r7, #12]
    ea42:	f7f3 f803 	bl	1a4c <mp_print_str>
    if (MICROPY_PY_COLLECTIONS_ORDEREDDICT && self->base.type != &mp_type_dict) {
        mp_print_str(print, ")");
    }
}
    ea46:	bf00      	nop
    ea48:	3720      	adds	r7, #32
    ea4a:	46bd      	mov	sp, r7
    ea4c:	bd80      	pop	{r7, pc}
    ea4e:	bf00      	nop
    ea50:	00023924 	.word	0x00023924
    ea54:	00023928 	.word	0x00023928
    ea58:	0002392c 	.word	0x0002392c
    ea5c:	00023930 	.word	0x00023930

0000ea60 <dict_make_new>:

STATIC mp_obj_t dict_make_new(const mp_obj_type_t *type, size_t n_args, size_t n_kw, const mp_obj_t *args) {
    ea60:	b580      	push	{r7, lr}
    ea62:	b08c      	sub	sp, #48	; 0x30
    ea64:	af00      	add	r7, sp, #0
    ea66:	60f8      	str	r0, [r7, #12]
    ea68:	60b9      	str	r1, [r7, #8]
    ea6a:	607a      	str	r2, [r7, #4]
    ea6c:	603b      	str	r3, [r7, #0]
    mp_obj_t dict_out = mp_obj_new_dict(0);
    ea6e:	2000      	movs	r0, #0
    ea70:	f000 fd94 	bl	f59c <mp_obj_new_dict>
    ea74:	62f8      	str	r0, [r7, #44]	; 0x2c
    mp_obj_dict_t *dict = MP_OBJ_TO_PTR(dict_out);
    ea76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    ea78:	62bb      	str	r3, [r7, #40]	; 0x28
    dict->base.type = type;
    ea7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    ea7c:	68fa      	ldr	r2, [r7, #12]
    ea7e:	601a      	str	r2, [r3, #0]
    #if MICROPY_PY_COLLECTIONS_ORDEREDDICT
    if (type == &mp_type_ordereddict) {
        dict->map.is_ordered = 1;
    }
    #endif
    if (n_args > 0 || n_kw > 0) {
    ea80:	68bb      	ldr	r3, [r7, #8]
    ea82:	2b00      	cmp	r3, #0
    ea84:	d102      	bne.n	ea8c <dict_make_new+0x2c>
    ea86:	687b      	ldr	r3, [r7, #4]
    ea88:	2b00      	cmp	r3, #0
    ea8a:	d017      	beq.n	eabc <dict_make_new+0x5c>
        mp_obj_t args2[2] = {dict_out, args[0]}; // args[0] is always valid, even if it's not a positional arg
    ea8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    ea8e:	623b      	str	r3, [r7, #32]
    ea90:	683b      	ldr	r3, [r7, #0]
    ea92:	681b      	ldr	r3, [r3, #0]
    ea94:	627b      	str	r3, [r7, #36]	; 0x24
        mp_map_t kwargs;
        mp_map_init_fixed_table(&kwargs, n_kw, args + n_args);
    ea96:	68bb      	ldr	r3, [r7, #8]
    ea98:	009b      	lsls	r3, r3, #2
    ea9a:	683a      	ldr	r2, [r7, #0]
    ea9c:	441a      	add	r2, r3
    ea9e:	f107 0314 	add.w	r3, r7, #20
    eaa2:	6879      	ldr	r1, [r7, #4]
    eaa4:	4618      	mov	r0, r3
    eaa6:	f7fe fe26 	bl	d6f6 <mp_map_init_fixed_table>
        dict_update(n_args + 1, args2, &kwargs); // dict_update will check that n_args + 1 == 1 or 2
    eaaa:	68bb      	ldr	r3, [r7, #8]
    eaac:	3301      	adds	r3, #1
    eaae:	f107 0214 	add.w	r2, r7, #20
    eab2:	f107 0120 	add.w	r1, r7, #32
    eab6:	4618      	mov	r0, r3
    eab8:	f000 fadc 	bl	f074 <dict_update>
    }
    return dict_out;
    eabc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
    eabe:	4618      	mov	r0, r3
    eac0:	3730      	adds	r7, #48	; 0x30
    eac2:	46bd      	mov	sp, r7
    eac4:	bd80      	pop	{r7, pc}

0000eac6 <dict_unary_op>:

STATIC mp_obj_t dict_unary_op(mp_unary_op_t op, mp_obj_t self_in) {
    eac6:	b580      	push	{r7, lr}
    eac8:	b084      	sub	sp, #16
    eaca:	af00      	add	r7, sp, #0
    eacc:	6078      	str	r0, [r7, #4]
    eace:	6039      	str	r1, [r7, #0]
    mp_obj_dict_t *self = MP_OBJ_TO_PTR(self_in);
    ead0:	683b      	ldr	r3, [r7, #0]
    ead2:	60fb      	str	r3, [r7, #12]
    switch (op) {
    ead4:	687b      	ldr	r3, [r7, #4]
    ead6:	2b04      	cmp	r3, #4
    ead8:	d002      	beq.n	eae0 <dict_unary_op+0x1a>
    eada:	2b05      	cmp	r3, #5
    eadc:	d00e      	beq.n	eafc <dict_unary_op+0x36>
    eade:	e015      	b.n	eb0c <dict_unary_op+0x46>
        case MP_UNARY_OP_BOOL: return mp_obj_new_bool(self->map.used != 0);
    eae0:	68fb      	ldr	r3, [r7, #12]
    eae2:	685b      	ldr	r3, [r3, #4]
    eae4:	f023 0307 	bic.w	r3, r3, #7
    eae8:	2b00      	cmp	r3, #0
    eaea:	bf14      	ite	ne
    eaec:	2301      	movne	r3, #1
    eaee:	2300      	moveq	r3, #0
    eaf0:	b2db      	uxtb	r3, r3
    eaf2:	4618      	mov	r0, r3
    eaf4:	f7ff ff09 	bl	e90a <mp_obj_new_bool>
    eaf8:	4603      	mov	r3, r0
    eafa:	e008      	b.n	eb0e <dict_unary_op+0x48>
        case MP_UNARY_OP_LEN: return MP_OBJ_NEW_SMALL_INT(self->map.used);
    eafc:	68fb      	ldr	r3, [r7, #12]
    eafe:	685b      	ldr	r3, [r3, #4]
    eb00:	f3c3 03dc 	ubfx	r3, r3, #3, #29
    eb04:	005b      	lsls	r3, r3, #1
    eb06:	f043 0301 	orr.w	r3, r3, #1
    eb0a:	e000      	b.n	eb0e <dict_unary_op+0x48>
        case MP_UNARY_OP_SIZEOF: {
            size_t sz = sizeof(*self) + sizeof(*self->map.table) * self->map.alloc;
            return MP_OBJ_NEW_SMALL_INT(sz);
        }
        #endif
        default: return MP_OBJ_NULL; // op not supported
    eb0c:	2300      	movs	r3, #0
    }
}
    eb0e:	4618      	mov	r0, r3
    eb10:	3710      	adds	r7, #16
    eb12:	46bd      	mov	sp, r7
    eb14:	bd80      	pop	{r7, pc}

0000eb16 <dict_binary_op>:

STATIC mp_obj_t dict_binary_op(mp_binary_op_t op, mp_obj_t lhs_in, mp_obj_t rhs_in) {
    eb16:	b580      	push	{r7, lr}
    eb18:	b08a      	sub	sp, #40	; 0x28
    eb1a:	af00      	add	r7, sp, #0
    eb1c:	60f8      	str	r0, [r7, #12]
    eb1e:	60b9      	str	r1, [r7, #8]
    eb20:	607a      	str	r2, [r7, #4]
    mp_obj_dict_t *o = MP_OBJ_TO_PTR(lhs_in);
    eb22:	68bb      	ldr	r3, [r7, #8]
    eb24:	627b      	str	r3, [r7, #36]	; 0x24
    switch (op) {
    eb26:	68fb      	ldr	r3, [r7, #12]
    eb28:	2b02      	cmp	r3, #2
    eb2a:	d014      	beq.n	eb56 <dict_binary_op+0x40>
    eb2c:	2b22      	cmp	r3, #34	; 0x22
    eb2e:	d15a      	bne.n	ebe6 <dict_binary_op+0xd0>
        case MP_BINARY_OP_CONTAINS: {
            mp_map_elem_t *elem = mp_map_lookup(&o->map, rhs_in, MP_MAP_LOOKUP);
    eb30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    eb32:	3304      	adds	r3, #4
    eb34:	2200      	movs	r2, #0
    eb36:	6879      	ldr	r1, [r7, #4]
    eb38:	4618      	mov	r0, r3
    eb3a:	f7fe fea9 	bl	d890 <mp_map_lookup>
    eb3e:	6238      	str	r0, [r7, #32]
            return mp_obj_new_bool(elem != NULL);
    eb40:	6a3b      	ldr	r3, [r7, #32]
    eb42:	2b00      	cmp	r3, #0
    eb44:	bf14      	ite	ne
    eb46:	2301      	movne	r3, #1
    eb48:	2300      	moveq	r3, #0
    eb4a:	b2db      	uxtb	r3, r3
    eb4c:	4618      	mov	r0, r3
    eb4e:	f7ff fedc 	bl	e90a <mp_obj_new_bool>
    eb52:	4603      	mov	r3, r0
    eb54:	e048      	b.n	ebe8 <dict_binary_op+0xd2>
                    }
                }
                return e1 == NULL && e2 == NULL ? mp_const_true : mp_const_false;
            } else
            #endif
            if (MP_OBJ_IS_TYPE(rhs_in, &mp_type_dict)) {
    eb56:	6878      	ldr	r0, [r7, #4]
    eb58:	f7ff fea4 	bl	e8a4 <MP_OBJ_IS_OBJ>
    eb5c:	4603      	mov	r3, r0
    eb5e:	2b00      	cmp	r3, #0
    eb60:	d03f      	beq.n	ebe2 <dict_binary_op+0xcc>
    eb62:	687b      	ldr	r3, [r7, #4]
    eb64:	681b      	ldr	r3, [r3, #0]
    eb66:	4a22      	ldr	r2, [pc, #136]	; (ebf0 <dict_binary_op+0xda>)
    eb68:	4293      	cmp	r3, r2
    eb6a:	d13a      	bne.n	ebe2 <dict_binary_op+0xcc>
                mp_obj_dict_t *rhs = MP_OBJ_TO_PTR(rhs_in);
    eb6c:	687b      	ldr	r3, [r7, #4]
    eb6e:	61fb      	str	r3, [r7, #28]
                if (o->map.used != rhs->map.used) {
    eb70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    eb72:	685b      	ldr	r3, [r3, #4]
    eb74:	f3c3 02dc 	ubfx	r2, r3, #3, #29
    eb78:	69fb      	ldr	r3, [r7, #28]
    eb7a:	685b      	ldr	r3, [r3, #4]
    eb7c:	f3c3 03dc 	ubfx	r3, r3, #3, #29
    eb80:	429a      	cmp	r2, r3
    eb82:	d001      	beq.n	eb88 <dict_binary_op+0x72>
                    return mp_const_false;
    eb84:	4b1b      	ldr	r3, [pc, #108]	; (ebf4 <dict_binary_op+0xde>)
    eb86:	e02f      	b.n	ebe8 <dict_binary_op+0xd2>
                }

                size_t cur = 0;
    eb88:	2300      	movs	r3, #0
    eb8a:	613b      	str	r3, [r7, #16]
                mp_map_elem_t *next = NULL;
    eb8c:	2300      	movs	r3, #0
    eb8e:	61bb      	str	r3, [r7, #24]
                while ((next = dict_iter_next(o, &cur)) != NULL) {
    eb90:	e01b      	b.n	ebca <dict_binary_op+0xb4>
                    mp_map_elem_t *elem = mp_map_lookup(&rhs->map, next->key, MP_MAP_LOOKUP);
    eb92:	69fb      	ldr	r3, [r7, #28]
    eb94:	1d18      	adds	r0, r3, #4
    eb96:	69bb      	ldr	r3, [r7, #24]
    eb98:	681b      	ldr	r3, [r3, #0]
    eb9a:	2200      	movs	r2, #0
    eb9c:	4619      	mov	r1, r3
    eb9e:	f7fe fe77 	bl	d890 <mp_map_lookup>
    eba2:	6178      	str	r0, [r7, #20]
                    if (elem == NULL || !mp_obj_equal(next->value, elem->value)) {
    eba4:	697b      	ldr	r3, [r7, #20]
    eba6:	2b00      	cmp	r3, #0
    eba8:	d00d      	beq.n	ebc6 <dict_binary_op+0xb0>
    ebaa:	69bb      	ldr	r3, [r7, #24]
    ebac:	685a      	ldr	r2, [r3, #4]
    ebae:	697b      	ldr	r3, [r7, #20]
    ebb0:	685b      	ldr	r3, [r3, #4]
    ebb2:	4619      	mov	r1, r3
    ebb4:	4610      	mov	r0, r2
    ebb6:	f7ff f9a3 	bl	df00 <mp_obj_equal>
    ebba:	4603      	mov	r3, r0
    ebbc:	f083 0301 	eor.w	r3, r3, #1
    ebc0:	b2db      	uxtb	r3, r3
    ebc2:	2b00      	cmp	r3, #0
    ebc4:	d001      	beq.n	ebca <dict_binary_op+0xb4>
                        return mp_const_false;
    ebc6:	4b0b      	ldr	r3, [pc, #44]	; (ebf4 <dict_binary_op+0xde>)
    ebc8:	e00e      	b.n	ebe8 <dict_binary_op+0xd2>
                while ((next = dict_iter_next(o, &cur)) != NULL) {
    ebca:	f107 0310 	add.w	r3, r7, #16
    ebce:	4619      	mov	r1, r3
    ebd0:	6a78      	ldr	r0, [r7, #36]	; 0x24
    ebd2:	f7ff fecb 	bl	e96c <dict_iter_next>
    ebd6:	61b8      	str	r0, [r7, #24]
    ebd8:	69bb      	ldr	r3, [r7, #24]
    ebda:	2b00      	cmp	r3, #0
    ebdc:	d1d9      	bne.n	eb92 <dict_binary_op+0x7c>
                    }
                }
                return mp_const_true;
    ebde:	4b06      	ldr	r3, [pc, #24]	; (ebf8 <dict_binary_op+0xe2>)
    ebe0:	e002      	b.n	ebe8 <dict_binary_op+0xd2>
            } else {
                // dict is not equal to instance of any other type
                return mp_const_false;
    ebe2:	4b04      	ldr	r3, [pc, #16]	; (ebf4 <dict_binary_op+0xde>)
    ebe4:	e000      	b.n	ebe8 <dict_binary_op+0xd2>
            }
        }
        default:
            // op not supported
            return MP_OBJ_NULL;
    ebe6:	2300      	movs	r3, #0
    }
}
    ebe8:	4618      	mov	r0, r3
    ebea:	3728      	adds	r7, #40	; 0x28
    ebec:	46bd      	mov	sp, r7
    ebee:	bd80      	pop	{r7, pc}
    ebf0:	00023d0c 	.word	0x00023d0c
    ebf4:	00023860 	.word	0x00023860
    ebf8:	00023868 	.word	0x00023868

0000ebfc <mp_obj_dict_get>:

// Note: Make sure this is inlined in load part of dict_subscr() below.
mp_obj_t mp_obj_dict_get(mp_obj_t self_in, mp_obj_t index) {
    ebfc:	b580      	push	{r7, lr}
    ebfe:	b084      	sub	sp, #16
    ec00:	af00      	add	r7, sp, #0
    ec02:	6078      	str	r0, [r7, #4]
    ec04:	6039      	str	r1, [r7, #0]
    mp_obj_dict_t *self = MP_OBJ_TO_PTR(self_in);
    ec06:	687b      	ldr	r3, [r7, #4]
    ec08:	60fb      	str	r3, [r7, #12]
    mp_map_elem_t *elem = mp_map_lookup(&self->map, index, MP_MAP_LOOKUP);
    ec0a:	68fb      	ldr	r3, [r7, #12]
    ec0c:	3304      	adds	r3, #4
    ec0e:	2200      	movs	r2, #0
    ec10:	6839      	ldr	r1, [r7, #0]
    ec12:	4618      	mov	r0, r3
    ec14:	f7fe fe3c 	bl	d890 <mp_map_lookup>
    ec18:	60b8      	str	r0, [r7, #8]
    if (elem == NULL) {
    ec1a:	68bb      	ldr	r3, [r7, #8]
    ec1c:	2b00      	cmp	r3, #0
    ec1e:	d107      	bne.n	ec30 <mp_obj_dict_get+0x34>
        nlr_raise(mp_obj_new_exception_arg1(&mp_type_KeyError, index));
    ec20:	6839      	ldr	r1, [r7, #0]
    ec22:	4806      	ldr	r0, [pc, #24]	; (ec3c <mp_obj_dict_get+0x40>)
    ec24:	f000 fe68 	bl	f8f8 <mp_obj_new_exception_arg1>
    ec28:	4603      	mov	r3, r0
    ec2a:	4618      	mov	r0, r3
    ec2c:	f7f1 fb58 	bl	2e0 <nlr_jump>
    } else {
        return elem->value;
    ec30:	68bb      	ldr	r3, [r7, #8]
    ec32:	685b      	ldr	r3, [r3, #4]
    }
}
    ec34:	4618      	mov	r0, r3
    ec36:	3710      	adds	r7, #16
    ec38:	46bd      	mov	sp, r7
    ec3a:	bd80      	pop	{r7, pc}
    ec3c:	00024194 	.word	0x00024194

0000ec40 <dict_subscr>:

STATIC mp_obj_t dict_subscr(mp_obj_t self_in, mp_obj_t index, mp_obj_t value) {
    ec40:	b580      	push	{r7, lr}
    ec42:	b086      	sub	sp, #24
    ec44:	af00      	add	r7, sp, #0
    ec46:	60f8      	str	r0, [r7, #12]
    ec48:	60b9      	str	r1, [r7, #8]
    ec4a:	607a      	str	r2, [r7, #4]
    if (value == MP_OBJ_NULL) {
    ec4c:	687b      	ldr	r3, [r7, #4]
    ec4e:	2b00      	cmp	r3, #0
    ec50:	d105      	bne.n	ec5e <dict_subscr+0x1e>
        // delete
        mp_obj_dict_delete(self_in, index);
    ec52:	68b9      	ldr	r1, [r7, #8]
    ec54:	68f8      	ldr	r0, [r7, #12]
    ec56:	f000 fcf7 	bl	f648 <mp_obj_dict_delete>
        return mp_const_none;
    ec5a:	4b13      	ldr	r3, [pc, #76]	; (eca8 <dict_subscr+0x68>)
    ec5c:	e020      	b.n	eca0 <dict_subscr+0x60>
    } else if (value == MP_OBJ_SENTINEL) {
    ec5e:	687b      	ldr	r3, [r7, #4]
    ec60:	2b08      	cmp	r3, #8
    ec62:	d117      	bne.n	ec94 <dict_subscr+0x54>
        // load
        mp_obj_dict_t *self = MP_OBJ_TO_PTR(self_in);
    ec64:	68fb      	ldr	r3, [r7, #12]
    ec66:	617b      	str	r3, [r7, #20]
        mp_map_elem_t *elem = mp_map_lookup(&self->map, index, MP_MAP_LOOKUP);
    ec68:	697b      	ldr	r3, [r7, #20]
    ec6a:	3304      	adds	r3, #4
    ec6c:	2200      	movs	r2, #0
    ec6e:	68b9      	ldr	r1, [r7, #8]
    ec70:	4618      	mov	r0, r3
    ec72:	f7fe fe0d 	bl	d890 <mp_map_lookup>
    ec76:	6138      	str	r0, [r7, #16]
        if (elem == NULL) {
    ec78:	693b      	ldr	r3, [r7, #16]
    ec7a:	2b00      	cmp	r3, #0
    ec7c:	d107      	bne.n	ec8e <dict_subscr+0x4e>
            nlr_raise(mp_obj_new_exception_arg1(&mp_type_KeyError, index));
    ec7e:	68b9      	ldr	r1, [r7, #8]
    ec80:	480a      	ldr	r0, [pc, #40]	; (ecac <dict_subscr+0x6c>)
    ec82:	f000 fe39 	bl	f8f8 <mp_obj_new_exception_arg1>
    ec86:	4603      	mov	r3, r0
    ec88:	4618      	mov	r0, r3
    ec8a:	f7f1 fb29 	bl	2e0 <nlr_jump>
        } else {
            return elem->value;
    ec8e:	693b      	ldr	r3, [r7, #16]
    ec90:	685b      	ldr	r3, [r3, #4]
    ec92:	e005      	b.n	eca0 <dict_subscr+0x60>
        }
    } else {
        // store
        mp_obj_dict_store(self_in, index, value);
    ec94:	687a      	ldr	r2, [r7, #4]
    ec96:	68b9      	ldr	r1, [r7, #8]
    ec98:	68f8      	ldr	r0, [r7, #12]
    ec9a:	f000 fca0 	bl	f5de <mp_obj_dict_store>
        return mp_const_none;
    ec9e:	4b02      	ldr	r3, [pc, #8]	; (eca8 <dict_subscr+0x68>)
    }
}
    eca0:	4618      	mov	r0, r3
    eca2:	3718      	adds	r7, #24
    eca4:	46bd      	mov	sp, r7
    eca6:	bd80      	pop	{r7, pc}
    eca8:	0002511c 	.word	0x0002511c
    ecac:	00024194 	.word	0x00024194

0000ecb0 <mp_ensure_not_fixed>:

/******************************************************************************/
/* dict methods                                                               */

STATIC void mp_ensure_not_fixed(const mp_obj_dict_t *dict) {
    ecb0:	b580      	push	{r7, lr}
    ecb2:	b082      	sub	sp, #8
    ecb4:	af00      	add	r7, sp, #0
    ecb6:	6078      	str	r0, [r7, #4]
    if (dict->map.is_fixed) {
    ecb8:	687b      	ldr	r3, [r7, #4]
    ecba:	791b      	ldrb	r3, [r3, #4]
    ecbc:	f003 0302 	and.w	r3, r3, #2
    ecc0:	b2db      	uxtb	r3, r3
    ecc2:	2b00      	cmp	r3, #0
    ecc4:	d002      	beq.n	eccc <mp_ensure_not_fixed+0x1c>
        mp_raise_TypeError(NULL);
    ecc6:	2000      	movs	r0, #0
    ecc8:	f7fe fb60 	bl	d38c <mp_raise_TypeError>
    }
}
    eccc:	bf00      	nop
    ecce:	3708      	adds	r7, #8
    ecd0:	46bd      	mov	sp, r7
    ecd2:	bd80      	pop	{r7, pc}

0000ecd4 <dict_clear>:

STATIC mp_obj_t dict_clear(mp_obj_t self_in) {
    ecd4:	b580      	push	{r7, lr}
    ecd6:	b084      	sub	sp, #16
    ecd8:	af00      	add	r7, sp, #0
    ecda:	6078      	str	r0, [r7, #4]
    mp_check_self(MP_OBJ_IS_DICT_TYPE(self_in));
    ecdc:	6878      	ldr	r0, [r7, #4]
    ecde:	f7ff fde1 	bl	e8a4 <MP_OBJ_IS_OBJ>
    ece2:	4603      	mov	r3, r0
    ece4:	2b00      	cmp	r3, #0
    ece6:	d005      	beq.n	ecf4 <dict_clear+0x20>
    ece8:	687b      	ldr	r3, [r7, #4]
    ecea:	681b      	ldr	r3, [r3, #0]
    ecec:	68db      	ldr	r3, [r3, #12]
    ecee:	4a0c      	ldr	r2, [pc, #48]	; (ed20 <dict_clear+0x4c>)
    ecf0:	4293      	cmp	r3, r2
    ecf2:	d005      	beq.n	ed00 <dict_clear+0x2c>
    ecf4:	4b0b      	ldr	r3, [pc, #44]	; (ed24 <dict_clear+0x50>)
    ecf6:	4a0c      	ldr	r2, [pc, #48]	; (ed28 <dict_clear+0x54>)
    ecf8:	21cd      	movs	r1, #205	; 0xcd
    ecfa:	480c      	ldr	r0, [pc, #48]	; (ed2c <dict_clear+0x58>)
    ecfc:	f00e f8f0 	bl	1cee0 <__assert_func>
    mp_obj_dict_t *self = MP_OBJ_TO_PTR(self_in);
    ed00:	687b      	ldr	r3, [r7, #4]
    ed02:	60fb      	str	r3, [r7, #12]
    mp_ensure_not_fixed(self);
    ed04:	68f8      	ldr	r0, [r7, #12]
    ed06:	f7ff ffd3 	bl	ecb0 <mp_ensure_not_fixed>

    mp_map_clear(&self->map);
    ed0a:	68fb      	ldr	r3, [r7, #12]
    ed0c:	3304      	adds	r3, #4
    ed0e:	4618      	mov	r0, r3
    ed10:	f7fe fd36 	bl	d780 <mp_map_clear>

    return mp_const_none;
    ed14:	4b06      	ldr	r3, [pc, #24]	; (ed30 <dict_clear+0x5c>)
}
    ed16:	4618      	mov	r0, r3
    ed18:	3710      	adds	r7, #16
    ed1a:	46bd      	mov	sp, r7
    ed1c:	bd80      	pop	{r7, pc}
    ed1e:	bf00      	nop
    ed20:	0000ea61 	.word	0x0000ea61
    ed24:	00023934 	.word	0x00023934
    ed28:	00023d48 	.word	0x00023d48
    ed2c:	00023994 	.word	0x00023994
    ed30:	0002511c 	.word	0x0002511c

0000ed34 <dict_copy>:
STATIC MP_DEFINE_CONST_FUN_OBJ_1(dict_clear_obj, dict_clear);

STATIC mp_obj_t dict_copy(mp_obj_t self_in) {
    ed34:	b580      	push	{r7, lr}
    ed36:	b086      	sub	sp, #24
    ed38:	af00      	add	r7, sp, #0
    ed3a:	6078      	str	r0, [r7, #4]
    mp_check_self(MP_OBJ_IS_DICT_TYPE(self_in));
    ed3c:	6878      	ldr	r0, [r7, #4]
    ed3e:	f7ff fdb1 	bl	e8a4 <MP_OBJ_IS_OBJ>
    ed42:	4603      	mov	r3, r0
    ed44:	2b00      	cmp	r3, #0
    ed46:	d005      	beq.n	ed54 <dict_copy+0x20>
    ed48:	687b      	ldr	r3, [r7, #4]
    ed4a:	681b      	ldr	r3, [r3, #0]
    ed4c:	68db      	ldr	r3, [r3, #12]
    ed4e:	4a24      	ldr	r2, [pc, #144]	; (ede0 <dict_copy+0xac>)
    ed50:	4293      	cmp	r3, r2
    ed52:	d005      	beq.n	ed60 <dict_copy+0x2c>
    ed54:	4b23      	ldr	r3, [pc, #140]	; (ede4 <dict_copy+0xb0>)
    ed56:	4a24      	ldr	r2, [pc, #144]	; (ede8 <dict_copy+0xb4>)
    ed58:	21d8      	movs	r1, #216	; 0xd8
    ed5a:	4824      	ldr	r0, [pc, #144]	; (edec <dict_copy+0xb8>)
    ed5c:	f00e f8c0 	bl	1cee0 <__assert_func>
    mp_obj_dict_t *self = MP_OBJ_TO_PTR(self_in);
    ed60:	687b      	ldr	r3, [r7, #4]
    ed62:	617b      	str	r3, [r7, #20]
    mp_obj_t other_out = mp_obj_new_dict(self->map.alloc);
    ed64:	697b      	ldr	r3, [r7, #20]
    ed66:	689b      	ldr	r3, [r3, #8]
    ed68:	4618      	mov	r0, r3
    ed6a:	f000 fc17 	bl	f59c <mp_obj_new_dict>
    ed6e:	6138      	str	r0, [r7, #16]
    mp_obj_dict_t *other = MP_OBJ_TO_PTR(other_out);
    ed70:	693b      	ldr	r3, [r7, #16]
    ed72:	60fb      	str	r3, [r7, #12]
    other->base.type = self->base.type;
    ed74:	697b      	ldr	r3, [r7, #20]
    ed76:	681a      	ldr	r2, [r3, #0]
    ed78:	68fb      	ldr	r3, [r7, #12]
    ed7a:	601a      	str	r2, [r3, #0]
    other->map.used = self->map.used;
    ed7c:	697b      	ldr	r3, [r7, #20]
    ed7e:	685b      	ldr	r3, [r3, #4]
    ed80:	f3c3 01dc 	ubfx	r1, r3, #3, #29
    ed84:	68fa      	ldr	r2, [r7, #12]
    ed86:	6853      	ldr	r3, [r2, #4]
    ed88:	f361 03df 	bfi	r3, r1, #3, #29
    ed8c:	6053      	str	r3, [r2, #4]
    other->map.all_keys_are_qstrs = self->map.all_keys_are_qstrs;
    ed8e:	697b      	ldr	r3, [r7, #20]
    ed90:	791b      	ldrb	r3, [r3, #4]
    ed92:	f3c3 0300 	ubfx	r3, r3, #0, #1
    ed96:	b2d9      	uxtb	r1, r3
    ed98:	68fa      	ldr	r2, [r7, #12]
    ed9a:	7913      	ldrb	r3, [r2, #4]
    ed9c:	f361 0300 	bfi	r3, r1, #0, #1
    eda0:	7113      	strb	r3, [r2, #4]
    other->map.is_fixed = 0;
    eda2:	68fa      	ldr	r2, [r7, #12]
    eda4:	7913      	ldrb	r3, [r2, #4]
    eda6:	f36f 0341 	bfc	r3, #1, #1
    edaa:	7113      	strb	r3, [r2, #4]
    other->map.is_ordered = self->map.is_ordered;
    edac:	697b      	ldr	r3, [r7, #20]
    edae:	791b      	ldrb	r3, [r3, #4]
    edb0:	f3c3 0380 	ubfx	r3, r3, #2, #1
    edb4:	b2d9      	uxtb	r1, r3
    edb6:	68fa      	ldr	r2, [r7, #12]
    edb8:	7913      	ldrb	r3, [r2, #4]
    edba:	f361 0382 	bfi	r3, r1, #2, #1
    edbe:	7113      	strb	r3, [r2, #4]
    memcpy(other->map.table, self->map.table, self->map.alloc * sizeof(mp_map_elem_t));
    edc0:	68fb      	ldr	r3, [r7, #12]
    edc2:	68d8      	ldr	r0, [r3, #12]
    edc4:	697b      	ldr	r3, [r7, #20]
    edc6:	68d9      	ldr	r1, [r3, #12]
    edc8:	697b      	ldr	r3, [r7, #20]
    edca:	689b      	ldr	r3, [r3, #8]
    edcc:	00db      	lsls	r3, r3, #3
    edce:	461a      	mov	r2, r3
    edd0:	f00f fbae 	bl	1e530 <memcpy>
    return other_out;
    edd4:	693b      	ldr	r3, [r7, #16]
}
    edd6:	4618      	mov	r0, r3
    edd8:	3718      	adds	r7, #24
    edda:	46bd      	mov	sp, r7
    eddc:	bd80      	pop	{r7, pc}
    edde:	bf00      	nop
    ede0:	0000ea61 	.word	0x0000ea61
    ede4:	00023934 	.word	0x00023934
    ede8:	00023d54 	.word	0x00023d54
    edec:	00023994 	.word	0x00023994

0000edf0 <dict_fromkeys>:
STATIC MP_DEFINE_CONST_FUN_OBJ_1(dict_copy_obj, dict_copy);

// this is a classmethod
STATIC mp_obj_t dict_fromkeys(size_t n_args, const mp_obj_t *args) {
    edf0:	b580      	push	{r7, lr}
    edf2:	b088      	sub	sp, #32
    edf4:	af00      	add	r7, sp, #0
    edf6:	6078      	str	r0, [r7, #4]
    edf8:	6039      	str	r1, [r7, #0]
    mp_obj_t iter = mp_getiter(args[1], NULL);
    edfa:	683b      	ldr	r3, [r7, #0]
    edfc:	3304      	adds	r3, #4
    edfe:	681b      	ldr	r3, [r3, #0]
    ee00:	2100      	movs	r1, #0
    ee02:	4618      	mov	r0, r3
    ee04:	f7fd ff60 	bl	ccc8 <mp_getiter>
    ee08:	6178      	str	r0, [r7, #20]
    mp_obj_t value = mp_const_none;
    ee0a:	4b1c      	ldr	r3, [pc, #112]	; (ee7c <dict_fromkeys+0x8c>)
    ee0c:	61fb      	str	r3, [r7, #28]
    mp_obj_t next = MP_OBJ_NULL;
    ee0e:	2300      	movs	r3, #0
    ee10:	613b      	str	r3, [r7, #16]

    if (n_args > 2) {
    ee12:	687b      	ldr	r3, [r7, #4]
    ee14:	2b02      	cmp	r3, #2
    ee16:	d902      	bls.n	ee1e <dict_fromkeys+0x2e>
        value = args[2];
    ee18:	683b      	ldr	r3, [r7, #0]
    ee1a:	689b      	ldr	r3, [r3, #8]
    ee1c:	61fb      	str	r3, [r7, #28]
    }

    // optimisation to allocate result based on len of argument
    mp_obj_t self_out;
    mp_obj_t len = mp_obj_len_maybe(args[1]);
    ee1e:	683b      	ldr	r3, [r7, #0]
    ee20:	3304      	adds	r3, #4
    ee22:	681b      	ldr	r3, [r3, #0]
    ee24:	4618      	mov	r0, r3
    ee26:	f7ff fa6f 	bl	e308 <mp_obj_len_maybe>
    ee2a:	60f8      	str	r0, [r7, #12]
    if (len == MP_OBJ_NULL) {
    ee2c:	68fb      	ldr	r3, [r7, #12]
    ee2e:	2b00      	cmp	r3, #0
    ee30:	d104      	bne.n	ee3c <dict_fromkeys+0x4c>
        /* object's type doesn't have a __len__ slot */
        self_out = mp_obj_new_dict(0);
    ee32:	2000      	movs	r0, #0
    ee34:	f000 fbb2 	bl	f59c <mp_obj_new_dict>
    ee38:	61b8      	str	r0, [r7, #24]
    ee3a:	e005      	b.n	ee48 <dict_fromkeys+0x58>
    } else {
        self_out = mp_obj_new_dict(MP_OBJ_SMALL_INT_VALUE(len));
    ee3c:	68fb      	ldr	r3, [r7, #12]
    ee3e:	105b      	asrs	r3, r3, #1
    ee40:	4618      	mov	r0, r3
    ee42:	f000 fbab 	bl	f59c <mp_obj_new_dict>
    ee46:	61b8      	str	r0, [r7, #24]
    }

    mp_obj_dict_t *self = MP_OBJ_TO_PTR(self_out);
    ee48:	69bb      	ldr	r3, [r7, #24]
    ee4a:	60bb      	str	r3, [r7, #8]
    while ((next = mp_iternext(iter)) != MP_OBJ_STOP_ITERATION) {
    ee4c:	e009      	b.n	ee62 <dict_fromkeys+0x72>
        mp_map_lookup(&self->map, next, MP_MAP_LOOKUP_ADD_IF_NOT_FOUND)->value = value;
    ee4e:	68bb      	ldr	r3, [r7, #8]
    ee50:	3304      	adds	r3, #4
    ee52:	2201      	movs	r2, #1
    ee54:	6939      	ldr	r1, [r7, #16]
    ee56:	4618      	mov	r0, r3
    ee58:	f7fe fd1a 	bl	d890 <mp_map_lookup>
    ee5c:	4602      	mov	r2, r0
    ee5e:	69fb      	ldr	r3, [r7, #28]
    ee60:	6053      	str	r3, [r2, #4]
    while ((next = mp_iternext(iter)) != MP_OBJ_STOP_ITERATION) {
    ee62:	6978      	ldr	r0, [r7, #20]
    ee64:	f7fd ffb2 	bl	cdcc <mp_iternext>
    ee68:	6138      	str	r0, [r7, #16]
    ee6a:	693b      	ldr	r3, [r7, #16]
    ee6c:	2b04      	cmp	r3, #4
    ee6e:	d1ee      	bne.n	ee4e <dict_fromkeys+0x5e>
    }

    return self_out;
    ee70:	69bb      	ldr	r3, [r7, #24]
}
    ee72:	4618      	mov	r0, r3
    ee74:	3720      	adds	r7, #32
    ee76:	46bd      	mov	sp, r7
    ee78:	bd80      	pop	{r7, pc}
    ee7a:	bf00      	nop
    ee7c:	0002511c 	.word	0x0002511c

0000ee80 <dict_get_helper>:
STATIC MP_DEFINE_CONST_FUN_OBJ_VAR_BETWEEN(dict_fromkeys_fun_obj, 2, 3, dict_fromkeys);
STATIC MP_DEFINE_CONST_CLASSMETHOD_OBJ(dict_fromkeys_obj, MP_ROM_PTR(&dict_fromkeys_fun_obj));

STATIC mp_obj_t dict_get_helper(size_t n_args, const mp_obj_t *args, mp_map_lookup_kind_t lookup_kind) {
    ee80:	b580      	push	{r7, lr}
    ee82:	b088      	sub	sp, #32
    ee84:	af00      	add	r7, sp, #0
    ee86:	60f8      	str	r0, [r7, #12]
    ee88:	60b9      	str	r1, [r7, #8]
    ee8a:	607a      	str	r2, [r7, #4]
    mp_check_self(MP_OBJ_IS_DICT_TYPE(args[0]));
    ee8c:	68bb      	ldr	r3, [r7, #8]
    ee8e:	681b      	ldr	r3, [r3, #0]
    ee90:	4618      	mov	r0, r3
    ee92:	f7ff fd07 	bl	e8a4 <MP_OBJ_IS_OBJ>
    ee96:	4603      	mov	r3, r0
    ee98:	2b00      	cmp	r3, #0
    ee9a:	d006      	beq.n	eeaa <dict_get_helper+0x2a>
    ee9c:	68bb      	ldr	r3, [r7, #8]
    ee9e:	681b      	ldr	r3, [r3, #0]
    eea0:	681b      	ldr	r3, [r3, #0]
    eea2:	68db      	ldr	r3, [r3, #12]
    eea4:	4a27      	ldr	r2, [pc, #156]	; (ef44 <dict_get_helper+0xc4>)
    eea6:	4293      	cmp	r3, r2
    eea8:	d006      	beq.n	eeb8 <dict_get_helper+0x38>
    eeaa:	4b27      	ldr	r3, [pc, #156]	; (ef48 <dict_get_helper+0xc8>)
    eeac:	4a27      	ldr	r2, [pc, #156]	; (ef4c <dict_get_helper+0xcc>)
    eeae:	f240 1105 	movw	r1, #261	; 0x105
    eeb2:	4827      	ldr	r0, [pc, #156]	; (ef50 <dict_get_helper+0xd0>)
    eeb4:	f00e f814 	bl	1cee0 <__assert_func>
    mp_obj_dict_t *self = MP_OBJ_TO_PTR(args[0]);
    eeb8:	68bb      	ldr	r3, [r7, #8]
    eeba:	681b      	ldr	r3, [r3, #0]
    eebc:	61bb      	str	r3, [r7, #24]
    if (lookup_kind != MP_MAP_LOOKUP) {
    eebe:	687b      	ldr	r3, [r7, #4]
    eec0:	2b00      	cmp	r3, #0
    eec2:	d002      	beq.n	eeca <dict_get_helper+0x4a>
        mp_ensure_not_fixed(self);
    eec4:	69b8      	ldr	r0, [r7, #24]
    eec6:	f7ff fef3 	bl	ecb0 <mp_ensure_not_fixed>
    }
    mp_map_elem_t *elem = mp_map_lookup(&self->map, args[1], lookup_kind);
    eeca:	69bb      	ldr	r3, [r7, #24]
    eecc:	1d18      	adds	r0, r3, #4
    eece:	68bb      	ldr	r3, [r7, #8]
    eed0:	3304      	adds	r3, #4
    eed2:	681b      	ldr	r3, [r3, #0]
    eed4:	687a      	ldr	r2, [r7, #4]
    eed6:	4619      	mov	r1, r3
    eed8:	f7fe fcda 	bl	d890 <mp_map_lookup>
    eedc:	6178      	str	r0, [r7, #20]
    mp_obj_t value;
    if (elem == NULL || elem->value == MP_OBJ_NULL) {
    eede:	697b      	ldr	r3, [r7, #20]
    eee0:	2b00      	cmp	r3, #0
    eee2:	d003      	beq.n	eeec <dict_get_helper+0x6c>
    eee4:	697b      	ldr	r3, [r7, #20]
    eee6:	685b      	ldr	r3, [r3, #4]
    eee8:	2b00      	cmp	r3, #0
    eeea:	d11d      	bne.n	ef28 <dict_get_helper+0xa8>
        if (n_args == 2) {
    eeec:	68fb      	ldr	r3, [r7, #12]
    eeee:	2b02      	cmp	r3, #2
    eef0:	d110      	bne.n	ef14 <dict_get_helper+0x94>
            if (lookup_kind == MP_MAP_LOOKUP_REMOVE_IF_FOUND) {
    eef2:	687b      	ldr	r3, [r7, #4]
    eef4:	2b02      	cmp	r3, #2
    eef6:	d10a      	bne.n	ef0e <dict_get_helper+0x8e>
                nlr_raise(mp_obj_new_exception_arg1(&mp_type_KeyError, args[1]));
    eef8:	68bb      	ldr	r3, [r7, #8]
    eefa:	3304      	adds	r3, #4
    eefc:	681b      	ldr	r3, [r3, #0]
    eefe:	4619      	mov	r1, r3
    ef00:	4814      	ldr	r0, [pc, #80]	; (ef54 <dict_get_helper+0xd4>)
    ef02:	f000 fcf9 	bl	f8f8 <mp_obj_new_exception_arg1>
    ef06:	4603      	mov	r3, r0
    ef08:	4618      	mov	r0, r3
    ef0a:	f7f1 f9e9 	bl	2e0 <nlr_jump>
            } else {
                value = mp_const_none;
    ef0e:	4b12      	ldr	r3, [pc, #72]	; (ef58 <dict_get_helper+0xd8>)
    ef10:	61fb      	str	r3, [r7, #28]
    ef12:	e002      	b.n	ef1a <dict_get_helper+0x9a>
            }
        } else {
            value = args[2];
    ef14:	68bb      	ldr	r3, [r7, #8]
    ef16:	689b      	ldr	r3, [r3, #8]
    ef18:	61fb      	str	r3, [r7, #28]
        }
        if (lookup_kind == MP_MAP_LOOKUP_ADD_IF_NOT_FOUND) {
    ef1a:	687b      	ldr	r3, [r7, #4]
    ef1c:	2b01      	cmp	r3, #1
    ef1e:	d10c      	bne.n	ef3a <dict_get_helper+0xba>
            elem->value = value;
    ef20:	697b      	ldr	r3, [r7, #20]
    ef22:	69fa      	ldr	r2, [r7, #28]
    ef24:	605a      	str	r2, [r3, #4]
        if (lookup_kind == MP_MAP_LOOKUP_ADD_IF_NOT_FOUND) {
    ef26:	e008      	b.n	ef3a <dict_get_helper+0xba>
        }
    } else {
        value = elem->value;
    ef28:	697b      	ldr	r3, [r7, #20]
    ef2a:	685b      	ldr	r3, [r3, #4]
    ef2c:	61fb      	str	r3, [r7, #28]
        if (lookup_kind == MP_MAP_LOOKUP_REMOVE_IF_FOUND) {
    ef2e:	687b      	ldr	r3, [r7, #4]
    ef30:	2b02      	cmp	r3, #2
    ef32:	d102      	bne.n	ef3a <dict_get_helper+0xba>
            elem->value = MP_OBJ_NULL; // so that GC can collect the deleted value
    ef34:	697b      	ldr	r3, [r7, #20]
    ef36:	2200      	movs	r2, #0
    ef38:	605a      	str	r2, [r3, #4]
        }
    }
    return value;
    ef3a:	69fb      	ldr	r3, [r7, #28]
}
    ef3c:	4618      	mov	r0, r3
    ef3e:	3720      	adds	r7, #32
    ef40:	46bd      	mov	sp, r7
    ef42:	bd80      	pop	{r7, pc}
    ef44:	0000ea61 	.word	0x0000ea61
    ef48:	000239cc 	.word	0x000239cc
    ef4c:	00023d60 	.word	0x00023d60
    ef50:	00023994 	.word	0x00023994
    ef54:	00024194 	.word	0x00024194
    ef58:	0002511c 	.word	0x0002511c

0000ef5c <dict_get>:

STATIC mp_obj_t dict_get(size_t n_args, const mp_obj_t *args) {
    ef5c:	b580      	push	{r7, lr}
    ef5e:	b082      	sub	sp, #8
    ef60:	af00      	add	r7, sp, #0
    ef62:	6078      	str	r0, [r7, #4]
    ef64:	6039      	str	r1, [r7, #0]
    return dict_get_helper(n_args, args, MP_MAP_LOOKUP);
    ef66:	2200      	movs	r2, #0
    ef68:	6839      	ldr	r1, [r7, #0]
    ef6a:	6878      	ldr	r0, [r7, #4]
    ef6c:	f7ff ff88 	bl	ee80 <dict_get_helper>
    ef70:	4603      	mov	r3, r0
}
    ef72:	4618      	mov	r0, r3
    ef74:	3708      	adds	r7, #8
    ef76:	46bd      	mov	sp, r7
    ef78:	bd80      	pop	{r7, pc}

0000ef7a <dict_pop>:
STATIC MP_DEFINE_CONST_FUN_OBJ_VAR_BETWEEN(dict_get_obj, 2, 3, dict_get);

STATIC mp_obj_t dict_pop(size_t n_args, const mp_obj_t *args) {
    ef7a:	b580      	push	{r7, lr}
    ef7c:	b082      	sub	sp, #8
    ef7e:	af00      	add	r7, sp, #0
    ef80:	6078      	str	r0, [r7, #4]
    ef82:	6039      	str	r1, [r7, #0]
    return dict_get_helper(n_args, args, MP_MAP_LOOKUP_REMOVE_IF_FOUND);
    ef84:	2202      	movs	r2, #2
    ef86:	6839      	ldr	r1, [r7, #0]
    ef88:	6878      	ldr	r0, [r7, #4]
    ef8a:	f7ff ff79 	bl	ee80 <dict_get_helper>
    ef8e:	4603      	mov	r3, r0
}
    ef90:	4618      	mov	r0, r3
    ef92:	3708      	adds	r7, #8
    ef94:	46bd      	mov	sp, r7
    ef96:	bd80      	pop	{r7, pc}

0000ef98 <dict_setdefault>:
STATIC MP_DEFINE_CONST_FUN_OBJ_VAR_BETWEEN(dict_pop_obj, 2, 3, dict_pop);

STATIC mp_obj_t dict_setdefault(size_t n_args, const mp_obj_t *args) {
    ef98:	b580      	push	{r7, lr}
    ef9a:	b082      	sub	sp, #8
    ef9c:	af00      	add	r7, sp, #0
    ef9e:	6078      	str	r0, [r7, #4]
    efa0:	6039      	str	r1, [r7, #0]
    return dict_get_helper(n_args, args, MP_MAP_LOOKUP_ADD_IF_NOT_FOUND);
    efa2:	2201      	movs	r2, #1
    efa4:	6839      	ldr	r1, [r7, #0]
    efa6:	6878      	ldr	r0, [r7, #4]
    efa8:	f7ff ff6a 	bl	ee80 <dict_get_helper>
    efac:	4603      	mov	r3, r0
}
    efae:	4618      	mov	r0, r3
    efb0:	3708      	adds	r7, #8
    efb2:	46bd      	mov	sp, r7
    efb4:	bd80      	pop	{r7, pc}

0000efb6 <dict_popitem>:
STATIC MP_DEFINE_CONST_FUN_OBJ_VAR_BETWEEN(dict_setdefault_obj, 2, 3, dict_setdefault);

STATIC mp_obj_t dict_popitem(mp_obj_t self_in) {
    efb6:	b580      	push	{r7, lr}
    efb8:	b088      	sub	sp, #32
    efba:	af00      	add	r7, sp, #0
    efbc:	6078      	str	r0, [r7, #4]
    mp_check_self(MP_OBJ_IS_DICT_TYPE(self_in));
    efbe:	6878      	ldr	r0, [r7, #4]
    efc0:	f7ff fc70 	bl	e8a4 <MP_OBJ_IS_OBJ>
    efc4:	4603      	mov	r3, r0
    efc6:	2b00      	cmp	r3, #0
    efc8:	d005      	beq.n	efd6 <dict_popitem+0x20>
    efca:	687b      	ldr	r3, [r7, #4]
    efcc:	681b      	ldr	r3, [r3, #0]
    efce:	68db      	ldr	r3, [r3, #12]
    efd0:	4a22      	ldr	r2, [pc, #136]	; (f05c <dict_popitem+0xa6>)
    efd2:	4293      	cmp	r3, r2
    efd4:	d006      	beq.n	efe4 <dict_popitem+0x2e>
    efd6:	4b22      	ldr	r3, [pc, #136]	; (f060 <dict_popitem+0xaa>)
    efd8:	4a22      	ldr	r2, [pc, #136]	; (f064 <dict_popitem+0xae>)
    efda:	f44f 7199 	mov.w	r1, #306	; 0x132
    efde:	4822      	ldr	r0, [pc, #136]	; (f068 <dict_popitem+0xb2>)
    efe0:	f00d ff7e 	bl	1cee0 <__assert_func>
    mp_obj_dict_t *self = MP_OBJ_TO_PTR(self_in);
    efe4:	687b      	ldr	r3, [r7, #4]
    efe6:	61fb      	str	r3, [r7, #28]
    mp_ensure_not_fixed(self);
    efe8:	69f8      	ldr	r0, [r7, #28]
    efea:	f7ff fe61 	bl	ecb0 <mp_ensure_not_fixed>
    size_t cur = 0;
    efee:	2300      	movs	r3, #0
    eff0:	613b      	str	r3, [r7, #16]
    mp_map_elem_t *next = dict_iter_next(self, &cur);
    eff2:	f107 0310 	add.w	r3, r7, #16
    eff6:	4619      	mov	r1, r3
    eff8:	69f8      	ldr	r0, [r7, #28]
    effa:	f7ff fcb7 	bl	e96c <dict_iter_next>
    effe:	61b8      	str	r0, [r7, #24]
    if (next == NULL) {
    f000:	69bb      	ldr	r3, [r7, #24]
    f002:	2b00      	cmp	r3, #0
    f004:	d103      	bne.n	f00e <dict_popitem+0x58>
        mp_raise_msg(&mp_type_KeyError, "popitem(): dictionary is empty");
    f006:	4919      	ldr	r1, [pc, #100]	; (f06c <dict_popitem+0xb6>)
    f008:	4819      	ldr	r0, [pc, #100]	; (f070 <dict_popitem+0xba>)
    f00a:	f7fe f99d 	bl	d348 <mp_raise_msg>
    }
    self->map.used--;
    f00e:	69fb      	ldr	r3, [r7, #28]
    f010:	685b      	ldr	r3, [r3, #4]
    f012:	f3c3 03dc 	ubfx	r3, r3, #3, #29
    f016:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
    f01a:	3b01      	subs	r3, #1
    f01c:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
    f020:	69f9      	ldr	r1, [r7, #28]
    f022:	684a      	ldr	r2, [r1, #4]
    f024:	f363 02df 	bfi	r2, r3, #3, #29
    f028:	604a      	str	r2, [r1, #4]
    mp_obj_t items[] = {next->key, next->value};
    f02a:	69bb      	ldr	r3, [r7, #24]
    f02c:	681b      	ldr	r3, [r3, #0]
    f02e:	60bb      	str	r3, [r7, #8]
    f030:	69bb      	ldr	r3, [r7, #24]
    f032:	685b      	ldr	r3, [r3, #4]
    f034:	60fb      	str	r3, [r7, #12]
    next->key = MP_OBJ_SENTINEL; // must mark key as sentinel to indicate that it was deleted
    f036:	69bb      	ldr	r3, [r7, #24]
    f038:	2208      	movs	r2, #8
    f03a:	601a      	str	r2, [r3, #0]
    next->value = MP_OBJ_NULL;
    f03c:	69bb      	ldr	r3, [r7, #24]
    f03e:	2200      	movs	r2, #0
    f040:	605a      	str	r2, [r3, #4]
    mp_obj_t tuple = mp_obj_new_tuple(2, items);
    f042:	f107 0308 	add.w	r3, r7, #8
    f046:	4619      	mov	r1, r3
    f048:	2002      	movs	r0, #2
    f04a:	f007 f8ff 	bl	1624c <mp_obj_new_tuple>
    f04e:	6178      	str	r0, [r7, #20]

    return tuple;
    f050:	697b      	ldr	r3, [r7, #20]
}
    f052:	4618      	mov	r0, r3
    f054:	3720      	adds	r7, #32
    f056:	46bd      	mov	sp, r7
    f058:	bd80      	pop	{r7, pc}
    f05a:	bf00      	nop
    f05c:	0000ea61 	.word	0x0000ea61
    f060:	00023934 	.word	0x00023934
    f064:	00023d70 	.word	0x00023d70
    f068:	00023994 	.word	0x00023994
    f06c:	00023a50 	.word	0x00023a50
    f070:	00024194 	.word	0x00024194

0000f074 <dict_update>:
STATIC MP_DEFINE_CONST_FUN_OBJ_1(dict_popitem_obj, dict_popitem);

STATIC mp_obj_t dict_update(size_t n_args, const mp_obj_t *args, mp_map_t *kwargs) {
    f074:	b580      	push	{r7, lr}
    f076:	b090      	sub	sp, #64	; 0x40
    f078:	af02      	add	r7, sp, #8
    f07a:	60f8      	str	r0, [r7, #12]
    f07c:	60b9      	str	r1, [r7, #8]
    f07e:	607a      	str	r2, [r7, #4]
    mp_check_self(MP_OBJ_IS_DICT_TYPE(args[0]));
    f080:	68bb      	ldr	r3, [r7, #8]
    f082:	681b      	ldr	r3, [r3, #0]
    f084:	4618      	mov	r0, r3
    f086:	f7ff fc0d 	bl	e8a4 <MP_OBJ_IS_OBJ>
    f08a:	4603      	mov	r3, r0
    f08c:	2b00      	cmp	r3, #0
    f08e:	d006      	beq.n	f09e <dict_update+0x2a>
    f090:	68bb      	ldr	r3, [r7, #8]
    f092:	681b      	ldr	r3, [r3, #0]
    f094:	681b      	ldr	r3, [r3, #0]
    f096:	68db      	ldr	r3, [r3, #12]
    f098:	4a5c      	ldr	r2, [pc, #368]	; (f20c <dict_update+0x198>)
    f09a:	4293      	cmp	r3, r2
    f09c:	d006      	beq.n	f0ac <dict_update+0x38>
    f09e:	4b5c      	ldr	r3, [pc, #368]	; (f210 <dict_update+0x19c>)
    f0a0:	4a5c      	ldr	r2, [pc, #368]	; (f214 <dict_update+0x1a0>)
    f0a2:	f240 1145 	movw	r1, #325	; 0x145
    f0a6:	485c      	ldr	r0, [pc, #368]	; (f218 <dict_update+0x1a4>)
    f0a8:	f00d ff1a 	bl	1cee0 <__assert_func>
    mp_obj_dict_t *self = MP_OBJ_TO_PTR(args[0]);
    f0ac:	68bb      	ldr	r3, [r7, #8]
    f0ae:	681b      	ldr	r3, [r3, #0]
    f0b0:	633b      	str	r3, [r7, #48]	; 0x30
    mp_ensure_not_fixed(self);
    f0b2:	6b38      	ldr	r0, [r7, #48]	; 0x30
    f0b4:	f7ff fdfc 	bl	ecb0 <mp_ensure_not_fixed>

    mp_arg_check_num(n_args, kwargs->used, 1, 2, true);
    f0b8:	687b      	ldr	r3, [r7, #4]
    f0ba:	681b      	ldr	r3, [r3, #0]
    f0bc:	f3c3 03dc 	ubfx	r3, r3, #3, #29
    f0c0:	4619      	mov	r1, r3
    f0c2:	2301      	movs	r3, #1
    f0c4:	9300      	str	r3, [sp, #0]
    f0c6:	2302      	movs	r3, #2
    f0c8:	2201      	movs	r2, #1
    f0ca:	68f8      	ldr	r0, [r7, #12]
    f0cc:	f7ff fc32 	bl	e934 <mp_arg_check_num>

    if (n_args == 2) {
    f0d0:	68fb      	ldr	r3, [r7, #12]
    f0d2:	2b02      	cmp	r3, #2
    f0d4:	d16f      	bne.n	f1b6 <dict_update+0x142>
        // given a positional argument

        if (MP_OBJ_IS_DICT_TYPE(args[1])) {
    f0d6:	68bb      	ldr	r3, [r7, #8]
    f0d8:	3304      	adds	r3, #4
    f0da:	681b      	ldr	r3, [r3, #0]
    f0dc:	4618      	mov	r0, r3
    f0de:	f7ff fbe1 	bl	e8a4 <MP_OBJ_IS_OBJ>
    f0e2:	4603      	mov	r3, r0
    f0e4:	2b00      	cmp	r3, #0
    f0e6:	d02d      	beq.n	f144 <dict_update+0xd0>
    f0e8:	68bb      	ldr	r3, [r7, #8]
    f0ea:	3304      	adds	r3, #4
    f0ec:	681b      	ldr	r3, [r3, #0]
    f0ee:	681b      	ldr	r3, [r3, #0]
    f0f0:	68db      	ldr	r3, [r3, #12]
    f0f2:	4a46      	ldr	r2, [pc, #280]	; (f20c <dict_update+0x198>)
    f0f4:	4293      	cmp	r3, r2
    f0f6:	d125      	bne.n	f144 <dict_update+0xd0>
            // update from other dictionary (make sure other is not self)
            if (args[1] != args[0]) {
    f0f8:	68bb      	ldr	r3, [r7, #8]
    f0fa:	3304      	adds	r3, #4
    f0fc:	681a      	ldr	r2, [r3, #0]
    f0fe:	68bb      	ldr	r3, [r7, #8]
    f100:	681b      	ldr	r3, [r3, #0]
    f102:	429a      	cmp	r2, r3
    f104:	d057      	beq.n	f1b6 <dict_update+0x142>
                size_t cur = 0;
    f106:	2300      	movs	r3, #0
    f108:	613b      	str	r3, [r7, #16]
                mp_map_elem_t *elem = NULL;
    f10a:	2300      	movs	r3, #0
    f10c:	62fb      	str	r3, [r7, #44]	; 0x2c
                while ((elem = dict_iter_next((mp_obj_dict_t*)MP_OBJ_TO_PTR(args[1]), &cur)) != NULL) {
    f10e:	e00b      	b.n	f128 <dict_update+0xb4>
                    mp_map_lookup(&self->map, elem->key, MP_MAP_LOOKUP_ADD_IF_NOT_FOUND)->value = elem->value;
    f110:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    f112:	1d18      	adds	r0, r3, #4
    f114:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    f116:	681b      	ldr	r3, [r3, #0]
    f118:	2201      	movs	r2, #1
    f11a:	4619      	mov	r1, r3
    f11c:	f7fe fbb8 	bl	d890 <mp_map_lookup>
    f120:	4602      	mov	r2, r0
    f122:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    f124:	685b      	ldr	r3, [r3, #4]
    f126:	6053      	str	r3, [r2, #4]
                while ((elem = dict_iter_next((mp_obj_dict_t*)MP_OBJ_TO_PTR(args[1]), &cur)) != NULL) {
    f128:	68bb      	ldr	r3, [r7, #8]
    f12a:	3304      	adds	r3, #4
    f12c:	681b      	ldr	r3, [r3, #0]
    f12e:	f107 0210 	add.w	r2, r7, #16
    f132:	4611      	mov	r1, r2
    f134:	4618      	mov	r0, r3
    f136:	f7ff fc19 	bl	e96c <dict_iter_next>
    f13a:	62f8      	str	r0, [r7, #44]	; 0x2c
    f13c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    f13e:	2b00      	cmp	r3, #0
    f140:	d1e6      	bne.n	f110 <dict_update+0x9c>
            if (args[1] != args[0]) {
    f142:	e038      	b.n	f1b6 <dict_update+0x142>
                }
            }
        } else {
            // update from a generic iterable of pairs
            mp_obj_t iter = mp_getiter(args[1], NULL);
    f144:	68bb      	ldr	r3, [r7, #8]
    f146:	3304      	adds	r3, #4
    f148:	681b      	ldr	r3, [r3, #0]
    f14a:	2100      	movs	r1, #0
    f14c:	4618      	mov	r0, r3
    f14e:	f7fd fdbb 	bl	ccc8 <mp_getiter>
    f152:	62b8      	str	r0, [r7, #40]	; 0x28
            mp_obj_t next = MP_OBJ_NULL;
    f154:	2300      	movs	r3, #0
    f156:	627b      	str	r3, [r7, #36]	; 0x24
            while ((next = mp_iternext(iter)) != MP_OBJ_STOP_ITERATION) {
    f158:	e026      	b.n	f1a8 <dict_update+0x134>
                mp_obj_t inneriter = mp_getiter(next, NULL);
    f15a:	2100      	movs	r1, #0
    f15c:	6a78      	ldr	r0, [r7, #36]	; 0x24
    f15e:	f7fd fdb3 	bl	ccc8 <mp_getiter>
    f162:	6238      	str	r0, [r7, #32]
                mp_obj_t key = mp_iternext(inneriter);
    f164:	6a38      	ldr	r0, [r7, #32]
    f166:	f7fd fe31 	bl	cdcc <mp_iternext>
    f16a:	61f8      	str	r0, [r7, #28]
                mp_obj_t value = mp_iternext(inneriter);
    f16c:	6a38      	ldr	r0, [r7, #32]
    f16e:	f7fd fe2d 	bl	cdcc <mp_iternext>
    f172:	61b8      	str	r0, [r7, #24]
                mp_obj_t stop = mp_iternext(inneriter);
    f174:	6a38      	ldr	r0, [r7, #32]
    f176:	f7fd fe29 	bl	cdcc <mp_iternext>
    f17a:	6178      	str	r0, [r7, #20]
                if (key == MP_OBJ_STOP_ITERATION
    f17c:	69fb      	ldr	r3, [r7, #28]
    f17e:	2b04      	cmp	r3, #4
    f180:	d005      	beq.n	f18e <dict_update+0x11a>
                    || value == MP_OBJ_STOP_ITERATION
    f182:	69bb      	ldr	r3, [r7, #24]
    f184:	2b04      	cmp	r3, #4
    f186:	d002      	beq.n	f18e <dict_update+0x11a>
                    || stop != MP_OBJ_STOP_ITERATION) {
    f188:	697b      	ldr	r3, [r7, #20]
    f18a:	2b04      	cmp	r3, #4
    f18c:	d002      	beq.n	f194 <dict_update+0x120>
                    mp_raise_ValueError("dict update sequence has wrong length");
    f18e:	4823      	ldr	r0, [pc, #140]	; (f21c <dict_update+0x1a8>)
    f190:	f7fe f8f1 	bl	d376 <mp_raise_ValueError>
                } else {
                    mp_map_lookup(&self->map, key, MP_MAP_LOOKUP_ADD_IF_NOT_FOUND)->value = value;
    f194:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    f196:	3304      	adds	r3, #4
    f198:	2201      	movs	r2, #1
    f19a:	69f9      	ldr	r1, [r7, #28]
    f19c:	4618      	mov	r0, r3
    f19e:	f7fe fb77 	bl	d890 <mp_map_lookup>
    f1a2:	4602      	mov	r2, r0
    f1a4:	69bb      	ldr	r3, [r7, #24]
    f1a6:	6053      	str	r3, [r2, #4]
            while ((next = mp_iternext(iter)) != MP_OBJ_STOP_ITERATION) {
    f1a8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    f1aa:	f7fd fe0f 	bl	cdcc <mp_iternext>
    f1ae:	6278      	str	r0, [r7, #36]	; 0x24
    f1b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    f1b2:	2b04      	cmp	r3, #4
    f1b4:	d1d1      	bne.n	f15a <dict_update+0xe6>
            }
        }
    }

    // update the dict with any keyword args
    for (size_t i = 0; i < kwargs->alloc; i++) {
    f1b6:	2300      	movs	r3, #0
    f1b8:	637b      	str	r3, [r7, #52]	; 0x34
    f1ba:	e01d      	b.n	f1f8 <dict_update+0x184>
        if (MP_MAP_SLOT_IS_FILLED(kwargs, i)) {
    f1bc:	6b79      	ldr	r1, [r7, #52]	; 0x34
    f1be:	6878      	ldr	r0, [r7, #4]
    f1c0:	f7ff fb82 	bl	e8c8 <MP_MAP_SLOT_IS_FILLED>
    f1c4:	4603      	mov	r3, r0
    f1c6:	2b00      	cmp	r3, #0
    f1c8:	d013      	beq.n	f1f2 <dict_update+0x17e>
            mp_map_lookup(&self->map, kwargs->table[i].key, MP_MAP_LOOKUP_ADD_IF_NOT_FOUND)->value = kwargs->table[i].value;
    f1ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    f1cc:	1d18      	adds	r0, r3, #4
    f1ce:	687b      	ldr	r3, [r7, #4]
    f1d0:	689a      	ldr	r2, [r3, #8]
    f1d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    f1d4:	00db      	lsls	r3, r3, #3
    f1d6:	4413      	add	r3, r2
    f1d8:	681b      	ldr	r3, [r3, #0]
    f1da:	2201      	movs	r2, #1
    f1dc:	4619      	mov	r1, r3
    f1de:	f7fe fb57 	bl	d890 <mp_map_lookup>
    f1e2:	4601      	mov	r1, r0
    f1e4:	687b      	ldr	r3, [r7, #4]
    f1e6:	689a      	ldr	r2, [r3, #8]
    f1e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    f1ea:	00db      	lsls	r3, r3, #3
    f1ec:	4413      	add	r3, r2
    f1ee:	685b      	ldr	r3, [r3, #4]
    f1f0:	604b      	str	r3, [r1, #4]
    for (size_t i = 0; i < kwargs->alloc; i++) {
    f1f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    f1f4:	3301      	adds	r3, #1
    f1f6:	637b      	str	r3, [r7, #52]	; 0x34
    f1f8:	687b      	ldr	r3, [r7, #4]
    f1fa:	685a      	ldr	r2, [r3, #4]
    f1fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    f1fe:	429a      	cmp	r2, r3
    f200:	d8dc      	bhi.n	f1bc <dict_update+0x148>
        }
    }

    return mp_const_none;
    f202:	4b07      	ldr	r3, [pc, #28]	; (f220 <dict_update+0x1ac>)
}
    f204:	4618      	mov	r0, r3
    f206:	3738      	adds	r7, #56	; 0x38
    f208:	46bd      	mov	sp, r7
    f20a:	bd80      	pop	{r7, pc}
    f20c:	0000ea61 	.word	0x0000ea61
    f210:	000239cc 	.word	0x000239cc
    f214:	00023d80 	.word	0x00023d80
    f218:	00023994 	.word	0x00023994
    f21c:	00023a78 	.word	0x00023a78
    f220:	0002511c 	.word	0x0002511c

0000f224 <dict_view_it_iternext>:
    mp_obj_base_t base;
    mp_obj_t dict;
    mp_dict_view_kind_t kind;
} mp_obj_dict_view_t;

STATIC mp_obj_t dict_view_it_iternext(mp_obj_t self_in) {
    f224:	b580      	push	{r7, lr}
    f226:	b086      	sub	sp, #24
    f228:	af00      	add	r7, sp, #0
    f22a:	6078      	str	r0, [r7, #4]
    mp_check_self(MP_OBJ_IS_TYPE(self_in, &dict_view_it_type));
    f22c:	6878      	ldr	r0, [r7, #4]
    f22e:	f7ff fb39 	bl	e8a4 <MP_OBJ_IS_OBJ>
    f232:	4603      	mov	r3, r0
    f234:	2b00      	cmp	r3, #0
    f236:	d004      	beq.n	f242 <dict_view_it_iternext+0x1e>
    f238:	687b      	ldr	r3, [r7, #4]
    f23a:	681b      	ldr	r3, [r3, #0]
    f23c:	4a1b      	ldr	r2, [pc, #108]	; (f2ac <dict_view_it_iternext+0x88>)
    f23e:	4293      	cmp	r3, r2
    f240:	d006      	beq.n	f250 <dict_view_it_iternext+0x2c>
    f242:	4b1b      	ldr	r3, [pc, #108]	; (f2b0 <dict_view_it_iternext+0x8c>)
    f244:	4a1b      	ldr	r2, [pc, #108]	; (f2b4 <dict_view_it_iternext+0x90>)
    f246:	f240 1193 	movw	r1, #403	; 0x193
    f24a:	481b      	ldr	r0, [pc, #108]	; (f2b8 <dict_view_it_iternext+0x94>)
    f24c:	f00d fe48 	bl	1cee0 <__assert_func>
    mp_obj_dict_view_it_t *self = MP_OBJ_TO_PTR(self_in);
    f250:	687b      	ldr	r3, [r7, #4]
    f252:	617b      	str	r3, [r7, #20]
    mp_map_elem_t *next = dict_iter_next(MP_OBJ_TO_PTR(self->dict), &self->cur);
    f254:	697b      	ldr	r3, [r7, #20]
    f256:	689a      	ldr	r2, [r3, #8]
    f258:	697b      	ldr	r3, [r7, #20]
    f25a:	330c      	adds	r3, #12
    f25c:	4619      	mov	r1, r3
    f25e:	4610      	mov	r0, r2
    f260:	f7ff fb84 	bl	e96c <dict_iter_next>
    f264:	6138      	str	r0, [r7, #16]

    if (next == NULL) {
    f266:	693b      	ldr	r3, [r7, #16]
    f268:	2b00      	cmp	r3, #0
    f26a:	d101      	bne.n	f270 <dict_view_it_iternext+0x4c>
        return MP_OBJ_STOP_ITERATION;
    f26c:	2304      	movs	r3, #4
    f26e:	e018      	b.n	f2a2 <dict_view_it_iternext+0x7e>
    } else {
        switch (self->kind) {
    f270:	697b      	ldr	r3, [r7, #20]
    f272:	685b      	ldr	r3, [r3, #4]
    f274:	2b01      	cmp	r3, #1
    f276:	d00f      	beq.n	f298 <dict_view_it_iternext+0x74>
    f278:	2b02      	cmp	r3, #2
    f27a:	d010      	beq.n	f29e <dict_view_it_iternext+0x7a>
            case MP_DICT_VIEW_ITEMS:
            default: {
                mp_obj_t items[] = {next->key, next->value};
    f27c:	693b      	ldr	r3, [r7, #16]
    f27e:	681b      	ldr	r3, [r3, #0]
    f280:	60bb      	str	r3, [r7, #8]
    f282:	693b      	ldr	r3, [r7, #16]
    f284:	685b      	ldr	r3, [r3, #4]
    f286:	60fb      	str	r3, [r7, #12]
                return mp_obj_new_tuple(2, items);
    f288:	f107 0308 	add.w	r3, r7, #8
    f28c:	4619      	mov	r1, r3
    f28e:	2002      	movs	r0, #2
    f290:	f006 ffdc 	bl	1624c <mp_obj_new_tuple>
    f294:	4603      	mov	r3, r0
    f296:	e004      	b.n	f2a2 <dict_view_it_iternext+0x7e>
            }
            case MP_DICT_VIEW_KEYS:
                return next->key;
    f298:	693b      	ldr	r3, [r7, #16]
    f29a:	681b      	ldr	r3, [r3, #0]
    f29c:	e001      	b.n	f2a2 <dict_view_it_iternext+0x7e>
            case MP_DICT_VIEW_VALUES:
                return next->value;
    f29e:	693b      	ldr	r3, [r7, #16]
    f2a0:	685b      	ldr	r3, [r3, #4]
        }
    }
}
    f2a2:	4618      	mov	r0, r3
    f2a4:	3718      	adds	r7, #24
    f2a6:	46bd      	mov	sp, r7
    f2a8:	bd80      	pop	{r7, pc}
    f2aa:	bf00      	nop
    f2ac:	00023ae8 	.word	0x00023ae8
    f2b0:	00023b54 	.word	0x00023b54
    f2b4:	00023d8c 	.word	0x00023d8c
    f2b8:	00023994 	.word	0x00023994

0000f2bc <dict_view_getiter>:
    .name = MP_QSTR_iterator,
    .getiter = mp_identity_getiter,
    .iternext = dict_view_it_iternext,
};

STATIC mp_obj_t dict_view_getiter(mp_obj_t view_in, mp_obj_iter_buf_t *iter_buf) {
    f2bc:	b580      	push	{r7, lr}
    f2be:	b084      	sub	sp, #16
    f2c0:	af00      	add	r7, sp, #0
    f2c2:	6078      	str	r0, [r7, #4]
    f2c4:	6039      	str	r1, [r7, #0]
    assert(sizeof(mp_obj_dict_view_it_t) <= sizeof(mp_obj_iter_buf_t));
    mp_check_self(MP_OBJ_IS_TYPE(view_in, &dict_view_type));
    f2c6:	6878      	ldr	r0, [r7, #4]
    f2c8:	f7ff faec 	bl	e8a4 <MP_OBJ_IS_OBJ>
    f2cc:	4603      	mov	r3, r0
    f2ce:	2b00      	cmp	r3, #0
    f2d0:	d004      	beq.n	f2dc <dict_view_getiter+0x20>
    f2d2:	687b      	ldr	r3, [r7, #4]
    f2d4:	681b      	ldr	r3, [r3, #0]
    f2d6:	4a10      	ldr	r2, [pc, #64]	; (f318 <dict_view_getiter+0x5c>)
    f2d8:	4293      	cmp	r3, r2
    f2da:	d006      	beq.n	f2ea <dict_view_getiter+0x2e>
    f2dc:	4b0f      	ldr	r3, [pc, #60]	; (f31c <dict_view_getiter+0x60>)
    f2de:	4a10      	ldr	r2, [pc, #64]	; (f320 <dict_view_getiter+0x64>)
    f2e0:	f240 11b1 	movw	r1, #433	; 0x1b1
    f2e4:	480f      	ldr	r0, [pc, #60]	; (f324 <dict_view_getiter+0x68>)
    f2e6:	f00d fdfb 	bl	1cee0 <__assert_func>
    mp_obj_dict_view_t *view = MP_OBJ_TO_PTR(view_in);
    f2ea:	687b      	ldr	r3, [r7, #4]
    f2ec:	60fb      	str	r3, [r7, #12]
    mp_obj_dict_view_it_t *o = (mp_obj_dict_view_it_t*)iter_buf;
    f2ee:	683b      	ldr	r3, [r7, #0]
    f2f0:	60bb      	str	r3, [r7, #8]
    o->base.type = &dict_view_it_type;
    f2f2:	68bb      	ldr	r3, [r7, #8]
    f2f4:	4a0c      	ldr	r2, [pc, #48]	; (f328 <dict_view_getiter+0x6c>)
    f2f6:	601a      	str	r2, [r3, #0]
    o->kind = view->kind;
    f2f8:	68fb      	ldr	r3, [r7, #12]
    f2fa:	689a      	ldr	r2, [r3, #8]
    f2fc:	68bb      	ldr	r3, [r7, #8]
    f2fe:	605a      	str	r2, [r3, #4]
    o->dict = view->dict;
    f300:	68fb      	ldr	r3, [r7, #12]
    f302:	685a      	ldr	r2, [r3, #4]
    f304:	68bb      	ldr	r3, [r7, #8]
    f306:	609a      	str	r2, [r3, #8]
    o->cur = 0;
    f308:	68bb      	ldr	r3, [r7, #8]
    f30a:	2200      	movs	r2, #0
    f30c:	60da      	str	r2, [r3, #12]
    return MP_OBJ_FROM_PTR(o);
    f30e:	68bb      	ldr	r3, [r7, #8]
}
    f310:	4618      	mov	r0, r3
    f312:	3710      	adds	r7, #16
    f314:	46bd      	mov	sp, r7
    f316:	bd80      	pop	{r7, pc}
    f318:	00023aac 	.word	0x00023aac
    f31c:	00023bb4 	.word	0x00023bb4
    f320:	00023da4 	.word	0x00023da4
    f324:	00023994 	.word	0x00023994
    f328:	00023ae8 	.word	0x00023ae8

0000f32c <dict_view_print>:

STATIC void dict_view_print(const mp_print_t *print, mp_obj_t self_in, mp_print_kind_t kind) {
    f32c:	b580      	push	{r7, lr}
    f32e:	b08c      	sub	sp, #48	; 0x30
    f330:	af00      	add	r7, sp, #0
    f332:	60f8      	str	r0, [r7, #12]
    f334:	60b9      	str	r1, [r7, #8]
    f336:	607a      	str	r2, [r7, #4]
    (void)kind;
    mp_check_self(MP_OBJ_IS_TYPE(self_in, &dict_view_type));
    f338:	68b8      	ldr	r0, [r7, #8]
    f33a:	f7ff fab3 	bl	e8a4 <MP_OBJ_IS_OBJ>
    f33e:	4603      	mov	r3, r0
    f340:	2b00      	cmp	r3, #0
    f342:	d004      	beq.n	f34e <dict_view_print+0x22>
    f344:	68bb      	ldr	r3, [r7, #8]
    f346:	681b      	ldr	r3, [r3, #0]
    f348:	4a23      	ldr	r2, [pc, #140]	; (f3d8 <dict_view_print+0xac>)
    f34a:	4293      	cmp	r3, r2
    f34c:	d006      	beq.n	f35c <dict_view_print+0x30>
    f34e:	4b23      	ldr	r3, [pc, #140]	; (f3dc <dict_view_print+0xb0>)
    f350:	4a23      	ldr	r2, [pc, #140]	; (f3e0 <dict_view_print+0xb4>)
    f352:	f240 11bd 	movw	r1, #445	; 0x1bd
    f356:	4823      	ldr	r0, [pc, #140]	; (f3e4 <dict_view_print+0xb8>)
    f358:	f00d fdc2 	bl	1cee0 <__assert_func>
    mp_obj_dict_view_t *self = MP_OBJ_TO_PTR(self_in);
    f35c:	68bb      	ldr	r3, [r7, #8]
    f35e:	62bb      	str	r3, [r7, #40]	; 0x28
    bool first = true;
    f360:	2301      	movs	r3, #1
    f362:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    mp_print_str(print, mp_dict_view_names[self->kind]);
    f366:	6abb      	ldr	r3, [r7, #40]	; 0x28
    f368:	689b      	ldr	r3, [r3, #8]
    f36a:	4a1f      	ldr	r2, [pc, #124]	; (f3e8 <dict_view_print+0xbc>)
    f36c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f370:	4619      	mov	r1, r3
    f372:	68f8      	ldr	r0, [r7, #12]
    f374:	f7f2 fb6a 	bl	1a4c <mp_print_str>
    mp_print_str(print, "([");
    f378:	491c      	ldr	r1, [pc, #112]	; (f3ec <dict_view_print+0xc0>)
    f37a:	68f8      	ldr	r0, [r7, #12]
    f37c:	f7f2 fb66 	bl	1a4c <mp_print_str>
    mp_obj_iter_buf_t iter_buf;
    mp_obj_t self_iter = dict_view_getiter(self_in, &iter_buf);
    f380:	f107 0310 	add.w	r3, r7, #16
    f384:	4619      	mov	r1, r3
    f386:	68b8      	ldr	r0, [r7, #8]
    f388:	f7ff ff98 	bl	f2bc <dict_view_getiter>
    f38c:	6278      	str	r0, [r7, #36]	; 0x24
    mp_obj_t next = MP_OBJ_NULL;
    f38e:	2300      	movs	r3, #0
    f390:	623b      	str	r3, [r7, #32]
    while ((next = dict_view_it_iternext(self_iter)) != MP_OBJ_STOP_ITERATION) {
    f392:	e012      	b.n	f3ba <dict_view_print+0x8e>
        if (!first) {
    f394:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    f398:	f083 0301 	eor.w	r3, r3, #1
    f39c:	b2db      	uxtb	r3, r3
    f39e:	2b00      	cmp	r3, #0
    f3a0:	d003      	beq.n	f3aa <dict_view_print+0x7e>
            mp_print_str(print, ", ");
    f3a2:	4913      	ldr	r1, [pc, #76]	; (f3f0 <dict_view_print+0xc4>)
    f3a4:	68f8      	ldr	r0, [r7, #12]
    f3a6:	f7f2 fb51 	bl	1a4c <mp_print_str>
        }
        first = false;
    f3aa:	2300      	movs	r3, #0
    f3ac:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        mp_obj_print_helper(print, next, PRINT_REPR);
    f3b0:	2201      	movs	r2, #1
    f3b2:	6a39      	ldr	r1, [r7, #32]
    f3b4:	68f8      	ldr	r0, [r7, #12]
    f3b6:	f7fe fc82 	bl	dcbe <mp_obj_print_helper>
    while ((next = dict_view_it_iternext(self_iter)) != MP_OBJ_STOP_ITERATION) {
    f3ba:	6a78      	ldr	r0, [r7, #36]	; 0x24
    f3bc:	f7ff ff32 	bl	f224 <dict_view_it_iternext>
    f3c0:	6238      	str	r0, [r7, #32]
    f3c2:	6a3b      	ldr	r3, [r7, #32]
    f3c4:	2b04      	cmp	r3, #4
    f3c6:	d1e5      	bne.n	f394 <dict_view_print+0x68>
    }
    mp_print_str(print, "])");
    f3c8:	490a      	ldr	r1, [pc, #40]	; (f3f4 <dict_view_print+0xc8>)
    f3ca:	68f8      	ldr	r0, [r7, #12]
    f3cc:	f7f2 fb3e 	bl	1a4c <mp_print_str>
}
    f3d0:	bf00      	nop
    f3d2:	3730      	adds	r7, #48	; 0x30
    f3d4:	46bd      	mov	sp, r7
    f3d6:	bd80      	pop	{r7, pc}
    f3d8:	00023aac 	.word	0x00023aac
    f3dc:	00023c10 	.word	0x00023c10
    f3e0:	00023db8 	.word	0x00023db8
    f3e4:	00023994 	.word	0x00023994
    f3e8:	00023b48 	.word	0x00023b48
    f3ec:	00023c6c 	.word	0x00023c6c
    f3f0:	00023928 	.word	0x00023928
    f3f4:	00023c70 	.word	0x00023c70

0000f3f8 <dict_view_binary_op>:

STATIC mp_obj_t dict_view_binary_op(mp_binary_op_t op, mp_obj_t lhs_in, mp_obj_t rhs_in) {
    f3f8:	b580      	push	{r7, lr}
    f3fa:	b086      	sub	sp, #24
    f3fc:	af00      	add	r7, sp, #0
    f3fe:	60f8      	str	r0, [r7, #12]
    f400:	60b9      	str	r1, [r7, #8]
    f402:	607a      	str	r2, [r7, #4]
    // only supported for the 'keys' kind until sets and dicts are refactored
    mp_obj_dict_view_t *o = MP_OBJ_TO_PTR(lhs_in);
    f404:	68bb      	ldr	r3, [r7, #8]
    f406:	617b      	str	r3, [r7, #20]
    if (o->kind != MP_DICT_VIEW_KEYS) {
    f408:	697b      	ldr	r3, [r7, #20]
    f40a:	689b      	ldr	r3, [r3, #8]
    f40c:	2b01      	cmp	r3, #1
    f40e:	d001      	beq.n	f414 <dict_view_binary_op+0x1c>
        return MP_OBJ_NULL; // op not supported
    f410:	2300      	movs	r3, #0
    f412:	e00c      	b.n	f42e <dict_view_binary_op+0x36>
    }
    if (op != MP_BINARY_OP_CONTAINS) {
    f414:	68fb      	ldr	r3, [r7, #12]
    f416:	2b22      	cmp	r3, #34	; 0x22
    f418:	d001      	beq.n	f41e <dict_view_binary_op+0x26>
        return MP_OBJ_NULL; // op not supported
    f41a:	2300      	movs	r3, #0
    f41c:	e007      	b.n	f42e <dict_view_binary_op+0x36>
    }
    return dict_binary_op(op, o->dict, rhs_in);
    f41e:	697b      	ldr	r3, [r7, #20]
    f420:	685b      	ldr	r3, [r3, #4]
    f422:	687a      	ldr	r2, [r7, #4]
    f424:	4619      	mov	r1, r3
    f426:	68f8      	ldr	r0, [r7, #12]
    f428:	f7ff fb75 	bl	eb16 <dict_binary_op>
    f42c:	4603      	mov	r3, r0
}
    f42e:	4618      	mov	r0, r3
    f430:	3718      	adds	r7, #24
    f432:	46bd      	mov	sp, r7
    f434:	bd80      	pop	{r7, pc}

0000f436 <mp_obj_new_dict_view>:
    .print = dict_view_print,
    .binary_op = dict_view_binary_op,
    .getiter = dict_view_getiter,
};

STATIC mp_obj_t mp_obj_new_dict_view(mp_obj_t dict, mp_dict_view_kind_t kind) {
    f436:	b580      	push	{r7, lr}
    f438:	b084      	sub	sp, #16
    f43a:	af00      	add	r7, sp, #0
    f43c:	6078      	str	r0, [r7, #4]
    f43e:	6039      	str	r1, [r7, #0]
    mp_obj_dict_view_t *o = m_new_obj(mp_obj_dict_view_t);
    f440:	200c      	movs	r0, #12
    f442:	f7f0 ff6b 	bl	31c <m_malloc>
    f446:	60f8      	str	r0, [r7, #12]
    o->base.type = &dict_view_type;
    f448:	68fb      	ldr	r3, [r7, #12]
    f44a:	4a06      	ldr	r2, [pc, #24]	; (f464 <mp_obj_new_dict_view+0x2e>)
    f44c:	601a      	str	r2, [r3, #0]
    o->dict = dict;
    f44e:	68fb      	ldr	r3, [r7, #12]
    f450:	687a      	ldr	r2, [r7, #4]
    f452:	605a      	str	r2, [r3, #4]
    o->kind = kind;
    f454:	68fb      	ldr	r3, [r7, #12]
    f456:	683a      	ldr	r2, [r7, #0]
    f458:	609a      	str	r2, [r3, #8]
    return MP_OBJ_FROM_PTR(o);
    f45a:	68fb      	ldr	r3, [r7, #12]
}
    f45c:	4618      	mov	r0, r3
    f45e:	3710      	adds	r7, #16
    f460:	46bd      	mov	sp, r7
    f462:	bd80      	pop	{r7, pc}
    f464:	00023aac 	.word	0x00023aac

0000f468 <dict_view>:

STATIC mp_obj_t dict_view(mp_obj_t self_in, mp_dict_view_kind_t kind) {
    f468:	b580      	push	{r7, lr}
    f46a:	b082      	sub	sp, #8
    f46c:	af00      	add	r7, sp, #0
    f46e:	6078      	str	r0, [r7, #4]
    f470:	6039      	str	r1, [r7, #0]
    mp_check_self(MP_OBJ_IS_DICT_TYPE(self_in));
    f472:	6878      	ldr	r0, [r7, #4]
    f474:	f7ff fa16 	bl	e8a4 <MP_OBJ_IS_OBJ>
    f478:	4603      	mov	r3, r0
    f47a:	2b00      	cmp	r3, #0
    f47c:	d005      	beq.n	f48a <dict_view+0x22>
    f47e:	687b      	ldr	r3, [r7, #4]
    f480:	681b      	ldr	r3, [r3, #0]
    f482:	68db      	ldr	r3, [r3, #12]
    f484:	4a09      	ldr	r2, [pc, #36]	; (f4ac <dict_view+0x44>)
    f486:	4293      	cmp	r3, r2
    f488:	d006      	beq.n	f498 <dict_view+0x30>
    f48a:	4b09      	ldr	r3, [pc, #36]	; (f4b0 <dict_view+0x48>)
    f48c:	4a09      	ldr	r2, [pc, #36]	; (f4b4 <dict_view+0x4c>)
    f48e:	f44f 71f6 	mov.w	r1, #492	; 0x1ec
    f492:	4809      	ldr	r0, [pc, #36]	; (f4b8 <dict_view+0x50>)
    f494:	f00d fd24 	bl	1cee0 <__assert_func>
    return mp_obj_new_dict_view(self_in, kind);
    f498:	6839      	ldr	r1, [r7, #0]
    f49a:	6878      	ldr	r0, [r7, #4]
    f49c:	f7ff ffcb 	bl	f436 <mp_obj_new_dict_view>
    f4a0:	4603      	mov	r3, r0
}
    f4a2:	4618      	mov	r0, r3
    f4a4:	3708      	adds	r7, #8
    f4a6:	46bd      	mov	sp, r7
    f4a8:	bd80      	pop	{r7, pc}
    f4aa:	bf00      	nop
    f4ac:	0000ea61 	.word	0x0000ea61
    f4b0:	00023934 	.word	0x00023934
    f4b4:	00023dc8 	.word	0x00023dc8
    f4b8:	00023994 	.word	0x00023994

0000f4bc <dict_items>:

STATIC mp_obj_t dict_items(mp_obj_t self_in) {
    f4bc:	b580      	push	{r7, lr}
    f4be:	b082      	sub	sp, #8
    f4c0:	af00      	add	r7, sp, #0
    f4c2:	6078      	str	r0, [r7, #4]
    return dict_view(self_in, MP_DICT_VIEW_ITEMS);
    f4c4:	2100      	movs	r1, #0
    f4c6:	6878      	ldr	r0, [r7, #4]
    f4c8:	f7ff ffce 	bl	f468 <dict_view>
    f4cc:	4603      	mov	r3, r0
}
    f4ce:	4618      	mov	r0, r3
    f4d0:	3708      	adds	r7, #8
    f4d2:	46bd      	mov	sp, r7
    f4d4:	bd80      	pop	{r7, pc}

0000f4d6 <dict_keys>:
STATIC MP_DEFINE_CONST_FUN_OBJ_1(dict_items_obj, dict_items);

STATIC mp_obj_t dict_keys(mp_obj_t self_in) {
    f4d6:	b580      	push	{r7, lr}
    f4d8:	b082      	sub	sp, #8
    f4da:	af00      	add	r7, sp, #0
    f4dc:	6078      	str	r0, [r7, #4]
    return dict_view(self_in, MP_DICT_VIEW_KEYS);
    f4de:	2101      	movs	r1, #1
    f4e0:	6878      	ldr	r0, [r7, #4]
    f4e2:	f7ff ffc1 	bl	f468 <dict_view>
    f4e6:	4603      	mov	r3, r0
}
    f4e8:	4618      	mov	r0, r3
    f4ea:	3708      	adds	r7, #8
    f4ec:	46bd      	mov	sp, r7
    f4ee:	bd80      	pop	{r7, pc}

0000f4f0 <dict_values>:
STATIC MP_DEFINE_CONST_FUN_OBJ_1(dict_keys_obj, dict_keys);

STATIC mp_obj_t dict_values(mp_obj_t self_in) {
    f4f0:	b580      	push	{r7, lr}
    f4f2:	b082      	sub	sp, #8
    f4f4:	af00      	add	r7, sp, #0
    f4f6:	6078      	str	r0, [r7, #4]
    return dict_view(self_in, MP_DICT_VIEW_VALUES);
    f4f8:	2102      	movs	r1, #2
    f4fa:	6878      	ldr	r0, [r7, #4]
    f4fc:	f7ff ffb4 	bl	f468 <dict_view>
    f500:	4603      	mov	r3, r0
}
    f502:	4618      	mov	r0, r3
    f504:	3708      	adds	r7, #8
    f506:	46bd      	mov	sp, r7
    f508:	bd80      	pop	{r7, pc}

0000f50a <dict_getiter>:
STATIC MP_DEFINE_CONST_FUN_OBJ_1(dict_values_obj, dict_values);

/******************************************************************************/
/* dict iterator                                                              */

STATIC mp_obj_t dict_getiter(mp_obj_t self_in, mp_obj_iter_buf_t *iter_buf) {
    f50a:	b580      	push	{r7, lr}
    f50c:	b084      	sub	sp, #16
    f50e:	af00      	add	r7, sp, #0
    f510:	6078      	str	r0, [r7, #4]
    f512:	6039      	str	r1, [r7, #0]
    assert(sizeof(mp_obj_dict_view_it_t) <= sizeof(mp_obj_iter_buf_t));
    mp_check_self(MP_OBJ_IS_DICT_TYPE(self_in));
    f514:	6878      	ldr	r0, [r7, #4]
    f516:	f7ff f9c5 	bl	e8a4 <MP_OBJ_IS_OBJ>
    f51a:	4603      	mov	r3, r0
    f51c:	2b00      	cmp	r3, #0
    f51e:	d005      	beq.n	f52c <dict_getiter+0x22>
    f520:	687b      	ldr	r3, [r7, #4]
    f522:	681b      	ldr	r3, [r3, #0]
    f524:	68db      	ldr	r3, [r3, #12]
    f526:	4a0e      	ldr	r2, [pc, #56]	; (f560 <dict_getiter+0x56>)
    f528:	4293      	cmp	r3, r2
    f52a:	d006      	beq.n	f53a <dict_getiter+0x30>
    f52c:	4b0d      	ldr	r3, [pc, #52]	; (f564 <dict_getiter+0x5a>)
    f52e:	4a0e      	ldr	r2, [pc, #56]	; (f568 <dict_getiter+0x5e>)
    f530:	f44f 7101 	mov.w	r1, #516	; 0x204
    f534:	480d      	ldr	r0, [pc, #52]	; (f56c <dict_getiter+0x62>)
    f536:	f00d fcd3 	bl	1cee0 <__assert_func>
    mp_obj_dict_view_it_t *o = (mp_obj_dict_view_it_t*)iter_buf;
    f53a:	683b      	ldr	r3, [r7, #0]
    f53c:	60fb      	str	r3, [r7, #12]
    o->base.type = &dict_view_it_type;
    f53e:	68fb      	ldr	r3, [r7, #12]
    f540:	4a0b      	ldr	r2, [pc, #44]	; (f570 <dict_getiter+0x66>)
    f542:	601a      	str	r2, [r3, #0]
    o->kind = MP_DICT_VIEW_KEYS;
    f544:	68fb      	ldr	r3, [r7, #12]
    f546:	2201      	movs	r2, #1
    f548:	605a      	str	r2, [r3, #4]
    o->dict = self_in;
    f54a:	68fb      	ldr	r3, [r7, #12]
    f54c:	687a      	ldr	r2, [r7, #4]
    f54e:	609a      	str	r2, [r3, #8]
    o->cur = 0;
    f550:	68fb      	ldr	r3, [r7, #12]
    f552:	2200      	movs	r2, #0
    f554:	60da      	str	r2, [r3, #12]
    return MP_OBJ_FROM_PTR(o);
    f556:	68fb      	ldr	r3, [r7, #12]
}
    f558:	4618      	mov	r0, r3
    f55a:	3710      	adds	r7, #16
    f55c:	46bd      	mov	sp, r7
    f55e:	bd80      	pop	{r7, pc}
    f560:	0000ea61 	.word	0x0000ea61
    f564:	00023934 	.word	0x00023934
    f568:	00023dd4 	.word	0x00023dd4
    f56c:	00023994 	.word	0x00023994
    f570:	00023ae8 	.word	0x00023ae8

0000f574 <mp_obj_dict_init>:
    .parent = &mp_type_dict,
    .locals_dict = (mp_obj_dict_t*)&dict_locals_dict,
};
#endif

void mp_obj_dict_init(mp_obj_dict_t *dict, size_t n_args) {
    f574:	b580      	push	{r7, lr}
    f576:	b082      	sub	sp, #8
    f578:	af00      	add	r7, sp, #0
    f57a:	6078      	str	r0, [r7, #4]
    f57c:	6039      	str	r1, [r7, #0]
    dict->base.type = &mp_type_dict;
    f57e:	687b      	ldr	r3, [r7, #4]
    f580:	4a05      	ldr	r2, [pc, #20]	; (f598 <mp_obj_dict_init+0x24>)
    f582:	601a      	str	r2, [r3, #0]
    mp_map_init(&dict->map, n_args);
    f584:	687b      	ldr	r3, [r7, #4]
    f586:	3304      	adds	r3, #4
    f588:	6839      	ldr	r1, [r7, #0]
    f58a:	4618      	mov	r0, r3
    f58c:	f7fe f880 	bl	d690 <mp_map_init>
}
    f590:	bf00      	nop
    f592:	3708      	adds	r7, #8
    f594:	46bd      	mov	sp, r7
    f596:	bd80      	pop	{r7, pc}
    f598:	00023d0c 	.word	0x00023d0c

0000f59c <mp_obj_new_dict>:

mp_obj_t mp_obj_new_dict(size_t n_args) {
    f59c:	b580      	push	{r7, lr}
    f59e:	b084      	sub	sp, #16
    f5a0:	af00      	add	r7, sp, #0
    f5a2:	6078      	str	r0, [r7, #4]
    mp_obj_dict_t *o = m_new_obj(mp_obj_dict_t);
    f5a4:	2010      	movs	r0, #16
    f5a6:	f7f0 feb9 	bl	31c <m_malloc>
    f5aa:	60f8      	str	r0, [r7, #12]
    mp_obj_dict_init(o, n_args);
    f5ac:	6879      	ldr	r1, [r7, #4]
    f5ae:	68f8      	ldr	r0, [r7, #12]
    f5b0:	f7ff ffe0 	bl	f574 <mp_obj_dict_init>
    return MP_OBJ_FROM_PTR(o);
    f5b4:	68fb      	ldr	r3, [r7, #12]
}
    f5b6:	4618      	mov	r0, r3
    f5b8:	3710      	adds	r7, #16
    f5ba:	46bd      	mov	sp, r7
    f5bc:	bd80      	pop	{r7, pc}

0000f5be <mp_obj_dict_len>:

size_t mp_obj_dict_len(mp_obj_t self_in) {
    f5be:	b480      	push	{r7}
    f5c0:	b085      	sub	sp, #20
    f5c2:	af00      	add	r7, sp, #0
    f5c4:	6078      	str	r0, [r7, #4]
    mp_obj_dict_t *self = MP_OBJ_TO_PTR(self_in);
    f5c6:	687b      	ldr	r3, [r7, #4]
    f5c8:	60fb      	str	r3, [r7, #12]
    return self->map.used;
    f5ca:	68fb      	ldr	r3, [r7, #12]
    f5cc:	685b      	ldr	r3, [r3, #4]
    f5ce:	f3c3 03dc 	ubfx	r3, r3, #3, #29
}
    f5d2:	4618      	mov	r0, r3
    f5d4:	3714      	adds	r7, #20
    f5d6:	46bd      	mov	sp, r7
    f5d8:	f85d 7b04 	ldr.w	r7, [sp], #4
    f5dc:	4770      	bx	lr

0000f5de <mp_obj_dict_store>:

mp_obj_t mp_obj_dict_store(mp_obj_t self_in, mp_obj_t key, mp_obj_t value) {
    f5de:	b580      	push	{r7, lr}
    f5e0:	b086      	sub	sp, #24
    f5e2:	af00      	add	r7, sp, #0
    f5e4:	60f8      	str	r0, [r7, #12]
    f5e6:	60b9      	str	r1, [r7, #8]
    f5e8:	607a      	str	r2, [r7, #4]
    mp_check_self(MP_OBJ_IS_DICT_TYPE(self_in));
    f5ea:	68f8      	ldr	r0, [r7, #12]
    f5ec:	f7ff f95a 	bl	e8a4 <MP_OBJ_IS_OBJ>
    f5f0:	4603      	mov	r3, r0
    f5f2:	2b00      	cmp	r3, #0
    f5f4:	d005      	beq.n	f602 <mp_obj_dict_store+0x24>
    f5f6:	68fb      	ldr	r3, [r7, #12]
    f5f8:	681b      	ldr	r3, [r3, #0]
    f5fa:	68db      	ldr	r3, [r3, #12]
    f5fc:	4a0e      	ldr	r2, [pc, #56]	; (f638 <mp_obj_dict_store+0x5a>)
    f5fe:	4293      	cmp	r3, r2
    f600:	d006      	beq.n	f610 <mp_obj_dict_store+0x32>
    f602:	4b0e      	ldr	r3, [pc, #56]	; (f63c <mp_obj_dict_store+0x5e>)
    f604:	4a0e      	ldr	r2, [pc, #56]	; (f640 <mp_obj_dict_store+0x62>)
    f606:	f240 214f 	movw	r1, #591	; 0x24f
    f60a:	480e      	ldr	r0, [pc, #56]	; (f644 <mp_obj_dict_store+0x66>)
    f60c:	f00d fc68 	bl	1cee0 <__assert_func>
    mp_obj_dict_t *self = MP_OBJ_TO_PTR(self_in);
    f610:	68fb      	ldr	r3, [r7, #12]
    f612:	617b      	str	r3, [r7, #20]
    mp_ensure_not_fixed(self);
    f614:	6978      	ldr	r0, [r7, #20]
    f616:	f7ff fb4b 	bl	ecb0 <mp_ensure_not_fixed>
    mp_map_lookup(&self->map, key, MP_MAP_LOOKUP_ADD_IF_NOT_FOUND)->value = value;
    f61a:	697b      	ldr	r3, [r7, #20]
    f61c:	3304      	adds	r3, #4
    f61e:	2201      	movs	r2, #1
    f620:	68b9      	ldr	r1, [r7, #8]
    f622:	4618      	mov	r0, r3
    f624:	f7fe f934 	bl	d890 <mp_map_lookup>
    f628:	4602      	mov	r2, r0
    f62a:	687b      	ldr	r3, [r7, #4]
    f62c:	6053      	str	r3, [r2, #4]
    return self_in;
    f62e:	68fb      	ldr	r3, [r7, #12]
}
    f630:	4618      	mov	r0, r3
    f632:	3718      	adds	r7, #24
    f634:	46bd      	mov	sp, r7
    f636:	bd80      	pop	{r7, pc}
    f638:	0000ea61 	.word	0x0000ea61
    f63c:	00023934 	.word	0x00023934
    f640:	00023de4 	.word	0x00023de4
    f644:	00023994 	.word	0x00023994

0000f648 <mp_obj_dict_delete>:

mp_obj_t mp_obj_dict_delete(mp_obj_t self_in, mp_obj_t key) {
    f648:	b580      	push	{r7, lr}
    f64a:	b084      	sub	sp, #16
    f64c:	af00      	add	r7, sp, #0
    f64e:	6078      	str	r0, [r7, #4]
    f650:	6039      	str	r1, [r7, #0]
    mp_obj_t args[2] = {self_in, key};
    f652:	687b      	ldr	r3, [r7, #4]
    f654:	60bb      	str	r3, [r7, #8]
    f656:	683b      	ldr	r3, [r7, #0]
    f658:	60fb      	str	r3, [r7, #12]
    dict_get_helper(2, args, MP_MAP_LOOKUP_REMOVE_IF_FOUND);
    f65a:	f107 0308 	add.w	r3, r7, #8
    f65e:	2202      	movs	r2, #2
    f660:	4619      	mov	r1, r3
    f662:	2002      	movs	r0, #2
    f664:	f7ff fc0c 	bl	ee80 <dict_get_helper>
    return self_in;
    f668:	687b      	ldr	r3, [r7, #4]
}
    f66a:	4618      	mov	r0, r3
    f66c:	3710      	adds	r7, #16
    f66e:	46bd      	mov	sp, r7
    f670:	bd80      	pop	{r7, pc}
    f672:	bf00      	nop

0000f674 <MP_OBJ_IS_OBJ>:
    { return ((((mp_int_t)(o)) & 3) == 0); }
    f674:	b480      	push	{r7}
    f676:	b083      	sub	sp, #12
    f678:	af00      	add	r7, sp, #0
    f67a:	6078      	str	r0, [r7, #4]
    f67c:	687b      	ldr	r3, [r7, #4]
    f67e:	f003 0303 	and.w	r3, r3, #3
    f682:	2b00      	cmp	r3, #0
    f684:	bf0c      	ite	eq
    f686:	2301      	moveq	r3, #1
    f688:	2300      	movne	r3, #0
    f68a:	b2db      	uxtb	r3, r3
    f68c:	4618      	mov	r0, r3
    f68e:	370c      	adds	r7, #12
    f690:	46bd      	mov	sp, r7
    f692:	f85d 7b04 	ldr.w	r7, [sp], #4
    f696:	4770      	bx	lr

0000f698 <mp_arg_check_num>:
static inline void mp_arg_check_num(size_t n_args, size_t n_kw, size_t n_args_min, size_t n_args_max, bool takes_kw) {
    f698:	b580      	push	{r7, lr}
    f69a:	b084      	sub	sp, #16
    f69c:	af00      	add	r7, sp, #0
    f69e:	60f8      	str	r0, [r7, #12]
    f6a0:	60b9      	str	r1, [r7, #8]
    f6a2:	607a      	str	r2, [r7, #4]
    f6a4:	603b      	str	r3, [r7, #0]
    mp_arg_check_num_sig(n_args, n_kw, (uint32_t)MP_OBJ_FUN_MAKE_SIG(n_args_min, n_args_max, takes_kw));
    f6a6:	687b      	ldr	r3, [r7, #4]
    f6a8:	045a      	lsls	r2, r3, #17
    f6aa:	683b      	ldr	r3, [r7, #0]
    f6ac:	005b      	lsls	r3, r3, #1
    f6ae:	431a      	orrs	r2, r3
    f6b0:	7e3b      	ldrb	r3, [r7, #24]
    f6b2:	2b00      	cmp	r3, #0
    f6b4:	d001      	beq.n	f6ba <mp_arg_check_num+0x22>
    f6b6:	2301      	movs	r3, #1
    f6b8:	e000      	b.n	f6bc <mp_arg_check_num+0x24>
    f6ba:	2300      	movs	r3, #0
    f6bc:	4313      	orrs	r3, r2
    f6be:	461a      	mov	r2, r3
    f6c0:	68b9      	ldr	r1, [r7, #8]
    f6c2:	68f8      	ldr	r0, [r7, #12]
    f6c4:	f7fd fe88 	bl	d3d8 <mp_arg_check_num_sig>
}
    f6c8:	bf00      	nop
    f6ca:	3710      	adds	r7, #16
    f6cc:	46bd      	mov	sp, r7
    f6ce:	bd80      	pop	{r7, pc}

0000f6d0 <mp_obj_exception_print>:
// Instance of GeneratorExit exception - needed by generator.close()
// This would belong to objgenerator.c, but to keep mp_obj_exception_t
// definition module-private so far, have it here.
const mp_obj_exception_t mp_const_GeneratorExit_obj = {{&mp_type_GeneratorExit}, 0, 0, NULL, (mp_obj_tuple_t*)&mp_const_empty_tuple_obj};

void mp_obj_exception_print(const mp_print_t *print, mp_obj_t o_in, mp_print_kind_t kind) {
    f6d0:	b580      	push	{r7, lr}
    f6d2:	b088      	sub	sp, #32
    f6d4:	af00      	add	r7, sp, #0
    f6d6:	60f8      	str	r0, [r7, #12]
    f6d8:	60b9      	str	r1, [r7, #8]
    f6da:	607a      	str	r2, [r7, #4]
    mp_obj_exception_t *o = MP_OBJ_TO_PTR(o_in);
    f6dc:	68bb      	ldr	r3, [r7, #8]
    f6de:	61fb      	str	r3, [r7, #28]
    mp_print_kind_t k = kind & ~PRINT_EXC_SUBCLASS;
    f6e0:	687b      	ldr	r3, [r7, #4]
    f6e2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    f6e6:	61bb      	str	r3, [r7, #24]
    bool is_subclass = kind & PRINT_EXC_SUBCLASS;
    f6e8:	687b      	ldr	r3, [r7, #4]
    f6ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
    f6ee:	2b00      	cmp	r3, #0
    f6f0:	bf14      	ite	ne
    f6f2:	2301      	movne	r3, #1
    f6f4:	2300      	moveq	r3, #0
    f6f6:	75fb      	strb	r3, [r7, #23]
    if (!is_subclass && (k == PRINT_REPR || k == PRINT_EXC)) {
    f6f8:	7dfb      	ldrb	r3, [r7, #23]
    f6fa:	f083 0301 	eor.w	r3, r3, #1
    f6fe:	b2db      	uxtb	r3, r3
    f700:	2b00      	cmp	r3, #0
    f702:	d010      	beq.n	f726 <mp_obj_exception_print+0x56>
    f704:	69bb      	ldr	r3, [r7, #24]
    f706:	2b01      	cmp	r3, #1
    f708:	d002      	beq.n	f710 <mp_obj_exception_print+0x40>
    f70a:	69bb      	ldr	r3, [r7, #24]
    f70c:	2b02      	cmp	r3, #2
    f70e:	d10a      	bne.n	f726 <mp_obj_exception_print+0x56>
        mp_print_str(print, qstr_str(o->base.type->name));
    f710:	69fb      	ldr	r3, [r7, #28]
    f712:	681b      	ldr	r3, [r3, #0]
    f714:	88db      	ldrh	r3, [r3, #6]
    f716:	4618      	mov	r0, r3
    f718:	f7f1 fe5a 	bl	13d0 <qstr_str>
    f71c:	4603      	mov	r3, r0
    f71e:	4619      	mov	r1, r3
    f720:	68f8      	ldr	r0, [r7, #12]
    f722:	f7f2 f993 	bl	1a4c <mp_print_str>
    }

    if (k == PRINT_EXC) {
    f726:	69bb      	ldr	r3, [r7, #24]
    f728:	2b02      	cmp	r3, #2
    f72a:	d103      	bne.n	f734 <mp_obj_exception_print+0x64>
        mp_print_str(print, ": ");
    f72c:	4917      	ldr	r1, [pc, #92]	; (f78c <mp_obj_exception_print+0xbc>)
    f72e:	68f8      	ldr	r0, [r7, #12]
    f730:	f7f2 f98c 	bl	1a4c <mp_print_str>
    }

    if (k == PRINT_STR || k == PRINT_EXC) {
    f734:	69bb      	ldr	r3, [r7, #24]
    f736:	2b00      	cmp	r3, #0
    f738:	d002      	beq.n	f740 <mp_obj_exception_print+0x70>
    f73a:	69bb      	ldr	r3, [r7, #24]
    f73c:	2b02      	cmp	r3, #2
    f73e:	d11b      	bne.n	f778 <mp_obj_exception_print+0xa8>
        if (o->args == NULL || o->args->len == 0) {
    f740:	69fb      	ldr	r3, [r7, #28]
    f742:	68db      	ldr	r3, [r3, #12]
    f744:	2b00      	cmp	r3, #0
    f746:	d004      	beq.n	f752 <mp_obj_exception_print+0x82>
    f748:	69fb      	ldr	r3, [r7, #28]
    f74a:	68db      	ldr	r3, [r3, #12]
    f74c:	685b      	ldr	r3, [r3, #4]
    f74e:	2b00      	cmp	r3, #0
    f750:	d104      	bne.n	f75c <mp_obj_exception_print+0x8c>
            mp_print_str(print, "");
    f752:	490f      	ldr	r1, [pc, #60]	; (f790 <mp_obj_exception_print+0xc0>)
    f754:	68f8      	ldr	r0, [r7, #12]
    f756:	f7f2 f979 	bl	1a4c <mp_print_str>
            return;
    f75a:	e014      	b.n	f786 <mp_obj_exception_print+0xb6>
        } else if (o->args->len == 1) {
    f75c:	69fb      	ldr	r3, [r7, #28]
    f75e:	68db      	ldr	r3, [r3, #12]
    f760:	685b      	ldr	r3, [r3, #4]
    f762:	2b01      	cmp	r3, #1
    f764:	d108      	bne.n	f778 <mp_obj_exception_print+0xa8>
                    mp_printf(print, "[Errno " INT_FMT "] %q", MP_OBJ_SMALL_INT_VALUE(o->args->items[0]), qst);
                    return;
                }
            }
            #endif
            mp_obj_print_helper(print, o->args->items[0], PRINT_STR);
    f766:	69fb      	ldr	r3, [r7, #28]
    f768:	68db      	ldr	r3, [r3, #12]
    f76a:	689b      	ldr	r3, [r3, #8]
    f76c:	2200      	movs	r2, #0
    f76e:	4619      	mov	r1, r3
    f770:	68f8      	ldr	r0, [r7, #12]
    f772:	f7fe faa4 	bl	dcbe <mp_obj_print_helper>
            return;
    f776:	e006      	b.n	f786 <mp_obj_exception_print+0xb6>
        }
    }
    mp_obj_tuple_print(print, MP_OBJ_FROM_PTR(o->args), kind);
    f778:	69fb      	ldr	r3, [r7, #28]
    f77a:	68db      	ldr	r3, [r3, #12]
    f77c:	687a      	ldr	r2, [r7, #4]
    f77e:	4619      	mov	r1, r3
    f780:	68f8      	ldr	r0, [r7, #12]
    f782:	f006 fadd 	bl	15d40 <mp_obj_tuple_print>
}
    f786:	3720      	adds	r7, #32
    f788:	46bd      	mov	sp, r7
    f78a:	bd80      	pop	{r7, pc}
    f78c:	00023e08 	.word	0x00023e08
    f790:	00023e0c 	.word	0x00023e0c

0000f794 <mp_obj_exception_make_new>:

mp_obj_t mp_obj_exception_make_new(const mp_obj_type_t *type, size_t n_args, size_t n_kw, const mp_obj_t *args) {
    f794:	b580      	push	{r7, lr}
    f796:	b088      	sub	sp, #32
    f798:	af02      	add	r7, sp, #8
    f79a:	60f8      	str	r0, [r7, #12]
    f79c:	60b9      	str	r1, [r7, #8]
    f79e:	607a      	str	r2, [r7, #4]
    f7a0:	603b      	str	r3, [r7, #0]
    mp_arg_check_num(n_args, n_kw, 0, MP_OBJ_FUN_ARGS_MAX, false);
    f7a2:	2300      	movs	r3, #0
    f7a4:	9300      	str	r3, [sp, #0]
    f7a6:	f64f 73ff 	movw	r3, #65535	; 0xffff
    f7aa:	2200      	movs	r2, #0
    f7ac:	6879      	ldr	r1, [r7, #4]
    f7ae:	68b8      	ldr	r0, [r7, #8]
    f7b0:	f7ff ff72 	bl	f698 <mp_arg_check_num>

    // Try to allocate memory for the exception, with fallback to emergency exception object
    mp_obj_exception_t *o_exc = m_new_obj_maybe(mp_obj_exception_t);
    f7b4:	2010      	movs	r0, #16
    f7b6:	f7f0 fdcf 	bl	358 <m_malloc_maybe>
    f7ba:	6178      	str	r0, [r7, #20]
    if (o_exc == NULL) {
    f7bc:	697b      	ldr	r3, [r7, #20]
    f7be:	2b00      	cmp	r3, #0
    f7c0:	d101      	bne.n	f7c6 <mp_obj_exception_make_new+0x32>
        o_exc = &MP_STATE_VM(mp_emergency_exception_obj);
    f7c2:	4b19      	ldr	r3, [pc, #100]	; (f828 <mp_obj_exception_make_new+0x94>)
    f7c4:	617b      	str	r3, [r7, #20]
    }

    // Populate the exception object
    o_exc->base.type = type;
    f7c6:	697b      	ldr	r3, [r7, #20]
    f7c8:	68fa      	ldr	r2, [r7, #12]
    f7ca:	601a      	str	r2, [r3, #0]
    o_exc->traceback_data = NULL;
    f7cc:	697b      	ldr	r3, [r7, #20]
    f7ce:	2200      	movs	r2, #0
    f7d0:	609a      	str	r2, [r3, #8]

    mp_obj_tuple_t *o_tuple;
    if (n_args == 0) {
    f7d2:	68bb      	ldr	r3, [r7, #8]
    f7d4:	2b00      	cmp	r3, #0
    f7d6:	d102      	bne.n	f7de <mp_obj_exception_make_new+0x4a>
        // No args, can use the empty tuple straightaway
        o_tuple = (mp_obj_tuple_t*)&mp_const_empty_tuple_obj;
    f7d8:	4b14      	ldr	r3, [pc, #80]	; (f82c <mp_obj_exception_make_new+0x98>)
    f7da:	613b      	str	r3, [r7, #16]
    f7dc:	e01b      	b.n	f816 <mp_obj_exception_make_new+0x82>
    } else {
        // Try to allocate memory for the tuple containing the args
        o_tuple = m_new_obj_var_maybe(mp_obj_tuple_t, mp_obj_t, n_args);
    f7de:	68bb      	ldr	r3, [r7, #8]
    f7e0:	3302      	adds	r3, #2
    f7e2:	009b      	lsls	r3, r3, #2
    f7e4:	4618      	mov	r0, r3
    f7e6:	f7f0 fdb7 	bl	358 <m_malloc_maybe>
    f7ea:	6138      	str	r0, [r7, #16]
            o_tuple = (mp_obj_tuple_t*)
                ((uint8_t*)MP_STATE_VM(mp_emergency_exception_buf) + EMG_TRACEBACK_ALLOC * sizeof(size_t));
        }
        #endif

        if (o_tuple == NULL) {
    f7ec:	693b      	ldr	r3, [r7, #16]
    f7ee:	2b00      	cmp	r3, #0
    f7f0:	d102      	bne.n	f7f8 <mp_obj_exception_make_new+0x64>
            // No memory for a tuple, fallback to an empty tuple
            o_tuple = (mp_obj_tuple_t*)&mp_const_empty_tuple_obj;
    f7f2:	4b0e      	ldr	r3, [pc, #56]	; (f82c <mp_obj_exception_make_new+0x98>)
    f7f4:	613b      	str	r3, [r7, #16]
    f7f6:	e00e      	b.n	f816 <mp_obj_exception_make_new+0x82>
        } else {
            // Have memory for a tuple so populate it
            o_tuple->base.type = &mp_type_tuple;
    f7f8:	693b      	ldr	r3, [r7, #16]
    f7fa:	4a0d      	ldr	r2, [pc, #52]	; (f830 <mp_obj_exception_make_new+0x9c>)
    f7fc:	601a      	str	r2, [r3, #0]
            o_tuple->len = n_args;
    f7fe:	693b      	ldr	r3, [r7, #16]
    f800:	68ba      	ldr	r2, [r7, #8]
    f802:	605a      	str	r2, [r3, #4]
            memcpy(o_tuple->items, args, n_args * sizeof(mp_obj_t));
    f804:	693b      	ldr	r3, [r7, #16]
    f806:	f103 0008 	add.w	r0, r3, #8
    f80a:	68bb      	ldr	r3, [r7, #8]
    f80c:	009b      	lsls	r3, r3, #2
    f80e:	461a      	mov	r2, r3
    f810:	6839      	ldr	r1, [r7, #0]
    f812:	f00e fe8d 	bl	1e530 <memcpy>
        }
    }

    // Store the tuple of args in the exception object
    o_exc->args = o_tuple;
    f816:	697b      	ldr	r3, [r7, #20]
    f818:	693a      	ldr	r2, [r7, #16]
    f81a:	60da      	str	r2, [r3, #12]

    return MP_OBJ_FROM_PTR(o_exc);
    f81c:	697b      	ldr	r3, [r7, #20]
}
    f81e:	4618      	mov	r0, r3
    f820:	3718      	adds	r7, #24
    f822:	46bd      	mov	sp, r7
    f824:	bd80      	pop	{r7, pc}
    f826:	bf00      	nop
    f828:	2000125c 	.word	0x2000125c
    f82c:	00025a70 	.word	0x00025a70
    f830:	00025a34 	.word	0x00025a34

0000f834 <mp_obj_exception_get_value>:

// Get exception "value" - that is, first argument, or None
mp_obj_t mp_obj_exception_get_value(mp_obj_t self_in) {
    f834:	b480      	push	{r7}
    f836:	b085      	sub	sp, #20
    f838:	af00      	add	r7, sp, #0
    f83a:	6078      	str	r0, [r7, #4]
    mp_obj_exception_t *self = MP_OBJ_TO_PTR(self_in);
    f83c:	687b      	ldr	r3, [r7, #4]
    f83e:	60fb      	str	r3, [r7, #12]
    if (self->args->len == 0) {
    f840:	68fb      	ldr	r3, [r7, #12]
    f842:	68db      	ldr	r3, [r3, #12]
    f844:	685b      	ldr	r3, [r3, #4]
    f846:	2b00      	cmp	r3, #0
    f848:	d101      	bne.n	f84e <mp_obj_exception_get_value+0x1a>
        return mp_const_none;
    f84a:	4b05      	ldr	r3, [pc, #20]	; (f860 <mp_obj_exception_get_value+0x2c>)
    f84c:	e002      	b.n	f854 <mp_obj_exception_get_value+0x20>
    } else {
        return self->args->items[0];
    f84e:	68fb      	ldr	r3, [r7, #12]
    f850:	68db      	ldr	r3, [r3, #12]
    f852:	689b      	ldr	r3, [r3, #8]
    }
}
    f854:	4618      	mov	r0, r3
    f856:	3714      	adds	r7, #20
    f858:	46bd      	mov	sp, r7
    f85a:	f85d 7b04 	ldr.w	r7, [sp], #4
    f85e:	4770      	bx	lr
    f860:	0002511c 	.word	0x0002511c

0000f864 <mp_obj_exception_attr>:

void mp_obj_exception_attr(mp_obj_t self_in, qstr attr, mp_obj_t *dest) {
    f864:	b580      	push	{r7, lr}
    f866:	b086      	sub	sp, #24
    f868:	af00      	add	r7, sp, #0
    f86a:	60f8      	str	r0, [r7, #12]
    f86c:	60b9      	str	r1, [r7, #8]
    f86e:	607a      	str	r2, [r7, #4]
    mp_obj_exception_t *self = MP_OBJ_TO_PTR(self_in);
    f870:	68fb      	ldr	r3, [r7, #12]
    f872:	617b      	str	r3, [r7, #20]
    if (dest[0] != MP_OBJ_NULL) {
    f874:	687b      	ldr	r3, [r7, #4]
    f876:	681b      	ldr	r3, [r3, #0]
    f878:	2b00      	cmp	r3, #0
    f87a:	d00f      	beq.n	f89c <mp_obj_exception_attr+0x38>
        // store/delete attribute
        if (attr == MP_QSTR___traceback__ && dest[1] == mp_const_none) {
    f87c:	68bb      	ldr	r3, [r7, #8]
    f87e:	2b26      	cmp	r3, #38	; 0x26
    f880:	d124      	bne.n	f8cc <mp_obj_exception_attr+0x68>
    f882:	687b      	ldr	r3, [r7, #4]
    f884:	3304      	adds	r3, #4
    f886:	681b      	ldr	r3, [r3, #0]
    f888:	4a12      	ldr	r2, [pc, #72]	; (f8d4 <mp_obj_exception_attr+0x70>)
    f88a:	4293      	cmp	r3, r2
    f88c:	d11e      	bne.n	f8cc <mp_obj_exception_attr+0x68>
            // optimization of pre-allocating exception instance and raising
            // it repeatedly - this avoids memory allocation during raise.
            // However, uPy will keep adding traceback entries to such
            // exception instance, so before throwing it, traceback should
            // be cleared like above.
            self->traceback_len = 0;
    f88e:	697b      	ldr	r3, [r7, #20]
    f890:	2200      	movs	r2, #0
    f892:	80da      	strh	r2, [r3, #6]
            dest[0] = MP_OBJ_NULL; // indicate success
    f894:	687b      	ldr	r3, [r7, #4]
    f896:	2200      	movs	r2, #0
    f898:	601a      	str	r2, [r3, #0]
        }
        return;
    f89a:	e017      	b.n	f8cc <mp_obj_exception_attr+0x68>
    }
    if (attr == MP_QSTR_args) {
    f89c:	68bb      	ldr	r3, [r7, #8]
    f89e:	2bec      	cmp	r3, #236	; 0xec
    f8a0:	d104      	bne.n	f8ac <mp_obj_exception_attr+0x48>
        dest[0] = MP_OBJ_FROM_PTR(self->args);
    f8a2:	697b      	ldr	r3, [r7, #20]
    f8a4:	68da      	ldr	r2, [r3, #12]
    f8a6:	687b      	ldr	r3, [r7, #4]
    f8a8:	601a      	str	r2, [r3, #0]
    f8aa:	e010      	b.n	f8ce <mp_obj_exception_attr+0x6a>
    } else if (self->base.type == &mp_type_StopIteration && attr == MP_QSTR_value) {
    f8ac:	697b      	ldr	r3, [r7, #20]
    f8ae:	681b      	ldr	r3, [r3, #0]
    f8b0:	4a09      	ldr	r2, [pc, #36]	; (f8d8 <mp_obj_exception_attr+0x74>)
    f8b2:	4293      	cmp	r3, r2
    f8b4:	d10b      	bne.n	f8ce <mp_obj_exception_attr+0x6a>
    f8b6:	68bb      	ldr	r3, [r7, #8]
    f8b8:	f5b3 7fb8 	cmp.w	r3, #368	; 0x170
    f8bc:	d107      	bne.n	f8ce <mp_obj_exception_attr+0x6a>
        dest[0] = mp_obj_exception_get_value(self_in);
    f8be:	68f8      	ldr	r0, [r7, #12]
    f8c0:	f7ff ffb8 	bl	f834 <mp_obj_exception_get_value>
    f8c4:	4602      	mov	r2, r0
    f8c6:	687b      	ldr	r3, [r7, #4]
    f8c8:	601a      	str	r2, [r3, #0]
    f8ca:	e000      	b.n	f8ce <mp_obj_exception_attr+0x6a>
        return;
    f8cc:	bf00      	nop
    }
}
    f8ce:	3718      	adds	r7, #24
    f8d0:	46bd      	mov	sp, r7
    f8d2:	bd80      	pop	{r7, pc}
    f8d4:	0002511c 	.word	0x0002511c
    f8d8:	00023f3c 	.word	0x00023f3c

0000f8dc <mp_obj_new_exception>:
    MP_DEFINE_EXCEPTION(UnicodeWarning, Warning)
    MP_DEFINE_EXCEPTION(BytesWarning, Warning)
    MP_DEFINE_EXCEPTION(ResourceWarning, Warning)
    */

mp_obj_t mp_obj_new_exception(const mp_obj_type_t *exc_type) {
    f8dc:	b580      	push	{r7, lr}
    f8de:	b082      	sub	sp, #8
    f8e0:	af00      	add	r7, sp, #0
    f8e2:	6078      	str	r0, [r7, #4]
    return mp_obj_new_exception_args(exc_type, 0, NULL);
    f8e4:	2200      	movs	r2, #0
    f8e6:	2100      	movs	r1, #0
    f8e8:	6878      	ldr	r0, [r7, #4]
    f8ea:	f000 f815 	bl	f918 <mp_obj_new_exception_args>
    f8ee:	4603      	mov	r3, r0
}
    f8f0:	4618      	mov	r0, r3
    f8f2:	3708      	adds	r7, #8
    f8f4:	46bd      	mov	sp, r7
    f8f6:	bd80      	pop	{r7, pc}

0000f8f8 <mp_obj_new_exception_arg1>:

// "Optimized" version for common(?) case of having 1 exception arg
mp_obj_t mp_obj_new_exception_arg1(const mp_obj_type_t *exc_type, mp_obj_t arg) {
    f8f8:	b580      	push	{r7, lr}
    f8fa:	b082      	sub	sp, #8
    f8fc:	af00      	add	r7, sp, #0
    f8fe:	6078      	str	r0, [r7, #4]
    f900:	6039      	str	r1, [r7, #0]
    return mp_obj_new_exception_args(exc_type, 1, &arg);
    f902:	463b      	mov	r3, r7
    f904:	461a      	mov	r2, r3
    f906:	2101      	movs	r1, #1
    f908:	6878      	ldr	r0, [r7, #4]
    f90a:	f000 f805 	bl	f918 <mp_obj_new_exception_args>
    f90e:	4603      	mov	r3, r0
}
    f910:	4618      	mov	r0, r3
    f912:	3708      	adds	r7, #8
    f914:	46bd      	mov	sp, r7
    f916:	bd80      	pop	{r7, pc}

0000f918 <mp_obj_new_exception_args>:

mp_obj_t mp_obj_new_exception_args(const mp_obj_type_t *exc_type, size_t n_args, const mp_obj_t *args) {
    f918:	b590      	push	{r4, r7, lr}
    f91a:	b085      	sub	sp, #20
    f91c:	af00      	add	r7, sp, #0
    f91e:	60f8      	str	r0, [r7, #12]
    f920:	60b9      	str	r1, [r7, #8]
    f922:	607a      	str	r2, [r7, #4]
    assert(exc_type->make_new == mp_obj_exception_make_new);
    f924:	68fb      	ldr	r3, [r7, #12]
    f926:	68db      	ldr	r3, [r3, #12]
    f928:	4a0a      	ldr	r2, [pc, #40]	; (f954 <mp_obj_new_exception_args+0x3c>)
    f92a:	4293      	cmp	r3, r2
    f92c:	d006      	beq.n	f93c <mp_obj_new_exception_args+0x24>
    f92e:	4b0a      	ldr	r3, [pc, #40]	; (f958 <mp_obj_new_exception_args+0x40>)
    f930:	4a0a      	ldr	r2, [pc, #40]	; (f95c <mp_obj_new_exception_args+0x44>)
    f932:	f240 1137 	movw	r1, #311	; 0x137
    f936:	480a      	ldr	r0, [pc, #40]	; (f960 <mp_obj_new_exception_args+0x48>)
    f938:	f00d fad2 	bl	1cee0 <__assert_func>
    return exc_type->make_new(exc_type, n_args, 0, args);
    f93c:	68fb      	ldr	r3, [r7, #12]
    f93e:	68dc      	ldr	r4, [r3, #12]
    f940:	687b      	ldr	r3, [r7, #4]
    f942:	2200      	movs	r2, #0
    f944:	68b9      	ldr	r1, [r7, #8]
    f946:	68f8      	ldr	r0, [r7, #12]
    f948:	47a0      	blx	r4
    f94a:	4603      	mov	r3, r0
}
    f94c:	4618      	mov	r0, r3
    f94e:	3714      	adds	r7, #20
    f950:	46bd      	mov	sp, r7
    f952:	bd90      	pop	{r4, r7, pc}
    f954:	0000f795 	.word	0x0000f795
    f958:	000243ec 	.word	0x000243ec
    f95c:	00024468 	.word	0x00024468
    f960:	0002441c 	.word	0x0002441c

0000f964 <mp_obj_new_exception_msg>:

mp_obj_t mp_obj_new_exception_msg(const mp_obj_type_t *exc_type, const char *msg) {
    f964:	b580      	push	{r7, lr}
    f966:	b082      	sub	sp, #8
    f968:	af00      	add	r7, sp, #0
    f96a:	6078      	str	r0, [r7, #4]
    f96c:	6039      	str	r1, [r7, #0]
    return mp_obj_new_exception_msg_varg(exc_type, msg);
    f96e:	6839      	ldr	r1, [r7, #0]
    f970:	6878      	ldr	r0, [r7, #4]
    f972:	f000 f857 	bl	fa24 <mp_obj_new_exception_msg_varg>
    f976:	4603      	mov	r3, r0
}
    f978:	4618      	mov	r0, r3
    f97a:	3708      	adds	r7, #8
    f97c:	46bd      	mov	sp, r7
    f97e:	bd80      	pop	{r7, pc}

0000f980 <exc_add_strn>:
    size_t alloc;
    size_t len;
    byte *buf;
};

STATIC void exc_add_strn(void *data, const char *str, size_t len) {
    f980:	b580      	push	{r7, lr}
    f982:	b088      	sub	sp, #32
    f984:	af00      	add	r7, sp, #0
    f986:	60f8      	str	r0, [r7, #12]
    f988:	60b9      	str	r1, [r7, #8]
    f98a:	607a      	str	r2, [r7, #4]
    struct _exc_printer_t *pr = data;
    f98c:	68fb      	ldr	r3, [r7, #12]
    f98e:	61fb      	str	r3, [r7, #28]
    if (pr->len + len >= pr->alloc) {
    f990:	69fb      	ldr	r3, [r7, #28]
    f992:	689a      	ldr	r2, [r3, #8]
    f994:	687b      	ldr	r3, [r7, #4]
    f996:	441a      	add	r2, r3
    f998:	69fb      	ldr	r3, [r7, #28]
    f99a:	685b      	ldr	r3, [r3, #4]
    f99c:	429a      	cmp	r2, r3
    f99e:	d32d      	bcc.n	f9fc <exc_add_strn+0x7c>
        // Not enough room for data plus a null byte so try to grow the buffer
        if (pr->allow_realloc) {
    f9a0:	69fb      	ldr	r3, [r7, #28]
    f9a2:	781b      	ldrb	r3, [r3, #0]
    f9a4:	2b00      	cmp	r3, #0
    f9a6:	d022      	beq.n	f9ee <exc_add_strn+0x6e>
            size_t new_alloc = pr->alloc + len + 16;
    f9a8:	69fb      	ldr	r3, [r7, #28]
    f9aa:	685a      	ldr	r2, [r3, #4]
    f9ac:	687b      	ldr	r3, [r7, #4]
    f9ae:	4413      	add	r3, r2
    f9b0:	3310      	adds	r3, #16
    f9b2:	61bb      	str	r3, [r7, #24]
            byte *new_buf = m_renew_maybe(byte, pr->buf, pr->alloc, new_alloc, true);
    f9b4:	69fb      	ldr	r3, [r7, #28]
    f9b6:	68db      	ldr	r3, [r3, #12]
    f9b8:	2201      	movs	r2, #1
    f9ba:	69b9      	ldr	r1, [r7, #24]
    f9bc:	4618      	mov	r0, r3
    f9be:	f7f0 fd0f 	bl	3e0 <m_realloc_maybe>
    f9c2:	6178      	str	r0, [r7, #20]
            if (new_buf == NULL) {
    f9c4:	697b      	ldr	r3, [r7, #20]
    f9c6:	2b00      	cmp	r3, #0
    f9c8:	d10a      	bne.n	f9e0 <exc_add_strn+0x60>
                pr->allow_realloc = false;
    f9ca:	69fb      	ldr	r3, [r7, #28]
    f9cc:	2200      	movs	r2, #0
    f9ce:	701a      	strb	r2, [r3, #0]
                len = pr->alloc - pr->len - 1;
    f9d0:	69fb      	ldr	r3, [r7, #28]
    f9d2:	685a      	ldr	r2, [r3, #4]
    f9d4:	69fb      	ldr	r3, [r7, #28]
    f9d6:	689b      	ldr	r3, [r3, #8]
    f9d8:	1ad3      	subs	r3, r2, r3
    f9da:	3b01      	subs	r3, #1
    f9dc:	607b      	str	r3, [r7, #4]
    f9de:	e00d      	b.n	f9fc <exc_add_strn+0x7c>
            } else {
                pr->alloc = new_alloc;
    f9e0:	69fb      	ldr	r3, [r7, #28]
    f9e2:	69ba      	ldr	r2, [r7, #24]
    f9e4:	605a      	str	r2, [r3, #4]
                pr->buf = new_buf;
    f9e6:	69fb      	ldr	r3, [r7, #28]
    f9e8:	697a      	ldr	r2, [r7, #20]
    f9ea:	60da      	str	r2, [r3, #12]
    f9ec:	e006      	b.n	f9fc <exc_add_strn+0x7c>
            }
        } else {
            len = pr->alloc - pr->len - 1;
    f9ee:	69fb      	ldr	r3, [r7, #28]
    f9f0:	685a      	ldr	r2, [r3, #4]
    f9f2:	69fb      	ldr	r3, [r7, #28]
    f9f4:	689b      	ldr	r3, [r3, #8]
    f9f6:	1ad3      	subs	r3, r2, r3
    f9f8:	3b01      	subs	r3, #1
    f9fa:	607b      	str	r3, [r7, #4]
        }
    }
    memcpy(pr->buf + pr->len, str, len);
    f9fc:	69fb      	ldr	r3, [r7, #28]
    f9fe:	68da      	ldr	r2, [r3, #12]
    fa00:	69fb      	ldr	r3, [r7, #28]
    fa02:	689b      	ldr	r3, [r3, #8]
    fa04:	4413      	add	r3, r2
    fa06:	687a      	ldr	r2, [r7, #4]
    fa08:	68b9      	ldr	r1, [r7, #8]
    fa0a:	4618      	mov	r0, r3
    fa0c:	f00e fd90 	bl	1e530 <memcpy>
    pr->len += len;
    fa10:	69fb      	ldr	r3, [r7, #28]
    fa12:	689a      	ldr	r2, [r3, #8]
    fa14:	687b      	ldr	r3, [r7, #4]
    fa16:	441a      	add	r2, r3
    fa18:	69fb      	ldr	r3, [r7, #28]
    fa1a:	609a      	str	r2, [r3, #8]
}
    fa1c:	bf00      	nop
    fa1e:	3720      	adds	r7, #32
    fa20:	46bd      	mov	sp, r7
    fa22:	bd80      	pop	{r7, pc}

0000fa24 <mp_obj_new_exception_msg_varg>:

mp_obj_t mp_obj_new_exception_msg_varg(const mp_obj_type_t *exc_type, const char *fmt, ...) {
    fa24:	b40e      	push	{r1, r2, r3}
    fa26:	b580      	push	{r7, lr}
    fa28:	b08f      	sub	sp, #60	; 0x3c
    fa2a:	af00      	add	r7, sp, #0
    fa2c:	6078      	str	r0, [r7, #4]
    assert(fmt != NULL);
    fa2e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    fa30:	2b00      	cmp	r3, #0
    fa32:	d106      	bne.n	fa42 <mp_obj_new_exception_msg_varg+0x1e>
    fa34:	4b43      	ldr	r3, [pc, #268]	; (fb44 <mp_obj_new_exception_msg_varg+0x120>)
    fa36:	4a44      	ldr	r2, [pc, #272]	; (fb48 <mp_obj_new_exception_msg_varg+0x124>)
    fa38:	f240 1161 	movw	r1, #353	; 0x161
    fa3c:	4843      	ldr	r0, [pc, #268]	; (fb4c <mp_obj_new_exception_msg_varg+0x128>)
    fa3e:	f00d fa4f 	bl	1cee0 <__assert_func>

    // Check that the given type is an exception type
    assert(exc_type->make_new == mp_obj_exception_make_new);
    fa42:	687b      	ldr	r3, [r7, #4]
    fa44:	68db      	ldr	r3, [r3, #12]
    fa46:	4a42      	ldr	r2, [pc, #264]	; (fb50 <mp_obj_new_exception_msg_varg+0x12c>)
    fa48:	4293      	cmp	r3, r2
    fa4a:	d006      	beq.n	fa5a <mp_obj_new_exception_msg_varg+0x36>
    fa4c:	4b41      	ldr	r3, [pc, #260]	; (fb54 <mp_obj_new_exception_msg_varg+0x130>)
    fa4e:	4a3e      	ldr	r2, [pc, #248]	; (fb48 <mp_obj_new_exception_msg_varg+0x124>)
    fa50:	f44f 71b2 	mov.w	r1, #356	; 0x164
    fa54:	483d      	ldr	r0, [pc, #244]	; (fb4c <mp_obj_new_exception_msg_varg+0x128>)
    fa56:	f00d fa43 	bl	1cee0 <__assert_func>

    // Try to allocate memory for the message
    mp_obj_str_t *o_str = m_new_obj_maybe(mp_obj_str_t);
    fa5a:	2010      	movs	r0, #16
    fa5c:	f7f0 fc7c 	bl	358 <m_malloc_maybe>
    fa60:	6378      	str	r0, [r7, #52]	; 0x34
    size_t o_str_alloc = strlen(fmt) + 1;
    fa62:	6c78      	ldr	r0, [r7, #68]	; 0x44
    fa64:	f00e fe9a 	bl	1e79c <strlen>
    fa68:	4603      	mov	r3, r0
    fa6a:	3301      	adds	r3, #1
    fa6c:	633b      	str	r3, [r7, #48]	; 0x30
    byte *o_str_buf = m_new_maybe(byte, o_str_alloc);
    fa6e:	6b38      	ldr	r0, [r7, #48]	; 0x30
    fa70:	f7f0 fc72 	bl	358 <m_malloc_maybe>
    fa74:	62f8      	str	r0, [r7, #44]	; 0x2c

    bool used_emg_buf = false;
    fa76:	2300      	movs	r3, #0
    fa78:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        o_str_alloc = (uint8_t*)MP_STATE_VM(mp_emergency_exception_buf)
            + mp_emergency_exception_buf_size - o_str_buf;
    }
    #endif

    if (o_str == NULL) {
    fa7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    fa7e:	2b00      	cmp	r3, #0
    fa80:	d107      	bne.n	fa92 <mp_obj_new_exception_msg_varg+0x6e>
        // No memory for the string object so create the exception with no args
        return mp_obj_exception_make_new(exc_type, 0, 0, NULL);
    fa82:	2300      	movs	r3, #0
    fa84:	2200      	movs	r2, #0
    fa86:	2100      	movs	r1, #0
    fa88:	6878      	ldr	r0, [r7, #4]
    fa8a:	f7ff fe83 	bl	f794 <mp_obj_exception_make_new>
    fa8e:	4603      	mov	r3, r0
    fa90:	e050      	b.n	fb34 <mp_obj_new_exception_msg_varg+0x110>
    }

    if (o_str_buf == NULL) {
    fa92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    fa94:	2b00      	cmp	r3, #0
    fa96:	d107      	bne.n	faa8 <mp_obj_new_exception_msg_varg+0x84>
        // No memory for the string buffer: assume that the fmt string is in ROM
        // and use that data as the data of the string
        o_str->len = o_str_alloc - 1; // will be equal to strlen(fmt)
    fa98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    fa9a:	1e5a      	subs	r2, r3, #1
    fa9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    fa9e:	609a      	str	r2, [r3, #8]
        o_str->data = (const byte*)fmt;
    faa0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    faa2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    faa4:	60da      	str	r2, [r3, #12]
    faa6:	e02d      	b.n	fb04 <mp_obj_new_exception_msg_varg+0xe0>
    } else {
        // We have some memory to format the string
        struct _exc_printer_t exc_pr = {!used_emg_buf, o_str_alloc, 0, o_str_buf};
    faa8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
    faac:	2b00      	cmp	r3, #0
    faae:	bf14      	ite	ne
    fab0:	2301      	movne	r3, #1
    fab2:	2300      	moveq	r3, #0
    fab4:	b2db      	uxtb	r3, r3
    fab6:	f083 0301 	eor.w	r3, r3, #1
    faba:	b2db      	uxtb	r3, r3
    fabc:	f003 0301 	and.w	r3, r3, #1
    fac0:	b2db      	uxtb	r3, r3
    fac2:	753b      	strb	r3, [r7, #20]
    fac4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    fac6:	61bb      	str	r3, [r7, #24]
    fac8:	2300      	movs	r3, #0
    faca:	61fb      	str	r3, [r7, #28]
    facc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    face:	623b      	str	r3, [r7, #32]
        mp_print_t print = {&exc_pr, exc_add_strn};
    fad0:	f107 0314 	add.w	r3, r7, #20
    fad4:	60fb      	str	r3, [r7, #12]
    fad6:	4b20      	ldr	r3, [pc, #128]	; (fb58 <mp_obj_new_exception_msg_varg+0x134>)
    fad8:	613b      	str	r3, [r7, #16]
        va_list ap;
        va_start(ap, fmt);
    fada:	f107 0348 	add.w	r3, r7, #72	; 0x48
    fade:	60bb      	str	r3, [r7, #8]
        mp_vprintf(&print, fmt, ap);
    fae0:	f107 030c 	add.w	r3, r7, #12
    fae4:	68ba      	ldr	r2, [r7, #8]
    fae6:	6c79      	ldr	r1, [r7, #68]	; 0x44
    fae8:	4618      	mov	r0, r3
    faea:	f7f2 fad7 	bl	209c <mp_vprintf>
        va_end(ap);
        exc_pr.buf[exc_pr.len] = '\0';
    faee:	6a3a      	ldr	r2, [r7, #32]
    faf0:	69fb      	ldr	r3, [r7, #28]
    faf2:	4413      	add	r3, r2
    faf4:	2200      	movs	r2, #0
    faf6:	701a      	strb	r2, [r3, #0]
        o_str->len = exc_pr.len;
    faf8:	69fa      	ldr	r2, [r7, #28]
    fafa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    fafc:	609a      	str	r2, [r3, #8]
        o_str->data = exc_pr.buf;
    fafe:	6a3a      	ldr	r2, [r7, #32]
    fb00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    fb02:	60da      	str	r2, [r3, #12]
    }

    // Create the string object and call mp_obj_exception_make_new to create the exception
    o_str->base.type = &mp_type_str;
    fb04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    fb06:	4a15      	ldr	r2, [pc, #84]	; (fb5c <mp_obj_new_exception_msg_varg+0x138>)
    fb08:	601a      	str	r2, [r3, #0]
    o_str->hash = qstr_compute_hash(o_str->data, o_str->len);
    fb0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    fb0c:	68da      	ldr	r2, [r3, #12]
    fb0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    fb10:	689b      	ldr	r3, [r3, #8]
    fb12:	4619      	mov	r1, r3
    fb14:	4610      	mov	r0, r2
    fb16:	f7f1 fa53 	bl	fc0 <qstr_compute_hash>
    fb1a:	4602      	mov	r2, r0
    fb1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    fb1e:	605a      	str	r2, [r3, #4]
    mp_obj_t arg = MP_OBJ_FROM_PTR(o_str);
    fb20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    fb22:	627b      	str	r3, [r7, #36]	; 0x24
    return mp_obj_exception_make_new(exc_type, 1, 0, &arg);
    fb24:	f107 0324 	add.w	r3, r7, #36	; 0x24
    fb28:	2200      	movs	r2, #0
    fb2a:	2101      	movs	r1, #1
    fb2c:	6878      	ldr	r0, [r7, #4]
    fb2e:	f7ff fe31 	bl	f794 <mp_obj_exception_make_new>
    fb32:	4603      	mov	r3, r0
}
    fb34:	4618      	mov	r0, r3
    fb36:	373c      	adds	r7, #60	; 0x3c
    fb38:	46bd      	mov	sp, r7
    fb3a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
    fb3e:	b003      	add	sp, #12
    fb40:	4770      	bx	lr
    fb42:	bf00      	nop
    fb44:	00024434 	.word	0x00024434
    fb48:	00024484 	.word	0x00024484
    fb4c:	0002441c 	.word	0x0002441c
    fb50:	0000f795 	.word	0x0000f795
    fb54:	000243ec 	.word	0x000243ec
    fb58:	0000f981 	.word	0x0000f981
    fb5c:	000257b0 	.word	0x000257b0

0000fb60 <mp_obj_is_exception_type>:

// return true if the given object is an exception type
bool mp_obj_is_exception_type(mp_obj_t self_in) {
    fb60:	b580      	push	{r7, lr}
    fb62:	b084      	sub	sp, #16
    fb64:	af00      	add	r7, sp, #0
    fb66:	6078      	str	r0, [r7, #4]
    if (MP_OBJ_IS_TYPE(self_in, &mp_type_type)) {
    fb68:	6878      	ldr	r0, [r7, #4]
    fb6a:	f7ff fd83 	bl	f674 <MP_OBJ_IS_OBJ>
    fb6e:	4603      	mov	r3, r0
    fb70:	2b00      	cmp	r3, #0
    fb72:	d00d      	beq.n	fb90 <mp_obj_is_exception_type+0x30>
    fb74:	687b      	ldr	r3, [r7, #4]
    fb76:	681b      	ldr	r3, [r3, #0]
    fb78:	4a0a      	ldr	r2, [pc, #40]	; (fba4 <mp_obj_is_exception_type+0x44>)
    fb7a:	4293      	cmp	r3, r2
    fb7c:	d108      	bne.n	fb90 <mp_obj_is_exception_type+0x30>
        // optimisation when self_in is a builtin exception
        mp_obj_type_t *self = MP_OBJ_TO_PTR(self_in);
    fb7e:	687b      	ldr	r3, [r7, #4]
    fb80:	60fb      	str	r3, [r7, #12]
        if (self->make_new == mp_obj_exception_make_new) {
    fb82:	68fb      	ldr	r3, [r7, #12]
    fb84:	68db      	ldr	r3, [r3, #12]
    fb86:	4a08      	ldr	r2, [pc, #32]	; (fba8 <mp_obj_is_exception_type+0x48>)
    fb88:	4293      	cmp	r3, r2
    fb8a:	d101      	bne.n	fb90 <mp_obj_is_exception_type+0x30>
            return true;
    fb8c:	2301      	movs	r3, #1
    fb8e:	e004      	b.n	fb9a <mp_obj_is_exception_type+0x3a>
        }
    }
    return mp_obj_is_subclass_fast(self_in, MP_OBJ_FROM_PTR(&mp_type_BaseException));
    fb90:	4906      	ldr	r1, [pc, #24]	; (fbac <mp_obj_is_exception_type+0x4c>)
    fb92:	6878      	ldr	r0, [r7, #4]
    fb94:	f007 fe66 	bl	17864 <mp_obj_is_subclass_fast>
    fb98:	4603      	mov	r3, r0
}
    fb9a:	4618      	mov	r0, r3
    fb9c:	3710      	adds	r7, #16
    fb9e:	46bd      	mov	sp, r7
    fba0:	bd80      	pop	{r7, pc}
    fba2:	bf00      	nop
    fba4:	00025df4 	.word	0x00025df4
    fba8:	0000f795 	.word	0x0000f795
    fbac:	00023e10 	.word	0x00023e10

0000fbb0 <mp_obj_is_exception_instance>:

// return true if the given object is an instance of an exception type
bool mp_obj_is_exception_instance(mp_obj_t self_in) {
    fbb0:	b580      	push	{r7, lr}
    fbb2:	b082      	sub	sp, #8
    fbb4:	af00      	add	r7, sp, #0
    fbb6:	6078      	str	r0, [r7, #4]
    return mp_obj_is_exception_type(MP_OBJ_FROM_PTR(mp_obj_get_type(self_in)));
    fbb8:	6878      	ldr	r0, [r7, #4]
    fbba:	f7fe f84f 	bl	dc5c <mp_obj_get_type>
    fbbe:	4603      	mov	r3, r0
    fbc0:	4618      	mov	r0, r3
    fbc2:	f7ff ffcd 	bl	fb60 <mp_obj_is_exception_type>
    fbc6:	4603      	mov	r3, r0
}
    fbc8:	4618      	mov	r0, r3
    fbca:	3708      	adds	r7, #8
    fbcc:	46bd      	mov	sp, r7
    fbce:	bd80      	pop	{r7, pc}

0000fbd0 <mp_obj_exception_match>:

// Return true if exception (type or instance) is a subclass of given
// exception type.  Assumes exc_type is a subclass of BaseException, as
// defined by mp_obj_is_exception_type(exc_type).
bool mp_obj_exception_match(mp_obj_t exc, mp_const_obj_t exc_type) {
    fbd0:	b580      	push	{r7, lr}
    fbd2:	b082      	sub	sp, #8
    fbd4:	af00      	add	r7, sp, #0
    fbd6:	6078      	str	r0, [r7, #4]
    fbd8:	6039      	str	r1, [r7, #0]
    // if exc is an instance of an exception, then extract and use its type
    if (mp_obj_is_exception_instance(exc)) {
    fbda:	6878      	ldr	r0, [r7, #4]
    fbdc:	f7ff ffe8 	bl	fbb0 <mp_obj_is_exception_instance>
    fbe0:	4603      	mov	r3, r0
    fbe2:	2b00      	cmp	r3, #0
    fbe4:	d003      	beq.n	fbee <mp_obj_exception_match+0x1e>
        exc = MP_OBJ_FROM_PTR(mp_obj_get_type(exc));
    fbe6:	6878      	ldr	r0, [r7, #4]
    fbe8:	f7fe f838 	bl	dc5c <mp_obj_get_type>
    fbec:	6078      	str	r0, [r7, #4]
    }
    return mp_obj_is_subclass_fast(exc, exc_type);
    fbee:	6839      	ldr	r1, [r7, #0]
    fbf0:	6878      	ldr	r0, [r7, #4]
    fbf2:	f007 fe37 	bl	17864 <mp_obj_is_subclass_fast>
    fbf6:	4603      	mov	r3, r0
}
    fbf8:	4618      	mov	r0, r3
    fbfa:	3708      	adds	r7, #8
    fbfc:	46bd      	mov	sp, r7
    fbfe:	bd80      	pop	{r7, pc}

0000fc00 <mp_obj_exception_clear_traceback>:
        self = MP_OBJ_TO_PTR(self_in); \
    } else { \
        self = MP_OBJ_TO_PTR(((mp_obj_instance_t*)MP_OBJ_TO_PTR(self_in))->subobj[0]); \
    }

void mp_obj_exception_clear_traceback(mp_obj_t self_in) {
    fc00:	b580      	push	{r7, lr}
    fc02:	b084      	sub	sp, #16
    fc04:	af00      	add	r7, sp, #0
    fc06:	6078      	str	r0, [r7, #4]
    GET_NATIVE_EXCEPTION(self, self_in);
    fc08:	6878      	ldr	r0, [r7, #4]
    fc0a:	f7ff ffd1 	bl	fbb0 <mp_obj_is_exception_instance>
    fc0e:	4603      	mov	r3, r0
    fc10:	2b00      	cmp	r3, #0
    fc12:	d106      	bne.n	fc22 <mp_obj_exception_clear_traceback+0x22>
    fc14:	4b0d      	ldr	r3, [pc, #52]	; (fc4c <mp_obj_exception_clear_traceback+0x4c>)
    fc16:	4a0e      	ldr	r2, [pc, #56]	; (fc50 <mp_obj_exception_clear_traceback+0x50>)
    fc18:	f240 11c3 	movw	r1, #451	; 0x1c3
    fc1c:	480d      	ldr	r0, [pc, #52]	; (fc54 <mp_obj_exception_clear_traceback+0x54>)
    fc1e:	f00d f95f 	bl	1cee0 <__assert_func>
    fc22:	6878      	ldr	r0, [r7, #4]
    fc24:	f7fe f81a 	bl	dc5c <mp_obj_get_type>
    fc28:	4603      	mov	r3, r0
    fc2a:	68db      	ldr	r3, [r3, #12]
    fc2c:	4a0a      	ldr	r2, [pc, #40]	; (fc58 <mp_obj_exception_clear_traceback+0x58>)
    fc2e:	4293      	cmp	r3, r2
    fc30:	d102      	bne.n	fc38 <mp_obj_exception_clear_traceback+0x38>
    fc32:	687b      	ldr	r3, [r7, #4]
    fc34:	60fb      	str	r3, [r7, #12]
    fc36:	e002      	b.n	fc3e <mp_obj_exception_clear_traceback+0x3e>
    fc38:	687b      	ldr	r3, [r7, #4]
    fc3a:	691b      	ldr	r3, [r3, #16]
    fc3c:	60fb      	str	r3, [r7, #12]
    // just set the traceback to the null object
    // we don't want to call any memory management functions here
    self->traceback_data = NULL;
    fc3e:	68fb      	ldr	r3, [r7, #12]
    fc40:	2200      	movs	r2, #0
    fc42:	609a      	str	r2, [r3, #8]
}
    fc44:	bf00      	nop
    fc46:	3710      	adds	r7, #16
    fc48:	46bd      	mov	sp, r7
    fc4a:	bd80      	pop	{r7, pc}
    fc4c:	00024440 	.word	0x00024440
    fc50:	000244a4 	.word	0x000244a4
    fc54:	0002441c 	.word	0x0002441c
    fc58:	0000f795 	.word	0x0000f795

0000fc5c <mp_obj_exception_add_traceback>:

void mp_obj_exception_add_traceback(mp_obj_t self_in, qstr file, size_t line, qstr block) {
    fc5c:	b580      	push	{r7, lr}
    fc5e:	b088      	sub	sp, #32
    fc60:	af00      	add	r7, sp, #0
    fc62:	60f8      	str	r0, [r7, #12]
    fc64:	60b9      	str	r1, [r7, #8]
    fc66:	607a      	str	r2, [r7, #4]
    fc68:	603b      	str	r3, [r7, #0]
    GET_NATIVE_EXCEPTION(self, self_in);
    fc6a:	68f8      	ldr	r0, [r7, #12]
    fc6c:	f7ff ffa0 	bl	fbb0 <mp_obj_is_exception_instance>
    fc70:	4603      	mov	r3, r0
    fc72:	2b00      	cmp	r3, #0
    fc74:	d106      	bne.n	fc84 <mp_obj_exception_add_traceback+0x28>
    fc76:	4b33      	ldr	r3, [pc, #204]	; (fd44 <mp_obj_exception_add_traceback+0xe8>)
    fc78:	4a33      	ldr	r2, [pc, #204]	; (fd48 <mp_obj_exception_add_traceback+0xec>)
    fc7a:	f44f 71e5 	mov.w	r1, #458	; 0x1ca
    fc7e:	4833      	ldr	r0, [pc, #204]	; (fd4c <mp_obj_exception_add_traceback+0xf0>)
    fc80:	f00d f92e 	bl	1cee0 <__assert_func>
    fc84:	68f8      	ldr	r0, [r7, #12]
    fc86:	f7fd ffe9 	bl	dc5c <mp_obj_get_type>
    fc8a:	4603      	mov	r3, r0
    fc8c:	68db      	ldr	r3, [r3, #12]
    fc8e:	4a30      	ldr	r2, [pc, #192]	; (fd50 <mp_obj_exception_add_traceback+0xf4>)
    fc90:	4293      	cmp	r3, r2
    fc92:	d102      	bne.n	fc9a <mp_obj_exception_add_traceback+0x3e>
    fc94:	68fb      	ldr	r3, [r7, #12]
    fc96:	61fb      	str	r3, [r7, #28]
    fc98:	e002      	b.n	fca0 <mp_obj_exception_add_traceback+0x44>
    fc9a:	68fb      	ldr	r3, [r7, #12]
    fc9c:	691b      	ldr	r3, [r3, #16]
    fc9e:	61fb      	str	r3, [r7, #28]

    // append this traceback info to traceback data
    // if memory allocation fails (eg because gc is locked), just return

    if (self->traceback_data == NULL) {
    fca0:	69fb      	ldr	r3, [r7, #28]
    fca2:	689b      	ldr	r3, [r3, #8]
    fca4:	2b00      	cmp	r3, #0
    fca6:	d110      	bne.n	fcca <mp_obj_exception_add_traceback+0x6e>
        self->traceback_data = m_new_maybe(size_t, TRACEBACK_ENTRY_LEN);
    fca8:	200c      	movs	r0, #12
    fcaa:	f7f0 fb55 	bl	358 <m_malloc_maybe>
    fcae:	4602      	mov	r2, r0
    fcb0:	69fb      	ldr	r3, [r7, #28]
    fcb2:	609a      	str	r2, [r3, #8]
        if (self->traceback_data == NULL) {
    fcb4:	69fb      	ldr	r3, [r7, #28]
    fcb6:	689b      	ldr	r3, [r3, #8]
    fcb8:	2b00      	cmp	r3, #0
    fcba:	d03d      	beq.n	fd38 <mp_obj_exception_add_traceback+0xdc>
            // Can't allocate
            return;
            #endif
        } else {
            // Allocated the traceback data on the heap
            self->traceback_alloc = TRACEBACK_ENTRY_LEN;
    fcbc:	69fb      	ldr	r3, [r7, #28]
    fcbe:	2203      	movs	r2, #3
    fcc0:	809a      	strh	r2, [r3, #4]
        }
        self->traceback_len = 0;
    fcc2:	69fb      	ldr	r3, [r7, #28]
    fcc4:	2200      	movs	r2, #0
    fcc6:	80da      	strh	r2, [r3, #6]
    fcc8:	e01d      	b.n	fd06 <mp_obj_exception_add_traceback+0xaa>
    } else if (self->traceback_len + TRACEBACK_ENTRY_LEN > self->traceback_alloc) {
    fcca:	69fb      	ldr	r3, [r7, #28]
    fccc:	88db      	ldrh	r3, [r3, #6]
    fcce:	3303      	adds	r3, #3
    fcd0:	69fa      	ldr	r2, [r7, #28]
    fcd2:	8892      	ldrh	r2, [r2, #4]
    fcd4:	4293      	cmp	r3, r2
    fcd6:	dd16      	ble.n	fd06 <mp_obj_exception_add_traceback+0xaa>
            // Can't resize the emergency buffer
            return;
        }
        #endif
        // be conservative with growing traceback data
        size_t *tb_data = m_renew_maybe(size_t, self->traceback_data, self->traceback_alloc,
    fcd8:	69fb      	ldr	r3, [r7, #28]
    fcda:	6898      	ldr	r0, [r3, #8]
    fcdc:	69fb      	ldr	r3, [r7, #28]
    fcde:	889b      	ldrh	r3, [r3, #4]
    fce0:	3303      	adds	r3, #3
    fce2:	009b      	lsls	r3, r3, #2
    fce4:	2201      	movs	r2, #1
    fce6:	4619      	mov	r1, r3
    fce8:	f7f0 fb7a 	bl	3e0 <m_realloc_maybe>
    fcec:	61b8      	str	r0, [r7, #24]
            self->traceback_alloc + TRACEBACK_ENTRY_LEN, true);
        if (tb_data == NULL) {
    fcee:	69bb      	ldr	r3, [r7, #24]
    fcf0:	2b00      	cmp	r3, #0
    fcf2:	d023      	beq.n	fd3c <mp_obj_exception_add_traceback+0xe0>
            return;
        }
        self->traceback_data = tb_data;
    fcf4:	69fb      	ldr	r3, [r7, #28]
    fcf6:	69ba      	ldr	r2, [r7, #24]
    fcf8:	609a      	str	r2, [r3, #8]
        self->traceback_alloc += TRACEBACK_ENTRY_LEN;
    fcfa:	69fb      	ldr	r3, [r7, #28]
    fcfc:	889b      	ldrh	r3, [r3, #4]
    fcfe:	3303      	adds	r3, #3
    fd00:	b29a      	uxth	r2, r3
    fd02:	69fb      	ldr	r3, [r7, #28]
    fd04:	809a      	strh	r2, [r3, #4]
    }

    size_t *tb_data = &self->traceback_data[self->traceback_len];
    fd06:	69fb      	ldr	r3, [r7, #28]
    fd08:	689a      	ldr	r2, [r3, #8]
    fd0a:	69fb      	ldr	r3, [r7, #28]
    fd0c:	88db      	ldrh	r3, [r3, #6]
    fd0e:	009b      	lsls	r3, r3, #2
    fd10:	4413      	add	r3, r2
    fd12:	617b      	str	r3, [r7, #20]
    self->traceback_len += TRACEBACK_ENTRY_LEN;
    fd14:	69fb      	ldr	r3, [r7, #28]
    fd16:	88db      	ldrh	r3, [r3, #6]
    fd18:	3303      	adds	r3, #3
    fd1a:	b29a      	uxth	r2, r3
    fd1c:	69fb      	ldr	r3, [r7, #28]
    fd1e:	80da      	strh	r2, [r3, #6]
    tb_data[0] = file;
    fd20:	697b      	ldr	r3, [r7, #20]
    fd22:	68ba      	ldr	r2, [r7, #8]
    fd24:	601a      	str	r2, [r3, #0]
    tb_data[1] = line;
    fd26:	697b      	ldr	r3, [r7, #20]
    fd28:	3304      	adds	r3, #4
    fd2a:	687a      	ldr	r2, [r7, #4]
    fd2c:	601a      	str	r2, [r3, #0]
    tb_data[2] = block;
    fd2e:	697b      	ldr	r3, [r7, #20]
    fd30:	3308      	adds	r3, #8
    fd32:	683a      	ldr	r2, [r7, #0]
    fd34:	601a      	str	r2, [r3, #0]
    fd36:	e002      	b.n	fd3e <mp_obj_exception_add_traceback+0xe2>
            return;
    fd38:	bf00      	nop
    fd3a:	e000      	b.n	fd3e <mp_obj_exception_add_traceback+0xe2>
            return;
    fd3c:	bf00      	nop
}
    fd3e:	3720      	adds	r7, #32
    fd40:	46bd      	mov	sp, r7
    fd42:	bd80      	pop	{r7, pc}
    fd44:	00024440 	.word	0x00024440
    fd48:	000244c8 	.word	0x000244c8
    fd4c:	0002441c 	.word	0x0002441c
    fd50:	0000f795 	.word	0x0000f795

0000fd54 <mp_obj_exception_get_traceback>:

void mp_obj_exception_get_traceback(mp_obj_t self_in, size_t *n, size_t **values) {
    fd54:	b580      	push	{r7, lr}
    fd56:	b086      	sub	sp, #24
    fd58:	af00      	add	r7, sp, #0
    fd5a:	60f8      	str	r0, [r7, #12]
    fd5c:	60b9      	str	r1, [r7, #8]
    fd5e:	607a      	str	r2, [r7, #4]
    GET_NATIVE_EXCEPTION(self, self_in);
    fd60:	68f8      	ldr	r0, [r7, #12]
    fd62:	f7ff ff25 	bl	fbb0 <mp_obj_is_exception_instance>
    fd66:	4603      	mov	r3, r0
    fd68:	2b00      	cmp	r3, #0
    fd6a:	d106      	bne.n	fd7a <mp_obj_exception_get_traceback+0x26>
    fd6c:	4b16      	ldr	r3, [pc, #88]	; (fdc8 <mp_obj_exception_get_traceback+0x74>)
    fd6e:	4a17      	ldr	r2, [pc, #92]	; (fdcc <mp_obj_exception_get_traceback+0x78>)
    fd70:	f44f 71ff 	mov.w	r1, #510	; 0x1fe
    fd74:	4816      	ldr	r0, [pc, #88]	; (fdd0 <mp_obj_exception_get_traceback+0x7c>)
    fd76:	f00d f8b3 	bl	1cee0 <__assert_func>
    fd7a:	68f8      	ldr	r0, [r7, #12]
    fd7c:	f7fd ff6e 	bl	dc5c <mp_obj_get_type>
    fd80:	4603      	mov	r3, r0
    fd82:	68db      	ldr	r3, [r3, #12]
    fd84:	4a13      	ldr	r2, [pc, #76]	; (fdd4 <mp_obj_exception_get_traceback+0x80>)
    fd86:	4293      	cmp	r3, r2
    fd88:	d102      	bne.n	fd90 <mp_obj_exception_get_traceback+0x3c>
    fd8a:	68fb      	ldr	r3, [r7, #12]
    fd8c:	617b      	str	r3, [r7, #20]
    fd8e:	e002      	b.n	fd96 <mp_obj_exception_get_traceback+0x42>
    fd90:	68fb      	ldr	r3, [r7, #12]
    fd92:	691b      	ldr	r3, [r3, #16]
    fd94:	617b      	str	r3, [r7, #20]

    if (self->traceback_data == NULL) {
    fd96:	697b      	ldr	r3, [r7, #20]
    fd98:	689b      	ldr	r3, [r3, #8]
    fd9a:	2b00      	cmp	r3, #0
    fd9c:	d106      	bne.n	fdac <mp_obj_exception_get_traceback+0x58>
        *n = 0;
    fd9e:	68bb      	ldr	r3, [r7, #8]
    fda0:	2200      	movs	r2, #0
    fda2:	601a      	str	r2, [r3, #0]
        *values = NULL;
    fda4:	687b      	ldr	r3, [r7, #4]
    fda6:	2200      	movs	r2, #0
    fda8:	601a      	str	r2, [r3, #0]
    } else {
        *n = self->traceback_len;
        *values = self->traceback_data;
    }
}
    fdaa:	e008      	b.n	fdbe <mp_obj_exception_get_traceback+0x6a>
        *n = self->traceback_len;
    fdac:	697b      	ldr	r3, [r7, #20]
    fdae:	88db      	ldrh	r3, [r3, #6]
    fdb0:	461a      	mov	r2, r3
    fdb2:	68bb      	ldr	r3, [r7, #8]
    fdb4:	601a      	str	r2, [r3, #0]
        *values = self->traceback_data;
    fdb6:	697b      	ldr	r3, [r7, #20]
    fdb8:	689a      	ldr	r2, [r3, #8]
    fdba:	687b      	ldr	r3, [r7, #4]
    fdbc:	601a      	str	r2, [r3, #0]
}
    fdbe:	bf00      	nop
    fdc0:	3718      	adds	r7, #24
    fdc2:	46bd      	mov	sp, r7
    fdc4:	bd80      	pop	{r7, pc}
    fdc6:	bf00      	nop
    fdc8:	00024440 	.word	0x00024440
    fdcc:	000244e8 	.word	0x000244e8
    fdd0:	0002441c 	.word	0x0002441c
    fdd4:	0000f795 	.word	0x0000f795

0000fdd8 <MP_OBJ_IS_OBJ>:
    fdd8:	b480      	push	{r7}
    fdda:	b083      	sub	sp, #12
    fddc:	af00      	add	r7, sp, #0
    fdde:	6078      	str	r0, [r7, #4]
    fde0:	687b      	ldr	r3, [r7, #4]
    fde2:	f003 0303 	and.w	r3, r3, #3
    fde6:	2b00      	cmp	r3, #0
    fde8:	bf0c      	ite	eq
    fdea:	2301      	moveq	r3, #1
    fdec:	2300      	movne	r3, #0
    fdee:	b2db      	uxtb	r3, r3
    fdf0:	4618      	mov	r0, r3
    fdf2:	370c      	adds	r7, #12
    fdf4:	46bd      	mov	sp, r7
    fdf6:	f85d 7b04 	ldr.w	r7, [sp], #4
    fdfa:	4770      	bx	lr

0000fdfc <mp_arg_check_num>:
static inline void mp_arg_check_num(size_t n_args, size_t n_kw, size_t n_args_min, size_t n_args_max, bool takes_kw) {
    fdfc:	b580      	push	{r7, lr}
    fdfe:	b084      	sub	sp, #16
    fe00:	af00      	add	r7, sp, #0
    fe02:	60f8      	str	r0, [r7, #12]
    fe04:	60b9      	str	r1, [r7, #8]
    fe06:	607a      	str	r2, [r7, #4]
    fe08:	603b      	str	r3, [r7, #0]
    mp_arg_check_num_sig(n_args, n_kw, (uint32_t)MP_OBJ_FUN_MAKE_SIG(n_args_min, n_args_max, takes_kw));
    fe0a:	687b      	ldr	r3, [r7, #4]
    fe0c:	045a      	lsls	r2, r3, #17
    fe0e:	683b      	ldr	r3, [r7, #0]
    fe10:	005b      	lsls	r3, r3, #1
    fe12:	431a      	orrs	r2, r3
    fe14:	7e3b      	ldrb	r3, [r7, #24]
    fe16:	2b00      	cmp	r3, #0
    fe18:	d001      	beq.n	fe1e <mp_arg_check_num+0x22>
    fe1a:	2301      	movs	r3, #1
    fe1c:	e000      	b.n	fe20 <mp_arg_check_num+0x24>
    fe1e:	2300      	movs	r3, #0
    fe20:	4313      	orrs	r3, r2
    fe22:	461a      	mov	r2, r3
    fe24:	68b9      	ldr	r1, [r7, #8]
    fe26:	68f8      	ldr	r0, [r7, #12]
    fe28:	f7fd fad6 	bl	d3d8 <mp_arg_check_num_sig>
}
    fe2c:	bf00      	nop
    fe2e:	3710      	adds	r7, #16
    fe30:	46bd      	mov	sp, r7
    fe32:	bd80      	pop	{r7, pc}

0000fe34 <mp_globals_get>:
static inline mp_obj_dict_t *mp_globals_get(void) { return MP_STATE_THREAD(dict_globals); }
    fe34:	b480      	push	{r7}
    fe36:	af00      	add	r7, sp, #0
    fe38:	4b03      	ldr	r3, [pc, #12]	; (fe48 <mp_globals_get+0x14>)
    fe3a:	689b      	ldr	r3, [r3, #8]
    fe3c:	4618      	mov	r0, r3
    fe3e:	46bd      	mov	sp, r7
    fe40:	f85d 7b04 	ldr.w	r7, [sp], #4
    fe44:	4770      	bx	lr
    fe46:	bf00      	nop
    fe48:	20001248 	.word	0x20001248

0000fe4c <mp_globals_set>:
static inline void mp_globals_set(mp_obj_dict_t *d) { MP_STATE_THREAD(dict_globals) = d; }
    fe4c:	b480      	push	{r7}
    fe4e:	b083      	sub	sp, #12
    fe50:	af00      	add	r7, sp, #0
    fe52:	6078      	str	r0, [r7, #4]
    fe54:	4a04      	ldr	r2, [pc, #16]	; (fe68 <mp_globals_set+0x1c>)
    fe56:	687b      	ldr	r3, [r7, #4]
    fe58:	6093      	str	r3, [r2, #8]
    fe5a:	bf00      	nop
    fe5c:	370c      	adds	r7, #12
    fe5e:	46bd      	mov	sp, r7
    fe60:	f85d 7b04 	ldr.w	r7, [sp], #4
    fe64:	4770      	bx	lr
    fe66:	bf00      	nop
    fe68:	20001248 	.word	0x20001248

0000fe6c <fun_builtin_0_call>:
// function type.

/******************************************************************************/
/* builtin functions                                                          */

STATIC mp_obj_t fun_builtin_0_call(mp_obj_t self_in, size_t n_args, size_t n_kw, const mp_obj_t *args) {
    fe6c:	b580      	push	{r7, lr}
    fe6e:	b088      	sub	sp, #32
    fe70:	af02      	add	r7, sp, #8
    fe72:	60f8      	str	r0, [r7, #12]
    fe74:	60b9      	str	r1, [r7, #8]
    fe76:	607a      	str	r2, [r7, #4]
    fe78:	603b      	str	r3, [r7, #0]
    (void)args;
    assert(MP_OBJ_IS_TYPE(self_in, &mp_type_fun_builtin_0));
    fe7a:	68f8      	ldr	r0, [r7, #12]
    fe7c:	f7ff ffac 	bl	fdd8 <MP_OBJ_IS_OBJ>
    fe80:	4603      	mov	r3, r0
    fe82:	2b00      	cmp	r3, #0
    fe84:	d004      	beq.n	fe90 <fun_builtin_0_call+0x24>
    fe86:	68fb      	ldr	r3, [r7, #12]
    fe88:	681b      	ldr	r3, [r3, #0]
    fe8a:	4a0d      	ldr	r2, [pc, #52]	; (fec0 <fun_builtin_0_call+0x54>)
    fe8c:	4293      	cmp	r3, r2
    fe8e:	d005      	beq.n	fe9c <fun_builtin_0_call+0x30>
    fe90:	4b0c      	ldr	r3, [pc, #48]	; (fec4 <fun_builtin_0_call+0x58>)
    fe92:	4a0d      	ldr	r2, [pc, #52]	; (fec8 <fun_builtin_0_call+0x5c>)
    fe94:	2135      	movs	r1, #53	; 0x35
    fe96:	480d      	ldr	r0, [pc, #52]	; (fecc <fun_builtin_0_call+0x60>)
    fe98:	f00d f822 	bl	1cee0 <__assert_func>
    mp_obj_fun_builtin_fixed_t *self = MP_OBJ_TO_PTR(self_in);
    fe9c:	68fb      	ldr	r3, [r7, #12]
    fe9e:	617b      	str	r3, [r7, #20]
    mp_arg_check_num(n_args, n_kw, 0, 0, false);
    fea0:	2300      	movs	r3, #0
    fea2:	9300      	str	r3, [sp, #0]
    fea4:	2300      	movs	r3, #0
    fea6:	2200      	movs	r2, #0
    fea8:	6879      	ldr	r1, [r7, #4]
    feaa:	68b8      	ldr	r0, [r7, #8]
    feac:	f7ff ffa6 	bl	fdfc <mp_arg_check_num>
    return self->fun._0();
    feb0:	697b      	ldr	r3, [r7, #20]
    feb2:	685b      	ldr	r3, [r3, #4]
    feb4:	4798      	blx	r3
    feb6:	4603      	mov	r3, r0
}
    feb8:	4618      	mov	r0, r3
    feba:	3718      	adds	r7, #24
    febc:	46bd      	mov	sp, r7
    febe:	bd80      	pop	{r7, pc}
    fec0:	0002454c 	.word	0x0002454c
    fec4:	00024508 	.word	0x00024508
    fec8:	00024820 	.word	0x00024820
    fecc:	00024538 	.word	0x00024538

0000fed0 <fun_builtin_1_call>:
    .name = MP_QSTR_function,
    .call = fun_builtin_0_call,
    .unary_op = mp_generic_unary_op,
};

STATIC mp_obj_t fun_builtin_1_call(mp_obj_t self_in, size_t n_args, size_t n_kw, const mp_obj_t *args) {
    fed0:	b580      	push	{r7, lr}
    fed2:	b088      	sub	sp, #32
    fed4:	af02      	add	r7, sp, #8
    fed6:	60f8      	str	r0, [r7, #12]
    fed8:	60b9      	str	r1, [r7, #8]
    feda:	607a      	str	r2, [r7, #4]
    fedc:	603b      	str	r3, [r7, #0]
    assert(MP_OBJ_IS_TYPE(self_in, &mp_type_fun_builtin_1));
    fede:	68f8      	ldr	r0, [r7, #12]
    fee0:	f7ff ff7a 	bl	fdd8 <MP_OBJ_IS_OBJ>
    fee4:	4603      	mov	r3, r0
    fee6:	2b00      	cmp	r3, #0
    fee8:	d004      	beq.n	fef4 <fun_builtin_1_call+0x24>
    feea:	68fb      	ldr	r3, [r7, #12]
    feec:	681b      	ldr	r3, [r3, #0]
    feee:	4a0f      	ldr	r2, [pc, #60]	; (ff2c <fun_builtin_1_call+0x5c>)
    fef0:	4293      	cmp	r3, r2
    fef2:	d005      	beq.n	ff00 <fun_builtin_1_call+0x30>
    fef4:	4b0e      	ldr	r3, [pc, #56]	; (ff30 <fun_builtin_1_call+0x60>)
    fef6:	4a0f      	ldr	r2, [pc, #60]	; (ff34 <fun_builtin_1_call+0x64>)
    fef8:	2143      	movs	r1, #67	; 0x43
    fefa:	480f      	ldr	r0, [pc, #60]	; (ff38 <fun_builtin_1_call+0x68>)
    fefc:	f00c fff0 	bl	1cee0 <__assert_func>
    mp_obj_fun_builtin_fixed_t *self = MP_OBJ_TO_PTR(self_in);
    ff00:	68fb      	ldr	r3, [r7, #12]
    ff02:	617b      	str	r3, [r7, #20]
    mp_arg_check_num(n_args, n_kw, 1, 1, false);
    ff04:	2300      	movs	r3, #0
    ff06:	9300      	str	r3, [sp, #0]
    ff08:	2301      	movs	r3, #1
    ff0a:	2201      	movs	r2, #1
    ff0c:	6879      	ldr	r1, [r7, #4]
    ff0e:	68b8      	ldr	r0, [r7, #8]
    ff10:	f7ff ff74 	bl	fdfc <mp_arg_check_num>
    return self->fun._1(args[0]);
    ff14:	697b      	ldr	r3, [r7, #20]
    ff16:	685b      	ldr	r3, [r3, #4]
    ff18:	683a      	ldr	r2, [r7, #0]
    ff1a:	6812      	ldr	r2, [r2, #0]
    ff1c:	4610      	mov	r0, r2
    ff1e:	4798      	blx	r3
    ff20:	4603      	mov	r3, r0
}
    ff22:	4618      	mov	r0, r3
    ff24:	3718      	adds	r7, #24
    ff26:	46bd      	mov	sp, r7
    ff28:	bd80      	pop	{r7, pc}
    ff2a:	bf00      	nop
    ff2c:	000245b8 	.word	0x000245b8
    ff30:	00024588 	.word	0x00024588
    ff34:	00024834 	.word	0x00024834
    ff38:	00024538 	.word	0x00024538

0000ff3c <fun_builtin_2_call>:
    .name = MP_QSTR_function,
    .call = fun_builtin_1_call,
    .unary_op = mp_generic_unary_op,
};

STATIC mp_obj_t fun_builtin_2_call(mp_obj_t self_in, size_t n_args, size_t n_kw, const mp_obj_t *args) {
    ff3c:	b580      	push	{r7, lr}
    ff3e:	b088      	sub	sp, #32
    ff40:	af02      	add	r7, sp, #8
    ff42:	60f8      	str	r0, [r7, #12]
    ff44:	60b9      	str	r1, [r7, #8]
    ff46:	607a      	str	r2, [r7, #4]
    ff48:	603b      	str	r3, [r7, #0]
    assert(MP_OBJ_IS_TYPE(self_in, &mp_type_fun_builtin_2));
    ff4a:	68f8      	ldr	r0, [r7, #12]
    ff4c:	f7ff ff44 	bl	fdd8 <MP_OBJ_IS_OBJ>
    ff50:	4603      	mov	r3, r0
    ff52:	2b00      	cmp	r3, #0
    ff54:	d004      	beq.n	ff60 <fun_builtin_2_call+0x24>
    ff56:	68fb      	ldr	r3, [r7, #12]
    ff58:	681b      	ldr	r3, [r3, #0]
    ff5a:	4a10      	ldr	r2, [pc, #64]	; (ff9c <fun_builtin_2_call+0x60>)
    ff5c:	4293      	cmp	r3, r2
    ff5e:	d005      	beq.n	ff6c <fun_builtin_2_call+0x30>
    ff60:	4b0f      	ldr	r3, [pc, #60]	; (ffa0 <fun_builtin_2_call+0x64>)
    ff62:	4a10      	ldr	r2, [pc, #64]	; (ffa4 <fun_builtin_2_call+0x68>)
    ff64:	2151      	movs	r1, #81	; 0x51
    ff66:	4810      	ldr	r0, [pc, #64]	; (ffa8 <fun_builtin_2_call+0x6c>)
    ff68:	f00c ffba 	bl	1cee0 <__assert_func>
    mp_obj_fun_builtin_fixed_t *self = MP_OBJ_TO_PTR(self_in);
    ff6c:	68fb      	ldr	r3, [r7, #12]
    ff6e:	617b      	str	r3, [r7, #20]
    mp_arg_check_num(n_args, n_kw, 2, 2, false);
    ff70:	2300      	movs	r3, #0
    ff72:	9300      	str	r3, [sp, #0]
    ff74:	2302      	movs	r3, #2
    ff76:	2202      	movs	r2, #2
    ff78:	6879      	ldr	r1, [r7, #4]
    ff7a:	68b8      	ldr	r0, [r7, #8]
    ff7c:	f7ff ff3e 	bl	fdfc <mp_arg_check_num>
    return self->fun._2(args[0], args[1]);
    ff80:	697b      	ldr	r3, [r7, #20]
    ff82:	685b      	ldr	r3, [r3, #4]
    ff84:	683a      	ldr	r2, [r7, #0]
    ff86:	6810      	ldr	r0, [r2, #0]
    ff88:	683a      	ldr	r2, [r7, #0]
    ff8a:	3204      	adds	r2, #4
    ff8c:	6812      	ldr	r2, [r2, #0]
    ff8e:	4611      	mov	r1, r2
    ff90:	4798      	blx	r3
    ff92:	4603      	mov	r3, r0
}
    ff94:	4618      	mov	r0, r3
    ff96:	3718      	adds	r7, #24
    ff98:	46bd      	mov	sp, r7
    ff9a:	bd80      	pop	{r7, pc}
    ff9c:	00024624 	.word	0x00024624
    ffa0:	000245f4 	.word	0x000245f4
    ffa4:	00024848 	.word	0x00024848
    ffa8:	00024538 	.word	0x00024538

0000ffac <fun_builtin_3_call>:
    .name = MP_QSTR_function,
    .call = fun_builtin_2_call,
    .unary_op = mp_generic_unary_op,
};

STATIC mp_obj_t fun_builtin_3_call(mp_obj_t self_in, size_t n_args, size_t n_kw, const mp_obj_t *args) {
    ffac:	b580      	push	{r7, lr}
    ffae:	b088      	sub	sp, #32
    ffb0:	af02      	add	r7, sp, #8
    ffb2:	60f8      	str	r0, [r7, #12]
    ffb4:	60b9      	str	r1, [r7, #8]
    ffb6:	607a      	str	r2, [r7, #4]
    ffb8:	603b      	str	r3, [r7, #0]
    assert(MP_OBJ_IS_TYPE(self_in, &mp_type_fun_builtin_3));
    ffba:	68f8      	ldr	r0, [r7, #12]
    ffbc:	f7ff ff0c 	bl	fdd8 <MP_OBJ_IS_OBJ>
    ffc0:	4603      	mov	r3, r0
    ffc2:	2b00      	cmp	r3, #0
    ffc4:	d004      	beq.n	ffd0 <fun_builtin_3_call+0x24>
    ffc6:	68fb      	ldr	r3, [r7, #12]
    ffc8:	681b      	ldr	r3, [r3, #0]
    ffca:	4a11      	ldr	r2, [pc, #68]	; (10010 <fun_builtin_3_call+0x64>)
    ffcc:	4293      	cmp	r3, r2
    ffce:	d005      	beq.n	ffdc <fun_builtin_3_call+0x30>
    ffd0:	4b10      	ldr	r3, [pc, #64]	; (10014 <fun_builtin_3_call+0x68>)
    ffd2:	4a11      	ldr	r2, [pc, #68]	; (10018 <fun_builtin_3_call+0x6c>)
    ffd4:	215f      	movs	r1, #95	; 0x5f
    ffd6:	4811      	ldr	r0, [pc, #68]	; (1001c <fun_builtin_3_call+0x70>)
    ffd8:	f00c ff82 	bl	1cee0 <__assert_func>
    mp_obj_fun_builtin_fixed_t *self = MP_OBJ_TO_PTR(self_in);
    ffdc:	68fb      	ldr	r3, [r7, #12]
    ffde:	617b      	str	r3, [r7, #20]
    mp_arg_check_num(n_args, n_kw, 3, 3, false);
    ffe0:	2300      	movs	r3, #0
    ffe2:	9300      	str	r3, [sp, #0]
    ffe4:	2303      	movs	r3, #3
    ffe6:	2203      	movs	r2, #3
    ffe8:	6879      	ldr	r1, [r7, #4]
    ffea:	68b8      	ldr	r0, [r7, #8]
    ffec:	f7ff ff06 	bl	fdfc <mp_arg_check_num>
    return self->fun._3(args[0], args[1], args[2]);
    fff0:	697b      	ldr	r3, [r7, #20]
    fff2:	685b      	ldr	r3, [r3, #4]
    fff4:	683a      	ldr	r2, [r7, #0]
    fff6:	6810      	ldr	r0, [r2, #0]
    fff8:	683a      	ldr	r2, [r7, #0]
    fffa:	3204      	adds	r2, #4
    fffc:	6811      	ldr	r1, [r2, #0]
    fffe:	683a      	ldr	r2, [r7, #0]
   10000:	3208      	adds	r2, #8
   10002:	6812      	ldr	r2, [r2, #0]
   10004:	4798      	blx	r3
   10006:	4603      	mov	r3, r0
}
   10008:	4618      	mov	r0, r3
   1000a:	3718      	adds	r7, #24
   1000c:	46bd      	mov	sp, r7
   1000e:	bd80      	pop	{r7, pc}
   10010:	00024690 	.word	0x00024690
   10014:	00024660 	.word	0x00024660
   10018:	0002485c 	.word	0x0002485c
   1001c:	00024538 	.word	0x00024538

00010020 <fun_builtin_var_call>:
    .name = MP_QSTR_function,
    .call = fun_builtin_3_call,
    .unary_op = mp_generic_unary_op,
};

STATIC mp_obj_t fun_builtin_var_call(mp_obj_t self_in, size_t n_args, size_t n_kw, const mp_obj_t *args) {
   10020:	b580      	push	{r7, lr}
   10022:	b088      	sub	sp, #32
   10024:	af00      	add	r7, sp, #0
   10026:	60f8      	str	r0, [r7, #12]
   10028:	60b9      	str	r1, [r7, #8]
   1002a:	607a      	str	r2, [r7, #4]
   1002c:	603b      	str	r3, [r7, #0]
    assert(MP_OBJ_IS_TYPE(self_in, &mp_type_fun_builtin_var));
   1002e:	68f8      	ldr	r0, [r7, #12]
   10030:	f7ff fed2 	bl	fdd8 <MP_OBJ_IS_OBJ>
   10034:	4603      	mov	r3, r0
   10036:	2b00      	cmp	r3, #0
   10038:	d004      	beq.n	10044 <fun_builtin_var_call+0x24>
   1003a:	68fb      	ldr	r3, [r7, #12]
   1003c:	681b      	ldr	r3, [r3, #0]
   1003e:	4a1a      	ldr	r2, [pc, #104]	; (100a8 <fun_builtin_var_call+0x88>)
   10040:	4293      	cmp	r3, r2
   10042:	d005      	beq.n	10050 <fun_builtin_var_call+0x30>
   10044:	4b19      	ldr	r3, [pc, #100]	; (100ac <fun_builtin_var_call+0x8c>)
   10046:	4a1a      	ldr	r2, [pc, #104]	; (100b0 <fun_builtin_var_call+0x90>)
   10048:	216d      	movs	r1, #109	; 0x6d
   1004a:	481a      	ldr	r0, [pc, #104]	; (100b4 <fun_builtin_var_call+0x94>)
   1004c:	f00c ff48 	bl	1cee0 <__assert_func>
    mp_obj_fun_builtin_var_t *self = MP_OBJ_TO_PTR(self_in);
   10050:	68fb      	ldr	r3, [r7, #12]
   10052:	61fb      	str	r3, [r7, #28]

    // check number of arguments
    mp_arg_check_num_sig(n_args, n_kw, self->sig);
   10054:	69fb      	ldr	r3, [r7, #28]
   10056:	685b      	ldr	r3, [r3, #4]
   10058:	461a      	mov	r2, r3
   1005a:	6879      	ldr	r1, [r7, #4]
   1005c:	68b8      	ldr	r0, [r7, #8]
   1005e:	f7fd f9bb 	bl	d3d8 <mp_arg_check_num_sig>

    if (self->sig & 1) {
   10062:	69fb      	ldr	r3, [r7, #28]
   10064:	685b      	ldr	r3, [r3, #4]
   10066:	f003 0301 	and.w	r3, r3, #1
   1006a:	2b00      	cmp	r3, #0
   1006c:	d012      	beq.n	10094 <fun_builtin_var_call+0x74>
        // function allows keywords

        // we create a map directly from the given args array
        mp_map_t kw_args;
        mp_map_init_fixed_table(&kw_args, n_kw, args + n_args);
   1006e:	68bb      	ldr	r3, [r7, #8]
   10070:	009b      	lsls	r3, r3, #2
   10072:	683a      	ldr	r2, [r7, #0]
   10074:	441a      	add	r2, r3
   10076:	f107 0310 	add.w	r3, r7, #16
   1007a:	6879      	ldr	r1, [r7, #4]
   1007c:	4618      	mov	r0, r3
   1007e:	f7fd fb3a 	bl	d6f6 <mp_map_init_fixed_table>

        return self->fun.kw(n_args, args, &kw_args);
   10082:	69fb      	ldr	r3, [r7, #28]
   10084:	689b      	ldr	r3, [r3, #8]
   10086:	f107 0210 	add.w	r2, r7, #16
   1008a:	6839      	ldr	r1, [r7, #0]
   1008c:	68b8      	ldr	r0, [r7, #8]
   1008e:	4798      	blx	r3
   10090:	4603      	mov	r3, r0
   10092:	e005      	b.n	100a0 <fun_builtin_var_call+0x80>

    } else {
        // function takes a variable number of arguments, but no keywords

        return self->fun.var(n_args, args);
   10094:	69fb      	ldr	r3, [r7, #28]
   10096:	689b      	ldr	r3, [r3, #8]
   10098:	6839      	ldr	r1, [r7, #0]
   1009a:	68b8      	ldr	r0, [r7, #8]
   1009c:	4798      	blx	r3
   1009e:	4603      	mov	r3, r0
    }
}
   100a0:	4618      	mov	r0, r3
   100a2:	3720      	adds	r7, #32
   100a4:	46bd      	mov	sp, r7
   100a6:	bd80      	pop	{r7, pc}
   100a8:	00024700 	.word	0x00024700
   100ac:	000246cc 	.word	0x000246cc
   100b0:	00024870 	.word	0x00024870
   100b4:	00024538 	.word	0x00024538

000100b8 <mp_obj_code_get_name>:
};

/******************************************************************************/
/* byte code functions                                                        */

qstr mp_obj_code_get_name(const byte *code_info) {
   100b8:	b580      	push	{r7, lr}
   100ba:	b082      	sub	sp, #8
   100bc:	af00      	add	r7, sp, #0
   100be:	6078      	str	r0, [r7, #4]
    code_info = mp_decode_uint_skip(code_info); // skip code_info_size entry
   100c0:	6878      	ldr	r0, [r7, #4]
   100c2:	f00a fe2d 	bl	1ad20 <mp_decode_uint_skip>
   100c6:	6078      	str	r0, [r7, #4]
    #if MICROPY_PERSISTENT_CODE
    return code_info[0] | (code_info[1] << 8);
   100c8:	687b      	ldr	r3, [r7, #4]
   100ca:	781b      	ldrb	r3, [r3, #0]
   100cc:	461a      	mov	r2, r3
   100ce:	687b      	ldr	r3, [r7, #4]
   100d0:	3301      	adds	r3, #1
   100d2:	781b      	ldrb	r3, [r3, #0]
   100d4:	021b      	lsls	r3, r3, #8
   100d6:	4313      	orrs	r3, r2
    #else
    return mp_decode_uint_value(code_info);
    #endif
}
   100d8:	4618      	mov	r0, r3
   100da:	3708      	adds	r7, #8
   100dc:	46bd      	mov	sp, r7
   100de:	bd80      	pop	{r7, pc}

000100e0 <mp_obj_fun_get_name>:

#if MICROPY_EMIT_NATIVE
STATIC const mp_obj_type_t mp_type_fun_native;
#endif

qstr mp_obj_fun_get_name(mp_const_obj_t fun_in) {
   100e0:	b580      	push	{r7, lr}
   100e2:	b084      	sub	sp, #16
   100e4:	af00      	add	r7, sp, #0
   100e6:	6078      	str	r0, [r7, #4]
    const mp_obj_fun_bc_t *fun = MP_OBJ_TO_PTR(fun_in);
   100e8:	687b      	ldr	r3, [r7, #4]
   100ea:	60fb      	str	r3, [r7, #12]
        // TODO native functions don't have name stored
        return MP_QSTR_;
    }
    #endif

    const byte *bc = fun->bytecode;
   100ec:	68fb      	ldr	r3, [r7, #12]
   100ee:	689b      	ldr	r3, [r3, #8]
   100f0:	60bb      	str	r3, [r7, #8]
    bc = mp_decode_uint_skip(bc); // skip n_state
   100f2:	68b8      	ldr	r0, [r7, #8]
   100f4:	f00a fe14 	bl	1ad20 <mp_decode_uint_skip>
   100f8:	60b8      	str	r0, [r7, #8]
    bc = mp_decode_uint_skip(bc); // skip n_exc_stack
   100fa:	68b8      	ldr	r0, [r7, #8]
   100fc:	f00a fe10 	bl	1ad20 <mp_decode_uint_skip>
   10100:	60b8      	str	r0, [r7, #8]
    bc++; // skip scope_params
   10102:	68bb      	ldr	r3, [r7, #8]
   10104:	3301      	adds	r3, #1
   10106:	60bb      	str	r3, [r7, #8]
    bc++; // skip n_pos_args
   10108:	68bb      	ldr	r3, [r7, #8]
   1010a:	3301      	adds	r3, #1
   1010c:	60bb      	str	r3, [r7, #8]
    bc++; // skip n_kwonly_args
   1010e:	68bb      	ldr	r3, [r7, #8]
   10110:	3301      	adds	r3, #1
   10112:	60bb      	str	r3, [r7, #8]
    bc++; // skip n_def_pos_args
   10114:	68bb      	ldr	r3, [r7, #8]
   10116:	3301      	adds	r3, #1
   10118:	60bb      	str	r3, [r7, #8]
    return mp_obj_code_get_name(bc);
   1011a:	68b8      	ldr	r0, [r7, #8]
   1011c:	f7ff ffcc 	bl	100b8 <mp_obj_code_get_name>
   10120:	4603      	mov	r3, r0
}
   10122:	4618      	mov	r0, r3
   10124:	3710      	adds	r7, #16
   10126:	46bd      	mov	sp, r7
   10128:	bd80      	pop	{r7, pc}

0001012a <dump_args>:
    mp_printf(print, "<function %q at 0x%p>", mp_obj_fun_get_name(o_in), o);
}
#endif

#if DEBUG_PRINT
STATIC void dump_args(const mp_obj_t *a, size_t sz) {
   1012a:	b580      	push	{r7, lr}
   1012c:	b084      	sub	sp, #16
   1012e:	af00      	add	r7, sp, #0
   10130:	6078      	str	r0, [r7, #4]
   10132:	6039      	str	r1, [r7, #0]
    DEBUG_printf("%p: ", a);
   10134:	6879      	ldr	r1, [r7, #4]
   10136:	480e      	ldr	r0, [pc, #56]	; (10170 <dump_args+0x46>)
   10138:	f00c fd58 	bl	1cbec <DEBUG_printf>
    for (size_t i = 0; i < sz; i++) {
   1013c:	2300      	movs	r3, #0
   1013e:	60fb      	str	r3, [r7, #12]
   10140:	e00b      	b.n	1015a <dump_args+0x30>
        DEBUG_printf("%p ", a[i]);
   10142:	68fb      	ldr	r3, [r7, #12]
   10144:	009b      	lsls	r3, r3, #2
   10146:	687a      	ldr	r2, [r7, #4]
   10148:	4413      	add	r3, r2
   1014a:	681b      	ldr	r3, [r3, #0]
   1014c:	4619      	mov	r1, r3
   1014e:	4809      	ldr	r0, [pc, #36]	; (10174 <dump_args+0x4a>)
   10150:	f00c fd4c 	bl	1cbec <DEBUG_printf>
    for (size_t i = 0; i < sz; i++) {
   10154:	68fb      	ldr	r3, [r7, #12]
   10156:	3301      	adds	r3, #1
   10158:	60fb      	str	r3, [r7, #12]
   1015a:	68fa      	ldr	r2, [r7, #12]
   1015c:	683b      	ldr	r3, [r7, #0]
   1015e:	429a      	cmp	r2, r3
   10160:	d3ef      	bcc.n	10142 <dump_args+0x18>
    }
    DEBUG_printf("\n");
   10162:	4805      	ldr	r0, [pc, #20]	; (10178 <dump_args+0x4e>)
   10164:	f00c fd42 	bl	1cbec <DEBUG_printf>
}
   10168:	bf00      	nop
   1016a:	3710      	adds	r7, #16
   1016c:	46bd      	mov	sp, r7
   1016e:	bd80      	pop	{r7, pc}
   10170:	0002473c 	.word	0x0002473c
   10174:	00024744 	.word	0x00024744
   10178:	00024748 	.word	0x00024748

0001017c <fun_bc_call>:

    return code_state;
}
#endif

STATIC mp_obj_t fun_bc_call(mp_obj_t self_in, size_t n_args, size_t n_kw, const mp_obj_t *args) {
   1017c:	b580      	push	{r7, lr}
   1017e:	b08c      	sub	sp, #48	; 0x30
   10180:	af00      	add	r7, sp, #0
   10182:	60f8      	str	r0, [r7, #12]
   10184:	60b9      	str	r1, [r7, #8]
   10186:	607a      	str	r2, [r7, #4]
   10188:	603b      	str	r3, [r7, #0]
    MP_STACK_CHECK();

    DEBUG_printf("Input n_args: " UINT_FMT ", n_kw: " UINT_FMT "\n", n_args, n_kw);
   1018a:	687a      	ldr	r2, [r7, #4]
   1018c:	68b9      	ldr	r1, [r7, #8]
   1018e:	484a      	ldr	r0, [pc, #296]	; (102b8 <fun_bc_call+0x13c>)
   10190:	f00c fd2c 	bl	1cbec <DEBUG_printf>
    DEBUG_printf("Input pos args: ");
   10194:	4849      	ldr	r0, [pc, #292]	; (102bc <fun_bc_call+0x140>)
   10196:	f00c fd29 	bl	1cbec <DEBUG_printf>
    dump_args(args, n_args);
   1019a:	68b9      	ldr	r1, [r7, #8]
   1019c:	6838      	ldr	r0, [r7, #0]
   1019e:	f7ff ffc4 	bl	1012a <dump_args>
    DEBUG_printf("Input kw args: ");
   101a2:	4847      	ldr	r0, [pc, #284]	; (102c0 <fun_bc_call+0x144>)
   101a4:	f00c fd22 	bl	1cbec <DEBUG_printf>
    dump_args(args + n_args, n_kw * 2);
   101a8:	68bb      	ldr	r3, [r7, #8]
   101aa:	009b      	lsls	r3, r3, #2
   101ac:	683a      	ldr	r2, [r7, #0]
   101ae:	441a      	add	r2, r3
   101b0:	687b      	ldr	r3, [r7, #4]
   101b2:	005b      	lsls	r3, r3, #1
   101b4:	4619      	mov	r1, r3
   101b6:	4610      	mov	r0, r2
   101b8:	f7ff ffb7 	bl	1012a <dump_args>

    mp_obj_fun_bc_t *self = MP_OBJ_TO_PTR(self_in);
   101bc:	68fb      	ldr	r3, [r7, #12]
   101be:	623b      	str	r3, [r7, #32]

    size_t n_state, state_size;
    DECODE_CODESTATE_SIZE(self->bytecode, n_state, state_size);
   101c0:	6a3b      	ldr	r3, [r7, #32]
   101c2:	689b      	ldr	r3, [r3, #8]
   101c4:	4618      	mov	r0, r3
   101c6:	f00a fd9e 	bl	1ad06 <mp_decode_uint_value>
   101ca:	61f8      	str	r0, [r7, #28]
   101cc:	6a3b      	ldr	r3, [r7, #32]
   101ce:	689b      	ldr	r3, [r3, #8]
   101d0:	4618      	mov	r0, r3
   101d2:	f00a fda5 	bl	1ad20 <mp_decode_uint_skip>
   101d6:	4603      	mov	r3, r0
   101d8:	4618      	mov	r0, r3
   101da:	f00a fd94 	bl	1ad06 <mp_decode_uint_value>
   101de:	61b8      	str	r0, [r7, #24]
   101e0:	69ba      	ldr	r2, [r7, #24]
   101e2:	4613      	mov	r3, r2
   101e4:	005b      	lsls	r3, r3, #1
   101e6:	441a      	add	r2, r3
   101e8:	69fb      	ldr	r3, [r7, #28]
   101ea:	4413      	add	r3, r2
   101ec:	009b      	lsls	r3, r3, #2
   101ee:	62fb      	str	r3, [r7, #44]	; 0x2c

    // allocate state for locals and stack
    mp_code_state_t *code_state = NULL;
   101f0:	2300      	movs	r3, #0
   101f2:	62bb      	str	r3, [r7, #40]	; 0x28
    #if MICROPY_ENABLE_PYSTACK
    code_state = mp_pystack_alloc(sizeof(mp_code_state_t) + state_size);
    #else
    if (state_size > VM_MAX_STATE_ON_STACK) {
   101f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   101f6:	2b2c      	cmp	r3, #44	; 0x2c
   101f8:	d905      	bls.n	10206 <fun_bc_call+0x8a>
        code_state = m_new_obj_var_maybe(mp_code_state_t, byte, state_size);
   101fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   101fc:	3314      	adds	r3, #20
   101fe:	4618      	mov	r0, r3
   10200:	f7f0 f8aa 	bl	358 <m_malloc_maybe>
   10204:	62b8      	str	r0, [r7, #40]	; 0x28
    }
    if (code_state == NULL) {
   10206:	6abb      	ldr	r3, [r7, #40]	; 0x28
   10208:	2b00      	cmp	r3, #0
   1020a:	d10e      	bne.n	1022a <fun_bc_call+0xae>
        code_state = alloca(sizeof(mp_code_state_t) + state_size);
   1020c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1020e:	3314      	adds	r3, #20
   10210:	3307      	adds	r3, #7
   10212:	3307      	adds	r3, #7
   10214:	08db      	lsrs	r3, r3, #3
   10216:	00db      	lsls	r3, r3, #3
   10218:	ebad 0d03 	sub.w	sp, sp, r3
   1021c:	466b      	mov	r3, sp
   1021e:	3307      	adds	r3, #7
   10220:	08db      	lsrs	r3, r3, #3
   10222:	00db      	lsls	r3, r3, #3
   10224:	62bb      	str	r3, [r7, #40]	; 0x28
        state_size = 0; // indicate that we allocated using alloca
   10226:	2300      	movs	r3, #0
   10228:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    #endif

    INIT_CODESTATE(code_state, self, n_args, n_kw, args);
   1022a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1022c:	6a3a      	ldr	r2, [r7, #32]
   1022e:	601a      	str	r2, [r3, #0]
   10230:	6abb      	ldr	r3, [r7, #40]	; 0x28
   10232:	2200      	movs	r2, #0
   10234:	605a      	str	r2, [r3, #4]
   10236:	683b      	ldr	r3, [r7, #0]
   10238:	687a      	ldr	r2, [r7, #4]
   1023a:	68b9      	ldr	r1, [r7, #8]
   1023c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   1023e:	f00a fdb3 	bl	1ada8 <mp_setup_code_state>
   10242:	f7ff fdf7 	bl	fe34 <mp_globals_get>
   10246:	4602      	mov	r2, r0
   10248:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1024a:	611a      	str	r2, [r3, #16]

    // execute the byte code with the correct globals context
    mp_globals_set(self->globals);
   1024c:	6a3b      	ldr	r3, [r7, #32]
   1024e:	685b      	ldr	r3, [r3, #4]
   10250:	4618      	mov	r0, r3
   10252:	f7ff fdfb 	bl	fe4c <mp_globals_set>
    mp_vm_return_kind_t vm_return_kind = mp_execute_bytecode(code_state, MP_OBJ_NULL);
   10256:	2100      	movs	r1, #0
   10258:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   1025a:	f009 fda7 	bl	19dac <mp_execute_bytecode>
   1025e:	6178      	str	r0, [r7, #20]
    mp_globals_set(code_state->old_globals);
   10260:	6abb      	ldr	r3, [r7, #40]	; 0x28
   10262:	691b      	ldr	r3, [r3, #16]
   10264:	4618      	mov	r0, r3
   10266:	f7ff fdf1 	bl	fe4c <mp_globals_set>
        }
    }
#endif

    mp_obj_t result;
    if (vm_return_kind == MP_VM_RETURN_NORMAL) {
   1026a:	697b      	ldr	r3, [r7, #20]
   1026c:	2b00      	cmp	r3, #0
   1026e:	d104      	bne.n	1027a <fun_bc_call+0xfe>
        // return value is in *sp
        result = *code_state->sp;
   10270:	6abb      	ldr	r3, [r7, #40]	; 0x28
   10272:	689b      	ldr	r3, [r3, #8]
   10274:	681b      	ldr	r3, [r3, #0]
   10276:	627b      	str	r3, [r7, #36]	; 0x24
   10278:	e00c      	b.n	10294 <fun_bc_call+0x118>
    } else {
        // must be an exception because normal functions can't yield
        assert(vm_return_kind == MP_VM_RETURN_EXCEPTION);
   1027a:	697b      	ldr	r3, [r7, #20]
   1027c:	2b02      	cmp	r3, #2
   1027e:	d006      	beq.n	1028e <fun_bc_call+0x112>
   10280:	4b10      	ldr	r3, [pc, #64]	; (102c4 <fun_bc_call+0x148>)
   10282:	4a11      	ldr	r2, [pc, #68]	; (102c8 <fun_bc_call+0x14c>)
   10284:	f240 113f 	movw	r1, #319	; 0x13f
   10288:	4810      	ldr	r0, [pc, #64]	; (102cc <fun_bc_call+0x150>)
   1028a:	f00c fe29 	bl	1cee0 <__assert_func>
        // return value is in fastn[0]==state[n_state - 1]
        result = code_state->state[0];
   1028e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   10290:	695b      	ldr	r3, [r3, #20]
   10292:	627b      	str	r3, [r7, #36]	; 0x24

    #if MICROPY_ENABLE_PYSTACK
    mp_pystack_free(code_state);
    #else
    // free the state if it was allocated on the heap
    if (state_size != 0) {
   10294:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   10296:	2b00      	cmp	r3, #0
   10298:	d002      	beq.n	102a0 <fun_bc_call+0x124>
        m_del_var(mp_code_state_t, byte, state_size, code_state);
   1029a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   1029c:	f7f0 f8bc 	bl	418 <m_free>
    }
    #endif

    if (vm_return_kind == MP_VM_RETURN_NORMAL) {
   102a0:	697b      	ldr	r3, [r7, #20]
   102a2:	2b00      	cmp	r3, #0
   102a4:	d101      	bne.n	102aa <fun_bc_call+0x12e>
        return result;
   102a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   102a8:	e002      	b.n	102b0 <fun_bc_call+0x134>
    } else { // MP_VM_RETURN_EXCEPTION
        nlr_raise(result);
   102aa:	6a78      	ldr	r0, [r7, #36]	; 0x24
   102ac:	f7f0 f818 	bl	2e0 <nlr_jump>
    }
}
   102b0:	4618      	mov	r0, r3
   102b2:	3730      	adds	r7, #48	; 0x30
   102b4:	46bd      	mov	sp, r7
   102b6:	bd80      	pop	{r7, pc}
   102b8:	0002474c 	.word	0x0002474c
   102bc:	00024768 	.word	0x00024768
   102c0:	0002477c 	.word	0x0002477c
   102c4:	0002478c 	.word	0x0002478c
   102c8:	00024888 	.word	0x00024888
   102cc:	00024538 	.word	0x00024538

000102d0 <mp_obj_new_fun_bc>:
#if MICROPY_PY_FUNCTION_ATTRS
    .attr = mp_obj_fun_bc_attr,
#endif
};

mp_obj_t mp_obj_new_fun_bc(mp_obj_t def_args_in, mp_obj_t def_kw_args, const byte *code, const mp_uint_t *const_table) {
   102d0:	b580      	push	{r7, lr}
   102d2:	b088      	sub	sp, #32
   102d4:	af00      	add	r7, sp, #0
   102d6:	60f8      	str	r0, [r7, #12]
   102d8:	60b9      	str	r1, [r7, #8]
   102da:	607a      	str	r2, [r7, #4]
   102dc:	603b      	str	r3, [r7, #0]
    size_t n_def_args = 0;
   102de:	2300      	movs	r3, #0
   102e0:	61fb      	str	r3, [r7, #28]
    size_t n_extra_args = 0;
   102e2:	2300      	movs	r3, #0
   102e4:	61bb      	str	r3, [r7, #24]
    mp_obj_tuple_t *def_args = MP_OBJ_TO_PTR(def_args_in);
   102e6:	68fb      	ldr	r3, [r7, #12]
   102e8:	617b      	str	r3, [r7, #20]
    if (def_args_in != MP_OBJ_NULL) {
   102ea:	68fb      	ldr	r3, [r7, #12]
   102ec:	2b00      	cmp	r3, #0
   102ee:	d017      	beq.n	10320 <mp_obj_new_fun_bc+0x50>
        assert(MP_OBJ_IS_TYPE(def_args_in, &mp_type_tuple));
   102f0:	68f8      	ldr	r0, [r7, #12]
   102f2:	f7ff fd71 	bl	fdd8 <MP_OBJ_IS_OBJ>
   102f6:	4603      	mov	r3, r0
   102f8:	2b00      	cmp	r3, #0
   102fa:	d004      	beq.n	10306 <mp_obj_new_fun_bc+0x36>
   102fc:	68fb      	ldr	r3, [r7, #12]
   102fe:	681b      	ldr	r3, [r3, #0]
   10300:	4a23      	ldr	r2, [pc, #140]	; (10390 <mp_obj_new_fun_bc+0xc0>)
   10302:	4293      	cmp	r3, r2
   10304:	d006      	beq.n	10314 <mp_obj_new_fun_bc+0x44>
   10306:	4b23      	ldr	r3, [pc, #140]	; (10394 <mp_obj_new_fun_bc+0xc4>)
   10308:	4a23      	ldr	r2, [pc, #140]	; (10398 <mp_obj_new_fun_bc+0xc8>)
   1030a:	f44f 71b9 	mov.w	r1, #370	; 0x172
   1030e:	4823      	ldr	r0, [pc, #140]	; (1039c <mp_obj_new_fun_bc+0xcc>)
   10310:	f00c fde6 	bl	1cee0 <__assert_func>
        n_def_args = def_args->len;
   10314:	697b      	ldr	r3, [r7, #20]
   10316:	685b      	ldr	r3, [r3, #4]
   10318:	61fb      	str	r3, [r7, #28]
        n_extra_args = def_args->len;
   1031a:	697b      	ldr	r3, [r7, #20]
   1031c:	685b      	ldr	r3, [r3, #4]
   1031e:	61bb      	str	r3, [r7, #24]
    }
    if (def_kw_args != MP_OBJ_NULL) {
   10320:	68bb      	ldr	r3, [r7, #8]
   10322:	2b00      	cmp	r3, #0
   10324:	d002      	beq.n	1032c <mp_obj_new_fun_bc+0x5c>
        n_extra_args += 1;
   10326:	69bb      	ldr	r3, [r7, #24]
   10328:	3301      	adds	r3, #1
   1032a:	61bb      	str	r3, [r7, #24]
    }
    mp_obj_fun_bc_t *o = m_new_obj_var(mp_obj_fun_bc_t, mp_obj_t, n_extra_args);
   1032c:	69bb      	ldr	r3, [r7, #24]
   1032e:	3304      	adds	r3, #4
   10330:	009b      	lsls	r3, r3, #2
   10332:	4618      	mov	r0, r3
   10334:	f7ef fff2 	bl	31c <m_malloc>
   10338:	6138      	str	r0, [r7, #16]
    o->base.type = &mp_type_fun_bc;
   1033a:	693b      	ldr	r3, [r7, #16]
   1033c:	4a18      	ldr	r2, [pc, #96]	; (103a0 <mp_obj_new_fun_bc+0xd0>)
   1033e:	601a      	str	r2, [r3, #0]
    o->globals = mp_globals_get();
   10340:	f7ff fd78 	bl	fe34 <mp_globals_get>
   10344:	4602      	mov	r2, r0
   10346:	693b      	ldr	r3, [r7, #16]
   10348:	605a      	str	r2, [r3, #4]
    o->bytecode = code;
   1034a:	693b      	ldr	r3, [r7, #16]
   1034c:	687a      	ldr	r2, [r7, #4]
   1034e:	609a      	str	r2, [r3, #8]
    o->const_table = const_table;
   10350:	693b      	ldr	r3, [r7, #16]
   10352:	683a      	ldr	r2, [r7, #0]
   10354:	60da      	str	r2, [r3, #12]
    if (def_args != NULL) {
   10356:	697b      	ldr	r3, [r7, #20]
   10358:	2b00      	cmp	r3, #0
   1035a:	d00a      	beq.n	10372 <mp_obj_new_fun_bc+0xa2>
        memcpy(o->extra_args, def_args->items, n_def_args * sizeof(mp_obj_t));
   1035c:	693b      	ldr	r3, [r7, #16]
   1035e:	f103 0010 	add.w	r0, r3, #16
   10362:	697b      	ldr	r3, [r7, #20]
   10364:	f103 0108 	add.w	r1, r3, #8
   10368:	69fb      	ldr	r3, [r7, #28]
   1036a:	009b      	lsls	r3, r3, #2
   1036c:	461a      	mov	r2, r3
   1036e:	f00e f8df 	bl	1e530 <memcpy>
    }
    if (def_kw_args != MP_OBJ_NULL) {
   10372:	68bb      	ldr	r3, [r7, #8]
   10374:	2b00      	cmp	r3, #0
   10376:	d005      	beq.n	10384 <mp_obj_new_fun_bc+0xb4>
        o->extra_args[n_def_args] = def_kw_args;
   10378:	693b      	ldr	r3, [r7, #16]
   1037a:	69fa      	ldr	r2, [r7, #28]
   1037c:	3204      	adds	r2, #4
   1037e:	68b9      	ldr	r1, [r7, #8]
   10380:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    }
    return MP_OBJ_FROM_PTR(o);
   10384:	693b      	ldr	r3, [r7, #16]
}
   10386:	4618      	mov	r0, r3
   10388:	3720      	adds	r7, #32
   1038a:	46bd      	mov	sp, r7
   1038c:	bd80      	pop	{r7, pc}
   1038e:	bf00      	nop
   10390:	00025a34 	.word	0x00025a34
   10394:	000247f4 	.word	0x000247f4
   10398:	00024894 	.word	0x00024894
   1039c:	00024538 	.word	0x00024538
   103a0:	000247b8 	.word	0x000247b8

000103a4 <MP_OBJ_IS_OBJ>:
   103a4:	b480      	push	{r7}
   103a6:	b083      	sub	sp, #12
   103a8:	af00      	add	r7, sp, #0
   103aa:	6078      	str	r0, [r7, #4]
   103ac:	687b      	ldr	r3, [r7, #4]
   103ae:	f003 0303 	and.w	r3, r3, #3
   103b2:	2b00      	cmp	r3, #0
   103b4:	bf0c      	ite	eq
   103b6:	2301      	moveq	r3, #1
   103b8:	2300      	movne	r3, #0
   103ba:	b2db      	uxtb	r3, r3
   103bc:	4618      	mov	r0, r3
   103be:	370c      	adds	r7, #12
   103c0:	46bd      	mov	sp, r7
   103c2:	f85d 7b04 	ldr.w	r7, [sp], #4
   103c6:	4770      	bx	lr

000103c8 <mp_globals_get>:
static inline mp_obj_dict_t *mp_globals_get(void) { return MP_STATE_THREAD(dict_globals); }
   103c8:	b480      	push	{r7}
   103ca:	af00      	add	r7, sp, #0
   103cc:	4b03      	ldr	r3, [pc, #12]	; (103dc <mp_globals_get+0x14>)
   103ce:	689b      	ldr	r3, [r3, #8]
   103d0:	4618      	mov	r0, r3
   103d2:	46bd      	mov	sp, r7
   103d4:	f85d 7b04 	ldr.w	r7, [sp], #4
   103d8:	4770      	bx	lr
   103da:	bf00      	nop
   103dc:	20001248 	.word	0x20001248

000103e0 <mp_globals_set>:
static inline void mp_globals_set(mp_obj_dict_t *d) { MP_STATE_THREAD(dict_globals) = d; }
   103e0:	b480      	push	{r7}
   103e2:	b083      	sub	sp, #12
   103e4:	af00      	add	r7, sp, #0
   103e6:	6078      	str	r0, [r7, #4]
   103e8:	4a04      	ldr	r2, [pc, #16]	; (103fc <mp_globals_set+0x1c>)
   103ea:	687b      	ldr	r3, [r7, #4]
   103ec:	6093      	str	r3, [r2, #8]
   103ee:	bf00      	nop
   103f0:	370c      	adds	r7, #12
   103f2:	46bd      	mov	sp, r7
   103f4:	f85d 7b04 	ldr.w	r7, [sp], #4
   103f8:	4770      	bx	lr
   103fa:	bf00      	nop
   103fc:	20001248 	.word	0x20001248

00010400 <gen_wrap_call>:
    mp_obj_base_t base;
    mp_obj_dict_t *globals;
    mp_code_state_t code_state;
} mp_obj_gen_instance_t;

STATIC mp_obj_t gen_wrap_call(mp_obj_t self_in, size_t n_args, size_t n_kw, const mp_obj_t *args) {
   10400:	b580      	push	{r7, lr}
   10402:	b088      	sub	sp, #32
   10404:	af00      	add	r7, sp, #0
   10406:	60f8      	str	r0, [r7, #12]
   10408:	60b9      	str	r1, [r7, #8]
   1040a:	607a      	str	r2, [r7, #4]
   1040c:	603b      	str	r3, [r7, #0]
    // A generating function is just a bytecode function with type mp_type_gen_wrap
    mp_obj_fun_bc_t *self_fun = MP_OBJ_TO_PTR(self_in);
   1040e:	68fb      	ldr	r3, [r7, #12]
   10410:	61fb      	str	r3, [r7, #28]

    // bytecode prelude: get state size and exception stack size
    size_t n_state = mp_decode_uint_value(self_fun->bytecode);
   10412:	69fb      	ldr	r3, [r7, #28]
   10414:	689b      	ldr	r3, [r3, #8]
   10416:	4618      	mov	r0, r3
   10418:	f00a fc75 	bl	1ad06 <mp_decode_uint_value>
   1041c:	61b8      	str	r0, [r7, #24]
    size_t n_exc_stack = mp_decode_uint_value(mp_decode_uint_skip(self_fun->bytecode));
   1041e:	69fb      	ldr	r3, [r7, #28]
   10420:	689b      	ldr	r3, [r3, #8]
   10422:	4618      	mov	r0, r3
   10424:	f00a fc7c 	bl	1ad20 <mp_decode_uint_skip>
   10428:	4603      	mov	r3, r0
   1042a:	4618      	mov	r0, r3
   1042c:	f00a fc6b 	bl	1ad06 <mp_decode_uint_value>
   10430:	6178      	str	r0, [r7, #20]

    // allocate the generator object, with room for local stack and exception stack
    mp_obj_gen_instance_t *o = m_new_obj_var(mp_obj_gen_instance_t, byte,
   10432:	697a      	ldr	r2, [r7, #20]
   10434:	4613      	mov	r3, r2
   10436:	005b      	lsls	r3, r3, #1
   10438:	441a      	add	r2, r3
   1043a:	69bb      	ldr	r3, [r7, #24]
   1043c:	4413      	add	r3, r2
   1043e:	3307      	adds	r3, #7
   10440:	009b      	lsls	r3, r3, #2
   10442:	4618      	mov	r0, r3
   10444:	f7ef ff6a 	bl	31c <m_malloc>
   10448:	6138      	str	r0, [r7, #16]
        n_state * sizeof(mp_obj_t) + n_exc_stack * sizeof(mp_exc_stack_t));
    o->base.type = &mp_type_gen_instance;
   1044a:	693b      	ldr	r3, [r7, #16]
   1044c:	4a0c      	ldr	r2, [pc, #48]	; (10480 <gen_wrap_call+0x80>)
   1044e:	601a      	str	r2, [r3, #0]

    o->globals = self_fun->globals;
   10450:	69fb      	ldr	r3, [r7, #28]
   10452:	685a      	ldr	r2, [r3, #4]
   10454:	693b      	ldr	r3, [r7, #16]
   10456:	605a      	str	r2, [r3, #4]
    o->code_state.fun_bc = self_fun;
   10458:	693b      	ldr	r3, [r7, #16]
   1045a:	69fa      	ldr	r2, [r7, #28]
   1045c:	609a      	str	r2, [r3, #8]
    o->code_state.ip = 0;
   1045e:	693b      	ldr	r3, [r7, #16]
   10460:	2200      	movs	r2, #0
   10462:	60da      	str	r2, [r3, #12]
    mp_setup_code_state(&o->code_state, n_args, n_kw, args);
   10464:	693b      	ldr	r3, [r7, #16]
   10466:	f103 0008 	add.w	r0, r3, #8
   1046a:	683b      	ldr	r3, [r7, #0]
   1046c:	687a      	ldr	r2, [r7, #4]
   1046e:	68b9      	ldr	r1, [r7, #8]
   10470:	f00a fc9a 	bl	1ada8 <mp_setup_code_state>
    return MP_OBJ_FROM_PTR(o);
   10474:	693b      	ldr	r3, [r7, #16]
}
   10476:	4618      	mov	r0, r3
   10478:	3720      	adds	r7, #32
   1047a:	46bd      	mov	sp, r7
   1047c:	bd80      	pop	{r7, pc}
   1047e:	bf00      	nop
   10480:	00024a94 	.word	0x00024a94

00010484 <gen_instance_print>:
#endif // MICROPY_EMIT_NATIVE

/******************************************************************************/
/* generator instance                                                         */

STATIC void gen_instance_print(const mp_print_t *print, mp_obj_t self_in, mp_print_kind_t kind) {
   10484:	b580      	push	{r7, lr}
   10486:	b086      	sub	sp, #24
   10488:	af00      	add	r7, sp, #0
   1048a:	60f8      	str	r0, [r7, #12]
   1048c:	60b9      	str	r1, [r7, #8]
   1048e:	607a      	str	r2, [r7, #4]
    (void)kind;
    mp_obj_gen_instance_t *self = MP_OBJ_TO_PTR(self_in);
   10490:	68bb      	ldr	r3, [r7, #8]
   10492:	617b      	str	r3, [r7, #20]
    mp_printf(print, "<generator object '%q' at %p>", mp_obj_fun_get_name(MP_OBJ_FROM_PTR(self->code_state.fun_bc)), self);
   10494:	697b      	ldr	r3, [r7, #20]
   10496:	689b      	ldr	r3, [r3, #8]
   10498:	4618      	mov	r0, r3
   1049a:	f7ff fe21 	bl	100e0 <mp_obj_fun_get_name>
   1049e:	4602      	mov	r2, r0
   104a0:	697b      	ldr	r3, [r7, #20]
   104a2:	4904      	ldr	r1, [pc, #16]	; (104b4 <gen_instance_print+0x30>)
   104a4:	68f8      	ldr	r0, [r7, #12]
   104a6:	f7f1 fde3 	bl	2070 <mp_printf>
}
   104aa:	bf00      	nop
   104ac:	3718      	adds	r7, #24
   104ae:	46bd      	mov	sp, r7
   104b0:	bd80      	pop	{r7, pc}
   104b2:	bf00      	nop
   104b4:	000248e4 	.word	0x000248e4

000104b8 <mp_obj_gen_resume>:

mp_vm_return_kind_t mp_obj_gen_resume(mp_obj_t self_in, mp_obj_t send_value, mp_obj_t throw_value, mp_obj_t *ret_val) {
   104b8:	b580      	push	{r7, lr}
   104ba:	b086      	sub	sp, #24
   104bc:	af00      	add	r7, sp, #0
   104be:	60f8      	str	r0, [r7, #12]
   104c0:	60b9      	str	r1, [r7, #8]
   104c2:	607a      	str	r2, [r7, #4]
   104c4:	603b      	str	r3, [r7, #0]
    MP_STACK_CHECK();
    mp_check_self(MP_OBJ_IS_TYPE(self_in, &mp_type_gen_instance));
   104c6:	68f8      	ldr	r0, [r7, #12]
   104c8:	f7ff ff6c 	bl	103a4 <MP_OBJ_IS_OBJ>
   104cc:	4603      	mov	r3, r0
   104ce:	2b00      	cmp	r3, #0
   104d0:	d004      	beq.n	104dc <mp_obj_gen_resume+0x24>
   104d2:	68fb      	ldr	r3, [r7, #12]
   104d4:	681b      	ldr	r3, [r3, #0]
   104d6:	4a49      	ldr	r2, [pc, #292]	; (105fc <mp_obj_gen_resume+0x144>)
   104d8:	4293      	cmp	r3, r2
   104da:	d005      	beq.n	104e8 <mp_obj_gen_resume+0x30>
   104dc:	4b48      	ldr	r3, [pc, #288]	; (10600 <mp_obj_gen_resume+0x148>)
   104de:	4a49      	ldr	r2, [pc, #292]	; (10604 <mp_obj_gen_resume+0x14c>)
   104e0:	2186      	movs	r1, #134	; 0x86
   104e2:	4849      	ldr	r0, [pc, #292]	; (10608 <mp_obj_gen_resume+0x150>)
   104e4:	f00c fcfc 	bl	1cee0 <__assert_func>
    mp_obj_gen_instance_t *self = MP_OBJ_TO_PTR(self_in);
   104e8:	68fb      	ldr	r3, [r7, #12]
   104ea:	617b      	str	r3, [r7, #20]
    if (self->code_state.ip == 0) {
   104ec:	697b      	ldr	r3, [r7, #20]
   104ee:	68db      	ldr	r3, [r3, #12]
   104f0:	2b00      	cmp	r3, #0
   104f2:	d104      	bne.n	104fe <mp_obj_gen_resume+0x46>
        // Trying to resume already stopped generator
        *ret_val = MP_OBJ_STOP_ITERATION;
   104f4:	683b      	ldr	r3, [r7, #0]
   104f6:	2204      	movs	r2, #4
   104f8:	601a      	str	r2, [r3, #0]
        return MP_VM_RETURN_NORMAL;
   104fa:	2300      	movs	r3, #0
   104fc:	e07a      	b.n	105f4 <mp_obj_gen_resume+0x13c>
    }
    if (self->code_state.sp == self->code_state.state - 1) {
   104fe:	697b      	ldr	r3, [r7, #20]
   10500:	691a      	ldr	r2, [r3, #16]
   10502:	697b      	ldr	r3, [r7, #20]
   10504:	331c      	adds	r3, #28
   10506:	3b04      	subs	r3, #4
   10508:	429a      	cmp	r2, r3
   1050a:	d106      	bne.n	1051a <mp_obj_gen_resume+0x62>
        if (send_value != mp_const_none) {
   1050c:	68bb      	ldr	r3, [r7, #8]
   1050e:	4a3f      	ldr	r2, [pc, #252]	; (1060c <mp_obj_gen_resume+0x154>)
   10510:	4293      	cmp	r3, r2
   10512:	d015      	beq.n	10540 <mp_obj_gen_resume+0x88>
            mp_raise_TypeError("can't send non-None value to a just-started generator");
   10514:	483e      	ldr	r0, [pc, #248]	; (10610 <mp_obj_gen_resume+0x158>)
   10516:	f7fc ff39 	bl	d38c <mp_raise_TypeError>
        }
    } else {
        #if MICROPY_PY_GENERATOR_PEND_THROW
        // If exception is pending (set using .pend_throw()), process it now.
        if (*self->code_state.sp != mp_const_none) {
   1051a:	697b      	ldr	r3, [r7, #20]
   1051c:	691b      	ldr	r3, [r3, #16]
   1051e:	681b      	ldr	r3, [r3, #0]
   10520:	4a3a      	ldr	r2, [pc, #232]	; (1060c <mp_obj_gen_resume+0x154>)
   10522:	4293      	cmp	r3, r2
   10524:	d008      	beq.n	10538 <mp_obj_gen_resume+0x80>
            throw_value = *self->code_state.sp;
   10526:	697b      	ldr	r3, [r7, #20]
   10528:	691b      	ldr	r3, [r3, #16]
   1052a:	681b      	ldr	r3, [r3, #0]
   1052c:	607b      	str	r3, [r7, #4]
            *self->code_state.sp = MP_OBJ_NULL;
   1052e:	697b      	ldr	r3, [r7, #20]
   10530:	691b      	ldr	r3, [r3, #16]
   10532:	2200      	movs	r2, #0
   10534:	601a      	str	r2, [r3, #0]
   10536:	e003      	b.n	10540 <mp_obj_gen_resume+0x88>
        } else
        #endif
        {
            *self->code_state.sp = send_value;
   10538:	697b      	ldr	r3, [r7, #20]
   1053a:	691b      	ldr	r3, [r3, #16]
   1053c:	68ba      	ldr	r2, [r7, #8]
   1053e:	601a      	str	r2, [r3, #0]
        }
    }

    // We set self->globals=NULL while executing, for a sentinel to ensure the generator
    // cannot be reentered during execution
    if (self->globals == NULL) {
   10540:	697b      	ldr	r3, [r7, #20]
   10542:	685b      	ldr	r3, [r3, #4]
   10544:	2b00      	cmp	r3, #0
   10546:	d102      	bne.n	1054e <mp_obj_gen_resume+0x96>
        mp_raise_ValueError("generator already executing");
   10548:	4832      	ldr	r0, [pc, #200]	; (10614 <mp_obj_gen_resume+0x15c>)
   1054a:	f7fc ff14 	bl	d376 <mp_raise_ValueError>
    }

    // Set up the correct globals context for the generator and execute it
    self->code_state.old_globals = mp_globals_get();
   1054e:	f7ff ff3b 	bl	103c8 <mp_globals_get>
   10552:	4602      	mov	r2, r0
   10554:	697b      	ldr	r3, [r7, #20]
   10556:	619a      	str	r2, [r3, #24]
    mp_globals_set(self->globals);
   10558:	697b      	ldr	r3, [r7, #20]
   1055a:	685b      	ldr	r3, [r3, #4]
   1055c:	4618      	mov	r0, r3
   1055e:	f7ff ff3f 	bl	103e0 <mp_globals_set>
    self->globals = NULL;
   10562:	697b      	ldr	r3, [r7, #20]
   10564:	2200      	movs	r2, #0
   10566:	605a      	str	r2, [r3, #4]
        ret_kind = fun((void*)&self->code_state, throw_value);
    } else
    #endif
    {
        // A bytecode generator
        ret_kind = mp_execute_bytecode(&self->code_state, throw_value);
   10568:	697b      	ldr	r3, [r7, #20]
   1056a:	3308      	adds	r3, #8
   1056c:	6879      	ldr	r1, [r7, #4]
   1056e:	4618      	mov	r0, r3
   10570:	f009 fc1c 	bl	19dac <mp_execute_bytecode>
   10574:	6138      	str	r0, [r7, #16]
    }

    self->globals = mp_globals_get();
   10576:	f7ff ff27 	bl	103c8 <mp_globals_get>
   1057a:	4602      	mov	r2, r0
   1057c:	697b      	ldr	r3, [r7, #20]
   1057e:	605a      	str	r2, [r3, #4]
    mp_globals_set(self->code_state.old_globals);
   10580:	697b      	ldr	r3, [r7, #20]
   10582:	699b      	ldr	r3, [r3, #24]
   10584:	4618      	mov	r0, r3
   10586:	f7ff ff2b 	bl	103e0 <mp_globals_set>

    switch (ret_kind) {
   1058a:	693b      	ldr	r3, [r7, #16]
   1058c:	2b01      	cmp	r3, #1
   1058e:	d00a      	beq.n	105a6 <mp_obj_gen_resume+0xee>
   10590:	2b02      	cmp	r3, #2
   10592:	d012      	beq.n	105ba <mp_obj_gen_resume+0x102>
        case MP_VM_RETURN_NORMAL:
        default:
            // Explicitly mark generator as completed. If we don't do this,
            // subsequent next() may re-execute statements after last yield
            // again and again, leading to side effects.
            self->code_state.ip = 0;
   10594:	697b      	ldr	r3, [r7, #20]
   10596:	2200      	movs	r2, #0
   10598:	60da      	str	r2, [r3, #12]
            *ret_val = *self->code_state.sp;
   1059a:	697b      	ldr	r3, [r7, #20]
   1059c:	691b      	ldr	r3, [r3, #16]
   1059e:	681a      	ldr	r2, [r3, #0]
   105a0:	683b      	ldr	r3, [r7, #0]
   105a2:	601a      	str	r2, [r3, #0]
            break;
   105a4:	e025      	b.n	105f2 <mp_obj_gen_resume+0x13a>

        case MP_VM_RETURN_YIELD:
            *ret_val = *self->code_state.sp;
   105a6:	697b      	ldr	r3, [r7, #20]
   105a8:	691b      	ldr	r3, [r3, #16]
   105aa:	681a      	ldr	r2, [r3, #0]
   105ac:	683b      	ldr	r3, [r7, #0]
   105ae:	601a      	str	r2, [r3, #0]
            #if MICROPY_PY_GENERATOR_PEND_THROW
            *self->code_state.sp = mp_const_none;
   105b0:	697b      	ldr	r3, [r7, #20]
   105b2:	691b      	ldr	r3, [r3, #16]
   105b4:	4a15      	ldr	r2, [pc, #84]	; (1060c <mp_obj_gen_resume+0x154>)
   105b6:	601a      	str	r2, [r3, #0]
            #endif
            break;
   105b8:	e01b      	b.n	105f2 <mp_obj_gen_resume+0x13a>

        case MP_VM_RETURN_EXCEPTION: {
            self->code_state.ip = 0;
   105ba:	697b      	ldr	r3, [r7, #20]
   105bc:	2200      	movs	r2, #0
   105be:	60da      	str	r2, [r3, #12]
            *ret_val = self->code_state.state[0];
   105c0:	697b      	ldr	r3, [r7, #20]
   105c2:	69da      	ldr	r2, [r3, #28]
   105c4:	683b      	ldr	r3, [r7, #0]
   105c6:	601a      	str	r2, [r3, #0]
            // PEP479: if StopIteration is raised inside a generator it is replaced with RuntimeError
            if (mp_obj_is_subclass_fast(MP_OBJ_FROM_PTR(mp_obj_get_type(*ret_val)), MP_OBJ_FROM_PTR(&mp_type_StopIteration))) {
   105c8:	683b      	ldr	r3, [r7, #0]
   105ca:	681b      	ldr	r3, [r3, #0]
   105cc:	4618      	mov	r0, r3
   105ce:	f7fd fb45 	bl	dc5c <mp_obj_get_type>
   105d2:	4603      	mov	r3, r0
   105d4:	4910      	ldr	r1, [pc, #64]	; (10618 <mp_obj_gen_resume+0x160>)
   105d6:	4618      	mov	r0, r3
   105d8:	f007 f944 	bl	17864 <mp_obj_is_subclass_fast>
   105dc:	4603      	mov	r3, r0
   105de:	2b00      	cmp	r3, #0
   105e0:	d006      	beq.n	105f0 <mp_obj_gen_resume+0x138>
                *ret_val = mp_obj_new_exception_msg(&mp_type_RuntimeError, "generator raised StopIteration");
   105e2:	490e      	ldr	r1, [pc, #56]	; (1061c <mp_obj_gen_resume+0x164>)
   105e4:	480e      	ldr	r0, [pc, #56]	; (10620 <mp_obj_gen_resume+0x168>)
   105e6:	f7ff f9bd 	bl	f964 <mp_obj_new_exception_msg>
   105ea:	4602      	mov	r2, r0
   105ec:	683b      	ldr	r3, [r7, #0]
   105ee:	601a      	str	r2, [r3, #0]
            }
            break;
   105f0:	bf00      	nop
        }
    }

    return ret_kind;
   105f2:	693b      	ldr	r3, [r7, #16]
}
   105f4:	4618      	mov	r0, r3
   105f6:	3718      	adds	r7, #24
   105f8:	46bd      	mov	sp, r7
   105fa:	bd80      	pop	{r7, pc}
   105fc:	00024a94 	.word	0x00024a94
   10600:	00024904 	.word	0x00024904
   10604:	00024ad0 	.word	0x00024ad0
   10608:	00024968 	.word	0x00024968
   1060c:	0002511c 	.word	0x0002511c
   10610:	00024980 	.word	0x00024980
   10614:	000249b8 	.word	0x000249b8
   10618:	00023f3c 	.word	0x00023f3c
   1061c:	000249d4 	.word	0x000249d4
   10620:	00024284 	.word	0x00024284

00010624 <gen_resume_and_raise>:

STATIC mp_obj_t gen_resume_and_raise(mp_obj_t self_in, mp_obj_t send_value, mp_obj_t throw_value) {
   10624:	b580      	push	{r7, lr}
   10626:	b086      	sub	sp, #24
   10628:	af00      	add	r7, sp, #0
   1062a:	60f8      	str	r0, [r7, #12]
   1062c:	60b9      	str	r1, [r7, #8]
   1062e:	607a      	str	r2, [r7, #4]
    mp_obj_t ret;
    switch (mp_obj_gen_resume(self_in, send_value, throw_value, &ret)) {
   10630:	f107 0314 	add.w	r3, r7, #20
   10634:	687a      	ldr	r2, [r7, #4]
   10636:	68b9      	ldr	r1, [r7, #8]
   10638:	68f8      	ldr	r0, [r7, #12]
   1063a:	f7ff ff3d 	bl	104b8 <mp_obj_gen_resume>
   1063e:	4603      	mov	r3, r0
   10640:	2b01      	cmp	r3, #1
   10642:	d015      	beq.n	10670 <gen_resume_and_raise+0x4c>
   10644:	2b02      	cmp	r3, #2
   10646:	d015      	beq.n	10674 <gen_resume_and_raise+0x50>
        case MP_VM_RETURN_NORMAL:
        default:
            // Optimize return w/o value in case generator is used in for loop
            if (ret == mp_const_none || ret == MP_OBJ_STOP_ITERATION) {
   10648:	697b      	ldr	r3, [r7, #20]
   1064a:	4a0e      	ldr	r2, [pc, #56]	; (10684 <gen_resume_and_raise+0x60>)
   1064c:	4293      	cmp	r3, r2
   1064e:	d002      	beq.n	10656 <gen_resume_and_raise+0x32>
   10650:	697b      	ldr	r3, [r7, #20]
   10652:	2b04      	cmp	r3, #4
   10654:	d101      	bne.n	1065a <gen_resume_and_raise+0x36>
                return MP_OBJ_STOP_ITERATION;
   10656:	2304      	movs	r3, #4
   10658:	e010      	b.n	1067c <gen_resume_and_raise+0x58>
            } else {
                nlr_raise(mp_obj_new_exception_args(&mp_type_StopIteration, 1, &ret));
   1065a:	f107 0314 	add.w	r3, r7, #20
   1065e:	461a      	mov	r2, r3
   10660:	2101      	movs	r1, #1
   10662:	4809      	ldr	r0, [pc, #36]	; (10688 <gen_resume_and_raise+0x64>)
   10664:	f7ff f958 	bl	f918 <mp_obj_new_exception_args>
   10668:	4603      	mov	r3, r0
   1066a:	4618      	mov	r0, r3
   1066c:	f7ef fe38 	bl	2e0 <nlr_jump>
            }

        case MP_VM_RETURN_YIELD:
            return ret;
   10670:	697b      	ldr	r3, [r7, #20]
   10672:	e003      	b.n	1067c <gen_resume_and_raise+0x58>

        case MP_VM_RETURN_EXCEPTION:
            nlr_raise(ret);
   10674:	697b      	ldr	r3, [r7, #20]
   10676:	4618      	mov	r0, r3
   10678:	f7ef fe32 	bl	2e0 <nlr_jump>
    }
}
   1067c:	4618      	mov	r0, r3
   1067e:	3718      	adds	r7, #24
   10680:	46bd      	mov	sp, r7
   10682:	bd80      	pop	{r7, pc}
   10684:	0002511c 	.word	0x0002511c
   10688:	00023f3c 	.word	0x00023f3c

0001068c <gen_instance_iternext>:

STATIC mp_obj_t gen_instance_iternext(mp_obj_t self_in) {
   1068c:	b580      	push	{r7, lr}
   1068e:	b082      	sub	sp, #8
   10690:	af00      	add	r7, sp, #0
   10692:	6078      	str	r0, [r7, #4]
    return gen_resume_and_raise(self_in, mp_const_none, MP_OBJ_NULL);
   10694:	2200      	movs	r2, #0
   10696:	4904      	ldr	r1, [pc, #16]	; (106a8 <gen_instance_iternext+0x1c>)
   10698:	6878      	ldr	r0, [r7, #4]
   1069a:	f7ff ffc3 	bl	10624 <gen_resume_and_raise>
   1069e:	4603      	mov	r3, r0
}
   106a0:	4618      	mov	r0, r3
   106a2:	3708      	adds	r7, #8
   106a4:	46bd      	mov	sp, r7
   106a6:	bd80      	pop	{r7, pc}
   106a8:	0002511c 	.word	0x0002511c

000106ac <gen_instance_send>:

STATIC mp_obj_t gen_instance_send(mp_obj_t self_in, mp_obj_t send_value) {
   106ac:	b580      	push	{r7, lr}
   106ae:	b084      	sub	sp, #16
   106b0:	af00      	add	r7, sp, #0
   106b2:	6078      	str	r0, [r7, #4]
   106b4:	6039      	str	r1, [r7, #0]
    mp_obj_t ret = gen_resume_and_raise(self_in, send_value, MP_OBJ_NULL);
   106b6:	2200      	movs	r2, #0
   106b8:	6839      	ldr	r1, [r7, #0]
   106ba:	6878      	ldr	r0, [r7, #4]
   106bc:	f7ff ffb2 	bl	10624 <gen_resume_and_raise>
   106c0:	60f8      	str	r0, [r7, #12]
    if (ret == MP_OBJ_STOP_ITERATION) {
   106c2:	68fb      	ldr	r3, [r7, #12]
   106c4:	2b04      	cmp	r3, #4
   106c6:	d106      	bne.n	106d6 <gen_instance_send+0x2a>
        nlr_raise(mp_obj_new_exception(&mp_type_StopIteration));
   106c8:	4805      	ldr	r0, [pc, #20]	; (106e0 <gen_instance_send+0x34>)
   106ca:	f7ff f907 	bl	f8dc <mp_obj_new_exception>
   106ce:	4603      	mov	r3, r0
   106d0:	4618      	mov	r0, r3
   106d2:	f7ef fe05 	bl	2e0 <nlr_jump>
    } else {
        return ret;
   106d6:	68fb      	ldr	r3, [r7, #12]
    }
}
   106d8:	4618      	mov	r0, r3
   106da:	3710      	adds	r7, #16
   106dc:	46bd      	mov	sp, r7
   106de:	bd80      	pop	{r7, pc}
   106e0:	00023f3c 	.word	0x00023f3c

000106e4 <gen_instance_throw>:

STATIC MP_DEFINE_CONST_FUN_OBJ_2(gen_instance_send_obj, gen_instance_send);

STATIC mp_obj_t gen_instance_close(mp_obj_t self_in);
STATIC mp_obj_t gen_instance_throw(size_t n_args, const mp_obj_t *args) {
   106e4:	b580      	push	{r7, lr}
   106e6:	b084      	sub	sp, #16
   106e8:	af00      	add	r7, sp, #0
   106ea:	6078      	str	r0, [r7, #4]
   106ec:	6039      	str	r1, [r7, #0]
    mp_obj_t exc = (n_args == 2) ? args[1] : args[2];
   106ee:	687b      	ldr	r3, [r7, #4]
   106f0:	2b02      	cmp	r3, #2
   106f2:	d102      	bne.n	106fa <gen_instance_throw+0x16>
   106f4:	683b      	ldr	r3, [r7, #0]
   106f6:	685b      	ldr	r3, [r3, #4]
   106f8:	e001      	b.n	106fe <gen_instance_throw+0x1a>
   106fa:	683b      	ldr	r3, [r7, #0]
   106fc:	689b      	ldr	r3, [r3, #8]
   106fe:	60fb      	str	r3, [r7, #12]

    mp_obj_t ret = gen_resume_and_raise(args[0], mp_const_none, exc);
   10700:	683b      	ldr	r3, [r7, #0]
   10702:	681b      	ldr	r3, [r3, #0]
   10704:	68fa      	ldr	r2, [r7, #12]
   10706:	490a      	ldr	r1, [pc, #40]	; (10730 <gen_instance_throw+0x4c>)
   10708:	4618      	mov	r0, r3
   1070a:	f7ff ff8b 	bl	10624 <gen_resume_and_raise>
   1070e:	60b8      	str	r0, [r7, #8]
    if (ret == MP_OBJ_STOP_ITERATION) {
   10710:	68bb      	ldr	r3, [r7, #8]
   10712:	2b04      	cmp	r3, #4
   10714:	d106      	bne.n	10724 <gen_instance_throw+0x40>
        nlr_raise(mp_obj_new_exception(&mp_type_StopIteration));
   10716:	4807      	ldr	r0, [pc, #28]	; (10734 <gen_instance_throw+0x50>)
   10718:	f7ff f8e0 	bl	f8dc <mp_obj_new_exception>
   1071c:	4603      	mov	r3, r0
   1071e:	4618      	mov	r0, r3
   10720:	f7ef fdde 	bl	2e0 <nlr_jump>
    } else {
        return ret;
   10724:	68bb      	ldr	r3, [r7, #8]
    }
}
   10726:	4618      	mov	r0, r3
   10728:	3710      	adds	r7, #16
   1072a:	46bd      	mov	sp, r7
   1072c:	bd80      	pop	{r7, pc}
   1072e:	bf00      	nop
   10730:	0002511c 	.word	0x0002511c
   10734:	00023f3c 	.word	0x00023f3c

00010738 <gen_instance_close>:

STATIC MP_DEFINE_CONST_FUN_OBJ_VAR_BETWEEN(gen_instance_throw_obj, 2, 4, gen_instance_throw);

STATIC mp_obj_t gen_instance_close(mp_obj_t self_in) {
   10738:	b580      	push	{r7, lr}
   1073a:	b084      	sub	sp, #16
   1073c:	af00      	add	r7, sp, #0
   1073e:	6078      	str	r0, [r7, #4]
    mp_obj_t ret;
    switch (mp_obj_gen_resume(self_in, mp_const_none, MP_OBJ_FROM_PTR(&mp_const_GeneratorExit_obj), &ret)) {
   10740:	f107 030c 	add.w	r3, r7, #12
   10744:	4a12      	ldr	r2, [pc, #72]	; (10790 <gen_instance_close+0x58>)
   10746:	4913      	ldr	r1, [pc, #76]	; (10794 <gen_instance_close+0x5c>)
   10748:	6878      	ldr	r0, [r7, #4]
   1074a:	f7ff feb5 	bl	104b8 <mp_obj_gen_resume>
   1074e:	4603      	mov	r3, r0
   10750:	2b01      	cmp	r3, #1
   10752:	d002      	beq.n	1075a <gen_instance_close+0x22>
   10754:	2b02      	cmp	r3, #2
   10756:	d004      	beq.n	10762 <gen_instance_close+0x2a>
   10758:	e015      	b.n	10786 <gen_instance_close+0x4e>
        case MP_VM_RETURN_YIELD:
            mp_raise_msg(&mp_type_RuntimeError, "generator ignored GeneratorExit");
   1075a:	490f      	ldr	r1, [pc, #60]	; (10798 <gen_instance_close+0x60>)
   1075c:	480f      	ldr	r0, [pc, #60]	; (1079c <gen_instance_close+0x64>)
   1075e:	f7fc fdf3 	bl	d348 <mp_raise_msg>

        // Swallow GeneratorExit (== successful close), and re-raise any other
        case MP_VM_RETURN_EXCEPTION:
            // ret should always be an instance of an exception class
            if (mp_obj_is_subclass_fast(MP_OBJ_FROM_PTR(mp_obj_get_type(ret)), MP_OBJ_FROM_PTR(&mp_type_GeneratorExit))) {
   10762:	68fb      	ldr	r3, [r7, #12]
   10764:	4618      	mov	r0, r3
   10766:	f7fd fa79 	bl	dc5c <mp_obj_get_type>
   1076a:	4603      	mov	r3, r0
   1076c:	490c      	ldr	r1, [pc, #48]	; (107a0 <gen_instance_close+0x68>)
   1076e:	4618      	mov	r0, r3
   10770:	f007 f878 	bl	17864 <mp_obj_is_subclass_fast>
   10774:	4603      	mov	r3, r0
   10776:	2b00      	cmp	r3, #0
   10778:	d001      	beq.n	1077e <gen_instance_close+0x46>
                return mp_const_none;
   1077a:	4b06      	ldr	r3, [pc, #24]	; (10794 <gen_instance_close+0x5c>)
   1077c:	e004      	b.n	10788 <gen_instance_close+0x50>
            }
            nlr_raise(ret);
   1077e:	68fb      	ldr	r3, [r7, #12]
   10780:	4618      	mov	r0, r3
   10782:	f7ef fdad 	bl	2e0 <nlr_jump>

        default:
            // The only choice left is MP_VM_RETURN_NORMAL which is successful close
            return mp_const_none;
   10786:	4b03      	ldr	r3, [pc, #12]	; (10794 <gen_instance_close+0x5c>)
    }
}
   10788:	4618      	mov	r0, r3
   1078a:	3710      	adds	r7, #16
   1078c:	46bd      	mov	sp, r7
   1078e:	bd80      	pop	{r7, pc}
   10790:	00023df8 	.word	0x00023df8
   10794:	0002511c 	.word	0x0002511c
   10798:	00024a08 	.word	0x00024a08
   1079c:	00024284 	.word	0x00024284
   107a0:	00023ec4 	.word	0x00023ec4

000107a4 <gen_instance_pend_throw>:

STATIC MP_DEFINE_CONST_FUN_OBJ_1(gen_instance_close_obj, gen_instance_close);

STATIC mp_obj_t gen_instance_pend_throw(mp_obj_t self_in, mp_obj_t exc_in) {
   107a4:	b580      	push	{r7, lr}
   107a6:	b084      	sub	sp, #16
   107a8:	af00      	add	r7, sp, #0
   107aa:	6078      	str	r0, [r7, #4]
   107ac:	6039      	str	r1, [r7, #0]
    mp_obj_gen_instance_t *self = MP_OBJ_TO_PTR(self_in);
   107ae:	687b      	ldr	r3, [r7, #4]
   107b0:	60fb      	str	r3, [r7, #12]
    if (self->code_state.sp == self->code_state.state - 1) {
   107b2:	68fb      	ldr	r3, [r7, #12]
   107b4:	691a      	ldr	r2, [r3, #16]
   107b6:	68fb      	ldr	r3, [r7, #12]
   107b8:	331c      	adds	r3, #28
   107ba:	3b04      	subs	r3, #4
   107bc:	429a      	cmp	r2, r3
   107be:	d102      	bne.n	107c6 <gen_instance_pend_throw+0x22>
        mp_raise_TypeError("can't pend throw to just-started generator");
   107c0:	4807      	ldr	r0, [pc, #28]	; (107e0 <gen_instance_pend_throw+0x3c>)
   107c2:	f7fc fde3 	bl	d38c <mp_raise_TypeError>
    }
    mp_obj_t prev = *self->code_state.sp;
   107c6:	68fb      	ldr	r3, [r7, #12]
   107c8:	691b      	ldr	r3, [r3, #16]
   107ca:	681b      	ldr	r3, [r3, #0]
   107cc:	60bb      	str	r3, [r7, #8]
    *self->code_state.sp = exc_in;
   107ce:	68fb      	ldr	r3, [r7, #12]
   107d0:	691b      	ldr	r3, [r3, #16]
   107d2:	683a      	ldr	r2, [r7, #0]
   107d4:	601a      	str	r2, [r3, #0]
    return prev;
   107d6:	68bb      	ldr	r3, [r7, #8]
}
   107d8:	4618      	mov	r0, r3
   107da:	3710      	adds	r7, #16
   107dc:	46bd      	mov	sp, r7
   107de:	bd80      	pop	{r7, pc}
   107e0:	00024a30 	.word	0x00024a30

000107e4 <it_iternext>:
typedef struct _mp_obj_getitem_iter_t {
    mp_obj_base_t base;
    mp_obj_t args[3];
} mp_obj_getitem_iter_t;

STATIC mp_obj_t it_iternext(mp_obj_t self_in) {
   107e4:	b580      	push	{r7, lr}
   107e6:	b092      	sub	sp, #72	; 0x48
   107e8:	af00      	add	r7, sp, #0
   107ea:	6078      	str	r0, [r7, #4]
    mp_obj_getitem_iter_t *self = MP_OBJ_TO_PTR(self_in);
   107ec:	687b      	ldr	r3, [r7, #4]
   107ee:	647b      	str	r3, [r7, #68]	; 0x44
    nlr_buf_t nlr;
    if (nlr_push(&nlr) == 0) {
   107f0:	f107 030c 	add.w	r3, r7, #12
   107f4:	4618      	mov	r0, r3
   107f6:	f7ef fd61 	bl	2bc <nlr_push>
   107fa:	4603      	mov	r3, r0
   107fc:	2b00      	cmp	r3, #0
   107fe:	d115      	bne.n	1082c <it_iternext+0x48>
        // try to get next item
        mp_obj_t value = mp_call_method_n_kw(1, 0, self->args);
   10800:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   10802:	3304      	adds	r3, #4
   10804:	461a      	mov	r2, r3
   10806:	2100      	movs	r1, #0
   10808:	2001      	movs	r0, #1
   1080a:	f7fb fcbf 	bl	c18c <mp_call_method_n_kw>
   1080e:	6438      	str	r0, [r7, #64]	; 0x40
        self->args[2] = MP_OBJ_NEW_SMALL_INT(MP_OBJ_SMALL_INT_VALUE(self->args[2]) + 1);
   10810:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   10812:	68db      	ldr	r3, [r3, #12]
   10814:	105b      	asrs	r3, r3, #1
   10816:	3301      	adds	r3, #1
   10818:	005b      	lsls	r3, r3, #1
   1081a:	f043 0301 	orr.w	r3, r3, #1
   1081e:	461a      	mov	r2, r3
   10820:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   10822:	60da      	str	r2, [r3, #12]
        nlr_pop();
   10824:	f7ef fd38 	bl	298 <nlr_pop>
        return value;
   10828:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1082a:	e010      	b.n	1084e <it_iternext+0x6a>
    } else {
        // an exception was raised
        mp_obj_type_t *t = (mp_obj_type_t*)((mp_obj_base_t*)nlr.ret_val)->type;
   1082c:	693b      	ldr	r3, [r7, #16]
   1082e:	681b      	ldr	r3, [r3, #0]
   10830:	63fb      	str	r3, [r7, #60]	; 0x3c
        if (t == &mp_type_StopIteration || t == &mp_type_IndexError) {
   10832:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   10834:	4a08      	ldr	r2, [pc, #32]	; (10858 <it_iternext+0x74>)
   10836:	4293      	cmp	r3, r2
   10838:	d003      	beq.n	10842 <it_iternext+0x5e>
   1083a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1083c:	4a07      	ldr	r2, [pc, #28]	; (1085c <it_iternext+0x78>)
   1083e:	4293      	cmp	r3, r2
   10840:	d101      	bne.n	10846 <it_iternext+0x62>
            // return MP_OBJ_STOP_ITERATION instead of raising
            return MP_OBJ_STOP_ITERATION;
   10842:	2304      	movs	r3, #4
   10844:	e003      	b.n	1084e <it_iternext+0x6a>
        } else {
            // re-raise exception
            nlr_jump(nlr.ret_val);
   10846:	693b      	ldr	r3, [r7, #16]
   10848:	4618      	mov	r0, r3
   1084a:	f7ef fd49 	bl	2e0 <nlr_jump>
        }
    }
}
   1084e:	4618      	mov	r0, r3
   10850:	3748      	adds	r7, #72	; 0x48
   10852:	46bd      	mov	sp, r7
   10854:	bd80      	pop	{r7, pc}
   10856:	bf00      	nop
   10858:	00023f3c 	.word	0x00023f3c
   1085c:	00024158 	.word	0x00024158

00010860 <mp_obj_new_getitem_iter>:
    .getiter = mp_identity_getiter,
    .iternext = it_iternext,
};

// args are those returned from mp_load_method_maybe (ie either an attribute or a method)
mp_obj_t mp_obj_new_getitem_iter(mp_obj_t *args, mp_obj_iter_buf_t *iter_buf) {
   10860:	b480      	push	{r7}
   10862:	b085      	sub	sp, #20
   10864:	af00      	add	r7, sp, #0
   10866:	6078      	str	r0, [r7, #4]
   10868:	6039      	str	r1, [r7, #0]
    assert(sizeof(mp_obj_getitem_iter_t) <= sizeof(mp_obj_iter_buf_t));
    mp_obj_getitem_iter_t *o = (mp_obj_getitem_iter_t*)iter_buf;
   1086a:	683b      	ldr	r3, [r7, #0]
   1086c:	60fb      	str	r3, [r7, #12]
    o->base.type = &it_type;
   1086e:	68fb      	ldr	r3, [r7, #12]
   10870:	4a09      	ldr	r2, [pc, #36]	; (10898 <mp_obj_new_getitem_iter+0x38>)
   10872:	601a      	str	r2, [r3, #0]
    o->args[0] = args[0];
   10874:	687b      	ldr	r3, [r7, #4]
   10876:	681a      	ldr	r2, [r3, #0]
   10878:	68fb      	ldr	r3, [r7, #12]
   1087a:	605a      	str	r2, [r3, #4]
    o->args[1] = args[1];
   1087c:	687b      	ldr	r3, [r7, #4]
   1087e:	685a      	ldr	r2, [r3, #4]
   10880:	68fb      	ldr	r3, [r7, #12]
   10882:	609a      	str	r2, [r3, #8]
    o->args[2] = MP_OBJ_NEW_SMALL_INT(0);
   10884:	68fb      	ldr	r3, [r7, #12]
   10886:	2201      	movs	r2, #1
   10888:	60da      	str	r2, [r3, #12]
    return MP_OBJ_FROM_PTR(o);
   1088a:	68fb      	ldr	r3, [r7, #12]
}
   1088c:	4618      	mov	r0, r3
   1088e:	3714      	adds	r7, #20
   10890:	46bd      	mov	sp, r7
   10892:	f85d 7b04 	ldr.w	r7, [sp], #4
   10896:	4770      	bx	lr
   10898:	00024ae4 	.word	0x00024ae4

0001089c <MP_OBJ_IS_SMALL_INT>:
    { return ((((mp_int_t)(o)) & 1) != 0); }
   1089c:	b480      	push	{r7}
   1089e:	b083      	sub	sp, #12
   108a0:	af00      	add	r7, sp, #0
   108a2:	6078      	str	r0, [r7, #4]
   108a4:	687b      	ldr	r3, [r7, #4]
   108a6:	f003 0301 	and.w	r3, r3, #1
   108aa:	2b00      	cmp	r3, #0
   108ac:	bf14      	ite	ne
   108ae:	2301      	movne	r3, #1
   108b0:	2300      	moveq	r3, #0
   108b2:	b2db      	uxtb	r3, r3
   108b4:	4618      	mov	r0, r3
   108b6:	370c      	adds	r7, #12
   108b8:	46bd      	mov	sp, r7
   108ba:	f85d 7b04 	ldr.w	r7, [sp], #4
   108be:	4770      	bx	lr

000108c0 <MP_OBJ_IS_QSTR>:
    { return ((((mp_int_t)(o)) & 3) == 2); }
   108c0:	b480      	push	{r7}
   108c2:	b083      	sub	sp, #12
   108c4:	af00      	add	r7, sp, #0
   108c6:	6078      	str	r0, [r7, #4]
   108c8:	687b      	ldr	r3, [r7, #4]
   108ca:	f003 0303 	and.w	r3, r3, #3
   108ce:	2b02      	cmp	r3, #2
   108d0:	bf0c      	ite	eq
   108d2:	2301      	moveq	r3, #1
   108d4:	2300      	movne	r3, #0
   108d6:	b2db      	uxtb	r3, r3
   108d8:	4618      	mov	r0, r3
   108da:	370c      	adds	r7, #12
   108dc:	46bd      	mov	sp, r7
   108de:	f85d 7b04 	ldr.w	r7, [sp], #4
   108e2:	4770      	bx	lr

000108e4 <MP_OBJ_IS_OBJ>:
    { return ((((mp_int_t)(o)) & 3) == 0); }
   108e4:	b480      	push	{r7}
   108e6:	b083      	sub	sp, #12
   108e8:	af00      	add	r7, sp, #0
   108ea:	6078      	str	r0, [r7, #4]
   108ec:	687b      	ldr	r3, [r7, #4]
   108ee:	f003 0303 	and.w	r3, r3, #3
   108f2:	2b00      	cmp	r3, #0
   108f4:	bf0c      	ite	eq
   108f6:	2301      	moveq	r3, #1
   108f8:	2300      	movne	r3, #0
   108fa:	b2db      	uxtb	r3, r3
   108fc:	4618      	mov	r0, r3
   108fe:	370c      	adds	r7, #12
   10900:	46bd      	mov	sp, r7
   10902:	f85d 7b04 	ldr.w	r7, [sp], #4
   10906:	4770      	bx	lr

00010908 <mp_arg_check_num>:
static inline void mp_arg_check_num(size_t n_args, size_t n_kw, size_t n_args_min, size_t n_args_max, bool takes_kw) {
   10908:	b580      	push	{r7, lr}
   1090a:	b084      	sub	sp, #16
   1090c:	af00      	add	r7, sp, #0
   1090e:	60f8      	str	r0, [r7, #12]
   10910:	60b9      	str	r1, [r7, #8]
   10912:	607a      	str	r2, [r7, #4]
   10914:	603b      	str	r3, [r7, #0]
    mp_arg_check_num_sig(n_args, n_kw, (uint32_t)MP_OBJ_FUN_MAKE_SIG(n_args_min, n_args_max, takes_kw));
   10916:	687b      	ldr	r3, [r7, #4]
   10918:	045a      	lsls	r2, r3, #17
   1091a:	683b      	ldr	r3, [r7, #0]
   1091c:	005b      	lsls	r3, r3, #1
   1091e:	431a      	orrs	r2, r3
   10920:	7e3b      	ldrb	r3, [r7, #24]
   10922:	2b00      	cmp	r3, #0
   10924:	d001      	beq.n	1092a <mp_arg_check_num+0x22>
   10926:	2301      	movs	r3, #1
   10928:	e000      	b.n	1092c <mp_arg_check_num+0x24>
   1092a:	2300      	movs	r3, #0
   1092c:	4313      	orrs	r3, r2
   1092e:	461a      	mov	r2, r3
   10930:	68b9      	ldr	r1, [r7, #8]
   10932:	68f8      	ldr	r0, [r7, #12]
   10934:	f7fc fd50 	bl	d3d8 <mp_arg_check_num_sig>
}
   10938:	bf00      	nop
   1093a:	3710      	adds	r7, #16
   1093c:	46bd      	mov	sp, r7
   1093e:	bd80      	pop	{r7, pc}

00010940 <mp_obj_int_make_new>:
#if MICROPY_PY_BUILTINS_FLOAT
#include <math.h>
#endif

// This dispatcher function is expected to be independent of the implementation of long int
STATIC mp_obj_t mp_obj_int_make_new(const mp_obj_type_t *type_in, size_t n_args, size_t n_kw, const mp_obj_t *args) {
   10940:	b590      	push	{r4, r7, lr}
   10942:	b08b      	sub	sp, #44	; 0x2c
   10944:	af02      	add	r7, sp, #8
   10946:	60f8      	str	r0, [r7, #12]
   10948:	60b9      	str	r1, [r7, #8]
   1094a:	607a      	str	r2, [r7, #4]
   1094c:	603b      	str	r3, [r7, #0]
    (void)type_in;
    mp_arg_check_num(n_args, n_kw, 0, 2, false);
   1094e:	2300      	movs	r3, #0
   10950:	9300      	str	r3, [sp, #0]
   10952:	2302      	movs	r3, #2
   10954:	2200      	movs	r2, #0
   10956:	6879      	ldr	r1, [r7, #4]
   10958:	68b8      	ldr	r0, [r7, #8]
   1095a:	f7ff ffd5 	bl	10908 <mp_arg_check_num>

    switch (n_args) {
   1095e:	68bb      	ldr	r3, [r7, #8]
   10960:	2b00      	cmp	r3, #0
   10962:	d002      	beq.n	1096a <mp_obj_int_make_new+0x2a>
   10964:	2b01      	cmp	r3, #1
   10966:	d002      	beq.n	1096e <mp_obj_int_make_new+0x2e>
   10968:	e04a      	b.n	10a00 <mp_obj_int_make_new+0xc0>
        case 0:
            return MP_OBJ_NEW_SMALL_INT(0);
   1096a:	2301      	movs	r3, #1
   1096c:	e05f      	b.n	10a2e <mp_obj_int_make_new+0xee>

        case 1:
            if (MP_OBJ_IS_INT(args[0])) {
   1096e:	683b      	ldr	r3, [r7, #0]
   10970:	681b      	ldr	r3, [r3, #0]
   10972:	4618      	mov	r0, r3
   10974:	f7ff ff92 	bl	1089c <MP_OBJ_IS_SMALL_INT>
   10978:	4603      	mov	r3, r0
   1097a:	2b00      	cmp	r3, #0
   1097c:	d10d      	bne.n	1099a <mp_obj_int_make_new+0x5a>
   1097e:	683b      	ldr	r3, [r7, #0]
   10980:	681b      	ldr	r3, [r3, #0]
   10982:	4618      	mov	r0, r3
   10984:	f7ff ffae 	bl	108e4 <MP_OBJ_IS_OBJ>
   10988:	4603      	mov	r3, r0
   1098a:	2b00      	cmp	r3, #0
   1098c:	d008      	beq.n	109a0 <mp_obj_int_make_new+0x60>
   1098e:	683b      	ldr	r3, [r7, #0]
   10990:	681b      	ldr	r3, [r3, #0]
   10992:	681b      	ldr	r3, [r3, #0]
   10994:	4a28      	ldr	r2, [pc, #160]	; (10a38 <mp_obj_int_make_new+0xf8>)
   10996:	4293      	cmp	r3, r2
   10998:	d102      	bne.n	109a0 <mp_obj_int_make_new+0x60>
                // already an int (small or long), just return it
                return args[0];
   1099a:	683b      	ldr	r3, [r7, #0]
   1099c:	681b      	ldr	r3, [r3, #0]
   1099e:	e046      	b.n	10a2e <mp_obj_int_make_new+0xee>
            } else if (MP_OBJ_IS_STR_OR_BYTES(args[0])) {
   109a0:	683b      	ldr	r3, [r7, #0]
   109a2:	681b      	ldr	r3, [r3, #0]
   109a4:	4618      	mov	r0, r3
   109a6:	f7ff ff8b 	bl	108c0 <MP_OBJ_IS_QSTR>
   109aa:	4603      	mov	r3, r0
   109ac:	2b00      	cmp	r3, #0
   109ae:	d10e      	bne.n	109ce <mp_obj_int_make_new+0x8e>
   109b0:	683b      	ldr	r3, [r7, #0]
   109b2:	681b      	ldr	r3, [r3, #0]
   109b4:	4618      	mov	r0, r3
   109b6:	f7ff ff95 	bl	108e4 <MP_OBJ_IS_OBJ>
   109ba:	4603      	mov	r3, r0
   109bc:	2b00      	cmp	r3, #0
   109be:	d017      	beq.n	109f0 <mp_obj_int_make_new+0xb0>
   109c0:	683b      	ldr	r3, [r7, #0]
   109c2:	681b      	ldr	r3, [r3, #0]
   109c4:	681b      	ldr	r3, [r3, #0]
   109c6:	699b      	ldr	r3, [r3, #24]
   109c8:	4a1c      	ldr	r2, [pc, #112]	; (10a3c <mp_obj_int_make_new+0xfc>)
   109ca:	4293      	cmp	r3, r2
   109cc:	d110      	bne.n	109f0 <mp_obj_int_make_new+0xb0>
                // a string, parse it
                size_t l;
                const char *s = mp_obj_str_get_data(args[0], &l);
   109ce:	683b      	ldr	r3, [r7, #0]
   109d0:	681b      	ldr	r3, [r3, #0]
   109d2:	f107 0214 	add.w	r2, r7, #20
   109d6:	4611      	mov	r1, r2
   109d8:	4618      	mov	r0, r3
   109da:	f005 f87f 	bl	15adc <mp_obj_str_get_data>
   109de:	61f8      	str	r0, [r7, #28]
                return mp_parse_num_integer(s, l, 0, NULL);
   109e0:	6979      	ldr	r1, [r7, #20]
   109e2:	2300      	movs	r3, #0
   109e4:	2200      	movs	r2, #0
   109e6:	69f8      	ldr	r0, [r7, #28]
   109e8:	f7fa fbea 	bl	b1c0 <mp_parse_num_integer>
   109ec:	4603      	mov	r3, r0
   109ee:	e01e      	b.n	10a2e <mp_obj_int_make_new+0xee>
#if MICROPY_PY_BUILTINS_FLOAT
            } else if (mp_obj_is_float(args[0])) {
                return mp_obj_new_int_from_float(mp_obj_float_get(args[0]));
#endif
            } else {
                return mp_unary_op(MP_UNARY_OP_INT, args[0]);
   109f0:	683b      	ldr	r3, [r7, #0]
   109f2:	681b      	ldr	r3, [r3, #0]
   109f4:	4619      	mov	r1, r3
   109f6:	2008      	movs	r0, #8
   109f8:	f7fa fff8 	bl	b9ec <mp_unary_op>
   109fc:	4603      	mov	r3, r0
   109fe:	e016      	b.n	10a2e <mp_obj_int_make_new+0xee>

        case 2:
        default: {
            // should be a string, parse it
            size_t l;
            const char *s = mp_obj_str_get_data(args[0], &l);
   10a00:	683b      	ldr	r3, [r7, #0]
   10a02:	681b      	ldr	r3, [r3, #0]
   10a04:	f107 0210 	add.w	r2, r7, #16
   10a08:	4611      	mov	r1, r2
   10a0a:	4618      	mov	r0, r3
   10a0c:	f005 f866 	bl	15adc <mp_obj_str_get_data>
   10a10:	61b8      	str	r0, [r7, #24]
            return mp_parse_num_integer(s, l, mp_obj_get_int(args[1]), NULL);
   10a12:	693c      	ldr	r4, [r7, #16]
   10a14:	683b      	ldr	r3, [r7, #0]
   10a16:	3304      	adds	r3, #4
   10a18:	681b      	ldr	r3, [r3, #0]
   10a1a:	4618      	mov	r0, r3
   10a1c:	f7fd fafa 	bl	e014 <mp_obj_get_int>
   10a20:	4602      	mov	r2, r0
   10a22:	2300      	movs	r3, #0
   10a24:	4621      	mov	r1, r4
   10a26:	69b8      	ldr	r0, [r7, #24]
   10a28:	f7fa fbca 	bl	b1c0 <mp_parse_num_integer>
   10a2c:	4603      	mov	r3, r0
        }
    }
}
   10a2e:	4618      	mov	r0, r3
   10a30:	3724      	adds	r7, #36	; 0x24
   10a32:	46bd      	mov	sp, r7
   10a34:	bd90      	pop	{r4, r7, pc}
   10a36:	bf00      	nop
   10a38:	00024bd8 	.word	0x00024bd8
   10a3c:	00012d2f 	.word	0x00012d2f

00010a40 <mp_obj_int_print>:
#else
typedef mp_int_t fmt_int_t;
typedef mp_uint_t fmt_uint_t;
#endif

void mp_obj_int_print(const mp_print_t *print, mp_obj_t self_in, mp_print_kind_t kind) {
   10a40:	b580      	push	{r7, lr}
   10a42:	b090      	sub	sp, #64	; 0x40
   10a44:	af04      	add	r7, sp, #16
   10a46:	60f8      	str	r0, [r7, #12]
   10a48:	60b9      	str	r1, [r7, #8]
   10a4a:	607a      	str	r2, [r7, #4]
    (void)kind;
    // The size of this buffer is rather arbitrary. If it's not large
    // enough, a dynamic one will be allocated.
    char stack_buf[sizeof(fmt_int_t) * 4];
    char *buf = stack_buf;
   10a4c:	f107 031c 	add.w	r3, r7, #28
   10a50:	61bb      	str	r3, [r7, #24]
    size_t buf_size = sizeof(stack_buf);
   10a52:	2310      	movs	r3, #16
   10a54:	617b      	str	r3, [r7, #20]
    size_t fmt_size;

    char *str = mp_obj_int_formatted(&buf, &buf_size, &fmt_size, self_in, 10, NULL, '\0', '\0');
   10a56:	f107 0210 	add.w	r2, r7, #16
   10a5a:	f107 0114 	add.w	r1, r7, #20
   10a5e:	f107 0018 	add.w	r0, r7, #24
   10a62:	2300      	movs	r3, #0
   10a64:	9303      	str	r3, [sp, #12]
   10a66:	2300      	movs	r3, #0
   10a68:	9302      	str	r3, [sp, #8]
   10a6a:	2300      	movs	r3, #0
   10a6c:	9301      	str	r3, [sp, #4]
   10a6e:	230a      	movs	r3, #10
   10a70:	9300      	str	r3, [sp, #0]
   10a72:	68bb      	ldr	r3, [r7, #8]
   10a74:	f000 f858 	bl	10b28 <mp_obj_int_formatted>
   10a78:	62f8      	str	r0, [r7, #44]	; 0x2c
    mp_print_str(print, str);
   10a7a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
   10a7c:	68f8      	ldr	r0, [r7, #12]
   10a7e:	f7f0 ffe5 	bl	1a4c <mp_print_str>

    if (buf != stack_buf) {
   10a82:	69ba      	ldr	r2, [r7, #24]
   10a84:	f107 031c 	add.w	r3, r7, #28
   10a88:	429a      	cmp	r2, r3
   10a8a:	d003      	beq.n	10a94 <mp_obj_int_print+0x54>
        m_del(char, buf, buf_size);
   10a8c:	69bb      	ldr	r3, [r7, #24]
   10a8e:	4618      	mov	r0, r3
   10a90:	f7ef fcc2 	bl	418 <m_free>
    }
}
   10a94:	bf00      	nop
   10a96:	3730      	adds	r7, #48	; 0x30
   10a98:	46bd      	mov	sp, r7
   10a9a:	bd80      	pop	{r7, pc}

00010a9c <mp_int_format_size>:
    4, 4, 4, 4,
    4, 4, 4, 5
    */
};

size_t mp_int_format_size(size_t num_bits, int base, const char *prefix, char comma) {
   10a9c:	b580      	push	{r7, lr}
   10a9e:	b088      	sub	sp, #32
   10aa0:	af00      	add	r7, sp, #0
   10aa2:	60f8      	str	r0, [r7, #12]
   10aa4:	60b9      	str	r1, [r7, #8]
   10aa6:	607a      	str	r2, [r7, #4]
   10aa8:	70fb      	strb	r3, [r7, #3]
    assert(2 <= base && base <= 16);
   10aaa:	68bb      	ldr	r3, [r7, #8]
   10aac:	2b01      	cmp	r3, #1
   10aae:	dd02      	ble.n	10ab6 <mp_int_format_size+0x1a>
   10ab0:	68bb      	ldr	r3, [r7, #8]
   10ab2:	2b10      	cmp	r3, #16
   10ab4:	dd05      	ble.n	10ac2 <mp_int_format_size+0x26>
   10ab6:	4b17      	ldr	r3, [pc, #92]	; (10b14 <mp_int_format_size+0x78>)
   10ab8:	4a17      	ldr	r2, [pc, #92]	; (10b18 <mp_int_format_size+0x7c>)
   10aba:	21ce      	movs	r1, #206	; 0xce
   10abc:	4817      	ldr	r0, [pc, #92]	; (10b1c <mp_int_format_size+0x80>)
   10abe:	f00c fa0f 	bl	1cee0 <__assert_func>
    size_t num_digits = num_bits / log_base2_floor[base - 1] + 1;
   10ac2:	68bb      	ldr	r3, [r7, #8]
   10ac4:	3b01      	subs	r3, #1
   10ac6:	4a16      	ldr	r2, [pc, #88]	; (10b20 <mp_int_format_size+0x84>)
   10ac8:	5cd3      	ldrb	r3, [r2, r3]
   10aca:	461a      	mov	r2, r3
   10acc:	68fb      	ldr	r3, [r7, #12]
   10ace:	fbb3 f3f2 	udiv	r3, r3, r2
   10ad2:	3301      	adds	r3, #1
   10ad4:	61fb      	str	r3, [r7, #28]
    size_t num_commas = comma ? num_digits / 3 : 0;
   10ad6:	78fb      	ldrb	r3, [r7, #3]
   10ad8:	2b00      	cmp	r3, #0
   10ada:	d005      	beq.n	10ae8 <mp_int_format_size+0x4c>
   10adc:	69fb      	ldr	r3, [r7, #28]
   10ade:	4a11      	ldr	r2, [pc, #68]	; (10b24 <mp_int_format_size+0x88>)
   10ae0:	fba2 2303 	umull	r2, r3, r2, r3
   10ae4:	085b      	lsrs	r3, r3, #1
   10ae6:	e000      	b.n	10aea <mp_int_format_size+0x4e>
   10ae8:	2300      	movs	r3, #0
   10aea:	61bb      	str	r3, [r7, #24]
    size_t prefix_len = prefix ? strlen(prefix) : 0;
   10aec:	687b      	ldr	r3, [r7, #4]
   10aee:	2b00      	cmp	r3, #0
   10af0:	d004      	beq.n	10afc <mp_int_format_size+0x60>
   10af2:	6878      	ldr	r0, [r7, #4]
   10af4:	f00d fe52 	bl	1e79c <strlen>
   10af8:	4603      	mov	r3, r0
   10afa:	e000      	b.n	10afe <mp_int_format_size+0x62>
   10afc:	2300      	movs	r3, #0
   10afe:	617b      	str	r3, [r7, #20]
    return num_digits + num_commas + prefix_len + 2; // +1 for sign, +1 for null byte
   10b00:	69fa      	ldr	r2, [r7, #28]
   10b02:	69bb      	ldr	r3, [r7, #24]
   10b04:	441a      	add	r2, r3
   10b06:	697b      	ldr	r3, [r7, #20]
   10b08:	4413      	add	r3, r2
   10b0a:	3302      	adds	r3, #2
}
   10b0c:	4618      	mov	r0, r3
   10b0e:	3720      	adds	r7, #32
   10b10:	46bd      	mov	sp, r7
   10b12:	bd80      	pop	{r7, pc}
   10b14:	00024b30 	.word	0x00024b30
   10b18:	00024c14 	.word	0x00024c14
   10b1c:	00024b48 	.word	0x00024b48
   10b20:	00024b20 	.word	0x00024b20
   10b24:	aaaaaaab 	.word	0xaaaaaaab

00010b28 <mp_obj_int_formatted>:
// is the callers responsibility to free this allocated buffer.
//
// The resulting formatted string will be returned from this function and the
// formatted size will be in *fmt_size.
char *mp_obj_int_formatted(char **buf, size_t *buf_size, size_t *fmt_size, mp_const_obj_t self_in,
                           int base, const char *prefix, char base_char, char comma) {
   10b28:	b580      	push	{r7, lr}
   10b2a:	b08e      	sub	sp, #56	; 0x38
   10b2c:	af00      	add	r7, sp, #0
   10b2e:	60f8      	str	r0, [r7, #12]
   10b30:	60b9      	str	r1, [r7, #8]
   10b32:	607a      	str	r2, [r7, #4]
   10b34:	603b      	str	r3, [r7, #0]
    fmt_int_t num;
    #if MICROPY_LONGINT_IMPL == MICROPY_LONGINT_IMPL_NONE
    // Only have small ints; get the integer value to format.
    num = MP_OBJ_SMALL_INT_VALUE(self_in);
   10b36:	683b      	ldr	r3, [r7, #0]
   10b38:	105b      	asrs	r3, r3, #1
   10b3a:	637b      	str	r3, [r7, #52]	; 0x34
        return mp_obj_int_formatted_impl(buf, buf_size, fmt_size, self_in, base, prefix, base_char, comma);
        #endif
    }
    #endif

    char sign = '\0';
   10b3c:	2300      	movs	r3, #0
   10b3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (num < 0) {
   10b42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   10b44:	2b00      	cmp	r3, #0
   10b46:	da05      	bge.n	10b54 <mp_obj_int_formatted+0x2c>
        num = -num;
   10b48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   10b4a:	425b      	negs	r3, r3
   10b4c:	637b      	str	r3, [r7, #52]	; 0x34
        sign = '-';
   10b4e:	232d      	movs	r3, #45	; 0x2d
   10b50:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    }

    size_t needed_size = mp_int_format_size(sizeof(fmt_int_t) * 8, base, prefix, comma);
   10b54:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
   10b58:	6c7a      	ldr	r2, [r7, #68]	; 0x44
   10b5a:	6c39      	ldr	r1, [r7, #64]	; 0x40
   10b5c:	2020      	movs	r0, #32
   10b5e:	f7ff ff9d 	bl	10a9c <mp_int_format_size>
   10b62:	61f8      	str	r0, [r7, #28]
    if (needed_size > *buf_size) {
   10b64:	68bb      	ldr	r3, [r7, #8]
   10b66:	681a      	ldr	r2, [r3, #0]
   10b68:	69fb      	ldr	r3, [r7, #28]
   10b6a:	429a      	cmp	r2, r3
   10b6c:	d208      	bcs.n	10b80 <mp_obj_int_formatted+0x58>
        *buf = m_new(char, needed_size);
   10b6e:	69f8      	ldr	r0, [r7, #28]
   10b70:	f7ef fbd4 	bl	31c <m_malloc>
   10b74:	4602      	mov	r2, r0
   10b76:	68fb      	ldr	r3, [r7, #12]
   10b78:	601a      	str	r2, [r3, #0]
        *buf_size = needed_size;
   10b7a:	68bb      	ldr	r3, [r7, #8]
   10b7c:	69fa      	ldr	r2, [r7, #28]
   10b7e:	601a      	str	r2, [r3, #0]
    }
    char *str = *buf;
   10b80:	68fb      	ldr	r3, [r7, #12]
   10b82:	681b      	ldr	r3, [r3, #0]
   10b84:	61bb      	str	r3, [r7, #24]

    char *b = str + needed_size;
   10b86:	69ba      	ldr	r2, [r7, #24]
   10b88:	69fb      	ldr	r3, [r7, #28]
   10b8a:	4413      	add	r3, r2
   10b8c:	62fb      	str	r3, [r7, #44]	; 0x2c
    *(--b) = '\0';
   10b8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   10b90:	3b01      	subs	r3, #1
   10b92:	62fb      	str	r3, [r7, #44]	; 0x2c
   10b94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   10b96:	2200      	movs	r2, #0
   10b98:	701a      	strb	r2, [r3, #0]
    char *last_comma = b;
   10b9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   10b9c:	62bb      	str	r3, [r7, #40]	; 0x28

    if (num == 0) {
   10b9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   10ba0:	2b00      	cmp	r3, #0
   10ba2:	d106      	bne.n	10bb2 <mp_obj_int_formatted+0x8a>
        *(--b) = '0';
   10ba4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   10ba6:	3b01      	subs	r3, #1
   10ba8:	62fb      	str	r3, [r7, #44]	; 0x2c
   10baa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   10bac:	2230      	movs	r2, #48	; 0x30
   10bae:	701a      	strb	r2, [r3, #0]
   10bb0:	e040      	b.n	10c34 <mp_obj_int_formatted+0x10c>
    } else {
        do {
            // The cast to fmt_uint_t is because num is positive and we want unsigned arithmetic
            int c = (fmt_uint_t)num % base;
   10bb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   10bb4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   10bb6:	fbb3 f1f2 	udiv	r1, r3, r2
   10bba:	fb02 f201 	mul.w	r2, r2, r1
   10bbe:	1a9b      	subs	r3, r3, r2
   10bc0:	627b      	str	r3, [r7, #36]	; 0x24
            num = (fmt_uint_t)num / base;
   10bc2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   10bc4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   10bc6:	fbb2 f3f3 	udiv	r3, r2, r3
   10bca:	637b      	str	r3, [r7, #52]	; 0x34
            if (c >= 10) {
   10bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   10bce:	2b09      	cmp	r3, #9
   10bd0:	dd06      	ble.n	10be0 <mp_obj_int_formatted+0xb8>
                c += base_char - 10;
   10bd2:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
   10bd6:	3b0a      	subs	r3, #10
   10bd8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   10bda:	4413      	add	r3, r2
   10bdc:	627b      	str	r3, [r7, #36]	; 0x24
   10bde:	e002      	b.n	10be6 <mp_obj_int_formatted+0xbe>
            } else {
                c += '0';
   10be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   10be2:	3330      	adds	r3, #48	; 0x30
   10be4:	627b      	str	r3, [r7, #36]	; 0x24
            }
            *(--b) = c;
   10be6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   10be8:	3b01      	subs	r3, #1
   10bea:	62fb      	str	r3, [r7, #44]	; 0x2c
   10bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   10bee:	b2da      	uxtb	r2, r3
   10bf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   10bf2:	701a      	strb	r2, [r3, #0]
            if (comma && num != 0 && b > str && (last_comma - b) == 3) {
   10bf4:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
   10bf8:	2b00      	cmp	r3, #0
   10bfa:	d014      	beq.n	10c26 <mp_obj_int_formatted+0xfe>
   10bfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   10bfe:	2b00      	cmp	r3, #0
   10c00:	d011      	beq.n	10c26 <mp_obj_int_formatted+0xfe>
   10c02:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   10c04:	69bb      	ldr	r3, [r7, #24]
   10c06:	429a      	cmp	r2, r3
   10c08:	d90d      	bls.n	10c26 <mp_obj_int_formatted+0xfe>
   10c0a:	6aba      	ldr	r2, [r7, #40]	; 0x28
   10c0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   10c0e:	1ad3      	subs	r3, r2, r3
   10c10:	2b03      	cmp	r3, #3
   10c12:	d108      	bne.n	10c26 <mp_obj_int_formatted+0xfe>
                *(--b) = comma;
   10c14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   10c16:	3b01      	subs	r3, #1
   10c18:	62fb      	str	r3, [r7, #44]	; 0x2c
   10c1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   10c1c:	f897 204c 	ldrb.w	r2, [r7, #76]	; 0x4c
   10c20:	701a      	strb	r2, [r3, #0]
                last_comma = b;
   10c22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   10c24:	62bb      	str	r3, [r7, #40]	; 0x28
            }
        }
        while (b > str && num != 0);
   10c26:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   10c28:	69bb      	ldr	r3, [r7, #24]
   10c2a:	429a      	cmp	r2, r3
   10c2c:	d902      	bls.n	10c34 <mp_obj_int_formatted+0x10c>
   10c2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   10c30:	2b00      	cmp	r3, #0
   10c32:	d1be      	bne.n	10bb2 <mp_obj_int_formatted+0x8a>
    }
    if (prefix) {
   10c34:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   10c36:	2b00      	cmp	r3, #0
   10c38:	d01b      	beq.n	10c72 <mp_obj_int_formatted+0x14a>
        size_t prefix_len = strlen(prefix);
   10c3a:	6c78      	ldr	r0, [r7, #68]	; 0x44
   10c3c:	f00d fdae 	bl	1e79c <strlen>
   10c40:	6178      	str	r0, [r7, #20]
        char *p = b - prefix_len;
   10c42:	697b      	ldr	r3, [r7, #20]
   10c44:	425b      	negs	r3, r3
   10c46:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   10c48:	4413      	add	r3, r2
   10c4a:	623b      	str	r3, [r7, #32]
        if (p > str) {
   10c4c:	6a3a      	ldr	r2, [r7, #32]
   10c4e:	69bb      	ldr	r3, [r7, #24]
   10c50:	429a      	cmp	r2, r3
   10c52:	d90e      	bls.n	10c72 <mp_obj_int_formatted+0x14a>
            b = p;
   10c54:	6a3b      	ldr	r3, [r7, #32]
   10c56:	62fb      	str	r3, [r7, #44]	; 0x2c
            while (*prefix) {
   10c58:	e007      	b.n	10c6a <mp_obj_int_formatted+0x142>
                *p++ = *prefix++;
   10c5a:	6a3b      	ldr	r3, [r7, #32]
   10c5c:	1c5a      	adds	r2, r3, #1
   10c5e:	623a      	str	r2, [r7, #32]
   10c60:	6c7a      	ldr	r2, [r7, #68]	; 0x44
   10c62:	1c51      	adds	r1, r2, #1
   10c64:	6479      	str	r1, [r7, #68]	; 0x44
   10c66:	7812      	ldrb	r2, [r2, #0]
   10c68:	701a      	strb	r2, [r3, #0]
            while (*prefix) {
   10c6a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   10c6c:	781b      	ldrb	r3, [r3, #0]
   10c6e:	2b00      	cmp	r3, #0
   10c70:	d1f3      	bne.n	10c5a <mp_obj_int_formatted+0x132>
            }
        }
    }
    if (sign && b > str) {
   10c72:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
   10c76:	2b00      	cmp	r3, #0
   10c78:	d00a      	beq.n	10c90 <mp_obj_int_formatted+0x168>
   10c7a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   10c7c:	69bb      	ldr	r3, [r7, #24]
   10c7e:	429a      	cmp	r2, r3
   10c80:	d906      	bls.n	10c90 <mp_obj_int_formatted+0x168>
        *(--b) = sign;
   10c82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   10c84:	3b01      	subs	r3, #1
   10c86:	62fb      	str	r3, [r7, #44]	; 0x2c
   10c88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   10c8a:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
   10c8e:	701a      	strb	r2, [r3, #0]
    }
    *fmt_size = *buf + needed_size - b - 1;
   10c90:	68fb      	ldr	r3, [r7, #12]
   10c92:	681a      	ldr	r2, [r3, #0]
   10c94:	69fb      	ldr	r3, [r7, #28]
   10c96:	4413      	add	r3, r2
   10c98:	461a      	mov	r2, r3
   10c9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   10c9c:	1ad3      	subs	r3, r2, r3
   10c9e:	3b01      	subs	r3, #1
   10ca0:	461a      	mov	r2, r3
   10ca2:	687b      	ldr	r3, [r7, #4]
   10ca4:	601a      	str	r2, [r3, #0]

    return b;
   10ca6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
   10ca8:	4618      	mov	r0, r3
   10caa:	3738      	adds	r7, #56	; 0x38
   10cac:	46bd      	mov	sp, r7
   10cae:	bd80      	pop	{r7, pc}

00010cb0 <mp_obj_int_sign>:

#if MICROPY_LONGINT_IMPL == MICROPY_LONGINT_IMPL_NONE

int mp_obj_int_sign(mp_obj_t self_in) {
   10cb0:	b580      	push	{r7, lr}
   10cb2:	b084      	sub	sp, #16
   10cb4:	af00      	add	r7, sp, #0
   10cb6:	6078      	str	r0, [r7, #4]
    mp_int_t val = mp_obj_get_int(self_in);
   10cb8:	6878      	ldr	r0, [r7, #4]
   10cba:	f7fd f9ab 	bl	e014 <mp_obj_get_int>
   10cbe:	60f8      	str	r0, [r7, #12]
    if (val < 0) {
   10cc0:	68fb      	ldr	r3, [r7, #12]
   10cc2:	2b00      	cmp	r3, #0
   10cc4:	da02      	bge.n	10ccc <mp_obj_int_sign+0x1c>
        return -1;
   10cc6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   10cca:	e005      	b.n	10cd8 <mp_obj_int_sign+0x28>
    } else if (val > 0) {
   10ccc:	68fb      	ldr	r3, [r7, #12]
   10cce:	2b00      	cmp	r3, #0
   10cd0:	dd01      	ble.n	10cd6 <mp_obj_int_sign+0x26>
        return 1;
   10cd2:	2301      	movs	r3, #1
   10cd4:	e000      	b.n	10cd8 <mp_obj_int_sign+0x28>
    } else {
        return 0;
   10cd6:	2300      	movs	r3, #0
    }
}
   10cd8:	4618      	mov	r0, r3
   10cda:	3710      	adds	r7, #16
   10cdc:	46bd      	mov	sp, r7
   10cde:	bd80      	pop	{r7, pc}

00010ce0 <mp_obj_int_unary_op>:

// This is called for operations on SMALL_INT that are not handled by mp_unary_op
mp_obj_t mp_obj_int_unary_op(mp_unary_op_t op, mp_obj_t o_in) {
   10ce0:	b480      	push	{r7}
   10ce2:	b083      	sub	sp, #12
   10ce4:	af00      	add	r7, sp, #0
   10ce6:	6078      	str	r0, [r7, #4]
   10ce8:	6039      	str	r1, [r7, #0]
    return MP_OBJ_NULL; // op not supported
   10cea:	2300      	movs	r3, #0
}
   10cec:	4618      	mov	r0, r3
   10cee:	370c      	adds	r7, #12
   10cf0:	46bd      	mov	sp, r7
   10cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
   10cf6:	4770      	bx	lr

00010cf8 <mp_obj_int_binary_op>:

// This is called for operations on SMALL_INT that are not handled by mp_binary_op
mp_obj_t mp_obj_int_binary_op(mp_binary_op_t op, mp_obj_t lhs_in, mp_obj_t rhs_in) {
   10cf8:	b580      	push	{r7, lr}
   10cfa:	b084      	sub	sp, #16
   10cfc:	af00      	add	r7, sp, #0
   10cfe:	60f8      	str	r0, [r7, #12]
   10d00:	60b9      	str	r1, [r7, #8]
   10d02:	607a      	str	r2, [r7, #4]
    return mp_obj_int_binary_op_extra_cases(op, lhs_in, rhs_in);
   10d04:	687a      	ldr	r2, [r7, #4]
   10d06:	68b9      	ldr	r1, [r7, #8]
   10d08:	68f8      	ldr	r0, [r7, #12]
   10d0a:	f000 f87f 	bl	10e0c <mp_obj_int_binary_op_extra_cases>
   10d0e:	4603      	mov	r3, r0
}
   10d10:	4618      	mov	r0, r3
   10d12:	3710      	adds	r7, #16
   10d14:	46bd      	mov	sp, r7
   10d16:	bd80      	pop	{r7, pc}

00010d18 <mp_obj_new_int_from_str_len>:

// This is called only with strings whose value doesn't fit in SMALL_INT
mp_obj_t mp_obj_new_int_from_str_len(const char **str, size_t len, bool neg, unsigned int base) {
   10d18:	b580      	push	{r7, lr}
   10d1a:	b084      	sub	sp, #16
   10d1c:	af00      	add	r7, sp, #0
   10d1e:	60f8      	str	r0, [r7, #12]
   10d20:	60b9      	str	r1, [r7, #8]
   10d22:	603b      	str	r3, [r7, #0]
   10d24:	4613      	mov	r3, r2
   10d26:	71fb      	strb	r3, [r7, #7]
    mp_raise_msg(&mp_type_OverflowError, "long int not supported in this build");
   10d28:	4901      	ldr	r1, [pc, #4]	; (10d30 <mp_obj_new_int_from_str_len+0x18>)
   10d2a:	4802      	ldr	r0, [pc, #8]	; (10d34 <mp_obj_new_int_from_str_len+0x1c>)
   10d2c:	f7fc fb0c 	bl	d348 <mp_raise_msg>
   10d30:	00024b5c 	.word	0x00024b5c
   10d34:	00023fb4 	.word	0x00023fb4

00010d38 <mp_obj_new_int_from_ll>:
    return mp_const_none;
}

// This is called when an integer larger than a SMALL_INT is needed (although val might still fit in a SMALL_INT)
mp_obj_t mp_obj_new_int_from_ll(long long val) {
   10d38:	b580      	push	{r7, lr}
   10d3a:	b082      	sub	sp, #8
   10d3c:	af00      	add	r7, sp, #0
   10d3e:	e9c7 0100 	strd	r0, r1, [r7]
    mp_raise_msg(&mp_type_OverflowError, "small int overflow");
   10d42:	4902      	ldr	r1, [pc, #8]	; (10d4c <mp_obj_new_int_from_ll+0x14>)
   10d44:	4802      	ldr	r0, [pc, #8]	; (10d50 <mp_obj_new_int_from_ll+0x18>)
   10d46:	f7fc faff 	bl	d348 <mp_raise_msg>
   10d4a:	bf00      	nop
   10d4c:	00024b84 	.word	0x00024b84
   10d50:	00023fb4 	.word	0x00023fb4

00010d54 <mp_obj_new_int_from_ull>:
    return mp_const_none;
}

// This is called when an integer larger than a SMALL_INT is needed (although val might still fit in a SMALL_INT)
mp_obj_t mp_obj_new_int_from_ull(unsigned long long val) {
   10d54:	b580      	push	{r7, lr}
   10d56:	b082      	sub	sp, #8
   10d58:	af00      	add	r7, sp, #0
   10d5a:	e9c7 0100 	strd	r0, r1, [r7]
    mp_raise_msg(&mp_type_OverflowError, "small int overflow");
   10d5e:	4902      	ldr	r1, [pc, #8]	; (10d68 <mp_obj_new_int_from_ull+0x14>)
   10d60:	4802      	ldr	r0, [pc, #8]	; (10d6c <mp_obj_new_int_from_ull+0x18>)
   10d62:	f7fc faf1 	bl	d348 <mp_raise_msg>
   10d66:	bf00      	nop
   10d68:	00024b84 	.word	0x00024b84
   10d6c:	00023fb4 	.word	0x00023fb4

00010d70 <mp_obj_new_int_from_uint>:
    return mp_const_none;
}

mp_obj_t mp_obj_new_int_from_uint(mp_uint_t value) {
   10d70:	b580      	push	{r7, lr}
   10d72:	b082      	sub	sp, #8
   10d74:	af00      	add	r7, sp, #0
   10d76:	6078      	str	r0, [r7, #4]
    // SMALL_INT accepts only signed numbers, so make sure the input
    // value fits completely in the small-int positive range.
    if ((value & ~MP_SMALL_INT_POSITIVE_MASK) == 0) {
   10d78:	687b      	ldr	r3, [r7, #4]
   10d7a:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
   10d7e:	2b00      	cmp	r3, #0
   10d80:	d104      	bne.n	10d8c <mp_obj_new_int_from_uint+0x1c>
        return MP_OBJ_NEW_SMALL_INT(value);
   10d82:	687b      	ldr	r3, [r7, #4]
   10d84:	005b      	lsls	r3, r3, #1
   10d86:	f043 0301 	orr.w	r3, r3, #1
   10d8a:	e003      	b.n	10d94 <mp_obj_new_int_from_uint+0x24>
    }
    mp_raise_msg(&mp_type_OverflowError, "small int overflow");
   10d8c:	4903      	ldr	r1, [pc, #12]	; (10d9c <mp_obj_new_int_from_uint+0x2c>)
   10d8e:	4804      	ldr	r0, [pc, #16]	; (10da0 <mp_obj_new_int_from_uint+0x30>)
   10d90:	f7fc fada 	bl	d348 <mp_raise_msg>
    return mp_const_none;
}
   10d94:	4618      	mov	r0, r3
   10d96:	3708      	adds	r7, #8
   10d98:	46bd      	mov	sp, r7
   10d9a:	bd80      	pop	{r7, pc}
   10d9c:	00024b84 	.word	0x00024b84
   10da0:	00023fb4 	.word	0x00023fb4

00010da4 <mp_obj_new_int>:

mp_obj_t mp_obj_new_int(mp_int_t value) {
   10da4:	b580      	push	{r7, lr}
   10da6:	b082      	sub	sp, #8
   10da8:	af00      	add	r7, sp, #0
   10daa:	6078      	str	r0, [r7, #4]
    if (MP_SMALL_INT_FITS(value)) {
   10dac:	687b      	ldr	r3, [r7, #4]
   10dae:	005a      	lsls	r2, r3, #1
   10db0:	687b      	ldr	r3, [r7, #4]
   10db2:	4053      	eors	r3, r2
   10db4:	2b00      	cmp	r3, #0
   10db6:	db04      	blt.n	10dc2 <mp_obj_new_int+0x1e>
        return MP_OBJ_NEW_SMALL_INT(value);
   10db8:	687b      	ldr	r3, [r7, #4]
   10dba:	005b      	lsls	r3, r3, #1
   10dbc:	f043 0301 	orr.w	r3, r3, #1
   10dc0:	e003      	b.n	10dca <mp_obj_new_int+0x26>
    }
    mp_raise_msg(&mp_type_OverflowError, "small int overflow");
   10dc2:	4904      	ldr	r1, [pc, #16]	; (10dd4 <mp_obj_new_int+0x30>)
   10dc4:	4804      	ldr	r0, [pc, #16]	; (10dd8 <mp_obj_new_int+0x34>)
   10dc6:	f7fc fabf 	bl	d348 <mp_raise_msg>
    return mp_const_none;
}
   10dca:	4618      	mov	r0, r3
   10dcc:	3708      	adds	r7, #8
   10dce:	46bd      	mov	sp, r7
   10dd0:	bd80      	pop	{r7, pc}
   10dd2:	bf00      	nop
   10dd4:	00024b84 	.word	0x00024b84
   10dd8:	00023fb4 	.word	0x00023fb4

00010ddc <mp_obj_int_get_truncated>:

mp_int_t mp_obj_int_get_truncated(mp_const_obj_t self_in) {
   10ddc:	b480      	push	{r7}
   10dde:	b083      	sub	sp, #12
   10de0:	af00      	add	r7, sp, #0
   10de2:	6078      	str	r0, [r7, #4]
    return MP_OBJ_SMALL_INT_VALUE(self_in);
   10de4:	687b      	ldr	r3, [r7, #4]
   10de6:	105b      	asrs	r3, r3, #1
}
   10de8:	4618      	mov	r0, r3
   10dea:	370c      	adds	r7, #12
   10dec:	46bd      	mov	sp, r7
   10dee:	f85d 7b04 	ldr.w	r7, [sp], #4
   10df2:	4770      	bx	lr

00010df4 <mp_obj_int_get_checked>:

mp_int_t mp_obj_int_get_checked(mp_const_obj_t self_in) {
   10df4:	b480      	push	{r7}
   10df6:	b083      	sub	sp, #12
   10df8:	af00      	add	r7, sp, #0
   10dfa:	6078      	str	r0, [r7, #4]
    return MP_OBJ_SMALL_INT_VALUE(self_in);
   10dfc:	687b      	ldr	r3, [r7, #4]
   10dfe:	105b      	asrs	r3, r3, #1
}
   10e00:	4618      	mov	r0, r3
   10e02:	370c      	adds	r7, #12
   10e04:	46bd      	mov	sp, r7
   10e06:	f85d 7b04 	ldr.w	r7, [sp], #4
   10e0a:	4770      	bx	lr

00010e0c <mp_obj_int_binary_op_extra_cases>:

#endif // MICROPY_LONGINT_IMPL == MICROPY_LONGINT_IMPL_NONE

// This dispatcher function is expected to be independent of the implementation of long int
// It handles the extra cases for integer-like arithmetic
mp_obj_t mp_obj_int_binary_op_extra_cases(mp_binary_op_t op, mp_obj_t lhs_in, mp_obj_t rhs_in) {
   10e0c:	b580      	push	{r7, lr}
   10e0e:	b084      	sub	sp, #16
   10e10:	af00      	add	r7, sp, #0
   10e12:	60f8      	str	r0, [r7, #12]
   10e14:	60b9      	str	r1, [r7, #8]
   10e16:	607a      	str	r2, [r7, #4]
    if (rhs_in == mp_const_false) {
   10e18:	687b      	ldr	r3, [r7, #4]
   10e1a:	4a26      	ldr	r2, [pc, #152]	; (10eb4 <mp_obj_int_binary_op_extra_cases+0xa8>)
   10e1c:	4293      	cmp	r3, r2
   10e1e:	d106      	bne.n	10e2e <mp_obj_int_binary_op_extra_cases+0x22>
        // false acts as 0
        return mp_binary_op(op, lhs_in, MP_OBJ_NEW_SMALL_INT(0));
   10e20:	2201      	movs	r2, #1
   10e22:	68b9      	ldr	r1, [r7, #8]
   10e24:	68f8      	ldr	r0, [r7, #12]
   10e26:	f7fa fedf 	bl	bbe8 <mp_binary_op>
   10e2a:	4603      	mov	r3, r0
   10e2c:	e03d      	b.n	10eaa <mp_obj_int_binary_op_extra_cases+0x9e>
    } else if (rhs_in == mp_const_true) {
   10e2e:	687b      	ldr	r3, [r7, #4]
   10e30:	4a21      	ldr	r2, [pc, #132]	; (10eb8 <mp_obj_int_binary_op_extra_cases+0xac>)
   10e32:	4293      	cmp	r3, r2
   10e34:	d106      	bne.n	10e44 <mp_obj_int_binary_op_extra_cases+0x38>
        // true acts as 0
        return mp_binary_op(op, lhs_in, MP_OBJ_NEW_SMALL_INT(1));
   10e36:	2203      	movs	r2, #3
   10e38:	68b9      	ldr	r1, [r7, #8]
   10e3a:	68f8      	ldr	r0, [r7, #12]
   10e3c:	f7fa fed4 	bl	bbe8 <mp_binary_op>
   10e40:	4603      	mov	r3, r0
   10e42:	e032      	b.n	10eaa <mp_obj_int_binary_op_extra_cases+0x9e>
    } else if (op == MP_BINARY_OP_MULTIPLY) {
   10e44:	68fb      	ldr	r3, [r7, #12]
   10e46:	2b1c      	cmp	r3, #28
   10e48:	d12e      	bne.n	10ea8 <mp_obj_int_binary_op_extra_cases+0x9c>
        if (MP_OBJ_IS_STR_OR_BYTES(rhs_in) || MP_OBJ_IS_TYPE(rhs_in, &mp_type_tuple) || MP_OBJ_IS_TYPE(rhs_in, &mp_type_list)) {
   10e4a:	6878      	ldr	r0, [r7, #4]
   10e4c:	f7ff fd38 	bl	108c0 <MP_OBJ_IS_QSTR>
   10e50:	4603      	mov	r3, r0
   10e52:	2b00      	cmp	r3, #0
   10e54:	d121      	bne.n	10e9a <mp_obj_int_binary_op_extra_cases+0x8e>
   10e56:	6878      	ldr	r0, [r7, #4]
   10e58:	f7ff fd44 	bl	108e4 <MP_OBJ_IS_OBJ>
   10e5c:	4603      	mov	r3, r0
   10e5e:	2b00      	cmp	r3, #0
   10e60:	d005      	beq.n	10e6e <mp_obj_int_binary_op_extra_cases+0x62>
   10e62:	687b      	ldr	r3, [r7, #4]
   10e64:	681b      	ldr	r3, [r3, #0]
   10e66:	699b      	ldr	r3, [r3, #24]
   10e68:	4a14      	ldr	r2, [pc, #80]	; (10ebc <mp_obj_int_binary_op_extra_cases+0xb0>)
   10e6a:	4293      	cmp	r3, r2
   10e6c:	d015      	beq.n	10e9a <mp_obj_int_binary_op_extra_cases+0x8e>
   10e6e:	6878      	ldr	r0, [r7, #4]
   10e70:	f7ff fd38 	bl	108e4 <MP_OBJ_IS_OBJ>
   10e74:	4603      	mov	r3, r0
   10e76:	2b00      	cmp	r3, #0
   10e78:	d004      	beq.n	10e84 <mp_obj_int_binary_op_extra_cases+0x78>
   10e7a:	687b      	ldr	r3, [r7, #4]
   10e7c:	681b      	ldr	r3, [r3, #0]
   10e7e:	4a10      	ldr	r2, [pc, #64]	; (10ec0 <mp_obj_int_binary_op_extra_cases+0xb4>)
   10e80:	4293      	cmp	r3, r2
   10e82:	d00a      	beq.n	10e9a <mp_obj_int_binary_op_extra_cases+0x8e>
   10e84:	6878      	ldr	r0, [r7, #4]
   10e86:	f7ff fd2d 	bl	108e4 <MP_OBJ_IS_OBJ>
   10e8a:	4603      	mov	r3, r0
   10e8c:	2b00      	cmp	r3, #0
   10e8e:	d00b      	beq.n	10ea8 <mp_obj_int_binary_op_extra_cases+0x9c>
   10e90:	687b      	ldr	r3, [r7, #4]
   10e92:	681b      	ldr	r3, [r3, #0]
   10e94:	4a0b      	ldr	r2, [pc, #44]	; (10ec4 <mp_obj_int_binary_op_extra_cases+0xb8>)
   10e96:	4293      	cmp	r3, r2
   10e98:	d106      	bne.n	10ea8 <mp_obj_int_binary_op_extra_cases+0x9c>
            // multiply is commutative for these types, so delegate to them
            return mp_binary_op(op, rhs_in, lhs_in);
   10e9a:	68ba      	ldr	r2, [r7, #8]
   10e9c:	6879      	ldr	r1, [r7, #4]
   10e9e:	68f8      	ldr	r0, [r7, #12]
   10ea0:	f7fa fea2 	bl	bbe8 <mp_binary_op>
   10ea4:	4603      	mov	r3, r0
   10ea6:	e000      	b.n	10eaa <mp_obj_int_binary_op_extra_cases+0x9e>
        }
    }
    return MP_OBJ_NULL; // op not supported
   10ea8:	2300      	movs	r3, #0
}
   10eaa:	4618      	mov	r0, r3
   10eac:	3710      	adds	r7, #16
   10eae:	46bd      	mov	sp, r7
   10eb0:	bd80      	pop	{r7, pc}
   10eb2:	bf00      	nop
   10eb4:	00023860 	.word	0x00023860
   10eb8:	00023868 	.word	0x00023868
   10ebc:	00012d2f 	.word	0x00012d2f
   10ec0:	00025a34 	.word	0x00025a34
   10ec4:	00024e44 	.word	0x00024e44

00010ec8 <int_from_bytes>:

// this is a classmethod
STATIC mp_obj_t int_from_bytes(size_t n_args, const mp_obj_t *args) {
   10ec8:	b580      	push	{r7, lr}
   10eca:	b08a      	sub	sp, #40	; 0x28
   10ecc:	af00      	add	r7, sp, #0
   10ece:	6078      	str	r0, [r7, #4]
   10ed0:	6039      	str	r1, [r7, #0]
    // TODO: Support signed param (assumes signed=False at the moment)
    (void)n_args;

    // get the buffer info
    mp_buffer_info_t bufinfo;
    mp_get_buffer_raise(args[1], &bufinfo, MP_BUFFER_READ);
   10ed2:	683b      	ldr	r3, [r7, #0]
   10ed4:	3304      	adds	r3, #4
   10ed6:	681b      	ldr	r3, [r3, #0]
   10ed8:	f107 010c 	add.w	r1, r7, #12
   10edc:	2201      	movs	r2, #1
   10ede:	4618      	mov	r0, r3
   10ee0:	f7fd facc 	bl	e47c <mp_get_buffer_raise>

    const byte* buf = (const byte*)bufinfo.buf;
   10ee4:	68fb      	ldr	r3, [r7, #12]
   10ee6:	627b      	str	r3, [r7, #36]	; 0x24
    int delta = 1;
   10ee8:	2301      	movs	r3, #1
   10eea:	623b      	str	r3, [r7, #32]
    if (args[2] == MP_OBJ_NEW_QSTR(MP_QSTR_little)) {
   10eec:	683b      	ldr	r3, [r7, #0]
   10eee:	3308      	adds	r3, #8
   10ef0:	681b      	ldr	r3, [r3, #0]
   10ef2:	f240 42c2 	movw	r2, #1218	; 0x4c2
   10ef6:	4293      	cmp	r3, r2
   10ef8:	d107      	bne.n	10f0a <int_from_bytes+0x42>
        buf += bufinfo.len - 1;
   10efa:	693b      	ldr	r3, [r7, #16]
   10efc:	3b01      	subs	r3, #1
   10efe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   10f00:	4413      	add	r3, r2
   10f02:	627b      	str	r3, [r7, #36]	; 0x24
        delta = -1;
   10f04:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   10f08:	623b      	str	r3, [r7, #32]
    }

    mp_uint_t value = 0;
   10f0a:	2300      	movs	r3, #0
   10f0c:	61fb      	str	r3, [r7, #28]
    size_t len = bufinfo.len;
   10f0e:	693b      	ldr	r3, [r7, #16]
   10f10:	61bb      	str	r3, [r7, #24]
    for (; len--; buf += delta) {
   10f12:	e009      	b.n	10f28 <int_from_bytes+0x60>
        if (value > (MP_SMALL_INT_MAX >> 8)) {
            // Result will overflow a small-int so construct a big-int
            return mp_obj_int_from_bytes_impl(args[2] != MP_OBJ_NEW_QSTR(MP_QSTR_little), bufinfo.len, bufinfo.buf);
        }
        #endif
        value = (value << 8) | *buf;
   10f14:	69fb      	ldr	r3, [r7, #28]
   10f16:	021b      	lsls	r3, r3, #8
   10f18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   10f1a:	7812      	ldrb	r2, [r2, #0]
   10f1c:	4313      	orrs	r3, r2
   10f1e:	61fb      	str	r3, [r7, #28]
    for (; len--; buf += delta) {
   10f20:	6a3b      	ldr	r3, [r7, #32]
   10f22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   10f24:	4413      	add	r3, r2
   10f26:	627b      	str	r3, [r7, #36]	; 0x24
   10f28:	69bb      	ldr	r3, [r7, #24]
   10f2a:	1e5a      	subs	r2, r3, #1
   10f2c:	61ba      	str	r2, [r7, #24]
   10f2e:	2b00      	cmp	r3, #0
   10f30:	d1f0      	bne.n	10f14 <int_from_bytes+0x4c>
    }
    return mp_obj_new_int_from_uint(value);
   10f32:	69f8      	ldr	r0, [r7, #28]
   10f34:	f7ff ff1c 	bl	10d70 <mp_obj_new_int_from_uint>
   10f38:	4603      	mov	r3, r0
}
   10f3a:	4618      	mov	r0, r3
   10f3c:	3728      	adds	r7, #40	; 0x28
   10f3e:	46bd      	mov	sp, r7
   10f40:	bd80      	pop	{r7, pc}

00010f42 <int_to_bytes>:

STATIC MP_DEFINE_CONST_FUN_OBJ_VAR_BETWEEN(int_from_bytes_fun_obj, 3, 4, int_from_bytes);
STATIC MP_DEFINE_CONST_CLASSMETHOD_OBJ(int_from_bytes_obj, MP_ROM_PTR(&int_from_bytes_fun_obj));

STATIC mp_obj_t int_to_bytes(size_t n_args, const mp_obj_t *args) {
   10f42:	b580      	push	{r7, lr}
   10f44:	b08c      	sub	sp, #48	; 0x30
   10f46:	af00      	add	r7, sp, #0
   10f48:	6078      	str	r0, [r7, #4]
   10f4a:	6039      	str	r1, [r7, #0]
    // TODO: Support signed param (assumes signed=False)
    (void)n_args;

    mp_int_t len = mp_obj_get_int(args[1]);
   10f4c:	683b      	ldr	r3, [r7, #0]
   10f4e:	3304      	adds	r3, #4
   10f50:	681b      	ldr	r3, [r3, #0]
   10f52:	4618      	mov	r0, r3
   10f54:	f7fd f85e 	bl	e014 <mp_obj_get_int>
   10f58:	62f8      	str	r0, [r7, #44]	; 0x2c
    if (len < 0) {
   10f5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   10f5c:	2b00      	cmp	r3, #0
   10f5e:	da02      	bge.n	10f66 <int_to_bytes+0x24>
        mp_raise_ValueError(NULL);
   10f60:	2000      	movs	r0, #0
   10f62:	f7fc fa08 	bl	d376 <mp_raise_ValueError>
    }
    bool big_endian = args[2] != MP_OBJ_NEW_QSTR(MP_QSTR_little);
   10f66:	683b      	ldr	r3, [r7, #0]
   10f68:	3308      	adds	r3, #8
   10f6a:	681b      	ldr	r3, [r3, #0]
   10f6c:	f240 42c2 	movw	r2, #1218	; 0x4c2
   10f70:	4293      	cmp	r3, r2
   10f72:	bf14      	ite	ne
   10f74:	2301      	movne	r3, #1
   10f76:	2300      	moveq	r3, #0
   10f78:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

    vstr_t vstr;
    vstr_init_len(&vstr, len);
   10f7c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   10f7e:	f107 030c 	add.w	r3, r7, #12
   10f82:	4611      	mov	r1, r2
   10f84:	4618      	mov	r0, r3
   10f86:	f7f0 faca 	bl	151e <vstr_init_len>
    byte *data = (byte*)vstr.buf;
   10f8a:	697b      	ldr	r3, [r7, #20]
   10f8c:	627b      	str	r3, [r7, #36]	; 0x24
    memset(data, 0, len);
   10f8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   10f90:	461a      	mov	r2, r3
   10f92:	2100      	movs	r1, #0
   10f94:	6a78      	ldr	r0, [r7, #36]	; 0x24
   10f96:	f00d fb65 	bl	1e664 <memset>
    if (!MP_OBJ_IS_SMALL_INT(args[0])) {
        mp_obj_int_to_bytes_impl(args[0], big_endian, len, data);
    } else
    #endif
    {
        mp_int_t val = MP_OBJ_SMALL_INT_VALUE(args[0]);
   10f9a:	683b      	ldr	r3, [r7, #0]
   10f9c:	681b      	ldr	r3, [r3, #0]
   10f9e:	105b      	asrs	r3, r3, #1
   10fa0:	623b      	str	r3, [r7, #32]
        size_t l = MIN((size_t)len, sizeof(val));
   10fa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   10fa4:	2b04      	cmp	r3, #4
   10fa6:	bf28      	it	cs
   10fa8:	2304      	movcs	r3, #4
   10faa:	61fb      	str	r3, [r7, #28]
        mp_binary_set_int(l, big_endian, data + (big_endian ? (len - l) : 0), val);
   10fac:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
   10fb0:	2b00      	cmp	r3, #0
   10fb2:	d003      	beq.n	10fbc <int_to_bytes+0x7a>
   10fb4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   10fb6:	69fb      	ldr	r3, [r7, #28]
   10fb8:	1ad3      	subs	r3, r2, r3
   10fba:	e000      	b.n	10fbe <int_to_bytes+0x7c>
   10fbc:	2300      	movs	r3, #0
   10fbe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   10fc0:	441a      	add	r2, r3
   10fc2:	6a3b      	ldr	r3, [r7, #32]
   10fc4:	f897 102b 	ldrb.w	r1, [r7, #43]	; 0x2b
   10fc8:	69f8      	ldr	r0, [r7, #28]
   10fca:	f007 fc3c 	bl	18846 <mp_binary_set_int>
    }

    return mp_obj_new_str_from_vstr(&mp_type_bytes, &vstr);
   10fce:	f107 030c 	add.w	r3, r7, #12
   10fd2:	4619      	mov	r1, r3
   10fd4:	4803      	ldr	r0, [pc, #12]	; (10fe4 <int_to_bytes+0xa2>)
   10fd6:	f004 fbc0 	bl	1575a <mp_obj_new_str_from_vstr>
   10fda:	4603      	mov	r3, r0
}
   10fdc:	4618      	mov	r0, r3
   10fde:	3730      	adds	r7, #48	; 0x30
   10fe0:	46bd      	mov	sp, r7
   10fe2:	bd80      	pop	{r7, pc}
   10fe4:	000257ec 	.word	0x000257ec

00010fe8 <MP_OBJ_IS_OBJ>:
   10fe8:	b480      	push	{r7}
   10fea:	b083      	sub	sp, #12
   10fec:	af00      	add	r7, sp, #0
   10fee:	6078      	str	r0, [r7, #4]
   10ff0:	687b      	ldr	r3, [r7, #4]
   10ff2:	f003 0303 	and.w	r3, r3, #3
   10ff6:	2b00      	cmp	r3, #0
   10ff8:	bf0c      	ite	eq
   10ffa:	2301      	moveq	r3, #1
   10ffc:	2300      	movne	r3, #0
   10ffe:	b2db      	uxtb	r3, r3
   11000:	4618      	mov	r0, r3
   11002:	370c      	adds	r7, #12
   11004:	46bd      	mov	sp, r7
   11006:	f85d 7b04 	ldr.w	r7, [sp], #4
   1100a:	4770      	bx	lr

0001100c <mp_obj_new_bool>:
static inline mp_obj_t mp_obj_new_bool(mp_int_t x) { return x ? mp_const_true : mp_const_false; }
   1100c:	b480      	push	{r7}
   1100e:	b083      	sub	sp, #12
   11010:	af00      	add	r7, sp, #0
   11012:	6078      	str	r0, [r7, #4]
   11014:	687b      	ldr	r3, [r7, #4]
   11016:	2b00      	cmp	r3, #0
   11018:	d001      	beq.n	1101e <mp_obj_new_bool+0x12>
   1101a:	4b04      	ldr	r3, [pc, #16]	; (1102c <mp_obj_new_bool+0x20>)
   1101c:	e000      	b.n	11020 <mp_obj_new_bool+0x14>
   1101e:	4b04      	ldr	r3, [pc, #16]	; (11030 <mp_obj_new_bool+0x24>)
   11020:	4618      	mov	r0, r3
   11022:	370c      	adds	r7, #12
   11024:	46bd      	mov	sp, r7
   11026:	f85d 7b04 	ldr.w	r7, [sp], #4
   1102a:	4770      	bx	lr
   1102c:	00023868 	.word	0x00023868
   11030:	00023860 	.word	0x00023860

00011034 <mp_arg_check_num>:
static inline void mp_arg_check_num(size_t n_args, size_t n_kw, size_t n_args_min, size_t n_args_max, bool takes_kw) {
   11034:	b580      	push	{r7, lr}
   11036:	b084      	sub	sp, #16
   11038:	af00      	add	r7, sp, #0
   1103a:	60f8      	str	r0, [r7, #12]
   1103c:	60b9      	str	r1, [r7, #8]
   1103e:	607a      	str	r2, [r7, #4]
   11040:	603b      	str	r3, [r7, #0]
    mp_arg_check_num_sig(n_args, n_kw, (uint32_t)MP_OBJ_FUN_MAKE_SIG(n_args_min, n_args_max, takes_kw));
   11042:	687b      	ldr	r3, [r7, #4]
   11044:	045a      	lsls	r2, r3, #17
   11046:	683b      	ldr	r3, [r7, #0]
   11048:	005b      	lsls	r3, r3, #1
   1104a:	431a      	orrs	r2, r3
   1104c:	7e3b      	ldrb	r3, [r7, #24]
   1104e:	2b00      	cmp	r3, #0
   11050:	d001      	beq.n	11056 <mp_arg_check_num+0x22>
   11052:	2301      	movs	r3, #1
   11054:	e000      	b.n	11058 <mp_arg_check_num+0x24>
   11056:	2300      	movs	r3, #0
   11058:	4313      	orrs	r3, r2
   1105a:	461a      	mov	r2, r3
   1105c:	68b9      	ldr	r1, [r7, #8]
   1105e:	68f8      	ldr	r0, [r7, #12]
   11060:	f7fc f9ba 	bl	d3d8 <mp_arg_check_num_sig>
}
   11064:	bf00      	nop
   11066:	3710      	adds	r7, #16
   11068:	46bd      	mov	sp, r7
   1106a:	bd80      	pop	{r7, pc}

0001106c <list_print>:
#define LIST_MIN_ALLOC 4

/******************************************************************************/
/* list                                                                       */

STATIC void list_print(const mp_print_t *print, mp_obj_t o_in, mp_print_kind_t kind) {
   1106c:	b580      	push	{r7, lr}
   1106e:	b086      	sub	sp, #24
   11070:	af00      	add	r7, sp, #0
   11072:	60f8      	str	r0, [r7, #12]
   11074:	60b9      	str	r1, [r7, #8]
   11076:	607a      	str	r2, [r7, #4]
    mp_obj_list_t *o = MP_OBJ_TO_PTR(o_in);
   11078:	68bb      	ldr	r3, [r7, #8]
   1107a:	613b      	str	r3, [r7, #16]
    if (!(MICROPY_PY_UJSON && kind == PRINT_JSON)) {
        kind = PRINT_REPR;
   1107c:	2301      	movs	r3, #1
   1107e:	607b      	str	r3, [r7, #4]
    }
    mp_print_str(print, "[");
   11080:	4914      	ldr	r1, [pc, #80]	; (110d4 <list_print+0x68>)
   11082:	68f8      	ldr	r0, [r7, #12]
   11084:	f7f0 fce2 	bl	1a4c <mp_print_str>
    for (size_t i = 0; i < o->len; i++) {
   11088:	2300      	movs	r3, #0
   1108a:	617b      	str	r3, [r7, #20]
   1108c:	e014      	b.n	110b8 <list_print+0x4c>
        if (i > 0) {
   1108e:	697b      	ldr	r3, [r7, #20]
   11090:	2b00      	cmp	r3, #0
   11092:	d003      	beq.n	1109c <list_print+0x30>
            mp_print_str(print, ", ");
   11094:	4910      	ldr	r1, [pc, #64]	; (110d8 <list_print+0x6c>)
   11096:	68f8      	ldr	r0, [r7, #12]
   11098:	f7f0 fcd8 	bl	1a4c <mp_print_str>
        }
        mp_obj_print_helper(print, o->items[i], kind);
   1109c:	693b      	ldr	r3, [r7, #16]
   1109e:	68da      	ldr	r2, [r3, #12]
   110a0:	697b      	ldr	r3, [r7, #20]
   110a2:	009b      	lsls	r3, r3, #2
   110a4:	4413      	add	r3, r2
   110a6:	681b      	ldr	r3, [r3, #0]
   110a8:	687a      	ldr	r2, [r7, #4]
   110aa:	4619      	mov	r1, r3
   110ac:	68f8      	ldr	r0, [r7, #12]
   110ae:	f7fc fe06 	bl	dcbe <mp_obj_print_helper>
    for (size_t i = 0; i < o->len; i++) {
   110b2:	697b      	ldr	r3, [r7, #20]
   110b4:	3301      	adds	r3, #1
   110b6:	617b      	str	r3, [r7, #20]
   110b8:	693b      	ldr	r3, [r7, #16]
   110ba:	689a      	ldr	r2, [r3, #8]
   110bc:	697b      	ldr	r3, [r7, #20]
   110be:	429a      	cmp	r2, r3
   110c0:	d8e5      	bhi.n	1108e <list_print+0x22>
    }
    mp_print_str(print, "]");
   110c2:	4906      	ldr	r1, [pc, #24]	; (110dc <list_print+0x70>)
   110c4:	68f8      	ldr	r0, [r7, #12]
   110c6:	f7f0 fcc1 	bl	1a4c <mp_print_str>
}
   110ca:	bf00      	nop
   110cc:	3718      	adds	r7, #24
   110ce:	46bd      	mov	sp, r7
   110d0:	bd80      	pop	{r7, pc}
   110d2:	bf00      	nop
   110d4:	00024c28 	.word	0x00024c28
   110d8:	00024c2c 	.word	0x00024c2c
   110dc:	00024c30 	.word	0x00024c30

000110e0 <list_extend_from_iter>:

STATIC mp_obj_t list_extend_from_iter(mp_obj_t list, mp_obj_t iterable) {
   110e0:	b580      	push	{r7, lr}
   110e2:	b084      	sub	sp, #16
   110e4:	af00      	add	r7, sp, #0
   110e6:	6078      	str	r0, [r7, #4]
   110e8:	6039      	str	r1, [r7, #0]
    mp_obj_t iter = mp_getiter(iterable, NULL);
   110ea:	2100      	movs	r1, #0
   110ec:	6838      	ldr	r0, [r7, #0]
   110ee:	f7fb fdeb 	bl	ccc8 <mp_getiter>
   110f2:	60f8      	str	r0, [r7, #12]
    mp_obj_t item;
    while ((item = mp_iternext(iter)) != MP_OBJ_STOP_ITERATION) {
   110f4:	e003      	b.n	110fe <list_extend_from_iter+0x1e>
        mp_obj_list_append(list, item);
   110f6:	68b9      	ldr	r1, [r7, #8]
   110f8:	6878      	ldr	r0, [r7, #4]
   110fa:	f000 f982 	bl	11402 <mp_obj_list_append>
    while ((item = mp_iternext(iter)) != MP_OBJ_STOP_ITERATION) {
   110fe:	68f8      	ldr	r0, [r7, #12]
   11100:	f7fb fe64 	bl	cdcc <mp_iternext>
   11104:	60b8      	str	r0, [r7, #8]
   11106:	68bb      	ldr	r3, [r7, #8]
   11108:	2b04      	cmp	r3, #4
   1110a:	d1f4      	bne.n	110f6 <list_extend_from_iter+0x16>
    }
    return list;
   1110c:	687b      	ldr	r3, [r7, #4]
}
   1110e:	4618      	mov	r0, r3
   11110:	3710      	adds	r7, #16
   11112:	46bd      	mov	sp, r7
   11114:	bd80      	pop	{r7, pc}

00011116 <list_make_new>:

STATIC mp_obj_t list_make_new(const mp_obj_type_t *type_in, size_t n_args, size_t n_kw, const mp_obj_t *args) {
   11116:	b580      	push	{r7, lr}
   11118:	b088      	sub	sp, #32
   1111a:	af02      	add	r7, sp, #8
   1111c:	60f8      	str	r0, [r7, #12]
   1111e:	60b9      	str	r1, [r7, #8]
   11120:	607a      	str	r2, [r7, #4]
   11122:	603b      	str	r3, [r7, #0]
    (void)type_in;
    mp_arg_check_num(n_args, n_kw, 0, 1, false);
   11124:	2300      	movs	r3, #0
   11126:	9300      	str	r3, [sp, #0]
   11128:	2301      	movs	r3, #1
   1112a:	2200      	movs	r2, #0
   1112c:	6879      	ldr	r1, [r7, #4]
   1112e:	68b8      	ldr	r0, [r7, #8]
   11130:	f7ff ff80 	bl	11034 <mp_arg_check_num>

    switch (n_args) {
   11134:	68bb      	ldr	r3, [r7, #8]
   11136:	2b00      	cmp	r3, #0
   11138:	d105      	bne.n	11146 <list_make_new+0x30>
        case 0:
            // return a new, empty list
            return mp_obj_new_list(0, NULL);
   1113a:	2100      	movs	r1, #0
   1113c:	2000      	movs	r0, #0
   1113e:	f000 fdcc 	bl	11cda <mp_obj_new_list>
   11142:	4603      	mov	r3, r0
   11144:	e00b      	b.n	1115e <list_make_new+0x48>

        case 1:
        default: {
            // make list from iterable
            // TODO: optimize list/tuple
            mp_obj_t list = mp_obj_new_list(0, NULL);
   11146:	2100      	movs	r1, #0
   11148:	2000      	movs	r0, #0
   1114a:	f000 fdc6 	bl	11cda <mp_obj_new_list>
   1114e:	6178      	str	r0, [r7, #20]
            return list_extend_from_iter(list, args[0]);
   11150:	683b      	ldr	r3, [r7, #0]
   11152:	681b      	ldr	r3, [r3, #0]
   11154:	4619      	mov	r1, r3
   11156:	6978      	ldr	r0, [r7, #20]
   11158:	f7ff ffc2 	bl	110e0 <list_extend_from_iter>
   1115c:	4603      	mov	r3, r0
        }
    }
}
   1115e:	4618      	mov	r0, r3
   11160:	3718      	adds	r7, #24
   11162:	46bd      	mov	sp, r7
   11164:	bd80      	pop	{r7, pc}

00011166 <list_unary_op>:

STATIC mp_obj_t list_unary_op(mp_unary_op_t op, mp_obj_t self_in) {
   11166:	b580      	push	{r7, lr}
   11168:	b084      	sub	sp, #16
   1116a:	af00      	add	r7, sp, #0
   1116c:	6078      	str	r0, [r7, #4]
   1116e:	6039      	str	r1, [r7, #0]
    mp_obj_list_t *self = MP_OBJ_TO_PTR(self_in);
   11170:	683b      	ldr	r3, [r7, #0]
   11172:	60fb      	str	r3, [r7, #12]
    switch (op) {
   11174:	687b      	ldr	r3, [r7, #4]
   11176:	2b04      	cmp	r3, #4
   11178:	d002      	beq.n	11180 <list_unary_op+0x1a>
   1117a:	2b05      	cmp	r3, #5
   1117c:	d00c      	beq.n	11198 <list_unary_op+0x32>
   1117e:	e011      	b.n	111a4 <list_unary_op+0x3e>
        case MP_UNARY_OP_BOOL: return mp_obj_new_bool(self->len != 0);
   11180:	68fb      	ldr	r3, [r7, #12]
   11182:	689b      	ldr	r3, [r3, #8]
   11184:	2b00      	cmp	r3, #0
   11186:	bf14      	ite	ne
   11188:	2301      	movne	r3, #1
   1118a:	2300      	moveq	r3, #0
   1118c:	b2db      	uxtb	r3, r3
   1118e:	4618      	mov	r0, r3
   11190:	f7ff ff3c 	bl	1100c <mp_obj_new_bool>
   11194:	4603      	mov	r3, r0
   11196:	e006      	b.n	111a6 <list_unary_op+0x40>
        case MP_UNARY_OP_LEN: return MP_OBJ_NEW_SMALL_INT(self->len);
   11198:	68fb      	ldr	r3, [r7, #12]
   1119a:	689b      	ldr	r3, [r3, #8]
   1119c:	005b      	lsls	r3, r3, #1
   1119e:	f043 0301 	orr.w	r3, r3, #1
   111a2:	e000      	b.n	111a6 <list_unary_op+0x40>
        case MP_UNARY_OP_SIZEOF: {
            size_t sz = sizeof(*self) + sizeof(mp_obj_t) * self->alloc;
            return MP_OBJ_NEW_SMALL_INT(sz);
        }
        #endif
        default: return MP_OBJ_NULL; // op not supported
   111a4:	2300      	movs	r3, #0
    }
}
   111a6:	4618      	mov	r0, r3
   111a8:	3710      	adds	r7, #16
   111aa:	46bd      	mov	sp, r7
   111ac:	bd80      	pop	{r7, pc}

000111ae <list_binary_op>:

STATIC mp_obj_t list_binary_op(mp_binary_op_t op, mp_obj_t lhs, mp_obj_t rhs) {
   111ae:	b580      	push	{r7, lr}
   111b0:	b08e      	sub	sp, #56	; 0x38
   111b2:	af02      	add	r7, sp, #8
   111b4:	60f8      	str	r0, [r7, #12]
   111b6:	60b9      	str	r1, [r7, #8]
   111b8:	607a      	str	r2, [r7, #4]
    mp_obj_list_t *o = MP_OBJ_TO_PTR(lhs);
   111ba:	68bb      	ldr	r3, [r7, #8]
   111bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    switch (op) {
   111be:	68fb      	ldr	r3, [r7, #12]
   111c0:	2b1c      	cmp	r3, #28
   111c2:	f200 80cf 	bhi.w	11364 <list_binary_op+0x1b6>
   111c6:	a201      	add	r2, pc, #4	; (adr r2, 111cc <list_binary_op+0x1e>)
   111c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   111cc:	0001130d 	.word	0x0001130d
   111d0:	0001130d 	.word	0x0001130d
   111d4:	0001130d 	.word	0x0001130d
   111d8:	0001130d 	.word	0x0001130d
   111dc:	0001130d 	.word	0x0001130d
   111e0:	00011365 	.word	0x00011365
   111e4:	00011365 	.word	0x00011365
   111e8:	00011365 	.word	0x00011365
   111ec:	00011365 	.word	0x00011365
   111f0:	00011365 	.word	0x00011365
   111f4:	00011365 	.word	0x00011365
   111f8:	00011365 	.word	0x00011365
   111fc:	00011365 	.word	0x00011365
   11200:	00011365 	.word	0x00011365
   11204:	000112ab 	.word	0x000112ab
   11208:	00011365 	.word	0x00011365
   1120c:	00011365 	.word	0x00011365
   11210:	00011365 	.word	0x00011365
   11214:	00011365 	.word	0x00011365
   11218:	00011365 	.word	0x00011365
   1121c:	00011365 	.word	0x00011365
   11220:	00011365 	.word	0x00011365
   11224:	00011365 	.word	0x00011365
   11228:	00011365 	.word	0x00011365
   1122c:	00011365 	.word	0x00011365
   11230:	00011365 	.word	0x00011365
   11234:	00011241 	.word	0x00011241
   11238:	00011365 	.word	0x00011365
   1123c:	000112b7 	.word	0x000112b7
        case MP_BINARY_OP_ADD: {
            if (!MP_OBJ_IS_TYPE(rhs, &mp_type_list)) {
   11240:	6878      	ldr	r0, [r7, #4]
   11242:	f7ff fed1 	bl	10fe8 <MP_OBJ_IS_OBJ>
   11246:	4603      	mov	r3, r0
   11248:	f083 0301 	eor.w	r3, r3, #1
   1124c:	b2db      	uxtb	r3, r3
   1124e:	2b00      	cmp	r3, #0
   11250:	d104      	bne.n	1125c <list_binary_op+0xae>
   11252:	687b      	ldr	r3, [r7, #4]
   11254:	681b      	ldr	r3, [r3, #0]
   11256:	4a46      	ldr	r2, [pc, #280]	; (11370 <list_binary_op+0x1c2>)
   11258:	4293      	cmp	r3, r2
   1125a:	d001      	beq.n	11260 <list_binary_op+0xb2>
                return MP_OBJ_NULL; // op not supported
   1125c:	2300      	movs	r3, #0
   1125e:	e082      	b.n	11366 <list_binary_op+0x1b8>
            }
            mp_obj_list_t *p = MP_OBJ_TO_PTR(rhs);
   11260:	687b      	ldr	r3, [r7, #4]
   11262:	62bb      	str	r3, [r7, #40]	; 0x28
            mp_obj_list_t *s = list_new(o->len + p->len);
   11264:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   11266:	689a      	ldr	r2, [r3, #8]
   11268:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1126a:	689b      	ldr	r3, [r3, #8]
   1126c:	4413      	add	r3, r2
   1126e:	4618      	mov	r0, r3
   11270:	f000 fd22 	bl	11cb8 <list_new>
   11274:	6278      	str	r0, [r7, #36]	; 0x24
            mp_seq_cat(s->items, o->items, o->len, p->items, p->len, mp_obj_t);
   11276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   11278:	68d8      	ldr	r0, [r3, #12]
   1127a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1127c:	68d9      	ldr	r1, [r3, #12]
   1127e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   11280:	689b      	ldr	r3, [r3, #8]
   11282:	009b      	lsls	r3, r3, #2
   11284:	461a      	mov	r2, r3
   11286:	f00d f953 	bl	1e530 <memcpy>
   1128a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1128c:	68da      	ldr	r2, [r3, #12]
   1128e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   11290:	689b      	ldr	r3, [r3, #8]
   11292:	009b      	lsls	r3, r3, #2
   11294:	18d0      	adds	r0, r2, r3
   11296:	6abb      	ldr	r3, [r7, #40]	; 0x28
   11298:	68d9      	ldr	r1, [r3, #12]
   1129a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1129c:	689b      	ldr	r3, [r3, #8]
   1129e:	009b      	lsls	r3, r3, #2
   112a0:	461a      	mov	r2, r3
   112a2:	f00d f945 	bl	1e530 <memcpy>
            return MP_OBJ_FROM_PTR(s);
   112a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   112a8:	e05d      	b.n	11366 <list_binary_op+0x1b8>
        }
        case MP_BINARY_OP_INPLACE_ADD: {
            list_extend(lhs, rhs);
   112aa:	6879      	ldr	r1, [r7, #4]
   112ac:	68b8      	ldr	r0, [r7, #8]
   112ae:	f000 f905 	bl	114bc <list_extend>
            return lhs;
   112b2:	68bb      	ldr	r3, [r7, #8]
   112b4:	e057      	b.n	11366 <list_binary_op+0x1b8>
        }
        case MP_BINARY_OP_MULTIPLY: {
            mp_int_t n;
            if (!mp_obj_get_int_maybe(rhs, &n)) {
   112b6:	f107 0314 	add.w	r3, r7, #20
   112ba:	4619      	mov	r1, r3
   112bc:	6878      	ldr	r0, [r7, #4]
   112be:	f7fc ff09 	bl	e0d4 <mp_obj_get_int_maybe>
   112c2:	4603      	mov	r3, r0
   112c4:	f083 0301 	eor.w	r3, r3, #1
   112c8:	b2db      	uxtb	r3, r3
   112ca:	2b00      	cmp	r3, #0
   112cc:	d001      	beq.n	112d2 <list_binary_op+0x124>
                return MP_OBJ_NULL; // op not supported
   112ce:	2300      	movs	r3, #0
   112d0:	e049      	b.n	11366 <list_binary_op+0x1b8>
            }
            if (n < 0) {
   112d2:	697b      	ldr	r3, [r7, #20]
   112d4:	2b00      	cmp	r3, #0
   112d6:	da01      	bge.n	112dc <list_binary_op+0x12e>
                n = 0;
   112d8:	2300      	movs	r3, #0
   112da:	617b      	str	r3, [r7, #20]
            }
            mp_obj_list_t *s = list_new(o->len * n);
   112dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   112de:	689b      	ldr	r3, [r3, #8]
   112e0:	697a      	ldr	r2, [r7, #20]
   112e2:	fb02 f303 	mul.w	r3, r2, r3
   112e6:	4618      	mov	r0, r3
   112e8:	f000 fce6 	bl	11cb8 <list_new>
   112ec:	6238      	str	r0, [r7, #32]
            mp_seq_multiply(o->items, sizeof(*o->items), o->len, n, s->items);
   112ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   112f0:	68d8      	ldr	r0, [r3, #12]
   112f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   112f4:	689a      	ldr	r2, [r3, #8]
   112f6:	697b      	ldr	r3, [r7, #20]
   112f8:	4619      	mov	r1, r3
   112fa:	6a3b      	ldr	r3, [r7, #32]
   112fc:	68db      	ldr	r3, [r3, #12]
   112fe:	9300      	str	r3, [sp, #0]
   11300:	460b      	mov	r3, r1
   11302:	2104      	movs	r1, #4
   11304:	f006 fd04 	bl	17d10 <mp_seq_multiply>
            return MP_OBJ_FROM_PTR(s);
   11308:	6a3b      	ldr	r3, [r7, #32]
   1130a:	e02c      	b.n	11366 <list_binary_op+0x1b8>
        case MP_BINARY_OP_EQUAL:
        case MP_BINARY_OP_LESS:
        case MP_BINARY_OP_LESS_EQUAL:
        case MP_BINARY_OP_MORE:
        case MP_BINARY_OP_MORE_EQUAL: {
            if (!MP_OBJ_IS_TYPE(rhs, &mp_type_list)) {
   1130c:	6878      	ldr	r0, [r7, #4]
   1130e:	f7ff fe6b 	bl	10fe8 <MP_OBJ_IS_OBJ>
   11312:	4603      	mov	r3, r0
   11314:	f083 0301 	eor.w	r3, r3, #1
   11318:	b2db      	uxtb	r3, r3
   1131a:	2b00      	cmp	r3, #0
   1131c:	d104      	bne.n	11328 <list_binary_op+0x17a>
   1131e:	687b      	ldr	r3, [r7, #4]
   11320:	681b      	ldr	r3, [r3, #0]
   11322:	4a13      	ldr	r2, [pc, #76]	; (11370 <list_binary_op+0x1c2>)
   11324:	4293      	cmp	r3, r2
   11326:	d006      	beq.n	11336 <list_binary_op+0x188>
                if (op == MP_BINARY_OP_EQUAL) {
   11328:	68fb      	ldr	r3, [r7, #12]
   1132a:	2b02      	cmp	r3, #2
   1132c:	d101      	bne.n	11332 <list_binary_op+0x184>
                    return mp_const_false;
   1132e:	4b11      	ldr	r3, [pc, #68]	; (11374 <list_binary_op+0x1c6>)
   11330:	e019      	b.n	11366 <list_binary_op+0x1b8>
                }
                return MP_OBJ_NULL; // op not supported
   11332:	2300      	movs	r3, #0
   11334:	e017      	b.n	11366 <list_binary_op+0x1b8>
            }

            mp_obj_list_t *another = MP_OBJ_TO_PTR(rhs);
   11336:	687b      	ldr	r3, [r7, #4]
   11338:	61fb      	str	r3, [r7, #28]
            bool res = mp_seq_cmp_objs(op, o->items, o->len, another->items, another->len);
   1133a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1133c:	68d9      	ldr	r1, [r3, #12]
   1133e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   11340:	689a      	ldr	r2, [r3, #8]
   11342:	69fb      	ldr	r3, [r7, #28]
   11344:	68d8      	ldr	r0, [r3, #12]
   11346:	69fb      	ldr	r3, [r7, #28]
   11348:	689b      	ldr	r3, [r3, #8]
   1134a:	9300      	str	r3, [sp, #0]
   1134c:	4603      	mov	r3, r0
   1134e:	68f8      	ldr	r0, [r7, #12]
   11350:	f006 fd9f 	bl	17e92 <mp_seq_cmp_objs>
   11354:	4603      	mov	r3, r0
   11356:	76fb      	strb	r3, [r7, #27]
            return mp_obj_new_bool(res);
   11358:	7efb      	ldrb	r3, [r7, #27]
   1135a:	4618      	mov	r0, r3
   1135c:	f7ff fe56 	bl	1100c <mp_obj_new_bool>
   11360:	4603      	mov	r3, r0
   11362:	e000      	b.n	11366 <list_binary_op+0x1b8>
        }

        default:
            return MP_OBJ_NULL; // op not supported
   11364:	2300      	movs	r3, #0
    }
}
   11366:	4618      	mov	r0, r3
   11368:	3730      	adds	r7, #48	; 0x30
   1136a:	46bd      	mov	sp, r7
   1136c:	bd80      	pop	{r7, pc}
   1136e:	bf00      	nop
   11370:	00024e44 	.word	0x00024e44
   11374:	00023860 	.word	0x00023860

00011378 <list_subscr>:

STATIC mp_obj_t list_subscr(mp_obj_t self_in, mp_obj_t index, mp_obj_t value) {
   11378:	b580      	push	{r7, lr}
   1137a:	b088      	sub	sp, #32
   1137c:	af00      	add	r7, sp, #0
   1137e:	60f8      	str	r0, [r7, #12]
   11380:	60b9      	str	r1, [r7, #8]
   11382:	607a      	str	r2, [r7, #4]
    if (value == MP_OBJ_NULL) {
   11384:	687b      	ldr	r3, [r7, #4]
   11386:	2b00      	cmp	r3, #0
   11388:	d10b      	bne.n	113a2 <list_subscr+0x2a>
            mp_seq_clear(self->items, self->len + len_adj, self->len, sizeof(*self->items));
            self->len += len_adj;
            return mp_const_none;
        }
#endif
        mp_obj_t args[2] = {self_in, index};
   1138a:	68fb      	ldr	r3, [r7, #12]
   1138c:	613b      	str	r3, [r7, #16]
   1138e:	68bb      	ldr	r3, [r7, #8]
   11390:	617b      	str	r3, [r7, #20]
        list_pop(2, args);
   11392:	f107 0310 	add.w	r3, r7, #16
   11396:	4619      	mov	r1, r3
   11398:	2002      	movs	r0, #2
   1139a:	f000 f913 	bl	115c4 <list_pop>
        return mp_const_none;
   1139e:	4b10      	ldr	r3, [pc, #64]	; (113e0 <list_subscr+0x68>)
   113a0:	e01a      	b.n	113d8 <list_subscr+0x60>
    } else if (value == MP_OBJ_SENTINEL) {
   113a2:	687b      	ldr	r3, [r7, #4]
   113a4:	2b08      	cmp	r3, #8
   113a6:	d111      	bne.n	113cc <list_subscr+0x54>
        // load
        mp_obj_list_t *self = MP_OBJ_TO_PTR(self_in);
   113a8:	68fb      	ldr	r3, [r7, #12]
   113aa:	61fb      	str	r3, [r7, #28]
            mp_obj_list_t *res = list_new(slice.stop - slice.start);
            mp_seq_copy(res->items, self->items + slice.start, res->len, mp_obj_t);
            return MP_OBJ_FROM_PTR(res);
        }
#endif
        size_t index_val = mp_get_index(self->base.type, self->len, index, false);
   113ac:	69fb      	ldr	r3, [r7, #28]
   113ae:	6818      	ldr	r0, [r3, #0]
   113b0:	69fb      	ldr	r3, [r7, #28]
   113b2:	6899      	ldr	r1, [r3, #8]
   113b4:	2300      	movs	r3, #0
   113b6:	68ba      	ldr	r2, [r7, #8]
   113b8:	f7fc ff1c 	bl	e1f4 <mp_get_index>
   113bc:	61b8      	str	r0, [r7, #24]
        return self->items[index_val];
   113be:	69fb      	ldr	r3, [r7, #28]
   113c0:	68da      	ldr	r2, [r3, #12]
   113c2:	69bb      	ldr	r3, [r7, #24]
   113c4:	009b      	lsls	r3, r3, #2
   113c6:	4413      	add	r3, r2
   113c8:	681b      	ldr	r3, [r3, #0]
   113ca:	e005      	b.n	113d8 <list_subscr+0x60>
            }
            self->len += len_adj;
            return mp_const_none;
        }
#endif
        mp_obj_list_store(self_in, index, value);
   113cc:	687a      	ldr	r2, [r7, #4]
   113ce:	68b9      	ldr	r1, [r7, #8]
   113d0:	68f8      	ldr	r0, [r7, #12]
   113d2:	f000 fcce 	bl	11d72 <mp_obj_list_store>
        return mp_const_none;
   113d6:	4b02      	ldr	r3, [pc, #8]	; (113e0 <list_subscr+0x68>)
    }
}
   113d8:	4618      	mov	r0, r3
   113da:	3720      	adds	r7, #32
   113dc:	46bd      	mov	sp, r7
   113de:	bd80      	pop	{r7, pc}
   113e0:	0002511c 	.word	0x0002511c

000113e4 <list_getiter>:

STATIC mp_obj_t list_getiter(mp_obj_t o_in, mp_obj_iter_buf_t *iter_buf) {
   113e4:	b580      	push	{r7, lr}
   113e6:	b082      	sub	sp, #8
   113e8:	af00      	add	r7, sp, #0
   113ea:	6078      	str	r0, [r7, #4]
   113ec:	6039      	str	r1, [r7, #0]
    return mp_obj_new_list_iterator(o_in, 0, iter_buf);
   113ee:	683a      	ldr	r2, [r7, #0]
   113f0:	2100      	movs	r1, #0
   113f2:	6878      	ldr	r0, [r7, #4]
   113f4:	f000 fcfe 	bl	11df4 <mp_obj_new_list_iterator>
   113f8:	4603      	mov	r3, r0
}
   113fa:	4618      	mov	r0, r3
   113fc:	3708      	adds	r7, #8
   113fe:	46bd      	mov	sp, r7
   11400:	bd80      	pop	{r7, pc}

00011402 <mp_obj_list_append>:

mp_obj_t mp_obj_list_append(mp_obj_t self_in, mp_obj_t arg) {
   11402:	b580      	push	{r7, lr}
   11404:	b084      	sub	sp, #16
   11406:	af00      	add	r7, sp, #0
   11408:	6078      	str	r0, [r7, #4]
   1140a:	6039      	str	r1, [r7, #0]
    mp_check_self(MP_OBJ_IS_TYPE(self_in, &mp_type_list));
   1140c:	6878      	ldr	r0, [r7, #4]
   1140e:	f7ff fdeb 	bl	10fe8 <MP_OBJ_IS_OBJ>
   11412:	4603      	mov	r3, r0
   11414:	2b00      	cmp	r3, #0
   11416:	d004      	beq.n	11422 <mp_obj_list_append+0x20>
   11418:	687b      	ldr	r3, [r7, #4]
   1141a:	681b      	ldr	r3, [r3, #0]
   1141c:	4a22      	ldr	r2, [pc, #136]	; (114a8 <mp_obj_list_append+0xa6>)
   1141e:	4293      	cmp	r3, r2
   11420:	d005      	beq.n	1142e <mp_obj_list_append+0x2c>
   11422:	4b22      	ldr	r3, [pc, #136]	; (114ac <mp_obj_list_append+0xaa>)
   11424:	4a22      	ldr	r2, [pc, #136]	; (114b0 <mp_obj_list_append+0xae>)
   11426:	21eb      	movs	r1, #235	; 0xeb
   11428:	4822      	ldr	r0, [pc, #136]	; (114b4 <mp_obj_list_append+0xb2>)
   1142a:	f00b fd59 	bl	1cee0 <__assert_func>
    mp_obj_list_t *self = MP_OBJ_TO_PTR(self_in);
   1142e:	687b      	ldr	r3, [r7, #4]
   11430:	60fb      	str	r3, [r7, #12]
    if (self->len >= self->alloc) {
   11432:	68fb      	ldr	r3, [r7, #12]
   11434:	689a      	ldr	r2, [r3, #8]
   11436:	68fb      	ldr	r3, [r7, #12]
   11438:	685b      	ldr	r3, [r3, #4]
   1143a:	429a      	cmp	r2, r3
   1143c:	d324      	bcc.n	11488 <mp_obj_list_append+0x86>
        self->items = m_renew(mp_obj_t, self->items, self->alloc, self->alloc * 2);
   1143e:	68fb      	ldr	r3, [r7, #12]
   11440:	68da      	ldr	r2, [r3, #12]
   11442:	68fb      	ldr	r3, [r7, #12]
   11444:	685b      	ldr	r3, [r3, #4]
   11446:	00db      	lsls	r3, r3, #3
   11448:	4619      	mov	r1, r3
   1144a:	4610      	mov	r0, r2
   1144c:	f7ee ffa7 	bl	39e <m_realloc>
   11450:	4602      	mov	r2, r0
   11452:	68fb      	ldr	r3, [r7, #12]
   11454:	60da      	str	r2, [r3, #12]
        self->alloc *= 2;
   11456:	68fb      	ldr	r3, [r7, #12]
   11458:	685b      	ldr	r3, [r3, #4]
   1145a:	005a      	lsls	r2, r3, #1
   1145c:	68fb      	ldr	r3, [r7, #12]
   1145e:	605a      	str	r2, [r3, #4]
        mp_seq_clear(self->items, self->len + 1, self->alloc, sizeof(*self->items));
   11460:	68fb      	ldr	r3, [r7, #12]
   11462:	68da      	ldr	r2, [r3, #12]
   11464:	68fb      	ldr	r3, [r7, #12]
   11466:	689b      	ldr	r3, [r3, #8]
   11468:	3301      	adds	r3, #1
   1146a:	009b      	lsls	r3, r3, #2
   1146c:	18d0      	adds	r0, r2, r3
   1146e:	68fb      	ldr	r3, [r7, #12]
   11470:	685a      	ldr	r2, [r3, #4]
   11472:	68fb      	ldr	r3, [r7, #12]
   11474:	689b      	ldr	r3, [r3, #8]
   11476:	1ad3      	subs	r3, r2, r3
   11478:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1147c:	3b01      	subs	r3, #1
   1147e:	009b      	lsls	r3, r3, #2
   11480:	461a      	mov	r2, r3
   11482:	2100      	movs	r1, #0
   11484:	f00d f8ee 	bl	1e664 <memset>
    }
    self->items[self->len++] = arg;
   11488:	68fb      	ldr	r3, [r7, #12]
   1148a:	68da      	ldr	r2, [r3, #12]
   1148c:	68fb      	ldr	r3, [r7, #12]
   1148e:	689b      	ldr	r3, [r3, #8]
   11490:	1c58      	adds	r0, r3, #1
   11492:	68f9      	ldr	r1, [r7, #12]
   11494:	6088      	str	r0, [r1, #8]
   11496:	009b      	lsls	r3, r3, #2
   11498:	4413      	add	r3, r2
   1149a:	683a      	ldr	r2, [r7, #0]
   1149c:	601a      	str	r2, [r3, #0]
    return mp_const_none; // return None, as per CPython
   1149e:	4b06      	ldr	r3, [pc, #24]	; (114b8 <mp_obj_list_append+0xb6>)
}
   114a0:	4618      	mov	r0, r3
   114a2:	3710      	adds	r7, #16
   114a4:	46bd      	mov	sp, r7
   114a6:	bd80      	pop	{r7, pc}
   114a8:	00024e44 	.word	0x00024e44
   114ac:	00024c34 	.word	0x00024c34
   114b0:	00024e80 	.word	0x00024e80
   114b4:	00024c90 	.word	0x00024c90
   114b8:	0002511c 	.word	0x0002511c

000114bc <list_extend>:

STATIC mp_obj_t list_extend(mp_obj_t self_in, mp_obj_t arg_in) {
   114bc:	b580      	push	{r7, lr}
   114be:	b084      	sub	sp, #16
   114c0:	af00      	add	r7, sp, #0
   114c2:	6078      	str	r0, [r7, #4]
   114c4:	6039      	str	r1, [r7, #0]
    mp_check_self(MP_OBJ_IS_TYPE(self_in, &mp_type_list));
   114c6:	6878      	ldr	r0, [r7, #4]
   114c8:	f7ff fd8e 	bl	10fe8 <MP_OBJ_IS_OBJ>
   114cc:	4603      	mov	r3, r0
   114ce:	2b00      	cmp	r3, #0
   114d0:	d004      	beq.n	114dc <list_extend+0x20>
   114d2:	687b      	ldr	r3, [r7, #4]
   114d4:	681b      	ldr	r3, [r3, #0]
   114d6:	4a36      	ldr	r2, [pc, #216]	; (115b0 <list_extend+0xf4>)
   114d8:	4293      	cmp	r3, r2
   114da:	d005      	beq.n	114e8 <list_extend+0x2c>
   114dc:	4b35      	ldr	r3, [pc, #212]	; (115b4 <list_extend+0xf8>)
   114de:	4a36      	ldr	r2, [pc, #216]	; (115b8 <list_extend+0xfc>)
   114e0:	21f7      	movs	r1, #247	; 0xf7
   114e2:	4836      	ldr	r0, [pc, #216]	; (115bc <list_extend+0x100>)
   114e4:	f00b fcfc 	bl	1cee0 <__assert_func>
    if (MP_OBJ_IS_TYPE(arg_in, &mp_type_list)) {
   114e8:	6838      	ldr	r0, [r7, #0]
   114ea:	f7ff fd7d 	bl	10fe8 <MP_OBJ_IS_OBJ>
   114ee:	4603      	mov	r3, r0
   114f0:	2b00      	cmp	r3, #0
   114f2:	d054      	beq.n	1159e <list_extend+0xe2>
   114f4:	683b      	ldr	r3, [r7, #0]
   114f6:	681b      	ldr	r3, [r3, #0]
   114f8:	4a2d      	ldr	r2, [pc, #180]	; (115b0 <list_extend+0xf4>)
   114fa:	4293      	cmp	r3, r2
   114fc:	d14f      	bne.n	1159e <list_extend+0xe2>
        mp_obj_list_t *self = MP_OBJ_TO_PTR(self_in);
   114fe:	687b      	ldr	r3, [r7, #4]
   11500:	60fb      	str	r3, [r7, #12]
        mp_obj_list_t *arg = MP_OBJ_TO_PTR(arg_in);
   11502:	683b      	ldr	r3, [r7, #0]
   11504:	60bb      	str	r3, [r7, #8]

        if (self->len + arg->len > self->alloc) {
   11506:	68fb      	ldr	r3, [r7, #12]
   11508:	689a      	ldr	r2, [r3, #8]
   1150a:	68bb      	ldr	r3, [r7, #8]
   1150c:	689b      	ldr	r3, [r3, #8]
   1150e:	441a      	add	r2, r3
   11510:	68fb      	ldr	r3, [r7, #12]
   11512:	685b      	ldr	r3, [r3, #4]
   11514:	429a      	cmp	r2, r3
   11516:	d92c      	bls.n	11572 <list_extend+0xb6>
            // TODO: use alloc policy for "4"
            self->items = m_renew(mp_obj_t, self->items, self->alloc, self->len + arg->len + 4);
   11518:	68fb      	ldr	r3, [r7, #12]
   1151a:	68d8      	ldr	r0, [r3, #12]
   1151c:	68fb      	ldr	r3, [r7, #12]
   1151e:	689a      	ldr	r2, [r3, #8]
   11520:	68bb      	ldr	r3, [r7, #8]
   11522:	689b      	ldr	r3, [r3, #8]
   11524:	4413      	add	r3, r2
   11526:	3304      	adds	r3, #4
   11528:	009b      	lsls	r3, r3, #2
   1152a:	4619      	mov	r1, r3
   1152c:	f7ee ff37 	bl	39e <m_realloc>
   11530:	4602      	mov	r2, r0
   11532:	68fb      	ldr	r3, [r7, #12]
   11534:	60da      	str	r2, [r3, #12]
            self->alloc = self->len + arg->len + 4;
   11536:	68fb      	ldr	r3, [r7, #12]
   11538:	689a      	ldr	r2, [r3, #8]
   1153a:	68bb      	ldr	r3, [r7, #8]
   1153c:	689b      	ldr	r3, [r3, #8]
   1153e:	4413      	add	r3, r2
   11540:	1d1a      	adds	r2, r3, #4
   11542:	68fb      	ldr	r3, [r7, #12]
   11544:	605a      	str	r2, [r3, #4]
            mp_seq_clear(self->items, self->len + arg->len, self->alloc, sizeof(*self->items));
   11546:	68fb      	ldr	r3, [r7, #12]
   11548:	68da      	ldr	r2, [r3, #12]
   1154a:	68fb      	ldr	r3, [r7, #12]
   1154c:	6899      	ldr	r1, [r3, #8]
   1154e:	68bb      	ldr	r3, [r7, #8]
   11550:	689b      	ldr	r3, [r3, #8]
   11552:	440b      	add	r3, r1
   11554:	009b      	lsls	r3, r3, #2
   11556:	18d0      	adds	r0, r2, r3
   11558:	68fb      	ldr	r3, [r7, #12]
   1155a:	685a      	ldr	r2, [r3, #4]
   1155c:	68fb      	ldr	r3, [r7, #12]
   1155e:	6899      	ldr	r1, [r3, #8]
   11560:	68bb      	ldr	r3, [r7, #8]
   11562:	689b      	ldr	r3, [r3, #8]
   11564:	440b      	add	r3, r1
   11566:	1ad3      	subs	r3, r2, r3
   11568:	009b      	lsls	r3, r3, #2
   1156a:	461a      	mov	r2, r3
   1156c:	2100      	movs	r1, #0
   1156e:	f00d f879 	bl	1e664 <memset>
        }

        memcpy(self->items + self->len, arg->items, sizeof(mp_obj_t) * arg->len);
   11572:	68fb      	ldr	r3, [r7, #12]
   11574:	68da      	ldr	r2, [r3, #12]
   11576:	68fb      	ldr	r3, [r7, #12]
   11578:	689b      	ldr	r3, [r3, #8]
   1157a:	009b      	lsls	r3, r3, #2
   1157c:	18d0      	adds	r0, r2, r3
   1157e:	68bb      	ldr	r3, [r7, #8]
   11580:	68d9      	ldr	r1, [r3, #12]
   11582:	68bb      	ldr	r3, [r7, #8]
   11584:	689b      	ldr	r3, [r3, #8]
   11586:	009b      	lsls	r3, r3, #2
   11588:	461a      	mov	r2, r3
   1158a:	f00c ffd1 	bl	1e530 <memcpy>
        self->len += arg->len;
   1158e:	68fb      	ldr	r3, [r7, #12]
   11590:	689a      	ldr	r2, [r3, #8]
   11592:	68bb      	ldr	r3, [r7, #8]
   11594:	689b      	ldr	r3, [r3, #8]
   11596:	441a      	add	r2, r3
   11598:	68fb      	ldr	r3, [r7, #12]
   1159a:	609a      	str	r2, [r3, #8]
    if (MP_OBJ_IS_TYPE(arg_in, &mp_type_list)) {
   1159c:	e003      	b.n	115a6 <list_extend+0xea>
    } else {
        list_extend_from_iter(self_in, arg_in);
   1159e:	6839      	ldr	r1, [r7, #0]
   115a0:	6878      	ldr	r0, [r7, #4]
   115a2:	f7ff fd9d 	bl	110e0 <list_extend_from_iter>
    }
    return mp_const_none; // return None, as per CPython
   115a6:	4b06      	ldr	r3, [pc, #24]	; (115c0 <list_extend+0x104>)
}
   115a8:	4618      	mov	r0, r3
   115aa:	3710      	adds	r7, #16
   115ac:	46bd      	mov	sp, r7
   115ae:	bd80      	pop	{r7, pc}
   115b0:	00024e44 	.word	0x00024e44
   115b4:	00024c34 	.word	0x00024c34
   115b8:	00024e94 	.word	0x00024e94
   115bc:	00024c90 	.word	0x00024c90
   115c0:	0002511c 	.word	0x0002511c

000115c4 <list_pop>:

STATIC mp_obj_t list_pop(size_t n_args, const mp_obj_t *args) {
   115c4:	b580      	push	{r7, lr}
   115c6:	b086      	sub	sp, #24
   115c8:	af00      	add	r7, sp, #0
   115ca:	6078      	str	r0, [r7, #4]
   115cc:	6039      	str	r1, [r7, #0]
    mp_check_self(MP_OBJ_IS_TYPE(args[0], &mp_type_list));
   115ce:	683b      	ldr	r3, [r7, #0]
   115d0:	681b      	ldr	r3, [r3, #0]
   115d2:	4618      	mov	r0, r3
   115d4:	f7ff fd08 	bl	10fe8 <MP_OBJ_IS_OBJ>
   115d8:	4603      	mov	r3, r0
   115da:	2b00      	cmp	r3, #0
   115dc:	d005      	beq.n	115ea <list_pop+0x26>
   115de:	683b      	ldr	r3, [r7, #0]
   115e0:	681b      	ldr	r3, [r3, #0]
   115e2:	681b      	ldr	r3, [r3, #0]
   115e4:	4a36      	ldr	r2, [pc, #216]	; (116c0 <list_pop+0xfc>)
   115e6:	4293      	cmp	r3, r2
   115e8:	d006      	beq.n	115f8 <list_pop+0x34>
   115ea:	4b36      	ldr	r3, [pc, #216]	; (116c4 <list_pop+0x100>)
   115ec:	4a36      	ldr	r2, [pc, #216]	; (116c8 <list_pop+0x104>)
   115ee:	f44f 7186 	mov.w	r1, #268	; 0x10c
   115f2:	4836      	ldr	r0, [pc, #216]	; (116cc <list_pop+0x108>)
   115f4:	f00b fc74 	bl	1cee0 <__assert_func>
    mp_obj_list_t *self = MP_OBJ_TO_PTR(args[0]);
   115f8:	683b      	ldr	r3, [r7, #0]
   115fa:	681b      	ldr	r3, [r3, #0]
   115fc:	617b      	str	r3, [r7, #20]
    if (self->len == 0) {
   115fe:	697b      	ldr	r3, [r7, #20]
   11600:	689b      	ldr	r3, [r3, #8]
   11602:	2b00      	cmp	r3, #0
   11604:	d103      	bne.n	1160e <list_pop+0x4a>
        mp_raise_msg(&mp_type_IndexError, "pop from empty list");
   11606:	4932      	ldr	r1, [pc, #200]	; (116d0 <list_pop+0x10c>)
   11608:	4832      	ldr	r0, [pc, #200]	; (116d4 <list_pop+0x110>)
   1160a:	f7fb fe9d 	bl	d348 <mp_raise_msg>
    }
    size_t index = mp_get_index(self->base.type, self->len, n_args == 1 ? MP_OBJ_NEW_SMALL_INT(-1) : args[1], false);
   1160e:	697b      	ldr	r3, [r7, #20]
   11610:	6818      	ldr	r0, [r3, #0]
   11612:	697b      	ldr	r3, [r7, #20]
   11614:	6899      	ldr	r1, [r3, #8]
   11616:	687b      	ldr	r3, [r7, #4]
   11618:	2b01      	cmp	r3, #1
   1161a:	d002      	beq.n	11622 <list_pop+0x5e>
   1161c:	683b      	ldr	r3, [r7, #0]
   1161e:	685a      	ldr	r2, [r3, #4]
   11620:	e001      	b.n	11626 <list_pop+0x62>
   11622:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   11626:	2300      	movs	r3, #0
   11628:	f7fc fde4 	bl	e1f4 <mp_get_index>
   1162c:	6138      	str	r0, [r7, #16]
    mp_obj_t ret = self->items[index];
   1162e:	697b      	ldr	r3, [r7, #20]
   11630:	68da      	ldr	r2, [r3, #12]
   11632:	693b      	ldr	r3, [r7, #16]
   11634:	009b      	lsls	r3, r3, #2
   11636:	4413      	add	r3, r2
   11638:	681b      	ldr	r3, [r3, #0]
   1163a:	60fb      	str	r3, [r7, #12]
    self->len -= 1;
   1163c:	697b      	ldr	r3, [r7, #20]
   1163e:	689b      	ldr	r3, [r3, #8]
   11640:	1e5a      	subs	r2, r3, #1
   11642:	697b      	ldr	r3, [r7, #20]
   11644:	609a      	str	r2, [r3, #8]
    memmove(self->items + index, self->items + index + 1, (self->len - index) * sizeof(mp_obj_t));
   11646:	697b      	ldr	r3, [r7, #20]
   11648:	68da      	ldr	r2, [r3, #12]
   1164a:	693b      	ldr	r3, [r7, #16]
   1164c:	009b      	lsls	r3, r3, #2
   1164e:	18d0      	adds	r0, r2, r3
   11650:	697b      	ldr	r3, [r7, #20]
   11652:	68da      	ldr	r2, [r3, #12]
   11654:	693b      	ldr	r3, [r7, #16]
   11656:	3301      	adds	r3, #1
   11658:	009b      	lsls	r3, r3, #2
   1165a:	18d1      	adds	r1, r2, r3
   1165c:	697b      	ldr	r3, [r7, #20]
   1165e:	689a      	ldr	r2, [r3, #8]
   11660:	693b      	ldr	r3, [r7, #16]
   11662:	1ad3      	subs	r3, r2, r3
   11664:	009b      	lsls	r3, r3, #2
   11666:	461a      	mov	r2, r3
   11668:	f00c ffc7 	bl	1e5fa <memmove>
    // Clear stale pointer from slot which just got freed to prevent GC issues
    self->items[self->len] = MP_OBJ_NULL;
   1166c:	697b      	ldr	r3, [r7, #20]
   1166e:	68da      	ldr	r2, [r3, #12]
   11670:	697b      	ldr	r3, [r7, #20]
   11672:	689b      	ldr	r3, [r3, #8]
   11674:	009b      	lsls	r3, r3, #2
   11676:	4413      	add	r3, r2
   11678:	2200      	movs	r2, #0
   1167a:	601a      	str	r2, [r3, #0]
    if (self->alloc > LIST_MIN_ALLOC && self->alloc > 2 * self->len) {
   1167c:	697b      	ldr	r3, [r7, #20]
   1167e:	685b      	ldr	r3, [r3, #4]
   11680:	2b04      	cmp	r3, #4
   11682:	d918      	bls.n	116b6 <list_pop+0xf2>
   11684:	697b      	ldr	r3, [r7, #20]
   11686:	685a      	ldr	r2, [r3, #4]
   11688:	697b      	ldr	r3, [r7, #20]
   1168a:	689b      	ldr	r3, [r3, #8]
   1168c:	005b      	lsls	r3, r3, #1
   1168e:	429a      	cmp	r2, r3
   11690:	d911      	bls.n	116b6 <list_pop+0xf2>
        self->items = m_renew(mp_obj_t, self->items, self->alloc, self->alloc/2);
   11692:	697b      	ldr	r3, [r7, #20]
   11694:	68da      	ldr	r2, [r3, #12]
   11696:	697b      	ldr	r3, [r7, #20]
   11698:	685b      	ldr	r3, [r3, #4]
   1169a:	085b      	lsrs	r3, r3, #1
   1169c:	009b      	lsls	r3, r3, #2
   1169e:	4619      	mov	r1, r3
   116a0:	4610      	mov	r0, r2
   116a2:	f7ee fe7c 	bl	39e <m_realloc>
   116a6:	4602      	mov	r2, r0
   116a8:	697b      	ldr	r3, [r7, #20]
   116aa:	60da      	str	r2, [r3, #12]
        self->alloc /= 2;
   116ac:	697b      	ldr	r3, [r7, #20]
   116ae:	685b      	ldr	r3, [r3, #4]
   116b0:	085a      	lsrs	r2, r3, #1
   116b2:	697b      	ldr	r3, [r7, #20]
   116b4:	605a      	str	r2, [r3, #4]
    }
    return ret;
   116b6:	68fb      	ldr	r3, [r7, #12]
}
   116b8:	4618      	mov	r0, r3
   116ba:	3718      	adds	r7, #24
   116bc:	46bd      	mov	sp, r7
   116be:	bd80      	pop	{r7, pc}
   116c0:	00024e44 	.word	0x00024e44
   116c4:	00024ca4 	.word	0x00024ca4
   116c8:	00024ea0 	.word	0x00024ea0
   116cc:	00024c90 	.word	0x00024c90
   116d0:	00024d00 	.word	0x00024d00
   116d4:	00024158 	.word	0x00024158

000116d8 <mp_quicksort>:

STATIC void mp_quicksort(mp_obj_t *head, mp_obj_t *tail, mp_obj_t key_fn, mp_obj_t binop_less_result) {
   116d8:	b580      	push	{r7, lr}
   116da:	b08a      	sub	sp, #40	; 0x28
   116dc:	af00      	add	r7, sp, #0
   116de:	60f8      	str	r0, [r7, #12]
   116e0:	60b9      	str	r1, [r7, #8]
   116e2:	607a      	str	r2, [r7, #4]
   116e4:	603b      	str	r3, [r7, #0]
    MP_STACK_CHECK();
    while (head < tail) {
   116e6:	e085      	b.n	117f4 <mp_quicksort+0x11c>
        mp_obj_t *h = head - 1;
   116e8:	68fb      	ldr	r3, [r7, #12]
   116ea:	3b04      	subs	r3, #4
   116ec:	627b      	str	r3, [r7, #36]	; 0x24
        mp_obj_t *t = tail;
   116ee:	68bb      	ldr	r3, [r7, #8]
   116f0:	623b      	str	r3, [r7, #32]
        mp_obj_t v = key_fn == MP_OBJ_NULL ? tail[0] : mp_call_function_1(key_fn, tail[0]); // get pivot using key_fn
   116f2:	687b      	ldr	r3, [r7, #4]
   116f4:	2b00      	cmp	r3, #0
   116f6:	d102      	bne.n	116fe <mp_quicksort+0x26>
   116f8:	68bb      	ldr	r3, [r7, #8]
   116fa:	681b      	ldr	r3, [r3, #0]
   116fc:	e006      	b.n	1170c <mp_quicksort+0x34>
   116fe:	68bb      	ldr	r3, [r7, #8]
   11700:	681b      	ldr	r3, [r3, #0]
   11702:	4619      	mov	r1, r3
   11704:	6878      	ldr	r0, [r7, #4]
   11706:	f7fa fcf0 	bl	c0ea <mp_call_function_1>
   1170a:	4603      	mov	r3, r0
   1170c:	61fb      	str	r3, [r7, #28]
        for (;;) {
            do ++h; while (h < t && mp_binary_op(MP_BINARY_OP_LESS, key_fn == MP_OBJ_NULL ? h[0] : mp_call_function_1(key_fn, h[0]), v) == binop_less_result);
   1170e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   11710:	3304      	adds	r3, #4
   11712:	627b      	str	r3, [r7, #36]	; 0x24
   11714:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   11716:	6a3b      	ldr	r3, [r7, #32]
   11718:	429a      	cmp	r2, r3
   1171a:	d215      	bcs.n	11748 <mp_quicksort+0x70>
   1171c:	687b      	ldr	r3, [r7, #4]
   1171e:	2b00      	cmp	r3, #0
   11720:	d102      	bne.n	11728 <mp_quicksort+0x50>
   11722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   11724:	681b      	ldr	r3, [r3, #0]
   11726:	e006      	b.n	11736 <mp_quicksort+0x5e>
   11728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1172a:	681b      	ldr	r3, [r3, #0]
   1172c:	4619      	mov	r1, r3
   1172e:	6878      	ldr	r0, [r7, #4]
   11730:	f7fa fcdb 	bl	c0ea <mp_call_function_1>
   11734:	4603      	mov	r3, r0
   11736:	69fa      	ldr	r2, [r7, #28]
   11738:	4619      	mov	r1, r3
   1173a:	2000      	movs	r0, #0
   1173c:	f7fa fa54 	bl	bbe8 <mp_binary_op>
   11740:	4602      	mov	r2, r0
   11742:	683b      	ldr	r3, [r7, #0]
   11744:	429a      	cmp	r2, r3
   11746:	d0e2      	beq.n	1170e <mp_quicksort+0x36>
            do --t; while (h < t && mp_binary_op(MP_BINARY_OP_LESS, v, key_fn == MP_OBJ_NULL ? t[0] : mp_call_function_1(key_fn, t[0])) == binop_less_result);
   11748:	6a3b      	ldr	r3, [r7, #32]
   1174a:	3b04      	subs	r3, #4
   1174c:	623b      	str	r3, [r7, #32]
   1174e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   11750:	6a3b      	ldr	r3, [r7, #32]
   11752:	429a      	cmp	r2, r3
   11754:	d215      	bcs.n	11782 <mp_quicksort+0xaa>
   11756:	687b      	ldr	r3, [r7, #4]
   11758:	2b00      	cmp	r3, #0
   1175a:	d102      	bne.n	11762 <mp_quicksort+0x8a>
   1175c:	6a3b      	ldr	r3, [r7, #32]
   1175e:	681b      	ldr	r3, [r3, #0]
   11760:	e006      	b.n	11770 <mp_quicksort+0x98>
   11762:	6a3b      	ldr	r3, [r7, #32]
   11764:	681b      	ldr	r3, [r3, #0]
   11766:	4619      	mov	r1, r3
   11768:	6878      	ldr	r0, [r7, #4]
   1176a:	f7fa fcbe 	bl	c0ea <mp_call_function_1>
   1176e:	4603      	mov	r3, r0
   11770:	461a      	mov	r2, r3
   11772:	69f9      	ldr	r1, [r7, #28]
   11774:	2000      	movs	r0, #0
   11776:	f7fa fa37 	bl	bbe8 <mp_binary_op>
   1177a:	4602      	mov	r2, r0
   1177c:	683b      	ldr	r3, [r7, #0]
   1177e:	429a      	cmp	r2, r3
   11780:	d0e2      	beq.n	11748 <mp_quicksort+0x70>
            if (h >= t) break;
   11782:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   11784:	6a3b      	ldr	r3, [r7, #32]
   11786:	429a      	cmp	r2, r3
   11788:	d20a      	bcs.n	117a0 <mp_quicksort+0xc8>
            mp_obj_t x = h[0];
   1178a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1178c:	681b      	ldr	r3, [r3, #0]
   1178e:	61bb      	str	r3, [r7, #24]
            h[0] = t[0];
   11790:	6a3b      	ldr	r3, [r7, #32]
   11792:	681a      	ldr	r2, [r3, #0]
   11794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   11796:	601a      	str	r2, [r3, #0]
            t[0] = x;
   11798:	6a3b      	ldr	r3, [r7, #32]
   1179a:	69ba      	ldr	r2, [r7, #24]
   1179c:	601a      	str	r2, [r3, #0]
        for (;;) {
   1179e:	e7b6      	b.n	1170e <mp_quicksort+0x36>
            if (h >= t) break;
   117a0:	bf00      	nop
        }
        mp_obj_t x = h[0];
   117a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   117a4:	681b      	ldr	r3, [r3, #0]
   117a6:	617b      	str	r3, [r7, #20]
        h[0] = tail[0];
   117a8:	68bb      	ldr	r3, [r7, #8]
   117aa:	681a      	ldr	r2, [r3, #0]
   117ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   117ae:	601a      	str	r2, [r3, #0]
        tail[0] = x;
   117b0:	68bb      	ldr	r3, [r7, #8]
   117b2:	697a      	ldr	r2, [r7, #20]
   117b4:	601a      	str	r2, [r3, #0]
        // do the smaller recursive call first, to keep stack within O(log(N))
        if (t - head < tail - h - 1) {
   117b6:	6a3a      	ldr	r2, [r7, #32]
   117b8:	68fb      	ldr	r3, [r7, #12]
   117ba:	1ad3      	subs	r3, r2, r3
   117bc:	109b      	asrs	r3, r3, #2
   117be:	4619      	mov	r1, r3
   117c0:	68ba      	ldr	r2, [r7, #8]
   117c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   117c4:	1ad3      	subs	r3, r2, r3
   117c6:	109b      	asrs	r3, r3, #2
   117c8:	3b01      	subs	r3, #1
   117ca:	4299      	cmp	r1, r3
   117cc:	da09      	bge.n	117e2 <mp_quicksort+0x10a>
            mp_quicksort(head, t, key_fn, binop_less_result);
   117ce:	683b      	ldr	r3, [r7, #0]
   117d0:	687a      	ldr	r2, [r7, #4]
   117d2:	6a39      	ldr	r1, [r7, #32]
   117d4:	68f8      	ldr	r0, [r7, #12]
   117d6:	f7ff ff7f 	bl	116d8 <mp_quicksort>
            head = h + 1;
   117da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   117dc:	3304      	adds	r3, #4
   117de:	60fb      	str	r3, [r7, #12]
   117e0:	e008      	b.n	117f4 <mp_quicksort+0x11c>
        } else {
            mp_quicksort(h + 1, tail, key_fn, binop_less_result);
   117e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   117e4:	1d18      	adds	r0, r3, #4
   117e6:	683b      	ldr	r3, [r7, #0]
   117e8:	687a      	ldr	r2, [r7, #4]
   117ea:	68b9      	ldr	r1, [r7, #8]
   117ec:	f7ff ff74 	bl	116d8 <mp_quicksort>
            tail = t;
   117f0:	6a3b      	ldr	r3, [r7, #32]
   117f2:	60bb      	str	r3, [r7, #8]
    while (head < tail) {
   117f4:	68fa      	ldr	r2, [r7, #12]
   117f6:	68bb      	ldr	r3, [r7, #8]
   117f8:	429a      	cmp	r2, r3
   117fa:	f4ff af75 	bcc.w	116e8 <mp_quicksort+0x10>
        }
    }
}
   117fe:	bf00      	nop
   11800:	3728      	adds	r7, #40	; 0x28
   11802:	46bd      	mov	sp, r7
   11804:	bd80      	pop	{r7, pc}

00011806 <mp_obj_list_sort>:

// TODO Python defines sort to be stable but ours is not
mp_obj_t mp_obj_list_sort(size_t n_args, const mp_obj_t *pos_args, mp_map_t *kw_args) {
   11806:	b580      	push	{r7, lr}
   11808:	b08a      	sub	sp, #40	; 0x28
   1180a:	af02      	add	r7, sp, #8
   1180c:	60f8      	str	r0, [r7, #12]
   1180e:	60b9      	str	r1, [r7, #8]
   11810:	607a      	str	r2, [r7, #4]

    // parse args
    struct {
        mp_arg_val_t key, reverse;
    } args;
    mp_arg_parse_all(n_args - 1, pos_args + 1, kw_args,
   11812:	68fb      	ldr	r3, [r7, #12]
   11814:	1e58      	subs	r0, r3, #1
   11816:	68bb      	ldr	r3, [r7, #8]
   11818:	1d19      	adds	r1, r3, #4
   1181a:	f107 0314 	add.w	r3, r7, #20
   1181e:	9301      	str	r3, [sp, #4]
   11820:	4b20      	ldr	r3, [pc, #128]	; (118a4 <mp_obj_list_sort+0x9e>)
   11822:	9300      	str	r3, [sp, #0]
   11824:	2302      	movs	r3, #2
   11826:	687a      	ldr	r2, [r7, #4]
   11828:	f7fb fe10 	bl	d44c <mp_arg_parse_all>
        MP_ARRAY_SIZE(allowed_args), allowed_args, (mp_arg_val_t*)&args);

    mp_check_self(MP_OBJ_IS_TYPE(pos_args[0], &mp_type_list));
   1182c:	68bb      	ldr	r3, [r7, #8]
   1182e:	681b      	ldr	r3, [r3, #0]
   11830:	4618      	mov	r0, r3
   11832:	f7ff fbd9 	bl	10fe8 <MP_OBJ_IS_OBJ>
   11836:	4603      	mov	r3, r0
   11838:	2b00      	cmp	r3, #0
   1183a:	d005      	beq.n	11848 <mp_obj_list_sort+0x42>
   1183c:	68bb      	ldr	r3, [r7, #8]
   1183e:	681b      	ldr	r3, [r3, #0]
   11840:	681b      	ldr	r3, [r3, #0]
   11842:	4a19      	ldr	r2, [pc, #100]	; (118a8 <mp_obj_list_sort+0xa2>)
   11844:	4293      	cmp	r3, r2
   11846:	d006      	beq.n	11856 <mp_obj_list_sort+0x50>
   11848:	4b18      	ldr	r3, [pc, #96]	; (118ac <mp_obj_list_sort+0xa6>)
   1184a:	4a19      	ldr	r2, [pc, #100]	; (118b0 <mp_obj_list_sort+0xaa>)
   1184c:	f44f 71a4 	mov.w	r1, #328	; 0x148
   11850:	4818      	ldr	r0, [pc, #96]	; (118b4 <mp_obj_list_sort+0xae>)
   11852:	f00b fb45 	bl	1cee0 <__assert_func>
    mp_obj_list_t *self = MP_OBJ_TO_PTR(pos_args[0]);
   11856:	68bb      	ldr	r3, [r7, #8]
   11858:	681b      	ldr	r3, [r3, #0]
   1185a:	61fb      	str	r3, [r7, #28]

    if (self->len > 1) {
   1185c:	69fb      	ldr	r3, [r7, #28]
   1185e:	689b      	ldr	r3, [r3, #8]
   11860:	2b01      	cmp	r3, #1
   11862:	d919      	bls.n	11898 <mp_obj_list_sort+0x92>
        mp_quicksort(self->items, self->items + self->len - 1,
   11864:	69fb      	ldr	r3, [r7, #28]
   11866:	68d8      	ldr	r0, [r3, #12]
   11868:	69fb      	ldr	r3, [r7, #28]
   1186a:	68da      	ldr	r2, [r3, #12]
   1186c:	69fb      	ldr	r3, [r7, #28]
   1186e:	689b      	ldr	r3, [r3, #8]
   11870:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   11874:	3b01      	subs	r3, #1
   11876:	009b      	lsls	r3, r3, #2
   11878:	18d1      	adds	r1, r2, r3
                     args.key.u_obj == mp_const_none ? MP_OBJ_NULL : args.key.u_obj,
   1187a:	697b      	ldr	r3, [r7, #20]
        mp_quicksort(self->items, self->items + self->len - 1,
   1187c:	4a0e      	ldr	r2, [pc, #56]	; (118b8 <mp_obj_list_sort+0xb2>)
   1187e:	4293      	cmp	r3, r2
   11880:	d001      	beq.n	11886 <mp_obj_list_sort+0x80>
   11882:	697a      	ldr	r2, [r7, #20]
   11884:	e000      	b.n	11888 <mp_obj_list_sort+0x82>
   11886:	2200      	movs	r2, #0
                     args.reverse.u_bool ? mp_const_false : mp_const_true);
   11888:	7e3b      	ldrb	r3, [r7, #24]
        mp_quicksort(self->items, self->items + self->len - 1,
   1188a:	2b00      	cmp	r3, #0
   1188c:	d001      	beq.n	11892 <mp_obj_list_sort+0x8c>
   1188e:	4b0b      	ldr	r3, [pc, #44]	; (118bc <mp_obj_list_sort+0xb6>)
   11890:	e000      	b.n	11894 <mp_obj_list_sort+0x8e>
   11892:	4b0b      	ldr	r3, [pc, #44]	; (118c0 <mp_obj_list_sort+0xba>)
   11894:	f7ff ff20 	bl	116d8 <mp_quicksort>
    }

    return mp_const_none;
   11898:	4b07      	ldr	r3, [pc, #28]	; (118b8 <mp_obj_list_sort+0xb2>)
}
   1189a:	4618      	mov	r0, r3
   1189c:	3720      	adds	r7, #32
   1189e:	46bd      	mov	sp, r7
   118a0:	bd80      	pop	{r7, pc}
   118a2:	bf00      	nop
   118a4:	00024eac 	.word	0x00024eac
   118a8:	00024e44 	.word	0x00024e44
   118ac:	00024d14 	.word	0x00024d14
   118b0:	00024ebc 	.word	0x00024ebc
   118b4:	00024c90 	.word	0x00024c90
   118b8:	0002511c 	.word	0x0002511c
   118bc:	00023860 	.word	0x00023860
   118c0:	00023868 	.word	0x00023868

000118c4 <list_clear>:

STATIC mp_obj_t list_clear(mp_obj_t self_in) {
   118c4:	b580      	push	{r7, lr}
   118c6:	b084      	sub	sp, #16
   118c8:	af00      	add	r7, sp, #0
   118ca:	6078      	str	r0, [r7, #4]
    mp_check_self(MP_OBJ_IS_TYPE(self_in, &mp_type_list));
   118cc:	6878      	ldr	r0, [r7, #4]
   118ce:	f7ff fb8b 	bl	10fe8 <MP_OBJ_IS_OBJ>
   118d2:	4603      	mov	r3, r0
   118d4:	2b00      	cmp	r3, #0
   118d6:	d004      	beq.n	118e2 <list_clear+0x1e>
   118d8:	687b      	ldr	r3, [r7, #4]
   118da:	681b      	ldr	r3, [r3, #0]
   118dc:	4a14      	ldr	r2, [pc, #80]	; (11930 <list_clear+0x6c>)
   118de:	4293      	cmp	r3, r2
   118e0:	d006      	beq.n	118f0 <list_clear+0x2c>
   118e2:	4b14      	ldr	r3, [pc, #80]	; (11934 <list_clear+0x70>)
   118e4:	4a14      	ldr	r2, [pc, #80]	; (11938 <list_clear+0x74>)
   118e6:	f240 1155 	movw	r1, #341	; 0x155
   118ea:	4814      	ldr	r0, [pc, #80]	; (1193c <list_clear+0x78>)
   118ec:	f00b faf8 	bl	1cee0 <__assert_func>
    mp_obj_list_t *self = MP_OBJ_TO_PTR(self_in);
   118f0:	687b      	ldr	r3, [r7, #4]
   118f2:	60fb      	str	r3, [r7, #12]
    self->len = 0;
   118f4:	68fb      	ldr	r3, [r7, #12]
   118f6:	2200      	movs	r2, #0
   118f8:	609a      	str	r2, [r3, #8]
    self->items = m_renew(mp_obj_t, self->items, self->alloc, LIST_MIN_ALLOC);
   118fa:	68fb      	ldr	r3, [r7, #12]
   118fc:	68db      	ldr	r3, [r3, #12]
   118fe:	2110      	movs	r1, #16
   11900:	4618      	mov	r0, r3
   11902:	f7ee fd4c 	bl	39e <m_realloc>
   11906:	4602      	mov	r2, r0
   11908:	68fb      	ldr	r3, [r7, #12]
   1190a:	60da      	str	r2, [r3, #12]
    self->alloc = LIST_MIN_ALLOC;
   1190c:	68fb      	ldr	r3, [r7, #12]
   1190e:	2204      	movs	r2, #4
   11910:	605a      	str	r2, [r3, #4]
    mp_seq_clear(self->items, 0, self->alloc, sizeof(*self->items));
   11912:	68fb      	ldr	r3, [r7, #12]
   11914:	68d8      	ldr	r0, [r3, #12]
   11916:	68fb      	ldr	r3, [r7, #12]
   11918:	685b      	ldr	r3, [r3, #4]
   1191a:	009b      	lsls	r3, r3, #2
   1191c:	461a      	mov	r2, r3
   1191e:	2100      	movs	r1, #0
   11920:	f00c fea0 	bl	1e664 <memset>
    return mp_const_none;
   11924:	4b06      	ldr	r3, [pc, #24]	; (11940 <list_clear+0x7c>)
}
   11926:	4618      	mov	r0, r3
   11928:	3710      	adds	r7, #16
   1192a:	46bd      	mov	sp, r7
   1192c:	bd80      	pop	{r7, pc}
   1192e:	bf00      	nop
   11930:	00024e44 	.word	0x00024e44
   11934:	00024c34 	.word	0x00024c34
   11938:	00024ed0 	.word	0x00024ed0
   1193c:	00024c90 	.word	0x00024c90
   11940:	0002511c 	.word	0x0002511c

00011944 <list_copy>:

STATIC mp_obj_t list_copy(mp_obj_t self_in) {
   11944:	b580      	push	{r7, lr}
   11946:	b084      	sub	sp, #16
   11948:	af00      	add	r7, sp, #0
   1194a:	6078      	str	r0, [r7, #4]
    mp_check_self(MP_OBJ_IS_TYPE(self_in, &mp_type_list));
   1194c:	6878      	ldr	r0, [r7, #4]
   1194e:	f7ff fb4b 	bl	10fe8 <MP_OBJ_IS_OBJ>
   11952:	4603      	mov	r3, r0
   11954:	2b00      	cmp	r3, #0
   11956:	d004      	beq.n	11962 <list_copy+0x1e>
   11958:	687b      	ldr	r3, [r7, #4]
   1195a:	681b      	ldr	r3, [r3, #0]
   1195c:	4a0c      	ldr	r2, [pc, #48]	; (11990 <list_copy+0x4c>)
   1195e:	4293      	cmp	r3, r2
   11960:	d006      	beq.n	11970 <list_copy+0x2c>
   11962:	4b0c      	ldr	r3, [pc, #48]	; (11994 <list_copy+0x50>)
   11964:	4a0c      	ldr	r2, [pc, #48]	; (11998 <list_copy+0x54>)
   11966:	f240 115f 	movw	r1, #351	; 0x15f
   1196a:	480c      	ldr	r0, [pc, #48]	; (1199c <list_copy+0x58>)
   1196c:	f00b fab8 	bl	1cee0 <__assert_func>
    mp_obj_list_t *self = MP_OBJ_TO_PTR(self_in);
   11970:	687b      	ldr	r3, [r7, #4]
   11972:	60fb      	str	r3, [r7, #12]
    return mp_obj_new_list(self->len, self->items);
   11974:	68fb      	ldr	r3, [r7, #12]
   11976:	689a      	ldr	r2, [r3, #8]
   11978:	68fb      	ldr	r3, [r7, #12]
   1197a:	68db      	ldr	r3, [r3, #12]
   1197c:	4619      	mov	r1, r3
   1197e:	4610      	mov	r0, r2
   11980:	f000 f9ab 	bl	11cda <mp_obj_new_list>
   11984:	4603      	mov	r3, r0
}
   11986:	4618      	mov	r0, r3
   11988:	3710      	adds	r7, #16
   1198a:	46bd      	mov	sp, r7
   1198c:	bd80      	pop	{r7, pc}
   1198e:	bf00      	nop
   11990:	00024e44 	.word	0x00024e44
   11994:	00024c34 	.word	0x00024c34
   11998:	00024edc 	.word	0x00024edc
   1199c:	00024c90 	.word	0x00024c90

000119a0 <list_count>:

STATIC mp_obj_t list_count(mp_obj_t self_in, mp_obj_t value) {
   119a0:	b580      	push	{r7, lr}
   119a2:	b084      	sub	sp, #16
   119a4:	af00      	add	r7, sp, #0
   119a6:	6078      	str	r0, [r7, #4]
   119a8:	6039      	str	r1, [r7, #0]
    mp_check_self(MP_OBJ_IS_TYPE(self_in, &mp_type_list));
   119aa:	6878      	ldr	r0, [r7, #4]
   119ac:	f7ff fb1c 	bl	10fe8 <MP_OBJ_IS_OBJ>
   119b0:	4603      	mov	r3, r0
   119b2:	2b00      	cmp	r3, #0
   119b4:	d004      	beq.n	119c0 <list_count+0x20>
   119b6:	687b      	ldr	r3, [r7, #4]
   119b8:	681b      	ldr	r3, [r3, #0]
   119ba:	4a0c      	ldr	r2, [pc, #48]	; (119ec <list_count+0x4c>)
   119bc:	4293      	cmp	r3, r2
   119be:	d006      	beq.n	119ce <list_count+0x2e>
   119c0:	4b0b      	ldr	r3, [pc, #44]	; (119f0 <list_count+0x50>)
   119c2:	4a0c      	ldr	r2, [pc, #48]	; (119f4 <list_count+0x54>)
   119c4:	f240 1165 	movw	r1, #357	; 0x165
   119c8:	480b      	ldr	r0, [pc, #44]	; (119f8 <list_count+0x58>)
   119ca:	f00b fa89 	bl	1cee0 <__assert_func>
    mp_obj_list_t *self = MP_OBJ_TO_PTR(self_in);
   119ce:	687b      	ldr	r3, [r7, #4]
   119d0:	60fb      	str	r3, [r7, #12]
    return mp_seq_count_obj(self->items, self->len, value);
   119d2:	68fb      	ldr	r3, [r7, #12]
   119d4:	68d8      	ldr	r0, [r3, #12]
   119d6:	68fb      	ldr	r3, [r7, #12]
   119d8:	689b      	ldr	r3, [r3, #8]
   119da:	683a      	ldr	r2, [r7, #0]
   119dc:	4619      	mov	r1, r3
   119de:	f006 fb25 	bl	1802c <mp_seq_count_obj>
   119e2:	4603      	mov	r3, r0
}
   119e4:	4618      	mov	r0, r3
   119e6:	3710      	adds	r7, #16
   119e8:	46bd      	mov	sp, r7
   119ea:	bd80      	pop	{r7, pc}
   119ec:	00024e44 	.word	0x00024e44
   119f0:	00024c34 	.word	0x00024c34
   119f4:	00024ee8 	.word	0x00024ee8
   119f8:	00024c90 	.word	0x00024c90

000119fc <list_index>:

STATIC mp_obj_t list_index(size_t n_args, const mp_obj_t *args) {
   119fc:	b580      	push	{r7, lr}
   119fe:	b084      	sub	sp, #16
   11a00:	af00      	add	r7, sp, #0
   11a02:	6078      	str	r0, [r7, #4]
   11a04:	6039      	str	r1, [r7, #0]
    mp_check_self(MP_OBJ_IS_TYPE(args[0], &mp_type_list));
   11a06:	683b      	ldr	r3, [r7, #0]
   11a08:	681b      	ldr	r3, [r3, #0]
   11a0a:	4618      	mov	r0, r3
   11a0c:	f7ff faec 	bl	10fe8 <MP_OBJ_IS_OBJ>
   11a10:	4603      	mov	r3, r0
   11a12:	2b00      	cmp	r3, #0
   11a14:	d005      	beq.n	11a22 <list_index+0x26>
   11a16:	683b      	ldr	r3, [r7, #0]
   11a18:	681b      	ldr	r3, [r3, #0]
   11a1a:	681b      	ldr	r3, [r3, #0]
   11a1c:	4a0c      	ldr	r2, [pc, #48]	; (11a50 <list_index+0x54>)
   11a1e:	4293      	cmp	r3, r2
   11a20:	d006      	beq.n	11a30 <list_index+0x34>
   11a22:	4b0c      	ldr	r3, [pc, #48]	; (11a54 <list_index+0x58>)
   11a24:	4a0c      	ldr	r2, [pc, #48]	; (11a58 <list_index+0x5c>)
   11a26:	f240 116b 	movw	r1, #363	; 0x16b
   11a2a:	480c      	ldr	r0, [pc, #48]	; (11a5c <list_index+0x60>)
   11a2c:	f00b fa58 	bl	1cee0 <__assert_func>
    mp_obj_list_t *self = MP_OBJ_TO_PTR(args[0]);
   11a30:	683b      	ldr	r3, [r7, #0]
   11a32:	681b      	ldr	r3, [r3, #0]
   11a34:	60fb      	str	r3, [r7, #12]
    return mp_seq_index_obj(self->items, self->len, n_args, args);
   11a36:	68fb      	ldr	r3, [r7, #12]
   11a38:	68d8      	ldr	r0, [r3, #12]
   11a3a:	68fb      	ldr	r3, [r7, #12]
   11a3c:	6899      	ldr	r1, [r3, #8]
   11a3e:	683b      	ldr	r3, [r7, #0]
   11a40:	687a      	ldr	r2, [r7, #4]
   11a42:	f006 faa3 	bl	17f8c <mp_seq_index_obj>
   11a46:	4603      	mov	r3, r0
}
   11a48:	4618      	mov	r0, r3
   11a4a:	3710      	adds	r7, #16
   11a4c:	46bd      	mov	sp, r7
   11a4e:	bd80      	pop	{r7, pc}
   11a50:	00024e44 	.word	0x00024e44
   11a54:	00024ca4 	.word	0x00024ca4
   11a58:	00024ef4 	.word	0x00024ef4
   11a5c:	00024c90 	.word	0x00024c90

00011a60 <list_insert>:

STATIC mp_obj_t list_insert(mp_obj_t self_in, mp_obj_t idx, mp_obj_t obj) {
   11a60:	b580      	push	{r7, lr}
   11a62:	b088      	sub	sp, #32
   11a64:	af00      	add	r7, sp, #0
   11a66:	60f8      	str	r0, [r7, #12]
   11a68:	60b9      	str	r1, [r7, #8]
   11a6a:	607a      	str	r2, [r7, #4]
    mp_check_self(MP_OBJ_IS_TYPE(self_in, &mp_type_list));
   11a6c:	68f8      	ldr	r0, [r7, #12]
   11a6e:	f7ff fabb 	bl	10fe8 <MP_OBJ_IS_OBJ>
   11a72:	4603      	mov	r3, r0
   11a74:	2b00      	cmp	r3, #0
   11a76:	d004      	beq.n	11a82 <list_insert+0x22>
   11a78:	68fb      	ldr	r3, [r7, #12]
   11a7a:	681b      	ldr	r3, [r3, #0]
   11a7c:	4a27      	ldr	r2, [pc, #156]	; (11b1c <list_insert+0xbc>)
   11a7e:	4293      	cmp	r3, r2
   11a80:	d006      	beq.n	11a90 <list_insert+0x30>
   11a82:	4b27      	ldr	r3, [pc, #156]	; (11b20 <list_insert+0xc0>)
   11a84:	4a27      	ldr	r2, [pc, #156]	; (11b24 <list_insert+0xc4>)
   11a86:	f240 1171 	movw	r1, #369	; 0x171
   11a8a:	4827      	ldr	r0, [pc, #156]	; (11b28 <list_insert+0xc8>)
   11a8c:	f00b fa28 	bl	1cee0 <__assert_func>
    mp_obj_list_t *self = MP_OBJ_TO_PTR(self_in);
   11a90:	68fb      	ldr	r3, [r7, #12]
   11a92:	617b      	str	r3, [r7, #20]
    // insert has its own strange index logic
    mp_int_t index = MP_OBJ_SMALL_INT_VALUE(idx);
   11a94:	68bb      	ldr	r3, [r7, #8]
   11a96:	105b      	asrs	r3, r3, #1
   11a98:	61fb      	str	r3, [r7, #28]
    if (index < 0) {
   11a9a:	69fb      	ldr	r3, [r7, #28]
   11a9c:	2b00      	cmp	r3, #0
   11a9e:	da04      	bge.n	11aaa <list_insert+0x4a>
         index += self->len;
   11aa0:	697b      	ldr	r3, [r7, #20]
   11aa2:	689a      	ldr	r2, [r3, #8]
   11aa4:	69fb      	ldr	r3, [r7, #28]
   11aa6:	4413      	add	r3, r2
   11aa8:	61fb      	str	r3, [r7, #28]
    }
    if (index < 0) {
   11aaa:	69fb      	ldr	r3, [r7, #28]
   11aac:	2b00      	cmp	r3, #0
   11aae:	da01      	bge.n	11ab4 <list_insert+0x54>
         index = 0;
   11ab0:	2300      	movs	r3, #0
   11ab2:	61fb      	str	r3, [r7, #28]
    }
    if ((size_t)index > self->len) {
   11ab4:	697b      	ldr	r3, [r7, #20]
   11ab6:	689a      	ldr	r2, [r3, #8]
   11ab8:	69fb      	ldr	r3, [r7, #28]
   11aba:	429a      	cmp	r2, r3
   11abc:	d202      	bcs.n	11ac4 <list_insert+0x64>
         index = self->len;
   11abe:	697b      	ldr	r3, [r7, #20]
   11ac0:	689b      	ldr	r3, [r3, #8]
   11ac2:	61fb      	str	r3, [r7, #28]
    }

    mp_obj_list_append(self_in, mp_const_none);
   11ac4:	4919      	ldr	r1, [pc, #100]	; (11b2c <list_insert+0xcc>)
   11ac6:	68f8      	ldr	r0, [r7, #12]
   11ac8:	f7ff fc9b 	bl	11402 <mp_obj_list_append>

    for (mp_int_t i = self->len-1; i > index; i--) {
   11acc:	697b      	ldr	r3, [r7, #20]
   11ace:	689b      	ldr	r3, [r3, #8]
   11ad0:	3b01      	subs	r3, #1
   11ad2:	61bb      	str	r3, [r7, #24]
   11ad4:	e011      	b.n	11afa <list_insert+0x9a>
         self->items[i] = self->items[i-1];
   11ad6:	697b      	ldr	r3, [r7, #20]
   11ad8:	68da      	ldr	r2, [r3, #12]
   11ada:	69bb      	ldr	r3, [r7, #24]
   11adc:	009b      	lsls	r3, r3, #2
   11ade:	441a      	add	r2, r3
   11ae0:	697b      	ldr	r3, [r7, #20]
   11ae2:	68d9      	ldr	r1, [r3, #12]
   11ae4:	69bb      	ldr	r3, [r7, #24]
   11ae6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   11aea:	3b01      	subs	r3, #1
   11aec:	009b      	lsls	r3, r3, #2
   11aee:	440b      	add	r3, r1
   11af0:	681b      	ldr	r3, [r3, #0]
   11af2:	6013      	str	r3, [r2, #0]
    for (mp_int_t i = self->len-1; i > index; i--) {
   11af4:	69bb      	ldr	r3, [r7, #24]
   11af6:	3b01      	subs	r3, #1
   11af8:	61bb      	str	r3, [r7, #24]
   11afa:	69ba      	ldr	r2, [r7, #24]
   11afc:	69fb      	ldr	r3, [r7, #28]
   11afe:	429a      	cmp	r2, r3
   11b00:	dce9      	bgt.n	11ad6 <list_insert+0x76>
    }
    self->items[index] = obj;
   11b02:	697b      	ldr	r3, [r7, #20]
   11b04:	68da      	ldr	r2, [r3, #12]
   11b06:	69fb      	ldr	r3, [r7, #28]
   11b08:	009b      	lsls	r3, r3, #2
   11b0a:	4413      	add	r3, r2
   11b0c:	687a      	ldr	r2, [r7, #4]
   11b0e:	601a      	str	r2, [r3, #0]

    return mp_const_none;
   11b10:	4b06      	ldr	r3, [pc, #24]	; (11b2c <list_insert+0xcc>)
}
   11b12:	4618      	mov	r0, r3
   11b14:	3720      	adds	r7, #32
   11b16:	46bd      	mov	sp, r7
   11b18:	bd80      	pop	{r7, pc}
   11b1a:	bf00      	nop
   11b1c:	00024e44 	.word	0x00024e44
   11b20:	00024c34 	.word	0x00024c34
   11b24:	00024f00 	.word	0x00024f00
   11b28:	00024c90 	.word	0x00024c90
   11b2c:	0002511c 	.word	0x0002511c

00011b30 <mp_obj_list_remove>:

mp_obj_t mp_obj_list_remove(mp_obj_t self_in, mp_obj_t value) {
   11b30:	b580      	push	{r7, lr}
   11b32:	b084      	sub	sp, #16
   11b34:	af00      	add	r7, sp, #0
   11b36:	6078      	str	r0, [r7, #4]
   11b38:	6039      	str	r1, [r7, #0]
    mp_check_self(MP_OBJ_IS_TYPE(self_in, &mp_type_list));
   11b3a:	6878      	ldr	r0, [r7, #4]
   11b3c:	f7ff fa54 	bl	10fe8 <MP_OBJ_IS_OBJ>
   11b40:	4603      	mov	r3, r0
   11b42:	2b00      	cmp	r3, #0
   11b44:	d004      	beq.n	11b50 <mp_obj_list_remove+0x20>
   11b46:	687b      	ldr	r3, [r7, #4]
   11b48:	681b      	ldr	r3, [r3, #0]
   11b4a:	4a10      	ldr	r2, [pc, #64]	; (11b8c <mp_obj_list_remove+0x5c>)
   11b4c:	4293      	cmp	r3, r2
   11b4e:	d006      	beq.n	11b5e <mp_obj_list_remove+0x2e>
   11b50:	4b0f      	ldr	r3, [pc, #60]	; (11b90 <mp_obj_list_remove+0x60>)
   11b52:	4a10      	ldr	r2, [pc, #64]	; (11b94 <mp_obj_list_remove+0x64>)
   11b54:	f44f 71c5 	mov.w	r1, #394	; 0x18a
   11b58:	480f      	ldr	r0, [pc, #60]	; (11b98 <mp_obj_list_remove+0x68>)
   11b5a:	f00b f9c1 	bl	1cee0 <__assert_func>
    mp_obj_t args[] = {self_in, value};
   11b5e:	687b      	ldr	r3, [r7, #4]
   11b60:	60bb      	str	r3, [r7, #8]
   11b62:	683b      	ldr	r3, [r7, #0]
   11b64:	60fb      	str	r3, [r7, #12]
    args[1] = list_index(2, args);
   11b66:	f107 0308 	add.w	r3, r7, #8
   11b6a:	4619      	mov	r1, r3
   11b6c:	2002      	movs	r0, #2
   11b6e:	f7ff ff45 	bl	119fc <list_index>
   11b72:	4603      	mov	r3, r0
   11b74:	60fb      	str	r3, [r7, #12]
    list_pop(2, args);
   11b76:	f107 0308 	add.w	r3, r7, #8
   11b7a:	4619      	mov	r1, r3
   11b7c:	2002      	movs	r0, #2
   11b7e:	f7ff fd21 	bl	115c4 <list_pop>

    return mp_const_none;
   11b82:	4b06      	ldr	r3, [pc, #24]	; (11b9c <mp_obj_list_remove+0x6c>)
}
   11b84:	4618      	mov	r0, r3
   11b86:	3710      	adds	r7, #16
   11b88:	46bd      	mov	sp, r7
   11b8a:	bd80      	pop	{r7, pc}
   11b8c:	00024e44 	.word	0x00024e44
   11b90:	00024c34 	.word	0x00024c34
   11b94:	00024f0c 	.word	0x00024f0c
   11b98:	00024c90 	.word	0x00024c90
   11b9c:	0002511c 	.word	0x0002511c

00011ba0 <list_reverse>:

STATIC mp_obj_t list_reverse(mp_obj_t self_in) {
   11ba0:	b580      	push	{r7, lr}
   11ba2:	b086      	sub	sp, #24
   11ba4:	af00      	add	r7, sp, #0
   11ba6:	6078      	str	r0, [r7, #4]
    mp_check_self(MP_OBJ_IS_TYPE(self_in, &mp_type_list));
   11ba8:	6878      	ldr	r0, [r7, #4]
   11baa:	f7ff fa1d 	bl	10fe8 <MP_OBJ_IS_OBJ>
   11bae:	4603      	mov	r3, r0
   11bb0:	2b00      	cmp	r3, #0
   11bb2:	d004      	beq.n	11bbe <list_reverse+0x1e>
   11bb4:	687b      	ldr	r3, [r7, #4]
   11bb6:	681b      	ldr	r3, [r3, #0]
   11bb8:	4a22      	ldr	r2, [pc, #136]	; (11c44 <list_reverse+0xa4>)
   11bba:	4293      	cmp	r3, r2
   11bbc:	d006      	beq.n	11bcc <list_reverse+0x2c>
   11bbe:	4b22      	ldr	r3, [pc, #136]	; (11c48 <list_reverse+0xa8>)
   11bc0:	4a22      	ldr	r2, [pc, #136]	; (11c4c <list_reverse+0xac>)
   11bc2:	f240 1193 	movw	r1, #403	; 0x193
   11bc6:	4822      	ldr	r0, [pc, #136]	; (11c50 <list_reverse+0xb0>)
   11bc8:	f00b f98a 	bl	1cee0 <__assert_func>
    mp_obj_list_t *self = MP_OBJ_TO_PTR(self_in);
   11bcc:	687b      	ldr	r3, [r7, #4]
   11bce:	613b      	str	r3, [r7, #16]

    mp_int_t len = self->len;
   11bd0:	693b      	ldr	r3, [r7, #16]
   11bd2:	689b      	ldr	r3, [r3, #8]
   11bd4:	60fb      	str	r3, [r7, #12]
    for (mp_int_t i = 0; i < len/2; i++) {
   11bd6:	2300      	movs	r3, #0
   11bd8:	617b      	str	r3, [r7, #20]
   11bda:	e026      	b.n	11c2a <list_reverse+0x8a>
         mp_obj_t a = self->items[i];
   11bdc:	693b      	ldr	r3, [r7, #16]
   11bde:	68da      	ldr	r2, [r3, #12]
   11be0:	697b      	ldr	r3, [r7, #20]
   11be2:	009b      	lsls	r3, r3, #2
   11be4:	4413      	add	r3, r2
   11be6:	681b      	ldr	r3, [r3, #0]
   11be8:	60bb      	str	r3, [r7, #8]
         self->items[i] = self->items[len-i-1];
   11bea:	693b      	ldr	r3, [r7, #16]
   11bec:	68da      	ldr	r2, [r3, #12]
   11bee:	697b      	ldr	r3, [r7, #20]
   11bf0:	009b      	lsls	r3, r3, #2
   11bf2:	441a      	add	r2, r3
   11bf4:	693b      	ldr	r3, [r7, #16]
   11bf6:	68d9      	ldr	r1, [r3, #12]
   11bf8:	68f8      	ldr	r0, [r7, #12]
   11bfa:	697b      	ldr	r3, [r7, #20]
   11bfc:	1ac3      	subs	r3, r0, r3
   11bfe:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   11c02:	3b01      	subs	r3, #1
   11c04:	009b      	lsls	r3, r3, #2
   11c06:	440b      	add	r3, r1
   11c08:	681b      	ldr	r3, [r3, #0]
   11c0a:	6013      	str	r3, [r2, #0]
         self->items[len-i-1] = a;
   11c0c:	693b      	ldr	r3, [r7, #16]
   11c0e:	68da      	ldr	r2, [r3, #12]
   11c10:	68f9      	ldr	r1, [r7, #12]
   11c12:	697b      	ldr	r3, [r7, #20]
   11c14:	1acb      	subs	r3, r1, r3
   11c16:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   11c1a:	3b01      	subs	r3, #1
   11c1c:	009b      	lsls	r3, r3, #2
   11c1e:	4413      	add	r3, r2
   11c20:	68ba      	ldr	r2, [r7, #8]
   11c22:	601a      	str	r2, [r3, #0]
    for (mp_int_t i = 0; i < len/2; i++) {
   11c24:	697b      	ldr	r3, [r7, #20]
   11c26:	3301      	adds	r3, #1
   11c28:	617b      	str	r3, [r7, #20]
   11c2a:	68fb      	ldr	r3, [r7, #12]
   11c2c:	0fda      	lsrs	r2, r3, #31
   11c2e:	4413      	add	r3, r2
   11c30:	105b      	asrs	r3, r3, #1
   11c32:	461a      	mov	r2, r3
   11c34:	697b      	ldr	r3, [r7, #20]
   11c36:	429a      	cmp	r2, r3
   11c38:	dcd0      	bgt.n	11bdc <list_reverse+0x3c>
    }

    return mp_const_none;
   11c3a:	4b06      	ldr	r3, [pc, #24]	; (11c54 <list_reverse+0xb4>)
}
   11c3c:	4618      	mov	r0, r3
   11c3e:	3718      	adds	r7, #24
   11c40:	46bd      	mov	sp, r7
   11c42:	bd80      	pop	{r7, pc}
   11c44:	00024e44 	.word	0x00024e44
   11c48:	00024c34 	.word	0x00024c34
   11c4c:	00024f20 	.word	0x00024f20
   11c50:	00024c90 	.word	0x00024c90
   11c54:	0002511c 	.word	0x0002511c

00011c58 <mp_obj_list_init>:
    .subscr = list_subscr,
    .getiter = list_getiter,
    .locals_dict = (mp_obj_dict_t*)&list_locals_dict,
};

void mp_obj_list_init(mp_obj_list_t *o, size_t n) {
   11c58:	b580      	push	{r7, lr}
   11c5a:	b082      	sub	sp, #8
   11c5c:	af00      	add	r7, sp, #0
   11c5e:	6078      	str	r0, [r7, #4]
   11c60:	6039      	str	r1, [r7, #0]
    o->base.type = &mp_type_list;
   11c62:	687b      	ldr	r3, [r7, #4]
   11c64:	4a13      	ldr	r2, [pc, #76]	; (11cb4 <mp_obj_list_init+0x5c>)
   11c66:	601a      	str	r2, [r3, #0]
    o->alloc = n < LIST_MIN_ALLOC ? LIST_MIN_ALLOC : n;
   11c68:	683b      	ldr	r3, [r7, #0]
   11c6a:	2b04      	cmp	r3, #4
   11c6c:	bf38      	it	cc
   11c6e:	2304      	movcc	r3, #4
   11c70:	461a      	mov	r2, r3
   11c72:	687b      	ldr	r3, [r7, #4]
   11c74:	605a      	str	r2, [r3, #4]
    o->len = n;
   11c76:	687b      	ldr	r3, [r7, #4]
   11c78:	683a      	ldr	r2, [r7, #0]
   11c7a:	609a      	str	r2, [r3, #8]
    o->items = m_new(mp_obj_t, o->alloc);
   11c7c:	687b      	ldr	r3, [r7, #4]
   11c7e:	685b      	ldr	r3, [r3, #4]
   11c80:	009b      	lsls	r3, r3, #2
   11c82:	4618      	mov	r0, r3
   11c84:	f7ee fb4a 	bl	31c <m_malloc>
   11c88:	4602      	mov	r2, r0
   11c8a:	687b      	ldr	r3, [r7, #4]
   11c8c:	60da      	str	r2, [r3, #12]
    mp_seq_clear(o->items, n, o->alloc, sizeof(*o->items));
   11c8e:	687b      	ldr	r3, [r7, #4]
   11c90:	68da      	ldr	r2, [r3, #12]
   11c92:	683b      	ldr	r3, [r7, #0]
   11c94:	009b      	lsls	r3, r3, #2
   11c96:	18d0      	adds	r0, r2, r3
   11c98:	687b      	ldr	r3, [r7, #4]
   11c9a:	685a      	ldr	r2, [r3, #4]
   11c9c:	683b      	ldr	r3, [r7, #0]
   11c9e:	1ad3      	subs	r3, r2, r3
   11ca0:	009b      	lsls	r3, r3, #2
   11ca2:	461a      	mov	r2, r3
   11ca4:	2100      	movs	r1, #0
   11ca6:	f00c fcdd 	bl	1e664 <memset>
}
   11caa:	bf00      	nop
   11cac:	3708      	adds	r7, #8
   11cae:	46bd      	mov	sp, r7
   11cb0:	bd80      	pop	{r7, pc}
   11cb2:	bf00      	nop
   11cb4:	00024e44 	.word	0x00024e44

00011cb8 <list_new>:

STATIC mp_obj_list_t *list_new(size_t n) {
   11cb8:	b580      	push	{r7, lr}
   11cba:	b084      	sub	sp, #16
   11cbc:	af00      	add	r7, sp, #0
   11cbe:	6078      	str	r0, [r7, #4]
    mp_obj_list_t *o = m_new_obj(mp_obj_list_t);
   11cc0:	2010      	movs	r0, #16
   11cc2:	f7ee fb2b 	bl	31c <m_malloc>
   11cc6:	60f8      	str	r0, [r7, #12]
    mp_obj_list_init(o, n);
   11cc8:	6879      	ldr	r1, [r7, #4]
   11cca:	68f8      	ldr	r0, [r7, #12]
   11ccc:	f7ff ffc4 	bl	11c58 <mp_obj_list_init>
    return o;
   11cd0:	68fb      	ldr	r3, [r7, #12]
}
   11cd2:	4618      	mov	r0, r3
   11cd4:	3710      	adds	r7, #16
   11cd6:	46bd      	mov	sp, r7
   11cd8:	bd80      	pop	{r7, pc}

00011cda <mp_obj_new_list>:

mp_obj_t mp_obj_new_list(size_t n, mp_obj_t *items) {
   11cda:	b580      	push	{r7, lr}
   11cdc:	b084      	sub	sp, #16
   11cde:	af00      	add	r7, sp, #0
   11ce0:	6078      	str	r0, [r7, #4]
   11ce2:	6039      	str	r1, [r7, #0]
    mp_obj_list_t *o = list_new(n);
   11ce4:	6878      	ldr	r0, [r7, #4]
   11ce6:	f7ff ffe7 	bl	11cb8 <list_new>
   11cea:	60b8      	str	r0, [r7, #8]
    if (items != NULL) {
   11cec:	683b      	ldr	r3, [r7, #0]
   11cee:	2b00      	cmp	r3, #0
   11cf0:	d014      	beq.n	11d1c <mp_obj_new_list+0x42>
        for (size_t i = 0; i < n; i++) {
   11cf2:	2300      	movs	r3, #0
   11cf4:	60fb      	str	r3, [r7, #12]
   11cf6:	e00d      	b.n	11d14 <mp_obj_new_list+0x3a>
            o->items[i] = items[i];
   11cf8:	68bb      	ldr	r3, [r7, #8]
   11cfa:	68da      	ldr	r2, [r3, #12]
   11cfc:	68fb      	ldr	r3, [r7, #12]
   11cfe:	009b      	lsls	r3, r3, #2
   11d00:	4413      	add	r3, r2
   11d02:	68fa      	ldr	r2, [r7, #12]
   11d04:	0092      	lsls	r2, r2, #2
   11d06:	6839      	ldr	r1, [r7, #0]
   11d08:	440a      	add	r2, r1
   11d0a:	6812      	ldr	r2, [r2, #0]
   11d0c:	601a      	str	r2, [r3, #0]
        for (size_t i = 0; i < n; i++) {
   11d0e:	68fb      	ldr	r3, [r7, #12]
   11d10:	3301      	adds	r3, #1
   11d12:	60fb      	str	r3, [r7, #12]
   11d14:	68fa      	ldr	r2, [r7, #12]
   11d16:	687b      	ldr	r3, [r7, #4]
   11d18:	429a      	cmp	r2, r3
   11d1a:	d3ed      	bcc.n	11cf8 <mp_obj_new_list+0x1e>
        }
    }
    return MP_OBJ_FROM_PTR(o);
   11d1c:	68bb      	ldr	r3, [r7, #8]
}
   11d1e:	4618      	mov	r0, r3
   11d20:	3710      	adds	r7, #16
   11d22:	46bd      	mov	sp, r7
   11d24:	bd80      	pop	{r7, pc}

00011d26 <mp_obj_list_get>:

void mp_obj_list_get(mp_obj_t self_in, size_t *len, mp_obj_t **items) {
   11d26:	b480      	push	{r7}
   11d28:	b087      	sub	sp, #28
   11d2a:	af00      	add	r7, sp, #0
   11d2c:	60f8      	str	r0, [r7, #12]
   11d2e:	60b9      	str	r1, [r7, #8]
   11d30:	607a      	str	r2, [r7, #4]
    mp_obj_list_t *self = MP_OBJ_TO_PTR(self_in);
   11d32:	68fb      	ldr	r3, [r7, #12]
   11d34:	617b      	str	r3, [r7, #20]
    *len = self->len;
   11d36:	697b      	ldr	r3, [r7, #20]
   11d38:	689a      	ldr	r2, [r3, #8]
   11d3a:	68bb      	ldr	r3, [r7, #8]
   11d3c:	601a      	str	r2, [r3, #0]
    *items = self->items;
   11d3e:	697b      	ldr	r3, [r7, #20]
   11d40:	68da      	ldr	r2, [r3, #12]
   11d42:	687b      	ldr	r3, [r7, #4]
   11d44:	601a      	str	r2, [r3, #0]
}
   11d46:	bf00      	nop
   11d48:	371c      	adds	r7, #28
   11d4a:	46bd      	mov	sp, r7
   11d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
   11d50:	4770      	bx	lr

00011d52 <mp_obj_list_set_len>:

void mp_obj_list_set_len(mp_obj_t self_in, size_t len) {
   11d52:	b480      	push	{r7}
   11d54:	b085      	sub	sp, #20
   11d56:	af00      	add	r7, sp, #0
   11d58:	6078      	str	r0, [r7, #4]
   11d5a:	6039      	str	r1, [r7, #0]
    // trust that the caller knows what it's doing
    // TODO realloc if len got much smaller than alloc
    mp_obj_list_t *self = MP_OBJ_TO_PTR(self_in);
   11d5c:	687b      	ldr	r3, [r7, #4]
   11d5e:	60fb      	str	r3, [r7, #12]
    self->len = len;
   11d60:	68fb      	ldr	r3, [r7, #12]
   11d62:	683a      	ldr	r2, [r7, #0]
   11d64:	609a      	str	r2, [r3, #8]
}
   11d66:	bf00      	nop
   11d68:	3714      	adds	r7, #20
   11d6a:	46bd      	mov	sp, r7
   11d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
   11d70:	4770      	bx	lr

00011d72 <mp_obj_list_store>:

void mp_obj_list_store(mp_obj_t self_in, mp_obj_t index, mp_obj_t value) {
   11d72:	b580      	push	{r7, lr}
   11d74:	b086      	sub	sp, #24
   11d76:	af00      	add	r7, sp, #0
   11d78:	60f8      	str	r0, [r7, #12]
   11d7a:	60b9      	str	r1, [r7, #8]
   11d7c:	607a      	str	r2, [r7, #4]
    mp_obj_list_t *self = MP_OBJ_TO_PTR(self_in);
   11d7e:	68fb      	ldr	r3, [r7, #12]
   11d80:	617b      	str	r3, [r7, #20]
    size_t i = mp_get_index(self->base.type, self->len, index, false);
   11d82:	697b      	ldr	r3, [r7, #20]
   11d84:	6818      	ldr	r0, [r3, #0]
   11d86:	697b      	ldr	r3, [r7, #20]
   11d88:	6899      	ldr	r1, [r3, #8]
   11d8a:	2300      	movs	r3, #0
   11d8c:	68ba      	ldr	r2, [r7, #8]
   11d8e:	f7fc fa31 	bl	e1f4 <mp_get_index>
   11d92:	6138      	str	r0, [r7, #16]
    self->items[i] = value;
   11d94:	697b      	ldr	r3, [r7, #20]
   11d96:	68da      	ldr	r2, [r3, #12]
   11d98:	693b      	ldr	r3, [r7, #16]
   11d9a:	009b      	lsls	r3, r3, #2
   11d9c:	4413      	add	r3, r2
   11d9e:	687a      	ldr	r2, [r7, #4]
   11da0:	601a      	str	r2, [r3, #0]
}
   11da2:	bf00      	nop
   11da4:	3718      	adds	r7, #24
   11da6:	46bd      	mov	sp, r7
   11da8:	bd80      	pop	{r7, pc}

00011daa <list_it_iternext>:
    mp_fun_1_t iternext;
    mp_obj_t list;
    size_t cur;
} mp_obj_list_it_t;

STATIC mp_obj_t list_it_iternext(mp_obj_t self_in) {
   11daa:	b480      	push	{r7}
   11dac:	b087      	sub	sp, #28
   11dae:	af00      	add	r7, sp, #0
   11db0:	6078      	str	r0, [r7, #4]
    mp_obj_list_it_t *self = MP_OBJ_TO_PTR(self_in);
   11db2:	687b      	ldr	r3, [r7, #4]
   11db4:	617b      	str	r3, [r7, #20]
    mp_obj_list_t *list = MP_OBJ_TO_PTR(self->list);
   11db6:	697b      	ldr	r3, [r7, #20]
   11db8:	689b      	ldr	r3, [r3, #8]
   11dba:	613b      	str	r3, [r7, #16]
    if (self->cur < list->len) {
   11dbc:	697b      	ldr	r3, [r7, #20]
   11dbe:	68da      	ldr	r2, [r3, #12]
   11dc0:	693b      	ldr	r3, [r7, #16]
   11dc2:	689b      	ldr	r3, [r3, #8]
   11dc4:	429a      	cmp	r2, r3
   11dc6:	d20e      	bcs.n	11de6 <list_it_iternext+0x3c>
        mp_obj_t o_out = list->items[self->cur];
   11dc8:	693b      	ldr	r3, [r7, #16]
   11dca:	68da      	ldr	r2, [r3, #12]
   11dcc:	697b      	ldr	r3, [r7, #20]
   11dce:	68db      	ldr	r3, [r3, #12]
   11dd0:	009b      	lsls	r3, r3, #2
   11dd2:	4413      	add	r3, r2
   11dd4:	681b      	ldr	r3, [r3, #0]
   11dd6:	60fb      	str	r3, [r7, #12]
        self->cur += 1;
   11dd8:	697b      	ldr	r3, [r7, #20]
   11dda:	68db      	ldr	r3, [r3, #12]
   11ddc:	1c5a      	adds	r2, r3, #1
   11dde:	697b      	ldr	r3, [r7, #20]
   11de0:	60da      	str	r2, [r3, #12]
        return o_out;
   11de2:	68fb      	ldr	r3, [r7, #12]
   11de4:	e000      	b.n	11de8 <list_it_iternext+0x3e>
    } else {
        return MP_OBJ_STOP_ITERATION;
   11de6:	2304      	movs	r3, #4
    }
}
   11de8:	4618      	mov	r0, r3
   11dea:	371c      	adds	r7, #28
   11dec:	46bd      	mov	sp, r7
   11dee:	f85d 7b04 	ldr.w	r7, [sp], #4
   11df2:	4770      	bx	lr

00011df4 <mp_obj_new_list_iterator>:

mp_obj_t mp_obj_new_list_iterator(mp_obj_t list, size_t cur, mp_obj_iter_buf_t *iter_buf) {
   11df4:	b480      	push	{r7}
   11df6:	b087      	sub	sp, #28
   11df8:	af00      	add	r7, sp, #0
   11dfa:	60f8      	str	r0, [r7, #12]
   11dfc:	60b9      	str	r1, [r7, #8]
   11dfe:	607a      	str	r2, [r7, #4]
    assert(sizeof(mp_obj_list_it_t) <= sizeof(mp_obj_iter_buf_t));
    mp_obj_list_it_t *o = (mp_obj_list_it_t*)iter_buf;
   11e00:	687b      	ldr	r3, [r7, #4]
   11e02:	617b      	str	r3, [r7, #20]
    o->base.type = &mp_type_polymorph_iter;
   11e04:	697b      	ldr	r3, [r7, #20]
   11e06:	4a09      	ldr	r2, [pc, #36]	; (11e2c <mp_obj_new_list_iterator+0x38>)
   11e08:	601a      	str	r2, [r3, #0]
    o->iternext = list_it_iternext;
   11e0a:	697b      	ldr	r3, [r7, #20]
   11e0c:	4a08      	ldr	r2, [pc, #32]	; (11e30 <mp_obj_new_list_iterator+0x3c>)
   11e0e:	605a      	str	r2, [r3, #4]
    o->list = list;
   11e10:	697b      	ldr	r3, [r7, #20]
   11e12:	68fa      	ldr	r2, [r7, #12]
   11e14:	609a      	str	r2, [r3, #8]
    o->cur = cur;
   11e16:	697b      	ldr	r3, [r7, #20]
   11e18:	68ba      	ldr	r2, [r7, #8]
   11e1a:	60da      	str	r2, [r3, #12]
    return MP_OBJ_FROM_PTR(o);
   11e1c:	697b      	ldr	r3, [r7, #20]
}
   11e1e:	4618      	mov	r0, r3
   11e20:	371c      	adds	r7, #28
   11e22:	46bd      	mov	sp, r7
   11e24:	f85d 7b04 	ldr.w	r7, [sp], #4
   11e28:	4770      	bx	lr
   11e2a:	bf00      	nop
   11e2c:	0002509c 	.word	0x0002509c
   11e30:	00011dab 	.word	0x00011dab

00011e34 <MP_OBJ_IS_OBJ>:
    { return ((((mp_int_t)(o)) & 3) == 0); }
   11e34:	b480      	push	{r7}
   11e36:	b083      	sub	sp, #12
   11e38:	af00      	add	r7, sp, #0
   11e3a:	6078      	str	r0, [r7, #4]
   11e3c:	687b      	ldr	r3, [r7, #4]
   11e3e:	f003 0303 	and.w	r3, r3, #3
   11e42:	2b00      	cmp	r3, #0
   11e44:	bf0c      	ite	eq
   11e46:	2301      	moveq	r3, #1
   11e48:	2300      	movne	r3, #0
   11e4a:	b2db      	uxtb	r3, r3
   11e4c:	4618      	mov	r0, r3
   11e4e:	370c      	adds	r7, #12
   11e50:	46bd      	mov	sp, r7
   11e52:	f85d 7b04 	ldr.w	r7, [sp], #4
   11e56:	4770      	bx	lr

00011e58 <mp_arg_check_num>:
static inline void mp_arg_check_num(size_t n_args, size_t n_kw, size_t n_args_min, size_t n_args_max, bool takes_kw) {
   11e58:	b580      	push	{r7, lr}
   11e5a:	b084      	sub	sp, #16
   11e5c:	af00      	add	r7, sp, #0
   11e5e:	60f8      	str	r0, [r7, #12]
   11e60:	60b9      	str	r1, [r7, #8]
   11e62:	607a      	str	r2, [r7, #4]
   11e64:	603b      	str	r3, [r7, #0]
    mp_arg_check_num_sig(n_args, n_kw, (uint32_t)MP_OBJ_FUN_MAKE_SIG(n_args_min, n_args_max, takes_kw));
   11e66:	687b      	ldr	r3, [r7, #4]
   11e68:	045a      	lsls	r2, r3, #17
   11e6a:	683b      	ldr	r3, [r7, #0]
   11e6c:	005b      	lsls	r3, r3, #1
   11e6e:	431a      	orrs	r2, r3
   11e70:	7e3b      	ldrb	r3, [r7, #24]
   11e72:	2b00      	cmp	r3, #0
   11e74:	d001      	beq.n	11e7a <mp_arg_check_num+0x22>
   11e76:	2301      	movs	r3, #1
   11e78:	e000      	b.n	11e7c <mp_arg_check_num+0x24>
   11e7a:	2300      	movs	r3, #0
   11e7c:	4313      	orrs	r3, r2
   11e7e:	461a      	mov	r2, r3
   11e80:	68b9      	ldr	r1, [r7, #8]
   11e82:	68f8      	ldr	r0, [r7, #12]
   11e84:	f7fb faa8 	bl	d3d8 <mp_arg_check_num_sig>
}
   11e88:	bf00      	nop
   11e8a:	3710      	adds	r7, #16
   11e8c:	46bd      	mov	sp, r7
   11e8e:	bd80      	pop	{r7, pc}

00011e90 <map_make_new>:
    size_t n_iters;
    mp_obj_t fun;
    mp_obj_t iters[];
} mp_obj_map_t;

STATIC mp_obj_t map_make_new(const mp_obj_type_t *type, size_t n_args, size_t n_kw, const mp_obj_t *args) {
   11e90:	b580      	push	{r7, lr}
   11e92:	b088      	sub	sp, #32
   11e94:	af02      	add	r7, sp, #8
   11e96:	60f8      	str	r0, [r7, #12]
   11e98:	60b9      	str	r1, [r7, #8]
   11e9a:	607a      	str	r2, [r7, #4]
   11e9c:	603b      	str	r3, [r7, #0]
    mp_arg_check_num(n_args, n_kw, 2, MP_OBJ_FUN_ARGS_MAX, false);
   11e9e:	2300      	movs	r3, #0
   11ea0:	9300      	str	r3, [sp, #0]
   11ea2:	f64f 73ff 	movw	r3, #65535	; 0xffff
   11ea6:	2202      	movs	r2, #2
   11ea8:	6879      	ldr	r1, [r7, #4]
   11eaa:	68b8      	ldr	r0, [r7, #8]
   11eac:	f7ff ffd4 	bl	11e58 <mp_arg_check_num>
    mp_obj_map_t *o = m_new_obj_var(mp_obj_map_t, mp_obj_t, n_args - 1);
   11eb0:	68bb      	ldr	r3, [r7, #8]
   11eb2:	3302      	adds	r3, #2
   11eb4:	009b      	lsls	r3, r3, #2
   11eb6:	4618      	mov	r0, r3
   11eb8:	f7ee fa30 	bl	31c <m_malloc>
   11ebc:	6138      	str	r0, [r7, #16]
    o->base.type = type;
   11ebe:	693b      	ldr	r3, [r7, #16]
   11ec0:	68fa      	ldr	r2, [r7, #12]
   11ec2:	601a      	str	r2, [r3, #0]
    o->n_iters = n_args - 1;
   11ec4:	68bb      	ldr	r3, [r7, #8]
   11ec6:	1e5a      	subs	r2, r3, #1
   11ec8:	693b      	ldr	r3, [r7, #16]
   11eca:	605a      	str	r2, [r3, #4]
    o->fun = args[0];
   11ecc:	683b      	ldr	r3, [r7, #0]
   11ece:	681a      	ldr	r2, [r3, #0]
   11ed0:	693b      	ldr	r3, [r7, #16]
   11ed2:	609a      	str	r2, [r3, #8]
    for (size_t i = 0; i < n_args - 1; i++) {
   11ed4:	2300      	movs	r3, #0
   11ed6:	617b      	str	r3, [r7, #20]
   11ed8:	e013      	b.n	11f02 <map_make_new+0x72>
        o->iters[i] = mp_getiter(args[i + 1], NULL);
   11eda:	697b      	ldr	r3, [r7, #20]
   11edc:	3301      	adds	r3, #1
   11ede:	009b      	lsls	r3, r3, #2
   11ee0:	683a      	ldr	r2, [r7, #0]
   11ee2:	4413      	add	r3, r2
   11ee4:	681b      	ldr	r3, [r3, #0]
   11ee6:	2100      	movs	r1, #0
   11ee8:	4618      	mov	r0, r3
   11eea:	f7fa feed 	bl	ccc8 <mp_getiter>
   11eee:	4601      	mov	r1, r0
   11ef0:	693a      	ldr	r2, [r7, #16]
   11ef2:	697b      	ldr	r3, [r7, #20]
   11ef4:	3302      	adds	r3, #2
   11ef6:	009b      	lsls	r3, r3, #2
   11ef8:	4413      	add	r3, r2
   11efa:	6059      	str	r1, [r3, #4]
    for (size_t i = 0; i < n_args - 1; i++) {
   11efc:	697b      	ldr	r3, [r7, #20]
   11efe:	3301      	adds	r3, #1
   11f00:	617b      	str	r3, [r7, #20]
   11f02:	68bb      	ldr	r3, [r7, #8]
   11f04:	1e5a      	subs	r2, r3, #1
   11f06:	697b      	ldr	r3, [r7, #20]
   11f08:	429a      	cmp	r2, r3
   11f0a:	d8e6      	bhi.n	11eda <map_make_new+0x4a>
    }
    return MP_OBJ_FROM_PTR(o);
   11f0c:	693b      	ldr	r3, [r7, #16]
}
   11f0e:	4618      	mov	r0, r3
   11f10:	3718      	adds	r7, #24
   11f12:	46bd      	mov	sp, r7
   11f14:	bd80      	pop	{r7, pc}

00011f16 <map_iternext>:

STATIC mp_obj_t map_iternext(mp_obj_t self_in) {
   11f16:	b580      	push	{r7, lr}
   11f18:	b086      	sub	sp, #24
   11f1a:	af00      	add	r7, sp, #0
   11f1c:	6078      	str	r0, [r7, #4]
    mp_check_self(MP_OBJ_IS_TYPE(self_in, &mp_type_map));
   11f1e:	6878      	ldr	r0, [r7, #4]
   11f20:	f7ff ff88 	bl	11e34 <MP_OBJ_IS_OBJ>
   11f24:	4603      	mov	r3, r0
   11f26:	2b00      	cmp	r3, #0
   11f28:	d004      	beq.n	11f34 <map_iternext+0x1e>
   11f2a:	687b      	ldr	r3, [r7, #4]
   11f2c:	681b      	ldr	r3, [r3, #0]
   11f2e:	4a21      	ldr	r2, [pc, #132]	; (11fb4 <map_iternext+0x9e>)
   11f30:	4293      	cmp	r3, r2
   11f32:	d005      	beq.n	11f40 <map_iternext+0x2a>
   11f34:	4b20      	ldr	r3, [pc, #128]	; (11fb8 <map_iternext+0xa2>)
   11f36:	4a21      	ldr	r2, [pc, #132]	; (11fbc <map_iternext+0xa6>)
   11f38:	2134      	movs	r1, #52	; 0x34
   11f3a:	4821      	ldr	r0, [pc, #132]	; (11fc0 <map_iternext+0xaa>)
   11f3c:	f00a ffd0 	bl	1cee0 <__assert_func>
    mp_obj_map_t *self = MP_OBJ_TO_PTR(self_in);
   11f40:	687b      	ldr	r3, [r7, #4]
   11f42:	613b      	str	r3, [r7, #16]
    mp_obj_t *nextses = m_new(mp_obj_t, self->n_iters);
   11f44:	693b      	ldr	r3, [r7, #16]
   11f46:	685b      	ldr	r3, [r3, #4]
   11f48:	009b      	lsls	r3, r3, #2
   11f4a:	4618      	mov	r0, r3
   11f4c:	f7ee f9e6 	bl	31c <m_malloc>
   11f50:	60f8      	str	r0, [r7, #12]

    for (size_t i = 0; i < self->n_iters; i++) {
   11f52:	2300      	movs	r3, #0
   11f54:	617b      	str	r3, [r7, #20]
   11f56:	e01a      	b.n	11f8e <map_iternext+0x78>
        mp_obj_t next = mp_iternext(self->iters[i]);
   11f58:	693a      	ldr	r2, [r7, #16]
   11f5a:	697b      	ldr	r3, [r7, #20]
   11f5c:	3302      	adds	r3, #2
   11f5e:	009b      	lsls	r3, r3, #2
   11f60:	4413      	add	r3, r2
   11f62:	685b      	ldr	r3, [r3, #4]
   11f64:	4618      	mov	r0, r3
   11f66:	f7fa ff31 	bl	cdcc <mp_iternext>
   11f6a:	60b8      	str	r0, [r7, #8]
        if (next == MP_OBJ_STOP_ITERATION) {
   11f6c:	68bb      	ldr	r3, [r7, #8]
   11f6e:	2b04      	cmp	r3, #4
   11f70:	d104      	bne.n	11f7c <map_iternext+0x66>
            m_del(mp_obj_t, nextses, self->n_iters);
   11f72:	68f8      	ldr	r0, [r7, #12]
   11f74:	f7ee fa50 	bl	418 <m_free>
            return MP_OBJ_STOP_ITERATION;
   11f78:	2304      	movs	r3, #4
   11f7a:	e016      	b.n	11faa <map_iternext+0x94>
        }
        nextses[i] = next;
   11f7c:	697b      	ldr	r3, [r7, #20]
   11f7e:	009b      	lsls	r3, r3, #2
   11f80:	68fa      	ldr	r2, [r7, #12]
   11f82:	4413      	add	r3, r2
   11f84:	68ba      	ldr	r2, [r7, #8]
   11f86:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < self->n_iters; i++) {
   11f88:	697b      	ldr	r3, [r7, #20]
   11f8a:	3301      	adds	r3, #1
   11f8c:	617b      	str	r3, [r7, #20]
   11f8e:	693b      	ldr	r3, [r7, #16]
   11f90:	685a      	ldr	r2, [r3, #4]
   11f92:	697b      	ldr	r3, [r7, #20]
   11f94:	429a      	cmp	r2, r3
   11f96:	d8df      	bhi.n	11f58 <map_iternext+0x42>
    }
    return mp_call_function_n_kw(self->fun, self->n_iters, 0, nextses);
   11f98:	693b      	ldr	r3, [r7, #16]
   11f9a:	6898      	ldr	r0, [r3, #8]
   11f9c:	693b      	ldr	r3, [r7, #16]
   11f9e:	6859      	ldr	r1, [r3, #4]
   11fa0:	68fb      	ldr	r3, [r7, #12]
   11fa2:	2200      	movs	r2, #0
   11fa4:	f7fa f8c7 	bl	c136 <mp_call_function_n_kw>
   11fa8:	4603      	mov	r3, r0
}
   11faa:	4618      	mov	r0, r3
   11fac:	3718      	adds	r7, #24
   11fae:	46bd      	mov	sp, r7
   11fb0:	bd80      	pop	{r7, pc}
   11fb2:	bf00      	nop
   11fb4:	00024fa0 	.word	0x00024fa0
   11fb8:	00024f30 	.word	0x00024f30
   11fbc:	00024fdc 	.word	0x00024fdc
   11fc0:	00024f8c 	.word	0x00024f8c

00011fc4 <mp_module_call_init>:
void mp_module_register(qstr qstr, mp_obj_t module);

#if MICROPY_MODULE_BUILTIN_INIT
void mp_module_call_init(qstr module_name, mp_obj_t module_obj);
#else
static inline void mp_module_call_init(qstr module_name, mp_obj_t module_obj) {
   11fc4:	b480      	push	{r7}
   11fc6:	b083      	sub	sp, #12
   11fc8:	af00      	add	r7, sp, #0
   11fca:	6078      	str	r0, [r7, #4]
   11fcc:	6039      	str	r1, [r7, #0]
    (void)module_name;
    (void)module_obj;
}
   11fce:	bf00      	nop
   11fd0:	370c      	adds	r7, #12
   11fd2:	46bd      	mov	sp, r7
   11fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
   11fd8:	4770      	bx	lr

00011fda <module_print>:

#include "py/objmodule.h"
#include "py/runtime.h"
#include "py/builtin.h"

STATIC void module_print(const mp_print_t *print, mp_obj_t self_in, mp_print_kind_t kind) {
   11fda:	b580      	push	{r7, lr}
   11fdc:	b088      	sub	sp, #32
   11fde:	af00      	add	r7, sp, #0
   11fe0:	60f8      	str	r0, [r7, #12]
   11fe2:	60b9      	str	r1, [r7, #8]
   11fe4:	607a      	str	r2, [r7, #4]
    (void)kind;
    mp_obj_module_t *self = MP_OBJ_TO_PTR(self_in);
   11fe6:	68bb      	ldr	r3, [r7, #8]
   11fe8:	61bb      	str	r3, [r7, #24]

    const char *module_name = "";
   11fea:	4b0e      	ldr	r3, [pc, #56]	; (12024 <module_print+0x4a>)
   11fec:	61fb      	str	r3, [r7, #28]
    mp_map_elem_t *elem = mp_map_lookup(&self->globals->map, MP_OBJ_NEW_QSTR(MP_QSTR___name__), MP_MAP_LOOKUP);
   11fee:	69bb      	ldr	r3, [r7, #24]
   11ff0:	685b      	ldr	r3, [r3, #4]
   11ff2:	3304      	adds	r3, #4
   11ff4:	2200      	movs	r2, #0
   11ff6:	2172      	movs	r1, #114	; 0x72
   11ff8:	4618      	mov	r0, r3
   11ffa:	f7fb fc49 	bl	d890 <mp_map_lookup>
   11ffe:	6178      	str	r0, [r7, #20]
    if (elem != NULL) {
   12000:	697b      	ldr	r3, [r7, #20]
   12002:	2b00      	cmp	r3, #0
   12004:	d005      	beq.n	12012 <module_print+0x38>
        module_name = mp_obj_str_get_str(elem->value);
   12006:	697b      	ldr	r3, [r7, #20]
   12008:	685b      	ldr	r3, [r3, #4]
   1200a:	4618      	mov	r0, r3
   1200c:	f003 fd2e 	bl	15a6c <mp_obj_str_get_str>
   12010:	61f8      	str	r0, [r7, #28]
        mp_printf(print, "<module '%s' from '%s'>", module_name, mp_obj_str_get_str(elem->value));
        return;
    }
#endif

    mp_printf(print, "<module '%s'>", module_name);
   12012:	69fa      	ldr	r2, [r7, #28]
   12014:	4904      	ldr	r1, [pc, #16]	; (12028 <module_print+0x4e>)
   12016:	68f8      	ldr	r0, [r7, #12]
   12018:	f7f0 f82a 	bl	2070 <mp_printf>
}
   1201c:	bf00      	nop
   1201e:	3720      	adds	r7, #32
   12020:	46bd      	mov	sp, r7
   12022:	bd80      	pop	{r7, pc}
   12024:	00024fec 	.word	0x00024fec
   12028:	00024ff0 	.word	0x00024ff0

0001202c <module_attr>:

STATIC void module_attr(mp_obj_t self_in, qstr attr, mp_obj_t *dest) {
   1202c:	b580      	push	{r7, lr}
   1202e:	b088      	sub	sp, #32
   12030:	af00      	add	r7, sp, #0
   12032:	60f8      	str	r0, [r7, #12]
   12034:	60b9      	str	r1, [r7, #8]
   12036:	607a      	str	r2, [r7, #4]
    mp_obj_module_t *self = MP_OBJ_TO_PTR(self_in);
   12038:	68fb      	ldr	r3, [r7, #12]
   1203a:	61fb      	str	r3, [r7, #28]
    if (dest[0] == MP_OBJ_NULL) {
   1203c:	687b      	ldr	r3, [r7, #4]
   1203e:	681b      	ldr	r3, [r3, #0]
   12040:	2b00      	cmp	r3, #0
   12042:	d113      	bne.n	1206c <module_attr+0x40>
        // load attribute
        mp_map_elem_t *elem = mp_map_lookup(&self->globals->map, MP_OBJ_NEW_QSTR(attr), MP_MAP_LOOKUP);
   12044:	69fb      	ldr	r3, [r7, #28]
   12046:	685b      	ldr	r3, [r3, #4]
   12048:	1d18      	adds	r0, r3, #4
   1204a:	68bb      	ldr	r3, [r7, #8]
   1204c:	009b      	lsls	r3, r3, #2
   1204e:	f043 0302 	orr.w	r3, r3, #2
   12052:	2200      	movs	r2, #0
   12054:	4619      	mov	r1, r3
   12056:	f7fb fc1b 	bl	d890 <mp_map_lookup>
   1205a:	61b8      	str	r0, [r7, #24]
        if (elem != NULL) {
   1205c:	69bb      	ldr	r3, [r7, #24]
   1205e:	2b00      	cmp	r3, #0
   12060:	d02d      	beq.n	120be <module_attr+0x92>
            dest[0] = elem->value;
   12062:	69bb      	ldr	r3, [r7, #24]
   12064:	685a      	ldr	r2, [r3, #4]
   12066:	687b      	ldr	r3, [r7, #4]
   12068:	601a      	str	r2, [r3, #0]
   1206a:	e028      	b.n	120be <module_attr+0x92>
            }
        #endif
        }
    } else {
        // delete/store attribute
        mp_obj_dict_t *dict = self->globals;
   1206c:	69fb      	ldr	r3, [r7, #28]
   1206e:	685b      	ldr	r3, [r3, #4]
   12070:	617b      	str	r3, [r7, #20]
        if (dict->map.is_fixed) {
   12072:	697b      	ldr	r3, [r7, #20]
   12074:	791b      	ldrb	r3, [r3, #4]
   12076:	f003 0302 	and.w	r3, r3, #2
   1207a:	b2db      	uxtb	r3, r3
   1207c:	2b00      	cmp	r3, #0
   1207e:	d11d      	bne.n	120bc <module_attr+0x90>
            {
                // can't delete or store to fixed map
                return;
            }
        }
        if (dest[1] == MP_OBJ_NULL) {
   12080:	687b      	ldr	r3, [r7, #4]
   12082:	3304      	adds	r3, #4
   12084:	681b      	ldr	r3, [r3, #0]
   12086:	2b00      	cmp	r3, #0
   12088:	d108      	bne.n	1209c <module_attr+0x70>
            // delete attribute
            mp_obj_dict_delete(MP_OBJ_FROM_PTR(dict), MP_OBJ_NEW_QSTR(attr));
   1208a:	68bb      	ldr	r3, [r7, #8]
   1208c:	009b      	lsls	r3, r3, #2
   1208e:	f043 0302 	orr.w	r3, r3, #2
   12092:	4619      	mov	r1, r3
   12094:	6978      	ldr	r0, [r7, #20]
   12096:	f7fd fad7 	bl	f648 <mp_obj_dict_delete>
   1209a:	e00b      	b.n	120b4 <module_attr+0x88>
        } else {
            // store attribute
            mp_obj_dict_store(MP_OBJ_FROM_PTR(dict), MP_OBJ_NEW_QSTR(attr), dest[1]);
   1209c:	68bb      	ldr	r3, [r7, #8]
   1209e:	009b      	lsls	r3, r3, #2
   120a0:	f043 0302 	orr.w	r3, r3, #2
   120a4:	4619      	mov	r1, r3
   120a6:	687b      	ldr	r3, [r7, #4]
   120a8:	3304      	adds	r3, #4
   120aa:	681b      	ldr	r3, [r3, #0]
   120ac:	461a      	mov	r2, r3
   120ae:	6978      	ldr	r0, [r7, #20]
   120b0:	f7fd fa95 	bl	f5de <mp_obj_dict_store>
        }
        dest[0] = MP_OBJ_NULL; // indicate success
   120b4:	687b      	ldr	r3, [r7, #4]
   120b6:	2200      	movs	r2, #0
   120b8:	601a      	str	r2, [r3, #0]
   120ba:	e000      	b.n	120be <module_attr+0x92>
                return;
   120bc:	bf00      	nop
    }
}
   120be:	3720      	adds	r7, #32
   120c0:	46bd      	mov	sp, r7
   120c2:	bd80      	pop	{r7, pc}

000120c4 <mp_obj_new_module>:
    .name = MP_QSTR_module,
    .print = module_print,
    .attr = module_attr,
};

mp_obj_t mp_obj_new_module(qstr module_name) {
   120c4:	b580      	push	{r7, lr}
   120c6:	b086      	sub	sp, #24
   120c8:	af00      	add	r7, sp, #0
   120ca:	6078      	str	r0, [r7, #4]
    mp_map_t *mp_loaded_modules_map = &MP_STATE_VM(mp_loaded_modules_dict).map;
   120cc:	4b18      	ldr	r3, [pc, #96]	; (12130 <mp_obj_new_module+0x6c>)
   120ce:	617b      	str	r3, [r7, #20]
    mp_map_elem_t *el = mp_map_lookup(mp_loaded_modules_map, MP_OBJ_NEW_QSTR(module_name), MP_MAP_LOOKUP_ADD_IF_NOT_FOUND);
   120d0:	687b      	ldr	r3, [r7, #4]
   120d2:	009b      	lsls	r3, r3, #2
   120d4:	f043 0302 	orr.w	r3, r3, #2
   120d8:	2201      	movs	r2, #1
   120da:	4619      	mov	r1, r3
   120dc:	6978      	ldr	r0, [r7, #20]
   120de:	f7fb fbd7 	bl	d890 <mp_map_lookup>
   120e2:	6138      	str	r0, [r7, #16]
    // We could error out if module already exists, but let C extensions
    // add new members to existing modules.
    if (el->value != MP_OBJ_NULL) {
   120e4:	693b      	ldr	r3, [r7, #16]
   120e6:	685b      	ldr	r3, [r3, #4]
   120e8:	2b00      	cmp	r3, #0
   120ea:	d002      	beq.n	120f2 <mp_obj_new_module+0x2e>
        return el->value;
   120ec:	693b      	ldr	r3, [r7, #16]
   120ee:	685b      	ldr	r3, [r3, #4]
   120f0:	e01a      	b.n	12128 <mp_obj_new_module+0x64>
    }

    // create new module object
    mp_obj_module_t *o = m_new_obj(mp_obj_module_t);
   120f2:	2008      	movs	r0, #8
   120f4:	f7ee f912 	bl	31c <m_malloc>
   120f8:	60f8      	str	r0, [r7, #12]
    o->base.type = &mp_type_module;
   120fa:	68fb      	ldr	r3, [r7, #12]
   120fc:	4a0d      	ldr	r2, [pc, #52]	; (12134 <mp_obj_new_module+0x70>)
   120fe:	601a      	str	r2, [r3, #0]
    o->globals = MP_OBJ_TO_PTR(mp_obj_new_dict(MICROPY_MODULE_DICT_SIZE));
   12100:	2001      	movs	r0, #1
   12102:	f7fd fa4b 	bl	f59c <mp_obj_new_dict>
   12106:	4602      	mov	r2, r0
   12108:	68fb      	ldr	r3, [r7, #12]
   1210a:	605a      	str	r2, [r3, #4]

    // store __name__ entry in the module
    mp_obj_dict_store(MP_OBJ_FROM_PTR(o->globals), MP_OBJ_NEW_QSTR(MP_QSTR___name__), MP_OBJ_NEW_QSTR(module_name));
   1210c:	68fb      	ldr	r3, [r7, #12]
   1210e:	6858      	ldr	r0, [r3, #4]
   12110:	687b      	ldr	r3, [r7, #4]
   12112:	009b      	lsls	r3, r3, #2
   12114:	f043 0302 	orr.w	r3, r3, #2
   12118:	461a      	mov	r2, r3
   1211a:	2172      	movs	r1, #114	; 0x72
   1211c:	f7fd fa5f 	bl	f5de <mp_obj_dict_store>

    // store the new module into the slot in the global dict holding all modules
    el->value = MP_OBJ_FROM_PTR(o);
   12120:	693b      	ldr	r3, [r7, #16]
   12122:	68fa      	ldr	r2, [r7, #12]
   12124:	605a      	str	r2, [r3, #4]

    // return the new module
    return MP_OBJ_FROM_PTR(o);
   12126:	68fb      	ldr	r3, [r7, #12]
}
   12128:	4618      	mov	r0, r3
   1212a:	3718      	adds	r7, #24
   1212c:	46bd      	mov	sp, r7
   1212e:	bd80      	pop	{r7, pc}
   12130:	20001270 	.word	0x20001270
   12134:	00025000 	.word	0x00025000

00012138 <mp_module_get>:

MP_DEFINE_CONST_MAP(mp_builtin_module_weak_links_map, mp_builtin_module_weak_links_table);
#endif

// returns MP_OBJ_NULL if not found
mp_obj_t mp_module_get(qstr module_name) {
   12138:	b580      	push	{r7, lr}
   1213a:	b084      	sub	sp, #16
   1213c:	af00      	add	r7, sp, #0
   1213e:	6078      	str	r0, [r7, #4]
    mp_map_t *mp_loaded_modules_map = &MP_STATE_VM(mp_loaded_modules_dict).map;
   12140:	4b14      	ldr	r3, [pc, #80]	; (12194 <mp_module_get+0x5c>)
   12142:	60bb      	str	r3, [r7, #8]
    // lookup module
    mp_map_elem_t *el = mp_map_lookup(mp_loaded_modules_map, MP_OBJ_NEW_QSTR(module_name), MP_MAP_LOOKUP);
   12144:	687b      	ldr	r3, [r7, #4]
   12146:	009b      	lsls	r3, r3, #2
   12148:	f043 0302 	orr.w	r3, r3, #2
   1214c:	2200      	movs	r2, #0
   1214e:	4619      	mov	r1, r3
   12150:	68b8      	ldr	r0, [r7, #8]
   12152:	f7fb fb9d 	bl	d890 <mp_map_lookup>
   12156:	60f8      	str	r0, [r7, #12]

    if (el == NULL) {
   12158:	68fb      	ldr	r3, [r7, #12]
   1215a:	2b00      	cmp	r3, #0
   1215c:	d114      	bne.n	12188 <mp_module_get+0x50>
        // module not found, look for builtin module names
        el = mp_map_lookup((mp_map_t*)&mp_builtin_module_map, MP_OBJ_NEW_QSTR(module_name), MP_MAP_LOOKUP);
   1215e:	687b      	ldr	r3, [r7, #4]
   12160:	009b      	lsls	r3, r3, #2
   12162:	f043 0302 	orr.w	r3, r3, #2
   12166:	2200      	movs	r2, #0
   12168:	4619      	mov	r1, r3
   1216a:	480b      	ldr	r0, [pc, #44]	; (12198 <mp_module_get+0x60>)
   1216c:	f7fb fb90 	bl	d890 <mp_map_lookup>
   12170:	60f8      	str	r0, [r7, #12]
        if (el == NULL) {
   12172:	68fb      	ldr	r3, [r7, #12]
   12174:	2b00      	cmp	r3, #0
   12176:	d101      	bne.n	1217c <mp_module_get+0x44>
            return MP_OBJ_NULL;
   12178:	2300      	movs	r3, #0
   1217a:	e007      	b.n	1218c <mp_module_get+0x54>
        }
        mp_module_call_init(module_name, el->value);
   1217c:	68fb      	ldr	r3, [r7, #12]
   1217e:	685b      	ldr	r3, [r3, #4]
   12180:	4619      	mov	r1, r3
   12182:	6878      	ldr	r0, [r7, #4]
   12184:	f7ff ff1e 	bl	11fc4 <mp_module_call_init>
    }

    // module found, return it
    return el->value;
   12188:	68fb      	ldr	r3, [r7, #12]
   1218a:	685b      	ldr	r3, [r3, #4]
}
   1218c:	4618      	mov	r0, r3
   1218e:	3710      	adds	r7, #16
   12190:	46bd      	mov	sp, r7
   12192:	bd80      	pop	{r7, pc}
   12194:	20001270 	.word	0x20001270
   12198:	00025054 	.word	0x00025054

0001219c <mp_module_register>:

void mp_module_register(qstr qst, mp_obj_t module) {
   1219c:	b580      	push	{r7, lr}
   1219e:	b084      	sub	sp, #16
   121a0:	af00      	add	r7, sp, #0
   121a2:	6078      	str	r0, [r7, #4]
   121a4:	6039      	str	r1, [r7, #0]
    mp_map_t *mp_loaded_modules_map = &MP_STATE_VM(mp_loaded_modules_dict).map;
   121a6:	4b09      	ldr	r3, [pc, #36]	; (121cc <mp_module_register+0x30>)
   121a8:	60fb      	str	r3, [r7, #12]
    mp_map_lookup(mp_loaded_modules_map, MP_OBJ_NEW_QSTR(qst), MP_MAP_LOOKUP_ADD_IF_NOT_FOUND)->value = module;
   121aa:	687b      	ldr	r3, [r7, #4]
   121ac:	009b      	lsls	r3, r3, #2
   121ae:	f043 0302 	orr.w	r3, r3, #2
   121b2:	2201      	movs	r2, #1
   121b4:	4619      	mov	r1, r3
   121b6:	68f8      	ldr	r0, [r7, #12]
   121b8:	f7fb fb6a 	bl	d890 <mp_map_lookup>
   121bc:	4602      	mov	r2, r0
   121be:	683b      	ldr	r3, [r7, #0]
   121c0:	6053      	str	r3, [r2, #4]
}
   121c2:	bf00      	nop
   121c4:	3710      	adds	r7, #16
   121c6:	46bd      	mov	sp, r7
   121c8:	bd80      	pop	{r7, pc}
   121ca:	bf00      	nop
   121cc:	20001270 	.word	0x20001270

000121d0 <mp_arg_check_num>:
static inline void mp_arg_check_num(size_t n_args, size_t n_kw, size_t n_args_min, size_t n_args_max, bool takes_kw) {
   121d0:	b580      	push	{r7, lr}
   121d2:	b084      	sub	sp, #16
   121d4:	af00      	add	r7, sp, #0
   121d6:	60f8      	str	r0, [r7, #12]
   121d8:	60b9      	str	r1, [r7, #8]
   121da:	607a      	str	r2, [r7, #4]
   121dc:	603b      	str	r3, [r7, #0]
    mp_arg_check_num_sig(n_args, n_kw, (uint32_t)MP_OBJ_FUN_MAKE_SIG(n_args_min, n_args_max, takes_kw));
   121de:	687b      	ldr	r3, [r7, #4]
   121e0:	045a      	lsls	r2, r3, #17
   121e2:	683b      	ldr	r3, [r7, #0]
   121e4:	005b      	lsls	r3, r3, #1
   121e6:	431a      	orrs	r2, r3
   121e8:	7e3b      	ldrb	r3, [r7, #24]
   121ea:	2b00      	cmp	r3, #0
   121ec:	d001      	beq.n	121f2 <mp_arg_check_num+0x22>
   121ee:	2301      	movs	r3, #1
   121f0:	e000      	b.n	121f4 <mp_arg_check_num+0x24>
   121f2:	2300      	movs	r3, #0
   121f4:	4313      	orrs	r3, r2
   121f6:	461a      	mov	r2, r3
   121f8:	68b9      	ldr	r1, [r7, #8]
   121fa:	68f8      	ldr	r0, [r7, #12]
   121fc:	f7fb f8ec 	bl	d3d8 <mp_arg_check_num_sig>
}
   12200:	bf00      	nop
   12202:	3710      	adds	r7, #16
   12204:	46bd      	mov	sp, r7
   12206:	bd80      	pop	{r7, pc}

00012208 <object_make_new>:

typedef struct _mp_obj_object_t {
    mp_obj_base_t base;
} mp_obj_object_t;

STATIC mp_obj_t object_make_new(const mp_obj_type_t *type, size_t n_args, size_t n_kw, const mp_obj_t *args) {
   12208:	b580      	push	{r7, lr}
   1220a:	b088      	sub	sp, #32
   1220c:	af02      	add	r7, sp, #8
   1220e:	60f8      	str	r0, [r7, #12]
   12210:	60b9      	str	r1, [r7, #8]
   12212:	607a      	str	r2, [r7, #4]
   12214:	603b      	str	r3, [r7, #0]
    (void)args;
    mp_arg_check_num(n_args, n_kw, 0, 0, false);
   12216:	2300      	movs	r3, #0
   12218:	9300      	str	r3, [sp, #0]
   1221a:	2300      	movs	r3, #0
   1221c:	2200      	movs	r2, #0
   1221e:	6879      	ldr	r1, [r7, #4]
   12220:	68b8      	ldr	r0, [r7, #8]
   12222:	f7ff ffd5 	bl	121d0 <mp_arg_check_num>
    mp_obj_object_t *o = m_new_obj(mp_obj_object_t);
   12226:	2004      	movs	r0, #4
   12228:	f7ee f878 	bl	31c <m_malloc>
   1222c:	6178      	str	r0, [r7, #20]
    o->base.type = type;
   1222e:	697b      	ldr	r3, [r7, #20]
   12230:	68fa      	ldr	r2, [r7, #12]
   12232:	601a      	str	r2, [r3, #0]
    return MP_OBJ_FROM_PTR(o);
   12234:	697b      	ldr	r3, [r7, #20]
}
   12236:	4618      	mov	r0, r3
   12238:	3718      	adds	r7, #24
   1223a:	46bd      	mov	sp, r7
   1223c:	bd80      	pop	{r7, pc}

0001223e <polymorph_it_iternext>:
typedef struct _mp_obj_polymorph_iter_t {
    mp_obj_base_t base;
    mp_fun_1_t iternext;
} mp_obj_polymorph_iter_t;

STATIC mp_obj_t polymorph_it_iternext(mp_obj_t self_in) {
   1223e:	b580      	push	{r7, lr}
   12240:	b084      	sub	sp, #16
   12242:	af00      	add	r7, sp, #0
   12244:	6078      	str	r0, [r7, #4]
    mp_obj_polymorph_iter_t *self = MP_OBJ_TO_PTR(self_in);
   12246:	687b      	ldr	r3, [r7, #4]
   12248:	60fb      	str	r3, [r7, #12]
    // Redirect call to object instance's iternext method
    return self->iternext(self_in);
   1224a:	68fb      	ldr	r3, [r7, #12]
   1224c:	685b      	ldr	r3, [r3, #4]
   1224e:	6878      	ldr	r0, [r7, #4]
   12250:	4798      	blx	r3
   12252:	4603      	mov	r3, r0
}
   12254:	4618      	mov	r0, r3
   12256:	3710      	adds	r7, #16
   12258:	46bd      	mov	sp, r7
   1225a:	bd80      	pop	{r7, pc}

0001225c <none_print>:

typedef struct _mp_obj_none_t {
    mp_obj_base_t base;
} mp_obj_none_t;

STATIC void none_print(const mp_print_t *print, mp_obj_t self_in, mp_print_kind_t kind) {
   1225c:	b580      	push	{r7, lr}
   1225e:	b084      	sub	sp, #16
   12260:	af00      	add	r7, sp, #0
   12262:	60f8      	str	r0, [r7, #12]
   12264:	60b9      	str	r1, [r7, #8]
   12266:	607a      	str	r2, [r7, #4]
    (void)self_in;
    if (MICROPY_PY_UJSON && kind == PRINT_JSON) {
        mp_print_str(print, "null");
    } else {
        mp_print_str(print, "None");
   12268:	4903      	ldr	r1, [pc, #12]	; (12278 <none_print+0x1c>)
   1226a:	68f8      	ldr	r0, [r7, #12]
   1226c:	f7ef fbee 	bl	1a4c <mp_print_str>
    }
}
   12270:	bf00      	nop
   12272:	3710      	adds	r7, #16
   12274:	46bd      	mov	sp, r7
   12276:	bd80      	pop	{r7, pc}
   12278:	000250d8 	.word	0x000250d8

0001227c <mp_obj_new_bool>:
static inline mp_obj_t mp_obj_new_bool(mp_int_t x) { return x ? mp_const_true : mp_const_false; }
   1227c:	b480      	push	{r7}
   1227e:	b083      	sub	sp, #12
   12280:	af00      	add	r7, sp, #0
   12282:	6078      	str	r0, [r7, #4]
   12284:	687b      	ldr	r3, [r7, #4]
   12286:	2b00      	cmp	r3, #0
   12288:	d001      	beq.n	1228e <mp_obj_new_bool+0x12>
   1228a:	4b04      	ldr	r3, [pc, #16]	; (1229c <mp_obj_new_bool+0x20>)
   1228c:	e000      	b.n	12290 <mp_obj_new_bool+0x14>
   1228e:	4b04      	ldr	r3, [pc, #16]	; (122a0 <mp_obj_new_bool+0x24>)
   12290:	4618      	mov	r0, r3
   12292:	370c      	adds	r7, #12
   12294:	46bd      	mov	sp, r7
   12296:	f85d 7b04 	ldr.w	r7, [sp], #4
   1229a:	4770      	bx	lr
   1229c:	00023868 	.word	0x00023868
   122a0:	00023860 	.word	0x00023860

000122a4 <mp_arg_check_num>:
static inline void mp_arg_check_num(size_t n_args, size_t n_kw, size_t n_args_min, size_t n_args_max, bool takes_kw) {
   122a4:	b580      	push	{r7, lr}
   122a6:	b084      	sub	sp, #16
   122a8:	af00      	add	r7, sp, #0
   122aa:	60f8      	str	r0, [r7, #12]
   122ac:	60b9      	str	r1, [r7, #8]
   122ae:	607a      	str	r2, [r7, #4]
   122b0:	603b      	str	r3, [r7, #0]
    mp_arg_check_num_sig(n_args, n_kw, (uint32_t)MP_OBJ_FUN_MAKE_SIG(n_args_min, n_args_max, takes_kw));
   122b2:	687b      	ldr	r3, [r7, #4]
   122b4:	045a      	lsls	r2, r3, #17
   122b6:	683b      	ldr	r3, [r7, #0]
   122b8:	005b      	lsls	r3, r3, #1
   122ba:	431a      	orrs	r2, r3
   122bc:	7e3b      	ldrb	r3, [r7, #24]
   122be:	2b00      	cmp	r3, #0
   122c0:	d001      	beq.n	122c6 <mp_arg_check_num+0x22>
   122c2:	2301      	movs	r3, #1
   122c4:	e000      	b.n	122c8 <mp_arg_check_num+0x24>
   122c6:	2300      	movs	r3, #0
   122c8:	4313      	orrs	r3, r2
   122ca:	461a      	mov	r2, r3
   122cc:	68b9      	ldr	r1, [r7, #8]
   122ce:	68f8      	ldr	r0, [r7, #12]
   122d0:	f7fb f882 	bl	d3d8 <mp_arg_check_num_sig>
}
   122d4:	bf00      	nop
   122d6:	3710      	adds	r7, #16
   122d8:	46bd      	mov	sp, r7
   122da:	bd80      	pop	{r7, pc}

000122dc <range_it_iternext>:
    mp_int_t cur;
    mp_int_t stop;
    mp_int_t step;
} mp_obj_range_it_t;

STATIC mp_obj_t range_it_iternext(mp_obj_t o_in) {
   122dc:	b480      	push	{r7}
   122de:	b085      	sub	sp, #20
   122e0:	af00      	add	r7, sp, #0
   122e2:	6078      	str	r0, [r7, #4]
    mp_obj_range_it_t *o = MP_OBJ_TO_PTR(o_in);
   122e4:	687b      	ldr	r3, [r7, #4]
   122e6:	60fb      	str	r3, [r7, #12]
    if ((o->step > 0 && o->cur < o->stop) || (o->step < 0 && o->cur > o->stop)) {
   122e8:	68fb      	ldr	r3, [r7, #12]
   122ea:	68db      	ldr	r3, [r3, #12]
   122ec:	2b00      	cmp	r3, #0
   122ee:	dd05      	ble.n	122fc <range_it_iternext+0x20>
   122f0:	68fb      	ldr	r3, [r7, #12]
   122f2:	685a      	ldr	r2, [r3, #4]
   122f4:	68fb      	ldr	r3, [r7, #12]
   122f6:	689b      	ldr	r3, [r3, #8]
   122f8:	429a      	cmp	r2, r3
   122fa:	db09      	blt.n	12310 <range_it_iternext+0x34>
   122fc:	68fb      	ldr	r3, [r7, #12]
   122fe:	68db      	ldr	r3, [r3, #12]
   12300:	2b00      	cmp	r3, #0
   12302:	da14      	bge.n	1232e <range_it_iternext+0x52>
   12304:	68fb      	ldr	r3, [r7, #12]
   12306:	685a      	ldr	r2, [r3, #4]
   12308:	68fb      	ldr	r3, [r7, #12]
   1230a:	689b      	ldr	r3, [r3, #8]
   1230c:	429a      	cmp	r2, r3
   1230e:	dd0e      	ble.n	1232e <range_it_iternext+0x52>
        mp_obj_t o_out = MP_OBJ_NEW_SMALL_INT(o->cur);
   12310:	68fb      	ldr	r3, [r7, #12]
   12312:	685b      	ldr	r3, [r3, #4]
   12314:	005b      	lsls	r3, r3, #1
   12316:	f043 0301 	orr.w	r3, r3, #1
   1231a:	60bb      	str	r3, [r7, #8]
        o->cur += o->step;
   1231c:	68fb      	ldr	r3, [r7, #12]
   1231e:	685a      	ldr	r2, [r3, #4]
   12320:	68fb      	ldr	r3, [r7, #12]
   12322:	68db      	ldr	r3, [r3, #12]
   12324:	441a      	add	r2, r3
   12326:	68fb      	ldr	r3, [r7, #12]
   12328:	605a      	str	r2, [r3, #4]
        return o_out;
   1232a:	68bb      	ldr	r3, [r7, #8]
   1232c:	e000      	b.n	12330 <range_it_iternext+0x54>
    } else {
        return MP_OBJ_STOP_ITERATION;
   1232e:	2304      	movs	r3, #4
    }
}
   12330:	4618      	mov	r0, r3
   12332:	3714      	adds	r7, #20
   12334:	46bd      	mov	sp, r7
   12336:	f85d 7b04 	ldr.w	r7, [sp], #4
   1233a:	4770      	bx	lr

0001233c <mp_obj_new_range_iterator>:
    .name = MP_QSTR_iterator,
    .getiter = mp_identity_getiter,
    .iternext = range_it_iternext,
};

STATIC mp_obj_t mp_obj_new_range_iterator(mp_int_t cur, mp_int_t stop, mp_int_t step, mp_obj_iter_buf_t *iter_buf) {
   1233c:	b480      	push	{r7}
   1233e:	b087      	sub	sp, #28
   12340:	af00      	add	r7, sp, #0
   12342:	60f8      	str	r0, [r7, #12]
   12344:	60b9      	str	r1, [r7, #8]
   12346:	607a      	str	r2, [r7, #4]
   12348:	603b      	str	r3, [r7, #0]
    assert(sizeof(mp_obj_range_it_t) <= sizeof(mp_obj_iter_buf_t));
    mp_obj_range_it_t *o = (mp_obj_range_it_t*)iter_buf;
   1234a:	683b      	ldr	r3, [r7, #0]
   1234c:	617b      	str	r3, [r7, #20]
    o->base.type = &range_it_type;
   1234e:	697b      	ldr	r3, [r7, #20]
   12350:	4a08      	ldr	r2, [pc, #32]	; (12374 <mp_obj_new_range_iterator+0x38>)
   12352:	601a      	str	r2, [r3, #0]
    o->cur = cur;
   12354:	697b      	ldr	r3, [r7, #20]
   12356:	68fa      	ldr	r2, [r7, #12]
   12358:	605a      	str	r2, [r3, #4]
    o->stop = stop;
   1235a:	697b      	ldr	r3, [r7, #20]
   1235c:	68ba      	ldr	r2, [r7, #8]
   1235e:	609a      	str	r2, [r3, #8]
    o->step = step;
   12360:	697b      	ldr	r3, [r7, #20]
   12362:	687a      	ldr	r2, [r7, #4]
   12364:	60da      	str	r2, [r3, #12]
    return MP_OBJ_FROM_PTR(o);
   12366:	697b      	ldr	r3, [r7, #20]
}
   12368:	4618      	mov	r0, r3
   1236a:	371c      	adds	r7, #28
   1236c:	46bd      	mov	sp, r7
   1236e:	f85d 7b04 	ldr.w	r7, [sp], #4
   12372:	4770      	bx	lr
   12374:	00025120 	.word	0x00025120

00012378 <range_print>:
    mp_int_t start;
    mp_int_t stop;
    mp_int_t step;
} mp_obj_range_t;

STATIC void range_print(const mp_print_t *print, mp_obj_t self_in, mp_print_kind_t kind) {
   12378:	b580      	push	{r7, lr}
   1237a:	b086      	sub	sp, #24
   1237c:	af00      	add	r7, sp, #0
   1237e:	60f8      	str	r0, [r7, #12]
   12380:	60b9      	str	r1, [r7, #8]
   12382:	607a      	str	r2, [r7, #4]
    (void)kind;
    mp_obj_range_t *self = MP_OBJ_TO_PTR(self_in);
   12384:	68bb      	ldr	r3, [r7, #8]
   12386:	617b      	str	r3, [r7, #20]
    mp_printf(print, "range(" INT_FMT ", " INT_FMT "", self->start, self->stop);
   12388:	697b      	ldr	r3, [r7, #20]
   1238a:	685a      	ldr	r2, [r3, #4]
   1238c:	697b      	ldr	r3, [r7, #20]
   1238e:	689b      	ldr	r3, [r3, #8]
   12390:	490b      	ldr	r1, [pc, #44]	; (123c0 <range_print+0x48>)
   12392:	68f8      	ldr	r0, [r7, #12]
   12394:	f7ef fe6c 	bl	2070 <mp_printf>
    if (self->step == 1) {
   12398:	697b      	ldr	r3, [r7, #20]
   1239a:	68db      	ldr	r3, [r3, #12]
   1239c:	2b01      	cmp	r3, #1
   1239e:	d104      	bne.n	123aa <range_print+0x32>
        mp_print_str(print, ")");
   123a0:	4908      	ldr	r1, [pc, #32]	; (123c4 <range_print+0x4c>)
   123a2:	68f8      	ldr	r0, [r7, #12]
   123a4:	f7ef fb52 	bl	1a4c <mp_print_str>
    } else {
        mp_printf(print, ", " INT_FMT ")", self->step);
    }
}
   123a8:	e006      	b.n	123b8 <range_print+0x40>
        mp_printf(print, ", " INT_FMT ")", self->step);
   123aa:	697b      	ldr	r3, [r7, #20]
   123ac:	68db      	ldr	r3, [r3, #12]
   123ae:	461a      	mov	r2, r3
   123b0:	4905      	ldr	r1, [pc, #20]	; (123c8 <range_print+0x50>)
   123b2:	68f8      	ldr	r0, [r7, #12]
   123b4:	f7ef fe5c 	bl	2070 <mp_printf>
}
   123b8:	bf00      	nop
   123ba:	3718      	adds	r7, #24
   123bc:	46bd      	mov	sp, r7
   123be:	bd80      	pop	{r7, pc}
   123c0:	0002515c 	.word	0x0002515c
   123c4:	0002516c 	.word	0x0002516c
   123c8:	00025170 	.word	0x00025170

000123cc <range_make_new>:

STATIC mp_obj_t range_make_new(const mp_obj_type_t *type, size_t n_args, size_t n_kw, const mp_obj_t *args) {
   123cc:	b580      	push	{r7, lr}
   123ce:	b088      	sub	sp, #32
   123d0:	af02      	add	r7, sp, #8
   123d2:	60f8      	str	r0, [r7, #12]
   123d4:	60b9      	str	r1, [r7, #8]
   123d6:	607a      	str	r2, [r7, #4]
   123d8:	603b      	str	r3, [r7, #0]
    mp_arg_check_num(n_args, n_kw, 1, 3, false);
   123da:	2300      	movs	r3, #0
   123dc:	9300      	str	r3, [sp, #0]
   123de:	2303      	movs	r3, #3
   123e0:	2201      	movs	r2, #1
   123e2:	6879      	ldr	r1, [r7, #4]
   123e4:	68b8      	ldr	r0, [r7, #8]
   123e6:	f7ff ff5d 	bl	122a4 <mp_arg_check_num>

    mp_obj_range_t *o = m_new_obj(mp_obj_range_t);
   123ea:	2010      	movs	r0, #16
   123ec:	f7ed ff96 	bl	31c <m_malloc>
   123f0:	6178      	str	r0, [r7, #20]
    o->base.type = type;
   123f2:	697b      	ldr	r3, [r7, #20]
   123f4:	68fa      	ldr	r2, [r7, #12]
   123f6:	601a      	str	r2, [r3, #0]
    o->start = 0;
   123f8:	697b      	ldr	r3, [r7, #20]
   123fa:	2200      	movs	r2, #0
   123fc:	605a      	str	r2, [r3, #4]
    o->step = 1;
   123fe:	697b      	ldr	r3, [r7, #20]
   12400:	2201      	movs	r2, #1
   12402:	60da      	str	r2, [r3, #12]

    if (n_args == 1) {
   12404:	68bb      	ldr	r3, [r7, #8]
   12406:	2b01      	cmp	r3, #1
   12408:	d108      	bne.n	1241c <range_make_new+0x50>
        o->stop = mp_obj_get_int(args[0]);
   1240a:	683b      	ldr	r3, [r7, #0]
   1240c:	681b      	ldr	r3, [r3, #0]
   1240e:	4618      	mov	r0, r3
   12410:	f7fb fe00 	bl	e014 <mp_obj_get_int>
   12414:	4602      	mov	r2, r0
   12416:	697b      	ldr	r3, [r7, #20]
   12418:	609a      	str	r2, [r3, #8]
   1241a:	e023      	b.n	12464 <range_make_new+0x98>
    } else {
        o->start = mp_obj_get_int(args[0]);
   1241c:	683b      	ldr	r3, [r7, #0]
   1241e:	681b      	ldr	r3, [r3, #0]
   12420:	4618      	mov	r0, r3
   12422:	f7fb fdf7 	bl	e014 <mp_obj_get_int>
   12426:	4602      	mov	r2, r0
   12428:	697b      	ldr	r3, [r7, #20]
   1242a:	605a      	str	r2, [r3, #4]
        o->stop = mp_obj_get_int(args[1]);
   1242c:	683b      	ldr	r3, [r7, #0]
   1242e:	3304      	adds	r3, #4
   12430:	681b      	ldr	r3, [r3, #0]
   12432:	4618      	mov	r0, r3
   12434:	f7fb fdee 	bl	e014 <mp_obj_get_int>
   12438:	4602      	mov	r2, r0
   1243a:	697b      	ldr	r3, [r7, #20]
   1243c:	609a      	str	r2, [r3, #8]
        if (n_args == 3) {
   1243e:	68bb      	ldr	r3, [r7, #8]
   12440:	2b03      	cmp	r3, #3
   12442:	d10f      	bne.n	12464 <range_make_new+0x98>
            o->step = mp_obj_get_int(args[2]);
   12444:	683b      	ldr	r3, [r7, #0]
   12446:	3308      	adds	r3, #8
   12448:	681b      	ldr	r3, [r3, #0]
   1244a:	4618      	mov	r0, r3
   1244c:	f7fb fde2 	bl	e014 <mp_obj_get_int>
   12450:	4602      	mov	r2, r0
   12452:	697b      	ldr	r3, [r7, #20]
   12454:	60da      	str	r2, [r3, #12]
            if (o->step == 0) {
   12456:	697b      	ldr	r3, [r7, #20]
   12458:	68db      	ldr	r3, [r3, #12]
   1245a:	2b00      	cmp	r3, #0
   1245c:	d102      	bne.n	12464 <range_make_new+0x98>
                mp_raise_ValueError("zero step");
   1245e:	4804      	ldr	r0, [pc, #16]	; (12470 <range_make_new+0xa4>)
   12460:	f7fa ff89 	bl	d376 <mp_raise_ValueError>
            }
        }
    }

    return MP_OBJ_FROM_PTR(o);
   12464:	697b      	ldr	r3, [r7, #20]
}
   12466:	4618      	mov	r0, r3
   12468:	3718      	adds	r7, #24
   1246a:	46bd      	mov	sp, r7
   1246c:	bd80      	pop	{r7, pc}
   1246e:	bf00      	nop
   12470:	00025178 	.word	0x00025178

00012474 <range_len>:

STATIC mp_int_t range_len(mp_obj_range_t *self) {
   12474:	b480      	push	{r7}
   12476:	b085      	sub	sp, #20
   12478:	af00      	add	r7, sp, #0
   1247a:	6078      	str	r0, [r7, #4]
    // When computing length, need to take into account step!=1 and step<0.
    mp_int_t len = self->stop - self->start + self->step;
   1247c:	687b      	ldr	r3, [r7, #4]
   1247e:	689a      	ldr	r2, [r3, #8]
   12480:	687b      	ldr	r3, [r7, #4]
   12482:	685b      	ldr	r3, [r3, #4]
   12484:	1ad2      	subs	r2, r2, r3
   12486:	687b      	ldr	r3, [r7, #4]
   12488:	68db      	ldr	r3, [r3, #12]
   1248a:	4413      	add	r3, r2
   1248c:	60fb      	str	r3, [r7, #12]
    if (self->step > 0) {
   1248e:	687b      	ldr	r3, [r7, #4]
   12490:	68db      	ldr	r3, [r3, #12]
   12492:	2b00      	cmp	r3, #0
   12494:	dd03      	ble.n	1249e <range_len+0x2a>
        len -= 1;
   12496:	68fb      	ldr	r3, [r7, #12]
   12498:	3b01      	subs	r3, #1
   1249a:	60fb      	str	r3, [r7, #12]
   1249c:	e002      	b.n	124a4 <range_len+0x30>
    } else {
        len += 1;
   1249e:	68fb      	ldr	r3, [r7, #12]
   124a0:	3301      	adds	r3, #1
   124a2:	60fb      	str	r3, [r7, #12]
    }
    len = len / self->step;
   124a4:	687b      	ldr	r3, [r7, #4]
   124a6:	68db      	ldr	r3, [r3, #12]
   124a8:	68fa      	ldr	r2, [r7, #12]
   124aa:	fb92 f3f3 	sdiv	r3, r2, r3
   124ae:	60fb      	str	r3, [r7, #12]
    if (len < 0) {
   124b0:	68fb      	ldr	r3, [r7, #12]
   124b2:	2b00      	cmp	r3, #0
   124b4:	da01      	bge.n	124ba <range_len+0x46>
        len = 0;
   124b6:	2300      	movs	r3, #0
   124b8:	60fb      	str	r3, [r7, #12]
    }
    return len;
   124ba:	68fb      	ldr	r3, [r7, #12]
}
   124bc:	4618      	mov	r0, r3
   124be:	3714      	adds	r7, #20
   124c0:	46bd      	mov	sp, r7
   124c2:	f85d 7b04 	ldr.w	r7, [sp], #4
   124c6:	4770      	bx	lr

000124c8 <range_unary_op>:

STATIC mp_obj_t range_unary_op(mp_unary_op_t op, mp_obj_t self_in) {
   124c8:	b580      	push	{r7, lr}
   124ca:	b084      	sub	sp, #16
   124cc:	af00      	add	r7, sp, #0
   124ce:	6078      	str	r0, [r7, #4]
   124d0:	6039      	str	r1, [r7, #0]
    mp_obj_range_t *self = MP_OBJ_TO_PTR(self_in);
   124d2:	683b      	ldr	r3, [r7, #0]
   124d4:	60fb      	str	r3, [r7, #12]
    mp_int_t len = range_len(self);
   124d6:	68f8      	ldr	r0, [r7, #12]
   124d8:	f7ff ffcc 	bl	12474 <range_len>
   124dc:	60b8      	str	r0, [r7, #8]
    switch (op) {
   124de:	687b      	ldr	r3, [r7, #4]
   124e0:	2b04      	cmp	r3, #4
   124e2:	d002      	beq.n	124ea <range_unary_op+0x22>
   124e4:	2b05      	cmp	r3, #5
   124e6:	d00b      	beq.n	12500 <range_unary_op+0x38>
   124e8:	e00f      	b.n	1250a <range_unary_op+0x42>
        case MP_UNARY_OP_BOOL: return mp_obj_new_bool(len > 0);
   124ea:	68bb      	ldr	r3, [r7, #8]
   124ec:	2b00      	cmp	r3, #0
   124ee:	bfcc      	ite	gt
   124f0:	2301      	movgt	r3, #1
   124f2:	2300      	movle	r3, #0
   124f4:	b2db      	uxtb	r3, r3
   124f6:	4618      	mov	r0, r3
   124f8:	f7ff fec0 	bl	1227c <mp_obj_new_bool>
   124fc:	4603      	mov	r3, r0
   124fe:	e005      	b.n	1250c <range_unary_op+0x44>
        case MP_UNARY_OP_LEN: return MP_OBJ_NEW_SMALL_INT(len);
   12500:	68bb      	ldr	r3, [r7, #8]
   12502:	005b      	lsls	r3, r3, #1
   12504:	f043 0301 	orr.w	r3, r3, #1
   12508:	e000      	b.n	1250c <range_unary_op+0x44>
        default: return MP_OBJ_NULL; // op not supported
   1250a:	2300      	movs	r3, #0
    }
}
   1250c:	4618      	mov	r0, r3
   1250e:	3710      	adds	r7, #16
   12510:	46bd      	mov	sp, r7
   12512:	bd80      	pop	{r7, pc}

00012514 <range_subscr>:
                && (lhs_len == 1 || lhs->step == rhs->step)))
    );
}
#endif

STATIC mp_obj_t range_subscr(mp_obj_t self_in, mp_obj_t index, mp_obj_t value) {
   12514:	b580      	push	{r7, lr}
   12516:	b088      	sub	sp, #32
   12518:	af00      	add	r7, sp, #0
   1251a:	60f8      	str	r0, [r7, #12]
   1251c:	60b9      	str	r1, [r7, #8]
   1251e:	607a      	str	r2, [r7, #4]
    if (value == MP_OBJ_SENTINEL) {
   12520:	687b      	ldr	r3, [r7, #4]
   12522:	2b08      	cmp	r3, #8
   12524:	d11b      	bne.n	1255e <range_subscr+0x4a>
        // load
        mp_obj_range_t *self = MP_OBJ_TO_PTR(self_in);
   12526:	68fb      	ldr	r3, [r7, #12]
   12528:	61fb      	str	r3, [r7, #28]
        mp_int_t len = range_len(self);
   1252a:	69f8      	ldr	r0, [r7, #28]
   1252c:	f7ff ffa2 	bl	12474 <range_len>
   12530:	61b8      	str	r0, [r7, #24]
                o->stop -= self->step;
            }
            return MP_OBJ_FROM_PTR(o);
        }
#endif
        size_t index_val = mp_get_index(self->base.type, len, index, false);
   12532:	69fb      	ldr	r3, [r7, #28]
   12534:	6818      	ldr	r0, [r3, #0]
   12536:	69b9      	ldr	r1, [r7, #24]
   12538:	2300      	movs	r3, #0
   1253a:	68ba      	ldr	r2, [r7, #8]
   1253c:	f7fb fe5a 	bl	e1f4 <mp_get_index>
   12540:	6178      	str	r0, [r7, #20]
        return MP_OBJ_NEW_SMALL_INT(self->start + index_val * self->step);
   12542:	69fb      	ldr	r3, [r7, #28]
   12544:	685b      	ldr	r3, [r3, #4]
   12546:	461a      	mov	r2, r3
   12548:	69fb      	ldr	r3, [r7, #28]
   1254a:	68db      	ldr	r3, [r3, #12]
   1254c:	4619      	mov	r1, r3
   1254e:	697b      	ldr	r3, [r7, #20]
   12550:	fb03 f301 	mul.w	r3, r3, r1
   12554:	4413      	add	r3, r2
   12556:	005b      	lsls	r3, r3, #1
   12558:	f043 0301 	orr.w	r3, r3, #1
   1255c:	e000      	b.n	12560 <range_subscr+0x4c>
    } else {
        return MP_OBJ_NULL; // op not supported
   1255e:	2300      	movs	r3, #0
    }
}
   12560:	4618      	mov	r0, r3
   12562:	3720      	adds	r7, #32
   12564:	46bd      	mov	sp, r7
   12566:	bd80      	pop	{r7, pc}

00012568 <range_getiter>:

STATIC mp_obj_t range_getiter(mp_obj_t o_in, mp_obj_iter_buf_t *iter_buf) {
   12568:	b580      	push	{r7, lr}
   1256a:	b084      	sub	sp, #16
   1256c:	af00      	add	r7, sp, #0
   1256e:	6078      	str	r0, [r7, #4]
   12570:	6039      	str	r1, [r7, #0]
    mp_obj_range_t *o = MP_OBJ_TO_PTR(o_in);
   12572:	687b      	ldr	r3, [r7, #4]
   12574:	60fb      	str	r3, [r7, #12]
    return mp_obj_new_range_iterator(o->start, o->stop, o->step, iter_buf);
   12576:	68fb      	ldr	r3, [r7, #12]
   12578:	6858      	ldr	r0, [r3, #4]
   1257a:	68fb      	ldr	r3, [r7, #12]
   1257c:	6899      	ldr	r1, [r3, #8]
   1257e:	68fb      	ldr	r3, [r7, #12]
   12580:	68da      	ldr	r2, [r3, #12]
   12582:	683b      	ldr	r3, [r7, #0]
   12584:	f7ff feda 	bl	1233c <mp_obj_new_range_iterator>
   12588:	4603      	mov	r3, r0
}
   1258a:	4618      	mov	r0, r3
   1258c:	3710      	adds	r7, #16
   1258e:	46bd      	mov	sp, r7
   12590:	bd80      	pop	{r7, pc}

00012592 <range_attr>:


#if MICROPY_PY_BUILTINS_RANGE_ATTRS
STATIC void range_attr(mp_obj_t o_in, qstr attr, mp_obj_t *dest) {
   12592:	b580      	push	{r7, lr}
   12594:	b086      	sub	sp, #24
   12596:	af00      	add	r7, sp, #0
   12598:	60f8      	str	r0, [r7, #12]
   1259a:	60b9      	str	r1, [r7, #8]
   1259c:	607a      	str	r2, [r7, #4]
    if (dest[0] != MP_OBJ_NULL) {
   1259e:	687b      	ldr	r3, [r7, #4]
   125a0:	681b      	ldr	r3, [r3, #0]
   125a2:	2b00      	cmp	r3, #0
   125a4:	d12a      	bne.n	125fc <range_attr+0x6a>
        // not load attribute
        return;
    }
    mp_obj_range_t *o = MP_OBJ_TO_PTR(o_in);
   125a6:	68fb      	ldr	r3, [r7, #12]
   125a8:	617b      	str	r3, [r7, #20]
    if (attr == MP_QSTR_start) {
   125aa:	68bb      	ldr	r3, [r7, #8]
   125ac:	f240 125f 	movw	r2, #351	; 0x15f
   125b0:	4293      	cmp	r3, r2
   125b2:	d108      	bne.n	125c6 <range_attr+0x34>
        dest[0] = mp_obj_new_int(o->start);
   125b4:	697b      	ldr	r3, [r7, #20]
   125b6:	685b      	ldr	r3, [r3, #4]
   125b8:	4618      	mov	r0, r3
   125ba:	f7fe fbf3 	bl	10da4 <mp_obj_new_int>
   125be:	4602      	mov	r2, r0
   125c0:	687b      	ldr	r3, [r7, #4]
   125c2:	601a      	str	r2, [r3, #0]
   125c4:	e01b      	b.n	125fe <range_attr+0x6c>
    } else if (attr == MP_QSTR_stop) {
   125c6:	68bb      	ldr	r3, [r7, #8]
   125c8:	f240 1263 	movw	r2, #355	; 0x163
   125cc:	4293      	cmp	r3, r2
   125ce:	d108      	bne.n	125e2 <range_attr+0x50>
        dest[0] = mp_obj_new_int(o->stop);
   125d0:	697b      	ldr	r3, [r7, #20]
   125d2:	689b      	ldr	r3, [r3, #8]
   125d4:	4618      	mov	r0, r3
   125d6:	f7fe fbe5 	bl	10da4 <mp_obj_new_int>
   125da:	4602      	mov	r2, r0
   125dc:	687b      	ldr	r3, [r7, #4]
   125de:	601a      	str	r2, [r3, #0]
   125e0:	e00d      	b.n	125fe <range_attr+0x6c>
    } else if (attr == MP_QSTR_step) {
   125e2:	68bb      	ldr	r3, [r7, #8]
   125e4:	f5b3 7fb1 	cmp.w	r3, #354	; 0x162
   125e8:	d109      	bne.n	125fe <range_attr+0x6c>
        dest[0] = mp_obj_new_int(o->step);
   125ea:	697b      	ldr	r3, [r7, #20]
   125ec:	68db      	ldr	r3, [r3, #12]
   125ee:	4618      	mov	r0, r3
   125f0:	f7fe fbd8 	bl	10da4 <mp_obj_new_int>
   125f4:	4602      	mov	r2, r0
   125f6:	687b      	ldr	r3, [r7, #4]
   125f8:	601a      	str	r2, [r3, #0]
   125fa:	e000      	b.n	125fe <range_attr+0x6c>
        return;
   125fc:	bf00      	nop
    }
}
   125fe:	3718      	adds	r7, #24
   12600:	46bd      	mov	sp, r7
   12602:	bd80      	pop	{r7, pc}

00012604 <singleton_print>:
typedef struct _mp_obj_singleton_t {
    mp_obj_base_t base;
    qstr name;
} mp_obj_singleton_t;

STATIC void singleton_print(const mp_print_t *print, mp_obj_t self_in, mp_print_kind_t kind) {
   12604:	b580      	push	{r7, lr}
   12606:	b086      	sub	sp, #24
   12608:	af00      	add	r7, sp, #0
   1260a:	60f8      	str	r0, [r7, #12]
   1260c:	60b9      	str	r1, [r7, #8]
   1260e:	607a      	str	r2, [r7, #4]
    (void)kind;
    mp_obj_singleton_t *self = MP_OBJ_TO_PTR(self_in);
   12610:	68bb      	ldr	r3, [r7, #8]
   12612:	617b      	str	r3, [r7, #20]
    mp_printf(print, "%q", self->name);
   12614:	697b      	ldr	r3, [r7, #20]
   12616:	685b      	ldr	r3, [r3, #4]
   12618:	461a      	mov	r2, r3
   1261a:	4904      	ldr	r1, [pc, #16]	; (1262c <singleton_print+0x28>)
   1261c:	68f8      	ldr	r0, [r7, #12]
   1261e:	f7ef fd27 	bl	2070 <mp_printf>
}
   12622:	bf00      	nop
   12624:	3718      	adds	r7, #24
   12626:	46bd      	mov	sp, r7
   12628:	bd80      	pop	{r7, pc}
   1262a:	bf00      	nop
   1262c:	000251c0 	.word	0x000251c0

00012630 <utf8_next_char>:
static inline const byte *utf8_next_char(const byte *s) { return s + 1; }
   12630:	b480      	push	{r7}
   12632:	b083      	sub	sp, #12
   12634:	af00      	add	r7, sp, #0
   12636:	6078      	str	r0, [r7, #4]
   12638:	687b      	ldr	r3, [r7, #4]
   1263a:	3301      	adds	r3, #1
   1263c:	4618      	mov	r0, r3
   1263e:	370c      	adds	r7, #12
   12640:	46bd      	mov	sp, r7
   12642:	f85d 7b04 	ldr.w	r7, [sp], #4
   12646:	4770      	bx	lr

00012648 <utf8_charlen>:
static inline size_t utf8_charlen(const byte *str, size_t len) { (void)str; return len; }
   12648:	b480      	push	{r7}
   1264a:	b083      	sub	sp, #12
   1264c:	af00      	add	r7, sp, #0
   1264e:	6078      	str	r0, [r7, #4]
   12650:	6039      	str	r1, [r7, #0]
   12652:	683b      	ldr	r3, [r7, #0]
   12654:	4618      	mov	r0, r3
   12656:	370c      	adds	r7, #12
   12658:	46bd      	mov	sp, r7
   1265a:	f85d 7b04 	ldr.w	r7, [sp], #4
   1265e:	4770      	bx	lr

00012660 <MP_OBJ_IS_SMALL_INT>:
    { return ((((mp_int_t)(o)) & 1) != 0); }
   12660:	b480      	push	{r7}
   12662:	b083      	sub	sp, #12
   12664:	af00      	add	r7, sp, #0
   12666:	6078      	str	r0, [r7, #4]
   12668:	687b      	ldr	r3, [r7, #4]
   1266a:	f003 0301 	and.w	r3, r3, #1
   1266e:	2b00      	cmp	r3, #0
   12670:	bf14      	ite	ne
   12672:	2301      	movne	r3, #1
   12674:	2300      	moveq	r3, #0
   12676:	b2db      	uxtb	r3, r3
   12678:	4618      	mov	r0, r3
   1267a:	370c      	adds	r7, #12
   1267c:	46bd      	mov	sp, r7
   1267e:	f85d 7b04 	ldr.w	r7, [sp], #4
   12682:	4770      	bx	lr

00012684 <MP_OBJ_IS_QSTR>:
    { return ((((mp_int_t)(o)) & 3) == 2); }
   12684:	b480      	push	{r7}
   12686:	b083      	sub	sp, #12
   12688:	af00      	add	r7, sp, #0
   1268a:	6078      	str	r0, [r7, #4]
   1268c:	687b      	ldr	r3, [r7, #4]
   1268e:	f003 0303 	and.w	r3, r3, #3
   12692:	2b02      	cmp	r3, #2
   12694:	bf0c      	ite	eq
   12696:	2301      	moveq	r3, #1
   12698:	2300      	movne	r3, #0
   1269a:	b2db      	uxtb	r3, r3
   1269c:	4618      	mov	r0, r3
   1269e:	370c      	adds	r7, #12
   126a0:	46bd      	mov	sp, r7
   126a2:	f85d 7b04 	ldr.w	r7, [sp], #4
   126a6:	4770      	bx	lr

000126a8 <MP_OBJ_IS_OBJ>:
    { return ((((mp_int_t)(o)) & 3) == 0); }
   126a8:	b480      	push	{r7}
   126aa:	b083      	sub	sp, #12
   126ac:	af00      	add	r7, sp, #0
   126ae:	6078      	str	r0, [r7, #4]
   126b0:	687b      	ldr	r3, [r7, #4]
   126b2:	f003 0303 	and.w	r3, r3, #3
   126b6:	2b00      	cmp	r3, #0
   126b8:	bf0c      	ite	eq
   126ba:	2301      	moveq	r3, #1
   126bc:	2300      	movne	r3, #0
   126be:	b2db      	uxtb	r3, r3
   126c0:	4618      	mov	r0, r3
   126c2:	370c      	adds	r7, #12
   126c4:	46bd      	mov	sp, r7
   126c6:	f85d 7b04 	ldr.w	r7, [sp], #4
   126ca:	4770      	bx	lr

000126cc <mp_obj_new_bool>:
static inline mp_obj_t mp_obj_new_bool(mp_int_t x) { return x ? mp_const_true : mp_const_false; }
   126cc:	b480      	push	{r7}
   126ce:	b083      	sub	sp, #12
   126d0:	af00      	add	r7, sp, #0
   126d2:	6078      	str	r0, [r7, #4]
   126d4:	687b      	ldr	r3, [r7, #4]
   126d6:	2b00      	cmp	r3, #0
   126d8:	d001      	beq.n	126de <mp_obj_new_bool+0x12>
   126da:	4b04      	ldr	r3, [pc, #16]	; (126ec <mp_obj_new_bool+0x20>)
   126dc:	e000      	b.n	126e0 <mp_obj_new_bool+0x14>
   126de:	4b04      	ldr	r3, [pc, #16]	; (126f0 <mp_obj_new_bool+0x24>)
   126e0:	4618      	mov	r0, r3
   126e2:	370c      	adds	r7, #12
   126e4:	46bd      	mov	sp, r7
   126e6:	f85d 7b04 	ldr.w	r7, [sp], #4
   126ea:	4770      	bx	lr
   126ec:	00023868 	.word	0x00023868
   126f0:	00023860 	.word	0x00023860

000126f4 <mp_arg_check_num>:
static inline void mp_arg_check_num(size_t n_args, size_t n_kw, size_t n_args_min, size_t n_args_max, bool takes_kw) {
   126f4:	b580      	push	{r7, lr}
   126f6:	b084      	sub	sp, #16
   126f8:	af00      	add	r7, sp, #0
   126fa:	60f8      	str	r0, [r7, #12]
   126fc:	60b9      	str	r1, [r7, #8]
   126fe:	607a      	str	r2, [r7, #4]
   12700:	603b      	str	r3, [r7, #0]
    mp_arg_check_num_sig(n_args, n_kw, (uint32_t)MP_OBJ_FUN_MAKE_SIG(n_args_min, n_args_max, takes_kw));
   12702:	687b      	ldr	r3, [r7, #4]
   12704:	045a      	lsls	r2, r3, #17
   12706:	683b      	ldr	r3, [r7, #0]
   12708:	005b      	lsls	r3, r3, #1
   1270a:	431a      	orrs	r2, r3
   1270c:	7e3b      	ldrb	r3, [r7, #24]
   1270e:	2b00      	cmp	r3, #0
   12710:	d001      	beq.n	12716 <mp_arg_check_num+0x22>
   12712:	2301      	movs	r3, #1
   12714:	e000      	b.n	12718 <mp_arg_check_num+0x24>
   12716:	2300      	movs	r3, #0
   12718:	4313      	orrs	r3, r2
   1271a:	461a      	mov	r2, r3
   1271c:	68b9      	ldr	r1, [r7, #8]
   1271e:	68f8      	ldr	r0, [r7, #12]
   12720:	f7fa fe5a 	bl	d3d8 <mp_arg_check_num_sig>
}
   12724:	bf00      	nop
   12726:	3710      	adds	r7, #16
   12728:	46bd      	mov	sp, r7
   1272a:	bd80      	pop	{r7, pc}

0001272c <mp_str_print_quoted>:
STATIC NORETURN void bad_implicit_conversion(mp_obj_t self_in);

/******************************************************************************/
/* str                                                                        */

void mp_str_print_quoted(const mp_print_t *print, const byte *str_data, size_t str_len, bool is_bytes) {
   1272c:	b580      	push	{r7, lr}
   1272e:	b08a      	sub	sp, #40	; 0x28
   12730:	af00      	add	r7, sp, #0
   12732:	60f8      	str	r0, [r7, #12]
   12734:	60b9      	str	r1, [r7, #8]
   12736:	607a      	str	r2, [r7, #4]
   12738:	70fb      	strb	r3, [r7, #3]
    // this escapes characters, but it will be very slow to print (calling print many times)
    bool has_single_quote = false;
   1273a:	2300      	movs	r3, #0
   1273c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    bool has_double_quote = false;
   12740:	2300      	movs	r3, #0
   12742:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    for (const byte *s = str_data, *top = str_data + str_len; !has_double_quote && s < top; s++) {
   12746:	68bb      	ldr	r3, [r7, #8]
   12748:	623b      	str	r3, [r7, #32]
   1274a:	68ba      	ldr	r2, [r7, #8]
   1274c:	687b      	ldr	r3, [r7, #4]
   1274e:	4413      	add	r3, r2
   12750:	617b      	str	r3, [r7, #20]
   12752:	e011      	b.n	12778 <mp_str_print_quoted+0x4c>
        if (*s == '\'') {
   12754:	6a3b      	ldr	r3, [r7, #32]
   12756:	781b      	ldrb	r3, [r3, #0]
   12758:	2b27      	cmp	r3, #39	; 0x27
   1275a:	d103      	bne.n	12764 <mp_str_print_quoted+0x38>
            has_single_quote = true;
   1275c:	2301      	movs	r3, #1
   1275e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
   12762:	e006      	b.n	12772 <mp_str_print_quoted+0x46>
        } else if (*s == '"') {
   12764:	6a3b      	ldr	r3, [r7, #32]
   12766:	781b      	ldrb	r3, [r3, #0]
   12768:	2b22      	cmp	r3, #34	; 0x22
   1276a:	d102      	bne.n	12772 <mp_str_print_quoted+0x46>
            has_double_quote = true;
   1276c:	2301      	movs	r3, #1
   1276e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    for (const byte *s = str_data, *top = str_data + str_len; !has_double_quote && s < top; s++) {
   12772:	6a3b      	ldr	r3, [r7, #32]
   12774:	3301      	adds	r3, #1
   12776:	623b      	str	r3, [r7, #32]
   12778:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
   1277c:	f083 0301 	eor.w	r3, r3, #1
   12780:	b2db      	uxtb	r3, r3
   12782:	2b00      	cmp	r3, #0
   12784:	d003      	beq.n	1278e <mp_str_print_quoted+0x62>
   12786:	6a3a      	ldr	r2, [r7, #32]
   12788:	697b      	ldr	r3, [r7, #20]
   1278a:	429a      	cmp	r2, r3
   1278c:	d3e2      	bcc.n	12754 <mp_str_print_quoted+0x28>
        }
    }
    int quote_char = '\'';
   1278e:	2327      	movs	r3, #39	; 0x27
   12790:	61fb      	str	r3, [r7, #28]
    if (has_single_quote && !has_double_quote) {
   12792:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   12796:	2b00      	cmp	r3, #0
   12798:	d008      	beq.n	127ac <mp_str_print_quoted+0x80>
   1279a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
   1279e:	f083 0301 	eor.w	r3, r3, #1
   127a2:	b2db      	uxtb	r3, r3
   127a4:	2b00      	cmp	r3, #0
   127a6:	d001      	beq.n	127ac <mp_str_print_quoted+0x80>
        quote_char = '"';
   127a8:	2322      	movs	r3, #34	; 0x22
   127aa:	61fb      	str	r3, [r7, #28]
    }
    mp_printf(print, "%c", quote_char);
   127ac:	69fa      	ldr	r2, [r7, #28]
   127ae:	4936      	ldr	r1, [pc, #216]	; (12888 <mp_str_print_quoted+0x15c>)
   127b0:	68f8      	ldr	r0, [r7, #12]
   127b2:	f7ef fc5d 	bl	2070 <mp_printf>
    for (const byte *s = str_data, *top = str_data + str_len; s < top; s++) {
   127b6:	68bb      	ldr	r3, [r7, #8]
   127b8:	61bb      	str	r3, [r7, #24]
   127ba:	68ba      	ldr	r2, [r7, #8]
   127bc:	687b      	ldr	r3, [r7, #4]
   127be:	4413      	add	r3, r2
   127c0:	613b      	str	r3, [r7, #16]
   127c2:	e054      	b.n	1286e <mp_str_print_quoted+0x142>
        if (*s == quote_char) {
   127c4:	69bb      	ldr	r3, [r7, #24]
   127c6:	781b      	ldrb	r3, [r3, #0]
   127c8:	461a      	mov	r2, r3
   127ca:	69fb      	ldr	r3, [r7, #28]
   127cc:	429a      	cmp	r2, r3
   127ce:	d105      	bne.n	127dc <mp_str_print_quoted+0xb0>
            mp_printf(print, "\\%c", quote_char);
   127d0:	69fa      	ldr	r2, [r7, #28]
   127d2:	492e      	ldr	r1, [pc, #184]	; (1288c <mp_str_print_quoted+0x160>)
   127d4:	68f8      	ldr	r0, [r7, #12]
   127d6:	f7ef fc4b 	bl	2070 <mp_printf>
   127da:	e045      	b.n	12868 <mp_str_print_quoted+0x13c>
        } else if (*s == '\\') {
   127dc:	69bb      	ldr	r3, [r7, #24]
   127de:	781b      	ldrb	r3, [r3, #0]
   127e0:	2b5c      	cmp	r3, #92	; 0x5c
   127e2:	d104      	bne.n	127ee <mp_str_print_quoted+0xc2>
            mp_print_str(print, "\\\\");
   127e4:	492a      	ldr	r1, [pc, #168]	; (12890 <mp_str_print_quoted+0x164>)
   127e6:	68f8      	ldr	r0, [r7, #12]
   127e8:	f7ef f930 	bl	1a4c <mp_print_str>
   127ec:	e03c      	b.n	12868 <mp_str_print_quoted+0x13c>
        } else if (*s >= 0x20 && *s != 0x7f && (!is_bytes || *s < 0x80)) {
   127ee:	69bb      	ldr	r3, [r7, #24]
   127f0:	781b      	ldrb	r3, [r3, #0]
   127f2:	2b1f      	cmp	r3, #31
   127f4:	d916      	bls.n	12824 <mp_str_print_quoted+0xf8>
   127f6:	69bb      	ldr	r3, [r7, #24]
   127f8:	781b      	ldrb	r3, [r3, #0]
   127fa:	2b7f      	cmp	r3, #127	; 0x7f
   127fc:	d012      	beq.n	12824 <mp_str_print_quoted+0xf8>
   127fe:	78fb      	ldrb	r3, [r7, #3]
   12800:	f083 0301 	eor.w	r3, r3, #1
   12804:	b2db      	uxtb	r3, r3
   12806:	2b00      	cmp	r3, #0
   12808:	d104      	bne.n	12814 <mp_str_print_quoted+0xe8>
   1280a:	69bb      	ldr	r3, [r7, #24]
   1280c:	781b      	ldrb	r3, [r3, #0]
   1280e:	b25b      	sxtb	r3, r3
   12810:	2b00      	cmp	r3, #0
   12812:	db07      	blt.n	12824 <mp_str_print_quoted+0xf8>
            // In strings, anything which is not ascii control character
            // is printed as is, this includes characters in range 0x80-0xff
            // (which can be non-Latin letters, etc.)
            mp_printf(print, "%c", *s);
   12814:	69bb      	ldr	r3, [r7, #24]
   12816:	781b      	ldrb	r3, [r3, #0]
   12818:	461a      	mov	r2, r3
   1281a:	491b      	ldr	r1, [pc, #108]	; (12888 <mp_str_print_quoted+0x15c>)
   1281c:	68f8      	ldr	r0, [r7, #12]
   1281e:	f7ef fc27 	bl	2070 <mp_printf>
   12822:	e021      	b.n	12868 <mp_str_print_quoted+0x13c>
        } else if (*s == '\n') {
   12824:	69bb      	ldr	r3, [r7, #24]
   12826:	781b      	ldrb	r3, [r3, #0]
   12828:	2b0a      	cmp	r3, #10
   1282a:	d104      	bne.n	12836 <mp_str_print_quoted+0x10a>
            mp_print_str(print, "\\n");
   1282c:	4919      	ldr	r1, [pc, #100]	; (12894 <mp_str_print_quoted+0x168>)
   1282e:	68f8      	ldr	r0, [r7, #12]
   12830:	f7ef f90c 	bl	1a4c <mp_print_str>
   12834:	e018      	b.n	12868 <mp_str_print_quoted+0x13c>
        } else if (*s == '\r') {
   12836:	69bb      	ldr	r3, [r7, #24]
   12838:	781b      	ldrb	r3, [r3, #0]
   1283a:	2b0d      	cmp	r3, #13
   1283c:	d104      	bne.n	12848 <mp_str_print_quoted+0x11c>
            mp_print_str(print, "\\r");
   1283e:	4916      	ldr	r1, [pc, #88]	; (12898 <mp_str_print_quoted+0x16c>)
   12840:	68f8      	ldr	r0, [r7, #12]
   12842:	f7ef f903 	bl	1a4c <mp_print_str>
   12846:	e00f      	b.n	12868 <mp_str_print_quoted+0x13c>
        } else if (*s == '\t') {
   12848:	69bb      	ldr	r3, [r7, #24]
   1284a:	781b      	ldrb	r3, [r3, #0]
   1284c:	2b09      	cmp	r3, #9
   1284e:	d104      	bne.n	1285a <mp_str_print_quoted+0x12e>
            mp_print_str(print, "\\t");
   12850:	4912      	ldr	r1, [pc, #72]	; (1289c <mp_str_print_quoted+0x170>)
   12852:	68f8      	ldr	r0, [r7, #12]
   12854:	f7ef f8fa 	bl	1a4c <mp_print_str>
   12858:	e006      	b.n	12868 <mp_str_print_quoted+0x13c>
        } else {
            mp_printf(print, "\\x%02x", *s);
   1285a:	69bb      	ldr	r3, [r7, #24]
   1285c:	781b      	ldrb	r3, [r3, #0]
   1285e:	461a      	mov	r2, r3
   12860:	490f      	ldr	r1, [pc, #60]	; (128a0 <mp_str_print_quoted+0x174>)
   12862:	68f8      	ldr	r0, [r7, #12]
   12864:	f7ef fc04 	bl	2070 <mp_printf>
    for (const byte *s = str_data, *top = str_data + str_len; s < top; s++) {
   12868:	69bb      	ldr	r3, [r7, #24]
   1286a:	3301      	adds	r3, #1
   1286c:	61bb      	str	r3, [r7, #24]
   1286e:	69ba      	ldr	r2, [r7, #24]
   12870:	693b      	ldr	r3, [r7, #16]
   12872:	429a      	cmp	r2, r3
   12874:	d3a6      	bcc.n	127c4 <mp_str_print_quoted+0x98>
        }
    }
    mp_printf(print, "%c", quote_char);
   12876:	69fa      	ldr	r2, [r7, #28]
   12878:	4903      	ldr	r1, [pc, #12]	; (12888 <mp_str_print_quoted+0x15c>)
   1287a:	68f8      	ldr	r0, [r7, #12]
   1287c:	f7ef fbf8 	bl	2070 <mp_printf>
}
   12880:	bf00      	nop
   12882:	3728      	adds	r7, #40	; 0x28
   12884:	46bd      	mov	sp, r7
   12886:	bd80      	pop	{r7, pc}
   12888:	00025208 	.word	0x00025208
   1288c:	0002520c 	.word	0x0002520c
   12890:	00025210 	.word	0x00025210
   12894:	00025214 	.word	0x00025214
   12898:	00025218 	.word	0x00025218
   1289c:	0002521c 	.word	0x0002521c
   128a0:	00025220 	.word	0x00025220

000128a4 <str_print>:
    }
    mp_print_str(print, "\"");
}
#endif

STATIC void str_print(const mp_print_t *print, mp_obj_t self_in, mp_print_kind_t kind) {
   128a4:	b580      	push	{r7, lr}
   128a6:	b088      	sub	sp, #32
   128a8:	af00      	add	r7, sp, #0
   128aa:	60f8      	str	r0, [r7, #12]
   128ac:	60b9      	str	r1, [r7, #8]
   128ae:	607a      	str	r2, [r7, #4]
    GET_STR_DATA_LEN(self_in, str_data, str_len);
   128b0:	68b8      	ldr	r0, [r7, #8]
   128b2:	f7ff fee7 	bl	12684 <MP_OBJ_IS_QSTR>
   128b6:	4603      	mov	r3, r0
   128b8:	2b00      	cmp	r3, #0
   128ba:	d009      	beq.n	128d0 <str_print+0x2c>
   128bc:	68bb      	ldr	r3, [r7, #8]
   128be:	089b      	lsrs	r3, r3, #2
   128c0:	f107 0214 	add.w	r2, r7, #20
   128c4:	4611      	mov	r1, r2
   128c6:	4618      	mov	r0, r3
   128c8:	f7ee fd90 	bl	13ec <qstr_data>
   128cc:	61f8      	str	r0, [r7, #28]
   128ce:	e005      	b.n	128dc <str_print+0x38>
   128d0:	68bb      	ldr	r3, [r7, #8]
   128d2:	689b      	ldr	r3, [r3, #8]
   128d4:	617b      	str	r3, [r7, #20]
   128d6:	68bb      	ldr	r3, [r7, #8]
   128d8:	68db      	ldr	r3, [r3, #12]
   128da:	61fb      	str	r3, [r7, #28]
        mp_str_print_json(print, str_data, str_len);
        return;
    }
    #endif
    #if !MICROPY_PY_BUILTINS_STR_UNICODE
    bool is_bytes = MP_OBJ_IS_TYPE(self_in, &mp_type_bytes);
   128dc:	68b8      	ldr	r0, [r7, #8]
   128de:	f7ff fee3 	bl	126a8 <MP_OBJ_IS_OBJ>
   128e2:	4603      	mov	r3, r0
   128e4:	2b00      	cmp	r3, #0
   128e6:	d006      	beq.n	128f6 <str_print+0x52>
   128e8:	68bb      	ldr	r3, [r7, #8]
   128ea:	681b      	ldr	r3, [r3, #0]
   128ec:	4a17      	ldr	r2, [pc, #92]	; (1294c <str_print+0xa8>)
   128ee:	4293      	cmp	r3, r2
   128f0:	d101      	bne.n	128f6 <str_print+0x52>
   128f2:	2301      	movs	r3, #1
   128f4:	e000      	b.n	128f8 <str_print+0x54>
   128f6:	2300      	movs	r3, #0
   128f8:	76fb      	strb	r3, [r7, #27]
   128fa:	7efb      	ldrb	r3, [r7, #27]
   128fc:	f003 0301 	and.w	r3, r3, #1
   12900:	76fb      	strb	r3, [r7, #27]
    #else
    bool is_bytes = true;
    #endif
    if (kind == PRINT_RAW || (!MICROPY_PY_BUILTINS_STR_UNICODE && kind == PRINT_STR && !is_bytes)) {
   12902:	687b      	ldr	r3, [r7, #4]
   12904:	2b04      	cmp	r3, #4
   12906:	d008      	beq.n	1291a <str_print+0x76>
   12908:	687b      	ldr	r3, [r7, #4]
   1290a:	2b00      	cmp	r3, #0
   1290c:	d10c      	bne.n	12928 <str_print+0x84>
   1290e:	7efb      	ldrb	r3, [r7, #27]
   12910:	f083 0301 	eor.w	r3, r3, #1
   12914:	b2db      	uxtb	r3, r3
   12916:	2b00      	cmp	r3, #0
   12918:	d006      	beq.n	12928 <str_print+0x84>
        mp_printf(print, "%.*s", str_len, str_data);
   1291a:	697a      	ldr	r2, [r7, #20]
   1291c:	69fb      	ldr	r3, [r7, #28]
   1291e:	490c      	ldr	r1, [pc, #48]	; (12950 <str_print+0xac>)
   12920:	68f8      	ldr	r0, [r7, #12]
   12922:	f7ef fba5 	bl	2070 <mp_printf>
   12926:	e00c      	b.n	12942 <str_print+0x9e>
    } else {
        if (is_bytes) {
   12928:	7efb      	ldrb	r3, [r7, #27]
   1292a:	2b00      	cmp	r3, #0
   1292c:	d003      	beq.n	12936 <str_print+0x92>
            mp_print_str(print, "b");
   1292e:	4909      	ldr	r1, [pc, #36]	; (12954 <str_print+0xb0>)
   12930:	68f8      	ldr	r0, [r7, #12]
   12932:	f7ef f88b 	bl	1a4c <mp_print_str>
        }
        mp_str_print_quoted(print, str_data, str_len, is_bytes);
   12936:	697a      	ldr	r2, [r7, #20]
   12938:	7efb      	ldrb	r3, [r7, #27]
   1293a:	69f9      	ldr	r1, [r7, #28]
   1293c:	68f8      	ldr	r0, [r7, #12]
   1293e:	f7ff fef5 	bl	1272c <mp_str_print_quoted>
    }
}
   12942:	bf00      	nop
   12944:	3720      	adds	r7, #32
   12946:	46bd      	mov	sp, r7
   12948:	bd80      	pop	{r7, pc}
   1294a:	bf00      	nop
   1294c:	000257ec 	.word	0x000257ec
   12950:	00025228 	.word	0x00025228
   12954:	00025230 	.word	0x00025230

00012958 <mp_obj_str_make_new>:

mp_obj_t mp_obj_str_make_new(const mp_obj_type_t *type, size_t n_args, size_t n_kw, const mp_obj_t *args) {
   12958:	b580      	push	{r7, lr}
   1295a:	b094      	sub	sp, #80	; 0x50
   1295c:	af02      	add	r7, sp, #8
   1295e:	60f8      	str	r0, [r7, #12]
   12960:	60b9      	str	r1, [r7, #8]
   12962:	607a      	str	r2, [r7, #4]
   12964:	603b      	str	r3, [r7, #0]
    if (n_kw != 0) {
        mp_arg_error_unimpl_kw();
    }
#endif

    mp_arg_check_num(n_args, n_kw, 0, 3, false);
   12966:	2300      	movs	r3, #0
   12968:	9300      	str	r3, [sp, #0]
   1296a:	2303      	movs	r3, #3
   1296c:	2200      	movs	r2, #0
   1296e:	6879      	ldr	r1, [r7, #4]
   12970:	68b8      	ldr	r0, [r7, #8]
   12972:	f7ff febf 	bl	126f4 <mp_arg_check_num>

    switch (n_args) {
   12976:	68bb      	ldr	r3, [r7, #8]
   12978:	2b00      	cmp	r3, #0
   1297a:	d002      	beq.n	12982 <mp_obj_str_make_new+0x2a>
   1297c:	2b01      	cmp	r3, #1
   1297e:	d002      	beq.n	12986 <mp_obj_str_make_new+0x2e>
   12980:	e019      	b.n	129b6 <mp_obj_str_make_new+0x5e>
        case 0:
            return MP_OBJ_NEW_QSTR(MP_QSTR_);
   12982:	2306      	movs	r3, #6
   12984:	e089      	b.n	12a9a <mp_obj_str_make_new+0x142>

        case 1: {
            vstr_t vstr;
            mp_print_t print;
            vstr_init_print(&vstr, 16, &print);
   12986:	f107 0220 	add.w	r2, r7, #32
   1298a:	f107 0328 	add.w	r3, r7, #40	; 0x28
   1298e:	2110      	movs	r1, #16
   12990:	4618      	mov	r0, r3
   12992:	f7ee fdf0 	bl	1576 <vstr_init_print>
            mp_obj_print_helper(&print, args[0], PRINT_STR);
   12996:	683b      	ldr	r3, [r7, #0]
   12998:	6819      	ldr	r1, [r3, #0]
   1299a:	f107 0320 	add.w	r3, r7, #32
   1299e:	2200      	movs	r2, #0
   129a0:	4618      	mov	r0, r3
   129a2:	f7fb f98c 	bl	dcbe <mp_obj_print_helper>
            return mp_obj_new_str_from_vstr(type, &vstr);
   129a6:	f107 0328 	add.w	r3, r7, #40	; 0x28
   129aa:	4619      	mov	r1, r3
   129ac:	68f8      	ldr	r0, [r7, #12]
   129ae:	f002 fed4 	bl	1575a <mp_obj_new_str_from_vstr>
   129b2:	4603      	mov	r3, r0
   129b4:	e071      	b.n	12a9a <mp_obj_str_make_new+0x142>
        }

        default: // 2 or 3 args
            // TODO: validate 2nd/3rd args
            if (MP_OBJ_IS_TYPE(args[0], &mp_type_bytes)) {
   129b6:	683b      	ldr	r3, [r7, #0]
   129b8:	681b      	ldr	r3, [r3, #0]
   129ba:	4618      	mov	r0, r3
   129bc:	f7ff fe74 	bl	126a8 <MP_OBJ_IS_OBJ>
   129c0:	4603      	mov	r3, r0
   129c2:	2b00      	cmp	r3, #0
   129c4:	d05a      	beq.n	12a7c <mp_obj_str_make_new+0x124>
   129c6:	683b      	ldr	r3, [r7, #0]
   129c8:	681b      	ldr	r3, [r3, #0]
   129ca:	681b      	ldr	r3, [r3, #0]
   129cc:	4a35      	ldr	r2, [pc, #212]	; (12aa4 <mp_obj_str_make_new+0x14c>)
   129ce:	4293      	cmp	r3, r2
   129d0:	d154      	bne.n	12a7c <mp_obj_str_make_new+0x124>
                GET_STR_DATA_LEN(args[0], str_data, str_len);
   129d2:	683b      	ldr	r3, [r7, #0]
   129d4:	681b      	ldr	r3, [r3, #0]
   129d6:	4618      	mov	r0, r3
   129d8:	f7ff fe54 	bl	12684 <MP_OBJ_IS_QSTR>
   129dc:	4603      	mov	r3, r0
   129de:	2b00      	cmp	r3, #0
   129e0:	d00a      	beq.n	129f8 <mp_obj_str_make_new+0xa0>
   129e2:	683b      	ldr	r3, [r7, #0]
   129e4:	681b      	ldr	r3, [r3, #0]
   129e6:	089b      	lsrs	r3, r3, #2
   129e8:	f107 021c 	add.w	r2, r7, #28
   129ec:	4611      	mov	r1, r2
   129ee:	4618      	mov	r0, r3
   129f0:	f7ee fcfc 	bl	13ec <qstr_data>
   129f4:	6478      	str	r0, [r7, #68]	; 0x44
   129f6:	e007      	b.n	12a08 <mp_obj_str_make_new+0xb0>
   129f8:	683b      	ldr	r3, [r7, #0]
   129fa:	681b      	ldr	r3, [r3, #0]
   129fc:	689b      	ldr	r3, [r3, #8]
   129fe:	61fb      	str	r3, [r7, #28]
   12a00:	683b      	ldr	r3, [r7, #0]
   12a02:	681b      	ldr	r3, [r3, #0]
   12a04:	68db      	ldr	r3, [r3, #12]
   12a06:	647b      	str	r3, [r7, #68]	; 0x44
                GET_STR_HASH(args[0], str_hash);
   12a08:	683b      	ldr	r3, [r7, #0]
   12a0a:	681b      	ldr	r3, [r3, #0]
   12a0c:	4618      	mov	r0, r3
   12a0e:	f7ff fe39 	bl	12684 <MP_OBJ_IS_QSTR>
   12a12:	4603      	mov	r3, r0
   12a14:	2b00      	cmp	r3, #0
   12a16:	d007      	beq.n	12a28 <mp_obj_str_make_new+0xd0>
   12a18:	683b      	ldr	r3, [r7, #0]
   12a1a:	681b      	ldr	r3, [r3, #0]
   12a1c:	089b      	lsrs	r3, r3, #2
   12a1e:	4618      	mov	r0, r3
   12a20:	f7ee fcba 	bl	1398 <qstr_hash>
   12a24:	6438      	str	r0, [r7, #64]	; 0x40
   12a26:	e003      	b.n	12a30 <mp_obj_str_make_new+0xd8>
   12a28:	683b      	ldr	r3, [r7, #0]
   12a2a:	681b      	ldr	r3, [r3, #0]
   12a2c:	685b      	ldr	r3, [r3, #4]
   12a2e:	643b      	str	r3, [r7, #64]	; 0x40
                if (str_hash == 0) {
   12a30:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   12a32:	2b00      	cmp	r3, #0
   12a34:	d105      	bne.n	12a42 <mp_obj_str_make_new+0xea>
                    str_hash = qstr_compute_hash(str_data, str_len);
   12a36:	69fb      	ldr	r3, [r7, #28]
   12a38:	4619      	mov	r1, r3
   12a3a:	6c78      	ldr	r0, [r7, #68]	; 0x44
   12a3c:	f7ee fac0 	bl	fc0 <qstr_compute_hash>
   12a40:	6438      	str	r0, [r7, #64]	; 0x40
                    mp_raise_msg(&mp_type_UnicodeError, NULL);
                }
                #endif

                // Check if a qstr with this data already exists
                qstr q = qstr_find_strn((const char*)str_data, str_len);
   12a42:	69fb      	ldr	r3, [r7, #28]
   12a44:	4619      	mov	r1, r3
   12a46:	6c78      	ldr	r0, [r7, #68]	; 0x44
   12a48:	f7ee fb86 	bl	1158 <qstr_find_strn>
   12a4c:	63f8      	str	r0, [r7, #60]	; 0x3c
                if (q != MP_QSTR_NULL) {
   12a4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   12a50:	2b00      	cmp	r3, #0
   12a52:	d004      	beq.n	12a5e <mp_obj_str_make_new+0x106>
                    return MP_OBJ_NEW_QSTR(q);
   12a54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   12a56:	009b      	lsls	r3, r3, #2
   12a58:	f043 0302 	orr.w	r3, r3, #2
   12a5c:	e01d      	b.n	12a9a <mp_obj_str_make_new+0x142>
                }

                mp_obj_str_t *o = MP_OBJ_TO_PTR(mp_obj_new_str_copy(type, NULL, str_len));
   12a5e:	69fb      	ldr	r3, [r7, #28]
   12a60:	461a      	mov	r2, r3
   12a62:	2100      	movs	r1, #0
   12a64:	68f8      	ldr	r0, [r7, #12]
   12a66:	f002 fe1a 	bl	1569e <mp_obj_new_str_copy>
   12a6a:	63b8      	str	r0, [r7, #56]	; 0x38
                o->data = str_data;
   12a6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   12a6e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
   12a70:	60da      	str	r2, [r3, #12]
                o->hash = str_hash;
   12a72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   12a74:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   12a76:	605a      	str	r2, [r3, #4]
                return MP_OBJ_FROM_PTR(o);
   12a78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   12a7a:	e00e      	b.n	12a9a <mp_obj_str_make_new+0x142>
            } else {
                mp_buffer_info_t bufinfo;
                mp_get_buffer_raise(args[0], &bufinfo, MP_BUFFER_READ);
   12a7c:	683b      	ldr	r3, [r7, #0]
   12a7e:	681b      	ldr	r3, [r3, #0]
   12a80:	f107 0110 	add.w	r1, r7, #16
   12a84:	2201      	movs	r2, #1
   12a86:	4618      	mov	r0, r3
   12a88:	f7fb fcf8 	bl	e47c <mp_get_buffer_raise>
                #if MICROPY_PY_BUILTINS_STR_UNICODE_CHECK
                if (!utf8_check(bufinfo.buf, bufinfo.len)) {
                    mp_raise_msg(&mp_type_UnicodeError, NULL);
                }
                #endif
                return mp_obj_new_str(bufinfo.buf, bufinfo.len);
   12a8c:	693b      	ldr	r3, [r7, #16]
   12a8e:	697a      	ldr	r2, [r7, #20]
   12a90:	4611      	mov	r1, r2
   12a92:	4618      	mov	r0, r3
   12a94:	f002 fec4 	bl	15820 <mp_obj_new_str>
   12a98:	4603      	mov	r3, r0
            }
    }
}
   12a9a:	4618      	mov	r0, r3
   12a9c:	3748      	adds	r7, #72	; 0x48
   12a9e:	46bd      	mov	sp, r7
   12aa0:	bd80      	pop	{r7, pc}
   12aa2:	bf00      	nop
   12aa4:	000257ec 	.word	0x000257ec

00012aa8 <bytes_make_new>:

STATIC mp_obj_t bytes_make_new(const mp_obj_type_t *type_in, size_t n_args, size_t n_kw, const mp_obj_t *args) {
   12aa8:	b580      	push	{r7, lr}
   12aaa:	b09e      	sub	sp, #120	; 0x78
   12aac:	af00      	add	r7, sp, #0
   12aae:	60f8      	str	r0, [r7, #12]
   12ab0:	60b9      	str	r1, [r7, #8]
   12ab2:	607a      	str	r2, [r7, #4]
   12ab4:	603b      	str	r3, [r7, #0]
    }
    #else
    (void)n_kw;
    #endif

    if (n_args == 0) {
   12ab6:	68bb      	ldr	r3, [r7, #8]
   12ab8:	2b00      	cmp	r3, #0
   12aba:	d101      	bne.n	12ac0 <bytes_make_new+0x18>
        return mp_const_empty_bytes;
   12abc:	4b7a      	ldr	r3, [pc, #488]	; (12ca8 <bytes_make_new+0x200>)
   12abe:	e0ee      	b.n	12c9e <bytes_make_new+0x1f6>
    }

    if (MP_OBJ_IS_STR(args[0])) {
   12ac0:	683b      	ldr	r3, [r7, #0]
   12ac2:	681b      	ldr	r3, [r3, #0]
   12ac4:	4618      	mov	r0, r3
   12ac6:	f7ff fddd 	bl	12684 <MP_OBJ_IS_QSTR>
   12aca:	4603      	mov	r3, r0
   12acc:	2b00      	cmp	r3, #0
   12ace:	d10d      	bne.n	12aec <bytes_make_new+0x44>
   12ad0:	683b      	ldr	r3, [r7, #0]
   12ad2:	681b      	ldr	r3, [r3, #0]
   12ad4:	4618      	mov	r0, r3
   12ad6:	f7ff fde7 	bl	126a8 <MP_OBJ_IS_OBJ>
   12ada:	4603      	mov	r3, r0
   12adc:	2b00      	cmp	r3, #0
   12ade:	d054      	beq.n	12b8a <bytes_make_new+0xe2>
   12ae0:	683b      	ldr	r3, [r7, #0]
   12ae2:	681b      	ldr	r3, [r3, #0]
   12ae4:	681b      	ldr	r3, [r3, #0]
   12ae6:	4a71      	ldr	r2, [pc, #452]	; (12cac <bytes_make_new+0x204>)
   12ae8:	4293      	cmp	r3, r2
   12aea:	d14e      	bne.n	12b8a <bytes_make_new+0xe2>
        if (n_args < 2 || n_args > 3) {
   12aec:	68bb      	ldr	r3, [r7, #8]
   12aee:	2b01      	cmp	r3, #1
   12af0:	f240 80d2 	bls.w	12c98 <bytes_make_new+0x1f0>
   12af4:	68bb      	ldr	r3, [r7, #8]
   12af6:	2b03      	cmp	r3, #3
   12af8:	f200 80ce 	bhi.w	12c98 <bytes_make_new+0x1f0>
            goto wrong_args;
        }
        GET_STR_DATA_LEN(args[0], str_data, str_len);
   12afc:	683b      	ldr	r3, [r7, #0]
   12afe:	681b      	ldr	r3, [r3, #0]
   12b00:	4618      	mov	r0, r3
   12b02:	f7ff fdbf 	bl	12684 <MP_OBJ_IS_QSTR>
   12b06:	4603      	mov	r3, r0
   12b08:	2b00      	cmp	r3, #0
   12b0a:	d00a      	beq.n	12b22 <bytes_make_new+0x7a>
   12b0c:	683b      	ldr	r3, [r7, #0]
   12b0e:	681b      	ldr	r3, [r3, #0]
   12b10:	089b      	lsrs	r3, r3, #2
   12b12:	f107 0224 	add.w	r2, r7, #36	; 0x24
   12b16:	4611      	mov	r1, r2
   12b18:	4618      	mov	r0, r3
   12b1a:	f7ee fc67 	bl	13ec <qstr_data>
   12b1e:	6778      	str	r0, [r7, #116]	; 0x74
   12b20:	e007      	b.n	12b32 <bytes_make_new+0x8a>
   12b22:	683b      	ldr	r3, [r7, #0]
   12b24:	681b      	ldr	r3, [r3, #0]
   12b26:	689b      	ldr	r3, [r3, #8]
   12b28:	627b      	str	r3, [r7, #36]	; 0x24
   12b2a:	683b      	ldr	r3, [r7, #0]
   12b2c:	681b      	ldr	r3, [r3, #0]
   12b2e:	68db      	ldr	r3, [r3, #12]
   12b30:	677b      	str	r3, [r7, #116]	; 0x74
        GET_STR_HASH(args[0], str_hash);
   12b32:	683b      	ldr	r3, [r7, #0]
   12b34:	681b      	ldr	r3, [r3, #0]
   12b36:	4618      	mov	r0, r3
   12b38:	f7ff fda4 	bl	12684 <MP_OBJ_IS_QSTR>
   12b3c:	4603      	mov	r3, r0
   12b3e:	2b00      	cmp	r3, #0
   12b40:	d007      	beq.n	12b52 <bytes_make_new+0xaa>
   12b42:	683b      	ldr	r3, [r7, #0]
   12b44:	681b      	ldr	r3, [r3, #0]
   12b46:	089b      	lsrs	r3, r3, #2
   12b48:	4618      	mov	r0, r3
   12b4a:	f7ee fc25 	bl	1398 <qstr_hash>
   12b4e:	6738      	str	r0, [r7, #112]	; 0x70
   12b50:	e003      	b.n	12b5a <bytes_make_new+0xb2>
   12b52:	683b      	ldr	r3, [r7, #0]
   12b54:	681b      	ldr	r3, [r3, #0]
   12b56:	685b      	ldr	r3, [r3, #4]
   12b58:	673b      	str	r3, [r7, #112]	; 0x70
        if (str_hash == 0) {
   12b5a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   12b5c:	2b00      	cmp	r3, #0
   12b5e:	d105      	bne.n	12b6c <bytes_make_new+0xc4>
            str_hash = qstr_compute_hash(str_data, str_len);
   12b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   12b62:	4619      	mov	r1, r3
   12b64:	6f78      	ldr	r0, [r7, #116]	; 0x74
   12b66:	f7ee fa2b 	bl	fc0 <qstr_compute_hash>
   12b6a:	6738      	str	r0, [r7, #112]	; 0x70
        }
        mp_obj_str_t *o = MP_OBJ_TO_PTR(mp_obj_new_str_copy(&mp_type_bytes, NULL, str_len));
   12b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   12b6e:	461a      	mov	r2, r3
   12b70:	2100      	movs	r1, #0
   12b72:	484f      	ldr	r0, [pc, #316]	; (12cb0 <bytes_make_new+0x208>)
   12b74:	f002 fd93 	bl	1569e <mp_obj_new_str_copy>
   12b78:	6578      	str	r0, [r7, #84]	; 0x54
        o->data = str_data;
   12b7a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   12b7c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
   12b7e:	60da      	str	r2, [r3, #12]
        o->hash = str_hash;
   12b80:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   12b82:	6f3a      	ldr	r2, [r7, #112]	; 0x70
   12b84:	605a      	str	r2, [r3, #4]
        return MP_OBJ_FROM_PTR(o);
   12b86:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   12b88:	e089      	b.n	12c9e <bytes_make_new+0x1f6>
    }

    if (n_args > 1) {
   12b8a:	68bb      	ldr	r3, [r7, #8]
   12b8c:	2b01      	cmp	r3, #1
   12b8e:	f200 8082 	bhi.w	12c96 <bytes_make_new+0x1ee>
        goto wrong_args;
    }

    if (MP_OBJ_IS_SMALL_INT(args[0])) {
   12b92:	683b      	ldr	r3, [r7, #0]
   12b94:	681b      	ldr	r3, [r3, #0]
   12b96:	4618      	mov	r0, r3
   12b98:	f7ff fd62 	bl	12660 <MP_OBJ_IS_SMALL_INT>
   12b9c:	4603      	mov	r3, r0
   12b9e:	2b00      	cmp	r3, #0
   12ba0:	d01e      	beq.n	12be0 <bytes_make_new+0x138>
        mp_int_t len = MP_OBJ_SMALL_INT_VALUE(args[0]);
   12ba2:	683b      	ldr	r3, [r7, #0]
   12ba4:	681b      	ldr	r3, [r3, #0]
   12ba6:	105b      	asrs	r3, r3, #1
   12ba8:	66fb      	str	r3, [r7, #108]	; 0x6c
        if (len < 0) {
   12baa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   12bac:	2b00      	cmp	r3, #0
   12bae:	da02      	bge.n	12bb6 <bytes_make_new+0x10e>
            mp_raise_ValueError(NULL);
   12bb0:	2000      	movs	r0, #0
   12bb2:	f7fa fbe0 	bl	d376 <mp_raise_ValueError>
        }
        vstr_t vstr;
        vstr_init_len(&vstr, len);
   12bb6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
   12bb8:	f107 0314 	add.w	r3, r7, #20
   12bbc:	4611      	mov	r1, r2
   12bbe:	4618      	mov	r0, r3
   12bc0:	f7ee fcad 	bl	151e <vstr_init_len>
        memset(vstr.buf, 0, len);
   12bc4:	69fb      	ldr	r3, [r7, #28]
   12bc6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
   12bc8:	2100      	movs	r1, #0
   12bca:	4618      	mov	r0, r3
   12bcc:	f00b fd4a 	bl	1e664 <memset>
        return mp_obj_new_str_from_vstr(&mp_type_bytes, &vstr);
   12bd0:	f107 0314 	add.w	r3, r7, #20
   12bd4:	4619      	mov	r1, r3
   12bd6:	4836      	ldr	r0, [pc, #216]	; (12cb0 <bytes_make_new+0x208>)
   12bd8:	f002 fdbf 	bl	1575a <mp_obj_new_str_from_vstr>
   12bdc:	4603      	mov	r3, r0
   12bde:	e05e      	b.n	12c9e <bytes_make_new+0x1f6>
    }

    // check if argument has the buffer protocol
    mp_buffer_info_t bufinfo;
    if (mp_get_buffer(args[0], &bufinfo, MP_BUFFER_READ)) {
   12be0:	683b      	ldr	r3, [r7, #0]
   12be2:	681b      	ldr	r3, [r3, #0]
   12be4:	f107 0148 	add.w	r1, r7, #72	; 0x48
   12be8:	2201      	movs	r2, #1
   12bea:	4618      	mov	r0, r3
   12bec:	f7fb fc25 	bl	e43a <mp_get_buffer>
   12bf0:	4603      	mov	r3, r0
   12bf2:	2b00      	cmp	r3, #0
   12bf4:	d007      	beq.n	12c06 <bytes_make_new+0x15e>
        return mp_obj_new_bytes(bufinfo.buf, bufinfo.len);
   12bf6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   12bf8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
   12bfa:	4611      	mov	r1, r2
   12bfc:	4618      	mov	r0, r3
   12bfe:	f002 fe66 	bl	158ce <mp_obj_new_bytes>
   12c02:	4603      	mov	r3, r0
   12c04:	e04b      	b.n	12c9e <bytes_make_new+0x1f6>
    }

    vstr_t vstr;
    // Try to create array of exact len if initializer len is known
    mp_obj_t len_in = mp_obj_len_maybe(args[0]);
   12c06:	683b      	ldr	r3, [r7, #0]
   12c08:	681b      	ldr	r3, [r3, #0]
   12c0a:	4618      	mov	r0, r3
   12c0c:	f7fb fb7c 	bl	e308 <mp_obj_len_maybe>
   12c10:	66b8      	str	r0, [r7, #104]	; 0x68
    if (len_in == MP_OBJ_NULL) {
   12c12:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   12c14:	2b00      	cmp	r3, #0
   12c16:	d106      	bne.n	12c26 <bytes_make_new+0x17e>
        vstr_init(&vstr, 16);
   12c18:	f107 0338 	add.w	r3, r7, #56	; 0x38
   12c1c:	2110      	movs	r1, #16
   12c1e:	4618      	mov	r0, r3
   12c20:	f7ee fc5c 	bl	14dc <vstr_init>
   12c24:	e009      	b.n	12c3a <bytes_make_new+0x192>
    } else {
        mp_int_t len = MP_OBJ_SMALL_INT_VALUE(len_in);
   12c26:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   12c28:	105b      	asrs	r3, r3, #1
   12c2a:	667b      	str	r3, [r7, #100]	; 0x64
        vstr_init(&vstr, len);
   12c2c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
   12c2e:	f107 0338 	add.w	r3, r7, #56	; 0x38
   12c32:	4611      	mov	r1, r2
   12c34:	4618      	mov	r0, r3
   12c36:	f7ee fc51 	bl	14dc <vstr_init>
    }

    mp_obj_iter_buf_t iter_buf;
    mp_obj_t iterable = mp_getiter(args[0], &iter_buf);
   12c3a:	683b      	ldr	r3, [r7, #0]
   12c3c:	681b      	ldr	r3, [r3, #0]
   12c3e:	f107 0228 	add.w	r2, r7, #40	; 0x28
   12c42:	4611      	mov	r1, r2
   12c44:	4618      	mov	r0, r3
   12c46:	f7fa f83f 	bl	ccc8 <mp_getiter>
   12c4a:	6638      	str	r0, [r7, #96]	; 0x60
    mp_obj_t item;
    while ((item = mp_iternext(iterable)) != MP_OBJ_STOP_ITERATION) {
   12c4c:	e014      	b.n	12c78 <bytes_make_new+0x1d0>
        mp_int_t val = mp_obj_get_int(item);
   12c4e:	6df8      	ldr	r0, [r7, #92]	; 0x5c
   12c50:	f7fb f9e0 	bl	e014 <mp_obj_get_int>
   12c54:	65b8      	str	r0, [r7, #88]	; 0x58
        #if MICROPY_FULL_CHECKS
        if (val < 0 || val > 255) {
   12c56:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   12c58:	2b00      	cmp	r3, #0
   12c5a:	db02      	blt.n	12c62 <bytes_make_new+0x1ba>
   12c5c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   12c5e:	2bff      	cmp	r3, #255	; 0xff
   12c60:	dd02      	ble.n	12c68 <bytes_make_new+0x1c0>
            mp_raise_ValueError("bytes value out of range");
   12c62:	4814      	ldr	r0, [pc, #80]	; (12cb4 <bytes_make_new+0x20c>)
   12c64:	f7fa fb87 	bl	d376 <mp_raise_ValueError>
        }
        #endif
        vstr_add_byte(&vstr, val);
   12c68:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   12c6a:	b2da      	uxtb	r2, r3
   12c6c:	f107 0338 	add.w	r3, r7, #56	; 0x38
   12c70:	4611      	mov	r1, r2
   12c72:	4618      	mov	r0, r3
   12c74:	f7ee fd84 	bl	1780 <vstr_add_byte>
    while ((item = mp_iternext(iterable)) != MP_OBJ_STOP_ITERATION) {
   12c78:	6e38      	ldr	r0, [r7, #96]	; 0x60
   12c7a:	f7fa f8a7 	bl	cdcc <mp_iternext>
   12c7e:	65f8      	str	r0, [r7, #92]	; 0x5c
   12c80:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
   12c82:	2b04      	cmp	r3, #4
   12c84:	d1e3      	bne.n	12c4e <bytes_make_new+0x1a6>
    }

    return mp_obj_new_str_from_vstr(&mp_type_bytes, &vstr);
   12c86:	f107 0338 	add.w	r3, r7, #56	; 0x38
   12c8a:	4619      	mov	r1, r3
   12c8c:	4808      	ldr	r0, [pc, #32]	; (12cb0 <bytes_make_new+0x208>)
   12c8e:	f002 fd64 	bl	1575a <mp_obj_new_str_from_vstr>
   12c92:	4603      	mov	r3, r0
   12c94:	e003      	b.n	12c9e <bytes_make_new+0x1f6>
        goto wrong_args;
   12c96:	bf00      	nop

wrong_args:
    mp_raise_TypeError("wrong number of arguments");
   12c98:	4807      	ldr	r0, [pc, #28]	; (12cb8 <bytes_make_new+0x210>)
   12c9a:	f7fa fb77 	bl	d38c <mp_raise_TypeError>
}
   12c9e:	4618      	mov	r0, r3
   12ca0:	3778      	adds	r7, #120	; 0x78
   12ca2:	46bd      	mov	sp, r7
   12ca4:	bd80      	pop	{r7, pc}
   12ca6:	bf00      	nop
   12ca8:	0002582c 	.word	0x0002582c
   12cac:	000257b0 	.word	0x000257b0
   12cb0:	000257ec 	.word	0x000257ec
   12cb4:	00025234 	.word	0x00025234
   12cb8:	00025250 	.word	0x00025250

00012cbc <find_subbytes>:

// like strstr but with specified length and allows \0 bytes
// TODO replace with something more efficient/standard
const byte *find_subbytes(const byte *haystack, size_t hlen, const byte *needle, size_t nlen, int direction) {
   12cbc:	b580      	push	{r7, lr}
   12cbe:	b086      	sub	sp, #24
   12cc0:	af00      	add	r7, sp, #0
   12cc2:	60f8      	str	r0, [r7, #12]
   12cc4:	60b9      	str	r1, [r7, #8]
   12cc6:	607a      	str	r2, [r7, #4]
   12cc8:	603b      	str	r3, [r7, #0]
    if (hlen >= nlen) {
   12cca:	68ba      	ldr	r2, [r7, #8]
   12ccc:	683b      	ldr	r3, [r7, #0]
   12cce:	429a      	cmp	r2, r3
   12cd0:	d328      	bcc.n	12d24 <find_subbytes+0x68>
        size_t str_index, str_index_end;
        if (direction > 0) {
   12cd2:	6a3b      	ldr	r3, [r7, #32]
   12cd4:	2b00      	cmp	r3, #0
   12cd6:	dd06      	ble.n	12ce6 <find_subbytes+0x2a>
            str_index = 0;
   12cd8:	2300      	movs	r3, #0
   12cda:	617b      	str	r3, [r7, #20]
            str_index_end = hlen - nlen;
   12cdc:	68ba      	ldr	r2, [r7, #8]
   12cde:	683b      	ldr	r3, [r7, #0]
   12ce0:	1ad3      	subs	r3, r2, r3
   12ce2:	613b      	str	r3, [r7, #16]
   12ce4:	e005      	b.n	12cf2 <find_subbytes+0x36>
        } else {
            str_index = hlen - nlen;
   12ce6:	68ba      	ldr	r2, [r7, #8]
   12ce8:	683b      	ldr	r3, [r7, #0]
   12cea:	1ad3      	subs	r3, r2, r3
   12cec:	617b      	str	r3, [r7, #20]
            str_index_end = 0;
   12cee:	2300      	movs	r3, #0
   12cf0:	613b      	str	r3, [r7, #16]
        }
        for (;;) {
            if (memcmp(&haystack[str_index], needle, nlen) == 0) {
   12cf2:	68fa      	ldr	r2, [r7, #12]
   12cf4:	697b      	ldr	r3, [r7, #20]
   12cf6:	4413      	add	r3, r2
   12cf8:	683a      	ldr	r2, [r7, #0]
   12cfa:	6879      	ldr	r1, [r7, #4]
   12cfc:	4618      	mov	r0, r3
   12cfe:	f00b fcfc 	bl	1e6fa <memcmp>
   12d02:	4603      	mov	r3, r0
   12d04:	2b00      	cmp	r3, #0
   12d06:	d103      	bne.n	12d10 <find_subbytes+0x54>
                //found
                return haystack + str_index;
   12d08:	68fa      	ldr	r2, [r7, #12]
   12d0a:	697b      	ldr	r3, [r7, #20]
   12d0c:	4413      	add	r3, r2
   12d0e:	e00a      	b.n	12d26 <find_subbytes+0x6a>
            }
            if (str_index == str_index_end) {
   12d10:	697a      	ldr	r2, [r7, #20]
   12d12:	693b      	ldr	r3, [r7, #16]
   12d14:	429a      	cmp	r2, r3
   12d16:	d004      	beq.n	12d22 <find_subbytes+0x66>
                //not found
                break;
            }
            str_index += direction;
   12d18:	6a3b      	ldr	r3, [r7, #32]
   12d1a:	697a      	ldr	r2, [r7, #20]
   12d1c:	4413      	add	r3, r2
   12d1e:	617b      	str	r3, [r7, #20]
            if (memcmp(&haystack[str_index], needle, nlen) == 0) {
   12d20:	e7e7      	b.n	12cf2 <find_subbytes+0x36>
                break;
   12d22:	bf00      	nop
        }
    }
    return NULL;
   12d24:	2300      	movs	r3, #0
}
   12d26:	4618      	mov	r0, r3
   12d28:	3718      	adds	r7, #24
   12d2a:	46bd      	mov	sp, r7
   12d2c:	bd80      	pop	{r7, pc}

00012d2e <mp_obj_str_binary_op>:

// Note: this function is used to check if an object is a str or bytes, which
// works because both those types use it as their binary_op method.  Revisit
// MP_OBJ_IS_STR_OR_BYTES if this fact changes.
mp_obj_t mp_obj_str_binary_op(mp_binary_op_t op, mp_obj_t lhs_in, mp_obj_t rhs_in) {
   12d2e:	b580      	push	{r7, lr}
   12d30:	b09c      	sub	sp, #112	; 0x70
   12d32:	af02      	add	r7, sp, #8
   12d34:	60f8      	str	r0, [r7, #12]
   12d36:	60b9      	str	r1, [r7, #8]
   12d38:	607a      	str	r2, [r7, #4]
    // check for modulo
    if (op == MP_BINARY_OP_MODULO) {
   12d3a:	68fb      	ldr	r3, [r7, #12]
   12d3c:	2b1f      	cmp	r3, #31
   12d3e:	d130      	bne.n	12da2 <mp_obj_str_binary_op+0x74>
        #if MICROPY_PY_BUILTINS_STR_OP_MODULO
        mp_obj_t *args = &rhs_in;
   12d40:	1d3b      	adds	r3, r7, #4
   12d42:	64bb      	str	r3, [r7, #72]	; 0x48
        size_t n_args = 1;
   12d44:	2301      	movs	r3, #1
   12d46:	647b      	str	r3, [r7, #68]	; 0x44
        mp_obj_t dict = MP_OBJ_NULL;
   12d48:	2300      	movs	r3, #0
   12d4a:	667b      	str	r3, [r7, #100]	; 0x64
        if (MP_OBJ_IS_TYPE(rhs_in, &mp_type_tuple)) {
   12d4c:	687b      	ldr	r3, [r7, #4]
   12d4e:	4618      	mov	r0, r3
   12d50:	f7ff fcaa 	bl	126a8 <MP_OBJ_IS_OBJ>
   12d54:	4603      	mov	r3, r0
   12d56:	2b00      	cmp	r3, #0
   12d58:	d00d      	beq.n	12d76 <mp_obj_str_binary_op+0x48>
   12d5a:	687b      	ldr	r3, [r7, #4]
   12d5c:	681b      	ldr	r3, [r3, #0]
   12d5e:	4aad      	ldr	r2, [pc, #692]	; (13014 <mp_obj_str_binary_op+0x2e6>)
   12d60:	4293      	cmp	r3, r2
   12d62:	d108      	bne.n	12d76 <mp_obj_str_binary_op+0x48>
            // TODO: Support tuple subclasses?
            mp_obj_tuple_get(rhs_in, &n_args, &args);
   12d64:	687b      	ldr	r3, [r7, #4]
   12d66:	f107 0248 	add.w	r2, r7, #72	; 0x48
   12d6a:	f107 0144 	add.w	r1, r7, #68	; 0x44
   12d6e:	4618      	mov	r0, r3
   12d70:	f003 faa4 	bl	162bc <mp_obj_tuple_get>
   12d74:	e00d      	b.n	12d92 <mp_obj_str_binary_op+0x64>
        } else if (MP_OBJ_IS_TYPE(rhs_in, &mp_type_dict)) {
   12d76:	687b      	ldr	r3, [r7, #4]
   12d78:	4618      	mov	r0, r3
   12d7a:	f7ff fc95 	bl	126a8 <MP_OBJ_IS_OBJ>
   12d7e:	4603      	mov	r3, r0
   12d80:	2b00      	cmp	r3, #0
   12d82:	d006      	beq.n	12d92 <mp_obj_str_binary_op+0x64>
   12d84:	687b      	ldr	r3, [r7, #4]
   12d86:	681b      	ldr	r3, [r3, #0]
   12d88:	4aa3      	ldr	r2, [pc, #652]	; (13018 <mp_obj_str_binary_op+0x2ea>)
   12d8a:	4293      	cmp	r3, r2
   12d8c:	d101      	bne.n	12d92 <mp_obj_str_binary_op+0x64>
            dict = rhs_in;
   12d8e:	687b      	ldr	r3, [r7, #4]
   12d90:	667b      	str	r3, [r7, #100]	; 0x64
        }
        return str_modulo_format(lhs_in, n_args, args, dict);
   12d92:	6c79      	ldr	r1, [r7, #68]	; 0x44
   12d94:	6cba      	ldr	r2, [r7, #72]	; 0x48
   12d96:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   12d98:	68b8      	ldr	r0, [r7, #8]
   12d9a:	f001 fd97 	bl	148cc <str_modulo_format>
   12d9e:	4603      	mov	r3, r0
   12da0:	e133      	b.n	1300a <mp_obj_str_binary_op+0x2dc>
        return MP_OBJ_NULL;
        #endif
    }

    // from now on we need lhs type and data, so extract them
    mp_obj_type_t *lhs_type = mp_obj_get_type(lhs_in);
   12da2:	68b8      	ldr	r0, [r7, #8]
   12da4:	f7fa ff5a 	bl	dc5c <mp_obj_get_type>
   12da8:	6538      	str	r0, [r7, #80]	; 0x50
    GET_STR_DATA_LEN(lhs_in, lhs_data, lhs_len);
   12daa:	68b8      	ldr	r0, [r7, #8]
   12dac:	f7ff fc6a 	bl	12684 <MP_OBJ_IS_QSTR>
   12db0:	4603      	mov	r3, r0
   12db2:	2b00      	cmp	r3, #0
   12db4:	d009      	beq.n	12dca <mp_obj_str_binary_op+0x9c>
   12db6:	68bb      	ldr	r3, [r7, #8]
   12db8:	089b      	lsrs	r3, r3, #2
   12dba:	f107 024c 	add.w	r2, r7, #76	; 0x4c
   12dbe:	4611      	mov	r1, r2
   12dc0:	4618      	mov	r0, r3
   12dc2:	f7ee fb13 	bl	13ec <qstr_data>
   12dc6:	6638      	str	r0, [r7, #96]	; 0x60
   12dc8:	e005      	b.n	12dd6 <mp_obj_str_binary_op+0xa8>
   12dca:	68bb      	ldr	r3, [r7, #8]
   12dcc:	689b      	ldr	r3, [r3, #8]
   12dce:	64fb      	str	r3, [r7, #76]	; 0x4c
   12dd0:	68bb      	ldr	r3, [r7, #8]
   12dd2:	68db      	ldr	r3, [r3, #12]
   12dd4:	663b      	str	r3, [r7, #96]	; 0x60

    // check for multiply
    if (op == MP_BINARY_OP_MULTIPLY) {
   12dd6:	68fb      	ldr	r3, [r7, #12]
   12dd8:	2b1c      	cmp	r3, #28
   12dda:	d135      	bne.n	12e48 <mp_obj_str_binary_op+0x11a>
        mp_int_t n;
        if (!mp_obj_get_int_maybe(rhs_in, &n)) {
   12ddc:	687b      	ldr	r3, [r7, #4]
   12dde:	f107 0240 	add.w	r2, r7, #64	; 0x40
   12de2:	4611      	mov	r1, r2
   12de4:	4618      	mov	r0, r3
   12de6:	f7fb f975 	bl	e0d4 <mp_obj_get_int_maybe>
   12dea:	4603      	mov	r3, r0
   12dec:	f083 0301 	eor.w	r3, r3, #1
   12df0:	b2db      	uxtb	r3, r3
   12df2:	2b00      	cmp	r3, #0
   12df4:	d001      	beq.n	12dfa <mp_obj_str_binary_op+0xcc>
            return MP_OBJ_NULL; // op not supported
   12df6:	2300      	movs	r3, #0
   12df8:	e107      	b.n	1300a <mp_obj_str_binary_op+0x2dc>
        }
        if (n <= 0) {
   12dfa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   12dfc:	2b00      	cmp	r3, #0
   12dfe:	dc07      	bgt.n	12e10 <mp_obj_str_binary_op+0xe2>
            if (lhs_type == &mp_type_str) {
   12e00:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   12e02:	4a86      	ldr	r2, [pc, #536]	; (1301c <mp_obj_str_binary_op+0x2ee>)
   12e04:	4293      	cmp	r3, r2
   12e06:	d101      	bne.n	12e0c <mp_obj_str_binary_op+0xde>
                return MP_OBJ_NEW_QSTR(MP_QSTR_); // empty str
   12e08:	2306      	movs	r3, #6
   12e0a:	e0fe      	b.n	1300a <mp_obj_str_binary_op+0x2dc>
            } else {
                return mp_const_empty_bytes;
   12e0c:	4b84      	ldr	r3, [pc, #528]	; (13020 <mp_obj_str_binary_op+0x2f2>)
   12e0e:	e0fc      	b.n	1300a <mp_obj_str_binary_op+0x2dc>
            }
        }
        vstr_t vstr;
        vstr_init_len(&vstr, lhs_len * n);
   12e10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   12e12:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   12e14:	fb02 f203 	mul.w	r2, r2, r3
   12e18:	f107 0330 	add.w	r3, r7, #48	; 0x30
   12e1c:	4611      	mov	r1, r2
   12e1e:	4618      	mov	r0, r3
   12e20:	f7ee fb7d 	bl	151e <vstr_init_len>
        mp_seq_multiply(lhs_data, sizeof(*lhs_data), lhs_len, n, vstr.buf);
   12e24:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
   12e26:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   12e28:	4619      	mov	r1, r3
   12e2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   12e2c:	9300      	str	r3, [sp, #0]
   12e2e:	460b      	mov	r3, r1
   12e30:	2101      	movs	r1, #1
   12e32:	6e38      	ldr	r0, [r7, #96]	; 0x60
   12e34:	f004 ff6c 	bl	17d10 <mp_seq_multiply>
        return mp_obj_new_str_from_vstr(lhs_type, &vstr);
   12e38:	f107 0330 	add.w	r3, r7, #48	; 0x30
   12e3c:	4619      	mov	r1, r3
   12e3e:	6d38      	ldr	r0, [r7, #80]	; 0x50
   12e40:	f002 fc8b 	bl	1575a <mp_obj_new_str_from_vstr>
   12e44:	4603      	mov	r3, r0
   12e46:	e0e0      	b.n	1300a <mp_obj_str_binary_op+0x2dc>
    // easy to "fix" this with a bit of extra logic below, but it costs code
    // size and execution time so we don't.

    const byte *rhs_data;
    size_t rhs_len;
    if (lhs_type == mp_obj_get_type(rhs_in)) {
   12e48:	687b      	ldr	r3, [r7, #4]
   12e4a:	4618      	mov	r0, r3
   12e4c:	f7fa ff06 	bl	dc5c <mp_obj_get_type>
   12e50:	4602      	mov	r2, r0
   12e52:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   12e54:	429a      	cmp	r2, r3
   12e56:	d11b      	bne.n	12e90 <mp_obj_str_binary_op+0x162>
        GET_STR_DATA_LEN(rhs_in, rhs_data_, rhs_len_);
   12e58:	687b      	ldr	r3, [r7, #4]
   12e5a:	4618      	mov	r0, r3
   12e5c:	f7ff fc12 	bl	12684 <MP_OBJ_IS_QSTR>
   12e60:	4603      	mov	r3, r0
   12e62:	2b00      	cmp	r3, #0
   12e64:	d009      	beq.n	12e7a <mp_obj_str_binary_op+0x14c>
   12e66:	687b      	ldr	r3, [r7, #4]
   12e68:	089b      	lsrs	r3, r3, #2
   12e6a:	f107 022c 	add.w	r2, r7, #44	; 0x2c
   12e6e:	4611      	mov	r1, r2
   12e70:	4618      	mov	r0, r3
   12e72:	f7ee fabb 	bl	13ec <qstr_data>
   12e76:	6578      	str	r0, [r7, #84]	; 0x54
   12e78:	e005      	b.n	12e86 <mp_obj_str_binary_op+0x158>
   12e7a:	687b      	ldr	r3, [r7, #4]
   12e7c:	689b      	ldr	r3, [r3, #8]
   12e7e:	62fb      	str	r3, [r7, #44]	; 0x2c
   12e80:	687b      	ldr	r3, [r7, #4]
   12e82:	68db      	ldr	r3, [r3, #12]
   12e84:	657b      	str	r3, [r7, #84]	; 0x54
        rhs_data = rhs_data_;
   12e86:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   12e88:	65fb      	str	r3, [r7, #92]	; 0x5c
        rhs_len = rhs_len_;
   12e8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   12e8c:	65bb      	str	r3, [r7, #88]	; 0x58
   12e8e:	e01b      	b.n	12ec8 <mp_obj_str_binary_op+0x19a>
    } else if (lhs_type == &mp_type_bytes) {
   12e90:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   12e92:	4a64      	ldr	r2, [pc, #400]	; (13024 <mp_obj_str_binary_op+0x2f6>)
   12e94:	4293      	cmp	r3, r2
   12e96:	d113      	bne.n	12ec0 <mp_obj_str_binary_op+0x192>
        mp_buffer_info_t bufinfo;
        if (!mp_get_buffer(rhs_in, &bufinfo, MP_BUFFER_READ)) {
   12e98:	687b      	ldr	r3, [r7, #4]
   12e9a:	f107 0120 	add.w	r1, r7, #32
   12e9e:	2201      	movs	r2, #1
   12ea0:	4618      	mov	r0, r3
   12ea2:	f7fb faca 	bl	e43a <mp_get_buffer>
   12ea6:	4603      	mov	r3, r0
   12ea8:	f083 0301 	eor.w	r3, r3, #1
   12eac:	b2db      	uxtb	r3, r3
   12eae:	2b00      	cmp	r3, #0
   12eb0:	d001      	beq.n	12eb6 <mp_obj_str_binary_op+0x188>
            return MP_OBJ_NULL; // op not supported
   12eb2:	2300      	movs	r3, #0
   12eb4:	e0a9      	b.n	1300a <mp_obj_str_binary_op+0x2dc>
        }
        rhs_data = bufinfo.buf;
   12eb6:	6a3b      	ldr	r3, [r7, #32]
   12eb8:	65fb      	str	r3, [r7, #92]	; 0x5c
        rhs_len = bufinfo.len;
   12eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   12ebc:	65bb      	str	r3, [r7, #88]	; 0x58
   12ebe:	e003      	b.n	12ec8 <mp_obj_str_binary_op+0x19a>
    } else {
        // LHS is str and RHS has an incompatible type
        // (except if operation is EQUAL, but that's handled by mp_obj_equal)
        bad_implicit_conversion(rhs_in);
   12ec0:	687b      	ldr	r3, [r7, #4]
   12ec2:	4618      	mov	r0, r3
   12ec4:	f002 fd9b 	bl	159fe <bad_implicit_conversion>
    }

    switch (op) {
   12ec8:	68fb      	ldr	r3, [r7, #12]
   12eca:	2b22      	cmp	r3, #34	; 0x22
   12ecc:	f200 809c 	bhi.w	13008 <mp_obj_str_binary_op+0x2da>
   12ed0:	a201      	add	r2, pc, #4	; (adr r2, 12ed8 <mp_obj_str_binary_op+0x1aa>)
   12ed2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   12ed6:	bf00      	nop
   12ed8:	00012fed 	.word	0x00012fed
   12edc:	00012fed 	.word	0x00012fed
   12ee0:	00012fed 	.word	0x00012fed
   12ee4:	00012fed 	.word	0x00012fed
   12ee8:	00012fed 	.word	0x00012fed
   12eec:	00013009 	.word	0x00013009
   12ef0:	00013009 	.word	0x00013009
   12ef4:	00013009 	.word	0x00013009
   12ef8:	00013009 	.word	0x00013009
   12efc:	00013009 	.word	0x00013009
   12f00:	00013009 	.word	0x00013009
   12f04:	00013009 	.word	0x00013009
   12f08:	00013009 	.word	0x00013009
   12f0c:	00013009 	.word	0x00013009
   12f10:	00012f65 	.word	0x00012f65
   12f14:	00013009 	.word	0x00013009
   12f18:	00013009 	.word	0x00013009
   12f1c:	00013009 	.word	0x00013009
   12f20:	00013009 	.word	0x00013009
   12f24:	00013009 	.word	0x00013009
   12f28:	00013009 	.word	0x00013009
   12f2c:	00013009 	.word	0x00013009
   12f30:	00013009 	.word	0x00013009
   12f34:	00013009 	.word	0x00013009
   12f38:	00013009 	.word	0x00013009
   12f3c:	00013009 	.word	0x00013009
   12f40:	00012f65 	.word	0x00012f65
   12f44:	00013009 	.word	0x00013009
   12f48:	00013009 	.word	0x00013009
   12f4c:	00013009 	.word	0x00013009
   12f50:	00013009 	.word	0x00013009
   12f54:	00013009 	.word	0x00013009
   12f58:	00013009 	.word	0x00013009
   12f5c:	00013009 	.word	0x00013009
   12f60:	00012fc7 	.word	0x00012fc7
        case MP_BINARY_OP_ADD:
        case MP_BINARY_OP_INPLACE_ADD: {
            if (lhs_len == 0 && mp_obj_get_type(rhs_in) == lhs_type) {
   12f64:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   12f66:	2b00      	cmp	r3, #0
   12f68:	d109      	bne.n	12f7e <mp_obj_str_binary_op+0x250>
   12f6a:	687b      	ldr	r3, [r7, #4]
   12f6c:	4618      	mov	r0, r3
   12f6e:	f7fa fe75 	bl	dc5c <mp_obj_get_type>
   12f72:	4602      	mov	r2, r0
   12f74:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   12f76:	429a      	cmp	r2, r3
   12f78:	d101      	bne.n	12f7e <mp_obj_str_binary_op+0x250>
                return rhs_in;
   12f7a:	687b      	ldr	r3, [r7, #4]
   12f7c:	e045      	b.n	1300a <mp_obj_str_binary_op+0x2dc>
            }
            if (rhs_len == 0) {
   12f7e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   12f80:	2b00      	cmp	r3, #0
   12f82:	d101      	bne.n	12f88 <mp_obj_str_binary_op+0x25a>
                return lhs_in;
   12f84:	68bb      	ldr	r3, [r7, #8]
   12f86:	e040      	b.n	1300a <mp_obj_str_binary_op+0x2dc>
            }

            vstr_t vstr;
            vstr_init_len(&vstr, lhs_len + rhs_len);
   12f88:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
   12f8a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   12f8c:	441a      	add	r2, r3
   12f8e:	f107 0310 	add.w	r3, r7, #16
   12f92:	4611      	mov	r1, r2
   12f94:	4618      	mov	r0, r3
   12f96:	f7ee fac2 	bl	151e <vstr_init_len>
            memcpy(vstr.buf, lhs_data, lhs_len);
   12f9a:	69bb      	ldr	r3, [r7, #24]
   12f9c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
   12f9e:	6e39      	ldr	r1, [r7, #96]	; 0x60
   12fa0:	4618      	mov	r0, r3
   12fa2:	f00b fac5 	bl	1e530 <memcpy>
            memcpy(vstr.buf + lhs_len, rhs_data, rhs_len);
   12fa6:	69ba      	ldr	r2, [r7, #24]
   12fa8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   12faa:	4413      	add	r3, r2
   12fac:	6dba      	ldr	r2, [r7, #88]	; 0x58
   12fae:	6df9      	ldr	r1, [r7, #92]	; 0x5c
   12fb0:	4618      	mov	r0, r3
   12fb2:	f00b fabd 	bl	1e530 <memcpy>
            return mp_obj_new_str_from_vstr(lhs_type, &vstr);
   12fb6:	f107 0310 	add.w	r3, r7, #16
   12fba:	4619      	mov	r1, r3
   12fbc:	6d38      	ldr	r0, [r7, #80]	; 0x50
   12fbe:	f002 fbcc 	bl	1575a <mp_obj_new_str_from_vstr>
   12fc2:	4603      	mov	r3, r0
   12fc4:	e021      	b.n	1300a <mp_obj_str_binary_op+0x2dc>
        }

        case MP_BINARY_OP_CONTAINS:
            return mp_obj_new_bool(find_subbytes(lhs_data, lhs_len, rhs_data, rhs_len, 1) != NULL);
   12fc6:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
   12fc8:	2301      	movs	r3, #1
   12fca:	9300      	str	r3, [sp, #0]
   12fcc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   12fce:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
   12fd0:	6e38      	ldr	r0, [r7, #96]	; 0x60
   12fd2:	f7ff fe73 	bl	12cbc <find_subbytes>
   12fd6:	4603      	mov	r3, r0
   12fd8:	2b00      	cmp	r3, #0
   12fda:	bf14      	ite	ne
   12fdc:	2301      	movne	r3, #1
   12fde:	2300      	moveq	r3, #0
   12fe0:	b2db      	uxtb	r3, r3
   12fe2:	4618      	mov	r0, r3
   12fe4:	f7ff fb72 	bl	126cc <mp_obj_new_bool>
   12fe8:	4603      	mov	r3, r0
   12fea:	e00e      	b.n	1300a <mp_obj_str_binary_op+0x2dc>
        case MP_BINARY_OP_EQUAL: // This will be passed only for bytes, str is dealt with in mp_obj_equal()
        case MP_BINARY_OP_LESS:
        case MP_BINARY_OP_LESS_EQUAL:
        case MP_BINARY_OP_MORE:
        case MP_BINARY_OP_MORE_EQUAL:
            return mp_obj_new_bool(mp_seq_cmp_bytes(op, lhs_data, lhs_len, rhs_data, rhs_len));
   12fec:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
   12fee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   12ff0:	9300      	str	r3, [sp, #0]
   12ff2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
   12ff4:	6e39      	ldr	r1, [r7, #96]	; 0x60
   12ff6:	68f8      	ldr	r0, [r7, #12]
   12ff8:	f004 feed 	bl	17dd6 <mp_seq_cmp_bytes>
   12ffc:	4603      	mov	r3, r0
   12ffe:	4618      	mov	r0, r3
   13000:	f7ff fb64 	bl	126cc <mp_obj_new_bool>
   13004:	4603      	mov	r3, r0
   13006:	e000      	b.n	1300a <mp_obj_str_binary_op+0x2dc>

        default:
            return MP_OBJ_NULL; // op not supported
   13008:	2300      	movs	r3, #0
    }
}
   1300a:	4618      	mov	r0, r3
   1300c:	3768      	adds	r7, #104	; 0x68
   1300e:	46bd      	mov	sp, r7
   13010:	bd80      	pop	{r7, pc}
   13012:	bf00      	nop
   13014:	00025a34 	.word	0x00025a34
   13018:	00023d0c 	.word	0x00023d0c
   1301c:	000257b0 	.word	0x000257b0
   13020:	0002582c 	.word	0x0002582c
   13024:	000257ec 	.word	0x000257ec

00013028 <str_index_to_ptr>:

#if !MICROPY_PY_BUILTINS_STR_UNICODE
// objstrunicode defines own version
const byte *str_index_to_ptr(const mp_obj_type_t *type, const byte *self_data, size_t self_len,
                             mp_obj_t index, bool is_slice) {
   13028:	b580      	push	{r7, lr}
   1302a:	b086      	sub	sp, #24
   1302c:	af00      	add	r7, sp, #0
   1302e:	60f8      	str	r0, [r7, #12]
   13030:	60b9      	str	r1, [r7, #8]
   13032:	607a      	str	r2, [r7, #4]
   13034:	603b      	str	r3, [r7, #0]
    size_t index_val = mp_get_index(type, self_len, index, is_slice);
   13036:	f897 3020 	ldrb.w	r3, [r7, #32]
   1303a:	683a      	ldr	r2, [r7, #0]
   1303c:	6879      	ldr	r1, [r7, #4]
   1303e:	68f8      	ldr	r0, [r7, #12]
   13040:	f7fb f8d8 	bl	e1f4 <mp_get_index>
   13044:	6178      	str	r0, [r7, #20]
    return self_data + index_val;
   13046:	68ba      	ldr	r2, [r7, #8]
   13048:	697b      	ldr	r3, [r7, #20]
   1304a:	4413      	add	r3, r2
}
   1304c:	4618      	mov	r0, r3
   1304e:	3718      	adds	r7, #24
   13050:	46bd      	mov	sp, r7
   13052:	bd80      	pop	{r7, pc}

00013054 <bytes_subscr>:
#endif

// This is used for both bytes and 8-bit strings. This is not used for unicode strings.
STATIC mp_obj_t bytes_subscr(mp_obj_t self_in, mp_obj_t index, mp_obj_t value) {
   13054:	b580      	push	{r7, lr}
   13056:	b088      	sub	sp, #32
   13058:	af00      	add	r7, sp, #0
   1305a:	60f8      	str	r0, [r7, #12]
   1305c:	60b9      	str	r1, [r7, #8]
   1305e:	607a      	str	r2, [r7, #4]
    mp_obj_type_t *type = mp_obj_get_type(self_in);
   13060:	68f8      	ldr	r0, [r7, #12]
   13062:	f7fa fdfb 	bl	dc5c <mp_obj_get_type>
   13066:	61b8      	str	r0, [r7, #24]
    GET_STR_DATA_LEN(self_in, self_data, self_len);
   13068:	68f8      	ldr	r0, [r7, #12]
   1306a:	f7ff fb0b 	bl	12684 <MP_OBJ_IS_QSTR>
   1306e:	4603      	mov	r3, r0
   13070:	2b00      	cmp	r3, #0
   13072:	d009      	beq.n	13088 <bytes_subscr+0x34>
   13074:	68fb      	ldr	r3, [r7, #12]
   13076:	089b      	lsrs	r3, r3, #2
   13078:	f107 0210 	add.w	r2, r7, #16
   1307c:	4611      	mov	r1, r2
   1307e:	4618      	mov	r0, r3
   13080:	f7ee f9b4 	bl	13ec <qstr_data>
   13084:	61f8      	str	r0, [r7, #28]
   13086:	e005      	b.n	13094 <bytes_subscr+0x40>
   13088:	68fb      	ldr	r3, [r7, #12]
   1308a:	689b      	ldr	r3, [r3, #8]
   1308c:	613b      	str	r3, [r7, #16]
   1308e:	68fb      	ldr	r3, [r7, #12]
   13090:	68db      	ldr	r3, [r3, #12]
   13092:	61fb      	str	r3, [r7, #28]
    if (value == MP_OBJ_SENTINEL) {
   13094:	687b      	ldr	r3, [r7, #4]
   13096:	2b08      	cmp	r3, #8
   13098:	d11b      	bne.n	130d2 <bytes_subscr+0x7e>
                mp_raise_NotImplementedError("only slices with step=1 (aka None) are supported");
            }
            return mp_obj_new_str_of_type(type, self_data + slice.start, slice.stop - slice.start);
        }
#endif
        size_t index_val = mp_get_index(type, self_len, index, false);
   1309a:	6939      	ldr	r1, [r7, #16]
   1309c:	2300      	movs	r3, #0
   1309e:	68ba      	ldr	r2, [r7, #8]
   130a0:	69b8      	ldr	r0, [r7, #24]
   130a2:	f7fb f8a7 	bl	e1f4 <mp_get_index>
   130a6:	6178      	str	r0, [r7, #20]
        // If we have unicode enabled the type will always be bytes, so take the short cut.
        if (MICROPY_PY_BUILTINS_STR_UNICODE || type == &mp_type_bytes) {
   130a8:	69bb      	ldr	r3, [r7, #24]
   130aa:	4a0c      	ldr	r2, [pc, #48]	; (130dc <bytes_subscr+0x88>)
   130ac:	4293      	cmp	r3, r2
   130ae:	d107      	bne.n	130c0 <bytes_subscr+0x6c>
            return MP_OBJ_NEW_SMALL_INT(self_data[index_val]);
   130b0:	69fa      	ldr	r2, [r7, #28]
   130b2:	697b      	ldr	r3, [r7, #20]
   130b4:	4413      	add	r3, r2
   130b6:	781b      	ldrb	r3, [r3, #0]
   130b8:	005b      	lsls	r3, r3, #1
   130ba:	f043 0301 	orr.w	r3, r3, #1
   130be:	e009      	b.n	130d4 <bytes_subscr+0x80>
        } else {
            return mp_obj_new_str_via_qstr((char*)&self_data[index_val], 1);
   130c0:	69fa      	ldr	r2, [r7, #28]
   130c2:	697b      	ldr	r3, [r7, #20]
   130c4:	4413      	add	r3, r2
   130c6:	2101      	movs	r1, #1
   130c8:	4618      	mov	r0, r3
   130ca:	f002 fb35 	bl	15738 <mp_obj_new_str_via_qstr>
   130ce:	4603      	mov	r3, r0
   130d0:	e000      	b.n	130d4 <bytes_subscr+0x80>
        }
    } else {
        return MP_OBJ_NULL; // op not supported
   130d2:	2300      	movs	r3, #0
    }
}
   130d4:	4618      	mov	r0, r3
   130d6:	3720      	adds	r7, #32
   130d8:	46bd      	mov	sp, r7
   130da:	bd80      	pop	{r7, pc}
   130dc:	000257ec 	.word	0x000257ec

000130e0 <str_join>:

STATIC mp_obj_t str_join(mp_obj_t self_in, mp_obj_t arg) {
   130e0:	b590      	push	{r4, r7, lr}
   130e2:	b093      	sub	sp, #76	; 0x4c
   130e4:	af00      	add	r7, sp, #0
   130e6:	6078      	str	r0, [r7, #4]
   130e8:	6039      	str	r1, [r7, #0]
    mp_check_self(MP_OBJ_IS_STR_OR_BYTES(self_in));
   130ea:	6878      	ldr	r0, [r7, #4]
   130ec:	f7ff faca 	bl	12684 <MP_OBJ_IS_QSTR>
   130f0:	4603      	mov	r3, r0
   130f2:	2b00      	cmp	r3, #0
   130f4:	d112      	bne.n	1311c <str_join+0x3c>
   130f6:	6878      	ldr	r0, [r7, #4]
   130f8:	f7ff fad6 	bl	126a8 <MP_OBJ_IS_OBJ>
   130fc:	4603      	mov	r3, r0
   130fe:	2b00      	cmp	r3, #0
   13100:	d005      	beq.n	1310e <str_join+0x2e>
   13102:	687b      	ldr	r3, [r7, #4]
   13104:	681b      	ldr	r3, [r3, #0]
   13106:	699b      	ldr	r3, [r3, #24]
   13108:	4a78      	ldr	r2, [pc, #480]	; (132ec <str_join+0x20c>)
   1310a:	4293      	cmp	r3, r2
   1310c:	d006      	beq.n	1311c <str_join+0x3c>
   1310e:	4b78      	ldr	r3, [pc, #480]	; (132f0 <str_join+0x210>)
   13110:	4a78      	ldr	r2, [pc, #480]	; (132f4 <str_join+0x214>)
   13112:	f240 11c1 	movw	r1, #449	; 0x1c1
   13116:	4878      	ldr	r0, [pc, #480]	; (132f8 <str_join+0x218>)
   13118:	f009 fee2 	bl	1cee0 <__assert_func>
    const mp_obj_type_t *self_type = mp_obj_get_type(self_in);
   1311c:	6878      	ldr	r0, [r7, #4]
   1311e:	f7fa fd9d 	bl	dc5c <mp_obj_get_type>
   13122:	62b8      	str	r0, [r7, #40]	; 0x28

    // get separation string
    GET_STR_DATA_LEN(self_in, sep_str, sep_len);
   13124:	6878      	ldr	r0, [r7, #4]
   13126:	f7ff faad 	bl	12684 <MP_OBJ_IS_QSTR>
   1312a:	4603      	mov	r3, r0
   1312c:	2b00      	cmp	r3, #0
   1312e:	d009      	beq.n	13144 <str_join+0x64>
   13130:	687b      	ldr	r3, [r7, #4]
   13132:	089b      	lsrs	r3, r3, #2
   13134:	f107 0224 	add.w	r2, r7, #36	; 0x24
   13138:	4611      	mov	r1, r2
   1313a:	4618      	mov	r0, r3
   1313c:	f7ee f956 	bl	13ec <qstr_data>
   13140:	6478      	str	r0, [r7, #68]	; 0x44
   13142:	e005      	b.n	13150 <str_join+0x70>
   13144:	687b      	ldr	r3, [r7, #4]
   13146:	689b      	ldr	r3, [r3, #8]
   13148:	627b      	str	r3, [r7, #36]	; 0x24
   1314a:	687b      	ldr	r3, [r7, #4]
   1314c:	68db      	ldr	r3, [r3, #12]
   1314e:	647b      	str	r3, [r7, #68]	; 0x44

    // process args
    size_t seq_len;
    mp_obj_t *seq_items;

    if (!MP_OBJ_IS_TYPE(arg, &mp_type_list) && !MP_OBJ_IS_TYPE(arg, &mp_type_tuple)) {
   13150:	683b      	ldr	r3, [r7, #0]
   13152:	4618      	mov	r0, r3
   13154:	f7ff faa8 	bl	126a8 <MP_OBJ_IS_OBJ>
   13158:	4603      	mov	r3, r0
   1315a:	f083 0301 	eor.w	r3, r3, #1
   1315e:	b2db      	uxtb	r3, r3
   13160:	2b00      	cmp	r3, #0
   13162:	d104      	bne.n	1316e <str_join+0x8e>
   13164:	683b      	ldr	r3, [r7, #0]
   13166:	681b      	ldr	r3, [r3, #0]
   13168:	4a64      	ldr	r2, [pc, #400]	; (132fc <str_join+0x21c>)
   1316a:	4293      	cmp	r3, r2
   1316c:	d017      	beq.n	1319e <str_join+0xbe>
   1316e:	683b      	ldr	r3, [r7, #0]
   13170:	4618      	mov	r0, r3
   13172:	f7ff fa99 	bl	126a8 <MP_OBJ_IS_OBJ>
   13176:	4603      	mov	r3, r0
   13178:	f083 0301 	eor.w	r3, r3, #1
   1317c:	b2db      	uxtb	r3, r3
   1317e:	2b00      	cmp	r3, #0
   13180:	d104      	bne.n	1318c <str_join+0xac>
   13182:	683b      	ldr	r3, [r7, #0]
   13184:	681b      	ldr	r3, [r3, #0]
   13186:	4a5e      	ldr	r2, [pc, #376]	; (13300 <str_join+0x220>)
   13188:	4293      	cmp	r3, r2
   1318a:	d008      	beq.n	1319e <str_join+0xbe>
        // arg is not a list nor a tuple, try to convert it to a list
        // TODO: Try to optimize?
        arg = mp_type_list.make_new(&mp_type_list, 1, 0, &arg);
   1318c:	4b5b      	ldr	r3, [pc, #364]	; (132fc <str_join+0x21c>)
   1318e:	68dc      	ldr	r4, [r3, #12]
   13190:	463b      	mov	r3, r7
   13192:	2200      	movs	r2, #0
   13194:	2101      	movs	r1, #1
   13196:	4859      	ldr	r0, [pc, #356]	; (132fc <str_join+0x21c>)
   13198:	47a0      	blx	r4
   1319a:	4603      	mov	r3, r0
   1319c:	603b      	str	r3, [r7, #0]
    }
    mp_obj_get_array(arg, &seq_len, &seq_items);
   1319e:	683b      	ldr	r3, [r7, #0]
   131a0:	f107 021c 	add.w	r2, r7, #28
   131a4:	f107 0120 	add.w	r1, r7, #32
   131a8:	4618      	mov	r0, r3
   131aa:	f7fa ffd3 	bl	e154 <mp_obj_get_array>

    // count required length
    size_t required_len = 0;
   131ae:	2300      	movs	r3, #0
   131b0:	643b      	str	r3, [r7, #64]	; 0x40
    for (size_t i = 0; i < seq_len; i++) {
   131b2:	2300      	movs	r3, #0
   131b4:	63fb      	str	r3, [r7, #60]	; 0x3c
   131b6:	e039      	b.n	1322c <str_join+0x14c>
        if (mp_obj_get_type(seq_items[i]) != self_type) {
   131b8:	69fa      	ldr	r2, [r7, #28]
   131ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   131bc:	009b      	lsls	r3, r3, #2
   131be:	4413      	add	r3, r2
   131c0:	681b      	ldr	r3, [r3, #0]
   131c2:	4618      	mov	r0, r3
   131c4:	f7fa fd4a 	bl	dc5c <mp_obj_get_type>
   131c8:	4602      	mov	r2, r0
   131ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
   131cc:	429a      	cmp	r2, r3
   131ce:	d002      	beq.n	131d6 <str_join+0xf6>
            mp_raise_TypeError(
   131d0:	484c      	ldr	r0, [pc, #304]	; (13304 <str_join+0x224>)
   131d2:	f7fa f8db 	bl	d38c <mp_raise_TypeError>
                "join expects a list of str/bytes objects consistent with self object");
        }
        if (i > 0) {
   131d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   131d8:	2b00      	cmp	r3, #0
   131da:	d003      	beq.n	131e4 <str_join+0x104>
            required_len += sep_len;
   131dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   131de:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   131e0:	4413      	add	r3, r2
   131e2:	643b      	str	r3, [r7, #64]	; 0x40
        }
        GET_STR_LEN(seq_items[i], l);
   131e4:	69fa      	ldr	r2, [r7, #28]
   131e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   131e8:	009b      	lsls	r3, r3, #2
   131ea:	4413      	add	r3, r2
   131ec:	681b      	ldr	r3, [r3, #0]
   131ee:	4618      	mov	r0, r3
   131f0:	f7ff fa48 	bl	12684 <MP_OBJ_IS_QSTR>
   131f4:	4603      	mov	r3, r0
   131f6:	2b00      	cmp	r3, #0
   131f8:	d00a      	beq.n	13210 <str_join+0x130>
   131fa:	69fa      	ldr	r2, [r7, #28]
   131fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   131fe:	009b      	lsls	r3, r3, #2
   13200:	4413      	add	r3, r2
   13202:	681b      	ldr	r3, [r3, #0]
   13204:	089b      	lsrs	r3, r3, #2
   13206:	4618      	mov	r0, r3
   13208:	f7ee f8d3 	bl	13b2 <qstr_len>
   1320c:	63b8      	str	r0, [r7, #56]	; 0x38
   1320e:	e006      	b.n	1321e <str_join+0x13e>
   13210:	69fa      	ldr	r2, [r7, #28]
   13212:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   13214:	009b      	lsls	r3, r3, #2
   13216:	4413      	add	r3, r2
   13218:	681b      	ldr	r3, [r3, #0]
   1321a:	689b      	ldr	r3, [r3, #8]
   1321c:	63bb      	str	r3, [r7, #56]	; 0x38
        required_len += l;
   1321e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   13220:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   13222:	4413      	add	r3, r2
   13224:	643b      	str	r3, [r7, #64]	; 0x40
    for (size_t i = 0; i < seq_len; i++) {
   13226:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   13228:	3301      	adds	r3, #1
   1322a:	63fb      	str	r3, [r7, #60]	; 0x3c
   1322c:	6a3b      	ldr	r3, [r7, #32]
   1322e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   13230:	429a      	cmp	r2, r3
   13232:	d3c1      	bcc.n	131b8 <str_join+0xd8>
    }

    // make joined string
    vstr_t vstr;
    vstr_init_len(&vstr, required_len);
   13234:	f107 030c 	add.w	r3, r7, #12
   13238:	6c39      	ldr	r1, [r7, #64]	; 0x40
   1323a:	4618      	mov	r0, r3
   1323c:	f7ee f96f 	bl	151e <vstr_init_len>
    byte *data = (byte*)vstr.buf;
   13240:	697b      	ldr	r3, [r7, #20]
   13242:	637b      	str	r3, [r7, #52]	; 0x34
    for (size_t i = 0; i < seq_len; i++) {
   13244:	2300      	movs	r3, #0
   13246:	633b      	str	r3, [r7, #48]	; 0x30
   13248:	e040      	b.n	132cc <str_join+0x1ec>
        if (i > 0) {
   1324a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1324c:	2b00      	cmp	r3, #0
   1324e:	d009      	beq.n	13264 <str_join+0x184>
            memcpy(data, sep_str, sep_len);
   13250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   13252:	461a      	mov	r2, r3
   13254:	6c79      	ldr	r1, [r7, #68]	; 0x44
   13256:	6b78      	ldr	r0, [r7, #52]	; 0x34
   13258:	f00b f96a 	bl	1e530 <memcpy>
            data += sep_len;
   1325c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1325e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   13260:	4413      	add	r3, r2
   13262:	637b      	str	r3, [r7, #52]	; 0x34
        }
        GET_STR_DATA_LEN(seq_items[i], s, l);
   13264:	69fa      	ldr	r2, [r7, #28]
   13266:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   13268:	009b      	lsls	r3, r3, #2
   1326a:	4413      	add	r3, r2
   1326c:	681b      	ldr	r3, [r3, #0]
   1326e:	4618      	mov	r0, r3
   13270:	f7ff fa08 	bl	12684 <MP_OBJ_IS_QSTR>
   13274:	4603      	mov	r3, r0
   13276:	2b00      	cmp	r3, #0
   13278:	d00d      	beq.n	13296 <str_join+0x1b6>
   1327a:	69fa      	ldr	r2, [r7, #28]
   1327c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1327e:	009b      	lsls	r3, r3, #2
   13280:	4413      	add	r3, r2
   13282:	681b      	ldr	r3, [r3, #0]
   13284:	089b      	lsrs	r3, r3, #2
   13286:	f107 0208 	add.w	r2, r7, #8
   1328a:	4611      	mov	r1, r2
   1328c:	4618      	mov	r0, r3
   1328e:	f7ee f8ad 	bl	13ec <qstr_data>
   13292:	62f8      	str	r0, [r7, #44]	; 0x2c
   13294:	e00d      	b.n	132b2 <str_join+0x1d2>
   13296:	69fa      	ldr	r2, [r7, #28]
   13298:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1329a:	009b      	lsls	r3, r3, #2
   1329c:	4413      	add	r3, r2
   1329e:	681b      	ldr	r3, [r3, #0]
   132a0:	689b      	ldr	r3, [r3, #8]
   132a2:	60bb      	str	r3, [r7, #8]
   132a4:	69fa      	ldr	r2, [r7, #28]
   132a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   132a8:	009b      	lsls	r3, r3, #2
   132aa:	4413      	add	r3, r2
   132ac:	681b      	ldr	r3, [r3, #0]
   132ae:	68db      	ldr	r3, [r3, #12]
   132b0:	62fb      	str	r3, [r7, #44]	; 0x2c
        memcpy(data, s, l);
   132b2:	68bb      	ldr	r3, [r7, #8]
   132b4:	461a      	mov	r2, r3
   132b6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
   132b8:	6b78      	ldr	r0, [r7, #52]	; 0x34
   132ba:	f00b f939 	bl	1e530 <memcpy>
        data += l;
   132be:	68bb      	ldr	r3, [r7, #8]
   132c0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   132c2:	4413      	add	r3, r2
   132c4:	637b      	str	r3, [r7, #52]	; 0x34
    for (size_t i = 0; i < seq_len; i++) {
   132c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   132c8:	3301      	adds	r3, #1
   132ca:	633b      	str	r3, [r7, #48]	; 0x30
   132cc:	6a3b      	ldr	r3, [r7, #32]
   132ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   132d0:	429a      	cmp	r2, r3
   132d2:	d3ba      	bcc.n	1324a <str_join+0x16a>
    }

    // return joined string
    return mp_obj_new_str_from_vstr(self_type, &vstr);
   132d4:	f107 030c 	add.w	r3, r7, #12
   132d8:	4619      	mov	r1, r3
   132da:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   132dc:	f002 fa3d 	bl	1575a <mp_obj_new_str_from_vstr>
   132e0:	4603      	mov	r3, r0
}
   132e2:	4618      	mov	r0, r3
   132e4:	374c      	adds	r7, #76	; 0x4c
   132e6:	46bd      	mov	sp, r7
   132e8:	bd90      	pop	{r4, r7, pc}
   132ea:	bf00      	nop
   132ec:	00012d2f 	.word	0x00012d2f
   132f0:	0002526c 	.word	0x0002526c
   132f4:	0002585c 	.word	0x0002585c
   132f8:	000252f4 	.word	0x000252f4
   132fc:	00024e44 	.word	0x00024e44
   13300:	00025a34 	.word	0x00025a34
   13304:	00025308 	.word	0x00025308

00013308 <mp_obj_str_split>:
MP_DEFINE_CONST_FUN_OBJ_2(str_join_obj, str_join);

mp_obj_t mp_obj_str_split(size_t n_args, const mp_obj_t *args) {
   13308:	b580      	push	{r7, lr}
   1330a:	b08e      	sub	sp, #56	; 0x38
   1330c:	af00      	add	r7, sp, #0
   1330e:	6078      	str	r0, [r7, #4]
   13310:	6039      	str	r1, [r7, #0]
    const mp_obj_type_t *self_type = mp_obj_get_type(args[0]);
   13312:	683b      	ldr	r3, [r7, #0]
   13314:	681b      	ldr	r3, [r3, #0]
   13316:	4618      	mov	r0, r3
   13318:	f7fa fca0 	bl	dc5c <mp_obj_get_type>
   1331c:	62b8      	str	r0, [r7, #40]	; 0x28
    mp_int_t splits = -1;
   1331e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   13322:	637b      	str	r3, [r7, #52]	; 0x34
    mp_obj_t sep = mp_const_none;
   13324:	4b7b      	ldr	r3, [pc, #492]	; (13514 <mp_obj_str_split+0x20c>)
   13326:	633b      	str	r3, [r7, #48]	; 0x30
    if (n_args > 1) {
   13328:	687b      	ldr	r3, [r7, #4]
   1332a:	2b01      	cmp	r3, #1
   1332c:	d90c      	bls.n	13348 <mp_obj_str_split+0x40>
        sep = args[1];
   1332e:	683b      	ldr	r3, [r7, #0]
   13330:	685b      	ldr	r3, [r3, #4]
   13332:	633b      	str	r3, [r7, #48]	; 0x30
        if (n_args > 2) {
   13334:	687b      	ldr	r3, [r7, #4]
   13336:	2b02      	cmp	r3, #2
   13338:	d906      	bls.n	13348 <mp_obj_str_split+0x40>
            splits = mp_obj_get_int(args[2]);
   1333a:	683b      	ldr	r3, [r7, #0]
   1333c:	3308      	adds	r3, #8
   1333e:	681b      	ldr	r3, [r3, #0]
   13340:	4618      	mov	r0, r3
   13342:	f7fa fe67 	bl	e014 <mp_obj_get_int>
   13346:	6378      	str	r0, [r7, #52]	; 0x34
        }
    }

    mp_obj_t res = mp_obj_new_list(0, NULL);
   13348:	2100      	movs	r1, #0
   1334a:	2000      	movs	r0, #0
   1334c:	f7fe fcc5 	bl	11cda <mp_obj_new_list>
   13350:	6278      	str	r0, [r7, #36]	; 0x24
    GET_STR_DATA_LEN(args[0], s, len);
   13352:	683b      	ldr	r3, [r7, #0]
   13354:	681b      	ldr	r3, [r3, #0]
   13356:	4618      	mov	r0, r3
   13358:	f7ff f994 	bl	12684 <MP_OBJ_IS_QSTR>
   1335c:	4603      	mov	r3, r0
   1335e:	2b00      	cmp	r3, #0
   13360:	d00a      	beq.n	13378 <mp_obj_str_split+0x70>
   13362:	683b      	ldr	r3, [r7, #0]
   13364:	681b      	ldr	r3, [r3, #0]
   13366:	089b      	lsrs	r3, r3, #2
   13368:	f107 0210 	add.w	r2, r7, #16
   1336c:	4611      	mov	r1, r2
   1336e:	4618      	mov	r0, r3
   13370:	f7ee f83c 	bl	13ec <qstr_data>
   13374:	62f8      	str	r0, [r7, #44]	; 0x2c
   13376:	e007      	b.n	13388 <mp_obj_str_split+0x80>
   13378:	683b      	ldr	r3, [r7, #0]
   1337a:	681b      	ldr	r3, [r3, #0]
   1337c:	689b      	ldr	r3, [r3, #8]
   1337e:	613b      	str	r3, [r7, #16]
   13380:	683b      	ldr	r3, [r7, #0]
   13382:	681b      	ldr	r3, [r3, #0]
   13384:	68db      	ldr	r3, [r3, #12]
   13386:	62fb      	str	r3, [r7, #44]	; 0x2c
    const byte *top = s + len;
   13388:	693b      	ldr	r3, [r7, #16]
   1338a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   1338c:	4413      	add	r3, r2
   1338e:	623b      	str	r3, [r7, #32]

    if (sep == mp_const_none) {
   13390:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   13392:	4a60      	ldr	r2, [pc, #384]	; (13514 <mp_obj_str_split+0x20c>)
   13394:	4293      	cmp	r3, r2
   13396:	d167      	bne.n	13468 <mp_obj_str_split+0x160>
        // sep not given, so separate on whitespace

        // Initial whitespace is not counted as split, so we pre-do it
        while (s < top && unichar_isspace(*s)) s++;
   13398:	e002      	b.n	133a0 <mp_obj_str_split+0x98>
   1339a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1339c:	3301      	adds	r3, #1
   1339e:	62fb      	str	r3, [r7, #44]	; 0x2c
   133a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   133a2:	6a3b      	ldr	r3, [r7, #32]
   133a4:	429a      	cmp	r2, r3
   133a6:	d244      	bcs.n	13432 <mp_obj_str_split+0x12a>
   133a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   133aa:	781b      	ldrb	r3, [r3, #0]
   133ac:	4618      	mov	r0, r3
   133ae:	f7ef f8cd 	bl	254c <unichar_isspace>
   133b2:	4603      	mov	r3, r0
   133b4:	2b00      	cmp	r3, #0
   133b6:	d1f0      	bne.n	1339a <mp_obj_str_split+0x92>
        while (s < top && splits != 0) {
   133b8:	e03b      	b.n	13432 <mp_obj_str_split+0x12a>
            const byte *start = s;
   133ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   133bc:	61fb      	str	r3, [r7, #28]
            while (s < top && !unichar_isspace(*s)) s++;
   133be:	e002      	b.n	133c6 <mp_obj_str_split+0xbe>
   133c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   133c2:	3301      	adds	r3, #1
   133c4:	62fb      	str	r3, [r7, #44]	; 0x2c
   133c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   133c8:	6a3b      	ldr	r3, [r7, #32]
   133ca:	429a      	cmp	r2, r3
   133cc:	d20a      	bcs.n	133e4 <mp_obj_str_split+0xdc>
   133ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   133d0:	781b      	ldrb	r3, [r3, #0]
   133d2:	4618      	mov	r0, r3
   133d4:	f7ef f8ba 	bl	254c <unichar_isspace>
   133d8:	4603      	mov	r3, r0
   133da:	f083 0301 	eor.w	r3, r3, #1
   133de:	b2db      	uxtb	r3, r3
   133e0:	2b00      	cmp	r3, #0
   133e2:	d1ed      	bne.n	133c0 <mp_obj_str_split+0xb8>
            mp_obj_list_append(res, mp_obj_new_str_of_type(self_type, start, s - start));
   133e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   133e6:	69fb      	ldr	r3, [r7, #28]
   133e8:	1ad3      	subs	r3, r2, r3
   133ea:	461a      	mov	r2, r3
   133ec:	69f9      	ldr	r1, [r7, #28]
   133ee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   133f0:	f002 f987 	bl	15702 <mp_obj_new_str_of_type>
   133f4:	4603      	mov	r3, r0
   133f6:	4619      	mov	r1, r3
   133f8:	6a78      	ldr	r0, [r7, #36]	; 0x24
   133fa:	f7fe f802 	bl	11402 <mp_obj_list_append>
            if (s >= top) {
   133fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   13400:	6a3b      	ldr	r3, [r7, #32]
   13402:	429a      	cmp	r2, r3
   13404:	d21d      	bcs.n	13442 <mp_obj_str_split+0x13a>
                break;
            }
            while (s < top && unichar_isspace(*s)) s++;
   13406:	e002      	b.n	1340e <mp_obj_str_split+0x106>
   13408:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1340a:	3301      	adds	r3, #1
   1340c:	62fb      	str	r3, [r7, #44]	; 0x2c
   1340e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   13410:	6a3b      	ldr	r3, [r7, #32]
   13412:	429a      	cmp	r2, r3
   13414:	d207      	bcs.n	13426 <mp_obj_str_split+0x11e>
   13416:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   13418:	781b      	ldrb	r3, [r3, #0]
   1341a:	4618      	mov	r0, r3
   1341c:	f7ef f896 	bl	254c <unichar_isspace>
   13420:	4603      	mov	r3, r0
   13422:	2b00      	cmp	r3, #0
   13424:	d1f0      	bne.n	13408 <mp_obj_str_split+0x100>
            if (splits > 0) {
   13426:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   13428:	2b00      	cmp	r3, #0
   1342a:	dd02      	ble.n	13432 <mp_obj_str_split+0x12a>
                splits--;
   1342c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1342e:	3b01      	subs	r3, #1
   13430:	637b      	str	r3, [r7, #52]	; 0x34
        while (s < top && splits != 0) {
   13432:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   13434:	6a3b      	ldr	r3, [r7, #32]
   13436:	429a      	cmp	r2, r3
   13438:	d204      	bcs.n	13444 <mp_obj_str_split+0x13c>
   1343a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1343c:	2b00      	cmp	r3, #0
   1343e:	d1bc      	bne.n	133ba <mp_obj_str_split+0xb2>
   13440:	e000      	b.n	13444 <mp_obj_str_split+0x13c>
                break;
   13442:	bf00      	nop
            }
        }

        if (s < top) {
   13444:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   13446:	6a3b      	ldr	r3, [r7, #32]
   13448:	429a      	cmp	r2, r3
   1344a:	d25d      	bcs.n	13508 <mp_obj_str_split+0x200>
            mp_obj_list_append(res, mp_obj_new_str_of_type(self_type, s, top - s));
   1344c:	6a3a      	ldr	r2, [r7, #32]
   1344e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   13450:	1ad3      	subs	r3, r2, r3
   13452:	461a      	mov	r2, r3
   13454:	6af9      	ldr	r1, [r7, #44]	; 0x2c
   13456:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   13458:	f002 f953 	bl	15702 <mp_obj_new_str_of_type>
   1345c:	4603      	mov	r3, r0
   1345e:	4619      	mov	r1, r3
   13460:	6a78      	ldr	r0, [r7, #36]	; 0x24
   13462:	f7fd ffce 	bl	11402 <mp_obj_list_append>
   13466:	e04f      	b.n	13508 <mp_obj_str_split+0x200>
        }

    } else {
        // sep given
        if (mp_obj_get_type(sep) != self_type) {
   13468:	6b38      	ldr	r0, [r7, #48]	; 0x30
   1346a:	f7fa fbf7 	bl	dc5c <mp_obj_get_type>
   1346e:	4602      	mov	r2, r0
   13470:	6abb      	ldr	r3, [r7, #40]	; 0x28
   13472:	429a      	cmp	r2, r3
   13474:	d002      	beq.n	1347c <mp_obj_str_split+0x174>
            bad_implicit_conversion(sep);
   13476:	6b38      	ldr	r0, [r7, #48]	; 0x30
   13478:	f002 fac1 	bl	159fe <bad_implicit_conversion>
        }

        size_t sep_len;
        const char *sep_str = mp_obj_str_get_data(sep, &sep_len);
   1347c:	f107 030c 	add.w	r3, r7, #12
   13480:	4619      	mov	r1, r3
   13482:	6b38      	ldr	r0, [r7, #48]	; 0x30
   13484:	f002 fb2a 	bl	15adc <mp_obj_str_get_data>
   13488:	61b8      	str	r0, [r7, #24]

        if (sep_len == 0) {
   1348a:	68fb      	ldr	r3, [r7, #12]
   1348c:	2b00      	cmp	r3, #0
   1348e:	d102      	bne.n	13496 <mp_obj_str_split+0x18e>
            mp_raise_ValueError("empty separator");
   13490:	4821      	ldr	r0, [pc, #132]	; (13518 <mp_obj_str_split+0x210>)
   13492:	f7f9 ff70 	bl	d376 <mp_raise_ValueError>
        }

        for (;;) {
            const byte *start = s;
   13496:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   13498:	617b      	str	r3, [r7, #20]
            for (;;) {
                if (splits == 0 || s + sep_len > top) {
   1349a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1349c:	2b00      	cmp	r3, #0
   1349e:	d005      	beq.n	134ac <mp_obj_str_split+0x1a4>
   134a0:	68fb      	ldr	r3, [r7, #12]
   134a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   134a4:	441a      	add	r2, r3
   134a6:	6a3b      	ldr	r3, [r7, #32]
   134a8:	429a      	cmp	r2, r3
   134aa:	d902      	bls.n	134b2 <mp_obj_str_split+0x1aa>
                    s = top;
   134ac:	6a3b      	ldr	r3, [r7, #32]
   134ae:	62fb      	str	r3, [r7, #44]	; 0x2c
                    break;
   134b0:	e00d      	b.n	134ce <mp_obj_str_split+0x1c6>
                } else if (memcmp(s, sep_str, sep_len) == 0) {
   134b2:	68fb      	ldr	r3, [r7, #12]
   134b4:	461a      	mov	r2, r3
   134b6:	69b9      	ldr	r1, [r7, #24]
   134b8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   134ba:	f00b f91e 	bl	1e6fa <memcmp>
   134be:	4603      	mov	r3, r0
   134c0:	2b00      	cmp	r3, #0
   134c2:	d003      	beq.n	134cc <mp_obj_str_split+0x1c4>
                    break;
                }
                s++;
   134c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   134c6:	3301      	adds	r3, #1
   134c8:	62fb      	str	r3, [r7, #44]	; 0x2c
                if (splits == 0 || s + sep_len > top) {
   134ca:	e7e6      	b.n	1349a <mp_obj_str_split+0x192>
                    break;
   134cc:	bf00      	nop
            }
            mp_obj_list_append(res, mp_obj_new_str_of_type(self_type, start, s - start));
   134ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   134d0:	697b      	ldr	r3, [r7, #20]
   134d2:	1ad3      	subs	r3, r2, r3
   134d4:	461a      	mov	r2, r3
   134d6:	6979      	ldr	r1, [r7, #20]
   134d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   134da:	f002 f912 	bl	15702 <mp_obj_new_str_of_type>
   134de:	4603      	mov	r3, r0
   134e0:	4619      	mov	r1, r3
   134e2:	6a78      	ldr	r0, [r7, #36]	; 0x24
   134e4:	f7fd ff8d 	bl	11402 <mp_obj_list_append>
            if (s >= top) {
   134e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   134ea:	6a3b      	ldr	r3, [r7, #32]
   134ec:	429a      	cmp	r2, r3
   134ee:	d20a      	bcs.n	13506 <mp_obj_str_split+0x1fe>
                break;
            }
            s += sep_len;
   134f0:	68fb      	ldr	r3, [r7, #12]
   134f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   134f4:	4413      	add	r3, r2
   134f6:	62fb      	str	r3, [r7, #44]	; 0x2c
            if (splits > 0) {
   134f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   134fa:	2b00      	cmp	r3, #0
   134fc:	ddcb      	ble.n	13496 <mp_obj_str_split+0x18e>
                splits--;
   134fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   13500:	3b01      	subs	r3, #1
   13502:	637b      	str	r3, [r7, #52]	; 0x34
        for (;;) {
   13504:	e7c7      	b.n	13496 <mp_obj_str_split+0x18e>
                break;
   13506:	bf00      	nop
            }
        }
    }

    return res;
   13508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   1350a:	4618      	mov	r0, r3
   1350c:	3738      	adds	r7, #56	; 0x38
   1350e:	46bd      	mov	sp, r7
   13510:	bd80      	pop	{r7, pc}
   13512:	bf00      	nop
   13514:	0002511c 	.word	0x0002511c
   13518:	00025358 	.word	0x00025358

0001351c <str_rsplit>:
    return res;
}
MP_DEFINE_CONST_FUN_OBJ_KW(str_splitlines_obj, 1, str_splitlines);
#endif

STATIC mp_obj_t str_rsplit(size_t n_args, const mp_obj_t *args) {
   1351c:	b590      	push	{r4, r7, lr}
   1351e:	b091      	sub	sp, #68	; 0x44
   13520:	af00      	add	r7, sp, #0
   13522:	6078      	str	r0, [r7, #4]
   13524:	6039      	str	r1, [r7, #0]
    if (n_args < 3) {
   13526:	687b      	ldr	r3, [r7, #4]
   13528:	2b02      	cmp	r3, #2
   1352a:	d805      	bhi.n	13538 <str_rsplit+0x1c>
        // If we don't have split limit, it doesn't matter from which side
        // we split.
        return mp_obj_str_split(n_args, args);
   1352c:	6839      	ldr	r1, [r7, #0]
   1352e:	6878      	ldr	r0, [r7, #4]
   13530:	f7ff feea 	bl	13308 <mp_obj_str_split>
   13534:	4603      	mov	r3, r0
   13536:	e0cc      	b.n	136d2 <str_rsplit+0x1b6>
    }
    const mp_obj_type_t *self_type = mp_obj_get_type(args[0]);
   13538:	683b      	ldr	r3, [r7, #0]
   1353a:	681b      	ldr	r3, [r3, #0]
   1353c:	4618      	mov	r0, r3
   1353e:	f7fa fb8d 	bl	dc5c <mp_obj_get_type>
   13542:	62f8      	str	r0, [r7, #44]	; 0x2c
    mp_obj_t sep = args[1];
   13544:	683b      	ldr	r3, [r7, #0]
   13546:	685b      	ldr	r3, [r3, #4]
   13548:	62bb      	str	r3, [r7, #40]	; 0x28
    GET_STR_DATA_LEN(args[0], s, len);
   1354a:	683b      	ldr	r3, [r7, #0]
   1354c:	681b      	ldr	r3, [r3, #0]
   1354e:	4618      	mov	r0, r3
   13550:	f7ff f898 	bl	12684 <MP_OBJ_IS_QSTR>
   13554:	4603      	mov	r3, r0
   13556:	2b00      	cmp	r3, #0
   13558:	d00a      	beq.n	13570 <str_rsplit+0x54>
   1355a:	683b      	ldr	r3, [r7, #0]
   1355c:	681b      	ldr	r3, [r3, #0]
   1355e:	089b      	lsrs	r3, r3, #2
   13560:	f107 0210 	add.w	r2, r7, #16
   13564:	4611      	mov	r1, r2
   13566:	4618      	mov	r0, r3
   13568:	f7ed ff40 	bl	13ec <qstr_data>
   1356c:	63f8      	str	r0, [r7, #60]	; 0x3c
   1356e:	e007      	b.n	13580 <str_rsplit+0x64>
   13570:	683b      	ldr	r3, [r7, #0]
   13572:	681b      	ldr	r3, [r3, #0]
   13574:	689b      	ldr	r3, [r3, #8]
   13576:	613b      	str	r3, [r7, #16]
   13578:	683b      	ldr	r3, [r7, #0]
   1357a:	681b      	ldr	r3, [r3, #0]
   1357c:	68db      	ldr	r3, [r3, #12]
   1357e:	63fb      	str	r3, [r7, #60]	; 0x3c

    mp_int_t splits = mp_obj_get_int(args[2]);
   13580:	683b      	ldr	r3, [r7, #0]
   13582:	3308      	adds	r3, #8
   13584:	681b      	ldr	r3, [r3, #0]
   13586:	4618      	mov	r0, r3
   13588:	f7fa fd44 	bl	e014 <mp_obj_get_int>
   1358c:	63b8      	str	r0, [r7, #56]	; 0x38
    if (splits < 0) {
   1358e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   13590:	2b00      	cmp	r3, #0
   13592:	da05      	bge.n	135a0 <str_rsplit+0x84>
        // Negative limit means no limit, so delegate to split().
        return mp_obj_str_split(n_args, args);
   13594:	6839      	ldr	r1, [r7, #0]
   13596:	6878      	ldr	r0, [r7, #4]
   13598:	f7ff feb6 	bl	13308 <mp_obj_str_split>
   1359c:	4603      	mov	r3, r0
   1359e:	e098      	b.n	136d2 <str_rsplit+0x1b6>
    }

    mp_int_t org_splits = splits;
   135a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   135a2:	627b      	str	r3, [r7, #36]	; 0x24
    // Preallocate list to the max expected # of elements, as we
    // will fill it from the end.
    mp_obj_list_t *res = MP_OBJ_TO_PTR(mp_obj_new_list(splits + 1, NULL));
   135a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   135a6:	3301      	adds	r3, #1
   135a8:	2100      	movs	r1, #0
   135aa:	4618      	mov	r0, r3
   135ac:	f7fe fb95 	bl	11cda <mp_obj_new_list>
   135b0:	6238      	str	r0, [r7, #32]
    mp_int_t idx = splits;
   135b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   135b4:	637b      	str	r3, [r7, #52]	; 0x34

    if (sep == mp_const_none) {
   135b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
   135b8:	4a48      	ldr	r2, [pc, #288]	; (136dc <str_rsplit+0x1c0>)
   135ba:	4293      	cmp	r3, r2
   135bc:	d102      	bne.n	135c4 <str_rsplit+0xa8>
        mp_raise_NotImplementedError("rsplit(None,n)");
   135be:	4848      	ldr	r0, [pc, #288]	; (136e0 <str_rsplit+0x1c4>)
   135c0:	f7f9 ff00 	bl	d3c4 <mp_raise_NotImplementedError>
    } else {
        size_t sep_len;
        const char *sep_str = mp_obj_str_get_data(sep, &sep_len);
   135c4:	f107 030c 	add.w	r3, r7, #12
   135c8:	4619      	mov	r1, r3
   135ca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   135cc:	f002 fa86 	bl	15adc <mp_obj_str_get_data>
   135d0:	61f8      	str	r0, [r7, #28]

        if (sep_len == 0) {
   135d2:	68fb      	ldr	r3, [r7, #12]
   135d4:	2b00      	cmp	r3, #0
   135d6:	d102      	bne.n	135de <str_rsplit+0xc2>
            mp_raise_ValueError("empty separator");
   135d8:	4842      	ldr	r0, [pc, #264]	; (136e4 <str_rsplit+0x1c8>)
   135da:	f7f9 fecc 	bl	d376 <mp_raise_ValueError>
        }

        const byte *beg = s;
   135de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   135e0:	61bb      	str	r3, [r7, #24]
        const byte *last = s + len;
   135e2:	693b      	ldr	r3, [r7, #16]
   135e4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   135e6:	4413      	add	r3, r2
   135e8:	633b      	str	r3, [r7, #48]	; 0x30
        for (;;) {
            s = last - sep_len;
   135ea:	68fb      	ldr	r3, [r7, #12]
   135ec:	425b      	negs	r3, r3
   135ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   135f0:	4413      	add	r3, r2
   135f2:	63fb      	str	r3, [r7, #60]	; 0x3c
            for (;;) {
                if (splits == 0 || s < beg) {
   135f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   135f6:	2b00      	cmp	r3, #0
   135f8:	d011      	beq.n	1361e <str_rsplit+0x102>
   135fa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   135fc:	69bb      	ldr	r3, [r7, #24]
   135fe:	429a      	cmp	r2, r3
   13600:	d30d      	bcc.n	1361e <str_rsplit+0x102>
                    break;
                } else if (memcmp(s, sep_str, sep_len) == 0) {
   13602:	68fb      	ldr	r3, [r7, #12]
   13604:	461a      	mov	r2, r3
   13606:	69f9      	ldr	r1, [r7, #28]
   13608:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
   1360a:	f00b f876 	bl	1e6fa <memcmp>
   1360e:	4603      	mov	r3, r0
   13610:	2b00      	cmp	r3, #0
   13612:	d003      	beq.n	1361c <str_rsplit+0x100>
                    break;
                }
                s--;
   13614:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   13616:	3b01      	subs	r3, #1
   13618:	63fb      	str	r3, [r7, #60]	; 0x3c
                if (splits == 0 || s < beg) {
   1361a:	e7eb      	b.n	135f4 <str_rsplit+0xd8>
                    break;
   1361c:	bf00      	nop
            }
            if (s < beg || splits == 0) {
   1361e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   13620:	69bb      	ldr	r3, [r7, #24]
   13622:	429a      	cmp	r2, r3
   13624:	d302      	bcc.n	1362c <str_rsplit+0x110>
   13626:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   13628:	2b00      	cmp	r3, #0
   1362a:	d113      	bne.n	13654 <str_rsplit+0x138>
                res->items[idx] = mp_obj_new_str_of_type(self_type, beg, last - beg);
   1362c:	6a3b      	ldr	r3, [r7, #32]
   1362e:	68da      	ldr	r2, [r3, #12]
   13630:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   13632:	009b      	lsls	r3, r3, #2
   13634:	18d4      	adds	r4, r2, r3
   13636:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   13638:	69bb      	ldr	r3, [r7, #24]
   1363a:	1ad3      	subs	r3, r2, r3
   1363c:	461a      	mov	r2, r3
   1363e:	69b9      	ldr	r1, [r7, #24]
   13640:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   13642:	f002 f85e 	bl	15702 <mp_obj_new_str_of_type>
   13646:	4603      	mov	r3, r0
   13648:	6023      	str	r3, [r4, #0]
                break;
   1364a:	bf00      	nop
            }
            res->items[idx--] = mp_obj_new_str_of_type(self_type, s + sep_len, last - s - sep_len);
            last = s;
            splits--;
        }
        if (idx != 0) {
   1364c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1364e:	2b00      	cmp	r3, #0
   13650:	d03e      	beq.n	136d0 <str_rsplit+0x1b4>
   13652:	e01b      	b.n	1368c <str_rsplit+0x170>
            res->items[idx--] = mp_obj_new_str_of_type(self_type, s + sep_len, last - s - sep_len);
   13654:	6a3b      	ldr	r3, [r7, #32]
   13656:	68da      	ldr	r2, [r3, #12]
   13658:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1365a:	1e59      	subs	r1, r3, #1
   1365c:	6379      	str	r1, [r7, #52]	; 0x34
   1365e:	009b      	lsls	r3, r3, #2
   13660:	18d4      	adds	r4, r2, r3
   13662:	68fb      	ldr	r3, [r7, #12]
   13664:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   13666:	18d1      	adds	r1, r2, r3
   13668:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   1366a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1366c:	1ad3      	subs	r3, r2, r3
   1366e:	461a      	mov	r2, r3
   13670:	68fb      	ldr	r3, [r7, #12]
   13672:	1ad3      	subs	r3, r2, r3
   13674:	461a      	mov	r2, r3
   13676:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   13678:	f002 f843 	bl	15702 <mp_obj_new_str_of_type>
   1367c:	4603      	mov	r3, r0
   1367e:	6023      	str	r3, [r4, #0]
            last = s;
   13680:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   13682:	633b      	str	r3, [r7, #48]	; 0x30
            splits--;
   13684:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   13686:	3b01      	subs	r3, #1
   13688:	63bb      	str	r3, [r7, #56]	; 0x38
            s = last - sep_len;
   1368a:	e7ae      	b.n	135ea <str_rsplit+0xce>
            // We split less parts than split limit, now go cleanup surplus
            size_t used = org_splits + 1 - idx;
   1368c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1368e:	1c5a      	adds	r2, r3, #1
   13690:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   13692:	1ad3      	subs	r3, r2, r3
   13694:	617b      	str	r3, [r7, #20]
            memmove(res->items, &res->items[idx], used * sizeof(mp_obj_t));
   13696:	6a3b      	ldr	r3, [r7, #32]
   13698:	68d8      	ldr	r0, [r3, #12]
   1369a:	6a3b      	ldr	r3, [r7, #32]
   1369c:	68da      	ldr	r2, [r3, #12]
   1369e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   136a0:	009b      	lsls	r3, r3, #2
   136a2:	18d1      	adds	r1, r2, r3
   136a4:	697b      	ldr	r3, [r7, #20]
   136a6:	009b      	lsls	r3, r3, #2
   136a8:	461a      	mov	r2, r3
   136aa:	f00a ffa6 	bl	1e5fa <memmove>
            mp_seq_clear(res->items, used, res->alloc, sizeof(*res->items));
   136ae:	6a3b      	ldr	r3, [r7, #32]
   136b0:	68da      	ldr	r2, [r3, #12]
   136b2:	697b      	ldr	r3, [r7, #20]
   136b4:	009b      	lsls	r3, r3, #2
   136b6:	18d0      	adds	r0, r2, r3
   136b8:	6a3b      	ldr	r3, [r7, #32]
   136ba:	685a      	ldr	r2, [r3, #4]
   136bc:	697b      	ldr	r3, [r7, #20]
   136be:	1ad3      	subs	r3, r2, r3
   136c0:	009b      	lsls	r3, r3, #2
   136c2:	461a      	mov	r2, r3
   136c4:	2100      	movs	r1, #0
   136c6:	f00a ffcd 	bl	1e664 <memset>
            res->len = used;
   136ca:	6a3b      	ldr	r3, [r7, #32]
   136cc:	697a      	ldr	r2, [r7, #20]
   136ce:	609a      	str	r2, [r3, #8]
        }
    }

    return MP_OBJ_FROM_PTR(res);
   136d0:	6a3b      	ldr	r3, [r7, #32]
}
   136d2:	4618      	mov	r0, r3
   136d4:	3744      	adds	r7, #68	; 0x44
   136d6:	46bd      	mov	sp, r7
   136d8:	bd90      	pop	{r4, r7, pc}
   136da:	bf00      	nop
   136dc:	0002511c 	.word	0x0002511c
   136e0:	00025374 	.word	0x00025374
   136e4:	00025358 	.word	0x00025358

000136e8 <str_finder>:
MP_DEFINE_CONST_FUN_OBJ_VAR_BETWEEN(str_rsplit_obj, 1, 3, str_rsplit);

STATIC mp_obj_t str_finder(size_t n_args, const mp_obj_t *args, int direction, bool is_index) {
   136e8:	b580      	push	{r7, lr}
   136ea:	b08e      	sub	sp, #56	; 0x38
   136ec:	af02      	add	r7, sp, #8
   136ee:	60f8      	str	r0, [r7, #12]
   136f0:	60b9      	str	r1, [r7, #8]
   136f2:	607a      	str	r2, [r7, #4]
   136f4:	70fb      	strb	r3, [r7, #3]
    const mp_obj_type_t *self_type = mp_obj_get_type(args[0]);
   136f6:	68bb      	ldr	r3, [r7, #8]
   136f8:	681b      	ldr	r3, [r3, #0]
   136fa:	4618      	mov	r0, r3
   136fc:	f7fa faae 	bl	dc5c <mp_obj_get_type>
   13700:	61f8      	str	r0, [r7, #28]
    mp_check_self(MP_OBJ_IS_STR_OR_BYTES(args[0]));
   13702:	68bb      	ldr	r3, [r7, #8]
   13704:	681b      	ldr	r3, [r3, #0]
   13706:	4618      	mov	r0, r3
   13708:	f7fe ffbc 	bl	12684 <MP_OBJ_IS_QSTR>
   1370c:	4603      	mov	r3, r0
   1370e:	2b00      	cmp	r3, #0
   13710:	d115      	bne.n	1373e <str_finder+0x56>
   13712:	68bb      	ldr	r3, [r7, #8]
   13714:	681b      	ldr	r3, [r3, #0]
   13716:	4618      	mov	r0, r3
   13718:	f7fe ffc6 	bl	126a8 <MP_OBJ_IS_OBJ>
   1371c:	4603      	mov	r3, r0
   1371e:	2b00      	cmp	r3, #0
   13720:	d006      	beq.n	13730 <str_finder+0x48>
   13722:	68bb      	ldr	r3, [r7, #8]
   13724:	681b      	ldr	r3, [r3, #0]
   13726:	681b      	ldr	r3, [r3, #0]
   13728:	699b      	ldr	r3, [r3, #24]
   1372a:	4a56      	ldr	r2, [pc, #344]	; (13884 <str_finder+0x19c>)
   1372c:	4293      	cmp	r3, r2
   1372e:	d006      	beq.n	1373e <str_finder+0x56>
   13730:	4b55      	ldr	r3, [pc, #340]	; (13888 <str_finder+0x1a0>)
   13732:	4a56      	ldr	r2, [pc, #344]	; (1388c <str_finder+0x1a4>)
   13734:	f240 21b1 	movw	r1, #689	; 0x2b1
   13738:	4855      	ldr	r0, [pc, #340]	; (13890 <str_finder+0x1a8>)
   1373a:	f009 fbd1 	bl	1cee0 <__assert_func>

    // check argument type
    if (mp_obj_get_type(args[1]) != self_type) {
   1373e:	68bb      	ldr	r3, [r7, #8]
   13740:	3304      	adds	r3, #4
   13742:	681b      	ldr	r3, [r3, #0]
   13744:	4618      	mov	r0, r3
   13746:	f7fa fa89 	bl	dc5c <mp_obj_get_type>
   1374a:	4602      	mov	r2, r0
   1374c:	69fb      	ldr	r3, [r7, #28]
   1374e:	429a      	cmp	r2, r3
   13750:	d005      	beq.n	1375e <str_finder+0x76>
        bad_implicit_conversion(args[1]);
   13752:	68bb      	ldr	r3, [r7, #8]
   13754:	3304      	adds	r3, #4
   13756:	681b      	ldr	r3, [r3, #0]
   13758:	4618      	mov	r0, r3
   1375a:	f002 f950 	bl	159fe <bad_implicit_conversion>
    }

    GET_STR_DATA_LEN(args[0], haystack, haystack_len);
   1375e:	68bb      	ldr	r3, [r7, #8]
   13760:	681b      	ldr	r3, [r3, #0]
   13762:	4618      	mov	r0, r3
   13764:	f7fe ff8e 	bl	12684 <MP_OBJ_IS_QSTR>
   13768:	4603      	mov	r3, r0
   1376a:	2b00      	cmp	r3, #0
   1376c:	d00a      	beq.n	13784 <str_finder+0x9c>
   1376e:	68bb      	ldr	r3, [r7, #8]
   13770:	681b      	ldr	r3, [r3, #0]
   13772:	089b      	lsrs	r3, r3, #2
   13774:	f107 0214 	add.w	r2, r7, #20
   13778:	4611      	mov	r1, r2
   1377a:	4618      	mov	r0, r3
   1377c:	f7ed fe36 	bl	13ec <qstr_data>
   13780:	62f8      	str	r0, [r7, #44]	; 0x2c
   13782:	e007      	b.n	13794 <str_finder+0xac>
   13784:	68bb      	ldr	r3, [r7, #8]
   13786:	681b      	ldr	r3, [r3, #0]
   13788:	689b      	ldr	r3, [r3, #8]
   1378a:	617b      	str	r3, [r7, #20]
   1378c:	68bb      	ldr	r3, [r7, #8]
   1378e:	681b      	ldr	r3, [r3, #0]
   13790:	68db      	ldr	r3, [r3, #12]
   13792:	62fb      	str	r3, [r7, #44]	; 0x2c
    GET_STR_DATA_LEN(args[1], needle, needle_len);
   13794:	68bb      	ldr	r3, [r7, #8]
   13796:	3304      	adds	r3, #4
   13798:	681b      	ldr	r3, [r3, #0]
   1379a:	4618      	mov	r0, r3
   1379c:	f7fe ff72 	bl	12684 <MP_OBJ_IS_QSTR>
   137a0:	4603      	mov	r3, r0
   137a2:	2b00      	cmp	r3, #0
   137a4:	d00b      	beq.n	137be <str_finder+0xd6>
   137a6:	68bb      	ldr	r3, [r7, #8]
   137a8:	3304      	adds	r3, #4
   137aa:	681b      	ldr	r3, [r3, #0]
   137ac:	089b      	lsrs	r3, r3, #2
   137ae:	f107 0210 	add.w	r2, r7, #16
   137b2:	4611      	mov	r1, r2
   137b4:	4618      	mov	r0, r3
   137b6:	f7ed fe19 	bl	13ec <qstr_data>
   137ba:	62b8      	str	r0, [r7, #40]	; 0x28
   137bc:	e009      	b.n	137d2 <str_finder+0xea>
   137be:	68bb      	ldr	r3, [r7, #8]
   137c0:	3304      	adds	r3, #4
   137c2:	681b      	ldr	r3, [r3, #0]
   137c4:	689b      	ldr	r3, [r3, #8]
   137c6:	613b      	str	r3, [r7, #16]
   137c8:	68bb      	ldr	r3, [r7, #8]
   137ca:	3304      	adds	r3, #4
   137cc:	681b      	ldr	r3, [r3, #0]
   137ce:	68db      	ldr	r3, [r3, #12]
   137d0:	62bb      	str	r3, [r7, #40]	; 0x28

    const byte *start = haystack;
   137d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   137d4:	627b      	str	r3, [r7, #36]	; 0x24
    const byte *end = haystack + haystack_len;
   137d6:	697b      	ldr	r3, [r7, #20]
   137d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   137da:	4413      	add	r3, r2
   137dc:	623b      	str	r3, [r7, #32]
    if (n_args >= 3 && args[2] != mp_const_none) {
   137de:	68fb      	ldr	r3, [r7, #12]
   137e0:	2b02      	cmp	r3, #2
   137e2:	d911      	bls.n	13808 <str_finder+0x120>
   137e4:	68bb      	ldr	r3, [r7, #8]
   137e6:	3308      	adds	r3, #8
   137e8:	681b      	ldr	r3, [r3, #0]
   137ea:	4a2a      	ldr	r2, [pc, #168]	; (13894 <str_finder+0x1ac>)
   137ec:	4293      	cmp	r3, r2
   137ee:	d00b      	beq.n	13808 <str_finder+0x120>
        start = str_index_to_ptr(self_type, haystack, haystack_len, args[2], true);
   137f0:	697a      	ldr	r2, [r7, #20]
   137f2:	68bb      	ldr	r3, [r7, #8]
   137f4:	3308      	adds	r3, #8
   137f6:	6819      	ldr	r1, [r3, #0]
   137f8:	2301      	movs	r3, #1
   137fa:	9300      	str	r3, [sp, #0]
   137fc:	460b      	mov	r3, r1
   137fe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
   13800:	69f8      	ldr	r0, [r7, #28]
   13802:	f7ff fc11 	bl	13028 <str_index_to_ptr>
   13806:	6278      	str	r0, [r7, #36]	; 0x24
    }
    if (n_args >= 4 && args[3] != mp_const_none) {
   13808:	68fb      	ldr	r3, [r7, #12]
   1380a:	2b03      	cmp	r3, #3
   1380c:	d911      	bls.n	13832 <str_finder+0x14a>
   1380e:	68bb      	ldr	r3, [r7, #8]
   13810:	330c      	adds	r3, #12
   13812:	681b      	ldr	r3, [r3, #0]
   13814:	4a1f      	ldr	r2, [pc, #124]	; (13894 <str_finder+0x1ac>)
   13816:	4293      	cmp	r3, r2
   13818:	d00b      	beq.n	13832 <str_finder+0x14a>
        end = str_index_to_ptr(self_type, haystack, haystack_len, args[3], true);
   1381a:	697a      	ldr	r2, [r7, #20]
   1381c:	68bb      	ldr	r3, [r7, #8]
   1381e:	330c      	adds	r3, #12
   13820:	6819      	ldr	r1, [r3, #0]
   13822:	2301      	movs	r3, #1
   13824:	9300      	str	r3, [sp, #0]
   13826:	460b      	mov	r3, r1
   13828:	6af9      	ldr	r1, [r7, #44]	; 0x2c
   1382a:	69f8      	ldr	r0, [r7, #28]
   1382c:	f7ff fbfc 	bl	13028 <str_index_to_ptr>
   13830:	6238      	str	r0, [r7, #32]
    }

    if (end < start) {
   13832:	6a3a      	ldr	r2, [r7, #32]
   13834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   13836:	429a      	cmp	r2, r3
   13838:	d310      	bcc.n	1385c <str_finder+0x174>
        goto out_error;
    }

    const byte *p = find_subbytes(start, end - start, needle, needle_len, direction);
   1383a:	6a3a      	ldr	r2, [r7, #32]
   1383c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1383e:	1ad3      	subs	r3, r2, r3
   13840:	4619      	mov	r1, r3
   13842:	693a      	ldr	r2, [r7, #16]
   13844:	687b      	ldr	r3, [r7, #4]
   13846:	9300      	str	r3, [sp, #0]
   13848:	4613      	mov	r3, r2
   1384a:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1384c:	6a78      	ldr	r0, [r7, #36]	; 0x24
   1384e:	f7ff fa35 	bl	12cbc <find_subbytes>
   13852:	61b8      	str	r0, [r7, #24]
    if (p == NULL) {
   13854:	69bb      	ldr	r3, [r7, #24]
   13856:	2b00      	cmp	r3, #0
   13858:	d10a      	bne.n	13870 <str_finder+0x188>
   1385a:	e000      	b.n	1385e <str_finder+0x176>
        goto out_error;
   1385c:	bf00      	nop
    out_error:
        // not found
        if (is_index) {
   1385e:	78fb      	ldrb	r3, [r7, #3]
   13860:	2b00      	cmp	r3, #0
   13862:	d002      	beq.n	1386a <str_finder+0x182>
            mp_raise_ValueError("substring not found");
   13864:	480c      	ldr	r0, [pc, #48]	; (13898 <str_finder+0x1b0>)
   13866:	f7f9 fd86 	bl	d376 <mp_raise_ValueError>
        } else {
            return MP_OBJ_NEW_SMALL_INT(-1);
   1386a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1386e:	e005      	b.n	1387c <str_finder+0x194>
        #if MICROPY_PY_BUILTINS_STR_UNICODE
        if (self_type == &mp_type_str) {
            return MP_OBJ_NEW_SMALL_INT(utf8_ptr_to_index(haystack, p));
        }
        #endif
        return MP_OBJ_NEW_SMALL_INT(p - haystack);
   13870:	69ba      	ldr	r2, [r7, #24]
   13872:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   13874:	1ad3      	subs	r3, r2, r3
   13876:	005b      	lsls	r3, r3, #1
   13878:	f043 0301 	orr.w	r3, r3, #1
    }
}
   1387c:	4618      	mov	r0, r3
   1387e:	3730      	adds	r7, #48	; 0x30
   13880:	46bd      	mov	sp, r7
   13882:	bd80      	pop	{r7, pc}
   13884:	00012d2f 	.word	0x00012d2f
   13888:	00025390 	.word	0x00025390
   1388c:	00025868 	.word	0x00025868
   13890:	000252f4 	.word	0x000252f4
   13894:	0002511c 	.word	0x0002511c
   13898:	00025418 	.word	0x00025418

0001389c <str_find>:

STATIC mp_obj_t str_find(size_t n_args, const mp_obj_t *args) {
   1389c:	b580      	push	{r7, lr}
   1389e:	b082      	sub	sp, #8
   138a0:	af00      	add	r7, sp, #0
   138a2:	6078      	str	r0, [r7, #4]
   138a4:	6039      	str	r1, [r7, #0]
    return str_finder(n_args, args, 1, false);
   138a6:	2300      	movs	r3, #0
   138a8:	2201      	movs	r2, #1
   138aa:	6839      	ldr	r1, [r7, #0]
   138ac:	6878      	ldr	r0, [r7, #4]
   138ae:	f7ff ff1b 	bl	136e8 <str_finder>
   138b2:	4603      	mov	r3, r0
}
   138b4:	4618      	mov	r0, r3
   138b6:	3708      	adds	r7, #8
   138b8:	46bd      	mov	sp, r7
   138ba:	bd80      	pop	{r7, pc}

000138bc <str_rfind>:
MP_DEFINE_CONST_FUN_OBJ_VAR_BETWEEN(str_find_obj, 2, 4, str_find);

STATIC mp_obj_t str_rfind(size_t n_args, const mp_obj_t *args) {
   138bc:	b580      	push	{r7, lr}
   138be:	b082      	sub	sp, #8
   138c0:	af00      	add	r7, sp, #0
   138c2:	6078      	str	r0, [r7, #4]
   138c4:	6039      	str	r1, [r7, #0]
    return str_finder(n_args, args, -1, false);
   138c6:	2300      	movs	r3, #0
   138c8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   138cc:	6839      	ldr	r1, [r7, #0]
   138ce:	6878      	ldr	r0, [r7, #4]
   138d0:	f7ff ff0a 	bl	136e8 <str_finder>
   138d4:	4603      	mov	r3, r0
}
   138d6:	4618      	mov	r0, r3
   138d8:	3708      	adds	r7, #8
   138da:	46bd      	mov	sp, r7
   138dc:	bd80      	pop	{r7, pc}

000138de <str_index>:
MP_DEFINE_CONST_FUN_OBJ_VAR_BETWEEN(str_rfind_obj, 2, 4, str_rfind);

STATIC mp_obj_t str_index(size_t n_args, const mp_obj_t *args) {
   138de:	b580      	push	{r7, lr}
   138e0:	b082      	sub	sp, #8
   138e2:	af00      	add	r7, sp, #0
   138e4:	6078      	str	r0, [r7, #4]
   138e6:	6039      	str	r1, [r7, #0]
    return str_finder(n_args, args, 1, true);
   138e8:	2301      	movs	r3, #1
   138ea:	2201      	movs	r2, #1
   138ec:	6839      	ldr	r1, [r7, #0]
   138ee:	6878      	ldr	r0, [r7, #4]
   138f0:	f7ff fefa 	bl	136e8 <str_finder>
   138f4:	4603      	mov	r3, r0
}
   138f6:	4618      	mov	r0, r3
   138f8:	3708      	adds	r7, #8
   138fa:	46bd      	mov	sp, r7
   138fc:	bd80      	pop	{r7, pc}

000138fe <str_rindex>:
MP_DEFINE_CONST_FUN_OBJ_VAR_BETWEEN(str_index_obj, 2, 4, str_index);

STATIC mp_obj_t str_rindex(size_t n_args, const mp_obj_t *args) {
   138fe:	b580      	push	{r7, lr}
   13900:	b082      	sub	sp, #8
   13902:	af00      	add	r7, sp, #0
   13904:	6078      	str	r0, [r7, #4]
   13906:	6039      	str	r1, [r7, #0]
    return str_finder(n_args, args, -1, true);
   13908:	2301      	movs	r3, #1
   1390a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1390e:	6839      	ldr	r1, [r7, #0]
   13910:	6878      	ldr	r0, [r7, #4]
   13912:	f7ff fee9 	bl	136e8 <str_finder>
   13916:	4603      	mov	r3, r0
}
   13918:	4618      	mov	r0, r3
   1391a:	3708      	adds	r7, #8
   1391c:	46bd      	mov	sp, r7
   1391e:	bd80      	pop	{r7, pc}

00013920 <str_startswith>:
MP_DEFINE_CONST_FUN_OBJ_VAR_BETWEEN(str_rindex_obj, 2, 4, str_rindex);

// TODO: (Much) more variety in args
STATIC mp_obj_t str_startswith(size_t n_args, const mp_obj_t *args) {
   13920:	b580      	push	{r7, lr}
   13922:	b08a      	sub	sp, #40	; 0x28
   13924:	af02      	add	r7, sp, #8
   13926:	6078      	str	r0, [r7, #4]
   13928:	6039      	str	r1, [r7, #0]
    const mp_obj_type_t *self_type = mp_obj_get_type(args[0]);
   1392a:	683b      	ldr	r3, [r7, #0]
   1392c:	681b      	ldr	r3, [r3, #0]
   1392e:	4618      	mov	r0, r3
   13930:	f7fa f994 	bl	dc5c <mp_obj_get_type>
   13934:	6178      	str	r0, [r7, #20]
    GET_STR_DATA_LEN(args[0], str, str_len);
   13936:	683b      	ldr	r3, [r7, #0]
   13938:	681b      	ldr	r3, [r3, #0]
   1393a:	4618      	mov	r0, r3
   1393c:	f7fe fea2 	bl	12684 <MP_OBJ_IS_QSTR>
   13940:	4603      	mov	r3, r0
   13942:	2b00      	cmp	r3, #0
   13944:	d00a      	beq.n	1395c <str_startswith+0x3c>
   13946:	683b      	ldr	r3, [r7, #0]
   13948:	681b      	ldr	r3, [r3, #0]
   1394a:	089b      	lsrs	r3, r3, #2
   1394c:	f107 020c 	add.w	r2, r7, #12
   13950:	4611      	mov	r1, r2
   13952:	4618      	mov	r0, r3
   13954:	f7ed fd4a 	bl	13ec <qstr_data>
   13958:	61f8      	str	r0, [r7, #28]
   1395a:	e007      	b.n	1396c <str_startswith+0x4c>
   1395c:	683b      	ldr	r3, [r7, #0]
   1395e:	681b      	ldr	r3, [r3, #0]
   13960:	689b      	ldr	r3, [r3, #8]
   13962:	60fb      	str	r3, [r7, #12]
   13964:	683b      	ldr	r3, [r7, #0]
   13966:	681b      	ldr	r3, [r3, #0]
   13968:	68db      	ldr	r3, [r3, #12]
   1396a:	61fb      	str	r3, [r7, #28]
    size_t prefix_len;
    const char *prefix = mp_obj_str_get_data(args[1], &prefix_len);
   1396c:	683b      	ldr	r3, [r7, #0]
   1396e:	3304      	adds	r3, #4
   13970:	681b      	ldr	r3, [r3, #0]
   13972:	f107 0208 	add.w	r2, r7, #8
   13976:	4611      	mov	r1, r2
   13978:	4618      	mov	r0, r3
   1397a:	f002 f8af 	bl	15adc <mp_obj_str_get_data>
   1397e:	6138      	str	r0, [r7, #16]
    const byte *start = str;
   13980:	69fb      	ldr	r3, [r7, #28]
   13982:	61bb      	str	r3, [r7, #24]
    if (n_args > 2) {
   13984:	687b      	ldr	r3, [r7, #4]
   13986:	2b02      	cmp	r3, #2
   13988:	d90b      	bls.n	139a2 <str_startswith+0x82>
        start = str_index_to_ptr(self_type, str, str_len, args[2], true);
   1398a:	68fa      	ldr	r2, [r7, #12]
   1398c:	683b      	ldr	r3, [r7, #0]
   1398e:	3308      	adds	r3, #8
   13990:	6819      	ldr	r1, [r3, #0]
   13992:	2301      	movs	r3, #1
   13994:	9300      	str	r3, [sp, #0]
   13996:	460b      	mov	r3, r1
   13998:	69f9      	ldr	r1, [r7, #28]
   1399a:	6978      	ldr	r0, [r7, #20]
   1399c:	f7ff fb44 	bl	13028 <str_index_to_ptr>
   139a0:	61b8      	str	r0, [r7, #24]
    }
    if (prefix_len + (start - str) > str_len) {
   139a2:	69ba      	ldr	r2, [r7, #24]
   139a4:	69fb      	ldr	r3, [r7, #28]
   139a6:	1ad3      	subs	r3, r2, r3
   139a8:	461a      	mov	r2, r3
   139aa:	68bb      	ldr	r3, [r7, #8]
   139ac:	441a      	add	r2, r3
   139ae:	68fb      	ldr	r3, [r7, #12]
   139b0:	429a      	cmp	r2, r3
   139b2:	d901      	bls.n	139b8 <str_startswith+0x98>
        return mp_const_false;
   139b4:	4b0a      	ldr	r3, [pc, #40]	; (139e0 <str_startswith+0xc0>)
   139b6:	e00f      	b.n	139d8 <str_startswith+0xb8>
    }
    return mp_obj_new_bool(memcmp(start, prefix, prefix_len) == 0);
   139b8:	68bb      	ldr	r3, [r7, #8]
   139ba:	461a      	mov	r2, r3
   139bc:	6939      	ldr	r1, [r7, #16]
   139be:	69b8      	ldr	r0, [r7, #24]
   139c0:	f00a fe9b 	bl	1e6fa <memcmp>
   139c4:	4603      	mov	r3, r0
   139c6:	2b00      	cmp	r3, #0
   139c8:	bf0c      	ite	eq
   139ca:	2301      	moveq	r3, #1
   139cc:	2300      	movne	r3, #0
   139ce:	b2db      	uxtb	r3, r3
   139d0:	4618      	mov	r0, r3
   139d2:	f7fe fe7b 	bl	126cc <mp_obj_new_bool>
   139d6:	4603      	mov	r3, r0
}
   139d8:	4618      	mov	r0, r3
   139da:	3720      	adds	r7, #32
   139dc:	46bd      	mov	sp, r7
   139de:	bd80      	pop	{r7, pc}
   139e0:	00023860 	.word	0x00023860

000139e4 <str_endswith>:
MP_DEFINE_CONST_FUN_OBJ_VAR_BETWEEN(str_startswith_obj, 2, 3, str_startswith);

STATIC mp_obj_t str_endswith(size_t n_args, const mp_obj_t *args) {
   139e4:	b580      	push	{r7, lr}
   139e6:	b086      	sub	sp, #24
   139e8:	af00      	add	r7, sp, #0
   139ea:	6078      	str	r0, [r7, #4]
   139ec:	6039      	str	r1, [r7, #0]
    GET_STR_DATA_LEN(args[0], str, str_len);
   139ee:	683b      	ldr	r3, [r7, #0]
   139f0:	681b      	ldr	r3, [r3, #0]
   139f2:	4618      	mov	r0, r3
   139f4:	f7fe fe46 	bl	12684 <MP_OBJ_IS_QSTR>
   139f8:	4603      	mov	r3, r0
   139fa:	2b00      	cmp	r3, #0
   139fc:	d00a      	beq.n	13a14 <str_endswith+0x30>
   139fe:	683b      	ldr	r3, [r7, #0]
   13a00:	681b      	ldr	r3, [r3, #0]
   13a02:	089b      	lsrs	r3, r3, #2
   13a04:	f107 020c 	add.w	r2, r7, #12
   13a08:	4611      	mov	r1, r2
   13a0a:	4618      	mov	r0, r3
   13a0c:	f7ed fcee 	bl	13ec <qstr_data>
   13a10:	6178      	str	r0, [r7, #20]
   13a12:	e007      	b.n	13a24 <str_endswith+0x40>
   13a14:	683b      	ldr	r3, [r7, #0]
   13a16:	681b      	ldr	r3, [r3, #0]
   13a18:	689b      	ldr	r3, [r3, #8]
   13a1a:	60fb      	str	r3, [r7, #12]
   13a1c:	683b      	ldr	r3, [r7, #0]
   13a1e:	681b      	ldr	r3, [r3, #0]
   13a20:	68db      	ldr	r3, [r3, #12]
   13a22:	617b      	str	r3, [r7, #20]
    size_t suffix_len;
    const char *suffix = mp_obj_str_get_data(args[1], &suffix_len);
   13a24:	683b      	ldr	r3, [r7, #0]
   13a26:	3304      	adds	r3, #4
   13a28:	681b      	ldr	r3, [r3, #0]
   13a2a:	f107 0208 	add.w	r2, r7, #8
   13a2e:	4611      	mov	r1, r2
   13a30:	4618      	mov	r0, r3
   13a32:	f002 f853 	bl	15adc <mp_obj_str_get_data>
   13a36:	6138      	str	r0, [r7, #16]
    if (n_args > 2) {
   13a38:	687b      	ldr	r3, [r7, #4]
   13a3a:	2b02      	cmp	r3, #2
   13a3c:	d902      	bls.n	13a44 <str_endswith+0x60>
        mp_raise_NotImplementedError("start/end indices");
   13a3e:	4810      	ldr	r0, [pc, #64]	; (13a80 <str_endswith+0x9c>)
   13a40:	f7f9 fcc0 	bl	d3c4 <mp_raise_NotImplementedError>
    }

    if (suffix_len > str_len) {
   13a44:	68ba      	ldr	r2, [r7, #8]
   13a46:	68fb      	ldr	r3, [r7, #12]
   13a48:	429a      	cmp	r2, r3
   13a4a:	d901      	bls.n	13a50 <str_endswith+0x6c>
        return mp_const_false;
   13a4c:	4b0d      	ldr	r3, [pc, #52]	; (13a84 <str_endswith+0xa0>)
   13a4e:	e013      	b.n	13a78 <str_endswith+0x94>
    }
    return mp_obj_new_bool(memcmp(str + (str_len - suffix_len), suffix, suffix_len) == 0);
   13a50:	68fa      	ldr	r2, [r7, #12]
   13a52:	68bb      	ldr	r3, [r7, #8]
   13a54:	1ad3      	subs	r3, r2, r3
   13a56:	697a      	ldr	r2, [r7, #20]
   13a58:	4413      	add	r3, r2
   13a5a:	68ba      	ldr	r2, [r7, #8]
   13a5c:	6939      	ldr	r1, [r7, #16]
   13a5e:	4618      	mov	r0, r3
   13a60:	f00a fe4b 	bl	1e6fa <memcmp>
   13a64:	4603      	mov	r3, r0
   13a66:	2b00      	cmp	r3, #0
   13a68:	bf0c      	ite	eq
   13a6a:	2301      	moveq	r3, #1
   13a6c:	2300      	movne	r3, #0
   13a6e:	b2db      	uxtb	r3, r3
   13a70:	4618      	mov	r0, r3
   13a72:	f7fe fe2b 	bl	126cc <mp_obj_new_bool>
   13a76:	4603      	mov	r3, r0
}
   13a78:	4618      	mov	r0, r3
   13a7a:	3718      	adds	r7, #24
   13a7c:	46bd      	mov	sp, r7
   13a7e:	bd80      	pop	{r7, pc}
   13a80:	00025468 	.word	0x00025468
   13a84:	00023860 	.word	0x00023860

00013a88 <str_uni_strip>:
MP_DEFINE_CONST_FUN_OBJ_VAR_BETWEEN(str_endswith_obj, 2, 3, str_endswith);

enum { LSTRIP, RSTRIP, STRIP };

STATIC mp_obj_t str_uni_strip(int type, size_t n_args, const mp_obj_t *args) {
   13a88:	b580      	push	{r7, lr}
   13a8a:	b094      	sub	sp, #80	; 0x50
   13a8c:	af02      	add	r7, sp, #8
   13a8e:	60f8      	str	r0, [r7, #12]
   13a90:	60b9      	str	r1, [r7, #8]
   13a92:	607a      	str	r2, [r7, #4]
    mp_check_self(MP_OBJ_IS_STR_OR_BYTES(args[0]));
   13a94:	687b      	ldr	r3, [r7, #4]
   13a96:	681b      	ldr	r3, [r3, #0]
   13a98:	4618      	mov	r0, r3
   13a9a:	f7fe fdf3 	bl	12684 <MP_OBJ_IS_QSTR>
   13a9e:	4603      	mov	r3, r0
   13aa0:	2b00      	cmp	r3, #0
   13aa2:	d115      	bne.n	13ad0 <str_uni_strip+0x48>
   13aa4:	687b      	ldr	r3, [r7, #4]
   13aa6:	681b      	ldr	r3, [r3, #0]
   13aa8:	4618      	mov	r0, r3
   13aaa:	f7fe fdfd 	bl	126a8 <MP_OBJ_IS_OBJ>
   13aae:	4603      	mov	r3, r0
   13ab0:	2b00      	cmp	r3, #0
   13ab2:	d006      	beq.n	13ac2 <str_uni_strip+0x3a>
   13ab4:	687b      	ldr	r3, [r7, #4]
   13ab6:	681b      	ldr	r3, [r3, #0]
   13ab8:	681b      	ldr	r3, [r3, #0]
   13aba:	699b      	ldr	r3, [r3, #24]
   13abc:	4a76      	ldr	r2, [pc, #472]	; (13c98 <str_uni_strip+0x210>)
   13abe:	4293      	cmp	r3, r2
   13ac0:	d006      	beq.n	13ad0 <str_uni_strip+0x48>
   13ac2:	4b76      	ldr	r3, [pc, #472]	; (13c9c <str_uni_strip+0x214>)
   13ac4:	4a76      	ldr	r2, [pc, #472]	; (13ca0 <str_uni_strip+0x218>)
   13ac6:	f240 3113 	movw	r1, #787	; 0x313
   13aca:	4876      	ldr	r0, [pc, #472]	; (13ca4 <str_uni_strip+0x21c>)
   13acc:	f009 fa08 	bl	1cee0 <__assert_func>
    const mp_obj_type_t *self_type = mp_obj_get_type(args[0]);
   13ad0:	687b      	ldr	r3, [r7, #4]
   13ad2:	681b      	ldr	r3, [r3, #0]
   13ad4:	4618      	mov	r0, r3
   13ad6:	f7fa f8c1 	bl	dc5c <mp_obj_get_type>
   13ada:	61f8      	str	r0, [r7, #28]

    const byte *chars_to_del;
    uint chars_to_del_len;
    static const byte whitespace[] = " \t\n\r\v\f";

    if (n_args == 1) {
   13adc:	68bb      	ldr	r3, [r7, #8]
   13ade:	2b01      	cmp	r3, #1
   13ae0:	d104      	bne.n	13aec <str_uni_strip+0x64>
        chars_to_del = whitespace;
   13ae2:	4b71      	ldr	r3, [pc, #452]	; (13ca8 <str_uni_strip+0x220>)
   13ae4:	647b      	str	r3, [r7, #68]	; 0x44
        chars_to_del_len = sizeof(whitespace) - 1;
   13ae6:	2306      	movs	r3, #6
   13ae8:	643b      	str	r3, [r7, #64]	; 0x40
   13aea:	e032      	b.n	13b52 <str_uni_strip+0xca>
    } else {
        if (mp_obj_get_type(args[1]) != self_type) {
   13aec:	687b      	ldr	r3, [r7, #4]
   13aee:	3304      	adds	r3, #4
   13af0:	681b      	ldr	r3, [r3, #0]
   13af2:	4618      	mov	r0, r3
   13af4:	f7fa f8b2 	bl	dc5c <mp_obj_get_type>
   13af8:	4602      	mov	r2, r0
   13afa:	69fb      	ldr	r3, [r7, #28]
   13afc:	429a      	cmp	r2, r3
   13afe:	d005      	beq.n	13b0c <str_uni_strip+0x84>
            bad_implicit_conversion(args[1]);
   13b00:	687b      	ldr	r3, [r7, #4]
   13b02:	3304      	adds	r3, #4
   13b04:	681b      	ldr	r3, [r3, #0]
   13b06:	4618      	mov	r0, r3
   13b08:	f001 ff79 	bl	159fe <bad_implicit_conversion>
        }
        GET_STR_DATA_LEN(args[1], s, l);
   13b0c:	687b      	ldr	r3, [r7, #4]
   13b0e:	3304      	adds	r3, #4
   13b10:	681b      	ldr	r3, [r3, #0]
   13b12:	4618      	mov	r0, r3
   13b14:	f7fe fdb6 	bl	12684 <MP_OBJ_IS_QSTR>
   13b18:	4603      	mov	r3, r0
   13b1a:	2b00      	cmp	r3, #0
   13b1c:	d00b      	beq.n	13b36 <str_uni_strip+0xae>
   13b1e:	687b      	ldr	r3, [r7, #4]
   13b20:	3304      	adds	r3, #4
   13b22:	681b      	ldr	r3, [r3, #0]
   13b24:	089b      	lsrs	r3, r3, #2
   13b26:	f107 0210 	add.w	r2, r7, #16
   13b2a:	4611      	mov	r1, r2
   13b2c:	4618      	mov	r0, r3
   13b2e:	f7ed fc5d 	bl	13ec <qstr_data>
   13b32:	63f8      	str	r0, [r7, #60]	; 0x3c
   13b34:	e009      	b.n	13b4a <str_uni_strip+0xc2>
   13b36:	687b      	ldr	r3, [r7, #4]
   13b38:	3304      	adds	r3, #4
   13b3a:	681b      	ldr	r3, [r3, #0]
   13b3c:	689b      	ldr	r3, [r3, #8]
   13b3e:	613b      	str	r3, [r7, #16]
   13b40:	687b      	ldr	r3, [r7, #4]
   13b42:	3304      	adds	r3, #4
   13b44:	681b      	ldr	r3, [r3, #0]
   13b46:	68db      	ldr	r3, [r3, #12]
   13b48:	63fb      	str	r3, [r7, #60]	; 0x3c
        chars_to_del = s;
   13b4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   13b4c:	647b      	str	r3, [r7, #68]	; 0x44
        chars_to_del_len = l;
   13b4e:	693b      	ldr	r3, [r7, #16]
   13b50:	643b      	str	r3, [r7, #64]	; 0x40
    }

    GET_STR_DATA_LEN(args[0], orig_str, orig_str_len);
   13b52:	687b      	ldr	r3, [r7, #4]
   13b54:	681b      	ldr	r3, [r3, #0]
   13b56:	4618      	mov	r0, r3
   13b58:	f7fe fd94 	bl	12684 <MP_OBJ_IS_QSTR>
   13b5c:	4603      	mov	r3, r0
   13b5e:	2b00      	cmp	r3, #0
   13b60:	d00a      	beq.n	13b78 <str_uni_strip+0xf0>
   13b62:	687b      	ldr	r3, [r7, #4]
   13b64:	681b      	ldr	r3, [r3, #0]
   13b66:	089b      	lsrs	r3, r3, #2
   13b68:	f107 0214 	add.w	r2, r7, #20
   13b6c:	4611      	mov	r1, r2
   13b6e:	4618      	mov	r0, r3
   13b70:	f7ed fc3c 	bl	13ec <qstr_data>
   13b74:	63b8      	str	r0, [r7, #56]	; 0x38
   13b76:	e007      	b.n	13b88 <str_uni_strip+0x100>
   13b78:	687b      	ldr	r3, [r7, #4]
   13b7a:	681b      	ldr	r3, [r3, #0]
   13b7c:	689b      	ldr	r3, [r3, #8]
   13b7e:	617b      	str	r3, [r7, #20]
   13b80:	687b      	ldr	r3, [r7, #4]
   13b82:	681b      	ldr	r3, [r3, #0]
   13b84:	68db      	ldr	r3, [r3, #12]
   13b86:	63bb      	str	r3, [r7, #56]	; 0x38

    size_t first_good_char_pos = 0;
   13b88:	2300      	movs	r3, #0
   13b8a:	637b      	str	r3, [r7, #52]	; 0x34
    bool first_good_char_pos_set = false;
   13b8c:	2300      	movs	r3, #0
   13b8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    size_t last_good_char_pos = 0;
   13b92:	2300      	movs	r3, #0
   13b94:	62fb      	str	r3, [r7, #44]	; 0x2c
    size_t i = 0;
   13b96:	2300      	movs	r3, #0
   13b98:	62bb      	str	r3, [r7, #40]	; 0x28
    int delta = 1;
   13b9a:	2301      	movs	r3, #1
   13b9c:	627b      	str	r3, [r7, #36]	; 0x24
    if (type == RSTRIP) {
   13b9e:	68fb      	ldr	r3, [r7, #12]
   13ba0:	2b01      	cmp	r3, #1
   13ba2:	d105      	bne.n	13bb0 <str_uni_strip+0x128>
        i = orig_str_len - 1;
   13ba4:	697b      	ldr	r3, [r7, #20]
   13ba6:	3b01      	subs	r3, #1
   13ba8:	62bb      	str	r3, [r7, #40]	; 0x28
        delta = -1;
   13baa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   13bae:	627b      	str	r3, [r7, #36]	; 0x24
    }
    for (size_t len = orig_str_len; len > 0; len--) {
   13bb0:	697b      	ldr	r3, [r7, #20]
   13bb2:	623b      	str	r3, [r7, #32]
   13bb4:	e030      	b.n	13c18 <str_uni_strip+0x190>
        if (find_subbytes(chars_to_del, chars_to_del_len, &orig_str[i], 1, 1) == NULL) {
   13bb6:	6bba      	ldr	r2, [r7, #56]	; 0x38
   13bb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
   13bba:	441a      	add	r2, r3
   13bbc:	2301      	movs	r3, #1
   13bbe:	9300      	str	r3, [sp, #0]
   13bc0:	2301      	movs	r3, #1
   13bc2:	6c39      	ldr	r1, [r7, #64]	; 0x40
   13bc4:	6c78      	ldr	r0, [r7, #68]	; 0x44
   13bc6:	f7ff f879 	bl	12cbc <find_subbytes>
   13bca:	4603      	mov	r3, r0
   13bcc:	2b00      	cmp	r3, #0
   13bce:	d11c      	bne.n	13c0a <str_uni_strip+0x182>
            if (!first_good_char_pos_set) {
   13bd0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
   13bd4:	f083 0301 	eor.w	r3, r3, #1
   13bd8:	b2db      	uxtb	r3, r3
   13bda:	2b00      	cmp	r3, #0
   13bdc:	d013      	beq.n	13c06 <str_uni_strip+0x17e>
                first_good_char_pos_set = true;
   13bde:	2301      	movs	r3, #1
   13be0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
                first_good_char_pos = i;
   13be4:	6abb      	ldr	r3, [r7, #40]	; 0x28
   13be6:	637b      	str	r3, [r7, #52]	; 0x34
                if (type == LSTRIP) {
   13be8:	68fb      	ldr	r3, [r7, #12]
   13bea:	2b00      	cmp	r3, #0
   13bec:	d103      	bne.n	13bf6 <str_uni_strip+0x16e>
                    last_good_char_pos = orig_str_len - 1;
   13bee:	697b      	ldr	r3, [r7, #20]
   13bf0:	3b01      	subs	r3, #1
   13bf2:	62fb      	str	r3, [r7, #44]	; 0x2c
                    break;
   13bf4:	e013      	b.n	13c1e <str_uni_strip+0x196>
                } else if (type == RSTRIP) {
   13bf6:	68fb      	ldr	r3, [r7, #12]
   13bf8:	2b01      	cmp	r3, #1
   13bfa:	d104      	bne.n	13c06 <str_uni_strip+0x17e>
                    first_good_char_pos = 0;
   13bfc:	2300      	movs	r3, #0
   13bfe:	637b      	str	r3, [r7, #52]	; 0x34
                    last_good_char_pos = i;
   13c00:	6abb      	ldr	r3, [r7, #40]	; 0x28
   13c02:	62fb      	str	r3, [r7, #44]	; 0x2c
                    break;
   13c04:	e00b      	b.n	13c1e <str_uni_strip+0x196>
                }
            }
            last_good_char_pos = i;
   13c06:	6abb      	ldr	r3, [r7, #40]	; 0x28
   13c08:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        i += delta;
   13c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   13c0c:	6aba      	ldr	r2, [r7, #40]	; 0x28
   13c0e:	4413      	add	r3, r2
   13c10:	62bb      	str	r3, [r7, #40]	; 0x28
    for (size_t len = orig_str_len; len > 0; len--) {
   13c12:	6a3b      	ldr	r3, [r7, #32]
   13c14:	3b01      	subs	r3, #1
   13c16:	623b      	str	r3, [r7, #32]
   13c18:	6a3b      	ldr	r3, [r7, #32]
   13c1a:	2b00      	cmp	r3, #0
   13c1c:	d1cb      	bne.n	13bb6 <str_uni_strip+0x12e>
    }

    if (!first_good_char_pos_set) {
   13c1e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
   13c22:	f083 0301 	eor.w	r3, r3, #1
   13c26:	b2db      	uxtb	r3, r3
   13c28:	2b00      	cmp	r3, #0
   13c2a:	d007      	beq.n	13c3c <str_uni_strip+0x1b4>
        // string is all whitespace, return ''
        if (self_type == &mp_type_str) {
   13c2c:	69fb      	ldr	r3, [r7, #28]
   13c2e:	4a1f      	ldr	r2, [pc, #124]	; (13cac <str_uni_strip+0x224>)
   13c30:	4293      	cmp	r3, r2
   13c32:	d101      	bne.n	13c38 <str_uni_strip+0x1b0>
            return MP_OBJ_NEW_QSTR(MP_QSTR_);
   13c34:	2306      	movs	r3, #6
   13c36:	e02b      	b.n	13c90 <str_uni_strip+0x208>
        } else {
            return mp_const_empty_bytes;
   13c38:	4b1d      	ldr	r3, [pc, #116]	; (13cb0 <str_uni_strip+0x228>)
   13c3a:	e029      	b.n	13c90 <str_uni_strip+0x208>
        }
    }

    assert(last_good_char_pos >= first_good_char_pos);
   13c3c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   13c3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   13c40:	429a      	cmp	r2, r3
   13c42:	d206      	bcs.n	13c52 <str_uni_strip+0x1ca>
   13c44:	4b1b      	ldr	r3, [pc, #108]	; (13cb4 <str_uni_strip+0x22c>)
   13c46:	4a16      	ldr	r2, [pc, #88]	; (13ca0 <str_uni_strip+0x218>)
   13c48:	f240 314d 	movw	r1, #845	; 0x34d
   13c4c:	4815      	ldr	r0, [pc, #84]	; (13ca4 <str_uni_strip+0x21c>)
   13c4e:	f009 f947 	bl	1cee0 <__assert_func>
    //+1 to accommodate the last character
    size_t stripped_len = last_good_char_pos - first_good_char_pos + 1;
   13c52:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   13c54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   13c56:	1ad3      	subs	r3, r2, r3
   13c58:	3301      	adds	r3, #1
   13c5a:	61bb      	str	r3, [r7, #24]
    if (stripped_len == orig_str_len) {
   13c5c:	697b      	ldr	r3, [r7, #20]
   13c5e:	69ba      	ldr	r2, [r7, #24]
   13c60:	429a      	cmp	r2, r3
   13c62:	d10c      	bne.n	13c7e <str_uni_strip+0x1f6>
        // If nothing was stripped, don't bother to dup original string
        // TODO: watch out for this case when we'll get to bytearray.strip()
        assert(first_good_char_pos == 0);
   13c64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   13c66:	2b00      	cmp	r3, #0
   13c68:	d006      	beq.n	13c78 <str_uni_strip+0x1f0>
   13c6a:	4b13      	ldr	r3, [pc, #76]	; (13cb8 <str_uni_strip+0x230>)
   13c6c:	4a0c      	ldr	r2, [pc, #48]	; (13ca0 <str_uni_strip+0x218>)
   13c6e:	f240 3153 	movw	r1, #851	; 0x353
   13c72:	480c      	ldr	r0, [pc, #48]	; (13ca4 <str_uni_strip+0x21c>)
   13c74:	f009 f934 	bl	1cee0 <__assert_func>
        return args[0];
   13c78:	687b      	ldr	r3, [r7, #4]
   13c7a:	681b      	ldr	r3, [r3, #0]
   13c7c:	e008      	b.n	13c90 <str_uni_strip+0x208>
    }
    return mp_obj_new_str_of_type(self_type, orig_str + first_good_char_pos, stripped_len);
   13c7e:	6bba      	ldr	r2, [r7, #56]	; 0x38
   13c80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   13c82:	4413      	add	r3, r2
   13c84:	69ba      	ldr	r2, [r7, #24]
   13c86:	4619      	mov	r1, r3
   13c88:	69f8      	ldr	r0, [r7, #28]
   13c8a:	f001 fd3a 	bl	15702 <mp_obj_new_str_of_type>
   13c8e:	4603      	mov	r3, r0
}
   13c90:	4618      	mov	r0, r3
   13c92:	3748      	adds	r7, #72	; 0x48
   13c94:	46bd      	mov	sp, r7
   13c96:	bd80      	pop	{r7, pc}
   13c98:	00012d2f 	.word	0x00012d2f
   13c9c:	00025390 	.word	0x00025390
   13ca0:	00025874 	.word	0x00025874
   13ca4:	000252f4 	.word	0x000252f4
   13ca8:	00025884 	.word	0x00025884
   13cac:	000257b0 	.word	0x000257b0
   13cb0:	0002582c 	.word	0x0002582c
   13cb4:	00025488 	.word	0x00025488
   13cb8:	000254b4 	.word	0x000254b4

00013cbc <str_strip>:

STATIC mp_obj_t str_strip(size_t n_args, const mp_obj_t *args) {
   13cbc:	b580      	push	{r7, lr}
   13cbe:	b082      	sub	sp, #8
   13cc0:	af00      	add	r7, sp, #0
   13cc2:	6078      	str	r0, [r7, #4]
   13cc4:	6039      	str	r1, [r7, #0]
    return str_uni_strip(STRIP, n_args, args);
   13cc6:	683a      	ldr	r2, [r7, #0]
   13cc8:	6879      	ldr	r1, [r7, #4]
   13cca:	2002      	movs	r0, #2
   13ccc:	f7ff fedc 	bl	13a88 <str_uni_strip>
   13cd0:	4603      	mov	r3, r0
}
   13cd2:	4618      	mov	r0, r3
   13cd4:	3708      	adds	r7, #8
   13cd6:	46bd      	mov	sp, r7
   13cd8:	bd80      	pop	{r7, pc}

00013cda <str_lstrip>:
MP_DEFINE_CONST_FUN_OBJ_VAR_BETWEEN(str_strip_obj, 1, 2, str_strip);

STATIC mp_obj_t str_lstrip(size_t n_args, const mp_obj_t *args) {
   13cda:	b580      	push	{r7, lr}
   13cdc:	b082      	sub	sp, #8
   13cde:	af00      	add	r7, sp, #0
   13ce0:	6078      	str	r0, [r7, #4]
   13ce2:	6039      	str	r1, [r7, #0]
    return str_uni_strip(LSTRIP, n_args, args);
   13ce4:	683a      	ldr	r2, [r7, #0]
   13ce6:	6879      	ldr	r1, [r7, #4]
   13ce8:	2000      	movs	r0, #0
   13cea:	f7ff fecd 	bl	13a88 <str_uni_strip>
   13cee:	4603      	mov	r3, r0
}
   13cf0:	4618      	mov	r0, r3
   13cf2:	3708      	adds	r7, #8
   13cf4:	46bd      	mov	sp, r7
   13cf6:	bd80      	pop	{r7, pc}

00013cf8 <str_rstrip>:
MP_DEFINE_CONST_FUN_OBJ_VAR_BETWEEN(str_lstrip_obj, 1, 2, str_lstrip);

STATIC mp_obj_t str_rstrip(size_t n_args, const mp_obj_t *args) {
   13cf8:	b580      	push	{r7, lr}
   13cfa:	b082      	sub	sp, #8
   13cfc:	af00      	add	r7, sp, #0
   13cfe:	6078      	str	r0, [r7, #4]
   13d00:	6039      	str	r1, [r7, #0]
    return str_uni_strip(RSTRIP, n_args, args);
   13d02:	683a      	ldr	r2, [r7, #0]
   13d04:	6879      	ldr	r1, [r7, #4]
   13d06:	2001      	movs	r0, #1
   13d08:	f7ff febe 	bl	13a88 <str_uni_strip>
   13d0c:	4603      	mov	r3, r0
}
   13d0e:	4618      	mov	r0, r3
   13d10:	3708      	adds	r7, #8
   13d12:	46bd      	mov	sp, r7
   13d14:	bd80      	pop	{r7, pc}

00013d16 <str_to_int>:
MP_DEFINE_CONST_FUN_OBJ_2(str_center_obj, str_center);
#endif

// Takes an int arg, but only parses unsigned numbers, and only changes
// *num if at least one digit was parsed.
STATIC const char *str_to_int(const char *str, const char *top, int *num) {
   13d16:	b480      	push	{r7}
   13d18:	b085      	sub	sp, #20
   13d1a:	af00      	add	r7, sp, #0
   13d1c:	60f8      	str	r0, [r7, #12]
   13d1e:	60b9      	str	r1, [r7, #8]
   13d20:	607a      	str	r2, [r7, #4]
    if (str < top && '0' <= *str && *str <= '9') {
   13d22:	68fa      	ldr	r2, [r7, #12]
   13d24:	68bb      	ldr	r3, [r7, #8]
   13d26:	429a      	cmp	r2, r3
   13d28:	d226      	bcs.n	13d78 <str_to_int+0x62>
   13d2a:	68fb      	ldr	r3, [r7, #12]
   13d2c:	781b      	ldrb	r3, [r3, #0]
   13d2e:	2b2f      	cmp	r3, #47	; 0x2f
   13d30:	d922      	bls.n	13d78 <str_to_int+0x62>
   13d32:	68fb      	ldr	r3, [r7, #12]
   13d34:	781b      	ldrb	r3, [r3, #0]
   13d36:	2b39      	cmp	r3, #57	; 0x39
   13d38:	d81e      	bhi.n	13d78 <str_to_int+0x62>
        *num = 0;
   13d3a:	687b      	ldr	r3, [r7, #4]
   13d3c:	2200      	movs	r2, #0
   13d3e:	601a      	str	r2, [r3, #0]
        do {
            *num = *num * 10 + (*str - '0');
   13d40:	687b      	ldr	r3, [r7, #4]
   13d42:	681a      	ldr	r2, [r3, #0]
   13d44:	4613      	mov	r3, r2
   13d46:	009b      	lsls	r3, r3, #2
   13d48:	4413      	add	r3, r2
   13d4a:	005b      	lsls	r3, r3, #1
   13d4c:	461a      	mov	r2, r3
   13d4e:	68fb      	ldr	r3, [r7, #12]
   13d50:	781b      	ldrb	r3, [r3, #0]
   13d52:	3b30      	subs	r3, #48	; 0x30
   13d54:	441a      	add	r2, r3
   13d56:	687b      	ldr	r3, [r7, #4]
   13d58:	601a      	str	r2, [r3, #0]
            str++;
   13d5a:	68fb      	ldr	r3, [r7, #12]
   13d5c:	3301      	adds	r3, #1
   13d5e:	60fb      	str	r3, [r7, #12]
        }
        while (str < top && '0' <= *str && *str <= '9');
   13d60:	68fa      	ldr	r2, [r7, #12]
   13d62:	68bb      	ldr	r3, [r7, #8]
   13d64:	429a      	cmp	r2, r3
   13d66:	d207      	bcs.n	13d78 <str_to_int+0x62>
   13d68:	68fb      	ldr	r3, [r7, #12]
   13d6a:	781b      	ldrb	r3, [r3, #0]
   13d6c:	2b2f      	cmp	r3, #47	; 0x2f
   13d6e:	d903      	bls.n	13d78 <str_to_int+0x62>
   13d70:	68fb      	ldr	r3, [r7, #12]
   13d72:	781b      	ldrb	r3, [r3, #0]
   13d74:	2b39      	cmp	r3, #57	; 0x39
   13d76:	d9e3      	bls.n	13d40 <str_to_int+0x2a>
    }
    return str;
   13d78:	68fb      	ldr	r3, [r7, #12]
}
   13d7a:	4618      	mov	r0, r3
   13d7c:	3714      	adds	r7, #20
   13d7e:	46bd      	mov	sp, r7
   13d80:	f85d 7b04 	ldr.w	r7, [sp], #4
   13d84:	4770      	bx	lr

00013d86 <isalignment>:

STATIC bool isalignment(char ch) {
   13d86:	b580      	push	{r7, lr}
   13d88:	b082      	sub	sp, #8
   13d8a:	af00      	add	r7, sp, #0
   13d8c:	4603      	mov	r3, r0
   13d8e:	71fb      	strb	r3, [r7, #7]
    return ch && strchr("<>=^", ch) != NULL;
   13d90:	79fb      	ldrb	r3, [r7, #7]
   13d92:	2b00      	cmp	r3, #0
   13d94:	d009      	beq.n	13daa <isalignment+0x24>
   13d96:	79fb      	ldrb	r3, [r7, #7]
   13d98:	4619      	mov	r1, r3
   13d9a:	4808      	ldr	r0, [pc, #32]	; (13dbc <isalignment+0x36>)
   13d9c:	f00a fdf6 	bl	1e98c <strchr>
   13da0:	4603      	mov	r3, r0
   13da2:	2b00      	cmp	r3, #0
   13da4:	d001      	beq.n	13daa <isalignment+0x24>
   13da6:	2301      	movs	r3, #1
   13da8:	e000      	b.n	13dac <isalignment+0x26>
   13daa:	2300      	movs	r3, #0
   13dac:	f003 0301 	and.w	r3, r3, #1
   13db0:	b2db      	uxtb	r3, r3
}
   13db2:	4618      	mov	r0, r3
   13db4:	3708      	adds	r7, #8
   13db6:	46bd      	mov	sp, r7
   13db8:	bd80      	pop	{r7, pc}
   13dba:	bf00      	nop
   13dbc:	000254f4 	.word	0x000254f4

00013dc0 <istype>:

STATIC bool istype(char ch) {
   13dc0:	b580      	push	{r7, lr}
   13dc2:	b082      	sub	sp, #8
   13dc4:	af00      	add	r7, sp, #0
   13dc6:	4603      	mov	r3, r0
   13dc8:	71fb      	strb	r3, [r7, #7]
    return ch && strchr("bcdeEfFgGnosxX%", ch) != NULL;
   13dca:	79fb      	ldrb	r3, [r7, #7]
   13dcc:	2b00      	cmp	r3, #0
   13dce:	d009      	beq.n	13de4 <istype+0x24>
   13dd0:	79fb      	ldrb	r3, [r7, #7]
   13dd2:	4619      	mov	r1, r3
   13dd4:	4807      	ldr	r0, [pc, #28]	; (13df4 <istype+0x34>)
   13dd6:	f00a fdd9 	bl	1e98c <strchr>
   13dda:	4603      	mov	r3, r0
   13ddc:	2b00      	cmp	r3, #0
   13dde:	d001      	beq.n	13de4 <istype+0x24>
   13de0:	2301      	movs	r3, #1
   13de2:	e000      	b.n	13de6 <istype+0x26>
   13de4:	2300      	movs	r3, #0
   13de6:	f003 0301 	and.w	r3, r3, #1
   13dea:	b2db      	uxtb	r3, r3
}
   13dec:	4618      	mov	r0, r3
   13dee:	3708      	adds	r7, #8
   13df0:	46bd      	mov	sp, r7
   13df2:	bd80      	pop	{r7, pc}
   13df4:	000254fc 	.word	0x000254fc

00013df8 <arg_looks_integer>:

STATIC bool arg_looks_integer(mp_obj_t arg) {
   13df8:	b580      	push	{r7, lr}
   13dfa:	b082      	sub	sp, #8
   13dfc:	af00      	add	r7, sp, #0
   13dfe:	6078      	str	r0, [r7, #4]
    return MP_OBJ_IS_TYPE(arg, &mp_type_bool) || MP_OBJ_IS_INT(arg);
   13e00:	6878      	ldr	r0, [r7, #4]
   13e02:	f7fe fc51 	bl	126a8 <MP_OBJ_IS_OBJ>
   13e06:	4603      	mov	r3, r0
   13e08:	2b00      	cmp	r3, #0
   13e0a:	d004      	beq.n	13e16 <arg_looks_integer+0x1e>
   13e0c:	687b      	ldr	r3, [r7, #4]
   13e0e:	681b      	ldr	r3, [r3, #0]
   13e10:	4a0e      	ldr	r2, [pc, #56]	; (13e4c <arg_looks_integer+0x54>)
   13e12:	4293      	cmp	r3, r2
   13e14:	d010      	beq.n	13e38 <arg_looks_integer+0x40>
   13e16:	6878      	ldr	r0, [r7, #4]
   13e18:	f7fe fc22 	bl	12660 <MP_OBJ_IS_SMALL_INT>
   13e1c:	4603      	mov	r3, r0
   13e1e:	2b00      	cmp	r3, #0
   13e20:	d10a      	bne.n	13e38 <arg_looks_integer+0x40>
   13e22:	6878      	ldr	r0, [r7, #4]
   13e24:	f7fe fc40 	bl	126a8 <MP_OBJ_IS_OBJ>
   13e28:	4603      	mov	r3, r0
   13e2a:	2b00      	cmp	r3, #0
   13e2c:	d006      	beq.n	13e3c <arg_looks_integer+0x44>
   13e2e:	687b      	ldr	r3, [r7, #4]
   13e30:	681b      	ldr	r3, [r3, #0]
   13e32:	4a07      	ldr	r2, [pc, #28]	; (13e50 <arg_looks_integer+0x58>)
   13e34:	4293      	cmp	r3, r2
   13e36:	d101      	bne.n	13e3c <arg_looks_integer+0x44>
   13e38:	2301      	movs	r3, #1
   13e3a:	e000      	b.n	13e3e <arg_looks_integer+0x46>
   13e3c:	2300      	movs	r3, #0
   13e3e:	f003 0301 	and.w	r3, r3, #1
   13e42:	b2db      	uxtb	r3, r3
}
   13e44:	4618      	mov	r0, r3
   13e46:	3708      	adds	r7, #8
   13e48:	46bd      	mov	sp, r7
   13e4a:	bd80      	pop	{r7, pc}
   13e4c:	00023824 	.word	0x00023824
   13e50:	00024bd8 	.word	0x00024bd8

00013e54 <arg_looks_numeric>:

STATIC bool arg_looks_numeric(mp_obj_t arg) {
   13e54:	b580      	push	{r7, lr}
   13e56:	b082      	sub	sp, #8
   13e58:	af00      	add	r7, sp, #0
   13e5a:	6078      	str	r0, [r7, #4]
    return arg_looks_integer(arg)
   13e5c:	6878      	ldr	r0, [r7, #4]
   13e5e:	f7ff ffcb 	bl	13df8 <arg_looks_integer>
   13e62:	4603      	mov	r3, r0
#if MICROPY_PY_BUILTINS_FLOAT
        || mp_obj_is_float(arg)
#endif
    ;
}
   13e64:	4618      	mov	r0, r3
   13e66:	3708      	adds	r7, #8
   13e68:	46bd      	mov	sp, r7
   13e6a:	bd80      	pop	{r7, pc}

00013e6c <arg_as_int>:

#if MICROPY_PY_BUILTINS_STR_OP_MODULO
STATIC mp_obj_t arg_as_int(mp_obj_t arg) {
   13e6c:	b480      	push	{r7}
   13e6e:	b083      	sub	sp, #12
   13e70:	af00      	add	r7, sp, #0
   13e72:	6078      	str	r0, [r7, #4]
#if MICROPY_PY_BUILTINS_FLOAT
    if (mp_obj_is_float(arg)) {
        return mp_obj_new_int_from_float(mp_obj_float_get(arg));
    }
#endif
    return arg;
   13e74:	687b      	ldr	r3, [r7, #4]
}
   13e76:	4618      	mov	r0, r3
   13e78:	370c      	adds	r7, #12
   13e7a:	46bd      	mov	sp, r7
   13e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
   13e80:	4770      	bx	lr

00013e82 <terse_str_format_value_error>:
#endif

#if MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE
STATIC NORETURN void terse_str_format_value_error(void) {
   13e82:	b580      	push	{r7, lr}
   13e84:	af00      	add	r7, sp, #0
    mp_raise_ValueError("bad format string");
   13e86:	4801      	ldr	r0, [pc, #4]	; (13e8c <terse_str_format_value_error+0xa>)
   13e88:	f7f9 fa75 	bl	d376 <mp_raise_ValueError>
   13e8c:	0002550c 	.word	0x0002550c

00013e90 <mp_obj_str_format_helper>:
#else
// define to nothing to improve coverage
#define terse_str_format_value_error()
#endif

STATIC vstr_t mp_obj_str_format_helper(const char *str, const char *top, int *arg_i, size_t n_args, const mp_obj_t *args, mp_map_t *kwargs) {
   13e90:	b590      	push	{r4, r7, lr}
   13e92:	b0ad      	sub	sp, #180	; 0xb4
   13e94:	af04      	add	r7, sp, #16
   13e96:	60f8      	str	r0, [r7, #12]
   13e98:	60b9      	str	r1, [r7, #8]
   13e9a:	607a      	str	r2, [r7, #4]
   13e9c:	603b      	str	r3, [r7, #0]
    vstr_t vstr;
    mp_print_t print;
    vstr_init_print(&vstr, 16, &print);
   13e9e:	f107 024c 	add.w	r2, r7, #76	; 0x4c
   13ea2:	f107 0354 	add.w	r3, r7, #84	; 0x54
   13ea6:	2110      	movs	r1, #16
   13ea8:	4618      	mov	r0, r3
   13eaa:	f7ed fb64 	bl	1576 <vstr_init_print>

    for (; str < top; str++) {
   13eae:	f000 bc91 	b.w	147d4 <mp_obj_str_format_helper+0x944>
        if (*str == '}') {
   13eb2:	68bb      	ldr	r3, [r7, #8]
   13eb4:	781b      	ldrb	r3, [r3, #0]
   13eb6:	2b7d      	cmp	r3, #125	; 0x7d
   13eb8:	d114      	bne.n	13ee4 <mp_obj_str_format_helper+0x54>
            str++;
   13eba:	68bb      	ldr	r3, [r7, #8]
   13ebc:	3301      	adds	r3, #1
   13ebe:	60bb      	str	r3, [r7, #8]
            if (str < top && *str == '}') {
   13ec0:	68ba      	ldr	r2, [r7, #8]
   13ec2:	687b      	ldr	r3, [r7, #4]
   13ec4:	429a      	cmp	r2, r3
   13ec6:	d20b      	bcs.n	13ee0 <mp_obj_str_format_helper+0x50>
   13ec8:	68bb      	ldr	r3, [r7, #8]
   13eca:	781b      	ldrb	r3, [r3, #0]
   13ecc:	2b7d      	cmp	r3, #125	; 0x7d
   13ece:	d107      	bne.n	13ee0 <mp_obj_str_format_helper+0x50>
                vstr_add_byte(&vstr, '}');
   13ed0:	f107 0354 	add.w	r3, r7, #84	; 0x54
   13ed4:	217d      	movs	r1, #125	; 0x7d
   13ed6:	4618      	mov	r0, r3
   13ed8:	f7ed fc52 	bl	1780 <vstr_add_byte>
                continue;
   13edc:	f000 bc77 	b.w	147ce <mp_obj_str_format_helper+0x93e>
            }
            if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
                terse_str_format_value_error();
   13ee0:	f7ff ffcf 	bl	13e82 <terse_str_format_value_error>
            } else {
                mp_raise_ValueError("single '}' encountered in format string");
            }
        }
        if (*str != '{') {
   13ee4:	68bb      	ldr	r3, [r7, #8]
   13ee6:	781b      	ldrb	r3, [r3, #0]
   13ee8:	2b7b      	cmp	r3, #123	; 0x7b
   13eea:	d009      	beq.n	13f00 <mp_obj_str_format_helper+0x70>
            vstr_add_byte(&vstr, *str);
   13eec:	68bb      	ldr	r3, [r7, #8]
   13eee:	781a      	ldrb	r2, [r3, #0]
   13ef0:	f107 0354 	add.w	r3, r7, #84	; 0x54
   13ef4:	4611      	mov	r1, r2
   13ef6:	4618      	mov	r0, r3
   13ef8:	f7ed fc42 	bl	1780 <vstr_add_byte>
            continue;
   13efc:	f000 bc67 	b.w	147ce <mp_obj_str_format_helper+0x93e>
        }

        str++;
   13f00:	68bb      	ldr	r3, [r7, #8]
   13f02:	3301      	adds	r3, #1
   13f04:	60bb      	str	r3, [r7, #8]
        if (str < top && *str == '{') {
   13f06:	68ba      	ldr	r2, [r7, #8]
   13f08:	687b      	ldr	r3, [r7, #4]
   13f0a:	429a      	cmp	r2, r3
   13f0c:	d20b      	bcs.n	13f26 <mp_obj_str_format_helper+0x96>
   13f0e:	68bb      	ldr	r3, [r7, #8]
   13f10:	781b      	ldrb	r3, [r3, #0]
   13f12:	2b7b      	cmp	r3, #123	; 0x7b
   13f14:	d107      	bne.n	13f26 <mp_obj_str_format_helper+0x96>
            vstr_add_byte(&vstr, '{');
   13f16:	f107 0354 	add.w	r3, r7, #84	; 0x54
   13f1a:	217b      	movs	r1, #123	; 0x7b
   13f1c:	4618      	mov	r0, r3
   13f1e:	f7ed fc2f 	bl	1780 <vstr_add_byte>
            continue;
   13f22:	f000 bc54 	b.w	147ce <mp_obj_str_format_helper+0x93e>
        }

        // replacement_field ::=  "{" [field_name] ["!" conversion] [":" format_spec] "}"

        const char *field_name = NULL;
   13f26:	2300      	movs	r3, #0
   13f28:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        const char *field_name_top = NULL;
   13f2c:	2300      	movs	r3, #0
   13f2e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        char conversion = '\0';
   13f32:	2300      	movs	r3, #0
   13f34:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
        const char *format_spec = NULL;
   13f38:	2300      	movs	r3, #0
   13f3a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

        if (str < top && *str != '}' && *str != '!' && *str != ':') {
   13f3e:	68ba      	ldr	r2, [r7, #8]
   13f40:	687b      	ldr	r3, [r7, #4]
   13f42:	429a      	cmp	r2, r3
   13f44:	d225      	bcs.n	13f92 <mp_obj_str_format_helper+0x102>
   13f46:	68bb      	ldr	r3, [r7, #8]
   13f48:	781b      	ldrb	r3, [r3, #0]
   13f4a:	2b7d      	cmp	r3, #125	; 0x7d
   13f4c:	d021      	beq.n	13f92 <mp_obj_str_format_helper+0x102>
   13f4e:	68bb      	ldr	r3, [r7, #8]
   13f50:	781b      	ldrb	r3, [r3, #0]
   13f52:	2b21      	cmp	r3, #33	; 0x21
   13f54:	d01d      	beq.n	13f92 <mp_obj_str_format_helper+0x102>
   13f56:	68bb      	ldr	r3, [r7, #8]
   13f58:	781b      	ldrb	r3, [r3, #0]
   13f5a:	2b3a      	cmp	r3, #58	; 0x3a
   13f5c:	d019      	beq.n	13f92 <mp_obj_str_format_helper+0x102>
            field_name = (const char *)str;
   13f5e:	68bb      	ldr	r3, [r7, #8]
   13f60:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
            while (str < top && *str != '}' && *str != '!' && *str != ':') {
   13f64:	e002      	b.n	13f6c <mp_obj_str_format_helper+0xdc>
                ++str;
   13f66:	68bb      	ldr	r3, [r7, #8]
   13f68:	3301      	adds	r3, #1
   13f6a:	60bb      	str	r3, [r7, #8]
            while (str < top && *str != '}' && *str != '!' && *str != ':') {
   13f6c:	68ba      	ldr	r2, [r7, #8]
   13f6e:	687b      	ldr	r3, [r7, #4]
   13f70:	429a      	cmp	r2, r3
   13f72:	d20b      	bcs.n	13f8c <mp_obj_str_format_helper+0xfc>
   13f74:	68bb      	ldr	r3, [r7, #8]
   13f76:	781b      	ldrb	r3, [r3, #0]
   13f78:	2b7d      	cmp	r3, #125	; 0x7d
   13f7a:	d007      	beq.n	13f8c <mp_obj_str_format_helper+0xfc>
   13f7c:	68bb      	ldr	r3, [r7, #8]
   13f7e:	781b      	ldrb	r3, [r3, #0]
   13f80:	2b21      	cmp	r3, #33	; 0x21
   13f82:	d003      	beq.n	13f8c <mp_obj_str_format_helper+0xfc>
   13f84:	68bb      	ldr	r3, [r7, #8]
   13f86:	781b      	ldrb	r3, [r3, #0]
   13f88:	2b3a      	cmp	r3, #58	; 0x3a
   13f8a:	d1ec      	bne.n	13f66 <mp_obj_str_format_helper+0xd6>
            }
            field_name_top = (const char *)str;
   13f8c:	68bb      	ldr	r3, [r7, #8]
   13f8e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        }

        // conversion ::=  "r" | "s"

        if (str < top && *str == '!') {
   13f92:	68ba      	ldr	r2, [r7, #8]
   13f94:	687b      	ldr	r3, [r7, #4]
   13f96:	429a      	cmp	r2, r3
   13f98:	d21b      	bcs.n	13fd2 <mp_obj_str_format_helper+0x142>
   13f9a:	68bb      	ldr	r3, [r7, #8]
   13f9c:	781b      	ldrb	r3, [r3, #0]
   13f9e:	2b21      	cmp	r3, #33	; 0x21
   13fa0:	d117      	bne.n	13fd2 <mp_obj_str_format_helper+0x142>
            str++;
   13fa2:	68bb      	ldr	r3, [r7, #8]
   13fa4:	3301      	adds	r3, #1
   13fa6:	60bb      	str	r3, [r7, #8]
            if (str < top && (*str == 'r' || *str == 's')) {
   13fa8:	68ba      	ldr	r2, [r7, #8]
   13faa:	687b      	ldr	r3, [r7, #4]
   13fac:	429a      	cmp	r2, r3
   13fae:	d20e      	bcs.n	13fce <mp_obj_str_format_helper+0x13e>
   13fb0:	68bb      	ldr	r3, [r7, #8]
   13fb2:	781b      	ldrb	r3, [r3, #0]
   13fb4:	2b72      	cmp	r3, #114	; 0x72
   13fb6:	d003      	beq.n	13fc0 <mp_obj_str_format_helper+0x130>
   13fb8:	68bb      	ldr	r3, [r7, #8]
   13fba:	781b      	ldrb	r3, [r3, #0]
   13fbc:	2b73      	cmp	r3, #115	; 0x73
   13fbe:	d106      	bne.n	13fce <mp_obj_str_format_helper+0x13e>
                conversion = *str++;
   13fc0:	68bb      	ldr	r3, [r7, #8]
   13fc2:	1c5a      	adds	r2, r3, #1
   13fc4:	60ba      	str	r2, [r7, #8]
   13fc6:	781b      	ldrb	r3, [r3, #0]
   13fc8:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
   13fcc:	e001      	b.n	13fd2 <mp_obj_str_format_helper+0x142>
            } else {
                if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
                    terse_str_format_value_error();
   13fce:	f7ff ff58 	bl	13e82 <terse_str_format_value_error>
                    }
                }
            }
        }

        if (str < top && *str == ':') {
   13fd2:	68ba      	ldr	r2, [r7, #8]
   13fd4:	687b      	ldr	r3, [r7, #4]
   13fd6:	429a      	cmp	r2, r3
   13fd8:	d231      	bcs.n	1403e <mp_obj_str_format_helper+0x1ae>
   13fda:	68bb      	ldr	r3, [r7, #8]
   13fdc:	781b      	ldrb	r3, [r3, #0]
   13fde:	2b3a      	cmp	r3, #58	; 0x3a
   13fe0:	d12d      	bne.n	1403e <mp_obj_str_format_helper+0x1ae>
            str++;
   13fe2:	68bb      	ldr	r3, [r7, #8]
   13fe4:	3301      	adds	r3, #1
   13fe6:	60bb      	str	r3, [r7, #8]
            // {:} is the same as {}, which is the same as {!s}
            // This makes a difference when passing in a True or False
            // '{}'.format(True) returns 'True'
            // '{:d}'.format(True) returns '1'
            // So we treat {:} as {} and this later gets treated to be {!s}
            if (*str != '}') {
   13fe8:	68bb      	ldr	r3, [r7, #8]
   13fea:	781b      	ldrb	r3, [r3, #0]
   13fec:	2b7d      	cmp	r3, #125	; 0x7d
   13fee:	d026      	beq.n	1403e <mp_obj_str_format_helper+0x1ae>
                format_spec = str;
   13ff0:	68bb      	ldr	r3, [r7, #8]
   13ff2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
                for (int nest = 1; str < top;) {
   13ff6:	2301      	movs	r3, #1
   13ff8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   13ffc:	e019      	b.n	14032 <mp_obj_str_format_helper+0x1a2>
                    if (*str == '{') {
   13ffe:	68bb      	ldr	r3, [r7, #8]
   14000:	781b      	ldrb	r3, [r3, #0]
   14002:	2b7b      	cmp	r3, #123	; 0x7b
   14004:	d105      	bne.n	14012 <mp_obj_str_format_helper+0x182>
                        ++nest;
   14006:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
   1400a:	3301      	adds	r3, #1
   1400c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   14010:	e00c      	b.n	1402c <mp_obj_str_format_helper+0x19c>
                    } else if (*str == '}') {
   14012:	68bb      	ldr	r3, [r7, #8]
   14014:	781b      	ldrb	r3, [r3, #0]
   14016:	2b7d      	cmp	r3, #125	; 0x7d
   14018:	d108      	bne.n	1402c <mp_obj_str_format_helper+0x19c>
                        if (--nest == 0) {
   1401a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
   1401e:	3b01      	subs	r3, #1
   14020:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   14024:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
   14028:	2b00      	cmp	r3, #0
   1402a:	d007      	beq.n	1403c <mp_obj_str_format_helper+0x1ac>
                            break;
                        }
                    }
                    ++str;
   1402c:	68bb      	ldr	r3, [r7, #8]
   1402e:	3301      	adds	r3, #1
   14030:	60bb      	str	r3, [r7, #8]
                for (int nest = 1; str < top;) {
   14032:	68ba      	ldr	r2, [r7, #8]
   14034:	687b      	ldr	r3, [r7, #4]
   14036:	429a      	cmp	r2, r3
   14038:	d3e1      	bcc.n	13ffe <mp_obj_str_format_helper+0x16e>
   1403a:	e000      	b.n	1403e <mp_obj_str_format_helper+0x1ae>
                            break;
   1403c:	bf00      	nop
                }
            }
        }
        if (str >= top) {
   1403e:	68ba      	ldr	r2, [r7, #8]
   14040:	687b      	ldr	r3, [r7, #4]
   14042:	429a      	cmp	r2, r3
   14044:	d301      	bcc.n	1404a <mp_obj_str_format_helper+0x1ba>
            if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
                terse_str_format_value_error();
   14046:	f7ff ff1c 	bl	13e82 <terse_str_format_value_error>
            } else {
                mp_raise_ValueError("unmatched '{' in format");
            }
        }
        if (*str != '}') {
   1404a:	68bb      	ldr	r3, [r7, #8]
   1404c:	781b      	ldrb	r3, [r3, #0]
   1404e:	2b7d      	cmp	r3, #125	; 0x7d
   14050:	d001      	beq.n	14056 <mp_obj_str_format_helper+0x1c6>
            if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
                terse_str_format_value_error();
   14052:	f7ff ff16 	bl	13e82 <terse_str_format_value_error>
            } else {
                mp_raise_ValueError("expected ':' after format specifier");
            }
        }

        mp_obj_t arg = mp_const_none;
   14056:	4ba8      	ldr	r3, [pc, #672]	; (142f8 <mp_obj_str_format_helper+0x468>)
   14058:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

        if (field_name) {
   1405c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
   14060:	2b00      	cmp	r3, #0
   14062:	d07b      	beq.n	1415c <mp_obj_str_format_helper+0x2cc>
            int index = 0;
   14064:	2300      	movs	r3, #0
   14066:	643b      	str	r3, [r7, #64]	; 0x40
            if (MP_LIKELY(unichar_isdigit(*field_name))) {
   14068:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
   1406c:	781b      	ldrb	r3, [r3, #0]
   1406e:	4618      	mov	r0, r3
   14070:	f7ee faa8 	bl	25c4 <unichar_isdigit>
   14074:	4603      	mov	r3, r0
   14076:	2b00      	cmp	r3, #0
   14078:	d028      	beq.n	140cc <mp_obj_str_format_helper+0x23c>
                if (*arg_i > 0) {
   1407a:	683b      	ldr	r3, [r7, #0]
   1407c:	681b      	ldr	r3, [r3, #0]
   1407e:	2b00      	cmp	r3, #0
   14080:	dd01      	ble.n	14086 <mp_obj_str_format_helper+0x1f6>
                    if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
                        terse_str_format_value_error();
   14082:	f7ff fefe 	bl	13e82 <terse_str_format_value_error>
                    } else {
                        mp_raise_ValueError(
                            "can't switch from automatic field numbering to manual field specification");
                    }
                }
                field_name = str_to_int(field_name, field_name_top, &index);
   14086:	f107 0340 	add.w	r3, r7, #64	; 0x40
   1408a:	461a      	mov	r2, r3
   1408c:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
   14090:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
   14094:	f7ff fe3f 	bl	13d16 <str_to_int>
   14098:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
                if ((uint)index >= n_args - 1) {
   1409c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
   140a0:	3b01      	subs	r3, #1
   140a2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   140a4:	4293      	cmp	r3, r2
   140a6:	d803      	bhi.n	140b0 <mp_obj_str_format_helper+0x220>
                    mp_raise_msg(&mp_type_IndexError, "tuple index out of range");
   140a8:	4994      	ldr	r1, [pc, #592]	; (142fc <mp_obj_str_format_helper+0x46c>)
   140aa:	4895      	ldr	r0, [pc, #596]	; (14300 <mp_obj_str_format_helper+0x470>)
   140ac:	f7f9 f94c 	bl	d348 <mp_raise_msg>
                }
                arg = args[index + 1];
   140b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   140b2:	3301      	adds	r3, #1
   140b4:	009b      	lsls	r3, r3, #2
   140b6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
   140ba:	4413      	add	r3, r2
   140bc:	681b      	ldr	r3, [r3, #0]
   140be:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                *arg_i = -1;
   140c2:	683b      	ldr	r3, [r7, #0]
   140c4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   140c8:	601a      	str	r2, [r3, #0]
   140ca:	e03e      	b.n	1414a <mp_obj_str_format_helper+0x2ba>
            } else {
                const char *lookup;
                for (lookup = field_name; lookup < field_name_top && *lookup != '.' && *lookup != '['; lookup++);
   140cc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
   140d0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   140d4:	e004      	b.n	140e0 <mp_obj_str_format_helper+0x250>
   140d6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
   140da:	3301      	adds	r3, #1
   140dc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   140e0:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
   140e4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
   140e8:	429a      	cmp	r2, r3
   140ea:	d209      	bcs.n	14100 <mp_obj_str_format_helper+0x270>
   140ec:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
   140f0:	781b      	ldrb	r3, [r3, #0]
   140f2:	2b2e      	cmp	r3, #46	; 0x2e
   140f4:	d004      	beq.n	14100 <mp_obj_str_format_helper+0x270>
   140f6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
   140fa:	781b      	ldrb	r3, [r3, #0]
   140fc:	2b5b      	cmp	r3, #91	; 0x5b
   140fe:	d1ea      	bne.n	140d6 <mp_obj_str_format_helper+0x246>
                mp_obj_t field_q = mp_obj_new_str_via_qstr(field_name, lookup - field_name); // should it be via qstr?
   14100:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
   14104:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
   14108:	1ad3      	subs	r3, r2, r3
   1410a:	4619      	mov	r1, r3
   1410c:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
   14110:	f001 fb12 	bl	15738 <mp_obj_new_str_via_qstr>
   14114:	6738      	str	r0, [r7, #112]	; 0x70
                field_name = lookup;
   14116:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
   1411a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
                mp_map_elem_t *key_elem = mp_map_lookup(kwargs, field_q, MP_MAP_LOOKUP);
   1411e:	2200      	movs	r2, #0
   14120:	6f39      	ldr	r1, [r7, #112]	; 0x70
   14122:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
   14126:	f7f9 fbb3 	bl	d890 <mp_map_lookup>
   1412a:	66f8      	str	r0, [r7, #108]	; 0x6c
                if (key_elem == NULL) {
   1412c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   1412e:	2b00      	cmp	r3, #0
   14130:	d107      	bne.n	14142 <mp_obj_str_format_helper+0x2b2>
                    nlr_raise(mp_obj_new_exception_arg1(&mp_type_KeyError, field_q));
   14132:	6f39      	ldr	r1, [r7, #112]	; 0x70
   14134:	4873      	ldr	r0, [pc, #460]	; (14304 <mp_obj_str_format_helper+0x474>)
   14136:	f7fb fbdf 	bl	f8f8 <mp_obj_new_exception_arg1>
   1413a:	4603      	mov	r3, r0
   1413c:	4618      	mov	r0, r3
   1413e:	f7ec f8cf 	bl	2e0 <nlr_jump>
                }
                arg = key_elem->value;
   14142:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   14144:	685b      	ldr	r3, [r3, #4]
   14146:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
            }
            if (field_name < field_name_top) {
   1414a:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
   1414e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
   14152:	429a      	cmp	r2, r3
   14154:	d223      	bcs.n	1419e <mp_obj_str_format_helper+0x30e>
                mp_raise_NotImplementedError("attributes not supported yet");
   14156:	486c      	ldr	r0, [pc, #432]	; (14308 <mp_obj_str_format_helper+0x478>)
   14158:	f7f9 f934 	bl	d3c4 <mp_raise_NotImplementedError>
            }
        } else {
            if (*arg_i < 0) {
   1415c:	683b      	ldr	r3, [r7, #0]
   1415e:	681b      	ldr	r3, [r3, #0]
   14160:	2b00      	cmp	r3, #0
   14162:	da01      	bge.n	14168 <mp_obj_str_format_helper+0x2d8>
                if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
                    terse_str_format_value_error();
   14164:	f7ff fe8d 	bl	13e82 <terse_str_format_value_error>
                } else {
                    mp_raise_ValueError(
                        "can't switch from manual field specification to automatic field numbering");
                }
            }
            if ((uint)*arg_i >= n_args - 1) {
   14168:	683b      	ldr	r3, [r7, #0]
   1416a:	681b      	ldr	r3, [r3, #0]
   1416c:	461a      	mov	r2, r3
   1416e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
   14172:	3b01      	subs	r3, #1
   14174:	429a      	cmp	r2, r3
   14176:	d303      	bcc.n	14180 <mp_obj_str_format_helper+0x2f0>
                mp_raise_msg(&mp_type_IndexError, "tuple index out of range");
   14178:	4960      	ldr	r1, [pc, #384]	; (142fc <mp_obj_str_format_helper+0x46c>)
   1417a:	4861      	ldr	r0, [pc, #388]	; (14300 <mp_obj_str_format_helper+0x470>)
   1417c:	f7f9 f8e4 	bl	d348 <mp_raise_msg>
            }
            arg = args[(*arg_i) + 1];
   14180:	683b      	ldr	r3, [r7, #0]
   14182:	681b      	ldr	r3, [r3, #0]
   14184:	3301      	adds	r3, #1
   14186:	009b      	lsls	r3, r3, #2
   14188:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
   1418c:	4413      	add	r3, r2
   1418e:	681b      	ldr	r3, [r3, #0]
   14190:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
            (*arg_i)++;
   14194:	683b      	ldr	r3, [r7, #0]
   14196:	681b      	ldr	r3, [r3, #0]
   14198:	1c5a      	adds	r2, r3, #1
   1419a:	683b      	ldr	r3, [r7, #0]
   1419c:	601a      	str	r2, [r3, #0]
        }
        if (!format_spec && !conversion) {
   1419e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
   141a2:	2b00      	cmp	r3, #0
   141a4:	d106      	bne.n	141b4 <mp_obj_str_format_helper+0x324>
   141a6:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
   141aa:	2b00      	cmp	r3, #0
   141ac:	d102      	bne.n	141b4 <mp_obj_str_format_helper+0x324>
            conversion = 's';
   141ae:	2373      	movs	r3, #115	; 0x73
   141b0:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
        }
        if (conversion) {
   141b4:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
   141b8:	2b00      	cmp	r3, #0
   141ba:	d02e      	beq.n	1421a <mp_obj_str_format_helper+0x38a>
            mp_print_kind_t print_kind;
            if (conversion == 's') {
   141bc:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
   141c0:	2b73      	cmp	r3, #115	; 0x73
   141c2:	d103      	bne.n	141cc <mp_obj_str_format_helper+0x33c>
                print_kind = PRINT_STR;
   141c4:	2300      	movs	r3, #0
   141c6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   141ca:	e00d      	b.n	141e8 <mp_obj_str_format_helper+0x358>
            } else {
                assert(conversion == 'r');
   141cc:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
   141d0:	2b72      	cmp	r3, #114	; 0x72
   141d2:	d006      	beq.n	141e2 <mp_obj_str_format_helper+0x352>
   141d4:	4b4d      	ldr	r3, [pc, #308]	; (1430c <mp_obj_str_format_helper+0x47c>)
   141d6:	4a4e      	ldr	r2, [pc, #312]	; (14310 <mp_obj_str_format_helper+0x480>)
   141d8:	f240 414f 	movw	r1, #1103	; 0x44f
   141dc:	484d      	ldr	r0, [pc, #308]	; (14314 <mp_obj_str_format_helper+0x484>)
   141de:	f008 fe7f 	bl	1cee0 <__assert_func>
                print_kind = PRINT_REPR;
   141e2:	2301      	movs	r3, #1
   141e4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
            }
            vstr_t arg_vstr;
            mp_print_t arg_print;
            vstr_init_print(&arg_vstr, 16, &arg_print);
   141e8:	f107 0228 	add.w	r2, r7, #40	; 0x28
   141ec:	f107 0330 	add.w	r3, r7, #48	; 0x30
   141f0:	2110      	movs	r1, #16
   141f2:	4618      	mov	r0, r3
   141f4:	f7ed f9bf 	bl	1576 <vstr_init_print>
            mp_obj_print_helper(&arg_print, arg, print_kind);
   141f8:	f107 0328 	add.w	r3, r7, #40	; 0x28
   141fc:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
   14200:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
   14204:	4618      	mov	r0, r3
   14206:	f7f9 fd5a 	bl	dcbe <mp_obj_print_helper>
            arg = mp_obj_new_str_from_vstr(&mp_type_str, &arg_vstr);
   1420a:	f107 0330 	add.w	r3, r7, #48	; 0x30
   1420e:	4619      	mov	r1, r3
   14210:	4841      	ldr	r0, [pc, #260]	; (14318 <mp_obj_str_format_helper+0x488>)
   14212:	f001 faa2 	bl	1575a <mp_obj_new_str_from_vstr>
   14216:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
        }

        char fill = '\0';
   1421a:	2300      	movs	r3, #0
   1421c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
        char align = '\0';
   14220:	2300      	movs	r3, #0
   14222:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
        int width = -1;
   14226:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1422a:	64bb      	str	r3, [r7, #72]	; 0x48
        int precision = -1;
   1422c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   14230:	647b      	str	r3, [r7, #68]	; 0x44
        char type = '\0';
   14232:	2300      	movs	r3, #0
   14234:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d
        int flags = 0;
   14238:	2300      	movs	r3, #0
   1423a:	67bb      	str	r3, [r7, #120]	; 0x78

        if (format_spec) {
   1423c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
   14240:	2b00      	cmp	r3, #0
   14242:	f000 80ce 	beq.w	143e2 <mp_obj_str_format_helper+0x552>
            // precision   ::=  integer
            // type        ::=  "b" | "c" | "d" | "e" | "E" | "f" | "F" | "g" | "G" | "n" | "o" | "s" | "x" | "X" | "%"

            // recursively call the formatter to format any nested specifiers
            MP_STACK_CHECK();
            vstr_t format_spec_vstr = mp_obj_str_format_helper(format_spec, str, arg_i, n_args, args, kwargs);
   14246:	f107 0018 	add.w	r0, r7, #24
   1424a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
   1424e:	9302      	str	r3, [sp, #8]
   14250:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
   14254:	9301      	str	r3, [sp, #4]
   14256:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
   1425a:	9300      	str	r3, [sp, #0]
   1425c:	683b      	ldr	r3, [r7, #0]
   1425e:	68ba      	ldr	r2, [r7, #8]
   14260:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
   14264:	f7ff fe14 	bl	13e90 <mp_obj_str_format_helper>
            const char *s = vstr_null_terminated_str(&format_spec_vstr);
   14268:	f107 0318 	add.w	r3, r7, #24
   1426c:	4618      	mov	r0, r3
   1426e:	f7ed fa6c 	bl	174a <vstr_null_terminated_str>
   14272:	6778      	str	r0, [r7, #116]	; 0x74
            const char *stop = s + format_spec_vstr.len;
   14274:	69fb      	ldr	r3, [r7, #28]
   14276:	6f7a      	ldr	r2, [r7, #116]	; 0x74
   14278:	4413      	add	r3, r2
   1427a:	66bb      	str	r3, [r7, #104]	; 0x68
            if (isalignment(*s)) {
   1427c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   1427e:	781b      	ldrb	r3, [r3, #0]
   14280:	4618      	mov	r0, r3
   14282:	f7ff fd80 	bl	13d86 <isalignment>
   14286:	4603      	mov	r3, r0
   14288:	2b00      	cmp	r3, #0
   1428a:	d006      	beq.n	1429a <mp_obj_str_format_helper+0x40a>
                align = *s++;
   1428c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   1428e:	1c5a      	adds	r2, r3, #1
   14290:	677a      	str	r2, [r7, #116]	; 0x74
   14292:	781b      	ldrb	r3, [r3, #0]
   14294:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
   14298:	e018      	b.n	142cc <mp_obj_str_format_helper+0x43c>
            } else if (*s && isalignment(s[1])) {
   1429a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   1429c:	781b      	ldrb	r3, [r3, #0]
   1429e:	2b00      	cmp	r3, #0
   142a0:	d014      	beq.n	142cc <mp_obj_str_format_helper+0x43c>
   142a2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   142a4:	3301      	adds	r3, #1
   142a6:	781b      	ldrb	r3, [r3, #0]
   142a8:	4618      	mov	r0, r3
   142aa:	f7ff fd6c 	bl	13d86 <isalignment>
   142ae:	4603      	mov	r3, r0
   142b0:	2b00      	cmp	r3, #0
   142b2:	d00b      	beq.n	142cc <mp_obj_str_format_helper+0x43c>
                fill = *s++;
   142b4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   142b6:	1c5a      	adds	r2, r3, #1
   142b8:	677a      	str	r2, [r7, #116]	; 0x74
   142ba:	781b      	ldrb	r3, [r3, #0]
   142bc:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
                align = *s++;
   142c0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   142c2:	1c5a      	adds	r2, r3, #1
   142c4:	677a      	str	r2, [r7, #116]	; 0x74
   142c6:	781b      	ldrb	r3, [r3, #0]
   142c8:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
            }
            if (*s == '+' || *s == '-' || *s == ' ') {
   142cc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   142ce:	781b      	ldrb	r3, [r3, #0]
   142d0:	2b2b      	cmp	r3, #43	; 0x2b
   142d2:	d007      	beq.n	142e4 <mp_obj_str_format_helper+0x454>
   142d4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   142d6:	781b      	ldrb	r3, [r3, #0]
   142d8:	2b2d      	cmp	r3, #45	; 0x2d
   142da:	d003      	beq.n	142e4 <mp_obj_str_format_helper+0x454>
   142dc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   142de:	781b      	ldrb	r3, [r3, #0]
   142e0:	2b20      	cmp	r3, #32
   142e2:	d126      	bne.n	14332 <mp_obj_str_format_helper+0x4a2>
                if (*s == '+') {
   142e4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   142e6:	781b      	ldrb	r3, [r3, #0]
   142e8:	2b2b      	cmp	r3, #43	; 0x2b
   142ea:	d117      	bne.n	1431c <mp_obj_str_format_helper+0x48c>
                    flags |= PF_FLAG_SHOW_SIGN;
   142ec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   142ee:	f043 0302 	orr.w	r3, r3, #2
   142f2:	67bb      	str	r3, [r7, #120]	; 0x78
   142f4:	e01a      	b.n	1432c <mp_obj_str_format_helper+0x49c>
   142f6:	bf00      	nop
   142f8:	0002511c 	.word	0x0002511c
   142fc:	00025520 	.word	0x00025520
   14300:	00024158 	.word	0x00024158
   14304:	00024194 	.word	0x00024194
   14308:	0002553c 	.word	0x0002553c
   1430c:	0002555c 	.word	0x0002555c
   14310:	0002588c 	.word	0x0002588c
   14314:	000252f4 	.word	0x000252f4
   14318:	000257b0 	.word	0x000257b0
                } else if (*s == ' ') {
   1431c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   1431e:	781b      	ldrb	r3, [r3, #0]
   14320:	2b20      	cmp	r3, #32
   14322:	d103      	bne.n	1432c <mp_obj_str_format_helper+0x49c>
                    flags |= PF_FLAG_SPACE_SIGN;
   14324:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   14326:	f043 0304 	orr.w	r3, r3, #4
   1432a:	67bb      	str	r3, [r7, #120]	; 0x78
                }
                s++;
   1432c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   1432e:	3301      	adds	r3, #1
   14330:	677b      	str	r3, [r7, #116]	; 0x74
            }
            if (*s == '#') {
   14332:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   14334:	781b      	ldrb	r3, [r3, #0]
   14336:	2b23      	cmp	r3, #35	; 0x23
   14338:	d106      	bne.n	14348 <mp_obj_str_format_helper+0x4b8>
                flags |= PF_FLAG_SHOW_PREFIX;
   1433a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   1433c:	f043 0310 	orr.w	r3, r3, #16
   14340:	67bb      	str	r3, [r7, #120]	; 0x78
                s++;
   14342:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   14344:	3301      	adds	r3, #1
   14346:	677b      	str	r3, [r7, #116]	; 0x74
            }
            if (*s == '0') {
   14348:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   1434a:	781b      	ldrb	r3, [r3, #0]
   1434c:	2b30      	cmp	r3, #48	; 0x30
   1434e:	d10d      	bne.n	1436c <mp_obj_str_format_helper+0x4dc>
                if (!align) {
   14350:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
   14354:	2b00      	cmp	r3, #0
   14356:	d102      	bne.n	1435e <mp_obj_str_format_helper+0x4ce>
                    align = '=';
   14358:	233d      	movs	r3, #61	; 0x3d
   1435a:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
                }
                if (!fill) {
   1435e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
   14362:	2b00      	cmp	r3, #0
   14364:	d102      	bne.n	1436c <mp_obj_str_format_helper+0x4dc>
                    fill = '0';
   14366:	2330      	movs	r3, #48	; 0x30
   14368:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
                }
            }
            s = str_to_int(s, stop, &width);
   1436c:	f107 0348 	add.w	r3, r7, #72	; 0x48
   14370:	461a      	mov	r2, r3
   14372:	6eb9      	ldr	r1, [r7, #104]	; 0x68
   14374:	6f78      	ldr	r0, [r7, #116]	; 0x74
   14376:	f7ff fcce 	bl	13d16 <str_to_int>
   1437a:	6778      	str	r0, [r7, #116]	; 0x74
            if (*s == ',') {
   1437c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   1437e:	781b      	ldrb	r3, [r3, #0]
   14380:	2b2c      	cmp	r3, #44	; 0x2c
   14382:	d106      	bne.n	14392 <mp_obj_str_format_helper+0x502>
                flags |= PF_FLAG_SHOW_COMMA;
   14384:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   14386:	f043 0320 	orr.w	r3, r3, #32
   1438a:	67bb      	str	r3, [r7, #120]	; 0x78
                s++;
   1438c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   1438e:	3301      	adds	r3, #1
   14390:	677b      	str	r3, [r7, #116]	; 0x74
            }
            if (*s == '.') {
   14392:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   14394:	781b      	ldrb	r3, [r3, #0]
   14396:	2b2e      	cmp	r3, #46	; 0x2e
   14398:	d10a      	bne.n	143b0 <mp_obj_str_format_helper+0x520>
                s++;
   1439a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   1439c:	3301      	adds	r3, #1
   1439e:	677b      	str	r3, [r7, #116]	; 0x74
                s = str_to_int(s, stop, &precision);
   143a0:	f107 0344 	add.w	r3, r7, #68	; 0x44
   143a4:	461a      	mov	r2, r3
   143a6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
   143a8:	6f78      	ldr	r0, [r7, #116]	; 0x74
   143aa:	f7ff fcb4 	bl	13d16 <str_to_int>
   143ae:	6778      	str	r0, [r7, #116]	; 0x74
            }
            if (istype(*s)) {
   143b0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   143b2:	781b      	ldrb	r3, [r3, #0]
   143b4:	4618      	mov	r0, r3
   143b6:	f7ff fd03 	bl	13dc0 <istype>
   143ba:	4603      	mov	r3, r0
   143bc:	2b00      	cmp	r3, #0
   143be:	d005      	beq.n	143cc <mp_obj_str_format_helper+0x53c>
                type = *s++;
   143c0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   143c2:	1c5a      	adds	r2, r3, #1
   143c4:	677a      	str	r2, [r7, #116]	; 0x74
   143c6:	781b      	ldrb	r3, [r3, #0]
   143c8:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d
            }
            if (*s) {
   143cc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   143ce:	781b      	ldrb	r3, [r3, #0]
   143d0:	2b00      	cmp	r3, #0
   143d2:	d001      	beq.n	143d8 <mp_obj_str_format_helper+0x548>
                if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
                    terse_str_format_value_error();
   143d4:	f7ff fd55 	bl	13e82 <terse_str_format_value_error>
                } else {
                    mp_raise_ValueError("invalid format specifier");
                }
            }
            vstr_clear(&format_spec_vstr);
   143d8:	f107 0318 	add.w	r3, r7, #24
   143dc:	4618      	mov	r0, r3
   143de:	f7ed f8e1 	bl	15a4 <vstr_clear>
        }
        if (!align) {
   143e2:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
   143e6:	2b00      	cmp	r3, #0
   143e8:	d10d      	bne.n	14406 <mp_obj_str_format_helper+0x576>
            if (arg_looks_numeric(arg)) {
   143ea:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
   143ee:	f7ff fd31 	bl	13e54 <arg_looks_numeric>
   143f2:	4603      	mov	r3, r0
   143f4:	2b00      	cmp	r3, #0
   143f6:	d003      	beq.n	14400 <mp_obj_str_format_helper+0x570>
                align = '>';
   143f8:	233e      	movs	r3, #62	; 0x3e
   143fa:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
   143fe:	e002      	b.n	14406 <mp_obj_str_format_helper+0x576>
            } else {
                align = '<';
   14400:	233c      	movs	r3, #60	; 0x3c
   14402:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
            }
        }
        if (!fill) {
   14406:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
   1440a:	2b00      	cmp	r3, #0
   1440c:	d102      	bne.n	14414 <mp_obj_str_format_helper+0x584>
            fill = ' ';
   1440e:	2320      	movs	r3, #32
   14410:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
        }

        if (flags & (PF_FLAG_SHOW_SIGN | PF_FLAG_SPACE_SIGN)) {
   14414:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   14416:	f003 0306 	and.w	r3, r3, #6
   1441a:	2b00      	cmp	r3, #0
   1441c:	d00b      	beq.n	14436 <mp_obj_str_format_helper+0x5a6>
            if (type == 's') {
   1441e:	f897 307d 	ldrb.w	r3, [r7, #125]	; 0x7d
   14422:	2b73      	cmp	r3, #115	; 0x73
   14424:	d101      	bne.n	1442a <mp_obj_str_format_helper+0x59a>
                if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
                    terse_str_format_value_error();
   14426:	f7ff fd2c 	bl	13e82 <terse_str_format_value_error>
                } else {
                    mp_raise_ValueError("sign not allowed in string format specifier");
                }
            }
            if (type == 'c') {
   1442a:	f897 307d 	ldrb.w	r3, [r7, #125]	; 0x7d
   1442e:	2b63      	cmp	r3, #99	; 0x63
   14430:	d101      	bne.n	14436 <mp_obj_str_format_helper+0x5a6>
                if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
                    terse_str_format_value_error();
   14432:	f7ff fd26 	bl	13e82 <terse_str_format_value_error>
                        "sign not allowed with integer format specifier 'c'");
                }
            }
        }

        switch (align) {
   14436:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
   1443a:	2b3d      	cmp	r3, #61	; 0x3d
   1443c:	d008      	beq.n	14450 <mp_obj_str_format_helper+0x5c0>
   1443e:	2b5e      	cmp	r3, #94	; 0x5e
   14440:	d00b      	beq.n	1445a <mp_obj_str_format_helper+0x5ca>
   14442:	2b3c      	cmp	r3, #60	; 0x3c
   14444:	d10e      	bne.n	14464 <mp_obj_str_format_helper+0x5d4>
            case '<': flags |= PF_FLAG_LEFT_ADJUST;     break;
   14446:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   14448:	f043 0301 	orr.w	r3, r3, #1
   1444c:	67bb      	str	r3, [r7, #120]	; 0x78
   1444e:	e009      	b.n	14464 <mp_obj_str_format_helper+0x5d4>
            case '=': flags |= PF_FLAG_PAD_AFTER_SIGN;  break;
   14450:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   14452:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   14456:	67bb      	str	r3, [r7, #120]	; 0x78
   14458:	e004      	b.n	14464 <mp_obj_str_format_helper+0x5d4>
            case '^': flags |= PF_FLAG_CENTER_ADJUST;   break;
   1445a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   1445c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   14460:	67bb      	str	r3, [r7, #120]	; 0x78
   14462:	bf00      	nop
        }

        if (arg_looks_integer(arg)) {
   14464:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
   14468:	f7ff fcc6 	bl	13df8 <arg_looks_integer>
   1446c:	4603      	mov	r3, r0
   1446e:	2b00      	cmp	r3, #0
   14470:	f000 8167 	beq.w	14742 <mp_obj_str_format_helper+0x8b2>
            switch (type) {
   14474:	f897 307d 	ldrb.w	r3, [r7, #125]	; 0x7d
   14478:	2b78      	cmp	r3, #120	; 0x78
   1447a:	f200 815f 	bhi.w	1473c <mp_obj_str_format_helper+0x8ac>
   1447e:	a201      	add	r2, pc, #4	; (adr r2, 14484 <mp_obj_str_format_helper+0x5f4>)
   14480:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   14484:	000146b7 	.word	0x000146b7
   14488:	0001473d 	.word	0x0001473d
   1448c:	0001473d 	.word	0x0001473d
   14490:	0001473d 	.word	0x0001473d
   14494:	0001473d 	.word	0x0001473d
   14498:	0001473d 	.word	0x0001473d
   1449c:	0001473d 	.word	0x0001473d
   144a0:	0001473d 	.word	0x0001473d
   144a4:	0001473d 	.word	0x0001473d
   144a8:	0001473d 	.word	0x0001473d
   144ac:	0001473d 	.word	0x0001473d
   144b0:	0001473d 	.word	0x0001473d
   144b4:	0001473d 	.word	0x0001473d
   144b8:	0001473d 	.word	0x0001473d
   144bc:	0001473d 	.word	0x0001473d
   144c0:	0001473d 	.word	0x0001473d
   144c4:	0001473d 	.word	0x0001473d
   144c8:	0001473d 	.word	0x0001473d
   144cc:	0001473d 	.word	0x0001473d
   144d0:	0001473d 	.word	0x0001473d
   144d4:	0001473d 	.word	0x0001473d
   144d8:	0001473d 	.word	0x0001473d
   144dc:	0001473d 	.word	0x0001473d
   144e0:	0001473d 	.word	0x0001473d
   144e4:	0001473d 	.word	0x0001473d
   144e8:	0001473d 	.word	0x0001473d
   144ec:	0001473d 	.word	0x0001473d
   144f0:	0001473d 	.word	0x0001473d
   144f4:	0001473d 	.word	0x0001473d
   144f8:	0001473d 	.word	0x0001473d
   144fc:	0001473d 	.word	0x0001473d
   14500:	0001473d 	.word	0x0001473d
   14504:	0001473d 	.word	0x0001473d
   14508:	0001473d 	.word	0x0001473d
   1450c:	0001473d 	.word	0x0001473d
   14510:	0001473d 	.word	0x0001473d
   14514:	0001473d 	.word	0x0001473d
   14518:	00014741 	.word	0x00014741
   1451c:	0001473d 	.word	0x0001473d
   14520:	0001473d 	.word	0x0001473d
   14524:	0001473d 	.word	0x0001473d
   14528:	0001473d 	.word	0x0001473d
   1452c:	0001473d 	.word	0x0001473d
   14530:	0001473d 	.word	0x0001473d
   14534:	0001473d 	.word	0x0001473d
   14538:	0001473d 	.word	0x0001473d
   1453c:	0001473d 	.word	0x0001473d
   14540:	0001473d 	.word	0x0001473d
   14544:	0001473d 	.word	0x0001473d
   14548:	0001473d 	.word	0x0001473d
   1454c:	0001473d 	.word	0x0001473d
   14550:	0001473d 	.word	0x0001473d
   14554:	0001473d 	.word	0x0001473d
   14558:	0001473d 	.word	0x0001473d
   1455c:	0001473d 	.word	0x0001473d
   14560:	0001473d 	.word	0x0001473d
   14564:	0001473d 	.word	0x0001473d
   14568:	0001473d 	.word	0x0001473d
   1456c:	0001473d 	.word	0x0001473d
   14570:	0001473d 	.word	0x0001473d
   14574:	0001473d 	.word	0x0001473d
   14578:	0001473d 	.word	0x0001473d
   1457c:	0001473d 	.word	0x0001473d
   14580:	0001473d 	.word	0x0001473d
   14584:	0001473d 	.word	0x0001473d
   14588:	0001473d 	.word	0x0001473d
   1458c:	0001473d 	.word	0x0001473d
   14590:	0001473d 	.word	0x0001473d
   14594:	0001473d 	.word	0x0001473d
   14598:	00014741 	.word	0x00014741
   1459c:	00014741 	.word	0x00014741
   145a0:	00014741 	.word	0x00014741
   145a4:	0001473d 	.word	0x0001473d
   145a8:	0001473d 	.word	0x0001473d
   145ac:	0001473d 	.word	0x0001473d
   145b0:	0001473d 	.word	0x0001473d
   145b4:	0001473d 	.word	0x0001473d
   145b8:	0001473d 	.word	0x0001473d
   145bc:	0001473d 	.word	0x0001473d
   145c0:	0001473d 	.word	0x0001473d
   145c4:	0001473d 	.word	0x0001473d
   145c8:	0001473d 	.word	0x0001473d
   145cc:	0001473d 	.word	0x0001473d
   145d0:	0001473d 	.word	0x0001473d
   145d4:	0001473d 	.word	0x0001473d
   145d8:	0001473d 	.word	0x0001473d
   145dc:	0001473d 	.word	0x0001473d
   145e0:	0001473d 	.word	0x0001473d
   145e4:	00014711 	.word	0x00014711
   145e8:	0001473d 	.word	0x0001473d
   145ec:	0001473d 	.word	0x0001473d
   145f0:	0001473d 	.word	0x0001473d
   145f4:	0001473d 	.word	0x0001473d
   145f8:	0001473d 	.word	0x0001473d
   145fc:	0001473d 	.word	0x0001473d
   14600:	0001473d 	.word	0x0001473d
   14604:	0001473d 	.word	0x0001473d
   14608:	0001473d 	.word	0x0001473d
   1460c:	00014669 	.word	0x00014669
   14610:	0001468d 	.word	0x0001468d
   14614:	000146b7 	.word	0x000146b7
   14618:	00014741 	.word	0x00014741
   1461c:	00014741 	.word	0x00014741
   14620:	00014741 	.word	0x00014741
   14624:	0001473d 	.word	0x0001473d
   14628:	0001473d 	.word	0x0001473d
   1462c:	0001473d 	.word	0x0001473d
   14630:	0001473d 	.word	0x0001473d
   14634:	0001473d 	.word	0x0001473d
   14638:	0001473d 	.word	0x0001473d
   1463c:	000146b7 	.word	0x000146b7
   14640:	000146db 	.word	0x000146db
   14644:	0001473d 	.word	0x0001473d
   14648:	0001473d 	.word	0x0001473d
   1464c:	0001473d 	.word	0x0001473d
   14650:	0001473d 	.word	0x0001473d
   14654:	0001473d 	.word	0x0001473d
   14658:	0001473d 	.word	0x0001473d
   1465c:	0001473d 	.word	0x0001473d
   14660:	0001473d 	.word	0x0001473d
   14664:	00014711 	.word	0x00014711
                case 'b':
                    mp_print_mp_int(&print, arg, 2, 'a', flags, fill, width, 0);
   14668:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   1466a:	f107 004c 	add.w	r0, r7, #76	; 0x4c
   1466e:	2200      	movs	r2, #0
   14670:	9203      	str	r2, [sp, #12]
   14672:	9302      	str	r3, [sp, #8]
   14674:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
   14678:	9301      	str	r3, [sp, #4]
   1467a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   1467c:	9300      	str	r3, [sp, #0]
   1467e:	2361      	movs	r3, #97	; 0x61
   14680:	2202      	movs	r2, #2
   14682:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
   14686:	f7ed fb38 	bl	1cfa <mp_print_mp_int>
                    continue;
   1468a:	e0a0      	b.n	147ce <mp_obj_str_format_helper+0x93e>

                case 'c':
                {
                    char ch = mp_obj_get_int(arg);
   1468c:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
   14690:	f7f9 fcc0 	bl	e014 <mp_obj_get_int>
   14694:	4603      	mov	r3, r0
   14696:	b2db      	uxtb	r3, r3
   14698:	75fb      	strb	r3, [r7, #23]
                    mp_print_strn(&print, &ch, 1, flags, fill, width);
   1469a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   1469c:	f107 0117 	add.w	r1, r7, #23
   146a0:	f107 004c 	add.w	r0, r7, #76	; 0x4c
   146a4:	9301      	str	r3, [sp, #4]
   146a6:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
   146aa:	9300      	str	r3, [sp, #0]
   146ac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   146ae:	2201      	movs	r2, #1
   146b0:	f7ed f9e4 	bl	1a7c <mp_print_strn>
   146b4:	e08b      	b.n	147ce <mp_obj_str_format_helper+0x93e>
                }

                case '\0':  // No explicit format type implies 'd'
                case 'n':   // I don't think we support locales in uPy so use 'd'
                case 'd':
                    mp_print_mp_int(&print, arg, 10, 'a', flags, fill, width, 0);
   146b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   146b8:	f107 004c 	add.w	r0, r7, #76	; 0x4c
   146bc:	2200      	movs	r2, #0
   146be:	9203      	str	r2, [sp, #12]
   146c0:	9302      	str	r3, [sp, #8]
   146c2:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
   146c6:	9301      	str	r3, [sp, #4]
   146c8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   146ca:	9300      	str	r3, [sp, #0]
   146cc:	2361      	movs	r3, #97	; 0x61
   146ce:	220a      	movs	r2, #10
   146d0:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
   146d4:	f7ed fb11 	bl	1cfa <mp_print_mp_int>
                    continue;
   146d8:	e079      	b.n	147ce <mp_obj_str_format_helper+0x93e>

                case 'o':
                    if (flags & PF_FLAG_SHOW_PREFIX) {
   146da:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   146dc:	f003 0310 	and.w	r3, r3, #16
   146e0:	2b00      	cmp	r3, #0
   146e2:	d003      	beq.n	146ec <mp_obj_str_format_helper+0x85c>
                        flags |= PF_FLAG_SHOW_OCTAL_LETTER;
   146e4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   146e6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   146ea:	67bb      	str	r3, [r7, #120]	; 0x78
                    }

                    mp_print_mp_int(&print, arg, 8, 'a', flags, fill, width, 0);
   146ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   146ee:	f107 004c 	add.w	r0, r7, #76	; 0x4c
   146f2:	2200      	movs	r2, #0
   146f4:	9203      	str	r2, [sp, #12]
   146f6:	9302      	str	r3, [sp, #8]
   146f8:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
   146fc:	9301      	str	r3, [sp, #4]
   146fe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   14700:	9300      	str	r3, [sp, #0]
   14702:	2361      	movs	r3, #97	; 0x61
   14704:	2208      	movs	r2, #8
   14706:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
   1470a:	f7ed faf6 	bl	1cfa <mp_print_mp_int>
                    continue;
   1470e:	e05e      	b.n	147ce <mp_obj_str_format_helper+0x93e>

                case 'X':
                case 'x':
                    mp_print_mp_int(&print, arg, 16, type - ('X' - 'A'), flags, fill, width, 0);
   14710:	f897 307d 	ldrb.w	r3, [r7, #125]	; 0x7d
   14714:	f1a3 0117 	sub.w	r1, r3, #23
   14718:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   1471a:	f107 004c 	add.w	r0, r7, #76	; 0x4c
   1471e:	2200      	movs	r2, #0
   14720:	9203      	str	r2, [sp, #12]
   14722:	9302      	str	r3, [sp, #8]
   14724:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
   14728:	9301      	str	r3, [sp, #4]
   1472a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   1472c:	9300      	str	r3, [sp, #0]
   1472e:	460b      	mov	r3, r1
   14730:	2210      	movs	r2, #16
   14732:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
   14736:	f7ed fae0 	bl	1cfa <mp_print_mp_int>
                    continue;
   1473a:	e048      	b.n	147ce <mp_obj_str_format_helper+0x93e>
                    // looks like an integer
                    break;

                default:
                    if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
                        terse_str_format_value_error();
   1473c:	f7ff fba1 	bl	13e82 <terse_str_format_value_error>
                    break;
   14740:	bf00      	nop
            }
        }

        // NOTE: no else here. We need the e, f, g etc formats for integer
        //       arguments (from above if) to take this if.
        if (arg_looks_numeric(arg)) {
   14742:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
   14746:	f7ff fb85 	bl	13e54 <arg_looks_numeric>
   1474a:	4603      	mov	r3, r0
   1474c:	2b00      	cmp	r3, #0
   1474e:	d00f      	beq.n	14770 <mp_obj_str_format_helper+0x8e0>
            if (!type) {
   14750:	f897 307d 	ldrb.w	r3, [r7, #125]	; 0x7d
   14754:	2b00      	cmp	r3, #0
   14756:	d102      	bne.n	1475e <mp_obj_str_format_helper+0x8ce>
                // CPython sources say:
                //   Omitted type specifier.  Behaves in the same way as repr(x)
                //   and str(x) if no precision is given, else like 'g', but with
                //   at least one digit after the decimal point. */

                type = 'g';
   14758:	2367      	movs	r3, #103	; 0x67
   1475a:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d
            }
            if (type == 'n') {
   1475e:	f897 307d 	ldrb.w	r3, [r7, #125]	; 0x7d
   14762:	2b6e      	cmp	r3, #110	; 0x6e
   14764:	d102      	bne.n	1476c <mp_obj_str_format_helper+0x8dc>
                type = 'g';
   14766:	2367      	movs	r3, #103	; 0x67
   14768:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d
                    break;
#endif

                default:
                    if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
                        terse_str_format_value_error();
   1476c:	f7ff fb89 	bl	13e82 <terse_str_format_value_error>
                    }
            }
        } else {
            // arg doesn't look like a number

            if (align == '=') {
   14770:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
   14774:	2b3d      	cmp	r3, #61	; 0x3d
   14776:	d101      	bne.n	1477c <mp_obj_str_format_helper+0x8ec>
                if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
                    terse_str_format_value_error();
   14778:	f7ff fb83 	bl	13e82 <terse_str_format_value_error>
                    mp_raise_ValueError(
                        "'=' alignment not allowed in string format specifier");
                }
            }

            switch (type) {
   1477c:	f897 307d 	ldrb.w	r3, [r7, #125]	; 0x7d
   14780:	2b00      	cmp	r3, #0
   14782:	d001      	beq.n	14788 <mp_obj_str_format_helper+0x8f8>
   14784:	2b73      	cmp	r3, #115	; 0x73
   14786:	d120      	bne.n	147ca <mp_obj_str_format_helper+0x93a>
                case '\0': // no explicit format type implies 's'
                case 's': {
                    size_t slen;
                    const char *s = mp_obj_str_get_data(arg, &slen);
   14788:	f107 0310 	add.w	r3, r7, #16
   1478c:	4619      	mov	r1, r3
   1478e:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
   14792:	f001 f9a3 	bl	15adc <mp_obj_str_get_data>
   14796:	6678      	str	r0, [r7, #100]	; 0x64
                    if (precision < 0) {
   14798:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   1479a:	2b00      	cmp	r3, #0
   1479c:	da01      	bge.n	147a2 <mp_obj_str_format_helper+0x912>
                        precision = slen;
   1479e:	693b      	ldr	r3, [r7, #16]
   147a0:	647b      	str	r3, [r7, #68]	; 0x44
                    }
                    if (slen > (size_t)precision) {
   147a2:	693b      	ldr	r3, [r7, #16]
   147a4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
   147a6:	4293      	cmp	r3, r2
   147a8:	d901      	bls.n	147ae <mp_obj_str_format_helper+0x91e>
                        slen = precision;
   147aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   147ac:	613b      	str	r3, [r7, #16]
                    }
                    mp_print_strn(&print, s, slen, flags, fill, width);
   147ae:	693a      	ldr	r2, [r7, #16]
   147b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   147b2:	f107 004c 	add.w	r0, r7, #76	; 0x4c
   147b6:	9301      	str	r3, [sp, #4]
   147b8:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
   147bc:	9300      	str	r3, [sp, #0]
   147be:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   147c0:	6e79      	ldr	r1, [r7, #100]	; 0x64
   147c2:	f7ed f95b 	bl	1a7c <mp_print_strn>
                    break;
   147c6:	bf00      	nop
   147c8:	e001      	b.n	147ce <mp_obj_str_format_helper+0x93e>
                }

                default:
                    if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
                        terse_str_format_value_error();
   147ca:	f7ff fb5a 	bl	13e82 <terse_str_format_value_error>
    for (; str < top; str++) {
   147ce:	68bb      	ldr	r3, [r7, #8]
   147d0:	3301      	adds	r3, #1
   147d2:	60bb      	str	r3, [r7, #8]
   147d4:	68ba      	ldr	r2, [r7, #8]
   147d6:	687b      	ldr	r3, [r7, #4]
   147d8:	429a      	cmp	r2, r3
   147da:	f4ff ab6a 	bcc.w	13eb2 <mp_obj_str_format_helper+0x22>
                    }
            }
        }
    }

    return vstr;
   147de:	68fb      	ldr	r3, [r7, #12]
   147e0:	461c      	mov	r4, r3
   147e2:	f107 0354 	add.w	r3, r7, #84	; 0x54
   147e6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   147e8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
   147ec:	68f8      	ldr	r0, [r7, #12]
   147ee:	37a4      	adds	r7, #164	; 0xa4
   147f0:	46bd      	mov	sp, r7
   147f2:	bd90      	pop	{r4, r7, pc}

000147f4 <mp_obj_str_format>:

mp_obj_t mp_obj_str_format(size_t n_args, const mp_obj_t *args, mp_map_t *kwargs) {
   147f4:	b580      	push	{r7, lr}
   147f6:	b090      	sub	sp, #64	; 0x40
   147f8:	af04      	add	r7, sp, #16
   147fa:	60f8      	str	r0, [r7, #12]
   147fc:	60b9      	str	r1, [r7, #8]
   147fe:	607a      	str	r2, [r7, #4]
    mp_check_self(MP_OBJ_IS_STR_OR_BYTES(args[0]));
   14800:	68bb      	ldr	r3, [r7, #8]
   14802:	681b      	ldr	r3, [r3, #0]
   14804:	4618      	mov	r0, r3
   14806:	f7fd ff3d 	bl	12684 <MP_OBJ_IS_QSTR>
   1480a:	4603      	mov	r3, r0
   1480c:	2b00      	cmp	r3, #0
   1480e:	d115      	bne.n	1483c <mp_obj_str_format+0x48>
   14810:	68bb      	ldr	r3, [r7, #8]
   14812:	681b      	ldr	r3, [r3, #0]
   14814:	4618      	mov	r0, r3
   14816:	f7fd ff47 	bl	126a8 <MP_OBJ_IS_OBJ>
   1481a:	4603      	mov	r3, r0
   1481c:	2b00      	cmp	r3, #0
   1481e:	d006      	beq.n	1482e <mp_obj_str_format+0x3a>
   14820:	68bb      	ldr	r3, [r7, #8]
   14822:	681b      	ldr	r3, [r3, #0]
   14824:	681b      	ldr	r3, [r3, #0]
   14826:	699b      	ldr	r3, [r3, #24]
   14828:	4a24      	ldr	r2, [pc, #144]	; (148bc <mp_obj_str_format+0xc8>)
   1482a:	4293      	cmp	r3, r2
   1482c:	d006      	beq.n	1483c <mp_obj_str_format+0x48>
   1482e:	4b24      	ldr	r3, [pc, #144]	; (148c0 <mp_obj_str_format+0xcc>)
   14830:	4a24      	ldr	r2, [pc, #144]	; (148c4 <mp_obj_str_format+0xd0>)
   14832:	f240 5169 	movw	r1, #1385	; 0x569
   14836:	4824      	ldr	r0, [pc, #144]	; (148c8 <mp_obj_str_format+0xd4>)
   14838:	f008 fb52 	bl	1cee0 <__assert_func>

    GET_STR_DATA_LEN(args[0], str, len);
   1483c:	68bb      	ldr	r3, [r7, #8]
   1483e:	681b      	ldr	r3, [r3, #0]
   14840:	4618      	mov	r0, r3
   14842:	f7fd ff1f 	bl	12684 <MP_OBJ_IS_QSTR>
   14846:	4603      	mov	r3, r0
   14848:	2b00      	cmp	r3, #0
   1484a:	d00a      	beq.n	14862 <mp_obj_str_format+0x6e>
   1484c:	68bb      	ldr	r3, [r7, #8]
   1484e:	681b      	ldr	r3, [r3, #0]
   14850:	089b      	lsrs	r3, r3, #2
   14852:	f107 0228 	add.w	r2, r7, #40	; 0x28
   14856:	4611      	mov	r1, r2
   14858:	4618      	mov	r0, r3
   1485a:	f7ec fdc7 	bl	13ec <qstr_data>
   1485e:	62f8      	str	r0, [r7, #44]	; 0x2c
   14860:	e007      	b.n	14872 <mp_obj_str_format+0x7e>
   14862:	68bb      	ldr	r3, [r7, #8]
   14864:	681b      	ldr	r3, [r3, #0]
   14866:	689b      	ldr	r3, [r3, #8]
   14868:	62bb      	str	r3, [r7, #40]	; 0x28
   1486a:	68bb      	ldr	r3, [r7, #8]
   1486c:	681b      	ldr	r3, [r3, #0]
   1486e:	68db      	ldr	r3, [r3, #12]
   14870:	62fb      	str	r3, [r7, #44]	; 0x2c
    int arg_i = 0;
   14872:	2300      	movs	r3, #0
   14874:	627b      	str	r3, [r7, #36]	; 0x24
    vstr_t vstr = mp_obj_str_format_helper((const char*)str, (const char*)str + len, &arg_i, n_args, args, kwargs);
   14876:	6abb      	ldr	r3, [r7, #40]	; 0x28
   14878:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   1487a:	441a      	add	r2, r3
   1487c:	f107 0014 	add.w	r0, r7, #20
   14880:	f107 0124 	add.w	r1, r7, #36	; 0x24
   14884:	687b      	ldr	r3, [r7, #4]
   14886:	9302      	str	r3, [sp, #8]
   14888:	68bb      	ldr	r3, [r7, #8]
   1488a:	9301      	str	r3, [sp, #4]
   1488c:	68fb      	ldr	r3, [r7, #12]
   1488e:	9300      	str	r3, [sp, #0]
   14890:	460b      	mov	r3, r1
   14892:	6af9      	ldr	r1, [r7, #44]	; 0x2c
   14894:	f7ff fafc 	bl	13e90 <mp_obj_str_format_helper>
    return mp_obj_new_str_from_vstr(mp_obj_get_type(args[0]), &vstr);
   14898:	68bb      	ldr	r3, [r7, #8]
   1489a:	681b      	ldr	r3, [r3, #0]
   1489c:	4618      	mov	r0, r3
   1489e:	f7f9 f9dd 	bl	dc5c <mp_obj_get_type>
   148a2:	4602      	mov	r2, r0
   148a4:	f107 0314 	add.w	r3, r7, #20
   148a8:	4619      	mov	r1, r3
   148aa:	4610      	mov	r0, r2
   148ac:	f000 ff55 	bl	1575a <mp_obj_new_str_from_vstr>
   148b0:	4603      	mov	r3, r0
}
   148b2:	4618      	mov	r0, r3
   148b4:	3730      	adds	r7, #48	; 0x30
   148b6:	46bd      	mov	sp, r7
   148b8:	bd80      	pop	{r7, pc}
   148ba:	bf00      	nop
   148bc:	00012d2f 	.word	0x00012d2f
   148c0:	00025390 	.word	0x00025390
   148c4:	000258a8 	.word	0x000258a8
   148c8:	000252f4 	.word	0x000252f4

000148cc <str_modulo_format>:
MP_DEFINE_CONST_FUN_OBJ_KW(str_format_obj, 1, mp_obj_str_format);

#if MICROPY_PY_BUILTINS_STR_OP_MODULO
STATIC mp_obj_t str_modulo_format(mp_obj_t pattern, size_t n_args, const mp_obj_t *args, mp_obj_t dict) {
   148cc:	b590      	push	{r4, r7, lr}
   148ce:	b0a9      	sub	sp, #164	; 0xa4
   148d0:	af04      	add	r7, sp, #16
   148d2:	60f8      	str	r0, [r7, #12]
   148d4:	60b9      	str	r1, [r7, #8]
   148d6:	607a      	str	r2, [r7, #4]
   148d8:	603b      	str	r3, [r7, #0]
    mp_check_self(MP_OBJ_IS_STR_OR_BYTES(pattern));
   148da:	68f8      	ldr	r0, [r7, #12]
   148dc:	f7fd fed2 	bl	12684 <MP_OBJ_IS_QSTR>
   148e0:	4603      	mov	r3, r0
   148e2:	2b00      	cmp	r3, #0
   148e4:	d112      	bne.n	1490c <str_modulo_format+0x40>
   148e6:	68f8      	ldr	r0, [r7, #12]
   148e8:	f7fd fede 	bl	126a8 <MP_OBJ_IS_OBJ>
   148ec:	4603      	mov	r3, r0
   148ee:	2b00      	cmp	r3, #0
   148f0:	d005      	beq.n	148fe <str_modulo_format+0x32>
   148f2:	68fb      	ldr	r3, [r7, #12]
   148f4:	681b      	ldr	r3, [r3, #0]
   148f6:	699b      	ldr	r3, [r3, #24]
   148f8:	4ac4      	ldr	r2, [pc, #784]	; (14c0c <str_modulo_format+0x340>)
   148fa:	4293      	cmp	r3, r2
   148fc:	d006      	beq.n	1490c <str_modulo_format+0x40>
   148fe:	4bc4      	ldr	r3, [pc, #784]	; (14c10 <str_modulo_format+0x344>)
   14900:	4ac4      	ldr	r2, [pc, #784]	; (14c14 <str_modulo_format+0x348>)
   14902:	f240 5174 	movw	r1, #1396	; 0x574
   14906:	48c4      	ldr	r0, [pc, #784]	; (14c18 <str_modulo_format+0x34c>)
   14908:	f008 faea 	bl	1cee0 <__assert_func>

    GET_STR_DATA_LEN(pattern, str, len);
   1490c:	68f8      	ldr	r0, [r7, #12]
   1490e:	f7fd feb9 	bl	12684 <MP_OBJ_IS_QSTR>
   14912:	4603      	mov	r3, r0
   14914:	2b00      	cmp	r3, #0
   14916:	d00a      	beq.n	1492e <str_modulo_format+0x62>
   14918:	68fb      	ldr	r3, [r7, #12]
   1491a:	089b      	lsrs	r3, r3, #2
   1491c:	f107 0254 	add.w	r2, r7, #84	; 0x54
   14920:	4611      	mov	r1, r2
   14922:	4618      	mov	r0, r3
   14924:	f7ec fd62 	bl	13ec <qstr_data>
   14928:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
   1492c:	e006      	b.n	1493c <str_modulo_format+0x70>
   1492e:	68fb      	ldr	r3, [r7, #12]
   14930:	689b      	ldr	r3, [r3, #8]
   14932:	657b      	str	r3, [r7, #84]	; 0x54
   14934:	68fb      	ldr	r3, [r7, #12]
   14936:	68db      	ldr	r3, [r3, #12]
   14938:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    const byte *start_str = str;
   1493c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
   14940:	66fb      	str	r3, [r7, #108]	; 0x6c
    bool is_bytes = MP_OBJ_IS_TYPE(pattern, &mp_type_bytes);
   14942:	68f8      	ldr	r0, [r7, #12]
   14944:	f7fd feb0 	bl	126a8 <MP_OBJ_IS_OBJ>
   14948:	4603      	mov	r3, r0
   1494a:	2b00      	cmp	r3, #0
   1494c:	d006      	beq.n	1495c <str_modulo_format+0x90>
   1494e:	68fb      	ldr	r3, [r7, #12]
   14950:	681b      	ldr	r3, [r3, #0]
   14952:	4ab2      	ldr	r2, [pc, #712]	; (14c1c <str_modulo_format+0x350>)
   14954:	4293      	cmp	r3, r2
   14956:	d101      	bne.n	1495c <str_modulo_format+0x90>
   14958:	2301      	movs	r3, #1
   1495a:	e000      	b.n	1495e <str_modulo_format+0x92>
   1495c:	2300      	movs	r3, #0
   1495e:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
   14962:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
   14966:	f003 0301 	and.w	r3, r3, #1
   1496a:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
    size_t arg_i = 0;
   1496e:	2300      	movs	r3, #0
   14970:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    vstr_t vstr;
    mp_print_t print;
    vstr_init_print(&vstr, 16, &print);
   14974:	f107 023c 	add.w	r2, r7, #60	; 0x3c
   14978:	f107 0344 	add.w	r3, r7, #68	; 0x44
   1497c:	2110      	movs	r1, #16
   1497e:	4618      	mov	r0, r3
   14980:	f7ec fdf9 	bl	1576 <vstr_init_print>

    for (const byte *top = str + len; str < top; str++) {
   14984:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   14986:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
   1498a:	4413      	add	r3, r2
   1498c:	667b      	str	r3, [r7, #100]	; 0x64
   1498e:	e296      	b.n	14ebe <str_modulo_format+0x5f2>
        mp_obj_t arg = MP_OBJ_NULL;
   14990:	2300      	movs	r3, #0
   14992:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
        if (*str != '%') {
   14996:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
   1499a:	781b      	ldrb	r3, [r3, #0]
   1499c:	2b25      	cmp	r3, #37	; 0x25
   1499e:	d009      	beq.n	149b4 <str_modulo_format+0xe8>
            vstr_add_byte(&vstr, *str);
   149a0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
   149a4:	781a      	ldrb	r2, [r3, #0]
   149a6:	f107 0344 	add.w	r3, r7, #68	; 0x44
   149aa:	4611      	mov	r1, r2
   149ac:	4618      	mov	r0, r3
   149ae:	f7ec fee7 	bl	1780 <vstr_add_byte>
            continue;
   149b2:	e27f      	b.n	14eb4 <str_modulo_format+0x5e8>
        }
        if (++str >= top) {
   149b4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
   149b8:	3301      	adds	r3, #1
   149ba:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   149be:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
   149c2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   149c4:	429a      	cmp	r2, r3
   149c6:	f080 810d 	bcs.w	14be4 <str_modulo_format+0x318>
            goto incomplete_format;
        }
        if (*str == '%') {
   149ca:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
   149ce:	781b      	ldrb	r3, [r3, #0]
   149d0:	2b25      	cmp	r3, #37	; 0x25
   149d2:	d106      	bne.n	149e2 <str_modulo_format+0x116>
            vstr_add_byte(&vstr, '%');
   149d4:	f107 0344 	add.w	r3, r7, #68	; 0x44
   149d8:	2125      	movs	r1, #37	; 0x25
   149da:	4618      	mov	r0, r3
   149dc:	f7ec fed0 	bl	1780 <vstr_add_byte>
            continue;
   149e0:	e268      	b.n	14eb4 <str_modulo_format+0x5e8>
        }

        // Dictionary value lookup
        if (*str == '(') {
   149e2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
   149e6:	781b      	ldrb	r3, [r3, #0]
   149e8:	2b28      	cmp	r3, #40	; 0x28
   149ea:	d136      	bne.n	14a5a <str_modulo_format+0x18e>
            if (dict == MP_OBJ_NULL) {
   149ec:	683b      	ldr	r3, [r7, #0]
   149ee:	2b00      	cmp	r3, #0
   149f0:	d102      	bne.n	149f8 <str_modulo_format+0x12c>
                mp_raise_TypeError("format needs a dict");
   149f2:	488b      	ldr	r0, [pc, #556]	; (14c20 <str_modulo_format+0x354>)
   149f4:	f7f8 fcca 	bl	d38c <mp_raise_TypeError>
            }
            arg_i = 1; // we used up the single dict argument
   149f8:	2301      	movs	r3, #1
   149fa:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
            const byte *key = ++str;
   149fe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
   14a02:	3301      	adds	r3, #1
   14a04:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   14a08:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
   14a0c:	663b      	str	r3, [r7, #96]	; 0x60
            while (*str != ')') {
   14a0e:	e00b      	b.n	14a28 <str_modulo_format+0x15c>
                if (str >= top) {
   14a10:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
   14a14:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   14a16:	429a      	cmp	r2, r3
   14a18:	d301      	bcc.n	14a1e <str_modulo_format+0x152>
                    if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
                        terse_str_format_value_error();
   14a1a:	f7ff fa32 	bl	13e82 <terse_str_format_value_error>
                    } else {
                        mp_raise_ValueError("incomplete format key");
                    }
                }
                ++str;
   14a1e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
   14a22:	3301      	adds	r3, #1
   14a24:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
            while (*str != ')') {
   14a28:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
   14a2c:	781b      	ldrb	r3, [r3, #0]
   14a2e:	2b29      	cmp	r3, #41	; 0x29
   14a30:	d1ee      	bne.n	14a10 <str_modulo_format+0x144>
            }
            mp_obj_t k_obj = mp_obj_new_str_via_qstr((const char*)key, str - key);
   14a32:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
   14a36:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   14a38:	1ad3      	subs	r3, r2, r3
   14a3a:	4619      	mov	r1, r3
   14a3c:	6e38      	ldr	r0, [r7, #96]	; 0x60
   14a3e:	f000 fe7b 	bl	15738 <mp_obj_new_str_via_qstr>
   14a42:	65f8      	str	r0, [r7, #92]	; 0x5c
            arg = mp_obj_dict_get(dict, k_obj);
   14a44:	6df9      	ldr	r1, [r7, #92]	; 0x5c
   14a46:	6838      	ldr	r0, [r7, #0]
   14a48:	f7fa f8d8 	bl	ebfc <mp_obj_dict_get>
   14a4c:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
            str++;
   14a50:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
   14a54:	3301      	adds	r3, #1
   14a56:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
        }

        int flags = 0;
   14a5a:	2300      	movs	r3, #0
   14a5c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
        char fill = ' ';
   14a60:	2320      	movs	r3, #32
   14a62:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
        int alt = 0;
   14a66:	2300      	movs	r3, #0
   14a68:	67bb      	str	r3, [r7, #120]	; 0x78
        while (str < top) {
   14a6a:	e03e      	b.n	14aea <str_modulo_format+0x21e>
            if (*str == '-')      flags |= PF_FLAG_LEFT_ADJUST;
   14a6c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
   14a70:	781b      	ldrb	r3, [r3, #0]
   14a72:	2b2d      	cmp	r3, #45	; 0x2d
   14a74:	d106      	bne.n	14a84 <str_modulo_format+0x1b8>
   14a76:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
   14a7a:	f043 0301 	orr.w	r3, r3, #1
   14a7e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   14a82:	e02d      	b.n	14ae0 <str_modulo_format+0x214>
            else if (*str == '+') flags |= PF_FLAG_SHOW_SIGN;
   14a84:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
   14a88:	781b      	ldrb	r3, [r3, #0]
   14a8a:	2b2b      	cmp	r3, #43	; 0x2b
   14a8c:	d106      	bne.n	14a9c <str_modulo_format+0x1d0>
   14a8e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
   14a92:	f043 0302 	orr.w	r3, r3, #2
   14a96:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   14a9a:	e021      	b.n	14ae0 <str_modulo_format+0x214>
            else if (*str == ' ') flags |= PF_FLAG_SPACE_SIGN;
   14a9c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
   14aa0:	781b      	ldrb	r3, [r3, #0]
   14aa2:	2b20      	cmp	r3, #32
   14aa4:	d106      	bne.n	14ab4 <str_modulo_format+0x1e8>
   14aa6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
   14aaa:	f043 0304 	orr.w	r3, r3, #4
   14aae:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   14ab2:	e015      	b.n	14ae0 <str_modulo_format+0x214>
            else if (*str == '#') alt = PF_FLAG_SHOW_PREFIX;
   14ab4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
   14ab8:	781b      	ldrb	r3, [r3, #0]
   14aba:	2b23      	cmp	r3, #35	; 0x23
   14abc:	d102      	bne.n	14ac4 <str_modulo_format+0x1f8>
   14abe:	2310      	movs	r3, #16
   14ac0:	67bb      	str	r3, [r7, #120]	; 0x78
   14ac2:	e00d      	b.n	14ae0 <str_modulo_format+0x214>
            else if (*str == '0') {
   14ac4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
   14ac8:	781b      	ldrb	r3, [r3, #0]
   14aca:	2b30      	cmp	r3, #48	; 0x30
   14acc:	d113      	bne.n	14af6 <str_modulo_format+0x22a>
                flags |= PF_FLAG_PAD_AFTER_SIGN;
   14ace:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
   14ad2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   14ad6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                fill = '0';
   14ada:	2330      	movs	r3, #48	; 0x30
   14adc:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            } else break;
            str++;
   14ae0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
   14ae4:	3301      	adds	r3, #1
   14ae6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
        while (str < top) {
   14aea:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
   14aee:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   14af0:	429a      	cmp	r2, r3
   14af2:	d3bb      	bcc.n	14a6c <str_modulo_format+0x1a0>
   14af4:	e000      	b.n	14af8 <str_modulo_format+0x22c>
            } else break;
   14af6:	bf00      	nop
        }
        // parse width, if it exists
        int width = 0;
   14af8:	2300      	movs	r3, #0
   14afa:	63bb      	str	r3, [r7, #56]	; 0x38
        if (str < top) {
   14afc:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
   14b00:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   14b02:	429a      	cmp	r2, r3
   14b04:	d227      	bcs.n	14b56 <str_modulo_format+0x28a>
            if (*str == '*') {
   14b06:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
   14b0a:	781b      	ldrb	r3, [r3, #0]
   14b0c:	2b2a      	cmp	r3, #42	; 0x2a
   14b0e:	d118      	bne.n	14b42 <str_modulo_format+0x276>
                if (arg_i >= n_args) {
   14b10:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
   14b14:	68bb      	ldr	r3, [r7, #8]
   14b16:	429a      	cmp	r2, r3
   14b18:	d271      	bcs.n	14bfe <str_modulo_format+0x332>
                    goto not_enough_args;
                }
                width = mp_obj_get_int(args[arg_i++]);
   14b1a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
   14b1e:	1c5a      	adds	r2, r3, #1
   14b20:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
   14b24:	009b      	lsls	r3, r3, #2
   14b26:	687a      	ldr	r2, [r7, #4]
   14b28:	4413      	add	r3, r2
   14b2a:	681b      	ldr	r3, [r3, #0]
   14b2c:	4618      	mov	r0, r3
   14b2e:	f7f9 fa71 	bl	e014 <mp_obj_get_int>
   14b32:	4603      	mov	r3, r0
   14b34:	63bb      	str	r3, [r7, #56]	; 0x38
                str++;
   14b36:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
   14b3a:	3301      	adds	r3, #1
   14b3c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   14b40:	e009      	b.n	14b56 <str_modulo_format+0x28a>
            } else {
                str = (const byte*)str_to_int((const char*)str, (const char*)top, &width);
   14b42:	f107 0338 	add.w	r3, r7, #56	; 0x38
   14b46:	461a      	mov	r2, r3
   14b48:	6e79      	ldr	r1, [r7, #100]	; 0x64
   14b4a:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
   14b4e:	f7ff f8e2 	bl	13d16 <str_to_int>
   14b52:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
            }
        }
        int prec = -1;
   14b56:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   14b5a:	637b      	str	r3, [r7, #52]	; 0x34
        if (str < top && *str == '.') {
   14b5c:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
   14b60:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   14b62:	429a      	cmp	r2, r3
   14b64:	d238      	bcs.n	14bd8 <str_modulo_format+0x30c>
   14b66:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
   14b6a:	781b      	ldrb	r3, [r3, #0]
   14b6c:	2b2e      	cmp	r3, #46	; 0x2e
   14b6e:	d133      	bne.n	14bd8 <str_modulo_format+0x30c>
            if (++str < top) {
   14b70:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
   14b74:	3301      	adds	r3, #1
   14b76:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   14b7a:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
   14b7e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   14b80:	429a      	cmp	r2, r3
   14b82:	d229      	bcs.n	14bd8 <str_modulo_format+0x30c>
                if (*str == '*') {
   14b84:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
   14b88:	781b      	ldrb	r3, [r3, #0]
   14b8a:	2b2a      	cmp	r3, #42	; 0x2a
   14b8c:	d118      	bne.n	14bc0 <str_modulo_format+0x2f4>
                    if (arg_i >= n_args) {
   14b8e:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
   14b92:	68bb      	ldr	r3, [r7, #8]
   14b94:	429a      	cmp	r2, r3
   14b96:	d234      	bcs.n	14c02 <str_modulo_format+0x336>
                        goto not_enough_args;
                    }
                    prec = mp_obj_get_int(args[arg_i++]);
   14b98:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
   14b9c:	1c5a      	adds	r2, r3, #1
   14b9e:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
   14ba2:	009b      	lsls	r3, r3, #2
   14ba4:	687a      	ldr	r2, [r7, #4]
   14ba6:	4413      	add	r3, r2
   14ba8:	681b      	ldr	r3, [r3, #0]
   14baa:	4618      	mov	r0, r3
   14bac:	f7f9 fa32 	bl	e014 <mp_obj_get_int>
   14bb0:	4603      	mov	r3, r0
   14bb2:	637b      	str	r3, [r7, #52]	; 0x34
                    str++;
   14bb4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
   14bb8:	3301      	adds	r3, #1
   14bba:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   14bbe:	e00b      	b.n	14bd8 <str_modulo_format+0x30c>
                } else {
                    prec = 0;
   14bc0:	2300      	movs	r3, #0
   14bc2:	637b      	str	r3, [r7, #52]	; 0x34
                    str = (const byte*)str_to_int((const char*)str, (const char*)top, &prec);
   14bc4:	f107 0334 	add.w	r3, r7, #52	; 0x34
   14bc8:	461a      	mov	r2, r3
   14bca:	6e79      	ldr	r1, [r7, #100]	; 0x64
   14bcc:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
   14bd0:	f7ff f8a1 	bl	13d16 <str_to_int>
   14bd4:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
                }
            }
        }

        if (str >= top) {
   14bd8:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
   14bdc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   14bde:	429a      	cmp	r2, r3
   14be0:	d303      	bcc.n	14bea <str_modulo_format+0x31e>
   14be2:	e000      	b.n	14be6 <str_modulo_format+0x31a>
            goto incomplete_format;
   14be4:	bf00      	nop
incomplete_format:
            if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
                terse_str_format_value_error();
   14be6:	f7ff f94c 	bl	13e82 <terse_str_format_value_error>
                mp_raise_ValueError("incomplete format");
            }
        }

        // Tuple value lookup
        if (arg == MP_OBJ_NULL) {
   14bea:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
   14bee:	2b00      	cmp	r3, #0
   14bf0:	d125      	bne.n	14c3e <str_modulo_format+0x372>
            if (arg_i >= n_args) {
   14bf2:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
   14bf6:	68bb      	ldr	r3, [r7, #8]
   14bf8:	429a      	cmp	r2, r3
   14bfa:	d315      	bcc.n	14c28 <str_modulo_format+0x35c>
   14bfc:	e002      	b.n	14c04 <str_modulo_format+0x338>
                    goto not_enough_args;
   14bfe:	bf00      	nop
   14c00:	e000      	b.n	14c04 <str_modulo_format+0x338>
                        goto not_enough_args;
   14c02:	bf00      	nop
not_enough_args:
                mp_raise_TypeError("format string needs more arguments");
   14c04:	4807      	ldr	r0, [pc, #28]	; (14c24 <str_modulo_format+0x358>)
   14c06:	f7f8 fbc1 	bl	d38c <mp_raise_TypeError>
   14c0a:	bf00      	nop
   14c0c:	00012d2f 	.word	0x00012d2f
   14c10:	0002557c 	.word	0x0002557c
   14c14:	000258bc 	.word	0x000258bc
   14c18:	000252f4 	.word	0x000252f4
   14c1c:	000257ec 	.word	0x000257ec
   14c20:	00025604 	.word	0x00025604
   14c24:	00025618 	.word	0x00025618
            }
            arg = args[arg_i++];
   14c28:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
   14c2c:	1c5a      	adds	r2, r3, #1
   14c2e:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
   14c32:	009b      	lsls	r3, r3, #2
   14c34:	687a      	ldr	r2, [r7, #4]
   14c36:	4413      	add	r3, r2
   14c38:	681b      	ldr	r3, [r3, #0]
   14c3a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
        }
        switch (*str) {
   14c3e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
   14c42:	781b      	ldrb	r3, [r3, #0]
   14c44:	3b58      	subs	r3, #88	; 0x58
   14c46:	2b20      	cmp	r3, #32
   14c48:	f200 8132 	bhi.w	14eb0 <str_modulo_format+0x5e4>
   14c4c:	a201      	add	r2, pc, #4	; (adr r2, 14c54 <str_modulo_format+0x388>)
   14c4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   14c52:	bf00      	nop
   14c54:	00014e7d 	.word	0x00014e7d
   14c58:	00014eb1 	.word	0x00014eb1
   14c5c:	00014eb1 	.word	0x00014eb1
   14c60:	00014eb1 	.word	0x00014eb1
   14c64:	00014eb1 	.word	0x00014eb1
   14c68:	00014eb1 	.word	0x00014eb1
   14c6c:	00014eb1 	.word	0x00014eb1
   14c70:	00014eb1 	.word	0x00014eb1
   14c74:	00014eb1 	.word	0x00014eb1
   14c78:	00014eb1 	.word	0x00014eb1
   14c7c:	00014eb1 	.word	0x00014eb1
   14c80:	00014cd9 	.word	0x00014cd9
   14c84:	00014d79 	.word	0x00014d79
   14c88:	00014eb1 	.word	0x00014eb1
   14c8c:	00014eb1 	.word	0x00014eb1
   14c90:	00014eb1 	.word	0x00014eb1
   14c94:	00014eb1 	.word	0x00014eb1
   14c98:	00014d79 	.word	0x00014d79
   14c9c:	00014eb1 	.word	0x00014eb1
   14ca0:	00014eb1 	.word	0x00014eb1
   14ca4:	00014eb1 	.word	0x00014eb1
   14ca8:	00014eb1 	.word	0x00014eb1
   14cac:	00014eb1 	.word	0x00014eb1
   14cb0:	00014da5 	.word	0x00014da5
   14cb4:	00014eb1 	.word	0x00014eb1
   14cb8:	00014eb1 	.word	0x00014eb1
   14cbc:	00014ddd 	.word	0x00014ddd
   14cc0:	00014ddd 	.word	0x00014ddd
   14cc4:	00014eb1 	.word	0x00014eb1
   14cc8:	00014d79 	.word	0x00014d79
   14ccc:	00014eb1 	.word	0x00014eb1
   14cd0:	00014eb1 	.word	0x00014eb1
   14cd4:	00014e7d 	.word	0x00014e7d
            case 'c':
                if (MP_OBJ_IS_STR(arg)) {
   14cd8:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
   14cdc:	f7fd fcd2 	bl	12684 <MP_OBJ_IS_QSTR>
   14ce0:	4603      	mov	r3, r0
   14ce2:	2b00      	cmp	r3, #0
   14ce4:	d10c      	bne.n	14d00 <str_modulo_format+0x434>
   14ce6:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
   14cea:	f7fd fcdd 	bl	126a8 <MP_OBJ_IS_OBJ>
   14cee:	4603      	mov	r3, r0
   14cf0:	2b00      	cmp	r3, #0
   14cf2:	d021      	beq.n	14d38 <str_modulo_format+0x46c>
   14cf4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
   14cf8:	681b      	ldr	r3, [r3, #0]
   14cfa:	4a81      	ldr	r2, [pc, #516]	; (14f00 <str_modulo_format+0x634>)
   14cfc:	4293      	cmp	r3, r2
   14cfe:	d11b      	bne.n	14d38 <str_modulo_format+0x46c>
                    size_t slen;
                    const char *s = mp_obj_str_get_data(arg, &slen);
   14d00:	f107 0330 	add.w	r3, r7, #48	; 0x30
   14d04:	4619      	mov	r1, r3
   14d06:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
   14d0a:	f000 fee7 	bl	15adc <mp_obj_str_get_data>
   14d0e:	65b8      	str	r0, [r7, #88]	; 0x58
                    if (slen != 1) {
   14d10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   14d12:	2b01      	cmp	r3, #1
   14d14:	d002      	beq.n	14d1c <str_modulo_format+0x450>
                        mp_raise_TypeError("%%c needs int or char");
   14d16:	487b      	ldr	r0, [pc, #492]	; (14f04 <str_modulo_format+0x638>)
   14d18:	f7f8 fb38 	bl	d38c <mp_raise_TypeError>
                    }
                    mp_print_strn(&print, s, 1, flags, ' ', width);
   14d1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   14d1e:	f107 003c 	add.w	r0, r7, #60	; 0x3c
   14d22:	9301      	str	r3, [sp, #4]
   14d24:	2320      	movs	r3, #32
   14d26:	9300      	str	r3, [sp, #0]
   14d28:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
   14d2c:	2201      	movs	r2, #1
   14d2e:	6db9      	ldr	r1, [r7, #88]	; 0x58
   14d30:	f7ec fea4 	bl	1a7c <mp_print_strn>
                if (MP_OBJ_IS_STR(arg)) {
   14d34:	bf00      	nop
                    char ch = mp_obj_get_int(arg);
                    mp_print_strn(&print, &ch, 1, flags, ' ', width);
                } else {
                    mp_raise_TypeError("integer needed");
                }
                break;
   14d36:	e0bd      	b.n	14eb4 <str_modulo_format+0x5e8>
                } else if (arg_looks_integer(arg)) {
   14d38:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
   14d3c:	f7ff f85c 	bl	13df8 <arg_looks_integer>
   14d40:	4603      	mov	r3, r0
   14d42:	2b00      	cmp	r3, #0
   14d44:	d015      	beq.n	14d72 <str_modulo_format+0x4a6>
                    char ch = mp_obj_get_int(arg);
   14d46:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
   14d4a:	f7f9 f963 	bl	e014 <mp_obj_get_int>
   14d4e:	4603      	mov	r3, r0
   14d50:	b2db      	uxtb	r3, r3
   14d52:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                    mp_print_strn(&print, &ch, 1, flags, ' ', width);
   14d56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   14d58:	f107 012f 	add.w	r1, r7, #47	; 0x2f
   14d5c:	f107 003c 	add.w	r0, r7, #60	; 0x3c
   14d60:	9301      	str	r3, [sp, #4]
   14d62:	2320      	movs	r3, #32
   14d64:	9300      	str	r3, [sp, #0]
   14d66:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
   14d6a:	2201      	movs	r2, #1
   14d6c:	f7ec fe86 	bl	1a7c <mp_print_strn>
                break;
   14d70:	e0a0      	b.n	14eb4 <str_modulo_format+0x5e8>
                    mp_raise_TypeError("integer needed");
   14d72:	4865      	ldr	r0, [pc, #404]	; (14f08 <str_modulo_format+0x63c>)
   14d74:	f7f8 fb0a 	bl	d38c <mp_raise_TypeError>

            case 'd':
            case 'i':
            case 'u':
                mp_print_mp_int(&print, arg_as_int(arg), 10, 'a', flags, fill, width, prec);
   14d78:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
   14d7c:	f7ff f876 	bl	13e6c <arg_as_int>
   14d80:	4601      	mov	r1, r0
   14d82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   14d84:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   14d86:	f107 003c 	add.w	r0, r7, #60	; 0x3c
   14d8a:	9203      	str	r2, [sp, #12]
   14d8c:	9302      	str	r3, [sp, #8]
   14d8e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
   14d92:	9301      	str	r3, [sp, #4]
   14d94:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
   14d98:	9300      	str	r3, [sp, #0]
   14d9a:	2361      	movs	r3, #97	; 0x61
   14d9c:	220a      	movs	r2, #10
   14d9e:	f7ec ffac 	bl	1cfa <mp_print_mp_int>
                break;
   14da2:	e087      	b.n	14eb4 <str_modulo_format+0x5e8>
                mp_print_float(&print, mp_obj_get_float(arg), *str, flags, fill, width, prec);
                break;
#endif

            case 'o':
                if (alt) {
   14da4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   14da6:	2b00      	cmp	r3, #0
   14da8:	d005      	beq.n	14db6 <str_modulo_format+0x4ea>
                    flags |= (PF_FLAG_SHOW_PREFIX | PF_FLAG_SHOW_OCTAL_LETTER);
   14daa:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
   14dae:	f443 7304 	orr.w	r3, r3, #528	; 0x210
   14db2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                }
                mp_print_mp_int(&print, arg, 8, 'a', flags, fill, width, prec);
   14db6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   14db8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   14dba:	f107 003c 	add.w	r0, r7, #60	; 0x3c
   14dbe:	9203      	str	r2, [sp, #12]
   14dc0:	9302      	str	r3, [sp, #8]
   14dc2:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
   14dc6:	9301      	str	r3, [sp, #4]
   14dc8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
   14dcc:	9300      	str	r3, [sp, #0]
   14dce:	2361      	movs	r3, #97	; 0x61
   14dd0:	2208      	movs	r2, #8
   14dd2:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
   14dd6:	f7ec ff90 	bl	1cfa <mp_print_mp_int>
                break;
   14dda:	e06b      	b.n	14eb4 <str_modulo_format+0x5e8>
            case 'r':
            case 's':
            {
                vstr_t arg_vstr;
                mp_print_t arg_print;
                vstr_init_print(&arg_vstr, 16, &arg_print);
   14ddc:	f107 0214 	add.w	r2, r7, #20
   14de0:	f107 031c 	add.w	r3, r7, #28
   14de4:	2110      	movs	r1, #16
   14de6:	4618      	mov	r0, r3
   14de8:	f7ec fbc5 	bl	1576 <vstr_init_print>
                mp_print_kind_t print_kind = (*str == 'r' ? PRINT_REPR : PRINT_STR);
   14dec:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
   14df0:	781b      	ldrb	r3, [r3, #0]
   14df2:	2b72      	cmp	r3, #114	; 0x72
   14df4:	bf0c      	ite	eq
   14df6:	2301      	moveq	r3, #1
   14df8:	2300      	movne	r3, #0
   14dfa:	b2db      	uxtb	r3, r3
   14dfc:	677b      	str	r3, [r7, #116]	; 0x74
                if (print_kind == PRINT_STR && is_bytes && MP_OBJ_IS_TYPE(arg, &mp_type_bytes)) {
   14dfe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   14e00:	2b00      	cmp	r3, #0
   14e02:	d112      	bne.n	14e2a <str_modulo_format+0x55e>
   14e04:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
   14e08:	2b00      	cmp	r3, #0
   14e0a:	d00e      	beq.n	14e2a <str_modulo_format+0x55e>
   14e0c:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
   14e10:	f7fd fc4a 	bl	126a8 <MP_OBJ_IS_OBJ>
   14e14:	4603      	mov	r3, r0
   14e16:	2b00      	cmp	r3, #0
   14e18:	d007      	beq.n	14e2a <str_modulo_format+0x55e>
   14e1a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
   14e1e:	681b      	ldr	r3, [r3, #0]
   14e20:	4a3a      	ldr	r2, [pc, #232]	; (14f0c <str_modulo_format+0x640>)
   14e22:	4293      	cmp	r3, r2
   14e24:	d101      	bne.n	14e2a <str_modulo_format+0x55e>
                    // If we have something like b"%s" % b"1", bytes arg should be
                    // printed undecorated.
                    print_kind = PRINT_RAW;
   14e26:	2304      	movs	r3, #4
   14e28:	677b      	str	r3, [r7, #116]	; 0x74
                }
                mp_obj_print_helper(&arg_print, arg, print_kind);
   14e2a:	f107 0314 	add.w	r3, r7, #20
   14e2e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
   14e30:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
   14e34:	4618      	mov	r0, r3
   14e36:	f7f8 ff42 	bl	dcbe <mp_obj_print_helper>
                uint vlen = arg_vstr.len;
   14e3a:	6a3b      	ldr	r3, [r7, #32]
   14e3c:	673b      	str	r3, [r7, #112]	; 0x70
                if (prec < 0) {
   14e3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   14e40:	2b00      	cmp	r3, #0
   14e42:	da01      	bge.n	14e48 <str_modulo_format+0x57c>
                    prec = vlen;
   14e44:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   14e46:	637b      	str	r3, [r7, #52]	; 0x34
                }
                if (vlen > (uint)prec) {
   14e48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   14e4a:	461a      	mov	r2, r3
   14e4c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   14e4e:	4293      	cmp	r3, r2
   14e50:	d901      	bls.n	14e56 <str_modulo_format+0x58a>
                    vlen = prec;
   14e52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   14e54:	673b      	str	r3, [r7, #112]	; 0x70
                }
                mp_print_strn(&print, arg_vstr.buf, vlen, flags, ' ', width);
   14e56:	6a79      	ldr	r1, [r7, #36]	; 0x24
   14e58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   14e5a:	f107 003c 	add.w	r0, r7, #60	; 0x3c
   14e5e:	9301      	str	r3, [sp, #4]
   14e60:	2320      	movs	r3, #32
   14e62:	9300      	str	r3, [sp, #0]
   14e64:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
   14e68:	6f3a      	ldr	r2, [r7, #112]	; 0x70
   14e6a:	f7ec fe07 	bl	1a7c <mp_print_strn>
                vstr_clear(&arg_vstr);
   14e6e:	f107 031c 	add.w	r3, r7, #28
   14e72:	4618      	mov	r0, r3
   14e74:	f7ec fb96 	bl	15a4 <vstr_clear>
                break;
   14e78:	bf00      	nop
   14e7a:	e01b      	b.n	14eb4 <str_modulo_format+0x5e8>
            }

            case 'X':
            case 'x':
                mp_print_mp_int(&print, arg, 16, *str - ('X' - 'A'), flags | alt, fill, width, prec);
   14e7c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
   14e80:	781b      	ldrb	r3, [r3, #0]
   14e82:	f1a3 0417 	sub.w	r4, r3, #23
   14e86:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
   14e8a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   14e8c:	4313      	orrs	r3, r2
   14e8e:	6bba      	ldr	r2, [r7, #56]	; 0x38
   14e90:	6b79      	ldr	r1, [r7, #52]	; 0x34
   14e92:	f107 003c 	add.w	r0, r7, #60	; 0x3c
   14e96:	9103      	str	r1, [sp, #12]
   14e98:	9202      	str	r2, [sp, #8]
   14e9a:	f897 207f 	ldrb.w	r2, [r7, #127]	; 0x7f
   14e9e:	9201      	str	r2, [sp, #4]
   14ea0:	9300      	str	r3, [sp, #0]
   14ea2:	4623      	mov	r3, r4
   14ea4:	2210      	movs	r2, #16
   14ea6:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
   14eaa:	f7ec ff26 	bl	1cfa <mp_print_mp_int>
                break;
   14eae:	e001      	b.n	14eb4 <str_modulo_format+0x5e8>

            default:
                if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
                    terse_str_format_value_error();
   14eb0:	f7fe ffe7 	bl	13e82 <terse_str_format_value_error>
    for (const byte *top = str + len; str < top; str++) {
   14eb4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
   14eb8:	3301      	adds	r3, #1
   14eba:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   14ebe:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
   14ec2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   14ec4:	429a      	cmp	r2, r3
   14ec6:	f4ff ad63 	bcc.w	14990 <str_modulo_format+0xc4>
                        *str, *str, str - start_str));
                }
        }
    }

    if (arg_i != n_args) {
   14eca:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
   14ece:	68bb      	ldr	r3, [r7, #8]
   14ed0:	429a      	cmp	r2, r3
   14ed2:	d002      	beq.n	14eda <str_modulo_format+0x60e>
        mp_raise_TypeError("format string didn't convert all arguments");
   14ed4:	480e      	ldr	r0, [pc, #56]	; (14f10 <str_modulo_format+0x644>)
   14ed6:	f7f8 fa59 	bl	d38c <mp_raise_TypeError>
    }

    return mp_obj_new_str_from_vstr(is_bytes ? &mp_type_bytes : &mp_type_str, &vstr);
   14eda:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
   14ede:	2b00      	cmp	r3, #0
   14ee0:	d001      	beq.n	14ee6 <str_modulo_format+0x61a>
   14ee2:	4b0a      	ldr	r3, [pc, #40]	; (14f0c <str_modulo_format+0x640>)
   14ee4:	e000      	b.n	14ee8 <str_modulo_format+0x61c>
   14ee6:	4b06      	ldr	r3, [pc, #24]	; (14f00 <str_modulo_format+0x634>)
   14ee8:	f107 0244 	add.w	r2, r7, #68	; 0x44
   14eec:	4611      	mov	r1, r2
   14eee:	4618      	mov	r0, r3
   14ef0:	f000 fc33 	bl	1575a <mp_obj_new_str_from_vstr>
   14ef4:	4603      	mov	r3, r0
}
   14ef6:	4618      	mov	r0, r3
   14ef8:	3794      	adds	r7, #148	; 0x94
   14efa:	46bd      	mov	sp, r7
   14efc:	bd90      	pop	{r4, r7, pc}
   14efe:	bf00      	nop
   14f00:	000257b0 	.word	0x000257b0
   14f04:	0002563c 	.word	0x0002563c
   14f08:	00025654 	.word	0x00025654
   14f0c:	000257ec 	.word	0x000257ec
   14f10:	00025664 	.word	0x00025664

00014f14 <str_replace>:
#endif

// The implementation is optimized, returning the original string if there's
// nothing to replace.
STATIC mp_obj_t str_replace(size_t n_args, const mp_obj_t *args) {
   14f14:	b580      	push	{r7, lr}
   14f16:	b096      	sub	sp, #88	; 0x58
   14f18:	af02      	add	r7, sp, #8
   14f1a:	6078      	str	r0, [r7, #4]
   14f1c:	6039      	str	r1, [r7, #0]
    mp_check_self(MP_OBJ_IS_STR_OR_BYTES(args[0]));
   14f1e:	683b      	ldr	r3, [r7, #0]
   14f20:	681b      	ldr	r3, [r3, #0]
   14f22:	4618      	mov	r0, r3
   14f24:	f7fd fbae 	bl	12684 <MP_OBJ_IS_QSTR>
   14f28:	4603      	mov	r3, r0
   14f2a:	2b00      	cmp	r3, #0
   14f2c:	d115      	bne.n	14f5a <str_replace+0x46>
   14f2e:	683b      	ldr	r3, [r7, #0]
   14f30:	681b      	ldr	r3, [r3, #0]
   14f32:	4618      	mov	r0, r3
   14f34:	f7fd fbb8 	bl	126a8 <MP_OBJ_IS_OBJ>
   14f38:	4603      	mov	r3, r0
   14f3a:	2b00      	cmp	r3, #0
   14f3c:	d006      	beq.n	14f4c <str_replace+0x38>
   14f3e:	683b      	ldr	r3, [r7, #0]
   14f40:	681b      	ldr	r3, [r3, #0]
   14f42:	681b      	ldr	r3, [r3, #0]
   14f44:	699b      	ldr	r3, [r3, #24]
   14f46:	4aa4      	ldr	r2, [pc, #656]	; (151d8 <str_replace+0x2c4>)
   14f48:	4293      	cmp	r3, r2
   14f4a:	d006      	beq.n	14f5a <str_replace+0x46>
   14f4c:	4ba3      	ldr	r3, [pc, #652]	; (151dc <str_replace+0x2c8>)
   14f4e:	4aa4      	ldr	r2, [pc, #656]	; (151e0 <str_replace+0x2cc>)
   14f50:	f240 613b 	movw	r1, #1595	; 0x63b
   14f54:	48a3      	ldr	r0, [pc, #652]	; (151e4 <str_replace+0x2d0>)
   14f56:	f007 ffc3 	bl	1cee0 <__assert_func>

    mp_int_t max_rep = -1;
   14f5a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   14f5e:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (n_args == 4) {
   14f60:	687b      	ldr	r3, [r7, #4]
   14f62:	2b04      	cmp	r3, #4
   14f64:	d112      	bne.n	14f8c <str_replace+0x78>
        max_rep = mp_obj_get_int(args[3]);
   14f66:	683b      	ldr	r3, [r7, #0]
   14f68:	330c      	adds	r3, #12
   14f6a:	681b      	ldr	r3, [r3, #0]
   14f6c:	4618      	mov	r0, r3
   14f6e:	f7f9 f851 	bl	e014 <mp_obj_get_int>
   14f72:	64f8      	str	r0, [r7, #76]	; 0x4c
        if (max_rep == 0) {
   14f74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   14f76:	2b00      	cmp	r3, #0
   14f78:	d102      	bne.n	14f80 <str_replace+0x6c>
            return args[0];
   14f7a:	683b      	ldr	r3, [r7, #0]
   14f7c:	681b      	ldr	r3, [r3, #0]
   14f7e:	e127      	b.n	151d0 <str_replace+0x2bc>
        } else if (max_rep < 0) {
   14f80:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   14f82:	2b00      	cmp	r3, #0
   14f84:	da02      	bge.n	14f8c <str_replace+0x78>
            max_rep = -1;
   14f86:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   14f8a:	64fb      	str	r3, [r7, #76]	; 0x4c

    // if max_rep is still -1 by this point we will need to do all possible replacements

    // check argument types

    const mp_obj_type_t *self_type = mp_obj_get_type(args[0]);
   14f8c:	683b      	ldr	r3, [r7, #0]
   14f8e:	681b      	ldr	r3, [r3, #0]
   14f90:	4618      	mov	r0, r3
   14f92:	f7f8 fe63 	bl	dc5c <mp_obj_get_type>
   14f96:	6278      	str	r0, [r7, #36]	; 0x24

    if (mp_obj_get_type(args[1]) != self_type) {
   14f98:	683b      	ldr	r3, [r7, #0]
   14f9a:	3304      	adds	r3, #4
   14f9c:	681b      	ldr	r3, [r3, #0]
   14f9e:	4618      	mov	r0, r3
   14fa0:	f7f8 fe5c 	bl	dc5c <mp_obj_get_type>
   14fa4:	4602      	mov	r2, r0
   14fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   14fa8:	429a      	cmp	r2, r3
   14faa:	d005      	beq.n	14fb8 <str_replace+0xa4>
        bad_implicit_conversion(args[1]);
   14fac:	683b      	ldr	r3, [r7, #0]
   14fae:	3304      	adds	r3, #4
   14fb0:	681b      	ldr	r3, [r3, #0]
   14fb2:	4618      	mov	r0, r3
   14fb4:	f000 fd23 	bl	159fe <bad_implicit_conversion>
    }

    if (mp_obj_get_type(args[2]) != self_type) {
   14fb8:	683b      	ldr	r3, [r7, #0]
   14fba:	3308      	adds	r3, #8
   14fbc:	681b      	ldr	r3, [r3, #0]
   14fbe:	4618      	mov	r0, r3
   14fc0:	f7f8 fe4c 	bl	dc5c <mp_obj_get_type>
   14fc4:	4602      	mov	r2, r0
   14fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   14fc8:	429a      	cmp	r2, r3
   14fca:	d005      	beq.n	14fd8 <str_replace+0xc4>
        bad_implicit_conversion(args[2]);
   14fcc:	683b      	ldr	r3, [r7, #0]
   14fce:	3308      	adds	r3, #8
   14fd0:	681b      	ldr	r3, [r3, #0]
   14fd2:	4618      	mov	r0, r3
   14fd4:	f000 fd13 	bl	159fe <bad_implicit_conversion>
    }

    // extract string data

    GET_STR_DATA_LEN(args[0], str, str_len);
   14fd8:	683b      	ldr	r3, [r7, #0]
   14fda:	681b      	ldr	r3, [r3, #0]
   14fdc:	4618      	mov	r0, r3
   14fde:	f7fd fb51 	bl	12684 <MP_OBJ_IS_QSTR>
   14fe2:	4603      	mov	r3, r0
   14fe4:	2b00      	cmp	r3, #0
   14fe6:	d00a      	beq.n	14ffe <str_replace+0xea>
   14fe8:	683b      	ldr	r3, [r7, #0]
   14fea:	681b      	ldr	r3, [r3, #0]
   14fec:	089b      	lsrs	r3, r3, #2
   14fee:	f107 0220 	add.w	r2, r7, #32
   14ff2:	4611      	mov	r1, r2
   14ff4:	4618      	mov	r0, r3
   14ff6:	f7ec f9f9 	bl	13ec <qstr_data>
   14ffa:	64b8      	str	r0, [r7, #72]	; 0x48
   14ffc:	e007      	b.n	1500e <str_replace+0xfa>
   14ffe:	683b      	ldr	r3, [r7, #0]
   15000:	681b      	ldr	r3, [r3, #0]
   15002:	689b      	ldr	r3, [r3, #8]
   15004:	623b      	str	r3, [r7, #32]
   15006:	683b      	ldr	r3, [r7, #0]
   15008:	681b      	ldr	r3, [r3, #0]
   1500a:	68db      	ldr	r3, [r3, #12]
   1500c:	64bb      	str	r3, [r7, #72]	; 0x48
    GET_STR_DATA_LEN(args[1], old, old_len);
   1500e:	683b      	ldr	r3, [r7, #0]
   15010:	3304      	adds	r3, #4
   15012:	681b      	ldr	r3, [r3, #0]
   15014:	4618      	mov	r0, r3
   15016:	f7fd fb35 	bl	12684 <MP_OBJ_IS_QSTR>
   1501a:	4603      	mov	r3, r0
   1501c:	2b00      	cmp	r3, #0
   1501e:	d00b      	beq.n	15038 <str_replace+0x124>
   15020:	683b      	ldr	r3, [r7, #0]
   15022:	3304      	adds	r3, #4
   15024:	681b      	ldr	r3, [r3, #0]
   15026:	089b      	lsrs	r3, r3, #2
   15028:	f107 021c 	add.w	r2, r7, #28
   1502c:	4611      	mov	r1, r2
   1502e:	4618      	mov	r0, r3
   15030:	f7ec f9dc 	bl	13ec <qstr_data>
   15034:	6478      	str	r0, [r7, #68]	; 0x44
   15036:	e009      	b.n	1504c <str_replace+0x138>
   15038:	683b      	ldr	r3, [r7, #0]
   1503a:	3304      	adds	r3, #4
   1503c:	681b      	ldr	r3, [r3, #0]
   1503e:	689b      	ldr	r3, [r3, #8]
   15040:	61fb      	str	r3, [r7, #28]
   15042:	683b      	ldr	r3, [r7, #0]
   15044:	3304      	adds	r3, #4
   15046:	681b      	ldr	r3, [r3, #0]
   15048:	68db      	ldr	r3, [r3, #12]
   1504a:	647b      	str	r3, [r7, #68]	; 0x44
    GET_STR_DATA_LEN(args[2], new, new_len);
   1504c:	683b      	ldr	r3, [r7, #0]
   1504e:	3308      	adds	r3, #8
   15050:	681b      	ldr	r3, [r3, #0]
   15052:	4618      	mov	r0, r3
   15054:	f7fd fb16 	bl	12684 <MP_OBJ_IS_QSTR>
   15058:	4603      	mov	r3, r0
   1505a:	2b00      	cmp	r3, #0
   1505c:	d00b      	beq.n	15076 <str_replace+0x162>
   1505e:	683b      	ldr	r3, [r7, #0]
   15060:	3308      	adds	r3, #8
   15062:	681b      	ldr	r3, [r3, #0]
   15064:	089b      	lsrs	r3, r3, #2
   15066:	f107 0218 	add.w	r2, r7, #24
   1506a:	4611      	mov	r1, r2
   1506c:	4618      	mov	r0, r3
   1506e:	f7ec f9bd 	bl	13ec <qstr_data>
   15072:	6438      	str	r0, [r7, #64]	; 0x40
   15074:	e009      	b.n	1508a <str_replace+0x176>
   15076:	683b      	ldr	r3, [r7, #0]
   15078:	3308      	adds	r3, #8
   1507a:	681b      	ldr	r3, [r3, #0]
   1507c:	689b      	ldr	r3, [r3, #8]
   1507e:	61bb      	str	r3, [r7, #24]
   15080:	683b      	ldr	r3, [r7, #0]
   15082:	3308      	adds	r3, #8
   15084:	681b      	ldr	r3, [r3, #0]
   15086:	68db      	ldr	r3, [r3, #12]
   15088:	643b      	str	r3, [r7, #64]	; 0x40

    // old won't exist in str if it's longer, so nothing to replace
    if (old_len > str_len) {
   1508a:	69fa      	ldr	r2, [r7, #28]
   1508c:	6a3b      	ldr	r3, [r7, #32]
   1508e:	429a      	cmp	r2, r3
   15090:	d902      	bls.n	15098 <str_replace+0x184>
        return args[0];
   15092:	683b      	ldr	r3, [r7, #0]
   15094:	681b      	ldr	r3, [r3, #0]
   15096:	e09b      	b.n	151d0 <str_replace+0x2bc>
    }

    // data for the replaced string
    byte *data = NULL;
   15098:	2300      	movs	r3, #0
   1509a:	63fb      	str	r3, [r7, #60]	; 0x3c

    // do 2 passes over the string:
    //   first pass computes the required length of the replaced string
    //   second pass does the replacements
    for (;;) {
        size_t replaced_str_index = 0;
   1509c:	2300      	movs	r3, #0
   1509e:	63bb      	str	r3, [r7, #56]	; 0x38
        size_t num_replacements_done = 0;
   150a0:	2300      	movs	r3, #0
   150a2:	637b      	str	r3, [r7, #52]	; 0x34
        const byte *old_occurrence;
        const byte *offset_ptr = str;
   150a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   150a6:	62fb      	str	r3, [r7, #44]	; 0x2c
        size_t str_len_remain = str_len;
   150a8:	6a3b      	ldr	r3, [r7, #32]
   150aa:	62bb      	str	r3, [r7, #40]	; 0x28
        if (old_len == 0) {
   150ac:	69fb      	ldr	r3, [r7, #28]
   150ae:	2b00      	cmp	r3, #0
   150b0:	d147      	bne.n	15142 <str_replace+0x22e>
            // if old_str is empty, copy new_str to start of replaced string
            // copy the replacement string
            if (data != NULL) {
   150b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   150b4:	2b00      	cmp	r3, #0
   150b6:	d005      	beq.n	150c4 <str_replace+0x1b0>
                memcpy(data, new, new_len);
   150b8:	69bb      	ldr	r3, [r7, #24]
   150ba:	461a      	mov	r2, r3
   150bc:	6c39      	ldr	r1, [r7, #64]	; 0x40
   150be:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
   150c0:	f009 fa36 	bl	1e530 <memcpy>
            }
            replaced_str_index += new_len;
   150c4:	69bb      	ldr	r3, [r7, #24]
   150c6:	6bba      	ldr	r2, [r7, #56]	; 0x38
   150c8:	4413      	add	r3, r2
   150ca:	63bb      	str	r3, [r7, #56]	; 0x38
            num_replacements_done++;
   150cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   150ce:	3301      	adds	r3, #1
   150d0:	637b      	str	r3, [r7, #52]	; 0x34
        }
        while (num_replacements_done != (size_t)max_rep && str_len_remain > 0 && (old_occurrence = find_subbytes(offset_ptr, str_len_remain, old, old_len, 1)) != NULL) {
   150d2:	e036      	b.n	15142 <str_replace+0x22e>
            if (old_len == 0) {
   150d4:	69fb      	ldr	r3, [r7, #28]
   150d6:	2b00      	cmp	r3, #0
   150d8:	d102      	bne.n	150e0 <str_replace+0x1cc>
                old_occurrence += 1;
   150da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   150dc:	3301      	adds	r3, #1
   150de:	633b      	str	r3, [r7, #48]	; 0x30
            }
            // copy from just after end of last occurrence of to-be-replaced string to right before start of next occurrence
            if (data != NULL) {
   150e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   150e2:	2b00      	cmp	r3, #0
   150e4:	d009      	beq.n	150fa <str_replace+0x1e6>
                memcpy(data + replaced_str_index, offset_ptr, old_occurrence - offset_ptr);
   150e6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   150e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   150ea:	18d0      	adds	r0, r2, r3
   150ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   150ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   150f0:	1ad3      	subs	r3, r2, r3
   150f2:	461a      	mov	r2, r3
   150f4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
   150f6:	f009 fa1b 	bl	1e530 <memcpy>
            }
            replaced_str_index += old_occurrence - offset_ptr;
   150fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   150fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   150fe:	1ad3      	subs	r3, r2, r3
   15100:	461a      	mov	r2, r3
   15102:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   15104:	4413      	add	r3, r2
   15106:	63bb      	str	r3, [r7, #56]	; 0x38
            // copy the replacement string
            if (data != NULL) {
   15108:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1510a:	2b00      	cmp	r3, #0
   1510c:	d007      	beq.n	1511e <str_replace+0x20a>
                memcpy(data + replaced_str_index, new, new_len);
   1510e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   15110:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   15112:	4413      	add	r3, r2
   15114:	69ba      	ldr	r2, [r7, #24]
   15116:	6c39      	ldr	r1, [r7, #64]	; 0x40
   15118:	4618      	mov	r0, r3
   1511a:	f009 fa09 	bl	1e530 <memcpy>
            }
            replaced_str_index += new_len;
   1511e:	69bb      	ldr	r3, [r7, #24]
   15120:	6bba      	ldr	r2, [r7, #56]	; 0x38
   15122:	4413      	add	r3, r2
   15124:	63bb      	str	r3, [r7, #56]	; 0x38
            offset_ptr = old_occurrence + old_len;
   15126:	69fb      	ldr	r3, [r7, #28]
   15128:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   1512a:	4413      	add	r3, r2
   1512c:	62fb      	str	r3, [r7, #44]	; 0x2c
            str_len_remain = str + str_len - offset_ptr;
   1512e:	6a3b      	ldr	r3, [r7, #32]
   15130:	6cba      	ldr	r2, [r7, #72]	; 0x48
   15132:	4413      	add	r3, r2
   15134:	461a      	mov	r2, r3
   15136:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   15138:	1ad3      	subs	r3, r2, r3
   1513a:	62bb      	str	r3, [r7, #40]	; 0x28
            num_replacements_done++;
   1513c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1513e:	3301      	adds	r3, #1
   15140:	637b      	str	r3, [r7, #52]	; 0x34
        while (num_replacements_done != (size_t)max_rep && str_len_remain > 0 && (old_occurrence = find_subbytes(offset_ptr, str_len_remain, old, old_len, 1)) != NULL) {
   15142:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   15144:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   15146:	429a      	cmp	r2, r3
   15148:	d00f      	beq.n	1516a <str_replace+0x256>
   1514a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1514c:	2b00      	cmp	r3, #0
   1514e:	d00c      	beq.n	1516a <str_replace+0x256>
   15150:	69fa      	ldr	r2, [r7, #28]
   15152:	2301      	movs	r3, #1
   15154:	9300      	str	r3, [sp, #0]
   15156:	4613      	mov	r3, r2
   15158:	6c7a      	ldr	r2, [r7, #68]	; 0x44
   1515a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   1515c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   1515e:	f7fd fdad 	bl	12cbc <find_subbytes>
   15162:	6338      	str	r0, [r7, #48]	; 0x30
   15164:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   15166:	2b00      	cmp	r3, #0
   15168:	d1b4      	bne.n	150d4 <str_replace+0x1c0>
        }

        // copy from just after end of last occurrence of to-be-replaced string to end of old string
        if (data != NULL) {
   1516a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1516c:	2b00      	cmp	r3, #0
   1516e:	d007      	beq.n	15180 <str_replace+0x26c>
            memcpy(data + replaced_str_index, offset_ptr, str_len_remain);
   15170:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   15172:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   15174:	4413      	add	r3, r2
   15176:	6aba      	ldr	r2, [r7, #40]	; 0x28
   15178:	6af9      	ldr	r1, [r7, #44]	; 0x2c
   1517a:	4618      	mov	r0, r3
   1517c:	f009 f9d8 	bl	1e530 <memcpy>
        }
        replaced_str_index += str_len_remain;
   15180:	6bba      	ldr	r2, [r7, #56]	; 0x38
   15182:	6abb      	ldr	r3, [r7, #40]	; 0x28
   15184:	4413      	add	r3, r2
   15186:	63bb      	str	r3, [r7, #56]	; 0x38

        if (data == NULL) {
   15188:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1518a:	2b00      	cmp	r3, #0
   1518c:	d118      	bne.n	151c0 <str_replace+0x2ac>
            // first pass
            if (num_replacements_done == 0) {
   1518e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   15190:	2b00      	cmp	r3, #0
   15192:	d102      	bne.n	1519a <str_replace+0x286>
                // no substr found, return original string
                return args[0];
   15194:	683b      	ldr	r3, [r7, #0]
   15196:	681b      	ldr	r3, [r3, #0]
   15198:	e01a      	b.n	151d0 <str_replace+0x2bc>
            } else {
                // substr found, allocate new string
                vstr_init_len(&vstr, replaced_str_index);
   1519a:	f107 0308 	add.w	r3, r7, #8
   1519e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
   151a0:	4618      	mov	r0, r3
   151a2:	f7ec f9bc 	bl	151e <vstr_init_len>
                data = (byte*)vstr.buf;
   151a6:	693b      	ldr	r3, [r7, #16]
   151a8:	63fb      	str	r3, [r7, #60]	; 0x3c
                assert(data != NULL);
   151aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   151ac:	2b00      	cmp	r3, #0
   151ae:	f47f af75 	bne.w	1509c <str_replace+0x188>
   151b2:	4b0d      	ldr	r3, [pc, #52]	; (151e8 <str_replace+0x2d4>)
   151b4:	4a0a      	ldr	r2, [pc, #40]	; (151e0 <str_replace+0x2cc>)
   151b6:	f44f 61d3 	mov.w	r1, #1688	; 0x698
   151ba:	480a      	ldr	r0, [pc, #40]	; (151e4 <str_replace+0x2d0>)
   151bc:	f007 fe90 	bl	1cee0 <__assert_func>
            }
        } else {
            // second pass, we are done
            break;
   151c0:	bf00      	nop
        }
    }

    return mp_obj_new_str_from_vstr(self_type, &vstr);
   151c2:	f107 0308 	add.w	r3, r7, #8
   151c6:	4619      	mov	r1, r3
   151c8:	6a78      	ldr	r0, [r7, #36]	; 0x24
   151ca:	f000 fac6 	bl	1575a <mp_obj_new_str_from_vstr>
   151ce:	4603      	mov	r3, r0
}
   151d0:	4618      	mov	r0, r3
   151d2:	3750      	adds	r7, #80	; 0x50
   151d4:	46bd      	mov	sp, r7
   151d6:	bd80      	pop	{r7, pc}
   151d8:	00012d2f 	.word	0x00012d2f
   151dc:	00025390 	.word	0x00025390
   151e0:	000258d0 	.word	0x000258d0
   151e4:	000252f4 	.word	0x000252f4
   151e8:	00025690 	.word	0x00025690

000151ec <str_count>:
MP_DEFINE_CONST_FUN_OBJ_VAR_BETWEEN(str_replace_obj, 3, 4, str_replace);

#if MICROPY_PY_BUILTINS_STR_COUNT
STATIC mp_obj_t str_count(size_t n_args, const mp_obj_t *args) {
   151ec:	b580      	push	{r7, lr}
   151ee:	b08e      	sub	sp, #56	; 0x38
   151f0:	af02      	add	r7, sp, #8
   151f2:	6078      	str	r0, [r7, #4]
   151f4:	6039      	str	r1, [r7, #0]
    const mp_obj_type_t *self_type = mp_obj_get_type(args[0]);
   151f6:	683b      	ldr	r3, [r7, #0]
   151f8:	681b      	ldr	r3, [r3, #0]
   151fa:	4618      	mov	r0, r3
   151fc:	f7f8 fd2e 	bl	dc5c <mp_obj_get_type>
   15200:	6178      	str	r0, [r7, #20]
    mp_check_self(MP_OBJ_IS_STR_OR_BYTES(args[0]));
   15202:	683b      	ldr	r3, [r7, #0]
   15204:	681b      	ldr	r3, [r3, #0]
   15206:	4618      	mov	r0, r3
   15208:	f7fd fa3c 	bl	12684 <MP_OBJ_IS_QSTR>
   1520c:	4603      	mov	r3, r0
   1520e:	2b00      	cmp	r3, #0
   15210:	d115      	bne.n	1523e <str_count+0x52>
   15212:	683b      	ldr	r3, [r7, #0]
   15214:	681b      	ldr	r3, [r3, #0]
   15216:	4618      	mov	r0, r3
   15218:	f7fd fa46 	bl	126a8 <MP_OBJ_IS_OBJ>
   1521c:	4603      	mov	r3, r0
   1521e:	2b00      	cmp	r3, #0
   15220:	d006      	beq.n	15230 <str_count+0x44>
   15222:	683b      	ldr	r3, [r7, #0]
   15224:	681b      	ldr	r3, [r3, #0]
   15226:	681b      	ldr	r3, [r3, #0]
   15228:	699b      	ldr	r3, [r3, #24]
   1522a:	4a5e      	ldr	r2, [pc, #376]	; (153a4 <str_count+0x1b8>)
   1522c:	4293      	cmp	r3, r2
   1522e:	d006      	beq.n	1523e <str_count+0x52>
   15230:	4b5d      	ldr	r3, [pc, #372]	; (153a8 <str_count+0x1bc>)
   15232:	4a5e      	ldr	r2, [pc, #376]	; (153ac <str_count+0x1c0>)
   15234:	f240 61a7 	movw	r1, #1703	; 0x6a7
   15238:	485d      	ldr	r0, [pc, #372]	; (153b0 <str_count+0x1c4>)
   1523a:	f007 fe51 	bl	1cee0 <__assert_func>

    // check argument type
    if (mp_obj_get_type(args[1]) != self_type) {
   1523e:	683b      	ldr	r3, [r7, #0]
   15240:	3304      	adds	r3, #4
   15242:	681b      	ldr	r3, [r3, #0]
   15244:	4618      	mov	r0, r3
   15246:	f7f8 fd09 	bl	dc5c <mp_obj_get_type>
   1524a:	4602      	mov	r2, r0
   1524c:	697b      	ldr	r3, [r7, #20]
   1524e:	429a      	cmp	r2, r3
   15250:	d005      	beq.n	1525e <str_count+0x72>
        bad_implicit_conversion(args[1]);
   15252:	683b      	ldr	r3, [r7, #0]
   15254:	3304      	adds	r3, #4
   15256:	681b      	ldr	r3, [r3, #0]
   15258:	4618      	mov	r0, r3
   1525a:	f000 fbd0 	bl	159fe <bad_implicit_conversion>
    }

    GET_STR_DATA_LEN(args[0], haystack, haystack_len);
   1525e:	683b      	ldr	r3, [r7, #0]
   15260:	681b      	ldr	r3, [r3, #0]
   15262:	4618      	mov	r0, r3
   15264:	f7fd fa0e 	bl	12684 <MP_OBJ_IS_QSTR>
   15268:	4603      	mov	r3, r0
   1526a:	2b00      	cmp	r3, #0
   1526c:	d00a      	beq.n	15284 <str_count+0x98>
   1526e:	683b      	ldr	r3, [r7, #0]
   15270:	681b      	ldr	r3, [r3, #0]
   15272:	089b      	lsrs	r3, r3, #2
   15274:	f107 0210 	add.w	r2, r7, #16
   15278:	4611      	mov	r1, r2
   1527a:	4618      	mov	r0, r3
   1527c:	f7ec f8b6 	bl	13ec <qstr_data>
   15280:	62f8      	str	r0, [r7, #44]	; 0x2c
   15282:	e007      	b.n	15294 <str_count+0xa8>
   15284:	683b      	ldr	r3, [r7, #0]
   15286:	681b      	ldr	r3, [r3, #0]
   15288:	689b      	ldr	r3, [r3, #8]
   1528a:	613b      	str	r3, [r7, #16]
   1528c:	683b      	ldr	r3, [r7, #0]
   1528e:	681b      	ldr	r3, [r3, #0]
   15290:	68db      	ldr	r3, [r3, #12]
   15292:	62fb      	str	r3, [r7, #44]	; 0x2c
    GET_STR_DATA_LEN(args[1], needle, needle_len);
   15294:	683b      	ldr	r3, [r7, #0]
   15296:	3304      	adds	r3, #4
   15298:	681b      	ldr	r3, [r3, #0]
   1529a:	4618      	mov	r0, r3
   1529c:	f7fd f9f2 	bl	12684 <MP_OBJ_IS_QSTR>
   152a0:	4603      	mov	r3, r0
   152a2:	2b00      	cmp	r3, #0
   152a4:	d00b      	beq.n	152be <str_count+0xd2>
   152a6:	683b      	ldr	r3, [r7, #0]
   152a8:	3304      	adds	r3, #4
   152aa:	681b      	ldr	r3, [r3, #0]
   152ac:	089b      	lsrs	r3, r3, #2
   152ae:	f107 020c 	add.w	r2, r7, #12
   152b2:	4611      	mov	r1, r2
   152b4:	4618      	mov	r0, r3
   152b6:	f7ec f899 	bl	13ec <qstr_data>
   152ba:	62b8      	str	r0, [r7, #40]	; 0x28
   152bc:	e009      	b.n	152d2 <str_count+0xe6>
   152be:	683b      	ldr	r3, [r7, #0]
   152c0:	3304      	adds	r3, #4
   152c2:	681b      	ldr	r3, [r3, #0]
   152c4:	689b      	ldr	r3, [r3, #8]
   152c6:	60fb      	str	r3, [r7, #12]
   152c8:	683b      	ldr	r3, [r7, #0]
   152ca:	3304      	adds	r3, #4
   152cc:	681b      	ldr	r3, [r3, #0]
   152ce:	68db      	ldr	r3, [r3, #12]
   152d0:	62bb      	str	r3, [r7, #40]	; 0x28

    const byte *start = haystack;
   152d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   152d4:	627b      	str	r3, [r7, #36]	; 0x24
    const byte *end = haystack + haystack_len;
   152d6:	693b      	ldr	r3, [r7, #16]
   152d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   152da:	4413      	add	r3, r2
   152dc:	623b      	str	r3, [r7, #32]
    if (n_args >= 3 && args[2] != mp_const_none) {
   152de:	687b      	ldr	r3, [r7, #4]
   152e0:	2b02      	cmp	r3, #2
   152e2:	d911      	bls.n	15308 <str_count+0x11c>
   152e4:	683b      	ldr	r3, [r7, #0]
   152e6:	3308      	adds	r3, #8
   152e8:	681b      	ldr	r3, [r3, #0]
   152ea:	4a32      	ldr	r2, [pc, #200]	; (153b4 <str_count+0x1c8>)
   152ec:	4293      	cmp	r3, r2
   152ee:	d00b      	beq.n	15308 <str_count+0x11c>
        start = str_index_to_ptr(self_type, haystack, haystack_len, args[2], true);
   152f0:	693a      	ldr	r2, [r7, #16]
   152f2:	683b      	ldr	r3, [r7, #0]
   152f4:	3308      	adds	r3, #8
   152f6:	6819      	ldr	r1, [r3, #0]
   152f8:	2301      	movs	r3, #1
   152fa:	9300      	str	r3, [sp, #0]
   152fc:	460b      	mov	r3, r1
   152fe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
   15300:	6978      	ldr	r0, [r7, #20]
   15302:	f7fd fe91 	bl	13028 <str_index_to_ptr>
   15306:	6278      	str	r0, [r7, #36]	; 0x24
    }
    if (n_args >= 4 && args[3] != mp_const_none) {
   15308:	687b      	ldr	r3, [r7, #4]
   1530a:	2b03      	cmp	r3, #3
   1530c:	d911      	bls.n	15332 <str_count+0x146>
   1530e:	683b      	ldr	r3, [r7, #0]
   15310:	330c      	adds	r3, #12
   15312:	681b      	ldr	r3, [r3, #0]
   15314:	4a27      	ldr	r2, [pc, #156]	; (153b4 <str_count+0x1c8>)
   15316:	4293      	cmp	r3, r2
   15318:	d00b      	beq.n	15332 <str_count+0x146>
        end = str_index_to_ptr(self_type, haystack, haystack_len, args[3], true);
   1531a:	693a      	ldr	r2, [r7, #16]
   1531c:	683b      	ldr	r3, [r7, #0]
   1531e:	330c      	adds	r3, #12
   15320:	6819      	ldr	r1, [r3, #0]
   15322:	2301      	movs	r3, #1
   15324:	9300      	str	r3, [sp, #0]
   15326:	460b      	mov	r3, r1
   15328:	6af9      	ldr	r1, [r7, #44]	; 0x2c
   1532a:	6978      	ldr	r0, [r7, #20]
   1532c:	f7fd fe7c 	bl	13028 <str_index_to_ptr>
   15330:	6238      	str	r0, [r7, #32]
    }

    // if needle_len is zero then we count each gap between characters as an occurrence
    if (needle_len == 0) {
   15332:	68fb      	ldr	r3, [r7, #12]
   15334:	2b00      	cmp	r3, #0
   15336:	d10c      	bne.n	15352 <str_count+0x166>
        return MP_OBJ_NEW_SMALL_INT(utf8_charlen(start, end - start) + 1);
   15338:	6a3a      	ldr	r2, [r7, #32]
   1533a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1533c:	1ad3      	subs	r3, r2, r3
   1533e:	4619      	mov	r1, r3
   15340:	6a78      	ldr	r0, [r7, #36]	; 0x24
   15342:	f7fd f981 	bl	12648 <utf8_charlen>
   15346:	4603      	mov	r3, r0
   15348:	3301      	adds	r3, #1
   1534a:	005b      	lsls	r3, r3, #1
   1534c:	f043 0301 	orr.w	r3, r3, #1
   15350:	e023      	b.n	1539a <str_count+0x1ae>
    }

    // count the occurrences
    mp_int_t num_occurrences = 0;
   15352:	2300      	movs	r3, #0
   15354:	61fb      	str	r3, [r7, #28]
    for (const byte *haystack_ptr = start; haystack_ptr + needle_len <= end;) {
   15356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   15358:	61bb      	str	r3, [r7, #24]
   1535a:	e014      	b.n	15386 <str_count+0x19a>
        if (memcmp(haystack_ptr, needle, needle_len) == 0) {
   1535c:	68fb      	ldr	r3, [r7, #12]
   1535e:	461a      	mov	r2, r3
   15360:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   15362:	69b8      	ldr	r0, [r7, #24]
   15364:	f009 f9c9 	bl	1e6fa <memcmp>
   15368:	4603      	mov	r3, r0
   1536a:	2b00      	cmp	r3, #0
   1536c:	d107      	bne.n	1537e <str_count+0x192>
            num_occurrences++;
   1536e:	69fb      	ldr	r3, [r7, #28]
   15370:	3301      	adds	r3, #1
   15372:	61fb      	str	r3, [r7, #28]
            haystack_ptr += needle_len;
   15374:	68fb      	ldr	r3, [r7, #12]
   15376:	69ba      	ldr	r2, [r7, #24]
   15378:	4413      	add	r3, r2
   1537a:	61bb      	str	r3, [r7, #24]
   1537c:	e003      	b.n	15386 <str_count+0x19a>
        } else {
            haystack_ptr = utf8_next_char(haystack_ptr);
   1537e:	69b8      	ldr	r0, [r7, #24]
   15380:	f7fd f956 	bl	12630 <utf8_next_char>
   15384:	61b8      	str	r0, [r7, #24]
    for (const byte *haystack_ptr = start; haystack_ptr + needle_len <= end;) {
   15386:	68fb      	ldr	r3, [r7, #12]
   15388:	69ba      	ldr	r2, [r7, #24]
   1538a:	441a      	add	r2, r3
   1538c:	6a3b      	ldr	r3, [r7, #32]
   1538e:	429a      	cmp	r2, r3
   15390:	d9e4      	bls.n	1535c <str_count+0x170>
        }
    }

    return MP_OBJ_NEW_SMALL_INT(num_occurrences);
   15392:	69fb      	ldr	r3, [r7, #28]
   15394:	005b      	lsls	r3, r3, #1
   15396:	f043 0301 	orr.w	r3, r3, #1
}
   1539a:	4618      	mov	r0, r3
   1539c:	3730      	adds	r7, #48	; 0x30
   1539e:	46bd      	mov	sp, r7
   153a0:	bd80      	pop	{r7, pc}
   153a2:	bf00      	nop
   153a4:	00012d2f 	.word	0x00012d2f
   153a8:	00025390 	.word	0x00025390
   153ac:	000258dc 	.word	0x000258dc
   153b0:	000252f4 	.word	0x000252f4
   153b4:	0002511c 	.word	0x0002511c

000153b8 <str_caseconv>:
}
MP_DEFINE_CONST_FUN_OBJ_2(str_rpartition_obj, str_rpartition);
#endif

// Supposedly not too critical operations, so optimize for code size
STATIC mp_obj_t str_caseconv(unichar (*op)(unichar), mp_obj_t self_in) {
   153b8:	b590      	push	{r4, r7, lr}
   153ba:	b08b      	sub	sp, #44	; 0x2c
   153bc:	af00      	add	r7, sp, #0
   153be:	6078      	str	r0, [r7, #4]
   153c0:	6039      	str	r1, [r7, #0]
    GET_STR_DATA_LEN(self_in, self_data, self_len);
   153c2:	6838      	ldr	r0, [r7, #0]
   153c4:	f7fd f95e 	bl	12684 <MP_OBJ_IS_QSTR>
   153c8:	4603      	mov	r3, r0
   153ca:	2b00      	cmp	r3, #0
   153cc:	d009      	beq.n	153e2 <str_caseconv+0x2a>
   153ce:	683b      	ldr	r3, [r7, #0]
   153d0:	089b      	lsrs	r3, r3, #2
   153d2:	f107 0218 	add.w	r2, r7, #24
   153d6:	4611      	mov	r1, r2
   153d8:	4618      	mov	r0, r3
   153da:	f7ec f807 	bl	13ec <qstr_data>
   153de:	6278      	str	r0, [r7, #36]	; 0x24
   153e0:	e005      	b.n	153ee <str_caseconv+0x36>
   153e2:	683b      	ldr	r3, [r7, #0]
   153e4:	689b      	ldr	r3, [r3, #8]
   153e6:	61bb      	str	r3, [r7, #24]
   153e8:	683b      	ldr	r3, [r7, #0]
   153ea:	68db      	ldr	r3, [r3, #12]
   153ec:	627b      	str	r3, [r7, #36]	; 0x24
    vstr_t vstr;
    vstr_init_len(&vstr, self_len);
   153ee:	69ba      	ldr	r2, [r7, #24]
   153f0:	f107 0308 	add.w	r3, r7, #8
   153f4:	4611      	mov	r1, r2
   153f6:	4618      	mov	r0, r3
   153f8:	f7ec f891 	bl	151e <vstr_init_len>
    byte *data = (byte*)vstr.buf;
   153fc:	693b      	ldr	r3, [r7, #16]
   153fe:	623b      	str	r3, [r7, #32]
    for (size_t i = 0; i < self_len; i++) {
   15400:	2300      	movs	r3, #0
   15402:	61fb      	str	r3, [r7, #28]
   15404:	e010      	b.n	15428 <str_caseconv+0x70>
        *data++ = op(*self_data++);
   15406:	6a3c      	ldr	r4, [r7, #32]
   15408:	1c63      	adds	r3, r4, #1
   1540a:	623b      	str	r3, [r7, #32]
   1540c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1540e:	1c5a      	adds	r2, r3, #1
   15410:	627a      	str	r2, [r7, #36]	; 0x24
   15412:	781b      	ldrb	r3, [r3, #0]
   15414:	461a      	mov	r2, r3
   15416:	687b      	ldr	r3, [r7, #4]
   15418:	4610      	mov	r0, r2
   1541a:	4798      	blx	r3
   1541c:	4603      	mov	r3, r0
   1541e:	b2db      	uxtb	r3, r3
   15420:	7023      	strb	r3, [r4, #0]
    for (size_t i = 0; i < self_len; i++) {
   15422:	69fb      	ldr	r3, [r7, #28]
   15424:	3301      	adds	r3, #1
   15426:	61fb      	str	r3, [r7, #28]
   15428:	69bb      	ldr	r3, [r7, #24]
   1542a:	69fa      	ldr	r2, [r7, #28]
   1542c:	429a      	cmp	r2, r3
   1542e:	d3ea      	bcc.n	15406 <str_caseconv+0x4e>
    }
    return mp_obj_new_str_from_vstr(mp_obj_get_type(self_in), &vstr);
   15430:	6838      	ldr	r0, [r7, #0]
   15432:	f7f8 fc13 	bl	dc5c <mp_obj_get_type>
   15436:	4602      	mov	r2, r0
   15438:	f107 0308 	add.w	r3, r7, #8
   1543c:	4619      	mov	r1, r3
   1543e:	4610      	mov	r0, r2
   15440:	f000 f98b 	bl	1575a <mp_obj_new_str_from_vstr>
   15444:	4603      	mov	r3, r0
}
   15446:	4618      	mov	r0, r3
   15448:	372c      	adds	r7, #44	; 0x2c
   1544a:	46bd      	mov	sp, r7
   1544c:	bd90      	pop	{r4, r7, pc}

0001544e <str_lower>:

STATIC mp_obj_t str_lower(mp_obj_t self_in) {
   1544e:	b580      	push	{r7, lr}
   15450:	b082      	sub	sp, #8
   15452:	af00      	add	r7, sp, #0
   15454:	6078      	str	r0, [r7, #4]
    return str_caseconv(unichar_tolower, self_in);
   15456:	6879      	ldr	r1, [r7, #4]
   15458:	4803      	ldr	r0, [pc, #12]	; (15468 <str_lower+0x1a>)
   1545a:	f7ff ffad 	bl	153b8 <str_caseconv>
   1545e:	4603      	mov	r3, r0
}
   15460:	4618      	mov	r0, r3
   15462:	3708      	adds	r7, #8
   15464:	46bd      	mov	sp, r7
   15466:	bd80      	pop	{r7, pc}
   15468:	000026f5 	.word	0x000026f5

0001546c <str_upper>:
MP_DEFINE_CONST_FUN_OBJ_1(str_lower_obj, str_lower);

STATIC mp_obj_t str_upper(mp_obj_t self_in) {
   1546c:	b580      	push	{r7, lr}
   1546e:	b082      	sub	sp, #8
   15470:	af00      	add	r7, sp, #0
   15472:	6078      	str	r0, [r7, #4]
    return str_caseconv(unichar_toupper, self_in);
   15474:	6879      	ldr	r1, [r7, #4]
   15476:	4804      	ldr	r0, [pc, #16]	; (15488 <str_upper+0x1c>)
   15478:	f7ff ff9e 	bl	153b8 <str_caseconv>
   1547c:	4603      	mov	r3, r0
}
   1547e:	4618      	mov	r0, r3
   15480:	3708      	adds	r7, #8
   15482:	46bd      	mov	sp, r7
   15484:	bd80      	pop	{r7, pc}
   15486:	bf00      	nop
   15488:	00002719 	.word	0x00002719

0001548c <str_uni_istype>:
MP_DEFINE_CONST_FUN_OBJ_1(str_upper_obj, str_upper);

STATIC mp_obj_t str_uni_istype(bool (*f)(unichar), mp_obj_t self_in) {
   1548c:	b580      	push	{r7, lr}
   1548e:	b088      	sub	sp, #32
   15490:	af00      	add	r7, sp, #0
   15492:	6078      	str	r0, [r7, #4]
   15494:	6039      	str	r1, [r7, #0]
    GET_STR_DATA_LEN(self_in, self_data, self_len);
   15496:	6838      	ldr	r0, [r7, #0]
   15498:	f7fd f8f4 	bl	12684 <MP_OBJ_IS_QSTR>
   1549c:	4603      	mov	r3, r0
   1549e:	2b00      	cmp	r3, #0
   154a0:	d009      	beq.n	154b6 <str_uni_istype+0x2a>
   154a2:	683b      	ldr	r3, [r7, #0]
   154a4:	089b      	lsrs	r3, r3, #2
   154a6:	f107 020c 	add.w	r2, r7, #12
   154aa:	4611      	mov	r1, r2
   154ac:	4618      	mov	r0, r3
   154ae:	f7eb ff9d 	bl	13ec <qstr_data>
   154b2:	61f8      	str	r0, [r7, #28]
   154b4:	e005      	b.n	154c2 <str_uni_istype+0x36>
   154b6:	683b      	ldr	r3, [r7, #0]
   154b8:	689b      	ldr	r3, [r3, #8]
   154ba:	60fb      	str	r3, [r7, #12]
   154bc:	683b      	ldr	r3, [r7, #0]
   154be:	68db      	ldr	r3, [r3, #12]
   154c0:	61fb      	str	r3, [r7, #28]

    if (self_len == 0) {
   154c2:	68fb      	ldr	r3, [r7, #12]
   154c4:	2b00      	cmp	r3, #0
   154c6:	d101      	bne.n	154cc <str_uni_istype+0x40>
        return mp_const_false; // default to False for empty str
   154c8:	4b2c      	ldr	r3, [pc, #176]	; (1557c <str_uni_istype+0xf0>)
   154ca:	e052      	b.n	15572 <str_uni_istype+0xe6>
    }

    if (f != unichar_isupper && f != unichar_islower) {
   154cc:	687b      	ldr	r3, [r7, #4]
   154ce:	4a2c      	ldr	r2, [pc, #176]	; (15580 <str_uni_istype+0xf4>)
   154d0:	4293      	cmp	r3, r2
   154d2:	d01e      	beq.n	15512 <str_uni_istype+0x86>
   154d4:	687b      	ldr	r3, [r7, #4]
   154d6:	4a2b      	ldr	r2, [pc, #172]	; (15584 <str_uni_istype+0xf8>)
   154d8:	4293      	cmp	r3, r2
   154da:	d01a      	beq.n	15512 <str_uni_istype+0x86>
        for (size_t i = 0; i < self_len; i++) {
   154dc:	2300      	movs	r3, #0
   154de:	61bb      	str	r3, [r7, #24]
   154e0:	e012      	b.n	15508 <str_uni_istype+0x7c>
            if (!f(*self_data++)) {
   154e2:	69fb      	ldr	r3, [r7, #28]
   154e4:	1c5a      	adds	r2, r3, #1
   154e6:	61fa      	str	r2, [r7, #28]
   154e8:	781b      	ldrb	r3, [r3, #0]
   154ea:	461a      	mov	r2, r3
   154ec:	687b      	ldr	r3, [r7, #4]
   154ee:	4610      	mov	r0, r2
   154f0:	4798      	blx	r3
   154f2:	4603      	mov	r3, r0
   154f4:	f083 0301 	eor.w	r3, r3, #1
   154f8:	b2db      	uxtb	r3, r3
   154fa:	2b00      	cmp	r3, #0
   154fc:	d001      	beq.n	15502 <str_uni_istype+0x76>
                return mp_const_false;
   154fe:	4b1f      	ldr	r3, [pc, #124]	; (1557c <str_uni_istype+0xf0>)
   15500:	e037      	b.n	15572 <str_uni_istype+0xe6>
        for (size_t i = 0; i < self_len; i++) {
   15502:	69bb      	ldr	r3, [r7, #24]
   15504:	3301      	adds	r3, #1
   15506:	61bb      	str	r3, [r7, #24]
   15508:	68fb      	ldr	r3, [r7, #12]
   1550a:	69ba      	ldr	r2, [r7, #24]
   1550c:	429a      	cmp	r2, r3
   1550e:	d3e8      	bcc.n	154e2 <str_uni_istype+0x56>
   15510:	e02e      	b.n	15570 <str_uni_istype+0xe4>
            }
        }
    } else {
        bool contains_alpha = false;
   15512:	2300      	movs	r3, #0
   15514:	75fb      	strb	r3, [r7, #23]

        for (size_t i = 0; i < self_len; i++) { // only check alphanumeric characters
   15516:	2300      	movs	r3, #0
   15518:	613b      	str	r3, [r7, #16]
   1551a:	e01d      	b.n	15558 <str_uni_istype+0xcc>
            if (unichar_isalpha(*self_data++)) {
   1551c:	69fb      	ldr	r3, [r7, #28]
   1551e:	1c5a      	adds	r2, r3, #1
   15520:	61fa      	str	r2, [r7, #28]
   15522:	781b      	ldrb	r3, [r3, #0]
   15524:	4618      	mov	r0, r3
   15526:	f7ed f82f 	bl	2588 <unichar_isalpha>
   1552a:	4603      	mov	r3, r0
   1552c:	2b00      	cmp	r3, #0
   1552e:	d010      	beq.n	15552 <str_uni_istype+0xc6>
                contains_alpha = true;
   15530:	2301      	movs	r3, #1
   15532:	75fb      	strb	r3, [r7, #23]
                if (!f(*(self_data - 1))) { // -1 because we already incremented above
   15534:	69fb      	ldr	r3, [r7, #28]
   15536:	3b01      	subs	r3, #1
   15538:	781b      	ldrb	r3, [r3, #0]
   1553a:	461a      	mov	r2, r3
   1553c:	687b      	ldr	r3, [r7, #4]
   1553e:	4610      	mov	r0, r2
   15540:	4798      	blx	r3
   15542:	4603      	mov	r3, r0
   15544:	f083 0301 	eor.w	r3, r3, #1
   15548:	b2db      	uxtb	r3, r3
   1554a:	2b00      	cmp	r3, #0
   1554c:	d001      	beq.n	15552 <str_uni_istype+0xc6>
                    return mp_const_false;
   1554e:	4b0b      	ldr	r3, [pc, #44]	; (1557c <str_uni_istype+0xf0>)
   15550:	e00f      	b.n	15572 <str_uni_istype+0xe6>
        for (size_t i = 0; i < self_len; i++) { // only check alphanumeric characters
   15552:	693b      	ldr	r3, [r7, #16]
   15554:	3301      	adds	r3, #1
   15556:	613b      	str	r3, [r7, #16]
   15558:	68fb      	ldr	r3, [r7, #12]
   1555a:	693a      	ldr	r2, [r7, #16]
   1555c:	429a      	cmp	r2, r3
   1555e:	d3dd      	bcc.n	1551c <str_uni_istype+0x90>
                }
            }
        }

        if (!contains_alpha) {
   15560:	7dfb      	ldrb	r3, [r7, #23]
   15562:	f083 0301 	eor.w	r3, r3, #1
   15566:	b2db      	uxtb	r3, r3
   15568:	2b00      	cmp	r3, #0
   1556a:	d001      	beq.n	15570 <str_uni_istype+0xe4>
            return mp_const_false;
   1556c:	4b03      	ldr	r3, [pc, #12]	; (1557c <str_uni_istype+0xf0>)
   1556e:	e000      	b.n	15572 <str_uni_istype+0xe6>
        }
    }

    return mp_const_true;
   15570:	4b05      	ldr	r3, [pc, #20]	; (15588 <str_uni_istype+0xfc>)
}
   15572:	4618      	mov	r0, r3
   15574:	3720      	adds	r7, #32
   15576:	46bd      	mov	sp, r7
   15578:	bd80      	pop	{r7, pc}
   1557a:	bf00      	nop
   1557c:	00023860 	.word	0x00023860
   15580:	0000267d 	.word	0x0000267d
   15584:	000026b9 	.word	0x000026b9
   15588:	00023868 	.word	0x00023868

0001558c <str_isspace>:

STATIC mp_obj_t str_isspace(mp_obj_t self_in) {
   1558c:	b580      	push	{r7, lr}
   1558e:	b082      	sub	sp, #8
   15590:	af00      	add	r7, sp, #0
   15592:	6078      	str	r0, [r7, #4]
    return str_uni_istype(unichar_isspace, self_in);
   15594:	6879      	ldr	r1, [r7, #4]
   15596:	4804      	ldr	r0, [pc, #16]	; (155a8 <str_isspace+0x1c>)
   15598:	f7ff ff78 	bl	1548c <str_uni_istype>
   1559c:	4603      	mov	r3, r0
}
   1559e:	4618      	mov	r0, r3
   155a0:	3708      	adds	r7, #8
   155a2:	46bd      	mov	sp, r7
   155a4:	bd80      	pop	{r7, pc}
   155a6:	bf00      	nop
   155a8:	0000254d 	.word	0x0000254d

000155ac <str_isalpha>:
MP_DEFINE_CONST_FUN_OBJ_1(str_isspace_obj, str_isspace);

STATIC mp_obj_t str_isalpha(mp_obj_t self_in) {
   155ac:	b580      	push	{r7, lr}
   155ae:	b082      	sub	sp, #8
   155b0:	af00      	add	r7, sp, #0
   155b2:	6078      	str	r0, [r7, #4]
    return str_uni_istype(unichar_isalpha, self_in);
   155b4:	6879      	ldr	r1, [r7, #4]
   155b6:	4804      	ldr	r0, [pc, #16]	; (155c8 <str_isalpha+0x1c>)
   155b8:	f7ff ff68 	bl	1548c <str_uni_istype>
   155bc:	4603      	mov	r3, r0
}
   155be:	4618      	mov	r0, r3
   155c0:	3708      	adds	r7, #8
   155c2:	46bd      	mov	sp, r7
   155c4:	bd80      	pop	{r7, pc}
   155c6:	bf00      	nop
   155c8:	00002589 	.word	0x00002589

000155cc <str_isdigit>:
MP_DEFINE_CONST_FUN_OBJ_1(str_isalpha_obj, str_isalpha);

STATIC mp_obj_t str_isdigit(mp_obj_t self_in) {
   155cc:	b580      	push	{r7, lr}
   155ce:	b082      	sub	sp, #8
   155d0:	af00      	add	r7, sp, #0
   155d2:	6078      	str	r0, [r7, #4]
    return str_uni_istype(unichar_isdigit, self_in);
   155d4:	6879      	ldr	r1, [r7, #4]
   155d6:	4804      	ldr	r0, [pc, #16]	; (155e8 <str_isdigit+0x1c>)
   155d8:	f7ff ff58 	bl	1548c <str_uni_istype>
   155dc:	4603      	mov	r3, r0
}
   155de:	4618      	mov	r0, r3
   155e0:	3708      	adds	r7, #8
   155e2:	46bd      	mov	sp, r7
   155e4:	bd80      	pop	{r7, pc}
   155e6:	bf00      	nop
   155e8:	000025c5 	.word	0x000025c5

000155ec <str_isupper>:
MP_DEFINE_CONST_FUN_OBJ_1(str_isdigit_obj, str_isdigit);

STATIC mp_obj_t str_isupper(mp_obj_t self_in) {
   155ec:	b580      	push	{r7, lr}
   155ee:	b082      	sub	sp, #8
   155f0:	af00      	add	r7, sp, #0
   155f2:	6078      	str	r0, [r7, #4]
    return str_uni_istype(unichar_isupper, self_in);
   155f4:	6879      	ldr	r1, [r7, #4]
   155f6:	4804      	ldr	r0, [pc, #16]	; (15608 <str_isupper+0x1c>)
   155f8:	f7ff ff48 	bl	1548c <str_uni_istype>
   155fc:	4603      	mov	r3, r0
}
   155fe:	4618      	mov	r0, r3
   15600:	3708      	adds	r7, #8
   15602:	46bd      	mov	sp, r7
   15604:	bd80      	pop	{r7, pc}
   15606:	bf00      	nop
   15608:	0000267d 	.word	0x0000267d

0001560c <str_islower>:
MP_DEFINE_CONST_FUN_OBJ_1(str_isupper_obj, str_isupper);

STATIC mp_obj_t str_islower(mp_obj_t self_in) {
   1560c:	b580      	push	{r7, lr}
   1560e:	b082      	sub	sp, #8
   15610:	af00      	add	r7, sp, #0
   15612:	6078      	str	r0, [r7, #4]
    return str_uni_istype(unichar_islower, self_in);
   15614:	6879      	ldr	r1, [r7, #4]
   15616:	4804      	ldr	r0, [pc, #16]	; (15628 <str_islower+0x1c>)
   15618:	f7ff ff38 	bl	1548c <str_uni_istype>
   1561c:	4603      	mov	r3, r0
}
   1561e:	4618      	mov	r0, r3
   15620:	3708      	adds	r7, #8
   15622:	46bd      	mov	sp, r7
   15624:	bd80      	pop	{r7, pc}
   15626:	bf00      	nop
   15628:	000026b9 	.word	0x000026b9

0001562c <mp_obj_str_get_buffer>:
    return bytes_make_new(NULL, n_args, 0, args);
}
MP_DEFINE_CONST_FUN_OBJ_VAR_BETWEEN(str_encode_obj, 1, 3, str_encode);
#endif

mp_int_t mp_obj_str_get_buffer(mp_obj_t self_in, mp_buffer_info_t *bufinfo, mp_uint_t flags) {
   1562c:	b580      	push	{r7, lr}
   1562e:	b086      	sub	sp, #24
   15630:	af00      	add	r7, sp, #0
   15632:	60f8      	str	r0, [r7, #12]
   15634:	60b9      	str	r1, [r7, #8]
   15636:	607a      	str	r2, [r7, #4]
    if (flags == MP_BUFFER_READ) {
   15638:	687b      	ldr	r3, [r7, #4]
   1563a:	2b01      	cmp	r3, #1
   1563c:	d120      	bne.n	15680 <mp_obj_str_get_buffer+0x54>
        GET_STR_DATA_LEN(self_in, str_data, str_len);
   1563e:	68f8      	ldr	r0, [r7, #12]
   15640:	f7fd f820 	bl	12684 <MP_OBJ_IS_QSTR>
   15644:	4603      	mov	r3, r0
   15646:	2b00      	cmp	r3, #0
   15648:	d009      	beq.n	1565e <mp_obj_str_get_buffer+0x32>
   1564a:	68fb      	ldr	r3, [r7, #12]
   1564c:	089b      	lsrs	r3, r3, #2
   1564e:	f107 0210 	add.w	r2, r7, #16
   15652:	4611      	mov	r1, r2
   15654:	4618      	mov	r0, r3
   15656:	f7eb fec9 	bl	13ec <qstr_data>
   1565a:	6178      	str	r0, [r7, #20]
   1565c:	e005      	b.n	1566a <mp_obj_str_get_buffer+0x3e>
   1565e:	68fb      	ldr	r3, [r7, #12]
   15660:	689b      	ldr	r3, [r3, #8]
   15662:	613b      	str	r3, [r7, #16]
   15664:	68fb      	ldr	r3, [r7, #12]
   15666:	68db      	ldr	r3, [r3, #12]
   15668:	617b      	str	r3, [r7, #20]
        bufinfo->buf = (void*)str_data;
   1566a:	68bb      	ldr	r3, [r7, #8]
   1566c:	697a      	ldr	r2, [r7, #20]
   1566e:	601a      	str	r2, [r3, #0]
        bufinfo->len = str_len;
   15670:	693a      	ldr	r2, [r7, #16]
   15672:	68bb      	ldr	r3, [r7, #8]
   15674:	605a      	str	r2, [r3, #4]
        bufinfo->typecode = 'B'; // bytes should be unsigned, so should unicode byte-access
   15676:	68bb      	ldr	r3, [r7, #8]
   15678:	2242      	movs	r2, #66	; 0x42
   1567a:	609a      	str	r2, [r3, #8]
        return 0;
   1567c:	2300      	movs	r3, #0
   1567e:	e00a      	b.n	15696 <mp_obj_str_get_buffer+0x6a>
    } else {
        // can't write to a string
        bufinfo->buf = NULL;
   15680:	68bb      	ldr	r3, [r7, #8]
   15682:	2200      	movs	r2, #0
   15684:	601a      	str	r2, [r3, #0]
        bufinfo->len = 0;
   15686:	68bb      	ldr	r3, [r7, #8]
   15688:	2200      	movs	r2, #0
   1568a:	605a      	str	r2, [r3, #4]
        bufinfo->typecode = -1;
   1568c:	68bb      	ldr	r3, [r7, #8]
   1568e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   15692:	609a      	str	r2, [r3, #8]
        return 1;
   15694:	2301      	movs	r3, #1
    }
}
   15696:	4618      	mov	r0, r3
   15698:	3718      	adds	r7, #24
   1569a:	46bd      	mov	sp, r7
   1569c:	bd80      	pop	{r7, pc}

0001569e <mp_obj_new_str_copy>:
const mp_obj_str_t mp_const_empty_bytes_obj = {{&mp_type_bytes}, 0, 0, (const byte*)""};

// Create a str/bytes object using the given data.  New memory is allocated and
// the data is copied across.  This function should only be used if the type is bytes,
// or if the type is str and the string data is known to be not interned.
mp_obj_t mp_obj_new_str_copy(const mp_obj_type_t *type, const byte* data, size_t len) {
   1569e:	b580      	push	{r7, lr}
   156a0:	b086      	sub	sp, #24
   156a2:	af00      	add	r7, sp, #0
   156a4:	60f8      	str	r0, [r7, #12]
   156a6:	60b9      	str	r1, [r7, #8]
   156a8:	607a      	str	r2, [r7, #4]
    mp_obj_str_t *o = m_new_obj(mp_obj_str_t);
   156aa:	2010      	movs	r0, #16
   156ac:	f7ea fe36 	bl	31c <m_malloc>
   156b0:	6178      	str	r0, [r7, #20]
    o->base.type = type;
   156b2:	697b      	ldr	r3, [r7, #20]
   156b4:	68fa      	ldr	r2, [r7, #12]
   156b6:	601a      	str	r2, [r3, #0]
    o->len = len;
   156b8:	697b      	ldr	r3, [r7, #20]
   156ba:	687a      	ldr	r2, [r7, #4]
   156bc:	609a      	str	r2, [r3, #8]
    if (data) {
   156be:	68bb      	ldr	r3, [r7, #8]
   156c0:	2b00      	cmp	r3, #0
   156c2:	d019      	beq.n	156f8 <mp_obj_new_str_copy+0x5a>
        o->hash = qstr_compute_hash(data, len);
   156c4:	6879      	ldr	r1, [r7, #4]
   156c6:	68b8      	ldr	r0, [r7, #8]
   156c8:	f7eb fc7a 	bl	fc0 <qstr_compute_hash>
   156cc:	4602      	mov	r2, r0
   156ce:	697b      	ldr	r3, [r7, #20]
   156d0:	605a      	str	r2, [r3, #4]
        byte *p = m_new(byte, len + 1);
   156d2:	687b      	ldr	r3, [r7, #4]
   156d4:	3301      	adds	r3, #1
   156d6:	4618      	mov	r0, r3
   156d8:	f7ea fe20 	bl	31c <m_malloc>
   156dc:	6138      	str	r0, [r7, #16]
        o->data = p;
   156de:	697b      	ldr	r3, [r7, #20]
   156e0:	693a      	ldr	r2, [r7, #16]
   156e2:	60da      	str	r2, [r3, #12]
        memcpy(p, data, len * sizeof(byte));
   156e4:	687a      	ldr	r2, [r7, #4]
   156e6:	68b9      	ldr	r1, [r7, #8]
   156e8:	6938      	ldr	r0, [r7, #16]
   156ea:	f008 ff21 	bl	1e530 <memcpy>
        p[len] = '\0'; // for now we add null for compatibility with C ASCIIZ strings
   156ee:	693a      	ldr	r2, [r7, #16]
   156f0:	687b      	ldr	r3, [r7, #4]
   156f2:	4413      	add	r3, r2
   156f4:	2200      	movs	r2, #0
   156f6:	701a      	strb	r2, [r3, #0]
    }
    return MP_OBJ_FROM_PTR(o);
   156f8:	697b      	ldr	r3, [r7, #20]
}
   156fa:	4618      	mov	r0, r3
   156fc:	3718      	adds	r7, #24
   156fe:	46bd      	mov	sp, r7
   15700:	bd80      	pop	{r7, pc}

00015702 <mp_obj_new_str_of_type>:

// Create a str/bytes object using the given data.  If the type is str and the string
// data is already interned, then a qstr object is returned.  Otherwise new memory is
// allocated for the object and the data is copied across.
mp_obj_t mp_obj_new_str_of_type(const mp_obj_type_t *type, const byte* data, size_t len) {
   15702:	b580      	push	{r7, lr}
   15704:	b084      	sub	sp, #16
   15706:	af00      	add	r7, sp, #0
   15708:	60f8      	str	r0, [r7, #12]
   1570a:	60b9      	str	r1, [r7, #8]
   1570c:	607a      	str	r2, [r7, #4]
    if (type == &mp_type_str) {
   1570e:	68fb      	ldr	r3, [r7, #12]
   15710:	4a08      	ldr	r2, [pc, #32]	; (15734 <mp_obj_new_str_of_type+0x32>)
   15712:	4293      	cmp	r3, r2
   15714:	d105      	bne.n	15722 <mp_obj_new_str_of_type+0x20>
        return mp_obj_new_str((const char*)data, len);
   15716:	6879      	ldr	r1, [r7, #4]
   15718:	68b8      	ldr	r0, [r7, #8]
   1571a:	f000 f881 	bl	15820 <mp_obj_new_str>
   1571e:	4603      	mov	r3, r0
   15720:	e004      	b.n	1572c <mp_obj_new_str_of_type+0x2a>
    } else {
        return mp_obj_new_bytes(data, len);
   15722:	6879      	ldr	r1, [r7, #4]
   15724:	68b8      	ldr	r0, [r7, #8]
   15726:	f000 f8d2 	bl	158ce <mp_obj_new_bytes>
   1572a:	4603      	mov	r3, r0
    }
}
   1572c:	4618      	mov	r0, r3
   1572e:	3710      	adds	r7, #16
   15730:	46bd      	mov	sp, r7
   15732:	bd80      	pop	{r7, pc}
   15734:	000257b0 	.word	0x000257b0

00015738 <mp_obj_new_str_via_qstr>:

// Create a str using a qstr to store the data; may use existing or new qstr.
mp_obj_t mp_obj_new_str_via_qstr(const char* data, size_t len) {
   15738:	b580      	push	{r7, lr}
   1573a:	b082      	sub	sp, #8
   1573c:	af00      	add	r7, sp, #0
   1573e:	6078      	str	r0, [r7, #4]
   15740:	6039      	str	r1, [r7, #0]
    return MP_OBJ_NEW_QSTR(qstr_from_strn(data, len));
   15742:	6839      	ldr	r1, [r7, #0]
   15744:	6878      	ldr	r0, [r7, #4]
   15746:	f7eb fd6a 	bl	121e <qstr_from_strn>
   1574a:	4603      	mov	r3, r0
   1574c:	009b      	lsls	r3, r3, #2
   1574e:	f043 0302 	orr.w	r3, r3, #2
}
   15752:	4618      	mov	r0, r3
   15754:	3708      	adds	r7, #8
   15756:	46bd      	mov	sp, r7
   15758:	bd80      	pop	{r7, pc}

0001575a <mp_obj_new_str_from_vstr>:

// Create a str/bytes object from the given vstr.  The vstr buffer is resized to
// the exact length required and then reused for the str/bytes object.  The vstr
// is cleared and can safely be passed to vstr_free if it was heap allocated.
mp_obj_t mp_obj_new_str_from_vstr(const mp_obj_type_t *type, vstr_t *vstr) {
   1575a:	b580      	push	{r7, lr}
   1575c:	b084      	sub	sp, #16
   1575e:	af00      	add	r7, sp, #0
   15760:	6078      	str	r0, [r7, #4]
   15762:	6039      	str	r1, [r7, #0]
    // if not a bytes object, look if a qstr with this data already exists
    if (type == &mp_type_str) {
   15764:	687b      	ldr	r3, [r7, #4]
   15766:	4a2d      	ldr	r2, [pc, #180]	; (1581c <mp_obj_new_str_from_vstr+0xc2>)
   15768:	4293      	cmp	r3, r2
   1576a:	d116      	bne.n	1579a <mp_obj_new_str_from_vstr+0x40>
        qstr q = qstr_find_strn(vstr->buf, vstr->len);
   1576c:	683b      	ldr	r3, [r7, #0]
   1576e:	689a      	ldr	r2, [r3, #8]
   15770:	683b      	ldr	r3, [r7, #0]
   15772:	685b      	ldr	r3, [r3, #4]
   15774:	4619      	mov	r1, r3
   15776:	4610      	mov	r0, r2
   15778:	f7eb fcee 	bl	1158 <qstr_find_strn>
   1577c:	60f8      	str	r0, [r7, #12]
        if (q != MP_QSTR_NULL) {
   1577e:	68fb      	ldr	r3, [r7, #12]
   15780:	2b00      	cmp	r3, #0
   15782:	d00a      	beq.n	1579a <mp_obj_new_str_from_vstr+0x40>
            vstr_clear(vstr);
   15784:	6838      	ldr	r0, [r7, #0]
   15786:	f7eb ff0d 	bl	15a4 <vstr_clear>
            vstr->alloc = 0;
   1578a:	683b      	ldr	r3, [r7, #0]
   1578c:	2200      	movs	r2, #0
   1578e:	601a      	str	r2, [r3, #0]
            return MP_OBJ_NEW_QSTR(q);
   15790:	68fb      	ldr	r3, [r7, #12]
   15792:	009b      	lsls	r3, r3, #2
   15794:	f043 0302 	orr.w	r3, r3, #2
   15798:	e03b      	b.n	15812 <mp_obj_new_str_from_vstr+0xb8>
        }
    }

    // make a new str/bytes object
    mp_obj_str_t *o = m_new_obj(mp_obj_str_t);
   1579a:	2010      	movs	r0, #16
   1579c:	f7ea fdbe 	bl	31c <m_malloc>
   157a0:	60b8      	str	r0, [r7, #8]
    o->base.type = type;
   157a2:	68bb      	ldr	r3, [r7, #8]
   157a4:	687a      	ldr	r2, [r7, #4]
   157a6:	601a      	str	r2, [r3, #0]
    o->len = vstr->len;
   157a8:	683b      	ldr	r3, [r7, #0]
   157aa:	685a      	ldr	r2, [r3, #4]
   157ac:	68bb      	ldr	r3, [r7, #8]
   157ae:	609a      	str	r2, [r3, #8]
    o->hash = qstr_compute_hash((byte*)vstr->buf, vstr->len);
   157b0:	683b      	ldr	r3, [r7, #0]
   157b2:	689a      	ldr	r2, [r3, #8]
   157b4:	683b      	ldr	r3, [r7, #0]
   157b6:	685b      	ldr	r3, [r3, #4]
   157b8:	4619      	mov	r1, r3
   157ba:	4610      	mov	r0, r2
   157bc:	f7eb fc00 	bl	fc0 <qstr_compute_hash>
   157c0:	4602      	mov	r2, r0
   157c2:	68bb      	ldr	r3, [r7, #8]
   157c4:	605a      	str	r2, [r3, #4]
    if (vstr->len + 1 == vstr->alloc) {
   157c6:	683b      	ldr	r3, [r7, #0]
   157c8:	685b      	ldr	r3, [r3, #4]
   157ca:	1c5a      	adds	r2, r3, #1
   157cc:	683b      	ldr	r3, [r7, #0]
   157ce:	681b      	ldr	r3, [r3, #0]
   157d0:	429a      	cmp	r2, r3
   157d2:	d104      	bne.n	157de <mp_obj_new_str_from_vstr+0x84>
        o->data = (byte*)vstr->buf;
   157d4:	683b      	ldr	r3, [r7, #0]
   157d6:	689a      	ldr	r2, [r3, #8]
   157d8:	68bb      	ldr	r3, [r7, #8]
   157da:	60da      	str	r2, [r3, #12]
   157dc:	e00b      	b.n	157f6 <mp_obj_new_str_from_vstr+0x9c>
    } else {
        o->data = (byte*)m_renew(char, vstr->buf, vstr->alloc, vstr->len + 1);
   157de:	683b      	ldr	r3, [r7, #0]
   157e0:	689a      	ldr	r2, [r3, #8]
   157e2:	683b      	ldr	r3, [r7, #0]
   157e4:	685b      	ldr	r3, [r3, #4]
   157e6:	3301      	adds	r3, #1
   157e8:	4619      	mov	r1, r3
   157ea:	4610      	mov	r0, r2
   157ec:	f7ea fdd7 	bl	39e <m_realloc>
   157f0:	4602      	mov	r2, r0
   157f2:	68bb      	ldr	r3, [r7, #8]
   157f4:	60da      	str	r2, [r3, #12]
    }
    ((byte*)o->data)[o->len] = '\0'; // add null byte
   157f6:	68bb      	ldr	r3, [r7, #8]
   157f8:	68da      	ldr	r2, [r3, #12]
   157fa:	68bb      	ldr	r3, [r7, #8]
   157fc:	689b      	ldr	r3, [r3, #8]
   157fe:	4413      	add	r3, r2
   15800:	2200      	movs	r2, #0
   15802:	701a      	strb	r2, [r3, #0]
    vstr->buf = NULL;
   15804:	683b      	ldr	r3, [r7, #0]
   15806:	2200      	movs	r2, #0
   15808:	609a      	str	r2, [r3, #8]
    vstr->alloc = 0;
   1580a:	683b      	ldr	r3, [r7, #0]
   1580c:	2200      	movs	r2, #0
   1580e:	601a      	str	r2, [r3, #0]
    return MP_OBJ_FROM_PTR(o);
   15810:	68bb      	ldr	r3, [r7, #8]
}
   15812:	4618      	mov	r0, r3
   15814:	3710      	adds	r7, #16
   15816:	46bd      	mov	sp, r7
   15818:	bd80      	pop	{r7, pc}
   1581a:	bf00      	nop
   1581c:	000257b0 	.word	0x000257b0

00015820 <mp_obj_new_str>:

mp_obj_t mp_obj_new_str(const char* data, size_t len) {
   15820:	b580      	push	{r7, lr}
   15822:	b084      	sub	sp, #16
   15824:	af00      	add	r7, sp, #0
   15826:	6078      	str	r0, [r7, #4]
   15828:	6039      	str	r1, [r7, #0]
    qstr q = qstr_find_strn(data, len);
   1582a:	6839      	ldr	r1, [r7, #0]
   1582c:	6878      	ldr	r0, [r7, #4]
   1582e:	f7eb fc93 	bl	1158 <qstr_find_strn>
   15832:	60f8      	str	r0, [r7, #12]
    if (q != MP_QSTR_NULL) {
   15834:	68fb      	ldr	r3, [r7, #12]
   15836:	2b00      	cmp	r3, #0
   15838:	d004      	beq.n	15844 <mp_obj_new_str+0x24>
        // qstr with this data already exists
        return MP_OBJ_NEW_QSTR(q);
   1583a:	68fb      	ldr	r3, [r7, #12]
   1583c:	009b      	lsls	r3, r3, #2
   1583e:	f043 0302 	orr.w	r3, r3, #2
   15842:	e005      	b.n	15850 <mp_obj_new_str+0x30>
    } else {
        // no existing qstr, don't make one
        return mp_obj_new_str_copy(&mp_type_str, (const byte*)data, len);
   15844:	683a      	ldr	r2, [r7, #0]
   15846:	6879      	ldr	r1, [r7, #4]
   15848:	4803      	ldr	r0, [pc, #12]	; (15858 <mp_obj_new_str+0x38>)
   1584a:	f7ff ff28 	bl	1569e <mp_obj_new_str_copy>
   1584e:	4603      	mov	r3, r0
    }
}
   15850:	4618      	mov	r0, r3
   15852:	3710      	adds	r7, #16
   15854:	46bd      	mov	sp, r7
   15856:	bd80      	pop	{r7, pc}
   15858:	000257b0 	.word	0x000257b0

0001585c <mp_obj_str_intern>:

mp_obj_t mp_obj_str_intern(mp_obj_t str) {
   1585c:	b580      	push	{r7, lr}
   1585e:	b084      	sub	sp, #16
   15860:	af00      	add	r7, sp, #0
   15862:	6078      	str	r0, [r7, #4]
    GET_STR_DATA_LEN(str, data, len);
   15864:	6878      	ldr	r0, [r7, #4]
   15866:	f7fc ff0d 	bl	12684 <MP_OBJ_IS_QSTR>
   1586a:	4603      	mov	r3, r0
   1586c:	2b00      	cmp	r3, #0
   1586e:	d009      	beq.n	15884 <mp_obj_str_intern+0x28>
   15870:	687b      	ldr	r3, [r7, #4]
   15872:	089b      	lsrs	r3, r3, #2
   15874:	f107 0208 	add.w	r2, r7, #8
   15878:	4611      	mov	r1, r2
   1587a:	4618      	mov	r0, r3
   1587c:	f7eb fdb6 	bl	13ec <qstr_data>
   15880:	60f8      	str	r0, [r7, #12]
   15882:	e005      	b.n	15890 <mp_obj_str_intern+0x34>
   15884:	687b      	ldr	r3, [r7, #4]
   15886:	689b      	ldr	r3, [r3, #8]
   15888:	60bb      	str	r3, [r7, #8]
   1588a:	687b      	ldr	r3, [r7, #4]
   1588c:	68db      	ldr	r3, [r3, #12]
   1588e:	60fb      	str	r3, [r7, #12]
    return mp_obj_new_str_via_qstr((const char*)data, len);
   15890:	68bb      	ldr	r3, [r7, #8]
   15892:	4619      	mov	r1, r3
   15894:	68f8      	ldr	r0, [r7, #12]
   15896:	f7ff ff4f 	bl	15738 <mp_obj_new_str_via_qstr>
   1589a:	4603      	mov	r3, r0
}
   1589c:	4618      	mov	r0, r3
   1589e:	3710      	adds	r7, #16
   158a0:	46bd      	mov	sp, r7
   158a2:	bd80      	pop	{r7, pc}

000158a4 <mp_obj_str_intern_checked>:

mp_obj_t mp_obj_str_intern_checked(mp_obj_t obj) {
   158a4:	b580      	push	{r7, lr}
   158a6:	b084      	sub	sp, #16
   158a8:	af00      	add	r7, sp, #0
   158aa:	6078      	str	r0, [r7, #4]
    size_t len;
    const char *data = mp_obj_str_get_data(obj, &len);
   158ac:	f107 0308 	add.w	r3, r7, #8
   158b0:	4619      	mov	r1, r3
   158b2:	6878      	ldr	r0, [r7, #4]
   158b4:	f000 f912 	bl	15adc <mp_obj_str_get_data>
   158b8:	60f8      	str	r0, [r7, #12]
    return mp_obj_new_str_via_qstr((const char*)data, len);
   158ba:	68bb      	ldr	r3, [r7, #8]
   158bc:	4619      	mov	r1, r3
   158be:	68f8      	ldr	r0, [r7, #12]
   158c0:	f7ff ff3a 	bl	15738 <mp_obj_new_str_via_qstr>
   158c4:	4603      	mov	r3, r0
}
   158c6:	4618      	mov	r0, r3
   158c8:	3710      	adds	r7, #16
   158ca:	46bd      	mov	sp, r7
   158cc:	bd80      	pop	{r7, pc}

000158ce <mp_obj_new_bytes>:

mp_obj_t mp_obj_new_bytes(const byte* data, size_t len) {
   158ce:	b580      	push	{r7, lr}
   158d0:	b082      	sub	sp, #8
   158d2:	af00      	add	r7, sp, #0
   158d4:	6078      	str	r0, [r7, #4]
   158d6:	6039      	str	r1, [r7, #0]
    return mp_obj_new_str_copy(&mp_type_bytes, data, len);
   158d8:	683a      	ldr	r2, [r7, #0]
   158da:	6879      	ldr	r1, [r7, #4]
   158dc:	4803      	ldr	r0, [pc, #12]	; (158ec <mp_obj_new_bytes+0x1e>)
   158de:	f7ff fede 	bl	1569e <mp_obj_new_str_copy>
   158e2:	4603      	mov	r3, r0
}
   158e4:	4618      	mov	r0, r3
   158e6:	3708      	adds	r7, #8
   158e8:	46bd      	mov	sp, r7
   158ea:	bd80      	pop	{r7, pc}
   158ec:	000257ec 	.word	0x000257ec

000158f0 <mp_obj_str_equal>:

bool mp_obj_str_equal(mp_obj_t s1, mp_obj_t s2) {
   158f0:	b580      	push	{r7, lr}
   158f2:	b088      	sub	sp, #32
   158f4:	af00      	add	r7, sp, #0
   158f6:	6078      	str	r0, [r7, #4]
   158f8:	6039      	str	r1, [r7, #0]
    if (MP_OBJ_IS_QSTR(s1) && MP_OBJ_IS_QSTR(s2)) {
   158fa:	6878      	ldr	r0, [r7, #4]
   158fc:	f7fc fec2 	bl	12684 <MP_OBJ_IS_QSTR>
   15900:	4603      	mov	r3, r0
   15902:	2b00      	cmp	r3, #0
   15904:	d00d      	beq.n	15922 <mp_obj_str_equal+0x32>
   15906:	6838      	ldr	r0, [r7, #0]
   15908:	f7fc febc 	bl	12684 <MP_OBJ_IS_QSTR>
   1590c:	4603      	mov	r3, r0
   1590e:	2b00      	cmp	r3, #0
   15910:	d007      	beq.n	15922 <mp_obj_str_equal+0x32>
        return s1 == s2;
   15912:	687a      	ldr	r2, [r7, #4]
   15914:	683b      	ldr	r3, [r7, #0]
   15916:	429a      	cmp	r2, r3
   15918:	bf0c      	ite	eq
   1591a:	2301      	moveq	r3, #1
   1591c:	2300      	movne	r3, #0
   1591e:	b2db      	uxtb	r3, r3
   15920:	e069      	b.n	159f6 <mp_obj_str_equal+0x106>
    } else {
        GET_STR_HASH(s1, h1);
   15922:	6878      	ldr	r0, [r7, #4]
   15924:	f7fc feae 	bl	12684 <MP_OBJ_IS_QSTR>
   15928:	4603      	mov	r3, r0
   1592a:	2b00      	cmp	r3, #0
   1592c:	d006      	beq.n	1593c <mp_obj_str_equal+0x4c>
   1592e:	687b      	ldr	r3, [r7, #4]
   15930:	089b      	lsrs	r3, r3, #2
   15932:	4618      	mov	r0, r3
   15934:	f7eb fd30 	bl	1398 <qstr_hash>
   15938:	61f8      	str	r0, [r7, #28]
   1593a:	e002      	b.n	15942 <mp_obj_str_equal+0x52>
   1593c:	687b      	ldr	r3, [r7, #4]
   1593e:	685b      	ldr	r3, [r3, #4]
   15940:	61fb      	str	r3, [r7, #28]
        GET_STR_HASH(s2, h2);
   15942:	6838      	ldr	r0, [r7, #0]
   15944:	f7fc fe9e 	bl	12684 <MP_OBJ_IS_QSTR>
   15948:	4603      	mov	r3, r0
   1594a:	2b00      	cmp	r3, #0
   1594c:	d006      	beq.n	1595c <mp_obj_str_equal+0x6c>
   1594e:	683b      	ldr	r3, [r7, #0]
   15950:	089b      	lsrs	r3, r3, #2
   15952:	4618      	mov	r0, r3
   15954:	f7eb fd20 	bl	1398 <qstr_hash>
   15958:	61b8      	str	r0, [r7, #24]
   1595a:	e002      	b.n	15962 <mp_obj_str_equal+0x72>
   1595c:	683b      	ldr	r3, [r7, #0]
   1595e:	685b      	ldr	r3, [r3, #4]
   15960:	61bb      	str	r3, [r7, #24]
        // If any of hashes is 0, it means it's not valid
        if (h1 != 0 && h2 != 0 && h1 != h2) {
   15962:	69fb      	ldr	r3, [r7, #28]
   15964:	2b00      	cmp	r3, #0
   15966:	d008      	beq.n	1597a <mp_obj_str_equal+0x8a>
   15968:	69bb      	ldr	r3, [r7, #24]
   1596a:	2b00      	cmp	r3, #0
   1596c:	d005      	beq.n	1597a <mp_obj_str_equal+0x8a>
   1596e:	69fa      	ldr	r2, [r7, #28]
   15970:	69bb      	ldr	r3, [r7, #24]
   15972:	429a      	cmp	r2, r3
   15974:	d001      	beq.n	1597a <mp_obj_str_equal+0x8a>
            return false;
   15976:	2300      	movs	r3, #0
   15978:	e03d      	b.n	159f6 <mp_obj_str_equal+0x106>
        }
        GET_STR_DATA_LEN(s1, d1, l1);
   1597a:	6878      	ldr	r0, [r7, #4]
   1597c:	f7fc fe82 	bl	12684 <MP_OBJ_IS_QSTR>
   15980:	4603      	mov	r3, r0
   15982:	2b00      	cmp	r3, #0
   15984:	d009      	beq.n	1599a <mp_obj_str_equal+0xaa>
   15986:	687b      	ldr	r3, [r7, #4]
   15988:	089b      	lsrs	r3, r3, #2
   1598a:	f107 020c 	add.w	r2, r7, #12
   1598e:	4611      	mov	r1, r2
   15990:	4618      	mov	r0, r3
   15992:	f7eb fd2b 	bl	13ec <qstr_data>
   15996:	6178      	str	r0, [r7, #20]
   15998:	e005      	b.n	159a6 <mp_obj_str_equal+0xb6>
   1599a:	687b      	ldr	r3, [r7, #4]
   1599c:	689b      	ldr	r3, [r3, #8]
   1599e:	60fb      	str	r3, [r7, #12]
   159a0:	687b      	ldr	r3, [r7, #4]
   159a2:	68db      	ldr	r3, [r3, #12]
   159a4:	617b      	str	r3, [r7, #20]
        GET_STR_DATA_LEN(s2, d2, l2);
   159a6:	6838      	ldr	r0, [r7, #0]
   159a8:	f7fc fe6c 	bl	12684 <MP_OBJ_IS_QSTR>
   159ac:	4603      	mov	r3, r0
   159ae:	2b00      	cmp	r3, #0
   159b0:	d009      	beq.n	159c6 <mp_obj_str_equal+0xd6>
   159b2:	683b      	ldr	r3, [r7, #0]
   159b4:	089b      	lsrs	r3, r3, #2
   159b6:	f107 0208 	add.w	r2, r7, #8
   159ba:	4611      	mov	r1, r2
   159bc:	4618      	mov	r0, r3
   159be:	f7eb fd15 	bl	13ec <qstr_data>
   159c2:	6138      	str	r0, [r7, #16]
   159c4:	e005      	b.n	159d2 <mp_obj_str_equal+0xe2>
   159c6:	683b      	ldr	r3, [r7, #0]
   159c8:	689b      	ldr	r3, [r3, #8]
   159ca:	60bb      	str	r3, [r7, #8]
   159cc:	683b      	ldr	r3, [r7, #0]
   159ce:	68db      	ldr	r3, [r3, #12]
   159d0:	613b      	str	r3, [r7, #16]
        if (l1 != l2) {
   159d2:	68fa      	ldr	r2, [r7, #12]
   159d4:	68bb      	ldr	r3, [r7, #8]
   159d6:	429a      	cmp	r2, r3
   159d8:	d001      	beq.n	159de <mp_obj_str_equal+0xee>
            return false;
   159da:	2300      	movs	r3, #0
   159dc:	e00b      	b.n	159f6 <mp_obj_str_equal+0x106>
        }
        return memcmp(d1, d2, l1) == 0;
   159de:	68fb      	ldr	r3, [r7, #12]
   159e0:	461a      	mov	r2, r3
   159e2:	6939      	ldr	r1, [r7, #16]
   159e4:	6978      	ldr	r0, [r7, #20]
   159e6:	f008 fe88 	bl	1e6fa <memcmp>
   159ea:	4603      	mov	r3, r0
   159ec:	2b00      	cmp	r3, #0
   159ee:	bf0c      	ite	eq
   159f0:	2301      	moveq	r3, #1
   159f2:	2300      	movne	r3, #0
   159f4:	b2db      	uxtb	r3, r3
    }
}
   159f6:	4618      	mov	r0, r3
   159f8:	3720      	adds	r7, #32
   159fa:	46bd      	mov	sp, r7
   159fc:	bd80      	pop	{r7, pc}

000159fe <bad_implicit_conversion>:

STATIC NORETURN void bad_implicit_conversion(mp_obj_t self_in) {
   159fe:	b580      	push	{r7, lr}
   15a00:	b082      	sub	sp, #8
   15a02:	af00      	add	r7, sp, #0
   15a04:	6078      	str	r0, [r7, #4]
    if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
        mp_raise_TypeError("can't convert to str implicitly");
   15a06:	4801      	ldr	r0, [pc, #4]	; (15a0c <bad_implicit_conversion+0xe>)
   15a08:	f7f7 fcc0 	bl	d38c <mp_raise_TypeError>
   15a0c:	0002583c 	.word	0x0002583c

00015a10 <mp_obj_str_get_qstr>:
    }
}

// use this if you will anyway convert the string to a qstr
// will be more efficient for the case where it's already a qstr
qstr mp_obj_str_get_qstr(mp_obj_t self_in) {
   15a10:	b580      	push	{r7, lr}
   15a12:	b084      	sub	sp, #16
   15a14:	af00      	add	r7, sp, #0
   15a16:	6078      	str	r0, [r7, #4]
    if (MP_OBJ_IS_QSTR(self_in)) {
   15a18:	6878      	ldr	r0, [r7, #4]
   15a1a:	f7fc fe33 	bl	12684 <MP_OBJ_IS_QSTR>
   15a1e:	4603      	mov	r3, r0
   15a20:	2b00      	cmp	r3, #0
   15a22:	d002      	beq.n	15a2a <mp_obj_str_get_qstr+0x1a>
        return MP_OBJ_QSTR_VALUE(self_in);
   15a24:	687b      	ldr	r3, [r7, #4]
   15a26:	089b      	lsrs	r3, r3, #2
   15a28:	e019      	b.n	15a5e <mp_obj_str_get_qstr+0x4e>
    } else if (MP_OBJ_IS_TYPE(self_in, &mp_type_str)) {
   15a2a:	6878      	ldr	r0, [r7, #4]
   15a2c:	f7fc fe3c 	bl	126a8 <MP_OBJ_IS_OBJ>
   15a30:	4603      	mov	r3, r0
   15a32:	2b00      	cmp	r3, #0
   15a34:	d010      	beq.n	15a58 <mp_obj_str_get_qstr+0x48>
   15a36:	687b      	ldr	r3, [r7, #4]
   15a38:	681b      	ldr	r3, [r3, #0]
   15a3a:	4a0b      	ldr	r2, [pc, #44]	; (15a68 <mp_obj_str_get_qstr+0x58>)
   15a3c:	4293      	cmp	r3, r2
   15a3e:	d10b      	bne.n	15a58 <mp_obj_str_get_qstr+0x48>
        mp_obj_str_t *self = MP_OBJ_TO_PTR(self_in);
   15a40:	687b      	ldr	r3, [r7, #4]
   15a42:	60fb      	str	r3, [r7, #12]
        return qstr_from_strn((char*)self->data, self->len);
   15a44:	68fb      	ldr	r3, [r7, #12]
   15a46:	68da      	ldr	r2, [r3, #12]
   15a48:	68fb      	ldr	r3, [r7, #12]
   15a4a:	689b      	ldr	r3, [r3, #8]
   15a4c:	4619      	mov	r1, r3
   15a4e:	4610      	mov	r0, r2
   15a50:	f7eb fbe5 	bl	121e <qstr_from_strn>
   15a54:	4603      	mov	r3, r0
   15a56:	e002      	b.n	15a5e <mp_obj_str_get_qstr+0x4e>
    } else {
        bad_implicit_conversion(self_in);
   15a58:	6878      	ldr	r0, [r7, #4]
   15a5a:	f7ff ffd0 	bl	159fe <bad_implicit_conversion>
    }
}
   15a5e:	4618      	mov	r0, r3
   15a60:	3710      	adds	r7, #16
   15a62:	46bd      	mov	sp, r7
   15a64:	bd80      	pop	{r7, pc}
   15a66:	bf00      	nop
   15a68:	000257b0 	.word	0x000257b0

00015a6c <mp_obj_str_get_str>:

// only use this function if you need the str data to be zero terminated
// at the moment all strings are zero terminated to help with C ASCIIZ compatibility
const char *mp_obj_str_get_str(mp_obj_t self_in) {
   15a6c:	b580      	push	{r7, lr}
   15a6e:	b084      	sub	sp, #16
   15a70:	af00      	add	r7, sp, #0
   15a72:	6078      	str	r0, [r7, #4]
    if (MP_OBJ_IS_STR_OR_BYTES(self_in)) {
   15a74:	6878      	ldr	r0, [r7, #4]
   15a76:	f7fc fe05 	bl	12684 <MP_OBJ_IS_QSTR>
   15a7a:	4603      	mov	r3, r0
   15a7c:	2b00      	cmp	r3, #0
   15a7e:	d10b      	bne.n	15a98 <mp_obj_str_get_str+0x2c>
   15a80:	6878      	ldr	r0, [r7, #4]
   15a82:	f7fc fe11 	bl	126a8 <MP_OBJ_IS_OBJ>
   15a86:	4603      	mov	r3, r0
   15a88:	2b00      	cmp	r3, #0
   15a8a:	d01d      	beq.n	15ac8 <mp_obj_str_get_str+0x5c>
   15a8c:	687b      	ldr	r3, [r7, #4]
   15a8e:	681b      	ldr	r3, [r3, #0]
   15a90:	699b      	ldr	r3, [r3, #24]
   15a92:	4a11      	ldr	r2, [pc, #68]	; (15ad8 <mp_obj_str_get_str+0x6c>)
   15a94:	4293      	cmp	r3, r2
   15a96:	d117      	bne.n	15ac8 <mp_obj_str_get_str+0x5c>
        GET_STR_DATA_LEN(self_in, s, l);
   15a98:	6878      	ldr	r0, [r7, #4]
   15a9a:	f7fc fdf3 	bl	12684 <MP_OBJ_IS_QSTR>
   15a9e:	4603      	mov	r3, r0
   15aa0:	2b00      	cmp	r3, #0
   15aa2:	d009      	beq.n	15ab8 <mp_obj_str_get_str+0x4c>
   15aa4:	687b      	ldr	r3, [r7, #4]
   15aa6:	089b      	lsrs	r3, r3, #2
   15aa8:	f107 0208 	add.w	r2, r7, #8
   15aac:	4611      	mov	r1, r2
   15aae:	4618      	mov	r0, r3
   15ab0:	f7eb fc9c 	bl	13ec <qstr_data>
   15ab4:	60f8      	str	r0, [r7, #12]
   15ab6:	e005      	b.n	15ac4 <mp_obj_str_get_str+0x58>
   15ab8:	687b      	ldr	r3, [r7, #4]
   15aba:	689b      	ldr	r3, [r3, #8]
   15abc:	60bb      	str	r3, [r7, #8]
   15abe:	687b      	ldr	r3, [r7, #4]
   15ac0:	68db      	ldr	r3, [r3, #12]
   15ac2:	60fb      	str	r3, [r7, #12]
        (void)l; // len unused
        return (const char*)s;
   15ac4:	68fb      	ldr	r3, [r7, #12]
   15ac6:	e002      	b.n	15ace <mp_obj_str_get_str+0x62>
    } else {
        bad_implicit_conversion(self_in);
   15ac8:	6878      	ldr	r0, [r7, #4]
   15aca:	f7ff ff98 	bl	159fe <bad_implicit_conversion>
    }
}
   15ace:	4618      	mov	r0, r3
   15ad0:	3710      	adds	r7, #16
   15ad2:	46bd      	mov	sp, r7
   15ad4:	bd80      	pop	{r7, pc}
   15ad6:	bf00      	nop
   15ad8:	00012d2f 	.word	0x00012d2f

00015adc <mp_obj_str_get_data>:

const char *mp_obj_str_get_data(mp_obj_t self_in, size_t *len) {
   15adc:	b580      	push	{r7, lr}
   15ade:	b084      	sub	sp, #16
   15ae0:	af00      	add	r7, sp, #0
   15ae2:	6078      	str	r0, [r7, #4]
   15ae4:	6039      	str	r1, [r7, #0]
    if (MP_OBJ_IS_STR_OR_BYTES(self_in)) {
   15ae6:	6878      	ldr	r0, [r7, #4]
   15ae8:	f7fc fdcc 	bl	12684 <MP_OBJ_IS_QSTR>
   15aec:	4603      	mov	r3, r0
   15aee:	2b00      	cmp	r3, #0
   15af0:	d10b      	bne.n	15b0a <mp_obj_str_get_data+0x2e>
   15af2:	6878      	ldr	r0, [r7, #4]
   15af4:	f7fc fdd8 	bl	126a8 <MP_OBJ_IS_OBJ>
   15af8:	4603      	mov	r3, r0
   15afa:	2b00      	cmp	r3, #0
   15afc:	d020      	beq.n	15b40 <mp_obj_str_get_data+0x64>
   15afe:	687b      	ldr	r3, [r7, #4]
   15b00:	681b      	ldr	r3, [r3, #0]
   15b02:	699b      	ldr	r3, [r3, #24]
   15b04:	4a12      	ldr	r2, [pc, #72]	; (15b50 <mp_obj_str_get_data+0x74>)
   15b06:	4293      	cmp	r3, r2
   15b08:	d11a      	bne.n	15b40 <mp_obj_str_get_data+0x64>
        GET_STR_DATA_LEN(self_in, s, l);
   15b0a:	6878      	ldr	r0, [r7, #4]
   15b0c:	f7fc fdba 	bl	12684 <MP_OBJ_IS_QSTR>
   15b10:	4603      	mov	r3, r0
   15b12:	2b00      	cmp	r3, #0
   15b14:	d009      	beq.n	15b2a <mp_obj_str_get_data+0x4e>
   15b16:	687b      	ldr	r3, [r7, #4]
   15b18:	089b      	lsrs	r3, r3, #2
   15b1a:	f107 0208 	add.w	r2, r7, #8
   15b1e:	4611      	mov	r1, r2
   15b20:	4618      	mov	r0, r3
   15b22:	f7eb fc63 	bl	13ec <qstr_data>
   15b26:	60f8      	str	r0, [r7, #12]
   15b28:	e005      	b.n	15b36 <mp_obj_str_get_data+0x5a>
   15b2a:	687b      	ldr	r3, [r7, #4]
   15b2c:	689b      	ldr	r3, [r3, #8]
   15b2e:	60bb      	str	r3, [r7, #8]
   15b30:	687b      	ldr	r3, [r7, #4]
   15b32:	68db      	ldr	r3, [r3, #12]
   15b34:	60fb      	str	r3, [r7, #12]
        *len = l;
   15b36:	68ba      	ldr	r2, [r7, #8]
   15b38:	683b      	ldr	r3, [r7, #0]
   15b3a:	601a      	str	r2, [r3, #0]
        return (const char*)s;
   15b3c:	68fb      	ldr	r3, [r7, #12]
   15b3e:	e002      	b.n	15b46 <mp_obj_str_get_data+0x6a>
    } else {
        bad_implicit_conversion(self_in);
   15b40:	6878      	ldr	r0, [r7, #4]
   15b42:	f7ff ff5c 	bl	159fe <bad_implicit_conversion>
    }
}
   15b46:	4618      	mov	r0, r3
   15b48:	3710      	adds	r7, #16
   15b4a:	46bd      	mov	sp, r7
   15b4c:	bd80      	pop	{r7, pc}
   15b4e:	bf00      	nop
   15b50:	00012d2f 	.word	0x00012d2f

00015b54 <str_it_iternext>:
    mp_obj_t str;
    size_t cur;
} mp_obj_str8_it_t;

#if !MICROPY_PY_BUILTINS_STR_UNICODE
STATIC mp_obj_t str_it_iternext(mp_obj_t self_in) {
   15b54:	b580      	push	{r7, lr}
   15b56:	b086      	sub	sp, #24
   15b58:	af00      	add	r7, sp, #0
   15b5a:	6078      	str	r0, [r7, #4]
    mp_obj_str8_it_t *self = MP_OBJ_TO_PTR(self_in);
   15b5c:	687b      	ldr	r3, [r7, #4]
   15b5e:	613b      	str	r3, [r7, #16]
    GET_STR_DATA_LEN(self->str, str, len);
   15b60:	693b      	ldr	r3, [r7, #16]
   15b62:	689b      	ldr	r3, [r3, #8]
   15b64:	4618      	mov	r0, r3
   15b66:	f7fc fd8d 	bl	12684 <MP_OBJ_IS_QSTR>
   15b6a:	4603      	mov	r3, r0
   15b6c:	2b00      	cmp	r3, #0
   15b6e:	d00a      	beq.n	15b86 <str_it_iternext+0x32>
   15b70:	693b      	ldr	r3, [r7, #16]
   15b72:	689b      	ldr	r3, [r3, #8]
   15b74:	089b      	lsrs	r3, r3, #2
   15b76:	f107 0208 	add.w	r2, r7, #8
   15b7a:	4611      	mov	r1, r2
   15b7c:	4618      	mov	r0, r3
   15b7e:	f7eb fc35 	bl	13ec <qstr_data>
   15b82:	6178      	str	r0, [r7, #20]
   15b84:	e007      	b.n	15b96 <str_it_iternext+0x42>
   15b86:	693b      	ldr	r3, [r7, #16]
   15b88:	689b      	ldr	r3, [r3, #8]
   15b8a:	689b      	ldr	r3, [r3, #8]
   15b8c:	60bb      	str	r3, [r7, #8]
   15b8e:	693b      	ldr	r3, [r7, #16]
   15b90:	689b      	ldr	r3, [r3, #8]
   15b92:	68db      	ldr	r3, [r3, #12]
   15b94:	617b      	str	r3, [r7, #20]
    if (self->cur < len) {
   15b96:	693b      	ldr	r3, [r7, #16]
   15b98:	68da      	ldr	r2, [r3, #12]
   15b9a:	68bb      	ldr	r3, [r7, #8]
   15b9c:	429a      	cmp	r2, r3
   15b9e:	d20f      	bcs.n	15bc0 <str_it_iternext+0x6c>
        mp_obj_t o_out = mp_obj_new_str_via_qstr((const char*)str + self->cur, 1);
   15ba0:	693b      	ldr	r3, [r7, #16]
   15ba2:	68db      	ldr	r3, [r3, #12]
   15ba4:	697a      	ldr	r2, [r7, #20]
   15ba6:	4413      	add	r3, r2
   15ba8:	2101      	movs	r1, #1
   15baa:	4618      	mov	r0, r3
   15bac:	f7ff fdc4 	bl	15738 <mp_obj_new_str_via_qstr>
   15bb0:	60f8      	str	r0, [r7, #12]
        self->cur += 1;
   15bb2:	693b      	ldr	r3, [r7, #16]
   15bb4:	68db      	ldr	r3, [r3, #12]
   15bb6:	1c5a      	adds	r2, r3, #1
   15bb8:	693b      	ldr	r3, [r7, #16]
   15bba:	60da      	str	r2, [r3, #12]
        return o_out;
   15bbc:	68fb      	ldr	r3, [r7, #12]
   15bbe:	e000      	b.n	15bc2 <str_it_iternext+0x6e>
    } else {
        return MP_OBJ_STOP_ITERATION;
   15bc0:	2304      	movs	r3, #4
    }
}
   15bc2:	4618      	mov	r0, r3
   15bc4:	3718      	adds	r7, #24
   15bc6:	46bd      	mov	sp, r7
   15bc8:	bd80      	pop	{r7, pc}

00015bca <mp_obj_new_str_iterator>:

STATIC mp_obj_t mp_obj_new_str_iterator(mp_obj_t str, mp_obj_iter_buf_t *iter_buf) {
   15bca:	b480      	push	{r7}
   15bcc:	b085      	sub	sp, #20
   15bce:	af00      	add	r7, sp, #0
   15bd0:	6078      	str	r0, [r7, #4]
   15bd2:	6039      	str	r1, [r7, #0]
    assert(sizeof(mp_obj_str8_it_t) <= sizeof(mp_obj_iter_buf_t));
    mp_obj_str8_it_t *o = (mp_obj_str8_it_t*)iter_buf;
   15bd4:	683b      	ldr	r3, [r7, #0]
   15bd6:	60fb      	str	r3, [r7, #12]
    o->base.type = &mp_type_polymorph_iter;
   15bd8:	68fb      	ldr	r3, [r7, #12]
   15bda:	4a09      	ldr	r2, [pc, #36]	; (15c00 <mp_obj_new_str_iterator+0x36>)
   15bdc:	601a      	str	r2, [r3, #0]
    o->iternext = str_it_iternext;
   15bde:	68fb      	ldr	r3, [r7, #12]
   15be0:	4a08      	ldr	r2, [pc, #32]	; (15c04 <mp_obj_new_str_iterator+0x3a>)
   15be2:	605a      	str	r2, [r3, #4]
    o->str = str;
   15be4:	68fb      	ldr	r3, [r7, #12]
   15be6:	687a      	ldr	r2, [r7, #4]
   15be8:	609a      	str	r2, [r3, #8]
    o->cur = 0;
   15bea:	68fb      	ldr	r3, [r7, #12]
   15bec:	2200      	movs	r2, #0
   15bee:	60da      	str	r2, [r3, #12]
    return MP_OBJ_FROM_PTR(o);
   15bf0:	68fb      	ldr	r3, [r7, #12]
}
   15bf2:	4618      	mov	r0, r3
   15bf4:	3714      	adds	r7, #20
   15bf6:	46bd      	mov	sp, r7
   15bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
   15bfc:	4770      	bx	lr
   15bfe:	bf00      	nop
   15c00:	0002509c 	.word	0x0002509c
   15c04:	00015b55 	.word	0x00015b55

00015c08 <bytes_it_iternext>:
#endif

STATIC mp_obj_t bytes_it_iternext(mp_obj_t self_in) {
   15c08:	b580      	push	{r7, lr}
   15c0a:	b086      	sub	sp, #24
   15c0c:	af00      	add	r7, sp, #0
   15c0e:	6078      	str	r0, [r7, #4]
    mp_obj_str8_it_t *self = MP_OBJ_TO_PTR(self_in);
   15c10:	687b      	ldr	r3, [r7, #4]
   15c12:	613b      	str	r3, [r7, #16]
    GET_STR_DATA_LEN(self->str, str, len);
   15c14:	693b      	ldr	r3, [r7, #16]
   15c16:	689b      	ldr	r3, [r3, #8]
   15c18:	4618      	mov	r0, r3
   15c1a:	f7fc fd33 	bl	12684 <MP_OBJ_IS_QSTR>
   15c1e:	4603      	mov	r3, r0
   15c20:	2b00      	cmp	r3, #0
   15c22:	d00a      	beq.n	15c3a <bytes_it_iternext+0x32>
   15c24:	693b      	ldr	r3, [r7, #16]
   15c26:	689b      	ldr	r3, [r3, #8]
   15c28:	089b      	lsrs	r3, r3, #2
   15c2a:	f107 0208 	add.w	r2, r7, #8
   15c2e:	4611      	mov	r1, r2
   15c30:	4618      	mov	r0, r3
   15c32:	f7eb fbdb 	bl	13ec <qstr_data>
   15c36:	6178      	str	r0, [r7, #20]
   15c38:	e007      	b.n	15c4a <bytes_it_iternext+0x42>
   15c3a:	693b      	ldr	r3, [r7, #16]
   15c3c:	689b      	ldr	r3, [r3, #8]
   15c3e:	689b      	ldr	r3, [r3, #8]
   15c40:	60bb      	str	r3, [r7, #8]
   15c42:	693b      	ldr	r3, [r7, #16]
   15c44:	689b      	ldr	r3, [r3, #8]
   15c46:	68db      	ldr	r3, [r3, #12]
   15c48:	617b      	str	r3, [r7, #20]
    if (self->cur < len) {
   15c4a:	693b      	ldr	r3, [r7, #16]
   15c4c:	68da      	ldr	r2, [r3, #12]
   15c4e:	68bb      	ldr	r3, [r7, #8]
   15c50:	429a      	cmp	r2, r3
   15c52:	d20f      	bcs.n	15c74 <bytes_it_iternext+0x6c>
        mp_obj_t o_out = MP_OBJ_NEW_SMALL_INT(str[self->cur]);
   15c54:	693b      	ldr	r3, [r7, #16]
   15c56:	68db      	ldr	r3, [r3, #12]
   15c58:	697a      	ldr	r2, [r7, #20]
   15c5a:	4413      	add	r3, r2
   15c5c:	781b      	ldrb	r3, [r3, #0]
   15c5e:	005b      	lsls	r3, r3, #1
   15c60:	f043 0301 	orr.w	r3, r3, #1
   15c64:	60fb      	str	r3, [r7, #12]
        self->cur += 1;
   15c66:	693b      	ldr	r3, [r7, #16]
   15c68:	68db      	ldr	r3, [r3, #12]
   15c6a:	1c5a      	adds	r2, r3, #1
   15c6c:	693b      	ldr	r3, [r7, #16]
   15c6e:	60da      	str	r2, [r3, #12]
        return o_out;
   15c70:	68fb      	ldr	r3, [r7, #12]
   15c72:	e000      	b.n	15c76 <bytes_it_iternext+0x6e>
    } else {
        return MP_OBJ_STOP_ITERATION;
   15c74:	2304      	movs	r3, #4
    }
}
   15c76:	4618      	mov	r0, r3
   15c78:	3718      	adds	r7, #24
   15c7a:	46bd      	mov	sp, r7
   15c7c:	bd80      	pop	{r7, pc}

00015c7e <mp_obj_new_bytes_iterator>:

mp_obj_t mp_obj_new_bytes_iterator(mp_obj_t str, mp_obj_iter_buf_t *iter_buf) {
   15c7e:	b480      	push	{r7}
   15c80:	b085      	sub	sp, #20
   15c82:	af00      	add	r7, sp, #0
   15c84:	6078      	str	r0, [r7, #4]
   15c86:	6039      	str	r1, [r7, #0]
    assert(sizeof(mp_obj_str8_it_t) <= sizeof(mp_obj_iter_buf_t));
    mp_obj_str8_it_t *o = (mp_obj_str8_it_t*)iter_buf;
   15c88:	683b      	ldr	r3, [r7, #0]
   15c8a:	60fb      	str	r3, [r7, #12]
    o->base.type = &mp_type_polymorph_iter;
   15c8c:	68fb      	ldr	r3, [r7, #12]
   15c8e:	4a09      	ldr	r2, [pc, #36]	; (15cb4 <mp_obj_new_bytes_iterator+0x36>)
   15c90:	601a      	str	r2, [r3, #0]
    o->iternext = bytes_it_iternext;
   15c92:	68fb      	ldr	r3, [r7, #12]
   15c94:	4a08      	ldr	r2, [pc, #32]	; (15cb8 <mp_obj_new_bytes_iterator+0x3a>)
   15c96:	605a      	str	r2, [r3, #4]
    o->str = str;
   15c98:	68fb      	ldr	r3, [r7, #12]
   15c9a:	687a      	ldr	r2, [r7, #4]
   15c9c:	609a      	str	r2, [r3, #8]
    o->cur = 0;
   15c9e:	68fb      	ldr	r3, [r7, #12]
   15ca0:	2200      	movs	r2, #0
   15ca2:	60da      	str	r2, [r3, #12]
    return MP_OBJ_FROM_PTR(o);
   15ca4:	68fb      	ldr	r3, [r7, #12]
}
   15ca6:	4618      	mov	r0, r3
   15ca8:	3714      	adds	r7, #20
   15caa:	46bd      	mov	sp, r7
   15cac:	f85d 7b04 	ldr.w	r7, [sp], #4
   15cb0:	4770      	bx	lr
   15cb2:	bf00      	nop
   15cb4:	0002509c 	.word	0x0002509c
   15cb8:	00015c09 	.word	0x00015c09

00015cbc <MP_OBJ_IS_OBJ>:
    { return ((((mp_int_t)(o)) & 3) == 0); }
   15cbc:	b480      	push	{r7}
   15cbe:	b083      	sub	sp, #12
   15cc0:	af00      	add	r7, sp, #0
   15cc2:	6078      	str	r0, [r7, #4]
   15cc4:	687b      	ldr	r3, [r7, #4]
   15cc6:	f003 0303 	and.w	r3, r3, #3
   15cca:	2b00      	cmp	r3, #0
   15ccc:	bf0c      	ite	eq
   15cce:	2301      	moveq	r3, #1
   15cd0:	2300      	movne	r3, #0
   15cd2:	b2db      	uxtb	r3, r3
   15cd4:	4618      	mov	r0, r3
   15cd6:	370c      	adds	r7, #12
   15cd8:	46bd      	mov	sp, r7
   15cda:	f85d 7b04 	ldr.w	r7, [sp], #4
   15cde:	4770      	bx	lr

00015ce0 <mp_obj_new_bool>:
static inline mp_obj_t mp_obj_new_bool(mp_int_t x) { return x ? mp_const_true : mp_const_false; }
   15ce0:	b480      	push	{r7}
   15ce2:	b083      	sub	sp, #12
   15ce4:	af00      	add	r7, sp, #0
   15ce6:	6078      	str	r0, [r7, #4]
   15ce8:	687b      	ldr	r3, [r7, #4]
   15cea:	2b00      	cmp	r3, #0
   15cec:	d001      	beq.n	15cf2 <mp_obj_new_bool+0x12>
   15cee:	4b04      	ldr	r3, [pc, #16]	; (15d00 <mp_obj_new_bool+0x20>)
   15cf0:	e000      	b.n	15cf4 <mp_obj_new_bool+0x14>
   15cf2:	4b04      	ldr	r3, [pc, #16]	; (15d04 <mp_obj_new_bool+0x24>)
   15cf4:	4618      	mov	r0, r3
   15cf6:	370c      	adds	r7, #12
   15cf8:	46bd      	mov	sp, r7
   15cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
   15cfe:	4770      	bx	lr
   15d00:	00023868 	.word	0x00023868
   15d04:	00023860 	.word	0x00023860

00015d08 <mp_arg_check_num>:
static inline void mp_arg_check_num(size_t n_args, size_t n_kw, size_t n_args_min, size_t n_args_max, bool takes_kw) {
   15d08:	b580      	push	{r7, lr}
   15d0a:	b084      	sub	sp, #16
   15d0c:	af00      	add	r7, sp, #0
   15d0e:	60f8      	str	r0, [r7, #12]
   15d10:	60b9      	str	r1, [r7, #8]
   15d12:	607a      	str	r2, [r7, #4]
   15d14:	603b      	str	r3, [r7, #0]
    mp_arg_check_num_sig(n_args, n_kw, (uint32_t)MP_OBJ_FUN_MAKE_SIG(n_args_min, n_args_max, takes_kw));
   15d16:	687b      	ldr	r3, [r7, #4]
   15d18:	045a      	lsls	r2, r3, #17
   15d1a:	683b      	ldr	r3, [r7, #0]
   15d1c:	005b      	lsls	r3, r3, #1
   15d1e:	431a      	orrs	r2, r3
   15d20:	7e3b      	ldrb	r3, [r7, #24]
   15d22:	2b00      	cmp	r3, #0
   15d24:	d001      	beq.n	15d2a <mp_arg_check_num+0x22>
   15d26:	2301      	movs	r3, #1
   15d28:	e000      	b.n	15d2c <mp_arg_check_num+0x24>
   15d2a:	2300      	movs	r3, #0
   15d2c:	4313      	orrs	r3, r2
   15d2e:	461a      	mov	r2, r3
   15d30:	68b9      	ldr	r1, [r7, #8]
   15d32:	68f8      	ldr	r0, [r7, #12]
   15d34:	f7f7 fb50 	bl	d3d8 <mp_arg_check_num_sig>
}
   15d38:	bf00      	nop
   15d3a:	3710      	adds	r7, #16
   15d3c:	46bd      	mov	sp, r7
   15d3e:	bd80      	pop	{r7, pc}

00015d40 <mp_obj_tuple_print>:
#include "py/runtime.h"

/******************************************************************************/
/* tuple                                                                      */

void mp_obj_tuple_print(const mp_print_t *print, mp_obj_t o_in, mp_print_kind_t kind) {
   15d40:	b580      	push	{r7, lr}
   15d42:	b086      	sub	sp, #24
   15d44:	af00      	add	r7, sp, #0
   15d46:	60f8      	str	r0, [r7, #12]
   15d48:	60b9      	str	r1, [r7, #8]
   15d4a:	607a      	str	r2, [r7, #4]
    mp_obj_tuple_t *o = MP_OBJ_TO_PTR(o_in);
   15d4c:	68bb      	ldr	r3, [r7, #8]
   15d4e:	613b      	str	r3, [r7, #16]
    if (MICROPY_PY_UJSON && kind == PRINT_JSON) {
        mp_print_str(print, "[");
    } else {
        mp_print_str(print, "(");
   15d50:	4918      	ldr	r1, [pc, #96]	; (15db4 <mp_obj_tuple_print+0x74>)
   15d52:	68f8      	ldr	r0, [r7, #12]
   15d54:	f7eb fe7a 	bl	1a4c <mp_print_str>
        kind = PRINT_REPR;
   15d58:	2301      	movs	r3, #1
   15d5a:	607b      	str	r3, [r7, #4]
    }
    for (size_t i = 0; i < o->len; i++) {
   15d5c:	2300      	movs	r3, #0
   15d5e:	617b      	str	r3, [r7, #20]
   15d60:	e013      	b.n	15d8a <mp_obj_tuple_print+0x4a>
        if (i > 0) {
   15d62:	697b      	ldr	r3, [r7, #20]
   15d64:	2b00      	cmp	r3, #0
   15d66:	d003      	beq.n	15d70 <mp_obj_tuple_print+0x30>
            mp_print_str(print, ", ");
   15d68:	4913      	ldr	r1, [pc, #76]	; (15db8 <mp_obj_tuple_print+0x78>)
   15d6a:	68f8      	ldr	r0, [r7, #12]
   15d6c:	f7eb fe6e 	bl	1a4c <mp_print_str>
        }
        mp_obj_print_helper(print, o->items[i], kind);
   15d70:	693b      	ldr	r3, [r7, #16]
   15d72:	697a      	ldr	r2, [r7, #20]
   15d74:	3202      	adds	r2, #2
   15d76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   15d7a:	687a      	ldr	r2, [r7, #4]
   15d7c:	4619      	mov	r1, r3
   15d7e:	68f8      	ldr	r0, [r7, #12]
   15d80:	f7f7 ff9d 	bl	dcbe <mp_obj_print_helper>
    for (size_t i = 0; i < o->len; i++) {
   15d84:	697b      	ldr	r3, [r7, #20]
   15d86:	3301      	adds	r3, #1
   15d88:	617b      	str	r3, [r7, #20]
   15d8a:	693b      	ldr	r3, [r7, #16]
   15d8c:	685a      	ldr	r2, [r3, #4]
   15d8e:	697b      	ldr	r3, [r7, #20]
   15d90:	429a      	cmp	r2, r3
   15d92:	d8e6      	bhi.n	15d62 <mp_obj_tuple_print+0x22>
    }
    if (MICROPY_PY_UJSON && kind == PRINT_JSON) {
        mp_print_str(print, "]");
    } else {
        if (o->len == 1) {
   15d94:	693b      	ldr	r3, [r7, #16]
   15d96:	685b      	ldr	r3, [r3, #4]
   15d98:	2b01      	cmp	r3, #1
   15d9a:	d103      	bne.n	15da4 <mp_obj_tuple_print+0x64>
            mp_print_str(print, ",");
   15d9c:	4907      	ldr	r1, [pc, #28]	; (15dbc <mp_obj_tuple_print+0x7c>)
   15d9e:	68f8      	ldr	r0, [r7, #12]
   15da0:	f7eb fe54 	bl	1a4c <mp_print_str>
        }
        mp_print_str(print, ")");
   15da4:	4906      	ldr	r1, [pc, #24]	; (15dc0 <mp_obj_tuple_print+0x80>)
   15da6:	68f8      	ldr	r0, [r7, #12]
   15da8:	f7eb fe50 	bl	1a4c <mp_print_str>
    }
}
   15dac:	bf00      	nop
   15dae:	3718      	adds	r7, #24
   15db0:	46bd      	mov	sp, r7
   15db2:	bd80      	pop	{r7, pc}
   15db4:	000258e8 	.word	0x000258e8
   15db8:	000258ec 	.word	0x000258ec
   15dbc:	000258f0 	.word	0x000258f0
   15dc0:	000258f4 	.word	0x000258f4

00015dc4 <mp_obj_tuple_make_new>:

STATIC mp_obj_t mp_obj_tuple_make_new(const mp_obj_type_t *type_in, size_t n_args, size_t n_kw, const mp_obj_t *args) {
   15dc4:	b580      	push	{r7, lr}
   15dc6:	b08c      	sub	sp, #48	; 0x30
   15dc8:	af02      	add	r7, sp, #8
   15dca:	60f8      	str	r0, [r7, #12]
   15dcc:	60b9      	str	r1, [r7, #8]
   15dce:	607a      	str	r2, [r7, #4]
   15dd0:	603b      	str	r3, [r7, #0]
    (void)type_in;

    mp_arg_check_num(n_args, n_kw, 0, 1, false);
   15dd2:	2300      	movs	r3, #0
   15dd4:	9300      	str	r3, [sp, #0]
   15dd6:	2301      	movs	r3, #1
   15dd8:	2200      	movs	r2, #0
   15dda:	6879      	ldr	r1, [r7, #4]
   15ddc:	68b8      	ldr	r0, [r7, #8]
   15dde:	f7ff ff93 	bl	15d08 <mp_arg_check_num>

    switch (n_args) {
   15de2:	68bb      	ldr	r3, [r7, #8]
   15de4:	2b00      	cmp	r3, #0
   15de6:	d101      	bne.n	15dec <mp_obj_tuple_make_new+0x28>
        case 0:
            // return a empty tuple
            return mp_const_empty_tuple;
   15de8:	4b27      	ldr	r3, [pc, #156]	; (15e88 <mp_obj_tuple_make_new+0xc4>)
   15dea:	e048      	b.n	15e7e <mp_obj_tuple_make_new+0xba>

        case 1:
        default: {
            // 1 argument, an iterable from which we make a new tuple
            if (MP_OBJ_IS_TYPE(args[0], &mp_type_tuple)) {
   15dec:	683b      	ldr	r3, [r7, #0]
   15dee:	681b      	ldr	r3, [r3, #0]
   15df0:	4618      	mov	r0, r3
   15df2:	f7ff ff63 	bl	15cbc <MP_OBJ_IS_OBJ>
   15df6:	4603      	mov	r3, r0
   15df8:	2b00      	cmp	r3, #0
   15dfa:	d008      	beq.n	15e0e <mp_obj_tuple_make_new+0x4a>
   15dfc:	683b      	ldr	r3, [r7, #0]
   15dfe:	681b      	ldr	r3, [r3, #0]
   15e00:	681b      	ldr	r3, [r3, #0]
   15e02:	4a22      	ldr	r2, [pc, #136]	; (15e8c <mp_obj_tuple_make_new+0xc8>)
   15e04:	4293      	cmp	r3, r2
   15e06:	d102      	bne.n	15e0e <mp_obj_tuple_make_new+0x4a>
                return args[0];
   15e08:	683b      	ldr	r3, [r7, #0]
   15e0a:	681b      	ldr	r3, [r3, #0]
   15e0c:	e037      	b.n	15e7e <mp_obj_tuple_make_new+0xba>
            }

            // TODO optimise for cases where we know the length of the iterator

            size_t alloc = 4;
   15e0e:	2304      	movs	r3, #4
   15e10:	627b      	str	r3, [r7, #36]	; 0x24
            size_t len = 0;
   15e12:	2300      	movs	r3, #0
   15e14:	623b      	str	r3, [r7, #32]
            mp_obj_t *items = m_new(mp_obj_t, alloc);
   15e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   15e18:	009b      	lsls	r3, r3, #2
   15e1a:	4618      	mov	r0, r3
   15e1c:	f7ea fa7e 	bl	31c <m_malloc>
   15e20:	61f8      	str	r0, [r7, #28]

            mp_obj_t iterable = mp_getiter(args[0], NULL);
   15e22:	683b      	ldr	r3, [r7, #0]
   15e24:	681b      	ldr	r3, [r3, #0]
   15e26:	2100      	movs	r1, #0
   15e28:	4618      	mov	r0, r3
   15e2a:	f7f6 ff4d 	bl	ccc8 <mp_getiter>
   15e2e:	61b8      	str	r0, [r7, #24]
            mp_obj_t item;
            while ((item = mp_iternext(iterable)) != MP_OBJ_STOP_ITERATION) {
   15e30:	e015      	b.n	15e5e <mp_obj_tuple_make_new+0x9a>
                if (len >= alloc) {
   15e32:	6a3a      	ldr	r2, [r7, #32]
   15e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   15e36:	429a      	cmp	r2, r3
   15e38:	d309      	bcc.n	15e4e <mp_obj_tuple_make_new+0x8a>
                    items = m_renew(mp_obj_t, items, alloc, alloc * 2);
   15e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   15e3c:	00db      	lsls	r3, r3, #3
   15e3e:	4619      	mov	r1, r3
   15e40:	69f8      	ldr	r0, [r7, #28]
   15e42:	f7ea faac 	bl	39e <m_realloc>
   15e46:	61f8      	str	r0, [r7, #28]
                    alloc *= 2;
   15e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   15e4a:	005b      	lsls	r3, r3, #1
   15e4c:	627b      	str	r3, [r7, #36]	; 0x24
                }
                items[len++] = item;
   15e4e:	6a3b      	ldr	r3, [r7, #32]
   15e50:	1c5a      	adds	r2, r3, #1
   15e52:	623a      	str	r2, [r7, #32]
   15e54:	009b      	lsls	r3, r3, #2
   15e56:	69fa      	ldr	r2, [r7, #28]
   15e58:	4413      	add	r3, r2
   15e5a:	697a      	ldr	r2, [r7, #20]
   15e5c:	601a      	str	r2, [r3, #0]
            while ((item = mp_iternext(iterable)) != MP_OBJ_STOP_ITERATION) {
   15e5e:	69b8      	ldr	r0, [r7, #24]
   15e60:	f7f6 ffb4 	bl	cdcc <mp_iternext>
   15e64:	6178      	str	r0, [r7, #20]
   15e66:	697b      	ldr	r3, [r7, #20]
   15e68:	2b04      	cmp	r3, #4
   15e6a:	d1e2      	bne.n	15e32 <mp_obj_tuple_make_new+0x6e>
            }

            mp_obj_t tuple = mp_obj_new_tuple(len, items);
   15e6c:	69f9      	ldr	r1, [r7, #28]
   15e6e:	6a38      	ldr	r0, [r7, #32]
   15e70:	f000 f9ec 	bl	1624c <mp_obj_new_tuple>
   15e74:	6138      	str	r0, [r7, #16]
            m_del(mp_obj_t, items, alloc);
   15e76:	69f8      	ldr	r0, [r7, #28]
   15e78:	f7ea face 	bl	418 <m_free>

            return tuple;
   15e7c:	693b      	ldr	r3, [r7, #16]
        }
    }
}
   15e7e:	4618      	mov	r0, r3
   15e80:	3728      	adds	r7, #40	; 0x28
   15e82:	46bd      	mov	sp, r7
   15e84:	bd80      	pop	{r7, pc}
   15e86:	bf00      	nop
   15e88:	00025a70 	.word	0x00025a70
   15e8c:	00025a34 	.word	0x00025a34

00015e90 <tuple_cmp_helper>:

// Don't pass MP_BINARY_OP_NOT_EQUAL here
STATIC mp_obj_t tuple_cmp_helper(mp_uint_t op, mp_obj_t self_in, mp_obj_t another_in) {
   15e90:	b580      	push	{r7, lr}
   15e92:	b08a      	sub	sp, #40	; 0x28
   15e94:	af02      	add	r7, sp, #8
   15e96:	60f8      	str	r0, [r7, #12]
   15e98:	60b9      	str	r1, [r7, #8]
   15e9a:	607a      	str	r2, [r7, #4]
    // type check is done on getiter method to allow tuple, namedtuple, attrtuple
    mp_check_self(mp_obj_get_type(self_in)->getiter == mp_obj_tuple_getiter);
   15e9c:	68b8      	ldr	r0, [r7, #8]
   15e9e:	f7f7 fedd 	bl	dc5c <mp_obj_get_type>
   15ea2:	4603      	mov	r3, r0
   15ea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   15ea6:	4a1e      	ldr	r2, [pc, #120]	; (15f20 <tuple_cmp_helper+0x90>)
   15ea8:	4293      	cmp	r3, r2
   15eaa:	d005      	beq.n	15eb8 <tuple_cmp_helper+0x28>
   15eac:	4b1d      	ldr	r3, [pc, #116]	; (15f24 <tuple_cmp_helper+0x94>)
   15eae:	4a1e      	ldr	r2, [pc, #120]	; (15f28 <tuple_cmp_helper+0x98>)
   15eb0:	2168      	movs	r1, #104	; 0x68
   15eb2:	481e      	ldr	r0, [pc, #120]	; (15f2c <tuple_cmp_helper+0x9c>)
   15eb4:	f007 f814 	bl	1cee0 <__assert_func>
    mp_obj_type_t *another_type = mp_obj_get_type(another_in);
   15eb8:	6878      	ldr	r0, [r7, #4]
   15eba:	f7f7 fecf 	bl	dc5c <mp_obj_get_type>
   15ebe:	61f8      	str	r0, [r7, #28]
    mp_obj_tuple_t *self = MP_OBJ_TO_PTR(self_in);
   15ec0:	68bb      	ldr	r3, [r7, #8]
   15ec2:	61bb      	str	r3, [r7, #24]
    if (another_type->getiter != mp_obj_tuple_getiter) {
   15ec4:	69fb      	ldr	r3, [r7, #28]
   15ec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   15ec8:	4a15      	ldr	r2, [pc, #84]	; (15f20 <tuple_cmp_helper+0x90>)
   15eca:	4293      	cmp	r3, r2
   15ecc:	d00e      	beq.n	15eec <tuple_cmp_helper+0x5c>
        // Slow path for user subclasses
        another_in = mp_instance_cast_to_native_base(another_in, MP_OBJ_FROM_PTR(&mp_type_tuple));
   15ece:	4918      	ldr	r1, [pc, #96]	; (15f30 <tuple_cmp_helper+0xa0>)
   15ed0:	6878      	ldr	r0, [r7, #4]
   15ed2:	f001 fdb9 	bl	17a48 <mp_instance_cast_to_native_base>
   15ed6:	6078      	str	r0, [r7, #4]
        if (another_in == MP_OBJ_NULL) {
   15ed8:	687b      	ldr	r3, [r7, #4]
   15eda:	2b00      	cmp	r3, #0
   15edc:	d106      	bne.n	15eec <tuple_cmp_helper+0x5c>
            if (op == MP_BINARY_OP_EQUAL) {
   15ede:	68fb      	ldr	r3, [r7, #12]
   15ee0:	2b02      	cmp	r3, #2
   15ee2:	d101      	bne.n	15ee8 <tuple_cmp_helper+0x58>
                return mp_const_false;
   15ee4:	4b13      	ldr	r3, [pc, #76]	; (15f34 <tuple_cmp_helper+0xa4>)
   15ee6:	e017      	b.n	15f18 <tuple_cmp_helper+0x88>
            }
            return MP_OBJ_NULL;
   15ee8:	2300      	movs	r3, #0
   15eea:	e015      	b.n	15f18 <tuple_cmp_helper+0x88>
        }
    }
    mp_obj_tuple_t *another = MP_OBJ_TO_PTR(another_in);
   15eec:	687b      	ldr	r3, [r7, #4]
   15eee:	617b      	str	r3, [r7, #20]

    return mp_obj_new_bool(mp_seq_cmp_objs(op, self->items, self->len, another->items, another->len));
   15ef0:	69bb      	ldr	r3, [r7, #24]
   15ef2:	f103 0108 	add.w	r1, r3, #8
   15ef6:	69bb      	ldr	r3, [r7, #24]
   15ef8:	685a      	ldr	r2, [r3, #4]
   15efa:	697b      	ldr	r3, [r7, #20]
   15efc:	f103 0008 	add.w	r0, r3, #8
   15f00:	697b      	ldr	r3, [r7, #20]
   15f02:	685b      	ldr	r3, [r3, #4]
   15f04:	9300      	str	r3, [sp, #0]
   15f06:	4603      	mov	r3, r0
   15f08:	68f8      	ldr	r0, [r7, #12]
   15f0a:	f001 ffc2 	bl	17e92 <mp_seq_cmp_objs>
   15f0e:	4603      	mov	r3, r0
   15f10:	4618      	mov	r0, r3
   15f12:	f7ff fee5 	bl	15ce0 <mp_obj_new_bool>
   15f16:	4603      	mov	r3, r0
}
   15f18:	4618      	mov	r0, r3
   15f1a:	3720      	adds	r7, #32
   15f1c:	46bd      	mov	sp, r7
   15f1e:	bd80      	pop	{r7, pc}
   15f20:	000163af 	.word	0x000163af
   15f24:	000258f8 	.word	0x000258f8
   15f28:	00025aa0 	.word	0x00025aa0
   15f2c:	00025934 	.word	0x00025934
   15f30:	00025a34 	.word	0x00025a34
   15f34:	00023860 	.word	0x00023860

00015f38 <mp_obj_tuple_unary_op>:

mp_obj_t mp_obj_tuple_unary_op(mp_unary_op_t op, mp_obj_t self_in) {
   15f38:	b580      	push	{r7, lr}
   15f3a:	b086      	sub	sp, #24
   15f3c:	af00      	add	r7, sp, #0
   15f3e:	6078      	str	r0, [r7, #4]
   15f40:	6039      	str	r1, [r7, #0]
    mp_obj_tuple_t *self = MP_OBJ_TO_PTR(self_in);
   15f42:	683b      	ldr	r3, [r7, #0]
   15f44:	60fb      	str	r3, [r7, #12]
    switch (op) {
   15f46:	687b      	ldr	r3, [r7, #4]
   15f48:	2b05      	cmp	r3, #5
   15f4a:	d02f      	beq.n	15fac <mp_obj_tuple_unary_op+0x74>
   15f4c:	2b06      	cmp	r3, #6
   15f4e:	d00d      	beq.n	15f6c <mp_obj_tuple_unary_op+0x34>
   15f50:	2b04      	cmp	r3, #4
   15f52:	d131      	bne.n	15fb8 <mp_obj_tuple_unary_op+0x80>
        case MP_UNARY_OP_BOOL: return mp_obj_new_bool(self->len != 0);
   15f54:	68fb      	ldr	r3, [r7, #12]
   15f56:	685b      	ldr	r3, [r3, #4]
   15f58:	2b00      	cmp	r3, #0
   15f5a:	bf14      	ite	ne
   15f5c:	2301      	movne	r3, #1
   15f5e:	2300      	moveq	r3, #0
   15f60:	b2db      	uxtb	r3, r3
   15f62:	4618      	mov	r0, r3
   15f64:	f7ff febc 	bl	15ce0 <mp_obj_new_bool>
   15f68:	4603      	mov	r3, r0
   15f6a:	e026      	b.n	15fba <mp_obj_tuple_unary_op+0x82>
        case MP_UNARY_OP_HASH: {
            // start hash with pointer to empty tuple, to make it fairly unique
            mp_int_t hash = (mp_int_t)mp_const_empty_tuple;
   15f6c:	4b15      	ldr	r3, [pc, #84]	; (15fc4 <mp_obj_tuple_unary_op+0x8c>)
   15f6e:	617b      	str	r3, [r7, #20]
            for (size_t i = 0; i < self->len; i++) {
   15f70:	2300      	movs	r3, #0
   15f72:	613b      	str	r3, [r7, #16]
   15f74:	e010      	b.n	15f98 <mp_obj_tuple_unary_op+0x60>
                hash += MP_OBJ_SMALL_INT_VALUE(mp_unary_op(MP_UNARY_OP_HASH, self->items[i]));
   15f76:	68fb      	ldr	r3, [r7, #12]
   15f78:	693a      	ldr	r2, [r7, #16]
   15f7a:	3202      	adds	r2, #2
   15f7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   15f80:	4619      	mov	r1, r3
   15f82:	2006      	movs	r0, #6
   15f84:	f7f5 fd32 	bl	b9ec <mp_unary_op>
   15f88:	4603      	mov	r3, r0
   15f8a:	105b      	asrs	r3, r3, #1
   15f8c:	697a      	ldr	r2, [r7, #20]
   15f8e:	4413      	add	r3, r2
   15f90:	617b      	str	r3, [r7, #20]
            for (size_t i = 0; i < self->len; i++) {
   15f92:	693b      	ldr	r3, [r7, #16]
   15f94:	3301      	adds	r3, #1
   15f96:	613b      	str	r3, [r7, #16]
   15f98:	68fb      	ldr	r3, [r7, #12]
   15f9a:	685a      	ldr	r2, [r3, #4]
   15f9c:	693b      	ldr	r3, [r7, #16]
   15f9e:	429a      	cmp	r2, r3
   15fa0:	d8e9      	bhi.n	15f76 <mp_obj_tuple_unary_op+0x3e>
            }
            return MP_OBJ_NEW_SMALL_INT(hash);
   15fa2:	697b      	ldr	r3, [r7, #20]
   15fa4:	005b      	lsls	r3, r3, #1
   15fa6:	f043 0301 	orr.w	r3, r3, #1
   15faa:	e006      	b.n	15fba <mp_obj_tuple_unary_op+0x82>
        }
        case MP_UNARY_OP_LEN: return MP_OBJ_NEW_SMALL_INT(self->len);
   15fac:	68fb      	ldr	r3, [r7, #12]
   15fae:	685b      	ldr	r3, [r3, #4]
   15fb0:	005b      	lsls	r3, r3, #1
   15fb2:	f043 0301 	orr.w	r3, r3, #1
   15fb6:	e000      	b.n	15fba <mp_obj_tuple_unary_op+0x82>
        default: return MP_OBJ_NULL; // op not supported
   15fb8:	2300      	movs	r3, #0
    }
}
   15fba:	4618      	mov	r0, r3
   15fbc:	3718      	adds	r7, #24
   15fbe:	46bd      	mov	sp, r7
   15fc0:	bd80      	pop	{r7, pc}
   15fc2:	bf00      	nop
   15fc4:	00025a70 	.word	0x00025a70

00015fc8 <mp_obj_tuple_binary_op>:

mp_obj_t mp_obj_tuple_binary_op(mp_binary_op_t op, mp_obj_t lhs, mp_obj_t rhs) {
   15fc8:	b580      	push	{r7, lr}
   15fca:	b08c      	sub	sp, #48	; 0x30
   15fcc:	af02      	add	r7, sp, #8
   15fce:	60f8      	str	r0, [r7, #12]
   15fd0:	60b9      	str	r1, [r7, #8]
   15fd2:	607a      	str	r2, [r7, #4]
    mp_obj_tuple_t *o = MP_OBJ_TO_PTR(lhs);
   15fd4:	68bb      	ldr	r3, [r7, #8]
   15fd6:	627b      	str	r3, [r7, #36]	; 0x24
    switch (op) {
   15fd8:	68fb      	ldr	r3, [r7, #12]
   15fda:	2b1c      	cmp	r3, #28
   15fdc:	f200 80ac 	bhi.w	16138 <mp_obj_tuple_binary_op+0x170>
   15fe0:	a201      	add	r2, pc, #4	; (adr r2, 15fe8 <mp_obj_tuple_binary_op+0x20>)
   15fe2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   15fe6:	bf00      	nop
   15fe8:	0001612b 	.word	0x0001612b
   15fec:	0001612b 	.word	0x0001612b
   15ff0:	0001612b 	.word	0x0001612b
   15ff4:	0001612b 	.word	0x0001612b
   15ff8:	0001612b 	.word	0x0001612b
   15ffc:	00016139 	.word	0x00016139
   16000:	00016139 	.word	0x00016139
   16004:	00016139 	.word	0x00016139
   16008:	00016139 	.word	0x00016139
   1600c:	00016139 	.word	0x00016139
   16010:	00016139 	.word	0x00016139
   16014:	00016139 	.word	0x00016139
   16018:	00016139 	.word	0x00016139
   1601c:	00016139 	.word	0x00016139
   16020:	0001605d 	.word	0x0001605d
   16024:	00016139 	.word	0x00016139
   16028:	000160d1 	.word	0x000160d1
   1602c:	00016139 	.word	0x00016139
   16030:	00016139 	.word	0x00016139
   16034:	00016139 	.word	0x00016139
   16038:	00016139 	.word	0x00016139
   1603c:	00016139 	.word	0x00016139
   16040:	00016139 	.word	0x00016139
   16044:	00016139 	.word	0x00016139
   16048:	00016139 	.word	0x00016139
   1604c:	00016139 	.word	0x00016139
   16050:	0001605d 	.word	0x0001605d
   16054:	00016139 	.word	0x00016139
   16058:	000160d1 	.word	0x000160d1
        case MP_BINARY_OP_ADD:
        case MP_BINARY_OP_INPLACE_ADD: {
            if (!mp_obj_is_subclass_fast(MP_OBJ_FROM_PTR(mp_obj_get_type(rhs)), MP_OBJ_FROM_PTR(&mp_type_tuple))) {
   1605c:	6878      	ldr	r0, [r7, #4]
   1605e:	f7f7 fdfd 	bl	dc5c <mp_obj_get_type>
   16062:	4603      	mov	r3, r0
   16064:	4937      	ldr	r1, [pc, #220]	; (16144 <mp_obj_tuple_binary_op+0x17c>)
   16066:	4618      	mov	r0, r3
   16068:	f001 fbfc 	bl	17864 <mp_obj_is_subclass_fast>
   1606c:	4603      	mov	r3, r0
   1606e:	f083 0301 	eor.w	r3, r3, #1
   16072:	b2db      	uxtb	r3, r3
   16074:	2b00      	cmp	r3, #0
   16076:	d001      	beq.n	1607c <mp_obj_tuple_binary_op+0xb4>
                return MP_OBJ_NULL; // op not supported
   16078:	2300      	movs	r3, #0
   1607a:	e05e      	b.n	1613a <mp_obj_tuple_binary_op+0x172>
            }
            mp_obj_tuple_t *p = MP_OBJ_TO_PTR(rhs);
   1607c:	687b      	ldr	r3, [r7, #4]
   1607e:	623b      	str	r3, [r7, #32]
            mp_obj_tuple_t *s = MP_OBJ_TO_PTR(mp_obj_new_tuple(o->len + p->len, NULL));
   16080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   16082:	685a      	ldr	r2, [r3, #4]
   16084:	6a3b      	ldr	r3, [r7, #32]
   16086:	685b      	ldr	r3, [r3, #4]
   16088:	4413      	add	r3, r2
   1608a:	2100      	movs	r1, #0
   1608c:	4618      	mov	r0, r3
   1608e:	f000 f8dd 	bl	1624c <mp_obj_new_tuple>
   16092:	61f8      	str	r0, [r7, #28]
            mp_seq_cat(s->items, o->items, o->len, p->items, p->len, mp_obj_t);
   16094:	69fb      	ldr	r3, [r7, #28]
   16096:	f103 0008 	add.w	r0, r3, #8
   1609a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1609c:	f103 0108 	add.w	r1, r3, #8
   160a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   160a2:	685b      	ldr	r3, [r3, #4]
   160a4:	009b      	lsls	r3, r3, #2
   160a6:	461a      	mov	r2, r3
   160a8:	f008 fa42 	bl	1e530 <memcpy>
   160ac:	69fb      	ldr	r3, [r7, #28]
   160ae:	f103 0208 	add.w	r2, r3, #8
   160b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   160b4:	685b      	ldr	r3, [r3, #4]
   160b6:	009b      	lsls	r3, r3, #2
   160b8:	18d0      	adds	r0, r2, r3
   160ba:	6a3b      	ldr	r3, [r7, #32]
   160bc:	f103 0108 	add.w	r1, r3, #8
   160c0:	6a3b      	ldr	r3, [r7, #32]
   160c2:	685b      	ldr	r3, [r3, #4]
   160c4:	009b      	lsls	r3, r3, #2
   160c6:	461a      	mov	r2, r3
   160c8:	f008 fa32 	bl	1e530 <memcpy>
            return MP_OBJ_FROM_PTR(s);
   160cc:	69fb      	ldr	r3, [r7, #28]
   160ce:	e034      	b.n	1613a <mp_obj_tuple_binary_op+0x172>
        }
        case MP_BINARY_OP_MULTIPLY:
        case MP_BINARY_OP_INPLACE_MULTIPLY: {
            mp_int_t n;
            if (!mp_obj_get_int_maybe(rhs, &n)) {
   160d0:	f107 0314 	add.w	r3, r7, #20
   160d4:	4619      	mov	r1, r3
   160d6:	6878      	ldr	r0, [r7, #4]
   160d8:	f7f7 fffc 	bl	e0d4 <mp_obj_get_int_maybe>
   160dc:	4603      	mov	r3, r0
   160de:	f083 0301 	eor.w	r3, r3, #1
   160e2:	b2db      	uxtb	r3, r3
   160e4:	2b00      	cmp	r3, #0
   160e6:	d001      	beq.n	160ec <mp_obj_tuple_binary_op+0x124>
                return MP_OBJ_NULL; // op not supported
   160e8:	2300      	movs	r3, #0
   160ea:	e026      	b.n	1613a <mp_obj_tuple_binary_op+0x172>
            }
            if (n <= 0) {
   160ec:	697b      	ldr	r3, [r7, #20]
   160ee:	2b00      	cmp	r3, #0
   160f0:	dc01      	bgt.n	160f6 <mp_obj_tuple_binary_op+0x12e>
                return mp_const_empty_tuple;
   160f2:	4b15      	ldr	r3, [pc, #84]	; (16148 <mp_obj_tuple_binary_op+0x180>)
   160f4:	e021      	b.n	1613a <mp_obj_tuple_binary_op+0x172>
            }
            mp_obj_tuple_t *s = MP_OBJ_TO_PTR(mp_obj_new_tuple(o->len * n, NULL));
   160f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   160f8:	685b      	ldr	r3, [r3, #4]
   160fa:	697a      	ldr	r2, [r7, #20]
   160fc:	fb02 f303 	mul.w	r3, r2, r3
   16100:	2100      	movs	r1, #0
   16102:	4618      	mov	r0, r3
   16104:	f000 f8a2 	bl	1624c <mp_obj_new_tuple>
   16108:	61b8      	str	r0, [r7, #24]
            mp_seq_multiply(o->items, sizeof(*o->items), o->len, n, s->items);
   1610a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1610c:	f103 0008 	add.w	r0, r3, #8
   16110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   16112:	685a      	ldr	r2, [r3, #4]
   16114:	697b      	ldr	r3, [r7, #20]
   16116:	4619      	mov	r1, r3
   16118:	69bb      	ldr	r3, [r7, #24]
   1611a:	3308      	adds	r3, #8
   1611c:	9300      	str	r3, [sp, #0]
   1611e:	460b      	mov	r3, r1
   16120:	2104      	movs	r1, #4
   16122:	f001 fdf5 	bl	17d10 <mp_seq_multiply>
            return MP_OBJ_FROM_PTR(s);
   16126:	69bb      	ldr	r3, [r7, #24]
   16128:	e007      	b.n	1613a <mp_obj_tuple_binary_op+0x172>
        case MP_BINARY_OP_EQUAL:
        case MP_BINARY_OP_LESS:
        case MP_BINARY_OP_LESS_EQUAL:
        case MP_BINARY_OP_MORE:
        case MP_BINARY_OP_MORE_EQUAL:
            return tuple_cmp_helper(op, lhs, rhs);
   1612a:	687a      	ldr	r2, [r7, #4]
   1612c:	68b9      	ldr	r1, [r7, #8]
   1612e:	68f8      	ldr	r0, [r7, #12]
   16130:	f7ff feae 	bl	15e90 <tuple_cmp_helper>
   16134:	4603      	mov	r3, r0
   16136:	e000      	b.n	1613a <mp_obj_tuple_binary_op+0x172>

        default:
            return MP_OBJ_NULL; // op not supported
   16138:	2300      	movs	r3, #0
    }
}
   1613a:	4618      	mov	r0, r3
   1613c:	3728      	adds	r7, #40	; 0x28
   1613e:	46bd      	mov	sp, r7
   16140:	bd80      	pop	{r7, pc}
   16142:	bf00      	nop
   16144:	00025a34 	.word	0x00025a34
   16148:	00025a70 	.word	0x00025a70

0001614c <mp_obj_tuple_subscr>:

mp_obj_t mp_obj_tuple_subscr(mp_obj_t self_in, mp_obj_t index, mp_obj_t value) {
   1614c:	b580      	push	{r7, lr}
   1614e:	b086      	sub	sp, #24
   16150:	af00      	add	r7, sp, #0
   16152:	60f8      	str	r0, [r7, #12]
   16154:	60b9      	str	r1, [r7, #8]
   16156:	607a      	str	r2, [r7, #4]
    if (value == MP_OBJ_SENTINEL) {
   16158:	687b      	ldr	r3, [r7, #4]
   1615a:	2b08      	cmp	r3, #8
   1615c:	d110      	bne.n	16180 <mp_obj_tuple_subscr+0x34>
        // load
        mp_obj_tuple_t *self = MP_OBJ_TO_PTR(self_in);
   1615e:	68fb      	ldr	r3, [r7, #12]
   16160:	617b      	str	r3, [r7, #20]
            mp_obj_tuple_t *res = MP_OBJ_TO_PTR(mp_obj_new_tuple(slice.stop - slice.start, NULL));
            mp_seq_copy(res->items, self->items + slice.start, res->len, mp_obj_t);
            return MP_OBJ_FROM_PTR(res);
        }
#endif
        size_t index_value = mp_get_index(self->base.type, self->len, index, false);
   16162:	697b      	ldr	r3, [r7, #20]
   16164:	6818      	ldr	r0, [r3, #0]
   16166:	697b      	ldr	r3, [r7, #20]
   16168:	6859      	ldr	r1, [r3, #4]
   1616a:	2300      	movs	r3, #0
   1616c:	68ba      	ldr	r2, [r7, #8]
   1616e:	f7f8 f841 	bl	e1f4 <mp_get_index>
   16172:	6138      	str	r0, [r7, #16]
        return self->items[index_value];
   16174:	697b      	ldr	r3, [r7, #20]
   16176:	693a      	ldr	r2, [r7, #16]
   16178:	3202      	adds	r2, #2
   1617a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   1617e:	e000      	b.n	16182 <mp_obj_tuple_subscr+0x36>
    } else {
        return MP_OBJ_NULL; // op not supported
   16180:	2300      	movs	r3, #0
    }
}
   16182:	4618      	mov	r0, r3
   16184:	3718      	adds	r7, #24
   16186:	46bd      	mov	sp, r7
   16188:	bd80      	pop	{r7, pc}

0001618a <tuple_count>:

STATIC mp_obj_t tuple_count(mp_obj_t self_in, mp_obj_t value) {
   1618a:	b580      	push	{r7, lr}
   1618c:	b084      	sub	sp, #16
   1618e:	af00      	add	r7, sp, #0
   16190:	6078      	str	r0, [r7, #4]
   16192:	6039      	str	r1, [r7, #0]
    mp_check_self(MP_OBJ_IS_TYPE(self_in, &mp_type_tuple));
   16194:	6878      	ldr	r0, [r7, #4]
   16196:	f7ff fd91 	bl	15cbc <MP_OBJ_IS_OBJ>
   1619a:	4603      	mov	r3, r0
   1619c:	2b00      	cmp	r3, #0
   1619e:	d004      	beq.n	161aa <tuple_count+0x20>
   161a0:	687b      	ldr	r3, [r7, #4]
   161a2:	681b      	ldr	r3, [r3, #0]
   161a4:	4a0c      	ldr	r2, [pc, #48]	; (161d8 <tuple_count+0x4e>)
   161a6:	4293      	cmp	r3, r2
   161a8:	d005      	beq.n	161b6 <tuple_count+0x2c>
   161aa:	4b0c      	ldr	r3, [pc, #48]	; (161dc <tuple_count+0x52>)
   161ac:	4a0c      	ldr	r2, [pc, #48]	; (161e0 <tuple_count+0x56>)
   161ae:	21c8      	movs	r1, #200	; 0xc8
   161b0:	480c      	ldr	r0, [pc, #48]	; (161e4 <tuple_count+0x5a>)
   161b2:	f006 fe95 	bl	1cee0 <__assert_func>
    mp_obj_tuple_t *self = MP_OBJ_TO_PTR(self_in);
   161b6:	687b      	ldr	r3, [r7, #4]
   161b8:	60fb      	str	r3, [r7, #12]
    return mp_seq_count_obj(self->items, self->len, value);
   161ba:	68fb      	ldr	r3, [r7, #12]
   161bc:	f103 0008 	add.w	r0, r3, #8
   161c0:	68fb      	ldr	r3, [r7, #12]
   161c2:	685b      	ldr	r3, [r3, #4]
   161c4:	683a      	ldr	r2, [r7, #0]
   161c6:	4619      	mov	r1, r3
   161c8:	f001 ff30 	bl	1802c <mp_seq_count_obj>
   161cc:	4603      	mov	r3, r0
}
   161ce:	4618      	mov	r0, r3
   161d0:	3710      	adds	r7, #16
   161d2:	46bd      	mov	sp, r7
   161d4:	bd80      	pop	{r7, pc}
   161d6:	bf00      	nop
   161d8:	00025a34 	.word	0x00025a34
   161dc:	00025948 	.word	0x00025948
   161e0:	00025ab4 	.word	0x00025ab4
   161e4:	00025934 	.word	0x00025934

000161e8 <tuple_index>:
STATIC MP_DEFINE_CONST_FUN_OBJ_2(tuple_count_obj, tuple_count);

STATIC mp_obj_t tuple_index(size_t n_args, const mp_obj_t *args) {
   161e8:	b580      	push	{r7, lr}
   161ea:	b084      	sub	sp, #16
   161ec:	af00      	add	r7, sp, #0
   161ee:	6078      	str	r0, [r7, #4]
   161f0:	6039      	str	r1, [r7, #0]
    mp_check_self(MP_OBJ_IS_TYPE(args[0], &mp_type_tuple));
   161f2:	683b      	ldr	r3, [r7, #0]
   161f4:	681b      	ldr	r3, [r3, #0]
   161f6:	4618      	mov	r0, r3
   161f8:	f7ff fd60 	bl	15cbc <MP_OBJ_IS_OBJ>
   161fc:	4603      	mov	r3, r0
   161fe:	2b00      	cmp	r3, #0
   16200:	d005      	beq.n	1620e <tuple_index+0x26>
   16202:	683b      	ldr	r3, [r7, #0]
   16204:	681b      	ldr	r3, [r3, #0]
   16206:	681b      	ldr	r3, [r3, #0]
   16208:	4a0c      	ldr	r2, [pc, #48]	; (1623c <tuple_index+0x54>)
   1620a:	4293      	cmp	r3, r2
   1620c:	d005      	beq.n	1621a <tuple_index+0x32>
   1620e:	4b0c      	ldr	r3, [pc, #48]	; (16240 <tuple_index+0x58>)
   16210:	4a0c      	ldr	r2, [pc, #48]	; (16244 <tuple_index+0x5c>)
   16212:	21cf      	movs	r1, #207	; 0xcf
   16214:	480c      	ldr	r0, [pc, #48]	; (16248 <tuple_index+0x60>)
   16216:	f006 fe63 	bl	1cee0 <__assert_func>
    mp_obj_tuple_t *self = MP_OBJ_TO_PTR(args[0]);
   1621a:	683b      	ldr	r3, [r7, #0]
   1621c:	681b      	ldr	r3, [r3, #0]
   1621e:	60fb      	str	r3, [r7, #12]
    return mp_seq_index_obj(self->items, self->len, n_args, args);
   16220:	68fb      	ldr	r3, [r7, #12]
   16222:	f103 0008 	add.w	r0, r3, #8
   16226:	68fb      	ldr	r3, [r7, #12]
   16228:	6859      	ldr	r1, [r3, #4]
   1622a:	683b      	ldr	r3, [r7, #0]
   1622c:	687a      	ldr	r2, [r7, #4]
   1622e:	f001 fead 	bl	17f8c <mp_seq_index_obj>
   16232:	4603      	mov	r3, r0
}
   16234:	4618      	mov	r0, r3
   16236:	3710      	adds	r7, #16
   16238:	46bd      	mov	sp, r7
   1623a:	bd80      	pop	{r7, pc}
   1623c:	00025a34 	.word	0x00025a34
   16240:	000259ac 	.word	0x000259ac
   16244:	00025ac0 	.word	0x00025ac0
   16248:	00025934 	.word	0x00025934

0001624c <mp_obj_new_tuple>:
};

// the zero-length tuple
const mp_obj_tuple_t mp_const_empty_tuple_obj = {{&mp_type_tuple}, 0};

mp_obj_t mp_obj_new_tuple(size_t n, const mp_obj_t *items) {
   1624c:	b580      	push	{r7, lr}
   1624e:	b084      	sub	sp, #16
   16250:	af00      	add	r7, sp, #0
   16252:	6078      	str	r0, [r7, #4]
   16254:	6039      	str	r1, [r7, #0]
    if (n == 0) {
   16256:	687b      	ldr	r3, [r7, #4]
   16258:	2b00      	cmp	r3, #0
   1625a:	d101      	bne.n	16260 <mp_obj_new_tuple+0x14>
        return mp_const_empty_tuple;
   1625c:	4b15      	ldr	r3, [pc, #84]	; (162b4 <mp_obj_new_tuple+0x68>)
   1625e:	e024      	b.n	162aa <mp_obj_new_tuple+0x5e>
    }
    mp_obj_tuple_t *o = m_new_obj_var(mp_obj_tuple_t, mp_obj_t, n);
   16260:	687b      	ldr	r3, [r7, #4]
   16262:	3302      	adds	r3, #2
   16264:	009b      	lsls	r3, r3, #2
   16266:	4618      	mov	r0, r3
   16268:	f7ea f858 	bl	31c <m_malloc>
   1626c:	60b8      	str	r0, [r7, #8]
    o->base.type = &mp_type_tuple;
   1626e:	68bb      	ldr	r3, [r7, #8]
   16270:	4a11      	ldr	r2, [pc, #68]	; (162b8 <mp_obj_new_tuple+0x6c>)
   16272:	601a      	str	r2, [r3, #0]
    o->len = n;
   16274:	68bb      	ldr	r3, [r7, #8]
   16276:	687a      	ldr	r2, [r7, #4]
   16278:	605a      	str	r2, [r3, #4]
    if (items) {
   1627a:	683b      	ldr	r3, [r7, #0]
   1627c:	2b00      	cmp	r3, #0
   1627e:	d013      	beq.n	162a8 <mp_obj_new_tuple+0x5c>
        for (size_t i = 0; i < n; i++) {
   16280:	2300      	movs	r3, #0
   16282:	60fb      	str	r3, [r7, #12]
   16284:	e00c      	b.n	162a0 <mp_obj_new_tuple+0x54>
            o->items[i] = items[i];
   16286:	68fb      	ldr	r3, [r7, #12]
   16288:	009b      	lsls	r3, r3, #2
   1628a:	683a      	ldr	r2, [r7, #0]
   1628c:	4413      	add	r3, r2
   1628e:	6819      	ldr	r1, [r3, #0]
   16290:	68bb      	ldr	r3, [r7, #8]
   16292:	68fa      	ldr	r2, [r7, #12]
   16294:	3202      	adds	r2, #2
   16296:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        for (size_t i = 0; i < n; i++) {
   1629a:	68fb      	ldr	r3, [r7, #12]
   1629c:	3301      	adds	r3, #1
   1629e:	60fb      	str	r3, [r7, #12]
   162a0:	68fa      	ldr	r2, [r7, #12]
   162a2:	687b      	ldr	r3, [r7, #4]
   162a4:	429a      	cmp	r2, r3
   162a6:	d3ee      	bcc.n	16286 <mp_obj_new_tuple+0x3a>
        }
    }
    return MP_OBJ_FROM_PTR(o);
   162a8:	68bb      	ldr	r3, [r7, #8]
}
   162aa:	4618      	mov	r0, r3
   162ac:	3710      	adds	r7, #16
   162ae:	46bd      	mov	sp, r7
   162b0:	bd80      	pop	{r7, pc}
   162b2:	bf00      	nop
   162b4:	00025a70 	.word	0x00025a70
   162b8:	00025a34 	.word	0x00025a34

000162bc <mp_obj_tuple_get>:

void mp_obj_tuple_get(mp_obj_t self_in, size_t *len, mp_obj_t **items) {
   162bc:	b580      	push	{r7, lr}
   162be:	b086      	sub	sp, #24
   162c0:	af00      	add	r7, sp, #0
   162c2:	60f8      	str	r0, [r7, #12]
   162c4:	60b9      	str	r1, [r7, #8]
   162c6:	607a      	str	r2, [r7, #4]
    assert(MP_OBJ_IS_TYPE(self_in, &mp_type_tuple));
   162c8:	68f8      	ldr	r0, [r7, #12]
   162ca:	f7ff fcf7 	bl	15cbc <MP_OBJ_IS_OBJ>
   162ce:	4603      	mov	r3, r0
   162d0:	2b00      	cmp	r3, #0
   162d2:	d004      	beq.n	162de <mp_obj_tuple_get+0x22>
   162d4:	68fb      	ldr	r3, [r7, #12]
   162d6:	681b      	ldr	r3, [r3, #0]
   162d8:	4a0b      	ldr	r2, [pc, #44]	; (16308 <mp_obj_tuple_get+0x4c>)
   162da:	4293      	cmp	r3, r2
   162dc:	d005      	beq.n	162ea <mp_obj_tuple_get+0x2e>
   162de:	4b0b      	ldr	r3, [pc, #44]	; (1630c <mp_obj_tuple_get+0x50>)
   162e0:	4a0b      	ldr	r2, [pc, #44]	; (16310 <mp_obj_tuple_get+0x54>)
   162e2:	21fb      	movs	r1, #251	; 0xfb
   162e4:	480b      	ldr	r0, [pc, #44]	; (16314 <mp_obj_tuple_get+0x58>)
   162e6:	f006 fdfb 	bl	1cee0 <__assert_func>
    mp_obj_tuple_t *self = MP_OBJ_TO_PTR(self_in);
   162ea:	68fb      	ldr	r3, [r7, #12]
   162ec:	617b      	str	r3, [r7, #20]
    *len = self->len;
   162ee:	697b      	ldr	r3, [r7, #20]
   162f0:	685a      	ldr	r2, [r3, #4]
   162f2:	68bb      	ldr	r3, [r7, #8]
   162f4:	601a      	str	r2, [r3, #0]
    *items = &self->items[0];
   162f6:	697b      	ldr	r3, [r7, #20]
   162f8:	f103 0208 	add.w	r2, r3, #8
   162fc:	687b      	ldr	r3, [r7, #4]
   162fe:	601a      	str	r2, [r3, #0]
}
   16300:	bf00      	nop
   16302:	3718      	adds	r7, #24
   16304:	46bd      	mov	sp, r7
   16306:	bd80      	pop	{r7, pc}
   16308:	00025a34 	.word	0x00025a34
   1630c:	00025a78 	.word	0x00025a78
   16310:	00025acc 	.word	0x00025acc
   16314:	00025934 	.word	0x00025934

00016318 <mp_obj_tuple_del>:

void mp_obj_tuple_del(mp_obj_t self_in) {
   16318:	b580      	push	{r7, lr}
   1631a:	b084      	sub	sp, #16
   1631c:	af00      	add	r7, sp, #0
   1631e:	6078      	str	r0, [r7, #4]
    assert(MP_OBJ_IS_TYPE(self_in, &mp_type_tuple));
   16320:	6878      	ldr	r0, [r7, #4]
   16322:	f7ff fccb 	bl	15cbc <MP_OBJ_IS_OBJ>
   16326:	4603      	mov	r3, r0
   16328:	2b00      	cmp	r3, #0
   1632a:	d004      	beq.n	16336 <mp_obj_tuple_del+0x1e>
   1632c:	687b      	ldr	r3, [r7, #4]
   1632e:	681b      	ldr	r3, [r3, #0]
   16330:	4a09      	ldr	r2, [pc, #36]	; (16358 <mp_obj_tuple_del+0x40>)
   16332:	4293      	cmp	r3, r2
   16334:	d006      	beq.n	16344 <mp_obj_tuple_del+0x2c>
   16336:	4b09      	ldr	r3, [pc, #36]	; (1635c <mp_obj_tuple_del+0x44>)
   16338:	4a09      	ldr	r2, [pc, #36]	; (16360 <mp_obj_tuple_del+0x48>)
   1633a:	f44f 7181 	mov.w	r1, #258	; 0x102
   1633e:	4809      	ldr	r0, [pc, #36]	; (16364 <mp_obj_tuple_del+0x4c>)
   16340:	f006 fdce 	bl	1cee0 <__assert_func>
    mp_obj_tuple_t *self = MP_OBJ_TO_PTR(self_in);
   16344:	687b      	ldr	r3, [r7, #4]
   16346:	60fb      	str	r3, [r7, #12]
    m_del_var(mp_obj_tuple_t, mp_obj_t, self->len, self);
   16348:	68f8      	ldr	r0, [r7, #12]
   1634a:	f7ea f865 	bl	418 <m_free>
}
   1634e:	bf00      	nop
   16350:	3710      	adds	r7, #16
   16352:	46bd      	mov	sp, r7
   16354:	bd80      	pop	{r7, pc}
   16356:	bf00      	nop
   16358:	00025a34 	.word	0x00025a34
   1635c:	00025a78 	.word	0x00025a78
   16360:	00025ae0 	.word	0x00025ae0
   16364:	00025934 	.word	0x00025934

00016368 <tuple_it_iternext>:
    mp_fun_1_t iternext;
    mp_obj_tuple_t *tuple;
    size_t cur;
} mp_obj_tuple_it_t;

STATIC mp_obj_t tuple_it_iternext(mp_obj_t self_in) {
   16368:	b480      	push	{r7}
   1636a:	b085      	sub	sp, #20
   1636c:	af00      	add	r7, sp, #0
   1636e:	6078      	str	r0, [r7, #4]
    mp_obj_tuple_it_t *self = MP_OBJ_TO_PTR(self_in);
   16370:	687b      	ldr	r3, [r7, #4]
   16372:	60fb      	str	r3, [r7, #12]
    if (self->cur < self->tuple->len) {
   16374:	68fb      	ldr	r3, [r7, #12]
   16376:	68da      	ldr	r2, [r3, #12]
   16378:	68fb      	ldr	r3, [r7, #12]
   1637a:	689b      	ldr	r3, [r3, #8]
   1637c:	685b      	ldr	r3, [r3, #4]
   1637e:	429a      	cmp	r2, r3
   16380:	d20e      	bcs.n	163a0 <tuple_it_iternext+0x38>
        mp_obj_t o_out = self->tuple->items[self->cur];
   16382:	68fb      	ldr	r3, [r7, #12]
   16384:	689b      	ldr	r3, [r3, #8]
   16386:	68fa      	ldr	r2, [r7, #12]
   16388:	68d2      	ldr	r2, [r2, #12]
   1638a:	3202      	adds	r2, #2
   1638c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   16390:	60bb      	str	r3, [r7, #8]
        self->cur += 1;
   16392:	68fb      	ldr	r3, [r7, #12]
   16394:	68db      	ldr	r3, [r3, #12]
   16396:	1c5a      	adds	r2, r3, #1
   16398:	68fb      	ldr	r3, [r7, #12]
   1639a:	60da      	str	r2, [r3, #12]
        return o_out;
   1639c:	68bb      	ldr	r3, [r7, #8]
   1639e:	e000      	b.n	163a2 <tuple_it_iternext+0x3a>
    } else {
        return MP_OBJ_STOP_ITERATION;
   163a0:	2304      	movs	r3, #4
    }
}
   163a2:	4618      	mov	r0, r3
   163a4:	3714      	adds	r7, #20
   163a6:	46bd      	mov	sp, r7
   163a8:	f85d 7b04 	ldr.w	r7, [sp], #4
   163ac:	4770      	bx	lr

000163ae <mp_obj_tuple_getiter>:

mp_obj_t mp_obj_tuple_getiter(mp_obj_t o_in, mp_obj_iter_buf_t *iter_buf) {
   163ae:	b480      	push	{r7}
   163b0:	b085      	sub	sp, #20
   163b2:	af00      	add	r7, sp, #0
   163b4:	6078      	str	r0, [r7, #4]
   163b6:	6039      	str	r1, [r7, #0]
    assert(sizeof(mp_obj_tuple_it_t) <= sizeof(mp_obj_iter_buf_t));
    mp_obj_tuple_it_t *o = (mp_obj_tuple_it_t*)iter_buf;
   163b8:	683b      	ldr	r3, [r7, #0]
   163ba:	60fb      	str	r3, [r7, #12]
    o->base.type = &mp_type_polymorph_iter;
   163bc:	68fb      	ldr	r3, [r7, #12]
   163be:	4a09      	ldr	r2, [pc, #36]	; (163e4 <mp_obj_tuple_getiter+0x36>)
   163c0:	601a      	str	r2, [r3, #0]
    o->iternext = tuple_it_iternext;
   163c2:	68fb      	ldr	r3, [r7, #12]
   163c4:	4a08      	ldr	r2, [pc, #32]	; (163e8 <mp_obj_tuple_getiter+0x3a>)
   163c6:	605a      	str	r2, [r3, #4]
    o->tuple = MP_OBJ_TO_PTR(o_in);
   163c8:	68fb      	ldr	r3, [r7, #12]
   163ca:	687a      	ldr	r2, [r7, #4]
   163cc:	609a      	str	r2, [r3, #8]
    o->cur = 0;
   163ce:	68fb      	ldr	r3, [r7, #12]
   163d0:	2200      	movs	r2, #0
   163d2:	60da      	str	r2, [r3, #12]
    return MP_OBJ_FROM_PTR(o);
   163d4:	68fb      	ldr	r3, [r7, #12]
}
   163d6:	4618      	mov	r0, r3
   163d8:	3714      	adds	r7, #20
   163da:	46bd      	mov	sp, r7
   163dc:	f85d 7b04 	ldr.w	r7, [sp], #4
   163e0:	4770      	bx	lr
   163e2:	bf00      	nop
   163e4:	0002509c 	.word	0x0002509c
   163e8:	00016369 	.word	0x00016369

000163ec <MP_OBJ_IS_SMALL_INT>:
    { return ((((mp_int_t)(o)) & 1) != 0); }
   163ec:	b480      	push	{r7}
   163ee:	b083      	sub	sp, #12
   163f0:	af00      	add	r7, sp, #0
   163f2:	6078      	str	r0, [r7, #4]
   163f4:	687b      	ldr	r3, [r7, #4]
   163f6:	f003 0301 	and.w	r3, r3, #1
   163fa:	2b00      	cmp	r3, #0
   163fc:	bf14      	ite	ne
   163fe:	2301      	movne	r3, #1
   16400:	2300      	moveq	r3, #0
   16402:	b2db      	uxtb	r3, r3
   16404:	4618      	mov	r0, r3
   16406:	370c      	adds	r7, #12
   16408:	46bd      	mov	sp, r7
   1640a:	f85d 7b04 	ldr.w	r7, [sp], #4
   1640e:	4770      	bx	lr

00016410 <MP_OBJ_IS_OBJ>:
    { return ((((mp_int_t)(o)) & 3) == 0); }
   16410:	b480      	push	{r7}
   16412:	b083      	sub	sp, #12
   16414:	af00      	add	r7, sp, #0
   16416:	6078      	str	r0, [r7, #4]
   16418:	687b      	ldr	r3, [r7, #4]
   1641a:	f003 0303 	and.w	r3, r3, #3
   1641e:	2b00      	cmp	r3, #0
   16420:	bf0c      	ite	eq
   16422:	2301      	moveq	r3, #1
   16424:	2300      	movne	r3, #0
   16426:	b2db      	uxtb	r3, r3
   16428:	4618      	mov	r0, r3
   1642a:	370c      	adds	r7, #12
   1642c:	46bd      	mov	sp, r7
   1642e:	f85d 7b04 	ldr.w	r7, [sp], #4
   16432:	4770      	bx	lr

00016434 <mp_arg_check_num>:
static inline void mp_arg_check_num(size_t n_args, size_t n_kw, size_t n_args_min, size_t n_args_max, bool takes_kw) {
   16434:	b580      	push	{r7, lr}
   16436:	b084      	sub	sp, #16
   16438:	af00      	add	r7, sp, #0
   1643a:	60f8      	str	r0, [r7, #12]
   1643c:	60b9      	str	r1, [r7, #8]
   1643e:	607a      	str	r2, [r7, #4]
   16440:	603b      	str	r3, [r7, #0]
    mp_arg_check_num_sig(n_args, n_kw, (uint32_t)MP_OBJ_FUN_MAKE_SIG(n_args_min, n_args_max, takes_kw));
   16442:	687b      	ldr	r3, [r7, #4]
   16444:	045a      	lsls	r2, r3, #17
   16446:	683b      	ldr	r3, [r7, #0]
   16448:	005b      	lsls	r3, r3, #1
   1644a:	431a      	orrs	r2, r3
   1644c:	7e3b      	ldrb	r3, [r7, #24]
   1644e:	2b00      	cmp	r3, #0
   16450:	d001      	beq.n	16456 <mp_arg_check_num+0x22>
   16452:	2301      	movs	r3, #1
   16454:	e000      	b.n	16458 <mp_arg_check_num+0x24>
   16456:	2300      	movs	r3, #0
   16458:	4313      	orrs	r3, r2
   1645a:	461a      	mov	r2, r3
   1645c:	68b9      	ldr	r1, [r7, #8]
   1645e:	68f8      	ldr	r0, [r7, #12]
   16460:	f7f6 ffba 	bl	d3d8 <mp_arg_check_num_sig>
}
   16464:	bf00      	nop
   16466:	3710      	adds	r7, #16
   16468:	46bd      	mov	sp, r7
   1646a:	bd80      	pop	{r7, pc}

0001646c <instance_count_native_bases>:
STATIC mp_obj_t static_class_method_make_new(const mp_obj_type_t *self_in, size_t n_args, size_t n_kw, const mp_obj_t *args);

/******************************************************************************/
// instance object

STATIC int instance_count_native_bases(const mp_obj_type_t *type, const mp_obj_type_t **last_native_base) {
   1646c:	b580      	push	{r7, lr}
   1646e:	b088      	sub	sp, #32
   16470:	af00      	add	r7, sp, #0
   16472:	6078      	str	r0, [r7, #4]
   16474:	6039      	str	r1, [r7, #0]
    int count = 0;
   16476:	2300      	movs	r3, #0
   16478:	61fb      	str	r3, [r7, #28]
    for (;;) {
        if (type == &mp_type_object) {
   1647a:	687b      	ldr	r3, [r7, #4]
   1647c:	4a2c      	ldr	r2, [pc, #176]	; (16530 <instance_count_native_bases+0xc4>)
   1647e:	4293      	cmp	r3, r2
   16480:	d101      	bne.n	16486 <instance_count_native_bases+0x1a>
            // Not a "real" type, end search here.
            return count;
   16482:	69fb      	ldr	r3, [r7, #28]
   16484:	e04f      	b.n	16526 <instance_count_native_bases+0xba>
        } else if (mp_obj_is_native_type(type)) {
   16486:	687b      	ldr	r3, [r7, #4]
   16488:	68db      	ldr	r3, [r3, #12]
   1648a:	4a2a      	ldr	r2, [pc, #168]	; (16534 <instance_count_native_bases+0xc8>)
   1648c:	4293      	cmp	r3, r2
   1648e:	d005      	beq.n	1649c <instance_count_native_bases+0x30>
            // Native types don't have parents (at least not from our perspective) so end.
            *last_native_base = type;
   16490:	683b      	ldr	r3, [r7, #0]
   16492:	687a      	ldr	r2, [r7, #4]
   16494:	601a      	str	r2, [r3, #0]
            return count + 1;
   16496:	69fb      	ldr	r3, [r7, #28]
   16498:	3301      	adds	r3, #1
   1649a:	e044      	b.n	16526 <instance_count_native_bases+0xba>
        } else if (type->parent == NULL) {
   1649c:	687b      	ldr	r3, [r7, #4]
   1649e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   164a0:	2b00      	cmp	r3, #0
   164a2:	d101      	bne.n	164a8 <instance_count_native_bases+0x3c>
            // No parents so end search here.
            return count;
   164a4:	69fb      	ldr	r3, [r7, #28]
   164a6:	e03e      	b.n	16526 <instance_count_native_bases+0xba>
        #if MICROPY_MULTIPLE_INHERITANCE
        } else if (((mp_obj_base_t*)type->parent)->type == &mp_type_tuple) {
   164a8:	687b      	ldr	r3, [r7, #4]
   164aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   164ac:	681b      	ldr	r3, [r3, #0]
   164ae:	4a22      	ldr	r2, [pc, #136]	; (16538 <instance_count_native_bases+0xcc>)
   164b0:	4293      	cmp	r3, r2
   164b2:	d134      	bne.n	1651e <instance_count_native_bases+0xb2>
            // Multiple parents, search through them all recursively.
            const mp_obj_tuple_t *parent_tuple = type->parent;
   164b4:	687b      	ldr	r3, [r7, #4]
   164b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   164b8:	617b      	str	r3, [r7, #20]
            const mp_obj_t *item = parent_tuple->items;
   164ba:	697b      	ldr	r3, [r7, #20]
   164bc:	3308      	adds	r3, #8
   164be:	61bb      	str	r3, [r7, #24]
            const mp_obj_t *top = item + parent_tuple->len;
   164c0:	697b      	ldr	r3, [r7, #20]
   164c2:	685b      	ldr	r3, [r3, #4]
   164c4:	009b      	lsls	r3, r3, #2
   164c6:	69ba      	ldr	r2, [r7, #24]
   164c8:	4413      	add	r3, r2
   164ca:	613b      	str	r3, [r7, #16]
            for (; item < top; ++item) {
   164cc:	e021      	b.n	16512 <instance_count_native_bases+0xa6>
                assert(MP_OBJ_IS_TYPE(*item, &mp_type_type));
   164ce:	69bb      	ldr	r3, [r7, #24]
   164d0:	681b      	ldr	r3, [r3, #0]
   164d2:	4618      	mov	r0, r3
   164d4:	f7ff ff9c 	bl	16410 <MP_OBJ_IS_OBJ>
   164d8:	4603      	mov	r3, r0
   164da:	2b00      	cmp	r3, #0
   164dc:	d005      	beq.n	164ea <instance_count_native_bases+0x7e>
   164de:	69bb      	ldr	r3, [r7, #24]
   164e0:	681b      	ldr	r3, [r3, #0]
   164e2:	681b      	ldr	r3, [r3, #0]
   164e4:	4a15      	ldr	r2, [pc, #84]	; (1653c <instance_count_native_bases+0xd0>)
   164e6:	4293      	cmp	r3, r2
   164e8:	d005      	beq.n	164f6 <instance_count_native_bases+0x8a>
   164ea:	4b15      	ldr	r3, [pc, #84]	; (16540 <instance_count_native_bases+0xd4>)
   164ec:	4a15      	ldr	r2, [pc, #84]	; (16544 <instance_count_native_bases+0xd8>)
   164ee:	214b      	movs	r1, #75	; 0x4b
   164f0:	4815      	ldr	r0, [pc, #84]	; (16548 <instance_count_native_bases+0xdc>)
   164f2:	f006 fcf5 	bl	1cee0 <__assert_func>
                const mp_obj_type_t *bt = (const mp_obj_type_t *)MP_OBJ_TO_PTR(*item);
   164f6:	69bb      	ldr	r3, [r7, #24]
   164f8:	681b      	ldr	r3, [r3, #0]
   164fa:	60fb      	str	r3, [r7, #12]
                count += instance_count_native_bases(bt, last_native_base);
   164fc:	6839      	ldr	r1, [r7, #0]
   164fe:	68f8      	ldr	r0, [r7, #12]
   16500:	f7ff ffb4 	bl	1646c <instance_count_native_bases>
   16504:	4602      	mov	r2, r0
   16506:	69fb      	ldr	r3, [r7, #28]
   16508:	4413      	add	r3, r2
   1650a:	61fb      	str	r3, [r7, #28]
            for (; item < top; ++item) {
   1650c:	69bb      	ldr	r3, [r7, #24]
   1650e:	3304      	adds	r3, #4
   16510:	61bb      	str	r3, [r7, #24]
   16512:	69ba      	ldr	r2, [r7, #24]
   16514:	693b      	ldr	r3, [r7, #16]
   16516:	429a      	cmp	r2, r3
   16518:	d3d9      	bcc.n	164ce <instance_count_native_bases+0x62>
            }
            return count;
   1651a:	69fb      	ldr	r3, [r7, #28]
   1651c:	e003      	b.n	16526 <instance_count_native_bases+0xba>
        #endif
        } else {
            // A single parent, use iteration to continue the search.
            type = type->parent;
   1651e:	687b      	ldr	r3, [r7, #4]
   16520:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   16522:	607b      	str	r3, [r7, #4]
        if (type == &mp_type_object) {
   16524:	e7a9      	b.n	1647a <instance_count_native_bases+0xe>
        }
    }
}
   16526:	4618      	mov	r0, r3
   16528:	3720      	adds	r7, #32
   1652a:	46bd      	mov	sp, r7
   1652c:	bd80      	pop	{r7, pc}
   1652e:	bf00      	nop
   16530:	00025060 	.word	0x00025060
   16534:	00016a25 	.word	0x00016a25
   16538:	00025a34 	.word	0x00025a34
   1653c:	00025df4 	.word	0x00025df4
   16540:	00025af4 	.word	0x00025af4
   16544:	00026078 	.word	0x00026078
   16548:	00025b1c 	.word	0x00025b1c

0001654c <native_base_init_wrapper>:

// This wrapper function is allows a subclass of a native type to call the
// __init__() method (corresponding to type->make_new) of the native type.
STATIC mp_obj_t native_base_init_wrapper(size_t n_args, const mp_obj_t *args) {
   1654c:	b590      	push	{r4, r7, lr}
   1654e:	b085      	sub	sp, #20
   16550:	af00      	add	r7, sp, #0
   16552:	6078      	str	r0, [r7, #4]
   16554:	6039      	str	r1, [r7, #0]
    mp_obj_instance_t *self = MP_OBJ_TO_PTR(args[0]);
   16556:	683b      	ldr	r3, [r7, #0]
   16558:	681b      	ldr	r3, [r3, #0]
   1655a:	60fb      	str	r3, [r7, #12]
    const mp_obj_type_t *native_base = NULL;
   1655c:	2300      	movs	r3, #0
   1655e:	60bb      	str	r3, [r7, #8]
    instance_count_native_bases(self->base.type, &native_base);
   16560:	68fb      	ldr	r3, [r7, #12]
   16562:	681b      	ldr	r3, [r3, #0]
   16564:	f107 0208 	add.w	r2, r7, #8
   16568:	4611      	mov	r1, r2
   1656a:	4618      	mov	r0, r3
   1656c:	f7ff ff7e 	bl	1646c <instance_count_native_bases>
    self->subobj[0] = native_base->make_new(native_base, n_args - 1, 0, args + 1);
   16570:	68bb      	ldr	r3, [r7, #8]
   16572:	68dc      	ldr	r4, [r3, #12]
   16574:	68b8      	ldr	r0, [r7, #8]
   16576:	687b      	ldr	r3, [r7, #4]
   16578:	1e59      	subs	r1, r3, #1
   1657a:	683b      	ldr	r3, [r7, #0]
   1657c:	3304      	adds	r3, #4
   1657e:	2200      	movs	r2, #0
   16580:	47a0      	blx	r4
   16582:	4602      	mov	r2, r0
   16584:	68fb      	ldr	r3, [r7, #12]
   16586:	611a      	str	r2, [r3, #16]
    return mp_const_none;
   16588:	4b02      	ldr	r3, [pc, #8]	; (16594 <native_base_init_wrapper+0x48>)
}
   1658a:	4618      	mov	r0, r3
   1658c:	3714      	adds	r7, #20
   1658e:	46bd      	mov	sp, r7
   16590:	bd90      	pop	{r4, r7, pc}
   16592:	bf00      	nop
   16594:	0002511c 	.word	0x0002511c

00016598 <mp_obj_new_instance>:
STATIC MP_DEFINE_CONST_FUN_OBJ_VAR_BETWEEN(native_base_init_wrapper_obj, 1, MP_OBJ_FUN_ARGS_MAX, native_base_init_wrapper);

#if !MICROPY_CPYTHON_COMPAT
STATIC
#endif
mp_obj_instance_t *mp_obj_new_instance(const mp_obj_type_t *class, const mp_obj_type_t **native_base) {
   16598:	b580      	push	{r7, lr}
   1659a:	b084      	sub	sp, #16
   1659c:	af00      	add	r7, sp, #0
   1659e:	6078      	str	r0, [r7, #4]
   165a0:	6039      	str	r1, [r7, #0]
    size_t num_native_bases = instance_count_native_bases(class, native_base);
   165a2:	6839      	ldr	r1, [r7, #0]
   165a4:	6878      	ldr	r0, [r7, #4]
   165a6:	f7ff ff61 	bl	1646c <instance_count_native_bases>
   165aa:	4603      	mov	r3, r0
   165ac:	60fb      	str	r3, [r7, #12]
    assert(num_native_bases < 2);
   165ae:	68fb      	ldr	r3, [r7, #12]
   165b0:	2b01      	cmp	r3, #1
   165b2:	d905      	bls.n	165c0 <mp_obj_new_instance+0x28>
   165b4:	4b10      	ldr	r3, [pc, #64]	; (165f8 <mp_obj_new_instance+0x60>)
   165b6:	4a11      	ldr	r2, [pc, #68]	; (165fc <mp_obj_new_instance+0x64>)
   165b8:	2168      	movs	r1, #104	; 0x68
   165ba:	4811      	ldr	r0, [pc, #68]	; (16600 <mp_obj_new_instance+0x68>)
   165bc:	f006 fc90 	bl	1cee0 <__assert_func>
    mp_obj_instance_t *o = m_new_obj_var(mp_obj_instance_t, mp_obj_t, num_native_bases);
   165c0:	68fb      	ldr	r3, [r7, #12]
   165c2:	3304      	adds	r3, #4
   165c4:	009b      	lsls	r3, r3, #2
   165c6:	4618      	mov	r0, r3
   165c8:	f7e9 fea8 	bl	31c <m_malloc>
   165cc:	60b8      	str	r0, [r7, #8]
    o->base.type = class;
   165ce:	68bb      	ldr	r3, [r7, #8]
   165d0:	687a      	ldr	r2, [r7, #4]
   165d2:	601a      	str	r2, [r3, #0]
    mp_map_init(&o->members, 0);
   165d4:	68bb      	ldr	r3, [r7, #8]
   165d6:	3304      	adds	r3, #4
   165d8:	2100      	movs	r1, #0
   165da:	4618      	mov	r0, r3
   165dc:	f7f7 f858 	bl	d690 <mp_map_init>
    // Initialise the native base-class slot (should be 1 at most) with a valid
    // object.  It doesn't matter which object, so long as it can be uniquely
    // distinguished from a native class that is initialised.
    if (num_native_bases != 0) {
   165e0:	68fb      	ldr	r3, [r7, #12]
   165e2:	2b00      	cmp	r3, #0
   165e4:	d002      	beq.n	165ec <mp_obj_new_instance+0x54>
        o->subobj[0] = MP_OBJ_FROM_PTR(&native_base_init_wrapper_obj);
   165e6:	68bb      	ldr	r3, [r7, #8]
   165e8:	4a06      	ldr	r2, [pc, #24]	; (16604 <mp_obj_new_instance+0x6c>)
   165ea:	611a      	str	r2, [r3, #16]
    }
    return o;
   165ec:	68bb      	ldr	r3, [r7, #8]
}
   165ee:	4618      	mov	r0, r3
   165f0:	3710      	adds	r7, #16
   165f2:	46bd      	mov	sp, r7
   165f4:	bd80      	pop	{r7, pc}
   165f6:	bf00      	nop
   165f8:	00025b3c 	.word	0x00025b3c
   165fc:	00026094 	.word	0x00026094
   16600:	00025b1c 	.word	0x00025b1c
   16604:	00025b30 	.word	0x00025b30

00016608 <mp_obj_class_lookup>:
    size_t meth_offset;
    mp_obj_t *dest;
    bool is_type;
};

STATIC void mp_obj_class_lookup(struct class_lookup_data  *lookup, const mp_obj_type_t *type) {
   16608:	b590      	push	{r4, r7, lr}
   1660a:	b08d      	sub	sp, #52	; 0x34
   1660c:	af00      	add	r7, sp, #0
   1660e:	6078      	str	r0, [r7, #4]
   16610:	6039      	str	r1, [r7, #0]
    assert(lookup->dest[0] == MP_OBJ_NULL);
   16612:	687b      	ldr	r3, [r7, #4]
   16614:	68db      	ldr	r3, [r3, #12]
   16616:	681b      	ldr	r3, [r3, #0]
   16618:	2b00      	cmp	r3, #0
   1661a:	d005      	beq.n	16628 <mp_obj_class_lookup+0x20>
   1661c:	4b8f      	ldr	r3, [pc, #572]	; (1685c <mp_obj_class_lookup+0x254>)
   1661e:	4a90      	ldr	r2, [pc, #576]	; (16860 <mp_obj_class_lookup+0x258>)
   16620:	218c      	movs	r1, #140	; 0x8c
   16622:	4890      	ldr	r0, [pc, #576]	; (16864 <mp_obj_class_lookup+0x25c>)
   16624:	f006 fc5c 	bl	1cee0 <__assert_func>
    assert(lookup->dest[1] == MP_OBJ_NULL);
   16628:	687b      	ldr	r3, [r7, #4]
   1662a:	68db      	ldr	r3, [r3, #12]
   1662c:	3304      	adds	r3, #4
   1662e:	681b      	ldr	r3, [r3, #0]
   16630:	2b00      	cmp	r3, #0
   16632:	d005      	beq.n	16640 <mp_obj_class_lookup+0x38>
   16634:	4b8c      	ldr	r3, [pc, #560]	; (16868 <mp_obj_class_lookup+0x260>)
   16636:	4a8a      	ldr	r2, [pc, #552]	; (16860 <mp_obj_class_lookup+0x258>)
   16638:	218d      	movs	r1, #141	; 0x8d
   1663a:	488a      	ldr	r0, [pc, #552]	; (16864 <mp_obj_class_lookup+0x25c>)
   1663c:	f006 fc50 	bl	1cee0 <__assert_func>
    for (;;) {
        DEBUG_printf("mp_obj_class_lookup: Looking up %s in %s\n", qstr_str(lookup->attr), qstr_str(type->name));
   16640:	687b      	ldr	r3, [r7, #4]
   16642:	685b      	ldr	r3, [r3, #4]
   16644:	4618      	mov	r0, r3
   16646:	f7ea fec3 	bl	13d0 <qstr_str>
   1664a:	4604      	mov	r4, r0
   1664c:	683b      	ldr	r3, [r7, #0]
   1664e:	88db      	ldrh	r3, [r3, #6]
   16650:	4618      	mov	r0, r3
   16652:	f7ea febd 	bl	13d0 <qstr_str>
   16656:	4603      	mov	r3, r0
   16658:	461a      	mov	r2, r3
   1665a:	4621      	mov	r1, r4
   1665c:	4883      	ldr	r0, [pc, #524]	; (1686c <mp_obj_class_lookup+0x264>)
   1665e:	f006 fac5 	bl	1cbec <DEBUG_printf>
        // Optimize special method lookup for native types
        // This avoids extra method_name => slot lookup. On the other hand,
        // this should not be applied to class types, as will result in extra
        // lookup either.
        if (lookup->meth_offset != 0 && mp_obj_is_native_type(type)) {
   16662:	687b      	ldr	r3, [r7, #4]
   16664:	689b      	ldr	r3, [r3, #8]
   16666:	2b00      	cmp	r3, #0
   16668:	d01d      	beq.n	166a6 <mp_obj_class_lookup+0x9e>
   1666a:	683b      	ldr	r3, [r7, #0]
   1666c:	68db      	ldr	r3, [r3, #12]
   1666e:	4a80      	ldr	r2, [pc, #512]	; (16870 <mp_obj_class_lookup+0x268>)
   16670:	4293      	cmp	r3, r2
   16672:	d018      	beq.n	166a6 <mp_obj_class_lookup+0x9e>
            if (*(void**)((char*)type + lookup->meth_offset) != NULL) {
   16674:	687b      	ldr	r3, [r7, #4]
   16676:	689b      	ldr	r3, [r3, #8]
   16678:	683a      	ldr	r2, [r7, #0]
   1667a:	4413      	add	r3, r2
   1667c:	681b      	ldr	r3, [r3, #0]
   1667e:	2b00      	cmp	r3, #0
   16680:	d011      	beq.n	166a6 <mp_obj_class_lookup+0x9e>
                DEBUG_printf("mp_obj_class_lookup: Matched special meth slot (off=%d) for %s\n",
   16682:	687b      	ldr	r3, [r7, #4]
   16684:	689c      	ldr	r4, [r3, #8]
   16686:	687b      	ldr	r3, [r7, #4]
   16688:	685b      	ldr	r3, [r3, #4]
   1668a:	4618      	mov	r0, r3
   1668c:	f7ea fea0 	bl	13d0 <qstr_str>
   16690:	4603      	mov	r3, r0
   16692:	461a      	mov	r2, r3
   16694:	4621      	mov	r1, r4
   16696:	4877      	ldr	r0, [pc, #476]	; (16874 <mp_obj_class_lookup+0x26c>)
   16698:	f006 faa8 	bl	1cbec <DEBUG_printf>
                    lookup->meth_offset, qstr_str(lookup->attr));
                lookup->dest[0] = MP_OBJ_SENTINEL;
   1669c:	687b      	ldr	r3, [r7, #4]
   1669e:	68db      	ldr	r3, [r3, #12]
   166a0:	2208      	movs	r2, #8
   166a2:	601a      	str	r2, [r3, #0]
                return;
   166a4:	e12b      	b.n	168fe <mp_obj_class_lookup+0x2f6>
            }
        }

        if (type->locals_dict != NULL) {
   166a6:	683b      	ldr	r3, [r7, #0]
   166a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   166aa:	2b00      	cmp	r3, #0
   166ac:	d06f      	beq.n	1678e <mp_obj_class_lookup+0x186>
            // search locals_dict (the set of methods/attributes)
            assert(type->locals_dict->base.type == &mp_type_dict); // MicroPython restriction, for now
   166ae:	683b      	ldr	r3, [r7, #0]
   166b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   166b2:	681b      	ldr	r3, [r3, #0]
   166b4:	4a70      	ldr	r2, [pc, #448]	; (16878 <mp_obj_class_lookup+0x270>)
   166b6:	4293      	cmp	r3, r2
   166b8:	d005      	beq.n	166c6 <mp_obj_class_lookup+0xbe>
   166ba:	4b70      	ldr	r3, [pc, #448]	; (1687c <mp_obj_class_lookup+0x274>)
   166bc:	4a68      	ldr	r2, [pc, #416]	; (16860 <mp_obj_class_lookup+0x258>)
   166be:	219f      	movs	r1, #159	; 0x9f
   166c0:	4868      	ldr	r0, [pc, #416]	; (16864 <mp_obj_class_lookup+0x25c>)
   166c2:	f006 fc0d 	bl	1cee0 <__assert_func>
            mp_map_t *locals_map = &type->locals_dict->map;
   166c6:	683b      	ldr	r3, [r7, #0]
   166c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   166ca:	3304      	adds	r3, #4
   166cc:	627b      	str	r3, [r7, #36]	; 0x24
            mp_map_elem_t *elem = mp_map_lookup(locals_map, MP_OBJ_NEW_QSTR(lookup->attr), MP_MAP_LOOKUP);
   166ce:	687b      	ldr	r3, [r7, #4]
   166d0:	685b      	ldr	r3, [r3, #4]
   166d2:	009b      	lsls	r3, r3, #2
   166d4:	f043 0302 	orr.w	r3, r3, #2
   166d8:	2200      	movs	r2, #0
   166da:	4619      	mov	r1, r3
   166dc:	6a78      	ldr	r0, [r7, #36]	; 0x24
   166de:	f7f7 f8d7 	bl	d890 <mp_map_lookup>
   166e2:	6238      	str	r0, [r7, #32]
            if (elem != NULL) {
   166e4:	6a3b      	ldr	r3, [r7, #32]
   166e6:	2b00      	cmp	r3, #0
   166e8:	d051      	beq.n	1678e <mp_obj_class_lookup+0x186>
                if (lookup->is_type) {
   166ea:	687b      	ldr	r3, [r7, #4]
   166ec:	7c1b      	ldrb	r3, [r3, #16]
   166ee:	2b00      	cmp	r3, #0
   166f0:	d00b      	beq.n	1670a <mp_obj_class_lookup+0x102>
                    // If we look up a class method, we need to return original type for which we
                    // do a lookup, not a (base) type in which we found the class method.
                    const mp_obj_type_t *org_type = (const mp_obj_type_t*)lookup->obj;
   166f2:	687b      	ldr	r3, [r7, #4]
   166f4:	681b      	ldr	r3, [r3, #0]
   166f6:	61fb      	str	r3, [r7, #28]
                    mp_convert_member_lookup(MP_OBJ_NULL, org_type, elem->value, lookup->dest);
   166f8:	6a3b      	ldr	r3, [r7, #32]
   166fa:	685a      	ldr	r2, [r3, #4]
   166fc:	687b      	ldr	r3, [r7, #4]
   166fe:	68db      	ldr	r3, [r3, #12]
   16700:	69f9      	ldr	r1, [r7, #28]
   16702:	2000      	movs	r0, #0
   16704:	f7f6 f97c 	bl	ca00 <mp_convert_member_lookup>
   16708:	e01c      	b.n	16744 <mp_obj_class_lookup+0x13c>
                } else {
                    mp_obj_instance_t *obj = lookup->obj;
   1670a:	687b      	ldr	r3, [r7, #4]
   1670c:	681b      	ldr	r3, [r3, #0]
   1670e:	61bb      	str	r3, [r7, #24]
                    mp_obj_t obj_obj;
                    if (obj != NULL && mp_obj_is_native_type(type) && type != &mp_type_object /* object is not a real type */) {
   16710:	69bb      	ldr	r3, [r7, #24]
   16712:	2b00      	cmp	r3, #0
   16714:	d00c      	beq.n	16730 <mp_obj_class_lookup+0x128>
   16716:	683b      	ldr	r3, [r7, #0]
   16718:	68db      	ldr	r3, [r3, #12]
   1671a:	4a55      	ldr	r2, [pc, #340]	; (16870 <mp_obj_class_lookup+0x268>)
   1671c:	4293      	cmp	r3, r2
   1671e:	d007      	beq.n	16730 <mp_obj_class_lookup+0x128>
   16720:	683b      	ldr	r3, [r7, #0]
   16722:	4a57      	ldr	r2, [pc, #348]	; (16880 <mp_obj_class_lookup+0x278>)
   16724:	4293      	cmp	r3, r2
   16726:	d003      	beq.n	16730 <mp_obj_class_lookup+0x128>
                        // If we're dealing with native base class, then it applies to native sub-object
                        obj_obj = obj->subobj[0];
   16728:	69bb      	ldr	r3, [r7, #24]
   1672a:	691b      	ldr	r3, [r3, #16]
   1672c:	62fb      	str	r3, [r7, #44]	; 0x2c
   1672e:	e001      	b.n	16734 <mp_obj_class_lookup+0x12c>
                    } else {
                        obj_obj = MP_OBJ_FROM_PTR(obj);
   16730:	69bb      	ldr	r3, [r7, #24]
   16732:	62fb      	str	r3, [r7, #44]	; 0x2c
                    }
                    mp_convert_member_lookup(obj_obj, type, elem->value, lookup->dest);
   16734:	6a3b      	ldr	r3, [r7, #32]
   16736:	685a      	ldr	r2, [r3, #4]
   16738:	687b      	ldr	r3, [r7, #4]
   1673a:	68db      	ldr	r3, [r3, #12]
   1673c:	6839      	ldr	r1, [r7, #0]
   1673e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   16740:	f7f6 f95e 	bl	ca00 <mp_convert_member_lookup>
                }
#if DEBUG_PRINT
                DEBUG_printf("mp_obj_class_lookup: Returning: ");
   16744:	484f      	ldr	r0, [pc, #316]	; (16884 <mp_obj_class_lookup+0x27c>)
   16746:	f006 fa51 	bl	1cbec <DEBUG_printf>
                mp_obj_print_helper(MICROPY_DEBUG_PRINTER, lookup->dest[0], PRINT_REPR);
   1674a:	687b      	ldr	r3, [r7, #4]
   1674c:	68db      	ldr	r3, [r3, #12]
   1674e:	681b      	ldr	r3, [r3, #0]
   16750:	2201      	movs	r2, #1
   16752:	4619      	mov	r1, r3
   16754:	484c      	ldr	r0, [pc, #304]	; (16888 <mp_obj_class_lookup+0x280>)
   16756:	f7f7 fab2 	bl	dcbe <mp_obj_print_helper>
                if (lookup->dest[1] != MP_OBJ_NULL) {
   1675a:	687b      	ldr	r3, [r7, #4]
   1675c:	68db      	ldr	r3, [r3, #12]
   1675e:	3304      	adds	r3, #4
   16760:	681b      	ldr	r3, [r3, #0]
   16762:	2b00      	cmp	r3, #0
   16764:	d00f      	beq.n	16786 <mp_obj_class_lookup+0x17e>
                    // Don't try to repr() lookup->dest[1], as we can be called recursively
                    DEBUG_printf(" <%s @%p>", mp_obj_get_type_str(lookup->dest[1]), MP_OBJ_TO_PTR(lookup->dest[1]));
   16766:	687b      	ldr	r3, [r7, #4]
   16768:	68db      	ldr	r3, [r3, #12]
   1676a:	3304      	adds	r3, #4
   1676c:	681b      	ldr	r3, [r3, #0]
   1676e:	4618      	mov	r0, r3
   16770:	f7f7 fa94 	bl	dc9c <mp_obj_get_type_str>
   16774:	4601      	mov	r1, r0
   16776:	687b      	ldr	r3, [r7, #4]
   16778:	68db      	ldr	r3, [r3, #12]
   1677a:	3304      	adds	r3, #4
   1677c:	681b      	ldr	r3, [r3, #0]
   1677e:	461a      	mov	r2, r3
   16780:	4842      	ldr	r0, [pc, #264]	; (1688c <mp_obj_class_lookup+0x284>)
   16782:	f006 fa33 	bl	1cbec <DEBUG_printf>
                }
                DEBUG_printf("\n");
   16786:	4842      	ldr	r0, [pc, #264]	; (16890 <mp_obj_class_lookup+0x288>)
   16788:	f006 fa30 	bl	1cbec <DEBUG_printf>
#endif
                return;
   1678c:	e0b7      	b.n	168fe <mp_obj_class_lookup+0x2f6>
        }

        // Previous code block takes care about attributes defined in .locals_dict,
        // but some attributes of native types may be handled using .load_attr method,
        // so make sure we try to lookup those too.
        if (lookup->obj != NULL && !lookup->is_type && mp_obj_is_native_type(type) && type != &mp_type_object /* object is not a real type */) {
   1678e:	687b      	ldr	r3, [r7, #4]
   16790:	681b      	ldr	r3, [r3, #0]
   16792:	2b00      	cmp	r3, #0
   16794:	d01f      	beq.n	167d6 <mp_obj_class_lookup+0x1ce>
   16796:	687b      	ldr	r3, [r7, #4]
   16798:	7c1b      	ldrb	r3, [r3, #16]
   1679a:	f083 0301 	eor.w	r3, r3, #1
   1679e:	b2db      	uxtb	r3, r3
   167a0:	2b00      	cmp	r3, #0
   167a2:	d018      	beq.n	167d6 <mp_obj_class_lookup+0x1ce>
   167a4:	683b      	ldr	r3, [r7, #0]
   167a6:	68db      	ldr	r3, [r3, #12]
   167a8:	4a31      	ldr	r2, [pc, #196]	; (16870 <mp_obj_class_lookup+0x268>)
   167aa:	4293      	cmp	r3, r2
   167ac:	d013      	beq.n	167d6 <mp_obj_class_lookup+0x1ce>
   167ae:	683b      	ldr	r3, [r7, #0]
   167b0:	4a33      	ldr	r2, [pc, #204]	; (16880 <mp_obj_class_lookup+0x278>)
   167b2:	4293      	cmp	r3, r2
   167b4:	d00f      	beq.n	167d6 <mp_obj_class_lookup+0x1ce>
            mp_load_method_maybe(lookup->obj->subobj[0], lookup->attr, lookup->dest);
   167b6:	687b      	ldr	r3, [r7, #4]
   167b8:	681b      	ldr	r3, [r3, #0]
   167ba:	6918      	ldr	r0, [r3, #16]
   167bc:	687b      	ldr	r3, [r7, #4]
   167be:	6859      	ldr	r1, [r3, #4]
   167c0:	687b      	ldr	r3, [r7, #4]
   167c2:	68db      	ldr	r3, [r3, #12]
   167c4:	461a      	mov	r2, r3
   167c6:	f7f6 f98f 	bl	cae8 <mp_load_method_maybe>
            if (lookup->dest[0] != MP_OBJ_NULL) {
   167ca:	687b      	ldr	r3, [r7, #4]
   167cc:	68db      	ldr	r3, [r3, #12]
   167ce:	681b      	ldr	r3, [r3, #0]
   167d0:	2b00      	cmp	r3, #0
   167d2:	f040 808f 	bne.w	168f4 <mp_obj_class_lookup+0x2ec>
            }
        }

        // attribute not found, keep searching base classes

        if (type->parent == NULL) {
   167d6:	683b      	ldr	r3, [r7, #0]
   167d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   167da:	2b00      	cmp	r3, #0
   167dc:	d103      	bne.n	167e6 <mp_obj_class_lookup+0x1de>
            DEBUG_printf("mp_obj_class_lookup: No more parents\n");
   167de:	482d      	ldr	r0, [pc, #180]	; (16894 <mp_obj_class_lookup+0x28c>)
   167e0:	f006 fa04 	bl	1cbec <DEBUG_printf>
            return;
   167e4:	e08b      	b.n	168fe <mp_obj_class_lookup+0x2f6>
        #if MICROPY_MULTIPLE_INHERITANCE
        } else if (((mp_obj_base_t*)type->parent)->type == &mp_type_tuple) {
   167e6:	683b      	ldr	r3, [r7, #0]
   167e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   167ea:	681b      	ldr	r3, [r3, #0]
   167ec:	4a2a      	ldr	r2, [pc, #168]	; (16898 <mp_obj_class_lookup+0x290>)
   167ee:	4293      	cmp	r3, r2
   167f0:	d178      	bne.n	168e4 <mp_obj_class_lookup+0x2dc>
            const mp_obj_tuple_t *parent_tuple = type->parent;
   167f2:	683b      	ldr	r3, [r7, #0]
   167f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   167f6:	617b      	str	r3, [r7, #20]
            const mp_obj_t *item = parent_tuple->items;
   167f8:	697b      	ldr	r3, [r7, #20]
   167fa:	3308      	adds	r3, #8
   167fc:	62bb      	str	r3, [r7, #40]	; 0x28
            const mp_obj_t *top = item + parent_tuple->len - 1;
   167fe:	697b      	ldr	r3, [r7, #20]
   16800:	685b      	ldr	r3, [r3, #4]
   16802:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   16806:	3b01      	subs	r3, #1
   16808:	009b      	lsls	r3, r3, #2
   1680a:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1680c:	4413      	add	r3, r2
   1680e:	613b      	str	r3, [r7, #16]
            for (; item < top; ++item) {
   16810:	e04c      	b.n	168ac <mp_obj_class_lookup+0x2a4>
                assert(MP_OBJ_IS_TYPE(*item, &mp_type_type));
   16812:	6abb      	ldr	r3, [r7, #40]	; 0x28
   16814:	681b      	ldr	r3, [r3, #0]
   16816:	4618      	mov	r0, r3
   16818:	f7ff fdfa 	bl	16410 <MP_OBJ_IS_OBJ>
   1681c:	4603      	mov	r3, r0
   1681e:	2b00      	cmp	r3, #0
   16820:	d005      	beq.n	1682e <mp_obj_class_lookup+0x226>
   16822:	6abb      	ldr	r3, [r7, #40]	; 0x28
   16824:	681b      	ldr	r3, [r3, #0]
   16826:	681b      	ldr	r3, [r3, #0]
   16828:	4a1c      	ldr	r2, [pc, #112]	; (1689c <mp_obj_class_lookup+0x294>)
   1682a:	4293      	cmp	r3, r2
   1682c:	d005      	beq.n	1683a <mp_obj_class_lookup+0x232>
   1682e:	4b1c      	ldr	r3, [pc, #112]	; (168a0 <mp_obj_class_lookup+0x298>)
   16830:	4a0b      	ldr	r2, [pc, #44]	; (16860 <mp_obj_class_lookup+0x258>)
   16832:	21d5      	movs	r1, #213	; 0xd5
   16834:	480b      	ldr	r0, [pc, #44]	; (16864 <mp_obj_class_lookup+0x25c>)
   16836:	f006 fb53 	bl	1cee0 <__assert_func>
                mp_obj_type_t *bt = (mp_obj_type_t*)MP_OBJ_TO_PTR(*item);
   1683a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1683c:	681b      	ldr	r3, [r3, #0]
   1683e:	60fb      	str	r3, [r7, #12]
                if (bt == &mp_type_object) {
   16840:	68fb      	ldr	r3, [r7, #12]
   16842:	4a0f      	ldr	r2, [pc, #60]	; (16880 <mp_obj_class_lookup+0x278>)
   16844:	4293      	cmp	r3, r2
   16846:	d02d      	beq.n	168a4 <mp_obj_class_lookup+0x29c>
                    // Not a "real" type
                    continue;
                }
                mp_obj_class_lookup(lookup, bt);
   16848:	68f9      	ldr	r1, [r7, #12]
   1684a:	6878      	ldr	r0, [r7, #4]
   1684c:	f7ff fedc 	bl	16608 <mp_obj_class_lookup>
                if (lookup->dest[0] != MP_OBJ_NULL) {
   16850:	687b      	ldr	r3, [r7, #4]
   16852:	68db      	ldr	r3, [r3, #12]
   16854:	681b      	ldr	r3, [r3, #0]
   16856:	2b00      	cmp	r3, #0
   16858:	d14e      	bne.n	168f8 <mp_obj_class_lookup+0x2f0>
   1685a:	e024      	b.n	168a6 <mp_obj_class_lookup+0x29e>
   1685c:	00025b54 	.word	0x00025b54
   16860:	000260a8 	.word	0x000260a8
   16864:	00025b1c 	.word	0x00025b1c
   16868:	00025b74 	.word	0x00025b74
   1686c:	00025b94 	.word	0x00025b94
   16870:	00016a25 	.word	0x00016a25
   16874:	00025bc0 	.word	0x00025bc0
   16878:	00023d0c 	.word	0x00023d0c
   1687c:	00025c00 	.word	0x00025c00
   16880:	00025060 	.word	0x00025060
   16884:	00025c30 	.word	0x00025c30
   16888:	000210cc 	.word	0x000210cc
   1688c:	00025c54 	.word	0x00025c54
   16890:	00025c60 	.word	0x00025c60
   16894:	00025c64 	.word	0x00025c64
   16898:	00025a34 	.word	0x00025a34
   1689c:	00025df4 	.word	0x00025df4
   168a0:	00025af4 	.word	0x00025af4
                    continue;
   168a4:	bf00      	nop
            for (; item < top; ++item) {
   168a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
   168a8:	3304      	adds	r3, #4
   168aa:	62bb      	str	r3, [r7, #40]	; 0x28
   168ac:	6aba      	ldr	r2, [r7, #40]	; 0x28
   168ae:	693b      	ldr	r3, [r7, #16]
   168b0:	429a      	cmp	r2, r3
   168b2:	d3ae      	bcc.n	16812 <mp_obj_class_lookup+0x20a>
                    return;
                }
            }

            // search last base (simple tail recursion elimination)
            assert(MP_OBJ_IS_TYPE(*item, &mp_type_type));
   168b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
   168b6:	681b      	ldr	r3, [r3, #0]
   168b8:	4618      	mov	r0, r3
   168ba:	f7ff fda9 	bl	16410 <MP_OBJ_IS_OBJ>
   168be:	4603      	mov	r3, r0
   168c0:	2b00      	cmp	r3, #0
   168c2:	d005      	beq.n	168d0 <mp_obj_class_lookup+0x2c8>
   168c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
   168c6:	681b      	ldr	r3, [r3, #0]
   168c8:	681b      	ldr	r3, [r3, #0]
   168ca:	4a0e      	ldr	r2, [pc, #56]	; (16904 <mp_obj_class_lookup+0x2fc>)
   168cc:	4293      	cmp	r3, r2
   168ce:	d005      	beq.n	168dc <mp_obj_class_lookup+0x2d4>
   168d0:	4b0d      	ldr	r3, [pc, #52]	; (16908 <mp_obj_class_lookup+0x300>)
   168d2:	4a0e      	ldr	r2, [pc, #56]	; (1690c <mp_obj_class_lookup+0x304>)
   168d4:	21e2      	movs	r1, #226	; 0xe2
   168d6:	480e      	ldr	r0, [pc, #56]	; (16910 <mp_obj_class_lookup+0x308>)
   168d8:	f006 fb02 	bl	1cee0 <__assert_func>
            type = (mp_obj_type_t*)MP_OBJ_TO_PTR(*item);
   168dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
   168de:	681b      	ldr	r3, [r3, #0]
   168e0:	603b      	str	r3, [r7, #0]
   168e2:	e002      	b.n	168ea <mp_obj_class_lookup+0x2e2>
        #endif
        } else {
            type = type->parent;
   168e4:	683b      	ldr	r3, [r7, #0]
   168e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   168e8:	603b      	str	r3, [r7, #0]
        }
        if (type == &mp_type_object) {
   168ea:	683b      	ldr	r3, [r7, #0]
   168ec:	4a09      	ldr	r2, [pc, #36]	; (16914 <mp_obj_class_lookup+0x30c>)
   168ee:	4293      	cmp	r3, r2
   168f0:	d004      	beq.n	168fc <mp_obj_class_lookup+0x2f4>
        DEBUG_printf("mp_obj_class_lookup: Looking up %s in %s\n", qstr_str(lookup->attr), qstr_str(type->name));
   168f2:	e6a5      	b.n	16640 <mp_obj_class_lookup+0x38>
                return;
   168f4:	bf00      	nop
   168f6:	e002      	b.n	168fe <mp_obj_class_lookup+0x2f6>
                    return;
   168f8:	bf00      	nop
   168fa:	e000      	b.n	168fe <mp_obj_class_lookup+0x2f6>
            // Not a "real" type
            return;
   168fc:	bf00      	nop
        }
    }
}
   168fe:	3734      	adds	r7, #52	; 0x34
   16900:	46bd      	mov	sp, r7
   16902:	bd90      	pop	{r4, r7, pc}
   16904:	00025df4 	.word	0x00025df4
   16908:	00025af4 	.word	0x00025af4
   1690c:	000260a8 	.word	0x000260a8
   16910:	00025b1c 	.word	0x00025b1c
   16914:	00025060 	.word	0x00025060

00016918 <instance_print>:

STATIC void instance_print(const mp_print_t *print, mp_obj_t self_in, mp_print_kind_t kind) {
   16918:	b580      	push	{r7, lr}
   1691a:	b08e      	sub	sp, #56	; 0x38
   1691c:	af00      	add	r7, sp, #0
   1691e:	60f8      	str	r0, [r7, #12]
   16920:	60b9      	str	r1, [r7, #8]
   16922:	607a      	str	r2, [r7, #4]
    mp_obj_instance_t *self = MP_OBJ_TO_PTR(self_in);
   16924:	68bb      	ldr	r3, [r7, #8]
   16926:	637b      	str	r3, [r7, #52]	; 0x34
    qstr meth = (kind == PRINT_STR) ? MP_QSTR___str__ : MP_QSTR___repr__;
   16928:	687b      	ldr	r3, [r7, #4]
   1692a:	2b00      	cmp	r3, #0
   1692c:	d101      	bne.n	16932 <instance_print+0x1a>
   1692e:	2324      	movs	r3, #36	; 0x24
   16930:	e000      	b.n	16934 <instance_print+0x1c>
   16932:	2322      	movs	r3, #34	; 0x22
   16934:	633b      	str	r3, [r7, #48]	; 0x30
    mp_obj_t member[2] = {MP_OBJ_NULL};
   16936:	f107 0324 	add.w	r3, r7, #36	; 0x24
   1693a:	2200      	movs	r2, #0
   1693c:	601a      	str	r2, [r3, #0]
   1693e:	605a      	str	r2, [r3, #4]
    struct class_lookup_data lookup = {
   16940:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   16942:	613b      	str	r3, [r7, #16]
   16944:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   16946:	617b      	str	r3, [r7, #20]
   16948:	2308      	movs	r3, #8
   1694a:	61bb      	str	r3, [r7, #24]
   1694c:	f107 0324 	add.w	r3, r7, #36	; 0x24
   16950:	61fb      	str	r3, [r7, #28]
   16952:	2300      	movs	r3, #0
   16954:	f887 3020 	strb.w	r3, [r7, #32]
        .attr = meth,
        .meth_offset = offsetof(mp_obj_type_t, print),
        .dest = member,
        .is_type = false,
    };
    mp_obj_class_lookup(&lookup, self->base.type);
   16958:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1695a:	681a      	ldr	r2, [r3, #0]
   1695c:	f107 0310 	add.w	r3, r7, #16
   16960:	4611      	mov	r1, r2
   16962:	4618      	mov	r0, r3
   16964:	f7ff fe50 	bl	16608 <mp_obj_class_lookup>
    if (member[0] == MP_OBJ_NULL && kind == PRINT_STR) {
   16968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1696a:	2b00      	cmp	r3, #0
   1696c:	d10e      	bne.n	1698c <instance_print+0x74>
   1696e:	687b      	ldr	r3, [r7, #4]
   16970:	2b00      	cmp	r3, #0
   16972:	d10b      	bne.n	1698c <instance_print+0x74>
        // If there's no __str__, fall back to __repr__
        lookup.attr = MP_QSTR___repr__;
   16974:	2322      	movs	r3, #34	; 0x22
   16976:	617b      	str	r3, [r7, #20]
        lookup.meth_offset = 0;
   16978:	2300      	movs	r3, #0
   1697a:	61bb      	str	r3, [r7, #24]
        mp_obj_class_lookup(&lookup, self->base.type);
   1697c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1697e:	681a      	ldr	r2, [r3, #0]
   16980:	f107 0310 	add.w	r3, r7, #16
   16984:	4611      	mov	r1, r2
   16986:	4618      	mov	r0, r3
   16988:	f7ff fe3e 	bl	16608 <mp_obj_class_lookup>
    }

    if (member[0] == MP_OBJ_SENTINEL) {
   1698c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1698e:	2b08      	cmp	r3, #8
   16990:	d129      	bne.n	169e6 <instance_print+0xce>
        // Handle Exception subclasses specially
        if (mp_obj_is_native_exception_instance(self->subobj[0])) {
   16992:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   16994:	691b      	ldr	r3, [r3, #16]
   16996:	4618      	mov	r0, r3
   16998:	f7f7 f960 	bl	dc5c <mp_obj_get_type>
   1699c:	4603      	mov	r3, r0
   1699e:	68db      	ldr	r3, [r3, #12]
   169a0:	4a1e      	ldr	r2, [pc, #120]	; (16a1c <instance_print+0x104>)
   169a2:	4293      	cmp	r3, r2
   169a4:	d117      	bne.n	169d6 <instance_print+0xbe>
            if (kind != PRINT_STR) {
   169a6:	687b      	ldr	r3, [r7, #4]
   169a8:	2b00      	cmp	r3, #0
   169aa:	d00a      	beq.n	169c2 <instance_print+0xaa>
                mp_print_str(print, qstr_str(self->base.type->name));
   169ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   169ae:	681b      	ldr	r3, [r3, #0]
   169b0:	88db      	ldrh	r3, [r3, #6]
   169b2:	4618      	mov	r0, r3
   169b4:	f7ea fd0c 	bl	13d0 <qstr_str>
   169b8:	4603      	mov	r3, r0
   169ba:	4619      	mov	r1, r3
   169bc:	68f8      	ldr	r0, [r7, #12]
   169be:	f7eb f845 	bl	1a4c <mp_print_str>
            }
            mp_obj_print_helper(print, self->subobj[0], kind | PRINT_EXC_SUBCLASS);
   169c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   169c4:	6919      	ldr	r1, [r3, #16]
   169c6:	687b      	ldr	r3, [r7, #4]
   169c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   169cc:	461a      	mov	r2, r3
   169ce:	68f8      	ldr	r0, [r7, #12]
   169d0:	f7f7 f975 	bl	dcbe <mp_obj_print_helper>
        } else {
            mp_obj_print_helper(print, self->subobj[0], kind);
        }
        return;
   169d4:	e01f      	b.n	16a16 <instance_print+0xfe>
            mp_obj_print_helper(print, self->subobj[0], kind);
   169d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   169d8:	691b      	ldr	r3, [r3, #16]
   169da:	687a      	ldr	r2, [r7, #4]
   169dc:	4619      	mov	r1, r3
   169de:	68f8      	ldr	r0, [r7, #12]
   169e0:	f7f7 f96d 	bl	dcbe <mp_obj_print_helper>
        return;
   169e4:	e017      	b.n	16a16 <instance_print+0xfe>
    }

    if (member[0] != MP_OBJ_NULL) {
   169e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   169e8:	2b00      	cmp	r3, #0
   169ea:	d00b      	beq.n	16a04 <instance_print+0xec>
        mp_obj_t r = mp_call_function_1(member[0], self_in);
   169ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   169ee:	68b9      	ldr	r1, [r7, #8]
   169f0:	4618      	mov	r0, r3
   169f2:	f7f5 fb7a 	bl	c0ea <mp_call_function_1>
   169f6:	62f8      	str	r0, [r7, #44]	; 0x2c
        mp_obj_print_helper(print, r, PRINT_STR);
   169f8:	2200      	movs	r2, #0
   169fa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
   169fc:	68f8      	ldr	r0, [r7, #12]
   169fe:	f7f7 f95e 	bl	dcbe <mp_obj_print_helper>
        return;
   16a02:	e008      	b.n	16a16 <instance_print+0xfe>
    }

    // TODO: CPython prints fully-qualified type name
    mp_printf(print, "<%s object at %p>", mp_obj_get_type_str(self_in), self);
   16a04:	68b8      	ldr	r0, [r7, #8]
   16a06:	f7f7 f949 	bl	dc9c <mp_obj_get_type_str>
   16a0a:	4602      	mov	r2, r0
   16a0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   16a0e:	4904      	ldr	r1, [pc, #16]	; (16a20 <instance_print+0x108>)
   16a10:	68f8      	ldr	r0, [r7, #12]
   16a12:	f7eb fb2d 	bl	2070 <mp_printf>
}
   16a16:	3738      	adds	r7, #56	; 0x38
   16a18:	46bd      	mov	sp, r7
   16a1a:	bd80      	pop	{r7, pc}
   16a1c:	0000f795 	.word	0x0000f795
   16a20:	00025c8c 	.word	0x00025c8c

00016a24 <mp_obj_instance_make_new>:

mp_obj_t mp_obj_instance_make_new(const mp_obj_type_t *self, size_t n_args, size_t n_kw, const mp_obj_t *args) {
   16a24:	b590      	push	{r4, r7, lr}
   16a26:	b093      	sub	sp, #76	; 0x4c
   16a28:	af00      	add	r7, sp, #0
   16a2a:	60f8      	str	r0, [r7, #12]
   16a2c:	60b9      	str	r1, [r7, #8]
   16a2e:	607a      	str	r2, [r7, #4]
   16a30:	603b      	str	r3, [r7, #0]
    assert(mp_obj_is_instance_type(self));
   16a32:	68fb      	ldr	r3, [r7, #12]
   16a34:	68db      	ldr	r3, [r3, #12]
   16a36:	4a6b      	ldr	r2, [pc, #428]	; (16be4 <mp_obj_instance_make_new+0x1c0>)
   16a38:	4293      	cmp	r3, r2
   16a3a:	d006      	beq.n	16a4a <mp_obj_instance_make_new+0x26>
   16a3c:	4b6a      	ldr	r3, [pc, #424]	; (16be8 <mp_obj_instance_make_new+0x1c4>)
   16a3e:	4a6b      	ldr	r2, [pc, #428]	; (16bec <mp_obj_instance_make_new+0x1c8>)
   16a40:	f44f 718d 	mov.w	r1, #282	; 0x11a
   16a44:	486a      	ldr	r0, [pc, #424]	; (16bf0 <mp_obj_instance_make_new+0x1cc>)
   16a46:	f006 fa4b 	bl	1cee0 <__assert_func>

    // look for __new__ function
    mp_obj_t init_fn[2] = {MP_OBJ_NULL};
   16a4a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   16a4e:	2200      	movs	r2, #0
   16a50:	601a      	str	r2, [r3, #0]
   16a52:	605a      	str	r2, [r3, #4]
    struct class_lookup_data lookup = {
   16a54:	2300      	movs	r3, #0
   16a56:	61bb      	str	r3, [r7, #24]
   16a58:	231d      	movs	r3, #29
   16a5a:	61fb      	str	r3, [r7, #28]
   16a5c:	230c      	movs	r3, #12
   16a5e:	623b      	str	r3, [r7, #32]
   16a60:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   16a64:	627b      	str	r3, [r7, #36]	; 0x24
   16a66:	2300      	movs	r3, #0
   16a68:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
        .attr = MP_QSTR___new__,
        .meth_offset = offsetof(mp_obj_type_t, make_new),
        .dest = init_fn,
        .is_type = false,
    };
    mp_obj_class_lookup(&lookup, self);
   16a6c:	f107 0318 	add.w	r3, r7, #24
   16a70:	68f9      	ldr	r1, [r7, #12]
   16a72:	4618      	mov	r0, r3
   16a74:	f7ff fdc8 	bl	16608 <mp_obj_class_lookup>

    const mp_obj_type_t *native_base = NULL;
   16a78:	2300      	movs	r3, #0
   16a7a:	617b      	str	r3, [r7, #20]
    mp_obj_instance_t *o;
    if (init_fn[0] == MP_OBJ_NULL || init_fn[0] == MP_OBJ_SENTINEL) {
   16a7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   16a7e:	2b00      	cmp	r3, #0
   16a80:	d002      	beq.n	16a88 <mp_obj_instance_make_new+0x64>
   16a82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   16a84:	2b08      	cmp	r3, #8
   16a86:	d107      	bne.n	16a98 <mp_obj_instance_make_new+0x74>
        // Either there is no __new__() method defined or there is a native
        // constructor.  In both cases create a blank instance.
        o = mp_obj_new_instance(self, &native_base);
   16a88:	f107 0314 	add.w	r3, r7, #20
   16a8c:	4619      	mov	r1, r3
   16a8e:	68f8      	ldr	r0, [r7, #12]
   16a90:	f7ff fd82 	bl	16598 <mp_obj_new_instance>
   16a94:	6478      	str	r0, [r7, #68]	; 0x44
   16a96:	e03e      	b.n	16b16 <mp_obj_instance_make_new+0xf2>
        // said native constructor.

    } else {
        // Call Python class __new__ function with all args to create an instance
        mp_obj_t new_ret;
        if (n_args == 0 && n_kw == 0) {
   16a98:	68bb      	ldr	r3, [r7, #8]
   16a9a:	2b00      	cmp	r3, #0
   16a9c:	d10d      	bne.n	16aba <mp_obj_instance_make_new+0x96>
   16a9e:	687b      	ldr	r3, [r7, #4]
   16aa0:	2b00      	cmp	r3, #0
   16aa2:	d10a      	bne.n	16aba <mp_obj_instance_make_new+0x96>
            mp_obj_t args2[1] = {MP_OBJ_FROM_PTR(self)};
   16aa4:	68fb      	ldr	r3, [r7, #12]
   16aa6:	613b      	str	r3, [r7, #16]
            new_ret = mp_call_function_n_kw(init_fn[0], 1, 0, args2);
   16aa8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   16aaa:	f107 0310 	add.w	r3, r7, #16
   16aae:	2200      	movs	r2, #0
   16ab0:	2101      	movs	r1, #1
   16ab2:	f7f5 fb40 	bl	c136 <mp_call_function_n_kw>
   16ab6:	6438      	str	r0, [r7, #64]	; 0x40
        if (n_args == 0 && n_kw == 0) {
   16ab8:	e022      	b.n	16b00 <mp_obj_instance_make_new+0xdc>
        } else {
            mp_obj_t *args2 = m_new(mp_obj_t, 1 + n_args + 2 * n_kw);
   16aba:	687b      	ldr	r3, [r7, #4]
   16abc:	005a      	lsls	r2, r3, #1
   16abe:	68bb      	ldr	r3, [r7, #8]
   16ac0:	4413      	add	r3, r2
   16ac2:	3301      	adds	r3, #1
   16ac4:	009b      	lsls	r3, r3, #2
   16ac6:	4618      	mov	r0, r3
   16ac8:	f7e9 fc28 	bl	31c <m_malloc>
   16acc:	63b8      	str	r0, [r7, #56]	; 0x38
            args2[0] = MP_OBJ_FROM_PTR(self);
   16ace:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   16ad0:	68fa      	ldr	r2, [r7, #12]
   16ad2:	601a      	str	r2, [r3, #0]
            memcpy(args2 + 1, args, (n_args + 2 * n_kw) * sizeof(mp_obj_t));
   16ad4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   16ad6:	1d18      	adds	r0, r3, #4
   16ad8:	687b      	ldr	r3, [r7, #4]
   16ada:	005a      	lsls	r2, r3, #1
   16adc:	68bb      	ldr	r3, [r7, #8]
   16ade:	4413      	add	r3, r2
   16ae0:	009b      	lsls	r3, r3, #2
   16ae2:	461a      	mov	r2, r3
   16ae4:	6839      	ldr	r1, [r7, #0]
   16ae6:	f007 fd23 	bl	1e530 <memcpy>
            new_ret = mp_call_function_n_kw(init_fn[0], n_args + 1, n_kw, args2);
   16aea:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   16aec:	68bb      	ldr	r3, [r7, #8]
   16aee:	1c59      	adds	r1, r3, #1
   16af0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   16af2:	687a      	ldr	r2, [r7, #4]
   16af4:	f7f5 fb1f 	bl	c136 <mp_call_function_n_kw>
   16af8:	6438      	str	r0, [r7, #64]	; 0x40
            m_del(mp_obj_t, args2, 1 + n_args + 2 * n_kw);
   16afa:	6bb8      	ldr	r0, [r7, #56]	; 0x38
   16afc:	f7e9 fc8c 	bl	418 <m_free>
        }

        // https://docs.python.org/3.4/reference/datamodel.html#object.__new__
        // "If __new__() does not return an instance of cls, then the new
        // instance's __init__() method will not be invoked."
        if (mp_obj_get_type(new_ret) != self) {
   16b00:	6c38      	ldr	r0, [r7, #64]	; 0x40
   16b02:	f7f7 f8ab 	bl	dc5c <mp_obj_get_type>
   16b06:	4602      	mov	r2, r0
   16b08:	68fb      	ldr	r3, [r7, #12]
   16b0a:	429a      	cmp	r2, r3
   16b0c:	d001      	beq.n	16b12 <mp_obj_instance_make_new+0xee>
            return new_ret;
   16b0e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   16b10:	e063      	b.n	16bda <mp_obj_instance_make_new+0x1b6>
        }

        // The instance returned by __new__() becomes the new object
        o = MP_OBJ_TO_PTR(new_ret);
   16b12:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   16b14:	647b      	str	r3, [r7, #68]	; 0x44
    }

    // now call Python class __init__ function with all args
    // This method has a chance to call super().__init__() to construct a
    // possible native base class.
    init_fn[0] = init_fn[1] = MP_OBJ_NULL;
   16b16:	2300      	movs	r3, #0
   16b18:	633b      	str	r3, [r7, #48]	; 0x30
   16b1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   16b1c:	62fb      	str	r3, [r7, #44]	; 0x2c
    lookup.obj = o;
   16b1e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   16b20:	61bb      	str	r3, [r7, #24]
    lookup.attr = MP_QSTR___init__;
   16b22:	2313      	movs	r3, #19
   16b24:	61fb      	str	r3, [r7, #28]
    lookup.meth_offset = 0;
   16b26:	2300      	movs	r3, #0
   16b28:	623b      	str	r3, [r7, #32]
    mp_obj_class_lookup(&lookup, self);
   16b2a:	f107 0318 	add.w	r3, r7, #24
   16b2e:	68f9      	ldr	r1, [r7, #12]
   16b30:	4618      	mov	r0, r3
   16b32:	f7ff fd69 	bl	16608 <mp_obj_class_lookup>
    if (init_fn[0] != MP_OBJ_NULL) {
   16b36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   16b38:	2b00      	cmp	r3, #0
   16b3a:	d03b      	beq.n	16bb4 <mp_obj_instance_make_new+0x190>
        mp_obj_t init_ret;
        if (n_args == 0 && n_kw == 0) {
   16b3c:	68bb      	ldr	r3, [r7, #8]
   16b3e:	2b00      	cmp	r3, #0
   16b40:	d10b      	bne.n	16b5a <mp_obj_instance_make_new+0x136>
   16b42:	687b      	ldr	r3, [r7, #4]
   16b44:	2b00      	cmp	r3, #0
   16b46:	d108      	bne.n	16b5a <mp_obj_instance_make_new+0x136>
            init_ret = mp_call_method_n_kw(0, 0, init_fn);
   16b48:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   16b4c:	461a      	mov	r2, r3
   16b4e:	2100      	movs	r1, #0
   16b50:	2000      	movs	r0, #0
   16b52:	f7f5 fb1b 	bl	c18c <mp_call_method_n_kw>
   16b56:	63f8      	str	r0, [r7, #60]	; 0x3c
   16b58:	e025      	b.n	16ba6 <mp_obj_instance_make_new+0x182>
        } else {
            mp_obj_t *args2 = m_new(mp_obj_t, 2 + n_args + 2 * n_kw);
   16b5a:	687b      	ldr	r3, [r7, #4]
   16b5c:	005a      	lsls	r2, r3, #1
   16b5e:	68bb      	ldr	r3, [r7, #8]
   16b60:	4413      	add	r3, r2
   16b62:	3302      	adds	r3, #2
   16b64:	009b      	lsls	r3, r3, #2
   16b66:	4618      	mov	r0, r3
   16b68:	f7e9 fbd8 	bl	31c <m_malloc>
   16b6c:	6378      	str	r0, [r7, #52]	; 0x34
            args2[0] = init_fn[0];
   16b6e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   16b70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   16b72:	601a      	str	r2, [r3, #0]
            args2[1] = init_fn[1];
   16b74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   16b76:	3304      	adds	r3, #4
   16b78:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   16b7a:	601a      	str	r2, [r3, #0]
            memcpy(args2 + 2, args, (n_args + 2 * n_kw) * sizeof(mp_obj_t));
   16b7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   16b7e:	f103 0008 	add.w	r0, r3, #8
   16b82:	687b      	ldr	r3, [r7, #4]
   16b84:	005a      	lsls	r2, r3, #1
   16b86:	68bb      	ldr	r3, [r7, #8]
   16b88:	4413      	add	r3, r2
   16b8a:	009b      	lsls	r3, r3, #2
   16b8c:	461a      	mov	r2, r3
   16b8e:	6839      	ldr	r1, [r7, #0]
   16b90:	f007 fcce 	bl	1e530 <memcpy>
            init_ret = mp_call_method_n_kw(n_args, n_kw, args2);
   16b94:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   16b96:	6879      	ldr	r1, [r7, #4]
   16b98:	68b8      	ldr	r0, [r7, #8]
   16b9a:	f7f5 faf7 	bl	c18c <mp_call_method_n_kw>
   16b9e:	63f8      	str	r0, [r7, #60]	; 0x3c
            m_del(mp_obj_t, args2, 2 + n_args + 2 * n_kw);
   16ba0:	6b78      	ldr	r0, [r7, #52]	; 0x34
   16ba2:	f7e9 fc39 	bl	418 <m_free>
        }
        if (init_ret != mp_const_none) {
   16ba6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   16ba8:	4a12      	ldr	r2, [pc, #72]	; (16bf4 <mp_obj_instance_make_new+0x1d0>)
   16baa:	4293      	cmp	r3, r2
   16bac:	d002      	beq.n	16bb4 <mp_obj_instance_make_new+0x190>
            if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
                mp_raise_TypeError("__init__() should return None");
   16bae:	4812      	ldr	r0, [pc, #72]	; (16bf8 <mp_obj_instance_make_new+0x1d4>)
   16bb0:	f7f6 fbec 	bl	d38c <mp_raise_TypeError>

    }

    // If the type had a native base that was not explicitly initialised
    // (constructed) by the Python __init__() method then construct it now.
    if (native_base != NULL && o->subobj[0] == MP_OBJ_FROM_PTR(&native_base_init_wrapper_obj)) {
   16bb4:	697b      	ldr	r3, [r7, #20]
   16bb6:	2b00      	cmp	r3, #0
   16bb8:	d00e      	beq.n	16bd8 <mp_obj_instance_make_new+0x1b4>
   16bba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   16bbc:	691b      	ldr	r3, [r3, #16]
   16bbe:	4a0f      	ldr	r2, [pc, #60]	; (16bfc <mp_obj_instance_make_new+0x1d8>)
   16bc0:	4293      	cmp	r3, r2
   16bc2:	d109      	bne.n	16bd8 <mp_obj_instance_make_new+0x1b4>
        o->subobj[0] = native_base->make_new(native_base, n_args, n_kw, args);
   16bc4:	697b      	ldr	r3, [r7, #20]
   16bc6:	68dc      	ldr	r4, [r3, #12]
   16bc8:	6978      	ldr	r0, [r7, #20]
   16bca:	683b      	ldr	r3, [r7, #0]
   16bcc:	687a      	ldr	r2, [r7, #4]
   16bce:	68b9      	ldr	r1, [r7, #8]
   16bd0:	47a0      	blx	r4
   16bd2:	4602      	mov	r2, r0
   16bd4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   16bd6:	611a      	str	r2, [r3, #16]
    }

    return MP_OBJ_FROM_PTR(o);
   16bd8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
   16bda:	4618      	mov	r0, r3
   16bdc:	374c      	adds	r7, #76	; 0x4c
   16bde:	46bd      	mov	sp, r7
   16be0:	bd90      	pop	{r4, r7, pc}
   16be2:	bf00      	nop
   16be4:	00016a25 	.word	0x00016a25
   16be8:	00025ca0 	.word	0x00025ca0
   16bec:	000260bc 	.word	0x000260bc
   16bf0:	00025b1c 	.word	0x00025b1c
   16bf4:	0002511c 	.word	0x0002511c
   16bf8:	00025cc0 	.word	0x00025cc0
   16bfc:	00025b30 	.word	0x00025b30

00016c00 <instance_unary_op>:
    #if MICROPY_PY_SYS_GETSIZEOF
    [MP_UNARY_OP_SIZEOF] = MP_QSTR___sizeof__,
    #endif
};

STATIC mp_obj_t instance_unary_op(mp_unary_op_t op, mp_obj_t self_in) {
   16c00:	b580      	push	{r7, lr}
   16c02:	b08c      	sub	sp, #48	; 0x30
   16c04:	af00      	add	r7, sp, #0
   16c06:	6078      	str	r0, [r7, #4]
   16c08:	6039      	str	r1, [r7, #0]
    mp_obj_instance_t *self = MP_OBJ_TO_PTR(self_in);
   16c0a:	683b      	ldr	r3, [r7, #0]
   16c0c:	62bb      	str	r3, [r7, #40]	; 0x28
            + sizeof(*self->members.table) * self->members.alloc;
        return MP_OBJ_NEW_SMALL_INT(sz);
    }
    #endif

    qstr op_name = mp_unary_op_method_name[op];
   16c0e:	4a3b      	ldr	r2, [pc, #236]	; (16cfc <instance_unary_op+0xfc>)
   16c10:	687b      	ldr	r3, [r7, #4]
   16c12:	4413      	add	r3, r2
   16c14:	781b      	ldrb	r3, [r3, #0]
   16c16:	627b      	str	r3, [r7, #36]	; 0x24
    /* Still try to lookup native slot
    if (op_name == 0) {
        return MP_OBJ_NULL;
    }
    */
    mp_obj_t member[2] = {MP_OBJ_NULL};
   16c18:	f107 031c 	add.w	r3, r7, #28
   16c1c:	2200      	movs	r2, #0
   16c1e:	601a      	str	r2, [r3, #0]
   16c20:	605a      	str	r2, [r3, #4]
    struct class_lookup_data lookup = {
   16c22:	6abb      	ldr	r3, [r7, #40]	; 0x28
   16c24:	60bb      	str	r3, [r7, #8]
   16c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   16c28:	60fb      	str	r3, [r7, #12]
   16c2a:	2314      	movs	r3, #20
   16c2c:	613b      	str	r3, [r7, #16]
   16c2e:	f107 031c 	add.w	r3, r7, #28
   16c32:	617b      	str	r3, [r7, #20]
   16c34:	2300      	movs	r3, #0
   16c36:	763b      	strb	r3, [r7, #24]
        .attr = op_name,
        .meth_offset = offsetof(mp_obj_type_t, unary_op),
        .dest = member,
        .is_type = false,
    };
    mp_obj_class_lookup(&lookup, self->base.type);
   16c38:	6abb      	ldr	r3, [r7, #40]	; 0x28
   16c3a:	681a      	ldr	r2, [r3, #0]
   16c3c:	f107 0308 	add.w	r3, r7, #8
   16c40:	4611      	mov	r1, r2
   16c42:	4618      	mov	r0, r3
   16c44:	f7ff fce0 	bl	16608 <mp_obj_class_lookup>
    if (member[0] == MP_OBJ_SENTINEL) {
   16c48:	69fb      	ldr	r3, [r7, #28]
   16c4a:	2b08      	cmp	r3, #8
   16c4c:	d107      	bne.n	16c5e <instance_unary_op+0x5e>
        return mp_unary_op(op, self->subobj[0]);
   16c4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   16c50:	691b      	ldr	r3, [r3, #16]
   16c52:	4619      	mov	r1, r3
   16c54:	6878      	ldr	r0, [r7, #4]
   16c56:	f7f4 fec9 	bl	b9ec <mp_unary_op>
   16c5a:	4603      	mov	r3, r0
   16c5c:	e04a      	b.n	16cf4 <instance_unary_op+0xf4>
    } else if (member[0] != MP_OBJ_NULL) {
   16c5e:	69fb      	ldr	r3, [r7, #28]
   16c60:	2b00      	cmp	r3, #0
   16c62:	d031      	beq.n	16cc8 <instance_unary_op+0xc8>
        mp_obj_t val = mp_call_function_1(member[0], self_in);
   16c64:	69fb      	ldr	r3, [r7, #28]
   16c66:	6839      	ldr	r1, [r7, #0]
   16c68:	4618      	mov	r0, r3
   16c6a:	f7f5 fa3e 	bl	c0ea <mp_call_function_1>
   16c6e:	62f8      	str	r0, [r7, #44]	; 0x2c

        switch (op) {
   16c70:	687b      	ldr	r3, [r7, #4]
   16c72:	2b06      	cmp	r3, #6
   16c74:	d002      	beq.n	16c7c <instance_unary_op+0x7c>
   16c76:	2b08      	cmp	r3, #8
   16c78:	d009      	beq.n	16c8e <instance_unary_op+0x8e>
   16c7a:	e023      	b.n	16cc4 <instance_unary_op+0xc4>
            case MP_UNARY_OP_HASH:
                // __hash__ must return a small int
                val = MP_OBJ_NEW_SMALL_INT(mp_obj_get_int_truncated(val));
   16c7c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   16c7e:	f7f7 fa05 	bl	e08c <mp_obj_get_int_truncated>
   16c82:	4603      	mov	r3, r0
   16c84:	005b      	lsls	r3, r3, #1
   16c86:	f043 0301 	orr.w	r3, r3, #1
   16c8a:	62fb      	str	r3, [r7, #44]	; 0x2c
                break;
   16c8c:	e01a      	b.n	16cc4 <instance_unary_op+0xc4>
            case MP_UNARY_OP_INT:
                // Must return int
                if (!MP_OBJ_IS_INT(val)) {
   16c8e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   16c90:	f7ff fbac 	bl	163ec <MP_OBJ_IS_SMALL_INT>
   16c94:	4603      	mov	r3, r0
   16c96:	f083 0301 	eor.w	r3, r3, #1
   16c9a:	b2db      	uxtb	r3, r3
   16c9c:	2b00      	cmp	r3, #0
   16c9e:	d010      	beq.n	16cc2 <instance_unary_op+0xc2>
   16ca0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   16ca2:	f7ff fbb5 	bl	16410 <MP_OBJ_IS_OBJ>
   16ca6:	4603      	mov	r3, r0
   16ca8:	f083 0301 	eor.w	r3, r3, #1
   16cac:	b2db      	uxtb	r3, r3
   16cae:	2b00      	cmp	r3, #0
   16cb0:	d104      	bne.n	16cbc <instance_unary_op+0xbc>
   16cb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   16cb4:	681b      	ldr	r3, [r3, #0]
   16cb6:	4a12      	ldr	r2, [pc, #72]	; (16d00 <instance_unary_op+0x100>)
   16cb8:	4293      	cmp	r3, r2
   16cba:	d002      	beq.n	16cc2 <instance_unary_op+0xc2>
                    mp_raise_TypeError(NULL);
   16cbc:	2000      	movs	r0, #0
   16cbe:	f7f6 fb65 	bl	d38c <mp_raise_TypeError>
                }
                break;
   16cc2:	bf00      	nop
            default:
                // No need to do anything
                ;
        }
        return val;
   16cc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   16cc6:	e015      	b.n	16cf4 <instance_unary_op+0xf4>
    } else {
        if (op == MP_UNARY_OP_HASH) {
   16cc8:	687b      	ldr	r3, [r7, #4]
   16cca:	2b06      	cmp	r3, #6
   16ccc:	d111      	bne.n	16cf2 <instance_unary_op+0xf2>
            lookup.attr = MP_QSTR___eq__;
   16cce:	230a      	movs	r3, #10
   16cd0:	60fb      	str	r3, [r7, #12]
            mp_obj_class_lookup(&lookup, self->base.type);
   16cd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   16cd4:	681a      	ldr	r2, [r3, #0]
   16cd6:	f107 0308 	add.w	r3, r7, #8
   16cda:	4611      	mov	r1, r2
   16cdc:	4618      	mov	r0, r3
   16cde:	f7ff fc93 	bl	16608 <mp_obj_class_lookup>
            if (member[0] == MP_OBJ_NULL) {
   16ce2:	69fb      	ldr	r3, [r7, #28]
   16ce4:	2b00      	cmp	r3, #0
   16ce6:	d104      	bne.n	16cf2 <instance_unary_op+0xf2>
                // https://docs.python.org/3/reference/datamodel.html#object.__hash__
                // "User-defined classes have __eq__() and __hash__() methods by default;
                // with them, all objects compare unequal (except with themselves) and
                // x.__hash__() returns an appropriate value such that x == y implies
                // both that x is y and hash(x) == hash(y)."
                return MP_OBJ_NEW_SMALL_INT((mp_uint_t)self_in);
   16ce8:	683b      	ldr	r3, [r7, #0]
   16cea:	005b      	lsls	r3, r3, #1
   16cec:	f043 0301 	orr.w	r3, r3, #1
   16cf0:	e000      	b.n	16cf4 <instance_unary_op+0xf4>
            }
            // "A class that overrides __eq__() and does not define __hash__() will have its __hash__() implicitly set to None.
            // When the __hash__() method of a class is None, instances of the class will raise an appropriate TypeError"
        }

        return MP_OBJ_NULL; // op not supported
   16cf2:	2300      	movs	r3, #0
    }
}
   16cf4:	4618      	mov	r0, r3
   16cf6:	3730      	adds	r7, #48	; 0x30
   16cf8:	46bd      	mov	sp, r7
   16cfa:	bd80      	pop	{r7, pc}
   16cfc:	00025ce0 	.word	0x00025ce0
   16d00:	00024bd8 	.word	0x00024bd8

00016d04 <instance_binary_op>:
    [MP_BINARY_OP_REVERSE_RSHIFT] = MP_QSTR___rrshift__,
    #endif
    #endif
};

STATIC mp_obj_t instance_binary_op(mp_binary_op_t op, mp_obj_t lhs_in, mp_obj_t rhs_in) {
   16d04:	b580      	push	{r7, lr}
   16d06:	b090      	sub	sp, #64	; 0x40
   16d08:	af00      	add	r7, sp, #0
   16d0a:	60f8      	str	r0, [r7, #12]
   16d0c:	60b9      	str	r1, [r7, #8]
   16d0e:	607a      	str	r2, [r7, #4]
    // Note: For ducktyping, CPython does not look in the instance members or use
    // __getattr__ or __getattribute__.  It only looks in the class dictionary.
    mp_obj_instance_t *lhs = MP_OBJ_TO_PTR(lhs_in);
   16d10:	68bb      	ldr	r3, [r7, #8]
   16d12:	63bb      	str	r3, [r7, #56]	; 0x38
retry:;
    qstr op_name = mp_binary_op_method_name[op];
   16d14:	4a24      	ldr	r2, [pc, #144]	; (16da8 <instance_binary_op+0xa4>)
   16d16:	68fb      	ldr	r3, [r7, #12]
   16d18:	4413      	add	r3, r2
   16d1a:	781b      	ldrb	r3, [r3, #0]
   16d1c:	637b      	str	r3, [r7, #52]	; 0x34
    /* Still try to lookup native slot
    if (op_name == 0) {
        return MP_OBJ_NULL;
    }
    */
    mp_obj_t dest[3] = {MP_OBJ_NULL};
   16d1e:	f107 0328 	add.w	r3, r7, #40	; 0x28
   16d22:	2200      	movs	r2, #0
   16d24:	601a      	str	r2, [r3, #0]
   16d26:	605a      	str	r2, [r3, #4]
   16d28:	609a      	str	r2, [r3, #8]
    struct class_lookup_data lookup = {
   16d2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   16d2c:	617b      	str	r3, [r7, #20]
   16d2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   16d30:	61bb      	str	r3, [r7, #24]
   16d32:	2318      	movs	r3, #24
   16d34:	61fb      	str	r3, [r7, #28]
   16d36:	f107 0328 	add.w	r3, r7, #40	; 0x28
   16d3a:	623b      	str	r3, [r7, #32]
   16d3c:	2300      	movs	r3, #0
   16d3e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
        .attr = op_name,
        .meth_offset = offsetof(mp_obj_type_t, binary_op),
        .dest = dest,
        .is_type = false,
    };
    mp_obj_class_lookup(&lookup, lhs->base.type);
   16d42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   16d44:	681a      	ldr	r2, [r3, #0]
   16d46:	f107 0314 	add.w	r3, r7, #20
   16d4a:	4611      	mov	r1, r2
   16d4c:	4618      	mov	r0, r3
   16d4e:	f7ff fc5b 	bl	16608 <mp_obj_class_lookup>

    mp_obj_t res;
    if (dest[0] == MP_OBJ_SENTINEL) {
   16d52:	6abb      	ldr	r3, [r7, #40]	; 0x28
   16d54:	2b08      	cmp	r3, #8
   16d56:	d108      	bne.n	16d6a <instance_binary_op+0x66>
        res = mp_binary_op(op, lhs->subobj[0], rhs_in);
   16d58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   16d5a:	691b      	ldr	r3, [r3, #16]
   16d5c:	687a      	ldr	r2, [r7, #4]
   16d5e:	4619      	mov	r1, r3
   16d60:	68f8      	ldr	r0, [r7, #12]
   16d62:	f7f4 ff41 	bl	bbe8 <mp_binary_op>
   16d66:	63f8      	str	r0, [r7, #60]	; 0x3c
   16d68:	e019      	b.n	16d9e <instance_binary_op+0x9a>
    } else if (dest[0] != MP_OBJ_NULL) {
   16d6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   16d6c:	2b00      	cmp	r3, #0
   16d6e:	d00a      	beq.n	16d86 <instance_binary_op+0x82>
        dest[2] = rhs_in;
   16d70:	687b      	ldr	r3, [r7, #4]
   16d72:	633b      	str	r3, [r7, #48]	; 0x30
        res = mp_call_method_n_kw(1, 0, dest);
   16d74:	f107 0328 	add.w	r3, r7, #40	; 0x28
   16d78:	461a      	mov	r2, r3
   16d7a:	2100      	movs	r1, #0
   16d7c:	2001      	movs	r0, #1
   16d7e:	f7f5 fa05 	bl	c18c <mp_call_method_n_kw>
   16d82:	63f8      	str	r0, [r7, #60]	; 0x3c
   16d84:	e00b      	b.n	16d9e <instance_binary_op+0x9a>
    } else {
        // If this was an inplace method, fallback to normal method
        // https://docs.python.org/3/reference/datamodel.html#object.__iadd__ :
        // "If a specific method is not defined, the augmented assignment
        // falls back to the normal methods."
        if (op >= MP_BINARY_OP_INPLACE_OR && op <= MP_BINARY_OP_INPLACE_POWER) {
   16d86:	68fb      	ldr	r3, [r7, #12]
   16d88:	2b08      	cmp	r3, #8
   16d8a:	d906      	bls.n	16d9a <instance_binary_op+0x96>
   16d8c:	68fb      	ldr	r3, [r7, #12]
   16d8e:	2b14      	cmp	r3, #20
   16d90:	d803      	bhi.n	16d9a <instance_binary_op+0x96>
            op -= MP_BINARY_OP_INPLACE_OR - MP_BINARY_OP_OR;
   16d92:	68fb      	ldr	r3, [r7, #12]
   16d94:	330c      	adds	r3, #12
   16d96:	60fb      	str	r3, [r7, #12]
            goto retry;
   16d98:	e7bc      	b.n	16d14 <instance_binary_op+0x10>
        }
        return MP_OBJ_NULL; // op not supported
   16d9a:	2300      	movs	r3, #0
   16d9c:	e000      	b.n	16da0 <instance_binary_op+0x9c>
    if (res == mp_const_notimplemented) {
        return MP_OBJ_NULL; // op not supported
    }
    #endif

    return res;
   16d9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
   16da0:	4618      	mov	r0, r3
   16da2:	3740      	adds	r7, #64	; 0x40
   16da4:	46bd      	mov	sp, r7
   16da6:	bd80      	pop	{r7, pc}
   16da8:	00025cec 	.word	0x00025cec

00016dac <mp_obj_instance_load_attr>:

STATIC void mp_obj_instance_load_attr(mp_obj_t self_in, qstr attr, mp_obj_t *dest) {
   16dac:	b580      	push	{r7, lr}
   16dae:	b090      	sub	sp, #64	; 0x40
   16db0:	af00      	add	r7, sp, #0
   16db2:	60f8      	str	r0, [r7, #12]
   16db4:	60b9      	str	r1, [r7, #8]
   16db6:	607a      	str	r2, [r7, #4]
    // logic: look in instance members then class locals
    assert(mp_obj_is_instance_type(mp_obj_get_type(self_in)));
   16db8:	68f8      	ldr	r0, [r7, #12]
   16dba:	f7f6 ff4f 	bl	dc5c <mp_obj_get_type>
   16dbe:	4603      	mov	r3, r0
   16dc0:	68db      	ldr	r3, [r3, #12]
   16dc2:	4a2f      	ldr	r2, [pc, #188]	; (16e80 <mp_obj_instance_load_attr+0xd4>)
   16dc4:	4293      	cmp	r3, r2
   16dc6:	d006      	beq.n	16dd6 <mp_obj_instance_load_attr+0x2a>
   16dc8:	4b2e      	ldr	r3, [pc, #184]	; (16e84 <mp_obj_instance_load_attr+0xd8>)
   16dca:	4a2f      	ldr	r2, [pc, #188]	; (16e88 <mp_obj_instance_load_attr+0xdc>)
   16dcc:	f44f 7111 	mov.w	r1, #580	; 0x244
   16dd0:	482e      	ldr	r0, [pc, #184]	; (16e8c <mp_obj_instance_load_attr+0xe0>)
   16dd2:	f006 f885 	bl	1cee0 <__assert_func>
    mp_obj_instance_t *self = MP_OBJ_TO_PTR(self_in);
   16dd6:	68fb      	ldr	r3, [r7, #12]
   16dd8:	63fb      	str	r3, [r7, #60]	; 0x3c

    mp_map_elem_t *elem = mp_map_lookup(&self->members, MP_OBJ_NEW_QSTR(attr), MP_MAP_LOOKUP);
   16dda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   16ddc:	1d18      	adds	r0, r3, #4
   16dde:	68bb      	ldr	r3, [r7, #8]
   16de0:	009b      	lsls	r3, r3, #2
   16de2:	f043 0302 	orr.w	r3, r3, #2
   16de6:	2200      	movs	r2, #0
   16de8:	4619      	mov	r1, r3
   16dea:	f7f6 fd51 	bl	d890 <mp_map_lookup>
   16dee:	63b8      	str	r0, [r7, #56]	; 0x38
    if (elem != NULL) {
   16df0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   16df2:	2b00      	cmp	r3, #0
   16df4:	d004      	beq.n	16e00 <mp_obj_instance_load_attr+0x54>
        // object member, always treated as a value
        dest[0] = elem->value;
   16df6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   16df8:	685a      	ldr	r2, [r3, #4]
   16dfa:	687b      	ldr	r3, [r7, #4]
   16dfc:	601a      	str	r2, [r3, #0]
        return;
   16dfe:	e03b      	b.n	16e78 <mp_obj_instance_load_attr+0xcc>
        }
        dest[0] = attr_dict;
        return;
    }
#endif
    struct class_lookup_data lookup = {
   16e00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   16e02:	623b      	str	r3, [r7, #32]
   16e04:	68bb      	ldr	r3, [r7, #8]
   16e06:	627b      	str	r3, [r7, #36]	; 0x24
   16e08:	2300      	movs	r3, #0
   16e0a:	62bb      	str	r3, [r7, #40]	; 0x28
   16e0c:	687b      	ldr	r3, [r7, #4]
   16e0e:	62fb      	str	r3, [r7, #44]	; 0x2c
   16e10:	2300      	movs	r3, #0
   16e12:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
        .attr = attr,
        .meth_offset = 0,
        .dest = dest,
        .is_type = false,
    };
    mp_obj_class_lookup(&lookup, self->base.type);
   16e16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   16e18:	681a      	ldr	r2, [r3, #0]
   16e1a:	f107 0320 	add.w	r3, r7, #32
   16e1e:	4611      	mov	r1, r2
   16e20:	4618      	mov	r0, r3
   16e22:	f7ff fbf1 	bl	16608 <mp_obj_class_lookup>
    mp_obj_t member = dest[0];
   16e26:	687b      	ldr	r3, [r7, #4]
   16e28:	681b      	ldr	r3, [r3, #0]
   16e2a:	637b      	str	r3, [r7, #52]	; 0x34
    if (member != MP_OBJ_NULL) {
   16e2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   16e2e:	2b00      	cmp	r3, #0
   16e30:	d006      	beq.n	16e40 <mp_obj_instance_load_attr+0x94>
        if (!(self->base.type->flags & TYPE_FLAG_HAS_SPECIAL_ACCESSORS)) {
   16e32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   16e34:	681b      	ldr	r3, [r3, #0]
   16e36:	889b      	ldrh	r3, [r3, #4]
   16e38:	f003 0302 	and.w	r3, r3, #2
   16e3c:	2b00      	cmp	r3, #0
            attr_get_method[2] = self_in;
            attr_get_method[3] = MP_OBJ_FROM_PTR(mp_obj_get_type(self_in));
            dest[0] = mp_call_method_n_kw(2, 0, attr_get_method);
        }
        #endif
        return;
   16e3e:	e01b      	b.n	16e78 <mp_obj_instance_load_attr+0xcc>
    }

    // try __getattr__
    if (attr != MP_QSTR___getattr__) {
   16e40:	68bb      	ldr	r3, [r7, #8]
   16e42:	2b0d      	cmp	r3, #13
   16e44:	d018      	beq.n	16e78 <mp_obj_instance_load_attr+0xcc>
            return;
        }
        #endif

        mp_obj_t dest2[3];
        mp_load_method_maybe(self_in, MP_QSTR___getattr__, dest2);
   16e46:	f107 0314 	add.w	r3, r7, #20
   16e4a:	461a      	mov	r2, r3
   16e4c:	210d      	movs	r1, #13
   16e4e:	68f8      	ldr	r0, [r7, #12]
   16e50:	f7f5 fe4a 	bl	cae8 <mp_load_method_maybe>
        if (dest2[0] != MP_OBJ_NULL) {
   16e54:	697b      	ldr	r3, [r7, #20]
   16e56:	2b00      	cmp	r3, #0
   16e58:	d00e      	beq.n	16e78 <mp_obj_instance_load_attr+0xcc>
            // __getattr__ exists, call it and return its result
            dest2[2] = MP_OBJ_NEW_QSTR(attr);
   16e5a:	68bb      	ldr	r3, [r7, #8]
   16e5c:	009b      	lsls	r3, r3, #2
   16e5e:	f043 0302 	orr.w	r3, r3, #2
   16e62:	61fb      	str	r3, [r7, #28]
            dest[0] = mp_call_method_n_kw(1, 0, dest2);
   16e64:	f107 0314 	add.w	r3, r7, #20
   16e68:	461a      	mov	r2, r3
   16e6a:	2100      	movs	r1, #0
   16e6c:	2001      	movs	r0, #1
   16e6e:	f7f5 f98d 	bl	c18c <mp_call_method_n_kw>
   16e72:	4602      	mov	r2, r0
   16e74:	687b      	ldr	r3, [r7, #4]
   16e76:	601a      	str	r2, [r3, #0]
            return;
        }
    }
}
   16e78:	3740      	adds	r7, #64	; 0x40
   16e7a:	46bd      	mov	sp, r7
   16e7c:	bd80      	pop	{r7, pc}
   16e7e:	bf00      	nop
   16e80:	00016a25 	.word	0x00016a25
   16e84:	00025d10 	.word	0x00025d10
   16e88:	000260d8 	.word	0x000260d8
   16e8c:	00025b1c 	.word	0x00025b1c

00016e90 <mp_obj_instance_store_attr>:

STATIC bool mp_obj_instance_store_attr(mp_obj_t self_in, qstr attr, mp_obj_t value) {
   16e90:	b580      	push	{r7, lr}
   16e92:	b086      	sub	sp, #24
   16e94:	af00      	add	r7, sp, #0
   16e96:	60f8      	str	r0, [r7, #12]
   16e98:	60b9      	str	r1, [r7, #8]
   16e9a:	607a      	str	r2, [r7, #4]
    mp_obj_instance_t *self = MP_OBJ_TO_PTR(self_in);
   16e9c:	68fb      	ldr	r3, [r7, #12]
   16e9e:	617b      	str	r3, [r7, #20]

    if (!(self->base.type->flags & TYPE_FLAG_HAS_SPECIAL_ACCESSORS)) {
   16ea0:	697b      	ldr	r3, [r7, #20]
   16ea2:	681b      	ldr	r3, [r3, #0]
   16ea4:	889b      	ldrh	r3, [r3, #4]
   16ea6:	f003 0302 	and.w	r3, r3, #2
   16eaa:	2b00      	cmp	r3, #0
    }
    #endif

skip_special_accessors:

    if (value == MP_OBJ_NULL) {
   16eac:	687b      	ldr	r3, [r7, #4]
   16eae:	2b00      	cmp	r3, #0
   16eb0:	d111      	bne.n	16ed6 <mp_obj_instance_store_attr+0x46>
        // delete attribute
        mp_map_elem_t *elem = mp_map_lookup(&self->members, MP_OBJ_NEW_QSTR(attr), MP_MAP_LOOKUP_REMOVE_IF_FOUND);
   16eb2:	697b      	ldr	r3, [r7, #20]
   16eb4:	1d18      	adds	r0, r3, #4
   16eb6:	68bb      	ldr	r3, [r7, #8]
   16eb8:	009b      	lsls	r3, r3, #2
   16eba:	f043 0302 	orr.w	r3, r3, #2
   16ebe:	2202      	movs	r2, #2
   16ec0:	4619      	mov	r1, r3
   16ec2:	f7f6 fce5 	bl	d890 <mp_map_lookup>
   16ec6:	6138      	str	r0, [r7, #16]
        return elem != NULL;
   16ec8:	693b      	ldr	r3, [r7, #16]
   16eca:	2b00      	cmp	r3, #0
   16ecc:	bf14      	ite	ne
   16ece:	2301      	movne	r3, #1
   16ed0:	2300      	moveq	r3, #0
   16ed2:	b2db      	uxtb	r3, r3
   16ed4:	e00d      	b.n	16ef2 <mp_obj_instance_store_attr+0x62>
    } else {
        // store attribute
        mp_map_lookup(&self->members, MP_OBJ_NEW_QSTR(attr), MP_MAP_LOOKUP_ADD_IF_NOT_FOUND)->value = value;
   16ed6:	697b      	ldr	r3, [r7, #20]
   16ed8:	1d18      	adds	r0, r3, #4
   16eda:	68bb      	ldr	r3, [r7, #8]
   16edc:	009b      	lsls	r3, r3, #2
   16ede:	f043 0302 	orr.w	r3, r3, #2
   16ee2:	2201      	movs	r2, #1
   16ee4:	4619      	mov	r1, r3
   16ee6:	f7f6 fcd3 	bl	d890 <mp_map_lookup>
   16eea:	4602      	mov	r2, r0
   16eec:	687b      	ldr	r3, [r7, #4]
   16eee:	6053      	str	r3, [r2, #4]
        return true;
   16ef0:	2301      	movs	r3, #1
    }
}
   16ef2:	4618      	mov	r0, r3
   16ef4:	3718      	adds	r7, #24
   16ef6:	46bd      	mov	sp, r7
   16ef8:	bd80      	pop	{r7, pc}

00016efa <mp_obj_instance_attr>:

STATIC void mp_obj_instance_attr(mp_obj_t self_in, qstr attr, mp_obj_t *dest) {
   16efa:	b580      	push	{r7, lr}
   16efc:	b084      	sub	sp, #16
   16efe:	af00      	add	r7, sp, #0
   16f00:	60f8      	str	r0, [r7, #12]
   16f02:	60b9      	str	r1, [r7, #8]
   16f04:	607a      	str	r2, [r7, #4]
    if (dest[0] == MP_OBJ_NULL) {
   16f06:	687b      	ldr	r3, [r7, #4]
   16f08:	681b      	ldr	r3, [r3, #0]
   16f0a:	2b00      	cmp	r3, #0
   16f0c:	d105      	bne.n	16f1a <mp_obj_instance_attr+0x20>
        mp_obj_instance_load_attr(self_in, attr, dest);
   16f0e:	687a      	ldr	r2, [r7, #4]
   16f10:	68b9      	ldr	r1, [r7, #8]
   16f12:	68f8      	ldr	r0, [r7, #12]
   16f14:	f7ff ff4a 	bl	16dac <mp_obj_instance_load_attr>
    } else {
        if (mp_obj_instance_store_attr(self_in, attr, dest[1])) {
            dest[0] = MP_OBJ_NULL; // indicate success
        }
    }
}
   16f18:	e00d      	b.n	16f36 <mp_obj_instance_attr+0x3c>
        if (mp_obj_instance_store_attr(self_in, attr, dest[1])) {
   16f1a:	687b      	ldr	r3, [r7, #4]
   16f1c:	3304      	adds	r3, #4
   16f1e:	681b      	ldr	r3, [r3, #0]
   16f20:	461a      	mov	r2, r3
   16f22:	68b9      	ldr	r1, [r7, #8]
   16f24:	68f8      	ldr	r0, [r7, #12]
   16f26:	f7ff ffb3 	bl	16e90 <mp_obj_instance_store_attr>
   16f2a:	4603      	mov	r3, r0
   16f2c:	2b00      	cmp	r3, #0
   16f2e:	d002      	beq.n	16f36 <mp_obj_instance_attr+0x3c>
            dest[0] = MP_OBJ_NULL; // indicate success
   16f30:	687b      	ldr	r3, [r7, #4]
   16f32:	2200      	movs	r2, #0
   16f34:	601a      	str	r2, [r3, #0]
}
   16f36:	bf00      	nop
   16f38:	3710      	adds	r7, #16
   16f3a:	46bd      	mov	sp, r7
   16f3c:	bd80      	pop	{r7, pc}

00016f3e <instance_subscr>:

STATIC mp_obj_t instance_subscr(mp_obj_t self_in, mp_obj_t index, mp_obj_t value) {
   16f3e:	b580      	push	{r7, lr}
   16f40:	b090      	sub	sp, #64	; 0x40
   16f42:	af00      	add	r7, sp, #0
   16f44:	60f8      	str	r0, [r7, #12]
   16f46:	60b9      	str	r1, [r7, #8]
   16f48:	607a      	str	r2, [r7, #4]
    mp_obj_instance_t *self = MP_OBJ_TO_PTR(self_in);
   16f4a:	68fb      	ldr	r3, [r7, #12]
   16f4c:	63fb      	str	r3, [r7, #60]	; 0x3c
    mp_obj_t member[4] = {MP_OBJ_NULL, MP_OBJ_NULL, index, value};
   16f4e:	2300      	movs	r3, #0
   16f50:	627b      	str	r3, [r7, #36]	; 0x24
   16f52:	2300      	movs	r3, #0
   16f54:	62bb      	str	r3, [r7, #40]	; 0x28
   16f56:	68bb      	ldr	r3, [r7, #8]
   16f58:	62fb      	str	r3, [r7, #44]	; 0x2c
   16f5a:	687b      	ldr	r3, [r7, #4]
   16f5c:	633b      	str	r3, [r7, #48]	; 0x30
    struct class_lookup_data lookup = {
   16f5e:	f107 0310 	add.w	r3, r7, #16
   16f62:	2200      	movs	r2, #0
   16f64:	601a      	str	r2, [r3, #0]
   16f66:	605a      	str	r2, [r3, #4]
   16f68:	609a      	str	r2, [r3, #8]
   16f6a:	60da      	str	r2, [r3, #12]
   16f6c:	611a      	str	r2, [r3, #16]
   16f6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   16f70:	613b      	str	r3, [r7, #16]
   16f72:	2320      	movs	r3, #32
   16f74:	61bb      	str	r3, [r7, #24]
   16f76:	f107 0324 	add.w	r3, r7, #36	; 0x24
   16f7a:	61fb      	str	r3, [r7, #28]
        .obj = self,
        .meth_offset = offsetof(mp_obj_type_t, subscr),
        .dest = member,
        .is_type = false,
    };
    if (value == MP_OBJ_NULL) {
   16f7c:	687b      	ldr	r3, [r7, #4]
   16f7e:	2b00      	cmp	r3, #0
   16f80:	d102      	bne.n	16f88 <instance_subscr+0x4a>
        // delete item
        lookup.attr = MP_QSTR___delitem__;
   16f82:	2308      	movs	r3, #8
   16f84:	617b      	str	r3, [r7, #20]
   16f86:	e007      	b.n	16f98 <instance_subscr+0x5a>
    } else if (value == MP_OBJ_SENTINEL) {
   16f88:	687b      	ldr	r3, [r7, #4]
   16f8a:	2b08      	cmp	r3, #8
   16f8c:	d102      	bne.n	16f94 <instance_subscr+0x56>
        // load item
        lookup.attr = MP_QSTR___getitem__;
   16f8e:	230e      	movs	r3, #14
   16f90:	617b      	str	r3, [r7, #20]
   16f92:	e001      	b.n	16f98 <instance_subscr+0x5a>
    } else {
        // store item
        lookup.attr = MP_QSTR___setitem__;
   16f94:	2323      	movs	r3, #35	; 0x23
   16f96:	617b      	str	r3, [r7, #20]
    }
    mp_obj_class_lookup(&lookup, self->base.type);
   16f98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   16f9a:	681a      	ldr	r2, [r3, #0]
   16f9c:	f107 0310 	add.w	r3, r7, #16
   16fa0:	4611      	mov	r1, r2
   16fa2:	4618      	mov	r0, r3
   16fa4:	f7ff fb30 	bl	16608 <mp_obj_class_lookup>
    if (member[0] == MP_OBJ_SENTINEL) {
   16fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   16faa:	2b08      	cmp	r3, #8
   16fac:	d108      	bne.n	16fc0 <instance_subscr+0x82>
        return mp_obj_subscr(self->subobj[0], index, value);
   16fae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   16fb0:	691b      	ldr	r3, [r3, #16]
   16fb2:	687a      	ldr	r2, [r7, #4]
   16fb4:	68b9      	ldr	r1, [r7, #8]
   16fb6:	4618      	mov	r0, r3
   16fb8:	f7f7 f9f4 	bl	e3a4 <mp_obj_subscr>
   16fbc:	4603      	mov	r3, r0
   16fbe:	e01c      	b.n	16ffa <instance_subscr+0xbc>
    } else if (member[0] != MP_OBJ_NULL) {
   16fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   16fc2:	2b00      	cmp	r3, #0
   16fc4:	d018      	beq.n	16ff8 <instance_subscr+0xba>
        size_t n_args = value == MP_OBJ_NULL || value == MP_OBJ_SENTINEL ? 1 : 2;
   16fc6:	687b      	ldr	r3, [r7, #4]
   16fc8:	2b00      	cmp	r3, #0
   16fca:	d002      	beq.n	16fd2 <instance_subscr+0x94>
   16fcc:	687b      	ldr	r3, [r7, #4]
   16fce:	2b08      	cmp	r3, #8
   16fd0:	d101      	bne.n	16fd6 <instance_subscr+0x98>
   16fd2:	2301      	movs	r3, #1
   16fd4:	e000      	b.n	16fd8 <instance_subscr+0x9a>
   16fd6:	2302      	movs	r3, #2
   16fd8:	63bb      	str	r3, [r7, #56]	; 0x38
        mp_obj_t ret = mp_call_method_n_kw(n_args, 0, member);
   16fda:	f107 0324 	add.w	r3, r7, #36	; 0x24
   16fde:	461a      	mov	r2, r3
   16fe0:	2100      	movs	r1, #0
   16fe2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
   16fe4:	f7f5 f8d2 	bl	c18c <mp_call_method_n_kw>
   16fe8:	6378      	str	r0, [r7, #52]	; 0x34
        if (value == MP_OBJ_SENTINEL) {
   16fea:	687b      	ldr	r3, [r7, #4]
   16fec:	2b08      	cmp	r3, #8
   16fee:	d101      	bne.n	16ff4 <instance_subscr+0xb6>
            return ret;
   16ff0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   16ff2:	e002      	b.n	16ffa <instance_subscr+0xbc>
        } else {
            return mp_const_none;
   16ff4:	4b03      	ldr	r3, [pc, #12]	; (17004 <instance_subscr+0xc6>)
   16ff6:	e000      	b.n	16ffa <instance_subscr+0xbc>
        }
    } else {
        return MP_OBJ_NULL; // op not supported
   16ff8:	2300      	movs	r3, #0
    }
}
   16ffa:	4618      	mov	r0, r3
   16ffc:	3740      	adds	r7, #64	; 0x40
   16ffe:	46bd      	mov	sp, r7
   17000:	bd80      	pop	{r7, pc}
   17002:	bf00      	nop
   17004:	0002511c 	.word	0x0002511c

00017008 <mp_obj_instance_get_call>:

STATIC mp_obj_t mp_obj_instance_get_call(mp_obj_t self_in, mp_obj_t *member) {
   17008:	b580      	push	{r7, lr}
   1700a:	b088      	sub	sp, #32
   1700c:	af00      	add	r7, sp, #0
   1700e:	6078      	str	r0, [r7, #4]
   17010:	6039      	str	r1, [r7, #0]
    mp_obj_instance_t *self = MP_OBJ_TO_PTR(self_in);
   17012:	687b      	ldr	r3, [r7, #4]
   17014:	61fb      	str	r3, [r7, #28]
    struct class_lookup_data lookup = {
   17016:	69fb      	ldr	r3, [r7, #28]
   17018:	60bb      	str	r3, [r7, #8]
   1701a:	2305      	movs	r3, #5
   1701c:	60fb      	str	r3, [r7, #12]
   1701e:	2310      	movs	r3, #16
   17020:	613b      	str	r3, [r7, #16]
   17022:	683b      	ldr	r3, [r7, #0]
   17024:	617b      	str	r3, [r7, #20]
   17026:	2300      	movs	r3, #0
   17028:	763b      	strb	r3, [r7, #24]
        .attr = MP_QSTR___call__,
        .meth_offset = offsetof(mp_obj_type_t, call),
        .dest = member,
        .is_type = false,
    };
    mp_obj_class_lookup(&lookup, self->base.type);
   1702a:	69fb      	ldr	r3, [r7, #28]
   1702c:	681a      	ldr	r2, [r3, #0]
   1702e:	f107 0308 	add.w	r3, r7, #8
   17032:	4611      	mov	r1, r2
   17034:	4618      	mov	r0, r3
   17036:	f7ff fae7 	bl	16608 <mp_obj_class_lookup>
    return member[0];
   1703a:	683b      	ldr	r3, [r7, #0]
   1703c:	681b      	ldr	r3, [r3, #0]
}
   1703e:	4618      	mov	r0, r3
   17040:	3720      	adds	r7, #32
   17042:	46bd      	mov	sp, r7
   17044:	bd80      	pop	{r7, pc}

00017046 <mp_obj_instance_is_callable>:

bool mp_obj_instance_is_callable(mp_obj_t self_in) {
   17046:	b580      	push	{r7, lr}
   17048:	b084      	sub	sp, #16
   1704a:	af00      	add	r7, sp, #0
   1704c:	6078      	str	r0, [r7, #4]
    mp_obj_t member[2] = {MP_OBJ_NULL, MP_OBJ_NULL};
   1704e:	2300      	movs	r3, #0
   17050:	60bb      	str	r3, [r7, #8]
   17052:	2300      	movs	r3, #0
   17054:	60fb      	str	r3, [r7, #12]
    return mp_obj_instance_get_call(self_in, member) != MP_OBJ_NULL;
   17056:	f107 0308 	add.w	r3, r7, #8
   1705a:	4619      	mov	r1, r3
   1705c:	6878      	ldr	r0, [r7, #4]
   1705e:	f7ff ffd3 	bl	17008 <mp_obj_instance_get_call>
   17062:	4603      	mov	r3, r0
   17064:	2b00      	cmp	r3, #0
   17066:	bf14      	ite	ne
   17068:	2301      	movne	r3, #1
   1706a:	2300      	moveq	r3, #0
   1706c:	b2db      	uxtb	r3, r3
}
   1706e:	4618      	mov	r0, r3
   17070:	3710      	adds	r7, #16
   17072:	46bd      	mov	sp, r7
   17074:	bd80      	pop	{r7, pc}

00017076 <mp_obj_instance_call>:

mp_obj_t mp_obj_instance_call(mp_obj_t self_in, size_t n_args, size_t n_kw, const mp_obj_t *args) {
   17076:	b580      	push	{r7, lr}
   17078:	b08a      	sub	sp, #40	; 0x28
   1707a:	af02      	add	r7, sp, #8
   1707c:	60f8      	str	r0, [r7, #12]
   1707e:	60b9      	str	r1, [r7, #8]
   17080:	607a      	str	r2, [r7, #4]
   17082:	603b      	str	r3, [r7, #0]
    mp_obj_t member[2] = {MP_OBJ_NULL, MP_OBJ_NULL};
   17084:	2300      	movs	r3, #0
   17086:	613b      	str	r3, [r7, #16]
   17088:	2300      	movs	r3, #0
   1708a:	617b      	str	r3, [r7, #20]
    mp_obj_t call = mp_obj_instance_get_call(self_in, member);
   1708c:	f107 0310 	add.w	r3, r7, #16
   17090:	4619      	mov	r1, r3
   17092:	68f8      	ldr	r0, [r7, #12]
   17094:	f7ff ffb8 	bl	17008 <mp_obj_instance_get_call>
   17098:	61f8      	str	r0, [r7, #28]
    if (call == MP_OBJ_NULL) {
   1709a:	69fb      	ldr	r3, [r7, #28]
   1709c:	2b00      	cmp	r3, #0
   1709e:	d102      	bne.n	170a6 <mp_obj_instance_call+0x30>
        if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
            mp_raise_TypeError("object not callable");
   170a0:	480e      	ldr	r0, [pc, #56]	; (170dc <mp_obj_instance_call+0x66>)
   170a2:	f7f6 f973 	bl	d38c <mp_raise_TypeError>
        } else {
            nlr_raise(mp_obj_new_exception_msg_varg(&mp_type_TypeError,
                "'%s' object isn't callable", mp_obj_get_type_str(self_in)));
        }
    }
    mp_obj_instance_t *self = MP_OBJ_TO_PTR(self_in);
   170a6:	68fb      	ldr	r3, [r7, #12]
   170a8:	61bb      	str	r3, [r7, #24]
    if (call == MP_OBJ_SENTINEL) {
   170aa:	69fb      	ldr	r3, [r7, #28]
   170ac:	2b08      	cmp	r3, #8
   170ae:	d108      	bne.n	170c2 <mp_obj_instance_call+0x4c>
        return mp_call_function_n_kw(self->subobj[0], n_args, n_kw, args);
   170b0:	69bb      	ldr	r3, [r7, #24]
   170b2:	6918      	ldr	r0, [r3, #16]
   170b4:	683b      	ldr	r3, [r7, #0]
   170b6:	687a      	ldr	r2, [r7, #4]
   170b8:	68b9      	ldr	r1, [r7, #8]
   170ba:	f7f5 f83c 	bl	c136 <mp_call_function_n_kw>
   170be:	4603      	mov	r3, r0
   170c0:	e008      	b.n	170d4 <mp_obj_instance_call+0x5e>
    }

    return mp_call_method_self_n_kw(member[0], member[1], n_args, n_kw, args);
   170c2:	6938      	ldr	r0, [r7, #16]
   170c4:	6979      	ldr	r1, [r7, #20]
   170c6:	683b      	ldr	r3, [r7, #0]
   170c8:	9300      	str	r3, [sp, #0]
   170ca:	687b      	ldr	r3, [r7, #4]
   170cc:	68ba      	ldr	r2, [r7, #8]
   170ce:	f7f7 faa7 	bl	e620 <mp_call_method_self_n_kw>
   170d2:	4603      	mov	r3, r0
}
   170d4:	4618      	mov	r0, r3
   170d6:	3720      	adds	r7, #32
   170d8:	46bd      	mov	sp, r7
   170da:	bd80      	pop	{r7, pc}
   170dc:	00025d44 	.word	0x00025d44

000170e0 <instance_getiter>:

STATIC mp_obj_t instance_getiter(mp_obj_t self_in, mp_obj_iter_buf_t *iter_buf) {
   170e0:	b580      	push	{r7, lr}
   170e2:	b08c      	sub	sp, #48	; 0x30
   170e4:	af00      	add	r7, sp, #0
   170e6:	6078      	str	r0, [r7, #4]
   170e8:	6039      	str	r1, [r7, #0]
    mp_obj_instance_t *self = MP_OBJ_TO_PTR(self_in);
   170ea:	687b      	ldr	r3, [r7, #4]
   170ec:	62fb      	str	r3, [r7, #44]	; 0x2c
    mp_obj_t member[2] = {MP_OBJ_NULL};
   170ee:	f107 0320 	add.w	r3, r7, #32
   170f2:	2200      	movs	r2, #0
   170f4:	601a      	str	r2, [r3, #0]
   170f6:	605a      	str	r2, [r3, #4]
    struct class_lookup_data lookup = {
   170f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   170fa:	60fb      	str	r3, [r7, #12]
   170fc:	2316      	movs	r3, #22
   170fe:	613b      	str	r3, [r7, #16]
   17100:	2324      	movs	r3, #36	; 0x24
   17102:	617b      	str	r3, [r7, #20]
   17104:	f107 0320 	add.w	r3, r7, #32
   17108:	61bb      	str	r3, [r7, #24]
   1710a:	2300      	movs	r3, #0
   1710c:	773b      	strb	r3, [r7, #28]
        .attr = MP_QSTR___iter__,
        .meth_offset = offsetof(mp_obj_type_t, getiter),
        .dest = member,
        .is_type = false,
    };
    mp_obj_class_lookup(&lookup, self->base.type);
   1710e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   17110:	681a      	ldr	r2, [r3, #0]
   17112:	f107 030c 	add.w	r3, r7, #12
   17116:	4611      	mov	r1, r2
   17118:	4618      	mov	r0, r3
   1711a:	f7ff fa75 	bl	16608 <mp_obj_class_lookup>
    if (member[0] == MP_OBJ_NULL) {
   1711e:	6a3b      	ldr	r3, [r7, #32]
   17120:	2b00      	cmp	r3, #0
   17122:	d101      	bne.n	17128 <instance_getiter+0x48>
        return MP_OBJ_NULL;
   17124:	2300      	movs	r3, #0
   17126:	e019      	b.n	1715c <instance_getiter+0x7c>
    } else if (member[0] == MP_OBJ_SENTINEL) {
   17128:	6a3b      	ldr	r3, [r7, #32]
   1712a:	2b08      	cmp	r3, #8
   1712c:	d10e      	bne.n	1714c <instance_getiter+0x6c>
        mp_obj_type_t *type = mp_obj_get_type(self->subobj[0]);
   1712e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   17130:	691b      	ldr	r3, [r3, #16]
   17132:	4618      	mov	r0, r3
   17134:	f7f6 fd92 	bl	dc5c <mp_obj_get_type>
   17138:	62b8      	str	r0, [r7, #40]	; 0x28
        return type->getiter(self->subobj[0], iter_buf);
   1713a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1713c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1713e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   17140:	6912      	ldr	r2, [r2, #16]
   17142:	6839      	ldr	r1, [r7, #0]
   17144:	4610      	mov	r0, r2
   17146:	4798      	blx	r3
   17148:	4603      	mov	r3, r0
   1714a:	e007      	b.n	1715c <instance_getiter+0x7c>
    } else {
        return mp_call_method_n_kw(0, 0, member);
   1714c:	f107 0320 	add.w	r3, r7, #32
   17150:	461a      	mov	r2, r3
   17152:	2100      	movs	r1, #0
   17154:	2000      	movs	r0, #0
   17156:	f7f5 f819 	bl	c18c <mp_call_method_n_kw>
   1715a:	4603      	mov	r3, r0
    }
}
   1715c:	4618      	mov	r0, r3
   1715e:	3730      	adds	r7, #48	; 0x30
   17160:	46bd      	mov	sp, r7
   17162:	bd80      	pop	{r7, pc}

00017164 <instance_get_buffer>:

STATIC mp_int_t instance_get_buffer(mp_obj_t self_in, mp_buffer_info_t *bufinfo, mp_uint_t flags) {
   17164:	b580      	push	{r7, lr}
   17166:	b08e      	sub	sp, #56	; 0x38
   17168:	af00      	add	r7, sp, #0
   1716a:	60f8      	str	r0, [r7, #12]
   1716c:	60b9      	str	r1, [r7, #8]
   1716e:	607a      	str	r2, [r7, #4]
    mp_obj_instance_t *self = MP_OBJ_TO_PTR(self_in);
   17170:	68fb      	ldr	r3, [r7, #12]
   17172:	637b      	str	r3, [r7, #52]	; 0x34
    mp_obj_t member[2] = {MP_OBJ_NULL};
   17174:	f107 0328 	add.w	r3, r7, #40	; 0x28
   17178:	2200      	movs	r2, #0
   1717a:	601a      	str	r2, [r3, #0]
   1717c:	605a      	str	r2, [r3, #4]
    struct class_lookup_data lookup = {
   1717e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   17180:	617b      	str	r3, [r7, #20]
   17182:	2301      	movs	r3, #1
   17184:	61bb      	str	r3, [r7, #24]
   17186:	232c      	movs	r3, #44	; 0x2c
   17188:	61fb      	str	r3, [r7, #28]
   1718a:	f107 0328 	add.w	r3, r7, #40	; 0x28
   1718e:	623b      	str	r3, [r7, #32]
   17190:	2300      	movs	r3, #0
   17192:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
        .attr = MP_QSTR_, // don't actually look for a method
        .meth_offset = offsetof(mp_obj_type_t, buffer_p.get_buffer),
        .dest = member,
        .is_type = false,
    };
    mp_obj_class_lookup(&lookup, self->base.type);
   17196:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   17198:	681a      	ldr	r2, [r3, #0]
   1719a:	f107 0314 	add.w	r3, r7, #20
   1719e:	4611      	mov	r1, r2
   171a0:	4618      	mov	r0, r3
   171a2:	f7ff fa31 	bl	16608 <mp_obj_class_lookup>
    if (member[0] == MP_OBJ_SENTINEL) {
   171a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
   171a8:	2b08      	cmp	r3, #8
   171aa:	d10e      	bne.n	171ca <instance_get_buffer+0x66>
        mp_obj_type_t *type = mp_obj_get_type(self->subobj[0]);
   171ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   171ae:	691b      	ldr	r3, [r3, #16]
   171b0:	4618      	mov	r0, r3
   171b2:	f7f6 fd53 	bl	dc5c <mp_obj_get_type>
   171b6:	6338      	str	r0, [r7, #48]	; 0x30
        return type->buffer_p.get_buffer(self->subobj[0], bufinfo, flags);
   171b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   171ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   171bc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   171be:	6910      	ldr	r0, [r2, #16]
   171c0:	687a      	ldr	r2, [r7, #4]
   171c2:	68b9      	ldr	r1, [r7, #8]
   171c4:	4798      	blx	r3
   171c6:	4603      	mov	r3, r0
   171c8:	e000      	b.n	171cc <instance_get_buffer+0x68>
    } else {
        return 1; // object does not support buffer protocol
   171ca:	2301      	movs	r3, #1
    }
}
   171cc:	4618      	mov	r0, r3
   171ce:	3738      	adds	r7, #56	; 0x38
   171d0:	46bd      	mov	sp, r7
   171d2:	bd80      	pop	{r7, pc}

000171d4 <type_print>:
    #endif
    return false;
}
#endif

STATIC void type_print(const mp_print_t *print, mp_obj_t self_in, mp_print_kind_t kind) {
   171d4:	b580      	push	{r7, lr}
   171d6:	b086      	sub	sp, #24
   171d8:	af00      	add	r7, sp, #0
   171da:	60f8      	str	r0, [r7, #12]
   171dc:	60b9      	str	r1, [r7, #8]
   171de:	607a      	str	r2, [r7, #4]
    (void)kind;
    mp_obj_type_t *self = MP_OBJ_TO_PTR(self_in);
   171e0:	68bb      	ldr	r3, [r7, #8]
   171e2:	617b      	str	r3, [r7, #20]
    mp_printf(print, "<class '%q'>", self->name);
   171e4:	697b      	ldr	r3, [r7, #20]
   171e6:	88db      	ldrh	r3, [r3, #6]
   171e8:	461a      	mov	r2, r3
   171ea:	4904      	ldr	r1, [pc, #16]	; (171fc <type_print+0x28>)
   171ec:	68f8      	ldr	r0, [r7, #12]
   171ee:	f7ea ff3f 	bl	2070 <mp_printf>
}
   171f2:	bf00      	nop
   171f4:	3718      	adds	r7, #24
   171f6:	46bd      	mov	sp, r7
   171f8:	bd80      	pop	{r7, pc}
   171fa:	bf00      	nop
   171fc:	00025d58 	.word	0x00025d58

00017200 <type_make_new>:

STATIC mp_obj_t type_make_new(const mp_obj_type_t *type_in, size_t n_args, size_t n_kw, const mp_obj_t *args) {
   17200:	b580      	push	{r7, lr}
   17202:	b086      	sub	sp, #24
   17204:	af02      	add	r7, sp, #8
   17206:	60f8      	str	r0, [r7, #12]
   17208:	60b9      	str	r1, [r7, #8]
   1720a:	607a      	str	r2, [r7, #4]
   1720c:	603b      	str	r3, [r7, #0]
    (void)type_in;

    mp_arg_check_num(n_args, n_kw, 1, 3, false);
   1720e:	2300      	movs	r3, #0
   17210:	9300      	str	r3, [sp, #0]
   17212:	2303      	movs	r3, #3
   17214:	2201      	movs	r2, #1
   17216:	6879      	ldr	r1, [r7, #4]
   17218:	68b8      	ldr	r0, [r7, #8]
   1721a:	f7ff f90b 	bl	16434 <mp_arg_check_num>

    switch (n_args) {
   1721e:	68bb      	ldr	r3, [r7, #8]
   17220:	2b01      	cmp	r3, #1
   17222:	d002      	beq.n	1722a <type_make_new+0x2a>
   17224:	2b03      	cmp	r3, #3
   17226:	d007      	beq.n	17238 <type_make_new+0x38>
   17228:	e016      	b.n	17258 <type_make_new+0x58>
        case 1:
            return MP_OBJ_FROM_PTR(mp_obj_get_type(args[0]));
   1722a:	683b      	ldr	r3, [r7, #0]
   1722c:	681b      	ldr	r3, [r3, #0]
   1722e:	4618      	mov	r0, r3
   17230:	f7f6 fd14 	bl	dc5c <mp_obj_get_type>
   17234:	4603      	mov	r3, r0
   17236:	e012      	b.n	1725e <type_make_new+0x5e>

        case 3:
            // args[0] = name
            // args[1] = bases tuple
            // args[2] = locals dict
            return mp_obj_new_type(mp_obj_str_get_qstr(args[0]), args[1], args[2]);
   17238:	683b      	ldr	r3, [r7, #0]
   1723a:	681b      	ldr	r3, [r3, #0]
   1723c:	4618      	mov	r0, r3
   1723e:	f7fe fbe7 	bl	15a10 <mp_obj_str_get_qstr>
   17242:	683b      	ldr	r3, [r7, #0]
   17244:	3304      	adds	r3, #4
   17246:	6819      	ldr	r1, [r3, #0]
   17248:	683b      	ldr	r3, [r7, #0]
   1724a:	3308      	adds	r3, #8
   1724c:	681b      	ldr	r3, [r3, #0]
   1724e:	461a      	mov	r2, r3
   17250:	f000 f8b0 	bl	173b4 <mp_obj_new_type>
   17254:	4603      	mov	r3, r0
   17256:	e002      	b.n	1725e <type_make_new+0x5e>

        default:
            mp_raise_TypeError("type takes 1 or 3 arguments");
   17258:	4803      	ldr	r0, [pc, #12]	; (17268 <type_make_new+0x68>)
   1725a:	f7f6 f897 	bl	d38c <mp_raise_TypeError>
    }
}
   1725e:	4618      	mov	r0, r3
   17260:	3710      	adds	r7, #16
   17262:	46bd      	mov	sp, r7
   17264:	bd80      	pop	{r7, pc}
   17266:	bf00      	nop
   17268:	00025d68 	.word	0x00025d68

0001726c <type_call>:

STATIC mp_obj_t type_call(mp_obj_t self_in, size_t n_args, size_t n_kw, const mp_obj_t *args) {
   1726c:	b590      	push	{r4, r7, lr}
   1726e:	b087      	sub	sp, #28
   17270:	af00      	add	r7, sp, #0
   17272:	60f8      	str	r0, [r7, #12]
   17274:	60b9      	str	r1, [r7, #8]
   17276:	607a      	str	r2, [r7, #4]
   17278:	603b      	str	r3, [r7, #0]
    // instantiate an instance of a class

    mp_obj_type_t *self = MP_OBJ_TO_PTR(self_in);
   1727a:	68fb      	ldr	r3, [r7, #12]
   1727c:	617b      	str	r3, [r7, #20]

    if (self->make_new == NULL) {
   1727e:	697b      	ldr	r3, [r7, #20]
   17280:	68db      	ldr	r3, [r3, #12]
   17282:	2b00      	cmp	r3, #0
   17284:	d102      	bne.n	1728c <type_call+0x20>
        if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
            mp_raise_TypeError("cannot create instance");
   17286:	4808      	ldr	r0, [pc, #32]	; (172a8 <type_call+0x3c>)
   17288:	f7f6 f880 	bl	d38c <mp_raise_TypeError>
                "cannot create '%q' instances", self->name));
        }
    }

    // make new instance
    mp_obj_t o = self->make_new(self, n_args, n_kw, args);
   1728c:	697b      	ldr	r3, [r7, #20]
   1728e:	68dc      	ldr	r4, [r3, #12]
   17290:	683b      	ldr	r3, [r7, #0]
   17292:	687a      	ldr	r2, [r7, #4]
   17294:	68b9      	ldr	r1, [r7, #8]
   17296:	6978      	ldr	r0, [r7, #20]
   17298:	47a0      	blx	r4
   1729a:	6138      	str	r0, [r7, #16]

    // return new instance
    return o;
   1729c:	693b      	ldr	r3, [r7, #16]
}
   1729e:	4618      	mov	r0, r3
   172a0:	371c      	adds	r7, #28
   172a2:	46bd      	mov	sp, r7
   172a4:	bd90      	pop	{r4, r7, pc}
   172a6:	bf00      	nop
   172a8:	00025d84 	.word	0x00025d84

000172ac <type_attr>:

STATIC void type_attr(mp_obj_t self_in, qstr attr, mp_obj_t *dest) {
   172ac:	b580      	push	{r7, lr}
   172ae:	b08e      	sub	sp, #56	; 0x38
   172b0:	af00      	add	r7, sp, #0
   172b2:	60f8      	str	r0, [r7, #12]
   172b4:	60b9      	str	r1, [r7, #8]
   172b6:	607a      	str	r2, [r7, #4]
    assert(MP_OBJ_IS_TYPE(self_in, &mp_type_type));
   172b8:	68f8      	ldr	r0, [r7, #12]
   172ba:	f7ff f8a9 	bl	16410 <MP_OBJ_IS_OBJ>
   172be:	4603      	mov	r3, r0
   172c0:	2b00      	cmp	r3, #0
   172c2:	d004      	beq.n	172ce <type_attr+0x22>
   172c4:	68fb      	ldr	r3, [r7, #12]
   172c6:	681b      	ldr	r3, [r3, #0]
   172c8:	4a34      	ldr	r2, [pc, #208]	; (1739c <type_attr+0xf0>)
   172ca:	4293      	cmp	r3, r2
   172cc:	d006      	beq.n	172dc <type_attr+0x30>
   172ce:	4b34      	ldr	r3, [pc, #208]	; (173a0 <type_attr+0xf4>)
   172d0:	4a34      	ldr	r2, [pc, #208]	; (173a4 <type_attr+0xf8>)
   172d2:	f44f 717b 	mov.w	r1, #1004	; 0x3ec
   172d6:	4834      	ldr	r0, [pc, #208]	; (173a8 <type_attr+0xfc>)
   172d8:	f005 fe02 	bl	1cee0 <__assert_func>
    mp_obj_type_t *self = MP_OBJ_TO_PTR(self_in);
   172dc:	68fb      	ldr	r3, [r7, #12]
   172de:	637b      	str	r3, [r7, #52]	; 0x34

    if (dest[0] == MP_OBJ_NULL) {
   172e0:	687b      	ldr	r3, [r7, #4]
   172e2:	681b      	ldr	r3, [r3, #0]
   172e4:	2b00      	cmp	r3, #0
   172e6:	d111      	bne.n	1730c <type_attr+0x60>
        if (attr == MP_QSTR___name__) {
            dest[0] = MP_OBJ_NEW_QSTR(self->name);
            return;
        }
        #endif
        struct class_lookup_data lookup = {
   172e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   172ea:	617b      	str	r3, [r7, #20]
   172ec:	68bb      	ldr	r3, [r7, #8]
   172ee:	61bb      	str	r3, [r7, #24]
   172f0:	2300      	movs	r3, #0
   172f2:	61fb      	str	r3, [r7, #28]
   172f4:	687b      	ldr	r3, [r7, #4]
   172f6:	623b      	str	r3, [r7, #32]
   172f8:	2301      	movs	r3, #1
   172fa:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
            .attr = attr,
            .meth_offset = 0,
            .dest = dest,
            .is_type = true,
        };
        mp_obj_class_lookup(&lookup, self);
   172fe:	f107 0314 	add.w	r3, r7, #20
   17302:	6b79      	ldr	r1, [r7, #52]	; 0x34
   17304:	4618      	mov	r0, r3
   17306:	f7ff f97f 	bl	16608 <mp_obj_class_lookup>
   1730a:	e044      	b.n	17396 <type_attr+0xea>
    } else {
        // delete/store attribute

        if (self->locals_dict != NULL) {
   1730c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1730e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   17310:	2b00      	cmp	r3, #0
   17312:	d040      	beq.n	17396 <type_attr+0xea>
            assert(self->locals_dict->base.type == &mp_type_dict); // MicroPython restriction, for now
   17314:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   17316:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   17318:	681b      	ldr	r3, [r3, #0]
   1731a:	4a24      	ldr	r2, [pc, #144]	; (173ac <type_attr+0x100>)
   1731c:	4293      	cmp	r3, r2
   1731e:	d006      	beq.n	1732e <type_attr+0x82>
   17320:	4b23      	ldr	r3, [pc, #140]	; (173b0 <type_attr+0x104>)
   17322:	4a20      	ldr	r2, [pc, #128]	; (173a4 <type_attr+0xf8>)
   17324:	f240 4103 	movw	r1, #1027	; 0x403
   17328:	481f      	ldr	r0, [pc, #124]	; (173a8 <type_attr+0xfc>)
   1732a:	f005 fdd9 	bl	1cee0 <__assert_func>
            mp_map_t *locals_map = &self->locals_dict->map;
   1732e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   17330:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   17332:	3304      	adds	r3, #4
   17334:	633b      	str	r3, [r7, #48]	; 0x30
            if (locals_map->is_fixed) {
   17336:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   17338:	781b      	ldrb	r3, [r3, #0]
   1733a:	f003 0302 	and.w	r3, r3, #2
   1733e:	b2db      	uxtb	r3, r3
   17340:	2b00      	cmp	r3, #0
   17342:	d127      	bne.n	17394 <type_attr+0xe8>
                // can't apply delete/store to a fixed map
                return;
            }
            if (dest[1] == MP_OBJ_NULL) {
   17344:	687b      	ldr	r3, [r7, #4]
   17346:	3304      	adds	r3, #4
   17348:	681b      	ldr	r3, [r3, #0]
   1734a:	2b00      	cmp	r3, #0
   1734c:	d110      	bne.n	17370 <type_attr+0xc4>
                // delete attribute
                mp_map_elem_t *elem = mp_map_lookup(locals_map, MP_OBJ_NEW_QSTR(attr), MP_MAP_LOOKUP_REMOVE_IF_FOUND);
   1734e:	68bb      	ldr	r3, [r7, #8]
   17350:	009b      	lsls	r3, r3, #2
   17352:	f043 0302 	orr.w	r3, r3, #2
   17356:	2202      	movs	r2, #2
   17358:	4619      	mov	r1, r3
   1735a:	6b38      	ldr	r0, [r7, #48]	; 0x30
   1735c:	f7f6 fa98 	bl	d890 <mp_map_lookup>
   17360:	62f8      	str	r0, [r7, #44]	; 0x2c
                if (elem != NULL) {
   17362:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   17364:	2b00      	cmp	r3, #0
   17366:	d016      	beq.n	17396 <type_attr+0xea>
                    dest[0] = MP_OBJ_NULL; // indicate success
   17368:	687b      	ldr	r3, [r7, #4]
   1736a:	2200      	movs	r2, #0
   1736c:	601a      	str	r2, [r3, #0]
   1736e:	e012      	b.n	17396 <type_attr+0xea>
                    }
                }
                #endif

                // store attribute
                mp_map_elem_t *elem = mp_map_lookup(locals_map, MP_OBJ_NEW_QSTR(attr), MP_MAP_LOOKUP_ADD_IF_NOT_FOUND);
   17370:	68bb      	ldr	r3, [r7, #8]
   17372:	009b      	lsls	r3, r3, #2
   17374:	f043 0302 	orr.w	r3, r3, #2
   17378:	2201      	movs	r2, #1
   1737a:	4619      	mov	r1, r3
   1737c:	6b38      	ldr	r0, [r7, #48]	; 0x30
   1737e:	f7f6 fa87 	bl	d890 <mp_map_lookup>
   17382:	62b8      	str	r0, [r7, #40]	; 0x28
                elem->value = dest[1];
   17384:	687b      	ldr	r3, [r7, #4]
   17386:	685a      	ldr	r2, [r3, #4]
   17388:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1738a:	605a      	str	r2, [r3, #4]
                dest[0] = MP_OBJ_NULL; // indicate success
   1738c:	687b      	ldr	r3, [r7, #4]
   1738e:	2200      	movs	r2, #0
   17390:	601a      	str	r2, [r3, #0]
   17392:	e000      	b.n	17396 <type_attr+0xea>
                return;
   17394:	bf00      	nop
            }
        }
    }
}
   17396:	3738      	adds	r7, #56	; 0x38
   17398:	46bd      	mov	sp, r7
   1739a:	bd80      	pop	{r7, pc}
   1739c:	00025df4 	.word	0x00025df4
   173a0:	00025d9c 	.word	0x00025d9c
   173a4:	000260f4 	.word	0x000260f4
   173a8:	00025b1c 	.word	0x00025b1c
   173ac:	00023d0c 	.word	0x00023d0c
   173b0:	00025dc4 	.word	0x00025dc4

000173b4 <mp_obj_new_type>:
    .call = type_call,
    .unary_op = mp_generic_unary_op,
    .attr = type_attr,
};

mp_obj_t mp_obj_new_type(qstr name, mp_obj_t bases_tuple, mp_obj_t locals_dict) {
   173b4:	b580      	push	{r7, lr}
   173b6:	b08e      	sub	sp, #56	; 0x38
   173b8:	af00      	add	r7, sp, #0
   173ba:	60f8      	str	r0, [r7, #12]
   173bc:	60b9      	str	r1, [r7, #8]
   173be:	607a      	str	r2, [r7, #4]
    // Verify input objects have expected type
    if (!MP_OBJ_IS_TYPE(bases_tuple, &mp_type_tuple)) {
   173c0:	68b8      	ldr	r0, [r7, #8]
   173c2:	f7ff f825 	bl	16410 <MP_OBJ_IS_OBJ>
   173c6:	4603      	mov	r3, r0
   173c8:	f083 0301 	eor.w	r3, r3, #1
   173cc:	b2db      	uxtb	r3, r3
   173ce:	2b00      	cmp	r3, #0
   173d0:	d104      	bne.n	173dc <mp_obj_new_type+0x28>
   173d2:	68bb      	ldr	r3, [r7, #8]
   173d4:	681b      	ldr	r3, [r3, #0]
   173d6:	4a65      	ldr	r2, [pc, #404]	; (1756c <mp_obj_new_type+0x1b8>)
   173d8:	4293      	cmp	r3, r2
   173da:	d002      	beq.n	173e2 <mp_obj_new_type+0x2e>
        mp_raise_TypeError(NULL);
   173dc:	2000      	movs	r0, #0
   173de:	f7f5 ffd5 	bl	d38c <mp_raise_TypeError>
    }
    if (!MP_OBJ_IS_TYPE(locals_dict, &mp_type_dict)) {
   173e2:	6878      	ldr	r0, [r7, #4]
   173e4:	f7ff f814 	bl	16410 <MP_OBJ_IS_OBJ>
   173e8:	4603      	mov	r3, r0
   173ea:	f083 0301 	eor.w	r3, r3, #1
   173ee:	b2db      	uxtb	r3, r3
   173f0:	2b00      	cmp	r3, #0
   173f2:	d104      	bne.n	173fe <mp_obj_new_type+0x4a>
   173f4:	687b      	ldr	r3, [r7, #4]
   173f6:	681b      	ldr	r3, [r3, #0]
   173f8:	4a5d      	ldr	r2, [pc, #372]	; (17570 <mp_obj_new_type+0x1bc>)
   173fa:	4293      	cmp	r3, r2
   173fc:	d002      	beq.n	17404 <mp_obj_new_type+0x50>
        mp_raise_TypeError(NULL);
   173fe:	2000      	movs	r0, #0
   17400:	f7f5 ffc4 	bl	d38c <mp_raise_TypeError>
    }

    // TODO might need to make a copy of locals_dict; at least that's how CPython does it

    // Basic validation of base classes
    uint16_t base_flags = 0;
   17404:	2300      	movs	r3, #0
   17406:	867b      	strh	r3, [r7, #50]	; 0x32
    size_t bases_len;
    mp_obj_t *bases_items;
    mp_obj_tuple_get(bases_tuple, &bases_len, &bases_items);
   17408:	f107 0214 	add.w	r2, r7, #20
   1740c:	f107 0318 	add.w	r3, r7, #24
   17410:	4619      	mov	r1, r3
   17412:	68b8      	ldr	r0, [r7, #8]
   17414:	f7fe ff52 	bl	162bc <mp_obj_tuple_get>
    for (size_t i = 0; i < bases_len; i++) {
   17418:	2300      	movs	r3, #0
   1741a:	637b      	str	r3, [r7, #52]	; 0x34
   1741c:	e029      	b.n	17472 <mp_obj_new_type+0xbe>
        if (!MP_OBJ_IS_TYPE(bases_items[i], &mp_type_type)) {
   1741e:	697a      	ldr	r2, [r7, #20]
   17420:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   17422:	009b      	lsls	r3, r3, #2
   17424:	4413      	add	r3, r2
   17426:	681b      	ldr	r3, [r3, #0]
   17428:	4618      	mov	r0, r3
   1742a:	f7fe fff1 	bl	16410 <MP_OBJ_IS_OBJ>
   1742e:	4603      	mov	r3, r0
   17430:	f083 0301 	eor.w	r3, r3, #1
   17434:	b2db      	uxtb	r3, r3
   17436:	2b00      	cmp	r3, #0
   17438:	d108      	bne.n	1744c <mp_obj_new_type+0x98>
   1743a:	697a      	ldr	r2, [r7, #20]
   1743c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1743e:	009b      	lsls	r3, r3, #2
   17440:	4413      	add	r3, r2
   17442:	681b      	ldr	r3, [r3, #0]
   17444:	681b      	ldr	r3, [r3, #0]
   17446:	4a4b      	ldr	r2, [pc, #300]	; (17574 <mp_obj_new_type+0x1c0>)
   17448:	4293      	cmp	r3, r2
   1744a:	d002      	beq.n	17452 <mp_obj_new_type+0x9e>
            mp_raise_TypeError(NULL);
   1744c:	2000      	movs	r0, #0
   1744e:	f7f5 ff9d 	bl	d38c <mp_raise_TypeError>
        }
        mp_obj_type_t *t = MP_OBJ_TO_PTR(bases_items[i]);
   17452:	697a      	ldr	r2, [r7, #20]
   17454:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   17456:	009b      	lsls	r3, r3, #2
   17458:	4413      	add	r3, r2
   1745a:	681b      	ldr	r3, [r3, #0]
   1745c:	62fb      	str	r3, [r7, #44]	; 0x2c
        // TODO: Verify with CPy, tested on function type
        if (t->make_new == NULL) {
   1745e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   17460:	68db      	ldr	r3, [r3, #12]
   17462:	2b00      	cmp	r3, #0
   17464:	d102      	bne.n	1746c <mp_obj_new_type+0xb8>
            if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
                mp_raise_TypeError("type isn't an acceptable base type");
   17466:	4844      	ldr	r0, [pc, #272]	; (17578 <mp_obj_new_type+0x1c4>)
   17468:	f7f5 ff90 	bl	d38c <mp_raise_TypeError>
    for (size_t i = 0; i < bases_len; i++) {
   1746c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1746e:	3301      	adds	r3, #1
   17470:	637b      	str	r3, [r7, #52]	; 0x34
   17472:	69bb      	ldr	r3, [r7, #24]
   17474:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   17476:	429a      	cmp	r2, r3
   17478:	d3d1      	bcc.n	1741e <mp_obj_new_type+0x6a>
            base_flags |= t->flags & TYPE_FLAG_HAS_SPECIAL_ACCESSORS;
        }
        #endif
    }

    mp_obj_type_t *o = m_new0(mp_obj_type_t, 1);
   1747a:	203c      	movs	r0, #60	; 0x3c
   1747c:	f7e8 ff82 	bl	384 <m_malloc0>
   17480:	62b8      	str	r0, [r7, #40]	; 0x28
    o->base.type = &mp_type_type;
   17482:	6abb      	ldr	r3, [r7, #40]	; 0x28
   17484:	4a3b      	ldr	r2, [pc, #236]	; (17574 <mp_obj_new_type+0x1c0>)
   17486:	601a      	str	r2, [r3, #0]
    o->flags = base_flags;
   17488:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1748a:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
   1748c:	809a      	strh	r2, [r3, #4]
    o->name = name;
   1748e:	68fb      	ldr	r3, [r7, #12]
   17490:	b29a      	uxth	r2, r3
   17492:	6abb      	ldr	r3, [r7, #40]	; 0x28
   17494:	80da      	strh	r2, [r3, #6]
    o->print = instance_print;
   17496:	6abb      	ldr	r3, [r7, #40]	; 0x28
   17498:	4a38      	ldr	r2, [pc, #224]	; (1757c <mp_obj_new_type+0x1c8>)
   1749a:	609a      	str	r2, [r3, #8]
    o->make_new = mp_obj_instance_make_new;
   1749c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1749e:	4a38      	ldr	r2, [pc, #224]	; (17580 <mp_obj_new_type+0x1cc>)
   174a0:	60da      	str	r2, [r3, #12]
    o->call = mp_obj_instance_call;
   174a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   174a4:	4a37      	ldr	r2, [pc, #220]	; (17584 <mp_obj_new_type+0x1d0>)
   174a6:	611a      	str	r2, [r3, #16]
    o->unary_op = instance_unary_op;
   174a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
   174aa:	4a37      	ldr	r2, [pc, #220]	; (17588 <mp_obj_new_type+0x1d4>)
   174ac:	615a      	str	r2, [r3, #20]
    o->binary_op = instance_binary_op;
   174ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
   174b0:	4a36      	ldr	r2, [pc, #216]	; (1758c <mp_obj_new_type+0x1d8>)
   174b2:	619a      	str	r2, [r3, #24]
    o->attr = mp_obj_instance_attr;
   174b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
   174b6:	4a36      	ldr	r2, [pc, #216]	; (17590 <mp_obj_new_type+0x1dc>)
   174b8:	61da      	str	r2, [r3, #28]
    o->subscr = instance_subscr;
   174ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
   174bc:	4a35      	ldr	r2, [pc, #212]	; (17594 <mp_obj_new_type+0x1e0>)
   174be:	621a      	str	r2, [r3, #32]
    o->getiter = instance_getiter;
   174c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
   174c2:	4a35      	ldr	r2, [pc, #212]	; (17598 <mp_obj_new_type+0x1e4>)
   174c4:	625a      	str	r2, [r3, #36]	; 0x24
    //o->iternext = ; not implemented
    o->buffer_p.get_buffer = instance_get_buffer;
   174c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
   174c8:	4a34      	ldr	r2, [pc, #208]	; (1759c <mp_obj_new_type+0x1e8>)
   174ca:	62da      	str	r2, [r3, #44]	; 0x2c

    if (bases_len > 0) {
   174cc:	69bb      	ldr	r3, [r7, #24]
   174ce:	2b00      	cmp	r3, #0
   174d0:	d00f      	beq.n	174f2 <mp_obj_new_type+0x13e>
        // Inherit protocol from a base class. This allows to define an
        // abstract base class which would translate C-level protocol to
        // Python method calls, and any subclass inheriting from it will
        // support this feature.
        o->protocol = ((mp_obj_type_t*)MP_OBJ_TO_PTR(bases_items[0]))->protocol;
   174d2:	697b      	ldr	r3, [r7, #20]
   174d4:	681b      	ldr	r3, [r3, #0]
   174d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   174d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
   174da:	631a      	str	r2, [r3, #48]	; 0x30

        if (bases_len >= 2) {
   174dc:	69bb      	ldr	r3, [r7, #24]
   174de:	2b01      	cmp	r3, #1
   174e0:	d903      	bls.n	174ea <mp_obj_new_type+0x136>
            #if MICROPY_MULTIPLE_INHERITANCE
            o->parent = MP_OBJ_TO_PTR(bases_tuple);
   174e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   174e4:	68ba      	ldr	r2, [r7, #8]
   174e6:	635a      	str	r2, [r3, #52]	; 0x34
   174e8:	e003      	b.n	174f2 <mp_obj_new_type+0x13e>
            #else
            mp_raise_NotImplementedError("multiple inheritance not supported");
            #endif
        } else {
            o->parent = MP_OBJ_TO_PTR(bases_items[0]);
   174ea:	697b      	ldr	r3, [r7, #20]
   174ec:	681a      	ldr	r2, [r3, #0]
   174ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
   174f0:	635a      	str	r2, [r3, #52]	; 0x34
        }
    }

    o->locals_dict = MP_OBJ_TO_PTR(locals_dict);
   174f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   174f4:	687a      	ldr	r2, [r7, #4]
   174f6:	639a      	str	r2, [r3, #56]	; 0x38
        }
    }
    #endif

    const mp_obj_type_t *native_base;
    size_t num_native_bases = instance_count_native_bases(o, &native_base);
   174f8:	f107 0310 	add.w	r3, r7, #16
   174fc:	4619      	mov	r1, r3
   174fe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   17500:	f7fe ffb4 	bl	1646c <instance_count_native_bases>
   17504:	4603      	mov	r3, r0
   17506:	627b      	str	r3, [r7, #36]	; 0x24
    if (num_native_bases > 1) {
   17508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1750a:	2b01      	cmp	r3, #1
   1750c:	d902      	bls.n	17514 <mp_obj_new_type+0x160>
        mp_raise_TypeError("multiple bases have instance lay-out conflict");
   1750e:	4824      	ldr	r0, [pc, #144]	; (175a0 <mp_obj_new_type+0x1ec>)
   17510:	f7f5 ff3c 	bl	d38c <mp_raise_TypeError>
    }

    mp_map_t *locals_map = &o->locals_dict->map;
   17514:	6abb      	ldr	r3, [r7, #40]	; 0x28
   17516:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   17518:	3304      	adds	r3, #4
   1751a:	623b      	str	r3, [r7, #32]
    mp_map_elem_t *elem = mp_map_lookup(locals_map, MP_OBJ_NEW_QSTR(MP_QSTR___new__), MP_MAP_LOOKUP);
   1751c:	2200      	movs	r2, #0
   1751e:	2176      	movs	r1, #118	; 0x76
   17520:	6a38      	ldr	r0, [r7, #32]
   17522:	f7f6 f9b5 	bl	d890 <mp_map_lookup>
   17526:	61f8      	str	r0, [r7, #28]
    if (elem != NULL) {
   17528:	69fb      	ldr	r3, [r7, #28]
   1752a:	2b00      	cmp	r3, #0
   1752c:	d018      	beq.n	17560 <mp_obj_new_type+0x1ac>
        // __new__ slot exists; check if it is a function
        if (MP_OBJ_IS_FUN(elem->value)) {
   1752e:	69fb      	ldr	r3, [r7, #28]
   17530:	685b      	ldr	r3, [r3, #4]
   17532:	4618      	mov	r0, r3
   17534:	f7fe ff6c 	bl	16410 <MP_OBJ_IS_OBJ>
   17538:	4603      	mov	r3, r0
   1753a:	2b00      	cmp	r3, #0
   1753c:	d010      	beq.n	17560 <mp_obj_new_type+0x1ac>
   1753e:	69fb      	ldr	r3, [r7, #28]
   17540:	685b      	ldr	r3, [r3, #4]
   17542:	681b      	ldr	r3, [r3, #0]
   17544:	88db      	ldrh	r3, [r3, #6]
   17546:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
   1754a:	d109      	bne.n	17560 <mp_obj_new_type+0x1ac>
            // __new__ is a function, wrap it in a staticmethod decorator
            elem->value = static_class_method_make_new(&mp_type_staticmethod, 1, 0, &elem->value);
   1754c:	69fb      	ldr	r3, [r7, #28]
   1754e:	3304      	adds	r3, #4
   17550:	2200      	movs	r2, #0
   17552:	2101      	movs	r1, #1
   17554:	4813      	ldr	r0, [pc, #76]	; (175a4 <mp_obj_new_type+0x1f0>)
   17556:	f000 fa94 	bl	17a82 <static_class_method_make_new>
   1755a:	4602      	mov	r2, r0
   1755c:	69fb      	ldr	r3, [r7, #28]
   1755e:	605a      	str	r2, [r3, #4]
        }
    }

    return MP_OBJ_FROM_PTR(o);
   17560:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
   17562:	4618      	mov	r0, r3
   17564:	3738      	adds	r7, #56	; 0x38
   17566:	46bd      	mov	sp, r7
   17568:	bd80      	pop	{r7, pc}
   1756a:	bf00      	nop
   1756c:	00025a34 	.word	0x00025a34
   17570:	00023d0c 	.word	0x00023d0c
   17574:	00025df4 	.word	0x00025df4
   17578:	00025e30 	.word	0x00025e30
   1757c:	00016919 	.word	0x00016919
   17580:	00016a25 	.word	0x00016a25
   17584:	00017077 	.word	0x00017077
   17588:	00016c01 	.word	0x00016c01
   1758c:	00016d05 	.word	0x00016d05
   17590:	00016efb 	.word	0x00016efb
   17594:	00016f3f 	.word	0x00016f3f
   17598:	000170e1 	.word	0x000170e1
   1759c:	00017165 	.word	0x00017165
   175a0:	00025e54 	.word	0x00025e54
   175a4:	00026000 	.word	0x00026000

000175a8 <super_print>:
    mp_obj_base_t base;
    mp_obj_t type;
    mp_obj_t obj;
} mp_obj_super_t;

STATIC void super_print(const mp_print_t *print, mp_obj_t self_in, mp_print_kind_t kind) {
   175a8:	b580      	push	{r7, lr}
   175aa:	b086      	sub	sp, #24
   175ac:	af00      	add	r7, sp, #0
   175ae:	60f8      	str	r0, [r7, #12]
   175b0:	60b9      	str	r1, [r7, #8]
   175b2:	607a      	str	r2, [r7, #4]
    (void)kind;
    mp_obj_super_t *self = MP_OBJ_TO_PTR(self_in);
   175b4:	68bb      	ldr	r3, [r7, #8]
   175b6:	617b      	str	r3, [r7, #20]
    mp_print_str(print, "<super: ");
   175b8:	490e      	ldr	r1, [pc, #56]	; (175f4 <super_print+0x4c>)
   175ba:	68f8      	ldr	r0, [r7, #12]
   175bc:	f7ea fa46 	bl	1a4c <mp_print_str>
    mp_obj_print_helper(print, self->type, PRINT_STR);
   175c0:	697b      	ldr	r3, [r7, #20]
   175c2:	685b      	ldr	r3, [r3, #4]
   175c4:	2200      	movs	r2, #0
   175c6:	4619      	mov	r1, r3
   175c8:	68f8      	ldr	r0, [r7, #12]
   175ca:	f7f6 fb78 	bl	dcbe <mp_obj_print_helper>
    mp_print_str(print, ", ");
   175ce:	490a      	ldr	r1, [pc, #40]	; (175f8 <super_print+0x50>)
   175d0:	68f8      	ldr	r0, [r7, #12]
   175d2:	f7ea fa3b 	bl	1a4c <mp_print_str>
    mp_obj_print_helper(print, self->obj, PRINT_STR);
   175d6:	697b      	ldr	r3, [r7, #20]
   175d8:	689b      	ldr	r3, [r3, #8]
   175da:	2200      	movs	r2, #0
   175dc:	4619      	mov	r1, r3
   175de:	68f8      	ldr	r0, [r7, #12]
   175e0:	f7f6 fb6d 	bl	dcbe <mp_obj_print_helper>
    mp_print_str(print, ">");
   175e4:	4905      	ldr	r1, [pc, #20]	; (175fc <super_print+0x54>)
   175e6:	68f8      	ldr	r0, [r7, #12]
   175e8:	f7ea fa30 	bl	1a4c <mp_print_str>
}
   175ec:	bf00      	nop
   175ee:	3718      	adds	r7, #24
   175f0:	46bd      	mov	sp, r7
   175f2:	bd80      	pop	{r7, pc}
   175f4:	00025e84 	.word	0x00025e84
   175f8:	00025e90 	.word	0x00025e90
   175fc:	00025e94 	.word	0x00025e94

00017600 <super_make_new>:

STATIC mp_obj_t super_make_new(const mp_obj_type_t *type_in, size_t n_args, size_t n_kw, const mp_obj_t *args) {
   17600:	b580      	push	{r7, lr}
   17602:	b088      	sub	sp, #32
   17604:	af02      	add	r7, sp, #8
   17606:	60f8      	str	r0, [r7, #12]
   17608:	60b9      	str	r1, [r7, #8]
   1760a:	607a      	str	r2, [r7, #4]
   1760c:	603b      	str	r3, [r7, #0]
    (void)type_in;
    // 0 arguments are turned into 2 in the compiler
    // 1 argument is not yet implemented
    mp_arg_check_num(n_args, n_kw, 2, 2, false);
   1760e:	2300      	movs	r3, #0
   17610:	9300      	str	r3, [sp, #0]
   17612:	2302      	movs	r3, #2
   17614:	2202      	movs	r2, #2
   17616:	6879      	ldr	r1, [r7, #4]
   17618:	68b8      	ldr	r0, [r7, #8]
   1761a:	f7fe ff0b 	bl	16434 <mp_arg_check_num>
    if (!MP_OBJ_IS_TYPE(args[0], &mp_type_type)) {
   1761e:	683b      	ldr	r3, [r7, #0]
   17620:	681b      	ldr	r3, [r3, #0]
   17622:	4618      	mov	r0, r3
   17624:	f7fe fef4 	bl	16410 <MP_OBJ_IS_OBJ>
   17628:	4603      	mov	r3, r0
   1762a:	f083 0301 	eor.w	r3, r3, #1
   1762e:	b2db      	uxtb	r3, r3
   17630:	2b00      	cmp	r3, #0
   17632:	d105      	bne.n	17640 <super_make_new+0x40>
   17634:	683b      	ldr	r3, [r7, #0]
   17636:	681b      	ldr	r3, [r3, #0]
   17638:	681b      	ldr	r3, [r3, #0]
   1763a:	4a0d      	ldr	r2, [pc, #52]	; (17670 <super_make_new+0x70>)
   1763c:	4293      	cmp	r3, r2
   1763e:	d002      	beq.n	17646 <super_make_new+0x46>
        mp_raise_TypeError(NULL);
   17640:	2000      	movs	r0, #0
   17642:	f7f5 fea3 	bl	d38c <mp_raise_TypeError>
    }
    mp_obj_super_t *o = m_new_obj(mp_obj_super_t);
   17646:	200c      	movs	r0, #12
   17648:	f7e8 fe68 	bl	31c <m_malloc>
   1764c:	6178      	str	r0, [r7, #20]
    *o = (mp_obj_super_t){{type_in}, args[0], args[1]};
   1764e:	683b      	ldr	r3, [r7, #0]
   17650:	6819      	ldr	r1, [r3, #0]
   17652:	683b      	ldr	r3, [r7, #0]
   17654:	3304      	adds	r3, #4
   17656:	681a      	ldr	r2, [r3, #0]
   17658:	697b      	ldr	r3, [r7, #20]
   1765a:	68f8      	ldr	r0, [r7, #12]
   1765c:	6018      	str	r0, [r3, #0]
   1765e:	697b      	ldr	r3, [r7, #20]
   17660:	6059      	str	r1, [r3, #4]
   17662:	697b      	ldr	r3, [r7, #20]
   17664:	609a      	str	r2, [r3, #8]
    return MP_OBJ_FROM_PTR(o);
   17666:	697b      	ldr	r3, [r7, #20]
}
   17668:	4618      	mov	r0, r3
   1766a:	3718      	adds	r7, #24
   1766c:	46bd      	mov	sp, r7
   1766e:	bd80      	pop	{r7, pc}
   17670:	00025df4 	.word	0x00025df4

00017674 <super_attr>:

STATIC void super_attr(mp_obj_t self_in, qstr attr, mp_obj_t *dest) {
   17674:	b580      	push	{r7, lr}
   17676:	b090      	sub	sp, #64	; 0x40
   17678:	af00      	add	r7, sp, #0
   1767a:	60f8      	str	r0, [r7, #12]
   1767c:	60b9      	str	r1, [r7, #8]
   1767e:	607a      	str	r2, [r7, #4]
    if (dest[0] != MP_OBJ_NULL) {
   17680:	687b      	ldr	r3, [r7, #4]
   17682:	681b      	ldr	r3, [r3, #0]
   17684:	2b00      	cmp	r3, #0
   17686:	f040 80b8 	bne.w	177fa <super_attr+0x186>
        // not load attribute
        return;
    }

    assert(MP_OBJ_IS_TYPE(self_in, &mp_type_super));
   1768a:	68f8      	ldr	r0, [r7, #12]
   1768c:	f7fe fec0 	bl	16410 <MP_OBJ_IS_OBJ>
   17690:	4603      	mov	r3, r0
   17692:	2b00      	cmp	r3, #0
   17694:	d004      	beq.n	176a0 <super_attr+0x2c>
   17696:	68fb      	ldr	r3, [r7, #12]
   17698:	681b      	ldr	r3, [r3, #0]
   1769a:	4a5b      	ldr	r2, [pc, #364]	; (17808 <super_attr+0x194>)
   1769c:	4293      	cmp	r3, r2
   1769e:	d006      	beq.n	176ae <super_attr+0x3a>
   176a0:	4b5a      	ldr	r3, [pc, #360]	; (1780c <super_attr+0x198>)
   176a2:	4a5b      	ldr	r2, [pc, #364]	; (17810 <super_attr+0x19c>)
   176a4:	f240 41c1 	movw	r1, #1217	; 0x4c1
   176a8:	485a      	ldr	r0, [pc, #360]	; (17814 <super_attr+0x1a0>)
   176aa:	f005 fc19 	bl	1cee0 <__assert_func>
    mp_obj_super_t *self = MP_OBJ_TO_PTR(self_in);
   176ae:	68fb      	ldr	r3, [r7, #12]
   176b0:	63bb      	str	r3, [r7, #56]	; 0x38

    assert(MP_OBJ_IS_TYPE(self->type, &mp_type_type));
   176b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   176b4:	685b      	ldr	r3, [r3, #4]
   176b6:	4618      	mov	r0, r3
   176b8:	f7fe feaa 	bl	16410 <MP_OBJ_IS_OBJ>
   176bc:	4603      	mov	r3, r0
   176be:	2b00      	cmp	r3, #0
   176c0:	d005      	beq.n	176ce <super_attr+0x5a>
   176c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   176c4:	685b      	ldr	r3, [r3, #4]
   176c6:	681b      	ldr	r3, [r3, #0]
   176c8:	4a53      	ldr	r2, [pc, #332]	; (17818 <super_attr+0x1a4>)
   176ca:	4293      	cmp	r3, r2
   176cc:	d006      	beq.n	176dc <super_attr+0x68>
   176ce:	4b53      	ldr	r3, [pc, #332]	; (1781c <super_attr+0x1a8>)
   176d0:	4a4f      	ldr	r2, [pc, #316]	; (17810 <super_attr+0x19c>)
   176d2:	f240 41c4 	movw	r1, #1220	; 0x4c4
   176d6:	484f      	ldr	r0, [pc, #316]	; (17814 <super_attr+0x1a0>)
   176d8:	f005 fc02 	bl	1cee0 <__assert_func>

    mp_obj_type_t *type = MP_OBJ_TO_PTR(self->type);
   176dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   176de:	685b      	ldr	r3, [r3, #4]
   176e0:	637b      	str	r3, [r7, #52]	; 0x34

    struct class_lookup_data lookup = {
        .obj = MP_OBJ_TO_PTR(self->obj),
   176e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   176e4:	689b      	ldr	r3, [r3, #8]
    struct class_lookup_data lookup = {
   176e6:	617b      	str	r3, [r7, #20]
   176e8:	68bb      	ldr	r3, [r7, #8]
   176ea:	61bb      	str	r3, [r7, #24]
   176ec:	2300      	movs	r3, #0
   176ee:	61fb      	str	r3, [r7, #28]
   176f0:	687b      	ldr	r3, [r7, #4]
   176f2:	623b      	str	r3, [r7, #32]
   176f4:	2300      	movs	r3, #0
   176f6:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
        .dest = dest,
        .is_type = false,
    };

    // Allow a call super().__init__() to reach any native base classes
    if (attr == MP_QSTR___init__) {
   176fa:	68bb      	ldr	r3, [r7, #8]
   176fc:	2b13      	cmp	r3, #19
   176fe:	d101      	bne.n	17704 <super_attr+0x90>
        lookup.meth_offset = offsetof(mp_obj_type_t, make_new);
   17700:	230c      	movs	r3, #12
   17702:	61fb      	str	r3, [r7, #28]
    }

    if (type->parent == NULL) {
   17704:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   17706:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   17708:	2b00      	cmp	r3, #0
   1770a:	d05c      	beq.n	177c6 <super_attr+0x152>
        // no parents, do nothing
    #if MICROPY_MULTIPLE_INHERITANCE
    } else if (((mp_obj_base_t*)type->parent)->type == &mp_type_tuple) {
   1770c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1770e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   17710:	681b      	ldr	r3, [r3, #0]
   17712:	4a43      	ldr	r2, [pc, #268]	; (17820 <super_attr+0x1ac>)
   17714:	4293      	cmp	r3, r2
   17716:	d147      	bne.n	177a8 <super_attr+0x134>
        const mp_obj_tuple_t *parent_tuple = type->parent;
   17718:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1771a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   1771c:	633b      	str	r3, [r7, #48]	; 0x30
        size_t len = parent_tuple->len;
   1771e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   17720:	685b      	ldr	r3, [r3, #4]
   17722:	62fb      	str	r3, [r7, #44]	; 0x2c
        const mp_obj_t *items = parent_tuple->items;
   17724:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   17726:	3308      	adds	r3, #8
   17728:	62bb      	str	r3, [r7, #40]	; 0x28
        for (size_t i = 0; i < len; i++) {
   1772a:	2300      	movs	r3, #0
   1772c:	63fb      	str	r3, [r7, #60]	; 0x3c
   1772e:	e036      	b.n	1779e <super_attr+0x12a>
            assert(MP_OBJ_IS_TYPE(items[i], &mp_type_type));
   17730:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   17732:	009b      	lsls	r3, r3, #2
   17734:	6aba      	ldr	r2, [r7, #40]	; 0x28
   17736:	4413      	add	r3, r2
   17738:	681b      	ldr	r3, [r3, #0]
   1773a:	4618      	mov	r0, r3
   1773c:	f7fe fe68 	bl	16410 <MP_OBJ_IS_OBJ>
   17740:	4603      	mov	r3, r0
   17742:	2b00      	cmp	r3, #0
   17744:	d008      	beq.n	17758 <super_attr+0xe4>
   17746:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   17748:	009b      	lsls	r3, r3, #2
   1774a:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1774c:	4413      	add	r3, r2
   1774e:	681b      	ldr	r3, [r3, #0]
   17750:	681b      	ldr	r3, [r3, #0]
   17752:	4a31      	ldr	r2, [pc, #196]	; (17818 <super_attr+0x1a4>)
   17754:	4293      	cmp	r3, r2
   17756:	d006      	beq.n	17766 <super_attr+0xf2>
   17758:	4b32      	ldr	r3, [pc, #200]	; (17824 <super_attr+0x1b0>)
   1775a:	4a2d      	ldr	r2, [pc, #180]	; (17810 <super_attr+0x19c>)
   1775c:	f240 41dd 	movw	r1, #1245	; 0x4dd
   17760:	482c      	ldr	r0, [pc, #176]	; (17814 <super_attr+0x1a0>)
   17762:	f005 fbbd 	bl	1cee0 <__assert_func>
            if (MP_OBJ_TO_PTR(items[i]) == &mp_type_object) {
   17766:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   17768:	009b      	lsls	r3, r3, #2
   1776a:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1776c:	4413      	add	r3, r2
   1776e:	681b      	ldr	r3, [r3, #0]
   17770:	4a2d      	ldr	r2, [pc, #180]	; (17828 <super_attr+0x1b4>)
   17772:	4293      	cmp	r3, r2
   17774:	d00f      	beq.n	17796 <super_attr+0x122>
                // The "object" type will be searched at the end of this function,
                // and we don't want to lookup native methods in object.
                continue;
            }
            mp_obj_class_lookup(&lookup, (mp_obj_type_t*)MP_OBJ_TO_PTR(items[i]));
   17776:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   17778:	009b      	lsls	r3, r3, #2
   1777a:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1777c:	4413      	add	r3, r2
   1777e:	681a      	ldr	r2, [r3, #0]
   17780:	f107 0314 	add.w	r3, r7, #20
   17784:	4611      	mov	r1, r2
   17786:	4618      	mov	r0, r3
   17788:	f7fe ff3e 	bl	16608 <mp_obj_class_lookup>
            if (dest[0] != MP_OBJ_NULL) {
   1778c:	687b      	ldr	r3, [r7, #4]
   1778e:	681b      	ldr	r3, [r3, #0]
   17790:	2b00      	cmp	r3, #0
   17792:	d117      	bne.n	177c4 <super_attr+0x150>
   17794:	e000      	b.n	17798 <super_attr+0x124>
                continue;
   17796:	bf00      	nop
        for (size_t i = 0; i < len; i++) {
   17798:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1779a:	3301      	adds	r3, #1
   1779c:	63fb      	str	r3, [r7, #60]	; 0x3c
   1779e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   177a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   177a2:	429a      	cmp	r2, r3
   177a4:	d3c4      	bcc.n	17730 <super_attr+0xbc>
   177a6:	e00e      	b.n	177c6 <super_attr+0x152>
                break;
            }
        }
    #endif
    } else if (type->parent != &mp_type_object) {
   177a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   177aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   177ac:	4a1e      	ldr	r2, [pc, #120]	; (17828 <super_attr+0x1b4>)
   177ae:	4293      	cmp	r3, r2
   177b0:	d009      	beq.n	177c6 <super_attr+0x152>
        mp_obj_class_lookup(&lookup, type->parent);
   177b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   177b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   177b6:	f107 0314 	add.w	r3, r7, #20
   177ba:	4611      	mov	r1, r2
   177bc:	4618      	mov	r0, r3
   177be:	f7fe ff23 	bl	16608 <mp_obj_class_lookup>
   177c2:	e000      	b.n	177c6 <super_attr+0x152>
                break;
   177c4:	bf00      	nop
    }

    if (dest[0] != MP_OBJ_NULL) {
   177c6:	687b      	ldr	r3, [r7, #4]
   177c8:	681b      	ldr	r3, [r3, #0]
   177ca:	2b00      	cmp	r3, #0
   177cc:	d00c      	beq.n	177e8 <super_attr+0x174>
        if (dest[0] == MP_OBJ_SENTINEL) {
   177ce:	687b      	ldr	r3, [r7, #4]
   177d0:	681b      	ldr	r3, [r3, #0]
   177d2:	2b08      	cmp	r3, #8
   177d4:	d113      	bne.n	177fe <super_attr+0x18a>
            // Looked up native __init__ so defer to it
            dest[0] = MP_OBJ_FROM_PTR(&native_base_init_wrapper_obj);
   177d6:	687b      	ldr	r3, [r7, #4]
   177d8:	4a14      	ldr	r2, [pc, #80]	; (1782c <super_attr+0x1b8>)
   177da:	601a      	str	r2, [r3, #0]
            dest[1] = self->obj;
   177dc:	687b      	ldr	r3, [r7, #4]
   177de:	3304      	adds	r3, #4
   177e0:	6bba      	ldr	r2, [r7, #56]	; 0x38
   177e2:	6892      	ldr	r2, [r2, #8]
   177e4:	601a      	str	r2, [r3, #0]
        }
        return;
   177e6:	e00a      	b.n	177fe <super_attr+0x18a>
    }

    // Reset meth_offset so we don't look up any native methods in object,
    // because object never takes up the native base-class slot.
    lookup.meth_offset = 0;
   177e8:	2300      	movs	r3, #0
   177ea:	61fb      	str	r3, [r7, #28]

    mp_obj_class_lookup(&lookup, &mp_type_object);
   177ec:	f107 0314 	add.w	r3, r7, #20
   177f0:	490d      	ldr	r1, [pc, #52]	; (17828 <super_attr+0x1b4>)
   177f2:	4618      	mov	r0, r3
   177f4:	f7fe ff08 	bl	16608 <mp_obj_class_lookup>
   177f8:	e002      	b.n	17800 <super_attr+0x18c>
        return;
   177fa:	bf00      	nop
   177fc:	e000      	b.n	17800 <super_attr+0x18c>
        return;
   177fe:	bf00      	nop
}
   17800:	3740      	adds	r7, #64	; 0x40
   17802:	46bd      	mov	sp, r7
   17804:	bd80      	pop	{r7, pc}
   17806:	bf00      	nop
   17808:	00025f14 	.word	0x00025f14
   1780c:	00025e98 	.word	0x00025e98
   17810:	00026100 	.word	0x00026100
   17814:	00025b1c 	.word	0x00025b1c
   17818:	00025df4 	.word	0x00025df4
   1781c:	00025ec0 	.word	0x00025ec0
   17820:	00025a34 	.word	0x00025a34
   17824:	00025eec 	.word	0x00025eec
   17828:	00025060 	.word	0x00025060
   1782c:	00025b30 	.word	0x00025b30

00017830 <mp_load_super_method>:
    .print = super_print,
    .make_new = super_make_new,
    .attr = super_attr,
};

void mp_load_super_method(qstr attr, mp_obj_t *dest) {
   17830:	b580      	push	{r7, lr}
   17832:	b086      	sub	sp, #24
   17834:	af00      	add	r7, sp, #0
   17836:	6078      	str	r0, [r7, #4]
   17838:	6039      	str	r1, [r7, #0]
    mp_obj_super_t super = {{&mp_type_super}, dest[1], dest[2]};
   1783a:	4b09      	ldr	r3, [pc, #36]	; (17860 <mp_load_super_method+0x30>)
   1783c:	60fb      	str	r3, [r7, #12]
   1783e:	683b      	ldr	r3, [r7, #0]
   17840:	685b      	ldr	r3, [r3, #4]
   17842:	613b      	str	r3, [r7, #16]
   17844:	683b      	ldr	r3, [r7, #0]
   17846:	689b      	ldr	r3, [r3, #8]
   17848:	617b      	str	r3, [r7, #20]
    mp_load_method(MP_OBJ_FROM_PTR(&super), attr, dest);
   1784a:	f107 030c 	add.w	r3, r7, #12
   1784e:	683a      	ldr	r2, [r7, #0]
   17850:	6879      	ldr	r1, [r7, #4]
   17852:	4618      	mov	r0, r3
   17854:	f7f5 f9aa 	bl	cbac <mp_load_method>
}
   17858:	bf00      	nop
   1785a:	3718      	adds	r7, #24
   1785c:	46bd      	mov	sp, r7
   1785e:	bd80      	pop	{r7, pc}
   17860:	00025f14 	.word	0x00025f14

00017864 <mp_obj_is_subclass_fast>:
/******************************************************************************/
// subclassing and built-ins specific to types

// object and classinfo should be type objects
// (but the function will fail gracefully if they are not)
bool mp_obj_is_subclass_fast(mp_const_obj_t object, mp_const_obj_t classinfo) {
   17864:	b580      	push	{r7, lr}
   17866:	b086      	sub	sp, #24
   17868:	af00      	add	r7, sp, #0
   1786a:	6078      	str	r0, [r7, #4]
   1786c:	6039      	str	r1, [r7, #0]
    for (;;) {
        if (object == classinfo) {
   1786e:	687a      	ldr	r2, [r7, #4]
   17870:	683b      	ldr	r3, [r7, #0]
   17872:	429a      	cmp	r2, r3
   17874:	d101      	bne.n	1787a <mp_obj_is_subclass_fast+0x16>
            return true;
   17876:	2301      	movs	r3, #1
   17878:	e047      	b.n	1790a <mp_obj_is_subclass_fast+0xa6>
        }

        // not equivalent classes, keep searching base classes

        // object should always be a type object, but just return false if it's not
        if (!MP_OBJ_IS_TYPE(object, &mp_type_type)) {
   1787a:	6878      	ldr	r0, [r7, #4]
   1787c:	f7fe fdc8 	bl	16410 <MP_OBJ_IS_OBJ>
   17880:	4603      	mov	r3, r0
   17882:	f083 0301 	eor.w	r3, r3, #1
   17886:	b2db      	uxtb	r3, r3
   17888:	2b00      	cmp	r3, #0
   1788a:	d104      	bne.n	17896 <mp_obj_is_subclass_fast+0x32>
   1788c:	687b      	ldr	r3, [r7, #4]
   1788e:	681b      	ldr	r3, [r3, #0]
   17890:	4a20      	ldr	r2, [pc, #128]	; (17914 <mp_obj_is_subclass_fast+0xb0>)
   17892:	4293      	cmp	r3, r2
   17894:	d001      	beq.n	1789a <mp_obj_is_subclass_fast+0x36>
            return false;
   17896:	2300      	movs	r3, #0
   17898:	e037      	b.n	1790a <mp_obj_is_subclass_fast+0xa6>
        }

        const mp_obj_type_t *self = MP_OBJ_TO_PTR(object);
   1789a:	687b      	ldr	r3, [r7, #4]
   1789c:	613b      	str	r3, [r7, #16]

        if (self->parent == NULL) {
   1789e:	693b      	ldr	r3, [r7, #16]
   178a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   178a2:	2b00      	cmp	r3, #0
   178a4:	d101      	bne.n	178aa <mp_obj_is_subclass_fast+0x46>
            // type has no parents
            return false;
   178a6:	2300      	movs	r3, #0
   178a8:	e02f      	b.n	1790a <mp_obj_is_subclass_fast+0xa6>
        #if MICROPY_MULTIPLE_INHERITANCE
        } else if (((mp_obj_base_t*)self->parent)->type == &mp_type_tuple) {
   178aa:	693b      	ldr	r3, [r7, #16]
   178ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   178ae:	681b      	ldr	r3, [r3, #0]
   178b0:	4a19      	ldr	r2, [pc, #100]	; (17918 <mp_obj_is_subclass_fast+0xb4>)
   178b2:	4293      	cmp	r3, r2
   178b4:	d125      	bne.n	17902 <mp_obj_is_subclass_fast+0x9e>
            // get the base objects (they should be type objects)
            const mp_obj_tuple_t *parent_tuple = self->parent;
   178b6:	693b      	ldr	r3, [r7, #16]
   178b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   178ba:	60fb      	str	r3, [r7, #12]
            const mp_obj_t *item = parent_tuple->items;
   178bc:	68fb      	ldr	r3, [r7, #12]
   178be:	3308      	adds	r3, #8
   178c0:	617b      	str	r3, [r7, #20]
            const mp_obj_t *top = item + parent_tuple->len - 1;
   178c2:	68fb      	ldr	r3, [r7, #12]
   178c4:	685b      	ldr	r3, [r3, #4]
   178c6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   178ca:	3b01      	subs	r3, #1
   178cc:	009b      	lsls	r3, r3, #2
   178ce:	697a      	ldr	r2, [r7, #20]
   178d0:	4413      	add	r3, r2
   178d2:	60bb      	str	r3, [r7, #8]

            // iterate through the base objects
            for (; item < top; ++item) {
   178d4:	e00d      	b.n	178f2 <mp_obj_is_subclass_fast+0x8e>
                if (mp_obj_is_subclass_fast(*item, classinfo)) {
   178d6:	697b      	ldr	r3, [r7, #20]
   178d8:	681b      	ldr	r3, [r3, #0]
   178da:	6839      	ldr	r1, [r7, #0]
   178dc:	4618      	mov	r0, r3
   178de:	f7ff ffc1 	bl	17864 <mp_obj_is_subclass_fast>
   178e2:	4603      	mov	r3, r0
   178e4:	2b00      	cmp	r3, #0
   178e6:	d001      	beq.n	178ec <mp_obj_is_subclass_fast+0x88>
                    return true;
   178e8:	2301      	movs	r3, #1
   178ea:	e00e      	b.n	1790a <mp_obj_is_subclass_fast+0xa6>
            for (; item < top; ++item) {
   178ec:	697b      	ldr	r3, [r7, #20]
   178ee:	3304      	adds	r3, #4
   178f0:	617b      	str	r3, [r7, #20]
   178f2:	697a      	ldr	r2, [r7, #20]
   178f4:	68bb      	ldr	r3, [r7, #8]
   178f6:	429a      	cmp	r2, r3
   178f8:	d3ed      	bcc.n	178d6 <mp_obj_is_subclass_fast+0x72>
                }
            }

            // search last base (simple tail recursion elimination)
            object = *item;
   178fa:	697b      	ldr	r3, [r7, #20]
   178fc:	681b      	ldr	r3, [r3, #0]
   178fe:	607b      	str	r3, [r7, #4]
   17900:	e7b5      	b.n	1786e <mp_obj_is_subclass_fast+0xa>
        #endif
        } else {
            // type has 1 parent
            object = MP_OBJ_FROM_PTR(self->parent);
   17902:	693b      	ldr	r3, [r7, #16]
   17904:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   17906:	607b      	str	r3, [r7, #4]
    for (;;) {
   17908:	e7b1      	b.n	1786e <mp_obj_is_subclass_fast+0xa>
        }
    }
}
   1790a:	4618      	mov	r0, r3
   1790c:	3718      	adds	r7, #24
   1790e:	46bd      	mov	sp, r7
   17910:	bd80      	pop	{r7, pc}
   17912:	bf00      	nop
   17914:	00025df4 	.word	0x00025df4
   17918:	00025a34 	.word	0x00025a34

0001791c <mp_obj_is_subclass>:

STATIC mp_obj_t mp_obj_is_subclass(mp_obj_t object, mp_obj_t classinfo) {
   1791c:	b580      	push	{r7, lr}
   1791e:	b086      	sub	sp, #24
   17920:	af00      	add	r7, sp, #0
   17922:	6078      	str	r0, [r7, #4]
   17924:	6039      	str	r1, [r7, #0]
    size_t len;
    mp_obj_t *items;
    if (MP_OBJ_IS_TYPE(classinfo, &mp_type_type)) {
   17926:	683b      	ldr	r3, [r7, #0]
   17928:	4618      	mov	r0, r3
   1792a:	f7fe fd71 	bl	16410 <MP_OBJ_IS_OBJ>
   1792e:	4603      	mov	r3, r0
   17930:	2b00      	cmp	r3, #0
   17932:	d009      	beq.n	17948 <mp_obj_is_subclass+0x2c>
   17934:	683b      	ldr	r3, [r7, #0]
   17936:	681b      	ldr	r3, [r3, #0]
   17938:	4a22      	ldr	r2, [pc, #136]	; (179c4 <mp_obj_is_subclass+0xa8>)
   1793a:	4293      	cmp	r3, r2
   1793c:	d104      	bne.n	17948 <mp_obj_is_subclass+0x2c>
        len = 1;
   1793e:	2301      	movs	r3, #1
   17940:	613b      	str	r3, [r7, #16]
        items = &classinfo;
   17942:	463b      	mov	r3, r7
   17944:	60fb      	str	r3, [r7, #12]
   17946:	e017      	b.n	17978 <mp_obj_is_subclass+0x5c>
    } else if (MP_OBJ_IS_TYPE(classinfo, &mp_type_tuple)) {
   17948:	683b      	ldr	r3, [r7, #0]
   1794a:	4618      	mov	r0, r3
   1794c:	f7fe fd60 	bl	16410 <MP_OBJ_IS_OBJ>
   17950:	4603      	mov	r3, r0
   17952:	2b00      	cmp	r3, #0
   17954:	d00d      	beq.n	17972 <mp_obj_is_subclass+0x56>
   17956:	683b      	ldr	r3, [r7, #0]
   17958:	681b      	ldr	r3, [r3, #0]
   1795a:	4a1b      	ldr	r2, [pc, #108]	; (179c8 <mp_obj_is_subclass+0xac>)
   1795c:	4293      	cmp	r3, r2
   1795e:	d108      	bne.n	17972 <mp_obj_is_subclass+0x56>
        mp_obj_tuple_get(classinfo, &len, &items);
   17960:	683b      	ldr	r3, [r7, #0]
   17962:	f107 020c 	add.w	r2, r7, #12
   17966:	f107 0110 	add.w	r1, r7, #16
   1796a:	4618      	mov	r0, r3
   1796c:	f7fe fca6 	bl	162bc <mp_obj_tuple_get>
   17970:	e002      	b.n	17978 <mp_obj_is_subclass+0x5c>
    } else {
        mp_raise_TypeError("issubclass() arg 2 must be a class or a tuple of classes");
   17972:	4816      	ldr	r0, [pc, #88]	; (179cc <mp_obj_is_subclass+0xb0>)
   17974:	f7f5 fd0a 	bl	d38c <mp_raise_TypeError>
    }

    for (size_t i = 0; i < len; i++) {
   17978:	2300      	movs	r3, #0
   1797a:	617b      	str	r3, [r7, #20]
   1797c:	e018      	b.n	179b0 <mp_obj_is_subclass+0x94>
        // We explicitly check for 'object' here since no-one explicitly derives from it
        if (items[i] == MP_OBJ_FROM_PTR(&mp_type_object) || mp_obj_is_subclass_fast(object, items[i])) {
   1797e:	68fa      	ldr	r2, [r7, #12]
   17980:	697b      	ldr	r3, [r7, #20]
   17982:	009b      	lsls	r3, r3, #2
   17984:	4413      	add	r3, r2
   17986:	681b      	ldr	r3, [r3, #0]
   17988:	4a11      	ldr	r2, [pc, #68]	; (179d0 <mp_obj_is_subclass+0xb4>)
   1798a:	4293      	cmp	r3, r2
   1798c:	d00b      	beq.n	179a6 <mp_obj_is_subclass+0x8a>
   1798e:	68fa      	ldr	r2, [r7, #12]
   17990:	697b      	ldr	r3, [r7, #20]
   17992:	009b      	lsls	r3, r3, #2
   17994:	4413      	add	r3, r2
   17996:	681b      	ldr	r3, [r3, #0]
   17998:	4619      	mov	r1, r3
   1799a:	6878      	ldr	r0, [r7, #4]
   1799c:	f7ff ff62 	bl	17864 <mp_obj_is_subclass_fast>
   179a0:	4603      	mov	r3, r0
   179a2:	2b00      	cmp	r3, #0
   179a4:	d001      	beq.n	179aa <mp_obj_is_subclass+0x8e>
            return mp_const_true;
   179a6:	4b0b      	ldr	r3, [pc, #44]	; (179d4 <mp_obj_is_subclass+0xb8>)
   179a8:	e007      	b.n	179ba <mp_obj_is_subclass+0x9e>
    for (size_t i = 0; i < len; i++) {
   179aa:	697b      	ldr	r3, [r7, #20]
   179ac:	3301      	adds	r3, #1
   179ae:	617b      	str	r3, [r7, #20]
   179b0:	693b      	ldr	r3, [r7, #16]
   179b2:	697a      	ldr	r2, [r7, #20]
   179b4:	429a      	cmp	r2, r3
   179b6:	d3e2      	bcc.n	1797e <mp_obj_is_subclass+0x62>
        }
    }
    return mp_const_false;
   179b8:	4b07      	ldr	r3, [pc, #28]	; (179d8 <mp_obj_is_subclass+0xbc>)
}
   179ba:	4618      	mov	r0, r3
   179bc:	3718      	adds	r7, #24
   179be:	46bd      	mov	sp, r7
   179c0:	bd80      	pop	{r7, pc}
   179c2:	bf00      	nop
   179c4:	00025df4 	.word	0x00025df4
   179c8:	00025a34 	.word	0x00025a34
   179cc:	00025f50 	.word	0x00025f50
   179d0:	00025060 	.word	0x00025060
   179d4:	00023868 	.word	0x00023868
   179d8:	00023860 	.word	0x00023860

000179dc <mp_builtin_issubclass>:

STATIC mp_obj_t mp_builtin_issubclass(mp_obj_t object, mp_obj_t classinfo) {
   179dc:	b580      	push	{r7, lr}
   179de:	b082      	sub	sp, #8
   179e0:	af00      	add	r7, sp, #0
   179e2:	6078      	str	r0, [r7, #4]
   179e4:	6039      	str	r1, [r7, #0]
    if (!MP_OBJ_IS_TYPE(object, &mp_type_type)) {
   179e6:	6878      	ldr	r0, [r7, #4]
   179e8:	f7fe fd12 	bl	16410 <MP_OBJ_IS_OBJ>
   179ec:	4603      	mov	r3, r0
   179ee:	f083 0301 	eor.w	r3, r3, #1
   179f2:	b2db      	uxtb	r3, r3
   179f4:	2b00      	cmp	r3, #0
   179f6:	d104      	bne.n	17a02 <mp_builtin_issubclass+0x26>
   179f8:	687b      	ldr	r3, [r7, #4]
   179fa:	681b      	ldr	r3, [r3, #0]
   179fc:	4a07      	ldr	r2, [pc, #28]	; (17a1c <mp_builtin_issubclass+0x40>)
   179fe:	4293      	cmp	r3, r2
   17a00:	d002      	beq.n	17a08 <mp_builtin_issubclass+0x2c>
        mp_raise_TypeError("issubclass() arg 1 must be a class");
   17a02:	4807      	ldr	r0, [pc, #28]	; (17a20 <mp_builtin_issubclass+0x44>)
   17a04:	f7f5 fcc2 	bl	d38c <mp_raise_TypeError>
    }
    return mp_obj_is_subclass(object, classinfo);
   17a08:	6839      	ldr	r1, [r7, #0]
   17a0a:	6878      	ldr	r0, [r7, #4]
   17a0c:	f7ff ff86 	bl	1791c <mp_obj_is_subclass>
   17a10:	4603      	mov	r3, r0
}
   17a12:	4618      	mov	r0, r3
   17a14:	3708      	adds	r7, #8
   17a16:	46bd      	mov	sp, r7
   17a18:	bd80      	pop	{r7, pc}
   17a1a:	bf00      	nop
   17a1c:	00025df4 	.word	0x00025df4
   17a20:	00025f8c 	.word	0x00025f8c

00017a24 <mp_builtin_isinstance>:

MP_DEFINE_CONST_FUN_OBJ_2(mp_builtin_issubclass_obj, mp_builtin_issubclass);

STATIC mp_obj_t mp_builtin_isinstance(mp_obj_t object, mp_obj_t classinfo) {
   17a24:	b580      	push	{r7, lr}
   17a26:	b082      	sub	sp, #8
   17a28:	af00      	add	r7, sp, #0
   17a2a:	6078      	str	r0, [r7, #4]
   17a2c:	6039      	str	r1, [r7, #0]
    return mp_obj_is_subclass(MP_OBJ_FROM_PTR(mp_obj_get_type(object)), classinfo);
   17a2e:	6878      	ldr	r0, [r7, #4]
   17a30:	f7f6 f914 	bl	dc5c <mp_obj_get_type>
   17a34:	4603      	mov	r3, r0
   17a36:	6839      	ldr	r1, [r7, #0]
   17a38:	4618      	mov	r0, r3
   17a3a:	f7ff ff6f 	bl	1791c <mp_obj_is_subclass>
   17a3e:	4603      	mov	r3, r0
}
   17a40:	4618      	mov	r0, r3
   17a42:	3708      	adds	r7, #8
   17a44:	46bd      	mov	sp, r7
   17a46:	bd80      	pop	{r7, pc}

00017a48 <mp_instance_cast_to_native_base>:

MP_DEFINE_CONST_FUN_OBJ_2(mp_builtin_isinstance_obj, mp_builtin_isinstance);

mp_obj_t mp_instance_cast_to_native_base(mp_const_obj_t self_in, mp_const_obj_t native_type) {
   17a48:	b580      	push	{r7, lr}
   17a4a:	b084      	sub	sp, #16
   17a4c:	af00      	add	r7, sp, #0
   17a4e:	6078      	str	r0, [r7, #4]
   17a50:	6039      	str	r1, [r7, #0]
    mp_obj_type_t *self_type = mp_obj_get_type(self_in);
   17a52:	6878      	ldr	r0, [r7, #4]
   17a54:	f7f6 f902 	bl	dc5c <mp_obj_get_type>
   17a58:	60f8      	str	r0, [r7, #12]
    if (!mp_obj_is_subclass_fast(MP_OBJ_FROM_PTR(self_type), native_type)) {
   17a5a:	6839      	ldr	r1, [r7, #0]
   17a5c:	68f8      	ldr	r0, [r7, #12]
   17a5e:	f7ff ff01 	bl	17864 <mp_obj_is_subclass_fast>
   17a62:	4603      	mov	r3, r0
   17a64:	f083 0301 	eor.w	r3, r3, #1
   17a68:	b2db      	uxtb	r3, r3
   17a6a:	2b00      	cmp	r3, #0
   17a6c:	d001      	beq.n	17a72 <mp_instance_cast_to_native_base+0x2a>
        return MP_OBJ_NULL;
   17a6e:	2300      	movs	r3, #0
   17a70:	e003      	b.n	17a7a <mp_instance_cast_to_native_base+0x32>
    }
    mp_obj_instance_t *self = (mp_obj_instance_t*)MP_OBJ_TO_PTR(self_in);
   17a72:	687b      	ldr	r3, [r7, #4]
   17a74:	60bb      	str	r3, [r7, #8]
    return self->subobj[0];
   17a76:	68bb      	ldr	r3, [r7, #8]
   17a78:	691b      	ldr	r3, [r3, #16]
}
   17a7a:	4618      	mov	r0, r3
   17a7c:	3710      	adds	r7, #16
   17a7e:	46bd      	mov	sp, r7
   17a80:	bd80      	pop	{r7, pc}

00017a82 <static_class_method_make_new>:

/******************************************************************************/
// staticmethod and classmethod types (probably should go in a different file)

STATIC mp_obj_t static_class_method_make_new(const mp_obj_type_t *self, size_t n_args, size_t n_kw, const mp_obj_t *args) {
   17a82:	b580      	push	{r7, lr}
   17a84:	b088      	sub	sp, #32
   17a86:	af02      	add	r7, sp, #8
   17a88:	60f8      	str	r0, [r7, #12]
   17a8a:	60b9      	str	r1, [r7, #8]
   17a8c:	607a      	str	r2, [r7, #4]
   17a8e:	603b      	str	r3, [r7, #0]
    assert(self == &mp_type_staticmethod || self == &mp_type_classmethod);
   17a90:	68fb      	ldr	r3, [r7, #12]
   17a92:	4a13      	ldr	r2, [pc, #76]	; (17ae0 <static_class_method_make_new+0x5e>)
   17a94:	4293      	cmp	r3, r2
   17a96:	d00a      	beq.n	17aae <static_class_method_make_new+0x2c>
   17a98:	68fb      	ldr	r3, [r7, #12]
   17a9a:	4a12      	ldr	r2, [pc, #72]	; (17ae4 <static_class_method_make_new+0x62>)
   17a9c:	4293      	cmp	r3, r2
   17a9e:	d006      	beq.n	17aae <static_class_method_make_new+0x2c>
   17aa0:	4b11      	ldr	r3, [pc, #68]	; (17ae8 <static_class_method_make_new+0x66>)
   17aa2:	4a12      	ldr	r2, [pc, #72]	; (17aec <static_class_method_make_new+0x6a>)
   17aa4:	f240 516a 	movw	r1, #1386	; 0x56a
   17aa8:	4811      	ldr	r0, [pc, #68]	; (17af0 <static_class_method_make_new+0x6e>)
   17aaa:	f005 fa19 	bl	1cee0 <__assert_func>

    mp_arg_check_num(n_args, n_kw, 1, 1, false);
   17aae:	2300      	movs	r3, #0
   17ab0:	9300      	str	r3, [sp, #0]
   17ab2:	2301      	movs	r3, #1
   17ab4:	2201      	movs	r2, #1
   17ab6:	6879      	ldr	r1, [r7, #4]
   17ab8:	68b8      	ldr	r0, [r7, #8]
   17aba:	f7fe fcbb 	bl	16434 <mp_arg_check_num>

    mp_obj_static_class_method_t *o = m_new_obj(mp_obj_static_class_method_t);
   17abe:	2008      	movs	r0, #8
   17ac0:	f7e8 fc2c 	bl	31c <m_malloc>
   17ac4:	6178      	str	r0, [r7, #20]
    *o = (mp_obj_static_class_method_t){{self}, args[0]};
   17ac6:	683b      	ldr	r3, [r7, #0]
   17ac8:	681a      	ldr	r2, [r3, #0]
   17aca:	697b      	ldr	r3, [r7, #20]
   17acc:	68f9      	ldr	r1, [r7, #12]
   17ace:	6019      	str	r1, [r3, #0]
   17ad0:	697b      	ldr	r3, [r7, #20]
   17ad2:	605a      	str	r2, [r3, #4]
    return MP_OBJ_FROM_PTR(o);
   17ad4:	697b      	ldr	r3, [r7, #20]
}
   17ad6:	4618      	mov	r0, r3
   17ad8:	3718      	adds	r7, #24
   17ada:	46bd      	mov	sp, r7
   17adc:	bd80      	pop	{r7, pc}
   17ade:	bf00      	nop
   17ae0:	00026000 	.word	0x00026000
   17ae4:	0002603c 	.word	0x0002603c
   17ae8:	00025fc0 	.word	0x00025fc0
   17aec:	0002610c 	.word	0x0002610c
   17af0:	00025b1c 	.word	0x00025b1c

00017af4 <MP_OBJ_IS_OBJ>:
   17af4:	b480      	push	{r7}
   17af6:	b083      	sub	sp, #12
   17af8:	af00      	add	r7, sp, #0
   17afa:	6078      	str	r0, [r7, #4]
   17afc:	687b      	ldr	r3, [r7, #4]
   17afe:	f003 0303 	and.w	r3, r3, #3
   17b02:	2b00      	cmp	r3, #0
   17b04:	bf0c      	ite	eq
   17b06:	2301      	moveq	r3, #1
   17b08:	2300      	movne	r3, #0
   17b0a:	b2db      	uxtb	r3, r3
   17b0c:	4618      	mov	r0, r3
   17b0e:	370c      	adds	r7, #12
   17b10:	46bd      	mov	sp, r7
   17b12:	f85d 7b04 	ldr.w	r7, [sp], #4
   17b16:	4770      	bx	lr

00017b18 <mp_arg_check_num>:
static inline void mp_arg_check_num(size_t n_args, size_t n_kw, size_t n_args_min, size_t n_args_max, bool takes_kw) {
   17b18:	b580      	push	{r7, lr}
   17b1a:	b084      	sub	sp, #16
   17b1c:	af00      	add	r7, sp, #0
   17b1e:	60f8      	str	r0, [r7, #12]
   17b20:	60b9      	str	r1, [r7, #8]
   17b22:	607a      	str	r2, [r7, #4]
   17b24:	603b      	str	r3, [r7, #0]
    mp_arg_check_num_sig(n_args, n_kw, (uint32_t)MP_OBJ_FUN_MAKE_SIG(n_args_min, n_args_max, takes_kw));
   17b26:	687b      	ldr	r3, [r7, #4]
   17b28:	045a      	lsls	r2, r3, #17
   17b2a:	683b      	ldr	r3, [r7, #0]
   17b2c:	005b      	lsls	r3, r3, #1
   17b2e:	431a      	orrs	r2, r3
   17b30:	7e3b      	ldrb	r3, [r7, #24]
   17b32:	2b00      	cmp	r3, #0
   17b34:	d001      	beq.n	17b3a <mp_arg_check_num+0x22>
   17b36:	2301      	movs	r3, #1
   17b38:	e000      	b.n	17b3c <mp_arg_check_num+0x24>
   17b3a:	2300      	movs	r3, #0
   17b3c:	4313      	orrs	r3, r2
   17b3e:	461a      	mov	r2, r3
   17b40:	68b9      	ldr	r1, [r7, #8]
   17b42:	68f8      	ldr	r0, [r7, #12]
   17b44:	f7f5 fc48 	bl	d3d8 <mp_arg_check_num_sig>
}
   17b48:	bf00      	nop
   17b4a:	3710      	adds	r7, #16
   17b4c:	46bd      	mov	sp, r7
   17b4e:	bd80      	pop	{r7, pc}

00017b50 <zip_make_new>:
    mp_obj_base_t base;
    size_t n_iters;
    mp_obj_t iters[];
} mp_obj_zip_t;

STATIC mp_obj_t zip_make_new(const mp_obj_type_t *type, size_t n_args, size_t n_kw, const mp_obj_t *args) {
   17b50:	b580      	push	{r7, lr}
   17b52:	b088      	sub	sp, #32
   17b54:	af02      	add	r7, sp, #8
   17b56:	60f8      	str	r0, [r7, #12]
   17b58:	60b9      	str	r1, [r7, #8]
   17b5a:	607a      	str	r2, [r7, #4]
   17b5c:	603b      	str	r3, [r7, #0]
    mp_arg_check_num(n_args, n_kw, 0, MP_OBJ_FUN_ARGS_MAX, false);
   17b5e:	2300      	movs	r3, #0
   17b60:	9300      	str	r3, [sp, #0]
   17b62:	f64f 73ff 	movw	r3, #65535	; 0xffff
   17b66:	2200      	movs	r2, #0
   17b68:	6879      	ldr	r1, [r7, #4]
   17b6a:	68b8      	ldr	r0, [r7, #8]
   17b6c:	f7ff ffd4 	bl	17b18 <mp_arg_check_num>

    mp_obj_zip_t *o = m_new_obj_var(mp_obj_zip_t, mp_obj_t, n_args);
   17b70:	68bb      	ldr	r3, [r7, #8]
   17b72:	3302      	adds	r3, #2
   17b74:	009b      	lsls	r3, r3, #2
   17b76:	4618      	mov	r0, r3
   17b78:	f7e8 fbd0 	bl	31c <m_malloc>
   17b7c:	6138      	str	r0, [r7, #16]
    o->base.type = type;
   17b7e:	693b      	ldr	r3, [r7, #16]
   17b80:	68fa      	ldr	r2, [r7, #12]
   17b82:	601a      	str	r2, [r3, #0]
    o->n_iters = n_args;
   17b84:	693b      	ldr	r3, [r7, #16]
   17b86:	68ba      	ldr	r2, [r7, #8]
   17b88:	605a      	str	r2, [r3, #4]
    for (size_t i = 0; i < n_args; i++) {
   17b8a:	2300      	movs	r3, #0
   17b8c:	617b      	str	r3, [r7, #20]
   17b8e:	e011      	b.n	17bb4 <zip_make_new+0x64>
        o->iters[i] = mp_getiter(args[i], NULL);
   17b90:	697b      	ldr	r3, [r7, #20]
   17b92:	009b      	lsls	r3, r3, #2
   17b94:	683a      	ldr	r2, [r7, #0]
   17b96:	4413      	add	r3, r2
   17b98:	681b      	ldr	r3, [r3, #0]
   17b9a:	2100      	movs	r1, #0
   17b9c:	4618      	mov	r0, r3
   17b9e:	f7f5 f893 	bl	ccc8 <mp_getiter>
   17ba2:	4601      	mov	r1, r0
   17ba4:	693b      	ldr	r3, [r7, #16]
   17ba6:	697a      	ldr	r2, [r7, #20]
   17ba8:	3202      	adds	r2, #2
   17baa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (size_t i = 0; i < n_args; i++) {
   17bae:	697b      	ldr	r3, [r7, #20]
   17bb0:	3301      	adds	r3, #1
   17bb2:	617b      	str	r3, [r7, #20]
   17bb4:	697a      	ldr	r2, [r7, #20]
   17bb6:	68bb      	ldr	r3, [r7, #8]
   17bb8:	429a      	cmp	r2, r3
   17bba:	d3e9      	bcc.n	17b90 <zip_make_new+0x40>
    }
    return MP_OBJ_FROM_PTR(o);
   17bbc:	693b      	ldr	r3, [r7, #16]
}
   17bbe:	4618      	mov	r0, r3
   17bc0:	3718      	adds	r7, #24
   17bc2:	46bd      	mov	sp, r7
   17bc4:	bd80      	pop	{r7, pc}

00017bc6 <zip_iternext>:

STATIC mp_obj_t zip_iternext(mp_obj_t self_in) {
   17bc6:	b580      	push	{r7, lr}
   17bc8:	b086      	sub	sp, #24
   17bca:	af00      	add	r7, sp, #0
   17bcc:	6078      	str	r0, [r7, #4]
    mp_check_self(MP_OBJ_IS_TYPE(self_in, &mp_type_zip));
   17bce:	6878      	ldr	r0, [r7, #4]
   17bd0:	f7ff ff90 	bl	17af4 <MP_OBJ_IS_OBJ>
   17bd4:	4603      	mov	r3, r0
   17bd6:	2b00      	cmp	r3, #0
   17bd8:	d004      	beq.n	17be4 <zip_iternext+0x1e>
   17bda:	687b      	ldr	r3, [r7, #4]
   17bdc:	681b      	ldr	r3, [r3, #0]
   17bde:	4a1f      	ldr	r2, [pc, #124]	; (17c5c <zip_iternext+0x96>)
   17be0:	4293      	cmp	r3, r2
   17be2:	d005      	beq.n	17bf0 <zip_iternext+0x2a>
   17be4:	4b1e      	ldr	r3, [pc, #120]	; (17c60 <zip_iternext+0x9a>)
   17be6:	4a1f      	ldr	r2, [pc, #124]	; (17c64 <zip_iternext+0x9e>)
   17be8:	2134      	movs	r1, #52	; 0x34
   17bea:	481f      	ldr	r0, [pc, #124]	; (17c68 <zip_iternext+0xa2>)
   17bec:	f005 f978 	bl	1cee0 <__assert_func>
    mp_obj_zip_t *self = MP_OBJ_TO_PTR(self_in);
   17bf0:	687b      	ldr	r3, [r7, #4]
   17bf2:	613b      	str	r3, [r7, #16]
    if (self->n_iters == 0) {
   17bf4:	693b      	ldr	r3, [r7, #16]
   17bf6:	685b      	ldr	r3, [r3, #4]
   17bf8:	2b00      	cmp	r3, #0
   17bfa:	d101      	bne.n	17c00 <zip_iternext+0x3a>
        return MP_OBJ_STOP_ITERATION;
   17bfc:	2304      	movs	r3, #4
   17bfe:	e029      	b.n	17c54 <zip_iternext+0x8e>
    }
    mp_obj_tuple_t *tuple = MP_OBJ_TO_PTR(mp_obj_new_tuple(self->n_iters, NULL));
   17c00:	693b      	ldr	r3, [r7, #16]
   17c02:	685b      	ldr	r3, [r3, #4]
   17c04:	2100      	movs	r1, #0
   17c06:	4618      	mov	r0, r3
   17c08:	f7fe fb20 	bl	1624c <mp_obj_new_tuple>
   17c0c:	60f8      	str	r0, [r7, #12]

    for (size_t i = 0; i < self->n_iters; i++) {
   17c0e:	2300      	movs	r3, #0
   17c10:	617b      	str	r3, [r7, #20]
   17c12:	e019      	b.n	17c48 <zip_iternext+0x82>
        mp_obj_t next = mp_iternext(self->iters[i]);
   17c14:	693b      	ldr	r3, [r7, #16]
   17c16:	697a      	ldr	r2, [r7, #20]
   17c18:	3202      	adds	r2, #2
   17c1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   17c1e:	4618      	mov	r0, r3
   17c20:	f7f5 f8d4 	bl	cdcc <mp_iternext>
   17c24:	60b8      	str	r0, [r7, #8]
        if (next == MP_OBJ_STOP_ITERATION) {
   17c26:	68bb      	ldr	r3, [r7, #8]
   17c28:	2b04      	cmp	r3, #4
   17c2a:	d104      	bne.n	17c36 <zip_iternext+0x70>
            mp_obj_tuple_del(MP_OBJ_FROM_PTR(tuple));
   17c2c:	68f8      	ldr	r0, [r7, #12]
   17c2e:	f7fe fb73 	bl	16318 <mp_obj_tuple_del>
            return MP_OBJ_STOP_ITERATION;
   17c32:	2304      	movs	r3, #4
   17c34:	e00e      	b.n	17c54 <zip_iternext+0x8e>
        }
        tuple->items[i] = next;
   17c36:	68fb      	ldr	r3, [r7, #12]
   17c38:	697a      	ldr	r2, [r7, #20]
   17c3a:	3202      	adds	r2, #2
   17c3c:	68b9      	ldr	r1, [r7, #8]
   17c3e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (size_t i = 0; i < self->n_iters; i++) {
   17c42:	697b      	ldr	r3, [r7, #20]
   17c44:	3301      	adds	r3, #1
   17c46:	617b      	str	r3, [r7, #20]
   17c48:	693b      	ldr	r3, [r7, #16]
   17c4a:	685a      	ldr	r2, [r3, #4]
   17c4c:	697b      	ldr	r3, [r7, #20]
   17c4e:	429a      	cmp	r2, r3
   17c50:	d8e0      	bhi.n	17c14 <zip_iternext+0x4e>
    }
    return MP_OBJ_FROM_PTR(tuple);
   17c52:	68fb      	ldr	r3, [r7, #12]
}
   17c54:	4618      	mov	r0, r3
   17c56:	3718      	adds	r7, #24
   17c58:	46bd      	mov	sp, r7
   17c5a:	bd80      	pop	{r7, pc}
   17c5c:	0002619c 	.word	0x0002619c
   17c60:	0002612c 	.word	0x0002612c
   17c64:	000261d8 	.word	0x000261d8
   17c68:	00026188 	.word	0x00026188

00017c6c <op_getitem>:
 */

#include "py/obj.h"
#include "py/builtin.h"

STATIC mp_obj_t op_getitem(mp_obj_t self_in, mp_obj_t key_in) {
   17c6c:	b580      	push	{r7, lr}
   17c6e:	b084      	sub	sp, #16
   17c70:	af00      	add	r7, sp, #0
   17c72:	6078      	str	r0, [r7, #4]
   17c74:	6039      	str	r1, [r7, #0]
    mp_obj_type_t *type = mp_obj_get_type(self_in);
   17c76:	6878      	ldr	r0, [r7, #4]
   17c78:	f7f5 fff0 	bl	dc5c <mp_obj_get_type>
   17c7c:	60f8      	str	r0, [r7, #12]
    return type->subscr(self_in, key_in, MP_OBJ_SENTINEL);
   17c7e:	68fb      	ldr	r3, [r7, #12]
   17c80:	6a1b      	ldr	r3, [r3, #32]
   17c82:	2208      	movs	r2, #8
   17c84:	6839      	ldr	r1, [r7, #0]
   17c86:	6878      	ldr	r0, [r7, #4]
   17c88:	4798      	blx	r3
   17c8a:	4603      	mov	r3, r0
}
   17c8c:	4618      	mov	r0, r3
   17c8e:	3710      	adds	r7, #16
   17c90:	46bd      	mov	sp, r7
   17c92:	bd80      	pop	{r7, pc}

00017c94 <op_setitem>:
MP_DEFINE_CONST_FUN_OBJ_2(mp_op_getitem_obj, op_getitem);

STATIC mp_obj_t op_setitem(mp_obj_t self_in, mp_obj_t key_in, mp_obj_t value_in) {
   17c94:	b580      	push	{r7, lr}
   17c96:	b086      	sub	sp, #24
   17c98:	af00      	add	r7, sp, #0
   17c9a:	60f8      	str	r0, [r7, #12]
   17c9c:	60b9      	str	r1, [r7, #8]
   17c9e:	607a      	str	r2, [r7, #4]
    mp_obj_type_t *type = mp_obj_get_type(self_in);
   17ca0:	68f8      	ldr	r0, [r7, #12]
   17ca2:	f7f5 ffdb 	bl	dc5c <mp_obj_get_type>
   17ca6:	6178      	str	r0, [r7, #20]
    return type->subscr(self_in, key_in, value_in);
   17ca8:	697b      	ldr	r3, [r7, #20]
   17caa:	6a1b      	ldr	r3, [r3, #32]
   17cac:	687a      	ldr	r2, [r7, #4]
   17cae:	68b9      	ldr	r1, [r7, #8]
   17cb0:	68f8      	ldr	r0, [r7, #12]
   17cb2:	4798      	blx	r3
   17cb4:	4603      	mov	r3, r0
}
   17cb6:	4618      	mov	r0, r3
   17cb8:	3718      	adds	r7, #24
   17cba:	46bd      	mov	sp, r7
   17cbc:	bd80      	pop	{r7, pc}

00017cbe <op_delitem>:
MP_DEFINE_CONST_FUN_OBJ_3(mp_op_setitem_obj, op_setitem);

STATIC mp_obj_t op_delitem(mp_obj_t self_in, mp_obj_t key_in) {
   17cbe:	b580      	push	{r7, lr}
   17cc0:	b084      	sub	sp, #16
   17cc2:	af00      	add	r7, sp, #0
   17cc4:	6078      	str	r0, [r7, #4]
   17cc6:	6039      	str	r1, [r7, #0]
    mp_obj_type_t *type = mp_obj_get_type(self_in);
   17cc8:	6878      	ldr	r0, [r7, #4]
   17cca:	f7f5 ffc7 	bl	dc5c <mp_obj_get_type>
   17cce:	60f8      	str	r0, [r7, #12]
    return type->subscr(self_in, key_in, MP_OBJ_NULL);
   17cd0:	68fb      	ldr	r3, [r7, #12]
   17cd2:	6a1b      	ldr	r3, [r3, #32]
   17cd4:	2200      	movs	r2, #0
   17cd6:	6839      	ldr	r1, [r7, #0]
   17cd8:	6878      	ldr	r0, [r7, #4]
   17cda:	4798      	blx	r3
   17cdc:	4603      	mov	r3, r0
}
   17cde:	4618      	mov	r0, r3
   17ce0:	3710      	adds	r7, #16
   17ce2:	46bd      	mov	sp, r7
   17ce4:	bd80      	pop	{r7, pc}

00017ce6 <op_contains>:
MP_DEFINE_CONST_FUN_OBJ_2(mp_op_delitem_obj, op_delitem);

STATIC mp_obj_t op_contains(mp_obj_t lhs_in, mp_obj_t rhs_in) {
   17ce6:	b580      	push	{r7, lr}
   17ce8:	b084      	sub	sp, #16
   17cea:	af00      	add	r7, sp, #0
   17cec:	6078      	str	r0, [r7, #4]
   17cee:	6039      	str	r1, [r7, #0]
    mp_obj_type_t *type = mp_obj_get_type(lhs_in);
   17cf0:	6878      	ldr	r0, [r7, #4]
   17cf2:	f7f5 ffb3 	bl	dc5c <mp_obj_get_type>
   17cf6:	60f8      	str	r0, [r7, #12]
    return type->binary_op(MP_BINARY_OP_CONTAINS, lhs_in, rhs_in);
   17cf8:	68fb      	ldr	r3, [r7, #12]
   17cfa:	699b      	ldr	r3, [r3, #24]
   17cfc:	683a      	ldr	r2, [r7, #0]
   17cfe:	6879      	ldr	r1, [r7, #4]
   17d00:	2022      	movs	r0, #34	; 0x22
   17d02:	4798      	blx	r3
   17d04:	4603      	mov	r3, r0
}
   17d06:	4618      	mov	r0, r3
   17d08:	3710      	adds	r7, #16
   17d0a:	46bd      	mov	sp, r7
   17d0c:	bd80      	pop	{r7, pc}
	...

00017d10 <mp_seq_multiply>:

#define SWAP(type, var1, var2) { type t = var2; var2 = var1; var1 = t; }

// Implements backend of sequence * integer operation. Assumes elements are
// memory-adjacent in sequence.
void mp_seq_multiply(const void *items, size_t item_sz, size_t len, size_t times, void *dest) {
   17d10:	b580      	push	{r7, lr}
   17d12:	b086      	sub	sp, #24
   17d14:	af00      	add	r7, sp, #0
   17d16:	60f8      	str	r0, [r7, #12]
   17d18:	60b9      	str	r1, [r7, #8]
   17d1a:	607a      	str	r2, [r7, #4]
   17d1c:	603b      	str	r3, [r7, #0]
    for (size_t i = 0; i < times; i++) {
   17d1e:	2300      	movs	r3, #0
   17d20:	617b      	str	r3, [r7, #20]
   17d22:	e010      	b.n	17d46 <mp_seq_multiply+0x36>
        size_t copy_sz = item_sz * len;
   17d24:	68bb      	ldr	r3, [r7, #8]
   17d26:	687a      	ldr	r2, [r7, #4]
   17d28:	fb02 f303 	mul.w	r3, r2, r3
   17d2c:	613b      	str	r3, [r7, #16]
        memcpy(dest, items, copy_sz);
   17d2e:	693a      	ldr	r2, [r7, #16]
   17d30:	68f9      	ldr	r1, [r7, #12]
   17d32:	6a38      	ldr	r0, [r7, #32]
   17d34:	f006 fbfc 	bl	1e530 <memcpy>
        dest = (char*)dest + copy_sz;
   17d38:	6a3a      	ldr	r2, [r7, #32]
   17d3a:	693b      	ldr	r3, [r7, #16]
   17d3c:	4413      	add	r3, r2
   17d3e:	623b      	str	r3, [r7, #32]
    for (size_t i = 0; i < times; i++) {
   17d40:	697b      	ldr	r3, [r7, #20]
   17d42:	3301      	adds	r3, #1
   17d44:	617b      	str	r3, [r7, #20]
   17d46:	697a      	ldr	r2, [r7, #20]
   17d48:	683b      	ldr	r3, [r7, #0]
   17d4a:	429a      	cmp	r2, r3
   17d4c:	d3ea      	bcc.n	17d24 <mp_seq_multiply+0x14>
    }
}
   17d4e:	bf00      	nop
   17d50:	3718      	adds	r7, #24
   17d52:	46bd      	mov	sp, r7
   17d54:	bd80      	pop	{r7, pc}

00017d56 <mp_seq_extract_slice>:
    return indexes->step == 1;
}

#endif

mp_obj_t mp_seq_extract_slice(size_t len, const mp_obj_t *seq, mp_bound_slice_t *indexes) {
   17d56:	b580      	push	{r7, lr}
   17d58:	b088      	sub	sp, #32
   17d5a:	af00      	add	r7, sp, #0
   17d5c:	60f8      	str	r0, [r7, #12]
   17d5e:	60b9      	str	r1, [r7, #8]
   17d60:	607a      	str	r2, [r7, #4]
    (void)len; // TODO can we remove len from the arg list?

    mp_int_t start = indexes->start, stop = indexes->stop;
   17d62:	687b      	ldr	r3, [r7, #4]
   17d64:	681b      	ldr	r3, [r3, #0]
   17d66:	61fb      	str	r3, [r7, #28]
   17d68:	687b      	ldr	r3, [r7, #4]
   17d6a:	685b      	ldr	r3, [r3, #4]
   17d6c:	61bb      	str	r3, [r7, #24]
    mp_int_t step = indexes->step;
   17d6e:	687b      	ldr	r3, [r7, #4]
   17d70:	689b      	ldr	r3, [r3, #8]
   17d72:	617b      	str	r3, [r7, #20]

    mp_obj_t res = mp_obj_new_list(0, NULL);
   17d74:	2100      	movs	r1, #0
   17d76:	2000      	movs	r0, #0
   17d78:	f7f9 ffaf 	bl	11cda <mp_obj_new_list>
   17d7c:	6138      	str	r0, [r7, #16]

    if (step < 0) {
   17d7e:	697b      	ldr	r3, [r7, #20]
   17d80:	2b00      	cmp	r3, #0
   17d82:	da1f      	bge.n	17dc4 <mp_seq_extract_slice+0x6e>
        while (start >= stop) {
   17d84:	e00c      	b.n	17da0 <mp_seq_extract_slice+0x4a>
            mp_obj_list_append(res, seq[start]);
   17d86:	69fb      	ldr	r3, [r7, #28]
   17d88:	009b      	lsls	r3, r3, #2
   17d8a:	68ba      	ldr	r2, [r7, #8]
   17d8c:	4413      	add	r3, r2
   17d8e:	681b      	ldr	r3, [r3, #0]
   17d90:	4619      	mov	r1, r3
   17d92:	6938      	ldr	r0, [r7, #16]
   17d94:	f7f9 fb35 	bl	11402 <mp_obj_list_append>
            start += step;
   17d98:	69fa      	ldr	r2, [r7, #28]
   17d9a:	697b      	ldr	r3, [r7, #20]
   17d9c:	4413      	add	r3, r2
   17d9e:	61fb      	str	r3, [r7, #28]
        while (start >= stop) {
   17da0:	69fa      	ldr	r2, [r7, #28]
   17da2:	69bb      	ldr	r3, [r7, #24]
   17da4:	429a      	cmp	r2, r3
   17da6:	daee      	bge.n	17d86 <mp_seq_extract_slice+0x30>
   17da8:	e010      	b.n	17dcc <mp_seq_extract_slice+0x76>
        }
    } else {
        while (start < stop) {
            mp_obj_list_append(res, seq[start]);
   17daa:	69fb      	ldr	r3, [r7, #28]
   17dac:	009b      	lsls	r3, r3, #2
   17dae:	68ba      	ldr	r2, [r7, #8]
   17db0:	4413      	add	r3, r2
   17db2:	681b      	ldr	r3, [r3, #0]
   17db4:	4619      	mov	r1, r3
   17db6:	6938      	ldr	r0, [r7, #16]
   17db8:	f7f9 fb23 	bl	11402 <mp_obj_list_append>
            start += step;
   17dbc:	69fa      	ldr	r2, [r7, #28]
   17dbe:	697b      	ldr	r3, [r7, #20]
   17dc0:	4413      	add	r3, r2
   17dc2:	61fb      	str	r3, [r7, #28]
        while (start < stop) {
   17dc4:	69fa      	ldr	r2, [r7, #28]
   17dc6:	69bb      	ldr	r3, [r7, #24]
   17dc8:	429a      	cmp	r2, r3
   17dca:	dbee      	blt.n	17daa <mp_seq_extract_slice+0x54>
        }
    }
    return res;
   17dcc:	693b      	ldr	r3, [r7, #16]
}
   17dce:	4618      	mov	r0, r3
   17dd0:	3720      	adds	r7, #32
   17dd2:	46bd      	mov	sp, r7
   17dd4:	bd80      	pop	{r7, pc}

00017dd6 <mp_seq_cmp_bytes>:

// Special-case comparison function for sequences of bytes
// Don't pass MP_BINARY_OP_NOT_EQUAL here
bool mp_seq_cmp_bytes(mp_uint_t op, const byte *data1, size_t len1, const byte *data2, size_t len2) {
   17dd6:	b580      	push	{r7, lr}
   17dd8:	b088      	sub	sp, #32
   17dda:	af00      	add	r7, sp, #0
   17ddc:	60f8      	str	r0, [r7, #12]
   17dde:	60b9      	str	r1, [r7, #8]
   17de0:	607a      	str	r2, [r7, #4]
   17de2:	603b      	str	r3, [r7, #0]
    if (op == MP_BINARY_OP_EQUAL && len1 != len2) {
   17de4:	68fb      	ldr	r3, [r7, #12]
   17de6:	2b02      	cmp	r3, #2
   17de8:	d105      	bne.n	17df6 <mp_seq_cmp_bytes+0x20>
   17dea:	687a      	ldr	r2, [r7, #4]
   17dec:	6abb      	ldr	r3, [r7, #40]	; 0x28
   17dee:	429a      	cmp	r2, r3
   17df0:	d001      	beq.n	17df6 <mp_seq_cmp_bytes+0x20>
        return false;
   17df2:	2300      	movs	r3, #0
   17df4:	e049      	b.n	17e8a <mp_seq_cmp_bytes+0xb4>
    }

    // Let's deal only with > & >=
    if (op == MP_BINARY_OP_LESS || op == MP_BINARY_OP_LESS_EQUAL) {
   17df6:	68fb      	ldr	r3, [r7, #12]
   17df8:	2b00      	cmp	r3, #0
   17dfa:	d002      	beq.n	17e02 <mp_seq_cmp_bytes+0x2c>
   17dfc:	68fb      	ldr	r3, [r7, #12]
   17dfe:	2b03      	cmp	r3, #3
   17e00:	d113      	bne.n	17e2a <mp_seq_cmp_bytes+0x54>
        SWAP(const byte*, data1, data2);
   17e02:	683b      	ldr	r3, [r7, #0]
   17e04:	61fb      	str	r3, [r7, #28]
   17e06:	68bb      	ldr	r3, [r7, #8]
   17e08:	603b      	str	r3, [r7, #0]
   17e0a:	69fb      	ldr	r3, [r7, #28]
   17e0c:	60bb      	str	r3, [r7, #8]
        SWAP(size_t, len1, len2);
   17e0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   17e10:	61bb      	str	r3, [r7, #24]
   17e12:	687b      	ldr	r3, [r7, #4]
   17e14:	62bb      	str	r3, [r7, #40]	; 0x28
   17e16:	69bb      	ldr	r3, [r7, #24]
   17e18:	607b      	str	r3, [r7, #4]
        if (op == MP_BINARY_OP_LESS) {
   17e1a:	68fb      	ldr	r3, [r7, #12]
   17e1c:	2b00      	cmp	r3, #0
   17e1e:	d102      	bne.n	17e26 <mp_seq_cmp_bytes+0x50>
            op = MP_BINARY_OP_MORE;
   17e20:	2301      	movs	r3, #1
   17e22:	60fb      	str	r3, [r7, #12]
   17e24:	e001      	b.n	17e2a <mp_seq_cmp_bytes+0x54>
        } else {
            op = MP_BINARY_OP_MORE_EQUAL;
   17e26:	2304      	movs	r3, #4
   17e28:	60fb      	str	r3, [r7, #12]
        }
    }
    size_t min_len = len1 < len2 ? len1 : len2;
   17e2a:	6aba      	ldr	r2, [r7, #40]	; 0x28
   17e2c:	687b      	ldr	r3, [r7, #4]
   17e2e:	4293      	cmp	r3, r2
   17e30:	bf28      	it	cs
   17e32:	4613      	movcs	r3, r2
   17e34:	617b      	str	r3, [r7, #20]
    int res = memcmp(data1, data2, min_len);
   17e36:	697a      	ldr	r2, [r7, #20]
   17e38:	6839      	ldr	r1, [r7, #0]
   17e3a:	68b8      	ldr	r0, [r7, #8]
   17e3c:	f006 fc5d 	bl	1e6fa <memcmp>
   17e40:	6138      	str	r0, [r7, #16]
    if (op == MP_BINARY_OP_EQUAL) {
   17e42:	68fb      	ldr	r3, [r7, #12]
   17e44:	2b02      	cmp	r3, #2
   17e46:	d106      	bne.n	17e56 <mp_seq_cmp_bytes+0x80>
        // If we are checking for equality, here're the answer
        return res == 0;
   17e48:	693b      	ldr	r3, [r7, #16]
   17e4a:	2b00      	cmp	r3, #0
   17e4c:	bf0c      	ite	eq
   17e4e:	2301      	moveq	r3, #1
   17e50:	2300      	movne	r3, #0
   17e52:	b2db      	uxtb	r3, r3
   17e54:	e019      	b.n	17e8a <mp_seq_cmp_bytes+0xb4>
    }
    if (res < 0) {
   17e56:	693b      	ldr	r3, [r7, #16]
   17e58:	2b00      	cmp	r3, #0
   17e5a:	da01      	bge.n	17e60 <mp_seq_cmp_bytes+0x8a>
        return false;
   17e5c:	2300      	movs	r3, #0
   17e5e:	e014      	b.n	17e8a <mp_seq_cmp_bytes+0xb4>
    }
    if (res > 0) {
   17e60:	693b      	ldr	r3, [r7, #16]
   17e62:	2b00      	cmp	r3, #0
   17e64:	dd01      	ble.n	17e6a <mp_seq_cmp_bytes+0x94>
        return true;
   17e66:	2301      	movs	r3, #1
   17e68:	e00f      	b.n	17e8a <mp_seq_cmp_bytes+0xb4>
    }

    // If we had tie in the last element...
    // ... and we have lists of different lengths...
    if (len1 != len2) {
   17e6a:	687a      	ldr	r2, [r7, #4]
   17e6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   17e6e:	429a      	cmp	r2, r3
   17e70:	d005      	beq.n	17e7e <mp_seq_cmp_bytes+0xa8>
        if (len1 < len2) {
   17e72:	687a      	ldr	r2, [r7, #4]
   17e74:	6abb      	ldr	r3, [r7, #40]	; 0x28
   17e76:	429a      	cmp	r2, r3
   17e78:	d206      	bcs.n	17e88 <mp_seq_cmp_bytes+0xb2>
            // ... then longer list length wins (we deal only with >)
            return false;
   17e7a:	2300      	movs	r3, #0
   17e7c:	e005      	b.n	17e8a <mp_seq_cmp_bytes+0xb4>
        }
    } else if (op == MP_BINARY_OP_MORE) {
   17e7e:	68fb      	ldr	r3, [r7, #12]
   17e80:	2b01      	cmp	r3, #1
   17e82:	d101      	bne.n	17e88 <mp_seq_cmp_bytes+0xb2>
        // Otherwise, if we have strict relation, equality means failure
        return false;
   17e84:	2300      	movs	r3, #0
   17e86:	e000      	b.n	17e8a <mp_seq_cmp_bytes+0xb4>
    }
    return true;
   17e88:	2301      	movs	r3, #1
}
   17e8a:	4618      	mov	r0, r3
   17e8c:	3720      	adds	r7, #32
   17e8e:	46bd      	mov	sp, r7
   17e90:	bd80      	pop	{r7, pc}

00017e92 <mp_seq_cmp_objs>:

// Special-case comparison function for sequences of mp_obj_t
// Don't pass MP_BINARY_OP_NOT_EQUAL here
bool mp_seq_cmp_objs(mp_uint_t op, const mp_obj_t *items1, size_t len1, const mp_obj_t *items2, size_t len2) {
   17e92:	b580      	push	{r7, lr}
   17e94:	b088      	sub	sp, #32
   17e96:	af00      	add	r7, sp, #0
   17e98:	60f8      	str	r0, [r7, #12]
   17e9a:	60b9      	str	r1, [r7, #8]
   17e9c:	607a      	str	r2, [r7, #4]
   17e9e:	603b      	str	r3, [r7, #0]
    if (op == MP_BINARY_OP_EQUAL && len1 != len2) {
   17ea0:	68fb      	ldr	r3, [r7, #12]
   17ea2:	2b02      	cmp	r3, #2
   17ea4:	d105      	bne.n	17eb2 <mp_seq_cmp_objs+0x20>
   17ea6:	687a      	ldr	r2, [r7, #4]
   17ea8:	6abb      	ldr	r3, [r7, #40]	; 0x28
   17eaa:	429a      	cmp	r2, r3
   17eac:	d001      	beq.n	17eb2 <mp_seq_cmp_objs+0x20>
        return false;
   17eae:	2300      	movs	r3, #0
   17eb0:	e065      	b.n	17f7e <mp_seq_cmp_objs+0xec>
    }

    // Let's deal only with > & >=
    if (op == MP_BINARY_OP_LESS || op == MP_BINARY_OP_LESS_EQUAL) {
   17eb2:	68fb      	ldr	r3, [r7, #12]
   17eb4:	2b00      	cmp	r3, #0
   17eb6:	d002      	beq.n	17ebe <mp_seq_cmp_objs+0x2c>
   17eb8:	68fb      	ldr	r3, [r7, #12]
   17eba:	2b03      	cmp	r3, #3
   17ebc:	d113      	bne.n	17ee6 <mp_seq_cmp_objs+0x54>
        SWAP(const mp_obj_t *, items1, items2);
   17ebe:	683b      	ldr	r3, [r7, #0]
   17ec0:	61bb      	str	r3, [r7, #24]
   17ec2:	68bb      	ldr	r3, [r7, #8]
   17ec4:	603b      	str	r3, [r7, #0]
   17ec6:	69bb      	ldr	r3, [r7, #24]
   17ec8:	60bb      	str	r3, [r7, #8]
        SWAP(size_t, len1, len2);
   17eca:	6abb      	ldr	r3, [r7, #40]	; 0x28
   17ecc:	617b      	str	r3, [r7, #20]
   17ece:	687b      	ldr	r3, [r7, #4]
   17ed0:	62bb      	str	r3, [r7, #40]	; 0x28
   17ed2:	697b      	ldr	r3, [r7, #20]
   17ed4:	607b      	str	r3, [r7, #4]
        if (op == MP_BINARY_OP_LESS) {
   17ed6:	68fb      	ldr	r3, [r7, #12]
   17ed8:	2b00      	cmp	r3, #0
   17eda:	d102      	bne.n	17ee2 <mp_seq_cmp_objs+0x50>
            op = MP_BINARY_OP_MORE;
   17edc:	2301      	movs	r3, #1
   17ede:	60fb      	str	r3, [r7, #12]
   17ee0:	e001      	b.n	17ee6 <mp_seq_cmp_objs+0x54>
        } else {
            op = MP_BINARY_OP_MORE_EQUAL;
   17ee2:	2304      	movs	r3, #4
   17ee4:	60fb      	str	r3, [r7, #12]
        }
    }

    size_t len = len1 < len2 ? len1 : len2;
   17ee6:	6aba      	ldr	r2, [r7, #40]	; 0x28
   17ee8:	687b      	ldr	r3, [r7, #4]
   17eea:	4293      	cmp	r3, r2
   17eec:	bf28      	it	cs
   17eee:	4613      	movcs	r3, r2
   17ef0:	613b      	str	r3, [r7, #16]
    for (size_t i = 0; i < len; i++) {
   17ef2:	2300      	movs	r3, #0
   17ef4:	61fb      	str	r3, [r7, #28]
   17ef6:	e02e      	b.n	17f56 <mp_seq_cmp_objs+0xc4>
        // If current elements equal, can't decide anything - go on
        if (mp_obj_equal(items1[i], items2[i])) {
   17ef8:	69fb      	ldr	r3, [r7, #28]
   17efa:	009b      	lsls	r3, r3, #2
   17efc:	68ba      	ldr	r2, [r7, #8]
   17efe:	4413      	add	r3, r2
   17f00:	6818      	ldr	r0, [r3, #0]
   17f02:	69fb      	ldr	r3, [r7, #28]
   17f04:	009b      	lsls	r3, r3, #2
   17f06:	683a      	ldr	r2, [r7, #0]
   17f08:	4413      	add	r3, r2
   17f0a:	681b      	ldr	r3, [r3, #0]
   17f0c:	4619      	mov	r1, r3
   17f0e:	f7f5 fff7 	bl	df00 <mp_obj_equal>
   17f12:	4603      	mov	r3, r0
   17f14:	2b00      	cmp	r3, #0
   17f16:	d003      	beq.n	17f20 <mp_seq_cmp_objs+0x8e>
    for (size_t i = 0; i < len; i++) {
   17f18:	69fb      	ldr	r3, [r7, #28]
   17f1a:	3301      	adds	r3, #1
   17f1c:	61fb      	str	r3, [r7, #28]
   17f1e:	e01a      	b.n	17f56 <mp_seq_cmp_objs+0xc4>
            continue;
        }

        // Othewise, if they are not equal, we can have final decision based on them
        if (op == MP_BINARY_OP_EQUAL) {
   17f20:	68fb      	ldr	r3, [r7, #12]
   17f22:	2b02      	cmp	r3, #2
   17f24:	d101      	bne.n	17f2a <mp_seq_cmp_objs+0x98>
            // In particular, if we are checking for equality, here're the answer
            return false;
   17f26:	2300      	movs	r3, #0
   17f28:	e029      	b.n	17f7e <mp_seq_cmp_objs+0xec>
        }

        // Otherwise, application of relation op gives the answer
        return (mp_binary_op(op, items1[i], items2[i]) == mp_const_true);
   17f2a:	69fb      	ldr	r3, [r7, #28]
   17f2c:	009b      	lsls	r3, r3, #2
   17f2e:	68ba      	ldr	r2, [r7, #8]
   17f30:	4413      	add	r3, r2
   17f32:	6819      	ldr	r1, [r3, #0]
   17f34:	69fb      	ldr	r3, [r7, #28]
   17f36:	009b      	lsls	r3, r3, #2
   17f38:	683a      	ldr	r2, [r7, #0]
   17f3a:	4413      	add	r3, r2
   17f3c:	681b      	ldr	r3, [r3, #0]
   17f3e:	461a      	mov	r2, r3
   17f40:	68f8      	ldr	r0, [r7, #12]
   17f42:	f7f3 fe51 	bl	bbe8 <mp_binary_op>
   17f46:	4602      	mov	r2, r0
   17f48:	4b0f      	ldr	r3, [pc, #60]	; (17f88 <mp_seq_cmp_objs+0xf6>)
   17f4a:	429a      	cmp	r2, r3
   17f4c:	bf0c      	ite	eq
   17f4e:	2301      	moveq	r3, #1
   17f50:	2300      	movne	r3, #0
   17f52:	b2db      	uxtb	r3, r3
   17f54:	e013      	b.n	17f7e <mp_seq_cmp_objs+0xec>
    for (size_t i = 0; i < len; i++) {
   17f56:	69fa      	ldr	r2, [r7, #28]
   17f58:	693b      	ldr	r3, [r7, #16]
   17f5a:	429a      	cmp	r2, r3
   17f5c:	d3cc      	bcc.n	17ef8 <mp_seq_cmp_objs+0x66>
    }

    // If we had tie in the last element...
    // ... and we have lists of different lengths...
    if (len1 != len2) {
   17f5e:	687a      	ldr	r2, [r7, #4]
   17f60:	6abb      	ldr	r3, [r7, #40]	; 0x28
   17f62:	429a      	cmp	r2, r3
   17f64:	d005      	beq.n	17f72 <mp_seq_cmp_objs+0xe0>
        if (len1 < len2) {
   17f66:	687a      	ldr	r2, [r7, #4]
   17f68:	6abb      	ldr	r3, [r7, #40]	; 0x28
   17f6a:	429a      	cmp	r2, r3
   17f6c:	d206      	bcs.n	17f7c <mp_seq_cmp_objs+0xea>
            // ... then longer list length wins (we deal only with >)
            return false;
   17f6e:	2300      	movs	r3, #0
   17f70:	e005      	b.n	17f7e <mp_seq_cmp_objs+0xec>
        }
    } else if (op == MP_BINARY_OP_MORE) {
   17f72:	68fb      	ldr	r3, [r7, #12]
   17f74:	2b01      	cmp	r3, #1
   17f76:	d101      	bne.n	17f7c <mp_seq_cmp_objs+0xea>
        // Otherwise, if we have strict relation, sequence equality means failure
        return false;
   17f78:	2300      	movs	r3, #0
   17f7a:	e000      	b.n	17f7e <mp_seq_cmp_objs+0xec>
    }

    return true;
   17f7c:	2301      	movs	r3, #1
}
   17f7e:	4618      	mov	r0, r3
   17f80:	3720      	adds	r7, #32
   17f82:	46bd      	mov	sp, r7
   17f84:	bd80      	pop	{r7, pc}
   17f86:	bf00      	nop
   17f88:	00023868 	.word	0x00023868

00017f8c <mp_seq_index_obj>:

// Special-case of index() which searches for mp_obj_t
mp_obj_t mp_seq_index_obj(const mp_obj_t *items, size_t len, size_t n_args, const mp_obj_t *args) {
   17f8c:	b580      	push	{r7, lr}
   17f8e:	b08a      	sub	sp, #40	; 0x28
   17f90:	af00      	add	r7, sp, #0
   17f92:	60f8      	str	r0, [r7, #12]
   17f94:	60b9      	str	r1, [r7, #8]
   17f96:	607a      	str	r2, [r7, #4]
   17f98:	603b      	str	r3, [r7, #0]
    mp_obj_type_t *type = mp_obj_get_type(args[0]);
   17f9a:	683b      	ldr	r3, [r7, #0]
   17f9c:	681b      	ldr	r3, [r3, #0]
   17f9e:	4618      	mov	r0, r3
   17fa0:	f7f5 fe5c 	bl	dc5c <mp_obj_get_type>
   17fa4:	61b8      	str	r0, [r7, #24]
    mp_obj_t value = args[1];
   17fa6:	683b      	ldr	r3, [r7, #0]
   17fa8:	685b      	ldr	r3, [r3, #4]
   17faa:	617b      	str	r3, [r7, #20]
    size_t start = 0;
   17fac:	2300      	movs	r3, #0
   17fae:	627b      	str	r3, [r7, #36]	; 0x24
    size_t stop = len;
   17fb0:	68bb      	ldr	r3, [r7, #8]
   17fb2:	623b      	str	r3, [r7, #32]

    if (n_args >= 3) {
   17fb4:	687b      	ldr	r3, [r7, #4]
   17fb6:	2b02      	cmp	r3, #2
   17fb8:	d914      	bls.n	17fe4 <mp_seq_index_obj+0x58>
        start = mp_get_index(type, len, args[2], true);
   17fba:	683b      	ldr	r3, [r7, #0]
   17fbc:	3308      	adds	r3, #8
   17fbe:	681a      	ldr	r2, [r3, #0]
   17fc0:	2301      	movs	r3, #1
   17fc2:	68b9      	ldr	r1, [r7, #8]
   17fc4:	69b8      	ldr	r0, [r7, #24]
   17fc6:	f7f6 f915 	bl	e1f4 <mp_get_index>
   17fca:	6278      	str	r0, [r7, #36]	; 0x24
        if (n_args >= 4) {
   17fcc:	687b      	ldr	r3, [r7, #4]
   17fce:	2b03      	cmp	r3, #3
   17fd0:	d908      	bls.n	17fe4 <mp_seq_index_obj+0x58>
            stop = mp_get_index(type, len, args[3], true);
   17fd2:	683b      	ldr	r3, [r7, #0]
   17fd4:	330c      	adds	r3, #12
   17fd6:	681a      	ldr	r2, [r3, #0]
   17fd8:	2301      	movs	r3, #1
   17fda:	68b9      	ldr	r1, [r7, #8]
   17fdc:	69b8      	ldr	r0, [r7, #24]
   17fde:	f7f6 f909 	bl	e1f4 <mp_get_index>
   17fe2:	6238      	str	r0, [r7, #32]
        }
    }

    for (size_t i = start; i < stop; i++) {
   17fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   17fe6:	61fb      	str	r3, [r7, #28]
   17fe8:	e013      	b.n	18012 <mp_seq_index_obj+0x86>
        if (mp_obj_equal(items[i], value)) {
   17fea:	69fb      	ldr	r3, [r7, #28]
   17fec:	009b      	lsls	r3, r3, #2
   17fee:	68fa      	ldr	r2, [r7, #12]
   17ff0:	4413      	add	r3, r2
   17ff2:	681b      	ldr	r3, [r3, #0]
   17ff4:	6979      	ldr	r1, [r7, #20]
   17ff6:	4618      	mov	r0, r3
   17ff8:	f7f5 ff82 	bl	df00 <mp_obj_equal>
   17ffc:	4603      	mov	r3, r0
   17ffe:	2b00      	cmp	r3, #0
   18000:	d004      	beq.n	1800c <mp_seq_index_obj+0x80>
            // Common sense says this cannot overflow small int
            return MP_OBJ_NEW_SMALL_INT(i);
   18002:	69fb      	ldr	r3, [r7, #28]
   18004:	005b      	lsls	r3, r3, #1
   18006:	f043 0301 	orr.w	r3, r3, #1
   1800a:	e009      	b.n	18020 <mp_seq_index_obj+0x94>
    for (size_t i = start; i < stop; i++) {
   1800c:	69fb      	ldr	r3, [r7, #28]
   1800e:	3301      	adds	r3, #1
   18010:	61fb      	str	r3, [r7, #28]
   18012:	69fa      	ldr	r2, [r7, #28]
   18014:	6a3b      	ldr	r3, [r7, #32]
   18016:	429a      	cmp	r2, r3
   18018:	d3e7      	bcc.n	17fea <mp_seq_index_obj+0x5e>
        }
    }

    mp_raise_ValueError("object not in sequence");
   1801a:	4803      	ldr	r0, [pc, #12]	; (18028 <mp_seq_index_obj+0x9c>)
   1801c:	f7f5 f9ab 	bl	d376 <mp_raise_ValueError>
}
   18020:	4618      	mov	r0, r3
   18022:	3728      	adds	r7, #40	; 0x28
   18024:	46bd      	mov	sp, r7
   18026:	bd80      	pop	{r7, pc}
   18028:	00026208 	.word	0x00026208

0001802c <mp_seq_count_obj>:

mp_obj_t mp_seq_count_obj(const mp_obj_t *items, size_t len, mp_obj_t value) {
   1802c:	b580      	push	{r7, lr}
   1802e:	b086      	sub	sp, #24
   18030:	af00      	add	r7, sp, #0
   18032:	60f8      	str	r0, [r7, #12]
   18034:	60b9      	str	r1, [r7, #8]
   18036:	607a      	str	r2, [r7, #4]
    size_t count = 0;
   18038:	2300      	movs	r3, #0
   1803a:	617b      	str	r3, [r7, #20]
    for (size_t i = 0; i < len; i++) {
   1803c:	2300      	movs	r3, #0
   1803e:	613b      	str	r3, [r7, #16]
   18040:	e011      	b.n	18066 <mp_seq_count_obj+0x3a>
         if (mp_obj_equal(items[i], value)) {
   18042:	693b      	ldr	r3, [r7, #16]
   18044:	009b      	lsls	r3, r3, #2
   18046:	68fa      	ldr	r2, [r7, #12]
   18048:	4413      	add	r3, r2
   1804a:	681b      	ldr	r3, [r3, #0]
   1804c:	6879      	ldr	r1, [r7, #4]
   1804e:	4618      	mov	r0, r3
   18050:	f7f5 ff56 	bl	df00 <mp_obj_equal>
   18054:	4603      	mov	r3, r0
   18056:	2b00      	cmp	r3, #0
   18058:	d002      	beq.n	18060 <mp_seq_count_obj+0x34>
              count++;
   1805a:	697b      	ldr	r3, [r7, #20]
   1805c:	3301      	adds	r3, #1
   1805e:	617b      	str	r3, [r7, #20]
    for (size_t i = 0; i < len; i++) {
   18060:	693b      	ldr	r3, [r7, #16]
   18062:	3301      	adds	r3, #1
   18064:	613b      	str	r3, [r7, #16]
   18066:	693a      	ldr	r2, [r7, #16]
   18068:	68bb      	ldr	r3, [r7, #8]
   1806a:	429a      	cmp	r2, r3
   1806c:	d3e9      	bcc.n	18042 <mp_seq_count_obj+0x16>
         }
    }

    // Common sense says this cannot overflow small int
    return MP_OBJ_NEW_SMALL_INT(count);
   1806e:	697b      	ldr	r3, [r7, #20]
   18070:	005b      	lsls	r3, r3, #1
   18072:	f043 0301 	orr.w	r3, r3, #1
}
   18076:	4618      	mov	r0, r3
   18078:	3718      	adds	r7, #24
   1807a:	46bd      	mov	sp, r7
   1807c:	bd80      	pop	{r7, pc}
   1807e:	bf00      	nop

00018080 <mp_binary_get_size>:

#ifndef alignof
#define alignof(type) offsetof(struct { char c; type t; }, t)
#endif

size_t mp_binary_get_size(char struct_type, char val_type, mp_uint_t *palign) {
   18080:	b580      	push	{r7, lr}
   18082:	b084      	sub	sp, #16
   18084:	af00      	add	r7, sp, #0
   18086:	4603      	mov	r3, r0
   18088:	603a      	str	r2, [r7, #0]
   1808a:	71fb      	strb	r3, [r7, #7]
   1808c:	460b      	mov	r3, r1
   1808e:	71bb      	strb	r3, [r7, #6]
    size_t size = 0;
   18090:	2300      	movs	r3, #0
   18092:	60fb      	str	r3, [r7, #12]
    int align = 1;
   18094:	2301      	movs	r3, #1
   18096:	60bb      	str	r3, [r7, #8]
    switch (struct_type) {
   18098:	79fb      	ldrb	r3, [r7, #7]
   1809a:	2b3e      	cmp	r3, #62	; 0x3e
   1809c:	d005      	beq.n	180aa <mp_binary_get_size+0x2a>
   1809e:	2b40      	cmp	r3, #64	; 0x40
   180a0:	f000 8085 	beq.w	181ae <mp_binary_get_size+0x12e>
   180a4:	2b3c      	cmp	r3, #60	; 0x3c
   180a6:	f040 8196 	bne.w	183d6 <mp_binary_get_size+0x356>
        case '<': case '>':
            switch (val_type) {
   180aa:	79bb      	ldrb	r3, [r7, #6]
   180ac:	3b42      	subs	r3, #66	; 0x42
   180ae:	2b2f      	cmp	r3, #47	; 0x2f
   180b0:	f200 8190 	bhi.w	183d4 <mp_binary_get_size+0x354>
   180b4:	a201      	add	r2, pc, #4	; (adr r2, 180bc <mp_binary_get_size+0x3c>)
   180b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   180ba:	bf00      	nop
   180bc:	0001817d 	.word	0x0001817d
   180c0:	000183d5 	.word	0x000183d5
   180c4:	000183d5 	.word	0x000183d5
   180c8:	000183d5 	.word	0x000183d5
   180cc:	000183d5 	.word	0x000183d5
   180d0:	000183d5 	.word	0x000183d5
   180d4:	00018183 	.word	0x00018183
   180d8:	00018189 	.word	0x00018189
   180dc:	000183d5 	.word	0x000183d5
   180e0:	000183d5 	.word	0x000183d5
   180e4:	0001818f 	.word	0x0001818f
   180e8:	000183d5 	.word	0x000183d5
   180ec:	000183d5 	.word	0x000183d5
   180f0:	0001819b 	.word	0x0001819b
   180f4:	0001819b 	.word	0x0001819b
   180f8:	00018195 	.word	0x00018195
   180fc:	000183d5 	.word	0x000183d5
   18100:	0001819b 	.word	0x0001819b
   18104:	000183d5 	.word	0x000183d5
   18108:	000183d5 	.word	0x000183d5
   1810c:	000183d5 	.word	0x000183d5
   18110:	000183d5 	.word	0x000183d5
   18114:	000183d5 	.word	0x000183d5
   18118:	000183d5 	.word	0x000183d5
   1811c:	000183d5 	.word	0x000183d5
   18120:	000183d5 	.word	0x000183d5
   18124:	000183d5 	.word	0x000183d5
   18128:	000183d5 	.word	0x000183d5
   1812c:	000183d5 	.word	0x000183d5
   18130:	000183d5 	.word	0x000183d5
   18134:	000183d5 	.word	0x000183d5
   18138:	000183d5 	.word	0x000183d5
   1813c:	0001817d 	.word	0x0001817d
   18140:	000183d5 	.word	0x000183d5
   18144:	000181a7 	.word	0x000181a7
   18148:	000183d5 	.word	0x000183d5
   1814c:	000181a1 	.word	0x000181a1
   18150:	000183d5 	.word	0x000183d5
   18154:	00018183 	.word	0x00018183
   18158:	00018189 	.word	0x00018189
   1815c:	000183d5 	.word	0x000183d5
   18160:	000183d5 	.word	0x000183d5
   18164:	0001818f 	.word	0x0001818f
   18168:	000183d5 	.word	0x000183d5
   1816c:	000183d5 	.word	0x000183d5
   18170:	000183d5 	.word	0x000183d5
   18174:	000183d5 	.word	0x000183d5
   18178:	00018195 	.word	0x00018195
                case 'b': case 'B':
                    size = 1; break;
   1817c:	2301      	movs	r3, #1
   1817e:	60fb      	str	r3, [r7, #12]
   18180:	e014      	b.n	181ac <mp_binary_get_size+0x12c>
                case 'h': case 'H':
                    size = 2; break;
   18182:	2302      	movs	r3, #2
   18184:	60fb      	str	r3, [r7, #12]
   18186:	e011      	b.n	181ac <mp_binary_get_size+0x12c>
                case 'i': case 'I':
                    size = 4; break;
   18188:	2304      	movs	r3, #4
   1818a:	60fb      	str	r3, [r7, #12]
   1818c:	e00e      	b.n	181ac <mp_binary_get_size+0x12c>
                case 'l': case 'L':
                    size = 4; break;
   1818e:	2304      	movs	r3, #4
   18190:	60fb      	str	r3, [r7, #12]
   18192:	e00b      	b.n	181ac <mp_binary_get_size+0x12c>
                case 'q': case 'Q':
                    size = 8; break;
   18194:	2308      	movs	r3, #8
   18196:	60fb      	str	r3, [r7, #12]
   18198:	e008      	b.n	181ac <mp_binary_get_size+0x12c>
                case 'P': case 'O': case 'S':
                    size = sizeof(void*); break;
   1819a:	2304      	movs	r3, #4
   1819c:	60fb      	str	r3, [r7, #12]
   1819e:	e005      	b.n	181ac <mp_binary_get_size+0x12c>
                case 'f':
                    size = sizeof(float); break;
   181a0:	2304      	movs	r3, #4
   181a2:	60fb      	str	r3, [r7, #12]
   181a4:	e002      	b.n	181ac <mp_binary_get_size+0x12c>
                case 'd':
                    size = sizeof(double); break;
   181a6:	2308      	movs	r3, #8
   181a8:	60fb      	str	r3, [r7, #12]
   181aa:	bf00      	nop
            }
            break;
   181ac:	e112      	b.n	183d4 <mp_binary_get_size+0x354>
            // size, but that doesn't work for "bigger than int" types,
            // for example, long long may very well have long alignment
            // So, we introduce separate alignment handling, but having
            // formal support for that is different from actually supporting
            // particular (or any) ABI.
            switch (val_type) {
   181ae:	79bb      	ldrb	r3, [r7, #6]
   181b0:	3b01      	subs	r3, #1
   181b2:	2b70      	cmp	r3, #112	; 0x70
   181b4:	f200 810f 	bhi.w	183d6 <mp_binary_get_size+0x356>
   181b8:	a201      	add	r2, pc, #4	; (adr r2, 181c0 <mp_binary_get_size+0x140>)
   181ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   181be:	bf00      	nop
   181c0:	00018385 	.word	0x00018385
   181c4:	000183d7 	.word	0x000183d7
   181c8:	000183d7 	.word	0x000183d7
   181cc:	000183d7 	.word	0x000183d7
   181d0:	000183d7 	.word	0x000183d7
   181d4:	000183d7 	.word	0x000183d7
   181d8:	000183d7 	.word	0x000183d7
   181dc:	000183d7 	.word	0x000183d7
   181e0:	000183d7 	.word	0x000183d7
   181e4:	000183d7 	.word	0x000183d7
   181e8:	000183d7 	.word	0x000183d7
   181ec:	000183d7 	.word	0x000183d7
   181f0:	000183d7 	.word	0x000183d7
   181f4:	000183d7 	.word	0x000183d7
   181f8:	000183d7 	.word	0x000183d7
   181fc:	000183d7 	.word	0x000183d7
   18200:	000183d7 	.word	0x000183d7
   18204:	000183d7 	.word	0x000183d7
   18208:	000183d7 	.word	0x000183d7
   1820c:	000183d7 	.word	0x000183d7
   18210:	000183d7 	.word	0x000183d7
   18214:	000183d7 	.word	0x000183d7
   18218:	000183d7 	.word	0x000183d7
   1821c:	000183d7 	.word	0x000183d7
   18220:	000183d7 	.word	0x000183d7
   18224:	000183d7 	.word	0x000183d7
   18228:	000183d7 	.word	0x000183d7
   1822c:	000183d7 	.word	0x000183d7
   18230:	000183d7 	.word	0x000183d7
   18234:	000183d7 	.word	0x000183d7
   18238:	000183d7 	.word	0x000183d7
   1823c:	000183d7 	.word	0x000183d7
   18240:	000183d7 	.word	0x000183d7
   18244:	000183d7 	.word	0x000183d7
   18248:	000183d7 	.word	0x000183d7
   1824c:	000183d7 	.word	0x000183d7
   18250:	000183d7 	.word	0x000183d7
   18254:	000183d7 	.word	0x000183d7
   18258:	000183d7 	.word	0x000183d7
   1825c:	000183d7 	.word	0x000183d7
   18260:	000183d7 	.word	0x000183d7
   18264:	000183d7 	.word	0x000183d7
   18268:	000183d7 	.word	0x000183d7
   1826c:	000183d7 	.word	0x000183d7
   18270:	000183d7 	.word	0x000183d7
   18274:	000183d7 	.word	0x000183d7
   18278:	000183d7 	.word	0x000183d7
   1827c:	000183d7 	.word	0x000183d7
   18280:	000183d7 	.word	0x000183d7
   18284:	000183d7 	.word	0x000183d7
   18288:	000183d7 	.word	0x000183d7
   1828c:	000183d7 	.word	0x000183d7
   18290:	000183d7 	.word	0x000183d7
   18294:	000183d7 	.word	0x000183d7
   18298:	000183d7 	.word	0x000183d7
   1829c:	000183d7 	.word	0x000183d7
   182a0:	000183d7 	.word	0x000183d7
   182a4:	000183d7 	.word	0x000183d7
   182a8:	000183d7 	.word	0x000183d7
   182ac:	000183d7 	.word	0x000183d7
   182b0:	000183d7 	.word	0x000183d7
   182b4:	000183d7 	.word	0x000183d7
   182b8:	000183d7 	.word	0x000183d7
   182bc:	000183d7 	.word	0x000183d7
   182c0:	000183d7 	.word	0x000183d7
   182c4:	00018385 	.word	0x00018385
   182c8:	000183d7 	.word	0x000183d7
   182cc:	000183d7 	.word	0x000183d7
   182d0:	000183d7 	.word	0x000183d7
   182d4:	000183d7 	.word	0x000183d7
   182d8:	000183d7 	.word	0x000183d7
   182dc:	0001838f 	.word	0x0001838f
   182e0:	00018399 	.word	0x00018399
   182e4:	000183d7 	.word	0x000183d7
   182e8:	000183d7 	.word	0x000183d7
   182ec:	000183a3 	.word	0x000183a3
   182f0:	000183d7 	.word	0x000183d7
   182f4:	000183d7 	.word	0x000183d7
   182f8:	000183b7 	.word	0x000183b7
   182fc:	000183b7 	.word	0x000183b7
   18300:	000183ad 	.word	0x000183ad
   18304:	000183d7 	.word	0x000183d7
   18308:	000183b7 	.word	0x000183b7
   1830c:	000183d7 	.word	0x000183d7
   18310:	000183d7 	.word	0x000183d7
   18314:	000183d7 	.word	0x000183d7
   18318:	000183d7 	.word	0x000183d7
   1831c:	000183d7 	.word	0x000183d7
   18320:	000183d7 	.word	0x000183d7
   18324:	000183d7 	.word	0x000183d7
   18328:	000183d7 	.word	0x000183d7
   1832c:	000183d7 	.word	0x000183d7
   18330:	000183d7 	.word	0x000183d7
   18334:	000183d7 	.word	0x000183d7
   18338:	000183d7 	.word	0x000183d7
   1833c:	000183d7 	.word	0x000183d7
   18340:	000183d7 	.word	0x000183d7
   18344:	00018385 	.word	0x00018385
   18348:	000183d7 	.word	0x000183d7
   1834c:	000183cb 	.word	0x000183cb
   18350:	000183d7 	.word	0x000183d7
   18354:	000183c1 	.word	0x000183c1
   18358:	000183d7 	.word	0x000183d7
   1835c:	0001838f 	.word	0x0001838f
   18360:	00018399 	.word	0x00018399
   18364:	000183d7 	.word	0x000183d7
   18368:	000183d7 	.word	0x000183d7
   1836c:	000183a3 	.word	0x000183a3
   18370:	000183d7 	.word	0x000183d7
   18374:	000183d7 	.word	0x000183d7
   18378:	000183d7 	.word	0x000183d7
   1837c:	000183d7 	.word	0x000183d7
   18380:	000183ad 	.word	0x000183ad
                case BYTEARRAY_TYPECODE:
                case 'b': case 'B':
                    align = size = 1; break;
   18384:	2301      	movs	r3, #1
   18386:	60fb      	str	r3, [r7, #12]
   18388:	2301      	movs	r3, #1
   1838a:	60bb      	str	r3, [r7, #8]
   1838c:	e023      	b.n	183d6 <mp_binary_get_size+0x356>
                case 'h': case 'H':
                    align = alignof(short);
   1838e:	2302      	movs	r3, #2
   18390:	60bb      	str	r3, [r7, #8]
                    size = sizeof(short); break;
   18392:	2302      	movs	r3, #2
   18394:	60fb      	str	r3, [r7, #12]
   18396:	e01e      	b.n	183d6 <mp_binary_get_size+0x356>
                case 'i': case 'I':
                    align = alignof(int);
   18398:	2304      	movs	r3, #4
   1839a:	60bb      	str	r3, [r7, #8]
                    size = sizeof(int); break;
   1839c:	2304      	movs	r3, #4
   1839e:	60fb      	str	r3, [r7, #12]
   183a0:	e019      	b.n	183d6 <mp_binary_get_size+0x356>
                case 'l': case 'L':
                    align = alignof(long);
   183a2:	2304      	movs	r3, #4
   183a4:	60bb      	str	r3, [r7, #8]
                    size = sizeof(long); break;
   183a6:	2304      	movs	r3, #4
   183a8:	60fb      	str	r3, [r7, #12]
   183aa:	e014      	b.n	183d6 <mp_binary_get_size+0x356>
                case 'q': case 'Q':
                    align = alignof(long long);
   183ac:	2308      	movs	r3, #8
   183ae:	60bb      	str	r3, [r7, #8]
                    size = sizeof(long long); break;
   183b0:	2308      	movs	r3, #8
   183b2:	60fb      	str	r3, [r7, #12]
   183b4:	e00f      	b.n	183d6 <mp_binary_get_size+0x356>
                case 'P': case 'O': case 'S':
                    align = alignof(void*);
   183b6:	2304      	movs	r3, #4
   183b8:	60bb      	str	r3, [r7, #8]
                    size = sizeof(void*); break;
   183ba:	2304      	movs	r3, #4
   183bc:	60fb      	str	r3, [r7, #12]
   183be:	e00a      	b.n	183d6 <mp_binary_get_size+0x356>
                case 'f':
                    align = alignof(float);
   183c0:	2304      	movs	r3, #4
   183c2:	60bb      	str	r3, [r7, #8]
                    size = sizeof(float); break;
   183c4:	2304      	movs	r3, #4
   183c6:	60fb      	str	r3, [r7, #12]
   183c8:	e005      	b.n	183d6 <mp_binary_get_size+0x356>
                case 'd':
                    align = alignof(double);
   183ca:	2308      	movs	r3, #8
   183cc:	60bb      	str	r3, [r7, #8]
                    size = sizeof(double); break;
   183ce:	2308      	movs	r3, #8
   183d0:	60fb      	str	r3, [r7, #12]
   183d2:	e000      	b.n	183d6 <mp_binary_get_size+0x356>
            break;
   183d4:	bf00      	nop
            }
        }
    }

    if (size == 0) {
   183d6:	68fb      	ldr	r3, [r7, #12]
   183d8:	2b00      	cmp	r3, #0
   183da:	d102      	bne.n	183e2 <mp_binary_get_size+0x362>
        mp_raise_ValueError("bad typecode");
   183dc:	4806      	ldr	r0, [pc, #24]	; (183f8 <mp_binary_get_size+0x378>)
   183de:	f7f4 ffca 	bl	d376 <mp_raise_ValueError>
    }

    if (palign != NULL) {
   183e2:	683b      	ldr	r3, [r7, #0]
   183e4:	2b00      	cmp	r3, #0
   183e6:	d002      	beq.n	183ee <mp_binary_get_size+0x36e>
        *palign = align;
   183e8:	68ba      	ldr	r2, [r7, #8]
   183ea:	683b      	ldr	r3, [r7, #0]
   183ec:	601a      	str	r2, [r3, #0]
    }
    return size;
   183ee:	68fb      	ldr	r3, [r7, #12]
}
   183f0:	4618      	mov	r0, r3
   183f2:	3710      	adds	r7, #16
   183f4:	46bd      	mov	sp, r7
   183f6:	bd80      	pop	{r7, pc}
   183f8:	00026220 	.word	0x00026220

000183fc <mp_binary_get_val_array>:

mp_obj_t mp_binary_get_val_array(char typecode, void *p, mp_uint_t index) {
   183fc:	b580      	push	{r7, lr}
   183fe:	b086      	sub	sp, #24
   18400:	af00      	add	r7, sp, #0
   18402:	4603      	mov	r3, r0
   18404:	60b9      	str	r1, [r7, #8]
   18406:	607a      	str	r2, [r7, #4]
   18408:	73fb      	strb	r3, [r7, #15]
    mp_int_t val = 0;
   1840a:	2300      	movs	r3, #0
   1840c:	617b      	str	r3, [r7, #20]
    switch (typecode) {
   1840e:	7bfb      	ldrb	r3, [r7, #15]
   18410:	3b01      	subs	r3, #1
   18412:	2b6b      	cmp	r3, #107	; 0x6b
   18414:	f200 8130 	bhi.w	18678 <mp_binary_get_val_array+0x27c>
   18418:	a201      	add	r2, pc, #4	; (adr r2, 18420 <mp_binary_get_val_array+0x24>)
   1841a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1841e:	bf00      	nop
   18420:	000185df 	.word	0x000185df
   18424:	00018679 	.word	0x00018679
   18428:	00018679 	.word	0x00018679
   1842c:	00018679 	.word	0x00018679
   18430:	00018679 	.word	0x00018679
   18434:	00018679 	.word	0x00018679
   18438:	00018679 	.word	0x00018679
   1843c:	00018679 	.word	0x00018679
   18440:	00018679 	.word	0x00018679
   18444:	00018679 	.word	0x00018679
   18448:	00018679 	.word	0x00018679
   1844c:	00018679 	.word	0x00018679
   18450:	00018679 	.word	0x00018679
   18454:	00018679 	.word	0x00018679
   18458:	00018679 	.word	0x00018679
   1845c:	00018679 	.word	0x00018679
   18460:	00018679 	.word	0x00018679
   18464:	00018679 	.word	0x00018679
   18468:	00018679 	.word	0x00018679
   1846c:	00018679 	.word	0x00018679
   18470:	00018679 	.word	0x00018679
   18474:	00018679 	.word	0x00018679
   18478:	00018679 	.word	0x00018679
   1847c:	00018679 	.word	0x00018679
   18480:	00018679 	.word	0x00018679
   18484:	00018679 	.word	0x00018679
   18488:	00018679 	.word	0x00018679
   1848c:	00018679 	.word	0x00018679
   18490:	00018679 	.word	0x00018679
   18494:	00018679 	.word	0x00018679
   18498:	00018679 	.word	0x00018679
   1849c:	00018679 	.word	0x00018679
   184a0:	00018679 	.word	0x00018679
   184a4:	00018679 	.word	0x00018679
   184a8:	00018679 	.word	0x00018679
   184ac:	00018679 	.word	0x00018679
   184b0:	00018679 	.word	0x00018679
   184b4:	00018679 	.word	0x00018679
   184b8:	00018679 	.word	0x00018679
   184bc:	00018679 	.word	0x00018679
   184c0:	00018679 	.word	0x00018679
   184c4:	00018679 	.word	0x00018679
   184c8:	00018679 	.word	0x00018679
   184cc:	00018679 	.word	0x00018679
   184d0:	00018679 	.word	0x00018679
   184d4:	00018679 	.word	0x00018679
   184d8:	00018679 	.word	0x00018679
   184dc:	00018679 	.word	0x00018679
   184e0:	00018679 	.word	0x00018679
   184e4:	00018679 	.word	0x00018679
   184e8:	00018679 	.word	0x00018679
   184ec:	00018679 	.word	0x00018679
   184f0:	00018679 	.word	0x00018679
   184f4:	00018679 	.word	0x00018679
   184f8:	00018679 	.word	0x00018679
   184fc:	00018679 	.word	0x00018679
   18500:	00018679 	.word	0x00018679
   18504:	00018679 	.word	0x00018679
   18508:	00018679 	.word	0x00018679
   1850c:	00018679 	.word	0x00018679
   18510:	00018679 	.word	0x00018679
   18514:	00018679 	.word	0x00018679
   18518:	00018679 	.word	0x00018679
   1851c:	00018679 	.word	0x00018679
   18520:	00018679 	.word	0x00018679
   18524:	000185df 	.word	0x000185df
   18528:	00018679 	.word	0x00018679
   1852c:	00018679 	.word	0x00018679
   18530:	00018679 	.word	0x00018679
   18534:	00018679 	.word	0x00018679
   18538:	00018679 	.word	0x00018679
   1853c:	000185fb 	.word	0x000185fb
   18540:	0001861d 	.word	0x0001861d
   18544:	00018679 	.word	0x00018679
   18548:	00018679 	.word	0x00018679
   1854c:	00018645 	.word	0x00018645
   18550:	00018679 	.word	0x00018679
   18554:	00018679 	.word	0x00018679
   18558:	00018659 	.word	0x00018659
   1855c:	00018665 	.word	0x00018665
   18560:	00018679 	.word	0x00018679
   18564:	00018679 	.word	0x00018679
   18568:	00018679 	.word	0x00018679
   1856c:	00018679 	.word	0x00018679
   18570:	00018679 	.word	0x00018679
   18574:	00018679 	.word	0x00018679
   18578:	00018679 	.word	0x00018679
   1857c:	00018679 	.word	0x00018679
   18580:	00018679 	.word	0x00018679
   18584:	00018679 	.word	0x00018679
   18588:	00018679 	.word	0x00018679
   1858c:	00018679 	.word	0x00018679
   18590:	00018679 	.word	0x00018679
   18594:	00018679 	.word	0x00018679
   18598:	00018679 	.word	0x00018679
   1859c:	00018679 	.word	0x00018679
   185a0:	00018679 	.word	0x00018679
   185a4:	000185d1 	.word	0x000185d1
   185a8:	00018679 	.word	0x00018679
   185ac:	00018679 	.word	0x00018679
   185b0:	00018679 	.word	0x00018679
   185b4:	00018679 	.word	0x00018679
   185b8:	00018679 	.word	0x00018679
   185bc:	000185eb 	.word	0x000185eb
   185c0:	00018609 	.word	0x00018609
   185c4:	00018679 	.word	0x00018679
   185c8:	00018679 	.word	0x00018679
   185cc:	00018631 	.word	0x00018631
        case 'b':
            val = ((signed char*)p)[index];
   185d0:	68ba      	ldr	r2, [r7, #8]
   185d2:	687b      	ldr	r3, [r7, #4]
   185d4:	4413      	add	r3, r2
   185d6:	f993 3000 	ldrsb.w	r3, [r3]
   185da:	617b      	str	r3, [r7, #20]
            break;
   185dc:	e04c      	b.n	18678 <mp_binary_get_val_array+0x27c>
        case BYTEARRAY_TYPECODE:
        case 'B':
            val = ((unsigned char*)p)[index];
   185de:	68ba      	ldr	r2, [r7, #8]
   185e0:	687b      	ldr	r3, [r7, #4]
   185e2:	4413      	add	r3, r2
   185e4:	781b      	ldrb	r3, [r3, #0]
   185e6:	617b      	str	r3, [r7, #20]
            break;
   185e8:	e046      	b.n	18678 <mp_binary_get_val_array+0x27c>
        case 'h':
            val = ((short*)p)[index];
   185ea:	687b      	ldr	r3, [r7, #4]
   185ec:	005b      	lsls	r3, r3, #1
   185ee:	68ba      	ldr	r2, [r7, #8]
   185f0:	4413      	add	r3, r2
   185f2:	f9b3 3000 	ldrsh.w	r3, [r3]
   185f6:	617b      	str	r3, [r7, #20]
            break;
   185f8:	e03e      	b.n	18678 <mp_binary_get_val_array+0x27c>
        case 'H':
            val = ((unsigned short*)p)[index];
   185fa:	687b      	ldr	r3, [r7, #4]
   185fc:	005b      	lsls	r3, r3, #1
   185fe:	68ba      	ldr	r2, [r7, #8]
   18600:	4413      	add	r3, r2
   18602:	881b      	ldrh	r3, [r3, #0]
   18604:	617b      	str	r3, [r7, #20]
            break;
   18606:	e037      	b.n	18678 <mp_binary_get_val_array+0x27c>
        case 'i':
            return mp_obj_new_int(((int*)p)[index]);
   18608:	687b      	ldr	r3, [r7, #4]
   1860a:	009b      	lsls	r3, r3, #2
   1860c:	68ba      	ldr	r2, [r7, #8]
   1860e:	4413      	add	r3, r2
   18610:	681b      	ldr	r3, [r3, #0]
   18612:	4618      	mov	r0, r3
   18614:	f7f8 fbc6 	bl	10da4 <mp_obj_new_int>
   18618:	4603      	mov	r3, r0
   1861a:	e031      	b.n	18680 <mp_binary_get_val_array+0x284>
        case 'I':
            return mp_obj_new_int_from_uint(((unsigned int*)p)[index]);
   1861c:	687b      	ldr	r3, [r7, #4]
   1861e:	009b      	lsls	r3, r3, #2
   18620:	68ba      	ldr	r2, [r7, #8]
   18622:	4413      	add	r3, r2
   18624:	681b      	ldr	r3, [r3, #0]
   18626:	4618      	mov	r0, r3
   18628:	f7f8 fba2 	bl	10d70 <mp_obj_new_int_from_uint>
   1862c:	4603      	mov	r3, r0
   1862e:	e027      	b.n	18680 <mp_binary_get_val_array+0x284>
        case 'l':
            return mp_obj_new_int(((long*)p)[index]);
   18630:	687b      	ldr	r3, [r7, #4]
   18632:	009b      	lsls	r3, r3, #2
   18634:	68ba      	ldr	r2, [r7, #8]
   18636:	4413      	add	r3, r2
   18638:	681b      	ldr	r3, [r3, #0]
   1863a:	4618      	mov	r0, r3
   1863c:	f7f8 fbb2 	bl	10da4 <mp_obj_new_int>
   18640:	4603      	mov	r3, r0
   18642:	e01d      	b.n	18680 <mp_binary_get_val_array+0x284>
        case 'L':
            return mp_obj_new_int_from_uint(((unsigned long*)p)[index]);
   18644:	687b      	ldr	r3, [r7, #4]
   18646:	009b      	lsls	r3, r3, #2
   18648:	68ba      	ldr	r2, [r7, #8]
   1864a:	4413      	add	r3, r2
   1864c:	681b      	ldr	r3, [r3, #0]
   1864e:	4618      	mov	r0, r3
   18650:	f7f8 fb8e 	bl	10d70 <mp_obj_new_int_from_uint>
   18654:	4603      	mov	r3, r0
   18656:	e013      	b.n	18680 <mp_binary_get_val_array+0x284>
        case 'd':
            return mp_obj_new_float(((double*)p)[index]);
#endif
        // Extension to CPython: array of objects
        case 'O':
            return ((mp_obj_t*)p)[index];
   18658:	687b      	ldr	r3, [r7, #4]
   1865a:	009b      	lsls	r3, r3, #2
   1865c:	68ba      	ldr	r2, [r7, #8]
   1865e:	4413      	add	r3, r2
   18660:	681b      	ldr	r3, [r3, #0]
   18662:	e00d      	b.n	18680 <mp_binary_get_val_array+0x284>
        // Extension to CPython: array of pointers
        case 'P':
            return mp_obj_new_int((mp_int_t)(uintptr_t)((void**)p)[index]);
   18664:	687b      	ldr	r3, [r7, #4]
   18666:	009b      	lsls	r3, r3, #2
   18668:	68ba      	ldr	r2, [r7, #8]
   1866a:	4413      	add	r3, r2
   1866c:	681b      	ldr	r3, [r3, #0]
   1866e:	4618      	mov	r0, r3
   18670:	f7f8 fb98 	bl	10da4 <mp_obj_new_int>
   18674:	4603      	mov	r3, r0
   18676:	e003      	b.n	18680 <mp_binary_get_val_array+0x284>
    }
    return MP_OBJ_NEW_SMALL_INT(val);
   18678:	697b      	ldr	r3, [r7, #20]
   1867a:	005b      	lsls	r3, r3, #1
   1867c:	f043 0301 	orr.w	r3, r3, #1
}
   18680:	4618      	mov	r0, r3
   18682:	3718      	adds	r7, #24
   18684:	46bd      	mov	sp, r7
   18686:	bd80      	pop	{r7, pc}

00018688 <mp_binary_get_int>:

// The long long type is guaranteed to hold at least 64 bits, and size is at
// most 8 (for q and Q), so we will always be able to parse the given data
// and fit it into a long long.
long long mp_binary_get_int(mp_uint_t size, bool is_signed, bool big_endian, const byte *src) {
   18688:	b4b0      	push	{r4, r5, r7}
   1868a:	b08b      	sub	sp, #44	; 0x2c
   1868c:	af00      	add	r7, sp, #0
   1868e:	60f8      	str	r0, [r7, #12]
   18690:	607b      	str	r3, [r7, #4]
   18692:	460b      	mov	r3, r1
   18694:	72fb      	strb	r3, [r7, #11]
   18696:	4613      	mov	r3, r2
   18698:	72bb      	strb	r3, [r7, #10]
    int delta;
    if (!big_endian) {
   1869a:	7abb      	ldrb	r3, [r7, #10]
   1869c:	f083 0301 	eor.w	r3, r3, #1
   186a0:	b2db      	uxtb	r3, r3
   186a2:	2b00      	cmp	r3, #0
   186a4:	d008      	beq.n	186b8 <mp_binary_get_int+0x30>
        delta = -1;
   186a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   186aa:	627b      	str	r3, [r7, #36]	; 0x24
        src += size - 1;
   186ac:	68fb      	ldr	r3, [r7, #12]
   186ae:	3b01      	subs	r3, #1
   186b0:	687a      	ldr	r2, [r7, #4]
   186b2:	4413      	add	r3, r2
   186b4:	607b      	str	r3, [r7, #4]
   186b6:	e001      	b.n	186bc <mp_binary_get_int+0x34>
    } else {
        delta = 1;
   186b8:	2301      	movs	r3, #1
   186ba:	627b      	str	r3, [r7, #36]	; 0x24
    }

    long long val = 0;
   186bc:	f04f 0200 	mov.w	r2, #0
   186c0:	f04f 0300 	mov.w	r3, #0
   186c4:	e9c7 2306 	strd	r2, r3, [r7, #24]
    if (is_signed && *src & 0x80) {
   186c8:	7afb      	ldrb	r3, [r7, #11]
   186ca:	2b00      	cmp	r3, #0
   186cc:	d00a      	beq.n	186e4 <mp_binary_get_int+0x5c>
   186ce:	687b      	ldr	r3, [r7, #4]
   186d0:	781b      	ldrb	r3, [r3, #0]
   186d2:	b25b      	sxtb	r3, r3
   186d4:	2b00      	cmp	r3, #0
   186d6:	da05      	bge.n	186e4 <mp_binary_get_int+0x5c>
        val = -1;
   186d8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   186dc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   186e0:	e9c7 2306 	strd	r2, r3, [r7, #24]
    }
    for (uint i = 0; i < size; i++) {
   186e4:	2300      	movs	r3, #0
   186e6:	617b      	str	r3, [r7, #20]
   186e8:	e01b      	b.n	18722 <mp_binary_get_int+0x9a>
        val <<= 8;
   186ea:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
   186ee:	021d      	lsls	r5, r3, #8
   186f0:	ea45 6512 	orr.w	r5, r5, r2, lsr #24
   186f4:	0214      	lsls	r4, r2, #8
   186f6:	e9c7 4506 	strd	r4, r5, [r7, #24]
        val |= *src;
   186fa:	687b      	ldr	r3, [r7, #4]
   186fc:	781b      	ldrb	r3, [r3, #0]
   186fe:	b2da      	uxtb	r2, r3
   18700:	f04f 0300 	mov.w	r3, #0
   18704:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
   18708:	ea42 0200 	orr.w	r2, r2, r0
   1870c:	ea43 0301 	orr.w	r3, r3, r1
   18710:	e9c7 2306 	strd	r2, r3, [r7, #24]
        src += delta;
   18714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   18716:	687a      	ldr	r2, [r7, #4]
   18718:	4413      	add	r3, r2
   1871a:	607b      	str	r3, [r7, #4]
    for (uint i = 0; i < size; i++) {
   1871c:	697b      	ldr	r3, [r7, #20]
   1871e:	3301      	adds	r3, #1
   18720:	617b      	str	r3, [r7, #20]
   18722:	697a      	ldr	r2, [r7, #20]
   18724:	68fb      	ldr	r3, [r7, #12]
   18726:	429a      	cmp	r2, r3
   18728:	d3df      	bcc.n	186ea <mp_binary_get_int+0x62>
    }

    return val;
   1872a:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
}
   1872e:	4618      	mov	r0, r3
   18730:	4621      	mov	r1, r4
   18732:	372c      	adds	r7, #44	; 0x2c
   18734:	46bd      	mov	sp, r7
   18736:	bcb0      	pop	{r4, r5, r7}
   18738:	4770      	bx	lr

0001873a <mp_binary_get_val>:

#define is_signed(typecode) (typecode > 'Z')
mp_obj_t mp_binary_get_val(char struct_type, char val_type, byte **ptr) {
   1873a:	b590      	push	{r4, r7, lr}
   1873c:	b089      	sub	sp, #36	; 0x24
   1873e:	af00      	add	r7, sp, #0
   18740:	4603      	mov	r3, r0
   18742:	603a      	str	r2, [r7, #0]
   18744:	71fb      	strb	r3, [r7, #7]
   18746:	460b      	mov	r3, r1
   18748:	71bb      	strb	r3, [r7, #6]
    byte *p = *ptr;
   1874a:	683b      	ldr	r3, [r7, #0]
   1874c:	681b      	ldr	r3, [r3, #0]
   1874e:	61fb      	str	r3, [r7, #28]
    mp_uint_t align;

    size_t size = mp_binary_get_size(struct_type, val_type, &align);
   18750:	f107 0208 	add.w	r2, r7, #8
   18754:	79b9      	ldrb	r1, [r7, #6]
   18756:	79fb      	ldrb	r3, [r7, #7]
   18758:	4618      	mov	r0, r3
   1875a:	f7ff fc91 	bl	18080 <mp_binary_get_size>
   1875e:	61b8      	str	r0, [r7, #24]
    if (struct_type == '@') {
   18760:	79fb      	ldrb	r3, [r7, #7]
   18762:	2b40      	cmp	r3, #64	; 0x40
   18764:	d109      	bne.n	1877a <mp_binary_get_val+0x40>
        // Make pointer aligned
        p = (byte*)MP_ALIGN(p, (size_t)align);
   18766:	68ba      	ldr	r2, [r7, #8]
   18768:	69fb      	ldr	r3, [r7, #28]
   1876a:	4413      	add	r3, r2
   1876c:	1e5a      	subs	r2, r3, #1
   1876e:	68bb      	ldr	r3, [r7, #8]
   18770:	425b      	negs	r3, r3
   18772:	4013      	ands	r3, r2
   18774:	61fb      	str	r3, [r7, #28]
        #if MP_ENDIANNESS_LITTLE
        struct_type = '<';
   18776:	233c      	movs	r3, #60	; 0x3c
   18778:	71fb      	strb	r3, [r7, #7]
        #else
        struct_type = '>';
        #endif
    }
    *ptr = p + size;
   1877a:	69fa      	ldr	r2, [r7, #28]
   1877c:	69bb      	ldr	r3, [r7, #24]
   1877e:	441a      	add	r2, r3
   18780:	683b      	ldr	r3, [r7, #0]
   18782:	601a      	str	r2, [r3, #0]

    long long val = mp_binary_get_int(size, is_signed(val_type), (struct_type == '>'), p);
   18784:	79bb      	ldrb	r3, [r7, #6]
   18786:	2b5a      	cmp	r3, #90	; 0x5a
   18788:	bf8c      	ite	hi
   1878a:	2301      	movhi	r3, #1
   1878c:	2300      	movls	r3, #0
   1878e:	b2d9      	uxtb	r1, r3
   18790:	79fb      	ldrb	r3, [r7, #7]
   18792:	2b3e      	cmp	r3, #62	; 0x3e
   18794:	bf0c      	ite	eq
   18796:	2301      	moveq	r3, #1
   18798:	2300      	movne	r3, #0
   1879a:	b2da      	uxtb	r2, r3
   1879c:	69fb      	ldr	r3, [r7, #28]
   1879e:	69b8      	ldr	r0, [r7, #24]
   187a0:	f7ff ff72 	bl	18688 <mp_binary_get_int>
   187a4:	e9c7 0104 	strd	r0, r1, [r7, #16]

    if (val_type == 'O') {
   187a8:	79bb      	ldrb	r3, [r7, #6]
   187aa:	2b4f      	cmp	r3, #79	; 0x4f
   187ac:	d101      	bne.n	187b2 <mp_binary_get_val+0x78>
        return (mp_obj_t)(mp_uint_t)val;
   187ae:	693b      	ldr	r3, [r7, #16]
   187b0:	e045      	b.n	1883e <mp_binary_get_val+0x104>
    } else if (val_type == 'S') {
   187b2:	79bb      	ldrb	r3, [r7, #6]
   187b4:	2b53      	cmp	r3, #83	; 0x53
   187b6:	d10b      	bne.n	187d0 <mp_binary_get_val+0x96>
        const char *s_val = (const char*)(uintptr_t)(mp_uint_t)val;
   187b8:	693b      	ldr	r3, [r7, #16]
   187ba:	60fb      	str	r3, [r7, #12]
        return mp_obj_new_str(s_val, strlen(s_val));
   187bc:	68f8      	ldr	r0, [r7, #12]
   187be:	f005 ffed 	bl	1e79c <strlen>
   187c2:	4603      	mov	r3, r0
   187c4:	4619      	mov	r1, r3
   187c6:	68f8      	ldr	r0, [r7, #12]
   187c8:	f7fd f82a 	bl	15820 <mp_obj_new_str>
   187cc:	4603      	mov	r3, r0
   187ce:	e036      	b.n	1883e <mp_binary_get_val+0x104>
        return mp_obj_new_float(fpu.f);
    } else if (val_type == 'd') {
        union { uint64_t i; double f; } fpu = {val};
        return mp_obj_new_float(fpu.f);
#endif
    } else if (is_signed(val_type)) {
   187d0:	79bb      	ldrb	r3, [r7, #6]
   187d2:	2b5a      	cmp	r3, #90	; 0x5a
   187d4:	d91c      	bls.n	18810 <mp_binary_get_val+0xd6>
        if ((long long)MP_SMALL_INT_MIN <= val && val <= (long long)MP_SMALL_INT_MAX) {
   187d6:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
   187da:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
   187de:	f174 33ff 	sbcs.w	r3, r4, #4294967295	; 0xffffffff
   187e2:	db0f      	blt.n	18804 <mp_binary_get_val+0xca>
   187e4:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
   187e8:	f06f 4140 	mvn.w	r1, #3221225472	; 0xc0000000
   187ec:	f04f 0200 	mov.w	r2, #0
   187f0:	4299      	cmp	r1, r3
   187f2:	eb72 0304 	sbcs.w	r3, r2, r4
   187f6:	db05      	blt.n	18804 <mp_binary_get_val+0xca>
            return mp_obj_new_int((mp_int_t)val);
   187f8:	693b      	ldr	r3, [r7, #16]
   187fa:	4618      	mov	r0, r3
   187fc:	f7f8 fad2 	bl	10da4 <mp_obj_new_int>
   18800:	4603      	mov	r3, r0
   18802:	e01c      	b.n	1883e <mp_binary_get_val+0x104>
        } else {
            return mp_obj_new_int_from_ll(val);
   18804:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
   18808:	f7f8 fa96 	bl	10d38 <mp_obj_new_int_from_ll>
   1880c:	4603      	mov	r3, r0
   1880e:	e016      	b.n	1883e <mp_binary_get_val+0x104>
        }
    } else {
        if ((unsigned long long)val <= (unsigned long long)MP_SMALL_INT_MAX) {
   18810:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
   18814:	f06f 4140 	mvn.w	r1, #3221225472	; 0xc0000000
   18818:	f04f 0200 	mov.w	r2, #0
   1881c:	42a2      	cmp	r2, r4
   1881e:	bf08      	it	eq
   18820:	4299      	cmpeq	r1, r3
   18822:	d305      	bcc.n	18830 <mp_binary_get_val+0xf6>
            return mp_obj_new_int_from_uint((mp_uint_t)val);
   18824:	693b      	ldr	r3, [r7, #16]
   18826:	4618      	mov	r0, r3
   18828:	f7f8 faa2 	bl	10d70 <mp_obj_new_int_from_uint>
   1882c:	4603      	mov	r3, r0
   1882e:	e006      	b.n	1883e <mp_binary_get_val+0x104>
        } else {
            return mp_obj_new_int_from_ull(val);
   18830:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
   18834:	4618      	mov	r0, r3
   18836:	4621      	mov	r1, r4
   18838:	f7f8 fa8c 	bl	10d54 <mp_obj_new_int_from_ull>
   1883c:	4603      	mov	r3, r0
        }
    }
}
   1883e:	4618      	mov	r0, r3
   18840:	3724      	adds	r7, #36	; 0x24
   18842:	46bd      	mov	sp, r7
   18844:	bd90      	pop	{r4, r7, pc}

00018846 <mp_binary_set_int>:

void mp_binary_set_int(mp_uint_t val_sz, bool big_endian, byte *dest, mp_uint_t val) {
   18846:	b580      	push	{r7, lr}
   18848:	b086      	sub	sp, #24
   1884a:	af00      	add	r7, sp, #0
   1884c:	60f8      	str	r0, [r7, #12]
   1884e:	607a      	str	r2, [r7, #4]
   18850:	603b      	str	r3, [r7, #0]
   18852:	460b      	mov	r3, r1
   18854:	72fb      	strb	r3, [r7, #11]
    if (MP_ENDIANNESS_LITTLE && !big_endian) {
   18856:	7afb      	ldrb	r3, [r7, #11]
   18858:	f083 0301 	eor.w	r3, r3, #1
   1885c:	b2db      	uxtb	r3, r3
   1885e:	2b00      	cmp	r3, #0
   18860:	d006      	beq.n	18870 <mp_binary_set_int+0x2a>
        memcpy(dest, &val, val_sz);
   18862:	463b      	mov	r3, r7
   18864:	68fa      	ldr	r2, [r7, #12]
   18866:	4619      	mov	r1, r3
   18868:	6878      	ldr	r0, [r7, #4]
   1886a:	f005 fe61 	bl	1e530 <memcpy>
        }
        while (val_sz--) {
            *dest++ = *--src;
        }
    }
}
   1886e:	e012      	b.n	18896 <mp_binary_set_int+0x50>
            src = (const byte*)&val + val_sz;
   18870:	463a      	mov	r2, r7
   18872:	68fb      	ldr	r3, [r7, #12]
   18874:	4413      	add	r3, r2
   18876:	617b      	str	r3, [r7, #20]
        while (val_sz--) {
   18878:	e008      	b.n	1888c <mp_binary_set_int+0x46>
            *dest++ = *--src;
   1887a:	687b      	ldr	r3, [r7, #4]
   1887c:	1c5a      	adds	r2, r3, #1
   1887e:	607a      	str	r2, [r7, #4]
   18880:	697a      	ldr	r2, [r7, #20]
   18882:	3a01      	subs	r2, #1
   18884:	617a      	str	r2, [r7, #20]
   18886:	697a      	ldr	r2, [r7, #20]
   18888:	7812      	ldrb	r2, [r2, #0]
   1888a:	701a      	strb	r2, [r3, #0]
        while (val_sz--) {
   1888c:	68fb      	ldr	r3, [r7, #12]
   1888e:	1e5a      	subs	r2, r3, #1
   18890:	60fa      	str	r2, [r7, #12]
   18892:	2b00      	cmp	r3, #0
   18894:	d1f1      	bne.n	1887a <mp_binary_set_int+0x34>
}
   18896:	bf00      	nop
   18898:	3718      	adds	r7, #24
   1889a:	46bd      	mov	sp, r7
   1889c:	bd80      	pop	{r7, pc}

0001889e <mp_binary_set_val>:

void mp_binary_set_val(char struct_type, char val_type, mp_obj_t val_in, byte **ptr) {
   1889e:	b580      	push	{r7, lr}
   188a0:	b08a      	sub	sp, #40	; 0x28
   188a2:	af00      	add	r7, sp, #0
   188a4:	60ba      	str	r2, [r7, #8]
   188a6:	607b      	str	r3, [r7, #4]
   188a8:	4603      	mov	r3, r0
   188aa:	73fb      	strb	r3, [r7, #15]
   188ac:	460b      	mov	r3, r1
   188ae:	73bb      	strb	r3, [r7, #14]
    byte *p = *ptr;
   188b0:	687b      	ldr	r3, [r7, #4]
   188b2:	681b      	ldr	r3, [r3, #0]
   188b4:	627b      	str	r3, [r7, #36]	; 0x24
    mp_uint_t align;

    size_t size = mp_binary_get_size(struct_type, val_type, &align);
   188b6:	f107 0214 	add.w	r2, r7, #20
   188ba:	7bb9      	ldrb	r1, [r7, #14]
   188bc:	7bfb      	ldrb	r3, [r7, #15]
   188be:	4618      	mov	r0, r3
   188c0:	f7ff fbde 	bl	18080 <mp_binary_get_size>
   188c4:	61f8      	str	r0, [r7, #28]
    if (struct_type == '@') {
   188c6:	7bfb      	ldrb	r3, [r7, #15]
   188c8:	2b40      	cmp	r3, #64	; 0x40
   188ca:	d109      	bne.n	188e0 <mp_binary_set_val+0x42>
        // Make pointer aligned
        p = (byte*)MP_ALIGN(p, (size_t)align);
   188cc:	697a      	ldr	r2, [r7, #20]
   188ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   188d0:	4413      	add	r3, r2
   188d2:	1e5a      	subs	r2, r3, #1
   188d4:	697b      	ldr	r3, [r7, #20]
   188d6:	425b      	negs	r3, r3
   188d8:	4013      	ands	r3, r2
   188da:	627b      	str	r3, [r7, #36]	; 0x24
        if (MP_ENDIANNESS_LITTLE) {
            struct_type = '<';
   188dc:	233c      	movs	r3, #60	; 0x3c
   188de:	73fb      	strb	r3, [r7, #15]
        } else {
            struct_type = '>';
        }
    }
    *ptr = p + size;
   188e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   188e2:	69fb      	ldr	r3, [r7, #28]
   188e4:	441a      	add	r2, r3
   188e6:	687b      	ldr	r3, [r7, #4]
   188e8:	601a      	str	r2, [r3, #0]

    mp_uint_t val;
    switch (val_type) {
   188ea:	7bbb      	ldrb	r3, [r7, #14]
   188ec:	2b4f      	cmp	r3, #79	; 0x4f
   188ee:	d102      	bne.n	188f6 <mp_binary_set_val+0x58>
        case 'O':
            val = (mp_uint_t)val_in;
   188f0:	68bb      	ldr	r3, [r7, #8]
   188f2:	623b      	str	r3, [r7, #32]
            break;
   188f4:	e01e      	b.n	18934 <mp_binary_set_val+0x96>
                mp_obj_int_to_bytes_impl(val_in, struct_type == '>', size, p);
                return;
            } else
            #endif
            {
                val = mp_obj_get_int(val_in);
   188f6:	68b8      	ldr	r0, [r7, #8]
   188f8:	f7f5 fb8c 	bl	e014 <mp_obj_get_int>
   188fc:	4603      	mov	r3, r0
   188fe:	623b      	str	r3, [r7, #32]
                // zero/sign extend if needed
                if (BYTES_PER_WORD < 8 && size > sizeof(val)) {
   18900:	69fb      	ldr	r3, [r7, #28]
   18902:	2b04      	cmp	r3, #4
   18904:	d916      	bls.n	18934 <mp_binary_set_val+0x96>
                    int c = (is_signed(val_type) && (mp_int_t)val < 0) ? 0xff : 0x00;
   18906:	7bbb      	ldrb	r3, [r7, #14]
   18908:	2b5a      	cmp	r3, #90	; 0x5a
   1890a:	d904      	bls.n	18916 <mp_binary_set_val+0x78>
   1890c:	6a3b      	ldr	r3, [r7, #32]
   1890e:	2b00      	cmp	r3, #0
   18910:	da01      	bge.n	18916 <mp_binary_set_val+0x78>
   18912:	23ff      	movs	r3, #255	; 0xff
   18914:	e000      	b.n	18918 <mp_binary_set_val+0x7a>
   18916:	2300      	movs	r3, #0
   18918:	61bb      	str	r3, [r7, #24]
                    memset(p, c, size);
   1891a:	69fa      	ldr	r2, [r7, #28]
   1891c:	69b9      	ldr	r1, [r7, #24]
   1891e:	6a78      	ldr	r0, [r7, #36]	; 0x24
   18920:	f005 fea0 	bl	1e664 <memset>
                    if (struct_type == '>') {
   18924:	7bfb      	ldrb	r3, [r7, #15]
   18926:	2b3e      	cmp	r3, #62	; 0x3e
   18928:	d104      	bne.n	18934 <mp_binary_set_val+0x96>
                        p += size - sizeof(val);
   1892a:	69fb      	ldr	r3, [r7, #28]
   1892c:	3b04      	subs	r3, #4
   1892e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   18930:	4413      	add	r3, r2
   18932:	627b      	str	r3, [r7, #36]	; 0x24
                    }
                }
            }
    }

    mp_binary_set_int(MIN((size_t)size, sizeof(val)), struct_type == '>', p, val);
   18934:	69fb      	ldr	r3, [r7, #28]
   18936:	2b04      	cmp	r3, #4
   18938:	bf28      	it	cs
   1893a:	2304      	movcs	r3, #4
   1893c:	4618      	mov	r0, r3
   1893e:	7bfb      	ldrb	r3, [r7, #15]
   18940:	2b3e      	cmp	r3, #62	; 0x3e
   18942:	bf0c      	ite	eq
   18944:	2301      	moveq	r3, #1
   18946:	2300      	movne	r3, #0
   18948:	b2d9      	uxtb	r1, r3
   1894a:	6a3b      	ldr	r3, [r7, #32]
   1894c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   1894e:	f7ff ff7a 	bl	18846 <mp_binary_set_int>
}
   18952:	bf00      	nop
   18954:	3728      	adds	r7, #40	; 0x28
   18956:	46bd      	mov	sp, r7
   18958:	bd80      	pop	{r7, pc}

0001895a <mp_binary_set_val_array>:

void mp_binary_set_val_array(char typecode, void *p, mp_uint_t index, mp_obj_t val_in) {
   1895a:	b580      	push	{r7, lr}
   1895c:	b084      	sub	sp, #16
   1895e:	af00      	add	r7, sp, #0
   18960:	60b9      	str	r1, [r7, #8]
   18962:	607a      	str	r2, [r7, #4]
   18964:	603b      	str	r3, [r7, #0]
   18966:	4603      	mov	r3, r0
   18968:	73fb      	strb	r3, [r7, #15]
    switch (typecode) {
   1896a:	7bfb      	ldrb	r3, [r7, #15]
   1896c:	2b4f      	cmp	r3, #79	; 0x4f
   1896e:	d106      	bne.n	1897e <mp_binary_set_val_array+0x24>
            ((double*)p)[index] = mp_obj_get_float(val_in);
            break;
#endif
        // Extension to CPython: array of objects
        case 'O':
            ((mp_obj_t*)p)[index] = val_in;
   18970:	687b      	ldr	r3, [r7, #4]
   18972:	009b      	lsls	r3, r3, #2
   18974:	68ba      	ldr	r2, [r7, #8]
   18976:	4413      	add	r3, r2
   18978:	683a      	ldr	r2, [r7, #0]
   1897a:	601a      	str	r2, [r3, #0]
            break;
   1897c:	e008      	b.n	18990 <mp_binary_set_val_array+0x36>
                mp_obj_int_to_bytes_impl(val_in, MP_ENDIANNESS_BIG,
                    size, (uint8_t*)p + index * size);
                return;
            }
            #endif
            mp_binary_set_val_array_from_int(typecode, p, index, mp_obj_get_int(val_in));
   1897e:	6838      	ldr	r0, [r7, #0]
   18980:	f7f5 fb48 	bl	e014 <mp_obj_get_int>
   18984:	4603      	mov	r3, r0
   18986:	7bf8      	ldrb	r0, [r7, #15]
   18988:	687a      	ldr	r2, [r7, #4]
   1898a:	68b9      	ldr	r1, [r7, #8]
   1898c:	f000 f804 	bl	18998 <mp_binary_set_val_array_from_int>
    }
}
   18990:	bf00      	nop
   18992:	3710      	adds	r7, #16
   18994:	46bd      	mov	sp, r7
   18996:	bd80      	pop	{r7, pc}

00018998 <mp_binary_set_val_array_from_int>:

void mp_binary_set_val_array_from_int(char typecode, void *p, mp_uint_t index, mp_int_t val) {
   18998:	b480      	push	{r7}
   1899a:	b085      	sub	sp, #20
   1899c:	af00      	add	r7, sp, #0
   1899e:	60b9      	str	r1, [r7, #8]
   189a0:	607a      	str	r2, [r7, #4]
   189a2:	603b      	str	r3, [r7, #0]
   189a4:	4603      	mov	r3, r0
   189a6:	73fb      	strb	r3, [r7, #15]
    switch (typecode) {
   189a8:	7bfb      	ldrb	r3, [r7, #15]
   189aa:	2b4c      	cmp	r3, #76	; 0x4c
   189ac:	d04e      	beq.n	18a4c <mp_binary_set_val_array_from_int+0xb4>
   189ae:	2b4c      	cmp	r3, #76	; 0x4c
   189b0:	dc0b      	bgt.n	189ca <mp_binary_set_val_array_from_int+0x32>
   189b2:	2b42      	cmp	r3, #66	; 0x42
   189b4:	d01e      	beq.n	189f4 <mp_binary_set_val_array_from_int+0x5c>
   189b6:	2b42      	cmp	r3, #66	; 0x42
   189b8:	dc02      	bgt.n	189c0 <mp_binary_set_val_array_from_int+0x28>
   189ba:	2b01      	cmp	r3, #1
   189bc:	d01a      	beq.n	189f4 <mp_binary_set_val_array_from_int+0x5c>
        // Extension to CPython: array of pointers
        case 'P':
            ((void**)p)[index] = (void*)(uintptr_t)val;
            break;
    }
}
   189be:	e053      	b.n	18a68 <mp_binary_set_val_array_from_int+0xd0>
    switch (typecode) {
   189c0:	2b48      	cmp	r3, #72	; 0x48
   189c2:	d026      	beq.n	18a12 <mp_binary_set_val_array_from_int+0x7a>
   189c4:	2b49      	cmp	r3, #73	; 0x49
   189c6:	d033      	beq.n	18a30 <mp_binary_set_val_array_from_int+0x98>
}
   189c8:	e04e      	b.n	18a68 <mp_binary_set_val_array_from_int+0xd0>
    switch (typecode) {
   189ca:	2b68      	cmp	r3, #104	; 0x68
   189cc:	d019      	beq.n	18a02 <mp_binary_set_val_array_from_int+0x6a>
   189ce:	2b68      	cmp	r3, #104	; 0x68
   189d0:	dc04      	bgt.n	189dc <mp_binary_set_val_array_from_int+0x44>
   189d2:	2b50      	cmp	r3, #80	; 0x50
   189d4:	d041      	beq.n	18a5a <mp_binary_set_val_array_from_int+0xc2>
   189d6:	2b62      	cmp	r3, #98	; 0x62
   189d8:	d005      	beq.n	189e6 <mp_binary_set_val_array_from_int+0x4e>
}
   189da:	e045      	b.n	18a68 <mp_binary_set_val_array_from_int+0xd0>
    switch (typecode) {
   189dc:	2b69      	cmp	r3, #105	; 0x69
   189de:	d020      	beq.n	18a22 <mp_binary_set_val_array_from_int+0x8a>
   189e0:	2b6c      	cmp	r3, #108	; 0x6c
   189e2:	d02c      	beq.n	18a3e <mp_binary_set_val_array_from_int+0xa6>
}
   189e4:	e040      	b.n	18a68 <mp_binary_set_val_array_from_int+0xd0>
            ((signed char*)p)[index] = val;
   189e6:	68ba      	ldr	r2, [r7, #8]
   189e8:	687b      	ldr	r3, [r7, #4]
   189ea:	4413      	add	r3, r2
   189ec:	683a      	ldr	r2, [r7, #0]
   189ee:	b252      	sxtb	r2, r2
   189f0:	701a      	strb	r2, [r3, #0]
            break;
   189f2:	e039      	b.n	18a68 <mp_binary_set_val_array_from_int+0xd0>
            ((unsigned char*)p)[index] = val;
   189f4:	68ba      	ldr	r2, [r7, #8]
   189f6:	687b      	ldr	r3, [r7, #4]
   189f8:	4413      	add	r3, r2
   189fa:	683a      	ldr	r2, [r7, #0]
   189fc:	b2d2      	uxtb	r2, r2
   189fe:	701a      	strb	r2, [r3, #0]
            break;
   18a00:	e032      	b.n	18a68 <mp_binary_set_val_array_from_int+0xd0>
            ((short*)p)[index] = val;
   18a02:	687b      	ldr	r3, [r7, #4]
   18a04:	005b      	lsls	r3, r3, #1
   18a06:	68ba      	ldr	r2, [r7, #8]
   18a08:	4413      	add	r3, r2
   18a0a:	683a      	ldr	r2, [r7, #0]
   18a0c:	b212      	sxth	r2, r2
   18a0e:	801a      	strh	r2, [r3, #0]
            break;
   18a10:	e02a      	b.n	18a68 <mp_binary_set_val_array_from_int+0xd0>
            ((unsigned short*)p)[index] = val;
   18a12:	687b      	ldr	r3, [r7, #4]
   18a14:	005b      	lsls	r3, r3, #1
   18a16:	68ba      	ldr	r2, [r7, #8]
   18a18:	4413      	add	r3, r2
   18a1a:	683a      	ldr	r2, [r7, #0]
   18a1c:	b292      	uxth	r2, r2
   18a1e:	801a      	strh	r2, [r3, #0]
            break;
   18a20:	e022      	b.n	18a68 <mp_binary_set_val_array_from_int+0xd0>
            ((int*)p)[index] = val;
   18a22:	687b      	ldr	r3, [r7, #4]
   18a24:	009b      	lsls	r3, r3, #2
   18a26:	68ba      	ldr	r2, [r7, #8]
   18a28:	4413      	add	r3, r2
   18a2a:	683a      	ldr	r2, [r7, #0]
   18a2c:	601a      	str	r2, [r3, #0]
            break;
   18a2e:	e01b      	b.n	18a68 <mp_binary_set_val_array_from_int+0xd0>
            ((unsigned int*)p)[index] = val;
   18a30:	687b      	ldr	r3, [r7, #4]
   18a32:	009b      	lsls	r3, r3, #2
   18a34:	68ba      	ldr	r2, [r7, #8]
   18a36:	4413      	add	r3, r2
   18a38:	683a      	ldr	r2, [r7, #0]
   18a3a:	601a      	str	r2, [r3, #0]
            break;
   18a3c:	e014      	b.n	18a68 <mp_binary_set_val_array_from_int+0xd0>
            ((long*)p)[index] = val;
   18a3e:	687b      	ldr	r3, [r7, #4]
   18a40:	009b      	lsls	r3, r3, #2
   18a42:	68ba      	ldr	r2, [r7, #8]
   18a44:	4413      	add	r3, r2
   18a46:	683a      	ldr	r2, [r7, #0]
   18a48:	601a      	str	r2, [r3, #0]
            break;
   18a4a:	e00d      	b.n	18a68 <mp_binary_set_val_array_from_int+0xd0>
            ((unsigned long*)p)[index] = val;
   18a4c:	687b      	ldr	r3, [r7, #4]
   18a4e:	009b      	lsls	r3, r3, #2
   18a50:	68ba      	ldr	r2, [r7, #8]
   18a52:	4413      	add	r3, r2
   18a54:	683a      	ldr	r2, [r7, #0]
   18a56:	601a      	str	r2, [r3, #0]
            break;
   18a58:	e006      	b.n	18a68 <mp_binary_set_val_array_from_int+0xd0>
            ((void**)p)[index] = (void*)(uintptr_t)val;
   18a5a:	687b      	ldr	r3, [r7, #4]
   18a5c:	009b      	lsls	r3, r3, #2
   18a5e:	68ba      	ldr	r2, [r7, #8]
   18a60:	4413      	add	r3, r2
   18a62:	683a      	ldr	r2, [r7, #0]
   18a64:	601a      	str	r2, [r3, #0]
            break;
   18a66:	bf00      	nop
}
   18a68:	bf00      	nop
   18a6a:	3714      	adds	r7, #20
   18a6c:	46bd      	mov	sp, r7
   18a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
   18a72:	4770      	bx	lr

00018a74 <vstr_str>:
static inline char *vstr_str(vstr_t *vstr) { return vstr->buf; }
   18a74:	b480      	push	{r7}
   18a76:	b083      	sub	sp, #12
   18a78:	af00      	add	r7, sp, #0
   18a7a:	6078      	str	r0, [r7, #4]
   18a7c:	687b      	ldr	r3, [r7, #4]
   18a7e:	689b      	ldr	r3, [r3, #8]
   18a80:	4618      	mov	r0, r3
   18a82:	370c      	adds	r7, #12
   18a84:	46bd      	mov	sp, r7
   18a86:	f85d 7b04 	ldr.w	r7, [sp], #4
   18a8a:	4770      	bx	lr

00018a8c <vstr_len>:
static inline size_t vstr_len(vstr_t *vstr) { return vstr->len; }
   18a8c:	b480      	push	{r7}
   18a8e:	b083      	sub	sp, #12
   18a90:	af00      	add	r7, sp, #0
   18a92:	6078      	str	r0, [r7, #4]
   18a94:	687b      	ldr	r3, [r7, #4]
   18a96:	685b      	ldr	r3, [r3, #4]
   18a98:	4618      	mov	r0, r3
   18a9a:	370c      	adds	r7, #12
   18a9c:	46bd      	mov	sp, r7
   18a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
   18aa2:	4770      	bx	lr

00018aa4 <mp_obj_module_get_globals>:
static inline mp_obj_dict_t *mp_obj_module_get_globals(mp_obj_t module) {
   18aa4:	b480      	push	{r7}
   18aa6:	b083      	sub	sp, #12
   18aa8:	af00      	add	r7, sp, #0
   18aaa:	6078      	str	r0, [r7, #4]
    return ((mp_obj_module_t*)MP_OBJ_TO_PTR(module))->globals;
   18aac:	687b      	ldr	r3, [r7, #4]
   18aae:	685b      	ldr	r3, [r3, #4]
}
   18ab0:	4618      	mov	r0, r3
   18ab2:	370c      	adds	r7, #12
   18ab4:	46bd      	mov	sp, r7
   18ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
   18aba:	4770      	bx	lr

00018abc <mp_local_free>:
static inline void mp_local_free(void *ptr) {
   18abc:	b480      	push	{r7}
   18abe:	b083      	sub	sp, #12
   18ac0:	af00      	add	r7, sp, #0
   18ac2:	6078      	str	r0, [r7, #4]
}
   18ac4:	bf00      	nop
   18ac6:	370c      	adds	r7, #12
   18ac8:	46bd      	mov	sp, r7
   18aca:	f85d 7b04 	ldr.w	r7, [sp], #4
   18ace:	4770      	bx	lr

00018ad0 <mp_locals_get>:
static inline mp_obj_dict_t *mp_locals_get(void) { return MP_STATE_THREAD(dict_locals); }
   18ad0:	b480      	push	{r7}
   18ad2:	af00      	add	r7, sp, #0
   18ad4:	4b03      	ldr	r3, [pc, #12]	; (18ae4 <mp_locals_get+0x14>)
   18ad6:	685b      	ldr	r3, [r3, #4]
   18ad8:	4618      	mov	r0, r3
   18ada:	46bd      	mov	sp, r7
   18adc:	f85d 7b04 	ldr.w	r7, [sp], #4
   18ae0:	4770      	bx	lr
   18ae2:	bf00      	nop
   18ae4:	20001248 	.word	0x20001248

00018ae8 <mp_locals_set>:
static inline void mp_locals_set(mp_obj_dict_t *d) { MP_STATE_THREAD(dict_locals) = d; }
   18ae8:	b480      	push	{r7}
   18aea:	b083      	sub	sp, #12
   18aec:	af00      	add	r7, sp, #0
   18aee:	6078      	str	r0, [r7, #4]
   18af0:	4a04      	ldr	r2, [pc, #16]	; (18b04 <mp_locals_set+0x1c>)
   18af2:	687b      	ldr	r3, [r7, #4]
   18af4:	6053      	str	r3, [r2, #4]
   18af6:	bf00      	nop
   18af8:	370c      	adds	r7, #12
   18afa:	46bd      	mov	sp, r7
   18afc:	f85d 7b04 	ldr.w	r7, [sp], #4
   18b00:	4770      	bx	lr
   18b02:	bf00      	nop
   18b04:	20001248 	.word	0x20001248

00018b08 <mp_globals_get>:
static inline mp_obj_dict_t *mp_globals_get(void) { return MP_STATE_THREAD(dict_globals); }
   18b08:	b480      	push	{r7}
   18b0a:	af00      	add	r7, sp, #0
   18b0c:	4b03      	ldr	r3, [pc, #12]	; (18b1c <mp_globals_get+0x14>)
   18b0e:	689b      	ldr	r3, [r3, #8]
   18b10:	4618      	mov	r0, r3
   18b12:	46bd      	mov	sp, r7
   18b14:	f85d 7b04 	ldr.w	r7, [sp], #4
   18b18:	4770      	bx	lr
   18b1a:	bf00      	nop
   18b1c:	20001248 	.word	0x20001248

00018b20 <mp_globals_set>:
static inline void mp_globals_set(mp_obj_dict_t *d) { MP_STATE_THREAD(dict_globals) = d; }
   18b20:	b480      	push	{r7}
   18b22:	b083      	sub	sp, #12
   18b24:	af00      	add	r7, sp, #0
   18b26:	6078      	str	r0, [r7, #4]
   18b28:	4a04      	ldr	r2, [pc, #16]	; (18b3c <mp_globals_set+0x1c>)
   18b2a:	687b      	ldr	r3, [r7, #4]
   18b2c:	6093      	str	r3, [r2, #8]
   18b2e:	bf00      	nop
   18b30:	370c      	adds	r7, #12
   18b32:	46bd      	mov	sp, r7
   18b34:	f85d 7b04 	ldr.w	r7, [sp], #4
   18b38:	4770      	bx	lr
   18b3a:	bf00      	nop
   18b3c:	20001248 	.word	0x20001248

00018b40 <mp_obj_is_package>:

#if MICROPY_ENABLE_EXTERNAL_IMPORT

#define PATH_SEP_CHAR '/'

bool mp_obj_is_package(mp_obj_t module) {
   18b40:	b580      	push	{r7, lr}
   18b42:	b084      	sub	sp, #16
   18b44:	af00      	add	r7, sp, #0
   18b46:	6078      	str	r0, [r7, #4]
    mp_obj_t dest[2];
    mp_load_method_maybe(module, MP_QSTR___path__, dest);
   18b48:	f107 0308 	add.w	r3, r7, #8
   18b4c:	461a      	mov	r2, r3
   18b4e:	211f      	movs	r1, #31
   18b50:	6878      	ldr	r0, [r7, #4]
   18b52:	f7f3 ffc9 	bl	cae8 <mp_load_method_maybe>
    return dest[0] != MP_OBJ_NULL;
   18b56:	68bb      	ldr	r3, [r7, #8]
   18b58:	2b00      	cmp	r3, #0
   18b5a:	bf14      	ite	ne
   18b5c:	2301      	movne	r3, #1
   18b5e:	2300      	moveq	r3, #0
   18b60:	b2db      	uxtb	r3, r3
}
   18b62:	4618      	mov	r0, r3
   18b64:	3710      	adds	r7, #16
   18b66:	46bd      	mov	sp, r7
   18b68:	bd80      	pop	{r7, pc}

00018b6a <mp_import_stat_any>:

// Stat either frozen or normal module by a given path
// (whatever is available, if at all).
STATIC mp_import_stat_t mp_import_stat_any(const char *path) {
   18b6a:	b580      	push	{r7, lr}
   18b6c:	b084      	sub	sp, #16
   18b6e:	af00      	add	r7, sp, #0
   18b70:	6078      	str	r0, [r7, #4]
    #if MICROPY_MODULE_FROZEN
    mp_import_stat_t st = mp_frozen_stat(path);
   18b72:	6878      	ldr	r0, [r7, #4]
   18b74:	f004 f80d 	bl	1cb92 <mp_frozen_stat>
   18b78:	60f8      	str	r0, [r7, #12]
    if (st != MP_IMPORT_STAT_NO_EXIST) {
   18b7a:	68fb      	ldr	r3, [r7, #12]
   18b7c:	2b00      	cmp	r3, #0
   18b7e:	d001      	beq.n	18b84 <mp_import_stat_any+0x1a>
        return st;
   18b80:	68fb      	ldr	r3, [r7, #12]
   18b82:	e003      	b.n	18b8c <mp_import_stat_any+0x22>
    }
    #endif
    return mp_import_stat(path);
   18b84:	6878      	ldr	r0, [r7, #4]
   18b86:	f004 f986 	bl	1ce96 <mp_import_stat>
   18b8a:	4603      	mov	r3, r0
}
   18b8c:	4618      	mov	r0, r3
   18b8e:	3710      	adds	r7, #16
   18b90:	46bd      	mov	sp, r7
   18b92:	bd80      	pop	{r7, pc}

00018b94 <stat_file_py_or_mpy>:

STATIC mp_import_stat_t stat_file_py_or_mpy(vstr_t *path) {
   18b94:	b580      	push	{r7, lr}
   18b96:	b084      	sub	sp, #16
   18b98:	af00      	add	r7, sp, #0
   18b9a:	6078      	str	r0, [r7, #4]
    mp_import_stat_t stat = mp_import_stat_any(vstr_null_terminated_str(path));
   18b9c:	6878      	ldr	r0, [r7, #4]
   18b9e:	f7e8 fdd4 	bl	174a <vstr_null_terminated_str>
   18ba2:	4603      	mov	r3, r0
   18ba4:	4618      	mov	r0, r3
   18ba6:	f7ff ffe0 	bl	18b6a <mp_import_stat_any>
   18baa:	60f8      	str	r0, [r7, #12]
    if (stat == MP_IMPORT_STAT_FILE) {
   18bac:	68fb      	ldr	r3, [r7, #12]
   18bae:	2b02      	cmp	r3, #2
   18bb0:	d101      	bne.n	18bb6 <stat_file_py_or_mpy+0x22>
        return stat;
   18bb2:	68fb      	ldr	r3, [r7, #12]
   18bb4:	e000      	b.n	18bb8 <stat_file_py_or_mpy+0x24>
    if (stat == MP_IMPORT_STAT_FILE) {
        return stat;
    }
    #endif

    return MP_IMPORT_STAT_NO_EXIST;
   18bb6:	2300      	movs	r3, #0
}
   18bb8:	4618      	mov	r0, r3
   18bba:	3710      	adds	r7, #16
   18bbc:	46bd      	mov	sp, r7
   18bbe:	bd80      	pop	{r7, pc}

00018bc0 <stat_dir_or_file>:

STATIC mp_import_stat_t stat_dir_or_file(vstr_t *path) {
   18bc0:	b580      	push	{r7, lr}
   18bc2:	b084      	sub	sp, #16
   18bc4:	af00      	add	r7, sp, #0
   18bc6:	6078      	str	r0, [r7, #4]
    mp_import_stat_t stat = mp_import_stat_any(vstr_null_terminated_str(path));
   18bc8:	6878      	ldr	r0, [r7, #4]
   18bca:	f7e8 fdbe 	bl	174a <vstr_null_terminated_str>
   18bce:	4603      	mov	r3, r0
   18bd0:	4618      	mov	r0, r3
   18bd2:	f7ff ffca 	bl	18b6a <mp_import_stat_any>
   18bd6:	60f8      	str	r0, [r7, #12]
    DEBUG_printf("stat %s: %d\n", vstr_str(path), stat);
   18bd8:	6878      	ldr	r0, [r7, #4]
   18bda:	f7ff ff4b 	bl	18a74 <vstr_str>
   18bde:	4603      	mov	r3, r0
   18be0:	68fa      	ldr	r2, [r7, #12]
   18be2:	4619      	mov	r1, r3
   18be4:	4809      	ldr	r0, [pc, #36]	; (18c0c <stat_dir_or_file+0x4c>)
   18be6:	f004 f801 	bl	1cbec <DEBUG_printf>
    if (stat == MP_IMPORT_STAT_DIR) {
   18bea:	68fb      	ldr	r3, [r7, #12]
   18bec:	2b01      	cmp	r3, #1
   18bee:	d101      	bne.n	18bf4 <stat_dir_or_file+0x34>
        return stat;
   18bf0:	68fb      	ldr	r3, [r7, #12]
   18bf2:	e007      	b.n	18c04 <stat_dir_or_file+0x44>
    }

    // not a directory, add .py and try as a file
    vstr_add_str(path, ".py");
   18bf4:	4906      	ldr	r1, [pc, #24]	; (18c10 <stat_dir_or_file+0x50>)
   18bf6:	6878      	ldr	r0, [r7, #4]
   18bf8:	f7e8 fde3 	bl	17c2 <vstr_add_str>
    return stat_file_py_or_mpy(path);
   18bfc:	6878      	ldr	r0, [r7, #4]
   18bfe:	f7ff ffc9 	bl	18b94 <stat_file_py_or_mpy>
   18c02:	4603      	mov	r3, r0
}
   18c04:	4618      	mov	r0, r3
   18c06:	3710      	adds	r7, #16
   18c08:	46bd      	mov	sp, r7
   18c0a:	bd80      	pop	{r7, pc}
   18c0c:	00026230 	.word	0x00026230
   18c10:	00026240 	.word	0x00026240

00018c14 <find_file>:

STATIC mp_import_stat_t find_file(const char *file_str, uint file_len, vstr_t *dest) {
   18c14:	b580      	push	{r7, lr}
   18c16:	b084      	sub	sp, #16
   18c18:	af00      	add	r7, sp, #0
   18c1a:	60f8      	str	r0, [r7, #12]
   18c1c:	60b9      	str	r1, [r7, #8]
   18c1e:	607a      	str	r2, [r7, #4]
    mp_obj_list_get(mp_sys_path, &path_num, &path_items);

    if (path_num == 0) {
#endif
        // mp_sys_path is empty, so just use the given file name
        vstr_add_strn(dest, file_str, file_len);
   18c20:	68ba      	ldr	r2, [r7, #8]
   18c22:	68f9      	ldr	r1, [r7, #12]
   18c24:	6878      	ldr	r0, [r7, #4]
   18c26:	f7e8 fdde 	bl	17e6 <vstr_add_strn>
        return stat_dir_or_file(dest);
   18c2a:	6878      	ldr	r0, [r7, #4]
   18c2c:	f7ff ffc8 	bl	18bc0 <stat_dir_or_file>
   18c30:	4603      	mov	r3, r0

        // could not find a directory or file
        return MP_IMPORT_STAT_NO_EXIST;
    }
#endif
}
   18c32:	4618      	mov	r0, r3
   18c34:	3710      	adds	r7, #16
   18c36:	46bd      	mov	sp, r7
   18c38:	bd80      	pop	{r7, pc}

00018c3a <do_load_from_lexer>:

#if MICROPY_ENABLE_COMPILER
STATIC void do_load_from_lexer(mp_obj_t module_obj, mp_lexer_t *lex) {
   18c3a:	b580      	push	{r7, lr}
   18c3c:	b084      	sub	sp, #16
   18c3e:	af00      	add	r7, sp, #0
   18c40:	6078      	str	r0, [r7, #4]
   18c42:	6039      	str	r1, [r7, #0]
    qstr source_name = lex->source_name;
    mp_store_attr(module_obj, MP_QSTR___file__, MP_OBJ_NEW_QSTR(source_name));
    #endif

    // parse, compile and execute the module in its context
    mp_obj_dict_t *mod_globals = mp_obj_module_get_globals(module_obj);
   18c44:	6878      	ldr	r0, [r7, #4]
   18c46:	f7ff ff2d 	bl	18aa4 <mp_obj_module_get_globals>
   18c4a:	60f8      	str	r0, [r7, #12]
    mp_parse_compile_execute(lex, MP_PARSE_FILE_INPUT, mod_globals, mod_globals);
   18c4c:	68fb      	ldr	r3, [r7, #12]
   18c4e:	68fa      	ldr	r2, [r7, #12]
   18c50:	2101      	movs	r1, #1
   18c52:	6838      	ldr	r0, [r7, #0]
   18c54:	f7f4 fb06 	bl	d264 <mp_parse_compile_execute>
}
   18c58:	bf00      	nop
   18c5a:	3710      	adds	r7, #16
   18c5c:	46bd      	mov	sp, r7
   18c5e:	bd80      	pop	{r7, pc}

00018c60 <do_execute_raw_code>:
#endif

#if MICROPY_PERSISTENT_CODE_LOAD || MICROPY_MODULE_FROZEN_MPY
STATIC void do_execute_raw_code(mp_obj_t module_obj, mp_raw_code_t *raw_code) {
   18c60:	b580      	push	{r7, lr}
   18c62:	b092      	sub	sp, #72	; 0x48
   18c64:	af00      	add	r7, sp, #0
   18c66:	6078      	str	r0, [r7, #4]
   18c68:	6039      	str	r1, [r7, #0]
    //qstr source_name = lex->source_name;
    //mp_store_attr(module_obj, MP_QSTR___file__, MP_OBJ_NEW_QSTR(source_name));
    #endif

    // execute the module in its context
    mp_obj_dict_t *mod_globals = mp_obj_module_get_globals(module_obj);
   18c6a:	6878      	ldr	r0, [r7, #4]
   18c6c:	f7ff ff1a 	bl	18aa4 <mp_obj_module_get_globals>
   18c70:	6478      	str	r0, [r7, #68]	; 0x44

    // save context
    mp_obj_dict_t *volatile old_globals = mp_globals_get();
   18c72:	f7ff ff49 	bl	18b08 <mp_globals_get>
   18c76:	4603      	mov	r3, r0
   18c78:	63fb      	str	r3, [r7, #60]	; 0x3c
    mp_obj_dict_t *volatile old_locals = mp_locals_get();
   18c7a:	f7ff ff29 	bl	18ad0 <mp_locals_get>
   18c7e:	4603      	mov	r3, r0
   18c80:	63bb      	str	r3, [r7, #56]	; 0x38

    // set new context
    mp_globals_set(mod_globals);
   18c82:	6c78      	ldr	r0, [r7, #68]	; 0x44
   18c84:	f7ff ff4c 	bl	18b20 <mp_globals_set>
    mp_locals_set(mod_globals);
   18c88:	6c78      	ldr	r0, [r7, #68]	; 0x44
   18c8a:	f7ff ff2d 	bl	18ae8 <mp_locals_set>

    nlr_buf_t nlr;
    if (nlr_push(&nlr) == 0) {
   18c8e:	f107 0308 	add.w	r3, r7, #8
   18c92:	4618      	mov	r0, r3
   18c94:	f7e7 fb12 	bl	2bc <nlr_push>
   18c98:	4603      	mov	r3, r0
   18c9a:	2b00      	cmp	r3, #0
   18c9c:	d113      	bne.n	18cc6 <do_execute_raw_code+0x66>
        mp_obj_t module_fun = mp_make_function_from_raw_code(raw_code, MP_OBJ_NULL, MP_OBJ_NULL);
   18c9e:	2200      	movs	r2, #0
   18ca0:	2100      	movs	r1, #0
   18ca2:	6838      	ldr	r0, [r7, #0]
   18ca4:	f7f2 fbe6 	bl	b474 <mp_make_function_from_raw_code>
   18ca8:	6438      	str	r0, [r7, #64]	; 0x40
        mp_call_function_0(module_fun);
   18caa:	6c38      	ldr	r0, [r7, #64]	; 0x40
   18cac:	f7f3 fa0e 	bl	c0cc <mp_call_function_0>

        // finish nlr block, restore context
        nlr_pop();
   18cb0:	f7e7 faf2 	bl	298 <nlr_pop>
        mp_globals_set(old_globals);
   18cb4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   18cb6:	4618      	mov	r0, r3
   18cb8:	f7ff ff32 	bl	18b20 <mp_globals_set>
        mp_locals_set(old_locals);
   18cbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   18cbe:	4618      	mov	r0, r3
   18cc0:	f7ff ff12 	bl	18ae8 <mp_locals_set>
        // exception; restore context and re-raise same exception
        mp_globals_set(old_globals);
        mp_locals_set(old_locals);
        nlr_jump(nlr.ret_val);
    }
}
   18cc4:	e00b      	b.n	18cde <do_execute_raw_code+0x7e>
        mp_globals_set(old_globals);
   18cc6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   18cc8:	4618      	mov	r0, r3
   18cca:	f7ff ff29 	bl	18b20 <mp_globals_set>
        mp_locals_set(old_locals);
   18cce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   18cd0:	4618      	mov	r0, r3
   18cd2:	f7ff ff09 	bl	18ae8 <mp_locals_set>
        nlr_jump(nlr.ret_val);
   18cd6:	68fb      	ldr	r3, [r7, #12]
   18cd8:	4618      	mov	r0, r3
   18cda:	f7e7 fb01 	bl	2e0 <nlr_jump>
}
   18cde:	3748      	adds	r7, #72	; 0x48
   18ce0:	46bd      	mov	sp, r7
   18ce2:	bd80      	pop	{r7, pc}

00018ce4 <do_load>:
#endif

STATIC void do_load(mp_obj_t module_obj, vstr_t *file) {
   18ce4:	b580      	push	{r7, lr}
   18ce6:	b086      	sub	sp, #24
   18ce8:	af00      	add	r7, sp, #0
   18cea:	6078      	str	r0, [r7, #4]
   18cec:	6039      	str	r1, [r7, #0]
    #if MICROPY_MODULE_FROZEN || MICROPY_PERSISTENT_CODE_LOAD || MICROPY_ENABLE_COMPILER
    char *file_str = vstr_null_terminated_str(file);
   18cee:	6838      	ldr	r0, [r7, #0]
   18cf0:	f7e8 fd2b 	bl	174a <vstr_null_terminated_str>
   18cf4:	6178      	str	r0, [r7, #20]

    // If we support frozen modules (either as str or mpy) then try to find the
    // requested filename in the list of frozen module filenames.
    #if MICROPY_MODULE_FROZEN
    void *modref;
    int frozen_type = mp_find_frozen_module(file_str, file->len, &modref);
   18cf6:	683b      	ldr	r3, [r7, #0]
   18cf8:	685b      	ldr	r3, [r3, #4]
   18cfa:	f107 0208 	add.w	r2, r7, #8
   18cfe:	4619      	mov	r1, r3
   18d00:	6978      	ldr	r0, [r7, #20]
   18d02:	f003 ff5b 	bl	1cbbc <mp_find_frozen_module>
   18d06:	6138      	str	r0, [r7, #16]
    #endif

    // If we support frozen mpy modules and we found a corresponding file (and
    // its data) in the list of frozen files, execute it.
    #if MICROPY_MODULE_FROZEN_MPY
    if (frozen_type == MP_FROZEN_MPY) {
   18d08:	693b      	ldr	r3, [r7, #16]
   18d0a:	2b02      	cmp	r3, #2
   18d0c:	d105      	bne.n	18d1a <do_load+0x36>
        do_execute_raw_code(module_obj, modref);
   18d0e:	68bb      	ldr	r3, [r7, #8]
   18d10:	4619      	mov	r1, r3
   18d12:	6878      	ldr	r0, [r7, #4]
   18d14:	f7ff ffa4 	bl	18c60 <do_execute_raw_code>
        return;
   18d18:	e008      	b.n	18d2c <do_load+0x48>
    #endif

    // If we can compile scripts then load the file and compile and execute it.
    #if MICROPY_ENABLE_COMPILER
    {
        mp_lexer_t *lex = mp_lexer_new_from_file(file_str);
   18d1a:	6978      	ldr	r0, [r7, #20]
   18d1c:	f004 f8b4 	bl	1ce88 <mp_lexer_new_from_file>
   18d20:	60f8      	str	r0, [r7, #12]
        do_load_from_lexer(module_obj, lex);
   18d22:	68f9      	ldr	r1, [r7, #12]
   18d24:	6878      	ldr	r0, [r7, #4]
   18d26:	f7ff ff88 	bl	18c3a <do_load_from_lexer>
        return;
   18d2a:	bf00      	nop
    #else

    // If we get here then the file was not frozen and we can't compile scripts.
    mp_raise_msg(&mp_type_ImportError, "script compilation not supported");
    #endif
}
   18d2c:	3718      	adds	r7, #24
   18d2e:	46bd      	mov	sp, r7
   18d30:	bd80      	pop	{r7, pc}

00018d32 <chop_component>:

STATIC void chop_component(const char *start, const char **end) {
   18d32:	b480      	push	{r7}
   18d34:	b085      	sub	sp, #20
   18d36:	af00      	add	r7, sp, #0
   18d38:	6078      	str	r0, [r7, #4]
   18d3a:	6039      	str	r1, [r7, #0]
    const char *p = *end;
   18d3c:	683b      	ldr	r3, [r7, #0]
   18d3e:	681b      	ldr	r3, [r3, #0]
   18d40:	60fb      	str	r3, [r7, #12]
    while (p > start) {
   18d42:	e00a      	b.n	18d5a <chop_component+0x28>
        if (*--p == '.') {
   18d44:	68fb      	ldr	r3, [r7, #12]
   18d46:	3b01      	subs	r3, #1
   18d48:	60fb      	str	r3, [r7, #12]
   18d4a:	68fb      	ldr	r3, [r7, #12]
   18d4c:	781b      	ldrb	r3, [r3, #0]
   18d4e:	2b2e      	cmp	r3, #46	; 0x2e
   18d50:	d103      	bne.n	18d5a <chop_component+0x28>
            *end = p;
   18d52:	683b      	ldr	r3, [r7, #0]
   18d54:	68fa      	ldr	r2, [r7, #12]
   18d56:	601a      	str	r2, [r3, #0]
            return;
   18d58:	e006      	b.n	18d68 <chop_component+0x36>
    while (p > start) {
   18d5a:	68fa      	ldr	r2, [r7, #12]
   18d5c:	687b      	ldr	r3, [r7, #4]
   18d5e:	429a      	cmp	r2, r3
   18d60:	d8f0      	bhi.n	18d44 <chop_component+0x12>
        }
    }
    *end = p;
   18d62:	683b      	ldr	r3, [r7, #0]
   18d64:	68fa      	ldr	r2, [r7, #12]
   18d66:	601a      	str	r2, [r3, #0]
}
   18d68:	3714      	adds	r7, #20
   18d6a:	46bd      	mov	sp, r7
   18d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
   18d70:	4770      	bx	lr

00018d72 <mp_builtin___import__>:

mp_obj_t mp_builtin___import__(size_t n_args, const mp_obj_t *args) {
   18d72:	b590      	push	{r4, r7, lr}
   18d74:	b0e5      	sub	sp, #404	; 0x194
   18d76:	af00      	add	r7, sp, #0
   18d78:	1d3b      	adds	r3, r7, #4
   18d7a:	6018      	str	r0, [r3, #0]
   18d7c:	463b      	mov	r3, r7
   18d7e:	6019      	str	r1, [r3, #0]
#if DEBUG_PRINT
    DEBUG_printf("__import__:\n");
   18d80:	48d2      	ldr	r0, [pc, #840]	; (190cc <mp_builtin___import__+0x35a>)
   18d82:	f003 ff33 	bl	1cbec <DEBUG_printf>
    for (size_t i = 0; i < n_args; i++) {
   18d86:	2300      	movs	r3, #0
   18d88:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   18d8c:	e015      	b.n	18dba <mp_builtin___import__+0x48>
        DEBUG_printf("  ");
   18d8e:	48d0      	ldr	r0, [pc, #832]	; (190d0 <mp_builtin___import__+0x35e>)
   18d90:	f003 ff2c 	bl	1cbec <DEBUG_printf>
        mp_obj_print(args[i], PRINT_REPR);
   18d94:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
   18d98:	009b      	lsls	r3, r3, #2
   18d9a:	463a      	mov	r2, r7
   18d9c:	6812      	ldr	r2, [r2, #0]
   18d9e:	4413      	add	r3, r2
   18da0:	681b      	ldr	r3, [r3, #0]
   18da2:	2101      	movs	r1, #1
   18da4:	4618      	mov	r0, r3
   18da6:	f7f4 ffb5 	bl	dd14 <mp_obj_print>
        DEBUG_printf("\n");
   18daa:	48ca      	ldr	r0, [pc, #808]	; (190d4 <mp_builtin___import__+0x362>)
   18dac:	f003 ff1e 	bl	1cbec <DEBUG_printf>
    for (size_t i = 0; i < n_args; i++) {
   18db0:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
   18db4:	3301      	adds	r3, #1
   18db6:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   18dba:	1d3b      	adds	r3, r7, #4
   18dbc:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
   18dc0:	681b      	ldr	r3, [r3, #0]
   18dc2:	429a      	cmp	r2, r3
   18dc4:	d3e3      	bcc.n	18d8e <mp_builtin___import__+0x1c>
    }
#endif

    mp_obj_t module_name = args[0];
   18dc6:	463b      	mov	r3, r7
   18dc8:	681b      	ldr	r3, [r3, #0]
   18dca:	681b      	ldr	r3, [r3, #0]
   18dcc:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
    mp_obj_t fromtuple = mp_const_none;
   18dd0:	4bc1      	ldr	r3, [pc, #772]	; (190d8 <mp_builtin___import__+0x366>)
   18dd2:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
    mp_int_t level = 0;
   18dd6:	2300      	movs	r3, #0
   18dd8:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
    if (n_args >= 4) {
   18ddc:	1d3b      	adds	r3, r7, #4
   18dde:	681b      	ldr	r3, [r3, #0]
   18de0:	2b03      	cmp	r3, #3
   18de2:	d916      	bls.n	18e12 <mp_builtin___import__+0xa0>
        fromtuple = args[3];
   18de4:	463b      	mov	r3, r7
   18de6:	681b      	ldr	r3, [r3, #0]
   18de8:	68db      	ldr	r3, [r3, #12]
   18dea:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
        if (n_args >= 5) {
   18dee:	1d3b      	adds	r3, r7, #4
   18df0:	681b      	ldr	r3, [r3, #0]
   18df2:	2b04      	cmp	r3, #4
   18df4:	d90d      	bls.n	18e12 <mp_builtin___import__+0xa0>
            level = MP_OBJ_SMALL_INT_VALUE(args[4]);
   18df6:	463b      	mov	r3, r7
   18df8:	681b      	ldr	r3, [r3, #0]
   18dfa:	3310      	adds	r3, #16
   18dfc:	681b      	ldr	r3, [r3, #0]
   18dfe:	105b      	asrs	r3, r3, #1
   18e00:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
            if (level < 0) {
   18e04:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
   18e08:	2b00      	cmp	r3, #0
   18e0a:	da02      	bge.n	18e12 <mp_builtin___import__+0xa0>
                mp_raise_ValueError(NULL);
   18e0c:	2000      	movs	r0, #0
   18e0e:	f7f4 fab2 	bl	d376 <mp_raise_ValueError>
            }
        }
    }

    size_t mod_len;
    const char *mod_str = mp_obj_str_get_data(module_name, &mod_len);
   18e12:	f507 7392 	add.w	r3, r7, #292	; 0x124
   18e16:	4619      	mov	r1, r3
   18e18:	f8d7 0188 	ldr.w	r0, [r7, #392]	; 0x188
   18e1c:	f7fc fe5e 	bl	15adc <mp_obj_str_get_data>
   18e20:	f8c7 017c 	str.w	r0, [r7, #380]	; 0x17c

    if (level != 0) {
   18e24:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
   18e28:	2b00      	cmp	r3, #0
   18e2a:	f000 80f8 	beq.w	1901e <mp_builtin___import__+0x2ac>
        // module name, thus resolving relative import name into absolute.
        // This even appears to be correct per
        // http://legacy.python.org/dev/peps/pep-0328/#relative-imports-and-name
        // "Relative imports use a module's __name__ attribute to determine that
        // module's position in the package hierarchy."
        level--;
   18e2e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
   18e32:	3b01      	subs	r3, #1
   18e34:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
        mp_obj_t this_name_q = mp_obj_dict_get(MP_OBJ_FROM_PTR(mp_globals_get()), MP_OBJ_NEW_QSTR(MP_QSTR___name__));
   18e38:	f7ff fe66 	bl	18b08 <mp_globals_get>
   18e3c:	4603      	mov	r3, r0
   18e3e:	2172      	movs	r1, #114	; 0x72
   18e40:	4618      	mov	r0, r3
   18e42:	f7f5 fedb 	bl	ebfc <mp_obj_dict_get>
   18e46:	f8c7 0160 	str.w	r0, [r7, #352]	; 0x160
        assert(this_name_q != MP_OBJ_NULL);
   18e4a:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
   18e4e:	2b00      	cmp	r3, #0
   18e50:	d106      	bne.n	18e60 <mp_builtin___import__+0xee>
   18e52:	4ba2      	ldr	r3, [pc, #648]	; (190dc <mp_builtin___import__+0x36a>)
   18e54:	4aa2      	ldr	r2, [pc, #648]	; (190e0 <mp_builtin___import__+0x36e>)
   18e56:	f240 111d 	movw	r1, #285	; 0x11d
   18e5a:	48a2      	ldr	r0, [pc, #648]	; (190e4 <mp_builtin___import__+0x372>)
   18e5c:	f004 f840 	bl	1cee0 <__assert_func>
        if (MP_OBJ_QSTR_VALUE(this_name_q) == MP_QSTR___main__) {
            // This is a module run by -m command-line switch, get its real name from backup attribute
            this_name_q = mp_obj_dict_get(MP_OBJ_FROM_PTR(mp_globals_get()), MP_OBJ_NEW_QSTR(MP_QSTR___main__));
        }
        #endif
        mp_map_t *globals_map = &mp_globals_get()->map;
   18e60:	f7ff fe52 	bl	18b08 <mp_globals_get>
   18e64:	4603      	mov	r3, r0
   18e66:	3304      	adds	r3, #4
   18e68:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
        mp_map_elem_t *elem = mp_map_lookup(globals_map, MP_OBJ_NEW_QSTR(MP_QSTR___path__), MP_MAP_LOOKUP);
   18e6c:	2200      	movs	r2, #0
   18e6e:	217e      	movs	r1, #126	; 0x7e
   18e70:	f8d7 015c 	ldr.w	r0, [r7, #348]	; 0x15c
   18e74:	f7f4 fd0c 	bl	d890 <mp_map_lookup>
   18e78:	f8c7 0158 	str.w	r0, [r7, #344]	; 0x158
        bool is_pkg = (elem != NULL);
   18e7c:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
   18e80:	2b00      	cmp	r3, #0
   18e82:	bf14      	ite	ne
   18e84:	2301      	movne	r3, #1
   18e86:	2300      	moveq	r3, #0
   18e88:	f887 3157 	strb.w	r3, [r7, #343]	; 0x157

#if DEBUG_PRINT
        DEBUG_printf("Current module/package: ");
   18e8c:	4896      	ldr	r0, [pc, #600]	; (190e8 <mp_builtin___import__+0x376>)
   18e8e:	f003 fead 	bl	1cbec <DEBUG_printf>
        mp_obj_print(this_name_q, PRINT_REPR);
   18e92:	2101      	movs	r1, #1
   18e94:	f8d7 0160 	ldr.w	r0, [r7, #352]	; 0x160
   18e98:	f7f4 ff3c 	bl	dd14 <mp_obj_print>
        DEBUG_printf(", is_package: %d", is_pkg);
   18e9c:	f897 3157 	ldrb.w	r3, [r7, #343]	; 0x157
   18ea0:	4619      	mov	r1, r3
   18ea2:	4892      	ldr	r0, [pc, #584]	; (190ec <mp_builtin___import__+0x37a>)
   18ea4:	f003 fea2 	bl	1cbec <DEBUG_printf>
        DEBUG_printf("\n");
   18ea8:	488a      	ldr	r0, [pc, #552]	; (190d4 <mp_builtin___import__+0x362>)
   18eaa:	f003 fe9f 	bl	1cbec <DEBUG_printf>
#endif

        size_t this_name_l;
        const char *this_name = mp_obj_str_get_data(this_name_q, &this_name_l);
   18eae:	f107 0310 	add.w	r3, r7, #16
   18eb2:	4619      	mov	r1, r3
   18eb4:	f8d7 0160 	ldr.w	r0, [r7, #352]	; 0x160
   18eb8:	f7fc fe10 	bl	15adc <mp_obj_str_get_data>
   18ebc:	f8c7 0150 	str.w	r0, [r7, #336]	; 0x150

        const char *p = this_name + this_name_l;
   18ec0:	f107 0310 	add.w	r3, r7, #16
   18ec4:	681b      	ldr	r3, [r3, #0]
   18ec6:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
   18eca:	441a      	add	r2, r3
   18ecc:	f107 030c 	add.w	r3, r7, #12
   18ed0:	601a      	str	r2, [r3, #0]
        if (!is_pkg) {
   18ed2:	f897 3157 	ldrb.w	r3, [r7, #343]	; 0x157
   18ed6:	f083 0301 	eor.w	r3, r3, #1
   18eda:	b2db      	uxtb	r3, r3
   18edc:	2b00      	cmp	r3, #0
   18ede:	d00e      	beq.n	18efe <mp_builtin___import__+0x18c>
            // We have module, but relative imports are anchored at package, so
            // go there.
            chop_component(this_name, &p);
   18ee0:	f107 030c 	add.w	r3, r7, #12
   18ee4:	4619      	mov	r1, r3
   18ee6:	f8d7 0150 	ldr.w	r0, [r7, #336]	; 0x150
   18eea:	f7ff ff22 	bl	18d32 <chop_component>
        }

        while (level--) {
   18eee:	e006      	b.n	18efe <mp_builtin___import__+0x18c>
            chop_component(this_name, &p);
   18ef0:	f107 030c 	add.w	r3, r7, #12
   18ef4:	4619      	mov	r1, r3
   18ef6:	f8d7 0150 	ldr.w	r0, [r7, #336]	; 0x150
   18efa:	f7ff ff1a 	bl	18d32 <chop_component>
        while (level--) {
   18efe:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
   18f02:	1e5a      	subs	r2, r3, #1
   18f04:	f8c7 2180 	str.w	r2, [r7, #384]	; 0x180
   18f08:	2b00      	cmp	r3, #0
   18f0a:	d1f1      	bne.n	18ef0 <mp_builtin___import__+0x17e>
        }

        // We must have some component left over to import from
        if (p == this_name) {
   18f0c:	f107 030c 	add.w	r3, r7, #12
   18f10:	681a      	ldr	r2, [r3, #0]
   18f12:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
   18f16:	429a      	cmp	r2, r3
   18f18:	d102      	bne.n	18f20 <mp_builtin___import__+0x1ae>
            mp_raise_ValueError("cannot perform relative import");
   18f1a:	4875      	ldr	r0, [pc, #468]	; (190f0 <mp_builtin___import__+0x37e>)
   18f1c:	f7f4 fa2b 	bl	d376 <mp_raise_ValueError>
        }

        uint new_mod_l = (mod_len == 0 ? (size_t)(p - this_name) : (size_t)(p - this_name) + 1 + mod_len);
   18f20:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
   18f24:	2b00      	cmp	r3, #0
   18f26:	d107      	bne.n	18f38 <mp_builtin___import__+0x1c6>
   18f28:	f107 030c 	add.w	r3, r7, #12
   18f2c:	681b      	ldr	r3, [r3, #0]
   18f2e:	461a      	mov	r2, r3
   18f30:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
   18f34:	1ad3      	subs	r3, r2, r3
   18f36:	e00b      	b.n	18f50 <mp_builtin___import__+0x1de>
   18f38:	f107 030c 	add.w	r3, r7, #12
   18f3c:	681b      	ldr	r3, [r3, #0]
   18f3e:	461a      	mov	r2, r3
   18f40:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
   18f44:	1ad3      	subs	r3, r2, r3
   18f46:	461a      	mov	r2, r3
   18f48:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
   18f4c:	4413      	add	r3, r2
   18f4e:	3301      	adds	r3, #1
   18f50:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
        char *new_mod = mp_local_alloc(new_mod_l);
   18f54:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
   18f58:	3307      	adds	r3, #7
   18f5a:	3307      	adds	r3, #7
   18f5c:	08db      	lsrs	r3, r3, #3
   18f5e:	00db      	lsls	r3, r3, #3
   18f60:	ebad 0d03 	sub.w	sp, sp, r3
   18f64:	466b      	mov	r3, sp
   18f66:	3307      	adds	r3, #7
   18f68:	08db      	lsrs	r3, r3, #3
   18f6a:	00db      	lsls	r3, r3, #3
   18f6c:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
        memcpy(new_mod, this_name, p - this_name);
   18f70:	f107 030c 	add.w	r3, r7, #12
   18f74:	681b      	ldr	r3, [r3, #0]
   18f76:	461a      	mov	r2, r3
   18f78:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
   18f7c:	1ad3      	subs	r3, r2, r3
   18f7e:	461a      	mov	r2, r3
   18f80:	f8d7 1150 	ldr.w	r1, [r7, #336]	; 0x150
   18f84:	f8d7 0148 	ldr.w	r0, [r7, #328]	; 0x148
   18f88:	f005 fad2 	bl	1e530 <memcpy>
        if (mod_len != 0) {
   18f8c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
   18f90:	2b00      	cmp	r3, #0
   18f92:	d01e      	beq.n	18fd2 <mp_builtin___import__+0x260>
            new_mod[p - this_name] = '.';
   18f94:	f107 030c 	add.w	r3, r7, #12
   18f98:	681b      	ldr	r3, [r3, #0]
   18f9a:	461a      	mov	r2, r3
   18f9c:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
   18fa0:	1ad3      	subs	r3, r2, r3
   18fa2:	461a      	mov	r2, r3
   18fa4:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
   18fa8:	4413      	add	r3, r2
   18faa:	222e      	movs	r2, #46	; 0x2e
   18fac:	701a      	strb	r2, [r3, #0]
            memcpy(new_mod + (p - this_name) + 1, mod_str, mod_len);
   18fae:	f107 030c 	add.w	r3, r7, #12
   18fb2:	681b      	ldr	r3, [r3, #0]
   18fb4:	461a      	mov	r2, r3
   18fb6:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
   18fba:	1ad3      	subs	r3, r2, r3
   18fbc:	3301      	adds	r3, #1
   18fbe:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
   18fc2:	4413      	add	r3, r2
   18fc4:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
   18fc8:	f8d7 117c 	ldr.w	r1, [r7, #380]	; 0x17c
   18fcc:	4618      	mov	r0, r3
   18fce:	f005 faaf 	bl	1e530 <memcpy>
        }

        qstr new_mod_q = qstr_from_strn(new_mod, new_mod_l);
   18fd2:	f8d7 114c 	ldr.w	r1, [r7, #332]	; 0x14c
   18fd6:	f8d7 0148 	ldr.w	r0, [r7, #328]	; 0x148
   18fda:	f7e8 f920 	bl	121e <qstr_from_strn>
   18fde:	f8c7 0144 	str.w	r0, [r7, #324]	; 0x144
        mp_local_free(new_mod);
   18fe2:	f8d7 0148 	ldr.w	r0, [r7, #328]	; 0x148
   18fe6:	f7ff fd69 	bl	18abc <mp_local_free>
        DEBUG_printf("Resolved base name for relative import: '%s'\n", qstr_str(new_mod_q));
   18fea:	f8d7 0144 	ldr.w	r0, [r7, #324]	; 0x144
   18fee:	f7e8 f9ef 	bl	13d0 <qstr_str>
   18ff2:	4603      	mov	r3, r0
   18ff4:	4619      	mov	r1, r3
   18ff6:	483f      	ldr	r0, [pc, #252]	; (190f4 <mp_builtin___import__+0x382>)
   18ff8:	f003 fdf8 	bl	1cbec <DEBUG_printf>
        module_name = MP_OBJ_NEW_QSTR(new_mod_q);
   18ffc:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
   19000:	009b      	lsls	r3, r3, #2
   19002:	f043 0302 	orr.w	r3, r3, #2
   19006:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
        mod_str = qstr_str(new_mod_q);
   1900a:	f8d7 0144 	ldr.w	r0, [r7, #324]	; 0x144
   1900e:	f7e8 f9df 	bl	13d0 <qstr_str>
   19012:	f8c7 017c 	str.w	r0, [r7, #380]	; 0x17c
        mod_len = new_mod_l;
   19016:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
   1901a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
    }

    // check if module already exists
    qstr module_name_qstr = mp_obj_str_get_qstr(module_name);
   1901e:	f8d7 0188 	ldr.w	r0, [r7, #392]	; 0x188
   19022:	f7fc fcf5 	bl	15a10 <mp_obj_str_get_qstr>
   19026:	f8c7 0140 	str.w	r0, [r7, #320]	; 0x140
    mp_obj_t module_obj = mp_module_get(module_name_qstr);
   1902a:	f8d7 0140 	ldr.w	r0, [r7, #320]	; 0x140
   1902e:	f7f9 f883 	bl	12138 <mp_module_get>
   19032:	f8c7 0178 	str.w	r0, [r7, #376]	; 0x178
    if (module_obj != MP_OBJ_NULL) {
   19036:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
   1903a:	2b00      	cmp	r3, #0
   1903c:	d02a      	beq.n	19094 <mp_builtin___import__+0x322>
        DEBUG_printf("Module already loaded\n");
   1903e:	482e      	ldr	r0, [pc, #184]	; (190f8 <mp_builtin___import__+0x386>)
   19040:	f003 fdd4 	bl	1cbec <DEBUG_printf>
        // If it's not a package, return module right away
        char *p = strchr(mod_str, '.');
   19044:	212e      	movs	r1, #46	; 0x2e
   19046:	f8d7 017c 	ldr.w	r0, [r7, #380]	; 0x17c
   1904a:	f005 fc9f 	bl	1e98c <strchr>
   1904e:	f8c7 013c 	str.w	r0, [r7, #316]	; 0x13c
        if (p == NULL) {
   19052:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
   19056:	2b00      	cmp	r3, #0
   19058:	d102      	bne.n	19060 <mp_builtin___import__+0x2ee>
            return module_obj;
   1905a:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
   1905e:	e18d      	b.n	1937c <mp_builtin___import__+0x60a>
        }
        // If fromlist is not empty, return leaf module
        if (fromtuple != mp_const_none) {
   19060:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
   19064:	4a1c      	ldr	r2, [pc, #112]	; (190d8 <mp_builtin___import__+0x366>)
   19066:	4293      	cmp	r3, r2
   19068:	d002      	beq.n	19070 <mp_builtin___import__+0x2fe>
            return module_obj;
   1906a:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
   1906e:	e185      	b.n	1937c <mp_builtin___import__+0x60a>
        }
        // Otherwise, we need to return top-level package
        qstr pkg_name = qstr_from_strn(mod_str, p - mod_str);
   19070:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
   19074:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
   19078:	1ad3      	subs	r3, r2, r3
   1907a:	4619      	mov	r1, r3
   1907c:	f8d7 017c 	ldr.w	r0, [r7, #380]	; 0x17c
   19080:	f7e8 f8cd 	bl	121e <qstr_from_strn>
   19084:	f8c7 0138 	str.w	r0, [r7, #312]	; 0x138
        return mp_module_get(pkg_name);
   19088:	f8d7 0138 	ldr.w	r0, [r7, #312]	; 0x138
   1908c:	f7f9 f854 	bl	12138 <mp_module_get>
   19090:	4603      	mov	r3, r0
   19092:	e173      	b.n	1937c <mp_builtin___import__+0x60a>
    }
    DEBUG_printf("Module not yet loaded\n");
   19094:	4819      	ldr	r0, [pc, #100]	; (190fc <mp_builtin___import__+0x38a>)
   19096:	f003 fda9 	bl	1cbec <DEBUG_printf>

    uint last = 0;
   1909a:	2300      	movs	r3, #0
   1909c:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
    VSTR_FIXED(path, MICROPY_ALLOC_PATH_MAX)
   190a0:	f107 0214 	add.w	r2, r7, #20
   190a4:	f507 738a 	add.w	r3, r7, #276	; 0x114
   190a8:	f44f 7180 	mov.w	r1, #256	; 0x100
   190ac:	4618      	mov	r0, r3
   190ae:	f7e8 fa48 	bl	1542 <vstr_init_fixed_buf>
    module_obj = MP_OBJ_NULL;
   190b2:	2300      	movs	r3, #0
   190b4:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
    mp_obj_t top_module_obj = MP_OBJ_NULL;
   190b8:	2300      	movs	r3, #0
   190ba:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
    mp_obj_t outer_module_obj = MP_OBJ_NULL;
   190be:	2300      	movs	r3, #0
   190c0:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
    uint i;
    for (i = 1; i <= mod_len; i++) {
   190c4:	2301      	movs	r3, #1
   190c6:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   190ca:	e146      	b.n	1935a <mp_builtin___import__+0x5e8>
   190cc:	00026244 	.word	0x00026244
   190d0:	00026254 	.word	0x00026254
   190d4:	00026258 	.word	0x00026258
   190d8:	0002511c 	.word	0x0002511c
   190dc:	0002625c 	.word	0x0002625c
   190e0:	000263c4 	.word	0x000263c4
   190e4:	00026278 	.word	0x00026278
   190e8:	00026294 	.word	0x00026294
   190ec:	000262b0 	.word	0x000262b0
   190f0:	000262c4 	.word	0x000262c4
   190f4:	000262e4 	.word	0x000262e4
   190f8:	00026314 	.word	0x00026314
   190fc:	0002632c 	.word	0x0002632c
        if (i == mod_len || mod_str[i] == '.') {
   19100:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
   19104:	f8d7 2168 	ldr.w	r2, [r7, #360]	; 0x168
   19108:	429a      	cmp	r2, r3
   1910a:	d008      	beq.n	1911e <mp_builtin___import__+0x3ac>
   1910c:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
   19110:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
   19114:	4413      	add	r3, r2
   19116:	781b      	ldrb	r3, [r3, #0]
   19118:	2b2e      	cmp	r3, #46	; 0x2e
   1911a:	f040 8119 	bne.w	19350 <mp_builtin___import__+0x5de>
            // create a qstr for the module name up to this depth
            qstr mod_name = qstr_from_strn(mod_str, i);
   1911e:	f8d7 1168 	ldr.w	r1, [r7, #360]	; 0x168
   19122:	f8d7 017c 	ldr.w	r0, [r7, #380]	; 0x17c
   19126:	f7e8 f87a 	bl	121e <qstr_from_strn>
   1912a:	f8c7 0134 	str.w	r0, [r7, #308]	; 0x134
            DEBUG_printf("Processing module: %s\n", qstr_str(mod_name));
   1912e:	f8d7 0134 	ldr.w	r0, [r7, #308]	; 0x134
   19132:	f7e8 f94d 	bl	13d0 <qstr_str>
   19136:	4603      	mov	r3, r0
   19138:	4619      	mov	r1, r3
   1913a:	4893      	ldr	r0, [pc, #588]	; (19388 <mp_builtin___import__+0x616>)
   1913c:	f003 fd56 	bl	1cbec <DEBUG_printf>
            DEBUG_printf("Previous path: =%.*s=\n", vstr_len(&path), vstr_str(&path));
   19140:	f507 738a 	add.w	r3, r7, #276	; 0x114
   19144:	4618      	mov	r0, r3
   19146:	f7ff fca1 	bl	18a8c <vstr_len>
   1914a:	4604      	mov	r4, r0
   1914c:	f507 738a 	add.w	r3, r7, #276	; 0x114
   19150:	4618      	mov	r0, r3
   19152:	f7ff fc8f 	bl	18a74 <vstr_str>
   19156:	4603      	mov	r3, r0
   19158:	461a      	mov	r2, r3
   1915a:	4621      	mov	r1, r4
   1915c:	488b      	ldr	r0, [pc, #556]	; (1938c <mp_builtin___import__+0x61a>)
   1915e:	f003 fd45 	bl	1cbec <DEBUG_printf>

            // find the file corresponding to the module name
            mp_import_stat_t stat;
            if (vstr_len(&path) == 0) {
   19162:	f507 738a 	add.w	r3, r7, #276	; 0x114
   19166:	4618      	mov	r0, r3
   19168:	f7ff fc90 	bl	18a8c <vstr_len>
   1916c:	4603      	mov	r3, r0
   1916e:	2b00      	cmp	r3, #0
   19170:	d10b      	bne.n	1918a <mp_builtin___import__+0x418>
                // first module in the dotted-name; search for a directory or file
                stat = find_file(mod_str, i, &path);
   19172:	f507 738a 	add.w	r3, r7, #276	; 0x114
   19176:	461a      	mov	r2, r3
   19178:	f8d7 1168 	ldr.w	r1, [r7, #360]	; 0x168
   1917c:	f8d7 017c 	ldr.w	r0, [r7, #380]	; 0x17c
   19180:	f7ff fd48 	bl	18c14 <find_file>
   19184:	f8c7 0164 	str.w	r0, [r7, #356]	; 0x164
   19188:	e01b      	b.n	191c2 <mp_builtin___import__+0x450>
            } else {
                // latter module in the dotted-name; append to path
                vstr_add_char(&path, PATH_SEP_CHAR);
   1918a:	f507 738a 	add.w	r3, r7, #276	; 0x114
   1918e:	212f      	movs	r1, #47	; 0x2f
   19190:	4618      	mov	r0, r3
   19192:	f7e8 fb07 	bl	17a4 <vstr_add_char>
                vstr_add_strn(&path, mod_str + last, i - last);
   19196:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
   1919a:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
   1919e:	18d1      	adds	r1, r2, r3
   191a0:	f8d7 2168 	ldr.w	r2, [r7, #360]	; 0x168
   191a4:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
   191a8:	1ad2      	subs	r2, r2, r3
   191aa:	f507 738a 	add.w	r3, r7, #276	; 0x114
   191ae:	4618      	mov	r0, r3
   191b0:	f7e8 fb19 	bl	17e6 <vstr_add_strn>
                stat = stat_dir_or_file(&path);
   191b4:	f507 738a 	add.w	r3, r7, #276	; 0x114
   191b8:	4618      	mov	r0, r3
   191ba:	f7ff fd01 	bl	18bc0 <stat_dir_or_file>
   191be:	f8c7 0164 	str.w	r0, [r7, #356]	; 0x164
            }
            DEBUG_printf("Current path: %.*s\n", vstr_len(&path), vstr_str(&path));
   191c2:	f507 738a 	add.w	r3, r7, #276	; 0x114
   191c6:	4618      	mov	r0, r3
   191c8:	f7ff fc60 	bl	18a8c <vstr_len>
   191cc:	4604      	mov	r4, r0
   191ce:	f507 738a 	add.w	r3, r7, #276	; 0x114
   191d2:	4618      	mov	r0, r3
   191d4:	f7ff fc4e 	bl	18a74 <vstr_str>
   191d8:	4603      	mov	r3, r0
   191da:	461a      	mov	r2, r3
   191dc:	4621      	mov	r1, r4
   191de:	486c      	ldr	r0, [pc, #432]	; (19390 <mp_builtin___import__+0x61e>)
   191e0:	f003 fd04 	bl	1cbec <DEBUG_printf>

            if (stat == MP_IMPORT_STAT_NO_EXIST) {
   191e4:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
   191e8:	2b00      	cmp	r3, #0
   191ea:	d103      	bne.n	191f4 <mp_builtin___import__+0x482>
                #else
                {
                #endif
                    // couldn't find the file, so fail
                    if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
                        mp_raise_msg(&mp_type_ImportError, "module not found");
   191ec:	4969      	ldr	r1, [pc, #420]	; (19394 <mp_builtin___import__+0x622>)
   191ee:	486a      	ldr	r0, [pc, #424]	; (19398 <mp_builtin___import__+0x626>)
   191f0:	f7f4 f8aa 	bl	d348 <mp_raise_msg>
                            "no module named '%q'", mod_name));
                    }
                }
            } else {
                // found the file, so get the module
                module_obj = mp_module_get(mod_name);
   191f4:	f8d7 0134 	ldr.w	r0, [r7, #308]	; 0x134
   191f8:	f7f8 ff9e 	bl	12138 <mp_module_get>
   191fc:	f8c7 0178 	str.w	r0, [r7, #376]	; 0x178
            }

            if (module_obj == MP_OBJ_NULL) {
   19200:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
   19204:	2b00      	cmp	r3, #0
   19206:	d177      	bne.n	192f8 <mp_builtin___import__+0x586>
                // module not already loaded, so load it!

                module_obj = mp_obj_new_module(mod_name);
   19208:	f8d7 0134 	ldr.w	r0, [r7, #308]	; 0x134
   1920c:	f7f8 ff5a 	bl	120c4 <mp_obj_new_module>
   19210:	f8c7 0178 	str.w	r0, [r7, #376]	; 0x178
                // for *modules* however - packages never have their names
                // replaced, instead they're -m'ed using a special __main__
                // submodule in them. (This all apparently is done to not
                // touch package name itself, which is important for future
                // imports).
                if (i == mod_len && fromtuple == mp_const_false && stat != MP_IMPORT_STAT_DIR) {
   19214:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
   19218:	f8d7 2168 	ldr.w	r2, [r7, #360]	; 0x168
   1921c:	429a      	cmp	r2, r3
   1921e:	d114      	bne.n	1924a <mp_builtin___import__+0x4d8>
   19220:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
   19224:	4a5d      	ldr	r2, [pc, #372]	; (1939c <mp_builtin___import__+0x62a>)
   19226:	4293      	cmp	r3, r2
   19228:	d10f      	bne.n	1924a <mp_builtin___import__+0x4d8>
   1922a:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
   1922e:	2b01      	cmp	r3, #1
   19230:	d00b      	beq.n	1924a <mp_builtin___import__+0x4d8>
                    mp_obj_module_t *o = MP_OBJ_TO_PTR(module_obj);
   19232:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
   19236:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
                    mp_obj_dict_store(MP_OBJ_FROM_PTR(o->globals), MP_OBJ_NEW_QSTR(MP_QSTR___name__), MP_OBJ_NEW_QSTR(MP_QSTR___main__));
   1923a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
   1923e:	685b      	ldr	r3, [r3, #4]
   19240:	226a      	movs	r2, #106	; 0x6a
   19242:	2172      	movs	r1, #114	; 0x72
   19244:	4618      	mov	r0, r3
   19246:	f7f6 f9ca 	bl	f5de <mp_obj_dict_store>
                    // Store real name in "__main__" attribute. Chosen semi-randonly, to reuse existing qstr's.
                    mp_obj_dict_store(MP_OBJ_FROM_PTR(o->globals), MP_OBJ_NEW_QSTR(MP_QSTR___main__), MP_OBJ_NEW_QSTR(mod_name));
                    #endif
                }

                if (stat == MP_IMPORT_STAT_DIR) {
   1924a:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
   1924e:	2b01      	cmp	r3, #1
   19250:	d14b      	bne.n	192ea <mp_builtin___import__+0x578>
                    DEBUG_printf("%.*s is dir\n", vstr_len(&path), vstr_str(&path));
   19252:	f507 738a 	add.w	r3, r7, #276	; 0x114
   19256:	4618      	mov	r0, r3
   19258:	f7ff fc18 	bl	18a8c <vstr_len>
   1925c:	4604      	mov	r4, r0
   1925e:	f507 738a 	add.w	r3, r7, #276	; 0x114
   19262:	4618      	mov	r0, r3
   19264:	f7ff fc06 	bl	18a74 <vstr_str>
   19268:	4603      	mov	r3, r0
   1926a:	461a      	mov	r2, r3
   1926c:	4621      	mov	r1, r4
   1926e:	484c      	ldr	r0, [pc, #304]	; (193a0 <mp_builtin___import__+0x62e>)
   19270:	f003 fcbc 	bl	1cbec <DEBUG_printf>
                    // https://docs.python.org/3/reference/import.html
                    // "Specifically, any module that contains a __path__ attribute is considered a package."
                    mp_store_attr(module_obj, MP_QSTR___path__, mp_obj_new_str(vstr_str(&path), vstr_len(&path)));
   19274:	f507 738a 	add.w	r3, r7, #276	; 0x114
   19278:	4618      	mov	r0, r3
   1927a:	f7ff fbfb 	bl	18a74 <vstr_str>
   1927e:	4604      	mov	r4, r0
   19280:	f507 738a 	add.w	r3, r7, #276	; 0x114
   19284:	4618      	mov	r0, r3
   19286:	f7ff fc01 	bl	18a8c <vstr_len>
   1928a:	4603      	mov	r3, r0
   1928c:	4619      	mov	r1, r3
   1928e:	4620      	mov	r0, r4
   19290:	f7fc fac6 	bl	15820 <mp_obj_new_str>
   19294:	4603      	mov	r3, r0
   19296:	461a      	mov	r2, r3
   19298:	211f      	movs	r1, #31
   1929a:	f8d7 0178 	ldr.w	r0, [r7, #376]	; 0x178
   1929e:	f7f3 fcdf 	bl	cc60 <mp_store_attr>
                    size_t orig_path_len = path.len;
   192a2:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
   192a6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
                    vstr_add_char(&path, PATH_SEP_CHAR);
   192aa:	f507 738a 	add.w	r3, r7, #276	; 0x114
   192ae:	212f      	movs	r1, #47	; 0x2f
   192b0:	4618      	mov	r0, r3
   192b2:	f7e8 fa77 	bl	17a4 <vstr_add_char>
                    vstr_add_str(&path, "__init__.py");
   192b6:	f507 738a 	add.w	r3, r7, #276	; 0x114
   192ba:	493a      	ldr	r1, [pc, #232]	; (193a4 <mp_builtin___import__+0x632>)
   192bc:	4618      	mov	r0, r3
   192be:	f7e8 fa80 	bl	17c2 <vstr_add_str>
                    if (stat_file_py_or_mpy(&path) != MP_IMPORT_STAT_FILE) {
   192c2:	f507 738a 	add.w	r3, r7, #276	; 0x114
   192c6:	4618      	mov	r0, r3
   192c8:	f7ff fc64 	bl	18b94 <stat_file_py_or_mpy>
   192cc:	4603      	mov	r3, r0
   192ce:	2b02      	cmp	r3, #2
   192d0:	d106      	bne.n	192e0 <mp_builtin___import__+0x56e>
                        //mp_warning("%s is imported as namespace package", vstr_str(&path));
                    } else {
                        do_load(module_obj, &path);
   192d2:	f507 738a 	add.w	r3, r7, #276	; 0x114
   192d6:	4619      	mov	r1, r3
   192d8:	f8d7 0178 	ldr.w	r0, [r7, #376]	; 0x178
   192dc:	f7ff fd02 	bl	18ce4 <do_load>
                    }
                    path.len = orig_path_len;
   192e0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
   192e4:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
   192e8:	e006      	b.n	192f8 <mp_builtin___import__+0x586>
                } else { // MP_IMPORT_STAT_FILE
                    do_load(module_obj, &path);
   192ea:	f507 738a 	add.w	r3, r7, #276	; 0x114
   192ee:	4619      	mov	r1, r3
   192f0:	f8d7 0178 	ldr.w	r0, [r7, #376]	; 0x178
   192f4:	f7ff fcf6 	bl	18ce4 <do_load>
                    // remaining components then it's an ImportError because the current path
                    // (the module that was just loaded) is not a package.  This will be caught
                    // on the next iteration because the file will not exist.
                }
            }
            if (outer_module_obj != MP_OBJ_NULL) {
   192f8:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
   192fc:	2b00      	cmp	r3, #0
   192fe:	d016      	beq.n	1932e <mp_builtin___import__+0x5bc>
                qstr s = qstr_from_strn(mod_str + last, i - last);
   19300:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
   19304:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
   19308:	18d0      	adds	r0, r2, r3
   1930a:	f8d7 2168 	ldr.w	r2, [r7, #360]	; 0x168
   1930e:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
   19312:	1ad3      	subs	r3, r2, r3
   19314:	4619      	mov	r1, r3
   19316:	f7e7 ff82 	bl	121e <qstr_from_strn>
   1931a:	f8c7 0128 	str.w	r0, [r7, #296]	; 0x128
                mp_store_attr(outer_module_obj, s, module_obj);
   1931e:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
   19322:	f8d7 1128 	ldr.w	r1, [r7, #296]	; 0x128
   19326:	f8d7 016c 	ldr.w	r0, [r7, #364]	; 0x16c
   1932a:	f7f3 fc99 	bl	cc60 <mp_store_attr>
            }
            outer_module_obj = module_obj;
   1932e:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
   19332:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
            if (top_module_obj == MP_OBJ_NULL) {
   19336:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
   1933a:	2b00      	cmp	r3, #0
   1933c:	d103      	bne.n	19346 <mp_builtin___import__+0x5d4>
                top_module_obj = module_obj;
   1933e:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
   19342:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
            }
            last = i + 1;
   19346:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
   1934a:	3301      	adds	r3, #1
   1934c:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
    for (i = 1; i <= mod_len; i++) {
   19350:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
   19354:	3301      	adds	r3, #1
   19356:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   1935a:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
   1935e:	f8d7 2168 	ldr.w	r2, [r7, #360]	; 0x168
   19362:	429a      	cmp	r2, r3
   19364:	f67f aecc 	bls.w	19100 <mp_builtin___import__+0x38e>
        }
    }

    // If fromlist is not empty, return leaf module
    if (fromtuple != mp_const_none) {
   19368:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
   1936c:	4a0e      	ldr	r2, [pc, #56]	; (193a8 <mp_builtin___import__+0x636>)
   1936e:	4293      	cmp	r3, r2
   19370:	d002      	beq.n	19378 <mp_builtin___import__+0x606>
        return module_obj;
   19372:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
   19376:	e001      	b.n	1937c <mp_builtin___import__+0x60a>
    }
    // Otherwise, we need to return top-level package
    return top_module_obj;
   19378:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
}
   1937c:	4618      	mov	r0, r3
   1937e:	f507 77ca 	add.w	r7, r7, #404	; 0x194
   19382:	46bd      	mov	sp, r7
   19384:	bd90      	pop	{r4, r7, pc}
   19386:	bf00      	nop
   19388:	00026344 	.word	0x00026344
   1938c:	0002635c 	.word	0x0002635c
   19390:	00026374 	.word	0x00026374
   19394:	00026388 	.word	0x00026388
   19398:	000240e0 	.word	0x000240e0
   1939c:	00023860 	.word	0x00023860
   193a0:	0002639c 	.word	0x0002639c
   193a4:	000263ac 	.word	0x000263ac
   193a8:	0002511c 	.word	0x0002511c

000193ac <MP_OBJ_IS_OBJ>:
    { return ((((mp_int_t)(o)) & 3) == 0); }
   193ac:	b480      	push	{r7}
   193ae:	b083      	sub	sp, #12
   193b0:	af00      	add	r7, sp, #0
   193b2:	6078      	str	r0, [r7, #4]
   193b4:	687b      	ldr	r3, [r7, #4]
   193b6:	f003 0303 	and.w	r3, r3, #3
   193ba:	2b00      	cmp	r3, #0
   193bc:	bf0c      	ite	eq
   193be:	2301      	moveq	r3, #1
   193c0:	2300      	movne	r3, #0
   193c2:	b2db      	uxtb	r3, r3
   193c4:	4618      	mov	r0, r3
   193c6:	370c      	adds	r7, #12
   193c8:	46bd      	mov	sp, r7
   193ca:	f85d 7b04 	ldr.w	r7, [sp], #4
   193ce:	4770      	bx	lr

000193d0 <mp_locals_get>:
static inline mp_obj_dict_t *mp_locals_get(void) { return MP_STATE_THREAD(dict_locals); }
   193d0:	b480      	push	{r7}
   193d2:	af00      	add	r7, sp, #0
   193d4:	4b03      	ldr	r3, [pc, #12]	; (193e4 <mp_locals_get+0x14>)
   193d6:	685b      	ldr	r3, [r3, #4]
   193d8:	4618      	mov	r0, r3
   193da:	46bd      	mov	sp, r7
   193dc:	f85d 7b04 	ldr.w	r7, [sp], #4
   193e0:	4770      	bx	lr
   193e2:	bf00      	nop
   193e4:	20001248 	.word	0x20001248

000193e8 <mp_globals_get>:
static inline mp_obj_dict_t *mp_globals_get(void) { return MP_STATE_THREAD(dict_globals); }
   193e8:	b480      	push	{r7}
   193ea:	af00      	add	r7, sp, #0
   193ec:	4b03      	ldr	r3, [pc, #12]	; (193fc <mp_globals_get+0x14>)
   193ee:	689b      	ldr	r3, [r3, #8]
   193f0:	4618      	mov	r0, r3
   193f2:	46bd      	mov	sp, r7
   193f4:	f85d 7b04 	ldr.w	r7, [sp], #4
   193f8:	4770      	bx	lr
   193fa:	bf00      	nop
   193fc:	20001248 	.word	0x20001248

00019400 <eval_exec_helper>:

#endif // MICROPY_PY_BUILTINS_COMPILE

#if MICROPY_PY_BUILTINS_EVAL_EXEC

STATIC mp_obj_t eval_exec_helper(size_t n_args, const mp_obj_t *args, mp_parse_input_kind_t parse_input_kind) {
   19400:	b580      	push	{r7, lr}
   19402:	b08a      	sub	sp, #40	; 0x28
   19404:	af00      	add	r7, sp, #0
   19406:	60f8      	str	r0, [r7, #12]
   19408:	60b9      	str	r1, [r7, #8]
   1940a:	607a      	str	r2, [r7, #4]
    // work out the context
    mp_obj_dict_t *globals = mp_globals_get();
   1940c:	f7ff ffec 	bl	193e8 <mp_globals_get>
   19410:	6278      	str	r0, [r7, #36]	; 0x24
    mp_obj_dict_t *locals = mp_locals_get();
   19412:	f7ff ffdd 	bl	193d0 <mp_locals_get>
   19416:	6238      	str	r0, [r7, #32]
    for (size_t i = 1; i < 3 && i < n_args; ++i) {
   19418:	2301      	movs	r3, #1
   1941a:	61fb      	str	r3, [r7, #28]
   1941c:	e02f      	b.n	1947e <eval_exec_helper+0x7e>
        if (args[i] != mp_const_none) {
   1941e:	69fb      	ldr	r3, [r7, #28]
   19420:	009b      	lsls	r3, r3, #2
   19422:	68ba      	ldr	r2, [r7, #8]
   19424:	4413      	add	r3, r2
   19426:	681b      	ldr	r3, [r3, #0]
   19428:	4a26      	ldr	r2, [pc, #152]	; (194c4 <eval_exec_helper+0xc4>)
   1942a:	4293      	cmp	r3, r2
   1942c:	d024      	beq.n	19478 <eval_exec_helper+0x78>
            if (!MP_OBJ_IS_TYPE(args[i], &mp_type_dict)) {
   1942e:	69fb      	ldr	r3, [r7, #28]
   19430:	009b      	lsls	r3, r3, #2
   19432:	68ba      	ldr	r2, [r7, #8]
   19434:	4413      	add	r3, r2
   19436:	681b      	ldr	r3, [r3, #0]
   19438:	4618      	mov	r0, r3
   1943a:	f7ff ffb7 	bl	193ac <MP_OBJ_IS_OBJ>
   1943e:	4603      	mov	r3, r0
   19440:	f083 0301 	eor.w	r3, r3, #1
   19444:	b2db      	uxtb	r3, r3
   19446:	2b00      	cmp	r3, #0
   19448:	d108      	bne.n	1945c <eval_exec_helper+0x5c>
   1944a:	69fb      	ldr	r3, [r7, #28]
   1944c:	009b      	lsls	r3, r3, #2
   1944e:	68ba      	ldr	r2, [r7, #8]
   19450:	4413      	add	r3, r2
   19452:	681b      	ldr	r3, [r3, #0]
   19454:	681b      	ldr	r3, [r3, #0]
   19456:	4a1c      	ldr	r2, [pc, #112]	; (194c8 <eval_exec_helper+0xc8>)
   19458:	4293      	cmp	r3, r2
   1945a:	d002      	beq.n	19462 <eval_exec_helper+0x62>
                mp_raise_TypeError(NULL);
   1945c:	2000      	movs	r0, #0
   1945e:	f7f3 ff95 	bl	d38c <mp_raise_TypeError>
            }
            locals = MP_OBJ_TO_PTR(args[i]);
   19462:	69fb      	ldr	r3, [r7, #28]
   19464:	009b      	lsls	r3, r3, #2
   19466:	68ba      	ldr	r2, [r7, #8]
   19468:	4413      	add	r3, r2
   1946a:	681b      	ldr	r3, [r3, #0]
   1946c:	623b      	str	r3, [r7, #32]
            if (i == 1) {
   1946e:	69fb      	ldr	r3, [r7, #28]
   19470:	2b01      	cmp	r3, #1
   19472:	d101      	bne.n	19478 <eval_exec_helper+0x78>
                globals = locals;
   19474:	6a3b      	ldr	r3, [r7, #32]
   19476:	627b      	str	r3, [r7, #36]	; 0x24
    for (size_t i = 1; i < 3 && i < n_args; ++i) {
   19478:	69fb      	ldr	r3, [r7, #28]
   1947a:	3301      	adds	r3, #1
   1947c:	61fb      	str	r3, [r7, #28]
   1947e:	69fb      	ldr	r3, [r7, #28]
   19480:	2b02      	cmp	r3, #2
   19482:	d803      	bhi.n	1948c <eval_exec_helper+0x8c>
   19484:	69fa      	ldr	r2, [r7, #28]
   19486:	68fb      	ldr	r3, [r7, #12]
   19488:	429a      	cmp	r2, r3
   1948a:	d3c8      	bcc.n	1941e <eval_exec_helper+0x1e>
        return code_execute(MP_OBJ_TO_PTR(args[0]), globals, locals);
    }
    #endif

    size_t str_len;
    const char *str = mp_obj_str_get_data(args[0], &str_len);
   1948c:	68bb      	ldr	r3, [r7, #8]
   1948e:	681b      	ldr	r3, [r3, #0]
   19490:	f107 0210 	add.w	r2, r7, #16
   19494:	4611      	mov	r1, r2
   19496:	4618      	mov	r0, r3
   19498:	f7fc fb20 	bl	15adc <mp_obj_str_get_data>
   1949c:	61b8      	str	r0, [r7, #24]
    mp_lexer_t *lex;
    if (MICROPY_PY_BUILTINS_EXECFILE && parse_input_kind == MP_PARSE_SINGLE_INPUT) {
        lex = mp_lexer_new_from_file(str);
        parse_input_kind = MP_PARSE_FILE_INPUT;
    } else {
        lex = mp_lexer_new_from_str_len(MP_QSTR__lt_string_gt_, str, str_len, 0);
   1949e:	693a      	ldr	r2, [r7, #16]
   194a0:	2300      	movs	r3, #0
   194a2:	69b9      	ldr	r1, [r7, #24]
   194a4:	2036      	movs	r0, #54	; 0x36
   194a6:	f7ea fa24 	bl	38f2 <mp_lexer_new_from_str_len>
   194aa:	6178      	str	r0, [r7, #20]
    }

    return mp_parse_compile_execute(lex, parse_input_kind, globals, locals);
   194ac:	6a3b      	ldr	r3, [r7, #32]
   194ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   194b0:	6879      	ldr	r1, [r7, #4]
   194b2:	6978      	ldr	r0, [r7, #20]
   194b4:	f7f3 fed6 	bl	d264 <mp_parse_compile_execute>
   194b8:	4603      	mov	r3, r0
}
   194ba:	4618      	mov	r0, r3
   194bc:	3728      	adds	r7, #40	; 0x28
   194be:	46bd      	mov	sp, r7
   194c0:	bd80      	pop	{r7, pc}
   194c2:	bf00      	nop
   194c4:	0002511c 	.word	0x0002511c
   194c8:	00023d0c 	.word	0x00023d0c

000194cc <mp_builtin_eval>:

STATIC mp_obj_t mp_builtin_eval(size_t n_args, const mp_obj_t *args) {
   194cc:	b580      	push	{r7, lr}
   194ce:	b082      	sub	sp, #8
   194d0:	af00      	add	r7, sp, #0
   194d2:	6078      	str	r0, [r7, #4]
   194d4:	6039      	str	r1, [r7, #0]
    return eval_exec_helper(n_args, args, MP_PARSE_EVAL_INPUT);
   194d6:	2202      	movs	r2, #2
   194d8:	6839      	ldr	r1, [r7, #0]
   194da:	6878      	ldr	r0, [r7, #4]
   194dc:	f7ff ff90 	bl	19400 <eval_exec_helper>
   194e0:	4603      	mov	r3, r0
}
   194e2:	4618      	mov	r0, r3
   194e4:	3708      	adds	r7, #8
   194e6:	46bd      	mov	sp, r7
   194e8:	bd80      	pop	{r7, pc}

000194ea <mp_builtin_exec>:
MP_DEFINE_CONST_FUN_OBJ_VAR_BETWEEN(mp_builtin_eval_obj, 1, 3, mp_builtin_eval);

STATIC mp_obj_t mp_builtin_exec(size_t n_args, const mp_obj_t *args) {
   194ea:	b580      	push	{r7, lr}
   194ec:	b082      	sub	sp, #8
   194ee:	af00      	add	r7, sp, #0
   194f0:	6078      	str	r0, [r7, #4]
   194f2:	6039      	str	r1, [r7, #0]
    return eval_exec_helper(n_args, args, MP_PARSE_FILE_INPUT);
   194f4:	2201      	movs	r2, #1
   194f6:	6839      	ldr	r1, [r7, #0]
   194f8:	6878      	ldr	r0, [r7, #4]
   194fa:	f7ff ff81 	bl	19400 <eval_exec_helper>
   194fe:	4603      	mov	r3, r0
}
   19500:	4618      	mov	r0, r3
   19502:	3708      	adds	r7, #8
   19504:	46bd      	mov	sp, r7
   19506:	bd80      	pop	{r7, pc}

00019508 <MP_OBJ_IS_SMALL_INT>:
    { return ((((mp_int_t)(o)) & 1) != 0); }
   19508:	b480      	push	{r7}
   1950a:	b083      	sub	sp, #12
   1950c:	af00      	add	r7, sp, #0
   1950e:	6078      	str	r0, [r7, #4]
   19510:	687b      	ldr	r3, [r7, #4]
   19512:	f003 0301 	and.w	r3, r3, #1
   19516:	2b00      	cmp	r3, #0
   19518:	bf14      	ite	ne
   1951a:	2301      	movne	r3, #1
   1951c:	2300      	moveq	r3, #0
   1951e:	b2db      	uxtb	r3, r3
   19520:	4618      	mov	r0, r3
   19522:	370c      	adds	r7, #12
   19524:	46bd      	mov	sp, r7
   19526:	f85d 7b04 	ldr.w	r7, [sp], #4
   1952a:	4770      	bx	lr

0001952c <MP_OBJ_IS_OBJ>:
    { return ((((mp_int_t)(o)) & 3) == 0); }
   1952c:	b480      	push	{r7}
   1952e:	b083      	sub	sp, #12
   19530:	af00      	add	r7, sp, #0
   19532:	6078      	str	r0, [r7, #4]
   19534:	687b      	ldr	r3, [r7, #4]
   19536:	f003 0303 	and.w	r3, r3, #3
   1953a:	2b00      	cmp	r3, #0
   1953c:	bf0c      	ite	eq
   1953e:	2301      	moveq	r3, #1
   19540:	2300      	movne	r3, #0
   19542:	b2db      	uxtb	r3, r3
   19544:	4618      	mov	r0, r3
   19546:	370c      	adds	r7, #12
   19548:	46bd      	mov	sp, r7
   1954a:	f85d 7b04 	ldr.w	r7, [sp], #4
   1954e:	4770      	bx	lr

00019550 <MP_MAP_SLOT_IS_FILLED>:
static inline bool MP_MAP_SLOT_IS_FILLED(const mp_map_t *map, size_t pos) { return ((map)->table[pos].key != MP_OBJ_NULL && (map)->table[pos].key != MP_OBJ_SENTINEL); }
   19550:	b480      	push	{r7}
   19552:	b083      	sub	sp, #12
   19554:	af00      	add	r7, sp, #0
   19556:	6078      	str	r0, [r7, #4]
   19558:	6039      	str	r1, [r7, #0]
   1955a:	687b      	ldr	r3, [r7, #4]
   1955c:	689a      	ldr	r2, [r3, #8]
   1955e:	683b      	ldr	r3, [r7, #0]
   19560:	00db      	lsls	r3, r3, #3
   19562:	4413      	add	r3, r2
   19564:	681b      	ldr	r3, [r3, #0]
   19566:	2b00      	cmp	r3, #0
   19568:	d009      	beq.n	1957e <MP_MAP_SLOT_IS_FILLED+0x2e>
   1956a:	687b      	ldr	r3, [r7, #4]
   1956c:	689a      	ldr	r2, [r3, #8]
   1956e:	683b      	ldr	r3, [r7, #0]
   19570:	00db      	lsls	r3, r3, #3
   19572:	4413      	add	r3, r2
   19574:	681b      	ldr	r3, [r3, #0]
   19576:	2b08      	cmp	r3, #8
   19578:	d001      	beq.n	1957e <MP_MAP_SLOT_IS_FILLED+0x2e>
   1957a:	2301      	movs	r3, #1
   1957c:	e000      	b.n	19580 <MP_MAP_SLOT_IS_FILLED+0x30>
   1957e:	2300      	movs	r3, #0
   19580:	f003 0301 	and.w	r3, r3, #1
   19584:	b2db      	uxtb	r3, r3
   19586:	4618      	mov	r0, r3
   19588:	370c      	adds	r7, #12
   1958a:	46bd      	mov	sp, r7
   1958c:	f85d 7b04 	ldr.w	r7, [sp], #4
   19590:	4770      	bx	lr

00019592 <mp_obj_new_bool>:
static inline mp_obj_t mp_obj_new_bool(mp_int_t x) { return x ? mp_const_true : mp_const_false; }
   19592:	b480      	push	{r7}
   19594:	b083      	sub	sp, #12
   19596:	af00      	add	r7, sp, #0
   19598:	6078      	str	r0, [r7, #4]
   1959a:	687b      	ldr	r3, [r7, #4]
   1959c:	2b00      	cmp	r3, #0
   1959e:	d001      	beq.n	195a4 <mp_obj_new_bool+0x12>
   195a0:	4b04      	ldr	r3, [pc, #16]	; (195b4 <mp_obj_new_bool+0x22>)
   195a2:	e000      	b.n	195a6 <mp_obj_new_bool+0x14>
   195a4:	4b04      	ldr	r3, [pc, #16]	; (195b8 <mp_obj_new_bool+0x26>)
   195a6:	4618      	mov	r0, r3
   195a8:	370c      	adds	r7, #12
   195aa:	46bd      	mov	sp, r7
   195ac:	f85d 7b04 	ldr.w	r7, [sp], #4
   195b0:	4770      	bx	lr
   195b2:	bf00      	nop
   195b4:	00023868 	.word	0x00023868
   195b8:	00023860 	.word	0x00023860

000195bc <mp_locals_get>:
static inline mp_obj_dict_t *mp_locals_get(void) { return MP_STATE_THREAD(dict_locals); }
   195bc:	b480      	push	{r7}
   195be:	af00      	add	r7, sp, #0
   195c0:	4b03      	ldr	r3, [pc, #12]	; (195d0 <mp_locals_get+0x14>)
   195c2:	685b      	ldr	r3, [r3, #4]
   195c4:	4618      	mov	r0, r3
   195c6:	46bd      	mov	sp, r7
   195c8:	f85d 7b04 	ldr.w	r7, [sp], #4
   195cc:	4770      	bx	lr
   195ce:	bf00      	nop
   195d0:	20001248 	.word	0x20001248

000195d4 <mp_locals_set>:
static inline void mp_locals_set(mp_obj_dict_t *d) { MP_STATE_THREAD(dict_locals) = d; }
   195d4:	b480      	push	{r7}
   195d6:	b083      	sub	sp, #12
   195d8:	af00      	add	r7, sp, #0
   195da:	6078      	str	r0, [r7, #4]
   195dc:	4a04      	ldr	r2, [pc, #16]	; (195f0 <mp_locals_set+0x1c>)
   195de:	687b      	ldr	r3, [r7, #4]
   195e0:	6053      	str	r3, [r2, #4]
   195e2:	bf00      	nop
   195e4:	370c      	adds	r7, #12
   195e6:	46bd      	mov	sp, r7
   195e8:	f85d 7b04 	ldr.w	r7, [sp], #4
   195ec:	4770      	bx	lr
   195ee:	bf00      	nop
   195f0:	20001248 	.word	0x20001248

000195f4 <mp_globals_get>:
static inline mp_obj_dict_t *mp_globals_get(void) { return MP_STATE_THREAD(dict_globals); }
   195f4:	b480      	push	{r7}
   195f6:	af00      	add	r7, sp, #0
   195f8:	4b03      	ldr	r3, [pc, #12]	; (19608 <mp_globals_get+0x14>)
   195fa:	689b      	ldr	r3, [r3, #8]
   195fc:	4618      	mov	r0, r3
   195fe:	46bd      	mov	sp, r7
   19600:	f85d 7b04 	ldr.w	r7, [sp], #4
   19604:	4770      	bx	lr
   19606:	bf00      	nop
   19608:	20001248 	.word	0x20001248

0001960c <mp_builtin___build_class__>:
#endif

// args[0] is function from class body
// args[1] is class name
// args[2:] are base objects
STATIC mp_obj_t mp_builtin___build_class__(size_t n_args, const mp_obj_t *args) {
   1960c:	b580      	push	{r7, lr}
   1960e:	b08a      	sub	sp, #40	; 0x28
   19610:	af00      	add	r7, sp, #0
   19612:	6078      	str	r0, [r7, #4]
   19614:	6039      	str	r1, [r7, #0]
    assert(2 <= n_args);
   19616:	687b      	ldr	r3, [r7, #4]
   19618:	2b01      	cmp	r3, #1
   1961a:	d805      	bhi.n	19628 <mp_builtin___build_class__+0x1c>
   1961c:	4b24      	ldr	r3, [pc, #144]	; (196b0 <mp_builtin___build_class__+0xa4>)
   1961e:	4a25      	ldr	r2, [pc, #148]	; (196b4 <mp_builtin___build_class__+0xa8>)
   19620:	2132      	movs	r1, #50	; 0x32
   19622:	4825      	ldr	r0, [pc, #148]	; (196b8 <mp_builtin___build_class__+0xac>)
   19624:	f003 fc5c 	bl	1cee0 <__assert_func>

    // set the new classes __locals__ object
    mp_obj_dict_t *old_locals = mp_locals_get();
   19628:	f7ff ffc8 	bl	195bc <mp_locals_get>
   1962c:	6238      	str	r0, [r7, #32]
    mp_obj_t class_locals = mp_obj_new_dict(0);
   1962e:	2000      	movs	r0, #0
   19630:	f7f5 ffb4 	bl	f59c <mp_obj_new_dict>
   19634:	61f8      	str	r0, [r7, #28]
    mp_locals_set(MP_OBJ_TO_PTR(class_locals));
   19636:	69f8      	ldr	r0, [r7, #28]
   19638:	f7ff ffcc 	bl	195d4 <mp_locals_set>

    // call the class code
    mp_obj_t cell = mp_call_function_0(args[0]);
   1963c:	683b      	ldr	r3, [r7, #0]
   1963e:	681b      	ldr	r3, [r3, #0]
   19640:	4618      	mov	r0, r3
   19642:	f7f2 fd43 	bl	c0cc <mp_call_function_0>
   19646:	61b8      	str	r0, [r7, #24]

    // restore old __locals__ object
    mp_locals_set(old_locals);
   19648:	6a38      	ldr	r0, [r7, #32]
   1964a:	f7ff ffc3 	bl	195d4 <mp_locals_set>

    // get the class type (meta object) from the base objects
    mp_obj_t meta;
    if (n_args == 2) {
   1964e:	687b      	ldr	r3, [r7, #4]
   19650:	2b02      	cmp	r3, #2
   19652:	d102      	bne.n	1965a <mp_builtin___build_class__+0x4e>
        // no explicit bases, so use 'type'
        meta = MP_OBJ_FROM_PTR(&mp_type_type);
   19654:	4b19      	ldr	r3, [pc, #100]	; (196bc <mp_builtin___build_class__+0xb0>)
   19656:	627b      	str	r3, [r7, #36]	; 0x24
   19658:	e006      	b.n	19668 <mp_builtin___build_class__+0x5c>
    } else {
        // use type of first base object
        meta = MP_OBJ_FROM_PTR(mp_obj_get_type(args[2]));
   1965a:	683b      	ldr	r3, [r7, #0]
   1965c:	3308      	adds	r3, #8
   1965e:	681b      	ldr	r3, [r3, #0]
   19660:	4618      	mov	r0, r3
   19662:	f7f4 fafb 	bl	dc5c <mp_obj_get_type>
   19666:	6278      	str	r0, [r7, #36]	; 0x24

    // TODO do proper metaclass resolution for multiple base objects

    // create the new class using a call to the meta object
    mp_obj_t meta_args[3];
    meta_args[0] = args[1]; // class name
   19668:	683b      	ldr	r3, [r7, #0]
   1966a:	685b      	ldr	r3, [r3, #4]
   1966c:	60bb      	str	r3, [r7, #8]
    meta_args[1] = mp_obj_new_tuple(n_args - 2, args + 2); // tuple of bases
   1966e:	687b      	ldr	r3, [r7, #4]
   19670:	1e9a      	subs	r2, r3, #2
   19672:	683b      	ldr	r3, [r7, #0]
   19674:	3308      	adds	r3, #8
   19676:	4619      	mov	r1, r3
   19678:	4610      	mov	r0, r2
   1967a:	f7fc fde7 	bl	1624c <mp_obj_new_tuple>
   1967e:	4603      	mov	r3, r0
   19680:	60fb      	str	r3, [r7, #12]
    meta_args[2] = class_locals; // dict of members
   19682:	69fb      	ldr	r3, [r7, #28]
   19684:	613b      	str	r3, [r7, #16]
    mp_obj_t new_class = mp_call_function_n_kw(meta, 3, 0, meta_args);
   19686:	f107 0308 	add.w	r3, r7, #8
   1968a:	2200      	movs	r2, #0
   1968c:	2103      	movs	r1, #3
   1968e:	6a78      	ldr	r0, [r7, #36]	; 0x24
   19690:	f7f2 fd51 	bl	c136 <mp_call_function_n_kw>
   19694:	6178      	str	r0, [r7, #20]

    // store into cell if neede
    if (cell != mp_const_none) {
   19696:	69bb      	ldr	r3, [r7, #24]
   19698:	4a09      	ldr	r2, [pc, #36]	; (196c0 <mp_builtin___build_class__+0xb4>)
   1969a:	4293      	cmp	r3, r2
   1969c:	d003      	beq.n	196a6 <mp_builtin___build_class__+0x9a>
        mp_obj_cell_set(cell, new_class);
   1969e:	6979      	ldr	r1, [r7, #20]
   196a0:	69b8      	ldr	r0, [r7, #24]
   196a2:	f7f5 f847 	bl	e734 <mp_obj_cell_set>
    }

    return new_class;
   196a6:	697b      	ldr	r3, [r7, #20]
}
   196a8:	4618      	mov	r0, r3
   196aa:	3728      	adds	r7, #40	; 0x28
   196ac:	46bd      	mov	sp, r7
   196ae:	bd80      	pop	{r7, pc}
   196b0:	000263f4 	.word	0x000263f4
   196b4:	00026820 	.word	0x00026820
   196b8:	00026400 	.word	0x00026400
   196bc:	00025df4 	.word	0x00025df4
   196c0:	0002511c 	.word	0x0002511c

000196c4 <mp_builtin_abs>:
MP_DEFINE_CONST_FUN_OBJ_VAR(mp_builtin___build_class___obj, 2, mp_builtin___build_class__);

STATIC mp_obj_t mp_builtin_abs(mp_obj_t o_in) {
   196c4:	b580      	push	{r7, lr}
   196c6:	b082      	sub	sp, #8
   196c8:	af00      	add	r7, sp, #0
   196ca:	6078      	str	r0, [r7, #4]
    return mp_unary_op(MP_UNARY_OP_ABS, o_in);
   196cc:	6879      	ldr	r1, [r7, #4]
   196ce:	2007      	movs	r0, #7
   196d0:	f7f2 f98c 	bl	b9ec <mp_unary_op>
   196d4:	4603      	mov	r3, r0
}
   196d6:	4618      	mov	r0, r3
   196d8:	3708      	adds	r7, #8
   196da:	46bd      	mov	sp, r7
   196dc:	bd80      	pop	{r7, pc}

000196de <mp_builtin_all>:
MP_DEFINE_CONST_FUN_OBJ_1(mp_builtin_abs_obj, mp_builtin_abs);

STATIC mp_obj_t mp_builtin_all(mp_obj_t o_in) {
   196de:	b580      	push	{r7, lr}
   196e0:	b088      	sub	sp, #32
   196e2:	af00      	add	r7, sp, #0
   196e4:	6078      	str	r0, [r7, #4]
    mp_obj_iter_buf_t iter_buf;
    mp_obj_t iterable = mp_getiter(o_in, &iter_buf);
   196e6:	f107 0308 	add.w	r3, r7, #8
   196ea:	4619      	mov	r1, r3
   196ec:	6878      	ldr	r0, [r7, #4]
   196ee:	f7f3 faeb 	bl	ccc8 <mp_getiter>
   196f2:	61f8      	str	r0, [r7, #28]
    mp_obj_t item;
    while ((item = mp_iternext(iterable)) != MP_OBJ_STOP_ITERATION) {
   196f4:	e00a      	b.n	1970c <mp_builtin_all+0x2e>
        if (!mp_obj_is_true(item)) {
   196f6:	69b8      	ldr	r0, [r7, #24]
   196f8:	f7f4 fb8c 	bl	de14 <mp_obj_is_true>
   196fc:	4603      	mov	r3, r0
   196fe:	f083 0301 	eor.w	r3, r3, #1
   19702:	b2db      	uxtb	r3, r3
   19704:	2b00      	cmp	r3, #0
   19706:	d001      	beq.n	1970c <mp_builtin_all+0x2e>
            return mp_const_false;
   19708:	4b06      	ldr	r3, [pc, #24]	; (19724 <mp_builtin_all+0x46>)
   1970a:	e007      	b.n	1971c <mp_builtin_all+0x3e>
    while ((item = mp_iternext(iterable)) != MP_OBJ_STOP_ITERATION) {
   1970c:	69f8      	ldr	r0, [r7, #28]
   1970e:	f7f3 fb5d 	bl	cdcc <mp_iternext>
   19712:	61b8      	str	r0, [r7, #24]
   19714:	69bb      	ldr	r3, [r7, #24]
   19716:	2b04      	cmp	r3, #4
   19718:	d1ed      	bne.n	196f6 <mp_builtin_all+0x18>
        }
    }
    return mp_const_true;
   1971a:	4b03      	ldr	r3, [pc, #12]	; (19728 <mp_builtin_all+0x4a>)
}
   1971c:	4618      	mov	r0, r3
   1971e:	3720      	adds	r7, #32
   19720:	46bd      	mov	sp, r7
   19722:	bd80      	pop	{r7, pc}
   19724:	00023860 	.word	0x00023860
   19728:	00023868 	.word	0x00023868

0001972c <mp_builtin_any>:
MP_DEFINE_CONST_FUN_OBJ_1(mp_builtin_all_obj, mp_builtin_all);

STATIC mp_obj_t mp_builtin_any(mp_obj_t o_in) {
   1972c:	b580      	push	{r7, lr}
   1972e:	b088      	sub	sp, #32
   19730:	af00      	add	r7, sp, #0
   19732:	6078      	str	r0, [r7, #4]
    mp_obj_iter_buf_t iter_buf;
    mp_obj_t iterable = mp_getiter(o_in, &iter_buf);
   19734:	f107 0308 	add.w	r3, r7, #8
   19738:	4619      	mov	r1, r3
   1973a:	6878      	ldr	r0, [r7, #4]
   1973c:	f7f3 fac4 	bl	ccc8 <mp_getiter>
   19740:	61f8      	str	r0, [r7, #28]
    mp_obj_t item;
    while ((item = mp_iternext(iterable)) != MP_OBJ_STOP_ITERATION) {
   19742:	e007      	b.n	19754 <mp_builtin_any+0x28>
        if (mp_obj_is_true(item)) {
   19744:	69b8      	ldr	r0, [r7, #24]
   19746:	f7f4 fb65 	bl	de14 <mp_obj_is_true>
   1974a:	4603      	mov	r3, r0
   1974c:	2b00      	cmp	r3, #0
   1974e:	d001      	beq.n	19754 <mp_builtin_any+0x28>
            return mp_const_true;
   19750:	4b06      	ldr	r3, [pc, #24]	; (1976c <mp_builtin_any+0x40>)
   19752:	e007      	b.n	19764 <mp_builtin_any+0x38>
    while ((item = mp_iternext(iterable)) != MP_OBJ_STOP_ITERATION) {
   19754:	69f8      	ldr	r0, [r7, #28]
   19756:	f7f3 fb39 	bl	cdcc <mp_iternext>
   1975a:	61b8      	str	r0, [r7, #24]
   1975c:	69bb      	ldr	r3, [r7, #24]
   1975e:	2b04      	cmp	r3, #4
   19760:	d1f0      	bne.n	19744 <mp_builtin_any+0x18>
        }
    }
    return mp_const_false;
   19762:	4b03      	ldr	r3, [pc, #12]	; (19770 <mp_builtin_any+0x44>)
}
   19764:	4618      	mov	r0, r3
   19766:	3720      	adds	r7, #32
   19768:	46bd      	mov	sp, r7
   1976a:	bd80      	pop	{r7, pc}
   1976c:	00023868 	.word	0x00023868
   19770:	00023860 	.word	0x00023860

00019774 <mp_builtin_bin>:
MP_DEFINE_CONST_FUN_OBJ_1(mp_builtin_any_obj, mp_builtin_any);

STATIC mp_obj_t mp_builtin_bin(mp_obj_t o_in) {
   19774:	b580      	push	{r7, lr}
   19776:	b084      	sub	sp, #16
   19778:	af00      	add	r7, sp, #0
   1977a:	6078      	str	r0, [r7, #4]
    mp_obj_t args[] = { MP_OBJ_NEW_QSTR(MP_QSTR__brace_open__colon__hash_b_brace_close_), o_in };
   1977c:	23b2      	movs	r3, #178	; 0xb2
   1977e:	60bb      	str	r3, [r7, #8]
   19780:	687b      	ldr	r3, [r7, #4]
   19782:	60fb      	str	r3, [r7, #12]
    return mp_obj_str_format(MP_ARRAY_SIZE(args), args, NULL);
   19784:	f107 0308 	add.w	r3, r7, #8
   19788:	2200      	movs	r2, #0
   1978a:	4619      	mov	r1, r3
   1978c:	2002      	movs	r0, #2
   1978e:	f7fb f831 	bl	147f4 <mp_obj_str_format>
   19792:	4603      	mov	r3, r0
}
   19794:	4618      	mov	r0, r3
   19796:	3710      	adds	r7, #16
   19798:	46bd      	mov	sp, r7
   1979a:	bd80      	pop	{r7, pc}

0001979c <mp_builtin_callable>:
MP_DEFINE_CONST_FUN_OBJ_1(mp_builtin_bin_obj, mp_builtin_bin);

STATIC mp_obj_t mp_builtin_callable(mp_obj_t o_in) {
   1979c:	b580      	push	{r7, lr}
   1979e:	b082      	sub	sp, #8
   197a0:	af00      	add	r7, sp, #0
   197a2:	6078      	str	r0, [r7, #4]
    if (mp_obj_is_callable(o_in)) {
   197a4:	6878      	ldr	r0, [r7, #4]
   197a6:	f7f4 fb8b 	bl	dec0 <mp_obj_is_callable>
   197aa:	4603      	mov	r3, r0
   197ac:	2b00      	cmp	r3, #0
   197ae:	d001      	beq.n	197b4 <mp_builtin_callable+0x18>
        return mp_const_true;
   197b0:	4b03      	ldr	r3, [pc, #12]	; (197c0 <mp_builtin_callable+0x24>)
   197b2:	e000      	b.n	197b6 <mp_builtin_callable+0x1a>
    } else {
        return mp_const_false;
   197b4:	4b03      	ldr	r3, [pc, #12]	; (197c4 <mp_builtin_callable+0x28>)
    }
}
   197b6:	4618      	mov	r0, r3
   197b8:	3708      	adds	r7, #8
   197ba:	46bd      	mov	sp, r7
   197bc:	bd80      	pop	{r7, pc}
   197be:	bf00      	nop
   197c0:	00023868 	.word	0x00023868
   197c4:	00023860 	.word	0x00023860

000197c8 <mp_builtin_chr>:
MP_DEFINE_CONST_FUN_OBJ_1(mp_builtin_callable_obj, mp_builtin_callable);

STATIC mp_obj_t mp_builtin_chr(mp_obj_t o_in) {
   197c8:	b580      	push	{r7, lr}
   197ca:	b084      	sub	sp, #16
   197cc:	af00      	add	r7, sp, #0
   197ce:	6078      	str	r0, [r7, #4]
    } else {
        mp_raise_ValueError("chr() arg not in range(0x110000)");
    }
    return mp_obj_new_str_via_qstr((char*)str, len);
    #else
    mp_int_t ord = mp_obj_get_int(o_in);
   197d0:	6878      	ldr	r0, [r7, #4]
   197d2:	f7f4 fc1f 	bl	e014 <mp_obj_get_int>
   197d6:	60f8      	str	r0, [r7, #12]
    if (0 <= ord && ord <= 0xff) {
   197d8:	68fb      	ldr	r3, [r7, #12]
   197da:	2b00      	cmp	r3, #0
   197dc:	db0d      	blt.n	197fa <mp_builtin_chr+0x32>
   197de:	68fb      	ldr	r3, [r7, #12]
   197e0:	2bff      	cmp	r3, #255	; 0xff
   197e2:	dc0a      	bgt.n	197fa <mp_builtin_chr+0x32>
        uint8_t str[1] = {ord};
   197e4:	68fb      	ldr	r3, [r7, #12]
   197e6:	b2db      	uxtb	r3, r3
   197e8:	723b      	strb	r3, [r7, #8]
        return mp_obj_new_str_via_qstr((char*)str, 1);
   197ea:	f107 0308 	add.w	r3, r7, #8
   197ee:	2101      	movs	r1, #1
   197f0:	4618      	mov	r0, r3
   197f2:	f7fb ffa1 	bl	15738 <mp_obj_new_str_via_qstr>
   197f6:	4603      	mov	r3, r0
   197f8:	e002      	b.n	19800 <mp_builtin_chr+0x38>
    } else {
        mp_raise_ValueError("chr() arg not in range(256)");
   197fa:	4803      	ldr	r0, [pc, #12]	; (19808 <mp_builtin_chr+0x40>)
   197fc:	f7f3 fdbb 	bl	d376 <mp_raise_ValueError>
    }
    #endif
}
   19800:	4618      	mov	r0, r3
   19802:	3710      	adds	r7, #16
   19804:	46bd      	mov	sp, r7
   19806:	bd80      	pop	{r7, pc}
   19808:	0002644c 	.word	0x0002644c

0001980c <mp_builtin_dir>:
MP_DEFINE_CONST_FUN_OBJ_1(mp_builtin_chr_obj, mp_builtin_chr);

STATIC mp_obj_t mp_builtin_dir(size_t n_args, const mp_obj_t *args) {
   1980c:	b580      	push	{r7, lr}
   1980e:	b08a      	sub	sp, #40	; 0x28
   19810:	af00      	add	r7, sp, #0
   19812:	6078      	str	r0, [r7, #4]
   19814:	6039      	str	r1, [r7, #0]
    mp_obj_t dir = mp_obj_new_list(0, NULL);
   19816:	2100      	movs	r1, #0
   19818:	2000      	movs	r0, #0
   1981a:	f7f8 fa5e 	bl	11cda <mp_obj_new_list>
   1981e:	61f8      	str	r0, [r7, #28]
    if (n_args == 0) {
   19820:	687b      	ldr	r3, [r7, #4]
   19822:	2b00      	cmp	r3, #0
   19824:	d121      	bne.n	1986a <mp_builtin_dir+0x5e>
        // Make a list of names in the local namespace
        mp_obj_dict_t *dict = mp_locals_get();
   19826:	f7ff fec9 	bl	195bc <mp_locals_get>
   1982a:	61b8      	str	r0, [r7, #24]
        for (size_t i = 0; i < dict->map.alloc; i++) {
   1982c:	2300      	movs	r3, #0
   1982e:	627b      	str	r3, [r7, #36]	; 0x24
   19830:	e015      	b.n	1985e <mp_builtin_dir+0x52>
            if (MP_MAP_SLOT_IS_FILLED(&dict->map, i)) {
   19832:	69bb      	ldr	r3, [r7, #24]
   19834:	3304      	adds	r3, #4
   19836:	6a79      	ldr	r1, [r7, #36]	; 0x24
   19838:	4618      	mov	r0, r3
   1983a:	f7ff fe89 	bl	19550 <MP_MAP_SLOT_IS_FILLED>
   1983e:	4603      	mov	r3, r0
   19840:	2b00      	cmp	r3, #0
   19842:	d009      	beq.n	19858 <mp_builtin_dir+0x4c>
                mp_obj_list_append(dir, dict->map.table[i].key);
   19844:	69bb      	ldr	r3, [r7, #24]
   19846:	68da      	ldr	r2, [r3, #12]
   19848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1984a:	00db      	lsls	r3, r3, #3
   1984c:	4413      	add	r3, r2
   1984e:	681b      	ldr	r3, [r3, #0]
   19850:	4619      	mov	r1, r3
   19852:	69f8      	ldr	r0, [r7, #28]
   19854:	f7f7 fdd5 	bl	11402 <mp_obj_list_append>
        for (size_t i = 0; i < dict->map.alloc; i++) {
   19858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1985a:	3301      	adds	r3, #1
   1985c:	627b      	str	r3, [r7, #36]	; 0x24
   1985e:	69bb      	ldr	r3, [r7, #24]
   19860:	689a      	ldr	r2, [r3, #8]
   19862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   19864:	429a      	cmp	r2, r3
   19866:	d8e4      	bhi.n	19832 <mp_builtin_dir+0x26>
   19868:	e024      	b.n	198b4 <mp_builtin_dir+0xa8>
            }
        }
    } else { // n_args == 1
        // Make a list of names in the given object
        // Implemented by probing all possible qstrs with mp_load_method_maybe
        size_t nqstr = QSTR_TOTAL();
   1986a:	4b15      	ldr	r3, [pc, #84]	; (198c0 <mp_builtin_dir+0xb4>)
   1986c:	691b      	ldr	r3, [r3, #16]
   1986e:	685a      	ldr	r2, [r3, #4]
   19870:	4b13      	ldr	r3, [pc, #76]	; (198c0 <mp_builtin_dir+0xb4>)
   19872:	691b      	ldr	r3, [r3, #16]
   19874:	68db      	ldr	r3, [r3, #12]
   19876:	4413      	add	r3, r2
   19878:	617b      	str	r3, [r7, #20]
        for (size_t i = MP_QSTR_ + 1; i < nqstr; ++i) {
   1987a:	2302      	movs	r3, #2
   1987c:	623b      	str	r3, [r7, #32]
   1987e:	e015      	b.n	198ac <mp_builtin_dir+0xa0>
            mp_obj_t dest[2];
            mp_load_method_protected(args[0], i, dest, false);
   19880:	683b      	ldr	r3, [r7, #0]
   19882:	6818      	ldr	r0, [r3, #0]
   19884:	f107 020c 	add.w	r2, r7, #12
   19888:	2300      	movs	r3, #0
   1988a:	6a39      	ldr	r1, [r7, #32]
   1988c:	f7f3 f9b4 	bl	cbf8 <mp_load_method_protected>
            if (dest[0] != MP_OBJ_NULL) {
   19890:	68fb      	ldr	r3, [r7, #12]
   19892:	2b00      	cmp	r3, #0
   19894:	d007      	beq.n	198a6 <mp_builtin_dir+0x9a>
                // This relies on MP_QSTR__dir__ being first after MP_QSTR_
                if (i == MP_QSTR___dir__ && dest[1] != MP_OBJ_NULL) {
                    return mp_call_method_n_kw(0, 0, dest);
                }
                #endif
                mp_obj_list_append(dir, MP_OBJ_NEW_QSTR(i));
   19896:	6a3b      	ldr	r3, [r7, #32]
   19898:	009b      	lsls	r3, r3, #2
   1989a:	f043 0302 	orr.w	r3, r3, #2
   1989e:	4619      	mov	r1, r3
   198a0:	69f8      	ldr	r0, [r7, #28]
   198a2:	f7f7 fdae 	bl	11402 <mp_obj_list_append>
        for (size_t i = MP_QSTR_ + 1; i < nqstr; ++i) {
   198a6:	6a3b      	ldr	r3, [r7, #32]
   198a8:	3301      	adds	r3, #1
   198aa:	623b      	str	r3, [r7, #32]
   198ac:	6a3a      	ldr	r2, [r7, #32]
   198ae:	697b      	ldr	r3, [r7, #20]
   198b0:	429a      	cmp	r2, r3
   198b2:	d3e5      	bcc.n	19880 <mp_builtin_dir+0x74>
            }
        }
    }
    return dir;
   198b4:	69fb      	ldr	r3, [r7, #28]
}
   198b6:	4618      	mov	r0, r3
   198b8:	3728      	adds	r7, #40	; 0x28
   198ba:	46bd      	mov	sp, r7
   198bc:	bd80      	pop	{r7, pc}
   198be:	bf00      	nop
   198c0:	20001248 	.word	0x20001248

000198c4 <mp_builtin_divmod>:
MP_DEFINE_CONST_FUN_OBJ_VAR_BETWEEN(mp_builtin_dir_obj, 0, 1, mp_builtin_dir);

STATIC mp_obj_t mp_builtin_divmod(mp_obj_t o1_in, mp_obj_t o2_in) {
   198c4:	b580      	push	{r7, lr}
   198c6:	b082      	sub	sp, #8
   198c8:	af00      	add	r7, sp, #0
   198ca:	6078      	str	r0, [r7, #4]
   198cc:	6039      	str	r1, [r7, #0]
    return mp_binary_op(MP_BINARY_OP_DIVMOD, o1_in, o2_in);
   198ce:	683a      	ldr	r2, [r7, #0]
   198d0:	6879      	ldr	r1, [r7, #4]
   198d2:	2021      	movs	r0, #33	; 0x21
   198d4:	f7f2 f988 	bl	bbe8 <mp_binary_op>
   198d8:	4603      	mov	r3, r0
}
   198da:	4618      	mov	r0, r3
   198dc:	3708      	adds	r7, #8
   198de:	46bd      	mov	sp, r7
   198e0:	bd80      	pop	{r7, pc}

000198e2 <mp_builtin_hash>:
MP_DEFINE_CONST_FUN_OBJ_2(mp_builtin_divmod_obj, mp_builtin_divmod);

STATIC mp_obj_t mp_builtin_hash(mp_obj_t o_in) {
   198e2:	b580      	push	{r7, lr}
   198e4:	b082      	sub	sp, #8
   198e6:	af00      	add	r7, sp, #0
   198e8:	6078      	str	r0, [r7, #4]
    // result is guaranteed to be a (small) int
    return mp_unary_op(MP_UNARY_OP_HASH, o_in);
   198ea:	6879      	ldr	r1, [r7, #4]
   198ec:	2006      	movs	r0, #6
   198ee:	f7f2 f87d 	bl	b9ec <mp_unary_op>
   198f2:	4603      	mov	r3, r0
}
   198f4:	4618      	mov	r0, r3
   198f6:	3708      	adds	r7, #8
   198f8:	46bd      	mov	sp, r7
   198fa:	bd80      	pop	{r7, pc}

000198fc <mp_builtin_hex>:
MP_DEFINE_CONST_FUN_OBJ_1(mp_builtin_hash_obj, mp_builtin_hash);

STATIC mp_obj_t mp_builtin_hex(mp_obj_t o_in) {
   198fc:	b580      	push	{r7, lr}
   198fe:	b082      	sub	sp, #8
   19900:	af00      	add	r7, sp, #0
   19902:	6078      	str	r0, [r7, #4]
    #if MICROPY_PY_BUILTINS_STR_OP_MODULO
    return mp_binary_op(MP_BINARY_OP_MODULO, MP_OBJ_NEW_QSTR(MP_QSTR__percent__hash_x), o_in);
   19904:	687a      	ldr	r2, [r7, #4]
   19906:	21ae      	movs	r1, #174	; 0xae
   19908:	201f      	movs	r0, #31
   1990a:	f7f2 f96d 	bl	bbe8 <mp_binary_op>
   1990e:	4603      	mov	r3, r0
    #else
    mp_obj_t args[] = { MP_OBJ_NEW_QSTR(MP_QSTR__brace_open__colon__hash_x_brace_close_), o_in };
    return mp_obj_str_format(MP_ARRAY_SIZE(args), args, NULL);
    #endif
}
   19910:	4618      	mov	r0, r3
   19912:	3708      	adds	r7, #8
   19914:	46bd      	mov	sp, r7
   19916:	bd80      	pop	{r7, pc}

00019918 <mp_builtin_iter>:
}
MP_DEFINE_CONST_FUN_OBJ_VAR_BETWEEN(mp_builtin_input_obj, 0, 1, mp_builtin_input);

#endif

STATIC mp_obj_t mp_builtin_iter(mp_obj_t o_in) {
   19918:	b580      	push	{r7, lr}
   1991a:	b082      	sub	sp, #8
   1991c:	af00      	add	r7, sp, #0
   1991e:	6078      	str	r0, [r7, #4]
    return mp_getiter(o_in, NULL);
   19920:	2100      	movs	r1, #0
   19922:	6878      	ldr	r0, [r7, #4]
   19924:	f7f3 f9d0 	bl	ccc8 <mp_getiter>
   19928:	4603      	mov	r3, r0
}
   1992a:	4618      	mov	r0, r3
   1992c:	3708      	adds	r7, #8
   1992e:	46bd      	mov	sp, r7
   19930:	bd80      	pop	{r7, pc}

00019932 <mp_builtin_next>:
}
MP_DEFINE_CONST_FUN_OBJ_KW(mp_builtin_min_obj, 1, mp_builtin_min);

#endif

STATIC mp_obj_t mp_builtin_next(mp_obj_t o) {
   19932:	b580      	push	{r7, lr}
   19934:	b084      	sub	sp, #16
   19936:	af00      	add	r7, sp, #0
   19938:	6078      	str	r0, [r7, #4]
    mp_obj_t ret = mp_iternext_allow_raise(o);
   1993a:	6878      	ldr	r0, [r7, #4]
   1993c:	f7f3 fa18 	bl	cd70 <mp_iternext_allow_raise>
   19940:	60f8      	str	r0, [r7, #12]
    if (ret == MP_OBJ_STOP_ITERATION) {
   19942:	68fb      	ldr	r3, [r7, #12]
   19944:	2b04      	cmp	r3, #4
   19946:	d106      	bne.n	19956 <mp_builtin_next+0x24>
        nlr_raise(mp_obj_new_exception(&mp_type_StopIteration));
   19948:	4805      	ldr	r0, [pc, #20]	; (19960 <mp_builtin_next+0x2e>)
   1994a:	f7f5 ffc7 	bl	f8dc <mp_obj_new_exception>
   1994e:	4603      	mov	r3, r0
   19950:	4618      	mov	r0, r3
   19952:	f7e6 fcc5 	bl	2e0 <nlr_jump>
    } else {
        return ret;
   19956:	68fb      	ldr	r3, [r7, #12]
    }
}
   19958:	4618      	mov	r0, r3
   1995a:	3710      	adds	r7, #16
   1995c:	46bd      	mov	sp, r7
   1995e:	bd80      	pop	{r7, pc}
   19960:	00023f3c 	.word	0x00023f3c

00019964 <mp_builtin_oct>:
MP_DEFINE_CONST_FUN_OBJ_1(mp_builtin_next_obj, mp_builtin_next);

STATIC mp_obj_t mp_builtin_oct(mp_obj_t o_in) {
   19964:	b580      	push	{r7, lr}
   19966:	b082      	sub	sp, #8
   19968:	af00      	add	r7, sp, #0
   1996a:	6078      	str	r0, [r7, #4]
    #if MICROPY_PY_BUILTINS_STR_OP_MODULO
    return mp_binary_op(MP_BINARY_OP_MODULO, MP_OBJ_NEW_QSTR(MP_QSTR__percent__hash_o), o_in);
   1996c:	687a      	ldr	r2, [r7, #4]
   1996e:	21aa      	movs	r1, #170	; 0xaa
   19970:	201f      	movs	r0, #31
   19972:	f7f2 f939 	bl	bbe8 <mp_binary_op>
   19976:	4603      	mov	r3, r0
    #else
    mp_obj_t args[] = { MP_OBJ_NEW_QSTR(MP_QSTR__brace_open__colon__hash_o_brace_close_), o_in };
    return mp_obj_str_format(MP_ARRAY_SIZE(args), args, NULL);
    #endif
}
   19978:	4618      	mov	r0, r3
   1997a:	3708      	adds	r7, #8
   1997c:	46bd      	mov	sp, r7
   1997e:	bd80      	pop	{r7, pc}

00019980 <mp_builtin_ord>:
MP_DEFINE_CONST_FUN_OBJ_1(mp_builtin_oct_obj, mp_builtin_oct);

STATIC mp_obj_t mp_builtin_ord(mp_obj_t o_in) {
   19980:	b580      	push	{r7, lr}
   19982:	b084      	sub	sp, #16
   19984:	af00      	add	r7, sp, #0
   19986:	6078      	str	r0, [r7, #4]
    size_t len;
    const byte *str = (const byte*)mp_obj_str_get_data(o_in, &len);
   19988:	f107 0308 	add.w	r3, r7, #8
   1998c:	4619      	mov	r1, r3
   1998e:	6878      	ldr	r0, [r7, #4]
   19990:	f7fc f8a4 	bl	15adc <mp_obj_str_get_data>
   19994:	60f8      	str	r0, [r7, #12]
        }
    } else
    #endif
    {
        // a bytes object, or a str without unicode support (don't sign extend the char)
        if (len == 1) {
   19996:	68bb      	ldr	r3, [r7, #8]
   19998:	2b01      	cmp	r3, #1
   1999a:	d105      	bne.n	199a8 <mp_builtin_ord+0x28>
            return MP_OBJ_NEW_SMALL_INT(str[0]);
   1999c:	68fb      	ldr	r3, [r7, #12]
   1999e:	781b      	ldrb	r3, [r3, #0]
   199a0:	005b      	lsls	r3, r3, #1
   199a2:	f043 0301 	orr.w	r3, r3, #1
   199a6:	e002      	b.n	199ae <mp_builtin_ord+0x2e>
        }
    }

    if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
        mp_raise_TypeError("ord expects a character");
   199a8:	4803      	ldr	r0, [pc, #12]	; (199b8 <mp_builtin_ord+0x38>)
   199aa:	f7f3 fcef 	bl	d38c <mp_raise_TypeError>
    } else {
        nlr_raise(mp_obj_new_exception_msg_varg(&mp_type_TypeError,
            "ord() expected a character, but string of length %d found", (int)len));
    }
}
   199ae:	4618      	mov	r0, r3
   199b0:	3710      	adds	r7, #16
   199b2:	46bd      	mov	sp, r7
   199b4:	bd80      	pop	{r7, pc}
   199b6:	bf00      	nop
   199b8:	000264ac 	.word	0x000264ac

000199bc <mp_builtin_pow>:
MP_DEFINE_CONST_FUN_OBJ_1(mp_builtin_ord_obj, mp_builtin_ord);

STATIC mp_obj_t mp_builtin_pow(size_t n_args, const mp_obj_t *args) {
   199bc:	b580      	push	{r7, lr}
   199be:	b082      	sub	sp, #8
   199c0:	af00      	add	r7, sp, #0
   199c2:	6078      	str	r0, [r7, #4]
   199c4:	6039      	str	r1, [r7, #0]
    switch (n_args) {
   199c6:	687b      	ldr	r3, [r7, #4]
   199c8:	2b02      	cmp	r3, #2
   199ca:	d10a      	bne.n	199e2 <mp_builtin_pow+0x26>
        case 2: return mp_binary_op(MP_BINARY_OP_POWER, args[0], args[1]);
   199cc:	683b      	ldr	r3, [r7, #0]
   199ce:	6819      	ldr	r1, [r3, #0]
   199d0:	683b      	ldr	r3, [r7, #0]
   199d2:	3304      	adds	r3, #4
   199d4:	681b      	ldr	r3, [r3, #0]
   199d6:	461a      	mov	r2, r3
   199d8:	2020      	movs	r0, #32
   199da:	f7f2 f905 	bl	bbe8 <mp_binary_op>
   199de:	4603      	mov	r3, r0
   199e0:	e003      	b.n	199ea <mp_builtin_pow+0x2e>
        default:
#if !MICROPY_PY_BUILTINS_POW3
            mp_raise_msg(&mp_type_NotImplementedError, "3-arg pow() not supported");
   199e2:	4904      	ldr	r1, [pc, #16]	; (199f4 <mp_builtin_pow+0x38>)
   199e4:	4804      	ldr	r0, [pc, #16]	; (199f8 <mp_builtin_pow+0x3c>)
   199e6:	f7f3 fcaf 	bl	d348 <mp_raise_msg>
            return mp_binary_op(MP_BINARY_OP_MODULO, mp_binary_op(MP_BINARY_OP_POWER, args[0], args[1]), args[2]);
#else
            return mp_obj_int_pow3(args[0], args[1], args[2]);
#endif
    }
}
   199ea:	4618      	mov	r0, r3
   199ec:	3708      	adds	r7, #8
   199ee:	46bd      	mov	sp, r7
   199f0:	bd80      	pop	{r7, pc}
   199f2:	bf00      	nop
   199f4:	000264cc 	.word	0x000264cc
   199f8:	000242c0 	.word	0x000242c0

000199fc <mp_builtin_print>:
MP_DEFINE_CONST_FUN_OBJ_VAR_BETWEEN(mp_builtin_pow_obj, 2, 3, mp_builtin_pow);

STATIC mp_obj_t mp_builtin_print(size_t n_args, const mp_obj_t *pos_args, mp_map_t *kw_args) {
   199fc:	b580      	push	{r7, lr}
   199fe:	b08e      	sub	sp, #56	; 0x38
   19a00:	af02      	add	r7, sp, #8
   19a02:	60f8      	str	r0, [r7, #12]
   19a04:	60b9      	str	r1, [r7, #8]
   19a06:	607a      	str	r2, [r7, #4]
    // parse args (a union is used to reduce the amount of C stack that is needed)
    union {
        mp_arg_val_t args[MP_ARRAY_SIZE(allowed_args)];
        size_t len[2];
    } u;
    mp_arg_parse_all(0, NULL, kw_args, MP_ARRAY_SIZE(allowed_args), allowed_args, u.args);
   19a08:	f107 0314 	add.w	r3, r7, #20
   19a0c:	9301      	str	r3, [sp, #4]
   19a0e:	4b25      	ldr	r3, [pc, #148]	; (19aa4 <mp_builtin_print+0xa8>)
   19a10:	9300      	str	r3, [sp, #0]
   19a12:	2302      	movs	r3, #2
   19a14:	687a      	ldr	r2, [r7, #4]
   19a16:	2100      	movs	r1, #0
   19a18:	2000      	movs	r0, #0
   19a1a:	f7f3 fd17 	bl	d44c <mp_arg_parse_all>
    mp_get_stream_raise(u.args[ARG_file].u_obj, MP_STREAM_OP_WRITE);
    mp_print_t print = {MP_OBJ_TO_PTR(u.args[ARG_file].u_obj), mp_stream_write_adaptor};
    #endif

    // extract the objects first because we are going to use the other part of the union
    mp_obj_t sep = u.args[ARG_sep].u_obj;
   19a1e:	697b      	ldr	r3, [r7, #20]
   19a20:	62bb      	str	r3, [r7, #40]	; 0x28
    mp_obj_t end = u.args[ARG_end].u_obj;
   19a22:	69bb      	ldr	r3, [r7, #24]
   19a24:	627b      	str	r3, [r7, #36]	; 0x24
    const char *sep_data = mp_obj_str_get_data(sep, &u.len[0]);
   19a26:	f107 0314 	add.w	r3, r7, #20
   19a2a:	4619      	mov	r1, r3
   19a2c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   19a2e:	f7fc f855 	bl	15adc <mp_obj_str_get_data>
   19a32:	6238      	str	r0, [r7, #32]
    const char *end_data = mp_obj_str_get_data(end, &u.len[1]);
   19a34:	f107 0314 	add.w	r3, r7, #20
   19a38:	3304      	adds	r3, #4
   19a3a:	4619      	mov	r1, r3
   19a3c:	6a78      	ldr	r0, [r7, #36]	; 0x24
   19a3e:	f7fc f84d 	bl	15adc <mp_obj_str_get_data>
   19a42:	61f8      	str	r0, [r7, #28]

    for (size_t i = 0; i < n_args; i++) {
   19a44:	2300      	movs	r3, #0
   19a46:	62fb      	str	r3, [r7, #44]	; 0x2c
   19a48:	e019      	b.n	19a7e <mp_builtin_print+0x82>
        if (i > 0) {
   19a4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   19a4c:	2b00      	cmp	r3, #0
   19a4e:	d009      	beq.n	19a64 <mp_builtin_print+0x68>
            #if MICROPY_PY_IO && MICROPY_PY_SYS_STDFILES
            mp_stream_write_adaptor(print.data, sep_data, u.len[0]);
            #else
            mp_print_strn(&mp_plat_print, sep_data, u.len[0], 0, 0, 0);
   19a50:	697a      	ldr	r2, [r7, #20]
   19a52:	2300      	movs	r3, #0
   19a54:	9301      	str	r3, [sp, #4]
   19a56:	2300      	movs	r3, #0
   19a58:	9300      	str	r3, [sp, #0]
   19a5a:	2300      	movs	r3, #0
   19a5c:	6a39      	ldr	r1, [r7, #32]
   19a5e:	4812      	ldr	r0, [pc, #72]	; (19aa8 <mp_builtin_print+0xac>)
   19a60:	f7e8 f80c 	bl	1a7c <mp_print_strn>
            #endif
        }
        #if MICROPY_PY_IO && MICROPY_PY_SYS_STDFILES
        mp_obj_print_helper(&print, pos_args[i], PRINT_STR);
        #else
        mp_obj_print_helper(&mp_plat_print, pos_args[i], PRINT_STR);
   19a64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   19a66:	009b      	lsls	r3, r3, #2
   19a68:	68ba      	ldr	r2, [r7, #8]
   19a6a:	4413      	add	r3, r2
   19a6c:	681b      	ldr	r3, [r3, #0]
   19a6e:	2200      	movs	r2, #0
   19a70:	4619      	mov	r1, r3
   19a72:	480d      	ldr	r0, [pc, #52]	; (19aa8 <mp_builtin_print+0xac>)
   19a74:	f7f4 f923 	bl	dcbe <mp_obj_print_helper>
    for (size_t i = 0; i < n_args; i++) {
   19a78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   19a7a:	3301      	adds	r3, #1
   19a7c:	62fb      	str	r3, [r7, #44]	; 0x2c
   19a7e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   19a80:	68fb      	ldr	r3, [r7, #12]
   19a82:	429a      	cmp	r2, r3
   19a84:	d3e1      	bcc.n	19a4a <mp_builtin_print+0x4e>
        #endif
    }
    #if MICROPY_PY_IO && MICROPY_PY_SYS_STDFILES
    mp_stream_write_adaptor(print.data, end_data, u.len[1]);
    #else
    mp_print_strn(&mp_plat_print, end_data, u.len[1], 0, 0, 0);
   19a86:	69ba      	ldr	r2, [r7, #24]
   19a88:	2300      	movs	r3, #0
   19a8a:	9301      	str	r3, [sp, #4]
   19a8c:	2300      	movs	r3, #0
   19a8e:	9300      	str	r3, [sp, #0]
   19a90:	2300      	movs	r3, #0
   19a92:	69f9      	ldr	r1, [r7, #28]
   19a94:	4804      	ldr	r0, [pc, #16]	; (19aa8 <mp_builtin_print+0xac>)
   19a96:	f7e7 fff1 	bl	1a7c <mp_print_strn>
    #endif
    return mp_const_none;
   19a9a:	4b04      	ldr	r3, [pc, #16]	; (19aac <mp_builtin_print+0xb0>)
}
   19a9c:	4618      	mov	r0, r3
   19a9e:	3730      	adds	r7, #48	; 0x30
   19aa0:	46bd      	mov	sp, r7
   19aa2:	bd80      	pop	{r7, pc}
   19aa4:	0002683c 	.word	0x0002683c
   19aa8:	000210cc 	.word	0x000210cc
   19aac:	0002511c 	.word	0x0002511c

00019ab0 <mp_builtin___repl_print__>:
MP_DEFINE_CONST_FUN_OBJ_KW(mp_builtin_print_obj, 0, mp_builtin_print);

STATIC mp_obj_t mp_builtin___repl_print__(mp_obj_t o) {
   19ab0:	b580      	push	{r7, lr}
   19ab2:	b082      	sub	sp, #8
   19ab4:	af00      	add	r7, sp, #0
   19ab6:	6078      	str	r0, [r7, #4]
    if (o != mp_const_none) {
   19ab8:	687b      	ldr	r3, [r7, #4]
   19aba:	4a08      	ldr	r2, [pc, #32]	; (19adc <mp_builtin___repl_print__+0x2c>)
   19abc:	4293      	cmp	r3, r2
   19abe:	d008      	beq.n	19ad2 <mp_builtin___repl_print__+0x22>
        mp_obj_print_helper(MP_PYTHON_PRINTER, o, PRINT_REPR);
   19ac0:	2201      	movs	r2, #1
   19ac2:	6879      	ldr	r1, [r7, #4]
   19ac4:	4806      	ldr	r0, [pc, #24]	; (19ae0 <mp_builtin___repl_print__+0x30>)
   19ac6:	f7f4 f8fa 	bl	dcbe <mp_obj_print_helper>
        mp_print_str(MP_PYTHON_PRINTER, "\n");
   19aca:	4906      	ldr	r1, [pc, #24]	; (19ae4 <mp_builtin___repl_print__+0x34>)
   19acc:	4804      	ldr	r0, [pc, #16]	; (19ae0 <mp_builtin___repl_print__+0x30>)
   19ace:	f7e7 ffbd 	bl	1a4c <mp_print_str>
        // Set "_" special variable
        mp_obj_t dest[2] = {MP_OBJ_SENTINEL, o};
        mp_type_module.attr(MP_OBJ_FROM_PTR(&mp_module_builtins), MP_QSTR__, dest);
        #endif
    }
    return mp_const_none;
   19ad2:	4b02      	ldr	r3, [pc, #8]	; (19adc <mp_builtin___repl_print__+0x2c>)
}
   19ad4:	4618      	mov	r0, r3
   19ad6:	3708      	adds	r7, #8
   19ad8:	46bd      	mov	sp, r7
   19ada:	bd80      	pop	{r7, pc}
   19adc:	0002511c 	.word	0x0002511c
   19ae0:	000210cc 	.word	0x000210cc
   19ae4:	00026500 	.word	0x00026500

00019ae8 <mp_builtin_repr>:
MP_DEFINE_CONST_FUN_OBJ_1(mp_builtin___repl_print___obj, mp_builtin___repl_print__);

STATIC mp_obj_t mp_builtin_repr(mp_obj_t o_in) {
   19ae8:	b580      	push	{r7, lr}
   19aea:	b088      	sub	sp, #32
   19aec:	af00      	add	r7, sp, #0
   19aee:	6078      	str	r0, [r7, #4]
    vstr_t vstr;
    mp_print_t print;
    vstr_init_print(&vstr, 16, &print);
   19af0:	f107 0208 	add.w	r2, r7, #8
   19af4:	f107 0310 	add.w	r3, r7, #16
   19af8:	2110      	movs	r1, #16
   19afa:	4618      	mov	r0, r3
   19afc:	f7e7 fd3b 	bl	1576 <vstr_init_print>
    mp_obj_print_helper(&print, o_in, PRINT_REPR);
   19b00:	f107 0308 	add.w	r3, r7, #8
   19b04:	2201      	movs	r2, #1
   19b06:	6879      	ldr	r1, [r7, #4]
   19b08:	4618      	mov	r0, r3
   19b0a:	f7f4 f8d8 	bl	dcbe <mp_obj_print_helper>
    return mp_obj_new_str_from_vstr(&mp_type_str, &vstr);
   19b0e:	f107 0310 	add.w	r3, r7, #16
   19b12:	4619      	mov	r1, r3
   19b14:	4803      	ldr	r0, [pc, #12]	; (19b24 <mp_builtin_repr+0x3c>)
   19b16:	f7fb fe20 	bl	1575a <mp_obj_new_str_from_vstr>
   19b1a:	4603      	mov	r3, r0
}
   19b1c:	4618      	mov	r0, r3
   19b1e:	3720      	adds	r7, #32
   19b20:	46bd      	mov	sp, r7
   19b22:	bd80      	pop	{r7, pc}
   19b24:	000257b0 	.word	0x000257b0

00019b28 <mp_builtin_round>:
MP_DEFINE_CONST_FUN_OBJ_1(mp_builtin_repr_obj, mp_builtin_repr);

STATIC mp_obj_t mp_builtin_round(size_t n_args, const mp_obj_t *args) {
   19b28:	b580      	push	{r7, lr}
   19b2a:	b084      	sub	sp, #16
   19b2c:	af00      	add	r7, sp, #0
   19b2e:	6078      	str	r0, [r7, #4]
   19b30:	6039      	str	r1, [r7, #0]
    mp_obj_t o_in = args[0];
   19b32:	683b      	ldr	r3, [r7, #0]
   19b34:	681b      	ldr	r3, [r3, #0]
   19b36:	60fb      	str	r3, [r7, #12]
    if (MP_OBJ_IS_INT(o_in)) {
   19b38:	68f8      	ldr	r0, [r7, #12]
   19b3a:	f7ff fce5 	bl	19508 <MP_OBJ_IS_SMALL_INT>
   19b3e:	4603      	mov	r3, r0
   19b40:	2b00      	cmp	r3, #0
   19b42:	d10a      	bne.n	19b5a <mp_builtin_round+0x32>
   19b44:	68f8      	ldr	r0, [r7, #12]
   19b46:	f7ff fcf1 	bl	1952c <MP_OBJ_IS_OBJ>
   19b4a:	4603      	mov	r3, r0
   19b4c:	2b00      	cmp	r3, #0
   19b4e:	d00c      	beq.n	19b6a <mp_builtin_round+0x42>
   19b50:	68fb      	ldr	r3, [r7, #12]
   19b52:	681b      	ldr	r3, [r3, #0]
   19b54:	4a0b      	ldr	r2, [pc, #44]	; (19b84 <mp_builtin_round+0x5c>)
   19b56:	4293      	cmp	r3, r2
   19b58:	d107      	bne.n	19b6a <mp_builtin_round+0x42>
        if (n_args <= 1) {
   19b5a:	687b      	ldr	r3, [r7, #4]
   19b5c:	2b01      	cmp	r3, #1
   19b5e:	d801      	bhi.n	19b64 <mp_builtin_round+0x3c>
            return o_in;
   19b60:	68fb      	ldr	r3, [r7, #12]
   19b62:	e00a      	b.n	19b7a <mp_builtin_round+0x52>
        }

        #if !MICROPY_PY_BUILTINS_ROUND_INT
        mp_raise_NotImplementedError(NULL);
   19b64:	2000      	movs	r0, #0
   19b66:	f7f3 fc2d 	bl	d3c4 <mp_raise_NotImplementedError>
        return mp_obj_new_float(rounded);
    }
    mp_float_t rounded = MICROPY_FLOAT_C_FUN(nearbyint)(val);
    return mp_obj_new_int_from_float(rounded);
#else
    mp_int_t r = mp_obj_get_int(o_in);
   19b6a:	68f8      	ldr	r0, [r7, #12]
   19b6c:	f7f4 fa52 	bl	e014 <mp_obj_get_int>
   19b70:	60b8      	str	r0, [r7, #8]
    return mp_obj_new_int(r);
   19b72:	68b8      	ldr	r0, [r7, #8]
   19b74:	f7f7 f916 	bl	10da4 <mp_obj_new_int>
   19b78:	4603      	mov	r3, r0
#endif
}
   19b7a:	4618      	mov	r0, r3
   19b7c:	3710      	adds	r7, #16
   19b7e:	46bd      	mov	sp, r7
   19b80:	bd80      	pop	{r7, pc}
   19b82:	bf00      	nop
   19b84:	00024bd8 	.word	0x00024bd8

00019b88 <mp_builtin_sum>:
MP_DEFINE_CONST_FUN_OBJ_VAR_BETWEEN(mp_builtin_round_obj, 1, 2, mp_builtin_round);

STATIC mp_obj_t mp_builtin_sum(size_t n_args, const mp_obj_t *args) {
   19b88:	b580      	push	{r7, lr}
   19b8a:	b08a      	sub	sp, #40	; 0x28
   19b8c:	af00      	add	r7, sp, #0
   19b8e:	6078      	str	r0, [r7, #4]
   19b90:	6039      	str	r1, [r7, #0]
    mp_obj_t value;
    switch (n_args) {
   19b92:	687b      	ldr	r3, [r7, #4]
   19b94:	2b01      	cmp	r3, #1
   19b96:	d102      	bne.n	19b9e <mp_builtin_sum+0x16>
        case 1: value = MP_OBJ_NEW_SMALL_INT(0); break;
   19b98:	2301      	movs	r3, #1
   19b9a:	627b      	str	r3, [r7, #36]	; 0x24
   19b9c:	e003      	b.n	19ba6 <mp_builtin_sum+0x1e>
        default: value = args[1]; break;
   19b9e:	683b      	ldr	r3, [r7, #0]
   19ba0:	685b      	ldr	r3, [r3, #4]
   19ba2:	627b      	str	r3, [r7, #36]	; 0x24
   19ba4:	bf00      	nop
    }
    mp_obj_iter_buf_t iter_buf;
    mp_obj_t iterable = mp_getiter(args[0], &iter_buf);
   19ba6:	683b      	ldr	r3, [r7, #0]
   19ba8:	681b      	ldr	r3, [r3, #0]
   19baa:	f107 020c 	add.w	r2, r7, #12
   19bae:	4611      	mov	r1, r2
   19bb0:	4618      	mov	r0, r3
   19bb2:	f7f3 f889 	bl	ccc8 <mp_getiter>
   19bb6:	6238      	str	r0, [r7, #32]
    mp_obj_t item;
    while ((item = mp_iternext(iterable)) != MP_OBJ_STOP_ITERATION) {
   19bb8:	e005      	b.n	19bc6 <mp_builtin_sum+0x3e>
        value = mp_binary_op(MP_BINARY_OP_ADD, value, item);
   19bba:	69fa      	ldr	r2, [r7, #28]
   19bbc:	6a79      	ldr	r1, [r7, #36]	; 0x24
   19bbe:	201a      	movs	r0, #26
   19bc0:	f7f2 f812 	bl	bbe8 <mp_binary_op>
   19bc4:	6278      	str	r0, [r7, #36]	; 0x24
    while ((item = mp_iternext(iterable)) != MP_OBJ_STOP_ITERATION) {
   19bc6:	6a38      	ldr	r0, [r7, #32]
   19bc8:	f7f3 f900 	bl	cdcc <mp_iternext>
   19bcc:	61f8      	str	r0, [r7, #28]
   19bce:	69fb      	ldr	r3, [r7, #28]
   19bd0:	2b04      	cmp	r3, #4
   19bd2:	d1f2      	bne.n	19bba <mp_builtin_sum+0x32>
    }
    return value;
   19bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   19bd6:	4618      	mov	r0, r3
   19bd8:	3728      	adds	r7, #40	; 0x28
   19bda:	46bd      	mov	sp, r7
   19bdc:	bd80      	pop	{r7, pc}

00019bde <mp_builtin_sorted>:
MP_DEFINE_CONST_FUN_OBJ_VAR_BETWEEN(mp_builtin_sum_obj, 1, 2, mp_builtin_sum);

STATIC mp_obj_t mp_builtin_sorted(size_t n_args, const mp_obj_t *args, mp_map_t *kwargs) {
   19bde:	b590      	push	{r4, r7, lr}
   19be0:	b087      	sub	sp, #28
   19be2:	af00      	add	r7, sp, #0
   19be4:	60f8      	str	r0, [r7, #12]
   19be6:	60b9      	str	r1, [r7, #8]
   19be8:	607a      	str	r2, [r7, #4]
    if (n_args > 1) {
   19bea:	68fb      	ldr	r3, [r7, #12]
   19bec:	2b01      	cmp	r3, #1
   19bee:	d902      	bls.n	19bf6 <mp_builtin_sorted+0x18>
        mp_raise_TypeError("must use keyword argument for key function");
   19bf0:	480b      	ldr	r0, [pc, #44]	; (19c20 <mp_builtin_sorted+0x42>)
   19bf2:	f7f3 fbcb 	bl	d38c <mp_raise_TypeError>
    }
    mp_obj_t self = mp_type_list.make_new(&mp_type_list, 1, 0, args);
   19bf6:	4b0b      	ldr	r3, [pc, #44]	; (19c24 <mp_builtin_sorted+0x46>)
   19bf8:	68dc      	ldr	r4, [r3, #12]
   19bfa:	68bb      	ldr	r3, [r7, #8]
   19bfc:	2200      	movs	r2, #0
   19bfe:	2101      	movs	r1, #1
   19c00:	4808      	ldr	r0, [pc, #32]	; (19c24 <mp_builtin_sorted+0x46>)
   19c02:	47a0      	blx	r4
   19c04:	4603      	mov	r3, r0
   19c06:	617b      	str	r3, [r7, #20]
    mp_obj_list_sort(1, &self, kwargs);
   19c08:	f107 0314 	add.w	r3, r7, #20
   19c0c:	687a      	ldr	r2, [r7, #4]
   19c0e:	4619      	mov	r1, r3
   19c10:	2001      	movs	r0, #1
   19c12:	f7f7 fdf8 	bl	11806 <mp_obj_list_sort>

    return self;
   19c16:	697b      	ldr	r3, [r7, #20]
}
   19c18:	4618      	mov	r0, r3
   19c1a:	371c      	adds	r7, #28
   19c1c:	46bd      	mov	sp, r7
   19c1e:	bd90      	pop	{r4, r7, pc}
   19c20:	0002652c 	.word	0x0002652c
   19c24:	00024e44 	.word	0x00024e44

00019c28 <mp_load_attr_default>:
MP_DEFINE_CONST_FUN_OBJ_KW(mp_builtin_sorted_obj, 1, mp_builtin_sorted);

// See mp_load_attr() if making any changes
static inline mp_obj_t mp_load_attr_default(mp_obj_t base, qstr attr, mp_obj_t defval) {
   19c28:	b580      	push	{r7, lr}
   19c2a:	b086      	sub	sp, #24
   19c2c:	af00      	add	r7, sp, #0
   19c2e:	60f8      	str	r0, [r7, #12]
   19c30:	60b9      	str	r1, [r7, #8]
   19c32:	607a      	str	r2, [r7, #4]
    mp_obj_t dest[2];
    // use load_method, raising or not raising exception
    ((defval == MP_OBJ_NULL) ? mp_load_method : mp_load_method_maybe)(base, attr, dest);
   19c34:	687b      	ldr	r3, [r7, #4]
   19c36:	2b00      	cmp	r3, #0
   19c38:	d101      	bne.n	19c3e <mp_load_attr_default+0x16>
   19c3a:	4b0e      	ldr	r3, [pc, #56]	; (19c74 <mp_load_attr_default+0x4c>)
   19c3c:	e000      	b.n	19c40 <mp_load_attr_default+0x18>
   19c3e:	4b0e      	ldr	r3, [pc, #56]	; (19c78 <mp_load_attr_default+0x50>)
   19c40:	f107 0210 	add.w	r2, r7, #16
   19c44:	68b9      	ldr	r1, [r7, #8]
   19c46:	68f8      	ldr	r0, [r7, #12]
   19c48:	4798      	blx	r3
    if (dest[0] == MP_OBJ_NULL) {
   19c4a:	693b      	ldr	r3, [r7, #16]
   19c4c:	2b00      	cmp	r3, #0
   19c4e:	d101      	bne.n	19c54 <mp_load_attr_default+0x2c>
        return defval;
   19c50:	687b      	ldr	r3, [r7, #4]
   19c52:	e00b      	b.n	19c6c <mp_load_attr_default+0x44>
    } else if (dest[1] == MP_OBJ_NULL) {
   19c54:	697b      	ldr	r3, [r7, #20]
   19c56:	2b00      	cmp	r3, #0
   19c58:	d101      	bne.n	19c5e <mp_load_attr_default+0x36>
        // load_method returned just a normal attribute
        return dest[0];
   19c5a:	693b      	ldr	r3, [r7, #16]
   19c5c:	e006      	b.n	19c6c <mp_load_attr_default+0x44>
    } else {
        // load_method returned a method, so build a bound method object
        return mp_obj_new_bound_meth(dest[0], dest[1]);
   19c5e:	693b      	ldr	r3, [r7, #16]
   19c60:	697a      	ldr	r2, [r7, #20]
   19c62:	4611      	mov	r1, r2
   19c64:	4618      	mov	r0, r3
   19c66:	f7f4 fd3e 	bl	e6e6 <mp_obj_new_bound_meth>
   19c6a:	4603      	mov	r3, r0
    }
}
   19c6c:	4618      	mov	r0, r3
   19c6e:	3718      	adds	r7, #24
   19c70:	46bd      	mov	sp, r7
   19c72:	bd80      	pop	{r7, pc}
   19c74:	0000cbad 	.word	0x0000cbad
   19c78:	0000cae9 	.word	0x0000cae9

00019c7c <mp_builtin_getattr>:

STATIC mp_obj_t mp_builtin_getattr(size_t n_args, const mp_obj_t *args) {
   19c7c:	b590      	push	{r4, r7, lr}
   19c7e:	b085      	sub	sp, #20
   19c80:	af00      	add	r7, sp, #0
   19c82:	6078      	str	r0, [r7, #4]
   19c84:	6039      	str	r1, [r7, #0]
    mp_obj_t defval = MP_OBJ_NULL;
   19c86:	2300      	movs	r3, #0
   19c88:	60fb      	str	r3, [r7, #12]
    if (n_args > 2) {
   19c8a:	687b      	ldr	r3, [r7, #4]
   19c8c:	2b02      	cmp	r3, #2
   19c8e:	d902      	bls.n	19c96 <mp_builtin_getattr+0x1a>
        defval = args[2];
   19c90:	683b      	ldr	r3, [r7, #0]
   19c92:	689b      	ldr	r3, [r3, #8]
   19c94:	60fb      	str	r3, [r7, #12]
    }
    return mp_load_attr_default(args[0], mp_obj_str_get_qstr(args[1]), defval);
   19c96:	683b      	ldr	r3, [r7, #0]
   19c98:	681c      	ldr	r4, [r3, #0]
   19c9a:	683b      	ldr	r3, [r7, #0]
   19c9c:	3304      	adds	r3, #4
   19c9e:	681b      	ldr	r3, [r3, #0]
   19ca0:	4618      	mov	r0, r3
   19ca2:	f7fb feb5 	bl	15a10 <mp_obj_str_get_qstr>
   19ca6:	4603      	mov	r3, r0
   19ca8:	68fa      	ldr	r2, [r7, #12]
   19caa:	4619      	mov	r1, r3
   19cac:	4620      	mov	r0, r4
   19cae:	f7ff ffbb 	bl	19c28 <mp_load_attr_default>
   19cb2:	4603      	mov	r3, r0
}
   19cb4:	4618      	mov	r0, r3
   19cb6:	3714      	adds	r7, #20
   19cb8:	46bd      	mov	sp, r7
   19cba:	bd90      	pop	{r4, r7, pc}

00019cbc <mp_builtin_setattr>:
MP_DEFINE_CONST_FUN_OBJ_VAR_BETWEEN(mp_builtin_getattr_obj, 2, 3, mp_builtin_getattr);

STATIC mp_obj_t mp_builtin_setattr(mp_obj_t base, mp_obj_t attr, mp_obj_t value) {
   19cbc:	b580      	push	{r7, lr}
   19cbe:	b084      	sub	sp, #16
   19cc0:	af00      	add	r7, sp, #0
   19cc2:	60f8      	str	r0, [r7, #12]
   19cc4:	60b9      	str	r1, [r7, #8]
   19cc6:	607a      	str	r2, [r7, #4]
    mp_store_attr(base, mp_obj_str_get_qstr(attr), value);
   19cc8:	68b8      	ldr	r0, [r7, #8]
   19cca:	f7fb fea1 	bl	15a10 <mp_obj_str_get_qstr>
   19cce:	4603      	mov	r3, r0
   19cd0:	687a      	ldr	r2, [r7, #4]
   19cd2:	4619      	mov	r1, r3
   19cd4:	68f8      	ldr	r0, [r7, #12]
   19cd6:	f7f2 ffc3 	bl	cc60 <mp_store_attr>
    return mp_const_none;
   19cda:	4b02      	ldr	r3, [pc, #8]	; (19ce4 <mp_builtin_setattr+0x28>)
}
   19cdc:	4618      	mov	r0, r3
   19cde:	3710      	adds	r7, #16
   19ce0:	46bd      	mov	sp, r7
   19ce2:	bd80      	pop	{r7, pc}
   19ce4:	0002511c 	.word	0x0002511c

00019ce8 <mp_builtin_hasattr>:
    return mp_builtin_setattr(base, attr, MP_OBJ_NULL);
}
MP_DEFINE_CONST_FUN_OBJ_2(mp_builtin_delattr_obj, mp_builtin_delattr);
#endif

STATIC mp_obj_t mp_builtin_hasattr(mp_obj_t object_in, mp_obj_t attr_in) {
   19ce8:	b580      	push	{r7, lr}
   19cea:	b086      	sub	sp, #24
   19cec:	af00      	add	r7, sp, #0
   19cee:	6078      	str	r0, [r7, #4]
   19cf0:	6039      	str	r1, [r7, #0]
    qstr attr = mp_obj_str_get_qstr(attr_in);
   19cf2:	6838      	ldr	r0, [r7, #0]
   19cf4:	f7fb fe8c 	bl	15a10 <mp_obj_str_get_qstr>
   19cf8:	6178      	str	r0, [r7, #20]
    mp_obj_t dest[2];
    mp_load_method_protected(object_in, attr, dest, false);
   19cfa:	f107 020c 	add.w	r2, r7, #12
   19cfe:	2300      	movs	r3, #0
   19d00:	6979      	ldr	r1, [r7, #20]
   19d02:	6878      	ldr	r0, [r7, #4]
   19d04:	f7f2 ff78 	bl	cbf8 <mp_load_method_protected>
    return mp_obj_new_bool(dest[0] != MP_OBJ_NULL);
   19d08:	68fb      	ldr	r3, [r7, #12]
   19d0a:	2b00      	cmp	r3, #0
   19d0c:	bf14      	ite	ne
   19d0e:	2301      	movne	r3, #1
   19d10:	2300      	moveq	r3, #0
   19d12:	b2db      	uxtb	r3, r3
   19d14:	4618      	mov	r0, r3
   19d16:	f7ff fc3c 	bl	19592 <mp_obj_new_bool>
   19d1a:	4603      	mov	r3, r0
}
   19d1c:	4618      	mov	r0, r3
   19d1e:	3718      	adds	r7, #24
   19d20:	46bd      	mov	sp, r7
   19d22:	bd80      	pop	{r7, pc}

00019d24 <mp_builtin_globals>:
MP_DEFINE_CONST_FUN_OBJ_2(mp_builtin_hasattr_obj, mp_builtin_hasattr);

STATIC mp_obj_t mp_builtin_globals(void) {
   19d24:	b580      	push	{r7, lr}
   19d26:	af00      	add	r7, sp, #0
    return MP_OBJ_FROM_PTR(mp_globals_get());
   19d28:	f7ff fc64 	bl	195f4 <mp_globals_get>
   19d2c:	4603      	mov	r3, r0
}
   19d2e:	4618      	mov	r0, r3
   19d30:	bd80      	pop	{r7, pc}

00019d32 <mp_builtin_locals>:
MP_DEFINE_CONST_FUN_OBJ_0(mp_builtin_globals_obj, mp_builtin_globals);

STATIC mp_obj_t mp_builtin_locals(void) {
   19d32:	b580      	push	{r7, lr}
   19d34:	af00      	add	r7, sp, #0
    return MP_OBJ_FROM_PTR(mp_locals_get());
   19d36:	f7ff fc41 	bl	195bc <mp_locals_get>
   19d3a:	4603      	mov	r3, r0
}
   19d3c:	4618      	mov	r0, r3
   19d3e:	bd80      	pop	{r7, pc}

00019d40 <mp_micropython_opt_level>:

// Various builtins specific to MicroPython runtime,
// living in micropython module

#if MICROPY_ENABLE_COMPILER
STATIC mp_obj_t mp_micropython_opt_level(size_t n_args, const mp_obj_t *args) {
   19d40:	b580      	push	{r7, lr}
   19d42:	b082      	sub	sp, #8
   19d44:	af00      	add	r7, sp, #0
   19d46:	6078      	str	r0, [r7, #4]
   19d48:	6039      	str	r1, [r7, #0]
    if (n_args == 0) {
   19d4a:	687b      	ldr	r3, [r7, #4]
   19d4c:	2b00      	cmp	r3, #0
   19d4e:	d106      	bne.n	19d5e <mp_micropython_opt_level+0x1e>
        return MP_OBJ_NEW_SMALL_INT(MP_STATE_VM(mp_optimise_value));
   19d50:	4b0a      	ldr	r3, [pc, #40]	; (19d7c <mp_micropython_opt_level+0x3c>)
   19d52:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
   19d56:	005b      	lsls	r3, r3, #1
   19d58:	f043 0301 	orr.w	r3, r3, #1
   19d5c:	e00a      	b.n	19d74 <mp_micropython_opt_level+0x34>
    } else {
        MP_STATE_VM(mp_optimise_value) = mp_obj_get_int(args[0]);
   19d5e:	683b      	ldr	r3, [r7, #0]
   19d60:	681b      	ldr	r3, [r3, #0]
   19d62:	4618      	mov	r0, r3
   19d64:	f7f4 f956 	bl	e014 <mp_obj_get_int>
   19d68:	4603      	mov	r3, r0
   19d6a:	461a      	mov	r2, r3
   19d6c:	4b03      	ldr	r3, [pc, #12]	; (19d7c <mp_micropython_opt_level+0x3c>)
   19d6e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
        return mp_const_none;
   19d72:	4b03      	ldr	r3, [pc, #12]	; (19d80 <mp_micropython_opt_level+0x40>)
    }
}
   19d74:	4618      	mov	r0, r3
   19d76:	3708      	adds	r7, #8
   19d78:	46bd      	mov	sp, r7
   19d7a:	bd80      	pop	{r7, pc}
   19d7c:	20001248 	.word	0x20001248
   19d80:	0002511c 	.word	0x0002511c

00019d84 <mp_micropython_heap_lock>:
}
STATIC MP_DEFINE_CONST_FUN_OBJ_0(mp_micropython_pystack_use_obj, mp_micropython_pystack_use);
#endif

#if MICROPY_ENABLE_GC
STATIC mp_obj_t mp_micropython_heap_lock(void) {
   19d84:	b580      	push	{r7, lr}
   19d86:	af00      	add	r7, sp, #0
    gc_lock();
   19d88:	f7e6 fc0c 	bl	5a4 <gc_lock>
    return mp_const_none;
   19d8c:	4b01      	ldr	r3, [pc, #4]	; (19d94 <mp_micropython_heap_lock+0x10>)
}
   19d8e:	4618      	mov	r0, r3
   19d90:	bd80      	pop	{r7, pc}
   19d92:	bf00      	nop
   19d94:	0002511c 	.word	0x0002511c

00019d98 <mp_micropython_heap_unlock>:
STATIC MP_DEFINE_CONST_FUN_OBJ_0(mp_micropython_heap_lock_obj, mp_micropython_heap_lock);

STATIC mp_obj_t mp_micropython_heap_unlock(void) {
   19d98:	b580      	push	{r7, lr}
   19d9a:	af00      	add	r7, sp, #0
    gc_unlock();
   19d9c:	f7e6 fc0c 	bl	5b8 <gc_unlock>
    return mp_const_none;
   19da0:	4b01      	ldr	r3, [pc, #4]	; (19da8 <mp_micropython_heap_unlock+0x10>)
}
   19da2:	4618      	mov	r0, r3
   19da4:	bd80      	pop	{r7, pc}
   19da6:	bf00      	nop
   19da8:	0002511c 	.word	0x0002511c

00019dac <mp_execute_bytecode>:
// sp points to bottom of stack which grows up
// returns:
//  MP_VM_RETURN_NORMAL, sp valid, return value in *sp
//  MP_VM_RETURN_YIELD, ip, sp valid, yielded value in *sp
//  MP_VM_RETURN_EXCEPTION, exception in fastn[0]
mp_vm_return_kind_t mp_execute_bytecode(mp_code_state_t *code_state, volatile mp_obj_t inject_exc) {
   19dac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
#endif
    // Pointers which are constant for particular invocation of mp_execute_bytecode()
    mp_obj_t * /*const*/ fastn;
    mp_exc_stack_t * /*const*/ exc_stack;
    {
        size_t n_state = mp_decode_uint_value(code_state->fun_bc->bytecode);
   19db0:	6803      	ldr	r3, [r0, #0]
                        DISPATCH();
                    } else {
                        assert(ret_kind == MP_VM_RETURN_EXCEPTION);
                        // Pop exhausted gen
                        sp--;
                        if (EXC_MATCH(ret_value, MP_OBJ_FROM_PTR(&mp_type_StopIteration))) {
   19db2:	f8df b3c8 	ldr.w	fp, [pc, #968]	; 1a17c <mp_execute_bytecode+0x3d0>
mp_vm_return_kind_t mp_execute_bytecode(mp_code_state_t *code_state, volatile mp_obj_t inject_exc) {
   19db6:	b095      	sub	sp, #84	; 0x54
   19db8:	4680      	mov	r8, r0
        size_t n_state = mp_decode_uint_value(code_state->fun_bc->bytecode);
   19dba:	6898      	ldr	r0, [r3, #8]
mp_vm_return_kind_t mp_execute_bytecode(mp_code_state_t *code_state, volatile mp_obj_t inject_exc) {
   19dbc:	9103      	str	r1, [sp, #12]
        size_t n_state = mp_decode_uint_value(code_state->fun_bc->bytecode);
   19dbe:	f000 ffa2 	bl	1ad06 <mp_decode_uint_value>
    volatile bool currently_in_except_block = MP_TAGPTR_TAG0(code_state->exc_sp); // 0 or 1, to detect nested exceptions
   19dc2:	f8d8 300c 	ldr.w	r3, [r8, #12]
   19dc6:	1d02      	adds	r2, r0, #4
   19dc8:	0092      	lsls	r2, r2, #2
   19dca:	f003 0101 	and.w	r1, r3, #1
        exc_stack = (mp_exc_stack_t*)(code_state->state + n_state);
   19dce:	eb08 0702 	add.w	r7, r8, r2
    mp_exc_stack_t *volatile exc_sp = MP_TAGPTR_PTR(code_state->exc_sp); // stack grows up, exc_sp points to top of stack
   19dd2:	f023 0303 	bic.w	r3, r3, #3
        fastn = &code_state->state[n_state - 1];
   19dd6:	3801      	subs	r0, #1
    volatile bool currently_in_except_block = MP_TAGPTR_TAG0(code_state->exc_sp); // 0 or 1, to detect nested exceptions
   19dd8:	f88d 1017 	strb.w	r1, [sp, #23]
        fastn = &code_state->state[n_state - 1];
   19ddc:	9001      	str	r0, [sp, #4]
        exc_stack = (mp_exc_stack_t*)(code_state->state + n_state);
   19dde:	3704      	adds	r7, #4
        fastn = &code_state->state[n_state - 1];
   19de0:	eb08 0a02 	add.w	sl, r8, r2
    mp_exc_stack_t *volatile exc_sp = MP_TAGPTR_PTR(code_state->exc_sp); // stack grows up, exc_sp points to top of stack
   19de4:	9306      	str	r3, [sp, #24]
        if (nlr_push(&nlr) == 0) {
   19de6:	a808      	add	r0, sp, #32
   19de8:	f7e6 fa68 	bl	2bc <nlr_push>
   19dec:	2800      	cmp	r0, #0
   19dee:	f040 8092 	bne.w	19f16 <mp_execute_bytecode+0x16a>
            if (inject_exc != MP_OBJ_NULL && *ip != MP_BC_YIELD_FROM) {
   19df2:	9b03      	ldr	r3, [sp, #12]
            const byte *ip = code_state->ip;
   19df4:	f8d8 4004 	ldr.w	r4, [r8, #4]
            mp_obj_t *sp = code_state->sp;
   19df8:	f8d8 5008 	ldr.w	r5, [r8, #8]
            if (inject_exc != MP_OBJ_NULL && *ip != MP_BC_YIELD_FROM) {
   19dfc:	2b00      	cmp	r3, #0
   19dfe:	f000 809f 	beq.w	19f40 <mp_execute_bytecode+0x194>
   19e02:	7823      	ldrb	r3, [r4, #0]
   19e04:	2b5e      	cmp	r3, #94	; 0x5e
   19e06:	f000 809b 	beq.w	19f40 <mp_execute_bytecode+0x194>
                mp_obj_t exc = inject_exc;
   19e0a:	9b03      	ldr	r3, [sp, #12]
                inject_exc = MP_OBJ_NULL;
   19e0c:	9003      	str	r0, [sp, #12]
                exc = mp_make_raise_obj(exc);
   19e0e:	4618      	mov	r0, r3
   19e10:	f7f3 f8fc 	bl	d00c <mp_make_raise_obj>
   19e14:	4604      	mov	r4, r0
                RAISE(exc);
   19e16:	f7e6 fa3f 	bl	298 <nlr_pop>
   19e1a:	9409      	str	r4, [sp, #36]	; 0x24
            #if SELECTIVE_EXC_IP
            // with selective ip, we store the ip 1 byte past the opcode, so move ptr back
            code_state->ip -= 1;
            #endif

            if (mp_obj_is_subclass_fast(MP_OBJ_FROM_PTR(((mp_obj_base_t*)nlr.ret_val)->type), MP_OBJ_FROM_PTR(&mp_type_StopIteration))) {
   19e1c:	6820      	ldr	r0, [r4, #0]
   19e1e:	4659      	mov	r1, fp
   19e20:	f7fd fd20 	bl	17864 <mp_obj_is_subclass_fast>
   19e24:	b148      	cbz	r0, 19e3a <mp_execute_bytecode+0x8e>
                if (code_state->ip) {
   19e26:	f8d8 3004 	ldr.w	r3, [r8, #4]
   19e2a:	b133      	cbz	r3, 19e3a <mp_execute_bytecode+0x8e>
                    // check if it's a StopIteration within a for block
                    if (*code_state->ip == MP_BC_FOR_ITER) {
   19e2c:	781a      	ldrb	r2, [r3, #0]
   19e2e:	2a43      	cmp	r2, #67	; 0x43
   19e30:	f000 85de 	beq.w	1a9f0 <mp_execute_bytecode+0xc44>
                        const byte *ip = code_state->ip + 1;
                        DECODE_ULABEL; // the jump offset if iteration finishes; for labels are always forward
                        code_state->ip = ip + ulab; // jump to after for-block
                        code_state->sp -= MP_OBJ_ITER_BUF_NSLOTS; // pop the exhausted iterator
                        goto outer_dispatch_loop; // continue with dispatch loop
                    } else if (*code_state->ip == MP_BC_YIELD_FROM) {
   19e34:	2a5e      	cmp	r2, #94	; 0x5e
   19e36:	f000 867a 	beq.w	1ab2e <mp_execute_bytecode+0xd82>
unwind_loop:
#endif
            // set file and line number that the exception occurred at
            // TODO: don't set traceback for exceptions re-raised by END_FINALLY.
            // But consider how to handle nested exceptions.
            if (nlr.ret_val != &mp_const_GeneratorExit_obj) {
   19e3a:	4bce      	ldr	r3, [pc, #824]	; (1a174 <mp_execute_bytecode+0x3c8>)
   19e3c:	9a09      	ldr	r2, [sp, #36]	; 0x24
   19e3e:	429a      	cmp	r2, r3
   19e40:	d049      	beq.n	19ed6 <mp_execute_bytecode+0x12a>
                const byte *ip = code_state->fun_bc->bytecode;
   19e42:	f8d8 3000 	ldr.w	r3, [r8]
                ip = mp_decode_uint_skip(ip); // skip n_state
   19e46:	6898      	ldr	r0, [r3, #8]
   19e48:	f000 ff6a 	bl	1ad20 <mp_decode_uint_skip>
                ip = mp_decode_uint_skip(ip); // skip n_exc_stack
   19e4c:	f000 ff68 	bl	1ad20 <mp_decode_uint_skip>
                ip++; // skip scope_params
                ip++; // skip n_pos_args
                ip++; // skip n_kwonly_args
                ip++; // skip n_def_pos_args
                size_t bc = code_state->ip - ip;
   19e50:	f8d8 3004 	ldr.w	r3, [r8, #4]
                ip++; // skip n_def_pos_args
   19e54:	1d05      	adds	r5, r0, #4
                size_t code_info_size = mp_decode_uint_value(ip);
   19e56:	4628      	mov	r0, r5
                size_t bc = code_state->ip - ip;
   19e58:	1b5c      	subs	r4, r3, r5
                size_t code_info_size = mp_decode_uint_value(ip);
   19e5a:	f000 ff54 	bl	1ad06 <mp_decode_uint_value>
   19e5e:	4606      	mov	r6, r0
                ip = mp_decode_uint_skip(ip); // skip code_info_size
   19e60:	4628      	mov	r0, r5
   19e62:	f000 ff5d 	bl	1ad20 <mp_decode_uint_skip>
                bc -= code_info_size;
   19e66:	eba4 0e06 	sub.w	lr, r4, r6
                qstr source_file = mp_decode_uint_value(ip);
                ip = mp_decode_uint_skip(ip);
                #endif
                size_t source_line = 1;
                size_t c;
                while ((c = *ip)) {
   19e6a:	7904      	ldrb	r4, [r0, #4]
                qstr block_name = ip[0] | (ip[1] << 8);
   19e6c:	8803      	ldrh	r3, [r0, #0]
                qstr source_file = ip[2] | (ip[3] << 8);
   19e6e:	8841      	ldrh	r1, [r0, #2]
                while ((c = *ip)) {
   19e70:	2201      	movs	r2, #1
                ip += 4;
   19e72:	3004      	adds	r0, #4
                while ((c = *ip)) {
   19e74:	b96c      	cbnz	r4, 19e92 <mp_execute_bytecode+0xe6>
   19e76:	e01b      	b.n	19eb0 <mp_execute_bytecode+0x104>
                    size_t b, l;
                    if ((c & 0x80) == 0) {
                        // 0b0LLBBBBB encoding
                        b = c & 0x1f;
   19e78:	f004 061f 	and.w	r6, r4, #31
                        // 0b1LLLBBBB 0bLLLLLLLL encoding (l's LSB in second byte)
                        b = c & 0xf;
                        l = ((c << 4) & 0x700) | ip[1];
                        ip += 2;
                    }
                    if (bc >= b) {
   19e7c:	4576      	cmp	r6, lr
                        ip += 1;
   19e7e:	f100 0001 	add.w	r0, r0, #1
                        l = c >> 5;
   19e82:	ea4f 1554 	mov.w	r5, r4, lsr #5
                    if (bc >= b) {
   19e86:	d813      	bhi.n	19eb0 <mp_execute_bytecode+0x104>
                while ((c = *ip)) {
   19e88:	7804      	ldrb	r4, [r0, #0]
                        bc -= b;
   19e8a:	ebae 0e06 	sub.w	lr, lr, r6
                        source_line += l;
   19e8e:	442a      	add	r2, r5
                while ((c = *ip)) {
   19e90:	b174      	cbz	r4, 19eb0 <mp_execute_bytecode+0x104>
                    if ((c & 0x80) == 0) {
   19e92:	0625      	lsls	r5, r4, #24
   19e94:	d5f0      	bpl.n	19e78 <mp_execute_bytecode+0xcc>
                        l = ((c << 4) & 0x700) | ip[1];
   19e96:	f890 c001 	ldrb.w	ip, [r0, #1]
   19e9a:	0125      	lsls	r5, r4, #4
                        b = c & 0xf;
   19e9c:	f004 060f 	and.w	r6, r4, #15
                        l = ((c << 4) & 0x700) | ip[1];
   19ea0:	f405 65e0 	and.w	r5, r5, #1792	; 0x700
                    if (bc >= b) {
   19ea4:	4576      	cmp	r6, lr
                        l = ((c << 4) & 0x700) | ip[1];
   19ea6:	ea45 050c 	orr.w	r5, r5, ip
                        ip += 2;
   19eaa:	f100 0002 	add.w	r0, r0, #2
                    if (bc >= b) {
   19eae:	d9eb      	bls.n	19e88 <mp_execute_bytecode+0xdc>
                    } else {
                        // found source line corresponding to bytecode offset
                        break;
                    }
                }
                mp_obj_exception_add_traceback(MP_OBJ_FROM_PTR(nlr.ret_val), source_file, source_line, block_name);
   19eb0:	9809      	ldr	r0, [sp, #36]	; 0x24
   19eb2:	f7f5 fed3 	bl	fc5c <mp_obj_exception_add_traceback>
            }

            while (currently_in_except_block) {
   19eb6:	f89d 3017 	ldrb.w	r3, [sp, #23]
   19eba:	b183      	cbz	r3, 19ede <mp_execute_bytecode+0x132>
                // nested exception

                assert(exc_sp >= exc_stack);
   19ebc:	9b06      	ldr	r3, [sp, #24]
   19ebe:	429f      	cmp	r7, r3
   19ec0:	f200 867a 	bhi.w	1abb8 <mp_execute_bytecode+0xe0c>

                // TODO make a proper message for nested exception
                // at the moment we are just raising the very last exception (the one that caused the nested exception)

                // move up to previous exception handler
                POP_EXC_BLOCK();
   19ec4:	9b06      	ldr	r3, [sp, #24]
   19ec6:	685b      	ldr	r3, [r3, #4]
   19ec8:	f003 0301 	and.w	r3, r3, #1
   19ecc:	f88d 3017 	strb.w	r3, [sp, #23]
   19ed0:	9b06      	ldr	r3, [sp, #24]
   19ed2:	3b0c      	subs	r3, #12
   19ed4:	9306      	str	r3, [sp, #24]
            while (currently_in_except_block) {
   19ed6:	f89d 3017 	ldrb.w	r3, [sp, #23]
   19eda:	2b00      	cmp	r3, #0
   19edc:	d1ee      	bne.n	19ebc <mp_execute_bytecode+0x110>
            }

            if (exc_sp >= exc_stack) {
   19ede:	9b06      	ldr	r3, [sp, #24]
   19ee0:	429f      	cmp	r7, r3
   19ee2:	f200 8646 	bhi.w	1ab72 <mp_execute_bytecode+0xdc6>
                // set flag to indicate that we are now handling an exception
                currently_in_except_block = 1;
   19ee6:	2301      	movs	r3, #1
   19ee8:	f88d 3017 	strb.w	r3, [sp, #23]

                // catch exception and pass to byte code
                code_state->ip = exc_sp->handler;
   19eec:	9a06      	ldr	r2, [sp, #24]
                mp_obj_t *sp = MP_TAGPTR_PTR(exc_sp->val_sp);
   19eee:	9b06      	ldr	r3, [sp, #24]
                // save this exception in the stack so it can be used in a reraise, if needed
                exc_sp->prev_exc = nlr.ret_val;
   19ef0:	9906      	ldr	r1, [sp, #24]
                mp_obj_t *sp = MP_TAGPTR_PTR(exc_sp->val_sp);
   19ef2:	685b      	ldr	r3, [r3, #4]
                code_state->ip = exc_sp->handler;
   19ef4:	6810      	ldr	r0, [r2, #0]
                exc_sp->prev_exc = nlr.ret_val;
   19ef6:	9a09      	ldr	r2, [sp, #36]	; 0x24
                code_state->ip = exc_sp->handler;
   19ef8:	f8c8 0004 	str.w	r0, [r8, #4]
                // push exception object so it can be handled by bytecode
                PUSH(MP_OBJ_FROM_PTR(nlr.ret_val));
   19efc:	f023 0303 	bic.w	r3, r3, #3
                exc_sp->prev_exc = nlr.ret_val;
   19f00:	608a      	str	r2, [r1, #8]
                PUSH(MP_OBJ_FROM_PTR(nlr.ret_val));
   19f02:	f843 2f04 	str.w	r2, [r3, #4]!
        if (nlr_push(&nlr) == 0) {
   19f06:	a808      	add	r0, sp, #32
                code_state->sp = sp;
   19f08:	f8c8 3008 	str.w	r3, [r8, #8]
        if (nlr_push(&nlr) == 0) {
   19f0c:	f7e6 f9d6 	bl	2bc <nlr_push>
   19f10:	2800      	cmp	r0, #0
   19f12:	f43f af6e 	beq.w	19df2 <mp_execute_bytecode+0x46>
   19f16:	9c09      	ldr	r4, [sp, #36]	; 0x24
   19f18:	e780      	b.n	19e1c <mp_execute_bytecode+0x70>
                    assert(exc_sp >= exc_stack);
   19f1a:	9b06      	ldr	r3, [sp, #24]
   19f1c:	429f      	cmp	r7, r3
   19f1e:	f200 8683 	bhi.w	1ac28 <mp_execute_bytecode+0xe7c>
                    assert(currently_in_except_block);
   19f22:	f89d 3017 	ldrb.w	r3, [sp, #23]
   19f26:	2b00      	cmp	r3, #0
   19f28:	f000 8685 	beq.w	1ac36 <mp_execute_bytecode+0xe8a>
                    POP_EXC_BLOCK();
   19f2c:	9b06      	ldr	r3, [sp, #24]
   19f2e:	685b      	ldr	r3, [r3, #4]
   19f30:	f003 0301 	and.w	r3, r3, #1
   19f34:	f88d 3017 	strb.w	r3, [sp, #23]
   19f38:	9b06      	ldr	r3, [sp, #24]
   19f3a:	3b0c      	subs	r3, #12
                switch (*ip++) {
   19f3c:	4634      	mov	r4, r6
                    POP_EXC_BLOCK();
   19f3e:	9306      	str	r3, [sp, #24]
                MARK_EXC_IP_GLOBAL();
   19f40:	f8c8 4004 	str.w	r4, [r8, #4]
                switch (*ip++) {
   19f44:	7820      	ldrb	r0, [r4, #0]
   19f46:	f1a0 0310 	sub.w	r3, r0, #16
   19f4a:	1c66      	adds	r6, r4, #1
   19f4c:	2b5a      	cmp	r3, #90	; 0x5a
   19f4e:	f200 8518 	bhi.w	1a982 <mp_execute_bytecode+0xbd6>
   19f52:	a201      	add	r2, pc, #4	; (adr r2, 19f58 <mp_execute_bytecode+0x1ac>)
   19f54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   19f58:	0001a595 	.word	0x0001a595
   19f5c:	0001a58b 	.word	0x0001a58b
   19f60:	0001a581 	.word	0x0001a581
   19f64:	0001a983 	.word	0x0001a983
   19f68:	0001a55d 	.word	0x0001a55d
   19f6c:	0001a983 	.word	0x0001a983
   19f70:	0001a54b 	.word	0x0001a54b
   19f74:	0001a527 	.word	0x0001a527
   19f78:	0001a51d 	.word	0x0001a51d
   19f7c:	0001a4ff 	.word	0x0001a4ff
   19f80:	0001a4d3 	.word	0x0001a4d3
   19f84:	0001a4c1 	.word	0x0001a4c1
   19f88:	0001a4af 	.word	0x0001a4af
   19f8c:	0001a49f 	.word	0x0001a49f
   19f90:	0001a48d 	.word	0x0001a48d
   19f94:	0001a47b 	.word	0x0001a47b
   19f98:	0001a73f 	.word	0x0001a73f
   19f9c:	0001a727 	.word	0x0001a727
   19fa0:	0001a705 	.word	0x0001a705
   19fa4:	0001a6df 	.word	0x0001a6df
   19fa8:	0001a6cf 	.word	0x0001a6cf
   19fac:	0001a6bf 	.word	0x0001a6bf
   19fb0:	0001a6ab 	.word	0x0001a6ab
   19fb4:	0001a697 	.word	0x0001a697
   19fb8:	0001a66d 	.word	0x0001a66d
   19fbc:	0001a63b 	.word	0x0001a63b
   19fc0:	0001a62f 	.word	0x0001a62f
   19fc4:	0001a623 	.word	0x0001a623
   19fc8:	0001a983 	.word	0x0001a983
   19fcc:	0001a983 	.word	0x0001a983
   19fd0:	0001a983 	.word	0x0001a983
   19fd4:	0001a983 	.word	0x0001a983
   19fd8:	0001a619 	.word	0x0001a619
   19fdc:	0001a609 	.word	0x0001a609
   19fe0:	0001a111 	.word	0x0001a111
   19fe4:	0001a1d1 	.word	0x0001a1d1
   19fe8:	0001a96d 	.word	0x0001a96d
   19fec:	0001a943 	.word	0x0001a943
   19ff0:	0001a92b 	.word	0x0001a92b
   19ff4:	0001a913 	.word	0x0001a913
   19ff8:	0001a8fb 	.word	0x0001a8fb
   19ffc:	0001a8e9 	.word	0x0001a8e9
   1a000:	0001a983 	.word	0x0001a983
   1a004:	0001a983 	.word	0x0001a983
   1a008:	0001a983 	.word	0x0001a983
   1a00c:	0001a887 	.word	0x0001a887
   1a010:	0001a847 	.word	0x0001a847
   1a014:	0001a80f 	.word	0x0001a80f
   1a018:	0001a80f 	.word	0x0001a80f
   1a01c:	0001a107 	.word	0x0001a107
   1a020:	0001a7ff 	.word	0x0001a7ff
   1a024:	0001a7d5 	.word	0x0001a7d5
   1a028:	0001a7bf 	.word	0x0001a7bf
   1a02c:	00019f1b 	.word	0x00019f1b
   1a030:	0001a76f 	.word	0x0001a76f
   1a034:	0001a74f 	.word	0x0001a74f
   1a038:	0001a983 	.word	0x0001a983
   1a03c:	0001a983 	.word	0x0001a983
   1a040:	0001a983 	.word	0x0001a983
   1a044:	0001a983 	.word	0x0001a983
   1a048:	0001a983 	.word	0x0001a983
   1a04c:	0001a983 	.word	0x0001a983
   1a050:	0001a983 	.word	0x0001a983
   1a054:	0001a983 	.word	0x0001a983
   1a058:	0001a1a9 	.word	0x0001a1a9
   1a05c:	0001a181 	.word	0x0001a181
   1a060:	0001a983 	.word	0x0001a983
   1a064:	0001a155 	.word	0x0001a155
   1a068:	0001a13d 	.word	0x0001a13d
   1a06c:	0001a983 	.word	0x0001a983
   1a070:	0001a983 	.word	0x0001a983
   1a074:	0001a5db 	.word	0x0001a5db
   1a078:	0001a983 	.word	0x0001a983
   1a07c:	0001a5b1 	.word	0x0001a5b1
   1a080:	0001a371 	.word	0x0001a371
   1a084:	0001a0e7 	.word	0x0001a0e7
   1a088:	0001a1e1 	.word	0x0001a1e1
   1a08c:	0001a11d 	.word	0x0001a11d
   1a090:	0001a243 	.word	0x0001a243
   1a094:	0001a983 	.word	0x0001a983
   1a098:	0001a215 	.word	0x0001a215
   1a09c:	0001a33f 	.word	0x0001a33f
   1a0a0:	0001a313 	.word	0x0001a313
   1a0a4:	0001a2d9 	.word	0x0001a2d9
   1a0a8:	0001a2a7 	.word	0x0001a2a7
   1a0ac:	0001a447 	.word	0x0001a447
   1a0b0:	0001a411 	.word	0x0001a411
   1a0b4:	0001a3dd 	.word	0x0001a3dd
   1a0b8:	0001a3c3 	.word	0x0001a3c3
   1a0bc:	0001a3ad 	.word	0x0001a3ad
   1a0c0:	0001a39d 	.word	0x0001a39d
                        if (!currently_in_except_block && MP_TAGPTR_TAG1(exc_sp->val_sp)) {
   1a0c4:	f89d 3017 	ldrb.w	r3, [sp, #23]
   1a0c8:	b923      	cbnz	r3, 1a0d4 <mp_execute_bytecode+0x328>
   1a0ca:	9b06      	ldr	r3, [sp, #24]
   1a0cc:	685b      	ldr	r3, [r3, #4]
   1a0ce:	079e      	lsls	r6, r3, #30
   1a0d0:	f100 84e5 	bmi.w	1aa9e <mp_execute_bytecode+0xcf2>
                        POP_EXC_BLOCK();
   1a0d4:	9b06      	ldr	r3, [sp, #24]
   1a0d6:	685b      	ldr	r3, [r3, #4]
   1a0d8:	f003 0301 	and.w	r3, r3, #1
   1a0dc:	f88d 3017 	strb.w	r3, [sp, #23]
   1a0e0:	9b06      	ldr	r3, [sp, #24]
   1a0e2:	3b0c      	subs	r3, #12
   1a0e4:	9306      	str	r3, [sp, #24]
                    while (exc_sp >= exc_stack) {
   1a0e6:	9b06      	ldr	r3, [sp, #24]
   1a0e8:	429f      	cmp	r7, r3
   1a0ea:	d9eb      	bls.n	1a0c4 <mp_execute_bytecode+0x318>
                    nlr_pop();
   1a0ec:	f7e6 f8d4 	bl	298 <nlr_pop>
                    assert(exc_sp == exc_stack - 1);
   1a0f0:	9b06      	ldr	r3, [sp, #24]
                    code_state->sp = sp;
   1a0f2:	f8c8 5008 	str.w	r5, [r8, #8]
                    assert(exc_sp == exc_stack - 1);
   1a0f6:	3f0c      	subs	r7, #12
   1a0f8:	42bb      	cmp	r3, r7
   1a0fa:	f040 85aa 	bne.w	1ac52 <mp_execute_bytecode+0xea6>
                    return MP_VM_RETURN_NORMAL;
   1a0fe:	2000      	movs	r0, #0
                code_state->state[0] = MP_OBJ_FROM_PTR(nlr.ret_val); // put exception here because sp is invalid
                return MP_VM_RETURN_EXCEPTION;
            }
        }
    }
}
   1a100:	b015      	add	sp, #84	; 0x54
   1a102:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                    if (TOP() == mp_const_none) {
   1a106:	682a      	ldr	r2, [r5, #0]
   1a108:	4b1b      	ldr	r3, [pc, #108]	; (1a178 <mp_execute_bytecode+0x3cc>)
   1a10a:	429a      	cmp	r2, r3
   1a10c:	f040 8445 	bne.w	1a99a <mp_execute_bytecode+0xbee>
                        sp--;
   1a110:	3d04      	subs	r5, #4
                switch (*ip++) {
   1a112:	4634      	mov	r4, r6
                    DISPATCH();
   1a114:	e714      	b.n	19f40 <mp_execute_bytecode+0x194>
                        PUSH(ret_value);
   1a116:	9b07      	ldr	r3, [sp, #28]
   1a118:	602b      	str	r3, [r5, #0]
                        goto yield;
   1a11a:	4626      	mov	r6, r4
                    nlr_pop();
   1a11c:	f7e6 f8bc 	bl	298 <nlr_pop>
                    code_state->exc_sp = MP_TAGPTR_MAKE(exc_sp, currently_in_except_block);
   1a120:	f89d 2017 	ldrb.w	r2, [sp, #23]
   1a124:	9b06      	ldr	r3, [sp, #24]
                    code_state->ip = ip;
   1a126:	f8c8 6004 	str.w	r6, [r8, #4]
                    code_state->exc_sp = MP_TAGPTR_MAKE(exc_sp, currently_in_except_block);
   1a12a:	4313      	orrs	r3, r2
                    code_state->sp = sp;
   1a12c:	f8c8 5008 	str.w	r5, [r8, #8]
                    code_state->exc_sp = MP_TAGPTR_MAKE(exc_sp, currently_in_except_block);
   1a130:	f8c8 300c 	str.w	r3, [r8, #12]
                    return MP_VM_RETURN_YIELD;
   1a134:	2001      	movs	r0, #1
}
   1a136:	b015      	add	sp, #84	; 0x54
   1a138:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                    sp -= 2;
   1a13c:	f1a5 0308 	sub.w	r3, r5, #8
                    mp_obj_dict_store(sp[0], sp[2], sp[1]);
   1a140:	f855 2c04 	ldr.w	r2, [r5, #-4]
   1a144:	6829      	ldr	r1, [r5, #0]
   1a146:	f855 0c08 	ldr.w	r0, [r5, #-8]
                switch (*ip++) {
   1a14a:	4634      	mov	r4, r6
                    sp -= 2;
   1a14c:	461d      	mov	r5, r3
                    mp_obj_dict_store(sp[0], sp[2], sp[1]);
   1a14e:	f7f5 fa46 	bl	f5de <mp_obj_dict_store>
                    DISPATCH();
   1a152:	e6f5      	b.n	19f40 <mp_execute_bytecode+0x194>
                switch (*ip++) {
   1a154:	4634      	mov	r4, r6
   1a156:	2000      	movs	r0, #0
                    DECODE_UINT;
   1a158:	f814 3b01 	ldrb.w	r3, [r4], #1
   1a15c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
   1a160:	eb02 10c0 	add.w	r0, r2, r0, lsl #7
   1a164:	061a      	lsls	r2, r3, #24
   1a166:	d4f7      	bmi.n	1a158 <mp_execute_bytecode+0x3ac>
                    PUSH(mp_obj_new_dict(unum));
   1a168:	f7f5 fa18 	bl	f59c <mp_obj_new_dict>
   1a16c:	1d2b      	adds	r3, r5, #4
   1a16e:	6068      	str	r0, [r5, #4]
   1a170:	461d      	mov	r5, r3
                    DISPATCH();
   1a172:	e6e5      	b.n	19f40 <mp_execute_bytecode+0x194>
   1a174:	00023df8 	.word	0x00023df8
   1a178:	0002511c 	.word	0x0002511c
   1a17c:	00023f3c 	.word	0x00023f3c
                switch (*ip++) {
   1a180:	4634      	mov	r4, r6
   1a182:	2000      	movs	r0, #0
                    DECODE_UINT;
   1a184:	f814 3b01 	ldrb.w	r3, [r4], #1
   1a188:	f003 027f 	and.w	r2, r3, #127	; 0x7f
   1a18c:	0619      	lsls	r1, r3, #24
   1a18e:	eb02 10c0 	add.w	r0, r2, r0, lsl #7
   1a192:	d4f7      	bmi.n	1a184 <mp_execute_bytecode+0x3d8>
                    sp -= unum - 1;
   1a194:	ebc0 7380 	rsb	r3, r0, r0, lsl #30
   1a198:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   1a19c:	3504      	adds	r5, #4
                    SET_TOP(mp_obj_new_list(unum, sp));
   1a19e:	4629      	mov	r1, r5
   1a1a0:	f7f7 fd9b 	bl	11cda <mp_obj_new_list>
   1a1a4:	6028      	str	r0, [r5, #0]
                    DISPATCH();
   1a1a6:	e6cb      	b.n	19f40 <mp_execute_bytecode+0x194>
                switch (*ip++) {
   1a1a8:	4634      	mov	r4, r6
   1a1aa:	2000      	movs	r0, #0
                    DECODE_UINT;
   1a1ac:	f814 3b01 	ldrb.w	r3, [r4], #1
   1a1b0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
   1a1b4:	061e      	lsls	r6, r3, #24
   1a1b6:	eb02 10c0 	add.w	r0, r2, r0, lsl #7
   1a1ba:	d4f7      	bmi.n	1a1ac <mp_execute_bytecode+0x400>
                    sp -= unum - 1;
   1a1bc:	ebc0 7380 	rsb	r3, r0, r0, lsl #30
   1a1c0:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   1a1c4:	3504      	adds	r5, #4
                    SET_TOP(mp_obj_new_tuple(unum, sp));
   1a1c6:	4629      	mov	r1, r5
   1a1c8:	f7fc f840 	bl	1624c <mp_obj_new_tuple>
   1a1cc:	6028      	str	r0, [r5, #0]
                    DISPATCH();
   1a1ce:	e6b7      	b.n	19f40 <mp_execute_bytecode+0x194>
                    mp_obj_t top = sp[0];
   1a1d0:	682b      	ldr	r3, [r5, #0]
                    sp[0] = sp[-1];
   1a1d2:	f855 2c04 	ldr.w	r2, [r5, #-4]
   1a1d6:	602a      	str	r2, [r5, #0]
                switch (*ip++) {
   1a1d8:	4634      	mov	r4, r6
                    sp[-1] = top;
   1a1da:	f845 3c04 	str.w	r3, [r5, #-4]
                    DISPATCH();
   1a1de:	e6af      	b.n	19f40 <mp_execute_bytecode+0x194>
                    mp_uint_t unum = *ip;
   1a1e0:	7863      	ldrb	r3, [r4, #1]
                    if (unum == 2) {
   1a1e2:	2b02      	cmp	r3, #2
   1a1e4:	f000 8411 	beq.w	1aa0a <mp_execute_bytecode+0xc5e>
                    if (unum == 0) {
   1a1e8:	2b00      	cmp	r3, #0
   1a1ea:	f040 840f 	bne.w	1aa0c <mp_execute_bytecode+0xc60>
                        for (mp_exc_stack_t *e = exc_sp; e >= exc_stack; e--) {
   1a1ee:	9b06      	ldr	r3, [sp, #24]
   1a1f0:	429f      	cmp	r7, r3
   1a1f2:	d905      	bls.n	1a200 <mp_execute_bytecode+0x454>
   1a1f4:	f000 bc91 	b.w	1ab1a <mp_execute_bytecode+0xd6e>
   1a1f8:	3b0c      	subs	r3, #12
   1a1fa:	429f      	cmp	r7, r3
   1a1fc:	f200 848d 	bhi.w	1ab1a <mp_execute_bytecode+0xd6e>
                            if (e->prev_exc != NULL) {
   1a200:	6898      	ldr	r0, [r3, #8]
   1a202:	2800      	cmp	r0, #0
   1a204:	d0f8      	beq.n	1a1f8 <mp_execute_bytecode+0x44c>
                            GENERATOR_EXIT_IF_NEEDED(t_exc);
   1a206:	f7f2 ff01 	bl	d00c <mp_make_raise_obj>
   1a20a:	4604      	mov	r4, r0
   1a20c:	f7e6 f844 	bl	298 <nlr_pop>
   1a210:	9409      	str	r4, [sp, #36]	; 0x24
   1a212:	e603      	b.n	19e1c <mp_execute_bytecode+0x70>
                switch (*ip++) {
   1a214:	4634      	mov	r4, r6
   1a216:	2100      	movs	r1, #0
                    DECODE_PTR;
   1a218:	f814 3b01 	ldrb.w	r3, [r4], #1
   1a21c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
   1a220:	061b      	lsls	r3, r3, #24
   1a222:	eb02 11c1 	add.w	r1, r2, r1, lsl #7
   1a226:	d4f7      	bmi.n	1a218 <mp_execute_bytecode+0x46c>
   1a228:	f8d8 3000 	ldr.w	r3, [r8]
   1a22c:	68db      	ldr	r3, [r3, #12]
                    PUSH(mp_make_function_from_raw_code(ptr, MP_OBJ_NULL, MP_OBJ_NULL));
   1a22e:	2200      	movs	r2, #0
   1a230:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
   1a234:	4611      	mov	r1, r2
   1a236:	f7f1 f91d 	bl	b474 <mp_make_function_from_raw_code>
   1a23a:	1d2b      	adds	r3, r5, #4
   1a23c:	6068      	str	r0, [r5, #4]
   1a23e:	461d      	mov	r5, r3
                    DISPATCH();
   1a240:	e67e      	b.n	19f40 <mp_execute_bytecode+0x194>
                    if (inject_exc != MP_OBJ_NULL) {
   1a242:	f8dd 900c 	ldr.w	r9, [sp, #12]
                    mp_obj_t send_value = POP();
   1a246:	6829      	ldr	r1, [r5, #0]
   1a248:	1f2b      	subs	r3, r5, #4
   1a24a:	9302      	str	r3, [sp, #8]
                    code_state->sp = sp; // Save sp because it's needed if mp_resume raises StopIteration
   1a24c:	f8c8 3008 	str.w	r3, [r8, #8]
                    if (inject_exc != MP_OBJ_NULL) {
   1a250:	f1b9 0f00 	cmp.w	r9, #0
   1a254:	f000 8459 	beq.w	1ab0a <mp_execute_bytecode+0xd5e>
                        t_exc = inject_exc;
   1a258:	f8dd 900c 	ldr.w	r9, [sp, #12]
                        ret_kind = mp_resume(TOP(), MP_OBJ_NULL, t_exc, &ret_value);
   1a25c:	f855 0c04 	ldr.w	r0, [r5, #-4]
                        inject_exc = MP_OBJ_NULL;
   1a260:	f04f 0e00 	mov.w	lr, #0
                        ret_kind = mp_resume(TOP(), MP_OBJ_NULL, t_exc, &ret_value);
   1a264:	464a      	mov	r2, r9
   1a266:	4671      	mov	r1, lr
   1a268:	ab07      	add	r3, sp, #28
                        inject_exc = MP_OBJ_NULL;
   1a26a:	f8cd e00c 	str.w	lr, [sp, #12]
                        ret_kind = mp_resume(TOP(), MP_OBJ_NULL, t_exc, &ret_value);
   1a26e:	f7f2 fdf7 	bl	ce60 <mp_resume>
                    if (ret_kind == MP_VM_RETURN_YIELD) {
   1a272:	2801      	cmp	r0, #1
   1a274:	f43f af4f 	beq.w	1a116 <mp_execute_bytecode+0x36a>
                    } else if (ret_kind == MP_VM_RETURN_NORMAL) {
   1a278:	2800      	cmp	r0, #0
   1a27a:	f040 83d0 	bne.w	1aa1e <mp_execute_bytecode+0xc72>
                        if (ret_value == MP_OBJ_STOP_ITERATION) {
   1a27e:	9b07      	ldr	r3, [sp, #28]
                            PUSH(mp_const_none);
   1a280:	4ac7      	ldr	r2, [pc, #796]	; (1a5a0 <mp_execute_bytecode+0x7f4>)
   1a282:	2b04      	cmp	r3, #4
   1a284:	bf08      	it	eq
   1a286:	4613      	moveq	r3, r2
   1a288:	f845 3c04 	str.w	r3, [r5, #-4]
                        GENERATOR_EXIT_IF_NEEDED(t_exc);
   1a28c:	f1b9 0f00 	cmp.w	r9, #0
   1a290:	d006      	beq.n	1a2a0 <mp_execute_bytecode+0x4f4>
                            GENERATOR_EXIT_IF_NEEDED(t_exc);
   1a292:	49c4      	ldr	r1, [pc, #784]	; (1a5a4 <mp_execute_bytecode+0x7f8>)
   1a294:	4648      	mov	r0, r9
   1a296:	f7f5 fc9b 	bl	fbd0 <mp_obj_exception_match>
   1a29a:	2800      	cmp	r0, #0
   1a29c:	f040 849b 	bne.w	1abd6 <mp_execute_bytecode+0xe2a>
                        DISPATCH();
   1a2a0:	9d02      	ldr	r5, [sp, #8]
                switch (*ip++) {
   1a2a2:	4634      	mov	r4, r6
   1a2a4:	e64c      	b.n	19f40 <mp_execute_bytecode+0x194>
   1a2a6:	4634      	mov	r4, r6
   1a2a8:	2200      	movs	r2, #0
                    DECODE_UINT;
   1a2aa:	f814 3b01 	ldrb.w	r3, [r4], #1
   1a2ae:	f003 017f 	and.w	r1, r3, #127	; 0x7f
   1a2b2:	061e      	lsls	r6, r3, #24
   1a2b4:	eb01 12c2 	add.w	r2, r1, r2, lsl #7
   1a2b8:	d4f7      	bmi.n	1a2aa <mp_execute_bytecode+0x4fe>
                    sp -= (unum & 0xff) + ((unum >> 7) & 0x1fe);
   1a2ba:	09d3      	lsrs	r3, r2, #7
   1a2bc:	b2d1      	uxtb	r1, r2
   1a2be:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
   1a2c2:	440b      	add	r3, r1
   1a2c4:	eba5 0583 	sub.w	r5, r5, r3, lsl #2
                    SET_TOP(mp_call_function_n_kw(*sp, unum & 0xff, (unum >> 8) & 0xff, sp + 1));
   1a2c8:	f3c2 2207 	ubfx	r2, r2, #8, #8
   1a2cc:	1d2b      	adds	r3, r5, #4
   1a2ce:	6828      	ldr	r0, [r5, #0]
   1a2d0:	f7f1 ff31 	bl	c136 <mp_call_function_n_kw>
   1a2d4:	6028      	str	r0, [r5, #0]
                    DISPATCH();
   1a2d6:	e633      	b.n	19f40 <mp_execute_bytecode+0x194>
                switch (*ip++) {
   1a2d8:	2000      	movs	r0, #0
   1a2da:	e000      	b.n	1a2de <mp_execute_bytecode+0x532>
                    DECODE_PTR;
   1a2dc:	461e      	mov	r6, r3
   1a2de:	4633      	mov	r3, r6
   1a2e0:	f813 2b01 	ldrb.w	r2, [r3], #1
   1a2e4:	f002 017f 	and.w	r1, r2, #127	; 0x7f
   1a2e8:	0612      	lsls	r2, r2, #24
   1a2ea:	eb01 10c0 	add.w	r0, r1, r0, lsl #7
   1a2ee:	d4f5      	bmi.n	1a2dc <mp_execute_bytecode+0x530>
                    size_t n_closed_over = *ip++;
   1a2f0:	7819      	ldrb	r1, [r3, #0]
                    DECODE_PTR;
   1a2f2:	f8d8 3000 	ldr.w	r3, [r8]
                    sp -= 2 + n_closed_over - 1;
   1a2f6:	43ca      	mvns	r2, r1
                    DECODE_PTR;
   1a2f8:	68db      	ldr	r3, [r3, #12]
                    sp -= 2 + n_closed_over - 1;
   1a2fa:	eb05 0582 	add.w	r5, r5, r2, lsl #2
                    SET_TOP(mp_make_closure_from_raw_code(ptr, 0x100 | n_closed_over, sp));
   1a2fe:	f441 7180 	orr.w	r1, r1, #256	; 0x100
   1a302:	462a      	mov	r2, r5
   1a304:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   1a308:	f7f1 f930 	bl	b56c <mp_make_closure_from_raw_code>
                    size_t n_closed_over = *ip++;
   1a30c:	1cb4      	adds	r4, r6, #2
                    SET_TOP(mp_make_closure_from_raw_code(ptr, 0x100 | n_closed_over, sp));
   1a30e:	6028      	str	r0, [r5, #0]
                    DISPATCH();
   1a310:	e616      	b.n	19f40 <mp_execute_bytecode+0x194>
                switch (*ip++) {
   1a312:	2000      	movs	r0, #0
   1a314:	e000      	b.n	1a318 <mp_execute_bytecode+0x56c>
                    DECODE_PTR;
   1a316:	461e      	mov	r6, r3
   1a318:	4633      	mov	r3, r6
   1a31a:	f813 2b01 	ldrb.w	r2, [r3], #1
   1a31e:	f002 017f 	and.w	r1, r2, #127	; 0x7f
   1a322:	eb01 10c0 	add.w	r0, r1, r0, lsl #7
   1a326:	0611      	lsls	r1, r2, #24
   1a328:	d4f5      	bmi.n	1a316 <mp_execute_bytecode+0x56a>
                    size_t n_closed_over = *ip++;
   1a32a:	7819      	ldrb	r1, [r3, #0]
                    DECODE_PTR;
   1a32c:	f8d8 3000 	ldr.w	r3, [r8]
                    sp -= n_closed_over - 1;
   1a330:	ebc1 7281 	rsb	r2, r1, r1, lsl #30
   1a334:	eb05 0582 	add.w	r5, r5, r2, lsl #2
                    DECODE_PTR;
   1a338:	68db      	ldr	r3, [r3, #12]
                    sp -= n_closed_over - 1;
   1a33a:	3504      	adds	r5, #4
   1a33c:	e7e1      	b.n	1a302 <mp_execute_bytecode+0x556>
                switch (*ip++) {
   1a33e:	4634      	mov	r4, r6
   1a340:	2000      	movs	r0, #0
                    DECODE_PTR;
   1a342:	f814 3b01 	ldrb.w	r3, [r4], #1
   1a346:	f003 027f 	and.w	r2, r3, #127	; 0x7f
   1a34a:	061e      	lsls	r6, r3, #24
   1a34c:	eb02 10c0 	add.w	r0, r2, r0, lsl #7
   1a350:	d4f7      	bmi.n	1a342 <mp_execute_bytecode+0x596>
   1a352:	f8d8 3000 	ldr.w	r3, [r8]
                    SET_TOP(mp_make_function_from_raw_code(ptr, TOP(), def_dict));
   1a356:	682a      	ldr	r2, [r5, #0]
                    DECODE_PTR;
   1a358:	68db      	ldr	r3, [r3, #12]
                    SET_TOP(mp_make_function_from_raw_code(ptr, TOP(), def_dict));
   1a35a:	f855 1c04 	ldr.w	r1, [r5, #-4]
   1a35e:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   1a362:	f7f1 f887 	bl	b474 <mp_make_function_from_raw_code>
                    mp_obj_t def_dict = POP();
   1a366:	1f2b      	subs	r3, r5, #4
                    SET_TOP(mp_make_function_from_raw_code(ptr, TOP(), def_dict));
   1a368:	f845 0c04 	str.w	r0, [r5, #-4]
                    mp_obj_t def_dict = POP();
   1a36c:	461d      	mov	r5, r3
                    DISPATCH();
   1a36e:	e5e7      	b.n	19f40 <mp_execute_bytecode+0x194>
                switch (*ip++) {
   1a370:	4634      	mov	r4, r6
   1a372:	2600      	movs	r6, #0
                    DECODE_UINT;
   1a374:	f814 3b01 	ldrb.w	r3, [r4], #1
   1a378:	f003 027f 	and.w	r2, r3, #127	; 0x7f
   1a37c:	eb02 16c6 	add.w	r6, r2, r6, lsl #7
   1a380:	061a      	lsls	r2, r3, #24
   1a382:	d4f7      	bmi.n	1a374 <mp_execute_bytecode+0x5c8>
                    mp_unpack_ex(sp[0], unum, sp);
   1a384:	462a      	mov	r2, r5
   1a386:	4631      	mov	r1, r6
   1a388:	6828      	ldr	r0, [r5, #0]
   1a38a:	f7f2 fa19 	bl	c7c0 <mp_unpack_ex>
                    sp += (unum & 0xff) + ((unum >> 8) & 0xff);
   1a38e:	f3c6 2307 	ubfx	r3, r6, #8, #8
   1a392:	fa53 f686 	uxtab	r6, r3, r6
   1a396:	eb05 0586 	add.w	r5, r5, r6, lsl #2
                    DISPATCH();
   1a39a:	e5d1      	b.n	19f40 <mp_execute_bytecode+0x194>
                    mp_import_all(POP());
   1a39c:	6828      	ldr	r0, [r5, #0]
   1a39e:	f1a5 0904 	sub.w	r9, r5, #4
                switch (*ip++) {
   1a3a2:	4634      	mov	r4, r6
                    mp_import_all(POP());
   1a3a4:	f7f2 ff16 	bl	d1d4 <mp_import_all>
   1a3a8:	464d      	mov	r5, r9
                    DISPATCH();
   1a3aa:	e5c9      	b.n	19f40 <mp_execute_bytecode+0x194>
                    mp_obj_t obj = mp_import_from(TOP(), qst);
   1a3ac:	462e      	mov	r6, r5
                    DECODE_QSTR;
   1a3ae:	f8b4 1001 	ldrh.w	r1, [r4, #1]
                    mp_obj_t obj = mp_import_from(TOP(), qst);
   1a3b2:	f856 0b04 	ldr.w	r0, [r6], #4
   1a3b6:	f7f2 fe83 	bl	d0c0 <mp_import_from>
                    DECODE_QSTR;
   1a3ba:	3403      	adds	r4, #3
                    PUSH(obj);
   1a3bc:	6068      	str	r0, [r5, #4]
   1a3be:	4635      	mov	r5, r6
                    DISPATCH();
   1a3c0:	e5be      	b.n	19f40 <mp_execute_bytecode+0x194>
                    DECODE_QSTR;
   1a3c2:	f8b4 0001 	ldrh.w	r0, [r4, #1]
                    SET_TOP(mp_import_name(qst, obj, TOP()));
   1a3c6:	f855 2c04 	ldr.w	r2, [r5, #-4]
   1a3ca:	6829      	ldr	r1, [r5, #0]
   1a3cc:	f7f2 fe4c 	bl	d068 <mp_import_name>
                    mp_obj_t obj = POP();
   1a3d0:	1f2b      	subs	r3, r5, #4
                    SET_TOP(mp_import_name(qst, obj, TOP()));
   1a3d2:	f845 0c04 	str.w	r0, [r5, #-4]
                    DECODE_QSTR;
   1a3d6:	3403      	adds	r4, #3
                    mp_obj_t obj = POP();
   1a3d8:	461d      	mov	r5, r3
                    DISPATCH();
   1a3da:	e5b1      	b.n	19f40 <mp_execute_bytecode+0x194>
                switch (*ip++) {
   1a3dc:	4634      	mov	r4, r6
   1a3de:	2100      	movs	r1, #0
                    DECODE_UINT;
   1a3e0:	f814 3b01 	ldrb.w	r3, [r4], #1
   1a3e4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
   1a3e8:	061b      	lsls	r3, r3, #24
   1a3ea:	eb02 11c1 	add.w	r1, r2, r1, lsl #7
   1a3ee:	d4f7      	bmi.n	1a3e0 <mp_execute_bytecode+0x634>
                    sp -= (unum & 0xff) + ((unum >> 7) & 0x1fe) + 3;
   1a3f0:	09cb      	lsrs	r3, r1, #7
   1a3f2:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
   1a3f6:	fa53 f381 	uxtab	r3, r3, r1
   1a3fa:	ebc3 7383 	rsb	r3, r3, r3, lsl #30
   1a3fe:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   1a402:	3d0c      	subs	r5, #12
                    SET_TOP(mp_call_method_n_kw_var(true, unum, sp));
   1a404:	462a      	mov	r2, r5
   1a406:	2001      	movs	r0, #1
   1a408:	f7f2 f933 	bl	c672 <mp_call_method_n_kw_var>
   1a40c:	6028      	str	r0, [r5, #0]
                    DISPATCH();
   1a40e:	e597      	b.n	19f40 <mp_execute_bytecode+0x194>
                switch (*ip++) {
   1a410:	4634      	mov	r4, r6
   1a412:	2100      	movs	r1, #0
                    DECODE_UINT;
   1a414:	f814 3b01 	ldrb.w	r3, [r4], #1
   1a418:	f003 027f 	and.w	r2, r3, #127	; 0x7f
   1a41c:	eb02 11c1 	add.w	r1, r2, r1, lsl #7
   1a420:	061a      	lsls	r2, r3, #24
   1a422:	d4f7      	bmi.n	1a414 <mp_execute_bytecode+0x668>
                    sp -= (unum & 0xff) + ((unum >> 7) & 0x1fe) + 1;
   1a424:	b2c8      	uxtb	r0, r1
   1a426:	09cb      	lsrs	r3, r1, #7
   1a428:	1c42      	adds	r2, r0, #1
   1a42a:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
   1a42e:	4413      	add	r3, r2
   1a430:	ebc3 7383 	rsb	r3, r3, r3, lsl #30
   1a434:	eb05 0583 	add.w	r5, r5, r3, lsl #2
                    SET_TOP(mp_call_method_n_kw(unum & 0xff, (unum >> 8) & 0xff, sp));
   1a438:	f3c1 2107 	ubfx	r1, r1, #8, #8
   1a43c:	462a      	mov	r2, r5
   1a43e:	f7f1 fea5 	bl	c18c <mp_call_method_n_kw>
   1a442:	6028      	str	r0, [r5, #0]
                    DISPATCH();
   1a444:	e57c      	b.n	19f40 <mp_execute_bytecode+0x194>
                switch (*ip++) {
   1a446:	4634      	mov	r4, r6
   1a448:	2100      	movs	r1, #0
                    DECODE_UINT;
   1a44a:	f814 3b01 	ldrb.w	r3, [r4], #1
   1a44e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
   1a452:	0618      	lsls	r0, r3, #24
   1a454:	eb02 11c1 	add.w	r1, r2, r1, lsl #7
   1a458:	d4f7      	bmi.n	1a44a <mp_execute_bytecode+0x69e>
                    sp -= (unum & 0xff) + ((unum >> 7) & 0x1fe) + 2;
   1a45a:	09cb      	lsrs	r3, r1, #7
   1a45c:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
   1a460:	fa53 f381 	uxtab	r3, r3, r1
   1a464:	ebc3 7383 	rsb	r3, r3, r3, lsl #30
   1a468:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   1a46c:	3d08      	subs	r5, #8
                    SET_TOP(mp_call_method_n_kw_var(false, unum, sp));
   1a46e:	462a      	mov	r2, r5
   1a470:	2000      	movs	r0, #0
   1a472:	f7f2 f8fe 	bl	c672 <mp_call_method_n_kw_var>
   1a476:	6028      	str	r0, [r5, #0]
                    DISPATCH();
   1a478:	e562      	b.n	19f40 <mp_execute_bytecode+0x194>
                    DECODE_QSTR;
   1a47a:	f8b4 0001 	ldrh.w	r0, [r4, #1]
                    mp_load_super_method(qst, sp - 1);
   1a47e:	f1a5 0108 	sub.w	r1, r5, #8
                    DECODE_QSTR;
   1a482:	3403      	adds	r4, #3
                    sp -= 1;
   1a484:	3d04      	subs	r5, #4
                    mp_load_super_method(qst, sp - 1);
   1a486:	f7fd f9d3 	bl	17830 <mp_load_super_method>
                    DISPATCH();
   1a48a:	e559      	b.n	19f40 <mp_execute_bytecode+0x194>
                    DECODE_QSTR;
   1a48c:	f8b4 1001 	ldrh.w	r1, [r4, #1]
                    mp_load_method(*sp, qst, sp);
   1a490:	6828      	ldr	r0, [r5, #0]
   1a492:	462a      	mov	r2, r5
                    DECODE_QSTR;
   1a494:	3403      	adds	r4, #3
                    mp_load_method(*sp, qst, sp);
   1a496:	f7f2 fb89 	bl	cbac <mp_load_method>
                    sp += 1;
   1a49a:	3504      	adds	r5, #4
                    DISPATCH();
   1a49c:	e550      	b.n	19f40 <mp_execute_bytecode+0x194>
                    DECODE_QSTR;
   1a49e:	f8b4 1001 	ldrh.w	r1, [r4, #1]
                    SET_TOP(mp_load_attr(TOP(), qst));
   1a4a2:	6828      	ldr	r0, [r5, #0]
   1a4a4:	f7f2 fa84 	bl	c9b0 <mp_load_attr>
                    DECODE_QSTR;
   1a4a8:	3403      	adds	r4, #3
                    SET_TOP(mp_load_attr(TOP(), qst));
   1a4aa:	6028      	str	r0, [r5, #0]
                    DISPATCH();
   1a4ac:	e548      	b.n	19f40 <mp_execute_bytecode+0x194>
                    DECODE_QSTR;
   1a4ae:	f8b4 0001 	ldrh.w	r0, [r4, #1]
                    PUSH(mp_load_global(qst));
   1a4b2:	f7f1 f9db 	bl	b86c <mp_load_global>
   1a4b6:	1d2b      	adds	r3, r5, #4
   1a4b8:	6068      	str	r0, [r5, #4]
                    DECODE_QSTR;
   1a4ba:	3403      	adds	r4, #3
                    PUSH(mp_load_global(qst));
   1a4bc:	461d      	mov	r5, r3
                    DISPATCH();
   1a4be:	e53f      	b.n	19f40 <mp_execute_bytecode+0x194>
                    DECODE_QSTR;
   1a4c0:	f8b4 0001 	ldrh.w	r0, [r4, #1]
                    PUSH(mp_load_name(qst));
   1a4c4:	f7f1 f9a1 	bl	b80a <mp_load_name>
   1a4c8:	1d2b      	adds	r3, r5, #4
   1a4ca:	6068      	str	r0, [r5, #4]
                    DECODE_QSTR;
   1a4cc:	3403      	adds	r4, #3
                    PUSH(mp_load_name(qst));
   1a4ce:	461d      	mov	r5, r3
                    DISPATCH();
   1a4d0:	e536      	b.n	19f40 <mp_execute_bytecode+0x194>
                switch (*ip++) {
   1a4d2:	4634      	mov	r4, r6
   1a4d4:	2200      	movs	r2, #0
                    DECODE_UINT;
   1a4d6:	f814 3b01 	ldrb.w	r3, [r4], #1
   1a4da:	f003 017f 	and.w	r1, r3, #127	; 0x7f
   1a4de:	061e      	lsls	r6, r3, #24
   1a4e0:	eb01 12c2 	add.w	r2, r1, r2, lsl #7
   1a4e4:	d4f7      	bmi.n	1a4d6 <mp_execute_bytecode+0x72a>
                    obj_shared = mp_obj_cell_get(fastn[-unum]);
   1a4e6:	ebc2 7282 	rsb	r2, r2, r2, lsl #30
   1a4ea:	f85a 0022 	ldr.w	r0, [sl, r2, lsl #2]
   1a4ee:	f7f4 f913 	bl	e718 <mp_obj_cell_get>
                    if (obj_shared == MP_OBJ_NULL) {
   1a4f2:	2800      	cmp	r0, #0
   1a4f4:	f000 8356 	beq.w	1aba4 <mp_execute_bytecode+0xdf8>
                        PUSH(value); // push the next iteration value
   1a4f8:	6068      	str	r0, [r5, #4]
   1a4fa:	3504      	adds	r5, #4
   1a4fc:	e520      	b.n	19f40 <mp_execute_bytecode+0x194>
                switch (*ip++) {
   1a4fe:	4634      	mov	r4, r6
   1a500:	2200      	movs	r2, #0
                    DECODE_UINT;
   1a502:	f814 3b01 	ldrb.w	r3, [r4], #1
   1a506:	f003 017f 	and.w	r1, r3, #127	; 0x7f
   1a50a:	061b      	lsls	r3, r3, #24
   1a50c:	eb01 12c2 	add.w	r2, r1, r2, lsl #7
   1a510:	d4f7      	bmi.n	1a502 <mp_execute_bytecode+0x756>
                    obj_shared = fastn[-unum];
   1a512:	ebc2 7282 	rsb	r2, r2, r2, lsl #30
   1a516:	f85a 0022 	ldr.w	r0, [sl, r2, lsl #2]
   1a51a:	e7ea      	b.n	1a4f2 <mp_execute_bytecode+0x746>
                    PUSH(MP_OBJ_NULL);
   1a51c:	2300      	movs	r3, #0
   1a51e:	606b      	str	r3, [r5, #4]
                switch (*ip++) {
   1a520:	4634      	mov	r4, r6
                    PUSH(MP_OBJ_NULL);
   1a522:	3504      	adds	r5, #4
                    DISPATCH();
   1a524:	e50c      	b.n	19f40 <mp_execute_bytecode+0x194>
                switch (*ip++) {
   1a526:	4634      	mov	r4, r6
   1a528:	2200      	movs	r2, #0
                    DECODE_OBJ;
   1a52a:	f814 3b01 	ldrb.w	r3, [r4], #1
   1a52e:	f003 017f 	and.w	r1, r3, #127	; 0x7f
   1a532:	eb01 12c2 	add.w	r2, r1, r2, lsl #7
   1a536:	0619      	lsls	r1, r3, #24
   1a538:	d4f7      	bmi.n	1a52a <mp_execute_bytecode+0x77e>
   1a53a:	f8d8 3000 	ldr.w	r3, [r8]
   1a53e:	68db      	ldr	r3, [r3, #12]
                    PUSH(obj);
   1a540:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   1a544:	606b      	str	r3, [r5, #4]
   1a546:	3504      	adds	r5, #4
                    DISPATCH();
   1a548:	e4fa      	b.n	19f40 <mp_execute_bytecode+0x194>
                    DECODE_QSTR;
   1a54a:	f8b4 3001 	ldrh.w	r3, [r4, #1]
                    PUSH(MP_OBJ_NEW_QSTR(qst));
   1a54e:	009b      	lsls	r3, r3, #2
   1a550:	f043 0302 	orr.w	r3, r3, #2
   1a554:	606b      	str	r3, [r5, #4]
                    DECODE_QSTR;
   1a556:	3403      	adds	r4, #3
                    PUSH(MP_OBJ_NEW_QSTR(qst));
   1a558:	3504      	adds	r5, #4
                    DISPATCH();
   1a55a:	e4f1      	b.n	19f40 <mp_execute_bytecode+0x194>
                    if ((ip[0] & 0x40) != 0) {
   1a55c:	7862      	ldrb	r2, [r4, #1]
                switch (*ip++) {
   1a55e:	4634      	mov	r4, r6
                    if ((ip[0] & 0x40) != 0) {
   1a560:	f342 1280 	sbfx	r2, r2, #6, #1
                        num = (num << 7) | (*ip & 0x7f);
   1a564:	f814 3b01 	ldrb.w	r3, [r4], #1
   1a568:	f003 017f 	and.w	r1, r3, #127	; 0x7f
                    } while ((*ip++ & 0x80) != 0);
   1a56c:	0618      	lsls	r0, r3, #24
                        num = (num << 7) | (*ip & 0x7f);
   1a56e:	ea41 12c2 	orr.w	r2, r1, r2, lsl #7
                    } while ((*ip++ & 0x80) != 0);
   1a572:	d4f7      	bmi.n	1a564 <mp_execute_bytecode+0x7b8>
                    PUSH(MP_OBJ_NEW_SMALL_INT(num));
   1a574:	0053      	lsls	r3, r2, #1
   1a576:	f043 0301 	orr.w	r3, r3, #1
   1a57a:	606b      	str	r3, [r5, #4]
   1a57c:	3504      	adds	r5, #4
                    DISPATCH();
   1a57e:	e4df      	b.n	19f40 <mp_execute_bytecode+0x194>
                    PUSH(mp_const_true);
   1a580:	4b09      	ldr	r3, [pc, #36]	; (1a5a8 <mp_execute_bytecode+0x7fc>)
   1a582:	606b      	str	r3, [r5, #4]
                switch (*ip++) {
   1a584:	4634      	mov	r4, r6
                    PUSH(mp_const_true);
   1a586:	3504      	adds	r5, #4
                    DISPATCH();
   1a588:	e4da      	b.n	19f40 <mp_execute_bytecode+0x194>
                    PUSH(mp_const_none);
   1a58a:	4b05      	ldr	r3, [pc, #20]	; (1a5a0 <mp_execute_bytecode+0x7f4>)
   1a58c:	606b      	str	r3, [r5, #4]
                switch (*ip++) {
   1a58e:	4634      	mov	r4, r6
                    PUSH(mp_const_none);
   1a590:	3504      	adds	r5, #4
                    DISPATCH();
   1a592:	e4d5      	b.n	19f40 <mp_execute_bytecode+0x194>
                    PUSH(mp_const_false);
   1a594:	4b05      	ldr	r3, [pc, #20]	; (1a5ac <mp_execute_bytecode+0x800>)
   1a596:	606b      	str	r3, [r5, #4]
                switch (*ip++) {
   1a598:	4634      	mov	r4, r6
                    PUSH(mp_const_false);
   1a59a:	3504      	adds	r5, #4
                    DISPATCH();
   1a59c:	e4d0      	b.n	19f40 <mp_execute_bytecode+0x194>
   1a59e:	bf00      	nop
   1a5a0:	0002511c 	.word	0x0002511c
   1a5a4:	00023ec4 	.word	0x00023ec4
   1a5a8:	00023868 	.word	0x00023868
   1a5ac:	00023860 	.word	0x00023860
                switch (*ip++) {
   1a5b0:	4634      	mov	r4, r6
   1a5b2:	2600      	movs	r6, #0
                    DECODE_UINT;
   1a5b4:	f814 3b01 	ldrb.w	r3, [r4], #1
   1a5b8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
   1a5bc:	0619      	lsls	r1, r3, #24
   1a5be:	eb02 16c6 	add.w	r6, r2, r6, lsl #7
   1a5c2:	d4f7      	bmi.n	1a5b4 <mp_execute_bytecode+0x808>
                    mp_unpack_sequence(sp[0], unum, sp);
   1a5c4:	4631      	mov	r1, r6
                    sp += unum - 1;
   1a5c6:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
                    mp_unpack_sequence(sp[0], unum, sp);
   1a5ca:	462a      	mov	r2, r5
   1a5cc:	6828      	ldr	r0, [r5, #0]
                    sp += unum - 1;
   1a5ce:	3e01      	subs	r6, #1
                    mp_unpack_sequence(sp[0], unum, sp);
   1a5d0:	f7f2 f870 	bl	c6b4 <mp_unpack_sequence>
                    sp += unum - 1;
   1a5d4:	eb05 0586 	add.w	r5, r5, r6, lsl #2
                    DISPATCH();
   1a5d8:	e4b2      	b.n	19f40 <mp_execute_bytecode+0x194>
                switch (*ip++) {
   1a5da:	2200      	movs	r2, #0
                    DECODE_UINT;
   1a5dc:	f816 3b01 	ldrb.w	r3, [r6], #1
   1a5e0:	f003 017f 	and.w	r1, r3, #127	; 0x7f
   1a5e4:	061b      	lsls	r3, r3, #24
   1a5e6:	eb01 12c2 	add.w	r2, r1, r2, lsl #7
   1a5ea:	d4f7      	bmi.n	1a5dc <mp_execute_bytecode+0x830>
                    mp_obj_t obj = sp[-(unum >> 2)];
   1a5ec:	0893      	lsrs	r3, r2, #2
   1a5ee:	ebc3 7383 	rsb	r3, r3, r3, lsl #30
                    if ((unum & 3) == 0) {
   1a5f2:	0794      	lsls	r4, r2, #30
                    mp_obj_t obj = sp[-(unum >> 2)];
   1a5f4:	f855 0023 	ldr.w	r0, [r5, r3, lsl #2]
                    if ((unum & 3) == 0) {
   1a5f8:	f040 81d7 	bne.w	1a9aa <mp_execute_bytecode+0xbfe>
                        mp_obj_list_append(obj, sp[0]);
   1a5fc:	f855 1904 	ldr.w	r1, [r5], #-4
                    DECODE_UINT;
   1a600:	4634      	mov	r4, r6
                        mp_obj_list_append(obj, sp[0]);
   1a602:	f7f6 fefe 	bl	11402 <mp_obj_list_append>
   1a606:	e49b      	b.n	19f40 <mp_execute_bytecode+0x194>
                    sp[0] = sp[-2];
   1a608:	682a      	ldr	r2, [r5, #0]
                    sp[-1] = sp[-3];
   1a60a:	f855 3c04 	ldr.w	r3, [r5, #-4]
                    sp[0] = sp[-2];
   1a60e:	60aa      	str	r2, [r5, #8]
                    sp[-1] = sp[-3];
   1a610:	606b      	str	r3, [r5, #4]
                switch (*ip++) {
   1a612:	4634      	mov	r4, r6
                    sp += 2;
   1a614:	3508      	adds	r5, #8
                    DISPATCH();
   1a616:	e493      	b.n	19f40 <mp_execute_bytecode+0x194>
                    PUSH(top);
   1a618:	682b      	ldr	r3, [r5, #0]
   1a61a:	606b      	str	r3, [r5, #4]
                switch (*ip++) {
   1a61c:	4634      	mov	r4, r6
                    PUSH(top);
   1a61e:	3504      	adds	r5, #4
                    DISPATCH();
   1a620:	e48e      	b.n	19f40 <mp_execute_bytecode+0x194>
                    DECODE_QSTR;
   1a622:	f8b4 0001 	ldrh.w	r0, [r4, #1]
   1a626:	3403      	adds	r4, #3
                    mp_delete_global(qst);
   1a628:	f7f1 f9c2 	bl	b9b0 <mp_delete_global>
                    DISPATCH();
   1a62c:	e488      	b.n	19f40 <mp_execute_bytecode+0x194>
                    DECODE_QSTR;
   1a62e:	f8b4 0001 	ldrh.w	r0, [r4, #1]
   1a632:	3403      	adds	r4, #3
                    mp_delete_name(qst);
   1a634:	f7f1 f980 	bl	b938 <mp_delete_name>
                    DISPATCH();
   1a638:	e482      	b.n	19f40 <mp_execute_bytecode+0x194>
                switch (*ip++) {
   1a63a:	2200      	movs	r2, #0
                    DECODE_UINT;
   1a63c:	f816 3b01 	ldrb.w	r3, [r6], #1
   1a640:	f003 017f 	and.w	r1, r3, #127	; 0x7f
   1a644:	061c      	lsls	r4, r3, #24
   1a646:	eb01 12c2 	add.w	r2, r1, r2, lsl #7
   1a64a:	d4f7      	bmi.n	1a63c <mp_execute_bytecode+0x890>
                    if (mp_obj_cell_get(fastn[-unum]) == MP_OBJ_NULL) {
   1a64c:	ebc2 7482 	rsb	r4, r2, r2, lsl #30
   1a650:	f85a 0024 	ldr.w	r0, [sl, r4, lsl #2]
   1a654:	f7f4 f860 	bl	e718 <mp_obj_cell_get>
   1a658:	2800      	cmp	r0, #0
   1a65a:	f000 82a3 	beq.w	1aba4 <mp_execute_bytecode+0xdf8>
                    mp_obj_cell_set(fastn[-unum], MP_OBJ_NULL);
   1a65e:	f85a 0024 	ldr.w	r0, [sl, r4, lsl #2]
   1a662:	2100      	movs	r1, #0
                    DECODE_UINT;
   1a664:	4634      	mov	r4, r6
                    mp_obj_cell_set(fastn[-unum], MP_OBJ_NULL);
   1a666:	f7f4 f865 	bl	e734 <mp_obj_cell_set>
                    DISPATCH();
   1a66a:	e469      	b.n	19f40 <mp_execute_bytecode+0x194>
                switch (*ip++) {
   1a66c:	2200      	movs	r2, #0
                    DECODE_UINT;
   1a66e:	f816 3b01 	ldrb.w	r3, [r6], #1
   1a672:	f003 017f 	and.w	r1, r3, #127	; 0x7f
   1a676:	061b      	lsls	r3, r3, #24
   1a678:	eb01 12c2 	add.w	r2, r1, r2, lsl #7
   1a67c:	d4f7      	bmi.n	1a66e <mp_execute_bytecode+0x8c2>
                    if (fastn[-unum] == MP_OBJ_NULL) {
   1a67e:	ebc2 7282 	rsb	r2, r2, r2, lsl #30
   1a682:	f85a 3022 	ldr.w	r3, [sl, r2, lsl #2]
   1a686:	2b00      	cmp	r3, #0
   1a688:	f000 828c 	beq.w	1aba4 <mp_execute_bytecode+0xdf8>
                    fastn[-unum] = MP_OBJ_NULL;
   1a68c:	2300      	movs	r3, #0
                    DECODE_UINT;
   1a68e:	4634      	mov	r4, r6
                    fastn[-unum] = MP_OBJ_NULL;
   1a690:	f84a 3022 	str.w	r3, [sl, r2, lsl #2]
                    DISPATCH();
   1a694:	e454      	b.n	19f40 <mp_execute_bytecode+0x194>
                    mp_obj_subscr(sp[-1], sp[0], sp[-2]);
   1a696:	f855 2c08 	ldr.w	r2, [r5, #-8]
   1a69a:	6829      	ldr	r1, [r5, #0]
   1a69c:	f855 0c04 	ldr.w	r0, [r5, #-4]
                switch (*ip++) {
   1a6a0:	4634      	mov	r4, r6
                    mp_obj_subscr(sp[-1], sp[0], sp[-2]);
   1a6a2:	f7f3 fe7f 	bl	e3a4 <mp_obj_subscr>
                    sp -= 3;
   1a6a6:	3d0c      	subs	r5, #12
                    DISPATCH();
   1a6a8:	e44a      	b.n	19f40 <mp_execute_bytecode+0x194>
                    DECODE_QSTR;
   1a6aa:	f8b4 1001 	ldrh.w	r1, [r4, #1]
                    mp_store_attr(sp[0], qst, sp[-1]);
   1a6ae:	f855 2c04 	ldr.w	r2, [r5, #-4]
   1a6b2:	f855 0908 	ldr.w	r0, [r5], #-8
                    DECODE_QSTR;
   1a6b6:	3403      	adds	r4, #3
                    mp_store_attr(sp[0], qst, sp[-1]);
   1a6b8:	f7f2 fad2 	bl	cc60 <mp_store_attr>
                    DISPATCH();
   1a6bc:	e440      	b.n	19f40 <mp_execute_bytecode+0x194>
                    DECODE_QSTR;
   1a6be:	f8b4 0001 	ldrh.w	r0, [r4, #1]
                    mp_store_global(qst, POP());
   1a6c2:	6829      	ldr	r1, [r5, #0]
                    DECODE_QSTR;
   1a6c4:	3403      	adds	r4, #3
                    mp_store_global(qst, POP());
   1a6c6:	3d04      	subs	r5, #4
   1a6c8:	f7f1 f954 	bl	b974 <mp_store_global>
                    DISPATCH();
   1a6cc:	e438      	b.n	19f40 <mp_execute_bytecode+0x194>
                    DECODE_QSTR;
   1a6ce:	f8b4 0001 	ldrh.w	r0, [r4, #1]
                    mp_store_name(qst, POP());
   1a6d2:	6829      	ldr	r1, [r5, #0]
                    DECODE_QSTR;
   1a6d4:	3403      	adds	r4, #3
                    mp_store_name(qst, POP());
   1a6d6:	3d04      	subs	r5, #4
   1a6d8:	f7f1 f910 	bl	b8fc <mp_store_name>
                    DISPATCH();
   1a6dc:	e430      	b.n	19f40 <mp_execute_bytecode+0x194>
                switch (*ip++) {
   1a6de:	4634      	mov	r4, r6
   1a6e0:	2200      	movs	r2, #0
                    DECODE_UINT;
   1a6e2:	f814 3b01 	ldrb.w	r3, [r4], #1
   1a6e6:	f003 017f 	and.w	r1, r3, #127	; 0x7f
   1a6ea:	eb01 12c2 	add.w	r2, r1, r2, lsl #7
   1a6ee:	0619      	lsls	r1, r3, #24
   1a6f0:	d4f7      	bmi.n	1a6e2 <mp_execute_bytecode+0x936>
                    mp_obj_cell_set(fastn[-unum], POP());
   1a6f2:	ebc2 7282 	rsb	r2, r2, r2, lsl #30
   1a6f6:	6829      	ldr	r1, [r5, #0]
   1a6f8:	f85a 0022 	ldr.w	r0, [sl, r2, lsl #2]
   1a6fc:	3d04      	subs	r5, #4
   1a6fe:	f7f4 f819 	bl	e734 <mp_obj_cell_set>
                    DISPATCH();
   1a702:	e41d      	b.n	19f40 <mp_execute_bytecode+0x194>
                switch (*ip++) {
   1a704:	4634      	mov	r4, r6
   1a706:	2200      	movs	r2, #0
                    DECODE_UINT;
   1a708:	f814 3b01 	ldrb.w	r3, [r4], #1
   1a70c:	f003 017f 	and.w	r1, r3, #127	; 0x7f
   1a710:	0618      	lsls	r0, r3, #24
   1a712:	eb01 12c2 	add.w	r2, r1, r2, lsl #7
   1a716:	d4f7      	bmi.n	1a708 <mp_execute_bytecode+0x95c>
                    fastn[-unum] = POP();
   1a718:	ebc2 7282 	rsb	r2, r2, r2, lsl #30
   1a71c:	682b      	ldr	r3, [r5, #0]
   1a71e:	f84a 3022 	str.w	r3, [sl, r2, lsl #2]
   1a722:	3d04      	subs	r5, #4
                    DISPATCH();
   1a724:	e40c      	b.n	19f40 <mp_execute_bytecode+0x194>
                    SET_TOP(mp_obj_subscr(TOP(), index, MP_OBJ_SENTINEL));
   1a726:	6829      	ldr	r1, [r5, #0]
   1a728:	f855 0c04 	ldr.w	r0, [r5, #-4]
   1a72c:	2208      	movs	r2, #8
   1a72e:	f7f3 fe39 	bl	e3a4 <mp_obj_subscr>
                    mp_obj_t index = POP();
   1a732:	1f2b      	subs	r3, r5, #4
                    SET_TOP(mp_obj_subscr(TOP(), index, MP_OBJ_SENTINEL));
   1a734:	f845 0c04 	str.w	r0, [r5, #-4]
                switch (*ip++) {
   1a738:	4634      	mov	r4, r6
                    mp_obj_t index = POP();
   1a73a:	461d      	mov	r5, r3
                    DISPATCH();
   1a73c:	e400      	b.n	19f40 <mp_execute_bytecode+0x194>
                    PUSH(mp_load_build_class());
   1a73e:	f7f1 f8d1 	bl	b8e4 <mp_load_build_class>
   1a742:	1d2b      	adds	r3, r5, #4
   1a744:	6068      	str	r0, [r5, #4]
                switch (*ip++) {
   1a746:	4634      	mov	r4, r6
                    PUSH(mp_load_build_class());
   1a748:	461d      	mov	r5, r3
                    DISPATCH();
   1a74a:	f7ff bbf9 	b.w	19f40 <mp_execute_bytecode+0x194>
                    mp_obj_t obj = TOP();
   1a74e:	46a9      	mov	r9, r5
                    obj = mp_getiter(obj, iter_buf);
   1a750:	4629      	mov	r1, r5
   1a752:	f859 0b0c 	ldr.w	r0, [r9], #12
   1a756:	f7f2 fab7 	bl	ccc8 <mp_getiter>
                    if (obj != MP_OBJ_FROM_PTR(iter_buf)) {
   1a75a:	4285      	cmp	r5, r0
   1a75c:	f000 81c3 	beq.w	1aae6 <mp_execute_bytecode+0xd3a>
                        sp[-MP_OBJ_ITER_BUF_NSLOTS + 1] = MP_OBJ_NULL;
   1a760:	2300      	movs	r3, #0
                        sp[-MP_OBJ_ITER_BUF_NSLOTS + 2] = obj;
   1a762:	6068      	str	r0, [r5, #4]
                        sp[-MP_OBJ_ITER_BUF_NSLOTS + 1] = MP_OBJ_NULL;
   1a764:	602b      	str	r3, [r5, #0]
                switch (*ip++) {
   1a766:	4634      	mov	r4, r6
                    sp += MP_OBJ_ITER_BUF_NSLOTS - 1;
   1a768:	464d      	mov	r5, r9
   1a76a:	f7ff bbe9 	b.w	19f40 <mp_execute_bytecode+0x194>
                    DECODE_SLABEL;
   1a76e:	f8b4 3001 	ldrh.w	r3, [r4, #1]
                    PUSH((mp_obj_t)(mp_uint_t)(uintptr_t)(ip + slab)); // push destination ip for jump
   1a772:	f5a3 43ff 	sub.w	r3, r3, #32640	; 0x7f80
   1a776:	3b7d      	subs	r3, #125	; 0x7d
   1a778:	4423      	add	r3, r4
   1a77a:	606b      	str	r3, [r5, #4]
                    PUSH((mp_obj_t)(mp_uint_t)(*ip)); // push number of exception handlers to unwind (0x80 bit set if we also need to pop stack)
   1a77c:	78e2      	ldrb	r2, [r4, #3]
   1a77e:	60aa      	str	r2, [r5, #8]
   1a780:	3508      	adds	r5, #8
   1a782:	e013      	b.n	1a7ac <mp_execute_bytecode+0xa00>
                        assert(exc_sp >= exc_stack);
   1a784:	9b06      	ldr	r3, [sp, #24]
   1a786:	429f      	cmp	r7, r3
                        unum -= 1;
   1a788:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
                        assert(exc_sp >= exc_stack);
   1a78c:	f200 8237 	bhi.w	1abfe <mp_execute_bytecode+0xe52>
                        if (MP_TAGPTR_TAG1(exc_sp->val_sp)) {
   1a790:	9b06      	ldr	r3, [sp, #24]
   1a792:	685b      	ldr	r3, [r3, #4]
   1a794:	0798      	lsls	r0, r3, #30
   1a796:	f100 8120 	bmi.w	1a9da <mp_execute_bytecode+0xc2e>
                        POP_EXC_BLOCK();
   1a79a:	9b06      	ldr	r3, [sp, #24]
   1a79c:	685b      	ldr	r3, [r3, #4]
   1a79e:	f003 0301 	and.w	r3, r3, #1
   1a7a2:	f88d 3017 	strb.w	r3, [sp, #23]
   1a7a6:	9b06      	ldr	r3, [sp, #24]
   1a7a8:	3b0c      	subs	r3, #12
   1a7aa:	9306      	str	r3, [sp, #24]
                    while ((unum & 0x7f) > 0) {
   1a7ac:	0651      	lsls	r1, r2, #25
   1a7ae:	d1e9      	bne.n	1a784 <mp_execute_bytecode+0x9d8>
                    ip = (const byte*)MP_OBJ_TO_PTR(POP()); // pop destination ip for jump
   1a7b0:	f855 4c04 	ldr.w	r4, [r5, #-4]
                    if (unum != 0) {
   1a7b4:	2a00      	cmp	r2, #0
   1a7b6:	f040 8170 	bne.w	1aa9a <mp_execute_bytecode+0xcee>
                    ip = (const byte*)MP_OBJ_TO_PTR(POP()); // pop destination ip for jump
   1a7ba:	3d08      	subs	r5, #8
   1a7bc:	e0c7      	b.n	1a94e <mp_execute_bytecode+0xba2>
                    assert(exc_sp >= exc_stack);
   1a7be:	9b06      	ldr	r3, [sp, #24]
   1a7c0:	429f      	cmp	r7, r3
   1a7c2:	f67f abb3 	bls.w	19f2c <mp_execute_bytecode+0x180>
   1a7c6:	4bca      	ldr	r3, [pc, #808]	; (1aaf0 <mp_execute_bytecode+0xd44>)
   1a7c8:	4aca      	ldr	r2, [pc, #808]	; (1aaf4 <mp_execute_bytecode+0xd48>)
   1a7ca:	48cb      	ldr	r0, [pc, #812]	; (1aaf8 <mp_execute_bytecode+0xd4c>)
   1a7cc:	f240 21ff 	movw	r1, #767	; 0x2ff
   1a7d0:	f002 fb86 	bl	1cee0 <__assert_func>
   1a7d4:	f8b4 6001 	ldrh.w	r6, [r4, #1]
                    code_state->sp = sp;
   1a7d8:	f8c8 5008 	str.w	r5, [r8, #8]
                    if (sp[-MP_OBJ_ITER_BUF_NSLOTS + 1] == MP_OBJ_NULL) {
   1a7dc:	f855 3c0c 	ldr.w	r3, [r5, #-12]
                    DECODE_ULABEL; // the jump offset if iteration finishes; for labels are always forward
   1a7e0:	3403      	adds	r4, #3
                    if (sp[-MP_OBJ_ITER_BUF_NSLOTS + 1] == MP_OBJ_NULL) {
   1a7e2:	2b00      	cmp	r3, #0
   1a7e4:	f000 818e 	beq.w	1ab04 <mp_execute_bytecode+0xd58>
                        obj = MP_OBJ_FROM_PTR(&sp[-MP_OBJ_ITER_BUF_NSLOTS + 1]);
   1a7e8:	f1a5 000c 	sub.w	r0, r5, #12
                    mp_obj_t value = mp_iternext_allow_raise(obj);
   1a7ec:	f7f2 fac0 	bl	cd70 <mp_iternext_allow_raise>
                    if (value == MP_OBJ_STOP_ITERATION) {
   1a7f0:	2804      	cmp	r0, #4
   1a7f2:	f47f ae81 	bne.w	1a4f8 <mp_execute_bytecode+0x74c>
                        sp -= MP_OBJ_ITER_BUF_NSLOTS; // pop the exhausted iterator
   1a7f6:	3d10      	subs	r5, #16
                        ip += ulab; // jump to after for-block
   1a7f8:	4434      	add	r4, r6
   1a7fa:	f7ff bba1 	b.w	19f40 <mp_execute_bytecode+0x194>
                    SET_TOP(mp_getiter(TOP(), NULL));
   1a7fe:	2100      	movs	r1, #0
   1a800:	6828      	ldr	r0, [r5, #0]
   1a802:	f7f2 fa61 	bl	ccc8 <mp_getiter>
                switch (*ip++) {
   1a806:	4634      	mov	r4, r6
                    SET_TOP(mp_getiter(TOP(), NULL));
   1a808:	6028      	str	r0, [r5, #0]
                    DISPATCH();
   1a80a:	f7ff bb99 	b.w	19f40 <mp_execute_bytecode+0x194>
                    PUSH_EXC_BLOCK((code_state->ip[0] == MP_BC_SETUP_FINALLY) ? 1 : 0);
   1a80e:	9a06      	ldr	r2, [sp, #24]
   1a810:	f8b4 3001 	ldrh.w	r3, [r4, #1]
   1a814:	320c      	adds	r2, #12
   1a816:	9206      	str	r2, [sp, #24]
   1a818:	9a06      	ldr	r2, [sp, #24]
   1a81a:	9806      	ldr	r0, [sp, #24]
   1a81c:	1ce1      	adds	r1, r4, #3
   1a81e:	440b      	add	r3, r1
   1a820:	6013      	str	r3, [r2, #0]
   1a822:	7822      	ldrb	r2, [r4, #0]
   1a824:	f89d 3017 	ldrb.w	r3, [sp, #23]
   1a828:	9e06      	ldr	r6, [sp, #24]
   1a82a:	2a40      	cmp	r2, #64	; 0x40
   1a82c:	bf14      	ite	ne
   1a82e:	2200      	movne	r2, #0
   1a830:	2202      	moveq	r2, #2
   1a832:	4313      	orrs	r3, r2
   1a834:	432b      	orrs	r3, r5
   1a836:	2200      	movs	r2, #0
   1a838:	6043      	str	r3, [r0, #4]
   1a83a:	460c      	mov	r4, r1
   1a83c:	f88d 2017 	strb.w	r2, [sp, #23]
   1a840:	60b2      	str	r2, [r6, #8]
                    DISPATCH();
   1a842:	f7ff bb7d 	b.w	19f40 <mp_execute_bytecode+0x194>
                    if (TOP() == mp_const_none) {
   1a846:	f8d5 9000 	ldr.w	r9, [r5]
   1a84a:	4cac      	ldr	r4, [pc, #688]	; (1aafc <mp_execute_bytecode+0xd50>)
   1a84c:	45a1      	cmp	r9, r4
   1a84e:	f000 8196 	beq.w	1ab7e <mp_execute_bytecode+0xdd2>
                    } else if (MP_OBJ_IS_SMALL_INT(TOP())) {
   1a852:	f019 0301 	ands.w	r3, r9, #1
   1a856:	9302      	str	r3, [sp, #8]
   1a858:	f000 80f5 	beq.w	1aa46 <mp_execute_bytecode+0xc9a>
                        mp_obj_t data = sp[-1];
   1a85c:	f855 3c04 	ldr.w	r3, [r5, #-4]
                        sp[0] = mp_const_none;
   1a860:	602c      	str	r4, [r5, #0]
                        sp[1] = mp_const_none;
   1a862:	606c      	str	r4, [r5, #4]
                        sp[-1] = mp_const_none;
   1a864:	f845 4c04 	str.w	r4, [r5, #-4]
                        mp_call_method_n_kw(3, 0, sp - 3);
   1a868:	f1a5 020c 	sub.w	r2, r5, #12
   1a86c:	2100      	movs	r1, #0
   1a86e:	2003      	movs	r0, #3
                        mp_obj_t data = sp[-1];
   1a870:	9302      	str	r3, [sp, #8]
                        mp_call_method_n_kw(3, 0, sp - 3);
   1a872:	f7f1 fc8b 	bl	c18c <mp_call_method_n_kw>
                        sp[-3] = data;
   1a876:	9b02      	ldr	r3, [sp, #8]
   1a878:	f845 3c0c 	str.w	r3, [r5, #-12]
                switch (*ip++) {
   1a87c:	4634      	mov	r4, r6
                        sp[-2] = cause;
   1a87e:	f845 9d08 	str.w	r9, [r5, #-8]!
   1a882:	f7ff bb5d 	b.w	19f40 <mp_execute_bytecode+0x194>
                    mp_obj_t obj = TOP();
   1a886:	f8d5 9000 	ldr.w	r9, [r5]
                    mp_load_method(obj, MP_QSTR___exit__, sp);
   1a88a:	462a      	mov	r2, r5
                    mp_load_method(obj, MP_QSTR___enter__, sp + 2);
   1a88c:	f105 0608 	add.w	r6, r5, #8
                    mp_load_method(obj, MP_QSTR___exit__, sp);
   1a890:	4648      	mov	r0, r9
   1a892:	210b      	movs	r1, #11
   1a894:	f7f2 f98a 	bl	cbac <mp_load_method>
                    mp_load_method(obj, MP_QSTR___enter__, sp + 2);
   1a898:	4648      	mov	r0, r9
   1a89a:	4632      	mov	r2, r6
   1a89c:	2109      	movs	r1, #9
   1a89e:	f7f2 f985 	bl	cbac <mp_load_method>
                    mp_obj_t ret = mp_call_method_n_kw(0, 0, sp + 2);
   1a8a2:	2100      	movs	r1, #0
   1a8a4:	4632      	mov	r2, r6
   1a8a6:	4608      	mov	r0, r1
   1a8a8:	f7f1 fc70 	bl	c18c <mp_call_method_n_kw>
                    PUSH_EXC_BLOCK(1);
   1a8ac:	9b06      	ldr	r3, [sp, #24]
   1a8ae:	f8b4 2001 	ldrh.w	r2, [r4, #1]
   1a8b2:	330c      	adds	r3, #12
   1a8b4:	9306      	str	r3, [sp, #24]
   1a8b6:	f8dd c018 	ldr.w	ip, [sp, #24]
   1a8ba:	f8dd e018 	ldr.w	lr, [sp, #24]
   1a8be:	f89d 3017 	ldrb.w	r3, [sp, #23]
   1a8c2:	9906      	ldr	r1, [sp, #24]
   1a8c4:	3403      	adds	r4, #3
   1a8c6:	4422      	add	r2, r4
   1a8c8:	f8cc 2000 	str.w	r2, [ip]
   1a8cc:	f043 0302 	orr.w	r3, r3, #2
                    sp += 1;
   1a8d0:	1d2a      	adds	r2, r5, #4
                    PUSH_EXC_BLOCK(1);
   1a8d2:	4313      	orrs	r3, r2
   1a8d4:	2200      	movs	r2, #0
   1a8d6:	f8ce 3004 	str.w	r3, [lr, #4]
   1a8da:	f88d 2017 	strb.w	r2, [sp, #23]
   1a8de:	608a      	str	r2, [r1, #8]
                    PUSH(ret);
   1a8e0:	60a8      	str	r0, [r5, #8]
   1a8e2:	4635      	mov	r5, r6
                    DISPATCH();
   1a8e4:	f7ff bb2c 	b.w	19f40 <mp_execute_bytecode+0x194>
                    if (mp_obj_is_true(TOP())) {
   1a8e8:	6828      	ldr	r0, [r5, #0]
   1a8ea:	f8b4 6001 	ldrh.w	r6, [r4, #1]
                    DECODE_SLABEL;
   1a8ee:	3403      	adds	r4, #3
                    if (mp_obj_is_true(TOP())) {
   1a8f0:	f7f3 fa90 	bl	de14 <mp_obj_is_true>
   1a8f4:	b148      	cbz	r0, 1a90a <mp_execute_bytecode+0xb5e>
                        sp--;
   1a8f6:	3d04      	subs	r5, #4
   1a8f8:	e029      	b.n	1a94e <mp_execute_bytecode+0xba2>
                    if (mp_obj_is_true(TOP())) {
   1a8fa:	6828      	ldr	r0, [r5, #0]
   1a8fc:	f8b4 6001 	ldrh.w	r6, [r4, #1]
                    DECODE_SLABEL;
   1a900:	3403      	adds	r4, #3
                    if (mp_obj_is_true(TOP())) {
   1a902:	f7f3 fa87 	bl	de14 <mp_obj_is_true>
   1a906:	2800      	cmp	r0, #0
   1a908:	d0f5      	beq.n	1a8f6 <mp_execute_bytecode+0xb4a>
                    DECODE_SLABEL;
   1a90a:	f5a6 4600 	sub.w	r6, r6, #32768	; 0x8000
                        ip += slab;
   1a90e:	4434      	add	r4, r6
   1a910:	e01d      	b.n	1a94e <mp_execute_bytecode+0xba2>
                    if (!mp_obj_is_true(POP())) {
   1a912:	6828      	ldr	r0, [r5, #0]
   1a914:	f8b4 6001 	ldrh.w	r6, [r4, #1]
   1a918:	3d04      	subs	r5, #4
                    DECODE_SLABEL;
   1a91a:	3403      	adds	r4, #3
                    if (!mp_obj_is_true(POP())) {
   1a91c:	f7f3 fa7a 	bl	de14 <mp_obj_is_true>
   1a920:	b9a8      	cbnz	r0, 1a94e <mp_execute_bytecode+0xba2>
                    DECODE_SLABEL;
   1a922:	f5a6 4600 	sub.w	r6, r6, #32768	; 0x8000
                        ip += slab;
   1a926:	4434      	add	r4, r6
   1a928:	e011      	b.n	1a94e <mp_execute_bytecode+0xba2>
                    if (mp_obj_is_true(POP())) {
   1a92a:	6828      	ldr	r0, [r5, #0]
   1a92c:	f8b4 6001 	ldrh.w	r6, [r4, #1]
   1a930:	3d04      	subs	r5, #4
                    DECODE_SLABEL;
   1a932:	3403      	adds	r4, #3
                    if (mp_obj_is_true(POP())) {
   1a934:	f7f3 fa6e 	bl	de14 <mp_obj_is_true>
   1a938:	b148      	cbz	r0, 1a94e <mp_execute_bytecode+0xba2>
                    DECODE_SLABEL;
   1a93a:	f5a6 4600 	sub.w	r6, r6, #32768	; 0x8000
                        ip += slab;
   1a93e:	4434      	add	r4, r6
   1a940:	e005      	b.n	1a94e <mp_execute_bytecode+0xba2>
                    DECODE_SLABEL;
   1a942:	f8b4 3001 	ldrh.w	r3, [r4, #1]
   1a946:	f5a3 43ff 	sub.w	r3, r3, #32640	; 0x7f80
   1a94a:	3b7d      	subs	r3, #125	; 0x7d
                    ip += slab;
   1a94c:	441c      	add	r4, r3
                if (MP_STATE_VM(mp_pending_exception) != MP_OBJ_NULL) {
   1a94e:	4b6c      	ldr	r3, [pc, #432]	; (1ab00 <mp_execute_bytecode+0xd54>)
   1a950:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   1a952:	2b00      	cmp	r3, #0
   1a954:	f43f aaf4 	beq.w	19f40 <mp_execute_bytecode+0x194>
                    mp_obj_t obj = MP_STATE_VM(mp_pending_exception);
   1a958:	4b69      	ldr	r3, [pc, #420]	; (1ab00 <mp_execute_bytecode+0xd54>)
                    MP_STATE_VM(mp_pending_exception) = MP_OBJ_NULL;
   1a95a:	4a69      	ldr	r2, [pc, #420]	; (1ab00 <mp_execute_bytecode+0xd54>)
                    mp_obj_t obj = MP_STATE_VM(mp_pending_exception);
   1a95c:	6b5c      	ldr	r4, [r3, #52]	; 0x34
                    MP_STATE_VM(mp_pending_exception) = MP_OBJ_NULL;
   1a95e:	2300      	movs	r3, #0
   1a960:	6353      	str	r3, [r2, #52]	; 0x34
                    RAISE(obj);
   1a962:	f7e5 fc99 	bl	298 <nlr_pop>
   1a966:	9409      	str	r4, [sp, #36]	; 0x24
   1a968:	f7ff ba58 	b.w	19e1c <mp_execute_bytecode+0x70>
                    sp[0] = sp[-1];
   1a96c:	e915 000c 	ldmdb	r5, {r2, r3}
                    mp_obj_t top = sp[0];
   1a970:	6829      	ldr	r1, [r5, #0]
                    sp[-2] = top;
   1a972:	f845 1c08 	str.w	r1, [r5, #-8]
                switch (*ip++) {
   1a976:	4634      	mov	r4, r6
                    sp[-1] = sp[-2];
   1a978:	f845 2c04 	str.w	r2, [r5, #-4]
                    sp[0] = sp[-1];
   1a97c:	602b      	str	r3, [r5, #0]
                    DISPATCH();
   1a97e:	f7ff badf 	b.w	19f40 <mp_execute_bytecode+0x194>
                    if (ip[-1] < MP_BC_LOAD_CONST_SMALL_INT_MULTI + 64) {
   1a982:	28af      	cmp	r0, #175	; 0xaf
   1a984:	d81a      	bhi.n	1a9bc <mp_execute_bytecode+0xc10>
                        PUSH(MP_OBJ_NEW_SMALL_INT((mp_int_t)ip[-1] - MP_BC_LOAD_CONST_SMALL_INT_MULTI - 16));
   1a986:	f1a0 0380 	sub.w	r3, r0, #128	; 0x80
   1a98a:	005b      	lsls	r3, r3, #1
   1a98c:	f043 0301 	orr.w	r3, r3, #1
   1a990:	606b      	str	r3, [r5, #4]
                switch (*ip++) {
   1a992:	4634      	mov	r4, r6
                        PUSH(MP_OBJ_NEW_SMALL_INT((mp_int_t)ip[-1] - MP_BC_LOAD_CONST_SMALL_INT_MULTI - 16));
   1a994:	3504      	adds	r5, #4
                        DISPATCH();
   1a996:	f7ff bad3 	b.w	19f40 <mp_execute_bytecode+0x194>
                    } else if (MP_OBJ_IS_SMALL_INT(TOP())) {
   1a99a:	07d3      	lsls	r3, r2, #31
   1a99c:	f140 811e 	bpl.w	1abdc <mp_execute_bytecode+0xe30>
                        if (cause < 0) {
   1a9a0:	1052      	asrs	r2, r2, #1
   1a9a2:	f100 80d1 	bmi.w	1ab48 <mp_execute_bytecode+0xd9c>
                            PUSH((mp_obj_t)cause);
   1a9a6:	602a      	str	r2, [r5, #0]
                            goto unwind_jump;
   1a9a8:	e700      	b.n	1a7ac <mp_execute_bytecode+0xa00>
                        mp_obj_dict_store(obj, sp[0], sp[-1]);
   1a9aa:	f855 2c04 	ldr.w	r2, [r5, #-4]
   1a9ae:	f855 1908 	ldr.w	r1, [r5], #-8
                    DECODE_UINT;
   1a9b2:	4634      	mov	r4, r6
                        mp_obj_dict_store(obj, sp[0], sp[-1]);
   1a9b4:	f7f4 fe13 	bl	f5de <mp_obj_dict_store>
   1a9b8:	f7ff bac2 	b.w	19f40 <mp_execute_bytecode+0x194>
                    } else if (ip[-1] < MP_BC_LOAD_FAST_MULTI + 16) {
   1a9bc:	28bf      	cmp	r0, #191	; 0xbf
   1a9be:	f240 8085 	bls.w	1aacc <mp_execute_bytecode+0xd20>
                    } else if (ip[-1] < MP_BC_STORE_FAST_MULTI + 16) {
   1a9c2:	28cf      	cmp	r0, #207	; 0xcf
   1a9c4:	f200 80c3 	bhi.w	1ab4e <mp_execute_bytecode+0xda2>
                        fastn[MP_BC_STORE_FAST_MULTI - (mp_int_t)ip[-1]] = POP();
   1a9c8:	f1c0 00c0 	rsb	r0, r0, #192	; 0xc0
   1a9cc:	682b      	ldr	r3, [r5, #0]
   1a9ce:	f84a 3020 	str.w	r3, [sl, r0, lsl #2]
                switch (*ip++) {
   1a9d2:	4634      	mov	r4, r6
                        fastn[MP_BC_STORE_FAST_MULTI - (mp_int_t)ip[-1]] = POP();
   1a9d4:	3d04      	subs	r5, #4
                        DISPATCH();
   1a9d6:	f7ff bab3 	b.w	19f40 <mp_execute_bytecode+0x194>
                            ip = exc_sp->handler; // get exception handler byte code address
   1a9da:	9906      	ldr	r1, [sp, #24]
                            exc_sp--; // pop exception handler
   1a9dc:	9b06      	ldr	r3, [sp, #24]
                            PUSH(MP_OBJ_NEW_SMALL_INT(unum));
   1a9de:	0052      	lsls	r2, r2, #1
   1a9e0:	f042 0201 	orr.w	r2, r2, #1
   1a9e4:	602a      	str	r2, [r5, #0]
                            exc_sp--; // pop exception handler
   1a9e6:	3b0c      	subs	r3, #12
                            ip = exc_sp->handler; // get exception handler byte code address
   1a9e8:	680c      	ldr	r4, [r1, #0]
                            exc_sp--; // pop exception handler
   1a9ea:	9306      	str	r3, [sp, #24]
                            goto dispatch_loop; // run the exception handler
   1a9ec:	f7ff baa8 	b.w	19f40 <mp_execute_bytecode+0x194>
                        DECODE_ULABEL; // the jump offset if iteration finishes; for labels are always forward
   1a9f0:	f8b3 1001 	ldrh.w	r1, [r3, #1]
                        code_state->sp -= MP_OBJ_ITER_BUF_NSLOTS; // pop the exhausted iterator
   1a9f4:	f8d8 2008 	ldr.w	r2, [r8, #8]
                        DECODE_ULABEL; // the jump offset if iteration finishes; for labels are always forward
   1a9f8:	3303      	adds	r3, #3
                        code_state->ip = ip + ulab; // jump to after for-block
   1a9fa:	440b      	add	r3, r1
                        code_state->sp -= MP_OBJ_ITER_BUF_NSLOTS; // pop the exhausted iterator
   1a9fc:	3a10      	subs	r2, #16
                        code_state->ip = ip + ulab; // jump to after for-block
   1a9fe:	f8c8 3004 	str.w	r3, [r8, #4]
                        code_state->sp -= MP_OBJ_ITER_BUF_NSLOTS; // pop the exhausted iterator
   1aa02:	f8c8 2008 	str.w	r2, [r8, #8]
                        goto outer_dispatch_loop; // continue with dispatch loop
   1aa06:	f7ff b9ee 	b.w	19de6 <mp_execute_bytecode+0x3a>
                        sp--;
   1aa0a:	3d04      	subs	r5, #4
                        obj = TOP();
   1aa0c:	6828      	ldr	r0, [r5, #0]
                            GENERATOR_EXIT_IF_NEEDED(t_exc);
   1aa0e:	f7f2 fafd 	bl	d00c <mp_make_raise_obj>
   1aa12:	4604      	mov	r4, r0
   1aa14:	f7e5 fc40 	bl	298 <nlr_pop>
   1aa18:	9409      	str	r4, [sp, #36]	; 0x24
   1aa1a:	f7ff b9ff 	b.w	19e1c <mp_execute_bytecode+0x70>
                        assert(ret_kind == MP_VM_RETURN_EXCEPTION);
   1aa1e:	2802      	cmp	r0, #2
   1aa20:	f040 8110 	bne.w	1ac44 <mp_execute_bytecode+0xe98>
                        if (EXC_MATCH(ret_value, MP_OBJ_FROM_PTR(&mp_type_StopIteration))) {
   1aa24:	4659      	mov	r1, fp
   1aa26:	9807      	ldr	r0, [sp, #28]
   1aa28:	f7f5 f8d2 	bl	fbd0 <mp_obj_exception_match>
   1aa2c:	2800      	cmp	r0, #0
   1aa2e:	f000 80e0 	beq.w	1abf2 <mp_execute_bytecode+0xe46>
                            PUSH(mp_obj_exception_get_value(ret_value));
   1aa32:	9807      	ldr	r0, [sp, #28]
   1aa34:	f7f4 fefe 	bl	f834 <mp_obj_exception_get_value>
   1aa38:	f845 0c04 	str.w	r0, [r5, #-4]
                            GENERATOR_EXIT_IF_NEEDED(t_exc);
   1aa3c:	f1b9 0f00 	cmp.w	r9, #0
   1aa40:	f47f ac27 	bne.w	1a292 <mp_execute_bytecode+0x4e6>
   1aa44:	e42c      	b.n	1a2a0 <mp_execute_bytecode+0x4f4>
                        assert(mp_obj_is_exception_instance(TOP()));
   1aa46:	4648      	mov	r0, r9
   1aa48:	f7f5 f8b2 	bl	fbb0 <mp_obj_is_exception_instance>
   1aa4c:	2800      	cmp	r0, #0
   1aa4e:	f000 80e4 	beq.w	1ac1a <mp_execute_bytecode+0xe6e>
                        sp[1] = sp[0];
   1aa52:	6828      	ldr	r0, [r5, #0]
   1aa54:	6068      	str	r0, [r5, #4]
                        sp[0] = MP_OBJ_FROM_PTR(mp_obj_get_type(sp[0]));
   1aa56:	f7f3 f901 	bl	dc5c <mp_obj_get_type>
                        sp -= 2;
   1aa5a:	f1a5 0908 	sub.w	r9, r5, #8
                        sp[0] = MP_OBJ_FROM_PTR(mp_obj_get_type(sp[0]));
   1aa5e:	6028      	str	r0, [r5, #0]
                        mp_obj_t ret_value = mp_call_method_n_kw(3, 0, sp);
   1aa60:	9902      	ldr	r1, [sp, #8]
                        sp[2] = mp_const_none;
   1aa62:	60ac      	str	r4, [r5, #8]
                        mp_obj_t ret_value = mp_call_method_n_kw(3, 0, sp);
   1aa64:	464a      	mov	r2, r9
   1aa66:	2003      	movs	r0, #3
   1aa68:	f7f1 fb90 	bl	c18c <mp_call_method_n_kw>
                        if (mp_obj_is_true(ret_value)) {
   1aa6c:	f7f3 f9d2 	bl	de14 <mp_obj_is_true>
   1aa70:	2800      	cmp	r0, #0
   1aa72:	d031      	beq.n	1aad8 <mp_execute_bytecode+0xd2c>
                            assert(exc_sp >= exc_stack);
   1aa74:	9a06      	ldr	r2, [sp, #24]
                            SET_TOP(mp_const_none);
   1aa76:	f845 4c08 	str.w	r4, [r5, #-8]
                            assert(exc_sp >= exc_stack);
   1aa7a:	4297      	cmp	r7, r2
   1aa7c:	f200 80c6 	bhi.w	1ac0c <mp_execute_bytecode+0xe60>
                            POP_EXC_BLOCK();
   1aa80:	9b06      	ldr	r3, [sp, #24]
   1aa82:	685b      	ldr	r3, [r3, #4]
   1aa84:	f003 0301 	and.w	r3, r3, #1
   1aa88:	f88d 3017 	strb.w	r3, [sp, #23]
   1aa8c:	9b06      	ldr	r3, [sp, #24]
   1aa8e:	3b0c      	subs	r3, #12
                        sp -= 2;
   1aa90:	464d      	mov	r5, r9
                switch (*ip++) {
   1aa92:	4634      	mov	r4, r6
                            POP_EXC_BLOCK();
   1aa94:	9306      	str	r3, [sp, #24]
   1aa96:	f7ff ba53 	b.w	19f40 <mp_execute_bytecode+0x194>
                        sp -= MP_OBJ_ITER_BUF_NSLOTS;
   1aa9a:	3d18      	subs	r5, #24
   1aa9c:	e757      	b.n	1a94e <mp_execute_bytecode+0xba2>
                            mp_obj_t *finally_sp = MP_TAGPTR_PTR(exc_sp->val_sp);
   1aa9e:	9b06      	ldr	r3, [sp, #24]
                            finally_sp[1] = sp[0];
   1aaa0:	6828      	ldr	r0, [r5, #0]
                            mp_obj_t *finally_sp = MP_TAGPTR_PTR(exc_sp->val_sp);
   1aaa2:	685d      	ldr	r5, [r3, #4]
                            ip = exc_sp->handler;
   1aaa4:	9a06      	ldr	r2, [sp, #24]
                            POP_EXC_BLOCK();
   1aaa6:	9b06      	ldr	r3, [sp, #24]
                            mp_obj_t *finally_sp = MP_TAGPTR_PTR(exc_sp->val_sp);
   1aaa8:	f025 0503 	bic.w	r5, r5, #3
                            PUSH(MP_OBJ_NEW_SMALL_INT(-1));
   1aaac:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
                            finally_sp[1] = sp[0];
   1aab0:	6068      	str	r0, [r5, #4]
                            PUSH(MP_OBJ_NEW_SMALL_INT(-1));
   1aab2:	60a9      	str	r1, [r5, #8]
                            POP_EXC_BLOCK();
   1aab4:	685b      	ldr	r3, [r3, #4]
                            ip = exc_sp->handler;
   1aab6:	6814      	ldr	r4, [r2, #0]
                            POP_EXC_BLOCK();
   1aab8:	f003 0301 	and.w	r3, r3, #1
   1aabc:	f88d 3017 	strb.w	r3, [sp, #23]
   1aac0:	9b06      	ldr	r3, [sp, #24]
   1aac2:	3b0c      	subs	r3, #12
                            PUSH(MP_OBJ_NEW_SMALL_INT(-1));
   1aac4:	3508      	adds	r5, #8
                            POP_EXC_BLOCK();
   1aac6:	9306      	str	r3, [sp, #24]
                            goto dispatch_loop;
   1aac8:	f7ff ba3a 	b.w	19f40 <mp_execute_bytecode+0x194>
                        obj_shared = fastn[MP_BC_LOAD_FAST_MULTI - (mp_int_t)ip[-1]];
   1aacc:	f1c0 00b0 	rsb	r0, r0, #176	; 0xb0
                switch (*ip++) {
   1aad0:	4634      	mov	r4, r6
                        obj_shared = fastn[MP_BC_LOAD_FAST_MULTI - (mp_int_t)ip[-1]];
   1aad2:	f85a 0020 	ldr.w	r0, [sl, r0, lsl #2]
                        goto load_check;
   1aad6:	e50c      	b.n	1a4f2 <mp_execute_bytecode+0x746>
                            sp[0] = sp[3];
   1aad8:	686b      	ldr	r3, [r5, #4]
   1aada:	f845 3c08 	str.w	r3, [r5, #-8]
                switch (*ip++) {
   1aade:	4634      	mov	r4, r6
                        sp -= 2;
   1aae0:	464d      	mov	r5, r9
   1aae2:	f7ff ba2d 	b.w	19f40 <mp_execute_bytecode+0x194>
                    sp += MP_OBJ_ITER_BUF_NSLOTS - 1;
   1aae6:	464d      	mov	r5, r9
                switch (*ip++) {
   1aae8:	4634      	mov	r4, r6
   1aaea:	f7ff ba29 	b.w	19f40 <mp_execute_bytecode+0x194>
   1aaee:	bf00      	nop
   1aaf0:	0002691c 	.word	0x0002691c
   1aaf4:	000268a8 	.word	0x000268a8
   1aaf8:	0002690c 	.word	0x0002690c
   1aafc:	0002511c 	.word	0x0002511c
   1ab00:	20001248 	.word	0x20001248
                        obj = sp[-MP_OBJ_ITER_BUF_NSLOTS + 2];
   1ab04:	f855 0c08 	ldr.w	r0, [r5, #-8]
   1ab08:	e670      	b.n	1a7ec <mp_execute_bytecode+0xa40>
                        ret_kind = mp_resume(TOP(), send_value, MP_OBJ_NULL, &ret_value);
   1ab0a:	ab07      	add	r3, sp, #28
   1ab0c:	464a      	mov	r2, r9
   1ab0e:	f855 0c04 	ldr.w	r0, [r5, #-4]
   1ab12:	f7f2 f9a5 	bl	ce60 <mp_resume>
   1ab16:	f7ff bbac 	b.w	1a272 <mp_execute_bytecode+0x4c6>
                            obj = mp_obj_new_exception_msg(&mp_type_RuntimeError, "no active exception to reraise");
   1ab1a:	495c      	ldr	r1, [pc, #368]	; (1ac8c <mp_execute_bytecode+0xee0>)
   1ab1c:	485c      	ldr	r0, [pc, #368]	; (1ac90 <mp_execute_bytecode+0xee4>)
   1ab1e:	f7f4 ff21 	bl	f964 <mp_obj_new_exception_msg>
   1ab22:	4604      	mov	r4, r0
                            RAISE(obj);
   1ab24:	f7e5 fbb8 	bl	298 <nlr_pop>
   1ab28:	9409      	str	r4, [sp, #36]	; 0x24
   1ab2a:	f7ff b977 	b.w	19e1c <mp_execute_bytecode+0x70>
                        *code_state->sp = mp_obj_exception_get_value(MP_OBJ_FROM_PTR(nlr.ret_val));
   1ab2e:	9809      	ldr	r0, [sp, #36]	; 0x24
   1ab30:	f8d8 4008 	ldr.w	r4, [r8, #8]
   1ab34:	f7f4 fe7e 	bl	f834 <mp_obj_exception_get_value>
   1ab38:	6020      	str	r0, [r4, #0]
                        code_state->ip++; // yield from is over, move to next instruction
   1ab3a:	f8d8 3004 	ldr.w	r3, [r8, #4]
   1ab3e:	3301      	adds	r3, #1
   1ab40:	f8c8 3004 	str.w	r3, [r8, #4]
                        goto outer_dispatch_loop; // continue with dispatch loop
   1ab44:	f7ff b94f 	b.w	19de6 <mp_execute_bytecode+0x3a>
                        mp_int_t cause = MP_OBJ_SMALL_INT_VALUE(POP());
   1ab48:	3d04      	subs	r5, #4
   1ab4a:	f7ff bacc 	b.w	1a0e6 <mp_execute_bytecode+0x33a>
                    } else if (ip[-1] < MP_BC_UNARY_OP_MULTI + MP_UNARY_OP_NUM_BYTECODE) {
   1ab4e:	28d3      	cmp	r0, #211	; 0xd3
   1ab50:	d939      	bls.n	1abc6 <mp_execute_bytecode+0xe1a>
                    } else if (ip[-1] < MP_BC_BINARY_OP_MULTI + MP_BINARY_OP_NUM_BYTECODE) {
   1ab52:	28f7      	cmp	r0, #247	; 0xf7
   1ab54:	f200 8084 	bhi.w	1ac60 <mp_execute_bytecode+0xeb4>
                        SET_TOP(mp_binary_op(ip[-1] - MP_BC_BINARY_OP_MULTI, lhs, rhs));
   1ab58:	682a      	ldr	r2, [r5, #0]
   1ab5a:	f855 1c04 	ldr.w	r1, [r5, #-4]
   1ab5e:	38d7      	subs	r0, #215	; 0xd7
   1ab60:	f7f1 f842 	bl	bbe8 <mp_binary_op>
                        mp_obj_t rhs = POP();
   1ab64:	1f2b      	subs	r3, r5, #4
                        SET_TOP(mp_binary_op(ip[-1] - MP_BC_BINARY_OP_MULTI, lhs, rhs));
   1ab66:	f845 0c04 	str.w	r0, [r5, #-4]
                switch (*ip++) {
   1ab6a:	4634      	mov	r4, r6
                        mp_obj_t rhs = POP();
   1ab6c:	461d      	mov	r5, r3
                        DISPATCH();
   1ab6e:	f7ff b9e7 	b.w	19f40 <mp_execute_bytecode+0x194>
                code_state->state[0] = MP_OBJ_FROM_PTR(nlr.ret_val); // put exception here because sp is invalid
   1ab72:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1ab74:	f8c8 3014 	str.w	r3, [r8, #20]
                return MP_VM_RETURN_EXCEPTION;
   1ab78:	2002      	movs	r0, #2
   1ab7a:	f7ff badc 	b.w	1a136 <mp_execute_bytecode+0x38a>
                        sp -= 2;
   1ab7e:	f1a5 0308 	sub.w	r3, r5, #8
                        sp[1] = mp_const_none;
   1ab82:	f8c5 9004 	str.w	r9, [r5, #4]
                        sp[2] = mp_const_none;
   1ab86:	f8c5 9008 	str.w	r9, [r5, #8]
                        mp_call_method_n_kw(3, 0, sp);
   1ab8a:	461a      	mov	r2, r3
   1ab8c:	2100      	movs	r1, #0
   1ab8e:	2003      	movs	r0, #3
   1ab90:	9302      	str	r3, [sp, #8]
   1ab92:	f7f1 fafb 	bl	c18c <mp_call_method_n_kw>
                        sp -= 2;
   1ab96:	9b02      	ldr	r3, [sp, #8]
                        SET_TOP(mp_const_none);
   1ab98:	f845 9c08 	str.w	r9, [r5, #-8]
                switch (*ip++) {
   1ab9c:	4634      	mov	r4, r6
                        sp -= 2;
   1ab9e:	461d      	mov	r5, r3
   1aba0:	f7ff b9ce 	b.w	19f40 <mp_execute_bytecode+0x194>
                            mp_obj_t obj = mp_obj_new_exception_msg(&mp_type_NameError, "local variable referenced before assignment");
   1aba4:	493b      	ldr	r1, [pc, #236]	; (1ac94 <mp_execute_bytecode+0xee8>)
   1aba6:	483c      	ldr	r0, [pc, #240]	; (1ac98 <mp_execute_bytecode+0xeec>)
   1aba8:	f7f4 fedc 	bl	f964 <mp_obj_new_exception_msg>
   1abac:	4604      	mov	r4, r0
                            RAISE(obj);
   1abae:	f7e5 fb73 	bl	298 <nlr_pop>
   1abb2:	9409      	str	r4, [sp, #36]	; 0x24
   1abb4:	f7ff b932 	b.w	19e1c <mp_execute_bytecode+0x70>
                assert(exc_sp >= exc_stack);
   1abb8:	4b38      	ldr	r3, [pc, #224]	; (1ac9c <mp_execute_bytecode+0xef0>)
   1abba:	4a39      	ldr	r2, [pc, #228]	; (1aca0 <mp_execute_bytecode+0xef4>)
   1abbc:	4839      	ldr	r0, [pc, #228]	; (1aca4 <mp_execute_bytecode+0xef8>)
   1abbe:	f240 5191 	movw	r1, #1425	; 0x591
   1abc2:	f002 f98d 	bl	1cee0 <__assert_func>
                        SET_TOP(mp_unary_op(ip[-1] - MP_BC_UNARY_OP_MULTI, TOP()));
   1abc6:	38d0      	subs	r0, #208	; 0xd0
   1abc8:	6829      	ldr	r1, [r5, #0]
   1abca:	f7f0 ff0f 	bl	b9ec <mp_unary_op>
                switch (*ip++) {
   1abce:	4634      	mov	r4, r6
                        SET_TOP(mp_unary_op(ip[-1] - MP_BC_UNARY_OP_MULTI, TOP()));
   1abd0:	6028      	str	r0, [r5, #0]
                        DISPATCH();
   1abd2:	f7ff b9b5 	b.w	19f40 <mp_execute_bytecode+0x194>
                            GENERATOR_EXIT_IF_NEEDED(t_exc);
   1abd6:	4648      	mov	r0, r9
   1abd8:	f7ff bb15 	b.w	1a206 <mp_execute_bytecode+0x45a>
   1abdc:	4610      	mov	r0, r2
                        assert(mp_obj_is_exception_instance(TOP()));
   1abde:	f7f4 ffe7 	bl	fbb0 <mp_obj_is_exception_instance>
   1abe2:	2800      	cmp	r0, #0
   1abe4:	d04b      	beq.n	1ac7e <mp_execute_bytecode+0xed2>
                        RAISE(TOP());
   1abe6:	f7e5 fb57 	bl	298 <nlr_pop>
   1abea:	682c      	ldr	r4, [r5, #0]
   1abec:	9409      	str	r4, [sp, #36]	; 0x24
   1abee:	f7ff b915 	b.w	19e1c <mp_execute_bytecode+0x70>
                            RAISE(ret_value);
   1abf2:	f7e5 fb51 	bl	298 <nlr_pop>
   1abf6:	9c07      	ldr	r4, [sp, #28]
   1abf8:	9409      	str	r4, [sp, #36]	; 0x24
   1abfa:	f7ff b90f 	b.w	19e1c <mp_execute_bytecode+0x70>
                        assert(exc_sp >= exc_stack);
   1abfe:	4b27      	ldr	r3, [pc, #156]	; (1ac9c <mp_execute_bytecode+0xef0>)
   1ac00:	4a27      	ldr	r2, [pc, #156]	; (1aca0 <mp_execute_bytecode+0xef4>)
   1ac02:	4828      	ldr	r0, [pc, #160]	; (1aca4 <mp_execute_bytecode+0xef8>)
   1ac04:	f44f 7124 	mov.w	r1, #656	; 0x290
   1ac08:	f002 f96a 	bl	1cee0 <__assert_func>
                            assert(exc_sp >= exc_stack);
   1ac0c:	4b23      	ldr	r3, [pc, #140]	; (1ac9c <mp_execute_bytecode+0xef0>)
   1ac0e:	4a24      	ldr	r2, [pc, #144]	; (1aca0 <mp_execute_bytecode+0xef4>)
   1ac10:	4824      	ldr	r0, [pc, #144]	; (1aca4 <mp_execute_bytecode+0xef8>)
   1ac12:	f44f 711f 	mov.w	r1, #636	; 0x27c
   1ac16:	f002 f963 	bl	1cee0 <__assert_func>
                        assert(mp_obj_is_exception_instance(TOP()));
   1ac1a:	4b23      	ldr	r3, [pc, #140]	; (1aca8 <mp_execute_bytecode+0xefc>)
   1ac1c:	4a20      	ldr	r2, [pc, #128]	; (1aca0 <mp_execute_bytecode+0xef4>)
   1ac1e:	4821      	ldr	r0, [pc, #132]	; (1aca4 <mp_execute_bytecode+0xef8>)
   1ac20:	f240 216e 	movw	r1, #622	; 0x26e
   1ac24:	f002 f95c 	bl	1cee0 <__assert_func>
                    assert(exc_sp >= exc_stack);
   1ac28:	4b1c      	ldr	r3, [pc, #112]	; (1ac9c <mp_execute_bytecode+0xef0>)
   1ac2a:	4a1d      	ldr	r2, [pc, #116]	; (1aca0 <mp_execute_bytecode+0xef4>)
   1ac2c:	481d      	ldr	r0, [pc, #116]	; (1aca4 <mp_execute_bytecode+0xef8>)
   1ac2e:	f240 3105 	movw	r1, #773	; 0x305
   1ac32:	f002 f955 	bl	1cee0 <__assert_func>
                    assert(currently_in_except_block);
   1ac36:	4b1d      	ldr	r3, [pc, #116]	; (1acac <mp_execute_bytecode+0xf00>)
   1ac38:	4a19      	ldr	r2, [pc, #100]	; (1aca0 <mp_execute_bytecode+0xef4>)
   1ac3a:	481a      	ldr	r0, [pc, #104]	; (1aca4 <mp_execute_bytecode+0xef8>)
   1ac3c:	f240 3106 	movw	r1, #774	; 0x306
   1ac40:	f002 f94e 	bl	1cee0 <__assert_func>
                        assert(ret_kind == MP_VM_RETURN_EXCEPTION);
   1ac44:	4b1a      	ldr	r3, [pc, #104]	; (1acb0 <mp_execute_bytecode+0xf04>)
   1ac46:	4a16      	ldr	r2, [pc, #88]	; (1aca0 <mp_execute_bytecode+0xef4>)
   1ac48:	4816      	ldr	r0, [pc, #88]	; (1aca4 <mp_execute_bytecode+0xef8>)
   1ac4a:	f240 41a5 	movw	r1, #1189	; 0x4a5
   1ac4e:	f002 f947 	bl	1cee0 <__assert_func>
                    assert(exc_sp == exc_stack - 1);
   1ac52:	4b18      	ldr	r3, [pc, #96]	; (1acb4 <mp_execute_bytecode+0xf08>)
   1ac54:	4a12      	ldr	r2, [pc, #72]	; (1aca0 <mp_execute_bytecode+0xef4>)
   1ac56:	4813      	ldr	r0, [pc, #76]	; (1aca4 <mp_execute_bytecode+0xef8>)
   1ac58:	f240 4145 	movw	r1, #1093	; 0x445
   1ac5c:	f002 f940 	bl	1cee0 <__assert_func>
                    mp_obj_t obj = mp_obj_new_exception_msg(&mp_type_NotImplementedError, "byte code not implemented");
   1ac60:	4915      	ldr	r1, [pc, #84]	; (1acb8 <mp_execute_bytecode+0xf0c>)
   1ac62:	4816      	ldr	r0, [pc, #88]	; (1acbc <mp_execute_bytecode+0xf10>)
   1ac64:	f7f4 fe7e 	bl	f964 <mp_obj_new_exception_msg>
   1ac68:	4604      	mov	r4, r0
                    nlr_pop();
   1ac6a:	f7e5 fb15 	bl	298 <nlr_pop>
                    fastn[0] = obj;
   1ac6e:	9b01      	ldr	r3, [sp, #4]
   1ac70:	eb08 0883 	add.w	r8, r8, r3, lsl #2
                    return MP_VM_RETURN_EXCEPTION;
   1ac74:	2002      	movs	r0, #2
                    fastn[0] = obj;
   1ac76:	f8c8 4014 	str.w	r4, [r8, #20]
                    return MP_VM_RETURN_EXCEPTION;
   1ac7a:	f7ff ba5c 	b.w	1a136 <mp_execute_bytecode+0x38a>
                        assert(mp_obj_is_exception_instance(TOP()));
   1ac7e:	4b0a      	ldr	r3, [pc, #40]	; (1aca8 <mp_execute_bytecode+0xefc>)
   1ac80:	4a07      	ldr	r2, [pc, #28]	; (1aca0 <mp_execute_bytecode+0xef4>)
   1ac82:	4808      	ldr	r0, [pc, #32]	; (1aca4 <mp_execute_bytecode+0xef8>)
   1ac84:	f44f 7133 	mov.w	r1, #716	; 0x2cc
   1ac88:	f002 f92a 	bl	1cee0 <__assert_func>
   1ac8c:	000269a4 	.word	0x000269a4
   1ac90:	00024284 	.word	0x00024284
   1ac94:	000268bc 	.word	0x000268bc
   1ac98:	0002420c 	.word	0x0002420c
   1ac9c:	0002691c 	.word	0x0002691c
   1aca0:	000268a8 	.word	0x000268a8
   1aca4:	0002690c 	.word	0x0002690c
   1aca8:	000268e8 	.word	0x000268e8
   1acac:	00026930 	.word	0x00026930
   1acb0:	00026964 	.word	0x00026964
   1acb4:	0002694c 	.word	0x0002694c
   1acb8:	00026988 	.word	0x00026988
   1acbc:	000242c0 	.word	0x000242c0

0001acc0 <mp_decode_uint>:
#else // don't print debugging info
#define DEBUG_PRINT (0)
#define DEBUG_printf(...) (void)0
#endif

mp_uint_t mp_decode_uint(const byte **ptr) {
   1acc0:	b480      	push	{r7}
   1acc2:	b087      	sub	sp, #28
   1acc4:	af00      	add	r7, sp, #0
   1acc6:	6078      	str	r0, [r7, #4]
    mp_uint_t unum = 0;
   1acc8:	2300      	movs	r3, #0
   1acca:	617b      	str	r3, [r7, #20]
    byte val;
    const byte *p = *ptr;
   1accc:	687b      	ldr	r3, [r7, #4]
   1acce:	681b      	ldr	r3, [r3, #0]
   1acd0:	613b      	str	r3, [r7, #16]
    do {
        val = *p++;
   1acd2:	693b      	ldr	r3, [r7, #16]
   1acd4:	1c5a      	adds	r2, r3, #1
   1acd6:	613a      	str	r2, [r7, #16]
   1acd8:	781b      	ldrb	r3, [r3, #0]
   1acda:	73fb      	strb	r3, [r7, #15]
        unum = (unum << 7) | (val & 0x7f);
   1acdc:	697b      	ldr	r3, [r7, #20]
   1acde:	01da      	lsls	r2, r3, #7
   1ace0:	7bfb      	ldrb	r3, [r7, #15]
   1ace2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1ace6:	4313      	orrs	r3, r2
   1ace8:	617b      	str	r3, [r7, #20]
    } while ((val & 0x80) != 0);
   1acea:	f997 300f 	ldrsb.w	r3, [r7, #15]
   1acee:	2b00      	cmp	r3, #0
   1acf0:	dbef      	blt.n	1acd2 <mp_decode_uint+0x12>
    *ptr = p;
   1acf2:	687b      	ldr	r3, [r7, #4]
   1acf4:	693a      	ldr	r2, [r7, #16]
   1acf6:	601a      	str	r2, [r3, #0]
    return unum;
   1acf8:	697b      	ldr	r3, [r7, #20]
}
   1acfa:	4618      	mov	r0, r3
   1acfc:	371c      	adds	r7, #28
   1acfe:	46bd      	mov	sp, r7
   1ad00:	f85d 7b04 	ldr.w	r7, [sp], #4
   1ad04:	4770      	bx	lr

0001ad06 <mp_decode_uint_value>:
// the caller doesn't need to increase the ptr argument.  If ptr is a local variable
// and the caller uses mp_decode_uint(&ptr) instead of this function, then the compiler
// must allocate a slot on the stack for ptr, and this slot cannot be reused for
// anything else in the function because the pointer may have been stored in a global
// and reused later in the function.
mp_uint_t mp_decode_uint_value(const byte *ptr) {
   1ad06:	b580      	push	{r7, lr}
   1ad08:	b082      	sub	sp, #8
   1ad0a:	af00      	add	r7, sp, #0
   1ad0c:	6078      	str	r0, [r7, #4]
    return mp_decode_uint(&ptr);
   1ad0e:	1d3b      	adds	r3, r7, #4
   1ad10:	4618      	mov	r0, r3
   1ad12:	f7ff ffd5 	bl	1acc0 <mp_decode_uint>
   1ad16:	4603      	mov	r3, r0
}
   1ad18:	4618      	mov	r0, r3
   1ad1a:	3708      	adds	r7, #8
   1ad1c:	46bd      	mov	sp, r7
   1ad1e:	bd80      	pop	{r7, pc}

0001ad20 <mp_decode_uint_skip>:

// This function is used to help reduce stack usage at the caller, for the case when
// the caller doesn't need the actual value and just wants to skip over it.
const byte *mp_decode_uint_skip(const byte *ptr) {
   1ad20:	b480      	push	{r7}
   1ad22:	b083      	sub	sp, #12
   1ad24:	af00      	add	r7, sp, #0
   1ad26:	6078      	str	r0, [r7, #4]
    while ((*ptr++) & 0x80) {
   1ad28:	bf00      	nop
   1ad2a:	687b      	ldr	r3, [r7, #4]
   1ad2c:	1c5a      	adds	r2, r3, #1
   1ad2e:	607a      	str	r2, [r7, #4]
   1ad30:	781b      	ldrb	r3, [r3, #0]
   1ad32:	b25b      	sxtb	r3, r3
   1ad34:	2b00      	cmp	r3, #0
   1ad36:	dbf8      	blt.n	1ad2a <mp_decode_uint_skip+0xa>
    }
    return ptr;
   1ad38:	687b      	ldr	r3, [r7, #4]
}
   1ad3a:	4618      	mov	r0, r3
   1ad3c:	370c      	adds	r7, #12
   1ad3e:	46bd      	mov	sp, r7
   1ad40:	f85d 7b04 	ldr.w	r7, [sp], #4
   1ad44:	4770      	bx	lr

0001ad46 <fun_pos_args_mismatch>:

STATIC NORETURN void fun_pos_args_mismatch(mp_obj_fun_bc_t *f, size_t expected, size_t given) {
   1ad46:	b580      	push	{r7, lr}
   1ad48:	b084      	sub	sp, #16
   1ad4a:	af00      	add	r7, sp, #0
   1ad4c:	60f8      	str	r0, [r7, #12]
   1ad4e:	60b9      	str	r1, [r7, #8]
   1ad50:	607a      	str	r2, [r7, #4]
#if MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE
    // generic message, used also for other argument issues
    (void)f;
    (void)expected;
    (void)given;
    mp_arg_error_terse_mismatch();
   1ad52:	f7f2 fc49 	bl	d5e8 <mp_arg_error_terse_mismatch>

0001ad56 <dump_args>:
        mp_obj_fun_get_name(MP_OBJ_FROM_PTR(f)), expected, given));
#endif
}

#if DEBUG_PRINT
STATIC void dump_args(const mp_obj_t *a, size_t sz) {
   1ad56:	b580      	push	{r7, lr}
   1ad58:	b084      	sub	sp, #16
   1ad5a:	af00      	add	r7, sp, #0
   1ad5c:	6078      	str	r0, [r7, #4]
   1ad5e:	6039      	str	r1, [r7, #0]
    DEBUG_printf("%p: ", a);
   1ad60:	6879      	ldr	r1, [r7, #4]
   1ad62:	480e      	ldr	r0, [pc, #56]	; (1ad9c <dump_args+0x46>)
   1ad64:	f001 ff42 	bl	1cbec <DEBUG_printf>
    for (size_t i = 0; i < sz; i++) {
   1ad68:	2300      	movs	r3, #0
   1ad6a:	60fb      	str	r3, [r7, #12]
   1ad6c:	e00b      	b.n	1ad86 <dump_args+0x30>
        DEBUG_printf("%p ", a[i]);
   1ad6e:	68fb      	ldr	r3, [r7, #12]
   1ad70:	009b      	lsls	r3, r3, #2
   1ad72:	687a      	ldr	r2, [r7, #4]
   1ad74:	4413      	add	r3, r2
   1ad76:	681b      	ldr	r3, [r3, #0]
   1ad78:	4619      	mov	r1, r3
   1ad7a:	4809      	ldr	r0, [pc, #36]	; (1ada0 <dump_args+0x4a>)
   1ad7c:	f001 ff36 	bl	1cbec <DEBUG_printf>
    for (size_t i = 0; i < sz; i++) {
   1ad80:	68fb      	ldr	r3, [r7, #12]
   1ad82:	3301      	adds	r3, #1
   1ad84:	60fb      	str	r3, [r7, #12]
   1ad86:	68fa      	ldr	r2, [r7, #12]
   1ad88:	683b      	ldr	r3, [r7, #0]
   1ad8a:	429a      	cmp	r2, r3
   1ad8c:	d3ef      	bcc.n	1ad6e <dump_args+0x18>
    }
    DEBUG_printf("\n");
   1ad8e:	4805      	ldr	r0, [pc, #20]	; (1ada4 <dump_args+0x4e>)
   1ad90:	f001 ff2c 	bl	1cbec <DEBUG_printf>
}
   1ad94:	bf00      	nop
   1ad96:	3710      	adds	r7, #16
   1ad98:	46bd      	mov	sp, r7
   1ad9a:	bd80      	pop	{r7, pc}
   1ad9c:	000269c4 	.word	0x000269c4
   1ada0:	000269cc 	.word	0x000269cc
   1ada4:	000269d0 	.word	0x000269d0

0001ada8 <mp_setup_code_state>:
// On entry code_state should be allocated somewhere (stack/heap) and
// contain the following valid entries:
//    - code_state->fun_bc should contain a pointer to the function object
//    - code_state->ip should contain the offset in bytes from the pointer
//      code_state->fun_bc->bytecode to the entry n_state (0 for bytecode, non-zero for native)
void mp_setup_code_state(mp_code_state_t *code_state, size_t n_args, size_t n_kw, const mp_obj_t *args) {
   1ada8:	b590      	push	{r4, r7, lr}
   1adaa:	b09b      	sub	sp, #108	; 0x6c
   1adac:	af00      	add	r7, sp, #0
   1adae:	60f8      	str	r0, [r7, #12]
   1adb0:	60b9      	str	r1, [r7, #8]
   1adb2:	607a      	str	r2, [r7, #4]
   1adb4:	603b      	str	r3, [r7, #0]
    // This function is pretty complicated.  It's main aim is to be efficient in speed and RAM
    // usage for the common case of positional only args.

    // get the function object that we want to set up (could be bytecode or native code)
    mp_obj_fun_bc_t *self = code_state->fun_bc;
   1adb6:	68fb      	ldr	r3, [r7, #12]
   1adb8:	681b      	ldr	r3, [r3, #0]
   1adba:	637b      	str	r3, [r7, #52]	; 0x34

    // ip comes in as an offset into bytecode, so turn it into a true pointer
    code_state->ip = self->bytecode + (size_t)code_state->ip;
   1adbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1adbe:	689b      	ldr	r3, [r3, #8]
   1adc0:	68fa      	ldr	r2, [r7, #12]
   1adc2:	6852      	ldr	r2, [r2, #4]
   1adc4:	441a      	add	r2, r3
   1adc6:	68fb      	ldr	r3, [r7, #12]
   1adc8:	605a      	str	r2, [r3, #4]
    #if MICROPY_STACKLESS
    code_state->prev = NULL;
    #endif

    // get params
    size_t n_state = mp_decode_uint(&code_state->ip);
   1adca:	68fb      	ldr	r3, [r7, #12]
   1adcc:	3304      	adds	r3, #4
   1adce:	4618      	mov	r0, r3
   1add0:	f7ff ff76 	bl	1acc0 <mp_decode_uint>
   1add4:	6338      	str	r0, [r7, #48]	; 0x30
    code_state->ip = mp_decode_uint_skip(code_state->ip); // skip n_exc_stack
   1add6:	68fb      	ldr	r3, [r7, #12]
   1add8:	685b      	ldr	r3, [r3, #4]
   1adda:	4618      	mov	r0, r3
   1addc:	f7ff ffa0 	bl	1ad20 <mp_decode_uint_skip>
   1ade0:	4602      	mov	r2, r0
   1ade2:	68fb      	ldr	r3, [r7, #12]
   1ade4:	605a      	str	r2, [r3, #4]
    size_t scope_flags = *code_state->ip++;
   1ade6:	68fb      	ldr	r3, [r7, #12]
   1ade8:	685b      	ldr	r3, [r3, #4]
   1adea:	1c59      	adds	r1, r3, #1
   1adec:	68fa      	ldr	r2, [r7, #12]
   1adee:	6051      	str	r1, [r2, #4]
   1adf0:	781b      	ldrb	r3, [r3, #0]
   1adf2:	62fb      	str	r3, [r7, #44]	; 0x2c
    size_t n_pos_args = *code_state->ip++;
   1adf4:	68fb      	ldr	r3, [r7, #12]
   1adf6:	685b      	ldr	r3, [r3, #4]
   1adf8:	1c59      	adds	r1, r3, #1
   1adfa:	68fa      	ldr	r2, [r7, #12]
   1adfc:	6051      	str	r1, [r2, #4]
   1adfe:	781b      	ldrb	r3, [r3, #0]
   1ae00:	62bb      	str	r3, [r7, #40]	; 0x28
    size_t n_kwonly_args = *code_state->ip++;
   1ae02:	68fb      	ldr	r3, [r7, #12]
   1ae04:	685b      	ldr	r3, [r3, #4]
   1ae06:	1c59      	adds	r1, r3, #1
   1ae08:	68fa      	ldr	r2, [r7, #12]
   1ae0a:	6051      	str	r1, [r2, #4]
   1ae0c:	781b      	ldrb	r3, [r3, #0]
   1ae0e:	627b      	str	r3, [r7, #36]	; 0x24
    size_t n_def_pos_args = *code_state->ip++;
   1ae10:	68fb      	ldr	r3, [r7, #12]
   1ae12:	685b      	ldr	r3, [r3, #4]
   1ae14:	1c59      	adds	r1, r3, #1
   1ae16:	68fa      	ldr	r2, [r7, #12]
   1ae18:	6051      	str	r1, [r2, #4]
   1ae1a:	781b      	ldrb	r3, [r3, #0]
   1ae1c:	623b      	str	r3, [r7, #32]

    code_state->sp = &code_state->state[0] - 1;
   1ae1e:	68fb      	ldr	r3, [r7, #12]
   1ae20:	3314      	adds	r3, #20
   1ae22:	1f1a      	subs	r2, r3, #4
   1ae24:	68fb      	ldr	r3, [r7, #12]
   1ae26:	609a      	str	r2, [r3, #8]
    code_state->exc_sp = (mp_exc_stack_t*)(code_state->state + n_state) - 1;
   1ae28:	68fb      	ldr	r3, [r7, #12]
   1ae2a:	f103 0214 	add.w	r2, r3, #20
   1ae2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1ae30:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1ae34:	3b03      	subs	r3, #3
   1ae36:	009b      	lsls	r3, r3, #2
   1ae38:	441a      	add	r2, r3
   1ae3a:	68fb      	ldr	r3, [r7, #12]
   1ae3c:	60da      	str	r2, [r3, #12]

    // zero out the local stack to begin with
    memset(code_state->state, 0, n_state * sizeof(*code_state->state));
   1ae3e:	68fb      	ldr	r3, [r7, #12]
   1ae40:	f103 0014 	add.w	r0, r3, #20
   1ae44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1ae46:	009b      	lsls	r3, r3, #2
   1ae48:	461a      	mov	r2, r3
   1ae4a:	2100      	movs	r1, #0
   1ae4c:	f003 fc0a 	bl	1e664 <memset>

    const mp_obj_t *kwargs = args + n_args;
   1ae50:	68bb      	ldr	r3, [r7, #8]
   1ae52:	009b      	lsls	r3, r3, #2
   1ae54:	683a      	ldr	r2, [r7, #0]
   1ae56:	4413      	add	r3, r2
   1ae58:	61fb      	str	r3, [r7, #28]

    // var_pos_kw_args points to the stack where the var-args tuple, and var-kw dict, should go (if they are needed)
    mp_obj_t *var_pos_kw_args = &code_state->state[n_state - 1 - n_pos_args - n_kwonly_args];
   1ae5a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   1ae5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1ae5e:	1ad2      	subs	r2, r2, r3
   1ae60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1ae62:	1ad3      	subs	r3, r2, r3
   1ae64:	3b01      	subs	r3, #1
   1ae66:	3304      	adds	r3, #4
   1ae68:	009b      	lsls	r3, r3, #2
   1ae6a:	68fa      	ldr	r2, [r7, #12]
   1ae6c:	4413      	add	r3, r2
   1ae6e:	3304      	adds	r3, #4
   1ae70:	667b      	str	r3, [r7, #100]	; 0x64

    // check positional arguments

    if (n_args > n_pos_args) {
   1ae72:	68ba      	ldr	r2, [r7, #8]
   1ae74:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1ae76:	429a      	cmp	r2, r3
   1ae78:	d91b      	bls.n	1aeb2 <mp_setup_code_state+0x10a>
        // given more than enough arguments
        if ((scope_flags & MP_SCOPE_FLAG_VARARGS) == 0) {
   1ae7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1ae7c:	f003 0301 	and.w	r3, r3, #1
   1ae80:	2b00      	cmp	r3, #0
   1ae82:	d104      	bne.n	1ae8e <mp_setup_code_state+0xe6>
            fun_pos_args_mismatch(self, n_pos_args, n_args);
   1ae84:	68ba      	ldr	r2, [r7, #8]
   1ae86:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   1ae88:	6b78      	ldr	r0, [r7, #52]	; 0x34
   1ae8a:	f7ff ff5c 	bl	1ad46 <fun_pos_args_mismatch>
        }
        // put extra arguments in varargs tuple
        *var_pos_kw_args-- = mp_obj_new_tuple(n_args - n_pos_args, args + n_pos_args);
   1ae8e:	6e7c      	ldr	r4, [r7, #100]	; 0x64
   1ae90:	1f23      	subs	r3, r4, #4
   1ae92:	667b      	str	r3, [r7, #100]	; 0x64
   1ae94:	68ba      	ldr	r2, [r7, #8]
   1ae96:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1ae98:	1ad0      	subs	r0, r2, r3
   1ae9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1ae9c:	009b      	lsls	r3, r3, #2
   1ae9e:	683a      	ldr	r2, [r7, #0]
   1aea0:	4413      	add	r3, r2
   1aea2:	4619      	mov	r1, r3
   1aea4:	f7fb f9d2 	bl	1624c <mp_obj_new_tuple>
   1aea8:	4603      	mov	r3, r0
   1aeaa:	6023      	str	r3, [r4, #0]
        n_args = n_pos_args;
   1aeac:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1aeae:	60bb      	str	r3, [r7, #8]
   1aeb0:	e03f      	b.n	1af32 <mp_setup_code_state+0x18a>
    } else {
        if ((scope_flags & MP_SCOPE_FLAG_VARARGS) != 0) {
   1aeb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1aeb4:	f003 0301 	and.w	r3, r3, #1
   1aeb8:	2b00      	cmp	r3, #0
   1aeba:	d007      	beq.n	1aecc <mp_setup_code_state+0x124>
            DEBUG_printf("passing empty tuple as *args\n");
   1aebc:	48a3      	ldr	r0, [pc, #652]	; (1b14c <mp_setup_code_state+0x3a4>)
   1aebe:	f001 fe95 	bl	1cbec <DEBUG_printf>
            *var_pos_kw_args-- = mp_const_empty_tuple;
   1aec2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   1aec4:	1f1a      	subs	r2, r3, #4
   1aec6:	667a      	str	r2, [r7, #100]	; 0x64
   1aec8:	4aa1      	ldr	r2, [pc, #644]	; (1b150 <mp_setup_code_state+0x3a8>)
   1aeca:	601a      	str	r2, [r3, #0]
        }
        // Apply processing and check below only if we don't have kwargs,
        // otherwise, kw handling code below has own extensive checks.
        if (n_kw == 0 && (scope_flags & MP_SCOPE_FLAG_DEFKWARGS) == 0) {
   1aecc:	687b      	ldr	r3, [r7, #4]
   1aece:	2b00      	cmp	r3, #0
   1aed0:	d12f      	bne.n	1af32 <mp_setup_code_state+0x18a>
   1aed2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1aed4:	f003 0308 	and.w	r3, r3, #8
   1aed8:	2b00      	cmp	r3, #0
   1aeda:	d12a      	bne.n	1af32 <mp_setup_code_state+0x18a>
            if (n_args >= (size_t)(n_pos_args - n_def_pos_args)) {
   1aedc:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1aede:	6a3b      	ldr	r3, [r7, #32]
   1aee0:	1ad2      	subs	r2, r2, r3
   1aee2:	68bb      	ldr	r3, [r7, #8]
   1aee4:	429a      	cmp	r2, r3
   1aee6:	d81c      	bhi.n	1af22 <mp_setup_code_state+0x17a>
                // given enough arguments, but may need to use some default arguments
                for (size_t i = n_args; i < n_pos_args; i++) {
   1aee8:	68bb      	ldr	r3, [r7, #8]
   1aeea:	663b      	str	r3, [r7, #96]	; 0x60
   1aeec:	e014      	b.n	1af18 <mp_setup_code_state+0x170>
                    code_state->state[n_state - 1 - i] = self->extra_args[i - (n_pos_args - n_def_pos_args)];
   1aeee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   1aef0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   1aef2:	1ad3      	subs	r3, r2, r3
   1aef4:	3b01      	subs	r3, #1
   1aef6:	6a39      	ldr	r1, [r7, #32]
   1aef8:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1aefa:	1a89      	subs	r1, r1, r2
   1aefc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
   1aefe:	4411      	add	r1, r2
   1af00:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   1af02:	3104      	adds	r1, #4
   1af04:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
   1af08:	68f9      	ldr	r1, [r7, #12]
   1af0a:	3304      	adds	r3, #4
   1af0c:	009b      	lsls	r3, r3, #2
   1af0e:	440b      	add	r3, r1
   1af10:	605a      	str	r2, [r3, #4]
                for (size_t i = n_args; i < n_pos_args; i++) {
   1af12:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   1af14:	3301      	adds	r3, #1
   1af16:	663b      	str	r3, [r7, #96]	; 0x60
   1af18:	6e3a      	ldr	r2, [r7, #96]	; 0x60
   1af1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1af1c:	429a      	cmp	r2, r3
   1af1e:	d3e6      	bcc.n	1aeee <mp_setup_code_state+0x146>
   1af20:	e007      	b.n	1af32 <mp_setup_code_state+0x18a>
                }
            } else {
                fun_pos_args_mismatch(self, n_pos_args - n_def_pos_args, n_args);
   1af22:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1af24:	6a3b      	ldr	r3, [r7, #32]
   1af26:	1ad3      	subs	r3, r2, r3
   1af28:	68ba      	ldr	r2, [r7, #8]
   1af2a:	4619      	mov	r1, r3
   1af2c:	6b78      	ldr	r0, [r7, #52]	; 0x34
   1af2e:	f7ff ff0a 	bl	1ad46 <fun_pos_args_mismatch>
            }
        }
    }

    // copy positional args into state
    for (size_t i = 0; i < n_args; i++) {
   1af32:	2300      	movs	r3, #0
   1af34:	65fb      	str	r3, [r7, #92]	; 0x5c
   1af36:	e010      	b.n	1af5a <mp_setup_code_state+0x1b2>
        code_state->state[n_state - 1 - i] = args[i];
   1af38:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   1af3a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
   1af3c:	1ad3      	subs	r3, r2, r3
   1af3e:	3b01      	subs	r3, #1
   1af40:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
   1af42:	0092      	lsls	r2, r2, #2
   1af44:	6839      	ldr	r1, [r7, #0]
   1af46:	440a      	add	r2, r1
   1af48:	6812      	ldr	r2, [r2, #0]
   1af4a:	68f9      	ldr	r1, [r7, #12]
   1af4c:	3304      	adds	r3, #4
   1af4e:	009b      	lsls	r3, r3, #2
   1af50:	440b      	add	r3, r1
   1af52:	605a      	str	r2, [r3, #4]
    for (size_t i = 0; i < n_args; i++) {
   1af54:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
   1af56:	3301      	adds	r3, #1
   1af58:	65fb      	str	r3, [r7, #92]	; 0x5c
   1af5a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
   1af5c:	68bb      	ldr	r3, [r7, #8]
   1af5e:	429a      	cmp	r2, r3
   1af60:	d3ea      	bcc.n	1af38 <mp_setup_code_state+0x190>
    }

    // check keyword arguments

    if (n_kw != 0 || (scope_flags & MP_SCOPE_FLAG_DEFKWARGS) != 0) {
   1af62:	687b      	ldr	r3, [r7, #4]
   1af64:	2b00      	cmp	r3, #0
   1af66:	d105      	bne.n	1af74 <mp_setup_code_state+0x1cc>
   1af68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1af6a:	f003 0308 	and.w	r3, r3, #8
   1af6e:	2b00      	cmp	r3, #0
   1af70:	f000 815a 	beq.w	1b228 <mp_setup_code_state+0x480>
        DEBUG_printf("Initial args: ");
   1af74:	4877      	ldr	r0, [pc, #476]	; (1b154 <mp_setup_code_state+0x3ac>)
   1af76:	f001 fe39 	bl	1cbec <DEBUG_printf>
        dump_args(code_state->state + n_state - n_pos_args - n_kwonly_args, n_pos_args + n_kwonly_args);
   1af7a:	68fb      	ldr	r3, [r7, #12]
   1af7c:	f103 0214 	add.w	r2, r3, #20
   1af80:	6b39      	ldr	r1, [r7, #48]	; 0x30
   1af82:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1af84:	1ac9      	subs	r1, r1, r3
   1af86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1af88:	1acb      	subs	r3, r1, r3
   1af8a:	009b      	lsls	r3, r3, #2
   1af8c:	18d0      	adds	r0, r2, r3
   1af8e:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1af90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1af92:	4413      	add	r3, r2
   1af94:	4619      	mov	r1, r3
   1af96:	f7ff fede 	bl	1ad56 <dump_args>

        mp_obj_t dict = MP_OBJ_NULL;
   1af9a:	2300      	movs	r3, #0
   1af9c:	65bb      	str	r3, [r7, #88]	; 0x58
        if ((scope_flags & MP_SCOPE_FLAG_VARKEYWORDS) != 0) {
   1af9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1afa0:	f003 0302 	and.w	r3, r3, #2
   1afa4:	2b00      	cmp	r3, #0
   1afa6:	d006      	beq.n	1afb6 <mp_setup_code_state+0x20e>
            dict = mp_obj_new_dict(n_kw); // TODO: better go conservative with 0?
   1afa8:	6878      	ldr	r0, [r7, #4]
   1afaa:	f7f4 faf7 	bl	f59c <mp_obj_new_dict>
   1afae:	65b8      	str	r0, [r7, #88]	; 0x58
            *var_pos_kw_args = dict;
   1afb0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   1afb2:	6dba      	ldr	r2, [r7, #88]	; 0x58
   1afb4:	601a      	str	r2, [r3, #0]
        }

        // get pointer to arg_names array
        const mp_obj_t *arg_names = (const mp_obj_t*)self->const_table;
   1afb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1afb8:	68db      	ldr	r3, [r3, #12]
   1afba:	61bb      	str	r3, [r7, #24]

        for (size_t i = 0; i < n_kw; i++) {
   1afbc:	2300      	movs	r3, #0
   1afbe:	657b      	str	r3, [r7, #84]	; 0x54
   1afc0:	e059      	b.n	1b076 <mp_setup_code_state+0x2ce>
            // the keys in kwargs are expected to be qstr objects
            mp_obj_t wanted_arg_name = kwargs[2 * i];
   1afc2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   1afc4:	00db      	lsls	r3, r3, #3
   1afc6:	69fa      	ldr	r2, [r7, #28]
   1afc8:	4413      	add	r3, r2
   1afca:	681b      	ldr	r3, [r3, #0]
   1afcc:	617b      	str	r3, [r7, #20]
            for (size_t j = 0; j < n_pos_args + n_kwonly_args; j++) {
   1afce:	2300      	movs	r3, #0
   1afd0:	653b      	str	r3, [r7, #80]	; 0x50
   1afd2:	e030      	b.n	1b036 <mp_setup_code_state+0x28e>
                if (wanted_arg_name == arg_names[j]) {
   1afd4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   1afd6:	009b      	lsls	r3, r3, #2
   1afd8:	69ba      	ldr	r2, [r7, #24]
   1afda:	4413      	add	r3, r2
   1afdc:	681a      	ldr	r2, [r3, #0]
   1afde:	697b      	ldr	r3, [r7, #20]
   1afe0:	429a      	cmp	r2, r3
   1afe2:	d125      	bne.n	1b030 <mp_setup_code_state+0x288>
                    if (code_state->state[n_state - 1 - j] != MP_OBJ_NULL) {
   1afe4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   1afe6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   1afe8:	1ad3      	subs	r3, r2, r3
   1afea:	3b01      	subs	r3, #1
   1afec:	68fa      	ldr	r2, [r7, #12]
   1afee:	3304      	adds	r3, #4
   1aff0:	009b      	lsls	r3, r3, #2
   1aff2:	4413      	add	r3, r2
   1aff4:	685b      	ldr	r3, [r3, #4]
   1aff6:	2b00      	cmp	r3, #0
   1aff8:	d00a      	beq.n	1b010 <mp_setup_code_state+0x268>
                        nlr_raise(mp_obj_new_exception_msg_varg(&mp_type_TypeError,
   1affa:	697b      	ldr	r3, [r7, #20]
   1affc:	089b      	lsrs	r3, r3, #2
   1affe:	461a      	mov	r2, r3
   1b000:	4955      	ldr	r1, [pc, #340]	; (1b158 <mp_setup_code_state+0x3b0>)
   1b002:	4856      	ldr	r0, [pc, #344]	; (1b15c <mp_setup_code_state+0x3b4>)
   1b004:	f7f4 fd0e 	bl	fa24 <mp_obj_new_exception_msg_varg>
   1b008:	4603      	mov	r3, r0
   1b00a:	4618      	mov	r0, r3
   1b00c:	f7e5 f968 	bl	2e0 <nlr_jump>
                            "function got multiple values for argument '%q'", MP_OBJ_QSTR_VALUE(wanted_arg_name)));
                    }
                    code_state->state[n_state - 1 - j] = kwargs[2 * i + 1];
   1b010:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   1b012:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   1b014:	1ad3      	subs	r3, r2, r3
   1b016:	3b01      	subs	r3, #1
   1b018:	6d7a      	ldr	r2, [r7, #84]	; 0x54
   1b01a:	00d2      	lsls	r2, r2, #3
   1b01c:	3204      	adds	r2, #4
   1b01e:	69f9      	ldr	r1, [r7, #28]
   1b020:	440a      	add	r2, r1
   1b022:	6812      	ldr	r2, [r2, #0]
   1b024:	68f9      	ldr	r1, [r7, #12]
   1b026:	3304      	adds	r3, #4
   1b028:	009b      	lsls	r3, r3, #2
   1b02a:	440b      	add	r3, r1
   1b02c:	605a      	str	r2, [r3, #4]
                    goto continue2;
   1b02e:	e01f      	b.n	1b070 <mp_setup_code_state+0x2c8>
            for (size_t j = 0; j < n_pos_args + n_kwonly_args; j++) {
   1b030:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   1b032:	3301      	adds	r3, #1
   1b034:	653b      	str	r3, [r7, #80]	; 0x50
   1b036:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1b038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1b03a:	441a      	add	r2, r3
   1b03c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   1b03e:	429a      	cmp	r2, r3
   1b040:	d8c8      	bhi.n	1afd4 <mp_setup_code_state+0x22c>
                }
            }
            // Didn't find name match with positional args
            if ((scope_flags & MP_SCOPE_FLAG_VARKEYWORDS) == 0) {
   1b042:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1b044:	f003 0302 	and.w	r3, r3, #2
   1b048:	2b00      	cmp	r3, #0
   1b04a:	d102      	bne.n	1b052 <mp_setup_code_state+0x2aa>
                if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
                    mp_raise_TypeError("unexpected keyword argument");
   1b04c:	4844      	ldr	r0, [pc, #272]	; (1b160 <mp_setup_code_state+0x3b8>)
   1b04e:	f7f2 f99d 	bl	d38c <mp_raise_TypeError>
                } else {
                    nlr_raise(mp_obj_new_exception_msg_varg(&mp_type_TypeError,
                        "unexpected keyword argument '%q'", MP_OBJ_QSTR_VALUE(wanted_arg_name)));
                }
            }
            mp_obj_dict_store(dict, kwargs[2 * i], kwargs[2 * i + 1]);
   1b052:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   1b054:	00db      	lsls	r3, r3, #3
   1b056:	69fa      	ldr	r2, [r7, #28]
   1b058:	4413      	add	r3, r2
   1b05a:	6819      	ldr	r1, [r3, #0]
   1b05c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   1b05e:	00db      	lsls	r3, r3, #3
   1b060:	3304      	adds	r3, #4
   1b062:	69fa      	ldr	r2, [r7, #28]
   1b064:	4413      	add	r3, r2
   1b066:	681b      	ldr	r3, [r3, #0]
   1b068:	461a      	mov	r2, r3
   1b06a:	6db8      	ldr	r0, [r7, #88]	; 0x58
   1b06c:	f7f4 fab7 	bl	f5de <mp_obj_dict_store>
        for (size_t i = 0; i < n_kw; i++) {
   1b070:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   1b072:	3301      	adds	r3, #1
   1b074:	657b      	str	r3, [r7, #84]	; 0x54
   1b076:	6d7a      	ldr	r2, [r7, #84]	; 0x54
   1b078:	687b      	ldr	r3, [r7, #4]
   1b07a:	429a      	cmp	r2, r3
   1b07c:	d3a1      	bcc.n	1afc2 <mp_setup_code_state+0x21a>
continue2:;
        }

        DEBUG_printf("Args with kws flattened: ");
   1b07e:	4839      	ldr	r0, [pc, #228]	; (1b164 <mp_setup_code_state+0x3bc>)
   1b080:	f001 fdb4 	bl	1cbec <DEBUG_printf>
        dump_args(code_state->state + n_state - n_pos_args - n_kwonly_args, n_pos_args + n_kwonly_args);
   1b084:	68fb      	ldr	r3, [r7, #12]
   1b086:	f103 0214 	add.w	r2, r3, #20
   1b08a:	6b39      	ldr	r1, [r7, #48]	; 0x30
   1b08c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1b08e:	1ac9      	subs	r1, r1, r3
   1b090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1b092:	1acb      	subs	r3, r1, r3
   1b094:	009b      	lsls	r3, r3, #2
   1b096:	18d0      	adds	r0, r2, r3
   1b098:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1b09a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1b09c:	4413      	add	r3, r2
   1b09e:	4619      	mov	r1, r3
   1b0a0:	f7ff fe59 	bl	1ad56 <dump_args>

        // fill in defaults for positional args
        mp_obj_t *d = &code_state->state[n_state - n_pos_args];
   1b0a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   1b0a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1b0a8:	1ad3      	subs	r3, r2, r3
   1b0aa:	3304      	adds	r3, #4
   1b0ac:	009b      	lsls	r3, r3, #2
   1b0ae:	68fa      	ldr	r2, [r7, #12]
   1b0b0:	4413      	add	r3, r2
   1b0b2:	3304      	adds	r3, #4
   1b0b4:	64fb      	str	r3, [r7, #76]	; 0x4c
        mp_obj_t *s = &self->extra_args[n_def_pos_args - 1];
   1b0b6:	6a3b      	ldr	r3, [r7, #32]
   1b0b8:	3b01      	subs	r3, #1
   1b0ba:	3304      	adds	r3, #4
   1b0bc:	009b      	lsls	r3, r3, #2
   1b0be:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   1b0c0:	4413      	add	r3, r2
   1b0c2:	64bb      	str	r3, [r7, #72]	; 0x48
        for (size_t i = n_def_pos_args; i > 0; i--, d++, s--) {
   1b0c4:	6a3b      	ldr	r3, [r7, #32]
   1b0c6:	647b      	str	r3, [r7, #68]	; 0x44
   1b0c8:	e010      	b.n	1b0ec <mp_setup_code_state+0x344>
            if (*d == MP_OBJ_NULL) {
   1b0ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   1b0cc:	681b      	ldr	r3, [r3, #0]
   1b0ce:	2b00      	cmp	r3, #0
   1b0d0:	d103      	bne.n	1b0da <mp_setup_code_state+0x332>
                *d = *s;
   1b0d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   1b0d4:	681a      	ldr	r2, [r3, #0]
   1b0d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   1b0d8:	601a      	str	r2, [r3, #0]
        for (size_t i = n_def_pos_args; i > 0; i--, d++, s--) {
   1b0da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   1b0dc:	3b01      	subs	r3, #1
   1b0de:	647b      	str	r3, [r7, #68]	; 0x44
   1b0e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   1b0e2:	3304      	adds	r3, #4
   1b0e4:	64fb      	str	r3, [r7, #76]	; 0x4c
   1b0e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   1b0e8:	3b04      	subs	r3, #4
   1b0ea:	64bb      	str	r3, [r7, #72]	; 0x48
   1b0ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   1b0ee:	2b00      	cmp	r3, #0
   1b0f0:	d1eb      	bne.n	1b0ca <mp_setup_code_state+0x322>
            }
        }

        DEBUG_printf("Args after filling default positional: ");
   1b0f2:	481d      	ldr	r0, [pc, #116]	; (1b168 <mp_setup_code_state+0x3c0>)
   1b0f4:	f001 fd7a 	bl	1cbec <DEBUG_printf>
        dump_args(code_state->state + n_state - n_pos_args - n_kwonly_args, n_pos_args + n_kwonly_args);
   1b0f8:	68fb      	ldr	r3, [r7, #12]
   1b0fa:	f103 0214 	add.w	r2, r3, #20
   1b0fe:	6b39      	ldr	r1, [r7, #48]	; 0x30
   1b100:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1b102:	1ac9      	subs	r1, r1, r3
   1b104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1b106:	1acb      	subs	r3, r1, r3
   1b108:	009b      	lsls	r3, r3, #2
   1b10a:	18d0      	adds	r0, r2, r3
   1b10c:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1b10e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1b110:	4413      	add	r3, r2
   1b112:	4619      	mov	r1, r3
   1b114:	f7ff fe1f 	bl	1ad56 <dump_args>

        // Check that all mandatory positional args are specified
        while (d < &code_state->state[n_state]) {
   1b118:	e02a      	b.n	1b170 <mp_setup_code_state+0x3c8>
            if (*d++ == MP_OBJ_NULL) {
   1b11a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   1b11c:	1d1a      	adds	r2, r3, #4
   1b11e:	64fa      	str	r2, [r7, #76]	; 0x4c
   1b120:	681b      	ldr	r3, [r3, #0]
   1b122:	2b00      	cmp	r3, #0
   1b124:	d124      	bne.n	1b170 <mp_setup_code_state+0x3c8>
                nlr_raise(mp_obj_new_exception_msg_varg(&mp_type_TypeError,
   1b126:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1b128:	3304      	adds	r3, #4
   1b12a:	009b      	lsls	r3, r3, #2
   1b12c:	68fa      	ldr	r2, [r7, #12]
   1b12e:	4413      	add	r3, r2
   1b130:	3304      	adds	r3, #4
   1b132:	461a      	mov	r2, r3
   1b134:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   1b136:	1ad3      	subs	r3, r2, r3
   1b138:	109b      	asrs	r3, r3, #2
   1b13a:	461a      	mov	r2, r3
   1b13c:	490b      	ldr	r1, [pc, #44]	; (1b16c <mp_setup_code_state+0x3c4>)
   1b13e:	4807      	ldr	r0, [pc, #28]	; (1b15c <mp_setup_code_state+0x3b4>)
   1b140:	f7f4 fc70 	bl	fa24 <mp_obj_new_exception_msg_varg>
   1b144:	4603      	mov	r3, r0
   1b146:	4618      	mov	r0, r3
   1b148:	f7e5 f8ca 	bl	2e0 <nlr_jump>
   1b14c:	000269d4 	.word	0x000269d4
   1b150:	00025a70 	.word	0x00025a70
   1b154:	000269f4 	.word	0x000269f4
   1b158:	00026a04 	.word	0x00026a04
   1b15c:	00024374 	.word	0x00024374
   1b160:	00026a34 	.word	0x00026a34
   1b164:	00026a50 	.word	0x00026a50
   1b168:	00026a6c 	.word	0x00026a6c
   1b16c:	00026a94 	.word	0x00026a94
        while (d < &code_state->state[n_state]) {
   1b170:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1b172:	3304      	adds	r3, #4
   1b174:	009b      	lsls	r3, r3, #2
   1b176:	68fa      	ldr	r2, [r7, #12]
   1b178:	4413      	add	r3, r2
   1b17a:	1d1a      	adds	r2, r3, #4
   1b17c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   1b17e:	429a      	cmp	r2, r3
   1b180:	d8cb      	bhi.n	1b11a <mp_setup_code_state+0x372>
            }
        }

        // Check that all mandatory keyword args are specified
        // Fill in default kw args if we have them
        for (size_t i = 0; i < n_kwonly_args; i++) {
   1b182:	2300      	movs	r3, #0
   1b184:	643b      	str	r3, [r7, #64]	; 0x40
   1b186:	e04a      	b.n	1b21e <mp_setup_code_state+0x476>
            if (code_state->state[n_state - 1 - n_pos_args - i] == MP_OBJ_NULL) {
   1b188:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   1b18a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1b18c:	1ad2      	subs	r2, r2, r3
   1b18e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1b190:	1ad3      	subs	r3, r2, r3
   1b192:	3b01      	subs	r3, #1
   1b194:	68fa      	ldr	r2, [r7, #12]
   1b196:	3304      	adds	r3, #4
   1b198:	009b      	lsls	r3, r3, #2
   1b19a:	4413      	add	r3, r2
   1b19c:	685b      	ldr	r3, [r3, #4]
   1b19e:	2b00      	cmp	r3, #0
   1b1a0:	d13a      	bne.n	1b218 <mp_setup_code_state+0x470>
                mp_map_elem_t *elem = NULL;
   1b1a2:	2300      	movs	r3, #0
   1b1a4:	63fb      	str	r3, [r7, #60]	; 0x3c
                if ((scope_flags & MP_SCOPE_FLAG_DEFKWARGS) != 0) {
   1b1a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1b1a8:	f003 0308 	and.w	r3, r3, #8
   1b1ac:	2b00      	cmp	r3, #0
   1b1ae:	d011      	beq.n	1b1d4 <mp_setup_code_state+0x42c>
                    elem = mp_map_lookup(&((mp_obj_dict_t*)MP_OBJ_TO_PTR(self->extra_args[n_def_pos_args]))->map, arg_names[n_pos_args + i], MP_MAP_LOOKUP);
   1b1b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1b1b2:	6a3a      	ldr	r2, [r7, #32]
   1b1b4:	3204      	adds	r2, #4
   1b1b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   1b1ba:	1d18      	adds	r0, r3, #4
   1b1bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1b1be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1b1c0:	4413      	add	r3, r2
   1b1c2:	009b      	lsls	r3, r3, #2
   1b1c4:	69ba      	ldr	r2, [r7, #24]
   1b1c6:	4413      	add	r3, r2
   1b1c8:	681b      	ldr	r3, [r3, #0]
   1b1ca:	2200      	movs	r2, #0
   1b1cc:	4619      	mov	r1, r3
   1b1ce:	f7f2 fb5f 	bl	d890 <mp_map_lookup>
   1b1d2:	63f8      	str	r0, [r7, #60]	; 0x3c
                }
                if (elem != NULL) {
   1b1d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1b1d6:	2b00      	cmp	r3, #0
   1b1d8:	d00d      	beq.n	1b1f6 <mp_setup_code_state+0x44e>
                    code_state->state[n_state - 1 - n_pos_args - i] = elem->value;
   1b1da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   1b1dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1b1de:	1ad2      	subs	r2, r2, r3
   1b1e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1b1e2:	1ad3      	subs	r3, r2, r3
   1b1e4:	3b01      	subs	r3, #1
   1b1e6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   1b1e8:	6852      	ldr	r2, [r2, #4]
   1b1ea:	68f9      	ldr	r1, [r7, #12]
   1b1ec:	3304      	adds	r3, #4
   1b1ee:	009b      	lsls	r3, r3, #2
   1b1f0:	440b      	add	r3, r1
   1b1f2:	605a      	str	r2, [r3, #4]
   1b1f4:	e010      	b.n	1b218 <mp_setup_code_state+0x470>
                } else {
                    nlr_raise(mp_obj_new_exception_msg_varg(&mp_type_TypeError,
   1b1f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1b1f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1b1fa:	4413      	add	r3, r2
   1b1fc:	009b      	lsls	r3, r3, #2
   1b1fe:	69ba      	ldr	r2, [r7, #24]
   1b200:	4413      	add	r3, r2
   1b202:	681b      	ldr	r3, [r3, #0]
   1b204:	089b      	lsrs	r3, r3, #2
   1b206:	461a      	mov	r2, r3
   1b208:	4935      	ldr	r1, [pc, #212]	; (1b2e0 <mp_setup_code_state+0x538>)
   1b20a:	4836      	ldr	r0, [pc, #216]	; (1b2e4 <mp_setup_code_state+0x53c>)
   1b20c:	f7f4 fc0a 	bl	fa24 <mp_obj_new_exception_msg_varg>
   1b210:	4603      	mov	r3, r0
   1b212:	4618      	mov	r0, r3
   1b214:	f7e5 f864 	bl	2e0 <nlr_jump>
        for (size_t i = 0; i < n_kwonly_args; i++) {
   1b218:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1b21a:	3301      	adds	r3, #1
   1b21c:	643b      	str	r3, [r7, #64]	; 0x40
   1b21e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   1b220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1b222:	429a      	cmp	r2, r3
   1b224:	d3b0      	bcc.n	1b188 <mp_setup_code_state+0x3e0>
    if (n_kw != 0 || (scope_flags & MP_SCOPE_FLAG_DEFKWARGS) != 0) {
   1b226:	e010      	b.n	1b24a <mp_setup_code_state+0x4a2>
            }
        }

    } else {
        // no keyword arguments given
        if (n_kwonly_args != 0) {
   1b228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1b22a:	2b00      	cmp	r3, #0
   1b22c:	d002      	beq.n	1b234 <mp_setup_code_state+0x48c>
            mp_raise_TypeError("function missing keyword-only argument");
   1b22e:	482e      	ldr	r0, [pc, #184]	; (1b2e8 <mp_setup_code_state+0x540>)
   1b230:	f7f2 f8ac 	bl	d38c <mp_raise_TypeError>
        }
        if ((scope_flags & MP_SCOPE_FLAG_VARKEYWORDS) != 0) {
   1b234:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1b236:	f003 0302 	and.w	r3, r3, #2
   1b23a:	2b00      	cmp	r3, #0
   1b23c:	d005      	beq.n	1b24a <mp_setup_code_state+0x4a2>
            *var_pos_kw_args = mp_obj_new_dict(0);
   1b23e:	2000      	movs	r0, #0
   1b240:	f7f4 f9ac 	bl	f59c <mp_obj_new_dict>
   1b244:	4602      	mov	r2, r0
   1b246:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   1b248:	601a      	str	r2, [r3, #0]
        }
    }

    // get the ip and skip argument names
    const byte *ip = code_state->ip;
   1b24a:	68fb      	ldr	r3, [r7, #12]
   1b24c:	685b      	ldr	r3, [r3, #4]
   1b24e:	63bb      	str	r3, [r7, #56]	; 0x38

    // jump over code info (source file and line-number mapping)
    ip += mp_decode_uint_value(ip);
   1b250:	6bb8      	ldr	r0, [r7, #56]	; 0x38
   1b252:	f7ff fd58 	bl	1ad06 <mp_decode_uint_value>
   1b256:	4602      	mov	r2, r0
   1b258:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1b25a:	4413      	add	r3, r2
   1b25c:	63bb      	str	r3, [r7, #56]	; 0x38

    // bytecode prelude: initialise closed over variables
    size_t local_num;
    while ((local_num = *ip++) != 255) {
   1b25e:	e015      	b.n	1b28c <mp_setup_code_state+0x4e4>
        code_state->state[n_state - 1 - local_num] =
   1b260:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   1b262:	693b      	ldr	r3, [r7, #16]
   1b264:	1ad3      	subs	r3, r2, r3
   1b266:	1e5c      	subs	r4, r3, #1
            mp_obj_new_cell(code_state->state[n_state - 1 - local_num]);
   1b268:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   1b26a:	693b      	ldr	r3, [r7, #16]
   1b26c:	1ad3      	subs	r3, r2, r3
   1b26e:	3b01      	subs	r3, #1
   1b270:	68fa      	ldr	r2, [r7, #12]
   1b272:	3304      	adds	r3, #4
   1b274:	009b      	lsls	r3, r3, #2
   1b276:	4413      	add	r3, r2
   1b278:	685b      	ldr	r3, [r3, #4]
   1b27a:	4618      	mov	r0, r3
   1b27c:	f7f3 fa6a 	bl	e754 <mp_obj_new_cell>
   1b280:	4601      	mov	r1, r0
        code_state->state[n_state - 1 - local_num] =
   1b282:	68fa      	ldr	r2, [r7, #12]
   1b284:	1d23      	adds	r3, r4, #4
   1b286:	009b      	lsls	r3, r3, #2
   1b288:	4413      	add	r3, r2
   1b28a:	6059      	str	r1, [r3, #4]
    while ((local_num = *ip++) != 255) {
   1b28c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1b28e:	1c5a      	adds	r2, r3, #1
   1b290:	63ba      	str	r2, [r7, #56]	; 0x38
   1b292:	781b      	ldrb	r3, [r3, #0]
   1b294:	613b      	str	r3, [r7, #16]
   1b296:	693b      	ldr	r3, [r7, #16]
   1b298:	2bff      	cmp	r3, #255	; 0xff
   1b29a:	d1e1      	bne.n	1b260 <mp_setup_code_state+0x4b8>
    }

    // now that we skipped over the prelude, set the ip for the VM
    code_state->ip = ip;
   1b29c:	68fb      	ldr	r3, [r7, #12]
   1b29e:	6bba      	ldr	r2, [r7, #56]	; 0x38
   1b2a0:	605a      	str	r2, [r3, #4]

    DEBUG_printf("Calling: n_pos_args=%d, n_kwonly_args=%d\n", n_pos_args, n_kwonly_args);
   1b2a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   1b2a4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   1b2a6:	4811      	ldr	r0, [pc, #68]	; (1b2ec <mp_setup_code_state+0x544>)
   1b2a8:	f001 fca0 	bl	1cbec <DEBUG_printf>
    dump_args(code_state->state + n_state - n_pos_args - n_kwonly_args, n_pos_args + n_kwonly_args);
   1b2ac:	68fb      	ldr	r3, [r7, #12]
   1b2ae:	f103 0214 	add.w	r2, r3, #20
   1b2b2:	6b39      	ldr	r1, [r7, #48]	; 0x30
   1b2b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1b2b6:	1ac9      	subs	r1, r1, r3
   1b2b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1b2ba:	1acb      	subs	r3, r1, r3
   1b2bc:	009b      	lsls	r3, r3, #2
   1b2be:	18d0      	adds	r0, r2, r3
   1b2c0:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1b2c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1b2c4:	4413      	add	r3, r2
   1b2c6:	4619      	mov	r1, r3
   1b2c8:	f7ff fd45 	bl	1ad56 <dump_args>
    dump_args(code_state->state, n_state);
   1b2cc:	68fb      	ldr	r3, [r7, #12]
   1b2ce:	3314      	adds	r3, #20
   1b2d0:	6b39      	ldr	r1, [r7, #48]	; 0x30
   1b2d2:	4618      	mov	r0, r3
   1b2d4:	f7ff fd3f 	bl	1ad56 <dump_args>
}
   1b2d8:	bf00      	nop
   1b2da:	376c      	adds	r7, #108	; 0x6c
   1b2dc:	46bd      	mov	sp, r7
   1b2de:	bd90      	pop	{r4, r7, pc}
   1b2e0:	00026ac8 	.word	0x00026ac8
   1b2e4:	00024374 	.word	0x00024374
   1b2e8:	00026af8 	.word	0x00026af8
   1b2ec:	00026b20 	.word	0x00026b20

0001b2f0 <mp_bytecode_print>:
#endif

const byte *mp_showbc_code_start;
const mp_uint_t *mp_showbc_const_table;

void mp_bytecode_print(const void *descr, const byte *ip, mp_uint_t len, const mp_uint_t *const_table) {
   1b2f0:	b590      	push	{r4, r7, lr}
   1b2f2:	b099      	sub	sp, #100	; 0x64
   1b2f4:	af04      	add	r7, sp, #16
   1b2f6:	60f8      	str	r0, [r7, #12]
   1b2f8:	60b9      	str	r1, [r7, #8]
   1b2fa:	607a      	str	r2, [r7, #4]
   1b2fc:	603b      	str	r3, [r7, #0]
    mp_showbc_code_start = ip;
   1b2fe:	68bb      	ldr	r3, [r7, #8]
   1b300:	4a8c      	ldr	r2, [pc, #560]	; (1b534 <mp_bytecode_print+0x244>)
   1b302:	6013      	str	r3, [r2, #0]

    // get bytecode parameters
    mp_uint_t n_state = mp_decode_uint(&ip);
   1b304:	f107 0308 	add.w	r3, r7, #8
   1b308:	4618      	mov	r0, r3
   1b30a:	f7ff fcd9 	bl	1acc0 <mp_decode_uint>
   1b30e:	63b8      	str	r0, [r7, #56]	; 0x38
    mp_uint_t n_exc_stack = mp_decode_uint(&ip);
   1b310:	f107 0308 	add.w	r3, r7, #8
   1b314:	4618      	mov	r0, r3
   1b316:	f7ff fcd3 	bl	1acc0 <mp_decode_uint>
   1b31a:	6378      	str	r0, [r7, #52]	; 0x34
    /*mp_uint_t scope_flags =*/ ip++;
   1b31c:	68bb      	ldr	r3, [r7, #8]
   1b31e:	3301      	adds	r3, #1
   1b320:	60bb      	str	r3, [r7, #8]
    mp_uint_t n_pos_args = *ip++;
   1b322:	68bb      	ldr	r3, [r7, #8]
   1b324:	1c5a      	adds	r2, r3, #1
   1b326:	60ba      	str	r2, [r7, #8]
   1b328:	781b      	ldrb	r3, [r3, #0]
   1b32a:	633b      	str	r3, [r7, #48]	; 0x30
    mp_uint_t n_kwonly_args = *ip++;
   1b32c:	68bb      	ldr	r3, [r7, #8]
   1b32e:	1c5a      	adds	r2, r3, #1
   1b330:	60ba      	str	r2, [r7, #8]
   1b332:	781b      	ldrb	r3, [r3, #0]
   1b334:	62fb      	str	r3, [r7, #44]	; 0x2c
    /*mp_uint_t n_def_pos_args =*/ ip++;
   1b336:	68bb      	ldr	r3, [r7, #8]
   1b338:	3301      	adds	r3, #1
   1b33a:	60bb      	str	r3, [r7, #8]

    const byte *code_info = ip;
   1b33c:	68bb      	ldr	r3, [r7, #8]
   1b33e:	617b      	str	r3, [r7, #20]
    mp_uint_t code_info_size = mp_decode_uint(&code_info);
   1b340:	f107 0314 	add.w	r3, r7, #20
   1b344:	4618      	mov	r0, r3
   1b346:	f7ff fcbb 	bl	1acc0 <mp_decode_uint>
   1b34a:	62b8      	str	r0, [r7, #40]	; 0x28
    ip += code_info_size;
   1b34c:	68ba      	ldr	r2, [r7, #8]
   1b34e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1b350:	4413      	add	r3, r2
   1b352:	60bb      	str	r3, [r7, #8]

    #if MICROPY_PERSISTENT_CODE
    qstr block_name = code_info[0] | (code_info[1] << 8);
   1b354:	697b      	ldr	r3, [r7, #20]
   1b356:	781b      	ldrb	r3, [r3, #0]
   1b358:	461a      	mov	r2, r3
   1b35a:	697b      	ldr	r3, [r7, #20]
   1b35c:	3301      	adds	r3, #1
   1b35e:	781b      	ldrb	r3, [r3, #0]
   1b360:	021b      	lsls	r3, r3, #8
   1b362:	4313      	orrs	r3, r2
   1b364:	627b      	str	r3, [r7, #36]	; 0x24
    qstr source_file = code_info[2] | (code_info[3] << 8);
   1b366:	697b      	ldr	r3, [r7, #20]
   1b368:	3302      	adds	r3, #2
   1b36a:	781b      	ldrb	r3, [r3, #0]
   1b36c:	461a      	mov	r2, r3
   1b36e:	697b      	ldr	r3, [r7, #20]
   1b370:	3303      	adds	r3, #3
   1b372:	781b      	ldrb	r3, [r3, #0]
   1b374:	021b      	lsls	r3, r3, #8
   1b376:	4313      	orrs	r3, r2
   1b378:	623b      	str	r3, [r7, #32]
    code_info += 4;
   1b37a:	697b      	ldr	r3, [r7, #20]
   1b37c:	3304      	adds	r3, #4
   1b37e:	617b      	str	r3, [r7, #20]
    #else
    qstr block_name = mp_decode_uint(&code_info);
    qstr source_file = mp_decode_uint(&code_info);
    #endif
    printf("File %s, code block '%s' (descriptor: %p, bytecode @%p " UINT_FMT " bytes)\n",
   1b380:	6a38      	ldr	r0, [r7, #32]
   1b382:	f7e6 f825 	bl	13d0 <qstr_str>
   1b386:	4604      	mov	r4, r0
   1b388:	6a78      	ldr	r0, [r7, #36]	; 0x24
   1b38a:	f7e6 f821 	bl	13d0 <qstr_str>
   1b38e:	4601      	mov	r1, r0
   1b390:	4b68      	ldr	r3, [pc, #416]	; (1b534 <mp_bytecode_print+0x244>)
   1b392:	681b      	ldr	r3, [r3, #0]
   1b394:	687a      	ldr	r2, [r7, #4]
   1b396:	9202      	str	r2, [sp, #8]
   1b398:	9301      	str	r3, [sp, #4]
   1b39a:	68fb      	ldr	r3, [r7, #12]
   1b39c:	9300      	str	r3, [sp, #0]
   1b39e:	460b      	mov	r3, r1
   1b3a0:	4622      	mov	r2, r4
   1b3a2:	4965      	ldr	r1, [pc, #404]	; (1b538 <mp_bytecode_print+0x248>)
   1b3a4:	4865      	ldr	r0, [pc, #404]	; (1b53c <mp_bytecode_print+0x24c>)
   1b3a6:	f7e6 fe63 	bl	2070 <mp_printf>
        qstr_str(source_file), qstr_str(block_name), descr, mp_showbc_code_start, len);

    // raw bytecode dump
    printf("Raw bytecode (code_info_size=" UINT_FMT ", bytecode_size=" UINT_FMT "):\n", code_info_size, len - code_info_size);
   1b3aa:	687a      	ldr	r2, [r7, #4]
   1b3ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1b3ae:	1ad3      	subs	r3, r2, r3
   1b3b0:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1b3b2:	4963      	ldr	r1, [pc, #396]	; (1b540 <mp_bytecode_print+0x250>)
   1b3b4:	4861      	ldr	r0, [pc, #388]	; (1b53c <mp_bytecode_print+0x24c>)
   1b3b6:	f7e6 fe5b 	bl	2070 <mp_printf>
    for (mp_uint_t i = 0; i < len; i++) {
   1b3ba:	2300      	movs	r3, #0
   1b3bc:	64fb      	str	r3, [r7, #76]	; 0x4c
   1b3be:	e018      	b.n	1b3f2 <mp_bytecode_print+0x102>
        if (i > 0 && i % 16 == 0) {
   1b3c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   1b3c2:	2b00      	cmp	r3, #0
   1b3c4:	d008      	beq.n	1b3d8 <mp_bytecode_print+0xe8>
   1b3c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   1b3c8:	f003 030f 	and.w	r3, r3, #15
   1b3cc:	2b00      	cmp	r3, #0
   1b3ce:	d103      	bne.n	1b3d8 <mp_bytecode_print+0xe8>
            printf("\n");
   1b3d0:	495c      	ldr	r1, [pc, #368]	; (1b544 <mp_bytecode_print+0x254>)
   1b3d2:	485a      	ldr	r0, [pc, #360]	; (1b53c <mp_bytecode_print+0x24c>)
   1b3d4:	f7e6 fe4c 	bl	2070 <mp_printf>
        }
        printf(" %02x", mp_showbc_code_start[i]);
   1b3d8:	4b56      	ldr	r3, [pc, #344]	; (1b534 <mp_bytecode_print+0x244>)
   1b3da:	681a      	ldr	r2, [r3, #0]
   1b3dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   1b3de:	4413      	add	r3, r2
   1b3e0:	781b      	ldrb	r3, [r3, #0]
   1b3e2:	461a      	mov	r2, r3
   1b3e4:	4958      	ldr	r1, [pc, #352]	; (1b548 <mp_bytecode_print+0x258>)
   1b3e6:	4855      	ldr	r0, [pc, #340]	; (1b53c <mp_bytecode_print+0x24c>)
   1b3e8:	f7e6 fe42 	bl	2070 <mp_printf>
    for (mp_uint_t i = 0; i < len; i++) {
   1b3ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   1b3ee:	3301      	adds	r3, #1
   1b3f0:	64fb      	str	r3, [r7, #76]	; 0x4c
   1b3f2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
   1b3f4:	687b      	ldr	r3, [r7, #4]
   1b3f6:	429a      	cmp	r2, r3
   1b3f8:	d3e2      	bcc.n	1b3c0 <mp_bytecode_print+0xd0>
    }
    printf("\n");
   1b3fa:	4952      	ldr	r1, [pc, #328]	; (1b544 <mp_bytecode_print+0x254>)
   1b3fc:	484f      	ldr	r0, [pc, #316]	; (1b53c <mp_bytecode_print+0x24c>)
   1b3fe:	f7e6 fe37 	bl	2070 <mp_printf>

    // bytecode prelude: arg names (as qstr objects)
    printf("arg names:");
   1b402:	4952      	ldr	r1, [pc, #328]	; (1b54c <mp_bytecode_print+0x25c>)
   1b404:	484d      	ldr	r0, [pc, #308]	; (1b53c <mp_bytecode_print+0x24c>)
   1b406:	f7e6 fe33 	bl	2070 <mp_printf>
    for (mp_uint_t i = 0; i < n_pos_args + n_kwonly_args; i++) {
   1b40a:	2300      	movs	r3, #0
   1b40c:	64bb      	str	r3, [r7, #72]	; 0x48
   1b40e:	e011      	b.n	1b434 <mp_bytecode_print+0x144>
        printf(" %s", qstr_str(MP_OBJ_QSTR_VALUE(const_table[i])));
   1b410:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   1b412:	009b      	lsls	r3, r3, #2
   1b414:	683a      	ldr	r2, [r7, #0]
   1b416:	4413      	add	r3, r2
   1b418:	681b      	ldr	r3, [r3, #0]
   1b41a:	089b      	lsrs	r3, r3, #2
   1b41c:	4618      	mov	r0, r3
   1b41e:	f7e5 ffd7 	bl	13d0 <qstr_str>
   1b422:	4603      	mov	r3, r0
   1b424:	461a      	mov	r2, r3
   1b426:	494a      	ldr	r1, [pc, #296]	; (1b550 <mp_bytecode_print+0x260>)
   1b428:	4844      	ldr	r0, [pc, #272]	; (1b53c <mp_bytecode_print+0x24c>)
   1b42a:	f7e6 fe21 	bl	2070 <mp_printf>
    for (mp_uint_t i = 0; i < n_pos_args + n_kwonly_args; i++) {
   1b42e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   1b430:	3301      	adds	r3, #1
   1b432:	64bb      	str	r3, [r7, #72]	; 0x48
   1b434:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   1b436:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1b438:	441a      	add	r2, r3
   1b43a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   1b43c:	429a      	cmp	r2, r3
   1b43e:	d8e7      	bhi.n	1b410 <mp_bytecode_print+0x120>
    }
    printf("\n");
   1b440:	4940      	ldr	r1, [pc, #256]	; (1b544 <mp_bytecode_print+0x254>)
   1b442:	483e      	ldr	r0, [pc, #248]	; (1b53c <mp_bytecode_print+0x24c>)
   1b444:	f7e6 fe14 	bl	2070 <mp_printf>

    printf("(N_STATE " UINT_FMT ")\n", n_state);
   1b448:	6bba      	ldr	r2, [r7, #56]	; 0x38
   1b44a:	4942      	ldr	r1, [pc, #264]	; (1b554 <mp_bytecode_print+0x264>)
   1b44c:	483b      	ldr	r0, [pc, #236]	; (1b53c <mp_bytecode_print+0x24c>)
   1b44e:	f7e6 fe0f 	bl	2070 <mp_printf>
    printf("(N_EXC_STACK " UINT_FMT ")\n", n_exc_stack);
   1b452:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   1b454:	4940      	ldr	r1, [pc, #256]	; (1b558 <mp_bytecode_print+0x268>)
   1b456:	4839      	ldr	r0, [pc, #228]	; (1b53c <mp_bytecode_print+0x24c>)
   1b458:	f7e6 fe0a 	bl	2070 <mp_printf>

    // for printing line number info
    const byte *bytecode_start = ip;
   1b45c:	68bb      	ldr	r3, [r7, #8]
   1b45e:	61fb      	str	r3, [r7, #28]

    // bytecode prelude: initialise closed over variables
    {
        uint local_num;
        while ((local_num = *ip++) != 255) {
   1b460:	e004      	b.n	1b46c <mp_bytecode_print+0x17c>
            printf("(INIT_CELL %u)\n", local_num);
   1b462:	69ba      	ldr	r2, [r7, #24]
   1b464:	493d      	ldr	r1, [pc, #244]	; (1b55c <mp_bytecode_print+0x26c>)
   1b466:	4835      	ldr	r0, [pc, #212]	; (1b53c <mp_bytecode_print+0x24c>)
   1b468:	f7e6 fe02 	bl	2070 <mp_printf>
        while ((local_num = *ip++) != 255) {
   1b46c:	68bb      	ldr	r3, [r7, #8]
   1b46e:	1c5a      	adds	r2, r3, #1
   1b470:	60ba      	str	r2, [r7, #8]
   1b472:	781b      	ldrb	r3, [r3, #0]
   1b474:	61bb      	str	r3, [r7, #24]
   1b476:	69bb      	ldr	r3, [r7, #24]
   1b478:	2bff      	cmp	r3, #255	; 0xff
   1b47a:	d1f2      	bne.n	1b462 <mp_bytecode_print+0x172>
        }
        len -= ip - mp_showbc_code_start;
   1b47c:	68bb      	ldr	r3, [r7, #8]
   1b47e:	461a      	mov	r2, r3
   1b480:	4b2c      	ldr	r3, [pc, #176]	; (1b534 <mp_bytecode_print+0x244>)
   1b482:	681b      	ldr	r3, [r3, #0]
   1b484:	1ad3      	subs	r3, r2, r3
   1b486:	461a      	mov	r2, r3
   1b488:	687b      	ldr	r3, [r7, #4]
   1b48a:	1a9b      	subs	r3, r3, r2
   1b48c:	607b      	str	r3, [r7, #4]
    }

    // print out line number info
    {
        mp_int_t bc = bytecode_start - ip;
   1b48e:	69fb      	ldr	r3, [r7, #28]
   1b490:	68ba      	ldr	r2, [r7, #8]
   1b492:	1a9b      	subs	r3, r3, r2
   1b494:	647b      	str	r3, [r7, #68]	; 0x44
        mp_uint_t source_line = 1;
   1b496:	2301      	movs	r3, #1
   1b498:	643b      	str	r3, [r7, #64]	; 0x40
        printf("  bc=" INT_FMT " line=" UINT_FMT "\n", bc, source_line);
   1b49a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1b49c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
   1b49e:	4930      	ldr	r1, [pc, #192]	; (1b560 <mp_bytecode_print+0x270>)
   1b4a0:	4826      	ldr	r0, [pc, #152]	; (1b53c <mp_bytecode_print+0x24c>)
   1b4a2:	f7e6 fde5 	bl	2070 <mp_printf>
        for (const byte* ci = code_info; *ci;) {
   1b4a6:	697b      	ldr	r3, [r7, #20]
   1b4a8:	63fb      	str	r3, [r7, #60]	; 0x3c
   1b4aa:	e034      	b.n	1b516 <mp_bytecode_print+0x226>
            if ((ci[0] & 0x80) == 0) {
   1b4ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1b4ae:	781b      	ldrb	r3, [r3, #0]
   1b4b0:	b25b      	sxtb	r3, r3
   1b4b2:	2b00      	cmp	r3, #0
   1b4b4:	db12      	blt.n	1b4dc <mp_bytecode_print+0x1ec>
                // 0b0LLBBBBB encoding
                bc += ci[0] & 0x1f;
   1b4b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1b4b8:	781b      	ldrb	r3, [r3, #0]
   1b4ba:	f003 031f 	and.w	r3, r3, #31
   1b4be:	6c7a      	ldr	r2, [r7, #68]	; 0x44
   1b4c0:	4413      	add	r3, r2
   1b4c2:	647b      	str	r3, [r7, #68]	; 0x44
                source_line += ci[0] >> 5;
   1b4c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1b4c6:	781b      	ldrb	r3, [r3, #0]
   1b4c8:	095b      	lsrs	r3, r3, #5
   1b4ca:	b2db      	uxtb	r3, r3
   1b4cc:	461a      	mov	r2, r3
   1b4ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1b4d0:	4413      	add	r3, r2
   1b4d2:	643b      	str	r3, [r7, #64]	; 0x40
                ci += 1;
   1b4d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1b4d6:	3301      	adds	r3, #1
   1b4d8:	63fb      	str	r3, [r7, #60]	; 0x3c
   1b4da:	e016      	b.n	1b50a <mp_bytecode_print+0x21a>
            } else {
                // 0b1LLLBBBB 0bLLLLLLLL encoding (l's LSB in second byte)
                bc += ci[0] & 0xf;
   1b4dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1b4de:	781b      	ldrb	r3, [r3, #0]
   1b4e0:	f003 030f 	and.w	r3, r3, #15
   1b4e4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
   1b4e6:	4413      	add	r3, r2
   1b4e8:	647b      	str	r3, [r7, #68]	; 0x44
                source_line += ((ci[0] << 4) & 0x700) | ci[1];
   1b4ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1b4ec:	781b      	ldrb	r3, [r3, #0]
   1b4ee:	011b      	lsls	r3, r3, #4
   1b4f0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
   1b4f4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   1b4f6:	3201      	adds	r2, #1
   1b4f8:	7812      	ldrb	r2, [r2, #0]
   1b4fa:	4313      	orrs	r3, r2
   1b4fc:	461a      	mov	r2, r3
   1b4fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1b500:	4413      	add	r3, r2
   1b502:	643b      	str	r3, [r7, #64]	; 0x40
                ci += 2;
   1b504:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1b506:	3302      	adds	r3, #2
   1b508:	63fb      	str	r3, [r7, #60]	; 0x3c
            }
            printf("  bc=" INT_FMT " line=" UINT_FMT "\n", bc, source_line);
   1b50a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1b50c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
   1b50e:	4914      	ldr	r1, [pc, #80]	; (1b560 <mp_bytecode_print+0x270>)
   1b510:	480a      	ldr	r0, [pc, #40]	; (1b53c <mp_bytecode_print+0x24c>)
   1b512:	f7e6 fdad 	bl	2070 <mp_printf>
        for (const byte* ci = code_info; *ci;) {
   1b516:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1b518:	781b      	ldrb	r3, [r3, #0]
   1b51a:	2b00      	cmp	r3, #0
   1b51c:	d1c6      	bne.n	1b4ac <mp_bytecode_print+0x1bc>
        }
    }
    mp_bytecode_print2(ip, len - 0, const_table);
   1b51e:	68bb      	ldr	r3, [r7, #8]
   1b520:	683a      	ldr	r2, [r7, #0]
   1b522:	6879      	ldr	r1, [r7, #4]
   1b524:	4618      	mov	r0, r3
   1b526:	f000 ff23 	bl	1c370 <mp_bytecode_print2>
}
   1b52a:	bf00      	nop
   1b52c:	3754      	adds	r7, #84	; 0x54
   1b52e:	46bd      	mov	sp, r7
   1b530:	bd90      	pop	{r4, r7, pc}
   1b532:	bf00      	nop
   1b534:	20001424 	.word	0x20001424
   1b538:	00026b4c 	.word	0x00026b4c
   1b53c:	000210cc 	.word	0x000210cc
   1b540:	00026b90 	.word	0x00026b90
   1b544:	00026bc8 	.word	0x00026bc8
   1b548:	00026bcc 	.word	0x00026bcc
   1b54c:	00026bd4 	.word	0x00026bd4
   1b550:	00026be0 	.word	0x00026be0
   1b554:	00026be4 	.word	0x00026be4
   1b558:	00026bf4 	.word	0x00026bf4
   1b55c:	00026c08 	.word	0x00026c08
   1b560:	00026c18 	.word	0x00026c18

0001b564 <mp_bytecode_print_str>:

const byte *mp_bytecode_print_str(const byte *ip) {
   1b564:	b580      	push	{r7, lr}
   1b566:	b088      	sub	sp, #32
   1b568:	af00      	add	r7, sp, #0
   1b56a:	6078      	str	r0, [r7, #4]
    mp_uint_t unum;
    qstr qst;

    switch (*ip++) {
   1b56c:	687b      	ldr	r3, [r7, #4]
   1b56e:	1c5a      	adds	r2, r3, #1
   1b570:	607a      	str	r2, [r7, #4]
   1b572:	781b      	ldrb	r3, [r3, #0]
   1b574:	3b10      	subs	r3, #16
   1b576:	2b5a      	cmp	r3, #90	; 0x5a
   1b578:	f200 867c 	bhi.w	1c274 <mp_bytecode_print_str+0xd10>
   1b57c:	a201      	add	r2, pc, #4	; (adr r2, 1b584 <mp_bytecode_print_str+0x20>)
   1b57e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1b582:	bf00      	nop
   1b584:	0001b6f1 	.word	0x0001b6f1
   1b588:	0001b6fd 	.word	0x0001b6fd
   1b58c:	0001b709 	.word	0x0001b709
   1b590:	0001c275 	.word	0x0001c275
   1b594:	0001b715 	.word	0x0001b715
   1b598:	0001c275 	.word	0x0001c275
   1b59c:	0001b757 	.word	0x0001b757
   1b5a0:	0001b785 	.word	0x0001b785
   1b5a4:	0001b7d1 	.word	0x0001b7d1
   1b5a8:	0001b7dd 	.word	0x0001b7dd
   1b5ac:	0001b80d 	.word	0x0001b80d
   1b5b0:	0001b83d 	.word	0x0001b83d
   1b5b4:	0001b86b 	.word	0x0001b86b
   1b5b8:	0001b899 	.word	0x0001b899
   1b5bc:	0001b8c7 	.word	0x0001b8c7
   1b5c0:	0001b8f5 	.word	0x0001b8f5
   1b5c4:	0001b923 	.word	0x0001b923
   1b5c8:	0001b92f 	.word	0x0001b92f
   1b5cc:	0001b93b 	.word	0x0001b93b
   1b5d0:	0001b96b 	.word	0x0001b96b
   1b5d4:	0001b9ed 	.word	0x0001b9ed
   1b5d8:	0001ba1b 	.word	0x0001ba1b
   1b5dc:	0001ba49 	.word	0x0001ba49
   1b5e0:	0001ba77 	.word	0x0001ba77
   1b5e4:	0001ba83 	.word	0x0001ba83
   1b5e8:	0001bab3 	.word	0x0001bab3
   1b5ec:	0001bae3 	.word	0x0001bae3
   1b5f0:	0001bb11 	.word	0x0001bb11
   1b5f4:	0001c275 	.word	0x0001c275
   1b5f8:	0001c275 	.word	0x0001c275
   1b5fc:	0001c275 	.word	0x0001c275
   1b600:	0001c275 	.word	0x0001c275
   1b604:	0001bb3d 	.word	0x0001bb3d
   1b608:	0001bb47 	.word	0x0001bb47
   1b60c:	0001bb51 	.word	0x0001bb51
   1b610:	0001bb5b 	.word	0x0001bb5b
   1b614:	0001bb65 	.word	0x0001bb65
   1b618:	0001bb6f 	.word	0x0001bb6f
   1b61c:	0001bba5 	.word	0x0001bba5
   1b620:	0001bbdb 	.word	0x0001bbdb
   1b624:	0001bc11 	.word	0x0001bc11
   1b628:	0001bc47 	.word	0x0001bc47
   1b62c:	0001c275 	.word	0x0001c275
   1b630:	0001c275 	.word	0x0001c275
   1b634:	0001c275 	.word	0x0001c275
   1b638:	0001bc7d 	.word	0x0001bc7d
   1b63c:	0001bd05 	.word	0x0001bd05
   1b640:	0001bd4f 	.word	0x0001bd4f
   1b644:	0001bd81 	.word	0x0001bd81
   1b648:	0001bdb3 	.word	0x0001bdb3
   1b64c:	0001bdbd 	.word	0x0001bdbd
   1b650:	0001bdd1 	.word	0x0001bdd1
   1b654:	0001be03 	.word	0x0001be03
   1b658:	0001be0d 	.word	0x0001be0d
   1b65c:	0001bd0f 	.word	0x0001bd0f
   1b660:	0001bdc7 	.word	0x0001bdc7
   1b664:	0001c275 	.word	0x0001c275
   1b668:	0001c275 	.word	0x0001c275
   1b66c:	0001c275 	.word	0x0001c275
   1b670:	0001c275 	.word	0x0001c275
   1b674:	0001c275 	.word	0x0001c275
   1b678:	0001c275 	.word	0x0001c275
   1b67c:	0001c275 	.word	0x0001c275
   1b680:	0001c275 	.word	0x0001c275
   1b684:	0001be17 	.word	0x0001be17
   1b688:	0001be45 	.word	0x0001be45
   1b68c:	0001c275 	.word	0x0001c275
   1b690:	0001be73 	.word	0x0001be73
   1b694:	0001bea1 	.word	0x0001bea1
   1b698:	0001c275 	.word	0x0001c275
   1b69c:	0001beab 	.word	0x0001beab
   1b6a0:	0001bed9 	.word	0x0001bed9
   1b6a4:	0001c275 	.word	0x0001c275
   1b6a8:	0001bf07 	.word	0x0001bf07
   1b6ac:	0001bf35 	.word	0x0001bf35
   1b6b0:	0001c199 	.word	0x0001c199
   1b6b4:	0001c1a3 	.word	0x0001c1a3
   1b6b8:	0001c1b9 	.word	0x0001c1b9
   1b6bc:	0001c1c3 	.word	0x0001c1c3
   1b6c0:	0001c275 	.word	0x0001c275
   1b6c4:	0001bfb5 	.word	0x0001bfb5
   1b6c8:	0001bff3 	.word	0x0001bff3
   1b6cc:	0001c031 	.word	0x0001c031
   1b6d0:	0001c079 	.word	0x0001c079
   1b6d4:	0001c0c1 	.word	0x0001c0c1
   1b6d8:	0001c0f7 	.word	0x0001c0f7
   1b6dc:	0001c12d 	.word	0x0001c12d
   1b6e0:	0001c163 	.word	0x0001c163
   1b6e4:	0001c1cd 	.word	0x0001c1cd
   1b6e8:	0001c1f9 	.word	0x0001c1f9
   1b6ec:	0001c225 	.word	0x0001c225
        case MP_BC_LOAD_CONST_FALSE:
            printf("LOAD_CONST_FALSE");
   1b6f0:	49aa      	ldr	r1, [pc, #680]	; (1b99c <mp_bytecode_print_str+0x438>)
   1b6f2:	48ab      	ldr	r0, [pc, #684]	; (1b9a0 <mp_bytecode_print_str+0x43c>)
   1b6f4:	f7e6 fcbc 	bl	2070 <mp_printf>
            break;
   1b6f8:	f000 be1f 	b.w	1c33a <mp_bytecode_print_str+0xdd6>

        case MP_BC_LOAD_CONST_NONE:
            printf("LOAD_CONST_NONE");
   1b6fc:	49a9      	ldr	r1, [pc, #676]	; (1b9a4 <mp_bytecode_print_str+0x440>)
   1b6fe:	48a8      	ldr	r0, [pc, #672]	; (1b9a0 <mp_bytecode_print_str+0x43c>)
   1b700:	f7e6 fcb6 	bl	2070 <mp_printf>
            break;
   1b704:	f000 be19 	b.w	1c33a <mp_bytecode_print_str+0xdd6>

        case MP_BC_LOAD_CONST_TRUE:
            printf("LOAD_CONST_TRUE");
   1b708:	49a7      	ldr	r1, [pc, #668]	; (1b9a8 <mp_bytecode_print_str+0x444>)
   1b70a:	48a5      	ldr	r0, [pc, #660]	; (1b9a0 <mp_bytecode_print_str+0x43c>)
   1b70c:	f7e6 fcb0 	bl	2070 <mp_printf>
            break;
   1b710:	f000 be13 	b.w	1c33a <mp_bytecode_print_str+0xdd6>

        case MP_BC_LOAD_CONST_SMALL_INT: {
            mp_int_t num = 0;
   1b714:	2300      	movs	r3, #0
   1b716:	61bb      	str	r3, [r7, #24]
            if ((ip[0] & 0x40) != 0) {
   1b718:	687b      	ldr	r3, [r7, #4]
   1b71a:	781b      	ldrb	r3, [r3, #0]
   1b71c:	f003 0340 	and.w	r3, r3, #64	; 0x40
   1b720:	2b00      	cmp	r3, #0
   1b722:	d002      	beq.n	1b72a <mp_bytecode_print_str+0x1c6>
                // Number is negative
                num--;
   1b724:	69bb      	ldr	r3, [r7, #24]
   1b726:	3b01      	subs	r3, #1
   1b728:	61bb      	str	r3, [r7, #24]
            }
            do {
                num = (num << 7) | (*ip & 0x7f);
   1b72a:	69bb      	ldr	r3, [r7, #24]
   1b72c:	01da      	lsls	r2, r3, #7
   1b72e:	687b      	ldr	r3, [r7, #4]
   1b730:	781b      	ldrb	r3, [r3, #0]
   1b732:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1b736:	4313      	orrs	r3, r2
   1b738:	61bb      	str	r3, [r7, #24]
            } while ((*ip++ & 0x80) != 0);
   1b73a:	687b      	ldr	r3, [r7, #4]
   1b73c:	1c5a      	adds	r2, r3, #1
   1b73e:	607a      	str	r2, [r7, #4]
   1b740:	781b      	ldrb	r3, [r3, #0]
   1b742:	b25b      	sxtb	r3, r3
   1b744:	2b00      	cmp	r3, #0
   1b746:	dbf0      	blt.n	1b72a <mp_bytecode_print_str+0x1c6>
            printf("LOAD_CONST_SMALL_INT " INT_FMT, num);
   1b748:	69ba      	ldr	r2, [r7, #24]
   1b74a:	4998      	ldr	r1, [pc, #608]	; (1b9ac <mp_bytecode_print_str+0x448>)
   1b74c:	4894      	ldr	r0, [pc, #592]	; (1b9a0 <mp_bytecode_print_str+0x43c>)
   1b74e:	f7e6 fc8f 	bl	2070 <mp_printf>
            break;
   1b752:	f000 bdf2 	b.w	1c33a <mp_bytecode_print_str+0xdd6>
        }

        case MP_BC_LOAD_CONST_STRING:
            DECODE_QSTR;
   1b756:	687b      	ldr	r3, [r7, #4]
   1b758:	781b      	ldrb	r3, [r3, #0]
   1b75a:	461a      	mov	r2, r3
   1b75c:	687b      	ldr	r3, [r7, #4]
   1b75e:	3301      	adds	r3, #1
   1b760:	781b      	ldrb	r3, [r3, #0]
   1b762:	021b      	lsls	r3, r3, #8
   1b764:	4313      	orrs	r3, r2
   1b766:	617b      	str	r3, [r7, #20]
   1b768:	687b      	ldr	r3, [r7, #4]
   1b76a:	3302      	adds	r3, #2
   1b76c:	607b      	str	r3, [r7, #4]
            printf("LOAD_CONST_STRING '%s'", qstr_str(qst));
   1b76e:	6978      	ldr	r0, [r7, #20]
   1b770:	f7e5 fe2e 	bl	13d0 <qstr_str>
   1b774:	4603      	mov	r3, r0
   1b776:	461a      	mov	r2, r3
   1b778:	498d      	ldr	r1, [pc, #564]	; (1b9b0 <mp_bytecode_print_str+0x44c>)
   1b77a:	4889      	ldr	r0, [pc, #548]	; (1b9a0 <mp_bytecode_print_str+0x43c>)
   1b77c:	f7e6 fc78 	bl	2070 <mp_printf>
            break;
   1b780:	f000 bddb 	b.w	1c33a <mp_bytecode_print_str+0xdd6>

        case MP_BC_LOAD_CONST_OBJ:
            DECODE_OBJ;
   1b784:	2300      	movs	r3, #0
   1b786:	61fb      	str	r3, [r7, #28]
   1b788:	69fb      	ldr	r3, [r7, #28]
   1b78a:	01da      	lsls	r2, r3, #7
   1b78c:	687b      	ldr	r3, [r7, #4]
   1b78e:	781b      	ldrb	r3, [r3, #0]
   1b790:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1b794:	4413      	add	r3, r2
   1b796:	61fb      	str	r3, [r7, #28]
   1b798:	687b      	ldr	r3, [r7, #4]
   1b79a:	1c5a      	adds	r2, r3, #1
   1b79c:	607a      	str	r2, [r7, #4]
   1b79e:	781b      	ldrb	r3, [r3, #0]
   1b7a0:	b25b      	sxtb	r3, r3
   1b7a2:	2b00      	cmp	r3, #0
   1b7a4:	dbf0      	blt.n	1b788 <mp_bytecode_print_str+0x224>
   1b7a6:	4b83      	ldr	r3, [pc, #524]	; (1b9b4 <mp_bytecode_print_str+0x450>)
   1b7a8:	681a      	ldr	r2, [r3, #0]
   1b7aa:	69fb      	ldr	r3, [r7, #28]
   1b7ac:	009b      	lsls	r3, r3, #2
   1b7ae:	4413      	add	r3, r2
   1b7b0:	681b      	ldr	r3, [r3, #0]
   1b7b2:	61fb      	str	r3, [r7, #28]
            printf("LOAD_CONST_OBJ %p=", MP_OBJ_TO_PTR(unum));
   1b7b4:	69fb      	ldr	r3, [r7, #28]
   1b7b6:	461a      	mov	r2, r3
   1b7b8:	497f      	ldr	r1, [pc, #508]	; (1b9b8 <mp_bytecode_print_str+0x454>)
   1b7ba:	4879      	ldr	r0, [pc, #484]	; (1b9a0 <mp_bytecode_print_str+0x43c>)
   1b7bc:	f7e6 fc58 	bl	2070 <mp_printf>
            mp_obj_print_helper(&mp_plat_print, (mp_obj_t)unum, PRINT_REPR);
   1b7c0:	69fb      	ldr	r3, [r7, #28]
   1b7c2:	2201      	movs	r2, #1
   1b7c4:	4619      	mov	r1, r3
   1b7c6:	4876      	ldr	r0, [pc, #472]	; (1b9a0 <mp_bytecode_print_str+0x43c>)
   1b7c8:	f7f2 fa79 	bl	dcbe <mp_obj_print_helper>
            break;
   1b7cc:	f000 bdb5 	b.w	1c33a <mp_bytecode_print_str+0xdd6>

        case MP_BC_LOAD_NULL:
            printf("LOAD_NULL");
   1b7d0:	497a      	ldr	r1, [pc, #488]	; (1b9bc <mp_bytecode_print_str+0x458>)
   1b7d2:	4873      	ldr	r0, [pc, #460]	; (1b9a0 <mp_bytecode_print_str+0x43c>)
   1b7d4:	f7e6 fc4c 	bl	2070 <mp_printf>
            break;
   1b7d8:	f000 bdaf 	b.w	1c33a <mp_bytecode_print_str+0xdd6>

        case MP_BC_LOAD_FAST_N:
            DECODE_UINT;
   1b7dc:	2300      	movs	r3, #0
   1b7de:	61fb      	str	r3, [r7, #28]
   1b7e0:	69fb      	ldr	r3, [r7, #28]
   1b7e2:	01da      	lsls	r2, r3, #7
   1b7e4:	687b      	ldr	r3, [r7, #4]
   1b7e6:	781b      	ldrb	r3, [r3, #0]
   1b7e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1b7ec:	4413      	add	r3, r2
   1b7ee:	61fb      	str	r3, [r7, #28]
   1b7f0:	687b      	ldr	r3, [r7, #4]
   1b7f2:	1c5a      	adds	r2, r3, #1
   1b7f4:	607a      	str	r2, [r7, #4]
   1b7f6:	781b      	ldrb	r3, [r3, #0]
   1b7f8:	b25b      	sxtb	r3, r3
   1b7fa:	2b00      	cmp	r3, #0
   1b7fc:	dbf0      	blt.n	1b7e0 <mp_bytecode_print_str+0x27c>
            printf("LOAD_FAST_N " UINT_FMT, unum);
   1b7fe:	69fa      	ldr	r2, [r7, #28]
   1b800:	496f      	ldr	r1, [pc, #444]	; (1b9c0 <mp_bytecode_print_str+0x45c>)
   1b802:	4867      	ldr	r0, [pc, #412]	; (1b9a0 <mp_bytecode_print_str+0x43c>)
   1b804:	f7e6 fc34 	bl	2070 <mp_printf>
            break;
   1b808:	f000 bd97 	b.w	1c33a <mp_bytecode_print_str+0xdd6>

        case MP_BC_LOAD_DEREF:
            DECODE_UINT;
   1b80c:	2300      	movs	r3, #0
   1b80e:	61fb      	str	r3, [r7, #28]
   1b810:	69fb      	ldr	r3, [r7, #28]
   1b812:	01da      	lsls	r2, r3, #7
   1b814:	687b      	ldr	r3, [r7, #4]
   1b816:	781b      	ldrb	r3, [r3, #0]
   1b818:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1b81c:	4413      	add	r3, r2
   1b81e:	61fb      	str	r3, [r7, #28]
   1b820:	687b      	ldr	r3, [r7, #4]
   1b822:	1c5a      	adds	r2, r3, #1
   1b824:	607a      	str	r2, [r7, #4]
   1b826:	781b      	ldrb	r3, [r3, #0]
   1b828:	b25b      	sxtb	r3, r3
   1b82a:	2b00      	cmp	r3, #0
   1b82c:	dbf0      	blt.n	1b810 <mp_bytecode_print_str+0x2ac>
            printf("LOAD_DEREF " UINT_FMT, unum);
   1b82e:	69fa      	ldr	r2, [r7, #28]
   1b830:	4964      	ldr	r1, [pc, #400]	; (1b9c4 <mp_bytecode_print_str+0x460>)
   1b832:	485b      	ldr	r0, [pc, #364]	; (1b9a0 <mp_bytecode_print_str+0x43c>)
   1b834:	f7e6 fc1c 	bl	2070 <mp_printf>
            break;
   1b838:	f000 bd7f 	b.w	1c33a <mp_bytecode_print_str+0xdd6>

        case MP_BC_LOAD_NAME:
            DECODE_QSTR;
   1b83c:	687b      	ldr	r3, [r7, #4]
   1b83e:	781b      	ldrb	r3, [r3, #0]
   1b840:	461a      	mov	r2, r3
   1b842:	687b      	ldr	r3, [r7, #4]
   1b844:	3301      	adds	r3, #1
   1b846:	781b      	ldrb	r3, [r3, #0]
   1b848:	021b      	lsls	r3, r3, #8
   1b84a:	4313      	orrs	r3, r2
   1b84c:	617b      	str	r3, [r7, #20]
   1b84e:	687b      	ldr	r3, [r7, #4]
   1b850:	3302      	adds	r3, #2
   1b852:	607b      	str	r3, [r7, #4]
            printf("LOAD_NAME %s", qstr_str(qst));
   1b854:	6978      	ldr	r0, [r7, #20]
   1b856:	f7e5 fdbb 	bl	13d0 <qstr_str>
   1b85a:	4603      	mov	r3, r0
   1b85c:	461a      	mov	r2, r3
   1b85e:	495a      	ldr	r1, [pc, #360]	; (1b9c8 <mp_bytecode_print_str+0x464>)
   1b860:	484f      	ldr	r0, [pc, #316]	; (1b9a0 <mp_bytecode_print_str+0x43c>)
   1b862:	f7e6 fc05 	bl	2070 <mp_printf>
            if (MICROPY_OPT_CACHE_MAP_LOOKUP_IN_BYTECODE) {
                printf(" (cache=%u)", *ip++);
            }
            break;
   1b866:	f000 bd68 	b.w	1c33a <mp_bytecode_print_str+0xdd6>

        case MP_BC_LOAD_GLOBAL:
            DECODE_QSTR;
   1b86a:	687b      	ldr	r3, [r7, #4]
   1b86c:	781b      	ldrb	r3, [r3, #0]
   1b86e:	461a      	mov	r2, r3
   1b870:	687b      	ldr	r3, [r7, #4]
   1b872:	3301      	adds	r3, #1
   1b874:	781b      	ldrb	r3, [r3, #0]
   1b876:	021b      	lsls	r3, r3, #8
   1b878:	4313      	orrs	r3, r2
   1b87a:	617b      	str	r3, [r7, #20]
   1b87c:	687b      	ldr	r3, [r7, #4]
   1b87e:	3302      	adds	r3, #2
   1b880:	607b      	str	r3, [r7, #4]
            printf("LOAD_GLOBAL %s", qstr_str(qst));
   1b882:	6978      	ldr	r0, [r7, #20]
   1b884:	f7e5 fda4 	bl	13d0 <qstr_str>
   1b888:	4603      	mov	r3, r0
   1b88a:	461a      	mov	r2, r3
   1b88c:	494f      	ldr	r1, [pc, #316]	; (1b9cc <mp_bytecode_print_str+0x468>)
   1b88e:	4844      	ldr	r0, [pc, #272]	; (1b9a0 <mp_bytecode_print_str+0x43c>)
   1b890:	f7e6 fbee 	bl	2070 <mp_printf>
            if (MICROPY_OPT_CACHE_MAP_LOOKUP_IN_BYTECODE) {
                printf(" (cache=%u)", *ip++);
            }
            break;
   1b894:	f000 bd51 	b.w	1c33a <mp_bytecode_print_str+0xdd6>

        case MP_BC_LOAD_ATTR:
            DECODE_QSTR;
   1b898:	687b      	ldr	r3, [r7, #4]
   1b89a:	781b      	ldrb	r3, [r3, #0]
   1b89c:	461a      	mov	r2, r3
   1b89e:	687b      	ldr	r3, [r7, #4]
   1b8a0:	3301      	adds	r3, #1
   1b8a2:	781b      	ldrb	r3, [r3, #0]
   1b8a4:	021b      	lsls	r3, r3, #8
   1b8a6:	4313      	orrs	r3, r2
   1b8a8:	617b      	str	r3, [r7, #20]
   1b8aa:	687b      	ldr	r3, [r7, #4]
   1b8ac:	3302      	adds	r3, #2
   1b8ae:	607b      	str	r3, [r7, #4]
            printf("LOAD_ATTR %s", qstr_str(qst));
   1b8b0:	6978      	ldr	r0, [r7, #20]
   1b8b2:	f7e5 fd8d 	bl	13d0 <qstr_str>
   1b8b6:	4603      	mov	r3, r0
   1b8b8:	461a      	mov	r2, r3
   1b8ba:	4945      	ldr	r1, [pc, #276]	; (1b9d0 <mp_bytecode_print_str+0x46c>)
   1b8bc:	4838      	ldr	r0, [pc, #224]	; (1b9a0 <mp_bytecode_print_str+0x43c>)
   1b8be:	f7e6 fbd7 	bl	2070 <mp_printf>
            if (MICROPY_OPT_CACHE_MAP_LOOKUP_IN_BYTECODE) {
                printf(" (cache=%u)", *ip++);
            }
            break;
   1b8c2:	f000 bd3a 	b.w	1c33a <mp_bytecode_print_str+0xdd6>

        case MP_BC_LOAD_METHOD:
            DECODE_QSTR;
   1b8c6:	687b      	ldr	r3, [r7, #4]
   1b8c8:	781b      	ldrb	r3, [r3, #0]
   1b8ca:	461a      	mov	r2, r3
   1b8cc:	687b      	ldr	r3, [r7, #4]
   1b8ce:	3301      	adds	r3, #1
   1b8d0:	781b      	ldrb	r3, [r3, #0]
   1b8d2:	021b      	lsls	r3, r3, #8
   1b8d4:	4313      	orrs	r3, r2
   1b8d6:	617b      	str	r3, [r7, #20]
   1b8d8:	687b      	ldr	r3, [r7, #4]
   1b8da:	3302      	adds	r3, #2
   1b8dc:	607b      	str	r3, [r7, #4]
            printf("LOAD_METHOD %s", qstr_str(qst));
   1b8de:	6978      	ldr	r0, [r7, #20]
   1b8e0:	f7e5 fd76 	bl	13d0 <qstr_str>
   1b8e4:	4603      	mov	r3, r0
   1b8e6:	461a      	mov	r2, r3
   1b8e8:	493a      	ldr	r1, [pc, #232]	; (1b9d4 <mp_bytecode_print_str+0x470>)
   1b8ea:	482d      	ldr	r0, [pc, #180]	; (1b9a0 <mp_bytecode_print_str+0x43c>)
   1b8ec:	f7e6 fbc0 	bl	2070 <mp_printf>
            break;
   1b8f0:	f000 bd23 	b.w	1c33a <mp_bytecode_print_str+0xdd6>

        case MP_BC_LOAD_SUPER_METHOD:
            DECODE_QSTR;
   1b8f4:	687b      	ldr	r3, [r7, #4]
   1b8f6:	781b      	ldrb	r3, [r3, #0]
   1b8f8:	461a      	mov	r2, r3
   1b8fa:	687b      	ldr	r3, [r7, #4]
   1b8fc:	3301      	adds	r3, #1
   1b8fe:	781b      	ldrb	r3, [r3, #0]
   1b900:	021b      	lsls	r3, r3, #8
   1b902:	4313      	orrs	r3, r2
   1b904:	617b      	str	r3, [r7, #20]
   1b906:	687b      	ldr	r3, [r7, #4]
   1b908:	3302      	adds	r3, #2
   1b90a:	607b      	str	r3, [r7, #4]
            printf("LOAD_SUPER_METHOD %s", qstr_str(qst));
   1b90c:	6978      	ldr	r0, [r7, #20]
   1b90e:	f7e5 fd5f 	bl	13d0 <qstr_str>
   1b912:	4603      	mov	r3, r0
   1b914:	461a      	mov	r2, r3
   1b916:	4930      	ldr	r1, [pc, #192]	; (1b9d8 <mp_bytecode_print_str+0x474>)
   1b918:	4821      	ldr	r0, [pc, #132]	; (1b9a0 <mp_bytecode_print_str+0x43c>)
   1b91a:	f7e6 fba9 	bl	2070 <mp_printf>
            break;
   1b91e:	f000 bd0c 	b.w	1c33a <mp_bytecode_print_str+0xdd6>

        case MP_BC_LOAD_BUILD_CLASS:
            printf("LOAD_BUILD_CLASS");
   1b922:	492e      	ldr	r1, [pc, #184]	; (1b9dc <mp_bytecode_print_str+0x478>)
   1b924:	481e      	ldr	r0, [pc, #120]	; (1b9a0 <mp_bytecode_print_str+0x43c>)
   1b926:	f7e6 fba3 	bl	2070 <mp_printf>
            break;
   1b92a:	f000 bd06 	b.w	1c33a <mp_bytecode_print_str+0xdd6>

        case MP_BC_LOAD_SUBSCR:
            printf("LOAD_SUBSCR");
   1b92e:	492c      	ldr	r1, [pc, #176]	; (1b9e0 <mp_bytecode_print_str+0x47c>)
   1b930:	481b      	ldr	r0, [pc, #108]	; (1b9a0 <mp_bytecode_print_str+0x43c>)
   1b932:	f7e6 fb9d 	bl	2070 <mp_printf>
            break;
   1b936:	f000 bd00 	b.w	1c33a <mp_bytecode_print_str+0xdd6>

        case MP_BC_STORE_FAST_N:
            DECODE_UINT;
   1b93a:	2300      	movs	r3, #0
   1b93c:	61fb      	str	r3, [r7, #28]
   1b93e:	69fb      	ldr	r3, [r7, #28]
   1b940:	01da      	lsls	r2, r3, #7
   1b942:	687b      	ldr	r3, [r7, #4]
   1b944:	781b      	ldrb	r3, [r3, #0]
   1b946:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1b94a:	4413      	add	r3, r2
   1b94c:	61fb      	str	r3, [r7, #28]
   1b94e:	687b      	ldr	r3, [r7, #4]
   1b950:	1c5a      	adds	r2, r3, #1
   1b952:	607a      	str	r2, [r7, #4]
   1b954:	781b      	ldrb	r3, [r3, #0]
   1b956:	b25b      	sxtb	r3, r3
   1b958:	2b00      	cmp	r3, #0
   1b95a:	dbf0      	blt.n	1b93e <mp_bytecode_print_str+0x3da>
            printf("STORE_FAST_N " UINT_FMT, unum);
   1b95c:	69fa      	ldr	r2, [r7, #28]
   1b95e:	4921      	ldr	r1, [pc, #132]	; (1b9e4 <mp_bytecode_print_str+0x480>)
   1b960:	480f      	ldr	r0, [pc, #60]	; (1b9a0 <mp_bytecode_print_str+0x43c>)
   1b962:	f7e6 fb85 	bl	2070 <mp_printf>
            break;
   1b966:	f000 bce8 	b.w	1c33a <mp_bytecode_print_str+0xdd6>

        case MP_BC_STORE_DEREF:
            DECODE_UINT;
   1b96a:	2300      	movs	r3, #0
   1b96c:	61fb      	str	r3, [r7, #28]
   1b96e:	69fb      	ldr	r3, [r7, #28]
   1b970:	01da      	lsls	r2, r3, #7
   1b972:	687b      	ldr	r3, [r7, #4]
   1b974:	781b      	ldrb	r3, [r3, #0]
   1b976:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1b97a:	4413      	add	r3, r2
   1b97c:	61fb      	str	r3, [r7, #28]
   1b97e:	687b      	ldr	r3, [r7, #4]
   1b980:	1c5a      	adds	r2, r3, #1
   1b982:	607a      	str	r2, [r7, #4]
   1b984:	781b      	ldrb	r3, [r3, #0]
   1b986:	b25b      	sxtb	r3, r3
   1b988:	2b00      	cmp	r3, #0
   1b98a:	dbf0      	blt.n	1b96e <mp_bytecode_print_str+0x40a>
            printf("STORE_DEREF " UINT_FMT, unum);
   1b98c:	69fa      	ldr	r2, [r7, #28]
   1b98e:	4916      	ldr	r1, [pc, #88]	; (1b9e8 <mp_bytecode_print_str+0x484>)
   1b990:	4803      	ldr	r0, [pc, #12]	; (1b9a0 <mp_bytecode_print_str+0x43c>)
   1b992:	f7e6 fb6d 	bl	2070 <mp_printf>
            break;
   1b996:	f000 bcd0 	b.w	1c33a <mp_bytecode_print_str+0xdd6>
   1b99a:	bf00      	nop
   1b99c:	00026c2c 	.word	0x00026c2c
   1b9a0:	000210cc 	.word	0x000210cc
   1b9a4:	00026c40 	.word	0x00026c40
   1b9a8:	00026c50 	.word	0x00026c50
   1b9ac:	00026c60 	.word	0x00026c60
   1b9b0:	00026c78 	.word	0x00026c78
   1b9b4:	20001420 	.word	0x20001420
   1b9b8:	00026c90 	.word	0x00026c90
   1b9bc:	00026ca4 	.word	0x00026ca4
   1b9c0:	00026cb0 	.word	0x00026cb0
   1b9c4:	00026cc0 	.word	0x00026cc0
   1b9c8:	00026cd0 	.word	0x00026cd0
   1b9cc:	00026ce0 	.word	0x00026ce0
   1b9d0:	00026cf0 	.word	0x00026cf0
   1b9d4:	00026d00 	.word	0x00026d00
   1b9d8:	00026d10 	.word	0x00026d10
   1b9dc:	00026d28 	.word	0x00026d28
   1b9e0:	00026d3c 	.word	0x00026d3c
   1b9e4:	00026d48 	.word	0x00026d48
   1b9e8:	00026d58 	.word	0x00026d58

        case MP_BC_STORE_NAME:
            DECODE_QSTR;
   1b9ec:	687b      	ldr	r3, [r7, #4]
   1b9ee:	781b      	ldrb	r3, [r3, #0]
   1b9f0:	461a      	mov	r2, r3
   1b9f2:	687b      	ldr	r3, [r7, #4]
   1b9f4:	3301      	adds	r3, #1
   1b9f6:	781b      	ldrb	r3, [r3, #0]
   1b9f8:	021b      	lsls	r3, r3, #8
   1b9fa:	4313      	orrs	r3, r2
   1b9fc:	617b      	str	r3, [r7, #20]
   1b9fe:	687b      	ldr	r3, [r7, #4]
   1ba00:	3302      	adds	r3, #2
   1ba02:	607b      	str	r3, [r7, #4]
            printf("STORE_NAME %s", qstr_str(qst));
   1ba04:	6978      	ldr	r0, [r7, #20]
   1ba06:	f7e5 fce3 	bl	13d0 <qstr_str>
   1ba0a:	4603      	mov	r3, r0
   1ba0c:	461a      	mov	r2, r3
   1ba0e:	49a8      	ldr	r1, [pc, #672]	; (1bcb0 <mp_bytecode_print_str+0x74c>)
   1ba10:	48a8      	ldr	r0, [pc, #672]	; (1bcb4 <mp_bytecode_print_str+0x750>)
   1ba12:	f7e6 fb2d 	bl	2070 <mp_printf>
            break;
   1ba16:	f000 bc90 	b.w	1c33a <mp_bytecode_print_str+0xdd6>

        case MP_BC_STORE_GLOBAL:
            DECODE_QSTR;
   1ba1a:	687b      	ldr	r3, [r7, #4]
   1ba1c:	781b      	ldrb	r3, [r3, #0]
   1ba1e:	461a      	mov	r2, r3
   1ba20:	687b      	ldr	r3, [r7, #4]
   1ba22:	3301      	adds	r3, #1
   1ba24:	781b      	ldrb	r3, [r3, #0]
   1ba26:	021b      	lsls	r3, r3, #8
   1ba28:	4313      	orrs	r3, r2
   1ba2a:	617b      	str	r3, [r7, #20]
   1ba2c:	687b      	ldr	r3, [r7, #4]
   1ba2e:	3302      	adds	r3, #2
   1ba30:	607b      	str	r3, [r7, #4]
            printf("STORE_GLOBAL %s", qstr_str(qst));
   1ba32:	6978      	ldr	r0, [r7, #20]
   1ba34:	f7e5 fccc 	bl	13d0 <qstr_str>
   1ba38:	4603      	mov	r3, r0
   1ba3a:	461a      	mov	r2, r3
   1ba3c:	499e      	ldr	r1, [pc, #632]	; (1bcb8 <mp_bytecode_print_str+0x754>)
   1ba3e:	489d      	ldr	r0, [pc, #628]	; (1bcb4 <mp_bytecode_print_str+0x750>)
   1ba40:	f7e6 fb16 	bl	2070 <mp_printf>
            break;
   1ba44:	f000 bc79 	b.w	1c33a <mp_bytecode_print_str+0xdd6>

        case MP_BC_STORE_ATTR:
            DECODE_QSTR;
   1ba48:	687b      	ldr	r3, [r7, #4]
   1ba4a:	781b      	ldrb	r3, [r3, #0]
   1ba4c:	461a      	mov	r2, r3
   1ba4e:	687b      	ldr	r3, [r7, #4]
   1ba50:	3301      	adds	r3, #1
   1ba52:	781b      	ldrb	r3, [r3, #0]
   1ba54:	021b      	lsls	r3, r3, #8
   1ba56:	4313      	orrs	r3, r2
   1ba58:	617b      	str	r3, [r7, #20]
   1ba5a:	687b      	ldr	r3, [r7, #4]
   1ba5c:	3302      	adds	r3, #2
   1ba5e:	607b      	str	r3, [r7, #4]
            printf("STORE_ATTR %s", qstr_str(qst));
   1ba60:	6978      	ldr	r0, [r7, #20]
   1ba62:	f7e5 fcb5 	bl	13d0 <qstr_str>
   1ba66:	4603      	mov	r3, r0
   1ba68:	461a      	mov	r2, r3
   1ba6a:	4994      	ldr	r1, [pc, #592]	; (1bcbc <mp_bytecode_print_str+0x758>)
   1ba6c:	4891      	ldr	r0, [pc, #580]	; (1bcb4 <mp_bytecode_print_str+0x750>)
   1ba6e:	f7e6 faff 	bl	2070 <mp_printf>
            if (MICROPY_OPT_CACHE_MAP_LOOKUP_IN_BYTECODE) {
                printf(" (cache=%u)", *ip++);
            }
            break;
   1ba72:	f000 bc62 	b.w	1c33a <mp_bytecode_print_str+0xdd6>

        case MP_BC_STORE_SUBSCR:
            printf("STORE_SUBSCR");
   1ba76:	4992      	ldr	r1, [pc, #584]	; (1bcc0 <mp_bytecode_print_str+0x75c>)
   1ba78:	488e      	ldr	r0, [pc, #568]	; (1bcb4 <mp_bytecode_print_str+0x750>)
   1ba7a:	f7e6 faf9 	bl	2070 <mp_printf>
            break;
   1ba7e:	f000 bc5c 	b.w	1c33a <mp_bytecode_print_str+0xdd6>

        case MP_BC_DELETE_FAST:
            DECODE_UINT;
   1ba82:	2300      	movs	r3, #0
   1ba84:	61fb      	str	r3, [r7, #28]
   1ba86:	69fb      	ldr	r3, [r7, #28]
   1ba88:	01da      	lsls	r2, r3, #7
   1ba8a:	687b      	ldr	r3, [r7, #4]
   1ba8c:	781b      	ldrb	r3, [r3, #0]
   1ba8e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1ba92:	4413      	add	r3, r2
   1ba94:	61fb      	str	r3, [r7, #28]
   1ba96:	687b      	ldr	r3, [r7, #4]
   1ba98:	1c5a      	adds	r2, r3, #1
   1ba9a:	607a      	str	r2, [r7, #4]
   1ba9c:	781b      	ldrb	r3, [r3, #0]
   1ba9e:	b25b      	sxtb	r3, r3
   1baa0:	2b00      	cmp	r3, #0
   1baa2:	dbf0      	blt.n	1ba86 <mp_bytecode_print_str+0x522>
            printf("DELETE_FAST " UINT_FMT, unum);
   1baa4:	69fa      	ldr	r2, [r7, #28]
   1baa6:	4987      	ldr	r1, [pc, #540]	; (1bcc4 <mp_bytecode_print_str+0x760>)
   1baa8:	4882      	ldr	r0, [pc, #520]	; (1bcb4 <mp_bytecode_print_str+0x750>)
   1baaa:	f7e6 fae1 	bl	2070 <mp_printf>
            break;
   1baae:	f000 bc44 	b.w	1c33a <mp_bytecode_print_str+0xdd6>

        case MP_BC_DELETE_DEREF:
            DECODE_UINT;
   1bab2:	2300      	movs	r3, #0
   1bab4:	61fb      	str	r3, [r7, #28]
   1bab6:	69fb      	ldr	r3, [r7, #28]
   1bab8:	01da      	lsls	r2, r3, #7
   1baba:	687b      	ldr	r3, [r7, #4]
   1babc:	781b      	ldrb	r3, [r3, #0]
   1babe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1bac2:	4413      	add	r3, r2
   1bac4:	61fb      	str	r3, [r7, #28]
   1bac6:	687b      	ldr	r3, [r7, #4]
   1bac8:	1c5a      	adds	r2, r3, #1
   1baca:	607a      	str	r2, [r7, #4]
   1bacc:	781b      	ldrb	r3, [r3, #0]
   1bace:	b25b      	sxtb	r3, r3
   1bad0:	2b00      	cmp	r3, #0
   1bad2:	dbf0      	blt.n	1bab6 <mp_bytecode_print_str+0x552>
            printf("DELETE_DEREF " UINT_FMT, unum);
   1bad4:	69fa      	ldr	r2, [r7, #28]
   1bad6:	497c      	ldr	r1, [pc, #496]	; (1bcc8 <mp_bytecode_print_str+0x764>)
   1bad8:	4876      	ldr	r0, [pc, #472]	; (1bcb4 <mp_bytecode_print_str+0x750>)
   1bada:	f7e6 fac9 	bl	2070 <mp_printf>
            break;
   1bade:	f000 bc2c 	b.w	1c33a <mp_bytecode_print_str+0xdd6>

        case MP_BC_DELETE_NAME:
            DECODE_QSTR;
   1bae2:	687b      	ldr	r3, [r7, #4]
   1bae4:	781b      	ldrb	r3, [r3, #0]
   1bae6:	461a      	mov	r2, r3
   1bae8:	687b      	ldr	r3, [r7, #4]
   1baea:	3301      	adds	r3, #1
   1baec:	781b      	ldrb	r3, [r3, #0]
   1baee:	021b      	lsls	r3, r3, #8
   1baf0:	4313      	orrs	r3, r2
   1baf2:	617b      	str	r3, [r7, #20]
   1baf4:	687b      	ldr	r3, [r7, #4]
   1baf6:	3302      	adds	r3, #2
   1baf8:	607b      	str	r3, [r7, #4]
            printf("DELETE_NAME %s", qstr_str(qst));
   1bafa:	6978      	ldr	r0, [r7, #20]
   1bafc:	f7e5 fc68 	bl	13d0 <qstr_str>
   1bb00:	4603      	mov	r3, r0
   1bb02:	461a      	mov	r2, r3
   1bb04:	4971      	ldr	r1, [pc, #452]	; (1bccc <mp_bytecode_print_str+0x768>)
   1bb06:	486b      	ldr	r0, [pc, #428]	; (1bcb4 <mp_bytecode_print_str+0x750>)
   1bb08:	f7e6 fab2 	bl	2070 <mp_printf>
            break;
   1bb0c:	f000 bc15 	b.w	1c33a <mp_bytecode_print_str+0xdd6>

        case MP_BC_DELETE_GLOBAL:
            DECODE_QSTR;
   1bb10:	687b      	ldr	r3, [r7, #4]
   1bb12:	781b      	ldrb	r3, [r3, #0]
   1bb14:	461a      	mov	r2, r3
   1bb16:	687b      	ldr	r3, [r7, #4]
   1bb18:	3301      	adds	r3, #1
   1bb1a:	781b      	ldrb	r3, [r3, #0]
   1bb1c:	021b      	lsls	r3, r3, #8
   1bb1e:	4313      	orrs	r3, r2
   1bb20:	617b      	str	r3, [r7, #20]
   1bb22:	687b      	ldr	r3, [r7, #4]
   1bb24:	3302      	adds	r3, #2
   1bb26:	607b      	str	r3, [r7, #4]
            printf("DELETE_GLOBAL %s", qstr_str(qst));
   1bb28:	6978      	ldr	r0, [r7, #20]
   1bb2a:	f7e5 fc51 	bl	13d0 <qstr_str>
   1bb2e:	4603      	mov	r3, r0
   1bb30:	461a      	mov	r2, r3
   1bb32:	4967      	ldr	r1, [pc, #412]	; (1bcd0 <mp_bytecode_print_str+0x76c>)
   1bb34:	485f      	ldr	r0, [pc, #380]	; (1bcb4 <mp_bytecode_print_str+0x750>)
   1bb36:	f7e6 fa9b 	bl	2070 <mp_printf>
            break;
   1bb3a:	e3fe      	b.n	1c33a <mp_bytecode_print_str+0xdd6>

        case MP_BC_DUP_TOP:
            printf("DUP_TOP");
   1bb3c:	4965      	ldr	r1, [pc, #404]	; (1bcd4 <mp_bytecode_print_str+0x770>)
   1bb3e:	485d      	ldr	r0, [pc, #372]	; (1bcb4 <mp_bytecode_print_str+0x750>)
   1bb40:	f7e6 fa96 	bl	2070 <mp_printf>
            break;
   1bb44:	e3f9      	b.n	1c33a <mp_bytecode_print_str+0xdd6>

        case MP_BC_DUP_TOP_TWO:
            printf("DUP_TOP_TWO");
   1bb46:	4964      	ldr	r1, [pc, #400]	; (1bcd8 <mp_bytecode_print_str+0x774>)
   1bb48:	485a      	ldr	r0, [pc, #360]	; (1bcb4 <mp_bytecode_print_str+0x750>)
   1bb4a:	f7e6 fa91 	bl	2070 <mp_printf>
            break;
   1bb4e:	e3f4      	b.n	1c33a <mp_bytecode_print_str+0xdd6>

        case MP_BC_POP_TOP:
            printf("POP_TOP");
   1bb50:	4962      	ldr	r1, [pc, #392]	; (1bcdc <mp_bytecode_print_str+0x778>)
   1bb52:	4858      	ldr	r0, [pc, #352]	; (1bcb4 <mp_bytecode_print_str+0x750>)
   1bb54:	f7e6 fa8c 	bl	2070 <mp_printf>
            break;
   1bb58:	e3ef      	b.n	1c33a <mp_bytecode_print_str+0xdd6>

        case MP_BC_ROT_TWO:
            printf("ROT_TWO");
   1bb5a:	4961      	ldr	r1, [pc, #388]	; (1bce0 <mp_bytecode_print_str+0x77c>)
   1bb5c:	4855      	ldr	r0, [pc, #340]	; (1bcb4 <mp_bytecode_print_str+0x750>)
   1bb5e:	f7e6 fa87 	bl	2070 <mp_printf>
            break;
   1bb62:	e3ea      	b.n	1c33a <mp_bytecode_print_str+0xdd6>

        case MP_BC_ROT_THREE:
            printf("ROT_THREE");
   1bb64:	495f      	ldr	r1, [pc, #380]	; (1bce4 <mp_bytecode_print_str+0x780>)
   1bb66:	4853      	ldr	r0, [pc, #332]	; (1bcb4 <mp_bytecode_print_str+0x750>)
   1bb68:	f7e6 fa82 	bl	2070 <mp_printf>
            break;
   1bb6c:	e3e5      	b.n	1c33a <mp_bytecode_print_str+0xdd6>

        case MP_BC_JUMP:
            DECODE_SLABEL;
   1bb6e:	687b      	ldr	r3, [r7, #4]
   1bb70:	781b      	ldrb	r3, [r3, #0]
   1bb72:	461a      	mov	r2, r3
   1bb74:	687b      	ldr	r3, [r7, #4]
   1bb76:	3301      	adds	r3, #1
   1bb78:	781b      	ldrb	r3, [r3, #0]
   1bb7a:	021b      	lsls	r3, r3, #8
   1bb7c:	4313      	orrs	r3, r2
   1bb7e:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
   1bb82:	61fb      	str	r3, [r7, #28]
   1bb84:	687b      	ldr	r3, [r7, #4]
   1bb86:	3302      	adds	r3, #2
   1bb88:	607b      	str	r3, [r7, #4]
            printf("JUMP " UINT_FMT, (mp_uint_t)(ip + unum - mp_showbc_code_start));
   1bb8a:	687a      	ldr	r2, [r7, #4]
   1bb8c:	69fb      	ldr	r3, [r7, #28]
   1bb8e:	4413      	add	r3, r2
   1bb90:	461a      	mov	r2, r3
   1bb92:	4b55      	ldr	r3, [pc, #340]	; (1bce8 <mp_bytecode_print_str+0x784>)
   1bb94:	681b      	ldr	r3, [r3, #0]
   1bb96:	1ad3      	subs	r3, r2, r3
   1bb98:	461a      	mov	r2, r3
   1bb9a:	4954      	ldr	r1, [pc, #336]	; (1bcec <mp_bytecode_print_str+0x788>)
   1bb9c:	4845      	ldr	r0, [pc, #276]	; (1bcb4 <mp_bytecode_print_str+0x750>)
   1bb9e:	f7e6 fa67 	bl	2070 <mp_printf>
            break;
   1bba2:	e3ca      	b.n	1c33a <mp_bytecode_print_str+0xdd6>

        case MP_BC_POP_JUMP_IF_TRUE:
            DECODE_SLABEL;
   1bba4:	687b      	ldr	r3, [r7, #4]
   1bba6:	781b      	ldrb	r3, [r3, #0]
   1bba8:	461a      	mov	r2, r3
   1bbaa:	687b      	ldr	r3, [r7, #4]
   1bbac:	3301      	adds	r3, #1
   1bbae:	781b      	ldrb	r3, [r3, #0]
   1bbb0:	021b      	lsls	r3, r3, #8
   1bbb2:	4313      	orrs	r3, r2
   1bbb4:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
   1bbb8:	61fb      	str	r3, [r7, #28]
   1bbba:	687b      	ldr	r3, [r7, #4]
   1bbbc:	3302      	adds	r3, #2
   1bbbe:	607b      	str	r3, [r7, #4]
            printf("POP_JUMP_IF_TRUE " UINT_FMT, (mp_uint_t)(ip + unum - mp_showbc_code_start));
   1bbc0:	687a      	ldr	r2, [r7, #4]
   1bbc2:	69fb      	ldr	r3, [r7, #28]
   1bbc4:	4413      	add	r3, r2
   1bbc6:	461a      	mov	r2, r3
   1bbc8:	4b47      	ldr	r3, [pc, #284]	; (1bce8 <mp_bytecode_print_str+0x784>)
   1bbca:	681b      	ldr	r3, [r3, #0]
   1bbcc:	1ad3      	subs	r3, r2, r3
   1bbce:	461a      	mov	r2, r3
   1bbd0:	4947      	ldr	r1, [pc, #284]	; (1bcf0 <mp_bytecode_print_str+0x78c>)
   1bbd2:	4838      	ldr	r0, [pc, #224]	; (1bcb4 <mp_bytecode_print_str+0x750>)
   1bbd4:	f7e6 fa4c 	bl	2070 <mp_printf>
            break;
   1bbd8:	e3af      	b.n	1c33a <mp_bytecode_print_str+0xdd6>

        case MP_BC_POP_JUMP_IF_FALSE:
            DECODE_SLABEL;
   1bbda:	687b      	ldr	r3, [r7, #4]
   1bbdc:	781b      	ldrb	r3, [r3, #0]
   1bbde:	461a      	mov	r2, r3
   1bbe0:	687b      	ldr	r3, [r7, #4]
   1bbe2:	3301      	adds	r3, #1
   1bbe4:	781b      	ldrb	r3, [r3, #0]
   1bbe6:	021b      	lsls	r3, r3, #8
   1bbe8:	4313      	orrs	r3, r2
   1bbea:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
   1bbee:	61fb      	str	r3, [r7, #28]
   1bbf0:	687b      	ldr	r3, [r7, #4]
   1bbf2:	3302      	adds	r3, #2
   1bbf4:	607b      	str	r3, [r7, #4]
            printf("POP_JUMP_IF_FALSE " UINT_FMT, (mp_uint_t)(ip + unum - mp_showbc_code_start));
   1bbf6:	687a      	ldr	r2, [r7, #4]
   1bbf8:	69fb      	ldr	r3, [r7, #28]
   1bbfa:	4413      	add	r3, r2
   1bbfc:	461a      	mov	r2, r3
   1bbfe:	4b3a      	ldr	r3, [pc, #232]	; (1bce8 <mp_bytecode_print_str+0x784>)
   1bc00:	681b      	ldr	r3, [r3, #0]
   1bc02:	1ad3      	subs	r3, r2, r3
   1bc04:	461a      	mov	r2, r3
   1bc06:	493b      	ldr	r1, [pc, #236]	; (1bcf4 <mp_bytecode_print_str+0x790>)
   1bc08:	482a      	ldr	r0, [pc, #168]	; (1bcb4 <mp_bytecode_print_str+0x750>)
   1bc0a:	f7e6 fa31 	bl	2070 <mp_printf>
            break;
   1bc0e:	e394      	b.n	1c33a <mp_bytecode_print_str+0xdd6>

        case MP_BC_JUMP_IF_TRUE_OR_POP:
            DECODE_SLABEL;
   1bc10:	687b      	ldr	r3, [r7, #4]
   1bc12:	781b      	ldrb	r3, [r3, #0]
   1bc14:	461a      	mov	r2, r3
   1bc16:	687b      	ldr	r3, [r7, #4]
   1bc18:	3301      	adds	r3, #1
   1bc1a:	781b      	ldrb	r3, [r3, #0]
   1bc1c:	021b      	lsls	r3, r3, #8
   1bc1e:	4313      	orrs	r3, r2
   1bc20:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
   1bc24:	61fb      	str	r3, [r7, #28]
   1bc26:	687b      	ldr	r3, [r7, #4]
   1bc28:	3302      	adds	r3, #2
   1bc2a:	607b      	str	r3, [r7, #4]
            printf("JUMP_IF_TRUE_OR_POP " UINT_FMT, (mp_uint_t)(ip + unum - mp_showbc_code_start));
   1bc2c:	687a      	ldr	r2, [r7, #4]
   1bc2e:	69fb      	ldr	r3, [r7, #28]
   1bc30:	4413      	add	r3, r2
   1bc32:	461a      	mov	r2, r3
   1bc34:	4b2c      	ldr	r3, [pc, #176]	; (1bce8 <mp_bytecode_print_str+0x784>)
   1bc36:	681b      	ldr	r3, [r3, #0]
   1bc38:	1ad3      	subs	r3, r2, r3
   1bc3a:	461a      	mov	r2, r3
   1bc3c:	492e      	ldr	r1, [pc, #184]	; (1bcf8 <mp_bytecode_print_str+0x794>)
   1bc3e:	481d      	ldr	r0, [pc, #116]	; (1bcb4 <mp_bytecode_print_str+0x750>)
   1bc40:	f7e6 fa16 	bl	2070 <mp_printf>
            break;
   1bc44:	e379      	b.n	1c33a <mp_bytecode_print_str+0xdd6>

        case MP_BC_JUMP_IF_FALSE_OR_POP:
            DECODE_SLABEL;
   1bc46:	687b      	ldr	r3, [r7, #4]
   1bc48:	781b      	ldrb	r3, [r3, #0]
   1bc4a:	461a      	mov	r2, r3
   1bc4c:	687b      	ldr	r3, [r7, #4]
   1bc4e:	3301      	adds	r3, #1
   1bc50:	781b      	ldrb	r3, [r3, #0]
   1bc52:	021b      	lsls	r3, r3, #8
   1bc54:	4313      	orrs	r3, r2
   1bc56:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
   1bc5a:	61fb      	str	r3, [r7, #28]
   1bc5c:	687b      	ldr	r3, [r7, #4]
   1bc5e:	3302      	adds	r3, #2
   1bc60:	607b      	str	r3, [r7, #4]
            printf("JUMP_IF_FALSE_OR_POP " UINT_FMT, (mp_uint_t)(ip + unum - mp_showbc_code_start));
   1bc62:	687a      	ldr	r2, [r7, #4]
   1bc64:	69fb      	ldr	r3, [r7, #28]
   1bc66:	4413      	add	r3, r2
   1bc68:	461a      	mov	r2, r3
   1bc6a:	4b1f      	ldr	r3, [pc, #124]	; (1bce8 <mp_bytecode_print_str+0x784>)
   1bc6c:	681b      	ldr	r3, [r3, #0]
   1bc6e:	1ad3      	subs	r3, r2, r3
   1bc70:	461a      	mov	r2, r3
   1bc72:	4922      	ldr	r1, [pc, #136]	; (1bcfc <mp_bytecode_print_str+0x798>)
   1bc74:	480f      	ldr	r0, [pc, #60]	; (1bcb4 <mp_bytecode_print_str+0x750>)
   1bc76:	f7e6 f9fb 	bl	2070 <mp_printf>
            break;
   1bc7a:	e35e      	b.n	1c33a <mp_bytecode_print_str+0xdd6>

        case MP_BC_SETUP_WITH:
            DECODE_ULABEL; // loop-like labels are always forward
   1bc7c:	687b      	ldr	r3, [r7, #4]
   1bc7e:	781b      	ldrb	r3, [r3, #0]
   1bc80:	461a      	mov	r2, r3
   1bc82:	687b      	ldr	r3, [r7, #4]
   1bc84:	3301      	adds	r3, #1
   1bc86:	781b      	ldrb	r3, [r3, #0]
   1bc88:	021b      	lsls	r3, r3, #8
   1bc8a:	4313      	orrs	r3, r2
   1bc8c:	61fb      	str	r3, [r7, #28]
   1bc8e:	687b      	ldr	r3, [r7, #4]
   1bc90:	3302      	adds	r3, #2
   1bc92:	607b      	str	r3, [r7, #4]
            printf("SETUP_WITH " UINT_FMT, (mp_uint_t)(ip + unum - mp_showbc_code_start));
   1bc94:	687a      	ldr	r2, [r7, #4]
   1bc96:	69fb      	ldr	r3, [r7, #28]
   1bc98:	4413      	add	r3, r2
   1bc9a:	461a      	mov	r2, r3
   1bc9c:	4b12      	ldr	r3, [pc, #72]	; (1bce8 <mp_bytecode_print_str+0x784>)
   1bc9e:	681b      	ldr	r3, [r3, #0]
   1bca0:	1ad3      	subs	r3, r2, r3
   1bca2:	461a      	mov	r2, r3
   1bca4:	4916      	ldr	r1, [pc, #88]	; (1bd00 <mp_bytecode_print_str+0x79c>)
   1bca6:	4803      	ldr	r0, [pc, #12]	; (1bcb4 <mp_bytecode_print_str+0x750>)
   1bca8:	f7e6 f9e2 	bl	2070 <mp_printf>
            break;
   1bcac:	e345      	b.n	1c33a <mp_bytecode_print_str+0xdd6>
   1bcae:	bf00      	nop
   1bcb0:	00026d68 	.word	0x00026d68
   1bcb4:	000210cc 	.word	0x000210cc
   1bcb8:	00026d78 	.word	0x00026d78
   1bcbc:	00026d88 	.word	0x00026d88
   1bcc0:	00026d98 	.word	0x00026d98
   1bcc4:	00026da8 	.word	0x00026da8
   1bcc8:	00026db8 	.word	0x00026db8
   1bccc:	00026dc8 	.word	0x00026dc8
   1bcd0:	00026dd8 	.word	0x00026dd8
   1bcd4:	00026dec 	.word	0x00026dec
   1bcd8:	00026df4 	.word	0x00026df4
   1bcdc:	00026e00 	.word	0x00026e00
   1bce0:	00026e08 	.word	0x00026e08
   1bce4:	00026e10 	.word	0x00026e10
   1bce8:	20001424 	.word	0x20001424
   1bcec:	00026e1c 	.word	0x00026e1c
   1bcf0:	00026e24 	.word	0x00026e24
   1bcf4:	00026e38 	.word	0x00026e38
   1bcf8:	00026e50 	.word	0x00026e50
   1bcfc:	00026e68 	.word	0x00026e68
   1bd00:	00026e80 	.word	0x00026e80

        case MP_BC_WITH_CLEANUP:
            printf("WITH_CLEANUP");
   1bd04:	4997      	ldr	r1, [pc, #604]	; (1bf64 <mp_bytecode_print_str+0xa00>)
   1bd06:	4898      	ldr	r0, [pc, #608]	; (1bf68 <mp_bytecode_print_str+0xa04>)
   1bd08:	f7e6 f9b2 	bl	2070 <mp_printf>
            break;
   1bd0c:	e315      	b.n	1c33a <mp_bytecode_print_str+0xdd6>

        case MP_BC_UNWIND_JUMP:
            DECODE_SLABEL;
   1bd0e:	687b      	ldr	r3, [r7, #4]
   1bd10:	781b      	ldrb	r3, [r3, #0]
   1bd12:	461a      	mov	r2, r3
   1bd14:	687b      	ldr	r3, [r7, #4]
   1bd16:	3301      	adds	r3, #1
   1bd18:	781b      	ldrb	r3, [r3, #0]
   1bd1a:	021b      	lsls	r3, r3, #8
   1bd1c:	4313      	orrs	r3, r2
   1bd1e:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
   1bd22:	61fb      	str	r3, [r7, #28]
   1bd24:	687b      	ldr	r3, [r7, #4]
   1bd26:	3302      	adds	r3, #2
   1bd28:	607b      	str	r3, [r7, #4]
            printf("UNWIND_JUMP " UINT_FMT " %d", (mp_uint_t)(ip + unum - mp_showbc_code_start), *ip);
   1bd2a:	687a      	ldr	r2, [r7, #4]
   1bd2c:	69fb      	ldr	r3, [r7, #28]
   1bd2e:	4413      	add	r3, r2
   1bd30:	461a      	mov	r2, r3
   1bd32:	4b8e      	ldr	r3, [pc, #568]	; (1bf6c <mp_bytecode_print_str+0xa08>)
   1bd34:	681b      	ldr	r3, [r3, #0]
   1bd36:	1ad3      	subs	r3, r2, r3
   1bd38:	461a      	mov	r2, r3
   1bd3a:	687b      	ldr	r3, [r7, #4]
   1bd3c:	781b      	ldrb	r3, [r3, #0]
   1bd3e:	498c      	ldr	r1, [pc, #560]	; (1bf70 <mp_bytecode_print_str+0xa0c>)
   1bd40:	4889      	ldr	r0, [pc, #548]	; (1bf68 <mp_bytecode_print_str+0xa04>)
   1bd42:	f7e6 f995 	bl	2070 <mp_printf>
            ip += 1;
   1bd46:	687b      	ldr	r3, [r7, #4]
   1bd48:	3301      	adds	r3, #1
   1bd4a:	607b      	str	r3, [r7, #4]
            break;
   1bd4c:	e2f5      	b.n	1c33a <mp_bytecode_print_str+0xdd6>

        case MP_BC_SETUP_EXCEPT:
            DECODE_ULABEL; // except labels are always forward
   1bd4e:	687b      	ldr	r3, [r7, #4]
   1bd50:	781b      	ldrb	r3, [r3, #0]
   1bd52:	461a      	mov	r2, r3
   1bd54:	687b      	ldr	r3, [r7, #4]
   1bd56:	3301      	adds	r3, #1
   1bd58:	781b      	ldrb	r3, [r3, #0]
   1bd5a:	021b      	lsls	r3, r3, #8
   1bd5c:	4313      	orrs	r3, r2
   1bd5e:	61fb      	str	r3, [r7, #28]
   1bd60:	687b      	ldr	r3, [r7, #4]
   1bd62:	3302      	adds	r3, #2
   1bd64:	607b      	str	r3, [r7, #4]
            printf("SETUP_EXCEPT " UINT_FMT, (mp_uint_t)(ip + unum - mp_showbc_code_start));
   1bd66:	687a      	ldr	r2, [r7, #4]
   1bd68:	69fb      	ldr	r3, [r7, #28]
   1bd6a:	4413      	add	r3, r2
   1bd6c:	461a      	mov	r2, r3
   1bd6e:	4b7f      	ldr	r3, [pc, #508]	; (1bf6c <mp_bytecode_print_str+0xa08>)
   1bd70:	681b      	ldr	r3, [r3, #0]
   1bd72:	1ad3      	subs	r3, r2, r3
   1bd74:	461a      	mov	r2, r3
   1bd76:	497f      	ldr	r1, [pc, #508]	; (1bf74 <mp_bytecode_print_str+0xa10>)
   1bd78:	487b      	ldr	r0, [pc, #492]	; (1bf68 <mp_bytecode_print_str+0xa04>)
   1bd7a:	f7e6 f979 	bl	2070 <mp_printf>
            break;
   1bd7e:	e2dc      	b.n	1c33a <mp_bytecode_print_str+0xdd6>

        case MP_BC_SETUP_FINALLY:
            DECODE_ULABEL; // except labels are always forward
   1bd80:	687b      	ldr	r3, [r7, #4]
   1bd82:	781b      	ldrb	r3, [r3, #0]
   1bd84:	461a      	mov	r2, r3
   1bd86:	687b      	ldr	r3, [r7, #4]
   1bd88:	3301      	adds	r3, #1
   1bd8a:	781b      	ldrb	r3, [r3, #0]
   1bd8c:	021b      	lsls	r3, r3, #8
   1bd8e:	4313      	orrs	r3, r2
   1bd90:	61fb      	str	r3, [r7, #28]
   1bd92:	687b      	ldr	r3, [r7, #4]
   1bd94:	3302      	adds	r3, #2
   1bd96:	607b      	str	r3, [r7, #4]
            printf("SETUP_FINALLY " UINT_FMT, (mp_uint_t)(ip + unum - mp_showbc_code_start));
   1bd98:	687a      	ldr	r2, [r7, #4]
   1bd9a:	69fb      	ldr	r3, [r7, #28]
   1bd9c:	4413      	add	r3, r2
   1bd9e:	461a      	mov	r2, r3
   1bda0:	4b72      	ldr	r3, [pc, #456]	; (1bf6c <mp_bytecode_print_str+0xa08>)
   1bda2:	681b      	ldr	r3, [r3, #0]
   1bda4:	1ad3      	subs	r3, r2, r3
   1bda6:	461a      	mov	r2, r3
   1bda8:	4973      	ldr	r1, [pc, #460]	; (1bf78 <mp_bytecode_print_str+0xa14>)
   1bdaa:	486f      	ldr	r0, [pc, #444]	; (1bf68 <mp_bytecode_print_str+0xa04>)
   1bdac:	f7e6 f960 	bl	2070 <mp_printf>
            break;
   1bdb0:	e2c3      	b.n	1c33a <mp_bytecode_print_str+0xdd6>
        case MP_BC_END_FINALLY:
            // if TOS is an exception, reraises the exception (3 values on TOS)
            // if TOS is an integer, does something else
            // if TOS is None, just pops it and continues
            // else error
            printf("END_FINALLY");
   1bdb2:	4972      	ldr	r1, [pc, #456]	; (1bf7c <mp_bytecode_print_str+0xa18>)
   1bdb4:	486c      	ldr	r0, [pc, #432]	; (1bf68 <mp_bytecode_print_str+0xa04>)
   1bdb6:	f7e6 f95b 	bl	2070 <mp_printf>
            break;
   1bdba:	e2be      	b.n	1c33a <mp_bytecode_print_str+0xdd6>

        case MP_BC_GET_ITER:
            printf("GET_ITER");
   1bdbc:	4970      	ldr	r1, [pc, #448]	; (1bf80 <mp_bytecode_print_str+0xa1c>)
   1bdbe:	486a      	ldr	r0, [pc, #424]	; (1bf68 <mp_bytecode_print_str+0xa04>)
   1bdc0:	f7e6 f956 	bl	2070 <mp_printf>
            break;
   1bdc4:	e2b9      	b.n	1c33a <mp_bytecode_print_str+0xdd6>

        case MP_BC_GET_ITER_STACK:
            printf("GET_ITER_STACK");
   1bdc6:	496f      	ldr	r1, [pc, #444]	; (1bf84 <mp_bytecode_print_str+0xa20>)
   1bdc8:	4867      	ldr	r0, [pc, #412]	; (1bf68 <mp_bytecode_print_str+0xa04>)
   1bdca:	f7e6 f951 	bl	2070 <mp_printf>
            break;
   1bdce:	e2b4      	b.n	1c33a <mp_bytecode_print_str+0xdd6>

        case MP_BC_FOR_ITER:
            DECODE_ULABEL; // the jump offset if iteration finishes; for labels are always forward
   1bdd0:	687b      	ldr	r3, [r7, #4]
   1bdd2:	781b      	ldrb	r3, [r3, #0]
   1bdd4:	461a      	mov	r2, r3
   1bdd6:	687b      	ldr	r3, [r7, #4]
   1bdd8:	3301      	adds	r3, #1
   1bdda:	781b      	ldrb	r3, [r3, #0]
   1bddc:	021b      	lsls	r3, r3, #8
   1bdde:	4313      	orrs	r3, r2
   1bde0:	61fb      	str	r3, [r7, #28]
   1bde2:	687b      	ldr	r3, [r7, #4]
   1bde4:	3302      	adds	r3, #2
   1bde6:	607b      	str	r3, [r7, #4]
            printf("FOR_ITER " UINT_FMT, (mp_uint_t)(ip + unum - mp_showbc_code_start));
   1bde8:	687a      	ldr	r2, [r7, #4]
   1bdea:	69fb      	ldr	r3, [r7, #28]
   1bdec:	4413      	add	r3, r2
   1bdee:	461a      	mov	r2, r3
   1bdf0:	4b5e      	ldr	r3, [pc, #376]	; (1bf6c <mp_bytecode_print_str+0xa08>)
   1bdf2:	681b      	ldr	r3, [r3, #0]
   1bdf4:	1ad3      	subs	r3, r2, r3
   1bdf6:	461a      	mov	r2, r3
   1bdf8:	4963      	ldr	r1, [pc, #396]	; (1bf88 <mp_bytecode_print_str+0xa24>)
   1bdfa:	485b      	ldr	r0, [pc, #364]	; (1bf68 <mp_bytecode_print_str+0xa04>)
   1bdfc:	f7e6 f938 	bl	2070 <mp_printf>
            break;
   1be00:	e29b      	b.n	1c33a <mp_bytecode_print_str+0xdd6>

        case MP_BC_POP_BLOCK:
            // pops block and restores the stack
            printf("POP_BLOCK");
   1be02:	4962      	ldr	r1, [pc, #392]	; (1bf8c <mp_bytecode_print_str+0xa28>)
   1be04:	4858      	ldr	r0, [pc, #352]	; (1bf68 <mp_bytecode_print_str+0xa04>)
   1be06:	f7e6 f933 	bl	2070 <mp_printf>
            break;
   1be0a:	e296      	b.n	1c33a <mp_bytecode_print_str+0xdd6>

        case MP_BC_POP_EXCEPT:
            // pops block, checks it's an exception block, and restores the stack, saving the 3 exception values to local threadstate
            printf("POP_EXCEPT");
   1be0c:	4960      	ldr	r1, [pc, #384]	; (1bf90 <mp_bytecode_print_str+0xa2c>)
   1be0e:	4856      	ldr	r0, [pc, #344]	; (1bf68 <mp_bytecode_print_str+0xa04>)
   1be10:	f7e6 f92e 	bl	2070 <mp_printf>
            break;
   1be14:	e291      	b.n	1c33a <mp_bytecode_print_str+0xdd6>

        case MP_BC_BUILD_TUPLE:
            DECODE_UINT;
   1be16:	2300      	movs	r3, #0
   1be18:	61fb      	str	r3, [r7, #28]
   1be1a:	69fb      	ldr	r3, [r7, #28]
   1be1c:	01da      	lsls	r2, r3, #7
   1be1e:	687b      	ldr	r3, [r7, #4]
   1be20:	781b      	ldrb	r3, [r3, #0]
   1be22:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1be26:	4413      	add	r3, r2
   1be28:	61fb      	str	r3, [r7, #28]
   1be2a:	687b      	ldr	r3, [r7, #4]
   1be2c:	1c5a      	adds	r2, r3, #1
   1be2e:	607a      	str	r2, [r7, #4]
   1be30:	781b      	ldrb	r3, [r3, #0]
   1be32:	b25b      	sxtb	r3, r3
   1be34:	2b00      	cmp	r3, #0
   1be36:	dbf0      	blt.n	1be1a <mp_bytecode_print_str+0x8b6>
            printf("BUILD_TUPLE " UINT_FMT, unum);
   1be38:	69fa      	ldr	r2, [r7, #28]
   1be3a:	4956      	ldr	r1, [pc, #344]	; (1bf94 <mp_bytecode_print_str+0xa30>)
   1be3c:	484a      	ldr	r0, [pc, #296]	; (1bf68 <mp_bytecode_print_str+0xa04>)
   1be3e:	f7e6 f917 	bl	2070 <mp_printf>
            break;
   1be42:	e27a      	b.n	1c33a <mp_bytecode_print_str+0xdd6>

        case MP_BC_BUILD_LIST:
            DECODE_UINT;
   1be44:	2300      	movs	r3, #0
   1be46:	61fb      	str	r3, [r7, #28]
   1be48:	69fb      	ldr	r3, [r7, #28]
   1be4a:	01da      	lsls	r2, r3, #7
   1be4c:	687b      	ldr	r3, [r7, #4]
   1be4e:	781b      	ldrb	r3, [r3, #0]
   1be50:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1be54:	4413      	add	r3, r2
   1be56:	61fb      	str	r3, [r7, #28]
   1be58:	687b      	ldr	r3, [r7, #4]
   1be5a:	1c5a      	adds	r2, r3, #1
   1be5c:	607a      	str	r2, [r7, #4]
   1be5e:	781b      	ldrb	r3, [r3, #0]
   1be60:	b25b      	sxtb	r3, r3
   1be62:	2b00      	cmp	r3, #0
   1be64:	dbf0      	blt.n	1be48 <mp_bytecode_print_str+0x8e4>
            printf("BUILD_LIST " UINT_FMT, unum);
   1be66:	69fa      	ldr	r2, [r7, #28]
   1be68:	494b      	ldr	r1, [pc, #300]	; (1bf98 <mp_bytecode_print_str+0xa34>)
   1be6a:	483f      	ldr	r0, [pc, #252]	; (1bf68 <mp_bytecode_print_str+0xa04>)
   1be6c:	f7e6 f900 	bl	2070 <mp_printf>
            break;
   1be70:	e263      	b.n	1c33a <mp_bytecode_print_str+0xdd6>

        case MP_BC_BUILD_MAP:
            DECODE_UINT;
   1be72:	2300      	movs	r3, #0
   1be74:	61fb      	str	r3, [r7, #28]
   1be76:	69fb      	ldr	r3, [r7, #28]
   1be78:	01da      	lsls	r2, r3, #7
   1be7a:	687b      	ldr	r3, [r7, #4]
   1be7c:	781b      	ldrb	r3, [r3, #0]
   1be7e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1be82:	4413      	add	r3, r2
   1be84:	61fb      	str	r3, [r7, #28]
   1be86:	687b      	ldr	r3, [r7, #4]
   1be88:	1c5a      	adds	r2, r3, #1
   1be8a:	607a      	str	r2, [r7, #4]
   1be8c:	781b      	ldrb	r3, [r3, #0]
   1be8e:	b25b      	sxtb	r3, r3
   1be90:	2b00      	cmp	r3, #0
   1be92:	dbf0      	blt.n	1be76 <mp_bytecode_print_str+0x912>
            printf("BUILD_MAP " UINT_FMT, unum);
   1be94:	69fa      	ldr	r2, [r7, #28]
   1be96:	4941      	ldr	r1, [pc, #260]	; (1bf9c <mp_bytecode_print_str+0xa38>)
   1be98:	4833      	ldr	r0, [pc, #204]	; (1bf68 <mp_bytecode_print_str+0xa04>)
   1be9a:	f7e6 f8e9 	bl	2070 <mp_printf>
            break;
   1be9e:	e24c      	b.n	1c33a <mp_bytecode_print_str+0xdd6>

        case MP_BC_STORE_MAP:
            printf("STORE_MAP");
   1bea0:	493f      	ldr	r1, [pc, #252]	; (1bfa0 <mp_bytecode_print_str+0xa3c>)
   1bea2:	4831      	ldr	r0, [pc, #196]	; (1bf68 <mp_bytecode_print_str+0xa04>)
   1bea4:	f7e6 f8e4 	bl	2070 <mp_printf>
            break;
   1bea8:	e247      	b.n	1c33a <mp_bytecode_print_str+0xdd6>

        case MP_BC_BUILD_SET:
            DECODE_UINT;
   1beaa:	2300      	movs	r3, #0
   1beac:	61fb      	str	r3, [r7, #28]
   1beae:	69fb      	ldr	r3, [r7, #28]
   1beb0:	01da      	lsls	r2, r3, #7
   1beb2:	687b      	ldr	r3, [r7, #4]
   1beb4:	781b      	ldrb	r3, [r3, #0]
   1beb6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1beba:	4413      	add	r3, r2
   1bebc:	61fb      	str	r3, [r7, #28]
   1bebe:	687b      	ldr	r3, [r7, #4]
   1bec0:	1c5a      	adds	r2, r3, #1
   1bec2:	607a      	str	r2, [r7, #4]
   1bec4:	781b      	ldrb	r3, [r3, #0]
   1bec6:	b25b      	sxtb	r3, r3
   1bec8:	2b00      	cmp	r3, #0
   1beca:	dbf0      	blt.n	1beae <mp_bytecode_print_str+0x94a>
            printf("BUILD_SET " UINT_FMT, unum);
   1becc:	69fa      	ldr	r2, [r7, #28]
   1bece:	4935      	ldr	r1, [pc, #212]	; (1bfa4 <mp_bytecode_print_str+0xa40>)
   1bed0:	4825      	ldr	r0, [pc, #148]	; (1bf68 <mp_bytecode_print_str+0xa04>)
   1bed2:	f7e6 f8cd 	bl	2070 <mp_printf>
            break;
   1bed6:	e230      	b.n	1c33a <mp_bytecode_print_str+0xdd6>
            printf("BUILD_SLICE " UINT_FMT, unum);
            break;
#endif

        case MP_BC_STORE_COMP:
            DECODE_UINT;
   1bed8:	2300      	movs	r3, #0
   1beda:	61fb      	str	r3, [r7, #28]
   1bedc:	69fb      	ldr	r3, [r7, #28]
   1bede:	01da      	lsls	r2, r3, #7
   1bee0:	687b      	ldr	r3, [r7, #4]
   1bee2:	781b      	ldrb	r3, [r3, #0]
   1bee4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1bee8:	4413      	add	r3, r2
   1beea:	61fb      	str	r3, [r7, #28]
   1beec:	687b      	ldr	r3, [r7, #4]
   1beee:	1c5a      	adds	r2, r3, #1
   1bef0:	607a      	str	r2, [r7, #4]
   1bef2:	781b      	ldrb	r3, [r3, #0]
   1bef4:	b25b      	sxtb	r3, r3
   1bef6:	2b00      	cmp	r3, #0
   1bef8:	dbf0      	blt.n	1bedc <mp_bytecode_print_str+0x978>
            printf("STORE_COMP " UINT_FMT, unum);
   1befa:	69fa      	ldr	r2, [r7, #28]
   1befc:	492a      	ldr	r1, [pc, #168]	; (1bfa8 <mp_bytecode_print_str+0xa44>)
   1befe:	481a      	ldr	r0, [pc, #104]	; (1bf68 <mp_bytecode_print_str+0xa04>)
   1bf00:	f7e6 f8b6 	bl	2070 <mp_printf>
            break;
   1bf04:	e219      	b.n	1c33a <mp_bytecode_print_str+0xdd6>

        case MP_BC_UNPACK_SEQUENCE:
            DECODE_UINT;
   1bf06:	2300      	movs	r3, #0
   1bf08:	61fb      	str	r3, [r7, #28]
   1bf0a:	69fb      	ldr	r3, [r7, #28]
   1bf0c:	01da      	lsls	r2, r3, #7
   1bf0e:	687b      	ldr	r3, [r7, #4]
   1bf10:	781b      	ldrb	r3, [r3, #0]
   1bf12:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1bf16:	4413      	add	r3, r2
   1bf18:	61fb      	str	r3, [r7, #28]
   1bf1a:	687b      	ldr	r3, [r7, #4]
   1bf1c:	1c5a      	adds	r2, r3, #1
   1bf1e:	607a      	str	r2, [r7, #4]
   1bf20:	781b      	ldrb	r3, [r3, #0]
   1bf22:	b25b      	sxtb	r3, r3
   1bf24:	2b00      	cmp	r3, #0
   1bf26:	dbf0      	blt.n	1bf0a <mp_bytecode_print_str+0x9a6>
            printf("UNPACK_SEQUENCE " UINT_FMT, unum);
   1bf28:	69fa      	ldr	r2, [r7, #28]
   1bf2a:	4920      	ldr	r1, [pc, #128]	; (1bfac <mp_bytecode_print_str+0xa48>)
   1bf2c:	480e      	ldr	r0, [pc, #56]	; (1bf68 <mp_bytecode_print_str+0xa04>)
   1bf2e:	f7e6 f89f 	bl	2070 <mp_printf>
            break;
   1bf32:	e202      	b.n	1c33a <mp_bytecode_print_str+0xdd6>

        case MP_BC_UNPACK_EX:
            DECODE_UINT;
   1bf34:	2300      	movs	r3, #0
   1bf36:	61fb      	str	r3, [r7, #28]
   1bf38:	69fb      	ldr	r3, [r7, #28]
   1bf3a:	01da      	lsls	r2, r3, #7
   1bf3c:	687b      	ldr	r3, [r7, #4]
   1bf3e:	781b      	ldrb	r3, [r3, #0]
   1bf40:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1bf44:	4413      	add	r3, r2
   1bf46:	61fb      	str	r3, [r7, #28]
   1bf48:	687b      	ldr	r3, [r7, #4]
   1bf4a:	1c5a      	adds	r2, r3, #1
   1bf4c:	607a      	str	r2, [r7, #4]
   1bf4e:	781b      	ldrb	r3, [r3, #0]
   1bf50:	b25b      	sxtb	r3, r3
   1bf52:	2b00      	cmp	r3, #0
   1bf54:	dbf0      	blt.n	1bf38 <mp_bytecode_print_str+0x9d4>
            printf("UNPACK_EX " UINT_FMT, unum);
   1bf56:	69fa      	ldr	r2, [r7, #28]
   1bf58:	4915      	ldr	r1, [pc, #84]	; (1bfb0 <mp_bytecode_print_str+0xa4c>)
   1bf5a:	4803      	ldr	r0, [pc, #12]	; (1bf68 <mp_bytecode_print_str+0xa04>)
   1bf5c:	f7e6 f888 	bl	2070 <mp_printf>
            break;
   1bf60:	e1eb      	b.n	1c33a <mp_bytecode_print_str+0xdd6>
   1bf62:	bf00      	nop
   1bf64:	00026e90 	.word	0x00026e90
   1bf68:	000210cc 	.word	0x000210cc
   1bf6c:	20001424 	.word	0x20001424
   1bf70:	00026ea0 	.word	0x00026ea0
   1bf74:	00026eb4 	.word	0x00026eb4
   1bf78:	00026ec4 	.word	0x00026ec4
   1bf7c:	00026ed8 	.word	0x00026ed8
   1bf80:	00026ee4 	.word	0x00026ee4
   1bf84:	00026ef0 	.word	0x00026ef0
   1bf88:	00026f00 	.word	0x00026f00
   1bf8c:	00026f0c 	.word	0x00026f0c
   1bf90:	00026f18 	.word	0x00026f18
   1bf94:	00026f24 	.word	0x00026f24
   1bf98:	00026f34 	.word	0x00026f34
   1bf9c:	00026f44 	.word	0x00026f44
   1bfa0:	00026f54 	.word	0x00026f54
   1bfa4:	00026f60 	.word	0x00026f60
   1bfa8:	00026f70 	.word	0x00026f70
   1bfac:	00026f80 	.word	0x00026f80
   1bfb0:	00026f94 	.word	0x00026f94

        case MP_BC_MAKE_FUNCTION:
            DECODE_PTR;
   1bfb4:	2300      	movs	r3, #0
   1bfb6:	61fb      	str	r3, [r7, #28]
   1bfb8:	69fb      	ldr	r3, [r7, #28]
   1bfba:	01da      	lsls	r2, r3, #7
   1bfbc:	687b      	ldr	r3, [r7, #4]
   1bfbe:	781b      	ldrb	r3, [r3, #0]
   1bfc0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1bfc4:	4413      	add	r3, r2
   1bfc6:	61fb      	str	r3, [r7, #28]
   1bfc8:	687b      	ldr	r3, [r7, #4]
   1bfca:	1c5a      	adds	r2, r3, #1
   1bfcc:	607a      	str	r2, [r7, #4]
   1bfce:	781b      	ldrb	r3, [r3, #0]
   1bfd0:	b25b      	sxtb	r3, r3
   1bfd2:	2b00      	cmp	r3, #0
   1bfd4:	dbf0      	blt.n	1bfb8 <mp_bytecode_print_str+0xa54>
   1bfd6:	4b96      	ldr	r3, [pc, #600]	; (1c230 <mp_bytecode_print_str+0xccc>)
   1bfd8:	681a      	ldr	r2, [r3, #0]
   1bfda:	69fb      	ldr	r3, [r7, #28]
   1bfdc:	009b      	lsls	r3, r3, #2
   1bfde:	4413      	add	r3, r2
   1bfe0:	681b      	ldr	r3, [r3, #0]
   1bfe2:	61fb      	str	r3, [r7, #28]
            printf("MAKE_FUNCTION %p", (void*)(uintptr_t)unum);
   1bfe4:	69fb      	ldr	r3, [r7, #28]
   1bfe6:	461a      	mov	r2, r3
   1bfe8:	4992      	ldr	r1, [pc, #584]	; (1c234 <mp_bytecode_print_str+0xcd0>)
   1bfea:	4893      	ldr	r0, [pc, #588]	; (1c238 <mp_bytecode_print_str+0xcd4>)
   1bfec:	f7e6 f840 	bl	2070 <mp_printf>
            break;
   1bff0:	e1a3      	b.n	1c33a <mp_bytecode_print_str+0xdd6>

        case MP_BC_MAKE_FUNCTION_DEFARGS:
            DECODE_PTR;
   1bff2:	2300      	movs	r3, #0
   1bff4:	61fb      	str	r3, [r7, #28]
   1bff6:	69fb      	ldr	r3, [r7, #28]
   1bff8:	01da      	lsls	r2, r3, #7
   1bffa:	687b      	ldr	r3, [r7, #4]
   1bffc:	781b      	ldrb	r3, [r3, #0]
   1bffe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1c002:	4413      	add	r3, r2
   1c004:	61fb      	str	r3, [r7, #28]
   1c006:	687b      	ldr	r3, [r7, #4]
   1c008:	1c5a      	adds	r2, r3, #1
   1c00a:	607a      	str	r2, [r7, #4]
   1c00c:	781b      	ldrb	r3, [r3, #0]
   1c00e:	b25b      	sxtb	r3, r3
   1c010:	2b00      	cmp	r3, #0
   1c012:	dbf0      	blt.n	1bff6 <mp_bytecode_print_str+0xa92>
   1c014:	4b86      	ldr	r3, [pc, #536]	; (1c230 <mp_bytecode_print_str+0xccc>)
   1c016:	681a      	ldr	r2, [r3, #0]
   1c018:	69fb      	ldr	r3, [r7, #28]
   1c01a:	009b      	lsls	r3, r3, #2
   1c01c:	4413      	add	r3, r2
   1c01e:	681b      	ldr	r3, [r3, #0]
   1c020:	61fb      	str	r3, [r7, #28]
            printf("MAKE_FUNCTION_DEFARGS %p", (void*)(uintptr_t)unum);
   1c022:	69fb      	ldr	r3, [r7, #28]
   1c024:	461a      	mov	r2, r3
   1c026:	4985      	ldr	r1, [pc, #532]	; (1c23c <mp_bytecode_print_str+0xcd8>)
   1c028:	4883      	ldr	r0, [pc, #524]	; (1c238 <mp_bytecode_print_str+0xcd4>)
   1c02a:	f7e6 f821 	bl	2070 <mp_printf>
            break;
   1c02e:	e184      	b.n	1c33a <mp_bytecode_print_str+0xdd6>

        case MP_BC_MAKE_CLOSURE: {
            DECODE_PTR;
   1c030:	2300      	movs	r3, #0
   1c032:	61fb      	str	r3, [r7, #28]
   1c034:	69fb      	ldr	r3, [r7, #28]
   1c036:	01da      	lsls	r2, r3, #7
   1c038:	687b      	ldr	r3, [r7, #4]
   1c03a:	781b      	ldrb	r3, [r3, #0]
   1c03c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1c040:	4413      	add	r3, r2
   1c042:	61fb      	str	r3, [r7, #28]
   1c044:	687b      	ldr	r3, [r7, #4]
   1c046:	1c5a      	adds	r2, r3, #1
   1c048:	607a      	str	r2, [r7, #4]
   1c04a:	781b      	ldrb	r3, [r3, #0]
   1c04c:	b25b      	sxtb	r3, r3
   1c04e:	2b00      	cmp	r3, #0
   1c050:	dbf0      	blt.n	1c034 <mp_bytecode_print_str+0xad0>
   1c052:	4b77      	ldr	r3, [pc, #476]	; (1c230 <mp_bytecode_print_str+0xccc>)
   1c054:	681a      	ldr	r2, [r3, #0]
   1c056:	69fb      	ldr	r3, [r7, #28]
   1c058:	009b      	lsls	r3, r3, #2
   1c05a:	4413      	add	r3, r2
   1c05c:	681b      	ldr	r3, [r3, #0]
   1c05e:	61fb      	str	r3, [r7, #28]
            mp_uint_t n_closed_over = *ip++;
   1c060:	687b      	ldr	r3, [r7, #4]
   1c062:	1c5a      	adds	r2, r3, #1
   1c064:	607a      	str	r2, [r7, #4]
   1c066:	781b      	ldrb	r3, [r3, #0]
   1c068:	613b      	str	r3, [r7, #16]
            printf("MAKE_CLOSURE %p " UINT_FMT, (void*)(uintptr_t)unum, n_closed_over);
   1c06a:	69fa      	ldr	r2, [r7, #28]
   1c06c:	693b      	ldr	r3, [r7, #16]
   1c06e:	4974      	ldr	r1, [pc, #464]	; (1c240 <mp_bytecode_print_str+0xcdc>)
   1c070:	4871      	ldr	r0, [pc, #452]	; (1c238 <mp_bytecode_print_str+0xcd4>)
   1c072:	f7e5 fffd 	bl	2070 <mp_printf>
            break;
   1c076:	e160      	b.n	1c33a <mp_bytecode_print_str+0xdd6>
        }

        case MP_BC_MAKE_CLOSURE_DEFARGS: {
            DECODE_PTR;
   1c078:	2300      	movs	r3, #0
   1c07a:	61fb      	str	r3, [r7, #28]
   1c07c:	69fb      	ldr	r3, [r7, #28]
   1c07e:	01da      	lsls	r2, r3, #7
   1c080:	687b      	ldr	r3, [r7, #4]
   1c082:	781b      	ldrb	r3, [r3, #0]
   1c084:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1c088:	4413      	add	r3, r2
   1c08a:	61fb      	str	r3, [r7, #28]
   1c08c:	687b      	ldr	r3, [r7, #4]
   1c08e:	1c5a      	adds	r2, r3, #1
   1c090:	607a      	str	r2, [r7, #4]
   1c092:	781b      	ldrb	r3, [r3, #0]
   1c094:	b25b      	sxtb	r3, r3
   1c096:	2b00      	cmp	r3, #0
   1c098:	dbf0      	blt.n	1c07c <mp_bytecode_print_str+0xb18>
   1c09a:	4b65      	ldr	r3, [pc, #404]	; (1c230 <mp_bytecode_print_str+0xccc>)
   1c09c:	681a      	ldr	r2, [r3, #0]
   1c09e:	69fb      	ldr	r3, [r7, #28]
   1c0a0:	009b      	lsls	r3, r3, #2
   1c0a2:	4413      	add	r3, r2
   1c0a4:	681b      	ldr	r3, [r3, #0]
   1c0a6:	61fb      	str	r3, [r7, #28]
            mp_uint_t n_closed_over = *ip++;
   1c0a8:	687b      	ldr	r3, [r7, #4]
   1c0aa:	1c5a      	adds	r2, r3, #1
   1c0ac:	607a      	str	r2, [r7, #4]
   1c0ae:	781b      	ldrb	r3, [r3, #0]
   1c0b0:	60fb      	str	r3, [r7, #12]
            printf("MAKE_CLOSURE_DEFARGS %p " UINT_FMT, (void*)(uintptr_t)unum, n_closed_over);
   1c0b2:	69fa      	ldr	r2, [r7, #28]
   1c0b4:	68fb      	ldr	r3, [r7, #12]
   1c0b6:	4963      	ldr	r1, [pc, #396]	; (1c244 <mp_bytecode_print_str+0xce0>)
   1c0b8:	485f      	ldr	r0, [pc, #380]	; (1c238 <mp_bytecode_print_str+0xcd4>)
   1c0ba:	f7e5 ffd9 	bl	2070 <mp_printf>
            break;
   1c0be:	e13c      	b.n	1c33a <mp_bytecode_print_str+0xdd6>
        }

        case MP_BC_CALL_FUNCTION:
            DECODE_UINT;
   1c0c0:	2300      	movs	r3, #0
   1c0c2:	61fb      	str	r3, [r7, #28]
   1c0c4:	69fb      	ldr	r3, [r7, #28]
   1c0c6:	01da      	lsls	r2, r3, #7
   1c0c8:	687b      	ldr	r3, [r7, #4]
   1c0ca:	781b      	ldrb	r3, [r3, #0]
   1c0cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1c0d0:	4413      	add	r3, r2
   1c0d2:	61fb      	str	r3, [r7, #28]
   1c0d4:	687b      	ldr	r3, [r7, #4]
   1c0d6:	1c5a      	adds	r2, r3, #1
   1c0d8:	607a      	str	r2, [r7, #4]
   1c0da:	781b      	ldrb	r3, [r3, #0]
   1c0dc:	b25b      	sxtb	r3, r3
   1c0de:	2b00      	cmp	r3, #0
   1c0e0:	dbf0      	blt.n	1c0c4 <mp_bytecode_print_str+0xb60>
            printf("CALL_FUNCTION n=" UINT_FMT " nkw=" UINT_FMT, unum & 0xff, (unum >> 8) & 0xff);
   1c0e2:	69fb      	ldr	r3, [r7, #28]
   1c0e4:	b2da      	uxtb	r2, r3
   1c0e6:	69fb      	ldr	r3, [r7, #28]
   1c0e8:	0a1b      	lsrs	r3, r3, #8
   1c0ea:	b2db      	uxtb	r3, r3
   1c0ec:	4956      	ldr	r1, [pc, #344]	; (1c248 <mp_bytecode_print_str+0xce4>)
   1c0ee:	4852      	ldr	r0, [pc, #328]	; (1c238 <mp_bytecode_print_str+0xcd4>)
   1c0f0:	f7e5 ffbe 	bl	2070 <mp_printf>
            break;
   1c0f4:	e121      	b.n	1c33a <mp_bytecode_print_str+0xdd6>

        case MP_BC_CALL_FUNCTION_VAR_KW:
            DECODE_UINT;
   1c0f6:	2300      	movs	r3, #0
   1c0f8:	61fb      	str	r3, [r7, #28]
   1c0fa:	69fb      	ldr	r3, [r7, #28]
   1c0fc:	01da      	lsls	r2, r3, #7
   1c0fe:	687b      	ldr	r3, [r7, #4]
   1c100:	781b      	ldrb	r3, [r3, #0]
   1c102:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1c106:	4413      	add	r3, r2
   1c108:	61fb      	str	r3, [r7, #28]
   1c10a:	687b      	ldr	r3, [r7, #4]
   1c10c:	1c5a      	adds	r2, r3, #1
   1c10e:	607a      	str	r2, [r7, #4]
   1c110:	781b      	ldrb	r3, [r3, #0]
   1c112:	b25b      	sxtb	r3, r3
   1c114:	2b00      	cmp	r3, #0
   1c116:	dbf0      	blt.n	1c0fa <mp_bytecode_print_str+0xb96>
            printf("CALL_FUNCTION_VAR_KW n=" UINT_FMT " nkw=" UINT_FMT, unum & 0xff, (unum >> 8) & 0xff);
   1c118:	69fb      	ldr	r3, [r7, #28]
   1c11a:	b2da      	uxtb	r2, r3
   1c11c:	69fb      	ldr	r3, [r7, #28]
   1c11e:	0a1b      	lsrs	r3, r3, #8
   1c120:	b2db      	uxtb	r3, r3
   1c122:	494a      	ldr	r1, [pc, #296]	; (1c24c <mp_bytecode_print_str+0xce8>)
   1c124:	4844      	ldr	r0, [pc, #272]	; (1c238 <mp_bytecode_print_str+0xcd4>)
   1c126:	f7e5 ffa3 	bl	2070 <mp_printf>
            break;
   1c12a:	e106      	b.n	1c33a <mp_bytecode_print_str+0xdd6>

        case MP_BC_CALL_METHOD:
            DECODE_UINT;
   1c12c:	2300      	movs	r3, #0
   1c12e:	61fb      	str	r3, [r7, #28]
   1c130:	69fb      	ldr	r3, [r7, #28]
   1c132:	01da      	lsls	r2, r3, #7
   1c134:	687b      	ldr	r3, [r7, #4]
   1c136:	781b      	ldrb	r3, [r3, #0]
   1c138:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1c13c:	4413      	add	r3, r2
   1c13e:	61fb      	str	r3, [r7, #28]
   1c140:	687b      	ldr	r3, [r7, #4]
   1c142:	1c5a      	adds	r2, r3, #1
   1c144:	607a      	str	r2, [r7, #4]
   1c146:	781b      	ldrb	r3, [r3, #0]
   1c148:	b25b      	sxtb	r3, r3
   1c14a:	2b00      	cmp	r3, #0
   1c14c:	dbf0      	blt.n	1c130 <mp_bytecode_print_str+0xbcc>
            printf("CALL_METHOD n=" UINT_FMT " nkw=" UINT_FMT, unum & 0xff, (unum >> 8) & 0xff);
   1c14e:	69fb      	ldr	r3, [r7, #28]
   1c150:	b2da      	uxtb	r2, r3
   1c152:	69fb      	ldr	r3, [r7, #28]
   1c154:	0a1b      	lsrs	r3, r3, #8
   1c156:	b2db      	uxtb	r3, r3
   1c158:	493d      	ldr	r1, [pc, #244]	; (1c250 <mp_bytecode_print_str+0xcec>)
   1c15a:	4837      	ldr	r0, [pc, #220]	; (1c238 <mp_bytecode_print_str+0xcd4>)
   1c15c:	f7e5 ff88 	bl	2070 <mp_printf>
            break;
   1c160:	e0eb      	b.n	1c33a <mp_bytecode_print_str+0xdd6>

        case MP_BC_CALL_METHOD_VAR_KW:
            DECODE_UINT;
   1c162:	2300      	movs	r3, #0
   1c164:	61fb      	str	r3, [r7, #28]
   1c166:	69fb      	ldr	r3, [r7, #28]
   1c168:	01da      	lsls	r2, r3, #7
   1c16a:	687b      	ldr	r3, [r7, #4]
   1c16c:	781b      	ldrb	r3, [r3, #0]
   1c16e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1c172:	4413      	add	r3, r2
   1c174:	61fb      	str	r3, [r7, #28]
   1c176:	687b      	ldr	r3, [r7, #4]
   1c178:	1c5a      	adds	r2, r3, #1
   1c17a:	607a      	str	r2, [r7, #4]
   1c17c:	781b      	ldrb	r3, [r3, #0]
   1c17e:	b25b      	sxtb	r3, r3
   1c180:	2b00      	cmp	r3, #0
   1c182:	dbf0      	blt.n	1c166 <mp_bytecode_print_str+0xc02>
            printf("CALL_METHOD_VAR_KW n=" UINT_FMT " nkw=" UINT_FMT, unum & 0xff, (unum >> 8) & 0xff);
   1c184:	69fb      	ldr	r3, [r7, #28]
   1c186:	b2da      	uxtb	r2, r3
   1c188:	69fb      	ldr	r3, [r7, #28]
   1c18a:	0a1b      	lsrs	r3, r3, #8
   1c18c:	b2db      	uxtb	r3, r3
   1c18e:	4931      	ldr	r1, [pc, #196]	; (1c254 <mp_bytecode_print_str+0xcf0>)
   1c190:	4829      	ldr	r0, [pc, #164]	; (1c238 <mp_bytecode_print_str+0xcd4>)
   1c192:	f7e5 ff6d 	bl	2070 <mp_printf>
            break;
   1c196:	e0d0      	b.n	1c33a <mp_bytecode_print_str+0xdd6>

        case MP_BC_RETURN_VALUE:
            printf("RETURN_VALUE");
   1c198:	492f      	ldr	r1, [pc, #188]	; (1c258 <mp_bytecode_print_str+0xcf4>)
   1c19a:	4827      	ldr	r0, [pc, #156]	; (1c238 <mp_bytecode_print_str+0xcd4>)
   1c19c:	f7e5 ff68 	bl	2070 <mp_printf>
            break;
   1c1a0:	e0cb      	b.n	1c33a <mp_bytecode_print_str+0xdd6>

        case MP_BC_RAISE_VARARGS:
            unum = *ip++;
   1c1a2:	687b      	ldr	r3, [r7, #4]
   1c1a4:	1c5a      	adds	r2, r3, #1
   1c1a6:	607a      	str	r2, [r7, #4]
   1c1a8:	781b      	ldrb	r3, [r3, #0]
   1c1aa:	61fb      	str	r3, [r7, #28]
            printf("RAISE_VARARGS " UINT_FMT, unum);
   1c1ac:	69fa      	ldr	r2, [r7, #28]
   1c1ae:	492b      	ldr	r1, [pc, #172]	; (1c25c <mp_bytecode_print_str+0xcf8>)
   1c1b0:	4821      	ldr	r0, [pc, #132]	; (1c238 <mp_bytecode_print_str+0xcd4>)
   1c1b2:	f7e5 ff5d 	bl	2070 <mp_printf>
            break;
   1c1b6:	e0c0      	b.n	1c33a <mp_bytecode_print_str+0xdd6>

        case MP_BC_YIELD_VALUE:
            printf("YIELD_VALUE");
   1c1b8:	4929      	ldr	r1, [pc, #164]	; (1c260 <mp_bytecode_print_str+0xcfc>)
   1c1ba:	481f      	ldr	r0, [pc, #124]	; (1c238 <mp_bytecode_print_str+0xcd4>)
   1c1bc:	f7e5 ff58 	bl	2070 <mp_printf>
            break;
   1c1c0:	e0bb      	b.n	1c33a <mp_bytecode_print_str+0xdd6>

        case MP_BC_YIELD_FROM:
            printf("YIELD_FROM");
   1c1c2:	4928      	ldr	r1, [pc, #160]	; (1c264 <mp_bytecode_print_str+0xd00>)
   1c1c4:	481c      	ldr	r0, [pc, #112]	; (1c238 <mp_bytecode_print_str+0xcd4>)
   1c1c6:	f7e5 ff53 	bl	2070 <mp_printf>
            break;
   1c1ca:	e0b6      	b.n	1c33a <mp_bytecode_print_str+0xdd6>

        case MP_BC_IMPORT_NAME:
            DECODE_QSTR;
   1c1cc:	687b      	ldr	r3, [r7, #4]
   1c1ce:	781b      	ldrb	r3, [r3, #0]
   1c1d0:	461a      	mov	r2, r3
   1c1d2:	687b      	ldr	r3, [r7, #4]
   1c1d4:	3301      	adds	r3, #1
   1c1d6:	781b      	ldrb	r3, [r3, #0]
   1c1d8:	021b      	lsls	r3, r3, #8
   1c1da:	4313      	orrs	r3, r2
   1c1dc:	617b      	str	r3, [r7, #20]
   1c1de:	687b      	ldr	r3, [r7, #4]
   1c1e0:	3302      	adds	r3, #2
   1c1e2:	607b      	str	r3, [r7, #4]
            printf("IMPORT_NAME '%s'", qstr_str(qst));
   1c1e4:	6978      	ldr	r0, [r7, #20]
   1c1e6:	f7e5 f8f3 	bl	13d0 <qstr_str>
   1c1ea:	4603      	mov	r3, r0
   1c1ec:	461a      	mov	r2, r3
   1c1ee:	491e      	ldr	r1, [pc, #120]	; (1c268 <mp_bytecode_print_str+0xd04>)
   1c1f0:	4811      	ldr	r0, [pc, #68]	; (1c238 <mp_bytecode_print_str+0xcd4>)
   1c1f2:	f7e5 ff3d 	bl	2070 <mp_printf>
            break;
   1c1f6:	e0a0      	b.n	1c33a <mp_bytecode_print_str+0xdd6>

        case MP_BC_IMPORT_FROM:
            DECODE_QSTR;
   1c1f8:	687b      	ldr	r3, [r7, #4]
   1c1fa:	781b      	ldrb	r3, [r3, #0]
   1c1fc:	461a      	mov	r2, r3
   1c1fe:	687b      	ldr	r3, [r7, #4]
   1c200:	3301      	adds	r3, #1
   1c202:	781b      	ldrb	r3, [r3, #0]
   1c204:	021b      	lsls	r3, r3, #8
   1c206:	4313      	orrs	r3, r2
   1c208:	617b      	str	r3, [r7, #20]
   1c20a:	687b      	ldr	r3, [r7, #4]
   1c20c:	3302      	adds	r3, #2
   1c20e:	607b      	str	r3, [r7, #4]
            printf("IMPORT_FROM '%s'", qstr_str(qst));
   1c210:	6978      	ldr	r0, [r7, #20]
   1c212:	f7e5 f8dd 	bl	13d0 <qstr_str>
   1c216:	4603      	mov	r3, r0
   1c218:	461a      	mov	r2, r3
   1c21a:	4914      	ldr	r1, [pc, #80]	; (1c26c <mp_bytecode_print_str+0xd08>)
   1c21c:	4806      	ldr	r0, [pc, #24]	; (1c238 <mp_bytecode_print_str+0xcd4>)
   1c21e:	f7e5 ff27 	bl	2070 <mp_printf>
            break;
   1c222:	e08a      	b.n	1c33a <mp_bytecode_print_str+0xdd6>

        case MP_BC_IMPORT_STAR:
            printf("IMPORT_STAR");
   1c224:	4912      	ldr	r1, [pc, #72]	; (1c270 <mp_bytecode_print_str+0xd0c>)
   1c226:	4804      	ldr	r0, [pc, #16]	; (1c238 <mp_bytecode_print_str+0xcd4>)
   1c228:	f7e5 ff22 	bl	2070 <mp_printf>
            break;
   1c22c:	e085      	b.n	1c33a <mp_bytecode_print_str+0xdd6>
   1c22e:	bf00      	nop
   1c230:	20001420 	.word	0x20001420
   1c234:	00026fa4 	.word	0x00026fa4
   1c238:	000210cc 	.word	0x000210cc
   1c23c:	00026fb8 	.word	0x00026fb8
   1c240:	00026fd4 	.word	0x00026fd4
   1c244:	00026fe8 	.word	0x00026fe8
   1c248:	00027004 	.word	0x00027004
   1c24c:	00027020 	.word	0x00027020
   1c250:	00027044 	.word	0x00027044
   1c254:	0002705c 	.word	0x0002705c
   1c258:	0002707c 	.word	0x0002707c
   1c25c:	0002708c 	.word	0x0002708c
   1c260:	000270a0 	.word	0x000270a0
   1c264:	000270ac 	.word	0x000270ac
   1c268:	000270b8 	.word	0x000270b8
   1c26c:	000270cc 	.word	0x000270cc
   1c270:	000270e0 	.word	0x000270e0

        default:
            if (ip[-1] < MP_BC_LOAD_CONST_SMALL_INT_MULTI + 64) {
   1c274:	687b      	ldr	r3, [r7, #4]
   1c276:	3b01      	subs	r3, #1
   1c278:	781b      	ldrb	r3, [r3, #0]
   1c27a:	2baf      	cmp	r3, #175	; 0xaf
   1c27c:	d809      	bhi.n	1c292 <mp_bytecode_print_str+0xd2e>
                printf("LOAD_CONST_SMALL_INT " INT_FMT, (mp_int_t)ip[-1] - MP_BC_LOAD_CONST_SMALL_INT_MULTI - 16);
   1c27e:	687b      	ldr	r3, [r7, #4]
   1c280:	3b01      	subs	r3, #1
   1c282:	781b      	ldrb	r3, [r3, #0]
   1c284:	3b80      	subs	r3, #128	; 0x80
   1c286:	461a      	mov	r2, r3
   1c288:	492e      	ldr	r1, [pc, #184]	; (1c344 <mp_bytecode_print_str+0xde0>)
   1c28a:	482f      	ldr	r0, [pc, #188]	; (1c348 <mp_bytecode_print_str+0xde4>)
   1c28c:	f7e5 fef0 	bl	2070 <mp_printf>
            } else {
                printf("code %p, byte code 0x%02x not implemented\n", ip, ip[-1]);
                assert(0);
                return ip;
            }
            break;
   1c290:	e053      	b.n	1c33a <mp_bytecode_print_str+0xdd6>
            } else if (ip[-1] < MP_BC_LOAD_FAST_MULTI + 16) {
   1c292:	687b      	ldr	r3, [r7, #4]
   1c294:	3b01      	subs	r3, #1
   1c296:	781b      	ldrb	r3, [r3, #0]
   1c298:	2bbf      	cmp	r3, #191	; 0xbf
   1c29a:	d809      	bhi.n	1c2b0 <mp_bytecode_print_str+0xd4c>
                printf("LOAD_FAST " UINT_FMT, (mp_uint_t)ip[-1] - MP_BC_LOAD_FAST_MULTI);
   1c29c:	687b      	ldr	r3, [r7, #4]
   1c29e:	3b01      	subs	r3, #1
   1c2a0:	781b      	ldrb	r3, [r3, #0]
   1c2a2:	3bb0      	subs	r3, #176	; 0xb0
   1c2a4:	461a      	mov	r2, r3
   1c2a6:	4929      	ldr	r1, [pc, #164]	; (1c34c <mp_bytecode_print_str+0xde8>)
   1c2a8:	4827      	ldr	r0, [pc, #156]	; (1c348 <mp_bytecode_print_str+0xde4>)
   1c2aa:	f7e5 fee1 	bl	2070 <mp_printf>
            break;
   1c2ae:	e044      	b.n	1c33a <mp_bytecode_print_str+0xdd6>
            } else if (ip[-1] < MP_BC_STORE_FAST_MULTI + 16) {
   1c2b0:	687b      	ldr	r3, [r7, #4]
   1c2b2:	3b01      	subs	r3, #1
   1c2b4:	781b      	ldrb	r3, [r3, #0]
   1c2b6:	2bcf      	cmp	r3, #207	; 0xcf
   1c2b8:	d809      	bhi.n	1c2ce <mp_bytecode_print_str+0xd6a>
                printf("STORE_FAST " UINT_FMT, (mp_uint_t)ip[-1] - MP_BC_STORE_FAST_MULTI);
   1c2ba:	687b      	ldr	r3, [r7, #4]
   1c2bc:	3b01      	subs	r3, #1
   1c2be:	781b      	ldrb	r3, [r3, #0]
   1c2c0:	3bc0      	subs	r3, #192	; 0xc0
   1c2c2:	461a      	mov	r2, r3
   1c2c4:	4922      	ldr	r1, [pc, #136]	; (1c350 <mp_bytecode_print_str+0xdec>)
   1c2c6:	4820      	ldr	r0, [pc, #128]	; (1c348 <mp_bytecode_print_str+0xde4>)
   1c2c8:	f7e5 fed2 	bl	2070 <mp_printf>
            break;
   1c2cc:	e035      	b.n	1c33a <mp_bytecode_print_str+0xdd6>
            } else if (ip[-1] < MP_BC_UNARY_OP_MULTI + MP_UNARY_OP_NUM_BYTECODE) {
   1c2ce:	687b      	ldr	r3, [r7, #4]
   1c2d0:	3b01      	subs	r3, #1
   1c2d2:	781b      	ldrb	r3, [r3, #0]
   1c2d4:	2bd3      	cmp	r3, #211	; 0xd3
   1c2d6:	d809      	bhi.n	1c2ec <mp_bytecode_print_str+0xd88>
                printf("UNARY_OP " UINT_FMT, (mp_uint_t)ip[-1] - MP_BC_UNARY_OP_MULTI);
   1c2d8:	687b      	ldr	r3, [r7, #4]
   1c2da:	3b01      	subs	r3, #1
   1c2dc:	781b      	ldrb	r3, [r3, #0]
   1c2de:	3bd0      	subs	r3, #208	; 0xd0
   1c2e0:	461a      	mov	r2, r3
   1c2e2:	491c      	ldr	r1, [pc, #112]	; (1c354 <mp_bytecode_print_str+0xdf0>)
   1c2e4:	4818      	ldr	r0, [pc, #96]	; (1c348 <mp_bytecode_print_str+0xde4>)
   1c2e6:	f7e5 fec3 	bl	2070 <mp_printf>
            break;
   1c2ea:	e026      	b.n	1c33a <mp_bytecode_print_str+0xdd6>
            } else if (ip[-1] < MP_BC_BINARY_OP_MULTI + MP_BINARY_OP_NUM_BYTECODE) {
   1c2ec:	687b      	ldr	r3, [r7, #4]
   1c2ee:	3b01      	subs	r3, #1
   1c2f0:	781b      	ldrb	r3, [r3, #0]
   1c2f2:	2bf7      	cmp	r3, #247	; 0xf7
   1c2f4:	d812      	bhi.n	1c31c <mp_bytecode_print_str+0xdb8>
                mp_uint_t op = ip[-1] - MP_BC_BINARY_OP_MULTI;
   1c2f6:	687b      	ldr	r3, [r7, #4]
   1c2f8:	3b01      	subs	r3, #1
   1c2fa:	781b      	ldrb	r3, [r3, #0]
   1c2fc:	3bd7      	subs	r3, #215	; 0xd7
   1c2fe:	60bb      	str	r3, [r7, #8]
                printf("BINARY_OP " UINT_FMT " %s", op, qstr_str(mp_binary_op_method_name[op]));
   1c300:	4a15      	ldr	r2, [pc, #84]	; (1c358 <mp_bytecode_print_str+0xdf4>)
   1c302:	68bb      	ldr	r3, [r7, #8]
   1c304:	4413      	add	r3, r2
   1c306:	781b      	ldrb	r3, [r3, #0]
   1c308:	4618      	mov	r0, r3
   1c30a:	f7e5 f861 	bl	13d0 <qstr_str>
   1c30e:	4603      	mov	r3, r0
   1c310:	68ba      	ldr	r2, [r7, #8]
   1c312:	4912      	ldr	r1, [pc, #72]	; (1c35c <mp_bytecode_print_str+0xdf8>)
   1c314:	480c      	ldr	r0, [pc, #48]	; (1c348 <mp_bytecode_print_str+0xde4>)
   1c316:	f7e5 feab 	bl	2070 <mp_printf>
            break;
   1c31a:	e00e      	b.n	1c33a <mp_bytecode_print_str+0xdd6>
                printf("code %p, byte code 0x%02x not implemented\n", ip, ip[-1]);
   1c31c:	687b      	ldr	r3, [r7, #4]
   1c31e:	3b01      	subs	r3, #1
   1c320:	781b      	ldrb	r3, [r3, #0]
   1c322:	687a      	ldr	r2, [r7, #4]
   1c324:	490e      	ldr	r1, [pc, #56]	; (1c360 <mp_bytecode_print_str+0xdfc>)
   1c326:	4808      	ldr	r0, [pc, #32]	; (1c348 <mp_bytecode_print_str+0xde4>)
   1c328:	f7e5 fea2 	bl	2070 <mp_printf>
                assert(0);
   1c32c:	4b0d      	ldr	r3, [pc, #52]	; (1c364 <mp_bytecode_print_str+0xe00>)
   1c32e:	4a0e      	ldr	r2, [pc, #56]	; (1c368 <mp_bytecode_print_str+0xe04>)
   1c330:	f240 2125 	movw	r1, #549	; 0x225
   1c334:	480d      	ldr	r0, [pc, #52]	; (1c36c <mp_bytecode_print_str+0xe08>)
   1c336:	f000 fdd3 	bl	1cee0 <__assert_func>
    }

    return ip;
   1c33a:	687b      	ldr	r3, [r7, #4]
}
   1c33c:	4618      	mov	r0, r3
   1c33e:	3720      	adds	r7, #32
   1c340:	46bd      	mov	sp, r7
   1c342:	bd80      	pop	{r7, pc}
   1c344:	00026c60 	.word	0x00026c60
   1c348:	000210cc 	.word	0x000210cc
   1c34c:	000270ec 	.word	0x000270ec
   1c350:	000270fc 	.word	0x000270fc
   1c354:	0002710c 	.word	0x0002710c
   1c358:	00025cec 	.word	0x00025cec
   1c35c:	00027118 	.word	0x00027118
   1c360:	00027128 	.word	0x00027128
   1c364:	00027154 	.word	0x00027154
   1c368:	00027174 	.word	0x00027174
   1c36c:	00027158 	.word	0x00027158

0001c370 <mp_bytecode_print2>:

void mp_bytecode_print2(const byte *ip, size_t len, const mp_uint_t *const_table) {
   1c370:	b580      	push	{r7, lr}
   1c372:	b084      	sub	sp, #16
   1c374:	af00      	add	r7, sp, #0
   1c376:	60f8      	str	r0, [r7, #12]
   1c378:	60b9      	str	r1, [r7, #8]
   1c37a:	607a      	str	r2, [r7, #4]
    mp_showbc_code_start = ip;
   1c37c:	4a11      	ldr	r2, [pc, #68]	; (1c3c4 <mp_bytecode_print2+0x54>)
   1c37e:	68fb      	ldr	r3, [r7, #12]
   1c380:	6013      	str	r3, [r2, #0]
    mp_showbc_const_table = const_table;
   1c382:	4a11      	ldr	r2, [pc, #68]	; (1c3c8 <mp_bytecode_print2+0x58>)
   1c384:	687b      	ldr	r3, [r7, #4]
   1c386:	6013      	str	r3, [r2, #0]
    while (ip < len + mp_showbc_code_start) {
   1c388:	e010      	b.n	1c3ac <mp_bytecode_print2+0x3c>
        printf("%02u ", (uint)(ip - mp_showbc_code_start));
   1c38a:	68fb      	ldr	r3, [r7, #12]
   1c38c:	4a0d      	ldr	r2, [pc, #52]	; (1c3c4 <mp_bytecode_print2+0x54>)
   1c38e:	6812      	ldr	r2, [r2, #0]
   1c390:	1a9b      	subs	r3, r3, r2
   1c392:	461a      	mov	r2, r3
   1c394:	490d      	ldr	r1, [pc, #52]	; (1c3cc <mp_bytecode_print2+0x5c>)
   1c396:	480e      	ldr	r0, [pc, #56]	; (1c3d0 <mp_bytecode_print2+0x60>)
   1c398:	f7e5 fe6a 	bl	2070 <mp_printf>
        ip = mp_bytecode_print_str(ip);
   1c39c:	68f8      	ldr	r0, [r7, #12]
   1c39e:	f7ff f8e1 	bl	1b564 <mp_bytecode_print_str>
   1c3a2:	60f8      	str	r0, [r7, #12]
        printf("\n");
   1c3a4:	490b      	ldr	r1, [pc, #44]	; (1c3d4 <mp_bytecode_print2+0x64>)
   1c3a6:	480a      	ldr	r0, [pc, #40]	; (1c3d0 <mp_bytecode_print2+0x60>)
   1c3a8:	f7e5 fe62 	bl	2070 <mp_printf>
    while (ip < len + mp_showbc_code_start) {
   1c3ac:	4b05      	ldr	r3, [pc, #20]	; (1c3c4 <mp_bytecode_print2+0x54>)
   1c3ae:	681a      	ldr	r2, [r3, #0]
   1c3b0:	68bb      	ldr	r3, [r7, #8]
   1c3b2:	441a      	add	r2, r3
   1c3b4:	68fb      	ldr	r3, [r7, #12]
   1c3b6:	429a      	cmp	r2, r3
   1c3b8:	d8e7      	bhi.n	1c38a <mp_bytecode_print2+0x1a>
    }
}
   1c3ba:	bf00      	nop
   1c3bc:	3710      	adds	r7, #16
   1c3be:	46bd      	mov	sp, r7
   1c3c0:	bd80      	pop	{r7, pc}
   1c3c2:	bf00      	nop
   1c3c4:	20001424 	.word	0x20001424
   1c3c8:	20001420 	.word	0x20001420
   1c3cc:	0002716c 	.word	0x0002716c
   1c3d0:	000210cc 	.word	0x000210cc
   1c3d4:	00026bc8 	.word	0x00026bc8

0001c3d8 <str_startswith_word>:
#include "py/builtin.h"
#include "py/repl.h"

#if MICROPY_HELPER_REPL

STATIC bool str_startswith_word(const char *str, const char *head) {
   1c3d8:	b580      	push	{r7, lr}
   1c3da:	b084      	sub	sp, #16
   1c3dc:	af00      	add	r7, sp, #0
   1c3de:	6078      	str	r0, [r7, #4]
   1c3e0:	6039      	str	r1, [r7, #0]
    size_t i;
    for (i = 0; str[i] && head[i]; i++) {
   1c3e2:	2300      	movs	r3, #0
   1c3e4:	60fb      	str	r3, [r7, #12]
   1c3e6:	e00e      	b.n	1c406 <str_startswith_word+0x2e>
        if (str[i] != head[i]) {
   1c3e8:	687a      	ldr	r2, [r7, #4]
   1c3ea:	68fb      	ldr	r3, [r7, #12]
   1c3ec:	4413      	add	r3, r2
   1c3ee:	781a      	ldrb	r2, [r3, #0]
   1c3f0:	6839      	ldr	r1, [r7, #0]
   1c3f2:	68fb      	ldr	r3, [r7, #12]
   1c3f4:	440b      	add	r3, r1
   1c3f6:	781b      	ldrb	r3, [r3, #0]
   1c3f8:	429a      	cmp	r2, r3
   1c3fa:	d001      	beq.n	1c400 <str_startswith_word+0x28>
            return false;
   1c3fc:	2300      	movs	r3, #0
   1c3fe:	e02d      	b.n	1c45c <str_startswith_word+0x84>
    for (i = 0; str[i] && head[i]; i++) {
   1c400:	68fb      	ldr	r3, [r7, #12]
   1c402:	3301      	adds	r3, #1
   1c404:	60fb      	str	r3, [r7, #12]
   1c406:	687a      	ldr	r2, [r7, #4]
   1c408:	68fb      	ldr	r3, [r7, #12]
   1c40a:	4413      	add	r3, r2
   1c40c:	781b      	ldrb	r3, [r3, #0]
   1c40e:	2b00      	cmp	r3, #0
   1c410:	d005      	beq.n	1c41e <str_startswith_word+0x46>
   1c412:	683a      	ldr	r2, [r7, #0]
   1c414:	68fb      	ldr	r3, [r7, #12]
   1c416:	4413      	add	r3, r2
   1c418:	781b      	ldrb	r3, [r3, #0]
   1c41a:	2b00      	cmp	r3, #0
   1c41c:	d1e4      	bne.n	1c3e8 <str_startswith_word+0x10>
        }
    }
    return head[i] == '\0' && (str[i] == '\0' || !unichar_isident(str[i]));
   1c41e:	683a      	ldr	r2, [r7, #0]
   1c420:	68fb      	ldr	r3, [r7, #12]
   1c422:	4413      	add	r3, r2
   1c424:	781b      	ldrb	r3, [r3, #0]
   1c426:	2b00      	cmp	r3, #0
   1c428:	d114      	bne.n	1c454 <str_startswith_word+0x7c>
   1c42a:	687a      	ldr	r2, [r7, #4]
   1c42c:	68fb      	ldr	r3, [r7, #12]
   1c42e:	4413      	add	r3, r2
   1c430:	781b      	ldrb	r3, [r3, #0]
   1c432:	2b00      	cmp	r3, #0
   1c434:	d00c      	beq.n	1c450 <str_startswith_word+0x78>
   1c436:	687a      	ldr	r2, [r7, #4]
   1c438:	68fb      	ldr	r3, [r7, #12]
   1c43a:	4413      	add	r3, r2
   1c43c:	781b      	ldrb	r3, [r3, #0]
   1c43e:	4618      	mov	r0, r3
   1c440:	f7e6 f8fc 	bl	263c <unichar_isident>
   1c444:	4603      	mov	r3, r0
   1c446:	f083 0301 	eor.w	r3, r3, #1
   1c44a:	b2db      	uxtb	r3, r3
   1c44c:	2b00      	cmp	r3, #0
   1c44e:	d001      	beq.n	1c454 <str_startswith_word+0x7c>
   1c450:	2301      	movs	r3, #1
   1c452:	e000      	b.n	1c456 <str_startswith_word+0x7e>
   1c454:	2300      	movs	r3, #0
   1c456:	f003 0301 	and.w	r3, r3, #1
   1c45a:	b2db      	uxtb	r3, r3
}
   1c45c:	4618      	mov	r0, r3
   1c45e:	3710      	adds	r7, #16
   1c460:	46bd      	mov	sp, r7
   1c462:	bd80      	pop	{r7, pc}

0001c464 <mp_repl_continue_with_input>:

bool mp_repl_continue_with_input(const char *input) {
   1c464:	b580      	push	{r7, lr}
   1c466:	b088      	sub	sp, #32
   1c468:	af00      	add	r7, sp, #0
   1c46a:	6078      	str	r0, [r7, #4]
    // check for blank input
    if (input[0] == '\0') {
   1c46c:	687b      	ldr	r3, [r7, #4]
   1c46e:	781b      	ldrb	r3, [r3, #0]
   1c470:	2b00      	cmp	r3, #0
   1c472:	d101      	bne.n	1c478 <mp_repl_continue_with_input+0x14>
        return false;
   1c474:	2300      	movs	r3, #0
   1c476:	e10c      	b.n	1c692 <mp_repl_continue_with_input+0x22e>
    }

    // check if input starts with a certain keyword
    bool starts_with_compound_keyword =
           input[0] == '@'
   1c478:	687b      	ldr	r3, [r7, #4]
   1c47a:	781b      	ldrb	r3, [r3, #0]
        || str_startswith_word(input, "while")
        || str_startswith_word(input, "for")
        || str_startswith_word(input, "try")
        || str_startswith_word(input, "with")
        || str_startswith_word(input, "def")
        || str_startswith_word(input, "class")
   1c47c:	2b40      	cmp	r3, #64	; 0x40
   1c47e:	d030      	beq.n	1c4e2 <mp_repl_continue_with_input+0x7e>
        || str_startswith_word(input, "if")
   1c480:	4986      	ldr	r1, [pc, #536]	; (1c69c <mp_repl_continue_with_input+0x238>)
   1c482:	6878      	ldr	r0, [r7, #4]
   1c484:	f7ff ffa8 	bl	1c3d8 <str_startswith_word>
   1c488:	4603      	mov	r3, r0
   1c48a:	2b00      	cmp	r3, #0
   1c48c:	d129      	bne.n	1c4e2 <mp_repl_continue_with_input+0x7e>
        || str_startswith_word(input, "while")
   1c48e:	4984      	ldr	r1, [pc, #528]	; (1c6a0 <mp_repl_continue_with_input+0x23c>)
   1c490:	6878      	ldr	r0, [r7, #4]
   1c492:	f7ff ffa1 	bl	1c3d8 <str_startswith_word>
   1c496:	4603      	mov	r3, r0
   1c498:	2b00      	cmp	r3, #0
   1c49a:	d122      	bne.n	1c4e2 <mp_repl_continue_with_input+0x7e>
        || str_startswith_word(input, "for")
   1c49c:	4981      	ldr	r1, [pc, #516]	; (1c6a4 <mp_repl_continue_with_input+0x240>)
   1c49e:	6878      	ldr	r0, [r7, #4]
   1c4a0:	f7ff ff9a 	bl	1c3d8 <str_startswith_word>
   1c4a4:	4603      	mov	r3, r0
   1c4a6:	2b00      	cmp	r3, #0
   1c4a8:	d11b      	bne.n	1c4e2 <mp_repl_continue_with_input+0x7e>
        || str_startswith_word(input, "try")
   1c4aa:	497f      	ldr	r1, [pc, #508]	; (1c6a8 <mp_repl_continue_with_input+0x244>)
   1c4ac:	6878      	ldr	r0, [r7, #4]
   1c4ae:	f7ff ff93 	bl	1c3d8 <str_startswith_word>
   1c4b2:	4603      	mov	r3, r0
   1c4b4:	2b00      	cmp	r3, #0
   1c4b6:	d114      	bne.n	1c4e2 <mp_repl_continue_with_input+0x7e>
        || str_startswith_word(input, "with")
   1c4b8:	497c      	ldr	r1, [pc, #496]	; (1c6ac <mp_repl_continue_with_input+0x248>)
   1c4ba:	6878      	ldr	r0, [r7, #4]
   1c4bc:	f7ff ff8c 	bl	1c3d8 <str_startswith_word>
   1c4c0:	4603      	mov	r3, r0
   1c4c2:	2b00      	cmp	r3, #0
   1c4c4:	d10d      	bne.n	1c4e2 <mp_repl_continue_with_input+0x7e>
        || str_startswith_word(input, "def")
   1c4c6:	497a      	ldr	r1, [pc, #488]	; (1c6b0 <mp_repl_continue_with_input+0x24c>)
   1c4c8:	6878      	ldr	r0, [r7, #4]
   1c4ca:	f7ff ff85 	bl	1c3d8 <str_startswith_word>
   1c4ce:	4603      	mov	r3, r0
   1c4d0:	2b00      	cmp	r3, #0
   1c4d2:	d106      	bne.n	1c4e2 <mp_repl_continue_with_input+0x7e>
        || str_startswith_word(input, "class")
   1c4d4:	4977      	ldr	r1, [pc, #476]	; (1c6b4 <mp_repl_continue_with_input+0x250>)
   1c4d6:	6878      	ldr	r0, [r7, #4]
   1c4d8:	f7ff ff7e 	bl	1c3d8 <str_startswith_word>
   1c4dc:	4603      	mov	r3, r0
   1c4de:	2b00      	cmp	r3, #0
   1c4e0:	d001      	beq.n	1c4e6 <mp_repl_continue_with_input+0x82>
   1c4e2:	2301      	movs	r3, #1
   1c4e4:	e000      	b.n	1c4e8 <mp_repl_continue_with_input+0x84>
   1c4e6:	2300      	movs	r3, #0
    bool starts_with_compound_keyword =
   1c4e8:	72fb      	strb	r3, [r7, #11]
   1c4ea:	7afb      	ldrb	r3, [r7, #11]
   1c4ec:	f003 0301 	and.w	r3, r3, #1
   1c4f0:	72fb      	strb	r3, [r7, #11]
    #define Q_NONE (0)
    #define Q_1_SINGLE (1)
    #define Q_1_DOUBLE (2)
    #define Q_3_SINGLE (3)
    #define Q_3_DOUBLE (4)
    int n_paren = 0;
   1c4f2:	2300      	movs	r3, #0
   1c4f4:	61fb      	str	r3, [r7, #28]
    int n_brack = 0;
   1c4f6:	2300      	movs	r3, #0
   1c4f8:	61bb      	str	r3, [r7, #24]
    int n_brace = 0;
   1c4fa:	2300      	movs	r3, #0
   1c4fc:	617b      	str	r3, [r7, #20]
    int in_quote = Q_NONE;
   1c4fe:	2300      	movs	r3, #0
   1c500:	613b      	str	r3, [r7, #16]
    const char *i;
    for (i = input; *i; i++) {
   1c502:	687b      	ldr	r3, [r7, #4]
   1c504:	60fb      	str	r3, [r7, #12]
   1c506:	e097      	b.n	1c638 <mp_repl_continue_with_input+0x1d4>
        if (*i == '\'') {
   1c508:	68fb      	ldr	r3, [r7, #12]
   1c50a:	781b      	ldrb	r3, [r3, #0]
   1c50c:	2b27      	cmp	r3, #39	; 0x27
   1c50e:	d122      	bne.n	1c556 <mp_repl_continue_with_input+0xf2>
            if ((in_quote == Q_NONE || in_quote == Q_3_SINGLE) && i[1] == '\'' && i[2] == '\'') {
   1c510:	693b      	ldr	r3, [r7, #16]
   1c512:	2b00      	cmp	r3, #0
   1c514:	d002      	beq.n	1c51c <mp_repl_continue_with_input+0xb8>
   1c516:	693b      	ldr	r3, [r7, #16]
   1c518:	2b03      	cmp	r3, #3
   1c51a:	d111      	bne.n	1c540 <mp_repl_continue_with_input+0xdc>
   1c51c:	68fb      	ldr	r3, [r7, #12]
   1c51e:	3301      	adds	r3, #1
   1c520:	781b      	ldrb	r3, [r3, #0]
   1c522:	2b27      	cmp	r3, #39	; 0x27
   1c524:	d10c      	bne.n	1c540 <mp_repl_continue_with_input+0xdc>
   1c526:	68fb      	ldr	r3, [r7, #12]
   1c528:	3302      	adds	r3, #2
   1c52a:	781b      	ldrb	r3, [r3, #0]
   1c52c:	2b27      	cmp	r3, #39	; 0x27
   1c52e:	d107      	bne.n	1c540 <mp_repl_continue_with_input+0xdc>
                i += 2;
   1c530:	68fb      	ldr	r3, [r7, #12]
   1c532:	3302      	adds	r3, #2
   1c534:	60fb      	str	r3, [r7, #12]
                in_quote = Q_3_SINGLE - in_quote;
   1c536:	693b      	ldr	r3, [r7, #16]
   1c538:	f1c3 0303 	rsb	r3, r3, #3
   1c53c:	613b      	str	r3, [r7, #16]
   1c53e:	e078      	b.n	1c632 <mp_repl_continue_with_input+0x1ce>
            } else if (in_quote == Q_NONE || in_quote == Q_1_SINGLE) {
   1c540:	693b      	ldr	r3, [r7, #16]
   1c542:	2b00      	cmp	r3, #0
   1c544:	d002      	beq.n	1c54c <mp_repl_continue_with_input+0xe8>
   1c546:	693b      	ldr	r3, [r7, #16]
   1c548:	2b01      	cmp	r3, #1
   1c54a:	d172      	bne.n	1c632 <mp_repl_continue_with_input+0x1ce>
                in_quote = Q_1_SINGLE - in_quote;
   1c54c:	693b      	ldr	r3, [r7, #16]
   1c54e:	f1c3 0301 	rsb	r3, r3, #1
   1c552:	613b      	str	r3, [r7, #16]
   1c554:	e06d      	b.n	1c632 <mp_repl_continue_with_input+0x1ce>
            }
        } else if (*i == '"') {
   1c556:	68fb      	ldr	r3, [r7, #12]
   1c558:	781b      	ldrb	r3, [r3, #0]
   1c55a:	2b22      	cmp	r3, #34	; 0x22
   1c55c:	d122      	bne.n	1c5a4 <mp_repl_continue_with_input+0x140>
            if ((in_quote == Q_NONE || in_quote == Q_3_DOUBLE) && i[1] == '"' && i[2] == '"') {
   1c55e:	693b      	ldr	r3, [r7, #16]
   1c560:	2b00      	cmp	r3, #0
   1c562:	d002      	beq.n	1c56a <mp_repl_continue_with_input+0x106>
   1c564:	693b      	ldr	r3, [r7, #16]
   1c566:	2b04      	cmp	r3, #4
   1c568:	d111      	bne.n	1c58e <mp_repl_continue_with_input+0x12a>
   1c56a:	68fb      	ldr	r3, [r7, #12]
   1c56c:	3301      	adds	r3, #1
   1c56e:	781b      	ldrb	r3, [r3, #0]
   1c570:	2b22      	cmp	r3, #34	; 0x22
   1c572:	d10c      	bne.n	1c58e <mp_repl_continue_with_input+0x12a>
   1c574:	68fb      	ldr	r3, [r7, #12]
   1c576:	3302      	adds	r3, #2
   1c578:	781b      	ldrb	r3, [r3, #0]
   1c57a:	2b22      	cmp	r3, #34	; 0x22
   1c57c:	d107      	bne.n	1c58e <mp_repl_continue_with_input+0x12a>
                i += 2;
   1c57e:	68fb      	ldr	r3, [r7, #12]
   1c580:	3302      	adds	r3, #2
   1c582:	60fb      	str	r3, [r7, #12]
                in_quote = Q_3_DOUBLE - in_quote;
   1c584:	693b      	ldr	r3, [r7, #16]
   1c586:	f1c3 0304 	rsb	r3, r3, #4
   1c58a:	613b      	str	r3, [r7, #16]
   1c58c:	e051      	b.n	1c632 <mp_repl_continue_with_input+0x1ce>
            } else if (in_quote == Q_NONE || in_quote == Q_1_DOUBLE) {
   1c58e:	693b      	ldr	r3, [r7, #16]
   1c590:	2b00      	cmp	r3, #0
   1c592:	d002      	beq.n	1c59a <mp_repl_continue_with_input+0x136>
   1c594:	693b      	ldr	r3, [r7, #16]
   1c596:	2b02      	cmp	r3, #2
   1c598:	d14b      	bne.n	1c632 <mp_repl_continue_with_input+0x1ce>
                in_quote = Q_1_DOUBLE - in_quote;
   1c59a:	693b      	ldr	r3, [r7, #16]
   1c59c:	f1c3 0302 	rsb	r3, r3, #2
   1c5a0:	613b      	str	r3, [r7, #16]
   1c5a2:	e046      	b.n	1c632 <mp_repl_continue_with_input+0x1ce>
            }
        } else if (*i == '\\' && (i[1] == '\'' || i[1] == '"' || i[1] == '\\')) {
   1c5a4:	68fb      	ldr	r3, [r7, #12]
   1c5a6:	781b      	ldrb	r3, [r3, #0]
   1c5a8:	2b5c      	cmp	r3, #92	; 0x5c
   1c5aa:	d115      	bne.n	1c5d8 <mp_repl_continue_with_input+0x174>
   1c5ac:	68fb      	ldr	r3, [r7, #12]
   1c5ae:	3301      	adds	r3, #1
   1c5b0:	781b      	ldrb	r3, [r3, #0]
   1c5b2:	2b27      	cmp	r3, #39	; 0x27
   1c5b4:	d009      	beq.n	1c5ca <mp_repl_continue_with_input+0x166>
   1c5b6:	68fb      	ldr	r3, [r7, #12]
   1c5b8:	3301      	adds	r3, #1
   1c5ba:	781b      	ldrb	r3, [r3, #0]
   1c5bc:	2b22      	cmp	r3, #34	; 0x22
   1c5be:	d004      	beq.n	1c5ca <mp_repl_continue_with_input+0x166>
   1c5c0:	68fb      	ldr	r3, [r7, #12]
   1c5c2:	3301      	adds	r3, #1
   1c5c4:	781b      	ldrb	r3, [r3, #0]
   1c5c6:	2b5c      	cmp	r3, #92	; 0x5c
   1c5c8:	d106      	bne.n	1c5d8 <mp_repl_continue_with_input+0x174>
            if (in_quote != Q_NONE) {
   1c5ca:	693b      	ldr	r3, [r7, #16]
   1c5cc:	2b00      	cmp	r3, #0
   1c5ce:	d030      	beq.n	1c632 <mp_repl_continue_with_input+0x1ce>
                i++;
   1c5d0:	68fb      	ldr	r3, [r7, #12]
   1c5d2:	3301      	adds	r3, #1
   1c5d4:	60fb      	str	r3, [r7, #12]
            if (in_quote != Q_NONE) {
   1c5d6:	e02c      	b.n	1c632 <mp_repl_continue_with_input+0x1ce>
            }
        } else if (in_quote == Q_NONE) {
   1c5d8:	693b      	ldr	r3, [r7, #16]
   1c5da:	2b00      	cmp	r3, #0
   1c5dc:	d129      	bne.n	1c632 <mp_repl_continue_with_input+0x1ce>
            switch (*i) {
   1c5de:	68fb      	ldr	r3, [r7, #12]
   1c5e0:	781b      	ldrb	r3, [r3, #0]
   1c5e2:	2b5b      	cmp	r3, #91	; 0x5b
   1c5e4:	d015      	beq.n	1c612 <mp_repl_continue_with_input+0x1ae>
   1c5e6:	2b5b      	cmp	r3, #91	; 0x5b
   1c5e8:	dc04      	bgt.n	1c5f4 <mp_repl_continue_with_input+0x190>
   1c5ea:	2b28      	cmp	r3, #40	; 0x28
   1c5ec:	d009      	beq.n	1c602 <mp_repl_continue_with_input+0x19e>
   1c5ee:	2b29      	cmp	r3, #41	; 0x29
   1c5f0:	d00b      	beq.n	1c60a <mp_repl_continue_with_input+0x1a6>
                case ')': n_paren -= 1; break;
                case '[': n_brack += 1; break;
                case ']': n_brack -= 1; break;
                case '{': n_brace += 1; break;
                case '}': n_brace -= 1; break;
                default: break;
   1c5f2:	e01e      	b.n	1c632 <mp_repl_continue_with_input+0x1ce>
            switch (*i) {
   1c5f4:	2b7b      	cmp	r3, #123	; 0x7b
   1c5f6:	d014      	beq.n	1c622 <mp_repl_continue_with_input+0x1be>
   1c5f8:	2b7d      	cmp	r3, #125	; 0x7d
   1c5fa:	d016      	beq.n	1c62a <mp_repl_continue_with_input+0x1c6>
   1c5fc:	2b5d      	cmp	r3, #93	; 0x5d
   1c5fe:	d00c      	beq.n	1c61a <mp_repl_continue_with_input+0x1b6>
                default: break;
   1c600:	e017      	b.n	1c632 <mp_repl_continue_with_input+0x1ce>
                case '(': n_paren += 1; break;
   1c602:	69fb      	ldr	r3, [r7, #28]
   1c604:	3301      	adds	r3, #1
   1c606:	61fb      	str	r3, [r7, #28]
   1c608:	e013      	b.n	1c632 <mp_repl_continue_with_input+0x1ce>
                case ')': n_paren -= 1; break;
   1c60a:	69fb      	ldr	r3, [r7, #28]
   1c60c:	3b01      	subs	r3, #1
   1c60e:	61fb      	str	r3, [r7, #28]
   1c610:	e00f      	b.n	1c632 <mp_repl_continue_with_input+0x1ce>
                case '[': n_brack += 1; break;
   1c612:	69bb      	ldr	r3, [r7, #24]
   1c614:	3301      	adds	r3, #1
   1c616:	61bb      	str	r3, [r7, #24]
   1c618:	e00b      	b.n	1c632 <mp_repl_continue_with_input+0x1ce>
                case ']': n_brack -= 1; break;
   1c61a:	69bb      	ldr	r3, [r7, #24]
   1c61c:	3b01      	subs	r3, #1
   1c61e:	61bb      	str	r3, [r7, #24]
   1c620:	e007      	b.n	1c632 <mp_repl_continue_with_input+0x1ce>
                case '{': n_brace += 1; break;
   1c622:	697b      	ldr	r3, [r7, #20]
   1c624:	3301      	adds	r3, #1
   1c626:	617b      	str	r3, [r7, #20]
   1c628:	e003      	b.n	1c632 <mp_repl_continue_with_input+0x1ce>
                case '}': n_brace -= 1; break;
   1c62a:	697b      	ldr	r3, [r7, #20]
   1c62c:	3b01      	subs	r3, #1
   1c62e:	617b      	str	r3, [r7, #20]
   1c630:	bf00      	nop
    for (i = input; *i; i++) {
   1c632:	68fb      	ldr	r3, [r7, #12]
   1c634:	3301      	adds	r3, #1
   1c636:	60fb      	str	r3, [r7, #12]
   1c638:	68fb      	ldr	r3, [r7, #12]
   1c63a:	781b      	ldrb	r3, [r3, #0]
   1c63c:	2b00      	cmp	r3, #0
   1c63e:	f47f af63 	bne.w	1c508 <mp_repl_continue_with_input+0xa4>
            }
        }
    }

    // continue if unmatched 3-quotes
    if (in_quote == Q_3_SINGLE || in_quote == Q_3_DOUBLE) {
   1c642:	693b      	ldr	r3, [r7, #16]
   1c644:	2b03      	cmp	r3, #3
   1c646:	d002      	beq.n	1c64e <mp_repl_continue_with_input+0x1ea>
   1c648:	693b      	ldr	r3, [r7, #16]
   1c64a:	2b04      	cmp	r3, #4
   1c64c:	d101      	bne.n	1c652 <mp_repl_continue_with_input+0x1ee>
        return true;
   1c64e:	2301      	movs	r3, #1
   1c650:	e01f      	b.n	1c692 <mp_repl_continue_with_input+0x22e>
    }

    // continue if unmatched brackets, but only if not in a 1-quote
    if ((n_paren > 0 || n_brack > 0 || n_brace > 0) && in_quote == Q_NONE) {
   1c652:	69fb      	ldr	r3, [r7, #28]
   1c654:	2b00      	cmp	r3, #0
   1c656:	dc05      	bgt.n	1c664 <mp_repl_continue_with_input+0x200>
   1c658:	69bb      	ldr	r3, [r7, #24]
   1c65a:	2b00      	cmp	r3, #0
   1c65c:	dc02      	bgt.n	1c664 <mp_repl_continue_with_input+0x200>
   1c65e:	697b      	ldr	r3, [r7, #20]
   1c660:	2b00      	cmp	r3, #0
   1c662:	dd04      	ble.n	1c66e <mp_repl_continue_with_input+0x20a>
   1c664:	693b      	ldr	r3, [r7, #16]
   1c666:	2b00      	cmp	r3, #0
   1c668:	d101      	bne.n	1c66e <mp_repl_continue_with_input+0x20a>
        return true;
   1c66a:	2301      	movs	r3, #1
   1c66c:	e011      	b.n	1c692 <mp_repl_continue_with_input+0x22e>
    }

    // continue if last character was backslash (for line continuation)
    if (i[-1] == '\\') {
   1c66e:	68fb      	ldr	r3, [r7, #12]
   1c670:	3b01      	subs	r3, #1
   1c672:	781b      	ldrb	r3, [r3, #0]
   1c674:	2b5c      	cmp	r3, #92	; 0x5c
   1c676:	d101      	bne.n	1c67c <mp_repl_continue_with_input+0x218>
        return true;
   1c678:	2301      	movs	r3, #1
   1c67a:	e00a      	b.n	1c692 <mp_repl_continue_with_input+0x22e>
    }

    // continue if compound keyword and last line was not empty
    if (starts_with_compound_keyword && i[-1] != '\n') {
   1c67c:	7afb      	ldrb	r3, [r7, #11]
   1c67e:	2b00      	cmp	r3, #0
   1c680:	d006      	beq.n	1c690 <mp_repl_continue_with_input+0x22c>
   1c682:	68fb      	ldr	r3, [r7, #12]
   1c684:	3b01      	subs	r3, #1
   1c686:	781b      	ldrb	r3, [r3, #0]
   1c688:	2b0a      	cmp	r3, #10
   1c68a:	d001      	beq.n	1c690 <mp_repl_continue_with_input+0x22c>
        return true;
   1c68c:	2301      	movs	r3, #1
   1c68e:	e000      	b.n	1c692 <mp_repl_continue_with_input+0x22e>
    }

    // otherwise, don't continue
    return false;
   1c690:	2300      	movs	r3, #0
}
   1c692:	4618      	mov	r0, r3
   1c694:	3720      	adds	r7, #32
   1c696:	46bd      	mov	sp, r7
   1c698:	bd80      	pop	{r7, pc}
   1c69a:	bf00      	nop
   1c69c:	0002718c 	.word	0x0002718c
   1c6a0:	00027190 	.word	0x00027190
   1c6a4:	00027198 	.word	0x00027198
   1c6a8:	0002719c 	.word	0x0002719c
   1c6ac:	000271a0 	.word	0x000271a0
   1c6b0:	000271a8 	.word	0x000271a8
   1c6b4:	000271ac 	.word	0x000271ac

0001c6b8 <mp_repl_autocomplete>:

size_t mp_repl_autocomplete(const char *str, size_t len, const mp_print_t *print, const char **compl_str) {
   1c6b8:	b580      	push	{r7, lr}
   1c6ba:	b09c      	sub	sp, #112	; 0x70
   1c6bc:	af00      	add	r7, sp, #0
   1c6be:	60f8      	str	r0, [r7, #12]
   1c6c0:	60b9      	str	r1, [r7, #8]
   1c6c2:	607a      	str	r2, [r7, #4]
   1c6c4:	603b      	str	r3, [r7, #0]
    // scan backwards to find start of "a.b.c" chain
    const char *org_str = str;
   1c6c6:	68fb      	ldr	r3, [r7, #12]
   1c6c8:	63fb      	str	r3, [r7, #60]	; 0x3c
    const char *top = str + len;
   1c6ca:	68fa      	ldr	r2, [r7, #12]
   1c6cc:	68bb      	ldr	r3, [r7, #8]
   1c6ce:	4413      	add	r3, r2
   1c6d0:	63bb      	str	r3, [r7, #56]	; 0x38
    for (const char *s = top; --s >= str;) {
   1c6d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1c6d4:	66fb      	str	r3, [r7, #108]	; 0x6c
   1c6d6:	e023      	b.n	1c720 <mp_repl_autocomplete+0x68>
        if (!(unichar_isalpha(*s) || unichar_isdigit(*s) || *s == '_' || *s == '.')) {
   1c6d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   1c6da:	781b      	ldrb	r3, [r3, #0]
   1c6dc:	4618      	mov	r0, r3
   1c6de:	f7e5 ff53 	bl	2588 <unichar_isalpha>
   1c6e2:	4603      	mov	r3, r0
   1c6e4:	f083 0301 	eor.w	r3, r3, #1
   1c6e8:	b2db      	uxtb	r3, r3
   1c6ea:	2b00      	cmp	r3, #0
   1c6ec:	d018      	beq.n	1c720 <mp_repl_autocomplete+0x68>
   1c6ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   1c6f0:	781b      	ldrb	r3, [r3, #0]
   1c6f2:	4618      	mov	r0, r3
   1c6f4:	f7e5 ff66 	bl	25c4 <unichar_isdigit>
   1c6f8:	4603      	mov	r3, r0
   1c6fa:	f083 0301 	eor.w	r3, r3, #1
   1c6fe:	b2db      	uxtb	r3, r3
   1c700:	2b00      	cmp	r3, #0
   1c702:	d00d      	beq.n	1c720 <mp_repl_autocomplete+0x68>
   1c704:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   1c706:	781b      	ldrb	r3, [r3, #0]
   1c708:	2b5f      	cmp	r3, #95	; 0x5f
   1c70a:	d009      	beq.n	1c720 <mp_repl_autocomplete+0x68>
   1c70c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   1c70e:	781b      	ldrb	r3, [r3, #0]
   1c710:	2b2e      	cmp	r3, #46	; 0x2e
   1c712:	d005      	beq.n	1c720 <mp_repl_autocomplete+0x68>
            ++s;
   1c714:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   1c716:	3301      	adds	r3, #1
   1c718:	66fb      	str	r3, [r7, #108]	; 0x6c
            str = s;
   1c71a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   1c71c:	60fb      	str	r3, [r7, #12]
            break;
   1c71e:	e006      	b.n	1c72e <mp_repl_autocomplete+0x76>
    for (const char *s = top; --s >= str;) {
   1c720:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   1c722:	3b01      	subs	r3, #1
   1c724:	66fb      	str	r3, [r7, #108]	; 0x6c
   1c726:	6efa      	ldr	r2, [r7, #108]	; 0x6c
   1c728:	68fb      	ldr	r3, [r7, #12]
   1c72a:	429a      	cmp	r2, r3
   1c72c:	d2d4      	bcs.n	1c6d8 <mp_repl_autocomplete+0x20>
        }
    }

    size_t nqstr = QSTR_TOTAL();
   1c72e:	4b95      	ldr	r3, [pc, #596]	; (1c984 <mp_repl_autocomplete+0x2cc>)
   1c730:	691b      	ldr	r3, [r3, #16]
   1c732:	685a      	ldr	r2, [r3, #4]
   1c734:	4b93      	ldr	r3, [pc, #588]	; (1c984 <mp_repl_autocomplete+0x2cc>)
   1c736:	691b      	ldr	r3, [r3, #16]
   1c738:	68db      	ldr	r3, [r3, #12]
   1c73a:	4413      	add	r3, r2
   1c73c:	637b      	str	r3, [r7, #52]	; 0x34

    // begin search in outer global dict which is accessed from __main__
    mp_obj_t obj = MP_OBJ_FROM_PTR(&mp_module___main__);
   1c73e:	4b92      	ldr	r3, [pc, #584]	; (1c988 <mp_repl_autocomplete+0x2d0>)
   1c740:	66bb      	str	r3, [r7, #104]	; 0x68
    mp_obj_t dest[2];

    for (;;) {
        // get next word in string to complete
        const char *s_start = str;
   1c742:	68fb      	ldr	r3, [r7, #12]
   1c744:	633b      	str	r3, [r7, #48]	; 0x30
        while (str < top && *str != '.') {
   1c746:	e002      	b.n	1c74e <mp_repl_autocomplete+0x96>
            ++str;
   1c748:	68fb      	ldr	r3, [r7, #12]
   1c74a:	3301      	adds	r3, #1
   1c74c:	60fb      	str	r3, [r7, #12]
        while (str < top && *str != '.') {
   1c74e:	68fa      	ldr	r2, [r7, #12]
   1c750:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1c752:	429a      	cmp	r2, r3
   1c754:	d203      	bcs.n	1c75e <mp_repl_autocomplete+0xa6>
   1c756:	68fb      	ldr	r3, [r7, #12]
   1c758:	781b      	ldrb	r3, [r3, #0]
   1c75a:	2b2e      	cmp	r3, #46	; 0x2e
   1c75c:	d1f4      	bne.n	1c748 <mp_repl_autocomplete+0x90>
        }
        size_t s_len = str - s_start;
   1c75e:	68fa      	ldr	r2, [r7, #12]
   1c760:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1c762:	1ad3      	subs	r3, r2, r3
   1c764:	62fb      	str	r3, [r7, #44]	; 0x2c

        if (str < top) {
   1c766:	68fa      	ldr	r2, [r7, #12]
   1c768:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1c76a:	429a      	cmp	r2, r3
   1c76c:	d21b      	bcs.n	1c7a6 <mp_repl_autocomplete+0xee>
            // a complete word, lookup in current object
            qstr q = qstr_find_strn(s_start, s_len);
   1c76e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
   1c770:	6b38      	ldr	r0, [r7, #48]	; 0x30
   1c772:	f7e4 fcf1 	bl	1158 <qstr_find_strn>
   1c776:	62b8      	str	r0, [r7, #40]	; 0x28
            if (q == MP_QSTR_NULL) {
   1c778:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1c77a:	2b00      	cmp	r3, #0
   1c77c:	d101      	bne.n	1c782 <mp_repl_autocomplete+0xca>
                // lookup will fail
                return 0;
   1c77e:	2300      	movs	r3, #0
   1c780:	e0fc      	b.n	1c97c <mp_repl_autocomplete+0x2c4>
            }
            mp_load_method_protected(obj, q, dest, true);
   1c782:	f107 0218 	add.w	r2, r7, #24
   1c786:	2301      	movs	r3, #1
   1c788:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   1c78a:	6eb8      	ldr	r0, [r7, #104]	; 0x68
   1c78c:	f7f0 fa34 	bl	cbf8 <mp_load_method_protected>
            obj = dest[0]; // attribute, method, or MP_OBJ_NULL if nothing found
   1c790:	69bb      	ldr	r3, [r7, #24]
   1c792:	66bb      	str	r3, [r7, #104]	; 0x68

            if (obj == MP_OBJ_NULL) {
   1c794:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   1c796:	2b00      	cmp	r3, #0
   1c798:	d101      	bne.n	1c79e <mp_repl_autocomplete+0xe6>
                // lookup failed
                return 0;
   1c79a:	2300      	movs	r3, #0
   1c79c:	e0ee      	b.n	1c97c <mp_repl_autocomplete+0x2c4>
            }

            // skip '.' to move to next word
            ++str;
   1c79e:	68fb      	ldr	r3, [r7, #12]
   1c7a0:	3301      	adds	r3, #1
   1c7a2:	60fb      	str	r3, [r7, #12]
   1c7a4:	e7cd      	b.n	1c742 <mp_repl_autocomplete+0x8a>

        } else {
            // end of string, do completion on this partial name

            // look for matches
            const char *match_str = NULL;
   1c7a6:	2300      	movs	r3, #0
   1c7a8:	667b      	str	r3, [r7, #100]	; 0x64
            size_t match_len = 0;
   1c7aa:	2300      	movs	r3, #0
   1c7ac:	663b      	str	r3, [r7, #96]	; 0x60
            qstr q_first = 0, q_last = 0;
   1c7ae:	2300      	movs	r3, #0
   1c7b0:	65fb      	str	r3, [r7, #92]	; 0x5c
   1c7b2:	2300      	movs	r3, #0
   1c7b4:	65bb      	str	r3, [r7, #88]	; 0x58
            for (qstr q = MP_QSTR_ + 1; q < nqstr; ++q) {
   1c7b6:	2302      	movs	r3, #2
   1c7b8:	657b      	str	r3, [r7, #84]	; 0x54
   1c7ba:	e049      	b.n	1c850 <mp_repl_autocomplete+0x198>
                size_t d_len;
                const char *d_str = (const char*)qstr_data(q, &d_len);
   1c7bc:	f107 0314 	add.w	r3, r7, #20
   1c7c0:	4619      	mov	r1, r3
   1c7c2:	6d78      	ldr	r0, [r7, #84]	; 0x54
   1c7c4:	f7e4 fe12 	bl	13ec <qstr_data>
   1c7c8:	6278      	str	r0, [r7, #36]	; 0x24
                if (s_len <= d_len && strncmp(s_start, d_str, s_len) == 0) {
   1c7ca:	697b      	ldr	r3, [r7, #20]
   1c7cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   1c7ce:	429a      	cmp	r2, r3
   1c7d0:	d83b      	bhi.n	1c84a <mp_repl_autocomplete+0x192>
   1c7d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   1c7d4:	6a79      	ldr	r1, [r7, #36]	; 0x24
   1c7d6:	6b38      	ldr	r0, [r7, #48]	; 0x30
   1c7d8:	f002 f833 	bl	1e842 <strncmp>
   1c7dc:	4603      	mov	r3, r0
   1c7de:	2b00      	cmp	r3, #0
   1c7e0:	d133      	bne.n	1c84a <mp_repl_autocomplete+0x192>
                    mp_load_method_protected(obj, q, dest, true);
   1c7e2:	f107 0218 	add.w	r2, r7, #24
   1c7e6:	2301      	movs	r3, #1
   1c7e8:	6d79      	ldr	r1, [r7, #84]	; 0x54
   1c7ea:	6eb8      	ldr	r0, [r7, #104]	; 0x68
   1c7ec:	f7f0 fa04 	bl	cbf8 <mp_load_method_protected>
                    if (dest[0] != MP_OBJ_NULL) {
   1c7f0:	69bb      	ldr	r3, [r7, #24]
   1c7f2:	2b00      	cmp	r3, #0
   1c7f4:	d029      	beq.n	1c84a <mp_repl_autocomplete+0x192>
                        if (match_str == NULL) {
   1c7f6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   1c7f8:	2b00      	cmp	r3, #0
   1c7fa:	d104      	bne.n	1c806 <mp_repl_autocomplete+0x14e>
                            match_str = d_str;
   1c7fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1c7fe:	667b      	str	r3, [r7, #100]	; 0x64
                            match_len = d_len;
   1c800:	697b      	ldr	r3, [r7, #20]
   1c802:	663b      	str	r3, [r7, #96]	; 0x60
   1c804:	e01a      	b.n	1c83c <mp_repl_autocomplete+0x184>
                        } else {
                            // search for longest common prefix of match_str and d_str
                            // (assumes these strings are null-terminated)
                            for (size_t j = s_len; j <= match_len && j <= d_len; ++j) {
   1c806:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1c808:	653b      	str	r3, [r7, #80]	; 0x50
   1c80a:	e00f      	b.n	1c82c <mp_repl_autocomplete+0x174>
                                if (match_str[j] != d_str[j]) {
   1c80c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
   1c80e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   1c810:	4413      	add	r3, r2
   1c812:	781a      	ldrb	r2, [r3, #0]
   1c814:	6a79      	ldr	r1, [r7, #36]	; 0x24
   1c816:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   1c818:	440b      	add	r3, r1
   1c81a:	781b      	ldrb	r3, [r3, #0]
   1c81c:	429a      	cmp	r2, r3
   1c81e:	d002      	beq.n	1c826 <mp_repl_autocomplete+0x16e>
                                    match_len = j;
   1c820:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   1c822:	663b      	str	r3, [r7, #96]	; 0x60
                                    break;
   1c824:	e00a      	b.n	1c83c <mp_repl_autocomplete+0x184>
                            for (size_t j = s_len; j <= match_len && j <= d_len; ++j) {
   1c826:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   1c828:	3301      	adds	r3, #1
   1c82a:	653b      	str	r3, [r7, #80]	; 0x50
   1c82c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
   1c82e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   1c830:	429a      	cmp	r2, r3
   1c832:	d803      	bhi.n	1c83c <mp_repl_autocomplete+0x184>
   1c834:	697b      	ldr	r3, [r7, #20]
   1c836:	6d3a      	ldr	r2, [r7, #80]	; 0x50
   1c838:	429a      	cmp	r2, r3
   1c83a:	d9e7      	bls.n	1c80c <mp_repl_autocomplete+0x154>
                                }
                            }
                        }
                        if (q_first == 0) {
   1c83c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
   1c83e:	2b00      	cmp	r3, #0
   1c840:	d101      	bne.n	1c846 <mp_repl_autocomplete+0x18e>
                            q_first = q;
   1c842:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   1c844:	65fb      	str	r3, [r7, #92]	; 0x5c
                        }
                        q_last = q;
   1c846:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   1c848:	65bb      	str	r3, [r7, #88]	; 0x58
            for (qstr q = MP_QSTR_ + 1; q < nqstr; ++q) {
   1c84a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   1c84c:	3301      	adds	r3, #1
   1c84e:	657b      	str	r3, [r7, #84]	; 0x54
   1c850:	6d7a      	ldr	r2, [r7, #84]	; 0x54
   1c852:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1c854:	429a      	cmp	r2, r3
   1c856:	d3b1      	bcc.n	1c7bc <mp_repl_autocomplete+0x104>
                    }
                }
            }

            // nothing found
            if (q_first == 0) {
   1c858:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
   1c85a:	2b00      	cmp	r3, #0
   1c85c:	d116      	bne.n	1c88c <mp_repl_autocomplete+0x1d4>
                // If there're no better alternatives, and if it's first word
                // in the line, try to complete "import".
                if (s_start == org_str) {
   1c85e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   1c860:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1c862:	429a      	cmp	r2, r3
   1c864:	d110      	bne.n	1c888 <mp_repl_autocomplete+0x1d0>
                    static const char import_str[] = "import ";
                    if (memcmp(s_start, import_str, s_len) == 0) {
   1c866:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   1c868:	4948      	ldr	r1, [pc, #288]	; (1c98c <mp_repl_autocomplete+0x2d4>)
   1c86a:	6b38      	ldr	r0, [r7, #48]	; 0x30
   1c86c:	f001 ff45 	bl	1e6fa <memcmp>
   1c870:	4603      	mov	r3, r0
   1c872:	2b00      	cmp	r3, #0
   1c874:	d108      	bne.n	1c888 <mp_repl_autocomplete+0x1d0>
                        *compl_str = import_str + s_len;
   1c876:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1c878:	4a44      	ldr	r2, [pc, #272]	; (1c98c <mp_repl_autocomplete+0x2d4>)
   1c87a:	441a      	add	r2, r3
   1c87c:	683b      	ldr	r3, [r7, #0]
   1c87e:	601a      	str	r2, [r3, #0]
                        return sizeof(import_str) - 1 - s_len;
   1c880:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1c882:	f1c3 0307 	rsb	r3, r3, #7
   1c886:	e079      	b.n	1c97c <mp_repl_autocomplete+0x2c4>
                    }
                }

                return 0;
   1c888:	2300      	movs	r3, #0
   1c88a:	e077      	b.n	1c97c <mp_repl_autocomplete+0x2c4>
            }

            // 1 match found, or multiple matches with a common prefix
            if (q_first == q_last || match_len > s_len) {
   1c88c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
   1c88e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   1c890:	429a      	cmp	r2, r3
   1c892:	d003      	beq.n	1c89c <mp_repl_autocomplete+0x1e4>
   1c894:	6e3a      	ldr	r2, [r7, #96]	; 0x60
   1c896:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1c898:	429a      	cmp	r2, r3
   1c89a:	d908      	bls.n	1c8ae <mp_repl_autocomplete+0x1f6>
                *compl_str = match_str + s_len;
   1c89c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
   1c89e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1c8a0:	441a      	add	r2, r3
   1c8a2:	683b      	ldr	r3, [r7, #0]
   1c8a4:	601a      	str	r2, [r3, #0]
                return match_len - s_len;
   1c8a6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
   1c8a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1c8aa:	1ad3      	subs	r3, r2, r3
   1c8ac:	e066      	b.n	1c97c <mp_repl_autocomplete+0x2c4>
            // multiple matches found, print them out

            #define WORD_SLOT_LEN (16)
            #define MAX_LINE_LEN  (4 * WORD_SLOT_LEN)

            int line_len = MAX_LINE_LEN; // force a newline for first word
   1c8ae:	2340      	movs	r3, #64	; 0x40
   1c8b0:	64fb      	str	r3, [r7, #76]	; 0x4c
            for (qstr q = q_first; q <= q_last; ++q) {
   1c8b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
   1c8b4:	64bb      	str	r3, [r7, #72]	; 0x48
   1c8b6:	e057      	b.n	1c968 <mp_repl_autocomplete+0x2b0>
                size_t d_len;
                const char *d_str = (const char*)qstr_data(q, &d_len);
   1c8b8:	f107 0310 	add.w	r3, r7, #16
   1c8bc:	4619      	mov	r1, r3
   1c8be:	6cb8      	ldr	r0, [r7, #72]	; 0x48
   1c8c0:	f7e4 fd94 	bl	13ec <qstr_data>
   1c8c4:	6238      	str	r0, [r7, #32]
                if (s_len <= d_len && strncmp(s_start, d_str, s_len) == 0) {
   1c8c6:	693b      	ldr	r3, [r7, #16]
   1c8c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   1c8ca:	429a      	cmp	r2, r3
   1c8cc:	d849      	bhi.n	1c962 <mp_repl_autocomplete+0x2aa>
   1c8ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   1c8d0:	6a39      	ldr	r1, [r7, #32]
   1c8d2:	6b38      	ldr	r0, [r7, #48]	; 0x30
   1c8d4:	f001 ffb5 	bl	1e842 <strncmp>
   1c8d8:	4603      	mov	r3, r0
   1c8da:	2b00      	cmp	r3, #0
   1c8dc:	d141      	bne.n	1c962 <mp_repl_autocomplete+0x2aa>
                    mp_load_method_protected(obj, q, dest, true);
   1c8de:	f107 0218 	add.w	r2, r7, #24
   1c8e2:	2301      	movs	r3, #1
   1c8e4:	6cb9      	ldr	r1, [r7, #72]	; 0x48
   1c8e6:	6eb8      	ldr	r0, [r7, #104]	; 0x68
   1c8e8:	f7f0 f986 	bl	cbf8 <mp_load_method_protected>
                    if (dest[0] != MP_OBJ_NULL) {
   1c8ec:	69bb      	ldr	r3, [r7, #24]
   1c8ee:	2b00      	cmp	r3, #0
   1c8f0:	d037      	beq.n	1c962 <mp_repl_autocomplete+0x2aa>
                        int gap = (line_len + WORD_SLOT_LEN - 1) / WORD_SLOT_LEN * WORD_SLOT_LEN - line_len;
   1c8f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   1c8f4:	330f      	adds	r3, #15
   1c8f6:	2b00      	cmp	r3, #0
   1c8f8:	da00      	bge.n	1c8fc <mp_repl_autocomplete+0x244>
   1c8fa:	330f      	adds	r3, #15
   1c8fc:	111b      	asrs	r3, r3, #4
   1c8fe:	011a      	lsls	r2, r3, #4
   1c900:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   1c902:	1ad3      	subs	r3, r2, r3
   1c904:	647b      	str	r3, [r7, #68]	; 0x44
                        if (gap < 2) {
   1c906:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   1c908:	2b01      	cmp	r3, #1
   1c90a:	dc02      	bgt.n	1c912 <mp_repl_autocomplete+0x25a>
                            gap += WORD_SLOT_LEN;
   1c90c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   1c90e:	3310      	adds	r3, #16
   1c910:	647b      	str	r3, [r7, #68]	; 0x44
                        }
                        if (line_len + gap + d_len <= MAX_LINE_LEN) {
   1c912:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
   1c914:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   1c916:	4413      	add	r3, r2
   1c918:	461a      	mov	r2, r3
   1c91a:	693b      	ldr	r3, [r7, #16]
   1c91c:	4413      	add	r3, r2
   1c91e:	2b40      	cmp	r3, #64	; 0x40
   1c920:	d818      	bhi.n	1c954 <mp_repl_autocomplete+0x29c>
                            // TODO optimise printing of gap?
                            for (int j = 0; j < gap; ++j) {
   1c922:	2300      	movs	r3, #0
   1c924:	643b      	str	r3, [r7, #64]	; 0x40
   1c926:	e006      	b.n	1c936 <mp_repl_autocomplete+0x27e>
                                mp_print_str(print, " ");
   1c928:	4919      	ldr	r1, [pc, #100]	; (1c990 <mp_repl_autocomplete+0x2d8>)
   1c92a:	6878      	ldr	r0, [r7, #4]
   1c92c:	f7e5 f88e 	bl	1a4c <mp_print_str>
                            for (int j = 0; j < gap; ++j) {
   1c930:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1c932:	3301      	adds	r3, #1
   1c934:	643b      	str	r3, [r7, #64]	; 0x40
   1c936:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   1c938:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   1c93a:	429a      	cmp	r2, r3
   1c93c:	dbf4      	blt.n	1c928 <mp_repl_autocomplete+0x270>
                            }
                            mp_print_str(print, d_str);
   1c93e:	6a39      	ldr	r1, [r7, #32]
   1c940:	6878      	ldr	r0, [r7, #4]
   1c942:	f7e5 f883 	bl	1a4c <mp_print_str>
                            line_len += gap + d_len;
   1c946:	6c7a      	ldr	r2, [r7, #68]	; 0x44
   1c948:	693b      	ldr	r3, [r7, #16]
   1c94a:	441a      	add	r2, r3
   1c94c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   1c94e:	4413      	add	r3, r2
   1c950:	64fb      	str	r3, [r7, #76]	; 0x4c
   1c952:	e006      	b.n	1c962 <mp_repl_autocomplete+0x2aa>
                        } else {
                            mp_printf(print, "\n%s", d_str);
   1c954:	6a3a      	ldr	r2, [r7, #32]
   1c956:	490f      	ldr	r1, [pc, #60]	; (1c994 <mp_repl_autocomplete+0x2dc>)
   1c958:	6878      	ldr	r0, [r7, #4]
   1c95a:	f7e5 fb89 	bl	2070 <mp_printf>
                            line_len = d_len;
   1c95e:	693b      	ldr	r3, [r7, #16]
   1c960:	64fb      	str	r3, [r7, #76]	; 0x4c
            for (qstr q = q_first; q <= q_last; ++q) {
   1c962:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   1c964:	3301      	adds	r3, #1
   1c966:	64bb      	str	r3, [r7, #72]	; 0x48
   1c968:	6cba      	ldr	r2, [r7, #72]	; 0x48
   1c96a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   1c96c:	429a      	cmp	r2, r3
   1c96e:	d9a3      	bls.n	1c8b8 <mp_repl_autocomplete+0x200>
                        }
                    }
                }
            }
            mp_print_str(print, "\n");
   1c970:	4909      	ldr	r1, [pc, #36]	; (1c998 <mp_repl_autocomplete+0x2e0>)
   1c972:	6878      	ldr	r0, [r7, #4]
   1c974:	f7e5 f86a 	bl	1a4c <mp_print_str>

            return (size_t)(-1); // indicate many matches
   1c978:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
        }
    }
}
   1c97c:	4618      	mov	r0, r3
   1c97e:	3770      	adds	r7, #112	; 0x70
   1c980:	46bd      	mov	sp, r7
   1c982:	bd80      	pop	{r7, pc}
   1c984:	20001248 	.word	0x20001248
   1c988:	00022fec 	.word	0x00022fec
   1c98c:	000271c0 	.word	0x000271c0
   1c990:	000271b4 	.word	0x000271b4
   1c994:	000271b8 	.word	0x000271b8
   1c998:	000271bc 	.word	0x000271bc

0001c99c <mp_small_int_mul_overflow>:
 * THE SOFTWARE.
 */

#include "py/smallint.h"

bool mp_small_int_mul_overflow(mp_int_t x, mp_int_t y) {
   1c99c:	b480      	push	{r7}
   1c99e:	b083      	sub	sp, #12
   1c9a0:	af00      	add	r7, sp, #0
   1c9a2:	6078      	str	r0, [r7, #4]
   1c9a4:	6039      	str	r1, [r7, #0]
    // Check for multiply overflow; see CERT INT32-C
    if (x > 0) { // x is positive
   1c9a6:	687b      	ldr	r3, [r7, #4]
   1c9a8:	2b00      	cmp	r3, #0
   1c9aa:	dd16      	ble.n	1c9da <mp_small_int_mul_overflow+0x3e>
        if (y > 0) { // x and y are positive
   1c9ac:	683b      	ldr	r3, [r7, #0]
   1c9ae:	2b00      	cmp	r3, #0
   1c9b0:	dd09      	ble.n	1c9c6 <mp_small_int_mul_overflow+0x2a>
            if (x > (MP_SMALL_INT_MAX / y)) {
   1c9b2:	f06f 4240 	mvn.w	r2, #3221225472	; 0xc0000000
   1c9b6:	683b      	ldr	r3, [r7, #0]
   1c9b8:	fb92 f2f3 	sdiv	r2, r2, r3
   1c9bc:	687b      	ldr	r3, [r7, #4]
   1c9be:	429a      	cmp	r2, r3
   1c9c0:	da25      	bge.n	1ca0e <mp_small_int_mul_overflow+0x72>
                return true;
   1c9c2:	2301      	movs	r3, #1
   1c9c4:	e024      	b.n	1ca10 <mp_small_int_mul_overflow+0x74>
            }
        } else { // x positive, y nonpositive
            if (y < (MP_SMALL_INT_MIN / x)) {
   1c9c6:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
   1c9ca:	687b      	ldr	r3, [r7, #4]
   1c9cc:	fb92 f2f3 	sdiv	r2, r2, r3
   1c9d0:	683b      	ldr	r3, [r7, #0]
   1c9d2:	429a      	cmp	r2, r3
   1c9d4:	dd1b      	ble.n	1ca0e <mp_small_int_mul_overflow+0x72>
                return true;
   1c9d6:	2301      	movs	r3, #1
   1c9d8:	e01a      	b.n	1ca10 <mp_small_int_mul_overflow+0x74>
            }
        } // x positive, y nonpositive
    } else { // x is nonpositive
        if (y > 0) { // x is nonpositive, y is positive
   1c9da:	683b      	ldr	r3, [r7, #0]
   1c9dc:	2b00      	cmp	r3, #0
   1c9de:	dd09      	ble.n	1c9f4 <mp_small_int_mul_overflow+0x58>
            if (x < (MP_SMALL_INT_MIN / y)) {
   1c9e0:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
   1c9e4:	683b      	ldr	r3, [r7, #0]
   1c9e6:	fb92 f2f3 	sdiv	r2, r2, r3
   1c9ea:	687b      	ldr	r3, [r7, #4]
   1c9ec:	429a      	cmp	r2, r3
   1c9ee:	dd0e      	ble.n	1ca0e <mp_small_int_mul_overflow+0x72>
                return true;
   1c9f0:	2301      	movs	r3, #1
   1c9f2:	e00d      	b.n	1ca10 <mp_small_int_mul_overflow+0x74>
            }
        } else { // x and y are nonpositive
            if (x != 0 && y < (MP_SMALL_INT_MAX / x)) {
   1c9f4:	687b      	ldr	r3, [r7, #4]
   1c9f6:	2b00      	cmp	r3, #0
   1c9f8:	d009      	beq.n	1ca0e <mp_small_int_mul_overflow+0x72>
   1c9fa:	f06f 4240 	mvn.w	r2, #3221225472	; 0xc0000000
   1c9fe:	687b      	ldr	r3, [r7, #4]
   1ca00:	fb92 f2f3 	sdiv	r2, r2, r3
   1ca04:	683b      	ldr	r3, [r7, #0]
   1ca06:	429a      	cmp	r2, r3
   1ca08:	dd01      	ble.n	1ca0e <mp_small_int_mul_overflow+0x72>
                return true;
   1ca0a:	2301      	movs	r3, #1
   1ca0c:	e000      	b.n	1ca10 <mp_small_int_mul_overflow+0x74>
            }
        } // End if x and y are nonpositive
    } // End if x is nonpositive
    return false;
   1ca0e:	2300      	movs	r3, #0
}
   1ca10:	4618      	mov	r0, r3
   1ca12:	370c      	adds	r7, #12
   1ca14:	46bd      	mov	sp, r7
   1ca16:	f85d 7b04 	ldr.w	r7, [sp], #4
   1ca1a:	4770      	bx	lr

0001ca1c <mp_small_int_modulo>:

mp_int_t mp_small_int_modulo(mp_int_t dividend, mp_int_t divisor) {
   1ca1c:	b480      	push	{r7}
   1ca1e:	b083      	sub	sp, #12
   1ca20:	af00      	add	r7, sp, #0
   1ca22:	6078      	str	r0, [r7, #4]
   1ca24:	6039      	str	r1, [r7, #0]
    // Python specs require that mod has same sign as second operand
    dividend %= divisor;
   1ca26:	687b      	ldr	r3, [r7, #4]
   1ca28:	683a      	ldr	r2, [r7, #0]
   1ca2a:	fb93 f2f2 	sdiv	r2, r3, r2
   1ca2e:	6839      	ldr	r1, [r7, #0]
   1ca30:	fb01 f202 	mul.w	r2, r1, r2
   1ca34:	1a9b      	subs	r3, r3, r2
   1ca36:	607b      	str	r3, [r7, #4]
    if ((dividend < 0 && divisor > 0) || (dividend > 0 && divisor < 0)) {
   1ca38:	687b      	ldr	r3, [r7, #4]
   1ca3a:	2b00      	cmp	r3, #0
   1ca3c:	da02      	bge.n	1ca44 <mp_small_int_modulo+0x28>
   1ca3e:	683b      	ldr	r3, [r7, #0]
   1ca40:	2b00      	cmp	r3, #0
   1ca42:	dc05      	bgt.n	1ca50 <mp_small_int_modulo+0x34>
   1ca44:	687b      	ldr	r3, [r7, #4]
   1ca46:	2b00      	cmp	r3, #0
   1ca48:	dd06      	ble.n	1ca58 <mp_small_int_modulo+0x3c>
   1ca4a:	683b      	ldr	r3, [r7, #0]
   1ca4c:	2b00      	cmp	r3, #0
   1ca4e:	da03      	bge.n	1ca58 <mp_small_int_modulo+0x3c>
        dividend += divisor;
   1ca50:	687a      	ldr	r2, [r7, #4]
   1ca52:	683b      	ldr	r3, [r7, #0]
   1ca54:	4413      	add	r3, r2
   1ca56:	607b      	str	r3, [r7, #4]
    }
    return dividend;
   1ca58:	687b      	ldr	r3, [r7, #4]
}
   1ca5a:	4618      	mov	r0, r3
   1ca5c:	370c      	adds	r7, #12
   1ca5e:	46bd      	mov	sp, r7
   1ca60:	f85d 7b04 	ldr.w	r7, [sp], #4
   1ca64:	4770      	bx	lr

0001ca66 <mp_small_int_floor_divide>:

mp_int_t mp_small_int_floor_divide(mp_int_t num, mp_int_t denom) {
   1ca66:	b480      	push	{r7}
   1ca68:	b083      	sub	sp, #12
   1ca6a:	af00      	add	r7, sp, #0
   1ca6c:	6078      	str	r0, [r7, #4]
   1ca6e:	6039      	str	r1, [r7, #0]
    if (num >= 0) {
   1ca70:	687b      	ldr	r3, [r7, #4]
   1ca72:	2b00      	cmp	r3, #0
   1ca74:	db08      	blt.n	1ca88 <mp_small_int_floor_divide+0x22>
        if (denom < 0) {
   1ca76:	683b      	ldr	r3, [r7, #0]
   1ca78:	2b00      	cmp	r3, #0
   1ca7a:	da0e      	bge.n	1ca9a <mp_small_int_floor_divide+0x34>
            num += -denom - 1;
   1ca7c:	683b      	ldr	r3, [r7, #0]
   1ca7e:	43db      	mvns	r3, r3
   1ca80:	687a      	ldr	r2, [r7, #4]
   1ca82:	4413      	add	r3, r2
   1ca84:	607b      	str	r3, [r7, #4]
   1ca86:	e008      	b.n	1ca9a <mp_small_int_floor_divide+0x34>
        }
    } else {
        if (denom >= 0) {
   1ca88:	683b      	ldr	r3, [r7, #0]
   1ca8a:	2b00      	cmp	r3, #0
   1ca8c:	db05      	blt.n	1ca9a <mp_small_int_floor_divide+0x34>
            num += -denom + 1;
   1ca8e:	683b      	ldr	r3, [r7, #0]
   1ca90:	f1c3 0301 	rsb	r3, r3, #1
   1ca94:	687a      	ldr	r2, [r7, #4]
   1ca96:	4413      	add	r3, r2
   1ca98:	607b      	str	r3, [r7, #4]
        }
    }
    return num / denom;
   1ca9a:	687a      	ldr	r2, [r7, #4]
   1ca9c:	683b      	ldr	r3, [r7, #0]
   1ca9e:	fb92 f3f3 	sdiv	r3, r2, r3
}
   1caa2:	4618      	mov	r0, r3
   1caa4:	370c      	adds	r7, #12
   1caa6:	46bd      	mov	sp, r7
   1caa8:	f85d 7b04 	ldr.w	r7, [sp], #4
   1caac:	4770      	bx	lr
	...

0001cab0 <mp_find_frozen_mpy>:
#include "py/emitglue.h"

extern const char mp_frozen_mpy_names[];
extern const mp_raw_code_t *const mp_frozen_mpy_content[];

STATIC const mp_raw_code_t *mp_find_frozen_mpy(const char *str, size_t len) {
   1cab0:	b580      	push	{r7, lr}
   1cab2:	b086      	sub	sp, #24
   1cab4:	af00      	add	r7, sp, #0
   1cab6:	6078      	str	r0, [r7, #4]
   1cab8:	6039      	str	r1, [r7, #0]
    const char *name = mp_frozen_mpy_names;
   1caba:	4b15      	ldr	r3, [pc, #84]	; (1cb10 <mp_find_frozen_mpy+0x60>)
   1cabc:	617b      	str	r3, [r7, #20]
    for (size_t i = 0; *name != 0; i++) {
   1cabe:	2300      	movs	r3, #0
   1cac0:	613b      	str	r3, [r7, #16]
   1cac2:	e01c      	b.n	1cafe <mp_find_frozen_mpy+0x4e>
        size_t l = strlen(name);
   1cac4:	6978      	ldr	r0, [r7, #20]
   1cac6:	f001 fe69 	bl	1e79c <strlen>
   1caca:	60f8      	str	r0, [r7, #12]
        if (l == len && !memcmp(str, name, l)) {
   1cacc:	68fa      	ldr	r2, [r7, #12]
   1cace:	683b      	ldr	r3, [r7, #0]
   1cad0:	429a      	cmp	r2, r3
   1cad2:	d10c      	bne.n	1caee <mp_find_frozen_mpy+0x3e>
   1cad4:	68fa      	ldr	r2, [r7, #12]
   1cad6:	6979      	ldr	r1, [r7, #20]
   1cad8:	6878      	ldr	r0, [r7, #4]
   1cada:	f001 fe0e 	bl	1e6fa <memcmp>
   1cade:	4603      	mov	r3, r0
   1cae0:	2b00      	cmp	r3, #0
   1cae2:	d104      	bne.n	1caee <mp_find_frozen_mpy+0x3e>
            return mp_frozen_mpy_content[i];
   1cae4:	4a0b      	ldr	r2, [pc, #44]	; (1cb14 <mp_find_frozen_mpy+0x64>)
   1cae6:	693b      	ldr	r3, [r7, #16]
   1cae8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1caec:	e00c      	b.n	1cb08 <mp_find_frozen_mpy+0x58>
        }
        name += l + 1;
   1caee:	68fb      	ldr	r3, [r7, #12]
   1caf0:	3301      	adds	r3, #1
   1caf2:	697a      	ldr	r2, [r7, #20]
   1caf4:	4413      	add	r3, r2
   1caf6:	617b      	str	r3, [r7, #20]
    for (size_t i = 0; *name != 0; i++) {
   1caf8:	693b      	ldr	r3, [r7, #16]
   1cafa:	3301      	adds	r3, #1
   1cafc:	613b      	str	r3, [r7, #16]
   1cafe:	697b      	ldr	r3, [r7, #20]
   1cb00:	781b      	ldrb	r3, [r3, #0]
   1cb02:	2b00      	cmp	r3, #0
   1cb04:	d1de      	bne.n	1cac4 <mp_find_frozen_mpy+0x14>
    }
    return NULL;
   1cb06:	2300      	movs	r3, #0
}
   1cb08:	4618      	mov	r0, r3
   1cb0a:	3718      	adds	r7, #24
   1cb0c:	46bd      	mov	sp, r7
   1cb0e:	bd80      	pop	{r7, pc}
   1cb10:	00028188 	.word	0x00028188
   1cb14:	00028198 	.word	0x00028198

0001cb18 <mp_frozen_stat_helper>:

#endif

#if MICROPY_MODULE_FROZEN

STATIC mp_import_stat_t mp_frozen_stat_helper(const char *name, const char *str) {
   1cb18:	b580      	push	{r7, lr}
   1cb1a:	b086      	sub	sp, #24
   1cb1c:	af00      	add	r7, sp, #0
   1cb1e:	6078      	str	r0, [r7, #4]
   1cb20:	6039      	str	r1, [r7, #0]
    size_t len = strlen(str);
   1cb22:	6838      	ldr	r0, [r7, #0]
   1cb24:	f001 fe3a 	bl	1e79c <strlen>
   1cb28:	6138      	str	r0, [r7, #16]

    for (int i = 0; *name != 0; i++) {
   1cb2a:	2300      	movs	r3, #0
   1cb2c:	617b      	str	r3, [r7, #20]
   1cb2e:	e027      	b.n	1cb80 <mp_frozen_stat_helper+0x68>
        size_t l = strlen(name);
   1cb30:	6878      	ldr	r0, [r7, #4]
   1cb32:	f001 fe33 	bl	1e79c <strlen>
   1cb36:	60f8      	str	r0, [r7, #12]
        if (l >= len && !memcmp(str, name, len)) {
   1cb38:	68fa      	ldr	r2, [r7, #12]
   1cb3a:	693b      	ldr	r3, [r7, #16]
   1cb3c:	429a      	cmp	r2, r3
   1cb3e:	d317      	bcc.n	1cb70 <mp_frozen_stat_helper+0x58>
   1cb40:	693a      	ldr	r2, [r7, #16]
   1cb42:	6879      	ldr	r1, [r7, #4]
   1cb44:	6838      	ldr	r0, [r7, #0]
   1cb46:	f001 fdd8 	bl	1e6fa <memcmp>
   1cb4a:	4603      	mov	r3, r0
   1cb4c:	2b00      	cmp	r3, #0
   1cb4e:	d10f      	bne.n	1cb70 <mp_frozen_stat_helper+0x58>
            if (name[len] == 0) {
   1cb50:	687a      	ldr	r2, [r7, #4]
   1cb52:	693b      	ldr	r3, [r7, #16]
   1cb54:	4413      	add	r3, r2
   1cb56:	781b      	ldrb	r3, [r3, #0]
   1cb58:	2b00      	cmp	r3, #0
   1cb5a:	d101      	bne.n	1cb60 <mp_frozen_stat_helper+0x48>
                return MP_IMPORT_STAT_FILE;
   1cb5c:	2302      	movs	r3, #2
   1cb5e:	e014      	b.n	1cb8a <mp_frozen_stat_helper+0x72>
            } else if (name[len] == '/') {
   1cb60:	687a      	ldr	r2, [r7, #4]
   1cb62:	693b      	ldr	r3, [r7, #16]
   1cb64:	4413      	add	r3, r2
   1cb66:	781b      	ldrb	r3, [r3, #0]
   1cb68:	2b2f      	cmp	r3, #47	; 0x2f
   1cb6a:	d101      	bne.n	1cb70 <mp_frozen_stat_helper+0x58>
                return MP_IMPORT_STAT_DIR;
   1cb6c:	2301      	movs	r3, #1
   1cb6e:	e00c      	b.n	1cb8a <mp_frozen_stat_helper+0x72>
            }
        }
        name += l + 1;
   1cb70:	68fb      	ldr	r3, [r7, #12]
   1cb72:	3301      	adds	r3, #1
   1cb74:	687a      	ldr	r2, [r7, #4]
   1cb76:	4413      	add	r3, r2
   1cb78:	607b      	str	r3, [r7, #4]
    for (int i = 0; *name != 0; i++) {
   1cb7a:	697b      	ldr	r3, [r7, #20]
   1cb7c:	3301      	adds	r3, #1
   1cb7e:	617b      	str	r3, [r7, #20]
   1cb80:	687b      	ldr	r3, [r7, #4]
   1cb82:	781b      	ldrb	r3, [r3, #0]
   1cb84:	2b00      	cmp	r3, #0
   1cb86:	d1d3      	bne.n	1cb30 <mp_frozen_stat_helper+0x18>
    }
    return MP_IMPORT_STAT_NO_EXIST;
   1cb88:	2300      	movs	r3, #0
}
   1cb8a:	4618      	mov	r0, r3
   1cb8c:	3718      	adds	r7, #24
   1cb8e:	46bd      	mov	sp, r7
   1cb90:	bd80      	pop	{r7, pc}

0001cb92 <mp_frozen_stat>:

mp_import_stat_t mp_frozen_stat(const char *str) {
   1cb92:	b580      	push	{r7, lr}
   1cb94:	b084      	sub	sp, #16
   1cb96:	af00      	add	r7, sp, #0
   1cb98:	6078      	str	r0, [r7, #4]
        return stat;
    }
    #endif

    #if MICROPY_MODULE_FROZEN_MPY
    stat = mp_frozen_stat_helper(mp_frozen_mpy_names, str);
   1cb9a:	6879      	ldr	r1, [r7, #4]
   1cb9c:	4806      	ldr	r0, [pc, #24]	; (1cbb8 <mp_frozen_stat+0x26>)
   1cb9e:	f7ff ffbb 	bl	1cb18 <mp_frozen_stat_helper>
   1cba2:	60f8      	str	r0, [r7, #12]
    if (stat != MP_IMPORT_STAT_NO_EXIST) {
   1cba4:	68fb      	ldr	r3, [r7, #12]
   1cba6:	2b00      	cmp	r3, #0
   1cba8:	d001      	beq.n	1cbae <mp_frozen_stat+0x1c>
        return stat;
   1cbaa:	68fb      	ldr	r3, [r7, #12]
   1cbac:	e000      	b.n	1cbb0 <mp_frozen_stat+0x1e>
    }
    #endif

    return MP_IMPORT_STAT_NO_EXIST;
   1cbae:	2300      	movs	r3, #0
}
   1cbb0:	4618      	mov	r0, r3
   1cbb2:	3710      	adds	r7, #16
   1cbb4:	46bd      	mov	sp, r7
   1cbb6:	bd80      	pop	{r7, pc}
   1cbb8:	00028188 	.word	0x00028188

0001cbbc <mp_find_frozen_module>:

int mp_find_frozen_module(const char *str, size_t len, void **data) {
   1cbbc:	b580      	push	{r7, lr}
   1cbbe:	b086      	sub	sp, #24
   1cbc0:	af00      	add	r7, sp, #0
   1cbc2:	60f8      	str	r0, [r7, #12]
   1cbc4:	60b9      	str	r1, [r7, #8]
   1cbc6:	607a      	str	r2, [r7, #4]
        *data = lex;
        return MP_FROZEN_STR;
    }
    #endif
    #if MICROPY_MODULE_FROZEN_MPY
    const mp_raw_code_t *rc = mp_find_frozen_mpy(str, len);
   1cbc8:	68b9      	ldr	r1, [r7, #8]
   1cbca:	68f8      	ldr	r0, [r7, #12]
   1cbcc:	f7ff ff70 	bl	1cab0 <mp_find_frozen_mpy>
   1cbd0:	6178      	str	r0, [r7, #20]
    if (rc != NULL) {
   1cbd2:	697b      	ldr	r3, [r7, #20]
   1cbd4:	2b00      	cmp	r3, #0
   1cbd6:	d004      	beq.n	1cbe2 <mp_find_frozen_module+0x26>
        *data = (void*)rc;
   1cbd8:	687b      	ldr	r3, [r7, #4]
   1cbda:	697a      	ldr	r2, [r7, #20]
   1cbdc:	601a      	str	r2, [r3, #0]
        return MP_FROZEN_MPY;
   1cbde:	2302      	movs	r3, #2
   1cbe0:	e000      	b.n	1cbe4 <mp_find_frozen_module+0x28>
    }
    #endif
    return MP_FROZEN_NONE;
   1cbe2:	2300      	movs	r3, #0
}
   1cbe4:	4618      	mov	r0, r3
   1cbe6:	3718      	adds	r7, #24
   1cbe8:	46bd      	mov	sp, r7
   1cbea:	bd80      	pop	{r7, pc}

0001cbec <DEBUG_printf>:
#if MICROPY_PY_BUILTINS_FLOAT
#include "py/formatfloat.h"
#endif

#if MICROPY_DEBUG_PRINTERS
int DEBUG_printf(const char *fmt, ...) {
   1cbec:	b40f      	push	{r0, r1, r2, r3}
   1cbee:	b580      	push	{r7, lr}
   1cbf0:	b082      	sub	sp, #8
   1cbf2:	af00      	add	r7, sp, #0
    va_list ap;
    va_start(ap, fmt);
   1cbf4:	f107 0314 	add.w	r3, r7, #20
   1cbf8:	603b      	str	r3, [r7, #0]
    int ret = mp_vprintf(MICROPY_DEBUG_PRINTER, fmt, ap);
   1cbfa:	683a      	ldr	r2, [r7, #0]
   1cbfc:	6939      	ldr	r1, [r7, #16]
   1cbfe:	4806      	ldr	r0, [pc, #24]	; (1cc18 <DEBUG_printf+0x2c>)
   1cc00:	f7e5 fa4c 	bl	209c <mp_vprintf>
   1cc04:	6078      	str	r0, [r7, #4]
    va_end(ap);
    return ret;
   1cc06:	687b      	ldr	r3, [r7, #4]
}
   1cc08:	4618      	mov	r0, r3
   1cc0a:	3708      	adds	r7, #8
   1cc0c:	46bd      	mov	sp, r7
   1cc0e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
   1cc12:	b004      	add	sp, #16
   1cc14:	4770      	bx	lr
   1cc16:	bf00      	nop
   1cc18:	000210cc 	.word	0x000210cc

0001cc1c <printf>:
int putchar(int c);
int puts(const char *s);
int vsnprintf(char *str, size_t size, const char *fmt, va_list ap);
int snprintf(char *str, size_t size, const char *fmt, ...);

int printf(const char *fmt, ...) {
   1cc1c:	b40f      	push	{r0, r1, r2, r3}
   1cc1e:	b580      	push	{r7, lr}
   1cc20:	b082      	sub	sp, #8
   1cc22:	af00      	add	r7, sp, #0
    va_list ap;
    va_start(ap, fmt);
   1cc24:	f107 0314 	add.w	r3, r7, #20
   1cc28:	603b      	str	r3, [r7, #0]
    int ret = mp_vprintf(&mp_plat_print, fmt, ap);
   1cc2a:	683a      	ldr	r2, [r7, #0]
   1cc2c:	6939      	ldr	r1, [r7, #16]
   1cc2e:	4806      	ldr	r0, [pc, #24]	; (1cc48 <printf+0x2c>)
   1cc30:	f7e5 fa34 	bl	209c <mp_vprintf>
   1cc34:	6078      	str	r0, [r7, #4]
    va_end(ap);
    return ret;
   1cc36:	687b      	ldr	r3, [r7, #4]
}
   1cc38:	4618      	mov	r0, r3
   1cc3a:	3708      	adds	r7, #8
   1cc3c:	46bd      	mov	sp, r7
   1cc3e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
   1cc42:	b004      	add	sp, #16
   1cc44:	4770      	bx	lr
   1cc46:	bf00      	nop
   1cc48:	000210cc 	.word	0x000210cc

0001cc4c <vprintf>:

int vprintf(const char *fmt, va_list ap) {
   1cc4c:	b580      	push	{r7, lr}
   1cc4e:	b082      	sub	sp, #8
   1cc50:	af00      	add	r7, sp, #0
   1cc52:	6078      	str	r0, [r7, #4]
   1cc54:	6039      	str	r1, [r7, #0]
    return mp_vprintf(&mp_plat_print, fmt, ap);
   1cc56:	683a      	ldr	r2, [r7, #0]
   1cc58:	6879      	ldr	r1, [r7, #4]
   1cc5a:	4804      	ldr	r0, [pc, #16]	; (1cc6c <vprintf+0x20>)
   1cc5c:	f7e5 fa1e 	bl	209c <mp_vprintf>
   1cc60:	4603      	mov	r3, r0
}
   1cc62:	4618      	mov	r0, r3
   1cc64:	3708      	adds	r7, #8
   1cc66:	46bd      	mov	sp, r7
   1cc68:	bd80      	pop	{r7, pc}
   1cc6a:	bf00      	nop
   1cc6c:	000210cc 	.word	0x000210cc

0001cc70 <putchar>:

// need this because gcc optimises printf("%c", c) -> putchar(c), and printf("a") -> putchar('a')
int putchar(int c) {
   1cc70:	b580      	push	{r7, lr}
   1cc72:	b084      	sub	sp, #16
   1cc74:	af00      	add	r7, sp, #0
   1cc76:	6078      	str	r0, [r7, #4]
    char chr = c;
   1cc78:	687b      	ldr	r3, [r7, #4]
   1cc7a:	b2db      	uxtb	r3, r3
   1cc7c:	73fb      	strb	r3, [r7, #15]
    mp_hal_stdout_tx_strn_cooked(&chr, 1);
   1cc7e:	f107 030f 	add.w	r3, r7, #15
   1cc82:	2101      	movs	r1, #1
   1cc84:	4618      	mov	r0, r3
   1cc86:	f001 f9a5 	bl	1dfd4 <mp_hal_stdout_tx_strn_cooked>
    return chr;
   1cc8a:	7bfb      	ldrb	r3, [r7, #15]
}
   1cc8c:	4618      	mov	r0, r3
   1cc8e:	3710      	adds	r7, #16
   1cc90:	46bd      	mov	sp, r7
   1cc92:	bd80      	pop	{r7, pc}

0001cc94 <puts>:

// need this because gcc optimises printf("string\n") -> puts("string")
int puts(const char *s) {
   1cc94:	b580      	push	{r7, lr}
   1cc96:	b084      	sub	sp, #16
   1cc98:	af00      	add	r7, sp, #0
   1cc9a:	6078      	str	r0, [r7, #4]
    mp_hal_stdout_tx_strn_cooked(s, strlen(s));
   1cc9c:	6878      	ldr	r0, [r7, #4]
   1cc9e:	f001 fd7d 	bl	1e79c <strlen>
   1cca2:	4603      	mov	r3, r0
   1cca4:	4619      	mov	r1, r3
   1cca6:	6878      	ldr	r0, [r7, #4]
   1cca8:	f001 f994 	bl	1dfd4 <mp_hal_stdout_tx_strn_cooked>
    char chr = '\n';
   1ccac:	230a      	movs	r3, #10
   1ccae:	73fb      	strb	r3, [r7, #15]
    mp_hal_stdout_tx_strn_cooked(&chr, 1);
   1ccb0:	f107 030f 	add.w	r3, r7, #15
   1ccb4:	2101      	movs	r1, #1
   1ccb6:	4618      	mov	r0, r3
   1ccb8:	f001 f98c 	bl	1dfd4 <mp_hal_stdout_tx_strn_cooked>
    return 1;
   1ccbc:	2301      	movs	r3, #1
}
   1ccbe:	4618      	mov	r0, r3
   1ccc0:	3710      	adds	r7, #16
   1ccc2:	46bd      	mov	sp, r7
   1ccc4:	bd80      	pop	{r7, pc}

0001ccc6 <strn_print_strn>:
typedef struct _strn_print_env_t {
    char *cur;
    size_t remain;
} strn_print_env_t;

STATIC void strn_print_strn(void *data, const char *str, size_t len) {
   1ccc6:	b580      	push	{r7, lr}
   1ccc8:	b086      	sub	sp, #24
   1ccca:	af00      	add	r7, sp, #0
   1cccc:	60f8      	str	r0, [r7, #12]
   1ccce:	60b9      	str	r1, [r7, #8]
   1ccd0:	607a      	str	r2, [r7, #4]
    strn_print_env_t *strn_print_env = data;
   1ccd2:	68fb      	ldr	r3, [r7, #12]
   1ccd4:	617b      	str	r3, [r7, #20]
    if (len > strn_print_env->remain) {
   1ccd6:	697b      	ldr	r3, [r7, #20]
   1ccd8:	685a      	ldr	r2, [r3, #4]
   1ccda:	687b      	ldr	r3, [r7, #4]
   1ccdc:	429a      	cmp	r2, r3
   1ccde:	d202      	bcs.n	1cce6 <strn_print_strn+0x20>
        len = strn_print_env->remain;
   1cce0:	697b      	ldr	r3, [r7, #20]
   1cce2:	685b      	ldr	r3, [r3, #4]
   1cce4:	607b      	str	r3, [r7, #4]
    }
    memcpy(strn_print_env->cur, str, len);
   1cce6:	697b      	ldr	r3, [r7, #20]
   1cce8:	681b      	ldr	r3, [r3, #0]
   1ccea:	687a      	ldr	r2, [r7, #4]
   1ccec:	68b9      	ldr	r1, [r7, #8]
   1ccee:	4618      	mov	r0, r3
   1ccf0:	f001 fc1e 	bl	1e530 <memcpy>
    strn_print_env->cur += len;
   1ccf4:	697b      	ldr	r3, [r7, #20]
   1ccf6:	681a      	ldr	r2, [r3, #0]
   1ccf8:	687b      	ldr	r3, [r7, #4]
   1ccfa:	441a      	add	r2, r3
   1ccfc:	697b      	ldr	r3, [r7, #20]
   1ccfe:	601a      	str	r2, [r3, #0]
    strn_print_env->remain -= len;
   1cd00:	697b      	ldr	r3, [r7, #20]
   1cd02:	685a      	ldr	r2, [r3, #4]
   1cd04:	687b      	ldr	r3, [r7, #4]
   1cd06:	1ad2      	subs	r2, r2, r3
   1cd08:	697b      	ldr	r3, [r7, #20]
   1cd0a:	605a      	str	r2, [r3, #4]
}
   1cd0c:	bf00      	nop
   1cd0e:	3718      	adds	r7, #24
   1cd10:	46bd      	mov	sp, r7
   1cd12:	bd80      	pop	{r7, pc}

0001cd14 <vsnprintf>:
// uClibc requires this alias to be defined, or there may be link errors
// when linkings against it statically.
int __GI_vsnprintf(char *str, size_t size, const char *fmt, va_list ap) __attribute__((weak, alias ("vsnprintf")));
#endif

int vsnprintf(char *str, size_t size, const char *fmt, va_list ap) {
   1cd14:	b580      	push	{r7, lr}
   1cd16:	b08a      	sub	sp, #40	; 0x28
   1cd18:	af00      	add	r7, sp, #0
   1cd1a:	60f8      	str	r0, [r7, #12]
   1cd1c:	60b9      	str	r1, [r7, #8]
   1cd1e:	607a      	str	r2, [r7, #4]
   1cd20:	603b      	str	r3, [r7, #0]
    strn_print_env_t strn_print_env = {str, size};
   1cd22:	68fb      	ldr	r3, [r7, #12]
   1cd24:	61fb      	str	r3, [r7, #28]
   1cd26:	68bb      	ldr	r3, [r7, #8]
   1cd28:	623b      	str	r3, [r7, #32]
    mp_print_t print = {&strn_print_env, strn_print_strn};
   1cd2a:	f107 031c 	add.w	r3, r7, #28
   1cd2e:	617b      	str	r3, [r7, #20]
   1cd30:	4b0e      	ldr	r3, [pc, #56]	; (1cd6c <vsnprintf+0x58>)
   1cd32:	61bb      	str	r3, [r7, #24]
    int len = mp_vprintf(&print, fmt, ap);
   1cd34:	f107 0314 	add.w	r3, r7, #20
   1cd38:	683a      	ldr	r2, [r7, #0]
   1cd3a:	6879      	ldr	r1, [r7, #4]
   1cd3c:	4618      	mov	r0, r3
   1cd3e:	f7e5 f9ad 	bl	209c <mp_vprintf>
   1cd42:	6278      	str	r0, [r7, #36]	; 0x24
    // add terminating null byte
    if (size > 0) {
   1cd44:	68bb      	ldr	r3, [r7, #8]
   1cd46:	2b00      	cmp	r3, #0
   1cd48:	d00a      	beq.n	1cd60 <vsnprintf+0x4c>
        if (strn_print_env.remain == 0) {
   1cd4a:	6a3b      	ldr	r3, [r7, #32]
   1cd4c:	2b00      	cmp	r3, #0
   1cd4e:	d104      	bne.n	1cd5a <vsnprintf+0x46>
            strn_print_env.cur[-1] = 0;
   1cd50:	69fb      	ldr	r3, [r7, #28]
   1cd52:	3b01      	subs	r3, #1
   1cd54:	2200      	movs	r2, #0
   1cd56:	701a      	strb	r2, [r3, #0]
   1cd58:	e002      	b.n	1cd60 <vsnprintf+0x4c>
        } else {
            strn_print_env.cur[0] = 0;
   1cd5a:	69fb      	ldr	r3, [r7, #28]
   1cd5c:	2200      	movs	r2, #0
   1cd5e:	701a      	strb	r2, [r3, #0]
        }
    }
    return len;
   1cd60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   1cd62:	4618      	mov	r0, r3
   1cd64:	3728      	adds	r7, #40	; 0x28
   1cd66:	46bd      	mov	sp, r7
   1cd68:	bd80      	pop	{r7, pc}
   1cd6a:	bf00      	nop
   1cd6c:	0001ccc7 	.word	0x0001ccc7

0001cd70 <snprintf>:

int snprintf(char *str, size_t size, const char *fmt, ...) {
   1cd70:	b40c      	push	{r2, r3}
   1cd72:	b580      	push	{r7, lr}
   1cd74:	b084      	sub	sp, #16
   1cd76:	af00      	add	r7, sp, #0
   1cd78:	6078      	str	r0, [r7, #4]
   1cd7a:	6039      	str	r1, [r7, #0]
    va_list ap;
    va_start(ap, fmt);
   1cd7c:	f107 031c 	add.w	r3, r7, #28
   1cd80:	60bb      	str	r3, [r7, #8]
    int ret = vsnprintf(str, size, fmt, ap);
   1cd82:	68bb      	ldr	r3, [r7, #8]
   1cd84:	69ba      	ldr	r2, [r7, #24]
   1cd86:	6839      	ldr	r1, [r7, #0]
   1cd88:	6878      	ldr	r0, [r7, #4]
   1cd8a:	f7ff ffc3 	bl	1cd14 <vsnprintf>
   1cd8e:	60f8      	str	r0, [r7, #12]
    va_end(ap);
    return ret;
   1cd90:	68fb      	ldr	r3, [r7, #12]
}
   1cd92:	4618      	mov	r0, r3
   1cd94:	3710      	adds	r7, #16
   1cd96:	46bd      	mov	sp, r7
   1cd98:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
   1cd9c:	b002      	add	sp, #8
   1cd9e:	4770      	bx	lr

0001cda0 <do_str>:
#include "driverlib/gpio.h"
#include "driverlib/rom.h"
#include "driverlib/rom_map.h"

#if MICROPY_ENABLE_COMPILER
void do_str(const char *src, mp_parse_input_kind_t input_kind) {
   1cda0:	b580      	push	{r7, lr}
   1cda2:	b094      	sub	sp, #80	; 0x50
   1cda4:	af00      	add	r7, sp, #0
   1cda6:	6078      	str	r0, [r7, #4]
   1cda8:	6039      	str	r1, [r7, #0]
    nlr_buf_t nlr;
    if (nlr_push(&nlr) == 0) {
   1cdaa:	f107 0314 	add.w	r3, r7, #20
   1cdae:	4618      	mov	r0, r3
   1cdb0:	f7e3 fa84 	bl	2bc <nlr_push>
   1cdb4:	4603      	mov	r3, r0
   1cdb6:	2b00      	cmp	r3, #0
   1cdb8:	d121      	bne.n	1cdfe <do_str+0x5e>
        mp_lexer_t *lex = mp_lexer_new_from_str_len(MP_QSTR__lt_stdin_gt_, src, strlen(src), 0);
   1cdba:	6878      	ldr	r0, [r7, #4]
   1cdbc:	f001 fcee 	bl	1e79c <strlen>
   1cdc0:	4602      	mov	r2, r0
   1cdc2:	2300      	movs	r3, #0
   1cdc4:	6879      	ldr	r1, [r7, #4]
   1cdc6:	2037      	movs	r0, #55	; 0x37
   1cdc8:	f7e6 fd93 	bl	38f2 <mp_lexer_new_from_str_len>
   1cdcc:	64f8      	str	r0, [r7, #76]	; 0x4c
        qstr source_name = lex->source_name;
   1cdce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   1cdd0:	681b      	ldr	r3, [r3, #0]
   1cdd2:	64bb      	str	r3, [r7, #72]	; 0x48
        mp_parse_tree_t parse_tree = mp_parse(lex, input_kind);
   1cdd4:	f107 030c 	add.w	r3, r7, #12
   1cdd8:	683a      	ldr	r2, [r7, #0]
   1cdda:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
   1cddc:	4618      	mov	r0, r3
   1cdde:	f7e7 fc45 	bl	466c <mp_parse>
        mp_obj_t module_fun = mp_compile(&parse_tree, source_name, MP_EMIT_OPT_NONE, true);
   1cde2:	f107 000c 	add.w	r0, r7, #12
   1cde6:	2301      	movs	r3, #1
   1cde8:	2200      	movs	r2, #0
   1cdea:	6cb9      	ldr	r1, [r7, #72]	; 0x48
   1cdec:	f7ec fe27 	bl	9a3e <mp_compile>
   1cdf0:	6478      	str	r0, [r7, #68]	; 0x44
        mp_call_function_0(module_fun);
   1cdf2:	6c78      	ldr	r0, [r7, #68]	; 0x44
   1cdf4:	f7ef f96a 	bl	c0cc <mp_call_function_0>
        nlr_pop();
   1cdf8:	f7e3 fa4e 	bl	298 <nlr_pop>
    } else {
        // uncaught exception
        mp_obj_print_exception(&mp_plat_print, (mp_obj_t)nlr.ret_val);
    }
}
   1cdfc:	e004      	b.n	1ce08 <do_str+0x68>
        mp_obj_print_exception(&mp_plat_print, (mp_obj_t)nlr.ret_val);
   1cdfe:	69bb      	ldr	r3, [r7, #24]
   1ce00:	4619      	mov	r1, r3
   1ce02:	4803      	ldr	r0, [pc, #12]	; (1ce10 <do_str+0x70>)
   1ce04:	f7f0 ff96 	bl	dd34 <mp_obj_print_exception>
}
   1ce08:	bf00      	nop
   1ce0a:	3750      	adds	r7, #80	; 0x50
   1ce0c:	46bd      	mov	sp, r7
   1ce0e:	bd80      	pop	{r7, pc}
   1ce10:	000210cc 	.word	0x000210cc

0001ce14 <main>:
static char *stack_top;
#if MICROPY_ENABLE_GC
static char heap[2048];
#endif

int main(int argc, char **argv) {
   1ce14:	b580      	push	{r7, lr}
   1ce16:	b084      	sub	sp, #16
   1ce18:	af00      	add	r7, sp, #0
   1ce1a:	6078      	str	r0, [r7, #4]
   1ce1c:	6039      	str	r1, [r7, #0]
    int stack_dummy;
    stack_top = (char*)&stack_dummy;
   1ce1e:	4a0a      	ldr	r2, [pc, #40]	; (1ce48 <main+0x34>)
   1ce20:	f107 030c 	add.w	r3, r7, #12
   1ce24:	6013      	str	r3, [r2, #0]

    #if MICROPY_ENABLE_GC
    gc_init(heap, heap + sizeof(heap));
   1ce26:	4b09      	ldr	r3, [pc, #36]	; (1ce4c <main+0x38>)
   1ce28:	4619      	mov	r1, r3
   1ce2a:	4809      	ldr	r0, [pc, #36]	; (1ce50 <main+0x3c>)
   1ce2c:	f7e3 fb6a 	bl	504 <gc_init>
    #endif
    mp_init();
   1ce30:	f7ee fcbe 	bl	b7b0 <mp_init>
        if (pyexec_event_repl_process_char(c)) {
            break;
        }
    }
    #else
    pyexec_friendly_repl();
   1ce34:	f001 fa58 	bl	1e2e8 <pyexec_friendly_repl>
    //do_str("print('hello world!', list(x+1 for x in range(10)), end='eol\\n')", MP_PARSE_SINGLE_INPUT);
    //do_str("for i in range(10):\r\n  print(i)", MP_PARSE_FILE_INPUT);
    #else
    pyexec_frozen_module("frozentest.py");
    #endif
    mp_deinit();
   1ce38:	f7ee fce0 	bl	b7fc <mp_deinit>
    return 0;
   1ce3c:	2300      	movs	r3, #0
}
   1ce3e:	4618      	mov	r0, r3
   1ce40:	3710      	adds	r7, #16
   1ce42:	46bd      	mov	sp, r7
   1ce44:	bd80      	pop	{r7, pc}
   1ce46:	bf00      	nop
   1ce48:	20000818 	.word	0x20000818
   1ce4c:	2000101c 	.word	0x2000101c
   1ce50:	2000081c 	.word	0x2000081c

0001ce54 <gc_collect>:

void gc_collect(void) {
   1ce54:	b580      	push	{r7, lr}
   1ce56:	b082      	sub	sp, #8
   1ce58:	af00      	add	r7, sp, #0
    // WARNING: This gc_collect implementation doesn't try to get root
    // pointers from CPU registers, and thus may function incorrectly.
    void *dummy;
    gc_collect_start();
   1ce5a:	f7e3 fbc1 	bl	5e0 <gc_collect_start>
    gc_collect_root(&dummy, ((mp_uint_t)stack_top - (mp_uint_t)&dummy) / sizeof(mp_uint_t));
   1ce5e:	4b09      	ldr	r3, [pc, #36]	; (1ce84 <gc_collect+0x30>)
   1ce60:	681b      	ldr	r3, [r3, #0]
   1ce62:	461a      	mov	r2, r3
   1ce64:	1d3b      	adds	r3, r7, #4
   1ce66:	1ad3      	subs	r3, r2, r3
   1ce68:	089a      	lsrs	r2, r3, #2
   1ce6a:	1d3b      	adds	r3, r7, #4
   1ce6c:	4611      	mov	r1, r2
   1ce6e:	4618      	mov	r0, r3
   1ce70:	f7e3 fc02 	bl	678 <gc_collect_root>
    gc_collect_end();
   1ce74:	f7e3 fc4a 	bl	70c <gc_collect_end>
    gc_dump_info();
   1ce78:	f7e3 ffc2 	bl	e00 <gc_dump_info>
}
   1ce7c:	bf00      	nop
   1ce7e:	3708      	adds	r7, #8
   1ce80:	46bd      	mov	sp, r7
   1ce82:	bd80      	pop	{r7, pc}
   1ce84:	20000818 	.word	0x20000818

0001ce88 <mp_lexer_new_from_file>:

mp_lexer_t *mp_lexer_new_from_file(const char *filename) {
   1ce88:	b580      	push	{r7, lr}
   1ce8a:	b082      	sub	sp, #8
   1ce8c:	af00      	add	r7, sp, #0
   1ce8e:	6078      	str	r0, [r7, #4]
    mp_raise_OSError(MP_ENOENT);
   1ce90:	2002      	movs	r0, #2
   1ce92:	f7f0 fa85 	bl	d3a0 <mp_raise_OSError>

0001ce96 <mp_import_stat>:
}

mp_import_stat_t mp_import_stat(const char *path) { // @suppress("Type cannot be resolved")
   1ce96:	b480      	push	{r7}
   1ce98:	b083      	sub	sp, #12
   1ce9a:	af00      	add	r7, sp, #0
   1ce9c:	6078      	str	r0, [r7, #4]
    return MP_IMPORT_STAT_NO_EXIST;
   1ce9e:	2300      	movs	r3, #0
}
   1cea0:	4618      	mov	r0, r3
   1cea2:	370c      	adds	r7, #12
   1cea4:	46bd      	mov	sp, r7
   1cea6:	f85d 7b04 	ldr.w	r7, [sp], #4
   1ceaa:	4770      	bx	lr

0001ceac <mp_builtin_open>:

mp_obj_t mp_builtin_open(size_t n_args, const mp_obj_t *args, mp_map_t *kwargs) {
   1ceac:	b480      	push	{r7}
   1ceae:	b085      	sub	sp, #20
   1ceb0:	af00      	add	r7, sp, #0
   1ceb2:	60f8      	str	r0, [r7, #12]
   1ceb4:	60b9      	str	r1, [r7, #8]
   1ceb6:	607a      	str	r2, [r7, #4]
    return mp_const_none;
   1ceb8:	4b03      	ldr	r3, [pc, #12]	; (1cec8 <mp_builtin_open+0x1c>)
}
   1ceba:	4618      	mov	r0, r3
   1cebc:	3714      	adds	r7, #20
   1cebe:	46bd      	mov	sp, r7
   1cec0:	f85d 7b04 	ldr.w	r7, [sp], #4
   1cec4:	4770      	bx	lr
   1cec6:	bf00      	nop
   1cec8:	0002511c 	.word	0x0002511c

0001cecc <nlr_jump_fail>:
MP_DEFINE_CONST_FUN_OBJ_KW(mp_builtin_open_obj, 1, mp_builtin_open);

void nlr_jump_fail(void *val) {
   1cecc:	b480      	push	{r7}
   1cece:	b083      	sub	sp, #12
   1ced0:	af00      	add	r7, sp, #0
   1ced2:	6078      	str	r0, [r7, #4]
    while (1);
   1ced4:	e7fe      	b.n	1ced4 <nlr_jump_fail+0x8>

0001ced6 <__fatal_error>:
}

void NORETURN __fatal_error(const char *msg) {
   1ced6:	b480      	push	{r7}
   1ced8:	b083      	sub	sp, #12
   1ceda:	af00      	add	r7, sp, #0
   1cedc:	6078      	str	r0, [r7, #4]
    while (1);
   1cede:	e7fe      	b.n	1cede <__fatal_error+0x8>

0001cee0 <__assert_func>:
}

#ifndef NDEBUG
void MP_WEAK __assert_func(const char *file, int line, const char *func, const char *expr) {
   1cee0:	b580      	push	{r7, lr}
   1cee2:	b084      	sub	sp, #16
   1cee4:	af00      	add	r7, sp, #0
   1cee6:	60f8      	str	r0, [r7, #12]
   1cee8:	60b9      	str	r1, [r7, #8]
   1ceea:	607a      	str	r2, [r7, #4]
   1ceec:	603b      	str	r3, [r7, #0]
    printf("Assertion '%s' failed, at file %s:%d\n", expr, file, line);
   1ceee:	68bb      	ldr	r3, [r7, #8]
   1cef0:	68fa      	ldr	r2, [r7, #12]
   1cef2:	6839      	ldr	r1, [r7, #0]
   1cef4:	4802      	ldr	r0, [pc, #8]	; (1cf00 <__assert_func+0x20>)
   1cef6:	f7ff fe91 	bl	1cc1c <printf>
    __fatal_error("Assertion failed");
   1cefa:	4802      	ldr	r0, [pc, #8]	; (1cf04 <__assert_func+0x24>)
   1cefc:	f7ff ffeb 	bl	1ced6 <__fatal_error>
   1cf00:	000271d4 	.word	0x000271d4
   1cf04:	000271fc 	.word	0x000271fc

0001cf08 <_start>:
//    0,
//    (uint32_t)&Default_Handler, // PendSV_Handler
//    (uint32_t)&Default_Handler, // SysTick_Handler
//};

void _start(void) {
   1cf08:	b580      	push	{r7, lr}
   1cf0a:	af00      	add	r7, sp, #0
    // when we get here: stack is initialised, bss is clear, data is copied

    // SCB->CCR: enable 8-byte stack alignment for IRQ handlers, in accord with EABI
    *((volatile uint32_t*)0xe000ed14) |= 1 << 9;
   1cf0c:	4a06      	ldr	r2, [pc, #24]	; (1cf28 <_start+0x20>)
   1cf0e:	4b06      	ldr	r3, [pc, #24]	; (1cf28 <_start+0x20>)
   1cf10:	681b      	ldr	r3, [r3, #0]
   1cf12:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   1cf16:	6013      	str	r3, [r2, #0]

    // initialise the cpu and peripherals
    #if MICROPY_MIN_USE_TM4C123_MCU
    void tm4c123_init(void);
    tm4c123_init();
   1cf18:	f000 f808 	bl	1cf2c <tm4c123_init>
    #endif

    // now that we have a basic system up and running we can call main
    main(0, NULL);
   1cf1c:	2100      	movs	r1, #0
   1cf1e:	2000      	movs	r0, #0
   1cf20:	f7ff ff78 	bl	1ce14 <main>

    // we must not return
    for (;;) {
   1cf24:	e7fe      	b.n	1cf24 <_start+0x1c>
   1cf26:	bf00      	nop
   1cf28:	e000ed14 	.word	0xe000ed14

0001cf2c <tm4c123_init>:

//#define SYSCTL ((periph_sysctl_t*)  0x400FE000)



void tm4c123_init(void) {
   1cf2c:	b580      	push	{r7, lr}
   1cf2e:	af00      	add	r7, sp, #0
    // basic MCU config

    // set system clock to 80MHz
    SYSCTL->RCC |= (uint32_t)0x00000800;   // set BYPASS bit
   1cf30:	4a4d      	ldr	r2, [pc, #308]	; (1d068 <tm4c123_init+0x13c>)
   1cf32:	4b4d      	ldr	r3, [pc, #308]	; (1d068 <tm4c123_init+0x13c>)
   1cf34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   1cf36:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   1cf3a:	6613      	str	r3, [r2, #96]	; 0x60
    SYSCTL->RCC2 |= (uint32_t)0xC0000800;  // set BYPASS2 bit, DIV400 and USERCC2
   1cf3c:	4a4a      	ldr	r2, [pc, #296]	; (1d068 <tm4c123_init+0x13c>)
   1cf3e:	4b4a      	ldr	r3, [pc, #296]	; (1d068 <tm4c123_init+0x13c>)
   1cf40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   1cf42:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
   1cf46:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   1cf4a:	6713      	str	r3, [r2, #112]	; 0x70
    SYSCTL->RCC &= (uint32_t)0xFFBFFFFF;   // clear USESYSDIV bit
   1cf4c:	4a46      	ldr	r2, [pc, #280]	; (1d068 <tm4c123_init+0x13c>)
   1cf4e:	4b46      	ldr	r3, [pc, #280]	; (1d068 <tm4c123_init+0x13c>)
   1cf50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   1cf52:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
   1cf56:	6613      	str	r3, [r2, #96]	; 0x60
    SYSCTL->RCC = (SYSCTL->RCC & (uint32_t)0xFFFFF83F) | (uint32_t)0x00000B70;    // XTAL to 16 MHz
   1cf58:	4a43      	ldr	r2, [pc, #268]	; (1d068 <tm4c123_init+0x13c>)
   1cf5a:	4b43      	ldr	r3, [pc, #268]	; (1d068 <tm4c123_init+0x13c>)
   1cf5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   1cf5e:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
   1cf62:	f443 6337 	orr.w	r3, r3, #2928	; 0xb70
   1cf66:	6613      	str	r3, [r2, #96]	; 0x60
    SYSCTL->MISC &= 0xFFFFFFBF;            // clear PLLLRIS bit
   1cf68:	4a3f      	ldr	r2, [pc, #252]	; (1d068 <tm4c123_init+0x13c>)
   1cf6a:	4b3f      	ldr	r3, [pc, #252]	; (1d068 <tm4c123_init+0x13c>)
   1cf6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   1cf6e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   1cf72:	6593      	str	r3, [r2, #88]	; 0x58
    SYSCTL->RCC2 &= (uint32_t)0xFFFFDFFF;  // clear PWRDN2 Bit to enable PLL
   1cf74:	4a3c      	ldr	r2, [pc, #240]	; (1d068 <tm4c123_init+0x13c>)
   1cf76:	4b3c      	ldr	r3, [pc, #240]	; (1d068 <tm4c123_init+0x13c>)
   1cf78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   1cf7a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
   1cf7e:	6713      	str	r3, [r2, #112]	; 0x70
    SYSCTL->RCC2 = (SYSCTL->RCC2 & (uint32_t)0xE03FFFFF) | (uint32_t)0x01000000;  // Set SYSDIV2 to 0x2 for 80MHz
   1cf80:	4a39      	ldr	r2, [pc, #228]	; (1d068 <tm4c123_init+0x13c>)
   1cf82:	4b39      	ldr	r3, [pc, #228]	; (1d068 <tm4c123_init+0x13c>)
   1cf84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   1cf86:	f023 53fe 	bic.w	r3, r3, #532676608	; 0x1fc00000
   1cf8a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
   1cf8e:	6713      	str	r3, [r2, #112]	; 0x70
    SYSCTL->RCC |= (uint32_t)0x00400000;   // set USESYSDIV bit
   1cf90:	4a35      	ldr	r2, [pc, #212]	; (1d068 <tm4c123_init+0x13c>)
   1cf92:	4b35      	ldr	r3, [pc, #212]	; (1d068 <tm4c123_init+0x13c>)
   1cf94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   1cf96:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
   1cf9a:	6613      	str	r3, [r2, #96]	; 0x60
    while(!(SYSCTL->RIS & 0x00000040)){};  // wait for Pll to lock, PLLLRIS bit
   1cf9c:	bf00      	nop
   1cf9e:	4b32      	ldr	r3, [pc, #200]	; (1d068 <tm4c123_init+0x13c>)
   1cfa0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   1cfa2:	f003 0340 	and.w	r3, r3, #64	; 0x40
   1cfa6:	2b00      	cmp	r3, #0
   1cfa8:	d0f9      	beq.n	1cf9e <tm4c123_init+0x72>
    SYSCTL->RCC2 &= 0xFFFFF7FF;            // clear BYPASS2 bit, clears BYPASS as well
   1cfaa:	4a2f      	ldr	r2, [pc, #188]	; (1d068 <tm4c123_init+0x13c>)
   1cfac:	4b2e      	ldr	r3, [pc, #184]	; (1d068 <tm4c123_init+0x13c>)
   1cfae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   1cfb0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   1cfb4:	6713      	str	r3, [r2, #112]	; 0x70
    // write final configuration
    SYSCTL->RCC = (uint32_t)(0x07C00550);  // 0b0000 0 1111 1 0 0 000 000 0 0 0 10101 01 000 0
   1cfb6:	4b2c      	ldr	r3, [pc, #176]	; (1d068 <tm4c123_init+0x13c>)
   1cfb8:	4a2c      	ldr	r2, [pc, #176]	; (1d06c <tm4c123_init+0x140>)
   1cfba:	661a      	str	r2, [r3, #96]	; 0x60
    SYSCTL->RCC2 = (uint32_t)(0xC1000000); // 0b 1100 0001 0000 0000 0000 0000 0000 0000
   1cfbc:	4b2a      	ldr	r3, [pc, #168]	; (1d068 <tm4c123_init+0x13c>)
   1cfbe:	f04f 4241 	mov.w	r2, #3238002688	; 0xc1000000
   1cfc2:	671a      	str	r2, [r3, #112]	; 0x70

    // enable high performance GPIO BUS Ctl
    SYSCTL->GPIOHBCTL = 0x0000003F;
   1cfc4:	4b28      	ldr	r3, [pc, #160]	; (1d068 <tm4c123_init+0x13c>)
   1cfc6:	223f      	movs	r2, #63	; 0x3f
   1cfc8:	66da      	str	r2, [r3, #108]	; 0x6c

    // enable GPIO Port F
        SYSCTL->RCGCGPIO |= 0x00000020;
   1cfca:	4a27      	ldr	r2, [pc, #156]	; (1d068 <tm4c123_init+0x13c>)
   1cfcc:	4b26      	ldr	r3, [pc, #152]	; (1d068 <tm4c123_init+0x13c>)
   1cfce:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
   1cfd2:	f043 0320 	orr.w	r3, r3, #32
   1cfd6:	f8c2 3608 	str.w	r3, [r2, #1544]	; 0x608
    //*((volatile uint32_t*)0x400FE608) = 0x00000021;
    while( !(SYSCTL->PRGPIO & 0x00000020)){};
   1cfda:	bf00      	nop
   1cfdc:	4b22      	ldr	r3, [pc, #136]	; (1d068 <tm4c123_init+0x13c>)
   1cfde:	f8d3 3a08 	ldr.w	r3, [r3, #2568]	; 0xa08
   1cfe2:	f003 0320 	and.w	r3, r3, #32
   1cfe6:	2b00      	cmp	r3, #0
   1cfe8:	d0f8      	beq.n	1cfdc <tm4c123_init+0xb0>
//    gpio_high(GPIOF, 3);
//    //*((volatile uint32_t*)0x4005D3FC) = 0x00000007;

    // enable UART0 at 9600 baud (TX=A1, RX=A0)
    // enable UART0
    SYSCTL->RCGCUART = 0x00000001;
   1cfea:	4b1f      	ldr	r3, [pc, #124]	; (1d068 <tm4c123_init+0x13c>)
   1cfec:	2201      	movs	r2, #1
   1cfee:	f8c3 2618 	str.w	r2, [r3, #1560]	; 0x618
    //*((volatile uint32_t*)0x400FE618) = 0x00000001;
    while(SYSCTL->PRUART != 0x00000001){};
   1cff2:	bf00      	nop
   1cff4:	4b1c      	ldr	r3, [pc, #112]	; (1d068 <tm4c123_init+0x13c>)
   1cff6:	f8d3 3a18 	ldr.w	r3, [r3, #2584]	; 0xa18
   1cffa:	2b01      	cmp	r3, #1
   1cffc:	d1fa      	bne.n	1cff4 <tm4c123_init+0xc8>
    //while( *((volatile uint32_t*)0x400FEA18) != 0x00000001){};

    // enable GPIO Port A
    SYSCTL->RCGCGPIO |= 0x00000001;
   1cffe:	4a1a      	ldr	r2, [pc, #104]	; (1d068 <tm4c123_init+0x13c>)
   1d000:	4b19      	ldr	r3, [pc, #100]	; (1d068 <tm4c123_init+0x13c>)
   1d002:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
   1d006:	f043 0301 	orr.w	r3, r3, #1
   1d00a:	f8c2 3608 	str.w	r3, [r2, #1544]	; 0x608
    while( !(SYSCTL->PRGPIO & 0x00000001)){};
   1d00e:	bf00      	nop
   1d010:	4b15      	ldr	r3, [pc, #84]	; (1d068 <tm4c123_init+0x13c>)
   1d012:	f8d3 3a08 	ldr.w	r3, [r3, #2568]	; 0xa08
   1d016:	f003 0301 	and.w	r3, r3, #1
   1d01a:	2b00      	cmp	r3, #0
   1d01c:	d0f8      	beq.n	1d010 <tm4c123_init+0xe4>

//    // GPIOA already configured for UART0 after reset
//    gpio_init(GPIOA, 0, GPIO_MODE_ALT, GPIO_PULL_NONE, 1);
//    gpio_init(GPIOA, 1, GPIO_MODE_ALT, GPIO_PULL_NONE, 1);

    MAP_GPIOPinTypeUART(GPIO_PORTA_AHB_BASE, GPIO_PIN_0 | GPIO_PIN_1);
   1d01e:	2103      	movs	r1, #3
   1d020:	4813      	ldr	r0, [pc, #76]	; (1d070 <tm4c123_init+0x144>)
   1d022:	f002 fa2f 	bl	1f484 <GPIOPinTypeUART>

    // BRD = IBRD + FRAC = UARTSysClk / (ClkDiv * BaudRate)
    // 520.8333 = 104  + 0.166 = 80MHz      / (16     * 9600    )
    // FBRD = (0.833333 * 64 + 0.5) ~ 53
    UART0->CTL &= ~0x00000001;
   1d026:	4a13      	ldr	r2, [pc, #76]	; (1d074 <tm4c123_init+0x148>)
   1d028:	4b12      	ldr	r3, [pc, #72]	; (1d074 <tm4c123_init+0x148>)
   1d02a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1d02c:	f023 0301 	bic.w	r3, r3, #1
   1d030:	6313      	str	r3, [r2, #48]	; 0x30
    UART0->IBRD = 0x00000208;
   1d032:	4b10      	ldr	r3, [pc, #64]	; (1d074 <tm4c123_init+0x148>)
   1d034:	f44f 7202 	mov.w	r2, #520	; 0x208
   1d038:	625a      	str	r2, [r3, #36]	; 0x24
    UART0->FBRD = 0x00000035;
   1d03a:	4b0e      	ldr	r3, [pc, #56]	; (1d074 <tm4c123_init+0x148>)
   1d03c:	2235      	movs	r2, #53	; 0x35
   1d03e:	629a      	str	r2, [r3, #40]	; 0x28
    UART0->LCRH = 0x00000060; // no stick parity, word length 8bit, FIFO enable, one STOP bit, odd parity, no parity check, no break
   1d040:	4b0c      	ldr	r3, [pc, #48]	; (1d074 <tm4c123_init+0x148>)
   1d042:	2260      	movs	r2, #96	; 0x60
   1d044:	62da      	str	r2, [r3, #44]	; 0x2c
    UART0->CC = 0x00000000;   // use SysClock
   1d046:	4b0b      	ldr	r3, [pc, #44]	; (1d074 <tm4c123_init+0x148>)
   1d048:	2200      	movs	r2, #0
   1d04a:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    UART0->CTL = 0x00000300; // disable cts & rts, RXE, TXE, no loopback, 16x oversampling, TXRIS on IFLS match, no smart card, no low power, no SIR, UART enabled
   1d04e:	4b09      	ldr	r3, [pc, #36]	; (1d074 <tm4c123_init+0x148>)
   1d050:	f44f 7240 	mov.w	r2, #768	; 0x300
   1d054:	631a      	str	r2, [r3, #48]	; 0x30
    UART0->CTL |= 0x00000001;
   1d056:	4a07      	ldr	r2, [pc, #28]	; (1d074 <tm4c123_init+0x148>)
   1d058:	4b06      	ldr	r3, [pc, #24]	; (1d074 <tm4c123_init+0x148>)
   1d05a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1d05c:	f043 0301 	orr.w	r3, r3, #1
   1d060:	6313      	str	r3, [r2, #48]	; 0x30
    // to change settings in active mode: page 918 of reference
}
   1d062:	bf00      	nop
   1d064:	bd80      	pop	{r7, pc}
   1d066:	bf00      	nop
   1d068:	400fe000 	.word	0x400fe000
   1d06c:	07c00550 	.word	0x07c00550
   1d070:	40058000 	.word	0x40058000
   1d074:	4000c000 	.word	0x4000c000

0001d078 <ResetISR>:
// application.
//
//*****************************************************************************
void
ResetISR(void)
{
   1d078:	b580      	push	{r7, lr}
   1d07a:	b082      	sub	sp, #8
   1d07c:	af00      	add	r7, sp, #0
    uint32_t *pui32Src, *pui32Dest;

    //
    // Copy the data segment initializers from flash to SRAM.
    //
    pui32Src = &_ldata;
   1d07e:	4b13      	ldr	r3, [pc, #76]	; (1d0cc <zero_loop+0x24>)
   1d080:	607b      	str	r3, [r7, #4]
    for(pui32Dest = &_data; pui32Dest < &_edata; )
   1d082:	4b13      	ldr	r3, [pc, #76]	; (1d0d0 <zero_loop+0x28>)
   1d084:	603b      	str	r3, [r7, #0]
   1d086:	e007      	b.n	1d098 <ResetISR+0x20>
    {
        *pui32Dest++ = *pui32Src++;
   1d088:	683b      	ldr	r3, [r7, #0]
   1d08a:	1d1a      	adds	r2, r3, #4
   1d08c:	603a      	str	r2, [r7, #0]
   1d08e:	687a      	ldr	r2, [r7, #4]
   1d090:	1d11      	adds	r1, r2, #4
   1d092:	6079      	str	r1, [r7, #4]
   1d094:	6812      	ldr	r2, [r2, #0]
   1d096:	601a      	str	r2, [r3, #0]
    for(pui32Dest = &_data; pui32Dest < &_edata; )
   1d098:	683b      	ldr	r3, [r7, #0]
   1d09a:	4a0e      	ldr	r2, [pc, #56]	; (1d0d4 <zero_loop+0x2c>)
   1d09c:	4293      	cmp	r3, r2
   1d09e:	d3f3      	bcc.n	1d088 <ResetISR+0x10>
    }

    //
    // Zero fill the bss segment.
    //
    __asm("    ldr     r0, =_bss\n"
   1d0a0:	4813      	ldr	r0, [pc, #76]	; (1d0f0 <IntDefaultHandler+0x8>)
   1d0a2:	4914      	ldr	r1, [pc, #80]	; (1d0f4 <IntDefaultHandler+0xc>)
   1d0a4:	f04f 0200 	mov.w	r2, #0

0001d0a8 <zero_loop>:
   1d0a8:	4288      	cmp	r0, r1
   1d0aa:	bfb8      	it	lt
   1d0ac:	f840 2b04 	strlt.w	r2, [r0], #4
   1d0b0:	dbfa      	blt.n	1d0a8 <zero_loop>
    // APIs must be done here prior to the floating-point unit being enabled.
    //
    // Note that this does not use DriverLib since it might not be included in
    // this project.
    //
    HWREG(NVIC_CPAC) = ((HWREG(NVIC_CPAC) &
   1d0b2:	4a09      	ldr	r2, [pc, #36]	; (1d0d8 <zero_loop+0x30>)
   1d0b4:	4b08      	ldr	r3, [pc, #32]	; (1d0d8 <zero_loop+0x30>)
   1d0b6:	681b      	ldr	r3, [r3, #0]
                         ~(NVIC_CPAC_CP10_M | NVIC_CPAC_CP11_M)) |
                        NVIC_CPAC_CP10_FULL | NVIC_CPAC_CP11_FULL);
   1d0b8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
    HWREG(NVIC_CPAC) = ((HWREG(NVIC_CPAC) &
   1d0bc:	6013      	str	r3, [r2, #0]

    //
    // Call the application's entry point.
    //
    _start();
   1d0be:	f7ff ff23 	bl	1cf08 <_start>
}
   1d0c2:	bf00      	nop
   1d0c4:	3708      	adds	r7, #8
   1d0c6:	46bd      	mov	sp, r7
   1d0c8:	bd80      	pop	{r7, pc}
   1d0ca:	bf00      	nop
   1d0cc:	00028298 	.word	0x00028298
   1d0d0:	20000000 	.word	0x20000000
   1d0d4:	20000814 	.word	0x20000814
   1d0d8:	e000ed88 	.word	0xe000ed88

0001d0dc <NmiSR>:
// by a debugger.
//
//*****************************************************************************
static void
NmiSR(void)
{
   1d0dc:	b480      	push	{r7}
   1d0de:	af00      	add	r7, sp, #0
    //
    // Enter an infinite loop.
    //
    while(1)
   1d0e0:	e7fe      	b.n	1d0e0 <NmiSR+0x4>

0001d0e2 <FaultISR>:
// for examination by a debugger.
//
//*****************************************************************************
static void
FaultISR(void)
{
   1d0e2:	b480      	push	{r7}
   1d0e4:	af00      	add	r7, sp, #0
    //
    // Enter an infinite loop.
    //
    while(1)
   1d0e6:	e7fe      	b.n	1d0e6 <FaultISR+0x4>

0001d0e8 <IntDefaultHandler>:
// for examination by a debugger.
//
//*****************************************************************************
static void
IntDefaultHandler(void)
{
   1d0e8:	b480      	push	{r7}
   1d0ea:	af00      	add	r7, sp, #0
    //
    // Go into an infinite loop.
    //
    while(1)
   1d0ec:	e7fe      	b.n	1d0ec <IntDefaultHandler+0x4>
   1d0ee:	0000      	.short	0x0000
   1d0f0:	20000814 	.word	0x20000814
   1d0f4:	20001428 	.word	0x20001428

0001d0f8 <mp_hal_stdin_rx_chr>:
} periph_uart_t;
#define UART0 ((periph_uart_t*)0x4000C000)
#endif

// Receive single character
int mp_hal_stdin_rx_chr(void) {
   1d0f8:	b480      	push	{r7}
   1d0fa:	b083      	sub	sp, #12
   1d0fc:	af00      	add	r7, sp, #0
    unsigned char c = 0;
   1d0fe:	2300      	movs	r3, #0
   1d100:	71fb      	strb	r3, [r7, #7]
#if MICROPY_MIN_USE_STDOUT
    int r = read(0, &c, 1);
    (void)r;
#elif MICROPY_MIN_USE_TM4C123_MCU
    // wait for RXFE to clear
    while (UART0->FR & (1 << 4)) {
   1d102:	bf00      	nop
   1d104:	4b07      	ldr	r3, [pc, #28]	; (1d124 <mp_hal_stdin_rx_chr+0x2c>)
   1d106:	699b      	ldr	r3, [r3, #24]
   1d108:	f003 0310 	and.w	r3, r3, #16
   1d10c:	2b00      	cmp	r3, #0
   1d10e:	d1f9      	bne.n	1d104 <mp_hal_stdin_rx_chr+0xc>
    }
    c = UART0->DR & 0xFF;
   1d110:	4b04      	ldr	r3, [pc, #16]	; (1d124 <mp_hal_stdin_rx_chr+0x2c>)
   1d112:	681b      	ldr	r3, [r3, #0]
   1d114:	71fb      	strb	r3, [r7, #7]
#endif
    return c;
   1d116:	79fb      	ldrb	r3, [r7, #7]
}
   1d118:	4618      	mov	r0, r3
   1d11a:	370c      	adds	r7, #12
   1d11c:	46bd      	mov	sp, r7
   1d11e:	f85d 7b04 	ldr.w	r7, [sp], #4
   1d122:	4770      	bx	lr
   1d124:	4000c000 	.word	0x4000c000

0001d128 <mp_hal_stdout_tx_strn>:

// Send string of given length
void mp_hal_stdout_tx_strn(const char *str, mp_uint_t len) {
   1d128:	b480      	push	{r7}
   1d12a:	b083      	sub	sp, #12
   1d12c:	af00      	add	r7, sp, #0
   1d12e:	6078      	str	r0, [r7, #4]
   1d130:	6039      	str	r1, [r7, #0]
#if MICROPY_MIN_USE_STDOUT
    int r = write(1, str, len);
    (void)r;
#elif MICROPY_MIN_USE_TM4C123_MCU
    while (len--) {
   1d132:	e00c      	b.n	1d14e <mp_hal_stdout_tx_strn+0x26>
        // wait for TXFF to clear
        while (UART0->FR & (1 << 5)) {
   1d134:	bf00      	nop
   1d136:	4b0b      	ldr	r3, [pc, #44]	; (1d164 <mp_hal_stdout_tx_strn+0x3c>)
   1d138:	699b      	ldr	r3, [r3, #24]
   1d13a:	f003 0320 	and.w	r3, r3, #32
   1d13e:	2b00      	cmp	r3, #0
   1d140:	d1f9      	bne.n	1d136 <mp_hal_stdout_tx_strn+0xe>
        }
        UART0->DR = *str++;
   1d142:	4908      	ldr	r1, [pc, #32]	; (1d164 <mp_hal_stdout_tx_strn+0x3c>)
   1d144:	687b      	ldr	r3, [r7, #4]
   1d146:	1c5a      	adds	r2, r3, #1
   1d148:	607a      	str	r2, [r7, #4]
   1d14a:	781b      	ldrb	r3, [r3, #0]
   1d14c:	600b      	str	r3, [r1, #0]
    while (len--) {
   1d14e:	683b      	ldr	r3, [r7, #0]
   1d150:	1e5a      	subs	r2, r3, #1
   1d152:	603a      	str	r2, [r7, #0]
   1d154:	2b00      	cmp	r3, #0
   1d156:	d1ed      	bne.n	1d134 <mp_hal_stdout_tx_strn+0xc>
    }
#endif
}
   1d158:	bf00      	nop
   1d15a:	370c      	adds	r7, #12
   1d15c:	46bd      	mov	sp, r7
   1d15e:	f85d 7b04 	ldr.w	r7, [sp], #4
   1d162:	4770      	bx	lr
   1d164:	4000c000 	.word	0x4000c000

0001d168 <mp_hal_ticks_cpu_enable>:

//NORETURN void mp_hal_raise(HAL_StatusTypeDef status) {
//    mp_raise_OSError(mp_hal_status_to_errno_table[status]);
//}

void mp_hal_ticks_cpu_enable(void) {
   1d168:	b480      	push	{r7}
   1d16a:	af00      	add	r7, sp, #0
//        DWT->LAR = 0xc5acce55;
//        #endif
//        DWT->CYCCNT = 0;
//        DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
//    }
}
   1d16c:	bf00      	nop
   1d16e:	46bd      	mov	sp, r7
   1d170:	f85d 7b04 	ldr.w	r7, [sp], #4
   1d174:	4770      	bx	lr

0001d176 <mp_hal_ticks_cpu>:

mp_uint_t mp_hal_ticks_cpu(void) {
   1d176:	b480      	push	{r7}
   1d178:	af00      	add	r7, sp, #0
    return (*((volatile uint32_t *)0xE000E018));
   1d17a:	4b03      	ldr	r3, [pc, #12]	; (1d188 <mp_hal_ticks_cpu+0x12>)
   1d17c:	681b      	ldr	r3, [r3, #0]
}
   1d17e:	4618      	mov	r0, r3
   1d180:	46bd      	mov	sp, r7
   1d182:	f85d 7b04 	ldr.w	r7, [sp], #4
   1d186:	4770      	bx	lr
   1d188:	e000e018 	.word	0xe000e018

0001d18c <mp_hal_ticks_ms>:

mp_uint_t mp_hal_ticks_ms(void) {
   1d18c:	b598      	push	{r3, r4, r7, lr}
   1d18e:	af00      	add	r7, sp, #0
    return (*((volatile uint32_t *)0xE000E018)) / (MAP_SysCtlClockGet()*3000);
   1d190:	4b06      	ldr	r3, [pc, #24]	; (1d1ac <mp_hal_ticks_ms+0x20>)
   1d192:	681c      	ldr	r4, [r3, #0]
   1d194:	f002 f9ec 	bl	1f570 <SysCtlClockGet>
   1d198:	4602      	mov	r2, r0
   1d19a:	f640 33b8 	movw	r3, #3000	; 0xbb8
   1d19e:	fb03 f302 	mul.w	r3, r3, r2
   1d1a2:	fbb4 f3f3 	udiv	r3, r4, r3
}
   1d1a6:	4618      	mov	r0, r3
   1d1a8:	bd98      	pop	{r3, r4, r7, pc}
   1d1aa:	bf00      	nop
   1d1ac:	e000e018 	.word	0xe000e018

0001d1b0 <mp_hal_ticks_us>:

mp_uint_t mp_hal_ticks_us(void) {
   1d1b0:	b598      	push	{r3, r4, r7, lr}
   1d1b2:	af00      	add	r7, sp, #0
    return (*((volatile uint32_t *)0xE000E018)) / (MAP_SysCtlClockGet()*3000000);
   1d1b4:	4b05      	ldr	r3, [pc, #20]	; (1d1cc <mp_hal_ticks_us+0x1c>)
   1d1b6:	681c      	ldr	r4, [r3, #0]
   1d1b8:	f002 f9da 	bl	1f570 <SysCtlClockGet>
   1d1bc:	4602      	mov	r2, r0
   1d1be:	4b04      	ldr	r3, [pc, #16]	; (1d1d0 <mp_hal_ticks_us+0x20>)
   1d1c0:	fb03 f302 	mul.w	r3, r3, r2
   1d1c4:	fbb4 f3f3 	udiv	r3, r4, r3
}
   1d1c8:	4618      	mov	r0, r3
   1d1ca:	bd98      	pop	{r3, r4, r7, pc}
   1d1cc:	e000e018 	.word	0xe000e018
   1d1d0:	002dc6c0 	.word	0x002dc6c0

0001d1d4 <mp_hal_gpio_clock_enable>:

void mp_hal_gpio_clock_enable(const uint32_t port) {
   1d1d4:	b580      	push	{r7, lr}
   1d1d6:	b082      	sub	sp, #8
   1d1d8:	af00      	add	r7, sp, #0
   1d1da:	6078      	str	r0, [r7, #4]
    if (MAP_SysCtlPeripheralReady(port)) {
   1d1dc:	6878      	ldr	r0, [r7, #4]
   1d1de:	f002 f975 	bl	1f4cc <SysCtlPeripheralReady>
   1d1e2:	4603      	mov	r3, r0
   1d1e4:	2b00      	cmp	r3, #0
   1d1e6:	d10d      	bne.n	1d204 <mp_hal_gpio_clock_enable+0x30>
        //Already acive
        return;
    }
    MAP_SysCtlPeripheralEnable(port);
   1d1e8:	6878      	ldr	r0, [r7, #4]
   1d1ea:	f002 f985 	bl	1f4f8 <SysCtlPeripheralEnable>
    while(!MAP_SysCtlPeripheralReady(port)){};
   1d1ee:	bf00      	nop
   1d1f0:	6878      	ldr	r0, [r7, #4]
   1d1f2:	f002 f96b 	bl	1f4cc <SysCtlPeripheralReady>
   1d1f6:	4603      	mov	r3, r0
   1d1f8:	f083 0301 	eor.w	r3, r3, #1
   1d1fc:	b2db      	uxtb	r3, r3
   1d1fe:	2b00      	cmp	r3, #0
   1d200:	d1f6      	bne.n	1d1f0 <mp_hal_gpio_clock_enable+0x1c>
   1d202:	e000      	b.n	1d206 <mp_hal_gpio_clock_enable+0x32>
        return;
   1d204:	bf00      	nop
}
   1d206:	3708      	adds	r7, #8
   1d208:	46bd      	mov	sp, r7
   1d20a:	bd80      	pop	{r7, pc}

0001d20c <mp_hal_pin_config>:

void mp_hal_pin_config(mp_hal_pin_obj_t pin_obj, uint32_t dir, uint32_t type, uint32_t drive) {
   1d20c:	b580      	push	{r7, lr}
   1d20e:	b084      	sub	sp, #16
   1d210:	af00      	add	r7, sp, #0
   1d212:	60f8      	str	r0, [r7, #12]
   1d214:	60b9      	str	r1, [r7, #8]
   1d216:	607a      	str	r2, [r7, #4]
   1d218:	603b      	str	r3, [r7, #0]
    mp_hal_gpio_clock_enable(pin_obj->port);
   1d21a:	68fb      	ldr	r3, [r7, #12]
   1d21c:	689b      	ldr	r3, [r3, #8]
   1d21e:	4618      	mov	r0, r3
   1d220:	f7ff ffd8 	bl	1d1d4 <mp_hal_gpio_clock_enable>

    MAP_GPIODirModeSet(pin_obj->port, pin_obj->pin_mask, dir);
   1d224:	68fb      	ldr	r3, [r7, #12]
   1d226:	6898      	ldr	r0, [r3, #8]
   1d228:	68fb      	ldr	r3, [r7, #12]
   1d22a:	f893 3020 	ldrb.w	r3, [r3, #32]
   1d22e:	68ba      	ldr	r2, [r7, #8]
   1d230:	4619      	mov	r1, r3
   1d232:	f002 f805 	bl	1f240 <GPIODirModeSet>
    MAP_GPIOPadConfigSet(pin_obj->port, pin_obj->pin_mask, drive, type);
   1d236:	68fb      	ldr	r3, [r7, #12]
   1d238:	6898      	ldr	r0, [r3, #8]
   1d23a:	68fb      	ldr	r3, [r7, #12]
   1d23c:	f893 1020 	ldrb.w	r1, [r3, #32]
   1d240:	687b      	ldr	r3, [r7, #4]
   1d242:	683a      	ldr	r2, [r7, #0]
   1d244:	f002 f821 	bl	1f28a <GPIOPadConfigSet>
}
   1d248:	bf00      	nop
   1d24a:	3710      	adds	r7, #16
   1d24c:	46bd      	mov	sp, r7
   1d24e:	bd80      	pop	{r7, pc}

0001d250 <mp_hal_pin_set_af>:

void mp_hal_pin_set_af(mp_hal_pin_obj_t pin_obj, uint8_t af_id) {
   1d250:	b580      	push	{r7, lr}
   1d252:	b082      	sub	sp, #8
   1d254:	af00      	add	r7, sp, #0
   1d256:	6078      	str	r0, [r7, #4]
   1d258:	460b      	mov	r3, r1
   1d25a:	70fb      	strb	r3, [r7, #3]
    MAP_GPIODirModeSet(pin_obj->port, pin_obj->pin_mask, GPIO_DIR_MODE_HW);
   1d25c:	687b      	ldr	r3, [r7, #4]
   1d25e:	6898      	ldr	r0, [r3, #8]
   1d260:	687b      	ldr	r3, [r7, #4]
   1d262:	f893 3020 	ldrb.w	r3, [r3, #32]
   1d266:	2202      	movs	r2, #2
   1d268:	4619      	mov	r1, r3
   1d26a:	f001 ffe9 	bl	1f240 <GPIODirModeSet>
    MAP_GPIOPadConfigSet(pin_obj->port, pin_obj->pin_mask, GPIO_STRENGTH_2MA, GPIO_PIN_TYPE_STD);
   1d26e:	687b      	ldr	r3, [r7, #4]
   1d270:	6898      	ldr	r0, [r3, #8]
   1d272:	687b      	ldr	r3, [r7, #4]
   1d274:	f893 1020 	ldrb.w	r1, [r3, #32]
   1d278:	2308      	movs	r3, #8
   1d27a:	2201      	movs	r2, #1
   1d27c:	f002 f805 	bl	1f28a <GPIOPadConfigSet>
    MAP_GPIOPinConfigure((pin_obj->af_list)[af_id].conf);
   1d280:	687b      	ldr	r3, [r7, #4]
   1d282:	691a      	ldr	r2, [r3, #16]
   1d284:	78fb      	ldrb	r3, [r7, #3]
   1d286:	011b      	lsls	r3, r3, #4
   1d288:	4413      	add	r3, r2
   1d28a:	68db      	ldr	r3, [r3, #12]
   1d28c:	4618      	mov	r0, r3
   1d28e:	f002 f8fb 	bl	1f488 <GPIOPinConfigure>
}
   1d292:	bf00      	nop
   1d294:	3708      	adds	r7, #8
   1d296:	46bd      	mov	sp, r7
   1d298:	bd80      	pop	{r7, pc}

0001d29a <mp_hal_set_interrupt_char>:

void mp_hal_set_interrupt_char(int c) {
   1d29a:	b480      	push	{r7}
   1d29c:	b083      	sub	sp, #12
   1d29e:	af00      	add	r7, sp, #0
   1d2a0:	6078      	str	r0, [r7, #4]

}
   1d2a2:	bf00      	nop
   1d2a4:	370c      	adds	r7, #12
   1d2a6:	46bd      	mov	sp, r7
   1d2a8:	f85d 7b04 	ldr.w	r7, [sp], #4
   1d2ac:	4770      	bx	lr
   1d2ae:	bf00      	nop

0001d2b0 <MP_OBJ_IS_OBJ>:
    { return ((((mp_int_t)(o)) & 3) == 0); }
   1d2b0:	b480      	push	{r7}
   1d2b2:	b083      	sub	sp, #12
   1d2b4:	af00      	add	r7, sp, #0
   1d2b6:	6078      	str	r0, [r7, #4]
   1d2b8:	687b      	ldr	r3, [r7, #4]
   1d2ba:	f003 0303 	and.w	r3, r3, #3
   1d2be:	2b00      	cmp	r3, #0
   1d2c0:	bf0c      	ite	eq
   1d2c2:	2301      	moveq	r3, #1
   1d2c4:	2300      	movne	r3, #0
   1d2c6:	b2db      	uxtb	r3, r3
   1d2c8:	4618      	mov	r0, r3
   1d2ca:	370c      	adds	r7, #12
   1d2cc:	46bd      	mov	sp, r7
   1d2ce:	f85d 7b04 	ldr.w	r7, [sp], #4
   1d2d2:	4770      	bx	lr

0001d2d4 <mp_obj_new_bool>:
static inline mp_obj_t mp_obj_new_bool(mp_int_t x) { return x ? mp_const_true : mp_const_false; }
   1d2d4:	b480      	push	{r7}
   1d2d6:	b083      	sub	sp, #12
   1d2d8:	af00      	add	r7, sp, #0
   1d2da:	6078      	str	r0, [r7, #4]
   1d2dc:	687b      	ldr	r3, [r7, #4]
   1d2de:	2b00      	cmp	r3, #0
   1d2e0:	d001      	beq.n	1d2e6 <mp_obj_new_bool+0x12>
   1d2e2:	4b04      	ldr	r3, [pc, #16]	; (1d2f4 <mp_obj_new_bool+0x20>)
   1d2e4:	e000      	b.n	1d2e8 <mp_obj_new_bool+0x14>
   1d2e6:	4b04      	ldr	r3, [pc, #16]	; (1d2f8 <mp_obj_new_bool+0x24>)
   1d2e8:	4618      	mov	r0, r3
   1d2ea:	370c      	adds	r7, #12
   1d2ec:	46bd      	mov	sp, r7
   1d2ee:	f85d 7b04 	ldr.w	r7, [sp], #4
   1d2f2:	4770      	bx	lr
   1d2f4:	00023868 	.word	0x00023868
   1d2f8:	00023860 	.word	0x00023860

0001d2fc <mp_obj_dict_get_map>:
static inline mp_map_t *mp_obj_dict_get_map(mp_obj_t dict) {
   1d2fc:	b480      	push	{r7}
   1d2fe:	b083      	sub	sp, #12
   1d300:	af00      	add	r7, sp, #0
   1d302:	6078      	str	r0, [r7, #4]
    return &((mp_obj_dict_t*)MP_OBJ_TO_PTR(dict))->map;
   1d304:	687b      	ldr	r3, [r7, #4]
   1d306:	3304      	adds	r3, #4
}
   1d308:	4618      	mov	r0, r3
   1d30a:	370c      	adds	r7, #12
   1d30c:	46bd      	mov	sp, r7
   1d30e:	f85d 7b04 	ldr.w	r7, [sp], #4
   1d312:	4770      	bx	lr

0001d314 <mp_arg_check_num>:
static inline void mp_arg_check_num(size_t n_args, size_t n_kw, size_t n_args_min, size_t n_args_max, bool takes_kw) {
   1d314:	b580      	push	{r7, lr}
   1d316:	b084      	sub	sp, #16
   1d318:	af00      	add	r7, sp, #0
   1d31a:	60f8      	str	r0, [r7, #12]
   1d31c:	60b9      	str	r1, [r7, #8]
   1d31e:	607a      	str	r2, [r7, #4]
   1d320:	603b      	str	r3, [r7, #0]
    mp_arg_check_num_sig(n_args, n_kw, (uint32_t)MP_OBJ_FUN_MAKE_SIG(n_args_min, n_args_max, takes_kw));
   1d322:	687b      	ldr	r3, [r7, #4]
   1d324:	045a      	lsls	r2, r3, #17
   1d326:	683b      	ldr	r3, [r7, #0]
   1d328:	005b      	lsls	r3, r3, #1
   1d32a:	431a      	orrs	r2, r3
   1d32c:	7e3b      	ldrb	r3, [r7, #24]
   1d32e:	2b00      	cmp	r3, #0
   1d330:	d001      	beq.n	1d336 <mp_arg_check_num+0x22>
   1d332:	2301      	movs	r3, #1
   1d334:	e000      	b.n	1d338 <mp_arg_check_num+0x24>
   1d336:	2300      	movs	r3, #0
   1d338:	4313      	orrs	r3, r2
   1d33a:	461a      	mov	r2, r3
   1d33c:	68b9      	ldr	r1, [r7, #8]
   1d33e:	68f8      	ldr	r0, [r7, #12]
   1d340:	f7f0 f84a 	bl	d3d8 <mp_arg_check_num_sig>
}
   1d344:	bf00      	nop
   1d346:	3710      	adds	r7, #16
   1d348:	46bd      	mov	sp, r7
   1d34a:	bd80      	pop	{r7, pc}

0001d34c <pin_init0>:
/// how a particular object gets mapped to a pin.

// Pin class variables
STATIC bool pin_class_debug;

void pin_init0(void) {
   1d34c:	b480      	push	{r7}
   1d34e:	af00      	add	r7, sp, #0
    MP_STATE_PORT(pin_class_mapper) = mp_const_none;
   1d350:	4b07      	ldr	r3, [pc, #28]	; (1d370 <pin_init0+0x24>)
   1d352:	4a08      	ldr	r2, [pc, #32]	; (1d374 <pin_init0+0x28>)
   1d354:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    MP_STATE_PORT(pin_class_map_dict) = mp_const_none;
   1d358:	4b05      	ldr	r3, [pc, #20]	; (1d370 <pin_init0+0x24>)
   1d35a:	4a06      	ldr	r2, [pc, #24]	; (1d374 <pin_init0+0x28>)
   1d35c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    pin_class_debug = false;
   1d360:	4b05      	ldr	r3, [pc, #20]	; (1d378 <pin_init0+0x2c>)
   1d362:	2200      	movs	r2, #0
   1d364:	701a      	strb	r2, [r3, #0]
}
   1d366:	bf00      	nop
   1d368:	46bd      	mov	sp, r7
   1d36a:	f85d 7b04 	ldr.w	r7, [sp], #4
   1d36e:	4770      	bx	lr
   1d370:	20001248 	.word	0x20001248
   1d374:	0002511c 	.word	0x0002511c
   1d378:	2000121c 	.word	0x2000121c

0001d37c <pin_find>:



// C API used to convert a user-supplied pin name into an ordinal pin number.
const pin_obj_t *pin_find(mp_obj_t user_obj) {
   1d37c:	b580      	push	{r7, lr}
   1d37e:	b088      	sub	sp, #32
   1d380:	af00      	add	r7, sp, #0
   1d382:	6078      	str	r0, [r7, #4]
    const pin_obj_t *pin_obj;

    // If a pin was provided, then use it
    if (MP_OBJ_IS_TYPE(user_obj, &pin_mod)) {
   1d384:	6878      	ldr	r0, [r7, #4]
   1d386:	f7ff ff93 	bl	1d2b0 <MP_OBJ_IS_OBJ>
   1d38a:	4603      	mov	r3, r0
   1d38c:	2b00      	cmp	r3, #0
   1d38e:	d016      	beq.n	1d3be <pin_find+0x42>
   1d390:	687b      	ldr	r3, [r7, #4]
   1d392:	681b      	ldr	r3, [r3, #0]
   1d394:	4a59      	ldr	r2, [pc, #356]	; (1d4fc <pin_find+0x180>)
   1d396:	4293      	cmp	r3, r2
   1d398:	d111      	bne.n	1d3be <pin_find+0x42>
        pin_obj = MP_OBJ_TO_PTR(user_obj);
   1d39a:	687b      	ldr	r3, [r7, #4]
   1d39c:	61fb      	str	r3, [r7, #28]
        if (pin_class_debug) {
   1d39e:	4b58      	ldr	r3, [pc, #352]	; (1d500 <pin_find+0x184>)
   1d3a0:	781b      	ldrb	r3, [r3, #0]
   1d3a2:	2b00      	cmp	r3, #0
   1d3a4:	d009      	beq.n	1d3ba <pin_find+0x3e>
            printf("Pin map passed pin ");
   1d3a6:	4857      	ldr	r0, [pc, #348]	; (1d504 <pin_find+0x188>)
   1d3a8:	f7ff fc38 	bl	1cc1c <printf>
            mp_obj_print(MP_OBJ_FROM_PTR(pin_obj), PRINT_STR);
   1d3ac:	2100      	movs	r1, #0
   1d3ae:	69f8      	ldr	r0, [r7, #28]
   1d3b0:	f7f0 fcb0 	bl	dd14 <mp_obj_print>
            printf("\n");
   1d3b4:	200a      	movs	r0, #10
   1d3b6:	f7ff fc5b 	bl	1cc70 <putchar>
        }
        return pin_obj;
   1d3ba:	69fb      	ldr	r3, [r7, #28]
   1d3bc:	e099      	b.n	1d4f2 <pin_find+0x176>
    }


    if (MP_STATE_PORT(pin_class_mapper) != mp_const_none) {
   1d3be:	4b52      	ldr	r3, [pc, #328]	; (1d508 <pin_find+0x18c>)
   1d3c0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   1d3c4:	4a51      	ldr	r2, [pc, #324]	; (1d50c <pin_find+0x190>)
   1d3c6:	4293      	cmp	r3, r2
   1d3c8:	d033      	beq.n	1d432 <pin_find+0xb6>
        mp_obj_t o = mp_call_function_1(MP_STATE_PORT(pin_class_mapper), user_obj);
   1d3ca:	4b4f      	ldr	r3, [pc, #316]	; (1d508 <pin_find+0x18c>)
   1d3cc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   1d3d0:	6879      	ldr	r1, [r7, #4]
   1d3d2:	4618      	mov	r0, r3
   1d3d4:	f7ee fe89 	bl	c0ea <mp_call_function_1>
   1d3d8:	61b8      	str	r0, [r7, #24]
        if (o != mp_const_none) {
   1d3da:	69bb      	ldr	r3, [r7, #24]
   1d3dc:	4a4b      	ldr	r2, [pc, #300]	; (1d50c <pin_find+0x190>)
   1d3de:	4293      	cmp	r3, r2
   1d3e0:	d027      	beq.n	1d432 <pin_find+0xb6>
            if (!MP_OBJ_IS_TYPE(o, &pin_mod)) {
   1d3e2:	69b8      	ldr	r0, [r7, #24]
   1d3e4:	f7ff ff64 	bl	1d2b0 <MP_OBJ_IS_OBJ>
   1d3e8:	4603      	mov	r3, r0
   1d3ea:	f083 0301 	eor.w	r3, r3, #1
   1d3ee:	b2db      	uxtb	r3, r3
   1d3f0:	2b00      	cmp	r3, #0
   1d3f2:	d104      	bne.n	1d3fe <pin_find+0x82>
   1d3f4:	69bb      	ldr	r3, [r7, #24]
   1d3f6:	681b      	ldr	r3, [r3, #0]
   1d3f8:	4a40      	ldr	r2, [pc, #256]	; (1d4fc <pin_find+0x180>)
   1d3fa:	4293      	cmp	r3, r2
   1d3fc:	d002      	beq.n	1d404 <pin_find+0x88>
                mp_raise_ValueError("Pin.mapper didn't return a Pin object");
   1d3fe:	4844      	ldr	r0, [pc, #272]	; (1d510 <pin_find+0x194>)
   1d400:	f7ef ffb9 	bl	d376 <mp_raise_ValueError>
            }
            if (pin_class_debug) {
   1d404:	4b3e      	ldr	r3, [pc, #248]	; (1d500 <pin_find+0x184>)
   1d406:	781b      	ldrb	r3, [r3, #0]
   1d408:	2b00      	cmp	r3, #0
   1d40a:	d010      	beq.n	1d42e <pin_find+0xb2>
                printf("Pin.mapper maps ");
   1d40c:	4841      	ldr	r0, [pc, #260]	; (1d514 <pin_find+0x198>)
   1d40e:	f7ff fc05 	bl	1cc1c <printf>
                mp_obj_print(user_obj, PRINT_REPR);
   1d412:	2101      	movs	r1, #1
   1d414:	6878      	ldr	r0, [r7, #4]
   1d416:	f7f0 fc7d 	bl	dd14 <mp_obj_print>
                printf(" to ");
   1d41a:	483f      	ldr	r0, [pc, #252]	; (1d518 <pin_find+0x19c>)
   1d41c:	f7ff fbfe 	bl	1cc1c <printf>
                mp_obj_print(o, PRINT_STR);
   1d420:	2100      	movs	r1, #0
   1d422:	69b8      	ldr	r0, [r7, #24]
   1d424:	f7f0 fc76 	bl	dd14 <mp_obj_print>
                printf("\n");
   1d428:	200a      	movs	r0, #10
   1d42a:	f7ff fc21 	bl	1cc70 <putchar>
            }
            return MP_OBJ_TO_PTR(o);
   1d42e:	69bb      	ldr	r3, [r7, #24]
   1d430:	e05f      	b.n	1d4f2 <pin_find+0x176>
        }
        // The pin mapping function returned mp_const_none, fall through to
        // other lookup methods.
    }

    if (MP_STATE_PORT(pin_class_map_dict) != mp_const_none) {
   1d432:	4b35      	ldr	r3, [pc, #212]	; (1d508 <pin_find+0x18c>)
   1d434:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
   1d438:	4a34      	ldr	r2, [pc, #208]	; (1d50c <pin_find+0x190>)
   1d43a:	4293      	cmp	r3, r2
   1d43c:	d02d      	beq.n	1d49a <pin_find+0x11e>
        mp_map_t *pin_map_map = mp_obj_dict_get_map(MP_STATE_PORT(pin_class_map_dict));
   1d43e:	4b32      	ldr	r3, [pc, #200]	; (1d508 <pin_find+0x18c>)
   1d440:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
   1d444:	4618      	mov	r0, r3
   1d446:	f7ff ff59 	bl	1d2fc <mp_obj_dict_get_map>
   1d44a:	6178      	str	r0, [r7, #20]
        mp_map_elem_t *elem = mp_map_lookup(pin_map_map, user_obj, MP_MAP_LOOKUP);
   1d44c:	2200      	movs	r2, #0
   1d44e:	6879      	ldr	r1, [r7, #4]
   1d450:	6978      	ldr	r0, [r7, #20]
   1d452:	f7f0 fa1d 	bl	d890 <mp_map_lookup>
   1d456:	6138      	str	r0, [r7, #16]
        if (elem != NULL && elem->value != MP_OBJ_NULL) {
   1d458:	693b      	ldr	r3, [r7, #16]
   1d45a:	2b00      	cmp	r3, #0
   1d45c:	d01d      	beq.n	1d49a <pin_find+0x11e>
   1d45e:	693b      	ldr	r3, [r7, #16]
   1d460:	685b      	ldr	r3, [r3, #4]
   1d462:	2b00      	cmp	r3, #0
   1d464:	d019      	beq.n	1d49a <pin_find+0x11e>
            mp_obj_t o = elem->value;
   1d466:	693b      	ldr	r3, [r7, #16]
   1d468:	685b      	ldr	r3, [r3, #4]
   1d46a:	60fb      	str	r3, [r7, #12]
            if (pin_class_debug) {
   1d46c:	4b24      	ldr	r3, [pc, #144]	; (1d500 <pin_find+0x184>)
   1d46e:	781b      	ldrb	r3, [r3, #0]
   1d470:	2b00      	cmp	r3, #0
   1d472:	d010      	beq.n	1d496 <pin_find+0x11a>
                printf("Pin.map_dict maps ");
   1d474:	4829      	ldr	r0, [pc, #164]	; (1d51c <pin_find+0x1a0>)
   1d476:	f7ff fbd1 	bl	1cc1c <printf>
                mp_obj_print(user_obj, PRINT_REPR);
   1d47a:	2101      	movs	r1, #1
   1d47c:	6878      	ldr	r0, [r7, #4]
   1d47e:	f7f0 fc49 	bl	dd14 <mp_obj_print>
                printf(" to ");
   1d482:	4825      	ldr	r0, [pc, #148]	; (1d518 <pin_find+0x19c>)
   1d484:	f7ff fbca 	bl	1cc1c <printf>
                mp_obj_print(o, PRINT_STR);
   1d488:	2100      	movs	r1, #0
   1d48a:	68f8      	ldr	r0, [r7, #12]
   1d48c:	f7f0 fc42 	bl	dd14 <mp_obj_print>
                printf("\n");
   1d490:	200a      	movs	r0, #10
   1d492:	f7ff fbed 	bl	1cc70 <putchar>
            }
            return MP_OBJ_TO_PTR(o);
   1d496:	68fb      	ldr	r3, [r7, #12]
   1d498:	e02b      	b.n	1d4f2 <pin_find+0x176>
        }
    }

    // See if the pin name matches a board pin
    pin_obj = pin_find_named_pin(&pin_board_pins_locals_dict, user_obj);
   1d49a:	6879      	ldr	r1, [r7, #4]
   1d49c:	4820      	ldr	r0, [pc, #128]	; (1d520 <pin_find+0x1a4>)
   1d49e:	f000 fbf7 	bl	1dc90 <pin_find_named_pin>
   1d4a2:	61f8      	str	r0, [r7, #28]
    if (pin_obj) {
   1d4a4:	69fb      	ldr	r3, [r7, #28]
   1d4a6:	2b00      	cmp	r3, #0
   1d4a8:	d016      	beq.n	1d4d8 <pin_find+0x15c>
        if (pin_class_debug) {
   1d4aa:	4b15      	ldr	r3, [pc, #84]	; (1d500 <pin_find+0x184>)
   1d4ac:	781b      	ldrb	r3, [r3, #0]
   1d4ae:	2b00      	cmp	r3, #0
   1d4b0:	d010      	beq.n	1d4d4 <pin_find+0x158>
            printf("Pin.board maps ");
   1d4b2:	481c      	ldr	r0, [pc, #112]	; (1d524 <pin_find+0x1a8>)
   1d4b4:	f7ff fbb2 	bl	1cc1c <printf>
            mp_obj_print(user_obj, PRINT_REPR);
   1d4b8:	2101      	movs	r1, #1
   1d4ba:	6878      	ldr	r0, [r7, #4]
   1d4bc:	f7f0 fc2a 	bl	dd14 <mp_obj_print>
            printf(" to ");
   1d4c0:	4815      	ldr	r0, [pc, #84]	; (1d518 <pin_find+0x19c>)
   1d4c2:	f7ff fbab 	bl	1cc1c <printf>
            mp_obj_print(MP_OBJ_FROM_PTR(pin_obj), PRINT_STR);
   1d4c6:	2100      	movs	r1, #0
   1d4c8:	69f8      	ldr	r0, [r7, #28]
   1d4ca:	f7f0 fc23 	bl	dd14 <mp_obj_print>
            printf("\n");
   1d4ce:	200a      	movs	r0, #10
   1d4d0:	f7ff fbce 	bl	1cc70 <putchar>
        }
        return pin_obj;
   1d4d4:	69fb      	ldr	r3, [r7, #28]
   1d4d6:	e00c      	b.n	1d4f2 <pin_find+0x176>
//            printf("\n");
//        }
//        return pin_obj;
//    }

    nlr_raise(mp_obj_new_exception_msg_varg(&mp_type_ValueError, "Pin(%s) doesn't exist", mp_obj_str_get_str(user_obj)));
   1d4d8:	6878      	ldr	r0, [r7, #4]
   1d4da:	f7f8 fac7 	bl	15a6c <mp_obj_str_get_str>
   1d4de:	4603      	mov	r3, r0
   1d4e0:	461a      	mov	r2, r3
   1d4e2:	4911      	ldr	r1, [pc, #68]	; (1d528 <pin_find+0x1ac>)
   1d4e4:	4811      	ldr	r0, [pc, #68]	; (1d52c <pin_find+0x1b0>)
   1d4e6:	f7f2 fa9d 	bl	fa24 <mp_obj_new_exception_msg_varg>
   1d4ea:	4603      	mov	r3, r0
   1d4ec:	4618      	mov	r0, r3
   1d4ee:	f7e2 fef7 	bl	2e0 <nlr_jump>
}
   1d4f2:	4618      	mov	r0, r3
   1d4f4:	3720      	adds	r7, #32
   1d4f6:	46bd      	mov	sp, r7
   1d4f8:	bd80      	pop	{r7, pc}
   1d4fa:	bf00      	nop
   1d4fc:	00027540 	.word	0x00027540
   1d500:	2000121c 	.word	0x2000121c
   1d504:	00027210 	.word	0x00027210
   1d508:	20001248 	.word	0x20001248
   1d50c:	0002511c 	.word	0x0002511c
   1d510:	00027224 	.word	0x00027224
   1d514:	0002724c 	.word	0x0002724c
   1d518:	00027260 	.word	0x00027260
   1d51c:	00027268 	.word	0x00027268
   1d520:	00027ecc 	.word	0x00027ecc
   1d524:	0002727c 	.word	0x0002727c
   1d528:	0002728c 	.word	0x0002728c
   1d52c:	000243b0 	.word	0x000243b0

0001d530 <pin_print>:

/// \method __str__()
/// Return a string describing the pin object.
STATIC void pin_print(const mp_print_t *print, mp_obj_t self_in, mp_print_kind_t kind) {
   1d530:	b580      	push	{r7, lr}
   1d532:	b08e      	sub	sp, #56	; 0x38
   1d534:	af00      	add	r7, sp, #0
   1d536:	60f8      	str	r0, [r7, #12]
   1d538:	60b9      	str	r1, [r7, #8]
   1d53a:	607a      	str	r2, [r7, #4]

    pin_obj_t *self = MP_OBJ_TO_PTR(self_in);
   1d53c:	68bb      	ldr	r3, [r7, #8]
   1d53e:	62bb      	str	r3, [r7, #40]	; 0x28

    // pin name
    mp_printf(print, "Pin(Pin.cpu.%q, mode=Pin.", self->name);
   1d540:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1d542:	685b      	ldr	r3, [r3, #4]
   1d544:	461a      	mov	r2, r3
   1d546:	4949      	ldr	r1, [pc, #292]	; (1d66c <pin_print+0x13c>)
   1d548:	68f8      	ldr	r0, [r7, #12]
   1d54a:	f7e4 fd91 	bl	2070 <mp_printf>

    uint32_t dir = MAP_GPIODirModeGet(self->port, self->pin_mask);
   1d54e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1d550:	689a      	ldr	r2, [r3, #8]
   1d552:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1d554:	f893 3020 	ldrb.w	r3, [r3, #32]
   1d558:	4619      	mov	r1, r3
   1d55a:	4610      	mov	r0, r2
   1d55c:	f001 fe83 	bl	1f266 <GPIODirModeGet>
   1d560:	6278      	str	r0, [r7, #36]	; 0x24
    uint32_t type;
    uint32_t strength;
    MAP_GPIOPadConfigGet(self->port, self->pin_mask, &strength, &type);
   1d562:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1d564:	6898      	ldr	r0, [r3, #8]
   1d566:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1d568:	f893 1020 	ldrb.w	r1, [r3, #32]
   1d56c:	f107 0318 	add.w	r3, r7, #24
   1d570:	f107 0214 	add.w	r2, r7, #20
   1d574:	f001 ff0c 	bl	1f390 <GPIOPadConfigGet>


    if (dir == GPIO_DIR_MODE_HW && type == GPIO_PIN_TYPE_ANALOG) {
   1d578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1d57a:	2b02      	cmp	r3, #2
   1d57c:	d107      	bne.n	1d58e <pin_print+0x5e>
   1d57e:	69bb      	ldr	r3, [r7, #24]
   1d580:	2b00      	cmp	r3, #0
   1d582:	d104      	bne.n	1d58e <pin_print+0x5e>
        // analog
        mp_print_str(print, "ANALOG)");
   1d584:	493a      	ldr	r1, [pc, #232]	; (1d670 <pin_print+0x140>)
   1d586:	68f8      	ldr	r0, [r7, #12]
   1d588:	f7e4 fa60 	bl	1a4c <mp_print_str>
            }
        } else {
            mp_print_str(print, ")");
        }
    }
}
   1d58c:	e06a      	b.n	1d664 <pin_print+0x134>
        bool af = false;
   1d58e:	2300      	movs	r3, #0
   1d590:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        if (dir == GPIO_DIR_MODE_IN) {
   1d594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1d596:	2b00      	cmp	r3, #0
   1d598:	d102      	bne.n	1d5a0 <pin_print+0x70>
            mode_qst = MP_QSTR_IN;
   1d59a:	23c1      	movs	r3, #193	; 0xc1
   1d59c:	633b      	str	r3, [r7, #48]	; 0x30
   1d59e:	e019      	b.n	1d5d4 <pin_print+0xa4>
        } else if (dir == GPIO_DIR_MODE_OUT) {
   1d5a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1d5a2:	2b01      	cmp	r3, #1
   1d5a4:	d108      	bne.n	1d5b8 <pin_print+0x88>
            if (type == GPIO_PIN_TYPE_OD){
   1d5a6:	69bb      	ldr	r3, [r7, #24]
   1d5a8:	2b09      	cmp	r3, #9
   1d5aa:	d102      	bne.n	1d5b2 <pin_print+0x82>
                mode_qst = MP_QSTR_OPEN_DRAIN;
   1d5ac:	23d3      	movs	r3, #211	; 0xd3
   1d5ae:	633b      	str	r3, [r7, #48]	; 0x30
   1d5b0:	e010      	b.n	1d5d4 <pin_print+0xa4>
                mode_qst = MP_QSTR_OUT;
   1d5b2:	23d5      	movs	r3, #213	; 0xd5
   1d5b4:	633b      	str	r3, [r7, #48]	; 0x30
   1d5b6:	e00d      	b.n	1d5d4 <pin_print+0xa4>
            af = true;
   1d5b8:	2301      	movs	r3, #1
   1d5ba:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
            if (dir == GPIO_DIR_MODE_HW) {
   1d5be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1d5c0:	2b02      	cmp	r3, #2
   1d5c2:	d107      	bne.n	1d5d4 <pin_print+0xa4>
                if (type == GPIO_PIN_TYPE_OD){
   1d5c4:	69bb      	ldr	r3, [r7, #24]
   1d5c6:	2b09      	cmp	r3, #9
   1d5c8:	d102      	bne.n	1d5d0 <pin_print+0xa0>
                   mode_qst = MP_QSTR_ALT_OPEN_DRAIN;
   1d5ca:	23b4      	movs	r3, #180	; 0xb4
   1d5cc:	633b      	str	r3, [r7, #48]	; 0x30
   1d5ce:	e001      	b.n	1d5d4 <pin_print+0xa4>
                    mode_qst = MP_QSTR_ALT;
   1d5d0:	23b3      	movs	r3, #179	; 0xb3
   1d5d2:	633b      	str	r3, [r7, #48]	; 0x30
        mp_print_str(print, qstr_str(mode_qst));
   1d5d4:	6b38      	ldr	r0, [r7, #48]	; 0x30
   1d5d6:	f7e3 fefb 	bl	13d0 <qstr_str>
   1d5da:	4603      	mov	r3, r0
   1d5dc:	4619      	mov	r1, r3
   1d5de:	68f8      	ldr	r0, [r7, #12]
   1d5e0:	f7e4 fa34 	bl	1a4c <mp_print_str>
        qstr pull_qst = MP_QSTR_NULL;
   1d5e4:	2300      	movs	r3, #0
   1d5e6:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (type == GPIO_PIN_TYPE_STD_WPU) {
   1d5e8:	69bb      	ldr	r3, [r7, #24]
   1d5ea:	2b0a      	cmp	r3, #10
   1d5ec:	d102      	bne.n	1d5f4 <pin_print+0xc4>
            pull_qst = MP_QSTR_PULL_UP;
   1d5ee:	23d9      	movs	r3, #217	; 0xd9
   1d5f0:	62fb      	str	r3, [r7, #44]	; 0x2c
   1d5f2:	e004      	b.n	1d5fe <pin_print+0xce>
        } else if (type == GPIO_PIN_TYPE_STD_WPD) {
   1d5f4:	69bb      	ldr	r3, [r7, #24]
   1d5f6:	2b0c      	cmp	r3, #12
   1d5f8:	d101      	bne.n	1d5fe <pin_print+0xce>
            pull_qst = MP_QSTR_PULL_DOWN;
   1d5fa:	23d7      	movs	r3, #215	; 0xd7
   1d5fc:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (pull_qst != MP_QSTR_NULL) {
   1d5fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1d600:	2b00      	cmp	r3, #0
   1d602:	d004      	beq.n	1d60e <pin_print+0xde>
            mp_printf(print, ", pull=Pin.%q", pull_qst);
   1d604:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   1d606:	491b      	ldr	r1, [pc, #108]	; (1d674 <pin_print+0x144>)
   1d608:	68f8      	ldr	r0, [r7, #12]
   1d60a:	f7e4 fd31 	bl	2070 <mp_printf>
        if (af) {
   1d60e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
   1d612:	2b00      	cmp	r3, #0
   1d614:	d022      	beq.n	1d65c <pin_print+0x12c>
            mp_uint_t af_idx = mp_hal_pin_get_af(self);
   1d616:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1d618:	68db      	ldr	r3, [r3, #12]
   1d61a:	f8d3 252c 	ldr.w	r2, [r3, #1324]	; 0x52c
   1d61e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1d620:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
   1d624:	009b      	lsls	r3, r3, #2
   1d626:	fa22 f303 	lsr.w	r3, r2, r3
   1d62a:	f003 030f 	and.w	r3, r3, #15
   1d62e:	623b      	str	r3, [r7, #32]
            const pin_af_obj_t *af_obj = pin_find_af_by_index(self, af_idx);
   1d630:	6a39      	ldr	r1, [r7, #32]
   1d632:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   1d634:	f000 fb77 	bl	1dd26 <pin_find_af_by_index>
   1d638:	61f8      	str	r0, [r7, #28]
            if (af_obj == NULL) {
   1d63a:	69fb      	ldr	r3, [r7, #28]
   1d63c:	2b00      	cmp	r3, #0
   1d63e:	d105      	bne.n	1d64c <pin_print+0x11c>
                mp_printf(print, ", af=%d)", af_idx);
   1d640:	6a3a      	ldr	r2, [r7, #32]
   1d642:	490d      	ldr	r1, [pc, #52]	; (1d678 <pin_print+0x148>)
   1d644:	68f8      	ldr	r0, [r7, #12]
   1d646:	f7e4 fd13 	bl	2070 <mp_printf>
}
   1d64a:	e00b      	b.n	1d664 <pin_print+0x134>
                mp_printf(print, ", af=Pin.%q)", af_obj->name);
   1d64c:	69fb      	ldr	r3, [r7, #28]
   1d64e:	681b      	ldr	r3, [r3, #0]
   1d650:	461a      	mov	r2, r3
   1d652:	490a      	ldr	r1, [pc, #40]	; (1d67c <pin_print+0x14c>)
   1d654:	68f8      	ldr	r0, [r7, #12]
   1d656:	f7e4 fd0b 	bl	2070 <mp_printf>
}
   1d65a:	e003      	b.n	1d664 <pin_print+0x134>
            mp_print_str(print, ")");
   1d65c:	4908      	ldr	r1, [pc, #32]	; (1d680 <pin_print+0x150>)
   1d65e:	68f8      	ldr	r0, [r7, #12]
   1d660:	f7e4 f9f4 	bl	1a4c <mp_print_str>
}
   1d664:	bf00      	nop
   1d666:	3738      	adds	r7, #56	; 0x38
   1d668:	46bd      	mov	sp, r7
   1d66a:	bd80      	pop	{r7, pc}
   1d66c:	000272a4 	.word	0x000272a4
   1d670:	000272c0 	.word	0x000272c0
   1d674:	000272c8 	.word	0x000272c8
   1d678:	000272d8 	.word	0x000272d8
   1d67c:	000272e4 	.word	0x000272e4
   1d680:	000272f4 	.word	0x000272f4

0001d684 <pin_make_new>:
STATIC mp_obj_t pin_obj_init_helper(const pin_obj_t *pin, size_t n_args, const mp_obj_t *args, mp_map_t *kw_args);

/// \classmethod \constructor(id, ...)
/// Create a new Pin object associated with the id.  If additional arguments are given,
/// they are used to initialise the pin.  See `init`.
mp_obj_t pin_make_new(const mp_obj_type_t *type, size_t n_args, size_t n_kw, const mp_obj_t *args) {
   1d684:	b580      	push	{r7, lr}
   1d686:	b08a      	sub	sp, #40	; 0x28
   1d688:	af02      	add	r7, sp, #8
   1d68a:	60f8      	str	r0, [r7, #12]
   1d68c:	60b9      	str	r1, [r7, #8]
   1d68e:	607a      	str	r2, [r7, #4]
   1d690:	603b      	str	r3, [r7, #0]
    mp_arg_check_num(n_args, n_kw, 1, MP_OBJ_FUN_ARGS_MAX, true);
   1d692:	2301      	movs	r3, #1
   1d694:	9300      	str	r3, [sp, #0]
   1d696:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1d69a:	2201      	movs	r2, #1
   1d69c:	6879      	ldr	r1, [r7, #4]
   1d69e:	68b8      	ldr	r0, [r7, #8]
   1d6a0:	f7ff fe38 	bl	1d314 <mp_arg_check_num>

    // Run an argument through the mapper and return the result.
    const pin_obj_t *pin = pin_find(args[0]);
   1d6a4:	683b      	ldr	r3, [r7, #0]
   1d6a6:	681b      	ldr	r3, [r3, #0]
   1d6a8:	4618      	mov	r0, r3
   1d6aa:	f7ff fe67 	bl	1d37c <pin_find>
   1d6ae:	61f8      	str	r0, [r7, #28]

    if (n_args > 1 || n_kw > 0) {
   1d6b0:	68bb      	ldr	r3, [r7, #8]
   1d6b2:	2b01      	cmp	r3, #1
   1d6b4:	d802      	bhi.n	1d6bc <pin_make_new+0x38>
   1d6b6:	687b      	ldr	r3, [r7, #4]
   1d6b8:	2b00      	cmp	r3, #0
   1d6ba:	d012      	beq.n	1d6e2 <pin_make_new+0x5e>
        // pin mode given, so configure this GPIO
        mp_map_t kw_args;
        mp_map_init_fixed_table(&kw_args, n_kw, args + n_args);
   1d6bc:	68bb      	ldr	r3, [r7, #8]
   1d6be:	009b      	lsls	r3, r3, #2
   1d6c0:	683a      	ldr	r2, [r7, #0]
   1d6c2:	441a      	add	r2, r3
   1d6c4:	f107 0310 	add.w	r3, r7, #16
   1d6c8:	6879      	ldr	r1, [r7, #4]
   1d6ca:	4618      	mov	r0, r3
   1d6cc:	f7f0 f813 	bl	d6f6 <mp_map_init_fixed_table>
        pin_obj_init_helper(pin, n_args - 1, args + 1, &kw_args);
   1d6d0:	68bb      	ldr	r3, [r7, #8]
   1d6d2:	1e59      	subs	r1, r3, #1
   1d6d4:	683b      	ldr	r3, [r7, #0]
   1d6d6:	1d1a      	adds	r2, r3, #4
   1d6d8:	f107 0310 	add.w	r3, r7, #16
   1d6dc:	69f8      	ldr	r0, [r7, #28]
   1d6de:	f000 f8c7 	bl	1d870 <pin_obj_init_helper>
    }

    return MP_OBJ_FROM_PTR(pin);
   1d6e2:	69fb      	ldr	r3, [r7, #28]
}
   1d6e4:	4618      	mov	r0, r3
   1d6e6:	3720      	adds	r7, #32
   1d6e8:	46bd      	mov	sp, r7
   1d6ea:	bd80      	pop	{r7, pc}

0001d6ec <pin_call>:

// fast method for getting/setting pin value
STATIC mp_obj_t pin_call(mp_obj_t self_in, size_t n_args, size_t n_kw, const mp_obj_t *args) {
   1d6ec:	b5b0      	push	{r4, r5, r7, lr}
   1d6ee:	b088      	sub	sp, #32
   1d6f0:	af02      	add	r7, sp, #8
   1d6f2:	60f8      	str	r0, [r7, #12]
   1d6f4:	60b9      	str	r1, [r7, #8]
   1d6f6:	607a      	str	r2, [r7, #4]
   1d6f8:	603b      	str	r3, [r7, #0]
    mp_arg_check_num(n_args, n_kw, 0, 1, false);
   1d6fa:	2300      	movs	r3, #0
   1d6fc:	9300      	str	r3, [sp, #0]
   1d6fe:	2301      	movs	r3, #1
   1d700:	2200      	movs	r2, #0
   1d702:	6879      	ldr	r1, [r7, #4]
   1d704:	68b8      	ldr	r0, [r7, #8]
   1d706:	f7ff fe05 	bl	1d314 <mp_arg_check_num>
    pin_obj_t *self = MP_OBJ_TO_PTR(self_in);
   1d70a:	68fb      	ldr	r3, [r7, #12]
   1d70c:	617b      	str	r3, [r7, #20]
    if (n_args == 0) {
   1d70e:	68bb      	ldr	r3, [r7, #8]
   1d710:	2b00      	cmp	r3, #0
   1d712:	d10d      	bne.n	1d730 <pin_call+0x44>
        // get pin
        return MP_OBJ_NEW_SMALL_INT(mp_hal_pin_read(self));
   1d714:	697b      	ldr	r3, [r7, #20]
   1d716:	689a      	ldr	r2, [r3, #8]
   1d718:	697b      	ldr	r3, [r7, #20]
   1d71a:	f893 3020 	ldrb.w	r3, [r3, #32]
   1d71e:	4619      	mov	r1, r3
   1d720:	4610      	mov	r0, r2
   1d722:	f001 fe9d 	bl	1f460 <GPIOPinRead>
   1d726:	4603      	mov	r3, r0
   1d728:	005b      	lsls	r3, r3, #1
   1d72a:	f043 0301 	orr.w	r3, r3, #1
   1d72e:	e017      	b.n	1d760 <pin_call+0x74>
    } else {
        // set pin
        mp_hal_pin_write(self, mp_obj_is_true(args[0]));
   1d730:	697b      	ldr	r3, [r7, #20]
   1d732:	689c      	ldr	r4, [r3, #8]
   1d734:	697b      	ldr	r3, [r7, #20]
   1d736:	f893 5020 	ldrb.w	r5, [r3, #32]
   1d73a:	683b      	ldr	r3, [r7, #0]
   1d73c:	681b      	ldr	r3, [r3, #0]
   1d73e:	4618      	mov	r0, r3
   1d740:	f7f0 fb68 	bl	de14 <mp_obj_is_true>
   1d744:	4603      	mov	r3, r0
   1d746:	2b00      	cmp	r3, #0
   1d748:	d003      	beq.n	1d752 <pin_call+0x66>
   1d74a:	697b      	ldr	r3, [r7, #20]
   1d74c:	f893 3020 	ldrb.w	r3, [r3, #32]
   1d750:	e000      	b.n	1d754 <pin_call+0x68>
   1d752:	2300      	movs	r3, #0
   1d754:	461a      	mov	r2, r3
   1d756:	4629      	mov	r1, r5
   1d758:	4620      	mov	r0, r4
   1d75a:	f001 fe84 	bl	1f466 <GPIOPinWrite>
        return mp_const_none;
   1d75e:	4b02      	ldr	r3, [pc, #8]	; (1d768 <pin_call+0x7c>)
    }
}
   1d760:	4618      	mov	r0, r3
   1d762:	3718      	adds	r7, #24
   1d764:	46bd      	mov	sp, r7
   1d766:	bdb0      	pop	{r4, r5, r7, pc}
   1d768:	0002511c 	.word	0x0002511c

0001d76c <pin_mapper>:

/// \classmethod mapper([fun])
/// Get or set the pin mapper function.
STATIC mp_obj_t pin_mapper(size_t n_args, const mp_obj_t *args) {
   1d76c:	b480      	push	{r7}
   1d76e:	b083      	sub	sp, #12
   1d770:	af00      	add	r7, sp, #0
   1d772:	6078      	str	r0, [r7, #4]
   1d774:	6039      	str	r1, [r7, #0]
    if (n_args > 1) {
   1d776:	687b      	ldr	r3, [r7, #4]
   1d778:	2b01      	cmp	r3, #1
   1d77a:	d906      	bls.n	1d78a <pin_mapper+0x1e>
        MP_STATE_PORT(pin_class_mapper) = args[1];
   1d77c:	683b      	ldr	r3, [r7, #0]
   1d77e:	685b      	ldr	r3, [r3, #4]
   1d780:	4a06      	ldr	r2, [pc, #24]	; (1d79c <pin_mapper+0x30>)
   1d782:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
        return mp_const_none;
   1d786:	4b06      	ldr	r3, [pc, #24]	; (1d7a0 <pin_mapper+0x34>)
   1d788:	e002      	b.n	1d790 <pin_mapper+0x24>
    }
    return MP_STATE_PORT(pin_class_mapper);
   1d78a:	4b04      	ldr	r3, [pc, #16]	; (1d79c <pin_mapper+0x30>)
   1d78c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
}
   1d790:	4618      	mov	r0, r3
   1d792:	370c      	adds	r7, #12
   1d794:	46bd      	mov	sp, r7
   1d796:	f85d 7b04 	ldr.w	r7, [sp], #4
   1d79a:	4770      	bx	lr
   1d79c:	20001248 	.word	0x20001248
   1d7a0:	0002511c 	.word	0x0002511c

0001d7a4 <pin_map_dict>:
STATIC MP_DEFINE_CONST_FUN_OBJ_VAR_BETWEEN(pin_mapper_fun_obj, 1, 2, pin_mapper);
STATIC MP_DEFINE_CONST_CLASSMETHOD_OBJ(pin_mapper_obj, MP_ROM_PTR(&pin_mapper_fun_obj));

/// \classmethod dict([dict])
/// Get or set the pin mapper dictionary.
STATIC mp_obj_t pin_map_dict(size_t n_args, const mp_obj_t *args) {
   1d7a4:	b480      	push	{r7}
   1d7a6:	b083      	sub	sp, #12
   1d7a8:	af00      	add	r7, sp, #0
   1d7aa:	6078      	str	r0, [r7, #4]
   1d7ac:	6039      	str	r1, [r7, #0]
    if (n_args > 1) {
   1d7ae:	687b      	ldr	r3, [r7, #4]
   1d7b0:	2b01      	cmp	r3, #1
   1d7b2:	d906      	bls.n	1d7c2 <pin_map_dict+0x1e>
        MP_STATE_PORT(pin_class_map_dict) = args[1];
   1d7b4:	683b      	ldr	r3, [r7, #0]
   1d7b6:	685b      	ldr	r3, [r3, #4]
   1d7b8:	4a06      	ldr	r2, [pc, #24]	; (1d7d4 <pin_map_dict+0x30>)
   1d7ba:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
        return mp_const_none;
   1d7be:	4b06      	ldr	r3, [pc, #24]	; (1d7d8 <pin_map_dict+0x34>)
   1d7c0:	e002      	b.n	1d7c8 <pin_map_dict+0x24>
    }
    return MP_STATE_PORT(pin_class_map_dict);
   1d7c2:	4b04      	ldr	r3, [pc, #16]	; (1d7d4 <pin_map_dict+0x30>)
   1d7c4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
}
   1d7c8:	4618      	mov	r0, r3
   1d7ca:	370c      	adds	r7, #12
   1d7cc:	46bd      	mov	sp, r7
   1d7ce:	f85d 7b04 	ldr.w	r7, [sp], #4
   1d7d2:	4770      	bx	lr
   1d7d4:	20001248 	.word	0x20001248
   1d7d8:	0002511c 	.word	0x0002511c

0001d7dc <pin_af_list>:
STATIC MP_DEFINE_CONST_FUN_OBJ_VAR_BETWEEN(pin_map_dict_fun_obj, 1, 2, pin_map_dict);
STATIC MP_DEFINE_CONST_CLASSMETHOD_OBJ(pin_map_dict_obj, MP_ROM_PTR(&pin_map_dict_fun_obj));

/// \classmethod af_list()
/// Returns an array of alternate functions available for this pin.
STATIC mp_obj_t pin_af_list(mp_obj_t self_in) {
   1d7dc:	b580      	push	{r7, lr}
   1d7de:	b086      	sub	sp, #24
   1d7e0:	af00      	add	r7, sp, #0
   1d7e2:	6078      	str	r0, [r7, #4]
    pin_obj_t *self = MP_OBJ_TO_PTR(self_in);
   1d7e4:	687b      	ldr	r3, [r7, #4]
   1d7e6:	60fb      	str	r3, [r7, #12]
    mp_obj_t result = mp_obj_new_list(0, NULL);
   1d7e8:	2100      	movs	r1, #0
   1d7ea:	2000      	movs	r0, #0
   1d7ec:	f7f4 fa75 	bl	11cda <mp_obj_new_list>
   1d7f0:	60b8      	str	r0, [r7, #8]

    const pin_af_obj_t *af = self->af_list;
   1d7f2:	68fb      	ldr	r3, [r7, #12]
   1d7f4:	691b      	ldr	r3, [r3, #16]
   1d7f6:	617b      	str	r3, [r7, #20]
    for (mp_uint_t i = 0; i < self->num_afs; i++, af++) {
   1d7f8:	2300      	movs	r3, #0
   1d7fa:	613b      	str	r3, [r7, #16]
   1d7fc:	e009      	b.n	1d812 <pin_af_list+0x36>
        mp_obj_list_append(result, MP_OBJ_FROM_PTR(af));
   1d7fe:	6979      	ldr	r1, [r7, #20]
   1d800:	68b8      	ldr	r0, [r7, #8]
   1d802:	f7f3 fdfe 	bl	11402 <mp_obj_list_append>
    for (mp_uint_t i = 0; i < self->num_afs; i++, af++) {
   1d806:	693b      	ldr	r3, [r7, #16]
   1d808:	3301      	adds	r3, #1
   1d80a:	613b      	str	r3, [r7, #16]
   1d80c:	697b      	ldr	r3, [r7, #20]
   1d80e:	3310      	adds	r3, #16
   1d810:	617b      	str	r3, [r7, #20]
   1d812:	68fb      	ldr	r3, [r7, #12]
   1d814:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
   1d818:	461a      	mov	r2, r3
   1d81a:	693b      	ldr	r3, [r7, #16]
   1d81c:	429a      	cmp	r2, r3
   1d81e:	d8ee      	bhi.n	1d7fe <pin_af_list+0x22>
    }
    return result;
   1d820:	68bb      	ldr	r3, [r7, #8]
}
   1d822:	4618      	mov	r0, r3
   1d824:	3718      	adds	r7, #24
   1d826:	46bd      	mov	sp, r7
   1d828:	bd80      	pop	{r7, pc}

0001d82a <pin_debug>:
STATIC MP_DEFINE_CONST_FUN_OBJ_1(pin_af_list_obj, pin_af_list);

/// \classmethod debug([state])
/// Get or set the debugging state (`True` or `False` for on or off).
STATIC mp_obj_t pin_debug(size_t n_args, const mp_obj_t *args) {
   1d82a:	b580      	push	{r7, lr}
   1d82c:	b082      	sub	sp, #8
   1d82e:	af00      	add	r7, sp, #0
   1d830:	6078      	str	r0, [r7, #4]
   1d832:	6039      	str	r1, [r7, #0]
    if (n_args > 1) {
   1d834:	687b      	ldr	r3, [r7, #4]
   1d836:	2b01      	cmp	r3, #1
   1d838:	d90b      	bls.n	1d852 <pin_debug+0x28>
        pin_class_debug = mp_obj_is_true(args[1]);
   1d83a:	683b      	ldr	r3, [r7, #0]
   1d83c:	3304      	adds	r3, #4
   1d83e:	681b      	ldr	r3, [r3, #0]
   1d840:	4618      	mov	r0, r3
   1d842:	f7f0 fae7 	bl	de14 <mp_obj_is_true>
   1d846:	4603      	mov	r3, r0
   1d848:	461a      	mov	r2, r3
   1d84a:	4b07      	ldr	r3, [pc, #28]	; (1d868 <pin_debug+0x3e>)
   1d84c:	701a      	strb	r2, [r3, #0]
        return mp_const_none;
   1d84e:	4b07      	ldr	r3, [pc, #28]	; (1d86c <pin_debug+0x42>)
   1d850:	e005      	b.n	1d85e <pin_debug+0x34>
    }
    return mp_obj_new_bool(pin_class_debug);
   1d852:	4b05      	ldr	r3, [pc, #20]	; (1d868 <pin_debug+0x3e>)
   1d854:	781b      	ldrb	r3, [r3, #0]
   1d856:	4618      	mov	r0, r3
   1d858:	f7ff fd3c 	bl	1d2d4 <mp_obj_new_bool>
   1d85c:	4603      	mov	r3, r0
}
   1d85e:	4618      	mov	r0, r3
   1d860:	3708      	adds	r7, #8
   1d862:	46bd      	mov	sp, r7
   1d864:	bd80      	pop	{r7, pc}
   1d866:	bf00      	nop
   1d868:	2000121c 	.word	0x2000121c
   1d86c:	0002511c 	.word	0x0002511c

0001d870 <pin_obj_init_helper>:
STATIC MP_DEFINE_CONST_FUN_OBJ_VAR_BETWEEN(pin_debug_fun_obj, 1, 2, pin_debug);
STATIC MP_DEFINE_CONST_CLASSMETHOD_OBJ(pin_debug_obj, MP_ROM_PTR(&pin_debug_fun_obj));

// init(dir, pull=None, af=-1, *, value, alt)
STATIC mp_obj_t pin_obj_init_helper(const pin_obj_t *self, size_t n_args, const mp_obj_t *pos_args, mp_map_t *kw_args) {
   1d870:	b5b0      	push	{r4, r5, r7, lr}
   1d872:	b090      	sub	sp, #64	; 0x40
   1d874:	af02      	add	r7, sp, #8
   1d876:	60f8      	str	r0, [r7, #12]
   1d878:	60b9      	str	r1, [r7, #8]
   1d87a:	607a      	str	r2, [r7, #4]
   1d87c:	603b      	str	r3, [r7, #0]
        { MP_QSTR_alt, MP_ARG_KW_ONLY | MP_ARG_INT, {.u_int = -1}},
    };

    // parse args
    mp_arg_val_t args[MP_ARRAY_SIZE(allowed_args)];
    mp_arg_parse_all(n_args, pos_args, kw_args, MP_ARRAY_SIZE(allowed_args), allowed_args, args);
   1d87e:	f107 0310 	add.w	r3, r7, #16
   1d882:	9301      	str	r3, [sp, #4]
   1d884:	4b59      	ldr	r3, [pc, #356]	; (1d9ec <pin_obj_init_helper+0x17c>)
   1d886:	9300      	str	r3, [sp, #0]
   1d888:	2306      	movs	r3, #6
   1d88a:	683a      	ldr	r2, [r7, #0]
   1d88c:	6879      	ldr	r1, [r7, #4]
   1d88e:	68b8      	ldr	r0, [r7, #8]
   1d890:	f7ef fddc 	bl	d44c <mp_arg_parse_all>

    // get io dir
    uint32_t dir = args[0].u_int;
   1d894:	693b      	ldr	r3, [r7, #16]
   1d896:	62bb      	str	r3, [r7, #40]	; 0x28
    if (!IS_GPIO_DIR(dir)) {
   1d898:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1d89a:	2b00      	cmp	r3, #0
   1d89c:	d00e      	beq.n	1d8bc <pin_obj_init_helper+0x4c>
   1d89e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1d8a0:	2b01      	cmp	r3, #1
   1d8a2:	d00b      	beq.n	1d8bc <pin_obj_init_helper+0x4c>
   1d8a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1d8a6:	2b02      	cmp	r3, #2
   1d8a8:	d008      	beq.n	1d8bc <pin_obj_init_helper+0x4c>
        nlr_raise(mp_obj_new_exception_msg_varg(&mp_type_ValueError, "invalid pin direction: %d", dir));
   1d8aa:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1d8ac:	4950      	ldr	r1, [pc, #320]	; (1d9f0 <pin_obj_init_helper+0x180>)
   1d8ae:	4851      	ldr	r0, [pc, #324]	; (1d9f4 <pin_obj_init_helper+0x184>)
   1d8b0:	f7f2 f8b8 	bl	fa24 <mp_obj_new_exception_msg_varg>
   1d8b4:	4603      	mov	r3, r0
   1d8b6:	4618      	mov	r0, r3
   1d8b8:	f7e2 fd12 	bl	2e0 <nlr_jump>
    }

    // get pull dir
    uint type = GPIO_PIN_TYPE_STD;
   1d8bc:	2308      	movs	r3, #8
   1d8be:	637b      	str	r3, [r7, #52]	; 0x34
    if (args[1].u_obj != mp_const_none) {
   1d8c0:	697b      	ldr	r3, [r7, #20]
   1d8c2:	4a4d      	ldr	r2, [pc, #308]	; (1d9f8 <pin_obj_init_helper+0x188>)
   1d8c4:	4293      	cmp	r3, r2
   1d8c6:	d005      	beq.n	1d8d4 <pin_obj_init_helper+0x64>
        type = mp_obj_get_int(args[1].u_obj);
   1d8c8:	697b      	ldr	r3, [r7, #20]
   1d8ca:	4618      	mov	r0, r3
   1d8cc:	f7f0 fba2 	bl	e014 <mp_obj_get_int>
   1d8d0:	4603      	mov	r3, r0
   1d8d2:	637b      	str	r3, [r7, #52]	; 0x34
    }
    if (!IS_GPIO_TYPE(type)) {
   1d8d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1d8d6:	2b08      	cmp	r3, #8
   1d8d8:	d01c      	beq.n	1d914 <pin_obj_init_helper+0xa4>
   1d8da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1d8dc:	2b0a      	cmp	r3, #10
   1d8de:	d019      	beq.n	1d914 <pin_obj_init_helper+0xa4>
   1d8e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1d8e2:	2b0c      	cmp	r3, #12
   1d8e4:	d016      	beq.n	1d914 <pin_obj_init_helper+0xa4>
   1d8e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1d8e8:	2b09      	cmp	r3, #9
   1d8ea:	d013      	beq.n	1d914 <pin_obj_init_helper+0xa4>
   1d8ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1d8ee:	f5b3 7f84 	cmp.w	r3, #264	; 0x108
   1d8f2:	d00f      	beq.n	1d914 <pin_obj_init_helper+0xa4>
   1d8f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1d8f6:	f5b3 7f02 	cmp.w	r3, #520	; 0x208
   1d8fa:	d00b      	beq.n	1d914 <pin_obj_init_helper+0xa4>
   1d8fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1d8fe:	2b00      	cmp	r3, #0
   1d900:	d008      	beq.n	1d914 <pin_obj_init_helper+0xa4>
        nlr_raise(mp_obj_new_exception_msg_varg(&mp_type_ValueError, "invalid pin type: %d", type));
   1d902:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   1d904:	493d      	ldr	r1, [pc, #244]	; (1d9fc <pin_obj_init_helper+0x18c>)
   1d906:	483b      	ldr	r0, [pc, #236]	; (1d9f4 <pin_obj_init_helper+0x184>)
   1d908:	f7f2 f88c 	bl	fa24 <mp_obj_new_exception_msg_varg>
   1d90c:	4603      	mov	r3, r0
   1d90e:	4618      	mov	r0, r3
   1d910:	f7e2 fce6 	bl	2e0 <nlr_jump>
    }

    uint drive = GPIO_STRENGTH_2MA;
   1d914:	2301      	movs	r3, #1
   1d916:	633b      	str	r3, [r7, #48]	; 0x30
    if (args[2].u_obj != MP_OBJ_NULL) {
   1d918:	69bb      	ldr	r3, [r7, #24]
   1d91a:	2b00      	cmp	r3, #0
   1d91c:	d005      	beq.n	1d92a <pin_obj_init_helper+0xba>
        drive = mp_obj_get_int(args[2].u_obj);
   1d91e:	69bb      	ldr	r3, [r7, #24]
   1d920:	4618      	mov	r0, r3
   1d922:	f7f0 fb77 	bl	e014 <mp_obj_get_int>
   1d926:	4603      	mov	r3, r0
   1d928:	633b      	str	r3, [r7, #48]	; 0x30
    }
    if (!IS_GPIO_STRENGTH(drive)) {
   1d92a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1d92c:	2b01      	cmp	r3, #1
   1d92e:	d00e      	beq.n	1d94e <pin_obj_init_helper+0xde>
   1d930:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1d932:	2b02      	cmp	r3, #2
   1d934:	d00b      	beq.n	1d94e <pin_obj_init_helper+0xde>
   1d936:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1d938:	2b66      	cmp	r3, #102	; 0x66
   1d93a:	d008      	beq.n	1d94e <pin_obj_init_helper+0xde>
        nlr_raise(mp_obj_new_exception_msg_varg(&mp_type_ValueError, "invalid pin drive: %d", drive));
   1d93c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   1d93e:	4930      	ldr	r1, [pc, #192]	; (1da00 <pin_obj_init_helper+0x190>)
   1d940:	482c      	ldr	r0, [pc, #176]	; (1d9f4 <pin_obj_init_helper+0x184>)
   1d942:	f7f2 f86f 	bl	fa24 <mp_obj_new_exception_msg_varg>
   1d946:	4603      	mov	r3, r0
   1d948:	4618      	mov	r0, r3
   1d94a:	f7e2 fcc9 	bl	2e0 <nlr_jump>
    }

    // get af (alternate function); alt-arg overrides af-arg
    mp_int_t af = args[5].u_int;
   1d94e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1d950:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (af == -1) {
   1d952:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1d954:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   1d958:	d101      	bne.n	1d95e <pin_obj_init_helper+0xee>
        af = args[3].u_int;
   1d95a:	69fb      	ldr	r3, [r7, #28]
   1d95c:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    if ((dir == GPIO_DIR_MODE_HW) && !IS_GPIO_AF(af)) {
   1d95e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1d960:	2b02      	cmp	r3, #2
   1d962:	d119      	bne.n	1d998 <pin_obj_init_helper+0x128>
   1d964:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1d966:	2b01      	cmp	r3, #1
   1d968:	dd04      	ble.n	1d974 <pin_obj_init_helper+0x104>
   1d96a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1d96c:	2b0c      	cmp	r3, #12
   1d96e:	dc01      	bgt.n	1d974 <pin_obj_init_helper+0x104>
   1d970:	2301      	movs	r3, #1
   1d972:	e000      	b.n	1d976 <pin_obj_init_helper+0x106>
   1d974:	2300      	movs	r3, #0
   1d976:	f003 0301 	and.w	r3, r3, #1
   1d97a:	b2db      	uxtb	r3, r3
   1d97c:	f083 0301 	eor.w	r3, r3, #1
   1d980:	b2db      	uxtb	r3, r3
   1d982:	2b00      	cmp	r3, #0
   1d984:	d008      	beq.n	1d998 <pin_obj_init_helper+0x128>
        nlr_raise(mp_obj_new_exception_msg_varg(&mp_type_ValueError, "invalid pin af: %d", af));
   1d986:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   1d988:	491e      	ldr	r1, [pc, #120]	; (1da04 <pin_obj_init_helper+0x194>)
   1d98a:	481a      	ldr	r0, [pc, #104]	; (1d9f4 <pin_obj_init_helper+0x184>)
   1d98c:	f7f2 f84a 	bl	fa24 <mp_obj_new_exception_msg_varg>
   1d990:	4603      	mov	r3, r0
   1d992:	4618      	mov	r0, r3
   1d994:	f7e2 fca4 	bl	2e0 <nlr_jump>

    // if given, set the pin value before initialising to prevent glitches
//    if (args[4].u_obj != MP_OBJ_NULL) {
//        mp_hal_pin_write(self, mp_obj_is_true(args[3].u_obj));
//    }
    mp_hal_pin_config(self, dir, type, drive);
   1d998:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1d99a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   1d99c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   1d99e:	68f8      	ldr	r0, [r7, #12]
   1d9a0:	f7ff fc34 	bl	1d20c <mp_hal_pin_config>
    mp_hal_pin_set_af(self, af);
   1d9a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1d9a6:	b2db      	uxtb	r3, r3
   1d9a8:	4619      	mov	r1, r3
   1d9aa:	68f8      	ldr	r0, [r7, #12]
   1d9ac:	f7ff fc50 	bl	1d250 <mp_hal_pin_set_af>

    if (args[4].u_obj != MP_OBJ_NULL) {
   1d9b0:	6a3b      	ldr	r3, [r7, #32]
   1d9b2:	2b00      	cmp	r3, #0
   1d9b4:	d015      	beq.n	1d9e2 <pin_obj_init_helper+0x172>
        mp_hal_pin_write(self, mp_obj_is_true(args[4].u_obj));
   1d9b6:	68fb      	ldr	r3, [r7, #12]
   1d9b8:	689c      	ldr	r4, [r3, #8]
   1d9ba:	68fb      	ldr	r3, [r7, #12]
   1d9bc:	f893 5020 	ldrb.w	r5, [r3, #32]
   1d9c0:	6a3b      	ldr	r3, [r7, #32]
   1d9c2:	4618      	mov	r0, r3
   1d9c4:	f7f0 fa26 	bl	de14 <mp_obj_is_true>
   1d9c8:	4603      	mov	r3, r0
   1d9ca:	2b00      	cmp	r3, #0
   1d9cc:	d003      	beq.n	1d9d6 <pin_obj_init_helper+0x166>
   1d9ce:	68fb      	ldr	r3, [r7, #12]
   1d9d0:	f893 3020 	ldrb.w	r3, [r3, #32]
   1d9d4:	e000      	b.n	1d9d8 <pin_obj_init_helper+0x168>
   1d9d6:	2300      	movs	r3, #0
   1d9d8:	461a      	mov	r2, r3
   1d9da:	4629      	mov	r1, r5
   1d9dc:	4620      	mov	r0, r4
   1d9de:	f001 fd42 	bl	1f466 <GPIOPinWrite>
    }

    return mp_const_none;
   1d9e2:	4b05      	ldr	r3, [pc, #20]	; (1d9f8 <pin_obj_init_helper+0x188>)
}
   1d9e4:	4618      	mov	r0, r3
   1d9e6:	3738      	adds	r7, #56	; 0x38
   1d9e8:	46bd      	mov	sp, r7
   1d9ea:	bdb0      	pop	{r4, r5, r7, pc}
   1d9ec:	0002757c 	.word	0x0002757c
   1d9f0:	0002733c 	.word	0x0002733c
   1d9f4:	000243b0 	.word	0x000243b0
   1d9f8:	0002511c 	.word	0x0002511c
   1d9fc:	00027358 	.word	0x00027358
   1da00:	00027370 	.word	0x00027370
   1da04:	00027388 	.word	0x00027388

0001da08 <pin_obj_init>:

STATIC mp_obj_t pin_obj_init(size_t n_args, const mp_obj_t *args, mp_map_t *kw_args) {
   1da08:	b580      	push	{r7, lr}
   1da0a:	b084      	sub	sp, #16
   1da0c:	af00      	add	r7, sp, #0
   1da0e:	60f8      	str	r0, [r7, #12]
   1da10:	60b9      	str	r1, [r7, #8]
   1da12:	607a      	str	r2, [r7, #4]
    return pin_obj_init_helper(MP_OBJ_TO_PTR(args[0]), n_args - 1, args + 1, kw_args);
   1da14:	68bb      	ldr	r3, [r7, #8]
   1da16:	6818      	ldr	r0, [r3, #0]
   1da18:	68fb      	ldr	r3, [r7, #12]
   1da1a:	1e59      	subs	r1, r3, #1
   1da1c:	68bb      	ldr	r3, [r7, #8]
   1da1e:	1d1a      	adds	r2, r3, #4
   1da20:	687b      	ldr	r3, [r7, #4]
   1da22:	f7ff ff25 	bl	1d870 <pin_obj_init_helper>
   1da26:	4603      	mov	r3, r0
}
   1da28:	4618      	mov	r0, r3
   1da2a:	3710      	adds	r7, #16
   1da2c:	46bd      	mov	sp, r7
   1da2e:	bd80      	pop	{r7, pc}

0001da30 <pin_value>:
///
///   - With no argument, return 0 or 1 depending on the logic level of the pin.
///   - With `value` given, set the logic level of the pin.  `value` can be
///   anything that converts to a boolean.  If it converts to `True`, the pin
///   is set high, otherwise it is set low.
STATIC mp_obj_t pin_value(size_t n_args, const mp_obj_t *args) {
   1da30:	b580      	push	{r7, lr}
   1da32:	b082      	sub	sp, #8
   1da34:	af00      	add	r7, sp, #0
   1da36:	6078      	str	r0, [r7, #4]
   1da38:	6039      	str	r1, [r7, #0]
    return pin_call(args[0], n_args - 1, 0, args + 1);
   1da3a:	683b      	ldr	r3, [r7, #0]
   1da3c:	6818      	ldr	r0, [r3, #0]
   1da3e:	687b      	ldr	r3, [r7, #4]
   1da40:	1e59      	subs	r1, r3, #1
   1da42:	683b      	ldr	r3, [r7, #0]
   1da44:	3304      	adds	r3, #4
   1da46:	2200      	movs	r2, #0
   1da48:	f7ff fe50 	bl	1d6ec <pin_call>
   1da4c:	4603      	mov	r3, r0
}
   1da4e:	4618      	mov	r0, r3
   1da50:	3708      	adds	r7, #8
   1da52:	46bd      	mov	sp, r7
   1da54:	bd80      	pop	{r7, pc}

0001da56 <pin_off>:
STATIC MP_DEFINE_CONST_FUN_OBJ_VAR_BETWEEN(pin_value_obj, 1, 2, pin_value);

STATIC mp_obj_t pin_off(mp_obj_t self_in) {
   1da56:	b580      	push	{r7, lr}
   1da58:	b084      	sub	sp, #16
   1da5a:	af00      	add	r7, sp, #0
   1da5c:	6078      	str	r0, [r7, #4]
    pin_obj_t *self = MP_OBJ_TO_PTR(self_in);
   1da5e:	687b      	ldr	r3, [r7, #4]
   1da60:	60fb      	str	r3, [r7, #12]
    mp_hal_pin_low(self);
   1da62:	68fb      	ldr	r3, [r7, #12]
   1da64:	6898      	ldr	r0, [r3, #8]
   1da66:	68fb      	ldr	r3, [r7, #12]
   1da68:	f893 3020 	ldrb.w	r3, [r3, #32]
   1da6c:	2200      	movs	r2, #0
   1da6e:	4619      	mov	r1, r3
   1da70:	f001 fcf9 	bl	1f466 <GPIOPinWrite>
    return mp_const_none;
   1da74:	4b02      	ldr	r3, [pc, #8]	; (1da80 <pin_off+0x2a>)
}
   1da76:	4618      	mov	r0, r3
   1da78:	3710      	adds	r7, #16
   1da7a:	46bd      	mov	sp, r7
   1da7c:	bd80      	pop	{r7, pc}
   1da7e:	bf00      	nop
   1da80:	0002511c 	.word	0x0002511c

0001da84 <pin_on>:
STATIC MP_DEFINE_CONST_FUN_OBJ_1(pin_off_obj, pin_off);

STATIC mp_obj_t pin_on(mp_obj_t self_in) {
   1da84:	b580      	push	{r7, lr}
   1da86:	b084      	sub	sp, #16
   1da88:	af00      	add	r7, sp, #0
   1da8a:	6078      	str	r0, [r7, #4]
    pin_obj_t *self = MP_OBJ_TO_PTR(self_in);
   1da8c:	687b      	ldr	r3, [r7, #4]
   1da8e:	60fb      	str	r3, [r7, #12]
    mp_hal_pin_high(self);
   1da90:	68fb      	ldr	r3, [r7, #12]
   1da92:	6898      	ldr	r0, [r3, #8]
   1da94:	68fb      	ldr	r3, [r7, #12]
   1da96:	f893 1020 	ldrb.w	r1, [r3, #32]
   1da9a:	68fb      	ldr	r3, [r7, #12]
   1da9c:	f893 3020 	ldrb.w	r3, [r3, #32]
   1daa0:	461a      	mov	r2, r3
   1daa2:	f001 fce0 	bl	1f466 <GPIOPinWrite>
    return mp_const_none;
   1daa6:	4b02      	ldr	r3, [pc, #8]	; (1dab0 <pin_on+0x2c>)
}
   1daa8:	4618      	mov	r0, r3
   1daaa:	3710      	adds	r7, #16
   1daac:	46bd      	mov	sp, r7
   1daae:	bd80      	pop	{r7, pc}
   1dab0:	0002511c 	.word	0x0002511c

0001dab4 <pin_irq>:
STATIC MP_DEFINE_CONST_FUN_OBJ_1(pin_on_obj, pin_on);

// pin.irq(handler=None, trigger=IRQ_RISING, hard=False)
STATIC mp_obj_t pin_irq(size_t n_args, const mp_obj_t *pos_args, mp_map_t *kw_args) {
   1dab4:	b480      	push	{r7}
   1dab6:	b085      	sub	sp, #20
   1dab8:	af00      	add	r7, sp, #0
   1daba:	60f8      	str	r0, [r7, #12]
   1dabc:	60b9      	str	r1, [r7, #8]
   1dabe:	607a      	str	r2, [r7, #4]
//        extint_register_pin(self, args[ARG_trigger].u_int,
//            args[ARG_hard].u_bool, args[ARG_handler].u_obj);
//    }
//
//    // TODO should return an IRQ object
    return mp_const_none;
   1dac0:	4b03      	ldr	r3, [pc, #12]	; (1dad0 <pin_irq+0x1c>)
}
   1dac2:	4618      	mov	r0, r3
   1dac4:	3714      	adds	r7, #20
   1dac6:	46bd      	mov	sp, r7
   1dac8:	f85d 7b04 	ldr.w	r7, [sp], #4
   1dacc:	4770      	bx	lr
   1dace:	bf00      	nop
   1dad0:	0002511c 	.word	0x0002511c

0001dad4 <pin_name>:
STATIC MP_DEFINE_CONST_FUN_OBJ_KW(pin_irq_obj, 1, pin_irq);

/// \method name()
/// Get the pin name.
STATIC mp_obj_t pin_name(mp_obj_t self_in) {
   1dad4:	b480      	push	{r7}
   1dad6:	b085      	sub	sp, #20
   1dad8:	af00      	add	r7, sp, #0
   1dada:	6078      	str	r0, [r7, #4]
    pin_obj_t *self = MP_OBJ_TO_PTR(self_in);
   1dadc:	687b      	ldr	r3, [r7, #4]
   1dade:	60fb      	str	r3, [r7, #12]
    return MP_OBJ_NEW_QSTR(self->name);
   1dae0:	68fb      	ldr	r3, [r7, #12]
   1dae2:	685b      	ldr	r3, [r3, #4]
   1dae4:	009b      	lsls	r3, r3, #2
   1dae6:	f043 0302 	orr.w	r3, r3, #2
}
   1daea:	4618      	mov	r0, r3
   1daec:	3714      	adds	r7, #20
   1daee:	46bd      	mov	sp, r7
   1daf0:	f85d 7b04 	ldr.w	r7, [sp], #4
   1daf4:	4770      	bx	lr

0001daf6 <pin_names>:
STATIC MP_DEFINE_CONST_FUN_OBJ_1(pin_name_obj, pin_name);

/// \method names()
/// Returns the cpu and board names for this pin.
STATIC mp_obj_t pin_names(mp_obj_t self_in) {
   1daf6:	b580      	push	{r7, lr}
   1daf8:	b088      	sub	sp, #32
   1dafa:	af00      	add	r7, sp, #0
   1dafc:	6078      	str	r0, [r7, #4]
    pin_obj_t *self = MP_OBJ_TO_PTR(self_in);
   1dafe:	687b      	ldr	r3, [r7, #4]
   1db00:	617b      	str	r3, [r7, #20]
    mp_obj_t result = mp_obj_new_list(0, NULL);
   1db02:	2100      	movs	r1, #0
   1db04:	2000      	movs	r0, #0
   1db06:	f7f4 f8e8 	bl	11cda <mp_obj_new_list>
   1db0a:	6138      	str	r0, [r7, #16]
    mp_obj_list_append(result, MP_OBJ_NEW_QSTR(self->name));
   1db0c:	697b      	ldr	r3, [r7, #20]
   1db0e:	685b      	ldr	r3, [r3, #4]
   1db10:	009b      	lsls	r3, r3, #2
   1db12:	f043 0302 	orr.w	r3, r3, #2
   1db16:	4619      	mov	r1, r3
   1db18:	6938      	ldr	r0, [r7, #16]
   1db1a:	f7f3 fc72 	bl	11402 <mp_obj_list_append>

    const mp_map_t *map = &pin_board_pins_locals_dict.map;
   1db1e:	4b13      	ldr	r3, [pc, #76]	; (1db6c <pin_names+0x76>)
   1db20:	60fb      	str	r3, [r7, #12]
    mp_map_elem_t *elem = map->table;
   1db22:	68fb      	ldr	r3, [r7, #12]
   1db24:	689b      	ldr	r3, [r3, #8]
   1db26:	61fb      	str	r3, [r7, #28]

    for (mp_uint_t i = 0; i < map->used; i++, elem++) {
   1db28:	2300      	movs	r3, #0
   1db2a:	61bb      	str	r3, [r7, #24]
   1db2c:	e010      	b.n	1db50 <pin_names+0x5a>
        if (elem->value == self_in) {
   1db2e:	69fb      	ldr	r3, [r7, #28]
   1db30:	685a      	ldr	r2, [r3, #4]
   1db32:	687b      	ldr	r3, [r7, #4]
   1db34:	429a      	cmp	r2, r3
   1db36:	d105      	bne.n	1db44 <pin_names+0x4e>
            mp_obj_list_append(result, elem->key);
   1db38:	69fb      	ldr	r3, [r7, #28]
   1db3a:	681b      	ldr	r3, [r3, #0]
   1db3c:	4619      	mov	r1, r3
   1db3e:	6938      	ldr	r0, [r7, #16]
   1db40:	f7f3 fc5f 	bl	11402 <mp_obj_list_append>
    for (mp_uint_t i = 0; i < map->used; i++, elem++) {
   1db44:	69bb      	ldr	r3, [r7, #24]
   1db46:	3301      	adds	r3, #1
   1db48:	61bb      	str	r3, [r7, #24]
   1db4a:	69fb      	ldr	r3, [r7, #28]
   1db4c:	3308      	adds	r3, #8
   1db4e:	61fb      	str	r3, [r7, #28]
   1db50:	68fb      	ldr	r3, [r7, #12]
   1db52:	681b      	ldr	r3, [r3, #0]
   1db54:	f3c3 03dc 	ubfx	r3, r3, #3, #29
   1db58:	461a      	mov	r2, r3
   1db5a:	69bb      	ldr	r3, [r7, #24]
   1db5c:	429a      	cmp	r2, r3
   1db5e:	d8e6      	bhi.n	1db2e <pin_names+0x38>
        }
    }
    return result;
   1db60:	693b      	ldr	r3, [r7, #16]
}
   1db62:	4618      	mov	r0, r3
   1db64:	3720      	adds	r7, #32
   1db66:	46bd      	mov	sp, r7
   1db68:	bd80      	pop	{r7, pc}
   1db6a:	bf00      	nop
   1db6c:	00027ed0 	.word	0x00027ed0

0001db70 <pin_port>:
STATIC MP_DEFINE_CONST_FUN_OBJ_1(pin_names_obj, pin_names);

/// \method port()
/// Get the pin port.
STATIC mp_obj_t pin_port(mp_obj_t self_in) {
   1db70:	b480      	push	{r7}
   1db72:	b085      	sub	sp, #20
   1db74:	af00      	add	r7, sp, #0
   1db76:	6078      	str	r0, [r7, #4]
    pin_obj_t *self = MP_OBJ_TO_PTR(self_in);
   1db78:	687b      	ldr	r3, [r7, #4]
   1db7a:	60fb      	str	r3, [r7, #12]
    return MP_OBJ_NEW_SMALL_INT(self->port);
   1db7c:	68fb      	ldr	r3, [r7, #12]
   1db7e:	689b      	ldr	r3, [r3, #8]
   1db80:	005b      	lsls	r3, r3, #1
   1db82:	f043 0301 	orr.w	r3, r3, #1
}
   1db86:	4618      	mov	r0, r3
   1db88:	3714      	adds	r7, #20
   1db8a:	46bd      	mov	sp, r7
   1db8c:	f85d 7b04 	ldr.w	r7, [sp], #4
   1db90:	4770      	bx	lr

0001db92 <pin_pin>:
STATIC MP_DEFINE_CONST_FUN_OBJ_1(pin_port_obj, pin_port);

/// \method pin()
/// Get the pin number.
STATIC mp_obj_t pin_pin(mp_obj_t self_in) {
   1db92:	b480      	push	{r7}
   1db94:	b085      	sub	sp, #20
   1db96:	af00      	add	r7, sp, #0
   1db98:	6078      	str	r0, [r7, #4]
    pin_obj_t *self = MP_OBJ_TO_PTR(self_in);
   1db9a:	687b      	ldr	r3, [r7, #4]
   1db9c:	60fb      	str	r3, [r7, #12]
    return MP_OBJ_NEW_SMALL_INT(self->pin_num);
   1db9e:	68fb      	ldr	r3, [r7, #12]
   1dba0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
   1dba4:	005b      	lsls	r3, r3, #1
   1dba6:	f043 0301 	orr.w	r3, r3, #1
}
   1dbaa:	4618      	mov	r0, r3
   1dbac:	3714      	adds	r7, #20
   1dbae:	46bd      	mov	sp, r7
   1dbb0:	f85d 7b04 	ldr.w	r7, [sp], #4
   1dbb4:	4770      	bx	lr

0001dbb6 <pin_gpio>:
STATIC MP_DEFINE_CONST_FUN_OBJ_1(pin_pin_obj, pin_pin);

/// \method gpio()
/// Returns the base address of the GPIO block associated with this pin.
STATIC mp_obj_t pin_gpio(mp_obj_t self_in) {
   1dbb6:	b480      	push	{r7}
   1dbb8:	b085      	sub	sp, #20
   1dbba:	af00      	add	r7, sp, #0
   1dbbc:	6078      	str	r0, [r7, #4]
    pin_obj_t *self = MP_OBJ_TO_PTR(self_in);
   1dbbe:	687b      	ldr	r3, [r7, #4]
   1dbc0:	60fb      	str	r3, [r7, #12]
    return MP_OBJ_NEW_SMALL_INT((intptr_t)self->port);
   1dbc2:	68fb      	ldr	r3, [r7, #12]
   1dbc4:	689b      	ldr	r3, [r3, #8]
   1dbc6:	005b      	lsls	r3, r3, #1
   1dbc8:	f043 0301 	orr.w	r3, r3, #1
}
   1dbcc:	4618      	mov	r0, r3
   1dbce:	3714      	adds	r7, #20
   1dbd0:	46bd      	mov	sp, r7
   1dbd2:	f85d 7b04 	ldr.w	r7, [sp], #4
   1dbd6:	4770      	bx	lr

0001dbd8 <pin_dir>:

/// \method dir()
/// Returns the currently configured mode of the pin. The integer returned
/// will match one of the allowed constants for the mode argument to the init
/// function.
STATIC mp_obj_t pin_dir(mp_obj_t self_in) {
   1dbd8:	b580      	push	{r7, lr}
   1dbda:	b082      	sub	sp, #8
   1dbdc:	af00      	add	r7, sp, #0
   1dbde:	6078      	str	r0, [r7, #4]
    return MP_OBJ_NEW_SMALL_INT(mp_hal_pin_get_dir((pin_obj_t*)MP_OBJ_TO_PTR(self_in)));
   1dbe0:	687b      	ldr	r3, [r7, #4]
   1dbe2:	689a      	ldr	r2, [r3, #8]
   1dbe4:	687b      	ldr	r3, [r7, #4]
   1dbe6:	f893 3020 	ldrb.w	r3, [r3, #32]
   1dbea:	4619      	mov	r1, r3
   1dbec:	4610      	mov	r0, r2
   1dbee:	f001 fb3a 	bl	1f266 <GPIODirModeGet>
   1dbf2:	4603      	mov	r3, r0
   1dbf4:	005b      	lsls	r3, r3, #1
   1dbf6:	f043 0301 	orr.w	r3, r3, #1
}
   1dbfa:	4618      	mov	r0, r3
   1dbfc:	3708      	adds	r7, #8
   1dbfe:	46bd      	mov	sp, r7
   1dc00:	bd80      	pop	{r7, pc}

0001dc02 <pin_type>:

/// \method pull()
/// Returns the currently configured pull of the pin. The integer returned
/// will match one of the allowed constants for the pull argument to the init
/// function.
STATIC mp_obj_t pin_type(mp_obj_t self_in) {
   1dc02:	b580      	push	{r7, lr}
   1dc04:	b084      	sub	sp, #16
   1dc06:	af00      	add	r7, sp, #0
   1dc08:	6078      	str	r0, [r7, #4]
    uint32_t type;
    pin_obj_t* self = MP_OBJ_TO_PTR(self_in);
   1dc0a:	687b      	ldr	r3, [r7, #4]
   1dc0c:	60fb      	str	r3, [r7, #12]
    MAP_GPIOPadConfigGet(self->port, self->pin_mask, NULL, &type);
   1dc0e:	68fb      	ldr	r3, [r7, #12]
   1dc10:	6898      	ldr	r0, [r3, #8]
   1dc12:	68fb      	ldr	r3, [r7, #12]
   1dc14:	f893 1020 	ldrb.w	r1, [r3, #32]
   1dc18:	f107 0308 	add.w	r3, r7, #8
   1dc1c:	2200      	movs	r2, #0
   1dc1e:	f001 fbb7 	bl	1f390 <GPIOPadConfigGet>

    return MP_OBJ_NEW_SMALL_INT(type);
   1dc22:	68bb      	ldr	r3, [r7, #8]
   1dc24:	005b      	lsls	r3, r3, #1
   1dc26:	f043 0301 	orr.w	r3, r3, #1
}
   1dc2a:	4618      	mov	r0, r3
   1dc2c:	3710      	adds	r7, #16
   1dc2e:	46bd      	mov	sp, r7
   1dc30:	bd80      	pop	{r7, pc}

0001dc32 <pin_af>:

/// \method af()
/// Returns the currently configured alternate-function of the pin. The
/// integer returned will match one of the allowed constants for the af
/// argument to the init function.
STATIC mp_obj_t pin_af(mp_obj_t self_in) {
   1dc32:	b480      	push	{r7}
   1dc34:	b083      	sub	sp, #12
   1dc36:	af00      	add	r7, sp, #0
   1dc38:	6078      	str	r0, [r7, #4]
    return MP_OBJ_NEW_SMALL_INT(mp_hal_pin_get_af((pin_obj_t*)MP_OBJ_TO_PTR(self_in)));
   1dc3a:	687b      	ldr	r3, [r7, #4]
   1dc3c:	68db      	ldr	r3, [r3, #12]
   1dc3e:	f8d3 252c 	ldr.w	r2, [r3, #1324]	; 0x52c
   1dc42:	687b      	ldr	r3, [r7, #4]
   1dc44:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
   1dc48:	009b      	lsls	r3, r3, #2
   1dc4a:	fa22 f303 	lsr.w	r3, r2, r3
   1dc4e:	005b      	lsls	r3, r3, #1
   1dc50:	f003 031e 	and.w	r3, r3, #30
   1dc54:	f043 0301 	orr.w	r3, r3, #1
}
   1dc58:	4618      	mov	r0, r3
   1dc5a:	370c      	adds	r7, #12
   1dc5c:	46bd      	mov	sp, r7
   1dc5e:	f85d 7b04 	ldr.w	r7, [sp], #4
   1dc62:	4770      	bx	lr

0001dc64 <pin_named_pins_obj_print>:
//    { &mp_type_type },
//    .name = MP_QSTR_cpu,
//    .locals_dict = (mp_obj_dict_t*)&pin_cpu_pins_locals_dict,
//};

STATIC void pin_named_pins_obj_print(const mp_print_t *print, mp_obj_t self_in, mp_print_kind_t kind) {
   1dc64:	b580      	push	{r7, lr}
   1dc66:	b086      	sub	sp, #24
   1dc68:	af00      	add	r7, sp, #0
   1dc6a:	60f8      	str	r0, [r7, #12]
   1dc6c:	60b9      	str	r1, [r7, #8]
   1dc6e:	607a      	str	r2, [r7, #4]
    pin_named_pins_obj_t *self = self_in;
   1dc70:	68bb      	ldr	r3, [r7, #8]
   1dc72:	617b      	str	r3, [r7, #20]
    mp_printf(print, "<Pin.%q>", self->name);
   1dc74:	697b      	ldr	r3, [r7, #20]
   1dc76:	685b      	ldr	r3, [r3, #4]
   1dc78:	461a      	mov	r2, r3
   1dc7a:	4904      	ldr	r1, [pc, #16]	; (1dc8c <pin_named_pins_obj_print+0x28>)
   1dc7c:	68f8      	ldr	r0, [r7, #12]
   1dc7e:	f7e4 f9f7 	bl	2070 <mp_printf>
}
   1dc82:	bf00      	nop
   1dc84:	3718      	adds	r7, #24
   1dc86:	46bd      	mov	sp, r7
   1dc88:	bd80      	pop	{r7, pc}
   1dc8a:	bf00      	nop
   1dc8c:	000275ac 	.word	0x000275ac

0001dc90 <pin_find_named_pin>:
    .name = MP_QSTR_board,
    .print = pin_named_pins_obj_print,
    .locals_dict = (mp_obj_t)&pin_board_pins_locals_dict,
};

const pin_obj_t *pin_find_named_pin(const mp_obj_dict_t *named_pins, mp_obj_t name) {
   1dc90:	b580      	push	{r7, lr}
   1dc92:	b084      	sub	sp, #16
   1dc94:	af00      	add	r7, sp, #0
   1dc96:	6078      	str	r0, [r7, #4]
   1dc98:	6039      	str	r1, [r7, #0]
    const mp_map_t *named_map = &named_pins->map;
   1dc9a:	687b      	ldr	r3, [r7, #4]
   1dc9c:	3304      	adds	r3, #4
   1dc9e:	60fb      	str	r3, [r7, #12]
    mp_map_elem_t *named_elem = mp_map_lookup((mp_map_t*)named_map, name, MP_MAP_LOOKUP);
   1dca0:	2200      	movs	r2, #0
   1dca2:	6839      	ldr	r1, [r7, #0]
   1dca4:	68f8      	ldr	r0, [r7, #12]
   1dca6:	f7ef fdf3 	bl	d890 <mp_map_lookup>
   1dcaa:	60b8      	str	r0, [r7, #8]
    if (named_elem != NULL && named_elem->value != MP_OBJ_NULL) {
   1dcac:	68bb      	ldr	r3, [r7, #8]
   1dcae:	2b00      	cmp	r3, #0
   1dcb0:	d006      	beq.n	1dcc0 <pin_find_named_pin+0x30>
   1dcb2:	68bb      	ldr	r3, [r7, #8]
   1dcb4:	685b      	ldr	r3, [r3, #4]
   1dcb6:	2b00      	cmp	r3, #0
   1dcb8:	d002      	beq.n	1dcc0 <pin_find_named_pin+0x30>
        return MP_OBJ_TO_PTR(named_elem->value);
   1dcba:	68bb      	ldr	r3, [r7, #8]
   1dcbc:	685b      	ldr	r3, [r3, #4]
   1dcbe:	e000      	b.n	1dcc2 <pin_find_named_pin+0x32>
    }
    return NULL;
   1dcc0:	2300      	movs	r3, #0
}
   1dcc2:	4618      	mov	r0, r3
   1dcc4:	3710      	adds	r7, #16
   1dcc6:	46bd      	mov	sp, r7
   1dcc8:	bd80      	pop	{r7, pc}

0001dcca <pin_find_af>:

const pin_af_obj_t *pin_find_af(const pin_obj_t *pin, uint8_t fn, uint8_t unit) {
   1dcca:	b480      	push	{r7}
   1dccc:	b085      	sub	sp, #20
   1dcce:	af00      	add	r7, sp, #0
   1dcd0:	6078      	str	r0, [r7, #4]
   1dcd2:	460b      	mov	r3, r1
   1dcd4:	70fb      	strb	r3, [r7, #3]
   1dcd6:	4613      	mov	r3, r2
   1dcd8:	70bb      	strb	r3, [r7, #2]
    const pin_af_obj_t *af = pin->af_list;
   1dcda:	687b      	ldr	r3, [r7, #4]
   1dcdc:	691b      	ldr	r3, [r3, #16]
   1dcde:	60fb      	str	r3, [r7, #12]
    for (mp_uint_t i = 0; i < pin->num_afs; i++, af++) {
   1dce0:	2300      	movs	r3, #0
   1dce2:	60bb      	str	r3, [r7, #8]
   1dce4:	e011      	b.n	1dd0a <pin_find_af+0x40>
        if (af->fn == fn && af->unit == unit) {
   1dce6:	68fb      	ldr	r3, [r7, #12]
   1dce8:	795b      	ldrb	r3, [r3, #5]
   1dcea:	78fa      	ldrb	r2, [r7, #3]
   1dcec:	429a      	cmp	r2, r3
   1dcee:	d106      	bne.n	1dcfe <pin_find_af+0x34>
   1dcf0:	68fb      	ldr	r3, [r7, #12]
   1dcf2:	799b      	ldrb	r3, [r3, #6]
   1dcf4:	78ba      	ldrb	r2, [r7, #2]
   1dcf6:	429a      	cmp	r2, r3
   1dcf8:	d101      	bne.n	1dcfe <pin_find_af+0x34>
            return af;
   1dcfa:	68fb      	ldr	r3, [r7, #12]
   1dcfc:	e00d      	b.n	1dd1a <pin_find_af+0x50>
    for (mp_uint_t i = 0; i < pin->num_afs; i++, af++) {
   1dcfe:	68bb      	ldr	r3, [r7, #8]
   1dd00:	3301      	adds	r3, #1
   1dd02:	60bb      	str	r3, [r7, #8]
   1dd04:	68fb      	ldr	r3, [r7, #12]
   1dd06:	3310      	adds	r3, #16
   1dd08:	60fb      	str	r3, [r7, #12]
   1dd0a:	687b      	ldr	r3, [r7, #4]
   1dd0c:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
   1dd10:	461a      	mov	r2, r3
   1dd12:	68bb      	ldr	r3, [r7, #8]
   1dd14:	429a      	cmp	r2, r3
   1dd16:	d8e6      	bhi.n	1dce6 <pin_find_af+0x1c>
        }
    }
    return NULL;
   1dd18:	2300      	movs	r3, #0
}
   1dd1a:	4618      	mov	r0, r3
   1dd1c:	3714      	adds	r7, #20
   1dd1e:	46bd      	mov	sp, r7
   1dd20:	f85d 7b04 	ldr.w	r7, [sp], #4
   1dd24:	4770      	bx	lr

0001dd26 <pin_find_af_by_index>:

const pin_af_obj_t *pin_find_af_by_index(const pin_obj_t *pin, mp_uint_t af_idx) {
   1dd26:	b480      	push	{r7}
   1dd28:	b085      	sub	sp, #20
   1dd2a:	af00      	add	r7, sp, #0
   1dd2c:	6078      	str	r0, [r7, #4]
   1dd2e:	6039      	str	r1, [r7, #0]
    const pin_af_obj_t *af = pin->af_list;
   1dd30:	687b      	ldr	r3, [r7, #4]
   1dd32:	691b      	ldr	r3, [r3, #16]
   1dd34:	60fb      	str	r3, [r7, #12]
    for (mp_uint_t i = 0; i < pin->num_afs; i++, af++) {
   1dd36:	2300      	movs	r3, #0
   1dd38:	60bb      	str	r3, [r7, #8]
   1dd3a:	e00e      	b.n	1dd5a <pin_find_af_by_index+0x34>
        if (af->idx == af_idx) {
   1dd3c:	68fb      	ldr	r3, [r7, #12]
   1dd3e:	f993 3004 	ldrsb.w	r3, [r3, #4]
   1dd42:	461a      	mov	r2, r3
   1dd44:	683b      	ldr	r3, [r7, #0]
   1dd46:	429a      	cmp	r2, r3
   1dd48:	d101      	bne.n	1dd4e <pin_find_af_by_index+0x28>
            return af;
   1dd4a:	68fb      	ldr	r3, [r7, #12]
   1dd4c:	e00d      	b.n	1dd6a <pin_find_af_by_index+0x44>
    for (mp_uint_t i = 0; i < pin->num_afs; i++, af++) {
   1dd4e:	68bb      	ldr	r3, [r7, #8]
   1dd50:	3301      	adds	r3, #1
   1dd52:	60bb      	str	r3, [r7, #8]
   1dd54:	68fb      	ldr	r3, [r7, #12]
   1dd56:	3310      	adds	r3, #16
   1dd58:	60fb      	str	r3, [r7, #12]
   1dd5a:	687b      	ldr	r3, [r7, #4]
   1dd5c:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
   1dd60:	461a      	mov	r2, r3
   1dd62:	68bb      	ldr	r3, [r7, #8]
   1dd64:	429a      	cmp	r2, r3
   1dd66:	d8e9      	bhi.n	1dd3c <pin_find_af_by_index+0x16>
        }
    }
    return NULL;
   1dd68:	2300      	movs	r3, #0
}
   1dd6a:	4618      	mov	r0, r3
   1dd6c:	3714      	adds	r7, #20
   1dd6e:	46bd      	mov	sp, r7
   1dd70:	f85d 7b04 	ldr.w	r7, [sp], #4
   1dd74:	4770      	bx	lr
   1dd76:	bf00      	nop

0001dd78 <machine_init>:
#define PYB_RESET_BROWNOUT  (5)
#define PYB_RESET_OTHER     (6)

STATIC uint32_t reset_cause;

void machine_init(void) {
   1dd78:	b580      	push	{r7, lr}
   1dd7a:	b082      	sub	sp, #8
   1dd7c:	af00      	add	r7, sp, #0

    // get reset cause from RCC flags
    uint32_t state = MAP_SysCtlResetCauseGet();
   1dd7e:	f001 fbe9 	bl	1f554 <SysCtlResetCauseGet>
   1dd82:	6078      	str	r0, [r7, #4]
    if ((state & SYSCTL_CAUSE_WDOG0) || (state & SYSCTL_CAUSE_WDOG1)) {
   1dd84:	687b      	ldr	r3, [r7, #4]
   1dd86:	f003 0308 	and.w	r3, r3, #8
   1dd8a:	2b00      	cmp	r3, #0
   1dd8c:	d104      	bne.n	1dd98 <machine_init+0x20>
   1dd8e:	687b      	ldr	r3, [r7, #4]
   1dd90:	f003 0320 	and.w	r3, r3, #32
   1dd94:	2b00      	cmp	r3, #0
   1dd96:	d003      	beq.n	1dda0 <machine_init+0x28>
        reset_cause = PYB_RESET_WDT;
   1dd98:	4b1b      	ldr	r3, [pc, #108]	; (1de08 <machine_init+0x90>)
   1dd9a:	2203      	movs	r2, #3
   1dd9c:	601a      	str	r2, [r3, #0]
   1dd9e:	e02b      	b.n	1ddf8 <machine_init+0x80>
    } else if (state & SYSCTL_CAUSE_POR)  {
   1dda0:	687b      	ldr	r3, [r7, #4]
   1dda2:	f003 0302 	and.w	r3, r3, #2
   1dda6:	2b00      	cmp	r3, #0
   1dda8:	d003      	beq.n	1ddb2 <machine_init+0x3a>
        reset_cause = PYB_RESET_POWER_ON;
   1ddaa:	4b17      	ldr	r3, [pc, #92]	; (1de08 <machine_init+0x90>)
   1ddac:	2201      	movs	r2, #1
   1ddae:	601a      	str	r2, [r3, #0]
   1ddb0:	e022      	b.n	1ddf8 <machine_init+0x80>
    } else if (state & SYSCTL_CAUSE_BOR) {
   1ddb2:	687b      	ldr	r3, [r7, #4]
   1ddb4:	f003 0304 	and.w	r3, r3, #4
   1ddb8:	2b00      	cmp	r3, #0
   1ddba:	d003      	beq.n	1ddc4 <machine_init+0x4c>
        reset_cause = PYB_RESET_BROWNOUT;
   1ddbc:	4b12      	ldr	r3, [pc, #72]	; (1de08 <machine_init+0x90>)
   1ddbe:	2205      	movs	r2, #5
   1ddc0:	601a      	str	r2, [r3, #0]
   1ddc2:	e019      	b.n	1ddf8 <machine_init+0x80>
    } else if (state & SYSCTL_CAUSE_EXT) {
   1ddc4:	687b      	ldr	r3, [r7, #4]
   1ddc6:	f003 0301 	and.w	r3, r3, #1
   1ddca:	2b00      	cmp	r3, #0
   1ddcc:	d003      	beq.n	1ddd6 <machine_init+0x5e>
        reset_cause = PYB_RESET_HARD;
   1ddce:	4b0e      	ldr	r3, [pc, #56]	; (1de08 <machine_init+0x90>)
   1ddd0:	2202      	movs	r2, #2
   1ddd2:	601a      	str	r2, [r3, #0]
   1ddd4:	e010      	b.n	1ddf8 <machine_init+0x80>
    } else if ((state & SYSCTL_CAUSE_HSRVREQ) || (state & SYSCTL_CAUSE_HIB)){
   1ddd6:	687b      	ldr	r3, [r7, #4]
   1ddd8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
   1dddc:	2b00      	cmp	r3, #0
   1ddde:	d104      	bne.n	1ddea <machine_init+0x72>
   1dde0:	687b      	ldr	r3, [r7, #4]
   1dde2:	f003 0340 	and.w	r3, r3, #64	; 0x40
   1dde6:	2b00      	cmp	r3, #0
   1dde8:	d003      	beq.n	1ddf2 <machine_init+0x7a>
        reset_cause = PYB_RESET_OTHER;
   1ddea:	4b07      	ldr	r3, [pc, #28]	; (1de08 <machine_init+0x90>)
   1ddec:	2206      	movs	r2, #6
   1ddee:	601a      	str	r2, [r3, #0]
   1ddf0:	e002      	b.n	1ddf8 <machine_init+0x80>
    } else {
        // default is soft reset
        reset_cause = PYB_RESET_SOFT;
   1ddf2:	4b05      	ldr	r3, [pc, #20]	; (1de08 <machine_init+0x90>)
   1ddf4:	2200      	movs	r2, #0
   1ddf6:	601a      	str	r2, [r3, #0]
    }
    // clear RCC reset flags
    MAP_SysCtlResetCauseClear(state);
   1ddf8:	6878      	ldr	r0, [r7, #4]
   1ddfa:	f001 fbb1 	bl	1f560 <SysCtlResetCauseClear>
}
   1ddfe:	bf00      	nop
   1de00:	3708      	adds	r7, #8
   1de02:	46bd      	mov	sp, r7
   1de04:	bd80      	pop	{r7, pc}
   1de06:	bf00      	nop
   1de08:	20001220 	.word	0x20001220

0001de0c <machine_deinit>:

void machine_deinit(void) {
   1de0c:	b480      	push	{r7}
   1de0e:	af00      	add	r7, sp, #0
    // we are doing a soft-reset so change the reset_cause
    reset_cause = PYB_RESET_SOFT;
   1de10:	4b03      	ldr	r3, [pc, #12]	; (1de20 <machine_deinit+0x14>)
   1de12:	2200      	movs	r2, #0
   1de14:	601a      	str	r2, [r3, #0]
}
   1de16:	bf00      	nop
   1de18:	46bd      	mov	sp, r7
   1de1a:	f85d 7b04 	ldr.w	r7, [sp], #4
   1de1e:	4770      	bx	lr
   1de20:	20001220 	.word	0x20001220

0001de24 <machine_info>:

// machine.info([dump_alloc_table])
// Print out lots of information about the board.
STATIC mp_obj_t machine_info(size_t n_args, const mp_obj_t *args) {
   1de24:	b580      	push	{r7, lr}
   1de26:	b090      	sub	sp, #64	; 0x40
   1de28:	af02      	add	r7, sp, #8
   1de2a:	6078      	str	r0, [r7, #4]
   1de2c:	6039      	str	r1, [r7, #0]
    // get and print unique id; 96 bits
    {
        uint32_t id = SYSCTL->DID0;
   1de2e:	4b26      	ldr	r3, [pc, #152]	; (1dec8 <machine_info+0xa4>)
   1de30:	681b      	ldr	r3, [r3, #0]
   1de32:	637b      	str	r3, [r7, #52]	; 0x34

        printf("ID: CLASS=%02x, v%02u.%02u", (uint8_t)((id >> 16) & 0xff), (uint8_t)((id >> 8) & 0xff), (uint8_t)(id & 0xff));
   1de34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1de36:	0c1b      	lsrs	r3, r3, #16
   1de38:	b2db      	uxtb	r3, r3
   1de3a:	4619      	mov	r1, r3
   1de3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1de3e:	0a1b      	lsrs	r3, r3, #8
   1de40:	b2db      	uxtb	r3, r3
   1de42:	461a      	mov	r2, r3
   1de44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1de46:	b2db      	uxtb	r3, r3
   1de48:	4820      	ldr	r0, [pc, #128]	; (1decc <machine_info+0xa8>)
   1de4a:	f7fe fee7 	bl	1cc1c <printf>
    }

    // get and print clock speeds
    // SYSCLK=168MHz, HCLK=168MHz, PCLK1=42MHz, PCLK2=84MHz
    {
        printf("%u Hz", (unsigned int)SysCtlClockGet());
   1de4e:	f001 fb8f 	bl	1f570 <SysCtlClockGet>
   1de52:	4603      	mov	r3, r0
   1de54:	4619      	mov	r1, r3
   1de56:	481e      	ldr	r0, [pc, #120]	; (1ded0 <machine_info+0xac>)
   1de58:	f7fe fee0 	bl	1cc1c <printf>
//    }

    // qstr info
    {
        size_t n_pool, n_qstr, n_str_data_bytes, n_total_bytes;
        qstr_pool_info(&n_pool, &n_qstr, &n_str_data_bytes, &n_total_bytes);
   1de5c:	f107 0324 	add.w	r3, r7, #36	; 0x24
   1de60:	f107 0228 	add.w	r2, r7, #40	; 0x28
   1de64:	f107 012c 	add.w	r1, r7, #44	; 0x2c
   1de68:	f107 0030 	add.w	r0, r7, #48	; 0x30
   1de6c:	f7e3 fad3 	bl	1416 <qstr_pool_info>
        printf("qstr:\n  n_pool=%u\n  n_qstr=%u\n  n_str_data_bytes=%u\n  n_total_bytes=%u\n", n_pool, n_qstr, n_str_data_bytes, n_total_bytes);
   1de70:	6b39      	ldr	r1, [r7, #48]	; 0x30
   1de72:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   1de74:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   1de76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1de78:	9300      	str	r3, [sp, #0]
   1de7a:	4603      	mov	r3, r0
   1de7c:	4815      	ldr	r0, [pc, #84]	; (1ded4 <machine_info+0xb0>)
   1de7e:	f7fe fecd 	bl	1cc1c <printf>
    }

    // GC info
    {
        gc_info_t info;
        gc_info(&info);
   1de82:	f107 0308 	add.w	r3, r7, #8
   1de86:	4618      	mov	r0, r3
   1de88:	f7e2 fcd2 	bl	830 <gc_info>
        printf("GC:\n");
   1de8c:	4812      	ldr	r0, [pc, #72]	; (1ded8 <machine_info+0xb4>)
   1de8e:	f7fe ff01 	bl	1cc94 <puts>
        printf("  %u total\n", info.total);
   1de92:	68bb      	ldr	r3, [r7, #8]
   1de94:	4619      	mov	r1, r3
   1de96:	4811      	ldr	r0, [pc, #68]	; (1dedc <machine_info+0xb8>)
   1de98:	f7fe fec0 	bl	1cc1c <printf>
        printf("  %u : %u\n", info.used, info.free);
   1de9c:	68fb      	ldr	r3, [r7, #12]
   1de9e:	693a      	ldr	r2, [r7, #16]
   1dea0:	4619      	mov	r1, r3
   1dea2:	480f      	ldr	r0, [pc, #60]	; (1dee0 <machine_info+0xbc>)
   1dea4:	f7fe feba 	bl	1cc1c <printf>
        printf("  1=%u 2=%u m=%u\n", info.num_1block, info.num_2block, info.max_block);
   1dea8:	69b9      	ldr	r1, [r7, #24]
   1deaa:	69fa      	ldr	r2, [r7, #28]
   1deac:	6a3b      	ldr	r3, [r7, #32]
   1deae:	480d      	ldr	r0, [pc, #52]	; (1dee4 <machine_info+0xc0>)
   1deb0:	f7fe feb4 	bl	1cc1c <printf>

    #if MICROPY_PY_THREAD
    pyb_thread_dump();
    #endif

    if (n_args == 1) {
   1deb4:	687b      	ldr	r3, [r7, #4]
   1deb6:	2b01      	cmp	r3, #1
   1deb8:	d101      	bne.n	1debe <machine_info+0x9a>
        // arg given means dump gc allocation table
        gc_dump_alloc_table();
   1deba:	f7e2 ffc1 	bl	e40 <gc_dump_alloc_table>
    }

    return mp_const_none;
   1debe:	4b0a      	ldr	r3, [pc, #40]	; (1dee8 <machine_info+0xc4>)
}
   1dec0:	4618      	mov	r0, r3
   1dec2:	3738      	adds	r7, #56	; 0x38
   1dec4:	46bd      	mov	sp, r7
   1dec6:	bd80      	pop	{r7, pc}
   1dec8:	400fe000 	.word	0x400fe000
   1decc:	000275f4 	.word	0x000275f4
   1ded0:	00027610 	.word	0x00027610
   1ded4:	00027618 	.word	0x00027618
   1ded8:	00027660 	.word	0x00027660
   1dedc:	00027664 	.word	0x00027664
   1dee0:	00027670 	.word	0x00027670
   1dee4:	0002767c 	.word	0x0002767c
   1dee8:	0002511c 	.word	0x0002511c

0001deec <machine_unique_id>:
MP_DEFINE_CONST_FUN_OBJ_VAR_BETWEEN(machine_info_obj, 0, 1, machine_info);

// Returns a string of 12 bytes (96 bits), which is the unique ID for the MCU.
STATIC mp_obj_t machine_unique_id(void) {
   1deec:	b580      	push	{r7, lr}
   1deee:	b082      	sub	sp, #8
   1def0:	af00      	add	r7, sp, #0
    byte *id = (byte*)(SYSCTL->DID1 + 2);
   1def2:	4b06      	ldr	r3, [pc, #24]	; (1df0c <machine_unique_id+0x20>)
   1def4:	685b      	ldr	r3, [r3, #4]
   1def6:	3302      	adds	r3, #2
   1def8:	607b      	str	r3, [r7, #4]
    return mp_obj_new_bytes(id, 12);
   1defa:	210c      	movs	r1, #12
   1defc:	6878      	ldr	r0, [r7, #4]
   1defe:	f7f7 fce6 	bl	158ce <mp_obj_new_bytes>
   1df02:	4603      	mov	r3, r0
}
   1df04:	4618      	mov	r0, r3
   1df06:	3708      	adds	r7, #8
   1df08:	46bd      	mov	sp, r7
   1df0a:	bd80      	pop	{r7, pc}
   1df0c:	400fe000 	.word	0x400fe000

0001df10 <machine_reset>:
MP_DEFINE_CONST_FUN_OBJ_0(machine_unique_id_obj, machine_unique_id);

// Resets the pyboard in a manner similar to pushing the external RESET button.
STATIC mp_obj_t machine_reset(void) {
   1df10:	b580      	push	{r7, lr}
   1df12:	af00      	add	r7, sp, #0
    MAP_SysCtlReset();
   1df14:	f001 fb04 	bl	1f520 <SysCtlReset>
    return mp_const_none;
   1df18:	4b01      	ldr	r3, [pc, #4]	; (1df20 <machine_reset+0x10>)
}
   1df1a:	4618      	mov	r0, r3
   1df1c:	bd80      	pop	{r7, pc}
   1df1e:	bf00      	nop
   1df20:	0002511c 	.word	0x0002511c

0001df24 <machine_soft_reset>:
MP_DEFINE_CONST_FUN_OBJ_0(machine_reset_obj, machine_reset);

STATIC mp_obj_t machine_soft_reset(void) {
   1df24:	b580      	push	{r7, lr}
   1df26:	af00      	add	r7, sp, #0
    pyexec_system_exit = PYEXEC_FORCED_EXIT;
   1df28:	4b05      	ldr	r3, [pc, #20]	; (1df40 <machine_soft_reset+0x1c>)
   1df2a:	f44f 7280 	mov.w	r2, #256	; 0x100
   1df2e:	601a      	str	r2, [r3, #0]
    nlr_raise(mp_obj_new_exception(&mp_type_SystemExit));
   1df30:	4804      	ldr	r0, [pc, #16]	; (1df44 <machine_soft_reset+0x20>)
   1df32:	f7f1 fcd3 	bl	f8dc <mp_obj_new_exception>
   1df36:	4603      	mov	r3, r0
   1df38:	4618      	mov	r0, r3
   1df3a:	f7e2 f9d1 	bl	2e0 <nlr_jump>
   1df3e:	bf00      	nop
   1df40:	20001224 	.word	0x20001224
   1df44:	00023e4c 	.word	0x00023e4c

0001df48 <machine_bootloader>:
}
MP_DEFINE_CONST_FUN_OBJ_0(machine_soft_reset_obj, machine_soft_reset);

// Activate the bootloader without BOOT* pins.
STATIC NORETURN mp_obj_t machine_bootloader(void) {
   1df48:	b480      	push	{r7}
   1df4a:	af00      	add	r7, sp, #0
//    //__set_MSP(*((uint32_t*) 0x00000000));
//    __ASM volatile ("movs r3, #0\nldr r3, [r3, #0]\nMSR msp, r3\n" : : : "r3", "sp");
//
//    ((void (*)(void)) *((uint32_t*) 0x00000004))();
//
    while (1);
   1df4c:	e7fe      	b.n	1df4c <machine_bootloader+0x4>

0001df4e <machine_freq>:
}
MP_DEFINE_CONST_FUN_OBJ_0(machine_bootloader_obj, machine_bootloader);


STATIC mp_obj_t machine_freq(size_t n_args, const mp_obj_t *args) {
   1df4e:	b580      	push	{r7, lr}
   1df50:	b084      	sub	sp, #16
   1df52:	af00      	add	r7, sp, #0
   1df54:	6078      	str	r0, [r7, #4]
   1df56:	6039      	str	r1, [r7, #0]
    if (n_args == 0) {
   1df58:	687b      	ldr	r3, [r7, #4]
   1df5a:	2b00      	cmp	r3, #0
   1df5c:	d10f      	bne.n	1df7e <machine_freq+0x30>
        // get
        mp_obj_t tuple[] = {
           mp_obj_new_int(MAP_SysCtlClockGet()),
   1df5e:	f001 fb07 	bl	1f570 <SysCtlClockGet>
   1df62:	4603      	mov	r3, r0
   1df64:	4618      	mov	r0, r3
   1df66:	f7f2 ff1d 	bl	10da4 <mp_obj_new_int>
   1df6a:	4603      	mov	r3, r0
        mp_obj_t tuple[] = {
   1df6c:	60fb      	str	r3, [r7, #12]
        };
        return mp_obj_new_tuple(MP_ARRAY_SIZE(tuple), tuple);
   1df6e:	f107 030c 	add.w	r3, r7, #12
   1df72:	4619      	mov	r1, r3
   1df74:	2001      	movs	r0, #1
   1df76:	f7f8 f969 	bl	1624c <mp_obj_new_tuple>
   1df7a:	4603      	mov	r3, r0
   1df7c:	e002      	b.n	1df84 <machine_freq+0x36>
        } else {
            mp_raise_ValueError("freq change not supported");
   1df7e:	4803      	ldr	r0, [pc, #12]	; (1df8c <machine_freq+0x3e>)
   1df80:	f7ef f9f9 	bl	d376 <mp_raise_ValueError>
//        void NORETURN __fatal_error(const char *msg);
//        __fatal_error("can't change freq");
//
//        #endif
    }
}
   1df84:	4618      	mov	r0, r3
   1df86:	3710      	adds	r7, #16
   1df88:	46bd      	mov	sp, r7
   1df8a:	bd80      	pop	{r7, pc}
   1df8c:	000276bc 	.word	0x000276bc

0001df90 <machine_sleep>:
MP_DEFINE_CONST_FUN_OBJ_VAR_BETWEEN(machine_freq_obj, 0, 4, machine_freq);

STATIC mp_obj_t machine_sleep(void) {
   1df90:	b580      	push	{r7, lr}
   1df92:	af00      	add	r7, sp, #0
    //send system to sleep
    MAP_SysCtlSleep();
   1df94:	f001 facc 	bl	1f530 <SysCtlSleep>
    return mp_const_none;
   1df98:	4b01      	ldr	r3, [pc, #4]	; (1dfa0 <machine_sleep+0x10>)
}
   1df9a:	4618      	mov	r0, r3
   1df9c:	bd80      	pop	{r7, pc}
   1df9e:	bf00      	nop
   1dfa0:	0002511c 	.word	0x0002511c

0001dfa4 <machine_deepsleep>:
MP_DEFINE_CONST_FUN_OBJ_0(machine_sleep_obj, machine_sleep);

STATIC mp_obj_t machine_deepsleep(void) {
   1dfa4:	b580      	push	{r7, lr}
   1dfa6:	af00      	add	r7, sp, #0
    MAP_SysCtlDeepSleep();
   1dfa8:	f001 fac4 	bl	1f534 <SysCtlDeepSleep>
    return mp_const_none;
   1dfac:	4b01      	ldr	r3, [pc, #4]	; (1dfb4 <machine_deepsleep+0x10>)
}
   1dfae:	4618      	mov	r0, r3
   1dfb0:	bd80      	pop	{r7, pc}
   1dfb2:	bf00      	nop
   1dfb4:	0002511c 	.word	0x0002511c

0001dfb8 <machine_reset_cause>:
MP_DEFINE_CONST_FUN_OBJ_0(machine_deepsleep_obj, machine_deepsleep);

STATIC mp_obj_t machine_reset_cause(void) {
   1dfb8:	b480      	push	{r7}
   1dfba:	af00      	add	r7, sp, #0
    return MP_OBJ_NEW_SMALL_INT(reset_cause);
   1dfbc:	4b04      	ldr	r3, [pc, #16]	; (1dfd0 <machine_reset_cause+0x18>)
   1dfbe:	681b      	ldr	r3, [r3, #0]
   1dfc0:	005b      	lsls	r3, r3, #1
   1dfc2:	f043 0301 	orr.w	r3, r3, #1
}
   1dfc6:	4618      	mov	r0, r3
   1dfc8:	46bd      	mov	sp, r7
   1dfca:	f85d 7b04 	ldr.w	r7, [sp], #4
   1dfce:	4770      	bx	lr
   1dfd0:	20001220 	.word	0x20001220

0001dfd4 <mp_hal_stdout_tx_strn_cooked>:
 * implementation below can be used.
 */

// Send "cooked" string of given length, where every occurrence of
// LF character is replaced with CR LF.
void mp_hal_stdout_tx_strn_cooked(const char *str, size_t len) {
   1dfd4:	b580      	push	{r7, lr}
   1dfd6:	b082      	sub	sp, #8
   1dfd8:	af00      	add	r7, sp, #0
   1dfda:	6078      	str	r0, [r7, #4]
   1dfdc:	6039      	str	r1, [r7, #0]
    while (len--) {
   1dfde:	e00e      	b.n	1dffe <mp_hal_stdout_tx_strn_cooked+0x2a>
        if (*str == '\n') {
   1dfe0:	687b      	ldr	r3, [r7, #4]
   1dfe2:	781b      	ldrb	r3, [r3, #0]
   1dfe4:	2b0a      	cmp	r3, #10
   1dfe6:	d103      	bne.n	1dff0 <mp_hal_stdout_tx_strn_cooked+0x1c>
            mp_hal_stdout_tx_strn("\r", 1);
   1dfe8:	2101      	movs	r1, #1
   1dfea:	4809      	ldr	r0, [pc, #36]	; (1e010 <mp_hal_stdout_tx_strn_cooked+0x3c>)
   1dfec:	f7ff f89c 	bl	1d128 <mp_hal_stdout_tx_strn>
        }
        mp_hal_stdout_tx_strn(str++, 1);
   1dff0:	687b      	ldr	r3, [r7, #4]
   1dff2:	1c5a      	adds	r2, r3, #1
   1dff4:	607a      	str	r2, [r7, #4]
   1dff6:	2101      	movs	r1, #1
   1dff8:	4618      	mov	r0, r3
   1dffa:	f7ff f895 	bl	1d128 <mp_hal_stdout_tx_strn>
    while (len--) {
   1dffe:	683b      	ldr	r3, [r7, #0]
   1e000:	1e5a      	subs	r2, r3, #1
   1e002:	603a      	str	r2, [r7, #0]
   1e004:	2b00      	cmp	r3, #0
   1e006:	d1eb      	bne.n	1dfe0 <mp_hal_stdout_tx_strn_cooked+0xc>
    }
}
   1e008:	bf00      	nop
   1e00a:	3708      	adds	r7, #8
   1e00c:	46bd      	mov	sp, r7
   1e00e:	bd80      	pop	{r7, pc}
   1e010:	00027edc 	.word	0x00027edc

0001e014 <mp_hal_stdout_tx_str>:

// Send zero-terminated string
void mp_hal_stdout_tx_str(const char *str) {
   1e014:	b580      	push	{r7, lr}
   1e016:	b082      	sub	sp, #8
   1e018:	af00      	add	r7, sp, #0
   1e01a:	6078      	str	r0, [r7, #4]
    mp_hal_stdout_tx_strn(str, strlen(str));
   1e01c:	6878      	ldr	r0, [r7, #4]
   1e01e:	f000 fbbd 	bl	1e79c <strlen>
   1e022:	4603      	mov	r3, r0
   1e024:	4619      	mov	r1, r3
   1e026:	6878      	ldr	r0, [r7, #4]
   1e028:	f7ff f87e 	bl	1d128 <mp_hal_stdout_tx_strn>
}
   1e02c:	bf00      	nop
   1e02e:	3708      	adds	r7, #8
   1e030:	46bd      	mov	sp, r7
   1e032:	bd80      	pop	{r7, pc}

0001e034 <vstr_reset>:
static inline void vstr_reset(vstr_t *vstr) { vstr->len = 0; }
   1e034:	b480      	push	{r7}
   1e036:	b083      	sub	sp, #12
   1e038:	af00      	add	r7, sp, #0
   1e03a:	6078      	str	r0, [r7, #4]
   1e03c:	687b      	ldr	r3, [r7, #4]
   1e03e:	2200      	movs	r2, #0
   1e040:	605a      	str	r2, [r3, #4]
   1e042:	bf00      	nop
   1e044:	370c      	adds	r7, #12
   1e046:	46bd      	mov	sp, r7
   1e048:	f85d 7b04 	ldr.w	r7, [sp], #4
   1e04c:	4770      	bx	lr

0001e04e <vstr_len>:
static inline size_t vstr_len(vstr_t *vstr) { return vstr->len; }
   1e04e:	b480      	push	{r7}
   1e050:	b083      	sub	sp, #12
   1e052:	af00      	add	r7, sp, #0
   1e054:	6078      	str	r0, [r7, #4]
   1e056:	687b      	ldr	r3, [r7, #4]
   1e058:	685b      	ldr	r3, [r3, #4]
   1e05a:	4618      	mov	r0, r3
   1e05c:	370c      	adds	r7, #12
   1e05e:	46bd      	mov	sp, r7
   1e060:	f85d 7b04 	ldr.w	r7, [sp], #4
   1e064:	4770      	bx	lr

0001e066 <parse_compile_execute>:
// parses, compiles and executes the code in the lexer
// frees the lexer before returning
// EXEC_FLAG_PRINT_EOF prints 2 EOF chars: 1 after normal output, 1 after exception output
// EXEC_FLAG_ALLOW_DEBUGGING allows debugging info to be printed after executing the code
// EXEC_FLAG_IS_REPL is used for REPL inputs (flag passed on to mp_compile)
STATIC int parse_compile_execute(const void *source, mp_parse_input_kind_t input_kind, int exec_flags) {
   1e066:	b580      	push	{r7, lr}
   1e068:	b0a0      	sub	sp, #128	; 0x80
   1e06a:	af02      	add	r7, sp, #8
   1e06c:	60f8      	str	r0, [r7, #12]
   1e06e:	60b9      	str	r1, [r7, #8]
   1e070:	607a      	str	r2, [r7, #4]
    int ret = 0;
   1e072:	2300      	movs	r3, #0
   1e074:	677b      	str	r3, [r7, #116]	; 0x74
    uint32_t start = 0;
   1e076:	2300      	movs	r3, #0
   1e078:	673b      	str	r3, [r7, #112]	; 0x70

    // by default a SystemExit exception returns 0
    pyexec_system_exit = 0;
   1e07a:	4b60      	ldr	r3, [pc, #384]	; (1e1fc <parse_compile_execute+0x196>)
   1e07c:	2200      	movs	r2, #0
   1e07e:	601a      	str	r2, [r3, #0]

    nlr_buf_t nlr;
    if (nlr_push(&nlr) == 0) {
   1e080:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   1e084:	4618      	mov	r0, r3
   1e086:	f7e2 f919 	bl	2bc <nlr_push>
   1e08a:	4603      	mov	r3, r0
   1e08c:	2b00      	cmp	r3, #0
   1e08e:	d15c      	bne.n	1e14a <parse_compile_execute+0xe4>
        mp_obj_t module_fun;
        #if MICROPY_MODULE_FROZEN_MPY
        if (exec_flags & EXEC_FLAG_SOURCE_IS_RAW_CODE) {
   1e090:	687b      	ldr	r3, [r7, #4]
   1e092:	f003 0308 	and.w	r3, r3, #8
   1e096:	2b00      	cmp	r3, #0
   1e098:	d006      	beq.n	1e0a8 <parse_compile_execute+0x42>
            // source is a raw_code object, create the function
            module_fun = mp_make_function_from_raw_code(source, MP_OBJ_NULL, MP_OBJ_NULL);
   1e09a:	2200      	movs	r2, #0
   1e09c:	2100      	movs	r1, #0
   1e09e:	68f8      	ldr	r0, [r7, #12]
   1e0a0:	f7ed f9e8 	bl	b474 <mp_make_function_from_raw_code>
   1e0a4:	66f8      	str	r0, [r7, #108]	; 0x6c
   1e0a6:	e035      	b.n	1e114 <parse_compile_execute+0xae>
        } else
        #endif
        {
            #if MICROPY_ENABLE_COMPILER
            mp_lexer_t *lex;
            if (exec_flags & EXEC_FLAG_SOURCE_IS_VSTR) {
   1e0a8:	687b      	ldr	r3, [r7, #4]
   1e0aa:	f003 0310 	and.w	r3, r3, #16
   1e0ae:	2b00      	cmp	r3, #0
   1e0b0:	d00b      	beq.n	1e0ca <parse_compile_execute+0x64>
                const vstr_t *vstr = source;
   1e0b2:	68fb      	ldr	r3, [r7, #12]
   1e0b4:	667b      	str	r3, [r7, #100]	; 0x64
                lex = mp_lexer_new_from_str_len(MP_QSTR__lt_stdin_gt_, vstr->buf, vstr->len, 0);
   1e0b6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   1e0b8:	6899      	ldr	r1, [r3, #8]
   1e0ba:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   1e0bc:	685a      	ldr	r2, [r3, #4]
   1e0be:	2300      	movs	r3, #0
   1e0c0:	2037      	movs	r0, #55	; 0x37
   1e0c2:	f7e5 fc16 	bl	38f2 <mp_lexer_new_from_str_len>
   1e0c6:	66b8      	str	r0, [r7, #104]	; 0x68
   1e0c8:	e00b      	b.n	1e0e2 <parse_compile_execute+0x7c>
            } else if (exec_flags & EXEC_FLAG_SOURCE_IS_FILENAME) {
   1e0ca:	687b      	ldr	r3, [r7, #4]
   1e0cc:	f003 0320 	and.w	r3, r3, #32
   1e0d0:	2b00      	cmp	r3, #0
   1e0d2:	d004      	beq.n	1e0de <parse_compile_execute+0x78>
                lex = mp_lexer_new_from_file(source);
   1e0d4:	68f8      	ldr	r0, [r7, #12]
   1e0d6:	f7fe fed7 	bl	1ce88 <mp_lexer_new_from_file>
   1e0da:	66b8      	str	r0, [r7, #104]	; 0x68
   1e0dc:	e001      	b.n	1e0e2 <parse_compile_execute+0x7c>
            } else {
                lex = (mp_lexer_t*)source;
   1e0de:	68fb      	ldr	r3, [r7, #12]
   1e0e0:	66bb      	str	r3, [r7, #104]	; 0x68
            }
            // source is a lexer, parse and compile the script
            qstr source_name = lex->source_name;
   1e0e2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   1e0e4:	681b      	ldr	r3, [r3, #0]
   1e0e6:	663b      	str	r3, [r7, #96]	; 0x60
            mp_parse_tree_t parse_tree = mp_parse(lex, input_kind);
   1e0e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
   1e0ec:	68ba      	ldr	r2, [r7, #8]
   1e0ee:	6eb9      	ldr	r1, [r7, #104]	; 0x68
   1e0f0:	4618      	mov	r0, r3
   1e0f2:	f7e6 fabb 	bl	466c <mp_parse>
            module_fun = mp_compile(&parse_tree, source_name, MP_EMIT_OPT_NONE, exec_flags & EXEC_FLAG_IS_REPL);
   1e0f6:	687b      	ldr	r3, [r7, #4]
   1e0f8:	f003 0304 	and.w	r3, r3, #4
   1e0fc:	2b00      	cmp	r3, #0
   1e0fe:	bf14      	ite	ne
   1e100:	2301      	movne	r3, #1
   1e102:	2300      	moveq	r3, #0
   1e104:	b2db      	uxtb	r3, r3
   1e106:	f107 0024 	add.w	r0, r7, #36	; 0x24
   1e10a:	2200      	movs	r2, #0
   1e10c:	6e39      	ldr	r1, [r7, #96]	; 0x60
   1e10e:	f7eb fc96 	bl	9a3e <mp_compile>
   1e112:	66f8      	str	r0, [r7, #108]	; 0x6c
            mp_raise_msg(&mp_type_RuntimeError, "script compilation not supported");
            #endif
        }

        // execute code
        mp_hal_set_interrupt_char(CHAR_CTRL_C); // allow ctrl-C to interrupt us
   1e114:	2003      	movs	r0, #3
   1e116:	f7ff f8c0 	bl	1d29a <mp_hal_set_interrupt_char>
        start = mp_hal_ticks_ms();
   1e11a:	f7ff f837 	bl	1d18c <mp_hal_ticks_ms>
   1e11e:	6738      	str	r0, [r7, #112]	; 0x70
        mp_call_function_0(module_fun);
   1e120:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
   1e122:	f7ed ffd3 	bl	c0cc <mp_call_function_0>
        mp_hal_set_interrupt_char(-1); // disable interrupt
   1e126:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1e12a:	f7ff f8b6 	bl	1d29a <mp_hal_set_interrupt_char>
        nlr_pop();
   1e12e:	f7e2 f8b3 	bl	298 <nlr_pop>
        ret = 1;
   1e132:	2301      	movs	r3, #1
   1e134:	677b      	str	r3, [r7, #116]	; 0x74
        if (exec_flags & EXEC_FLAG_PRINT_EOF) {
   1e136:	687b      	ldr	r3, [r7, #4]
   1e138:	f003 0301 	and.w	r3, r3, #1
   1e13c:	2b00      	cmp	r3, #0
   1e13e:	d025      	beq.n	1e18c <parse_compile_execute+0x126>
            mp_hal_stdout_tx_strn("\x04", 1);
   1e140:	2101      	movs	r1, #1
   1e142:	482f      	ldr	r0, [pc, #188]	; (1e200 <parse_compile_execute+0x19a>)
   1e144:	f7fe fff0 	bl	1d128 <mp_hal_stdout_tx_strn>
   1e148:	e020      	b.n	1e18c <parse_compile_execute+0x126>
        }
    } else {
        // uncaught exception
        // FIXME it could be that an interrupt happens just before we disable it here
        mp_hal_set_interrupt_char(-1); // disable interrupt
   1e14a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1e14e:	f7ff f8a4 	bl	1d29a <mp_hal_set_interrupt_char>
        // print EOF after normal output
        if (exec_flags & EXEC_FLAG_PRINT_EOF) {
   1e152:	687b      	ldr	r3, [r7, #4]
   1e154:	f003 0301 	and.w	r3, r3, #1
   1e158:	2b00      	cmp	r3, #0
   1e15a:	d003      	beq.n	1e164 <parse_compile_execute+0xfe>
            mp_hal_stdout_tx_strn("\x04", 1);
   1e15c:	2101      	movs	r1, #1
   1e15e:	4828      	ldr	r0, [pc, #160]	; (1e200 <parse_compile_execute+0x19a>)
   1e160:	f7fe ffe2 	bl	1d128 <mp_hal_stdout_tx_strn>
        }
        // check for SystemExit
        if (mp_obj_is_subclass_fast(MP_OBJ_FROM_PTR(((mp_obj_base_t*)nlr.ret_val)->type), MP_OBJ_FROM_PTR(&mp_type_SystemExit))) {
   1e164:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1e166:	681b      	ldr	r3, [r3, #0]
   1e168:	4926      	ldr	r1, [pc, #152]	; (1e204 <parse_compile_execute+0x19e>)
   1e16a:	4618      	mov	r0, r3
   1e16c:	f7f9 fb7a 	bl	17864 <mp_obj_is_subclass_fast>
   1e170:	4603      	mov	r3, r0
   1e172:	2b00      	cmp	r3, #0
   1e174:	d003      	beq.n	1e17e <parse_compile_execute+0x118>
            // at the moment, the value of SystemExit is unused
            ret = pyexec_system_exit;
   1e176:	4b21      	ldr	r3, [pc, #132]	; (1e1fc <parse_compile_execute+0x196>)
   1e178:	681b      	ldr	r3, [r3, #0]
   1e17a:	677b      	str	r3, [r7, #116]	; 0x74
   1e17c:	e006      	b.n	1e18c <parse_compile_execute+0x126>
        } else {
            mp_obj_print_exception(&mp_plat_print, MP_OBJ_FROM_PTR(nlr.ret_val));
   1e17e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1e180:	4619      	mov	r1, r3
   1e182:	4821      	ldr	r0, [pc, #132]	; (1e208 <parse_compile_execute+0x1a2>)
   1e184:	f7ef fdd6 	bl	dd34 <mp_obj_print_exception>
            ret = 0;
   1e188:	2300      	movs	r3, #0
   1e18a:	677b      	str	r3, [r7, #116]	; 0x74
        }
    }

    // display debugging info if wanted
    if ((exec_flags & EXEC_FLAG_ALLOW_DEBUGGING) && repl_display_debugging_info) {
   1e18c:	687b      	ldr	r3, [r7, #4]
   1e18e:	f003 0302 	and.w	r3, r3, #2
   1e192:	2b00      	cmp	r3, #0
   1e194:	d024      	beq.n	1e1e0 <parse_compile_execute+0x17a>
   1e196:	4b1d      	ldr	r3, [pc, #116]	; (1e20c <parse_compile_execute+0x1a6>)
   1e198:	781b      	ldrb	r3, [r3, #0]
   1e19a:	2b00      	cmp	r3, #0
   1e19c:	d020      	beq.n	1e1e0 <parse_compile_execute+0x17a>
        mp_uint_t ticks = mp_hal_ticks_ms() - start; // TODO implement a function that does this properly
   1e19e:	f7fe fff5 	bl	1d18c <mp_hal_ticks_ms>
   1e1a2:	4602      	mov	r2, r0
   1e1a4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   1e1a6:	1ad3      	subs	r3, r2, r3
   1e1a8:	65fb      	str	r3, [r7, #92]	; 0x5c
        printf("took " UINT_FMT " ms\n", ticks);
   1e1aa:	6df9      	ldr	r1, [r7, #92]	; 0x5c
   1e1ac:	4818      	ldr	r0, [pc, #96]	; (1e210 <parse_compile_execute+0x1aa>)
   1e1ae:	f7fe fd35 	bl	1cc1c <printf>
        // qstr info
        {
            size_t n_pool, n_qstr, n_str_data_bytes, n_total_bytes;
            qstr_pool_info(&n_pool, &n_qstr, &n_str_data_bytes, &n_total_bytes);
   1e1b2:	f107 0314 	add.w	r3, r7, #20
   1e1b6:	f107 0218 	add.w	r2, r7, #24
   1e1ba:	f107 011c 	add.w	r1, r7, #28
   1e1be:	f107 0020 	add.w	r0, r7, #32
   1e1c2:	f7e3 f928 	bl	1416 <qstr_pool_info>
            printf("qstr:\n  n_pool=%u\n  n_qstr=%u\n  "
   1e1c6:	6a39      	ldr	r1, [r7, #32]
   1e1c8:	69fa      	ldr	r2, [r7, #28]
   1e1ca:	69b8      	ldr	r0, [r7, #24]
   1e1cc:	697b      	ldr	r3, [r7, #20]
   1e1ce:	9300      	str	r3, [sp, #0]
   1e1d0:	4603      	mov	r3, r0
   1e1d2:	4810      	ldr	r0, [pc, #64]	; (1e214 <parse_compile_execute+0x1ae>)
   1e1d4:	f7fe fd22 	bl	1cc1c <printf>
                   (unsigned)n_pool, (unsigned)n_qstr, (unsigned)n_str_data_bytes, (unsigned)n_total_bytes);
        }

        #if MICROPY_ENABLE_GC
        // run collection and print GC info
        gc_collect();
   1e1d8:	f7fe fe3c 	bl	1ce54 <gc_collect>
        gc_dump_info();
   1e1dc:	f7e2 fe10 	bl	e00 <gc_dump_info>
        #endif
    }

    if (exec_flags & EXEC_FLAG_PRINT_EOF) {
   1e1e0:	687b      	ldr	r3, [r7, #4]
   1e1e2:	f003 0301 	and.w	r3, r3, #1
   1e1e6:	2b00      	cmp	r3, #0
   1e1e8:	d003      	beq.n	1e1f2 <parse_compile_execute+0x18c>
        mp_hal_stdout_tx_strn("\x04", 1);
   1e1ea:	2101      	movs	r1, #1
   1e1ec:	4804      	ldr	r0, [pc, #16]	; (1e200 <parse_compile_execute+0x19a>)
   1e1ee:	f7fe ff9b 	bl	1d128 <mp_hal_stdout_tx_strn>
    }

    return ret;
   1e1f2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
}
   1e1f4:	4618      	mov	r0, r3
   1e1f6:	3778      	adds	r7, #120	; 0x78
   1e1f8:	46bd      	mov	sp, r7
   1e1fa:	bd80      	pop	{r7, pc}
   1e1fc:	20001224 	.word	0x20001224
   1e200:	00027ee0 	.word	0x00027ee0
   1e204:	00023e4c 	.word	0x00023e4c
   1e208:	000210cc 	.word	0x000210cc
   1e20c:	20001228 	.word	0x20001228
   1e210:	00027ee4 	.word	0x00027ee4
   1e214:	00027ef0 	.word	0x00027ef0

0001e218 <pyexec_raw_repl>:
    return res;
}

#else // MICROPY_REPL_EVENT_DRIVEN

int pyexec_raw_repl(void) {
   1e218:	b580      	push	{r7, lr}
   1e21a:	b086      	sub	sp, #24
   1e21c:	af00      	add	r7, sp, #0
    vstr_t line;
    vstr_init(&line, 32);
   1e21e:	463b      	mov	r3, r7
   1e220:	2120      	movs	r1, #32
   1e222:	4618      	mov	r0, r3
   1e224:	f7e3 f95a 	bl	14dc <vstr_init>

raw_repl_reset:
    mp_hal_stdout_tx_str("raw REPL; CTRL-B to exit\r\n");
   1e228:	482a      	ldr	r0, [pc, #168]	; (1e2d4 <pyexec_raw_repl+0xbc>)
   1e22a:	f7ff fef3 	bl	1e014 <mp_hal_stdout_tx_str>

    for (;;) {
        vstr_reset(&line);
   1e22e:	463b      	mov	r3, r7
   1e230:	4618      	mov	r0, r3
   1e232:	f7ff feff 	bl	1e034 <vstr_reset>
        mp_hal_stdout_tx_str(">");
   1e236:	4828      	ldr	r0, [pc, #160]	; (1e2d8 <pyexec_raw_repl+0xc0>)
   1e238:	f7ff feec 	bl	1e014 <mp_hal_stdout_tx_str>
        for (;;) {
            int c = mp_hal_stdin_rx_chr();
   1e23c:	f7fe ff5c 	bl	1d0f8 <mp_hal_stdin_rx_chr>
   1e240:	6178      	str	r0, [r7, #20]
            if (c == CHAR_CTRL_A) {
   1e242:	697b      	ldr	r3, [r7, #20]
   1e244:	2b01      	cmp	r3, #1
   1e246:	d100      	bne.n	1e24a <pyexec_raw_repl+0x32>
                // reset raw REPL
                goto raw_repl_reset;
   1e248:	e7ee      	b.n	1e228 <pyexec_raw_repl+0x10>
            } else if (c == CHAR_CTRL_B) {
   1e24a:	697b      	ldr	r3, [r7, #20]
   1e24c:	2b02      	cmp	r3, #2
   1e24e:	d10b      	bne.n	1e268 <pyexec_raw_repl+0x50>
                // change to friendly REPL
                mp_hal_stdout_tx_str("\r\n");
   1e250:	4822      	ldr	r0, [pc, #136]	; (1e2dc <pyexec_raw_repl+0xc4>)
   1e252:	f7ff fedf 	bl	1e014 <mp_hal_stdout_tx_str>
                vstr_clear(&line);
   1e256:	463b      	mov	r3, r7
   1e258:	4618      	mov	r0, r3
   1e25a:	f7e3 f9a3 	bl	15a4 <vstr_clear>
                pyexec_mode_kind = PYEXEC_MODE_FRIENDLY_REPL;
   1e25e:	4b20      	ldr	r3, [pc, #128]	; (1e2e0 <pyexec_raw_repl+0xc8>)
   1e260:	2201      	movs	r2, #1
   1e262:	601a      	str	r2, [r3, #0]
                return 0;
   1e264:	2300      	movs	r3, #0
   1e266:	e030      	b.n	1e2ca <pyexec_raw_repl+0xb2>
            } else if (c == CHAR_CTRL_C) {
   1e268:	697b      	ldr	r3, [r7, #20]
   1e26a:	2b03      	cmp	r3, #3
   1e26c:	d104      	bne.n	1e278 <pyexec_raw_repl+0x60>
                // clear line
                vstr_reset(&line);
   1e26e:	463b      	mov	r3, r7
   1e270:	4618      	mov	r0, r3
   1e272:	f7ff fedf 	bl	1e034 <vstr_reset>
   1e276:	e7e1      	b.n	1e23c <pyexec_raw_repl+0x24>
            } else if (c == CHAR_CTRL_D) {
   1e278:	697b      	ldr	r3, [r7, #20]
   1e27a:	2b04      	cmp	r3, #4
   1e27c:	d007      	beq.n	1e28e <pyexec_raw_repl+0x76>
                // input finished
                break;
            } else {
                // let through any other raw 8-bit value
                vstr_add_byte(&line, c);
   1e27e:	697b      	ldr	r3, [r7, #20]
   1e280:	b2da      	uxtb	r2, r3
   1e282:	463b      	mov	r3, r7
   1e284:	4611      	mov	r1, r2
   1e286:	4618      	mov	r0, r3
   1e288:	f7e3 fa7a 	bl	1780 <vstr_add_byte>
        for (;;) {
   1e28c:	e7d6      	b.n	1e23c <pyexec_raw_repl+0x24>
                break;
   1e28e:	bf00      	nop
            }
        }

        // indicate reception of command
        mp_hal_stdout_tx_str("OK");
   1e290:	4814      	ldr	r0, [pc, #80]	; (1e2e4 <pyexec_raw_repl+0xcc>)
   1e292:	f7ff febf 	bl	1e014 <mp_hal_stdout_tx_str>

        if (line.len == 0) {
   1e296:	687b      	ldr	r3, [r7, #4]
   1e298:	2b00      	cmp	r3, #0
   1e29a:	d109      	bne.n	1e2b0 <pyexec_raw_repl+0x98>
            // exit for a soft reset
            mp_hal_stdout_tx_str("\r\n");
   1e29c:	480f      	ldr	r0, [pc, #60]	; (1e2dc <pyexec_raw_repl+0xc4>)
   1e29e:	f7ff feb9 	bl	1e014 <mp_hal_stdout_tx_str>
            vstr_clear(&line);
   1e2a2:	463b      	mov	r3, r7
   1e2a4:	4618      	mov	r0, r3
   1e2a6:	f7e3 f97d 	bl	15a4 <vstr_clear>
            return PYEXEC_FORCED_EXIT;
   1e2aa:	f44f 7380 	mov.w	r3, #256	; 0x100
   1e2ae:	e00c      	b.n	1e2ca <pyexec_raw_repl+0xb2>
        }

        int ret = parse_compile_execute(&line, MP_PARSE_FILE_INPUT, EXEC_FLAG_PRINT_EOF | EXEC_FLAG_SOURCE_IS_VSTR);
   1e2b0:	463b      	mov	r3, r7
   1e2b2:	2211      	movs	r2, #17
   1e2b4:	2101      	movs	r1, #1
   1e2b6:	4618      	mov	r0, r3
   1e2b8:	f7ff fed5 	bl	1e066 <parse_compile_execute>
   1e2bc:	6138      	str	r0, [r7, #16]
        if (ret & PYEXEC_FORCED_EXIT) {
   1e2be:	693b      	ldr	r3, [r7, #16]
   1e2c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
   1e2c4:	2b00      	cmp	r3, #0
   1e2c6:	d0b2      	beq.n	1e22e <pyexec_raw_repl+0x16>
            return ret;
   1e2c8:	693b      	ldr	r3, [r7, #16]
        }
    }
}
   1e2ca:	4618      	mov	r0, r3
   1e2cc:	3718      	adds	r7, #24
   1e2ce:	46bd      	mov	sp, r7
   1e2d0:	bd80      	pop	{r7, pc}
   1e2d2:	bf00      	nop
   1e2d4:	00027f38 	.word	0x00027f38
   1e2d8:	00027f54 	.word	0x00027f54
   1e2dc:	00027f58 	.word	0x00027f58
   1e2e0:	20000810 	.word	0x20000810
   1e2e4:	00027f5c 	.word	0x00027f5c

0001e2e8 <pyexec_friendly_repl>:

int pyexec_friendly_repl(void) {
   1e2e8:	b580      	push	{r7, lr}
   1e2ea:	b088      	sub	sp, #32
   1e2ec:	af00      	add	r7, sp, #0
    vstr_t line;
    vstr_init(&line, 32);
   1e2ee:	f107 0308 	add.w	r3, r7, #8
   1e2f2:	2120      	movs	r1, #32
   1e2f4:	4618      	mov	r0, r3
   1e2f6:	f7e3 f8f1 	bl	14dc <vstr_init>
    mp_obj_t lcd_o = mp_call_function_0(mp_load_name(qstr_from_str("LCD")));
    mp_call_function_1(mp_load_attr(lcd_o, qstr_from_str("light")), mp_const_true);
#endif

friendly_repl_reset:
    mp_hal_stdout_tx_str("MicroPython " MICROPY_GIT_TAG " on " MICROPY_BUILD_DATE "; " MICROPY_HW_BOARD_NAME " with " MICROPY_HW_MCU_NAME "\r\n");
   1e2fa:	485f      	ldr	r0, [pc, #380]	; (1e478 <pyexec_friendly_repl+0x190>)
   1e2fc:	f7ff fe8a 	bl	1e014 <mp_hal_stdout_tx_str>
        }
        #endif

        // If the GC is locked at this point there is no way out except a reset,
        // so force the GC to be unlocked to help the user debug what went wrong.
        if (MP_STATE_MEM(gc_lock_depth) != 0) {
   1e300:	4b5e      	ldr	r3, [pc, #376]	; (1e47c <pyexec_friendly_repl+0x194>)
   1e302:	f8b3 31c8 	ldrh.w	r3, [r3, #456]	; 0x1c8
   1e306:	2b00      	cmp	r3, #0
   1e308:	d003      	beq.n	1e312 <pyexec_friendly_repl+0x2a>
            MP_STATE_MEM(gc_lock_depth) = 0;
   1e30a:	4b5c      	ldr	r3, [pc, #368]	; (1e47c <pyexec_friendly_repl+0x194>)
   1e30c:	2200      	movs	r2, #0
   1e30e:	f8a3 21c8 	strh.w	r2, [r3, #456]	; 0x1c8
        }

        vstr_reset(&line);
   1e312:	f107 0308 	add.w	r3, r7, #8
   1e316:	4618      	mov	r0, r3
   1e318:	f7ff fe8c 	bl	1e034 <vstr_reset>
        int ret = readline(&line, ">>> ");
   1e31c:	f107 0308 	add.w	r3, r7, #8
   1e320:	4957      	ldr	r1, [pc, #348]	; (1e480 <pyexec_friendly_repl+0x198>)
   1e322:	4618      	mov	r0, r3
   1e324:	f000 ff3a 	bl	1f19c <readline>
   1e328:	61b8      	str	r0, [r7, #24]
        mp_parse_input_kind_t parse_input_kind = MP_PARSE_SINGLE_INPUT;
   1e32a:	2300      	movs	r3, #0
   1e32c:	61fb      	str	r3, [r7, #28]

        if (ret == CHAR_CTRL_A) {
   1e32e:	69bb      	ldr	r3, [r7, #24]
   1e330:	2b01      	cmp	r3, #1
   1e332:	d10c      	bne.n	1e34e <pyexec_friendly_repl+0x66>
            // change to raw REPL
            mp_hal_stdout_tx_str("\r\n");
   1e334:	4853      	ldr	r0, [pc, #332]	; (1e484 <pyexec_friendly_repl+0x19c>)
   1e336:	f7ff fe6d 	bl	1e014 <mp_hal_stdout_tx_str>
            vstr_clear(&line);
   1e33a:	f107 0308 	add.w	r3, r7, #8
   1e33e:	4618      	mov	r0, r3
   1e340:	f7e3 f930 	bl	15a4 <vstr_clear>
            pyexec_mode_kind = PYEXEC_MODE_RAW_REPL;
   1e344:	4b50      	ldr	r3, [pc, #320]	; (1e488 <pyexec_friendly_repl+0x1a0>)
   1e346:	2200      	movs	r2, #0
   1e348:	601a      	str	r2, [r3, #0]
            return 0;
   1e34a:	2300      	movs	r3, #0
   1e34c:	e08f      	b.n	1e46e <pyexec_friendly_repl+0x186>
        } else if (ret == CHAR_CTRL_B) {
   1e34e:	69bb      	ldr	r3, [r7, #24]
   1e350:	2b02      	cmp	r3, #2
   1e352:	d103      	bne.n	1e35c <pyexec_friendly_repl+0x74>
            // reset friendly REPL
            mp_hal_stdout_tx_str("\r\n");
   1e354:	484b      	ldr	r0, [pc, #300]	; (1e484 <pyexec_friendly_repl+0x19c>)
   1e356:	f7ff fe5d 	bl	1e014 <mp_hal_stdout_tx_str>
            goto friendly_repl_reset;
   1e35a:	e7ce      	b.n	1e2fa <pyexec_friendly_repl+0x12>
        } else if (ret == CHAR_CTRL_C) {
   1e35c:	69bb      	ldr	r3, [r7, #24]
   1e35e:	2b03      	cmp	r3, #3
   1e360:	d103      	bne.n	1e36a <pyexec_friendly_repl+0x82>
            // break
            mp_hal_stdout_tx_str("\r\n");
   1e362:	4848      	ldr	r0, [pc, #288]	; (1e484 <pyexec_friendly_repl+0x19c>)
   1e364:	f7ff fe56 	bl	1e014 <mp_hal_stdout_tx_str>
            continue;
   1e368:	e080      	b.n	1e46c <pyexec_friendly_repl+0x184>
        } else if (ret == CHAR_CTRL_D) {
   1e36a:	69bb      	ldr	r3, [r7, #24]
   1e36c:	2b04      	cmp	r3, #4
   1e36e:	d10a      	bne.n	1e386 <pyexec_friendly_repl+0x9e>
            // exit for a soft reset
            mp_hal_stdout_tx_str("\r\n");
   1e370:	4844      	ldr	r0, [pc, #272]	; (1e484 <pyexec_friendly_repl+0x19c>)
   1e372:	f7ff fe4f 	bl	1e014 <mp_hal_stdout_tx_str>
            vstr_clear(&line);
   1e376:	f107 0308 	add.w	r3, r7, #8
   1e37a:	4618      	mov	r0, r3
   1e37c:	f7e3 f912 	bl	15a4 <vstr_clear>
            return PYEXEC_FORCED_EXIT;
   1e380:	f44f 7380 	mov.w	r3, #256	; 0x100
   1e384:	e073      	b.n	1e46e <pyexec_friendly_repl+0x186>
        } else if (ret == CHAR_CTRL_E) {
   1e386:	69bb      	ldr	r3, [r7, #24]
   1e388:	2b05      	cmp	r3, #5
   1e38a:	d130      	bne.n	1e3ee <pyexec_friendly_repl+0x106>
            // paste mode
            mp_hal_stdout_tx_str("\r\npaste mode; Ctrl-C to cancel, Ctrl-D to finish\r\n=== ");
   1e38c:	483f      	ldr	r0, [pc, #252]	; (1e48c <pyexec_friendly_repl+0x1a4>)
   1e38e:	f7ff fe41 	bl	1e014 <mp_hal_stdout_tx_str>
            vstr_reset(&line);
   1e392:	f107 0308 	add.w	r3, r7, #8
   1e396:	4618      	mov	r0, r3
   1e398:	f7ff fe4c 	bl	1e034 <vstr_reset>
            for (;;) {
                char c = mp_hal_stdin_rx_chr();
   1e39c:	f7fe feac 	bl	1d0f8 <mp_hal_stdin_rx_chr>
   1e3a0:	4603      	mov	r3, r0
   1e3a2:	b2db      	uxtb	r3, r3
   1e3a4:	71fb      	strb	r3, [r7, #7]
                if (c == CHAR_CTRL_C) {
   1e3a6:	79fb      	ldrb	r3, [r7, #7]
   1e3a8:	2b03      	cmp	r3, #3
   1e3aa:	d103      	bne.n	1e3b4 <pyexec_friendly_repl+0xcc>
                    // cancel everything
                    mp_hal_stdout_tx_str("\r\n");
   1e3ac:	4835      	ldr	r0, [pc, #212]	; (1e484 <pyexec_friendly_repl+0x19c>)
   1e3ae:	f7ff fe31 	bl	1e014 <mp_hal_stdout_tx_str>
   1e3b2:	e7a5      	b.n	1e300 <pyexec_friendly_repl+0x18>
                    goto input_restart;
                } else if (c == CHAR_CTRL_D) {
   1e3b4:	79fb      	ldrb	r3, [r7, #7]
   1e3b6:	2b04      	cmp	r3, #4
   1e3b8:	d105      	bne.n	1e3c6 <pyexec_friendly_repl+0xde>
                    // end of input
                    mp_hal_stdout_tx_str("\r\n");
   1e3ba:	4832      	ldr	r0, [pc, #200]	; (1e484 <pyexec_friendly_repl+0x19c>)
   1e3bc:	f7ff fe2a 	bl	1e014 <mp_hal_stdout_tx_str>
                    } else {
                        mp_hal_stdout_tx_strn(&c, 1);
                    }
                }
            }
            parse_input_kind = MP_PARSE_FILE_INPUT;
   1e3c0:	2301      	movs	r3, #1
   1e3c2:	61fb      	str	r3, [r7, #28]
   1e3c4:	e041      	b.n	1e44a <pyexec_friendly_repl+0x162>
                    vstr_add_byte(&line, c);
   1e3c6:	79fa      	ldrb	r2, [r7, #7]
   1e3c8:	f107 0308 	add.w	r3, r7, #8
   1e3cc:	4611      	mov	r1, r2
   1e3ce:	4618      	mov	r0, r3
   1e3d0:	f7e3 f9d6 	bl	1780 <vstr_add_byte>
                    if (c == '\r') {
   1e3d4:	79fb      	ldrb	r3, [r7, #7]
   1e3d6:	2b0d      	cmp	r3, #13
   1e3d8:	d103      	bne.n	1e3e2 <pyexec_friendly_repl+0xfa>
                        mp_hal_stdout_tx_str("\r\n=== ");
   1e3da:	482d      	ldr	r0, [pc, #180]	; (1e490 <pyexec_friendly_repl+0x1a8>)
   1e3dc:	f7ff fe1a 	bl	1e014 <mp_hal_stdout_tx_str>
   1e3e0:	e7dc      	b.n	1e39c <pyexec_friendly_repl+0xb4>
                        mp_hal_stdout_tx_strn(&c, 1);
   1e3e2:	1dfb      	adds	r3, r7, #7
   1e3e4:	2101      	movs	r1, #1
   1e3e6:	4618      	mov	r0, r3
   1e3e8:	f7fe fe9e 	bl	1d128 <mp_hal_stdout_tx_strn>
            for (;;) {
   1e3ec:	e7d6      	b.n	1e39c <pyexec_friendly_repl+0xb4>
        } else if (vstr_len(&line) == 0) {
   1e3ee:	f107 0308 	add.w	r3, r7, #8
   1e3f2:	4618      	mov	r0, r3
   1e3f4:	f7ff fe2b 	bl	1e04e <vstr_len>
   1e3f8:	4603      	mov	r3, r0
   1e3fa:	2b00      	cmp	r3, #0
   1e3fc:	d035      	beq.n	1e46a <pyexec_friendly_repl+0x182>
            continue;
        } else {
            // got a line with non-zero length, see if it needs continuing
            while (mp_repl_continue_with_input(vstr_null_terminated_str(&line))) {
   1e3fe:	e016      	b.n	1e42e <pyexec_friendly_repl+0x146>
                vstr_add_byte(&line, '\n');
   1e400:	f107 0308 	add.w	r3, r7, #8
   1e404:	210a      	movs	r1, #10
   1e406:	4618      	mov	r0, r3
   1e408:	f7e3 f9ba 	bl	1780 <vstr_add_byte>
                ret = readline(&line, "... ");
   1e40c:	f107 0308 	add.w	r3, r7, #8
   1e410:	4920      	ldr	r1, [pc, #128]	; (1e494 <pyexec_friendly_repl+0x1ac>)
   1e412:	4618      	mov	r0, r3
   1e414:	f000 fec2 	bl	1f19c <readline>
   1e418:	61b8      	str	r0, [r7, #24]
                if (ret == CHAR_CTRL_C) {
   1e41a:	69bb      	ldr	r3, [r7, #24]
   1e41c:	2b03      	cmp	r3, #3
   1e41e:	d103      	bne.n	1e428 <pyexec_friendly_repl+0x140>
                    // cancel everything
                    mp_hal_stdout_tx_str("\r\n");
   1e420:	4818      	ldr	r0, [pc, #96]	; (1e484 <pyexec_friendly_repl+0x19c>)
   1e422:	f7ff fdf7 	bl	1e014 <mp_hal_stdout_tx_str>
                    goto input_restart;
   1e426:	e76b      	b.n	1e300 <pyexec_friendly_repl+0x18>
                } else if (ret == CHAR_CTRL_D) {
   1e428:	69bb      	ldr	r3, [r7, #24]
   1e42a:	2b04      	cmp	r3, #4
   1e42c:	d00c      	beq.n	1e448 <pyexec_friendly_repl+0x160>
            while (mp_repl_continue_with_input(vstr_null_terminated_str(&line))) {
   1e42e:	f107 0308 	add.w	r3, r7, #8
   1e432:	4618      	mov	r0, r3
   1e434:	f7e3 f989 	bl	174a <vstr_null_terminated_str>
   1e438:	4603      	mov	r3, r0
   1e43a:	4618      	mov	r0, r3
   1e43c:	f7fe f812 	bl	1c464 <mp_repl_continue_with_input>
   1e440:	4603      	mov	r3, r0
   1e442:	2b00      	cmp	r3, #0
   1e444:	d1dc      	bne.n	1e400 <pyexec_friendly_repl+0x118>
   1e446:	e000      	b.n	1e44a <pyexec_friendly_repl+0x162>
                    // stop entering compound statement
                    break;
   1e448:	bf00      	nop
                }
            }
        }

        ret = parse_compile_execute(&line, parse_input_kind, EXEC_FLAG_ALLOW_DEBUGGING | EXEC_FLAG_IS_REPL | EXEC_FLAG_SOURCE_IS_VSTR);
   1e44a:	f107 0308 	add.w	r3, r7, #8
   1e44e:	2216      	movs	r2, #22
   1e450:	69f9      	ldr	r1, [r7, #28]
   1e452:	4618      	mov	r0, r3
   1e454:	f7ff fe07 	bl	1e066 <parse_compile_execute>
   1e458:	61b8      	str	r0, [r7, #24]
        if (ret & PYEXEC_FORCED_EXIT) {
   1e45a:	69bb      	ldr	r3, [r7, #24]
   1e45c:	f403 7380 	and.w	r3, r3, #256	; 0x100
   1e460:	2b00      	cmp	r3, #0
   1e462:	f43f af4d 	beq.w	1e300 <pyexec_friendly_repl+0x18>
            return ret;
   1e466:	69bb      	ldr	r3, [r7, #24]
   1e468:	e001      	b.n	1e46e <pyexec_friendly_repl+0x186>
            continue;
   1e46a:	bf00      	nop
    for (;;) {
   1e46c:	e748      	b.n	1e300 <pyexec_friendly_repl+0x18>
        }
    }
}
   1e46e:	4618      	mov	r0, r3
   1e470:	3720      	adds	r7, #32
   1e472:	46bd      	mov	sp, r7
   1e474:	bd80      	pop	{r7, pc}
   1e476:	bf00      	nop
   1e478:	00027f60 	.word	0x00027f60
   1e47c:	20001248 	.word	0x20001248
   1e480:	00027fbc 	.word	0x00027fbc
   1e484:	00027f58 	.word	0x00027f58
   1e488:	20000810 	.word	0x20000810
   1e48c:	00027fc4 	.word	0x00027fc4
   1e490:	00027ffc 	.word	0x00027ffc
   1e494:	00028004 	.word	0x00028004

0001e498 <pyexec_file>:

#endif // MICROPY_REPL_EVENT_DRIVEN
#endif // MICROPY_ENABLE_COMPILER

int pyexec_file(const char *filename) {
   1e498:	b580      	push	{r7, lr}
   1e49a:	b082      	sub	sp, #8
   1e49c:	af00      	add	r7, sp, #0
   1e49e:	6078      	str	r0, [r7, #4]
    return parse_compile_execute(filename, MP_PARSE_FILE_INPUT, EXEC_FLAG_SOURCE_IS_FILENAME);
   1e4a0:	2220      	movs	r2, #32
   1e4a2:	2101      	movs	r1, #1
   1e4a4:	6878      	ldr	r0, [r7, #4]
   1e4a6:	f7ff fdde 	bl	1e066 <parse_compile_execute>
   1e4aa:	4603      	mov	r3, r0
}
   1e4ac:	4618      	mov	r0, r3
   1e4ae:	3708      	adds	r7, #8
   1e4b0:	46bd      	mov	sp, r7
   1e4b2:	bd80      	pop	{r7, pc}

0001e4b4 <pyexec_frozen_module>:

#if MICROPY_MODULE_FROZEN
int pyexec_frozen_module(const char *name) {
   1e4b4:	b580      	push	{r7, lr}
   1e4b6:	b084      	sub	sp, #16
   1e4b8:	af00      	add	r7, sp, #0
   1e4ba:	6078      	str	r0, [r7, #4]
    void *frozen_data;
    int frozen_type = mp_find_frozen_module(name, strlen(name), &frozen_data);
   1e4bc:	6878      	ldr	r0, [r7, #4]
   1e4be:	f000 f96d 	bl	1e79c <strlen>
   1e4c2:	4601      	mov	r1, r0
   1e4c4:	f107 0308 	add.w	r3, r7, #8
   1e4c8:	461a      	mov	r2, r3
   1e4ca:	6878      	ldr	r0, [r7, #4]
   1e4cc:	f7fe fb76 	bl	1cbbc <mp_find_frozen_module>
   1e4d0:	60f8      	str	r0, [r7, #12]

    switch (frozen_type) {
   1e4d2:	68fb      	ldr	r3, [r7, #12]
   1e4d4:	2b02      	cmp	r3, #2
   1e4d6:	d107      	bne.n	1e4e8 <pyexec_frozen_module+0x34>
            return parse_compile_execute(frozen_data, MP_PARSE_FILE_INPUT, 0);
        #endif

        #if MICROPY_MODULE_FROZEN_MPY
        case MP_FROZEN_MPY:
            return parse_compile_execute(frozen_data, MP_PARSE_FILE_INPUT, EXEC_FLAG_SOURCE_IS_RAW_CODE);
   1e4d8:	68bb      	ldr	r3, [r7, #8]
   1e4da:	2208      	movs	r2, #8
   1e4dc:	2101      	movs	r1, #1
   1e4de:	4618      	mov	r0, r3
   1e4e0:	f7ff fdc1 	bl	1e066 <parse_compile_execute>
   1e4e4:	4603      	mov	r3, r0
   1e4e6:	e004      	b.n	1e4f2 <pyexec_frozen_module+0x3e>
        #endif

        default:
            printf("could not find module '%s'\n", name);
   1e4e8:	6879      	ldr	r1, [r7, #4]
   1e4ea:	4804      	ldr	r0, [pc, #16]	; (1e4fc <pyexec_frozen_module+0x48>)
   1e4ec:	f7fe fb96 	bl	1cc1c <printf>
            return false;
   1e4f0:	2300      	movs	r3, #0
    }
}
   1e4f2:	4618      	mov	r0, r3
   1e4f4:	3710      	adds	r7, #16
   1e4f6:	46bd      	mov	sp, r7
   1e4f8:	bd80      	pop	{r7, pc}
   1e4fa:	bf00      	nop
   1e4fc:	0002800c 	.word	0x0002800c

0001e500 <pyb_set_repl_info>:
#endif

mp_obj_t pyb_set_repl_info(mp_obj_t o_value) {
   1e500:	b580      	push	{r7, lr}
   1e502:	b082      	sub	sp, #8
   1e504:	af00      	add	r7, sp, #0
   1e506:	6078      	str	r0, [r7, #4]
    repl_display_debugging_info = mp_obj_get_int(o_value);
   1e508:	6878      	ldr	r0, [r7, #4]
   1e50a:	f7ef fd83 	bl	e014 <mp_obj_get_int>
   1e50e:	4603      	mov	r3, r0
   1e510:	2b00      	cmp	r3, #0
   1e512:	bf14      	ite	ne
   1e514:	2301      	movne	r3, #1
   1e516:	2300      	moveq	r3, #0
   1e518:	b2da      	uxtb	r2, r3
   1e51a:	4b03      	ldr	r3, [pc, #12]	; (1e528 <pyb_set_repl_info+0x28>)
   1e51c:	701a      	strb	r2, [r3, #0]
    return mp_const_none;
   1e51e:	4b03      	ldr	r3, [pc, #12]	; (1e52c <pyb_set_repl_info+0x2c>)
}
   1e520:	4618      	mov	r0, r3
   1e522:	3708      	adds	r7, #8
   1e524:	46bd      	mov	sp, r7
   1e526:	bd80      	pop	{r7, pc}
   1e528:	20001228 	.word	0x20001228
   1e52c:	0002511c 	.word	0x0002511c

0001e530 <memcpy>:
#include <stdint.h>
#include <string.h>

#define likely(x) __builtin_expect((x), 1)

void *memcpy(void *dst, const void *src, size_t n) {
   1e530:	b480      	push	{r7}
   1e532:	b08b      	sub	sp, #44	; 0x2c
   1e534:	af00      	add	r7, sp, #0
   1e536:	60f8      	str	r0, [r7, #12]
   1e538:	60b9      	str	r1, [r7, #8]
   1e53a:	607a      	str	r2, [r7, #4]
    if (likely(!(((uintptr_t)dst) & 3) && !(((uintptr_t)src) & 3))) {
   1e53c:	68fb      	ldr	r3, [r7, #12]
   1e53e:	f003 0303 	and.w	r3, r3, #3
   1e542:	2b00      	cmp	r3, #0
   1e544:	bf0c      	ite	eq
   1e546:	2301      	moveq	r3, #1
   1e548:	2300      	movne	r3, #0
   1e54a:	b2db      	uxtb	r3, r3
   1e54c:	2b00      	cmp	r3, #0
   1e54e:	d038      	beq.n	1e5c2 <memcpy+0x92>
   1e550:	68bb      	ldr	r3, [r7, #8]
   1e552:	f003 0303 	and.w	r3, r3, #3
   1e556:	2b00      	cmp	r3, #0
   1e558:	bf0c      	ite	eq
   1e55a:	2301      	moveq	r3, #1
   1e55c:	2300      	movne	r3, #0
   1e55e:	b2db      	uxtb	r3, r3
   1e560:	2b00      	cmp	r3, #0
   1e562:	d02e      	beq.n	1e5c2 <memcpy+0x92>
        // pointers aligned
        uint32_t *d = dst;
   1e564:	68fb      	ldr	r3, [r7, #12]
   1e566:	627b      	str	r3, [r7, #36]	; 0x24
        const uint32_t *s = src;
   1e568:	68bb      	ldr	r3, [r7, #8]
   1e56a:	623b      	str	r3, [r7, #32]

        // copy words first
        for (size_t i = (n >> 2); i; i--) {
   1e56c:	687b      	ldr	r3, [r7, #4]
   1e56e:	089b      	lsrs	r3, r3, #2
   1e570:	61fb      	str	r3, [r7, #28]
   1e572:	e00a      	b.n	1e58a <memcpy+0x5a>
            *d++ = *s++;
   1e574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1e576:	1d1a      	adds	r2, r3, #4
   1e578:	627a      	str	r2, [r7, #36]	; 0x24
   1e57a:	6a3a      	ldr	r2, [r7, #32]
   1e57c:	1d11      	adds	r1, r2, #4
   1e57e:	6239      	str	r1, [r7, #32]
   1e580:	6812      	ldr	r2, [r2, #0]
   1e582:	601a      	str	r2, [r3, #0]
        for (size_t i = (n >> 2); i; i--) {
   1e584:	69fb      	ldr	r3, [r7, #28]
   1e586:	3b01      	subs	r3, #1
   1e588:	61fb      	str	r3, [r7, #28]
   1e58a:	69fb      	ldr	r3, [r7, #28]
   1e58c:	2b00      	cmp	r3, #0
   1e58e:	d1f1      	bne.n	1e574 <memcpy+0x44>
        }

        if (n & 2) {
   1e590:	687b      	ldr	r3, [r7, #4]
   1e592:	f003 0302 	and.w	r3, r3, #2
   1e596:	2b00      	cmp	r3, #0
   1e598:	d009      	beq.n	1e5ae <memcpy+0x7e>
            // copy half-word
            *(uint16_t*)d = *(const uint16_t*)s;
   1e59a:	6a3b      	ldr	r3, [r7, #32]
   1e59c:	881a      	ldrh	r2, [r3, #0]
   1e59e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1e5a0:	801a      	strh	r2, [r3, #0]
            d = (uint32_t*)((uint16_t*)d + 1);
   1e5a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1e5a4:	3302      	adds	r3, #2
   1e5a6:	627b      	str	r3, [r7, #36]	; 0x24
            s = (const uint32_t*)((const uint16_t*)s + 1);
   1e5a8:	6a3b      	ldr	r3, [r7, #32]
   1e5aa:	3302      	adds	r3, #2
   1e5ac:	623b      	str	r3, [r7, #32]
        }

        if (n & 1) {
   1e5ae:	687b      	ldr	r3, [r7, #4]
   1e5b0:	f003 0301 	and.w	r3, r3, #1
   1e5b4:	2b00      	cmp	r3, #0
   1e5b6:	d018      	beq.n	1e5ea <memcpy+0xba>
            // copy byte
            *((uint8_t*)d) = *((const uint8_t*)s);
   1e5b8:	6a3b      	ldr	r3, [r7, #32]
   1e5ba:	781a      	ldrb	r2, [r3, #0]
   1e5bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1e5be:	701a      	strb	r2, [r3, #0]
    if (likely(!(((uintptr_t)dst) & 3) && !(((uintptr_t)src) & 3))) {
   1e5c0:	e013      	b.n	1e5ea <memcpy+0xba>
        }
    } else {
        // unaligned access, copy bytes
        uint8_t *d = dst;
   1e5c2:	68fb      	ldr	r3, [r7, #12]
   1e5c4:	61bb      	str	r3, [r7, #24]
        const uint8_t *s = src;
   1e5c6:	68bb      	ldr	r3, [r7, #8]
   1e5c8:	617b      	str	r3, [r7, #20]

        for (; n; n--) {
   1e5ca:	e00a      	b.n	1e5e2 <memcpy+0xb2>
            *d++ = *s++;
   1e5cc:	69bb      	ldr	r3, [r7, #24]
   1e5ce:	1c5a      	adds	r2, r3, #1
   1e5d0:	61ba      	str	r2, [r7, #24]
   1e5d2:	697a      	ldr	r2, [r7, #20]
   1e5d4:	1c51      	adds	r1, r2, #1
   1e5d6:	6179      	str	r1, [r7, #20]
   1e5d8:	7812      	ldrb	r2, [r2, #0]
   1e5da:	701a      	strb	r2, [r3, #0]
        for (; n; n--) {
   1e5dc:	687b      	ldr	r3, [r7, #4]
   1e5de:	3b01      	subs	r3, #1
   1e5e0:	607b      	str	r3, [r7, #4]
   1e5e2:	687b      	ldr	r3, [r7, #4]
   1e5e4:	2b00      	cmp	r3, #0
   1e5e6:	d1f1      	bne.n	1e5cc <memcpy+0x9c>
   1e5e8:	e000      	b.n	1e5ec <memcpy+0xbc>
    if (likely(!(((uintptr_t)dst) & 3) && !(((uintptr_t)src) & 3))) {
   1e5ea:	bf00      	nop
        }
    }

    return dst;
   1e5ec:	68fb      	ldr	r3, [r7, #12]
}
   1e5ee:	4618      	mov	r0, r3
   1e5f0:	372c      	adds	r7, #44	; 0x2c
   1e5f2:	46bd      	mov	sp, r7
   1e5f4:	f85d 7b04 	ldr.w	r7, [sp], #4
   1e5f8:	4770      	bx	lr

0001e5fa <memmove>:

void *memmove(void *dest, const void *src, size_t n) {
   1e5fa:	b580      	push	{r7, lr}
   1e5fc:	b086      	sub	sp, #24
   1e5fe:	af00      	add	r7, sp, #0
   1e600:	60f8      	str	r0, [r7, #12]
   1e602:	60b9      	str	r1, [r7, #8]
   1e604:	607a      	str	r2, [r7, #4]
    if (src < dest && (uint8_t*)dest < (const uint8_t*)src + n) {
   1e606:	68ba      	ldr	r2, [r7, #8]
   1e608:	68fb      	ldr	r3, [r7, #12]
   1e60a:	429a      	cmp	r2, r3
   1e60c:	d220      	bcs.n	1e650 <memmove+0x56>
   1e60e:	68ba      	ldr	r2, [r7, #8]
   1e610:	687b      	ldr	r3, [r7, #4]
   1e612:	441a      	add	r2, r3
   1e614:	68fb      	ldr	r3, [r7, #12]
   1e616:	429a      	cmp	r2, r3
   1e618:	d91a      	bls.n	1e650 <memmove+0x56>
        // need to copy backwards
        uint8_t *d = (uint8_t*)dest + n - 1;
   1e61a:	687b      	ldr	r3, [r7, #4]
   1e61c:	3b01      	subs	r3, #1
   1e61e:	68fa      	ldr	r2, [r7, #12]
   1e620:	4413      	add	r3, r2
   1e622:	617b      	str	r3, [r7, #20]
        const uint8_t *s = (const uint8_t*)src + n - 1;
   1e624:	687b      	ldr	r3, [r7, #4]
   1e626:	3b01      	subs	r3, #1
   1e628:	68ba      	ldr	r2, [r7, #8]
   1e62a:	4413      	add	r3, r2
   1e62c:	613b      	str	r3, [r7, #16]
        for (; n > 0; n--) {
   1e62e:	e00a      	b.n	1e646 <memmove+0x4c>
            *d-- = *s--;
   1e630:	697b      	ldr	r3, [r7, #20]
   1e632:	1e5a      	subs	r2, r3, #1
   1e634:	617a      	str	r2, [r7, #20]
   1e636:	693a      	ldr	r2, [r7, #16]
   1e638:	1e51      	subs	r1, r2, #1
   1e63a:	6139      	str	r1, [r7, #16]
   1e63c:	7812      	ldrb	r2, [r2, #0]
   1e63e:	701a      	strb	r2, [r3, #0]
        for (; n > 0; n--) {
   1e640:	687b      	ldr	r3, [r7, #4]
   1e642:	3b01      	subs	r3, #1
   1e644:	607b      	str	r3, [r7, #4]
   1e646:	687b      	ldr	r3, [r7, #4]
   1e648:	2b00      	cmp	r3, #0
   1e64a:	d1f1      	bne.n	1e630 <memmove+0x36>
        }
        return dest;
   1e64c:	68fb      	ldr	r3, [r7, #12]
   1e64e:	e005      	b.n	1e65c <memmove+0x62>
    } else {
        // can use normal memcpy
        return memcpy(dest, src, n);
   1e650:	687a      	ldr	r2, [r7, #4]
   1e652:	68b9      	ldr	r1, [r7, #8]
   1e654:	68f8      	ldr	r0, [r7, #12]
   1e656:	f7ff ff6b 	bl	1e530 <memcpy>
   1e65a:	4603      	mov	r3, r0
    }
}
   1e65c:	4618      	mov	r0, r3
   1e65e:	3718      	adds	r7, #24
   1e660:	46bd      	mov	sp, r7
   1e662:	bd80      	pop	{r7, pc}

0001e664 <memset>:

void *memset(void *s, int c, size_t n) {
   1e664:	b480      	push	{r7}
   1e666:	b089      	sub	sp, #36	; 0x24
   1e668:	af00      	add	r7, sp, #0
   1e66a:	60f8      	str	r0, [r7, #12]
   1e66c:	60b9      	str	r1, [r7, #8]
   1e66e:	607a      	str	r2, [r7, #4]
    if (c == 0 && ((uintptr_t)s & 3) == 0) {
   1e670:	68bb      	ldr	r3, [r7, #8]
   1e672:	2b00      	cmp	r3, #0
   1e674:	d129      	bne.n	1e6ca <memset+0x66>
   1e676:	68fb      	ldr	r3, [r7, #12]
   1e678:	f003 0303 	and.w	r3, r3, #3
   1e67c:	2b00      	cmp	r3, #0
   1e67e:	d124      	bne.n	1e6ca <memset+0x66>
        // aligned store of 0
        uint32_t *s32 = s;
   1e680:	68fb      	ldr	r3, [r7, #12]
   1e682:	61fb      	str	r3, [r7, #28]
        for (size_t i = n >> 2; i > 0; i--) {
   1e684:	687b      	ldr	r3, [r7, #4]
   1e686:	089b      	lsrs	r3, r3, #2
   1e688:	61bb      	str	r3, [r7, #24]
   1e68a:	e007      	b.n	1e69c <memset+0x38>
            *s32++ = 0;
   1e68c:	69fb      	ldr	r3, [r7, #28]
   1e68e:	1d1a      	adds	r2, r3, #4
   1e690:	61fa      	str	r2, [r7, #28]
   1e692:	2200      	movs	r2, #0
   1e694:	601a      	str	r2, [r3, #0]
        for (size_t i = n >> 2; i > 0; i--) {
   1e696:	69bb      	ldr	r3, [r7, #24]
   1e698:	3b01      	subs	r3, #1
   1e69a:	61bb      	str	r3, [r7, #24]
   1e69c:	69bb      	ldr	r3, [r7, #24]
   1e69e:	2b00      	cmp	r3, #0
   1e6a0:	d1f4      	bne.n	1e68c <memset+0x28>
        }
        if (n & 2) {
   1e6a2:	687b      	ldr	r3, [r7, #4]
   1e6a4:	f003 0302 	and.w	r3, r3, #2
   1e6a8:	2b00      	cmp	r3, #0
   1e6aa:	d005      	beq.n	1e6b8 <memset+0x54>
            *((uint16_t*)s32) = 0;
   1e6ac:	69fb      	ldr	r3, [r7, #28]
   1e6ae:	2200      	movs	r2, #0
   1e6b0:	801a      	strh	r2, [r3, #0]
            s32 = (uint32_t*)((uint16_t*)s32 + 1);
   1e6b2:	69fb      	ldr	r3, [r7, #28]
   1e6b4:	3302      	adds	r3, #2
   1e6b6:	61fb      	str	r3, [r7, #28]
        }
        if (n & 1) {
   1e6b8:	687b      	ldr	r3, [r7, #4]
   1e6ba:	f003 0301 	and.w	r3, r3, #1
   1e6be:	2b00      	cmp	r3, #0
   1e6c0:	d013      	beq.n	1e6ea <memset+0x86>
            *((uint8_t*)s32) = 0;
   1e6c2:	69fb      	ldr	r3, [r7, #28]
   1e6c4:	2200      	movs	r2, #0
   1e6c6:	701a      	strb	r2, [r3, #0]
    if (c == 0 && ((uintptr_t)s & 3) == 0) {
   1e6c8:	e00f      	b.n	1e6ea <memset+0x86>
        }
    } else {
        uint8_t *s2 = s;
   1e6ca:	68fb      	ldr	r3, [r7, #12]
   1e6cc:	617b      	str	r3, [r7, #20]
        for (; n > 0; n--) {
   1e6ce:	e008      	b.n	1e6e2 <memset+0x7e>
            *s2++ = c;
   1e6d0:	697b      	ldr	r3, [r7, #20]
   1e6d2:	1c5a      	adds	r2, r3, #1
   1e6d4:	617a      	str	r2, [r7, #20]
   1e6d6:	68ba      	ldr	r2, [r7, #8]
   1e6d8:	b2d2      	uxtb	r2, r2
   1e6da:	701a      	strb	r2, [r3, #0]
        for (; n > 0; n--) {
   1e6dc:	687b      	ldr	r3, [r7, #4]
   1e6de:	3b01      	subs	r3, #1
   1e6e0:	607b      	str	r3, [r7, #4]
   1e6e2:	687b      	ldr	r3, [r7, #4]
   1e6e4:	2b00      	cmp	r3, #0
   1e6e6:	d1f3      	bne.n	1e6d0 <memset+0x6c>
   1e6e8:	e000      	b.n	1e6ec <memset+0x88>
    if (c == 0 && ((uintptr_t)s & 3) == 0) {
   1e6ea:	bf00      	nop
        }
    }
    return s;
   1e6ec:	68fb      	ldr	r3, [r7, #12]
}
   1e6ee:	4618      	mov	r0, r3
   1e6f0:	3724      	adds	r7, #36	; 0x24
   1e6f2:	46bd      	mov	sp, r7
   1e6f4:	f85d 7b04 	ldr.w	r7, [sp], #4
   1e6f8:	4770      	bx	lr

0001e6fa <memcmp>:

int memcmp(const void *s1, const void *s2, size_t n) {
   1e6fa:	b480      	push	{r7}
   1e6fc:	b089      	sub	sp, #36	; 0x24
   1e6fe:	af00      	add	r7, sp, #0
   1e700:	60f8      	str	r0, [r7, #12]
   1e702:	60b9      	str	r1, [r7, #8]
   1e704:	607a      	str	r2, [r7, #4]
    const uint8_t *s1_8 = s1;
   1e706:	68fb      	ldr	r3, [r7, #12]
   1e708:	61fb      	str	r3, [r7, #28]
    const uint8_t *s2_8 = s2;
   1e70a:	68bb      	ldr	r3, [r7, #8]
   1e70c:	61bb      	str	r3, [r7, #24]
    while (n--) {
   1e70e:	e016      	b.n	1e73e <memcmp+0x44>
        char c1 = *s1_8++;
   1e710:	69fb      	ldr	r3, [r7, #28]
   1e712:	1c5a      	adds	r2, r3, #1
   1e714:	61fa      	str	r2, [r7, #28]
   1e716:	781b      	ldrb	r3, [r3, #0]
   1e718:	75fb      	strb	r3, [r7, #23]
        char c2 = *s2_8++;
   1e71a:	69bb      	ldr	r3, [r7, #24]
   1e71c:	1c5a      	adds	r2, r3, #1
   1e71e:	61ba      	str	r2, [r7, #24]
   1e720:	781b      	ldrb	r3, [r3, #0]
   1e722:	75bb      	strb	r3, [r7, #22]
        if (c1 < c2) return -1;
   1e724:	7dfa      	ldrb	r2, [r7, #23]
   1e726:	7dbb      	ldrb	r3, [r7, #22]
   1e728:	429a      	cmp	r2, r3
   1e72a:	d202      	bcs.n	1e732 <memcmp+0x38>
   1e72c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1e730:	e00b      	b.n	1e74a <memcmp+0x50>
        else if (c1 > c2) return 1;
   1e732:	7dfa      	ldrb	r2, [r7, #23]
   1e734:	7dbb      	ldrb	r3, [r7, #22]
   1e736:	429a      	cmp	r2, r3
   1e738:	d901      	bls.n	1e73e <memcmp+0x44>
   1e73a:	2301      	movs	r3, #1
   1e73c:	e005      	b.n	1e74a <memcmp+0x50>
    while (n--) {
   1e73e:	687b      	ldr	r3, [r7, #4]
   1e740:	1e5a      	subs	r2, r3, #1
   1e742:	607a      	str	r2, [r7, #4]
   1e744:	2b00      	cmp	r3, #0
   1e746:	d1e3      	bne.n	1e710 <memcmp+0x16>
    }
    return 0;
   1e748:	2300      	movs	r3, #0
}
   1e74a:	4618      	mov	r0, r3
   1e74c:	3724      	adds	r7, #36	; 0x24
   1e74e:	46bd      	mov	sp, r7
   1e750:	f85d 7b04 	ldr.w	r7, [sp], #4
   1e754:	4770      	bx	lr

0001e756 <memchr>:

void *memchr(const void *s, int c, size_t n) {
   1e756:	b480      	push	{r7}
   1e758:	b087      	sub	sp, #28
   1e75a:	af00      	add	r7, sp, #0
   1e75c:	60f8      	str	r0, [r7, #12]
   1e75e:	60b9      	str	r1, [r7, #8]
   1e760:	607a      	str	r2, [r7, #4]
    if (n != 0) {
   1e762:	687b      	ldr	r3, [r7, #4]
   1e764:	2b00      	cmp	r3, #0
   1e766:	d012      	beq.n	1e78e <memchr+0x38>
        const unsigned char *p = s;
   1e768:	68fb      	ldr	r3, [r7, #12]
   1e76a:	617b      	str	r3, [r7, #20]

        do {
            if (*p++ == c)
   1e76c:	697b      	ldr	r3, [r7, #20]
   1e76e:	1c5a      	adds	r2, r3, #1
   1e770:	617a      	str	r2, [r7, #20]
   1e772:	781b      	ldrb	r3, [r3, #0]
   1e774:	461a      	mov	r2, r3
   1e776:	68bb      	ldr	r3, [r7, #8]
   1e778:	429a      	cmp	r2, r3
   1e77a:	d102      	bne.n	1e782 <memchr+0x2c>
                return ((void *)(p - 1));
   1e77c:	697b      	ldr	r3, [r7, #20]
   1e77e:	3b01      	subs	r3, #1
   1e780:	e006      	b.n	1e790 <memchr+0x3a>
        } while (--n != 0);
   1e782:	687b      	ldr	r3, [r7, #4]
   1e784:	3b01      	subs	r3, #1
   1e786:	607b      	str	r3, [r7, #4]
   1e788:	687b      	ldr	r3, [r7, #4]
   1e78a:	2b00      	cmp	r3, #0
   1e78c:	d1ee      	bne.n	1e76c <memchr+0x16>
    }
    return 0;
   1e78e:	2300      	movs	r3, #0
}
   1e790:	4618      	mov	r0, r3
   1e792:	371c      	adds	r7, #28
   1e794:	46bd      	mov	sp, r7
   1e796:	f85d 7b04 	ldr.w	r7, [sp], #4
   1e79a:	4770      	bx	lr

0001e79c <strlen>:

size_t strlen(const char *str) {
   1e79c:	b480      	push	{r7}
   1e79e:	b085      	sub	sp, #20
   1e7a0:	af00      	add	r7, sp, #0
   1e7a2:	6078      	str	r0, [r7, #4]
    int len = 0;
   1e7a4:	2300      	movs	r3, #0
   1e7a6:	60fb      	str	r3, [r7, #12]
    for (const char *s = str; *s; s++) {
   1e7a8:	687b      	ldr	r3, [r7, #4]
   1e7aa:	60bb      	str	r3, [r7, #8]
   1e7ac:	e005      	b.n	1e7ba <strlen+0x1e>
        len += 1;
   1e7ae:	68fb      	ldr	r3, [r7, #12]
   1e7b0:	3301      	adds	r3, #1
   1e7b2:	60fb      	str	r3, [r7, #12]
    for (const char *s = str; *s; s++) {
   1e7b4:	68bb      	ldr	r3, [r7, #8]
   1e7b6:	3301      	adds	r3, #1
   1e7b8:	60bb      	str	r3, [r7, #8]
   1e7ba:	68bb      	ldr	r3, [r7, #8]
   1e7bc:	781b      	ldrb	r3, [r3, #0]
   1e7be:	2b00      	cmp	r3, #0
   1e7c0:	d1f5      	bne.n	1e7ae <strlen+0x12>
    }
    return len;
   1e7c2:	68fb      	ldr	r3, [r7, #12]
}
   1e7c4:	4618      	mov	r0, r3
   1e7c6:	3714      	adds	r7, #20
   1e7c8:	46bd      	mov	sp, r7
   1e7ca:	f85d 7b04 	ldr.w	r7, [sp], #4
   1e7ce:	4770      	bx	lr

0001e7d0 <strcmp>:

int strcmp(const char *s1, const char *s2) {
   1e7d0:	b480      	push	{r7}
   1e7d2:	b085      	sub	sp, #20
   1e7d4:	af00      	add	r7, sp, #0
   1e7d6:	6078      	str	r0, [r7, #4]
   1e7d8:	6039      	str	r1, [r7, #0]
    while (*s1 && *s2) {
   1e7da:	e016      	b.n	1e80a <strcmp+0x3a>
        char c1 = *s1++; // XXX UTF8 get char, next char
   1e7dc:	687b      	ldr	r3, [r7, #4]
   1e7de:	1c5a      	adds	r2, r3, #1
   1e7e0:	607a      	str	r2, [r7, #4]
   1e7e2:	781b      	ldrb	r3, [r3, #0]
   1e7e4:	73fb      	strb	r3, [r7, #15]
        char c2 = *s2++; // XXX UTF8 get char, next char
   1e7e6:	683b      	ldr	r3, [r7, #0]
   1e7e8:	1c5a      	adds	r2, r3, #1
   1e7ea:	603a      	str	r2, [r7, #0]
   1e7ec:	781b      	ldrb	r3, [r3, #0]
   1e7ee:	73bb      	strb	r3, [r7, #14]
        if (c1 < c2) return -1;
   1e7f0:	7bfa      	ldrb	r2, [r7, #15]
   1e7f2:	7bbb      	ldrb	r3, [r7, #14]
   1e7f4:	429a      	cmp	r2, r3
   1e7f6:	d202      	bcs.n	1e7fe <strcmp+0x2e>
   1e7f8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1e7fc:	e01b      	b.n	1e836 <strcmp+0x66>
        else if (c1 > c2) return 1;
   1e7fe:	7bfa      	ldrb	r2, [r7, #15]
   1e800:	7bbb      	ldrb	r3, [r7, #14]
   1e802:	429a      	cmp	r2, r3
   1e804:	d901      	bls.n	1e80a <strcmp+0x3a>
   1e806:	2301      	movs	r3, #1
   1e808:	e015      	b.n	1e836 <strcmp+0x66>
    while (*s1 && *s2) {
   1e80a:	687b      	ldr	r3, [r7, #4]
   1e80c:	781b      	ldrb	r3, [r3, #0]
   1e80e:	2b00      	cmp	r3, #0
   1e810:	d003      	beq.n	1e81a <strcmp+0x4a>
   1e812:	683b      	ldr	r3, [r7, #0]
   1e814:	781b      	ldrb	r3, [r3, #0]
   1e816:	2b00      	cmp	r3, #0
   1e818:	d1e0      	bne.n	1e7dc <strcmp+0xc>
    }
    if (*s2) return -1;
   1e81a:	683b      	ldr	r3, [r7, #0]
   1e81c:	781b      	ldrb	r3, [r3, #0]
   1e81e:	2b00      	cmp	r3, #0
   1e820:	d002      	beq.n	1e828 <strcmp+0x58>
   1e822:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1e826:	e006      	b.n	1e836 <strcmp+0x66>
    else if (*s1) return 1;
   1e828:	687b      	ldr	r3, [r7, #4]
   1e82a:	781b      	ldrb	r3, [r3, #0]
   1e82c:	2b00      	cmp	r3, #0
   1e82e:	d001      	beq.n	1e834 <strcmp+0x64>
   1e830:	2301      	movs	r3, #1
   1e832:	e000      	b.n	1e836 <strcmp+0x66>
    else return 0;
   1e834:	2300      	movs	r3, #0
}
   1e836:	4618      	mov	r0, r3
   1e838:	3714      	adds	r7, #20
   1e83a:	46bd      	mov	sp, r7
   1e83c:	f85d 7b04 	ldr.w	r7, [sp], #4
   1e840:	4770      	bx	lr

0001e842 <strncmp>:

int strncmp(const char *s1, const char *s2, size_t n) {
   1e842:	b480      	push	{r7}
   1e844:	b087      	sub	sp, #28
   1e846:	af00      	add	r7, sp, #0
   1e848:	60f8      	str	r0, [r7, #12]
   1e84a:	60b9      	str	r1, [r7, #8]
   1e84c:	607a      	str	r2, [r7, #4]
    while (*s1 && *s2 && n > 0) {
   1e84e:	e019      	b.n	1e884 <strncmp+0x42>
        char c1 = *s1++; // XXX UTF8 get char, next char
   1e850:	68fb      	ldr	r3, [r7, #12]
   1e852:	1c5a      	adds	r2, r3, #1
   1e854:	60fa      	str	r2, [r7, #12]
   1e856:	781b      	ldrb	r3, [r3, #0]
   1e858:	75fb      	strb	r3, [r7, #23]
        char c2 = *s2++; // XXX UTF8 get char, next char
   1e85a:	68bb      	ldr	r3, [r7, #8]
   1e85c:	1c5a      	adds	r2, r3, #1
   1e85e:	60ba      	str	r2, [r7, #8]
   1e860:	781b      	ldrb	r3, [r3, #0]
   1e862:	75bb      	strb	r3, [r7, #22]
        n--;
   1e864:	687b      	ldr	r3, [r7, #4]
   1e866:	3b01      	subs	r3, #1
   1e868:	607b      	str	r3, [r7, #4]
        if (c1 < c2) return -1;
   1e86a:	7dfa      	ldrb	r2, [r7, #23]
   1e86c:	7dbb      	ldrb	r3, [r7, #22]
   1e86e:	429a      	cmp	r2, r3
   1e870:	d202      	bcs.n	1e878 <strncmp+0x36>
   1e872:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1e876:	e023      	b.n	1e8c0 <strncmp+0x7e>
        else if (c1 > c2) return 1;
   1e878:	7dfa      	ldrb	r2, [r7, #23]
   1e87a:	7dbb      	ldrb	r3, [r7, #22]
   1e87c:	429a      	cmp	r2, r3
   1e87e:	d901      	bls.n	1e884 <strncmp+0x42>
   1e880:	2301      	movs	r3, #1
   1e882:	e01d      	b.n	1e8c0 <strncmp+0x7e>
    while (*s1 && *s2 && n > 0) {
   1e884:	68fb      	ldr	r3, [r7, #12]
   1e886:	781b      	ldrb	r3, [r3, #0]
   1e888:	2b00      	cmp	r3, #0
   1e88a:	d006      	beq.n	1e89a <strncmp+0x58>
   1e88c:	68bb      	ldr	r3, [r7, #8]
   1e88e:	781b      	ldrb	r3, [r3, #0]
   1e890:	2b00      	cmp	r3, #0
   1e892:	d002      	beq.n	1e89a <strncmp+0x58>
   1e894:	687b      	ldr	r3, [r7, #4]
   1e896:	2b00      	cmp	r3, #0
   1e898:	d1da      	bne.n	1e850 <strncmp+0xe>
    }
    if (n == 0) return 0;
   1e89a:	687b      	ldr	r3, [r7, #4]
   1e89c:	2b00      	cmp	r3, #0
   1e89e:	d101      	bne.n	1e8a4 <strncmp+0x62>
   1e8a0:	2300      	movs	r3, #0
   1e8a2:	e00d      	b.n	1e8c0 <strncmp+0x7e>
    else if (*s2) return -1;
   1e8a4:	68bb      	ldr	r3, [r7, #8]
   1e8a6:	781b      	ldrb	r3, [r3, #0]
   1e8a8:	2b00      	cmp	r3, #0
   1e8aa:	d002      	beq.n	1e8b2 <strncmp+0x70>
   1e8ac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1e8b0:	e006      	b.n	1e8c0 <strncmp+0x7e>
    else if (*s1) return 1;
   1e8b2:	68fb      	ldr	r3, [r7, #12]
   1e8b4:	781b      	ldrb	r3, [r3, #0]
   1e8b6:	2b00      	cmp	r3, #0
   1e8b8:	d001      	beq.n	1e8be <strncmp+0x7c>
   1e8ba:	2301      	movs	r3, #1
   1e8bc:	e000      	b.n	1e8c0 <strncmp+0x7e>
    else return 0;
   1e8be:	2300      	movs	r3, #0
}
   1e8c0:	4618      	mov	r0, r3
   1e8c2:	371c      	adds	r7, #28
   1e8c4:	46bd      	mov	sp, r7
   1e8c6:	f85d 7b04 	ldr.w	r7, [sp], #4
   1e8ca:	4770      	bx	lr

0001e8cc <strcpy>:

char *strcpy(char *dest, const char *src) {
   1e8cc:	b480      	push	{r7}
   1e8ce:	b085      	sub	sp, #20
   1e8d0:	af00      	add	r7, sp, #0
   1e8d2:	6078      	str	r0, [r7, #4]
   1e8d4:	6039      	str	r1, [r7, #0]
    char *d = dest;
   1e8d6:	687b      	ldr	r3, [r7, #4]
   1e8d8:	60fb      	str	r3, [r7, #12]
    while (*src) {
   1e8da:	e007      	b.n	1e8ec <strcpy+0x20>
        *d++ = *src++;
   1e8dc:	68fb      	ldr	r3, [r7, #12]
   1e8de:	1c5a      	adds	r2, r3, #1
   1e8e0:	60fa      	str	r2, [r7, #12]
   1e8e2:	683a      	ldr	r2, [r7, #0]
   1e8e4:	1c51      	adds	r1, r2, #1
   1e8e6:	6039      	str	r1, [r7, #0]
   1e8e8:	7812      	ldrb	r2, [r2, #0]
   1e8ea:	701a      	strb	r2, [r3, #0]
    while (*src) {
   1e8ec:	683b      	ldr	r3, [r7, #0]
   1e8ee:	781b      	ldrb	r3, [r3, #0]
   1e8f0:	2b00      	cmp	r3, #0
   1e8f2:	d1f3      	bne.n	1e8dc <strcpy+0x10>
    }
    *d = '\0';
   1e8f4:	68fb      	ldr	r3, [r7, #12]
   1e8f6:	2200      	movs	r2, #0
   1e8f8:	701a      	strb	r2, [r3, #0]
    return dest;
   1e8fa:	687b      	ldr	r3, [r7, #4]
}
   1e8fc:	4618      	mov	r0, r3
   1e8fe:	3714      	adds	r7, #20
   1e900:	46bd      	mov	sp, r7
   1e902:	f85d 7b04 	ldr.w	r7, [sp], #4
   1e906:	4770      	bx	lr

0001e908 <stpcpy>:

// needed because gcc optimises strcpy + strcat to this
char *stpcpy(char *dest, const char *src) {
   1e908:	b480      	push	{r7}
   1e90a:	b083      	sub	sp, #12
   1e90c:	af00      	add	r7, sp, #0
   1e90e:	6078      	str	r0, [r7, #4]
   1e910:	6039      	str	r1, [r7, #0]
    while (*src) {
   1e912:	e007      	b.n	1e924 <stpcpy+0x1c>
        *dest++ = *src++;
   1e914:	687b      	ldr	r3, [r7, #4]
   1e916:	1c5a      	adds	r2, r3, #1
   1e918:	607a      	str	r2, [r7, #4]
   1e91a:	683a      	ldr	r2, [r7, #0]
   1e91c:	1c51      	adds	r1, r2, #1
   1e91e:	6039      	str	r1, [r7, #0]
   1e920:	7812      	ldrb	r2, [r2, #0]
   1e922:	701a      	strb	r2, [r3, #0]
    while (*src) {
   1e924:	683b      	ldr	r3, [r7, #0]
   1e926:	781b      	ldrb	r3, [r3, #0]
   1e928:	2b00      	cmp	r3, #0
   1e92a:	d1f3      	bne.n	1e914 <stpcpy+0xc>
    }
    *dest = '\0';
   1e92c:	687b      	ldr	r3, [r7, #4]
   1e92e:	2200      	movs	r2, #0
   1e930:	701a      	strb	r2, [r3, #0]
    return dest;
   1e932:	687b      	ldr	r3, [r7, #4]
}
   1e934:	4618      	mov	r0, r3
   1e936:	370c      	adds	r7, #12
   1e938:	46bd      	mov	sp, r7
   1e93a:	f85d 7b04 	ldr.w	r7, [sp], #4
   1e93e:	4770      	bx	lr

0001e940 <strcat>:

char *strcat(char *dest, const char *src) {
   1e940:	b480      	push	{r7}
   1e942:	b085      	sub	sp, #20
   1e944:	af00      	add	r7, sp, #0
   1e946:	6078      	str	r0, [r7, #4]
   1e948:	6039      	str	r1, [r7, #0]
    char *d = dest;
   1e94a:	687b      	ldr	r3, [r7, #4]
   1e94c:	60fb      	str	r3, [r7, #12]
    while (*d) {
   1e94e:	e002      	b.n	1e956 <strcat+0x16>
        d++;
   1e950:	68fb      	ldr	r3, [r7, #12]
   1e952:	3301      	adds	r3, #1
   1e954:	60fb      	str	r3, [r7, #12]
    while (*d) {
   1e956:	68fb      	ldr	r3, [r7, #12]
   1e958:	781b      	ldrb	r3, [r3, #0]
   1e95a:	2b00      	cmp	r3, #0
   1e95c:	d1f8      	bne.n	1e950 <strcat+0x10>
    }
    while (*src) {
   1e95e:	e007      	b.n	1e970 <strcat+0x30>
        *d++ = *src++;
   1e960:	68fb      	ldr	r3, [r7, #12]
   1e962:	1c5a      	adds	r2, r3, #1
   1e964:	60fa      	str	r2, [r7, #12]
   1e966:	683a      	ldr	r2, [r7, #0]
   1e968:	1c51      	adds	r1, r2, #1
   1e96a:	6039      	str	r1, [r7, #0]
   1e96c:	7812      	ldrb	r2, [r2, #0]
   1e96e:	701a      	strb	r2, [r3, #0]
    while (*src) {
   1e970:	683b      	ldr	r3, [r7, #0]
   1e972:	781b      	ldrb	r3, [r3, #0]
   1e974:	2b00      	cmp	r3, #0
   1e976:	d1f3      	bne.n	1e960 <strcat+0x20>
    }
    *d = '\0';
   1e978:	68fb      	ldr	r3, [r7, #12]
   1e97a:	2200      	movs	r2, #0
   1e97c:	701a      	strb	r2, [r3, #0]
    return dest;
   1e97e:	687b      	ldr	r3, [r7, #4]
}
   1e980:	4618      	mov	r0, r3
   1e982:	3714      	adds	r7, #20
   1e984:	46bd      	mov	sp, r7
   1e986:	f85d 7b04 	ldr.w	r7, [sp], #4
   1e98a:	4770      	bx	lr

0001e98c <strchr>:

// Public Domain implementation of strchr from:
// http://en.wikibooks.org/wiki/C_Programming/Strings#The_strchr_function
char *strchr(const char *s, int c)
{
   1e98c:	b480      	push	{r7}
   1e98e:	b083      	sub	sp, #12
   1e990:	af00      	add	r7, sp, #0
   1e992:	6078      	str	r0, [r7, #4]
   1e994:	6039      	str	r1, [r7, #0]
    /* Scan s for the character.  When this loop is finished,
       s will either point to the end of the string or the
       character we were looking for.  */
    while (*s != '\0' && *s != (char)c)
   1e996:	e002      	b.n	1e99e <strchr+0x12>
        s++;
   1e998:	687b      	ldr	r3, [r7, #4]
   1e99a:	3301      	adds	r3, #1
   1e99c:	607b      	str	r3, [r7, #4]
    while (*s != '\0' && *s != (char)c)
   1e99e:	687b      	ldr	r3, [r7, #4]
   1e9a0:	781b      	ldrb	r3, [r3, #0]
   1e9a2:	2b00      	cmp	r3, #0
   1e9a4:	d005      	beq.n	1e9b2 <strchr+0x26>
   1e9a6:	687b      	ldr	r3, [r7, #4]
   1e9a8:	781a      	ldrb	r2, [r3, #0]
   1e9aa:	683b      	ldr	r3, [r7, #0]
   1e9ac:	b2db      	uxtb	r3, r3
   1e9ae:	429a      	cmp	r2, r3
   1e9b0:	d1f2      	bne.n	1e998 <strchr+0xc>
    return ((*s == c) ? (char *) s : 0);
   1e9b2:	687b      	ldr	r3, [r7, #4]
   1e9b4:	781b      	ldrb	r3, [r3, #0]
   1e9b6:	461a      	mov	r2, r3
   1e9b8:	683b      	ldr	r3, [r7, #0]
   1e9ba:	429a      	cmp	r2, r3
   1e9bc:	d101      	bne.n	1e9c2 <strchr+0x36>
   1e9be:	687b      	ldr	r3, [r7, #4]
   1e9c0:	e000      	b.n	1e9c4 <strchr+0x38>
   1e9c2:	2300      	movs	r3, #0
}
   1e9c4:	4618      	mov	r0, r3
   1e9c6:	370c      	adds	r7, #12
   1e9c8:	46bd      	mov	sp, r7
   1e9ca:	f85d 7b04 	ldr.w	r7, [sp], #4
   1e9ce:	4770      	bx	lr

0001e9d0 <strstr>:


// Public Domain implementation of strstr from:
// http://en.wikibooks.org/wiki/C_Programming/Strings#The_strstr_function
char *strstr(const char *haystack, const char *needle)
{
   1e9d0:	b580      	push	{r7, lr}
   1e9d2:	b084      	sub	sp, #16
   1e9d4:	af00      	add	r7, sp, #0
   1e9d6:	6078      	str	r0, [r7, #4]
   1e9d8:	6039      	str	r1, [r7, #0]
    size_t needlelen;
    /* Check for the null needle case.  */
    if (*needle == '\0')
   1e9da:	683b      	ldr	r3, [r7, #0]
   1e9dc:	781b      	ldrb	r3, [r3, #0]
   1e9de:	2b00      	cmp	r3, #0
   1e9e0:	d101      	bne.n	1e9e6 <strstr+0x16>
        return (char *) haystack;
   1e9e2:	687b      	ldr	r3, [r7, #4]
   1e9e4:	e01c      	b.n	1ea20 <strstr+0x50>
    needlelen = strlen(needle);
   1e9e6:	6838      	ldr	r0, [r7, #0]
   1e9e8:	f7ff fed8 	bl	1e79c <strlen>
   1e9ec:	60f8      	str	r0, [r7, #12]
    for (; (haystack = strchr(haystack, *needle)) != 0; haystack++)
   1e9ee:	e00c      	b.n	1ea0a <strstr+0x3a>
        if (strncmp(haystack, needle, needlelen) == 0)
   1e9f0:	68fa      	ldr	r2, [r7, #12]
   1e9f2:	6839      	ldr	r1, [r7, #0]
   1e9f4:	6878      	ldr	r0, [r7, #4]
   1e9f6:	f7ff ff24 	bl	1e842 <strncmp>
   1e9fa:	4603      	mov	r3, r0
   1e9fc:	2b00      	cmp	r3, #0
   1e9fe:	d101      	bne.n	1ea04 <strstr+0x34>
            return (char *) haystack;
   1ea00:	687b      	ldr	r3, [r7, #4]
   1ea02:	e00d      	b.n	1ea20 <strstr+0x50>
    for (; (haystack = strchr(haystack, *needle)) != 0; haystack++)
   1ea04:	687b      	ldr	r3, [r7, #4]
   1ea06:	3301      	adds	r3, #1
   1ea08:	607b      	str	r3, [r7, #4]
   1ea0a:	683b      	ldr	r3, [r7, #0]
   1ea0c:	781b      	ldrb	r3, [r3, #0]
   1ea0e:	4619      	mov	r1, r3
   1ea10:	6878      	ldr	r0, [r7, #4]
   1ea12:	f7ff ffbb 	bl	1e98c <strchr>
   1ea16:	6078      	str	r0, [r7, #4]
   1ea18:	687b      	ldr	r3, [r7, #4]
   1ea1a:	2b00      	cmp	r3, #0
   1ea1c:	d1e8      	bne.n	1e9f0 <strstr+0x20>
    return 0;
   1ea1e:	2300      	movs	r3, #0
}
   1ea20:	4618      	mov	r0, r3
   1ea22:	3710      	adds	r7, #16
   1ea24:	46bd      	mov	sp, r7
   1ea26:	bd80      	pop	{r7, pc}

0001ea28 <vstr_len>:
   1ea28:	b480      	push	{r7}
   1ea2a:	b083      	sub	sp, #12
   1ea2c:	af00      	add	r7, sp, #0
   1ea2e:	6078      	str	r0, [r7, #4]
   1ea30:	687b      	ldr	r3, [r7, #4]
   1ea32:	685b      	ldr	r3, [r3, #4]
   1ea34:	4618      	mov	r0, r3
   1ea36:	370c      	adds	r7, #12
   1ea38:	46bd      	mov	sp, r7
   1ea3a:	f85d 7b04 	ldr.w	r7, [sp], #4
   1ea3e:	4770      	bx	lr

0001ea40 <readline_init0>:

#define READLINE_HIST_SIZE (MP_ARRAY_SIZE(MP_STATE_PORT(readline_hist)))

enum { ESEQ_NONE, ESEQ_ESC, ESEQ_ESC_BRACKET, ESEQ_ESC_BRACKET_DIGIT, ESEQ_ESC_O };

void readline_init0(void) {
   1ea40:	b580      	push	{r7, lr}
   1ea42:	af00      	add	r7, sp, #0
    memset(MP_STATE_PORT(readline_hist), 0, READLINE_HIST_SIZE * sizeof(const char*));
   1ea44:	2220      	movs	r2, #32
   1ea46:	2100      	movs	r1, #0
   1ea48:	4802      	ldr	r0, [pc, #8]	; (1ea54 <readline_init0+0x14>)
   1ea4a:	f7ff fe0b 	bl	1e664 <memset>
}
   1ea4e:	bf00      	nop
   1ea50:	bd80      	pop	{r7, pc}
   1ea52:	bf00      	nop
   1ea54:	200012b0 	.word	0x200012b0

0001ea58 <str_dup_maybe>:

STATIC char *str_dup_maybe(const char *str) {
   1ea58:	b580      	push	{r7, lr}
   1ea5a:	b084      	sub	sp, #16
   1ea5c:	af00      	add	r7, sp, #0
   1ea5e:	6078      	str	r0, [r7, #4]
    uint32_t len = strlen(str);
   1ea60:	6878      	ldr	r0, [r7, #4]
   1ea62:	f7ff fe9b 	bl	1e79c <strlen>
   1ea66:	60f8      	str	r0, [r7, #12]
    char *s2 = m_new_maybe(char, len + 1);
   1ea68:	68fb      	ldr	r3, [r7, #12]
   1ea6a:	3301      	adds	r3, #1
   1ea6c:	4618      	mov	r0, r3
   1ea6e:	f7e1 fc73 	bl	358 <m_malloc_maybe>
   1ea72:	60b8      	str	r0, [r7, #8]
    if (s2 == NULL) {
   1ea74:	68bb      	ldr	r3, [r7, #8]
   1ea76:	2b00      	cmp	r3, #0
   1ea78:	d101      	bne.n	1ea7e <str_dup_maybe+0x26>
        return NULL;
   1ea7a:	2300      	movs	r3, #0
   1ea7c:	e007      	b.n	1ea8e <str_dup_maybe+0x36>
    }
    memcpy(s2, str, len + 1);
   1ea7e:	68fb      	ldr	r3, [r7, #12]
   1ea80:	3301      	adds	r3, #1
   1ea82:	461a      	mov	r2, r3
   1ea84:	6879      	ldr	r1, [r7, #4]
   1ea86:	68b8      	ldr	r0, [r7, #8]
   1ea88:	f7ff fd52 	bl	1e530 <memcpy>
    return s2;
   1ea8c:	68bb      	ldr	r3, [r7, #8]
}
   1ea8e:	4618      	mov	r0, r3
   1ea90:	3710      	adds	r7, #16
   1ea92:	46bd      	mov	sp, r7
   1ea94:	bd80      	pop	{r7, pc}

0001ea96 <mp_hal_move_cursor_back>:
#define MICROPY_HAL_HAS_VT100 (1)
#endif

// ...and provide the implementation using them
#if MICROPY_HAL_HAS_VT100
STATIC void mp_hal_move_cursor_back(uint pos) {
   1ea96:	b580      	push	{r7, lr}
   1ea98:	b086      	sub	sp, #24
   1ea9a:	af00      	add	r7, sp, #0
   1ea9c:	6078      	str	r0, [r7, #4]
    if (pos <= 4) {
   1ea9e:	687b      	ldr	r3, [r7, #4]
   1eaa0:	2b04      	cmp	r3, #4
   1eaa2:	d804      	bhi.n	1eaae <mp_hal_move_cursor_back+0x18>
        // fast path for most common case of 1 step back
        mp_hal_stdout_tx_strn("\b\b\b\b", pos);
   1eaa4:	6879      	ldr	r1, [r7, #4]
   1eaa6:	4811      	ldr	r0, [pc, #68]	; (1eaec <mp_hal_move_cursor_back+0x56>)
   1eaa8:	f7fe fb3e 	bl	1d128 <mp_hal_stdout_tx_strn>
        if (n > 0) {
            vt100_command[n] = 'D'; // replace null char
            mp_hal_stdout_tx_strn(vt100_command, n + 1);
        }
    }
}
   1eaac:	e019      	b.n	1eae2 <mp_hal_move_cursor_back+0x4c>
        int n = snprintf(&vt100_command[0], sizeof(vt100_command), "\x1b[%u", pos);
   1eaae:	f107 000c 	add.w	r0, r7, #12
   1eab2:	687b      	ldr	r3, [r7, #4]
   1eab4:	4a0e      	ldr	r2, [pc, #56]	; (1eaf0 <mp_hal_move_cursor_back+0x5a>)
   1eab6:	2106      	movs	r1, #6
   1eab8:	f7fe f95a 	bl	1cd70 <snprintf>
   1eabc:	6178      	str	r0, [r7, #20]
        if (n > 0) {
   1eabe:	697b      	ldr	r3, [r7, #20]
   1eac0:	2b00      	cmp	r3, #0
   1eac2:	dd0e      	ble.n	1eae2 <mp_hal_move_cursor_back+0x4c>
            vt100_command[n] = 'D'; // replace null char
   1eac4:	f107 020c 	add.w	r2, r7, #12
   1eac8:	697b      	ldr	r3, [r7, #20]
   1eaca:	4413      	add	r3, r2
   1eacc:	2244      	movs	r2, #68	; 0x44
   1eace:	701a      	strb	r2, [r3, #0]
            mp_hal_stdout_tx_strn(vt100_command, n + 1);
   1ead0:	697b      	ldr	r3, [r7, #20]
   1ead2:	3301      	adds	r3, #1
   1ead4:	461a      	mov	r2, r3
   1ead6:	f107 030c 	add.w	r3, r7, #12
   1eada:	4611      	mov	r1, r2
   1eadc:	4618      	mov	r0, r3
   1eade:	f7fe fb23 	bl	1d128 <mp_hal_stdout_tx_strn>
}
   1eae2:	bf00      	nop
   1eae4:	3718      	adds	r7, #24
   1eae6:	46bd      	mov	sp, r7
   1eae8:	bd80      	pop	{r7, pc}
   1eaea:	bf00      	nop
   1eaec:	00028030 	.word	0x00028030
   1eaf0:	00028038 	.word	0x00028038

0001eaf4 <mp_hal_erase_line_from_cursor>:

STATIC void mp_hal_erase_line_from_cursor(uint n_chars_to_erase) {
   1eaf4:	b580      	push	{r7, lr}
   1eaf6:	b082      	sub	sp, #8
   1eaf8:	af00      	add	r7, sp, #0
   1eafa:	6078      	str	r0, [r7, #4]
    (void)n_chars_to_erase;
    mp_hal_stdout_tx_strn("\x1b[K", 3);
   1eafc:	2103      	movs	r1, #3
   1eafe:	4803      	ldr	r0, [pc, #12]	; (1eb0c <mp_hal_erase_line_from_cursor+0x18>)
   1eb00:	f7fe fb12 	bl	1d128 <mp_hal_stdout_tx_strn>
}
   1eb04:	bf00      	nop
   1eb06:	3708      	adds	r7, #8
   1eb08:	46bd      	mov	sp, r7
   1eb0a:	bd80      	pop	{r7, pc}
   1eb0c:	00028040 	.word	0x00028040

0001eb10 <readline_process_char>:
    const char *prompt;
} readline_t;

STATIC readline_t rl;

int readline_process_char(int c) {
   1eb10:	b580      	push	{r7, lr}
   1eb12:	b08c      	sub	sp, #48	; 0x30
   1eb14:	af00      	add	r7, sp, #0
   1eb16:	6078      	str	r0, [r7, #4]
    size_t last_line_len = rl.line->len;
   1eb18:	4b8c      	ldr	r3, [pc, #560]	; (1ed4c <readline_process_char+0x23c>)
   1eb1a:	681b      	ldr	r3, [r3, #0]
   1eb1c:	685b      	ldr	r3, [r3, #4]
   1eb1e:	617b      	str	r3, [r7, #20]
    int redraw_step_back = 0;
   1eb20:	2300      	movs	r3, #0
   1eb22:	62fb      	str	r3, [r7, #44]	; 0x2c
    bool redraw_from_cursor = false;
   1eb24:	2300      	movs	r3, #0
   1eb26:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    int redraw_step_forward = 0;
   1eb2a:	2300      	movs	r3, #0
   1eb2c:	627b      	str	r3, [r7, #36]	; 0x24
    if (rl.escape_seq == ESEQ_NONE) {
   1eb2e:	4b87      	ldr	r3, [pc, #540]	; (1ed4c <readline_process_char+0x23c>)
   1eb30:	689b      	ldr	r3, [r3, #8]
   1eb32:	2b00      	cmp	r3, #0
   1eb34:	f040 80e1 	bne.w	1ecfa <readline_process_char+0x1ea>
        if (CHAR_CTRL_A <= c && c <= CHAR_CTRL_E && vstr_len(rl.line) == rl.orig_line_len) {
   1eb38:	687b      	ldr	r3, [r7, #4]
   1eb3a:	2b00      	cmp	r3, #0
   1eb3c:	dd0e      	ble.n	1eb5c <readline_process_char+0x4c>
   1eb3e:	687b      	ldr	r3, [r7, #4]
   1eb40:	2b05      	cmp	r3, #5
   1eb42:	dc0b      	bgt.n	1eb5c <readline_process_char+0x4c>
   1eb44:	4b81      	ldr	r3, [pc, #516]	; (1ed4c <readline_process_char+0x23c>)
   1eb46:	681b      	ldr	r3, [r3, #0]
   1eb48:	4618      	mov	r0, r3
   1eb4a:	f7ff ff6d 	bl	1ea28 <vstr_len>
   1eb4e:	4602      	mov	r2, r0
   1eb50:	4b7e      	ldr	r3, [pc, #504]	; (1ed4c <readline_process_char+0x23c>)
   1eb52:	685b      	ldr	r3, [r3, #4]
   1eb54:	429a      	cmp	r2, r3
   1eb56:	d101      	bne.n	1eb5c <readline_process_char+0x4c>
            // control character with empty line
            return c;
   1eb58:	687b      	ldr	r3, [r7, #4]
   1eb5a:	e245      	b.n	1efe8 <readline_process_char+0x4d8>
        } else if (c == CHAR_CTRL_A) {
   1eb5c:	687b      	ldr	r3, [r7, #4]
   1eb5e:	2b01      	cmp	r3, #1
   1eb60:	f000 819e 	beq.w	1eea0 <readline_process_char+0x390>
        #if MICROPY_REPL_EMACS_KEYS
        } else if (c == CHAR_CTRL_B) {
            // CTRL-B with non-empty line is go-back-one-char
            goto left_arrow_key;
        #endif
        } else if (c == CHAR_CTRL_C) {
   1eb64:	687b      	ldr	r3, [r7, #4]
   1eb66:	2b03      	cmp	r3, #3
   1eb68:	d101      	bne.n	1eb6e <readline_process_char+0x5e>
            // CTRL-C with non-empty line is cancel
            return c;
   1eb6a:	687b      	ldr	r3, [r7, #4]
   1eb6c:	e23c      	b.n	1efe8 <readline_process_char+0x4d8>
        #if MICROPY_REPL_EMACS_KEYS
        } else if (c == CHAR_CTRL_D) {
            // CTRL-D with non-empty line is delete-at-cursor
            goto delete_key;
        #endif
        } else if (c == CHAR_CTRL_E) {
   1eb6e:	687b      	ldr	r3, [r7, #4]
   1eb70:	2b05      	cmp	r3, #5
   1eb72:	f000 81aa 	beq.w	1eeca <readline_process_char+0x3ba>
            vstr_cut_out_bytes(rl.line, rl.orig_line_len, rl.cursor_pos - rl.orig_line_len);
            // set redraw parameters
            redraw_step_back = rl.cursor_pos - rl.orig_line_len;
            redraw_from_cursor = true;
        #endif
        } else if (c == '\r') {
   1eb76:	687b      	ldr	r3, [r7, #4]
   1eb78:	2b0d      	cmp	r3, #13
   1eb7a:	d110      	bne.n	1eb9e <readline_process_char+0x8e>
            // newline
            mp_hal_stdout_tx_str("\r\n");
   1eb7c:	4874      	ldr	r0, [pc, #464]	; (1ed50 <readline_process_char+0x240>)
   1eb7e:	f7ff fa49 	bl	1e014 <mp_hal_stdout_tx_str>
            readline_push_history(vstr_null_terminated_str(rl.line) + rl.orig_line_len);
   1eb82:	4b72      	ldr	r3, [pc, #456]	; (1ed4c <readline_process_char+0x23c>)
   1eb84:	681b      	ldr	r3, [r3, #0]
   1eb86:	4618      	mov	r0, r3
   1eb88:	f7e2 fddf 	bl	174a <vstr_null_terminated_str>
   1eb8c:	4602      	mov	r2, r0
   1eb8e:	4b6f      	ldr	r3, [pc, #444]	; (1ed4c <readline_process_char+0x23c>)
   1eb90:	685b      	ldr	r3, [r3, #4]
   1eb92:	4413      	add	r3, r2
   1eb94:	4618      	mov	r0, r3
   1eb96:	f000 fb19 	bl	1f1cc <readline_push_history>
            return 0;
   1eb9a:	2300      	movs	r3, #0
   1eb9c:	e224      	b.n	1efe8 <readline_process_char+0x4d8>
        } else if (c == 27) {
   1eb9e:	687b      	ldr	r3, [r7, #4]
   1eba0:	2b1b      	cmp	r3, #27
   1eba2:	d103      	bne.n	1ebac <readline_process_char+0x9c>
            // escape sequence
            rl.escape_seq = ESEQ_ESC;
   1eba4:	4b69      	ldr	r3, [pc, #420]	; (1ed4c <readline_process_char+0x23c>)
   1eba6:	2201      	movs	r2, #1
   1eba8:	609a      	str	r2, [r3, #8]
   1ebaa:	e1c3      	b.n	1ef34 <readline_process_char+0x424>
        } else if (c == 8 || c == 127) {
   1ebac:	687b      	ldr	r3, [r7, #4]
   1ebae:	2b08      	cmp	r3, #8
   1ebb0:	d002      	beq.n	1ebb8 <readline_process_char+0xa8>
   1ebb2:	687b      	ldr	r3, [r7, #4]
   1ebb4:	2b7f      	cmp	r3, #127	; 0x7f
   1ebb6:	d13a      	bne.n	1ec2e <readline_process_char+0x11e>
            // backspace/delete
            if (rl.cursor_pos > rl.orig_line_len) {
   1ebb8:	4b64      	ldr	r3, [pc, #400]	; (1ed4c <readline_process_char+0x23c>)
   1ebba:	691a      	ldr	r2, [r3, #16]
   1ebbc:	4b63      	ldr	r3, [pc, #396]	; (1ed4c <readline_process_char+0x23c>)
   1ebbe:	685b      	ldr	r3, [r3, #4]
   1ebc0:	429a      	cmp	r2, r3
   1ebc2:	f240 81b7 	bls.w	1ef34 <readline_process_char+0x424>
                // work out how many chars to backspace
                #if MICROPY_REPL_AUTO_INDENT
                int nspace = 0;
   1ebc6:	2300      	movs	r3, #0
   1ebc8:	623b      	str	r3, [r7, #32]
                for (size_t i = rl.orig_line_len; i < rl.cursor_pos; i++) {
   1ebca:	4b60      	ldr	r3, [pc, #384]	; (1ed4c <readline_process_char+0x23c>)
   1ebcc:	685b      	ldr	r3, [r3, #4]
   1ebce:	61fb      	str	r3, [r7, #28]
   1ebd0:	e010      	b.n	1ebf4 <readline_process_char+0xe4>
                    if (rl.line->buf[i] != ' ') {
   1ebd2:	4b5e      	ldr	r3, [pc, #376]	; (1ed4c <readline_process_char+0x23c>)
   1ebd4:	681b      	ldr	r3, [r3, #0]
   1ebd6:	689a      	ldr	r2, [r3, #8]
   1ebd8:	69fb      	ldr	r3, [r7, #28]
   1ebda:	4413      	add	r3, r2
   1ebdc:	781b      	ldrb	r3, [r3, #0]
   1ebde:	2b20      	cmp	r3, #32
   1ebe0:	d002      	beq.n	1ebe8 <readline_process_char+0xd8>
                        nspace = 0;
   1ebe2:	2300      	movs	r3, #0
   1ebe4:	623b      	str	r3, [r7, #32]
                        break;
   1ebe6:	e00a      	b.n	1ebfe <readline_process_char+0xee>
                    }
                    nspace += 1;
   1ebe8:	6a3b      	ldr	r3, [r7, #32]
   1ebea:	3301      	adds	r3, #1
   1ebec:	623b      	str	r3, [r7, #32]
                for (size_t i = rl.orig_line_len; i < rl.cursor_pos; i++) {
   1ebee:	69fb      	ldr	r3, [r7, #28]
   1ebf0:	3301      	adds	r3, #1
   1ebf2:	61fb      	str	r3, [r7, #28]
   1ebf4:	4b55      	ldr	r3, [pc, #340]	; (1ed4c <readline_process_char+0x23c>)
   1ebf6:	691a      	ldr	r2, [r3, #16]
   1ebf8:	69fb      	ldr	r3, [r7, #28]
   1ebfa:	429a      	cmp	r2, r3
   1ebfc:	d8e9      	bhi.n	1ebd2 <readline_process_char+0xc2>
                }
                if (nspace < 4) {
   1ebfe:	6a3b      	ldr	r3, [r7, #32]
   1ec00:	2b03      	cmp	r3, #3
   1ec02:	dc02      	bgt.n	1ec0a <readline_process_char+0xfa>
                    nspace = 1;
   1ec04:	2301      	movs	r3, #1
   1ec06:	623b      	str	r3, [r7, #32]
   1ec08:	e001      	b.n	1ec0e <readline_process_char+0xfe>
                } else {
                    nspace = 4;
   1ec0a:	2304      	movs	r3, #4
   1ec0c:	623b      	str	r3, [r7, #32]
                #else
                int nspace = 1;
                #endif

                // do the backspace
                vstr_cut_out_bytes(rl.line, rl.cursor_pos - nspace, nspace);
   1ec0e:	4b4f      	ldr	r3, [pc, #316]	; (1ed4c <readline_process_char+0x23c>)
   1ec10:	6818      	ldr	r0, [r3, #0]
   1ec12:	4b4e      	ldr	r3, [pc, #312]	; (1ed4c <readline_process_char+0x23c>)
   1ec14:	691a      	ldr	r2, [r3, #16]
   1ec16:	6a3b      	ldr	r3, [r7, #32]
   1ec18:	1ad3      	subs	r3, r2, r3
   1ec1a:	6a3a      	ldr	r2, [r7, #32]
   1ec1c:	4619      	mov	r1, r3
   1ec1e:	f7e2 fe84 	bl	192a <vstr_cut_out_bytes>
                // set redraw parameters
                redraw_step_back = nspace;
   1ec22:	6a3b      	ldr	r3, [r7, #32]
   1ec24:	62fb      	str	r3, [r7, #44]	; 0x2c
                redraw_from_cursor = true;
   1ec26:	2301      	movs	r3, #1
   1ec28:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            if (rl.cursor_pos > rl.orig_line_len) {
   1ec2c:	e182      	b.n	1ef34 <readline_process_char+0x424>
            }
        #if MICROPY_HELPER_REPL
        } else if (c == 9) {
   1ec2e:	687b      	ldr	r3, [r7, #4]
   1ec30:	2b09      	cmp	r3, #9
   1ec32:	d14c      	bne.n	1ecce <readline_process_char+0x1be>
            // tab magic
            const char *compl_str;
            size_t compl_len = mp_repl_autocomplete(rl.line->buf + rl.orig_line_len, rl.cursor_pos - rl.orig_line_len, &mp_plat_print, &compl_str);
   1ec34:	4b45      	ldr	r3, [pc, #276]	; (1ed4c <readline_process_char+0x23c>)
   1ec36:	681b      	ldr	r3, [r3, #0]
   1ec38:	689a      	ldr	r2, [r3, #8]
   1ec3a:	4b44      	ldr	r3, [pc, #272]	; (1ed4c <readline_process_char+0x23c>)
   1ec3c:	685b      	ldr	r3, [r3, #4]
   1ec3e:	18d0      	adds	r0, r2, r3
   1ec40:	4b42      	ldr	r3, [pc, #264]	; (1ed4c <readline_process_char+0x23c>)
   1ec42:	691a      	ldr	r2, [r3, #16]
   1ec44:	4b41      	ldr	r3, [pc, #260]	; (1ed4c <readline_process_char+0x23c>)
   1ec46:	685b      	ldr	r3, [r3, #4]
   1ec48:	1ad1      	subs	r1, r2, r3
   1ec4a:	f107 030c 	add.w	r3, r7, #12
   1ec4e:	4a41      	ldr	r2, [pc, #260]	; (1ed54 <readline_process_char+0x244>)
   1ec50:	f7fd fd32 	bl	1c6b8 <mp_repl_autocomplete>
   1ec54:	6138      	str	r0, [r7, #16]
            if (compl_len == 0) {
   1ec56:	693b      	ldr	r3, [r7, #16]
   1ec58:	2b00      	cmp	r3, #0
   1ec5a:	f000 816b 	beq.w	1ef34 <readline_process_char+0x424>
                // no match
            } else if (compl_len == (size_t)(-1)) {
   1ec5e:	693b      	ldr	r3, [r7, #16]
   1ec60:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   1ec64:	d116      	bne.n	1ec94 <readline_process_char+0x184>
                // many matches
                mp_hal_stdout_tx_str(rl.prompt);
   1ec66:	4b39      	ldr	r3, [pc, #228]	; (1ed4c <readline_process_char+0x23c>)
   1ec68:	699b      	ldr	r3, [r3, #24]
   1ec6a:	4618      	mov	r0, r3
   1ec6c:	f7ff f9d2 	bl	1e014 <mp_hal_stdout_tx_str>
                mp_hal_stdout_tx_strn(rl.line->buf + rl.orig_line_len, rl.cursor_pos - rl.orig_line_len);
   1ec70:	4b36      	ldr	r3, [pc, #216]	; (1ed4c <readline_process_char+0x23c>)
   1ec72:	681b      	ldr	r3, [r3, #0]
   1ec74:	689a      	ldr	r2, [r3, #8]
   1ec76:	4b35      	ldr	r3, [pc, #212]	; (1ed4c <readline_process_char+0x23c>)
   1ec78:	685b      	ldr	r3, [r3, #4]
   1ec7a:	18d0      	adds	r0, r2, r3
   1ec7c:	4b33      	ldr	r3, [pc, #204]	; (1ed4c <readline_process_char+0x23c>)
   1ec7e:	691a      	ldr	r2, [r3, #16]
   1ec80:	4b32      	ldr	r3, [pc, #200]	; (1ed4c <readline_process_char+0x23c>)
   1ec82:	685b      	ldr	r3, [r3, #4]
   1ec84:	1ad3      	subs	r3, r2, r3
   1ec86:	4619      	mov	r1, r3
   1ec88:	f7fe fa4e 	bl	1d128 <mp_hal_stdout_tx_strn>
                redraw_from_cursor = true;
   1ec8c:	2301      	movs	r3, #1
   1ec8e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
   1ec92:	e14f      	b.n	1ef34 <readline_process_char+0x424>
            } else {
                // one match
                for (size_t i = 0; i < compl_len; ++i) {
   1ec94:	2300      	movs	r3, #0
   1ec96:	61bb      	str	r3, [r7, #24]
   1ec98:	e00f      	b.n	1ecba <readline_process_char+0x1aa>
                    vstr_ins_byte(rl.line, rl.cursor_pos + i, *compl_str++);
   1ec9a:	4b2c      	ldr	r3, [pc, #176]	; (1ed4c <readline_process_char+0x23c>)
   1ec9c:	6818      	ldr	r0, [r3, #0]
   1ec9e:	4b2b      	ldr	r3, [pc, #172]	; (1ed4c <readline_process_char+0x23c>)
   1eca0:	691a      	ldr	r2, [r3, #16]
   1eca2:	69bb      	ldr	r3, [r7, #24]
   1eca4:	18d1      	adds	r1, r2, r3
   1eca6:	68fb      	ldr	r3, [r7, #12]
   1eca8:	1c5a      	adds	r2, r3, #1
   1ecaa:	60fa      	str	r2, [r7, #12]
   1ecac:	781b      	ldrb	r3, [r3, #0]
   1ecae:	461a      	mov	r2, r3
   1ecb0:	f7e2 fdeb 	bl	188a <vstr_ins_byte>
                for (size_t i = 0; i < compl_len; ++i) {
   1ecb4:	69bb      	ldr	r3, [r7, #24]
   1ecb6:	3301      	adds	r3, #1
   1ecb8:	61bb      	str	r3, [r7, #24]
   1ecba:	69ba      	ldr	r2, [r7, #24]
   1ecbc:	693b      	ldr	r3, [r7, #16]
   1ecbe:	429a      	cmp	r2, r3
   1ecc0:	d3eb      	bcc.n	1ec9a <readline_process_char+0x18a>
                }
                // set redraw parameters
                redraw_from_cursor = true;
   1ecc2:	2301      	movs	r3, #1
   1ecc4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
                redraw_step_forward = compl_len;
   1ecc8:	693b      	ldr	r3, [r7, #16]
   1ecca:	627b      	str	r3, [r7, #36]	; 0x24
   1eccc:	e132      	b.n	1ef34 <readline_process_char+0x424>
            }
        #endif
        } else if (32 <= c && c <= 126) {
   1ecce:	687b      	ldr	r3, [r7, #4]
   1ecd0:	2b1f      	cmp	r3, #31
   1ecd2:	f340 812f 	ble.w	1ef34 <readline_process_char+0x424>
   1ecd6:	687b      	ldr	r3, [r7, #4]
   1ecd8:	2b7e      	cmp	r3, #126	; 0x7e
   1ecda:	f300 812b 	bgt.w	1ef34 <readline_process_char+0x424>
            // printable character
            vstr_ins_char(rl.line, rl.cursor_pos, c);
   1ecde:	4b1b      	ldr	r3, [pc, #108]	; (1ed4c <readline_process_char+0x23c>)
   1ece0:	6818      	ldr	r0, [r3, #0]
   1ece2:	4b1a      	ldr	r3, [pc, #104]	; (1ed4c <readline_process_char+0x23c>)
   1ece4:	691b      	ldr	r3, [r3, #16]
   1ece6:	687a      	ldr	r2, [r7, #4]
   1ece8:	4619      	mov	r1, r3
   1ecea:	f7e2 fde2 	bl	18b2 <vstr_ins_char>
            // set redraw parameters
            redraw_from_cursor = true;
   1ecee:	2301      	movs	r3, #1
   1ecf0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            redraw_step_forward = 1;
   1ecf4:	2301      	movs	r3, #1
   1ecf6:	627b      	str	r3, [r7, #36]	; 0x24
   1ecf8:	e11c      	b.n	1ef34 <readline_process_char+0x424>
        }
    } else if (rl.escape_seq == ESEQ_ESC) {
   1ecfa:	4b14      	ldr	r3, [pc, #80]	; (1ed4c <readline_process_char+0x23c>)
   1ecfc:	689b      	ldr	r3, [r3, #8]
   1ecfe:	2b01      	cmp	r3, #1
   1ed00:	d110      	bne.n	1ed24 <readline_process_char+0x214>
        switch (c) {
   1ed02:	687b      	ldr	r3, [r7, #4]
   1ed04:	2b4f      	cmp	r3, #79	; 0x4f
   1ed06:	d005      	beq.n	1ed14 <readline_process_char+0x204>
   1ed08:	2b5b      	cmp	r3, #91	; 0x5b
   1ed0a:	d107      	bne.n	1ed1c <readline_process_char+0x20c>
            case '[':
                rl.escape_seq = ESEQ_ESC_BRACKET;
   1ed0c:	4b0f      	ldr	r3, [pc, #60]	; (1ed4c <readline_process_char+0x23c>)
   1ed0e:	2202      	movs	r2, #2
   1ed10:	609a      	str	r2, [r3, #8]
                break;
   1ed12:	e10f      	b.n	1ef34 <readline_process_char+0x424>
            case 'O':
                rl.escape_seq = ESEQ_ESC_O;
   1ed14:	4b0d      	ldr	r3, [pc, #52]	; (1ed4c <readline_process_char+0x23c>)
   1ed16:	2204      	movs	r2, #4
   1ed18:	609a      	str	r2, [r3, #8]
                break;
   1ed1a:	e10b      	b.n	1ef34 <readline_process_char+0x424>
            default:
                DEBUG_printf("(ESC %d)", c);
                rl.escape_seq = ESEQ_NONE;
   1ed1c:	4b0b      	ldr	r3, [pc, #44]	; (1ed4c <readline_process_char+0x23c>)
   1ed1e:	2200      	movs	r2, #0
   1ed20:	609a      	str	r2, [r3, #8]
   1ed22:	e107      	b.n	1ef34 <readline_process_char+0x424>
        }
    } else if (rl.escape_seq == ESEQ_ESC_BRACKET) {
   1ed24:	4b09      	ldr	r3, [pc, #36]	; (1ed4c <readline_process_char+0x23c>)
   1ed26:	689b      	ldr	r3, [r3, #8]
   1ed28:	2b02      	cmp	r3, #2
   1ed2a:	f040 80a9 	bne.w	1ee80 <readline_process_char+0x370>
        if ('0' <= c && c <= '9') {
   1ed2e:	687b      	ldr	r3, [r7, #4]
   1ed30:	2b2f      	cmp	r3, #47	; 0x2f
   1ed32:	dd11      	ble.n	1ed58 <readline_process_char+0x248>
   1ed34:	687b      	ldr	r3, [r7, #4]
   1ed36:	2b39      	cmp	r3, #57	; 0x39
   1ed38:	dc0e      	bgt.n	1ed58 <readline_process_char+0x248>
            rl.escape_seq = ESEQ_ESC_BRACKET_DIGIT;
   1ed3a:	4b04      	ldr	r3, [pc, #16]	; (1ed4c <readline_process_char+0x23c>)
   1ed3c:	2203      	movs	r2, #3
   1ed3e:	609a      	str	r2, [r3, #8]
            rl.escape_seq_buf[0] = c;
   1ed40:	687b      	ldr	r3, [r7, #4]
   1ed42:	b2da      	uxtb	r2, r3
   1ed44:	4b01      	ldr	r3, [pc, #4]	; (1ed4c <readline_process_char+0x23c>)
   1ed46:	751a      	strb	r2, [r3, #20]
   1ed48:	e0f4      	b.n	1ef34 <readline_process_char+0x424>
   1ed4a:	bf00      	nop
   1ed4c:	2000122c 	.word	0x2000122c
   1ed50:	00028044 	.word	0x00028044
   1ed54:	000210cc 	.word	0x000210cc
        } else {
            rl.escape_seq = ESEQ_NONE;
   1ed58:	4b96      	ldr	r3, [pc, #600]	; (1efb4 <readline_process_char+0x4a4>)
   1ed5a:	2200      	movs	r2, #0
   1ed5c:	609a      	str	r2, [r3, #8]
            if (c == 'A') {
   1ed5e:	687b      	ldr	r3, [r7, #4]
   1ed60:	2b41      	cmp	r3, #65	; 0x41
   1ed62:	d135      	bne.n	1edd0 <readline_process_char+0x2c0>
#if MICROPY_REPL_EMACS_KEYS
up_arrow_key:
#endif
                // up arrow
                if (rl.hist_cur + 1 < (int)READLINE_HIST_SIZE && MP_STATE_PORT(readline_hist)[rl.hist_cur + 1] != NULL) {
   1ed64:	4b93      	ldr	r3, [pc, #588]	; (1efb4 <readline_process_char+0x4a4>)
   1ed66:	68db      	ldr	r3, [r3, #12]
   1ed68:	3301      	adds	r3, #1
   1ed6a:	2b07      	cmp	r3, #7
   1ed6c:	f300 80e2 	bgt.w	1ef34 <readline_process_char+0x424>
   1ed70:	4b90      	ldr	r3, [pc, #576]	; (1efb4 <readline_process_char+0x4a4>)
   1ed72:	68db      	ldr	r3, [r3, #12]
   1ed74:	3301      	adds	r3, #1
   1ed76:	4a90      	ldr	r2, [pc, #576]	; (1efb8 <readline_process_char+0x4a8>)
   1ed78:	331a      	adds	r3, #26
   1ed7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1ed7e:	2b00      	cmp	r3, #0
   1ed80:	f000 80d8 	beq.w	1ef34 <readline_process_char+0x424>
                    // increase hist num
                    rl.hist_cur += 1;
   1ed84:	4b8b      	ldr	r3, [pc, #556]	; (1efb4 <readline_process_char+0x4a4>)
   1ed86:	68db      	ldr	r3, [r3, #12]
   1ed88:	3301      	adds	r3, #1
   1ed8a:	4a8a      	ldr	r2, [pc, #552]	; (1efb4 <readline_process_char+0x4a4>)
   1ed8c:	60d3      	str	r3, [r2, #12]
                    // set line to history
                    rl.line->len = rl.orig_line_len;
   1ed8e:	4b89      	ldr	r3, [pc, #548]	; (1efb4 <readline_process_char+0x4a4>)
   1ed90:	681b      	ldr	r3, [r3, #0]
   1ed92:	4a88      	ldr	r2, [pc, #544]	; (1efb4 <readline_process_char+0x4a4>)
   1ed94:	6852      	ldr	r2, [r2, #4]
   1ed96:	605a      	str	r2, [r3, #4]
                    vstr_add_str(rl.line, MP_STATE_PORT(readline_hist)[rl.hist_cur]);
   1ed98:	4b86      	ldr	r3, [pc, #536]	; (1efb4 <readline_process_char+0x4a4>)
   1ed9a:	6818      	ldr	r0, [r3, #0]
   1ed9c:	4b85      	ldr	r3, [pc, #532]	; (1efb4 <readline_process_char+0x4a4>)
   1ed9e:	68db      	ldr	r3, [r3, #12]
   1eda0:	4a85      	ldr	r2, [pc, #532]	; (1efb8 <readline_process_char+0x4a8>)
   1eda2:	331a      	adds	r3, #26
   1eda4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1eda8:	4619      	mov	r1, r3
   1edaa:	f7e2 fd0a 	bl	17c2 <vstr_add_str>
                    // set redraw parameters
                    redraw_step_back = rl.cursor_pos - rl.orig_line_len;
   1edae:	4b81      	ldr	r3, [pc, #516]	; (1efb4 <readline_process_char+0x4a4>)
   1edb0:	691a      	ldr	r2, [r3, #16]
   1edb2:	4b80      	ldr	r3, [pc, #512]	; (1efb4 <readline_process_char+0x4a4>)
   1edb4:	685b      	ldr	r3, [r3, #4]
   1edb6:	1ad3      	subs	r3, r2, r3
   1edb8:	62fb      	str	r3, [r7, #44]	; 0x2c
                    redraw_from_cursor = true;
   1edba:	2301      	movs	r3, #1
   1edbc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
                    redraw_step_forward = rl.line->len - rl.orig_line_len;
   1edc0:	4b7c      	ldr	r3, [pc, #496]	; (1efb4 <readline_process_char+0x4a4>)
   1edc2:	681b      	ldr	r3, [r3, #0]
   1edc4:	685a      	ldr	r2, [r3, #4]
   1edc6:	4b7b      	ldr	r3, [pc, #492]	; (1efb4 <readline_process_char+0x4a4>)
   1edc8:	685b      	ldr	r3, [r3, #4]
   1edca:	1ad3      	subs	r3, r2, r3
   1edcc:	627b      	str	r3, [r7, #36]	; 0x24
   1edce:	e0b1      	b.n	1ef34 <readline_process_char+0x424>
                }
            } else if (c == 'B') {
   1edd0:	687b      	ldr	r3, [r7, #4]
   1edd2:	2b42      	cmp	r3, #66	; 0x42
   1edd4:	d134      	bne.n	1ee40 <readline_process_char+0x330>
#if MICROPY_REPL_EMACS_KEYS
down_arrow_key:
#endif
                // down arrow
                if (rl.hist_cur >= 0) {
   1edd6:	4b77      	ldr	r3, [pc, #476]	; (1efb4 <readline_process_char+0x4a4>)
   1edd8:	68db      	ldr	r3, [r3, #12]
   1edda:	2b00      	cmp	r3, #0
   1eddc:	f2c0 80aa 	blt.w	1ef34 <readline_process_char+0x424>
                    // decrease hist num
                    rl.hist_cur -= 1;
   1ede0:	4b74      	ldr	r3, [pc, #464]	; (1efb4 <readline_process_char+0x4a4>)
   1ede2:	68db      	ldr	r3, [r3, #12]
   1ede4:	3b01      	subs	r3, #1
   1ede6:	4a73      	ldr	r2, [pc, #460]	; (1efb4 <readline_process_char+0x4a4>)
   1ede8:	60d3      	str	r3, [r2, #12]
                    // set line to history
                    vstr_cut_tail_bytes(rl.line, rl.line->len - rl.orig_line_len);
   1edea:	4b72      	ldr	r3, [pc, #456]	; (1efb4 <readline_process_char+0x4a4>)
   1edec:	6818      	ldr	r0, [r3, #0]
   1edee:	4b71      	ldr	r3, [pc, #452]	; (1efb4 <readline_process_char+0x4a4>)
   1edf0:	681b      	ldr	r3, [r3, #0]
   1edf2:	685a      	ldr	r2, [r3, #4]
   1edf4:	4b6f      	ldr	r3, [pc, #444]	; (1efb4 <readline_process_char+0x4a4>)
   1edf6:	685b      	ldr	r3, [r3, #4]
   1edf8:	1ad3      	subs	r3, r2, r3
   1edfa:	4619      	mov	r1, r3
   1edfc:	f7e2 fd7b 	bl	18f6 <vstr_cut_tail_bytes>
                    if (rl.hist_cur >= 0) {
   1ee00:	4b6c      	ldr	r3, [pc, #432]	; (1efb4 <readline_process_char+0x4a4>)
   1ee02:	68db      	ldr	r3, [r3, #12]
   1ee04:	2b00      	cmp	r3, #0
   1ee06:	db0a      	blt.n	1ee1e <readline_process_char+0x30e>
                        vstr_add_str(rl.line, MP_STATE_PORT(readline_hist)[rl.hist_cur]);
   1ee08:	4b6a      	ldr	r3, [pc, #424]	; (1efb4 <readline_process_char+0x4a4>)
   1ee0a:	6818      	ldr	r0, [r3, #0]
   1ee0c:	4b69      	ldr	r3, [pc, #420]	; (1efb4 <readline_process_char+0x4a4>)
   1ee0e:	68db      	ldr	r3, [r3, #12]
   1ee10:	4a69      	ldr	r2, [pc, #420]	; (1efb8 <readline_process_char+0x4a8>)
   1ee12:	331a      	adds	r3, #26
   1ee14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1ee18:	4619      	mov	r1, r3
   1ee1a:	f7e2 fcd2 	bl	17c2 <vstr_add_str>
                    }
                    // set redraw parameters
                    redraw_step_back = rl.cursor_pos - rl.orig_line_len;
   1ee1e:	4b65      	ldr	r3, [pc, #404]	; (1efb4 <readline_process_char+0x4a4>)
   1ee20:	691a      	ldr	r2, [r3, #16]
   1ee22:	4b64      	ldr	r3, [pc, #400]	; (1efb4 <readline_process_char+0x4a4>)
   1ee24:	685b      	ldr	r3, [r3, #4]
   1ee26:	1ad3      	subs	r3, r2, r3
   1ee28:	62fb      	str	r3, [r7, #44]	; 0x2c
                    redraw_from_cursor = true;
   1ee2a:	2301      	movs	r3, #1
   1ee2c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
                    redraw_step_forward = rl.line->len - rl.orig_line_len;
   1ee30:	4b60      	ldr	r3, [pc, #384]	; (1efb4 <readline_process_char+0x4a4>)
   1ee32:	681b      	ldr	r3, [r3, #0]
   1ee34:	685a      	ldr	r2, [r3, #4]
   1ee36:	4b5f      	ldr	r3, [pc, #380]	; (1efb4 <readline_process_char+0x4a4>)
   1ee38:	685b      	ldr	r3, [r3, #4]
   1ee3a:	1ad3      	subs	r3, r2, r3
   1ee3c:	627b      	str	r3, [r7, #36]	; 0x24
   1ee3e:	e079      	b.n	1ef34 <readline_process_char+0x424>
                }
            } else if (c == 'C') {
   1ee40:	687b      	ldr	r3, [r7, #4]
   1ee42:	2b43      	cmp	r3, #67	; 0x43
   1ee44:	d109      	bne.n	1ee5a <readline_process_char+0x34a>
#if MICROPY_REPL_EMACS_KEYS
right_arrow_key:
#endif
                // right arrow
                if (rl.cursor_pos < rl.line->len) {
   1ee46:	4b5b      	ldr	r3, [pc, #364]	; (1efb4 <readline_process_char+0x4a4>)
   1ee48:	691a      	ldr	r2, [r3, #16]
   1ee4a:	4b5a      	ldr	r3, [pc, #360]	; (1efb4 <readline_process_char+0x4a4>)
   1ee4c:	681b      	ldr	r3, [r3, #0]
   1ee4e:	685b      	ldr	r3, [r3, #4]
   1ee50:	429a      	cmp	r2, r3
   1ee52:	d26f      	bcs.n	1ef34 <readline_process_char+0x424>
                    redraw_step_forward = 1;
   1ee54:	2301      	movs	r3, #1
   1ee56:	627b      	str	r3, [r7, #36]	; 0x24
   1ee58:	e06c      	b.n	1ef34 <readline_process_char+0x424>
                }
            } else if (c == 'D') {
   1ee5a:	687b      	ldr	r3, [r7, #4]
   1ee5c:	2b44      	cmp	r3, #68	; 0x44
   1ee5e:	d108      	bne.n	1ee72 <readline_process_char+0x362>
#if MICROPY_REPL_EMACS_KEYS
left_arrow_key:
#endif
                // left arrow
                if (rl.cursor_pos > rl.orig_line_len) {
   1ee60:	4b54      	ldr	r3, [pc, #336]	; (1efb4 <readline_process_char+0x4a4>)
   1ee62:	691a      	ldr	r2, [r3, #16]
   1ee64:	4b53      	ldr	r3, [pc, #332]	; (1efb4 <readline_process_char+0x4a4>)
   1ee66:	685b      	ldr	r3, [r3, #4]
   1ee68:	429a      	cmp	r2, r3
   1ee6a:	d963      	bls.n	1ef34 <readline_process_char+0x424>
                    redraw_step_back = 1;
   1ee6c:	2301      	movs	r3, #1
   1ee6e:	62fb      	str	r3, [r7, #44]	; 0x2c
   1ee70:	e060      	b.n	1ef34 <readline_process_char+0x424>
                }
            } else if (c == 'H') {
   1ee72:	687b      	ldr	r3, [r7, #4]
   1ee74:	2b48      	cmp	r3, #72	; 0x48
   1ee76:	d015      	beq.n	1eea4 <readline_process_char+0x394>
                // home
                goto home_key;
            } else if (c == 'F') {
   1ee78:	687b      	ldr	r3, [r7, #4]
   1ee7a:	2b46      	cmp	r3, #70	; 0x46
   1ee7c:	d15a      	bne.n	1ef34 <readline_process_char+0x424>
                // end
                goto end_key;
   1ee7e:	e027      	b.n	1eed0 <readline_process_char+0x3c0>
            } else {
                DEBUG_printf("(ESC [ %d)", c);
            }
        }
    } else if (rl.escape_seq == ESEQ_ESC_BRACKET_DIGIT) {
   1ee80:	4b4c      	ldr	r3, [pc, #304]	; (1efb4 <readline_process_char+0x4a4>)
   1ee82:	689b      	ldr	r3, [r3, #8]
   1ee84:	2b03      	cmp	r3, #3
   1ee86:	d145      	bne.n	1ef14 <readline_process_char+0x404>
        if (c == '~') {
   1ee88:	687b      	ldr	r3, [r7, #4]
   1ee8a:	2b7e      	cmp	r3, #126	; 0x7e
   1ee8c:	d13e      	bne.n	1ef0c <readline_process_char+0x3fc>
            if (rl.escape_seq_buf[0] == '1' || rl.escape_seq_buf[0] == '7') {
   1ee8e:	4b49      	ldr	r3, [pc, #292]	; (1efb4 <readline_process_char+0x4a4>)
   1ee90:	7d1b      	ldrb	r3, [r3, #20]
   1ee92:	2b31      	cmp	r3, #49	; 0x31
   1ee94:	d009      	beq.n	1eeaa <readline_process_char+0x39a>
   1ee96:	4b47      	ldr	r3, [pc, #284]	; (1efb4 <readline_process_char+0x4a4>)
   1ee98:	7d1b      	ldrb	r3, [r3, #20]
   1ee9a:	2b37      	cmp	r3, #55	; 0x37
   1ee9c:	d10c      	bne.n	1eeb8 <readline_process_char+0x3a8>
   1ee9e:	e004      	b.n	1eeaa <readline_process_char+0x39a>
            goto home_key;
   1eea0:	bf00      	nop
   1eea2:	e002      	b.n	1eeaa <readline_process_char+0x39a>
                goto home_key;
   1eea4:	bf00      	nop
   1eea6:	e000      	b.n	1eeaa <readline_process_char+0x39a>
        }
        rl.escape_seq = ESEQ_NONE;
    } else if (rl.escape_seq == ESEQ_ESC_O) {
        switch (c) {
            case 'H':
                goto home_key;
   1eea8:	bf00      	nop
                redraw_step_back = rl.cursor_pos - rl.orig_line_len;
   1eeaa:	4b42      	ldr	r3, [pc, #264]	; (1efb4 <readline_process_char+0x4a4>)
   1eeac:	691a      	ldr	r2, [r3, #16]
   1eeae:	4b41      	ldr	r3, [pc, #260]	; (1efb4 <readline_process_char+0x4a4>)
   1eeb0:	685b      	ldr	r3, [r3, #4]
   1eeb2:	1ad3      	subs	r3, r2, r3
   1eeb4:	62fb      	str	r3, [r7, #44]	; 0x2c
   1eeb6:	e029      	b.n	1ef0c <readline_process_char+0x3fc>
            } else if (rl.escape_seq_buf[0] == '4' || rl.escape_seq_buf[0] == '8') {
   1eeb8:	4b3e      	ldr	r3, [pc, #248]	; (1efb4 <readline_process_char+0x4a4>)
   1eeba:	7d1b      	ldrb	r3, [r3, #20]
   1eebc:	2b34      	cmp	r3, #52	; 0x34
   1eebe:	d007      	beq.n	1eed0 <readline_process_char+0x3c0>
   1eec0:	4b3c      	ldr	r3, [pc, #240]	; (1efb4 <readline_process_char+0x4a4>)
   1eec2:	7d1b      	ldrb	r3, [r3, #20]
   1eec4:	2b38      	cmp	r3, #56	; 0x38
   1eec6:	d10b      	bne.n	1eee0 <readline_process_char+0x3d0>
   1eec8:	e002      	b.n	1eed0 <readline_process_char+0x3c0>
            goto end_key;
   1eeca:	bf00      	nop
   1eecc:	e000      	b.n	1eed0 <readline_process_char+0x3c0>
            case 'F':
                goto end_key;
   1eece:	bf00      	nop
                redraw_step_forward = rl.line->len - rl.cursor_pos;
   1eed0:	4b38      	ldr	r3, [pc, #224]	; (1efb4 <readline_process_char+0x4a4>)
   1eed2:	681b      	ldr	r3, [r3, #0]
   1eed4:	685a      	ldr	r2, [r3, #4]
   1eed6:	4b37      	ldr	r3, [pc, #220]	; (1efb4 <readline_process_char+0x4a4>)
   1eed8:	691b      	ldr	r3, [r3, #16]
   1eeda:	1ad3      	subs	r3, r2, r3
   1eedc:	627b      	str	r3, [r7, #36]	; 0x24
   1eede:	e015      	b.n	1ef0c <readline_process_char+0x3fc>
            } else if (rl.escape_seq_buf[0] == '3') {
   1eee0:	4b34      	ldr	r3, [pc, #208]	; (1efb4 <readline_process_char+0x4a4>)
   1eee2:	7d1b      	ldrb	r3, [r3, #20]
   1eee4:	2b33      	cmp	r3, #51	; 0x33
   1eee6:	d111      	bne.n	1ef0c <readline_process_char+0x3fc>
                if (rl.cursor_pos < rl.line->len) {
   1eee8:	4b32      	ldr	r3, [pc, #200]	; (1efb4 <readline_process_char+0x4a4>)
   1eeea:	691a      	ldr	r2, [r3, #16]
   1eeec:	4b31      	ldr	r3, [pc, #196]	; (1efb4 <readline_process_char+0x4a4>)
   1eeee:	681b      	ldr	r3, [r3, #0]
   1eef0:	685b      	ldr	r3, [r3, #4]
   1eef2:	429a      	cmp	r2, r3
   1eef4:	d20a      	bcs.n	1ef0c <readline_process_char+0x3fc>
                    vstr_cut_out_bytes(rl.line, rl.cursor_pos, 1);
   1eef6:	4b2f      	ldr	r3, [pc, #188]	; (1efb4 <readline_process_char+0x4a4>)
   1eef8:	6818      	ldr	r0, [r3, #0]
   1eefa:	4b2e      	ldr	r3, [pc, #184]	; (1efb4 <readline_process_char+0x4a4>)
   1eefc:	691b      	ldr	r3, [r3, #16]
   1eefe:	2201      	movs	r2, #1
   1ef00:	4619      	mov	r1, r3
   1ef02:	f7e2 fd12 	bl	192a <vstr_cut_out_bytes>
                    redraw_from_cursor = true;
   1ef06:	2301      	movs	r3, #1
   1ef08:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        rl.escape_seq = ESEQ_NONE;
   1ef0c:	4b29      	ldr	r3, [pc, #164]	; (1efb4 <readline_process_char+0x4a4>)
   1ef0e:	2200      	movs	r2, #0
   1ef10:	609a      	str	r2, [r3, #8]
   1ef12:	e00f      	b.n	1ef34 <readline_process_char+0x424>
    } else if (rl.escape_seq == ESEQ_ESC_O) {
   1ef14:	4b27      	ldr	r3, [pc, #156]	; (1efb4 <readline_process_char+0x4a4>)
   1ef16:	689b      	ldr	r3, [r3, #8]
   1ef18:	2b04      	cmp	r3, #4
   1ef1a:	d108      	bne.n	1ef2e <readline_process_char+0x41e>
        switch (c) {
   1ef1c:	687b      	ldr	r3, [r7, #4]
   1ef1e:	2b46      	cmp	r3, #70	; 0x46
   1ef20:	d0d5      	beq.n	1eece <readline_process_char+0x3be>
   1ef22:	2b48      	cmp	r3, #72	; 0x48
   1ef24:	d0c0      	beq.n	1eea8 <readline_process_char+0x398>
            default:
                DEBUG_printf("(ESC O %d)", c);
                rl.escape_seq = ESEQ_NONE;
   1ef26:	4b23      	ldr	r3, [pc, #140]	; (1efb4 <readline_process_char+0x4a4>)
   1ef28:	2200      	movs	r2, #0
   1ef2a:	609a      	str	r2, [r3, #8]
   1ef2c:	e002      	b.n	1ef34 <readline_process_char+0x424>
        }
    } else {
        rl.escape_seq = ESEQ_NONE;
   1ef2e:	4b21      	ldr	r3, [pc, #132]	; (1efb4 <readline_process_char+0x4a4>)
   1ef30:	2200      	movs	r2, #0
   1ef32:	609a      	str	r2, [r3, #8]
    }

    // redraw command prompt, efficiently
    if (redraw_step_back > 0) {
   1ef34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1ef36:	2b00      	cmp	r3, #0
   1ef38:	dd09      	ble.n	1ef4e <readline_process_char+0x43e>
        mp_hal_move_cursor_back(redraw_step_back);
   1ef3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1ef3c:	4618      	mov	r0, r3
   1ef3e:	f7ff fdaa 	bl	1ea96 <mp_hal_move_cursor_back>
        rl.cursor_pos -= redraw_step_back;
   1ef42:	4b1c      	ldr	r3, [pc, #112]	; (1efb4 <readline_process_char+0x4a4>)
   1ef44:	691a      	ldr	r2, [r3, #16]
   1ef46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1ef48:	1ad3      	subs	r3, r2, r3
   1ef4a:	4a1a      	ldr	r2, [pc, #104]	; (1efb4 <readline_process_char+0x4a4>)
   1ef4c:	6113      	str	r3, [r2, #16]
    }
    if (redraw_from_cursor) {
   1ef4e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
   1ef52:	2b00      	cmp	r3, #0
   1ef54:	d032      	beq.n	1efbc <readline_process_char+0x4ac>
        if (rl.line->len < last_line_len) {
   1ef56:	4b17      	ldr	r3, [pc, #92]	; (1efb4 <readline_process_char+0x4a4>)
   1ef58:	681b      	ldr	r3, [r3, #0]
   1ef5a:	685a      	ldr	r2, [r3, #4]
   1ef5c:	697b      	ldr	r3, [r7, #20]
   1ef5e:	429a      	cmp	r2, r3
   1ef60:	d206      	bcs.n	1ef70 <readline_process_char+0x460>
            // erase old chars
            mp_hal_erase_line_from_cursor(last_line_len - rl.cursor_pos);
   1ef62:	4b14      	ldr	r3, [pc, #80]	; (1efb4 <readline_process_char+0x4a4>)
   1ef64:	691b      	ldr	r3, [r3, #16]
   1ef66:	697a      	ldr	r2, [r7, #20]
   1ef68:	1ad3      	subs	r3, r2, r3
   1ef6a:	4618      	mov	r0, r3
   1ef6c:	f7ff fdc2 	bl	1eaf4 <mp_hal_erase_line_from_cursor>
        }
        // draw new chars
        mp_hal_stdout_tx_strn(rl.line->buf + rl.cursor_pos, rl.line->len - rl.cursor_pos);
   1ef70:	4b10      	ldr	r3, [pc, #64]	; (1efb4 <readline_process_char+0x4a4>)
   1ef72:	681b      	ldr	r3, [r3, #0]
   1ef74:	689a      	ldr	r2, [r3, #8]
   1ef76:	4b0f      	ldr	r3, [pc, #60]	; (1efb4 <readline_process_char+0x4a4>)
   1ef78:	691b      	ldr	r3, [r3, #16]
   1ef7a:	18d0      	adds	r0, r2, r3
   1ef7c:	4b0d      	ldr	r3, [pc, #52]	; (1efb4 <readline_process_char+0x4a4>)
   1ef7e:	681b      	ldr	r3, [r3, #0]
   1ef80:	685a      	ldr	r2, [r3, #4]
   1ef82:	4b0c      	ldr	r3, [pc, #48]	; (1efb4 <readline_process_char+0x4a4>)
   1ef84:	691b      	ldr	r3, [r3, #16]
   1ef86:	1ad3      	subs	r3, r2, r3
   1ef88:	4619      	mov	r1, r3
   1ef8a:	f7fe f8cd 	bl	1d128 <mp_hal_stdout_tx_strn>
        // move cursor forward if needed (already moved forward by length of line, so move it back)
        mp_hal_move_cursor_back(rl.line->len - (rl.cursor_pos + redraw_step_forward));
   1ef8e:	4b09      	ldr	r3, [pc, #36]	; (1efb4 <readline_process_char+0x4a4>)
   1ef90:	681b      	ldr	r3, [r3, #0]
   1ef92:	685a      	ldr	r2, [r3, #4]
   1ef94:	4b07      	ldr	r3, [pc, #28]	; (1efb4 <readline_process_char+0x4a4>)
   1ef96:	6919      	ldr	r1, [r3, #16]
   1ef98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1ef9a:	440b      	add	r3, r1
   1ef9c:	1ad3      	subs	r3, r2, r3
   1ef9e:	4618      	mov	r0, r3
   1efa0:	f7ff fd79 	bl	1ea96 <mp_hal_move_cursor_back>
        rl.cursor_pos += redraw_step_forward;
   1efa4:	4b03      	ldr	r3, [pc, #12]	; (1efb4 <readline_process_char+0x4a4>)
   1efa6:	691a      	ldr	r2, [r3, #16]
   1efa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1efaa:	4413      	add	r3, r2
   1efac:	4a01      	ldr	r2, [pc, #4]	; (1efb4 <readline_process_char+0x4a4>)
   1efae:	6113      	str	r3, [r2, #16]
   1efb0:	e018      	b.n	1efe4 <readline_process_char+0x4d4>
   1efb2:	bf00      	nop
   1efb4:	2000122c 	.word	0x2000122c
   1efb8:	20001248 	.word	0x20001248
    } else if (redraw_step_forward > 0) {
   1efbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1efbe:	2b00      	cmp	r3, #0
   1efc0:	dd10      	ble.n	1efe4 <readline_process_char+0x4d4>
        // draw over old chars to move cursor forwards
        mp_hal_stdout_tx_strn(rl.line->buf + rl.cursor_pos, redraw_step_forward);
   1efc2:	4b0b      	ldr	r3, [pc, #44]	; (1eff0 <readline_process_char+0x4e0>)
   1efc4:	681b      	ldr	r3, [r3, #0]
   1efc6:	689a      	ldr	r2, [r3, #8]
   1efc8:	4b09      	ldr	r3, [pc, #36]	; (1eff0 <readline_process_char+0x4e0>)
   1efca:	691b      	ldr	r3, [r3, #16]
   1efcc:	4413      	add	r3, r2
   1efce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   1efd0:	4611      	mov	r1, r2
   1efd2:	4618      	mov	r0, r3
   1efd4:	f7fe f8a8 	bl	1d128 <mp_hal_stdout_tx_strn>
        rl.cursor_pos += redraw_step_forward;
   1efd8:	4b05      	ldr	r3, [pc, #20]	; (1eff0 <readline_process_char+0x4e0>)
   1efda:	691a      	ldr	r2, [r3, #16]
   1efdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1efde:	4413      	add	r3, r2
   1efe0:	4a03      	ldr	r2, [pc, #12]	; (1eff0 <readline_process_char+0x4e0>)
   1efe2:	6113      	str	r3, [r2, #16]
    }

    return -1;
   1efe4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
   1efe8:	4618      	mov	r0, r3
   1efea:	3730      	adds	r7, #48	; 0x30
   1efec:	46bd      	mov	sp, r7
   1efee:	bd80      	pop	{r7, pc}
   1eff0:	2000122c 	.word	0x2000122c

0001eff4 <readline_auto_indent>:

#if MICROPY_REPL_AUTO_INDENT
STATIC void readline_auto_indent(void) {
   1eff4:	b580      	push	{r7, lr}
   1eff6:	b086      	sub	sp, #24
   1eff8:	af00      	add	r7, sp, #0
    vstr_t *line = rl.line;
   1effa:	4b44      	ldr	r3, [pc, #272]	; (1f10c <readline_auto_indent+0x118>)
   1effc:	681b      	ldr	r3, [r3, #0]
   1effe:	607b      	str	r3, [r7, #4]
    if (line->len > 1 && line->buf[line->len - 1] == '\n') {
   1f000:	687b      	ldr	r3, [r7, #4]
   1f002:	685b      	ldr	r3, [r3, #4]
   1f004:	2b01      	cmp	r3, #1
   1f006:	d97d      	bls.n	1f104 <readline_auto_indent+0x110>
   1f008:	687b      	ldr	r3, [r7, #4]
   1f00a:	689a      	ldr	r2, [r3, #8]
   1f00c:	687b      	ldr	r3, [r7, #4]
   1f00e:	685b      	ldr	r3, [r3, #4]
   1f010:	3b01      	subs	r3, #1
   1f012:	4413      	add	r3, r2
   1f014:	781b      	ldrb	r3, [r3, #0]
   1f016:	2b0a      	cmp	r3, #10
   1f018:	d174      	bne.n	1f104 <readline_auto_indent+0x110>
        int i;
        for (i = line->len - 1; i > 0; i--) {
   1f01a:	687b      	ldr	r3, [r7, #4]
   1f01c:	685b      	ldr	r3, [r3, #4]
   1f01e:	3b01      	subs	r3, #1
   1f020:	617b      	str	r3, [r7, #20]
   1f022:	e00a      	b.n	1f03a <readline_auto_indent+0x46>
            if (line->buf[i - 1] == '\n') {
   1f024:	687b      	ldr	r3, [r7, #4]
   1f026:	689a      	ldr	r2, [r3, #8]
   1f028:	697b      	ldr	r3, [r7, #20]
   1f02a:	3b01      	subs	r3, #1
   1f02c:	4413      	add	r3, r2
   1f02e:	781b      	ldrb	r3, [r3, #0]
   1f030:	2b0a      	cmp	r3, #10
   1f032:	d006      	beq.n	1f042 <readline_auto_indent+0x4e>
        for (i = line->len - 1; i > 0; i--) {
   1f034:	697b      	ldr	r3, [r7, #20]
   1f036:	3b01      	subs	r3, #1
   1f038:	617b      	str	r3, [r7, #20]
   1f03a:	697b      	ldr	r3, [r7, #20]
   1f03c:	2b00      	cmp	r3, #0
   1f03e:	dcf1      	bgt.n	1f024 <readline_auto_indent+0x30>
   1f040:	e000      	b.n	1f044 <readline_auto_indent+0x50>
                break;
   1f042:	bf00      	nop
            }
        }
        size_t j;
        for (j = i; j < line->len; j++) {
   1f044:	697b      	ldr	r3, [r7, #20]
   1f046:	613b      	str	r3, [r7, #16]
   1f048:	e009      	b.n	1f05e <readline_auto_indent+0x6a>
            if (line->buf[j] != ' ') {
   1f04a:	687b      	ldr	r3, [r7, #4]
   1f04c:	689a      	ldr	r2, [r3, #8]
   1f04e:	693b      	ldr	r3, [r7, #16]
   1f050:	4413      	add	r3, r2
   1f052:	781b      	ldrb	r3, [r3, #0]
   1f054:	2b20      	cmp	r3, #32
   1f056:	d108      	bne.n	1f06a <readline_auto_indent+0x76>
        for (j = i; j < line->len; j++) {
   1f058:	693b      	ldr	r3, [r7, #16]
   1f05a:	3301      	adds	r3, #1
   1f05c:	613b      	str	r3, [r7, #16]
   1f05e:	687b      	ldr	r3, [r7, #4]
   1f060:	685a      	ldr	r2, [r3, #4]
   1f062:	693b      	ldr	r3, [r7, #16]
   1f064:	429a      	cmp	r2, r3
   1f066:	d8f0      	bhi.n	1f04a <readline_auto_indent+0x56>
   1f068:	e000      	b.n	1f06c <readline_auto_indent+0x78>
                break;
   1f06a:	bf00      	nop
            }
        }
        // i=start of line; j=first non-space
        if (i > 0 && j + 1 == line->len) {
   1f06c:	697b      	ldr	r3, [r7, #20]
   1f06e:	2b00      	cmp	r3, #0
   1f070:	dd21      	ble.n	1f0b6 <readline_auto_indent+0xc2>
   1f072:	693b      	ldr	r3, [r7, #16]
   1f074:	1c5a      	adds	r2, r3, #1
   1f076:	687b      	ldr	r3, [r7, #4]
   1f078:	685b      	ldr	r3, [r3, #4]
   1f07a:	429a      	cmp	r2, r3
   1f07c:	d11b      	bne.n	1f0b6 <readline_auto_indent+0xc2>
            // previous line is not first line and is all spaces
            for (size_t k = i - 1; k > 0; --k) {
   1f07e:	697b      	ldr	r3, [r7, #20]
   1f080:	3b01      	subs	r3, #1
   1f082:	60fb      	str	r3, [r7, #12]
   1f084:	e012      	b.n	1f0ac <readline_auto_indent+0xb8>
                if (line->buf[k - 1] == '\n') {
   1f086:	687b      	ldr	r3, [r7, #4]
   1f088:	689a      	ldr	r2, [r3, #8]
   1f08a:	68fb      	ldr	r3, [r7, #12]
   1f08c:	3b01      	subs	r3, #1
   1f08e:	4413      	add	r3, r2
   1f090:	781b      	ldrb	r3, [r3, #0]
   1f092:	2b0a      	cmp	r3, #10
   1f094:	d035      	beq.n	1f102 <readline_auto_indent+0x10e>
                    // don't auto-indent if last 2 lines are all spaces
                    return;
                } else if (line->buf[k - 1] != ' ') {
   1f096:	687b      	ldr	r3, [r7, #4]
   1f098:	689a      	ldr	r2, [r3, #8]
   1f09a:	68fb      	ldr	r3, [r7, #12]
   1f09c:	3b01      	subs	r3, #1
   1f09e:	4413      	add	r3, r2
   1f0a0:	781b      	ldrb	r3, [r3, #0]
   1f0a2:	2b20      	cmp	r3, #32
   1f0a4:	d106      	bne.n	1f0b4 <readline_auto_indent+0xc0>
            for (size_t k = i - 1; k > 0; --k) {
   1f0a6:	68fb      	ldr	r3, [r7, #12]
   1f0a8:	3b01      	subs	r3, #1
   1f0aa:	60fb      	str	r3, [r7, #12]
   1f0ac:	68fb      	ldr	r3, [r7, #12]
   1f0ae:	2b00      	cmp	r3, #0
   1f0b0:	d1e9      	bne.n	1f086 <readline_auto_indent+0x92>
   1f0b2:	e000      	b.n	1f0b6 <readline_auto_indent+0xc2>
                    // 2nd previous line is not all spaces
                    break;
   1f0b4:	bf00      	nop
                }
            }
        }
        int n = (j - i) / 4;
   1f0b6:	697b      	ldr	r3, [r7, #20]
   1f0b8:	693a      	ldr	r2, [r7, #16]
   1f0ba:	1ad3      	subs	r3, r2, r3
   1f0bc:	089b      	lsrs	r3, r3, #2
   1f0be:	60bb      	str	r3, [r7, #8]
        if (line->buf[line->len - 2] == ':') {
   1f0c0:	687b      	ldr	r3, [r7, #4]
   1f0c2:	689a      	ldr	r2, [r3, #8]
   1f0c4:	687b      	ldr	r3, [r7, #4]
   1f0c6:	685b      	ldr	r3, [r3, #4]
   1f0c8:	3b02      	subs	r3, #2
   1f0ca:	4413      	add	r3, r2
   1f0cc:	781b      	ldrb	r3, [r3, #0]
   1f0ce:	2b3a      	cmp	r3, #58	; 0x3a
   1f0d0:	d111      	bne.n	1f0f6 <readline_auto_indent+0x102>
            n += 1;
   1f0d2:	68bb      	ldr	r3, [r7, #8]
   1f0d4:	3301      	adds	r3, #1
   1f0d6:	60bb      	str	r3, [r7, #8]
        }
        while (n-- > 0) {
   1f0d8:	e00d      	b.n	1f0f6 <readline_auto_indent+0x102>
            vstr_add_strn(line, "    ", 4);
   1f0da:	2204      	movs	r2, #4
   1f0dc:	490c      	ldr	r1, [pc, #48]	; (1f110 <readline_auto_indent+0x11c>)
   1f0de:	6878      	ldr	r0, [r7, #4]
   1f0e0:	f7e2 fb81 	bl	17e6 <vstr_add_strn>
            mp_hal_stdout_tx_strn("    ", 4);
   1f0e4:	2104      	movs	r1, #4
   1f0e6:	480a      	ldr	r0, [pc, #40]	; (1f110 <readline_auto_indent+0x11c>)
   1f0e8:	f7fe f81e 	bl	1d128 <mp_hal_stdout_tx_strn>
            rl.cursor_pos += 4;
   1f0ec:	4b07      	ldr	r3, [pc, #28]	; (1f10c <readline_auto_indent+0x118>)
   1f0ee:	691b      	ldr	r3, [r3, #16]
   1f0f0:	3304      	adds	r3, #4
   1f0f2:	4a06      	ldr	r2, [pc, #24]	; (1f10c <readline_auto_indent+0x118>)
   1f0f4:	6113      	str	r3, [r2, #16]
        while (n-- > 0) {
   1f0f6:	68bb      	ldr	r3, [r7, #8]
   1f0f8:	1e5a      	subs	r2, r3, #1
   1f0fa:	60ba      	str	r2, [r7, #8]
   1f0fc:	2b00      	cmp	r3, #0
   1f0fe:	dcec      	bgt.n	1f0da <readline_auto_indent+0xe6>
   1f100:	e000      	b.n	1f104 <readline_auto_indent+0x110>
                    return;
   1f102:	bf00      	nop
        }
    }
}
   1f104:	3718      	adds	r7, #24
   1f106:	46bd      	mov	sp, r7
   1f108:	bd80      	pop	{r7, pc}
   1f10a:	bf00      	nop
   1f10c:	2000122c 	.word	0x2000122c
   1f110:	00028048 	.word	0x00028048

0001f114 <readline_note_newline>:
#endif

void readline_note_newline(const char *prompt) {
   1f114:	b580      	push	{r7, lr}
   1f116:	b082      	sub	sp, #8
   1f118:	af00      	add	r7, sp, #0
   1f11a:	6078      	str	r0, [r7, #4]
    rl.orig_line_len = rl.line->len;
   1f11c:	4b0a      	ldr	r3, [pc, #40]	; (1f148 <readline_note_newline+0x34>)
   1f11e:	681b      	ldr	r3, [r3, #0]
   1f120:	685b      	ldr	r3, [r3, #4]
   1f122:	4a09      	ldr	r2, [pc, #36]	; (1f148 <readline_note_newline+0x34>)
   1f124:	6053      	str	r3, [r2, #4]
    rl.cursor_pos = rl.orig_line_len;
   1f126:	4b08      	ldr	r3, [pc, #32]	; (1f148 <readline_note_newline+0x34>)
   1f128:	685b      	ldr	r3, [r3, #4]
   1f12a:	4a07      	ldr	r2, [pc, #28]	; (1f148 <readline_note_newline+0x34>)
   1f12c:	6113      	str	r3, [r2, #16]
    rl.prompt = prompt;
   1f12e:	4a06      	ldr	r2, [pc, #24]	; (1f148 <readline_note_newline+0x34>)
   1f130:	687b      	ldr	r3, [r7, #4]
   1f132:	6193      	str	r3, [r2, #24]
    mp_hal_stdout_tx_str(prompt);
   1f134:	6878      	ldr	r0, [r7, #4]
   1f136:	f7fe ff6d 	bl	1e014 <mp_hal_stdout_tx_str>
    #if MICROPY_REPL_AUTO_INDENT
    readline_auto_indent();
   1f13a:	f7ff ff5b 	bl	1eff4 <readline_auto_indent>
    #endif
}
   1f13e:	bf00      	nop
   1f140:	3708      	adds	r7, #8
   1f142:	46bd      	mov	sp, r7
   1f144:	bd80      	pop	{r7, pc}
   1f146:	bf00      	nop
   1f148:	2000122c 	.word	0x2000122c

0001f14c <readline_init>:

void readline_init(vstr_t *line, const char *prompt) {
   1f14c:	b580      	push	{r7, lr}
   1f14e:	b082      	sub	sp, #8
   1f150:	af00      	add	r7, sp, #0
   1f152:	6078      	str	r0, [r7, #4]
   1f154:	6039      	str	r1, [r7, #0]
    rl.line = line;
   1f156:	4a10      	ldr	r2, [pc, #64]	; (1f198 <readline_init+0x4c>)
   1f158:	687b      	ldr	r3, [r7, #4]
   1f15a:	6013      	str	r3, [r2, #0]
    rl.orig_line_len = line->len;
   1f15c:	687b      	ldr	r3, [r7, #4]
   1f15e:	685b      	ldr	r3, [r3, #4]
   1f160:	4a0d      	ldr	r2, [pc, #52]	; (1f198 <readline_init+0x4c>)
   1f162:	6053      	str	r3, [r2, #4]
    rl.escape_seq = ESEQ_NONE;
   1f164:	4b0c      	ldr	r3, [pc, #48]	; (1f198 <readline_init+0x4c>)
   1f166:	2200      	movs	r2, #0
   1f168:	609a      	str	r2, [r3, #8]
    rl.escape_seq_buf[0] = 0;
   1f16a:	4b0b      	ldr	r3, [pc, #44]	; (1f198 <readline_init+0x4c>)
   1f16c:	2200      	movs	r2, #0
   1f16e:	751a      	strb	r2, [r3, #20]
    rl.hist_cur = -1;
   1f170:	4b09      	ldr	r3, [pc, #36]	; (1f198 <readline_init+0x4c>)
   1f172:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1f176:	60da      	str	r2, [r3, #12]
    rl.cursor_pos = rl.orig_line_len;
   1f178:	4b07      	ldr	r3, [pc, #28]	; (1f198 <readline_init+0x4c>)
   1f17a:	685b      	ldr	r3, [r3, #4]
   1f17c:	4a06      	ldr	r2, [pc, #24]	; (1f198 <readline_init+0x4c>)
   1f17e:	6113      	str	r3, [r2, #16]
    rl.prompt = prompt;
   1f180:	4a05      	ldr	r2, [pc, #20]	; (1f198 <readline_init+0x4c>)
   1f182:	683b      	ldr	r3, [r7, #0]
   1f184:	6193      	str	r3, [r2, #24]
    mp_hal_stdout_tx_str(prompt);
   1f186:	6838      	ldr	r0, [r7, #0]
   1f188:	f7fe ff44 	bl	1e014 <mp_hal_stdout_tx_str>
    #if MICROPY_REPL_AUTO_INDENT
    readline_auto_indent();
   1f18c:	f7ff ff32 	bl	1eff4 <readline_auto_indent>
    #endif
}
   1f190:	bf00      	nop
   1f192:	3708      	adds	r7, #8
   1f194:	46bd      	mov	sp, r7
   1f196:	bd80      	pop	{r7, pc}
   1f198:	2000122c 	.word	0x2000122c

0001f19c <readline>:

int readline(vstr_t *line, const char *prompt) {
   1f19c:	b580      	push	{r7, lr}
   1f19e:	b084      	sub	sp, #16
   1f1a0:	af00      	add	r7, sp, #0
   1f1a2:	6078      	str	r0, [r7, #4]
   1f1a4:	6039      	str	r1, [r7, #0]
    readline_init(line, prompt);
   1f1a6:	6839      	ldr	r1, [r7, #0]
   1f1a8:	6878      	ldr	r0, [r7, #4]
   1f1aa:	f7ff ffcf 	bl	1f14c <readline_init>
    for (;;) {
        int c = mp_hal_stdin_rx_chr();
   1f1ae:	f7fd ffa3 	bl	1d0f8 <mp_hal_stdin_rx_chr>
   1f1b2:	60f8      	str	r0, [r7, #12]
        int r = readline_process_char(c);
   1f1b4:	68f8      	ldr	r0, [r7, #12]
   1f1b6:	f7ff fcab 	bl	1eb10 <readline_process_char>
   1f1ba:	60b8      	str	r0, [r7, #8]
        if (r >= 0) {
   1f1bc:	68bb      	ldr	r3, [r7, #8]
   1f1be:	2b00      	cmp	r3, #0
   1f1c0:	dbf5      	blt.n	1f1ae <readline+0x12>
            return r;
   1f1c2:	68bb      	ldr	r3, [r7, #8]
        }
    }
}
   1f1c4:	4618      	mov	r0, r3
   1f1c6:	3710      	adds	r7, #16
   1f1c8:	46bd      	mov	sp, r7
   1f1ca:	bd80      	pop	{r7, pc}

0001f1cc <readline_push_history>:

void readline_push_history(const char *line) {
   1f1cc:	b580      	push	{r7, lr}
   1f1ce:	b084      	sub	sp, #16
   1f1d0:	af00      	add	r7, sp, #0
   1f1d2:	6078      	str	r0, [r7, #4]
    if (line[0] != '\0'
   1f1d4:	687b      	ldr	r3, [r7, #4]
   1f1d6:	781b      	ldrb	r3, [r3, #0]
   1f1d8:	2b00      	cmp	r3, #0
   1f1da:	d02a      	beq.n	1f232 <readline_push_history+0x66>
        && (MP_STATE_PORT(readline_hist)[0] == NULL
   1f1dc:	4b17      	ldr	r3, [pc, #92]	; (1f23c <readline_push_history+0x70>)
   1f1de:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   1f1e0:	2b00      	cmp	r3, #0
   1f1e2:	d008      	beq.n	1f1f6 <readline_push_history+0x2a>
            || strcmp(MP_STATE_PORT(readline_hist)[0], line) != 0)) {
   1f1e4:	4b15      	ldr	r3, [pc, #84]	; (1f23c <readline_push_history+0x70>)
   1f1e6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   1f1e8:	6879      	ldr	r1, [r7, #4]
   1f1ea:	4618      	mov	r0, r3
   1f1ec:	f7ff faf0 	bl	1e7d0 <strcmp>
   1f1f0:	4603      	mov	r3, r0
   1f1f2:	2b00      	cmp	r3, #0
   1f1f4:	d01d      	beq.n	1f232 <readline_push_history+0x66>
        // a line which is not empty and different from the last one
        // so update the history
        char *most_recent_hist = str_dup_maybe(line);
   1f1f6:	6878      	ldr	r0, [r7, #4]
   1f1f8:	f7ff fc2e 	bl	1ea58 <str_dup_maybe>
   1f1fc:	60b8      	str	r0, [r7, #8]
        if (most_recent_hist != NULL) {
   1f1fe:	68bb      	ldr	r3, [r7, #8]
   1f200:	2b00      	cmp	r3, #0
   1f202:	d016      	beq.n	1f232 <readline_push_history+0x66>
            for (int i = READLINE_HIST_SIZE - 1; i > 0; i--) {
   1f204:	2307      	movs	r3, #7
   1f206:	60fb      	str	r3, [r7, #12]
   1f208:	e00d      	b.n	1f226 <readline_push_history+0x5a>
                MP_STATE_PORT(readline_hist)[i] = MP_STATE_PORT(readline_hist)[i - 1];
   1f20a:	68fb      	ldr	r3, [r7, #12]
   1f20c:	3b01      	subs	r3, #1
   1f20e:	4a0b      	ldr	r2, [pc, #44]	; (1f23c <readline_push_history+0x70>)
   1f210:	331a      	adds	r3, #26
   1f212:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
   1f216:	4909      	ldr	r1, [pc, #36]	; (1f23c <readline_push_history+0x70>)
   1f218:	68fb      	ldr	r3, [r7, #12]
   1f21a:	331a      	adds	r3, #26
   1f21c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            for (int i = READLINE_HIST_SIZE - 1; i > 0; i--) {
   1f220:	68fb      	ldr	r3, [r7, #12]
   1f222:	3b01      	subs	r3, #1
   1f224:	60fb      	str	r3, [r7, #12]
   1f226:	68fb      	ldr	r3, [r7, #12]
   1f228:	2b00      	cmp	r3, #0
   1f22a:	dcee      	bgt.n	1f20a <readline_push_history+0x3e>
            }
            MP_STATE_PORT(readline_hist)[0] = most_recent_hist;
   1f22c:	4a03      	ldr	r2, [pc, #12]	; (1f23c <readline_push_history+0x70>)
   1f22e:	68bb      	ldr	r3, [r7, #8]
   1f230:	6693      	str	r3, [r2, #104]	; 0x68
        }
    }
}
   1f232:	bf00      	nop
   1f234:	3710      	adds	r7, #16
   1f236:	46bd      	mov	sp, r7
   1f238:	bd80      	pop	{r7, pc}
   1f23a:	bf00      	nop
   1f23c:	20001248 	.word	0x20001248

0001f240 <GPIODirModeSet>:
   1f240:	f8d0 3400 	ldr.w	r3, [r0, #1024]	; 0x400
   1f244:	f012 0f01 	tst.w	r2, #1
   1f248:	bf14      	ite	ne
   1f24a:	430b      	orrne	r3, r1
   1f24c:	438b      	biceq	r3, r1
   1f24e:	f8c0 3400 	str.w	r3, [r0, #1024]	; 0x400
   1f252:	f8d0 3420 	ldr.w	r3, [r0, #1056]	; 0x420
   1f256:	0792      	lsls	r2, r2, #30
   1f258:	bf4c      	ite	mi
   1f25a:	4319      	orrmi	r1, r3
   1f25c:	ea23 0101 	bicpl.w	r1, r3, r1
   1f260:	f8c0 1420 	str.w	r1, [r0, #1056]	; 0x420
   1f264:	4770      	bx	lr

0001f266 <GPIODirModeGet>:
   1f266:	2301      	movs	r3, #1
   1f268:	fa03 f101 	lsl.w	r1, r3, r1
   1f26c:	b510      	push	{r4, lr}
   1f26e:	f8d0 4400 	ldr.w	r4, [r0, #1024]	; 0x400
   1f272:	f8d0 2420 	ldr.w	r2, [r0, #1056]	; 0x420
   1f276:	b2c9      	uxtb	r1, r1
   1f278:	420c      	tst	r4, r1
   1f27a:	bf08      	it	eq
   1f27c:	2300      	moveq	r3, #0
   1f27e:	420a      	tst	r2, r1
   1f280:	bf14      	ite	ne
   1f282:	2002      	movne	r0, #2
   1f284:	2000      	moveq	r0, #0
   1f286:	4318      	orrs	r0, r3
   1f288:	bd10      	pop	{r4, pc}

0001f28a <GPIOPadConfigSet>:
   1f28a:	b5f0      	push	{r4, r5, r6, r7, lr}
   1f28c:	f3c2 1741 	ubfx	r7, r2, #5, #2
   1f290:	2500      	movs	r5, #0
   1f292:	f04f 0e03 	mov.w	lr, #3
   1f296:	fa41 f405 	asr.w	r4, r1, r5
   1f29a:	07e6      	lsls	r6, r4, #31
   1f29c:	d50f      	bpl.n	1f2be <GPIOPadConfigSet+0x34>
   1f29e:	f8d0 6fc4 	ldr.w	r6, [r0, #4036]	; 0xfc4
   1f2a2:	006c      	lsls	r4, r5, #1
   1f2a4:	fa0e fc04 	lsl.w	ip, lr, r4
   1f2a8:	ea26 060c 	bic.w	r6, r6, ip
   1f2ac:	f8c0 6fc4 	str.w	r6, [r0, #4036]	; 0xfc4
   1f2b0:	f8d0 6fc4 	ldr.w	r6, [r0, #4036]	; 0xfc4
   1f2b4:	fa07 f404 	lsl.w	r4, r7, r4
   1f2b8:	4334      	orrs	r4, r6
   1f2ba:	f8c0 4fc4 	str.w	r4, [r0, #4036]	; 0xfc4
   1f2be:	3501      	adds	r5, #1
   1f2c0:	2d08      	cmp	r5, #8
   1f2c2:	d1e8      	bne.n	1f296 <GPIOPadConfigSet+0xc>
   1f2c4:	f8d0 4500 	ldr.w	r4, [r0, #1280]	; 0x500
   1f2c8:	07d5      	lsls	r5, r2, #31
   1f2ca:	bf4c      	ite	mi
   1f2cc:	430c      	orrmi	r4, r1
   1f2ce:	438c      	bicpl	r4, r1
   1f2d0:	f8c0 4500 	str.w	r4, [r0, #1280]	; 0x500
   1f2d4:	f8d0 4504 	ldr.w	r4, [r0, #1284]	; 0x504
   1f2d8:	0797      	lsls	r7, r2, #30
   1f2da:	bf4c      	ite	mi
   1f2dc:	430c      	orrmi	r4, r1
   1f2de:	438c      	bicpl	r4, r1
   1f2e0:	f8c0 4504 	str.w	r4, [r0, #1284]	; 0x504
   1f2e4:	f8d0 4508 	ldr.w	r4, [r0, #1288]	; 0x508
   1f2e8:	0756      	lsls	r6, r2, #29
   1f2ea:	bf4c      	ite	mi
   1f2ec:	430c      	orrmi	r4, r1
   1f2ee:	438c      	bicpl	r4, r1
   1f2f0:	f8c0 4508 	str.w	r4, [r0, #1288]	; 0x508
   1f2f4:	f8d0 4518 	ldr.w	r4, [r0, #1304]	; 0x518
   1f2f8:	0715      	lsls	r5, r2, #28
   1f2fa:	bf4c      	ite	mi
   1f2fc:	430c      	orrmi	r4, r1
   1f2fe:	438c      	bicpl	r4, r1
   1f300:	f8c0 4518 	str.w	r4, [r0, #1304]	; 0x518
   1f304:	f012 0f10 	tst.w	r2, #16
   1f308:	f8d0 253c 	ldr.w	r2, [r0, #1340]	; 0x53c
   1f30c:	bf14      	ite	ne
   1f30e:	430a      	orrne	r2, r1
   1f310:	438a      	biceq	r2, r1
   1f312:	f8c0 253c 	str.w	r2, [r0, #1340]	; 0x53c
   1f316:	f8d0 250c 	ldr.w	r2, [r0, #1292]	; 0x50c
   1f31a:	07dc      	lsls	r4, r3, #31
   1f31c:	bf4c      	ite	mi
   1f31e:	430a      	orrmi	r2, r1
   1f320:	438a      	bicpl	r2, r1
   1f322:	f8c0 250c 	str.w	r2, [r0, #1292]	; 0x50c
   1f326:	f8d0 2510 	ldr.w	r2, [r0, #1296]	; 0x510
   1f32a:	079f      	lsls	r7, r3, #30
   1f32c:	bf4c      	ite	mi
   1f32e:	430a      	orrmi	r2, r1
   1f330:	438a      	bicpl	r2, r1
   1f332:	f8c0 2510 	str.w	r2, [r0, #1296]	; 0x510
   1f336:	f8d0 2514 	ldr.w	r2, [r0, #1300]	; 0x514
   1f33a:	075e      	lsls	r6, r3, #29
   1f33c:	bf4c      	ite	mi
   1f33e:	430a      	orrmi	r2, r1
   1f340:	438a      	bicpl	r2, r1
   1f342:	f8c0 2514 	str.w	r2, [r0, #1300]	; 0x514
   1f346:	f8d0 251c 	ldr.w	r2, [r0, #1308]	; 0x51c
   1f34a:	071d      	lsls	r5, r3, #28
   1f34c:	bf4c      	ite	mi
   1f34e:	430a      	orrmi	r2, r1
   1f350:	438a      	bicpl	r2, r1
   1f352:	f8c0 251c 	str.w	r2, [r0, #1308]	; 0x51c
   1f356:	f8d0 2544 	ldr.w	r2, [r0, #1348]	; 0x544
   1f35a:	059c      	lsls	r4, r3, #22
   1f35c:	bf4c      	ite	mi
   1f35e:	430a      	orrmi	r2, r1
   1f360:	438a      	bicpl	r2, r1
   1f362:	f8c0 2544 	str.w	r2, [r0, #1348]	; 0x544
   1f366:	f8d0 2540 	ldr.w	r2, [r0, #1344]	; 0x540
   1f36a:	f413 7f40 	tst.w	r3, #768	; 0x300
   1f36e:	bf14      	ite	ne
   1f370:	430a      	orrne	r2, r1
   1f372:	438a      	biceq	r2, r1
   1f374:	f8c0 2540 	str.w	r2, [r0, #1344]	; 0x540
   1f378:	b92b      	cbnz	r3, 1f386 <GPIOPadConfigSet+0xfc>
   1f37a:	f8d0 3528 	ldr.w	r3, [r0, #1320]	; 0x528
   1f37e:	4319      	orrs	r1, r3
   1f380:	f8c0 1528 	str.w	r1, [r0, #1320]	; 0x528
   1f384:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1f386:	f8d0 3528 	ldr.w	r3, [r0, #1320]	; 0x528
   1f38a:	ea23 0101 	bic.w	r1, r3, r1
   1f38e:	e7f7      	b.n	1f380 <GPIOPadConfigSet+0xf6>

0001f390 <GPIOPadConfigGet>:
   1f390:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1f394:	2401      	movs	r4, #1
   1f396:	f8d0 5500 	ldr.w	r5, [r0, #1280]	; 0x500
   1f39a:	fa04 f101 	lsl.w	r1, r4, r1
   1f39e:	b2c9      	uxtb	r1, r1
   1f3a0:	420d      	tst	r5, r1
   1f3a2:	bf18      	it	ne
   1f3a4:	46a0      	movne	r8, r4
   1f3a6:	f8d0 4504 	ldr.w	r4, [r0, #1284]	; 0x504
   1f3aa:	bf08      	it	eq
   1f3ac:	f04f 0800 	moveq.w	r8, #0
   1f3b0:	4221      	tst	r1, r4
   1f3b2:	f8d0 4508 	ldr.w	r4, [r0, #1288]	; 0x508
   1f3b6:	bf14      	ite	ne
   1f3b8:	f04f 0c02 	movne.w	ip, #2
   1f3bc:	f04f 0c00 	moveq.w	ip, #0
   1f3c0:	4221      	tst	r1, r4
   1f3c2:	f8d0 4518 	ldr.w	r4, [r0, #1304]	; 0x518
   1f3c6:	bf14      	ite	ne
   1f3c8:	f04f 0e04 	movne.w	lr, #4
   1f3cc:	f04f 0e00 	moveq.w	lr, #0
   1f3d0:	4221      	tst	r1, r4
   1f3d2:	f8d0 453c 	ldr.w	r4, [r0, #1340]	; 0x53c
   1f3d6:	f8d0 5fc4 	ldr.w	r5, [r0, #4036]	; 0xfc4
   1f3da:	bf14      	ite	ne
   1f3dc:	2708      	movne	r7, #8
   1f3de:	2700      	moveq	r7, #0
   1f3e0:	4221      	tst	r1, r4
   1f3e2:	ea4f 0441 	mov.w	r4, r1, lsl #1
   1f3e6:	fa25 f404 	lsr.w	r4, r5, r4
   1f3ea:	ea4f 1444 	mov.w	r4, r4, lsl #5
   1f3ee:	f004 0460 	and.w	r4, r4, #96	; 0x60
   1f3f2:	ea44 0408 	orr.w	r4, r4, r8
   1f3f6:	ea44 040c 	orr.w	r4, r4, ip
   1f3fa:	ea44 040e 	orr.w	r4, r4, lr
   1f3fe:	bf14      	ite	ne
   1f400:	2610      	movne	r6, #16
   1f402:	2600      	moveq	r6, #0
   1f404:	433c      	orrs	r4, r7
   1f406:	4334      	orrs	r4, r6
   1f408:	6014      	str	r4, [r2, #0]
   1f40a:	f8d0 250c 	ldr.w	r2, [r0, #1292]	; 0x50c
   1f40e:	f8d0 4510 	ldr.w	r4, [r0, #1296]	; 0x510
   1f412:	4211      	tst	r1, r2
   1f414:	bf14      	ite	ne
   1f416:	2201      	movne	r2, #1
   1f418:	2200      	moveq	r2, #0
   1f41a:	4221      	tst	r1, r4
   1f41c:	bf14      	ite	ne
   1f41e:	2402      	movne	r4, #2
   1f420:	2400      	moveq	r4, #0
   1f422:	4314      	orrs	r4, r2
   1f424:	f8d0 2514 	ldr.w	r2, [r0, #1300]	; 0x514
   1f428:	4211      	tst	r1, r2
   1f42a:	bf14      	ite	ne
   1f42c:	2204      	movne	r2, #4
   1f42e:	2200      	moveq	r2, #0
   1f430:	4314      	orrs	r4, r2
   1f432:	f8d0 251c 	ldr.w	r2, [r0, #1308]	; 0x51c
   1f436:	4211      	tst	r1, r2
   1f438:	bf14      	ite	ne
   1f43a:	2208      	movne	r2, #8
   1f43c:	2200      	moveq	r2, #0
   1f43e:	4322      	orrs	r2, r4
   1f440:	f8d0 4540 	ldr.w	r4, [r0, #1344]	; 0x540
   1f444:	4221      	tst	r1, r4
   1f446:	d008      	beq.n	1f45a <GPIOPadConfigGet+0xca>
   1f448:	f8d0 0544 	ldr.w	r0, [r0, #1348]	; 0x544
   1f44c:	4201      	tst	r1, r0
   1f44e:	bf14      	ite	ne
   1f450:	f44f 7100 	movne.w	r1, #512	; 0x200
   1f454:	f44f 7180 	moveq.w	r1, #256	; 0x100
   1f458:	430a      	orrs	r2, r1
   1f45a:	601a      	str	r2, [r3, #0]
   1f45c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001f460 <GPIOPinRead>:
   1f460:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
   1f464:	4770      	bx	lr

0001f466 <GPIOPinWrite>:
   1f466:	f840 2021 	str.w	r2, [r0, r1, lsl #2]
   1f46a:	4770      	bx	lr

0001f46c <GPIOPinTypeUSBDigital>:
   1f46c:	b570      	push	{r4, r5, r6, lr}
   1f46e:	2202      	movs	r2, #2
   1f470:	460d      	mov	r5, r1
   1f472:	f7ff fee5 	bl	1f240 <GPIODirModeSet>
   1f476:	4629      	mov	r1, r5
   1f478:	2308      	movs	r3, #8
   1f47a:	2201      	movs	r2, #1
   1f47c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1f480:	f7ff bf03 	b.w	1f28a <GPIOPadConfigSet>

0001f484 <GPIOPinTypeUART>:
   1f484:	f7ff bff2 	b.w	1f46c <GPIOPinTypeUSBDigital>

0001f488 <GPIOPinConfigure>:
   1f488:	4a0e      	ldr	r2, [pc, #56]	; (1f4c4 <GPIOPinConfigure+0x3c>)
   1f48a:	f3c0 4307 	ubfx	r3, r0, #16, #8
   1f48e:	6811      	ldr	r1, [r2, #0]
   1f490:	2201      	movs	r2, #1
   1f492:	409a      	lsls	r2, r3
   1f494:	420a      	tst	r2, r1
   1f496:	ea4f 0343 	mov.w	r3, r3, lsl #1
   1f49a:	bf18      	it	ne
   1f49c:	3301      	addne	r3, #1
   1f49e:	4a0a      	ldr	r2, [pc, #40]	; (1f4c8 <GPIOPinConfigure+0x40>)
   1f4a0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
   1f4a4:	b510      	push	{r4, lr}
   1f4a6:	f8d2 352c 	ldr.w	r3, [r2, #1324]	; 0x52c
   1f4aa:	f3c0 2407 	ubfx	r4, r0, #8, #8
   1f4ae:	210f      	movs	r1, #15
   1f4b0:	40a1      	lsls	r1, r4
   1f4b2:	f000 000f 	and.w	r0, r0, #15
   1f4b6:	ea23 0301 	bic.w	r3, r3, r1
   1f4ba:	40a0      	lsls	r0, r4
   1f4bc:	4318      	orrs	r0, r3
   1f4be:	f8c2 052c 	str.w	r0, [r2, #1324]	; 0x52c
   1f4c2:	bd10      	pop	{r4, pc}
   1f4c4:	400fe06c 	.word	0x400fe06c
   1f4c8:	0002819c 	.word	0x0002819c

0001f4cc <SysCtlPeripheralReady>:
   1f4cc:	4a08      	ldr	r2, [pc, #32]	; (1f4f0 <SysCtlPeripheralReady+0x24>)
   1f4ce:	f3c0 2307 	ubfx	r3, r0, #8, #8
   1f4d2:	441a      	add	r2, r3
   1f4d4:	0080      	lsls	r0, r0, #2
   1f4d6:	4b07      	ldr	r3, [pc, #28]	; (1f4f4 <SysCtlPeripheralReady+0x28>)
   1f4d8:	f400 707f 	and.w	r0, r0, #1020	; 0x3fc
   1f4dc:	ea03 1342 	and.w	r3, r3, r2, lsl #5
   1f4e0:	f040 4084 	orr.w	r0, r0, #1107296256	; 0x42000000
   1f4e4:	4318      	orrs	r0, r3
   1f4e6:	6800      	ldr	r0, [r0, #0]
   1f4e8:	3000      	adds	r0, #0
   1f4ea:	bf18      	it	ne
   1f4ec:	2001      	movne	r0, #1
   1f4ee:	4770      	bx	lr
   1f4f0:	400fea00 	.word	0x400fea00
   1f4f4:	01ffffe0 	.word	0x01ffffe0

0001f4f8 <SysCtlPeripheralEnable>:
   1f4f8:	4a07      	ldr	r2, [pc, #28]	; (1f518 <SysCtlPeripheralEnable+0x20>)
   1f4fa:	f3c0 2307 	ubfx	r3, r0, #8, #8
   1f4fe:	441a      	add	r2, r3
   1f500:	0080      	lsls	r0, r0, #2
   1f502:	4b06      	ldr	r3, [pc, #24]	; (1f51c <SysCtlPeripheralEnable+0x24>)
   1f504:	f400 707f 	and.w	r0, r0, #1020	; 0x3fc
   1f508:	ea03 1342 	and.w	r3, r3, r2, lsl #5
   1f50c:	f040 4084 	orr.w	r0, r0, #1107296256	; 0x42000000
   1f510:	4318      	orrs	r0, r3
   1f512:	2301      	movs	r3, #1
   1f514:	6003      	str	r3, [r0, #0]
   1f516:	4770      	bx	lr
   1f518:	400fe600 	.word	0x400fe600
   1f51c:	01ffffe0 	.word	0x01ffffe0

0001f520 <SysCtlReset>:
   1f520:	4b01      	ldr	r3, [pc, #4]	; (1f528 <SysCtlReset+0x8>)
   1f522:	4a02      	ldr	r2, [pc, #8]	; (1f52c <SysCtlReset+0xc>)
   1f524:	601a      	str	r2, [r3, #0]
   1f526:	e7fe      	b.n	1f526 <SysCtlReset+0x6>
   1f528:	e000ed0c 	.word	0xe000ed0c
   1f52c:	05fa0004 	.word	0x05fa0004

0001f530 <SysCtlSleep>:
   1f530:	f000 b8c6 	b.w	1f6c0 <CPUwfi>

0001f534 <SysCtlDeepSleep>:
   1f534:	b510      	push	{r4, lr}
   1f536:	4c06      	ldr	r4, [pc, #24]	; (1f550 <SysCtlDeepSleep+0x1c>)
   1f538:	6823      	ldr	r3, [r4, #0]
   1f53a:	f043 0304 	orr.w	r3, r3, #4
   1f53e:	6023      	str	r3, [r4, #0]
   1f540:	f000 f8be 	bl	1f6c0 <CPUwfi>
   1f544:	6823      	ldr	r3, [r4, #0]
   1f546:	f023 0304 	bic.w	r3, r3, #4
   1f54a:	6023      	str	r3, [r4, #0]
   1f54c:	bd10      	pop	{r4, pc}
   1f54e:	bf00      	nop
   1f550:	e000ed10 	.word	0xe000ed10

0001f554 <SysCtlResetCauseGet>:
   1f554:	4b01      	ldr	r3, [pc, #4]	; (1f55c <SysCtlResetCauseGet+0x8>)
   1f556:	6818      	ldr	r0, [r3, #0]
   1f558:	4770      	bx	lr
   1f55a:	bf00      	nop
   1f55c:	400fe05c 	.word	0x400fe05c

0001f560 <SysCtlResetCauseClear>:
   1f560:	4a02      	ldr	r2, [pc, #8]	; (1f56c <SysCtlResetCauseClear+0xc>)
   1f562:	6813      	ldr	r3, [r2, #0]
   1f564:	ea23 0000 	bic.w	r0, r3, r0
   1f568:	6010      	str	r0, [r2, #0]
   1f56a:	4770      	bx	lr
   1f56c:	400fe05c 	.word	0x400fe05c

0001f570 <SysCtlClockGet>:
   1f570:	4b48      	ldr	r3, [pc, #288]	; (1f694 <SysCtlClockGet+0x124>)
   1f572:	b570      	push	{r4, r5, r6, lr}
   1f574:	3310      	adds	r3, #16
   1f576:	f853 4c10 	ldr.w	r4, [r3, #-16]
   1f57a:	681b      	ldr	r3, [r3, #0]
   1f57c:	2b00      	cmp	r3, #0
   1f57e:	da3c      	bge.n	1f5fa <SysCtlClockGet+0x8a>
   1f580:	f003 0270 	and.w	r2, r3, #112	; 0x70
   1f584:	2a20      	cmp	r2, #32
   1f586:	d051      	beq.n	1f62c <SysCtlClockGet+0xbc>
   1f588:	d805      	bhi.n	1f596 <SysCtlClockGet+0x26>
   1f58a:	2a00      	cmp	r2, #0
   1f58c:	d044      	beq.n	1f618 <SysCtlClockGet+0xa8>
   1f58e:	2a10      	cmp	r2, #16
   1f590:	d139      	bne.n	1f606 <SysCtlClockGet+0x96>
   1f592:	4841      	ldr	r0, [pc, #260]	; (1f698 <SysCtlClockGet+0x128>)
   1f594:	e005      	b.n	1f5a2 <SysCtlClockGet+0x32>
   1f596:	2a30      	cmp	r2, #48	; 0x30
   1f598:	d076      	beq.n	1f688 <SysCtlClockGet+0x118>
   1f59a:	2a70      	cmp	r2, #112	; 0x70
   1f59c:	d133      	bne.n	1f606 <SysCtlClockGet+0x96>
   1f59e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   1f5a2:	f413 6f00 	tst.w	r3, #2048	; 0x800
   1f5a6:	d125      	bne.n	1f5f4 <SysCtlClockGet+0x84>
   1f5a8:	4a3c      	ldr	r2, [pc, #240]	; (1f69c <SysCtlClockGet+0x12c>)
   1f5aa:	6815      	ldr	r5, [r2, #0]
   1f5ac:	3204      	adds	r2, #4
   1f5ae:	f444 0480 	orr.w	r4, r4, #4194304	; 0x400000
   1f5b2:	6812      	ldr	r2, [r2, #0]
   1f5b4:	f3c2 2604 	ubfx	r6, r2, #8, #5
   1f5b8:	f002 021f 	and.w	r2, r2, #31
   1f5bc:	3201      	adds	r2, #1
   1f5be:	0052      	lsls	r2, r2, #1
   1f5c0:	fb06 2202 	mla	r2, r6, r2, r2
   1f5c4:	fbb0 f0f2 	udiv	r0, r0, r2
   1f5c8:	f3c5 0209 	ubfx	r2, r5, #0, #10
   1f5cc:	f3c5 2589 	ubfx	r5, r5, #10, #10
   1f5d0:	4345      	muls	r5, r0
   1f5d2:	0aad      	lsrs	r5, r5, #10
   1f5d4:	fb00 5002 	mla	r0, r0, r2, r5
   1f5d8:	4a31      	ldr	r2, [pc, #196]	; (1f6a0 <SysCtlClockGet+0x130>)
   1f5da:	6812      	ldr	r2, [r2, #0]
   1f5dc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
   1f5e0:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
   1f5e4:	d043      	beq.n	1f66e <SysCtlClockGet+0xfe>
   1f5e6:	d825      	bhi.n	1f634 <SysCtlClockGet+0xc4>
   1f5e8:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
   1f5ec:	d02a      	beq.n	1f644 <SysCtlClockGet+0xd4>
   1f5ee:	f5b2 5f40 	cmp.w	r2, #12288	; 0x3000
   1f5f2:	d03a      	beq.n	1f66a <SysCtlClockGet+0xfa>
   1f5f4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1f5f8:	e025      	b.n	1f646 <SysCtlClockGet+0xd6>
   1f5fa:	f004 0230 	and.w	r2, r4, #48	; 0x30
   1f5fe:	2a10      	cmp	r2, #16
   1f600:	d016      	beq.n	1f630 <SysCtlClockGet+0xc0>
   1f602:	d802      	bhi.n	1f60a <SysCtlClockGet+0x9a>
   1f604:	b142      	cbz	r2, 1f618 <SysCtlClockGet+0xa8>
   1f606:	2000      	movs	r0, #0
   1f608:	bd70      	pop	{r4, r5, r6, pc}
   1f60a:	2a20      	cmp	r2, #32
   1f60c:	d03f      	beq.n	1f68e <SysCtlClockGet+0x11e>
   1f60e:	2a30      	cmp	r2, #48	; 0x30
   1f610:	d1f9      	bne.n	1f606 <SysCtlClockGet+0x96>
   1f612:	f247 5030 	movw	r0, #30000	; 0x7530
   1f616:	e006      	b.n	1f626 <SysCtlClockGet+0xb6>
   1f618:	f3c4 1184 	ubfx	r1, r4, #6, #5
   1f61c:	4a21      	ldr	r2, [pc, #132]	; (1f6a4 <SysCtlClockGet+0x134>)
   1f61e:	2b00      	cmp	r3, #0
   1f620:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
   1f624:	dbbd      	blt.n	1f5a2 <SysCtlClockGet+0x32>
   1f626:	f414 6f00 	tst.w	r4, #2048	; 0x800
   1f62a:	e7bc      	b.n	1f5a6 <SysCtlClockGet+0x36>
   1f62c:	481e      	ldr	r0, [pc, #120]	; (1f6a8 <SysCtlClockGet+0x138>)
   1f62e:	e7b8      	b.n	1f5a2 <SysCtlClockGet+0x32>
   1f630:	4819      	ldr	r0, [pc, #100]	; (1f698 <SysCtlClockGet+0x128>)
   1f632:	e7f8      	b.n	1f626 <SysCtlClockGet+0xb6>
   1f634:	f5b2 4fe0 	cmp.w	r2, #28672	; 0x7000
   1f638:	d01b      	beq.n	1f672 <SysCtlClockGet+0x102>
   1f63a:	f5b2 4f10 	cmp.w	r2, #36864	; 0x9000
   1f63e:	d1d9      	bne.n	1f5f4 <SysCtlClockGet+0x84>
   1f640:	4a1a      	ldr	r2, [pc, #104]	; (1f6ac <SysCtlClockGet+0x13c>)
   1f642:	e000      	b.n	1f646 <SysCtlClockGet+0xd6>
   1f644:	4a1a      	ldr	r2, [pc, #104]	; (1f6b0 <SysCtlClockGet+0x140>)
   1f646:	0265      	lsls	r5, r4, #9
   1f648:	d50b      	bpl.n	1f662 <SysCtlClockGet+0xf2>
   1f64a:	2b00      	cmp	r3, #0
   1f64c:	da16      	bge.n	1f67c <SysCtlClockGet+0x10c>
   1f64e:	005c      	lsls	r4, r3, #1
   1f650:	d511      	bpl.n	1f676 <SysCtlClockGet+0x106>
   1f652:	0519      	lsls	r1, r3, #20
   1f654:	d40f      	bmi.n	1f676 <SysCtlClockGet+0x106>
   1f656:	0040      	lsls	r0, r0, #1
   1f658:	f3c3 5386 	ubfx	r3, r3, #22, #7
   1f65c:	3301      	adds	r3, #1
   1f65e:	fbb0 f0f3 	udiv	r0, r0, r3
   1f662:	4290      	cmp	r0, r2
   1f664:	bf28      	it	cs
   1f666:	4610      	movcs	r0, r2
   1f668:	bd70      	pop	{r4, r5, r6, pc}
   1f66a:	4a12      	ldr	r2, [pc, #72]	; (1f6b4 <SysCtlClockGet+0x144>)
   1f66c:	e7eb      	b.n	1f646 <SysCtlClockGet+0xd6>
   1f66e:	4a12      	ldr	r2, [pc, #72]	; (1f6b8 <SysCtlClockGet+0x148>)
   1f670:	e7e9      	b.n	1f646 <SysCtlClockGet+0xd6>
   1f672:	4a12      	ldr	r2, [pc, #72]	; (1f6bc <SysCtlClockGet+0x14c>)
   1f674:	e7e7      	b.n	1f646 <SysCtlClockGet+0xd6>
   1f676:	f3c3 53c5 	ubfx	r3, r3, #23, #6
   1f67a:	e7ef      	b.n	1f65c <SysCtlClockGet+0xec>
   1f67c:	f3c4 54c3 	ubfx	r4, r4, #23, #4
   1f680:	3401      	adds	r4, #1
   1f682:	fbb0 f0f4 	udiv	r0, r0, r4
   1f686:	e7ec      	b.n	1f662 <SysCtlClockGet+0xf2>
   1f688:	f247 5030 	movw	r0, #30000	; 0x7530
   1f68c:	e789      	b.n	1f5a2 <SysCtlClockGet+0x32>
   1f68e:	4806      	ldr	r0, [pc, #24]	; (1f6a8 <SysCtlClockGet+0x138>)
   1f690:	e7c9      	b.n	1f626 <SysCtlClockGet+0xb6>
   1f692:	bf00      	nop
   1f694:	400fe060 	.word	0x400fe060
   1f698:	00f42400 	.word	0x00f42400
   1f69c:	400fe160 	.word	0x400fe160
   1f6a0:	400fe010 	.word	0x400fe010
   1f6a4:	0002822c 	.word	0x0002822c
   1f6a8:	003d0900 	.word	0x003d0900
   1f6ac:	01312d00 	.word	0x01312d00
   1f6b0:	04c4b400 	.word	0x04c4b400
   1f6b4:	02faf080 	.word	0x02faf080
   1f6b8:	02625a00 	.word	0x02625a00
   1f6bc:	017d7840 	.word	0x017d7840

0001f6c0 <CPUwfi>:
   1f6c0:	bf30      	wfi
   1f6c2:	4770      	bx	lr
   1f6c4:	6c6c616d 	.word	0x6c6c616d
   1f6c8:	2520636f 	.word	0x2520636f
   1f6cc:	203a2064 	.word	0x203a2064
   1f6d0:	000a7025 	.word	0x000a7025
   1f6d4:	6c616572 	.word	0x6c616572
   1f6d8:	20636f6c 	.word	0x20636f6c
   1f6dc:	202c7025 	.word	0x202c7025
   1f6e0:	3a206425 	.word	0x3a206425
   1f6e4:	0a702520 	.word	0x0a702520
   1f6e8:	00000000 	.word	0x00000000
   1f6ec:	6c616572 	.word	0x6c616572
   1f6f0:	20636f6c 	.word	0x20636f6c
   1f6f4:	202c7025 	.word	0x202c7025
   1f6f8:	202c6425 	.word	0x202c6425
   1f6fc:	3a206425 	.word	0x3a206425
   1f700:	0a702520 	.word	0x0a702520
   1f704:	00000000 	.word	0x00000000
   1f708:	65657266 	.word	0x65657266
   1f70c:	0a702520 	.word	0x0a702520
   1f710:	00000000 	.word	0x00000000

0001f714 <__func__.7881>:
   1f714:	665f6367 00656572                       gc_free.

0001f71c <__func__.7898>:
   1f71c:	725f6367 6c6c6165 0000636f 6d5f6367     gc_realloc..gc_m
   1f72c:	286b7261 0a297025 00000000 74696e49     ark(%p).....Init
   1f73c:	696c6169 676e697a 20434720 70616568     ializing GC heap
   1f74c:	7025203a 70252e2e 25203d20 79622075     : %p..%p = %u by
   1f75c:	0a736574 00000000 6c204347 756f7961     tes.....GC layou
   1f76c:	000a3a74 6c612020 20636f6c 6c626174     t:..  alloc tabl
   1f77c:	74612065 2c702520 6e656c20 20687467     e at %p, length 
   1f78c:	62207525 73657479 7525202c 6f6c6220     %u bytes, %u blo
   1f79c:	0a736b63 00000000 6f702020 61206c6f     cks.....  pool a
   1f7ac:	70252074 656c202c 6874676e 20752520     t %p, length %u 
   1f7bc:	65747962 25202c73 6c622075 736b636f     bytes, %u blocks
   1f7cc:	0000000a 735f6367 70656577 29702528     ....gc_sweep(%p)
   1f7dc:	0000000a 615f6367 636f6c6c 20752528     ....gc_alloc(%u 
   1f7ec:	65747962 3e2d2073 20752520 636f6c62     bytes -> %u bloc
   1f7fc:	0a29736b 00000000 615f6367 636f6c6c     ks).....gc_alloc
   1f80c:	29752528 6f6e203a 65726620 656d2065     (%u): no free me
   1f81c:	74202c6d 67676972 6e697265 43472067     m, triggering GC
   1f82c:	0000000a 615f6367 636f6c6c 29702528     ....gc_alloc(%p)
   1f83c:	0000000a 665f6367 28656572 0a297025     ....gc_free(%p).
   1f84c:	00000000 49524556 505f5946 70285254     ....VERIFY_PTR(p
   1f85c:	00297274 2e2f2e2e 79702f2e 2e63672f     tr).../../py/gc.
   1f86c:	00000063 5f425441 5f544547 444e494b     c...ATB_GET_KIND
   1f87c:	6f6c6228 20296b63 41203d3d 45485f54     (block) == AT_HE
   1f88c:	00004441 5f425441 5f544547 444e494b     AD..ATB_GET_KIND
   1f89c:	296c6228 203d3d20 465f5441 00454552     (bl) == AT_FREE.
   1f8ac:	725f6367 6c6c6165 2528636f 3e2d2070     gc_realloc(%p ->
   1f8bc:	29702520 0000000a 203a4347 61746f74      %p)....GC: tota
   1f8cc:	25203a6c 75202c75 3a646573 2c752520     l: %u, used: %u,
   1f8dc:	65726620 25203a65 00000a75 2e6f4e20      free: %u... No.
   1f8ec:	20666f20 6c622d31 736b636f 7525203a      of 1-blocks: %u
   1f8fc:	2d32202c 636f6c62 203a736b 202c7525     , 2-blocks: %u, 
   1f90c:	2078616d 206b6c62 203a7a73 202c7525     max blk sz: %u, 
   1f91c:	2078616d 65657266 3a7a7320 0a752520     max free sz: %u.
   1f92c:	00000000 6d204347 726f6d65 616c2079     ....GC memory la
   1f93c:	74756f79 7266203b 25206d6f 00003a70     yout; from %p:..
   1f94c:	2020200a 20202020 20752528 656e696c     .       (%u line
   1f95c:	6c612073 7266206c 00296565 3530250a     s all free)..%05
   1f96c:	00203a78 00006325 00000000 00000005     x: .%c..........
   1f97c:	5f5f07c4 5f646461 0000005f 5f5f082b     ..__add__...+.__
   1f98c:	6c6f6f62 00005f5f 5f5f0f42 6c697562     bool__..B.__buil
   1f99c:	6c635f64 5f737361 0000005f 5f5f08a7     d_class__.....__
   1f9ac:	6c6c6163 00005f5f 5f5f092b 73616c63     call__..+.__clas
   1f9bc:	005f5f73 5f5f0cc6 746e6f63 736e6961     s__...__contains
   1f9cc:	00005f5f 5f5f0bfd 696c6564 5f6d6574     __....__delitem_
   1f9dc:	0000005f 5f5f096d 65746e65 005f5f72     _...m.__enter__.
   1f9ec:	5f5f0671 5f5f7165 00000000 5f5f0845     q.__eq__....E.__
   1f9fc:	74697865 00005f5f 5f5f06a7 5f5f6567     exit__....__ge__
   1fa0c:	00000000 5f5f0b40 61746567 5f727474     ....@.__getattr_
   1fa1c:	0000005f 5f5f0b26 69746567 5f6d6574     _...&.__getitem_
   1fa2c:	0000005f 5f5f06b6 5f5f7467 00000000     _.....__gt__....
   1fa3c:	5f5f08f7 68736168 00005f5f 5f5f086d     ..__hash__..m.__
   1fa4c:	64646169 00005f5f 5f5f0a38 6f706d69     iadd__..8.__impo
   1fa5c:	5f5f7472 00000000 5f5f085f 74696e69     rt__...._.__init
   1fa6c:	00005f5f 5f5f0716 5f746e69 0000005f     __....__int__...
   1fa7c:	5f5f0808 62757369 00005f5f 5f5f08cf     ..__isub__....__
   1fa8c:	72657469 00005f5f 5f5f06cc 5f5f656c     iter__....__le__
   1fa9c:	00000000 5f5f07e2 5f6e656c 0000005f     ......__len__...
   1faac:	5f5f065d 5f5f746c 00000000 5f5f088e     ].__lt__......__
   1fabc:	6e69616d 00005f5f 5f5f0aff 75646f6d     main__....__modu
   1facc:	5f5f656c 00000000 5f5f08e2 656d616e     le__......__name
   1fadc:	00005f5f 5f5f0779 5f77656e 0000005f     __..y.__new__...
   1faec:	5f5f0802 7478656e 00005f5f 5f5f08c8     ..__next__....__
   1fafc:	68746170 00005f5f 5f5f0c6b 6c617571     path__..k.__qual
   1fb0c:	656d616e 00005f5f 5f5f0e01 6c706572     name__....__repl
   1fb1c:	6972705f 5f5f746e 00000000 5f5f0810     _print__......__
   1fb2c:	72706572 00005f5f 5f5f0b32 69746573     repr__..2.__seti
   1fb3c:	5f6d6574 0000005f 5f5f07d0 5f727473     tem__.....__str_
   1fb4c:	0000005f 5f5f0721 5f627573 0000005f     _...!.__sub__...
   1fb5c:	5f5f0d4f 63617274 63616265 005f5f6b     O.__traceback__.
   1fb6c:	002a018f 005f01fa 002f018a 2325036c     ..*..._.../.l.%#
   1fb7c:	0000006f 2325037b 00000078 3a7b0558     o...{.%#x...X.{:
   1fb8c:	007d6223 00200185 000a01af 616d2073     #b}... .....s ma
   1fb9c:	756d6978 6572206d 73727563 206e6f69     ximum recursion 
   1fbac:	74706564 78652068 64656563 00006465     depth exceeded..
   1fbbc:	6d3c08bd 6c75646f 00003e65 6c3c0880     ..<module>....<l
   1fbcc:	64626d61 00003e61 6c3c0ad4 63747369     ambda>....<listc
   1fbdc:	3e706d6f 00000000 643c0acc 63746369     omp>......<dictc
   1fbec:	3e706d6f 00000000 733c0954 6f637465     omp>....T.<setco
   1fbfc:	003e706d 673c0934 78656e65 003e7270     mp>.4.<genexpr>.
   1fc0c:	733c0852 6e697274 00003e67 733c07e3     R.<string>....<s
   1fc1c:	6e696474 0000003e 747505b7 00382d66     tdin>.....utf-8.
   1fc2c:	662f061a 6873616c 00000000 662f0a92     ../flash....../f
   1fc3c:	6873616c 62696c2f 00000000 41500364     lash/lib....d.PA
   1fc4c:	00000030 41500365 00000031 41500366     0...e.PA1...f.PA
   1fc5c:	00000032 41500367 00000033 41500360     2...g.PA3...`.PA
   1fc6c:	00000034 41500361 00000035 41500362     4...a.PA5...b.PA
   1fc7c:	00000036 41500363 00000037 42500387     6...c.PA7.....PB
   1fc8c:	00000030 42500386 00000031 42500385     0.....PB1.....PB
   1fc9c:	00000032 42500384 00000033 42500383     2.....PB3.....PB
   1fcac:	00000034 42500382 00000035 42500381     4.....PB5.....PB
   1fcbc:	00000036 42500380 00000037 435003a6     6.....PB7.....PC
   1fccc:	00000030 435003a7 00000031 435003a4     0.....PC1.....PC
   1fcdc:	00000032 435003a5 00000033 435003a2     2.....PC3.....PC
   1fcec:	00000034 435003a3 00000035 435003a0     4.....PC5.....PC
   1fcfc:	00000036 435003a1 00000037 445003c1     6.....PC7.....PD
   1fd0c:	00000030 445003c0 00000031 445003c3     0.....PD1.....PD
   1fd1c:	00000032 445003c2 00000033 445003c5     2.....PD3.....PD
   1fd2c:	00000034 445003c4 00000035 445003c7     4.....PD5.....PD
   1fd3c:	00000036 445003c6 00000037 455003e0     6.....PD7.....PE
   1fd4c:	00000030 455003e1 00000031 455003e2     0.....PE1.....PE
   1fd5c:	00000032 455003e3 00000033 455003e4     2.....PE3.....PE
   1fd6c:	00000034 455003e5 00000035 46500303     4.....PE5.....PF
   1fd7c:	00000030 46500302 00000031 46500301     0.....PF1.....PF
   1fd8c:	00000032 46500301 00000033 46500307     2.....PF3.....PF
   1fd9c:	00000034 4441088a 49415f43 0000304e     4.....ADC_AIN0..
   1fdac:	4441088b 49415f43 0000314e 444109db     ..ADC_AIN1....AD
   1fdbc:	49415f43 0030314e 444109da 49415f43     C_AIN10...ADC_AI
   1fdcc:	0031314e 44410888 49415f43 0000324e     N11...ADC_AIN2..
   1fddc:	44410889 49415f43 0000334e 4441088e     ..ADC_AIN3....AD
   1fdec:	49415f43 0000344e 4441088f 49415f43     C_AIN4....ADC_AI
   1fdfc:	0000354e 4441088c 49415f43 0000364e     N5....ADC_AIN6..
   1fe0c:	4441088d 49415f43 0000374e 44410882     ..ADC_AIN7....AD
   1fe1c:	49415f43 0000384e 44410883 49415f43     C_AIN8....ADC_AI
   1fe2c:	0000394e 3249080e 535f3043 00004c43     N9....I2C0_SCL..
   1fe3c:	324908e4 535f3043 00004144 3249088f     ..I2C0_SDA....I2
   1fe4c:	535f3143 00004c43 324908a5 535f3143     C1_SCL....I2C1_S
   1fe5c:	00004144 3249080c 535f3243 00004c43     DA....I2C2_SCL..
   1fe6c:	3249088d 535f3343 00004c43 544a0e21     ..I2C3_SCL..!.JT
   1fe7c:	545f4741 535f4b43 4b4c4357 00000000     AG_TCK_SWCLK....
   1fe8c:	544a089b 545f4741 00004944 544a0c49     ..JTAG_TDI..I.JT
   1fe9c:	545f4741 535f4f44 00004f57 544a0e11     AG_TDO_SWO....JT
   1feac:	545f4741 535f534d 4f494457 00000000     AG_TMS_SWDIO....
   1febc:	544d0c97 5f304c52 4c554146 00003054     ..MTRL0_FAULT0..
   1fecc:	544d0a97 5f304c52 304d5750 00000000     ..MTRL0_PWM0....
   1fedc:	544d0a96 5f304c52 314d5750 00000000     ..MTRL0_PWM1....
   1feec:	544d0a95 5f304c52 324d5750 00000000     ..MTRL0_PWM2....
   1fefc:	544d0a94 5f304c52 334d5750 00000000     ..MTRL0_PWM3....
   1ff0c:	544d0a93 5f304c52 344d5750 00000000     ..MTRL0_PWM4....
   1ff1c:	544d0a92 5f304c52 354d5750 00000000     ..MTRL0_PWM5....
   1ff2c:	544d0a91 5f304c52 364d5750 00000000     ..MTRL0_PWM6....
   1ff3c:	544d0a90 5f304c52 374d5750 00000000     ..MTRL0_PWM7....
   1ff4c:	544d0c76 5f314c52 4c554146 00003054     v.MTRL1_FAULT0..
   1ff5c:	544d0a36 5f314c52 304d5750 00000000     6.MTRL1_PWM0....
   1ff6c:	544d0a37 5f314c52 314d5750 00000000     7.MTRL1_PWM1....
   1ff7c:	544d0a34 5f314c52 324d5750 00000000     4.MTRL1_PWM2....
   1ff8c:	544d0a35 5f314c52 334d5750 00000000     5.MTRL1_PWM3....
   1ff9c:	544d0a32 5f314c52 344d5750 00000000     2.MTRL1_PWM4....
   1ffac:	544d0a33 5f314c52 354d5750 00000000     3.MTRL1_PWM5....
   1ffbc:	544d0a30 5f314c52 364d5750 00000000     0.MTRL1_PWM6....
   1ffcc:	544d0a31 5f314c52 374d5750 00000000     1.MTRL1_PWM7....
   1ffdc:	4d4e038f 00000049 45510802 44495f49     ..NMI.....QEI_ID
   1ffec:	00003058 45510803 44495f49 00003158     X0....QEI_IDX1..
   1fffc:	4954093a 435f304d 00305043 4954093b     :.TIM0_CCP0.;.TI
   2000c:	435f304d 00315043 4954099b 435f314d     M0_CCP1...TIM1_C
   2001c:	00305043 4954099a 435f314d 00315043     CP0...TIM1_CCP1.
   2002c:	495409f8 435f324d 00305043 495409f9     ..TIM2_CCP0...TI
   2003c:	435f324d 00315043 49540959 435f334d     M2_CCP1.Y.TIM3_C
   2004c:	00305043 49540958 435f334d 00315043     CP0.X.TIM3_CCP1.
   2005c:	495409be 435f344d 00305043 495409bf     ..TIM4_CCP0...TI
   2006c:	435f344d 00315043 4954091f 435f354d     M4_CCP1...TIM5_C
   2007c:	00305043 4954091e 435f354d 00315043     CP0...TIM5_CCP1.
   2008c:	52540508 0030445f 52540509 0031445f     ..TR_D0...TR_D1.
   2009c:	4155099d 5f315452 00535443 4155094c     ..UART1_CTS.L.UA
   200ac:	5f315452 00535452 535507a7 445f3042     RT1_RTS...USB0_D
   200bc:	0000004d 535507ba 445f3042 00000050     M.....USB0_DP...
   200cc:	535509f0 455f3042 004e4550 535507c3     ..USB0_EPEN...US
   200dc:	495f3042 00000044 535509a0 505f3042     B0_ID.....USB0_P
   200ec:	00544c46 5355091c 565f3042 00535542     FLT...USB0_VBUS.
   200fc:	54570aed 5f304d49 30504343 00000000     ..WTIM0_CCP0....
   2010c:	54570aec 5f304d49 31504343 00000000     ..WTIM0_CCP1....
   2011c:	54570a0c 5f314d49 30504343 00000000     ..WTIM1_CCP0....
   2012c:	54570a0d 5f314d49 31504343 00000000     ..WTIM1_CCP1....
   2013c:	54570a2f 5f324d49 30504343 00000000     /.WTIM2_CCP0....
   2014c:	54570a2e 5f324d49 31504343 00000000     ..WTIM2_CCP1....
   2015c:	54570a4e 5f334d49 30504343 00000000     N.WTIM3_CCP0....
   2016c:	54570a4f 5f334d49 31504343 00000000     O.WTIM3_CCP1....
   2017c:	54570a69 5f344d49 30504343 00000000     i.WTIM4_CCP0....
   2018c:	54570a68 5f344d49 31504343 00000000     h.WTIM4_CCP1....
   2019c:	54570a88 5f354d49 30504343 00000000     ..WTIM5_CCP0....
   201ac:	54570a89 5f354d49 31504343 00000000     ..WTIM5_CCP1....
   201bc:	4c41037c 00000054 4c410ef8 504f5f54     |.ALT.....ALT_OP
   201cc:	445f4e45 4e494152 00000000 4e4106af     EN_DRAIN......AN
   201dc:	474f4c41 00000000 72410f2d 6d687469     ALOG....-.Arithm
   201ec:	63697465 6f727245 00000072 73410e97     eticError.....As
   201fc:	74726573 456e6f69 726f7272 00000000     sertionError....
   2020c:	74410e21 62697274 45657475 726f7272     !.AttributeError
   2021c:	00000000 61420d07 78456573 74706563     ......BaseExcept
   2022c:	006e6f69 45440f14 4c535045 5f504545     ion...DEEPSLEEP_
   2023c:	45534552 00000054 4f450891 72724546     RESET.....EOFErr
   2024c:	0000726f 6c4508f0 7370696c 00007369     or....Ellipsis..
   2025c:	784509f2 74706563 006e6f69 65470d16     ..Exception...Ge
   2026c:	6172656e 45726f74 00746978 41480ab0     neratorExit...HA
   2027c:	525f4452 54455345 00000000 494808a4     RD_RESET......HI
   2028c:	574f505f 00005245 4e490222 00000000     _POWER..".IN....
   2029c:	524908c1 4f425f51 00004854 52490b37     ..IRQ_BOTH..7.IR
   202ac:	41465f51 4e494c4c 00000047 5249083e     Q_FALLING...>.IR
   202bc:	49485f51 00004847 524907e4 4f4c5f51     Q_HIGH....IRQ_LO
   202cc:	00000057 52490a78 49525f51 474e4953     W...x.IRQ_RISING
   202dc:	00000000 6d490b20 74726f70 6f727245     .... .ImportErro
   202ec:	00000072 6e49105c 746e6564 6f697461     r...\.Indentatio
   202fc:	7272456e 0000726f 6e490a83 45786564     nError....IndexE
   2030c:	726f7272 00000000 654b08ea 72724579     rror......KeyErr
   2031c:	0000726f 654b11af 616f6279 6e496472     or....KeyboardIn
   2032c:	72726574 00747075 4f4c09b1 4f505f57     terrupt...LOW_PO
   2033c:	00524557 6f4c0bff 70756b6f 6f727245     WER...LookupErro
   2034c:	00000072 454d0969 4f505f44 00524557     r...i.MED_POWER.
   2035c:	654d0bdc 79726f6d 6f727245 00000072     ..MemoryError...
   2036c:	614e09ba 7245656d 00726f72 6f4e0817     ..NameError...No
   2037c:	7954656e 00006570 6f4e13c6 706d4974     neType....NotImp
   2038c:	656d656c 6465746e 6f727245 00000072     lementedError...
   2039c:	504f0a5e 445f4e45 4e494152 00000000     ^.OPEN_DRAIN....
   203ac:	534f07a1 6f727245 00000072 554f030b     ..OSError.....OU
   203bc:	00000054 764f0d81 6c667265 7245776f     T.....OverflowEr
   203cc:	00726f72 555009ad 445f4c4c 004e574f     ror...PULL_DOWN.
   203dc:	55500955 4e5f4c4c 00454e4f 555007ba     U.PULL_NONE...PU
   203ec:	555f4c4c 00000050 57500bdb 5f4e4f52     LL_UP.....PWRON_
   203fc:	45534552 00000054 69500312 0000006e     RESET.....Pin...
   2040c:	75520c61 6d69746e 72724565 0000726f     a.RuntimeError..
   2041c:	4f530a01 525f5446 54455345 00000000     ..SOFT_RESET....
   2042c:	74530dea 7449706f 74617265 006e6f69     ..StopIteration.
   2043c:	79530b94 7861746e 6f727245 00000072     ..SyntaxError...
   2044c:	79530a20 6d657473 74697845 00000000      .SystemExit....
   2045c:	79540925 72456570 00726f72 61560a96     %.TypeError...Va
   2046c:	4565756c 726f7272 00000000 44570908     lueError......WD
   2047c:	45525f54 00544553 655a11b6 69446f72     T_RESET...ZeroDi
   2048c:	69736976 72456e6f 00726f72 62610395     visionError...ab
   2049c:	00000073 66610222 00000000 6661075f     s...".af...._.af
   204ac:	73696c5f 00000074 6c610344 0000006c     _list...D.all...
   204bc:	6c61035c 00000074 6e610313 00000079     \.alt.....any...
   204cc:	7061066b 646e6570 00000000 726104c2     k.append......ar
   204dc:	00007367 696203e0 0000006e 6f62057f     gs....bin.....bo
   204ec:	00647261 6f6204eb 00006c6f 6f620ae2     ard...bool....bo
   204fc:	6f6c746f 72656461 00000000 6f620c97     otloader......bo
   2050c:	5f646e75 6874656d 0000646f 756208f7     und_method....bu
   2051c:	69746c69 0000736e 79620822 6f636574     iltins..".byteco
   2052c:	00006564 7962055c 00736574 6163080d     de..\.bytes...ca
   2053c:	62616c6c 0000656c 686303dc 00000072     llable....chr...
   2054c:	6c630bb4 6d737361 6f687465 00000064     ..classmethod...
   2055c:	6c63057c 00726165 6c630533 0065736f     |.clear.3.close.
   2056c:	6c630774 7275736f 00000065 6f6305c0     t.closure.....co
   2057c:	0074736e 6f6304e0 00007970 6f6305a6     nst...copy....co
   2058c:	00746e75 656405d4 00677562 6964043f     unt...debug.?.di
   2059c:	00007463 6964092d 765f7463 00776569     ct..-.dict_view.
   205ac:	696403fa 00000072 696406b8 646f6d76     ..dir.....divmod
   205bc:	00000000 72640549 00657669 6e65030a     ....I.drive...en
   205cc:	00000064 6e65081b 69777364 00006874     d.....endswith..
   205dc:	7665049b 00006c61 7865041e 00006365     ..eval....exec..
   205ec:	78650663 646e6574 00000000 69660401     c.extend......fi
   205fc:	0000646e 6f660626 74616d72 00000000     nd..&.format....
   2060c:	726604e5 00007165 72660a35 625f6d6f     ..freq..5.from_b
   2061c:	73657479 00000000 72660837 656b6d6f     ytes....7.fromke
   2062c:	00007379 75660827 6974636e 00006e6f     ys..'.function..
   2063c:	65670996 6172656e 00726f74 65670333     ..generator.3.ge
   2064c:	00000074 656707c0 74746174 00000072     t.....getattr...
   2065c:	6c67079d 6c61626f 00000073 70670454     ..globals...T.gp
   2066c:	00006f69 6168078c 74746173 00000072     io....hasattr...
   2067c:	616804b7 00006873 656809ad 6c5f7061     ..hash....heap_l
   2068c:	006b636f 65680b56 755f7061 636f6c6e     ock.V.heap_unloc
   2069c:	0000006b 65680370 00000078 6968042b     k...p.hex...+.hi
   206ac:	00006867 64690228 00000000 6e69057b     gh..(.id....{.in
   206bc:	00786564 6e6904eb 00006f66 6e69041f     dex...info....in
   206cc:	00007469 6e690612 74726573 00000000     it....insert....
   206dc:	6e690316 00000074 7269038f 00000071     ..int.....irq...
   206ec:	736907eb 68706c61 00000061 736907a8     ..isalpha.....is
   206fc:	69676964 00000074 73690ab6 74736e69     digit.....isinst
   2070c:	65636e61 00000000 736907fc 65776f6c     ance......islowe
   2071c:	00000072 7369075b 63617073 00000065     r...[.isspace...
   2072c:	73690ab5 63627573 7373616c 00000000     ..issubclass....
   2073c:	736907dd 65707075 00000072 746905e3     ..isupper.....it
   2074c:	00736d65 7469048f 00007265 74690847     ems...iter..G.it
   2075c:	74617265 0000726f 6f6a04a7 00006e69     erator....join..
   2076c:	656b0332 00000079 656b0401 00007379     2.key.....keys..
   2077c:	656c0362 0000006e 696c0427 00007473     b.len...'.list..
   2078c:	696c0689 656c7474 00000000 6f6c063b     ..little....;.lo
   2079c:	736c6163 00000000 6f6c0331 00000077     cals....1.low...
   207ac:	6f6c05c6 00726577 736c06e5 70697274     ..lower...lstrip
   207bc:	00000000 616d03b9 00000070 616d065e     ......map...^.ma
   207cc:	72657070 00000000 696d0b0b 706f7263     pper......microp
   207dc:	6f687479 0000006e 6f6d0426 00006564     ython...&.mode..
   207ec:	6f6d06bf 656c7564 00000000 616e04a2     ..module......na
   207fc:	0000656d 616e0591 0073656d 656e0442     me....names.B.ne
   2080c:	00007478 626f0690 7463656a 00000000     xt....object....
   2081c:	636f03fd 00000074 666f038a 00000066     ..oct.....off...
   2082c:	6e6f0264 00000000 706f0987 656c5f74     d.on......opt_le
   2083c:	006c6576 726f031c 00000064 65700af3     vel...ord.....pe
   2084c:	745f646e 776f7268 00000000 697003f2     nd_throw......pi
   2085c:	0000006e 6f70032a 00000070 6f7007bf     n...*.pop.....po
   2086c:	65746970 0000006d 6f70045c 00007472     pitem...\.port..
   2087c:	6f70032d 00000077 72700554 00746e69     -.pow...T.print.
   2088c:	75700480 00006c6c 6172051a 0065676e     ..pull....range.
   2089c:	65720663 65766f6d 00000000 65720749     c.remove....I.re
   208ac:	63616c70 00000065 657204d0 00007270     place.....repr..
   208bc:	65720510 00746573 65720bce 5f746573     ..reset...reset_
   208cc:	73756163 00000065 65720725 73726576     cause...%.revers
   208dc:	00000065 667205d2 00646e69 697206e9     e.....rfind...ri
   208ec:	7865646e 00000000 6f7205e7 00646e75     ndex......round.
   208fc:	737206a5 74696c70 00000000 7372063b     ..rsplit....;.rs
   2090c:	70697274 00000000 657304b9 0000646e     trip......send..
   2091c:	65730323 00000070 657307d4 74746174     #.sep.....setatt
   2092c:	00000072 65730a6c 66656474 746c7561     r...l.setdefault
   2093c:	00000000 6f730ae1 725f7466 74657365     ......soft_reset
   2094c:	00000000 6f7304bf 00007472 6f73065e     ......sort..^.so
   2095c:	64657472 00000000 707305b7 0074696c     rted......split.
   2096c:	74730585 00747261 74730a74 73747261     ..start.t.starts
   2097c:	68746977 00000000 74730c62 63697461     with....b.static
   2098c:	6874656d 0000646f 74730457 00007065     method..W.step..
   2099c:	7473049d 0000706f 74730350 00000072     ..stop..P.str...
   209ac:	74730529 00706972 7573032e 0000006d     ).strip...sum...
   209bc:	757305c4 00726570 687405b3 00776f72     ..super...throw.
   209cc:	6f7408d8 7479625f 00007365 757405fd     ..to_bytes....tu
   209dc:	00656c70 7974049d 00006570 6d750895     ple...type....um
   209ec:	69686361 0000656e 6e750904 65757169     achine....unique
   209fc:	0064695f 707506b4 65746164 00000000     _id...update....
   20a0c:	70750527 00726570 6176054e 0065756c     '.upper.N.value.
   20a1c:	6176067d 7365756c 00000000 697a03e6     }.values......zi
   20a2c:	00000070                                p...

00020a30 <mp_qstr_const_pool>:
	...
   20a38:	0000000a 00000173 0001f974 0001f978     ....s...t...x...
   20a48:	0001f97c 0001f988 0001f994 0001f9a8     |...............
   20a58:	0001f9b4 0001f9c0 0001f9d0 0001f9e0     ................
   20a68:	0001f9ec 0001f9f8 0001fa04 0001fa10     ................
   20a78:	0001fa20 0001fa30 0001fa3c 0001fa48      ...0...<...H...
   20a88:	0001fa54 0001fa64 0001fa70 0001fa7c     T...d...p...|...
   20a98:	0001fa88 0001fa94 0001faa0 0001faac     ................
   20aa8:	0001fab8 0001fac4 0001fad4 0001fae0     ................
   20ab8:	0001faec 0001faf8 0001fb04 0001fb14     ................
   20ac8:	0001fb28 0001fb34 0001fb44 0001fb50     (...4...D...P...
   20ad8:	0001fb5c 0001fb6c 0001fb70 0001fb74     \...l...p...t...
   20ae8:	0001fb78 0001fb80 0001fb88 0001fb90     x...............
   20af8:	0001fb94 0001fb98 0001fbbc 0001fbc8     ................
   20b08:	0001fbd4 0001fbe4 0001fbf4 0001fc00     ................
   20b18:	0001fc0c 0001fc18 0001fc24 0001fc2c     ........$...,...
   20b28:	0001fc38 0001fc48 0001fc50 0001fc58     8...H...P...X...
   20b38:	0001fc60 0001fc68 0001fc70 0001fc78     `...h...p...x...
   20b48:	0001fc80 0001fc88 0001fc90 0001fc98     ................
   20b58:	0001fca0 0001fca8 0001fcb0 0001fcb8     ................
   20b68:	0001fcc0 0001fcc8 0001fcd0 0001fcd8     ................
   20b78:	0001fce0 0001fce8 0001fcf0 0001fcf8     ................
   20b88:	0001fd00 0001fd08 0001fd10 0001fd18     ................
   20b98:	0001fd20 0001fd28 0001fd30 0001fd38      ...(...0...8...
   20ba8:	0001fd40 0001fd48 0001fd50 0001fd58     @...H...P...X...
   20bb8:	0001fd60 0001fd68 0001fd70 0001fd78     `...h...p...x...
   20bc8:	0001fd80 0001fd88 0001fd90 0001fd98     ................
   20bd8:	0001fda0 0001fdac 0001fdb8 0001fdc4     ................
   20be8:	0001fdd0 0001fddc 0001fde8 0001fdf4     ................
   20bf8:	0001fe00 0001fe0c 0001fe18 0001fe24     ............$...
   20c08:	0001fe30 0001fe3c 0001fe48 0001fe54     0...<...H...T...
   20c18:	0001fe60 0001fe6c 0001fe78 0001fe8c     `...l...x.......
   20c28:	0001fe98 0001fea8 0001febc 0001fecc     ................
   20c38:	0001fedc 0001feec 0001fefc 0001ff0c     ................
   20c48:	0001ff1c 0001ff2c 0001ff3c 0001ff4c     ....,...<...L...
   20c58:	0001ff5c 0001ff6c 0001ff7c 0001ff8c     \...l...|.......
   20c68:	0001ff9c 0001ffac 0001ffbc 0001ffcc     ................
   20c78:	0001ffdc 0001ffe4 0001fff0 0001fffc     ................
   20c88:	00020008 00020014 00020020 0002002c     ........ ...,...
   20c98:	00020038 00020044 00020050 0002005c     8...D...P...\...
   20ca8:	00020068 00020074 00020080 0002008c     h...t...........
   20cb8:	00020094 0002009c 000200a8 000200b4     ................
   20cc8:	000200c0 000200cc 000200d8 000200e4     ................
   20cd8:	000200f0 000200fc 0002010c 0002011c     ................
   20ce8:	0002012c 0002013c 0002014c 0002015c     ,...<...L...\...
   20cf8:	0002016c 0002017c 0002018c 0002019c     l...|...........
   20d08:	000201ac 000201bc 000201c4 000201d8     ................
   20d18:	000201e4 000201f8 0002020c 00020220     ............ ...
   20d28:	00020230 00020244 00020250 0002025c     0...D...P...\...
   20d38:	00020268 00020278 00020288 00020294     h...x...........
   20d48:	0002029c 000202a8 000202b8 000202c4     ................
   20d58:	000202d0 000202e0 000202f0 00020304     ................
   20d68:	00020314 00020320 00020334 00020340     .... ...4...@...
   20d78:	00020350 0002035c 0002036c 00020378     P...\...l...x...
   20d88:	00020384 0002039c 000203ac 000203b8     ................
   20d98:	000203c0 000203d0 000203dc 000203e8     ................
   20da8:	000203f4 00020404 0002040c 0002041c     ................
   20db8:	0002042c 0002043c 0002044c 0002045c     ,...<...L...\...
   20dc8:	00020468 00020478 00020484 00020498     h...x...........
   20dd8:	000204a0 000204a8 000204b4 000204bc     ................
   20de8:	000204c4 000204cc 000204d8 000204e0     ................
   20df8:	000204e8 000204f0 000204f8 00020508     ................
   20e08:	00020518 00020524 00020530 00020538     ....$...0...8...
   20e18:	00020544 0002054c 0002055c 00020564     D...L...\...d...
   20e28:	0002056c 00020578 00020580 00020588     l...x...........
   20e38:	00020590 00020598 000205a0 000205ac     ................
   20e48:	000205b4 000205c0 000205c8 000205d0     ................
   20e58:	000205dc 000205e4 000205ec 000205f8     ................
   20e68:	00020600 0002060c 00020614 00020624     ............$...
   20e78:	00020630 0002063c 00020648 00020650     0...<...H...P...
   20e88:	0002065c 00020668 00020670 0002067c     \...h...p...|...
   20e98:	00020684 00020690 000206a0 000206a8     ................
   20ea8:	000206b0 000206b8 000206c0 000206c8     ................
   20eb8:	000206d0 000206dc 000206e4 000206ec     ................
   20ec8:	000206f8 00020704 00020714 00020720     ............ ...
   20ed8:	0002072c 0002073c 00020748 00020750     ,...<...H...P...
   20ee8:	00020758 00020764 0002076c 00020774     X...d...l...t...
   20ef8:	0002077c 00020784 0002078c 00020798     |...............
   20f08:	000207a4 000207ac 000207b4 000207c0     ................
   20f18:	000207c8 000207d4 000207e4 000207ec     ................
   20f28:	000207f8 00020800 00020808 00020810     ................
   20f38:	0002081c 00020824 0002082c 00020834     ....$...,...4...
   20f48:	00020840 00020848 00020858 00020860     @...H...X...`...
   20f58:	00020868 00020874 0002087c 00020884     h...t...|.......
   20f68:	0002088c 00020894 0002089c 000208a8     ................
   20f78:	000208b4 000208bc 000208c4 000208d4     ................
   20f88:	000208e0 000208e8 000208f4 000208fc     ................
   20f98:	00020908 00020914 0002091c 00020924     ............$...
   20fa8:	00020930 00020940 00020950 00020958     0...@...P...X...
   20fb8:	00020964 0002096c 00020974 00020984     d...l...t.......
   20fc8:	00020994 0002099c 000209a4 000209ac     ................
   20fd8:	000209b4 000209bc 000209c4 000209cc     ................
   20fe8:	000209d8 000209e0 000209e8 000209f4     ................
   20ff8:	00020a00 00020a0c 00020a14 00020a1c     ................
   21008:	00020a28 52545351 6461203a 61682064     (...QSTR: add ha
   21018:	253d6873 656c2064 64253d6e 74616420     sh=%d len=%d dat
   21028:	2e253d61 000a732a 52545351 6c61203a     a=%.*s..QSTR: al
   21038:	61636f6c 6e206574 70207765 206c6f6f     locate new pool 
   21048:	7320666f 20657a69 000a6425 206e656c     of size %d..len 
   21058:	3128203c 203c3c20 2a203828 43494d20     < (1 << (8 * MIC
   21068:	59504f52 5453515f 59425f52 5f534554     ROPY_QSTR_BYTES_
   21078:	4c5f4e49 29294e45 00000000 2e2f2e2e     IN_LEN))....../.
   21088:	79702f2e 7473712f 00632e72              ./py/qstr.c.

00021094 <__func__.7558>:
   21094:	72747371 6f72665f 74735f6d 00006e72     qstr_from_strn..

000210a4 <pad_spaces>:
   210a4:	20202020 20202020 20202020 20202020                     
   210b4:	00000000                                ....

000210b8 <pad_zeroes>:
   210b8:	30303030 30303030 30303030 30303030     0000000000000000
   210c8:	00000000                                ....

000210cc <mp_plat_print>:
   210cc:	00000000 00001a31 65736162 203d3d20     ....1...base == 
   210dc:	7c7c2032 73616220 3d3d2065 7c203820     2 || base == 8 |
   210ec:	6162207c 3d206573 3031203d 207c7c20     | base == 10 || 
   210fc:	65736162 203d3d20 00003631 2e2f2e2e     base == 16..../.
   2110c:	79702f2e 70706d2f 746e6972 0000632e     ./py/mpprint.c..
   2111c:	00000000 65757274 00000000 736c6166     ....true....fals
   2112c:	00000065 6c756e28 0000296c 746d662a     e...(null)..*fmt
   2113c:	203d3d20 20272527 21207c7c 736e7522      == '%' || !"uns
   2114c:	6f707075 64657472 746d6620 61686320     upported fmt cha
   2115c:	00002272                                r"..

00021160 <__func__.8601>:
   21160:	705f706d 746e6972 5f706d5f 00746e69     mp_print_mp_int.

00021170 <__func__.8666>:
   21170:	765f706d 6e697270 00006674              mp_vprintf..

0002117c <attr>:
	...
   21184:	03030300 00000303 00000000 00000000     ................
	...
   2119c:	01010103 01010101 01010101 01010101     ................
   211ac:	45454545 45454545 01014545 01010101     EEEEEEEEEE......
   211bc:	59595901 19595959 19191919 19191919     .YYYYYY.........
   211cc:	19191919 19191919 01191919 01010101     ................
   211dc:	69696901 29696969 29292929 29292929     .iiiiii)))))))))
   211ec:	29292929 29292929 01292929 00010101     ))))))))))).....
   211fc:	5d5b2928 3a2c7d7b 3c7e403b 3c633d65     ()[]{},:;@~<e=c<
   2120c:	653e3d65 653e633d 3d652a3d 3d652a63     e=>e=c>e=*e=c*e=
   2121c:	2d3d652b 3e653d65 7c3d6526 652f3d65     +e=-e=e>&e=|e=/e
   2122c:	652f633d 3d65253d 3d3d655e 2e213d65     =c/e=%e=^e==e=!.
   2123c:	00000000                                ....

00021240 <tok_enc>:
   21240:	000211fc                                ....

00021244 <tok_enc_kind>:
   21244:	45444342 49484746 363d4c4b 3858373e     BCDEFGHIKL=6>7X8
   21254:	3157393f 2f593250 5a4f304e 553b543a     ?9W1P2Y/N0OZ:T;U
   21264:	52345133 563c5335 0000404d 736c6146     3Q4R5S<VM@..Fals
   21274:	00000065 656e6f4e 00000000 65757254     e...None....True
   21284:	00000000 65645f5f 5f677562 0000005f     ....__debug__...
   21294:	00646e61 00007361 65737361 00007472     and.as..assert..
   212a4:	61657262 0000006b 73616c63 00000073     break...class...
   212b4:	746e6f63 65756e69 00000000 00666564     continue....def.
   212c4:	006c6564 66696c65 00000000 65736c65     del.elif....else
   212d4:	00000000 65637865 00007470 616e6966     ....except..fina
   212e4:	00796c6c 00726f66 6d6f7266 00000000     lly.for.from....
   212f4:	626f6c67 00006c61 00006669 6f706d69     global..if..impo
   21304:	00007472 00006e69 00007369 626d616c     rt..in..is..lamb
   21314:	00006164 6c6e6f6e 6c61636f 00000000     da..nonlocal....
   21324:	00746f6e 0000726f 73736170 00000000     not.or..pass....
   21334:	73696172 00000065 75746572 00006e72     raise...return..
   21344:	00797274 6c696877 00000065 68746977     try.while...with
   21354:	00000000 6c656979 00000064              ....yield...

00021360 <tok_kw>:
   21360:	00021270 00021278 00021280 00021288     p...x...........
   21370:	00021294 00021298 0002129c 000212a4     ................
   21380:	000212ac 000212b4 000212c0 000212c4     ................
   21390:	000212c8 000212d0 000212d8 000212e0     ................
   213a0:	000212e8 000212ec 000212f4 000212fc     ................
   213b0:	00021300 00021308 0002130c 00021310     ................
   213c0:	00021318 00021324 00021328 0002132c     ....$...(...,...
   213d0:	00021334 0002133c 00021344 00021348     4...<...D...H...
   213e0:	00021350 00021358 63696e75 2065646f     P...X...unicode 
   213f0:	656d616e 63736520 73657061 00000000     name escapes....

00021400 <rule_act_table>:
   21400:	a8623261 22332233 22212121 24222221     a2b.3"3"!!!"!""$
   21410:	26232222 24242725 a4a46232 31223131     ""#&%'$$2b..11"1
   21420:	31313122 62313131 23236262 22232323     "111111bbb#####"
   21430:	a5233333 12130022 32242162 13336212     33#."...b!$2.b3.
   21440:	62232263 13332262 62222262 18621261     c"#bb"3.b""ba.b.
   21450:	62326212 151c1212 12126262 32631362     .b2b....bb..b.c2
   21460:	62622212 31313133 24321862 62246312     ."bb3111b.2$.c$b
   21470:	31632332 64126262 12122412 21222219     2#c1bb.d.$...""!
   21480:	12141212 62321113 1262121c 13336212     ......2b..b..b3.
   21490:	12621233 33633322 62222213 a5126212     3.b."3c3.""b.b..
   214a0:	00221223                                #.".

000214a4 <rule_arg_combined_table>:
   214a4:	20373001 203c203b 10071017 303e1042     .07 ; < ....B.>0
   214b4:	303d1043 20761049 104b204f 30502006     C.=0I.v O K.. P0
   214c4:	10482055 20901018 10141028 102a1016     U H.... (.....*.
   214d4:	20343031 30581029 20651021 205b101e     104 ).X0!.e ..[ 
   214e4:	205d1021 2067101f 20671025 20781013     !.] ..g %.g ..x 
   214f4:	10203068 10492078 306a2076 102c3072     h0 .x I.v j0r0,.
   21504:	10492078 30722076 2090101d 20311022     x I.v r0... ".1 
   21514:	20761049 102b3072 20761049 102d206c     I.v r0+.I.v l -.
   21524:	10492073 204d2076 3079201c 30461024     s I.v M . y0$.F0
   21534:	20781049 30461024 207a1049 1027201d     I.x $.F0I.z . '.
   21544:	1011207b 207b1026 207c2021 20211031     { ..&.{ ! | 1.! 
   21554:	103b2022 103c2023 103a2024 20802025     " ;.# <.$ :.% . 
   21564:	20812026 20822083 20832084 30872085     & . . . . . . .0
   21574:	30862088 30891042 10441043 1045308a     . .0B..0C.D..0E.
   21584:	30921046 10421047 10433097 20301044     F..0G.B..0C.D.0 
   21594:	104a1045 20781007 20781048 20781048     E.J...x H.x H.x 
   215a4:	20781049 10071015 10493096 102e2076     I.x .....0I.v ..
   215b4:	100430a1 2069204e 204d1004 30392031     .0..N i ..M 1 90
   215c4:	104c1004 302d2066 203a1004 20032033     ..L.f -0..: 3 . 
   215d4:	2078105a 1048203f 20412040 10072042     Z.x ? H.@ A B ..
   215e4:	30443043 30451031 10071032 10493043     C0D01.E02...C0I.
   215f4:	104d2078 10072078 20473043 20481048     x M.x ..C0G H.H 
   21604:	204a2049 304b1007 304c1031 10071032     I J ..K01.L02...
   21614:	2078104d 20691007 2004204e 20071004     M.x ..i N . ... 
   21624:	20572008 2010205a 20122011 20512005     . W Z . . . . Q 
   21634:	20562052 20532054 2054104d 20062034     R V T S M.T 4 . 
   21644:	20782020 104f104e 10511050 10541053       x N.O.P.Q.S.T.
   21654:	10561055 10571058 10521059 200a2009     U.V.X.W.Y.R.. . 
   21664:	200d200b 2078200c 101e3059 200e2078     . . . x Y0..x . 
   21674:	2066200f 205f205c 10313066 2064205e     . f \ _ f01.^ d 
   21684:	20641042 20601043 100c104a 30631007     B.d C.` J.....c0
   21694:	30632066 10071012 10482061 10482062     f c0....a H.b H.
   216a4:	104a1007 10481007 20781048 20142013     ..J...H.H.x . . 
   216b4:	20162015 20032017 20022033 1019206b     . . . . 3 . k ..
   216c4:	10492078 206d2076 20702071 30713072     x I.v m q p r0q0
   216d4:	306f101b 20761049 30632078 101c206e     ..o0I.v x c0n ..
   216e4:	20761049 1049101a 20742076 20781048     I.v ..I.v t H.x 
   216f4:	10123075 20772021 1004204e 20181005     u0..! w N ..... 
   21704:	201a1006 10202019 101a201c 201b2078     ... .  .. ..x . 
   21714:	201e201c 1036201f 10401038 103f103e     . . . 6.8.@.>.?.
   21724:	10221041 207e207d 10221026 307f1023     A.".} ~ &.".#..0
   21734:	10371026 102f1039 10311030 10351033     &.7.9./.0.1.3.5.
   21744:	20271034 102f2028 103d1030 208f2029     4.' ( /.0.=.) . 
   21754:	20831032 10081007 100a1009 100c100b     2.. ............
   21764:	100f100e 202a100d 202c202b 208a2034     ......* + , 4 . 
   21774:	308c208b 20782020 208d209f 308e1048     . .0  x . . H..0
   21784:	1048208b 202e202d 2091202f 20201048     . H.- . / . H.  
   21794:	20322021 209f3093 10482094 20323095     ! 2 .0. . H..02 
   217a4:	10421048 10433097 10482098 209a2099     H.B..0C.. H.. . 
   217b4:	1031209b 10322078 20782078 209f309c     . 1.x 2.x x .0. 
   217c4:	104d209d 209f2078 101d20a0 10222090     . M.x . . ... ".
   217d4:	309e201c 207a1020 20a2309e 101e2031     . .0 .z .0. 1 ..
   217e4:	00002078                                x ..

000217e8 <rule_arg_offset_table>:
   217e8:	04020100 12100e0c 17161514 1e1c1a19     ................
   217f8:	29262422 3f3b342f 4a464443 5452504e     "$&)/4;?CDFJNPRT
   21808:	5c5a5856 6462605e 6d6a6866 79767370     VXZ\^`bdfhjmpsvy
   21818:	827f7d7b 8c890087 9591908e 9c9a9896     {}..............
   21828:	a7a4a29f afadaba9 b8b6b4b2 bfbdbbba     ................
   21838:	cccbc9c7 ded2d0ce e9e7e5e3 f3f0edeb     ................
   21848:	faf8f6f4 0200fefc 0f0e0604 1c181513     ................
   21858:	25221f1e 2d2b2927 39373331 4846443b     .."%')+-1379;DFH
   21868:	514d4b49 58575653 6a68665a 72706e6c     IKMQSVWXZfhjlnpr
   21878:	7b797775 84817f7d 8d8b8986 9593918f     uwy{}...........
   21888:	009f9d9a                                ....

0002188c <FIRST_RULE_WITH_OFFSET_ABOVE_255>:
   2188c:	00000066 67726128 52202620 5f454c55     f...(arg & RULE_
   2189c:	5f475241 444e494b 53414d5f 3d20294b     ARG_KIND_MASK) =
   218ac:	5552203d 415f454c 525f4752 20454c55     = RULE_ARG_RULE 
   218bc:	28207c7c 20677261 55522026 415f454c     || (arg & RULE_A
   218cc:	4b5f4752 5f444e49 4b53414d 3d3d2029     RG_KIND_MASK) ==
   218dc:	4c555220 52415f45 504f5f47 55525f54      RULE_ARG_OPT_RU
   218ec:	0000454c 2e2f2e2e 79702f2e 7261702f     LE..../../py/par
   218fc:	632e6573 00000000 3420255b 00205d64     se.c....[% 4d] .
   2190c:	20202020 00202020 4c4c554e 00000000            .NULL....
   2191c:	28746e69 0a296425 00000000 25286469     int(%d).....id(%
   2192c:	000a2973 28727473 0a297325 00000000     s)..str(%s).....
   2193c:	65747962 73252873 00000a29 505f504d     bytes(%s)...MP_P
   2194c:	45535241 444f4e5f 454c5f45 4b5f4641     ARSE_NODE_LEAF_K
   2195c:	28444e49 20296e70 4d203d3d 41505f50     IND(pn) == MP_PA
   2196c:	5f455352 45444f4e 4b4f545f 00004e45     RSE_NODE_TOKEN..
   2197c:	286b6f74 0a297525 00000000 6574696c     tok(%u).....lite
   2198c:	206c6172 736e6f63 70252874 00000a29     ral const(%p)...
   2199c:	656c7572 29752528 3d6e2820 0a297525     rule(%u) (n=%u).
   219ac:	00000000 73726170 3e2d7265 75736572     ....parser->resu
   219bc:	735f746c 6b636174 706f745f 30203e20     lt_stack_top > 0
   219cc:	00000000 73726170 3e2d7265 75736572     ....parser->resu
   219dc:	735f746c 6b636174 706f745f 70203e20     lt_stack_top > p
   219ec:	0000736f 206b6f74 4d203d3d 4f545f50     os..tok == MP_TO
   219fc:	5f4e454b 545f504f 45444c49 00000000     KEN_OP_TILDE....
   21a0c:	646e696b 203d3d20 454c5552 4752415f     kind == RULE_ARG
   21a1c:	4c55525f 00000045 203e2069 00000030     _RULE...i > 0...
   21a2c:	3d3d2069 00006e20 6c757228 63615f65     i == n..(rule_ac
   21a3c:	20262074 454c5552 5443415f 4e494b5f     t & RULE_ACT_KIN
   21a4c:	414d5f44 20294b53 52203d3d 5f454c55     D_MASK) == RULE_
   21a5c:	5f544341 5453494c 00000000 67726128     ACT_LIST....(arg
   21a6c:	52202620 5f454c55 5f475241 444e494b      & RULE_ARG_KIND
   21a7c:	53414d5f 3d20294b 5552203d 415f454c     _MASK) == RULE_A
   21a8c:	525f4752 00454c55 3d3e2069 00003120     RG_RULE.i >= 1..
   21a9c:	78656e75 74636570 69206465 6e65646e     unexpected inden
   21aac:	00000074 6e696e75 746e6564 656f6420     t...unindent doe
   21abc:	74276e73 74616d20 61206863 6f20796e     sn't match any o
   21acc:	72657475 646e6920 20746e65 6576656c     uter indent leve
   21adc:	0000006c 61766e69 2064696c 746e7973     l...invalid synt
   21aec:	00007861 73726170 722e7265 6c757365     ax..parser.resul
   21afc:	74735f74 5f6b6361 20706f74 31203d3d     t_stack_top == 1
   21b0c:	00000000                                ....

00021b10 <__func__.9098>:
   21b10:	68737570 6c75725f 72665f65 615f6d6f     push_rule_from_a
   21b20:	00006772                                rg..

00021b24 <__func__.9138>:
   21b24:	705f706d 65737261 646f6e5f 72705f65     mp_parse_node_pr
   21b34:	00746e69                                int.

00021b38 <__func__.9148>:
   21b38:	5f706f70 75736572 0000746c              pop_result..

00021b44 <__func__.9153>:
   21b44:	6b656570 7365725f 00746c75              peek_result.

00021b50 <token_to_op.9219>:
   21b50:	ff1c1b1a ff1f1dff 0019ff18              ............

00021b5c <__func__.9228>:
   21b5c:	646c6f66 6e6f635f 6e617473 00007374     fold_constants..

00021b6c <__func__.9266>:
   21b6c:	705f706d 65737261 00000000              mp_parse....

00021b78 <scope_simple_name_table>:
   21b78:	32310030 00353433 505f504d 45535241     0.12345.MP_PARSE
   21b88:	444f4e5f 53495f45 5254535f 28544355     _NODE_IS_STRUCT(
   21b98:	00296e70 2e2f2e2e 79702f2e 6f63732f     pn).../../py/sco
   21ba8:	632e6570 00000000 706f6373 703e2d65     pe.c....scope->p
   21bb8:	6e657261 3d212074 4c554e20 0000004c     arent != NULL...
   21bc8:	703e2d73 6e657261 3d212074 4c554e20     s->parent != NUL
   21bd8:	0000004c 3e2d6469 646e696b 203d3d20     L...id->kind == 
   21be8:	495f4449 5f4f464e 444e494b 4552465f     ID_INFO_KIND_FRE
   21bf8:	7c7c2045 2d646920 6e696b3e 3d3d2064     E || id->kind ==
   21c08:	5f444920 4f464e49 4e494b5f 45435f44      ID_INFO_KIND_CE
   21c18:	00004c4c                                LL..

00021c1c <__func__.6885>:
   21c1c:	706f6373 656e5f65 00000077              scope_new...

00021c28 <__func__.6914>:
   21c28:	706f6373 6c635f65 5f65736f 7265766f     scope_close_over
   21c38:	5f6e695f 65726170 0073746e 706d6f63     _in_parents.comp
   21c48:	75633e2d 78655f72 74706563 76656c5f     ->cur_except_lev
   21c58:	3e206c65 00003020 2e2f2e2e 79702f2e     el > 0..../../py
   21c68:	6d6f632f 656c6970 0000632e 505f504d     /compile.c..MP_P
   21c78:	45535241 444f4e5f 53495f45 5254535f     ARSE_NODE_IS_STR
   21c88:	5f544355 444e494b 736e7028 6f6e3e2d     UCT_KIND(pns->no
   21c98:	5b736564 202c5d30 745f4e50 6c747365     des[0], PN_testl
   21ca8:	5f747369 706d6f63 00000029 505f504d     ist_comp)...MP_P
   21cb8:	45535241 444f4e5f 53495f45 5254535f     ARSE_NODE_IS_STR
   21cc8:	28544355 31736e70 6f6e3e2d 5b736564     UCT(pns1->nodes[
   21cd8:	202d206e 00295d31 505f504d 45535241     n - 1]).MP_PARSE
   21ce8:	444f4e5f 53495f45 2844495f 31736e70     _NODE_IS_ID(pns1
   21cf8:	6f6e3e2d 5b736564 00295d30 276e6163     ->nodes[0]).can'
   21d08:	73612074 6e676973 206f7420 72707865     t assign to expr
   21d18:	69737365 00006e6f 746c756d 656c7069     ession..multiple
   21d28:	20782a20 61206e69 67697373 6e656d6e      *x in assignmen
   21d38:	00000074 5f504d21 53524150 4f4e5f45     t...!MP_PARSE_NO
   21d48:	495f4544 554e5f53 70284c4c 0000296e     DE_IS_NULL(pn)..
   21d58:	505f504d 45535241 444f4e5f 53495f45     MP_PARSE_NODE_IS
   21d68:	4c554e5f 6e70284c 3e2d3273 65646f6e     _NULL(pns2->node
   21d78:	5d305b73 00000029 6f705f6e 65645f73     s[0])...n_pos_de
   21d88:	6c756166 3e207374 0030203d 776b5f6e     faults >= 0.n_kw
   21d98:	6665645f 746c7561 3d3e2073 00003020     _defaults >= 0..
   21da8:	505f504d 45535241 444f4e5f 53495f45     MP_PARSE_NODE_IS
   21db8:	5254535f 28544355 00296e70 6b5f6e70     _STRUCT(pn).pn_k
   21dc8:	20646e69 50203d3d 61765f4e 67726172     ind == PN_vararg
   21dd8:	73696c73 616e5f74 0000656d 2d6e6f6e     slist_name..non-
   21de8:	61666564 20746c75 75677261 746e656d     default argument
   21df8:	6c6f6620 73776f6c 66656420 746c7561      follows default
   21e08:	67726120 6e656d75 00000074 61766e69      argument...inva
   21e18:	2064696c 7263696d 7479706f 206e6f68     lid micropython 
   21e28:	6f636564 6f746172 00000072 505f504d     decorator...MP_P
   21e38:	45535241 444f4e5f 53495f45 5254535f     ARSE_NODE_IS_STR
   21e48:	5f544355 444e494b 646f6e28 695b7365     UCT_KIND(nodes[i
   21e58:	50202c5d 65645f4e 61726f63 29726f74     ], PN_decorator)
   21e68:	00000000 505f504d 45535241 444f4e5f     ....MP_PARSE_NOD
   21e78:	53495f45 2844495f 656d616e 646f6e5f     E_IS_ID(name_nod
   21e88:	6a5b7365 0000295d 505f504d 45535241     es[j])..MP_PARSE
   21e98:	444f4e5f 54535f45 54435552 4e494b5f     _NODE_STRUCT_KIN
   21ea8:	6e702844 6f625f73 20297964 50203d3d     D(pns_body) == P
   21eb8:	6c635f4e 64737361 00006665 505f504d     N_classdef..MP_P
   21ec8:	45535241 444f4e5f 53495f45 5254535f     ARSE_NODE_IS_STR
   21ed8:	5f544355 444e494b 2c6e7028 5f4e5020     UCT_KIND(pn, PN_
   21ee8:	74736574 7473696c 6d6f635f 00002970     testlist_comp)..
   21ef8:	505f504d 45535241 444f4e5f 53495f45     MP_PARSE_NODE_IS
   21f08:	4c554e5f 6e70284c 3e2d3173 65646f6e     _NULL(pns1->node
   21f18:	5d305b73 00000029 276e6163 65642074     s[0])...can't de
   21f28:	6574656c 70786520 73736572 006e6f69     lete expression.
   21f38:	65726227 20276b61 7374756f 20656469     'break' outside 
   21f48:	706f6f6c 00000000 6e6f6327 756e6974     loop....'continu
   21f58:	6f202765 69737475 6c206564 00706f6f     e' outside loop.
   21f68:	706d6f63 75633e2d 78655f72 74706563     comp->cur_except
   21f78:	76656c5f 3e206c65 6f63203d 3e2d706d     _level >= comp->
   21f88:	61657262 6f635f6b 6e69746e 655f6575     break_continue_e
   21f98:	70656378 656c5f74 006c6576 74657227     xcept_level.'ret
   21fa8:	276e7275 74756f20 65646973 6e756620     urn' outside fun
   21fb8:	6f697463 0000006e 505f504d 45535241     ction...MP_PARSE
   21fc8:	444f4e5f 53495f45 5254535f 5f544355     _NODE_IS_STRUCT_
   21fd8:	444e494b 2c6e7028 5f4e5020 74746f64     KIND(pn, PN_dott
   21fe8:	6e5f6465 29656d61 00000000 5f504d21     ed_name)....!MP_
   21ff8:	53524150 4f4e5f45 495f4544 554e5f53     PARSE_NODE_IS_NU
   22008:	70284c4c 6d695f6e 74726f70 756f735f     LL(pn_import_sou
   22018:	29656372 00000000 505f504d 45535241     rce)....MP_PARSE
   22028:	444f4e5f 53495f45 5254535f 5f544355     _NODE_IS_STRUCT_
   22038:	444e494b 5f6e7028 65646f6e 5d695b73     KIND(pn_nodes[i]
   22048:	4e50202c 706d695f 5f74726f 6e5f7361     , PN_import_as_n
   22058:	29656d61 00000000 6e656469 69666974     ame)....identifi
   22068:	72207265 66656465 64656e69 20736120     er redefined as 
   22078:	626f6c67 00006c61 62206f6e 69646e69     global..no bindi
   22088:	6620676e 6e20726f 6f6c6e6f 206c6163     ng for nonlocal 
   22098:	6e756f66 00000064 6e656469 69666974     found...identifi
   220a8:	72207265 66656465 64656e69 20736120     er redefined as 
   220b8:	6c6e6f6e 6c61636f 00000000 276e6163     nonlocal....can'
   220c8:	65642074 72616c63 6f6e2065 636f6c6e     t declare nonloc
   220d8:	69206c61 756f206e 20726574 65646f63     al in outer code
   220e8:	00000000 505f504d 45535241 444f4e5f     ....MP_PARSE_NOD
   220f8:	53495f45 5254535f 5f544355 444e494b     E_IS_STRUCT_KIND
   22108:	5f6e7028 66696c65 2c5d695b 5f4e5020     (pn_elif[i], PN_
   22118:	735f6669 5f746d74 66696c65 00000029     if_stmt_elif)...
   22128:	505f504d 45535241 444f4e5f 53495f45     MP_PARSE_NODE_IS
   22138:	414d535f 495f4c4c 7028544e 74735f6e     _SMALL_INT(pn_st
   22148:	00297065 505f504d 45535241 444f4e5f     ep).MP_PARSE_NOD
   22158:	53495f45 5254535f 5f544355 444e494b     E_IS_STRUCT_KIND
   22168:	5f6e7028 65637865 5b737470 202c5d69     (pn_excepts[i], 
   22178:	745f4e50 735f7972 5f746d74 65637865     PN_try_stmt_exce
   22188:	00297470 61666564 20746c75 63786527     pt).default 'exc
   22198:	27747065 73756d20 65622074 73616c20     ept' must be las
   221a8:	00000074 505f504d 45535241 444f4e5f     t...MP_PARSE_NOD
   221b8:	53495f45 4c554e5f 6e70284c 736c655f     E_IS_NULL(pn_els
   221c8:	00002965 505f504d 45535241 444f4e5f     e)..MP_PARSE_NOD
   221d8:	53495f45 5254535f 28544355 2d736e70     E_IS_STRUCT(pns-
   221e8:	646f6e3e 315b7365 0000295d 203e206e     >nodes[1])..n > 
   221f8:	00000030 505f504d 45535241 444f4e5f     0...MP_PARSE_NOD
   22208:	53495f45 4b4f545f 70284e45 2d31736e     E_IS_TOKEN(pns1-
   22218:	646f6e3e 305b7365 0000295d 505f504d     >nodes[0])..MP_P
   22228:	45535241 444f4e5f 53495f45 5254535f     ARSE_NODE_IS_STR
   22238:	5f544355 444e494b 736e7028 6f6e3e2d     UCT_KIND(pns->no
   22248:	5b736564 202c5d31 745f4e50 5f747365     des[1], PN_test_
   22258:	655f6669 2965736c 00000000 505f504d     if_else)....MP_P
   22268:	45535241 444f4e5f 53495f45 5254535f     ARSE_NODE_IS_STR
   22278:	28544355 2d736e70 646f6e3e 695b7365     UCT(pns->nodes[i
   22288:	0000295d 646e696b 203d3d20 635f4e50     ])..kind == PN_c
   22298:	5f706d6f 695f706f 00000073 6d20782a     omp_op_is...*x m
   222a8:	20747375 61206562 67697373 6e656d6e     ust be assignmen
   222b8:	61742074 74656772 00000000 206b6f74     t target....tok 
   222c8:	4d203d3d 4f545f50 5f4e454b 445f504f     == MP_TOKEN_OP_D
   222d8:	4d5f4c42 0045524f 206b6f74 4d203d3d     BL_MORE.tok == M
   222e8:	4f545f50 5f4e454b 545f504f 45444c49     P_TOKEN_OP_TILDE
   222f8:	00000000 65707573 20292872 276e6163     ....super() can'
   22308:	69662074 7320646e 00666c65 276e6163     t find self.can'
   22318:	61682074 6d206576 69746c75 20656c70     t have multiple 
   22328:	0000782a 276e6163 61682074 6d206576     *x..can't have m
   22338:	69746c75 20656c70 00782a2a 2053484c     ultiple **x.LHS 
   22348:	6b20666f 6f777965 61206472 6d206772     of keyword arg m
   22358:	20747375 61206562 6469206e 00000000     ust be an id....
   22368:	2d6e6f6e 7779656b 2064726f 20677261     non-keyword arg 
   22378:	65746661 2f2a2072 00002a2a 2d6e6f6e     after */**..non-
   22388:	7779656b 2064726f 20677261 65746661     keyword arg afte
   22398:	656b2072 726f7779 72612064 00000067     r keyword arg...
   223a8:	505f504d 45535241 444f4e5f 54535f45     MP_PARSE_NODE_ST
   223b8:	54435552 4d554e5f 444f4e5f 70285345     RUCT_NUM_NODES(p
   223c8:	2029736e 32203d3d 00000000 505f504d     ns) == 2....MP_P
   223d8:	45535241 444f4e5f 53495f45 5254535f     ARSE_NODE_IS_STR
   223e8:	5f544355 444e494b 736e7028 6f6e3e2d     UCT_KIND(pns->no
   223f8:	5b736564 202c5d31 635f4e50 5f706d6f     des[1], PN_comp_
   22408:	29726f66 00000000 5f504d21 53524150     for)....!MP_PARS
   22418:	4f4e5f45 495f4544 554e5f53 70284c4c     E_NODE_IS_NULL(p
   22428:	3e2d736e 65646f6e 5d315b73 00000029     ns->nodes[1])...
   22438:	505f504d 45535241 444f4e5f 53495f45     MP_PARSE_NODE_IS
   22448:	4c554e5f 6e70284c 3e2d3373 65646f6e     _NULL(pns3->node
   22458:	5d305b73 00000029 61766e69 2064696c     s[0])...invalid 
   22468:	746e7973 00007861 505f504d 45535241     syntax..MP_PARSE
   22478:	444f4e5f 54535f45 54435552 4e494b5f     _NODE_STRUCT_KIN
   22488:	6e702844 20293173 50203d3d 6f635f4e     D(pns1) == PN_co
   22498:	665f706d 0000726f 00000030 65697927     mp_for..0...'yie
   224a8:	2027646c 7374756f 20656469 636e7566     ld' outside func
   224b8:	6e6f6974 00000000                       tion....

000224c0 <compile_function>:
   224c0:	00005279 00005279 00006001 000061b9     yR..yR...`...a..
   224d0:	00005279 0000797d 000053ff 00006471     yR..}y...S..qd..
   224e0:	00005279 00006495 00006495 00006525     yR...d...d..%e..
   224f0:	0000657d 000065a5 0000685f 00006885     }e...e.._h...h..
   22500:	00006bb9 00006bb9 00006c6d 00006ced     .k...k..ml...l..
   22510:	00006ea5 00007191 0000774d 000078f5     .n...q..Mw...x..
   22520:	00005279 00007bd5 00007c91 00007c91     yR...{...|...|..
   22530:	00007cd7 00007cd7 00007d53 00007d7d     .|...|..S}..}}..
   22540:	00007fa5 00007fc9 00007fc9 00007fc9     ................
   22550:	0000802b 0000802b 0000802b 00008119     +...+...+.......
   22560:	00008391 00008189 000086ad 000087b9     ................
   22570:	000088fd 00008ac9 00008ae9 00008b13     ................
   22580:	000053ff 000053ff 00008b37 00008b61     .S...S..7...a...
   22590:	00008b8d 00008c51 505f504d 45535241     ....Q...MP_PARSE
   225a0:	444f4e5f 54535f45 54435552 4e494b5f     _NODE_STRUCT_KIN
   225b0:	6e702844 3c202973 4e50203d 6e6f635f     D(pns) <= PN_con
   225c0:	6f5f7473 63656a62 00000074 505f504d     st_object...MP_P
   225d0:	45535241 444f4e5f 53495f45 5254535f     ARSE_NODE_IS_STR
   225e0:	5f544355 444e494b 736e7028 6f6e3e2d     UCT_KIND(pns->no
   225f0:	5b736564 202c5d30 745f4e50 65647066     des[0], PN_tfpde
   22600:	00002966 505f504d 45535241 444f4e5f     f)..MP_PARSE_NOD
   22610:	54535f45 54435552 4e494b5f 6e702844     E_STRUCT_KIND(pn
   22620:	3d202973 6e70203d 6c62645f 6174735f     s) == pn_dbl_sta
   22630:	00000072 75677261 746e656d 6d616e20     r...argument nam
   22640:	65722065 64657375 00000000 505f504d     e reused....MP_P
   22650:	45535241 444f4e5f 54535f45 54435552     ARSE_NODE_STRUCT
   22660:	4e494b5f 6d282844 61705f70 5f657372     _KIND((mp_parse_
   22670:	65646f6e 7274735f 5f746375 70292a74     node_struct_t*)p
   22680:	74695f6e 20297265 50203d3d 6f635f4e     n_iter) == PN_co
   22690:	665f706d 0000726f 706f6373 6b3e2d65     mp_for..scope->k
   226a0:	20646e69 53203d3d 45504f43 444f4d5f     ind == SCOPE_MOD
   226b0:	00454c55 505f504d 45535241 444f4e5f     ULE.MP_PARSE_NOD
   226c0:	53495f45 5254535f 28544355 706f6373     E_IS_STRUCT(scop
   226d0:	703e2d65 0000296e 505f504d 45535241     e->pn)..MP_PARSE
   226e0:	444f4e5f 54535f45 54435552 4e494b5f     _NODE_STRUCT_KIN
   226f0:	6e702844 3d202973 4e50203d 6e75665f     D(pns) == PN_fun
   22700:	66656463 00000000 505f504d 45535241     cdef....MP_PARSE
   22710:	444f4e5f 54535f45 54435552 4d554e5f     _NODE_STRUCT_NUM
   22720:	444f4e5f 70285345 2029736e 33203d3d     _NODES(pns) == 3
   22730:	00000000 706f6373 6b3e2d65 20646e69     ....scope->kind 
   22740:	53203d3d 45504f43 414c435f 00005353     == SCOPE_CLASS..
   22750:	505f504d 45535241 444f4e5f 54535f45     MP_PARSE_NODE_ST
   22760:	54435552 4e494b5f 6e702844 3d202973     RUCT_KIND(pns) =
   22770:	4e50203d 616c635f 65647373 00000066     = PN_classdef...
   22780:	21206469 554e203d 00004c4c 706d6f63     id != NULL..comp
   22790:	75633e2d 78655f72 74706563 76656c5f     ->cur_except_lev
   227a0:	3d206c65 0030203d 64692821 663e2d32     el == 0.!(id2->f
   227b0:	7367616c 49202620 4c465f44 495f4741     lags & ID_FLAG_I
   227c0:	41505f53 294d4152 00000000              S_PARAM)....

000227cc <__func__.8746>:
   227cc:	706d6f63 5f656c69 72636564 65736165     compile_decrease
   227dc:	6378655f 5f747065 6576656c 0000006c     _except_level...

000227ec <__func__.8828>:
   227ec:	66695f63 6e6f635f 00000064              c_if_cond...

000227f8 <__func__.8849>:
   227f8:	73615f63 6e676973 6f74615f 78655f6d     c_assign_atom_ex
   22808:	00007270                                pr..

0002280c <__func__.8871>:
   2280c:	73615f63 6e676973 00000000              c_assign....

00022818 <__func__.8897>:
   22818:	736f6c63 766f5f65 765f7265 61697261     close_over_varia
   22828:	73656c62 6374655f 00000000              bles_etc....

00022834 <__func__.8914>:
   22834:	706d6f63 5f656c69 636e7566 5f666564     compile_funcdef_
   22844:	626d616c 5f666564 61726170 0000006d     lambdef_param...

00022854 <__func__.8959>:
   22854:	706d6f63 5f656c69 6f636564 65746172     compile_decorate
   22864:	00000064                                d...

00022868 <__func__.8992>:
   22868:	65645f63 74735f6c 0000746d              c_del_stmt..

00022874 <__func__.9012>:
   22874:	706d6f63 5f656c69 61657262 6f635f6b     compile_break_co
   22884:	735f746e 00746d74                       nt_stmt.

0002288c <__func__.9036>:
   2288c:	695f6f64 726f706d 616e5f74 0000656d     do_import_name..

0002289c <__func__.9074>:
   2289c:	706d6f63 5f656c69 6f706d69 665f7472     compile_import_f
   228ac:	006d6f72                                rom.

000228b0 <__func__.9136>:
   228b0:	706d6f63 5f656c69 735f6669 00746d74     compile_if_stmt.

000228c0 <__func__.9169>:
   228c0:	706d6f63 5f656c69 5f726f66 746d7473     compile_for_stmt
   228d0:	74706f5f 73696d69 725f6465 65676e61     _optimised_range
   228e0:	00000000                                ....

000228e4 <__func__.9202>:
   228e4:	706d6f63 5f656c69 5f797274 65637865     compile_try_exce
   228f4:	00007470                                pt..

000228f8 <__func__.9221>:
   228f8:	706d6f63 5f656c69 5f797274 616e6966     compile_try_fina
   22908:	00796c6c                                lly.

0002290c <__func__.9226>:
   2290c:	706d6f63 5f656c69 5f797274 746d7473     compile_try_stmt
   2291c:	00000000                                ....

00022920 <__func__.9246>:
   22920:	706d6f63 5f656c69 68746977 6d74735f     compile_with_stm
   22930:	00000074                                t...

00022934 <__func__.9256>:
   22934:	706d6f63 5f656c69 72707865 6d74735f     compile_expr_stm
   22944:	00000074                                t...

00022948 <__func__.9282>:
   22948:	706d6f63 5f656c69 74736574 5f66695f     compile_test_if_
   22958:	72707865 00000000                       expr....

00022960 <__func__.9325>:
   22960:	706d6f63 5f656c69 706d6f63 73697261     compile_comparis
   22970:	00006e6f                                on..

00022974 <__func__.9363>:
   22974:	706d6f63 5f656c69 6d726574 00000000     compile_term....

00022984 <__func__.9377>:
   22984:	706d6f63 5f656c69 74636166 325f726f     compile_factor_2
   22994:	00000000                                ....

00022998 <__func__.9426>:
   22998:	706d6f63 5f656c69 706d6f63 65686572     compile_comprehe
   229a8:	6f69736e 0000006e                       nsion...

000229b0 <__func__.9434>:
   229b0:	706d6f63 5f656c69 6d6f7461 7261705f     compile_atom_par
   229c0:	00006e65                                en..

000229c4 <__func__.9443>:
   229c4:	706d6f63 5f656c69 6d6f7461 6172625f     compile_atom_bra
   229d4:	74656b63 00000000                       cket....

000229dc <__func__.9450>:
   229dc:	706d6f63 5f656c69 6d6f7461 6172625f     compile_atom_bra
   229ec:	00006563                                ce..

000229f0 <__func__.9513>:
   229f0:	706d6f63 5f656c69 65646f6e 00000000     compile_node....

00022a00 <__func__.9525>:
   22a00:	706d6f63 5f656c69 706f6373 75665f65     compile_scope_fu
   22a10:	6c5f636e 64626d61 61705f61 006d6172     nc_lambda_param.

00022a20 <__func__.9546>:
   22a20:	706d6f63 5f656c69 706f6373 6f635f65     compile_scope_co
   22a30:	695f706d 00726574                       mp_iter.

00022a38 <__func__.9557>:
   22a38:	706d6f63 5f656c69 706f6373 00000065     compile_scope...

00022a48 <__func__.9592>:
   22a48:	706f6373 6f635f65 7475706d 68745f65     scope_compute_th
   22a58:	73676e69 00000000 21206469 554e203d     ings....id != NU
   22a68:	00004c4c 2e2f2e2e 79702f2e 696d652f     LL..../../py/emi
   22a78:	6d6f6374 2e6e6f6d 00000063 3e2d6469     tcommon.c...id->
   22a88:	646e696b 203d3d20 495f4449 5f4f464e     kind == ID_INFO_
   22a98:	444e494b 4c45435f 7c7c204c 2d646920     KIND_CELL || id-
   22aa8:	6e696b3e 3d3d2064 5f444920 4f464e49     >kind == ID_INFO
   22ab8:	4e494b5f 52465f44 00004545              _KIND_FREE..

00022ac4 <__func__.7484>:
   22ac4:	655f706d 5f74696d 6d6d6f63 695f6e6f     mp_emit_common_i
   22ad4:	706f5f64 00000000 74696d65 6f633e2d     d_op....emit->co
   22ae4:	695f6564 5f6f666e 7366666f 2b207465     de_info_offset +
   22af4:	6d756e20 7479625f 745f7365 72775f6f      num_bytes_to_wr
   22b04:	20657469 65203d3c 2d74696d 646f633e     ite <= emit->cod
   22b14:	6e695f65 735f6f66 00657a69 2e2f2e2e     e_info_size.../.
   22b24:	79702f2e 696d652f 2e636274 00000063     ./py/emitbc.c...
   22b34:	74737128 203e3e20 20293631 30203d3d     (qst >> 16) == 0
   22b44:	00000000 74696d65 79623e2d 6f636574     ....emit->byteco
   22b54:	6f5f6564 65736666 202b2074 5f6d756e     de_offset + num_
   22b64:	65747962 6f745f73 6972775f 3c206574     bytes_to_write <
   22b74:	6d65203d 3e2d7469 65747962 65646f63     = emit->bytecode
   22b84:	7a69735f 00000065 3e2d6469 61636f6c     _size...id->loca
   22b94:	756e5f6c 203c206d 00353532 74696d65     l_num < 255.emit
   22ba4:	74733e2d 5f6b6361 657a6973 203d3d20     ->stack_size == 
   22bb4:	00000030 74696d65 61703e2d 3c207373     0...emit->pass <
   22bc4:	504d203d 5341505f 54535f53 5f4b4341     = MP_PASS_STACK_
   22bd4:	455a4953 207c7c20 696d6528 633e2d74     SIZE || (emit->c
   22be4:	756e5f74 626f5f6d 3d3d206a 696d6520     t_num_obj == emi
   22bf4:	633e2d74 75635f74 626f5f72 0000296a     t->ct_cur_obj)..
   22c04:	5f706d28 5f746e69 6d652974 3e2d7469     (mp_int_t)emit->
   22c14:	63617473 69735f6b 2b20657a 6c656420     stack_size + del
   22c24:	3e206174 0030203d 203c206c 74696d65     ta >= 0.l < emit
   22c34:	616d3e2d 756e5f78 616c5f6d 736c6562     ->max_num_labels
   22c44:	00000000 74696d65 616c3e2d 5f6c6562     ....emit->label_
   22c54:	7366666f 5b737465 3d205d6c 6d28203d     offsets[l] == (m
   22c64:	69755f70 745f746e 00312d29 74696d65     p_uint_t)-1.emit
   22c74:	616c3e2d 5f6c6562 7366666f 5b737465     ->label_offsets[
   22c84:	3d205d6c 6d65203d 3e2d7469 65747962     l] == emit->byte
   22c94:	65646f63 66666f5f 00746573 206b6f74     code_offset.tok 
   22ca4:	4d203d3d 4f545f50 5f4e454b 494c4c45     == MP_TOKEN_ELLI
   22cb4:	53495350 00000000 6c635f6e 6465736f     PSIS....n_closed
   22cc4:	65766f5f 3d3c2072 35353220 00000000     _over <= 255....
   22cd4:	72615f6e 3c207367 0032203d              n_args <= 2.

00022ce0 <mp_emit_bc_method_table_load_id_ops>:
   22ce0:	0000a6c1 0000a70f                       ........

00022ce8 <mp_emit_bc_method_table_store_id_ops>:
   22ce8:	0000a83d 0000a88d                       =.......

00022cf0 <mp_emit_bc_method_table_delete_id_ops>:
   22cf0:	0000a8bd 0000a8e5                       ........

00022cf8 <__func__.8278>:
   22cf8:	74696d65 7465675f 7275635f 5f6f745f     emit_get_cur_to_
   22d08:	74697277 6f635f65 695f6564 006f666e     write_code_info.

00022d18 <__func__.8292>:
   22d18:	74696d65 6972775f 635f6574 5f65646f     emit_write_code_
   22d28:	6f666e69 7473715f 00000072              info_qstr...

00022d34 <__func__.8298>:
   22d34:	74696d65 7465675f 7275635f 5f6f745f     emit_get_cur_to_
   22d44:	74697277 79625f65 6f636574 00006564     write_bytecode..

00022d54 <__func__.8340>:
   22d54:	74696d65 6972775f 625f6574 63657479     emit_write_bytec
   22d64:	5f65646f 65747962 7473715f 00000072     ode_byte_qstr...

00022d74 <__func__.8374>:
   22d74:	655f706d 5f74696d 735f6362 74726174     mp_emit_bc_start
   22d84:	7361705f 00000073                       _pass...

00022d8c <__func__.8391>:
   22d8c:	655f706d 5f74696d 655f6362 705f646e     mp_emit_bc_end_p
   22d9c:	00737361                                ass.

00022da0 <__func__.8399>:
   22da0:	655f706d 5f74696d 615f6362 73756a64     mp_emit_bc_adjus
   22db0:	74735f74 5f6b6361 657a6973 00000000     t_stack_size....

00022dc0 <__func__.8412>:
   22dc0:	655f706d 5f74696d 6c5f6362 6c656261     mp_emit_bc_label
   22dd0:	7373615f 006e6769                       _assign.

00022dd8 <__func__.8427>:
   22dd8:	655f706d 5f74696d 6c5f6362 5f64616f     mp_emit_bc_load_
   22de8:	736e6f63 6f745f74 0000006b              const_tok...

00022df4 <__func__.8606>:
   22df4:	655f706d 5f74696d 6d5f6362 5f656b61     mp_emit_bc_make_
   22e04:	736f6c63 00657275                       closure.

00022e0c <__func__.8634>:
   22e0c:	655f706d 5f74696d 725f6362 65736961     mp_emit_bc_raise
   22e1c:	7261765f 73677261 00000000 28746e69     _varargs....int(
   22e2c:	72612029 20322067 7473756d 20656220     ) arg 2 must be 
   22e3c:	32203d3e 646e6120 203d3c20 00003633     >= 2 and <= 36..
   22e4c:	61766e69 2064696c 746e7973 66207861     invalid syntax f
   22e5c:	6920726f 6765746e 00007265 69636564     or integer..deci
   22e6c:	206c616d 626d756e 20737265 20746f6e     mal numbers not 
   22e7c:	70707573 6574726f 00000064 69737361     supported...assi
   22e8c:	62206e67 20657479 65646f63 6f63203a     gn byte code: co
   22e9c:	253d6564 656c2070 75253d6e 616c6620     de=%p len=%u fla
   22eac:	253d7367 00000a78 656b616d 6e75665f     gs=%x...make_fun
   22ebc:	6f697463 72665f6e 725f6d6f 635f7761     ction_from_raw_c
   22ecc:	2065646f 000a7025 21206372 554e203d     ode %p..rc != NU
   22edc:	00004c4c 2e2f2e2e 79702f2e 696d652f     LL..../../py/emi
   22eec:	756c6774 00632e65 5f666564 73677261     tglue.c.def_args
   22efc:	203d3d20 4f5f504d 4e5f4a42 204c4c55      == MP_OBJ_NULL 
   22f0c:	4d207c7c 424f5f50 53495f4a 5059545f     || MP_OBJ_IS_TYP
   22f1c:	65642845 72615f66 202c7367 5f706d26     E(def_args, &mp_
   22f2c:	65707974 7075745f 0029656c 5f666564     type_tuple).def_
   22f3c:	615f776b 20736772 4d203d3d 424f5f50     kw_args == MP_OB
   22f4c:	554e5f4a 7c204c4c 504d207c 4a424f5f     J_NULL || MP_OBJ
   22f5c:	5f53495f 45505954 66656428 5f776b5f     _IS_TYPE(def_kw_
   22f6c:	73677261 6d26202c 79745f70 645f6570     args, &mp_type_d
   22f7c:	29746369 00000000 3e2d6372 646e696b     ict)....rc->kind
   22f8c:	203d3d20 435f504d 5f45444f 45545942      == MP_CODE_BYTE
   22f9c:	45444f43 00000000 656b616d 6f6c635f     CODE....make_clo
   22fac:	65727573 6f72665f 61725f6d 6f635f77     sure_from_raw_co
   22fbc:	25206564 75252070 0a702520 00000000     de %p %u %p.....

00022fcc <__func__.7847>:
   22fcc:	6d5f706d 5f656b61 636e7566 6e6f6974     mp_make_function
   22fdc:	6f72665f 61725f6d 6f635f77 00006564     _from_raw_code..

00022fec <mp_module___main__>:
   22fec:	00025000 20001280 64616f6c 6d616e20     .P..... load nam
   22ffc:	73252065 0000000a 64616f6c 6f6c6720     e %s....load glo
   2300c:	206c6162 000a7325 656d616e 746f6e20     bal %s..name not
   2301c:	66656420 64656e69 00000000 64616f6c      defined....load
   2302c:	6975625f 635f646c 7373616c 0000000a     _build_class....
   2303c:	726f7473 616e2065 2520656d 2d3c2073     store name %s <-
   2304c:	0a702520 00000000 656c6564 6e206574      %p.....delete n
   2305c:	20656d61 000a7325 726f7473 6c672065     ame %s..store gl
   2306c:	6c61626f 20732520 25202d3c 00000a70     obal %s <- %p...
   2307c:	656c6564 67206574 61626f6c 7325206c     delete global %s
   2308c:	0000000a 72616e75 75252079 20712520     ....unary %u %q 
   2309c:	000a7025 3d20706f 504d203d 414e555f     %p..op == MP_UNA
   230ac:	4f5f5952 4e495f50 54524556 00000000     RY_OP_INVERT....
   230bc:	2e2f2e2e 79702f2e 6e75722f 656d6974     ../../py/runtime
   230cc:	0000632e 276e6163 6f632074 7265766e     .c..can't conver
   230dc:	6f742074 746e6920 00000000 75736e75     t to int....unsu
   230ec:	726f7070 20646574 65707974 726f6620     pported type for
   230fc:	65706f20 6f746172 00000072 616e6962      operator...bina
   2310c:	25207972 71252075 20702520 000a7025     ry %u %q %p %p..
   2311c:	6167656e 65766974 69687320 63207466     negative shift c
   2312c:	746e756f 00000000 6167656e 65766974     ount....negative
   2313c:	776f7020 77207265 20687469 66206f6e      power with no f
   2314c:	74616f6c 70757320 74726f70 00000000     loat support....
   2315c:	69766964 62206564 657a2079 00006f72     divide by zero..
   2316c:	6c6c6163 20676e69 636e7566 6e6f6974     calling function
   2317c:	28702520 72615f6e 253d7367 6e202c75      %p(n_args=%u, n
   2318c:	3d776b5f 202c7525 73677261 2970253d     _kw=%u, args=%p)
   2319c:	0000000a 656a626f 6e207463 6320746f     ....object not c
   231ac:	616c6c61 00656c62 6c6c6163 74656d20     allable.call met
   231bc:	20646f68 6e756628 2c70253d 6c657320     hod (fun=%p, sel
   231cc:	70253d66 5f6e202c 73677261 2c75253d     f=%p, n_args=%u,
   231dc:	6b5f6e20 75253d77 7261202c 253d7367      n_kw=%u, args=%
   231ec:	000a2970 6c6c6163 74656d20 20646f68     p)..call method 
   231fc:	20726176 6e756628 2c70253d 6c657320     var (fun=%p, sel
   2320c:	70253d66 5f6e202c 73677261 2c75253d     f=%p, n_args=%u,
   2321c:	6b5f6e20 75253d77 7261202c 253d7367      n_kw=%u, args=%
   2322c:	73202c70 253d7165 64202c70 3d746369     p, seq=%p, dict=
   2323c:	0a297025 00000000 73677261 656c5f32     %p).....args2_le
   2324c:	202b206e 202a2032 2d70616d 6573753e     n + 2 * map->use
   2325c:	3d3c2064 67726120 615f3273 636f6c6c     d <= args2_alloc
   2326c:	00000000 6e6f7277 756e2067 7265626d     ....wrong number
   2327c:	20666f20 756c6176 74207365 6e75206f      of values to un
   2328c:	6b636170 00000000 61706e75 65206b63     pack....unpack e
   2329c:	75252078 0a752520 00000000 64616f6c     x %u %u.....load
   232ac:	74746120 70252072 0a73252e 00000000      attr %p.%s.....
   232bc:	65707974 6f6c3e2d 736c6163 6369645f     type->locals_dic
   232cc:	623e2d74 2e657361 65707974 203d3d20     t->base.type == 
   232dc:	5f706d26 65707974 6369645f 00000074     &mp_type_dict...
   232ec:	64616f6c 74656d20 20646f68 252e7025     load method %p.%
   232fc:	00000a73 73206f6e 20686375 72747461     s...no such attr
   2330c:	74756269 00000065 726f7473 74612065     ibute...store at
   2331c:	25207274 73252e70 202d3c20 000a7025     tr %p.%s <- %p..
   2332c:	6e695f6f 00000000 656a626f 6e207463     o_in....object n
   2333c:	6920746f 61726574 00656c62 656a626f     ot iterable.obje
   2334c:	6e207463 6120746f 7469206e 74617265     ct not an iterat
   2335c:	0000726f 6e657328 61765f64 2065756c     or..(send_value 
   2336c:	4d203d21 424f5f50 554e5f4a 20294c4c     != MP_OBJ_NULL) 
   2337c:	7428205e 776f7268 6c61765f 21206575     ^ (throw_value !
   2338c:	504d203d 4a424f5f 4c554e5f 0000294c     = MP_OBJ_NULL)..
   2339c:	6f726874 61765f77 2065756c 4d203d21     throw_value != M
   233ac:	424f5f50 554e5f4a 00004c4c 73696172     P_OBJ_NULL..rais
   233bc:	70252065 0000000a 65637865 6f697470     e %p....exceptio
   233cc:	6d20736e 20747375 69726564 66206576     ns must derive f
   233dc:	206d6f72 65736142 65637845 6f697470     rom BaseExceptio
   233ec:	0000006e 6f706d69 6e207472 20656d61     n...import name 
   233fc:	27732527 76656c20 253d6c65 00000a64     '%s' level=%d...
   2340c:	6f706d69 66207472 206d6f72 25207025     import from %p %
   2341c:	00000a73 6e6e6163 6920746f 726f706d     s...cannot impor
   2342c:	616e2074 2520656d 00000071 6f706d69     t name %q...impo
   2343c:	61207472 25206c6c 00000a70 6f6d656d     rt all %p...memo
   2344c:	61207972 636f6c6c 6f697461 6166206e     ry allocation fa
   2345c:	64656c69 6c61202c 61636f6c 676e6974     iled, allocating
   2346c:	20752520 65747962 00000a73 6f6d656d      %u bytes...memo
   2347c:	61207972 636f6c6c 6f697461 6166206e     ry allocation fa
   2348c:	64656c69 6568202c 69207061 6f6c2073     iled, heap is lo
   2349c:	64656b63 00000000 6f6d656d 61207972     cked....memory a
   234ac:	636f6c6c 6f697461 6166206e 64656c69     llocation failed
   234bc:	6c61202c 61636f6c 676e6974 20752520     , allocating %u 
   234cc:	65747962 00000073                       bytes...

000234d4 <__func__.8277>:
   234d4:	755f706d 7972616e 00706f5f              mp_unary_op.

000234e0 <__func__.8394>:
   234e0:	635f706d 5f6c6c61 70657270 5f657261     mp_call_prepare_
   234f0:	73677261 6b5f6e5f 61765f77 00000072     args_n_kw_var...

00023500 <__func__.8482>:
   23500:	6c5f706d 5f64616f 6874656d 6d5f646f     mp_load_method_m
   23510:	65627961 00000000                       aybe....

00023518 <__func__.8508>:
   23518:	675f706d 74697465 00007265              mp_getiter..

00023524 <__func__.8530>:
   23524:	725f706d 6d757365 00000065 6c6c6128     mp_resume...(all
   23534:	6465776f 2e5d695b 67616c66 20262073     owed[i].flags & 
   23544:	415f504d 4b5f4752 5f444e49 4b53414d     MP_ARG_KIND_MASK
   23554:	3d3d2029 5f504d20 5f475241 004a424f     ) == MP_ARG_OBJ.
   23564:	2e2f2e2e 79702f2e 6772612f 63656863     ../../py/argchec
   23574:	00632e6b 75677261 746e656d 6d756e20     k.c.argument num
   23584:	7079742f 6d207365 616d7369 00686374     /types mismatch.

00023594 <__func__.7391>:
   23594:	615f706d 705f6772 65737261 6c6c615f     mp_arg_parse_all
   235a4:	00000000                                ....

000235a8 <mp_const_empty_map>:
   235a8:	00000006 00000000 00000000              ............

000235b4 <hash_allocation_sizes>:
   235b4:	00020000 00060004 000a0008 0011000c     ................
   235c4:	001d0017 002f0025 0049003b 007f0061     ....%./.;.I.a...
   235d4:	00df00a7 01850125 02b30209 04c70397     ....%...........
   235e4:	0871065b 12df0c9d 2a6d1c4b 5f573f91     [.q.....K.m*.?W_
   235f4:	d67b8eff 6d5f706d 725f7061 73616865     ..{.mp_map_rehas
   23604:	70252868 25203a29 3e2d2075 0a752520     h(%p): %u -> %u.
   23614:	00000000 70616d21 73693e2d 7869665f     ....!map->is_fix
   23624:	7c206465 6f6c207c 70756b6f 6e696b5f     ed || lookup_kin
   23634:	3d3d2064 5f504d20 5f50414d 4b4f4f4c     d == MP_MAP_LOOK
   23644:	00005055 2e2f2e2e 79702f2e 70616d2f     UP..../../py/map
   23654:	0000632e 6c696e28 00000029 7025203a     .c..(nil)...: %p
   23664:	0000000a 0a2d2d2d 00000000              ....---.....

00023670 <__func__.7495>:
   23670:	6d5f706d 6c5f7061 756b6f6f 00000070     mp_map_lookup...
   23680:	6c696e28 00000029 3e71253c 00000000     (nil)...<%q>....
   23690:	2025206e 3d3d2033 00003020 2e2f2e2e     n % 3 == 0..../.
   236a0:	79702f2e 6a626f2f 0000632e 63617254     ./py/obj.c..Trac
   236b0:	63616265 6d28206b 2074736f 65636572     eback (most rece
   236c0:	6320746e 206c6c61 7473616c 000a3a29     nt call last):..
   236d0:	69462020 2220656c 00227125 0000000a       File "%q".....
   236e0:	6e69202c 0a712520 00000000 65707865     , in %q.....expe
   236f0:	64657463 70757420 6c2f656c 00747369     cted tuple/list.
   23700:	6c707574 696c2f65 68207473 77207361     tuple/list has w
   23710:	676e6f72 6e656c20 00687467 69646e69     rong length.indi
   23720:	20736563 7473756d 20656220 65746e69     ces must be inte
   23730:	73726567 00000000 65646e69 756f2078     gers....index ou
   23740:	666f2074 6e617220 00006567 656a626f     t of range..obje
   23750:	68207463 6e207361 656c206f 0000006e     ct has no len...
   23760:	656a626f 64207463 6e73656f 73207427     object doesn't s
   23770:	6f707075 69207472 206d6574 656c6564     upport item dele
   23780:	6e6f6974 00000000 656a626f 69207463     tion....object i
   23790:	74276e73 62757320 69726373 62617470     sn't subscriptab
   237a0:	0000656c 656a626f 64207463 6e73656f     le..object doesn
   237b0:	73207427 6f707075 69207472 206d6574     't support item 
   237c0:	69737361 656d6e67 0000746e              assignment..

000237cc <mp_identity_obj>:
   237cc:	000245b8 0000e40d 656a626f 77207463     .E......object w
   237dc:	20687469 66667562 70207265 6f746f72     ith buffer proto
   237ec:	206c6f63 75716572 64657269 00000000     col required....

000237fc <__func__.8020>:
   237fc:	6f5f706d 705f6a62 746e6972 6378655f     mp_obj_print_exc
   2380c:	69747065 00006e6f 65757254 00000000     eption..True....
   2381c:	736c6146 00000065                       False...

00023824 <mp_type_bool>:
   23824:	00025df4 00ef0000 0000e539 0000e575     .]......9...u...
   23834:	00000000 0000e5bd 0000e5f1 00000000     ................
	...

00023860 <mp_const_false_obj>:
   23860:	00023824 00000000                       $8......

00023868 <mp_const_true_obj>:
   23868:	00023824 00000001                       $8......

00023870 <mp_type_bound_meth>:
   23870:	00025df4 00f10000 00000000 00000000     .]..............
   23880:	0000e6b7 00000000 00000000 00000000     ................
	...

000238ac <mp_type_cell>:
   238ac:	00025df4 00010000 00000000 00000000     .]..............
	...

000238e8 <closure_type>:
   238e8:	00025df4 00fa0000 00000000 00000000     .]..............
   238f8:	0000e781 00000000 00000000 00000000     ................
	...
   23924:	0000007b 0000202c 0000203a 0000007d     {..., ..: ..}...
   23934:	5f504d28 5f4a424f 4f5f5349 73284a42     (MP_OBJ_IS_OBJ(s
   23944:	5f666c65 20296e69 28202626 5f706d28     elf_in) && ((mp_
   23954:	5f6a626f 65736162 292a745f 6f762828     obj_base_t*)((vo
   23964:	292a6469 666c6573 296e695f 743e2d29     id*)self_in))->t
   23974:	2d657079 6b616d3e 656e5f65 3d3d2077     ype->make_new ==
   23984:	63696420 616d5f74 6e5f656b 00297765      dict_make_new).
   23994:	2e2f2e2e 79702f2e 6a626f2f 74636964     ../../py/objdict
   239a4:	0000632e                                .c..

000239a8 <dict_clear_obj>:
   239a8:	000245b8 0000ecd5                       .E......

000239b0 <dict_copy_obj>:
   239b0:	000245b8 0000ed35                       .E..5...

000239b8 <dict_fromkeys_fun_obj>:
   239b8:	00024700 00040006 0000edf1              .G..........

000239c4 <dict_fromkeys_obj>:
   239c4:	0002603c 000239b8 5f504d28 5f4a424f     <`...9..(MP_OBJ_
   239d4:	4f5f5349 61284a42 5b736772 20295d30     IS_OBJ(args[0]) 
   239e4:	28202626 5f706d28 5f6a626f 65736162     && ((mp_obj_base
   239f4:	292a745f 6f762828 292a6469 73677261     _t*)((void*)args
   23a04:	295d305b 743e2d29 2d657079 6b616d3e     [0]))->type->mak
   23a14:	656e5f65 3d3d2077 63696420 616d5f74     e_new == dict_ma
   23a24:	6e5f656b 00297765                       ke_new).

00023a2c <dict_get_obj>:
   23a2c:	00024700 00040006 0000ef5d              .G......]...

00023a38 <dict_pop_obj>:
   23a38:	00024700 00040006 0000ef7b              .G......{...

00023a44 <dict_setdefault_obj>:
   23a44:	00024700 00040006 0000ef99 69706f70     .G..........popi
   23a54:	286d6574 64203a29 69746369 72616e6f     tem(): dictionar
   23a64:	73692079 706d6520 00007974              y is empty..

00023a70 <dict_popitem_obj>:
   23a70:	000245b8 0000efb7 74636964 64707520     .E......dict upd
   23a80:	20657461 75716573 65636e65 73616820     ate sequence has
   23a90:	6f727720 6c20676e 74676e65 00000068      wrong length...

00023aa0 <dict_update_obj>:
   23aa0:	00024700 0003ffff 0000f075              .G......u...

00023aac <dict_view_type>:
   23aac:	00025df4 01000000 0000f32d 00000000     .]......-.......
	...
   23ac4:	0000f3f9 00000000 00000000 0000f2bd     ................
	...

00023ae8 <dict_view_it_type>:
   23ae8:	00025df4 012a0000 00000000 00000000     .]....*.........
	...
   23b0c:	0000e423 0000f225 00000000 00000000     #...%...........
	...
   23b24:	74636964 6574695f 0000736d 74636964     dict_items..dict
   23b34:	79656b5f 00000073 74636964 6c61765f     _keys...dict_val
   23b44:	00736575                                ues.

00023b48 <mp_dict_view_names>:
   23b48:	00023b24 00023b30 00023b3c 5f504d28     $;..0;..<;..(MP_
   23b58:	5f4a424f 4f5f5349 73284a42 5f666c65     OBJ_IS_OBJ(self_
   23b68:	20296e69 28202626 706d2828 6a626f5f     in) && (((mp_obj
   23b78:	7361625f 2a745f65 76282829 2a64696f     _base_t*)((void*
   23b88:	6c657329 6e695f66 3e2d2929 65707974     )self_in))->type
   23b98:	203d3d20 69642628 765f7463 5f776569      == (&dict_view_
   23ba8:	745f7469 29657079 00002929 5f504d28     it_type)))..(MP_
   23bb8:	5f4a424f 4f5f5349 76284a42 5f776569     OBJ_IS_OBJ(view_
   23bc8:	20296e69 28202626 706d2828 6a626f5f     in) && (((mp_obj
   23bd8:	7361625f 2a745f65 76282829 2a64696f     _base_t*)((void*
   23be8:	65697629 6e695f77 3e2d2929 65707974     )view_in))->type
   23bf8:	203d3d20 69642628 765f7463 5f776569      == (&dict_view_
   23c08:	65707974 00292929 5f504d28 5f4a424f     type))).(MP_OBJ_
   23c18:	4f5f5349 73284a42 5f666c65 20296e69     IS_OBJ(self_in) 
   23c28:	28202626 706d2828 6a626f5f 7361625f     && (((mp_obj_bas
   23c38:	2a745f65 76282829 2a64696f 6c657329     e_t*)((void*)sel
   23c48:	6e695f66 3e2d2929 65707974 203d3d20     f_in))->type == 
   23c58:	69642628 765f7463 5f776569 65707974     (&dict_view_type
   23c68:	00292929 00005b28 0000295d              ))).([..])..

00023c74 <dict_items_obj>:
   23c74:	000245b8 0000f4bd                       .E......

00023c7c <dict_keys_obj>:
   23c7c:	000245b8 0000f4d7                       .E......

00023c84 <dict_values_obj>:
   23c84:	000245b8 0000f4f1                       .E......

00023c8c <dict_locals_dict_table>:
   23c8c:	000003e2 000239a8 000003f2 000239b0     .....9.......9..
   23c9c:	00000436 000239c4 00000442 00023a2c     6....9..B...,:..
   23cac:	000004a2 00023c74 000004b6 00023c7c     ....t<......|<..
   23cbc:	00000516 00023a38 0000051a 00023a70     ....8:......p:..
   23ccc:	0000056a 00023a44 000005ba 00023aa0     j...D:.......:..
   23cdc:	000005c6 00023c84 0000003a 000261e8     .....<..:....a..
   23cec:	0000008e 000261f0 00000022 000261f8     .....a.."....a..

00023cfc <dict_locals_dict>:
   23cfc:	00023d0c 00000077 0000000e 00023c8c     .=..w........<..

00023d0c <mp_type_dict>:
   23d0c:	00025df4 00ff0000 0000e9c5 0000ea61     .]..........a...
   23d1c:	00000000 0000eac7 0000eb17 00000000     ................
   23d2c:	0000ec41 0000f50b 00000000 00000000     A...............
	...
   23d44:	00023cfc                                .<..

00023d48 <__func__.7368>:
   23d48:	74636964 656c635f 00007261              dict_clear..

00023d54 <__func__.7374>:
   23d54:	74636964 706f635f 00000079              dict_copy...

00023d60 <__func__.7399>:
   23d60:	74636964 7465675f 6c65685f 00726570     dict_get_helper.

00023d70 <__func__.7421>:
   23d70:	74636964 706f705f 6d657469 00000000     dict_popitem....

00023d80 <__func__.7433>:
   23d80:	74636964 6470755f 00657461              dict_update.

00023d8c <__func__.7476>:
   23d8c:	74636964 6569765f 74695f77 6574695f     dict_view_it_ite
   23d9c:	78656e72 00000074                       rnext...

00023da4 <__func__.7489>:
   23da4:	74636964 6569765f 65675f77 65746974     dict_view_getite
   23db4:	00000072                                r...

00023db8 <__func__.7497>:
   23db8:	74636964 6569765f 72705f77 00746e69     dict_view_print.

00023dc8 <__func__.7522>:
   23dc8:	74636964 6569765f 00000077              dict_view...

00023dd4 <__func__.7539>:
   23dd4:	74636964 7465675f 72657469 00000000     dict_getiter....

00023de4 <__func__.7561>:
   23de4:	6f5f706d 645f6a62 5f746369 726f7473     mp_obj_dict_stor
   23df4:	00000065                                e...

00023df8 <mp_const_GeneratorExit_obj>:
   23df8:	00023ec4 00000000 00000000 00025a70     .>..........pZ..
   23e08:	0000203a 00000000                       : ......

00023e10 <mp_type_BaseException>:
   23e10:	00025df4 00b90000 0000f6d1 0000f795     .]..............
	...
   23e2c:	0000f865 00000000 00000000 00000000     e...............
	...

00023e4c <mp_type_SystemExit>:
   23e4c:	00025df4 00e00000 0000f6d1 0000f795     .]..............
	...
   23e68:	0000f865 00000000 00000000 00000000     e...............
	...
   23e80:	00023e10 00000000                       .>......

00023e88 <mp_type_KeyboardInterrupt>:
   23e88:	00025df4 00cb0000 0000f6d1 0000f795     .]..............
	...
   23ea4:	0000f865 00000000 00000000 00000000     e...............
	...
   23ebc:	00023e10 00000000                       .>......

00023ec4 <mp_type_GeneratorExit>:
   23ec4:	00025df4 00be0000 0000f6d1 0000f795     .]..............
	...
   23ee0:	0000f865 00000000 00000000 00000000     e...............
	...
   23ef8:	00023e10 00000000                       .>......

00023f00 <mp_type_Exception>:
   23f00:	00025df4 00bd0000 0000f6d1 0000f795     .]..............
	...
   23f1c:	0000f865 00000000 00000000 00000000     e...............
	...
   23f34:	00023e10 00000000                       .>......

00023f3c <mp_type_StopIteration>:
   23f3c:	00025df4 00de0000 0000f6d1 0000f795     .]..............
	...
   23f58:	0000f865 00000000 00000000 00000000     e...............
	...
   23f70:	00023f00 00000000                       .?......

00023f78 <mp_type_ArithmeticError>:
   23f78:	00025df4 00b60000 0000f6d1 0000f795     .]..............
	...
   23f94:	0000f865 00000000 00000000 00000000     e...............
	...
   23fac:	00023f00 00000000                       .?......

00023fb4 <mp_type_OverflowError>:
   23fb4:	00025df4 00d60000 0000f6d1 0000f795     .]..............
	...
   23fd0:	0000f865 00000000 00000000 00000000     e...............
	...
   23fe8:	00023f78 00000000                       x?......

00023ff0 <mp_type_ZeroDivisionError>:
   23ff0:	00025df4 00e40000 0000f6d1 0000f795     .]..............
	...
   2400c:	0000f865 00000000 00000000 00000000     e...............
	...
   24024:	00023f78 00000000                       x?......

0002402c <mp_type_AssertionError>:
   2402c:	00025df4 00b70000 0000f6d1 0000f795     .]..............
	...
   24048:	0000f865 00000000 00000000 00000000     e...............
	...
   24060:	00023f00 00000000                       .?......

00024068 <mp_type_AttributeError>:
   24068:	00025df4 00b80000 0000f6d1 0000f795     .]..............
	...
   24084:	0000f865 00000000 00000000 00000000     e...............
	...
   2409c:	00023f00 00000000                       .?......

000240a4 <mp_type_EOFError>:
   240a4:	00025df4 00bb0000 0000f6d1 0000f795     .]..............
	...
   240c0:	0000f865 00000000 00000000 00000000     e...............
	...
   240d8:	00023f00 00000000                       .?......

000240e0 <mp_type_ImportError>:
   240e0:	00025df4 00c70000 0000f6d1 0000f795     .]..............
	...
   240fc:	0000f865 00000000 00000000 00000000     e...............
	...
   24114:	00023f00 00000000                       .?......

0002411c <mp_type_LookupError>:
   2411c:	00025df4 00cd0000 0000f6d1 0000f795     .]..............
	...
   24138:	0000f865 00000000 00000000 00000000     e...............
	...
   24150:	00023f00 00000000                       .?......

00024158 <mp_type_IndexError>:
   24158:	00025df4 00c90000 0000f6d1 0000f795     .]..............
	...
   24174:	0000f865 00000000 00000000 00000000     e...............
	...
   2418c:	0002411c 00000000                       .A......

00024194 <mp_type_KeyError>:
   24194:	00025df4 00ca0000 0000f6d1 0000f795     .]..............
	...
   241b0:	0000f865 00000000 00000000 00000000     e...............
	...
   241c8:	0002411c 00000000                       .A......

000241d0 <mp_type_MemoryError>:
   241d0:	00025df4 00cf0000 0000f6d1 0000f795     .]..............
	...
   241ec:	0000f865 00000000 00000000 00000000     e...............
	...
   24204:	00023f00 00000000                       .?......

0002420c <mp_type_NameError>:
   2420c:	00025df4 00d00000 0000f6d1 0000f795     .]..............
	...
   24228:	0000f865 00000000 00000000 00000000     e...............
	...
   24240:	00023f00 00000000                       .?......

00024248 <mp_type_OSError>:
   24248:	00025df4 00d40000 0000f6d1 0000f795     .]..............
	...
   24264:	0000f865 00000000 00000000 00000000     e...............
	...
   2427c:	00023f00 00000000                       .?......

00024284 <mp_type_RuntimeError>:
   24284:	00025df4 00dc0000 0000f6d1 0000f795     .]..............
	...
   242a0:	0000f865 00000000 00000000 00000000     e...............
	...
   242b8:	00023f00 00000000                       .?......

000242c0 <mp_type_NotImplementedError>:
   242c0:	00025df4 00d20000 0000f6d1 0000f795     .]..............
	...
   242dc:	0000f865 00000000 00000000 00000000     e...............
	...
   242f4:	00024284 00000000                       .B......

000242fc <mp_type_SyntaxError>:
   242fc:	00025df4 00df0000 0000f6d1 0000f795     .]..............
	...
   24318:	0000f865 00000000 00000000 00000000     e...............
	...
   24330:	00023f00 00000000                       .?......

00024338 <mp_type_IndentationError>:
   24338:	00025df4 00c80000 0000f6d1 0000f795     .]..............
	...
   24354:	0000f865 00000000 00000000 00000000     e...............
	...
   2436c:	000242fc 00000000                       .B......

00024374 <mp_type_TypeError>:
   24374:	00025df4 00e10000 0000f6d1 0000f795     .]..............
	...
   24390:	0000f865 00000000 00000000 00000000     e...............
	...
   243a8:	00023f00 00000000                       .?......

000243b0 <mp_type_ValueError>:
   243b0:	00025df4 00e20000 0000f6d1 0000f795     .]..............
	...
   243cc:	0000f865 00000000 00000000 00000000     e...............
	...
   243e4:	00023f00 00000000 5f637865 65707974     .?......exc_type
   243f4:	616d3e2d 6e5f656b 3d207765 706d203d     ->make_new == mp
   24404:	6a626f5f 6378655f 69747065 6d5f6e6f     _obj_exception_m
   24414:	5f656b61 0077656e 2e2f2e2e 79702f2e     ake_new.../../py
   24424:	6a626f2f 65637865 632e7470 00000000     /objexcept.c....
   24434:	20746d66 4e203d21 004c4c55 6f5f706d     fmt != NULL.mp_o
   24444:	695f6a62 78655f73 74706563 5f6e6f69     bj_is_exception_
   24454:	74736e69 65636e61 6c657328 6e695f66     instance(self_in
   24464:	00000029                                )...

00024468 <__func__.7937>:
   24468:	6f5f706d 6e5f6a62 655f7765 70656378     mp_obj_new_excep
   24478:	6e6f6974 6772615f 00000073              tion_args...

00024484 <__func__.7959>:
   24484:	6f5f706d 6e5f6a62 655f7765 70656378     mp_obj_new_excep
   24494:	6e6f6974 67736d5f 7261765f 00000067     tion_msg_varg...

000244a4 <__func__.7982>:
   244a4:	6f5f706d 655f6a62 70656378 6e6f6974     mp_obj_exception
   244b4:	656c635f 745f7261 65636172 6b636162     _clear_traceback
   244c4:	00000000                                ....

000244c8 <__func__.7990>:
   244c8:	6f5f706d 655f6a62 70656378 6e6f6974     mp_obj_exception
   244d8:	6464615f 6172745f 61626563 00006b63     _add_traceback..

000244e8 <__func__.7999>:
   244e8:	6f5f706d 655f6a62 70656378 6e6f6974     mp_obj_exception
   244f8:	7465675f 6172745f 61626563 00006b63     _get_traceback..
   24508:	4f5f504d 495f4a42 59545f53 73284550     MP_OBJ_IS_TYPE(s
   24518:	5f666c65 202c6e69 5f706d26 65707974     elf_in, &mp_type
   24528:	6e75665f 6975625f 6e69746c 0029305f     _fun_builtin_0).
   24538:	2e2f2e2e 79702f2e 6a626f2f 2e6e7566     ../../py/objfun.
   24548:	00000063                                c...

0002454c <mp_type_fun_builtin_0>:
   2454c:	00025df4 010e0000 00000000 00000000     .]..............
   2455c:	0000fe6d 0000e4b1 00000000 00000000     m...............
	...
   24588:	4f5f504d 495f4a42 59545f53 73284550     MP_OBJ_IS_TYPE(s
   24598:	5f666c65 202c6e69 5f706d26 65707974     elf_in, &mp_type
   245a8:	6e75665f 6975625f 6e69746c 0029315f     _fun_builtin_1).

000245b8 <mp_type_fun_builtin_1>:
   245b8:	00025df4 010e0000 00000000 00000000     .]..............
   245c8:	0000fed1 0000e4b1 00000000 00000000     ................
	...
   245f4:	4f5f504d 495f4a42 59545f53 73284550     MP_OBJ_IS_TYPE(s
   24604:	5f666c65 202c6e69 5f706d26 65707974     elf_in, &mp_type
   24614:	6e75665f 6975625f 6e69746c 0029325f     _fun_builtin_2).

00024624 <mp_type_fun_builtin_2>:
   24624:	00025df4 010e0000 00000000 00000000     .]..............
   24634:	0000ff3d 0000e4b1 00000000 00000000     =...............
	...
   24660:	4f5f504d 495f4a42 59545f53 73284550     MP_OBJ_IS_TYPE(s
   24670:	5f666c65 202c6e69 5f706d26 65707974     elf_in, &mp_type
   24680:	6e75665f 6975625f 6e69746c 0029335f     _fun_builtin_3).

00024690 <mp_type_fun_builtin_3>:
   24690:	00025df4 010e0000 00000000 00000000     .]..............
   246a0:	0000ffad 0000e4b1 00000000 00000000     ................
	...
   246cc:	4f5f504d 495f4a42 59545f53 73284550     MP_OBJ_IS_TYPE(s
   246dc:	5f666c65 202c6e69 5f706d26 65707974     elf_in, &mp_type
   246ec:	6e75665f 6975625f 6e69746c 7261765f     _fun_builtin_var
   246fc:	00000029                                )...

00024700 <mp_type_fun_builtin_var>:
   24700:	00025df4 010e0000 00000000 00000000     .]..............
   24710:	00010021 0000e4b1 00000000 00000000     !...............
	...
   2473c:	203a7025 00000000 00207025 0000000a     %p: ....%p .....
   2474c:	75706e49 5f6e2074 73677261 7525203a     Input n_args: %u
   2475c:	5f6e202c 203a776b 000a7525 75706e49     , n_kw: %u..Inpu
   2476c:	6f702074 72612073 203a7367 00000000     t pos args: ....
   2477c:	75706e49 776b2074 67726120 00203a73     Input kw args: .
   2478c:	725f6d76 72757465 696b5f6e 3d20646e     vm_return_kind =
   2479c:	504d203d 5f4d565f 55544552 455f4e52     = MP_VM_RETURN_E
   247ac:	50454358 4e4f4954 00000000              XCEPTION....

000247b8 <mp_type_fun_bc>:
   247b8:	00025df4 010e0000 00000000 00000000     .]..............
   247c8:	0001017d 0000e4b1 00000000 00000000     }...............
	...
   247f4:	4f5f504d 495f4a42 59545f53 64284550     MP_OBJ_IS_TYPE(d
   24804:	615f6665 5f736772 202c6e69 5f706d26     ef_args_in, &mp_
   24814:	65707974 7075745f 0029656c              type_tuple).

00024820 <__func__.7247>:
   24820:	5f6e7566 6c697562 5f6e6974 61635f30     fun_builtin_0_ca
   24830:	00006c6c                                ll..

00024834 <__func__.7256>:
   24834:	5f6e7566 6c697562 5f6e6974 61635f31     fun_builtin_1_ca
   24844:	00006c6c                                ll..

00024848 <__func__.7265>:
   24848:	5f6e7566 6c697562 5f6e6974 61635f32     fun_builtin_2_ca
   24858:	00006c6c                                ll..

0002485c <__func__.7274>:
   2485c:	5f6e7566 6c697562 5f6e6974 61635f33     fun_builtin_3_ca
   2486c:	00006c6c                                ll..

00024870 <__func__.7283>:
   24870:	5f6e7566 6c697562 5f6e6974 5f726176     fun_builtin_var_
   24880:	6c6c6163 00000000                       call....

00024888 <__func__.7316>:
   24888:	5f6e7566 635f6362 006c6c61              fun_bc_call.

00024894 <__func__.7327>:
   24894:	6f5f706d 6e5f6a62 665f7765 625f6e75     mp_obj_new_fun_b
   248a4:	00000063                                c...

000248a8 <mp_type_gen_wrap>:
   248a8:	00025df4 010f0000 00000000 00000000     .]..............
   248b8:	00010401 0000e4b1 00000000 00000000     ................
	...
   248e4:	6e65673c 74617265 6f20726f 63656a62     <generator objec
   248f4:	25272074 61202771 70252074 0000003e     t '%q' at %p>...
   24904:	5f504d28 5f4a424f 4f5f5349 73284a42     (MP_OBJ_IS_OBJ(s
   24914:	5f666c65 20296e69 28202626 706d2828     elf_in) && (((mp
   24924:	6a626f5f 7361625f 2a745f65 76282829     _obj_base_t*)((v
   24934:	2a64696f 6c657329 6e695f66 3e2d2929     oid*)self_in))->
   24944:	65707974 203d3d20 706d2628 7079745f     type == (&mp_typ
   24954:	65675f65 6e695f6e 6e617473 29296563     e_gen_instance))
   24964:	00000029 2e2f2e2e 79702f2e 6a626f2f     )...../../py/obj
   24974:	656e6567 6f746172 00632e72 276e6163     generator.c.can'
   24984:	65732074 6e20646e 4e2d6e6f 20656e6f     t send non-None 
   24994:	756c6176 6f742065 6a206120 2d747375     value to a just-
   249a4:	72617473 20646574 656e6567 6f746172     started generato
   249b4:	00000072 656e6567 6f746172 6c612072     r...generator al
   249c4:	64616572 78652079 74756365 00676e69     ready executing.
   249d4:	656e6567 6f746172 61722072 64657369     generator raised
   249e4:	6f745320 65744970 69746172 00006e6f      StopIteration..

000249f4 <gen_instance_send_obj>:
   249f4:	00024624 000106ad                       $F......

000249fc <gen_instance_throw_obj>:
   249fc:	00024700 00040008 000106e5 656e6567     .G..........gene
   24a0c:	6f746172 67692072 65726f6e 65472064     rator ignored Ge
   24a1c:	6172656e 45726f74 00746978              neratorExit.

00024a28 <gen_instance_close_obj>:
   24a28:	000245b8 00010739 276e6163 65702074     .E..9...can't pe
   24a38:	7420646e 776f7268 206f7420 7473756a     nd throw to just
   24a48:	6174732d 64657472 6e656720 74617265     -started generat
   24a58:	0000726f                                or..

00024a5c <gen_instance_pend_throw_obj>:
   24a5c:	00024624 000107a5                       $F......

00024a64 <gen_instance_locals_dict_table>:
   24a64:	000003e6 00024a28 0000055e 000249f4     ....(J..^....I..
   24a74:	000005a2 000249fc 0000050e 00024a5c     .....I......\J..

00024a84 <gen_instance_locals_dict>:
   24a84:	00023d0c 00000027 00000004 00024a64     .=..'.......dJ..

00024a94 <mp_type_gen_instance>:
   24a94:	00025df4 010f0000 00010485 00000000     .]..............
   24aa4:	00000000 0000e4b1 00000000 00000000     ................
   24ab4:	00000000 0000e423 0001068d 00000000     ....#...........
	...
   24acc:	00024a84                                .J..

00024ad0 <__func__.7461>:
   24ad0:	6f5f706d 675f6a62 725f6e65 6d757365     mp_obj_gen_resum
   24ae0:	00000065                                e...

00024ae4 <it_type>:
   24ae4:	00025df4 012a0000 00000000 00000000     .]....*.........
	...
   24b08:	0000e423 000107e5 00000000 00000000     #...............
	...

00024b20 <log_base2_floor>:
   24b20:	02010100 03020202 03030303 04030303     ................
   24b30:	3d3c2032 73616220 26262065 73616220     2 <= base && bas
   24b40:	3d3c2065 00363120 2e2f2e2e 79702f2e     e <= 16.../../py
   24b50:	6a626f2f 2e746e69 00000063 676e6f6c     /objint.c...long
   24b60:	746e6920 746f6e20 70757320 74726f70      int not support
   24b70:	69206465 6874206e 62207369 646c6975     ed in this build
   24b80:	00000000 6c616d73 6e69206c 766f2074     ....small int ov
   24b90:	6c667265 0000776f                       erflow..

00024b98 <int_from_bytes_fun_obj>:
   24b98:	00024700 00060008 00010ec9              .G..........

00024ba4 <int_from_bytes_obj>:
   24ba4:	0002603c 00024b98                       <`...K..

00024bac <int_to_bytes_obj>:
   24bac:	00024700 00060008 00010f43              .G......C...

00024bb8 <int_locals_dict_table>:
   24bb8:	00000432 00024ba4 000005a6 00024bac     2....K.......K..

00024bc8 <int_locals_dict>:
   24bc8:	00023d0c 00000017 00000002 00024bb8     .=...........K..

00024bd8 <mp_type_int>:
   24bd8:	00025df4 011f0000 00010a41 00010941     .]......A...A...
   24be8:	00000000 00010ce1 00010cf9 00000000     ................
	...
   24c10:	00024bc8                                .K..

00024c14 <__func__.7964>:
   24c14:	695f706d 665f746e 616d726f 69735f74     mp_int_format_si
   24c24:	0000657a 0000005b 0000202c 0000005d     ze..[..., ..]...
   24c34:	5f504d28 5f4a424f 4f5f5349 73284a42     (MP_OBJ_IS_OBJ(s
   24c44:	5f666c65 20296e69 28202626 706d2828     elf_in) && (((mp
   24c54:	6a626f5f 7361625f 2a745f65 76282829     _obj_base_t*)((v
   24c64:	2a64696f 6c657329 6e695f66 3e2d2929     oid*)self_in))->
   24c74:	65707974 203d3d20 706d2628 7079745f     type == (&mp_typ
   24c84:	696c5f65 29297473 00000029 2e2f2e2e     e_list)))...../.
   24c94:	79702f2e 6a626f2f 7473696c 0000632e     ./py/objlist.c..
   24ca4:	5f504d28 5f4a424f 4f5f5349 61284a42     (MP_OBJ_IS_OBJ(a
   24cb4:	5b736772 20295d30 28202626 706d2828     rgs[0]) && (((mp
   24cc4:	6a626f5f 7361625f 2a745f65 76282829     _obj_base_t*)((v
   24cd4:	2a64696f 67726129 5d305b73 3e2d2929     oid*)args[0]))->
   24ce4:	65707974 203d3d20 706d2628 7079745f     type == (&mp_typ
   24cf4:	696c5f65 29297473 00000029 20706f70     e_list)))...pop 
   24d04:	6d6f7266 706d6520 6c207974 00747369     from empty list.
   24d14:	5f504d28 5f4a424f 4f5f5349 70284a42     (MP_OBJ_IS_OBJ(p
   24d24:	615f736f 5b736772 20295d30 28202626     os_args[0]) && (
   24d34:	706d2828 6a626f5f 7361625f 2a745f65     ((mp_obj_base_t*
   24d44:	76282829 2a64696f 736f7029 6772615f     )((void*)pos_arg
   24d54:	5d305b73 3e2d2929 65707974 203d3d20     s[0]))->type == 
   24d64:	706d2628 7079745f 696c5f65 29297473     (&mp_type_list))
   24d74:	00000029                                )...

00024d78 <list_append_obj>:
   24d78:	00024624 00011403                       $F......

00024d80 <list_extend_obj>:
   24d80:	00024624 000114bd                       $F......

00024d88 <list_clear_obj>:
   24d88:	000245b8 000118c5                       .E......

00024d90 <list_copy_obj>:
   24d90:	000245b8 00011945                       .E..E...

00024d98 <list_count_obj>:
   24d98:	00024624 000119a1                       $F......

00024da0 <list_index_obj>:
   24da0:	00024700 00040008 000119fd              .G..........

00024dac <list_insert_obj>:
   24dac:	00024690 00011a61                       .F..a...

00024db4 <list_pop_obj>:
   24db4:	00024700 00020004 000115c5              .G..........

00024dc0 <list_remove_obj>:
   24dc0:	00024624 00011b31                       $F..1...

00024dc8 <list_reverse_obj>:
   24dc8:	000245b8 00011ba1                       .E......

00024dd0 <list_sort_obj>:
   24dd0:	00024700 0003ffff 00011807              .G..........

00024ddc <list_locals_dict_table>:
   24ddc:	000003ae 00024d78 000003e2 00024d88     ....xM.......M..
   24dec:	000003f2 00024d90 000003f6 00024d98     .....M.......M..
   24dfc:	00000422 00024d80 0000046e 00024da0     "....M..n....M..
   24e0c:	0000047a 00024dac 00000516 00024db4     z....M.......M..
   24e1c:	00000532 00024dc0 00000546 00024dc8     2....M..F....M..
   24e2c:	00000572 00024dd0                       r....M..

00024e34 <list_locals_dict>:
   24e34:	00023d0c 0000005f 0000000b 00024ddc     .=.._........M..

00024e44 <mp_type_list>:
   24e44:	00025df4 012f0000 0001106d 00011117     .]..../.m.......
   24e54:	00000000 00011167 000111af 00000000     ....g...........
   24e64:	00011379 000113e5 00000000 00000000     y...............
	...
   24e7c:	00024e34                                4N..

00024e80 <__func__.7273>:
   24e80:	6f5f706d 6c5f6a62 5f747369 65707061     mp_obj_list_appe
   24e90:	0000646e                                nd..

00024e94 <__func__.7279>:
   24e94:	7473696c 7478655f 00646e65              list_extend.

00024ea0 <__func__.7286>:
   24ea0:	7473696c 706f705f 00000000              list_pop....

00024eac <allowed_args.7315>:
   24eac:	0203012c 0002511c 02010151 00000000     ,....Q..Q.......

00024ebc <__func__.7320>:
   24ebc:	6f5f706d 6c5f6a62 5f747369 74726f73     mp_obj_list_sort
   24ecc:	00000000                                ....

00024ed0 <__func__.7325>:
   24ed0:	7473696c 656c635f 00007261              list_clear..

00024edc <__func__.7330>:
   24edc:	7473696c 706f635f 00000079              list_copy...

00024ee8 <__func__.7336>:
   24ee8:	7473696c 756f635f 0000746e              list_count..

00024ef4 <__func__.7342>:
   24ef4:	7473696c 646e695f 00007865              list_index..

00024f00 <__func__.7349>:
   24f00:	7473696c 736e695f 00747265              list_insert.

00024f0c <__func__.7360>:
   24f0c:	6f5f706d 6c5f6a62 5f747369 6f6d6572     mp_obj_list_remo
   24f1c:	00006576                                ve..

00024f20 <__func__.7365>:
   24f20:	7473696c 7665725f 65737265 00000000     list_reverse....
   24f30:	5f504d28 5f4a424f 4f5f5349 73284a42     (MP_OBJ_IS_OBJ(s
   24f40:	5f666c65 20296e69 28202626 706d2828     elf_in) && (((mp
   24f50:	6a626f5f 7361625f 2a745f65 76282829     _obj_base_t*)((v
   24f60:	2a64696f 6c657329 6e695f66 3e2d2929     oid*)self_in))->
   24f70:	65707974 203d3d20 706d2628 7079745f     type == (&mp_typ
   24f80:	616d5f65 29292970 00000000 2e2f2e2e     e_map)))....../.
   24f90:	79702f2e 6a626f2f 2e70616d 00000063     ./py/objmap.c...

00024fa0 <mp_type_map>:
   24fa0:	00025df4 01350000 00000000 00011e91     .]....5.........
	...
   24fc4:	0000e423 00011f17 00000000 00000000     #...............
	...

00024fdc <__func__.7388>:
   24fdc:	5f70616d 72657469 7478656e 00000000     map_iternext....
   24fec:	00000000 646f6d3c 20656c75 27732527     ....<module '%s'
   24ffc:	0000003e                                >...

00025000 <mp_type_module>:
   25000:	00025df4 01390000 00011fdb 00000000     .]....9.........
	...
   2501c:	0001202d 00000000 00000000 00000000     - ..............
	...

0002503c <mp_builtin_module_table>:
   2503c:	0000006a 00022fec 000003ca 00026818     j..../.......h..
   2504c:	000004de 000268a0                       .....h..

00025054 <mp_builtin_module_map>:
   25054:	0000001f 00000003 0002503c              ........<P..

00025060 <mp_type_object>:
   25060:	00025df4 013d0000 00000000 00012209     .]....=......"..
	...

0002509c <mp_type_polymorph_iter>:
   2509c:	00025df4 012a0000 00000000 00000000     .]....*.........
	...
   250c0:	0000e423 0001223f 00000000 00000000     #...?"..........
	...
   250d8:	656e6f4e 00000000                       None....

000250e0 <mp_type_NoneType>:
   250e0:	00025df4 00d10000 0001225d 00000000     .]......]"......
   250f0:	00000000 0000e4b1 00000000 00000000     ................
	...

0002511c <mp_const_none_obj>:
   2511c:	000250e0                                .P..

00025120 <range_it_type>:
   25120:	00025df4 012a0000 00000000 00000000     .]....*.........
	...
   25144:	0000e423 000122dd 00000000 00000000     #...."..........
	...
   2515c:	676e6172 64252865 6425202c 00000000     range(%d, %d....
   2516c:	00000029 6425202c 00000029 6f72657a     )..., %d)...zero
   2517c:	65747320 00000070                        step...

00025184 <mp_type_range>:
   25184:	00025df4 014b0000 00012379 000123cd     .]....K.y#...#..
   25194:	00000000 000124c9 00000000 00012593     .....$.......%..
   251a4:	00012515 00012569 00000000 00000000     .%..i%..........
	...
   251c0:	00007125                                %q..

000251c4 <mp_type_singleton>:
   251c4:	00025df4 00010000 00012605 00000000     .].......&......
	...

00025200 <mp_const_ellipsis_obj>:
   25200:	000251c4 000000bc 00006325 0063255c     .Q......%c..\%c.
   25210:	00005c5c 00006e5c 0000725c 0000745c     \\..\n..\r..\t..
   25220:	3025785c 00007832 732a2e25 00000000     \x%02x..%.*s....
   25230:	00000062 65747962 61762073 2065756c     b...bytes value 
   25240:	2074756f 7220666f 65676e61 00000000     out of range....
   25250:	6e6f7277 756e2067 7265626d 20666f20     wrong number of 
   25260:	75677261 746e656d 00000073 5f504d28     arguments...(MP_
   25270:	5f4a424f 515f5349 28525453 666c6573     OBJ_IS_QSTR(self
   25280:	296e695f 207c7c20 5f504d28 5f4a424f     _in) || (MP_OBJ_
   25290:	4f5f5349 73284a42 5f666c65 20296e69     IS_OBJ(self_in) 
   252a0:	28202626 5f706d28 5f6a626f 65736162     && ((mp_obj_base
   252b0:	292a745f 6f762828 292a6469 666c6573     _t*)((void*)self
   252c0:	296e695f 743e2d29 2d657079 6e69623e     _in))->type->bin
   252d0:	5f797261 3d20706f 706d203d 6a626f5f     ary_op == mp_obj
   252e0:	7274735f 6e69625f 5f797261 2929706f     _str_binary_op))
   252f0:	00000000 2e2f2e2e 79702f2e 6a626f2f     ....../../py/obj
   25300:	2e727473 00000063 6e696f6a 70786520     str.c...join exp
   25310:	73746365 6c206120 20747369 7320666f     ects a list of s
   25320:	622f7274 73657479 6a626f20 73746365     tr/bytes objects
   25330:	6e6f6320 74736973 20746e65 68746977      consistent with
   25340:	6c657320 626f2066 7463656a 00000000      self object....

00025350 <str_join_obj>:
   25350:	00024624 000130e1 74706d65 65732079     $F...0..empty se
   25360:	61726170 00726f74                       parator.

00025368 <str_split_obj>:
   25368:	00024700 00020006 00013309 6c707372     .G.......3..rspl
   25378:	4e287469 2c656e6f 0000296e              it(None,n)..

00025384 <str_rsplit_obj>:
   25384:	00024700 00020006 0001351d 5f504d28     .G.......5..(MP_
   25394:	5f4a424f 515f5349 28525453 73677261     OBJ_IS_QSTR(args
   253a4:	295d305b 207c7c20 5f504d28 5f4a424f     [0]) || (MP_OBJ_
   253b4:	4f5f5349 61284a42 5b736772 20295d30     IS_OBJ(args[0]) 
   253c4:	28202626 5f706d28 5f6a626f 65736162     && ((mp_obj_base
   253d4:	292a745f 6f762828 292a6469 73677261     _t*)((void*)args
   253e4:	295d305b 743e2d29 2d657079 6e69623e     [0]))->type->bin
   253f4:	5f797261 3d20706f 706d203d 6a626f5f     ary_op == mp_obj
   25404:	7274735f 6e69625f 5f797261 2929706f     _str_binary_op))
   25414:	00000000 73627573 6e697274 6f6e2067     ....substring no
   25424:	6f662074 00646e75                       t found.

0002542c <str_find_obj>:
   2542c:	00024700 00040008 0001389d              .G.......8..

00025438 <str_rfind_obj>:
   25438:	00024700 00040008 000138bd              .G.......8..

00025444 <str_index_obj>:
   25444:	00024700 00040008 000138df              .G.......8..

00025450 <str_rindex_obj>:
   25450:	00024700 00040008 000138ff              .G.......8..

0002545c <str_startswith_obj>:
   2545c:	00024700 00040006 00013921 72617473     .G......!9..star
   2546c:	6e652f74 6e692064 65636964 00000073     t/end indices...

0002547c <str_endswith_obj>:
   2547c:	00024700 00040006 000139e5 7473616c     .G.......9..last
   2548c:	6f6f675f 68635f64 705f7261 3e20736f     _good_char_pos >
   2549c:	6966203d 5f747372 646f6f67 6168635f     = first_good_cha
   254ac:	6f705f72 00000073 73726966 6f675f74     r_pos...first_go
   254bc:	635f646f 5f726168 20736f70 30203d3d     od_char_pos == 0
   254cc:	00000000                                ....

000254d0 <str_strip_obj>:
   254d0:	00024700 00020004 00013cbd              .G.......<..

000254dc <str_lstrip_obj>:
   254dc:	00024700 00020004 00013cdb              .G.......<..

000254e8 <str_rstrip_obj>:
   254e8:	00024700 00020004 00013cf9 5e3d3e3c     .G.......<..<>=^
   254f8:	00000000 65646362 67466645 736f6e47     ....bcdeEfFgGnos
   25508:	00255878 20646162 6d726f66 73207461     xX%.bad format s
   25518:	6e697274 00000067 6c707574 6e692065     tring...tuple in
   25528:	20786564 2074756f 7220666f 65676e61     dex out of range
   25538:	00000000 72747461 74756269 6e207365     ....attributes n
   25548:	7320746f 6f707075 64657472 74657920     ot supported yet
   25558:	00000000 766e6f63 69737265 3d206e6f     ....conversion =
   25568:	7227203d 00000027                       = 'r'...

00025570 <str_format_obj>:
   25570:	00024700 0003ffff 000147f5 5f504d28     .G.......G..(MP_
   25580:	5f4a424f 515f5349 28525453 74746170     OBJ_IS_QSTR(patt
   25590:	296e7265 207c7c20 5f504d28 5f4a424f     ern) || (MP_OBJ_
   255a0:	4f5f5349 70284a42 65747461 20296e72     IS_OBJ(pattern) 
   255b0:	28202626 5f706d28 5f6a626f 65736162     && ((mp_obj_base
   255c0:	292a745f 6f762828 292a6469 74746170     _t*)((void*)patt
   255d0:	296e7265 743e2d29 2d657079 6e69623e     ern))->type->bin
   255e0:	5f797261 3d20706f 706d203d 6a626f5f     ary_op == mp_obj
   255f0:	7274735f 6e69625f 5f797261 2929706f     _str_binary_op))
   25600:	00000000 6d726f66 6e207461 73646565     ....format needs
   25610:	64206120 00746369 6d726f66 73207461      a dict.format s
   25620:	6e697274 656e2067 20736465 65726f6d     tring needs more
   25630:	67726120 6e656d75 00007374 20632525      arguments..%%c 
   25640:	6465656e 6e692073 726f2074 61686320     needs int or cha
   25650:	00000072 65746e69 20726567 6465656e     r...integer need
   25660:	00006465 6d726f66 73207461 6e697274     ed..format strin
   25670:	69642067 74276e64 6e6f6320 74726576     g didn't convert
   25680:	6c6c6120 67726120 6e656d75 00007374      all arguments..
   25690:	61746164 203d2120 4c4c554e 00000000     data != NULL....

000256a0 <str_replace_obj>:
   256a0:	00024700 00060008 00014f15              .G.......O..

000256ac <str_count_obj>:
   256ac:	00024700 00040008 000151ed              .G.......Q..

000256b8 <str_lower_obj>:
   256b8:	000245b8 0001544f                       .E..OT..

000256c0 <str_upper_obj>:
   256c0:	000245b8 0001546d                       .E..mT..

000256c8 <str_isspace_obj>:
   256c8:	000245b8 0001558d                       .E...U..

000256d0 <str_isalpha_obj>:
   256d0:	000245b8 000155ad                       .E...U..

000256d8 <str_isdigit_obj>:
   256d8:	000245b8 000155cd                       .E...U..

000256e0 <str_isupper_obj>:
   256e0:	000245b8 000155ed                       .E...U..

000256e8 <str_islower_obj>:
   256e8:	000245b8 0001560d                       .E...V..

000256f0 <str8_locals_dict_table>:
   256f0:	00000426 0002542c 0000054a 00025438     &...,T..J...8T..
   25700:	0000046e 00025444 0000054e 00025450     n...DT..N...PT..
   25710:	000004ae 00025350 0000057a 00025368     ....PS..z...hS..
   25720:	00000556 00025384 00000582 0002545c     V....S......\T..
   25730:	00000416 0002547c 00000596 000254d0     ....|T.......T..
   25740:	000004d2 000254dc 0000055a 000254e8     .....T..Z....T..
   25750:	0000042a 00025570 00000536 000256a0     *...pU..6....V..
   25760:	000003f6 000256ac 000004ce 000256b8     .....V.......V..
   25770:	000005be 000256c0 00000496 000256c8     .....V.......V..
   25780:	00000486 000256d0 0000048a 000256d8     .....V.......V..
   25790:	0000049e 000256e0 00000492 000256e8     .....V.......V..

000257a0 <str8_locals_dict>:
   257a0:	00023d0c 000000b7 00000016 000256f0     .=...........V..

000257b0 <mp_type_str>:
   257b0:	00025df4 01640000 000128a5 00012959     .]....d..(..Y)..
	...
   257c8:	00012d2f 00000000 00013055 00015bcb     /-......U0...[..
   257d8:	00000000 0001562d 00000000 00000000     ....-V..........
   257e8:	000257a0                                .W..

000257ec <mp_type_bytes>:
   257ec:	00025df4 00f40000 000128a5 00012aa9     .].......(...*..
	...
   25804:	00012d2f 00000000 00013055 00015c7f     /-......U0...\..
   25814:	00000000 0001562d 00000000 00000000     ....-V..........
   25824:	000257a0 00000000                       .W......

0002582c <mp_const_empty_bytes_obj>:
   2582c:	000257ec 00000000 00000000 00025828     .W..........(X..
   2583c:	276e6163 6f632074 7265766e 6f742074     can't convert to
   2584c:	72747320 706d6920 6963696c 00796c74      str implicitly.

0002585c <__func__.7407>:
   2585c:	5f727473 6e696f6a 00000000              str_join....

00025868 <__func__.7489>:
   25868:	5f727473 646e6966 00007265              str_finder..

00025874 <__func__.7547>:
   25874:	5f727473 5f696e75 69727473 00000070     str_uni_strip...

00025884 <whitespace.7551>:
   25884:	0d0a0920 00000c0b                        .......

0002588c <__func__.7637>:
   2588c:	6f5f706d 735f6a62 665f7274 616d726f     mp_obj_str_forma
   2589c:	65685f74 7265706c 00000000              t_helper....

000258a8 <__func__.7686>:
   258a8:	6f5f706d 735f6a62 665f7274 616d726f     mp_obj_str_forma
   258b8:	00000074                                t...

000258bc <__func__.7698>:
   258bc:	5f727473 75646f6d 665f6f6c 616d726f     str_modulo_forma
   258cc:	00000074                                t...

000258d0 <__func__.7749>:
   258d0:	5f727473 6c706572 00656361              str_replace.

000258dc <__func__.7776>:
   258dc:	5f727473 6e756f63 00000074 00000028     str_count...(...
   258ec:	0000202c 0000002c 00000029 6f5f706d     , ..,...)...mp_o
   258fc:	675f6a62 745f7465 28657079 666c6573     bj_get_type(self
   2590c:	296e695f 65673e2d 65746974 3d3d2072     _in)->getiter ==
   2591c:	5f706d20 5f6a626f 6c707574 65675f65      mp_obj_tuple_ge
   2592c:	65746974 00000072 2e2f2e2e 79702f2e     titer...../../py
   2593c:	6a626f2f 6c707574 00632e65 5f504d28     /objtuple.c.(MP_
   2594c:	5f4a424f 4f5f5349 73284a42 5f666c65     OBJ_IS_OBJ(self_
   2595c:	20296e69 28202626 706d2828 6a626f5f     in) && (((mp_obj
   2596c:	7361625f 2a745f65 76282829 2a64696f     _base_t*)((void*
   2597c:	6c657329 6e695f66 3e2d2929 65707974     )self_in))->type
   2598c:	203d3d20 706d2628 7079745f 75745f65      == (&mp_type_tu
   2599c:	29656c70 00002929                       ple)))..

000259a4 <tuple_count_obj>:
   259a4:	00024624 0001618b 5f504d28 5f4a424f     $F...a..(MP_OBJ_
   259b4:	4f5f5349 61284a42 5b736772 20295d30     IS_OBJ(args[0]) 
   259c4:	28202626 706d2828 6a626f5f 7361625f     && (((mp_obj_bas
   259d4:	2a745f65 76282829 2a64696f 67726129     e_t*)((void*)arg
   259e4:	5d305b73 3e2d2929 65707974 203d3d20     s[0]))->type == 
   259f4:	706d2628 7079745f 75745f65 29656c70     (&mp_type_tuple)
   25a04:	00002929                                ))..

00025a08 <tuple_index_obj>:
   25a08:	00024700 00040008 000161e9              .G.......a..

00025a14 <tuple_locals_dict_table>:
   25a14:	000003f6 000259a4 0000046e 00025a08     .....Y..n....Z..

00025a24 <tuple_locals_dict>:
   25a24:	00023d0c 00000017 00000002 00025a14     .=...........Z..

00025a34 <mp_type_tuple>:
   25a34:	00025df4 016a0000 00015d41 00015dc5     .]....j.A]...]..
   25a44:	00000000 00015f39 00015fc9 00000000     ....9_..._......
   25a54:	0001614d 000163af 00000000 00000000     Ma...c..........
	...
   25a6c:	00025a24                                $Z..

00025a70 <mp_const_empty_tuple_obj>:
   25a70:	00025a34 00000000 4f5f504d 495f4a42     4Z......MP_OBJ_I
   25a80:	59545f53 73284550 5f666c65 202c6e69     S_TYPE(self_in, 
   25a90:	5f706d26 65707974 7075745f 0029656c     &mp_type_tuple).

00025aa0 <__func__.7214>:
   25aa0:	6c707574 6d635f65 65685f70 7265706c     tuple_cmp_helper
   25ab0:	00000000                                ....

00025ab4 <__func__.7263>:
   25ab4:	6c707574 6f635f65 00746e75              tuple_count.

00025ac0 <__func__.7270>:
   25ac0:	6c707574 6e695f65 00786564              tuple_index.

00025acc <__func__.7291>:
   25acc:	6f5f706d 745f6a62 656c7075 7465675f     mp_obj_tuple_get
   25adc:	00000000                                ....

00025ae0 <__func__.7296>:
   25ae0:	6f5f706d 745f6a62 656c7075 6c65645f     mp_obj_tuple_del
   25af0:	00000000 4f5f504d 495f4a42 59545f53     ....MP_OBJ_IS_TY
   25b00:	2a284550 6d657469 6d26202c 79745f70     PE(*item, &mp_ty
   25b10:	745f6570 29657079 00000000 2e2f2e2e     pe_type)....../.
   25b20:	79702f2e 6a626f2f 65707974 0000632e     ./py/objtype.c..

00025b30 <native_base_init_wrapper_obj>:
   25b30:	00024700 0003fffe 0001654d 5f6d756e     .G......Me..num_
   25b40:	6974616e 625f6576 73657361 32203c20     native_bases < 2
   25b50:	00000000 6b6f6f6c 3e2d7075 74736564     ....lookup->dest
   25b60:	205d305b 4d203d3d 424f5f50 554e5f4a     [0] == MP_OBJ_NU
   25b70:	00004c4c 6b6f6f6c 3e2d7075 74736564     LL..lookup->dest
   25b80:	205d315b 4d203d3d 424f5f50 554e5f4a     [1] == MP_OBJ_NU
   25b90:	00004c4c 6f5f706d 635f6a62 7373616c     LL..mp_obj_class
   25ba0:	6f6f6c5f 3a70756b 6f6f4c20 676e696b     _lookup: Looking
   25bb0:	20707520 69207325 7325206e 0000000a      up %s in %s....
   25bc0:	6f5f706d 635f6a62 7373616c 6f6f6c5f     mp_obj_class_loo
   25bd0:	3a70756b 74614d20 64656863 65707320     kup: Matched spe
   25be0:	6c616963 74656d20 6c732068 2820746f     cial meth slot (
   25bf0:	3d66666f 20296425 20726f66 000a7325     off=%d) for %s..
   25c00:	65707974 6f6c3e2d 736c6163 6369645f     type->locals_dic
   25c10:	623e2d74 2e657361 65707974 203d3d20     t->base.type == 
   25c20:	5f706d26 65707974 6369645f 00000074     &mp_type_dict...
   25c30:	6f5f706d 635f6a62 7373616c 6f6f6c5f     mp_obj_class_loo
   25c40:	3a70756b 74655220 696e7275 203a676e     kup: Returning: 
   25c50:	00000000 73253c20 70254020 0000003e     .... <%s @%p>...
   25c60:	0000000a 6f5f706d 635f6a62 7373616c     ....mp_obj_class
   25c70:	6f6f6c5f 3a70756b 206f4e20 65726f6d     _lookup: No more
   25c80:	72617020 73746e65 0000000a 2073253c      parents....<%s 
   25c90:	656a626f 61207463 70252074 0000003e     object at %p>...
   25ca0:	6f5f706d 695f6a62 6e695f73 6e617473     mp_obj_is_instan
   25cb0:	745f6563 28657079 666c6573 00000029     ce_type(self)...
   25cc0:	6e695f5f 5f5f7469 73202928 6c756f68     __init__() shoul
   25cd0:	65722064 6e727574 6e6f4e20 00000065     d return None...

00025ce0 <mp_unary_op_method_name>:
   25ce0:	00000000 00101803 00000014              ............

00025cec <mp_binary_op_method_name>:
   25cec:	170a0f19 0000000c 00000000 15110000     ................
	...
   25d04:	25020000 00000000 00070000 6f5f706d     ...%........mp_o
   25d14:	695f6a62 6e695f73 6e617473 745f6563     bj_is_instance_t
   25d24:	28657079 6f5f706d 675f6a62 745f7465     ype(mp_obj_get_t
   25d34:	28657079 666c6573 296e695f 00000029     ype(self_in))...
   25d44:	656a626f 6e207463 6320746f 616c6c61     object not calla
   25d54:	00656c62 616c633c 27207373 3e277125     ble.<class '%q'>
   25d64:	00000000 65707974 6b617420 31207365     ....type takes 1
   25d74:	20726f20 72612033 656d7567 0073746e      or 3 arguments.
   25d84:	6e6e6163 6320746f 74616572 6e692065     cannot create in
   25d94:	6e617473 00006563 4f5f504d 495f4a42     stance..MP_OBJ_I
   25da4:	59545f53 73284550 5f666c65 202c6e69     S_TYPE(self_in, 
   25db4:	5f706d26 65707974 7079745f 00002965     &mp_type_type)..
   25dc4:	666c6573 6f6c3e2d 736c6163 6369645f     self->locals_dic
   25dd4:	623e2d74 2e657361 65707974 203d3d20     t->base.type == 
   25de4:	5f706d26 65707974 6369645f 00000074     &mp_type_dict...

00025df4 <mp_type_type>:
   25df4:	00025df4 016b0000 000171d5 00017201     .]....k..q...r..
   25e04:	0001726d 0000e4b1 00000000 000172ad     mr...........r..
	...
   25e30:	65707974 6e736920 61207427 6361206e     type isn't an ac
   25e40:	74706563 656c6261 73616220 79742065     ceptable base ty
   25e50:	00006570 746c756d 656c7069 73616220     pe..multiple bas
   25e60:	68207365 20657661 74736e69 65636e61     es have instance
   25e70:	79616c20 74756f2d 6e6f6320 63696c66      lay-out conflic
   25e80:	00000074 7075733c 203a7265 00000000     t...<super: ....
   25e90:	0000202c 0000003e 4f5f504d 495f4a42     , ..>...MP_OBJ_I
   25ea0:	59545f53 73284550 5f666c65 202c6e69     S_TYPE(self_in, 
   25eb0:	5f706d26 65707974 7075735f 00297265     &mp_type_super).
   25ec0:	4f5f504d 495f4a42 59545f53 73284550     MP_OBJ_IS_TYPE(s
   25ed0:	2d666c65 7079743e 26202c65 745f706d     elf->type, &mp_t
   25ee0:	5f657079 65707974 00000029 4f5f504d     ype_type)...MP_O
   25ef0:	495f4a42 59545f53 69284550 736d6574     BJ_IS_TYPE(items
   25f00:	2c5d695b 706d2620 7079745f 79745f65     [i], &mp_type_ty
   25f10:	00296570                                pe).

00025f14 <mp_type_super>:
   25f14:	00025df4 01670000 000175a9 00017601     .]....g..u...v..
	...
   25f30:	00017675 00000000 00000000 00000000     uv..............
	...
   25f50:	75737369 616c6362 29287373 67726120     issubclass() arg
   25f60:	6d203220 20747375 61206562 616c6320      2 must be a cla
   25f70:	6f207373 20612072 6c707574 666f2065     ss or a tuple of
   25f80:	616c6320 73657373 00000000 75737369      classes....issu
   25f90:	616c6362 29287373 67726120 6d203120     bclass() arg 1 m
   25fa0:	20747375 61206562 616c6320 00007373     ust be a class..

00025fb0 <mp_builtin_issubclass_obj>:
   25fb0:	00024624 000179dd                       $F...y..

00025fb8 <mp_builtin_isinstance_obj>:
   25fb8:	00024624 00017a25 666c6573 203d3d20     $F..%z..self == 
   25fc8:	5f706d26 65707974 6174735f 6d636974     &mp_type_staticm
   25fd8:	6f687465 7c7c2064 6c657320 3d3d2066     ethod || self ==
   25fe8:	706d2620 7079745f 6c635f65 6d737361      &mp_type_classm
   25ff8:	6f687465 00000064                       ethod...

00026000 <mp_type_staticmethod>:
   26000:	00025df4 01610000 00000000 00017a83     .]....a......z..
	...

0002603c <mp_type_classmethod>:
   2603c:	00025df4 00f70000 00000000 00017a83     .]...........z..
	...

00026078 <__func__.7750>:
   26078:	74736e69 65636e61 756f635f 6e5f746e     instance_count_n
   26088:	76697461 61625f65 00736573              ative_bases.

00026094 <__func__.7768>:
   26094:	6f5f706d 6e5f6a62 695f7765 6174736e     mp_obj_new_insta
   260a4:	0065636e                                nce.

000260a8 <__func__.7780>:
   260a8:	6f5f706d 635f6a62 7373616c 6f6f6c5f     mp_obj_class_loo
   260b8:	0070756b                                kup.

000260bc <__func__.7811>:
   260bc:	6f5f706d 695f6a62 6174736e 5f65636e     mp_obj_instance_
   260cc:	656b616d 77656e5f 00000000              make_new....

000260d8 <__func__.7852>:
   260d8:	6f5f706d 695f6a62 6174736e 5f65636e     mp_obj_instance_
   260e8:	64616f6c 7474615f 00000072              load_attr...

000260f4 <__func__.7945>:
   260f4:	65707974 7474615f 00000072              type_attr...

00026100 <__func__.7994>:
   26100:	65707573 74615f72 00007274              super_attr..

0002610c <__func__.8056>:
   2610c:	74617473 635f6369 7373616c 74656d5f     static_class_met
   2611c:	5f646f68 656b616d 77656e5f 00000000     hod_make_new....
   2612c:	5f504d28 5f4a424f 4f5f5349 73284a42     (MP_OBJ_IS_OBJ(s
   2613c:	5f666c65 20296e69 28202626 706d2828     elf_in) && (((mp
   2614c:	6a626f5f 7361625f 2a745f65 76282829     _obj_base_t*)((v
   2615c:	2a64696f 6c657329 6e695f66 3e2d2929     oid*)self_in))->
   2616c:	65707974 203d3d20 706d2628 7079745f     type == (&mp_typ
   2617c:	697a5f65 29292970 00000000 2e2f2e2e     e_zip)))....../.
   2618c:	79702f2e 6a626f2f 2e70697a 00000063     ./py/objzip.c...

0002619c <mp_type_zip>:
   2619c:	00025df4 01720000 00000000 00017b51     .]....r.....Q{..
	...
   261c0:	0000e423 00017bc7 00000000 00000000     #....{..........
	...

000261d8 <__func__.7387>:
   261d8:	5f70697a 72657469 7478656e 00000000     zip_iternext....

000261e8 <mp_op_getitem_obj>:
   261e8:	00024624 00017c6d                       $F..m|..

000261f0 <mp_op_setitem_obj>:
   261f0:	00024690 00017c95                       .F...|..

000261f8 <mp_op_delitem_obj>:
   261f8:	00024624 00017cbf                       $F...|..

00026200 <mp_op_contains_obj>:
   26200:	00024624 00017ce7 656a626f 6e207463     $F...|..object n
   26210:	6920746f 6573206e 6e657571 00006563     ot in sequence..
   26220:	20646162 65707974 65646f63 00000000     bad typecode....
   26230:	74617473 3a732520 0a642520 00000000     stat %s: %d.....
   26240:	0079702e 6d695f5f 74726f70 0a3a5f5f     .py.__import__:.
   26250:	00000000 00002020 0000000a 73696874     ....  ......this
   26260:	6d616e5f 20715f65 4d203d21 424f5f50     _name_q != MP_OB
   26270:	554e5f4a 00004c4c 2e2f2e2e 79702f2e     J_NULL..../../py
   26280:	6975622f 6e69746c 6f706d69 632e7472     /builtinimport.c
   26290:	00000000 72727543 20746e65 75646f6d     ....Current modu
   262a0:	702f656c 616b6361 203a6567 00000000     le/package: ....
   262b0:	7369202c 6361705f 6567616b 6425203a     , is_package: %d
   262c0:	00000000 6e6e6163 7020746f 6f667265     ....cannot perfo
   262d0:	72206d72 74616c65 20657669 6f706d69     rm relative impo
   262e0:	00007472 6f736552 6465766c 73616220     rt..Resolved bas
   262f0:	616e2065 6620656d 7220726f 74616c65     e name for relat
   26300:	20657669 6f706d69 203a7472 27732527     ive import: '%s'
   26310:	0000000a 75646f4d 6120656c 6165726c     ....Module alrea
   26320:	6c207964 6564616f 00000a64 75646f4d     dy loaded...Modu
   26330:	6e20656c 7920746f 6c207465 6564616f     le not yet loade
   26340:	00000a64 636f7250 69737365 6d20676e     d...Processing m
   26350:	6c75646f 25203a65 00000a73 76657250     odule: %s...Prev
   26360:	73756f69 74617020 3d203a68 732a2e25     ious path: =%.*s
   26370:	00000a3d 72727543 20746e65 68746170     =...Current path
   26380:	2e25203a 000a732a 75646f6d 6e20656c     : %.*s..module n
   26390:	6620746f 646e756f 00000000 732a2e25     ot found....%.*s
   263a0:	20736920 0a726964 00000000 6e695f5f      is dir.....__in
   263b0:	5f5f7469 0079702e                       it__.py.

000263b8 <mp_builtin___import___obj>:
   263b8:	00024700 0002000a 00018d73              .G......s...

000263c4 <__func__.8171>:
   263c4:	625f706d 746c6975 5f5f6e69 706d695f     mp_builtin___imp
   263d4:	5f74726f 0000005f                       ort__...

000263dc <mp_builtin_eval_obj>:
   263dc:	00024700 00020006 000194cd              .G..........

000263e8 <mp_builtin_exec_obj>:
   263e8:	00024700 00020006 000194eb 3d3c2032     .G..........2 <=
   263f8:	615f6e20 00736772 2e2f2e2e 79702f2e      n_args.../../py
   26408:	646f6d2f 6c697562 736e6974 0000632e     /modbuiltins.c..

00026418 <mp_builtin___build_class___obj>:
   26418:	00024700 0005fffe 0001960d              .G..........

00026424 <mp_builtin_abs_obj>:
   26424:	000245b8 000196c5                       .E......

0002642c <mp_builtin_all_obj>:
   2642c:	000245b8 000196df                       .E......

00026434 <mp_builtin_any_obj>:
   26434:	000245b8 0001972d                       .E..-...

0002643c <mp_builtin_bin_obj>:
   2643c:	000245b8 00019775                       .E..u...

00026444 <mp_builtin_callable_obj>:
   26444:	000245b8 0001979d 28726863 72612029     .E......chr() ar
   26454:	6f6e2067 6e692074 6e617220 32286567     g not in range(2
   26464:	00293635                                56).

00026468 <mp_builtin_chr_obj>:
   26468:	000245b8 000197c9                       .E......

00026470 <mp_builtin_dir_obj>:
   26470:	00024700 00000002 0001980d              .G..........

0002647c <mp_builtin_divmod_obj>:
   2647c:	00024624 000198c5                       $F......

00026484 <mp_builtin_hash_obj>:
   26484:	000245b8 000198e3                       .E......

0002648c <mp_builtin_hex_obj>:
   2648c:	000245b8 000198fd                       .E......

00026494 <mp_builtin_iter_obj>:
   26494:	000245b8 00019919                       .E......

0002649c <mp_builtin_next_obj>:
   2649c:	000245b8 00019933                       .E..3...

000264a4 <mp_builtin_oct_obj>:
   264a4:	000245b8 00019965 2064726f 65707865     .E..e...ord expe
   264b4:	20737463 68632061 63617261 00726574     cts a character.

000264c4 <mp_builtin_ord_obj>:
   264c4:	000245b8 00019981 72612d33 6f702067     .E......3-arg po
   264d4:	20292877 20746f6e 70707573 6574726f     w() not supporte
   264e4:	00000064                                d...

000264e8 <mp_builtin_pow_obj>:
   264e8:	00024700 00040006 000199bd              .G..........

000264f4 <mp_builtin_print_obj>:
   264f4:	00024700 0001ffff 000199fd 0000000a     .G..............

00026504 <mp_builtin___repl_print___obj>:
   26504:	000245b8 00019ab1                       .E......

0002650c <mp_builtin_repr_obj>:
   2650c:	000245b8 00019ae9                       .E......

00026514 <mp_builtin_round_obj>:
   26514:	00024700 00020004 00019b29              .G......)...

00026520 <mp_builtin_sum_obj>:
   26520:	00024700 00020004 00019b89 7473756d     .G..........must
   26530:	65737520 79656b20 64726f77 67726120      use keyword arg
   26540:	6e656d75 6f662074 656b2072 75662079     ument for key fu
   26550:	6974636e 00006e6f                       nction..

00026558 <mp_builtin_sorted_obj>:
   26558:	00024700 0003ffff 00019bdf              .G..........

00026564 <mp_builtin_getattr_obj>:
   26564:	00024700 00040006 00019c7d              .G......}...

00026570 <mp_builtin_setattr_obj>:
   26570:	00024690 00019cbd                       .F......

00026578 <mp_builtin_hasattr_obj>:
   26578:	00024624 00019ce9                       $F......

00026580 <mp_builtin_globals_obj>:
   26580:	0002454c 00019d25                       LE..%...

00026588 <mp_builtin_locals_obj>:
   26588:	0002454c 00019d33                       LE..3...

00026590 <mp_builtin_id_obj>:
   26590:	000245b8 0000e295                       .E......

00026598 <mp_builtin_len_obj>:
   26598:	000245b8 0000e2df                       .E......

000265a0 <mp_module_builtins_globals_table>:
   265a0:	00000072 000003ca 00000012 00026418     r............d..
   265b0:	0000004a 000263b8 00000086 00026504     J....c.......e..
   265c0:	000003be 00023824 000003d2 000257ec     ....$8.......W..
   265d0:	000003fe 00023d0c 0000047e 00024bd8     .....=..~....K..
   265e0:	000004be 00024e44 000004d6 00024fa0     ....DN.......O..
   265f0:	000004f6 00025060 0000052e 00025184     ....`P.......Q..
   26600:	00000592 000257b0 0000059e 00025f14     .....W......._..
   26610:	000005aa 00025a34 000005ae 00025df4     ....4Z.......]..
   26620:	000005ca 0002619c 000003de 0002603c     .....a......<`..
   26630:	00000586 00026000 000002f2 00025200     .....`.......R..
   26640:	00000396 00026424 000003a2 0002642c     ....$d......,d..
   26650:	000003aa 00026434 000003b6 0002643c     ....4d......<d..
   26660:	000003d6 00026444 000003da 00026468     ....Dd......hd..
   26670:	00000406 00026470 0000040a 0002647c     ....pd......|d..
   26680:	0000041a 000263dc 0000041e 000263e8     .....c.......c..
   26690:	00000446 00026564 00000566 00026570     F...de..f...pe..
   266a0:	0000044a 00026580 00000452 00026578     J....e..R...xe..
   266b0:	00000456 00026484 00000462 0002648c     V....d..b....d..
   266c0:	0000046a 00026590 0000048e 00025fb8     j....e......._..
   266d0:	0000049a 00025fb0 000004a6 00026494     ....._.......d..
   266e0:	000004ba 00026598 000004c6 00026588     .....e.......e..
   266f0:	000004f2 0002649c 000004fa 000264a4     .....d.......d..
   26700:	0000050a 000264c4 00000522 000264e8     .....d.."....d..
   26710:	00000526 000264f4 0000053a 0002650c     &....d..:....e..
   26720:	00000552 00026514 00000576 00026558     R....e..v...Xe..
   26730:	0000059a 00026520 000002e6 00023e10     .... e.......>..
   26740:	000002da 00023f78 000002de 0002402c     ....x?......,@..
   26750:	000002e2 00024068 000002ee 000240a4     ....h@.......@..
   26760:	000002f6 00023f00 000002fa 00023ec4     .....?.......>..
   26770:	0000031e 000240e0 00000322 00024338     .....@.."...8C..
   26780:	00000326 00024158 0000032e 00023e88     &...XA.......>..
   26790:	0000032a 00024194 00000336 0002411c     *....A..6....A..
   267a0:	0000033e 000241d0 00000342 0002420c     >....A..B....B..
   267b0:	0000034a 000242c0 00000352 00024248     J....B..R...HB..
   267c0:	0000035a 00023fb4 00000372 00024284     Z....?..r....B..
   267d0:	0000037a 00023f3c 0000037e 000242fc     z...<?..~....B..
   267e0:	00000382 00023e4c 00000386 00024374     ....L>......tC..
   267f0:	0000038a 000243b0 00000392 00023ff0     .....C.......?..
   26800:	000005b2 0002777c                       ....|w..

00026808 <mp_module_builtins_globals>:
   26808:	00023d0c 0000026f 0000004d 000265a0     .=..o...M....e..

00026818 <mp_module_builtins>:
   26818:	00025000 00026808                       .P...h..

00026820 <__func__.8085>:
   26820:	625f706d 746c6975 5f5f6e69 6975625f     mp_builtin___bui
   26830:	635f646c 7373616c 00005f5f              ld_class__..

0002683c <allowed_args.8197>:
   2683c:	02030158 000000b6 02030104 000000ba     X...............

0002684c <mp_micropython_opt_level_obj>:
   2684c:	00024700 00000002 00019d41              .G......A...

00026858 <mp_micropython_heap_lock_obj>:
   26858:	0002454c 00019d85                       LE......

00026860 <mp_micropython_heap_unlock_obj>:
   26860:	0002454c 00019d99                       LE......

00026868 <mp_module_micropython_globals_table>:
   26868:	00000072 000004de 000003ee 000237cc     r............7..
   26878:	00000506 0002684c 0000045a 00026858     ....Lh..Z...Xh..
   26888:	0000045e 00026860                       ^...`h..

00026890 <mp_module_micropython_globals>:
   26890:	00023d0c 0000002f 00000005 00026868     .=../.......hh..

000268a0 <mp_module_micropython>:
   268a0:	00025000 00026890                       .P...h..

000268a8 <__func__.7956>:
   268a8:	655f706d 75636578 625f6574 63657479     mp_execute_bytec
   268b8:	0065646f 61636f6c 6176206c 62616972     ode.local variab
   268c8:	7220656c 72656665 65636e65 65622064     le referenced be
   268d8:	65726f66 73736120 6d6e6769 00746e65     fore assignment.
   268e8:	6f5f706d 695f6a62 78655f73 74706563     mp_obj_is_except
   268f8:	5f6e6f69 74736e69 65636e61 504f5428     ion_instance(TOP
   26908:	00292928 2e2f2e2e 79702f2e 2e6d762f     ()).../../py/vm.
   26918:	00000063 5f637865 3e207073 7865203d     c...exc_sp >= ex
   26928:	74735f63 006b6361 72727563 6c746e65     c_stack.currentl
   26938:	6e695f79 6378655f 5f747065 636f6c62     y_in_except_bloc
   26948:	0000006b 5f637865 3d207073 7865203d     k...exc_sp == ex
   26958:	74735f63 206b6361 0031202d 5f746572     c_stack - 1.ret_
   26968:	646e696b 203d3d20 565f504d 45525f4d     kind == MP_VM_RE
   26978:	4e525554 4358455f 49545045 00004e4f     TURN_EXCEPTION..
   26988:	65747962 646f6320 6f6e2065 6d692074     byte code not im
   26998:	6d656c70 65746e65 00000064 61206f6e     plemented...no a
   269a8:	76697463 78652065 74706563 206e6f69     ctive exception 
   269b8:	72206f74 69617265 00006573 203a7025     to reraise..%p: 
   269c8:	00000000 00207025 0000000a 73736170     ....%p .....pass
   269d8:	20676e69 74706d65 75742079 20656c70     ing empty tuple 
   269e8:	2a207361 73677261 0000000a 74696e49     as *args....Init
   269f8:	206c6169 73677261 0000203a 636e7566     ial args: ..func
   26a08:	6e6f6974 746f6720 6c756d20 6c706974     tion got multipl
   26a18:	61762065 7365756c 726f6620 67726120     e values for arg
   26a28:	6e656d75 25272074 00002771 78656e75     ument '%q'..unex
   26a38:	74636570 6b206465 6f777965 61206472     pected keyword a
   26a48:	6d756772 00746e65 73677241 74697720     rgument.Args wit
   26a58:	776b2068 6c662073 65747461 3a64656e     h kws flattened:
   26a68:	00000020 73677241 74666120 66207265      ...Args after f
   26a78:	696c6c69 6420676e 75616665 7020746c     illing default p
   26a88:	7469736f 616e6f69 00203a6c 636e7566     ositional: .func
   26a98:	6e6f6974 73696d20 676e6973 71657220     tion missing req
   26aa8:	65726975 6f702064 69746973 6c616e6f     uired positional
   26ab8:	67726120 6e656d75 25232074 00000064      argument #%d...
   26ac8:	636e7566 6e6f6974 73696d20 676e6973     function missing
   26ad8:	71657220 65726975 656b2064 726f7779      required keywor
   26ae8:	72612064 656d7567 2720746e 00277125     d argument '%q'.
   26af8:	636e7566 6e6f6974 73696d20 676e6973     function missing
   26b08:	79656b20 64726f77 6c6e6f2d 72612079      keyword-only ar
   26b18:	656d7567 0000746e 6c6c6143 3a676e69     gument..Calling:
   26b28:	705f6e20 615f736f 3d736772 202c6425      n_pos_args=%d, 
   26b38:	776b5f6e 796c6e6f 6772615f 64253d73     n_kwonly_args=%d
   26b48:	0000000a 656c6946 2c732520 646f6320     ....File %s, cod
   26b58:	6c622065 206b636f 27732527 65642820     e block '%s' (de
   26b68:	69726373 726f7470 7025203a 7962202c     scriptor: %p, by
   26b78:	6f636574 40206564 25207025 79622075     tecode @%p %u by
   26b88:	29736574 0000000a 20776152 65747962     tes)....Raw byte
   26b98:	65646f63 6f632820 695f6564 5f6f666e     code (code_info_
   26ba8:	657a6973 2c75253d 74796220 646f6365     size=%u, bytecod
   26bb8:	69735f65 253d657a 0a3a2975 00000000     e_size=%u):.....
   26bc8:	0000000a 32302520 00000078 20677261     .... %02x...arg 
   26bd8:	656d616e 00003a73 00732520 535f4e28     names:.. %s.(N_S
   26be8:	45544154 29752520 0000000a 455f4e28     TATE %u)....(N_E
   26bf8:	535f4358 4b434154 29752520 0000000a     XC_STACK %u)....
   26c08:	494e4928 45435f54 25204c4c 000a2975     (INIT_CELL %u)..
   26c18:	63622020 2064253d 656e696c 0a75253d       bc=%d line=%u.
   26c28:	00000000 44414f4c 4e4f435f 465f5453     ....LOAD_CONST_F
   26c38:	45534c41 00000000 44414f4c 4e4f435f     ALSE....LOAD_CON
   26c48:	4e5f5453 00454e4f 44414f4c 4e4f435f     ST_NONE.LOAD_CON
   26c58:	545f5453 00455552 44414f4c 4e4f435f     ST_TRUE.LOAD_CON
   26c68:	535f5453 4c4c414d 544e495f 00642520     ST_SMALL_INT %d.
   26c78:	44414f4c 4e4f435f 535f5453 4e495254     LOAD_CONST_STRIN
   26c88:	25272047 00002773 44414f4c 4e4f435f     G '%s'..LOAD_CON
   26c98:	4f5f5453 25204a42 00003d70 44414f4c     ST_OBJ %p=..LOAD
   26ca8:	4c554e5f 0000004c 44414f4c 5341465f     _NULL...LOAD_FAS
   26cb8:	204e5f54 00007525 44414f4c 5245445f     T_N %u..LOAD_DER
   26cc8:	25204645 00000075 44414f4c 4d414e5f     EF %u...LOAD_NAM
   26cd8:	73252045 00000000 44414f4c 4f4c475f     E %s....LOAD_GLO
   26ce8:	204c4142 00007325 44414f4c 5454415f     BAL %s..LOAD_ATT
   26cf8:	73252052 00000000 44414f4c 54454d5f     R %s....LOAD_MET
   26d08:	20444f48 00007325 44414f4c 5055535f     HOD %s..LOAD_SUP
   26d18:	4d5f5245 4f485445 73252044 00000000     ER_METHOD %s....
   26d28:	44414f4c 4955425f 435f444c 5353414c     LOAD_BUILD_CLASS
   26d38:	00000000 44414f4c 4255535f 00524353     ....LOAD_SUBSCR.
   26d48:	524f5453 41465f45 4e5f5453 00752520     STORE_FAST_N %u.
   26d58:	524f5453 45445f45 20464552 00007525     STORE_DEREF %u..
   26d68:	524f5453 414e5f45 2520454d 00000073     STORE_NAME %s...
   26d78:	524f5453 4c475f45 4c41424f 00732520     STORE_GLOBAL %s.
   26d88:	524f5453 54415f45 25205254 00000073     STORE_ATTR %s...
   26d98:	524f5453 55535f45 52435342 00000000     STORE_SUBSCR....
   26da8:	454c4544 465f4554 20545341 00007525     DELETE_FAST %u..
   26db8:	454c4544 445f4554 46455245 00752520     DELETE_DEREF %u.
   26dc8:	454c4544 4e5f4554 20454d41 00007325     DELETE_NAME %s..
   26dd8:	454c4544 475f4554 41424f4c 7325204c     DELETE_GLOBAL %s
   26de8:	00000000 5f505544 00504f54 5f505544     ....DUP_TOP.DUP_
   26df8:	5f504f54 004f5754 5f504f50 00504f54     TOP_TWO.POP_TOP.
   26e08:	5f544f52 004f5754 5f544f52 45524854     ROT_TWO.ROT_THRE
   26e18:	00000045 504d554a 00752520 5f504f50     E...JUMP %u.POP_
   26e28:	504d554a 5f46495f 45555254 00752520     JUMP_IF_TRUE %u.
   26e38:	5f504f50 504d554a 5f46495f 534c4146     POP_JUMP_IF_FALS
   26e48:	75252045 00000000 504d554a 5f46495f     E %u....JUMP_IF_
   26e58:	45555254 5f524f5f 20504f50 00007525     TRUE_OR_POP %u..
   26e68:	504d554a 5f46495f 534c4146 524f5f45     JUMP_IF_FALSE_OR
   26e78:	504f505f 00752520 55544553 49575f50     _POP %u.SETUP_WI
   26e88:	25204854 00000075 48544957 454c435f     TH %u...WITH_CLE
   26e98:	50554e41 00000000 49574e55 4a5f444e     ANUP....UNWIND_J
   26ea8:	20504d55 25207525 00000064 55544553     UMP %u %d...SETU
   26eb8:	58455f50 54504543 00752520 55544553     P_EXCEPT %u.SETU
   26ec8:	49465f50 4c4c414e 75252059 00000000     P_FINALLY %u....
   26ed8:	5f444e45 414e4946 00594c4c 5f544547     END_FINALLY.GET_
   26ee8:	52455449 00000000 5f544547 52455449     ITER....GET_ITER
   26ef8:	4154535f 00004b43 5f524f46 52455449     _STACK..FOR_ITER
   26f08:	00752520 5f504f50 434f4c42 0000004b      %u.POP_BLOCK...
   26f18:	5f504f50 45435845 00005450 4c495542     POP_EXCEPT..BUIL
   26f28:	55545f44 20454c50 00007525 4c495542     D_TUPLE %u..BUIL
   26f38:	494c5f44 25205453 00000075 4c495542     D_LIST %u...BUIL
   26f48:	414d5f44 75252050 00000000 524f5453     D_MAP %u....STOR
   26f58:	414d5f45 00000050 4c495542 45535f44     E_MAP...BUILD_SE
   26f68:	75252054 00000000 524f5453 4f435f45     T %u....STORE_CO
   26f78:	2520504d 00000075 41504e55 535f4b43     MP %u...UNPACK_S
   26f88:	45555145 2045434e 00007525 41504e55     EQUENCE %u..UNPA
   26f98:	455f4b43 75252058 00000000 454b414d     CK_EX %u....MAKE
   26fa8:	4e55465f 4f495443 7025204e 00000000     _FUNCTION %p....
   26fb8:	454b414d 4e55465f 4f495443 45445f4e     MAKE_FUNCTION_DE
   26fc8:	47524146 70252053 00000000 454b414d     FARGS %p....MAKE
   26fd8:	4f4c435f 45525553 20702520 00007525     _CLOSURE %p %u..
   26fe8:	454b414d 4f4c435f 45525553 4645445f     MAKE_CLOSURE_DEF
   26ff8:	53475241 20702520 00007525 4c4c4143     ARGS %p %u..CALL
   27008:	4e55465f 4f495443 3d6e204e 6e207525     _FUNCTION n=%u n
   27018:	253d776b 00000075 4c4c4143 4e55465f     kw=%u...CALL_FUN
   27028:	4f495443 41565f4e 574b5f52 253d6e20     CTION_VAR_KW n=%
   27038:	6b6e2075 75253d77 00000000 4c4c4143     u nkw=%u....CALL
   27048:	54454d5f 20444f48 75253d6e 776b6e20     _METHOD n=%u nkw
   27058:	0075253d 4c4c4143 54454d5f 5f444f48     =%u.CALL_METHOD_
   27068:	5f524156 6e20574b 2075253d 3d776b6e     VAR_KW n=%u nkw=
   27078:	00007525 55544552 565f4e52 45554c41     %u..RETURN_VALUE
   27088:	00000000 53494152 41565f45 47524152     ....RAISE_VARARG
   27098:	75252053 00000000 4c454959 41565f44     S %u....YIELD_VA
   270a8:	0045554c 4c454959 52465f44 00004d4f     LUE.YIELD_FROM..
   270b8:	4f504d49 4e5f5452 20454d41 27732527     IMPORT_NAME '%s'
   270c8:	00000000 4f504d49 465f5452 204d4f52     ....IMPORT_FROM 
   270d8:	27732527 00000000 4f504d49 535f5452     '%s'....IMPORT_S
   270e8:	00524154 44414f4c 5341465f 75252054     TAR.LOAD_FAST %u
   270f8:	00000000 524f5453 41465f45 25205453     ....STORE_FAST %
   27108:	00000075 52414e55 504f5f59 00752520     u...UNARY_OP %u.
   27118:	414e4942 4f5f5952 75252050 00732520     BINARY_OP %u %s.
   27128:	65646f63 2c702520 74796220 6f632065     code %p, byte co
   27138:	30206564 32302578 6f6e2078 6d692074     de 0x%02x not im
   27148:	6d656c70 65746e65 00000a64 00000030     plemented...0...
   27158:	2e2f2e2e 79702f2e 6f68732f 2e636277     ../../py/showbc.
   27168:	00000063 75323025 00000020              c...%02u ...

00027174 <__func__.7849>:
   27174:	625f706d 63657479 5f65646f 6e697270     mp_bytecode_prin
   27184:	74735f74 00000072 00006669 6c696877     t_str...if..whil
   27194:	00000065 00726f66 00797274 68746977     e...for.try.with
   271a4:	00000000 00666564 73616c63 00000073     ....def.class...
   271b4:	00000020 0073250a 0000000a               ....%s.....

000271c0 <import_str.7332>:
   271c0:	6f706d69 00207472                       import .

000271c8 <mp_builtin_open_obj>:
   271c8:	00024700 0003ffff 0001cead 65737341     .G..........Asse
   271d8:	6f697472 2527206e 66202773 656c6961     rtion '%s' faile
   271e8:	61202c64 69662074 2520656c 64253a73     d, at file %s:%d
   271f8:	0000000a 65737341 6f697472 6166206e     ....Assertion fa
   27208:	64656c69 00000000 206e6950 2070616d     iled....Pin map 
   27218:	73736170 70206465 00206e69 2e6e6950     passed pin .Pin.
   27228:	7070616d 64207265 276e6469 65722074     mapper didn't re
   27238:	6e727574 50206120 6f206e69 63656a62     turn a Pin objec
   27248:	00000074 2e6e6950 7070616d 6d207265     t...Pin.mapper m
   27258:	20737061 00000000 206f7420 00000000     aps .... to ....
   27268:	2e6e6950 5f70616d 74636964 70616d20     Pin.map_dict map
   27278:	00002073 2e6e6950 72616f62 616d2064     s ..Pin.board ma
   27288:	00207370 286e6950 20297325 73656f64     ps .Pin(%s) does
   27298:	2074276e 73697865 00000074 286e6950     n't exist...Pin(
   272a8:	2e6e6950 2e757063 202c7125 65646f6d     Pin.cpu.%q, mode
   272b8:	6e69503d 0000002e 4c414e41 0029474f     =Pin....ANALOG).
   272c8:	7570202c 503d6c6c 252e6e69 00000071     , pull=Pin.%q...
   272d8:	6661202c 2964253d 00000000 6661202c     , af=%d)...., af
   272e8:	6e69503d 2971252e 00000000 00000029     =Pin.%q)....)...

000272f8 <pin_mapper_fun_obj>:
   272f8:	00024700 00020004 0001d76d              .G......m...

00027304 <pin_mapper_obj>:
   27304:	0002603c 000272f8                       <`...r..

0002730c <pin_map_dict_fun_obj>:
   2730c:	00024700 00020004 0001d7a5              .G..........

00027318 <pin_map_dict_obj>:
   27318:	0002603c 0002730c                       <`...s..

00027320 <pin_af_list_obj>:
   27320:	000245b8 0001d7dd                       .E......

00027328 <pin_debug_fun_obj>:
   27328:	00024700 00020004 0001d82b              .G......+...

00027334 <pin_debug_obj>:
   27334:	0002603c 00027328 61766e69 2064696c     <`..(s..invalid 
   27344:	206e6970 65726964 6f697463 25203a6e     pin direction: %
   27354:	00000064 61766e69 2064696c 206e6970     d...invalid pin 
   27364:	65707974 6425203a 00000000 61766e69     type: %d....inva
   27374:	2064696c 206e6970 76697264 25203a65     lid pin drive: %
   27384:	00000064 61766e69 2064696c 206e6970     d...invalid pin 
   27394:	203a6661 00006425                       af: %d..

0002739c <pin_init_obj>:
   2739c:	00024700 0003ffff 0001da09              .G..........

000273a8 <pin_value_obj>:
   273a8:	00024700 00020004 0001da31              .G......1...

000273b4 <pin_off_obj>:
   273b4:	000245b8 0001da57                       .E..W...

000273bc <pin_on_obj>:
   273bc:	000245b8 0001da85                       .E......

000273c4 <pin_irq_obj>:
   273c4:	00024700 0003ffff 0001dab5              .G..........

000273d0 <pin_name_obj>:
   273d0:	000245b8 0001dad5                       .E......

000273d8 <pin_names_obj>:
   273d8:	000245b8 0001daf7                       .E......

000273e0 <pin_port_obj>:
   273e0:	000245b8 0001db71                       .E..q...

000273e8 <pin_pin_obj>:
   273e8:	000245b8 0001db93                       .E......

000273f0 <pin_gpio_obj>:
   273f0:	000245b8 0001dbb7                       .E......

000273f8 <pin_dir_obj>:
   273f8:	000245b8 0001dbd9                       .E......

00027400 <pin_type_obj>:
   27400:	000245b8 0001dc03                       .E......

00027408 <pin_af_obj>:
   27408:	000245b8 0001dc33                       .E..3...

00027410 <pin_locals_dict_table>:
   27410:	00000476 0002739c 000005c2 000273a8     v....s.......s..
   27420:	000004fe 000273b4 00000502 000273bc     .....s.......s..
   27430:	00000482 000273c4 000004ca 000273b4     .....s.......s..
   27440:	00000466 000273bc 000004ea 000273d0     f....s.......s..
   27450:	000004ee 000273d8 0000039e 00027320     .....s...... s..
   27460:	0000051e 000273e0 00000512 000273e8     .....s.......s..
   27470:	0000044e 000273f0 00000406 000273f8     N....s.......s..
   27480:	000005ae 00027400 0000039a 00027408     .....t.......t..
   27490:	000004da 00027304 000003fe 00027318     .....s.......s..
   274a0:	000003fa 00027334 000003ba 000275b8     ....4s.......u..
   274b0:	00000306 00000001 00000356 00000003     ........V.......
   274c0:	0000034e 00000013 000002ce 00000005     N...............
   274d0:	000002d6 00000001 00000366 00000015     ........f.......
   274e0:	0000035e 00000019 00000362 00000011     ^.......b.......
   274f0:	0000031a 00000009 0000030e 00000001     ................
   27500:	0000030a 00000003 00000312 0000000d     ................
   27510:	00000316 00000005 00000332 00000003     ........2.......
   27520:	0000033a 00000005 00000302 000000cd     :...............

00027530 <pin_locals_dict>:
   27530:	00023d0c 00000127 00000024 00027410     .=..'...$....t..

00027540 <pin_mod>:
   27540:	00025df4 00db0000 0001d531 0001d685     .]......1.......
   27550:	0001d6ed 00000000 00000000 00000000     ................
	...
   27578:	00027530                                0u..

0002757c <allowed_args.8427>:
   2757c:	01020138 00000000 0003014a 0002511c     8.......J....Q..
   2758c:	00030103 00000000 000200e6 ffffffff     ................
   2759c:	02030170 00000000 020200e9 ffffffff     p...............
   275ac:	6e69503c 3e71252e 00000000              <Pin.%q>....

000275b8 <pin_board_pins_obj_type>:
   275b8:	00025df4 00ee0000 0001dc65 00000000     .]......e.......
	...
   275f0:	00027ecc 203a4449 53414c43 30253d53     .~..ID: CLASS=%0
   27600:	202c7832 32302576 30252e75 00007532     2x, v%02u.%02u..
   27610:	48207525 0000007a 72747371 20200a3a     %u Hz...qstr:.  
   27620:	6f705f6e 253d6c6f 20200a75 73715f6e     n_pool=%u.  n_qs
   27630:	253d7274 20200a75 74735f6e 61645f72     tr=%u.  n_str_da
   27640:	625f6174 73657479 0a75253d 5f6e2020     ta_bytes=%u.  n_
   27650:	61746f74 79625f6c 3d736574 000a7525     total_bytes=%u..
   27660:	003a4347 75252020 746f7420 000a6c61     GC:.  %u total..
   27670:	75252020 25203a20 00000a75 3d312020       %u : %u...  1=
   27680:	32207525 2075253d 75253d6d 0000000a     %u 2=%u m=%u....

00027690 <machine_info_obj>:
   27690:	00024700 00000002 0001de25              .G......%...

0002769c <machine_unique_id_obj>:
   2769c:	0002454c 0001deed                       LE......

000276a4 <machine_reset_obj>:
   276a4:	0002454c 0001df11                       LE......

000276ac <machine_soft_reset_obj>:
   276ac:	0002454c 0001df25                       LE..%...

000276b4 <machine_bootloader_obj>:
   276b4:	0002454c 0001df49 71657266 61686320     LE..I...freq cha
   276c4:	2065676e 20746f6e 70707573 6574726f     nge not supporte
   276d4:	00000064                                d...

000276d8 <machine_freq_obj>:
   276d8:	00024700 00000008 0001df4f              .G......O...

000276e4 <machine_sleep_obj>:
   276e4:	0002454c 0001df91                       LE......

000276ec <machine_deepsleep_obj>:
   276ec:	0002454c 0001dfa5                       LE......

000276f4 <machine_reset_cause_obj>:
   276f4:	0002454c 0001dfb9                       LE......

000276fc <machine_module_globals_table>:
   276fc:	00000072 000005b2 00000472 00027690     r.......r....v..
   2770c:	000005b6 0002769c 0000053e 000276a4     .....v..>....v..
   2771c:	0000056e 000276ac 000003c2 000276b4     n....v.......v..
   2772c:	0000042e 000276d8 00000542 000276f4     .....v..B....v..
   2773c:	0000036e 00027540 0000036a 00000003     n...@u..j.......
   2774c:	000002fe 00000005 0000038e 00000007     ................
   2775c:	000002ea 00000009 00000376 00000001     ........v.......

0002776c <machine_module_globals>:
   2776c:	00023d0c 00000077 0000000e 000276fc     .=..w........v..

0002777c <machine_module>:
   2777c:	00025000 0002776c                       .P..lw..

00027784 <pin_PB6_af>:
   27784:	0000007d 00000504 00000001 00011804     }...............
   27794:	00000091 00000707 00000000 00011807     ................

000277a4 <pin_PB7_af>:
   277a4:	0000007e 00000504 00000002 00011c04     ~...............
   277b4:	00000092 00000707 00000001 00011c07     ................

000277c4 <pin_PF4_af>:
   277c4:	00000085 00010505 00000000 00051005     ................
   277d4:	0000008f 00ff0406 00000004 00051006     ................
   277e4:	00000095 00020707 00000000 00051007     ................
   277f4:	000000a3 00000b08 00000000 00051008     ................

00027804 <pin_PE3_af>:
   27804:	00000066 00ff0000 00000000 ffffffff     f...............

00027814 <pin_PE2_af>:
   27814:	00000067 00ff0000 00000001 ffffffff     g...............

00027824 <pin_PE1_af>:
   27824:	0000006a 00ff0000 00000002 ffffffff     j...............

00027834 <pin_PE0_af>:
   27834:	0000006b 00ff0000 00000003 ffffffff     k...............

00027844 <pin_PD7_af>:
   27844:	000000b2 00050607 00000001 00031c07     ................
   27854:	0000008e 00ff0908 00000000 00031c08     ................

00027864 <pin_PC7_af>:
   27864:	000000aa 00010607 00000001 00021c07     ................
   27874:	000000a5 00000b08 00000001 00021c08     ................

00027884 <pin_PC6_af>:
   27884:	000000a9 00010607 00000000 00021807     ................
   27894:	000000a3 00000b08 00000000 00021808     ................

000278a4 <pin_PC5_af>:
   278a4:	00000084 00000504 00000008 00021404     ................
   278b4:	000000a8 00000607 00000001 00021407     ................
   278c4:	0000009f 00010108 00000003 00021408     ................

000278d4 <pin_PC4_af>:
   278d4:	00000083 00000504 00000007 00021004     ................
   278e4:	00000090 00ff0406 00000005 00021006     ................
   278f4:	000000a7 00000607 00000000 00021007     ................
   27904:	000000a0 00010108 00000002 00021008     ................

00027914 <pin_PA6_af>:
   27914:	00000074 00010303 00000001 00001803     t...............
   27924:	00000088 00010505 00000003 00001805     ................

00027934 <pin_PA7_af>:
   27934:	00000075 00010303 00000000 00001c03     u...............
   27944:	00000089 00010505 00000004 00001c05     ................

00027954 <pin_PF0_af>:
   27954:	000000a0 00010101 00000002 00050001     ................
   27964:	0000008a 00010505 00000005 00050005     ................
   27974:	00000091 00000707 00000000 00050007     ................
   27984:	0000008e 00ff0908 00000000 00050008     ................

00027994 <pin_PF1_af>:
   27994:	0000009f 00010101 00000003 00050401     ................
   279a4:	0000008b 00010505 00000006 00050405     ................
   279b4:	00000092 00000707 00000001 00050407     ................
   279c4:	0000009e 00ff0d0e 00000002 0005040e     ................

000279d4 <pin_PF2_af>:
   279d4:	0000007c 00000504 00000000 00050804     |...............
   279e4:	0000008c 00010505 00000007 00050805     ................
   279f4:	00000093 00010707 00000000 00050807     ................
   27a04:	0000009d 00ff0d0e 00000001 0005080e     ................

00027a14 <pin_PF3_af>:
   27a14:	0000008d 00010505 00000008 00050c05     ................
   27a24:	00000094 00010707 00000001 00050c07     ................

00027a34 <pin_PD4_af>:
   27a34:	000000a1 00000b00 00000002 ffffffff     ................
   27a44:	000000af 00040607 00000000 00031007     ................

00027a54 <pin_PD5_af>:
   27a54:	000000a2 00000b00 00000003 ffffffff     ................
   27a64:	000000b0 00040607 00000001 00031407     ................

00027a74 <pin_PB0_af>:
   27a74:	000000a4 00000b00 00000004 ffffffff     ................
   27a84:	00000095 00020707 00000000 00010007     ................

00027a94 <pin_PB1_af>:
   27a94:	000000a6 00000b00 00000005 ffffffff     ................
   27aa4:	00000096 00020707 00000001 00010407     ................

00027ab4 <pin_PB2_af>:
   27ab4:	00000072 00000303 00000001 00010803     r...............
   27ac4:	00000097 00030707 00000000 00010807     ................

00027ad4 <pin_PB3_af>:
   27ad4:	00000073 00000303 00000000 00010c03     s...............
   27ae4:	00000098 00030707 00000001 00010c07     ................

00027af4 <pin_PC3_af>:
   27af4:	0000007a 00ff0801 00000001 00020c01     z...............
   27b04:	0000009c 00050707 00000001 00020c07     ................

00027b14 <pin_PC2_af>:
   27b14:	00000079 00ff0801 00000004 00020801     y...............
   27b24:	0000009b 00050707 00000000 00020807     ................

00027b34 <pin_PC1_af>:
   27b34:	0000007b 00ff0801 00000005 00020401     {...............
   27b44:	0000009a 00040707 00000001 00020407     ................

00027b54 <pin_PC0_af>:
   27b54:	00000078 00ff0801 00000003 00020001     x...............
   27b64:	00000099 00040707 00000000 00020007     ................

00027b74 <pin_PD6_af>:
   27b74:	0000007c 00000504 00000000 00031804     |...............
   27b84:	000000b1 00050607 00000000 00031807     ................

00027b94 <pin_PB5_af>:
   27b94:	00000069 00ff0000 0000000b ffffffff     i...............
   27ba4:	00000080 00000504 00000004 00011404     ................
   27bb4:	00000094 00010707 00000001 00011407     ................

00027bc4 <pin_PB4_af>:
   27bc4:	00000068 00ff0000 0000000a ffffffff     h...............
   27bd4:	0000007f 00000504 00000003 00011004     ................
   27be4:	00000093 00010707 00000000 00011007     ................

00027bf4 <pin_PE4_af>:
   27bf4:	00000071 00ff0000 00000009 ffffffff     q...............
   27c04:	00000076 00020303 00000001 00041003     v...............
   27c14:	00000081 00000504 00000005 00041004     ................
   27c24:	00000088 00010505 00000003 00041005     ................

00027c34 <pin_PE5_af>:
   27c34:	00000070 00ff0000 00000008 ffffffff     p...............
   27c44:	00000082 00000504 00000006 00041404     ................
   27c54:	00000089 00010505 00000004 00041405     ................

00027c64 <pin_PD0_af>:
   27c64:	0000006f 00ff0000 00000007 ffffffff     o...............
   27c74:	00000077 00030303 00000001 00030003     w...............
   27c84:	00000083 00000504 00000007 00030004     ................
   27c94:	00000086 00010505 00000001 00030005     ................
   27ca4:	000000ab 00020607 00000000 00030007     ................

00027cb4 <pin_PD1_af>:
   27cb4:	0000006e 00ff0000 00000006 ffffffff     n...............
   27cc4:	00000084 00000504 00000008 00030404     ................
   27cd4:	00000087 00010505 00000002 00030405     ................
   27ce4:	000000ac 00020607 00000001 00030407     ................

00027cf4 <pin_PD2_af>:
   27cf4:	0000006d 00ff0000 00000005 ffffffff     m...............
   27d04:	0000007c 00000504 00000000 00030804     |...............
   27d14:	000000ad 00030607 00000000 00030807     ................
   27d24:	000000a3 00000b08 00000000 00030808     ................

00027d34 <pin_PD3_af>:
   27d34:	0000006c 00ff0000 00000004 ffffffff     l...............
   27d44:	0000008f 00ff0406 00000004 00030c06     ................
   27d54:	000000ae 00030607 00000001 00030c07     ................
   27d64:	000000a5 00000b08 00000001 00030c08     ................

00027d74 <pin_board_pins_locals_dict_table>:
   27d74:	00000126 20000000 0000012a 20000030     &...... *...0.. 
   27d84:	00000196 20000060 0000017a 20000090     ....`.. z...... 
   27d94:	00000176 200000c0 00000172 200000f0     v...... r...... 
   27da4:	0000016e 20000120 0000016a 20000150     n... .. j...P.. 
   27db4:	0000014a 20000180 00000146 200001b0     J...... F...... 
   27dc4:	00000142 200001e0 0000013e 20000210     B...... >...... 
   27dd4:	000000ee 20000240 000000f2 20000270     ....@.. ....p.. 
   27de4:	000000f6 200002a0 000000fa 200002d0     ....... ....... 
   27df4:	000000fe 20000300 00000102 20000330     ....... ....0.. 
   27e04:	00000106 20000360 0000010a 20000390     ....`.. ....... 
   27e14:	00000186 200003c0 0000018a 200003f0     ....... ....... 
   27e24:	0000018e 20000420 00000192 20000450     .... .. ....P.. 
   27e34:	0000015e 20000480 00000162 200004b0     ^...... b...... 
   27e44:	0000010e 200004e0 00000112 20000510     ....... ....... 
   27e54:	00000116 20000540 0000011a 20000570     ....@.. ....p.. 
   27e64:	0000013a 200005a0 00000136 200005d0     :...... 6...... 
   27e74:	00000132 20000600 0000012e 20000630     2...... ....0.. 
   27e84:	00000166 20000660 00000122 20000690     f...`.. "...... 
   27e94:	0000011e 200006c0 0000017e 200006f0     ....... ~...... 
   27ea4:	00000182 20000720 0000014e 20000750     .... .. N...P.. 
   27eb4:	00000152 20000780 00000156 200007b0     R...... V...... 
   27ec4:	0000015a 200007e0                       Z...... 

00027ecc <pin_board_pins_locals_dict>:
   27ecc:	00023d0c 0000015f 0000002b 00027d74     .=.._...+...t}..
   27edc:	0000000d 00000004 6b6f6f74 20752520     ........took %u 
   27eec:	000a736d 72747371 20200a3a 6f705f6e     ms..qstr:.  n_po
   27efc:	253d6c6f 20200a75 73715f6e 253d7274     ol=%u.  n_qstr=%
   27f0c:	20200a75 74735f6e 61645f72 625f6174     u.  n_str_data_b
   27f1c:	73657479 0a75253d 5f6e2020 61746f74     ytes=%u.  n_tota
   27f2c:	79625f6c 3d736574 000a7525 20776172     l_bytes=%u..raw 
   27f3c:	4c504552 5443203b 422d4c52 206f7420     REPL; CTRL-B to 
   27f4c:	74697865 00000a0d 0000003e 00000a0d     exit....>.......
   27f5c:	00004b4f 7263694d 7479506f 206e6f68     OK..MicroPython 
   27f6c:	392e3176 372d342e 672d3639 33323864     v1.9.4-796-gd823
   27f7c:	31346466 69642d33 20797472 32206e6f     fd413-dirty on 2
   27f8c:	2d383130 302d3231 54203b38 20617669     018-12-08; Tiva 
   27f9c:	6e75614c 50206863 77206461 20687469     Launch Pad with 
   27fac:	43344d54 47333231 4d504836 00000a0d     TM4C123G6HPM....
   27fbc:	203e3e3e 00000000 61700a0d 20657473     >>> ......paste 
   27fcc:	65646f6d 7443203b 432d6c72 206f7420     mode; Ctrl-C to 
   27fdc:	636e6163 202c6c65 6c727443 7420442d     cancel, Ctrl-D t
   27fec:	6966206f 6873696e 3d3d0a0d 0000203d     o finish..=== ..
   27ffc:	3d3d0a0d 0000203d 202e2e2e 00000000     ..=== ..... ....
   2800c:	6c756f63 6f6e2064 69662074 6d20646e     could not find m
   2801c:	6c75646f 25272065 000a2773              odule '%s'..

00028028 <pyb_set_repl_info_obj>:
   28028:	000245b8 0001e501 08080808 00000000     .E..............
   28038:	75255b1b 00000000 004b5b1b 00000a0d     .[%u.....[K.....
   28048:	20202020 00000000 72660dfe 6e657a6f         ......frozen
   28058:	74736574 0079702e 507503f9 00000079     test.py...uPy...
   28068:	006901cc                                ..i.

0002806c <mp_qstr_frozen_const_pool>:
   2806c:	00020a30 00000173 00000003 00000003     0...s...........
   2807c:	00028050 00028060 00028068              P...`...h...

00028088 <bytecode_data_frozentest__lt_module_gt_>:
   28088:	00000003 300d0000 2a017300 2b282828     .......0.s.*(((+
   28098:	ff000028 1601491b 01640174 01491b32     (....I..t.d.2.I.
   280a8:	01640017 01491b32 01640117 01491b32     ..d.2.I...d.2.I.
   280b8:	01640217 01491b32 9aefba14 32016415     ..d.2.I......d.2
   280c8:	800f3580 01752430 1b01491b 01640175     .5..0$u..I..u.d.
   280d8:	30e58132 eb36d784 5b11327f 6f6c2061     2..0..6..2.[a lo
   280e8:	7320676e 6e697274 68742067 69207461     ng string that i
   280f8:	6f6e2073 6e692074 6e726574 00006465     s not interned..

00028108 <const_obj_frozentest__lt_module_gt__0>:
   28108:	000257b0 000000f6 00000022 000280e4     .W......".......
   28118:	74732061 676e6972 61687420 61682074     a string that ha
   28128:	6e752073 646f6369 b1ce2065 b3ceb2ce     s unicode ......
   28138:	61686320 00007372                        chars..

00028140 <const_obj_frozentest__lt_module_gt__1>:
   28140:	000257b0 000000c8 00000026 00028118     .W......&.......
   28150:	65747962 32312073 00013433              bytes 1234..

0002815c <const_obj_frozentest__lt_module_gt__2>:
   2815c:	000257ec 00000039 0000000b 00028150     .W..9.......P...

0002816c <const_table_data_frozentest__lt_module_gt_>:
   2816c:	00028108 00028140 0002815c              ....@...\...

00028178 <raw_code_frozentest__lt_module_gt_>:
   28178:	00000002 00028088 0002816c 00000000     ........l.......

00028188 <mp_frozen_mpy_names>:
   28188:	7a6f7266 65746e65 702e7473 00000079     frozentest.py...

00028198 <mp_frozen_mpy_content>:
   28198:	00028178                                x...

0002819c <g_pui32GPIOBaseAddrs>:
   2819c:	40004000 40058000 40005000 40059000     .@.@...@.P.@...@
   281ac:	40006000 4005a000 40007000 4005b000     .`.@...@.p.@...@
   281bc:	40024000 4005c000 40025000 4005d000     .@.@...@.P.@...@
   281cc:	40026000 4005e000 40027000 4005f000     .`.@...@.p.@...@
   281dc:	4003d000 40060000 40061000 40061000     ...@...@...@...@
   281ec:	40062000 40062000 40063000 40063000     . .@. .@.0.@.0.@
   281fc:	40064000 40064000 40065000 40065000     .@.@.@.@.P.@.P.@
   2820c:	40066000 40066000 40067000 40067000     .`.@.`.@.p.@.p.@
   2821c:	40068000 40068000 40069000 40069000     ...@...@...@...@

0002822c <g_pui32Xtals>:
   2822c:	000f4240 001c2000 001e8480 00258000     @B... ........%.
   2823c:	00369e99 00384000 003d0900 003e8000     ..6..@8...=...>.
   2824c:	004b0000 004c4b40 004e2000 005b8d80     ..K.@KL.. N...[.
   2825c:	005dc000 00708000 007a1200 007d0000     ..]...p...z...}.
   2826c:	00989680 00b71b00 00bb8000 00cee8c0     ................
   2827c:	00da7a64 00f42400 00fa0000 0112a880     dz...$..........
   2828c:	01312d00 016e3600 017d7840              .-1..6n.@x}.
